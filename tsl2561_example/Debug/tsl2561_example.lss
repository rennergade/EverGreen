
tsl2561_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d30  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00004d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d0  20000070  00004da0  00020070  2**2
                  ALLOC
  3 .stack        00002000  20000140  00004e70  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002a8f3  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b28  00000000  00000000  0004a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005163  00000000  00000000  0004e50c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000550  00000000  00000000  0005366f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005a8  00000000  00000000  00053bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a53f  00000000  00000000  00054167  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cf01  00000000  00000000  0006e6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000877d7  00000000  00000000  0007b5a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000015e4  00000000  00000000  00102d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 21 00 20 75 1b 00 00 71 1b 00 00 71 1b 00 00     @!. u...q...q...
	...
      2c:	71 1b 00 00 00 00 00 00 00 00 00 00 71 1b 00 00     q...........q...
      3c:	71 1b 00 00 71 1b 00 00 71 1b 00 00 71 1b 00 00     q...q...q...q...
      4c:	71 1b 00 00 71 1b 00 00 71 1b 00 00 71 1b 00 00     q...q...q...q...
      5c:	71 1b 00 00 71 1b 00 00 01 10 00 00 11 10 00 00     q...q...........
      6c:	21 10 00 00 31 10 00 00 41 10 00 00 51 10 00 00     !...1...A...Q...
      7c:	71 1b 00 00 71 1b 00 00 71 1b 00 00 71 1b 00 00     q...q...q...q...
      8c:	71 1b 00 00 71 1b 00 00 00 00 00 00 00 00 00 00     q...q...........
      9c:	71 1b 00 00 71 1b 00 00 71 1b 00 00 71 1b 00 00     q...q...q...q...
      ac:	71 1b 00 00 00 00 00 00                             q.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00004d30 	.word	0x00004d30

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00004d30 	.word	0x00004d30
     10c:	00004d30 	.word	0x00004d30
     110:	00000000 	.word	0x00000000

00000114 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	b082      	sub	sp, #8
     118:	0005      	movs	r5, r0
     11a:	000e      	movs	r6, r1
	uint16_t temp = 0;
     11c:	2200      	movs	r2, #0
     11e:	466b      	mov	r3, sp
     120:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     122:	4c06      	ldr	r4, [pc, #24]	; (13c <usart_serial_getchar+0x28>)
     124:	466b      	mov	r3, sp
     126:	1d99      	adds	r1, r3, #6
     128:	0028      	movs	r0, r5
     12a:	47a0      	blx	r4
     12c:	2800      	cmp	r0, #0
     12e:	d1f9      	bne.n	124 <usart_serial_getchar+0x10>

	*c = temp;
     130:	466b      	mov	r3, sp
     132:	3306      	adds	r3, #6
     134:	881b      	ldrh	r3, [r3, #0]
     136:	7033      	strb	r3, [r6, #0]
}
     138:	b002      	add	sp, #8
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000013d1 	.word	0x000013d1

00000140 <usart_serial_putchar>:
{
     140:	b570      	push	{r4, r5, r6, lr}
     142:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     144:	b28c      	uxth	r4, r1
     146:	4e03      	ldr	r6, [pc, #12]	; (154 <usart_serial_putchar+0x14>)
     148:	0021      	movs	r1, r4
     14a:	0028      	movs	r0, r5
     14c:	47b0      	blx	r6
     14e:	2800      	cmp	r0, #0
     150:	d1fa      	bne.n	148 <usart_serial_putchar+0x8>
}
     152:	bd70      	pop	{r4, r5, r6, pc}
     154:	000013a5 	.word	0x000013a5

00000158 <configure_usart>:
#endif

#ifdef STDIO_SERIAL_H_INCLUDED
extern struct usart_module usart_instance;
void configure_usart()
{
     158:	b5f0      	push	{r4, r5, r6, r7, lr}
     15a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     15c:	2380      	movs	r3, #128	; 0x80
     15e:	05db      	lsls	r3, r3, #23
     160:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     162:	2300      	movs	r3, #0
     164:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     166:	22ff      	movs	r2, #255	; 0xff
     168:	4669      	mov	r1, sp
     16a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     16c:	2200      	movs	r2, #0
     16e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     170:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     172:	2401      	movs	r4, #1
     174:	2124      	movs	r1, #36	; 0x24
     176:	4668      	mov	r0, sp
     178:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     17a:	3101      	adds	r1, #1
     17c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     17e:	3101      	adds	r1, #1
     180:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     182:	3101      	adds	r1, #1
     184:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     186:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     188:	3105      	adds	r1, #5
     18a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     18c:	3101      	adds	r1, #1
     18e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     190:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     192:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     194:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     196:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     198:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     19a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
     19c:	2313      	movs	r3, #19
     19e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     1a0:	7742      	strb	r2, [r0, #29]
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 115200;
     1a2:	23e1      	movs	r3, #225	; 0xe1
     1a4:	025b      	lsls	r3, r3, #9
     1a6:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
     1a8:	23c4      	movs	r3, #196	; 0xc4
     1aa:	039b      	lsls	r3, r3, #14
     1ac:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
     1ae:	2301      	movs	r3, #1
     1b0:	425b      	negs	r3, r3
     1b2:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
     1b4:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
     1b6:	4b17      	ldr	r3, [pc, #92]	; (214 <configure_usart+0xbc>)
     1b8:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
     1ba:	4b17      	ldr	r3, [pc, #92]	; (218 <configure_usart+0xc0>)
     1bc:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     1be:	4d17      	ldr	r5, [pc, #92]	; (21c <configure_usart+0xc4>)
     1c0:	4b17      	ldr	r3, [pc, #92]	; (220 <configure_usart+0xc8>)
     1c2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     1c4:	4a17      	ldr	r2, [pc, #92]	; (224 <configure_usart+0xcc>)
     1c6:	4b18      	ldr	r3, [pc, #96]	; (228 <configure_usart+0xd0>)
     1c8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     1ca:	4a18      	ldr	r2, [pc, #96]	; (22c <configure_usart+0xd4>)
     1cc:	4b18      	ldr	r3, [pc, #96]	; (230 <configure_usart+0xd8>)
     1ce:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     1d0:	466a      	mov	r2, sp
     1d2:	4918      	ldr	r1, [pc, #96]	; (234 <configure_usart+0xdc>)
     1d4:	0028      	movs	r0, r5
     1d6:	4b18      	ldr	r3, [pc, #96]	; (238 <configure_usart+0xe0>)
     1d8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     1da:	4f18      	ldr	r7, [pc, #96]	; (23c <configure_usart+0xe4>)
     1dc:	683b      	ldr	r3, [r7, #0]
     1de:	6898      	ldr	r0, [r3, #8]
     1e0:	2100      	movs	r1, #0
     1e2:	4e17      	ldr	r6, [pc, #92]	; (240 <configure_usart+0xe8>)
     1e4:	47b0      	blx	r6
	setbuf(stdin, NULL);
     1e6:	683b      	ldr	r3, [r7, #0]
     1e8:	6858      	ldr	r0, [r3, #4]
     1ea:	2100      	movs	r1, #0
     1ec:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     1ee:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     1f0:	0030      	movs	r0, r6
     1f2:	4b14      	ldr	r3, [pc, #80]	; (244 <configure_usart+0xec>)
     1f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1f6:	231f      	movs	r3, #31
     1f8:	4018      	ands	r0, r3
     1fa:	4084      	lsls	r4, r0
     1fc:	4b12      	ldr	r3, [pc, #72]	; (248 <configure_usart+0xf0>)
     1fe:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     200:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     202:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     204:	2b00      	cmp	r3, #0
     206:	d1fc      	bne.n	202 <configure_usart+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     208:	6833      	ldr	r3, [r6, #0]
     20a:	2202      	movs	r2, #2
     20c:	4313      	orrs	r3, r2
     20e:	6033      	str	r3, [r6, #0]

	stdio_serial_init(&usart_instance, SERCOM4, &config_usart);

	usart_enable(&usart_instance);
}
     210:	b011      	add	sp, #68	; 0x44
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
     214:	002a0003 	.word	0x002a0003
     218:	002b0003 	.word	0x002b0003
     21c:	20000108 	.word	0x20000108
     220:	20000104 	.word	0x20000104
     224:	00000141 	.word	0x00000141
     228:	20000100 	.word	0x20000100
     22c:	00000115 	.word	0x00000115
     230:	200000fc 	.word	0x200000fc
     234:	42001800 	.word	0x42001800
     238:	00001061 	.word	0x00001061
     23c:	2000000c 	.word	0x2000000c
     240:	00003b09 	.word	0x00003b09
     244:	00000fd1 	.word	0x00000fd1
     248:	e000e100 	.word	0xe000e100

0000024c <configure_i2c_tsl2561>:
#include "TSL2561.h"

tsl2561_i2c_addr tsl2561_addr = 0;

void configure_i2c_tsl2561(tsl2561_i2c_addr addr)
{
     24c:	b530      	push	{r4, r5, lr}
     24e:	b08f      	sub	sp, #60	; 0x3c
     250:	0004      	movs	r4, r0
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     252:	aa01      	add	r2, sp, #4
     254:	2364      	movs	r3, #100	; 0x64
     256:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     258:	4b1f      	ldr	r3, [pc, #124]	; (2d8 <configure_i2c_tsl2561+0x8c>)
     25a:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     25c:	2300      	movs	r3, #0
     25e:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     260:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
     262:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     264:	2180      	movs	r1, #128	; 0x80
     266:	0389      	lsls	r1, r1, #14
     268:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
     26a:	2101      	movs	r1, #1
     26c:	4249      	negs	r1, r1
     26e:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
     270:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     272:	3125      	adds	r1, #37	; 0x25
     274:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     276:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     278:	3108      	adds	r1, #8
     27a:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     27c:	3101      	adds	r1, #1
     27e:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     280:	3101      	adds	r1, #1
     282:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     284:	33d7      	adds	r3, #215	; 0xd7
     286:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
     288:	4b14      	ldr	r3, [pc, #80]	; (2dc <configure_i2c_tsl2561+0x90>)
     28a:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
     28c:	4b14      	ldr	r3, [pc, #80]	; (2e0 <configure_i2c_tsl2561+0x94>)
     28e:	6213      	str	r3, [r2, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
	enum status_code init_status = i2c_master_init(&i2c_tsl2561, SERCOM0, &config_i2c_master);
     290:	4914      	ldr	r1, [pc, #80]	; (2e4 <configure_i2c_tsl2561+0x98>)
     292:	4815      	ldr	r0, [pc, #84]	; (2e8 <configure_i2c_tsl2561+0x9c>)
     294:	4b15      	ldr	r3, [pc, #84]	; (2ec <configure_i2c_tsl2561+0xa0>)
     296:	4798      	blx	r3
	if (STATUS_OK != init_status) {
     298:	2800      	cmp	r0, #0
     29a:	d119      	bne.n	2d0 <configure_i2c_tsl2561+0x84>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     29c:	4b12      	ldr	r3, [pc, #72]	; (2e8 <configure_i2c_tsl2561+0x9c>)
     29e:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     2a0:	2107      	movs	r1, #7
     2a2:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
     2a4:	4219      	tst	r1, r3
     2a6:	d1fc      	bne.n	2a2 <configure_i2c_tsl2561+0x56>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     2a8:	6813      	ldr	r3, [r2, #0]
     2aa:	2102      	movs	r1, #2
     2ac:	430b      	orrs	r3, r1
     2ae:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     2b0:	4b0d      	ldr	r3, [pc, #52]	; (2e8 <configure_i2c_tsl2561+0x9c>)
     2b2:	88dd      	ldrh	r5, [r3, #6]
	uint32_t timeout_counter = 0;
     2b4:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     2b6:	2010      	movs	r0, #16
     2b8:	8b51      	ldrh	r1, [r2, #26]
     2ba:	4201      	tst	r1, r0
     2bc:	d104      	bne.n	2c8 <configure_i2c_tsl2561+0x7c>
		timeout_counter++;
     2be:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     2c0:	42ab      	cmp	r3, r5
     2c2:	d3f9      	bcc.n	2b8 <configure_i2c_tsl2561+0x6c>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     2c4:	2310      	movs	r3, #16
     2c6:	8353      	strh	r3, [r2, #26]
		printf("failed to initialize TSL2561 driver.\r\n");
		return;
	}
	i2c_master_enable(&i2c_tsl2561);
	tsl2561_addr = addr;
     2c8:	4b09      	ldr	r3, [pc, #36]	; (2f0 <configure_i2c_tsl2561+0xa4>)
     2ca:	701c      	strb	r4, [r3, #0]
}
     2cc:	b00f      	add	sp, #60	; 0x3c
     2ce:	bd30      	pop	{r4, r5, pc}
		printf("failed to initialize TSL2561 driver.\r\n");
     2d0:	4808      	ldr	r0, [pc, #32]	; (2f4 <configure_i2c_tsl2561+0xa8>)
     2d2:	4b09      	ldr	r3, [pc, #36]	; (2f8 <configure_i2c_tsl2561+0xac>)
     2d4:	4798      	blx	r3
     2d6:	e7f9      	b.n	2cc <configure_i2c_tsl2561+0x80>
     2d8:	00000d48 	.word	0x00000d48
     2dc:	00080002 	.word	0x00080002
     2e0:	00090002 	.word	0x00090002
     2e4:	42000800 	.word	0x42000800
     2e8:	200000d8 	.word	0x200000d8
     2ec:	00000609 	.word	0x00000609
     2f0:	2000008c 	.word	0x2000008c
     2f4:	00004ab8 	.word	0x00004ab8
     2f8:	00003af5 	.word	0x00003af5

000002fc <read_byte>:


uint8_t read_byte(tsl2561_registers reg)
{
     2fc:	b500      	push	{lr}
     2fe:	b085      	sub	sp, #20
	uint8_t received_data;
	uint8_t write_buffer = reg;
     300:	230e      	movs	r3, #14
     302:	446b      	add	r3, sp
     304:	7018      	strb	r0, [r3, #0]
	struct i2c_master_packet packet = {
     306:	4a18      	ldr	r2, [pc, #96]	; (368 <read_byte+0x6c>)
     308:	7812      	ldrb	r2, [r2, #0]
     30a:	4669      	mov	r1, sp
     30c:	800a      	strh	r2, [r1, #0]
     30e:	2201      	movs	r2, #1
     310:	804a      	strh	r2, [r1, #2]
     312:	9301      	str	r3, [sp, #4]
     314:	2300      	movs	r3, #0
     316:	720b      	strb	r3, [r1, #8]
     318:	724b      	strb	r3, [r1, #9]
     31a:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait(&i2c_tsl2561, &packet);
     31c:	4813      	ldr	r0, [pc, #76]	; (36c <read_byte+0x70>)
     31e:	4b14      	ldr	r3, [pc, #80]	; (370 <read_byte+0x74>)
     320:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
     322:	2800      	cmp	r0, #0
     324:	d008      	beq.n	338 <read_byte+0x3c>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
     326:	230e      	movs	r3, #14
     328:	446b      	add	r3, sp
     32a:	7819      	ldrb	r1, [r3, #0]
     32c:	4811      	ldr	r0, [pc, #68]	; (374 <read_byte+0x78>)
     32e:	4b12      	ldr	r3, [pc, #72]	; (378 <read_byte+0x7c>)
     330:	4798      	blx	r3
		return -1;
     332:	20ff      	movs	r0, #255	; 0xff
	if (STATUS_OK != i2c_code) {
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
		return -1;
	}
	return received_data;
}
     334:	b005      	add	sp, #20
     336:	bd00      	pop	{pc}
	packet.data = &received_data;
     338:	230f      	movs	r3, #15
     33a:	446b      	add	r3, sp
     33c:	9301      	str	r3, [sp, #4]
	packet.data_length = 1;
     33e:	2301      	movs	r3, #1
     340:	466a      	mov	r2, sp
     342:	8053      	strh	r3, [r2, #2]
	i2c_code = i2c_master_read_packet_wait(&i2c_tsl2561, &packet);
     344:	4669      	mov	r1, sp
     346:	4809      	ldr	r0, [pc, #36]	; (36c <read_byte+0x70>)
     348:	4b0c      	ldr	r3, [pc, #48]	; (37c <read_byte+0x80>)
     34a:	4798      	blx	r3
	if (STATUS_OK != i2c_code) {
     34c:	2800      	cmp	r0, #0
     34e:	d103      	bne.n	358 <read_byte+0x5c>
	return received_data;
     350:	230f      	movs	r3, #15
     352:	446b      	add	r3, sp
     354:	7818      	ldrb	r0, [r3, #0]
     356:	e7ed      	b.n	334 <read_byte+0x38>
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
     358:	230e      	movs	r3, #14
     35a:	446b      	add	r3, sp
     35c:	7819      	ldrb	r1, [r3, #0]
     35e:	4808      	ldr	r0, [pc, #32]	; (380 <read_byte+0x84>)
     360:	4b05      	ldr	r3, [pc, #20]	; (378 <read_byte+0x7c>)
     362:	4798      	blx	r3
		return -1;
     364:	20ff      	movs	r0, #255	; 0xff
     366:	e7e5      	b.n	334 <read_byte+0x38>
     368:	2000008c 	.word	0x2000008c
     36c:	200000d8 	.word	0x200000d8
     370:	00000bf5 	.word	0x00000bf5
     374:	00004ae0 	.word	0x00004ae0
     378:	00003a01 	.word	0x00003a01
     37c:	00000be1 	.word	0x00000be1
     380:	00004b18 	.word	0x00004b18

00000384 <write_byte>:

void write_byte(tsl2561_registers reg, uint8_t data_byte)
{
     384:	b500      	push	{lr}
     386:	b085      	sub	sp, #20
	uint8_t write_buffer[2] = { reg, data_byte };
     388:	ab03      	add	r3, sp, #12
     38a:	7018      	strb	r0, [r3, #0]
     38c:	7059      	strb	r1, [r3, #1]
	struct i2c_master_packet packet = {
     38e:	4a0b      	ldr	r2, [pc, #44]	; (3bc <write_byte+0x38>)
     390:	7812      	ldrb	r2, [r2, #0]
     392:	4669      	mov	r1, sp
     394:	800a      	strh	r2, [r1, #0]
     396:	2202      	movs	r2, #2
     398:	804a      	strh	r2, [r1, #2]
     39a:	9301      	str	r3, [sp, #4]
     39c:	2300      	movs	r3, #0
     39e:	720b      	strb	r3, [r1, #8]
     3a0:	724b      	strb	r3, [r1, #9]
     3a2:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_tsl2561, &packet);
     3a4:	4806      	ldr	r0, [pc, #24]	; (3c0 <write_byte+0x3c>)
     3a6:	4b07      	ldr	r3, [pc, #28]	; (3c4 <write_byte+0x40>)
     3a8:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
     3aa:	2800      	cmp	r0, #0
     3ac:	d101      	bne.n	3b2 <write_byte+0x2e>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
		return;
	}
}
     3ae:	b005      	add	sp, #20
     3b0:	bd00      	pop	{pc}
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
     3b2:	a903      	add	r1, sp, #12
     3b4:	4804      	ldr	r0, [pc, #16]	; (3c8 <write_byte+0x44>)
     3b6:	4b05      	ldr	r3, [pc, #20]	; (3cc <write_byte+0x48>)
     3b8:	4798      	blx	r3
     3ba:	e7f8      	b.n	3ae <write_byte+0x2a>
     3bc:	2000008c 	.word	0x2000008c
     3c0:	200000d8 	.word	0x200000d8
     3c4:	00000c09 	.word	0x00000c09
     3c8:	00004ae0 	.word	0x00004ae0
     3cc:	00003a01 	.word	0x00003a01

000003d0 <set_gain>:
 * For now the integration time will always be 402ms. Will update once decide
 * if we need faster readings
 * @param new_gain new gain multiplier
 */
void set_gain(tsl2561_gains new_gain)
{
     3d0:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | TIMING_REG, (INTEGRATE_402MS | new_gain));
     3d2:	2102      	movs	r1, #2
     3d4:	4301      	orrs	r1, r0
     3d6:	2081      	movs	r0, #129	; 0x81
     3d8:	4b01      	ldr	r3, [pc, #4]	; (3e0 <set_gain+0x10>)
     3da:	4798      	blx	r3
}
     3dc:	bd10      	pop	{r4, pc}
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	00000385 	.word	0x00000385

000003e4 <power_on_tsl2561>:

void power_on_tsl2561()
{
     3e4:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | CTRL_REG, 0x03);
     3e6:	2103      	movs	r1, #3
     3e8:	2080      	movs	r0, #128	; 0x80
     3ea:	4b03      	ldr	r3, [pc, #12]	; (3f8 <power_on_tsl2561+0x14>)
     3ec:	4798      	blx	r3
	set_gain(GAIN_16X);
     3ee:	2010      	movs	r0, #16
     3f0:	4b02      	ldr	r3, [pc, #8]	; (3fc <power_on_tsl2561+0x18>)
     3f2:	4798      	blx	r3
}
     3f4:	bd10      	pop	{r4, pc}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	00000385 	.word	0x00000385
     3fc:	000003d1 	.word	0x000003d1

00000400 <get_tsl2561_device_id>:
	write_byte(CMD_BIT | CTRL_REG, 0x0);
}

//SHOULD RETURN 0x50
uint8_t get_tsl2561_device_id()
{
     400:	b510      	push	{r4, lr}
	return read_byte(CMD_BIT | ID_REG);
     402:	208a      	movs	r0, #138	; 0x8a
     404:	4b01      	ldr	r3, [pc, #4]	; (40c <get_tsl2561_device_id+0xc>)
     406:	4798      	blx	r3
}
     408:	bd10      	pop	{r4, pc}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	000002fd 	.word	0x000002fd

00000410 <get_chan0>:

uint16_t get_chan0()
{
     410:	b570      	push	{r4, r5, r6, lr}
	//TODO: add way to change this
	delay_ms(403);
     412:	2094      	movs	r0, #148	; 0x94
     414:	30ff      	adds	r0, #255	; 0xff
     416:	4b06      	ldr	r3, [pc, #24]	; (430 <get_chan0+0x20>)
     418:	4798      	blx	r3
	//HAVE TO READ LOW REGISTER BEFORE HIGH REG PER DATASHEET
	return read_byte(CMD_BIT | CHAN0_LOW_REG) | (read_byte(CMD_BIT | CHAN0_HIGH_REG) << 8);
     41a:	208c      	movs	r0, #140	; 0x8c
     41c:	4c05      	ldr	r4, [pc, #20]	; (434 <get_chan0+0x24>)
     41e:	47a0      	blx	r4
     420:	0005      	movs	r5, r0
     422:	208d      	movs	r0, #141	; 0x8d
     424:	47a0      	blx	r4
     426:	0200      	lsls	r0, r0, #8
     428:	4328      	orrs	r0, r5
     42a:	b280      	uxth	r0, r0
}
     42c:	bd70      	pop	{r4, r5, r6, pc}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	00000561 	.word	0x00000561
     434:	000002fd 	.word	0x000002fd

00000438 <get_chan1>:

uint16_t get_chan1()
{
     438:	b570      	push	{r4, r5, r6, lr}
	//TODO: add way to change this
	delay_ms(403);
     43a:	2094      	movs	r0, #148	; 0x94
     43c:	30ff      	adds	r0, #255	; 0xff
     43e:	4b06      	ldr	r3, [pc, #24]	; (458 <get_chan1+0x20>)
     440:	4798      	blx	r3
	return read_byte(CMD_BIT | CHAN1_LOW_REG) | (read_byte(CMD_BIT | CHAN1_HIGH_REG) << 8);
     442:	208e      	movs	r0, #142	; 0x8e
     444:	4c05      	ldr	r4, [pc, #20]	; (45c <get_chan1+0x24>)
     446:	47a0      	blx	r4
     448:	0005      	movs	r5, r0
     44a:	208f      	movs	r0, #143	; 0x8f
     44c:	47a0      	blx	r4
     44e:	0200      	lsls	r0, r0, #8
     450:	4328      	orrs	r0, r5
     452:	b280      	uxth	r0, r0
}
     454:	bd70      	pop	{r4, r5, r6, pc}
     456:	46c0      	nop			; (mov r8, r8)
     458:	00000561 	.word	0x00000561
     45c:	000002fd 	.word	0x000002fd

00000460 <get_lux>:

uint32_t get_lux()
{
     460:	b570      	push	{r4, r5, r6, lr}
	uint16_t chan0 = get_chan0();
     462:	4b26      	ldr	r3, [pc, #152]	; (4fc <get_lux+0x9c>)
     464:	4798      	blx	r3
     466:	0004      	movs	r4, r0
	uint16_t chan1 = get_chan1();
     468:	4b25      	ldr	r3, [pc, #148]	; (500 <get_lux+0xa0>)
     46a:	4798      	blx	r3
     46c:	0005      	movs	r5, r0
		printf("get_lux: TSL2561 light is saturated");
		return -1;
	}

	unsigned long ratio10 = 0;
	if(chan0 != 0) {
     46e:	2c00      	cmp	r4, #0
     470:	d01b      	beq.n	4aa <get_lux+0x4a>
		 ratio10 = (chan1 << (TSL2561_LUX_RATIOSCALE + 1)) / chan0;
     472:	0280      	lsls	r0, r0, #10
     474:	0021      	movs	r1, r4
     476:	4b23      	ldr	r3, [pc, #140]	; (504 <get_lux+0xa4>)
     478:	4798      	blx	r3
	}
	ratio10 = (ratio10 + 1) >> 1;
     47a:	3001      	adds	r0, #1
     47c:	0840      	lsrs	r0, r0, #1
	unsigned int b, m;

	if ((ratio10 >= 0) && (ratio10 <= TSL2561_LUX_K1T)) {
     47e:	2840      	cmp	r0, #64	; 0x40
     480:	d920      	bls.n	4c4 <get_lux+0x64>
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
	} else if (ratio10 <= TSL2561_LUX_K2T) {
     482:	2880      	cmp	r0, #128	; 0x80
     484:	d923      	bls.n	4ce <get_lux+0x6e>
		b = TSL2561_LUX_B2T; m = TSL2561_LUX_M2T;
	} else if (ratio10 <= TSL2561_LUX_K3T) {
     486:	28c0      	cmp	r0, #192	; 0xc0
     488:	d925      	bls.n	4d6 <get_lux+0x76>
		b = TSL2561_LUX_B3T; m = TSL2561_LUX_M3T;
	} else if (ratio10 <= TSL2561_LUX_K4T) {
     48a:	2380      	movs	r3, #128	; 0x80
     48c:	005b      	lsls	r3, r3, #1
     48e:	4298      	cmp	r0, r3
     490:	d924      	bls.n	4dc <get_lux+0x7c>
		b = TSL2561_LUX_B4T; m = TSL2561_LUX_M4T;
	} else if (ratio10 <= TSL2561_LUX_K5T) {
     492:	3338      	adds	r3, #56	; 0x38
     494:	4298      	cmp	r0, r3
     496:	d925      	bls.n	4e4 <get_lux+0x84>
		b = TSL2561_LUX_B5T; m = TSL2561_LUX_M5T;
	} else if (ratio10 <= TSL2561_LUX_K6T) {
     498:	3362      	adds	r3, #98	; 0x62
     49a:	4298      	cmp	r0, r3
     49c:	d927      	bls.n	4ee <get_lux+0x8e>
		b = TSL2561_LUX_B6T; m = TSL2561_LUX_M6T;
	} else if (ratio10 <= TSL2561_LUX_K7T) {
     49e:	4b1a      	ldr	r3, [pc, #104]	; (508 <get_lux+0xa8>)
     4a0:	4298      	cmp	r0, r3
     4a2:	d927      	bls.n	4f4 <get_lux+0x94>
		b = TSL2561_LUX_B7T; m = TSL2561_LUX_M7T;
	} else if (ratio10 > TSL2561_LUX_K8T) {
		b = TSL2561_LUX_B8T; m = TSL2561_LUX_M8T;
     4a4:	2300      	movs	r3, #0
     4a6:	2000      	movs	r0, #0
     4a8:	e003      	b.n	4b2 <get_lux+0x52>
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
     4aa:	23df      	movs	r3, #223	; 0xdf
     4ac:	005b      	lsls	r3, r3, #1
     4ae:	20f9      	movs	r0, #249	; 0xf9
     4b0:	0040      	lsls	r0, r0, #1
	}
	
	
	unsigned long temp = ((chan0 * b) - (chan1 * m));
     4b2:	4360      	muls	r0, r4
	temp = (temp) ? temp : 0; // no negative lux
	temp += (1 << (TSL2561_LUX_LUXSCALE - 1));
     4b4:	2280      	movs	r2, #128	; 0x80
     4b6:	0192      	lsls	r2, r2, #6
     4b8:	4694      	mov	ip, r2
     4ba:	4460      	add	r0, ip
	unsigned long temp = ((chan0 * b) - (chan1 * m));
     4bc:	435d      	muls	r5, r3
	temp += (1 << (TSL2561_LUX_LUXSCALE - 1));
     4be:	1b40      	subs	r0, r0, r5
	uint32_t lux = temp >> TSL2561_LUX_LUXSCALE;
     4c0:	0b80      	lsrs	r0, r0, #14
	return lux;
}
     4c2:	bd70      	pop	{r4, r5, r6, pc}
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
     4c4:	23df      	movs	r3, #223	; 0xdf
     4c6:	005b      	lsls	r3, r3, #1
     4c8:	20f9      	movs	r0, #249	; 0xf9
     4ca:	0040      	lsls	r0, r0, #1
     4cc:	e7f1      	b.n	4b2 <get_lux+0x52>
		b = TSL2561_LUX_B2T; m = TSL2561_LUX_M2T;
     4ce:	4b0f      	ldr	r3, [pc, #60]	; (50c <get_lux+0xac>)
     4d0:	2085      	movs	r0, #133	; 0x85
     4d2:	0080      	lsls	r0, r0, #2
     4d4:	e7ed      	b.n	4b2 <get_lux+0x52>
		b = TSL2561_LUX_B3T; m = TSL2561_LUX_M3T;
     4d6:	4b0e      	ldr	r3, [pc, #56]	; (510 <get_lux+0xb0>)
     4d8:	480e      	ldr	r0, [pc, #56]	; (514 <get_lux+0xb4>)
     4da:	e7ea      	b.n	4b2 <get_lux+0x52>
		b = TSL2561_LUX_B4T; m = TSL2561_LUX_M4T;
     4dc:	4b0e      	ldr	r3, [pc, #56]	; (518 <get_lux+0xb8>)
     4de:	209c      	movs	r0, #156	; 0x9c
     4e0:	0080      	lsls	r0, r0, #2
     4e2:	e7e6      	b.n	4b2 <get_lux+0x52>
		b = TSL2561_LUX_B5T; m = TSL2561_LUX_M5T;
     4e4:	23fe      	movs	r3, #254	; 0xfe
     4e6:	005b      	lsls	r3, r3, #1
     4e8:	2070      	movs	r0, #112	; 0x70
     4ea:	30ff      	adds	r0, #255	; 0xff
     4ec:	e7e1      	b.n	4b2 <get_lux+0x52>
		b = TSL2561_LUX_B6T; m = TSL2561_LUX_M6T;
     4ee:	23fb      	movs	r3, #251	; 0xfb
     4f0:	20d2      	movs	r0, #210	; 0xd2
     4f2:	e7de      	b.n	4b2 <get_lux+0x52>
		b = TSL2561_LUX_B7T; m = TSL2561_LUX_M7T;
     4f4:	2312      	movs	r3, #18
     4f6:	2018      	movs	r0, #24
     4f8:	e7db      	b.n	4b2 <get_lux+0x52>
     4fa:	46c0      	nop			; (mov r8, r8)
     4fc:	00000411 	.word	0x00000411
     500:	00000439 	.word	0x00000439
     504:	00001eb5 	.word	0x00001eb5
     508:	0000029a 	.word	0x0000029a
     50c:	000002d1 	.word	0x000002d1
     510:	0000037b 	.word	0x0000037b
     514:	0000023f 	.word	0x0000023f
     518:	000003fe 	.word	0x000003fe

0000051c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     51c:	4770      	bx	lr
	...

00000520 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     520:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     522:	2000      	movs	r0, #0
     524:	4b08      	ldr	r3, [pc, #32]	; (548 <delay_init+0x28>)
     526:	4798      	blx	r3
     528:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     52a:	4c08      	ldr	r4, [pc, #32]	; (54c <delay_init+0x2c>)
     52c:	21fa      	movs	r1, #250	; 0xfa
     52e:	0089      	lsls	r1, r1, #2
     530:	47a0      	blx	r4
     532:	4b07      	ldr	r3, [pc, #28]	; (550 <delay_init+0x30>)
     534:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     536:	4907      	ldr	r1, [pc, #28]	; (554 <delay_init+0x34>)
     538:	0028      	movs	r0, r5
     53a:	47a0      	blx	r4
     53c:	4b06      	ldr	r3, [pc, #24]	; (558 <delay_init+0x38>)
     53e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     540:	2205      	movs	r2, #5
     542:	4b06      	ldr	r3, [pc, #24]	; (55c <delay_init+0x3c>)
     544:	601a      	str	r2, [r3, #0]
}
     546:	bd70      	pop	{r4, r5, r6, pc}
     548:	00001901 	.word	0x00001901
     54c:	00001da1 	.word	0x00001da1
     550:	20000000 	.word	0x20000000
     554:	000f4240 	.word	0x000f4240
     558:	20000004 	.word	0x20000004
     55c:	e000e010 	.word	0xe000e010

00000560 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     560:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     562:	4b08      	ldr	r3, [pc, #32]	; (584 <delay_cycles_ms+0x24>)
     564:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     566:	4a08      	ldr	r2, [pc, #32]	; (588 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     568:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     56a:	2180      	movs	r1, #128	; 0x80
     56c:	0249      	lsls	r1, r1, #9
	while (n--) {
     56e:	3801      	subs	r0, #1
     570:	d307      	bcc.n	582 <delay_cycles_ms+0x22>
	if (n > 0) {
     572:	2c00      	cmp	r4, #0
     574:	d0fb      	beq.n	56e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     576:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     578:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     57a:	6813      	ldr	r3, [r2, #0]
     57c:	420b      	tst	r3, r1
     57e:	d0fc      	beq.n	57a <delay_cycles_ms+0x1a>
     580:	e7f5      	b.n	56e <delay_cycles_ms+0xe>
	}
}
     582:	bd30      	pop	{r4, r5, pc}
     584:	20000000 	.word	0x20000000
     588:	e000e010 	.word	0xe000e010

0000058c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     58c:	4b0c      	ldr	r3, [pc, #48]	; (5c0 <cpu_irq_enter_critical+0x34>)
     58e:	681b      	ldr	r3, [r3, #0]
     590:	2b00      	cmp	r3, #0
     592:	d106      	bne.n	5a2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     594:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     598:	2b00      	cmp	r3, #0
     59a:	d007      	beq.n	5ac <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     59c:	2200      	movs	r2, #0
     59e:	4b09      	ldr	r3, [pc, #36]	; (5c4 <cpu_irq_enter_critical+0x38>)
     5a0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     5a2:	4a07      	ldr	r2, [pc, #28]	; (5c0 <cpu_irq_enter_critical+0x34>)
     5a4:	6813      	ldr	r3, [r2, #0]
     5a6:	3301      	adds	r3, #1
     5a8:	6013      	str	r3, [r2, #0]
}
     5aa:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     5ac:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     5ae:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     5b2:	2200      	movs	r2, #0
     5b4:	4b04      	ldr	r3, [pc, #16]	; (5c8 <cpu_irq_enter_critical+0x3c>)
     5b6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     5b8:	3201      	adds	r2, #1
     5ba:	4b02      	ldr	r3, [pc, #8]	; (5c4 <cpu_irq_enter_critical+0x38>)
     5bc:	701a      	strb	r2, [r3, #0]
     5be:	e7f0      	b.n	5a2 <cpu_irq_enter_critical+0x16>
     5c0:	20000090 	.word	0x20000090
     5c4:	20000094 	.word	0x20000094
     5c8:	20000008 	.word	0x20000008

000005cc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     5cc:	4b08      	ldr	r3, [pc, #32]	; (5f0 <cpu_irq_leave_critical+0x24>)
     5ce:	681a      	ldr	r2, [r3, #0]
     5d0:	3a01      	subs	r2, #1
     5d2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     5d4:	681b      	ldr	r3, [r3, #0]
     5d6:	2b00      	cmp	r3, #0
     5d8:	d109      	bne.n	5ee <cpu_irq_leave_critical+0x22>
     5da:	4b06      	ldr	r3, [pc, #24]	; (5f4 <cpu_irq_leave_critical+0x28>)
     5dc:	781b      	ldrb	r3, [r3, #0]
     5de:	2b00      	cmp	r3, #0
     5e0:	d005      	beq.n	5ee <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     5e2:	2201      	movs	r2, #1
     5e4:	4b04      	ldr	r3, [pc, #16]	; (5f8 <cpu_irq_leave_critical+0x2c>)
     5e6:	701a      	strb	r2, [r3, #0]
     5e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     5ec:	b662      	cpsie	i
	}
}
     5ee:	4770      	bx	lr
     5f0:	20000090 	.word	0x20000090
     5f4:	20000094 	.word	0x20000094
     5f8:	20000008 	.word	0x20000008

000005fc <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     5fc:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     5fe:	2207      	movs	r2, #7
     600:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     602:	421a      	tst	r2, r3
     604:	d1fc      	bne.n	600 <_i2c_master_wait_for_sync+0x4>
}
     606:	4770      	bx	lr

00000608 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     608:	b5f0      	push	{r4, r5, r6, r7, lr}
     60a:	46d6      	mov	lr, sl
     60c:	464f      	mov	r7, r9
     60e:	4646      	mov	r6, r8
     610:	b5c0      	push	{r6, r7, lr}
     612:	b08a      	sub	sp, #40	; 0x28
     614:	0006      	movs	r6, r0
     616:	000f      	movs	r7, r1
     618:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     61a:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     61c:	0008      	movs	r0, r1
     61e:	4b97      	ldr	r3, [pc, #604]	; (87c <i2c_master_init+0x274>)
     620:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     622:	4a97      	ldr	r2, [pc, #604]	; (880 <i2c_master_init+0x278>)
     624:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     626:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     628:	2301      	movs	r3, #1
     62a:	40ab      	lsls	r3, r5
     62c:	430b      	orrs	r3, r1
     62e:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     630:	a909      	add	r1, sp, #36	; 0x24
     632:	7b23      	ldrb	r3, [r4, #12]
     634:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     636:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     638:	b2c5      	uxtb	r5, r0
     63a:	0028      	movs	r0, r5
     63c:	4b91      	ldr	r3, [pc, #580]	; (884 <i2c_master_init+0x27c>)
     63e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     640:	0028      	movs	r0, r5
     642:	4b91      	ldr	r3, [pc, #580]	; (888 <i2c_master_init+0x280>)
     644:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     646:	7b20      	ldrb	r0, [r4, #12]
     648:	2100      	movs	r1, #0
     64a:	4b90      	ldr	r3, [pc, #576]	; (88c <i2c_master_init+0x284>)
     64c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     64e:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     650:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     652:	079b      	lsls	r3, r3, #30
     654:	d505      	bpl.n	662 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     656:	b00a      	add	sp, #40	; 0x28
     658:	bc1c      	pop	{r2, r3, r4}
     65a:	4690      	mov	r8, r2
     65c:	4699      	mov	r9, r3
     65e:	46a2      	mov	sl, r4
     660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     662:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     664:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     666:	07db      	lsls	r3, r3, #31
     668:	d4f5      	bmi.n	656 <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     66a:	2314      	movs	r3, #20
     66c:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     66e:	6833      	ldr	r3, [r6, #0]
     670:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     672:	0018      	movs	r0, r3
     674:	4b81      	ldr	r3, [pc, #516]	; (87c <i2c_master_init+0x274>)
     676:	4798      	blx	r3
     678:	0005      	movs	r5, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     67a:	2380      	movs	r3, #128	; 0x80
     67c:	aa08      	add	r2, sp, #32
     67e:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     680:	2300      	movs	r3, #0
     682:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     684:	2201      	movs	r2, #1
     686:	a908      	add	r1, sp, #32
     688:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     68a:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     68c:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     68e:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     690:	2800      	cmp	r0, #0
     692:	d100      	bne.n	696 <i2c_master_init+0x8e>
     694:	e0af      	b.n	7f6 <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
     696:	ab08      	add	r3, sp, #32
     698:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     69a:	2302      	movs	r3, #2
     69c:	aa08      	add	r2, sp, #32
     69e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     6a0:	0c00      	lsrs	r0, r0, #16
     6a2:	b2c0      	uxtb	r0, r0
     6a4:	0011      	movs	r1, r2
     6a6:	4b7a      	ldr	r3, [pc, #488]	; (890 <i2c_master_init+0x288>)
     6a8:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     6aa:	2f00      	cmp	r7, #0
     6ac:	d100      	bne.n	6b0 <i2c_master_init+0xa8>
     6ae:	e0a7      	b.n	800 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
     6b0:	ab08      	add	r3, sp, #32
     6b2:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     6b4:	2302      	movs	r3, #2
     6b6:	aa08      	add	r2, sp, #32
     6b8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     6ba:	0c3f      	lsrs	r7, r7, #16
     6bc:	b2f8      	uxtb	r0, r7
     6be:	0011      	movs	r1, r2
     6c0:	4b73      	ldr	r3, [pc, #460]	; (890 <i2c_master_init+0x288>)
     6c2:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     6c4:	8aa3      	ldrh	r3, [r4, #20]
     6c6:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     6c8:	8ae3      	ldrh	r3, [r4, #22]
     6ca:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     6cc:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     6ce:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     6d0:	2b00      	cmp	r3, #0
     6d2:	d104      	bne.n	6de <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     6d4:	4b6f      	ldr	r3, [pc, #444]	; (894 <i2c_master_init+0x28c>)
     6d6:	789b      	ldrb	r3, [r3, #2]
     6d8:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     6da:	0fdb      	lsrs	r3, r3, #31
     6dc:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     6de:	68a1      	ldr	r1, [r4, #8]
     6e0:	6923      	ldr	r3, [r4, #16]
     6e2:	430b      	orrs	r3, r1
     6e4:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     6e6:	2224      	movs	r2, #36	; 0x24
     6e8:	5ca2      	ldrb	r2, [r4, r2]
     6ea:	2a00      	cmp	r2, #0
     6ec:	d002      	beq.n	6f4 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     6ee:	2280      	movs	r2, #128	; 0x80
     6f0:	05d2      	lsls	r2, r2, #23
     6f2:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     6f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     6f6:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     6f8:	222c      	movs	r2, #44	; 0x2c
     6fa:	5ca2      	ldrb	r2, [r4, r2]
     6fc:	2a00      	cmp	r2, #0
     6fe:	d103      	bne.n	708 <i2c_master_init+0x100>
     700:	2280      	movs	r2, #128	; 0x80
     702:	0492      	lsls	r2, r2, #18
     704:	4291      	cmp	r1, r2
     706:	d102      	bne.n	70e <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     708:	2280      	movs	r2, #128	; 0x80
     70a:	0512      	lsls	r2, r2, #20
     70c:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     70e:	222d      	movs	r2, #45	; 0x2d
     710:	5ca2      	ldrb	r2, [r4, r2]
     712:	2a00      	cmp	r2, #0
     714:	d002      	beq.n	71c <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     716:	2280      	movs	r2, #128	; 0x80
     718:	0412      	lsls	r2, r2, #16
     71a:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     71c:	222e      	movs	r2, #46	; 0x2e
     71e:	5ca2      	ldrb	r2, [r4, r2]
     720:	2a00      	cmp	r2, #0
     722:	d002      	beq.n	72a <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     724:	2280      	movs	r2, #128	; 0x80
     726:	03d2      	lsls	r2, r2, #15
     728:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     72a:	4642      	mov	r2, r8
     72c:	6812      	ldr	r2, [r2, #0]
     72e:	4313      	orrs	r3, r2
     730:	4642      	mov	r2, r8
     732:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     734:	2380      	movs	r3, #128	; 0x80
     736:	005b      	lsls	r3, r3, #1
     738:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     73a:	0028      	movs	r0, r5
     73c:	3014      	adds	r0, #20
     73e:	b2c0      	uxtb	r0, r0
     740:	4b55      	ldr	r3, [pc, #340]	; (898 <i2c_master_init+0x290>)
     742:	4798      	blx	r3
     744:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     746:	23fa      	movs	r3, #250	; 0xfa
     748:	009b      	lsls	r3, r3, #2
     74a:	6822      	ldr	r2, [r4, #0]
     74c:	435a      	muls	r2, r3
     74e:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     750:	6863      	ldr	r3, [r4, #4]
     752:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     754:	4d51      	ldr	r5, [pc, #324]	; (89c <i2c_master_init+0x294>)
     756:	47a8      	blx	r5
     758:	9000      	str	r0, [sp, #0]
     75a:	9101      	str	r1, [sp, #4]
     75c:	464b      	mov	r3, r9
     75e:	0058      	lsls	r0, r3, #1
     760:	47a8      	blx	r5
     762:	9002      	str	r0, [sp, #8]
     764:	9103      	str	r1, [sp, #12]
     766:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     768:	47a8      	blx	r5
     76a:	9004      	str	r0, [sp, #16]
     76c:	9105      	str	r1, [sp, #20]
     76e:	4f4c      	ldr	r7, [pc, #304]	; (8a0 <i2c_master_init+0x298>)
     770:	4a4c      	ldr	r2, [pc, #304]	; (8a4 <i2c_master_init+0x29c>)
     772:	4b4d      	ldr	r3, [pc, #308]	; (8a8 <i2c_master_init+0x2a0>)
     774:	9800      	ldr	r0, [sp, #0]
     776:	9901      	ldr	r1, [sp, #4]
     778:	47b8      	blx	r7
     77a:	0002      	movs	r2, r0
     77c:	000b      	movs	r3, r1
     77e:	9804      	ldr	r0, [sp, #16]
     780:	9905      	ldr	r1, [sp, #20]
     782:	47b8      	blx	r7
     784:	4e49      	ldr	r6, [pc, #292]	; (8ac <i2c_master_init+0x2a4>)
     786:	2200      	movs	r2, #0
     788:	4b49      	ldr	r3, [pc, #292]	; (8b0 <i2c_master_init+0x2a8>)
     78a:	47b0      	blx	r6
     78c:	9004      	str	r0, [sp, #16]
     78e:	9105      	str	r1, [sp, #20]
     790:	4648      	mov	r0, r9
     792:	47a8      	blx	r5
     794:	0002      	movs	r2, r0
     796:	000b      	movs	r3, r1
     798:	9804      	ldr	r0, [sp, #16]
     79a:	9905      	ldr	r1, [sp, #20]
     79c:	47b8      	blx	r7
     79e:	0002      	movs	r2, r0
     7a0:	000b      	movs	r3, r1
     7a2:	4d44      	ldr	r5, [pc, #272]	; (8b4 <i2c_master_init+0x2ac>)
     7a4:	9800      	ldr	r0, [sp, #0]
     7a6:	9901      	ldr	r1, [sp, #4]
     7a8:	47a8      	blx	r5
     7aa:	9a02      	ldr	r2, [sp, #8]
     7ac:	9b03      	ldr	r3, [sp, #12]
     7ae:	47b0      	blx	r6
     7b0:	2200      	movs	r2, #0
     7b2:	4b41      	ldr	r3, [pc, #260]	; (8b8 <i2c_master_init+0x2b0>)
     7b4:	47a8      	blx	r5
     7b6:	9a02      	ldr	r2, [sp, #8]
     7b8:	9b03      	ldr	r3, [sp, #12]
     7ba:	4d40      	ldr	r5, [pc, #256]	; (8bc <i2c_master_init+0x2b4>)
     7bc:	47a8      	blx	r5
     7be:	4b40      	ldr	r3, [pc, #256]	; (8c0 <i2c_master_init+0x2b8>)
     7c0:	4798      	blx	r3
     7c2:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     7c4:	2380      	movs	r3, #128	; 0x80
     7c6:	049b      	lsls	r3, r3, #18
     7c8:	68a2      	ldr	r2, [r4, #8]
     7ca:	429a      	cmp	r2, r3
     7cc:	d01e      	beq.n	80c <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     7ce:	0003      	movs	r3, r0
     7d0:	2040      	movs	r0, #64	; 0x40
     7d2:	2dff      	cmp	r5, #255	; 0xff
     7d4:	d900      	bls.n	7d8 <i2c_master_init+0x1d0>
     7d6:	e73e      	b.n	656 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     7d8:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     7da:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     7dc:	25ff      	movs	r5, #255	; 0xff
     7de:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     7e0:	0624      	lsls	r4, r4, #24
     7e2:	4325      	orrs	r5, r4
     7e4:	0400      	lsls	r0, r0, #16
     7e6:	23ff      	movs	r3, #255	; 0xff
     7e8:	041b      	lsls	r3, r3, #16
     7ea:	4018      	ands	r0, r3
     7ec:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     7ee:	4643      	mov	r3, r8
     7f0:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     7f2:	2000      	movs	r0, #0
     7f4:	e72f      	b.n	656 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     7f6:	2100      	movs	r1, #0
     7f8:	4640      	mov	r0, r8
     7fa:	4b32      	ldr	r3, [pc, #200]	; (8c4 <i2c_master_init+0x2bc>)
     7fc:	4798      	blx	r3
     7fe:	e74a      	b.n	696 <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     800:	2101      	movs	r1, #1
     802:	4640      	mov	r0, r8
     804:	4b2f      	ldr	r3, [pc, #188]	; (8c4 <i2c_master_init+0x2bc>)
     806:	4798      	blx	r3
     808:	0007      	movs	r7, r0
     80a:	e751      	b.n	6b0 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     80c:	26fa      	movs	r6, #250	; 0xfa
     80e:	00b6      	lsls	r6, r6, #2
     810:	4653      	mov	r3, sl
     812:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     814:	9800      	ldr	r0, [sp, #0]
     816:	9901      	ldr	r1, [sp, #4]
     818:	0002      	movs	r2, r0
     81a:	000b      	movs	r3, r1
     81c:	4c23      	ldr	r4, [pc, #140]	; (8ac <i2c_master_init+0x2a4>)
     81e:	47a0      	blx	r4
     820:	9000      	str	r0, [sp, #0]
     822:	9101      	str	r1, [sp, #4]
     824:	0030      	movs	r0, r6
     826:	4b1d      	ldr	r3, [pc, #116]	; (89c <i2c_master_init+0x294>)
     828:	4798      	blx	r3
     82a:	2200      	movs	r2, #0
     82c:	4b26      	ldr	r3, [pc, #152]	; (8c8 <i2c_master_init+0x2c0>)
     82e:	47b8      	blx	r7
     830:	0002      	movs	r2, r0
     832:	000b      	movs	r3, r1
     834:	9800      	ldr	r0, [sp, #0]
     836:	9901      	ldr	r1, [sp, #4]
     838:	4c20      	ldr	r4, [pc, #128]	; (8bc <i2c_master_init+0x2b4>)
     83a:	47a0      	blx	r4
     83c:	2200      	movs	r2, #0
     83e:	4b1e      	ldr	r3, [pc, #120]	; (8b8 <i2c_master_init+0x2b0>)
     840:	4c1c      	ldr	r4, [pc, #112]	; (8b4 <i2c_master_init+0x2ac>)
     842:	47a0      	blx	r4
     844:	4b1e      	ldr	r3, [pc, #120]	; (8c0 <i2c_master_init+0x2b8>)
     846:	4798      	blx	r3
     848:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     84a:	d00c      	beq.n	866 <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     84c:	0031      	movs	r1, r6
     84e:	9807      	ldr	r0, [sp, #28]
     850:	4b1e      	ldr	r3, [pc, #120]	; (8cc <i2c_master_init+0x2c4>)
     852:	4798      	blx	r3
     854:	3802      	subs	r0, #2
     856:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     858:	002b      	movs	r3, r5
     85a:	2dff      	cmp	r5, #255	; 0xff
     85c:	d80c      	bhi.n	878 <i2c_master_init+0x270>
     85e:	28ff      	cmp	r0, #255	; 0xff
     860:	d9bc      	bls.n	7dc <i2c_master_init+0x1d4>
     862:	2040      	movs	r0, #64	; 0x40
     864:	e6f7      	b.n	656 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     866:	0071      	lsls	r1, r6, #1
     868:	1e48      	subs	r0, r1, #1
     86a:	9b07      	ldr	r3, [sp, #28]
     86c:	469c      	mov	ip, r3
     86e:	4460      	add	r0, ip
     870:	4b16      	ldr	r3, [pc, #88]	; (8cc <i2c_master_init+0x2c4>)
     872:	4798      	blx	r3
     874:	3801      	subs	r0, #1
     876:	e7ef      	b.n	858 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     878:	2040      	movs	r0, #64	; 0x40
     87a:	e6ec      	b.n	656 <i2c_master_init+0x4e>
     87c:	00000f59 	.word	0x00000f59
     880:	40000400 	.word	0x40000400
     884:	00001a19 	.word	0x00001a19
     888:	0000198d 	.word	0x0000198d
     88c:	00000d95 	.word	0x00000d95
     890:	00001b11 	.word	0x00001b11
     894:	41002000 	.word	0x41002000
     898:	00001a35 	.word	0x00001a35
     89c:	000038fd 	.word	0x000038fd
     8a0:	00002d69 	.word	0x00002d69
     8a4:	e826d695 	.word	0xe826d695
     8a8:	3e112e0b 	.word	0x3e112e0b
     8ac:	000020e1 	.word	0x000020e1
     8b0:	40240000 	.word	0x40240000
     8b4:	00003269 	.word	0x00003269
     8b8:	3ff00000 	.word	0x3ff00000
     8bc:	00002701 	.word	0x00002701
     8c0:	00003895 	.word	0x00003895
     8c4:	00000de1 	.word	0x00000de1
     8c8:	40080000 	.word	0x40080000
     8cc:	00001da1 	.word	0x00001da1

000008d0 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8d0:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     8d2:	7e1a      	ldrb	r2, [r3, #24]
     8d4:	0792      	lsls	r2, r2, #30
     8d6:	d507      	bpl.n	8e8 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     8d8:	2202      	movs	r2, #2
     8da:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     8dc:	8b5b      	ldrh	r3, [r3, #26]
     8de:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     8e0:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     8e2:	17db      	asrs	r3, r3, #31
     8e4:	4018      	ands	r0, r3
}
     8e6:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     8e8:	8b5a      	ldrh	r2, [r3, #26]
     8ea:	0752      	lsls	r2, r2, #29
     8ec:	d506      	bpl.n	8fc <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8ee:	6859      	ldr	r1, [r3, #4]
     8f0:	22c0      	movs	r2, #192	; 0xc0
     8f2:	0292      	lsls	r2, r2, #10
     8f4:	430a      	orrs	r2, r1
     8f6:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     8f8:	2018      	movs	r0, #24
     8fa:	e7f4      	b.n	8e6 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     8fc:	2000      	movs	r0, #0
     8fe:	e7f2      	b.n	8e6 <_i2c_master_address_response+0x16>

00000900 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     900:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     902:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     904:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     906:	2401      	movs	r4, #1
     908:	2502      	movs	r5, #2
     90a:	7e11      	ldrb	r1, [r2, #24]
     90c:	4221      	tst	r1, r4
     90e:	d10b      	bne.n	928 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     910:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     912:	4229      	tst	r1, r5
     914:	d106      	bne.n	924 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     916:	3301      	adds	r3, #1
     918:	b29b      	uxth	r3, r3
     91a:	8901      	ldrh	r1, [r0, #8]
     91c:	4299      	cmp	r1, r3
     91e:	d8f4      	bhi.n	90a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     920:	2012      	movs	r0, #18
     922:	e002      	b.n	92a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     924:	2000      	movs	r0, #0
     926:	e000      	b.n	92a <_i2c_master_wait_for_bus+0x2a>
     928:	2000      	movs	r0, #0
}
     92a:	bd30      	pop	{r4, r5, pc}

0000092c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     92c:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     92e:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     930:	6862      	ldr	r2, [r4, #4]
     932:	2380      	movs	r3, #128	; 0x80
     934:	02db      	lsls	r3, r3, #11
     936:	4313      	orrs	r3, r2
     938:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     93a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     93c:	4b02      	ldr	r3, [pc, #8]	; (948 <_i2c_master_send_hs_master_code+0x1c>)
     93e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     940:	2301      	movs	r3, #1
     942:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     944:	bd10      	pop	{r4, pc}
     946:	46c0      	nop			; (mov r8, r8)
     948:	00000901 	.word	0x00000901

0000094c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     94c:	b5f0      	push	{r4, r5, r6, r7, lr}
     94e:	46de      	mov	lr, fp
     950:	4657      	mov	r7, sl
     952:	464e      	mov	r6, r9
     954:	4645      	mov	r5, r8
     956:	b5e0      	push	{r5, r6, r7, lr}
     958:	b083      	sub	sp, #12
     95a:	0006      	movs	r6, r0
     95c:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     95e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     960:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     962:	682b      	ldr	r3, [r5, #0]
     964:	011b      	lsls	r3, r3, #4
     966:	0fdb      	lsrs	r3, r3, #31
     968:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     96a:	7a4b      	ldrb	r3, [r1, #9]
     96c:	2b00      	cmp	r3, #0
     96e:	d12b      	bne.n	9c8 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     970:	686b      	ldr	r3, [r5, #4]
     972:	4a58      	ldr	r2, [pc, #352]	; (ad4 <_i2c_master_read_packet+0x188>)
     974:	4013      	ands	r3, r2
     976:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     978:	464b      	mov	r3, r9
     97a:	7a1b      	ldrb	r3, [r3, #8]
     97c:	2b00      	cmp	r3, #0
     97e:	d127      	bne.n	9d0 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     980:	464b      	mov	r3, r9
     982:	881b      	ldrh	r3, [r3, #0]
     984:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     986:	464a      	mov	r2, r9
     988:	7a52      	ldrb	r2, [r2, #9]
     98a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     98c:	4313      	orrs	r3, r2
     98e:	2201      	movs	r2, #1
     990:	4313      	orrs	r3, r2
     992:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     994:	0030      	movs	r0, r6
     996:	4b50      	ldr	r3, [pc, #320]	; (ad8 <_i2c_master_read_packet+0x18c>)
     998:	4798      	blx	r3
     99a:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     99c:	4653      	mov	r3, sl
     99e:	2b00      	cmp	r3, #0
     9a0:	d003      	beq.n	9aa <_i2c_master_read_packet+0x5e>
     9a2:	464b      	mov	r3, r9
     9a4:	885b      	ldrh	r3, [r3, #2]
     9a6:	2b01      	cmp	r3, #1
     9a8:	d03b      	beq.n	a22 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     9aa:	686b      	ldr	r3, [r5, #4]
     9ac:	4a49      	ldr	r2, [pc, #292]	; (ad4 <_i2c_master_read_packet+0x188>)
     9ae:	4013      	ands	r3, r2
     9b0:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     9b2:	9b01      	ldr	r3, [sp, #4]
     9b4:	2b00      	cmp	r3, #0
     9b6:	d03a      	beq.n	a2e <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     9b8:	9801      	ldr	r0, [sp, #4]
     9ba:	b003      	add	sp, #12
     9bc:	bc3c      	pop	{r2, r3, r4, r5}
     9be:	4690      	mov	r8, r2
     9c0:	4699      	mov	r9, r3
     9c2:	46a2      	mov	sl, r4
     9c4:	46ab      	mov	fp, r5
     9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     9c8:	7a89      	ldrb	r1, [r1, #10]
     9ca:	4b44      	ldr	r3, [pc, #272]	; (adc <_i2c_master_read_packet+0x190>)
     9cc:	4798      	blx	r3
     9ce:	e7cf      	b.n	970 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     9d0:	464b      	mov	r3, r9
     9d2:	881b      	ldrh	r3, [r3, #0]
     9d4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9d6:	464a      	mov	r2, r9
     9d8:	7a52      	ldrb	r2, [r2, #9]
     9da:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     9dc:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9de:	2280      	movs	r2, #128	; 0x80
     9e0:	0212      	lsls	r2, r2, #8
     9e2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     9e4:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     9e6:	0030      	movs	r0, r6
     9e8:	4b3b      	ldr	r3, [pc, #236]	; (ad8 <_i2c_master_read_packet+0x18c>)
     9ea:	4798      	blx	r3
     9ec:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     9ee:	686b      	ldr	r3, [r5, #4]
     9f0:	4a38      	ldr	r2, [pc, #224]	; (ad4 <_i2c_master_read_packet+0x188>)
     9f2:	4013      	ands	r3, r2
     9f4:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     9f6:	2800      	cmp	r0, #0
     9f8:	d1de      	bne.n	9b8 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     9fa:	0030      	movs	r0, r6
     9fc:	4b38      	ldr	r3, [pc, #224]	; (ae0 <_i2c_master_read_packet+0x194>)
     9fe:	4798      	blx	r3
     a00:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     a02:	2800      	cmp	r0, #0
     a04:	d1d8      	bne.n	9b8 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a06:	464b      	mov	r3, r9
     a08:	881b      	ldrh	r3, [r3, #0]
     a0a:	0a1b      	lsrs	r3, r3, #8
     a0c:	2278      	movs	r2, #120	; 0x78
     a0e:	4313      	orrs	r3, r2
     a10:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a12:	464a      	mov	r2, r9
     a14:	7a52      	ldrb	r2, [r2, #9]
     a16:	0392      	lsls	r2, r2, #14
     a18:	2101      	movs	r1, #1
     a1a:	430a      	orrs	r2, r1
     a1c:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a1e:	626b      	str	r3, [r5, #36]	; 0x24
     a20:	e7b8      	b.n	994 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     a22:	686a      	ldr	r2, [r5, #4]
     a24:	2380      	movs	r3, #128	; 0x80
     a26:	02db      	lsls	r3, r3, #11
     a28:	4313      	orrs	r3, r2
     a2a:	606b      	str	r3, [r5, #4]
     a2c:	e7c1      	b.n	9b2 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     a2e:	0030      	movs	r0, r6
     a30:	4b2b      	ldr	r3, [pc, #172]	; (ae0 <_i2c_master_read_packet+0x194>)
     a32:	4798      	blx	r3
     a34:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     a36:	2800      	cmp	r0, #0
     a38:	d1be      	bne.n	9b8 <_i2c_master_read_packet+0x6c>
     a3a:	3c01      	subs	r4, #1
     a3c:	b2a4      	uxth	r4, r4
     a3e:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     a40:	4b28      	ldr	r3, [pc, #160]	; (ae4 <_i2c_master_read_packet+0x198>)
     a42:	469b      	mov	fp, r3
     a44:	e015      	b.n	a72 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     a46:	2c01      	cmp	r4, #1
     a48:	d020      	beq.n	a8c <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     a4a:	0030      	movs	r0, r6
     a4c:	4b26      	ldr	r3, [pc, #152]	; (ae8 <_i2c_master_read_packet+0x19c>)
     a4e:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     a50:	4643      	mov	r3, r8
     a52:	1c5f      	adds	r7, r3, #1
     a54:	b2bf      	uxth	r7, r7
     a56:	2328      	movs	r3, #40	; 0x28
     a58:	5ceb      	ldrb	r3, [r5, r3]
     a5a:	464a      	mov	r2, r9
     a5c:	6852      	ldr	r2, [r2, #4]
     a5e:	4641      	mov	r1, r8
     a60:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     a62:	0030      	movs	r0, r6
     a64:	4b1c      	ldr	r3, [pc, #112]	; (ad8 <_i2c_master_read_packet+0x18c>)
     a66:	4798      	blx	r3
     a68:	3c01      	subs	r4, #1
     a6a:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     a6c:	2800      	cmp	r0, #0
     a6e:	d115      	bne.n	a9c <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     a70:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     a72:	455c      	cmp	r4, fp
     a74:	d014      	beq.n	aa0 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     a76:	8b6b      	ldrh	r3, [r5, #26]
     a78:	069b      	lsls	r3, r3, #26
     a7a:	d527      	bpl.n	acc <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     a7c:	7af3      	ldrb	r3, [r6, #11]
     a7e:	2b00      	cmp	r3, #0
     a80:	d0e3      	beq.n	a4a <_i2c_master_read_packet+0xfe>
     a82:	4653      	mov	r3, sl
     a84:	2b00      	cmp	r3, #0
     a86:	d1de      	bne.n	a46 <_i2c_master_read_packet+0xfa>
     a88:	2c00      	cmp	r4, #0
     a8a:	d1de      	bne.n	a4a <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     a8c:	686a      	ldr	r2, [r5, #4]
     a8e:	2380      	movs	r3, #128	; 0x80
     a90:	02db      	lsls	r3, r3, #11
     a92:	4313      	orrs	r3, r2
     a94:	606b      	str	r3, [r5, #4]
     a96:	3c01      	subs	r4, #1
     a98:	b2a4      	uxth	r4, r4
     a9a:	e7ea      	b.n	a72 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     a9c:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     a9e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     aa0:	7ab3      	ldrb	r3, [r6, #10]
     aa2:	2b00      	cmp	r3, #0
     aa4:	d109      	bne.n	aba <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     aa6:	0030      	movs	r0, r6
     aa8:	4b0f      	ldr	r3, [pc, #60]	; (ae8 <_i2c_master_read_packet+0x19c>)
     aaa:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     aac:	2328      	movs	r3, #40	; 0x28
     aae:	5cea      	ldrb	r2, [r5, r3]
     ab0:	464b      	mov	r3, r9
     ab2:	685b      	ldr	r3, [r3, #4]
     ab4:	4641      	mov	r1, r8
     ab6:	545a      	strb	r2, [r3, r1]
     ab8:	e77e      	b.n	9b8 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     aba:	0030      	movs	r0, r6
     abc:	4b0a      	ldr	r3, [pc, #40]	; (ae8 <_i2c_master_read_packet+0x19c>)
     abe:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ac0:	686a      	ldr	r2, [r5, #4]
     ac2:	23c0      	movs	r3, #192	; 0xc0
     ac4:	029b      	lsls	r3, r3, #10
     ac6:	4313      	orrs	r3, r2
     ac8:	606b      	str	r3, [r5, #4]
     aca:	e7ec      	b.n	aa6 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     acc:	2341      	movs	r3, #65	; 0x41
     ace:	9301      	str	r3, [sp, #4]
     ad0:	e772      	b.n	9b8 <_i2c_master_read_packet+0x6c>
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	fffbffff 	.word	0xfffbffff
     ad8:	00000901 	.word	0x00000901
     adc:	0000092d 	.word	0x0000092d
     ae0:	000008d1 	.word	0x000008d1
     ae4:	0000ffff 	.word	0x0000ffff
     ae8:	000005fd 	.word	0x000005fd

00000aec <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     aec:	b5f0      	push	{r4, r5, r6, r7, lr}
     aee:	46de      	mov	lr, fp
     af0:	4657      	mov	r7, sl
     af2:	464e      	mov	r6, r9
     af4:	4645      	mov	r5, r8
     af6:	b5e0      	push	{r5, r6, r7, lr}
     af8:	b083      	sub	sp, #12
     afa:	0006      	movs	r6, r0
     afc:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     afe:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     b00:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     b02:	4b32      	ldr	r3, [pc, #200]	; (bcc <_i2c_master_write_packet+0xe0>)
     b04:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     b06:	7a7b      	ldrb	r3, [r7, #9]
     b08:	2b00      	cmp	r3, #0
     b0a:	d11d      	bne.n	b48 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     b0c:	686b      	ldr	r3, [r5, #4]
     b0e:	4a30      	ldr	r2, [pc, #192]	; (bd0 <_i2c_master_write_packet+0xe4>)
     b10:	4013      	ands	r3, r2
     b12:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     b14:	7a3b      	ldrb	r3, [r7, #8]
     b16:	2b00      	cmp	r3, #0
     b18:	d01b      	beq.n	b52 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b1a:	883b      	ldrh	r3, [r7, #0]
     b1c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b1e:	7a7a      	ldrb	r2, [r7, #9]
     b20:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b22:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b24:	2280      	movs	r2, #128	; 0x80
     b26:	0212      	lsls	r2, r2, #8
     b28:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b2a:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     b2c:	0030      	movs	r0, r6
     b2e:	4b29      	ldr	r3, [pc, #164]	; (bd4 <_i2c_master_write_packet+0xe8>)
     b30:	4798      	blx	r3
     b32:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     b34:	2800      	cmp	r0, #0
     b36:	d013      	beq.n	b60 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     b38:	9801      	ldr	r0, [sp, #4]
     b3a:	b003      	add	sp, #12
     b3c:	bc3c      	pop	{r2, r3, r4, r5}
     b3e:	4690      	mov	r8, r2
     b40:	4699      	mov	r9, r3
     b42:	46a2      	mov	sl, r4
     b44:	46ab      	mov	fp, r5
     b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     b48:	7ab9      	ldrb	r1, [r7, #10]
     b4a:	0030      	movs	r0, r6
     b4c:	4b22      	ldr	r3, [pc, #136]	; (bd8 <_i2c_master_write_packet+0xec>)
     b4e:	4798      	blx	r3
     b50:	e7dc      	b.n	b0c <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b52:	883b      	ldrh	r3, [r7, #0]
     b54:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     b56:	7a7a      	ldrb	r2, [r7, #9]
     b58:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b5a:	4313      	orrs	r3, r2
     b5c:	626b      	str	r3, [r5, #36]	; 0x24
     b5e:	e7e5      	b.n	b2c <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     b60:	0030      	movs	r0, r6
     b62:	4b1e      	ldr	r3, [pc, #120]	; (bdc <_i2c_master_write_packet+0xf0>)
     b64:	4798      	blx	r3
     b66:	1e03      	subs	r3, r0, #0
     b68:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     b6a:	d1e5      	bne.n	b38 <_i2c_master_write_packet+0x4c>
     b6c:	46a0      	mov	r8, r4
     b6e:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     b70:	3320      	adds	r3, #32
     b72:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     b74:	4b15      	ldr	r3, [pc, #84]	; (bcc <_i2c_master_write_packet+0xe0>)
     b76:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     b78:	4b16      	ldr	r3, [pc, #88]	; (bd4 <_i2c_master_write_packet+0xe8>)
     b7a:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     b7c:	4544      	cmp	r4, r8
     b7e:	d015      	beq.n	bac <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     b80:	8b6b      	ldrh	r3, [r5, #26]
     b82:	464a      	mov	r2, r9
     b84:	4213      	tst	r3, r2
     b86:	d01d      	beq.n	bc4 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     b88:	0030      	movs	r0, r6
     b8a:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     b8c:	687b      	ldr	r3, [r7, #4]
     b8e:	5d1a      	ldrb	r2, [r3, r4]
     b90:	2328      	movs	r3, #40	; 0x28
     b92:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     b94:	0030      	movs	r0, r6
     b96:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     b98:	2800      	cmp	r0, #0
     b9a:	d106      	bne.n	baa <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     b9c:	8b6b      	ldrh	r3, [r5, #26]
     b9e:	3401      	adds	r4, #1
     ba0:	075b      	lsls	r3, r3, #29
     ba2:	d5eb      	bpl.n	b7c <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     ba4:	231e      	movs	r3, #30
     ba6:	9301      	str	r3, [sp, #4]
     ba8:	e000      	b.n	bac <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     baa:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     bac:	7ab3      	ldrb	r3, [r6, #10]
     bae:	2b00      	cmp	r3, #0
     bb0:	d0c2      	beq.n	b38 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     bb2:	0030      	movs	r0, r6
     bb4:	4b05      	ldr	r3, [pc, #20]	; (bcc <_i2c_master_write_packet+0xe0>)
     bb6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     bb8:	686a      	ldr	r2, [r5, #4]
     bba:	23c0      	movs	r3, #192	; 0xc0
     bbc:	029b      	lsls	r3, r3, #10
     bbe:	4313      	orrs	r3, r2
     bc0:	606b      	str	r3, [r5, #4]
     bc2:	e7b9      	b.n	b38 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     bc4:	2341      	movs	r3, #65	; 0x41
     bc6:	9301      	str	r3, [sp, #4]
     bc8:	e7b6      	b.n	b38 <_i2c_master_write_packet+0x4c>
     bca:	46c0      	nop			; (mov r8, r8)
     bcc:	000005fd 	.word	0x000005fd
     bd0:	fffbffff 	.word	0xfffbffff
     bd4:	00000901 	.word	0x00000901
     bd8:	0000092d 	.word	0x0000092d
     bdc:	000008d1 	.word	0x000008d1

00000be0 <i2c_master_read_packet_wait>:
{
     be0:	b510      	push	{r4, lr}
	module->send_stop = true;
     be2:	2301      	movs	r3, #1
     be4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     be6:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     be8:	4b01      	ldr	r3, [pc, #4]	; (bf0 <i2c_master_read_packet_wait+0x10>)
     bea:	4798      	blx	r3
}
     bec:	bd10      	pop	{r4, pc}
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	0000094d 	.word	0x0000094d

00000bf4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     bf4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     bf6:	2301      	movs	r3, #1
     bf8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     bfa:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     bfc:	4b01      	ldr	r3, [pc, #4]	; (c04 <i2c_master_write_packet_wait+0x10>)
     bfe:	4798      	blx	r3
}
     c00:	bd10      	pop	{r4, pc}
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	00000aed 	.word	0x00000aed

00000c08 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     c08:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
     c0a:	2300      	movs	r3, #0
     c0c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     c0e:	3301      	adds	r3, #1
     c10:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     c12:	4b01      	ldr	r3, [pc, #4]	; (c18 <i2c_master_write_packet_wait_no_stop+0x10>)
     c14:	4798      	blx	r3
}
     c16:	bd10      	pop	{r4, pc}
     c18:	00000aed 	.word	0x00000aed

00000c1c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c1e:	46de      	mov	lr, fp
     c20:	4657      	mov	r7, sl
     c22:	464e      	mov	r6, r9
     c24:	4645      	mov	r5, r8
     c26:	b5e0      	push	{r5, r6, r7, lr}
     c28:	b087      	sub	sp, #28
     c2a:	4680      	mov	r8, r0
     c2c:	9104      	str	r1, [sp, #16]
     c2e:	0016      	movs	r6, r2
     c30:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     c32:	2200      	movs	r2, #0
     c34:	2300      	movs	r3, #0
     c36:	2100      	movs	r1, #0
     c38:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     c3a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     c3c:	2001      	movs	r0, #1
     c3e:	0021      	movs	r1, r4
     c40:	9600      	str	r6, [sp, #0]
     c42:	9701      	str	r7, [sp, #4]
     c44:	465c      	mov	r4, fp
     c46:	9403      	str	r4, [sp, #12]
     c48:	4644      	mov	r4, r8
     c4a:	9405      	str	r4, [sp, #20]
     c4c:	e013      	b.n	c76 <long_division+0x5a>
     c4e:	2420      	movs	r4, #32
     c50:	1a64      	subs	r4, r4, r1
     c52:	0005      	movs	r5, r0
     c54:	40e5      	lsrs	r5, r4
     c56:	46a8      	mov	r8, r5
     c58:	e014      	b.n	c84 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     c5a:	9c00      	ldr	r4, [sp, #0]
     c5c:	9d01      	ldr	r5, [sp, #4]
     c5e:	1b12      	subs	r2, r2, r4
     c60:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     c62:	465c      	mov	r4, fp
     c64:	464d      	mov	r5, r9
     c66:	432c      	orrs	r4, r5
     c68:	46a3      	mov	fp, r4
     c6a:	9c03      	ldr	r4, [sp, #12]
     c6c:	4645      	mov	r5, r8
     c6e:	432c      	orrs	r4, r5
     c70:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     c72:	3901      	subs	r1, #1
     c74:	d325      	bcc.n	cc2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     c76:	2420      	movs	r4, #32
     c78:	4264      	negs	r4, r4
     c7a:	190c      	adds	r4, r1, r4
     c7c:	d4e7      	bmi.n	c4e <long_division+0x32>
     c7e:	0005      	movs	r5, r0
     c80:	40a5      	lsls	r5, r4
     c82:	46a8      	mov	r8, r5
     c84:	0004      	movs	r4, r0
     c86:	408c      	lsls	r4, r1
     c88:	46a1      	mov	r9, r4
		r = r << 1;
     c8a:	1892      	adds	r2, r2, r2
     c8c:	415b      	adcs	r3, r3
     c8e:	0014      	movs	r4, r2
     c90:	001d      	movs	r5, r3
		if (n & bit_shift) {
     c92:	9e05      	ldr	r6, [sp, #20]
     c94:	464f      	mov	r7, r9
     c96:	403e      	ands	r6, r7
     c98:	46b4      	mov	ip, r6
     c9a:	9e04      	ldr	r6, [sp, #16]
     c9c:	4647      	mov	r7, r8
     c9e:	403e      	ands	r6, r7
     ca0:	46b2      	mov	sl, r6
     ca2:	4666      	mov	r6, ip
     ca4:	4657      	mov	r7, sl
     ca6:	433e      	orrs	r6, r7
     ca8:	d003      	beq.n	cb2 <long_division+0x96>
			r |= 0x01;
     caa:	0006      	movs	r6, r0
     cac:	4326      	orrs	r6, r4
     cae:	0032      	movs	r2, r6
     cb0:	002b      	movs	r3, r5
		if (r >= d) {
     cb2:	9c00      	ldr	r4, [sp, #0]
     cb4:	9d01      	ldr	r5, [sp, #4]
     cb6:	429d      	cmp	r5, r3
     cb8:	d8db      	bhi.n	c72 <long_division+0x56>
     cba:	d1ce      	bne.n	c5a <long_division+0x3e>
     cbc:	4294      	cmp	r4, r2
     cbe:	d8d8      	bhi.n	c72 <long_division+0x56>
     cc0:	e7cb      	b.n	c5a <long_division+0x3e>
     cc2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     cc4:	4658      	mov	r0, fp
     cc6:	0019      	movs	r1, r3
     cc8:	b007      	add	sp, #28
     cca:	bc3c      	pop	{r2, r3, r4, r5}
     ccc:	4690      	mov	r8, r2
     cce:	4699      	mov	r9, r3
     cd0:	46a2      	mov	sl, r4
     cd2:	46ab      	mov	fp, r5
     cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000cd6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     cd6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     cd8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cda:	2340      	movs	r3, #64	; 0x40
     cdc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     cde:	4281      	cmp	r1, r0
     ce0:	d202      	bcs.n	ce8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     ce2:	0018      	movs	r0, r3
     ce4:	bd10      	pop	{r4, pc}
		baud_calculated++;
     ce6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     ce8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     cea:	1c63      	adds	r3, r4, #1
     cec:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     cee:	4288      	cmp	r0, r1
     cf0:	d9f9      	bls.n	ce6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cf2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     cf4:	2cff      	cmp	r4, #255	; 0xff
     cf6:	d8f4      	bhi.n	ce2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     cf8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     cfa:	2300      	movs	r3, #0
     cfc:	e7f1      	b.n	ce2 <_sercom_get_sync_baud_val+0xc>
	...

00000d00 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     d00:	b5f0      	push	{r4, r5, r6, r7, lr}
     d02:	b083      	sub	sp, #12
     d04:	000f      	movs	r7, r1
     d06:	0016      	movs	r6, r2
     d08:	aa08      	add	r2, sp, #32
     d0a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     d0c:	0004      	movs	r4, r0
     d0e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d10:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     d12:	42bc      	cmp	r4, r7
     d14:	d902      	bls.n	d1c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     d16:	0010      	movs	r0, r2
     d18:	b003      	add	sp, #12
     d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     d1c:	2b00      	cmp	r3, #0
     d1e:	d114      	bne.n	d4a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     d20:	0002      	movs	r2, r0
     d22:	0008      	movs	r0, r1
     d24:	2100      	movs	r1, #0
     d26:	4c19      	ldr	r4, [pc, #100]	; (d8c <_sercom_get_async_baud_val+0x8c>)
     d28:	47a0      	blx	r4
     d2a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     d2c:	003a      	movs	r2, r7
     d2e:	2300      	movs	r3, #0
     d30:	2000      	movs	r0, #0
     d32:	4c17      	ldr	r4, [pc, #92]	; (d90 <_sercom_get_async_baud_val+0x90>)
     d34:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     d36:	2200      	movs	r2, #0
     d38:	2301      	movs	r3, #1
     d3a:	1a12      	subs	r2, r2, r0
     d3c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     d3e:	0c12      	lsrs	r2, r2, #16
     d40:	041b      	lsls	r3, r3, #16
     d42:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     d44:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     d46:	2200      	movs	r2, #0
     d48:	e7e5      	b.n	d16 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     d4a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     d4c:	2b01      	cmp	r3, #1
     d4e:	d1f9      	bne.n	d44 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     d50:	000a      	movs	r2, r1
     d52:	2300      	movs	r3, #0
     d54:	2100      	movs	r1, #0
     d56:	4c0d      	ldr	r4, [pc, #52]	; (d8c <_sercom_get_async_baud_val+0x8c>)
     d58:	47a0      	blx	r4
     d5a:	0002      	movs	r2, r0
     d5c:	000b      	movs	r3, r1
     d5e:	9200      	str	r2, [sp, #0]
     d60:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     d62:	0038      	movs	r0, r7
     d64:	2100      	movs	r1, #0
     d66:	4c0a      	ldr	r4, [pc, #40]	; (d90 <_sercom_get_async_baud_val+0x90>)
     d68:	47a0      	blx	r4
     d6a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     d6c:	2380      	movs	r3, #128	; 0x80
     d6e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d70:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     d72:	4298      	cmp	r0, r3
     d74:	d8cf      	bhi.n	d16 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     d76:	0f79      	lsrs	r1, r7, #29
     d78:	00f8      	lsls	r0, r7, #3
     d7a:	9a00      	ldr	r2, [sp, #0]
     d7c:	9b01      	ldr	r3, [sp, #4]
     d7e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     d80:	00ea      	lsls	r2, r5, #3
     d82:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     d84:	b2d2      	uxtb	r2, r2
     d86:	0352      	lsls	r2, r2, #13
     d88:	432a      	orrs	r2, r5
     d8a:	e7db      	b.n	d44 <_sercom_get_async_baud_val+0x44>
     d8c:	0000208d 	.word	0x0000208d
     d90:	00000c1d 	.word	0x00000c1d

00000d94 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d94:	b510      	push	{r4, lr}
     d96:	b082      	sub	sp, #8
     d98:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d9a:	4b0e      	ldr	r3, [pc, #56]	; (dd4 <sercom_set_gclk_generator+0x40>)
     d9c:	781b      	ldrb	r3, [r3, #0]
     d9e:	2b00      	cmp	r3, #0
     da0:	d007      	beq.n	db2 <sercom_set_gclk_generator+0x1e>
     da2:	2900      	cmp	r1, #0
     da4:	d105      	bne.n	db2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     da6:	4b0b      	ldr	r3, [pc, #44]	; (dd4 <sercom_set_gclk_generator+0x40>)
     da8:	785b      	ldrb	r3, [r3, #1]
     daa:	4283      	cmp	r3, r0
     dac:	d010      	beq.n	dd0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     dae:	201d      	movs	r0, #29
     db0:	e00c      	b.n	dcc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     db2:	a901      	add	r1, sp, #4
     db4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     db6:	2013      	movs	r0, #19
     db8:	4b07      	ldr	r3, [pc, #28]	; (dd8 <sercom_set_gclk_generator+0x44>)
     dba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     dbc:	2013      	movs	r0, #19
     dbe:	4b07      	ldr	r3, [pc, #28]	; (ddc <sercom_set_gclk_generator+0x48>)
     dc0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     dc2:	4b04      	ldr	r3, [pc, #16]	; (dd4 <sercom_set_gclk_generator+0x40>)
     dc4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     dc6:	2201      	movs	r2, #1
     dc8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     dca:	2000      	movs	r0, #0
}
     dcc:	b002      	add	sp, #8
     dce:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     dd0:	2000      	movs	r0, #0
     dd2:	e7fb      	b.n	dcc <sercom_set_gclk_generator+0x38>
     dd4:	20000098 	.word	0x20000098
     dd8:	00001a19 	.word	0x00001a19
     ddc:	0000198d 	.word	0x0000198d

00000de0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     de0:	4b40      	ldr	r3, [pc, #256]	; (ee4 <_sercom_get_default_pad+0x104>)
     de2:	4298      	cmp	r0, r3
     de4:	d031      	beq.n	e4a <_sercom_get_default_pad+0x6a>
     de6:	d90a      	bls.n	dfe <_sercom_get_default_pad+0x1e>
     de8:	4b3f      	ldr	r3, [pc, #252]	; (ee8 <_sercom_get_default_pad+0x108>)
     dea:	4298      	cmp	r0, r3
     dec:	d04d      	beq.n	e8a <_sercom_get_default_pad+0xaa>
     dee:	4b3f      	ldr	r3, [pc, #252]	; (eec <_sercom_get_default_pad+0x10c>)
     df0:	4298      	cmp	r0, r3
     df2:	d05a      	beq.n	eaa <_sercom_get_default_pad+0xca>
     df4:	4b3e      	ldr	r3, [pc, #248]	; (ef0 <_sercom_get_default_pad+0x110>)
     df6:	4298      	cmp	r0, r3
     df8:	d037      	beq.n	e6a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     dfa:	2000      	movs	r0, #0
}
     dfc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     dfe:	4b3d      	ldr	r3, [pc, #244]	; (ef4 <_sercom_get_default_pad+0x114>)
     e00:	4298      	cmp	r0, r3
     e02:	d00c      	beq.n	e1e <_sercom_get_default_pad+0x3e>
     e04:	4b3c      	ldr	r3, [pc, #240]	; (ef8 <_sercom_get_default_pad+0x118>)
     e06:	4298      	cmp	r0, r3
     e08:	d1f7      	bne.n	dfa <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e0a:	2901      	cmp	r1, #1
     e0c:	d017      	beq.n	e3e <_sercom_get_default_pad+0x5e>
     e0e:	2900      	cmp	r1, #0
     e10:	d05d      	beq.n	ece <_sercom_get_default_pad+0xee>
     e12:	2902      	cmp	r1, #2
     e14:	d015      	beq.n	e42 <_sercom_get_default_pad+0x62>
     e16:	2903      	cmp	r1, #3
     e18:	d015      	beq.n	e46 <_sercom_get_default_pad+0x66>
	return 0;
     e1a:	2000      	movs	r0, #0
     e1c:	e7ee      	b.n	dfc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e1e:	2901      	cmp	r1, #1
     e20:	d007      	beq.n	e32 <_sercom_get_default_pad+0x52>
     e22:	2900      	cmp	r1, #0
     e24:	d051      	beq.n	eca <_sercom_get_default_pad+0xea>
     e26:	2902      	cmp	r1, #2
     e28:	d005      	beq.n	e36 <_sercom_get_default_pad+0x56>
     e2a:	2903      	cmp	r1, #3
     e2c:	d005      	beq.n	e3a <_sercom_get_default_pad+0x5a>
	return 0;
     e2e:	2000      	movs	r0, #0
     e30:	e7e4      	b.n	dfc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e32:	4832      	ldr	r0, [pc, #200]	; (efc <_sercom_get_default_pad+0x11c>)
     e34:	e7e2      	b.n	dfc <_sercom_get_default_pad+0x1c>
     e36:	4832      	ldr	r0, [pc, #200]	; (f00 <_sercom_get_default_pad+0x120>)
     e38:	e7e0      	b.n	dfc <_sercom_get_default_pad+0x1c>
     e3a:	4832      	ldr	r0, [pc, #200]	; (f04 <_sercom_get_default_pad+0x124>)
     e3c:	e7de      	b.n	dfc <_sercom_get_default_pad+0x1c>
     e3e:	4832      	ldr	r0, [pc, #200]	; (f08 <_sercom_get_default_pad+0x128>)
     e40:	e7dc      	b.n	dfc <_sercom_get_default_pad+0x1c>
     e42:	4832      	ldr	r0, [pc, #200]	; (f0c <_sercom_get_default_pad+0x12c>)
     e44:	e7da      	b.n	dfc <_sercom_get_default_pad+0x1c>
     e46:	4832      	ldr	r0, [pc, #200]	; (f10 <_sercom_get_default_pad+0x130>)
     e48:	e7d8      	b.n	dfc <_sercom_get_default_pad+0x1c>
     e4a:	2901      	cmp	r1, #1
     e4c:	d007      	beq.n	e5e <_sercom_get_default_pad+0x7e>
     e4e:	2900      	cmp	r1, #0
     e50:	d03f      	beq.n	ed2 <_sercom_get_default_pad+0xf2>
     e52:	2902      	cmp	r1, #2
     e54:	d005      	beq.n	e62 <_sercom_get_default_pad+0x82>
     e56:	2903      	cmp	r1, #3
     e58:	d005      	beq.n	e66 <_sercom_get_default_pad+0x86>
	return 0;
     e5a:	2000      	movs	r0, #0
     e5c:	e7ce      	b.n	dfc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e5e:	482d      	ldr	r0, [pc, #180]	; (f14 <_sercom_get_default_pad+0x134>)
     e60:	e7cc      	b.n	dfc <_sercom_get_default_pad+0x1c>
     e62:	482d      	ldr	r0, [pc, #180]	; (f18 <_sercom_get_default_pad+0x138>)
     e64:	e7ca      	b.n	dfc <_sercom_get_default_pad+0x1c>
     e66:	482d      	ldr	r0, [pc, #180]	; (f1c <_sercom_get_default_pad+0x13c>)
     e68:	e7c8      	b.n	dfc <_sercom_get_default_pad+0x1c>
     e6a:	2901      	cmp	r1, #1
     e6c:	d007      	beq.n	e7e <_sercom_get_default_pad+0x9e>
     e6e:	2900      	cmp	r1, #0
     e70:	d031      	beq.n	ed6 <_sercom_get_default_pad+0xf6>
     e72:	2902      	cmp	r1, #2
     e74:	d005      	beq.n	e82 <_sercom_get_default_pad+0xa2>
     e76:	2903      	cmp	r1, #3
     e78:	d005      	beq.n	e86 <_sercom_get_default_pad+0xa6>
	return 0;
     e7a:	2000      	movs	r0, #0
     e7c:	e7be      	b.n	dfc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e7e:	4828      	ldr	r0, [pc, #160]	; (f20 <_sercom_get_default_pad+0x140>)
     e80:	e7bc      	b.n	dfc <_sercom_get_default_pad+0x1c>
     e82:	4828      	ldr	r0, [pc, #160]	; (f24 <_sercom_get_default_pad+0x144>)
     e84:	e7ba      	b.n	dfc <_sercom_get_default_pad+0x1c>
     e86:	4828      	ldr	r0, [pc, #160]	; (f28 <_sercom_get_default_pad+0x148>)
     e88:	e7b8      	b.n	dfc <_sercom_get_default_pad+0x1c>
     e8a:	2901      	cmp	r1, #1
     e8c:	d007      	beq.n	e9e <_sercom_get_default_pad+0xbe>
     e8e:	2900      	cmp	r1, #0
     e90:	d023      	beq.n	eda <_sercom_get_default_pad+0xfa>
     e92:	2902      	cmp	r1, #2
     e94:	d005      	beq.n	ea2 <_sercom_get_default_pad+0xc2>
     e96:	2903      	cmp	r1, #3
     e98:	d005      	beq.n	ea6 <_sercom_get_default_pad+0xc6>
	return 0;
     e9a:	2000      	movs	r0, #0
     e9c:	e7ae      	b.n	dfc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e9e:	4823      	ldr	r0, [pc, #140]	; (f2c <_sercom_get_default_pad+0x14c>)
     ea0:	e7ac      	b.n	dfc <_sercom_get_default_pad+0x1c>
     ea2:	4823      	ldr	r0, [pc, #140]	; (f30 <_sercom_get_default_pad+0x150>)
     ea4:	e7aa      	b.n	dfc <_sercom_get_default_pad+0x1c>
     ea6:	4823      	ldr	r0, [pc, #140]	; (f34 <_sercom_get_default_pad+0x154>)
     ea8:	e7a8      	b.n	dfc <_sercom_get_default_pad+0x1c>
     eaa:	2901      	cmp	r1, #1
     eac:	d007      	beq.n	ebe <_sercom_get_default_pad+0xde>
     eae:	2900      	cmp	r1, #0
     eb0:	d015      	beq.n	ede <_sercom_get_default_pad+0xfe>
     eb2:	2902      	cmp	r1, #2
     eb4:	d005      	beq.n	ec2 <_sercom_get_default_pad+0xe2>
     eb6:	2903      	cmp	r1, #3
     eb8:	d005      	beq.n	ec6 <_sercom_get_default_pad+0xe6>
	return 0;
     eba:	2000      	movs	r0, #0
     ebc:	e79e      	b.n	dfc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ebe:	481e      	ldr	r0, [pc, #120]	; (f38 <_sercom_get_default_pad+0x158>)
     ec0:	e79c      	b.n	dfc <_sercom_get_default_pad+0x1c>
     ec2:	481e      	ldr	r0, [pc, #120]	; (f3c <_sercom_get_default_pad+0x15c>)
     ec4:	e79a      	b.n	dfc <_sercom_get_default_pad+0x1c>
     ec6:	481e      	ldr	r0, [pc, #120]	; (f40 <_sercom_get_default_pad+0x160>)
     ec8:	e798      	b.n	dfc <_sercom_get_default_pad+0x1c>
     eca:	481e      	ldr	r0, [pc, #120]	; (f44 <_sercom_get_default_pad+0x164>)
     ecc:	e796      	b.n	dfc <_sercom_get_default_pad+0x1c>
     ece:	2003      	movs	r0, #3
     ed0:	e794      	b.n	dfc <_sercom_get_default_pad+0x1c>
     ed2:	481d      	ldr	r0, [pc, #116]	; (f48 <_sercom_get_default_pad+0x168>)
     ed4:	e792      	b.n	dfc <_sercom_get_default_pad+0x1c>
     ed6:	481d      	ldr	r0, [pc, #116]	; (f4c <_sercom_get_default_pad+0x16c>)
     ed8:	e790      	b.n	dfc <_sercom_get_default_pad+0x1c>
     eda:	481d      	ldr	r0, [pc, #116]	; (f50 <_sercom_get_default_pad+0x170>)
     edc:	e78e      	b.n	dfc <_sercom_get_default_pad+0x1c>
     ede:	481d      	ldr	r0, [pc, #116]	; (f54 <_sercom_get_default_pad+0x174>)
     ee0:	e78c      	b.n	dfc <_sercom_get_default_pad+0x1c>
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	42001000 	.word	0x42001000
     ee8:	42001800 	.word	0x42001800
     eec:	42001c00 	.word	0x42001c00
     ef0:	42001400 	.word	0x42001400
     ef4:	42000800 	.word	0x42000800
     ef8:	42000c00 	.word	0x42000c00
     efc:	00050003 	.word	0x00050003
     f00:	00060003 	.word	0x00060003
     f04:	00070003 	.word	0x00070003
     f08:	00010003 	.word	0x00010003
     f0c:	001e0003 	.word	0x001e0003
     f10:	001f0003 	.word	0x001f0003
     f14:	00090003 	.word	0x00090003
     f18:	000a0003 	.word	0x000a0003
     f1c:	000b0003 	.word	0x000b0003
     f20:	00110003 	.word	0x00110003
     f24:	00120003 	.word	0x00120003
     f28:	00130003 	.word	0x00130003
     f2c:	000d0003 	.word	0x000d0003
     f30:	000e0003 	.word	0x000e0003
     f34:	000f0003 	.word	0x000f0003
     f38:	00170003 	.word	0x00170003
     f3c:	00180003 	.word	0x00180003
     f40:	00190003 	.word	0x00190003
     f44:	00040003 	.word	0x00040003
     f48:	00080003 	.word	0x00080003
     f4c:	00100003 	.word	0x00100003
     f50:	000c0003 	.word	0x000c0003
     f54:	00160003 	.word	0x00160003

00000f58 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f58:	b530      	push	{r4, r5, lr}
     f5a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f5c:	4b0b      	ldr	r3, [pc, #44]	; (f8c <_sercom_get_sercom_inst_index+0x34>)
     f5e:	466a      	mov	r2, sp
     f60:	cb32      	ldmia	r3!, {r1, r4, r5}
     f62:	c232      	stmia	r2!, {r1, r4, r5}
     f64:	cb32      	ldmia	r3!, {r1, r4, r5}
     f66:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f68:	9b00      	ldr	r3, [sp, #0]
     f6a:	4283      	cmp	r3, r0
     f6c:	d00b      	beq.n	f86 <_sercom_get_sercom_inst_index+0x2e>
     f6e:	2301      	movs	r3, #1
     f70:	009a      	lsls	r2, r3, #2
     f72:	4669      	mov	r1, sp
     f74:	5852      	ldr	r2, [r2, r1]
     f76:	4282      	cmp	r2, r0
     f78:	d006      	beq.n	f88 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f7a:	3301      	adds	r3, #1
     f7c:	2b06      	cmp	r3, #6
     f7e:	d1f7      	bne.n	f70 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f80:	2000      	movs	r0, #0
}
     f82:	b007      	add	sp, #28
     f84:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f86:	2300      	movs	r3, #0
			return i;
     f88:	b2d8      	uxtb	r0, r3
     f8a:	e7fa      	b.n	f82 <_sercom_get_sercom_inst_index+0x2a>
     f8c:	00004b48 	.word	0x00004b48

00000f90 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     f90:	4770      	bx	lr
	...

00000f94 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     f94:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     f96:	4b0a      	ldr	r3, [pc, #40]	; (fc0 <_sercom_set_handler+0x2c>)
     f98:	781b      	ldrb	r3, [r3, #0]
     f9a:	2b00      	cmp	r3, #0
     f9c:	d10c      	bne.n	fb8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f9e:	4f09      	ldr	r7, [pc, #36]	; (fc4 <_sercom_set_handler+0x30>)
     fa0:	4e09      	ldr	r6, [pc, #36]	; (fc8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     fa2:	4d0a      	ldr	r5, [pc, #40]	; (fcc <_sercom_set_handler+0x38>)
     fa4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fa6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     fa8:	195a      	adds	r2, r3, r5
     faa:	6014      	str	r4, [r2, #0]
     fac:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     fae:	2b18      	cmp	r3, #24
     fb0:	d1f9      	bne.n	fa6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     fb2:	2201      	movs	r2, #1
     fb4:	4b02      	ldr	r3, [pc, #8]	; (fc0 <_sercom_set_handler+0x2c>)
     fb6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     fb8:	0080      	lsls	r0, r0, #2
     fba:	4b02      	ldr	r3, [pc, #8]	; (fc4 <_sercom_set_handler+0x30>)
     fbc:	50c1      	str	r1, [r0, r3]
}
     fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fc0:	2000009a 	.word	0x2000009a
     fc4:	2000009c 	.word	0x2000009c
     fc8:	00000f91 	.word	0x00000f91
     fcc:	200000e4 	.word	0x200000e4

00000fd0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     fd0:	b500      	push	{lr}
     fd2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     fd4:	2309      	movs	r3, #9
     fd6:	466a      	mov	r2, sp
     fd8:	7013      	strb	r3, [r2, #0]
     fda:	3301      	adds	r3, #1
     fdc:	7053      	strb	r3, [r2, #1]
     fde:	3301      	adds	r3, #1
     fe0:	7093      	strb	r3, [r2, #2]
     fe2:	3301      	adds	r3, #1
     fe4:	70d3      	strb	r3, [r2, #3]
     fe6:	3301      	adds	r3, #1
     fe8:	7113      	strb	r3, [r2, #4]
     fea:	3301      	adds	r3, #1
     fec:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     fee:	4b03      	ldr	r3, [pc, #12]	; (ffc <_sercom_get_interrupt_vector+0x2c>)
     ff0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     ff2:	466b      	mov	r3, sp
     ff4:	5618      	ldrsb	r0, [r3, r0]
}
     ff6:	b003      	add	sp, #12
     ff8:	bd00      	pop	{pc}
     ffa:	46c0      	nop			; (mov r8, r8)
     ffc:	00000f59 	.word	0x00000f59

00001000 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1000:	b510      	push	{r4, lr}
    1002:	4b02      	ldr	r3, [pc, #8]	; (100c <SERCOM0_Handler+0xc>)
    1004:	681b      	ldr	r3, [r3, #0]
    1006:	2000      	movs	r0, #0
    1008:	4798      	blx	r3
    100a:	bd10      	pop	{r4, pc}
    100c:	2000009c 	.word	0x2000009c

00001010 <SERCOM1_Handler>:
    1010:	b510      	push	{r4, lr}
    1012:	4b02      	ldr	r3, [pc, #8]	; (101c <SERCOM1_Handler+0xc>)
    1014:	685b      	ldr	r3, [r3, #4]
    1016:	2001      	movs	r0, #1
    1018:	4798      	blx	r3
    101a:	bd10      	pop	{r4, pc}
    101c:	2000009c 	.word	0x2000009c

00001020 <SERCOM2_Handler>:
    1020:	b510      	push	{r4, lr}
    1022:	4b02      	ldr	r3, [pc, #8]	; (102c <SERCOM2_Handler+0xc>)
    1024:	689b      	ldr	r3, [r3, #8]
    1026:	2002      	movs	r0, #2
    1028:	4798      	blx	r3
    102a:	bd10      	pop	{r4, pc}
    102c:	2000009c 	.word	0x2000009c

00001030 <SERCOM3_Handler>:
    1030:	b510      	push	{r4, lr}
    1032:	4b02      	ldr	r3, [pc, #8]	; (103c <SERCOM3_Handler+0xc>)
    1034:	68db      	ldr	r3, [r3, #12]
    1036:	2003      	movs	r0, #3
    1038:	4798      	blx	r3
    103a:	bd10      	pop	{r4, pc}
    103c:	2000009c 	.word	0x2000009c

00001040 <SERCOM4_Handler>:
    1040:	b510      	push	{r4, lr}
    1042:	4b02      	ldr	r3, [pc, #8]	; (104c <SERCOM4_Handler+0xc>)
    1044:	691b      	ldr	r3, [r3, #16]
    1046:	2004      	movs	r0, #4
    1048:	4798      	blx	r3
    104a:	bd10      	pop	{r4, pc}
    104c:	2000009c 	.word	0x2000009c

00001050 <SERCOM5_Handler>:
    1050:	b510      	push	{r4, lr}
    1052:	4b02      	ldr	r3, [pc, #8]	; (105c <SERCOM5_Handler+0xc>)
    1054:	695b      	ldr	r3, [r3, #20]
    1056:	2005      	movs	r0, #5
    1058:	4798      	blx	r3
    105a:	bd10      	pop	{r4, pc}
    105c:	2000009c 	.word	0x2000009c

00001060 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1060:	b5f0      	push	{r4, r5, r6, r7, lr}
    1062:	46de      	mov	lr, fp
    1064:	4657      	mov	r7, sl
    1066:	464e      	mov	r6, r9
    1068:	4645      	mov	r5, r8
    106a:	b5e0      	push	{r5, r6, r7, lr}
    106c:	b091      	sub	sp, #68	; 0x44
    106e:	0005      	movs	r5, r0
    1070:	000c      	movs	r4, r1
    1072:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1074:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1076:	0008      	movs	r0, r1
    1078:	4bbc      	ldr	r3, [pc, #752]	; (136c <usart_init+0x30c>)
    107a:	4798      	blx	r3
    107c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    107e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1080:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1082:	07db      	lsls	r3, r3, #31
    1084:	d506      	bpl.n	1094 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1086:	b011      	add	sp, #68	; 0x44
    1088:	bc3c      	pop	{r2, r3, r4, r5}
    108a:	4690      	mov	r8, r2
    108c:	4699      	mov	r9, r3
    108e:	46a2      	mov	sl, r4
    1090:	46ab      	mov	fp, r5
    1092:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1094:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1096:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1098:	079b      	lsls	r3, r3, #30
    109a:	d4f4      	bmi.n	1086 <usart_init+0x26>
    109c:	49b4      	ldr	r1, [pc, #720]	; (1370 <usart_init+0x310>)
    109e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    10a0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    10a2:	2301      	movs	r3, #1
    10a4:	40bb      	lsls	r3, r7
    10a6:	4303      	orrs	r3, r0
    10a8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    10aa:	a90f      	add	r1, sp, #60	; 0x3c
    10ac:	272d      	movs	r7, #45	; 0x2d
    10ae:	5df3      	ldrb	r3, [r6, r7]
    10b0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10b2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    10b4:	b2d3      	uxtb	r3, r2
    10b6:	9302      	str	r3, [sp, #8]
    10b8:	0018      	movs	r0, r3
    10ba:	4bae      	ldr	r3, [pc, #696]	; (1374 <usart_init+0x314>)
    10bc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    10be:	9802      	ldr	r0, [sp, #8]
    10c0:	4bad      	ldr	r3, [pc, #692]	; (1378 <usart_init+0x318>)
    10c2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    10c4:	5df0      	ldrb	r0, [r6, r7]
    10c6:	2100      	movs	r1, #0
    10c8:	4bac      	ldr	r3, [pc, #688]	; (137c <usart_init+0x31c>)
    10ca:	4798      	blx	r3
	module->character_size = config->character_size;
    10cc:	7af3      	ldrb	r3, [r6, #11]
    10ce:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    10d0:	2324      	movs	r3, #36	; 0x24
    10d2:	5cf3      	ldrb	r3, [r6, r3]
    10d4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    10d6:	2325      	movs	r3, #37	; 0x25
    10d8:	5cf3      	ldrb	r3, [r6, r3]
    10da:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    10dc:	7ef3      	ldrb	r3, [r6, #27]
    10de:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    10e0:	7f33      	ldrb	r3, [r6, #28]
    10e2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    10e4:	682b      	ldr	r3, [r5, #0]
    10e6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10e8:	0018      	movs	r0, r3
    10ea:	4ba0      	ldr	r3, [pc, #640]	; (136c <usart_init+0x30c>)
    10ec:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10ee:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    10f0:	2200      	movs	r2, #0
    10f2:	230e      	movs	r3, #14
    10f4:	a906      	add	r1, sp, #24
    10f6:	468c      	mov	ip, r1
    10f8:	4463      	add	r3, ip
    10fa:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    10fc:	8a32      	ldrh	r2, [r6, #16]
    10fe:	9202      	str	r2, [sp, #8]
    1100:	2380      	movs	r3, #128	; 0x80
    1102:	01db      	lsls	r3, r3, #7
    1104:	429a      	cmp	r2, r3
    1106:	d100      	bne.n	110a <usart_init+0xaa>
    1108:	e09e      	b.n	1248 <usart_init+0x1e8>
    110a:	d90f      	bls.n	112c <usart_init+0xcc>
    110c:	23c0      	movs	r3, #192	; 0xc0
    110e:	01db      	lsls	r3, r3, #7
    1110:	9a02      	ldr	r2, [sp, #8]
    1112:	429a      	cmp	r2, r3
    1114:	d100      	bne.n	1118 <usart_init+0xb8>
    1116:	e092      	b.n	123e <usart_init+0x1de>
    1118:	2380      	movs	r3, #128	; 0x80
    111a:	021b      	lsls	r3, r3, #8
    111c:	429a      	cmp	r2, r3
    111e:	d000      	beq.n	1122 <usart_init+0xc2>
    1120:	e11f      	b.n	1362 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1122:	2303      	movs	r3, #3
    1124:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1126:	2300      	movs	r3, #0
    1128:	9307      	str	r3, [sp, #28]
    112a:	e008      	b.n	113e <usart_init+0xde>
	switch (config->sample_rate) {
    112c:	2380      	movs	r3, #128	; 0x80
    112e:	019b      	lsls	r3, r3, #6
    1130:	429a      	cmp	r2, r3
    1132:	d000      	beq.n	1136 <usart_init+0xd6>
    1134:	e115      	b.n	1362 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1136:	2310      	movs	r3, #16
    1138:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    113a:	3b0f      	subs	r3, #15
    113c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    113e:	6833      	ldr	r3, [r6, #0]
    1140:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1142:	68f3      	ldr	r3, [r6, #12]
    1144:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1146:	6973      	ldr	r3, [r6, #20]
    1148:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    114a:	7e33      	ldrb	r3, [r6, #24]
    114c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    114e:	2326      	movs	r3, #38	; 0x26
    1150:	5cf3      	ldrb	r3, [r6, r3]
    1152:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1154:	6873      	ldr	r3, [r6, #4]
    1156:	4699      	mov	r9, r3
	switch (transfer_mode)
    1158:	2b00      	cmp	r3, #0
    115a:	d100      	bne.n	115e <usart_init+0xfe>
    115c:	e0a0      	b.n	12a0 <usart_init+0x240>
    115e:	2380      	movs	r3, #128	; 0x80
    1160:	055b      	lsls	r3, r3, #21
    1162:	4599      	cmp	r9, r3
    1164:	d100      	bne.n	1168 <usart_init+0x108>
    1166:	e084      	b.n	1272 <usart_init+0x212>
	if(config->encoding_format_enable) {
    1168:	7e73      	ldrb	r3, [r6, #25]
    116a:	2b00      	cmp	r3, #0
    116c:	d002      	beq.n	1174 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    116e:	7eb3      	ldrb	r3, [r6, #26]
    1170:	4642      	mov	r2, r8
    1172:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1174:	682a      	ldr	r2, [r5, #0]
    1176:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    1178:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    117a:	2b00      	cmp	r3, #0
    117c:	d1fc      	bne.n	1178 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    117e:	330e      	adds	r3, #14
    1180:	aa06      	add	r2, sp, #24
    1182:	4694      	mov	ip, r2
    1184:	4463      	add	r3, ip
    1186:	881b      	ldrh	r3, [r3, #0]
    1188:	4642      	mov	r2, r8
    118a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    118c:	9b05      	ldr	r3, [sp, #20]
    118e:	9a03      	ldr	r2, [sp, #12]
    1190:	4313      	orrs	r3, r2
    1192:	9a04      	ldr	r2, [sp, #16]
    1194:	4313      	orrs	r3, r2
    1196:	464a      	mov	r2, r9
    1198:	4313      	orrs	r3, r2
    119a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    119c:	465b      	mov	r3, fp
    119e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    11a0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11a2:	4653      	mov	r3, sl
    11a4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    11a6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    11a8:	2327      	movs	r3, #39	; 0x27
    11aa:	5cf3      	ldrb	r3, [r6, r3]
    11ac:	2b00      	cmp	r3, #0
    11ae:	d101      	bne.n	11b4 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    11b0:	3304      	adds	r3, #4
    11b2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    11b4:	7e73      	ldrb	r3, [r6, #25]
    11b6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    11b8:	7f32      	ldrb	r2, [r6, #28]
    11ba:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    11bc:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    11be:	7f72      	ldrb	r2, [r6, #29]
    11c0:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    11c2:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    11c4:	2224      	movs	r2, #36	; 0x24
    11c6:	5cb2      	ldrb	r2, [r6, r2]
    11c8:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    11ca:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    11cc:	2225      	movs	r2, #37	; 0x25
    11ce:	5cb2      	ldrb	r2, [r6, r2]
    11d0:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    11d2:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    11d4:	7ab1      	ldrb	r1, [r6, #10]
    11d6:	7af2      	ldrb	r2, [r6, #11]
    11d8:	4311      	orrs	r1, r2
    11da:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    11dc:	8933      	ldrh	r3, [r6, #8]
    11de:	2bff      	cmp	r3, #255	; 0xff
    11e0:	d100      	bne.n	11e4 <usart_init+0x184>
    11e2:	e081      	b.n	12e8 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    11e4:	2280      	movs	r2, #128	; 0x80
    11e6:	0452      	lsls	r2, r2, #17
    11e8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    11ea:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    11ec:	232c      	movs	r3, #44	; 0x2c
    11ee:	5cf3      	ldrb	r3, [r6, r3]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d103      	bne.n	11fc <usart_init+0x19c>
    11f4:	4b62      	ldr	r3, [pc, #392]	; (1380 <usart_init+0x320>)
    11f6:	789b      	ldrb	r3, [r3, #2]
    11f8:	079b      	lsls	r3, r3, #30
    11fa:	d501      	bpl.n	1200 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    11fc:	2380      	movs	r3, #128	; 0x80
    11fe:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1200:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1202:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1204:	2b00      	cmp	r3, #0
    1206:	d1fc      	bne.n	1202 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1208:	4643      	mov	r3, r8
    120a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    120c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    120e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1210:	2b00      	cmp	r3, #0
    1212:	d1fc      	bne.n	120e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1214:	4643      	mov	r3, r8
    1216:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1218:	ab0e      	add	r3, sp, #56	; 0x38
    121a:	2280      	movs	r2, #128	; 0x80
    121c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    121e:	2200      	movs	r2, #0
    1220:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1222:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1224:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1226:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1228:	930a      	str	r3, [sp, #40]	; 0x28
    122a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    122c:	930b      	str	r3, [sp, #44]	; 0x2c
    122e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1230:	930c      	str	r3, [sp, #48]	; 0x30
    1232:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1234:	9302      	str	r3, [sp, #8]
    1236:	930d      	str	r3, [sp, #52]	; 0x34
    1238:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    123a:	ae0a      	add	r6, sp, #40	; 0x28
    123c:	e063      	b.n	1306 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    123e:	2308      	movs	r3, #8
    1240:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1242:	3b07      	subs	r3, #7
    1244:	9307      	str	r3, [sp, #28]
    1246:	e77a      	b.n	113e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1248:	6833      	ldr	r3, [r6, #0]
    124a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    124c:	68f3      	ldr	r3, [r6, #12]
    124e:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1250:	6973      	ldr	r3, [r6, #20]
    1252:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1254:	7e33      	ldrb	r3, [r6, #24]
    1256:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1258:	2326      	movs	r3, #38	; 0x26
    125a:	5cf3      	ldrb	r3, [r6, r3]
    125c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    125e:	6873      	ldr	r3, [r6, #4]
    1260:	4699      	mov	r9, r3
	switch (transfer_mode)
    1262:	2b00      	cmp	r3, #0
    1264:	d018      	beq.n	1298 <usart_init+0x238>
    1266:	2380      	movs	r3, #128	; 0x80
    1268:	055b      	lsls	r3, r3, #21
    126a:	4599      	cmp	r9, r3
    126c:	d001      	beq.n	1272 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    126e:	2000      	movs	r0, #0
    1270:	e025      	b.n	12be <usart_init+0x25e>
			if (!config->use_external_clock) {
    1272:	2327      	movs	r3, #39	; 0x27
    1274:	5cf3      	ldrb	r3, [r6, r3]
    1276:	2b00      	cmp	r3, #0
    1278:	d000      	beq.n	127c <usart_init+0x21c>
    127a:	e775      	b.n	1168 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    127c:	6a33      	ldr	r3, [r6, #32]
    127e:	001f      	movs	r7, r3
    1280:	b2c0      	uxtb	r0, r0
    1282:	4b40      	ldr	r3, [pc, #256]	; (1384 <usart_init+0x324>)
    1284:	4798      	blx	r3
    1286:	0001      	movs	r1, r0
    1288:	220e      	movs	r2, #14
    128a:	ab06      	add	r3, sp, #24
    128c:	469c      	mov	ip, r3
    128e:	4462      	add	r2, ip
    1290:	0038      	movs	r0, r7
    1292:	4b3d      	ldr	r3, [pc, #244]	; (1388 <usart_init+0x328>)
    1294:	4798      	blx	r3
    1296:	e012      	b.n	12be <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1298:	2308      	movs	r3, #8
    129a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    129c:	2300      	movs	r3, #0
    129e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    12a0:	2327      	movs	r3, #39	; 0x27
    12a2:	5cf3      	ldrb	r3, [r6, r3]
    12a4:	2b00      	cmp	r3, #0
    12a6:	d00e      	beq.n	12c6 <usart_init+0x266>
				status_code =
    12a8:	9b06      	ldr	r3, [sp, #24]
    12aa:	9300      	str	r3, [sp, #0]
    12ac:	9b07      	ldr	r3, [sp, #28]
    12ae:	220e      	movs	r2, #14
    12b0:	a906      	add	r1, sp, #24
    12b2:	468c      	mov	ip, r1
    12b4:	4462      	add	r2, ip
    12b6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    12b8:	6a30      	ldr	r0, [r6, #32]
    12ba:	4f34      	ldr	r7, [pc, #208]	; (138c <usart_init+0x32c>)
    12bc:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    12be:	2800      	cmp	r0, #0
    12c0:	d000      	beq.n	12c4 <usart_init+0x264>
    12c2:	e6e0      	b.n	1086 <usart_init+0x26>
    12c4:	e750      	b.n	1168 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    12c6:	6a33      	ldr	r3, [r6, #32]
    12c8:	001f      	movs	r7, r3
    12ca:	b2c0      	uxtb	r0, r0
    12cc:	4b2d      	ldr	r3, [pc, #180]	; (1384 <usart_init+0x324>)
    12ce:	4798      	blx	r3
    12d0:	0001      	movs	r1, r0
				status_code =
    12d2:	9b06      	ldr	r3, [sp, #24]
    12d4:	9300      	str	r3, [sp, #0]
    12d6:	9b07      	ldr	r3, [sp, #28]
    12d8:	220e      	movs	r2, #14
    12da:	a806      	add	r0, sp, #24
    12dc:	4684      	mov	ip, r0
    12de:	4462      	add	r2, ip
    12e0:	0038      	movs	r0, r7
    12e2:	4f2a      	ldr	r7, [pc, #168]	; (138c <usart_init+0x32c>)
    12e4:	47b8      	blx	r7
    12e6:	e7ea      	b.n	12be <usart_init+0x25e>
		if(config->lin_slave_enable) {
    12e8:	7ef3      	ldrb	r3, [r6, #27]
    12ea:	2b00      	cmp	r3, #0
    12ec:	d100      	bne.n	12f0 <usart_init+0x290>
    12ee:	e77d      	b.n	11ec <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    12f0:	2380      	movs	r3, #128	; 0x80
    12f2:	04db      	lsls	r3, r3, #19
    12f4:	431f      	orrs	r7, r3
    12f6:	e779      	b.n	11ec <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    12f8:	0020      	movs	r0, r4
    12fa:	4b25      	ldr	r3, [pc, #148]	; (1390 <usart_init+0x330>)
    12fc:	4798      	blx	r3
    12fe:	e007      	b.n	1310 <usart_init+0x2b0>
    1300:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1302:	2f04      	cmp	r7, #4
    1304:	d00d      	beq.n	1322 <usart_init+0x2c2>
    1306:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1308:	00bb      	lsls	r3, r7, #2
    130a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    130c:	2800      	cmp	r0, #0
    130e:	d0f3      	beq.n	12f8 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1310:	1c43      	adds	r3, r0, #1
    1312:	d0f5      	beq.n	1300 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1314:	a90e      	add	r1, sp, #56	; 0x38
    1316:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1318:	0c00      	lsrs	r0, r0, #16
    131a:	b2c0      	uxtb	r0, r0
    131c:	4b1d      	ldr	r3, [pc, #116]	; (1394 <usart_init+0x334>)
    131e:	4798      	blx	r3
    1320:	e7ee      	b.n	1300 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1322:	2300      	movs	r3, #0
    1324:	60eb      	str	r3, [r5, #12]
    1326:	612b      	str	r3, [r5, #16]
    1328:	616b      	str	r3, [r5, #20]
    132a:	61ab      	str	r3, [r5, #24]
    132c:	61eb      	str	r3, [r5, #28]
    132e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1330:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1332:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1334:	2200      	movs	r2, #0
    1336:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1338:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    133a:	3330      	adds	r3, #48	; 0x30
    133c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    133e:	3301      	adds	r3, #1
    1340:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1342:	3301      	adds	r3, #1
    1344:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1346:	3301      	adds	r3, #1
    1348:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    134a:	6828      	ldr	r0, [r5, #0]
    134c:	4b07      	ldr	r3, [pc, #28]	; (136c <usart_init+0x30c>)
    134e:	4798      	blx	r3
    1350:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1352:	4911      	ldr	r1, [pc, #68]	; (1398 <usart_init+0x338>)
    1354:	4b11      	ldr	r3, [pc, #68]	; (139c <usart_init+0x33c>)
    1356:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1358:	00a4      	lsls	r4, r4, #2
    135a:	4b11      	ldr	r3, [pc, #68]	; (13a0 <usart_init+0x340>)
    135c:	50e5      	str	r5, [r4, r3]
	return status_code;
    135e:	2000      	movs	r0, #0
    1360:	e691      	b.n	1086 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1362:	2310      	movs	r3, #16
    1364:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1366:	2300      	movs	r3, #0
    1368:	9307      	str	r3, [sp, #28]
    136a:	e6e8      	b.n	113e <usart_init+0xde>
    136c:	00000f59 	.word	0x00000f59
    1370:	40000400 	.word	0x40000400
    1374:	00001a19 	.word	0x00001a19
    1378:	0000198d 	.word	0x0000198d
    137c:	00000d95 	.word	0x00000d95
    1380:	41002000 	.word	0x41002000
    1384:	00001a35 	.word	0x00001a35
    1388:	00000cd7 	.word	0x00000cd7
    138c:	00000d01 	.word	0x00000d01
    1390:	00000de1 	.word	0x00000de1
    1394:	00001b11 	.word	0x00001b11
    1398:	00001441 	.word	0x00001441
    139c:	00000f95 	.word	0x00000f95
    13a0:	200000e4 	.word	0x200000e4

000013a4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    13a4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    13a6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    13a8:	2a00      	cmp	r2, #0
    13aa:	d101      	bne.n	13b0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    13ac:	0018      	movs	r0, r3
    13ae:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    13b0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    13b2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    13b4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    13b6:	2a00      	cmp	r2, #0
    13b8:	d1f8      	bne.n	13ac <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    13ba:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    13bc:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    13be:	2a00      	cmp	r2, #0
    13c0:	d1fc      	bne.n	13bc <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    13c2:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    13c4:	2102      	movs	r1, #2
    13c6:	7e1a      	ldrb	r2, [r3, #24]
    13c8:	420a      	tst	r2, r1
    13ca:	d0fc      	beq.n	13c6 <usart_write_wait+0x22>
	return STATUS_OK;
    13cc:	2300      	movs	r3, #0
    13ce:	e7ed      	b.n	13ac <usart_write_wait+0x8>

000013d0 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    13d0:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    13d2:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    13d4:	2a00      	cmp	r2, #0
    13d6:	d101      	bne.n	13dc <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    13d8:	0018      	movs	r0, r3
    13da:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    13dc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    13de:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    13e0:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    13e2:	2a00      	cmp	r2, #0
    13e4:	d1f8      	bne.n	13d8 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    13e6:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    13e8:	7e10      	ldrb	r0, [r2, #24]
    13ea:	0740      	lsls	r0, r0, #29
    13ec:	d5f4      	bpl.n	13d8 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    13ee:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    13f0:	2b00      	cmp	r3, #0
    13f2:	d1fc      	bne.n	13ee <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    13f4:	8b53      	ldrh	r3, [r2, #26]
    13f6:	b2db      	uxtb	r3, r3
	if (error_code) {
    13f8:	0698      	lsls	r0, r3, #26
    13fa:	d01d      	beq.n	1438 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    13fc:	0798      	lsls	r0, r3, #30
    13fe:	d503      	bpl.n	1408 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1400:	2302      	movs	r3, #2
    1402:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1404:	3318      	adds	r3, #24
    1406:	e7e7      	b.n	13d8 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1408:	0758      	lsls	r0, r3, #29
    140a:	d503      	bpl.n	1414 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    140c:	2304      	movs	r3, #4
    140e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1410:	331a      	adds	r3, #26
    1412:	e7e1      	b.n	13d8 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1414:	07d8      	lsls	r0, r3, #31
    1416:	d503      	bpl.n	1420 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1418:	2301      	movs	r3, #1
    141a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    141c:	3312      	adds	r3, #18
    141e:	e7db      	b.n	13d8 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1420:	06d8      	lsls	r0, r3, #27
    1422:	d503      	bpl.n	142c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1424:	2310      	movs	r3, #16
    1426:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1428:	3332      	adds	r3, #50	; 0x32
    142a:	e7d5      	b.n	13d8 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    142c:	069b      	lsls	r3, r3, #26
    142e:	d503      	bpl.n	1438 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1430:	2320      	movs	r3, #32
    1432:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1434:	3321      	adds	r3, #33	; 0x21
    1436:	e7cf      	b.n	13d8 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1438:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    143a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    143c:	2300      	movs	r3, #0
    143e:	e7cb      	b.n	13d8 <usart_read_wait+0x8>

00001440 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1442:	0080      	lsls	r0, r0, #2
    1444:	4b62      	ldr	r3, [pc, #392]	; (15d0 <_usart_interrupt_handler+0x190>)
    1446:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1448:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    144a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    144c:	2b00      	cmp	r3, #0
    144e:	d1fc      	bne.n	144a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1450:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1452:	7da6      	ldrb	r6, [r4, #22]
    1454:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1456:	2330      	movs	r3, #48	; 0x30
    1458:	5ceb      	ldrb	r3, [r5, r3]
    145a:	2231      	movs	r2, #49	; 0x31
    145c:	5caf      	ldrb	r7, [r5, r2]
    145e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1460:	07f3      	lsls	r3, r6, #31
    1462:	d522      	bpl.n	14aa <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1464:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1466:	b29b      	uxth	r3, r3
    1468:	2b00      	cmp	r3, #0
    146a:	d01c      	beq.n	14a6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    146c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    146e:	7813      	ldrb	r3, [r2, #0]
    1470:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1472:	1c51      	adds	r1, r2, #1
    1474:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1476:	7969      	ldrb	r1, [r5, #5]
    1478:	2901      	cmp	r1, #1
    147a:	d00e      	beq.n	149a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    147c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    147e:	05db      	lsls	r3, r3, #23
    1480:	0ddb      	lsrs	r3, r3, #23
    1482:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1484:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1486:	3b01      	subs	r3, #1
    1488:	b29b      	uxth	r3, r3
    148a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    148c:	2b00      	cmp	r3, #0
    148e:	d10c      	bne.n	14aa <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1490:	3301      	adds	r3, #1
    1492:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1494:	3301      	adds	r3, #1
    1496:	75a3      	strb	r3, [r4, #22]
    1498:	e007      	b.n	14aa <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    149a:	7851      	ldrb	r1, [r2, #1]
    149c:	0209      	lsls	r1, r1, #8
    149e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    14a0:	3202      	adds	r2, #2
    14a2:	62aa      	str	r2, [r5, #40]	; 0x28
    14a4:	e7eb      	b.n	147e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    14a6:	2301      	movs	r3, #1
    14a8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    14aa:	07b3      	lsls	r3, r6, #30
    14ac:	d506      	bpl.n	14bc <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    14ae:	2302      	movs	r3, #2
    14b0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    14b2:	2200      	movs	r2, #0
    14b4:	3331      	adds	r3, #49	; 0x31
    14b6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    14b8:	07fb      	lsls	r3, r7, #31
    14ba:	d41a      	bmi.n	14f2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    14bc:	0773      	lsls	r3, r6, #29
    14be:	d565      	bpl.n	158c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    14c0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    14c2:	b29b      	uxth	r3, r3
    14c4:	2b00      	cmp	r3, #0
    14c6:	d05f      	beq.n	1588 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    14c8:	8b63      	ldrh	r3, [r4, #26]
    14ca:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    14cc:	071a      	lsls	r2, r3, #28
    14ce:	d414      	bmi.n	14fa <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    14d0:	223f      	movs	r2, #63	; 0x3f
    14d2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    14d4:	2b00      	cmp	r3, #0
    14d6:	d034      	beq.n	1542 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    14d8:	079a      	lsls	r2, r3, #30
    14da:	d511      	bpl.n	1500 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    14dc:	221a      	movs	r2, #26
    14de:	2332      	movs	r3, #50	; 0x32
    14e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    14e2:	3b30      	subs	r3, #48	; 0x30
    14e4:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    14e6:	077b      	lsls	r3, r7, #29
    14e8:	d550      	bpl.n	158c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    14ea:	0028      	movs	r0, r5
    14ec:	696b      	ldr	r3, [r5, #20]
    14ee:	4798      	blx	r3
    14f0:	e04c      	b.n	158c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    14f2:	0028      	movs	r0, r5
    14f4:	68eb      	ldr	r3, [r5, #12]
    14f6:	4798      	blx	r3
    14f8:	e7e0      	b.n	14bc <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    14fa:	2237      	movs	r2, #55	; 0x37
    14fc:	4013      	ands	r3, r2
    14fe:	e7e9      	b.n	14d4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1500:	075a      	lsls	r2, r3, #29
    1502:	d505      	bpl.n	1510 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1504:	221e      	movs	r2, #30
    1506:	2332      	movs	r3, #50	; 0x32
    1508:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    150a:	3b2e      	subs	r3, #46	; 0x2e
    150c:	8363      	strh	r3, [r4, #26]
    150e:	e7ea      	b.n	14e6 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1510:	07da      	lsls	r2, r3, #31
    1512:	d505      	bpl.n	1520 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1514:	2213      	movs	r2, #19
    1516:	2332      	movs	r3, #50	; 0x32
    1518:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    151a:	3b31      	subs	r3, #49	; 0x31
    151c:	8363      	strh	r3, [r4, #26]
    151e:	e7e2      	b.n	14e6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1520:	06da      	lsls	r2, r3, #27
    1522:	d505      	bpl.n	1530 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1524:	2242      	movs	r2, #66	; 0x42
    1526:	2332      	movs	r3, #50	; 0x32
    1528:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    152a:	3b22      	subs	r3, #34	; 0x22
    152c:	8363      	strh	r3, [r4, #26]
    152e:	e7da      	b.n	14e6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1530:	2220      	movs	r2, #32
    1532:	421a      	tst	r2, r3
    1534:	d0d7      	beq.n	14e6 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1536:	3221      	adds	r2, #33	; 0x21
    1538:	2332      	movs	r3, #50	; 0x32
    153a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    153c:	3b12      	subs	r3, #18
    153e:	8363      	strh	r3, [r4, #26]
    1540:	e7d1      	b.n	14e6 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1542:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1544:	05db      	lsls	r3, r3, #23
    1546:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1548:	b2da      	uxtb	r2, r3
    154a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    154c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    154e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1550:	1c51      	adds	r1, r2, #1
    1552:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1554:	7969      	ldrb	r1, [r5, #5]
    1556:	2901      	cmp	r1, #1
    1558:	d010      	beq.n	157c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    155a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    155c:	3b01      	subs	r3, #1
    155e:	b29b      	uxth	r3, r3
    1560:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1562:	2b00      	cmp	r3, #0
    1564:	d112      	bne.n	158c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1566:	3304      	adds	r3, #4
    1568:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    156a:	2200      	movs	r2, #0
    156c:	332e      	adds	r3, #46	; 0x2e
    156e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1570:	07bb      	lsls	r3, r7, #30
    1572:	d50b      	bpl.n	158c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1574:	0028      	movs	r0, r5
    1576:	692b      	ldr	r3, [r5, #16]
    1578:	4798      	blx	r3
    157a:	e007      	b.n	158c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    157c:	0a1b      	lsrs	r3, r3, #8
    157e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1580:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1582:	3301      	adds	r3, #1
    1584:	626b      	str	r3, [r5, #36]	; 0x24
    1586:	e7e8      	b.n	155a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1588:	2304      	movs	r3, #4
    158a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    158c:	06f3      	lsls	r3, r6, #27
    158e:	d504      	bpl.n	159a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1590:	2310      	movs	r3, #16
    1592:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1594:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1596:	06fb      	lsls	r3, r7, #27
    1598:	d40e      	bmi.n	15b8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    159a:	06b3      	lsls	r3, r6, #26
    159c:	d504      	bpl.n	15a8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    159e:	2320      	movs	r3, #32
    15a0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    15a2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    15a4:	073b      	lsls	r3, r7, #28
    15a6:	d40b      	bmi.n	15c0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    15a8:	0733      	lsls	r3, r6, #28
    15aa:	d504      	bpl.n	15b6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    15ac:	2308      	movs	r3, #8
    15ae:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    15b0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    15b2:	06bb      	lsls	r3, r7, #26
    15b4:	d408      	bmi.n	15c8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    15b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    15b8:	0028      	movs	r0, r5
    15ba:	69eb      	ldr	r3, [r5, #28]
    15bc:	4798      	blx	r3
    15be:	e7ec      	b.n	159a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    15c0:	0028      	movs	r0, r5
    15c2:	69ab      	ldr	r3, [r5, #24]
    15c4:	4798      	blx	r3
    15c6:	e7ef      	b.n	15a8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    15c8:	6a2b      	ldr	r3, [r5, #32]
    15ca:	0028      	movs	r0, r5
    15cc:	4798      	blx	r3
}
    15ce:	e7f2      	b.n	15b6 <_usart_interrupt_handler+0x176>
    15d0:	200000e4 	.word	0x200000e4

000015d4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    15d4:	b510      	push	{r4, lr}
	switch (clock_source) {
    15d6:	2808      	cmp	r0, #8
    15d8:	d803      	bhi.n	15e2 <system_clock_source_get_hz+0xe>
    15da:	0080      	lsls	r0, r0, #2
    15dc:	4b1b      	ldr	r3, [pc, #108]	; (164c <system_clock_source_get_hz+0x78>)
    15de:	581b      	ldr	r3, [r3, r0]
    15e0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    15e2:	2000      	movs	r0, #0
    15e4:	e030      	b.n	1648 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    15e6:	4b1a      	ldr	r3, [pc, #104]	; (1650 <system_clock_source_get_hz+0x7c>)
    15e8:	6918      	ldr	r0, [r3, #16]
    15ea:	e02d      	b.n	1648 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    15ec:	4b19      	ldr	r3, [pc, #100]	; (1654 <system_clock_source_get_hz+0x80>)
    15ee:	6a1b      	ldr	r3, [r3, #32]
    15f0:	059b      	lsls	r3, r3, #22
    15f2:	0f9b      	lsrs	r3, r3, #30
    15f4:	4818      	ldr	r0, [pc, #96]	; (1658 <system_clock_source_get_hz+0x84>)
    15f6:	40d8      	lsrs	r0, r3
    15f8:	e026      	b.n	1648 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    15fa:	4b15      	ldr	r3, [pc, #84]	; (1650 <system_clock_source_get_hz+0x7c>)
    15fc:	6958      	ldr	r0, [r3, #20]
    15fe:	e023      	b.n	1648 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1600:	4b13      	ldr	r3, [pc, #76]	; (1650 <system_clock_source_get_hz+0x7c>)
    1602:	681b      	ldr	r3, [r3, #0]
			return 0;
    1604:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1606:	079b      	lsls	r3, r3, #30
    1608:	d51e      	bpl.n	1648 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    160a:	4912      	ldr	r1, [pc, #72]	; (1654 <system_clock_source_get_hz+0x80>)
    160c:	2210      	movs	r2, #16
    160e:	68cb      	ldr	r3, [r1, #12]
    1610:	421a      	tst	r2, r3
    1612:	d0fc      	beq.n	160e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1614:	4b0e      	ldr	r3, [pc, #56]	; (1650 <system_clock_source_get_hz+0x7c>)
    1616:	681b      	ldr	r3, [r3, #0]
    1618:	075b      	lsls	r3, r3, #29
    161a:	d401      	bmi.n	1620 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    161c:	480f      	ldr	r0, [pc, #60]	; (165c <system_clock_source_get_hz+0x88>)
    161e:	e013      	b.n	1648 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1620:	2000      	movs	r0, #0
    1622:	4b0f      	ldr	r3, [pc, #60]	; (1660 <system_clock_source_get_hz+0x8c>)
    1624:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1626:	4b0a      	ldr	r3, [pc, #40]	; (1650 <system_clock_source_get_hz+0x7c>)
    1628:	689b      	ldr	r3, [r3, #8]
    162a:	041b      	lsls	r3, r3, #16
    162c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    162e:	4358      	muls	r0, r3
    1630:	e00a      	b.n	1648 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1632:	2350      	movs	r3, #80	; 0x50
    1634:	4a07      	ldr	r2, [pc, #28]	; (1654 <system_clock_source_get_hz+0x80>)
    1636:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1638:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    163a:	075b      	lsls	r3, r3, #29
    163c:	d504      	bpl.n	1648 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    163e:	4b04      	ldr	r3, [pc, #16]	; (1650 <system_clock_source_get_hz+0x7c>)
    1640:	68d8      	ldr	r0, [r3, #12]
    1642:	e001      	b.n	1648 <system_clock_source_get_hz+0x74>
		return 32768UL;
    1644:	2080      	movs	r0, #128	; 0x80
    1646:	0200      	lsls	r0, r0, #8
	}
}
    1648:	bd10      	pop	{r4, pc}
    164a:	46c0      	nop			; (mov r8, r8)
    164c:	00004b60 	.word	0x00004b60
    1650:	200000b4 	.word	0x200000b4
    1654:	40000800 	.word	0x40000800
    1658:	007a1200 	.word	0x007a1200
    165c:	02dc6c00 	.word	0x02dc6c00
    1660:	00001a35 	.word	0x00001a35

00001664 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1664:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1666:	490c      	ldr	r1, [pc, #48]	; (1698 <system_clock_source_osc8m_set_config+0x34>)
    1668:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    166a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    166c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    166e:	7840      	ldrb	r0, [r0, #1]
    1670:	2201      	movs	r2, #1
    1672:	4010      	ands	r0, r2
    1674:	0180      	lsls	r0, r0, #6
    1676:	2640      	movs	r6, #64	; 0x40
    1678:	43b3      	bics	r3, r6
    167a:	4303      	orrs	r3, r0
    167c:	402a      	ands	r2, r5
    167e:	01d2      	lsls	r2, r2, #7
    1680:	2080      	movs	r0, #128	; 0x80
    1682:	4383      	bics	r3, r0
    1684:	4313      	orrs	r3, r2
    1686:	2203      	movs	r2, #3
    1688:	4022      	ands	r2, r4
    168a:	0212      	lsls	r2, r2, #8
    168c:	4803      	ldr	r0, [pc, #12]	; (169c <system_clock_source_osc8m_set_config+0x38>)
    168e:	4003      	ands	r3, r0
    1690:	4313      	orrs	r3, r2
    1692:	620b      	str	r3, [r1, #32]
}
    1694:	bd70      	pop	{r4, r5, r6, pc}
    1696:	46c0      	nop			; (mov r8, r8)
    1698:	40000800 	.word	0x40000800
    169c:	fffffcff 	.word	0xfffffcff

000016a0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    16a0:	2808      	cmp	r0, #8
    16a2:	d803      	bhi.n	16ac <system_clock_source_enable+0xc>
    16a4:	0080      	lsls	r0, r0, #2
    16a6:	4b25      	ldr	r3, [pc, #148]	; (173c <system_clock_source_enable+0x9c>)
    16a8:	581b      	ldr	r3, [r3, r0]
    16aa:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    16ac:	2017      	movs	r0, #23
    16ae:	e044      	b.n	173a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    16b0:	4a23      	ldr	r2, [pc, #140]	; (1740 <system_clock_source_enable+0xa0>)
    16b2:	6a13      	ldr	r3, [r2, #32]
    16b4:	2102      	movs	r1, #2
    16b6:	430b      	orrs	r3, r1
    16b8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    16ba:	2000      	movs	r0, #0
    16bc:	e03d      	b.n	173a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    16be:	4a20      	ldr	r2, [pc, #128]	; (1740 <system_clock_source_enable+0xa0>)
    16c0:	6993      	ldr	r3, [r2, #24]
    16c2:	2102      	movs	r1, #2
    16c4:	430b      	orrs	r3, r1
    16c6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    16c8:	2000      	movs	r0, #0
		break;
    16ca:	e036      	b.n	173a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    16cc:	4a1c      	ldr	r2, [pc, #112]	; (1740 <system_clock_source_enable+0xa0>)
    16ce:	8a13      	ldrh	r3, [r2, #16]
    16d0:	2102      	movs	r1, #2
    16d2:	430b      	orrs	r3, r1
    16d4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    16d6:	2000      	movs	r0, #0
		break;
    16d8:	e02f      	b.n	173a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    16da:	4a19      	ldr	r2, [pc, #100]	; (1740 <system_clock_source_enable+0xa0>)
    16dc:	8a93      	ldrh	r3, [r2, #20]
    16de:	2102      	movs	r1, #2
    16e0:	430b      	orrs	r3, r1
    16e2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    16e4:	2000      	movs	r0, #0
		break;
    16e6:	e028      	b.n	173a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    16e8:	4916      	ldr	r1, [pc, #88]	; (1744 <system_clock_source_enable+0xa4>)
    16ea:	680b      	ldr	r3, [r1, #0]
    16ec:	2202      	movs	r2, #2
    16ee:	4313      	orrs	r3, r2
    16f0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    16f2:	4b13      	ldr	r3, [pc, #76]	; (1740 <system_clock_source_enable+0xa0>)
    16f4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    16f6:	0019      	movs	r1, r3
    16f8:	320e      	adds	r2, #14
    16fa:	68cb      	ldr	r3, [r1, #12]
    16fc:	421a      	tst	r2, r3
    16fe:	d0fc      	beq.n	16fa <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1700:	4a10      	ldr	r2, [pc, #64]	; (1744 <system_clock_source_enable+0xa4>)
    1702:	6891      	ldr	r1, [r2, #8]
    1704:	4b0e      	ldr	r3, [pc, #56]	; (1740 <system_clock_source_enable+0xa0>)
    1706:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1708:	6852      	ldr	r2, [r2, #4]
    170a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    170c:	2200      	movs	r2, #0
    170e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1710:	0019      	movs	r1, r3
    1712:	3210      	adds	r2, #16
    1714:	68cb      	ldr	r3, [r1, #12]
    1716:	421a      	tst	r2, r3
    1718:	d0fc      	beq.n	1714 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    171a:	4b0a      	ldr	r3, [pc, #40]	; (1744 <system_clock_source_enable+0xa4>)
    171c:	681b      	ldr	r3, [r3, #0]
    171e:	b29b      	uxth	r3, r3
    1720:	4a07      	ldr	r2, [pc, #28]	; (1740 <system_clock_source_enable+0xa0>)
    1722:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1724:	2000      	movs	r0, #0
    1726:	e008      	b.n	173a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1728:	4905      	ldr	r1, [pc, #20]	; (1740 <system_clock_source_enable+0xa0>)
    172a:	2244      	movs	r2, #68	; 0x44
    172c:	5c8b      	ldrb	r3, [r1, r2]
    172e:	2002      	movs	r0, #2
    1730:	4303      	orrs	r3, r0
    1732:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1734:	2000      	movs	r0, #0
		break;
    1736:	e000      	b.n	173a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1738:	2000      	movs	r0, #0
}
    173a:	4770      	bx	lr
    173c:	00004b84 	.word	0x00004b84
    1740:	40000800 	.word	0x40000800
    1744:	200000b4 	.word	0x200000b4

00001748 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1748:	b530      	push	{r4, r5, lr}
    174a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    174c:	22c2      	movs	r2, #194	; 0xc2
    174e:	00d2      	lsls	r2, r2, #3
    1750:	4b1a      	ldr	r3, [pc, #104]	; (17bc <system_clock_init+0x74>)
    1752:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1754:	4a1a      	ldr	r2, [pc, #104]	; (17c0 <system_clock_init+0x78>)
    1756:	6853      	ldr	r3, [r2, #4]
    1758:	211e      	movs	r1, #30
    175a:	438b      	bics	r3, r1
    175c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    175e:	2301      	movs	r3, #1
    1760:	466a      	mov	r2, sp
    1762:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1764:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1766:	4d17      	ldr	r5, [pc, #92]	; (17c4 <system_clock_init+0x7c>)
    1768:	b2e0      	uxtb	r0, r4
    176a:	4669      	mov	r1, sp
    176c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    176e:	3401      	adds	r4, #1
    1770:	2c25      	cmp	r4, #37	; 0x25
    1772:	d1f9      	bne.n	1768 <system_clock_init+0x20>
	config->run_in_standby  = false;
    1774:	a803      	add	r0, sp, #12
    1776:	2400      	movs	r4, #0
    1778:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    177a:	2501      	movs	r5, #1
    177c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    177e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1780:	4b11      	ldr	r3, [pc, #68]	; (17c8 <system_clock_init+0x80>)
    1782:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1784:	2006      	movs	r0, #6
    1786:	4b11      	ldr	r3, [pc, #68]	; (17cc <system_clock_init+0x84>)
    1788:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    178a:	4b11      	ldr	r3, [pc, #68]	; (17d0 <system_clock_init+0x88>)
    178c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    178e:	4b11      	ldr	r3, [pc, #68]	; (17d4 <system_clock_init+0x8c>)
    1790:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1792:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1794:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1796:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1798:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    179a:	466b      	mov	r3, sp
    179c:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    179e:	2306      	movs	r3, #6
    17a0:	466a      	mov	r2, sp
    17a2:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    17a4:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    17a6:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    17a8:	4669      	mov	r1, sp
    17aa:	2000      	movs	r0, #0
    17ac:	4b0a      	ldr	r3, [pc, #40]	; (17d8 <system_clock_init+0x90>)
    17ae:	4798      	blx	r3
    17b0:	2000      	movs	r0, #0
    17b2:	4b0a      	ldr	r3, [pc, #40]	; (17dc <system_clock_init+0x94>)
    17b4:	4798      	blx	r3
#endif
}
    17b6:	b005      	add	sp, #20
    17b8:	bd30      	pop	{r4, r5, pc}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	40000800 	.word	0x40000800
    17c0:	41004000 	.word	0x41004000
    17c4:	00001a19 	.word	0x00001a19
    17c8:	00001665 	.word	0x00001665
    17cc:	000016a1 	.word	0x000016a1
    17d0:	000017e1 	.word	0x000017e1
    17d4:	40000400 	.word	0x40000400
    17d8:	00001805 	.word	0x00001805
    17dc:	000018bd 	.word	0x000018bd

000017e0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    17e0:	4a06      	ldr	r2, [pc, #24]	; (17fc <system_gclk_init+0x1c>)
    17e2:	6993      	ldr	r3, [r2, #24]
    17e4:	2108      	movs	r1, #8
    17e6:	430b      	orrs	r3, r1
    17e8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    17ea:	2201      	movs	r2, #1
    17ec:	4b04      	ldr	r3, [pc, #16]	; (1800 <system_gclk_init+0x20>)
    17ee:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    17f0:	0019      	movs	r1, r3
    17f2:	780b      	ldrb	r3, [r1, #0]
    17f4:	4213      	tst	r3, r2
    17f6:	d1fc      	bne.n	17f2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    17f8:	4770      	bx	lr
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	40000400 	.word	0x40000400
    1800:	40000c00 	.word	0x40000c00

00001804 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1804:	b570      	push	{r4, r5, r6, lr}
    1806:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1808:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    180a:	780d      	ldrb	r5, [r1, #0]
    180c:	022d      	lsls	r5, r5, #8
    180e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1810:	784b      	ldrb	r3, [r1, #1]
    1812:	2b00      	cmp	r3, #0
    1814:	d002      	beq.n	181c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1816:	2380      	movs	r3, #128	; 0x80
    1818:	02db      	lsls	r3, r3, #11
    181a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    181c:	7a4b      	ldrb	r3, [r1, #9]
    181e:	2b00      	cmp	r3, #0
    1820:	d002      	beq.n	1828 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1822:	2380      	movs	r3, #128	; 0x80
    1824:	031b      	lsls	r3, r3, #12
    1826:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1828:	6848      	ldr	r0, [r1, #4]
    182a:	2801      	cmp	r0, #1
    182c:	d910      	bls.n	1850 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    182e:	1e43      	subs	r3, r0, #1
    1830:	4218      	tst	r0, r3
    1832:	d134      	bne.n	189e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1834:	2802      	cmp	r0, #2
    1836:	d930      	bls.n	189a <system_gclk_gen_set_config+0x96>
    1838:	2302      	movs	r3, #2
    183a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    183c:	3201      	adds	r2, #1
						mask <<= 1) {
    183e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1840:	4298      	cmp	r0, r3
    1842:	d8fb      	bhi.n	183c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1844:	0212      	lsls	r2, r2, #8
    1846:	4332      	orrs	r2, r6
    1848:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    184a:	2380      	movs	r3, #128	; 0x80
    184c:	035b      	lsls	r3, r3, #13
    184e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1850:	7a0b      	ldrb	r3, [r1, #8]
    1852:	2b00      	cmp	r3, #0
    1854:	d002      	beq.n	185c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1856:	2380      	movs	r3, #128	; 0x80
    1858:	039b      	lsls	r3, r3, #14
    185a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    185c:	4a13      	ldr	r2, [pc, #76]	; (18ac <system_gclk_gen_set_config+0xa8>)
    185e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1860:	b25b      	sxtb	r3, r3
    1862:	2b00      	cmp	r3, #0
    1864:	dbfb      	blt.n	185e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1866:	4b12      	ldr	r3, [pc, #72]	; (18b0 <system_gclk_gen_set_config+0xac>)
    1868:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    186a:	4b12      	ldr	r3, [pc, #72]	; (18b4 <system_gclk_gen_set_config+0xb0>)
    186c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    186e:	4a0f      	ldr	r2, [pc, #60]	; (18ac <system_gclk_gen_set_config+0xa8>)
    1870:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1872:	b25b      	sxtb	r3, r3
    1874:	2b00      	cmp	r3, #0
    1876:	dbfb      	blt.n	1870 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1878:	4b0c      	ldr	r3, [pc, #48]	; (18ac <system_gclk_gen_set_config+0xa8>)
    187a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    187c:	001a      	movs	r2, r3
    187e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1880:	b25b      	sxtb	r3, r3
    1882:	2b00      	cmp	r3, #0
    1884:	dbfb      	blt.n	187e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1886:	4a09      	ldr	r2, [pc, #36]	; (18ac <system_gclk_gen_set_config+0xa8>)
    1888:	6853      	ldr	r3, [r2, #4]
    188a:	2180      	movs	r1, #128	; 0x80
    188c:	0249      	lsls	r1, r1, #9
    188e:	400b      	ands	r3, r1
    1890:	431d      	orrs	r5, r3
    1892:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1894:	4b08      	ldr	r3, [pc, #32]	; (18b8 <system_gclk_gen_set_config+0xb4>)
    1896:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1898:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    189a:	2200      	movs	r2, #0
    189c:	e7d2      	b.n	1844 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    189e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    18a0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    18a2:	2380      	movs	r3, #128	; 0x80
    18a4:	029b      	lsls	r3, r3, #10
    18a6:	431d      	orrs	r5, r3
    18a8:	e7d2      	b.n	1850 <system_gclk_gen_set_config+0x4c>
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	40000c00 	.word	0x40000c00
    18b0:	0000058d 	.word	0x0000058d
    18b4:	40000c08 	.word	0x40000c08
    18b8:	000005cd 	.word	0x000005cd

000018bc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    18bc:	b510      	push	{r4, lr}
    18be:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18c0:	4a0b      	ldr	r2, [pc, #44]	; (18f0 <system_gclk_gen_enable+0x34>)
    18c2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18c4:	b25b      	sxtb	r3, r3
    18c6:	2b00      	cmp	r3, #0
    18c8:	dbfb      	blt.n	18c2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    18ca:	4b0a      	ldr	r3, [pc, #40]	; (18f4 <system_gclk_gen_enable+0x38>)
    18cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18ce:	4b0a      	ldr	r3, [pc, #40]	; (18f8 <system_gclk_gen_enable+0x3c>)
    18d0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18d2:	4a07      	ldr	r2, [pc, #28]	; (18f0 <system_gclk_gen_enable+0x34>)
    18d4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18d6:	b25b      	sxtb	r3, r3
    18d8:	2b00      	cmp	r3, #0
    18da:	dbfb      	blt.n	18d4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    18dc:	4a04      	ldr	r2, [pc, #16]	; (18f0 <system_gclk_gen_enable+0x34>)
    18de:	6851      	ldr	r1, [r2, #4]
    18e0:	2380      	movs	r3, #128	; 0x80
    18e2:	025b      	lsls	r3, r3, #9
    18e4:	430b      	orrs	r3, r1
    18e6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    18e8:	4b04      	ldr	r3, [pc, #16]	; (18fc <system_gclk_gen_enable+0x40>)
    18ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    18ec:	bd10      	pop	{r4, pc}
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	40000c00 	.word	0x40000c00
    18f4:	0000058d 	.word	0x0000058d
    18f8:	40000c04 	.word	0x40000c04
    18fc:	000005cd 	.word	0x000005cd

00001900 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1900:	b570      	push	{r4, r5, r6, lr}
    1902:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1904:	4a1a      	ldr	r2, [pc, #104]	; (1970 <system_gclk_gen_get_hz+0x70>)
    1906:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1908:	b25b      	sxtb	r3, r3
    190a:	2b00      	cmp	r3, #0
    190c:	dbfb      	blt.n	1906 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    190e:	4b19      	ldr	r3, [pc, #100]	; (1974 <system_gclk_gen_get_hz+0x74>)
    1910:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1912:	4b19      	ldr	r3, [pc, #100]	; (1978 <system_gclk_gen_get_hz+0x78>)
    1914:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1916:	4a16      	ldr	r2, [pc, #88]	; (1970 <system_gclk_gen_get_hz+0x70>)
    1918:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    191a:	b25b      	sxtb	r3, r3
    191c:	2b00      	cmp	r3, #0
    191e:	dbfb      	blt.n	1918 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1920:	4e13      	ldr	r6, [pc, #76]	; (1970 <system_gclk_gen_get_hz+0x70>)
    1922:	6870      	ldr	r0, [r6, #4]
    1924:	04c0      	lsls	r0, r0, #19
    1926:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1928:	4b14      	ldr	r3, [pc, #80]	; (197c <system_gclk_gen_get_hz+0x7c>)
    192a:	4798      	blx	r3
    192c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    192e:	4b12      	ldr	r3, [pc, #72]	; (1978 <system_gclk_gen_get_hz+0x78>)
    1930:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1932:	6876      	ldr	r6, [r6, #4]
    1934:	02f6      	lsls	r6, r6, #11
    1936:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1938:	4b11      	ldr	r3, [pc, #68]	; (1980 <system_gclk_gen_get_hz+0x80>)
    193a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    193c:	4a0c      	ldr	r2, [pc, #48]	; (1970 <system_gclk_gen_get_hz+0x70>)
    193e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1940:	b25b      	sxtb	r3, r3
    1942:	2b00      	cmp	r3, #0
    1944:	dbfb      	blt.n	193e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1946:	4b0a      	ldr	r3, [pc, #40]	; (1970 <system_gclk_gen_get_hz+0x70>)
    1948:	689c      	ldr	r4, [r3, #8]
    194a:	0224      	lsls	r4, r4, #8
    194c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    194e:	4b0d      	ldr	r3, [pc, #52]	; (1984 <system_gclk_gen_get_hz+0x84>)
    1950:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1952:	2e00      	cmp	r6, #0
    1954:	d107      	bne.n	1966 <system_gclk_gen_get_hz+0x66>
    1956:	2c01      	cmp	r4, #1
    1958:	d907      	bls.n	196a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    195a:	0021      	movs	r1, r4
    195c:	0028      	movs	r0, r5
    195e:	4b0a      	ldr	r3, [pc, #40]	; (1988 <system_gclk_gen_get_hz+0x88>)
    1960:	4798      	blx	r3
    1962:	0005      	movs	r5, r0
    1964:	e001      	b.n	196a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1966:	3401      	adds	r4, #1
    1968:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    196a:	0028      	movs	r0, r5
    196c:	bd70      	pop	{r4, r5, r6, pc}
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	40000c00 	.word	0x40000c00
    1974:	0000058d 	.word	0x0000058d
    1978:	40000c04 	.word	0x40000c04
    197c:	000015d5 	.word	0x000015d5
    1980:	40000c08 	.word	0x40000c08
    1984:	000005cd 	.word	0x000005cd
    1988:	00001da1 	.word	0x00001da1

0000198c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    198c:	b510      	push	{r4, lr}
    198e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1990:	4b06      	ldr	r3, [pc, #24]	; (19ac <system_gclk_chan_enable+0x20>)
    1992:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1994:	4b06      	ldr	r3, [pc, #24]	; (19b0 <system_gclk_chan_enable+0x24>)
    1996:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1998:	4a06      	ldr	r2, [pc, #24]	; (19b4 <system_gclk_chan_enable+0x28>)
    199a:	8853      	ldrh	r3, [r2, #2]
    199c:	2180      	movs	r1, #128	; 0x80
    199e:	01c9      	lsls	r1, r1, #7
    19a0:	430b      	orrs	r3, r1
    19a2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    19a4:	4b04      	ldr	r3, [pc, #16]	; (19b8 <system_gclk_chan_enable+0x2c>)
    19a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19a8:	bd10      	pop	{r4, pc}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	0000058d 	.word	0x0000058d
    19b0:	40000c02 	.word	0x40000c02
    19b4:	40000c00 	.word	0x40000c00
    19b8:	000005cd 	.word	0x000005cd

000019bc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    19bc:	b510      	push	{r4, lr}
    19be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19c0:	4b0f      	ldr	r3, [pc, #60]	; (1a00 <system_gclk_chan_disable+0x44>)
    19c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19c4:	4b0f      	ldr	r3, [pc, #60]	; (1a04 <system_gclk_chan_disable+0x48>)
    19c6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    19c8:	4a0f      	ldr	r2, [pc, #60]	; (1a08 <system_gclk_chan_disable+0x4c>)
    19ca:	8853      	ldrh	r3, [r2, #2]
    19cc:	051b      	lsls	r3, r3, #20
    19ce:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    19d0:	8853      	ldrh	r3, [r2, #2]
    19d2:	490e      	ldr	r1, [pc, #56]	; (1a0c <system_gclk_chan_disable+0x50>)
    19d4:	400b      	ands	r3, r1
    19d6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    19d8:	8853      	ldrh	r3, [r2, #2]
    19da:	490d      	ldr	r1, [pc, #52]	; (1a10 <system_gclk_chan_disable+0x54>)
    19dc:	400b      	ands	r3, r1
    19de:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    19e0:	0011      	movs	r1, r2
    19e2:	2280      	movs	r2, #128	; 0x80
    19e4:	01d2      	lsls	r2, r2, #7
    19e6:	884b      	ldrh	r3, [r1, #2]
    19e8:	4213      	tst	r3, r2
    19ea:	d1fc      	bne.n	19e6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    19ec:	4906      	ldr	r1, [pc, #24]	; (1a08 <system_gclk_chan_disable+0x4c>)
    19ee:	884a      	ldrh	r2, [r1, #2]
    19f0:	0203      	lsls	r3, r0, #8
    19f2:	4806      	ldr	r0, [pc, #24]	; (1a0c <system_gclk_chan_disable+0x50>)
    19f4:	4002      	ands	r2, r0
    19f6:	4313      	orrs	r3, r2
    19f8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    19fa:	4b06      	ldr	r3, [pc, #24]	; (1a14 <system_gclk_chan_disable+0x58>)
    19fc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19fe:	bd10      	pop	{r4, pc}
    1a00:	0000058d 	.word	0x0000058d
    1a04:	40000c02 	.word	0x40000c02
    1a08:	40000c00 	.word	0x40000c00
    1a0c:	fffff0ff 	.word	0xfffff0ff
    1a10:	ffffbfff 	.word	0xffffbfff
    1a14:	000005cd 	.word	0x000005cd

00001a18 <system_gclk_chan_set_config>:
{
    1a18:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a1a:	780c      	ldrb	r4, [r1, #0]
    1a1c:	0224      	lsls	r4, r4, #8
    1a1e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1a20:	4b02      	ldr	r3, [pc, #8]	; (1a2c <system_gclk_chan_set_config+0x14>)
    1a22:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1a24:	b2a4      	uxth	r4, r4
    1a26:	4b02      	ldr	r3, [pc, #8]	; (1a30 <system_gclk_chan_set_config+0x18>)
    1a28:	805c      	strh	r4, [r3, #2]
}
    1a2a:	bd10      	pop	{r4, pc}
    1a2c:	000019bd 	.word	0x000019bd
    1a30:	40000c00 	.word	0x40000c00

00001a34 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1a34:	b510      	push	{r4, lr}
    1a36:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a38:	4b06      	ldr	r3, [pc, #24]	; (1a54 <system_gclk_chan_get_hz+0x20>)
    1a3a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a3c:	4b06      	ldr	r3, [pc, #24]	; (1a58 <system_gclk_chan_get_hz+0x24>)
    1a3e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1a40:	4b06      	ldr	r3, [pc, #24]	; (1a5c <system_gclk_chan_get_hz+0x28>)
    1a42:	885c      	ldrh	r4, [r3, #2]
    1a44:	0524      	lsls	r4, r4, #20
    1a46:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1a48:	4b05      	ldr	r3, [pc, #20]	; (1a60 <system_gclk_chan_get_hz+0x2c>)
    1a4a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1a4c:	0020      	movs	r0, r4
    1a4e:	4b05      	ldr	r3, [pc, #20]	; (1a64 <system_gclk_chan_get_hz+0x30>)
    1a50:	4798      	blx	r3
}
    1a52:	bd10      	pop	{r4, pc}
    1a54:	0000058d 	.word	0x0000058d
    1a58:	40000c02 	.word	0x40000c02
    1a5c:	40000c00 	.word	0x40000c00
    1a60:	000005cd 	.word	0x000005cd
    1a64:	00001901 	.word	0x00001901

00001a68 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1a68:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1a6a:	78d3      	ldrb	r3, [r2, #3]
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	d135      	bne.n	1adc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1a70:	7813      	ldrb	r3, [r2, #0]
    1a72:	2b80      	cmp	r3, #128	; 0x80
    1a74:	d029      	beq.n	1aca <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1a76:	061b      	lsls	r3, r3, #24
    1a78:	2480      	movs	r4, #128	; 0x80
    1a7a:	0264      	lsls	r4, r4, #9
    1a7c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1a7e:	7854      	ldrb	r4, [r2, #1]
    1a80:	2502      	movs	r5, #2
    1a82:	43ac      	bics	r4, r5
    1a84:	d106      	bne.n	1a94 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1a86:	7894      	ldrb	r4, [r2, #2]
    1a88:	2c00      	cmp	r4, #0
    1a8a:	d120      	bne.n	1ace <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a8c:	2480      	movs	r4, #128	; 0x80
    1a8e:	02a4      	lsls	r4, r4, #10
    1a90:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a92:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a94:	7854      	ldrb	r4, [r2, #1]
    1a96:	3c01      	subs	r4, #1
    1a98:	2c01      	cmp	r4, #1
    1a9a:	d91c      	bls.n	1ad6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a9c:	040d      	lsls	r5, r1, #16
    1a9e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1aa0:	24a0      	movs	r4, #160	; 0xa0
    1aa2:	05e4      	lsls	r4, r4, #23
    1aa4:	432c      	orrs	r4, r5
    1aa6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1aa8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1aaa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1aac:	24d0      	movs	r4, #208	; 0xd0
    1aae:	0624      	lsls	r4, r4, #24
    1ab0:	432c      	orrs	r4, r5
    1ab2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ab4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1ab6:	78d4      	ldrb	r4, [r2, #3]
    1ab8:	2c00      	cmp	r4, #0
    1aba:	d122      	bne.n	1b02 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1abc:	035b      	lsls	r3, r3, #13
    1abe:	d51c      	bpl.n	1afa <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ac0:	7893      	ldrb	r3, [r2, #2]
    1ac2:	2b01      	cmp	r3, #1
    1ac4:	d01e      	beq.n	1b04 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1ac6:	6141      	str	r1, [r0, #20]
    1ac8:	e017      	b.n	1afa <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1aca:	2300      	movs	r3, #0
    1acc:	e7d7      	b.n	1a7e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1ace:	24c0      	movs	r4, #192	; 0xc0
    1ad0:	02e4      	lsls	r4, r4, #11
    1ad2:	4323      	orrs	r3, r4
    1ad4:	e7dd      	b.n	1a92 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1ad6:	4c0d      	ldr	r4, [pc, #52]	; (1b0c <_system_pinmux_config+0xa4>)
    1ad8:	4023      	ands	r3, r4
    1ada:	e7df      	b.n	1a9c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1adc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ade:	040c      	lsls	r4, r1, #16
    1ae0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1ae2:	23a0      	movs	r3, #160	; 0xa0
    1ae4:	05db      	lsls	r3, r3, #23
    1ae6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ae8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1aea:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1aec:	23d0      	movs	r3, #208	; 0xd0
    1aee:	061b      	lsls	r3, r3, #24
    1af0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1af2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1af4:	78d3      	ldrb	r3, [r2, #3]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d103      	bne.n	1b02 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1afa:	7853      	ldrb	r3, [r2, #1]
    1afc:	3b01      	subs	r3, #1
    1afe:	2b01      	cmp	r3, #1
    1b00:	d902      	bls.n	1b08 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1b02:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1b04:	6181      	str	r1, [r0, #24]
    1b06:	e7f8      	b.n	1afa <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1b08:	6081      	str	r1, [r0, #8]
}
    1b0a:	e7fa      	b.n	1b02 <_system_pinmux_config+0x9a>
    1b0c:	fffbffff 	.word	0xfffbffff

00001b10 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1b10:	b510      	push	{r4, lr}
    1b12:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1b14:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1b16:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b18:	2900      	cmp	r1, #0
    1b1a:	d104      	bne.n	1b26 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1b1c:	0943      	lsrs	r3, r0, #5
    1b1e:	01db      	lsls	r3, r3, #7
    1b20:	4905      	ldr	r1, [pc, #20]	; (1b38 <system_pinmux_pin_set_config+0x28>)
    1b22:	468c      	mov	ip, r1
    1b24:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1b26:	241f      	movs	r4, #31
    1b28:	4020      	ands	r0, r4
    1b2a:	2101      	movs	r1, #1
    1b2c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1b2e:	0018      	movs	r0, r3
    1b30:	4b02      	ldr	r3, [pc, #8]	; (1b3c <system_pinmux_pin_set_config+0x2c>)
    1b32:	4798      	blx	r3
}
    1b34:	bd10      	pop	{r4, pc}
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	41004400 	.word	0x41004400
    1b3c:	00001a69 	.word	0x00001a69

00001b40 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1b40:	4770      	bx	lr
	...

00001b44 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1b44:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1b46:	4b05      	ldr	r3, [pc, #20]	; (1b5c <system_init+0x18>)
    1b48:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1b4a:	4b05      	ldr	r3, [pc, #20]	; (1b60 <system_init+0x1c>)
    1b4c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1b4e:	4b05      	ldr	r3, [pc, #20]	; (1b64 <system_init+0x20>)
    1b50:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1b52:	4b05      	ldr	r3, [pc, #20]	; (1b68 <system_init+0x24>)
    1b54:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1b56:	4b05      	ldr	r3, [pc, #20]	; (1b6c <system_init+0x28>)
    1b58:	4798      	blx	r3
}
    1b5a:	bd10      	pop	{r4, pc}
    1b5c:	00001749 	.word	0x00001749
    1b60:	0000051d 	.word	0x0000051d
    1b64:	00001b41 	.word	0x00001b41
    1b68:	00001b41 	.word	0x00001b41
    1b6c:	00001b41 	.word	0x00001b41

00001b70 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1b70:	e7fe      	b.n	1b70 <Dummy_Handler>
	...

00001b74 <Reset_Handler>:
{
    1b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1b76:	4a2a      	ldr	r2, [pc, #168]	; (1c20 <Reset_Handler+0xac>)
    1b78:	4b2a      	ldr	r3, [pc, #168]	; (1c24 <Reset_Handler+0xb0>)
    1b7a:	429a      	cmp	r2, r3
    1b7c:	d011      	beq.n	1ba2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1b7e:	001a      	movs	r2, r3
    1b80:	4b29      	ldr	r3, [pc, #164]	; (1c28 <Reset_Handler+0xb4>)
    1b82:	429a      	cmp	r2, r3
    1b84:	d20d      	bcs.n	1ba2 <Reset_Handler+0x2e>
    1b86:	4a29      	ldr	r2, [pc, #164]	; (1c2c <Reset_Handler+0xb8>)
    1b88:	3303      	adds	r3, #3
    1b8a:	1a9b      	subs	r3, r3, r2
    1b8c:	089b      	lsrs	r3, r3, #2
    1b8e:	3301      	adds	r3, #1
    1b90:	009b      	lsls	r3, r3, #2
    1b92:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1b94:	4823      	ldr	r0, [pc, #140]	; (1c24 <Reset_Handler+0xb0>)
    1b96:	4922      	ldr	r1, [pc, #136]	; (1c20 <Reset_Handler+0xac>)
    1b98:	588c      	ldr	r4, [r1, r2]
    1b9a:	5084      	str	r4, [r0, r2]
    1b9c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1b9e:	429a      	cmp	r2, r3
    1ba0:	d1fa      	bne.n	1b98 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1ba2:	4a23      	ldr	r2, [pc, #140]	; (1c30 <Reset_Handler+0xbc>)
    1ba4:	4b23      	ldr	r3, [pc, #140]	; (1c34 <Reset_Handler+0xc0>)
    1ba6:	429a      	cmp	r2, r3
    1ba8:	d20a      	bcs.n	1bc0 <Reset_Handler+0x4c>
    1baa:	43d3      	mvns	r3, r2
    1bac:	4921      	ldr	r1, [pc, #132]	; (1c34 <Reset_Handler+0xc0>)
    1bae:	185b      	adds	r3, r3, r1
    1bb0:	2103      	movs	r1, #3
    1bb2:	438b      	bics	r3, r1
    1bb4:	3304      	adds	r3, #4
    1bb6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1bb8:	2100      	movs	r1, #0
    1bba:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1bbc:	4293      	cmp	r3, r2
    1bbe:	d1fc      	bne.n	1bba <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1bc0:	4a1d      	ldr	r2, [pc, #116]	; (1c38 <Reset_Handler+0xc4>)
    1bc2:	21ff      	movs	r1, #255	; 0xff
    1bc4:	4b1d      	ldr	r3, [pc, #116]	; (1c3c <Reset_Handler+0xc8>)
    1bc6:	438b      	bics	r3, r1
    1bc8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1bca:	39fd      	subs	r1, #253	; 0xfd
    1bcc:	2390      	movs	r3, #144	; 0x90
    1bce:	005b      	lsls	r3, r3, #1
    1bd0:	4a1b      	ldr	r2, [pc, #108]	; (1c40 <Reset_Handler+0xcc>)
    1bd2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1bd4:	4a1b      	ldr	r2, [pc, #108]	; (1c44 <Reset_Handler+0xd0>)
    1bd6:	78d3      	ldrb	r3, [r2, #3]
    1bd8:	2503      	movs	r5, #3
    1bda:	43ab      	bics	r3, r5
    1bdc:	2402      	movs	r4, #2
    1bde:	4323      	orrs	r3, r4
    1be0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1be2:	78d3      	ldrb	r3, [r2, #3]
    1be4:	270c      	movs	r7, #12
    1be6:	43bb      	bics	r3, r7
    1be8:	2608      	movs	r6, #8
    1bea:	4333      	orrs	r3, r6
    1bec:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1bee:	4b16      	ldr	r3, [pc, #88]	; (1c48 <Reset_Handler+0xd4>)
    1bf0:	7b98      	ldrb	r0, [r3, #14]
    1bf2:	2230      	movs	r2, #48	; 0x30
    1bf4:	4390      	bics	r0, r2
    1bf6:	2220      	movs	r2, #32
    1bf8:	4310      	orrs	r0, r2
    1bfa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1bfc:	7b99      	ldrb	r1, [r3, #14]
    1bfe:	43b9      	bics	r1, r7
    1c00:	4331      	orrs	r1, r6
    1c02:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1c04:	7b9a      	ldrb	r2, [r3, #14]
    1c06:	43aa      	bics	r2, r5
    1c08:	4322      	orrs	r2, r4
    1c0a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c0c:	4a0f      	ldr	r2, [pc, #60]	; (1c4c <Reset_Handler+0xd8>)
    1c0e:	6853      	ldr	r3, [r2, #4]
    1c10:	2180      	movs	r1, #128	; 0x80
    1c12:	430b      	orrs	r3, r1
    1c14:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1c16:	4b0e      	ldr	r3, [pc, #56]	; (1c50 <Reset_Handler+0xdc>)
    1c18:	4798      	blx	r3
        main();
    1c1a:	4b0e      	ldr	r3, [pc, #56]	; (1c54 <Reset_Handler+0xe0>)
    1c1c:	4798      	blx	r3
    1c1e:	e7fe      	b.n	1c1e <Reset_Handler+0xaa>
    1c20:	00004d30 	.word	0x00004d30
    1c24:	20000000 	.word	0x20000000
    1c28:	20000070 	.word	0x20000070
    1c2c:	20000004 	.word	0x20000004
    1c30:	20000070 	.word	0x20000070
    1c34:	20000140 	.word	0x20000140
    1c38:	e000ed00 	.word	0xe000ed00
    1c3c:	00000000 	.word	0x00000000
    1c40:	41007000 	.word	0x41007000
    1c44:	41005000 	.word	0x41005000
    1c48:	41004800 	.word	0x41004800
    1c4c:	41004000 	.word	0x41004000
    1c50:	000039a9 	.word	0x000039a9
    1c54:	00001d29 	.word	0x00001d29

00001c58 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c5a:	46c6      	mov	lr, r8
    1c5c:	b500      	push	{lr}
    1c5e:	000c      	movs	r4, r1
    1c60:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1c62:	2800      	cmp	r0, #0
    1c64:	d10f      	bne.n	1c86 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1c66:	2a00      	cmp	r2, #0
    1c68:	dd11      	ble.n	1c8e <_read+0x36>
    1c6a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1c6c:	4e09      	ldr	r6, [pc, #36]	; (1c94 <_read+0x3c>)
    1c6e:	4d0a      	ldr	r5, [pc, #40]	; (1c98 <_read+0x40>)
    1c70:	6830      	ldr	r0, [r6, #0]
    1c72:	0021      	movs	r1, r4
    1c74:	682b      	ldr	r3, [r5, #0]
    1c76:	4798      	blx	r3
		ptr++;
    1c78:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1c7a:	42bc      	cmp	r4, r7
    1c7c:	d1f8      	bne.n	1c70 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1c7e:	4640      	mov	r0, r8
    1c80:	bc04      	pop	{r2}
    1c82:	4690      	mov	r8, r2
    1c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1c86:	2301      	movs	r3, #1
    1c88:	425b      	negs	r3, r3
    1c8a:	4698      	mov	r8, r3
    1c8c:	e7f7      	b.n	1c7e <_read+0x26>
	for (; len > 0; --len) {
    1c8e:	4680      	mov	r8, r0
    1c90:	e7f5      	b.n	1c7e <_read+0x26>
    1c92:	46c0      	nop			; (mov r8, r8)
    1c94:	20000104 	.word	0x20000104
    1c98:	200000fc 	.word	0x200000fc

00001c9c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c9e:	46c6      	mov	lr, r8
    1ca0:	b500      	push	{lr}
    1ca2:	000e      	movs	r6, r1
    1ca4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1ca6:	3801      	subs	r0, #1
    1ca8:	2802      	cmp	r0, #2
    1caa:	d810      	bhi.n	1cce <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1cac:	2a00      	cmp	r2, #0
    1cae:	d011      	beq.n	1cd4 <_write+0x38>
    1cb0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1cb2:	4b0c      	ldr	r3, [pc, #48]	; (1ce4 <_write+0x48>)
    1cb4:	4698      	mov	r8, r3
    1cb6:	4f0c      	ldr	r7, [pc, #48]	; (1ce8 <_write+0x4c>)
    1cb8:	4643      	mov	r3, r8
    1cba:	6818      	ldr	r0, [r3, #0]
    1cbc:	5d31      	ldrb	r1, [r6, r4]
    1cbe:	683b      	ldr	r3, [r7, #0]
    1cc0:	4798      	blx	r3
    1cc2:	2800      	cmp	r0, #0
    1cc4:	db08      	blt.n	1cd8 <_write+0x3c>
			return -1;
		}
		++nChars;
    1cc6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1cc8:	42a5      	cmp	r5, r4
    1cca:	d1f5      	bne.n	1cb8 <_write+0x1c>
    1ccc:	e006      	b.n	1cdc <_write+0x40>
		return -1;
    1cce:	2401      	movs	r4, #1
    1cd0:	4264      	negs	r4, r4
    1cd2:	e003      	b.n	1cdc <_write+0x40>
	for (; len != 0; --len) {
    1cd4:	0014      	movs	r4, r2
    1cd6:	e001      	b.n	1cdc <_write+0x40>
			return -1;
    1cd8:	2401      	movs	r4, #1
    1cda:	4264      	negs	r4, r4
	}
	return nChars;
}
    1cdc:	0020      	movs	r0, r4
    1cde:	bc04      	pop	{r2}
    1ce0:	4690      	mov	r8, r2
    1ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ce4:	20000104 	.word	0x20000104
    1ce8:	20000100 	.word	0x20000100

00001cec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1cec:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1cee:	4a06      	ldr	r2, [pc, #24]	; (1d08 <_sbrk+0x1c>)
    1cf0:	6812      	ldr	r2, [r2, #0]
    1cf2:	2a00      	cmp	r2, #0
    1cf4:	d004      	beq.n	1d00 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1cf6:	4a04      	ldr	r2, [pc, #16]	; (1d08 <_sbrk+0x1c>)
    1cf8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1cfa:	18c3      	adds	r3, r0, r3
    1cfc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1cfe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1d00:	4902      	ldr	r1, [pc, #8]	; (1d0c <_sbrk+0x20>)
    1d02:	4a01      	ldr	r2, [pc, #4]	; (1d08 <_sbrk+0x1c>)
    1d04:	6011      	str	r1, [r2, #0]
    1d06:	e7f6      	b.n	1cf6 <_sbrk+0xa>
    1d08:	200000cc 	.word	0x200000cc
    1d0c:	20002140 	.word	0x20002140

00001d10 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1d10:	2001      	movs	r0, #1
    1d12:	4240      	negs	r0, r0
    1d14:	4770      	bx	lr

00001d16 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1d16:	2380      	movs	r3, #128	; 0x80
    1d18:	019b      	lsls	r3, r3, #6
    1d1a:	604b      	str	r3, [r1, #4]

	return 0;
}
    1d1c:	2000      	movs	r0, #0
    1d1e:	4770      	bx	lr

00001d20 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1d20:	2001      	movs	r0, #1
    1d22:	4770      	bx	lr

00001d24 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1d24:	2000      	movs	r0, #0
    1d26:	4770      	bx	lr

00001d28 <main>:
#include "TSL2561.h"

struct usart_module usart_instance;

int main (void)
{
    1d28:	b510      	push	{r4, lr}
	system_init();
    1d2a:	4b10      	ldr	r3, [pc, #64]	; (1d6c <main+0x44>)
    1d2c:	4798      	blx	r3
	cpu_irq_enable();
    1d2e:	2201      	movs	r2, #1
    1d30:	4b0f      	ldr	r3, [pc, #60]	; (1d70 <main+0x48>)
    1d32:	701a      	strb	r2, [r3, #0]
    1d34:	f3bf 8f5f 	dmb	sy
    1d38:	b662      	cpsie	i
	system_interrupt_enable_global();
	delay_init();
    1d3a:	4b0e      	ldr	r3, [pc, #56]	; (1d74 <main+0x4c>)
    1d3c:	4798      	blx	r3
	configure_usart();
    1d3e:	4b0e      	ldr	r3, [pc, #56]	; (1d78 <main+0x50>)
    1d40:	4798      	blx	r3
	printf("---- TSL2561 Driver Example ---\r\n");
    1d42:	480e      	ldr	r0, [pc, #56]	; (1d7c <main+0x54>)
    1d44:	4b0e      	ldr	r3, [pc, #56]	; (1d80 <main+0x58>)
    1d46:	4798      	blx	r3
	
	configure_i2c_tsl2561(ADDR_FLOAT);
    1d48:	2039      	movs	r0, #57	; 0x39
    1d4a:	4b0e      	ldr	r3, [pc, #56]	; (1d84 <main+0x5c>)
    1d4c:	4798      	blx	r3
	printf("Lux Device ID: 0x%02x\r\n", get_tsl2561_device_id());
    1d4e:	4b0e      	ldr	r3, [pc, #56]	; (1d88 <main+0x60>)
    1d50:	4798      	blx	r3
    1d52:	0001      	movs	r1, r0
    1d54:	480d      	ldr	r0, [pc, #52]	; (1d8c <main+0x64>)
    1d56:	4c0e      	ldr	r4, [pc, #56]	; (1d90 <main+0x68>)
    1d58:	47a0      	blx	r4
	power_on_tsl2561();
    1d5a:	4b0e      	ldr	r3, [pc, #56]	; (1d94 <main+0x6c>)
    1d5c:	4798      	blx	r3
	printf("Current Lux: %d\r\n", get_lux());
    1d5e:	4b0e      	ldr	r3, [pc, #56]	; (1d98 <main+0x70>)
    1d60:	4798      	blx	r3
    1d62:	0001      	movs	r1, r0
    1d64:	480d      	ldr	r0, [pc, #52]	; (1d9c <main+0x74>)
    1d66:	47a0      	blx	r4
	return EXIT_SUCCESS;

	/* Insert application code here, after the board has been initialized. */
}
    1d68:	2000      	movs	r0, #0
    1d6a:	bd10      	pop	{r4, pc}
    1d6c:	00001b45 	.word	0x00001b45
    1d70:	20000008 	.word	0x20000008
    1d74:	00000521 	.word	0x00000521
    1d78:	00000159 	.word	0x00000159
    1d7c:	00004ba8 	.word	0x00004ba8
    1d80:	00003af5 	.word	0x00003af5
    1d84:	0000024d 	.word	0x0000024d
    1d88:	00000401 	.word	0x00000401
    1d8c:	00004bcc 	.word	0x00004bcc
    1d90:	00003a01 	.word	0x00003a01
    1d94:	000003e5 	.word	0x000003e5
    1d98:	00000461 	.word	0x00000461
    1d9c:	00004be4 	.word	0x00004be4

00001da0 <__udivsi3>:
    1da0:	2200      	movs	r2, #0
    1da2:	0843      	lsrs	r3, r0, #1
    1da4:	428b      	cmp	r3, r1
    1da6:	d374      	bcc.n	1e92 <__udivsi3+0xf2>
    1da8:	0903      	lsrs	r3, r0, #4
    1daa:	428b      	cmp	r3, r1
    1dac:	d35f      	bcc.n	1e6e <__udivsi3+0xce>
    1dae:	0a03      	lsrs	r3, r0, #8
    1db0:	428b      	cmp	r3, r1
    1db2:	d344      	bcc.n	1e3e <__udivsi3+0x9e>
    1db4:	0b03      	lsrs	r3, r0, #12
    1db6:	428b      	cmp	r3, r1
    1db8:	d328      	bcc.n	1e0c <__udivsi3+0x6c>
    1dba:	0c03      	lsrs	r3, r0, #16
    1dbc:	428b      	cmp	r3, r1
    1dbe:	d30d      	bcc.n	1ddc <__udivsi3+0x3c>
    1dc0:	22ff      	movs	r2, #255	; 0xff
    1dc2:	0209      	lsls	r1, r1, #8
    1dc4:	ba12      	rev	r2, r2
    1dc6:	0c03      	lsrs	r3, r0, #16
    1dc8:	428b      	cmp	r3, r1
    1dca:	d302      	bcc.n	1dd2 <__udivsi3+0x32>
    1dcc:	1212      	asrs	r2, r2, #8
    1dce:	0209      	lsls	r1, r1, #8
    1dd0:	d065      	beq.n	1e9e <__udivsi3+0xfe>
    1dd2:	0b03      	lsrs	r3, r0, #12
    1dd4:	428b      	cmp	r3, r1
    1dd6:	d319      	bcc.n	1e0c <__udivsi3+0x6c>
    1dd8:	e000      	b.n	1ddc <__udivsi3+0x3c>
    1dda:	0a09      	lsrs	r1, r1, #8
    1ddc:	0bc3      	lsrs	r3, r0, #15
    1dde:	428b      	cmp	r3, r1
    1de0:	d301      	bcc.n	1de6 <__udivsi3+0x46>
    1de2:	03cb      	lsls	r3, r1, #15
    1de4:	1ac0      	subs	r0, r0, r3
    1de6:	4152      	adcs	r2, r2
    1de8:	0b83      	lsrs	r3, r0, #14
    1dea:	428b      	cmp	r3, r1
    1dec:	d301      	bcc.n	1df2 <__udivsi3+0x52>
    1dee:	038b      	lsls	r3, r1, #14
    1df0:	1ac0      	subs	r0, r0, r3
    1df2:	4152      	adcs	r2, r2
    1df4:	0b43      	lsrs	r3, r0, #13
    1df6:	428b      	cmp	r3, r1
    1df8:	d301      	bcc.n	1dfe <__udivsi3+0x5e>
    1dfa:	034b      	lsls	r3, r1, #13
    1dfc:	1ac0      	subs	r0, r0, r3
    1dfe:	4152      	adcs	r2, r2
    1e00:	0b03      	lsrs	r3, r0, #12
    1e02:	428b      	cmp	r3, r1
    1e04:	d301      	bcc.n	1e0a <__udivsi3+0x6a>
    1e06:	030b      	lsls	r3, r1, #12
    1e08:	1ac0      	subs	r0, r0, r3
    1e0a:	4152      	adcs	r2, r2
    1e0c:	0ac3      	lsrs	r3, r0, #11
    1e0e:	428b      	cmp	r3, r1
    1e10:	d301      	bcc.n	1e16 <__udivsi3+0x76>
    1e12:	02cb      	lsls	r3, r1, #11
    1e14:	1ac0      	subs	r0, r0, r3
    1e16:	4152      	adcs	r2, r2
    1e18:	0a83      	lsrs	r3, r0, #10
    1e1a:	428b      	cmp	r3, r1
    1e1c:	d301      	bcc.n	1e22 <__udivsi3+0x82>
    1e1e:	028b      	lsls	r3, r1, #10
    1e20:	1ac0      	subs	r0, r0, r3
    1e22:	4152      	adcs	r2, r2
    1e24:	0a43      	lsrs	r3, r0, #9
    1e26:	428b      	cmp	r3, r1
    1e28:	d301      	bcc.n	1e2e <__udivsi3+0x8e>
    1e2a:	024b      	lsls	r3, r1, #9
    1e2c:	1ac0      	subs	r0, r0, r3
    1e2e:	4152      	adcs	r2, r2
    1e30:	0a03      	lsrs	r3, r0, #8
    1e32:	428b      	cmp	r3, r1
    1e34:	d301      	bcc.n	1e3a <__udivsi3+0x9a>
    1e36:	020b      	lsls	r3, r1, #8
    1e38:	1ac0      	subs	r0, r0, r3
    1e3a:	4152      	adcs	r2, r2
    1e3c:	d2cd      	bcs.n	1dda <__udivsi3+0x3a>
    1e3e:	09c3      	lsrs	r3, r0, #7
    1e40:	428b      	cmp	r3, r1
    1e42:	d301      	bcc.n	1e48 <__udivsi3+0xa8>
    1e44:	01cb      	lsls	r3, r1, #7
    1e46:	1ac0      	subs	r0, r0, r3
    1e48:	4152      	adcs	r2, r2
    1e4a:	0983      	lsrs	r3, r0, #6
    1e4c:	428b      	cmp	r3, r1
    1e4e:	d301      	bcc.n	1e54 <__udivsi3+0xb4>
    1e50:	018b      	lsls	r3, r1, #6
    1e52:	1ac0      	subs	r0, r0, r3
    1e54:	4152      	adcs	r2, r2
    1e56:	0943      	lsrs	r3, r0, #5
    1e58:	428b      	cmp	r3, r1
    1e5a:	d301      	bcc.n	1e60 <__udivsi3+0xc0>
    1e5c:	014b      	lsls	r3, r1, #5
    1e5e:	1ac0      	subs	r0, r0, r3
    1e60:	4152      	adcs	r2, r2
    1e62:	0903      	lsrs	r3, r0, #4
    1e64:	428b      	cmp	r3, r1
    1e66:	d301      	bcc.n	1e6c <__udivsi3+0xcc>
    1e68:	010b      	lsls	r3, r1, #4
    1e6a:	1ac0      	subs	r0, r0, r3
    1e6c:	4152      	adcs	r2, r2
    1e6e:	08c3      	lsrs	r3, r0, #3
    1e70:	428b      	cmp	r3, r1
    1e72:	d301      	bcc.n	1e78 <__udivsi3+0xd8>
    1e74:	00cb      	lsls	r3, r1, #3
    1e76:	1ac0      	subs	r0, r0, r3
    1e78:	4152      	adcs	r2, r2
    1e7a:	0883      	lsrs	r3, r0, #2
    1e7c:	428b      	cmp	r3, r1
    1e7e:	d301      	bcc.n	1e84 <__udivsi3+0xe4>
    1e80:	008b      	lsls	r3, r1, #2
    1e82:	1ac0      	subs	r0, r0, r3
    1e84:	4152      	adcs	r2, r2
    1e86:	0843      	lsrs	r3, r0, #1
    1e88:	428b      	cmp	r3, r1
    1e8a:	d301      	bcc.n	1e90 <__udivsi3+0xf0>
    1e8c:	004b      	lsls	r3, r1, #1
    1e8e:	1ac0      	subs	r0, r0, r3
    1e90:	4152      	adcs	r2, r2
    1e92:	1a41      	subs	r1, r0, r1
    1e94:	d200      	bcs.n	1e98 <__udivsi3+0xf8>
    1e96:	4601      	mov	r1, r0
    1e98:	4152      	adcs	r2, r2
    1e9a:	4610      	mov	r0, r2
    1e9c:	4770      	bx	lr
    1e9e:	e7ff      	b.n	1ea0 <__udivsi3+0x100>
    1ea0:	b501      	push	{r0, lr}
    1ea2:	2000      	movs	r0, #0
    1ea4:	f000 f8f0 	bl	2088 <__aeabi_idiv0>
    1ea8:	bd02      	pop	{r1, pc}
    1eaa:	46c0      	nop			; (mov r8, r8)

00001eac <__aeabi_uidivmod>:
    1eac:	2900      	cmp	r1, #0
    1eae:	d0f7      	beq.n	1ea0 <__udivsi3+0x100>
    1eb0:	e776      	b.n	1da0 <__udivsi3>
    1eb2:	4770      	bx	lr

00001eb4 <__divsi3>:
    1eb4:	4603      	mov	r3, r0
    1eb6:	430b      	orrs	r3, r1
    1eb8:	d47f      	bmi.n	1fba <__divsi3+0x106>
    1eba:	2200      	movs	r2, #0
    1ebc:	0843      	lsrs	r3, r0, #1
    1ebe:	428b      	cmp	r3, r1
    1ec0:	d374      	bcc.n	1fac <__divsi3+0xf8>
    1ec2:	0903      	lsrs	r3, r0, #4
    1ec4:	428b      	cmp	r3, r1
    1ec6:	d35f      	bcc.n	1f88 <__divsi3+0xd4>
    1ec8:	0a03      	lsrs	r3, r0, #8
    1eca:	428b      	cmp	r3, r1
    1ecc:	d344      	bcc.n	1f58 <__divsi3+0xa4>
    1ece:	0b03      	lsrs	r3, r0, #12
    1ed0:	428b      	cmp	r3, r1
    1ed2:	d328      	bcc.n	1f26 <__divsi3+0x72>
    1ed4:	0c03      	lsrs	r3, r0, #16
    1ed6:	428b      	cmp	r3, r1
    1ed8:	d30d      	bcc.n	1ef6 <__divsi3+0x42>
    1eda:	22ff      	movs	r2, #255	; 0xff
    1edc:	0209      	lsls	r1, r1, #8
    1ede:	ba12      	rev	r2, r2
    1ee0:	0c03      	lsrs	r3, r0, #16
    1ee2:	428b      	cmp	r3, r1
    1ee4:	d302      	bcc.n	1eec <__divsi3+0x38>
    1ee6:	1212      	asrs	r2, r2, #8
    1ee8:	0209      	lsls	r1, r1, #8
    1eea:	d065      	beq.n	1fb8 <__divsi3+0x104>
    1eec:	0b03      	lsrs	r3, r0, #12
    1eee:	428b      	cmp	r3, r1
    1ef0:	d319      	bcc.n	1f26 <__divsi3+0x72>
    1ef2:	e000      	b.n	1ef6 <__divsi3+0x42>
    1ef4:	0a09      	lsrs	r1, r1, #8
    1ef6:	0bc3      	lsrs	r3, r0, #15
    1ef8:	428b      	cmp	r3, r1
    1efa:	d301      	bcc.n	1f00 <__divsi3+0x4c>
    1efc:	03cb      	lsls	r3, r1, #15
    1efe:	1ac0      	subs	r0, r0, r3
    1f00:	4152      	adcs	r2, r2
    1f02:	0b83      	lsrs	r3, r0, #14
    1f04:	428b      	cmp	r3, r1
    1f06:	d301      	bcc.n	1f0c <__divsi3+0x58>
    1f08:	038b      	lsls	r3, r1, #14
    1f0a:	1ac0      	subs	r0, r0, r3
    1f0c:	4152      	adcs	r2, r2
    1f0e:	0b43      	lsrs	r3, r0, #13
    1f10:	428b      	cmp	r3, r1
    1f12:	d301      	bcc.n	1f18 <__divsi3+0x64>
    1f14:	034b      	lsls	r3, r1, #13
    1f16:	1ac0      	subs	r0, r0, r3
    1f18:	4152      	adcs	r2, r2
    1f1a:	0b03      	lsrs	r3, r0, #12
    1f1c:	428b      	cmp	r3, r1
    1f1e:	d301      	bcc.n	1f24 <__divsi3+0x70>
    1f20:	030b      	lsls	r3, r1, #12
    1f22:	1ac0      	subs	r0, r0, r3
    1f24:	4152      	adcs	r2, r2
    1f26:	0ac3      	lsrs	r3, r0, #11
    1f28:	428b      	cmp	r3, r1
    1f2a:	d301      	bcc.n	1f30 <__divsi3+0x7c>
    1f2c:	02cb      	lsls	r3, r1, #11
    1f2e:	1ac0      	subs	r0, r0, r3
    1f30:	4152      	adcs	r2, r2
    1f32:	0a83      	lsrs	r3, r0, #10
    1f34:	428b      	cmp	r3, r1
    1f36:	d301      	bcc.n	1f3c <__divsi3+0x88>
    1f38:	028b      	lsls	r3, r1, #10
    1f3a:	1ac0      	subs	r0, r0, r3
    1f3c:	4152      	adcs	r2, r2
    1f3e:	0a43      	lsrs	r3, r0, #9
    1f40:	428b      	cmp	r3, r1
    1f42:	d301      	bcc.n	1f48 <__divsi3+0x94>
    1f44:	024b      	lsls	r3, r1, #9
    1f46:	1ac0      	subs	r0, r0, r3
    1f48:	4152      	adcs	r2, r2
    1f4a:	0a03      	lsrs	r3, r0, #8
    1f4c:	428b      	cmp	r3, r1
    1f4e:	d301      	bcc.n	1f54 <__divsi3+0xa0>
    1f50:	020b      	lsls	r3, r1, #8
    1f52:	1ac0      	subs	r0, r0, r3
    1f54:	4152      	adcs	r2, r2
    1f56:	d2cd      	bcs.n	1ef4 <__divsi3+0x40>
    1f58:	09c3      	lsrs	r3, r0, #7
    1f5a:	428b      	cmp	r3, r1
    1f5c:	d301      	bcc.n	1f62 <__divsi3+0xae>
    1f5e:	01cb      	lsls	r3, r1, #7
    1f60:	1ac0      	subs	r0, r0, r3
    1f62:	4152      	adcs	r2, r2
    1f64:	0983      	lsrs	r3, r0, #6
    1f66:	428b      	cmp	r3, r1
    1f68:	d301      	bcc.n	1f6e <__divsi3+0xba>
    1f6a:	018b      	lsls	r3, r1, #6
    1f6c:	1ac0      	subs	r0, r0, r3
    1f6e:	4152      	adcs	r2, r2
    1f70:	0943      	lsrs	r3, r0, #5
    1f72:	428b      	cmp	r3, r1
    1f74:	d301      	bcc.n	1f7a <__divsi3+0xc6>
    1f76:	014b      	lsls	r3, r1, #5
    1f78:	1ac0      	subs	r0, r0, r3
    1f7a:	4152      	adcs	r2, r2
    1f7c:	0903      	lsrs	r3, r0, #4
    1f7e:	428b      	cmp	r3, r1
    1f80:	d301      	bcc.n	1f86 <__divsi3+0xd2>
    1f82:	010b      	lsls	r3, r1, #4
    1f84:	1ac0      	subs	r0, r0, r3
    1f86:	4152      	adcs	r2, r2
    1f88:	08c3      	lsrs	r3, r0, #3
    1f8a:	428b      	cmp	r3, r1
    1f8c:	d301      	bcc.n	1f92 <__divsi3+0xde>
    1f8e:	00cb      	lsls	r3, r1, #3
    1f90:	1ac0      	subs	r0, r0, r3
    1f92:	4152      	adcs	r2, r2
    1f94:	0883      	lsrs	r3, r0, #2
    1f96:	428b      	cmp	r3, r1
    1f98:	d301      	bcc.n	1f9e <__divsi3+0xea>
    1f9a:	008b      	lsls	r3, r1, #2
    1f9c:	1ac0      	subs	r0, r0, r3
    1f9e:	4152      	adcs	r2, r2
    1fa0:	0843      	lsrs	r3, r0, #1
    1fa2:	428b      	cmp	r3, r1
    1fa4:	d301      	bcc.n	1faa <__divsi3+0xf6>
    1fa6:	004b      	lsls	r3, r1, #1
    1fa8:	1ac0      	subs	r0, r0, r3
    1faa:	4152      	adcs	r2, r2
    1fac:	1a41      	subs	r1, r0, r1
    1fae:	d200      	bcs.n	1fb2 <__divsi3+0xfe>
    1fb0:	4601      	mov	r1, r0
    1fb2:	4152      	adcs	r2, r2
    1fb4:	4610      	mov	r0, r2
    1fb6:	4770      	bx	lr
    1fb8:	e05d      	b.n	2076 <STACK_SIZE+0x76>
    1fba:	0fca      	lsrs	r2, r1, #31
    1fbc:	d000      	beq.n	1fc0 <__divsi3+0x10c>
    1fbe:	4249      	negs	r1, r1
    1fc0:	1003      	asrs	r3, r0, #32
    1fc2:	d300      	bcc.n	1fc6 <__divsi3+0x112>
    1fc4:	4240      	negs	r0, r0
    1fc6:	4053      	eors	r3, r2
    1fc8:	2200      	movs	r2, #0
    1fca:	469c      	mov	ip, r3
    1fcc:	0903      	lsrs	r3, r0, #4
    1fce:	428b      	cmp	r3, r1
    1fd0:	d32d      	bcc.n	202e <STACK_SIZE+0x2e>
    1fd2:	0a03      	lsrs	r3, r0, #8
    1fd4:	428b      	cmp	r3, r1
    1fd6:	d312      	bcc.n	1ffe <__divsi3+0x14a>
    1fd8:	22fc      	movs	r2, #252	; 0xfc
    1fda:	0189      	lsls	r1, r1, #6
    1fdc:	ba12      	rev	r2, r2
    1fde:	0a03      	lsrs	r3, r0, #8
    1fe0:	428b      	cmp	r3, r1
    1fe2:	d30c      	bcc.n	1ffe <__divsi3+0x14a>
    1fe4:	0189      	lsls	r1, r1, #6
    1fe6:	1192      	asrs	r2, r2, #6
    1fe8:	428b      	cmp	r3, r1
    1fea:	d308      	bcc.n	1ffe <__divsi3+0x14a>
    1fec:	0189      	lsls	r1, r1, #6
    1fee:	1192      	asrs	r2, r2, #6
    1ff0:	428b      	cmp	r3, r1
    1ff2:	d304      	bcc.n	1ffe <__divsi3+0x14a>
    1ff4:	0189      	lsls	r1, r1, #6
    1ff6:	d03a      	beq.n	206e <STACK_SIZE+0x6e>
    1ff8:	1192      	asrs	r2, r2, #6
    1ffa:	e000      	b.n	1ffe <__divsi3+0x14a>
    1ffc:	0989      	lsrs	r1, r1, #6
    1ffe:	09c3      	lsrs	r3, r0, #7
    2000:	428b      	cmp	r3, r1
    2002:	d301      	bcc.n	2008 <STACK_SIZE+0x8>
    2004:	01cb      	lsls	r3, r1, #7
    2006:	1ac0      	subs	r0, r0, r3
    2008:	4152      	adcs	r2, r2
    200a:	0983      	lsrs	r3, r0, #6
    200c:	428b      	cmp	r3, r1
    200e:	d301      	bcc.n	2014 <STACK_SIZE+0x14>
    2010:	018b      	lsls	r3, r1, #6
    2012:	1ac0      	subs	r0, r0, r3
    2014:	4152      	adcs	r2, r2
    2016:	0943      	lsrs	r3, r0, #5
    2018:	428b      	cmp	r3, r1
    201a:	d301      	bcc.n	2020 <STACK_SIZE+0x20>
    201c:	014b      	lsls	r3, r1, #5
    201e:	1ac0      	subs	r0, r0, r3
    2020:	4152      	adcs	r2, r2
    2022:	0903      	lsrs	r3, r0, #4
    2024:	428b      	cmp	r3, r1
    2026:	d301      	bcc.n	202c <STACK_SIZE+0x2c>
    2028:	010b      	lsls	r3, r1, #4
    202a:	1ac0      	subs	r0, r0, r3
    202c:	4152      	adcs	r2, r2
    202e:	08c3      	lsrs	r3, r0, #3
    2030:	428b      	cmp	r3, r1
    2032:	d301      	bcc.n	2038 <STACK_SIZE+0x38>
    2034:	00cb      	lsls	r3, r1, #3
    2036:	1ac0      	subs	r0, r0, r3
    2038:	4152      	adcs	r2, r2
    203a:	0883      	lsrs	r3, r0, #2
    203c:	428b      	cmp	r3, r1
    203e:	d301      	bcc.n	2044 <STACK_SIZE+0x44>
    2040:	008b      	lsls	r3, r1, #2
    2042:	1ac0      	subs	r0, r0, r3
    2044:	4152      	adcs	r2, r2
    2046:	d2d9      	bcs.n	1ffc <__divsi3+0x148>
    2048:	0843      	lsrs	r3, r0, #1
    204a:	428b      	cmp	r3, r1
    204c:	d301      	bcc.n	2052 <STACK_SIZE+0x52>
    204e:	004b      	lsls	r3, r1, #1
    2050:	1ac0      	subs	r0, r0, r3
    2052:	4152      	adcs	r2, r2
    2054:	1a41      	subs	r1, r0, r1
    2056:	d200      	bcs.n	205a <STACK_SIZE+0x5a>
    2058:	4601      	mov	r1, r0
    205a:	4663      	mov	r3, ip
    205c:	4152      	adcs	r2, r2
    205e:	105b      	asrs	r3, r3, #1
    2060:	4610      	mov	r0, r2
    2062:	d301      	bcc.n	2068 <STACK_SIZE+0x68>
    2064:	4240      	negs	r0, r0
    2066:	2b00      	cmp	r3, #0
    2068:	d500      	bpl.n	206c <STACK_SIZE+0x6c>
    206a:	4249      	negs	r1, r1
    206c:	4770      	bx	lr
    206e:	4663      	mov	r3, ip
    2070:	105b      	asrs	r3, r3, #1
    2072:	d300      	bcc.n	2076 <STACK_SIZE+0x76>
    2074:	4240      	negs	r0, r0
    2076:	b501      	push	{r0, lr}
    2078:	2000      	movs	r0, #0
    207a:	f000 f805 	bl	2088 <__aeabi_idiv0>
    207e:	bd02      	pop	{r1, pc}

00002080 <__aeabi_idivmod>:
    2080:	2900      	cmp	r1, #0
    2082:	d0f8      	beq.n	2076 <STACK_SIZE+0x76>
    2084:	e716      	b.n	1eb4 <__divsi3>
    2086:	4770      	bx	lr

00002088 <__aeabi_idiv0>:
    2088:	4770      	bx	lr
    208a:	46c0      	nop			; (mov r8, r8)

0000208c <__aeabi_lmul>:
    208c:	b5f0      	push	{r4, r5, r6, r7, lr}
    208e:	46ce      	mov	lr, r9
    2090:	4647      	mov	r7, r8
    2092:	0415      	lsls	r5, r2, #16
    2094:	0c2d      	lsrs	r5, r5, #16
    2096:	002e      	movs	r6, r5
    2098:	b580      	push	{r7, lr}
    209a:	0407      	lsls	r7, r0, #16
    209c:	0c14      	lsrs	r4, r2, #16
    209e:	0c3f      	lsrs	r7, r7, #16
    20a0:	4699      	mov	r9, r3
    20a2:	0c03      	lsrs	r3, r0, #16
    20a4:	437e      	muls	r6, r7
    20a6:	435d      	muls	r5, r3
    20a8:	4367      	muls	r7, r4
    20aa:	4363      	muls	r3, r4
    20ac:	197f      	adds	r7, r7, r5
    20ae:	0c34      	lsrs	r4, r6, #16
    20b0:	19e4      	adds	r4, r4, r7
    20b2:	469c      	mov	ip, r3
    20b4:	42a5      	cmp	r5, r4
    20b6:	d903      	bls.n	20c0 <__aeabi_lmul+0x34>
    20b8:	2380      	movs	r3, #128	; 0x80
    20ba:	025b      	lsls	r3, r3, #9
    20bc:	4698      	mov	r8, r3
    20be:	44c4      	add	ip, r8
    20c0:	464b      	mov	r3, r9
    20c2:	4351      	muls	r1, r2
    20c4:	4343      	muls	r3, r0
    20c6:	0436      	lsls	r6, r6, #16
    20c8:	0c36      	lsrs	r6, r6, #16
    20ca:	0c25      	lsrs	r5, r4, #16
    20cc:	0424      	lsls	r4, r4, #16
    20ce:	4465      	add	r5, ip
    20d0:	19a4      	adds	r4, r4, r6
    20d2:	1859      	adds	r1, r3, r1
    20d4:	1949      	adds	r1, r1, r5
    20d6:	0020      	movs	r0, r4
    20d8:	bc0c      	pop	{r2, r3}
    20da:	4690      	mov	r8, r2
    20dc:	4699      	mov	r9, r3
    20de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000020e0 <__aeabi_dadd>:
    20e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20e2:	4645      	mov	r5, r8
    20e4:	46de      	mov	lr, fp
    20e6:	4657      	mov	r7, sl
    20e8:	464e      	mov	r6, r9
    20ea:	030c      	lsls	r4, r1, #12
    20ec:	b5e0      	push	{r5, r6, r7, lr}
    20ee:	004e      	lsls	r6, r1, #1
    20f0:	0fc9      	lsrs	r1, r1, #31
    20f2:	4688      	mov	r8, r1
    20f4:	000d      	movs	r5, r1
    20f6:	0a61      	lsrs	r1, r4, #9
    20f8:	0f44      	lsrs	r4, r0, #29
    20fa:	430c      	orrs	r4, r1
    20fc:	00c7      	lsls	r7, r0, #3
    20fe:	0319      	lsls	r1, r3, #12
    2100:	0058      	lsls	r0, r3, #1
    2102:	0fdb      	lsrs	r3, r3, #31
    2104:	469b      	mov	fp, r3
    2106:	0a4b      	lsrs	r3, r1, #9
    2108:	0f51      	lsrs	r1, r2, #29
    210a:	430b      	orrs	r3, r1
    210c:	0d76      	lsrs	r6, r6, #21
    210e:	0d40      	lsrs	r0, r0, #21
    2110:	0019      	movs	r1, r3
    2112:	00d2      	lsls	r2, r2, #3
    2114:	45d8      	cmp	r8, fp
    2116:	d100      	bne.n	211a <__aeabi_dadd+0x3a>
    2118:	e0ae      	b.n	2278 <__aeabi_dadd+0x198>
    211a:	1a35      	subs	r5, r6, r0
    211c:	2d00      	cmp	r5, #0
    211e:	dc00      	bgt.n	2122 <__aeabi_dadd+0x42>
    2120:	e0f6      	b.n	2310 <__aeabi_dadd+0x230>
    2122:	2800      	cmp	r0, #0
    2124:	d10f      	bne.n	2146 <__aeabi_dadd+0x66>
    2126:	4313      	orrs	r3, r2
    2128:	d100      	bne.n	212c <__aeabi_dadd+0x4c>
    212a:	e0db      	b.n	22e4 <__aeabi_dadd+0x204>
    212c:	1e6b      	subs	r3, r5, #1
    212e:	2b00      	cmp	r3, #0
    2130:	d000      	beq.n	2134 <__aeabi_dadd+0x54>
    2132:	e137      	b.n	23a4 <__aeabi_dadd+0x2c4>
    2134:	1aba      	subs	r2, r7, r2
    2136:	4297      	cmp	r7, r2
    2138:	41bf      	sbcs	r7, r7
    213a:	1a64      	subs	r4, r4, r1
    213c:	427f      	negs	r7, r7
    213e:	1be4      	subs	r4, r4, r7
    2140:	2601      	movs	r6, #1
    2142:	0017      	movs	r7, r2
    2144:	e024      	b.n	2190 <__aeabi_dadd+0xb0>
    2146:	4bc6      	ldr	r3, [pc, #792]	; (2460 <__aeabi_dadd+0x380>)
    2148:	429e      	cmp	r6, r3
    214a:	d04d      	beq.n	21e8 <__aeabi_dadd+0x108>
    214c:	2380      	movs	r3, #128	; 0x80
    214e:	041b      	lsls	r3, r3, #16
    2150:	4319      	orrs	r1, r3
    2152:	2d38      	cmp	r5, #56	; 0x38
    2154:	dd00      	ble.n	2158 <__aeabi_dadd+0x78>
    2156:	e107      	b.n	2368 <__aeabi_dadd+0x288>
    2158:	2d1f      	cmp	r5, #31
    215a:	dd00      	ble.n	215e <__aeabi_dadd+0x7e>
    215c:	e138      	b.n	23d0 <__aeabi_dadd+0x2f0>
    215e:	2020      	movs	r0, #32
    2160:	1b43      	subs	r3, r0, r5
    2162:	469a      	mov	sl, r3
    2164:	000b      	movs	r3, r1
    2166:	4650      	mov	r0, sl
    2168:	4083      	lsls	r3, r0
    216a:	4699      	mov	r9, r3
    216c:	0013      	movs	r3, r2
    216e:	4648      	mov	r0, r9
    2170:	40eb      	lsrs	r3, r5
    2172:	4318      	orrs	r0, r3
    2174:	0003      	movs	r3, r0
    2176:	4650      	mov	r0, sl
    2178:	4082      	lsls	r2, r0
    217a:	1e50      	subs	r0, r2, #1
    217c:	4182      	sbcs	r2, r0
    217e:	40e9      	lsrs	r1, r5
    2180:	431a      	orrs	r2, r3
    2182:	1aba      	subs	r2, r7, r2
    2184:	1a61      	subs	r1, r4, r1
    2186:	4297      	cmp	r7, r2
    2188:	41a4      	sbcs	r4, r4
    218a:	0017      	movs	r7, r2
    218c:	4264      	negs	r4, r4
    218e:	1b0c      	subs	r4, r1, r4
    2190:	0223      	lsls	r3, r4, #8
    2192:	d562      	bpl.n	225a <__aeabi_dadd+0x17a>
    2194:	0264      	lsls	r4, r4, #9
    2196:	0a65      	lsrs	r5, r4, #9
    2198:	2d00      	cmp	r5, #0
    219a:	d100      	bne.n	219e <__aeabi_dadd+0xbe>
    219c:	e0df      	b.n	235e <__aeabi_dadd+0x27e>
    219e:	0028      	movs	r0, r5
    21a0:	f001 fbe4 	bl	396c <__clzsi2>
    21a4:	0003      	movs	r3, r0
    21a6:	3b08      	subs	r3, #8
    21a8:	2b1f      	cmp	r3, #31
    21aa:	dd00      	ble.n	21ae <__aeabi_dadd+0xce>
    21ac:	e0d2      	b.n	2354 <__aeabi_dadd+0x274>
    21ae:	2220      	movs	r2, #32
    21b0:	003c      	movs	r4, r7
    21b2:	1ad2      	subs	r2, r2, r3
    21b4:	409d      	lsls	r5, r3
    21b6:	40d4      	lsrs	r4, r2
    21b8:	409f      	lsls	r7, r3
    21ba:	4325      	orrs	r5, r4
    21bc:	429e      	cmp	r6, r3
    21be:	dd00      	ble.n	21c2 <__aeabi_dadd+0xe2>
    21c0:	e0c4      	b.n	234c <__aeabi_dadd+0x26c>
    21c2:	1b9e      	subs	r6, r3, r6
    21c4:	1c73      	adds	r3, r6, #1
    21c6:	2b1f      	cmp	r3, #31
    21c8:	dd00      	ble.n	21cc <__aeabi_dadd+0xec>
    21ca:	e0f1      	b.n	23b0 <__aeabi_dadd+0x2d0>
    21cc:	2220      	movs	r2, #32
    21ce:	0038      	movs	r0, r7
    21d0:	0029      	movs	r1, r5
    21d2:	1ad2      	subs	r2, r2, r3
    21d4:	40d8      	lsrs	r0, r3
    21d6:	4091      	lsls	r1, r2
    21d8:	4097      	lsls	r7, r2
    21da:	002c      	movs	r4, r5
    21dc:	4301      	orrs	r1, r0
    21de:	1e78      	subs	r0, r7, #1
    21e0:	4187      	sbcs	r7, r0
    21e2:	40dc      	lsrs	r4, r3
    21e4:	2600      	movs	r6, #0
    21e6:	430f      	orrs	r7, r1
    21e8:	077b      	lsls	r3, r7, #29
    21ea:	d009      	beq.n	2200 <__aeabi_dadd+0x120>
    21ec:	230f      	movs	r3, #15
    21ee:	403b      	ands	r3, r7
    21f0:	2b04      	cmp	r3, #4
    21f2:	d005      	beq.n	2200 <__aeabi_dadd+0x120>
    21f4:	1d3b      	adds	r3, r7, #4
    21f6:	42bb      	cmp	r3, r7
    21f8:	41bf      	sbcs	r7, r7
    21fa:	427f      	negs	r7, r7
    21fc:	19e4      	adds	r4, r4, r7
    21fe:	001f      	movs	r7, r3
    2200:	0223      	lsls	r3, r4, #8
    2202:	d52c      	bpl.n	225e <__aeabi_dadd+0x17e>
    2204:	4b96      	ldr	r3, [pc, #600]	; (2460 <__aeabi_dadd+0x380>)
    2206:	3601      	adds	r6, #1
    2208:	429e      	cmp	r6, r3
    220a:	d100      	bne.n	220e <__aeabi_dadd+0x12e>
    220c:	e09a      	b.n	2344 <__aeabi_dadd+0x264>
    220e:	4645      	mov	r5, r8
    2210:	4b94      	ldr	r3, [pc, #592]	; (2464 <__aeabi_dadd+0x384>)
    2212:	08ff      	lsrs	r7, r7, #3
    2214:	401c      	ands	r4, r3
    2216:	0760      	lsls	r0, r4, #29
    2218:	0576      	lsls	r6, r6, #21
    221a:	0264      	lsls	r4, r4, #9
    221c:	4307      	orrs	r7, r0
    221e:	0b24      	lsrs	r4, r4, #12
    2220:	0d76      	lsrs	r6, r6, #21
    2222:	2100      	movs	r1, #0
    2224:	0324      	lsls	r4, r4, #12
    2226:	0b23      	lsrs	r3, r4, #12
    2228:	0d0c      	lsrs	r4, r1, #20
    222a:	4a8f      	ldr	r2, [pc, #572]	; (2468 <__aeabi_dadd+0x388>)
    222c:	0524      	lsls	r4, r4, #20
    222e:	431c      	orrs	r4, r3
    2230:	4014      	ands	r4, r2
    2232:	0533      	lsls	r3, r6, #20
    2234:	4323      	orrs	r3, r4
    2236:	005b      	lsls	r3, r3, #1
    2238:	07ed      	lsls	r5, r5, #31
    223a:	085b      	lsrs	r3, r3, #1
    223c:	432b      	orrs	r3, r5
    223e:	0038      	movs	r0, r7
    2240:	0019      	movs	r1, r3
    2242:	bc3c      	pop	{r2, r3, r4, r5}
    2244:	4690      	mov	r8, r2
    2246:	4699      	mov	r9, r3
    2248:	46a2      	mov	sl, r4
    224a:	46ab      	mov	fp, r5
    224c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    224e:	4664      	mov	r4, ip
    2250:	4304      	orrs	r4, r0
    2252:	d100      	bne.n	2256 <__aeabi_dadd+0x176>
    2254:	e211      	b.n	267a <__aeabi_dadd+0x59a>
    2256:	0004      	movs	r4, r0
    2258:	4667      	mov	r7, ip
    225a:	077b      	lsls	r3, r7, #29
    225c:	d1c6      	bne.n	21ec <__aeabi_dadd+0x10c>
    225e:	4645      	mov	r5, r8
    2260:	0760      	lsls	r0, r4, #29
    2262:	08ff      	lsrs	r7, r7, #3
    2264:	4307      	orrs	r7, r0
    2266:	08e4      	lsrs	r4, r4, #3
    2268:	4b7d      	ldr	r3, [pc, #500]	; (2460 <__aeabi_dadd+0x380>)
    226a:	429e      	cmp	r6, r3
    226c:	d030      	beq.n	22d0 <__aeabi_dadd+0x1f0>
    226e:	0324      	lsls	r4, r4, #12
    2270:	0576      	lsls	r6, r6, #21
    2272:	0b24      	lsrs	r4, r4, #12
    2274:	0d76      	lsrs	r6, r6, #21
    2276:	e7d4      	b.n	2222 <__aeabi_dadd+0x142>
    2278:	1a33      	subs	r3, r6, r0
    227a:	469a      	mov	sl, r3
    227c:	2b00      	cmp	r3, #0
    227e:	dd78      	ble.n	2372 <__aeabi_dadd+0x292>
    2280:	2800      	cmp	r0, #0
    2282:	d031      	beq.n	22e8 <__aeabi_dadd+0x208>
    2284:	4876      	ldr	r0, [pc, #472]	; (2460 <__aeabi_dadd+0x380>)
    2286:	4286      	cmp	r6, r0
    2288:	d0ae      	beq.n	21e8 <__aeabi_dadd+0x108>
    228a:	2080      	movs	r0, #128	; 0x80
    228c:	0400      	lsls	r0, r0, #16
    228e:	4301      	orrs	r1, r0
    2290:	4653      	mov	r3, sl
    2292:	2b38      	cmp	r3, #56	; 0x38
    2294:	dc00      	bgt.n	2298 <__aeabi_dadd+0x1b8>
    2296:	e0e9      	b.n	246c <__aeabi_dadd+0x38c>
    2298:	430a      	orrs	r2, r1
    229a:	1e51      	subs	r1, r2, #1
    229c:	418a      	sbcs	r2, r1
    229e:	2100      	movs	r1, #0
    22a0:	19d2      	adds	r2, r2, r7
    22a2:	42ba      	cmp	r2, r7
    22a4:	41bf      	sbcs	r7, r7
    22a6:	1909      	adds	r1, r1, r4
    22a8:	427c      	negs	r4, r7
    22aa:	0017      	movs	r7, r2
    22ac:	190c      	adds	r4, r1, r4
    22ae:	0223      	lsls	r3, r4, #8
    22b0:	d5d3      	bpl.n	225a <__aeabi_dadd+0x17a>
    22b2:	4b6b      	ldr	r3, [pc, #428]	; (2460 <__aeabi_dadd+0x380>)
    22b4:	3601      	adds	r6, #1
    22b6:	429e      	cmp	r6, r3
    22b8:	d100      	bne.n	22bc <__aeabi_dadd+0x1dc>
    22ba:	e13a      	b.n	2532 <__aeabi_dadd+0x452>
    22bc:	2001      	movs	r0, #1
    22be:	4b69      	ldr	r3, [pc, #420]	; (2464 <__aeabi_dadd+0x384>)
    22c0:	401c      	ands	r4, r3
    22c2:	087b      	lsrs	r3, r7, #1
    22c4:	4007      	ands	r7, r0
    22c6:	431f      	orrs	r7, r3
    22c8:	07e0      	lsls	r0, r4, #31
    22ca:	4307      	orrs	r7, r0
    22cc:	0864      	lsrs	r4, r4, #1
    22ce:	e78b      	b.n	21e8 <__aeabi_dadd+0x108>
    22d0:	0023      	movs	r3, r4
    22d2:	433b      	orrs	r3, r7
    22d4:	d100      	bne.n	22d8 <__aeabi_dadd+0x1f8>
    22d6:	e1cb      	b.n	2670 <__aeabi_dadd+0x590>
    22d8:	2280      	movs	r2, #128	; 0x80
    22da:	0312      	lsls	r2, r2, #12
    22dc:	4314      	orrs	r4, r2
    22de:	0324      	lsls	r4, r4, #12
    22e0:	0b24      	lsrs	r4, r4, #12
    22e2:	e79e      	b.n	2222 <__aeabi_dadd+0x142>
    22e4:	002e      	movs	r6, r5
    22e6:	e77f      	b.n	21e8 <__aeabi_dadd+0x108>
    22e8:	0008      	movs	r0, r1
    22ea:	4310      	orrs	r0, r2
    22ec:	d100      	bne.n	22f0 <__aeabi_dadd+0x210>
    22ee:	e0b4      	b.n	245a <__aeabi_dadd+0x37a>
    22f0:	1e58      	subs	r0, r3, #1
    22f2:	2800      	cmp	r0, #0
    22f4:	d000      	beq.n	22f8 <__aeabi_dadd+0x218>
    22f6:	e0de      	b.n	24b6 <__aeabi_dadd+0x3d6>
    22f8:	18ba      	adds	r2, r7, r2
    22fa:	42ba      	cmp	r2, r7
    22fc:	419b      	sbcs	r3, r3
    22fe:	1864      	adds	r4, r4, r1
    2300:	425b      	negs	r3, r3
    2302:	18e4      	adds	r4, r4, r3
    2304:	0017      	movs	r7, r2
    2306:	2601      	movs	r6, #1
    2308:	0223      	lsls	r3, r4, #8
    230a:	d5a6      	bpl.n	225a <__aeabi_dadd+0x17a>
    230c:	2602      	movs	r6, #2
    230e:	e7d5      	b.n	22bc <__aeabi_dadd+0x1dc>
    2310:	2d00      	cmp	r5, #0
    2312:	d16e      	bne.n	23f2 <__aeabi_dadd+0x312>
    2314:	1c70      	adds	r0, r6, #1
    2316:	0540      	lsls	r0, r0, #21
    2318:	0d40      	lsrs	r0, r0, #21
    231a:	2801      	cmp	r0, #1
    231c:	dc00      	bgt.n	2320 <__aeabi_dadd+0x240>
    231e:	e0f9      	b.n	2514 <__aeabi_dadd+0x434>
    2320:	1ab8      	subs	r0, r7, r2
    2322:	4684      	mov	ip, r0
    2324:	4287      	cmp	r7, r0
    2326:	4180      	sbcs	r0, r0
    2328:	1ae5      	subs	r5, r4, r3
    232a:	4240      	negs	r0, r0
    232c:	1a2d      	subs	r5, r5, r0
    232e:	0228      	lsls	r0, r5, #8
    2330:	d400      	bmi.n	2334 <__aeabi_dadd+0x254>
    2332:	e089      	b.n	2448 <__aeabi_dadd+0x368>
    2334:	1bd7      	subs	r7, r2, r7
    2336:	42ba      	cmp	r2, r7
    2338:	4192      	sbcs	r2, r2
    233a:	1b1c      	subs	r4, r3, r4
    233c:	4252      	negs	r2, r2
    233e:	1aa5      	subs	r5, r4, r2
    2340:	46d8      	mov	r8, fp
    2342:	e729      	b.n	2198 <__aeabi_dadd+0xb8>
    2344:	4645      	mov	r5, r8
    2346:	2400      	movs	r4, #0
    2348:	2700      	movs	r7, #0
    234a:	e76a      	b.n	2222 <__aeabi_dadd+0x142>
    234c:	4c45      	ldr	r4, [pc, #276]	; (2464 <__aeabi_dadd+0x384>)
    234e:	1af6      	subs	r6, r6, r3
    2350:	402c      	ands	r4, r5
    2352:	e749      	b.n	21e8 <__aeabi_dadd+0x108>
    2354:	003d      	movs	r5, r7
    2356:	3828      	subs	r0, #40	; 0x28
    2358:	4085      	lsls	r5, r0
    235a:	2700      	movs	r7, #0
    235c:	e72e      	b.n	21bc <__aeabi_dadd+0xdc>
    235e:	0038      	movs	r0, r7
    2360:	f001 fb04 	bl	396c <__clzsi2>
    2364:	3020      	adds	r0, #32
    2366:	e71d      	b.n	21a4 <__aeabi_dadd+0xc4>
    2368:	430a      	orrs	r2, r1
    236a:	1e51      	subs	r1, r2, #1
    236c:	418a      	sbcs	r2, r1
    236e:	2100      	movs	r1, #0
    2370:	e707      	b.n	2182 <__aeabi_dadd+0xa2>
    2372:	2b00      	cmp	r3, #0
    2374:	d000      	beq.n	2378 <__aeabi_dadd+0x298>
    2376:	e0f3      	b.n	2560 <__aeabi_dadd+0x480>
    2378:	1c70      	adds	r0, r6, #1
    237a:	0543      	lsls	r3, r0, #21
    237c:	0d5b      	lsrs	r3, r3, #21
    237e:	2b01      	cmp	r3, #1
    2380:	dc00      	bgt.n	2384 <__aeabi_dadd+0x2a4>
    2382:	e0ad      	b.n	24e0 <__aeabi_dadd+0x400>
    2384:	4b36      	ldr	r3, [pc, #216]	; (2460 <__aeabi_dadd+0x380>)
    2386:	4298      	cmp	r0, r3
    2388:	d100      	bne.n	238c <__aeabi_dadd+0x2ac>
    238a:	e0d1      	b.n	2530 <__aeabi_dadd+0x450>
    238c:	18ba      	adds	r2, r7, r2
    238e:	42ba      	cmp	r2, r7
    2390:	41bf      	sbcs	r7, r7
    2392:	1864      	adds	r4, r4, r1
    2394:	427f      	negs	r7, r7
    2396:	19e4      	adds	r4, r4, r7
    2398:	07e7      	lsls	r7, r4, #31
    239a:	0852      	lsrs	r2, r2, #1
    239c:	4317      	orrs	r7, r2
    239e:	0864      	lsrs	r4, r4, #1
    23a0:	0006      	movs	r6, r0
    23a2:	e721      	b.n	21e8 <__aeabi_dadd+0x108>
    23a4:	482e      	ldr	r0, [pc, #184]	; (2460 <__aeabi_dadd+0x380>)
    23a6:	4285      	cmp	r5, r0
    23a8:	d100      	bne.n	23ac <__aeabi_dadd+0x2cc>
    23aa:	e093      	b.n	24d4 <__aeabi_dadd+0x3f4>
    23ac:	001d      	movs	r5, r3
    23ae:	e6d0      	b.n	2152 <__aeabi_dadd+0x72>
    23b0:	0029      	movs	r1, r5
    23b2:	3e1f      	subs	r6, #31
    23b4:	40f1      	lsrs	r1, r6
    23b6:	2b20      	cmp	r3, #32
    23b8:	d100      	bne.n	23bc <__aeabi_dadd+0x2dc>
    23ba:	e08d      	b.n	24d8 <__aeabi_dadd+0x3f8>
    23bc:	2240      	movs	r2, #64	; 0x40
    23be:	1ad3      	subs	r3, r2, r3
    23c0:	409d      	lsls	r5, r3
    23c2:	432f      	orrs	r7, r5
    23c4:	1e7d      	subs	r5, r7, #1
    23c6:	41af      	sbcs	r7, r5
    23c8:	2400      	movs	r4, #0
    23ca:	430f      	orrs	r7, r1
    23cc:	2600      	movs	r6, #0
    23ce:	e744      	b.n	225a <__aeabi_dadd+0x17a>
    23d0:	002b      	movs	r3, r5
    23d2:	0008      	movs	r0, r1
    23d4:	3b20      	subs	r3, #32
    23d6:	40d8      	lsrs	r0, r3
    23d8:	0003      	movs	r3, r0
    23da:	2d20      	cmp	r5, #32
    23dc:	d100      	bne.n	23e0 <__aeabi_dadd+0x300>
    23de:	e07d      	b.n	24dc <__aeabi_dadd+0x3fc>
    23e0:	2040      	movs	r0, #64	; 0x40
    23e2:	1b45      	subs	r5, r0, r5
    23e4:	40a9      	lsls	r1, r5
    23e6:	430a      	orrs	r2, r1
    23e8:	1e51      	subs	r1, r2, #1
    23ea:	418a      	sbcs	r2, r1
    23ec:	2100      	movs	r1, #0
    23ee:	431a      	orrs	r2, r3
    23f0:	e6c7      	b.n	2182 <__aeabi_dadd+0xa2>
    23f2:	2e00      	cmp	r6, #0
    23f4:	d050      	beq.n	2498 <__aeabi_dadd+0x3b8>
    23f6:	4e1a      	ldr	r6, [pc, #104]	; (2460 <__aeabi_dadd+0x380>)
    23f8:	42b0      	cmp	r0, r6
    23fa:	d057      	beq.n	24ac <__aeabi_dadd+0x3cc>
    23fc:	2680      	movs	r6, #128	; 0x80
    23fe:	426b      	negs	r3, r5
    2400:	4699      	mov	r9, r3
    2402:	0436      	lsls	r6, r6, #16
    2404:	4334      	orrs	r4, r6
    2406:	464b      	mov	r3, r9
    2408:	2b38      	cmp	r3, #56	; 0x38
    240a:	dd00      	ble.n	240e <__aeabi_dadd+0x32e>
    240c:	e0d6      	b.n	25bc <__aeabi_dadd+0x4dc>
    240e:	2b1f      	cmp	r3, #31
    2410:	dd00      	ble.n	2414 <__aeabi_dadd+0x334>
    2412:	e135      	b.n	2680 <__aeabi_dadd+0x5a0>
    2414:	2620      	movs	r6, #32
    2416:	1af5      	subs	r5, r6, r3
    2418:	0026      	movs	r6, r4
    241a:	40ae      	lsls	r6, r5
    241c:	46b2      	mov	sl, r6
    241e:	003e      	movs	r6, r7
    2420:	40de      	lsrs	r6, r3
    2422:	46ac      	mov	ip, r5
    2424:	0035      	movs	r5, r6
    2426:	4656      	mov	r6, sl
    2428:	432e      	orrs	r6, r5
    242a:	4665      	mov	r5, ip
    242c:	40af      	lsls	r7, r5
    242e:	1e7d      	subs	r5, r7, #1
    2430:	41af      	sbcs	r7, r5
    2432:	40dc      	lsrs	r4, r3
    2434:	4337      	orrs	r7, r6
    2436:	1bd7      	subs	r7, r2, r7
    2438:	42ba      	cmp	r2, r7
    243a:	4192      	sbcs	r2, r2
    243c:	1b0c      	subs	r4, r1, r4
    243e:	4252      	negs	r2, r2
    2440:	1aa4      	subs	r4, r4, r2
    2442:	0006      	movs	r6, r0
    2444:	46d8      	mov	r8, fp
    2446:	e6a3      	b.n	2190 <__aeabi_dadd+0xb0>
    2448:	4664      	mov	r4, ip
    244a:	4667      	mov	r7, ip
    244c:	432c      	orrs	r4, r5
    244e:	d000      	beq.n	2452 <__aeabi_dadd+0x372>
    2450:	e6a2      	b.n	2198 <__aeabi_dadd+0xb8>
    2452:	2500      	movs	r5, #0
    2454:	2600      	movs	r6, #0
    2456:	2700      	movs	r7, #0
    2458:	e706      	b.n	2268 <__aeabi_dadd+0x188>
    245a:	001e      	movs	r6, r3
    245c:	e6c4      	b.n	21e8 <__aeabi_dadd+0x108>
    245e:	46c0      	nop			; (mov r8, r8)
    2460:	000007ff 	.word	0x000007ff
    2464:	ff7fffff 	.word	0xff7fffff
    2468:	800fffff 	.word	0x800fffff
    246c:	2b1f      	cmp	r3, #31
    246e:	dc63      	bgt.n	2538 <__aeabi_dadd+0x458>
    2470:	2020      	movs	r0, #32
    2472:	1ac3      	subs	r3, r0, r3
    2474:	0008      	movs	r0, r1
    2476:	4098      	lsls	r0, r3
    2478:	469c      	mov	ip, r3
    247a:	4683      	mov	fp, r0
    247c:	4653      	mov	r3, sl
    247e:	0010      	movs	r0, r2
    2480:	40d8      	lsrs	r0, r3
    2482:	0003      	movs	r3, r0
    2484:	4658      	mov	r0, fp
    2486:	4318      	orrs	r0, r3
    2488:	4663      	mov	r3, ip
    248a:	409a      	lsls	r2, r3
    248c:	1e53      	subs	r3, r2, #1
    248e:	419a      	sbcs	r2, r3
    2490:	4653      	mov	r3, sl
    2492:	4302      	orrs	r2, r0
    2494:	40d9      	lsrs	r1, r3
    2496:	e703      	b.n	22a0 <__aeabi_dadd+0x1c0>
    2498:	0026      	movs	r6, r4
    249a:	433e      	orrs	r6, r7
    249c:	d006      	beq.n	24ac <__aeabi_dadd+0x3cc>
    249e:	43eb      	mvns	r3, r5
    24a0:	4699      	mov	r9, r3
    24a2:	2b00      	cmp	r3, #0
    24a4:	d0c7      	beq.n	2436 <__aeabi_dadd+0x356>
    24a6:	4e94      	ldr	r6, [pc, #592]	; (26f8 <__aeabi_dadd+0x618>)
    24a8:	42b0      	cmp	r0, r6
    24aa:	d1ac      	bne.n	2406 <__aeabi_dadd+0x326>
    24ac:	000c      	movs	r4, r1
    24ae:	0017      	movs	r7, r2
    24b0:	0006      	movs	r6, r0
    24b2:	46d8      	mov	r8, fp
    24b4:	e698      	b.n	21e8 <__aeabi_dadd+0x108>
    24b6:	4b90      	ldr	r3, [pc, #576]	; (26f8 <__aeabi_dadd+0x618>)
    24b8:	459a      	cmp	sl, r3
    24ba:	d00b      	beq.n	24d4 <__aeabi_dadd+0x3f4>
    24bc:	4682      	mov	sl, r0
    24be:	e6e7      	b.n	2290 <__aeabi_dadd+0x1b0>
    24c0:	2800      	cmp	r0, #0
    24c2:	d000      	beq.n	24c6 <__aeabi_dadd+0x3e6>
    24c4:	e09e      	b.n	2604 <__aeabi_dadd+0x524>
    24c6:	0018      	movs	r0, r3
    24c8:	4310      	orrs	r0, r2
    24ca:	d100      	bne.n	24ce <__aeabi_dadd+0x3ee>
    24cc:	e0e9      	b.n	26a2 <__aeabi_dadd+0x5c2>
    24ce:	001c      	movs	r4, r3
    24d0:	0017      	movs	r7, r2
    24d2:	46d8      	mov	r8, fp
    24d4:	4e88      	ldr	r6, [pc, #544]	; (26f8 <__aeabi_dadd+0x618>)
    24d6:	e687      	b.n	21e8 <__aeabi_dadd+0x108>
    24d8:	2500      	movs	r5, #0
    24da:	e772      	b.n	23c2 <__aeabi_dadd+0x2e2>
    24dc:	2100      	movs	r1, #0
    24de:	e782      	b.n	23e6 <__aeabi_dadd+0x306>
    24e0:	0023      	movs	r3, r4
    24e2:	433b      	orrs	r3, r7
    24e4:	2e00      	cmp	r6, #0
    24e6:	d000      	beq.n	24ea <__aeabi_dadd+0x40a>
    24e8:	e0ab      	b.n	2642 <__aeabi_dadd+0x562>
    24ea:	2b00      	cmp	r3, #0
    24ec:	d100      	bne.n	24f0 <__aeabi_dadd+0x410>
    24ee:	e0e7      	b.n	26c0 <__aeabi_dadd+0x5e0>
    24f0:	000b      	movs	r3, r1
    24f2:	4313      	orrs	r3, r2
    24f4:	d100      	bne.n	24f8 <__aeabi_dadd+0x418>
    24f6:	e677      	b.n	21e8 <__aeabi_dadd+0x108>
    24f8:	18ba      	adds	r2, r7, r2
    24fa:	42ba      	cmp	r2, r7
    24fc:	41bf      	sbcs	r7, r7
    24fe:	1864      	adds	r4, r4, r1
    2500:	427f      	negs	r7, r7
    2502:	19e4      	adds	r4, r4, r7
    2504:	0223      	lsls	r3, r4, #8
    2506:	d400      	bmi.n	250a <__aeabi_dadd+0x42a>
    2508:	e0f2      	b.n	26f0 <__aeabi_dadd+0x610>
    250a:	4b7c      	ldr	r3, [pc, #496]	; (26fc <__aeabi_dadd+0x61c>)
    250c:	0017      	movs	r7, r2
    250e:	401c      	ands	r4, r3
    2510:	0006      	movs	r6, r0
    2512:	e669      	b.n	21e8 <__aeabi_dadd+0x108>
    2514:	0020      	movs	r0, r4
    2516:	4338      	orrs	r0, r7
    2518:	2e00      	cmp	r6, #0
    251a:	d1d1      	bne.n	24c0 <__aeabi_dadd+0x3e0>
    251c:	2800      	cmp	r0, #0
    251e:	d15b      	bne.n	25d8 <__aeabi_dadd+0x4f8>
    2520:	001c      	movs	r4, r3
    2522:	4314      	orrs	r4, r2
    2524:	d100      	bne.n	2528 <__aeabi_dadd+0x448>
    2526:	e0a8      	b.n	267a <__aeabi_dadd+0x59a>
    2528:	001c      	movs	r4, r3
    252a:	0017      	movs	r7, r2
    252c:	46d8      	mov	r8, fp
    252e:	e65b      	b.n	21e8 <__aeabi_dadd+0x108>
    2530:	0006      	movs	r6, r0
    2532:	2400      	movs	r4, #0
    2534:	2700      	movs	r7, #0
    2536:	e697      	b.n	2268 <__aeabi_dadd+0x188>
    2538:	4650      	mov	r0, sl
    253a:	000b      	movs	r3, r1
    253c:	3820      	subs	r0, #32
    253e:	40c3      	lsrs	r3, r0
    2540:	4699      	mov	r9, r3
    2542:	4653      	mov	r3, sl
    2544:	2b20      	cmp	r3, #32
    2546:	d100      	bne.n	254a <__aeabi_dadd+0x46a>
    2548:	e095      	b.n	2676 <__aeabi_dadd+0x596>
    254a:	2340      	movs	r3, #64	; 0x40
    254c:	4650      	mov	r0, sl
    254e:	1a1b      	subs	r3, r3, r0
    2550:	4099      	lsls	r1, r3
    2552:	430a      	orrs	r2, r1
    2554:	1e51      	subs	r1, r2, #1
    2556:	418a      	sbcs	r2, r1
    2558:	464b      	mov	r3, r9
    255a:	2100      	movs	r1, #0
    255c:	431a      	orrs	r2, r3
    255e:	e69f      	b.n	22a0 <__aeabi_dadd+0x1c0>
    2560:	2e00      	cmp	r6, #0
    2562:	d130      	bne.n	25c6 <__aeabi_dadd+0x4e6>
    2564:	0026      	movs	r6, r4
    2566:	433e      	orrs	r6, r7
    2568:	d067      	beq.n	263a <__aeabi_dadd+0x55a>
    256a:	43db      	mvns	r3, r3
    256c:	469a      	mov	sl, r3
    256e:	2b00      	cmp	r3, #0
    2570:	d01c      	beq.n	25ac <__aeabi_dadd+0x4cc>
    2572:	4e61      	ldr	r6, [pc, #388]	; (26f8 <__aeabi_dadd+0x618>)
    2574:	42b0      	cmp	r0, r6
    2576:	d060      	beq.n	263a <__aeabi_dadd+0x55a>
    2578:	4653      	mov	r3, sl
    257a:	2b38      	cmp	r3, #56	; 0x38
    257c:	dd00      	ble.n	2580 <__aeabi_dadd+0x4a0>
    257e:	e096      	b.n	26ae <__aeabi_dadd+0x5ce>
    2580:	2b1f      	cmp	r3, #31
    2582:	dd00      	ble.n	2586 <__aeabi_dadd+0x4a6>
    2584:	e09f      	b.n	26c6 <__aeabi_dadd+0x5e6>
    2586:	2620      	movs	r6, #32
    2588:	1af3      	subs	r3, r6, r3
    258a:	0026      	movs	r6, r4
    258c:	409e      	lsls	r6, r3
    258e:	469c      	mov	ip, r3
    2590:	46b3      	mov	fp, r6
    2592:	4653      	mov	r3, sl
    2594:	003e      	movs	r6, r7
    2596:	40de      	lsrs	r6, r3
    2598:	0033      	movs	r3, r6
    259a:	465e      	mov	r6, fp
    259c:	431e      	orrs	r6, r3
    259e:	4663      	mov	r3, ip
    25a0:	409f      	lsls	r7, r3
    25a2:	1e7b      	subs	r3, r7, #1
    25a4:	419f      	sbcs	r7, r3
    25a6:	4653      	mov	r3, sl
    25a8:	40dc      	lsrs	r4, r3
    25aa:	4337      	orrs	r7, r6
    25ac:	18bf      	adds	r7, r7, r2
    25ae:	4297      	cmp	r7, r2
    25b0:	4192      	sbcs	r2, r2
    25b2:	1864      	adds	r4, r4, r1
    25b4:	4252      	negs	r2, r2
    25b6:	18a4      	adds	r4, r4, r2
    25b8:	0006      	movs	r6, r0
    25ba:	e678      	b.n	22ae <__aeabi_dadd+0x1ce>
    25bc:	4327      	orrs	r7, r4
    25be:	1e7c      	subs	r4, r7, #1
    25c0:	41a7      	sbcs	r7, r4
    25c2:	2400      	movs	r4, #0
    25c4:	e737      	b.n	2436 <__aeabi_dadd+0x356>
    25c6:	4e4c      	ldr	r6, [pc, #304]	; (26f8 <__aeabi_dadd+0x618>)
    25c8:	42b0      	cmp	r0, r6
    25ca:	d036      	beq.n	263a <__aeabi_dadd+0x55a>
    25cc:	2680      	movs	r6, #128	; 0x80
    25ce:	425b      	negs	r3, r3
    25d0:	0436      	lsls	r6, r6, #16
    25d2:	469a      	mov	sl, r3
    25d4:	4334      	orrs	r4, r6
    25d6:	e7cf      	b.n	2578 <__aeabi_dadd+0x498>
    25d8:	0018      	movs	r0, r3
    25da:	4310      	orrs	r0, r2
    25dc:	d100      	bne.n	25e0 <__aeabi_dadd+0x500>
    25de:	e603      	b.n	21e8 <__aeabi_dadd+0x108>
    25e0:	1ab8      	subs	r0, r7, r2
    25e2:	4684      	mov	ip, r0
    25e4:	4567      	cmp	r7, ip
    25e6:	41ad      	sbcs	r5, r5
    25e8:	1ae0      	subs	r0, r4, r3
    25ea:	426d      	negs	r5, r5
    25ec:	1b40      	subs	r0, r0, r5
    25ee:	0205      	lsls	r5, r0, #8
    25f0:	d400      	bmi.n	25f4 <__aeabi_dadd+0x514>
    25f2:	e62c      	b.n	224e <__aeabi_dadd+0x16e>
    25f4:	1bd7      	subs	r7, r2, r7
    25f6:	42ba      	cmp	r2, r7
    25f8:	4192      	sbcs	r2, r2
    25fa:	1b1c      	subs	r4, r3, r4
    25fc:	4252      	negs	r2, r2
    25fe:	1aa4      	subs	r4, r4, r2
    2600:	46d8      	mov	r8, fp
    2602:	e5f1      	b.n	21e8 <__aeabi_dadd+0x108>
    2604:	0018      	movs	r0, r3
    2606:	4310      	orrs	r0, r2
    2608:	d100      	bne.n	260c <__aeabi_dadd+0x52c>
    260a:	e763      	b.n	24d4 <__aeabi_dadd+0x3f4>
    260c:	08f8      	lsrs	r0, r7, #3
    260e:	0767      	lsls	r7, r4, #29
    2610:	4307      	orrs	r7, r0
    2612:	2080      	movs	r0, #128	; 0x80
    2614:	08e4      	lsrs	r4, r4, #3
    2616:	0300      	lsls	r0, r0, #12
    2618:	4204      	tst	r4, r0
    261a:	d008      	beq.n	262e <__aeabi_dadd+0x54e>
    261c:	08dd      	lsrs	r5, r3, #3
    261e:	4205      	tst	r5, r0
    2620:	d105      	bne.n	262e <__aeabi_dadd+0x54e>
    2622:	08d2      	lsrs	r2, r2, #3
    2624:	0759      	lsls	r1, r3, #29
    2626:	4311      	orrs	r1, r2
    2628:	000f      	movs	r7, r1
    262a:	002c      	movs	r4, r5
    262c:	46d8      	mov	r8, fp
    262e:	0f7b      	lsrs	r3, r7, #29
    2630:	00e4      	lsls	r4, r4, #3
    2632:	431c      	orrs	r4, r3
    2634:	00ff      	lsls	r7, r7, #3
    2636:	4e30      	ldr	r6, [pc, #192]	; (26f8 <__aeabi_dadd+0x618>)
    2638:	e5d6      	b.n	21e8 <__aeabi_dadd+0x108>
    263a:	000c      	movs	r4, r1
    263c:	0017      	movs	r7, r2
    263e:	0006      	movs	r6, r0
    2640:	e5d2      	b.n	21e8 <__aeabi_dadd+0x108>
    2642:	2b00      	cmp	r3, #0
    2644:	d038      	beq.n	26b8 <__aeabi_dadd+0x5d8>
    2646:	000b      	movs	r3, r1
    2648:	4313      	orrs	r3, r2
    264a:	d100      	bne.n	264e <__aeabi_dadd+0x56e>
    264c:	e742      	b.n	24d4 <__aeabi_dadd+0x3f4>
    264e:	08f8      	lsrs	r0, r7, #3
    2650:	0767      	lsls	r7, r4, #29
    2652:	4307      	orrs	r7, r0
    2654:	2080      	movs	r0, #128	; 0x80
    2656:	08e4      	lsrs	r4, r4, #3
    2658:	0300      	lsls	r0, r0, #12
    265a:	4204      	tst	r4, r0
    265c:	d0e7      	beq.n	262e <__aeabi_dadd+0x54e>
    265e:	08cb      	lsrs	r3, r1, #3
    2660:	4203      	tst	r3, r0
    2662:	d1e4      	bne.n	262e <__aeabi_dadd+0x54e>
    2664:	08d2      	lsrs	r2, r2, #3
    2666:	0749      	lsls	r1, r1, #29
    2668:	4311      	orrs	r1, r2
    266a:	000f      	movs	r7, r1
    266c:	001c      	movs	r4, r3
    266e:	e7de      	b.n	262e <__aeabi_dadd+0x54e>
    2670:	2700      	movs	r7, #0
    2672:	2400      	movs	r4, #0
    2674:	e5d5      	b.n	2222 <__aeabi_dadd+0x142>
    2676:	2100      	movs	r1, #0
    2678:	e76b      	b.n	2552 <__aeabi_dadd+0x472>
    267a:	2500      	movs	r5, #0
    267c:	2700      	movs	r7, #0
    267e:	e5f3      	b.n	2268 <__aeabi_dadd+0x188>
    2680:	464e      	mov	r6, r9
    2682:	0025      	movs	r5, r4
    2684:	3e20      	subs	r6, #32
    2686:	40f5      	lsrs	r5, r6
    2688:	464b      	mov	r3, r9
    268a:	002e      	movs	r6, r5
    268c:	2b20      	cmp	r3, #32
    268e:	d02d      	beq.n	26ec <__aeabi_dadd+0x60c>
    2690:	2540      	movs	r5, #64	; 0x40
    2692:	1aed      	subs	r5, r5, r3
    2694:	40ac      	lsls	r4, r5
    2696:	4327      	orrs	r7, r4
    2698:	1e7c      	subs	r4, r7, #1
    269a:	41a7      	sbcs	r7, r4
    269c:	2400      	movs	r4, #0
    269e:	4337      	orrs	r7, r6
    26a0:	e6c9      	b.n	2436 <__aeabi_dadd+0x356>
    26a2:	2480      	movs	r4, #128	; 0x80
    26a4:	2500      	movs	r5, #0
    26a6:	0324      	lsls	r4, r4, #12
    26a8:	4e13      	ldr	r6, [pc, #76]	; (26f8 <__aeabi_dadd+0x618>)
    26aa:	2700      	movs	r7, #0
    26ac:	e5dc      	b.n	2268 <__aeabi_dadd+0x188>
    26ae:	4327      	orrs	r7, r4
    26b0:	1e7c      	subs	r4, r7, #1
    26b2:	41a7      	sbcs	r7, r4
    26b4:	2400      	movs	r4, #0
    26b6:	e779      	b.n	25ac <__aeabi_dadd+0x4cc>
    26b8:	000c      	movs	r4, r1
    26ba:	0017      	movs	r7, r2
    26bc:	4e0e      	ldr	r6, [pc, #56]	; (26f8 <__aeabi_dadd+0x618>)
    26be:	e593      	b.n	21e8 <__aeabi_dadd+0x108>
    26c0:	000c      	movs	r4, r1
    26c2:	0017      	movs	r7, r2
    26c4:	e590      	b.n	21e8 <__aeabi_dadd+0x108>
    26c6:	4656      	mov	r6, sl
    26c8:	0023      	movs	r3, r4
    26ca:	3e20      	subs	r6, #32
    26cc:	40f3      	lsrs	r3, r6
    26ce:	4699      	mov	r9, r3
    26d0:	4653      	mov	r3, sl
    26d2:	2b20      	cmp	r3, #32
    26d4:	d00e      	beq.n	26f4 <__aeabi_dadd+0x614>
    26d6:	2340      	movs	r3, #64	; 0x40
    26d8:	4656      	mov	r6, sl
    26da:	1b9b      	subs	r3, r3, r6
    26dc:	409c      	lsls	r4, r3
    26de:	4327      	orrs	r7, r4
    26e0:	1e7c      	subs	r4, r7, #1
    26e2:	41a7      	sbcs	r7, r4
    26e4:	464b      	mov	r3, r9
    26e6:	2400      	movs	r4, #0
    26e8:	431f      	orrs	r7, r3
    26ea:	e75f      	b.n	25ac <__aeabi_dadd+0x4cc>
    26ec:	2400      	movs	r4, #0
    26ee:	e7d2      	b.n	2696 <__aeabi_dadd+0x5b6>
    26f0:	0017      	movs	r7, r2
    26f2:	e5b2      	b.n	225a <__aeabi_dadd+0x17a>
    26f4:	2400      	movs	r4, #0
    26f6:	e7f2      	b.n	26de <__aeabi_dadd+0x5fe>
    26f8:	000007ff 	.word	0x000007ff
    26fc:	ff7fffff 	.word	0xff7fffff

00002700 <__aeabi_ddiv>:
    2700:	b5f0      	push	{r4, r5, r6, r7, lr}
    2702:	4657      	mov	r7, sl
    2704:	4645      	mov	r5, r8
    2706:	46de      	mov	lr, fp
    2708:	464e      	mov	r6, r9
    270a:	b5e0      	push	{r5, r6, r7, lr}
    270c:	004c      	lsls	r4, r1, #1
    270e:	030e      	lsls	r6, r1, #12
    2710:	b087      	sub	sp, #28
    2712:	4683      	mov	fp, r0
    2714:	4692      	mov	sl, r2
    2716:	001d      	movs	r5, r3
    2718:	4680      	mov	r8, r0
    271a:	0b36      	lsrs	r6, r6, #12
    271c:	0d64      	lsrs	r4, r4, #21
    271e:	0fcf      	lsrs	r7, r1, #31
    2720:	2c00      	cmp	r4, #0
    2722:	d04f      	beq.n	27c4 <__aeabi_ddiv+0xc4>
    2724:	4b6f      	ldr	r3, [pc, #444]	; (28e4 <__aeabi_ddiv+0x1e4>)
    2726:	429c      	cmp	r4, r3
    2728:	d035      	beq.n	2796 <__aeabi_ddiv+0x96>
    272a:	2380      	movs	r3, #128	; 0x80
    272c:	0f42      	lsrs	r2, r0, #29
    272e:	041b      	lsls	r3, r3, #16
    2730:	00f6      	lsls	r6, r6, #3
    2732:	4313      	orrs	r3, r2
    2734:	4333      	orrs	r3, r6
    2736:	4699      	mov	r9, r3
    2738:	00c3      	lsls	r3, r0, #3
    273a:	4698      	mov	r8, r3
    273c:	4b6a      	ldr	r3, [pc, #424]	; (28e8 <__aeabi_ddiv+0x1e8>)
    273e:	2600      	movs	r6, #0
    2740:	469c      	mov	ip, r3
    2742:	2300      	movs	r3, #0
    2744:	4464      	add	r4, ip
    2746:	9303      	str	r3, [sp, #12]
    2748:	032b      	lsls	r3, r5, #12
    274a:	0b1b      	lsrs	r3, r3, #12
    274c:	469b      	mov	fp, r3
    274e:	006b      	lsls	r3, r5, #1
    2750:	0fed      	lsrs	r5, r5, #31
    2752:	4650      	mov	r0, sl
    2754:	0d5b      	lsrs	r3, r3, #21
    2756:	9501      	str	r5, [sp, #4]
    2758:	d05e      	beq.n	2818 <__aeabi_ddiv+0x118>
    275a:	4a62      	ldr	r2, [pc, #392]	; (28e4 <__aeabi_ddiv+0x1e4>)
    275c:	4293      	cmp	r3, r2
    275e:	d053      	beq.n	2808 <__aeabi_ddiv+0x108>
    2760:	465a      	mov	r2, fp
    2762:	00d1      	lsls	r1, r2, #3
    2764:	2280      	movs	r2, #128	; 0x80
    2766:	0f40      	lsrs	r0, r0, #29
    2768:	0412      	lsls	r2, r2, #16
    276a:	4302      	orrs	r2, r0
    276c:	430a      	orrs	r2, r1
    276e:	4693      	mov	fp, r2
    2770:	4652      	mov	r2, sl
    2772:	00d1      	lsls	r1, r2, #3
    2774:	4a5c      	ldr	r2, [pc, #368]	; (28e8 <__aeabi_ddiv+0x1e8>)
    2776:	4694      	mov	ip, r2
    2778:	2200      	movs	r2, #0
    277a:	4463      	add	r3, ip
    277c:	0038      	movs	r0, r7
    277e:	4068      	eors	r0, r5
    2780:	4684      	mov	ip, r0
    2782:	9002      	str	r0, [sp, #8]
    2784:	1ae4      	subs	r4, r4, r3
    2786:	4316      	orrs	r6, r2
    2788:	2e0f      	cmp	r6, #15
    278a:	d900      	bls.n	278e <__aeabi_ddiv+0x8e>
    278c:	e0b4      	b.n	28f8 <__aeabi_ddiv+0x1f8>
    278e:	4b57      	ldr	r3, [pc, #348]	; (28ec <__aeabi_ddiv+0x1ec>)
    2790:	00b6      	lsls	r6, r6, #2
    2792:	599b      	ldr	r3, [r3, r6]
    2794:	469f      	mov	pc, r3
    2796:	0003      	movs	r3, r0
    2798:	4333      	orrs	r3, r6
    279a:	4699      	mov	r9, r3
    279c:	d16c      	bne.n	2878 <__aeabi_ddiv+0x178>
    279e:	2300      	movs	r3, #0
    27a0:	4698      	mov	r8, r3
    27a2:	3302      	adds	r3, #2
    27a4:	2608      	movs	r6, #8
    27a6:	9303      	str	r3, [sp, #12]
    27a8:	e7ce      	b.n	2748 <__aeabi_ddiv+0x48>
    27aa:	46cb      	mov	fp, r9
    27ac:	4641      	mov	r1, r8
    27ae:	9a03      	ldr	r2, [sp, #12]
    27b0:	9701      	str	r7, [sp, #4]
    27b2:	2a02      	cmp	r2, #2
    27b4:	d165      	bne.n	2882 <__aeabi_ddiv+0x182>
    27b6:	9b01      	ldr	r3, [sp, #4]
    27b8:	4c4a      	ldr	r4, [pc, #296]	; (28e4 <__aeabi_ddiv+0x1e4>)
    27ba:	469c      	mov	ip, r3
    27bc:	2300      	movs	r3, #0
    27be:	2200      	movs	r2, #0
    27c0:	4698      	mov	r8, r3
    27c2:	e06b      	b.n	289c <__aeabi_ddiv+0x19c>
    27c4:	0003      	movs	r3, r0
    27c6:	4333      	orrs	r3, r6
    27c8:	4699      	mov	r9, r3
    27ca:	d04e      	beq.n	286a <__aeabi_ddiv+0x16a>
    27cc:	2e00      	cmp	r6, #0
    27ce:	d100      	bne.n	27d2 <__aeabi_ddiv+0xd2>
    27d0:	e1bc      	b.n	2b4c <__aeabi_ddiv+0x44c>
    27d2:	0030      	movs	r0, r6
    27d4:	f001 f8ca 	bl	396c <__clzsi2>
    27d8:	0003      	movs	r3, r0
    27da:	3b0b      	subs	r3, #11
    27dc:	2b1c      	cmp	r3, #28
    27de:	dd00      	ble.n	27e2 <__aeabi_ddiv+0xe2>
    27e0:	e1ac      	b.n	2b3c <__aeabi_ddiv+0x43c>
    27e2:	221d      	movs	r2, #29
    27e4:	1ad3      	subs	r3, r2, r3
    27e6:	465a      	mov	r2, fp
    27e8:	0001      	movs	r1, r0
    27ea:	40da      	lsrs	r2, r3
    27ec:	3908      	subs	r1, #8
    27ee:	408e      	lsls	r6, r1
    27f0:	0013      	movs	r3, r2
    27f2:	4333      	orrs	r3, r6
    27f4:	4699      	mov	r9, r3
    27f6:	465b      	mov	r3, fp
    27f8:	408b      	lsls	r3, r1
    27fa:	4698      	mov	r8, r3
    27fc:	2300      	movs	r3, #0
    27fe:	4c3c      	ldr	r4, [pc, #240]	; (28f0 <__aeabi_ddiv+0x1f0>)
    2800:	2600      	movs	r6, #0
    2802:	1a24      	subs	r4, r4, r0
    2804:	9303      	str	r3, [sp, #12]
    2806:	e79f      	b.n	2748 <__aeabi_ddiv+0x48>
    2808:	4651      	mov	r1, sl
    280a:	465a      	mov	r2, fp
    280c:	4311      	orrs	r1, r2
    280e:	d129      	bne.n	2864 <__aeabi_ddiv+0x164>
    2810:	2200      	movs	r2, #0
    2812:	4693      	mov	fp, r2
    2814:	3202      	adds	r2, #2
    2816:	e7b1      	b.n	277c <__aeabi_ddiv+0x7c>
    2818:	4659      	mov	r1, fp
    281a:	4301      	orrs	r1, r0
    281c:	d01e      	beq.n	285c <__aeabi_ddiv+0x15c>
    281e:	465b      	mov	r3, fp
    2820:	2b00      	cmp	r3, #0
    2822:	d100      	bne.n	2826 <__aeabi_ddiv+0x126>
    2824:	e19e      	b.n	2b64 <__aeabi_ddiv+0x464>
    2826:	4658      	mov	r0, fp
    2828:	f001 f8a0 	bl	396c <__clzsi2>
    282c:	0003      	movs	r3, r0
    282e:	3b0b      	subs	r3, #11
    2830:	2b1c      	cmp	r3, #28
    2832:	dd00      	ble.n	2836 <__aeabi_ddiv+0x136>
    2834:	e18f      	b.n	2b56 <__aeabi_ddiv+0x456>
    2836:	0002      	movs	r2, r0
    2838:	4659      	mov	r1, fp
    283a:	3a08      	subs	r2, #8
    283c:	4091      	lsls	r1, r2
    283e:	468b      	mov	fp, r1
    2840:	211d      	movs	r1, #29
    2842:	1acb      	subs	r3, r1, r3
    2844:	4651      	mov	r1, sl
    2846:	40d9      	lsrs	r1, r3
    2848:	000b      	movs	r3, r1
    284a:	4659      	mov	r1, fp
    284c:	430b      	orrs	r3, r1
    284e:	4651      	mov	r1, sl
    2850:	469b      	mov	fp, r3
    2852:	4091      	lsls	r1, r2
    2854:	4b26      	ldr	r3, [pc, #152]	; (28f0 <__aeabi_ddiv+0x1f0>)
    2856:	2200      	movs	r2, #0
    2858:	1a1b      	subs	r3, r3, r0
    285a:	e78f      	b.n	277c <__aeabi_ddiv+0x7c>
    285c:	2300      	movs	r3, #0
    285e:	2201      	movs	r2, #1
    2860:	469b      	mov	fp, r3
    2862:	e78b      	b.n	277c <__aeabi_ddiv+0x7c>
    2864:	4651      	mov	r1, sl
    2866:	2203      	movs	r2, #3
    2868:	e788      	b.n	277c <__aeabi_ddiv+0x7c>
    286a:	2300      	movs	r3, #0
    286c:	4698      	mov	r8, r3
    286e:	3301      	adds	r3, #1
    2870:	2604      	movs	r6, #4
    2872:	2400      	movs	r4, #0
    2874:	9303      	str	r3, [sp, #12]
    2876:	e767      	b.n	2748 <__aeabi_ddiv+0x48>
    2878:	2303      	movs	r3, #3
    287a:	46b1      	mov	r9, r6
    287c:	9303      	str	r3, [sp, #12]
    287e:	260c      	movs	r6, #12
    2880:	e762      	b.n	2748 <__aeabi_ddiv+0x48>
    2882:	2a03      	cmp	r2, #3
    2884:	d100      	bne.n	2888 <__aeabi_ddiv+0x188>
    2886:	e25c      	b.n	2d42 <__aeabi_ddiv+0x642>
    2888:	9b01      	ldr	r3, [sp, #4]
    288a:	2a01      	cmp	r2, #1
    288c:	d000      	beq.n	2890 <__aeabi_ddiv+0x190>
    288e:	e1e4      	b.n	2c5a <__aeabi_ddiv+0x55a>
    2890:	4013      	ands	r3, r2
    2892:	469c      	mov	ip, r3
    2894:	2300      	movs	r3, #0
    2896:	2400      	movs	r4, #0
    2898:	2200      	movs	r2, #0
    289a:	4698      	mov	r8, r3
    289c:	2100      	movs	r1, #0
    289e:	0312      	lsls	r2, r2, #12
    28a0:	0b13      	lsrs	r3, r2, #12
    28a2:	0d0a      	lsrs	r2, r1, #20
    28a4:	0512      	lsls	r2, r2, #20
    28a6:	431a      	orrs	r2, r3
    28a8:	0523      	lsls	r3, r4, #20
    28aa:	4c12      	ldr	r4, [pc, #72]	; (28f4 <__aeabi_ddiv+0x1f4>)
    28ac:	4640      	mov	r0, r8
    28ae:	4022      	ands	r2, r4
    28b0:	4313      	orrs	r3, r2
    28b2:	4662      	mov	r2, ip
    28b4:	005b      	lsls	r3, r3, #1
    28b6:	07d2      	lsls	r2, r2, #31
    28b8:	085b      	lsrs	r3, r3, #1
    28ba:	4313      	orrs	r3, r2
    28bc:	0019      	movs	r1, r3
    28be:	b007      	add	sp, #28
    28c0:	bc3c      	pop	{r2, r3, r4, r5}
    28c2:	4690      	mov	r8, r2
    28c4:	4699      	mov	r9, r3
    28c6:	46a2      	mov	sl, r4
    28c8:	46ab      	mov	fp, r5
    28ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28cc:	2300      	movs	r3, #0
    28ce:	2280      	movs	r2, #128	; 0x80
    28d0:	469c      	mov	ip, r3
    28d2:	0312      	lsls	r2, r2, #12
    28d4:	4698      	mov	r8, r3
    28d6:	4c03      	ldr	r4, [pc, #12]	; (28e4 <__aeabi_ddiv+0x1e4>)
    28d8:	e7e0      	b.n	289c <__aeabi_ddiv+0x19c>
    28da:	2300      	movs	r3, #0
    28dc:	4c01      	ldr	r4, [pc, #4]	; (28e4 <__aeabi_ddiv+0x1e4>)
    28de:	2200      	movs	r2, #0
    28e0:	4698      	mov	r8, r3
    28e2:	e7db      	b.n	289c <__aeabi_ddiv+0x19c>
    28e4:	000007ff 	.word	0x000007ff
    28e8:	fffffc01 	.word	0xfffffc01
    28ec:	00004bf8 	.word	0x00004bf8
    28f0:	fffffc0d 	.word	0xfffffc0d
    28f4:	800fffff 	.word	0x800fffff
    28f8:	45d9      	cmp	r9, fp
    28fa:	d900      	bls.n	28fe <__aeabi_ddiv+0x1fe>
    28fc:	e139      	b.n	2b72 <__aeabi_ddiv+0x472>
    28fe:	d100      	bne.n	2902 <__aeabi_ddiv+0x202>
    2900:	e134      	b.n	2b6c <__aeabi_ddiv+0x46c>
    2902:	2300      	movs	r3, #0
    2904:	4646      	mov	r6, r8
    2906:	464d      	mov	r5, r9
    2908:	469a      	mov	sl, r3
    290a:	3c01      	subs	r4, #1
    290c:	465b      	mov	r3, fp
    290e:	0e0a      	lsrs	r2, r1, #24
    2910:	021b      	lsls	r3, r3, #8
    2912:	431a      	orrs	r2, r3
    2914:	020b      	lsls	r3, r1, #8
    2916:	0c17      	lsrs	r7, r2, #16
    2918:	9303      	str	r3, [sp, #12]
    291a:	0413      	lsls	r3, r2, #16
    291c:	0c1b      	lsrs	r3, r3, #16
    291e:	0039      	movs	r1, r7
    2920:	0028      	movs	r0, r5
    2922:	4690      	mov	r8, r2
    2924:	9301      	str	r3, [sp, #4]
    2926:	f7ff fa3b 	bl	1da0 <__udivsi3>
    292a:	0002      	movs	r2, r0
    292c:	9b01      	ldr	r3, [sp, #4]
    292e:	4683      	mov	fp, r0
    2930:	435a      	muls	r2, r3
    2932:	0028      	movs	r0, r5
    2934:	0039      	movs	r1, r7
    2936:	4691      	mov	r9, r2
    2938:	f7ff fab8 	bl	1eac <__aeabi_uidivmod>
    293c:	0c35      	lsrs	r5, r6, #16
    293e:	0409      	lsls	r1, r1, #16
    2940:	430d      	orrs	r5, r1
    2942:	45a9      	cmp	r9, r5
    2944:	d90d      	bls.n	2962 <__aeabi_ddiv+0x262>
    2946:	465b      	mov	r3, fp
    2948:	4445      	add	r5, r8
    294a:	3b01      	subs	r3, #1
    294c:	45a8      	cmp	r8, r5
    294e:	d900      	bls.n	2952 <__aeabi_ddiv+0x252>
    2950:	e13a      	b.n	2bc8 <__aeabi_ddiv+0x4c8>
    2952:	45a9      	cmp	r9, r5
    2954:	d800      	bhi.n	2958 <__aeabi_ddiv+0x258>
    2956:	e137      	b.n	2bc8 <__aeabi_ddiv+0x4c8>
    2958:	2302      	movs	r3, #2
    295a:	425b      	negs	r3, r3
    295c:	469c      	mov	ip, r3
    295e:	4445      	add	r5, r8
    2960:	44e3      	add	fp, ip
    2962:	464b      	mov	r3, r9
    2964:	1aeb      	subs	r3, r5, r3
    2966:	0039      	movs	r1, r7
    2968:	0018      	movs	r0, r3
    296a:	9304      	str	r3, [sp, #16]
    296c:	f7ff fa18 	bl	1da0 <__udivsi3>
    2970:	9b01      	ldr	r3, [sp, #4]
    2972:	0005      	movs	r5, r0
    2974:	4343      	muls	r3, r0
    2976:	0039      	movs	r1, r7
    2978:	9804      	ldr	r0, [sp, #16]
    297a:	4699      	mov	r9, r3
    297c:	f7ff fa96 	bl	1eac <__aeabi_uidivmod>
    2980:	0433      	lsls	r3, r6, #16
    2982:	0409      	lsls	r1, r1, #16
    2984:	0c1b      	lsrs	r3, r3, #16
    2986:	430b      	orrs	r3, r1
    2988:	4599      	cmp	r9, r3
    298a:	d909      	bls.n	29a0 <__aeabi_ddiv+0x2a0>
    298c:	4443      	add	r3, r8
    298e:	1e6a      	subs	r2, r5, #1
    2990:	4598      	cmp	r8, r3
    2992:	d900      	bls.n	2996 <__aeabi_ddiv+0x296>
    2994:	e11a      	b.n	2bcc <__aeabi_ddiv+0x4cc>
    2996:	4599      	cmp	r9, r3
    2998:	d800      	bhi.n	299c <__aeabi_ddiv+0x29c>
    299a:	e117      	b.n	2bcc <__aeabi_ddiv+0x4cc>
    299c:	3d02      	subs	r5, #2
    299e:	4443      	add	r3, r8
    29a0:	464a      	mov	r2, r9
    29a2:	1a9b      	subs	r3, r3, r2
    29a4:	465a      	mov	r2, fp
    29a6:	0412      	lsls	r2, r2, #16
    29a8:	432a      	orrs	r2, r5
    29aa:	9903      	ldr	r1, [sp, #12]
    29ac:	4693      	mov	fp, r2
    29ae:	0c10      	lsrs	r0, r2, #16
    29b0:	0c0a      	lsrs	r2, r1, #16
    29b2:	4691      	mov	r9, r2
    29b4:	0409      	lsls	r1, r1, #16
    29b6:	465a      	mov	r2, fp
    29b8:	0c09      	lsrs	r1, r1, #16
    29ba:	464e      	mov	r6, r9
    29bc:	000d      	movs	r5, r1
    29be:	0412      	lsls	r2, r2, #16
    29c0:	0c12      	lsrs	r2, r2, #16
    29c2:	4345      	muls	r5, r0
    29c4:	9105      	str	r1, [sp, #20]
    29c6:	4351      	muls	r1, r2
    29c8:	4372      	muls	r2, r6
    29ca:	4370      	muls	r0, r6
    29cc:	1952      	adds	r2, r2, r5
    29ce:	0c0e      	lsrs	r6, r1, #16
    29d0:	18b2      	adds	r2, r6, r2
    29d2:	4295      	cmp	r5, r2
    29d4:	d903      	bls.n	29de <__aeabi_ddiv+0x2de>
    29d6:	2580      	movs	r5, #128	; 0x80
    29d8:	026d      	lsls	r5, r5, #9
    29da:	46ac      	mov	ip, r5
    29dc:	4460      	add	r0, ip
    29de:	0c15      	lsrs	r5, r2, #16
    29e0:	0409      	lsls	r1, r1, #16
    29e2:	0412      	lsls	r2, r2, #16
    29e4:	0c09      	lsrs	r1, r1, #16
    29e6:	1828      	adds	r0, r5, r0
    29e8:	1852      	adds	r2, r2, r1
    29ea:	4283      	cmp	r3, r0
    29ec:	d200      	bcs.n	29f0 <__aeabi_ddiv+0x2f0>
    29ee:	e0ce      	b.n	2b8e <__aeabi_ddiv+0x48e>
    29f0:	d100      	bne.n	29f4 <__aeabi_ddiv+0x2f4>
    29f2:	e0c8      	b.n	2b86 <__aeabi_ddiv+0x486>
    29f4:	1a1d      	subs	r5, r3, r0
    29f6:	4653      	mov	r3, sl
    29f8:	1a9e      	subs	r6, r3, r2
    29fa:	45b2      	cmp	sl, r6
    29fc:	4192      	sbcs	r2, r2
    29fe:	4252      	negs	r2, r2
    2a00:	1aab      	subs	r3, r5, r2
    2a02:	469a      	mov	sl, r3
    2a04:	4598      	cmp	r8, r3
    2a06:	d100      	bne.n	2a0a <__aeabi_ddiv+0x30a>
    2a08:	e117      	b.n	2c3a <__aeabi_ddiv+0x53a>
    2a0a:	0039      	movs	r1, r7
    2a0c:	0018      	movs	r0, r3
    2a0e:	f7ff f9c7 	bl	1da0 <__udivsi3>
    2a12:	9b01      	ldr	r3, [sp, #4]
    2a14:	0005      	movs	r5, r0
    2a16:	4343      	muls	r3, r0
    2a18:	0039      	movs	r1, r7
    2a1a:	4650      	mov	r0, sl
    2a1c:	9304      	str	r3, [sp, #16]
    2a1e:	f7ff fa45 	bl	1eac <__aeabi_uidivmod>
    2a22:	9804      	ldr	r0, [sp, #16]
    2a24:	040b      	lsls	r3, r1, #16
    2a26:	0c31      	lsrs	r1, r6, #16
    2a28:	4319      	orrs	r1, r3
    2a2a:	4288      	cmp	r0, r1
    2a2c:	d909      	bls.n	2a42 <__aeabi_ddiv+0x342>
    2a2e:	4441      	add	r1, r8
    2a30:	1e6b      	subs	r3, r5, #1
    2a32:	4588      	cmp	r8, r1
    2a34:	d900      	bls.n	2a38 <__aeabi_ddiv+0x338>
    2a36:	e107      	b.n	2c48 <__aeabi_ddiv+0x548>
    2a38:	4288      	cmp	r0, r1
    2a3a:	d800      	bhi.n	2a3e <__aeabi_ddiv+0x33e>
    2a3c:	e104      	b.n	2c48 <__aeabi_ddiv+0x548>
    2a3e:	3d02      	subs	r5, #2
    2a40:	4441      	add	r1, r8
    2a42:	9b04      	ldr	r3, [sp, #16]
    2a44:	1acb      	subs	r3, r1, r3
    2a46:	0018      	movs	r0, r3
    2a48:	0039      	movs	r1, r7
    2a4a:	9304      	str	r3, [sp, #16]
    2a4c:	f7ff f9a8 	bl	1da0 <__udivsi3>
    2a50:	9b01      	ldr	r3, [sp, #4]
    2a52:	4682      	mov	sl, r0
    2a54:	4343      	muls	r3, r0
    2a56:	0039      	movs	r1, r7
    2a58:	9804      	ldr	r0, [sp, #16]
    2a5a:	9301      	str	r3, [sp, #4]
    2a5c:	f7ff fa26 	bl	1eac <__aeabi_uidivmod>
    2a60:	9801      	ldr	r0, [sp, #4]
    2a62:	040b      	lsls	r3, r1, #16
    2a64:	0431      	lsls	r1, r6, #16
    2a66:	0c09      	lsrs	r1, r1, #16
    2a68:	4319      	orrs	r1, r3
    2a6a:	4288      	cmp	r0, r1
    2a6c:	d90d      	bls.n	2a8a <__aeabi_ddiv+0x38a>
    2a6e:	4653      	mov	r3, sl
    2a70:	4441      	add	r1, r8
    2a72:	3b01      	subs	r3, #1
    2a74:	4588      	cmp	r8, r1
    2a76:	d900      	bls.n	2a7a <__aeabi_ddiv+0x37a>
    2a78:	e0e8      	b.n	2c4c <__aeabi_ddiv+0x54c>
    2a7a:	4288      	cmp	r0, r1
    2a7c:	d800      	bhi.n	2a80 <__aeabi_ddiv+0x380>
    2a7e:	e0e5      	b.n	2c4c <__aeabi_ddiv+0x54c>
    2a80:	2302      	movs	r3, #2
    2a82:	425b      	negs	r3, r3
    2a84:	469c      	mov	ip, r3
    2a86:	4441      	add	r1, r8
    2a88:	44e2      	add	sl, ip
    2a8a:	9b01      	ldr	r3, [sp, #4]
    2a8c:	042d      	lsls	r5, r5, #16
    2a8e:	1ace      	subs	r6, r1, r3
    2a90:	4651      	mov	r1, sl
    2a92:	4329      	orrs	r1, r5
    2a94:	9d05      	ldr	r5, [sp, #20]
    2a96:	464f      	mov	r7, r9
    2a98:	002a      	movs	r2, r5
    2a9a:	040b      	lsls	r3, r1, #16
    2a9c:	0c08      	lsrs	r0, r1, #16
    2a9e:	0c1b      	lsrs	r3, r3, #16
    2aa0:	435a      	muls	r2, r3
    2aa2:	4345      	muls	r5, r0
    2aa4:	437b      	muls	r3, r7
    2aa6:	4378      	muls	r0, r7
    2aa8:	195b      	adds	r3, r3, r5
    2aaa:	0c17      	lsrs	r7, r2, #16
    2aac:	18fb      	adds	r3, r7, r3
    2aae:	429d      	cmp	r5, r3
    2ab0:	d903      	bls.n	2aba <__aeabi_ddiv+0x3ba>
    2ab2:	2580      	movs	r5, #128	; 0x80
    2ab4:	026d      	lsls	r5, r5, #9
    2ab6:	46ac      	mov	ip, r5
    2ab8:	4460      	add	r0, ip
    2aba:	0c1d      	lsrs	r5, r3, #16
    2abc:	0412      	lsls	r2, r2, #16
    2abe:	041b      	lsls	r3, r3, #16
    2ac0:	0c12      	lsrs	r2, r2, #16
    2ac2:	1828      	adds	r0, r5, r0
    2ac4:	189b      	adds	r3, r3, r2
    2ac6:	4286      	cmp	r6, r0
    2ac8:	d200      	bcs.n	2acc <__aeabi_ddiv+0x3cc>
    2aca:	e093      	b.n	2bf4 <__aeabi_ddiv+0x4f4>
    2acc:	d100      	bne.n	2ad0 <__aeabi_ddiv+0x3d0>
    2ace:	e08e      	b.n	2bee <__aeabi_ddiv+0x4ee>
    2ad0:	2301      	movs	r3, #1
    2ad2:	4319      	orrs	r1, r3
    2ad4:	4ba0      	ldr	r3, [pc, #640]	; (2d58 <__aeabi_ddiv+0x658>)
    2ad6:	18e3      	adds	r3, r4, r3
    2ad8:	2b00      	cmp	r3, #0
    2ada:	dc00      	bgt.n	2ade <__aeabi_ddiv+0x3de>
    2adc:	e099      	b.n	2c12 <__aeabi_ddiv+0x512>
    2ade:	074a      	lsls	r2, r1, #29
    2ae0:	d000      	beq.n	2ae4 <__aeabi_ddiv+0x3e4>
    2ae2:	e09e      	b.n	2c22 <__aeabi_ddiv+0x522>
    2ae4:	465a      	mov	r2, fp
    2ae6:	01d2      	lsls	r2, r2, #7
    2ae8:	d506      	bpl.n	2af8 <__aeabi_ddiv+0x3f8>
    2aea:	465a      	mov	r2, fp
    2aec:	4b9b      	ldr	r3, [pc, #620]	; (2d5c <__aeabi_ddiv+0x65c>)
    2aee:	401a      	ands	r2, r3
    2af0:	2380      	movs	r3, #128	; 0x80
    2af2:	4693      	mov	fp, r2
    2af4:	00db      	lsls	r3, r3, #3
    2af6:	18e3      	adds	r3, r4, r3
    2af8:	4a99      	ldr	r2, [pc, #612]	; (2d60 <__aeabi_ddiv+0x660>)
    2afa:	4293      	cmp	r3, r2
    2afc:	dd68      	ble.n	2bd0 <__aeabi_ddiv+0x4d0>
    2afe:	2301      	movs	r3, #1
    2b00:	9a02      	ldr	r2, [sp, #8]
    2b02:	4c98      	ldr	r4, [pc, #608]	; (2d64 <__aeabi_ddiv+0x664>)
    2b04:	401a      	ands	r2, r3
    2b06:	2300      	movs	r3, #0
    2b08:	4694      	mov	ip, r2
    2b0a:	4698      	mov	r8, r3
    2b0c:	2200      	movs	r2, #0
    2b0e:	e6c5      	b.n	289c <__aeabi_ddiv+0x19c>
    2b10:	2280      	movs	r2, #128	; 0x80
    2b12:	464b      	mov	r3, r9
    2b14:	0312      	lsls	r2, r2, #12
    2b16:	4213      	tst	r3, r2
    2b18:	d00a      	beq.n	2b30 <__aeabi_ddiv+0x430>
    2b1a:	465b      	mov	r3, fp
    2b1c:	4213      	tst	r3, r2
    2b1e:	d106      	bne.n	2b2e <__aeabi_ddiv+0x42e>
    2b20:	431a      	orrs	r2, r3
    2b22:	0312      	lsls	r2, r2, #12
    2b24:	0b12      	lsrs	r2, r2, #12
    2b26:	46ac      	mov	ip, r5
    2b28:	4688      	mov	r8, r1
    2b2a:	4c8e      	ldr	r4, [pc, #568]	; (2d64 <__aeabi_ddiv+0x664>)
    2b2c:	e6b6      	b.n	289c <__aeabi_ddiv+0x19c>
    2b2e:	464b      	mov	r3, r9
    2b30:	431a      	orrs	r2, r3
    2b32:	0312      	lsls	r2, r2, #12
    2b34:	0b12      	lsrs	r2, r2, #12
    2b36:	46bc      	mov	ip, r7
    2b38:	4c8a      	ldr	r4, [pc, #552]	; (2d64 <__aeabi_ddiv+0x664>)
    2b3a:	e6af      	b.n	289c <__aeabi_ddiv+0x19c>
    2b3c:	0003      	movs	r3, r0
    2b3e:	465a      	mov	r2, fp
    2b40:	3b28      	subs	r3, #40	; 0x28
    2b42:	409a      	lsls	r2, r3
    2b44:	2300      	movs	r3, #0
    2b46:	4691      	mov	r9, r2
    2b48:	4698      	mov	r8, r3
    2b4a:	e657      	b.n	27fc <__aeabi_ddiv+0xfc>
    2b4c:	4658      	mov	r0, fp
    2b4e:	f000 ff0d 	bl	396c <__clzsi2>
    2b52:	3020      	adds	r0, #32
    2b54:	e640      	b.n	27d8 <__aeabi_ddiv+0xd8>
    2b56:	0003      	movs	r3, r0
    2b58:	4652      	mov	r2, sl
    2b5a:	3b28      	subs	r3, #40	; 0x28
    2b5c:	409a      	lsls	r2, r3
    2b5e:	2100      	movs	r1, #0
    2b60:	4693      	mov	fp, r2
    2b62:	e677      	b.n	2854 <__aeabi_ddiv+0x154>
    2b64:	f000 ff02 	bl	396c <__clzsi2>
    2b68:	3020      	adds	r0, #32
    2b6a:	e65f      	b.n	282c <__aeabi_ddiv+0x12c>
    2b6c:	4588      	cmp	r8, r1
    2b6e:	d200      	bcs.n	2b72 <__aeabi_ddiv+0x472>
    2b70:	e6c7      	b.n	2902 <__aeabi_ddiv+0x202>
    2b72:	464b      	mov	r3, r9
    2b74:	07de      	lsls	r6, r3, #31
    2b76:	085d      	lsrs	r5, r3, #1
    2b78:	4643      	mov	r3, r8
    2b7a:	085b      	lsrs	r3, r3, #1
    2b7c:	431e      	orrs	r6, r3
    2b7e:	4643      	mov	r3, r8
    2b80:	07db      	lsls	r3, r3, #31
    2b82:	469a      	mov	sl, r3
    2b84:	e6c2      	b.n	290c <__aeabi_ddiv+0x20c>
    2b86:	2500      	movs	r5, #0
    2b88:	4592      	cmp	sl, r2
    2b8a:	d300      	bcc.n	2b8e <__aeabi_ddiv+0x48e>
    2b8c:	e733      	b.n	29f6 <__aeabi_ddiv+0x2f6>
    2b8e:	9e03      	ldr	r6, [sp, #12]
    2b90:	4659      	mov	r1, fp
    2b92:	46b4      	mov	ip, r6
    2b94:	44e2      	add	sl, ip
    2b96:	45b2      	cmp	sl, r6
    2b98:	41ad      	sbcs	r5, r5
    2b9a:	426d      	negs	r5, r5
    2b9c:	4445      	add	r5, r8
    2b9e:	18eb      	adds	r3, r5, r3
    2ba0:	3901      	subs	r1, #1
    2ba2:	4598      	cmp	r8, r3
    2ba4:	d207      	bcs.n	2bb6 <__aeabi_ddiv+0x4b6>
    2ba6:	4298      	cmp	r0, r3
    2ba8:	d900      	bls.n	2bac <__aeabi_ddiv+0x4ac>
    2baa:	e07f      	b.n	2cac <__aeabi_ddiv+0x5ac>
    2bac:	d100      	bne.n	2bb0 <__aeabi_ddiv+0x4b0>
    2bae:	e0bc      	b.n	2d2a <__aeabi_ddiv+0x62a>
    2bb0:	1a1d      	subs	r5, r3, r0
    2bb2:	468b      	mov	fp, r1
    2bb4:	e71f      	b.n	29f6 <__aeabi_ddiv+0x2f6>
    2bb6:	4598      	cmp	r8, r3
    2bb8:	d1fa      	bne.n	2bb0 <__aeabi_ddiv+0x4b0>
    2bba:	9d03      	ldr	r5, [sp, #12]
    2bbc:	4555      	cmp	r5, sl
    2bbe:	d9f2      	bls.n	2ba6 <__aeabi_ddiv+0x4a6>
    2bc0:	4643      	mov	r3, r8
    2bc2:	468b      	mov	fp, r1
    2bc4:	1a1d      	subs	r5, r3, r0
    2bc6:	e716      	b.n	29f6 <__aeabi_ddiv+0x2f6>
    2bc8:	469b      	mov	fp, r3
    2bca:	e6ca      	b.n	2962 <__aeabi_ddiv+0x262>
    2bcc:	0015      	movs	r5, r2
    2bce:	e6e7      	b.n	29a0 <__aeabi_ddiv+0x2a0>
    2bd0:	465a      	mov	r2, fp
    2bd2:	08c9      	lsrs	r1, r1, #3
    2bd4:	0752      	lsls	r2, r2, #29
    2bd6:	430a      	orrs	r2, r1
    2bd8:	055b      	lsls	r3, r3, #21
    2bda:	4690      	mov	r8, r2
    2bdc:	0d5c      	lsrs	r4, r3, #21
    2bde:	465a      	mov	r2, fp
    2be0:	2301      	movs	r3, #1
    2be2:	9902      	ldr	r1, [sp, #8]
    2be4:	0252      	lsls	r2, r2, #9
    2be6:	4019      	ands	r1, r3
    2be8:	0b12      	lsrs	r2, r2, #12
    2bea:	468c      	mov	ip, r1
    2bec:	e656      	b.n	289c <__aeabi_ddiv+0x19c>
    2bee:	2b00      	cmp	r3, #0
    2bf0:	d100      	bne.n	2bf4 <__aeabi_ddiv+0x4f4>
    2bf2:	e76f      	b.n	2ad4 <__aeabi_ddiv+0x3d4>
    2bf4:	4446      	add	r6, r8
    2bf6:	1e4a      	subs	r2, r1, #1
    2bf8:	45b0      	cmp	r8, r6
    2bfa:	d929      	bls.n	2c50 <__aeabi_ddiv+0x550>
    2bfc:	0011      	movs	r1, r2
    2bfe:	4286      	cmp	r6, r0
    2c00:	d000      	beq.n	2c04 <__aeabi_ddiv+0x504>
    2c02:	e765      	b.n	2ad0 <__aeabi_ddiv+0x3d0>
    2c04:	9a03      	ldr	r2, [sp, #12]
    2c06:	4293      	cmp	r3, r2
    2c08:	d000      	beq.n	2c0c <__aeabi_ddiv+0x50c>
    2c0a:	e761      	b.n	2ad0 <__aeabi_ddiv+0x3d0>
    2c0c:	e762      	b.n	2ad4 <__aeabi_ddiv+0x3d4>
    2c0e:	2101      	movs	r1, #1
    2c10:	4249      	negs	r1, r1
    2c12:	2001      	movs	r0, #1
    2c14:	1ac2      	subs	r2, r0, r3
    2c16:	2a38      	cmp	r2, #56	; 0x38
    2c18:	dd21      	ble.n	2c5e <__aeabi_ddiv+0x55e>
    2c1a:	9b02      	ldr	r3, [sp, #8]
    2c1c:	4003      	ands	r3, r0
    2c1e:	469c      	mov	ip, r3
    2c20:	e638      	b.n	2894 <__aeabi_ddiv+0x194>
    2c22:	220f      	movs	r2, #15
    2c24:	400a      	ands	r2, r1
    2c26:	2a04      	cmp	r2, #4
    2c28:	d100      	bne.n	2c2c <__aeabi_ddiv+0x52c>
    2c2a:	e75b      	b.n	2ae4 <__aeabi_ddiv+0x3e4>
    2c2c:	000a      	movs	r2, r1
    2c2e:	1d11      	adds	r1, r2, #4
    2c30:	4291      	cmp	r1, r2
    2c32:	4192      	sbcs	r2, r2
    2c34:	4252      	negs	r2, r2
    2c36:	4493      	add	fp, r2
    2c38:	e754      	b.n	2ae4 <__aeabi_ddiv+0x3e4>
    2c3a:	4b47      	ldr	r3, [pc, #284]	; (2d58 <__aeabi_ddiv+0x658>)
    2c3c:	18e3      	adds	r3, r4, r3
    2c3e:	2b00      	cmp	r3, #0
    2c40:	dde5      	ble.n	2c0e <__aeabi_ddiv+0x50e>
    2c42:	2201      	movs	r2, #1
    2c44:	4252      	negs	r2, r2
    2c46:	e7f2      	b.n	2c2e <__aeabi_ddiv+0x52e>
    2c48:	001d      	movs	r5, r3
    2c4a:	e6fa      	b.n	2a42 <__aeabi_ddiv+0x342>
    2c4c:	469a      	mov	sl, r3
    2c4e:	e71c      	b.n	2a8a <__aeabi_ddiv+0x38a>
    2c50:	42b0      	cmp	r0, r6
    2c52:	d839      	bhi.n	2cc8 <__aeabi_ddiv+0x5c8>
    2c54:	d06e      	beq.n	2d34 <__aeabi_ddiv+0x634>
    2c56:	0011      	movs	r1, r2
    2c58:	e73a      	b.n	2ad0 <__aeabi_ddiv+0x3d0>
    2c5a:	9302      	str	r3, [sp, #8]
    2c5c:	e73a      	b.n	2ad4 <__aeabi_ddiv+0x3d4>
    2c5e:	2a1f      	cmp	r2, #31
    2c60:	dc3c      	bgt.n	2cdc <__aeabi_ddiv+0x5dc>
    2c62:	2320      	movs	r3, #32
    2c64:	1a9b      	subs	r3, r3, r2
    2c66:	000c      	movs	r4, r1
    2c68:	4658      	mov	r0, fp
    2c6a:	4099      	lsls	r1, r3
    2c6c:	4098      	lsls	r0, r3
    2c6e:	1e4b      	subs	r3, r1, #1
    2c70:	4199      	sbcs	r1, r3
    2c72:	465b      	mov	r3, fp
    2c74:	40d4      	lsrs	r4, r2
    2c76:	40d3      	lsrs	r3, r2
    2c78:	4320      	orrs	r0, r4
    2c7a:	4308      	orrs	r0, r1
    2c7c:	001a      	movs	r2, r3
    2c7e:	0743      	lsls	r3, r0, #29
    2c80:	d009      	beq.n	2c96 <__aeabi_ddiv+0x596>
    2c82:	230f      	movs	r3, #15
    2c84:	4003      	ands	r3, r0
    2c86:	2b04      	cmp	r3, #4
    2c88:	d005      	beq.n	2c96 <__aeabi_ddiv+0x596>
    2c8a:	0001      	movs	r1, r0
    2c8c:	1d08      	adds	r0, r1, #4
    2c8e:	4288      	cmp	r0, r1
    2c90:	419b      	sbcs	r3, r3
    2c92:	425b      	negs	r3, r3
    2c94:	18d2      	adds	r2, r2, r3
    2c96:	0213      	lsls	r3, r2, #8
    2c98:	d53a      	bpl.n	2d10 <__aeabi_ddiv+0x610>
    2c9a:	2301      	movs	r3, #1
    2c9c:	9a02      	ldr	r2, [sp, #8]
    2c9e:	2401      	movs	r4, #1
    2ca0:	401a      	ands	r2, r3
    2ca2:	2300      	movs	r3, #0
    2ca4:	4694      	mov	ip, r2
    2ca6:	4698      	mov	r8, r3
    2ca8:	2200      	movs	r2, #0
    2caa:	e5f7      	b.n	289c <__aeabi_ddiv+0x19c>
    2cac:	2102      	movs	r1, #2
    2cae:	4249      	negs	r1, r1
    2cb0:	468c      	mov	ip, r1
    2cb2:	9d03      	ldr	r5, [sp, #12]
    2cb4:	44e3      	add	fp, ip
    2cb6:	46ac      	mov	ip, r5
    2cb8:	44e2      	add	sl, ip
    2cba:	45aa      	cmp	sl, r5
    2cbc:	41ad      	sbcs	r5, r5
    2cbe:	426d      	negs	r5, r5
    2cc0:	4445      	add	r5, r8
    2cc2:	18ed      	adds	r5, r5, r3
    2cc4:	1a2d      	subs	r5, r5, r0
    2cc6:	e696      	b.n	29f6 <__aeabi_ddiv+0x2f6>
    2cc8:	1e8a      	subs	r2, r1, #2
    2cca:	9903      	ldr	r1, [sp, #12]
    2ccc:	004d      	lsls	r5, r1, #1
    2cce:	428d      	cmp	r5, r1
    2cd0:	4189      	sbcs	r1, r1
    2cd2:	4249      	negs	r1, r1
    2cd4:	4441      	add	r1, r8
    2cd6:	1876      	adds	r6, r6, r1
    2cd8:	9503      	str	r5, [sp, #12]
    2cda:	e78f      	b.n	2bfc <__aeabi_ddiv+0x4fc>
    2cdc:	201f      	movs	r0, #31
    2cde:	4240      	negs	r0, r0
    2ce0:	1ac3      	subs	r3, r0, r3
    2ce2:	4658      	mov	r0, fp
    2ce4:	40d8      	lsrs	r0, r3
    2ce6:	0003      	movs	r3, r0
    2ce8:	2a20      	cmp	r2, #32
    2cea:	d028      	beq.n	2d3e <__aeabi_ddiv+0x63e>
    2cec:	2040      	movs	r0, #64	; 0x40
    2cee:	465d      	mov	r5, fp
    2cf0:	1a82      	subs	r2, r0, r2
    2cf2:	4095      	lsls	r5, r2
    2cf4:	4329      	orrs	r1, r5
    2cf6:	1e4a      	subs	r2, r1, #1
    2cf8:	4191      	sbcs	r1, r2
    2cfa:	4319      	orrs	r1, r3
    2cfc:	2307      	movs	r3, #7
    2cfe:	2200      	movs	r2, #0
    2d00:	400b      	ands	r3, r1
    2d02:	d009      	beq.n	2d18 <__aeabi_ddiv+0x618>
    2d04:	230f      	movs	r3, #15
    2d06:	2200      	movs	r2, #0
    2d08:	400b      	ands	r3, r1
    2d0a:	0008      	movs	r0, r1
    2d0c:	2b04      	cmp	r3, #4
    2d0e:	d1bd      	bne.n	2c8c <__aeabi_ddiv+0x58c>
    2d10:	0001      	movs	r1, r0
    2d12:	0753      	lsls	r3, r2, #29
    2d14:	0252      	lsls	r2, r2, #9
    2d16:	0b12      	lsrs	r2, r2, #12
    2d18:	08c9      	lsrs	r1, r1, #3
    2d1a:	4319      	orrs	r1, r3
    2d1c:	2301      	movs	r3, #1
    2d1e:	4688      	mov	r8, r1
    2d20:	9902      	ldr	r1, [sp, #8]
    2d22:	2400      	movs	r4, #0
    2d24:	4019      	ands	r1, r3
    2d26:	468c      	mov	ip, r1
    2d28:	e5b8      	b.n	289c <__aeabi_ddiv+0x19c>
    2d2a:	4552      	cmp	r2, sl
    2d2c:	d8be      	bhi.n	2cac <__aeabi_ddiv+0x5ac>
    2d2e:	468b      	mov	fp, r1
    2d30:	2500      	movs	r5, #0
    2d32:	e660      	b.n	29f6 <__aeabi_ddiv+0x2f6>
    2d34:	9d03      	ldr	r5, [sp, #12]
    2d36:	429d      	cmp	r5, r3
    2d38:	d3c6      	bcc.n	2cc8 <__aeabi_ddiv+0x5c8>
    2d3a:	0011      	movs	r1, r2
    2d3c:	e762      	b.n	2c04 <__aeabi_ddiv+0x504>
    2d3e:	2500      	movs	r5, #0
    2d40:	e7d8      	b.n	2cf4 <__aeabi_ddiv+0x5f4>
    2d42:	2280      	movs	r2, #128	; 0x80
    2d44:	465b      	mov	r3, fp
    2d46:	0312      	lsls	r2, r2, #12
    2d48:	431a      	orrs	r2, r3
    2d4a:	9b01      	ldr	r3, [sp, #4]
    2d4c:	0312      	lsls	r2, r2, #12
    2d4e:	0b12      	lsrs	r2, r2, #12
    2d50:	469c      	mov	ip, r3
    2d52:	4688      	mov	r8, r1
    2d54:	4c03      	ldr	r4, [pc, #12]	; (2d64 <__aeabi_ddiv+0x664>)
    2d56:	e5a1      	b.n	289c <__aeabi_ddiv+0x19c>
    2d58:	000003ff 	.word	0x000003ff
    2d5c:	feffffff 	.word	0xfeffffff
    2d60:	000007fe 	.word	0x000007fe
    2d64:	000007ff 	.word	0x000007ff

00002d68 <__aeabi_dmul>:
    2d68:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d6a:	4657      	mov	r7, sl
    2d6c:	4645      	mov	r5, r8
    2d6e:	46de      	mov	lr, fp
    2d70:	464e      	mov	r6, r9
    2d72:	b5e0      	push	{r5, r6, r7, lr}
    2d74:	030c      	lsls	r4, r1, #12
    2d76:	4698      	mov	r8, r3
    2d78:	004e      	lsls	r6, r1, #1
    2d7a:	0b23      	lsrs	r3, r4, #12
    2d7c:	b087      	sub	sp, #28
    2d7e:	0007      	movs	r7, r0
    2d80:	4692      	mov	sl, r2
    2d82:	469b      	mov	fp, r3
    2d84:	0d76      	lsrs	r6, r6, #21
    2d86:	0fcd      	lsrs	r5, r1, #31
    2d88:	2e00      	cmp	r6, #0
    2d8a:	d06b      	beq.n	2e64 <__aeabi_dmul+0xfc>
    2d8c:	4b6d      	ldr	r3, [pc, #436]	; (2f44 <__aeabi_dmul+0x1dc>)
    2d8e:	429e      	cmp	r6, r3
    2d90:	d035      	beq.n	2dfe <__aeabi_dmul+0x96>
    2d92:	2480      	movs	r4, #128	; 0x80
    2d94:	465b      	mov	r3, fp
    2d96:	0f42      	lsrs	r2, r0, #29
    2d98:	0424      	lsls	r4, r4, #16
    2d9a:	00db      	lsls	r3, r3, #3
    2d9c:	4314      	orrs	r4, r2
    2d9e:	431c      	orrs	r4, r3
    2da0:	00c3      	lsls	r3, r0, #3
    2da2:	4699      	mov	r9, r3
    2da4:	4b68      	ldr	r3, [pc, #416]	; (2f48 <__aeabi_dmul+0x1e0>)
    2da6:	46a3      	mov	fp, r4
    2da8:	469c      	mov	ip, r3
    2daa:	2300      	movs	r3, #0
    2dac:	2700      	movs	r7, #0
    2dae:	4466      	add	r6, ip
    2db0:	9302      	str	r3, [sp, #8]
    2db2:	4643      	mov	r3, r8
    2db4:	031c      	lsls	r4, r3, #12
    2db6:	005a      	lsls	r2, r3, #1
    2db8:	0fdb      	lsrs	r3, r3, #31
    2dba:	4650      	mov	r0, sl
    2dbc:	0b24      	lsrs	r4, r4, #12
    2dbe:	0d52      	lsrs	r2, r2, #21
    2dc0:	4698      	mov	r8, r3
    2dc2:	d100      	bne.n	2dc6 <__aeabi_dmul+0x5e>
    2dc4:	e076      	b.n	2eb4 <__aeabi_dmul+0x14c>
    2dc6:	4b5f      	ldr	r3, [pc, #380]	; (2f44 <__aeabi_dmul+0x1dc>)
    2dc8:	429a      	cmp	r2, r3
    2dca:	d06d      	beq.n	2ea8 <__aeabi_dmul+0x140>
    2dcc:	2380      	movs	r3, #128	; 0x80
    2dce:	0f41      	lsrs	r1, r0, #29
    2dd0:	041b      	lsls	r3, r3, #16
    2dd2:	430b      	orrs	r3, r1
    2dd4:	495c      	ldr	r1, [pc, #368]	; (2f48 <__aeabi_dmul+0x1e0>)
    2dd6:	00e4      	lsls	r4, r4, #3
    2dd8:	468c      	mov	ip, r1
    2dda:	431c      	orrs	r4, r3
    2ddc:	00c3      	lsls	r3, r0, #3
    2dde:	2000      	movs	r0, #0
    2de0:	4462      	add	r2, ip
    2de2:	4641      	mov	r1, r8
    2de4:	18b6      	adds	r6, r6, r2
    2de6:	4069      	eors	r1, r5
    2de8:	1c72      	adds	r2, r6, #1
    2dea:	9101      	str	r1, [sp, #4]
    2dec:	4694      	mov	ip, r2
    2dee:	4307      	orrs	r7, r0
    2df0:	2f0f      	cmp	r7, #15
    2df2:	d900      	bls.n	2df6 <__aeabi_dmul+0x8e>
    2df4:	e0b0      	b.n	2f58 <__aeabi_dmul+0x1f0>
    2df6:	4a55      	ldr	r2, [pc, #340]	; (2f4c <__aeabi_dmul+0x1e4>)
    2df8:	00bf      	lsls	r7, r7, #2
    2dfa:	59d2      	ldr	r2, [r2, r7]
    2dfc:	4697      	mov	pc, r2
    2dfe:	465b      	mov	r3, fp
    2e00:	4303      	orrs	r3, r0
    2e02:	4699      	mov	r9, r3
    2e04:	d000      	beq.n	2e08 <__aeabi_dmul+0xa0>
    2e06:	e087      	b.n	2f18 <__aeabi_dmul+0x1b0>
    2e08:	2300      	movs	r3, #0
    2e0a:	469b      	mov	fp, r3
    2e0c:	3302      	adds	r3, #2
    2e0e:	2708      	movs	r7, #8
    2e10:	9302      	str	r3, [sp, #8]
    2e12:	e7ce      	b.n	2db2 <__aeabi_dmul+0x4a>
    2e14:	4642      	mov	r2, r8
    2e16:	9201      	str	r2, [sp, #4]
    2e18:	2802      	cmp	r0, #2
    2e1a:	d067      	beq.n	2eec <__aeabi_dmul+0x184>
    2e1c:	2803      	cmp	r0, #3
    2e1e:	d100      	bne.n	2e22 <__aeabi_dmul+0xba>
    2e20:	e20e      	b.n	3240 <__aeabi_dmul+0x4d8>
    2e22:	2801      	cmp	r0, #1
    2e24:	d000      	beq.n	2e28 <__aeabi_dmul+0xc0>
    2e26:	e162      	b.n	30ee <__aeabi_dmul+0x386>
    2e28:	2300      	movs	r3, #0
    2e2a:	2400      	movs	r4, #0
    2e2c:	2200      	movs	r2, #0
    2e2e:	4699      	mov	r9, r3
    2e30:	9901      	ldr	r1, [sp, #4]
    2e32:	4001      	ands	r1, r0
    2e34:	b2cd      	uxtb	r5, r1
    2e36:	2100      	movs	r1, #0
    2e38:	0312      	lsls	r2, r2, #12
    2e3a:	0d0b      	lsrs	r3, r1, #20
    2e3c:	0b12      	lsrs	r2, r2, #12
    2e3e:	051b      	lsls	r3, r3, #20
    2e40:	4313      	orrs	r3, r2
    2e42:	4a43      	ldr	r2, [pc, #268]	; (2f50 <__aeabi_dmul+0x1e8>)
    2e44:	0524      	lsls	r4, r4, #20
    2e46:	4013      	ands	r3, r2
    2e48:	431c      	orrs	r4, r3
    2e4a:	0064      	lsls	r4, r4, #1
    2e4c:	07ed      	lsls	r5, r5, #31
    2e4e:	0864      	lsrs	r4, r4, #1
    2e50:	432c      	orrs	r4, r5
    2e52:	4648      	mov	r0, r9
    2e54:	0021      	movs	r1, r4
    2e56:	b007      	add	sp, #28
    2e58:	bc3c      	pop	{r2, r3, r4, r5}
    2e5a:	4690      	mov	r8, r2
    2e5c:	4699      	mov	r9, r3
    2e5e:	46a2      	mov	sl, r4
    2e60:	46ab      	mov	fp, r5
    2e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e64:	4303      	orrs	r3, r0
    2e66:	4699      	mov	r9, r3
    2e68:	d04f      	beq.n	2f0a <__aeabi_dmul+0x1a2>
    2e6a:	465b      	mov	r3, fp
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d100      	bne.n	2e72 <__aeabi_dmul+0x10a>
    2e70:	e189      	b.n	3186 <__aeabi_dmul+0x41e>
    2e72:	4658      	mov	r0, fp
    2e74:	f000 fd7a 	bl	396c <__clzsi2>
    2e78:	0003      	movs	r3, r0
    2e7a:	3b0b      	subs	r3, #11
    2e7c:	2b1c      	cmp	r3, #28
    2e7e:	dd00      	ble.n	2e82 <__aeabi_dmul+0x11a>
    2e80:	e17a      	b.n	3178 <__aeabi_dmul+0x410>
    2e82:	221d      	movs	r2, #29
    2e84:	1ad3      	subs	r3, r2, r3
    2e86:	003a      	movs	r2, r7
    2e88:	0001      	movs	r1, r0
    2e8a:	465c      	mov	r4, fp
    2e8c:	40da      	lsrs	r2, r3
    2e8e:	3908      	subs	r1, #8
    2e90:	408c      	lsls	r4, r1
    2e92:	0013      	movs	r3, r2
    2e94:	408f      	lsls	r7, r1
    2e96:	4323      	orrs	r3, r4
    2e98:	469b      	mov	fp, r3
    2e9a:	46b9      	mov	r9, r7
    2e9c:	2300      	movs	r3, #0
    2e9e:	4e2d      	ldr	r6, [pc, #180]	; (2f54 <__aeabi_dmul+0x1ec>)
    2ea0:	2700      	movs	r7, #0
    2ea2:	1a36      	subs	r6, r6, r0
    2ea4:	9302      	str	r3, [sp, #8]
    2ea6:	e784      	b.n	2db2 <__aeabi_dmul+0x4a>
    2ea8:	4653      	mov	r3, sl
    2eaa:	4323      	orrs	r3, r4
    2eac:	d12a      	bne.n	2f04 <__aeabi_dmul+0x19c>
    2eae:	2400      	movs	r4, #0
    2eb0:	2002      	movs	r0, #2
    2eb2:	e796      	b.n	2de2 <__aeabi_dmul+0x7a>
    2eb4:	4653      	mov	r3, sl
    2eb6:	4323      	orrs	r3, r4
    2eb8:	d020      	beq.n	2efc <__aeabi_dmul+0x194>
    2eba:	2c00      	cmp	r4, #0
    2ebc:	d100      	bne.n	2ec0 <__aeabi_dmul+0x158>
    2ebe:	e157      	b.n	3170 <__aeabi_dmul+0x408>
    2ec0:	0020      	movs	r0, r4
    2ec2:	f000 fd53 	bl	396c <__clzsi2>
    2ec6:	0003      	movs	r3, r0
    2ec8:	3b0b      	subs	r3, #11
    2eca:	2b1c      	cmp	r3, #28
    2ecc:	dd00      	ble.n	2ed0 <__aeabi_dmul+0x168>
    2ece:	e149      	b.n	3164 <__aeabi_dmul+0x3fc>
    2ed0:	211d      	movs	r1, #29
    2ed2:	1acb      	subs	r3, r1, r3
    2ed4:	4651      	mov	r1, sl
    2ed6:	0002      	movs	r2, r0
    2ed8:	40d9      	lsrs	r1, r3
    2eda:	4653      	mov	r3, sl
    2edc:	3a08      	subs	r2, #8
    2ede:	4094      	lsls	r4, r2
    2ee0:	4093      	lsls	r3, r2
    2ee2:	430c      	orrs	r4, r1
    2ee4:	4a1b      	ldr	r2, [pc, #108]	; (2f54 <__aeabi_dmul+0x1ec>)
    2ee6:	1a12      	subs	r2, r2, r0
    2ee8:	2000      	movs	r0, #0
    2eea:	e77a      	b.n	2de2 <__aeabi_dmul+0x7a>
    2eec:	2501      	movs	r5, #1
    2eee:	9b01      	ldr	r3, [sp, #4]
    2ef0:	4c14      	ldr	r4, [pc, #80]	; (2f44 <__aeabi_dmul+0x1dc>)
    2ef2:	401d      	ands	r5, r3
    2ef4:	2300      	movs	r3, #0
    2ef6:	2200      	movs	r2, #0
    2ef8:	4699      	mov	r9, r3
    2efa:	e79c      	b.n	2e36 <__aeabi_dmul+0xce>
    2efc:	2400      	movs	r4, #0
    2efe:	2200      	movs	r2, #0
    2f00:	2001      	movs	r0, #1
    2f02:	e76e      	b.n	2de2 <__aeabi_dmul+0x7a>
    2f04:	4653      	mov	r3, sl
    2f06:	2003      	movs	r0, #3
    2f08:	e76b      	b.n	2de2 <__aeabi_dmul+0x7a>
    2f0a:	2300      	movs	r3, #0
    2f0c:	469b      	mov	fp, r3
    2f0e:	3301      	adds	r3, #1
    2f10:	2704      	movs	r7, #4
    2f12:	2600      	movs	r6, #0
    2f14:	9302      	str	r3, [sp, #8]
    2f16:	e74c      	b.n	2db2 <__aeabi_dmul+0x4a>
    2f18:	2303      	movs	r3, #3
    2f1a:	4681      	mov	r9, r0
    2f1c:	270c      	movs	r7, #12
    2f1e:	9302      	str	r3, [sp, #8]
    2f20:	e747      	b.n	2db2 <__aeabi_dmul+0x4a>
    2f22:	2280      	movs	r2, #128	; 0x80
    2f24:	2300      	movs	r3, #0
    2f26:	2500      	movs	r5, #0
    2f28:	0312      	lsls	r2, r2, #12
    2f2a:	4699      	mov	r9, r3
    2f2c:	4c05      	ldr	r4, [pc, #20]	; (2f44 <__aeabi_dmul+0x1dc>)
    2f2e:	e782      	b.n	2e36 <__aeabi_dmul+0xce>
    2f30:	465c      	mov	r4, fp
    2f32:	464b      	mov	r3, r9
    2f34:	9802      	ldr	r0, [sp, #8]
    2f36:	e76f      	b.n	2e18 <__aeabi_dmul+0xb0>
    2f38:	465c      	mov	r4, fp
    2f3a:	464b      	mov	r3, r9
    2f3c:	9501      	str	r5, [sp, #4]
    2f3e:	9802      	ldr	r0, [sp, #8]
    2f40:	e76a      	b.n	2e18 <__aeabi_dmul+0xb0>
    2f42:	46c0      	nop			; (mov r8, r8)
    2f44:	000007ff 	.word	0x000007ff
    2f48:	fffffc01 	.word	0xfffffc01
    2f4c:	00004c38 	.word	0x00004c38
    2f50:	800fffff 	.word	0x800fffff
    2f54:	fffffc0d 	.word	0xfffffc0d
    2f58:	464a      	mov	r2, r9
    2f5a:	4649      	mov	r1, r9
    2f5c:	0c17      	lsrs	r7, r2, #16
    2f5e:	0c1a      	lsrs	r2, r3, #16
    2f60:	041b      	lsls	r3, r3, #16
    2f62:	0c1b      	lsrs	r3, r3, #16
    2f64:	0408      	lsls	r0, r1, #16
    2f66:	0019      	movs	r1, r3
    2f68:	0c00      	lsrs	r0, r0, #16
    2f6a:	4341      	muls	r1, r0
    2f6c:	0015      	movs	r5, r2
    2f6e:	4688      	mov	r8, r1
    2f70:	0019      	movs	r1, r3
    2f72:	437d      	muls	r5, r7
    2f74:	4379      	muls	r1, r7
    2f76:	9503      	str	r5, [sp, #12]
    2f78:	4689      	mov	r9, r1
    2f7a:	0029      	movs	r1, r5
    2f7c:	0015      	movs	r5, r2
    2f7e:	4345      	muls	r5, r0
    2f80:	444d      	add	r5, r9
    2f82:	9502      	str	r5, [sp, #8]
    2f84:	4645      	mov	r5, r8
    2f86:	0c2d      	lsrs	r5, r5, #16
    2f88:	46aa      	mov	sl, r5
    2f8a:	9d02      	ldr	r5, [sp, #8]
    2f8c:	4455      	add	r5, sl
    2f8e:	45a9      	cmp	r9, r5
    2f90:	d906      	bls.n	2fa0 <__aeabi_dmul+0x238>
    2f92:	468a      	mov	sl, r1
    2f94:	2180      	movs	r1, #128	; 0x80
    2f96:	0249      	lsls	r1, r1, #9
    2f98:	4689      	mov	r9, r1
    2f9a:	44ca      	add	sl, r9
    2f9c:	4651      	mov	r1, sl
    2f9e:	9103      	str	r1, [sp, #12]
    2fa0:	0c29      	lsrs	r1, r5, #16
    2fa2:	9104      	str	r1, [sp, #16]
    2fa4:	4641      	mov	r1, r8
    2fa6:	0409      	lsls	r1, r1, #16
    2fa8:	042d      	lsls	r5, r5, #16
    2faa:	0c09      	lsrs	r1, r1, #16
    2fac:	4688      	mov	r8, r1
    2fae:	0029      	movs	r1, r5
    2fb0:	0c25      	lsrs	r5, r4, #16
    2fb2:	0424      	lsls	r4, r4, #16
    2fb4:	4441      	add	r1, r8
    2fb6:	0c24      	lsrs	r4, r4, #16
    2fb8:	9105      	str	r1, [sp, #20]
    2fba:	0021      	movs	r1, r4
    2fbc:	4341      	muls	r1, r0
    2fbe:	4688      	mov	r8, r1
    2fc0:	0021      	movs	r1, r4
    2fc2:	4379      	muls	r1, r7
    2fc4:	468a      	mov	sl, r1
    2fc6:	4368      	muls	r0, r5
    2fc8:	4641      	mov	r1, r8
    2fca:	4450      	add	r0, sl
    2fcc:	4681      	mov	r9, r0
    2fce:	0c08      	lsrs	r0, r1, #16
    2fd0:	4448      	add	r0, r9
    2fd2:	436f      	muls	r7, r5
    2fd4:	4582      	cmp	sl, r0
    2fd6:	d903      	bls.n	2fe0 <__aeabi_dmul+0x278>
    2fd8:	2180      	movs	r1, #128	; 0x80
    2fda:	0249      	lsls	r1, r1, #9
    2fdc:	4689      	mov	r9, r1
    2fde:	444f      	add	r7, r9
    2fe0:	0c01      	lsrs	r1, r0, #16
    2fe2:	4689      	mov	r9, r1
    2fe4:	0039      	movs	r1, r7
    2fe6:	4449      	add	r1, r9
    2fe8:	9102      	str	r1, [sp, #8]
    2fea:	4641      	mov	r1, r8
    2fec:	040f      	lsls	r7, r1, #16
    2fee:	9904      	ldr	r1, [sp, #16]
    2ff0:	0c3f      	lsrs	r7, r7, #16
    2ff2:	4688      	mov	r8, r1
    2ff4:	0400      	lsls	r0, r0, #16
    2ff6:	19c0      	adds	r0, r0, r7
    2ff8:	4480      	add	r8, r0
    2ffa:	4641      	mov	r1, r8
    2ffc:	9104      	str	r1, [sp, #16]
    2ffe:	4659      	mov	r1, fp
    3000:	0c0f      	lsrs	r7, r1, #16
    3002:	0409      	lsls	r1, r1, #16
    3004:	0c09      	lsrs	r1, r1, #16
    3006:	4688      	mov	r8, r1
    3008:	4359      	muls	r1, r3
    300a:	468a      	mov	sl, r1
    300c:	0039      	movs	r1, r7
    300e:	4351      	muls	r1, r2
    3010:	4689      	mov	r9, r1
    3012:	4641      	mov	r1, r8
    3014:	434a      	muls	r2, r1
    3016:	4651      	mov	r1, sl
    3018:	0c09      	lsrs	r1, r1, #16
    301a:	468b      	mov	fp, r1
    301c:	437b      	muls	r3, r7
    301e:	18d2      	adds	r2, r2, r3
    3020:	445a      	add	r2, fp
    3022:	4293      	cmp	r3, r2
    3024:	d903      	bls.n	302e <__aeabi_dmul+0x2c6>
    3026:	2380      	movs	r3, #128	; 0x80
    3028:	025b      	lsls	r3, r3, #9
    302a:	469b      	mov	fp, r3
    302c:	44d9      	add	r9, fp
    302e:	4651      	mov	r1, sl
    3030:	0409      	lsls	r1, r1, #16
    3032:	0c09      	lsrs	r1, r1, #16
    3034:	468a      	mov	sl, r1
    3036:	4641      	mov	r1, r8
    3038:	4361      	muls	r1, r4
    303a:	437c      	muls	r4, r7
    303c:	0c13      	lsrs	r3, r2, #16
    303e:	0412      	lsls	r2, r2, #16
    3040:	444b      	add	r3, r9
    3042:	4452      	add	r2, sl
    3044:	46a1      	mov	r9, r4
    3046:	468a      	mov	sl, r1
    3048:	003c      	movs	r4, r7
    304a:	4641      	mov	r1, r8
    304c:	436c      	muls	r4, r5
    304e:	434d      	muls	r5, r1
    3050:	4651      	mov	r1, sl
    3052:	444d      	add	r5, r9
    3054:	0c0f      	lsrs	r7, r1, #16
    3056:	197d      	adds	r5, r7, r5
    3058:	45a9      	cmp	r9, r5
    305a:	d903      	bls.n	3064 <__aeabi_dmul+0x2fc>
    305c:	2180      	movs	r1, #128	; 0x80
    305e:	0249      	lsls	r1, r1, #9
    3060:	4688      	mov	r8, r1
    3062:	4444      	add	r4, r8
    3064:	9f04      	ldr	r7, [sp, #16]
    3066:	9903      	ldr	r1, [sp, #12]
    3068:	46b8      	mov	r8, r7
    306a:	4441      	add	r1, r8
    306c:	468b      	mov	fp, r1
    306e:	4583      	cmp	fp, r0
    3070:	4180      	sbcs	r0, r0
    3072:	4241      	negs	r1, r0
    3074:	4688      	mov	r8, r1
    3076:	4651      	mov	r1, sl
    3078:	0408      	lsls	r0, r1, #16
    307a:	042f      	lsls	r7, r5, #16
    307c:	0c00      	lsrs	r0, r0, #16
    307e:	183f      	adds	r7, r7, r0
    3080:	4658      	mov	r0, fp
    3082:	9902      	ldr	r1, [sp, #8]
    3084:	1810      	adds	r0, r2, r0
    3086:	4689      	mov	r9, r1
    3088:	4290      	cmp	r0, r2
    308a:	4192      	sbcs	r2, r2
    308c:	444f      	add	r7, r9
    308e:	46ba      	mov	sl, r7
    3090:	4252      	negs	r2, r2
    3092:	4699      	mov	r9, r3
    3094:	4693      	mov	fp, r2
    3096:	44c2      	add	sl, r8
    3098:	44d1      	add	r9, sl
    309a:	44cb      	add	fp, r9
    309c:	428f      	cmp	r7, r1
    309e:	41bf      	sbcs	r7, r7
    30a0:	45c2      	cmp	sl, r8
    30a2:	4189      	sbcs	r1, r1
    30a4:	4599      	cmp	r9, r3
    30a6:	419b      	sbcs	r3, r3
    30a8:	4593      	cmp	fp, r2
    30aa:	4192      	sbcs	r2, r2
    30ac:	427f      	negs	r7, r7
    30ae:	4249      	negs	r1, r1
    30b0:	0c2d      	lsrs	r5, r5, #16
    30b2:	4252      	negs	r2, r2
    30b4:	430f      	orrs	r7, r1
    30b6:	425b      	negs	r3, r3
    30b8:	4313      	orrs	r3, r2
    30ba:	197f      	adds	r7, r7, r5
    30bc:	18ff      	adds	r7, r7, r3
    30be:	465b      	mov	r3, fp
    30c0:	193c      	adds	r4, r7, r4
    30c2:	0ddb      	lsrs	r3, r3, #23
    30c4:	9a05      	ldr	r2, [sp, #20]
    30c6:	0264      	lsls	r4, r4, #9
    30c8:	431c      	orrs	r4, r3
    30ca:	0243      	lsls	r3, r0, #9
    30cc:	4313      	orrs	r3, r2
    30ce:	1e5d      	subs	r5, r3, #1
    30d0:	41ab      	sbcs	r3, r5
    30d2:	465a      	mov	r2, fp
    30d4:	0dc0      	lsrs	r0, r0, #23
    30d6:	4303      	orrs	r3, r0
    30d8:	0252      	lsls	r2, r2, #9
    30da:	4313      	orrs	r3, r2
    30dc:	01e2      	lsls	r2, r4, #7
    30de:	d556      	bpl.n	318e <__aeabi_dmul+0x426>
    30e0:	2001      	movs	r0, #1
    30e2:	085a      	lsrs	r2, r3, #1
    30e4:	4003      	ands	r3, r0
    30e6:	4313      	orrs	r3, r2
    30e8:	07e2      	lsls	r2, r4, #31
    30ea:	4313      	orrs	r3, r2
    30ec:	0864      	lsrs	r4, r4, #1
    30ee:	485a      	ldr	r0, [pc, #360]	; (3258 <__aeabi_dmul+0x4f0>)
    30f0:	4460      	add	r0, ip
    30f2:	2800      	cmp	r0, #0
    30f4:	dd4d      	ble.n	3192 <__aeabi_dmul+0x42a>
    30f6:	075a      	lsls	r2, r3, #29
    30f8:	d009      	beq.n	310e <__aeabi_dmul+0x3a6>
    30fa:	220f      	movs	r2, #15
    30fc:	401a      	ands	r2, r3
    30fe:	2a04      	cmp	r2, #4
    3100:	d005      	beq.n	310e <__aeabi_dmul+0x3a6>
    3102:	1d1a      	adds	r2, r3, #4
    3104:	429a      	cmp	r2, r3
    3106:	419b      	sbcs	r3, r3
    3108:	425b      	negs	r3, r3
    310a:	18e4      	adds	r4, r4, r3
    310c:	0013      	movs	r3, r2
    310e:	01e2      	lsls	r2, r4, #7
    3110:	d504      	bpl.n	311c <__aeabi_dmul+0x3b4>
    3112:	2080      	movs	r0, #128	; 0x80
    3114:	4a51      	ldr	r2, [pc, #324]	; (325c <__aeabi_dmul+0x4f4>)
    3116:	00c0      	lsls	r0, r0, #3
    3118:	4014      	ands	r4, r2
    311a:	4460      	add	r0, ip
    311c:	4a50      	ldr	r2, [pc, #320]	; (3260 <__aeabi_dmul+0x4f8>)
    311e:	4290      	cmp	r0, r2
    3120:	dd00      	ble.n	3124 <__aeabi_dmul+0x3bc>
    3122:	e6e3      	b.n	2eec <__aeabi_dmul+0x184>
    3124:	2501      	movs	r5, #1
    3126:	08db      	lsrs	r3, r3, #3
    3128:	0762      	lsls	r2, r4, #29
    312a:	431a      	orrs	r2, r3
    312c:	0264      	lsls	r4, r4, #9
    312e:	9b01      	ldr	r3, [sp, #4]
    3130:	4691      	mov	r9, r2
    3132:	0b22      	lsrs	r2, r4, #12
    3134:	0544      	lsls	r4, r0, #21
    3136:	0d64      	lsrs	r4, r4, #21
    3138:	401d      	ands	r5, r3
    313a:	e67c      	b.n	2e36 <__aeabi_dmul+0xce>
    313c:	2280      	movs	r2, #128	; 0x80
    313e:	4659      	mov	r1, fp
    3140:	0312      	lsls	r2, r2, #12
    3142:	4211      	tst	r1, r2
    3144:	d008      	beq.n	3158 <__aeabi_dmul+0x3f0>
    3146:	4214      	tst	r4, r2
    3148:	d106      	bne.n	3158 <__aeabi_dmul+0x3f0>
    314a:	4322      	orrs	r2, r4
    314c:	0312      	lsls	r2, r2, #12
    314e:	0b12      	lsrs	r2, r2, #12
    3150:	4645      	mov	r5, r8
    3152:	4699      	mov	r9, r3
    3154:	4c43      	ldr	r4, [pc, #268]	; (3264 <__aeabi_dmul+0x4fc>)
    3156:	e66e      	b.n	2e36 <__aeabi_dmul+0xce>
    3158:	465b      	mov	r3, fp
    315a:	431a      	orrs	r2, r3
    315c:	0312      	lsls	r2, r2, #12
    315e:	0b12      	lsrs	r2, r2, #12
    3160:	4c40      	ldr	r4, [pc, #256]	; (3264 <__aeabi_dmul+0x4fc>)
    3162:	e668      	b.n	2e36 <__aeabi_dmul+0xce>
    3164:	0003      	movs	r3, r0
    3166:	4654      	mov	r4, sl
    3168:	3b28      	subs	r3, #40	; 0x28
    316a:	409c      	lsls	r4, r3
    316c:	2300      	movs	r3, #0
    316e:	e6b9      	b.n	2ee4 <__aeabi_dmul+0x17c>
    3170:	f000 fbfc 	bl	396c <__clzsi2>
    3174:	3020      	adds	r0, #32
    3176:	e6a6      	b.n	2ec6 <__aeabi_dmul+0x15e>
    3178:	0003      	movs	r3, r0
    317a:	3b28      	subs	r3, #40	; 0x28
    317c:	409f      	lsls	r7, r3
    317e:	2300      	movs	r3, #0
    3180:	46bb      	mov	fp, r7
    3182:	4699      	mov	r9, r3
    3184:	e68a      	b.n	2e9c <__aeabi_dmul+0x134>
    3186:	f000 fbf1 	bl	396c <__clzsi2>
    318a:	3020      	adds	r0, #32
    318c:	e674      	b.n	2e78 <__aeabi_dmul+0x110>
    318e:	46b4      	mov	ip, r6
    3190:	e7ad      	b.n	30ee <__aeabi_dmul+0x386>
    3192:	2501      	movs	r5, #1
    3194:	1a2a      	subs	r2, r5, r0
    3196:	2a38      	cmp	r2, #56	; 0x38
    3198:	dd06      	ble.n	31a8 <__aeabi_dmul+0x440>
    319a:	9b01      	ldr	r3, [sp, #4]
    319c:	2400      	movs	r4, #0
    319e:	401d      	ands	r5, r3
    31a0:	2300      	movs	r3, #0
    31a2:	2200      	movs	r2, #0
    31a4:	4699      	mov	r9, r3
    31a6:	e646      	b.n	2e36 <__aeabi_dmul+0xce>
    31a8:	2a1f      	cmp	r2, #31
    31aa:	dc21      	bgt.n	31f0 <__aeabi_dmul+0x488>
    31ac:	2520      	movs	r5, #32
    31ae:	0020      	movs	r0, r4
    31b0:	1aad      	subs	r5, r5, r2
    31b2:	001e      	movs	r6, r3
    31b4:	40ab      	lsls	r3, r5
    31b6:	40a8      	lsls	r0, r5
    31b8:	40d6      	lsrs	r6, r2
    31ba:	1e5d      	subs	r5, r3, #1
    31bc:	41ab      	sbcs	r3, r5
    31be:	4330      	orrs	r0, r6
    31c0:	4318      	orrs	r0, r3
    31c2:	40d4      	lsrs	r4, r2
    31c4:	0743      	lsls	r3, r0, #29
    31c6:	d009      	beq.n	31dc <__aeabi_dmul+0x474>
    31c8:	230f      	movs	r3, #15
    31ca:	4003      	ands	r3, r0
    31cc:	2b04      	cmp	r3, #4
    31ce:	d005      	beq.n	31dc <__aeabi_dmul+0x474>
    31d0:	0003      	movs	r3, r0
    31d2:	1d18      	adds	r0, r3, #4
    31d4:	4298      	cmp	r0, r3
    31d6:	419b      	sbcs	r3, r3
    31d8:	425b      	negs	r3, r3
    31da:	18e4      	adds	r4, r4, r3
    31dc:	0223      	lsls	r3, r4, #8
    31de:	d521      	bpl.n	3224 <__aeabi_dmul+0x4bc>
    31e0:	2501      	movs	r5, #1
    31e2:	9b01      	ldr	r3, [sp, #4]
    31e4:	2401      	movs	r4, #1
    31e6:	401d      	ands	r5, r3
    31e8:	2300      	movs	r3, #0
    31ea:	2200      	movs	r2, #0
    31ec:	4699      	mov	r9, r3
    31ee:	e622      	b.n	2e36 <__aeabi_dmul+0xce>
    31f0:	251f      	movs	r5, #31
    31f2:	0021      	movs	r1, r4
    31f4:	426d      	negs	r5, r5
    31f6:	1a28      	subs	r0, r5, r0
    31f8:	40c1      	lsrs	r1, r0
    31fa:	0008      	movs	r0, r1
    31fc:	2a20      	cmp	r2, #32
    31fe:	d01d      	beq.n	323c <__aeabi_dmul+0x4d4>
    3200:	355f      	adds	r5, #95	; 0x5f
    3202:	1aaa      	subs	r2, r5, r2
    3204:	4094      	lsls	r4, r2
    3206:	4323      	orrs	r3, r4
    3208:	1e5c      	subs	r4, r3, #1
    320a:	41a3      	sbcs	r3, r4
    320c:	2507      	movs	r5, #7
    320e:	4303      	orrs	r3, r0
    3210:	401d      	ands	r5, r3
    3212:	2200      	movs	r2, #0
    3214:	2d00      	cmp	r5, #0
    3216:	d009      	beq.n	322c <__aeabi_dmul+0x4c4>
    3218:	220f      	movs	r2, #15
    321a:	2400      	movs	r4, #0
    321c:	401a      	ands	r2, r3
    321e:	0018      	movs	r0, r3
    3220:	2a04      	cmp	r2, #4
    3222:	d1d6      	bne.n	31d2 <__aeabi_dmul+0x46a>
    3224:	0003      	movs	r3, r0
    3226:	0765      	lsls	r5, r4, #29
    3228:	0264      	lsls	r4, r4, #9
    322a:	0b22      	lsrs	r2, r4, #12
    322c:	08db      	lsrs	r3, r3, #3
    322e:	432b      	orrs	r3, r5
    3230:	2501      	movs	r5, #1
    3232:	4699      	mov	r9, r3
    3234:	9b01      	ldr	r3, [sp, #4]
    3236:	2400      	movs	r4, #0
    3238:	401d      	ands	r5, r3
    323a:	e5fc      	b.n	2e36 <__aeabi_dmul+0xce>
    323c:	2400      	movs	r4, #0
    323e:	e7e2      	b.n	3206 <__aeabi_dmul+0x49e>
    3240:	2280      	movs	r2, #128	; 0x80
    3242:	2501      	movs	r5, #1
    3244:	0312      	lsls	r2, r2, #12
    3246:	4322      	orrs	r2, r4
    3248:	9901      	ldr	r1, [sp, #4]
    324a:	0312      	lsls	r2, r2, #12
    324c:	0b12      	lsrs	r2, r2, #12
    324e:	400d      	ands	r5, r1
    3250:	4699      	mov	r9, r3
    3252:	4c04      	ldr	r4, [pc, #16]	; (3264 <__aeabi_dmul+0x4fc>)
    3254:	e5ef      	b.n	2e36 <__aeabi_dmul+0xce>
    3256:	46c0      	nop			; (mov r8, r8)
    3258:	000003ff 	.word	0x000003ff
    325c:	feffffff 	.word	0xfeffffff
    3260:	000007fe 	.word	0x000007fe
    3264:	000007ff 	.word	0x000007ff

00003268 <__aeabi_dsub>:
    3268:	b5f0      	push	{r4, r5, r6, r7, lr}
    326a:	4646      	mov	r6, r8
    326c:	46d6      	mov	lr, sl
    326e:	464f      	mov	r7, r9
    3270:	030c      	lsls	r4, r1, #12
    3272:	b5c0      	push	{r6, r7, lr}
    3274:	0fcd      	lsrs	r5, r1, #31
    3276:	004e      	lsls	r6, r1, #1
    3278:	0a61      	lsrs	r1, r4, #9
    327a:	0f44      	lsrs	r4, r0, #29
    327c:	430c      	orrs	r4, r1
    327e:	00c1      	lsls	r1, r0, #3
    3280:	0058      	lsls	r0, r3, #1
    3282:	0d40      	lsrs	r0, r0, #21
    3284:	4684      	mov	ip, r0
    3286:	468a      	mov	sl, r1
    3288:	000f      	movs	r7, r1
    328a:	0319      	lsls	r1, r3, #12
    328c:	0f50      	lsrs	r0, r2, #29
    328e:	0a49      	lsrs	r1, r1, #9
    3290:	4301      	orrs	r1, r0
    3292:	48c6      	ldr	r0, [pc, #792]	; (35ac <__aeabi_dsub+0x344>)
    3294:	0d76      	lsrs	r6, r6, #21
    3296:	46a8      	mov	r8, r5
    3298:	0fdb      	lsrs	r3, r3, #31
    329a:	00d2      	lsls	r2, r2, #3
    329c:	4584      	cmp	ip, r0
    329e:	d100      	bne.n	32a2 <__aeabi_dsub+0x3a>
    32a0:	e0d8      	b.n	3454 <__aeabi_dsub+0x1ec>
    32a2:	2001      	movs	r0, #1
    32a4:	4043      	eors	r3, r0
    32a6:	42ab      	cmp	r3, r5
    32a8:	d100      	bne.n	32ac <__aeabi_dsub+0x44>
    32aa:	e0a6      	b.n	33fa <__aeabi_dsub+0x192>
    32ac:	4660      	mov	r0, ip
    32ae:	1a35      	subs	r5, r6, r0
    32b0:	2d00      	cmp	r5, #0
    32b2:	dc00      	bgt.n	32b6 <__aeabi_dsub+0x4e>
    32b4:	e105      	b.n	34c2 <__aeabi_dsub+0x25a>
    32b6:	2800      	cmp	r0, #0
    32b8:	d110      	bne.n	32dc <__aeabi_dsub+0x74>
    32ba:	000b      	movs	r3, r1
    32bc:	4313      	orrs	r3, r2
    32be:	d100      	bne.n	32c2 <__aeabi_dsub+0x5a>
    32c0:	e0d7      	b.n	3472 <__aeabi_dsub+0x20a>
    32c2:	1e6b      	subs	r3, r5, #1
    32c4:	2b00      	cmp	r3, #0
    32c6:	d000      	beq.n	32ca <__aeabi_dsub+0x62>
    32c8:	e14b      	b.n	3562 <__aeabi_dsub+0x2fa>
    32ca:	4653      	mov	r3, sl
    32cc:	1a9f      	subs	r7, r3, r2
    32ce:	45ba      	cmp	sl, r7
    32d0:	4180      	sbcs	r0, r0
    32d2:	1a64      	subs	r4, r4, r1
    32d4:	4240      	negs	r0, r0
    32d6:	1a24      	subs	r4, r4, r0
    32d8:	2601      	movs	r6, #1
    32da:	e01e      	b.n	331a <__aeabi_dsub+0xb2>
    32dc:	4bb3      	ldr	r3, [pc, #716]	; (35ac <__aeabi_dsub+0x344>)
    32de:	429e      	cmp	r6, r3
    32e0:	d048      	beq.n	3374 <__aeabi_dsub+0x10c>
    32e2:	2380      	movs	r3, #128	; 0x80
    32e4:	041b      	lsls	r3, r3, #16
    32e6:	4319      	orrs	r1, r3
    32e8:	2d38      	cmp	r5, #56	; 0x38
    32ea:	dd00      	ble.n	32ee <__aeabi_dsub+0x86>
    32ec:	e119      	b.n	3522 <__aeabi_dsub+0x2ba>
    32ee:	2d1f      	cmp	r5, #31
    32f0:	dd00      	ble.n	32f4 <__aeabi_dsub+0x8c>
    32f2:	e14c      	b.n	358e <__aeabi_dsub+0x326>
    32f4:	2320      	movs	r3, #32
    32f6:	000f      	movs	r7, r1
    32f8:	1b5b      	subs	r3, r3, r5
    32fa:	0010      	movs	r0, r2
    32fc:	409a      	lsls	r2, r3
    32fe:	409f      	lsls	r7, r3
    3300:	40e8      	lsrs	r0, r5
    3302:	1e53      	subs	r3, r2, #1
    3304:	419a      	sbcs	r2, r3
    3306:	40e9      	lsrs	r1, r5
    3308:	4307      	orrs	r7, r0
    330a:	4317      	orrs	r7, r2
    330c:	4653      	mov	r3, sl
    330e:	1bdf      	subs	r7, r3, r7
    3310:	1a61      	subs	r1, r4, r1
    3312:	45ba      	cmp	sl, r7
    3314:	41a4      	sbcs	r4, r4
    3316:	4264      	negs	r4, r4
    3318:	1b0c      	subs	r4, r1, r4
    331a:	0223      	lsls	r3, r4, #8
    331c:	d400      	bmi.n	3320 <__aeabi_dsub+0xb8>
    331e:	e0c5      	b.n	34ac <__aeabi_dsub+0x244>
    3320:	0264      	lsls	r4, r4, #9
    3322:	0a65      	lsrs	r5, r4, #9
    3324:	2d00      	cmp	r5, #0
    3326:	d100      	bne.n	332a <__aeabi_dsub+0xc2>
    3328:	e0f6      	b.n	3518 <__aeabi_dsub+0x2b0>
    332a:	0028      	movs	r0, r5
    332c:	f000 fb1e 	bl	396c <__clzsi2>
    3330:	0003      	movs	r3, r0
    3332:	3b08      	subs	r3, #8
    3334:	2b1f      	cmp	r3, #31
    3336:	dd00      	ble.n	333a <__aeabi_dsub+0xd2>
    3338:	e0e9      	b.n	350e <__aeabi_dsub+0x2a6>
    333a:	2220      	movs	r2, #32
    333c:	003c      	movs	r4, r7
    333e:	1ad2      	subs	r2, r2, r3
    3340:	409d      	lsls	r5, r3
    3342:	40d4      	lsrs	r4, r2
    3344:	409f      	lsls	r7, r3
    3346:	4325      	orrs	r5, r4
    3348:	429e      	cmp	r6, r3
    334a:	dd00      	ble.n	334e <__aeabi_dsub+0xe6>
    334c:	e0db      	b.n	3506 <__aeabi_dsub+0x29e>
    334e:	1b9e      	subs	r6, r3, r6
    3350:	1c73      	adds	r3, r6, #1
    3352:	2b1f      	cmp	r3, #31
    3354:	dd00      	ble.n	3358 <__aeabi_dsub+0xf0>
    3356:	e10a      	b.n	356e <__aeabi_dsub+0x306>
    3358:	2220      	movs	r2, #32
    335a:	0038      	movs	r0, r7
    335c:	1ad2      	subs	r2, r2, r3
    335e:	0029      	movs	r1, r5
    3360:	4097      	lsls	r7, r2
    3362:	002c      	movs	r4, r5
    3364:	4091      	lsls	r1, r2
    3366:	40d8      	lsrs	r0, r3
    3368:	1e7a      	subs	r2, r7, #1
    336a:	4197      	sbcs	r7, r2
    336c:	40dc      	lsrs	r4, r3
    336e:	2600      	movs	r6, #0
    3370:	4301      	orrs	r1, r0
    3372:	430f      	orrs	r7, r1
    3374:	077b      	lsls	r3, r7, #29
    3376:	d009      	beq.n	338c <__aeabi_dsub+0x124>
    3378:	230f      	movs	r3, #15
    337a:	403b      	ands	r3, r7
    337c:	2b04      	cmp	r3, #4
    337e:	d005      	beq.n	338c <__aeabi_dsub+0x124>
    3380:	1d3b      	adds	r3, r7, #4
    3382:	42bb      	cmp	r3, r7
    3384:	41bf      	sbcs	r7, r7
    3386:	427f      	negs	r7, r7
    3388:	19e4      	adds	r4, r4, r7
    338a:	001f      	movs	r7, r3
    338c:	0223      	lsls	r3, r4, #8
    338e:	d525      	bpl.n	33dc <__aeabi_dsub+0x174>
    3390:	4b86      	ldr	r3, [pc, #536]	; (35ac <__aeabi_dsub+0x344>)
    3392:	3601      	adds	r6, #1
    3394:	429e      	cmp	r6, r3
    3396:	d100      	bne.n	339a <__aeabi_dsub+0x132>
    3398:	e0af      	b.n	34fa <__aeabi_dsub+0x292>
    339a:	4b85      	ldr	r3, [pc, #532]	; (35b0 <__aeabi_dsub+0x348>)
    339c:	2501      	movs	r5, #1
    339e:	401c      	ands	r4, r3
    33a0:	4643      	mov	r3, r8
    33a2:	0762      	lsls	r2, r4, #29
    33a4:	08ff      	lsrs	r7, r7, #3
    33a6:	0264      	lsls	r4, r4, #9
    33a8:	0576      	lsls	r6, r6, #21
    33aa:	4317      	orrs	r7, r2
    33ac:	0b24      	lsrs	r4, r4, #12
    33ae:	0d76      	lsrs	r6, r6, #21
    33b0:	401d      	ands	r5, r3
    33b2:	2100      	movs	r1, #0
    33b4:	0324      	lsls	r4, r4, #12
    33b6:	0b23      	lsrs	r3, r4, #12
    33b8:	0d0c      	lsrs	r4, r1, #20
    33ba:	4a7e      	ldr	r2, [pc, #504]	; (35b4 <__aeabi_dsub+0x34c>)
    33bc:	0524      	lsls	r4, r4, #20
    33be:	431c      	orrs	r4, r3
    33c0:	4014      	ands	r4, r2
    33c2:	0533      	lsls	r3, r6, #20
    33c4:	4323      	orrs	r3, r4
    33c6:	005b      	lsls	r3, r3, #1
    33c8:	07ed      	lsls	r5, r5, #31
    33ca:	085b      	lsrs	r3, r3, #1
    33cc:	432b      	orrs	r3, r5
    33ce:	0038      	movs	r0, r7
    33d0:	0019      	movs	r1, r3
    33d2:	bc1c      	pop	{r2, r3, r4}
    33d4:	4690      	mov	r8, r2
    33d6:	4699      	mov	r9, r3
    33d8:	46a2      	mov	sl, r4
    33da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33dc:	2501      	movs	r5, #1
    33de:	4643      	mov	r3, r8
    33e0:	0762      	lsls	r2, r4, #29
    33e2:	08ff      	lsrs	r7, r7, #3
    33e4:	4317      	orrs	r7, r2
    33e6:	08e4      	lsrs	r4, r4, #3
    33e8:	401d      	ands	r5, r3
    33ea:	4b70      	ldr	r3, [pc, #448]	; (35ac <__aeabi_dsub+0x344>)
    33ec:	429e      	cmp	r6, r3
    33ee:	d036      	beq.n	345e <__aeabi_dsub+0x1f6>
    33f0:	0324      	lsls	r4, r4, #12
    33f2:	0576      	lsls	r6, r6, #21
    33f4:	0b24      	lsrs	r4, r4, #12
    33f6:	0d76      	lsrs	r6, r6, #21
    33f8:	e7db      	b.n	33b2 <__aeabi_dsub+0x14a>
    33fa:	4663      	mov	r3, ip
    33fc:	1af3      	subs	r3, r6, r3
    33fe:	2b00      	cmp	r3, #0
    3400:	dc00      	bgt.n	3404 <__aeabi_dsub+0x19c>
    3402:	e094      	b.n	352e <__aeabi_dsub+0x2c6>
    3404:	4660      	mov	r0, ip
    3406:	2800      	cmp	r0, #0
    3408:	d035      	beq.n	3476 <__aeabi_dsub+0x20e>
    340a:	4868      	ldr	r0, [pc, #416]	; (35ac <__aeabi_dsub+0x344>)
    340c:	4286      	cmp	r6, r0
    340e:	d0b1      	beq.n	3374 <__aeabi_dsub+0x10c>
    3410:	2780      	movs	r7, #128	; 0x80
    3412:	043f      	lsls	r7, r7, #16
    3414:	4339      	orrs	r1, r7
    3416:	2b38      	cmp	r3, #56	; 0x38
    3418:	dc00      	bgt.n	341c <__aeabi_dsub+0x1b4>
    341a:	e0fd      	b.n	3618 <__aeabi_dsub+0x3b0>
    341c:	430a      	orrs	r2, r1
    341e:	0017      	movs	r7, r2
    3420:	2100      	movs	r1, #0
    3422:	1e7a      	subs	r2, r7, #1
    3424:	4197      	sbcs	r7, r2
    3426:	4457      	add	r7, sl
    3428:	4557      	cmp	r7, sl
    342a:	4180      	sbcs	r0, r0
    342c:	1909      	adds	r1, r1, r4
    342e:	4244      	negs	r4, r0
    3430:	190c      	adds	r4, r1, r4
    3432:	0223      	lsls	r3, r4, #8
    3434:	d53a      	bpl.n	34ac <__aeabi_dsub+0x244>
    3436:	4b5d      	ldr	r3, [pc, #372]	; (35ac <__aeabi_dsub+0x344>)
    3438:	3601      	adds	r6, #1
    343a:	429e      	cmp	r6, r3
    343c:	d100      	bne.n	3440 <__aeabi_dsub+0x1d8>
    343e:	e14b      	b.n	36d8 <__aeabi_dsub+0x470>
    3440:	2201      	movs	r2, #1
    3442:	4b5b      	ldr	r3, [pc, #364]	; (35b0 <__aeabi_dsub+0x348>)
    3444:	401c      	ands	r4, r3
    3446:	087b      	lsrs	r3, r7, #1
    3448:	4017      	ands	r7, r2
    344a:	431f      	orrs	r7, r3
    344c:	07e2      	lsls	r2, r4, #31
    344e:	4317      	orrs	r7, r2
    3450:	0864      	lsrs	r4, r4, #1
    3452:	e78f      	b.n	3374 <__aeabi_dsub+0x10c>
    3454:	0008      	movs	r0, r1
    3456:	4310      	orrs	r0, r2
    3458:	d000      	beq.n	345c <__aeabi_dsub+0x1f4>
    345a:	e724      	b.n	32a6 <__aeabi_dsub+0x3e>
    345c:	e721      	b.n	32a2 <__aeabi_dsub+0x3a>
    345e:	0023      	movs	r3, r4
    3460:	433b      	orrs	r3, r7
    3462:	d100      	bne.n	3466 <__aeabi_dsub+0x1fe>
    3464:	e1b9      	b.n	37da <__aeabi_dsub+0x572>
    3466:	2280      	movs	r2, #128	; 0x80
    3468:	0312      	lsls	r2, r2, #12
    346a:	4314      	orrs	r4, r2
    346c:	0324      	lsls	r4, r4, #12
    346e:	0b24      	lsrs	r4, r4, #12
    3470:	e79f      	b.n	33b2 <__aeabi_dsub+0x14a>
    3472:	002e      	movs	r6, r5
    3474:	e77e      	b.n	3374 <__aeabi_dsub+0x10c>
    3476:	0008      	movs	r0, r1
    3478:	4310      	orrs	r0, r2
    347a:	d100      	bne.n	347e <__aeabi_dsub+0x216>
    347c:	e0ca      	b.n	3614 <__aeabi_dsub+0x3ac>
    347e:	1e58      	subs	r0, r3, #1
    3480:	4684      	mov	ip, r0
    3482:	2800      	cmp	r0, #0
    3484:	d000      	beq.n	3488 <__aeabi_dsub+0x220>
    3486:	e0e7      	b.n	3658 <__aeabi_dsub+0x3f0>
    3488:	4452      	add	r2, sl
    348a:	4552      	cmp	r2, sl
    348c:	4180      	sbcs	r0, r0
    348e:	1864      	adds	r4, r4, r1
    3490:	4240      	negs	r0, r0
    3492:	1824      	adds	r4, r4, r0
    3494:	0017      	movs	r7, r2
    3496:	2601      	movs	r6, #1
    3498:	0223      	lsls	r3, r4, #8
    349a:	d507      	bpl.n	34ac <__aeabi_dsub+0x244>
    349c:	2602      	movs	r6, #2
    349e:	e7cf      	b.n	3440 <__aeabi_dsub+0x1d8>
    34a0:	4664      	mov	r4, ip
    34a2:	432c      	orrs	r4, r5
    34a4:	d100      	bne.n	34a8 <__aeabi_dsub+0x240>
    34a6:	e1b3      	b.n	3810 <__aeabi_dsub+0x5a8>
    34a8:	002c      	movs	r4, r5
    34aa:	4667      	mov	r7, ip
    34ac:	077b      	lsls	r3, r7, #29
    34ae:	d000      	beq.n	34b2 <__aeabi_dsub+0x24a>
    34b0:	e762      	b.n	3378 <__aeabi_dsub+0x110>
    34b2:	0763      	lsls	r3, r4, #29
    34b4:	08ff      	lsrs	r7, r7, #3
    34b6:	431f      	orrs	r7, r3
    34b8:	2501      	movs	r5, #1
    34ba:	4643      	mov	r3, r8
    34bc:	08e4      	lsrs	r4, r4, #3
    34be:	401d      	ands	r5, r3
    34c0:	e793      	b.n	33ea <__aeabi_dsub+0x182>
    34c2:	2d00      	cmp	r5, #0
    34c4:	d178      	bne.n	35b8 <__aeabi_dsub+0x350>
    34c6:	1c75      	adds	r5, r6, #1
    34c8:	056d      	lsls	r5, r5, #21
    34ca:	0d6d      	lsrs	r5, r5, #21
    34cc:	2d01      	cmp	r5, #1
    34ce:	dc00      	bgt.n	34d2 <__aeabi_dsub+0x26a>
    34d0:	e0f2      	b.n	36b8 <__aeabi_dsub+0x450>
    34d2:	4650      	mov	r0, sl
    34d4:	1a80      	subs	r0, r0, r2
    34d6:	4582      	cmp	sl, r0
    34d8:	41bf      	sbcs	r7, r7
    34da:	1a65      	subs	r5, r4, r1
    34dc:	427f      	negs	r7, r7
    34de:	1bed      	subs	r5, r5, r7
    34e0:	4684      	mov	ip, r0
    34e2:	0228      	lsls	r0, r5, #8
    34e4:	d400      	bmi.n	34e8 <__aeabi_dsub+0x280>
    34e6:	e08c      	b.n	3602 <__aeabi_dsub+0x39a>
    34e8:	4650      	mov	r0, sl
    34ea:	1a17      	subs	r7, r2, r0
    34ec:	42ba      	cmp	r2, r7
    34ee:	4192      	sbcs	r2, r2
    34f0:	1b0c      	subs	r4, r1, r4
    34f2:	4255      	negs	r5, r2
    34f4:	1b65      	subs	r5, r4, r5
    34f6:	4698      	mov	r8, r3
    34f8:	e714      	b.n	3324 <__aeabi_dsub+0xbc>
    34fa:	2501      	movs	r5, #1
    34fc:	4643      	mov	r3, r8
    34fe:	2400      	movs	r4, #0
    3500:	401d      	ands	r5, r3
    3502:	2700      	movs	r7, #0
    3504:	e755      	b.n	33b2 <__aeabi_dsub+0x14a>
    3506:	4c2a      	ldr	r4, [pc, #168]	; (35b0 <__aeabi_dsub+0x348>)
    3508:	1af6      	subs	r6, r6, r3
    350a:	402c      	ands	r4, r5
    350c:	e732      	b.n	3374 <__aeabi_dsub+0x10c>
    350e:	003d      	movs	r5, r7
    3510:	3828      	subs	r0, #40	; 0x28
    3512:	4085      	lsls	r5, r0
    3514:	2700      	movs	r7, #0
    3516:	e717      	b.n	3348 <__aeabi_dsub+0xe0>
    3518:	0038      	movs	r0, r7
    351a:	f000 fa27 	bl	396c <__clzsi2>
    351e:	3020      	adds	r0, #32
    3520:	e706      	b.n	3330 <__aeabi_dsub+0xc8>
    3522:	430a      	orrs	r2, r1
    3524:	0017      	movs	r7, r2
    3526:	2100      	movs	r1, #0
    3528:	1e7a      	subs	r2, r7, #1
    352a:	4197      	sbcs	r7, r2
    352c:	e6ee      	b.n	330c <__aeabi_dsub+0xa4>
    352e:	2b00      	cmp	r3, #0
    3530:	d000      	beq.n	3534 <__aeabi_dsub+0x2cc>
    3532:	e0e5      	b.n	3700 <__aeabi_dsub+0x498>
    3534:	1c73      	adds	r3, r6, #1
    3536:	469c      	mov	ip, r3
    3538:	055b      	lsls	r3, r3, #21
    353a:	0d5b      	lsrs	r3, r3, #21
    353c:	2b01      	cmp	r3, #1
    353e:	dc00      	bgt.n	3542 <__aeabi_dsub+0x2da>
    3540:	e09f      	b.n	3682 <__aeabi_dsub+0x41a>
    3542:	4b1a      	ldr	r3, [pc, #104]	; (35ac <__aeabi_dsub+0x344>)
    3544:	459c      	cmp	ip, r3
    3546:	d100      	bne.n	354a <__aeabi_dsub+0x2e2>
    3548:	e0c5      	b.n	36d6 <__aeabi_dsub+0x46e>
    354a:	4452      	add	r2, sl
    354c:	4552      	cmp	r2, sl
    354e:	4180      	sbcs	r0, r0
    3550:	1864      	adds	r4, r4, r1
    3552:	4240      	negs	r0, r0
    3554:	1824      	adds	r4, r4, r0
    3556:	07e7      	lsls	r7, r4, #31
    3558:	0852      	lsrs	r2, r2, #1
    355a:	4317      	orrs	r7, r2
    355c:	0864      	lsrs	r4, r4, #1
    355e:	4666      	mov	r6, ip
    3560:	e708      	b.n	3374 <__aeabi_dsub+0x10c>
    3562:	4812      	ldr	r0, [pc, #72]	; (35ac <__aeabi_dsub+0x344>)
    3564:	4285      	cmp	r5, r0
    3566:	d100      	bne.n	356a <__aeabi_dsub+0x302>
    3568:	e085      	b.n	3676 <__aeabi_dsub+0x40e>
    356a:	001d      	movs	r5, r3
    356c:	e6bc      	b.n	32e8 <__aeabi_dsub+0x80>
    356e:	0029      	movs	r1, r5
    3570:	3e1f      	subs	r6, #31
    3572:	40f1      	lsrs	r1, r6
    3574:	2b20      	cmp	r3, #32
    3576:	d100      	bne.n	357a <__aeabi_dsub+0x312>
    3578:	e07f      	b.n	367a <__aeabi_dsub+0x412>
    357a:	2240      	movs	r2, #64	; 0x40
    357c:	1ad3      	subs	r3, r2, r3
    357e:	409d      	lsls	r5, r3
    3580:	432f      	orrs	r7, r5
    3582:	1e7d      	subs	r5, r7, #1
    3584:	41af      	sbcs	r7, r5
    3586:	2400      	movs	r4, #0
    3588:	430f      	orrs	r7, r1
    358a:	2600      	movs	r6, #0
    358c:	e78e      	b.n	34ac <__aeabi_dsub+0x244>
    358e:	002b      	movs	r3, r5
    3590:	000f      	movs	r7, r1
    3592:	3b20      	subs	r3, #32
    3594:	40df      	lsrs	r7, r3
    3596:	2d20      	cmp	r5, #32
    3598:	d071      	beq.n	367e <__aeabi_dsub+0x416>
    359a:	2340      	movs	r3, #64	; 0x40
    359c:	1b5d      	subs	r5, r3, r5
    359e:	40a9      	lsls	r1, r5
    35a0:	430a      	orrs	r2, r1
    35a2:	1e51      	subs	r1, r2, #1
    35a4:	418a      	sbcs	r2, r1
    35a6:	2100      	movs	r1, #0
    35a8:	4317      	orrs	r7, r2
    35aa:	e6af      	b.n	330c <__aeabi_dsub+0xa4>
    35ac:	000007ff 	.word	0x000007ff
    35b0:	ff7fffff 	.word	0xff7fffff
    35b4:	800fffff 	.word	0x800fffff
    35b8:	2e00      	cmp	r6, #0
    35ba:	d03e      	beq.n	363a <__aeabi_dsub+0x3d2>
    35bc:	4eb3      	ldr	r6, [pc, #716]	; (388c <__aeabi_dsub+0x624>)
    35be:	45b4      	cmp	ip, r6
    35c0:	d045      	beq.n	364e <__aeabi_dsub+0x3e6>
    35c2:	2680      	movs	r6, #128	; 0x80
    35c4:	0436      	lsls	r6, r6, #16
    35c6:	426d      	negs	r5, r5
    35c8:	4334      	orrs	r4, r6
    35ca:	2d38      	cmp	r5, #56	; 0x38
    35cc:	dd00      	ble.n	35d0 <__aeabi_dsub+0x368>
    35ce:	e0a8      	b.n	3722 <__aeabi_dsub+0x4ba>
    35d0:	2d1f      	cmp	r5, #31
    35d2:	dd00      	ble.n	35d6 <__aeabi_dsub+0x36e>
    35d4:	e11f      	b.n	3816 <__aeabi_dsub+0x5ae>
    35d6:	2620      	movs	r6, #32
    35d8:	0027      	movs	r7, r4
    35da:	4650      	mov	r0, sl
    35dc:	1b76      	subs	r6, r6, r5
    35de:	40b7      	lsls	r7, r6
    35e0:	40e8      	lsrs	r0, r5
    35e2:	4307      	orrs	r7, r0
    35e4:	4650      	mov	r0, sl
    35e6:	40b0      	lsls	r0, r6
    35e8:	1e46      	subs	r6, r0, #1
    35ea:	41b0      	sbcs	r0, r6
    35ec:	40ec      	lsrs	r4, r5
    35ee:	4338      	orrs	r0, r7
    35f0:	1a17      	subs	r7, r2, r0
    35f2:	42ba      	cmp	r2, r7
    35f4:	4192      	sbcs	r2, r2
    35f6:	1b0c      	subs	r4, r1, r4
    35f8:	4252      	negs	r2, r2
    35fa:	1aa4      	subs	r4, r4, r2
    35fc:	4666      	mov	r6, ip
    35fe:	4698      	mov	r8, r3
    3600:	e68b      	b.n	331a <__aeabi_dsub+0xb2>
    3602:	4664      	mov	r4, ip
    3604:	4667      	mov	r7, ip
    3606:	432c      	orrs	r4, r5
    3608:	d000      	beq.n	360c <__aeabi_dsub+0x3a4>
    360a:	e68b      	b.n	3324 <__aeabi_dsub+0xbc>
    360c:	2500      	movs	r5, #0
    360e:	2600      	movs	r6, #0
    3610:	2700      	movs	r7, #0
    3612:	e6ea      	b.n	33ea <__aeabi_dsub+0x182>
    3614:	001e      	movs	r6, r3
    3616:	e6ad      	b.n	3374 <__aeabi_dsub+0x10c>
    3618:	2b1f      	cmp	r3, #31
    361a:	dc60      	bgt.n	36de <__aeabi_dsub+0x476>
    361c:	2720      	movs	r7, #32
    361e:	1af8      	subs	r0, r7, r3
    3620:	000f      	movs	r7, r1
    3622:	4684      	mov	ip, r0
    3624:	4087      	lsls	r7, r0
    3626:	0010      	movs	r0, r2
    3628:	40d8      	lsrs	r0, r3
    362a:	4307      	orrs	r7, r0
    362c:	4660      	mov	r0, ip
    362e:	4082      	lsls	r2, r0
    3630:	1e50      	subs	r0, r2, #1
    3632:	4182      	sbcs	r2, r0
    3634:	40d9      	lsrs	r1, r3
    3636:	4317      	orrs	r7, r2
    3638:	e6f5      	b.n	3426 <__aeabi_dsub+0x1be>
    363a:	0026      	movs	r6, r4
    363c:	4650      	mov	r0, sl
    363e:	4306      	orrs	r6, r0
    3640:	d005      	beq.n	364e <__aeabi_dsub+0x3e6>
    3642:	43ed      	mvns	r5, r5
    3644:	2d00      	cmp	r5, #0
    3646:	d0d3      	beq.n	35f0 <__aeabi_dsub+0x388>
    3648:	4e90      	ldr	r6, [pc, #576]	; (388c <__aeabi_dsub+0x624>)
    364a:	45b4      	cmp	ip, r6
    364c:	d1bd      	bne.n	35ca <__aeabi_dsub+0x362>
    364e:	000c      	movs	r4, r1
    3650:	0017      	movs	r7, r2
    3652:	4666      	mov	r6, ip
    3654:	4698      	mov	r8, r3
    3656:	e68d      	b.n	3374 <__aeabi_dsub+0x10c>
    3658:	488c      	ldr	r0, [pc, #560]	; (388c <__aeabi_dsub+0x624>)
    365a:	4283      	cmp	r3, r0
    365c:	d00b      	beq.n	3676 <__aeabi_dsub+0x40e>
    365e:	4663      	mov	r3, ip
    3660:	e6d9      	b.n	3416 <__aeabi_dsub+0x1ae>
    3662:	2d00      	cmp	r5, #0
    3664:	d000      	beq.n	3668 <__aeabi_dsub+0x400>
    3666:	e096      	b.n	3796 <__aeabi_dsub+0x52e>
    3668:	0008      	movs	r0, r1
    366a:	4310      	orrs	r0, r2
    366c:	d100      	bne.n	3670 <__aeabi_dsub+0x408>
    366e:	e0e2      	b.n	3836 <__aeabi_dsub+0x5ce>
    3670:	000c      	movs	r4, r1
    3672:	0017      	movs	r7, r2
    3674:	4698      	mov	r8, r3
    3676:	4e85      	ldr	r6, [pc, #532]	; (388c <__aeabi_dsub+0x624>)
    3678:	e67c      	b.n	3374 <__aeabi_dsub+0x10c>
    367a:	2500      	movs	r5, #0
    367c:	e780      	b.n	3580 <__aeabi_dsub+0x318>
    367e:	2100      	movs	r1, #0
    3680:	e78e      	b.n	35a0 <__aeabi_dsub+0x338>
    3682:	0023      	movs	r3, r4
    3684:	4650      	mov	r0, sl
    3686:	4303      	orrs	r3, r0
    3688:	2e00      	cmp	r6, #0
    368a:	d000      	beq.n	368e <__aeabi_dsub+0x426>
    368c:	e0a8      	b.n	37e0 <__aeabi_dsub+0x578>
    368e:	2b00      	cmp	r3, #0
    3690:	d100      	bne.n	3694 <__aeabi_dsub+0x42c>
    3692:	e0de      	b.n	3852 <__aeabi_dsub+0x5ea>
    3694:	000b      	movs	r3, r1
    3696:	4313      	orrs	r3, r2
    3698:	d100      	bne.n	369c <__aeabi_dsub+0x434>
    369a:	e66b      	b.n	3374 <__aeabi_dsub+0x10c>
    369c:	4452      	add	r2, sl
    369e:	4552      	cmp	r2, sl
    36a0:	4180      	sbcs	r0, r0
    36a2:	1864      	adds	r4, r4, r1
    36a4:	4240      	negs	r0, r0
    36a6:	1824      	adds	r4, r4, r0
    36a8:	0017      	movs	r7, r2
    36aa:	0223      	lsls	r3, r4, #8
    36ac:	d400      	bmi.n	36b0 <__aeabi_dsub+0x448>
    36ae:	e6fd      	b.n	34ac <__aeabi_dsub+0x244>
    36b0:	4b77      	ldr	r3, [pc, #476]	; (3890 <__aeabi_dsub+0x628>)
    36b2:	4666      	mov	r6, ip
    36b4:	401c      	ands	r4, r3
    36b6:	e65d      	b.n	3374 <__aeabi_dsub+0x10c>
    36b8:	0025      	movs	r5, r4
    36ba:	4650      	mov	r0, sl
    36bc:	4305      	orrs	r5, r0
    36be:	2e00      	cmp	r6, #0
    36c0:	d1cf      	bne.n	3662 <__aeabi_dsub+0x3fa>
    36c2:	2d00      	cmp	r5, #0
    36c4:	d14f      	bne.n	3766 <__aeabi_dsub+0x4fe>
    36c6:	000c      	movs	r4, r1
    36c8:	4314      	orrs	r4, r2
    36ca:	d100      	bne.n	36ce <__aeabi_dsub+0x466>
    36cc:	e0a0      	b.n	3810 <__aeabi_dsub+0x5a8>
    36ce:	000c      	movs	r4, r1
    36d0:	0017      	movs	r7, r2
    36d2:	4698      	mov	r8, r3
    36d4:	e64e      	b.n	3374 <__aeabi_dsub+0x10c>
    36d6:	4666      	mov	r6, ip
    36d8:	2400      	movs	r4, #0
    36da:	2700      	movs	r7, #0
    36dc:	e685      	b.n	33ea <__aeabi_dsub+0x182>
    36de:	001f      	movs	r7, r3
    36e0:	0008      	movs	r0, r1
    36e2:	3f20      	subs	r7, #32
    36e4:	40f8      	lsrs	r0, r7
    36e6:	0007      	movs	r7, r0
    36e8:	2b20      	cmp	r3, #32
    36ea:	d100      	bne.n	36ee <__aeabi_dsub+0x486>
    36ec:	e08e      	b.n	380c <__aeabi_dsub+0x5a4>
    36ee:	2040      	movs	r0, #64	; 0x40
    36f0:	1ac3      	subs	r3, r0, r3
    36f2:	4099      	lsls	r1, r3
    36f4:	430a      	orrs	r2, r1
    36f6:	1e51      	subs	r1, r2, #1
    36f8:	418a      	sbcs	r2, r1
    36fa:	2100      	movs	r1, #0
    36fc:	4317      	orrs	r7, r2
    36fe:	e692      	b.n	3426 <__aeabi_dsub+0x1be>
    3700:	2e00      	cmp	r6, #0
    3702:	d114      	bne.n	372e <__aeabi_dsub+0x4c6>
    3704:	0026      	movs	r6, r4
    3706:	4650      	mov	r0, sl
    3708:	4306      	orrs	r6, r0
    370a:	d062      	beq.n	37d2 <__aeabi_dsub+0x56a>
    370c:	43db      	mvns	r3, r3
    370e:	2b00      	cmp	r3, #0
    3710:	d15c      	bne.n	37cc <__aeabi_dsub+0x564>
    3712:	1887      	adds	r7, r0, r2
    3714:	4297      	cmp	r7, r2
    3716:	4192      	sbcs	r2, r2
    3718:	1864      	adds	r4, r4, r1
    371a:	4252      	negs	r2, r2
    371c:	18a4      	adds	r4, r4, r2
    371e:	4666      	mov	r6, ip
    3720:	e687      	b.n	3432 <__aeabi_dsub+0x1ca>
    3722:	4650      	mov	r0, sl
    3724:	4320      	orrs	r0, r4
    3726:	1e44      	subs	r4, r0, #1
    3728:	41a0      	sbcs	r0, r4
    372a:	2400      	movs	r4, #0
    372c:	e760      	b.n	35f0 <__aeabi_dsub+0x388>
    372e:	4e57      	ldr	r6, [pc, #348]	; (388c <__aeabi_dsub+0x624>)
    3730:	45b4      	cmp	ip, r6
    3732:	d04e      	beq.n	37d2 <__aeabi_dsub+0x56a>
    3734:	2680      	movs	r6, #128	; 0x80
    3736:	0436      	lsls	r6, r6, #16
    3738:	425b      	negs	r3, r3
    373a:	4334      	orrs	r4, r6
    373c:	2b38      	cmp	r3, #56	; 0x38
    373e:	dd00      	ble.n	3742 <__aeabi_dsub+0x4da>
    3740:	e07f      	b.n	3842 <__aeabi_dsub+0x5da>
    3742:	2b1f      	cmp	r3, #31
    3744:	dd00      	ble.n	3748 <__aeabi_dsub+0x4e0>
    3746:	e08b      	b.n	3860 <__aeabi_dsub+0x5f8>
    3748:	2620      	movs	r6, #32
    374a:	0027      	movs	r7, r4
    374c:	4650      	mov	r0, sl
    374e:	1af6      	subs	r6, r6, r3
    3750:	40b7      	lsls	r7, r6
    3752:	40d8      	lsrs	r0, r3
    3754:	4307      	orrs	r7, r0
    3756:	4650      	mov	r0, sl
    3758:	40b0      	lsls	r0, r6
    375a:	1e46      	subs	r6, r0, #1
    375c:	41b0      	sbcs	r0, r6
    375e:	4307      	orrs	r7, r0
    3760:	40dc      	lsrs	r4, r3
    3762:	18bf      	adds	r7, r7, r2
    3764:	e7d6      	b.n	3714 <__aeabi_dsub+0x4ac>
    3766:	000d      	movs	r5, r1
    3768:	4315      	orrs	r5, r2
    376a:	d100      	bne.n	376e <__aeabi_dsub+0x506>
    376c:	e602      	b.n	3374 <__aeabi_dsub+0x10c>
    376e:	4650      	mov	r0, sl
    3770:	1a80      	subs	r0, r0, r2
    3772:	4582      	cmp	sl, r0
    3774:	41bf      	sbcs	r7, r7
    3776:	1a65      	subs	r5, r4, r1
    3778:	427f      	negs	r7, r7
    377a:	1bed      	subs	r5, r5, r7
    377c:	4684      	mov	ip, r0
    377e:	0228      	lsls	r0, r5, #8
    3780:	d400      	bmi.n	3784 <__aeabi_dsub+0x51c>
    3782:	e68d      	b.n	34a0 <__aeabi_dsub+0x238>
    3784:	4650      	mov	r0, sl
    3786:	1a17      	subs	r7, r2, r0
    3788:	42ba      	cmp	r2, r7
    378a:	4192      	sbcs	r2, r2
    378c:	1b0c      	subs	r4, r1, r4
    378e:	4252      	negs	r2, r2
    3790:	1aa4      	subs	r4, r4, r2
    3792:	4698      	mov	r8, r3
    3794:	e5ee      	b.n	3374 <__aeabi_dsub+0x10c>
    3796:	000d      	movs	r5, r1
    3798:	4315      	orrs	r5, r2
    379a:	d100      	bne.n	379e <__aeabi_dsub+0x536>
    379c:	e76b      	b.n	3676 <__aeabi_dsub+0x40e>
    379e:	4650      	mov	r0, sl
    37a0:	0767      	lsls	r7, r4, #29
    37a2:	08c0      	lsrs	r0, r0, #3
    37a4:	4307      	orrs	r7, r0
    37a6:	2080      	movs	r0, #128	; 0x80
    37a8:	08e4      	lsrs	r4, r4, #3
    37aa:	0300      	lsls	r0, r0, #12
    37ac:	4204      	tst	r4, r0
    37ae:	d007      	beq.n	37c0 <__aeabi_dsub+0x558>
    37b0:	08cd      	lsrs	r5, r1, #3
    37b2:	4205      	tst	r5, r0
    37b4:	d104      	bne.n	37c0 <__aeabi_dsub+0x558>
    37b6:	002c      	movs	r4, r5
    37b8:	4698      	mov	r8, r3
    37ba:	08d7      	lsrs	r7, r2, #3
    37bc:	0749      	lsls	r1, r1, #29
    37be:	430f      	orrs	r7, r1
    37c0:	0f7b      	lsrs	r3, r7, #29
    37c2:	00e4      	lsls	r4, r4, #3
    37c4:	431c      	orrs	r4, r3
    37c6:	00ff      	lsls	r7, r7, #3
    37c8:	4e30      	ldr	r6, [pc, #192]	; (388c <__aeabi_dsub+0x624>)
    37ca:	e5d3      	b.n	3374 <__aeabi_dsub+0x10c>
    37cc:	4e2f      	ldr	r6, [pc, #188]	; (388c <__aeabi_dsub+0x624>)
    37ce:	45b4      	cmp	ip, r6
    37d0:	d1b4      	bne.n	373c <__aeabi_dsub+0x4d4>
    37d2:	000c      	movs	r4, r1
    37d4:	0017      	movs	r7, r2
    37d6:	4666      	mov	r6, ip
    37d8:	e5cc      	b.n	3374 <__aeabi_dsub+0x10c>
    37da:	2700      	movs	r7, #0
    37dc:	2400      	movs	r4, #0
    37de:	e5e8      	b.n	33b2 <__aeabi_dsub+0x14a>
    37e0:	2b00      	cmp	r3, #0
    37e2:	d039      	beq.n	3858 <__aeabi_dsub+0x5f0>
    37e4:	000b      	movs	r3, r1
    37e6:	4313      	orrs	r3, r2
    37e8:	d100      	bne.n	37ec <__aeabi_dsub+0x584>
    37ea:	e744      	b.n	3676 <__aeabi_dsub+0x40e>
    37ec:	08c0      	lsrs	r0, r0, #3
    37ee:	0767      	lsls	r7, r4, #29
    37f0:	4307      	orrs	r7, r0
    37f2:	2080      	movs	r0, #128	; 0x80
    37f4:	08e4      	lsrs	r4, r4, #3
    37f6:	0300      	lsls	r0, r0, #12
    37f8:	4204      	tst	r4, r0
    37fa:	d0e1      	beq.n	37c0 <__aeabi_dsub+0x558>
    37fc:	08cb      	lsrs	r3, r1, #3
    37fe:	4203      	tst	r3, r0
    3800:	d1de      	bne.n	37c0 <__aeabi_dsub+0x558>
    3802:	08d7      	lsrs	r7, r2, #3
    3804:	0749      	lsls	r1, r1, #29
    3806:	430f      	orrs	r7, r1
    3808:	001c      	movs	r4, r3
    380a:	e7d9      	b.n	37c0 <__aeabi_dsub+0x558>
    380c:	2100      	movs	r1, #0
    380e:	e771      	b.n	36f4 <__aeabi_dsub+0x48c>
    3810:	2500      	movs	r5, #0
    3812:	2700      	movs	r7, #0
    3814:	e5e9      	b.n	33ea <__aeabi_dsub+0x182>
    3816:	002e      	movs	r6, r5
    3818:	0027      	movs	r7, r4
    381a:	3e20      	subs	r6, #32
    381c:	40f7      	lsrs	r7, r6
    381e:	2d20      	cmp	r5, #32
    3820:	d02f      	beq.n	3882 <__aeabi_dsub+0x61a>
    3822:	2640      	movs	r6, #64	; 0x40
    3824:	1b75      	subs	r5, r6, r5
    3826:	40ac      	lsls	r4, r5
    3828:	4650      	mov	r0, sl
    382a:	4320      	orrs	r0, r4
    382c:	1e44      	subs	r4, r0, #1
    382e:	41a0      	sbcs	r0, r4
    3830:	2400      	movs	r4, #0
    3832:	4338      	orrs	r0, r7
    3834:	e6dc      	b.n	35f0 <__aeabi_dsub+0x388>
    3836:	2480      	movs	r4, #128	; 0x80
    3838:	2500      	movs	r5, #0
    383a:	0324      	lsls	r4, r4, #12
    383c:	4e13      	ldr	r6, [pc, #76]	; (388c <__aeabi_dsub+0x624>)
    383e:	2700      	movs	r7, #0
    3840:	e5d3      	b.n	33ea <__aeabi_dsub+0x182>
    3842:	4650      	mov	r0, sl
    3844:	4320      	orrs	r0, r4
    3846:	0007      	movs	r7, r0
    3848:	1e78      	subs	r0, r7, #1
    384a:	4187      	sbcs	r7, r0
    384c:	2400      	movs	r4, #0
    384e:	18bf      	adds	r7, r7, r2
    3850:	e760      	b.n	3714 <__aeabi_dsub+0x4ac>
    3852:	000c      	movs	r4, r1
    3854:	0017      	movs	r7, r2
    3856:	e58d      	b.n	3374 <__aeabi_dsub+0x10c>
    3858:	000c      	movs	r4, r1
    385a:	0017      	movs	r7, r2
    385c:	4e0b      	ldr	r6, [pc, #44]	; (388c <__aeabi_dsub+0x624>)
    385e:	e589      	b.n	3374 <__aeabi_dsub+0x10c>
    3860:	001e      	movs	r6, r3
    3862:	0027      	movs	r7, r4
    3864:	3e20      	subs	r6, #32
    3866:	40f7      	lsrs	r7, r6
    3868:	2b20      	cmp	r3, #32
    386a:	d00c      	beq.n	3886 <__aeabi_dsub+0x61e>
    386c:	2640      	movs	r6, #64	; 0x40
    386e:	1af3      	subs	r3, r6, r3
    3870:	409c      	lsls	r4, r3
    3872:	4650      	mov	r0, sl
    3874:	4320      	orrs	r0, r4
    3876:	1e44      	subs	r4, r0, #1
    3878:	41a0      	sbcs	r0, r4
    387a:	4307      	orrs	r7, r0
    387c:	2400      	movs	r4, #0
    387e:	18bf      	adds	r7, r7, r2
    3880:	e748      	b.n	3714 <__aeabi_dsub+0x4ac>
    3882:	2400      	movs	r4, #0
    3884:	e7d0      	b.n	3828 <__aeabi_dsub+0x5c0>
    3886:	2400      	movs	r4, #0
    3888:	e7f3      	b.n	3872 <__aeabi_dsub+0x60a>
    388a:	46c0      	nop			; (mov r8, r8)
    388c:	000007ff 	.word	0x000007ff
    3890:	ff7fffff 	.word	0xff7fffff

00003894 <__aeabi_d2iz>:
    3894:	b530      	push	{r4, r5, lr}
    3896:	4d13      	ldr	r5, [pc, #76]	; (38e4 <__aeabi_d2iz+0x50>)
    3898:	030a      	lsls	r2, r1, #12
    389a:	004b      	lsls	r3, r1, #1
    389c:	0b12      	lsrs	r2, r2, #12
    389e:	0d5b      	lsrs	r3, r3, #21
    38a0:	0fc9      	lsrs	r1, r1, #31
    38a2:	2400      	movs	r4, #0
    38a4:	42ab      	cmp	r3, r5
    38a6:	dd10      	ble.n	38ca <__aeabi_d2iz+0x36>
    38a8:	4c0f      	ldr	r4, [pc, #60]	; (38e8 <__aeabi_d2iz+0x54>)
    38aa:	42a3      	cmp	r3, r4
    38ac:	dc0f      	bgt.n	38ce <__aeabi_d2iz+0x3a>
    38ae:	2480      	movs	r4, #128	; 0x80
    38b0:	4d0e      	ldr	r5, [pc, #56]	; (38ec <__aeabi_d2iz+0x58>)
    38b2:	0364      	lsls	r4, r4, #13
    38b4:	4322      	orrs	r2, r4
    38b6:	1aed      	subs	r5, r5, r3
    38b8:	2d1f      	cmp	r5, #31
    38ba:	dd0b      	ble.n	38d4 <__aeabi_d2iz+0x40>
    38bc:	480c      	ldr	r0, [pc, #48]	; (38f0 <__aeabi_d2iz+0x5c>)
    38be:	1ac3      	subs	r3, r0, r3
    38c0:	40da      	lsrs	r2, r3
    38c2:	4254      	negs	r4, r2
    38c4:	2900      	cmp	r1, #0
    38c6:	d100      	bne.n	38ca <__aeabi_d2iz+0x36>
    38c8:	0014      	movs	r4, r2
    38ca:	0020      	movs	r0, r4
    38cc:	bd30      	pop	{r4, r5, pc}
    38ce:	4b09      	ldr	r3, [pc, #36]	; (38f4 <__aeabi_d2iz+0x60>)
    38d0:	18cc      	adds	r4, r1, r3
    38d2:	e7fa      	b.n	38ca <__aeabi_d2iz+0x36>
    38d4:	4c08      	ldr	r4, [pc, #32]	; (38f8 <__aeabi_d2iz+0x64>)
    38d6:	40e8      	lsrs	r0, r5
    38d8:	46a4      	mov	ip, r4
    38da:	4463      	add	r3, ip
    38dc:	409a      	lsls	r2, r3
    38de:	4302      	orrs	r2, r0
    38e0:	e7ef      	b.n	38c2 <__aeabi_d2iz+0x2e>
    38e2:	46c0      	nop			; (mov r8, r8)
    38e4:	000003fe 	.word	0x000003fe
    38e8:	0000041d 	.word	0x0000041d
    38ec:	00000433 	.word	0x00000433
    38f0:	00000413 	.word	0x00000413
    38f4:	7fffffff 	.word	0x7fffffff
    38f8:	fffffbed 	.word	0xfffffbed

000038fc <__aeabi_ui2d>:
    38fc:	b510      	push	{r4, lr}
    38fe:	1e04      	subs	r4, r0, #0
    3900:	d028      	beq.n	3954 <__aeabi_ui2d+0x58>
    3902:	f000 f833 	bl	396c <__clzsi2>
    3906:	4b15      	ldr	r3, [pc, #84]	; (395c <__aeabi_ui2d+0x60>)
    3908:	4a15      	ldr	r2, [pc, #84]	; (3960 <__aeabi_ui2d+0x64>)
    390a:	1a1b      	subs	r3, r3, r0
    390c:	1ad2      	subs	r2, r2, r3
    390e:	2a1f      	cmp	r2, #31
    3910:	dd15      	ble.n	393e <__aeabi_ui2d+0x42>
    3912:	4a14      	ldr	r2, [pc, #80]	; (3964 <__aeabi_ui2d+0x68>)
    3914:	1ad2      	subs	r2, r2, r3
    3916:	4094      	lsls	r4, r2
    3918:	2200      	movs	r2, #0
    391a:	0324      	lsls	r4, r4, #12
    391c:	055b      	lsls	r3, r3, #21
    391e:	0b24      	lsrs	r4, r4, #12
    3920:	0d5b      	lsrs	r3, r3, #21
    3922:	2100      	movs	r1, #0
    3924:	0010      	movs	r0, r2
    3926:	0324      	lsls	r4, r4, #12
    3928:	0d0a      	lsrs	r2, r1, #20
    392a:	0b24      	lsrs	r4, r4, #12
    392c:	0512      	lsls	r2, r2, #20
    392e:	4322      	orrs	r2, r4
    3930:	4c0d      	ldr	r4, [pc, #52]	; (3968 <__aeabi_ui2d+0x6c>)
    3932:	051b      	lsls	r3, r3, #20
    3934:	4022      	ands	r2, r4
    3936:	4313      	orrs	r3, r2
    3938:	005b      	lsls	r3, r3, #1
    393a:	0859      	lsrs	r1, r3, #1
    393c:	bd10      	pop	{r4, pc}
    393e:	0021      	movs	r1, r4
    3940:	4091      	lsls	r1, r2
    3942:	000a      	movs	r2, r1
    3944:	210b      	movs	r1, #11
    3946:	1a08      	subs	r0, r1, r0
    3948:	40c4      	lsrs	r4, r0
    394a:	055b      	lsls	r3, r3, #21
    394c:	0324      	lsls	r4, r4, #12
    394e:	0b24      	lsrs	r4, r4, #12
    3950:	0d5b      	lsrs	r3, r3, #21
    3952:	e7e6      	b.n	3922 <__aeabi_ui2d+0x26>
    3954:	2300      	movs	r3, #0
    3956:	2400      	movs	r4, #0
    3958:	2200      	movs	r2, #0
    395a:	e7e2      	b.n	3922 <__aeabi_ui2d+0x26>
    395c:	0000041e 	.word	0x0000041e
    3960:	00000433 	.word	0x00000433
    3964:	00000413 	.word	0x00000413
    3968:	800fffff 	.word	0x800fffff

0000396c <__clzsi2>:
    396c:	211c      	movs	r1, #28
    396e:	2301      	movs	r3, #1
    3970:	041b      	lsls	r3, r3, #16
    3972:	4298      	cmp	r0, r3
    3974:	d301      	bcc.n	397a <__clzsi2+0xe>
    3976:	0c00      	lsrs	r0, r0, #16
    3978:	3910      	subs	r1, #16
    397a:	0a1b      	lsrs	r3, r3, #8
    397c:	4298      	cmp	r0, r3
    397e:	d301      	bcc.n	3984 <__clzsi2+0x18>
    3980:	0a00      	lsrs	r0, r0, #8
    3982:	3908      	subs	r1, #8
    3984:	091b      	lsrs	r3, r3, #4
    3986:	4298      	cmp	r0, r3
    3988:	d301      	bcc.n	398e <__clzsi2+0x22>
    398a:	0900      	lsrs	r0, r0, #4
    398c:	3904      	subs	r1, #4
    398e:	a202      	add	r2, pc, #8	; (adr r2, 3998 <__clzsi2+0x2c>)
    3990:	5c10      	ldrb	r0, [r2, r0]
    3992:	1840      	adds	r0, r0, r1
    3994:	4770      	bx	lr
    3996:	46c0      	nop			; (mov r8, r8)
    3998:	02020304 	.word	0x02020304
    399c:	01010101 	.word	0x01010101
	...

000039a8 <__libc_init_array>:
    39a8:	b570      	push	{r4, r5, r6, lr}
    39aa:	2600      	movs	r6, #0
    39ac:	4d0c      	ldr	r5, [pc, #48]	; (39e0 <__libc_init_array+0x38>)
    39ae:	4c0d      	ldr	r4, [pc, #52]	; (39e4 <__libc_init_array+0x3c>)
    39b0:	1b64      	subs	r4, r4, r5
    39b2:	10a4      	asrs	r4, r4, #2
    39b4:	42a6      	cmp	r6, r4
    39b6:	d109      	bne.n	39cc <__libc_init_array+0x24>
    39b8:	2600      	movs	r6, #0
    39ba:	f001 f9a9 	bl	4d10 <_init>
    39be:	4d0a      	ldr	r5, [pc, #40]	; (39e8 <__libc_init_array+0x40>)
    39c0:	4c0a      	ldr	r4, [pc, #40]	; (39ec <__libc_init_array+0x44>)
    39c2:	1b64      	subs	r4, r4, r5
    39c4:	10a4      	asrs	r4, r4, #2
    39c6:	42a6      	cmp	r6, r4
    39c8:	d105      	bne.n	39d6 <__libc_init_array+0x2e>
    39ca:	bd70      	pop	{r4, r5, r6, pc}
    39cc:	00b3      	lsls	r3, r6, #2
    39ce:	58eb      	ldr	r3, [r5, r3]
    39d0:	4798      	blx	r3
    39d2:	3601      	adds	r6, #1
    39d4:	e7ee      	b.n	39b4 <__libc_init_array+0xc>
    39d6:	00b3      	lsls	r3, r6, #2
    39d8:	58eb      	ldr	r3, [r5, r3]
    39da:	4798      	blx	r3
    39dc:	3601      	adds	r6, #1
    39de:	e7f2      	b.n	39c6 <__libc_init_array+0x1e>
    39e0:	00004d1c 	.word	0x00004d1c
    39e4:	00004d1c 	.word	0x00004d1c
    39e8:	00004d1c 	.word	0x00004d1c
    39ec:	00004d20 	.word	0x00004d20

000039f0 <memset>:
    39f0:	0003      	movs	r3, r0
    39f2:	1882      	adds	r2, r0, r2
    39f4:	4293      	cmp	r3, r2
    39f6:	d100      	bne.n	39fa <memset+0xa>
    39f8:	4770      	bx	lr
    39fa:	7019      	strb	r1, [r3, #0]
    39fc:	3301      	adds	r3, #1
    39fe:	e7f9      	b.n	39f4 <memset+0x4>

00003a00 <iprintf>:
    3a00:	b40f      	push	{r0, r1, r2, r3}
    3a02:	4b0b      	ldr	r3, [pc, #44]	; (3a30 <iprintf+0x30>)
    3a04:	b513      	push	{r0, r1, r4, lr}
    3a06:	681c      	ldr	r4, [r3, #0]
    3a08:	2c00      	cmp	r4, #0
    3a0a:	d005      	beq.n	3a18 <iprintf+0x18>
    3a0c:	69a3      	ldr	r3, [r4, #24]
    3a0e:	2b00      	cmp	r3, #0
    3a10:	d102      	bne.n	3a18 <iprintf+0x18>
    3a12:	0020      	movs	r0, r4
    3a14:	f000 faf2 	bl	3ffc <__sinit>
    3a18:	ab05      	add	r3, sp, #20
    3a1a:	9a04      	ldr	r2, [sp, #16]
    3a1c:	68a1      	ldr	r1, [r4, #8]
    3a1e:	0020      	movs	r0, r4
    3a20:	9301      	str	r3, [sp, #4]
    3a22:	f000 fcc7 	bl	43b4 <_vfiprintf_r>
    3a26:	bc16      	pop	{r1, r2, r4}
    3a28:	bc08      	pop	{r3}
    3a2a:	b004      	add	sp, #16
    3a2c:	4718      	bx	r3
    3a2e:	46c0      	nop			; (mov r8, r8)
    3a30:	2000000c 	.word	0x2000000c

00003a34 <_puts_r>:
    3a34:	b570      	push	{r4, r5, r6, lr}
    3a36:	0005      	movs	r5, r0
    3a38:	000e      	movs	r6, r1
    3a3a:	2800      	cmp	r0, #0
    3a3c:	d004      	beq.n	3a48 <_puts_r+0x14>
    3a3e:	6983      	ldr	r3, [r0, #24]
    3a40:	2b00      	cmp	r3, #0
    3a42:	d101      	bne.n	3a48 <_puts_r+0x14>
    3a44:	f000 fada 	bl	3ffc <__sinit>
    3a48:	69ab      	ldr	r3, [r5, #24]
    3a4a:	68ac      	ldr	r4, [r5, #8]
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	d102      	bne.n	3a56 <_puts_r+0x22>
    3a50:	0028      	movs	r0, r5
    3a52:	f000 fad3 	bl	3ffc <__sinit>
    3a56:	4b24      	ldr	r3, [pc, #144]	; (3ae8 <_puts_r+0xb4>)
    3a58:	429c      	cmp	r4, r3
    3a5a:	d10f      	bne.n	3a7c <_puts_r+0x48>
    3a5c:	686c      	ldr	r4, [r5, #4]
    3a5e:	89a3      	ldrh	r3, [r4, #12]
    3a60:	071b      	lsls	r3, r3, #28
    3a62:	d502      	bpl.n	3a6a <_puts_r+0x36>
    3a64:	6923      	ldr	r3, [r4, #16]
    3a66:	2b00      	cmp	r3, #0
    3a68:	d120      	bne.n	3aac <_puts_r+0x78>
    3a6a:	0021      	movs	r1, r4
    3a6c:	0028      	movs	r0, r5
    3a6e:	f000 f957 	bl	3d20 <__swsetup_r>
    3a72:	2800      	cmp	r0, #0
    3a74:	d01a      	beq.n	3aac <_puts_r+0x78>
    3a76:	2001      	movs	r0, #1
    3a78:	4240      	negs	r0, r0
    3a7a:	bd70      	pop	{r4, r5, r6, pc}
    3a7c:	4b1b      	ldr	r3, [pc, #108]	; (3aec <_puts_r+0xb8>)
    3a7e:	429c      	cmp	r4, r3
    3a80:	d101      	bne.n	3a86 <_puts_r+0x52>
    3a82:	68ac      	ldr	r4, [r5, #8]
    3a84:	e7eb      	b.n	3a5e <_puts_r+0x2a>
    3a86:	4b1a      	ldr	r3, [pc, #104]	; (3af0 <_puts_r+0xbc>)
    3a88:	429c      	cmp	r4, r3
    3a8a:	d1e8      	bne.n	3a5e <_puts_r+0x2a>
    3a8c:	68ec      	ldr	r4, [r5, #12]
    3a8e:	e7e6      	b.n	3a5e <_puts_r+0x2a>
    3a90:	3b01      	subs	r3, #1
    3a92:	3601      	adds	r6, #1
    3a94:	60a3      	str	r3, [r4, #8]
    3a96:	2b00      	cmp	r3, #0
    3a98:	da04      	bge.n	3aa4 <_puts_r+0x70>
    3a9a:	69a2      	ldr	r2, [r4, #24]
    3a9c:	4293      	cmp	r3, r2
    3a9e:	db16      	blt.n	3ace <_puts_r+0x9a>
    3aa0:	290a      	cmp	r1, #10
    3aa2:	d014      	beq.n	3ace <_puts_r+0x9a>
    3aa4:	6823      	ldr	r3, [r4, #0]
    3aa6:	1c5a      	adds	r2, r3, #1
    3aa8:	6022      	str	r2, [r4, #0]
    3aaa:	7019      	strb	r1, [r3, #0]
    3aac:	7831      	ldrb	r1, [r6, #0]
    3aae:	68a3      	ldr	r3, [r4, #8]
    3ab0:	2900      	cmp	r1, #0
    3ab2:	d1ed      	bne.n	3a90 <_puts_r+0x5c>
    3ab4:	3b01      	subs	r3, #1
    3ab6:	60a3      	str	r3, [r4, #8]
    3ab8:	2b00      	cmp	r3, #0
    3aba:	da0f      	bge.n	3adc <_puts_r+0xa8>
    3abc:	0022      	movs	r2, r4
    3abe:	310a      	adds	r1, #10
    3ac0:	0028      	movs	r0, r5
    3ac2:	f000 f8d7 	bl	3c74 <__swbuf_r>
    3ac6:	1c43      	adds	r3, r0, #1
    3ac8:	d0d5      	beq.n	3a76 <_puts_r+0x42>
    3aca:	200a      	movs	r0, #10
    3acc:	e7d5      	b.n	3a7a <_puts_r+0x46>
    3ace:	0022      	movs	r2, r4
    3ad0:	0028      	movs	r0, r5
    3ad2:	f000 f8cf 	bl	3c74 <__swbuf_r>
    3ad6:	1c43      	adds	r3, r0, #1
    3ad8:	d1e8      	bne.n	3aac <_puts_r+0x78>
    3ada:	e7cc      	b.n	3a76 <_puts_r+0x42>
    3adc:	200a      	movs	r0, #10
    3ade:	6823      	ldr	r3, [r4, #0]
    3ae0:	1c5a      	adds	r2, r3, #1
    3ae2:	6022      	str	r2, [r4, #0]
    3ae4:	7018      	strb	r0, [r3, #0]
    3ae6:	e7c8      	b.n	3a7a <_puts_r+0x46>
    3ae8:	00004c9c 	.word	0x00004c9c
    3aec:	00004cbc 	.word	0x00004cbc
    3af0:	00004c7c 	.word	0x00004c7c

00003af4 <puts>:
    3af4:	b510      	push	{r4, lr}
    3af6:	4b03      	ldr	r3, [pc, #12]	; (3b04 <puts+0x10>)
    3af8:	0001      	movs	r1, r0
    3afa:	6818      	ldr	r0, [r3, #0]
    3afc:	f7ff ff9a 	bl	3a34 <_puts_r>
    3b00:	bd10      	pop	{r4, pc}
    3b02:	46c0      	nop			; (mov r8, r8)
    3b04:	2000000c 	.word	0x2000000c

00003b08 <setbuf>:
    3b08:	424a      	negs	r2, r1
    3b0a:	414a      	adcs	r2, r1
    3b0c:	2380      	movs	r3, #128	; 0x80
    3b0e:	b510      	push	{r4, lr}
    3b10:	0052      	lsls	r2, r2, #1
    3b12:	00db      	lsls	r3, r3, #3
    3b14:	f000 f802 	bl	3b1c <setvbuf>
    3b18:	bd10      	pop	{r4, pc}
	...

00003b1c <setvbuf>:
    3b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b1e:	001d      	movs	r5, r3
    3b20:	4b4f      	ldr	r3, [pc, #316]	; (3c60 <setvbuf+0x144>)
    3b22:	b085      	sub	sp, #20
    3b24:	681e      	ldr	r6, [r3, #0]
    3b26:	0004      	movs	r4, r0
    3b28:	000f      	movs	r7, r1
    3b2a:	9200      	str	r2, [sp, #0]
    3b2c:	2e00      	cmp	r6, #0
    3b2e:	d005      	beq.n	3b3c <setvbuf+0x20>
    3b30:	69b3      	ldr	r3, [r6, #24]
    3b32:	2b00      	cmp	r3, #0
    3b34:	d102      	bne.n	3b3c <setvbuf+0x20>
    3b36:	0030      	movs	r0, r6
    3b38:	f000 fa60 	bl	3ffc <__sinit>
    3b3c:	4b49      	ldr	r3, [pc, #292]	; (3c64 <setvbuf+0x148>)
    3b3e:	429c      	cmp	r4, r3
    3b40:	d150      	bne.n	3be4 <setvbuf+0xc8>
    3b42:	6874      	ldr	r4, [r6, #4]
    3b44:	9b00      	ldr	r3, [sp, #0]
    3b46:	2b02      	cmp	r3, #2
    3b48:	d005      	beq.n	3b56 <setvbuf+0x3a>
    3b4a:	2b01      	cmp	r3, #1
    3b4c:	d900      	bls.n	3b50 <setvbuf+0x34>
    3b4e:	e084      	b.n	3c5a <setvbuf+0x13e>
    3b50:	2d00      	cmp	r5, #0
    3b52:	da00      	bge.n	3b56 <setvbuf+0x3a>
    3b54:	e081      	b.n	3c5a <setvbuf+0x13e>
    3b56:	0021      	movs	r1, r4
    3b58:	0030      	movs	r0, r6
    3b5a:	f000 f9e1 	bl	3f20 <_fflush_r>
    3b5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3b60:	2900      	cmp	r1, #0
    3b62:	d008      	beq.n	3b76 <setvbuf+0x5a>
    3b64:	0023      	movs	r3, r4
    3b66:	3344      	adds	r3, #68	; 0x44
    3b68:	4299      	cmp	r1, r3
    3b6a:	d002      	beq.n	3b72 <setvbuf+0x56>
    3b6c:	0030      	movs	r0, r6
    3b6e:	f000 fb51 	bl	4214 <_free_r>
    3b72:	2300      	movs	r3, #0
    3b74:	6363      	str	r3, [r4, #52]	; 0x34
    3b76:	2300      	movs	r3, #0
    3b78:	61a3      	str	r3, [r4, #24]
    3b7a:	6063      	str	r3, [r4, #4]
    3b7c:	89a3      	ldrh	r3, [r4, #12]
    3b7e:	061b      	lsls	r3, r3, #24
    3b80:	d503      	bpl.n	3b8a <setvbuf+0x6e>
    3b82:	6921      	ldr	r1, [r4, #16]
    3b84:	0030      	movs	r0, r6
    3b86:	f000 fb45 	bl	4214 <_free_r>
    3b8a:	89a3      	ldrh	r3, [r4, #12]
    3b8c:	4a36      	ldr	r2, [pc, #216]	; (3c68 <setvbuf+0x14c>)
    3b8e:	4013      	ands	r3, r2
    3b90:	81a3      	strh	r3, [r4, #12]
    3b92:	9b00      	ldr	r3, [sp, #0]
    3b94:	2b02      	cmp	r3, #2
    3b96:	d05a      	beq.n	3c4e <setvbuf+0x132>
    3b98:	ab03      	add	r3, sp, #12
    3b9a:	aa02      	add	r2, sp, #8
    3b9c:	0021      	movs	r1, r4
    3b9e:	0030      	movs	r0, r6
    3ba0:	f000 fac2 	bl	4128 <__swhatbuf_r>
    3ba4:	89a3      	ldrh	r3, [r4, #12]
    3ba6:	4318      	orrs	r0, r3
    3ba8:	81a0      	strh	r0, [r4, #12]
    3baa:	2d00      	cmp	r5, #0
    3bac:	d124      	bne.n	3bf8 <setvbuf+0xdc>
    3bae:	9d02      	ldr	r5, [sp, #8]
    3bb0:	0028      	movs	r0, r5
    3bb2:	f000 fb25 	bl	4200 <malloc>
    3bb6:	9501      	str	r5, [sp, #4]
    3bb8:	1e07      	subs	r7, r0, #0
    3bba:	d142      	bne.n	3c42 <setvbuf+0x126>
    3bbc:	9b02      	ldr	r3, [sp, #8]
    3bbe:	9301      	str	r3, [sp, #4]
    3bc0:	42ab      	cmp	r3, r5
    3bc2:	d139      	bne.n	3c38 <setvbuf+0x11c>
    3bc4:	2001      	movs	r0, #1
    3bc6:	4240      	negs	r0, r0
    3bc8:	2302      	movs	r3, #2
    3bca:	89a2      	ldrh	r2, [r4, #12]
    3bcc:	4313      	orrs	r3, r2
    3bce:	81a3      	strh	r3, [r4, #12]
    3bd0:	2300      	movs	r3, #0
    3bd2:	60a3      	str	r3, [r4, #8]
    3bd4:	0023      	movs	r3, r4
    3bd6:	3347      	adds	r3, #71	; 0x47
    3bd8:	6023      	str	r3, [r4, #0]
    3bda:	6123      	str	r3, [r4, #16]
    3bdc:	2301      	movs	r3, #1
    3bde:	6163      	str	r3, [r4, #20]
    3be0:	b005      	add	sp, #20
    3be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3be4:	4b21      	ldr	r3, [pc, #132]	; (3c6c <setvbuf+0x150>)
    3be6:	429c      	cmp	r4, r3
    3be8:	d101      	bne.n	3bee <setvbuf+0xd2>
    3bea:	68b4      	ldr	r4, [r6, #8]
    3bec:	e7aa      	b.n	3b44 <setvbuf+0x28>
    3bee:	4b20      	ldr	r3, [pc, #128]	; (3c70 <setvbuf+0x154>)
    3bf0:	429c      	cmp	r4, r3
    3bf2:	d1a7      	bne.n	3b44 <setvbuf+0x28>
    3bf4:	68f4      	ldr	r4, [r6, #12]
    3bf6:	e7a5      	b.n	3b44 <setvbuf+0x28>
    3bf8:	2f00      	cmp	r7, #0
    3bfa:	d0d9      	beq.n	3bb0 <setvbuf+0x94>
    3bfc:	69b3      	ldr	r3, [r6, #24]
    3bfe:	2b00      	cmp	r3, #0
    3c00:	d102      	bne.n	3c08 <setvbuf+0xec>
    3c02:	0030      	movs	r0, r6
    3c04:	f000 f9fa 	bl	3ffc <__sinit>
    3c08:	9b00      	ldr	r3, [sp, #0]
    3c0a:	2b01      	cmp	r3, #1
    3c0c:	d103      	bne.n	3c16 <setvbuf+0xfa>
    3c0e:	89a3      	ldrh	r3, [r4, #12]
    3c10:	9a00      	ldr	r2, [sp, #0]
    3c12:	431a      	orrs	r2, r3
    3c14:	81a2      	strh	r2, [r4, #12]
    3c16:	2008      	movs	r0, #8
    3c18:	89a3      	ldrh	r3, [r4, #12]
    3c1a:	6027      	str	r7, [r4, #0]
    3c1c:	6127      	str	r7, [r4, #16]
    3c1e:	6165      	str	r5, [r4, #20]
    3c20:	4018      	ands	r0, r3
    3c22:	d018      	beq.n	3c56 <setvbuf+0x13a>
    3c24:	2001      	movs	r0, #1
    3c26:	4018      	ands	r0, r3
    3c28:	2300      	movs	r3, #0
    3c2a:	4298      	cmp	r0, r3
    3c2c:	d011      	beq.n	3c52 <setvbuf+0x136>
    3c2e:	426d      	negs	r5, r5
    3c30:	60a3      	str	r3, [r4, #8]
    3c32:	61a5      	str	r5, [r4, #24]
    3c34:	0018      	movs	r0, r3
    3c36:	e7d3      	b.n	3be0 <setvbuf+0xc4>
    3c38:	9801      	ldr	r0, [sp, #4]
    3c3a:	f000 fae1 	bl	4200 <malloc>
    3c3e:	1e07      	subs	r7, r0, #0
    3c40:	d0c0      	beq.n	3bc4 <setvbuf+0xa8>
    3c42:	2380      	movs	r3, #128	; 0x80
    3c44:	89a2      	ldrh	r2, [r4, #12]
    3c46:	9d01      	ldr	r5, [sp, #4]
    3c48:	4313      	orrs	r3, r2
    3c4a:	81a3      	strh	r3, [r4, #12]
    3c4c:	e7d6      	b.n	3bfc <setvbuf+0xe0>
    3c4e:	2000      	movs	r0, #0
    3c50:	e7ba      	b.n	3bc8 <setvbuf+0xac>
    3c52:	60a5      	str	r5, [r4, #8]
    3c54:	e7c4      	b.n	3be0 <setvbuf+0xc4>
    3c56:	60a0      	str	r0, [r4, #8]
    3c58:	e7c2      	b.n	3be0 <setvbuf+0xc4>
    3c5a:	2001      	movs	r0, #1
    3c5c:	4240      	negs	r0, r0
    3c5e:	e7bf      	b.n	3be0 <setvbuf+0xc4>
    3c60:	2000000c 	.word	0x2000000c
    3c64:	00004c9c 	.word	0x00004c9c
    3c68:	fffff35c 	.word	0xfffff35c
    3c6c:	00004cbc 	.word	0x00004cbc
    3c70:	00004c7c 	.word	0x00004c7c

00003c74 <__swbuf_r>:
    3c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c76:	0005      	movs	r5, r0
    3c78:	000e      	movs	r6, r1
    3c7a:	0014      	movs	r4, r2
    3c7c:	2800      	cmp	r0, #0
    3c7e:	d004      	beq.n	3c8a <__swbuf_r+0x16>
    3c80:	6983      	ldr	r3, [r0, #24]
    3c82:	2b00      	cmp	r3, #0
    3c84:	d101      	bne.n	3c8a <__swbuf_r+0x16>
    3c86:	f000 f9b9 	bl	3ffc <__sinit>
    3c8a:	4b22      	ldr	r3, [pc, #136]	; (3d14 <__swbuf_r+0xa0>)
    3c8c:	429c      	cmp	r4, r3
    3c8e:	d12d      	bne.n	3cec <__swbuf_r+0x78>
    3c90:	686c      	ldr	r4, [r5, #4]
    3c92:	69a3      	ldr	r3, [r4, #24]
    3c94:	60a3      	str	r3, [r4, #8]
    3c96:	89a3      	ldrh	r3, [r4, #12]
    3c98:	071b      	lsls	r3, r3, #28
    3c9a:	d531      	bpl.n	3d00 <__swbuf_r+0x8c>
    3c9c:	6923      	ldr	r3, [r4, #16]
    3c9e:	2b00      	cmp	r3, #0
    3ca0:	d02e      	beq.n	3d00 <__swbuf_r+0x8c>
    3ca2:	6823      	ldr	r3, [r4, #0]
    3ca4:	6922      	ldr	r2, [r4, #16]
    3ca6:	b2f7      	uxtb	r7, r6
    3ca8:	1a98      	subs	r0, r3, r2
    3caa:	6963      	ldr	r3, [r4, #20]
    3cac:	b2f6      	uxtb	r6, r6
    3cae:	4298      	cmp	r0, r3
    3cb0:	db05      	blt.n	3cbe <__swbuf_r+0x4a>
    3cb2:	0021      	movs	r1, r4
    3cb4:	0028      	movs	r0, r5
    3cb6:	f000 f933 	bl	3f20 <_fflush_r>
    3cba:	2800      	cmp	r0, #0
    3cbc:	d126      	bne.n	3d0c <__swbuf_r+0x98>
    3cbe:	68a3      	ldr	r3, [r4, #8]
    3cc0:	3001      	adds	r0, #1
    3cc2:	3b01      	subs	r3, #1
    3cc4:	60a3      	str	r3, [r4, #8]
    3cc6:	6823      	ldr	r3, [r4, #0]
    3cc8:	1c5a      	adds	r2, r3, #1
    3cca:	6022      	str	r2, [r4, #0]
    3ccc:	701f      	strb	r7, [r3, #0]
    3cce:	6963      	ldr	r3, [r4, #20]
    3cd0:	4298      	cmp	r0, r3
    3cd2:	d004      	beq.n	3cde <__swbuf_r+0x6a>
    3cd4:	89a3      	ldrh	r3, [r4, #12]
    3cd6:	07db      	lsls	r3, r3, #31
    3cd8:	d51a      	bpl.n	3d10 <__swbuf_r+0x9c>
    3cda:	2e0a      	cmp	r6, #10
    3cdc:	d118      	bne.n	3d10 <__swbuf_r+0x9c>
    3cde:	0021      	movs	r1, r4
    3ce0:	0028      	movs	r0, r5
    3ce2:	f000 f91d 	bl	3f20 <_fflush_r>
    3ce6:	2800      	cmp	r0, #0
    3ce8:	d012      	beq.n	3d10 <__swbuf_r+0x9c>
    3cea:	e00f      	b.n	3d0c <__swbuf_r+0x98>
    3cec:	4b0a      	ldr	r3, [pc, #40]	; (3d18 <__swbuf_r+0xa4>)
    3cee:	429c      	cmp	r4, r3
    3cf0:	d101      	bne.n	3cf6 <__swbuf_r+0x82>
    3cf2:	68ac      	ldr	r4, [r5, #8]
    3cf4:	e7cd      	b.n	3c92 <__swbuf_r+0x1e>
    3cf6:	4b09      	ldr	r3, [pc, #36]	; (3d1c <__swbuf_r+0xa8>)
    3cf8:	429c      	cmp	r4, r3
    3cfa:	d1ca      	bne.n	3c92 <__swbuf_r+0x1e>
    3cfc:	68ec      	ldr	r4, [r5, #12]
    3cfe:	e7c8      	b.n	3c92 <__swbuf_r+0x1e>
    3d00:	0021      	movs	r1, r4
    3d02:	0028      	movs	r0, r5
    3d04:	f000 f80c 	bl	3d20 <__swsetup_r>
    3d08:	2800      	cmp	r0, #0
    3d0a:	d0ca      	beq.n	3ca2 <__swbuf_r+0x2e>
    3d0c:	2601      	movs	r6, #1
    3d0e:	4276      	negs	r6, r6
    3d10:	0030      	movs	r0, r6
    3d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d14:	00004c9c 	.word	0x00004c9c
    3d18:	00004cbc 	.word	0x00004cbc
    3d1c:	00004c7c 	.word	0x00004c7c

00003d20 <__swsetup_r>:
    3d20:	4b36      	ldr	r3, [pc, #216]	; (3dfc <__swsetup_r+0xdc>)
    3d22:	b570      	push	{r4, r5, r6, lr}
    3d24:	681d      	ldr	r5, [r3, #0]
    3d26:	0006      	movs	r6, r0
    3d28:	000c      	movs	r4, r1
    3d2a:	2d00      	cmp	r5, #0
    3d2c:	d005      	beq.n	3d3a <__swsetup_r+0x1a>
    3d2e:	69ab      	ldr	r3, [r5, #24]
    3d30:	2b00      	cmp	r3, #0
    3d32:	d102      	bne.n	3d3a <__swsetup_r+0x1a>
    3d34:	0028      	movs	r0, r5
    3d36:	f000 f961 	bl	3ffc <__sinit>
    3d3a:	4b31      	ldr	r3, [pc, #196]	; (3e00 <__swsetup_r+0xe0>)
    3d3c:	429c      	cmp	r4, r3
    3d3e:	d10f      	bne.n	3d60 <__swsetup_r+0x40>
    3d40:	686c      	ldr	r4, [r5, #4]
    3d42:	230c      	movs	r3, #12
    3d44:	5ee2      	ldrsh	r2, [r4, r3]
    3d46:	b293      	uxth	r3, r2
    3d48:	0719      	lsls	r1, r3, #28
    3d4a:	d42d      	bmi.n	3da8 <__swsetup_r+0x88>
    3d4c:	06d9      	lsls	r1, r3, #27
    3d4e:	d411      	bmi.n	3d74 <__swsetup_r+0x54>
    3d50:	2309      	movs	r3, #9
    3d52:	2001      	movs	r0, #1
    3d54:	6033      	str	r3, [r6, #0]
    3d56:	3337      	adds	r3, #55	; 0x37
    3d58:	4313      	orrs	r3, r2
    3d5a:	81a3      	strh	r3, [r4, #12]
    3d5c:	4240      	negs	r0, r0
    3d5e:	bd70      	pop	{r4, r5, r6, pc}
    3d60:	4b28      	ldr	r3, [pc, #160]	; (3e04 <__swsetup_r+0xe4>)
    3d62:	429c      	cmp	r4, r3
    3d64:	d101      	bne.n	3d6a <__swsetup_r+0x4a>
    3d66:	68ac      	ldr	r4, [r5, #8]
    3d68:	e7eb      	b.n	3d42 <__swsetup_r+0x22>
    3d6a:	4b27      	ldr	r3, [pc, #156]	; (3e08 <__swsetup_r+0xe8>)
    3d6c:	429c      	cmp	r4, r3
    3d6e:	d1e8      	bne.n	3d42 <__swsetup_r+0x22>
    3d70:	68ec      	ldr	r4, [r5, #12]
    3d72:	e7e6      	b.n	3d42 <__swsetup_r+0x22>
    3d74:	075b      	lsls	r3, r3, #29
    3d76:	d513      	bpl.n	3da0 <__swsetup_r+0x80>
    3d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3d7a:	2900      	cmp	r1, #0
    3d7c:	d008      	beq.n	3d90 <__swsetup_r+0x70>
    3d7e:	0023      	movs	r3, r4
    3d80:	3344      	adds	r3, #68	; 0x44
    3d82:	4299      	cmp	r1, r3
    3d84:	d002      	beq.n	3d8c <__swsetup_r+0x6c>
    3d86:	0030      	movs	r0, r6
    3d88:	f000 fa44 	bl	4214 <_free_r>
    3d8c:	2300      	movs	r3, #0
    3d8e:	6363      	str	r3, [r4, #52]	; 0x34
    3d90:	2224      	movs	r2, #36	; 0x24
    3d92:	89a3      	ldrh	r3, [r4, #12]
    3d94:	4393      	bics	r3, r2
    3d96:	81a3      	strh	r3, [r4, #12]
    3d98:	2300      	movs	r3, #0
    3d9a:	6063      	str	r3, [r4, #4]
    3d9c:	6923      	ldr	r3, [r4, #16]
    3d9e:	6023      	str	r3, [r4, #0]
    3da0:	2308      	movs	r3, #8
    3da2:	89a2      	ldrh	r2, [r4, #12]
    3da4:	4313      	orrs	r3, r2
    3da6:	81a3      	strh	r3, [r4, #12]
    3da8:	6923      	ldr	r3, [r4, #16]
    3daa:	2b00      	cmp	r3, #0
    3dac:	d10b      	bne.n	3dc6 <__swsetup_r+0xa6>
    3dae:	21a0      	movs	r1, #160	; 0xa0
    3db0:	2280      	movs	r2, #128	; 0x80
    3db2:	89a3      	ldrh	r3, [r4, #12]
    3db4:	0089      	lsls	r1, r1, #2
    3db6:	0092      	lsls	r2, r2, #2
    3db8:	400b      	ands	r3, r1
    3dba:	4293      	cmp	r3, r2
    3dbc:	d003      	beq.n	3dc6 <__swsetup_r+0xa6>
    3dbe:	0021      	movs	r1, r4
    3dc0:	0030      	movs	r0, r6
    3dc2:	f000 f9d9 	bl	4178 <__smakebuf_r>
    3dc6:	2301      	movs	r3, #1
    3dc8:	89a2      	ldrh	r2, [r4, #12]
    3dca:	4013      	ands	r3, r2
    3dcc:	d011      	beq.n	3df2 <__swsetup_r+0xd2>
    3dce:	2300      	movs	r3, #0
    3dd0:	60a3      	str	r3, [r4, #8]
    3dd2:	6963      	ldr	r3, [r4, #20]
    3dd4:	425b      	negs	r3, r3
    3dd6:	61a3      	str	r3, [r4, #24]
    3dd8:	2000      	movs	r0, #0
    3dda:	6923      	ldr	r3, [r4, #16]
    3ddc:	4283      	cmp	r3, r0
    3dde:	d1be      	bne.n	3d5e <__swsetup_r+0x3e>
    3de0:	230c      	movs	r3, #12
    3de2:	5ee2      	ldrsh	r2, [r4, r3]
    3de4:	0613      	lsls	r3, r2, #24
    3de6:	d5ba      	bpl.n	3d5e <__swsetup_r+0x3e>
    3de8:	2340      	movs	r3, #64	; 0x40
    3dea:	4313      	orrs	r3, r2
    3dec:	81a3      	strh	r3, [r4, #12]
    3dee:	3801      	subs	r0, #1
    3df0:	e7b5      	b.n	3d5e <__swsetup_r+0x3e>
    3df2:	0792      	lsls	r2, r2, #30
    3df4:	d400      	bmi.n	3df8 <__swsetup_r+0xd8>
    3df6:	6963      	ldr	r3, [r4, #20]
    3df8:	60a3      	str	r3, [r4, #8]
    3dfa:	e7ed      	b.n	3dd8 <__swsetup_r+0xb8>
    3dfc:	2000000c 	.word	0x2000000c
    3e00:	00004c9c 	.word	0x00004c9c
    3e04:	00004cbc 	.word	0x00004cbc
    3e08:	00004c7c 	.word	0x00004c7c

00003e0c <__sflush_r>:
    3e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e0e:	898a      	ldrh	r2, [r1, #12]
    3e10:	0005      	movs	r5, r0
    3e12:	000c      	movs	r4, r1
    3e14:	0713      	lsls	r3, r2, #28
    3e16:	d460      	bmi.n	3eda <__sflush_r+0xce>
    3e18:	684b      	ldr	r3, [r1, #4]
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	dc04      	bgt.n	3e28 <__sflush_r+0x1c>
    3e1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3e20:	2b00      	cmp	r3, #0
    3e22:	dc01      	bgt.n	3e28 <__sflush_r+0x1c>
    3e24:	2000      	movs	r0, #0
    3e26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3e28:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3e2a:	2f00      	cmp	r7, #0
    3e2c:	d0fa      	beq.n	3e24 <__sflush_r+0x18>
    3e2e:	2300      	movs	r3, #0
    3e30:	682e      	ldr	r6, [r5, #0]
    3e32:	602b      	str	r3, [r5, #0]
    3e34:	2380      	movs	r3, #128	; 0x80
    3e36:	015b      	lsls	r3, r3, #5
    3e38:	401a      	ands	r2, r3
    3e3a:	d034      	beq.n	3ea6 <__sflush_r+0x9a>
    3e3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3e3e:	89a3      	ldrh	r3, [r4, #12]
    3e40:	075b      	lsls	r3, r3, #29
    3e42:	d506      	bpl.n	3e52 <__sflush_r+0x46>
    3e44:	6863      	ldr	r3, [r4, #4]
    3e46:	1ac0      	subs	r0, r0, r3
    3e48:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3e4a:	2b00      	cmp	r3, #0
    3e4c:	d001      	beq.n	3e52 <__sflush_r+0x46>
    3e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3e50:	1ac0      	subs	r0, r0, r3
    3e52:	0002      	movs	r2, r0
    3e54:	6a21      	ldr	r1, [r4, #32]
    3e56:	2300      	movs	r3, #0
    3e58:	0028      	movs	r0, r5
    3e5a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3e5c:	47b8      	blx	r7
    3e5e:	89a1      	ldrh	r1, [r4, #12]
    3e60:	1c43      	adds	r3, r0, #1
    3e62:	d106      	bne.n	3e72 <__sflush_r+0x66>
    3e64:	682b      	ldr	r3, [r5, #0]
    3e66:	2b1d      	cmp	r3, #29
    3e68:	d831      	bhi.n	3ece <__sflush_r+0xc2>
    3e6a:	4a2c      	ldr	r2, [pc, #176]	; (3f1c <__sflush_r+0x110>)
    3e6c:	40da      	lsrs	r2, r3
    3e6e:	07d3      	lsls	r3, r2, #31
    3e70:	d52d      	bpl.n	3ece <__sflush_r+0xc2>
    3e72:	2300      	movs	r3, #0
    3e74:	6063      	str	r3, [r4, #4]
    3e76:	6923      	ldr	r3, [r4, #16]
    3e78:	6023      	str	r3, [r4, #0]
    3e7a:	04cb      	lsls	r3, r1, #19
    3e7c:	d505      	bpl.n	3e8a <__sflush_r+0x7e>
    3e7e:	1c43      	adds	r3, r0, #1
    3e80:	d102      	bne.n	3e88 <__sflush_r+0x7c>
    3e82:	682b      	ldr	r3, [r5, #0]
    3e84:	2b00      	cmp	r3, #0
    3e86:	d100      	bne.n	3e8a <__sflush_r+0x7e>
    3e88:	6560      	str	r0, [r4, #84]	; 0x54
    3e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3e8c:	602e      	str	r6, [r5, #0]
    3e8e:	2900      	cmp	r1, #0
    3e90:	d0c8      	beq.n	3e24 <__sflush_r+0x18>
    3e92:	0023      	movs	r3, r4
    3e94:	3344      	adds	r3, #68	; 0x44
    3e96:	4299      	cmp	r1, r3
    3e98:	d002      	beq.n	3ea0 <__sflush_r+0x94>
    3e9a:	0028      	movs	r0, r5
    3e9c:	f000 f9ba 	bl	4214 <_free_r>
    3ea0:	2000      	movs	r0, #0
    3ea2:	6360      	str	r0, [r4, #52]	; 0x34
    3ea4:	e7bf      	b.n	3e26 <__sflush_r+0x1a>
    3ea6:	2301      	movs	r3, #1
    3ea8:	6a21      	ldr	r1, [r4, #32]
    3eaa:	0028      	movs	r0, r5
    3eac:	47b8      	blx	r7
    3eae:	1c43      	adds	r3, r0, #1
    3eb0:	d1c5      	bne.n	3e3e <__sflush_r+0x32>
    3eb2:	682b      	ldr	r3, [r5, #0]
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	d0c2      	beq.n	3e3e <__sflush_r+0x32>
    3eb8:	2b1d      	cmp	r3, #29
    3eba:	d001      	beq.n	3ec0 <__sflush_r+0xb4>
    3ebc:	2b16      	cmp	r3, #22
    3ebe:	d101      	bne.n	3ec4 <__sflush_r+0xb8>
    3ec0:	602e      	str	r6, [r5, #0]
    3ec2:	e7af      	b.n	3e24 <__sflush_r+0x18>
    3ec4:	2340      	movs	r3, #64	; 0x40
    3ec6:	89a2      	ldrh	r2, [r4, #12]
    3ec8:	4313      	orrs	r3, r2
    3eca:	81a3      	strh	r3, [r4, #12]
    3ecc:	e7ab      	b.n	3e26 <__sflush_r+0x1a>
    3ece:	2340      	movs	r3, #64	; 0x40
    3ed0:	430b      	orrs	r3, r1
    3ed2:	2001      	movs	r0, #1
    3ed4:	81a3      	strh	r3, [r4, #12]
    3ed6:	4240      	negs	r0, r0
    3ed8:	e7a5      	b.n	3e26 <__sflush_r+0x1a>
    3eda:	690f      	ldr	r7, [r1, #16]
    3edc:	2f00      	cmp	r7, #0
    3ede:	d0a1      	beq.n	3e24 <__sflush_r+0x18>
    3ee0:	680b      	ldr	r3, [r1, #0]
    3ee2:	600f      	str	r7, [r1, #0]
    3ee4:	1bdb      	subs	r3, r3, r7
    3ee6:	9301      	str	r3, [sp, #4]
    3ee8:	2300      	movs	r3, #0
    3eea:	0792      	lsls	r2, r2, #30
    3eec:	d100      	bne.n	3ef0 <__sflush_r+0xe4>
    3eee:	694b      	ldr	r3, [r1, #20]
    3ef0:	60a3      	str	r3, [r4, #8]
    3ef2:	9b01      	ldr	r3, [sp, #4]
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	dc00      	bgt.n	3efa <__sflush_r+0xee>
    3ef8:	e794      	b.n	3e24 <__sflush_r+0x18>
    3efa:	9b01      	ldr	r3, [sp, #4]
    3efc:	003a      	movs	r2, r7
    3efe:	6a21      	ldr	r1, [r4, #32]
    3f00:	0028      	movs	r0, r5
    3f02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3f04:	47b0      	blx	r6
    3f06:	2800      	cmp	r0, #0
    3f08:	dc03      	bgt.n	3f12 <__sflush_r+0x106>
    3f0a:	2340      	movs	r3, #64	; 0x40
    3f0c:	89a2      	ldrh	r2, [r4, #12]
    3f0e:	4313      	orrs	r3, r2
    3f10:	e7df      	b.n	3ed2 <__sflush_r+0xc6>
    3f12:	9b01      	ldr	r3, [sp, #4]
    3f14:	183f      	adds	r7, r7, r0
    3f16:	1a1b      	subs	r3, r3, r0
    3f18:	9301      	str	r3, [sp, #4]
    3f1a:	e7ea      	b.n	3ef2 <__sflush_r+0xe6>
    3f1c:	20400001 	.word	0x20400001

00003f20 <_fflush_r>:
    3f20:	690b      	ldr	r3, [r1, #16]
    3f22:	b570      	push	{r4, r5, r6, lr}
    3f24:	0005      	movs	r5, r0
    3f26:	000c      	movs	r4, r1
    3f28:	2b00      	cmp	r3, #0
    3f2a:	d101      	bne.n	3f30 <_fflush_r+0x10>
    3f2c:	2000      	movs	r0, #0
    3f2e:	bd70      	pop	{r4, r5, r6, pc}
    3f30:	2800      	cmp	r0, #0
    3f32:	d004      	beq.n	3f3e <_fflush_r+0x1e>
    3f34:	6983      	ldr	r3, [r0, #24]
    3f36:	2b00      	cmp	r3, #0
    3f38:	d101      	bne.n	3f3e <_fflush_r+0x1e>
    3f3a:	f000 f85f 	bl	3ffc <__sinit>
    3f3e:	4b0b      	ldr	r3, [pc, #44]	; (3f6c <_fflush_r+0x4c>)
    3f40:	429c      	cmp	r4, r3
    3f42:	d109      	bne.n	3f58 <_fflush_r+0x38>
    3f44:	686c      	ldr	r4, [r5, #4]
    3f46:	220c      	movs	r2, #12
    3f48:	5ea3      	ldrsh	r3, [r4, r2]
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	d0ee      	beq.n	3f2c <_fflush_r+0xc>
    3f4e:	0021      	movs	r1, r4
    3f50:	0028      	movs	r0, r5
    3f52:	f7ff ff5b 	bl	3e0c <__sflush_r>
    3f56:	e7ea      	b.n	3f2e <_fflush_r+0xe>
    3f58:	4b05      	ldr	r3, [pc, #20]	; (3f70 <_fflush_r+0x50>)
    3f5a:	429c      	cmp	r4, r3
    3f5c:	d101      	bne.n	3f62 <_fflush_r+0x42>
    3f5e:	68ac      	ldr	r4, [r5, #8]
    3f60:	e7f1      	b.n	3f46 <_fflush_r+0x26>
    3f62:	4b04      	ldr	r3, [pc, #16]	; (3f74 <_fflush_r+0x54>)
    3f64:	429c      	cmp	r4, r3
    3f66:	d1ee      	bne.n	3f46 <_fflush_r+0x26>
    3f68:	68ec      	ldr	r4, [r5, #12]
    3f6a:	e7ec      	b.n	3f46 <_fflush_r+0x26>
    3f6c:	00004c9c 	.word	0x00004c9c
    3f70:	00004cbc 	.word	0x00004cbc
    3f74:	00004c7c 	.word	0x00004c7c

00003f78 <_cleanup_r>:
    3f78:	b510      	push	{r4, lr}
    3f7a:	4902      	ldr	r1, [pc, #8]	; (3f84 <_cleanup_r+0xc>)
    3f7c:	f000 f8b2 	bl	40e4 <_fwalk_reent>
    3f80:	bd10      	pop	{r4, pc}
    3f82:	46c0      	nop			; (mov r8, r8)
    3f84:	00003f21 	.word	0x00003f21

00003f88 <std.isra.0>:
    3f88:	2300      	movs	r3, #0
    3f8a:	b510      	push	{r4, lr}
    3f8c:	0004      	movs	r4, r0
    3f8e:	6003      	str	r3, [r0, #0]
    3f90:	6043      	str	r3, [r0, #4]
    3f92:	6083      	str	r3, [r0, #8]
    3f94:	8181      	strh	r1, [r0, #12]
    3f96:	6643      	str	r3, [r0, #100]	; 0x64
    3f98:	81c2      	strh	r2, [r0, #14]
    3f9a:	6103      	str	r3, [r0, #16]
    3f9c:	6143      	str	r3, [r0, #20]
    3f9e:	6183      	str	r3, [r0, #24]
    3fa0:	0019      	movs	r1, r3
    3fa2:	2208      	movs	r2, #8
    3fa4:	305c      	adds	r0, #92	; 0x5c
    3fa6:	f7ff fd23 	bl	39f0 <memset>
    3faa:	4b05      	ldr	r3, [pc, #20]	; (3fc0 <std.isra.0+0x38>)
    3fac:	6224      	str	r4, [r4, #32]
    3fae:	6263      	str	r3, [r4, #36]	; 0x24
    3fb0:	4b04      	ldr	r3, [pc, #16]	; (3fc4 <std.isra.0+0x3c>)
    3fb2:	62a3      	str	r3, [r4, #40]	; 0x28
    3fb4:	4b04      	ldr	r3, [pc, #16]	; (3fc8 <std.isra.0+0x40>)
    3fb6:	62e3      	str	r3, [r4, #44]	; 0x2c
    3fb8:	4b04      	ldr	r3, [pc, #16]	; (3fcc <std.isra.0+0x44>)
    3fba:	6323      	str	r3, [r4, #48]	; 0x30
    3fbc:	bd10      	pop	{r4, pc}
    3fbe:	46c0      	nop			; (mov r8, r8)
    3fc0:	00004921 	.word	0x00004921
    3fc4:	00004949 	.word	0x00004949
    3fc8:	00004981 	.word	0x00004981
    3fcc:	000049ad 	.word	0x000049ad

00003fd0 <__sfmoreglue>:
    3fd0:	b570      	push	{r4, r5, r6, lr}
    3fd2:	2568      	movs	r5, #104	; 0x68
    3fd4:	1e4a      	subs	r2, r1, #1
    3fd6:	4355      	muls	r5, r2
    3fd8:	000e      	movs	r6, r1
    3fda:	0029      	movs	r1, r5
    3fdc:	3174      	adds	r1, #116	; 0x74
    3fde:	f000 f963 	bl	42a8 <_malloc_r>
    3fe2:	1e04      	subs	r4, r0, #0
    3fe4:	d008      	beq.n	3ff8 <__sfmoreglue+0x28>
    3fe6:	2100      	movs	r1, #0
    3fe8:	002a      	movs	r2, r5
    3fea:	6001      	str	r1, [r0, #0]
    3fec:	6046      	str	r6, [r0, #4]
    3fee:	300c      	adds	r0, #12
    3ff0:	60a0      	str	r0, [r4, #8]
    3ff2:	3268      	adds	r2, #104	; 0x68
    3ff4:	f7ff fcfc 	bl	39f0 <memset>
    3ff8:	0020      	movs	r0, r4
    3ffa:	bd70      	pop	{r4, r5, r6, pc}

00003ffc <__sinit>:
    3ffc:	6983      	ldr	r3, [r0, #24]
    3ffe:	b513      	push	{r0, r1, r4, lr}
    4000:	0004      	movs	r4, r0
    4002:	2b00      	cmp	r3, #0
    4004:	d128      	bne.n	4058 <__sinit+0x5c>
    4006:	6483      	str	r3, [r0, #72]	; 0x48
    4008:	64c3      	str	r3, [r0, #76]	; 0x4c
    400a:	6503      	str	r3, [r0, #80]	; 0x50
    400c:	4b13      	ldr	r3, [pc, #76]	; (405c <__sinit+0x60>)
    400e:	4a14      	ldr	r2, [pc, #80]	; (4060 <__sinit+0x64>)
    4010:	681b      	ldr	r3, [r3, #0]
    4012:	6282      	str	r2, [r0, #40]	; 0x28
    4014:	9301      	str	r3, [sp, #4]
    4016:	4298      	cmp	r0, r3
    4018:	d101      	bne.n	401e <__sinit+0x22>
    401a:	2301      	movs	r3, #1
    401c:	6183      	str	r3, [r0, #24]
    401e:	0020      	movs	r0, r4
    4020:	f000 f820 	bl	4064 <__sfp>
    4024:	6060      	str	r0, [r4, #4]
    4026:	0020      	movs	r0, r4
    4028:	f000 f81c 	bl	4064 <__sfp>
    402c:	60a0      	str	r0, [r4, #8]
    402e:	0020      	movs	r0, r4
    4030:	f000 f818 	bl	4064 <__sfp>
    4034:	2200      	movs	r2, #0
    4036:	60e0      	str	r0, [r4, #12]
    4038:	2104      	movs	r1, #4
    403a:	6860      	ldr	r0, [r4, #4]
    403c:	f7ff ffa4 	bl	3f88 <std.isra.0>
    4040:	2201      	movs	r2, #1
    4042:	2109      	movs	r1, #9
    4044:	68a0      	ldr	r0, [r4, #8]
    4046:	f7ff ff9f 	bl	3f88 <std.isra.0>
    404a:	2202      	movs	r2, #2
    404c:	2112      	movs	r1, #18
    404e:	68e0      	ldr	r0, [r4, #12]
    4050:	f7ff ff9a 	bl	3f88 <std.isra.0>
    4054:	2301      	movs	r3, #1
    4056:	61a3      	str	r3, [r4, #24]
    4058:	bd13      	pop	{r0, r1, r4, pc}
    405a:	46c0      	nop			; (mov r8, r8)
    405c:	00004c78 	.word	0x00004c78
    4060:	00003f79 	.word	0x00003f79

00004064 <__sfp>:
    4064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4066:	4b1e      	ldr	r3, [pc, #120]	; (40e0 <__sfp+0x7c>)
    4068:	0007      	movs	r7, r0
    406a:	681e      	ldr	r6, [r3, #0]
    406c:	69b3      	ldr	r3, [r6, #24]
    406e:	2b00      	cmp	r3, #0
    4070:	d102      	bne.n	4078 <__sfp+0x14>
    4072:	0030      	movs	r0, r6
    4074:	f7ff ffc2 	bl	3ffc <__sinit>
    4078:	3648      	adds	r6, #72	; 0x48
    407a:	68b4      	ldr	r4, [r6, #8]
    407c:	6873      	ldr	r3, [r6, #4]
    407e:	3b01      	subs	r3, #1
    4080:	d504      	bpl.n	408c <__sfp+0x28>
    4082:	6833      	ldr	r3, [r6, #0]
    4084:	2b00      	cmp	r3, #0
    4086:	d007      	beq.n	4098 <__sfp+0x34>
    4088:	6836      	ldr	r6, [r6, #0]
    408a:	e7f6      	b.n	407a <__sfp+0x16>
    408c:	220c      	movs	r2, #12
    408e:	5ea5      	ldrsh	r5, [r4, r2]
    4090:	2d00      	cmp	r5, #0
    4092:	d00d      	beq.n	40b0 <__sfp+0x4c>
    4094:	3468      	adds	r4, #104	; 0x68
    4096:	e7f2      	b.n	407e <__sfp+0x1a>
    4098:	2104      	movs	r1, #4
    409a:	0038      	movs	r0, r7
    409c:	f7ff ff98 	bl	3fd0 <__sfmoreglue>
    40a0:	6030      	str	r0, [r6, #0]
    40a2:	2800      	cmp	r0, #0
    40a4:	d1f0      	bne.n	4088 <__sfp+0x24>
    40a6:	230c      	movs	r3, #12
    40a8:	0004      	movs	r4, r0
    40aa:	603b      	str	r3, [r7, #0]
    40ac:	0020      	movs	r0, r4
    40ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40b0:	2301      	movs	r3, #1
    40b2:	0020      	movs	r0, r4
    40b4:	425b      	negs	r3, r3
    40b6:	81e3      	strh	r3, [r4, #14]
    40b8:	3302      	adds	r3, #2
    40ba:	81a3      	strh	r3, [r4, #12]
    40bc:	6665      	str	r5, [r4, #100]	; 0x64
    40be:	6025      	str	r5, [r4, #0]
    40c0:	60a5      	str	r5, [r4, #8]
    40c2:	6065      	str	r5, [r4, #4]
    40c4:	6125      	str	r5, [r4, #16]
    40c6:	6165      	str	r5, [r4, #20]
    40c8:	61a5      	str	r5, [r4, #24]
    40ca:	2208      	movs	r2, #8
    40cc:	0029      	movs	r1, r5
    40ce:	305c      	adds	r0, #92	; 0x5c
    40d0:	f7ff fc8e 	bl	39f0 <memset>
    40d4:	6365      	str	r5, [r4, #52]	; 0x34
    40d6:	63a5      	str	r5, [r4, #56]	; 0x38
    40d8:	64a5      	str	r5, [r4, #72]	; 0x48
    40da:	64e5      	str	r5, [r4, #76]	; 0x4c
    40dc:	e7e6      	b.n	40ac <__sfp+0x48>
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	00004c78 	.word	0x00004c78

000040e4 <_fwalk_reent>:
    40e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    40e6:	0004      	movs	r4, r0
    40e8:	0007      	movs	r7, r0
    40ea:	2600      	movs	r6, #0
    40ec:	9101      	str	r1, [sp, #4]
    40ee:	3448      	adds	r4, #72	; 0x48
    40f0:	2c00      	cmp	r4, #0
    40f2:	d101      	bne.n	40f8 <_fwalk_reent+0x14>
    40f4:	0030      	movs	r0, r6
    40f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    40f8:	6863      	ldr	r3, [r4, #4]
    40fa:	68a5      	ldr	r5, [r4, #8]
    40fc:	9300      	str	r3, [sp, #0]
    40fe:	9b00      	ldr	r3, [sp, #0]
    4100:	3b01      	subs	r3, #1
    4102:	9300      	str	r3, [sp, #0]
    4104:	d501      	bpl.n	410a <_fwalk_reent+0x26>
    4106:	6824      	ldr	r4, [r4, #0]
    4108:	e7f2      	b.n	40f0 <_fwalk_reent+0xc>
    410a:	89ab      	ldrh	r3, [r5, #12]
    410c:	2b01      	cmp	r3, #1
    410e:	d908      	bls.n	4122 <_fwalk_reent+0x3e>
    4110:	220e      	movs	r2, #14
    4112:	5eab      	ldrsh	r3, [r5, r2]
    4114:	3301      	adds	r3, #1
    4116:	d004      	beq.n	4122 <_fwalk_reent+0x3e>
    4118:	0029      	movs	r1, r5
    411a:	0038      	movs	r0, r7
    411c:	9b01      	ldr	r3, [sp, #4]
    411e:	4798      	blx	r3
    4120:	4306      	orrs	r6, r0
    4122:	3568      	adds	r5, #104	; 0x68
    4124:	e7eb      	b.n	40fe <_fwalk_reent+0x1a>
	...

00004128 <__swhatbuf_r>:
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	000e      	movs	r6, r1
    412c:	001d      	movs	r5, r3
    412e:	230e      	movs	r3, #14
    4130:	5ec9      	ldrsh	r1, [r1, r3]
    4132:	b090      	sub	sp, #64	; 0x40
    4134:	0014      	movs	r4, r2
    4136:	2900      	cmp	r1, #0
    4138:	da07      	bge.n	414a <__swhatbuf_r+0x22>
    413a:	2300      	movs	r3, #0
    413c:	602b      	str	r3, [r5, #0]
    413e:	89b3      	ldrh	r3, [r6, #12]
    4140:	061b      	lsls	r3, r3, #24
    4142:	d411      	bmi.n	4168 <__swhatbuf_r+0x40>
    4144:	2380      	movs	r3, #128	; 0x80
    4146:	00db      	lsls	r3, r3, #3
    4148:	e00f      	b.n	416a <__swhatbuf_r+0x42>
    414a:	aa01      	add	r2, sp, #4
    414c:	f000 fc5a 	bl	4a04 <_fstat_r>
    4150:	2800      	cmp	r0, #0
    4152:	dbf2      	blt.n	413a <__swhatbuf_r+0x12>
    4154:	22f0      	movs	r2, #240	; 0xf0
    4156:	9b02      	ldr	r3, [sp, #8]
    4158:	0212      	lsls	r2, r2, #8
    415a:	4013      	ands	r3, r2
    415c:	4a05      	ldr	r2, [pc, #20]	; (4174 <__swhatbuf_r+0x4c>)
    415e:	189b      	adds	r3, r3, r2
    4160:	425a      	negs	r2, r3
    4162:	4153      	adcs	r3, r2
    4164:	602b      	str	r3, [r5, #0]
    4166:	e7ed      	b.n	4144 <__swhatbuf_r+0x1c>
    4168:	2340      	movs	r3, #64	; 0x40
    416a:	2000      	movs	r0, #0
    416c:	6023      	str	r3, [r4, #0]
    416e:	b010      	add	sp, #64	; 0x40
    4170:	bd70      	pop	{r4, r5, r6, pc}
    4172:	46c0      	nop			; (mov r8, r8)
    4174:	ffffe000 	.word	0xffffe000

00004178 <__smakebuf_r>:
    4178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    417a:	2602      	movs	r6, #2
    417c:	898b      	ldrh	r3, [r1, #12]
    417e:	0005      	movs	r5, r0
    4180:	000c      	movs	r4, r1
    4182:	4233      	tst	r3, r6
    4184:	d006      	beq.n	4194 <__smakebuf_r+0x1c>
    4186:	0023      	movs	r3, r4
    4188:	3347      	adds	r3, #71	; 0x47
    418a:	6023      	str	r3, [r4, #0]
    418c:	6123      	str	r3, [r4, #16]
    418e:	2301      	movs	r3, #1
    4190:	6163      	str	r3, [r4, #20]
    4192:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4194:	ab01      	add	r3, sp, #4
    4196:	466a      	mov	r2, sp
    4198:	f7ff ffc6 	bl	4128 <__swhatbuf_r>
    419c:	9900      	ldr	r1, [sp, #0]
    419e:	0007      	movs	r7, r0
    41a0:	0028      	movs	r0, r5
    41a2:	f000 f881 	bl	42a8 <_malloc_r>
    41a6:	2800      	cmp	r0, #0
    41a8:	d108      	bne.n	41bc <__smakebuf_r+0x44>
    41aa:	220c      	movs	r2, #12
    41ac:	5ea3      	ldrsh	r3, [r4, r2]
    41ae:	059a      	lsls	r2, r3, #22
    41b0:	d4ef      	bmi.n	4192 <__smakebuf_r+0x1a>
    41b2:	2203      	movs	r2, #3
    41b4:	4393      	bics	r3, r2
    41b6:	431e      	orrs	r6, r3
    41b8:	81a6      	strh	r6, [r4, #12]
    41ba:	e7e4      	b.n	4186 <__smakebuf_r+0xe>
    41bc:	4b0f      	ldr	r3, [pc, #60]	; (41fc <__smakebuf_r+0x84>)
    41be:	62ab      	str	r3, [r5, #40]	; 0x28
    41c0:	2380      	movs	r3, #128	; 0x80
    41c2:	89a2      	ldrh	r2, [r4, #12]
    41c4:	6020      	str	r0, [r4, #0]
    41c6:	4313      	orrs	r3, r2
    41c8:	81a3      	strh	r3, [r4, #12]
    41ca:	9b00      	ldr	r3, [sp, #0]
    41cc:	6120      	str	r0, [r4, #16]
    41ce:	6163      	str	r3, [r4, #20]
    41d0:	9b01      	ldr	r3, [sp, #4]
    41d2:	2b00      	cmp	r3, #0
    41d4:	d00d      	beq.n	41f2 <__smakebuf_r+0x7a>
    41d6:	230e      	movs	r3, #14
    41d8:	5ee1      	ldrsh	r1, [r4, r3]
    41da:	0028      	movs	r0, r5
    41dc:	f000 fc24 	bl	4a28 <_isatty_r>
    41e0:	2800      	cmp	r0, #0
    41e2:	d006      	beq.n	41f2 <__smakebuf_r+0x7a>
    41e4:	2203      	movs	r2, #3
    41e6:	89a3      	ldrh	r3, [r4, #12]
    41e8:	4393      	bics	r3, r2
    41ea:	001a      	movs	r2, r3
    41ec:	2301      	movs	r3, #1
    41ee:	4313      	orrs	r3, r2
    41f0:	81a3      	strh	r3, [r4, #12]
    41f2:	89a0      	ldrh	r0, [r4, #12]
    41f4:	4338      	orrs	r0, r7
    41f6:	81a0      	strh	r0, [r4, #12]
    41f8:	e7cb      	b.n	4192 <__smakebuf_r+0x1a>
    41fa:	46c0      	nop			; (mov r8, r8)
    41fc:	00003f79 	.word	0x00003f79

00004200 <malloc>:
    4200:	b510      	push	{r4, lr}
    4202:	4b03      	ldr	r3, [pc, #12]	; (4210 <malloc+0x10>)
    4204:	0001      	movs	r1, r0
    4206:	6818      	ldr	r0, [r3, #0]
    4208:	f000 f84e 	bl	42a8 <_malloc_r>
    420c:	bd10      	pop	{r4, pc}
    420e:	46c0      	nop			; (mov r8, r8)
    4210:	2000000c 	.word	0x2000000c

00004214 <_free_r>:
    4214:	b570      	push	{r4, r5, r6, lr}
    4216:	0005      	movs	r5, r0
    4218:	2900      	cmp	r1, #0
    421a:	d010      	beq.n	423e <_free_r+0x2a>
    421c:	1f0c      	subs	r4, r1, #4
    421e:	6823      	ldr	r3, [r4, #0]
    4220:	2b00      	cmp	r3, #0
    4222:	da00      	bge.n	4226 <_free_r+0x12>
    4224:	18e4      	adds	r4, r4, r3
    4226:	0028      	movs	r0, r5
    4228:	f000 fc2f 	bl	4a8a <__malloc_lock>
    422c:	4a1d      	ldr	r2, [pc, #116]	; (42a4 <_free_r+0x90>)
    422e:	6813      	ldr	r3, [r2, #0]
    4230:	2b00      	cmp	r3, #0
    4232:	d105      	bne.n	4240 <_free_r+0x2c>
    4234:	6063      	str	r3, [r4, #4]
    4236:	6014      	str	r4, [r2, #0]
    4238:	0028      	movs	r0, r5
    423a:	f000 fc27 	bl	4a8c <__malloc_unlock>
    423e:	bd70      	pop	{r4, r5, r6, pc}
    4240:	42a3      	cmp	r3, r4
    4242:	d909      	bls.n	4258 <_free_r+0x44>
    4244:	6821      	ldr	r1, [r4, #0]
    4246:	1860      	adds	r0, r4, r1
    4248:	4283      	cmp	r3, r0
    424a:	d1f3      	bne.n	4234 <_free_r+0x20>
    424c:	6818      	ldr	r0, [r3, #0]
    424e:	685b      	ldr	r3, [r3, #4]
    4250:	1841      	adds	r1, r0, r1
    4252:	6021      	str	r1, [r4, #0]
    4254:	e7ee      	b.n	4234 <_free_r+0x20>
    4256:	0013      	movs	r3, r2
    4258:	685a      	ldr	r2, [r3, #4]
    425a:	2a00      	cmp	r2, #0
    425c:	d001      	beq.n	4262 <_free_r+0x4e>
    425e:	42a2      	cmp	r2, r4
    4260:	d9f9      	bls.n	4256 <_free_r+0x42>
    4262:	6819      	ldr	r1, [r3, #0]
    4264:	1858      	adds	r0, r3, r1
    4266:	42a0      	cmp	r0, r4
    4268:	d10b      	bne.n	4282 <_free_r+0x6e>
    426a:	6820      	ldr	r0, [r4, #0]
    426c:	1809      	adds	r1, r1, r0
    426e:	1858      	adds	r0, r3, r1
    4270:	6019      	str	r1, [r3, #0]
    4272:	4282      	cmp	r2, r0
    4274:	d1e0      	bne.n	4238 <_free_r+0x24>
    4276:	6810      	ldr	r0, [r2, #0]
    4278:	6852      	ldr	r2, [r2, #4]
    427a:	1841      	adds	r1, r0, r1
    427c:	6019      	str	r1, [r3, #0]
    427e:	605a      	str	r2, [r3, #4]
    4280:	e7da      	b.n	4238 <_free_r+0x24>
    4282:	42a0      	cmp	r0, r4
    4284:	d902      	bls.n	428c <_free_r+0x78>
    4286:	230c      	movs	r3, #12
    4288:	602b      	str	r3, [r5, #0]
    428a:	e7d5      	b.n	4238 <_free_r+0x24>
    428c:	6821      	ldr	r1, [r4, #0]
    428e:	1860      	adds	r0, r4, r1
    4290:	4282      	cmp	r2, r0
    4292:	d103      	bne.n	429c <_free_r+0x88>
    4294:	6810      	ldr	r0, [r2, #0]
    4296:	6852      	ldr	r2, [r2, #4]
    4298:	1841      	adds	r1, r0, r1
    429a:	6021      	str	r1, [r4, #0]
    429c:	6062      	str	r2, [r4, #4]
    429e:	605c      	str	r4, [r3, #4]
    42a0:	e7ca      	b.n	4238 <_free_r+0x24>
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	200000d0 	.word	0x200000d0

000042a8 <_malloc_r>:
    42a8:	2303      	movs	r3, #3
    42aa:	b570      	push	{r4, r5, r6, lr}
    42ac:	1ccd      	adds	r5, r1, #3
    42ae:	439d      	bics	r5, r3
    42b0:	3508      	adds	r5, #8
    42b2:	0006      	movs	r6, r0
    42b4:	2d0c      	cmp	r5, #12
    42b6:	d21e      	bcs.n	42f6 <_malloc_r+0x4e>
    42b8:	250c      	movs	r5, #12
    42ba:	42a9      	cmp	r1, r5
    42bc:	d81d      	bhi.n	42fa <_malloc_r+0x52>
    42be:	0030      	movs	r0, r6
    42c0:	f000 fbe3 	bl	4a8a <__malloc_lock>
    42c4:	4a25      	ldr	r2, [pc, #148]	; (435c <_malloc_r+0xb4>)
    42c6:	6814      	ldr	r4, [r2, #0]
    42c8:	0021      	movs	r1, r4
    42ca:	2900      	cmp	r1, #0
    42cc:	d119      	bne.n	4302 <_malloc_r+0x5a>
    42ce:	4c24      	ldr	r4, [pc, #144]	; (4360 <_malloc_r+0xb8>)
    42d0:	6823      	ldr	r3, [r4, #0]
    42d2:	2b00      	cmp	r3, #0
    42d4:	d103      	bne.n	42de <_malloc_r+0x36>
    42d6:	0030      	movs	r0, r6
    42d8:	f000 fb10 	bl	48fc <_sbrk_r>
    42dc:	6020      	str	r0, [r4, #0]
    42de:	0029      	movs	r1, r5
    42e0:	0030      	movs	r0, r6
    42e2:	f000 fb0b 	bl	48fc <_sbrk_r>
    42e6:	1c43      	adds	r3, r0, #1
    42e8:	d12c      	bne.n	4344 <_malloc_r+0x9c>
    42ea:	230c      	movs	r3, #12
    42ec:	0030      	movs	r0, r6
    42ee:	6033      	str	r3, [r6, #0]
    42f0:	f000 fbcc 	bl	4a8c <__malloc_unlock>
    42f4:	e003      	b.n	42fe <_malloc_r+0x56>
    42f6:	2d00      	cmp	r5, #0
    42f8:	dadf      	bge.n	42ba <_malloc_r+0x12>
    42fa:	230c      	movs	r3, #12
    42fc:	6033      	str	r3, [r6, #0]
    42fe:	2000      	movs	r0, #0
    4300:	bd70      	pop	{r4, r5, r6, pc}
    4302:	680b      	ldr	r3, [r1, #0]
    4304:	1b5b      	subs	r3, r3, r5
    4306:	d41a      	bmi.n	433e <_malloc_r+0x96>
    4308:	2b0b      	cmp	r3, #11
    430a:	d903      	bls.n	4314 <_malloc_r+0x6c>
    430c:	600b      	str	r3, [r1, #0]
    430e:	18cc      	adds	r4, r1, r3
    4310:	6025      	str	r5, [r4, #0]
    4312:	e003      	b.n	431c <_malloc_r+0x74>
    4314:	428c      	cmp	r4, r1
    4316:	d10e      	bne.n	4336 <_malloc_r+0x8e>
    4318:	6863      	ldr	r3, [r4, #4]
    431a:	6013      	str	r3, [r2, #0]
    431c:	0030      	movs	r0, r6
    431e:	f000 fbb5 	bl	4a8c <__malloc_unlock>
    4322:	0020      	movs	r0, r4
    4324:	2207      	movs	r2, #7
    4326:	300b      	adds	r0, #11
    4328:	1d23      	adds	r3, r4, #4
    432a:	4390      	bics	r0, r2
    432c:	1ac3      	subs	r3, r0, r3
    432e:	d0e7      	beq.n	4300 <_malloc_r+0x58>
    4330:	425a      	negs	r2, r3
    4332:	50e2      	str	r2, [r4, r3]
    4334:	e7e4      	b.n	4300 <_malloc_r+0x58>
    4336:	684b      	ldr	r3, [r1, #4]
    4338:	6063      	str	r3, [r4, #4]
    433a:	000c      	movs	r4, r1
    433c:	e7ee      	b.n	431c <_malloc_r+0x74>
    433e:	000c      	movs	r4, r1
    4340:	6849      	ldr	r1, [r1, #4]
    4342:	e7c2      	b.n	42ca <_malloc_r+0x22>
    4344:	2303      	movs	r3, #3
    4346:	1cc4      	adds	r4, r0, #3
    4348:	439c      	bics	r4, r3
    434a:	42a0      	cmp	r0, r4
    434c:	d0e0      	beq.n	4310 <_malloc_r+0x68>
    434e:	1a21      	subs	r1, r4, r0
    4350:	0030      	movs	r0, r6
    4352:	f000 fad3 	bl	48fc <_sbrk_r>
    4356:	1c43      	adds	r3, r0, #1
    4358:	d1da      	bne.n	4310 <_malloc_r+0x68>
    435a:	e7c6      	b.n	42ea <_malloc_r+0x42>
    435c:	200000d0 	.word	0x200000d0
    4360:	200000d4 	.word	0x200000d4

00004364 <__sfputc_r>:
    4364:	6893      	ldr	r3, [r2, #8]
    4366:	b510      	push	{r4, lr}
    4368:	3b01      	subs	r3, #1
    436a:	6093      	str	r3, [r2, #8]
    436c:	2b00      	cmp	r3, #0
    436e:	da05      	bge.n	437c <__sfputc_r+0x18>
    4370:	6994      	ldr	r4, [r2, #24]
    4372:	42a3      	cmp	r3, r4
    4374:	db08      	blt.n	4388 <__sfputc_r+0x24>
    4376:	b2cb      	uxtb	r3, r1
    4378:	2b0a      	cmp	r3, #10
    437a:	d005      	beq.n	4388 <__sfputc_r+0x24>
    437c:	6813      	ldr	r3, [r2, #0]
    437e:	1c58      	adds	r0, r3, #1
    4380:	6010      	str	r0, [r2, #0]
    4382:	7019      	strb	r1, [r3, #0]
    4384:	b2c8      	uxtb	r0, r1
    4386:	bd10      	pop	{r4, pc}
    4388:	f7ff fc74 	bl	3c74 <__swbuf_r>
    438c:	e7fb      	b.n	4386 <__sfputc_r+0x22>

0000438e <__sfputs_r>:
    438e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4390:	0006      	movs	r6, r0
    4392:	000f      	movs	r7, r1
    4394:	0014      	movs	r4, r2
    4396:	18d5      	adds	r5, r2, r3
    4398:	42ac      	cmp	r4, r5
    439a:	d101      	bne.n	43a0 <__sfputs_r+0x12>
    439c:	2000      	movs	r0, #0
    439e:	e007      	b.n	43b0 <__sfputs_r+0x22>
    43a0:	7821      	ldrb	r1, [r4, #0]
    43a2:	003a      	movs	r2, r7
    43a4:	0030      	movs	r0, r6
    43a6:	f7ff ffdd 	bl	4364 <__sfputc_r>
    43aa:	3401      	adds	r4, #1
    43ac:	1c43      	adds	r3, r0, #1
    43ae:	d1f3      	bne.n	4398 <__sfputs_r+0xa>
    43b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000043b4 <_vfiprintf_r>:
    43b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    43b6:	b09f      	sub	sp, #124	; 0x7c
    43b8:	0006      	movs	r6, r0
    43ba:	000f      	movs	r7, r1
    43bc:	0014      	movs	r4, r2
    43be:	9305      	str	r3, [sp, #20]
    43c0:	2800      	cmp	r0, #0
    43c2:	d004      	beq.n	43ce <_vfiprintf_r+0x1a>
    43c4:	6983      	ldr	r3, [r0, #24]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d101      	bne.n	43ce <_vfiprintf_r+0x1a>
    43ca:	f7ff fe17 	bl	3ffc <__sinit>
    43ce:	4b7f      	ldr	r3, [pc, #508]	; (45cc <_vfiprintf_r+0x218>)
    43d0:	429f      	cmp	r7, r3
    43d2:	d15c      	bne.n	448e <_vfiprintf_r+0xda>
    43d4:	6877      	ldr	r7, [r6, #4]
    43d6:	89bb      	ldrh	r3, [r7, #12]
    43d8:	071b      	lsls	r3, r3, #28
    43da:	d562      	bpl.n	44a2 <_vfiprintf_r+0xee>
    43dc:	693b      	ldr	r3, [r7, #16]
    43de:	2b00      	cmp	r3, #0
    43e0:	d05f      	beq.n	44a2 <_vfiprintf_r+0xee>
    43e2:	2300      	movs	r3, #0
    43e4:	ad06      	add	r5, sp, #24
    43e6:	616b      	str	r3, [r5, #20]
    43e8:	3320      	adds	r3, #32
    43ea:	766b      	strb	r3, [r5, #25]
    43ec:	3310      	adds	r3, #16
    43ee:	76ab      	strb	r3, [r5, #26]
    43f0:	9402      	str	r4, [sp, #8]
    43f2:	9c02      	ldr	r4, [sp, #8]
    43f4:	7823      	ldrb	r3, [r4, #0]
    43f6:	2b00      	cmp	r3, #0
    43f8:	d15d      	bne.n	44b6 <_vfiprintf_r+0x102>
    43fa:	9b02      	ldr	r3, [sp, #8]
    43fc:	1ae3      	subs	r3, r4, r3
    43fe:	9304      	str	r3, [sp, #16]
    4400:	d00d      	beq.n	441e <_vfiprintf_r+0x6a>
    4402:	9b04      	ldr	r3, [sp, #16]
    4404:	9a02      	ldr	r2, [sp, #8]
    4406:	0039      	movs	r1, r7
    4408:	0030      	movs	r0, r6
    440a:	f7ff ffc0 	bl	438e <__sfputs_r>
    440e:	1c43      	adds	r3, r0, #1
    4410:	d100      	bne.n	4414 <_vfiprintf_r+0x60>
    4412:	e0cc      	b.n	45ae <_vfiprintf_r+0x1fa>
    4414:	696a      	ldr	r2, [r5, #20]
    4416:	9b04      	ldr	r3, [sp, #16]
    4418:	4694      	mov	ip, r2
    441a:	4463      	add	r3, ip
    441c:	616b      	str	r3, [r5, #20]
    441e:	7823      	ldrb	r3, [r4, #0]
    4420:	2b00      	cmp	r3, #0
    4422:	d100      	bne.n	4426 <_vfiprintf_r+0x72>
    4424:	e0c3      	b.n	45ae <_vfiprintf_r+0x1fa>
    4426:	2201      	movs	r2, #1
    4428:	2300      	movs	r3, #0
    442a:	4252      	negs	r2, r2
    442c:	606a      	str	r2, [r5, #4]
    442e:	a902      	add	r1, sp, #8
    4430:	3254      	adds	r2, #84	; 0x54
    4432:	1852      	adds	r2, r2, r1
    4434:	3401      	adds	r4, #1
    4436:	602b      	str	r3, [r5, #0]
    4438:	60eb      	str	r3, [r5, #12]
    443a:	60ab      	str	r3, [r5, #8]
    443c:	7013      	strb	r3, [r2, #0]
    443e:	65ab      	str	r3, [r5, #88]	; 0x58
    4440:	7821      	ldrb	r1, [r4, #0]
    4442:	2205      	movs	r2, #5
    4444:	4862      	ldr	r0, [pc, #392]	; (45d0 <_vfiprintf_r+0x21c>)
    4446:	f000 fb15 	bl	4a74 <memchr>
    444a:	1c63      	adds	r3, r4, #1
    444c:	469c      	mov	ip, r3
    444e:	2800      	cmp	r0, #0
    4450:	d135      	bne.n	44be <_vfiprintf_r+0x10a>
    4452:	6829      	ldr	r1, [r5, #0]
    4454:	06cb      	lsls	r3, r1, #27
    4456:	d504      	bpl.n	4462 <_vfiprintf_r+0xae>
    4458:	2353      	movs	r3, #83	; 0x53
    445a:	aa02      	add	r2, sp, #8
    445c:	3020      	adds	r0, #32
    445e:	189b      	adds	r3, r3, r2
    4460:	7018      	strb	r0, [r3, #0]
    4462:	070b      	lsls	r3, r1, #28
    4464:	d504      	bpl.n	4470 <_vfiprintf_r+0xbc>
    4466:	2353      	movs	r3, #83	; 0x53
    4468:	202b      	movs	r0, #43	; 0x2b
    446a:	aa02      	add	r2, sp, #8
    446c:	189b      	adds	r3, r3, r2
    446e:	7018      	strb	r0, [r3, #0]
    4470:	7823      	ldrb	r3, [r4, #0]
    4472:	2b2a      	cmp	r3, #42	; 0x2a
    4474:	d02c      	beq.n	44d0 <_vfiprintf_r+0x11c>
    4476:	2000      	movs	r0, #0
    4478:	210a      	movs	r1, #10
    447a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    447c:	7822      	ldrb	r2, [r4, #0]
    447e:	3a30      	subs	r2, #48	; 0x30
    4480:	2a09      	cmp	r2, #9
    4482:	d800      	bhi.n	4486 <_vfiprintf_r+0xd2>
    4484:	e06b      	b.n	455e <_vfiprintf_r+0x1aa>
    4486:	2800      	cmp	r0, #0
    4488:	d02a      	beq.n	44e0 <_vfiprintf_r+0x12c>
    448a:	9309      	str	r3, [sp, #36]	; 0x24
    448c:	e028      	b.n	44e0 <_vfiprintf_r+0x12c>
    448e:	4b51      	ldr	r3, [pc, #324]	; (45d4 <_vfiprintf_r+0x220>)
    4490:	429f      	cmp	r7, r3
    4492:	d101      	bne.n	4498 <_vfiprintf_r+0xe4>
    4494:	68b7      	ldr	r7, [r6, #8]
    4496:	e79e      	b.n	43d6 <_vfiprintf_r+0x22>
    4498:	4b4f      	ldr	r3, [pc, #316]	; (45d8 <_vfiprintf_r+0x224>)
    449a:	429f      	cmp	r7, r3
    449c:	d19b      	bne.n	43d6 <_vfiprintf_r+0x22>
    449e:	68f7      	ldr	r7, [r6, #12]
    44a0:	e799      	b.n	43d6 <_vfiprintf_r+0x22>
    44a2:	0039      	movs	r1, r7
    44a4:	0030      	movs	r0, r6
    44a6:	f7ff fc3b 	bl	3d20 <__swsetup_r>
    44aa:	2800      	cmp	r0, #0
    44ac:	d099      	beq.n	43e2 <_vfiprintf_r+0x2e>
    44ae:	2001      	movs	r0, #1
    44b0:	4240      	negs	r0, r0
    44b2:	b01f      	add	sp, #124	; 0x7c
    44b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44b6:	2b25      	cmp	r3, #37	; 0x25
    44b8:	d09f      	beq.n	43fa <_vfiprintf_r+0x46>
    44ba:	3401      	adds	r4, #1
    44bc:	e79a      	b.n	43f4 <_vfiprintf_r+0x40>
    44be:	4b44      	ldr	r3, [pc, #272]	; (45d0 <_vfiprintf_r+0x21c>)
    44c0:	6829      	ldr	r1, [r5, #0]
    44c2:	1ac0      	subs	r0, r0, r3
    44c4:	2301      	movs	r3, #1
    44c6:	4083      	lsls	r3, r0
    44c8:	430b      	orrs	r3, r1
    44ca:	602b      	str	r3, [r5, #0]
    44cc:	4664      	mov	r4, ip
    44ce:	e7b7      	b.n	4440 <_vfiprintf_r+0x8c>
    44d0:	9b05      	ldr	r3, [sp, #20]
    44d2:	1d18      	adds	r0, r3, #4
    44d4:	681b      	ldr	r3, [r3, #0]
    44d6:	9005      	str	r0, [sp, #20]
    44d8:	2b00      	cmp	r3, #0
    44da:	db3a      	blt.n	4552 <_vfiprintf_r+0x19e>
    44dc:	9309      	str	r3, [sp, #36]	; 0x24
    44de:	4664      	mov	r4, ip
    44e0:	7823      	ldrb	r3, [r4, #0]
    44e2:	2b2e      	cmp	r3, #46	; 0x2e
    44e4:	d10b      	bne.n	44fe <_vfiprintf_r+0x14a>
    44e6:	7863      	ldrb	r3, [r4, #1]
    44e8:	1c62      	adds	r2, r4, #1
    44ea:	2b2a      	cmp	r3, #42	; 0x2a
    44ec:	d13f      	bne.n	456e <_vfiprintf_r+0x1ba>
    44ee:	9b05      	ldr	r3, [sp, #20]
    44f0:	3402      	adds	r4, #2
    44f2:	1d1a      	adds	r2, r3, #4
    44f4:	681b      	ldr	r3, [r3, #0]
    44f6:	9205      	str	r2, [sp, #20]
    44f8:	2b00      	cmp	r3, #0
    44fa:	db35      	blt.n	4568 <_vfiprintf_r+0x1b4>
    44fc:	9307      	str	r3, [sp, #28]
    44fe:	7821      	ldrb	r1, [r4, #0]
    4500:	2203      	movs	r2, #3
    4502:	4836      	ldr	r0, [pc, #216]	; (45dc <_vfiprintf_r+0x228>)
    4504:	f000 fab6 	bl	4a74 <memchr>
    4508:	2800      	cmp	r0, #0
    450a:	d007      	beq.n	451c <_vfiprintf_r+0x168>
    450c:	4b33      	ldr	r3, [pc, #204]	; (45dc <_vfiprintf_r+0x228>)
    450e:	682a      	ldr	r2, [r5, #0]
    4510:	1ac0      	subs	r0, r0, r3
    4512:	2340      	movs	r3, #64	; 0x40
    4514:	4083      	lsls	r3, r0
    4516:	4313      	orrs	r3, r2
    4518:	602b      	str	r3, [r5, #0]
    451a:	3401      	adds	r4, #1
    451c:	7821      	ldrb	r1, [r4, #0]
    451e:	1c63      	adds	r3, r4, #1
    4520:	2206      	movs	r2, #6
    4522:	482f      	ldr	r0, [pc, #188]	; (45e0 <_vfiprintf_r+0x22c>)
    4524:	9302      	str	r3, [sp, #8]
    4526:	7629      	strb	r1, [r5, #24]
    4528:	f000 faa4 	bl	4a74 <memchr>
    452c:	2800      	cmp	r0, #0
    452e:	d044      	beq.n	45ba <_vfiprintf_r+0x206>
    4530:	4b2c      	ldr	r3, [pc, #176]	; (45e4 <_vfiprintf_r+0x230>)
    4532:	2b00      	cmp	r3, #0
    4534:	d12f      	bne.n	4596 <_vfiprintf_r+0x1e2>
    4536:	6829      	ldr	r1, [r5, #0]
    4538:	9b05      	ldr	r3, [sp, #20]
    453a:	2207      	movs	r2, #7
    453c:	05c9      	lsls	r1, r1, #23
    453e:	d528      	bpl.n	4592 <_vfiprintf_r+0x1de>
    4540:	189b      	adds	r3, r3, r2
    4542:	4393      	bics	r3, r2
    4544:	3308      	adds	r3, #8
    4546:	9305      	str	r3, [sp, #20]
    4548:	696b      	ldr	r3, [r5, #20]
    454a:	9a03      	ldr	r2, [sp, #12]
    454c:	189b      	adds	r3, r3, r2
    454e:	616b      	str	r3, [r5, #20]
    4550:	e74f      	b.n	43f2 <_vfiprintf_r+0x3e>
    4552:	425b      	negs	r3, r3
    4554:	60eb      	str	r3, [r5, #12]
    4556:	2302      	movs	r3, #2
    4558:	430b      	orrs	r3, r1
    455a:	602b      	str	r3, [r5, #0]
    455c:	e7bf      	b.n	44de <_vfiprintf_r+0x12a>
    455e:	434b      	muls	r3, r1
    4560:	3401      	adds	r4, #1
    4562:	189b      	adds	r3, r3, r2
    4564:	2001      	movs	r0, #1
    4566:	e789      	b.n	447c <_vfiprintf_r+0xc8>
    4568:	2301      	movs	r3, #1
    456a:	425b      	negs	r3, r3
    456c:	e7c6      	b.n	44fc <_vfiprintf_r+0x148>
    456e:	2300      	movs	r3, #0
    4570:	0014      	movs	r4, r2
    4572:	200a      	movs	r0, #10
    4574:	001a      	movs	r2, r3
    4576:	606b      	str	r3, [r5, #4]
    4578:	7821      	ldrb	r1, [r4, #0]
    457a:	3930      	subs	r1, #48	; 0x30
    457c:	2909      	cmp	r1, #9
    457e:	d903      	bls.n	4588 <_vfiprintf_r+0x1d4>
    4580:	2b00      	cmp	r3, #0
    4582:	d0bc      	beq.n	44fe <_vfiprintf_r+0x14a>
    4584:	9207      	str	r2, [sp, #28]
    4586:	e7ba      	b.n	44fe <_vfiprintf_r+0x14a>
    4588:	4342      	muls	r2, r0
    458a:	3401      	adds	r4, #1
    458c:	1852      	adds	r2, r2, r1
    458e:	2301      	movs	r3, #1
    4590:	e7f2      	b.n	4578 <_vfiprintf_r+0x1c4>
    4592:	3307      	adds	r3, #7
    4594:	e7d5      	b.n	4542 <_vfiprintf_r+0x18e>
    4596:	ab05      	add	r3, sp, #20
    4598:	9300      	str	r3, [sp, #0]
    459a:	003a      	movs	r2, r7
    459c:	4b12      	ldr	r3, [pc, #72]	; (45e8 <_vfiprintf_r+0x234>)
    459e:	0029      	movs	r1, r5
    45a0:	0030      	movs	r0, r6
    45a2:	e000      	b.n	45a6 <_vfiprintf_r+0x1f2>
    45a4:	bf00      	nop
    45a6:	9003      	str	r0, [sp, #12]
    45a8:	9b03      	ldr	r3, [sp, #12]
    45aa:	3301      	adds	r3, #1
    45ac:	d1cc      	bne.n	4548 <_vfiprintf_r+0x194>
    45ae:	89bb      	ldrh	r3, [r7, #12]
    45b0:	065b      	lsls	r3, r3, #25
    45b2:	d500      	bpl.n	45b6 <_vfiprintf_r+0x202>
    45b4:	e77b      	b.n	44ae <_vfiprintf_r+0xfa>
    45b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    45b8:	e77b      	b.n	44b2 <_vfiprintf_r+0xfe>
    45ba:	ab05      	add	r3, sp, #20
    45bc:	9300      	str	r3, [sp, #0]
    45be:	003a      	movs	r2, r7
    45c0:	4b09      	ldr	r3, [pc, #36]	; (45e8 <_vfiprintf_r+0x234>)
    45c2:	0029      	movs	r1, r5
    45c4:	0030      	movs	r0, r6
    45c6:	f000 f87f 	bl	46c8 <_printf_i>
    45ca:	e7ec      	b.n	45a6 <_vfiprintf_r+0x1f2>
    45cc:	00004c9c 	.word	0x00004c9c
    45d0:	00004cdc 	.word	0x00004cdc
    45d4:	00004cbc 	.word	0x00004cbc
    45d8:	00004c7c 	.word	0x00004c7c
    45dc:	00004ce2 	.word	0x00004ce2
    45e0:	00004ce6 	.word	0x00004ce6
    45e4:	00000000 	.word	0x00000000
    45e8:	0000438f 	.word	0x0000438f

000045ec <_printf_common>:
    45ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    45ee:	0015      	movs	r5, r2
    45f0:	9301      	str	r3, [sp, #4]
    45f2:	688a      	ldr	r2, [r1, #8]
    45f4:	690b      	ldr	r3, [r1, #16]
    45f6:	9000      	str	r0, [sp, #0]
    45f8:	000c      	movs	r4, r1
    45fa:	4293      	cmp	r3, r2
    45fc:	da00      	bge.n	4600 <_printf_common+0x14>
    45fe:	0013      	movs	r3, r2
    4600:	0022      	movs	r2, r4
    4602:	602b      	str	r3, [r5, #0]
    4604:	3243      	adds	r2, #67	; 0x43
    4606:	7812      	ldrb	r2, [r2, #0]
    4608:	2a00      	cmp	r2, #0
    460a:	d001      	beq.n	4610 <_printf_common+0x24>
    460c:	3301      	adds	r3, #1
    460e:	602b      	str	r3, [r5, #0]
    4610:	6823      	ldr	r3, [r4, #0]
    4612:	069b      	lsls	r3, r3, #26
    4614:	d502      	bpl.n	461c <_printf_common+0x30>
    4616:	682b      	ldr	r3, [r5, #0]
    4618:	3302      	adds	r3, #2
    461a:	602b      	str	r3, [r5, #0]
    461c:	2706      	movs	r7, #6
    461e:	6823      	ldr	r3, [r4, #0]
    4620:	401f      	ands	r7, r3
    4622:	d027      	beq.n	4674 <_printf_common+0x88>
    4624:	0023      	movs	r3, r4
    4626:	3343      	adds	r3, #67	; 0x43
    4628:	781b      	ldrb	r3, [r3, #0]
    462a:	1e5a      	subs	r2, r3, #1
    462c:	4193      	sbcs	r3, r2
    462e:	6822      	ldr	r2, [r4, #0]
    4630:	0692      	lsls	r2, r2, #26
    4632:	d430      	bmi.n	4696 <_printf_common+0xaa>
    4634:	0022      	movs	r2, r4
    4636:	9901      	ldr	r1, [sp, #4]
    4638:	3243      	adds	r2, #67	; 0x43
    463a:	9800      	ldr	r0, [sp, #0]
    463c:	9e08      	ldr	r6, [sp, #32]
    463e:	47b0      	blx	r6
    4640:	1c43      	adds	r3, r0, #1
    4642:	d025      	beq.n	4690 <_printf_common+0xa4>
    4644:	2306      	movs	r3, #6
    4646:	6820      	ldr	r0, [r4, #0]
    4648:	682a      	ldr	r2, [r5, #0]
    464a:	68e1      	ldr	r1, [r4, #12]
    464c:	4003      	ands	r3, r0
    464e:	2500      	movs	r5, #0
    4650:	2b04      	cmp	r3, #4
    4652:	d103      	bne.n	465c <_printf_common+0x70>
    4654:	1a8d      	subs	r5, r1, r2
    4656:	43eb      	mvns	r3, r5
    4658:	17db      	asrs	r3, r3, #31
    465a:	401d      	ands	r5, r3
    465c:	68a3      	ldr	r3, [r4, #8]
    465e:	6922      	ldr	r2, [r4, #16]
    4660:	4293      	cmp	r3, r2
    4662:	dd01      	ble.n	4668 <_printf_common+0x7c>
    4664:	1a9b      	subs	r3, r3, r2
    4666:	18ed      	adds	r5, r5, r3
    4668:	2700      	movs	r7, #0
    466a:	42bd      	cmp	r5, r7
    466c:	d120      	bne.n	46b0 <_printf_common+0xc4>
    466e:	2000      	movs	r0, #0
    4670:	e010      	b.n	4694 <_printf_common+0xa8>
    4672:	3701      	adds	r7, #1
    4674:	68e3      	ldr	r3, [r4, #12]
    4676:	682a      	ldr	r2, [r5, #0]
    4678:	1a9b      	subs	r3, r3, r2
    467a:	429f      	cmp	r7, r3
    467c:	dad2      	bge.n	4624 <_printf_common+0x38>
    467e:	0022      	movs	r2, r4
    4680:	2301      	movs	r3, #1
    4682:	3219      	adds	r2, #25
    4684:	9901      	ldr	r1, [sp, #4]
    4686:	9800      	ldr	r0, [sp, #0]
    4688:	9e08      	ldr	r6, [sp, #32]
    468a:	47b0      	blx	r6
    468c:	1c43      	adds	r3, r0, #1
    468e:	d1f0      	bne.n	4672 <_printf_common+0x86>
    4690:	2001      	movs	r0, #1
    4692:	4240      	negs	r0, r0
    4694:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4696:	2030      	movs	r0, #48	; 0x30
    4698:	18e1      	adds	r1, r4, r3
    469a:	3143      	adds	r1, #67	; 0x43
    469c:	7008      	strb	r0, [r1, #0]
    469e:	0021      	movs	r1, r4
    46a0:	1c5a      	adds	r2, r3, #1
    46a2:	3145      	adds	r1, #69	; 0x45
    46a4:	7809      	ldrb	r1, [r1, #0]
    46a6:	18a2      	adds	r2, r4, r2
    46a8:	3243      	adds	r2, #67	; 0x43
    46aa:	3302      	adds	r3, #2
    46ac:	7011      	strb	r1, [r2, #0]
    46ae:	e7c1      	b.n	4634 <_printf_common+0x48>
    46b0:	0022      	movs	r2, r4
    46b2:	2301      	movs	r3, #1
    46b4:	321a      	adds	r2, #26
    46b6:	9901      	ldr	r1, [sp, #4]
    46b8:	9800      	ldr	r0, [sp, #0]
    46ba:	9e08      	ldr	r6, [sp, #32]
    46bc:	47b0      	blx	r6
    46be:	1c43      	adds	r3, r0, #1
    46c0:	d0e6      	beq.n	4690 <_printf_common+0xa4>
    46c2:	3701      	adds	r7, #1
    46c4:	e7d1      	b.n	466a <_printf_common+0x7e>
	...

000046c8 <_printf_i>:
    46c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46ca:	b08b      	sub	sp, #44	; 0x2c
    46cc:	9206      	str	r2, [sp, #24]
    46ce:	000a      	movs	r2, r1
    46d0:	3243      	adds	r2, #67	; 0x43
    46d2:	9307      	str	r3, [sp, #28]
    46d4:	9005      	str	r0, [sp, #20]
    46d6:	9204      	str	r2, [sp, #16]
    46d8:	7e0a      	ldrb	r2, [r1, #24]
    46da:	000c      	movs	r4, r1
    46dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    46de:	2a6e      	cmp	r2, #110	; 0x6e
    46e0:	d100      	bne.n	46e4 <_printf_i+0x1c>
    46e2:	e08f      	b.n	4804 <_printf_i+0x13c>
    46e4:	d817      	bhi.n	4716 <_printf_i+0x4e>
    46e6:	2a63      	cmp	r2, #99	; 0x63
    46e8:	d02c      	beq.n	4744 <_printf_i+0x7c>
    46ea:	d808      	bhi.n	46fe <_printf_i+0x36>
    46ec:	2a00      	cmp	r2, #0
    46ee:	d100      	bne.n	46f2 <_printf_i+0x2a>
    46f0:	e099      	b.n	4826 <_printf_i+0x15e>
    46f2:	2a58      	cmp	r2, #88	; 0x58
    46f4:	d054      	beq.n	47a0 <_printf_i+0xd8>
    46f6:	0026      	movs	r6, r4
    46f8:	3642      	adds	r6, #66	; 0x42
    46fa:	7032      	strb	r2, [r6, #0]
    46fc:	e029      	b.n	4752 <_printf_i+0x8a>
    46fe:	2a64      	cmp	r2, #100	; 0x64
    4700:	d001      	beq.n	4706 <_printf_i+0x3e>
    4702:	2a69      	cmp	r2, #105	; 0x69
    4704:	d1f7      	bne.n	46f6 <_printf_i+0x2e>
    4706:	6821      	ldr	r1, [r4, #0]
    4708:	681a      	ldr	r2, [r3, #0]
    470a:	0608      	lsls	r0, r1, #24
    470c:	d523      	bpl.n	4756 <_printf_i+0x8e>
    470e:	1d11      	adds	r1, r2, #4
    4710:	6019      	str	r1, [r3, #0]
    4712:	6815      	ldr	r5, [r2, #0]
    4714:	e025      	b.n	4762 <_printf_i+0x9a>
    4716:	2a73      	cmp	r2, #115	; 0x73
    4718:	d100      	bne.n	471c <_printf_i+0x54>
    471a:	e088      	b.n	482e <_printf_i+0x166>
    471c:	d808      	bhi.n	4730 <_printf_i+0x68>
    471e:	2a6f      	cmp	r2, #111	; 0x6f
    4720:	d029      	beq.n	4776 <_printf_i+0xae>
    4722:	2a70      	cmp	r2, #112	; 0x70
    4724:	d1e7      	bne.n	46f6 <_printf_i+0x2e>
    4726:	2220      	movs	r2, #32
    4728:	6809      	ldr	r1, [r1, #0]
    472a:	430a      	orrs	r2, r1
    472c:	6022      	str	r2, [r4, #0]
    472e:	e003      	b.n	4738 <_printf_i+0x70>
    4730:	2a75      	cmp	r2, #117	; 0x75
    4732:	d020      	beq.n	4776 <_printf_i+0xae>
    4734:	2a78      	cmp	r2, #120	; 0x78
    4736:	d1de      	bne.n	46f6 <_printf_i+0x2e>
    4738:	0022      	movs	r2, r4
    473a:	2178      	movs	r1, #120	; 0x78
    473c:	3245      	adds	r2, #69	; 0x45
    473e:	7011      	strb	r1, [r2, #0]
    4740:	4a6c      	ldr	r2, [pc, #432]	; (48f4 <_printf_i+0x22c>)
    4742:	e030      	b.n	47a6 <_printf_i+0xde>
    4744:	000e      	movs	r6, r1
    4746:	681a      	ldr	r2, [r3, #0]
    4748:	3642      	adds	r6, #66	; 0x42
    474a:	1d11      	adds	r1, r2, #4
    474c:	6019      	str	r1, [r3, #0]
    474e:	6813      	ldr	r3, [r2, #0]
    4750:	7033      	strb	r3, [r6, #0]
    4752:	2301      	movs	r3, #1
    4754:	e079      	b.n	484a <_printf_i+0x182>
    4756:	0649      	lsls	r1, r1, #25
    4758:	d5d9      	bpl.n	470e <_printf_i+0x46>
    475a:	1d11      	adds	r1, r2, #4
    475c:	6019      	str	r1, [r3, #0]
    475e:	2300      	movs	r3, #0
    4760:	5ed5      	ldrsh	r5, [r2, r3]
    4762:	2d00      	cmp	r5, #0
    4764:	da03      	bge.n	476e <_printf_i+0xa6>
    4766:	232d      	movs	r3, #45	; 0x2d
    4768:	9a04      	ldr	r2, [sp, #16]
    476a:	426d      	negs	r5, r5
    476c:	7013      	strb	r3, [r2, #0]
    476e:	4b62      	ldr	r3, [pc, #392]	; (48f8 <_printf_i+0x230>)
    4770:	270a      	movs	r7, #10
    4772:	9303      	str	r3, [sp, #12]
    4774:	e02f      	b.n	47d6 <_printf_i+0x10e>
    4776:	6820      	ldr	r0, [r4, #0]
    4778:	6819      	ldr	r1, [r3, #0]
    477a:	0605      	lsls	r5, r0, #24
    477c:	d503      	bpl.n	4786 <_printf_i+0xbe>
    477e:	1d08      	adds	r0, r1, #4
    4780:	6018      	str	r0, [r3, #0]
    4782:	680d      	ldr	r5, [r1, #0]
    4784:	e005      	b.n	4792 <_printf_i+0xca>
    4786:	0640      	lsls	r0, r0, #25
    4788:	d5f9      	bpl.n	477e <_printf_i+0xb6>
    478a:	680d      	ldr	r5, [r1, #0]
    478c:	1d08      	adds	r0, r1, #4
    478e:	6018      	str	r0, [r3, #0]
    4790:	b2ad      	uxth	r5, r5
    4792:	4b59      	ldr	r3, [pc, #356]	; (48f8 <_printf_i+0x230>)
    4794:	2708      	movs	r7, #8
    4796:	9303      	str	r3, [sp, #12]
    4798:	2a6f      	cmp	r2, #111	; 0x6f
    479a:	d018      	beq.n	47ce <_printf_i+0x106>
    479c:	270a      	movs	r7, #10
    479e:	e016      	b.n	47ce <_printf_i+0x106>
    47a0:	3145      	adds	r1, #69	; 0x45
    47a2:	700a      	strb	r2, [r1, #0]
    47a4:	4a54      	ldr	r2, [pc, #336]	; (48f8 <_printf_i+0x230>)
    47a6:	9203      	str	r2, [sp, #12]
    47a8:	681a      	ldr	r2, [r3, #0]
    47aa:	6821      	ldr	r1, [r4, #0]
    47ac:	1d10      	adds	r0, r2, #4
    47ae:	6018      	str	r0, [r3, #0]
    47b0:	6815      	ldr	r5, [r2, #0]
    47b2:	0608      	lsls	r0, r1, #24
    47b4:	d522      	bpl.n	47fc <_printf_i+0x134>
    47b6:	07cb      	lsls	r3, r1, #31
    47b8:	d502      	bpl.n	47c0 <_printf_i+0xf8>
    47ba:	2320      	movs	r3, #32
    47bc:	4319      	orrs	r1, r3
    47be:	6021      	str	r1, [r4, #0]
    47c0:	2710      	movs	r7, #16
    47c2:	2d00      	cmp	r5, #0
    47c4:	d103      	bne.n	47ce <_printf_i+0x106>
    47c6:	2320      	movs	r3, #32
    47c8:	6822      	ldr	r2, [r4, #0]
    47ca:	439a      	bics	r2, r3
    47cc:	6022      	str	r2, [r4, #0]
    47ce:	0023      	movs	r3, r4
    47d0:	2200      	movs	r2, #0
    47d2:	3343      	adds	r3, #67	; 0x43
    47d4:	701a      	strb	r2, [r3, #0]
    47d6:	6863      	ldr	r3, [r4, #4]
    47d8:	60a3      	str	r3, [r4, #8]
    47da:	2b00      	cmp	r3, #0
    47dc:	db5c      	blt.n	4898 <_printf_i+0x1d0>
    47de:	2204      	movs	r2, #4
    47e0:	6821      	ldr	r1, [r4, #0]
    47e2:	4391      	bics	r1, r2
    47e4:	6021      	str	r1, [r4, #0]
    47e6:	2d00      	cmp	r5, #0
    47e8:	d158      	bne.n	489c <_printf_i+0x1d4>
    47ea:	9e04      	ldr	r6, [sp, #16]
    47ec:	2b00      	cmp	r3, #0
    47ee:	d064      	beq.n	48ba <_printf_i+0x1f2>
    47f0:	0026      	movs	r6, r4
    47f2:	9b03      	ldr	r3, [sp, #12]
    47f4:	3642      	adds	r6, #66	; 0x42
    47f6:	781b      	ldrb	r3, [r3, #0]
    47f8:	7033      	strb	r3, [r6, #0]
    47fa:	e05e      	b.n	48ba <_printf_i+0x1f2>
    47fc:	0648      	lsls	r0, r1, #25
    47fe:	d5da      	bpl.n	47b6 <_printf_i+0xee>
    4800:	b2ad      	uxth	r5, r5
    4802:	e7d8      	b.n	47b6 <_printf_i+0xee>
    4804:	6809      	ldr	r1, [r1, #0]
    4806:	681a      	ldr	r2, [r3, #0]
    4808:	0608      	lsls	r0, r1, #24
    480a:	d505      	bpl.n	4818 <_printf_i+0x150>
    480c:	1d11      	adds	r1, r2, #4
    480e:	6019      	str	r1, [r3, #0]
    4810:	6813      	ldr	r3, [r2, #0]
    4812:	6962      	ldr	r2, [r4, #20]
    4814:	601a      	str	r2, [r3, #0]
    4816:	e006      	b.n	4826 <_printf_i+0x15e>
    4818:	0649      	lsls	r1, r1, #25
    481a:	d5f7      	bpl.n	480c <_printf_i+0x144>
    481c:	1d11      	adds	r1, r2, #4
    481e:	6019      	str	r1, [r3, #0]
    4820:	6813      	ldr	r3, [r2, #0]
    4822:	8aa2      	ldrh	r2, [r4, #20]
    4824:	801a      	strh	r2, [r3, #0]
    4826:	2300      	movs	r3, #0
    4828:	9e04      	ldr	r6, [sp, #16]
    482a:	6123      	str	r3, [r4, #16]
    482c:	e054      	b.n	48d8 <_printf_i+0x210>
    482e:	681a      	ldr	r2, [r3, #0]
    4830:	1d11      	adds	r1, r2, #4
    4832:	6019      	str	r1, [r3, #0]
    4834:	6816      	ldr	r6, [r2, #0]
    4836:	2100      	movs	r1, #0
    4838:	6862      	ldr	r2, [r4, #4]
    483a:	0030      	movs	r0, r6
    483c:	f000 f91a 	bl	4a74 <memchr>
    4840:	2800      	cmp	r0, #0
    4842:	d001      	beq.n	4848 <_printf_i+0x180>
    4844:	1b80      	subs	r0, r0, r6
    4846:	6060      	str	r0, [r4, #4]
    4848:	6863      	ldr	r3, [r4, #4]
    484a:	6123      	str	r3, [r4, #16]
    484c:	2300      	movs	r3, #0
    484e:	9a04      	ldr	r2, [sp, #16]
    4850:	7013      	strb	r3, [r2, #0]
    4852:	e041      	b.n	48d8 <_printf_i+0x210>
    4854:	6923      	ldr	r3, [r4, #16]
    4856:	0032      	movs	r2, r6
    4858:	9906      	ldr	r1, [sp, #24]
    485a:	9805      	ldr	r0, [sp, #20]
    485c:	9d07      	ldr	r5, [sp, #28]
    485e:	47a8      	blx	r5
    4860:	1c43      	adds	r3, r0, #1
    4862:	d043      	beq.n	48ec <_printf_i+0x224>
    4864:	6823      	ldr	r3, [r4, #0]
    4866:	2500      	movs	r5, #0
    4868:	079b      	lsls	r3, r3, #30
    486a:	d40f      	bmi.n	488c <_printf_i+0x1c4>
    486c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    486e:	68e0      	ldr	r0, [r4, #12]
    4870:	4298      	cmp	r0, r3
    4872:	da3d      	bge.n	48f0 <_printf_i+0x228>
    4874:	0018      	movs	r0, r3
    4876:	e03b      	b.n	48f0 <_printf_i+0x228>
    4878:	0022      	movs	r2, r4
    487a:	2301      	movs	r3, #1
    487c:	3219      	adds	r2, #25
    487e:	9906      	ldr	r1, [sp, #24]
    4880:	9805      	ldr	r0, [sp, #20]
    4882:	9e07      	ldr	r6, [sp, #28]
    4884:	47b0      	blx	r6
    4886:	1c43      	adds	r3, r0, #1
    4888:	d030      	beq.n	48ec <_printf_i+0x224>
    488a:	3501      	adds	r5, #1
    488c:	68e3      	ldr	r3, [r4, #12]
    488e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4890:	1a9b      	subs	r3, r3, r2
    4892:	429d      	cmp	r5, r3
    4894:	dbf0      	blt.n	4878 <_printf_i+0x1b0>
    4896:	e7e9      	b.n	486c <_printf_i+0x1a4>
    4898:	2d00      	cmp	r5, #0
    489a:	d0a9      	beq.n	47f0 <_printf_i+0x128>
    489c:	9e04      	ldr	r6, [sp, #16]
    489e:	0028      	movs	r0, r5
    48a0:	0039      	movs	r1, r7
    48a2:	f7fd fb03 	bl	1eac <__aeabi_uidivmod>
    48a6:	9b03      	ldr	r3, [sp, #12]
    48a8:	3e01      	subs	r6, #1
    48aa:	5c5b      	ldrb	r3, [r3, r1]
    48ac:	0028      	movs	r0, r5
    48ae:	7033      	strb	r3, [r6, #0]
    48b0:	0039      	movs	r1, r7
    48b2:	f7fd fa75 	bl	1da0 <__udivsi3>
    48b6:	1e05      	subs	r5, r0, #0
    48b8:	d1f1      	bne.n	489e <_printf_i+0x1d6>
    48ba:	2f08      	cmp	r7, #8
    48bc:	d109      	bne.n	48d2 <_printf_i+0x20a>
    48be:	6823      	ldr	r3, [r4, #0]
    48c0:	07db      	lsls	r3, r3, #31
    48c2:	d506      	bpl.n	48d2 <_printf_i+0x20a>
    48c4:	6863      	ldr	r3, [r4, #4]
    48c6:	6922      	ldr	r2, [r4, #16]
    48c8:	4293      	cmp	r3, r2
    48ca:	dc02      	bgt.n	48d2 <_printf_i+0x20a>
    48cc:	2330      	movs	r3, #48	; 0x30
    48ce:	3e01      	subs	r6, #1
    48d0:	7033      	strb	r3, [r6, #0]
    48d2:	9b04      	ldr	r3, [sp, #16]
    48d4:	1b9b      	subs	r3, r3, r6
    48d6:	6123      	str	r3, [r4, #16]
    48d8:	9b07      	ldr	r3, [sp, #28]
    48da:	aa09      	add	r2, sp, #36	; 0x24
    48dc:	9300      	str	r3, [sp, #0]
    48de:	0021      	movs	r1, r4
    48e0:	9b06      	ldr	r3, [sp, #24]
    48e2:	9805      	ldr	r0, [sp, #20]
    48e4:	f7ff fe82 	bl	45ec <_printf_common>
    48e8:	1c43      	adds	r3, r0, #1
    48ea:	d1b3      	bne.n	4854 <_printf_i+0x18c>
    48ec:	2001      	movs	r0, #1
    48ee:	4240      	negs	r0, r0
    48f0:	b00b      	add	sp, #44	; 0x2c
    48f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48f4:	00004cfe 	.word	0x00004cfe
    48f8:	00004ced 	.word	0x00004ced

000048fc <_sbrk_r>:
    48fc:	2300      	movs	r3, #0
    48fe:	b570      	push	{r4, r5, r6, lr}
    4900:	4c06      	ldr	r4, [pc, #24]	; (491c <_sbrk_r+0x20>)
    4902:	0005      	movs	r5, r0
    4904:	0008      	movs	r0, r1
    4906:	6023      	str	r3, [r4, #0]
    4908:	f7fd f9f0 	bl	1cec <_sbrk>
    490c:	1c43      	adds	r3, r0, #1
    490e:	d103      	bne.n	4918 <_sbrk_r+0x1c>
    4910:	6823      	ldr	r3, [r4, #0]
    4912:	2b00      	cmp	r3, #0
    4914:	d000      	beq.n	4918 <_sbrk_r+0x1c>
    4916:	602b      	str	r3, [r5, #0]
    4918:	bd70      	pop	{r4, r5, r6, pc}
    491a:	46c0      	nop			; (mov r8, r8)
    491c:	2000013c 	.word	0x2000013c

00004920 <__sread>:
    4920:	b570      	push	{r4, r5, r6, lr}
    4922:	000c      	movs	r4, r1
    4924:	250e      	movs	r5, #14
    4926:	5f49      	ldrsh	r1, [r1, r5]
    4928:	f000 f8b2 	bl	4a90 <_read_r>
    492c:	2800      	cmp	r0, #0
    492e:	db03      	blt.n	4938 <__sread+0x18>
    4930:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4932:	181b      	adds	r3, r3, r0
    4934:	6563      	str	r3, [r4, #84]	; 0x54
    4936:	bd70      	pop	{r4, r5, r6, pc}
    4938:	89a3      	ldrh	r3, [r4, #12]
    493a:	4a02      	ldr	r2, [pc, #8]	; (4944 <__sread+0x24>)
    493c:	4013      	ands	r3, r2
    493e:	81a3      	strh	r3, [r4, #12]
    4940:	e7f9      	b.n	4936 <__sread+0x16>
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	ffffefff 	.word	0xffffefff

00004948 <__swrite>:
    4948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    494a:	001f      	movs	r7, r3
    494c:	898b      	ldrh	r3, [r1, #12]
    494e:	0005      	movs	r5, r0
    4950:	000c      	movs	r4, r1
    4952:	0016      	movs	r6, r2
    4954:	05db      	lsls	r3, r3, #23
    4956:	d505      	bpl.n	4964 <__swrite+0x1c>
    4958:	230e      	movs	r3, #14
    495a:	5ec9      	ldrsh	r1, [r1, r3]
    495c:	2200      	movs	r2, #0
    495e:	2302      	movs	r3, #2
    4960:	f000 f874 	bl	4a4c <_lseek_r>
    4964:	89a3      	ldrh	r3, [r4, #12]
    4966:	4a05      	ldr	r2, [pc, #20]	; (497c <__swrite+0x34>)
    4968:	0028      	movs	r0, r5
    496a:	4013      	ands	r3, r2
    496c:	81a3      	strh	r3, [r4, #12]
    496e:	0032      	movs	r2, r6
    4970:	230e      	movs	r3, #14
    4972:	5ee1      	ldrsh	r1, [r4, r3]
    4974:	003b      	movs	r3, r7
    4976:	f000 f81f 	bl	49b8 <_write_r>
    497a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    497c:	ffffefff 	.word	0xffffefff

00004980 <__sseek>:
    4980:	b570      	push	{r4, r5, r6, lr}
    4982:	000c      	movs	r4, r1
    4984:	250e      	movs	r5, #14
    4986:	5f49      	ldrsh	r1, [r1, r5]
    4988:	f000 f860 	bl	4a4c <_lseek_r>
    498c:	89a3      	ldrh	r3, [r4, #12]
    498e:	1c42      	adds	r2, r0, #1
    4990:	d103      	bne.n	499a <__sseek+0x1a>
    4992:	4a05      	ldr	r2, [pc, #20]	; (49a8 <__sseek+0x28>)
    4994:	4013      	ands	r3, r2
    4996:	81a3      	strh	r3, [r4, #12]
    4998:	bd70      	pop	{r4, r5, r6, pc}
    499a:	2280      	movs	r2, #128	; 0x80
    499c:	0152      	lsls	r2, r2, #5
    499e:	4313      	orrs	r3, r2
    49a0:	81a3      	strh	r3, [r4, #12]
    49a2:	6560      	str	r0, [r4, #84]	; 0x54
    49a4:	e7f8      	b.n	4998 <__sseek+0x18>
    49a6:	46c0      	nop			; (mov r8, r8)
    49a8:	ffffefff 	.word	0xffffefff

000049ac <__sclose>:
    49ac:	b510      	push	{r4, lr}
    49ae:	230e      	movs	r3, #14
    49b0:	5ec9      	ldrsh	r1, [r1, r3]
    49b2:	f000 f815 	bl	49e0 <_close_r>
    49b6:	bd10      	pop	{r4, pc}

000049b8 <_write_r>:
    49b8:	b570      	push	{r4, r5, r6, lr}
    49ba:	0005      	movs	r5, r0
    49bc:	0008      	movs	r0, r1
    49be:	0011      	movs	r1, r2
    49c0:	2200      	movs	r2, #0
    49c2:	4c06      	ldr	r4, [pc, #24]	; (49dc <_write_r+0x24>)
    49c4:	6022      	str	r2, [r4, #0]
    49c6:	001a      	movs	r2, r3
    49c8:	f7fd f968 	bl	1c9c <_write>
    49cc:	1c43      	adds	r3, r0, #1
    49ce:	d103      	bne.n	49d8 <_write_r+0x20>
    49d0:	6823      	ldr	r3, [r4, #0]
    49d2:	2b00      	cmp	r3, #0
    49d4:	d000      	beq.n	49d8 <_write_r+0x20>
    49d6:	602b      	str	r3, [r5, #0]
    49d8:	bd70      	pop	{r4, r5, r6, pc}
    49da:	46c0      	nop			; (mov r8, r8)
    49dc:	2000013c 	.word	0x2000013c

000049e0 <_close_r>:
    49e0:	2300      	movs	r3, #0
    49e2:	b570      	push	{r4, r5, r6, lr}
    49e4:	4c06      	ldr	r4, [pc, #24]	; (4a00 <_close_r+0x20>)
    49e6:	0005      	movs	r5, r0
    49e8:	0008      	movs	r0, r1
    49ea:	6023      	str	r3, [r4, #0]
    49ec:	f7fd f990 	bl	1d10 <_close>
    49f0:	1c43      	adds	r3, r0, #1
    49f2:	d103      	bne.n	49fc <_close_r+0x1c>
    49f4:	6823      	ldr	r3, [r4, #0]
    49f6:	2b00      	cmp	r3, #0
    49f8:	d000      	beq.n	49fc <_close_r+0x1c>
    49fa:	602b      	str	r3, [r5, #0]
    49fc:	bd70      	pop	{r4, r5, r6, pc}
    49fe:	46c0      	nop			; (mov r8, r8)
    4a00:	2000013c 	.word	0x2000013c

00004a04 <_fstat_r>:
    4a04:	2300      	movs	r3, #0
    4a06:	b570      	push	{r4, r5, r6, lr}
    4a08:	4c06      	ldr	r4, [pc, #24]	; (4a24 <_fstat_r+0x20>)
    4a0a:	0005      	movs	r5, r0
    4a0c:	0008      	movs	r0, r1
    4a0e:	0011      	movs	r1, r2
    4a10:	6023      	str	r3, [r4, #0]
    4a12:	f7fd f980 	bl	1d16 <_fstat>
    4a16:	1c43      	adds	r3, r0, #1
    4a18:	d103      	bne.n	4a22 <_fstat_r+0x1e>
    4a1a:	6823      	ldr	r3, [r4, #0]
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d000      	beq.n	4a22 <_fstat_r+0x1e>
    4a20:	602b      	str	r3, [r5, #0]
    4a22:	bd70      	pop	{r4, r5, r6, pc}
    4a24:	2000013c 	.word	0x2000013c

00004a28 <_isatty_r>:
    4a28:	2300      	movs	r3, #0
    4a2a:	b570      	push	{r4, r5, r6, lr}
    4a2c:	4c06      	ldr	r4, [pc, #24]	; (4a48 <_isatty_r+0x20>)
    4a2e:	0005      	movs	r5, r0
    4a30:	0008      	movs	r0, r1
    4a32:	6023      	str	r3, [r4, #0]
    4a34:	f7fd f974 	bl	1d20 <_isatty>
    4a38:	1c43      	adds	r3, r0, #1
    4a3a:	d103      	bne.n	4a44 <_isatty_r+0x1c>
    4a3c:	6823      	ldr	r3, [r4, #0]
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d000      	beq.n	4a44 <_isatty_r+0x1c>
    4a42:	602b      	str	r3, [r5, #0]
    4a44:	bd70      	pop	{r4, r5, r6, pc}
    4a46:	46c0      	nop			; (mov r8, r8)
    4a48:	2000013c 	.word	0x2000013c

00004a4c <_lseek_r>:
    4a4c:	b570      	push	{r4, r5, r6, lr}
    4a4e:	0005      	movs	r5, r0
    4a50:	0008      	movs	r0, r1
    4a52:	0011      	movs	r1, r2
    4a54:	2200      	movs	r2, #0
    4a56:	4c06      	ldr	r4, [pc, #24]	; (4a70 <_lseek_r+0x24>)
    4a58:	6022      	str	r2, [r4, #0]
    4a5a:	001a      	movs	r2, r3
    4a5c:	f7fd f962 	bl	1d24 <_lseek>
    4a60:	1c43      	adds	r3, r0, #1
    4a62:	d103      	bne.n	4a6c <_lseek_r+0x20>
    4a64:	6823      	ldr	r3, [r4, #0]
    4a66:	2b00      	cmp	r3, #0
    4a68:	d000      	beq.n	4a6c <_lseek_r+0x20>
    4a6a:	602b      	str	r3, [r5, #0]
    4a6c:	bd70      	pop	{r4, r5, r6, pc}
    4a6e:	46c0      	nop			; (mov r8, r8)
    4a70:	2000013c 	.word	0x2000013c

00004a74 <memchr>:
    4a74:	b2c9      	uxtb	r1, r1
    4a76:	1882      	adds	r2, r0, r2
    4a78:	4290      	cmp	r0, r2
    4a7a:	d101      	bne.n	4a80 <memchr+0xc>
    4a7c:	2000      	movs	r0, #0
    4a7e:	4770      	bx	lr
    4a80:	7803      	ldrb	r3, [r0, #0]
    4a82:	428b      	cmp	r3, r1
    4a84:	d0fb      	beq.n	4a7e <memchr+0xa>
    4a86:	3001      	adds	r0, #1
    4a88:	e7f6      	b.n	4a78 <memchr+0x4>

00004a8a <__malloc_lock>:
    4a8a:	4770      	bx	lr

00004a8c <__malloc_unlock>:
    4a8c:	4770      	bx	lr
	...

00004a90 <_read_r>:
    4a90:	b570      	push	{r4, r5, r6, lr}
    4a92:	0005      	movs	r5, r0
    4a94:	0008      	movs	r0, r1
    4a96:	0011      	movs	r1, r2
    4a98:	2200      	movs	r2, #0
    4a9a:	4c06      	ldr	r4, [pc, #24]	; (4ab4 <_read_r+0x24>)
    4a9c:	6022      	str	r2, [r4, #0]
    4a9e:	001a      	movs	r2, r3
    4aa0:	f7fd f8da 	bl	1c58 <_read>
    4aa4:	1c43      	adds	r3, r0, #1
    4aa6:	d103      	bne.n	4ab0 <_read_r+0x20>
    4aa8:	6823      	ldr	r3, [r4, #0]
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d000      	beq.n	4ab0 <_read_r+0x20>
    4aae:	602b      	str	r3, [r5, #0]
    4ab0:	bd70      	pop	{r4, r5, r6, pc}
    4ab2:	46c0      	nop			; (mov r8, r8)
    4ab4:	2000013c 	.word	0x2000013c
    4ab8:	6c696166 	.word	0x6c696166
    4abc:	74206465 	.word	0x74206465
    4ac0:	6e69206f 	.word	0x6e69206f
    4ac4:	61697469 	.word	0x61697469
    4ac8:	657a696c 	.word	0x657a696c
    4acc:	4c535420 	.word	0x4c535420
    4ad0:	31363532 	.word	0x31363532
    4ad4:	69726420 	.word	0x69726420
    4ad8:	2e726576 	.word	0x2e726576
    4adc:	0000000d 	.word	0x0000000d
    4ae0:	6c696166 	.word	0x6c696166
    4ae4:	74206465 	.word	0x74206465
    4ae8:	6573206f 	.word	0x6573206f
    4aec:	7220646e 	.word	0x7220646e
    4af0:	73696765 	.word	0x73696765
    4af4:	20726574 	.word	0x20726574
    4af8:	75716572 	.word	0x75716572
    4afc:	20747365 	.word	0x20747365
    4b00:	20726f66 	.word	0x20726f66
    4b04:	6d6d6f63 	.word	0x6d6d6f63
    4b08:	20646e61 	.word	0x20646e61
    4b0c:	30257830 	.word	0x30257830
    4b10:	0d217832 	.word	0x0d217832
    4b14:	0000000a 	.word	0x0000000a
    4b18:	6c696166 	.word	0x6c696166
    4b1c:	74206465 	.word	0x74206465
    4b20:	6572206f 	.word	0x6572206f
    4b24:	76696563 	.word	0x76696563
    4b28:	79622065 	.word	0x79622065
    4b2c:	20736574 	.word	0x20736574
    4b30:	20726f66 	.word	0x20726f66
    4b34:	6d6d6f63 	.word	0x6d6d6f63
    4b38:	20646e61 	.word	0x20646e61
    4b3c:	30257830 	.word	0x30257830
    4b40:	0d217832 	.word	0x0d217832
    4b44:	0000000a 	.word	0x0000000a
    4b48:	42000800 	.word	0x42000800
    4b4c:	42000c00 	.word	0x42000c00
    4b50:	42001000 	.word	0x42001000
    4b54:	42001400 	.word	0x42001400
    4b58:	42001800 	.word	0x42001800
    4b5c:	42001c00 	.word	0x42001c00
    4b60:	000015e6 	.word	0x000015e6
    4b64:	000015e2 	.word	0x000015e2
    4b68:	000015e2 	.word	0x000015e2
    4b6c:	00001644 	.word	0x00001644
    4b70:	00001644 	.word	0x00001644
    4b74:	000015fa 	.word	0x000015fa
    4b78:	000015ec 	.word	0x000015ec
    4b7c:	00001600 	.word	0x00001600
    4b80:	00001632 	.word	0x00001632
    4b84:	000016cc 	.word	0x000016cc
    4b88:	000016ac 	.word	0x000016ac
    4b8c:	000016ac 	.word	0x000016ac
    4b90:	00001738 	.word	0x00001738
    4b94:	000016be 	.word	0x000016be
    4b98:	000016da 	.word	0x000016da
    4b9c:	000016b0 	.word	0x000016b0
    4ba0:	000016e8 	.word	0x000016e8
    4ba4:	00001728 	.word	0x00001728
    4ba8:	2d2d2d2d 	.word	0x2d2d2d2d
    4bac:	4c535420 	.word	0x4c535420
    4bb0:	31363532 	.word	0x31363532
    4bb4:	69724420 	.word	0x69724420
    4bb8:	20726576 	.word	0x20726576
    4bbc:	6d617845 	.word	0x6d617845
    4bc0:	20656c70 	.word	0x20656c70
    4bc4:	0d2d2d2d 	.word	0x0d2d2d2d
    4bc8:	00000000 	.word	0x00000000
    4bcc:	2078754c 	.word	0x2078754c
    4bd0:	69766544 	.word	0x69766544
    4bd4:	49206563 	.word	0x49206563
    4bd8:	30203a44 	.word	0x30203a44
    4bdc:	32302578 	.word	0x32302578
    4be0:	000a0d78 	.word	0x000a0d78
    4be4:	72727543 	.word	0x72727543
    4be8:	20746e65 	.word	0x20746e65
    4bec:	3a78754c 	.word	0x3a78754c
    4bf0:	0d642520 	.word	0x0d642520
    4bf4:	0000000a 	.word	0x0000000a
    4bf8:	000028f8 	.word	0x000028f8
    4bfc:	000028da 	.word	0x000028da
    4c00:	00002894 	.word	0x00002894
    4c04:	000027b2 	.word	0x000027b2
    4c08:	00002894 	.word	0x00002894
    4c0c:	000028cc 	.word	0x000028cc
    4c10:	00002894 	.word	0x00002894
    4c14:	000027b2 	.word	0x000027b2
    4c18:	000028da 	.word	0x000028da
    4c1c:	000028da 	.word	0x000028da
    4c20:	000028cc 	.word	0x000028cc
    4c24:	000027b2 	.word	0x000027b2
    4c28:	000027aa 	.word	0x000027aa
    4c2c:	000027aa 	.word	0x000027aa
    4c30:	000027aa 	.word	0x000027aa
    4c34:	00002b10 	.word	0x00002b10
    4c38:	00002f58 	.word	0x00002f58
    4c3c:	00002e18 	.word	0x00002e18
    4c40:	00002e18 	.word	0x00002e18
    4c44:	00002e14 	.word	0x00002e14
    4c48:	00002f30 	.word	0x00002f30
    4c4c:	00002f30 	.word	0x00002f30
    4c50:	00002f22 	.word	0x00002f22
    4c54:	00002e14 	.word	0x00002e14
    4c58:	00002f30 	.word	0x00002f30
    4c5c:	00002f22 	.word	0x00002f22
    4c60:	00002f30 	.word	0x00002f30
    4c64:	00002e14 	.word	0x00002e14
    4c68:	00002f38 	.word	0x00002f38
    4c6c:	00002f38 	.word	0x00002f38
    4c70:	00002f38 	.word	0x00002f38
    4c74:	0000313c 	.word	0x0000313c

00004c78 <_global_impure_ptr>:
    4c78:	20000010                                ... 

00004c7c <__sf_fake_stderr>:
	...

00004c9c <__sf_fake_stdin>:
	...

00004cbc <__sf_fake_stdout>:
	...
    4cdc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4cec:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4cfc:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4d0c:	00006665                                ef..

00004d10 <_init>:
    4d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d12:	46c0      	nop			; (mov r8, r8)
    4d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4d16:	bc08      	pop	{r3}
    4d18:	469e      	mov	lr, r3
    4d1a:	4770      	bx	lr

00004d1c <__init_array_start>:
    4d1c:	000000dd 	.word	0x000000dd

00004d20 <_fini>:
    4d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d22:	46c0      	nop			; (mov r8, r8)
    4d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4d26:	bc08      	pop	{r3}
    4d28:	469e      	mov	lr, r3
    4d2a:	4770      	bx	lr

00004d2c <__fini_array_start>:
    4d2c:	000000b5 	.word	0x000000b5
