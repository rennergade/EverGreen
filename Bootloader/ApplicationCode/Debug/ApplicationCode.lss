
ApplicationCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c64  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00003c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000178  20000074  00003cd8  00020074  2**2
                  ALLOC
  3 .stack        00002004  200001ec  00003e50  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003d9d4  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000053aa  00000000  00000000  0005dac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000006d8  00000000  00000000  00062e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001130  00000000  00000000  0006354b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001c429  00000000  00000000  0006467b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000123b7  00000000  00000000  00080aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00089e12  00000000  00000000  00092e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000017fc  00000000  00000000  0011cc70  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d14e  00000000  00000000  0011e46c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 21 00 20 75 22 00 00 71 22 00 00 71 22 00 00     .!. u"..q"..q"..
	...
      2c:	71 22 00 00 00 00 00 00 00 00 00 00 71 22 00 00     q"..........q"..
      3c:	71 22 00 00 71 22 00 00 71 22 00 00 55 22 00 00     q"..q"..q"..U"..
      4c:	71 22 00 00 19 0a 00 00 71 22 00 00 71 22 00 00     q"......q"..q"..
      5c:	71 22 00 00 71 22 00 00 81 0f 00 00 91 0f 00 00     q"..q"..........
      6c:	a1 0f 00 00 b1 0f 00 00 c1 0f 00 00 d1 0f 00 00     ................
      7c:	71 22 00 00 71 22 00 00 71 22 00 00 71 22 00 00     q"..q"..q"..q"..
      8c:	71 22 00 00 71 22 00 00 00 00 00 00 00 00 00 00     q"..q"..........
      9c:	71 22 00 00 09 0a 00 00 71 22 00 00 71 22 00 00     q"......q"..q"..
      ac:	71 22 00 00 00 00 00 00                             q"......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	00003c64 	.word	0x00003c64

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	00003c64 	.word	0x00003c64
     10c:	00003c64 	.word	0x00003c64
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     114:	4770      	bx	lr
	...

00000118 <at25dfx_chip_check_presence>:
	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
	Assert(status == STATUS_OK);

	if (cmd.length) {
     118:	b530      	push	{r4, r5, lr}
     11a:	b085      	sub	sp, #20
     11c:	0004      	movs	r4, r0
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     11e:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     120:	9303      	str	r3, [sp, #12]
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     122:	6805      	ldr	r5, [r0, #0]
	if (port_index < PORT_INST_NUM) {
     124:	4b2f      	ldr	r3, [pc, #188]	; (1e4 <at25dfx_chip_check_presence+0xcc>)
     126:	4798      	blx	r3
		return &(ports[port_index]->Group[group_index]);
     128:	792b      	ldrb	r3, [r5, #4]
     12a:	2b00      	cmp	r3, #0
     12c:	d156      	bne.n	1dc <at25dfx_chip_check_presence+0xc4>
     12e:	3301      	adds	r3, #1
     130:	712b      	strb	r3, [r5, #4]
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     132:	4b2d      	ldr	r3, [pc, #180]	; (1e8 <at25dfx_chip_check_presence+0xd0>)
     134:	4798      	blx	r3
     136:	229f      	movs	r2, #159	; 0x9f
     138:	ab01      	add	r3, sp, #4

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     13a:	701a      	strb	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     13c:	7962      	ldrb	r2, [r4, #5]
     13e:	09d1      	lsrs	r1, r2, #7
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
     140:	2300      	movs	r3, #0

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     142:	2900      	cmp	r1, #0
     144:	d104      	bne.n	150 <at25dfx_chip_check_presence+0x38>
     146:	0953      	lsrs	r3, r2, #5
	port_pin_set_output_level(chip->cs_pin, false);
     148:	01db      	lsls	r3, r3, #7
	if (port_index < PORT_INST_NUM) {
     14a:	4928      	ldr	r1, [pc, #160]	; (1ec <at25dfx_chip_check_presence+0xd4>)
		return NULL;
     14c:	468c      	mov	ip, r1
	if (port_index < PORT_INST_NUM) {
     14e:	4463      	add	r3, ip
     150:	211f      	movs	r1, #31
		return &(ports[port_index]->Group[group_index]);
     152:	4011      	ands	r1, r2
     154:	2201      	movs	r2, #1
     156:	408a      	lsls	r2, r1
     158:	615a      	str	r2, [r3, #20]
     15a:	2201      	movs	r2, #1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     15c:	a901      	add	r1, sp, #4
     15e:	6820      	ldr	r0, [r4, #0]
     160:	4b23      	ldr	r3, [pc, #140]	; (1f0 <at25dfx_chip_check_presence+0xd8>)
     162:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     164:	2300      	movs	r3, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     166:	2203      	movs	r2, #3
     168:	a903      	add	r1, sp, #12
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     16a:	6820      	ldr	r0, [r4, #0]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     16c:	4d21      	ldr	r5, [pc, #132]	; (1f4 <at25dfx_chip_check_presence+0xdc>)
     16e:	47a8      	blx	r5
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     170:	7962      	ldrb	r2, [r4, #5]
     172:	09d1      	lsrs	r1, r2, #7

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
     174:	2300      	movs	r3, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
     176:	2900      	cmp	r1, #0
     178:	d104      	bne.n	184 <at25dfx_chip_check_presence+0x6c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     17a:	0953      	lsrs	r3, r2, #5
     17c:	01db      	lsls	r3, r3, #7
     17e:	491b      	ldr	r1, [pc, #108]	; (1ec <at25dfx_chip_check_presence+0xd4>)
     180:	468c      	mov	ip, r1
	uint16_t status_reg = 0;
     182:	4463      	add	r3, ip
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     184:	211f      	movs	r1, #31
     186:	4011      	ands	r1, r2

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     188:	2201      	movs	r2, #1
     18a:	408a      	lsls	r2, r1
     18c:	619a      	str	r2, [r3, #24]
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     18e:	2300      	movs	r3, #0
     190:	6822      	ldr	r2, [r4, #0]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     192:	7113      	strb	r3, [r2, #4]
     194:	7923      	ldrb	r3, [r4, #4]
     196:	2b09      	cmp	r3, #9
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     198:	d815      	bhi.n	1c6 <at25dfx_chip_check_presence+0xae>
     19a:	009b      	lsls	r3, r3, #2

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     19c:	4a16      	ldr	r2, [pc, #88]	; (1f8 <at25dfx_chip_check_presence+0xe0>)
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     19e:	58d3      	ldr	r3, [r2, r3]
     1a0:	469f      	mov	pc, r3
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     1a2:	4b16      	ldr	r3, [pc, #88]	; (1fc <at25dfx_chip_check_presence+0xe4>)
     1a4:	e012      	b.n	1cc <at25dfx_chip_check_presence+0xb4>
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <at25dfx_chip_check_presence+0xe8>)
     1a8:	e010      	b.n	1cc <at25dfx_chip_check_presence+0xb4>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     1aa:	4b16      	ldr	r3, [pc, #88]	; (204 <at25dfx_chip_check_presence+0xec>)
     1ac:	e00e      	b.n	1cc <at25dfx_chip_check_presence+0xb4>
     1ae:	4b16      	ldr	r3, [pc, #88]	; (208 <at25dfx_chip_check_presence+0xf0>)
     1b0:	e00c      	b.n	1cc <at25dfx_chip_check_presence+0xb4>
     1b2:	4b16      	ldr	r3, [pc, #88]	; (20c <at25dfx_chip_check_presence+0xf4>)
     1b4:	e00a      	b.n	1cc <at25dfx_chip_check_presence+0xb4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     1b6:	4b16      	ldr	r3, [pc, #88]	; (210 <at25dfx_chip_check_presence+0xf8>)
     1b8:	e008      	b.n	1cc <at25dfx_chip_check_presence+0xb4>
     1ba:	4b16      	ldr	r3, [pc, #88]	; (214 <at25dfx_chip_check_presence+0xfc>)
     1bc:	e006      	b.n	1cc <at25dfx_chip_check_presence+0xb4>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     1be:	4b16      	ldr	r3, [pc, #88]	; (218 <at25dfx_chip_check_presence+0x100>)
     1c0:	e004      	b.n	1cc <at25dfx_chip_check_presence+0xb4>
     1c2:	4b16      	ldr	r3, [pc, #88]	; (21c <at25dfx_chip_check_presence+0x104>)
		*rx_data = (uint8_t)spi_module->DATA.reg;
     1c4:	e002      	b.n	1cc <at25dfx_chip_check_presence+0xb4>
     1c6:	2300      	movs	r3, #0
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     1c8:	e000      	b.n	1cc <at25dfx_chip_check_presence+0xb4>
     1ca:	4b15      	ldr	r3, [pc, #84]	; (220 <at25dfx_chip_check_presence+0x108>)
	SercomSpi *const spi_module = &(module->hw->SPI);
     1cc:	9a03      	ldr	r2, [sp, #12]
     1ce:	429a      	cmp	r2, r3
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     1d0:	d002      	beq.n	1d8 <at25dfx_chip_check_presence+0xc0>
		while (!spi_is_ready_to_write(chip->spi)) {
     1d2:	2014      	movs	r0, #20
     1d4:	b005      	add	sp, #20
     1d6:	bd30      	pop	{r4, r5, pc}
	if (!spi_is_ready_to_write(module)) {
     1d8:	2000      	movs	r0, #0
     1da:	e7fb      	b.n	1d4 <at25dfx_chip_check_presence+0xbc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     1dc:	4b02      	ldr	r3, [pc, #8]	; (1e8 <at25dfx_chip_check_presence+0xd0>)
     1de:	4798      	blx	r3
		while (!spi_is_ready_to_read(chip->spi)) {
     1e0:	2005      	movs	r0, #5
	SercomSpi *const spi_module = &(module->hw->SPI);
     1e2:	e7f7      	b.n	1d4 <at25dfx_chip_check_presence+0xbc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     1e4:	00000949 	.word	0x00000949
     1e8:	00000989 	.word	0x00000989
	if (!spi_is_ready_to_read(module)) {
     1ec:	41004400 	.word	0x41004400
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     1f0:	00001311 	.word	0x00001311
     1f4:	000011f5 	.word	0x000011f5
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     1f8:	00003a58 	.word	0x00003a58
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     1fc:	0000431f 	.word	0x0000431f
     200:	0001441f 	.word	0x0001441f
     204:	0002451f 	.word	0x0002451f
	if (port_index < PORT_INST_NUM) {
     208:	0001451f 	.word	0x0001451f
     20c:	0002461f 	.word	0x0002461f
		return &(ports[port_index]->Group[group_index]);
     210:	0003461f 	.word	0x0003461f
     214:	0000861f 	.word	0x0000861f
     218:	0001471f 	.word	0x0001471f
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     21c:	0000481f 	.word	0x0000481f
     220:	0000651f 	.word	0x0000651f

00000224 <at25dfx_chip_read_buffer>:

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
     224:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (status_reg & AT25DFX_STATUS_ERROR) {
     226:	b085      	sub	sp, #20
     228:	0004      	movs	r4, r0
	cmd.length = min(page_bytes, length);
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	status = _at25dfx_chip_get_nonbusy_status(chip);

	length -= cmd.length;
     22a:	000e      	movs	r6, r1
     22c:	9201      	str	r2, [sp, #4]
     22e:	001f      	movs	r7, r3
     230:	185a      	adds	r2, r3, r1

	while (length && (status == STATUS_OK)) {
     232:	7903      	ldrb	r3, [r0, #4]
     234:	2b09      	cmp	r3, #9
	}
	return STATUS_OK;
     236:	d815      	bhi.n	264 <at25dfx_chip_read_buffer+0x40>
     238:	009b      	lsls	r3, r3, #2
     23a:	4932      	ldr	r1, [pc, #200]	; (304 <at25dfx_chip_read_buffer+0xe0>)
     23c:	58cb      	ldr	r3, [r1, r3]
     23e:	469f      	mov	pc, r3
     240:	2380      	movs	r3, #128	; 0x80
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     242:	02db      	lsls	r3, r3, #11
     244:	e012      	b.n	26c <at25dfx_chip_read_buffer+0x48>
     246:	2380      	movs	r3, #128	; 0x80
     248:	031b      	lsls	r3, r3, #12
     24a:	e00f      	b.n	26c <at25dfx_chip_read_buffer+0x48>
     24c:	2380      	movs	r3, #128	; 0x80
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     24e:	035b      	lsls	r3, r3, #13
     250:	e00c      	b.n	26c <at25dfx_chip_read_buffer+0x48>
     252:	2380      	movs	r3, #128	; 0x80
     254:	039b      	lsls	r3, r3, #14
     256:	e009      	b.n	26c <at25dfx_chip_read_buffer+0x48>
     258:	2380      	movs	r3, #128	; 0x80
     25a:	03db      	lsls	r3, r3, #15
     25c:	e006      	b.n	26c <at25dfx_chip_read_buffer+0x48>
     25e:	2380      	movs	r3, #128	; 0x80
     260:	041b      	lsls	r3, r3, #16
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     262:	e003      	b.n	26c <at25dfx_chip_read_buffer+0x48>
     264:	2300      	movs	r3, #0
     266:	e001      	b.n	26c <at25dfx_chip_read_buffer+0x48>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     268:	2380      	movs	r3, #128	; 0x80
     26a:	025b      	lsls	r3, r3, #9
	} while (status_reg & AT25DFX_STATUS_BUSY);
     26c:	2017      	movs	r0, #23
     26e:	429a      	cmp	r2, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     270:	d901      	bls.n	276 <at25dfx_chip_read_buffer+0x52>
     272:	b005      	add	sp, #20
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     274:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (!spi_is_ready_to_write(chip->spi)) {
     276:	6825      	ldr	r5, [r4, #0]
     278:	4b23      	ldr	r3, [pc, #140]	; (308 <at25dfx_chip_read_buffer+0xe4>)
     27a:	4798      	blx	r3
	if (!spi_is_ready_to_write(module)) {
     27c:	792b      	ldrb	r3, [r5, #4]
     27e:	2b00      	cmp	r3, #0
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     280:	d13c      	bne.n	2fc <at25dfx_chip_read_buffer+0xd8>
     282:	3301      	adds	r3, #1
		while (!spi_is_ready_to_read(chip->spi)) {
     284:	712b      	strb	r3, [r5, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
     286:	4b21      	ldr	r3, [pc, #132]	; (30c <at25dfx_chip_read_buffer+0xe8>)
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     288:	4798      	blx	r3
     28a:	230b      	movs	r3, #11
     28c:	aa02      	add	r2, sp, #8
     28e:	7013      	strb	r3, [r2, #0]
	if (!spi_is_ready_to_read(module)) {
     290:	70d6      	strb	r6, [r2, #3]
     292:	0a33      	lsrs	r3, r6, #8
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     294:	7093      	strb	r3, [r2, #2]
     296:	0c36      	lsrs	r6, r6, #16
     298:	7056      	strb	r6, [r2, #1]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     29a:	7962      	ldrb	r2, [r4, #5]
     29c:	09d1      	lsrs	r1, r2, #7
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     29e:	2300      	movs	r3, #0
     2a0:	2900      	cmp	r1, #0
     2a2:	d104      	bne.n	2ae <at25dfx_chip_read_buffer+0x8a>
     2a4:	0953      	lsrs	r3, r2, #5
	port_pin_set_output_level(chip->cs_pin, true);
     2a6:	01db      	lsls	r3, r3, #7
	if (port_index < PORT_INST_NUM) {
     2a8:	4919      	ldr	r1, [pc, #100]	; (310 <at25dfx_chip_read_buffer+0xec>)
		return NULL;
     2aa:	468c      	mov	ip, r1
	if (port_index < PORT_INST_NUM) {
     2ac:	4463      	add	r3, ip
     2ae:	211f      	movs	r1, #31
		return &(ports[port_index]->Group[group_index]);
     2b0:	4011      	ands	r1, r2
     2b2:	2201      	movs	r2, #1
     2b4:	408a      	lsls	r2, r1
     2b6:	615a      	str	r2, [r3, #20]
     2b8:	2205      	movs	r2, #5
     2ba:	a902      	add	r1, sp, #8
     2bc:	6820      	ldr	r0, [r4, #0]
     2be:	4b15      	ldr	r3, [pc, #84]	; (314 <at25dfx_chip_read_buffer+0xf0>)
     2c0:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
     2c2:	2f00      	cmp	r7, #0
	if (status_reg & AT25DFX_STATUS_ERROR) {
     2c4:	d113      	bne.n	2ee <at25dfx_chip_read_buffer+0xca>
     2c6:	7962      	ldrb	r2, [r4, #5]
		return STATUS_ERR_IO;
     2c8:	09d1      	lsrs	r1, r2, #7
		status = _at25dfx_chip_get_nonbusy_status(chip);

		length -= cmd.length;
	}

	_at25dfx_spi_unlock(chip->spi);
     2ca:	2300      	movs	r3, #0
	module->locked = false;
     2cc:	2900      	cmp	r1, #0
     2ce:	d104      	bne.n	2da <at25dfx_chip_read_buffer+0xb6>

	return status;
     2d0:	0953      	lsrs	r3, r2, #5
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     2d2:	01db      	lsls	r3, r3, #7
     2d4:	490e      	ldr	r1, [pc, #56]	; (310 <at25dfx_chip_read_buffer+0xec>)
		return status;
     2d6:	468c      	mov	ip, r1
     2d8:	4463      	add	r3, ip
     2da:	211f      	movs	r1, #31
     2dc:	4011      	ands	r1, r2
     2de:	2201      	movs	r2, #1
     2e0:	408a      	lsls	r2, r1
     2e2:	619a      	str	r2, [r3, #24]
     2e4:	6823      	ldr	r3, [r4, #0]
     2e6:	2200      	movs	r2, #0
     2e8:	711a      	strb	r2, [r3, #4]
     2ea:	2000      	movs	r0, #0
     2ec:	e7c1      	b.n	272 <at25dfx_chip_read_buffer+0x4e>
     2ee:	2300      	movs	r3, #0
		length -= cmd.length;
     2f0:	003a      	movs	r2, r7
     2f2:	9901      	ldr	r1, [sp, #4]
     2f4:	6820      	ldr	r0, [r4, #0]
     2f6:	4d08      	ldr	r5, [pc, #32]	; (318 <at25dfx_chip_read_buffer+0xf4>)
     2f8:	47a8      	blx	r5
	while (length && (status == STATUS_OK)) {
     2fa:	e7e4      	b.n	2c6 <at25dfx_chip_read_buffer+0xa2>
     2fc:	4b03      	ldr	r3, [pc, #12]	; (30c <at25dfx_chip_read_buffer+0xe8>)
     2fe:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     300:	2005      	movs	r0, #5
     302:	e7b6      	b.n	272 <at25dfx_chip_read_buffer+0x4e>
     304:	00003a80 	.word	0x00003a80
	if (port_index < PORT_INST_NUM) {
     308:	00000949 	.word	0x00000949
     30c:	00000989 	.word	0x00000989
		return &(ports[port_index]->Group[group_index]);
     310:	41004400 	.word	0x41004400
     314:	00001311 	.word	0x00001311
     318:	000011f5 	.word	0x000011f5

0000031c <at25dfx_chip_erase_block>:
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     31c:	b5f0      	push	{r4, r5, r6, r7, lr}
     31e:	b083      	sub	sp, #12
     320:	0004      	movs	r4, r0
		port_base->OUTCLR.reg = pin_mask;
     322:	000e      	movs	r6, r1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     324:	0015      	movs	r5, r2
     326:	7903      	ldrb	r3, [r0, #4]
     328:	2b09      	cmp	r3, #9
     32a:	d900      	bls.n	32e <at25dfx_chip_erase_block+0x12>
	port_pin_set_output_level(chip->cs_pin, true);
     32c:	e0f2      	b.n	514 <at25dfx_chip_erase_block+0x1f8>
	if (port_index < PORT_INST_NUM) {
     32e:	009b      	lsls	r3, r3, #2
		return NULL;
     330:	4a7b      	ldr	r2, [pc, #492]	; (520 <at25dfx_chip_erase_block+0x204>)
	if (port_index < PORT_INST_NUM) {
     332:	58d3      	ldr	r3, [r2, r3]
     334:	469f      	mov	pc, r3
		return &(ports[port_index]->Group[group_index]);
     336:	2380      	movs	r3, #128	; 0x80
     338:	02db      	lsls	r3, r3, #11
     33a:	e010      	b.n	35e <at25dfx_chip_erase_block+0x42>
     33c:	2380      	movs	r3, #128	; 0x80
     33e:	031b      	lsls	r3, r3, #12
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     340:	e00d      	b.n	35e <at25dfx_chip_erase_block+0x42>
     342:	2380      	movs	r3, #128	; 0x80
     344:	035b      	lsls	r3, r3, #13
     346:	e00a      	b.n	35e <at25dfx_chip_erase_block+0x42>
		port_base->OUTSET.reg = pin_mask;
     348:	2380      	movs	r3, #128	; 0x80
		cmd.address += cmd.length;
     34a:	039b      	lsls	r3, r3, #14
     34c:	e007      	b.n	35e <at25dfx_chip_erase_block+0x42>
     34e:	2380      	movs	r3, #128	; 0x80
		cmd.data.tx += cmd.length;
     350:	03db      	lsls	r3, r3, #15
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     352:	e004      	b.n	35e <at25dfx_chip_erase_block+0x42>
     354:	2380      	movs	r3, #128	; 0x80
     356:	041b      	lsls	r3, r3, #16
     358:	e001      	b.n	35e <at25dfx_chip_erase_block+0x42>
     35a:	2380      	movs	r3, #128	; 0x80
     35c:	025b      	lsls	r3, r3, #9
     35e:	2017      	movs	r0, #23
     360:	42b3      	cmp	r3, r6
     362:	d801      	bhi.n	368 <at25dfx_chip_erase_block+0x4c>
	cmd_buffer[0] = cmd.opcode;
     364:	b003      	add	sp, #12
     366:	bdf0      	pop	{r4, r5, r6, r7, pc}
     368:	6827      	ldr	r7, [r4, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     36a:	4b6e      	ldr	r3, [pc, #440]	; (524 <at25dfx_chip_erase_block+0x208>)
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     36c:	4798      	blx	r3
     36e:	793b      	ldrb	r3, [r7, #4]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     370:	2b00      	cmp	r3, #0
     372:	d000      	beq.n	376 <at25dfx_chip_erase_block+0x5a>
	port_pin_set_output_level(chip->cs_pin, false);
     374:	e0d0      	b.n	518 <at25dfx_chip_erase_block+0x1fc>
	if (port_index < PORT_INST_NUM) {
     376:	3301      	adds	r3, #1
		return NULL;
     378:	713b      	strb	r3, [r7, #4]
	if (port_index < PORT_INST_NUM) {
     37a:	4b6b      	ldr	r3, [pc, #428]	; (528 <at25dfx_chip_erase_block+0x20c>)
     37c:	4798      	blx	r3
		return &(ports[port_index]->Group[group_index]);
     37e:	2306      	movs	r3, #6
     380:	466a      	mov	r2, sp
     382:	7013      	strb	r3, [r2, #0]
     384:	7962      	ldrb	r2, [r4, #5]
     386:	09d1      	lsrs	r1, r2, #7
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     388:	2300      	movs	r3, #0
     38a:	2900      	cmp	r1, #0
     38c:	d104      	bne.n	398 <at25dfx_chip_erase_block+0x7c>
     38e:	0953      	lsrs	r3, r2, #5
		port_base->OUTCLR.reg = pin_mask;
     390:	01db      	lsls	r3, r3, #7
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     392:	4966      	ldr	r1, [pc, #408]	; (52c <at25dfx_chip_erase_block+0x210>)
     394:	468c      	mov	ip, r1
     396:	4463      	add	r3, ip
     398:	211f      	movs	r1, #31
     39a:	4011      	ands	r1, r2
	if (cmd.length) {
     39c:	2201      	movs	r2, #1
     39e:	408a      	lsls	r2, r1
     3a0:	615a      	str	r2, [r3, #20]
     3a2:	2201      	movs	r2, #1
	port_pin_set_output_level(chip->cs_pin, true);
     3a4:	4669      	mov	r1, sp
	if (port_index < PORT_INST_NUM) {
     3a6:	6820      	ldr	r0, [r4, #0]
		return NULL;
     3a8:	4b61      	ldr	r3, [pc, #388]	; (530 <at25dfx_chip_erase_block+0x214>)
	if (port_index < PORT_INST_NUM) {
     3aa:	4798      	blx	r3
     3ac:	7962      	ldrb	r2, [r4, #5]
		return &(ports[port_index]->Group[group_index]);
     3ae:	09d1      	lsrs	r1, r2, #7
     3b0:	2300      	movs	r3, #0
     3b2:	2900      	cmp	r1, #0
     3b4:	d104      	bne.n	3c0 <at25dfx_chip_erase_block+0xa4>
     3b6:	0953      	lsrs	r3, r2, #5
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3b8:	01db      	lsls	r3, r3, #7
     3ba:	495c      	ldr	r1, [pc, #368]	; (52c <at25dfx_chip_erase_block+0x210>)
     3bc:	468c      	mov	ip, r1
     3be:	4463      	add	r3, ip
		port_base->OUTSET.reg = pin_mask;
     3c0:	211f      	movs	r1, #31
	SercomSpi *const spi_module = &(module->hw->SPI);
     3c2:	4011      	ands	r1, r2
     3c4:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     3c6:	408a      	lsls	r2, r1
	while (!spi_is_ready_to_write(chip->spi)) {
     3c8:	619a      	str	r2, [r3, #24]
     3ca:	2d01      	cmp	r5, #1
	port_pin_set_output_level(chip->cs_pin, false);
     3cc:	d006      	beq.n	3dc <at25dfx_chip_erase_block+0xc0>
	if (port_index < PORT_INST_NUM) {
     3ce:	2d00      	cmp	r5, #0
		return NULL;
     3d0:	d063      	beq.n	49a <at25dfx_chip_erase_block+0x17e>
	if (port_index < PORT_INST_NUM) {
     3d2:	23d8      	movs	r3, #216	; 0xd8
     3d4:	2d02      	cmp	r5, #2
		return &(ports[port_index]->Group[group_index]);
     3d6:	d002      	beq.n	3de <at25dfx_chip_erase_block+0xc2>
     3d8:	2300      	movs	r3, #0
     3da:	e000      	b.n	3de <at25dfx_chip_erase_block+0xc2>
     3dc:	2352      	movs	r3, #82	; 0x52
     3de:	466a      	mov	r2, sp
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3e0:	7013      	strb	r3, [r2, #0]
     3e2:	70d6      	strb	r6, [r2, #3]
     3e4:	0a33      	lsrs	r3, r6, #8
     3e6:	7093      	strb	r3, [r2, #2]
		port_base->OUTCLR.reg = pin_mask;
     3e8:	0c36      	lsrs	r6, r6, #16
	SercomSpi *const spi_module = &(module->hw->SPI);
     3ea:	7056      	strb	r6, [r2, #1]
     3ec:	7962      	ldrb	r2, [r4, #5]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     3ee:	09d1      	lsrs	r1, r2, #7
	if (!spi_is_ready_to_write(module)) {
     3f0:	2300      	movs	r3, #0
     3f2:	2900      	cmp	r1, #0
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     3f4:	d104      	bne.n	400 <at25dfx_chip_erase_block+0xe4>
     3f6:	0953      	lsrs	r3, r2, #5
	while (!spi_is_ready_to_read(chip->spi)) {
     3f8:	01db      	lsls	r3, r3, #7
     3fa:	494c      	ldr	r1, [pc, #304]	; (52c <at25dfx_chip_erase_block+0x210>)
	SercomSpi *const spi_module = &(module->hw->SPI);
     3fc:	468c      	mov	ip, r1
     3fe:	4463      	add	r3, ip
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     400:	211f      	movs	r1, #31
     402:	4011      	ands	r1, r2
     404:	2201      	movs	r2, #1
     406:	408a      	lsls	r2, r1
	uint16_t status_reg = 0;
     408:	615a      	str	r2, [r3, #20]
	if (!spi_is_ready_to_read(module)) {
     40a:	2204      	movs	r2, #4
     40c:	4669      	mov	r1, sp
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     40e:	6820      	ldr	r0, [r4, #0]
     410:	4b47      	ldr	r3, [pc, #284]	; (530 <at25dfx_chip_erase_block+0x214>)
     412:	4798      	blx	r3
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     414:	7962      	ldrb	r2, [r4, #5]
     416:	09d1      	lsrs	r1, r2, #7
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     418:	2300      	movs	r3, #0
     41a:	2900      	cmp	r1, #0
     41c:	d104      	bne.n	428 <at25dfx_chip_erase_block+0x10c>
     41e:	0953      	lsrs	r3, r2, #5
     420:	01db      	lsls	r3, r3, #7
		*rx_data = (uint8_t)spi_module->DATA.reg;
     422:	4942      	ldr	r1, [pc, #264]	; (52c <at25dfx_chip_erase_block+0x210>)
     424:	468c      	mov	ip, r1
		while (!spi_is_ready_to_read(chip->spi)) {
     426:	4463      	add	r3, ip
     428:	211f      	movs	r1, #31
	return STATUS_OK;
     42a:	4011      	ands	r1, r2
     42c:	2201      	movs	r2, #1
     42e:	408a      	lsls	r2, r1
     430:	619a      	str	r2, [r3, #24]
     432:	6823      	ldr	r3, [r4, #0]
     434:	6819      	ldr	r1, [r3, #0]
     436:	2201      	movs	r2, #1
     438:	7e0b      	ldrb	r3, [r1, #24]
     43a:	4213      	tst	r3, r2
	while (!spi_is_ready_to_write(chip->spi)) {
     43c:	d0fc      	beq.n	438 <at25dfx_chip_erase_block+0x11c>
     43e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     440:	09d1      	lsrs	r1, r2, #7
		return NULL;
     442:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     444:	2900      	cmp	r1, #0
     446:	d104      	bne.n	452 <at25dfx_chip_erase_block+0x136>
		return &(ports[port_index]->Group[group_index]);
     448:	0953      	lsrs	r3, r2, #5
     44a:	01db      	lsls	r3, r3, #7
     44c:	4937      	ldr	r1, [pc, #220]	; (52c <at25dfx_chip_erase_block+0x210>)
     44e:	468c      	mov	ip, r1
     450:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     452:	211f      	movs	r1, #31
     454:	4011      	ands	r1, r2
     456:	2201      	movs	r2, #1
     458:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     45a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     45c:	6823      	ldr	r3, [r4, #0]
     45e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     460:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     462:	07d2      	lsls	r2, r2, #31
     464:	d501      	bpl.n	46a <at25dfx_chip_erase_block+0x14e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     466:	2205      	movs	r2, #5
     468:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     46a:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     46c:	6802      	ldr	r2, [r0, #0]
     46e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     470:	7e13      	ldrb	r3, [r2, #24]
     472:	420b      	tst	r3, r1
     474:	d0fc      	beq.n	470 <at25dfx_chip_erase_block+0x154>
     476:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     478:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
     47a:	075b      	lsls	r3, r3, #29
     47c:	d509      	bpl.n	492 <at25dfx_chip_erase_block+0x176>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     47e:	8b53      	ldrh	r3, [r2, #26]
     480:	075b      	lsls	r3, r3, #29
     482:	d501      	bpl.n	488 <at25dfx_chip_erase_block+0x16c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     484:	2304      	movs	r3, #4
     486:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     488:	7983      	ldrb	r3, [r0, #6]
     48a:	2b01      	cmp	r3, #1
     48c:	d007      	beq.n	49e <at25dfx_chip_erase_block+0x182>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     48e:	6a95      	ldr	r5, [r2, #40]	; 0x28
     490:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
     492:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     494:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
     496:	2004      	movs	r0, #4
     498:	e00c      	b.n	4b4 <at25dfx_chip_erase_block+0x198>

	_at25dfx_chip_enable_write(chip);

	switch (block_size) {
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
     49a:	2320      	movs	r3, #32
     49c:	e79f      	b.n	3de <at25dfx_chip_erase_block+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     49e:	6a95      	ldr	r5, [r2, #40]	; 0x28
     4a0:	05ed      	lsls	r5, r5, #23
     4a2:	0ded      	lsrs	r5, r5, #23
     4a4:	e7f5      	b.n	492 <at25dfx_chip_erase_block+0x176>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4a6:	79b3      	ldrb	r3, [r6, #6]
     4a8:	2b01      	cmp	r3, #1
     4aa:	d019      	beq.n	4e0 <at25dfx_chip_erase_block+0x1c4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4ac:	6a95      	ldr	r5, [r2, #40]	; 0x28
     4ae:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
     4b0:	4229      	tst	r1, r5
     4b2:	d019      	beq.n	4e8 <at25dfx_chip_erase_block+0x1cc>
	SercomSpi *const spi_module = &(module->hw->SPI);
     4b4:	6823      	ldr	r3, [r4, #0]
     4b6:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     4b8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     4ba:	420b      	tst	r3, r1
     4bc:	d0fc      	beq.n	4b8 <at25dfx_chip_erase_block+0x19c>
     4be:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     4c0:	420b      	tst	r3, r1
     4c2:	d000      	beq.n	4c6 <at25dfx_chip_erase_block+0x1aa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     4c4:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     4c6:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     4c8:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     4ca:	7e13      	ldrb	r3, [r2, #24]
     4cc:	4203      	tst	r3, r0
     4ce:	d0fc      	beq.n	4ca <at25dfx_chip_erase_block+0x1ae>
     4d0:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     4d2:	4203      	tst	r3, r0
     4d4:	d0ec      	beq.n	4b0 <at25dfx_chip_erase_block+0x194>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     4d6:	8b53      	ldrh	r3, [r2, #26]
     4d8:	4203      	tst	r3, r0
     4da:	d0e4      	beq.n	4a6 <at25dfx_chip_erase_block+0x18a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     4dc:	8350      	strh	r0, [r2, #26]
     4de:	e7e2      	b.n	4a6 <at25dfx_chip_erase_block+0x18a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     4e0:	6a95      	ldr	r5, [r2, #40]	; 0x28
     4e2:	05ed      	lsls	r5, r5, #23
     4e4:	0ded      	lsrs	r5, r5, #23
     4e6:	e7e3      	b.n	4b0 <at25dfx_chip_erase_block+0x194>
	port_pin_set_output_level(chip->cs_pin, true);
     4e8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     4ea:	09d1      	lsrs	r1, r2, #7
		return NULL;
     4ec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     4ee:	2900      	cmp	r1, #0
     4f0:	d104      	bne.n	4fc <at25dfx_chip_erase_block+0x1e0>
		return &(ports[port_index]->Group[group_index]);
     4f2:	0953      	lsrs	r3, r2, #5
     4f4:	01db      	lsls	r3, r3, #7
     4f6:	490d      	ldr	r1, [pc, #52]	; (52c <at25dfx_chip_erase_block+0x210>)
     4f8:	468c      	mov	ip, r1
     4fa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     4fc:	211f      	movs	r1, #31
     4fe:	4011      	ands	r1, r2
     500:	2201      	movs	r2, #1
     502:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     504:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
     506:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
     508:	0fc0      	lsrs	r0, r0, #31
     50a:	0100      	lsls	r0, r0, #4

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);
     50c:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     50e:	2200      	movs	r2, #0
     510:	711a      	strb	r2, [r3, #4]

	return status;
     512:	e727      	b.n	364 <at25dfx_chip_erase_block+0x48>
		return STATUS_ERR_INVALID_ARG;
     514:	2017      	movs	r0, #23
     516:	e725      	b.n	364 <at25dfx_chip_erase_block+0x48>
     518:	4b03      	ldr	r3, [pc, #12]	; (528 <at25dfx_chip_erase_block+0x20c>)
     51a:	4798      	blx	r3
		return status;
     51c:	2005      	movs	r0, #5
     51e:	e721      	b.n	364 <at25dfx_chip_erase_block+0x48>
     520:	00003aa8 	.word	0x00003aa8
     524:	00000949 	.word	0x00000949
     528:	00000989 	.word	0x00000989
     52c:	41004400 	.word	0x41004400
     530:	00001311 	.word	0x00001311

00000534 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
     534:	b570      	push	{r4, r5, r6, lr}
     536:	b082      	sub	sp, #8
     538:	0004      	movs	r4, r0
     53a:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     53c:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
     53e:	4b35      	ldr	r3, [pc, #212]	; (614 <at25dfx_chip_set_global_sector_protect+0xe0>)
     540:	4798      	blx	r3
	if (module->locked) {
     542:	7933      	ldrb	r3, [r6, #4]
     544:	2b00      	cmp	r3, #0
     546:	d160      	bne.n	60a <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
     548:	3301      	adds	r3, #1
     54a:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
     54c:	4b32      	ldr	r3, [pc, #200]	; (618 <at25dfx_chip_set_global_sector_protect+0xe4>)
     54e:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     550:	2306      	movs	r3, #6
     552:	466a      	mov	r2, sp
     554:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     556:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     558:	09d1      	lsrs	r1, r2, #7
		return NULL;
     55a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     55c:	2900      	cmp	r1, #0
     55e:	d104      	bne.n	56a <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
     560:	0953      	lsrs	r3, r2, #5
     562:	01db      	lsls	r3, r3, #7
     564:	492d      	ldr	r1, [pc, #180]	; (61c <at25dfx_chip_set_global_sector_protect+0xe8>)
     566:	468c      	mov	ip, r1
     568:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     56a:	211f      	movs	r1, #31
     56c:	4011      	ands	r1, r2
     56e:	2201      	movs	r2, #1
     570:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     572:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     574:	2201      	movs	r2, #1
     576:	4669      	mov	r1, sp
     578:	6820      	ldr	r0, [r4, #0]
     57a:	4b29      	ldr	r3, [pc, #164]	; (620 <at25dfx_chip_set_global_sector_protect+0xec>)
     57c:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     57e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     580:	09d1      	lsrs	r1, r2, #7
		return NULL;
     582:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     584:	2900      	cmp	r1, #0
     586:	d104      	bne.n	592 <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
     588:	0953      	lsrs	r3, r2, #5
     58a:	01db      	lsls	r3, r3, #7
     58c:	4923      	ldr	r1, [pc, #140]	; (61c <at25dfx_chip_set_global_sector_protect+0xe8>)
     58e:	468c      	mov	ip, r1
     590:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     592:	211f      	movs	r1, #31
     594:	4011      	ands	r1, r2
     596:	2201      	movs	r2, #1
     598:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     59a:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
     59c:	233c      	movs	r3, #60	; 0x3c
     59e:	1e6a      	subs	r2, r5, #1
     5a0:	4195      	sbcs	r5, r2
     5a2:	426d      	negs	r5, r5
     5a4:	402b      	ands	r3, r5
     5a6:	466a      	mov	r2, sp
     5a8:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
     5aa:	2301      	movs	r3, #1
     5ac:	466a      	mov	r2, sp
     5ae:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     5b0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     5b2:	09d1      	lsrs	r1, r2, #7
		return NULL;
     5b4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     5b6:	2900      	cmp	r1, #0
     5b8:	d104      	bne.n	5c4 <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
     5ba:	0953      	lsrs	r3, r2, #5
     5bc:	01db      	lsls	r3, r3, #7
     5be:	4917      	ldr	r1, [pc, #92]	; (61c <at25dfx_chip_set_global_sector_protect+0xe8>)
     5c0:	468c      	mov	ip, r1
     5c2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     5c4:	211f      	movs	r1, #31
     5c6:	4011      	ands	r1, r2
     5c8:	2201      	movs	r2, #1
     5ca:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     5cc:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     5ce:	2201      	movs	r2, #1
     5d0:	4669      	mov	r1, sp
     5d2:	6820      	ldr	r0, [r4, #0]
     5d4:	4d12      	ldr	r5, [pc, #72]	; (620 <at25dfx_chip_set_global_sector_protect+0xec>)
     5d6:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     5d8:	2201      	movs	r2, #1
     5da:	466b      	mov	r3, sp
     5dc:	1dd9      	adds	r1, r3, #7
     5de:	6820      	ldr	r0, [r4, #0]
     5e0:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
     5e2:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     5e4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     5e6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     5e8:	2900      	cmp	r1, #0
     5ea:	d104      	bne.n	5f6 <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
     5ec:	0953      	lsrs	r3, r2, #5
     5ee:	01db      	lsls	r3, r3, #7
     5f0:	490a      	ldr	r1, [pc, #40]	; (61c <at25dfx_chip_set_global_sector_protect+0xe8>)
     5f2:	468c      	mov	ip, r1
     5f4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     5f6:	211f      	movs	r1, #31
     5f8:	4011      	ands	r1, r2
     5fa:	2201      	movs	r2, #1
     5fc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     5fe:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     600:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     602:	2200      	movs	r2, #0
     604:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     606:	2000      	movs	r0, #0
     608:	e002      	b.n	610 <at25dfx_chip_set_global_sector_protect+0xdc>
     60a:	4b03      	ldr	r3, [pc, #12]	; (618 <at25dfx_chip_set_global_sector_protect+0xe4>)
     60c:	4798      	blx	r3
		return status;
     60e:	2005      	movs	r0, #5
}
     610:	b002      	add	sp, #8
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	00000949 	.word	0x00000949
     618:	00000989 	.word	0x00000989
     61c:	41004400 	.word	0x41004400
     620:	00001311 	.word	0x00001311

00000624 <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
     624:	b5f0      	push	{r4, r5, r6, r7, lr}
     626:	b083      	sub	sp, #12
     628:	0004      	movs	r4, r0
     62a:	000e      	movs	r6, r1
     62c:	0015      	movs	r5, r2
	switch (type) {
     62e:	7903      	ldrb	r3, [r0, #4]
     630:	2b09      	cmp	r3, #9
     632:	d900      	bls.n	636 <at25dfx_chip_set_sector_protect+0x12>
     634:	e07f      	b.n	736 <at25dfx_chip_set_sector_protect+0x112>
     636:	009b      	lsls	r3, r3, #2
     638:	4a42      	ldr	r2, [pc, #264]	; (744 <at25dfx_chip_set_sector_protect+0x120>)
     63a:	58d3      	ldr	r3, [r2, r3]
     63c:	469f      	mov	pc, r3
		return 256 * 1024UL;
     63e:	2380      	movs	r3, #128	; 0x80
     640:	02db      	lsls	r3, r3, #11
     642:	e010      	b.n	666 <at25dfx_chip_set_sector_protect+0x42>
		return 512 * 1024UL;
     644:	2380      	movs	r3, #128	; 0x80
     646:	031b      	lsls	r3, r3, #12
     648:	e00d      	b.n	666 <at25dfx_chip_set_sector_protect+0x42>
		return 1024 * 1024UL;
     64a:	2380      	movs	r3, #128	; 0x80
     64c:	035b      	lsls	r3, r3, #13
     64e:	e00a      	b.n	666 <at25dfx_chip_set_sector_protect+0x42>
		return 2048 * 1024UL;
     650:	2380      	movs	r3, #128	; 0x80
     652:	039b      	lsls	r3, r3, #14
     654:	e007      	b.n	666 <at25dfx_chip_set_sector_protect+0x42>
		return 4096 * 1024UL;
     656:	2380      	movs	r3, #128	; 0x80
     658:	03db      	lsls	r3, r3, #15
     65a:	e004      	b.n	666 <at25dfx_chip_set_sector_protect+0x42>
		return 8192 * 1024UL;
     65c:	2380      	movs	r3, #128	; 0x80
     65e:	041b      	lsls	r3, r3, #16
     660:	e001      	b.n	666 <at25dfx_chip_set_sector_protect+0x42>
		return 64 * 1024UL;
     662:	2380      	movs	r3, #128	; 0x80
     664:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     666:	2017      	movs	r0, #23
	if ((address) >= _at25dfx_get_device_size(chip->type)) {
     668:	42b3      	cmp	r3, r6
     66a:	d801      	bhi.n	670 <at25dfx_chip_set_sector_protect+0x4c>
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
     66c:	b003      	add	sp, #12
     66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     670:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
     672:	4b35      	ldr	r3, [pc, #212]	; (748 <at25dfx_chip_set_sector_protect+0x124>)
     674:	4798      	blx	r3
	if (module->locked) {
     676:	793b      	ldrb	r3, [r7, #4]
     678:	2b00      	cmp	r3, #0
     67a:	d15e      	bne.n	73a <at25dfx_chip_set_sector_protect+0x116>
		module->locked = true;
     67c:	3301      	adds	r3, #1
     67e:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
     680:	4b32      	ldr	r3, [pc, #200]	; (74c <at25dfx_chip_set_sector_protect+0x128>)
     682:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     684:	2306      	movs	r3, #6
     686:	466a      	mov	r2, sp
     688:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     68a:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     68c:	09d1      	lsrs	r1, r2, #7
		return NULL;
     68e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     690:	2900      	cmp	r1, #0
     692:	d104      	bne.n	69e <at25dfx_chip_set_sector_protect+0x7a>
		return &(ports[port_index]->Group[group_index]);
     694:	0953      	lsrs	r3, r2, #5
     696:	01db      	lsls	r3, r3, #7
     698:	492d      	ldr	r1, [pc, #180]	; (750 <at25dfx_chip_set_sector_protect+0x12c>)
     69a:	468c      	mov	ip, r1
     69c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     69e:	211f      	movs	r1, #31
     6a0:	4011      	ands	r1, r2
     6a2:	2201      	movs	r2, #1
     6a4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     6a6:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     6a8:	2201      	movs	r2, #1
     6aa:	4669      	mov	r1, sp
     6ac:	6820      	ldr	r0, [r4, #0]
     6ae:	4b29      	ldr	r3, [pc, #164]	; (754 <at25dfx_chip_set_sector_protect+0x130>)
     6b0:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     6b2:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     6b4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     6b6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     6b8:	2900      	cmp	r1, #0
     6ba:	d104      	bne.n	6c6 <at25dfx_chip_set_sector_protect+0xa2>
		return &(ports[port_index]->Group[group_index]);
     6bc:	0953      	lsrs	r3, r2, #5
     6be:	01db      	lsls	r3, r3, #7
     6c0:	4923      	ldr	r1, [pc, #140]	; (750 <at25dfx_chip_set_sector_protect+0x12c>)
     6c2:	468c      	mov	ip, r1
     6c4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6c6:	211f      	movs	r1, #31
     6c8:	4011      	ands	r1, r2
     6ca:	2201      	movs	r2, #1
     6cc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     6ce:	619a      	str	r2, [r3, #24]
			AT25DFX_COMMAND_PROTECT_SECTOR : AT25DFX_COMMAND_UNPROTECT_SECTOR;
     6d0:	2336      	movs	r3, #54	; 0x36
     6d2:	2d00      	cmp	r5, #0
     6d4:	d100      	bne.n	6d8 <at25dfx_chip_set_sector_protect+0xb4>
     6d6:	3303      	adds	r3, #3
	cmd_buffer[0] = cmd.opcode;
     6d8:	466a      	mov	r2, sp
     6da:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     6dc:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     6de:	0a33      	lsrs	r3, r6, #8
     6e0:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     6e2:	0c36      	lsrs	r6, r6, #16
     6e4:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     6e6:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     6e8:	09d1      	lsrs	r1, r2, #7
		return NULL;
     6ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     6ec:	2900      	cmp	r1, #0
     6ee:	d104      	bne.n	6fa <at25dfx_chip_set_sector_protect+0xd6>
		return &(ports[port_index]->Group[group_index]);
     6f0:	0953      	lsrs	r3, r2, #5
     6f2:	01db      	lsls	r3, r3, #7
     6f4:	4916      	ldr	r1, [pc, #88]	; (750 <at25dfx_chip_set_sector_protect+0x12c>)
     6f6:	468c      	mov	ip, r1
     6f8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6fa:	211f      	movs	r1, #31
     6fc:	4011      	ands	r1, r2
     6fe:	2201      	movs	r2, #1
     700:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     702:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     704:	2204      	movs	r2, #4
     706:	4669      	mov	r1, sp
     708:	6820      	ldr	r0, [r4, #0]
     70a:	4b12      	ldr	r3, [pc, #72]	; (754 <at25dfx_chip_set_sector_protect+0x130>)
     70c:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     70e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     710:	09d1      	lsrs	r1, r2, #7
		return NULL;
     712:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     714:	2900      	cmp	r1, #0
     716:	d104      	bne.n	722 <at25dfx_chip_set_sector_protect+0xfe>
		return &(ports[port_index]->Group[group_index]);
     718:	0953      	lsrs	r3, r2, #5
     71a:	01db      	lsls	r3, r3, #7
     71c:	490c      	ldr	r1, [pc, #48]	; (750 <at25dfx_chip_set_sector_protect+0x12c>)
     71e:	468c      	mov	ip, r1
     720:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     722:	211f      	movs	r1, #31
     724:	4011      	ands	r1, r2
     726:	2201      	movs	r2, #1
     728:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     72a:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
     72c:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     72e:	2200      	movs	r2, #0
     730:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
     732:	2000      	movs	r0, #0
     734:	e79a      	b.n	66c <at25dfx_chip_set_sector_protect+0x48>
		return STATUS_ERR_INVALID_ARG;
     736:	2017      	movs	r0, #23
     738:	e798      	b.n	66c <at25dfx_chip_set_sector_protect+0x48>
     73a:	4b04      	ldr	r3, [pc, #16]	; (74c <at25dfx_chip_set_sector_protect+0x128>)
     73c:	4798      	blx	r3
		return status;
     73e:	2005      	movs	r0, #5
     740:	e794      	b.n	66c <at25dfx_chip_set_sector_protect+0x48>
     742:	46c0      	nop			; (mov r8, r8)
     744:	00003ad0 	.word	0x00003ad0
     748:	00000949 	.word	0x00000949
     74c:	00000989 	.word	0x00000989
     750:	41004400 	.word	0x41004400
     754:	00001311 	.word	0x00001311

00000758 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
     758:	b530      	push	{r4, r5, lr}
     75a:	b083      	sub	sp, #12
     75c:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     75e:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
     760:	4b1c      	ldr	r3, [pc, #112]	; (7d4 <at25dfx_chip_sleep+0x7c>)
     762:	4798      	blx	r3
	if (module->locked) {
     764:	792b      	ldrb	r3, [r5, #4]
     766:	2b00      	cmp	r3, #0
     768:	d12e      	bne.n	7c8 <at25dfx_chip_sleep+0x70>
		module->locked = true;
     76a:	3301      	adds	r3, #1
     76c:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     76e:	4b1a      	ldr	r3, [pc, #104]	; (7d8 <at25dfx_chip_sleep+0x80>)
     770:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     772:	23b9      	movs	r3, #185	; 0xb9
     774:	466a      	mov	r2, sp
     776:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     778:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     77a:	09d1      	lsrs	r1, r2, #7
		return NULL;
     77c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     77e:	2900      	cmp	r1, #0
     780:	d104      	bne.n	78c <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
     782:	0953      	lsrs	r3, r2, #5
     784:	01db      	lsls	r3, r3, #7
     786:	4915      	ldr	r1, [pc, #84]	; (7dc <at25dfx_chip_sleep+0x84>)
     788:	468c      	mov	ip, r1
     78a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     78c:	211f      	movs	r1, #31
     78e:	4011      	ands	r1, r2
     790:	2201      	movs	r2, #1
     792:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     794:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     796:	2201      	movs	r2, #1
     798:	4669      	mov	r1, sp
     79a:	6820      	ldr	r0, [r4, #0]
     79c:	4b10      	ldr	r3, [pc, #64]	; (7e0 <at25dfx_chip_sleep+0x88>)
     79e:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     7a0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     7a2:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7a4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7a6:	2900      	cmp	r1, #0
     7a8:	d104      	bne.n	7b4 <at25dfx_chip_sleep+0x5c>
		return &(ports[port_index]->Group[group_index]);
     7aa:	0953      	lsrs	r3, r2, #5
     7ac:	01db      	lsls	r3, r3, #7
     7ae:	490b      	ldr	r1, [pc, #44]	; (7dc <at25dfx_chip_sleep+0x84>)
     7b0:	468c      	mov	ip, r1
     7b2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7b4:	211f      	movs	r1, #31
     7b6:	4011      	ands	r1, r2
     7b8:	2201      	movs	r2, #1
     7ba:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     7bc:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     7be:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     7c0:	2200      	movs	r2, #0
     7c2:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     7c4:	2000      	movs	r0, #0
     7c6:	e002      	b.n	7ce <at25dfx_chip_sleep+0x76>
     7c8:	4b03      	ldr	r3, [pc, #12]	; (7d8 <at25dfx_chip_sleep+0x80>)
     7ca:	4798      	blx	r3
		return status;
     7cc:	2005      	movs	r0, #5
}
     7ce:	b003      	add	sp, #12
     7d0:	bd30      	pop	{r4, r5, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	00000949 	.word	0x00000949
     7d8:	00000989 	.word	0x00000989
     7dc:	41004400 	.word	0x41004400
     7e0:	00001311 	.word	0x00001311

000007e4 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     7e4:	b530      	push	{r4, r5, lr}
     7e6:	b083      	sub	sp, #12
     7e8:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     7ea:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
     7ec:	4b1c      	ldr	r3, [pc, #112]	; (860 <at25dfx_chip_wake+0x7c>)
     7ee:	4798      	blx	r3
	if (module->locked) {
     7f0:	792b      	ldrb	r3, [r5, #4]
     7f2:	2b00      	cmp	r3, #0
     7f4:	d12e      	bne.n	854 <at25dfx_chip_wake+0x70>
		module->locked = true;
     7f6:	3301      	adds	r3, #1
     7f8:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     7fa:	4b1a      	ldr	r3, [pc, #104]	; (864 <at25dfx_chip_wake+0x80>)
     7fc:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     7fe:	23ab      	movs	r3, #171	; 0xab
     800:	466a      	mov	r2, sp
     802:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     804:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     806:	09d1      	lsrs	r1, r2, #7
		return NULL;
     808:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     80a:	2900      	cmp	r1, #0
     80c:	d104      	bne.n	818 <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
     80e:	0953      	lsrs	r3, r2, #5
     810:	01db      	lsls	r3, r3, #7
     812:	4915      	ldr	r1, [pc, #84]	; (868 <at25dfx_chip_wake+0x84>)
     814:	468c      	mov	ip, r1
     816:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     818:	211f      	movs	r1, #31
     81a:	4011      	ands	r1, r2
     81c:	2201      	movs	r2, #1
     81e:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     820:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     822:	2201      	movs	r2, #1
     824:	4669      	mov	r1, sp
     826:	6820      	ldr	r0, [r4, #0]
     828:	4b10      	ldr	r3, [pc, #64]	; (86c <at25dfx_chip_wake+0x88>)
     82a:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     82c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     82e:	09d1      	lsrs	r1, r2, #7
		return NULL;
     830:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     832:	2900      	cmp	r1, #0
     834:	d104      	bne.n	840 <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
     836:	0953      	lsrs	r3, r2, #5
     838:	01db      	lsls	r3, r3, #7
     83a:	490b      	ldr	r1, [pc, #44]	; (868 <at25dfx_chip_wake+0x84>)
     83c:	468c      	mov	ip, r1
     83e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     840:	211f      	movs	r1, #31
     842:	4011      	ands	r1, r2
     844:	2201      	movs	r2, #1
     846:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     848:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     84a:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     84c:	2200      	movs	r2, #0
     84e:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     850:	2000      	movs	r0, #0
     852:	e002      	b.n	85a <at25dfx_chip_wake+0x76>
     854:	4b03      	ldr	r3, [pc, #12]	; (864 <at25dfx_chip_wake+0x80>)
     856:	4798      	blx	r3
		return status;
     858:	2005      	movs	r0, #5
     85a:	b003      	add	sp, #12
     85c:	bd30      	pop	{r4, r5, pc}
     85e:	46c0      	nop			; (mov r8, r8)
     860:	00000949 	.word	0x00000949
     864:	00000989 	.word	0x00000989
     868:	41004400 	.word	0x41004400
     86c:	00001311 	.word	0x00001311

00000870 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
     870:	b5f0      	push	{r4, r5, r6, r7, lr}
     872:	46c6      	mov	lr, r8
     874:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
     876:	2303      	movs	r3, #3
     878:	0007      	movs	r7, r0
     87a:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
     87c:	6813      	ldr	r3, [r2, #0]
     87e:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
     880:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
     882:	2903      	cmp	r1, #3
     884:	d902      	bls.n	88c <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
     886:	4244      	negs	r4, r0
     888:	2003      	movs	r0, #3
     88a:	4004      	ands	r4, r0
	}

	if (temp_length) {
     88c:	2c00      	cmp	r4, #0
     88e:	d016      	beq.n	8be <crc32_recalculate+0x4e>
		length -= temp_length;
     890:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
     892:	1d3e      	adds	r6, r7, #4
     894:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
     896:	00e0      	lsls	r0, r4, #3
     898:	4240      	negs	r0, r0
     89a:	3020      	adds	r0, #32
     89c:	40c5      	lsrs	r5, r0
	crc ^= data;
     89e:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
     8a0:	00e0      	lsls	r0, r4, #3
     8a2:	d019      	beq.n	8d8 <crc32_recalculate+0x68>
		if (crc & 1) {
     8a4:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     8a6:	4d27      	ldr	r5, [pc, #156]	; (944 <crc32_recalculate+0xd4>)
     8a8:	e003      	b.n	8b2 <crc32_recalculate+0x42>
			crc >>= 1;
     8aa:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     8ac:	3801      	subs	r0, #1
     8ae:	2800      	cmp	r0, #0
     8b0:	d004      	beq.n	8bc <crc32_recalculate+0x4c>
		if (crc & 1) {
     8b2:	421c      	tst	r4, r3
     8b4:	d0f9      	beq.n	8aa <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     8b6:	085b      	lsrs	r3, r3, #1
     8b8:	406b      	eors	r3, r5
     8ba:	e7f7      	b.n	8ac <crc32_recalculate+0x3c>
		word = *(word_ptr++);
     8bc:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
     8be:	2003      	movs	r0, #3
     8c0:	000c      	movs	r4, r1
     8c2:	4384      	bics	r4, r0

	if (temp_length) {
     8c4:	d01e      	beq.n	904 <crc32_recalculate+0x94>
		length -= temp_length;
     8c6:	1b08      	subs	r0, r1, r4
     8c8:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
     8ca:	0889      	lsrs	r1, r1, #2
     8cc:	4688      	mov	r8, r1
     8ce:	003e      	movs	r6, r7
     8d0:	000d      	movs	r5, r1
		if (crc & 1) {
     8d2:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     8d4:	4c1b      	ldr	r4, [pc, #108]	; (944 <crc32_recalculate+0xd4>)

		while (temp_length--) {
     8d6:	e00b      	b.n	8f0 <crc32_recalculate+0x80>
		word = *(word_ptr++);
     8d8:	0037      	movs	r7, r6
     8da:	e7f0      	b.n	8be <crc32_recalculate+0x4e>
			crc >>= 1;
     8dc:	085b      	lsrs	r3, r3, #1
     8de:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     8e0:	2900      	cmp	r1, #0
     8e2:	d004      	beq.n	8ee <crc32_recalculate+0x7e>
		if (crc & 1) {
     8e4:	4218      	tst	r0, r3
     8e6:	d0f9      	beq.n	8dc <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     8e8:	085b      	lsrs	r3, r3, #1
     8ea:	4063      	eors	r3, r4
     8ec:	e7f7      	b.n	8de <crc32_recalculate+0x6e>
     8ee:	3604      	adds	r6, #4
		while (temp_length--) {
     8f0:	3d01      	subs	r5, #1
     8f2:	d303      	bcc.n	8fc <crc32_recalculate+0x8c>
	crc ^= data;
     8f4:	6831      	ldr	r1, [r6, #0]
     8f6:	404b      	eors	r3, r1
     8f8:	2120      	movs	r1, #32
     8fa:	e7f3      	b.n	8e4 <crc32_recalculate+0x74>
     8fc:	4641      	mov	r1, r8
     8fe:	0089      	lsls	r1, r1, #2
     900:	187f      	adds	r7, r7, r1
		length -= temp_length;
     902:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
     904:	2900      	cmp	r1, #0
     906:	d017      	beq.n	938 <crc32_recalculate+0xc8>
		word = *word_ptr;
     908:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
     90a:	00c8      	lsls	r0, r1, #3
     90c:	4240      	negs	r0, r0
     90e:	3020      	adds	r0, #32
     910:	2501      	movs	r5, #1
     912:	426d      	negs	r5, r5
     914:	40c5      	lsrs	r5, r0
     916:	0028      	movs	r0, r5
     918:	4020      	ands	r0, r4
	crc ^= data;
     91a:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
     91c:	00c9      	lsls	r1, r1, #3
     91e:	d00b      	beq.n	938 <crc32_recalculate+0xc8>
		if (crc & 1) {
     920:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     922:	4c08      	ldr	r4, [pc, #32]	; (944 <crc32_recalculate+0xd4>)
     924:	e003      	b.n	92e <crc32_recalculate+0xbe>
			crc >>= 1;
     926:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     928:	3901      	subs	r1, #1
     92a:	2900      	cmp	r1, #0
     92c:	d004      	beq.n	938 <crc32_recalculate+0xc8>
		if (crc & 1) {
     92e:	4218      	tst	r0, r3
     930:	d0f9      	beq.n	926 <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     932:	085b      	lsrs	r3, r3, #1
     934:	4063      	eors	r3, r4
     936:	e7f7      	b.n	928 <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
     938:	43db      	mvns	r3, r3
     93a:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
     93c:	2000      	movs	r0, #0
     93e:	bc04      	pop	{r2}
     940:	4690      	mov	r8, r2
     942:	bdf0      	pop	{r4, r5, r6, r7, pc}
     944:	edb88320 	.word	0xedb88320

00000948 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     948:	4b0c      	ldr	r3, [pc, #48]	; (97c <cpu_irq_enter_critical+0x34>)
     94a:	681b      	ldr	r3, [r3, #0]
     94c:	2b00      	cmp	r3, #0
     94e:	d106      	bne.n	95e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     950:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     954:	2b00      	cmp	r3, #0
     956:	d007      	beq.n	968 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     958:	2200      	movs	r2, #0
     95a:	4b09      	ldr	r3, [pc, #36]	; (980 <cpu_irq_enter_critical+0x38>)
     95c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     95e:	4a07      	ldr	r2, [pc, #28]	; (97c <cpu_irq_enter_critical+0x34>)
     960:	6813      	ldr	r3, [r2, #0]
     962:	3301      	adds	r3, #1
     964:	6013      	str	r3, [r2, #0]
}
     966:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     968:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     96a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     96e:	2200      	movs	r2, #0
     970:	4b04      	ldr	r3, [pc, #16]	; (984 <cpu_irq_enter_critical+0x3c>)
     972:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     974:	3201      	adds	r2, #1
     976:	4b02      	ldr	r3, [pc, #8]	; (980 <cpu_irq_enter_critical+0x38>)
     978:	701a      	strb	r2, [r3, #0]
     97a:	e7f0      	b.n	95e <cpu_irq_enter_critical+0x16>
     97c:	20000090 	.word	0x20000090
     980:	20000094 	.word	0x20000094
     984:	20000000 	.word	0x20000000

00000988 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     988:	4b08      	ldr	r3, [pc, #32]	; (9ac <cpu_irq_leave_critical+0x24>)
     98a:	681a      	ldr	r2, [r3, #0]
     98c:	3a01      	subs	r2, #1
     98e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     990:	681b      	ldr	r3, [r3, #0]
     992:	2b00      	cmp	r3, #0
     994:	d109      	bne.n	9aa <cpu_irq_leave_critical+0x22>
     996:	4b06      	ldr	r3, [pc, #24]	; (9b0 <cpu_irq_leave_critical+0x28>)
     998:	781b      	ldrb	r3, [r3, #0]
     99a:	2b00      	cmp	r3, #0
     99c:	d005      	beq.n	9aa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     99e:	2201      	movs	r2, #1
     9a0:	4b04      	ldr	r3, [pc, #16]	; (9b4 <cpu_irq_leave_critical+0x2c>)
     9a2:	701a      	strb	r2, [r3, #0]
     9a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     9a8:	b662      	cpsie	i
	}
}
     9aa:	4770      	bx	lr
     9ac:	20000090 	.word	0x20000090
     9b0:	20000094 	.word	0x20000094
     9b4:	20000000 	.word	0x20000000

000009b8 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
     9b8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
     9ba:	0080      	lsls	r0, r0, #2
     9bc:	4b11      	ldr	r3, [pc, #68]	; (a04 <_ac_interrupt_handler+0x4c>)
     9be:	58c4      	ldr	r4, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
     9c0:	6823      	ldr	r3, [r4, #0]
     9c2:	799d      	ldrb	r5, [r3, #6]
	interrupt_and_callback_status_mask =
     9c4:	7e22      	ldrb	r2, [r4, #24]
     9c6:	7e63      	ldrb	r3, [r4, #25]
     9c8:	4013      	ands	r3, r2
     9ca:	401d      	ands	r5, r3
			(module->register_callback_mask & module->enable_callback_mask);

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
     9cc:	07eb      	lsls	r3, r5, #31
     9ce:	d404      	bmi.n	9da <_ac_interrupt_handler+0x22>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
     9d0:	07ab      	lsls	r3, r5, #30
     9d2:	d409      	bmi.n	9e8 <_ac_interrupt_handler+0x30>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
     9d4:	06eb      	lsls	r3, r5, #27
     9d6:	d40e      	bmi.n	9f6 <_ac_interrupt_handler+0x3e>
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
     9d8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
     9da:	0020      	movs	r0, r4
     9dc:	6863      	ldr	r3, [r4, #4]
     9de:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
     9e0:	2301      	movs	r3, #1
     9e2:	6822      	ldr	r2, [r4, #0]
     9e4:	7193      	strb	r3, [r2, #6]
     9e6:	e7f3      	b.n	9d0 <_ac_interrupt_handler+0x18>
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
     9e8:	0020      	movs	r0, r4
     9ea:	68a3      	ldr	r3, [r4, #8]
     9ec:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
     9ee:	2302      	movs	r3, #2
     9f0:	6822      	ldr	r2, [r4, #0]
     9f2:	7193      	strb	r3, [r2, #6]
     9f4:	e7ee      	b.n	9d4 <_ac_interrupt_handler+0x1c>
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
     9f6:	0020      	movs	r0, r4
     9f8:	6963      	ldr	r3, [r4, #20]
     9fa:	4798      	blx	r3
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
     9fc:	6823      	ldr	r3, [r4, #0]
     9fe:	2210      	movs	r2, #16
     a00:	719a      	strb	r2, [r3, #6]
}
     a02:	e7e9      	b.n	9d8 <_ac_interrupt_handler+0x20>
     a04:	200000ec 	.word	0x200000ec

00000a08 <AC_Handler>:
{
     a08:	b510      	push	{r4, lr}
	_ac_interrupt_handler(0);
     a0a:	2000      	movs	r0, #0
     a0c:	4b01      	ldr	r3, [pc, #4]	; (a14 <AC_Handler+0xc>)
     a0e:	4798      	blx	r3
}
     a10:	bd10      	pop	{r4, pc}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	000009b9 	.word	0x000009b9

00000a18 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     a18:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a1a:	2200      	movs	r2, #0
     a1c:	4b10      	ldr	r3, [pc, #64]	; (a60 <EIC_Handler+0x48>)
     a1e:	701a      	strb	r2, [r3, #0]
     a20:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     a22:	4910      	ldr	r1, [pc, #64]	; (a64 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     a24:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     a26:	4e10      	ldr	r6, [pc, #64]	; (a68 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     a28:	4c0d      	ldr	r4, [pc, #52]	; (a60 <EIC_Handler+0x48>)
     a2a:	e00a      	b.n	a42 <EIC_Handler+0x2a>
		return eics[eic_index];
     a2c:	490d      	ldr	r1, [pc, #52]	; (a64 <EIC_Handler+0x4c>)
     a2e:	e008      	b.n	a42 <EIC_Handler+0x2a>
     a30:	7823      	ldrb	r3, [r4, #0]
     a32:	3301      	adds	r3, #1
     a34:	b2db      	uxtb	r3, r3
     a36:	7023      	strb	r3, [r4, #0]
     a38:	2b0f      	cmp	r3, #15
     a3a:	d810      	bhi.n	a5e <EIC_Handler+0x46>
		return NULL;
     a3c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     a3e:	2b1f      	cmp	r3, #31
     a40:	d9f4      	bls.n	a2c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     a42:	0028      	movs	r0, r5
     a44:	4018      	ands	r0, r3
     a46:	2201      	movs	r2, #1
     a48:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     a4a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     a4c:	4210      	tst	r0, r2
     a4e:	d0ef      	beq.n	a30 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     a50:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     a52:	009b      	lsls	r3, r3, #2
     a54:	599b      	ldr	r3, [r3, r6]
     a56:	2b00      	cmp	r3, #0
     a58:	d0ea      	beq.n	a30 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     a5a:	4798      	blx	r3
     a5c:	e7e8      	b.n	a30 <EIC_Handler+0x18>
			}
		}
	}
}
     a5e:	bd70      	pop	{r4, r5, r6, pc}
     a60:	200000f0 	.word	0x200000f0
     a64:	40001800 	.word	0x40001800
     a68:	200000f4 	.word	0x200000f4

00000a6c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     a6c:	4a04      	ldr	r2, [pc, #16]	; (a80 <_extint_enable+0x14>)
     a6e:	7813      	ldrb	r3, [r2, #0]
     a70:	2102      	movs	r1, #2
     a72:	430b      	orrs	r3, r1
     a74:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     a76:	7853      	ldrb	r3, [r2, #1]
     a78:	b25b      	sxtb	r3, r3
     a7a:	2b00      	cmp	r3, #0
     a7c:	dbfb      	blt.n	a76 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     a7e:	4770      	bx	lr
     a80:	40001800 	.word	0x40001800

00000a84 <_system_extint_init>:
{
     a84:	b500      	push	{lr}
     a86:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     a88:	4a12      	ldr	r2, [pc, #72]	; (ad4 <_system_extint_init+0x50>)
     a8a:	6993      	ldr	r3, [r2, #24]
     a8c:	2140      	movs	r1, #64	; 0x40
     a8e:	430b      	orrs	r3, r1
     a90:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     a92:	a901      	add	r1, sp, #4
     a94:	2300      	movs	r3, #0
     a96:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     a98:	2005      	movs	r0, #5
     a9a:	4b0f      	ldr	r3, [pc, #60]	; (ad8 <_system_extint_init+0x54>)
     a9c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     a9e:	2005      	movs	r0, #5
     aa0:	4b0e      	ldr	r3, [pc, #56]	; (adc <_system_extint_init+0x58>)
     aa2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     aa4:	4a0e      	ldr	r2, [pc, #56]	; (ae0 <_system_extint_init+0x5c>)
     aa6:	7813      	ldrb	r3, [r2, #0]
     aa8:	2101      	movs	r1, #1
     aaa:	430b      	orrs	r3, r1
     aac:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     aae:	7853      	ldrb	r3, [r2, #1]
     ab0:	b25b      	sxtb	r3, r3
     ab2:	2b00      	cmp	r3, #0
     ab4:	dbfb      	blt.n	aae <_system_extint_init+0x2a>
     ab6:	4b0b      	ldr	r3, [pc, #44]	; (ae4 <_system_extint_init+0x60>)
     ab8:	0019      	movs	r1, r3
     aba:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     abc:	2200      	movs	r2, #0
     abe:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     ac0:	4299      	cmp	r1, r3
     ac2:	d1fc      	bne.n	abe <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ac4:	2210      	movs	r2, #16
     ac6:	4b08      	ldr	r3, [pc, #32]	; (ae8 <_system_extint_init+0x64>)
     ac8:	601a      	str	r2, [r3, #0]
	_extint_enable();
     aca:	4b08      	ldr	r3, [pc, #32]	; (aec <_system_extint_init+0x68>)
     acc:	4798      	blx	r3
}
     ace:	b003      	add	sp, #12
     ad0:	bd00      	pop	{pc}
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	40000400 	.word	0x40000400
     ad8:	000020fd 	.word	0x000020fd
     adc:	00002071 	.word	0x00002071
     ae0:	40001800 	.word	0x40001800
     ae4:	200000f4 	.word	0x200000f4
     ae8:	e000e100 	.word	0xe000e100
     aec:	00000a6d 	.word	0x00000a6d

00000af0 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     af0:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     af2:	4a1e      	ldr	r2, [pc, #120]	; (b6c <nvm_set_config+0x7c>)
     af4:	69d3      	ldr	r3, [r2, #28]
     af6:	2104      	movs	r1, #4
     af8:	430b      	orrs	r3, r1
     afa:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     afc:	4b1c      	ldr	r3, [pc, #112]	; (b70 <nvm_set_config+0x80>)
     afe:	2220      	movs	r2, #32
     b00:	32ff      	adds	r2, #255	; 0xff
     b02:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     b04:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     b06:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     b08:	07d2      	lsls	r2, r2, #31
     b0a:	d401      	bmi.n	b10 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     b0c:	0018      	movs	r0, r3
     b0e:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     b10:	7803      	ldrb	r3, [r0, #0]
     b12:	021b      	lsls	r3, r3, #8
     b14:	22c0      	movs	r2, #192	; 0xc0
     b16:	0092      	lsls	r2, r2, #2
     b18:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     b1a:	7841      	ldrb	r1, [r0, #1]
     b1c:	01c9      	lsls	r1, r1, #7
     b1e:	22ff      	movs	r2, #255	; 0xff
     b20:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     b22:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     b24:	7881      	ldrb	r1, [r0, #2]
     b26:	0049      	lsls	r1, r1, #1
     b28:	221e      	movs	r2, #30
     b2a:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     b2c:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     b2e:	78c2      	ldrb	r2, [r0, #3]
     b30:	0492      	lsls	r2, r2, #18
     b32:	2180      	movs	r1, #128	; 0x80
     b34:	02c9      	lsls	r1, r1, #11
     b36:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     b38:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     b3a:	7902      	ldrb	r2, [r0, #4]
     b3c:	0412      	lsls	r2, r2, #16
     b3e:	21c0      	movs	r1, #192	; 0xc0
     b40:	0289      	lsls	r1, r1, #10
     b42:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     b44:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     b46:	4a0a      	ldr	r2, [pc, #40]	; (b70 <nvm_set_config+0x80>)
     b48:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     b4a:	6893      	ldr	r3, [r2, #8]
     b4c:	035b      	lsls	r3, r3, #13
     b4e:	0f5b      	lsrs	r3, r3, #29
     b50:	4908      	ldr	r1, [pc, #32]	; (b74 <nvm_set_config+0x84>)
     b52:	2408      	movs	r4, #8
     b54:	409c      	lsls	r4, r3
     b56:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     b58:	6893      	ldr	r3, [r2, #8]
     b5a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     b5c:	7843      	ldrb	r3, [r0, #1]
     b5e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     b60:	8b13      	ldrh	r3, [r2, #24]
     b62:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     b64:	0fdb      	lsrs	r3, r3, #31
     b66:	011b      	lsls	r3, r3, #4
     b68:	e7d0      	b.n	b0c <nvm_set_config+0x1c>
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	40000400 	.word	0x40000400
     b70:	41004000 	.word	0x41004000
     b74:	20000098 	.word	0x20000098

00000b78 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     b78:	b500      	push	{lr}
     b7a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b7c:	ab01      	add	r3, sp, #4
     b7e:	2280      	movs	r2, #128	; 0x80
     b80:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     b82:	780a      	ldrb	r2, [r1, #0]
     b84:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     b86:	784a      	ldrb	r2, [r1, #1]
     b88:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     b8a:	788a      	ldrb	r2, [r1, #2]
     b8c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     b8e:	0019      	movs	r1, r3
     b90:	4b01      	ldr	r3, [pc, #4]	; (b98 <port_pin_set_config+0x20>)
     b92:	4798      	blx	r3
}
     b94:	b003      	add	sp, #12
     b96:	bd00      	pop	{pc}
     b98:	000021f5 	.word	0x000021f5

00000b9c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b9e:	46de      	mov	lr, fp
     ba0:	4657      	mov	r7, sl
     ba2:	464e      	mov	r6, r9
     ba4:	4645      	mov	r5, r8
     ba6:	b5e0      	push	{r5, r6, r7, lr}
     ba8:	b087      	sub	sp, #28
     baa:	4680      	mov	r8, r0
     bac:	9104      	str	r1, [sp, #16]
     bae:	0016      	movs	r6, r2
     bb0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     bb2:	2200      	movs	r2, #0
     bb4:	2300      	movs	r3, #0
     bb6:	2100      	movs	r1, #0
     bb8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     bba:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     bbc:	2001      	movs	r0, #1
     bbe:	0021      	movs	r1, r4
     bc0:	9600      	str	r6, [sp, #0]
     bc2:	9701      	str	r7, [sp, #4]
     bc4:	465c      	mov	r4, fp
     bc6:	9403      	str	r4, [sp, #12]
     bc8:	4644      	mov	r4, r8
     bca:	9405      	str	r4, [sp, #20]
     bcc:	e013      	b.n	bf6 <long_division+0x5a>
     bce:	2420      	movs	r4, #32
     bd0:	1a64      	subs	r4, r4, r1
     bd2:	0005      	movs	r5, r0
     bd4:	40e5      	lsrs	r5, r4
     bd6:	46a8      	mov	r8, r5
     bd8:	e014      	b.n	c04 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     bda:	9c00      	ldr	r4, [sp, #0]
     bdc:	9d01      	ldr	r5, [sp, #4]
     bde:	1b12      	subs	r2, r2, r4
     be0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     be2:	465c      	mov	r4, fp
     be4:	464d      	mov	r5, r9
     be6:	432c      	orrs	r4, r5
     be8:	46a3      	mov	fp, r4
     bea:	9c03      	ldr	r4, [sp, #12]
     bec:	4645      	mov	r5, r8
     bee:	432c      	orrs	r4, r5
     bf0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     bf2:	3901      	subs	r1, #1
     bf4:	d325      	bcc.n	c42 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     bf6:	2420      	movs	r4, #32
     bf8:	4264      	negs	r4, r4
     bfa:	190c      	adds	r4, r1, r4
     bfc:	d4e7      	bmi.n	bce <long_division+0x32>
     bfe:	0005      	movs	r5, r0
     c00:	40a5      	lsls	r5, r4
     c02:	46a8      	mov	r8, r5
     c04:	0004      	movs	r4, r0
     c06:	408c      	lsls	r4, r1
     c08:	46a1      	mov	r9, r4
		r = r << 1;
     c0a:	1892      	adds	r2, r2, r2
     c0c:	415b      	adcs	r3, r3
     c0e:	0014      	movs	r4, r2
     c10:	001d      	movs	r5, r3
		if (n & bit_shift) {
     c12:	9e05      	ldr	r6, [sp, #20]
     c14:	464f      	mov	r7, r9
     c16:	403e      	ands	r6, r7
     c18:	46b4      	mov	ip, r6
     c1a:	9e04      	ldr	r6, [sp, #16]
     c1c:	4647      	mov	r7, r8
     c1e:	403e      	ands	r6, r7
     c20:	46b2      	mov	sl, r6
     c22:	4666      	mov	r6, ip
     c24:	4657      	mov	r7, sl
     c26:	433e      	orrs	r6, r7
     c28:	d003      	beq.n	c32 <long_division+0x96>
			r |= 0x01;
     c2a:	0006      	movs	r6, r0
     c2c:	4326      	orrs	r6, r4
     c2e:	0032      	movs	r2, r6
     c30:	002b      	movs	r3, r5
		if (r >= d) {
     c32:	9c00      	ldr	r4, [sp, #0]
     c34:	9d01      	ldr	r5, [sp, #4]
     c36:	429d      	cmp	r5, r3
     c38:	d8db      	bhi.n	bf2 <long_division+0x56>
     c3a:	d1ce      	bne.n	bda <long_division+0x3e>
     c3c:	4294      	cmp	r4, r2
     c3e:	d8d8      	bhi.n	bf2 <long_division+0x56>
     c40:	e7cb      	b.n	bda <long_division+0x3e>
     c42:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     c44:	4658      	mov	r0, fp
     c46:	0019      	movs	r1, r3
     c48:	b007      	add	sp, #28
     c4a:	bc3c      	pop	{r2, r3, r4, r5}
     c4c:	4690      	mov	r8, r2
     c4e:	4699      	mov	r9, r3
     c50:	46a2      	mov	sl, r4
     c52:	46ab      	mov	fp, r5
     c54:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c56 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     c56:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     c58:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c5a:	2340      	movs	r3, #64	; 0x40
     c5c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     c5e:	4281      	cmp	r1, r0
     c60:	d202      	bcs.n	c68 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     c62:	0018      	movs	r0, r3
     c64:	bd10      	pop	{r4, pc}
		baud_calculated++;
     c66:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     c68:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     c6a:	1c63      	adds	r3, r4, #1
     c6c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     c6e:	4288      	cmp	r0, r1
     c70:	d9f9      	bls.n	c66 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c72:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     c74:	2cff      	cmp	r4, #255	; 0xff
     c76:	d8f4      	bhi.n	c62 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     c78:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     c7a:	2300      	movs	r3, #0
     c7c:	e7f1      	b.n	c62 <_sercom_get_sync_baud_val+0xc>
	...

00000c80 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     c80:	b5f0      	push	{r4, r5, r6, r7, lr}
     c82:	b083      	sub	sp, #12
     c84:	000f      	movs	r7, r1
     c86:	0016      	movs	r6, r2
     c88:	aa08      	add	r2, sp, #32
     c8a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     c8c:	0004      	movs	r4, r0
     c8e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c90:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     c92:	42bc      	cmp	r4, r7
     c94:	d902      	bls.n	c9c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     c96:	0010      	movs	r0, r2
     c98:	b003      	add	sp, #12
     c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     c9c:	2b00      	cmp	r3, #0
     c9e:	d114      	bne.n	cca <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     ca0:	0002      	movs	r2, r0
     ca2:	0008      	movs	r0, r1
     ca4:	2100      	movs	r1, #0
     ca6:	4c19      	ldr	r4, [pc, #100]	; (d0c <_sercom_get_async_baud_val+0x8c>)
     ca8:	47a0      	blx	r4
     caa:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     cac:	003a      	movs	r2, r7
     cae:	2300      	movs	r3, #0
     cb0:	2000      	movs	r0, #0
     cb2:	4c17      	ldr	r4, [pc, #92]	; (d10 <_sercom_get_async_baud_val+0x90>)
     cb4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     cb6:	2200      	movs	r2, #0
     cb8:	2301      	movs	r3, #1
     cba:	1a12      	subs	r2, r2, r0
     cbc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     cbe:	0c12      	lsrs	r2, r2, #16
     cc0:	041b      	lsls	r3, r3, #16
     cc2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     cc4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     cc6:	2200      	movs	r2, #0
     cc8:	e7e5      	b.n	c96 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     cca:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     ccc:	2b01      	cmp	r3, #1
     cce:	d1f9      	bne.n	cc4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     cd0:	000a      	movs	r2, r1
     cd2:	2300      	movs	r3, #0
     cd4:	2100      	movs	r1, #0
     cd6:	4c0d      	ldr	r4, [pc, #52]	; (d0c <_sercom_get_async_baud_val+0x8c>)
     cd8:	47a0      	blx	r4
     cda:	0002      	movs	r2, r0
     cdc:	000b      	movs	r3, r1
     cde:	9200      	str	r2, [sp, #0]
     ce0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     ce2:	0038      	movs	r0, r7
     ce4:	2100      	movs	r1, #0
     ce6:	4c0a      	ldr	r4, [pc, #40]	; (d10 <_sercom_get_async_baud_val+0x90>)
     ce8:	47a0      	blx	r4
     cea:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     cec:	2380      	movs	r3, #128	; 0x80
     cee:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cf0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     cf2:	4298      	cmp	r0, r3
     cf4:	d8cf      	bhi.n	c96 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     cf6:	0f79      	lsrs	r1, r7, #29
     cf8:	00f8      	lsls	r0, r7, #3
     cfa:	9a00      	ldr	r2, [sp, #0]
     cfc:	9b01      	ldr	r3, [sp, #4]
     cfe:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     d00:	00ea      	lsls	r2, r5, #3
     d02:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     d04:	b2d2      	uxtb	r2, r2
     d06:	0352      	lsls	r2, r2, #13
     d08:	432a      	orrs	r2, r5
     d0a:	e7db      	b.n	cc4 <_sercom_get_async_baud_val+0x44>
     d0c:	000028f5 	.word	0x000028f5
     d10:	00000b9d 	.word	0x00000b9d

00000d14 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d14:	b510      	push	{r4, lr}
     d16:	b082      	sub	sp, #8
     d18:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d1a:	4b0e      	ldr	r3, [pc, #56]	; (d54 <sercom_set_gclk_generator+0x40>)
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	2b00      	cmp	r3, #0
     d20:	d007      	beq.n	d32 <sercom_set_gclk_generator+0x1e>
     d22:	2900      	cmp	r1, #0
     d24:	d105      	bne.n	d32 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     d26:	4b0b      	ldr	r3, [pc, #44]	; (d54 <sercom_set_gclk_generator+0x40>)
     d28:	785b      	ldrb	r3, [r3, #1]
     d2a:	4283      	cmp	r3, r0
     d2c:	d010      	beq.n	d50 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     d2e:	201d      	movs	r0, #29
     d30:	e00c      	b.n	d4c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     d32:	a901      	add	r1, sp, #4
     d34:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     d36:	2013      	movs	r0, #19
     d38:	4b07      	ldr	r3, [pc, #28]	; (d58 <sercom_set_gclk_generator+0x44>)
     d3a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     d3c:	2013      	movs	r0, #19
     d3e:	4b07      	ldr	r3, [pc, #28]	; (d5c <sercom_set_gclk_generator+0x48>)
     d40:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     d42:	4b04      	ldr	r3, [pc, #16]	; (d54 <sercom_set_gclk_generator+0x40>)
     d44:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     d46:	2201      	movs	r2, #1
     d48:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     d4a:	2000      	movs	r0, #0
}
     d4c:	b002      	add	sp, #8
     d4e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     d50:	2000      	movs	r0, #0
     d52:	e7fb      	b.n	d4c <sercom_set_gclk_generator+0x38>
     d54:	200000a0 	.word	0x200000a0
     d58:	000020fd 	.word	0x000020fd
     d5c:	00002071 	.word	0x00002071

00000d60 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     d60:	4b40      	ldr	r3, [pc, #256]	; (e64 <_sercom_get_default_pad+0x104>)
     d62:	4298      	cmp	r0, r3
     d64:	d031      	beq.n	dca <_sercom_get_default_pad+0x6a>
     d66:	d90a      	bls.n	d7e <_sercom_get_default_pad+0x1e>
     d68:	4b3f      	ldr	r3, [pc, #252]	; (e68 <_sercom_get_default_pad+0x108>)
     d6a:	4298      	cmp	r0, r3
     d6c:	d04d      	beq.n	e0a <_sercom_get_default_pad+0xaa>
     d6e:	4b3f      	ldr	r3, [pc, #252]	; (e6c <_sercom_get_default_pad+0x10c>)
     d70:	4298      	cmp	r0, r3
     d72:	d05a      	beq.n	e2a <_sercom_get_default_pad+0xca>
     d74:	4b3e      	ldr	r3, [pc, #248]	; (e70 <_sercom_get_default_pad+0x110>)
     d76:	4298      	cmp	r0, r3
     d78:	d037      	beq.n	dea <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     d7a:	2000      	movs	r0, #0
}
     d7c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     d7e:	4b3d      	ldr	r3, [pc, #244]	; (e74 <_sercom_get_default_pad+0x114>)
     d80:	4298      	cmp	r0, r3
     d82:	d00c      	beq.n	d9e <_sercom_get_default_pad+0x3e>
     d84:	4b3c      	ldr	r3, [pc, #240]	; (e78 <_sercom_get_default_pad+0x118>)
     d86:	4298      	cmp	r0, r3
     d88:	d1f7      	bne.n	d7a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d8a:	2901      	cmp	r1, #1
     d8c:	d017      	beq.n	dbe <_sercom_get_default_pad+0x5e>
     d8e:	2900      	cmp	r1, #0
     d90:	d05d      	beq.n	e4e <_sercom_get_default_pad+0xee>
     d92:	2902      	cmp	r1, #2
     d94:	d015      	beq.n	dc2 <_sercom_get_default_pad+0x62>
     d96:	2903      	cmp	r1, #3
     d98:	d015      	beq.n	dc6 <_sercom_get_default_pad+0x66>
	return 0;
     d9a:	2000      	movs	r0, #0
     d9c:	e7ee      	b.n	d7c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d9e:	2901      	cmp	r1, #1
     da0:	d007      	beq.n	db2 <_sercom_get_default_pad+0x52>
     da2:	2900      	cmp	r1, #0
     da4:	d051      	beq.n	e4a <_sercom_get_default_pad+0xea>
     da6:	2902      	cmp	r1, #2
     da8:	d005      	beq.n	db6 <_sercom_get_default_pad+0x56>
     daa:	2903      	cmp	r1, #3
     dac:	d005      	beq.n	dba <_sercom_get_default_pad+0x5a>
	return 0;
     dae:	2000      	movs	r0, #0
     db0:	e7e4      	b.n	d7c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     db2:	4832      	ldr	r0, [pc, #200]	; (e7c <_sercom_get_default_pad+0x11c>)
     db4:	e7e2      	b.n	d7c <_sercom_get_default_pad+0x1c>
     db6:	4832      	ldr	r0, [pc, #200]	; (e80 <_sercom_get_default_pad+0x120>)
     db8:	e7e0      	b.n	d7c <_sercom_get_default_pad+0x1c>
     dba:	4832      	ldr	r0, [pc, #200]	; (e84 <_sercom_get_default_pad+0x124>)
     dbc:	e7de      	b.n	d7c <_sercom_get_default_pad+0x1c>
     dbe:	4832      	ldr	r0, [pc, #200]	; (e88 <_sercom_get_default_pad+0x128>)
     dc0:	e7dc      	b.n	d7c <_sercom_get_default_pad+0x1c>
     dc2:	4832      	ldr	r0, [pc, #200]	; (e8c <_sercom_get_default_pad+0x12c>)
     dc4:	e7da      	b.n	d7c <_sercom_get_default_pad+0x1c>
     dc6:	4832      	ldr	r0, [pc, #200]	; (e90 <_sercom_get_default_pad+0x130>)
     dc8:	e7d8      	b.n	d7c <_sercom_get_default_pad+0x1c>
     dca:	2901      	cmp	r1, #1
     dcc:	d007      	beq.n	dde <_sercom_get_default_pad+0x7e>
     dce:	2900      	cmp	r1, #0
     dd0:	d03f      	beq.n	e52 <_sercom_get_default_pad+0xf2>
     dd2:	2902      	cmp	r1, #2
     dd4:	d005      	beq.n	de2 <_sercom_get_default_pad+0x82>
     dd6:	2903      	cmp	r1, #3
     dd8:	d005      	beq.n	de6 <_sercom_get_default_pad+0x86>
	return 0;
     dda:	2000      	movs	r0, #0
     ddc:	e7ce      	b.n	d7c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dde:	482d      	ldr	r0, [pc, #180]	; (e94 <_sercom_get_default_pad+0x134>)
     de0:	e7cc      	b.n	d7c <_sercom_get_default_pad+0x1c>
     de2:	482d      	ldr	r0, [pc, #180]	; (e98 <_sercom_get_default_pad+0x138>)
     de4:	e7ca      	b.n	d7c <_sercom_get_default_pad+0x1c>
     de6:	482d      	ldr	r0, [pc, #180]	; (e9c <_sercom_get_default_pad+0x13c>)
     de8:	e7c8      	b.n	d7c <_sercom_get_default_pad+0x1c>
     dea:	2901      	cmp	r1, #1
     dec:	d007      	beq.n	dfe <_sercom_get_default_pad+0x9e>
     dee:	2900      	cmp	r1, #0
     df0:	d031      	beq.n	e56 <_sercom_get_default_pad+0xf6>
     df2:	2902      	cmp	r1, #2
     df4:	d005      	beq.n	e02 <_sercom_get_default_pad+0xa2>
     df6:	2903      	cmp	r1, #3
     df8:	d005      	beq.n	e06 <_sercom_get_default_pad+0xa6>
	return 0;
     dfa:	2000      	movs	r0, #0
     dfc:	e7be      	b.n	d7c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dfe:	4828      	ldr	r0, [pc, #160]	; (ea0 <_sercom_get_default_pad+0x140>)
     e00:	e7bc      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e02:	4828      	ldr	r0, [pc, #160]	; (ea4 <_sercom_get_default_pad+0x144>)
     e04:	e7ba      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e06:	4828      	ldr	r0, [pc, #160]	; (ea8 <_sercom_get_default_pad+0x148>)
     e08:	e7b8      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e0a:	2901      	cmp	r1, #1
     e0c:	d007      	beq.n	e1e <_sercom_get_default_pad+0xbe>
     e0e:	2900      	cmp	r1, #0
     e10:	d023      	beq.n	e5a <_sercom_get_default_pad+0xfa>
     e12:	2902      	cmp	r1, #2
     e14:	d005      	beq.n	e22 <_sercom_get_default_pad+0xc2>
     e16:	2903      	cmp	r1, #3
     e18:	d005      	beq.n	e26 <_sercom_get_default_pad+0xc6>
	return 0;
     e1a:	2000      	movs	r0, #0
     e1c:	e7ae      	b.n	d7c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e1e:	4823      	ldr	r0, [pc, #140]	; (eac <_sercom_get_default_pad+0x14c>)
     e20:	e7ac      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e22:	4823      	ldr	r0, [pc, #140]	; (eb0 <_sercom_get_default_pad+0x150>)
     e24:	e7aa      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e26:	4823      	ldr	r0, [pc, #140]	; (eb4 <_sercom_get_default_pad+0x154>)
     e28:	e7a8      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e2a:	2901      	cmp	r1, #1
     e2c:	d007      	beq.n	e3e <_sercom_get_default_pad+0xde>
     e2e:	2900      	cmp	r1, #0
     e30:	d015      	beq.n	e5e <_sercom_get_default_pad+0xfe>
     e32:	2902      	cmp	r1, #2
     e34:	d005      	beq.n	e42 <_sercom_get_default_pad+0xe2>
     e36:	2903      	cmp	r1, #3
     e38:	d005      	beq.n	e46 <_sercom_get_default_pad+0xe6>
	return 0;
     e3a:	2000      	movs	r0, #0
     e3c:	e79e      	b.n	d7c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e3e:	481e      	ldr	r0, [pc, #120]	; (eb8 <_sercom_get_default_pad+0x158>)
     e40:	e79c      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e42:	481e      	ldr	r0, [pc, #120]	; (ebc <_sercom_get_default_pad+0x15c>)
     e44:	e79a      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e46:	481e      	ldr	r0, [pc, #120]	; (ec0 <_sercom_get_default_pad+0x160>)
     e48:	e798      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e4a:	481e      	ldr	r0, [pc, #120]	; (ec4 <_sercom_get_default_pad+0x164>)
     e4c:	e796      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e4e:	2003      	movs	r0, #3
     e50:	e794      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e52:	481d      	ldr	r0, [pc, #116]	; (ec8 <_sercom_get_default_pad+0x168>)
     e54:	e792      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e56:	481d      	ldr	r0, [pc, #116]	; (ecc <_sercom_get_default_pad+0x16c>)
     e58:	e790      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e5a:	481d      	ldr	r0, [pc, #116]	; (ed0 <_sercom_get_default_pad+0x170>)
     e5c:	e78e      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e5e:	481d      	ldr	r0, [pc, #116]	; (ed4 <_sercom_get_default_pad+0x174>)
     e60:	e78c      	b.n	d7c <_sercom_get_default_pad+0x1c>
     e62:	46c0      	nop			; (mov r8, r8)
     e64:	42001000 	.word	0x42001000
     e68:	42001800 	.word	0x42001800
     e6c:	42001c00 	.word	0x42001c00
     e70:	42001400 	.word	0x42001400
     e74:	42000800 	.word	0x42000800
     e78:	42000c00 	.word	0x42000c00
     e7c:	00050003 	.word	0x00050003
     e80:	00060003 	.word	0x00060003
     e84:	00070003 	.word	0x00070003
     e88:	00010003 	.word	0x00010003
     e8c:	001e0003 	.word	0x001e0003
     e90:	001f0003 	.word	0x001f0003
     e94:	00090003 	.word	0x00090003
     e98:	000a0003 	.word	0x000a0003
     e9c:	000b0003 	.word	0x000b0003
     ea0:	00110003 	.word	0x00110003
     ea4:	00120003 	.word	0x00120003
     ea8:	00130003 	.word	0x00130003
     eac:	000d0003 	.word	0x000d0003
     eb0:	000e0003 	.word	0x000e0003
     eb4:	000f0003 	.word	0x000f0003
     eb8:	00170003 	.word	0x00170003
     ebc:	00180003 	.word	0x00180003
     ec0:	00190003 	.word	0x00190003
     ec4:	00040003 	.word	0x00040003
     ec8:	00080003 	.word	0x00080003
     ecc:	00100003 	.word	0x00100003
     ed0:	000c0003 	.word	0x000c0003
     ed4:	00160003 	.word	0x00160003

00000ed8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     ed8:	b530      	push	{r4, r5, lr}
     eda:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     edc:	4b0b      	ldr	r3, [pc, #44]	; (f0c <_sercom_get_sercom_inst_index+0x34>)
     ede:	466a      	mov	r2, sp
     ee0:	cb32      	ldmia	r3!, {r1, r4, r5}
     ee2:	c232      	stmia	r2!, {r1, r4, r5}
     ee4:	cb32      	ldmia	r3!, {r1, r4, r5}
     ee6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     ee8:	9b00      	ldr	r3, [sp, #0]
     eea:	4283      	cmp	r3, r0
     eec:	d00b      	beq.n	f06 <_sercom_get_sercom_inst_index+0x2e>
     eee:	2301      	movs	r3, #1
     ef0:	009a      	lsls	r2, r3, #2
     ef2:	4669      	mov	r1, sp
     ef4:	5852      	ldr	r2, [r2, r1]
     ef6:	4282      	cmp	r2, r0
     ef8:	d006      	beq.n	f08 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     efa:	3301      	adds	r3, #1
     efc:	2b06      	cmp	r3, #6
     efe:	d1f7      	bne.n	ef0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f00:	2000      	movs	r0, #0
}
     f02:	b007      	add	sp, #28
     f04:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f06:	2300      	movs	r3, #0
			return i;
     f08:	b2d8      	uxtb	r0, r3
     f0a:	e7fa      	b.n	f02 <_sercom_get_sercom_inst_index+0x2a>
     f0c:	00003af8 	.word	0x00003af8

00000f10 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     f10:	4770      	bx	lr
	...

00000f14 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     f14:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     f16:	4b0a      	ldr	r3, [pc, #40]	; (f40 <_sercom_set_handler+0x2c>)
     f18:	781b      	ldrb	r3, [r3, #0]
     f1a:	2b00      	cmp	r3, #0
     f1c:	d10c      	bne.n	f38 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f1e:	4f09      	ldr	r7, [pc, #36]	; (f44 <_sercom_set_handler+0x30>)
     f20:	4e09      	ldr	r6, [pc, #36]	; (f48 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     f22:	4d0a      	ldr	r5, [pc, #40]	; (f4c <_sercom_set_handler+0x38>)
     f24:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f26:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     f28:	195a      	adds	r2, r3, r5
     f2a:	6014      	str	r4, [r2, #0]
     f2c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f2e:	2b18      	cmp	r3, #24
     f30:	d1f9      	bne.n	f26 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     f32:	2201      	movs	r2, #1
     f34:	4b02      	ldr	r3, [pc, #8]	; (f40 <_sercom_set_handler+0x2c>)
     f36:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     f38:	0080      	lsls	r0, r0, #2
     f3a:	4b02      	ldr	r3, [pc, #8]	; (f44 <_sercom_set_handler+0x30>)
     f3c:	50c1      	str	r1, [r0, r3]
}
     f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f40:	200000a2 	.word	0x200000a2
     f44:	200000a4 	.word	0x200000a4
     f48:	00000f11 	.word	0x00000f11
     f4c:	20000134 	.word	0x20000134

00000f50 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     f50:	b500      	push	{lr}
     f52:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     f54:	2309      	movs	r3, #9
     f56:	466a      	mov	r2, sp
     f58:	7013      	strb	r3, [r2, #0]
     f5a:	3301      	adds	r3, #1
     f5c:	7053      	strb	r3, [r2, #1]
     f5e:	3301      	adds	r3, #1
     f60:	7093      	strb	r3, [r2, #2]
     f62:	3301      	adds	r3, #1
     f64:	70d3      	strb	r3, [r2, #3]
     f66:	3301      	adds	r3, #1
     f68:	7113      	strb	r3, [r2, #4]
     f6a:	3301      	adds	r3, #1
     f6c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     f6e:	4b03      	ldr	r3, [pc, #12]	; (f7c <_sercom_get_interrupt_vector+0x2c>)
     f70:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     f72:	466b      	mov	r3, sp
     f74:	5618      	ldrsb	r0, [r3, r0]
}
     f76:	b003      	add	sp, #12
     f78:	bd00      	pop	{pc}
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	00000ed9 	.word	0x00000ed9

00000f80 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     f80:	b510      	push	{r4, lr}
     f82:	4b02      	ldr	r3, [pc, #8]	; (f8c <SERCOM0_Handler+0xc>)
     f84:	681b      	ldr	r3, [r3, #0]
     f86:	2000      	movs	r0, #0
     f88:	4798      	blx	r3
     f8a:	bd10      	pop	{r4, pc}
     f8c:	200000a4 	.word	0x200000a4

00000f90 <SERCOM1_Handler>:
     f90:	b510      	push	{r4, lr}
     f92:	4b02      	ldr	r3, [pc, #8]	; (f9c <SERCOM1_Handler+0xc>)
     f94:	685b      	ldr	r3, [r3, #4]
     f96:	2001      	movs	r0, #1
     f98:	4798      	blx	r3
     f9a:	bd10      	pop	{r4, pc}
     f9c:	200000a4 	.word	0x200000a4

00000fa0 <SERCOM2_Handler>:
     fa0:	b510      	push	{r4, lr}
     fa2:	4b02      	ldr	r3, [pc, #8]	; (fac <SERCOM2_Handler+0xc>)
     fa4:	689b      	ldr	r3, [r3, #8]
     fa6:	2002      	movs	r0, #2
     fa8:	4798      	blx	r3
     faa:	bd10      	pop	{r4, pc}
     fac:	200000a4 	.word	0x200000a4

00000fb0 <SERCOM3_Handler>:
     fb0:	b510      	push	{r4, lr}
     fb2:	4b02      	ldr	r3, [pc, #8]	; (fbc <SERCOM3_Handler+0xc>)
     fb4:	68db      	ldr	r3, [r3, #12]
     fb6:	2003      	movs	r0, #3
     fb8:	4798      	blx	r3
     fba:	bd10      	pop	{r4, pc}
     fbc:	200000a4 	.word	0x200000a4

00000fc0 <SERCOM4_Handler>:
     fc0:	b510      	push	{r4, lr}
     fc2:	4b02      	ldr	r3, [pc, #8]	; (fcc <SERCOM4_Handler+0xc>)
     fc4:	691b      	ldr	r3, [r3, #16]
     fc6:	2004      	movs	r0, #4
     fc8:	4798      	blx	r3
     fca:	bd10      	pop	{r4, pc}
     fcc:	200000a4 	.word	0x200000a4

00000fd0 <SERCOM5_Handler>:
     fd0:	b510      	push	{r4, lr}
     fd2:	4b02      	ldr	r3, [pc, #8]	; (fdc <SERCOM5_Handler+0xc>)
     fd4:	695b      	ldr	r3, [r3, #20]
     fd6:	2005      	movs	r0, #5
     fd8:	4798      	blx	r3
     fda:	bd10      	pop	{r4, pc}
     fdc:	200000a4 	.word	0x200000a4

00000fe0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fe2:	b08b      	sub	sp, #44	; 0x2c
     fe4:	0005      	movs	r5, r0
     fe6:	000c      	movs	r4, r1
     fe8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     fea:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     fec:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     fee:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     ff0:	079b      	lsls	r3, r3, #30
     ff2:	d501      	bpl.n	ff8 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     ff4:	b00b      	add	sp, #44	; 0x2c
     ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     ff8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     ffa:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     ffc:	07db      	lsls	r3, r3, #31
     ffe:	d4f9      	bmi.n	ff4 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1000:	0008      	movs	r0, r1
    1002:	4b6f      	ldr	r3, [pc, #444]	; (11c0 <spi_init+0x1e0>)
    1004:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1006:	4a6f      	ldr	r2, [pc, #444]	; (11c4 <spi_init+0x1e4>)
    1008:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    100a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    100c:	2301      	movs	r3, #1
    100e:	40bb      	lsls	r3, r7
    1010:	430b      	orrs	r3, r1
    1012:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1014:	a909      	add	r1, sp, #36	; 0x24
    1016:	2724      	movs	r7, #36	; 0x24
    1018:	5df3      	ldrb	r3, [r6, r7]
    101a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    101c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    101e:	b2c3      	uxtb	r3, r0
    1020:	9301      	str	r3, [sp, #4]
    1022:	0018      	movs	r0, r3
    1024:	4b68      	ldr	r3, [pc, #416]	; (11c8 <spi_init+0x1e8>)
    1026:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1028:	9801      	ldr	r0, [sp, #4]
    102a:	4b68      	ldr	r3, [pc, #416]	; (11cc <spi_init+0x1ec>)
    102c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    102e:	5df0      	ldrb	r0, [r6, r7]
    1030:	2100      	movs	r1, #0
    1032:	4b67      	ldr	r3, [pc, #412]	; (11d0 <spi_init+0x1f0>)
    1034:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1036:	7833      	ldrb	r3, [r6, #0]
    1038:	2b01      	cmp	r3, #1
    103a:	d03f      	beq.n	10bc <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    103c:	7833      	ldrb	r3, [r6, #0]
    103e:	2b00      	cmp	r3, #0
    1040:	d103      	bne.n	104a <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1042:	6823      	ldr	r3, [r4, #0]
    1044:	2208      	movs	r2, #8
    1046:	4313      	orrs	r3, r2
    1048:	6023      	str	r3, [r4, #0]
    104a:	002b      	movs	r3, r5
    104c:	330c      	adds	r3, #12
    104e:	0029      	movs	r1, r5
    1050:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    1052:	2200      	movs	r2, #0
    1054:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1056:	428b      	cmp	r3, r1
    1058:	d1fc      	bne.n	1054 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    105a:	2300      	movs	r3, #0
    105c:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    105e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1060:	2400      	movs	r4, #0
    1062:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1064:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1066:	3336      	adds	r3, #54	; 0x36
    1068:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    106a:	3301      	adds	r3, #1
    106c:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    106e:	3301      	adds	r3, #1
    1070:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    1072:	3b35      	subs	r3, #53	; 0x35
    1074:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    1076:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1078:	6828      	ldr	r0, [r5, #0]
    107a:	4b51      	ldr	r3, [pc, #324]	; (11c0 <spi_init+0x1e0>)
    107c:	4798      	blx	r3
    107e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1080:	4954      	ldr	r1, [pc, #336]	; (11d4 <spi_init+0x1f4>)
    1082:	4b55      	ldr	r3, [pc, #340]	; (11d8 <spi_init+0x1f8>)
    1084:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1086:	00bf      	lsls	r7, r7, #2
    1088:	4b54      	ldr	r3, [pc, #336]	; (11dc <spi_init+0x1fc>)
    108a:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    108c:	682f      	ldr	r7, [r5, #0]
    108e:	ab04      	add	r3, sp, #16
    1090:	2280      	movs	r2, #128	; 0x80
    1092:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1094:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1096:	3a7f      	subs	r2, #127	; 0x7f
    1098:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    109a:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    109c:	7833      	ldrb	r3, [r6, #0]
    109e:	2b00      	cmp	r3, #0
    10a0:	d102      	bne.n	10a8 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    10a2:	2200      	movs	r2, #0
    10a4:	ab04      	add	r3, sp, #16
    10a6:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    10a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    10aa:	9305      	str	r3, [sp, #20]
    10ac:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    10ae:	9306      	str	r3, [sp, #24]
    10b0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    10b2:	9307      	str	r3, [sp, #28]
    10b4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    10b6:	9308      	str	r3, [sp, #32]
    10b8:	2400      	movs	r4, #0
    10ba:	e00b      	b.n	10d4 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    10bc:	6823      	ldr	r3, [r4, #0]
    10be:	220c      	movs	r2, #12
    10c0:	4313      	orrs	r3, r2
    10c2:	6023      	str	r3, [r4, #0]
    10c4:	e7ba      	b.n	103c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    10c6:	0038      	movs	r0, r7
    10c8:	4b45      	ldr	r3, [pc, #276]	; (11e0 <spi_init+0x200>)
    10ca:	4798      	blx	r3
    10cc:	e00a      	b.n	10e4 <spi_init+0x104>
    10ce:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    10d0:	2c04      	cmp	r4, #4
    10d2:	d010      	beq.n	10f6 <spi_init+0x116>
    10d4:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10d6:	00a3      	lsls	r3, r4, #2
    10d8:	aa02      	add	r2, sp, #8
    10da:	200c      	movs	r0, #12
    10dc:	1812      	adds	r2, r2, r0
    10de:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    10e0:	2800      	cmp	r0, #0
    10e2:	d0f0      	beq.n	10c6 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    10e4:	1c43      	adds	r3, r0, #1
    10e6:	d0f2      	beq.n	10ce <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    10e8:	a904      	add	r1, sp, #16
    10ea:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    10ec:	0c00      	lsrs	r0, r0, #16
    10ee:	b2c0      	uxtb	r0, r0
    10f0:	4b3c      	ldr	r3, [pc, #240]	; (11e4 <spi_init+0x204>)
    10f2:	4798      	blx	r3
    10f4:	e7eb      	b.n	10ce <spi_init+0xee>
	module->mode             = config->mode;
    10f6:	7833      	ldrb	r3, [r6, #0]
    10f8:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    10fa:	7c33      	ldrb	r3, [r6, #16]
    10fc:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    10fe:	7cb3      	ldrb	r3, [r6, #18]
    1100:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1102:	7d33      	ldrb	r3, [r6, #20]
    1104:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1106:	2200      	movs	r2, #0
    1108:	ab02      	add	r3, sp, #8
    110a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    110c:	7833      	ldrb	r3, [r6, #0]
    110e:	2b01      	cmp	r3, #1
    1110:	d012      	beq.n	1138 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    1112:	7833      	ldrb	r3, [r6, #0]
    1114:	2b00      	cmp	r3, #0
    1116:	d126      	bne.n	1166 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    1118:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    111a:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    111e:	7ff1      	ldrb	r1, [r6, #31]
    1120:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1122:	7fb4      	ldrb	r4, [r6, #30]
    1124:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    1126:	4319      	orrs	r1, r3
    1128:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    112a:	2320      	movs	r3, #32
    112c:	5cf3      	ldrb	r3, [r6, r3]
    112e:	2b00      	cmp	r3, #0
    1130:	d01b      	beq.n	116a <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1132:	2340      	movs	r3, #64	; 0x40
    1134:	431a      	orrs	r2, r3
    1136:	e018      	b.n	116a <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1138:	6828      	ldr	r0, [r5, #0]
    113a:	4b21      	ldr	r3, [pc, #132]	; (11c0 <spi_init+0x1e0>)
    113c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    113e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1140:	b2c0      	uxtb	r0, r0
    1142:	4b29      	ldr	r3, [pc, #164]	; (11e8 <spi_init+0x208>)
    1144:	4798      	blx	r3
    1146:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1148:	ab02      	add	r3, sp, #8
    114a:	1d9a      	adds	r2, r3, #6
    114c:	69b0      	ldr	r0, [r6, #24]
    114e:	4b27      	ldr	r3, [pc, #156]	; (11ec <spi_init+0x20c>)
    1150:	4798      	blx	r3
    1152:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1154:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1156:	2b00      	cmp	r3, #0
    1158:	d000      	beq.n	115c <spi_init+0x17c>
    115a:	e74b      	b.n	ff4 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    115c:	ab02      	add	r3, sp, #8
    115e:	3306      	adds	r3, #6
    1160:	781b      	ldrb	r3, [r3, #0]
    1162:	733b      	strb	r3, [r7, #12]
    1164:	e7d5      	b.n	1112 <spi_init+0x132>
	uint32_t ctrlb = 0;
    1166:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    1168:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    116a:	6873      	ldr	r3, [r6, #4]
    116c:	68b1      	ldr	r1, [r6, #8]
    116e:	430b      	orrs	r3, r1
    1170:	68f1      	ldr	r1, [r6, #12]
    1172:	430b      	orrs	r3, r1
    1174:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    1176:	7c31      	ldrb	r1, [r6, #16]
    1178:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    117a:	7c71      	ldrb	r1, [r6, #17]
    117c:	2900      	cmp	r1, #0
    117e:	d103      	bne.n	1188 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1180:	491b      	ldr	r1, [pc, #108]	; (11f0 <spi_init+0x210>)
    1182:	7889      	ldrb	r1, [r1, #2]
    1184:	0789      	lsls	r1, r1, #30
    1186:	d501      	bpl.n	118c <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1188:	2180      	movs	r1, #128	; 0x80
    118a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    118c:	7cb1      	ldrb	r1, [r6, #18]
    118e:	2900      	cmp	r1, #0
    1190:	d002      	beq.n	1198 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1192:	2180      	movs	r1, #128	; 0x80
    1194:	0289      	lsls	r1, r1, #10
    1196:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1198:	7cf1      	ldrb	r1, [r6, #19]
    119a:	2900      	cmp	r1, #0
    119c:	d002      	beq.n	11a4 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    119e:	2180      	movs	r1, #128	; 0x80
    11a0:	0089      	lsls	r1, r1, #2
    11a2:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    11a4:	7d31      	ldrb	r1, [r6, #20]
    11a6:	2900      	cmp	r1, #0
    11a8:	d002      	beq.n	11b0 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    11aa:	2180      	movs	r1, #128	; 0x80
    11ac:	0189      	lsls	r1, r1, #6
    11ae:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    11b0:	6839      	ldr	r1, [r7, #0]
    11b2:	430b      	orrs	r3, r1
    11b4:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    11b6:	687b      	ldr	r3, [r7, #4]
    11b8:	431a      	orrs	r2, r3
    11ba:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    11bc:	2000      	movs	r0, #0
    11be:	e719      	b.n	ff4 <spi_init+0x14>
    11c0:	00000ed9 	.word	0x00000ed9
    11c4:	40000400 	.word	0x40000400
    11c8:	000020fd 	.word	0x000020fd
    11cc:	00002071 	.word	0x00002071
    11d0:	00000d15 	.word	0x00000d15
    11d4:	00001521 	.word	0x00001521
    11d8:	00000f15 	.word	0x00000f15
    11dc:	20000134 	.word	0x20000134
    11e0:	00000d61 	.word	0x00000d61
    11e4:	000021f5 	.word	0x000021f5
    11e8:	00002119 	.word	0x00002119
    11ec:	00000c57 	.word	0x00000c57
    11f0:	41002000 	.word	0x41002000

000011f4 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    11f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11f6:	46d6      	mov	lr, sl
    11f8:	464f      	mov	r7, r9
    11fa:	b580      	push	{r7, lr}
    11fc:	b083      	sub	sp, #12
    11fe:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1200:	2538      	movs	r5, #56	; 0x38
    1202:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1204:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1206:	2e05      	cmp	r6, #5
    1208:	d075      	beq.n	12f6 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    120a:	3512      	adds	r5, #18
	if (length == 0) {
    120c:	2a00      	cmp	r2, #0
    120e:	d072      	beq.n	12f6 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    1210:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1212:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    1214:	2c00      	cmp	r4, #0
    1216:	d06e      	beq.n	12f6 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1218:	7944      	ldrb	r4, [r0, #5]
    121a:	2c00      	cmp	r4, #0
    121c:	d103      	bne.n	1226 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    121e:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1220:	7e25      	ldrb	r5, [r4, #24]
    1222:	07a9      	lsls	r1, r5, #30
    1224:	d40a      	bmi.n	123c <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    1226:	3a01      	subs	r2, #1
    1228:	b294      	uxth	r4, r2
    122a:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    122c:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    122e:	2102      	movs	r1, #2
    1230:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    1232:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1234:	05db      	lsls	r3, r3, #23
    1236:	0ddb      	lsrs	r3, r3, #23
    1238:	469a      	mov	sl, r3
    123a:	e037      	b.n	12ac <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    123c:	2502      	movs	r5, #2
    123e:	7625      	strb	r5, [r4, #24]
    1240:	e7f1      	b.n	1226 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1242:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1244:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    1246:	423b      	tst	r3, r7
    1248:	d0fc      	beq.n	1244 <spi_read_buffer_wait+0x50>
    124a:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    124c:	423b      	tst	r3, r7
    124e:	d009      	beq.n	1264 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1250:	4653      	mov	r3, sl
    1252:	628b      	str	r3, [r1, #40]	; 0x28
    1254:	e02d      	b.n	12b2 <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1256:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    1258:	464d      	mov	r5, r9
    125a:	422b      	tst	r3, r5
    125c:	d138      	bne.n	12d0 <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    125e:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    1260:	4213      	tst	r3, r2
    1262:	d045      	beq.n	12f0 <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1264:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1266:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    1268:	4213      	tst	r3, r2
    126a:	d0fc      	beq.n	1266 <spi_read_buffer_wait+0x72>
    126c:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    126e:	4213      	tst	r3, r2
    1270:	d040      	beq.n	12f4 <spi_read_buffer_wait+0x100>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1272:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    1274:	2500      	movs	r5, #0
    1276:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1278:	4213      	tst	r3, r2
    127a:	d002      	beq.n	1282 <spi_read_buffer_wait+0x8e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    127c:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    127e:	231e      	movs	r3, #30
    1280:	9301      	str	r3, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1282:	7983      	ldrb	r3, [r0, #6]
    1284:	2b01      	cmp	r3, #1
    1286:	d027      	beq.n	12d8 <spi_read_buffer_wait+0xe4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1288:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    128a:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    128c:	9901      	ldr	r1, [sp, #4]
    128e:	2900      	cmp	r1, #0
    1290:	d137      	bne.n	1302 <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1292:	1c75      	adds	r5, r6, #1
    1294:	b2ad      	uxth	r5, r5
    1296:	4661      	mov	r1, ip
    1298:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    129a:	7981      	ldrb	r1, [r0, #6]
    129c:	2901      	cmp	r1, #1
    129e:	d01f      	beq.n	12e0 <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    12a0:	002e      	movs	r6, r5
	while (length--) {
    12a2:	3c01      	subs	r4, #1
    12a4:	b2a4      	uxth	r4, r4
    12a6:	4b18      	ldr	r3, [pc, #96]	; (1308 <spi_read_buffer_wait+0x114>)
    12a8:	429c      	cmp	r4, r3
    12aa:	d01f      	beq.n	12ec <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    12ac:	7943      	ldrb	r3, [r0, #5]
    12ae:	2b01      	cmp	r3, #1
    12b0:	d0c7      	beq.n	1242 <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    12b2:	7943      	ldrb	r3, [r0, #5]
    12b4:	2b00      	cmp	r3, #0
    12b6:	d1d5      	bne.n	1264 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    12b8:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    12ba:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    12bc:	4213      	tst	r3, r2
    12be:	d1ca      	bne.n	1256 <spi_read_buffer_wait+0x62>
    12c0:	4b12      	ldr	r3, [pc, #72]	; (130c <spi_read_buffer_wait+0x118>)
    12c2:	7e0d      	ldrb	r5, [r1, #24]
    12c4:	4215      	tst	r5, r2
    12c6:	d1c6      	bne.n	1256 <spi_read_buffer_wait+0x62>
    12c8:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    12ca:	2b00      	cmp	r3, #0
    12cc:	d1f9      	bne.n	12c2 <spi_read_buffer_wait+0xce>
    12ce:	e7c2      	b.n	1256 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    12d0:	2302      	movs	r3, #2
    12d2:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    12d4:	2504      	movs	r5, #4
    12d6:	e00e      	b.n	12f6 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    12d8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    12da:	05db      	lsls	r3, r3, #23
    12dc:	0ddb      	lsrs	r3, r3, #23
    12de:	e7d5      	b.n	128c <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    12e0:	3602      	adds	r6, #2
    12e2:	b2b6      	uxth	r6, r6
    12e4:	0a1b      	lsrs	r3, r3, #8
    12e6:	4661      	mov	r1, ip
    12e8:	554b      	strb	r3, [r1, r5]
    12ea:	e7da      	b.n	12a2 <spi_read_buffer_wait+0xae>
    12ec:	9d01      	ldr	r5, [sp, #4]
    12ee:	e002      	b.n	12f6 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    12f0:	2512      	movs	r5, #18
    12f2:	e000      	b.n	12f6 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    12f4:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    12f6:	0028      	movs	r0, r5
    12f8:	b003      	add	sp, #12
    12fa:	bc0c      	pop	{r2, r3}
    12fc:	4691      	mov	r9, r2
    12fe:	469a      	mov	sl, r3
    1300:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1302:	9d01      	ldr	r5, [sp, #4]
    1304:	e7f7      	b.n	12f6 <spi_read_buffer_wait+0x102>
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	0000ffff 	.word	0x0000ffff
    130c:	00002710 	.word	0x00002710

00001310 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1310:	b5f0      	push	{r4, r5, r6, r7, lr}
    1312:	46de      	mov	lr, fp
    1314:	4657      	mov	r7, sl
    1316:	464e      	mov	r6, r9
    1318:	4645      	mov	r5, r8
    131a:	b5e0      	push	{r5, r6, r7, lr}
    131c:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    131e:	2338      	movs	r3, #56	; 0x38
    1320:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1322:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1324:	2c05      	cmp	r4, #5
    1326:	d002      	beq.n	132e <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1328:	3312      	adds	r3, #18
	if (length == 0) {
    132a:	2a00      	cmp	r2, #0
    132c:	d107      	bne.n	133e <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    132e:	0018      	movs	r0, r3
    1330:	b003      	add	sp, #12
    1332:	bc3c      	pop	{r2, r3, r4, r5}
    1334:	4690      	mov	r8, r2
    1336:	4699      	mov	r9, r3
    1338:	46a2      	mov	sl, r4
    133a:	46ab      	mov	fp, r5
    133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    133e:	7943      	ldrb	r3, [r0, #5]
    1340:	2b00      	cmp	r3, #0
    1342:	d103      	bne.n	134c <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1344:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1346:	7e1c      	ldrb	r4, [r3, #24]
    1348:	07a4      	lsls	r4, r4, #30
    134a:	d40a      	bmi.n	1362 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    134c:	4693      	mov	fp, r2
    134e:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    1350:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    1352:	2502      	movs	r5, #2
    1354:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    1356:	3502      	adds	r5, #2
    1358:	46a8      	mov	r8, r5
    135a:	3a01      	subs	r2, #1
    135c:	b292      	uxth	r2, r2
    135e:	468a      	mov	sl, r1
    1360:	e023      	b.n	13aa <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1362:	2402      	movs	r4, #2
    1364:	761c      	strb	r4, [r3, #24]
    1366:	e7f1      	b.n	134c <spi_write_buffer_wait+0x3c>
    1368:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    136a:	4661      	mov	r1, ip
    136c:	420d      	tst	r5, r1
    136e:	d12e      	bne.n	13ce <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1370:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    1372:	421d      	tst	r5, r3
    1374:	d100      	bne.n	1378 <spi_write_buffer_wait+0x68>
    1376:	e0c2      	b.n	14fe <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1378:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    137a:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    137c:	421d      	tst	r5, r3
    137e:	d0fc      	beq.n	137a <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    1380:	1c67      	adds	r7, r4, #1
    1382:	b2bf      	uxth	r7, r7
    1384:	4651      	mov	r1, sl
    1386:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1388:	7981      	ldrb	r1, [r0, #6]
    138a:	2901      	cmp	r1, #1
    138c:	d023      	beq.n	13d6 <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    138e:	b2ad      	uxth	r5, r5
    1390:	003c      	movs	r4, r7
    1392:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    1394:	421f      	tst	r7, r3
    1396:	d002      	beq.n	139e <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1398:	05ed      	lsls	r5, r5, #23
    139a:	0ded      	lsrs	r5, r5, #23
    139c:	62b5      	str	r5, [r6, #40]	; 0x28
    139e:	1e55      	subs	r5, r2, #1
    13a0:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    13a2:	79c6      	ldrb	r6, [r0, #7]
    13a4:	2e00      	cmp	r6, #0
    13a6:	d11d      	bne.n	13e4 <spi_write_buffer_wait+0xd4>
    13a8:	002a      	movs	r2, r5
	while (length--) {
    13aa:	4d5a      	ldr	r5, [pc, #360]	; (1514 <spi_write_buffer_wait+0x204>)
    13ac:	42aa      	cmp	r2, r5
    13ae:	d070      	beq.n	1492 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    13b0:	7945      	ldrb	r5, [r0, #5]
    13b2:	2d00      	cmp	r5, #0
    13b4:	d1e0      	bne.n	1378 <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    13b6:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13b8:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    13ba:	421d      	tst	r5, r3
    13bc:	d1d4      	bne.n	1368 <spi_write_buffer_wait+0x58>
    13be:	4d56      	ldr	r5, [pc, #344]	; (1518 <spi_write_buffer_wait+0x208>)
    13c0:	7e37      	ldrb	r7, [r6, #24]
    13c2:	421f      	tst	r7, r3
    13c4:	d1d0      	bne.n	1368 <spi_write_buffer_wait+0x58>
    13c6:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    13c8:	2d00      	cmp	r5, #0
    13ca:	d1f9      	bne.n	13c0 <spi_write_buffer_wait+0xb0>
    13cc:	e7cc      	b.n	1368 <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    13ce:	2302      	movs	r3, #2
    13d0:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    13d2:	3302      	adds	r3, #2
    13d4:	e7ab      	b.n	132e <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    13d6:	3402      	adds	r4, #2
    13d8:	b2a4      	uxth	r4, r4
    13da:	4651      	mov	r1, sl
    13dc:	5dcf      	ldrb	r7, [r1, r7]
    13de:	023f      	lsls	r7, r7, #8
    13e0:	433d      	orrs	r5, r7
    13e2:	e7d6      	b.n	1392 <spi_write_buffer_wait+0x82>
    13e4:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    13e6:	7945      	ldrb	r5, [r0, #5]
    13e8:	2d00      	cmp	r5, #0
    13ea:	d137      	bne.n	145c <spi_write_buffer_wait+0x14c>
    13ec:	4d4b      	ldr	r5, [pc, #300]	; (151c <spi_write_buffer_wait+0x20c>)
    13ee:	9101      	str	r1, [sp, #4]
    13f0:	e012      	b.n	1418 <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    13f2:	3402      	adds	r4, #2
    13f4:	b2a4      	uxth	r4, r4
    13f6:	4649      	mov	r1, r9
    13f8:	9f01      	ldr	r7, [sp, #4]
    13fa:	5c79      	ldrb	r1, [r7, r1]
    13fc:	0209      	lsls	r1, r1, #8
    13fe:	9f00      	ldr	r7, [sp, #0]
    1400:	430f      	orrs	r7, r1
    1402:	e01b      	b.n	143c <spi_write_buffer_wait+0x12c>
						length--;
    1404:	3a01      	subs	r2, #1
    1406:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    1408:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    140a:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    140c:	4641      	mov	r1, r8
    140e:	420f      	tst	r7, r1
    1410:	d11b      	bne.n	144a <spi_write_buffer_wait+0x13a>
    1412:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1414:	2d00      	cmp	r5, #0
    1416:	d018      	beq.n	144a <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    1418:	2a00      	cmp	r2, #0
    141a:	d0f5      	beq.n	1408 <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    141c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    141e:	7e37      	ldrb	r7, [r6, #24]
    1420:	421f      	tst	r7, r3
    1422:	d0f1      	beq.n	1408 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    1424:	1c67      	adds	r7, r4, #1
    1426:	b2b9      	uxth	r1, r7
    1428:	4689      	mov	r9, r1
    142a:	9901      	ldr	r1, [sp, #4]
    142c:	5d09      	ldrb	r1, [r1, r4]
    142e:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1430:	7981      	ldrb	r1, [r0, #6]
    1432:	2901      	cmp	r1, #1
    1434:	d0dd      	beq.n	13f2 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    1436:	4669      	mov	r1, sp
    1438:	880f      	ldrh	r7, [r1, #0]
    143a:	464c      	mov	r4, r9
    143c:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    143e:	4219      	tst	r1, r3
    1440:	d0e0      	beq.n	1404 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1442:	05ff      	lsls	r7, r7, #23
    1444:	0dff      	lsrs	r7, r7, #23
    1446:	62b7      	str	r7, [r6, #40]	; 0x28
    1448:	e7dc      	b.n	1404 <spi_write_buffer_wait+0xf4>
    144a:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    144c:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    144e:	4667      	mov	r7, ip
    1450:	423d      	tst	r5, r7
    1452:	d118      	bne.n	1486 <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1454:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    1456:	4646      	mov	r6, r8
    1458:	4235      	tst	r5, r6
    145a:	d052      	beq.n	1502 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    145c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    145e:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    1460:	4647      	mov	r7, r8
    1462:	423d      	tst	r5, r7
    1464:	d0fb      	beq.n	145e <spi_write_buffer_wait+0x14e>
    1466:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    1468:	423d      	tst	r5, r7
    146a:	d007      	beq.n	147c <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    146c:	8b75      	ldrh	r5, [r6, #26]
    146e:	423d      	tst	r5, r7
    1470:	d000      	beq.n	1474 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1472:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1474:	7985      	ldrb	r5, [r0, #6]
    1476:	2d01      	cmp	r5, #1
    1478:	d009      	beq.n	148e <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    147a:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    147c:	465d      	mov	r5, fp
    147e:	3d01      	subs	r5, #1
    1480:	b2ad      	uxth	r5, r5
    1482:	46ab      	mov	fp, r5
    1484:	e769      	b.n	135a <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1486:	2302      	movs	r3, #2
    1488:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    148a:	3302      	adds	r3, #2
    148c:	e74f      	b.n	132e <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    148e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    1490:	e7f4      	b.n	147c <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    1492:	7943      	ldrb	r3, [r0, #5]
    1494:	2b01      	cmp	r3, #1
    1496:	d00b      	beq.n	14b0 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    1498:	2b00      	cmp	r3, #0
    149a:	d134      	bne.n	1506 <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    149c:	79c2      	ldrb	r2, [r0, #7]
    149e:	2a00      	cmp	r2, #0
    14a0:	d100      	bne.n	14a4 <spi_write_buffer_wait+0x194>
    14a2:	e744      	b.n	132e <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    14a4:	2404      	movs	r4, #4
			while (flush_length) {
    14a6:	465b      	mov	r3, fp
    14a8:	465d      	mov	r5, fp
    14aa:	2b00      	cmp	r3, #0
    14ac:	d119      	bne.n	14e2 <spi_write_buffer_wait+0x1d2>
    14ae:	e73e      	b.n	132e <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    14b0:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    14b2:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    14b4:	7e0b      	ldrb	r3, [r1, #24]
    14b6:	4213      	tst	r3, r2
    14b8:	d0fc      	beq.n	14b4 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    14ba:	2300      	movs	r3, #0
    14bc:	e737      	b.n	132e <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    14be:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    14c0:	4223      	tst	r3, r4
    14c2:	d022      	beq.n	150a <spi_write_buffer_wait+0x1fa>
    14c4:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    14c6:	4223      	tst	r3, r4
    14c8:	d007      	beq.n	14da <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    14ca:	8b4b      	ldrh	r3, [r1, #26]
    14cc:	4223      	tst	r3, r4
    14ce:	d000      	beq.n	14d2 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    14d0:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14d2:	7983      	ldrb	r3, [r0, #6]
    14d4:	2b01      	cmp	r3, #1
    14d6:	d010      	beq.n	14fa <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    14d8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    14da:	3d01      	subs	r5, #1
    14dc:	b2ad      	uxth	r5, r5
			while (flush_length) {
    14de:	2d00      	cmp	r5, #0
    14e0:	d015      	beq.n	150e <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    14e2:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    14e4:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    14e6:	4223      	tst	r3, r4
    14e8:	d1e9      	bne.n	14be <spi_write_buffer_wait+0x1ae>
    14ea:	4b0b      	ldr	r3, [pc, #44]	; (1518 <spi_write_buffer_wait+0x208>)
    14ec:	7e0a      	ldrb	r2, [r1, #24]
    14ee:	4222      	tst	r2, r4
    14f0:	d1e5      	bne.n	14be <spi_write_buffer_wait+0x1ae>
    14f2:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    14f4:	2b00      	cmp	r3, #0
    14f6:	d1f9      	bne.n	14ec <spi_write_buffer_wait+0x1dc>
    14f8:	e7e1      	b.n	14be <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    14fa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    14fc:	e7ed      	b.n	14da <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    14fe:	2312      	movs	r3, #18
    1500:	e715      	b.n	132e <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    1502:	2312      	movs	r3, #18
    1504:	e713      	b.n	132e <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    1506:	2300      	movs	r3, #0
    1508:	e711      	b.n	132e <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    150a:	2312      	movs	r3, #18
    150c:	e70f      	b.n	132e <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    150e:	2300      	movs	r3, #0
    1510:	e70d      	b.n	132e <spi_write_buffer_wait+0x1e>
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	0000ffff 	.word	0x0000ffff
    1518:	00002710 	.word	0x00002710
    151c:	00002711 	.word	0x00002711

00001520 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1522:	0080      	lsls	r0, r0, #2
    1524:	4b85      	ldr	r3, [pc, #532]	; (173c <_spi_interrupt_handler+0x21c>)
    1526:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1528:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    152a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    152c:	5ce3      	ldrb	r3, [r4, r3]
    152e:	2236      	movs	r2, #54	; 0x36
    1530:	5ca7      	ldrb	r7, [r4, r2]
    1532:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1534:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1536:	7db5      	ldrb	r5, [r6, #22]
    1538:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    153a:	07eb      	lsls	r3, r5, #31
    153c:	d52e      	bpl.n	159c <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    153e:	7963      	ldrb	r3, [r4, #5]
    1540:	2b01      	cmp	r3, #1
    1542:	d025      	beq.n	1590 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1544:	2b00      	cmp	r3, #0
    1546:	d129      	bne.n	159c <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    1548:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    154a:	2b00      	cmp	r3, #0
    154c:	d026      	beq.n	159c <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    154e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1550:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1552:	7813      	ldrb	r3, [r2, #0]
    1554:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    1556:	1c50      	adds	r0, r2, #1
    1558:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    155a:	79a0      	ldrb	r0, [r4, #6]
    155c:	2801      	cmp	r0, #1
    155e:	d100      	bne.n	1562 <_spi_interrupt_handler+0x42>
    1560:	e069      	b.n	1636 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1562:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1564:	05db      	lsls	r3, r3, #23
    1566:	0ddb      	lsrs	r3, r3, #23
    1568:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    156a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    156c:	3b01      	subs	r3, #1
    156e:	b29b      	uxth	r3, r3
    1570:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    1572:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1574:	b29b      	uxth	r3, r3
    1576:	2b00      	cmp	r3, #0
    1578:	d110      	bne.n	159c <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    157a:	3301      	adds	r3, #1
    157c:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    157e:	7a63      	ldrb	r3, [r4, #9]
    1580:	2b01      	cmp	r3, #1
    1582:	d10b      	bne.n	159c <_spi_interrupt_handler+0x7c>
    1584:	79e3      	ldrb	r3, [r4, #7]
    1586:	2b00      	cmp	r3, #0
    1588:	d108      	bne.n	159c <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    158a:	3302      	adds	r3, #2
    158c:	75b3      	strb	r3, [r6, #22]
    158e:	e005      	b.n	159c <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    1590:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1592:	2b00      	cmp	r3, #0
    1594:	d03e      	beq.n	1614 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    1596:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1598:	2b00      	cmp	r3, #0
    159a:	d1d8      	bne.n	154e <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    159c:	076b      	lsls	r3, r5, #29
    159e:	d511      	bpl.n	15c4 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    15a0:	8b73      	ldrh	r3, [r6, #26]
    15a2:	075b      	lsls	r3, r3, #29
    15a4:	d551      	bpl.n	164a <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    15a6:	7a63      	ldrb	r3, [r4, #9]
    15a8:	2b01      	cmp	r3, #1
    15aa:	d008      	beq.n	15be <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    15ac:	221e      	movs	r2, #30
    15ae:	2338      	movs	r3, #56	; 0x38
    15b0:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    15b2:	3b35      	subs	r3, #53	; 0x35
    15b4:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    15b6:	3302      	adds	r3, #2
    15b8:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    15ba:	073b      	lsls	r3, r7, #28
    15bc:	d441      	bmi.n	1642 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    15be:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    15c0:	2304      	movs	r3, #4
    15c2:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    15c4:	07ab      	lsls	r3, r5, #30
    15c6:	d515      	bpl.n	15f4 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    15c8:	7963      	ldrb	r3, [r4, #5]
    15ca:	2b00      	cmp	r3, #0
    15cc:	d10e      	bne.n	15ec <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    15ce:	3307      	adds	r3, #7
    15d0:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    15d2:	3b05      	subs	r3, #5
    15d4:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    15d6:	3301      	adds	r3, #1
    15d8:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    15da:	2300      	movs	r3, #0
    15dc:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    15de:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    15e0:	3338      	adds	r3, #56	; 0x38
    15e2:	2200      	movs	r2, #0
    15e4:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    15e6:	06fb      	lsls	r3, r7, #27
    15e8:	d500      	bpl.n	15ec <_spi_interrupt_handler+0xcc>
    15ea:	e07f      	b.n	16ec <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    15ec:	7963      	ldrb	r3, [r4, #5]
    15ee:	2b01      	cmp	r3, #1
    15f0:	d100      	bne.n	15f4 <_spi_interrupt_handler+0xd4>
    15f2:	e07f      	b.n	16f4 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    15f4:	072b      	lsls	r3, r5, #28
    15f6:	d508      	bpl.n	160a <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    15f8:	7963      	ldrb	r3, [r4, #5]
    15fa:	2b00      	cmp	r3, #0
    15fc:	d105      	bne.n	160a <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    15fe:	3308      	adds	r3, #8
    1600:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1602:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1604:	06bb      	lsls	r3, r7, #26
    1606:	d500      	bpl.n	160a <_spi_interrupt_handler+0xea>
    1608:	e08a      	b.n	1720 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    160a:	b26d      	sxtb	r5, r5
    160c:	2d00      	cmp	r5, #0
    160e:	da00      	bge.n	1612 <_spi_interrupt_handler+0xf2>
    1610:	e08a      	b.n	1728 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    1614:	4b4a      	ldr	r3, [pc, #296]	; (1740 <_spi_interrupt_handler+0x220>)
    1616:	881b      	ldrh	r3, [r3, #0]
    1618:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    161a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    161c:	3b01      	subs	r3, #1
    161e:	b29b      	uxth	r3, r3
    1620:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1622:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1624:	b29b      	uxth	r3, r3
    1626:	2b00      	cmp	r3, #0
    1628:	d101      	bne.n	162e <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    162a:	3301      	adds	r3, #1
    162c:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    162e:	7963      	ldrb	r3, [r4, #5]
		if (0
    1630:	2b01      	cmp	r3, #1
    1632:	d0b0      	beq.n	1596 <_spi_interrupt_handler+0x76>
    1634:	e786      	b.n	1544 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1636:	7850      	ldrb	r0, [r2, #1]
    1638:	0200      	lsls	r0, r0, #8
    163a:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    163c:	3202      	adds	r2, #2
    163e:	62e2      	str	r2, [r4, #44]	; 0x2c
    1640:	e790      	b.n	1564 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1642:	0020      	movs	r0, r4
    1644:	69a3      	ldr	r3, [r4, #24]
    1646:	4798      	blx	r3
    1648:	e7b9      	b.n	15be <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    164a:	7a63      	ldrb	r3, [r4, #9]
    164c:	2b01      	cmp	r3, #1
    164e:	d027      	beq.n	16a0 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1650:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1654:	05db      	lsls	r3, r3, #23
    1656:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    1658:	b2da      	uxtb	r2, r3
    165a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    165c:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    165e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1660:	1c51      	adds	r1, r2, #1
    1662:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1664:	79a1      	ldrb	r1, [r4, #6]
    1666:	2901      	cmp	r1, #1
    1668:	d033      	beq.n	16d2 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    166a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    166c:	3b01      	subs	r3, #1
    166e:	b29b      	uxth	r3, r3
    1670:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1672:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1674:	b29b      	uxth	r3, r3
    1676:	2b00      	cmp	r3, #0
    1678:	d1a4      	bne.n	15c4 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    167a:	2200      	movs	r2, #0
    167c:	3338      	adds	r3, #56	; 0x38
    167e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1680:	3b34      	subs	r3, #52	; 0x34
    1682:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1684:	7a63      	ldrb	r3, [r4, #9]
    1686:	2b02      	cmp	r3, #2
    1688:	d029      	beq.n	16de <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    168a:	7a63      	ldrb	r3, [r4, #9]
    168c:	2b00      	cmp	r3, #0
    168e:	d000      	beq.n	1692 <_spi_interrupt_handler+0x172>
    1690:	e798      	b.n	15c4 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1692:	07bb      	lsls	r3, r7, #30
    1694:	d400      	bmi.n	1698 <_spi_interrupt_handler+0x178>
    1696:	e795      	b.n	15c4 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1698:	0020      	movs	r0, r4
    169a:	6923      	ldr	r3, [r4, #16]
    169c:	4798      	blx	r3
    169e:	e791      	b.n	15c4 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    16a0:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    16a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    16a4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    16a6:	3b01      	subs	r3, #1
    16a8:	b29b      	uxth	r3, r3
    16aa:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    16ac:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    16ae:	b29b      	uxth	r3, r3
    16b0:	2b00      	cmp	r3, #0
    16b2:	d000      	beq.n	16b6 <_spi_interrupt_handler+0x196>
    16b4:	e786      	b.n	15c4 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    16b6:	3304      	adds	r3, #4
    16b8:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    16ba:	2200      	movs	r2, #0
    16bc:	3334      	adds	r3, #52	; 0x34
    16be:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    16c0:	3b35      	subs	r3, #53	; 0x35
    16c2:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    16c4:	07fb      	lsls	r3, r7, #31
    16c6:	d400      	bmi.n	16ca <_spi_interrupt_handler+0x1aa>
    16c8:	e77c      	b.n	15c4 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    16ca:	0020      	movs	r0, r4
    16cc:	68e3      	ldr	r3, [r4, #12]
    16ce:	4798      	blx	r3
    16d0:	e778      	b.n	15c4 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    16d2:	0a1b      	lsrs	r3, r3, #8
    16d4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    16d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16d8:	3301      	adds	r3, #1
    16da:	62a3      	str	r3, [r4, #40]	; 0x28
    16dc:	e7c5      	b.n	166a <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    16de:	077b      	lsls	r3, r7, #29
    16e0:	d400      	bmi.n	16e4 <_spi_interrupt_handler+0x1c4>
    16e2:	e76f      	b.n	15c4 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    16e4:	0020      	movs	r0, r4
    16e6:	6963      	ldr	r3, [r4, #20]
    16e8:	4798      	blx	r3
    16ea:	e76b      	b.n	15c4 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    16ec:	0020      	movs	r0, r4
    16ee:	69e3      	ldr	r3, [r4, #28]
    16f0:	4798      	blx	r3
    16f2:	e77b      	b.n	15ec <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    16f4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    16f6:	2b01      	cmp	r3, #1
    16f8:	d000      	beq.n	16fc <_spi_interrupt_handler+0x1dc>
    16fa:	e786      	b.n	160a <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    16fc:	79e3      	ldrb	r3, [r4, #7]
    16fe:	2b00      	cmp	r3, #0
    1700:	d000      	beq.n	1704 <_spi_interrupt_handler+0x1e4>
    1702:	e782      	b.n	160a <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1704:	3302      	adds	r3, #2
    1706:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1708:	3301      	adds	r3, #1
    170a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    170c:	2200      	movs	r2, #0
    170e:	3335      	adds	r3, #53	; 0x35
    1710:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1712:	07fb      	lsls	r3, r7, #31
    1714:	d400      	bmi.n	1718 <_spi_interrupt_handler+0x1f8>
    1716:	e76d      	b.n	15f4 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1718:	0020      	movs	r0, r4
    171a:	68e3      	ldr	r3, [r4, #12]
    171c:	4798      	blx	r3
    171e:	e769      	b.n	15f4 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1720:	0020      	movs	r0, r4
    1722:	6a23      	ldr	r3, [r4, #32]
    1724:	4798      	blx	r3
    1726:	e770      	b.n	160a <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1728:	2380      	movs	r3, #128	; 0x80
    172a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    172c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    172e:	067b      	lsls	r3, r7, #25
    1730:	d400      	bmi.n	1734 <_spi_interrupt_handler+0x214>
    1732:	e76e      	b.n	1612 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1734:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1736:	0020      	movs	r0, r4
    1738:	4798      	blx	r3
}
    173a:	e76a      	b.n	1612 <_spi_interrupt_handler+0xf2>
    173c:	20000134 	.word	0x20000134
    1740:	2000014c 	.word	0x2000014c

00001744 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1744:	b5f0      	push	{r4, r5, r6, r7, lr}
    1746:	46de      	mov	lr, fp
    1748:	4657      	mov	r7, sl
    174a:	464e      	mov	r6, r9
    174c:	4645      	mov	r5, r8
    174e:	b5e0      	push	{r5, r6, r7, lr}
    1750:	b091      	sub	sp, #68	; 0x44
    1752:	0005      	movs	r5, r0
    1754:	000c      	movs	r4, r1
    1756:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1758:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    175a:	0008      	movs	r0, r1
    175c:	4bbc      	ldr	r3, [pc, #752]	; (1a50 <usart_init+0x30c>)
    175e:	4798      	blx	r3
    1760:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1762:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1764:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1766:	07db      	lsls	r3, r3, #31
    1768:	d506      	bpl.n	1778 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    176a:	b011      	add	sp, #68	; 0x44
    176c:	bc3c      	pop	{r2, r3, r4, r5}
    176e:	4690      	mov	r8, r2
    1770:	4699      	mov	r9, r3
    1772:	46a2      	mov	sl, r4
    1774:	46ab      	mov	fp, r5
    1776:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1778:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    177a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    177c:	079b      	lsls	r3, r3, #30
    177e:	d4f4      	bmi.n	176a <usart_init+0x26>
    1780:	49b4      	ldr	r1, [pc, #720]	; (1a54 <usart_init+0x310>)
    1782:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1784:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1786:	2301      	movs	r3, #1
    1788:	40bb      	lsls	r3, r7
    178a:	4303      	orrs	r3, r0
    178c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    178e:	a90f      	add	r1, sp, #60	; 0x3c
    1790:	272d      	movs	r7, #45	; 0x2d
    1792:	5df3      	ldrb	r3, [r6, r7]
    1794:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1796:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1798:	b2d3      	uxtb	r3, r2
    179a:	9302      	str	r3, [sp, #8]
    179c:	0018      	movs	r0, r3
    179e:	4bae      	ldr	r3, [pc, #696]	; (1a58 <usart_init+0x314>)
    17a0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    17a2:	9802      	ldr	r0, [sp, #8]
    17a4:	4bad      	ldr	r3, [pc, #692]	; (1a5c <usart_init+0x318>)
    17a6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    17a8:	5df0      	ldrb	r0, [r6, r7]
    17aa:	2100      	movs	r1, #0
    17ac:	4bac      	ldr	r3, [pc, #688]	; (1a60 <usart_init+0x31c>)
    17ae:	4798      	blx	r3
	module->character_size = config->character_size;
    17b0:	7af3      	ldrb	r3, [r6, #11]
    17b2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    17b4:	2324      	movs	r3, #36	; 0x24
    17b6:	5cf3      	ldrb	r3, [r6, r3]
    17b8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    17ba:	2325      	movs	r3, #37	; 0x25
    17bc:	5cf3      	ldrb	r3, [r6, r3]
    17be:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    17c0:	7ef3      	ldrb	r3, [r6, #27]
    17c2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    17c4:	7f33      	ldrb	r3, [r6, #28]
    17c6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    17c8:	682b      	ldr	r3, [r5, #0]
    17ca:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    17cc:	0018      	movs	r0, r3
    17ce:	4ba0      	ldr	r3, [pc, #640]	; (1a50 <usart_init+0x30c>)
    17d0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    17d2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    17d4:	2200      	movs	r2, #0
    17d6:	230e      	movs	r3, #14
    17d8:	a906      	add	r1, sp, #24
    17da:	468c      	mov	ip, r1
    17dc:	4463      	add	r3, ip
    17de:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    17e0:	8a32      	ldrh	r2, [r6, #16]
    17e2:	9202      	str	r2, [sp, #8]
    17e4:	2380      	movs	r3, #128	; 0x80
    17e6:	01db      	lsls	r3, r3, #7
    17e8:	429a      	cmp	r2, r3
    17ea:	d100      	bne.n	17ee <usart_init+0xaa>
    17ec:	e09e      	b.n	192c <usart_init+0x1e8>
    17ee:	d90f      	bls.n	1810 <usart_init+0xcc>
    17f0:	23c0      	movs	r3, #192	; 0xc0
    17f2:	01db      	lsls	r3, r3, #7
    17f4:	9a02      	ldr	r2, [sp, #8]
    17f6:	429a      	cmp	r2, r3
    17f8:	d100      	bne.n	17fc <usart_init+0xb8>
    17fa:	e092      	b.n	1922 <usart_init+0x1de>
    17fc:	2380      	movs	r3, #128	; 0x80
    17fe:	021b      	lsls	r3, r3, #8
    1800:	429a      	cmp	r2, r3
    1802:	d000      	beq.n	1806 <usart_init+0xc2>
    1804:	e11f      	b.n	1a46 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1806:	2303      	movs	r3, #3
    1808:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    180a:	2300      	movs	r3, #0
    180c:	9307      	str	r3, [sp, #28]
    180e:	e008      	b.n	1822 <usart_init+0xde>
	switch (config->sample_rate) {
    1810:	2380      	movs	r3, #128	; 0x80
    1812:	019b      	lsls	r3, r3, #6
    1814:	429a      	cmp	r2, r3
    1816:	d000      	beq.n	181a <usart_init+0xd6>
    1818:	e115      	b.n	1a46 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    181a:	2310      	movs	r3, #16
    181c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    181e:	3b0f      	subs	r3, #15
    1820:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1822:	6833      	ldr	r3, [r6, #0]
    1824:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1826:	68f3      	ldr	r3, [r6, #12]
    1828:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    182a:	6973      	ldr	r3, [r6, #20]
    182c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    182e:	7e33      	ldrb	r3, [r6, #24]
    1830:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1832:	2326      	movs	r3, #38	; 0x26
    1834:	5cf3      	ldrb	r3, [r6, r3]
    1836:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1838:	6873      	ldr	r3, [r6, #4]
    183a:	4699      	mov	r9, r3
	switch (transfer_mode)
    183c:	2b00      	cmp	r3, #0
    183e:	d100      	bne.n	1842 <usart_init+0xfe>
    1840:	e0a0      	b.n	1984 <usart_init+0x240>
    1842:	2380      	movs	r3, #128	; 0x80
    1844:	055b      	lsls	r3, r3, #21
    1846:	4599      	cmp	r9, r3
    1848:	d100      	bne.n	184c <usart_init+0x108>
    184a:	e084      	b.n	1956 <usart_init+0x212>
	if(config->encoding_format_enable) {
    184c:	7e73      	ldrb	r3, [r6, #25]
    184e:	2b00      	cmp	r3, #0
    1850:	d002      	beq.n	1858 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1852:	7eb3      	ldrb	r3, [r6, #26]
    1854:	4642      	mov	r2, r8
    1856:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1858:	682a      	ldr	r2, [r5, #0]
    185a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    185c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    185e:	2b00      	cmp	r3, #0
    1860:	d1fc      	bne.n	185c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1862:	330e      	adds	r3, #14
    1864:	aa06      	add	r2, sp, #24
    1866:	4694      	mov	ip, r2
    1868:	4463      	add	r3, ip
    186a:	881b      	ldrh	r3, [r3, #0]
    186c:	4642      	mov	r2, r8
    186e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1870:	9b05      	ldr	r3, [sp, #20]
    1872:	9a03      	ldr	r2, [sp, #12]
    1874:	4313      	orrs	r3, r2
    1876:	9a04      	ldr	r2, [sp, #16]
    1878:	4313      	orrs	r3, r2
    187a:	464a      	mov	r2, r9
    187c:	4313      	orrs	r3, r2
    187e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1880:	465b      	mov	r3, fp
    1882:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1884:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1886:	4653      	mov	r3, sl
    1888:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    188a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    188c:	2327      	movs	r3, #39	; 0x27
    188e:	5cf3      	ldrb	r3, [r6, r3]
    1890:	2b00      	cmp	r3, #0
    1892:	d101      	bne.n	1898 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1894:	3304      	adds	r3, #4
    1896:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1898:	7e73      	ldrb	r3, [r6, #25]
    189a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    189c:	7f32      	ldrb	r2, [r6, #28]
    189e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    18a0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    18a2:	7f72      	ldrb	r2, [r6, #29]
    18a4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    18a6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    18a8:	2224      	movs	r2, #36	; 0x24
    18aa:	5cb2      	ldrb	r2, [r6, r2]
    18ac:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    18ae:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    18b0:	2225      	movs	r2, #37	; 0x25
    18b2:	5cb2      	ldrb	r2, [r6, r2]
    18b4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    18b6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    18b8:	7ab1      	ldrb	r1, [r6, #10]
    18ba:	7af2      	ldrb	r2, [r6, #11]
    18bc:	4311      	orrs	r1, r2
    18be:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    18c0:	8933      	ldrh	r3, [r6, #8]
    18c2:	2bff      	cmp	r3, #255	; 0xff
    18c4:	d100      	bne.n	18c8 <usart_init+0x184>
    18c6:	e081      	b.n	19cc <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    18c8:	2280      	movs	r2, #128	; 0x80
    18ca:	0452      	lsls	r2, r2, #17
    18cc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    18ce:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    18d0:	232c      	movs	r3, #44	; 0x2c
    18d2:	5cf3      	ldrb	r3, [r6, r3]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d103      	bne.n	18e0 <usart_init+0x19c>
    18d8:	4b62      	ldr	r3, [pc, #392]	; (1a64 <usart_init+0x320>)
    18da:	789b      	ldrb	r3, [r3, #2]
    18dc:	079b      	lsls	r3, r3, #30
    18de:	d501      	bpl.n	18e4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    18e0:	2380      	movs	r3, #128	; 0x80
    18e2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    18e4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    18e6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    18e8:	2b00      	cmp	r3, #0
    18ea:	d1fc      	bne.n	18e6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    18ec:	4643      	mov	r3, r8
    18ee:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    18f0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    18f2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    18f4:	2b00      	cmp	r3, #0
    18f6:	d1fc      	bne.n	18f2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    18f8:	4643      	mov	r3, r8
    18fa:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    18fc:	ab0e      	add	r3, sp, #56	; 0x38
    18fe:	2280      	movs	r2, #128	; 0x80
    1900:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1902:	2200      	movs	r2, #0
    1904:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1906:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1908:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    190a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    190c:	930a      	str	r3, [sp, #40]	; 0x28
    190e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1910:	930b      	str	r3, [sp, #44]	; 0x2c
    1912:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1914:	930c      	str	r3, [sp, #48]	; 0x30
    1916:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1918:	9302      	str	r3, [sp, #8]
    191a:	930d      	str	r3, [sp, #52]	; 0x34
    191c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    191e:	ae0a      	add	r6, sp, #40	; 0x28
    1920:	e063      	b.n	19ea <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1922:	2308      	movs	r3, #8
    1924:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1926:	3b07      	subs	r3, #7
    1928:	9307      	str	r3, [sp, #28]
    192a:	e77a      	b.n	1822 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    192c:	6833      	ldr	r3, [r6, #0]
    192e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1930:	68f3      	ldr	r3, [r6, #12]
    1932:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1934:	6973      	ldr	r3, [r6, #20]
    1936:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1938:	7e33      	ldrb	r3, [r6, #24]
    193a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    193c:	2326      	movs	r3, #38	; 0x26
    193e:	5cf3      	ldrb	r3, [r6, r3]
    1940:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1942:	6873      	ldr	r3, [r6, #4]
    1944:	4699      	mov	r9, r3
	switch (transfer_mode)
    1946:	2b00      	cmp	r3, #0
    1948:	d018      	beq.n	197c <usart_init+0x238>
    194a:	2380      	movs	r3, #128	; 0x80
    194c:	055b      	lsls	r3, r3, #21
    194e:	4599      	cmp	r9, r3
    1950:	d001      	beq.n	1956 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1952:	2000      	movs	r0, #0
    1954:	e025      	b.n	19a2 <usart_init+0x25e>
			if (!config->use_external_clock) {
    1956:	2327      	movs	r3, #39	; 0x27
    1958:	5cf3      	ldrb	r3, [r6, r3]
    195a:	2b00      	cmp	r3, #0
    195c:	d000      	beq.n	1960 <usart_init+0x21c>
    195e:	e775      	b.n	184c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1960:	6a33      	ldr	r3, [r6, #32]
    1962:	001f      	movs	r7, r3
    1964:	b2c0      	uxtb	r0, r0
    1966:	4b40      	ldr	r3, [pc, #256]	; (1a68 <usart_init+0x324>)
    1968:	4798      	blx	r3
    196a:	0001      	movs	r1, r0
    196c:	220e      	movs	r2, #14
    196e:	ab06      	add	r3, sp, #24
    1970:	469c      	mov	ip, r3
    1972:	4462      	add	r2, ip
    1974:	0038      	movs	r0, r7
    1976:	4b3d      	ldr	r3, [pc, #244]	; (1a6c <usart_init+0x328>)
    1978:	4798      	blx	r3
    197a:	e012      	b.n	19a2 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    197c:	2308      	movs	r3, #8
    197e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1980:	2300      	movs	r3, #0
    1982:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1984:	2327      	movs	r3, #39	; 0x27
    1986:	5cf3      	ldrb	r3, [r6, r3]
    1988:	2b00      	cmp	r3, #0
    198a:	d00e      	beq.n	19aa <usart_init+0x266>
				status_code =
    198c:	9b06      	ldr	r3, [sp, #24]
    198e:	9300      	str	r3, [sp, #0]
    1990:	9b07      	ldr	r3, [sp, #28]
    1992:	220e      	movs	r2, #14
    1994:	a906      	add	r1, sp, #24
    1996:	468c      	mov	ip, r1
    1998:	4462      	add	r2, ip
    199a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    199c:	6a30      	ldr	r0, [r6, #32]
    199e:	4f34      	ldr	r7, [pc, #208]	; (1a70 <usart_init+0x32c>)
    19a0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    19a2:	2800      	cmp	r0, #0
    19a4:	d000      	beq.n	19a8 <usart_init+0x264>
    19a6:	e6e0      	b.n	176a <usart_init+0x26>
    19a8:	e750      	b.n	184c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    19aa:	6a33      	ldr	r3, [r6, #32]
    19ac:	001f      	movs	r7, r3
    19ae:	b2c0      	uxtb	r0, r0
    19b0:	4b2d      	ldr	r3, [pc, #180]	; (1a68 <usart_init+0x324>)
    19b2:	4798      	blx	r3
    19b4:	0001      	movs	r1, r0
				status_code =
    19b6:	9b06      	ldr	r3, [sp, #24]
    19b8:	9300      	str	r3, [sp, #0]
    19ba:	9b07      	ldr	r3, [sp, #28]
    19bc:	220e      	movs	r2, #14
    19be:	a806      	add	r0, sp, #24
    19c0:	4684      	mov	ip, r0
    19c2:	4462      	add	r2, ip
    19c4:	0038      	movs	r0, r7
    19c6:	4f2a      	ldr	r7, [pc, #168]	; (1a70 <usart_init+0x32c>)
    19c8:	47b8      	blx	r7
    19ca:	e7ea      	b.n	19a2 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    19cc:	7ef3      	ldrb	r3, [r6, #27]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d100      	bne.n	19d4 <usart_init+0x290>
    19d2:	e77d      	b.n	18d0 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    19d4:	2380      	movs	r3, #128	; 0x80
    19d6:	04db      	lsls	r3, r3, #19
    19d8:	431f      	orrs	r7, r3
    19da:	e779      	b.n	18d0 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    19dc:	0020      	movs	r0, r4
    19de:	4b25      	ldr	r3, [pc, #148]	; (1a74 <usart_init+0x330>)
    19e0:	4798      	blx	r3
    19e2:	e007      	b.n	19f4 <usart_init+0x2b0>
    19e4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    19e6:	2f04      	cmp	r7, #4
    19e8:	d00d      	beq.n	1a06 <usart_init+0x2c2>
    19ea:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    19ec:	00bb      	lsls	r3, r7, #2
    19ee:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    19f0:	2800      	cmp	r0, #0
    19f2:	d0f3      	beq.n	19dc <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    19f4:	1c43      	adds	r3, r0, #1
    19f6:	d0f5      	beq.n	19e4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    19f8:	a90e      	add	r1, sp, #56	; 0x38
    19fa:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    19fc:	0c00      	lsrs	r0, r0, #16
    19fe:	b2c0      	uxtb	r0, r0
    1a00:	4b1d      	ldr	r3, [pc, #116]	; (1a78 <usart_init+0x334>)
    1a02:	4798      	blx	r3
    1a04:	e7ee      	b.n	19e4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1a06:	2300      	movs	r3, #0
    1a08:	60eb      	str	r3, [r5, #12]
    1a0a:	612b      	str	r3, [r5, #16]
    1a0c:	616b      	str	r3, [r5, #20]
    1a0e:	61ab      	str	r3, [r5, #24]
    1a10:	61eb      	str	r3, [r5, #28]
    1a12:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1a14:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1a16:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1a18:	2200      	movs	r2, #0
    1a1a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1a1c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1a1e:	3330      	adds	r3, #48	; 0x30
    1a20:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1a22:	3301      	adds	r3, #1
    1a24:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1a26:	3301      	adds	r3, #1
    1a28:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1a2a:	3301      	adds	r3, #1
    1a2c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1a2e:	6828      	ldr	r0, [r5, #0]
    1a30:	4b07      	ldr	r3, [pc, #28]	; (1a50 <usart_init+0x30c>)
    1a32:	4798      	blx	r3
    1a34:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1a36:	4911      	ldr	r1, [pc, #68]	; (1a7c <usart_init+0x338>)
    1a38:	4b11      	ldr	r3, [pc, #68]	; (1a80 <usart_init+0x33c>)
    1a3a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1a3c:	00a4      	lsls	r4, r4, #2
    1a3e:	4b11      	ldr	r3, [pc, #68]	; (1a84 <usart_init+0x340>)
    1a40:	50e5      	str	r5, [r4, r3]
	return status_code;
    1a42:	2000      	movs	r0, #0
    1a44:	e691      	b.n	176a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1a46:	2310      	movs	r3, #16
    1a48:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1a4a:	2300      	movs	r3, #0
    1a4c:	9307      	str	r3, [sp, #28]
    1a4e:	e6e8      	b.n	1822 <usart_init+0xde>
    1a50:	00000ed9 	.word	0x00000ed9
    1a54:	40000400 	.word	0x40000400
    1a58:	000020fd 	.word	0x000020fd
    1a5c:	00002071 	.word	0x00002071
    1a60:	00000d15 	.word	0x00000d15
    1a64:	41002000 	.word	0x41002000
    1a68:	00002119 	.word	0x00002119
    1a6c:	00000c57 	.word	0x00000c57
    1a70:	00000c81 	.word	0x00000c81
    1a74:	00000d61 	.word	0x00000d61
    1a78:	000021f5 	.word	0x000021f5
    1a7c:	00001b25 	.word	0x00001b25
    1a80:	00000f15 	.word	0x00000f15
    1a84:	20000134 	.word	0x20000134

00001a88 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1a88:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1a8a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1a8c:	2a00      	cmp	r2, #0
    1a8e:	d101      	bne.n	1a94 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1a90:	0018      	movs	r0, r3
    1a92:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1a94:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1a96:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1a98:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1a9a:	2a00      	cmp	r2, #0
    1a9c:	d1f8      	bne.n	1a90 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a9e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1aa0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1aa2:	2a00      	cmp	r2, #0
    1aa4:	d1fc      	bne.n	1aa0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1aa6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1aa8:	2102      	movs	r1, #2
    1aaa:	7e1a      	ldrb	r2, [r3, #24]
    1aac:	420a      	tst	r2, r1
    1aae:	d0fc      	beq.n	1aaa <usart_write_wait+0x22>
	return STATUS_OK;
    1ab0:	2300      	movs	r3, #0
    1ab2:	e7ed      	b.n	1a90 <usart_write_wait+0x8>

00001ab4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1ab4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1ab6:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1ab8:	2a00      	cmp	r2, #0
    1aba:	d101      	bne.n	1ac0 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1abc:	0018      	movs	r0, r3
    1abe:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1ac0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1ac2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1ac4:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1ac6:	2a00      	cmp	r2, #0
    1ac8:	d1f8      	bne.n	1abc <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1aca:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1acc:	7e10      	ldrb	r0, [r2, #24]
    1ace:	0740      	lsls	r0, r0, #29
    1ad0:	d5f4      	bpl.n	1abc <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1ad2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	d1fc      	bne.n	1ad2 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1ad8:	8b53      	ldrh	r3, [r2, #26]
    1ada:	b2db      	uxtb	r3, r3
	if (error_code) {
    1adc:	0698      	lsls	r0, r3, #26
    1ade:	d01d      	beq.n	1b1c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1ae0:	0798      	lsls	r0, r3, #30
    1ae2:	d503      	bpl.n	1aec <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1ae4:	2302      	movs	r3, #2
    1ae6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1ae8:	3318      	adds	r3, #24
    1aea:	e7e7      	b.n	1abc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1aec:	0758      	lsls	r0, r3, #29
    1aee:	d503      	bpl.n	1af8 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1af0:	2304      	movs	r3, #4
    1af2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1af4:	331a      	adds	r3, #26
    1af6:	e7e1      	b.n	1abc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1af8:	07d8      	lsls	r0, r3, #31
    1afa:	d503      	bpl.n	1b04 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1afc:	2301      	movs	r3, #1
    1afe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1b00:	3312      	adds	r3, #18
    1b02:	e7db      	b.n	1abc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1b04:	06d8      	lsls	r0, r3, #27
    1b06:	d503      	bpl.n	1b10 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1b08:	2310      	movs	r3, #16
    1b0a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1b0c:	3332      	adds	r3, #50	; 0x32
    1b0e:	e7d5      	b.n	1abc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1b10:	069b      	lsls	r3, r3, #26
    1b12:	d503      	bpl.n	1b1c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1b14:	2320      	movs	r3, #32
    1b16:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1b18:	3321      	adds	r3, #33	; 0x21
    1b1a:	e7cf      	b.n	1abc <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1b1c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1b1e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1b20:	2300      	movs	r3, #0
    1b22:	e7cb      	b.n	1abc <usart_read_wait+0x8>

00001b24 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1b26:	0080      	lsls	r0, r0, #2
    1b28:	4b62      	ldr	r3, [pc, #392]	; (1cb4 <_usart_interrupt_handler+0x190>)
    1b2a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1b2c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b2e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1b30:	2b00      	cmp	r3, #0
    1b32:	d1fc      	bne.n	1b2e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1b34:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1b36:	7da6      	ldrb	r6, [r4, #22]
    1b38:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1b3a:	2330      	movs	r3, #48	; 0x30
    1b3c:	5ceb      	ldrb	r3, [r5, r3]
    1b3e:	2231      	movs	r2, #49	; 0x31
    1b40:	5caf      	ldrb	r7, [r5, r2]
    1b42:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1b44:	07f3      	lsls	r3, r6, #31
    1b46:	d522      	bpl.n	1b8e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1b48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1b4a:	b29b      	uxth	r3, r3
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d01c      	beq.n	1b8a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1b50:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1b52:	7813      	ldrb	r3, [r2, #0]
    1b54:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1b56:	1c51      	adds	r1, r2, #1
    1b58:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1b5a:	7969      	ldrb	r1, [r5, #5]
    1b5c:	2901      	cmp	r1, #1
    1b5e:	d00e      	beq.n	1b7e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1b60:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1b62:	05db      	lsls	r3, r3, #23
    1b64:	0ddb      	lsrs	r3, r3, #23
    1b66:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1b68:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1b6a:	3b01      	subs	r3, #1
    1b6c:	b29b      	uxth	r3, r3
    1b6e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1b70:	2b00      	cmp	r3, #0
    1b72:	d10c      	bne.n	1b8e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1b74:	3301      	adds	r3, #1
    1b76:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1b78:	3301      	adds	r3, #1
    1b7a:	75a3      	strb	r3, [r4, #22]
    1b7c:	e007      	b.n	1b8e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1b7e:	7851      	ldrb	r1, [r2, #1]
    1b80:	0209      	lsls	r1, r1, #8
    1b82:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1b84:	3202      	adds	r2, #2
    1b86:	62aa      	str	r2, [r5, #40]	; 0x28
    1b88:	e7eb      	b.n	1b62 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1b8a:	2301      	movs	r3, #1
    1b8c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1b8e:	07b3      	lsls	r3, r6, #30
    1b90:	d506      	bpl.n	1ba0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1b92:	2302      	movs	r3, #2
    1b94:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1b96:	2200      	movs	r2, #0
    1b98:	3331      	adds	r3, #49	; 0x31
    1b9a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1b9c:	07fb      	lsls	r3, r7, #31
    1b9e:	d41a      	bmi.n	1bd6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1ba0:	0773      	lsls	r3, r6, #29
    1ba2:	d565      	bpl.n	1c70 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1ba4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1ba6:	b29b      	uxth	r3, r3
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d05f      	beq.n	1c6c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1bac:	8b63      	ldrh	r3, [r4, #26]
    1bae:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1bb0:	071a      	lsls	r2, r3, #28
    1bb2:	d414      	bmi.n	1bde <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1bb4:	223f      	movs	r2, #63	; 0x3f
    1bb6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1bb8:	2b00      	cmp	r3, #0
    1bba:	d034      	beq.n	1c26 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1bbc:	079a      	lsls	r2, r3, #30
    1bbe:	d511      	bpl.n	1be4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1bc0:	221a      	movs	r2, #26
    1bc2:	2332      	movs	r3, #50	; 0x32
    1bc4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1bc6:	3b30      	subs	r3, #48	; 0x30
    1bc8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1bca:	077b      	lsls	r3, r7, #29
    1bcc:	d550      	bpl.n	1c70 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1bce:	0028      	movs	r0, r5
    1bd0:	696b      	ldr	r3, [r5, #20]
    1bd2:	4798      	blx	r3
    1bd4:	e04c      	b.n	1c70 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1bd6:	0028      	movs	r0, r5
    1bd8:	68eb      	ldr	r3, [r5, #12]
    1bda:	4798      	blx	r3
    1bdc:	e7e0      	b.n	1ba0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1bde:	2237      	movs	r2, #55	; 0x37
    1be0:	4013      	ands	r3, r2
    1be2:	e7e9      	b.n	1bb8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1be4:	075a      	lsls	r2, r3, #29
    1be6:	d505      	bpl.n	1bf4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1be8:	221e      	movs	r2, #30
    1bea:	2332      	movs	r3, #50	; 0x32
    1bec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1bee:	3b2e      	subs	r3, #46	; 0x2e
    1bf0:	8363      	strh	r3, [r4, #26]
    1bf2:	e7ea      	b.n	1bca <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1bf4:	07da      	lsls	r2, r3, #31
    1bf6:	d505      	bpl.n	1c04 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1bf8:	2213      	movs	r2, #19
    1bfa:	2332      	movs	r3, #50	; 0x32
    1bfc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1bfe:	3b31      	subs	r3, #49	; 0x31
    1c00:	8363      	strh	r3, [r4, #26]
    1c02:	e7e2      	b.n	1bca <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1c04:	06da      	lsls	r2, r3, #27
    1c06:	d505      	bpl.n	1c14 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1c08:	2242      	movs	r2, #66	; 0x42
    1c0a:	2332      	movs	r3, #50	; 0x32
    1c0c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1c0e:	3b22      	subs	r3, #34	; 0x22
    1c10:	8363      	strh	r3, [r4, #26]
    1c12:	e7da      	b.n	1bca <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1c14:	2220      	movs	r2, #32
    1c16:	421a      	tst	r2, r3
    1c18:	d0d7      	beq.n	1bca <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1c1a:	3221      	adds	r2, #33	; 0x21
    1c1c:	2332      	movs	r3, #50	; 0x32
    1c1e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1c20:	3b12      	subs	r3, #18
    1c22:	8363      	strh	r3, [r4, #26]
    1c24:	e7d1      	b.n	1bca <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1c26:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1c28:	05db      	lsls	r3, r3, #23
    1c2a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1c2c:	b2da      	uxtb	r2, r3
    1c2e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1c30:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1c32:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1c34:	1c51      	adds	r1, r2, #1
    1c36:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1c38:	7969      	ldrb	r1, [r5, #5]
    1c3a:	2901      	cmp	r1, #1
    1c3c:	d010      	beq.n	1c60 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1c3e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1c40:	3b01      	subs	r3, #1
    1c42:	b29b      	uxth	r3, r3
    1c44:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1c46:	2b00      	cmp	r3, #0
    1c48:	d112      	bne.n	1c70 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1c4a:	3304      	adds	r3, #4
    1c4c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1c4e:	2200      	movs	r2, #0
    1c50:	332e      	adds	r3, #46	; 0x2e
    1c52:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1c54:	07bb      	lsls	r3, r7, #30
    1c56:	d50b      	bpl.n	1c70 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1c58:	0028      	movs	r0, r5
    1c5a:	692b      	ldr	r3, [r5, #16]
    1c5c:	4798      	blx	r3
    1c5e:	e007      	b.n	1c70 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1c60:	0a1b      	lsrs	r3, r3, #8
    1c62:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1c64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1c66:	3301      	adds	r3, #1
    1c68:	626b      	str	r3, [r5, #36]	; 0x24
    1c6a:	e7e8      	b.n	1c3e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1c6c:	2304      	movs	r3, #4
    1c6e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1c70:	06f3      	lsls	r3, r6, #27
    1c72:	d504      	bpl.n	1c7e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1c74:	2310      	movs	r3, #16
    1c76:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1c78:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1c7a:	06fb      	lsls	r3, r7, #27
    1c7c:	d40e      	bmi.n	1c9c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1c7e:	06b3      	lsls	r3, r6, #26
    1c80:	d504      	bpl.n	1c8c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1c82:	2320      	movs	r3, #32
    1c84:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1c86:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1c88:	073b      	lsls	r3, r7, #28
    1c8a:	d40b      	bmi.n	1ca4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1c8c:	0733      	lsls	r3, r6, #28
    1c8e:	d504      	bpl.n	1c9a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1c90:	2308      	movs	r3, #8
    1c92:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1c94:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1c96:	06bb      	lsls	r3, r7, #26
    1c98:	d408      	bmi.n	1cac <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1c9c:	0028      	movs	r0, r5
    1c9e:	69eb      	ldr	r3, [r5, #28]
    1ca0:	4798      	blx	r3
    1ca2:	e7ec      	b.n	1c7e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1ca4:	0028      	movs	r0, r5
    1ca6:	69ab      	ldr	r3, [r5, #24]
    1ca8:	4798      	blx	r3
    1caa:	e7ef      	b.n	1c8c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1cac:	6a2b      	ldr	r3, [r5, #32]
    1cae:	0028      	movs	r0, r5
    1cb0:	4798      	blx	r3
}
    1cb2:	e7f2      	b.n	1c9a <_usart_interrupt_handler+0x176>
    1cb4:	20000134 	.word	0x20000134

00001cb8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1cb8:	b510      	push	{r4, lr}
	switch (clock_source) {
    1cba:	2808      	cmp	r0, #8
    1cbc:	d803      	bhi.n	1cc6 <system_clock_source_get_hz+0xe>
    1cbe:	0080      	lsls	r0, r0, #2
    1cc0:	4b1b      	ldr	r3, [pc, #108]	; (1d30 <system_clock_source_get_hz+0x78>)
    1cc2:	581b      	ldr	r3, [r3, r0]
    1cc4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1cc6:	2000      	movs	r0, #0
    1cc8:	e030      	b.n	1d2c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1cca:	4b1a      	ldr	r3, [pc, #104]	; (1d34 <system_clock_source_get_hz+0x7c>)
    1ccc:	6918      	ldr	r0, [r3, #16]
    1cce:	e02d      	b.n	1d2c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1cd0:	4b19      	ldr	r3, [pc, #100]	; (1d38 <system_clock_source_get_hz+0x80>)
    1cd2:	6a1b      	ldr	r3, [r3, #32]
    1cd4:	059b      	lsls	r3, r3, #22
    1cd6:	0f9b      	lsrs	r3, r3, #30
    1cd8:	4818      	ldr	r0, [pc, #96]	; (1d3c <system_clock_source_get_hz+0x84>)
    1cda:	40d8      	lsrs	r0, r3
    1cdc:	e026      	b.n	1d2c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1cde:	4b15      	ldr	r3, [pc, #84]	; (1d34 <system_clock_source_get_hz+0x7c>)
    1ce0:	6958      	ldr	r0, [r3, #20]
    1ce2:	e023      	b.n	1d2c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1ce4:	4b13      	ldr	r3, [pc, #76]	; (1d34 <system_clock_source_get_hz+0x7c>)
    1ce6:	681b      	ldr	r3, [r3, #0]
			return 0;
    1ce8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1cea:	079b      	lsls	r3, r3, #30
    1cec:	d51e      	bpl.n	1d2c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1cee:	4912      	ldr	r1, [pc, #72]	; (1d38 <system_clock_source_get_hz+0x80>)
    1cf0:	2210      	movs	r2, #16
    1cf2:	68cb      	ldr	r3, [r1, #12]
    1cf4:	421a      	tst	r2, r3
    1cf6:	d0fc      	beq.n	1cf2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1cf8:	4b0e      	ldr	r3, [pc, #56]	; (1d34 <system_clock_source_get_hz+0x7c>)
    1cfa:	681b      	ldr	r3, [r3, #0]
    1cfc:	075b      	lsls	r3, r3, #29
    1cfe:	d401      	bmi.n	1d04 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1d00:	480f      	ldr	r0, [pc, #60]	; (1d40 <system_clock_source_get_hz+0x88>)
    1d02:	e013      	b.n	1d2c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d04:	2000      	movs	r0, #0
    1d06:	4b0f      	ldr	r3, [pc, #60]	; (1d44 <system_clock_source_get_hz+0x8c>)
    1d08:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1d0a:	4b0a      	ldr	r3, [pc, #40]	; (1d34 <system_clock_source_get_hz+0x7c>)
    1d0c:	689b      	ldr	r3, [r3, #8]
    1d0e:	041b      	lsls	r3, r3, #16
    1d10:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d12:	4358      	muls	r0, r3
    1d14:	e00a      	b.n	1d2c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1d16:	2350      	movs	r3, #80	; 0x50
    1d18:	4a07      	ldr	r2, [pc, #28]	; (1d38 <system_clock_source_get_hz+0x80>)
    1d1a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1d1c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1d1e:	075b      	lsls	r3, r3, #29
    1d20:	d504      	bpl.n	1d2c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1d22:	4b04      	ldr	r3, [pc, #16]	; (1d34 <system_clock_source_get_hz+0x7c>)
    1d24:	68d8      	ldr	r0, [r3, #12]
    1d26:	e001      	b.n	1d2c <system_clock_source_get_hz+0x74>
		return 32768UL;
    1d28:	2080      	movs	r0, #128	; 0x80
    1d2a:	0200      	lsls	r0, r0, #8
	}
}
    1d2c:	bd10      	pop	{r4, pc}
    1d2e:	46c0      	nop			; (mov r8, r8)
    1d30:	00003b10 	.word	0x00003b10
    1d34:	200000bc 	.word	0x200000bc
    1d38:	40000800 	.word	0x40000800
    1d3c:	007a1200 	.word	0x007a1200
    1d40:	02dc6c00 	.word	0x02dc6c00
    1d44:	00002119 	.word	0x00002119

00001d48 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1d48:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1d4a:	490c      	ldr	r1, [pc, #48]	; (1d7c <system_clock_source_osc8m_set_config+0x34>)
    1d4c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1d4e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1d50:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1d52:	7840      	ldrb	r0, [r0, #1]
    1d54:	2201      	movs	r2, #1
    1d56:	4010      	ands	r0, r2
    1d58:	0180      	lsls	r0, r0, #6
    1d5a:	2640      	movs	r6, #64	; 0x40
    1d5c:	43b3      	bics	r3, r6
    1d5e:	4303      	orrs	r3, r0
    1d60:	402a      	ands	r2, r5
    1d62:	01d2      	lsls	r2, r2, #7
    1d64:	2080      	movs	r0, #128	; 0x80
    1d66:	4383      	bics	r3, r0
    1d68:	4313      	orrs	r3, r2
    1d6a:	2203      	movs	r2, #3
    1d6c:	4022      	ands	r2, r4
    1d6e:	0212      	lsls	r2, r2, #8
    1d70:	4803      	ldr	r0, [pc, #12]	; (1d80 <system_clock_source_osc8m_set_config+0x38>)
    1d72:	4003      	ands	r3, r0
    1d74:	4313      	orrs	r3, r2
    1d76:	620b      	str	r3, [r1, #32]
}
    1d78:	bd70      	pop	{r4, r5, r6, pc}
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	40000800 	.word	0x40000800
    1d80:	fffffcff 	.word	0xfffffcff

00001d84 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1d84:	2808      	cmp	r0, #8
    1d86:	d803      	bhi.n	1d90 <system_clock_source_enable+0xc>
    1d88:	0080      	lsls	r0, r0, #2
    1d8a:	4b25      	ldr	r3, [pc, #148]	; (1e20 <system_clock_source_enable+0x9c>)
    1d8c:	581b      	ldr	r3, [r3, r0]
    1d8e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d90:	2017      	movs	r0, #23
    1d92:	e044      	b.n	1e1e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1d94:	4a23      	ldr	r2, [pc, #140]	; (1e24 <system_clock_source_enable+0xa0>)
    1d96:	6a13      	ldr	r3, [r2, #32]
    1d98:	2102      	movs	r1, #2
    1d9a:	430b      	orrs	r3, r1
    1d9c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1d9e:	2000      	movs	r0, #0
    1da0:	e03d      	b.n	1e1e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1da2:	4a20      	ldr	r2, [pc, #128]	; (1e24 <system_clock_source_enable+0xa0>)
    1da4:	6993      	ldr	r3, [r2, #24]
    1da6:	2102      	movs	r1, #2
    1da8:	430b      	orrs	r3, r1
    1daa:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1dac:	2000      	movs	r0, #0
		break;
    1dae:	e036      	b.n	1e1e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1db0:	4a1c      	ldr	r2, [pc, #112]	; (1e24 <system_clock_source_enable+0xa0>)
    1db2:	8a13      	ldrh	r3, [r2, #16]
    1db4:	2102      	movs	r1, #2
    1db6:	430b      	orrs	r3, r1
    1db8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1dba:	2000      	movs	r0, #0
		break;
    1dbc:	e02f      	b.n	1e1e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1dbe:	4a19      	ldr	r2, [pc, #100]	; (1e24 <system_clock_source_enable+0xa0>)
    1dc0:	8a93      	ldrh	r3, [r2, #20]
    1dc2:	2102      	movs	r1, #2
    1dc4:	430b      	orrs	r3, r1
    1dc6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1dc8:	2000      	movs	r0, #0
		break;
    1dca:	e028      	b.n	1e1e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1dcc:	4916      	ldr	r1, [pc, #88]	; (1e28 <system_clock_source_enable+0xa4>)
    1dce:	680b      	ldr	r3, [r1, #0]
    1dd0:	2202      	movs	r2, #2
    1dd2:	4313      	orrs	r3, r2
    1dd4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1dd6:	4b13      	ldr	r3, [pc, #76]	; (1e24 <system_clock_source_enable+0xa0>)
    1dd8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1dda:	0019      	movs	r1, r3
    1ddc:	320e      	adds	r2, #14
    1dde:	68cb      	ldr	r3, [r1, #12]
    1de0:	421a      	tst	r2, r3
    1de2:	d0fc      	beq.n	1dde <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1de4:	4a10      	ldr	r2, [pc, #64]	; (1e28 <system_clock_source_enable+0xa4>)
    1de6:	6891      	ldr	r1, [r2, #8]
    1de8:	4b0e      	ldr	r3, [pc, #56]	; (1e24 <system_clock_source_enable+0xa0>)
    1dea:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1dec:	6852      	ldr	r2, [r2, #4]
    1dee:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1df0:	2200      	movs	r2, #0
    1df2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1df4:	0019      	movs	r1, r3
    1df6:	3210      	adds	r2, #16
    1df8:	68cb      	ldr	r3, [r1, #12]
    1dfa:	421a      	tst	r2, r3
    1dfc:	d0fc      	beq.n	1df8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1dfe:	4b0a      	ldr	r3, [pc, #40]	; (1e28 <system_clock_source_enable+0xa4>)
    1e00:	681b      	ldr	r3, [r3, #0]
    1e02:	b29b      	uxth	r3, r3
    1e04:	4a07      	ldr	r2, [pc, #28]	; (1e24 <system_clock_source_enable+0xa0>)
    1e06:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1e08:	2000      	movs	r0, #0
    1e0a:	e008      	b.n	1e1e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1e0c:	4905      	ldr	r1, [pc, #20]	; (1e24 <system_clock_source_enable+0xa0>)
    1e0e:	2244      	movs	r2, #68	; 0x44
    1e10:	5c8b      	ldrb	r3, [r1, r2]
    1e12:	2002      	movs	r0, #2
    1e14:	4303      	orrs	r3, r0
    1e16:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1e18:	2000      	movs	r0, #0
		break;
    1e1a:	e000      	b.n	1e1e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1e1c:	2000      	movs	r0, #0
}
    1e1e:	4770      	bx	lr
    1e20:	00003b34 	.word	0x00003b34
    1e24:	40000800 	.word	0x40000800
    1e28:	200000bc 	.word	0x200000bc

00001e2c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1e2c:	b530      	push	{r4, r5, lr}
    1e2e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1e30:	22c2      	movs	r2, #194	; 0xc2
    1e32:	00d2      	lsls	r2, r2, #3
    1e34:	4b1a      	ldr	r3, [pc, #104]	; (1ea0 <system_clock_init+0x74>)
    1e36:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1e38:	4a1a      	ldr	r2, [pc, #104]	; (1ea4 <system_clock_init+0x78>)
    1e3a:	6853      	ldr	r3, [r2, #4]
    1e3c:	211e      	movs	r1, #30
    1e3e:	438b      	bics	r3, r1
    1e40:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1e42:	2301      	movs	r3, #1
    1e44:	466a      	mov	r2, sp
    1e46:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1e48:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1e4a:	4d17      	ldr	r5, [pc, #92]	; (1ea8 <system_clock_init+0x7c>)
    1e4c:	b2e0      	uxtb	r0, r4
    1e4e:	4669      	mov	r1, sp
    1e50:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1e52:	3401      	adds	r4, #1
    1e54:	2c25      	cmp	r4, #37	; 0x25
    1e56:	d1f9      	bne.n	1e4c <system_clock_init+0x20>
	config->run_in_standby  = false;
    1e58:	a803      	add	r0, sp, #12
    1e5a:	2400      	movs	r4, #0
    1e5c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1e5e:	2501      	movs	r5, #1
    1e60:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1e62:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1e64:	4b11      	ldr	r3, [pc, #68]	; (1eac <system_clock_init+0x80>)
    1e66:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1e68:	2006      	movs	r0, #6
    1e6a:	4b11      	ldr	r3, [pc, #68]	; (1eb0 <system_clock_init+0x84>)
    1e6c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1e6e:	4b11      	ldr	r3, [pc, #68]	; (1eb4 <system_clock_init+0x88>)
    1e70:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1e72:	4b11      	ldr	r3, [pc, #68]	; (1eb8 <system_clock_init+0x8c>)
    1e74:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1e76:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1e78:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1e7a:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    1e7c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1e7e:	466b      	mov	r3, sp
    1e80:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1e82:	2306      	movs	r3, #6
    1e84:	466a      	mov	r2, sp
    1e86:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    1e88:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1e8a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1e8c:	4669      	mov	r1, sp
    1e8e:	2000      	movs	r0, #0
    1e90:	4b0a      	ldr	r3, [pc, #40]	; (1ebc <system_clock_init+0x90>)
    1e92:	4798      	blx	r3
    1e94:	2000      	movs	r0, #0
    1e96:	4b0a      	ldr	r3, [pc, #40]	; (1ec0 <system_clock_init+0x94>)
    1e98:	4798      	blx	r3
#endif
}
    1e9a:	b005      	add	sp, #20
    1e9c:	bd30      	pop	{r4, r5, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	40000800 	.word	0x40000800
    1ea4:	41004000 	.word	0x41004000
    1ea8:	000020fd 	.word	0x000020fd
    1eac:	00001d49 	.word	0x00001d49
    1eb0:	00001d85 	.word	0x00001d85
    1eb4:	00001ec5 	.word	0x00001ec5
    1eb8:	40000400 	.word	0x40000400
    1ebc:	00001ee9 	.word	0x00001ee9
    1ec0:	00001fa1 	.word	0x00001fa1

00001ec4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1ec4:	4a06      	ldr	r2, [pc, #24]	; (1ee0 <system_gclk_init+0x1c>)
    1ec6:	6993      	ldr	r3, [r2, #24]
    1ec8:	2108      	movs	r1, #8
    1eca:	430b      	orrs	r3, r1
    1ecc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1ece:	2201      	movs	r2, #1
    1ed0:	4b04      	ldr	r3, [pc, #16]	; (1ee4 <system_gclk_init+0x20>)
    1ed2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1ed4:	0019      	movs	r1, r3
    1ed6:	780b      	ldrb	r3, [r1, #0]
    1ed8:	4213      	tst	r3, r2
    1eda:	d1fc      	bne.n	1ed6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1edc:	4770      	bx	lr
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	40000400 	.word	0x40000400
    1ee4:	40000c00 	.word	0x40000c00

00001ee8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1ee8:	b570      	push	{r4, r5, r6, lr}
    1eea:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1eec:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1eee:	780d      	ldrb	r5, [r1, #0]
    1ef0:	022d      	lsls	r5, r5, #8
    1ef2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1ef4:	784b      	ldrb	r3, [r1, #1]
    1ef6:	2b00      	cmp	r3, #0
    1ef8:	d002      	beq.n	1f00 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1efa:	2380      	movs	r3, #128	; 0x80
    1efc:	02db      	lsls	r3, r3, #11
    1efe:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1f00:	7a4b      	ldrb	r3, [r1, #9]
    1f02:	2b00      	cmp	r3, #0
    1f04:	d002      	beq.n	1f0c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1f06:	2380      	movs	r3, #128	; 0x80
    1f08:	031b      	lsls	r3, r3, #12
    1f0a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1f0c:	6848      	ldr	r0, [r1, #4]
    1f0e:	2801      	cmp	r0, #1
    1f10:	d910      	bls.n	1f34 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1f12:	1e43      	subs	r3, r0, #1
    1f14:	4218      	tst	r0, r3
    1f16:	d134      	bne.n	1f82 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1f18:	2802      	cmp	r0, #2
    1f1a:	d930      	bls.n	1f7e <system_gclk_gen_set_config+0x96>
    1f1c:	2302      	movs	r3, #2
    1f1e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1f20:	3201      	adds	r2, #1
						mask <<= 1) {
    1f22:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1f24:	4298      	cmp	r0, r3
    1f26:	d8fb      	bhi.n	1f20 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1f28:	0212      	lsls	r2, r2, #8
    1f2a:	4332      	orrs	r2, r6
    1f2c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1f2e:	2380      	movs	r3, #128	; 0x80
    1f30:	035b      	lsls	r3, r3, #13
    1f32:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1f34:	7a0b      	ldrb	r3, [r1, #8]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1f3a:	2380      	movs	r3, #128	; 0x80
    1f3c:	039b      	lsls	r3, r3, #14
    1f3e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f40:	4a13      	ldr	r2, [pc, #76]	; (1f90 <system_gclk_gen_set_config+0xa8>)
    1f42:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1f44:	b25b      	sxtb	r3, r3
    1f46:	2b00      	cmp	r3, #0
    1f48:	dbfb      	blt.n	1f42 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1f4a:	4b12      	ldr	r3, [pc, #72]	; (1f94 <system_gclk_gen_set_config+0xac>)
    1f4c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1f4e:	4b12      	ldr	r3, [pc, #72]	; (1f98 <system_gclk_gen_set_config+0xb0>)
    1f50:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f52:	4a0f      	ldr	r2, [pc, #60]	; (1f90 <system_gclk_gen_set_config+0xa8>)
    1f54:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1f56:	b25b      	sxtb	r3, r3
    1f58:	2b00      	cmp	r3, #0
    1f5a:	dbfb      	blt.n	1f54 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1f5c:	4b0c      	ldr	r3, [pc, #48]	; (1f90 <system_gclk_gen_set_config+0xa8>)
    1f5e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f60:	001a      	movs	r2, r3
    1f62:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1f64:	b25b      	sxtb	r3, r3
    1f66:	2b00      	cmp	r3, #0
    1f68:	dbfb      	blt.n	1f62 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1f6a:	4a09      	ldr	r2, [pc, #36]	; (1f90 <system_gclk_gen_set_config+0xa8>)
    1f6c:	6853      	ldr	r3, [r2, #4]
    1f6e:	2180      	movs	r1, #128	; 0x80
    1f70:	0249      	lsls	r1, r1, #9
    1f72:	400b      	ands	r3, r1
    1f74:	431d      	orrs	r5, r3
    1f76:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1f78:	4b08      	ldr	r3, [pc, #32]	; (1f9c <system_gclk_gen_set_config+0xb4>)
    1f7a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f7c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1f7e:	2200      	movs	r2, #0
    1f80:	e7d2      	b.n	1f28 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1f82:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1f84:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1f86:	2380      	movs	r3, #128	; 0x80
    1f88:	029b      	lsls	r3, r3, #10
    1f8a:	431d      	orrs	r5, r3
    1f8c:	e7d2      	b.n	1f34 <system_gclk_gen_set_config+0x4c>
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	40000c00 	.word	0x40000c00
    1f94:	00000949 	.word	0x00000949
    1f98:	40000c08 	.word	0x40000c08
    1f9c:	00000989 	.word	0x00000989

00001fa0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1fa0:	b510      	push	{r4, lr}
    1fa2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fa4:	4a0b      	ldr	r2, [pc, #44]	; (1fd4 <system_gclk_gen_enable+0x34>)
    1fa6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1fa8:	b25b      	sxtb	r3, r3
    1faa:	2b00      	cmp	r3, #0
    1fac:	dbfb      	blt.n	1fa6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1fae:	4b0a      	ldr	r3, [pc, #40]	; (1fd8 <system_gclk_gen_enable+0x38>)
    1fb0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1fb2:	4b0a      	ldr	r3, [pc, #40]	; (1fdc <system_gclk_gen_enable+0x3c>)
    1fb4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fb6:	4a07      	ldr	r2, [pc, #28]	; (1fd4 <system_gclk_gen_enable+0x34>)
    1fb8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1fba:	b25b      	sxtb	r3, r3
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	dbfb      	blt.n	1fb8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1fc0:	4a04      	ldr	r2, [pc, #16]	; (1fd4 <system_gclk_gen_enable+0x34>)
    1fc2:	6851      	ldr	r1, [r2, #4]
    1fc4:	2380      	movs	r3, #128	; 0x80
    1fc6:	025b      	lsls	r3, r3, #9
    1fc8:	430b      	orrs	r3, r1
    1fca:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1fcc:	4b04      	ldr	r3, [pc, #16]	; (1fe0 <system_gclk_gen_enable+0x40>)
    1fce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1fd0:	bd10      	pop	{r4, pc}
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	40000c00 	.word	0x40000c00
    1fd8:	00000949 	.word	0x00000949
    1fdc:	40000c04 	.word	0x40000c04
    1fe0:	00000989 	.word	0x00000989

00001fe4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1fe4:	b570      	push	{r4, r5, r6, lr}
    1fe6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fe8:	4a1a      	ldr	r2, [pc, #104]	; (2054 <STACK_SIZE+0x54>)
    1fea:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1fec:	b25b      	sxtb	r3, r3
    1fee:	2b00      	cmp	r3, #0
    1ff0:	dbfb      	blt.n	1fea <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1ff2:	4b19      	ldr	r3, [pc, #100]	; (2058 <STACK_SIZE+0x58>)
    1ff4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ff6:	4b19      	ldr	r3, [pc, #100]	; (205c <STACK_SIZE+0x5c>)
    1ff8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ffa:	4a16      	ldr	r2, [pc, #88]	; (2054 <STACK_SIZE+0x54>)
    1ffc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ffe:	b25b      	sxtb	r3, r3
    2000:	2b00      	cmp	r3, #0
    2002:	dbfb      	blt.n	1ffc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2004:	4e13      	ldr	r6, [pc, #76]	; (2054 <STACK_SIZE+0x54>)
    2006:	6870      	ldr	r0, [r6, #4]
    2008:	04c0      	lsls	r0, r0, #19
    200a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    200c:	4b14      	ldr	r3, [pc, #80]	; (2060 <STACK_SIZE+0x60>)
    200e:	4798      	blx	r3
    2010:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2012:	4b12      	ldr	r3, [pc, #72]	; (205c <STACK_SIZE+0x5c>)
    2014:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2016:	6876      	ldr	r6, [r6, #4]
    2018:	02f6      	lsls	r6, r6, #11
    201a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    201c:	4b11      	ldr	r3, [pc, #68]	; (2064 <STACK_SIZE+0x64>)
    201e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2020:	4a0c      	ldr	r2, [pc, #48]	; (2054 <STACK_SIZE+0x54>)
    2022:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2024:	b25b      	sxtb	r3, r3
    2026:	2b00      	cmp	r3, #0
    2028:	dbfb      	blt.n	2022 <STACK_SIZE+0x22>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    202a:	4b0a      	ldr	r3, [pc, #40]	; (2054 <STACK_SIZE+0x54>)
    202c:	689c      	ldr	r4, [r3, #8]
    202e:	0224      	lsls	r4, r4, #8
    2030:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2032:	4b0d      	ldr	r3, [pc, #52]	; (2068 <STACK_SIZE+0x68>)
    2034:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2036:	2e00      	cmp	r6, #0
    2038:	d107      	bne.n	204a <STACK_SIZE+0x4a>
    203a:	2c01      	cmp	r4, #1
    203c:	d907      	bls.n	204e <STACK_SIZE+0x4e>
		gen_input_hz /= divider;
    203e:	0021      	movs	r1, r4
    2040:	0028      	movs	r0, r5
    2042:	4b0a      	ldr	r3, [pc, #40]	; (206c <STACK_SIZE+0x6c>)
    2044:	4798      	blx	r3
    2046:	0005      	movs	r5, r0
    2048:	e001      	b.n	204e <STACK_SIZE+0x4e>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    204a:	3401      	adds	r4, #1
    204c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    204e:	0028      	movs	r0, r5
    2050:	bd70      	pop	{r4, r5, r6, pc}
    2052:	46c0      	nop			; (mov r8, r8)
    2054:	40000c00 	.word	0x40000c00
    2058:	00000949 	.word	0x00000949
    205c:	40000c04 	.word	0x40000c04
    2060:	00001cb9 	.word	0x00001cb9
    2064:	40000c08 	.word	0x40000c08
    2068:	00000989 	.word	0x00000989
    206c:	000027dd 	.word	0x000027dd

00002070 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2070:	b510      	push	{r4, lr}
    2072:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2074:	4b06      	ldr	r3, [pc, #24]	; (2090 <system_gclk_chan_enable+0x20>)
    2076:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2078:	4b06      	ldr	r3, [pc, #24]	; (2094 <system_gclk_chan_enable+0x24>)
    207a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    207c:	4a06      	ldr	r2, [pc, #24]	; (2098 <system_gclk_chan_enable+0x28>)
    207e:	8853      	ldrh	r3, [r2, #2]
    2080:	2180      	movs	r1, #128	; 0x80
    2082:	01c9      	lsls	r1, r1, #7
    2084:	430b      	orrs	r3, r1
    2086:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2088:	4b04      	ldr	r3, [pc, #16]	; (209c <system_gclk_chan_enable+0x2c>)
    208a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    208c:	bd10      	pop	{r4, pc}
    208e:	46c0      	nop			; (mov r8, r8)
    2090:	00000949 	.word	0x00000949
    2094:	40000c02 	.word	0x40000c02
    2098:	40000c00 	.word	0x40000c00
    209c:	00000989 	.word	0x00000989

000020a0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    20a0:	b510      	push	{r4, lr}
    20a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    20a4:	4b0f      	ldr	r3, [pc, #60]	; (20e4 <system_gclk_chan_disable+0x44>)
    20a6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    20a8:	4b0f      	ldr	r3, [pc, #60]	; (20e8 <system_gclk_chan_disable+0x48>)
    20aa:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    20ac:	4a0f      	ldr	r2, [pc, #60]	; (20ec <system_gclk_chan_disable+0x4c>)
    20ae:	8853      	ldrh	r3, [r2, #2]
    20b0:	051b      	lsls	r3, r3, #20
    20b2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    20b4:	8853      	ldrh	r3, [r2, #2]
    20b6:	490e      	ldr	r1, [pc, #56]	; (20f0 <system_gclk_chan_disable+0x50>)
    20b8:	400b      	ands	r3, r1
    20ba:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    20bc:	8853      	ldrh	r3, [r2, #2]
    20be:	490d      	ldr	r1, [pc, #52]	; (20f4 <system_gclk_chan_disable+0x54>)
    20c0:	400b      	ands	r3, r1
    20c2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    20c4:	0011      	movs	r1, r2
    20c6:	2280      	movs	r2, #128	; 0x80
    20c8:	01d2      	lsls	r2, r2, #7
    20ca:	884b      	ldrh	r3, [r1, #2]
    20cc:	4213      	tst	r3, r2
    20ce:	d1fc      	bne.n	20ca <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    20d0:	4906      	ldr	r1, [pc, #24]	; (20ec <system_gclk_chan_disable+0x4c>)
    20d2:	884a      	ldrh	r2, [r1, #2]
    20d4:	0203      	lsls	r3, r0, #8
    20d6:	4806      	ldr	r0, [pc, #24]	; (20f0 <system_gclk_chan_disable+0x50>)
    20d8:	4002      	ands	r2, r0
    20da:	4313      	orrs	r3, r2
    20dc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    20de:	4b06      	ldr	r3, [pc, #24]	; (20f8 <system_gclk_chan_disable+0x58>)
    20e0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20e2:	bd10      	pop	{r4, pc}
    20e4:	00000949 	.word	0x00000949
    20e8:	40000c02 	.word	0x40000c02
    20ec:	40000c00 	.word	0x40000c00
    20f0:	fffff0ff 	.word	0xfffff0ff
    20f4:	ffffbfff 	.word	0xffffbfff
    20f8:	00000989 	.word	0x00000989

000020fc <system_gclk_chan_set_config>:
{
    20fc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    20fe:	780c      	ldrb	r4, [r1, #0]
    2100:	0224      	lsls	r4, r4, #8
    2102:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2104:	4b02      	ldr	r3, [pc, #8]	; (2110 <system_gclk_chan_set_config+0x14>)
    2106:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2108:	b2a4      	uxth	r4, r4
    210a:	4b02      	ldr	r3, [pc, #8]	; (2114 <system_gclk_chan_set_config+0x18>)
    210c:	805c      	strh	r4, [r3, #2]
}
    210e:	bd10      	pop	{r4, pc}
    2110:	000020a1 	.word	0x000020a1
    2114:	40000c00 	.word	0x40000c00

00002118 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2118:	b510      	push	{r4, lr}
    211a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    211c:	4b06      	ldr	r3, [pc, #24]	; (2138 <system_gclk_chan_get_hz+0x20>)
    211e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2120:	4b06      	ldr	r3, [pc, #24]	; (213c <system_gclk_chan_get_hz+0x24>)
    2122:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2124:	4b06      	ldr	r3, [pc, #24]	; (2140 <system_gclk_chan_get_hz+0x28>)
    2126:	885c      	ldrh	r4, [r3, #2]
    2128:	0524      	lsls	r4, r4, #20
    212a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    212c:	4b05      	ldr	r3, [pc, #20]	; (2144 <system_gclk_chan_get_hz+0x2c>)
    212e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2130:	0020      	movs	r0, r4
    2132:	4b05      	ldr	r3, [pc, #20]	; (2148 <system_gclk_chan_get_hz+0x30>)
    2134:	4798      	blx	r3
}
    2136:	bd10      	pop	{r4, pc}
    2138:	00000949 	.word	0x00000949
    213c:	40000c02 	.word	0x40000c02
    2140:	40000c00 	.word	0x40000c00
    2144:	00000989 	.word	0x00000989
    2148:	00001fe5 	.word	0x00001fe5

0000214c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    214c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    214e:	78d3      	ldrb	r3, [r2, #3]
    2150:	2b00      	cmp	r3, #0
    2152:	d135      	bne.n	21c0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2154:	7813      	ldrb	r3, [r2, #0]
    2156:	2b80      	cmp	r3, #128	; 0x80
    2158:	d029      	beq.n	21ae <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    215a:	061b      	lsls	r3, r3, #24
    215c:	2480      	movs	r4, #128	; 0x80
    215e:	0264      	lsls	r4, r4, #9
    2160:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2162:	7854      	ldrb	r4, [r2, #1]
    2164:	2502      	movs	r5, #2
    2166:	43ac      	bics	r4, r5
    2168:	d106      	bne.n	2178 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    216a:	7894      	ldrb	r4, [r2, #2]
    216c:	2c00      	cmp	r4, #0
    216e:	d120      	bne.n	21b2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2170:	2480      	movs	r4, #128	; 0x80
    2172:	02a4      	lsls	r4, r4, #10
    2174:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2176:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2178:	7854      	ldrb	r4, [r2, #1]
    217a:	3c01      	subs	r4, #1
    217c:	2c01      	cmp	r4, #1
    217e:	d91c      	bls.n	21ba <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2180:	040d      	lsls	r5, r1, #16
    2182:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2184:	24a0      	movs	r4, #160	; 0xa0
    2186:	05e4      	lsls	r4, r4, #23
    2188:	432c      	orrs	r4, r5
    218a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    218c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    218e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2190:	24d0      	movs	r4, #208	; 0xd0
    2192:	0624      	lsls	r4, r4, #24
    2194:	432c      	orrs	r4, r5
    2196:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2198:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    219a:	78d4      	ldrb	r4, [r2, #3]
    219c:	2c00      	cmp	r4, #0
    219e:	d122      	bne.n	21e6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    21a0:	035b      	lsls	r3, r3, #13
    21a2:	d51c      	bpl.n	21de <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    21a4:	7893      	ldrb	r3, [r2, #2]
    21a6:	2b01      	cmp	r3, #1
    21a8:	d01e      	beq.n	21e8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    21aa:	6141      	str	r1, [r0, #20]
    21ac:	e017      	b.n	21de <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    21ae:	2300      	movs	r3, #0
    21b0:	e7d7      	b.n	2162 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    21b2:	24c0      	movs	r4, #192	; 0xc0
    21b4:	02e4      	lsls	r4, r4, #11
    21b6:	4323      	orrs	r3, r4
    21b8:	e7dd      	b.n	2176 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    21ba:	4c0d      	ldr	r4, [pc, #52]	; (21f0 <_system_pinmux_config+0xa4>)
    21bc:	4023      	ands	r3, r4
    21be:	e7df      	b.n	2180 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    21c0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    21c2:	040c      	lsls	r4, r1, #16
    21c4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    21c6:	23a0      	movs	r3, #160	; 0xa0
    21c8:	05db      	lsls	r3, r3, #23
    21ca:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21cc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    21ce:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    21d0:	23d0      	movs	r3, #208	; 0xd0
    21d2:	061b      	lsls	r3, r3, #24
    21d4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21d6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    21d8:	78d3      	ldrb	r3, [r2, #3]
    21da:	2b00      	cmp	r3, #0
    21dc:	d103      	bne.n	21e6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    21de:	7853      	ldrb	r3, [r2, #1]
    21e0:	3b01      	subs	r3, #1
    21e2:	2b01      	cmp	r3, #1
    21e4:	d902      	bls.n	21ec <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    21e6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    21e8:	6181      	str	r1, [r0, #24]
    21ea:	e7f8      	b.n	21de <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    21ec:	6081      	str	r1, [r0, #8]
}
    21ee:	e7fa      	b.n	21e6 <_system_pinmux_config+0x9a>
    21f0:	fffbffff 	.word	0xfffbffff

000021f4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    21f4:	b510      	push	{r4, lr}
    21f6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    21f8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    21fa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    21fc:	2900      	cmp	r1, #0
    21fe:	d104      	bne.n	220a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2200:	0943      	lsrs	r3, r0, #5
    2202:	01db      	lsls	r3, r3, #7
    2204:	4905      	ldr	r1, [pc, #20]	; (221c <system_pinmux_pin_set_config+0x28>)
    2206:	468c      	mov	ip, r1
    2208:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    220a:	241f      	movs	r4, #31
    220c:	4020      	ands	r0, r4
    220e:	2101      	movs	r1, #1
    2210:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2212:	0018      	movs	r0, r3
    2214:	4b02      	ldr	r3, [pc, #8]	; (2220 <system_pinmux_pin_set_config+0x2c>)
    2216:	4798      	blx	r3
}
    2218:	bd10      	pop	{r4, pc}
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	41004400 	.word	0x41004400
    2220:	0000214d 	.word	0x0000214d

00002224 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2224:	4770      	bx	lr
	...

00002228 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2228:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    222a:	4b05      	ldr	r3, [pc, #20]	; (2240 <system_init+0x18>)
    222c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    222e:	4b05      	ldr	r3, [pc, #20]	; (2244 <system_init+0x1c>)
    2230:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2232:	4b05      	ldr	r3, [pc, #20]	; (2248 <system_init+0x20>)
    2234:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2236:	4b05      	ldr	r3, [pc, #20]	; (224c <system_init+0x24>)
    2238:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    223a:	4b05      	ldr	r3, [pc, #20]	; (2250 <system_init+0x28>)
    223c:	4798      	blx	r3
}
    223e:	bd10      	pop	{r4, pc}
    2240:	00001e2d 	.word	0x00001e2d
    2244:	00000115 	.word	0x00000115
    2248:	00002225 	.word	0x00002225
    224c:	00000a85 	.word	0x00000a85
    2250:	00002225 	.word	0x00002225

00002254 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    2254:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    2256:	2201      	movs	r2, #1
    2258:	4b03      	ldr	r3, [pc, #12]	; (2268 <WDT_Handler+0x14>)
    225a:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    225c:	4b03      	ldr	r3, [pc, #12]	; (226c <WDT_Handler+0x18>)
    225e:	681b      	ldr	r3, [r3, #0]
    2260:	2b00      	cmp	r3, #0
    2262:	d000      	beq.n	2266 <WDT_Handler+0x12>
		wdt_early_warning_callback();
    2264:	4798      	blx	r3
	}
}
    2266:	bd10      	pop	{r4, pc}
    2268:	40001000 	.word	0x40001000
    226c:	20000150 	.word	0x20000150

00002270 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2270:	e7fe      	b.n	2270 <Dummy_Handler>
	...

00002274 <Reset_Handler>:
{
    2274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2276:	4a2a      	ldr	r2, [pc, #168]	; (2320 <Reset_Handler+0xac>)
    2278:	4b2a      	ldr	r3, [pc, #168]	; (2324 <Reset_Handler+0xb0>)
    227a:	429a      	cmp	r2, r3
    227c:	d011      	beq.n	22a2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    227e:	001a      	movs	r2, r3
    2280:	4b29      	ldr	r3, [pc, #164]	; (2328 <Reset_Handler+0xb4>)
    2282:	429a      	cmp	r2, r3
    2284:	d20d      	bcs.n	22a2 <Reset_Handler+0x2e>
    2286:	4a29      	ldr	r2, [pc, #164]	; (232c <Reset_Handler+0xb8>)
    2288:	3303      	adds	r3, #3
    228a:	1a9b      	subs	r3, r3, r2
    228c:	089b      	lsrs	r3, r3, #2
    228e:	3301      	adds	r3, #1
    2290:	009b      	lsls	r3, r3, #2
    2292:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2294:	4823      	ldr	r0, [pc, #140]	; (2324 <Reset_Handler+0xb0>)
    2296:	4922      	ldr	r1, [pc, #136]	; (2320 <Reset_Handler+0xac>)
    2298:	588c      	ldr	r4, [r1, r2]
    229a:	5084      	str	r4, [r0, r2]
    229c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    229e:	429a      	cmp	r2, r3
    22a0:	d1fa      	bne.n	2298 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    22a2:	4a23      	ldr	r2, [pc, #140]	; (2330 <Reset_Handler+0xbc>)
    22a4:	4b23      	ldr	r3, [pc, #140]	; (2334 <Reset_Handler+0xc0>)
    22a6:	429a      	cmp	r2, r3
    22a8:	d20a      	bcs.n	22c0 <Reset_Handler+0x4c>
    22aa:	43d3      	mvns	r3, r2
    22ac:	4921      	ldr	r1, [pc, #132]	; (2334 <Reset_Handler+0xc0>)
    22ae:	185b      	adds	r3, r3, r1
    22b0:	2103      	movs	r1, #3
    22b2:	438b      	bics	r3, r1
    22b4:	3304      	adds	r3, #4
    22b6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    22b8:	2100      	movs	r1, #0
    22ba:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    22bc:	4293      	cmp	r3, r2
    22be:	d1fc      	bne.n	22ba <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    22c0:	4a1d      	ldr	r2, [pc, #116]	; (2338 <Reset_Handler+0xc4>)
    22c2:	21ff      	movs	r1, #255	; 0xff
    22c4:	4b1d      	ldr	r3, [pc, #116]	; (233c <Reset_Handler+0xc8>)
    22c6:	438b      	bics	r3, r1
    22c8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    22ca:	39fd      	subs	r1, #253	; 0xfd
    22cc:	2390      	movs	r3, #144	; 0x90
    22ce:	005b      	lsls	r3, r3, #1
    22d0:	4a1b      	ldr	r2, [pc, #108]	; (2340 <Reset_Handler+0xcc>)
    22d2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    22d4:	4a1b      	ldr	r2, [pc, #108]	; (2344 <Reset_Handler+0xd0>)
    22d6:	78d3      	ldrb	r3, [r2, #3]
    22d8:	2503      	movs	r5, #3
    22da:	43ab      	bics	r3, r5
    22dc:	2402      	movs	r4, #2
    22de:	4323      	orrs	r3, r4
    22e0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    22e2:	78d3      	ldrb	r3, [r2, #3]
    22e4:	270c      	movs	r7, #12
    22e6:	43bb      	bics	r3, r7
    22e8:	2608      	movs	r6, #8
    22ea:	4333      	orrs	r3, r6
    22ec:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    22ee:	4b16      	ldr	r3, [pc, #88]	; (2348 <Reset_Handler+0xd4>)
    22f0:	7b98      	ldrb	r0, [r3, #14]
    22f2:	2230      	movs	r2, #48	; 0x30
    22f4:	4390      	bics	r0, r2
    22f6:	2220      	movs	r2, #32
    22f8:	4310      	orrs	r0, r2
    22fa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    22fc:	7b99      	ldrb	r1, [r3, #14]
    22fe:	43b9      	bics	r1, r7
    2300:	4331      	orrs	r1, r6
    2302:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2304:	7b9a      	ldrb	r2, [r3, #14]
    2306:	43aa      	bics	r2, r5
    2308:	4322      	orrs	r2, r4
    230a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    230c:	4a0f      	ldr	r2, [pc, #60]	; (234c <Reset_Handler+0xd8>)
    230e:	6853      	ldr	r3, [r2, #4]
    2310:	2180      	movs	r1, #128	; 0x80
    2312:	430b      	orrs	r3, r1
    2314:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2316:	4b0e      	ldr	r3, [pc, #56]	; (2350 <Reset_Handler+0xdc>)
    2318:	4798      	blx	r3
        main();
    231a:	4b0e      	ldr	r3, [pc, #56]	; (2354 <Reset_Handler+0xe0>)
    231c:	4798      	blx	r3
    231e:	e7fe      	b.n	231e <Reset_Handler+0xaa>
    2320:	00003c64 	.word	0x00003c64
    2324:	20000000 	.word	0x20000000
    2328:	20000074 	.word	0x20000074
    232c:	20000004 	.word	0x20000004
    2330:	20000074 	.word	0x20000074
    2334:	200001ec 	.word	0x200001ec
    2338:	e000ed00 	.word	0xe000ed00
    233c:	00000000 	.word	0x00000000
    2340:	41007000 	.word	0x41007000
    2344:	41005000 	.word	0x41005000
    2348:	41004800 	.word	0x41004800
    234c:	41004000 	.word	0x41004000
    2350:	00002949 	.word	0x00002949
    2354:	00002591 	.word	0x00002591

00002358 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2358:	b5f0      	push	{r4, r5, r6, r7, lr}
    235a:	46c6      	mov	lr, r8
    235c:	b500      	push	{lr}
    235e:	000c      	movs	r4, r1
    2360:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2362:	2800      	cmp	r0, #0
    2364:	d10f      	bne.n	2386 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2366:	2a00      	cmp	r2, #0
    2368:	dd11      	ble.n	238e <_read+0x36>
    236a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    236c:	4e09      	ldr	r6, [pc, #36]	; (2394 <_read+0x3c>)
    236e:	4d0a      	ldr	r5, [pc, #40]	; (2398 <_read+0x40>)
    2370:	6830      	ldr	r0, [r6, #0]
    2372:	0021      	movs	r1, r4
    2374:	682b      	ldr	r3, [r5, #0]
    2376:	4798      	blx	r3
		ptr++;
    2378:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    237a:	42bc      	cmp	r4, r7
    237c:	d1f8      	bne.n	2370 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    237e:	4640      	mov	r0, r8
    2380:	bc04      	pop	{r2}
    2382:	4690      	mov	r8, r2
    2384:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2386:	2301      	movs	r3, #1
    2388:	425b      	negs	r3, r3
    238a:	4698      	mov	r8, r3
    238c:	e7f7      	b.n	237e <_read+0x26>
	for (; len > 0; --len) {
    238e:	4680      	mov	r8, r0
    2390:	e7f5      	b.n	237e <_read+0x26>
    2392:	46c0      	nop			; (mov r8, r8)
    2394:	2000015c 	.word	0x2000015c
    2398:	20000154 	.word	0x20000154

0000239c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    239c:	b5f0      	push	{r4, r5, r6, r7, lr}
    239e:	46c6      	mov	lr, r8
    23a0:	b500      	push	{lr}
    23a2:	000e      	movs	r6, r1
    23a4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    23a6:	3801      	subs	r0, #1
    23a8:	2802      	cmp	r0, #2
    23aa:	d810      	bhi.n	23ce <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    23ac:	2a00      	cmp	r2, #0
    23ae:	d011      	beq.n	23d4 <_write+0x38>
    23b0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    23b2:	4b0c      	ldr	r3, [pc, #48]	; (23e4 <_write+0x48>)
    23b4:	4698      	mov	r8, r3
    23b6:	4f0c      	ldr	r7, [pc, #48]	; (23e8 <_write+0x4c>)
    23b8:	4643      	mov	r3, r8
    23ba:	6818      	ldr	r0, [r3, #0]
    23bc:	5d31      	ldrb	r1, [r6, r4]
    23be:	683b      	ldr	r3, [r7, #0]
    23c0:	4798      	blx	r3
    23c2:	2800      	cmp	r0, #0
    23c4:	db08      	blt.n	23d8 <_write+0x3c>
			return -1;
		}
		++nChars;
    23c6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    23c8:	42a5      	cmp	r5, r4
    23ca:	d1f5      	bne.n	23b8 <_write+0x1c>
    23cc:	e006      	b.n	23dc <_write+0x40>
		return -1;
    23ce:	2401      	movs	r4, #1
    23d0:	4264      	negs	r4, r4
    23d2:	e003      	b.n	23dc <_write+0x40>
	for (; len != 0; --len) {
    23d4:	0014      	movs	r4, r2
    23d6:	e001      	b.n	23dc <_write+0x40>
			return -1;
    23d8:	2401      	movs	r4, #1
    23da:	4264      	negs	r4, r4
	}
	return nChars;
}
    23dc:	0020      	movs	r0, r4
    23de:	bc04      	pop	{r2}
    23e0:	4690      	mov	r8, r2
    23e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23e4:	2000015c 	.word	0x2000015c
    23e8:	20000158 	.word	0x20000158

000023ec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    23ec:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    23ee:	4a06      	ldr	r2, [pc, #24]	; (2408 <_sbrk+0x1c>)
    23f0:	6812      	ldr	r2, [r2, #0]
    23f2:	2a00      	cmp	r2, #0
    23f4:	d004      	beq.n	2400 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    23f6:	4a04      	ldr	r2, [pc, #16]	; (2408 <_sbrk+0x1c>)
    23f8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    23fa:	18c3      	adds	r3, r0, r3
    23fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    23fe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2400:	4902      	ldr	r1, [pc, #8]	; (240c <_sbrk+0x20>)
    2402:	4a01      	ldr	r2, [pc, #4]	; (2408 <_sbrk+0x1c>)
    2404:	6011      	str	r1, [r2, #0]
    2406:	e7f6      	b.n	23f6 <_sbrk+0xa>
    2408:	200000d4 	.word	0x200000d4
    240c:	200021f0 	.word	0x200021f0

00002410 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2410:	2001      	movs	r0, #1
    2412:	4240      	negs	r0, r0
    2414:	4770      	bx	lr

00002416 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2416:	2380      	movs	r3, #128	; 0x80
    2418:	019b      	lsls	r3, r3, #6
    241a:	604b      	str	r3, [r1, #4]

	return 0;
}
    241c:	2000      	movs	r0, #0
    241e:	4770      	bx	lr

00002420 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2420:	2001      	movs	r0, #1
    2422:	4770      	bx	lr

00002424 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2424:	2000      	movs	r0, #0
    2426:	4770      	bx	lr

00002428 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2428:	b570      	push	{r4, r5, r6, lr}
    242a:	b082      	sub	sp, #8
    242c:	0005      	movs	r5, r0
    242e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2430:	2200      	movs	r2, #0
    2432:	466b      	mov	r3, sp
    2434:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2436:	4c06      	ldr	r4, [pc, #24]	; (2450 <usart_serial_getchar+0x28>)
    2438:	466b      	mov	r3, sp
    243a:	1d99      	adds	r1, r3, #6
    243c:	0028      	movs	r0, r5
    243e:	47a0      	blx	r4
    2440:	2800      	cmp	r0, #0
    2442:	d1f9      	bne.n	2438 <usart_serial_getchar+0x10>

	*c = temp;
    2444:	466b      	mov	r3, sp
    2446:	3306      	adds	r3, #6
    2448:	881b      	ldrh	r3, [r3, #0]
    244a:	7033      	strb	r3, [r6, #0]
}
    244c:	b002      	add	sp, #8
    244e:	bd70      	pop	{r4, r5, r6, pc}
    2450:	00001ab5 	.word	0x00001ab5

00002454 <usart_serial_putchar>:
{
    2454:	b570      	push	{r4, r5, r6, lr}
    2456:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2458:	b28c      	uxth	r4, r1
    245a:	4e03      	ldr	r6, [pc, #12]	; (2468 <usart_serial_putchar+0x14>)
    245c:	0021      	movs	r1, r4
    245e:	0028      	movs	r0, r5
    2460:	47b0      	blx	r6
    2462:	2800      	cmp	r0, #0
    2464:	d1fa      	bne.n	245c <usart_serial_putchar+0x8>
}
    2466:	bd70      	pop	{r4, r5, r6, pc}
    2468:	00001a89 	.word	0x00001a89

0000246c <configure_usart>:
#define EDBG_CDC_SERCOM_PINMUX_PAD3  PINMUX_PB11D_SERCOM4_PAD3

struct usart_module usart_instance;

void configure_usart(void)
{
    246c:	b5f0      	push	{r4, r5, r6, r7, lr}
    246e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2470:	2380      	movs	r3, #128	; 0x80
    2472:	05db      	lsls	r3, r3, #23
    2474:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2476:	2300      	movs	r3, #0
    2478:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    247a:	22ff      	movs	r2, #255	; 0xff
    247c:	4669      	mov	r1, sp
    247e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2480:	2200      	movs	r2, #0
    2482:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2484:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    2486:	2196      	movs	r1, #150	; 0x96
    2488:	0189      	lsls	r1, r1, #6
    248a:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    248c:	2401      	movs	r4, #1
    248e:	2124      	movs	r1, #36	; 0x24
    2490:	4668      	mov	r0, sp
    2492:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2494:	3101      	adds	r1, #1
    2496:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2498:	3101      	adds	r1, #1
    249a:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    249c:	3101      	adds	r1, #1
    249e:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    24a0:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    24a2:	3105      	adds	r1, #5
    24a4:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    24a6:	3101      	adds	r1, #1
    24a8:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    24aa:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    24ac:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    24ae:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    24b0:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    24b2:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    24b4:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    24b6:	2313      	movs	r3, #19
    24b8:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    24ba:	7742      	strb	r2, [r0, #29]
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 9600;
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    24bc:	23c4      	movs	r3, #196	; 0xc4
    24be:	039b      	lsls	r3, r3, #14
    24c0:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    24c2:	2301      	movs	r3, #1
    24c4:	425b      	negs	r3, r3
    24c6:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    24c8:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    24ca:	4b17      	ldr	r3, [pc, #92]	; (2528 <configure_usart+0xbc>)
    24cc:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    24ce:	4b17      	ldr	r3, [pc, #92]	; (252c <configure_usart+0xc0>)
    24d0:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    24d2:	4d17      	ldr	r5, [pc, #92]	; (2530 <configure_usart+0xc4>)
    24d4:	4b17      	ldr	r3, [pc, #92]	; (2534 <configure_usart+0xc8>)
    24d6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    24d8:	4a17      	ldr	r2, [pc, #92]	; (2538 <configure_usart+0xcc>)
    24da:	4b18      	ldr	r3, [pc, #96]	; (253c <configure_usart+0xd0>)
    24dc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    24de:	4a18      	ldr	r2, [pc, #96]	; (2540 <configure_usart+0xd4>)
    24e0:	4b18      	ldr	r3, [pc, #96]	; (2544 <configure_usart+0xd8>)
    24e2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    24e4:	466a      	mov	r2, sp
    24e6:	4918      	ldr	r1, [pc, #96]	; (2548 <configure_usart+0xdc>)
    24e8:	0028      	movs	r0, r5
    24ea:	4b18      	ldr	r3, [pc, #96]	; (254c <configure_usart+0xe0>)
    24ec:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    24ee:	4f18      	ldr	r7, [pc, #96]	; (2550 <configure_usart+0xe4>)
    24f0:	683b      	ldr	r3, [r7, #0]
    24f2:	6898      	ldr	r0, [r3, #8]
    24f4:	2100      	movs	r1, #0
    24f6:	4e17      	ldr	r6, [pc, #92]	; (2554 <configure_usart+0xe8>)
    24f8:	47b0      	blx	r6
	setbuf(stdin, NULL);
    24fa:	683b      	ldr	r3, [r7, #0]
    24fc:	6858      	ldr	r0, [r3, #4]
    24fe:	2100      	movs	r1, #0
    2500:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2502:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2504:	0030      	movs	r0, r6
    2506:	4b14      	ldr	r3, [pc, #80]	; (2558 <configure_usart+0xec>)
    2508:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    250a:	231f      	movs	r3, #31
    250c:	4018      	ands	r0, r3
    250e:	4084      	lsls	r4, r0
    2510:	4b12      	ldr	r3, [pc, #72]	; (255c <configure_usart+0xf0>)
    2512:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2514:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2516:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2518:	2b00      	cmp	r3, #0
    251a:	d1fc      	bne.n	2516 <configure_usart+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    251c:	6833      	ldr	r3, [r6, #0]
    251e:	2202      	movs	r2, #2
    2520:	4313      	orrs	r3, r2
    2522:	6033      	str	r3, [r6, #0]
	//config_usart.pinmux_pad3 = PINMUX_PA21D_SERCOM3_PAD3;

	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);

	usart_enable(&usart_instance);
}
    2524:	b011      	add	sp, #68	; 0x44
    2526:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2528:	002a0003 	.word	0x002a0003
    252c:	002b0003 	.word	0x002b0003
    2530:	20000160 	.word	0x20000160
    2534:	2000015c 	.word	0x2000015c
    2538:	00002455 	.word	0x00002455
    253c:	20000158 	.word	0x20000158
    2540:	00002429 	.word	0x00002429
    2544:	20000154 	.word	0x20000154
    2548:	42001800 	.word	0x42001800
    254c:	00001745 	.word	0x00001745
    2550:	20000010 	.word	0x20000010
    2554:	00002aa9 	.word	0x00002aa9
    2558:	00000f51 	.word	0x00000f51
    255c:	e000e100 	.word	0xe000e100

00002560 <configure_nvm>:
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at_chip_config);
}

//nvm
void configure_nvm(void)
{
    2560:	b500      	push	{lr}
    2562:	b083      	sub	sp, #12
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    2564:	2200      	movs	r2, #0
    2566:	466b      	mov	r3, sp
    2568:	701a      	strb	r2, [r3, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    256a:	4b07      	ldr	r3, [pc, #28]	; (2588 <configure_nvm+0x28>)
    256c:	685b      	ldr	r3, [r3, #4]
    256e:	06db      	lsls	r3, r3, #27
    2570:	0f1b      	lsrs	r3, r3, #28
    2572:	4669      	mov	r1, sp
    2574:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
    2576:	70ca      	strb	r2, [r1, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    2578:	710a      	strb	r2, [r1, #4]
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
    257a:	704a      	strb	r2, [r1, #1]
	nvm_set_config(&config_nvm);
    257c:	4668      	mov	r0, sp
    257e:	4b03      	ldr	r3, [pc, #12]	; (258c <configure_nvm+0x2c>)
    2580:	4798      	blx	r3
}
    2582:	b003      	add	sp, #12
    2584:	bd00      	pop	{pc}
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	41004000 	.word	0x41004000
    258c:	00000af1 	.word	0x00000af1

00002590 <main>:
crc32_t crc2;



int main (void)
{
    2590:	b5f0      	push	{r4, r5, r6, r7, lr}
    2592:	b091      	sub	sp, #68	; 0x44
	system_init();
    2594:	4b67      	ldr	r3, [pc, #412]	; (2734 <main+0x1a4>)
    2596:	4798      	blx	r3
	cpu_irq_enable();
    2598:	2501      	movs	r5, #1
    259a:	4b67      	ldr	r3, [pc, #412]	; (2738 <main+0x1a8>)
    259c:	701d      	strb	r5, [r3, #0]
    259e:	f3bf 8f5f 	dmb	sy
    25a2:	b662      	cpsie	i
	config->mode             = SPI_MODE_MASTER;
    25a4:	ac02      	add	r4, sp, #8
    25a6:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    25a8:	2300      	movs	r3, #0
    25aa:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    25ac:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    25ae:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    25b0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    25b2:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    25b4:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    25b6:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    25b8:	2224      	movs	r2, #36	; 0x24
    25ba:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    25bc:	3a18      	subs	r2, #24
    25be:	2100      	movs	r1, #0
    25c0:	a808      	add	r0, sp, #32
    25c2:	4b5e      	ldr	r3, [pc, #376]	; (273c <main+0x1ac>)
    25c4:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    25c6:	4b5e      	ldr	r3, [pc, #376]	; (2740 <main+0x1b0>)
    25c8:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    25ca:	2380      	movs	r3, #128	; 0x80
    25cc:	025b      	lsls	r3, r3, #9
    25ce:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    25d0:	4b5c      	ldr	r3, [pc, #368]	; (2744 <main+0x1b4>)
    25d2:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    25d4:	2301      	movs	r3, #1
    25d6:	425b      	negs	r3, r3
    25d8:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    25da:	4b5b      	ldr	r3, [pc, #364]	; (2748 <main+0x1b8>)
    25dc:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    25de:	4b5b      	ldr	r3, [pc, #364]	; (274c <main+0x1bc>)
    25e0:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    25e2:	4e5b      	ldr	r6, [pc, #364]	; (2750 <main+0x1c0>)
    25e4:	0022      	movs	r2, r4
    25e6:	495b      	ldr	r1, [pc, #364]	; (2754 <main+0x1c4>)
    25e8:	0030      	movs	r0, r6
    25ea:	4b5b      	ldr	r3, [pc, #364]	; (2758 <main+0x1c8>)
    25ec:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    25ee:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    25f0:	0020      	movs	r0, r4
    25f2:	4b5a      	ldr	r3, [pc, #360]	; (275c <main+0x1cc>)
    25f4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    25f6:	231f      	movs	r3, #31
    25f8:	4018      	ands	r0, r3
    25fa:	4085      	lsls	r5, r0
    25fc:	4b58      	ldr	r3, [pc, #352]	; (2760 <main+0x1d0>)
    25fe:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2600:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    2602:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2604:	2b00      	cmp	r3, #0
    2606:	d1fc      	bne.n	2602 <main+0x72>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2608:	6823      	ldr	r3, [r4, #0]
    260a:	2202      	movs	r2, #2
    260c:	4313      	orrs	r3, r2
    260e:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    2610:	4c54      	ldr	r4, [pc, #336]	; (2764 <main+0x1d4>)
    2612:	2304      	movs	r3, #4
    2614:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
    2616:	3303      	adds	r3, #3
    2618:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
    261a:	4b4d      	ldr	r3, [pc, #308]	; (2750 <main+0x1c0>)
    261c:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    261e:	a901      	add	r1, sp, #4
    2620:	2301      	movs	r3, #1
    2622:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    2624:	2200      	movs	r2, #0
    2626:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    2628:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    262a:	2007      	movs	r0, #7
    262c:	4b4e      	ldr	r3, [pc, #312]	; (2768 <main+0x1d8>)
    262e:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    2630:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    2632:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2634:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2636:	2900      	cmp	r1, #0
    2638:	d104      	bne.n	2644 <main+0xb4>
		return &(ports[port_index]->Group[group_index]);
    263a:	0953      	lsrs	r3, r2, #5
    263c:	01db      	lsls	r3, r3, #7
    263e:	494b      	ldr	r1, [pc, #300]	; (276c <main+0x1dc>)
    2640:	468c      	mov	ip, r1
    2642:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2644:	211f      	movs	r1, #31
    2646:	4011      	ands	r1, r2
    2648:	2201      	movs	r2, #1
    264a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    264c:	619a      	str	r2, [r3, #24]
	system_interrupt_enable_global();

	at25dfx_init();
	configure_nvm();
    264e:	4b48      	ldr	r3, [pc, #288]	; (2770 <main+0x1e0>)
    2650:	4798      	blx	r3
	configure_usart();
    2652:	4b48      	ldr	r3, [pc, #288]	; (2774 <main+0x1e4>)
    2654:	4798      	blx	r3
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    2656:	4848      	ldr	r0, [pc, #288]	; (2778 <main+0x1e8>)
    2658:	2400      	movs	r4, #0
    265a:	7004      	strb	r4, [r0, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    265c:	4b47      	ldr	r3, [pc, #284]	; (277c <main+0x1ec>)
    265e:	685b      	ldr	r3, [r3, #4]
    2660:	06db      	lsls	r3, r3, #27
    2662:	0f1b      	lsrs	r3, r3, #28
    2664:	7083      	strb	r3, [r0, #2]
	config->disable_cache     = false;
    2666:	70c4      	strb	r4, [r0, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    2668:	7104      	strb	r4, [r0, #4]
	
	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
    266a:	7044      	strb	r4, [r0, #1]
	nvm_set_config(&config_nvm);
    266c:	4b44      	ldr	r3, [pc, #272]	; (2780 <main+0x1f0>)
    266e:	4798      	blx	r3
	
	printf("init\r\n");
    2670:	4844      	ldr	r0, [pc, #272]	; (2784 <main+0x1f4>)
    2672:	4b45      	ldr	r3, [pc, #276]	; (2788 <main+0x1f8>)
    2674:	4798      	blx	r3
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
	*crc = 0;
    2676:	4a45      	ldr	r2, [pc, #276]	; (278c <main+0x1fc>)
    2678:	6014      	str	r4, [r2, #0]

	return crc32_recalculate(data, length, crc);
    267a:	210a      	movs	r1, #10
    267c:	4844      	ldr	r0, [pc, #272]	; (2790 <main+0x200>)
    267e:	4b45      	ldr	r3, [pc, #276]	; (2794 <main+0x204>)
    2680:	4798      	blx	r3
	
	crc32_calculate(write_buffer, sizeof(write_buffer), &crc1);

	at25dfx_chip_wake(&at25dfx_chip);
    2682:	4c38      	ldr	r4, [pc, #224]	; (2764 <main+0x1d4>)
    2684:	0020      	movs	r0, r4
    2686:	4b44      	ldr	r3, [pc, #272]	; (2798 <main+0x208>)
    2688:	4798      	blx	r3
	    
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    268a:	0020      	movs	r0, r4
    268c:	4b43      	ldr	r3, [pc, #268]	; (279c <main+0x20c>)
    268e:	4798      	blx	r3
    2690:	2800      	cmp	r0, #0
    2692:	d142      	bne.n	271a <main+0x18a>
		printf("No chip.\r\n");
	}
	
	at25dfx_chip_read_buffer(&at25dfx_chip, 0x0000, read_buffer, AT25DFX_BUFFER_SIZE);
    2694:	4f42      	ldr	r7, [pc, #264]	; (27a0 <main+0x210>)
    2696:	4c33      	ldr	r4, [pc, #204]	; (2764 <main+0x1d4>)
    2698:	230a      	movs	r3, #10
    269a:	003a      	movs	r2, r7
    269c:	2100      	movs	r1, #0
    269e:	0020      	movs	r0, r4
    26a0:	4e40      	ldr	r6, [pc, #256]	; (27a4 <main+0x214>)
    26a2:	47b0      	blx	r6
	at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);
    26a4:	2580      	movs	r5, #128	; 0x80
    26a6:	026d      	lsls	r5, r5, #9
    26a8:	2200      	movs	r2, #0
    26aa:	0029      	movs	r1, r5
    26ac:	0020      	movs	r0, r4
    26ae:	4b3e      	ldr	r3, [pc, #248]	; (27a8 <main+0x218>)
    26b0:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);
    26b2:	2200      	movs	r2, #0
    26b4:	0029      	movs	r1, r5
    26b6:	0020      	movs	r0, r4
    26b8:	4b3c      	ldr	r3, [pc, #240]	; (27ac <main+0x21c>)
    26ba:	4798      	blx	r3
	//at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, write_buffer, AT25DFX_BUFFER_SIZE);
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
    26bc:	2101      	movs	r1, #1
    26be:	0020      	movs	r0, r4
    26c0:	4b3b      	ldr	r3, [pc, #236]	; (27b0 <main+0x220>)
    26c2:	4798      	blx	r3
	
	if (at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, read_buffer, AT25DFX_BUFFER_SIZE) != STATUS_OK) {
    26c4:	230a      	movs	r3, #10
    26c6:	003a      	movs	r2, r7
    26c8:	0029      	movs	r1, r5
    26ca:	0020      	movs	r0, r4
    26cc:	47b0      	blx	r6
    26ce:	2800      	cmp	r0, #0
    26d0:	d127      	bne.n	2722 <main+0x192>
		return NULL;
    26d2:	2400      	movs	r4, #0
		printf("Read error\r\n");
	}
	
	for (int i = 0; i < AT25DFX_BUFFER_SIZE; i++) {
		printf("%d", read_buffer[i]);
    26d4:	4f32      	ldr	r7, [pc, #200]	; (27a0 <main+0x210>)
    26d6:	4e37      	ldr	r6, [pc, #220]	; (27b4 <main+0x224>)
    26d8:	4d37      	ldr	r5, [pc, #220]	; (27b8 <main+0x228>)
    26da:	5de1      	ldrb	r1, [r4, r7]
    26dc:	0030      	movs	r0, r6
    26de:	47a8      	blx	r5
	for (int i = 0; i < AT25DFX_BUFFER_SIZE; i++) {
    26e0:	3401      	adds	r4, #1
    26e2:	2c0a      	cmp	r4, #10
    26e4:	d1f9      	bne.n	26da <main+0x14a>
	}
	
	printf("\r\n");
    26e6:	4835      	ldr	r0, [pc, #212]	; (27bc <main+0x22c>)
    26e8:	4b27      	ldr	r3, [pc, #156]	; (2788 <main+0x1f8>)
    26ea:	4798      	blx	r3
	
	crc32_recalculate(read_buffer, sizeof(read_buffer), &crc2);
    26ec:	4c34      	ldr	r4, [pc, #208]	; (27c0 <main+0x230>)
    26ee:	0022      	movs	r2, r4
    26f0:	210a      	movs	r1, #10
    26f2:	482b      	ldr	r0, [pc, #172]	; (27a0 <main+0x210>)
    26f4:	4b27      	ldr	r3, [pc, #156]	; (2794 <main+0x204>)
    26f6:	4798      	blx	r3
	
	if (crc2 != crc1) {
    26f8:	6822      	ldr	r2, [r4, #0]
    26fa:	4b24      	ldr	r3, [pc, #144]	; (278c <main+0x1fc>)
    26fc:	681b      	ldr	r3, [r3, #0]
    26fe:	429a      	cmp	r2, r3
    2700:	d013      	beq.n	272a <main+0x19a>
		printf("Checksum error!\r\n");
    2702:	4830      	ldr	r0, [pc, #192]	; (27c4 <main+0x234>)
    2704:	4b20      	ldr	r3, [pc, #128]	; (2788 <main+0x1f8>)
    2706:	4798      	blx	r3

	} else {
		printf("Checksum matched!\r\n");
	}
	
	printf("sleep\r\n");
    2708:	482f      	ldr	r0, [pc, #188]	; (27c8 <main+0x238>)
    270a:	4b1f      	ldr	r3, [pc, #124]	; (2788 <main+0x1f8>)
    270c:	4798      	blx	r3
		
	at25dfx_chip_sleep(&at25dfx_chip);
    270e:	4815      	ldr	r0, [pc, #84]	; (2764 <main+0x1d4>)
    2710:	4b2e      	ldr	r3, [pc, #184]	; (27cc <main+0x23c>)
    2712:	4798      	blx	r3
}
    2714:	2000      	movs	r0, #0
    2716:	b011      	add	sp, #68	; 0x44
    2718:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("No chip.\r\n");
    271a:	482d      	ldr	r0, [pc, #180]	; (27d0 <main+0x240>)
    271c:	4b1a      	ldr	r3, [pc, #104]	; (2788 <main+0x1f8>)
    271e:	4798      	blx	r3
    2720:	e7b8      	b.n	2694 <main+0x104>
		printf("Read error\r\n");
    2722:	482c      	ldr	r0, [pc, #176]	; (27d4 <main+0x244>)
    2724:	4b18      	ldr	r3, [pc, #96]	; (2788 <main+0x1f8>)
    2726:	4798      	blx	r3
    2728:	e7d3      	b.n	26d2 <main+0x142>
		printf("Checksum matched!\r\n");
    272a:	482b      	ldr	r0, [pc, #172]	; (27d8 <main+0x248>)
    272c:	4b16      	ldr	r3, [pc, #88]	; (2788 <main+0x1f8>)
    272e:	4798      	blx	r3
    2730:	e7ea      	b.n	2708 <main+0x178>
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	00002229 	.word	0x00002229
    2738:	20000000 	.word	0x20000000
    273c:	00002991 	.word	0x00002991
    2740:	000f4240 	.word	0x000f4240
    2744:	00100002 	.word	0x00100002
    2748:	00120002 	.word	0x00120002
    274c:	00130002 	.word	0x00130002
    2750:	200001a8 	.word	0x200001a8
    2754:	42000c00 	.word	0x42000c00
    2758:	00000fe1 	.word	0x00000fe1
    275c:	00000f51 	.word	0x00000f51
    2760:	e000e100 	.word	0xe000e100
    2764:	200001a0 	.word	0x200001a0
    2768:	00000b79 	.word	0x00000b79
    276c:	41004400 	.word	0x41004400
    2770:	00002561 	.word	0x00002561
    2774:	0000246d 	.word	0x0000246d
    2778:	20000198 	.word	0x20000198
    277c:	41004000 	.word	0x41004000
    2780:	00000af1 	.word	0x00000af1
    2784:	00003b58 	.word	0x00003b58
    2788:	00002a95 	.word	0x00002a95
    278c:	20000194 	.word	0x20000194
    2790:	20000004 	.word	0x20000004
    2794:	00000871 	.word	0x00000871
    2798:	000007e5 	.word	0x000007e5
    279c:	00000119 	.word	0x00000119
    27a0:	200000d8 	.word	0x200000d8
    27a4:	00000225 	.word	0x00000225
    27a8:	00000625 	.word	0x00000625
    27ac:	0000031d 	.word	0x0000031d
    27b0:	00000535 	.word	0x00000535
    27b4:	00003b78 	.word	0x00003b78
    27b8:	000029a1 	.word	0x000029a1
    27bc:	00003b68 	.word	0x00003b68
    27c0:	200001e4 	.word	0x200001e4
    27c4:	00003b7c 	.word	0x00003b7c
    27c8:	00003ba4 	.word	0x00003ba4
    27cc:	00000759 	.word	0x00000759
    27d0:	00003b60 	.word	0x00003b60
    27d4:	00003b6c 	.word	0x00003b6c
    27d8:	00003b90 	.word	0x00003b90

000027dc <__udivsi3>:
    27dc:	2200      	movs	r2, #0
    27de:	0843      	lsrs	r3, r0, #1
    27e0:	428b      	cmp	r3, r1
    27e2:	d374      	bcc.n	28ce <__udivsi3+0xf2>
    27e4:	0903      	lsrs	r3, r0, #4
    27e6:	428b      	cmp	r3, r1
    27e8:	d35f      	bcc.n	28aa <__udivsi3+0xce>
    27ea:	0a03      	lsrs	r3, r0, #8
    27ec:	428b      	cmp	r3, r1
    27ee:	d344      	bcc.n	287a <__udivsi3+0x9e>
    27f0:	0b03      	lsrs	r3, r0, #12
    27f2:	428b      	cmp	r3, r1
    27f4:	d328      	bcc.n	2848 <__udivsi3+0x6c>
    27f6:	0c03      	lsrs	r3, r0, #16
    27f8:	428b      	cmp	r3, r1
    27fa:	d30d      	bcc.n	2818 <__udivsi3+0x3c>
    27fc:	22ff      	movs	r2, #255	; 0xff
    27fe:	0209      	lsls	r1, r1, #8
    2800:	ba12      	rev	r2, r2
    2802:	0c03      	lsrs	r3, r0, #16
    2804:	428b      	cmp	r3, r1
    2806:	d302      	bcc.n	280e <__udivsi3+0x32>
    2808:	1212      	asrs	r2, r2, #8
    280a:	0209      	lsls	r1, r1, #8
    280c:	d065      	beq.n	28da <__udivsi3+0xfe>
    280e:	0b03      	lsrs	r3, r0, #12
    2810:	428b      	cmp	r3, r1
    2812:	d319      	bcc.n	2848 <__udivsi3+0x6c>
    2814:	e000      	b.n	2818 <__udivsi3+0x3c>
    2816:	0a09      	lsrs	r1, r1, #8
    2818:	0bc3      	lsrs	r3, r0, #15
    281a:	428b      	cmp	r3, r1
    281c:	d301      	bcc.n	2822 <__udivsi3+0x46>
    281e:	03cb      	lsls	r3, r1, #15
    2820:	1ac0      	subs	r0, r0, r3
    2822:	4152      	adcs	r2, r2
    2824:	0b83      	lsrs	r3, r0, #14
    2826:	428b      	cmp	r3, r1
    2828:	d301      	bcc.n	282e <__udivsi3+0x52>
    282a:	038b      	lsls	r3, r1, #14
    282c:	1ac0      	subs	r0, r0, r3
    282e:	4152      	adcs	r2, r2
    2830:	0b43      	lsrs	r3, r0, #13
    2832:	428b      	cmp	r3, r1
    2834:	d301      	bcc.n	283a <__udivsi3+0x5e>
    2836:	034b      	lsls	r3, r1, #13
    2838:	1ac0      	subs	r0, r0, r3
    283a:	4152      	adcs	r2, r2
    283c:	0b03      	lsrs	r3, r0, #12
    283e:	428b      	cmp	r3, r1
    2840:	d301      	bcc.n	2846 <__udivsi3+0x6a>
    2842:	030b      	lsls	r3, r1, #12
    2844:	1ac0      	subs	r0, r0, r3
    2846:	4152      	adcs	r2, r2
    2848:	0ac3      	lsrs	r3, r0, #11
    284a:	428b      	cmp	r3, r1
    284c:	d301      	bcc.n	2852 <__udivsi3+0x76>
    284e:	02cb      	lsls	r3, r1, #11
    2850:	1ac0      	subs	r0, r0, r3
    2852:	4152      	adcs	r2, r2
    2854:	0a83      	lsrs	r3, r0, #10
    2856:	428b      	cmp	r3, r1
    2858:	d301      	bcc.n	285e <__udivsi3+0x82>
    285a:	028b      	lsls	r3, r1, #10
    285c:	1ac0      	subs	r0, r0, r3
    285e:	4152      	adcs	r2, r2
    2860:	0a43      	lsrs	r3, r0, #9
    2862:	428b      	cmp	r3, r1
    2864:	d301      	bcc.n	286a <__udivsi3+0x8e>
    2866:	024b      	lsls	r3, r1, #9
    2868:	1ac0      	subs	r0, r0, r3
    286a:	4152      	adcs	r2, r2
    286c:	0a03      	lsrs	r3, r0, #8
    286e:	428b      	cmp	r3, r1
    2870:	d301      	bcc.n	2876 <__udivsi3+0x9a>
    2872:	020b      	lsls	r3, r1, #8
    2874:	1ac0      	subs	r0, r0, r3
    2876:	4152      	adcs	r2, r2
    2878:	d2cd      	bcs.n	2816 <__udivsi3+0x3a>
    287a:	09c3      	lsrs	r3, r0, #7
    287c:	428b      	cmp	r3, r1
    287e:	d301      	bcc.n	2884 <__udivsi3+0xa8>
    2880:	01cb      	lsls	r3, r1, #7
    2882:	1ac0      	subs	r0, r0, r3
    2884:	4152      	adcs	r2, r2
    2886:	0983      	lsrs	r3, r0, #6
    2888:	428b      	cmp	r3, r1
    288a:	d301      	bcc.n	2890 <__udivsi3+0xb4>
    288c:	018b      	lsls	r3, r1, #6
    288e:	1ac0      	subs	r0, r0, r3
    2890:	4152      	adcs	r2, r2
    2892:	0943      	lsrs	r3, r0, #5
    2894:	428b      	cmp	r3, r1
    2896:	d301      	bcc.n	289c <__udivsi3+0xc0>
    2898:	014b      	lsls	r3, r1, #5
    289a:	1ac0      	subs	r0, r0, r3
    289c:	4152      	adcs	r2, r2
    289e:	0903      	lsrs	r3, r0, #4
    28a0:	428b      	cmp	r3, r1
    28a2:	d301      	bcc.n	28a8 <__udivsi3+0xcc>
    28a4:	010b      	lsls	r3, r1, #4
    28a6:	1ac0      	subs	r0, r0, r3
    28a8:	4152      	adcs	r2, r2
    28aa:	08c3      	lsrs	r3, r0, #3
    28ac:	428b      	cmp	r3, r1
    28ae:	d301      	bcc.n	28b4 <__udivsi3+0xd8>
    28b0:	00cb      	lsls	r3, r1, #3
    28b2:	1ac0      	subs	r0, r0, r3
    28b4:	4152      	adcs	r2, r2
    28b6:	0883      	lsrs	r3, r0, #2
    28b8:	428b      	cmp	r3, r1
    28ba:	d301      	bcc.n	28c0 <__udivsi3+0xe4>
    28bc:	008b      	lsls	r3, r1, #2
    28be:	1ac0      	subs	r0, r0, r3
    28c0:	4152      	adcs	r2, r2
    28c2:	0843      	lsrs	r3, r0, #1
    28c4:	428b      	cmp	r3, r1
    28c6:	d301      	bcc.n	28cc <__udivsi3+0xf0>
    28c8:	004b      	lsls	r3, r1, #1
    28ca:	1ac0      	subs	r0, r0, r3
    28cc:	4152      	adcs	r2, r2
    28ce:	1a41      	subs	r1, r0, r1
    28d0:	d200      	bcs.n	28d4 <__udivsi3+0xf8>
    28d2:	4601      	mov	r1, r0
    28d4:	4152      	adcs	r2, r2
    28d6:	4610      	mov	r0, r2
    28d8:	4770      	bx	lr
    28da:	e7ff      	b.n	28dc <__udivsi3+0x100>
    28dc:	b501      	push	{r0, lr}
    28de:	2000      	movs	r0, #0
    28e0:	f000 f806 	bl	28f0 <__aeabi_idiv0>
    28e4:	bd02      	pop	{r1, pc}
    28e6:	46c0      	nop			; (mov r8, r8)

000028e8 <__aeabi_uidivmod>:
    28e8:	2900      	cmp	r1, #0
    28ea:	d0f7      	beq.n	28dc <__udivsi3+0x100>
    28ec:	e776      	b.n	27dc <__udivsi3>
    28ee:	4770      	bx	lr

000028f0 <__aeabi_idiv0>:
    28f0:	4770      	bx	lr
    28f2:	46c0      	nop			; (mov r8, r8)

000028f4 <__aeabi_lmul>:
    28f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f6:	46ce      	mov	lr, r9
    28f8:	4647      	mov	r7, r8
    28fa:	0415      	lsls	r5, r2, #16
    28fc:	0c2d      	lsrs	r5, r5, #16
    28fe:	002e      	movs	r6, r5
    2900:	b580      	push	{r7, lr}
    2902:	0407      	lsls	r7, r0, #16
    2904:	0c14      	lsrs	r4, r2, #16
    2906:	0c3f      	lsrs	r7, r7, #16
    2908:	4699      	mov	r9, r3
    290a:	0c03      	lsrs	r3, r0, #16
    290c:	437e      	muls	r6, r7
    290e:	435d      	muls	r5, r3
    2910:	4367      	muls	r7, r4
    2912:	4363      	muls	r3, r4
    2914:	197f      	adds	r7, r7, r5
    2916:	0c34      	lsrs	r4, r6, #16
    2918:	19e4      	adds	r4, r4, r7
    291a:	469c      	mov	ip, r3
    291c:	42a5      	cmp	r5, r4
    291e:	d903      	bls.n	2928 <__aeabi_lmul+0x34>
    2920:	2380      	movs	r3, #128	; 0x80
    2922:	025b      	lsls	r3, r3, #9
    2924:	4698      	mov	r8, r3
    2926:	44c4      	add	ip, r8
    2928:	464b      	mov	r3, r9
    292a:	4351      	muls	r1, r2
    292c:	4343      	muls	r3, r0
    292e:	0436      	lsls	r6, r6, #16
    2930:	0c36      	lsrs	r6, r6, #16
    2932:	0c25      	lsrs	r5, r4, #16
    2934:	0424      	lsls	r4, r4, #16
    2936:	4465      	add	r5, ip
    2938:	19a4      	adds	r4, r4, r6
    293a:	1859      	adds	r1, r3, r1
    293c:	1949      	adds	r1, r1, r5
    293e:	0020      	movs	r0, r4
    2940:	bc0c      	pop	{r2, r3}
    2942:	4690      	mov	r8, r2
    2944:	4699      	mov	r9, r3
    2946:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002948 <__libc_init_array>:
    2948:	b570      	push	{r4, r5, r6, lr}
    294a:	2600      	movs	r6, #0
    294c:	4d0c      	ldr	r5, [pc, #48]	; (2980 <__libc_init_array+0x38>)
    294e:	4c0d      	ldr	r4, [pc, #52]	; (2984 <__libc_init_array+0x3c>)
    2950:	1b64      	subs	r4, r4, r5
    2952:	10a4      	asrs	r4, r4, #2
    2954:	42a6      	cmp	r6, r4
    2956:	d109      	bne.n	296c <__libc_init_array+0x24>
    2958:	2600      	movs	r6, #0
    295a:	f001 f973 	bl	3c44 <_init>
    295e:	4d0a      	ldr	r5, [pc, #40]	; (2988 <__libc_init_array+0x40>)
    2960:	4c0a      	ldr	r4, [pc, #40]	; (298c <__libc_init_array+0x44>)
    2962:	1b64      	subs	r4, r4, r5
    2964:	10a4      	asrs	r4, r4, #2
    2966:	42a6      	cmp	r6, r4
    2968:	d105      	bne.n	2976 <__libc_init_array+0x2e>
    296a:	bd70      	pop	{r4, r5, r6, pc}
    296c:	00b3      	lsls	r3, r6, #2
    296e:	58eb      	ldr	r3, [r5, r3]
    2970:	4798      	blx	r3
    2972:	3601      	adds	r6, #1
    2974:	e7ee      	b.n	2954 <__libc_init_array+0xc>
    2976:	00b3      	lsls	r3, r6, #2
    2978:	58eb      	ldr	r3, [r5, r3]
    297a:	4798      	blx	r3
    297c:	3601      	adds	r6, #1
    297e:	e7f2      	b.n	2966 <__libc_init_array+0x1e>
    2980:	00003c50 	.word	0x00003c50
    2984:	00003c50 	.word	0x00003c50
    2988:	00003c50 	.word	0x00003c50
    298c:	00003c54 	.word	0x00003c54

00002990 <memset>:
    2990:	0003      	movs	r3, r0
    2992:	1882      	adds	r2, r0, r2
    2994:	4293      	cmp	r3, r2
    2996:	d100      	bne.n	299a <memset+0xa>
    2998:	4770      	bx	lr
    299a:	7019      	strb	r1, [r3, #0]
    299c:	3301      	adds	r3, #1
    299e:	e7f9      	b.n	2994 <memset+0x4>

000029a0 <iprintf>:
    29a0:	b40f      	push	{r0, r1, r2, r3}
    29a2:	4b0b      	ldr	r3, [pc, #44]	; (29d0 <iprintf+0x30>)
    29a4:	b513      	push	{r0, r1, r4, lr}
    29a6:	681c      	ldr	r4, [r3, #0]
    29a8:	2c00      	cmp	r4, #0
    29aa:	d005      	beq.n	29b8 <iprintf+0x18>
    29ac:	69a3      	ldr	r3, [r4, #24]
    29ae:	2b00      	cmp	r3, #0
    29b0:	d102      	bne.n	29b8 <iprintf+0x18>
    29b2:	0020      	movs	r0, r4
    29b4:	f000 faf2 	bl	2f9c <__sinit>
    29b8:	ab05      	add	r3, sp, #20
    29ba:	9a04      	ldr	r2, [sp, #16]
    29bc:	68a1      	ldr	r1, [r4, #8]
    29be:	0020      	movs	r0, r4
    29c0:	9301      	str	r3, [sp, #4]
    29c2:	f000 fcc7 	bl	3354 <_vfiprintf_r>
    29c6:	bc16      	pop	{r1, r2, r4}
    29c8:	bc08      	pop	{r3}
    29ca:	b004      	add	sp, #16
    29cc:	4718      	bx	r3
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	20000010 	.word	0x20000010

000029d4 <_puts_r>:
    29d4:	b570      	push	{r4, r5, r6, lr}
    29d6:	0005      	movs	r5, r0
    29d8:	000e      	movs	r6, r1
    29da:	2800      	cmp	r0, #0
    29dc:	d004      	beq.n	29e8 <_puts_r+0x14>
    29de:	6983      	ldr	r3, [r0, #24]
    29e0:	2b00      	cmp	r3, #0
    29e2:	d101      	bne.n	29e8 <_puts_r+0x14>
    29e4:	f000 fada 	bl	2f9c <__sinit>
    29e8:	69ab      	ldr	r3, [r5, #24]
    29ea:	68ac      	ldr	r4, [r5, #8]
    29ec:	2b00      	cmp	r3, #0
    29ee:	d102      	bne.n	29f6 <_puts_r+0x22>
    29f0:	0028      	movs	r0, r5
    29f2:	f000 fad3 	bl	2f9c <__sinit>
    29f6:	4b24      	ldr	r3, [pc, #144]	; (2a88 <_puts_r+0xb4>)
    29f8:	429c      	cmp	r4, r3
    29fa:	d10f      	bne.n	2a1c <_puts_r+0x48>
    29fc:	686c      	ldr	r4, [r5, #4]
    29fe:	89a3      	ldrh	r3, [r4, #12]
    2a00:	071b      	lsls	r3, r3, #28
    2a02:	d502      	bpl.n	2a0a <_puts_r+0x36>
    2a04:	6923      	ldr	r3, [r4, #16]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d120      	bne.n	2a4c <_puts_r+0x78>
    2a0a:	0021      	movs	r1, r4
    2a0c:	0028      	movs	r0, r5
    2a0e:	f000 f957 	bl	2cc0 <__swsetup_r>
    2a12:	2800      	cmp	r0, #0
    2a14:	d01a      	beq.n	2a4c <_puts_r+0x78>
    2a16:	2001      	movs	r0, #1
    2a18:	4240      	negs	r0, r0
    2a1a:	bd70      	pop	{r4, r5, r6, pc}
    2a1c:	4b1b      	ldr	r3, [pc, #108]	; (2a8c <_puts_r+0xb8>)
    2a1e:	429c      	cmp	r4, r3
    2a20:	d101      	bne.n	2a26 <_puts_r+0x52>
    2a22:	68ac      	ldr	r4, [r5, #8]
    2a24:	e7eb      	b.n	29fe <_puts_r+0x2a>
    2a26:	4b1a      	ldr	r3, [pc, #104]	; (2a90 <_puts_r+0xbc>)
    2a28:	429c      	cmp	r4, r3
    2a2a:	d1e8      	bne.n	29fe <_puts_r+0x2a>
    2a2c:	68ec      	ldr	r4, [r5, #12]
    2a2e:	e7e6      	b.n	29fe <_puts_r+0x2a>
    2a30:	3b01      	subs	r3, #1
    2a32:	3601      	adds	r6, #1
    2a34:	60a3      	str	r3, [r4, #8]
    2a36:	2b00      	cmp	r3, #0
    2a38:	da04      	bge.n	2a44 <_puts_r+0x70>
    2a3a:	69a2      	ldr	r2, [r4, #24]
    2a3c:	4293      	cmp	r3, r2
    2a3e:	db16      	blt.n	2a6e <_puts_r+0x9a>
    2a40:	290a      	cmp	r1, #10
    2a42:	d014      	beq.n	2a6e <_puts_r+0x9a>
    2a44:	6823      	ldr	r3, [r4, #0]
    2a46:	1c5a      	adds	r2, r3, #1
    2a48:	6022      	str	r2, [r4, #0]
    2a4a:	7019      	strb	r1, [r3, #0]
    2a4c:	7831      	ldrb	r1, [r6, #0]
    2a4e:	68a3      	ldr	r3, [r4, #8]
    2a50:	2900      	cmp	r1, #0
    2a52:	d1ed      	bne.n	2a30 <_puts_r+0x5c>
    2a54:	3b01      	subs	r3, #1
    2a56:	60a3      	str	r3, [r4, #8]
    2a58:	2b00      	cmp	r3, #0
    2a5a:	da0f      	bge.n	2a7c <_puts_r+0xa8>
    2a5c:	0022      	movs	r2, r4
    2a5e:	310a      	adds	r1, #10
    2a60:	0028      	movs	r0, r5
    2a62:	f000 f8d7 	bl	2c14 <__swbuf_r>
    2a66:	1c43      	adds	r3, r0, #1
    2a68:	d0d5      	beq.n	2a16 <_puts_r+0x42>
    2a6a:	200a      	movs	r0, #10
    2a6c:	e7d5      	b.n	2a1a <_puts_r+0x46>
    2a6e:	0022      	movs	r2, r4
    2a70:	0028      	movs	r0, r5
    2a72:	f000 f8cf 	bl	2c14 <__swbuf_r>
    2a76:	1c43      	adds	r3, r0, #1
    2a78:	d1e8      	bne.n	2a4c <_puts_r+0x78>
    2a7a:	e7cc      	b.n	2a16 <_puts_r+0x42>
    2a7c:	200a      	movs	r0, #10
    2a7e:	6823      	ldr	r3, [r4, #0]
    2a80:	1c5a      	adds	r2, r3, #1
    2a82:	6022      	str	r2, [r4, #0]
    2a84:	7018      	strb	r0, [r3, #0]
    2a86:	e7c8      	b.n	2a1a <_puts_r+0x46>
    2a88:	00003bd0 	.word	0x00003bd0
    2a8c:	00003bf0 	.word	0x00003bf0
    2a90:	00003bb0 	.word	0x00003bb0

00002a94 <puts>:
    2a94:	b510      	push	{r4, lr}
    2a96:	4b03      	ldr	r3, [pc, #12]	; (2aa4 <puts+0x10>)
    2a98:	0001      	movs	r1, r0
    2a9a:	6818      	ldr	r0, [r3, #0]
    2a9c:	f7ff ff9a 	bl	29d4 <_puts_r>
    2aa0:	bd10      	pop	{r4, pc}
    2aa2:	46c0      	nop			; (mov r8, r8)
    2aa4:	20000010 	.word	0x20000010

00002aa8 <setbuf>:
    2aa8:	424a      	negs	r2, r1
    2aaa:	414a      	adcs	r2, r1
    2aac:	2380      	movs	r3, #128	; 0x80
    2aae:	b510      	push	{r4, lr}
    2ab0:	0052      	lsls	r2, r2, #1
    2ab2:	00db      	lsls	r3, r3, #3
    2ab4:	f000 f802 	bl	2abc <setvbuf>
    2ab8:	bd10      	pop	{r4, pc}
	...

00002abc <setvbuf>:
    2abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2abe:	001d      	movs	r5, r3
    2ac0:	4b4f      	ldr	r3, [pc, #316]	; (2c00 <setvbuf+0x144>)
    2ac2:	b085      	sub	sp, #20
    2ac4:	681e      	ldr	r6, [r3, #0]
    2ac6:	0004      	movs	r4, r0
    2ac8:	000f      	movs	r7, r1
    2aca:	9200      	str	r2, [sp, #0]
    2acc:	2e00      	cmp	r6, #0
    2ace:	d005      	beq.n	2adc <setvbuf+0x20>
    2ad0:	69b3      	ldr	r3, [r6, #24]
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	d102      	bne.n	2adc <setvbuf+0x20>
    2ad6:	0030      	movs	r0, r6
    2ad8:	f000 fa60 	bl	2f9c <__sinit>
    2adc:	4b49      	ldr	r3, [pc, #292]	; (2c04 <setvbuf+0x148>)
    2ade:	429c      	cmp	r4, r3
    2ae0:	d150      	bne.n	2b84 <setvbuf+0xc8>
    2ae2:	6874      	ldr	r4, [r6, #4]
    2ae4:	9b00      	ldr	r3, [sp, #0]
    2ae6:	2b02      	cmp	r3, #2
    2ae8:	d005      	beq.n	2af6 <setvbuf+0x3a>
    2aea:	2b01      	cmp	r3, #1
    2aec:	d900      	bls.n	2af0 <setvbuf+0x34>
    2aee:	e084      	b.n	2bfa <setvbuf+0x13e>
    2af0:	2d00      	cmp	r5, #0
    2af2:	da00      	bge.n	2af6 <setvbuf+0x3a>
    2af4:	e081      	b.n	2bfa <setvbuf+0x13e>
    2af6:	0021      	movs	r1, r4
    2af8:	0030      	movs	r0, r6
    2afa:	f000 f9e1 	bl	2ec0 <_fflush_r>
    2afe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2b00:	2900      	cmp	r1, #0
    2b02:	d008      	beq.n	2b16 <setvbuf+0x5a>
    2b04:	0023      	movs	r3, r4
    2b06:	3344      	adds	r3, #68	; 0x44
    2b08:	4299      	cmp	r1, r3
    2b0a:	d002      	beq.n	2b12 <setvbuf+0x56>
    2b0c:	0030      	movs	r0, r6
    2b0e:	f000 fb51 	bl	31b4 <_free_r>
    2b12:	2300      	movs	r3, #0
    2b14:	6363      	str	r3, [r4, #52]	; 0x34
    2b16:	2300      	movs	r3, #0
    2b18:	61a3      	str	r3, [r4, #24]
    2b1a:	6063      	str	r3, [r4, #4]
    2b1c:	89a3      	ldrh	r3, [r4, #12]
    2b1e:	061b      	lsls	r3, r3, #24
    2b20:	d503      	bpl.n	2b2a <setvbuf+0x6e>
    2b22:	6921      	ldr	r1, [r4, #16]
    2b24:	0030      	movs	r0, r6
    2b26:	f000 fb45 	bl	31b4 <_free_r>
    2b2a:	89a3      	ldrh	r3, [r4, #12]
    2b2c:	4a36      	ldr	r2, [pc, #216]	; (2c08 <setvbuf+0x14c>)
    2b2e:	4013      	ands	r3, r2
    2b30:	81a3      	strh	r3, [r4, #12]
    2b32:	9b00      	ldr	r3, [sp, #0]
    2b34:	2b02      	cmp	r3, #2
    2b36:	d05a      	beq.n	2bee <setvbuf+0x132>
    2b38:	ab03      	add	r3, sp, #12
    2b3a:	aa02      	add	r2, sp, #8
    2b3c:	0021      	movs	r1, r4
    2b3e:	0030      	movs	r0, r6
    2b40:	f000 fac2 	bl	30c8 <__swhatbuf_r>
    2b44:	89a3      	ldrh	r3, [r4, #12]
    2b46:	4318      	orrs	r0, r3
    2b48:	81a0      	strh	r0, [r4, #12]
    2b4a:	2d00      	cmp	r5, #0
    2b4c:	d124      	bne.n	2b98 <setvbuf+0xdc>
    2b4e:	9d02      	ldr	r5, [sp, #8]
    2b50:	0028      	movs	r0, r5
    2b52:	f000 fb25 	bl	31a0 <malloc>
    2b56:	9501      	str	r5, [sp, #4]
    2b58:	1e07      	subs	r7, r0, #0
    2b5a:	d142      	bne.n	2be2 <setvbuf+0x126>
    2b5c:	9b02      	ldr	r3, [sp, #8]
    2b5e:	9301      	str	r3, [sp, #4]
    2b60:	42ab      	cmp	r3, r5
    2b62:	d139      	bne.n	2bd8 <setvbuf+0x11c>
    2b64:	2001      	movs	r0, #1
    2b66:	4240      	negs	r0, r0
    2b68:	2302      	movs	r3, #2
    2b6a:	89a2      	ldrh	r2, [r4, #12]
    2b6c:	4313      	orrs	r3, r2
    2b6e:	81a3      	strh	r3, [r4, #12]
    2b70:	2300      	movs	r3, #0
    2b72:	60a3      	str	r3, [r4, #8]
    2b74:	0023      	movs	r3, r4
    2b76:	3347      	adds	r3, #71	; 0x47
    2b78:	6023      	str	r3, [r4, #0]
    2b7a:	6123      	str	r3, [r4, #16]
    2b7c:	2301      	movs	r3, #1
    2b7e:	6163      	str	r3, [r4, #20]
    2b80:	b005      	add	sp, #20
    2b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b84:	4b21      	ldr	r3, [pc, #132]	; (2c0c <setvbuf+0x150>)
    2b86:	429c      	cmp	r4, r3
    2b88:	d101      	bne.n	2b8e <setvbuf+0xd2>
    2b8a:	68b4      	ldr	r4, [r6, #8]
    2b8c:	e7aa      	b.n	2ae4 <setvbuf+0x28>
    2b8e:	4b20      	ldr	r3, [pc, #128]	; (2c10 <setvbuf+0x154>)
    2b90:	429c      	cmp	r4, r3
    2b92:	d1a7      	bne.n	2ae4 <setvbuf+0x28>
    2b94:	68f4      	ldr	r4, [r6, #12]
    2b96:	e7a5      	b.n	2ae4 <setvbuf+0x28>
    2b98:	2f00      	cmp	r7, #0
    2b9a:	d0d9      	beq.n	2b50 <setvbuf+0x94>
    2b9c:	69b3      	ldr	r3, [r6, #24]
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d102      	bne.n	2ba8 <setvbuf+0xec>
    2ba2:	0030      	movs	r0, r6
    2ba4:	f000 f9fa 	bl	2f9c <__sinit>
    2ba8:	9b00      	ldr	r3, [sp, #0]
    2baa:	2b01      	cmp	r3, #1
    2bac:	d103      	bne.n	2bb6 <setvbuf+0xfa>
    2bae:	89a3      	ldrh	r3, [r4, #12]
    2bb0:	9a00      	ldr	r2, [sp, #0]
    2bb2:	431a      	orrs	r2, r3
    2bb4:	81a2      	strh	r2, [r4, #12]
    2bb6:	2008      	movs	r0, #8
    2bb8:	89a3      	ldrh	r3, [r4, #12]
    2bba:	6027      	str	r7, [r4, #0]
    2bbc:	6127      	str	r7, [r4, #16]
    2bbe:	6165      	str	r5, [r4, #20]
    2bc0:	4018      	ands	r0, r3
    2bc2:	d018      	beq.n	2bf6 <setvbuf+0x13a>
    2bc4:	2001      	movs	r0, #1
    2bc6:	4018      	ands	r0, r3
    2bc8:	2300      	movs	r3, #0
    2bca:	4298      	cmp	r0, r3
    2bcc:	d011      	beq.n	2bf2 <setvbuf+0x136>
    2bce:	426d      	negs	r5, r5
    2bd0:	60a3      	str	r3, [r4, #8]
    2bd2:	61a5      	str	r5, [r4, #24]
    2bd4:	0018      	movs	r0, r3
    2bd6:	e7d3      	b.n	2b80 <setvbuf+0xc4>
    2bd8:	9801      	ldr	r0, [sp, #4]
    2bda:	f000 fae1 	bl	31a0 <malloc>
    2bde:	1e07      	subs	r7, r0, #0
    2be0:	d0c0      	beq.n	2b64 <setvbuf+0xa8>
    2be2:	2380      	movs	r3, #128	; 0x80
    2be4:	89a2      	ldrh	r2, [r4, #12]
    2be6:	9d01      	ldr	r5, [sp, #4]
    2be8:	4313      	orrs	r3, r2
    2bea:	81a3      	strh	r3, [r4, #12]
    2bec:	e7d6      	b.n	2b9c <setvbuf+0xe0>
    2bee:	2000      	movs	r0, #0
    2bf0:	e7ba      	b.n	2b68 <setvbuf+0xac>
    2bf2:	60a5      	str	r5, [r4, #8]
    2bf4:	e7c4      	b.n	2b80 <setvbuf+0xc4>
    2bf6:	60a0      	str	r0, [r4, #8]
    2bf8:	e7c2      	b.n	2b80 <setvbuf+0xc4>
    2bfa:	2001      	movs	r0, #1
    2bfc:	4240      	negs	r0, r0
    2bfe:	e7bf      	b.n	2b80 <setvbuf+0xc4>
    2c00:	20000010 	.word	0x20000010
    2c04:	00003bd0 	.word	0x00003bd0
    2c08:	fffff35c 	.word	0xfffff35c
    2c0c:	00003bf0 	.word	0x00003bf0
    2c10:	00003bb0 	.word	0x00003bb0

00002c14 <__swbuf_r>:
    2c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c16:	0005      	movs	r5, r0
    2c18:	000e      	movs	r6, r1
    2c1a:	0014      	movs	r4, r2
    2c1c:	2800      	cmp	r0, #0
    2c1e:	d004      	beq.n	2c2a <__swbuf_r+0x16>
    2c20:	6983      	ldr	r3, [r0, #24]
    2c22:	2b00      	cmp	r3, #0
    2c24:	d101      	bne.n	2c2a <__swbuf_r+0x16>
    2c26:	f000 f9b9 	bl	2f9c <__sinit>
    2c2a:	4b22      	ldr	r3, [pc, #136]	; (2cb4 <__swbuf_r+0xa0>)
    2c2c:	429c      	cmp	r4, r3
    2c2e:	d12d      	bne.n	2c8c <__swbuf_r+0x78>
    2c30:	686c      	ldr	r4, [r5, #4]
    2c32:	69a3      	ldr	r3, [r4, #24]
    2c34:	60a3      	str	r3, [r4, #8]
    2c36:	89a3      	ldrh	r3, [r4, #12]
    2c38:	071b      	lsls	r3, r3, #28
    2c3a:	d531      	bpl.n	2ca0 <__swbuf_r+0x8c>
    2c3c:	6923      	ldr	r3, [r4, #16]
    2c3e:	2b00      	cmp	r3, #0
    2c40:	d02e      	beq.n	2ca0 <__swbuf_r+0x8c>
    2c42:	6823      	ldr	r3, [r4, #0]
    2c44:	6922      	ldr	r2, [r4, #16]
    2c46:	b2f7      	uxtb	r7, r6
    2c48:	1a98      	subs	r0, r3, r2
    2c4a:	6963      	ldr	r3, [r4, #20]
    2c4c:	b2f6      	uxtb	r6, r6
    2c4e:	4298      	cmp	r0, r3
    2c50:	db05      	blt.n	2c5e <__swbuf_r+0x4a>
    2c52:	0021      	movs	r1, r4
    2c54:	0028      	movs	r0, r5
    2c56:	f000 f933 	bl	2ec0 <_fflush_r>
    2c5a:	2800      	cmp	r0, #0
    2c5c:	d126      	bne.n	2cac <__swbuf_r+0x98>
    2c5e:	68a3      	ldr	r3, [r4, #8]
    2c60:	3001      	adds	r0, #1
    2c62:	3b01      	subs	r3, #1
    2c64:	60a3      	str	r3, [r4, #8]
    2c66:	6823      	ldr	r3, [r4, #0]
    2c68:	1c5a      	adds	r2, r3, #1
    2c6a:	6022      	str	r2, [r4, #0]
    2c6c:	701f      	strb	r7, [r3, #0]
    2c6e:	6963      	ldr	r3, [r4, #20]
    2c70:	4298      	cmp	r0, r3
    2c72:	d004      	beq.n	2c7e <__swbuf_r+0x6a>
    2c74:	89a3      	ldrh	r3, [r4, #12]
    2c76:	07db      	lsls	r3, r3, #31
    2c78:	d51a      	bpl.n	2cb0 <__swbuf_r+0x9c>
    2c7a:	2e0a      	cmp	r6, #10
    2c7c:	d118      	bne.n	2cb0 <__swbuf_r+0x9c>
    2c7e:	0021      	movs	r1, r4
    2c80:	0028      	movs	r0, r5
    2c82:	f000 f91d 	bl	2ec0 <_fflush_r>
    2c86:	2800      	cmp	r0, #0
    2c88:	d012      	beq.n	2cb0 <__swbuf_r+0x9c>
    2c8a:	e00f      	b.n	2cac <__swbuf_r+0x98>
    2c8c:	4b0a      	ldr	r3, [pc, #40]	; (2cb8 <__swbuf_r+0xa4>)
    2c8e:	429c      	cmp	r4, r3
    2c90:	d101      	bne.n	2c96 <__swbuf_r+0x82>
    2c92:	68ac      	ldr	r4, [r5, #8]
    2c94:	e7cd      	b.n	2c32 <__swbuf_r+0x1e>
    2c96:	4b09      	ldr	r3, [pc, #36]	; (2cbc <__swbuf_r+0xa8>)
    2c98:	429c      	cmp	r4, r3
    2c9a:	d1ca      	bne.n	2c32 <__swbuf_r+0x1e>
    2c9c:	68ec      	ldr	r4, [r5, #12]
    2c9e:	e7c8      	b.n	2c32 <__swbuf_r+0x1e>
    2ca0:	0021      	movs	r1, r4
    2ca2:	0028      	movs	r0, r5
    2ca4:	f000 f80c 	bl	2cc0 <__swsetup_r>
    2ca8:	2800      	cmp	r0, #0
    2caa:	d0ca      	beq.n	2c42 <__swbuf_r+0x2e>
    2cac:	2601      	movs	r6, #1
    2cae:	4276      	negs	r6, r6
    2cb0:	0030      	movs	r0, r6
    2cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cb4:	00003bd0 	.word	0x00003bd0
    2cb8:	00003bf0 	.word	0x00003bf0
    2cbc:	00003bb0 	.word	0x00003bb0

00002cc0 <__swsetup_r>:
    2cc0:	4b36      	ldr	r3, [pc, #216]	; (2d9c <__swsetup_r+0xdc>)
    2cc2:	b570      	push	{r4, r5, r6, lr}
    2cc4:	681d      	ldr	r5, [r3, #0]
    2cc6:	0006      	movs	r6, r0
    2cc8:	000c      	movs	r4, r1
    2cca:	2d00      	cmp	r5, #0
    2ccc:	d005      	beq.n	2cda <__swsetup_r+0x1a>
    2cce:	69ab      	ldr	r3, [r5, #24]
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	d102      	bne.n	2cda <__swsetup_r+0x1a>
    2cd4:	0028      	movs	r0, r5
    2cd6:	f000 f961 	bl	2f9c <__sinit>
    2cda:	4b31      	ldr	r3, [pc, #196]	; (2da0 <__swsetup_r+0xe0>)
    2cdc:	429c      	cmp	r4, r3
    2cde:	d10f      	bne.n	2d00 <__swsetup_r+0x40>
    2ce0:	686c      	ldr	r4, [r5, #4]
    2ce2:	230c      	movs	r3, #12
    2ce4:	5ee2      	ldrsh	r2, [r4, r3]
    2ce6:	b293      	uxth	r3, r2
    2ce8:	0719      	lsls	r1, r3, #28
    2cea:	d42d      	bmi.n	2d48 <__swsetup_r+0x88>
    2cec:	06d9      	lsls	r1, r3, #27
    2cee:	d411      	bmi.n	2d14 <__swsetup_r+0x54>
    2cf0:	2309      	movs	r3, #9
    2cf2:	2001      	movs	r0, #1
    2cf4:	6033      	str	r3, [r6, #0]
    2cf6:	3337      	adds	r3, #55	; 0x37
    2cf8:	4313      	orrs	r3, r2
    2cfa:	81a3      	strh	r3, [r4, #12]
    2cfc:	4240      	negs	r0, r0
    2cfe:	bd70      	pop	{r4, r5, r6, pc}
    2d00:	4b28      	ldr	r3, [pc, #160]	; (2da4 <__swsetup_r+0xe4>)
    2d02:	429c      	cmp	r4, r3
    2d04:	d101      	bne.n	2d0a <__swsetup_r+0x4a>
    2d06:	68ac      	ldr	r4, [r5, #8]
    2d08:	e7eb      	b.n	2ce2 <__swsetup_r+0x22>
    2d0a:	4b27      	ldr	r3, [pc, #156]	; (2da8 <__swsetup_r+0xe8>)
    2d0c:	429c      	cmp	r4, r3
    2d0e:	d1e8      	bne.n	2ce2 <__swsetup_r+0x22>
    2d10:	68ec      	ldr	r4, [r5, #12]
    2d12:	e7e6      	b.n	2ce2 <__swsetup_r+0x22>
    2d14:	075b      	lsls	r3, r3, #29
    2d16:	d513      	bpl.n	2d40 <__swsetup_r+0x80>
    2d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2d1a:	2900      	cmp	r1, #0
    2d1c:	d008      	beq.n	2d30 <__swsetup_r+0x70>
    2d1e:	0023      	movs	r3, r4
    2d20:	3344      	adds	r3, #68	; 0x44
    2d22:	4299      	cmp	r1, r3
    2d24:	d002      	beq.n	2d2c <__swsetup_r+0x6c>
    2d26:	0030      	movs	r0, r6
    2d28:	f000 fa44 	bl	31b4 <_free_r>
    2d2c:	2300      	movs	r3, #0
    2d2e:	6363      	str	r3, [r4, #52]	; 0x34
    2d30:	2224      	movs	r2, #36	; 0x24
    2d32:	89a3      	ldrh	r3, [r4, #12]
    2d34:	4393      	bics	r3, r2
    2d36:	81a3      	strh	r3, [r4, #12]
    2d38:	2300      	movs	r3, #0
    2d3a:	6063      	str	r3, [r4, #4]
    2d3c:	6923      	ldr	r3, [r4, #16]
    2d3e:	6023      	str	r3, [r4, #0]
    2d40:	2308      	movs	r3, #8
    2d42:	89a2      	ldrh	r2, [r4, #12]
    2d44:	4313      	orrs	r3, r2
    2d46:	81a3      	strh	r3, [r4, #12]
    2d48:	6923      	ldr	r3, [r4, #16]
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d10b      	bne.n	2d66 <__swsetup_r+0xa6>
    2d4e:	21a0      	movs	r1, #160	; 0xa0
    2d50:	2280      	movs	r2, #128	; 0x80
    2d52:	89a3      	ldrh	r3, [r4, #12]
    2d54:	0089      	lsls	r1, r1, #2
    2d56:	0092      	lsls	r2, r2, #2
    2d58:	400b      	ands	r3, r1
    2d5a:	4293      	cmp	r3, r2
    2d5c:	d003      	beq.n	2d66 <__swsetup_r+0xa6>
    2d5e:	0021      	movs	r1, r4
    2d60:	0030      	movs	r0, r6
    2d62:	f000 f9d9 	bl	3118 <__smakebuf_r>
    2d66:	2301      	movs	r3, #1
    2d68:	89a2      	ldrh	r2, [r4, #12]
    2d6a:	4013      	ands	r3, r2
    2d6c:	d011      	beq.n	2d92 <__swsetup_r+0xd2>
    2d6e:	2300      	movs	r3, #0
    2d70:	60a3      	str	r3, [r4, #8]
    2d72:	6963      	ldr	r3, [r4, #20]
    2d74:	425b      	negs	r3, r3
    2d76:	61a3      	str	r3, [r4, #24]
    2d78:	2000      	movs	r0, #0
    2d7a:	6923      	ldr	r3, [r4, #16]
    2d7c:	4283      	cmp	r3, r0
    2d7e:	d1be      	bne.n	2cfe <__swsetup_r+0x3e>
    2d80:	230c      	movs	r3, #12
    2d82:	5ee2      	ldrsh	r2, [r4, r3]
    2d84:	0613      	lsls	r3, r2, #24
    2d86:	d5ba      	bpl.n	2cfe <__swsetup_r+0x3e>
    2d88:	2340      	movs	r3, #64	; 0x40
    2d8a:	4313      	orrs	r3, r2
    2d8c:	81a3      	strh	r3, [r4, #12]
    2d8e:	3801      	subs	r0, #1
    2d90:	e7b5      	b.n	2cfe <__swsetup_r+0x3e>
    2d92:	0792      	lsls	r2, r2, #30
    2d94:	d400      	bmi.n	2d98 <__swsetup_r+0xd8>
    2d96:	6963      	ldr	r3, [r4, #20]
    2d98:	60a3      	str	r3, [r4, #8]
    2d9a:	e7ed      	b.n	2d78 <__swsetup_r+0xb8>
    2d9c:	20000010 	.word	0x20000010
    2da0:	00003bd0 	.word	0x00003bd0
    2da4:	00003bf0 	.word	0x00003bf0
    2da8:	00003bb0 	.word	0x00003bb0

00002dac <__sflush_r>:
    2dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2dae:	898a      	ldrh	r2, [r1, #12]
    2db0:	0005      	movs	r5, r0
    2db2:	000c      	movs	r4, r1
    2db4:	0713      	lsls	r3, r2, #28
    2db6:	d460      	bmi.n	2e7a <__sflush_r+0xce>
    2db8:	684b      	ldr	r3, [r1, #4]
    2dba:	2b00      	cmp	r3, #0
    2dbc:	dc04      	bgt.n	2dc8 <__sflush_r+0x1c>
    2dbe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	dc01      	bgt.n	2dc8 <__sflush_r+0x1c>
    2dc4:	2000      	movs	r0, #0
    2dc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2dc8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2dca:	2f00      	cmp	r7, #0
    2dcc:	d0fa      	beq.n	2dc4 <__sflush_r+0x18>
    2dce:	2300      	movs	r3, #0
    2dd0:	682e      	ldr	r6, [r5, #0]
    2dd2:	602b      	str	r3, [r5, #0]
    2dd4:	2380      	movs	r3, #128	; 0x80
    2dd6:	015b      	lsls	r3, r3, #5
    2dd8:	401a      	ands	r2, r3
    2dda:	d034      	beq.n	2e46 <__sflush_r+0x9a>
    2ddc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2dde:	89a3      	ldrh	r3, [r4, #12]
    2de0:	075b      	lsls	r3, r3, #29
    2de2:	d506      	bpl.n	2df2 <__sflush_r+0x46>
    2de4:	6863      	ldr	r3, [r4, #4]
    2de6:	1ac0      	subs	r0, r0, r3
    2de8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2dea:	2b00      	cmp	r3, #0
    2dec:	d001      	beq.n	2df2 <__sflush_r+0x46>
    2dee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2df0:	1ac0      	subs	r0, r0, r3
    2df2:	0002      	movs	r2, r0
    2df4:	6a21      	ldr	r1, [r4, #32]
    2df6:	2300      	movs	r3, #0
    2df8:	0028      	movs	r0, r5
    2dfa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2dfc:	47b8      	blx	r7
    2dfe:	89a1      	ldrh	r1, [r4, #12]
    2e00:	1c43      	adds	r3, r0, #1
    2e02:	d106      	bne.n	2e12 <__sflush_r+0x66>
    2e04:	682b      	ldr	r3, [r5, #0]
    2e06:	2b1d      	cmp	r3, #29
    2e08:	d831      	bhi.n	2e6e <__sflush_r+0xc2>
    2e0a:	4a2c      	ldr	r2, [pc, #176]	; (2ebc <__sflush_r+0x110>)
    2e0c:	40da      	lsrs	r2, r3
    2e0e:	07d3      	lsls	r3, r2, #31
    2e10:	d52d      	bpl.n	2e6e <__sflush_r+0xc2>
    2e12:	2300      	movs	r3, #0
    2e14:	6063      	str	r3, [r4, #4]
    2e16:	6923      	ldr	r3, [r4, #16]
    2e18:	6023      	str	r3, [r4, #0]
    2e1a:	04cb      	lsls	r3, r1, #19
    2e1c:	d505      	bpl.n	2e2a <__sflush_r+0x7e>
    2e1e:	1c43      	adds	r3, r0, #1
    2e20:	d102      	bne.n	2e28 <__sflush_r+0x7c>
    2e22:	682b      	ldr	r3, [r5, #0]
    2e24:	2b00      	cmp	r3, #0
    2e26:	d100      	bne.n	2e2a <__sflush_r+0x7e>
    2e28:	6560      	str	r0, [r4, #84]	; 0x54
    2e2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2e2c:	602e      	str	r6, [r5, #0]
    2e2e:	2900      	cmp	r1, #0
    2e30:	d0c8      	beq.n	2dc4 <__sflush_r+0x18>
    2e32:	0023      	movs	r3, r4
    2e34:	3344      	adds	r3, #68	; 0x44
    2e36:	4299      	cmp	r1, r3
    2e38:	d002      	beq.n	2e40 <__sflush_r+0x94>
    2e3a:	0028      	movs	r0, r5
    2e3c:	f000 f9ba 	bl	31b4 <_free_r>
    2e40:	2000      	movs	r0, #0
    2e42:	6360      	str	r0, [r4, #52]	; 0x34
    2e44:	e7bf      	b.n	2dc6 <__sflush_r+0x1a>
    2e46:	2301      	movs	r3, #1
    2e48:	6a21      	ldr	r1, [r4, #32]
    2e4a:	0028      	movs	r0, r5
    2e4c:	47b8      	blx	r7
    2e4e:	1c43      	adds	r3, r0, #1
    2e50:	d1c5      	bne.n	2dde <__sflush_r+0x32>
    2e52:	682b      	ldr	r3, [r5, #0]
    2e54:	2b00      	cmp	r3, #0
    2e56:	d0c2      	beq.n	2dde <__sflush_r+0x32>
    2e58:	2b1d      	cmp	r3, #29
    2e5a:	d001      	beq.n	2e60 <__sflush_r+0xb4>
    2e5c:	2b16      	cmp	r3, #22
    2e5e:	d101      	bne.n	2e64 <__sflush_r+0xb8>
    2e60:	602e      	str	r6, [r5, #0]
    2e62:	e7af      	b.n	2dc4 <__sflush_r+0x18>
    2e64:	2340      	movs	r3, #64	; 0x40
    2e66:	89a2      	ldrh	r2, [r4, #12]
    2e68:	4313      	orrs	r3, r2
    2e6a:	81a3      	strh	r3, [r4, #12]
    2e6c:	e7ab      	b.n	2dc6 <__sflush_r+0x1a>
    2e6e:	2340      	movs	r3, #64	; 0x40
    2e70:	430b      	orrs	r3, r1
    2e72:	2001      	movs	r0, #1
    2e74:	81a3      	strh	r3, [r4, #12]
    2e76:	4240      	negs	r0, r0
    2e78:	e7a5      	b.n	2dc6 <__sflush_r+0x1a>
    2e7a:	690f      	ldr	r7, [r1, #16]
    2e7c:	2f00      	cmp	r7, #0
    2e7e:	d0a1      	beq.n	2dc4 <__sflush_r+0x18>
    2e80:	680b      	ldr	r3, [r1, #0]
    2e82:	600f      	str	r7, [r1, #0]
    2e84:	1bdb      	subs	r3, r3, r7
    2e86:	9301      	str	r3, [sp, #4]
    2e88:	2300      	movs	r3, #0
    2e8a:	0792      	lsls	r2, r2, #30
    2e8c:	d100      	bne.n	2e90 <__sflush_r+0xe4>
    2e8e:	694b      	ldr	r3, [r1, #20]
    2e90:	60a3      	str	r3, [r4, #8]
    2e92:	9b01      	ldr	r3, [sp, #4]
    2e94:	2b00      	cmp	r3, #0
    2e96:	dc00      	bgt.n	2e9a <__sflush_r+0xee>
    2e98:	e794      	b.n	2dc4 <__sflush_r+0x18>
    2e9a:	9b01      	ldr	r3, [sp, #4]
    2e9c:	003a      	movs	r2, r7
    2e9e:	6a21      	ldr	r1, [r4, #32]
    2ea0:	0028      	movs	r0, r5
    2ea2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2ea4:	47b0      	blx	r6
    2ea6:	2800      	cmp	r0, #0
    2ea8:	dc03      	bgt.n	2eb2 <__sflush_r+0x106>
    2eaa:	2340      	movs	r3, #64	; 0x40
    2eac:	89a2      	ldrh	r2, [r4, #12]
    2eae:	4313      	orrs	r3, r2
    2eb0:	e7df      	b.n	2e72 <__sflush_r+0xc6>
    2eb2:	9b01      	ldr	r3, [sp, #4]
    2eb4:	183f      	adds	r7, r7, r0
    2eb6:	1a1b      	subs	r3, r3, r0
    2eb8:	9301      	str	r3, [sp, #4]
    2eba:	e7ea      	b.n	2e92 <__sflush_r+0xe6>
    2ebc:	20400001 	.word	0x20400001

00002ec0 <_fflush_r>:
    2ec0:	690b      	ldr	r3, [r1, #16]
    2ec2:	b570      	push	{r4, r5, r6, lr}
    2ec4:	0005      	movs	r5, r0
    2ec6:	000c      	movs	r4, r1
    2ec8:	2b00      	cmp	r3, #0
    2eca:	d101      	bne.n	2ed0 <_fflush_r+0x10>
    2ecc:	2000      	movs	r0, #0
    2ece:	bd70      	pop	{r4, r5, r6, pc}
    2ed0:	2800      	cmp	r0, #0
    2ed2:	d004      	beq.n	2ede <_fflush_r+0x1e>
    2ed4:	6983      	ldr	r3, [r0, #24]
    2ed6:	2b00      	cmp	r3, #0
    2ed8:	d101      	bne.n	2ede <_fflush_r+0x1e>
    2eda:	f000 f85f 	bl	2f9c <__sinit>
    2ede:	4b0b      	ldr	r3, [pc, #44]	; (2f0c <_fflush_r+0x4c>)
    2ee0:	429c      	cmp	r4, r3
    2ee2:	d109      	bne.n	2ef8 <_fflush_r+0x38>
    2ee4:	686c      	ldr	r4, [r5, #4]
    2ee6:	220c      	movs	r2, #12
    2ee8:	5ea3      	ldrsh	r3, [r4, r2]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d0ee      	beq.n	2ecc <_fflush_r+0xc>
    2eee:	0021      	movs	r1, r4
    2ef0:	0028      	movs	r0, r5
    2ef2:	f7ff ff5b 	bl	2dac <__sflush_r>
    2ef6:	e7ea      	b.n	2ece <_fflush_r+0xe>
    2ef8:	4b05      	ldr	r3, [pc, #20]	; (2f10 <_fflush_r+0x50>)
    2efa:	429c      	cmp	r4, r3
    2efc:	d101      	bne.n	2f02 <_fflush_r+0x42>
    2efe:	68ac      	ldr	r4, [r5, #8]
    2f00:	e7f1      	b.n	2ee6 <_fflush_r+0x26>
    2f02:	4b04      	ldr	r3, [pc, #16]	; (2f14 <_fflush_r+0x54>)
    2f04:	429c      	cmp	r4, r3
    2f06:	d1ee      	bne.n	2ee6 <_fflush_r+0x26>
    2f08:	68ec      	ldr	r4, [r5, #12]
    2f0a:	e7ec      	b.n	2ee6 <_fflush_r+0x26>
    2f0c:	00003bd0 	.word	0x00003bd0
    2f10:	00003bf0 	.word	0x00003bf0
    2f14:	00003bb0 	.word	0x00003bb0

00002f18 <_cleanup_r>:
    2f18:	b510      	push	{r4, lr}
    2f1a:	4902      	ldr	r1, [pc, #8]	; (2f24 <_cleanup_r+0xc>)
    2f1c:	f000 f8b2 	bl	3084 <_fwalk_reent>
    2f20:	bd10      	pop	{r4, pc}
    2f22:	46c0      	nop			; (mov r8, r8)
    2f24:	00002ec1 	.word	0x00002ec1

00002f28 <std.isra.0>:
    2f28:	2300      	movs	r3, #0
    2f2a:	b510      	push	{r4, lr}
    2f2c:	0004      	movs	r4, r0
    2f2e:	6003      	str	r3, [r0, #0]
    2f30:	6043      	str	r3, [r0, #4]
    2f32:	6083      	str	r3, [r0, #8]
    2f34:	8181      	strh	r1, [r0, #12]
    2f36:	6643      	str	r3, [r0, #100]	; 0x64
    2f38:	81c2      	strh	r2, [r0, #14]
    2f3a:	6103      	str	r3, [r0, #16]
    2f3c:	6143      	str	r3, [r0, #20]
    2f3e:	6183      	str	r3, [r0, #24]
    2f40:	0019      	movs	r1, r3
    2f42:	2208      	movs	r2, #8
    2f44:	305c      	adds	r0, #92	; 0x5c
    2f46:	f7ff fd23 	bl	2990 <memset>
    2f4a:	4b05      	ldr	r3, [pc, #20]	; (2f60 <std.isra.0+0x38>)
    2f4c:	6224      	str	r4, [r4, #32]
    2f4e:	6263      	str	r3, [r4, #36]	; 0x24
    2f50:	4b04      	ldr	r3, [pc, #16]	; (2f64 <std.isra.0+0x3c>)
    2f52:	62a3      	str	r3, [r4, #40]	; 0x28
    2f54:	4b04      	ldr	r3, [pc, #16]	; (2f68 <std.isra.0+0x40>)
    2f56:	62e3      	str	r3, [r4, #44]	; 0x2c
    2f58:	4b04      	ldr	r3, [pc, #16]	; (2f6c <std.isra.0+0x44>)
    2f5a:	6323      	str	r3, [r4, #48]	; 0x30
    2f5c:	bd10      	pop	{r4, pc}
    2f5e:	46c0      	nop			; (mov r8, r8)
    2f60:	000038c1 	.word	0x000038c1
    2f64:	000038e9 	.word	0x000038e9
    2f68:	00003921 	.word	0x00003921
    2f6c:	0000394d 	.word	0x0000394d

00002f70 <__sfmoreglue>:
    2f70:	b570      	push	{r4, r5, r6, lr}
    2f72:	2568      	movs	r5, #104	; 0x68
    2f74:	1e4a      	subs	r2, r1, #1
    2f76:	4355      	muls	r5, r2
    2f78:	000e      	movs	r6, r1
    2f7a:	0029      	movs	r1, r5
    2f7c:	3174      	adds	r1, #116	; 0x74
    2f7e:	f000 f963 	bl	3248 <_malloc_r>
    2f82:	1e04      	subs	r4, r0, #0
    2f84:	d008      	beq.n	2f98 <__sfmoreglue+0x28>
    2f86:	2100      	movs	r1, #0
    2f88:	002a      	movs	r2, r5
    2f8a:	6001      	str	r1, [r0, #0]
    2f8c:	6046      	str	r6, [r0, #4]
    2f8e:	300c      	adds	r0, #12
    2f90:	60a0      	str	r0, [r4, #8]
    2f92:	3268      	adds	r2, #104	; 0x68
    2f94:	f7ff fcfc 	bl	2990 <memset>
    2f98:	0020      	movs	r0, r4
    2f9a:	bd70      	pop	{r4, r5, r6, pc}

00002f9c <__sinit>:
    2f9c:	6983      	ldr	r3, [r0, #24]
    2f9e:	b513      	push	{r0, r1, r4, lr}
    2fa0:	0004      	movs	r4, r0
    2fa2:	2b00      	cmp	r3, #0
    2fa4:	d128      	bne.n	2ff8 <__sinit+0x5c>
    2fa6:	6483      	str	r3, [r0, #72]	; 0x48
    2fa8:	64c3      	str	r3, [r0, #76]	; 0x4c
    2faa:	6503      	str	r3, [r0, #80]	; 0x50
    2fac:	4b13      	ldr	r3, [pc, #76]	; (2ffc <__sinit+0x60>)
    2fae:	4a14      	ldr	r2, [pc, #80]	; (3000 <__sinit+0x64>)
    2fb0:	681b      	ldr	r3, [r3, #0]
    2fb2:	6282      	str	r2, [r0, #40]	; 0x28
    2fb4:	9301      	str	r3, [sp, #4]
    2fb6:	4298      	cmp	r0, r3
    2fb8:	d101      	bne.n	2fbe <__sinit+0x22>
    2fba:	2301      	movs	r3, #1
    2fbc:	6183      	str	r3, [r0, #24]
    2fbe:	0020      	movs	r0, r4
    2fc0:	f000 f820 	bl	3004 <__sfp>
    2fc4:	6060      	str	r0, [r4, #4]
    2fc6:	0020      	movs	r0, r4
    2fc8:	f000 f81c 	bl	3004 <__sfp>
    2fcc:	60a0      	str	r0, [r4, #8]
    2fce:	0020      	movs	r0, r4
    2fd0:	f000 f818 	bl	3004 <__sfp>
    2fd4:	2200      	movs	r2, #0
    2fd6:	60e0      	str	r0, [r4, #12]
    2fd8:	2104      	movs	r1, #4
    2fda:	6860      	ldr	r0, [r4, #4]
    2fdc:	f7ff ffa4 	bl	2f28 <std.isra.0>
    2fe0:	2201      	movs	r2, #1
    2fe2:	2109      	movs	r1, #9
    2fe4:	68a0      	ldr	r0, [r4, #8]
    2fe6:	f7ff ff9f 	bl	2f28 <std.isra.0>
    2fea:	2202      	movs	r2, #2
    2fec:	2112      	movs	r1, #18
    2fee:	68e0      	ldr	r0, [r4, #12]
    2ff0:	f7ff ff9a 	bl	2f28 <std.isra.0>
    2ff4:	2301      	movs	r3, #1
    2ff6:	61a3      	str	r3, [r4, #24]
    2ff8:	bd13      	pop	{r0, r1, r4, pc}
    2ffa:	46c0      	nop			; (mov r8, r8)
    2ffc:	00003bac 	.word	0x00003bac
    3000:	00002f19 	.word	0x00002f19

00003004 <__sfp>:
    3004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3006:	4b1e      	ldr	r3, [pc, #120]	; (3080 <__sfp+0x7c>)
    3008:	0007      	movs	r7, r0
    300a:	681e      	ldr	r6, [r3, #0]
    300c:	69b3      	ldr	r3, [r6, #24]
    300e:	2b00      	cmp	r3, #0
    3010:	d102      	bne.n	3018 <__sfp+0x14>
    3012:	0030      	movs	r0, r6
    3014:	f7ff ffc2 	bl	2f9c <__sinit>
    3018:	3648      	adds	r6, #72	; 0x48
    301a:	68b4      	ldr	r4, [r6, #8]
    301c:	6873      	ldr	r3, [r6, #4]
    301e:	3b01      	subs	r3, #1
    3020:	d504      	bpl.n	302c <__sfp+0x28>
    3022:	6833      	ldr	r3, [r6, #0]
    3024:	2b00      	cmp	r3, #0
    3026:	d007      	beq.n	3038 <__sfp+0x34>
    3028:	6836      	ldr	r6, [r6, #0]
    302a:	e7f6      	b.n	301a <__sfp+0x16>
    302c:	220c      	movs	r2, #12
    302e:	5ea5      	ldrsh	r5, [r4, r2]
    3030:	2d00      	cmp	r5, #0
    3032:	d00d      	beq.n	3050 <__sfp+0x4c>
    3034:	3468      	adds	r4, #104	; 0x68
    3036:	e7f2      	b.n	301e <__sfp+0x1a>
    3038:	2104      	movs	r1, #4
    303a:	0038      	movs	r0, r7
    303c:	f7ff ff98 	bl	2f70 <__sfmoreglue>
    3040:	6030      	str	r0, [r6, #0]
    3042:	2800      	cmp	r0, #0
    3044:	d1f0      	bne.n	3028 <__sfp+0x24>
    3046:	230c      	movs	r3, #12
    3048:	0004      	movs	r4, r0
    304a:	603b      	str	r3, [r7, #0]
    304c:	0020      	movs	r0, r4
    304e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3050:	2301      	movs	r3, #1
    3052:	0020      	movs	r0, r4
    3054:	425b      	negs	r3, r3
    3056:	81e3      	strh	r3, [r4, #14]
    3058:	3302      	adds	r3, #2
    305a:	81a3      	strh	r3, [r4, #12]
    305c:	6665      	str	r5, [r4, #100]	; 0x64
    305e:	6025      	str	r5, [r4, #0]
    3060:	60a5      	str	r5, [r4, #8]
    3062:	6065      	str	r5, [r4, #4]
    3064:	6125      	str	r5, [r4, #16]
    3066:	6165      	str	r5, [r4, #20]
    3068:	61a5      	str	r5, [r4, #24]
    306a:	2208      	movs	r2, #8
    306c:	0029      	movs	r1, r5
    306e:	305c      	adds	r0, #92	; 0x5c
    3070:	f7ff fc8e 	bl	2990 <memset>
    3074:	6365      	str	r5, [r4, #52]	; 0x34
    3076:	63a5      	str	r5, [r4, #56]	; 0x38
    3078:	64a5      	str	r5, [r4, #72]	; 0x48
    307a:	64e5      	str	r5, [r4, #76]	; 0x4c
    307c:	e7e6      	b.n	304c <__sfp+0x48>
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	00003bac 	.word	0x00003bac

00003084 <_fwalk_reent>:
    3084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3086:	0004      	movs	r4, r0
    3088:	0007      	movs	r7, r0
    308a:	2600      	movs	r6, #0
    308c:	9101      	str	r1, [sp, #4]
    308e:	3448      	adds	r4, #72	; 0x48
    3090:	2c00      	cmp	r4, #0
    3092:	d101      	bne.n	3098 <_fwalk_reent+0x14>
    3094:	0030      	movs	r0, r6
    3096:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3098:	6863      	ldr	r3, [r4, #4]
    309a:	68a5      	ldr	r5, [r4, #8]
    309c:	9300      	str	r3, [sp, #0]
    309e:	9b00      	ldr	r3, [sp, #0]
    30a0:	3b01      	subs	r3, #1
    30a2:	9300      	str	r3, [sp, #0]
    30a4:	d501      	bpl.n	30aa <_fwalk_reent+0x26>
    30a6:	6824      	ldr	r4, [r4, #0]
    30a8:	e7f2      	b.n	3090 <_fwalk_reent+0xc>
    30aa:	89ab      	ldrh	r3, [r5, #12]
    30ac:	2b01      	cmp	r3, #1
    30ae:	d908      	bls.n	30c2 <_fwalk_reent+0x3e>
    30b0:	220e      	movs	r2, #14
    30b2:	5eab      	ldrsh	r3, [r5, r2]
    30b4:	3301      	adds	r3, #1
    30b6:	d004      	beq.n	30c2 <_fwalk_reent+0x3e>
    30b8:	0029      	movs	r1, r5
    30ba:	0038      	movs	r0, r7
    30bc:	9b01      	ldr	r3, [sp, #4]
    30be:	4798      	blx	r3
    30c0:	4306      	orrs	r6, r0
    30c2:	3568      	adds	r5, #104	; 0x68
    30c4:	e7eb      	b.n	309e <_fwalk_reent+0x1a>
	...

000030c8 <__swhatbuf_r>:
    30c8:	b570      	push	{r4, r5, r6, lr}
    30ca:	000e      	movs	r6, r1
    30cc:	001d      	movs	r5, r3
    30ce:	230e      	movs	r3, #14
    30d0:	5ec9      	ldrsh	r1, [r1, r3]
    30d2:	b090      	sub	sp, #64	; 0x40
    30d4:	0014      	movs	r4, r2
    30d6:	2900      	cmp	r1, #0
    30d8:	da07      	bge.n	30ea <__swhatbuf_r+0x22>
    30da:	2300      	movs	r3, #0
    30dc:	602b      	str	r3, [r5, #0]
    30de:	89b3      	ldrh	r3, [r6, #12]
    30e0:	061b      	lsls	r3, r3, #24
    30e2:	d411      	bmi.n	3108 <__swhatbuf_r+0x40>
    30e4:	2380      	movs	r3, #128	; 0x80
    30e6:	00db      	lsls	r3, r3, #3
    30e8:	e00f      	b.n	310a <__swhatbuf_r+0x42>
    30ea:	aa01      	add	r2, sp, #4
    30ec:	f000 fc5a 	bl	39a4 <_fstat_r>
    30f0:	2800      	cmp	r0, #0
    30f2:	dbf2      	blt.n	30da <__swhatbuf_r+0x12>
    30f4:	22f0      	movs	r2, #240	; 0xf0
    30f6:	9b02      	ldr	r3, [sp, #8]
    30f8:	0212      	lsls	r2, r2, #8
    30fa:	4013      	ands	r3, r2
    30fc:	4a05      	ldr	r2, [pc, #20]	; (3114 <__swhatbuf_r+0x4c>)
    30fe:	189b      	adds	r3, r3, r2
    3100:	425a      	negs	r2, r3
    3102:	4153      	adcs	r3, r2
    3104:	602b      	str	r3, [r5, #0]
    3106:	e7ed      	b.n	30e4 <__swhatbuf_r+0x1c>
    3108:	2340      	movs	r3, #64	; 0x40
    310a:	2000      	movs	r0, #0
    310c:	6023      	str	r3, [r4, #0]
    310e:	b010      	add	sp, #64	; 0x40
    3110:	bd70      	pop	{r4, r5, r6, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	ffffe000 	.word	0xffffe000

00003118 <__smakebuf_r>:
    3118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    311a:	2602      	movs	r6, #2
    311c:	898b      	ldrh	r3, [r1, #12]
    311e:	0005      	movs	r5, r0
    3120:	000c      	movs	r4, r1
    3122:	4233      	tst	r3, r6
    3124:	d006      	beq.n	3134 <__smakebuf_r+0x1c>
    3126:	0023      	movs	r3, r4
    3128:	3347      	adds	r3, #71	; 0x47
    312a:	6023      	str	r3, [r4, #0]
    312c:	6123      	str	r3, [r4, #16]
    312e:	2301      	movs	r3, #1
    3130:	6163      	str	r3, [r4, #20]
    3132:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3134:	ab01      	add	r3, sp, #4
    3136:	466a      	mov	r2, sp
    3138:	f7ff ffc6 	bl	30c8 <__swhatbuf_r>
    313c:	9900      	ldr	r1, [sp, #0]
    313e:	0007      	movs	r7, r0
    3140:	0028      	movs	r0, r5
    3142:	f000 f881 	bl	3248 <_malloc_r>
    3146:	2800      	cmp	r0, #0
    3148:	d108      	bne.n	315c <__smakebuf_r+0x44>
    314a:	220c      	movs	r2, #12
    314c:	5ea3      	ldrsh	r3, [r4, r2]
    314e:	059a      	lsls	r2, r3, #22
    3150:	d4ef      	bmi.n	3132 <__smakebuf_r+0x1a>
    3152:	2203      	movs	r2, #3
    3154:	4393      	bics	r3, r2
    3156:	431e      	orrs	r6, r3
    3158:	81a6      	strh	r6, [r4, #12]
    315a:	e7e4      	b.n	3126 <__smakebuf_r+0xe>
    315c:	4b0f      	ldr	r3, [pc, #60]	; (319c <__smakebuf_r+0x84>)
    315e:	62ab      	str	r3, [r5, #40]	; 0x28
    3160:	2380      	movs	r3, #128	; 0x80
    3162:	89a2      	ldrh	r2, [r4, #12]
    3164:	6020      	str	r0, [r4, #0]
    3166:	4313      	orrs	r3, r2
    3168:	81a3      	strh	r3, [r4, #12]
    316a:	9b00      	ldr	r3, [sp, #0]
    316c:	6120      	str	r0, [r4, #16]
    316e:	6163      	str	r3, [r4, #20]
    3170:	9b01      	ldr	r3, [sp, #4]
    3172:	2b00      	cmp	r3, #0
    3174:	d00d      	beq.n	3192 <__smakebuf_r+0x7a>
    3176:	230e      	movs	r3, #14
    3178:	5ee1      	ldrsh	r1, [r4, r3]
    317a:	0028      	movs	r0, r5
    317c:	f000 fc24 	bl	39c8 <_isatty_r>
    3180:	2800      	cmp	r0, #0
    3182:	d006      	beq.n	3192 <__smakebuf_r+0x7a>
    3184:	2203      	movs	r2, #3
    3186:	89a3      	ldrh	r3, [r4, #12]
    3188:	4393      	bics	r3, r2
    318a:	001a      	movs	r2, r3
    318c:	2301      	movs	r3, #1
    318e:	4313      	orrs	r3, r2
    3190:	81a3      	strh	r3, [r4, #12]
    3192:	89a0      	ldrh	r0, [r4, #12]
    3194:	4338      	orrs	r0, r7
    3196:	81a0      	strh	r0, [r4, #12]
    3198:	e7cb      	b.n	3132 <__smakebuf_r+0x1a>
    319a:	46c0      	nop			; (mov r8, r8)
    319c:	00002f19 	.word	0x00002f19

000031a0 <malloc>:
    31a0:	b510      	push	{r4, lr}
    31a2:	4b03      	ldr	r3, [pc, #12]	; (31b0 <malloc+0x10>)
    31a4:	0001      	movs	r1, r0
    31a6:	6818      	ldr	r0, [r3, #0]
    31a8:	f000 f84e 	bl	3248 <_malloc_r>
    31ac:	bd10      	pop	{r4, pc}
    31ae:	46c0      	nop			; (mov r8, r8)
    31b0:	20000010 	.word	0x20000010

000031b4 <_free_r>:
    31b4:	b570      	push	{r4, r5, r6, lr}
    31b6:	0005      	movs	r5, r0
    31b8:	2900      	cmp	r1, #0
    31ba:	d010      	beq.n	31de <_free_r+0x2a>
    31bc:	1f0c      	subs	r4, r1, #4
    31be:	6823      	ldr	r3, [r4, #0]
    31c0:	2b00      	cmp	r3, #0
    31c2:	da00      	bge.n	31c6 <_free_r+0x12>
    31c4:	18e4      	adds	r4, r4, r3
    31c6:	0028      	movs	r0, r5
    31c8:	f000 fc2f 	bl	3a2a <__malloc_lock>
    31cc:	4a1d      	ldr	r2, [pc, #116]	; (3244 <_free_r+0x90>)
    31ce:	6813      	ldr	r3, [r2, #0]
    31d0:	2b00      	cmp	r3, #0
    31d2:	d105      	bne.n	31e0 <_free_r+0x2c>
    31d4:	6063      	str	r3, [r4, #4]
    31d6:	6014      	str	r4, [r2, #0]
    31d8:	0028      	movs	r0, r5
    31da:	f000 fc27 	bl	3a2c <__malloc_unlock>
    31de:	bd70      	pop	{r4, r5, r6, pc}
    31e0:	42a3      	cmp	r3, r4
    31e2:	d909      	bls.n	31f8 <_free_r+0x44>
    31e4:	6821      	ldr	r1, [r4, #0]
    31e6:	1860      	adds	r0, r4, r1
    31e8:	4283      	cmp	r3, r0
    31ea:	d1f3      	bne.n	31d4 <_free_r+0x20>
    31ec:	6818      	ldr	r0, [r3, #0]
    31ee:	685b      	ldr	r3, [r3, #4]
    31f0:	1841      	adds	r1, r0, r1
    31f2:	6021      	str	r1, [r4, #0]
    31f4:	e7ee      	b.n	31d4 <_free_r+0x20>
    31f6:	0013      	movs	r3, r2
    31f8:	685a      	ldr	r2, [r3, #4]
    31fa:	2a00      	cmp	r2, #0
    31fc:	d001      	beq.n	3202 <_free_r+0x4e>
    31fe:	42a2      	cmp	r2, r4
    3200:	d9f9      	bls.n	31f6 <_free_r+0x42>
    3202:	6819      	ldr	r1, [r3, #0]
    3204:	1858      	adds	r0, r3, r1
    3206:	42a0      	cmp	r0, r4
    3208:	d10b      	bne.n	3222 <_free_r+0x6e>
    320a:	6820      	ldr	r0, [r4, #0]
    320c:	1809      	adds	r1, r1, r0
    320e:	1858      	adds	r0, r3, r1
    3210:	6019      	str	r1, [r3, #0]
    3212:	4282      	cmp	r2, r0
    3214:	d1e0      	bne.n	31d8 <_free_r+0x24>
    3216:	6810      	ldr	r0, [r2, #0]
    3218:	6852      	ldr	r2, [r2, #4]
    321a:	1841      	adds	r1, r0, r1
    321c:	6019      	str	r1, [r3, #0]
    321e:	605a      	str	r2, [r3, #4]
    3220:	e7da      	b.n	31d8 <_free_r+0x24>
    3222:	42a0      	cmp	r0, r4
    3224:	d902      	bls.n	322c <_free_r+0x78>
    3226:	230c      	movs	r3, #12
    3228:	602b      	str	r3, [r5, #0]
    322a:	e7d5      	b.n	31d8 <_free_r+0x24>
    322c:	6821      	ldr	r1, [r4, #0]
    322e:	1860      	adds	r0, r4, r1
    3230:	4282      	cmp	r2, r0
    3232:	d103      	bne.n	323c <_free_r+0x88>
    3234:	6810      	ldr	r0, [r2, #0]
    3236:	6852      	ldr	r2, [r2, #4]
    3238:	1841      	adds	r1, r0, r1
    323a:	6021      	str	r1, [r4, #0]
    323c:	6062      	str	r2, [r4, #4]
    323e:	605c      	str	r4, [r3, #4]
    3240:	e7ca      	b.n	31d8 <_free_r+0x24>
    3242:	46c0      	nop			; (mov r8, r8)
    3244:	200000e4 	.word	0x200000e4

00003248 <_malloc_r>:
    3248:	2303      	movs	r3, #3
    324a:	b570      	push	{r4, r5, r6, lr}
    324c:	1ccd      	adds	r5, r1, #3
    324e:	439d      	bics	r5, r3
    3250:	3508      	adds	r5, #8
    3252:	0006      	movs	r6, r0
    3254:	2d0c      	cmp	r5, #12
    3256:	d21e      	bcs.n	3296 <_malloc_r+0x4e>
    3258:	250c      	movs	r5, #12
    325a:	42a9      	cmp	r1, r5
    325c:	d81d      	bhi.n	329a <_malloc_r+0x52>
    325e:	0030      	movs	r0, r6
    3260:	f000 fbe3 	bl	3a2a <__malloc_lock>
    3264:	4a25      	ldr	r2, [pc, #148]	; (32fc <_malloc_r+0xb4>)
    3266:	6814      	ldr	r4, [r2, #0]
    3268:	0021      	movs	r1, r4
    326a:	2900      	cmp	r1, #0
    326c:	d119      	bne.n	32a2 <_malloc_r+0x5a>
    326e:	4c24      	ldr	r4, [pc, #144]	; (3300 <_malloc_r+0xb8>)
    3270:	6823      	ldr	r3, [r4, #0]
    3272:	2b00      	cmp	r3, #0
    3274:	d103      	bne.n	327e <_malloc_r+0x36>
    3276:	0030      	movs	r0, r6
    3278:	f000 fb10 	bl	389c <_sbrk_r>
    327c:	6020      	str	r0, [r4, #0]
    327e:	0029      	movs	r1, r5
    3280:	0030      	movs	r0, r6
    3282:	f000 fb0b 	bl	389c <_sbrk_r>
    3286:	1c43      	adds	r3, r0, #1
    3288:	d12c      	bne.n	32e4 <_malloc_r+0x9c>
    328a:	230c      	movs	r3, #12
    328c:	0030      	movs	r0, r6
    328e:	6033      	str	r3, [r6, #0]
    3290:	f000 fbcc 	bl	3a2c <__malloc_unlock>
    3294:	e003      	b.n	329e <_malloc_r+0x56>
    3296:	2d00      	cmp	r5, #0
    3298:	dadf      	bge.n	325a <_malloc_r+0x12>
    329a:	230c      	movs	r3, #12
    329c:	6033      	str	r3, [r6, #0]
    329e:	2000      	movs	r0, #0
    32a0:	bd70      	pop	{r4, r5, r6, pc}
    32a2:	680b      	ldr	r3, [r1, #0]
    32a4:	1b5b      	subs	r3, r3, r5
    32a6:	d41a      	bmi.n	32de <_malloc_r+0x96>
    32a8:	2b0b      	cmp	r3, #11
    32aa:	d903      	bls.n	32b4 <_malloc_r+0x6c>
    32ac:	600b      	str	r3, [r1, #0]
    32ae:	18cc      	adds	r4, r1, r3
    32b0:	6025      	str	r5, [r4, #0]
    32b2:	e003      	b.n	32bc <_malloc_r+0x74>
    32b4:	428c      	cmp	r4, r1
    32b6:	d10e      	bne.n	32d6 <_malloc_r+0x8e>
    32b8:	6863      	ldr	r3, [r4, #4]
    32ba:	6013      	str	r3, [r2, #0]
    32bc:	0030      	movs	r0, r6
    32be:	f000 fbb5 	bl	3a2c <__malloc_unlock>
    32c2:	0020      	movs	r0, r4
    32c4:	2207      	movs	r2, #7
    32c6:	300b      	adds	r0, #11
    32c8:	1d23      	adds	r3, r4, #4
    32ca:	4390      	bics	r0, r2
    32cc:	1ac3      	subs	r3, r0, r3
    32ce:	d0e7      	beq.n	32a0 <_malloc_r+0x58>
    32d0:	425a      	negs	r2, r3
    32d2:	50e2      	str	r2, [r4, r3]
    32d4:	e7e4      	b.n	32a0 <_malloc_r+0x58>
    32d6:	684b      	ldr	r3, [r1, #4]
    32d8:	6063      	str	r3, [r4, #4]
    32da:	000c      	movs	r4, r1
    32dc:	e7ee      	b.n	32bc <_malloc_r+0x74>
    32de:	000c      	movs	r4, r1
    32e0:	6849      	ldr	r1, [r1, #4]
    32e2:	e7c2      	b.n	326a <_malloc_r+0x22>
    32e4:	2303      	movs	r3, #3
    32e6:	1cc4      	adds	r4, r0, #3
    32e8:	439c      	bics	r4, r3
    32ea:	42a0      	cmp	r0, r4
    32ec:	d0e0      	beq.n	32b0 <_malloc_r+0x68>
    32ee:	1a21      	subs	r1, r4, r0
    32f0:	0030      	movs	r0, r6
    32f2:	f000 fad3 	bl	389c <_sbrk_r>
    32f6:	1c43      	adds	r3, r0, #1
    32f8:	d1da      	bne.n	32b0 <_malloc_r+0x68>
    32fa:	e7c6      	b.n	328a <_malloc_r+0x42>
    32fc:	200000e4 	.word	0x200000e4
    3300:	200000e8 	.word	0x200000e8

00003304 <__sfputc_r>:
    3304:	6893      	ldr	r3, [r2, #8]
    3306:	b510      	push	{r4, lr}
    3308:	3b01      	subs	r3, #1
    330a:	6093      	str	r3, [r2, #8]
    330c:	2b00      	cmp	r3, #0
    330e:	da05      	bge.n	331c <__sfputc_r+0x18>
    3310:	6994      	ldr	r4, [r2, #24]
    3312:	42a3      	cmp	r3, r4
    3314:	db08      	blt.n	3328 <__sfputc_r+0x24>
    3316:	b2cb      	uxtb	r3, r1
    3318:	2b0a      	cmp	r3, #10
    331a:	d005      	beq.n	3328 <__sfputc_r+0x24>
    331c:	6813      	ldr	r3, [r2, #0]
    331e:	1c58      	adds	r0, r3, #1
    3320:	6010      	str	r0, [r2, #0]
    3322:	7019      	strb	r1, [r3, #0]
    3324:	b2c8      	uxtb	r0, r1
    3326:	bd10      	pop	{r4, pc}
    3328:	f7ff fc74 	bl	2c14 <__swbuf_r>
    332c:	e7fb      	b.n	3326 <__sfputc_r+0x22>

0000332e <__sfputs_r>:
    332e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3330:	0006      	movs	r6, r0
    3332:	000f      	movs	r7, r1
    3334:	0014      	movs	r4, r2
    3336:	18d5      	adds	r5, r2, r3
    3338:	42ac      	cmp	r4, r5
    333a:	d101      	bne.n	3340 <__sfputs_r+0x12>
    333c:	2000      	movs	r0, #0
    333e:	e007      	b.n	3350 <__sfputs_r+0x22>
    3340:	7821      	ldrb	r1, [r4, #0]
    3342:	003a      	movs	r2, r7
    3344:	0030      	movs	r0, r6
    3346:	f7ff ffdd 	bl	3304 <__sfputc_r>
    334a:	3401      	adds	r4, #1
    334c:	1c43      	adds	r3, r0, #1
    334e:	d1f3      	bne.n	3338 <__sfputs_r+0xa>
    3350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003354 <_vfiprintf_r>:
    3354:	b5f0      	push	{r4, r5, r6, r7, lr}
    3356:	b09f      	sub	sp, #124	; 0x7c
    3358:	0006      	movs	r6, r0
    335a:	000f      	movs	r7, r1
    335c:	0014      	movs	r4, r2
    335e:	9305      	str	r3, [sp, #20]
    3360:	2800      	cmp	r0, #0
    3362:	d004      	beq.n	336e <_vfiprintf_r+0x1a>
    3364:	6983      	ldr	r3, [r0, #24]
    3366:	2b00      	cmp	r3, #0
    3368:	d101      	bne.n	336e <_vfiprintf_r+0x1a>
    336a:	f7ff fe17 	bl	2f9c <__sinit>
    336e:	4b7f      	ldr	r3, [pc, #508]	; (356c <_vfiprintf_r+0x218>)
    3370:	429f      	cmp	r7, r3
    3372:	d15c      	bne.n	342e <_vfiprintf_r+0xda>
    3374:	6877      	ldr	r7, [r6, #4]
    3376:	89bb      	ldrh	r3, [r7, #12]
    3378:	071b      	lsls	r3, r3, #28
    337a:	d562      	bpl.n	3442 <_vfiprintf_r+0xee>
    337c:	693b      	ldr	r3, [r7, #16]
    337e:	2b00      	cmp	r3, #0
    3380:	d05f      	beq.n	3442 <_vfiprintf_r+0xee>
    3382:	2300      	movs	r3, #0
    3384:	ad06      	add	r5, sp, #24
    3386:	616b      	str	r3, [r5, #20]
    3388:	3320      	adds	r3, #32
    338a:	766b      	strb	r3, [r5, #25]
    338c:	3310      	adds	r3, #16
    338e:	76ab      	strb	r3, [r5, #26]
    3390:	9402      	str	r4, [sp, #8]
    3392:	9c02      	ldr	r4, [sp, #8]
    3394:	7823      	ldrb	r3, [r4, #0]
    3396:	2b00      	cmp	r3, #0
    3398:	d15d      	bne.n	3456 <_vfiprintf_r+0x102>
    339a:	9b02      	ldr	r3, [sp, #8]
    339c:	1ae3      	subs	r3, r4, r3
    339e:	9304      	str	r3, [sp, #16]
    33a0:	d00d      	beq.n	33be <_vfiprintf_r+0x6a>
    33a2:	9b04      	ldr	r3, [sp, #16]
    33a4:	9a02      	ldr	r2, [sp, #8]
    33a6:	0039      	movs	r1, r7
    33a8:	0030      	movs	r0, r6
    33aa:	f7ff ffc0 	bl	332e <__sfputs_r>
    33ae:	1c43      	adds	r3, r0, #1
    33b0:	d100      	bne.n	33b4 <_vfiprintf_r+0x60>
    33b2:	e0cc      	b.n	354e <_vfiprintf_r+0x1fa>
    33b4:	696a      	ldr	r2, [r5, #20]
    33b6:	9b04      	ldr	r3, [sp, #16]
    33b8:	4694      	mov	ip, r2
    33ba:	4463      	add	r3, ip
    33bc:	616b      	str	r3, [r5, #20]
    33be:	7823      	ldrb	r3, [r4, #0]
    33c0:	2b00      	cmp	r3, #0
    33c2:	d100      	bne.n	33c6 <_vfiprintf_r+0x72>
    33c4:	e0c3      	b.n	354e <_vfiprintf_r+0x1fa>
    33c6:	2201      	movs	r2, #1
    33c8:	2300      	movs	r3, #0
    33ca:	4252      	negs	r2, r2
    33cc:	606a      	str	r2, [r5, #4]
    33ce:	a902      	add	r1, sp, #8
    33d0:	3254      	adds	r2, #84	; 0x54
    33d2:	1852      	adds	r2, r2, r1
    33d4:	3401      	adds	r4, #1
    33d6:	602b      	str	r3, [r5, #0]
    33d8:	60eb      	str	r3, [r5, #12]
    33da:	60ab      	str	r3, [r5, #8]
    33dc:	7013      	strb	r3, [r2, #0]
    33de:	65ab      	str	r3, [r5, #88]	; 0x58
    33e0:	7821      	ldrb	r1, [r4, #0]
    33e2:	2205      	movs	r2, #5
    33e4:	4862      	ldr	r0, [pc, #392]	; (3570 <_vfiprintf_r+0x21c>)
    33e6:	f000 fb15 	bl	3a14 <memchr>
    33ea:	1c63      	adds	r3, r4, #1
    33ec:	469c      	mov	ip, r3
    33ee:	2800      	cmp	r0, #0
    33f0:	d135      	bne.n	345e <_vfiprintf_r+0x10a>
    33f2:	6829      	ldr	r1, [r5, #0]
    33f4:	06cb      	lsls	r3, r1, #27
    33f6:	d504      	bpl.n	3402 <_vfiprintf_r+0xae>
    33f8:	2353      	movs	r3, #83	; 0x53
    33fa:	aa02      	add	r2, sp, #8
    33fc:	3020      	adds	r0, #32
    33fe:	189b      	adds	r3, r3, r2
    3400:	7018      	strb	r0, [r3, #0]
    3402:	070b      	lsls	r3, r1, #28
    3404:	d504      	bpl.n	3410 <_vfiprintf_r+0xbc>
    3406:	2353      	movs	r3, #83	; 0x53
    3408:	202b      	movs	r0, #43	; 0x2b
    340a:	aa02      	add	r2, sp, #8
    340c:	189b      	adds	r3, r3, r2
    340e:	7018      	strb	r0, [r3, #0]
    3410:	7823      	ldrb	r3, [r4, #0]
    3412:	2b2a      	cmp	r3, #42	; 0x2a
    3414:	d02c      	beq.n	3470 <_vfiprintf_r+0x11c>
    3416:	2000      	movs	r0, #0
    3418:	210a      	movs	r1, #10
    341a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    341c:	7822      	ldrb	r2, [r4, #0]
    341e:	3a30      	subs	r2, #48	; 0x30
    3420:	2a09      	cmp	r2, #9
    3422:	d800      	bhi.n	3426 <_vfiprintf_r+0xd2>
    3424:	e06b      	b.n	34fe <_vfiprintf_r+0x1aa>
    3426:	2800      	cmp	r0, #0
    3428:	d02a      	beq.n	3480 <_vfiprintf_r+0x12c>
    342a:	9309      	str	r3, [sp, #36]	; 0x24
    342c:	e028      	b.n	3480 <_vfiprintf_r+0x12c>
    342e:	4b51      	ldr	r3, [pc, #324]	; (3574 <_vfiprintf_r+0x220>)
    3430:	429f      	cmp	r7, r3
    3432:	d101      	bne.n	3438 <_vfiprintf_r+0xe4>
    3434:	68b7      	ldr	r7, [r6, #8]
    3436:	e79e      	b.n	3376 <_vfiprintf_r+0x22>
    3438:	4b4f      	ldr	r3, [pc, #316]	; (3578 <_vfiprintf_r+0x224>)
    343a:	429f      	cmp	r7, r3
    343c:	d19b      	bne.n	3376 <_vfiprintf_r+0x22>
    343e:	68f7      	ldr	r7, [r6, #12]
    3440:	e799      	b.n	3376 <_vfiprintf_r+0x22>
    3442:	0039      	movs	r1, r7
    3444:	0030      	movs	r0, r6
    3446:	f7ff fc3b 	bl	2cc0 <__swsetup_r>
    344a:	2800      	cmp	r0, #0
    344c:	d099      	beq.n	3382 <_vfiprintf_r+0x2e>
    344e:	2001      	movs	r0, #1
    3450:	4240      	negs	r0, r0
    3452:	b01f      	add	sp, #124	; 0x7c
    3454:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3456:	2b25      	cmp	r3, #37	; 0x25
    3458:	d09f      	beq.n	339a <_vfiprintf_r+0x46>
    345a:	3401      	adds	r4, #1
    345c:	e79a      	b.n	3394 <_vfiprintf_r+0x40>
    345e:	4b44      	ldr	r3, [pc, #272]	; (3570 <_vfiprintf_r+0x21c>)
    3460:	6829      	ldr	r1, [r5, #0]
    3462:	1ac0      	subs	r0, r0, r3
    3464:	2301      	movs	r3, #1
    3466:	4083      	lsls	r3, r0
    3468:	430b      	orrs	r3, r1
    346a:	602b      	str	r3, [r5, #0]
    346c:	4664      	mov	r4, ip
    346e:	e7b7      	b.n	33e0 <_vfiprintf_r+0x8c>
    3470:	9b05      	ldr	r3, [sp, #20]
    3472:	1d18      	adds	r0, r3, #4
    3474:	681b      	ldr	r3, [r3, #0]
    3476:	9005      	str	r0, [sp, #20]
    3478:	2b00      	cmp	r3, #0
    347a:	db3a      	blt.n	34f2 <_vfiprintf_r+0x19e>
    347c:	9309      	str	r3, [sp, #36]	; 0x24
    347e:	4664      	mov	r4, ip
    3480:	7823      	ldrb	r3, [r4, #0]
    3482:	2b2e      	cmp	r3, #46	; 0x2e
    3484:	d10b      	bne.n	349e <_vfiprintf_r+0x14a>
    3486:	7863      	ldrb	r3, [r4, #1]
    3488:	1c62      	adds	r2, r4, #1
    348a:	2b2a      	cmp	r3, #42	; 0x2a
    348c:	d13f      	bne.n	350e <_vfiprintf_r+0x1ba>
    348e:	9b05      	ldr	r3, [sp, #20]
    3490:	3402      	adds	r4, #2
    3492:	1d1a      	adds	r2, r3, #4
    3494:	681b      	ldr	r3, [r3, #0]
    3496:	9205      	str	r2, [sp, #20]
    3498:	2b00      	cmp	r3, #0
    349a:	db35      	blt.n	3508 <_vfiprintf_r+0x1b4>
    349c:	9307      	str	r3, [sp, #28]
    349e:	7821      	ldrb	r1, [r4, #0]
    34a0:	2203      	movs	r2, #3
    34a2:	4836      	ldr	r0, [pc, #216]	; (357c <_vfiprintf_r+0x228>)
    34a4:	f000 fab6 	bl	3a14 <memchr>
    34a8:	2800      	cmp	r0, #0
    34aa:	d007      	beq.n	34bc <_vfiprintf_r+0x168>
    34ac:	4b33      	ldr	r3, [pc, #204]	; (357c <_vfiprintf_r+0x228>)
    34ae:	682a      	ldr	r2, [r5, #0]
    34b0:	1ac0      	subs	r0, r0, r3
    34b2:	2340      	movs	r3, #64	; 0x40
    34b4:	4083      	lsls	r3, r0
    34b6:	4313      	orrs	r3, r2
    34b8:	602b      	str	r3, [r5, #0]
    34ba:	3401      	adds	r4, #1
    34bc:	7821      	ldrb	r1, [r4, #0]
    34be:	1c63      	adds	r3, r4, #1
    34c0:	2206      	movs	r2, #6
    34c2:	482f      	ldr	r0, [pc, #188]	; (3580 <_vfiprintf_r+0x22c>)
    34c4:	9302      	str	r3, [sp, #8]
    34c6:	7629      	strb	r1, [r5, #24]
    34c8:	f000 faa4 	bl	3a14 <memchr>
    34cc:	2800      	cmp	r0, #0
    34ce:	d044      	beq.n	355a <_vfiprintf_r+0x206>
    34d0:	4b2c      	ldr	r3, [pc, #176]	; (3584 <_vfiprintf_r+0x230>)
    34d2:	2b00      	cmp	r3, #0
    34d4:	d12f      	bne.n	3536 <_vfiprintf_r+0x1e2>
    34d6:	6829      	ldr	r1, [r5, #0]
    34d8:	9b05      	ldr	r3, [sp, #20]
    34da:	2207      	movs	r2, #7
    34dc:	05c9      	lsls	r1, r1, #23
    34de:	d528      	bpl.n	3532 <_vfiprintf_r+0x1de>
    34e0:	189b      	adds	r3, r3, r2
    34e2:	4393      	bics	r3, r2
    34e4:	3308      	adds	r3, #8
    34e6:	9305      	str	r3, [sp, #20]
    34e8:	696b      	ldr	r3, [r5, #20]
    34ea:	9a03      	ldr	r2, [sp, #12]
    34ec:	189b      	adds	r3, r3, r2
    34ee:	616b      	str	r3, [r5, #20]
    34f0:	e74f      	b.n	3392 <_vfiprintf_r+0x3e>
    34f2:	425b      	negs	r3, r3
    34f4:	60eb      	str	r3, [r5, #12]
    34f6:	2302      	movs	r3, #2
    34f8:	430b      	orrs	r3, r1
    34fa:	602b      	str	r3, [r5, #0]
    34fc:	e7bf      	b.n	347e <_vfiprintf_r+0x12a>
    34fe:	434b      	muls	r3, r1
    3500:	3401      	adds	r4, #1
    3502:	189b      	adds	r3, r3, r2
    3504:	2001      	movs	r0, #1
    3506:	e789      	b.n	341c <_vfiprintf_r+0xc8>
    3508:	2301      	movs	r3, #1
    350a:	425b      	negs	r3, r3
    350c:	e7c6      	b.n	349c <_vfiprintf_r+0x148>
    350e:	2300      	movs	r3, #0
    3510:	0014      	movs	r4, r2
    3512:	200a      	movs	r0, #10
    3514:	001a      	movs	r2, r3
    3516:	606b      	str	r3, [r5, #4]
    3518:	7821      	ldrb	r1, [r4, #0]
    351a:	3930      	subs	r1, #48	; 0x30
    351c:	2909      	cmp	r1, #9
    351e:	d903      	bls.n	3528 <_vfiprintf_r+0x1d4>
    3520:	2b00      	cmp	r3, #0
    3522:	d0bc      	beq.n	349e <_vfiprintf_r+0x14a>
    3524:	9207      	str	r2, [sp, #28]
    3526:	e7ba      	b.n	349e <_vfiprintf_r+0x14a>
    3528:	4342      	muls	r2, r0
    352a:	3401      	adds	r4, #1
    352c:	1852      	adds	r2, r2, r1
    352e:	2301      	movs	r3, #1
    3530:	e7f2      	b.n	3518 <_vfiprintf_r+0x1c4>
    3532:	3307      	adds	r3, #7
    3534:	e7d5      	b.n	34e2 <_vfiprintf_r+0x18e>
    3536:	ab05      	add	r3, sp, #20
    3538:	9300      	str	r3, [sp, #0]
    353a:	003a      	movs	r2, r7
    353c:	4b12      	ldr	r3, [pc, #72]	; (3588 <_vfiprintf_r+0x234>)
    353e:	0029      	movs	r1, r5
    3540:	0030      	movs	r0, r6
    3542:	e000      	b.n	3546 <_vfiprintf_r+0x1f2>
    3544:	bf00      	nop
    3546:	9003      	str	r0, [sp, #12]
    3548:	9b03      	ldr	r3, [sp, #12]
    354a:	3301      	adds	r3, #1
    354c:	d1cc      	bne.n	34e8 <_vfiprintf_r+0x194>
    354e:	89bb      	ldrh	r3, [r7, #12]
    3550:	065b      	lsls	r3, r3, #25
    3552:	d500      	bpl.n	3556 <_vfiprintf_r+0x202>
    3554:	e77b      	b.n	344e <_vfiprintf_r+0xfa>
    3556:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3558:	e77b      	b.n	3452 <_vfiprintf_r+0xfe>
    355a:	ab05      	add	r3, sp, #20
    355c:	9300      	str	r3, [sp, #0]
    355e:	003a      	movs	r2, r7
    3560:	4b09      	ldr	r3, [pc, #36]	; (3588 <_vfiprintf_r+0x234>)
    3562:	0029      	movs	r1, r5
    3564:	0030      	movs	r0, r6
    3566:	f000 f87f 	bl	3668 <_printf_i>
    356a:	e7ec      	b.n	3546 <_vfiprintf_r+0x1f2>
    356c:	00003bd0 	.word	0x00003bd0
    3570:	00003c10 	.word	0x00003c10
    3574:	00003bf0 	.word	0x00003bf0
    3578:	00003bb0 	.word	0x00003bb0
    357c:	00003c16 	.word	0x00003c16
    3580:	00003c1a 	.word	0x00003c1a
    3584:	00000000 	.word	0x00000000
    3588:	0000332f 	.word	0x0000332f

0000358c <_printf_common>:
    358c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    358e:	0015      	movs	r5, r2
    3590:	9301      	str	r3, [sp, #4]
    3592:	688a      	ldr	r2, [r1, #8]
    3594:	690b      	ldr	r3, [r1, #16]
    3596:	9000      	str	r0, [sp, #0]
    3598:	000c      	movs	r4, r1
    359a:	4293      	cmp	r3, r2
    359c:	da00      	bge.n	35a0 <_printf_common+0x14>
    359e:	0013      	movs	r3, r2
    35a0:	0022      	movs	r2, r4
    35a2:	602b      	str	r3, [r5, #0]
    35a4:	3243      	adds	r2, #67	; 0x43
    35a6:	7812      	ldrb	r2, [r2, #0]
    35a8:	2a00      	cmp	r2, #0
    35aa:	d001      	beq.n	35b0 <_printf_common+0x24>
    35ac:	3301      	adds	r3, #1
    35ae:	602b      	str	r3, [r5, #0]
    35b0:	6823      	ldr	r3, [r4, #0]
    35b2:	069b      	lsls	r3, r3, #26
    35b4:	d502      	bpl.n	35bc <_printf_common+0x30>
    35b6:	682b      	ldr	r3, [r5, #0]
    35b8:	3302      	adds	r3, #2
    35ba:	602b      	str	r3, [r5, #0]
    35bc:	2706      	movs	r7, #6
    35be:	6823      	ldr	r3, [r4, #0]
    35c0:	401f      	ands	r7, r3
    35c2:	d027      	beq.n	3614 <_printf_common+0x88>
    35c4:	0023      	movs	r3, r4
    35c6:	3343      	adds	r3, #67	; 0x43
    35c8:	781b      	ldrb	r3, [r3, #0]
    35ca:	1e5a      	subs	r2, r3, #1
    35cc:	4193      	sbcs	r3, r2
    35ce:	6822      	ldr	r2, [r4, #0]
    35d0:	0692      	lsls	r2, r2, #26
    35d2:	d430      	bmi.n	3636 <_printf_common+0xaa>
    35d4:	0022      	movs	r2, r4
    35d6:	9901      	ldr	r1, [sp, #4]
    35d8:	3243      	adds	r2, #67	; 0x43
    35da:	9800      	ldr	r0, [sp, #0]
    35dc:	9e08      	ldr	r6, [sp, #32]
    35de:	47b0      	blx	r6
    35e0:	1c43      	adds	r3, r0, #1
    35e2:	d025      	beq.n	3630 <_printf_common+0xa4>
    35e4:	2306      	movs	r3, #6
    35e6:	6820      	ldr	r0, [r4, #0]
    35e8:	682a      	ldr	r2, [r5, #0]
    35ea:	68e1      	ldr	r1, [r4, #12]
    35ec:	4003      	ands	r3, r0
    35ee:	2500      	movs	r5, #0
    35f0:	2b04      	cmp	r3, #4
    35f2:	d103      	bne.n	35fc <_printf_common+0x70>
    35f4:	1a8d      	subs	r5, r1, r2
    35f6:	43eb      	mvns	r3, r5
    35f8:	17db      	asrs	r3, r3, #31
    35fa:	401d      	ands	r5, r3
    35fc:	68a3      	ldr	r3, [r4, #8]
    35fe:	6922      	ldr	r2, [r4, #16]
    3600:	4293      	cmp	r3, r2
    3602:	dd01      	ble.n	3608 <_printf_common+0x7c>
    3604:	1a9b      	subs	r3, r3, r2
    3606:	18ed      	adds	r5, r5, r3
    3608:	2700      	movs	r7, #0
    360a:	42bd      	cmp	r5, r7
    360c:	d120      	bne.n	3650 <_printf_common+0xc4>
    360e:	2000      	movs	r0, #0
    3610:	e010      	b.n	3634 <_printf_common+0xa8>
    3612:	3701      	adds	r7, #1
    3614:	68e3      	ldr	r3, [r4, #12]
    3616:	682a      	ldr	r2, [r5, #0]
    3618:	1a9b      	subs	r3, r3, r2
    361a:	429f      	cmp	r7, r3
    361c:	dad2      	bge.n	35c4 <_printf_common+0x38>
    361e:	0022      	movs	r2, r4
    3620:	2301      	movs	r3, #1
    3622:	3219      	adds	r2, #25
    3624:	9901      	ldr	r1, [sp, #4]
    3626:	9800      	ldr	r0, [sp, #0]
    3628:	9e08      	ldr	r6, [sp, #32]
    362a:	47b0      	blx	r6
    362c:	1c43      	adds	r3, r0, #1
    362e:	d1f0      	bne.n	3612 <_printf_common+0x86>
    3630:	2001      	movs	r0, #1
    3632:	4240      	negs	r0, r0
    3634:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3636:	2030      	movs	r0, #48	; 0x30
    3638:	18e1      	adds	r1, r4, r3
    363a:	3143      	adds	r1, #67	; 0x43
    363c:	7008      	strb	r0, [r1, #0]
    363e:	0021      	movs	r1, r4
    3640:	1c5a      	adds	r2, r3, #1
    3642:	3145      	adds	r1, #69	; 0x45
    3644:	7809      	ldrb	r1, [r1, #0]
    3646:	18a2      	adds	r2, r4, r2
    3648:	3243      	adds	r2, #67	; 0x43
    364a:	3302      	adds	r3, #2
    364c:	7011      	strb	r1, [r2, #0]
    364e:	e7c1      	b.n	35d4 <_printf_common+0x48>
    3650:	0022      	movs	r2, r4
    3652:	2301      	movs	r3, #1
    3654:	321a      	adds	r2, #26
    3656:	9901      	ldr	r1, [sp, #4]
    3658:	9800      	ldr	r0, [sp, #0]
    365a:	9e08      	ldr	r6, [sp, #32]
    365c:	47b0      	blx	r6
    365e:	1c43      	adds	r3, r0, #1
    3660:	d0e6      	beq.n	3630 <_printf_common+0xa4>
    3662:	3701      	adds	r7, #1
    3664:	e7d1      	b.n	360a <_printf_common+0x7e>
	...

00003668 <_printf_i>:
    3668:	b5f0      	push	{r4, r5, r6, r7, lr}
    366a:	b08b      	sub	sp, #44	; 0x2c
    366c:	9206      	str	r2, [sp, #24]
    366e:	000a      	movs	r2, r1
    3670:	3243      	adds	r2, #67	; 0x43
    3672:	9307      	str	r3, [sp, #28]
    3674:	9005      	str	r0, [sp, #20]
    3676:	9204      	str	r2, [sp, #16]
    3678:	7e0a      	ldrb	r2, [r1, #24]
    367a:	000c      	movs	r4, r1
    367c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    367e:	2a6e      	cmp	r2, #110	; 0x6e
    3680:	d100      	bne.n	3684 <_printf_i+0x1c>
    3682:	e08f      	b.n	37a4 <_printf_i+0x13c>
    3684:	d817      	bhi.n	36b6 <_printf_i+0x4e>
    3686:	2a63      	cmp	r2, #99	; 0x63
    3688:	d02c      	beq.n	36e4 <_printf_i+0x7c>
    368a:	d808      	bhi.n	369e <_printf_i+0x36>
    368c:	2a00      	cmp	r2, #0
    368e:	d100      	bne.n	3692 <_printf_i+0x2a>
    3690:	e099      	b.n	37c6 <_printf_i+0x15e>
    3692:	2a58      	cmp	r2, #88	; 0x58
    3694:	d054      	beq.n	3740 <_printf_i+0xd8>
    3696:	0026      	movs	r6, r4
    3698:	3642      	adds	r6, #66	; 0x42
    369a:	7032      	strb	r2, [r6, #0]
    369c:	e029      	b.n	36f2 <_printf_i+0x8a>
    369e:	2a64      	cmp	r2, #100	; 0x64
    36a0:	d001      	beq.n	36a6 <_printf_i+0x3e>
    36a2:	2a69      	cmp	r2, #105	; 0x69
    36a4:	d1f7      	bne.n	3696 <_printf_i+0x2e>
    36a6:	6821      	ldr	r1, [r4, #0]
    36a8:	681a      	ldr	r2, [r3, #0]
    36aa:	0608      	lsls	r0, r1, #24
    36ac:	d523      	bpl.n	36f6 <_printf_i+0x8e>
    36ae:	1d11      	adds	r1, r2, #4
    36b0:	6019      	str	r1, [r3, #0]
    36b2:	6815      	ldr	r5, [r2, #0]
    36b4:	e025      	b.n	3702 <_printf_i+0x9a>
    36b6:	2a73      	cmp	r2, #115	; 0x73
    36b8:	d100      	bne.n	36bc <_printf_i+0x54>
    36ba:	e088      	b.n	37ce <_printf_i+0x166>
    36bc:	d808      	bhi.n	36d0 <_printf_i+0x68>
    36be:	2a6f      	cmp	r2, #111	; 0x6f
    36c0:	d029      	beq.n	3716 <_printf_i+0xae>
    36c2:	2a70      	cmp	r2, #112	; 0x70
    36c4:	d1e7      	bne.n	3696 <_printf_i+0x2e>
    36c6:	2220      	movs	r2, #32
    36c8:	6809      	ldr	r1, [r1, #0]
    36ca:	430a      	orrs	r2, r1
    36cc:	6022      	str	r2, [r4, #0]
    36ce:	e003      	b.n	36d8 <_printf_i+0x70>
    36d0:	2a75      	cmp	r2, #117	; 0x75
    36d2:	d020      	beq.n	3716 <_printf_i+0xae>
    36d4:	2a78      	cmp	r2, #120	; 0x78
    36d6:	d1de      	bne.n	3696 <_printf_i+0x2e>
    36d8:	0022      	movs	r2, r4
    36da:	2178      	movs	r1, #120	; 0x78
    36dc:	3245      	adds	r2, #69	; 0x45
    36de:	7011      	strb	r1, [r2, #0]
    36e0:	4a6c      	ldr	r2, [pc, #432]	; (3894 <_printf_i+0x22c>)
    36e2:	e030      	b.n	3746 <_printf_i+0xde>
    36e4:	000e      	movs	r6, r1
    36e6:	681a      	ldr	r2, [r3, #0]
    36e8:	3642      	adds	r6, #66	; 0x42
    36ea:	1d11      	adds	r1, r2, #4
    36ec:	6019      	str	r1, [r3, #0]
    36ee:	6813      	ldr	r3, [r2, #0]
    36f0:	7033      	strb	r3, [r6, #0]
    36f2:	2301      	movs	r3, #1
    36f4:	e079      	b.n	37ea <_printf_i+0x182>
    36f6:	0649      	lsls	r1, r1, #25
    36f8:	d5d9      	bpl.n	36ae <_printf_i+0x46>
    36fa:	1d11      	adds	r1, r2, #4
    36fc:	6019      	str	r1, [r3, #0]
    36fe:	2300      	movs	r3, #0
    3700:	5ed5      	ldrsh	r5, [r2, r3]
    3702:	2d00      	cmp	r5, #0
    3704:	da03      	bge.n	370e <_printf_i+0xa6>
    3706:	232d      	movs	r3, #45	; 0x2d
    3708:	9a04      	ldr	r2, [sp, #16]
    370a:	426d      	negs	r5, r5
    370c:	7013      	strb	r3, [r2, #0]
    370e:	4b62      	ldr	r3, [pc, #392]	; (3898 <_printf_i+0x230>)
    3710:	270a      	movs	r7, #10
    3712:	9303      	str	r3, [sp, #12]
    3714:	e02f      	b.n	3776 <_printf_i+0x10e>
    3716:	6820      	ldr	r0, [r4, #0]
    3718:	6819      	ldr	r1, [r3, #0]
    371a:	0605      	lsls	r5, r0, #24
    371c:	d503      	bpl.n	3726 <_printf_i+0xbe>
    371e:	1d08      	adds	r0, r1, #4
    3720:	6018      	str	r0, [r3, #0]
    3722:	680d      	ldr	r5, [r1, #0]
    3724:	e005      	b.n	3732 <_printf_i+0xca>
    3726:	0640      	lsls	r0, r0, #25
    3728:	d5f9      	bpl.n	371e <_printf_i+0xb6>
    372a:	680d      	ldr	r5, [r1, #0]
    372c:	1d08      	adds	r0, r1, #4
    372e:	6018      	str	r0, [r3, #0]
    3730:	b2ad      	uxth	r5, r5
    3732:	4b59      	ldr	r3, [pc, #356]	; (3898 <_printf_i+0x230>)
    3734:	2708      	movs	r7, #8
    3736:	9303      	str	r3, [sp, #12]
    3738:	2a6f      	cmp	r2, #111	; 0x6f
    373a:	d018      	beq.n	376e <_printf_i+0x106>
    373c:	270a      	movs	r7, #10
    373e:	e016      	b.n	376e <_printf_i+0x106>
    3740:	3145      	adds	r1, #69	; 0x45
    3742:	700a      	strb	r2, [r1, #0]
    3744:	4a54      	ldr	r2, [pc, #336]	; (3898 <_printf_i+0x230>)
    3746:	9203      	str	r2, [sp, #12]
    3748:	681a      	ldr	r2, [r3, #0]
    374a:	6821      	ldr	r1, [r4, #0]
    374c:	1d10      	adds	r0, r2, #4
    374e:	6018      	str	r0, [r3, #0]
    3750:	6815      	ldr	r5, [r2, #0]
    3752:	0608      	lsls	r0, r1, #24
    3754:	d522      	bpl.n	379c <_printf_i+0x134>
    3756:	07cb      	lsls	r3, r1, #31
    3758:	d502      	bpl.n	3760 <_printf_i+0xf8>
    375a:	2320      	movs	r3, #32
    375c:	4319      	orrs	r1, r3
    375e:	6021      	str	r1, [r4, #0]
    3760:	2710      	movs	r7, #16
    3762:	2d00      	cmp	r5, #0
    3764:	d103      	bne.n	376e <_printf_i+0x106>
    3766:	2320      	movs	r3, #32
    3768:	6822      	ldr	r2, [r4, #0]
    376a:	439a      	bics	r2, r3
    376c:	6022      	str	r2, [r4, #0]
    376e:	0023      	movs	r3, r4
    3770:	2200      	movs	r2, #0
    3772:	3343      	adds	r3, #67	; 0x43
    3774:	701a      	strb	r2, [r3, #0]
    3776:	6863      	ldr	r3, [r4, #4]
    3778:	60a3      	str	r3, [r4, #8]
    377a:	2b00      	cmp	r3, #0
    377c:	db5c      	blt.n	3838 <_printf_i+0x1d0>
    377e:	2204      	movs	r2, #4
    3780:	6821      	ldr	r1, [r4, #0]
    3782:	4391      	bics	r1, r2
    3784:	6021      	str	r1, [r4, #0]
    3786:	2d00      	cmp	r5, #0
    3788:	d158      	bne.n	383c <_printf_i+0x1d4>
    378a:	9e04      	ldr	r6, [sp, #16]
    378c:	2b00      	cmp	r3, #0
    378e:	d064      	beq.n	385a <_printf_i+0x1f2>
    3790:	0026      	movs	r6, r4
    3792:	9b03      	ldr	r3, [sp, #12]
    3794:	3642      	adds	r6, #66	; 0x42
    3796:	781b      	ldrb	r3, [r3, #0]
    3798:	7033      	strb	r3, [r6, #0]
    379a:	e05e      	b.n	385a <_printf_i+0x1f2>
    379c:	0648      	lsls	r0, r1, #25
    379e:	d5da      	bpl.n	3756 <_printf_i+0xee>
    37a0:	b2ad      	uxth	r5, r5
    37a2:	e7d8      	b.n	3756 <_printf_i+0xee>
    37a4:	6809      	ldr	r1, [r1, #0]
    37a6:	681a      	ldr	r2, [r3, #0]
    37a8:	0608      	lsls	r0, r1, #24
    37aa:	d505      	bpl.n	37b8 <_printf_i+0x150>
    37ac:	1d11      	adds	r1, r2, #4
    37ae:	6019      	str	r1, [r3, #0]
    37b0:	6813      	ldr	r3, [r2, #0]
    37b2:	6962      	ldr	r2, [r4, #20]
    37b4:	601a      	str	r2, [r3, #0]
    37b6:	e006      	b.n	37c6 <_printf_i+0x15e>
    37b8:	0649      	lsls	r1, r1, #25
    37ba:	d5f7      	bpl.n	37ac <_printf_i+0x144>
    37bc:	1d11      	adds	r1, r2, #4
    37be:	6019      	str	r1, [r3, #0]
    37c0:	6813      	ldr	r3, [r2, #0]
    37c2:	8aa2      	ldrh	r2, [r4, #20]
    37c4:	801a      	strh	r2, [r3, #0]
    37c6:	2300      	movs	r3, #0
    37c8:	9e04      	ldr	r6, [sp, #16]
    37ca:	6123      	str	r3, [r4, #16]
    37cc:	e054      	b.n	3878 <_printf_i+0x210>
    37ce:	681a      	ldr	r2, [r3, #0]
    37d0:	1d11      	adds	r1, r2, #4
    37d2:	6019      	str	r1, [r3, #0]
    37d4:	6816      	ldr	r6, [r2, #0]
    37d6:	2100      	movs	r1, #0
    37d8:	6862      	ldr	r2, [r4, #4]
    37da:	0030      	movs	r0, r6
    37dc:	f000 f91a 	bl	3a14 <memchr>
    37e0:	2800      	cmp	r0, #0
    37e2:	d001      	beq.n	37e8 <_printf_i+0x180>
    37e4:	1b80      	subs	r0, r0, r6
    37e6:	6060      	str	r0, [r4, #4]
    37e8:	6863      	ldr	r3, [r4, #4]
    37ea:	6123      	str	r3, [r4, #16]
    37ec:	2300      	movs	r3, #0
    37ee:	9a04      	ldr	r2, [sp, #16]
    37f0:	7013      	strb	r3, [r2, #0]
    37f2:	e041      	b.n	3878 <_printf_i+0x210>
    37f4:	6923      	ldr	r3, [r4, #16]
    37f6:	0032      	movs	r2, r6
    37f8:	9906      	ldr	r1, [sp, #24]
    37fa:	9805      	ldr	r0, [sp, #20]
    37fc:	9d07      	ldr	r5, [sp, #28]
    37fe:	47a8      	blx	r5
    3800:	1c43      	adds	r3, r0, #1
    3802:	d043      	beq.n	388c <_printf_i+0x224>
    3804:	6823      	ldr	r3, [r4, #0]
    3806:	2500      	movs	r5, #0
    3808:	079b      	lsls	r3, r3, #30
    380a:	d40f      	bmi.n	382c <_printf_i+0x1c4>
    380c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    380e:	68e0      	ldr	r0, [r4, #12]
    3810:	4298      	cmp	r0, r3
    3812:	da3d      	bge.n	3890 <_printf_i+0x228>
    3814:	0018      	movs	r0, r3
    3816:	e03b      	b.n	3890 <_printf_i+0x228>
    3818:	0022      	movs	r2, r4
    381a:	2301      	movs	r3, #1
    381c:	3219      	adds	r2, #25
    381e:	9906      	ldr	r1, [sp, #24]
    3820:	9805      	ldr	r0, [sp, #20]
    3822:	9e07      	ldr	r6, [sp, #28]
    3824:	47b0      	blx	r6
    3826:	1c43      	adds	r3, r0, #1
    3828:	d030      	beq.n	388c <_printf_i+0x224>
    382a:	3501      	adds	r5, #1
    382c:	68e3      	ldr	r3, [r4, #12]
    382e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3830:	1a9b      	subs	r3, r3, r2
    3832:	429d      	cmp	r5, r3
    3834:	dbf0      	blt.n	3818 <_printf_i+0x1b0>
    3836:	e7e9      	b.n	380c <_printf_i+0x1a4>
    3838:	2d00      	cmp	r5, #0
    383a:	d0a9      	beq.n	3790 <_printf_i+0x128>
    383c:	9e04      	ldr	r6, [sp, #16]
    383e:	0028      	movs	r0, r5
    3840:	0039      	movs	r1, r7
    3842:	f7ff f851 	bl	28e8 <__aeabi_uidivmod>
    3846:	9b03      	ldr	r3, [sp, #12]
    3848:	3e01      	subs	r6, #1
    384a:	5c5b      	ldrb	r3, [r3, r1]
    384c:	0028      	movs	r0, r5
    384e:	7033      	strb	r3, [r6, #0]
    3850:	0039      	movs	r1, r7
    3852:	f7fe ffc3 	bl	27dc <__udivsi3>
    3856:	1e05      	subs	r5, r0, #0
    3858:	d1f1      	bne.n	383e <_printf_i+0x1d6>
    385a:	2f08      	cmp	r7, #8
    385c:	d109      	bne.n	3872 <_printf_i+0x20a>
    385e:	6823      	ldr	r3, [r4, #0]
    3860:	07db      	lsls	r3, r3, #31
    3862:	d506      	bpl.n	3872 <_printf_i+0x20a>
    3864:	6863      	ldr	r3, [r4, #4]
    3866:	6922      	ldr	r2, [r4, #16]
    3868:	4293      	cmp	r3, r2
    386a:	dc02      	bgt.n	3872 <_printf_i+0x20a>
    386c:	2330      	movs	r3, #48	; 0x30
    386e:	3e01      	subs	r6, #1
    3870:	7033      	strb	r3, [r6, #0]
    3872:	9b04      	ldr	r3, [sp, #16]
    3874:	1b9b      	subs	r3, r3, r6
    3876:	6123      	str	r3, [r4, #16]
    3878:	9b07      	ldr	r3, [sp, #28]
    387a:	aa09      	add	r2, sp, #36	; 0x24
    387c:	9300      	str	r3, [sp, #0]
    387e:	0021      	movs	r1, r4
    3880:	9b06      	ldr	r3, [sp, #24]
    3882:	9805      	ldr	r0, [sp, #20]
    3884:	f7ff fe82 	bl	358c <_printf_common>
    3888:	1c43      	adds	r3, r0, #1
    388a:	d1b3      	bne.n	37f4 <_printf_i+0x18c>
    388c:	2001      	movs	r0, #1
    388e:	4240      	negs	r0, r0
    3890:	b00b      	add	sp, #44	; 0x2c
    3892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3894:	00003c32 	.word	0x00003c32
    3898:	00003c21 	.word	0x00003c21

0000389c <_sbrk_r>:
    389c:	2300      	movs	r3, #0
    389e:	b570      	push	{r4, r5, r6, lr}
    38a0:	4c06      	ldr	r4, [pc, #24]	; (38bc <_sbrk_r+0x20>)
    38a2:	0005      	movs	r5, r0
    38a4:	0008      	movs	r0, r1
    38a6:	6023      	str	r3, [r4, #0]
    38a8:	f7fe fda0 	bl	23ec <_sbrk>
    38ac:	1c43      	adds	r3, r0, #1
    38ae:	d103      	bne.n	38b8 <_sbrk_r+0x1c>
    38b0:	6823      	ldr	r3, [r4, #0]
    38b2:	2b00      	cmp	r3, #0
    38b4:	d000      	beq.n	38b8 <_sbrk_r+0x1c>
    38b6:	602b      	str	r3, [r5, #0]
    38b8:	bd70      	pop	{r4, r5, r6, pc}
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	200001e8 	.word	0x200001e8

000038c0 <__sread>:
    38c0:	b570      	push	{r4, r5, r6, lr}
    38c2:	000c      	movs	r4, r1
    38c4:	250e      	movs	r5, #14
    38c6:	5f49      	ldrsh	r1, [r1, r5]
    38c8:	f000 f8b2 	bl	3a30 <_read_r>
    38cc:	2800      	cmp	r0, #0
    38ce:	db03      	blt.n	38d8 <__sread+0x18>
    38d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    38d2:	181b      	adds	r3, r3, r0
    38d4:	6563      	str	r3, [r4, #84]	; 0x54
    38d6:	bd70      	pop	{r4, r5, r6, pc}
    38d8:	89a3      	ldrh	r3, [r4, #12]
    38da:	4a02      	ldr	r2, [pc, #8]	; (38e4 <__sread+0x24>)
    38dc:	4013      	ands	r3, r2
    38de:	81a3      	strh	r3, [r4, #12]
    38e0:	e7f9      	b.n	38d6 <__sread+0x16>
    38e2:	46c0      	nop			; (mov r8, r8)
    38e4:	ffffefff 	.word	0xffffefff

000038e8 <__swrite>:
    38e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ea:	001f      	movs	r7, r3
    38ec:	898b      	ldrh	r3, [r1, #12]
    38ee:	0005      	movs	r5, r0
    38f0:	000c      	movs	r4, r1
    38f2:	0016      	movs	r6, r2
    38f4:	05db      	lsls	r3, r3, #23
    38f6:	d505      	bpl.n	3904 <__swrite+0x1c>
    38f8:	230e      	movs	r3, #14
    38fa:	5ec9      	ldrsh	r1, [r1, r3]
    38fc:	2200      	movs	r2, #0
    38fe:	2302      	movs	r3, #2
    3900:	f000 f874 	bl	39ec <_lseek_r>
    3904:	89a3      	ldrh	r3, [r4, #12]
    3906:	4a05      	ldr	r2, [pc, #20]	; (391c <__swrite+0x34>)
    3908:	0028      	movs	r0, r5
    390a:	4013      	ands	r3, r2
    390c:	81a3      	strh	r3, [r4, #12]
    390e:	0032      	movs	r2, r6
    3910:	230e      	movs	r3, #14
    3912:	5ee1      	ldrsh	r1, [r4, r3]
    3914:	003b      	movs	r3, r7
    3916:	f000 f81f 	bl	3958 <_write_r>
    391a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    391c:	ffffefff 	.word	0xffffefff

00003920 <__sseek>:
    3920:	b570      	push	{r4, r5, r6, lr}
    3922:	000c      	movs	r4, r1
    3924:	250e      	movs	r5, #14
    3926:	5f49      	ldrsh	r1, [r1, r5]
    3928:	f000 f860 	bl	39ec <_lseek_r>
    392c:	89a3      	ldrh	r3, [r4, #12]
    392e:	1c42      	adds	r2, r0, #1
    3930:	d103      	bne.n	393a <__sseek+0x1a>
    3932:	4a05      	ldr	r2, [pc, #20]	; (3948 <__sseek+0x28>)
    3934:	4013      	ands	r3, r2
    3936:	81a3      	strh	r3, [r4, #12]
    3938:	bd70      	pop	{r4, r5, r6, pc}
    393a:	2280      	movs	r2, #128	; 0x80
    393c:	0152      	lsls	r2, r2, #5
    393e:	4313      	orrs	r3, r2
    3940:	81a3      	strh	r3, [r4, #12]
    3942:	6560      	str	r0, [r4, #84]	; 0x54
    3944:	e7f8      	b.n	3938 <__sseek+0x18>
    3946:	46c0      	nop			; (mov r8, r8)
    3948:	ffffefff 	.word	0xffffefff

0000394c <__sclose>:
    394c:	b510      	push	{r4, lr}
    394e:	230e      	movs	r3, #14
    3950:	5ec9      	ldrsh	r1, [r1, r3]
    3952:	f000 f815 	bl	3980 <_close_r>
    3956:	bd10      	pop	{r4, pc}

00003958 <_write_r>:
    3958:	b570      	push	{r4, r5, r6, lr}
    395a:	0005      	movs	r5, r0
    395c:	0008      	movs	r0, r1
    395e:	0011      	movs	r1, r2
    3960:	2200      	movs	r2, #0
    3962:	4c06      	ldr	r4, [pc, #24]	; (397c <_write_r+0x24>)
    3964:	6022      	str	r2, [r4, #0]
    3966:	001a      	movs	r2, r3
    3968:	f7fe fd18 	bl	239c <_write>
    396c:	1c43      	adds	r3, r0, #1
    396e:	d103      	bne.n	3978 <_write_r+0x20>
    3970:	6823      	ldr	r3, [r4, #0]
    3972:	2b00      	cmp	r3, #0
    3974:	d000      	beq.n	3978 <_write_r+0x20>
    3976:	602b      	str	r3, [r5, #0]
    3978:	bd70      	pop	{r4, r5, r6, pc}
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	200001e8 	.word	0x200001e8

00003980 <_close_r>:
    3980:	2300      	movs	r3, #0
    3982:	b570      	push	{r4, r5, r6, lr}
    3984:	4c06      	ldr	r4, [pc, #24]	; (39a0 <_close_r+0x20>)
    3986:	0005      	movs	r5, r0
    3988:	0008      	movs	r0, r1
    398a:	6023      	str	r3, [r4, #0]
    398c:	f7fe fd40 	bl	2410 <_close>
    3990:	1c43      	adds	r3, r0, #1
    3992:	d103      	bne.n	399c <_close_r+0x1c>
    3994:	6823      	ldr	r3, [r4, #0]
    3996:	2b00      	cmp	r3, #0
    3998:	d000      	beq.n	399c <_close_r+0x1c>
    399a:	602b      	str	r3, [r5, #0]
    399c:	bd70      	pop	{r4, r5, r6, pc}
    399e:	46c0      	nop			; (mov r8, r8)
    39a0:	200001e8 	.word	0x200001e8

000039a4 <_fstat_r>:
    39a4:	2300      	movs	r3, #0
    39a6:	b570      	push	{r4, r5, r6, lr}
    39a8:	4c06      	ldr	r4, [pc, #24]	; (39c4 <_fstat_r+0x20>)
    39aa:	0005      	movs	r5, r0
    39ac:	0008      	movs	r0, r1
    39ae:	0011      	movs	r1, r2
    39b0:	6023      	str	r3, [r4, #0]
    39b2:	f7fe fd30 	bl	2416 <_fstat>
    39b6:	1c43      	adds	r3, r0, #1
    39b8:	d103      	bne.n	39c2 <_fstat_r+0x1e>
    39ba:	6823      	ldr	r3, [r4, #0]
    39bc:	2b00      	cmp	r3, #0
    39be:	d000      	beq.n	39c2 <_fstat_r+0x1e>
    39c0:	602b      	str	r3, [r5, #0]
    39c2:	bd70      	pop	{r4, r5, r6, pc}
    39c4:	200001e8 	.word	0x200001e8

000039c8 <_isatty_r>:
    39c8:	2300      	movs	r3, #0
    39ca:	b570      	push	{r4, r5, r6, lr}
    39cc:	4c06      	ldr	r4, [pc, #24]	; (39e8 <_isatty_r+0x20>)
    39ce:	0005      	movs	r5, r0
    39d0:	0008      	movs	r0, r1
    39d2:	6023      	str	r3, [r4, #0]
    39d4:	f7fe fd24 	bl	2420 <_isatty>
    39d8:	1c43      	adds	r3, r0, #1
    39da:	d103      	bne.n	39e4 <_isatty_r+0x1c>
    39dc:	6823      	ldr	r3, [r4, #0]
    39de:	2b00      	cmp	r3, #0
    39e0:	d000      	beq.n	39e4 <_isatty_r+0x1c>
    39e2:	602b      	str	r3, [r5, #0]
    39e4:	bd70      	pop	{r4, r5, r6, pc}
    39e6:	46c0      	nop			; (mov r8, r8)
    39e8:	200001e8 	.word	0x200001e8

000039ec <_lseek_r>:
    39ec:	b570      	push	{r4, r5, r6, lr}
    39ee:	0005      	movs	r5, r0
    39f0:	0008      	movs	r0, r1
    39f2:	0011      	movs	r1, r2
    39f4:	2200      	movs	r2, #0
    39f6:	4c06      	ldr	r4, [pc, #24]	; (3a10 <_lseek_r+0x24>)
    39f8:	6022      	str	r2, [r4, #0]
    39fa:	001a      	movs	r2, r3
    39fc:	f7fe fd12 	bl	2424 <_lseek>
    3a00:	1c43      	adds	r3, r0, #1
    3a02:	d103      	bne.n	3a0c <_lseek_r+0x20>
    3a04:	6823      	ldr	r3, [r4, #0]
    3a06:	2b00      	cmp	r3, #0
    3a08:	d000      	beq.n	3a0c <_lseek_r+0x20>
    3a0a:	602b      	str	r3, [r5, #0]
    3a0c:	bd70      	pop	{r4, r5, r6, pc}
    3a0e:	46c0      	nop			; (mov r8, r8)
    3a10:	200001e8 	.word	0x200001e8

00003a14 <memchr>:
    3a14:	b2c9      	uxtb	r1, r1
    3a16:	1882      	adds	r2, r0, r2
    3a18:	4290      	cmp	r0, r2
    3a1a:	d101      	bne.n	3a20 <memchr+0xc>
    3a1c:	2000      	movs	r0, #0
    3a1e:	4770      	bx	lr
    3a20:	7803      	ldrb	r3, [r0, #0]
    3a22:	428b      	cmp	r3, r1
    3a24:	d0fb      	beq.n	3a1e <memchr+0xa>
    3a26:	3001      	adds	r0, #1
    3a28:	e7f6      	b.n	3a18 <memchr+0x4>

00003a2a <__malloc_lock>:
    3a2a:	4770      	bx	lr

00003a2c <__malloc_unlock>:
    3a2c:	4770      	bx	lr
	...

00003a30 <_read_r>:
    3a30:	b570      	push	{r4, r5, r6, lr}
    3a32:	0005      	movs	r5, r0
    3a34:	0008      	movs	r0, r1
    3a36:	0011      	movs	r1, r2
    3a38:	2200      	movs	r2, #0
    3a3a:	4c06      	ldr	r4, [pc, #24]	; (3a54 <_read_r+0x24>)
    3a3c:	6022      	str	r2, [r4, #0]
    3a3e:	001a      	movs	r2, r3
    3a40:	f7fe fc8a 	bl	2358 <_read>
    3a44:	1c43      	adds	r3, r0, #1
    3a46:	d103      	bne.n	3a50 <_read_r+0x20>
    3a48:	6823      	ldr	r3, [r4, #0]
    3a4a:	2b00      	cmp	r3, #0
    3a4c:	d000      	beq.n	3a50 <_read_r+0x20>
    3a4e:	602b      	str	r3, [r5, #0]
    3a50:	bd70      	pop	{r4, r5, r6, pc}
    3a52:	46c0      	nop			; (mov r8, r8)
    3a54:	200001e8 	.word	0x200001e8
    3a58:	000001ca 	.word	0x000001ca
    3a5c:	000001a2 	.word	0x000001a2
    3a60:	000001a6 	.word	0x000001a6
    3a64:	000001aa 	.word	0x000001aa
    3a68:	000001ae 	.word	0x000001ae
    3a6c:	000001b2 	.word	0x000001b2
    3a70:	000001b6 	.word	0x000001b6
    3a74:	000001ba 	.word	0x000001ba
    3a78:	000001be 	.word	0x000001be
    3a7c:	000001c2 	.word	0x000001c2
    3a80:	00000268 	.word	0x00000268
    3a84:	00000240 	.word	0x00000240
    3a88:	00000246 	.word	0x00000246
    3a8c:	0000024c 	.word	0x0000024c
    3a90:	0000024c 	.word	0x0000024c
    3a94:	00000252 	.word	0x00000252
    3a98:	00000252 	.word	0x00000252
    3a9c:	00000252 	.word	0x00000252
    3aa0:	00000258 	.word	0x00000258
    3aa4:	0000025e 	.word	0x0000025e
    3aa8:	0000035a 	.word	0x0000035a
    3aac:	00000336 	.word	0x00000336
    3ab0:	0000033c 	.word	0x0000033c
    3ab4:	00000342 	.word	0x00000342
    3ab8:	00000342 	.word	0x00000342
    3abc:	00000348 	.word	0x00000348
    3ac0:	00000348 	.word	0x00000348
    3ac4:	00000348 	.word	0x00000348
    3ac8:	0000034e 	.word	0x0000034e
    3acc:	00000354 	.word	0x00000354
    3ad0:	00000662 	.word	0x00000662
    3ad4:	0000063e 	.word	0x0000063e
    3ad8:	00000644 	.word	0x00000644
    3adc:	0000064a 	.word	0x0000064a
    3ae0:	0000064a 	.word	0x0000064a
    3ae4:	00000650 	.word	0x00000650
    3ae8:	00000650 	.word	0x00000650
    3aec:	00000650 	.word	0x00000650
    3af0:	00000656 	.word	0x00000656
    3af4:	0000065c 	.word	0x0000065c
    3af8:	42000800 	.word	0x42000800
    3afc:	42000c00 	.word	0x42000c00
    3b00:	42001000 	.word	0x42001000
    3b04:	42001400 	.word	0x42001400
    3b08:	42001800 	.word	0x42001800
    3b0c:	42001c00 	.word	0x42001c00
    3b10:	00001cca 	.word	0x00001cca
    3b14:	00001cc6 	.word	0x00001cc6
    3b18:	00001cc6 	.word	0x00001cc6
    3b1c:	00001d28 	.word	0x00001d28
    3b20:	00001d28 	.word	0x00001d28
    3b24:	00001cde 	.word	0x00001cde
    3b28:	00001cd0 	.word	0x00001cd0
    3b2c:	00001ce4 	.word	0x00001ce4
    3b30:	00001d16 	.word	0x00001d16
    3b34:	00001db0 	.word	0x00001db0
    3b38:	00001d90 	.word	0x00001d90
    3b3c:	00001d90 	.word	0x00001d90
    3b40:	00001e1c 	.word	0x00001e1c
    3b44:	00001da2 	.word	0x00001da2
    3b48:	00001dbe 	.word	0x00001dbe
    3b4c:	00001d94 	.word	0x00001d94
    3b50:	00001dcc 	.word	0x00001dcc
    3b54:	00001e0c 	.word	0x00001e0c
    3b58:	74696e69 	.word	0x74696e69
    3b5c:	0000000d 	.word	0x0000000d
    3b60:	63206f4e 	.word	0x63206f4e
    3b64:	2e706968 	.word	0x2e706968
    3b68:	0000000d 	.word	0x0000000d
    3b6c:	64616552 	.word	0x64616552
    3b70:	72726520 	.word	0x72726520
    3b74:	000d726f 	.word	0x000d726f
    3b78:	00006425 	.word	0x00006425
    3b7c:	63656843 	.word	0x63656843
    3b80:	6d75736b 	.word	0x6d75736b
    3b84:	72726520 	.word	0x72726520
    3b88:	0d21726f 	.word	0x0d21726f
    3b8c:	00000000 	.word	0x00000000
    3b90:	63656843 	.word	0x63656843
    3b94:	6d75736b 	.word	0x6d75736b
    3b98:	74616d20 	.word	0x74616d20
    3b9c:	64656863 	.word	0x64656863
    3ba0:	00000d21 	.word	0x00000d21
    3ba4:	65656c73 	.word	0x65656c73
    3ba8:	00000d70 	.word	0x00000d70

00003bac <_global_impure_ptr>:
    3bac:	20000014                                ... 

00003bb0 <__sf_fake_stderr>:
	...

00003bd0 <__sf_fake_stdin>:
	...

00003bf0 <__sf_fake_stdout>:
	...
    3c10:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3c20:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3c30:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3c40:	00006665                                ef..

00003c44 <_init>:
    3c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c46:	46c0      	nop			; (mov r8, r8)
    3c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c4a:	bc08      	pop	{r3}
    3c4c:	469e      	mov	lr, r3
    3c4e:	4770      	bx	lr

00003c50 <__init_array_start>:
    3c50:	000000dd 	.word	0x000000dd

00003c54 <_fini>:
    3c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c56:	46c0      	nop			; (mov r8, r8)
    3c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c5a:	bc08      	pop	{r3}
    3c5c:	469e      	mov	lr, r3
    3c5e:	4770      	bx	lr

00003c60 <__fini_array_start>:
    3c60:	000000b5 	.word	0x000000b5
