
cli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009820  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  00009820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ac  200001dc  000099fc  000201dc  2**2
                  ALLOC
  3 .stack        00002000  20000388  00009ba8  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   000435df  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004fb8  00000000  00000000  0006383c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007fe6  00000000  00000000  000687f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007a8  00000000  00000000  000707da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000950  00000000  00000000  00070f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001cb2d  00000000  00000000  000718d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001214c  00000000  00000000  0008e3ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008bd16  00000000  00000000  000a054b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002468  00000000  00000000  0012c264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 23 00 20 b1 32 00 00 ad 32 00 00 ad 32 00 00     .#. .2...2...2..
	...
      2c:	ad 32 00 00 00 00 00 00 00 00 00 00 ad 32 00 00     .2...........2..
      3c:	ad 32 00 00 ad 32 00 00 ad 32 00 00 ad 32 00 00     .2...2...2...2..
      4c:	ad 32 00 00 ad 32 00 00 ad 32 00 00 ad 32 00 00     .2...2...2...2..
      5c:	ad 32 00 00 ad 32 00 00 81 2b 00 00 91 2b 00 00     .2...2...+...+..
      6c:	a1 2b 00 00 b1 2b 00 00 c1 2b 00 00 d1 2b 00 00     .+...+...+...+..
      7c:	dd 0b 00 00 ed 0b 00 00 fd 0b 00 00 ad 32 00 00     .............2..
      8c:	ad 32 00 00 ad 32 00 00 00 00 00 00 00 00 00 00     .2...2..........
      9c:	ad 32 00 00 ad 32 00 00 ad 32 00 00 ad 32 00 00     .2...2...2...2..
      ac:	ad 32 00 00 00 00 00 00                             .2......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	00009820 	.word	0x00009820

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	00009820 	.word	0x00009820
     10c:	00009820 	.word	0x00009820
     110:	00000000 	.word	0x00000000

00000114 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	b082      	sub	sp, #8
     118:	0005      	movs	r5, r0
     11a:	000e      	movs	r6, r1
	uint16_t temp = 0;
     11c:	2200      	movs	r2, #0
     11e:	466b      	mov	r3, sp
     120:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     122:	4c06      	ldr	r4, [pc, #24]	; (13c <usart_serial_getchar+0x28>)
     124:	466b      	mov	r3, sp
     126:	1d99      	adds	r1, r3, #6
     128:	0028      	movs	r0, r5
     12a:	47a0      	blx	r4
     12c:	2800      	cmp	r0, #0
     12e:	d1f9      	bne.n	124 <usart_serial_getchar+0x10>

	*c = temp;
     130:	466b      	mov	r3, sp
     132:	3306      	adds	r3, #6
     134:	881b      	ldrh	r3, [r3, #0]
     136:	7033      	strb	r3, [r6, #0]
}
     138:	b002      	add	sp, #8
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00002441 	.word	0x00002441

00000140 <usart_serial_putchar>:
{
     140:	b570      	push	{r4, r5, r6, lr}
     142:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     144:	b28c      	uxth	r4, r1
     146:	4e03      	ldr	r6, [pc, #12]	; (154 <usart_serial_putchar+0x14>)
     148:	0021      	movs	r1, r4
     14a:	0028      	movs	r0, r5
     14c:	47b0      	blx	r6
     14e:	2800      	cmp	r0, #0
     150:	d1fa      	bne.n	148 <usart_serial_putchar+0x8>
}
     152:	bd70      	pop	{r4, r5, r6, pc}
     154:	00002415 	.word	0x00002415

00000158 <configure_usart>:
#endif

#ifdef STDIO_SERIAL_H_INCLUDED
extern struct usart_module usart_instance;
void configure_usart()
{
     158:	b5f0      	push	{r4, r5, r6, r7, lr}
     15a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     15c:	2380      	movs	r3, #128	; 0x80
     15e:	05db      	lsls	r3, r3, #23
     160:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     162:	2300      	movs	r3, #0
     164:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     166:	22ff      	movs	r2, #255	; 0xff
     168:	4669      	mov	r1, sp
     16a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     16c:	2200      	movs	r2, #0
     16e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     170:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     172:	2401      	movs	r4, #1
     174:	2124      	movs	r1, #36	; 0x24
     176:	4668      	mov	r0, sp
     178:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     17a:	3101      	adds	r1, #1
     17c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     17e:	3101      	adds	r1, #1
     180:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     182:	3101      	adds	r1, #1
     184:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     186:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     188:	3105      	adds	r1, #5
     18a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     18c:	3101      	adds	r1, #1
     18e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     190:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     192:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     194:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     196:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     198:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     19a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
     19c:	2313      	movs	r3, #19
     19e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     1a0:	7742      	strb	r2, [r0, #29]
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 115200;
     1a2:	23e1      	movs	r3, #225	; 0xe1
     1a4:	025b      	lsls	r3, r3, #9
     1a6:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
     1a8:	23c4      	movs	r3, #196	; 0xc4
     1aa:	039b      	lsls	r3, r3, #14
     1ac:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
     1ae:	2301      	movs	r3, #1
     1b0:	425b      	negs	r3, r3
     1b2:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
     1b4:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
     1b6:	4b17      	ldr	r3, [pc, #92]	; (214 <configure_usart+0xbc>)
     1b8:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
     1ba:	4b17      	ldr	r3, [pc, #92]	; (218 <configure_usart+0xc0>)
     1bc:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     1be:	4d17      	ldr	r5, [pc, #92]	; (21c <configure_usart+0xc4>)
     1c0:	4b17      	ldr	r3, [pc, #92]	; (220 <configure_usart+0xc8>)
     1c2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     1c4:	4a17      	ldr	r2, [pc, #92]	; (224 <configure_usart+0xcc>)
     1c6:	4b18      	ldr	r3, [pc, #96]	; (228 <configure_usart+0xd0>)
     1c8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     1ca:	4a18      	ldr	r2, [pc, #96]	; (22c <configure_usart+0xd4>)
     1cc:	4b18      	ldr	r3, [pc, #96]	; (230 <configure_usart+0xd8>)
     1ce:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     1d0:	466a      	mov	r2, sp
     1d2:	4918      	ldr	r1, [pc, #96]	; (234 <configure_usart+0xdc>)
     1d4:	0028      	movs	r0, r5
     1d6:	4b18      	ldr	r3, [pc, #96]	; (238 <configure_usart+0xe0>)
     1d8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     1da:	4f18      	ldr	r7, [pc, #96]	; (23c <configure_usart+0xe4>)
     1dc:	683b      	ldr	r3, [r7, #0]
     1de:	6898      	ldr	r0, [r3, #8]
     1e0:	2100      	movs	r1, #0
     1e2:	4e17      	ldr	r6, [pc, #92]	; (240 <configure_usart+0xe8>)
     1e4:	47b0      	blx	r6
	setbuf(stdin, NULL);
     1e6:	683b      	ldr	r3, [r7, #0]
     1e8:	6858      	ldr	r0, [r3, #4]
     1ea:	2100      	movs	r1, #0
     1ec:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     1ee:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     1f0:	0030      	movs	r0, r6
     1f2:	4b14      	ldr	r3, [pc, #80]	; (244 <configure_usart+0xec>)
     1f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1f6:	231f      	movs	r3, #31
     1f8:	4018      	ands	r0, r3
     1fa:	4084      	lsls	r4, r0
     1fc:	4b12      	ldr	r3, [pc, #72]	; (248 <configure_usart+0xf0>)
     1fe:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     200:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     202:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     204:	2b00      	cmp	r3, #0
     206:	d1fc      	bne.n	202 <configure_usart+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     208:	6833      	ldr	r3, [r6, #0]
     20a:	2202      	movs	r2, #2
     20c:	4313      	orrs	r3, r2
     20e:	6033      	str	r3, [r6, #0]

	stdio_serial_init(&usart_instance, SERCOM4, &config_usart);

	usart_enable(&usart_instance);
}
     210:	b011      	add	sp, #68	; 0x44
     212:	bdf0      	pop	{r4, r5, r6, r7, pc}
     214:	002a0003 	.word	0x002a0003
     218:	002b0003 	.word	0x002b0003
     21c:	200002e4 	.word	0x200002e4
     220:	20000270 	.word	0x20000270
     224:	00000141 	.word	0x00000141
     228:	2000026c 	.word	0x2000026c
     22c:	00000115 	.word	0x00000115
     230:	20000268 	.word	0x20000268
     234:	42001800 	.word	0x42001800
     238:	000020d1 	.word	0x000020d1
     23c:	2000000c 	.word	0x2000000c
     240:	00004265 	.word	0x00004265
     244:	00002b51 	.word	0x00002b51
     248:	e000e100 	.word	0xe000e100

0000024c <configure_i2c_hdc>:
 **/

#include "hdc_1080.h"

void configure_i2c_hdc()
{
     24c:	b510      	push	{r4, lr}
     24e:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     250:	aa01      	add	r2, sp, #4
     252:	2364      	movs	r3, #100	; 0x64
     254:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     256:	4b1f      	ldr	r3, [pc, #124]	; (2d4 <configure_i2c_hdc+0x88>)
     258:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     25a:	2300      	movs	r3, #0
     25c:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     25e:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
     260:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     262:	2180      	movs	r1, #128	; 0x80
     264:	0389      	lsls	r1, r1, #14
     266:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
     268:	2101      	movs	r1, #1
     26a:	4249      	negs	r1, r1
     26c:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
     26e:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     270:	3125      	adds	r1, #37	; 0x25
     272:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     274:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     276:	3108      	adds	r1, #8
     278:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     27a:	3101      	adds	r1, #1
     27c:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     27e:	3101      	adds	r1, #1
     280:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     282:	33d7      	adds	r3, #215	; 0xd7
     284:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
     286:	4b14      	ldr	r3, [pc, #80]	; (2d8 <configure_i2c_hdc+0x8c>)
     288:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
     28a:	4b14      	ldr	r3, [pc, #80]	; (2dc <configure_i2c_hdc+0x90>)
     28c:	6213      	str	r3, [r2, #32]
	enum status_code init_status = i2c_master_init(&i2c_hdc, SERCOM3, &config_i2c_master);
     28e:	4914      	ldr	r1, [pc, #80]	; (2e0 <configure_i2c_hdc+0x94>)
     290:	4814      	ldr	r0, [pc, #80]	; (2e4 <configure_i2c_hdc+0x98>)
     292:	4b15      	ldr	r3, [pc, #84]	; (2e8 <configure_i2c_hdc+0x9c>)
     294:	4798      	blx	r3
	if (STATUS_OK != init_status) {
     296:	2800      	cmp	r0, #0
     298:	d116      	bne.n	2c8 <configure_i2c_hdc+0x7c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     29a:	4b12      	ldr	r3, [pc, #72]	; (2e4 <configure_i2c_hdc+0x98>)
     29c:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     29e:	2107      	movs	r1, #7
     2a0:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
     2a2:	4219      	tst	r1, r3
     2a4:	d1fc      	bne.n	2a0 <configure_i2c_hdc+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     2a6:	6813      	ldr	r3, [r2, #0]
     2a8:	2102      	movs	r1, #2
     2aa:	430b      	orrs	r3, r1
     2ac:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     2ae:	4b0d      	ldr	r3, [pc, #52]	; (2e4 <configure_i2c_hdc+0x98>)
     2b0:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
     2b2:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     2b4:	2010      	movs	r0, #16
     2b6:	8b51      	ldrh	r1, [r2, #26]
     2b8:	4201      	tst	r1, r0
     2ba:	d108      	bne.n	2ce <configure_i2c_hdc+0x82>
		timeout_counter++;
     2bc:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     2be:	42a3      	cmp	r3, r4
     2c0:	d3f9      	bcc.n	2b6 <configure_i2c_hdc+0x6a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     2c2:	2310      	movs	r3, #16
     2c4:	8353      	strh	r3, [r2, #26]
     2c6:	e002      	b.n	2ce <configure_i2c_hdc+0x82>
		printf("failed to initialize HDC1080 driver.\r\n");
     2c8:	4808      	ldr	r0, [pc, #32]	; (2ec <configure_i2c_hdc+0xa0>)
     2ca:	4b09      	ldr	r3, [pc, #36]	; (2f0 <configure_i2c_hdc+0xa4>)
     2cc:	4798      	blx	r3
		return;
	}
	i2c_master_enable(&i2c_hdc);
}
     2ce:	b00e      	add	sp, #56	; 0x38
     2d0:	bd10      	pop	{r4, pc}
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	00000d48 	.word	0x00000d48
     2d8:	00160002 	.word	0x00160002
     2dc:	00170002 	.word	0x00170002
     2e0:	42001400 	.word	0x42001400
     2e4:	20000244 	.word	0x20000244
     2e8:	00000c19 	.word	0x00000c19
     2ec:	000088fc 	.word	0x000088fc
     2f0:	0000422d 	.word	0x0000422d

000002f4 <set_resolution>:
//NOTE: bit[10] = 1 for 11 bit temp
//NOTE: bit[9:8] = 00 for 14 bit humidity
//NOTE: bit[9:8] = 01 for 11 bit humidity
//NOTE: bit[9:8] = 10 for 8 bit humidity
void set_resolution(hdc_resolution temp_resolution, hdc_resolution humidity_resolution)
{
     2f4:	b500      	push	{lr}
     2f6:	b085      	sub	sp, #20
	int8_t data_packet[3];

	data_packet[0] = HDC_SET_RES;
     2f8:	2202      	movs	r2, #2
     2fa:	ab03      	add	r3, sp, #12
     2fc:	701a      	strb	r2, [r3, #0]
	uint8_t write_byte = 0;
	switch (temp_resolution) {
     2fe:	2801      	cmp	r0, #1
     300:	d003      	beq.n	30a <set_resolution+0x16>
     302:	2802      	cmp	r0, #2
     304:	d021      	beq.n	34a <set_resolution+0x56>
	enum status_code i2c_status = i2c_master_write_packet_wait(&i2c_hdc, &packet);
	if (STATUS_OK != i2c_status)
		printf("error trying to set resolution!\r\n");

	return;
}
     306:	b005      	add	sp, #20
     308:	bd00      	pop	{pc}
		write_byte = (1 << 2);
     30a:	2304      	movs	r3, #4
	switch (humidity_resolution) {
     30c:	2901      	cmp	r1, #1
     30e:	d01e      	beq.n	34e <set_resolution+0x5a>
     310:	2900      	cmp	r1, #0
     312:	d01f      	beq.n	354 <set_resolution+0x60>
     314:	2902      	cmp	r1, #2
     316:	d1f6      	bne.n	306 <set_resolution+0x12>
	data_packet[1] = write_byte;
     318:	aa03      	add	r2, sp, #12
	write_byte |= (1 << 4);
     31a:	2110      	movs	r1, #16
     31c:	430b      	orrs	r3, r1
	data_packet[1] = write_byte;
     31e:	7053      	strb	r3, [r2, #1]
	data_packet[2] = 0x00;
     320:	2300      	movs	r3, #0
     322:	7093      	strb	r3, [r2, #2]
	struct i2c_master_packet packet = {
     324:	2140      	movs	r1, #64	; 0x40
     326:	4668      	mov	r0, sp
     328:	8001      	strh	r1, [r0, #0]
     32a:	393d      	subs	r1, #61	; 0x3d
     32c:	8041      	strh	r1, [r0, #2]
     32e:	9201      	str	r2, [sp, #4]
     330:	7203      	strb	r3, [r0, #8]
     332:	7243      	strb	r3, [r0, #9]
     334:	7283      	strb	r3, [r0, #10]
	enum status_code i2c_status = i2c_master_write_packet_wait(&i2c_hdc, &packet);
     336:	4669      	mov	r1, sp
     338:	4808      	ldr	r0, [pc, #32]	; (35c <set_resolution+0x68>)
     33a:	4b09      	ldr	r3, [pc, #36]	; (360 <set_resolution+0x6c>)
     33c:	4798      	blx	r3
	if (STATUS_OK != i2c_status)
     33e:	2800      	cmp	r0, #0
     340:	d0e1      	beq.n	306 <set_resolution+0x12>
		printf("error trying to set resolution!\r\n");
     342:	4808      	ldr	r0, [pc, #32]	; (364 <set_resolution+0x70>)
     344:	4b08      	ldr	r3, [pc, #32]	; (368 <set_resolution+0x74>)
     346:	4798      	blx	r3
     348:	e7dd      	b.n	306 <set_resolution+0x12>
		write_byte = 0;
     34a:	2300      	movs	r3, #0
     34c:	e7de      	b.n	30c <set_resolution+0x18>
		write_byte |= 1;
     34e:	2201      	movs	r2, #1
     350:	4313      	orrs	r3, r2
		break;
     352:	e7e1      	b.n	318 <set_resolution+0x24>
		write_byte |= 2;
     354:	2202      	movs	r2, #2
     356:	4313      	orrs	r3, r2
		break;
     358:	e7de      	b.n	318 <set_resolution+0x24>
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	20000244 	.word	0x20000244
     360:	00001205 	.word	0x00001205
     364:	0000898c 	.word	0x0000898c
     368:	0000422d 	.word	0x0000422d

0000036c <request_data>:

uint16_t request_data(hdc_request command)
{
     36c:	b530      	push	{r4, r5, lr}
     36e:	b087      	sub	sp, #28
     370:	0004      	movs	r4, r0
	uint8_t received_data[2];
	uint8_t write_buffer = command;
     372:	2313      	movs	r3, #19
     374:	446b      	add	r3, sp
     376:	7018      	strb	r0, [r3, #0]
	struct i2c_master_packet packet = {
     378:	a901      	add	r1, sp, #4
     37a:	2240      	movs	r2, #64	; 0x40
     37c:	800a      	strh	r2, [r1, #0]
     37e:	3a3f      	subs	r2, #63	; 0x3f
     380:	804a      	strh	r2, [r1, #2]
     382:	604b      	str	r3, [r1, #4]
     384:	2300      	movs	r3, #0
     386:	720b      	strb	r3, [r1, #8]
     388:	724b      	strb	r3, [r1, #9]
     38a:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_hdc, &packet);
     38c:	4812      	ldr	r0, [pc, #72]	; (3d8 <request_data+0x6c>)
     38e:	4b13      	ldr	r3, [pc, #76]	; (3dc <request_data+0x70>)
     390:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
     392:	2800      	cmp	r0, #0
     394:	d006      	beq.n	3a4 <request_data+0x38>
		printf("failed to s	end register request for command 0x%02x!\r\n", command);
     396:	0021      	movs	r1, r4
     398:	4811      	ldr	r0, [pc, #68]	; (3e0 <request_data+0x74>)
     39a:	4b12      	ldr	r3, [pc, #72]	; (3e4 <request_data+0x78>)
     39c:	4798      	blx	r3
		return -1;
     39e:	4812      	ldr	r0, [pc, #72]	; (3e8 <request_data+0x7c>)
	if (STATUS_OK != i2c_code) {
		printf("failed to receive bytes for command 0x%02x!\r\n", command);
		return -1;
	}
	return (received_data[0] << 8) | received_data[1];
}
     3a0:	b007      	add	sp, #28
     3a2:	bd30      	pop	{r4, r5, pc}
	packet.data = received_data;
     3a4:	ad01      	add	r5, sp, #4
     3a6:	ab05      	add	r3, sp, #20
     3a8:	9302      	str	r3, [sp, #8]
	packet.data_length = 2;
     3aa:	2302      	movs	r3, #2
     3ac:	806b      	strh	r3, [r5, #2]
	delay_ms(25);
     3ae:	2019      	movs	r0, #25
     3b0:	4b0e      	ldr	r3, [pc, #56]	; (3ec <request_data+0x80>)
     3b2:	4798      	blx	r3
	i2c_code = i2c_master_read_packet_wait(&i2c_hdc, &packet);
     3b4:	0029      	movs	r1, r5
     3b6:	4808      	ldr	r0, [pc, #32]	; (3d8 <request_data+0x6c>)
     3b8:	4b0d      	ldr	r3, [pc, #52]	; (3f0 <request_data+0x84>)
     3ba:	4798      	blx	r3
	if (STATUS_OK != i2c_code) {
     3bc:	2800      	cmp	r0, #0
     3be:	d105      	bne.n	3cc <request_data+0x60>
	return (received_data[0] << 8) | received_data[1];
     3c0:	aa05      	add	r2, sp, #20
     3c2:	7813      	ldrb	r3, [r2, #0]
     3c4:	021b      	lsls	r3, r3, #8
     3c6:	7850      	ldrb	r0, [r2, #1]
     3c8:	4318      	orrs	r0, r3
     3ca:	e7e9      	b.n	3a0 <request_data+0x34>
		printf("failed to receive bytes for command 0x%02x!\r\n", command);
     3cc:	0021      	movs	r1, r4
     3ce:	4809      	ldr	r0, [pc, #36]	; (3f4 <request_data+0x88>)
     3d0:	4b04      	ldr	r3, [pc, #16]	; (3e4 <request_data+0x78>)
     3d2:	4798      	blx	r3
		return -1;
     3d4:	4804      	ldr	r0, [pc, #16]	; (3e8 <request_data+0x7c>)
     3d6:	e7e3      	b.n	3a0 <request_data+0x34>
     3d8:	20000244 	.word	0x20000244
     3dc:	00001219 	.word	0x00001219
     3e0:	00008924 	.word	0x00008924
     3e4:	00004139 	.word	0x00004139
     3e8:	0000ffff 	.word	0x0000ffff
     3ec:	00002c4d 	.word	0x00002c4d
     3f0:	000011f1 	.word	0x000011f1
     3f4:	0000895c 	.word	0x0000895c

000003f8 <get_hdc_manufacturer_id>:

uint16_t get_hdc_manufacturer_id()
{
     3f8:	b510      	push	{r4, lr}
	return request_data(HDC_MANUFACTURER_ID);
     3fa:	20fe      	movs	r0, #254	; 0xfe
     3fc:	4b01      	ldr	r3, [pc, #4]	; (404 <get_hdc_manufacturer_id+0xc>)
     3fe:	4798      	blx	r3
}
     400:	bd10      	pop	{r4, pc}
     402:	46c0      	nop			; (mov r8, r8)
     404:	0000036d 	.word	0x0000036d

00000408 <get_hdc_device_id>:
uint16_t get_hdc_device_id()
{
     408:	b510      	push	{r4, lr}
	return request_data(HDC_DEVICE_ID);
     40a:	20ff      	movs	r0, #255	; 0xff
     40c:	4b01      	ldr	r3, [pc, #4]	; (414 <get_hdc_device_id+0xc>)
     40e:	4798      	blx	r3
}
     410:	bd10      	pop	{r4, pc}
     412:	46c0      	nop			; (mov r8, r8)
     414:	0000036d 	.word	0x0000036d

00000418 <get_humidity>:
double get_humidity()
{
     418:	b510      	push	{r4, lr}
	double raw_data = request_data(HDC_HUMIDITY);
     41a:	2001      	movs	r0, #1
     41c:	4b05      	ldr	r3, [pc, #20]	; (434 <get_humidity+0x1c>)
     41e:	4798      	blx	r3
     420:	4b05      	ldr	r3, [pc, #20]	; (438 <get_humidity+0x20>)
     422:	4798      	blx	r3

	raw_data /= 65536.0;
     424:	4c05      	ldr	r4, [pc, #20]	; (43c <get_humidity+0x24>)
     426:	2200      	movs	r2, #0
     428:	4b05      	ldr	r3, [pc, #20]	; (440 <get_humidity+0x28>)
     42a:	47a0      	blx	r4
	raw_data *= 100.0;
     42c:	2200      	movs	r2, #0
     42e:	4b05      	ldr	r3, [pc, #20]	; (444 <get_humidity+0x2c>)
     430:	47a0      	blx	r4
	return raw_data;
}
     432:	bd10      	pop	{r4, pc}
     434:	0000036d 	.word	0x0000036d
     438:	00008699 	.word	0x00008699
     43c:	00007a41 	.word	0x00007a41
     440:	3ef00000 	.word	0x3ef00000
     444:	40590000 	.word	0x40590000

00000448 <get_temp>:

double get_temp()
{
     448:	b510      	push	{r4, lr}
	double raw_data = request_data(HDC_TEMP);
     44a:	2000      	movs	r0, #0
     44c:	4b07      	ldr	r3, [pc, #28]	; (46c <get_temp+0x24>)
     44e:	4798      	blx	r3
     450:	4b07      	ldr	r3, [pc, #28]	; (470 <get_temp+0x28>)
     452:	4798      	blx	r3

	raw_data /= 65536.0;
     454:	4c07      	ldr	r4, [pc, #28]	; (474 <get_temp+0x2c>)
     456:	2200      	movs	r2, #0
     458:	4b07      	ldr	r3, [pc, #28]	; (478 <get_temp+0x30>)
     45a:	47a0      	blx	r4
	raw_data *= 165.0;
     45c:	2200      	movs	r2, #0
     45e:	4b07      	ldr	r3, [pc, #28]	; (47c <get_temp+0x34>)
     460:	47a0      	blx	r4
	raw_data -= 40.0;
     462:	2200      	movs	r2, #0
     464:	4b06      	ldr	r3, [pc, #24]	; (480 <get_temp+0x38>)
     466:	4c07      	ldr	r4, [pc, #28]	; (484 <get_temp+0x3c>)
     468:	47a0      	blx	r4
	return raw_data;
}
     46a:	bd10      	pop	{r4, pc}
     46c:	0000036d 	.word	0x0000036d
     470:	00008699 	.word	0x00008699
     474:	00007a41 	.word	0x00007a41
     478:	3ef00000 	.word	0x3ef00000
     47c:	4064a000 	.word	0x4064a000
     480:	40440000 	.word	0x40440000
     484:	00007f41 	.word	0x00007f41

00000488 <configure_i2c_tsl2561>:
#include "TSL2561.h"

tsl2561_i2c_addr tsl2561_addr = 0;

void configure_i2c_tsl2561(tsl2561_i2c_addr addr)
{
     488:	b530      	push	{r4, r5, lr}
     48a:	b08f      	sub	sp, #60	; 0x3c
     48c:	0004      	movs	r4, r0
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     48e:	aa01      	add	r2, sp, #4
     490:	2364      	movs	r3, #100	; 0x64
     492:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     494:	4b1f      	ldr	r3, [pc, #124]	; (514 <configure_i2c_tsl2561+0x8c>)
     496:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     498:	2300      	movs	r3, #0
     49a:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
     49c:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
     49e:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     4a0:	2180      	movs	r1, #128	; 0x80
     4a2:	0389      	lsls	r1, r1, #14
     4a4:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
     4a6:	2101      	movs	r1, #1
     4a8:	4249      	negs	r1, r1
     4aa:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
     4ac:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
     4ae:	3125      	adds	r1, #37	; 0x25
     4b0:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     4b2:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
     4b4:	3108      	adds	r1, #8
     4b6:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
     4b8:	3101      	adds	r1, #1
     4ba:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     4bc:	3101      	adds	r1, #1
     4be:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
     4c0:	33d7      	adds	r3, #215	; 0xd7
     4c2:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
     4c4:	4b14      	ldr	r3, [pc, #80]	; (518 <configure_i2c_tsl2561+0x90>)
     4c6:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
     4c8:	4b14      	ldr	r3, [pc, #80]	; (51c <configure_i2c_tsl2561+0x94>)
     4ca:	6213      	str	r3, [r2, #32]
	enum status_code init_status = i2c_master_init(&i2c_tsl2561, SERCOM0, &config_i2c_master);
     4cc:	4914      	ldr	r1, [pc, #80]	; (520 <configure_i2c_tsl2561+0x98>)
     4ce:	4815      	ldr	r0, [pc, #84]	; (524 <configure_i2c_tsl2561+0x9c>)
     4d0:	4b15      	ldr	r3, [pc, #84]	; (528 <configure_i2c_tsl2561+0xa0>)
     4d2:	4798      	blx	r3
	if (STATUS_OK != init_status) {
     4d4:	2800      	cmp	r0, #0
     4d6:	d119      	bne.n	50c <configure_i2c_tsl2561+0x84>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4d8:	4b12      	ldr	r3, [pc, #72]	; (524 <configure_i2c_tsl2561+0x9c>)
     4da:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     4dc:	2107      	movs	r1, #7
     4de:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
     4e0:	4219      	tst	r1, r3
     4e2:	d1fc      	bne.n	4de <configure_i2c_tsl2561+0x56>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     4e4:	6813      	ldr	r3, [r2, #0]
     4e6:	2102      	movs	r1, #2
     4e8:	430b      	orrs	r3, r1
     4ea:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     4ec:	4b0d      	ldr	r3, [pc, #52]	; (524 <configure_i2c_tsl2561+0x9c>)
     4ee:	88dd      	ldrh	r5, [r3, #6]
	uint32_t timeout_counter = 0;
     4f0:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     4f2:	2010      	movs	r0, #16
     4f4:	8b51      	ldrh	r1, [r2, #26]
     4f6:	4201      	tst	r1, r0
     4f8:	d104      	bne.n	504 <configure_i2c_tsl2561+0x7c>
		timeout_counter++;
     4fa:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     4fc:	42ab      	cmp	r3, r5
     4fe:	d3f9      	bcc.n	4f4 <configure_i2c_tsl2561+0x6c>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     500:	2310      	movs	r3, #16
     502:	8353      	strh	r3, [r2, #26]
		printf("failed to initialize TSL2561 driver.\r\n");
		return;
	}
	i2c_master_enable(&i2c_tsl2561);
	tsl2561_addr = addr;
     504:	4b09      	ldr	r3, [pc, #36]	; (52c <configure_i2c_tsl2561+0xa4>)
     506:	701c      	strb	r4, [r3, #0]
}
     508:	b00f      	add	sp, #60	; 0x3c
     50a:	bd30      	pop	{r4, r5, pc}
		printf("failed to initialize TSL2561 driver.\r\n");
     50c:	4808      	ldr	r0, [pc, #32]	; (530 <configure_i2c_tsl2561+0xa8>)
     50e:	4b09      	ldr	r3, [pc, #36]	; (534 <configure_i2c_tsl2561+0xac>)
     510:	4798      	blx	r3
     512:	e7f9      	b.n	508 <configure_i2c_tsl2561+0x80>
     514:	00000d48 	.word	0x00000d48
     518:	00080002 	.word	0x00080002
     51c:	00090002 	.word	0x00090002
     520:	42000800 	.word	0x42000800
     524:	20000250 	.word	0x20000250
     528:	00000c19 	.word	0x00000c19
     52c:	200001f8 	.word	0x200001f8
     530:	000089b0 	.word	0x000089b0
     534:	0000422d 	.word	0x0000422d

00000538 <read_byte>:


uint8_t read_byte(tsl2561_registers reg)
{
     538:	b500      	push	{lr}
     53a:	b085      	sub	sp, #20
	uint8_t received_data;
	uint8_t write_buffer = reg;
     53c:	230e      	movs	r3, #14
     53e:	446b      	add	r3, sp
     540:	7018      	strb	r0, [r3, #0]
	struct i2c_master_packet packet = {
     542:	4a18      	ldr	r2, [pc, #96]	; (5a4 <read_byte+0x6c>)
     544:	7812      	ldrb	r2, [r2, #0]
     546:	4669      	mov	r1, sp
     548:	800a      	strh	r2, [r1, #0]
     54a:	2201      	movs	r2, #1
     54c:	804a      	strh	r2, [r1, #2]
     54e:	9301      	str	r3, [sp, #4]
     550:	2300      	movs	r3, #0
     552:	720b      	strb	r3, [r1, #8]
     554:	724b      	strb	r3, [r1, #9]
     556:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait(&i2c_tsl2561, &packet);
     558:	4813      	ldr	r0, [pc, #76]	; (5a8 <read_byte+0x70>)
     55a:	4b14      	ldr	r3, [pc, #80]	; (5ac <read_byte+0x74>)
     55c:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
     55e:	2800      	cmp	r0, #0
     560:	d008      	beq.n	574 <read_byte+0x3c>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
     562:	230e      	movs	r3, #14
     564:	446b      	add	r3, sp
     566:	7819      	ldrb	r1, [r3, #0]
     568:	4811      	ldr	r0, [pc, #68]	; (5b0 <read_byte+0x78>)
     56a:	4b12      	ldr	r3, [pc, #72]	; (5b4 <read_byte+0x7c>)
     56c:	4798      	blx	r3
		return -1;
     56e:	20ff      	movs	r0, #255	; 0xff
	if (STATUS_OK != i2c_code) {
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
		return -1;
	}
	return received_data;
}
     570:	b005      	add	sp, #20
     572:	bd00      	pop	{pc}
	packet.data = &received_data;
     574:	230f      	movs	r3, #15
     576:	446b      	add	r3, sp
     578:	9301      	str	r3, [sp, #4]
	packet.data_length = 1;
     57a:	2301      	movs	r3, #1
     57c:	466a      	mov	r2, sp
     57e:	8053      	strh	r3, [r2, #2]
	i2c_code = i2c_master_read_packet_wait(&i2c_tsl2561, &packet);
     580:	4669      	mov	r1, sp
     582:	4809      	ldr	r0, [pc, #36]	; (5a8 <read_byte+0x70>)
     584:	4b0c      	ldr	r3, [pc, #48]	; (5b8 <read_byte+0x80>)
     586:	4798      	blx	r3
	if (STATUS_OK != i2c_code) {
     588:	2800      	cmp	r0, #0
     58a:	d103      	bne.n	594 <read_byte+0x5c>
	return received_data;
     58c:	230f      	movs	r3, #15
     58e:	446b      	add	r3, sp
     590:	7818      	ldrb	r0, [r3, #0]
     592:	e7ed      	b.n	570 <read_byte+0x38>
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
     594:	230e      	movs	r3, #14
     596:	446b      	add	r3, sp
     598:	7819      	ldrb	r1, [r3, #0]
     59a:	4808      	ldr	r0, [pc, #32]	; (5bc <read_byte+0x84>)
     59c:	4b05      	ldr	r3, [pc, #20]	; (5b4 <read_byte+0x7c>)
     59e:	4798      	blx	r3
		return -1;
     5a0:	20ff      	movs	r0, #255	; 0xff
     5a2:	e7e5      	b.n	570 <read_byte+0x38>
     5a4:	200001f8 	.word	0x200001f8
     5a8:	20000250 	.word	0x20000250
     5ac:	00001205 	.word	0x00001205
     5b0:	000089d8 	.word	0x000089d8
     5b4:	00004139 	.word	0x00004139
     5b8:	000011f1 	.word	0x000011f1
     5bc:	0000895c 	.word	0x0000895c

000005c0 <write_byte>:

void write_byte(tsl2561_registers reg, uint8_t data_byte)
{
     5c0:	b500      	push	{lr}
     5c2:	b085      	sub	sp, #20
	uint8_t write_buffer[2] = { reg, data_byte };
     5c4:	ab03      	add	r3, sp, #12
     5c6:	7018      	strb	r0, [r3, #0]
     5c8:	7059      	strb	r1, [r3, #1]
	struct i2c_master_packet packet = {
     5ca:	4a0b      	ldr	r2, [pc, #44]	; (5f8 <write_byte+0x38>)
     5cc:	7812      	ldrb	r2, [r2, #0]
     5ce:	4669      	mov	r1, sp
     5d0:	800a      	strh	r2, [r1, #0]
     5d2:	2202      	movs	r2, #2
     5d4:	804a      	strh	r2, [r1, #2]
     5d6:	9301      	str	r3, [sp, #4]
     5d8:	2300      	movs	r3, #0
     5da:	720b      	strb	r3, [r1, #8]
     5dc:	724b      	strb	r3, [r1, #9]
     5de:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_tsl2561, &packet);
     5e0:	4806      	ldr	r0, [pc, #24]	; (5fc <write_byte+0x3c>)
     5e2:	4b07      	ldr	r3, [pc, #28]	; (600 <write_byte+0x40>)
     5e4:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
     5e6:	2800      	cmp	r0, #0
     5e8:	d101      	bne.n	5ee <write_byte+0x2e>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
		return;
	}
}
     5ea:	b005      	add	sp, #20
     5ec:	bd00      	pop	{pc}
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
     5ee:	a903      	add	r1, sp, #12
     5f0:	4804      	ldr	r0, [pc, #16]	; (604 <write_byte+0x44>)
     5f2:	4b05      	ldr	r3, [pc, #20]	; (608 <write_byte+0x48>)
     5f4:	4798      	blx	r3
     5f6:	e7f8      	b.n	5ea <write_byte+0x2a>
     5f8:	200001f8 	.word	0x200001f8
     5fc:	20000250 	.word	0x20000250
     600:	00001219 	.word	0x00001219
     604:	000089d8 	.word	0x000089d8
     608:	00004139 	.word	0x00004139

0000060c <set_gain>:
 * For now the integration time will always be 402ms. Will update once decide
 * if we need faster readings
 * @param new_gain new gain multiplier
 */
void set_gain(tsl2561_gains new_gain)
{
     60c:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | TIMING_REG, (INTEGRATE_402MS | new_gain));
     60e:	2102      	movs	r1, #2
     610:	4301      	orrs	r1, r0
     612:	2081      	movs	r0, #129	; 0x81
     614:	4b01      	ldr	r3, [pc, #4]	; (61c <set_gain+0x10>)
     616:	4798      	blx	r3
}
     618:	bd10      	pop	{r4, pc}
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	000005c1 	.word	0x000005c1

00000620 <power_on_tsl2561>:

void power_on_tsl2561()
{
     620:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | CTRL_REG, 0x03);
     622:	2103      	movs	r1, #3
     624:	2080      	movs	r0, #128	; 0x80
     626:	4b03      	ldr	r3, [pc, #12]	; (634 <power_on_tsl2561+0x14>)
     628:	4798      	blx	r3
	set_gain(GAIN_16X);
     62a:	2010      	movs	r0, #16
     62c:	4b02      	ldr	r3, [pc, #8]	; (638 <power_on_tsl2561+0x18>)
     62e:	4798      	blx	r3
}
     630:	bd10      	pop	{r4, pc}
     632:	46c0      	nop			; (mov r8, r8)
     634:	000005c1 	.word	0x000005c1
     638:	0000060d 	.word	0x0000060d

0000063c <power_off_tsl2561>:

void power_off_tsl2561()
{
     63c:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | CTRL_REG, 0x0);
     63e:	2100      	movs	r1, #0
     640:	2080      	movs	r0, #128	; 0x80
     642:	4b01      	ldr	r3, [pc, #4]	; (648 <power_off_tsl2561+0xc>)
     644:	4798      	blx	r3
}
     646:	bd10      	pop	{r4, pc}
     648:	000005c1 	.word	0x000005c1

0000064c <get_chan0>:
{
	return read_byte(CMD_BIT | ID_REG);
}

uint16_t get_chan0()
{
     64c:	b570      	push	{r4, r5, r6, lr}
	//TODO: add way to change this
	delay_ms(403);
     64e:	2094      	movs	r0, #148	; 0x94
     650:	30ff      	adds	r0, #255	; 0xff
     652:	4b06      	ldr	r3, [pc, #24]	; (66c <get_chan0+0x20>)
     654:	4798      	blx	r3
	//HAVE TO READ LOW REGISTER BEFORE HIGH REG PER DATASHEET
	return read_byte(CMD_BIT | CHAN0_LOW_REG) | (read_byte(CMD_BIT | CHAN0_HIGH_REG) << 8);
     656:	208c      	movs	r0, #140	; 0x8c
     658:	4c05      	ldr	r4, [pc, #20]	; (670 <get_chan0+0x24>)
     65a:	47a0      	blx	r4
     65c:	0005      	movs	r5, r0
     65e:	208d      	movs	r0, #141	; 0x8d
     660:	47a0      	blx	r4
     662:	0200      	lsls	r0, r0, #8
     664:	4328      	orrs	r0, r5
     666:	b280      	uxth	r0, r0
}
     668:	bd70      	pop	{r4, r5, r6, pc}
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	00002c4d 	.word	0x00002c4d
     670:	00000539 	.word	0x00000539

00000674 <get_chan1>:

uint16_t get_chan1()
{
     674:	b570      	push	{r4, r5, r6, lr}
	//TODO: add way to change this
	delay_ms(403);
     676:	2094      	movs	r0, #148	; 0x94
     678:	30ff      	adds	r0, #255	; 0xff
     67a:	4b06      	ldr	r3, [pc, #24]	; (694 <get_chan1+0x20>)
     67c:	4798      	blx	r3
	return read_byte(CMD_BIT | CHAN1_LOW_REG) | (read_byte(CMD_BIT | CHAN1_HIGH_REG) << 8);
     67e:	208e      	movs	r0, #142	; 0x8e
     680:	4c05      	ldr	r4, [pc, #20]	; (698 <get_chan1+0x24>)
     682:	47a0      	blx	r4
     684:	0005      	movs	r5, r0
     686:	208f      	movs	r0, #143	; 0x8f
     688:	47a0      	blx	r4
     68a:	0200      	lsls	r0, r0, #8
     68c:	4328      	orrs	r0, r5
     68e:	b280      	uxth	r0, r0
}
     690:	bd70      	pop	{r4, r5, r6, pc}
     692:	46c0      	nop			; (mov r8, r8)
     694:	00002c4d 	.word	0x00002c4d
     698:	00000539 	.word	0x00000539

0000069c <get_lux>:

uint32_t get_lux()
{
     69c:	b570      	push	{r4, r5, r6, lr}
	uint16_t chan0 = get_chan0();
     69e:	4b26      	ldr	r3, [pc, #152]	; (738 <get_lux+0x9c>)
     6a0:	4798      	blx	r3
     6a2:	0004      	movs	r4, r0
	uint16_t chan1 = get_chan1();
     6a4:	4b25      	ldr	r3, [pc, #148]	; (73c <get_lux+0xa0>)
     6a6:	4798      	blx	r3
     6a8:	0005      	movs	r5, r0
		printf("get_lux: TSL2561 light is saturated");
		return -1;
	}

	unsigned long ratio10 = 0;
	if(chan0 != 0) {
     6aa:	2c00      	cmp	r4, #0
     6ac:	d01b      	beq.n	6e6 <get_lux+0x4a>
		 ratio10 = (chan1 << (TSL2561_LUX_RATIOSCALE + 1)) / chan0;
     6ae:	0280      	lsls	r0, r0, #10
     6b0:	0021      	movs	r1, r4
     6b2:	4b23      	ldr	r3, [pc, #140]	; (740 <get_lux+0xa4>)
     6b4:	4798      	blx	r3
	}
	ratio10 = (ratio10 + 1) >> 1;
     6b6:	3001      	adds	r0, #1
     6b8:	0840      	lsrs	r0, r0, #1
	unsigned int b, m;

	if ((ratio10 >= 0) && (ratio10 <= TSL2561_LUX_K1T)) {
     6ba:	2840      	cmp	r0, #64	; 0x40
     6bc:	d920      	bls.n	700 <get_lux+0x64>
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
	} else if (ratio10 <= TSL2561_LUX_K2T) {
     6be:	2880      	cmp	r0, #128	; 0x80
     6c0:	d923      	bls.n	70a <get_lux+0x6e>
		b = TSL2561_LUX_B2T; m = TSL2561_LUX_M2T;
	} else if (ratio10 <= TSL2561_LUX_K3T) {
     6c2:	28c0      	cmp	r0, #192	; 0xc0
     6c4:	d925      	bls.n	712 <get_lux+0x76>
		b = TSL2561_LUX_B3T; m = TSL2561_LUX_M3T;
	} else if (ratio10 <= TSL2561_LUX_K4T) {
     6c6:	2380      	movs	r3, #128	; 0x80
     6c8:	005b      	lsls	r3, r3, #1
     6ca:	4298      	cmp	r0, r3
     6cc:	d924      	bls.n	718 <get_lux+0x7c>
		b = TSL2561_LUX_B4T; m = TSL2561_LUX_M4T;
	} else if (ratio10 <= TSL2561_LUX_K5T) {
     6ce:	3338      	adds	r3, #56	; 0x38
     6d0:	4298      	cmp	r0, r3
     6d2:	d925      	bls.n	720 <get_lux+0x84>
		b = TSL2561_LUX_B5T; m = TSL2561_LUX_M5T;
	} else if (ratio10 <= TSL2561_LUX_K6T) {
     6d4:	3362      	adds	r3, #98	; 0x62
     6d6:	4298      	cmp	r0, r3
     6d8:	d927      	bls.n	72a <get_lux+0x8e>
		b = TSL2561_LUX_B6T; m = TSL2561_LUX_M6T;
	} else if (ratio10 <= TSL2561_LUX_K7T) {
     6da:	4b1a      	ldr	r3, [pc, #104]	; (744 <get_lux+0xa8>)
     6dc:	4298      	cmp	r0, r3
     6de:	d927      	bls.n	730 <get_lux+0x94>
		b = TSL2561_LUX_B7T; m = TSL2561_LUX_M7T;
	} else if (ratio10 > TSL2561_LUX_K8T) {
		b = TSL2561_LUX_B8T; m = TSL2561_LUX_M8T;
     6e0:	2300      	movs	r3, #0
     6e2:	2000      	movs	r0, #0
     6e4:	e003      	b.n	6ee <get_lux+0x52>
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
     6e6:	23df      	movs	r3, #223	; 0xdf
     6e8:	005b      	lsls	r3, r3, #1
     6ea:	20f9      	movs	r0, #249	; 0xf9
     6ec:	0040      	lsls	r0, r0, #1
	}
	
	
	unsigned long temp = ((chan0 * b) - (chan1 * m));
     6ee:	4360      	muls	r0, r4
	temp = (temp) ? temp : 0; // no negative lux
	temp += (1 << (TSL2561_LUX_LUXSCALE - 1));
     6f0:	2280      	movs	r2, #128	; 0x80
     6f2:	0192      	lsls	r2, r2, #6
     6f4:	4694      	mov	ip, r2
     6f6:	4460      	add	r0, ip
	unsigned long temp = ((chan0 * b) - (chan1 * m));
     6f8:	435d      	muls	r5, r3
	temp += (1 << (TSL2561_LUX_LUXSCALE - 1));
     6fa:	1b40      	subs	r0, r0, r5
	uint32_t lux = temp >> TSL2561_LUX_LUXSCALE;
     6fc:	0b80      	lsrs	r0, r0, #14
	return lux;
}
     6fe:	bd70      	pop	{r4, r5, r6, pc}
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
     700:	23df      	movs	r3, #223	; 0xdf
     702:	005b      	lsls	r3, r3, #1
     704:	20f9      	movs	r0, #249	; 0xf9
     706:	0040      	lsls	r0, r0, #1
     708:	e7f1      	b.n	6ee <get_lux+0x52>
		b = TSL2561_LUX_B2T; m = TSL2561_LUX_M2T;
     70a:	4b0f      	ldr	r3, [pc, #60]	; (748 <get_lux+0xac>)
     70c:	2085      	movs	r0, #133	; 0x85
     70e:	0080      	lsls	r0, r0, #2
     710:	e7ed      	b.n	6ee <get_lux+0x52>
		b = TSL2561_LUX_B3T; m = TSL2561_LUX_M3T;
     712:	4b0e      	ldr	r3, [pc, #56]	; (74c <get_lux+0xb0>)
     714:	480e      	ldr	r0, [pc, #56]	; (750 <get_lux+0xb4>)
     716:	e7ea      	b.n	6ee <get_lux+0x52>
		b = TSL2561_LUX_B4T; m = TSL2561_LUX_M4T;
     718:	4b0e      	ldr	r3, [pc, #56]	; (754 <get_lux+0xb8>)
     71a:	209c      	movs	r0, #156	; 0x9c
     71c:	0080      	lsls	r0, r0, #2
     71e:	e7e6      	b.n	6ee <get_lux+0x52>
		b = TSL2561_LUX_B5T; m = TSL2561_LUX_M5T;
     720:	23fe      	movs	r3, #254	; 0xfe
     722:	005b      	lsls	r3, r3, #1
     724:	2070      	movs	r0, #112	; 0x70
     726:	30ff      	adds	r0, #255	; 0xff
     728:	e7e1      	b.n	6ee <get_lux+0x52>
		b = TSL2561_LUX_B6T; m = TSL2561_LUX_M6T;
     72a:	23fb      	movs	r3, #251	; 0xfb
     72c:	20d2      	movs	r0, #210	; 0xd2
     72e:	e7de      	b.n	6ee <get_lux+0x52>
		b = TSL2561_LUX_B7T; m = TSL2561_LUX_M7T;
     730:	2312      	movs	r3, #18
     732:	2018      	movs	r0, #24
     734:	e7db      	b.n	6ee <get_lux+0x52>
     736:	46c0      	nop			; (mov r8, r8)
     738:	0000064d 	.word	0x0000064d
     73c:	00000675 	.word	0x00000675
     740:	000063a1 	.word	0x000063a1
     744:	0000029a 	.word	0x0000029a
     748:	000002d1 	.word	0x000002d1
     74c:	0000037b 	.word	0x0000037b
     750:	0000023f 	.word	0x0000023f
     754:	000003fe 	.word	0x000003fe

00000758 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     758:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     75a:	2200      	movs	r2, #0
     75c:	2300      	movs	r3, #0
     75e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     760:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     762:	2100      	movs	r1, #0
     764:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     766:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     768:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     76a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     76c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     76e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     770:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     772:	24c0      	movs	r4, #192	; 0xc0
     774:	0164      	lsls	r4, r4, #5
     776:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     778:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     77a:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     77c:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     77e:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     780:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     782:	242a      	movs	r4, #42	; 0x2a
     784:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     786:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     788:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     78a:	3c06      	subs	r4, #6
     78c:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     78e:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     790:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     792:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     794:	232b      	movs	r3, #43	; 0x2b
     796:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     798:	3301      	adds	r3, #1
     79a:	54c1      	strb	r1, [r0, r3]
}
     79c:	bd10      	pop	{r4, pc}
	...

000007a0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7a2:	46d6      	mov	lr, sl
     7a4:	464f      	mov	r7, r9
     7a6:	4646      	mov	r6, r8
     7a8:	b5c0      	push	{r6, r7, lr}
     7aa:	b096      	sub	sp, #88	; 0x58
     7ac:	0007      	movs	r7, r0
     7ae:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     7b0:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     7b2:	4acb      	ldr	r2, [pc, #812]	; (ae0 <adc_init+0x340>)
     7b4:	6a10      	ldr	r0, [r2, #32]
     7b6:	2380      	movs	r3, #128	; 0x80
     7b8:	025b      	lsls	r3, r3, #9
     7ba:	4303      	orrs	r3, r0
     7bc:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     7be:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     7c0:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     7c2:	07db      	lsls	r3, r3, #31
     7c4:	d505      	bpl.n	7d2 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     7c6:	b016      	add	sp, #88	; 0x58
     7c8:	bc1c      	pop	{r2, r3, r4}
     7ca:	4690      	mov	r8, r2
     7cc:	4699      	mov	r9, r3
     7ce:	46a2      	mov	sl, r4
     7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     7d2:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     7d4:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     7d6:	079b      	lsls	r3, r3, #30
     7d8:	d4f5      	bmi.n	7c6 <adc_init+0x26>
	module_inst->reference = config->reference;
     7da:	7873      	ldrb	r3, [r6, #1]
     7dc:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     7de:	2b00      	cmp	r3, #0
     7e0:	d104      	bne.n	7ec <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     7e2:	4ac0      	ldr	r2, [pc, #768]	; (ae4 <adc_init+0x344>)
     7e4:	6c13      	ldr	r3, [r2, #64]	; 0x40
     7e6:	2104      	movs	r1, #4
     7e8:	430b      	orrs	r3, r1
     7ea:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
     7ec:	683b      	ldr	r3, [r7, #0]
     7ee:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     7f0:	7833      	ldrb	r3, [r6, #0]
     7f2:	466a      	mov	r2, sp
     7f4:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     7f6:	4669      	mov	r1, sp
     7f8:	201e      	movs	r0, #30
     7fa:	4bbb      	ldr	r3, [pc, #748]	; (ae8 <adc_init+0x348>)
     7fc:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     7fe:	201e      	movs	r0, #30
     800:	4bba      	ldr	r3, [pc, #744]	; (aec <adc_init+0x34c>)
     802:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     804:	232c      	movs	r3, #44	; 0x2c
     806:	5cf2      	ldrb	r2, [r6, r3]
     808:	2a00      	cmp	r2, #0
     80a:	d054      	beq.n	8b6 <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
     80c:	3b01      	subs	r3, #1
     80e:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     810:	7b33      	ldrb	r3, [r6, #12]
     812:	18eb      	adds	r3, r5, r3
     814:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     816:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     818:	b2c9      	uxtb	r1, r1
     81a:	428b      	cmp	r3, r1
     81c:	d221      	bcs.n	862 <adc_init+0xc2>
     81e:	1952      	adds	r2, r2, r5
     820:	b2d3      	uxtb	r3, r2
     822:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     824:	4bb2      	ldr	r3, [pc, #712]	; (af0 <adc_init+0x350>)
     826:	469a      	mov	sl, r3
     828:	e003      	b.n	832 <adc_init+0x92>
			offset++;
     82a:	3501      	adds	r5, #1
     82c:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     82e:	45a9      	cmp	r9, r5
     830:	d017      	beq.n	862 <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     832:	240f      	movs	r4, #15
     834:	402c      	ands	r4, r5
     836:	7b33      	ldrb	r3, [r6, #12]
     838:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     83a:	2250      	movs	r2, #80	; 0x50
     83c:	49ad      	ldr	r1, [pc, #692]	; (af4 <adc_init+0x354>)
     83e:	a802      	add	r0, sp, #8
     840:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     842:	2c13      	cmp	r4, #19
     844:	d8f1      	bhi.n	82a <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     846:	00a4      	lsls	r4, r4, #2
     848:	ab02      	add	r3, sp, #8
     84a:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     84c:	a901      	add	r1, sp, #4
     84e:	2300      	movs	r3, #0
     850:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     852:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     854:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     856:	3301      	adds	r3, #1
     858:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     85a:	b2c0      	uxtb	r0, r0
     85c:	4ba6      	ldr	r3, [pc, #664]	; (af8 <adc_init+0x358>)
     85e:	4798      	blx	r3
     860:	e7e3      	b.n	82a <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
     862:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     864:	2250      	movs	r2, #80	; 0x50
     866:	49a3      	ldr	r1, [pc, #652]	; (af4 <adc_init+0x354>)
     868:	a802      	add	r0, sp, #8
     86a:	4ba1      	ldr	r3, [pc, #644]	; (af0 <adc_init+0x350>)
     86c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     86e:	2c13      	cmp	r4, #19
     870:	d913      	bls.n	89a <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     872:	7d73      	ldrb	r3, [r6, #21]
     874:	009b      	lsls	r3, r3, #2
     876:	b2db      	uxtb	r3, r3
     878:	4642      	mov	r2, r8
     87a:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     87c:	7db3      	ldrb	r3, [r6, #22]
     87e:	01db      	lsls	r3, r3, #7
     880:	7872      	ldrb	r2, [r6, #1]
     882:	4313      	orrs	r3, r2
     884:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     886:	4642      	mov	r2, r8
     888:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     88a:	7933      	ldrb	r3, [r6, #4]
     88c:	2b34      	cmp	r3, #52	; 0x34
     88e:	d900      	bls.n	892 <adc_init+0xf2>
     890:	e178      	b.n	b84 <adc_init+0x3e4>
     892:	009b      	lsls	r3, r3, #2
     894:	4a99      	ldr	r2, [pc, #612]	; (afc <adc_init+0x35c>)
     896:	58d3      	ldr	r3, [r2, r3]
     898:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     89a:	00a4      	lsls	r4, r4, #2
     89c:	ab02      	add	r3, sp, #8
     89e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8a0:	a901      	add	r1, sp, #4
     8a2:	2300      	movs	r3, #0
     8a4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     8a6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     8a8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     8aa:	3301      	adds	r3, #1
     8ac:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     8ae:	b2c0      	uxtb	r0, r0
     8b0:	4b91      	ldr	r3, [pc, #580]	; (af8 <adc_init+0x358>)
     8b2:	4798      	blx	r3
     8b4:	e7dd      	b.n	872 <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
     8b6:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     8b8:	2250      	movs	r2, #80	; 0x50
     8ba:	498e      	ldr	r1, [pc, #568]	; (af4 <adc_init+0x354>)
     8bc:	a802      	add	r0, sp, #8
     8be:	4b8c      	ldr	r3, [pc, #560]	; (af0 <adc_init+0x350>)
     8c0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     8c2:	2c13      	cmp	r4, #19
     8c4:	d915      	bls.n	8f2 <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
     8c6:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     8c8:	2250      	movs	r2, #80	; 0x50
     8ca:	498a      	ldr	r1, [pc, #552]	; (af4 <adc_init+0x354>)
     8cc:	a802      	add	r0, sp, #8
     8ce:	4b88      	ldr	r3, [pc, #544]	; (af0 <adc_init+0x350>)
     8d0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     8d2:	2c13      	cmp	r4, #19
     8d4:	d8cd      	bhi.n	872 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     8d6:	00a4      	lsls	r4, r4, #2
     8d8:	ab02      	add	r3, sp, #8
     8da:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8dc:	a901      	add	r1, sp, #4
     8de:	2300      	movs	r3, #0
     8e0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     8e2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     8e4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     8e6:	3301      	adds	r3, #1
     8e8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     8ea:	b2c0      	uxtb	r0, r0
     8ec:	4b82      	ldr	r3, [pc, #520]	; (af8 <adc_init+0x358>)
     8ee:	4798      	blx	r3
     8f0:	e7bf      	b.n	872 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     8f2:	00a4      	lsls	r4, r4, #2
     8f4:	ab02      	add	r3, sp, #8
     8f6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8f8:	a901      	add	r1, sp, #4
     8fa:	2300      	movs	r3, #0
     8fc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     8fe:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     900:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     902:	3301      	adds	r3, #1
     904:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     906:	b2c0      	uxtb	r0, r0
     908:	4b7b      	ldr	r3, [pc, #492]	; (af8 <adc_init+0x358>)
     90a:	4798      	blx	r3
     90c:	e7db      	b.n	8c6 <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     90e:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     910:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     912:	2102      	movs	r1, #2
     914:	e01a      	b.n	94c <adc_init+0x1ac>
		adjres = config->divide_result;
     916:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     918:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     91a:	2410      	movs	r4, #16
     91c:	e016      	b.n	94c <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     91e:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     920:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     922:	2101      	movs	r1, #1
     924:	e012      	b.n	94c <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     926:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     928:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     92a:	2100      	movs	r1, #0
     92c:	e00e      	b.n	94c <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     92e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     930:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     932:	2100      	movs	r1, #0
     934:	e00a      	b.n	94c <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     936:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     938:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     93a:	2100      	movs	r1, #0
     93c:	e006      	b.n	94c <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     93e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     940:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     942:	2100      	movs	r1, #0
     944:	e002      	b.n	94c <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     946:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     948:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     94a:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     94c:	0109      	lsls	r1, r1, #4
     94e:	2270      	movs	r2, #112	; 0x70
     950:	400a      	ands	r2, r1
     952:	4313      	orrs	r3, r2
     954:	4642      	mov	r2, r8
     956:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     958:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     95a:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     95c:	2b3f      	cmp	r3, #63	; 0x3f
     95e:	d900      	bls.n	962 <adc_init+0x1c2>
     960:	e731      	b.n	7c6 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     962:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     964:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     966:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     968:	b25b      	sxtb	r3, r3
     96a:	2b00      	cmp	r3, #0
     96c:	dbfb      	blt.n	966 <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     96e:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     970:	8872      	ldrh	r2, [r6, #2]
     972:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     974:	2224      	movs	r2, #36	; 0x24
     976:	5cb2      	ldrb	r2, [r6, r2]
     978:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     97a:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     97c:	7d32      	ldrb	r2, [r6, #20]
     97e:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     980:	4313      	orrs	r3, r2
     982:	7cb2      	ldrb	r2, [r6, #18]
     984:	0052      	lsls	r2, r2, #1
     986:	4313      	orrs	r3, r2
     988:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     98a:	4642      	mov	r2, r8
     98c:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     98e:	7e33      	ldrb	r3, [r6, #24]
     990:	2b00      	cmp	r3, #0
     992:	d020      	beq.n	9d6 <adc_init+0x236>
		switch (resolution) {
     994:	2c10      	cmp	r4, #16
     996:	d100      	bne.n	99a <adc_init+0x1fa>
     998:	e0d6      	b.n	b48 <adc_init+0x3a8>
     99a:	d800      	bhi.n	99e <adc_init+0x1fe>
     99c:	e080      	b.n	aa0 <adc_init+0x300>
     99e:	2c20      	cmp	r4, #32
     9a0:	d100      	bne.n	9a4 <adc_init+0x204>
     9a2:	e0b3      	b.n	b0c <adc_init+0x36c>
     9a4:	2c30      	cmp	r4, #48	; 0x30
     9a6:	d116      	bne.n	9d6 <adc_init+0x236>
			if (config->differential_mode &&
     9a8:	7cf2      	ldrb	r2, [r6, #19]
     9aa:	2a00      	cmp	r2, #0
     9ac:	d00a      	beq.n	9c4 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
     9ae:	69f2      	ldr	r2, [r6, #28]
     9b0:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     9b2:	2017      	movs	r0, #23
			if (config->differential_mode &&
     9b4:	2aff      	cmp	r2, #255	; 0xff
     9b6:	d900      	bls.n	9ba <adc_init+0x21a>
     9b8:	e705      	b.n	7c6 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     9ba:	6a32      	ldr	r2, [r6, #32]
     9bc:	3280      	adds	r2, #128	; 0x80
     9be:	2aff      	cmp	r2, #255	; 0xff
     9c0:	d900      	bls.n	9c4 <adc_init+0x224>
     9c2:	e700      	b.n	7c6 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     9c4:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     9c6:	69f2      	ldr	r2, [r6, #28]
     9c8:	2aff      	cmp	r2, #255	; 0xff
     9ca:	dd00      	ble.n	9ce <adc_init+0x22e>
     9cc:	e6fb      	b.n	7c6 <adc_init+0x26>
     9ce:	6a32      	ldr	r2, [r6, #32]
     9d0:	2aff      	cmp	r2, #255	; 0xff
     9d2:	dd00      	ble.n	9d6 <adc_init+0x236>
     9d4:	e6f7      	b.n	7c6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     9d6:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     9d8:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     9da:	b252      	sxtb	r2, r2
     9dc:	2a00      	cmp	r2, #0
     9de:	dbfb      	blt.n	9d8 <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
     9e0:	4642      	mov	r2, r8
     9e2:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     9e4:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     9e6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     9e8:	b25b      	sxtb	r3, r3
     9ea:	2b00      	cmp	r3, #0
     9ec:	dbfb      	blt.n	9e6 <adc_init+0x246>
	adc_module->WINLT.reg =
     9ee:	8bb3      	ldrh	r3, [r6, #28]
     9f0:	4642      	mov	r2, r8
     9f2:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     9f4:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     9f6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     9f8:	b25b      	sxtb	r3, r3
     9fa:	2b00      	cmp	r3, #0
     9fc:	dbfb      	blt.n	9f6 <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     9fe:	8c33      	ldrh	r3, [r6, #32]
     a00:	4642      	mov	r2, r8
     a02:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     a04:	232c      	movs	r3, #44	; 0x2c
     a06:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     a08:	2b00      	cmp	r3, #0
     a0a:	d005      	beq.n	a18 <adc_init+0x278>
		inputs_to_scan--;
     a0c:	3b01      	subs	r3, #1
     a0e:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     a10:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     a12:	2b0f      	cmp	r3, #15
     a14:	d900      	bls.n	a18 <adc_init+0x278>
     a16:	e6d6      	b.n	7c6 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     a18:	222b      	movs	r2, #43	; 0x2b
     a1a:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     a1c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     a1e:	290f      	cmp	r1, #15
     a20:	d900      	bls.n	a24 <adc_init+0x284>
     a22:	e6d0      	b.n	7c6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     a24:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     a26:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     a28:	b252      	sxtb	r2, r2
     a2a:	2a00      	cmp	r2, #0
     a2c:	dbfb      	blt.n	a26 <adc_init+0x286>
			config->negative_input |
     a2e:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     a30:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     a32:	4302      	orrs	r2, r0
     a34:	68b0      	ldr	r0, [r6, #8]
     a36:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     a38:	0509      	lsls	r1, r1, #20
			config->negative_input |
     a3a:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     a3c:	041b      	lsls	r3, r3, #16
			config->negative_input |
     a3e:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     a40:	4642      	mov	r2, r8
     a42:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     a44:	232a      	movs	r3, #42	; 0x2a
     a46:	5cf3      	ldrb	r3, [r6, r3]
     a48:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     a4a:	230f      	movs	r3, #15
     a4c:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     a4e:	3315      	adds	r3, #21
     a50:	5cf3      	ldrb	r3, [r6, r3]
     a52:	2b00      	cmp	r3, #0
     a54:	d012      	beq.n	a7c <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     a56:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     a58:	4a29      	ldr	r2, [pc, #164]	; (b00 <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
     a5a:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     a5c:	4293      	cmp	r3, r2
     a5e:	d900      	bls.n	a62 <adc_init+0x2c2>
     a60:	e6b1      	b.n	7c6 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     a62:	4642      	mov	r2, r8
     a64:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     a66:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     a68:	2380      	movs	r3, #128	; 0x80
     a6a:	011b      	lsls	r3, r3, #4
     a6c:	18d3      	adds	r3, r2, r3
     a6e:	4924      	ldr	r1, [pc, #144]	; (b00 <adc_init+0x360>)
     a70:	b29b      	uxth	r3, r3
     a72:	428b      	cmp	r3, r1
     a74:	d900      	bls.n	a78 <adc_init+0x2d8>
     a76:	e6a6      	b.n	7c6 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     a78:	4643      	mov	r3, r8
     a7a:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     a7c:	4b21      	ldr	r3, [pc, #132]	; (b04 <adc_init+0x364>)
     a7e:	681b      	ldr	r3, [r3, #0]
     a80:	015b      	lsls	r3, r3, #5
     a82:	22e0      	movs	r2, #224	; 0xe0
     a84:	00d2      	lsls	r2, r2, #3
     a86:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     a88:	4a1f      	ldr	r2, [pc, #124]	; (b08 <adc_init+0x368>)
     a8a:	6851      	ldr	r1, [r2, #4]
     a8c:	0149      	lsls	r1, r1, #5
     a8e:	6812      	ldr	r2, [r2, #0]
     a90:	0ed2      	lsrs	r2, r2, #27
     a92:	430a      	orrs	r2, r1
     a94:	b2d2      	uxtb	r2, r2
			) |
     a96:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     a98:	4642      	mov	r2, r8
     a9a:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     a9c:	2000      	movs	r0, #0
     a9e:	e692      	b.n	7c6 <adc_init+0x26>
		switch (resolution) {
     aa0:	2c00      	cmp	r4, #0
     aa2:	d198      	bne.n	9d6 <adc_init+0x236>
			if (config->differential_mode &&
     aa4:	7cf2      	ldrb	r2, [r6, #19]
     aa6:	2a00      	cmp	r2, #0
     aa8:	d00f      	beq.n	aca <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
     aaa:	69f2      	ldr	r2, [r6, #28]
     aac:	2180      	movs	r1, #128	; 0x80
     aae:	0109      	lsls	r1, r1, #4
     ab0:	468c      	mov	ip, r1
     ab2:	4462      	add	r2, ip
			if (config->differential_mode &&
     ab4:	4912      	ldr	r1, [pc, #72]	; (b00 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     ab6:	2017      	movs	r0, #23
			if (config->differential_mode &&
     ab8:	428a      	cmp	r2, r1
     aba:	d900      	bls.n	abe <adc_init+0x31e>
     abc:	e683      	b.n	7c6 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     abe:	6a32      	ldr	r2, [r6, #32]
     ac0:	4462      	add	r2, ip
     ac2:	490f      	ldr	r1, [pc, #60]	; (b00 <adc_init+0x360>)
     ac4:	428a      	cmp	r2, r1
     ac6:	d900      	bls.n	aca <adc_init+0x32a>
     ac8:	e67d      	b.n	7c6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     aca:	4a0d      	ldr	r2, [pc, #52]	; (b00 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     acc:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     ace:	69f1      	ldr	r1, [r6, #28]
     ad0:	4291      	cmp	r1, r2
     ad2:	dd00      	ble.n	ad6 <adc_init+0x336>
     ad4:	e677      	b.n	7c6 <adc_init+0x26>
     ad6:	6a31      	ldr	r1, [r6, #32]
     ad8:	4291      	cmp	r1, r2
     ada:	dd00      	ble.n	ade <adc_init+0x33e>
     adc:	e673      	b.n	7c6 <adc_init+0x26>
     ade:	e77a      	b.n	9d6 <adc_init+0x236>
     ae0:	40000400 	.word	0x40000400
     ae4:	40000800 	.word	0x40000800
     ae8:	00003155 	.word	0x00003155
     aec:	000030c9 	.word	0x000030c9
     af0:	000036e5 	.word	0x000036e5
     af4:	00008ae4 	.word	0x00008ae4
     af8:	0000324d 	.word	0x0000324d
     afc:	00008a10 	.word	0x00008a10
     b00:	00000fff 	.word	0x00000fff
     b04:	00806024 	.word	0x00806024
     b08:	00806020 	.word	0x00806020
			if (config->differential_mode &&
     b0c:	7cf2      	ldrb	r2, [r6, #19]
     b0e:	2a00      	cmp	r2, #0
     b10:	d00f      	beq.n	b32 <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
     b12:	69f2      	ldr	r2, [r6, #28]
     b14:	2180      	movs	r1, #128	; 0x80
     b16:	0089      	lsls	r1, r1, #2
     b18:	468c      	mov	ip, r1
     b1a:	4462      	add	r2, ip
			if (config->differential_mode &&
     b1c:	491a      	ldr	r1, [pc, #104]	; (b88 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     b1e:	2017      	movs	r0, #23
			if (config->differential_mode &&
     b20:	428a      	cmp	r2, r1
     b22:	d900      	bls.n	b26 <adc_init+0x386>
     b24:	e64f      	b.n	7c6 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     b26:	6a32      	ldr	r2, [r6, #32]
     b28:	4462      	add	r2, ip
     b2a:	4917      	ldr	r1, [pc, #92]	; (b88 <adc_init+0x3e8>)
     b2c:	428a      	cmp	r2, r1
     b2e:	d900      	bls.n	b32 <adc_init+0x392>
     b30:	e649      	b.n	7c6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     b32:	4a15      	ldr	r2, [pc, #84]	; (b88 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     b34:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     b36:	69f1      	ldr	r1, [r6, #28]
     b38:	4291      	cmp	r1, r2
     b3a:	dd00      	ble.n	b3e <adc_init+0x39e>
     b3c:	e643      	b.n	7c6 <adc_init+0x26>
     b3e:	6a31      	ldr	r1, [r6, #32]
     b40:	4291      	cmp	r1, r2
     b42:	dd00      	ble.n	b46 <adc_init+0x3a6>
     b44:	e63f      	b.n	7c6 <adc_init+0x26>
     b46:	e746      	b.n	9d6 <adc_init+0x236>
			if (config->differential_mode &&
     b48:	7cf2      	ldrb	r2, [r6, #19]
     b4a:	2a00      	cmp	r2, #0
     b4c:	d00f      	beq.n	b6e <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
     b4e:	69f2      	ldr	r2, [r6, #28]
     b50:	2180      	movs	r1, #128	; 0x80
     b52:	0209      	lsls	r1, r1, #8
     b54:	468c      	mov	ip, r1
     b56:	4462      	add	r2, ip
			if (config->differential_mode &&
     b58:	490c      	ldr	r1, [pc, #48]	; (b8c <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     b5a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     b5c:	428a      	cmp	r2, r1
     b5e:	d900      	bls.n	b62 <adc_init+0x3c2>
     b60:	e631      	b.n	7c6 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     b62:	6a32      	ldr	r2, [r6, #32]
     b64:	4462      	add	r2, ip
     b66:	4909      	ldr	r1, [pc, #36]	; (b8c <adc_init+0x3ec>)
     b68:	428a      	cmp	r2, r1
     b6a:	d900      	bls.n	b6e <adc_init+0x3ce>
     b6c:	e62b      	b.n	7c6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     b6e:	4a07      	ldr	r2, [pc, #28]	; (b8c <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     b70:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     b72:	69f1      	ldr	r1, [r6, #28]
     b74:	4291      	cmp	r1, r2
     b76:	dd00      	ble.n	b7a <adc_init+0x3da>
     b78:	e625      	b.n	7c6 <adc_init+0x26>
     b7a:	6a31      	ldr	r1, [r6, #32]
     b7c:	4291      	cmp	r1, r2
     b7e:	dd00      	ble.n	b82 <adc_init+0x3e2>
     b80:	e621      	b.n	7c6 <adc_init+0x26>
     b82:	e728      	b.n	9d6 <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
     b84:	2017      	movs	r0, #23
     b86:	e61e      	b.n	7c6 <adc_init+0x26>
     b88:	000003ff 	.word	0x000003ff
     b8c:	0000ffff 	.word	0x0000ffff

00000b90 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     b90:	b5f0      	push	{r4, r5, r6, r7, lr}
     b92:	46c6      	mov	lr, r8
     b94:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     b96:	0080      	lsls	r0, r0, #2
     b98:	4b0e      	ldr	r3, [pc, #56]	; (bd4 <_tcc_interrupt_handler+0x44>)
     b9a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     b9c:	683b      	ldr	r3, [r7, #0]
     b9e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     ba4:	4013      	ands	r3, r2
     ba6:	401e      	ands	r6, r3
     ba8:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     baa:	4b0b      	ldr	r3, [pc, #44]	; (bd8 <_tcc_interrupt_handler+0x48>)
     bac:	4698      	mov	r8, r3
     bae:	e002      	b.n	bb6 <_tcc_interrupt_handler+0x26>
     bb0:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     bb2:	2c30      	cmp	r4, #48	; 0x30
     bb4:	d00a      	beq.n	bcc <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     bb6:	4643      	mov	r3, r8
     bb8:	58e5      	ldr	r5, [r4, r3]
     bba:	4235      	tst	r5, r6
     bbc:	d0f8      	beq.n	bb0 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     bbe:	193b      	adds	r3, r7, r4
     bc0:	685b      	ldr	r3, [r3, #4]
     bc2:	0038      	movs	r0, r7
     bc4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     bc6:	683b      	ldr	r3, [r7, #0]
     bc8:	62dd      	str	r5, [r3, #44]	; 0x2c
     bca:	e7f1      	b.n	bb0 <_tcc_interrupt_handler+0x20>
		}
	}
}
     bcc:	bc04      	pop	{r2}
     bce:	4690      	mov	r8, r2
     bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	2000025c 	.word	0x2000025c
     bd8:	00008b34 	.word	0x00008b34

00000bdc <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     bdc:	b510      	push	{r4, lr}
     bde:	2000      	movs	r0, #0
     be0:	4b01      	ldr	r3, [pc, #4]	; (be8 <TCC0_Handler+0xc>)
     be2:	4798      	blx	r3
     be4:	bd10      	pop	{r4, pc}
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	00000b91 	.word	0x00000b91

00000bec <TCC1_Handler>:
     bec:	b510      	push	{r4, lr}
     bee:	2001      	movs	r0, #1
     bf0:	4b01      	ldr	r3, [pc, #4]	; (bf8 <TCC1_Handler+0xc>)
     bf2:	4798      	blx	r3
     bf4:	bd10      	pop	{r4, pc}
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	00000b91 	.word	0x00000b91

00000bfc <TCC2_Handler>:
     bfc:	b510      	push	{r4, lr}
     bfe:	2002      	movs	r0, #2
     c00:	4b01      	ldr	r3, [pc, #4]	; (c08 <TCC2_Handler+0xc>)
     c02:	4798      	blx	r3
     c04:	bd10      	pop	{r4, pc}
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	00000b91 	.word	0x00000b91

00000c0c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     c0c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     c0e:	2207      	movs	r2, #7
     c10:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     c12:	421a      	tst	r2, r3
     c14:	d1fc      	bne.n	c10 <_i2c_master_wait_for_sync+0x4>
}
     c16:	4770      	bx	lr

00000c18 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     c18:	b5f0      	push	{r4, r5, r6, r7, lr}
     c1a:	46d6      	mov	lr, sl
     c1c:	464f      	mov	r7, r9
     c1e:	4646      	mov	r6, r8
     c20:	b5c0      	push	{r6, r7, lr}
     c22:	b08a      	sub	sp, #40	; 0x28
     c24:	0006      	movs	r6, r0
     c26:	000f      	movs	r7, r1
     c28:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     c2a:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c2c:	0008      	movs	r0, r1
     c2e:	4b97      	ldr	r3, [pc, #604]	; (e8c <i2c_master_init+0x274>)
     c30:	4798      	blx	r3
     c32:	4a97      	ldr	r2, [pc, #604]	; (e90 <i2c_master_init+0x278>)
     c34:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     c36:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     c38:	2301      	movs	r3, #1
     c3a:	40ab      	lsls	r3, r5
     c3c:	430b      	orrs	r3, r1
     c3e:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     c40:	a909      	add	r1, sp, #36	; 0x24
     c42:	7b23      	ldrb	r3, [r4, #12]
     c44:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c46:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     c48:	b2c5      	uxtb	r5, r0
     c4a:	0028      	movs	r0, r5
     c4c:	4b91      	ldr	r3, [pc, #580]	; (e94 <i2c_master_init+0x27c>)
     c4e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     c50:	0028      	movs	r0, r5
     c52:	4b91      	ldr	r3, [pc, #580]	; (e98 <i2c_master_init+0x280>)
     c54:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     c56:	7b20      	ldrb	r0, [r4, #12]
     c58:	2100      	movs	r1, #0
     c5a:	4b90      	ldr	r3, [pc, #576]	; (e9c <i2c_master_init+0x284>)
     c5c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     c5e:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     c60:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     c62:	079b      	lsls	r3, r3, #30
     c64:	d505      	bpl.n	c72 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     c66:	b00a      	add	sp, #40	; 0x28
     c68:	bc1c      	pop	{r2, r3, r4}
     c6a:	4690      	mov	r8, r2
     c6c:	4699      	mov	r9, r3
     c6e:	46a2      	mov	sl, r4
     c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     c72:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     c74:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     c76:	07db      	lsls	r3, r3, #31
     c78:	d4f5      	bmi.n	c66 <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     c7a:	2314      	movs	r3, #20
     c7c:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c7e:	6833      	ldr	r3, [r6, #0]
     c80:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     c82:	0018      	movs	r0, r3
     c84:	4b81      	ldr	r3, [pc, #516]	; (e8c <i2c_master_init+0x274>)
     c86:	4798      	blx	r3
     c88:	0005      	movs	r5, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c8a:	2380      	movs	r3, #128	; 0x80
     c8c:	aa08      	add	r2, sp, #32
     c8e:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c90:	2300      	movs	r3, #0
     c92:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     c94:	2201      	movs	r2, #1
     c96:	a908      	add	r1, sp, #32
     c98:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     c9a:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     c9c:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     c9e:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     ca0:	2800      	cmp	r0, #0
     ca2:	d100      	bne.n	ca6 <i2c_master_init+0x8e>
     ca4:	e0af      	b.n	e06 <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
     ca6:	ab08      	add	r3, sp, #32
     ca8:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     caa:	2302      	movs	r3, #2
     cac:	aa08      	add	r2, sp, #32
     cae:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     cb0:	0c00      	lsrs	r0, r0, #16
     cb2:	b2c0      	uxtb	r0, r0
     cb4:	0011      	movs	r1, r2
     cb6:	4b7a      	ldr	r3, [pc, #488]	; (ea0 <i2c_master_init+0x288>)
     cb8:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     cba:	2f00      	cmp	r7, #0
     cbc:	d100      	bne.n	cc0 <i2c_master_init+0xa8>
     cbe:	e0a7      	b.n	e10 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
     cc0:	ab08      	add	r3, sp, #32
     cc2:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     cc4:	2302      	movs	r3, #2
     cc6:	aa08      	add	r2, sp, #32
     cc8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     cca:	0c3f      	lsrs	r7, r7, #16
     ccc:	b2f8      	uxtb	r0, r7
     cce:	0011      	movs	r1, r2
     cd0:	4b73      	ldr	r3, [pc, #460]	; (ea0 <i2c_master_init+0x288>)
     cd2:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     cd4:	8aa3      	ldrh	r3, [r4, #20]
     cd6:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     cd8:	8ae3      	ldrh	r3, [r4, #22]
     cda:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     cdc:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     cde:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     ce0:	2b00      	cmp	r3, #0
     ce2:	d104      	bne.n	cee <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ce4:	4b6f      	ldr	r3, [pc, #444]	; (ea4 <i2c_master_init+0x28c>)
     ce6:	789b      	ldrb	r3, [r3, #2]
     ce8:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     cea:	0fdb      	lsrs	r3, r3, #31
     cec:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     cee:	68a1      	ldr	r1, [r4, #8]
     cf0:	6923      	ldr	r3, [r4, #16]
     cf2:	430b      	orrs	r3, r1
     cf4:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     cf6:	2224      	movs	r2, #36	; 0x24
     cf8:	5ca2      	ldrb	r2, [r4, r2]
     cfa:	2a00      	cmp	r2, #0
     cfc:	d002      	beq.n	d04 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     cfe:	2280      	movs	r2, #128	; 0x80
     d00:	05d2      	lsls	r2, r2, #23
     d02:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     d04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     d06:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     d08:	222c      	movs	r2, #44	; 0x2c
     d0a:	5ca2      	ldrb	r2, [r4, r2]
     d0c:	2a00      	cmp	r2, #0
     d0e:	d103      	bne.n	d18 <i2c_master_init+0x100>
     d10:	2280      	movs	r2, #128	; 0x80
     d12:	0492      	lsls	r2, r2, #18
     d14:	4291      	cmp	r1, r2
     d16:	d102      	bne.n	d1e <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     d18:	2280      	movs	r2, #128	; 0x80
     d1a:	0512      	lsls	r2, r2, #20
     d1c:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     d1e:	222d      	movs	r2, #45	; 0x2d
     d20:	5ca2      	ldrb	r2, [r4, r2]
     d22:	2a00      	cmp	r2, #0
     d24:	d002      	beq.n	d2c <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     d26:	2280      	movs	r2, #128	; 0x80
     d28:	0412      	lsls	r2, r2, #16
     d2a:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     d2c:	222e      	movs	r2, #46	; 0x2e
     d2e:	5ca2      	ldrb	r2, [r4, r2]
     d30:	2a00      	cmp	r2, #0
     d32:	d002      	beq.n	d3a <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     d34:	2280      	movs	r2, #128	; 0x80
     d36:	03d2      	lsls	r2, r2, #15
     d38:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     d3a:	4642      	mov	r2, r8
     d3c:	6812      	ldr	r2, [r2, #0]
     d3e:	4313      	orrs	r3, r2
     d40:	4642      	mov	r2, r8
     d42:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     d44:	2380      	movs	r3, #128	; 0x80
     d46:	005b      	lsls	r3, r3, #1
     d48:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     d4a:	0028      	movs	r0, r5
     d4c:	3014      	adds	r0, #20
     d4e:	b2c0      	uxtb	r0, r0
     d50:	4b55      	ldr	r3, [pc, #340]	; (ea8 <i2c_master_init+0x290>)
     d52:	4798      	blx	r3
     d54:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     d56:	23fa      	movs	r3, #250	; 0xfa
     d58:	009b      	lsls	r3, r3, #2
     d5a:	6822      	ldr	r2, [r4, #0]
     d5c:	435a      	muls	r2, r3
     d5e:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     d60:	6863      	ldr	r3, [r4, #4]
     d62:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     d64:	4d51      	ldr	r5, [pc, #324]	; (eac <i2c_master_init+0x294>)
     d66:	47a8      	blx	r5
     d68:	9000      	str	r0, [sp, #0]
     d6a:	9101      	str	r1, [sp, #4]
     d6c:	464b      	mov	r3, r9
     d6e:	0058      	lsls	r0, r3, #1
     d70:	47a8      	blx	r5
     d72:	9002      	str	r0, [sp, #8]
     d74:	9103      	str	r1, [sp, #12]
     d76:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     d78:	47a8      	blx	r5
     d7a:	9004      	str	r0, [sp, #16]
     d7c:	9105      	str	r1, [sp, #20]
     d7e:	4f4c      	ldr	r7, [pc, #304]	; (eb0 <i2c_master_init+0x298>)
     d80:	4a4c      	ldr	r2, [pc, #304]	; (eb4 <i2c_master_init+0x29c>)
     d82:	4b4d      	ldr	r3, [pc, #308]	; (eb8 <i2c_master_init+0x2a0>)
     d84:	9800      	ldr	r0, [sp, #0]
     d86:	9901      	ldr	r1, [sp, #4]
     d88:	47b8      	blx	r7
     d8a:	0002      	movs	r2, r0
     d8c:	000b      	movs	r3, r1
     d8e:	9804      	ldr	r0, [sp, #16]
     d90:	9905      	ldr	r1, [sp, #20]
     d92:	47b8      	blx	r7
     d94:	4e49      	ldr	r6, [pc, #292]	; (ebc <i2c_master_init+0x2a4>)
     d96:	2200      	movs	r2, #0
     d98:	4b49      	ldr	r3, [pc, #292]	; (ec0 <i2c_master_init+0x2a8>)
     d9a:	47b0      	blx	r6
     d9c:	9004      	str	r0, [sp, #16]
     d9e:	9105      	str	r1, [sp, #20]
     da0:	4648      	mov	r0, r9
     da2:	47a8      	blx	r5
     da4:	0002      	movs	r2, r0
     da6:	000b      	movs	r3, r1
     da8:	9804      	ldr	r0, [sp, #16]
     daa:	9905      	ldr	r1, [sp, #20]
     dac:	47b8      	blx	r7
     dae:	0002      	movs	r2, r0
     db0:	000b      	movs	r3, r1
     db2:	4d44      	ldr	r5, [pc, #272]	; (ec4 <i2c_master_init+0x2ac>)
     db4:	9800      	ldr	r0, [sp, #0]
     db6:	9901      	ldr	r1, [sp, #4]
     db8:	47a8      	blx	r5
     dba:	9a02      	ldr	r2, [sp, #8]
     dbc:	9b03      	ldr	r3, [sp, #12]
     dbe:	47b0      	blx	r6
     dc0:	2200      	movs	r2, #0
     dc2:	4b41      	ldr	r3, [pc, #260]	; (ec8 <i2c_master_init+0x2b0>)
     dc4:	47a8      	blx	r5
     dc6:	9a02      	ldr	r2, [sp, #8]
     dc8:	9b03      	ldr	r3, [sp, #12]
     dca:	4d40      	ldr	r5, [pc, #256]	; (ecc <i2c_master_init+0x2b4>)
     dcc:	47a8      	blx	r5
     dce:	4b40      	ldr	r3, [pc, #256]	; (ed0 <i2c_master_init+0x2b8>)
     dd0:	4798      	blx	r3
     dd2:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     dd4:	2380      	movs	r3, #128	; 0x80
     dd6:	049b      	lsls	r3, r3, #18
     dd8:	68a2      	ldr	r2, [r4, #8]
     dda:	429a      	cmp	r2, r3
     ddc:	d01e      	beq.n	e1c <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     dde:	0003      	movs	r3, r0
     de0:	2040      	movs	r0, #64	; 0x40
     de2:	2dff      	cmp	r5, #255	; 0xff
     de4:	d900      	bls.n	de8 <i2c_master_init+0x1d0>
     de6:	e73e      	b.n	c66 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     de8:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     dea:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     dec:	25ff      	movs	r5, #255	; 0xff
     dee:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     df0:	0624      	lsls	r4, r4, #24
     df2:	4325      	orrs	r5, r4
     df4:	0400      	lsls	r0, r0, #16
     df6:	23ff      	movs	r3, #255	; 0xff
     df8:	041b      	lsls	r3, r3, #16
     dfa:	4018      	ands	r0, r3
     dfc:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     dfe:	4643      	mov	r3, r8
     e00:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     e02:	2000      	movs	r0, #0
     e04:	e72f      	b.n	c66 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     e06:	2100      	movs	r1, #0
     e08:	4640      	mov	r0, r8
     e0a:	4b32      	ldr	r3, [pc, #200]	; (ed4 <i2c_master_init+0x2bc>)
     e0c:	4798      	blx	r3
     e0e:	e74a      	b.n	ca6 <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     e10:	2101      	movs	r1, #1
     e12:	4640      	mov	r0, r8
     e14:	4b2f      	ldr	r3, [pc, #188]	; (ed4 <i2c_master_init+0x2bc>)
     e16:	4798      	blx	r3
     e18:	0007      	movs	r7, r0
     e1a:	e751      	b.n	cc0 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     e1c:	26fa      	movs	r6, #250	; 0xfa
     e1e:	00b6      	lsls	r6, r6, #2
     e20:	4653      	mov	r3, sl
     e22:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     e24:	9800      	ldr	r0, [sp, #0]
     e26:	9901      	ldr	r1, [sp, #4]
     e28:	0002      	movs	r2, r0
     e2a:	000b      	movs	r3, r1
     e2c:	4c23      	ldr	r4, [pc, #140]	; (ebc <i2c_master_init+0x2a4>)
     e2e:	47a0      	blx	r4
     e30:	9000      	str	r0, [sp, #0]
     e32:	9101      	str	r1, [sp, #4]
     e34:	0030      	movs	r0, r6
     e36:	4b1d      	ldr	r3, [pc, #116]	; (eac <i2c_master_init+0x294>)
     e38:	4798      	blx	r3
     e3a:	2200      	movs	r2, #0
     e3c:	4b26      	ldr	r3, [pc, #152]	; (ed8 <i2c_master_init+0x2c0>)
     e3e:	47b8      	blx	r7
     e40:	0002      	movs	r2, r0
     e42:	000b      	movs	r3, r1
     e44:	9800      	ldr	r0, [sp, #0]
     e46:	9901      	ldr	r1, [sp, #4]
     e48:	4c20      	ldr	r4, [pc, #128]	; (ecc <i2c_master_init+0x2b4>)
     e4a:	47a0      	blx	r4
     e4c:	2200      	movs	r2, #0
     e4e:	4b1e      	ldr	r3, [pc, #120]	; (ec8 <i2c_master_init+0x2b0>)
     e50:	4c1c      	ldr	r4, [pc, #112]	; (ec4 <i2c_master_init+0x2ac>)
     e52:	47a0      	blx	r4
     e54:	4b1e      	ldr	r3, [pc, #120]	; (ed0 <i2c_master_init+0x2b8>)
     e56:	4798      	blx	r3
     e58:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     e5a:	d00c      	beq.n	e76 <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     e5c:	0031      	movs	r1, r6
     e5e:	9807      	ldr	r0, [sp, #28]
     e60:	4b1e      	ldr	r3, [pc, #120]	; (edc <i2c_master_init+0x2c4>)
     e62:	4798      	blx	r3
     e64:	3802      	subs	r0, #2
     e66:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     e68:	002b      	movs	r3, r5
     e6a:	2dff      	cmp	r5, #255	; 0xff
     e6c:	d80c      	bhi.n	e88 <i2c_master_init+0x270>
     e6e:	28ff      	cmp	r0, #255	; 0xff
     e70:	d9bc      	bls.n	dec <i2c_master_init+0x1d4>
     e72:	2040      	movs	r0, #64	; 0x40
     e74:	e6f7      	b.n	c66 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     e76:	0071      	lsls	r1, r6, #1
     e78:	1e48      	subs	r0, r1, #1
     e7a:	9b07      	ldr	r3, [sp, #28]
     e7c:	469c      	mov	ip, r3
     e7e:	4460      	add	r0, ip
     e80:	4b16      	ldr	r3, [pc, #88]	; (edc <i2c_master_init+0x2c4>)
     e82:	4798      	blx	r3
     e84:	3801      	subs	r0, #1
     e86:	e7ef      	b.n	e68 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     e88:	2040      	movs	r0, #64	; 0x40
     e8a:	e6ec      	b.n	c66 <i2c_master_init+0x4e>
     e8c:	00002ad9 	.word	0x00002ad9
     e90:	40000400 	.word	0x40000400
     e94:	00003155 	.word	0x00003155
     e98:	000030c9 	.word	0x000030c9
     e9c:	00002915 	.word	0x00002915
     ea0:	0000324d 	.word	0x0000324d
     ea4:	41002000 	.word	0x41002000
     ea8:	00003171 	.word	0x00003171
     eac:	00008699 	.word	0x00008699
     eb0:	00007a41 	.word	0x00007a41
     eb4:	e826d695 	.word	0xe826d695
     eb8:	3e112e0b 	.word	0x3e112e0b
     ebc:	00006bb9 	.word	0x00006bb9
     ec0:	40240000 	.word	0x40240000
     ec4:	00007f41 	.word	0x00007f41
     ec8:	3ff00000 	.word	0x3ff00000
     ecc:	000071d9 	.word	0x000071d9
     ed0:	000085ad 	.word	0x000085ad
     ed4:	00002961 	.word	0x00002961
     ed8:	40080000 	.word	0x40080000
     edc:	0000628d 	.word	0x0000628d

00000ee0 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ee0:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     ee2:	7e1a      	ldrb	r2, [r3, #24]
     ee4:	0792      	lsls	r2, r2, #30
     ee6:	d507      	bpl.n	ef8 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     ee8:	2202      	movs	r2, #2
     eea:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     eec:	8b5b      	ldrh	r3, [r3, #26]
     eee:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     ef0:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     ef2:	17db      	asrs	r3, r3, #31
     ef4:	4018      	ands	r0, r3
}
     ef6:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     ef8:	8b5a      	ldrh	r2, [r3, #26]
     efa:	0752      	lsls	r2, r2, #29
     efc:	d506      	bpl.n	f0c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     efe:	6859      	ldr	r1, [r3, #4]
     f00:	22c0      	movs	r2, #192	; 0xc0
     f02:	0292      	lsls	r2, r2, #10
     f04:	430a      	orrs	r2, r1
     f06:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     f08:	2018      	movs	r0, #24
     f0a:	e7f4      	b.n	ef6 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     f0c:	2000      	movs	r0, #0
     f0e:	e7f2      	b.n	ef6 <_i2c_master_address_response+0x16>

00000f10 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     f10:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f12:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     f14:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     f16:	2401      	movs	r4, #1
     f18:	2502      	movs	r5, #2
     f1a:	7e11      	ldrb	r1, [r2, #24]
     f1c:	4221      	tst	r1, r4
     f1e:	d10b      	bne.n	f38 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     f20:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     f22:	4229      	tst	r1, r5
     f24:	d106      	bne.n	f34 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     f26:	3301      	adds	r3, #1
     f28:	b29b      	uxth	r3, r3
     f2a:	8901      	ldrh	r1, [r0, #8]
     f2c:	4299      	cmp	r1, r3
     f2e:	d8f4      	bhi.n	f1a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     f30:	2012      	movs	r0, #18
     f32:	e002      	b.n	f3a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     f34:	2000      	movs	r0, #0
     f36:	e000      	b.n	f3a <_i2c_master_wait_for_bus+0x2a>
     f38:	2000      	movs	r0, #0
}
     f3a:	bd30      	pop	{r4, r5, pc}

00000f3c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     f3c:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f3e:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     f40:	6862      	ldr	r2, [r4, #4]
     f42:	2380      	movs	r3, #128	; 0x80
     f44:	02db      	lsls	r3, r3, #11
     f46:	4313      	orrs	r3, r2
     f48:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     f4a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     f4c:	4b02      	ldr	r3, [pc, #8]	; (f58 <_i2c_master_send_hs_master_code+0x1c>)
     f4e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     f50:	2301      	movs	r3, #1
     f52:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     f54:	bd10      	pop	{r4, pc}
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	00000f11 	.word	0x00000f11

00000f5c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f5e:	46de      	mov	lr, fp
     f60:	4657      	mov	r7, sl
     f62:	464e      	mov	r6, r9
     f64:	4645      	mov	r5, r8
     f66:	b5e0      	push	{r5, r6, r7, lr}
     f68:	b083      	sub	sp, #12
     f6a:	0006      	movs	r6, r0
     f6c:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f6e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     f70:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     f72:	682b      	ldr	r3, [r5, #0]
     f74:	011b      	lsls	r3, r3, #4
     f76:	0fdb      	lsrs	r3, r3, #31
     f78:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     f7a:	7a4b      	ldrb	r3, [r1, #9]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d12b      	bne.n	fd8 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     f80:	686b      	ldr	r3, [r5, #4]
     f82:	4a58      	ldr	r2, [pc, #352]	; (10e4 <_i2c_master_read_packet+0x188>)
     f84:	4013      	ands	r3, r2
     f86:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     f88:	464b      	mov	r3, r9
     f8a:	7a1b      	ldrb	r3, [r3, #8]
     f8c:	2b00      	cmp	r3, #0
     f8e:	d127      	bne.n	fe0 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     f90:	464b      	mov	r3, r9
     f92:	881b      	ldrh	r3, [r3, #0]
     f94:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     f96:	464a      	mov	r2, r9
     f98:	7a52      	ldrb	r2, [r2, #9]
     f9a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     f9c:	4313      	orrs	r3, r2
     f9e:	2201      	movs	r2, #1
     fa0:	4313      	orrs	r3, r2
     fa2:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     fa4:	0030      	movs	r0, r6
     fa6:	4b50      	ldr	r3, [pc, #320]	; (10e8 <_i2c_master_read_packet+0x18c>)
     fa8:	4798      	blx	r3
     faa:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     fac:	4653      	mov	r3, sl
     fae:	2b00      	cmp	r3, #0
     fb0:	d003      	beq.n	fba <_i2c_master_read_packet+0x5e>
     fb2:	464b      	mov	r3, r9
     fb4:	885b      	ldrh	r3, [r3, #2]
     fb6:	2b01      	cmp	r3, #1
     fb8:	d03b      	beq.n	1032 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     fba:	686b      	ldr	r3, [r5, #4]
     fbc:	4a49      	ldr	r2, [pc, #292]	; (10e4 <_i2c_master_read_packet+0x188>)
     fbe:	4013      	ands	r3, r2
     fc0:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     fc2:	9b01      	ldr	r3, [sp, #4]
     fc4:	2b00      	cmp	r3, #0
     fc6:	d03a      	beq.n	103e <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     fc8:	9801      	ldr	r0, [sp, #4]
     fca:	b003      	add	sp, #12
     fcc:	bc3c      	pop	{r2, r3, r4, r5}
     fce:	4690      	mov	r8, r2
     fd0:	4699      	mov	r9, r3
     fd2:	46a2      	mov	sl, r4
     fd4:	46ab      	mov	fp, r5
     fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     fd8:	7a89      	ldrb	r1, [r1, #10]
     fda:	4b44      	ldr	r3, [pc, #272]	; (10ec <_i2c_master_read_packet+0x190>)
     fdc:	4798      	blx	r3
     fde:	e7cf      	b.n	f80 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     fe0:	464b      	mov	r3, r9
     fe2:	881b      	ldrh	r3, [r3, #0]
     fe4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     fe6:	464a      	mov	r2, r9
     fe8:	7a52      	ldrb	r2, [r2, #9]
     fea:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     fec:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     fee:	2280      	movs	r2, #128	; 0x80
     ff0:	0212      	lsls	r2, r2, #8
     ff2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     ff4:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     ff6:	0030      	movs	r0, r6
     ff8:	4b3b      	ldr	r3, [pc, #236]	; (10e8 <_i2c_master_read_packet+0x18c>)
     ffa:	4798      	blx	r3
     ffc:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     ffe:	686b      	ldr	r3, [r5, #4]
    1000:	4a38      	ldr	r2, [pc, #224]	; (10e4 <_i2c_master_read_packet+0x188>)
    1002:	4013      	ands	r3, r2
    1004:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    1006:	2800      	cmp	r0, #0
    1008:	d1de      	bne.n	fc8 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    100a:	0030      	movs	r0, r6
    100c:	4b38      	ldr	r3, [pc, #224]	; (10f0 <_i2c_master_read_packet+0x194>)
    100e:	4798      	blx	r3
    1010:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    1012:	2800      	cmp	r0, #0
    1014:	d1d8      	bne.n	fc8 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1016:	464b      	mov	r3, r9
    1018:	881b      	ldrh	r3, [r3, #0]
    101a:	0a1b      	lsrs	r3, r3, #8
    101c:	2278      	movs	r2, #120	; 0x78
    101e:	4313      	orrs	r3, r2
    1020:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1022:	464a      	mov	r2, r9
    1024:	7a52      	ldrb	r2, [r2, #9]
    1026:	0392      	lsls	r2, r2, #14
    1028:	2101      	movs	r1, #1
    102a:	430a      	orrs	r2, r1
    102c:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    102e:	626b      	str	r3, [r5, #36]	; 0x24
    1030:	e7b8      	b.n	fa4 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1032:	686a      	ldr	r2, [r5, #4]
    1034:	2380      	movs	r3, #128	; 0x80
    1036:	02db      	lsls	r3, r3, #11
    1038:	4313      	orrs	r3, r2
    103a:	606b      	str	r3, [r5, #4]
    103c:	e7c1      	b.n	fc2 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    103e:	0030      	movs	r0, r6
    1040:	4b2b      	ldr	r3, [pc, #172]	; (10f0 <_i2c_master_read_packet+0x194>)
    1042:	4798      	blx	r3
    1044:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    1046:	2800      	cmp	r0, #0
    1048:	d1be      	bne.n	fc8 <_i2c_master_read_packet+0x6c>
    104a:	3c01      	subs	r4, #1
    104c:	b2a4      	uxth	r4, r4
    104e:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    1050:	4b28      	ldr	r3, [pc, #160]	; (10f4 <_i2c_master_read_packet+0x198>)
    1052:	469b      	mov	fp, r3
    1054:	e015      	b.n	1082 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    1056:	2c01      	cmp	r4, #1
    1058:	d020      	beq.n	109c <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    105a:	0030      	movs	r0, r6
    105c:	4b26      	ldr	r3, [pc, #152]	; (10f8 <_i2c_master_read_packet+0x19c>)
    105e:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    1060:	4643      	mov	r3, r8
    1062:	1c5f      	adds	r7, r3, #1
    1064:	b2bf      	uxth	r7, r7
    1066:	2328      	movs	r3, #40	; 0x28
    1068:	5ceb      	ldrb	r3, [r5, r3]
    106a:	464a      	mov	r2, r9
    106c:	6852      	ldr	r2, [r2, #4]
    106e:	4641      	mov	r1, r8
    1070:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    1072:	0030      	movs	r0, r6
    1074:	4b1c      	ldr	r3, [pc, #112]	; (10e8 <_i2c_master_read_packet+0x18c>)
    1076:	4798      	blx	r3
    1078:	3c01      	subs	r4, #1
    107a:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    107c:	2800      	cmp	r0, #0
    107e:	d115      	bne.n	10ac <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    1080:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    1082:	455c      	cmp	r4, fp
    1084:	d014      	beq.n	10b0 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1086:	8b6b      	ldrh	r3, [r5, #26]
    1088:	069b      	lsls	r3, r3, #26
    108a:	d527      	bpl.n	10dc <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    108c:	7af3      	ldrb	r3, [r6, #11]
    108e:	2b00      	cmp	r3, #0
    1090:	d0e3      	beq.n	105a <_i2c_master_read_packet+0xfe>
    1092:	4653      	mov	r3, sl
    1094:	2b00      	cmp	r3, #0
    1096:	d1de      	bne.n	1056 <_i2c_master_read_packet+0xfa>
    1098:	2c00      	cmp	r4, #0
    109a:	d1de      	bne.n	105a <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    109c:	686a      	ldr	r2, [r5, #4]
    109e:	2380      	movs	r3, #128	; 0x80
    10a0:	02db      	lsls	r3, r3, #11
    10a2:	4313      	orrs	r3, r2
    10a4:	606b      	str	r3, [r5, #4]
    10a6:	3c01      	subs	r4, #1
    10a8:	b2a4      	uxth	r4, r4
    10aa:	e7ea      	b.n	1082 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    10ac:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    10ae:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    10b0:	7ab3      	ldrb	r3, [r6, #10]
    10b2:	2b00      	cmp	r3, #0
    10b4:	d109      	bne.n	10ca <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    10b6:	0030      	movs	r0, r6
    10b8:	4b0f      	ldr	r3, [pc, #60]	; (10f8 <_i2c_master_read_packet+0x19c>)
    10ba:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    10bc:	2328      	movs	r3, #40	; 0x28
    10be:	5cea      	ldrb	r2, [r5, r3]
    10c0:	464b      	mov	r3, r9
    10c2:	685b      	ldr	r3, [r3, #4]
    10c4:	4641      	mov	r1, r8
    10c6:	545a      	strb	r2, [r3, r1]
    10c8:	e77e      	b.n	fc8 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    10ca:	0030      	movs	r0, r6
    10cc:	4b0a      	ldr	r3, [pc, #40]	; (10f8 <_i2c_master_read_packet+0x19c>)
    10ce:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    10d0:	686a      	ldr	r2, [r5, #4]
    10d2:	23c0      	movs	r3, #192	; 0xc0
    10d4:	029b      	lsls	r3, r3, #10
    10d6:	4313      	orrs	r3, r2
    10d8:	606b      	str	r3, [r5, #4]
    10da:	e7ec      	b.n	10b6 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    10dc:	2341      	movs	r3, #65	; 0x41
    10de:	9301      	str	r3, [sp, #4]
    10e0:	e772      	b.n	fc8 <_i2c_master_read_packet+0x6c>
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	fffbffff 	.word	0xfffbffff
    10e8:	00000f11 	.word	0x00000f11
    10ec:	00000f3d 	.word	0x00000f3d
    10f0:	00000ee1 	.word	0x00000ee1
    10f4:	0000ffff 	.word	0x0000ffff
    10f8:	00000c0d 	.word	0x00000c0d

000010fc <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    10fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10fe:	46de      	mov	lr, fp
    1100:	4657      	mov	r7, sl
    1102:	464e      	mov	r6, r9
    1104:	4645      	mov	r5, r8
    1106:	b5e0      	push	{r5, r6, r7, lr}
    1108:	b083      	sub	sp, #12
    110a:	0006      	movs	r6, r0
    110c:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    110e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1110:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    1112:	4b32      	ldr	r3, [pc, #200]	; (11dc <_i2c_master_write_packet+0xe0>)
    1114:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1116:	7a7b      	ldrb	r3, [r7, #9]
    1118:	2b00      	cmp	r3, #0
    111a:	d11d      	bne.n	1158 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    111c:	686b      	ldr	r3, [r5, #4]
    111e:	4a30      	ldr	r2, [pc, #192]	; (11e0 <_i2c_master_write_packet+0xe4>)
    1120:	4013      	ands	r3, r2
    1122:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1124:	7a3b      	ldrb	r3, [r7, #8]
    1126:	2b00      	cmp	r3, #0
    1128:	d01b      	beq.n	1162 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    112a:	883b      	ldrh	r3, [r7, #0]
    112c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    112e:	7a7a      	ldrb	r2, [r7, #9]
    1130:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1132:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1134:	2280      	movs	r2, #128	; 0x80
    1136:	0212      	lsls	r2, r2, #8
    1138:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    113a:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    113c:	0030      	movs	r0, r6
    113e:	4b29      	ldr	r3, [pc, #164]	; (11e4 <_i2c_master_write_packet+0xe8>)
    1140:	4798      	blx	r3
    1142:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1144:	2800      	cmp	r0, #0
    1146:	d013      	beq.n	1170 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    1148:	9801      	ldr	r0, [sp, #4]
    114a:	b003      	add	sp, #12
    114c:	bc3c      	pop	{r2, r3, r4, r5}
    114e:	4690      	mov	r8, r2
    1150:	4699      	mov	r9, r3
    1152:	46a2      	mov	sl, r4
    1154:	46ab      	mov	fp, r5
    1156:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1158:	7ab9      	ldrb	r1, [r7, #10]
    115a:	0030      	movs	r0, r6
    115c:	4b22      	ldr	r3, [pc, #136]	; (11e8 <_i2c_master_write_packet+0xec>)
    115e:	4798      	blx	r3
    1160:	e7dc      	b.n	111c <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1162:	883b      	ldrh	r3, [r7, #0]
    1164:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1166:	7a7a      	ldrb	r2, [r7, #9]
    1168:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    116a:	4313      	orrs	r3, r2
    116c:	626b      	str	r3, [r5, #36]	; 0x24
    116e:	e7e5      	b.n	113c <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    1170:	0030      	movs	r0, r6
    1172:	4b1e      	ldr	r3, [pc, #120]	; (11ec <_i2c_master_write_packet+0xf0>)
    1174:	4798      	blx	r3
    1176:	1e03      	subs	r3, r0, #0
    1178:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    117a:	d1e5      	bne.n	1148 <_i2c_master_write_packet+0x4c>
    117c:	46a0      	mov	r8, r4
    117e:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1180:	3320      	adds	r3, #32
    1182:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    1184:	4b15      	ldr	r3, [pc, #84]	; (11dc <_i2c_master_write_packet+0xe0>)
    1186:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    1188:	4b16      	ldr	r3, [pc, #88]	; (11e4 <_i2c_master_write_packet+0xe8>)
    118a:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    118c:	4544      	cmp	r4, r8
    118e:	d015      	beq.n	11bc <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1190:	8b6b      	ldrh	r3, [r5, #26]
    1192:	464a      	mov	r2, r9
    1194:	4213      	tst	r3, r2
    1196:	d01d      	beq.n	11d4 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    1198:	0030      	movs	r0, r6
    119a:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    119c:	687b      	ldr	r3, [r7, #4]
    119e:	5d1a      	ldrb	r2, [r3, r4]
    11a0:	2328      	movs	r3, #40	; 0x28
    11a2:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    11a4:	0030      	movs	r0, r6
    11a6:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    11a8:	2800      	cmp	r0, #0
    11aa:	d106      	bne.n	11ba <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    11ac:	8b6b      	ldrh	r3, [r5, #26]
    11ae:	3401      	adds	r4, #1
    11b0:	075b      	lsls	r3, r3, #29
    11b2:	d5eb      	bpl.n	118c <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    11b4:	231e      	movs	r3, #30
    11b6:	9301      	str	r3, [sp, #4]
    11b8:	e000      	b.n	11bc <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    11ba:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    11bc:	7ab3      	ldrb	r3, [r6, #10]
    11be:	2b00      	cmp	r3, #0
    11c0:	d0c2      	beq.n	1148 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    11c2:	0030      	movs	r0, r6
    11c4:	4b05      	ldr	r3, [pc, #20]	; (11dc <_i2c_master_write_packet+0xe0>)
    11c6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    11c8:	686a      	ldr	r2, [r5, #4]
    11ca:	23c0      	movs	r3, #192	; 0xc0
    11cc:	029b      	lsls	r3, r3, #10
    11ce:	4313      	orrs	r3, r2
    11d0:	606b      	str	r3, [r5, #4]
    11d2:	e7b9      	b.n	1148 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    11d4:	2341      	movs	r3, #65	; 0x41
    11d6:	9301      	str	r3, [sp, #4]
    11d8:	e7b6      	b.n	1148 <_i2c_master_write_packet+0x4c>
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	00000c0d 	.word	0x00000c0d
    11e0:	fffbffff 	.word	0xfffbffff
    11e4:	00000f11 	.word	0x00000f11
    11e8:	00000f3d 	.word	0x00000f3d
    11ec:	00000ee1 	.word	0x00000ee1

000011f0 <i2c_master_read_packet_wait>:
{
    11f0:	b510      	push	{r4, lr}
	module->send_stop = true;
    11f2:	2301      	movs	r3, #1
    11f4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    11f6:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    11f8:	4b01      	ldr	r3, [pc, #4]	; (1200 <i2c_master_read_packet_wait+0x10>)
    11fa:	4798      	blx	r3
}
    11fc:	bd10      	pop	{r4, pc}
    11fe:	46c0      	nop			; (mov r8, r8)
    1200:	00000f5d 	.word	0x00000f5d

00001204 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1204:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    1206:	2301      	movs	r3, #1
    1208:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    120a:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    120c:	4b01      	ldr	r3, [pc, #4]	; (1214 <i2c_master_write_packet_wait+0x10>)
    120e:	4798      	blx	r3
}
    1210:	bd10      	pop	{r4, pc}
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	000010fd 	.word	0x000010fd

00001218 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1218:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    121a:	2300      	movs	r3, #0
    121c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    121e:	3301      	adds	r3, #1
    1220:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    1222:	4b01      	ldr	r3, [pc, #4]	; (1228 <i2c_master_write_packet_wait_no_stop+0x10>)
    1224:	4798      	blx	r3
}
    1226:	bd10      	pop	{r4, pc}
    1228:	000010fd 	.word	0x000010fd

0000122c <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
    122c:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    122e:	6804      	ldr	r4, [r0, #0]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
    1230:	4b03      	ldr	r3, [pc, #12]	; (1240 <i2c_master_send_stop+0x14>)
    1232:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1234:	6862      	ldr	r2, [r4, #4]
    1236:	23c0      	movs	r3, #192	; 0xc0
    1238:	029b      	lsls	r3, r3, #10
    123a:	4313      	orrs	r3, r2
    123c:	6063      	str	r3, [r4, #4]
}
    123e:	bd10      	pop	{r4, pc}
    1240:	00000c0d 	.word	0x00000c0d

00001244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1244:	b5f0      	push	{r4, r5, r6, r7, lr}
    1246:	46c6      	mov	lr, r8
    1248:	b500      	push	{lr}
    124a:	000c      	movs	r4, r1
    124c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    124e:	2800      	cmp	r0, #0
    1250:	d10f      	bne.n	1272 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1252:	2a00      	cmp	r2, #0
    1254:	dd11      	ble.n	127a <_read+0x36>
    1256:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1258:	4e09      	ldr	r6, [pc, #36]	; (1280 <_read+0x3c>)
    125a:	4d0a      	ldr	r5, [pc, #40]	; (1284 <_read+0x40>)
    125c:	6830      	ldr	r0, [r6, #0]
    125e:	0021      	movs	r1, r4
    1260:	682b      	ldr	r3, [r5, #0]
    1262:	4798      	blx	r3
		ptr++;
    1264:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1266:	42bc      	cmp	r4, r7
    1268:	d1f8      	bne.n	125c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    126a:	4640      	mov	r0, r8
    126c:	bc04      	pop	{r2}
    126e:	4690      	mov	r8, r2
    1270:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1272:	2301      	movs	r3, #1
    1274:	425b      	negs	r3, r3
    1276:	4698      	mov	r8, r3
    1278:	e7f7      	b.n	126a <_read+0x26>
	for (; len > 0; --len) {
    127a:	4680      	mov	r8, r0
    127c:	e7f5      	b.n	126a <_read+0x26>
    127e:	46c0      	nop			; (mov r8, r8)
    1280:	20000270 	.word	0x20000270
    1284:	20000268 	.word	0x20000268

00001288 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1288:	b5f0      	push	{r4, r5, r6, r7, lr}
    128a:	46c6      	mov	lr, r8
    128c:	b500      	push	{lr}
    128e:	000e      	movs	r6, r1
    1290:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1292:	3801      	subs	r0, #1
    1294:	2802      	cmp	r0, #2
    1296:	d810      	bhi.n	12ba <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1298:	2a00      	cmp	r2, #0
    129a:	d011      	beq.n	12c0 <_write+0x38>
    129c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    129e:	4b0c      	ldr	r3, [pc, #48]	; (12d0 <_write+0x48>)
    12a0:	4698      	mov	r8, r3
    12a2:	4f0c      	ldr	r7, [pc, #48]	; (12d4 <_write+0x4c>)
    12a4:	4643      	mov	r3, r8
    12a6:	6818      	ldr	r0, [r3, #0]
    12a8:	5d31      	ldrb	r1, [r6, r4]
    12aa:	683b      	ldr	r3, [r7, #0]
    12ac:	4798      	blx	r3
    12ae:	2800      	cmp	r0, #0
    12b0:	db08      	blt.n	12c4 <_write+0x3c>
			return -1;
		}
		++nChars;
    12b2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    12b4:	42a5      	cmp	r5, r4
    12b6:	d1f5      	bne.n	12a4 <_write+0x1c>
    12b8:	e006      	b.n	12c8 <_write+0x40>
		return -1;
    12ba:	2401      	movs	r4, #1
    12bc:	4264      	negs	r4, r4
    12be:	e003      	b.n	12c8 <_write+0x40>
	for (; len != 0; --len) {
    12c0:	0014      	movs	r4, r2
    12c2:	e001      	b.n	12c8 <_write+0x40>
			return -1;
    12c4:	2401      	movs	r4, #1
    12c6:	4264      	negs	r4, r4
	}
	return nChars;
}
    12c8:	0020      	movs	r0, r4
    12ca:	bc04      	pop	{r2}
    12cc:	4690      	mov	r8, r2
    12ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12d0:	20000270 	.word	0x20000270
    12d4:	2000026c 	.word	0x2000026c

000012d8 <get_gpio_pin>:
 * @param  port port to use. Either A or B
 * @param  pin  pin that's being selected. Depends on port
 * @return      value of the pin that was selected.
 */
int get_gpio_pin(char port, int pin)
{
    12d8:	b530      	push	{r4, r5, lr}
    12da:	b083      	sub	sp, #12
    12dc:	000c      	movs	r4, r1
	int pin_val = -1;

	switch (port) {
    12de:	2861      	cmp	r0, #97	; 0x61
    12e0:	d006      	beq.n	12f0 <get_gpio_pin+0x18>
    12e2:	2862      	cmp	r0, #98	; 0x62
    12e4:	d013      	beq.n	130e <get_gpio_pin+0x36>
	int pin_val = -1;
    12e6:	2501      	movs	r5, #1
    12e8:	426d      	negs	r5, r5
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
			//TODO: error codes
		}
	}
	return pin_val;
}
    12ea:	0028      	movs	r0, r5
    12ec:	b003      	add	sp, #12
    12ee:	bd30      	pop	{r4, r5, pc}
		switch (pin) {
    12f0:	2908      	cmp	r1, #8
    12f2:	d014      	beq.n	131e <get_gpio_pin+0x46>
    12f4:	2909      	cmp	r1, #9
    12f6:	d014      	beq.n	1322 <get_gpio_pin+0x4a>
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    12f8:	2303      	movs	r3, #3
    12fa:	9300      	str	r3, [sp, #0]
    12fc:	3b01      	subs	r3, #1
    12fe:	2209      	movs	r2, #9
    1300:	2108      	movs	r1, #8
    1302:	480e      	ldr	r0, [pc, #56]	; (133c <get_gpio_pin+0x64>)
    1304:	4d0e      	ldr	r5, [pc, #56]	; (1340 <get_gpio_pin+0x68>)
    1306:	47a8      	blx	r5
	int pin_val = -1;
    1308:	2501      	movs	r5, #1
    130a:	426d      	negs	r5, r5
			break;
    130c:	e001      	b.n	1312 <get_gpio_pin+0x3a>
	int pin_val = -1;
    130e:	2501      	movs	r5, #1
    1310:	426d      	negs	r5, r5
		switch (pin) {
    1312:	2c02      	cmp	r4, #2
    1314:	d00f      	beq.n	1336 <get_gpio_pin+0x5e>
    1316:	2c03      	cmp	r4, #3
    1318:	d104      	bne.n	1324 <get_gpio_pin+0x4c>
			pin_val = PIN_PB03;
    131a:	2523      	movs	r5, #35	; 0x23
    131c:	e7e5      	b.n	12ea <get_gpio_pin+0x12>
			pin_val = PIN_PA08;
    131e:	000d      	movs	r5, r1
    1320:	e7f7      	b.n	1312 <get_gpio_pin+0x3a>
			pin_val = PIN_PA09;
    1322:	000d      	movs	r5, r1
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    1324:	2303      	movs	r3, #3
    1326:	9300      	str	r3, [sp, #0]
    1328:	3b01      	subs	r3, #1
    132a:	2209      	movs	r2, #9
    132c:	2108      	movs	r1, #8
    132e:	4803      	ldr	r0, [pc, #12]	; (133c <get_gpio_pin+0x64>)
    1330:	4c03      	ldr	r4, [pc, #12]	; (1340 <get_gpio_pin+0x68>)
    1332:	47a0      	blx	r4
    1334:	e7d9      	b.n	12ea <get_gpio_pin+0x12>
			pin_val = PIN_PB02;
    1336:	2522      	movs	r5, #34	; 0x22
	return pin_val;
    1338:	e7d7      	b.n	12ea <get_gpio_pin+0x12>
    133a:	46c0      	nop			; (mov r8, r8)
    133c:	00008c1c 	.word	0x00008c1c
    1340:	00004139 	.word	0x00004139

00001344 <help>:

/**
 * Prints out information about the available cli commands.
 */
void help()
{
    1344:	b510      	push	{r4, lr}
	printf("help - Prints all the available commands and a short synopsis \r\n"
    1346:	4802      	ldr	r0, [pc, #8]	; (1350 <help+0xc>)
    1348:	4b02      	ldr	r3, [pc, #8]	; (1354 <help+0x10>)
    134a:	4798      	blx	r3
	       "adc_get [port] [pin] - Get the ADC value of the given pin. \r\n"
	       "mcu_temp - Reports the temperature of the mcu in Celsius. \r\n"
	       "i2c_scan - Prints out a list connected I2C slave addresses \r\n"
		   "relay_set - turns on relay \r\n"
		   "relay_clear - turns off relay \r\n");
}
    134c:	bd10      	pop	{r4, pc}
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	00008c84 	.word	0x00008c84
    1354:	0000422d 	.word	0x0000422d

00001358 <ver_bl>:
 *
 * Version follows correct Semantic Versioning guidelines. <br>
 * <b>See</b> <a href="https://semver.org/">SemVer</a> for more information.
 */
void ver_bl()
{
    1358:	b510      	push	{r4, lr}
	printf("Version: %s \r\n", BL_VERSION);
    135a:	4902      	ldr	r1, [pc, #8]	; (1364 <ver_bl+0xc>)
    135c:	4802      	ldr	r0, [pc, #8]	; (1368 <ver_bl+0x10>)
    135e:	4b03      	ldr	r3, [pc, #12]	; (136c <ver_bl+0x14>)
    1360:	4798      	blx	r3
}
    1362:	bd10      	pop	{r4, pc}
    1364:	00009330 	.word	0x00009330
    1368:	00009338 	.word	0x00009338
    136c:	00004139 	.word	0x00004139

00001370 <ver_app>:
 *
 * Version follows correct Semantic Versioning guidelines. <br>
 * <b>See</b> <a href="https://semver.org/">SemVer</a> for more information.
 */
void ver_app()
{
    1370:	b510      	push	{r4, lr}
	printf("Version: %s \r\n", APP_VERSION);
    1372:	4902      	ldr	r1, [pc, #8]	; (137c <ver_app+0xc>)
    1374:	4802      	ldr	r0, [pc, #8]	; (1380 <ver_app+0x10>)
    1376:	4b03      	ldr	r3, [pc, #12]	; (1384 <ver_app+0x14>)
    1378:	4798      	blx	r3
}
    137a:	bd10      	pop	{r4, pc}
    137c:	00009330 	.word	0x00009330
    1380:	00009338 	.word	0x00009338
    1384:	00004139 	.word	0x00004139

00001388 <mac>:
 * Prints the MAC address of the Wi-Fi chip.
 *
 * For more information on MAC addresses, see <a href="https://en.wikipedia.org/wiki/MAC_address">Wikipedia</a>
 */
void mac()
{
    1388:	b510      	push	{r4, lr}
	printf("00.00.00.00\r\n");
    138a:	4802      	ldr	r0, [pc, #8]	; (1394 <mac+0xc>)
    138c:	4b02      	ldr	r3, [pc, #8]	; (1398 <mac+0x10>)
    138e:	4798      	blx	r3
}
    1390:	bd10      	pop	{r4, pc}
    1392:	46c0      	nop			; (mov r8, r8)
    1394:	000091d4 	.word	0x000091d4
    1398:	0000422d 	.word	0x0000422d

0000139c <ip>:
 * Prints the IP address of the Wi-Fi chip.
 *
 * @note Currently this only returns a dummy IP address and will need to be updated.
 */
void ip()
{
    139c:	b510      	push	{r4, lr}
	printf("255.255.255.255 \r\n");
    139e:	4802      	ldr	r0, [pc, #8]	; (13a8 <ip+0xc>)
    13a0:	4b02      	ldr	r3, [pc, #8]	; (13ac <ip+0x10>)
    13a2:	4798      	blx	r3
}
    13a4:	bd10      	pop	{r4, pc}
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	000091c0 	.word	0x000091c0
    13ac:	0000422d 	.word	0x0000422d

000013b0 <i2c_scan>:
/**
 * Reports all connected I2C slave devices over a 7 bit (128) address space.
 *
 */
void i2c_scan()
{
    13b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13b2:	b089      	sub	sp, #36	; 0x24
	struct i2c_master_packet wr_packet = {
    13b4:	aa05      	add	r2, sp, #20
    13b6:	2300      	movs	r3, #0
    13b8:	7213      	strb	r3, [r2, #8]
    13ba:	7253      	strb	r3, [r2, #9]
    13bc:	7293      	strb	r3, [r2, #10]
		.data			=  0,
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};
	struct i2c_master_packet rd_packet = {
    13be:	aa02      	add	r2, sp, #8
    13c0:	2101      	movs	r1, #1
    13c2:	8051      	strh	r1, [r2, #2]
    13c4:	9303      	str	r3, [sp, #12]
    13c6:	7213      	strb	r3, [r2, #8]
    13c8:	7253      	strb	r3, [r2, #9]
    13ca:	7293      	strb	r3, [r2, #10]
		.data			=  0,
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    13cc:	2400      	movs	r4, #0
		enum status_code i2c_status;
		wr_packet.address = slave_address;
    13ce:	ad05      	add	r5, sp, #20
		rd_packet.address = slave_address;
		wr_packet.data_length = 0;
    13d0:	2700      	movs	r7, #0
		uint8_t wr_buffer = 0x05;
		wr_packet.data = &wr_buffer;
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_tsl2561, &wr_packet);
    13d2:	4e23      	ldr	r6, [pc, #140]	; (1460 <i2c_scan+0xb0>)
    13d4:	e005      	b.n	13e2 <i2c_scan+0x32>
		if (i2c_status == STATUS_OK) {
			i2c_status = i2c_master_read_packet_wait(&i2c_tsl2561, &rd_packet);
			printf("Address found at %#X\r\n", slave_address);
		}
		i2c_master_send_stop(&i2c_tsl2561);
    13d6:	4822      	ldr	r0, [pc, #136]	; (1460 <i2c_scan+0xb0>)
    13d8:	4b22      	ldr	r3, [pc, #136]	; (1464 <i2c_scan+0xb4>)
    13da:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    13dc:	3401      	adds	r4, #1
    13de:	2c80      	cmp	r4, #128	; 0x80
    13e0:	d018      	beq.n	1414 <i2c_scan+0x64>
		wr_packet.address = slave_address;
    13e2:	b2a3      	uxth	r3, r4
    13e4:	802b      	strh	r3, [r5, #0]
		rd_packet.address = slave_address;
    13e6:	aa02      	add	r2, sp, #8
    13e8:	8013      	strh	r3, [r2, #0]
		wr_packet.data_length = 0;
    13ea:	806f      	strh	r7, [r5, #2]
		uint8_t wr_buffer = 0x05;
    13ec:	466b      	mov	r3, sp
    13ee:	2205      	movs	r2, #5
    13f0:	71da      	strb	r2, [r3, #7]
    13f2:	3307      	adds	r3, #7
		wr_packet.data = &wr_buffer;
    13f4:	606b      	str	r3, [r5, #4]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_tsl2561, &wr_packet);
    13f6:	0029      	movs	r1, r5
    13f8:	0030      	movs	r0, r6
    13fa:	4b1b      	ldr	r3, [pc, #108]	; (1468 <i2c_scan+0xb8>)
    13fc:	4798      	blx	r3
		if (i2c_status == STATUS_OK) {
    13fe:	2800      	cmp	r0, #0
    1400:	d1e9      	bne.n	13d6 <i2c_scan+0x26>
			i2c_status = i2c_master_read_packet_wait(&i2c_tsl2561, &rd_packet);
    1402:	a902      	add	r1, sp, #8
    1404:	4816      	ldr	r0, [pc, #88]	; (1460 <i2c_scan+0xb0>)
    1406:	4b19      	ldr	r3, [pc, #100]	; (146c <i2c_scan+0xbc>)
    1408:	4798      	blx	r3
			printf("Address found at %#X\r\n", slave_address);
    140a:	0021      	movs	r1, r4
    140c:	4818      	ldr	r0, [pc, #96]	; (1470 <i2c_scan+0xc0>)
    140e:	4b19      	ldr	r3, [pc, #100]	; (1474 <i2c_scan+0xc4>)
    1410:	4798      	blx	r3
    1412:	e7e0      	b.n	13d6 <i2c_scan+0x26>
	}
	
	printf("Scanning temp bus\r\n");
    1414:	4818      	ldr	r0, [pc, #96]	; (1478 <i2c_scan+0xc8>)
    1416:	4b19      	ldr	r3, [pc, #100]	; (147c <i2c_scan+0xcc>)
    1418:	4798      	blx	r3
	

	for (int slave_address = 0; slave_address < 128; slave_address++) {
    141a:	2600      	movs	r6, #0
		//int slave_address = 64;
		enum status_code i2c_status;
		wr_packet.address = slave_address;
		rd_packet.address = slave_address;
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_hdc, &wr_packet);
    141c:	4c18      	ldr	r4, [pc, #96]	; (1480 <i2c_scan+0xd0>)
    141e:	4f12      	ldr	r7, [pc, #72]	; (1468 <i2c_scan+0xb8>)
		if (i2c_status == STATUS_OK) {
			i2c_status = i2c_master_read_packet_wait(&i2c_hdc, &rd_packet);
    1420:	0025      	movs	r5, r4
    1422:	e005      	b.n	1430 <i2c_scan+0x80>
			printf("Address found at %#X\r\n", slave_address);
		}
		i2c_master_send_stop(&i2c_hdc);
    1424:	4816      	ldr	r0, [pc, #88]	; (1480 <i2c_scan+0xd0>)
    1426:	4b0f      	ldr	r3, [pc, #60]	; (1464 <i2c_scan+0xb4>)
    1428:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    142a:	3601      	adds	r6, #1
    142c:	2e80      	cmp	r6, #128	; 0x80
    142e:	d011      	beq.n	1454 <i2c_scan+0xa4>
		wr_packet.address = slave_address;
    1430:	b2b3      	uxth	r3, r6
    1432:	a905      	add	r1, sp, #20
    1434:	800b      	strh	r3, [r1, #0]
		rd_packet.address = slave_address;
    1436:	aa02      	add	r2, sp, #8
    1438:	8013      	strh	r3, [r2, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_hdc, &wr_packet);
    143a:	0020      	movs	r0, r4
    143c:	47b8      	blx	r7
		if (i2c_status == STATUS_OK) {
    143e:	2800      	cmp	r0, #0
    1440:	d1f0      	bne.n	1424 <i2c_scan+0x74>
			i2c_status = i2c_master_read_packet_wait(&i2c_hdc, &rd_packet);
    1442:	a902      	add	r1, sp, #8
    1444:	0028      	movs	r0, r5
    1446:	4b09      	ldr	r3, [pc, #36]	; (146c <i2c_scan+0xbc>)
    1448:	4798      	blx	r3
			printf("Address found at %#X\r\n", slave_address);
    144a:	0031      	movs	r1, r6
    144c:	4808      	ldr	r0, [pc, #32]	; (1470 <i2c_scan+0xc0>)
    144e:	4b09      	ldr	r3, [pc, #36]	; (1474 <i2c_scan+0xc4>)
    1450:	4798      	blx	r3
    1452:	e7e7      	b.n	1424 <i2c_scan+0x74>
	}
	
	printf("Scans complete.\r\n");
    1454:	480b      	ldr	r0, [pc, #44]	; (1484 <i2c_scan+0xd4>)
    1456:	4b09      	ldr	r3, [pc, #36]	; (147c <i2c_scan+0xcc>)
    1458:	4798      	blx	r3
}
    145a:	b009      	add	sp, #36	; 0x24
    145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	20000250 	.word	0x20000250
    1464:	0000122d 	.word	0x0000122d
    1468:	00001219 	.word	0x00001219
    146c:	000011f1 	.word	0x000011f1
    1470:	00008f70 	.word	0x00008f70
    1474:	00004139 	.word	0x00004139
    1478:	00008f88 	.word	0x00008f88
    147c:	0000422d 	.word	0x0000422d
    1480:	20000244 	.word	0x20000244
    1484:	00008f9c 	.word	0x00008f9c

00001488 <print_general_error>:
 * Prints a general error message.
 *
 * @param func_name function where error occured.
 */
void print_general_error(char *func_name)
{
    1488:	b510      	push	{r4, lr}
    148a:	0001      	movs	r1, r0
	printf("there was an error parsing your args for %s. See help for correct usage.\r\n", func_name);
    148c:	4801      	ldr	r0, [pc, #4]	; (1494 <print_general_error+0xc>)
    148e:	4b02      	ldr	r3, [pc, #8]	; (1498 <print_general_error+0x10>)
    1490:	4798      	blx	r3
}
    1492:	bd10      	pop	{r4, pc}
    1494:	00009268 	.word	0x00009268
    1498:	00004139 	.word	0x00004139

0000149c <print_args_error>:
 * @param func_name     name of the function where error occured
 * @param required_args number of arguments required for the function
 * @param num_args      number of arguments given to the function
 */
void print_args_error(char *func_name, int required_args, int num_args)
{
    149c:	b510      	push	{r4, lr}
    149e:	0013      	movs	r3, r2
	printf("Invalid number of args: %s requires %d arguments and you provided %d \r\n."
    14a0:	000a      	movs	r2, r1
    14a2:	0001      	movs	r1, r0
    14a4:	4801      	ldr	r0, [pc, #4]	; (14ac <print_args_error+0x10>)
    14a6:	4c02      	ldr	r4, [pc, #8]	; (14b0 <print_args_error+0x14>)
    14a8:	47a0      	blx	r4
	       "See help for more information. \r\n", func_name, required_args, num_args);
}
    14aa:	bd10      	pop	{r4, pc}
    14ac:	000091fc 	.word	0x000091fc
    14b0:	00004139 	.word	0x00004139

000014b4 <configure_adc>:
 *      @li Reference voltage: 1/2* VCC (1.65V)
 *      @li clock prescale: 16x
 * @param pin pin to read value from
 */
void configure_adc(int pin)
{
    14b4:	b510      	push	{r4, lr}
    14b6:	b08c      	sub	sp, #48	; 0x30
    14b8:	0004      	movs	r4, r0
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    14ba:	4668      	mov	r0, sp
    14bc:	4b11      	ldr	r3, [pc, #68]	; (1504 <configure_adc+0x50>)
    14be:	4798      	blx	r3
	config_adc.positive_input = pin;
    14c0:	466b      	mov	r3, sp
    14c2:	731c      	strb	r4, [r3, #12]
	config_adc.reference = ADC_REFERENCE_INTVCC0;
    14c4:	2301      	movs	r3, #1
    14c6:	466a      	mov	r2, sp
    14c8:	7053      	strb	r3, [r2, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    14ca:	2380      	movs	r3, #128	; 0x80
    14cc:	009b      	lsls	r3, r3, #2
    14ce:	8053      	strh	r3, [r2, #2]
	adc_init(&adc_instance, ADC, &config_adc);
    14d0:	4c0d      	ldr	r4, [pc, #52]	; (1508 <configure_adc+0x54>)
    14d2:	490e      	ldr	r1, [pc, #56]	; (150c <configure_adc+0x58>)
    14d4:	0020      	movs	r0, r4
    14d6:	4b0e      	ldr	r3, [pc, #56]	; (1510 <configure_adc+0x5c>)
    14d8:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    14da:	6822      	ldr	r2, [r4, #0]
    14dc:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    14de:	b25b      	sxtb	r3, r3
    14e0:	2b00      	cmp	r3, #0
    14e2:	dbfb      	blt.n	14dc <configure_adc+0x28>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    14e4:	230f      	movs	r3, #15
    14e6:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    14e8:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    14ea:	7813      	ldrb	r3, [r2, #0]
    14ec:	2102      	movs	r1, #2
    14ee:	430b      	orrs	r3, r1
    14f0:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    14f2:	4b05      	ldr	r3, [pc, #20]	; (1508 <configure_adc+0x54>)
    14f4:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    14f6:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    14f8:	b25b      	sxtb	r3, r3
    14fa:	2b00      	cmp	r3, #0
    14fc:	dbfb      	blt.n	14f6 <configure_adc+0x42>
	adc_enable(&adc_instance);
}
    14fe:	b00c      	add	sp, #48	; 0x30
    1500:	bd10      	pop	{r4, pc}
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	00000759 	.word	0x00000759
    1508:	200002b4 	.word	0x200002b4
    150c:	42004000 	.word	0x42004000
    1510:	000007a1 	.word	0x000007a1

00001514 <adc_get>:
{
    1514:	b530      	push	{r4, r5, lr}
    1516:	b083      	sub	sp, #12
	switch (port) {
    1518:	2861      	cmp	r0, #97	; 0x61
    151a:	d126      	bne.n	156a <adc_get+0x56>
			switch (pin) {
    151c:	2902      	cmp	r1, #2
    151e:	d114      	bne.n	154a <adc_get+0x36>
		configure_adc(pin_val);
    1520:	2000      	movs	r0, #0
    1522:	4b3e      	ldr	r3, [pc, #248]	; (161c <adc_get+0x108>)
    1524:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1526:	4b3e      	ldr	r3, [pc, #248]	; (1620 <adc_get+0x10c>)
    1528:	6819      	ldr	r1, [r3, #0]
    152a:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    152c:	b25b      	sxtb	r3, r3
    152e:	2b00      	cmp	r3, #0
    1530:	dbfb      	blt.n	152a <adc_get+0x16>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1532:	7b0b      	ldrb	r3, [r1, #12]
    1534:	2202      	movs	r2, #2
    1536:	4313      	orrs	r3, r2
    1538:	730b      	strb	r3, [r1, #12]
    153a:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    153c:	b25b      	sxtb	r3, r3
    153e:	2b00      	cmp	r3, #0
    1540:	dbfb      	blt.n	153a <adc_get+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1542:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1544:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    1546:	2402      	movs	r4, #2
    1548:	e022      	b.n	1590 <adc_get+0x7c>
					printf("fail on pin ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    154a:	4b36      	ldr	r3, [pc, #216]	; (1624 <adc_get+0x110>)
    154c:	4798      	blx	r3
    154e:	2362      	movs	r3, #98	; 0x62
    1550:	5cc2      	ldrb	r2, [r0, r3]
    1552:	3b5f      	subs	r3, #95	; 0x5f
    1554:	4013      	ands	r3, r2
    1556:	2b02      	cmp	r3, #2
    1558:	d005      	beq.n	1566 <adc_get+0x52>
    155a:	2161      	movs	r1, #97	; 0x61
    155c:	2202      	movs	r2, #2
    155e:	4832      	ldr	r0, [pc, #200]	; (1628 <adc_get+0x114>)
    1560:	4b32      	ldr	r3, [pc, #200]	; (162c <adc_get+0x118>)
    1562:	4798      	blx	r3
					break;
    1564:	e00e      	b.n	1584 <adc_get+0x70>
					printf("fail on pin ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    1566:	2141      	movs	r1, #65	; 0x41
    1568:	e7f8      	b.n	155c <adc_get+0x48>
			printf("fail on port ADC can currently only be configured on %c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    156a:	4b2e      	ldr	r3, [pc, #184]	; (1624 <adc_get+0x110>)
    156c:	4798      	blx	r3
    156e:	2362      	movs	r3, #98	; 0x62
    1570:	5cc2      	ldrb	r2, [r0, r3]
    1572:	3b5f      	subs	r3, #95	; 0x5f
    1574:	4013      	ands	r3, r2
    1576:	2b02      	cmp	r3, #2
    1578:	d006      	beq.n	1588 <adc_get+0x74>
    157a:	2161      	movs	r1, #97	; 0x61
    157c:	2202      	movs	r2, #2
    157e:	482c      	ldr	r0, [pc, #176]	; (1630 <adc_get+0x11c>)
    1580:	4b2a      	ldr	r3, [pc, #168]	; (162c <adc_get+0x118>)
    1582:	4798      	blx	r3
}
    1584:	b003      	add	sp, #12
    1586:	bd30      	pop	{r4, r5, pc}
			printf("fail on port ADC can currently only be configured on %c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    1588:	2141      	movs	r1, #65	; 0x41
    158a:	e7f7      	b.n	157c <adc_get+0x68>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    158c:	4210      	tst	r0, r2
    158e:	d10a      	bne.n	15a6 <adc_get+0x92>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1590:	7e0b      	ldrb	r3, [r1, #24]
    1592:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1594:	0002      	movs	r2, r0
    1596:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1598:	421d      	tst	r5, r3
    159a:	d000      	beq.n	159e <adc_get+0x8a>
		status_flags |= ADC_STATUS_WINDOW;
    159c:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    159e:	421c      	tst	r4, r3
    15a0:	d0f4      	beq.n	158c <adc_get+0x78>
		status_flags |= ADC_STATUS_OVERRUN;
    15a2:	432a      	orrs	r2, r5
    15a4:	e7f2      	b.n	158c <adc_get+0x78>
    15a6:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    15a8:	b25b      	sxtb	r3, r3
    15aa:	2b00      	cmp	r3, #0
    15ac:	dbfb      	blt.n	15a6 <adc_get+0x92>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    15ae:	8b48      	ldrh	r0, [r1, #26]
    15b0:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    15b2:	2301      	movs	r3, #1
    15b4:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    15b6:	7e0a      	ldrb	r2, [r1, #24]
    15b8:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    15ba:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    15bc:	0754      	lsls	r4, r2, #29
    15be:	d501      	bpl.n	15c4 <adc_get+0xb0>
		status_flags |= ADC_STATUS_WINDOW;
    15c0:	2402      	movs	r4, #2
    15c2:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    15c4:	0792      	lsls	r2, r2, #30
    15c6:	d501      	bpl.n	15cc <adc_get+0xb8>
		status_flags |= ADC_STATUS_OVERRUN;
    15c8:	2204      	movs	r2, #4
    15ca:	4313      	orrs	r3, r2

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    15cc:	075b      	lsls	r3, r3, #29
    15ce:	d501      	bpl.n	15d4 <adc_get+0xc0>
	adc_module->INTFLAG.reg = int_flags;
    15d0:	2302      	movs	r3, #2
    15d2:	760b      	strb	r3, [r1, #24]
		float voltage = (adc_result/4095.0)*1.65; //TODO: set values, NO MAGIC NUMBERS
    15d4:	4b17      	ldr	r3, [pc, #92]	; (1634 <adc_get+0x120>)
    15d6:	4798      	blx	r3
    15d8:	2200      	movs	r2, #0
    15da:	4b17      	ldr	r3, [pc, #92]	; (1638 <adc_get+0x124>)
    15dc:	4c17      	ldr	r4, [pc, #92]	; (163c <adc_get+0x128>)
    15de:	47a0      	blx	r4
    15e0:	4a17      	ldr	r2, [pc, #92]	; (1640 <adc_get+0x12c>)
    15e2:	4b18      	ldr	r3, [pc, #96]	; (1644 <adc_get+0x130>)
    15e4:	4c18      	ldr	r4, [pc, #96]	; (1648 <adc_get+0x134>)
    15e6:	47a0      	blx	r4
    15e8:	4b18      	ldr	r3, [pc, #96]	; (164c <adc_get+0x138>)
    15ea:	4798      	blx	r3
    15ec:	1c04      	adds	r4, r0, #0
		printf("Voltage at P%c%d: %f\r\n", toupper(port), pin_val, voltage);
    15ee:	4b0d      	ldr	r3, [pc, #52]	; (1624 <adc_get+0x110>)
    15f0:	4798      	blx	r3
    15f2:	2362      	movs	r3, #98	; 0x62
    15f4:	5cc2      	ldrb	r2, [r0, r3]
    15f6:	3b5f      	subs	r3, #95	; 0x5f
    15f8:	4013      	ands	r3, r2
    15fa:	2b02      	cmp	r3, #2
    15fc:	d00b      	beq.n	1616 <adc_get+0x102>
    15fe:	2561      	movs	r5, #97	; 0x61
    1600:	1c20      	adds	r0, r4, #0
    1602:	4b13      	ldr	r3, [pc, #76]	; (1650 <adc_get+0x13c>)
    1604:	4798      	blx	r3
    1606:	9000      	str	r0, [sp, #0]
    1608:	9101      	str	r1, [sp, #4]
    160a:	2200      	movs	r2, #0
    160c:	0029      	movs	r1, r5
    160e:	4811      	ldr	r0, [pc, #68]	; (1654 <adc_get+0x140>)
    1610:	4b06      	ldr	r3, [pc, #24]	; (162c <adc_get+0x118>)
    1612:	4798      	blx	r3
}
    1614:	e7b6      	b.n	1584 <adc_get+0x70>
		printf("Voltage at P%c%d: %f\r\n", toupper(port), pin_val, voltage);
    1616:	2541      	movs	r5, #65	; 0x41
    1618:	e7f2      	b.n	1600 <adc_get+0xec>
    161a:	46c0      	nop			; (mov r8, r8)
    161c:	000014b5 	.word	0x000014b5
    1620:	200002b4 	.word	0x200002b4
    1624:	00003691 	.word	0x00003691
    1628:	00008b64 	.word	0x00008b64
    162c:	00004139 	.word	0x00004139
    1630:	00008bb4 	.word	0x00008bb4
    1634:	00008615 	.word	0x00008615
    1638:	40affe00 	.word	0x40affe00
    163c:	000071d9 	.word	0x000071d9
    1640:	66666666 	.word	0x66666666
    1644:	3ffa6666 	.word	0x3ffa6666
    1648:	00007a41 	.word	0x00007a41
    164c:	000087ad 	.word	0x000087ad
    1650:	00008709 	.word	0x00008709
    1654:	00008c04 	.word	0x00008c04

00001658 <mcu_temp>:
{
    1658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configure_adc(pin);
    165a:	2018      	movs	r0, #24
    165c:	4b34      	ldr	r3, [pc, #208]	; (1730 <mcu_temp+0xd8>)
    165e:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1660:	4b34      	ldr	r3, [pc, #208]	; (1734 <mcu_temp+0xdc>)
    1662:	6819      	ldr	r1, [r3, #0]
    1664:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1666:	b25b      	sxtb	r3, r3
    1668:	2b00      	cmp	r3, #0
    166a:	dbfb      	blt.n	1664 <mcu_temp+0xc>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    166c:	7b0b      	ldrb	r3, [r1, #12]
    166e:	2202      	movs	r2, #2
    1670:	4313      	orrs	r3, r2
    1672:	730b      	strb	r3, [r1, #12]
    1674:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1676:	b25b      	sxtb	r3, r3
    1678:	2b00      	cmp	r3, #0
    167a:	dbfb      	blt.n	1674 <mcu_temp+0x1c>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    167c:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    167e:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    1680:	2402      	movs	r4, #2
    1682:	e001      	b.n	1688 <mcu_temp+0x30>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1684:	4210      	tst	r0, r2
    1686:	d10a      	bne.n	169e <mcu_temp+0x46>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1688:	7e0b      	ldrb	r3, [r1, #24]
    168a:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    168c:	0002      	movs	r2, r0
    168e:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1690:	421d      	tst	r5, r3
    1692:	d000      	beq.n	1696 <mcu_temp+0x3e>
		status_flags |= ADC_STATUS_WINDOW;
    1694:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1696:	421c      	tst	r4, r3
    1698:	d0f4      	beq.n	1684 <mcu_temp+0x2c>
		status_flags |= ADC_STATUS_OVERRUN;
    169a:	432a      	orrs	r2, r5
    169c:	e7f2      	b.n	1684 <mcu_temp+0x2c>
    169e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    16a0:	b25b      	sxtb	r3, r3
    16a2:	2b00      	cmp	r3, #0
    16a4:	dbfb      	blt.n	169e <mcu_temp+0x46>
	*result = adc_module->RESULT.reg;
    16a6:	8b4c      	ldrh	r4, [r1, #26]
    16a8:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    16aa:	2301      	movs	r3, #1
    16ac:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    16ae:	7e0a      	ldrb	r2, [r1, #24]
    16b0:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    16b2:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    16b4:	0750      	lsls	r0, r2, #29
    16b6:	d501      	bpl.n	16bc <mcu_temp+0x64>
		status_flags |= ADC_STATUS_WINDOW;
    16b8:	2002      	movs	r0, #2
    16ba:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    16bc:	0792      	lsls	r2, r2, #30
    16be:	d501      	bpl.n	16c4 <mcu_temp+0x6c>
		status_flags |= ADC_STATUS_OVERRUN;
    16c0:	2204      	movs	r2, #4
    16c2:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    16c4:	075b      	lsls	r3, r3, #29
    16c6:	d501      	bpl.n	16cc <mcu_temp+0x74>
	adc_module->INTFLAG.reg = int_flags;
    16c8:	2302      	movs	r3, #2
    16ca:	760b      	strb	r3, [r1, #24]
	if((adc_result & 0x8000) == 0) {
    16cc:	b223      	sxth	r3, r4
    16ce:	2b00      	cmp	r3, #0
    16d0:	db18      	blt.n	1704 <mcu_temp+0xac>
      temperature = (adc_result >> 8) + ((adc_result & 0x00F0)>>4)*0.5;
    16d2:	0620      	lsls	r0, r4, #24
    16d4:	0f00      	lsrs	r0, r0, #28
    16d6:	4d18      	ldr	r5, [pc, #96]	; (1738 <mcu_temp+0xe0>)
    16d8:	47a8      	blx	r5
    16da:	2200      	movs	r2, #0
    16dc:	4b17      	ldr	r3, [pc, #92]	; (173c <mcu_temp+0xe4>)
    16de:	4e18      	ldr	r6, [pc, #96]	; (1740 <mcu_temp+0xe8>)
    16e0:	47b0      	blx	r6
    16e2:	0006      	movs	r6, r0
    16e4:	000f      	movs	r7, r1
    16e6:	0a20      	lsrs	r0, r4, #8
    16e8:	47a8      	blx	r5
    16ea:	0002      	movs	r2, r0
    16ec:	000b      	movs	r3, r1
    16ee:	0030      	movs	r0, r6
    16f0:	0039      	movs	r1, r7
    16f2:	4c14      	ldr	r4, [pc, #80]	; (1744 <mcu_temp+0xec>)
    16f4:	47a0      	blx	r4
	printf("MCU temperature: %dC \r\n", (int) temperature);
    16f6:	4b14      	ldr	r3, [pc, #80]	; (1748 <mcu_temp+0xf0>)
    16f8:	4798      	blx	r3
    16fa:	0001      	movs	r1, r0
    16fc:	4813      	ldr	r0, [pc, #76]	; (174c <mcu_temp+0xf4>)
    16fe:	4b14      	ldr	r3, [pc, #80]	; (1750 <mcu_temp+0xf8>)
    1700:	4798      	blx	r3
}
    1702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      uint16_t twosComplement = (~adc_result) + 1;
    1704:	4264      	negs	r4, r4
    1706:	b2a4      	uxth	r4, r4
      temperature = - (twosComplement >> 8) - ((twosComplement & 0x00F0)>>4)*0.5;
    1708:	0a20      	lsrs	r0, r4, #8
    170a:	4240      	negs	r0, r0
    170c:	4d0a      	ldr	r5, [pc, #40]	; (1738 <mcu_temp+0xe0>)
    170e:	47a8      	blx	r5
    1710:	0006      	movs	r6, r0
    1712:	000f      	movs	r7, r1
    1714:	0624      	lsls	r4, r4, #24
    1716:	0f20      	lsrs	r0, r4, #28
    1718:	47a8      	blx	r5
    171a:	2200      	movs	r2, #0
    171c:	4b07      	ldr	r3, [pc, #28]	; (173c <mcu_temp+0xe4>)
    171e:	4c08      	ldr	r4, [pc, #32]	; (1740 <mcu_temp+0xe8>)
    1720:	47a0      	blx	r4
    1722:	0002      	movs	r2, r0
    1724:	000b      	movs	r3, r1
    1726:	0030      	movs	r0, r6
    1728:	0039      	movs	r1, r7
    172a:	4c0a      	ldr	r4, [pc, #40]	; (1754 <mcu_temp+0xfc>)
    172c:	47a0      	blx	r4
    172e:	e7e2      	b.n	16f6 <mcu_temp+0x9e>
    1730:	000014b5 	.word	0x000014b5
    1734:	200002b4 	.word	0x200002b4
    1738:	00008615 	.word	0x00008615
    173c:	3fe00000 	.word	0x3fe00000
    1740:	00007a41 	.word	0x00007a41
    1744:	00006bb9 	.word	0x00006bb9
    1748:	000085ad 	.word	0x000085ad
    174c:	000091e4 	.word	0x000091e4
    1750:	00004139 	.word	0x00004139
    1754:	00007f41 	.word	0x00007f41

00001758 <configure_port_pins_set>:
/**
 * Sets a given port to output.
 * @param pin pin of the port to set
 */
void configure_port_pins_set(int pin)
{
    1758:	b500      	push	{lr}
    175a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    175c:	a901      	add	r1, sp, #4
    175e:	2301      	movs	r3, #1
    1760:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    1762:	2200      	movs	r2, #0
    1764:	708a      	strb	r2, [r1, #2]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1766:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(pin, &config_port_pin);
    1768:	b2c0      	uxtb	r0, r0
    176a:	4b02      	ldr	r3, [pc, #8]	; (1774 <configure_port_pins_set+0x1c>)
    176c:	4798      	blx	r3
}
    176e:	b003      	add	sp, #12
    1770:	bd00      	pop	{pc}
    1772:	46c0      	nop			; (mov r8, r8)
    1774:	00002c79 	.word	0x00002c79

00001778 <gpio_set>:
{
    1778:	b510      	push	{r4, lr}
	int pin_val = get_gpio_pin(port, pin);
    177a:	4b0d      	ldr	r3, [pc, #52]	; (17b0 <gpio_set+0x38>)
    177c:	4798      	blx	r3
    177e:	0004      	movs	r4, r0
	if (pin_val != -1) {
    1780:	1c43      	adds	r3, r0, #1
    1782:	d013      	beq.n	17ac <gpio_set+0x34>
		configure_port_pins_set(pin_val); //TODO: decide if this is necessary
    1784:	4b0b      	ldr	r3, [pc, #44]	; (17b4 <gpio_set+0x3c>)
    1786:	4798      	blx	r3
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1788:	b2e2      	uxtb	r2, r4
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    178a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    178c:	0621      	lsls	r1, r4, #24
    178e:	d404      	bmi.n	179a <gpio_set+0x22>
		return &(ports[port_index]->Group[group_index]);
    1790:	0953      	lsrs	r3, r2, #5
    1792:	01db      	lsls	r3, r3, #7
    1794:	4908      	ldr	r1, [pc, #32]	; (17b8 <gpio_set+0x40>)
    1796:	468c      	mov	ip, r1
    1798:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    179a:	211f      	movs	r1, #31
    179c:	4011      	ands	r1, r2
    179e:	2201      	movs	r2, #1
    17a0:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    17a2:	619a      	str	r2, [r3, #24]
		printf("Pin %d set high\r\n", pin_val);
    17a4:	0021      	movs	r1, r4
    17a6:	4805      	ldr	r0, [pc, #20]	; (17bc <gpio_set+0x44>)
    17a8:	4b05      	ldr	r3, [pc, #20]	; (17c0 <gpio_set+0x48>)
    17aa:	4798      	blx	r3
}
    17ac:	bd10      	pop	{r4, pc}
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	000012d9 	.word	0x000012d9
    17b4:	00001759 	.word	0x00001759
    17b8:	41004400 	.word	0x41004400
    17bc:	00008c70 	.word	0x00008c70
    17c0:	00004139 	.word	0x00004139

000017c4 <gpio_clear>:
{
    17c4:	b510      	push	{r4, lr}
	int pin_val = get_gpio_pin(port, pin);
    17c6:	4b0d      	ldr	r3, [pc, #52]	; (17fc <gpio_clear+0x38>)
    17c8:	4798      	blx	r3
    17ca:	0004      	movs	r4, r0
	if (pin_val != -1) {
    17cc:	1c43      	adds	r3, r0, #1
    17ce:	d013      	beq.n	17f8 <gpio_clear+0x34>
		configure_port_pins_set(pin_val); //TODO: decide if this is necessary
    17d0:	4b0b      	ldr	r3, [pc, #44]	; (1800 <gpio_clear+0x3c>)
    17d2:	4798      	blx	r3
	if (port_index < PORT_INST_NUM) {
    17d4:	b2e2      	uxtb	r2, r4
		return NULL;
    17d6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    17d8:	0621      	lsls	r1, r4, #24
    17da:	d404      	bmi.n	17e6 <gpio_clear+0x22>
		return &(ports[port_index]->Group[group_index]);
    17dc:	0953      	lsrs	r3, r2, #5
    17de:	01db      	lsls	r3, r3, #7
    17e0:	4908      	ldr	r1, [pc, #32]	; (1804 <gpio_clear+0x40>)
    17e2:	468c      	mov	ip, r1
    17e4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    17e6:	211f      	movs	r1, #31
    17e8:	4011      	ands	r1, r2
    17ea:	2201      	movs	r2, #1
    17ec:	408a      	lsls	r2, r1
	} else {
		port_base->OUTCLR.reg = pin_mask;
    17ee:	615a      	str	r2, [r3, #20]
		printf("Pin %d cleared\r\n", pin_val);
    17f0:	0021      	movs	r1, r4
    17f2:	4805      	ldr	r0, [pc, #20]	; (1808 <gpio_clear+0x44>)
    17f4:	4b05      	ldr	r3, [pc, #20]	; (180c <gpio_clear+0x48>)
    17f6:	4798      	blx	r3
}
    17f8:	bd10      	pop	{r4, pc}
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	000012d9 	.word	0x000012d9
    1800:	00001759 	.word	0x00001759
    1804:	41004400 	.word	0x41004400
    1808:	00008c48 	.word	0x00008c48
    180c:	00004139 	.word	0x00004139

00001810 <get_moisture>:
{
    1810:	b570      	push	{r4, r5, r6, lr}
	configure_port_pins_set(PIN_PA17);
    1812:	2011      	movs	r0, #17
    1814:	4b26      	ldr	r3, [pc, #152]	; (18b0 <get_moisture+0xa0>)
    1816:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1818:	2280      	movs	r2, #128	; 0x80
    181a:	0292      	lsls	r2, r2, #10
    181c:	4b25      	ldr	r3, [pc, #148]	; (18b4 <get_moisture+0xa4>)
    181e:	619a      	str	r2, [r3, #24]
	delay_ms(500);
    1820:	20fa      	movs	r0, #250	; 0xfa
    1822:	0040      	lsls	r0, r0, #1
    1824:	4b24      	ldr	r3, [pc, #144]	; (18b8 <get_moisture+0xa8>)
    1826:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1828:	4b24      	ldr	r3, [pc, #144]	; (18bc <get_moisture+0xac>)
    182a:	6819      	ldr	r1, [r3, #0]
    182c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    182e:	b25b      	sxtb	r3, r3
    1830:	2b00      	cmp	r3, #0
    1832:	dbfb      	blt.n	182c <get_moisture+0x1c>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1834:	7b0b      	ldrb	r3, [r1, #12]
    1836:	2202      	movs	r2, #2
    1838:	4313      	orrs	r3, r2
    183a:	730b      	strb	r3, [r1, #12]
    183c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    183e:	b25b      	sxtb	r3, r3
    1840:	2b00      	cmp	r3, #0
    1842:	dbfb      	blt.n	183c <get_moisture+0x2c>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1844:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1846:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    1848:	2402      	movs	r4, #2
    184a:	e001      	b.n	1850 <get_moisture+0x40>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    184c:	4210      	tst	r0, r2
    184e:	d10a      	bne.n	1866 <get_moisture+0x56>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1850:	7e0b      	ldrb	r3, [r1, #24]
    1852:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1854:	0002      	movs	r2, r0
    1856:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1858:	421d      	tst	r5, r3
    185a:	d000      	beq.n	185e <get_moisture+0x4e>
		status_flags |= ADC_STATUS_WINDOW;
    185c:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    185e:	421c      	tst	r4, r3
    1860:	d0f4      	beq.n	184c <get_moisture+0x3c>
		status_flags |= ADC_STATUS_OVERRUN;
    1862:	432a      	orrs	r2, r5
    1864:	e7f2      	b.n	184c <get_moisture+0x3c>
    1866:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1868:	b25b      	sxtb	r3, r3
    186a:	2b00      	cmp	r3, #0
    186c:	dbfb      	blt.n	1866 <get_moisture+0x56>
	*result = adc_module->RESULT.reg;
    186e:	8b48      	ldrh	r0, [r1, #26]
    1870:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    1872:	2301      	movs	r3, #1
    1874:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1876:	7e0a      	ldrb	r2, [r1, #24]
    1878:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    187a:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    187c:	0754      	lsls	r4, r2, #29
    187e:	d501      	bpl.n	1884 <get_moisture+0x74>
		status_flags |= ADC_STATUS_WINDOW;
    1880:	2402      	movs	r4, #2
    1882:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1884:	0792      	lsls	r2, r2, #30
    1886:	d501      	bpl.n	188c <get_moisture+0x7c>
		status_flags |= ADC_STATUS_OVERRUN;
    1888:	2204      	movs	r2, #4
    188a:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    188c:	075b      	lsls	r3, r3, #29
    188e:	d501      	bpl.n	1894 <get_moisture+0x84>
	adc_module->INTFLAG.reg = int_flags;
    1890:	2302      	movs	r3, #2
    1892:	760b      	strb	r3, [r1, #24]
		port_base->OUTCLR.reg = pin_mask;
    1894:	2280      	movs	r2, #128	; 0x80
    1896:	0292      	lsls	r2, r2, #10
    1898:	4b06      	ldr	r3, [pc, #24]	; (18b4 <get_moisture+0xa4>)
    189a:	615a      	str	r2, [r3, #20]
	float moisture = (adc_result/4095.0f)*(100.0f); //TODO: set values, NO MAGIC NUMBERS
    189c:	4b08      	ldr	r3, [pc, #32]	; (18c0 <get_moisture+0xb0>)
    189e:	4798      	blx	r3
    18a0:	4908      	ldr	r1, [pc, #32]	; (18c4 <get_moisture+0xb4>)
    18a2:	4b09      	ldr	r3, [pc, #36]	; (18c8 <get_moisture+0xb8>)
    18a4:	4798      	blx	r3
    18a6:	4909      	ldr	r1, [pc, #36]	; (18cc <get_moisture+0xbc>)
    18a8:	4b09      	ldr	r3, [pc, #36]	; (18d0 <get_moisture+0xc0>)
    18aa:	4798      	blx	r3
}
    18ac:	bd70      	pop	{r4, r5, r6, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	00001759 	.word	0x00001759
    18b4:	41004400 	.word	0x41004400
    18b8:	00002c4d 	.word	0x00002c4d
    18bc:	200002b4 	.word	0x200002b4
    18c0:	00006b19 	.word	0x00006b19
    18c4:	457ff000 	.word	0x457ff000
    18c8:	00006649 	.word	0x00006649
    18cc:	42c80000 	.word	0x42c80000
    18d0:	000068d9 	.word	0x000068d9

000018d4 <read_sensor>:
{
    18d4:	b5d0      	push	{r4, r6, r7, lr}
    18d6:	b082      	sub	sp, #8
    18d8:	0004      	movs	r4, r0
	if(!strcmp("lux", sensor_name)) {
    18da:	0001      	movs	r1, r0
    18dc:	481a      	ldr	r0, [pc, #104]	; (1948 <read_sensor+0x74>)
    18de:	4b1b      	ldr	r3, [pc, #108]	; (194c <read_sensor+0x78>)
    18e0:	4798      	blx	r3
    18e2:	2800      	cmp	r0, #0
    18e4:	d00d      	beq.n	1902 <read_sensor+0x2e>
	if(!strcmp("temp", sensor_name)) {
    18e6:	0021      	movs	r1, r4
    18e8:	4819      	ldr	r0, [pc, #100]	; (1950 <read_sensor+0x7c>)
    18ea:	4b18      	ldr	r3, [pc, #96]	; (194c <read_sensor+0x78>)
    18ec:	4798      	blx	r3
    18ee:	2800      	cmp	r0, #0
    18f0:	d012      	beq.n	1918 <read_sensor+0x44>
	if(!strcmp("moisture", sensor_name)) {
    18f2:	0021      	movs	r1, r4
    18f4:	4817      	ldr	r0, [pc, #92]	; (1954 <read_sensor+0x80>)
    18f6:	4b15      	ldr	r3, [pc, #84]	; (194c <read_sensor+0x78>)
    18f8:	4798      	blx	r3
    18fa:	2800      	cmp	r0, #0
    18fc:	d01a      	beq.n	1934 <read_sensor+0x60>
}
    18fe:	b002      	add	sp, #8
    1900:	bdd0      	pop	{r4, r6, r7, pc}
		power_on_tsl2561();
    1902:	4b15      	ldr	r3, [pc, #84]	; (1958 <read_sensor+0x84>)
    1904:	4798      	blx	r3
		printf("Current lux: %d\r\n", get_lux());
    1906:	4b15      	ldr	r3, [pc, #84]	; (195c <read_sensor+0x88>)
    1908:	4798      	blx	r3
    190a:	0001      	movs	r1, r0
    190c:	4814      	ldr	r0, [pc, #80]	; (1960 <read_sensor+0x8c>)
    190e:	4b15      	ldr	r3, [pc, #84]	; (1964 <read_sensor+0x90>)
    1910:	4798      	blx	r3
		power_off_tsl2561();
    1912:	4b15      	ldr	r3, [pc, #84]	; (1968 <read_sensor+0x94>)
    1914:	4798      	blx	r3
    1916:	e7e6      	b.n	18e6 <read_sensor+0x12>
		double temperature = get_temp();
    1918:	4b14      	ldr	r3, [pc, #80]	; (196c <read_sensor+0x98>)
    191a:	4798      	blx	r3
    191c:	0006      	movs	r6, r0
    191e:	000f      	movs	r7, r1
		double humidity = get_humidity();
    1920:	4b13      	ldr	r3, [pc, #76]	; (1970 <read_sensor+0x9c>)
    1922:	4798      	blx	r3
		printf("Current temperature: %3.2f\r\n Current humidity: %3.2f\r\n", temperature, humidity);
    1924:	9000      	str	r0, [sp, #0]
    1926:	9101      	str	r1, [sp, #4]
    1928:	0032      	movs	r2, r6
    192a:	003b      	movs	r3, r7
    192c:	4811      	ldr	r0, [pc, #68]	; (1974 <read_sensor+0xa0>)
    192e:	490d      	ldr	r1, [pc, #52]	; (1964 <read_sensor+0x90>)
    1930:	4788      	blx	r1
    1932:	e7de      	b.n	18f2 <read_sensor+0x1e>
		float m_value = get_moisture();
    1934:	4b10      	ldr	r3, [pc, #64]	; (1978 <read_sensor+0xa4>)
    1936:	4798      	blx	r3
		printf("Current moisture: %.02f %% \r\n", m_value);
    1938:	4b10      	ldr	r3, [pc, #64]	; (197c <read_sensor+0xa8>)
    193a:	4798      	blx	r3
    193c:	0002      	movs	r2, r0
    193e:	000b      	movs	r3, r1
    1940:	480f      	ldr	r0, [pc, #60]	; (1980 <read_sensor+0xac>)
    1942:	4908      	ldr	r1, [pc, #32]	; (1964 <read_sensor+0x90>)
    1944:	4788      	blx	r1
}
    1946:	e7da      	b.n	18fe <read_sensor+0x2a>
    1948:	000092b4 	.word	0x000092b4
    194c:	000043d1 	.word	0x000043d1
    1950:	00009008 	.word	0x00009008
    1954:	00009304 	.word	0x00009304
    1958:	00000621 	.word	0x00000621
    195c:	0000069d 	.word	0x0000069d
    1960:	000092b8 	.word	0x000092b8
    1964:	00004139 	.word	0x00004139
    1968:	0000063d 	.word	0x0000063d
    196c:	00000449 	.word	0x00000449
    1970:	00000419 	.word	0x00000419
    1974:	000092cc 	.word	0x000092cc
    1978:	00001811 	.word	0x00001811
    197c:	00008709 	.word	0x00008709
    1980:	00009310 	.word	0x00009310

00001984 <configure_port_pins_get>:
/**
 * Sets a given port to input
 * @param pin pin to set as input
 */
void configure_port_pins_get(int pin)
{
    1984:	b500      	push	{lr}
    1986:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    1988:	a901      	add	r1, sp, #4
    198a:	2300      	movs	r3, #0
    198c:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    198e:	2201      	movs	r2, #1
    1990:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1992:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(pin, &config_port_pin);
    1994:	b2c0      	uxtb	r0, r0
    1996:	4b02      	ldr	r3, [pc, #8]	; (19a0 <configure_port_pins_get+0x1c>)
    1998:	4798      	blx	r3
}
    199a:	b003      	add	sp, #12
    199c:	bd00      	pop	{pc}
    199e:	46c0      	nop			; (mov r8, r8)
    19a0:	00002c79 	.word	0x00002c79

000019a4 <gpio_get>:
{
    19a4:	b510      	push	{r4, lr}
	int pin_val = get_gpio_pin(port, pin);
    19a6:	4b0d      	ldr	r3, [pc, #52]	; (19dc <gpio_get+0x38>)
    19a8:	4798      	blx	r3
    19aa:	0004      	movs	r4, r0
	configure_port_pins_get(pin_val); //TODO: decide if this is necessary
    19ac:	4b0c      	ldr	r3, [pc, #48]	; (19e0 <gpio_get+0x3c>)
    19ae:	4798      	blx	r3
	if (port_index < PORT_INST_NUM) {
    19b0:	b2e0      	uxtb	r0, r4
		return NULL;
    19b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    19b4:	0622      	lsls	r2, r4, #24
    19b6:	d404      	bmi.n	19c2 <gpio_get+0x1e>
		return &(ports[port_index]->Group[group_index]);
    19b8:	0943      	lsrs	r3, r0, #5
    19ba:	01db      	lsls	r3, r3, #7
    19bc:	4a09      	ldr	r2, [pc, #36]	; (19e4 <gpio_get+0x40>)
    19be:	4694      	mov	ip, r2
    19c0:	4463      	add	r3, ip
	return (port_base->IN.reg & pin_mask);
    19c2:	6a1a      	ldr	r2, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    19c4:	211f      	movs	r1, #31
    19c6:	4001      	ands	r1, r0
    19c8:	2301      	movs	r3, #1
    19ca:	408b      	lsls	r3, r1
	return (port_base->IN.reg & pin_mask);
    19cc:	401a      	ands	r2, r3
    19ce:	1e53      	subs	r3, r2, #1
    19d0:	419a      	sbcs	r2, r3
	printf("pin %d value: %d\r\n", pin_val, state);
    19d2:	0021      	movs	r1, r4
    19d4:	4804      	ldr	r0, [pc, #16]	; (19e8 <gpio_get+0x44>)
    19d6:	4b05      	ldr	r3, [pc, #20]	; (19ec <gpio_get+0x48>)
    19d8:	4798      	blx	r3
}
    19da:	bd10      	pop	{r4, pc}
    19dc:	000012d9 	.word	0x000012d9
    19e0:	00001985 	.word	0x00001985
    19e4:	41004400 	.word	0x41004400
    19e8:	00008c5c 	.word	0x00008c5c
    19ec:	00004139 	.word	0x00004139

000019f0 <led1_on>:

/**
 * Functions to toggle LEDs
 */
void led1_on(void)
{
    19f0:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA21);
    19f2:	2015      	movs	r0, #21
    19f4:	4b03      	ldr	r3, [pc, #12]	; (1a04 <led1_on+0x14>)
    19f6:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    19f8:	2280      	movs	r2, #128	; 0x80
    19fa:	0392      	lsls	r2, r2, #14
    19fc:	4b02      	ldr	r3, [pc, #8]	; (1a08 <led1_on+0x18>)
    19fe:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PA21, true);	
}
    1a00:	bd10      	pop	{r4, pc}
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	00001759 	.word	0x00001759
    1a08:	41004400 	.word	0x41004400

00001a0c <led1_off>:

void led1_off(void)
{
    1a0c:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA21);
    1a0e:	2015      	movs	r0, #21
    1a10:	4b03      	ldr	r3, [pc, #12]	; (1a20 <led1_off+0x14>)
    1a12:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    1a14:	2280      	movs	r2, #128	; 0x80
    1a16:	0392      	lsls	r2, r2, #14
    1a18:	4b02      	ldr	r3, [pc, #8]	; (1a24 <led1_off+0x18>)
    1a1a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA21, false);
}
    1a1c:	bd10      	pop	{r4, pc}
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	00001759 	.word	0x00001759
    1a24:	41004400 	.word	0x41004400

00001a28 <led2_on>:

void led2_on(void)
{
    1a28:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA03);
    1a2a:	2003      	movs	r0, #3
    1a2c:	4b02      	ldr	r3, [pc, #8]	; (1a38 <led2_on+0x10>)
    1a2e:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1a30:	2208      	movs	r2, #8
    1a32:	4b02      	ldr	r3, [pc, #8]	; (1a3c <led2_on+0x14>)
    1a34:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PA03, true);
}
    1a36:	bd10      	pop	{r4, pc}
    1a38:	00001759 	.word	0x00001759
    1a3c:	41004400 	.word	0x41004400

00001a40 <led2_off>:

void led2_off(void)
{
    1a40:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA03);
    1a42:	2003      	movs	r0, #3
    1a44:	4b02      	ldr	r3, [pc, #8]	; (1a50 <led2_off+0x10>)
    1a46:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    1a48:	2208      	movs	r2, #8
    1a4a:	4b02      	ldr	r3, [pc, #8]	; (1a54 <led2_off+0x14>)
    1a4c:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA03, false);
}
    1a4e:	bd10      	pop	{r4, pc}
    1a50:	00001759 	.word	0x00001759
    1a54:	41004400 	.word	0x41004400

00001a58 <boost_enable>:

void boost_enable(void)
{
    1a58:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA20);
    1a5a:	2014      	movs	r0, #20
    1a5c:	4b03      	ldr	r3, [pc, #12]	; (1a6c <boost_enable+0x14>)
    1a5e:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1a60:	2280      	movs	r2, #128	; 0x80
    1a62:	0352      	lsls	r2, r2, #13
    1a64:	4b02      	ldr	r3, [pc, #8]	; (1a70 <boost_enable+0x18>)
    1a66:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PA20, true);
}
    1a68:	bd10      	pop	{r4, pc}
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	00001759 	.word	0x00001759
    1a70:	41004400 	.word	0x41004400

00001a74 <boost_disable>:

void boost_disable(void)
{
    1a74:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA20);
    1a76:	2014      	movs	r0, #20
    1a78:	4b03      	ldr	r3, [pc, #12]	; (1a88 <boost_disable+0x14>)
    1a7a:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    1a7c:	2280      	movs	r2, #128	; 0x80
    1a7e:	0352      	lsls	r2, r2, #13
    1a80:	4b02      	ldr	r3, [pc, #8]	; (1a8c <boost_disable+0x18>)
    1a82:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA20, false);
}
    1a84:	bd10      	pop	{r4, pc}
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	00001759 	.word	0x00001759
    1a8c:	41004400 	.word	0x41004400

00001a90 <relay1_enable>:

void relay1_enable(void)
{
    1a90:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB02);
    1a92:	2022      	movs	r0, #34	; 0x22
    1a94:	4b02      	ldr	r3, [pc, #8]	; (1aa0 <relay1_enable+0x10>)
    1a96:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1a98:	2204      	movs	r2, #4
    1a9a:	4b02      	ldr	r3, [pc, #8]	; (1aa4 <relay1_enable+0x14>)
    1a9c:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB02, true);
}
    1a9e:	bd10      	pop	{r4, pc}
    1aa0:	00001759 	.word	0x00001759
    1aa4:	41004480 	.word	0x41004480

00001aa8 <relay1_disable>:

void relay1_disable(void)
{
    1aa8:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB02);
    1aaa:	2022      	movs	r0, #34	; 0x22
    1aac:	4b02      	ldr	r3, [pc, #8]	; (1ab8 <relay1_disable+0x10>)
    1aae:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    1ab0:	2204      	movs	r2, #4
    1ab2:	4b02      	ldr	r3, [pc, #8]	; (1abc <relay1_disable+0x14>)
    1ab4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PB02, false);
}
    1ab6:	bd10      	pop	{r4, pc}
    1ab8:	00001759 	.word	0x00001759
    1abc:	41004480 	.word	0x41004480

00001ac0 <relay2_enable>:

void relay2_enable(void)
{
    1ac0:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB03);
    1ac2:	2023      	movs	r0, #35	; 0x23
    1ac4:	4b02      	ldr	r3, [pc, #8]	; (1ad0 <relay2_enable+0x10>)
    1ac6:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1ac8:	2208      	movs	r2, #8
    1aca:	4b02      	ldr	r3, [pc, #8]	; (1ad4 <relay2_enable+0x14>)
    1acc:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB03, true);
}
    1ace:	bd10      	pop	{r4, pc}
    1ad0:	00001759 	.word	0x00001759
    1ad4:	41004480 	.word	0x41004480

00001ad8 <relay2_disable>:

void relay2_disable(void)
{
    1ad8:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB03);
    1ada:	2023      	movs	r0, #35	; 0x23
    1adc:	4b02      	ldr	r3, [pc, #8]	; (1ae8 <relay2_disable+0x10>)
    1ade:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    1ae0:	2208      	movs	r2, #8
    1ae2:	4b02      	ldr	r3, [pc, #8]	; (1aec <relay2_disable+0x14>)
    1ae4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PB03, false);
}
    1ae6:	bd10      	pop	{r4, pc}
    1ae8:	00001759 	.word	0x00001759
    1aec:	41004480 	.word	0x41004480

00001af0 <gpio5_enable>:

void gpio5_enable(void)
{
    1af0:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB23);
    1af2:	2037      	movs	r0, #55	; 0x37
    1af4:	4b03      	ldr	r3, [pc, #12]	; (1b04 <gpio5_enable+0x14>)
    1af6:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1af8:	2280      	movs	r2, #128	; 0x80
    1afa:	0412      	lsls	r2, r2, #16
    1afc:	4b02      	ldr	r3, [pc, #8]	; (1b08 <gpio5_enable+0x18>)
    1afe:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB23, true);
}
    1b00:	bd10      	pop	{r4, pc}
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	00001759 	.word	0x00001759
    1b08:	41004480 	.word	0x41004480

00001b0c <gpio5_disable>:

void gpio5_disable(void)
{
    1b0c:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB23);
    1b0e:	2037      	movs	r0, #55	; 0x37
    1b10:	4b03      	ldr	r3, [pc, #12]	; (1b20 <gpio5_disable+0x14>)
    1b12:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    1b14:	2280      	movs	r2, #128	; 0x80
    1b16:	0412      	lsls	r2, r2, #16
    1b18:	4b02      	ldr	r3, [pc, #8]	; (1b24 <gpio5_disable+0x18>)
    1b1a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PB23, false);
}
    1b1c:	bd10      	pop	{r4, pc}
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	00001759 	.word	0x00001759
    1b24:	41004480 	.word	0x41004480

00001b28 <run_pump>:

	tcc_init(&tcc_instance_pwm, CONF_PWM_MODULE, &config_tcc);
	tcc_enable(&tcc_instance_pwm);
}

void run_pump(int duration) {
    1b28:	b510      	push	{r4, lr}
    1b2a:	0004      	movs	r4, r0
	
	//boost_enable();
	gpio5_enable();
    1b2c:	4b06      	ldr	r3, [pc, #24]	; (1b48 <run_pump+0x20>)
    1b2e:	4798      	blx	r3
// 		{
// 			ramp_tcc_pwm(0xFFFF*i);
// 			delay_ms(2000);
// 		}
		
	delay_ms(duration); //duration of pump
    1b30:	2c00      	cmp	r4, #0
    1b32:	d105      	bne.n	1b40 <run_pump+0x18>
    1b34:	2001      	movs	r0, #1
    1b36:	4b05      	ldr	r3, [pc, #20]	; (1b4c <run_pump+0x24>)
    1b38:	4798      	blx	r3
	
	//tcc_disable(&tcc_instance_pwm);
	gpio5_disable();
    1b3a:	4b05      	ldr	r3, [pc, #20]	; (1b50 <run_pump+0x28>)
    1b3c:	4798      	blx	r3
	//boost_disable();
	
    1b3e:	bd10      	pop	{r4, pc}
	delay_ms(duration); //duration of pump
    1b40:	0020      	movs	r0, r4
    1b42:	4b04      	ldr	r3, [pc, #16]	; (1b54 <run_pump+0x2c>)
    1b44:	4798      	blx	r3
    1b46:	e7f8      	b.n	1b3a <run_pump+0x12>
    1b48:	00001af1 	.word	0x00001af1
    1b4c:	00002c21 	.word	0x00002c21
    1b50:	00001b0d 	.word	0x00001b0d
    1b54:	00002c4d 	.word	0x00002c4d

00001b58 <input_handle>:
{
    1b58:	b570      	push	{r4, r5, r6, lr}
    1b5a:	0005      	movs	r5, r0
    1b5c:	000e      	movs	r6, r1
	if (!(strcmp("help", argv[0]))) {
    1b5e:	680c      	ldr	r4, [r1, #0]
    1b60:	0021      	movs	r1, r4
    1b62:	48bc      	ldr	r0, [pc, #752]	; (1e54 <input_handle+0x2fc>)
    1b64:	4bbc      	ldr	r3, [pc, #752]	; (1e58 <input_handle+0x300>)
    1b66:	4798      	blx	r3
    1b68:	2800      	cmp	r0, #0
    1b6a:	d10a      	bne.n	1b82 <input_handle+0x2a>
		if (argc != required_args) {
    1b6c:	2d01      	cmp	r5, #1
    1b6e:	d005      	beq.n	1b7c <input_handle+0x24>
			print_args_error("help", required_args, argc);
    1b70:	002a      	movs	r2, r5
    1b72:	2101      	movs	r1, #1
    1b74:	48b7      	ldr	r0, [pc, #732]	; (1e54 <input_handle+0x2fc>)
    1b76:	4bb9      	ldr	r3, [pc, #740]	; (1e5c <input_handle+0x304>)
    1b78:	4798      	blx	r3
}
    1b7a:	bd70      	pop	{r4, r5, r6, pc}
		help();
    1b7c:	4bb8      	ldr	r3, [pc, #736]	; (1e60 <input_handle+0x308>)
    1b7e:	4798      	blx	r3
    1b80:	e7fb      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("ver_bl", argv[0]))) {
    1b82:	0021      	movs	r1, r4
    1b84:	48b7      	ldr	r0, [pc, #732]	; (1e64 <input_handle+0x30c>)
    1b86:	4bb4      	ldr	r3, [pc, #720]	; (1e58 <input_handle+0x300>)
    1b88:	4798      	blx	r3
    1b8a:	2800      	cmp	r0, #0
    1b8c:	d10a      	bne.n	1ba4 <input_handle+0x4c>
		if (argc != required_args) {
    1b8e:	2d01      	cmp	r5, #1
    1b90:	d005      	beq.n	1b9e <input_handle+0x46>
			print_args_error("ver_bl", required_args, argc);
    1b92:	002a      	movs	r2, r5
    1b94:	2101      	movs	r1, #1
    1b96:	48b3      	ldr	r0, [pc, #716]	; (1e64 <input_handle+0x30c>)
    1b98:	4bb0      	ldr	r3, [pc, #704]	; (1e5c <input_handle+0x304>)
    1b9a:	4798      	blx	r3
			return;
    1b9c:	e7ed      	b.n	1b7a <input_handle+0x22>
		ver_bl();
    1b9e:	4bb2      	ldr	r3, [pc, #712]	; (1e68 <input_handle+0x310>)
    1ba0:	4798      	blx	r3
    1ba2:	e7ea      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("ver_app", argv[0]))) {
    1ba4:	0021      	movs	r1, r4
    1ba6:	48b1      	ldr	r0, [pc, #708]	; (1e6c <input_handle+0x314>)
    1ba8:	4bab      	ldr	r3, [pc, #684]	; (1e58 <input_handle+0x300>)
    1baa:	4798      	blx	r3
    1bac:	2800      	cmp	r0, #0
    1bae:	d10a      	bne.n	1bc6 <input_handle+0x6e>
		if (argc != required_args) {
    1bb0:	2d01      	cmp	r5, #1
    1bb2:	d005      	beq.n	1bc0 <input_handle+0x68>
			print_args_error("ver_app", required_args, argc);
    1bb4:	002a      	movs	r2, r5
    1bb6:	2101      	movs	r1, #1
    1bb8:	48ac      	ldr	r0, [pc, #688]	; (1e6c <input_handle+0x314>)
    1bba:	4ba8      	ldr	r3, [pc, #672]	; (1e5c <input_handle+0x304>)
    1bbc:	4798      	blx	r3
			return;
    1bbe:	e7dc      	b.n	1b7a <input_handle+0x22>
		ver_app();
    1bc0:	4bab      	ldr	r3, [pc, #684]	; (1e70 <input_handle+0x318>)
    1bc2:	4798      	blx	r3
    1bc4:	e7d9      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("gpio_set", argv[0]))) {
    1bc6:	0021      	movs	r1, r4
    1bc8:	48aa      	ldr	r0, [pc, #680]	; (1e74 <input_handle+0x31c>)
    1bca:	4ba3      	ldr	r3, [pc, #652]	; (1e58 <input_handle+0x300>)
    1bcc:	4798      	blx	r3
    1bce:	2800      	cmp	r0, #0
    1bd0:	d11e      	bne.n	1c10 <input_handle+0xb8>
		if (argc != required_args) {
    1bd2:	2d03      	cmp	r5, #3
    1bd4:	d005      	beq.n	1be2 <input_handle+0x8a>
			print_args_error("gpio_set", required_args, argc);
    1bd6:	002a      	movs	r2, r5
    1bd8:	2103      	movs	r1, #3
    1bda:	48a6      	ldr	r0, [pc, #664]	; (1e74 <input_handle+0x31c>)
    1bdc:	4b9f      	ldr	r3, [pc, #636]	; (1e5c <input_handle+0x304>)
    1bde:	4798      	blx	r3
			return;
    1be0:	e7cb      	b.n	1b7a <input_handle+0x22>
		char port = argv[1][0];
    1be2:	6873      	ldr	r3, [r6, #4]
    1be4:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    1be6:	68b0      	ldr	r0, [r6, #8]
    1be8:	4ba3      	ldr	r3, [pc, #652]	; (1e78 <input_handle+0x320>)
    1bea:	4798      	blx	r3
    1bec:	0004      	movs	r4, r0
		if (isdigit(argv[2][0]))
    1bee:	4ba3      	ldr	r3, [pc, #652]	; (1e7c <input_handle+0x324>)
    1bf0:	4798      	blx	r3
    1bf2:	68b3      	ldr	r3, [r6, #8]
    1bf4:	781b      	ldrb	r3, [r3, #0]
    1bf6:	18c0      	adds	r0, r0, r3
    1bf8:	7843      	ldrb	r3, [r0, #1]
    1bfa:	075b      	lsls	r3, r3, #29
    1bfc:	d504      	bpl.n	1c08 <input_handle+0xb0>
			gpio_set(port, pin);
    1bfe:	0021      	movs	r1, r4
    1c00:	0028      	movs	r0, r5
    1c02:	4b9f      	ldr	r3, [pc, #636]	; (1e80 <input_handle+0x328>)
    1c04:	4798      	blx	r3
    1c06:	e7b8      	b.n	1b7a <input_handle+0x22>
			print_general_error("gpio_set");
    1c08:	489a      	ldr	r0, [pc, #616]	; (1e74 <input_handle+0x31c>)
    1c0a:	4b9e      	ldr	r3, [pc, #632]	; (1e84 <input_handle+0x32c>)
    1c0c:	4798      	blx	r3
    1c0e:	e7b4      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("gpio_clear", argv[0]))) {
    1c10:	0021      	movs	r1, r4
    1c12:	489d      	ldr	r0, [pc, #628]	; (1e88 <input_handle+0x330>)
    1c14:	4b90      	ldr	r3, [pc, #576]	; (1e58 <input_handle+0x300>)
    1c16:	4798      	blx	r3
    1c18:	2800      	cmp	r0, #0
    1c1a:	d11e      	bne.n	1c5a <input_handle+0x102>
		if (argc != required_args) {
    1c1c:	2d03      	cmp	r5, #3
    1c1e:	d005      	beq.n	1c2c <input_handle+0xd4>
			print_args_error("gpio_clear", required_args, argc);
    1c20:	002a      	movs	r2, r5
    1c22:	2103      	movs	r1, #3
    1c24:	4898      	ldr	r0, [pc, #608]	; (1e88 <input_handle+0x330>)
    1c26:	4b8d      	ldr	r3, [pc, #564]	; (1e5c <input_handle+0x304>)
    1c28:	4798      	blx	r3
			return;
    1c2a:	e7a6      	b.n	1b7a <input_handle+0x22>
		char port = argv[1][0];
    1c2c:	6873      	ldr	r3, [r6, #4]
    1c2e:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    1c30:	68b0      	ldr	r0, [r6, #8]
    1c32:	4b91      	ldr	r3, [pc, #580]	; (1e78 <input_handle+0x320>)
    1c34:	4798      	blx	r3
    1c36:	0004      	movs	r4, r0
		if (isdigit(argv[2][0]))
    1c38:	4b90      	ldr	r3, [pc, #576]	; (1e7c <input_handle+0x324>)
    1c3a:	4798      	blx	r3
    1c3c:	68b3      	ldr	r3, [r6, #8]
    1c3e:	781b      	ldrb	r3, [r3, #0]
    1c40:	18c0      	adds	r0, r0, r3
    1c42:	7843      	ldrb	r3, [r0, #1]
    1c44:	075b      	lsls	r3, r3, #29
    1c46:	d504      	bpl.n	1c52 <input_handle+0xfa>
			gpio_clear(port, pin);
    1c48:	0021      	movs	r1, r4
    1c4a:	0028      	movs	r0, r5
    1c4c:	4b8f      	ldr	r3, [pc, #572]	; (1e8c <input_handle+0x334>)
    1c4e:	4798      	blx	r3
    1c50:	e793      	b.n	1b7a <input_handle+0x22>
			print_general_error("gpio_clear");
    1c52:	488d      	ldr	r0, [pc, #564]	; (1e88 <input_handle+0x330>)
    1c54:	4b8b      	ldr	r3, [pc, #556]	; (1e84 <input_handle+0x32c>)
    1c56:	4798      	blx	r3
    1c58:	e78f      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("gpio_get", argv[0]))) {
    1c5a:	0021      	movs	r1, r4
    1c5c:	488c      	ldr	r0, [pc, #560]	; (1e90 <input_handle+0x338>)
    1c5e:	4b7e      	ldr	r3, [pc, #504]	; (1e58 <input_handle+0x300>)
    1c60:	4798      	blx	r3
    1c62:	2800      	cmp	r0, #0
    1c64:	d11e      	bne.n	1ca4 <input_handle+0x14c>
		if (argc != required_args) {
    1c66:	2d03      	cmp	r5, #3
    1c68:	d005      	beq.n	1c76 <input_handle+0x11e>
			print_args_error("gpio_get", required_args, argc);
    1c6a:	002a      	movs	r2, r5
    1c6c:	2103      	movs	r1, #3
    1c6e:	4888      	ldr	r0, [pc, #544]	; (1e90 <input_handle+0x338>)
    1c70:	4b7a      	ldr	r3, [pc, #488]	; (1e5c <input_handle+0x304>)
    1c72:	4798      	blx	r3
			return;
    1c74:	e781      	b.n	1b7a <input_handle+0x22>
		char port = argv[1][0];
    1c76:	6873      	ldr	r3, [r6, #4]
    1c78:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    1c7a:	68b0      	ldr	r0, [r6, #8]
    1c7c:	4b7e      	ldr	r3, [pc, #504]	; (1e78 <input_handle+0x320>)
    1c7e:	4798      	blx	r3
    1c80:	0004      	movs	r4, r0
		if (isdigit(argv[2][0]))
    1c82:	4b7e      	ldr	r3, [pc, #504]	; (1e7c <input_handle+0x324>)
    1c84:	4798      	blx	r3
    1c86:	68b3      	ldr	r3, [r6, #8]
    1c88:	781b      	ldrb	r3, [r3, #0]
    1c8a:	18c0      	adds	r0, r0, r3
    1c8c:	7843      	ldrb	r3, [r0, #1]
    1c8e:	075b      	lsls	r3, r3, #29
    1c90:	d504      	bpl.n	1c9c <input_handle+0x144>
			gpio_get(port, pin);
    1c92:	0021      	movs	r1, r4
    1c94:	0028      	movs	r0, r5
    1c96:	4b7f      	ldr	r3, [pc, #508]	; (1e94 <input_handle+0x33c>)
    1c98:	4798      	blx	r3
    1c9a:	e76e      	b.n	1b7a <input_handle+0x22>
			print_general_error("gpio_get");
    1c9c:	487c      	ldr	r0, [pc, #496]	; (1e90 <input_handle+0x338>)
    1c9e:	4b79      	ldr	r3, [pc, #484]	; (1e84 <input_handle+0x32c>)
    1ca0:	4798      	blx	r3
    1ca2:	e76a      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("mac", argv[0]))) {
    1ca4:	0021      	movs	r1, r4
    1ca6:	487c      	ldr	r0, [pc, #496]	; (1e98 <input_handle+0x340>)
    1ca8:	4b6b      	ldr	r3, [pc, #428]	; (1e58 <input_handle+0x300>)
    1caa:	4798      	blx	r3
    1cac:	2800      	cmp	r0, #0
    1cae:	d10a      	bne.n	1cc6 <input_handle+0x16e>
		if (argc != required_args) {
    1cb0:	2d01      	cmp	r5, #1
    1cb2:	d005      	beq.n	1cc0 <input_handle+0x168>
			print_args_error("mac", required_args, argc);
    1cb4:	002a      	movs	r2, r5
    1cb6:	2101      	movs	r1, #1
    1cb8:	4877      	ldr	r0, [pc, #476]	; (1e98 <input_handle+0x340>)
    1cba:	4b68      	ldr	r3, [pc, #416]	; (1e5c <input_handle+0x304>)
    1cbc:	4798      	blx	r3
			return;
    1cbe:	e75c      	b.n	1b7a <input_handle+0x22>
		mac();
    1cc0:	4b76      	ldr	r3, [pc, #472]	; (1e9c <input_handle+0x344>)
    1cc2:	4798      	blx	r3
    1cc4:	e759      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("ip", argv[0]))) {
    1cc6:	0021      	movs	r1, r4
    1cc8:	4875      	ldr	r0, [pc, #468]	; (1ea0 <input_handle+0x348>)
    1cca:	4b63      	ldr	r3, [pc, #396]	; (1e58 <input_handle+0x300>)
    1ccc:	4798      	blx	r3
    1cce:	2800      	cmp	r0, #0
    1cd0:	d10a      	bne.n	1ce8 <input_handle+0x190>
		if (argc != required_args) {
    1cd2:	2d01      	cmp	r5, #1
    1cd4:	d005      	beq.n	1ce2 <input_handle+0x18a>
			print_args_error("ip", required_args, argc);
    1cd6:	002a      	movs	r2, r5
    1cd8:	2101      	movs	r1, #1
    1cda:	4871      	ldr	r0, [pc, #452]	; (1ea0 <input_handle+0x348>)
    1cdc:	4b5f      	ldr	r3, [pc, #380]	; (1e5c <input_handle+0x304>)
    1cde:	4798      	blx	r3
			return;
    1ce0:	e74b      	b.n	1b7a <input_handle+0x22>
		ip();
    1ce2:	4b70      	ldr	r3, [pc, #448]	; (1ea4 <input_handle+0x34c>)
    1ce4:	4798      	blx	r3
    1ce6:	e748      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("read", argv[0]))) {
    1ce8:	0021      	movs	r1, r4
    1cea:	486f      	ldr	r0, [pc, #444]	; (1ea8 <input_handle+0x350>)
    1cec:	4b5a      	ldr	r3, [pc, #360]	; (1e58 <input_handle+0x300>)
    1cee:	4798      	blx	r3
    1cf0:	2800      	cmp	r0, #0
    1cf2:	d128      	bne.n	1d46 <input_handle+0x1ee>
		if (argc != required_args) {
    1cf4:	2d04      	cmp	r5, #4
    1cf6:	d005      	beq.n	1d04 <input_handle+0x1ac>
			print_args_error("read", required_args, argc);
    1cf8:	002a      	movs	r2, r5
    1cfa:	2104      	movs	r1, #4
    1cfc:	486a      	ldr	r0, [pc, #424]	; (1ea8 <input_handle+0x350>)
    1cfe:	4b57      	ldr	r3, [pc, #348]	; (1e5c <input_handle+0x304>)
    1d00:	4798      	blx	r3
			return;
    1d02:	e73a      	b.n	1b7a <input_handle+0x22>
		int reading = atoi(argv[2]);
    1d04:	68b0      	ldr	r0, [r6, #8]
    1d06:	4d5c      	ldr	r5, [pc, #368]	; (1e78 <input_handle+0x320>)
    1d08:	47a8      	blx	r5
    1d0a:	0004      	movs	r4, r0
		int interval_ms = atoi(argv[3]);
    1d0c:	68f0      	ldr	r0, [r6, #12]
    1d0e:	47a8      	blx	r5
    1d10:	0005      	movs	r5, r0
		if (isdigit(argv[2][0]) && isdigit(argv[3][0]))
    1d12:	4b5a      	ldr	r3, [pc, #360]	; (1e7c <input_handle+0x324>)
    1d14:	4798      	blx	r3
    1d16:	68b3      	ldr	r3, [r6, #8]
    1d18:	781b      	ldrb	r3, [r3, #0]
    1d1a:	18c0      	adds	r0, r0, r3
    1d1c:	7843      	ldrb	r3, [r0, #1]
    1d1e:	075b      	lsls	r3, r3, #29
    1d20:	d507      	bpl.n	1d32 <input_handle+0x1da>
    1d22:	4b56      	ldr	r3, [pc, #344]	; (1e7c <input_handle+0x324>)
    1d24:	4798      	blx	r3
    1d26:	68f3      	ldr	r3, [r6, #12]
    1d28:	781b      	ldrb	r3, [r3, #0]
    1d2a:	18c0      	adds	r0, r0, r3
    1d2c:	7843      	ldrb	r3, [r0, #1]
    1d2e:	075b      	lsls	r3, r3, #29
    1d30:	d403      	bmi.n	1d3a <input_handle+0x1e2>
			print_general_error("read");
    1d32:	485d      	ldr	r0, [pc, #372]	; (1ea8 <input_handle+0x350>)
    1d34:	4b53      	ldr	r3, [pc, #332]	; (1e84 <input_handle+0x32c>)
    1d36:	4798      	blx	r3
    1d38:	e71f      	b.n	1b7a <input_handle+0x22>
			read_sensor(argv[1], reading, interval_ms);
    1d3a:	002a      	movs	r2, r5
    1d3c:	0021      	movs	r1, r4
    1d3e:	6870      	ldr	r0, [r6, #4]
    1d40:	4b5a      	ldr	r3, [pc, #360]	; (1eac <input_handle+0x354>)
    1d42:	4798      	blx	r3
    1d44:	e719      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("adc_get", argv[0]))) {
    1d46:	0021      	movs	r1, r4
    1d48:	4859      	ldr	r0, [pc, #356]	; (1eb0 <input_handle+0x358>)
    1d4a:	4b43      	ldr	r3, [pc, #268]	; (1e58 <input_handle+0x300>)
    1d4c:	4798      	blx	r3
    1d4e:	2800      	cmp	r0, #0
    1d50:	d11e      	bne.n	1d90 <input_handle+0x238>
		if (argc != required_args) {
    1d52:	2d03      	cmp	r5, #3
    1d54:	d005      	beq.n	1d62 <input_handle+0x20a>
			print_args_error("adc_get", required_args, argc);
    1d56:	002a      	movs	r2, r5
    1d58:	2103      	movs	r1, #3
    1d5a:	4855      	ldr	r0, [pc, #340]	; (1eb0 <input_handle+0x358>)
    1d5c:	4b3f      	ldr	r3, [pc, #252]	; (1e5c <input_handle+0x304>)
    1d5e:	4798      	blx	r3
			return;
    1d60:	e70b      	b.n	1b7a <input_handle+0x22>
		char port = argv[1][0];
    1d62:	6873      	ldr	r3, [r6, #4]
    1d64:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    1d66:	68b0      	ldr	r0, [r6, #8]
    1d68:	4b43      	ldr	r3, [pc, #268]	; (1e78 <input_handle+0x320>)
    1d6a:	4798      	blx	r3
    1d6c:	0004      	movs	r4, r0
		if (isdigit(argv[2][0])) {
    1d6e:	4b43      	ldr	r3, [pc, #268]	; (1e7c <input_handle+0x324>)
    1d70:	4798      	blx	r3
    1d72:	68b3      	ldr	r3, [r6, #8]
    1d74:	781b      	ldrb	r3, [r3, #0]
    1d76:	18c0      	adds	r0, r0, r3
    1d78:	7843      	ldrb	r3, [r0, #1]
    1d7a:	075b      	lsls	r3, r3, #29
    1d7c:	d504      	bpl.n	1d88 <input_handle+0x230>
			adc_get(port, pin);
    1d7e:	0021      	movs	r1, r4
    1d80:	0028      	movs	r0, r5
    1d82:	4b4c      	ldr	r3, [pc, #304]	; (1eb4 <input_handle+0x35c>)
    1d84:	4798      	blx	r3
    1d86:	e6f8      	b.n	1b7a <input_handle+0x22>
			print_general_error("adc_get");
    1d88:	4849      	ldr	r0, [pc, #292]	; (1eb0 <input_handle+0x358>)
    1d8a:	4b3e      	ldr	r3, [pc, #248]	; (1e84 <input_handle+0x32c>)
    1d8c:	4798      	blx	r3
    1d8e:	e6f4      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("mcu_temp", argv[0]))) {
    1d90:	0021      	movs	r1, r4
    1d92:	4849      	ldr	r0, [pc, #292]	; (1eb8 <input_handle+0x360>)
    1d94:	4b30      	ldr	r3, [pc, #192]	; (1e58 <input_handle+0x300>)
    1d96:	4798      	blx	r3
    1d98:	2800      	cmp	r0, #0
    1d9a:	d10a      	bne.n	1db2 <input_handle+0x25a>
		if (argc != required_args) {
    1d9c:	2d01      	cmp	r5, #1
    1d9e:	d005      	beq.n	1dac <input_handle+0x254>
			print_args_error("mcu_temp", required_args, argc);
    1da0:	002a      	movs	r2, r5
    1da2:	2101      	movs	r1, #1
    1da4:	4844      	ldr	r0, [pc, #272]	; (1eb8 <input_handle+0x360>)
    1da6:	4b2d      	ldr	r3, [pc, #180]	; (1e5c <input_handle+0x304>)
    1da8:	4798      	blx	r3
			return;
    1daa:	e6e6      	b.n	1b7a <input_handle+0x22>
		mcu_temp();
    1dac:	4b43      	ldr	r3, [pc, #268]	; (1ebc <input_handle+0x364>)
    1dae:	4798      	blx	r3
    1db0:	e6e3      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("i2c_scan", argv[0]))) {
    1db2:	0021      	movs	r1, r4
    1db4:	4842      	ldr	r0, [pc, #264]	; (1ec0 <input_handle+0x368>)
    1db6:	4b28      	ldr	r3, [pc, #160]	; (1e58 <input_handle+0x300>)
    1db8:	4798      	blx	r3
    1dba:	2800      	cmp	r0, #0
    1dbc:	d10d      	bne.n	1dda <input_handle+0x282>
		if (argc != required_args) {
    1dbe:	2d01      	cmp	r5, #1
    1dc0:	d005      	beq.n	1dce <input_handle+0x276>
			print_args_error("i2c_scan", required_args, argc);
    1dc2:	002a      	movs	r2, r5
    1dc4:	2101      	movs	r1, #1
    1dc6:	483e      	ldr	r0, [pc, #248]	; (1ec0 <input_handle+0x368>)
    1dc8:	4b24      	ldr	r3, [pc, #144]	; (1e5c <input_handle+0x304>)
    1dca:	4798      	blx	r3
			return;
    1dcc:	e6d5      	b.n	1b7a <input_handle+0x22>
		printf("running i2c_scan\r\n");
    1dce:	483d      	ldr	r0, [pc, #244]	; (1ec4 <input_handle+0x36c>)
    1dd0:	4b3d      	ldr	r3, [pc, #244]	; (1ec8 <input_handle+0x370>)
    1dd2:	4798      	blx	r3
		i2c_scan();
    1dd4:	4b3d      	ldr	r3, [pc, #244]	; (1ecc <input_handle+0x374>)
    1dd6:	4798      	blx	r3
    1dd8:	e6cf      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("relay1_on", argv[0]))) {
    1dda:	0021      	movs	r1, r4
    1ddc:	483c      	ldr	r0, [pc, #240]	; (1ed0 <input_handle+0x378>)
    1dde:	4b1e      	ldr	r3, [pc, #120]	; (1e58 <input_handle+0x300>)
    1de0:	4798      	blx	r3
    1de2:	2800      	cmp	r0, #0
    1de4:	d10d      	bne.n	1e02 <input_handle+0x2aa>
		if (argc != required_args) {
    1de6:	2d01      	cmp	r5, #1
    1de8:	d005      	beq.n	1df6 <input_handle+0x29e>
			print_args_error("relay1_on", required_args, argc);
    1dea:	002a      	movs	r2, r5
    1dec:	2101      	movs	r1, #1
    1dee:	4838      	ldr	r0, [pc, #224]	; (1ed0 <input_handle+0x378>)
    1df0:	4b1a      	ldr	r3, [pc, #104]	; (1e5c <input_handle+0x304>)
    1df2:	4798      	blx	r3
			return;
    1df4:	e6c1      	b.n	1b7a <input_handle+0x22>
	printf("Relay 1 turning on.\r\n");
    1df6:	4837      	ldr	r0, [pc, #220]	; (1ed4 <input_handle+0x37c>)
    1df8:	4b33      	ldr	r3, [pc, #204]	; (1ec8 <input_handle+0x370>)
    1dfa:	4798      	blx	r3
	relay1_enable();
    1dfc:	4b36      	ldr	r3, [pc, #216]	; (1ed8 <input_handle+0x380>)
    1dfe:	4798      	blx	r3
    1e00:	e6bb      	b.n	1b7a <input_handle+0x22>
	}  else if (!(strcmp("relay1_off", argv[0]))) {
    1e02:	0021      	movs	r1, r4
    1e04:	4835      	ldr	r0, [pc, #212]	; (1edc <input_handle+0x384>)
    1e06:	4b14      	ldr	r3, [pc, #80]	; (1e58 <input_handle+0x300>)
    1e08:	4798      	blx	r3
    1e0a:	2800      	cmp	r0, #0
    1e0c:	d10d      	bne.n	1e2a <input_handle+0x2d2>
		if (argc != required_args) {
    1e0e:	2d01      	cmp	r5, #1
    1e10:	d005      	beq.n	1e1e <input_handle+0x2c6>
			print_args_error("relay1_off", required_args, argc);
    1e12:	002a      	movs	r2, r5
    1e14:	2101      	movs	r1, #1
    1e16:	4831      	ldr	r0, [pc, #196]	; (1edc <input_handle+0x384>)
    1e18:	4b10      	ldr	r3, [pc, #64]	; (1e5c <input_handle+0x304>)
    1e1a:	4798      	blx	r3
			return;
    1e1c:	e6ad      	b.n	1b7a <input_handle+0x22>
	printf("Relay 1 turning off.\r\n");
    1e1e:	4830      	ldr	r0, [pc, #192]	; (1ee0 <input_handle+0x388>)
    1e20:	4b29      	ldr	r3, [pc, #164]	; (1ec8 <input_handle+0x370>)
    1e22:	4798      	blx	r3
	relay1_disable();
    1e24:	4b2f      	ldr	r3, [pc, #188]	; (1ee4 <input_handle+0x38c>)
    1e26:	4798      	blx	r3
    1e28:	e6a7      	b.n	1b7a <input_handle+0x22>
	}  else if (!(strcmp("relay2_on", argv[0]))) {
    1e2a:	0021      	movs	r1, r4
    1e2c:	482e      	ldr	r0, [pc, #184]	; (1ee8 <input_handle+0x390>)
    1e2e:	4b0a      	ldr	r3, [pc, #40]	; (1e58 <input_handle+0x300>)
    1e30:	4798      	blx	r3
    1e32:	2800      	cmp	r0, #0
    1e34:	d15e      	bne.n	1ef4 <input_handle+0x39c>
	if (argc != required_args) {
    1e36:	2d01      	cmp	r5, #1
    1e38:	d005      	beq.n	1e46 <input_handle+0x2ee>
		print_args_error("relay2_on", required_args, argc);
    1e3a:	002a      	movs	r2, r5
    1e3c:	2101      	movs	r1, #1
    1e3e:	482a      	ldr	r0, [pc, #168]	; (1ee8 <input_handle+0x390>)
    1e40:	4b06      	ldr	r3, [pc, #24]	; (1e5c <input_handle+0x304>)
    1e42:	4798      	blx	r3
		return;
    1e44:	e699      	b.n	1b7a <input_handle+0x22>
	printf("Relay 2 turning on.\r\n");
    1e46:	4829      	ldr	r0, [pc, #164]	; (1eec <input_handle+0x394>)
    1e48:	4b1f      	ldr	r3, [pc, #124]	; (1ec8 <input_handle+0x370>)
    1e4a:	4798      	blx	r3
	relay2_enable();
    1e4c:	4b28      	ldr	r3, [pc, #160]	; (1ef0 <input_handle+0x398>)
    1e4e:	4798      	blx	r3
    1e50:	e693      	b.n	1b7a <input_handle+0x22>
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	00008fb0 	.word	0x00008fb0
    1e58:	000043d1 	.word	0x000043d1
    1e5c:	0000149d 	.word	0x0000149d
    1e60:	00001345 	.word	0x00001345
    1e64:	00008fb8 	.word	0x00008fb8
    1e68:	00001359 	.word	0x00001359
    1e6c:	00008fc0 	.word	0x00008fc0
    1e70:	00001371 	.word	0x00001371
    1e74:	00008fc8 	.word	0x00008fc8
    1e78:	00003635 	.word	0x00003635
    1e7c:	00003691 	.word	0x00003691
    1e80:	00001779 	.word	0x00001779
    1e84:	00001489 	.word	0x00001489
    1e88:	00008fd4 	.word	0x00008fd4
    1e8c:	000017c5 	.word	0x000017c5
    1e90:	00008fe0 	.word	0x00008fe0
    1e94:	000019a5 	.word	0x000019a5
    1e98:	00008fec 	.word	0x00008fec
    1e9c:	00001389 	.word	0x00001389
    1ea0:	00008ff0 	.word	0x00008ff0
    1ea4:	0000139d 	.word	0x0000139d
    1ea8:	00008ff4 	.word	0x00008ff4
    1eac:	000018d5 	.word	0x000018d5
    1eb0:	00008ffc 	.word	0x00008ffc
    1eb4:	00001515 	.word	0x00001515
    1eb8:	00009004 	.word	0x00009004
    1ebc:	00001659 	.word	0x00001659
    1ec0:	00009010 	.word	0x00009010
    1ec4:	0000901c 	.word	0x0000901c
    1ec8:	0000422d 	.word	0x0000422d
    1ecc:	000013b1 	.word	0x000013b1
    1ed0:	00009030 	.word	0x00009030
    1ed4:	0000903c 	.word	0x0000903c
    1ed8:	00001a91 	.word	0x00001a91
    1edc:	00009054 	.word	0x00009054
    1ee0:	00009060 	.word	0x00009060
    1ee4:	00001aa9 	.word	0x00001aa9
    1ee8:	00009078 	.word	0x00009078
    1eec:	00009084 	.word	0x00009084
    1ef0:	00001ac1 	.word	0x00001ac1
	}  else if (!(strcmp("relay2_off", argv[0]))) {
    1ef4:	0021      	movs	r1, r4
    1ef6:	4858      	ldr	r0, [pc, #352]	; (2058 <STACK_SIZE+0x58>)
    1ef8:	4b58      	ldr	r3, [pc, #352]	; (205c <STACK_SIZE+0x5c>)
    1efa:	4798      	blx	r3
    1efc:	2800      	cmp	r0, #0
    1efe:	d10d      	bne.n	1f1c <input_handle+0x3c4>
	if (argc != required_args) {
    1f00:	2d01      	cmp	r5, #1
    1f02:	d005      	beq.n	1f10 <input_handle+0x3b8>
		print_args_error("relay2_off", required_args, argc);
    1f04:	002a      	movs	r2, r5
    1f06:	2101      	movs	r1, #1
    1f08:	4853      	ldr	r0, [pc, #332]	; (2058 <STACK_SIZE+0x58>)
    1f0a:	4b55      	ldr	r3, [pc, #340]	; (2060 <STACK_SIZE+0x60>)
    1f0c:	4798      	blx	r3
		return;
    1f0e:	e634      	b.n	1b7a <input_handle+0x22>
	printf("Relay 2 turning off.\r\n");
    1f10:	4854      	ldr	r0, [pc, #336]	; (2064 <STACK_SIZE+0x64>)
    1f12:	4b55      	ldr	r3, [pc, #340]	; (2068 <STACK_SIZE+0x68>)
    1f14:	4798      	blx	r3
	relay2_disable();
    1f16:	4b55      	ldr	r3, [pc, #340]	; (206c <STACK_SIZE+0x6c>)
    1f18:	4798      	blx	r3
    1f1a:	e62e      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("boost_on", argv[0]))) {
    1f1c:	0021      	movs	r1, r4
    1f1e:	4854      	ldr	r0, [pc, #336]	; (2070 <STACK_SIZE+0x70>)
    1f20:	4b4e      	ldr	r3, [pc, #312]	; (205c <STACK_SIZE+0x5c>)
    1f22:	4798      	blx	r3
    1f24:	2800      	cmp	r0, #0
    1f26:	d10d      	bne.n	1f44 <input_handle+0x3ec>
	if (argc != required_args) {
    1f28:	2d01      	cmp	r5, #1
    1f2a:	d005      	beq.n	1f38 <input_handle+0x3e0>
		print_args_error("boost_on", required_args, argc);
    1f2c:	002a      	movs	r2, r5
    1f2e:	2101      	movs	r1, #1
    1f30:	484f      	ldr	r0, [pc, #316]	; (2070 <STACK_SIZE+0x70>)
    1f32:	4b4b      	ldr	r3, [pc, #300]	; (2060 <STACK_SIZE+0x60>)
    1f34:	4798      	blx	r3
		return;
    1f36:	e620      	b.n	1b7a <input_handle+0x22>
	printf("Boost converter enabled.\r\n");
    1f38:	484e      	ldr	r0, [pc, #312]	; (2074 <STACK_SIZE+0x74>)
    1f3a:	4b4b      	ldr	r3, [pc, #300]	; (2068 <STACK_SIZE+0x68>)
    1f3c:	4798      	blx	r3
	boost_enable();
    1f3e:	4b4e      	ldr	r3, [pc, #312]	; (2078 <STACK_SIZE+0x78>)
    1f40:	4798      	blx	r3
    1f42:	e61a      	b.n	1b7a <input_handle+0x22>
	}  else if (!(strcmp("boost_off", argv[0]))) {
    1f44:	0021      	movs	r1, r4
    1f46:	484d      	ldr	r0, [pc, #308]	; (207c <STACK_SIZE+0x7c>)
    1f48:	4b44      	ldr	r3, [pc, #272]	; (205c <STACK_SIZE+0x5c>)
    1f4a:	4798      	blx	r3
    1f4c:	2800      	cmp	r0, #0
    1f4e:	d10d      	bne.n	1f6c <input_handle+0x414>
	if (argc != required_args) {
    1f50:	2d01      	cmp	r5, #1
    1f52:	d005      	beq.n	1f60 <input_handle+0x408>
		print_args_error("boost_off", required_args, argc);
    1f54:	002a      	movs	r2, r5
    1f56:	2101      	movs	r1, #1
    1f58:	4848      	ldr	r0, [pc, #288]	; (207c <STACK_SIZE+0x7c>)
    1f5a:	4b41      	ldr	r3, [pc, #260]	; (2060 <STACK_SIZE+0x60>)
    1f5c:	4798      	blx	r3
		return;
    1f5e:	e60c      	b.n	1b7a <input_handle+0x22>
	printf("Boost converter disabled.\r\n");
    1f60:	4847      	ldr	r0, [pc, #284]	; (2080 <STACK_SIZE+0x80>)
    1f62:	4b41      	ldr	r3, [pc, #260]	; (2068 <STACK_SIZE+0x68>)
    1f64:	4798      	blx	r3
	boost_disable();
    1f66:	4b47      	ldr	r3, [pc, #284]	; (2084 <STACK_SIZE+0x84>)
    1f68:	4798      	blx	r3
    1f6a:	e606      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("led1_on", argv[0]))) {
    1f6c:	0021      	movs	r1, r4
    1f6e:	4846      	ldr	r0, [pc, #280]	; (2088 <STACK_SIZE+0x88>)
    1f70:	4b3a      	ldr	r3, [pc, #232]	; (205c <STACK_SIZE+0x5c>)
    1f72:	4798      	blx	r3
    1f74:	2800      	cmp	r0, #0
    1f76:	d10d      	bne.n	1f94 <input_handle+0x43c>
		if (argc != required_args) {
    1f78:	2d01      	cmp	r5, #1
    1f7a:	d005      	beq.n	1f88 <input_handle+0x430>
			print_args_error("led1_on", required_args, argc);
    1f7c:	002a      	movs	r2, r5
    1f7e:	2101      	movs	r1, #1
    1f80:	4841      	ldr	r0, [pc, #260]	; (2088 <STACK_SIZE+0x88>)
    1f82:	4b37      	ldr	r3, [pc, #220]	; (2060 <STACK_SIZE+0x60>)
    1f84:	4798      	blx	r3
			return;
    1f86:	e5f8      	b.n	1b7a <input_handle+0x22>
	printf("LED1 turning on.\r\n");
    1f88:	4840      	ldr	r0, [pc, #256]	; (208c <STACK_SIZE+0x8c>)
    1f8a:	4b37      	ldr	r3, [pc, #220]	; (2068 <STACK_SIZE+0x68>)
    1f8c:	4798      	blx	r3
	led1_on();
    1f8e:	4b40      	ldr	r3, [pc, #256]	; (2090 <STACK_SIZE+0x90>)
    1f90:	4798      	blx	r3
    1f92:	e5f2      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("led1_off", argv[0]))) {
    1f94:	0021      	movs	r1, r4
    1f96:	483f      	ldr	r0, [pc, #252]	; (2094 <STACK_SIZE+0x94>)
    1f98:	4b30      	ldr	r3, [pc, #192]	; (205c <STACK_SIZE+0x5c>)
    1f9a:	4798      	blx	r3
    1f9c:	2800      	cmp	r0, #0
    1f9e:	d10d      	bne.n	1fbc <input_handle+0x464>
		if (argc != required_args) {
    1fa0:	2d01      	cmp	r5, #1
    1fa2:	d005      	beq.n	1fb0 <input_handle+0x458>
		print_args_error("led1_off", required_args, argc);
    1fa4:	002a      	movs	r2, r5
    1fa6:	2101      	movs	r1, #1
    1fa8:	483a      	ldr	r0, [pc, #232]	; (2094 <STACK_SIZE+0x94>)
    1faa:	4b2d      	ldr	r3, [pc, #180]	; (2060 <STACK_SIZE+0x60>)
    1fac:	4798      	blx	r3
		return;
    1fae:	e5e4      	b.n	1b7a <input_handle+0x22>
	printf("LED1 turning off.\r\n");
    1fb0:	4839      	ldr	r0, [pc, #228]	; (2098 <STACK_SIZE+0x98>)
    1fb2:	4b2d      	ldr	r3, [pc, #180]	; (2068 <STACK_SIZE+0x68>)
    1fb4:	4798      	blx	r3
	led1_off();
    1fb6:	4b39      	ldr	r3, [pc, #228]	; (209c <STACK_SIZE+0x9c>)
    1fb8:	4798      	blx	r3
    1fba:	e5de      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("led2_on", argv[0]))) {
    1fbc:	0021      	movs	r1, r4
    1fbe:	4838      	ldr	r0, [pc, #224]	; (20a0 <STACK_SIZE+0xa0>)
    1fc0:	4b26      	ldr	r3, [pc, #152]	; (205c <STACK_SIZE+0x5c>)
    1fc2:	4798      	blx	r3
    1fc4:	2800      	cmp	r0, #0
    1fc6:	d10d      	bne.n	1fe4 <input_handle+0x48c>
		if (argc != required_args) {
    1fc8:	2d01      	cmp	r5, #1
    1fca:	d005      	beq.n	1fd8 <input_handle+0x480>
			print_args_error("led2_on", required_args, argc);
    1fcc:	002a      	movs	r2, r5
    1fce:	2101      	movs	r1, #1
    1fd0:	4833      	ldr	r0, [pc, #204]	; (20a0 <STACK_SIZE+0xa0>)
    1fd2:	4b23      	ldr	r3, [pc, #140]	; (2060 <STACK_SIZE+0x60>)
    1fd4:	4798      	blx	r3
			return;
    1fd6:	e5d0      	b.n	1b7a <input_handle+0x22>
	printf("LED2 turning on.\r\n");
    1fd8:	4832      	ldr	r0, [pc, #200]	; (20a4 <STACK_SIZE+0xa4>)
    1fda:	4b23      	ldr	r3, [pc, #140]	; (2068 <STACK_SIZE+0x68>)
    1fdc:	4798      	blx	r3
	led2_on();
    1fde:	4b32      	ldr	r3, [pc, #200]	; (20a8 <STACK_SIZE+0xa8>)
    1fe0:	4798      	blx	r3
    1fe2:	e5ca      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("led2_off", argv[0]))) {
    1fe4:	0021      	movs	r1, r4
    1fe6:	4831      	ldr	r0, [pc, #196]	; (20ac <STACK_SIZE+0xac>)
    1fe8:	4b1c      	ldr	r3, [pc, #112]	; (205c <STACK_SIZE+0x5c>)
    1fea:	4798      	blx	r3
    1fec:	2800      	cmp	r0, #0
    1fee:	d10d      	bne.n	200c <STACK_SIZE+0xc>
		if (argc != required_args) {
    1ff0:	2d01      	cmp	r5, #1
    1ff2:	d005      	beq.n	2000 <STACK_SIZE>
			print_args_error("led2_off", required_args, argc);
    1ff4:	002a      	movs	r2, r5
    1ff6:	2101      	movs	r1, #1
    1ff8:	482c      	ldr	r0, [pc, #176]	; (20ac <STACK_SIZE+0xac>)
    1ffa:	4b19      	ldr	r3, [pc, #100]	; (2060 <STACK_SIZE+0x60>)
    1ffc:	4798      	blx	r3
			return;
    1ffe:	e5bc      	b.n	1b7a <input_handle+0x22>
	printf("LED2 turning off.\r\n");
    2000:	482b      	ldr	r0, [pc, #172]	; (20b0 <STACK_SIZE+0xb0>)
    2002:	4b19      	ldr	r3, [pc, #100]	; (2068 <STACK_SIZE+0x68>)
    2004:	4798      	blx	r3
	led2_off();
    2006:	4b2b      	ldr	r3, [pc, #172]	; (20b4 <STACK_SIZE+0xb4>)
    2008:	4798      	blx	r3
    200a:	e5b6      	b.n	1b7a <input_handle+0x22>
	} else if (!(strcmp("run_pump", argv[0]))) {
    200c:	0021      	movs	r1, r4
    200e:	482a      	ldr	r0, [pc, #168]	; (20b8 <STACK_SIZE+0xb8>)
    2010:	4b12      	ldr	r3, [pc, #72]	; (205c <STACK_SIZE+0x5c>)
    2012:	4798      	blx	r3
    2014:	2800      	cmp	r0, #0
    2016:	d11b      	bne.n	2050 <STACK_SIZE+0x50>
	if (argc != required_args) {
    2018:	2d02      	cmp	r5, #2
    201a:	d005      	beq.n	2028 <STACK_SIZE+0x28>
		print_args_error("run_pump", required_args, argc);
    201c:	002a      	movs	r2, r5
    201e:	2102      	movs	r1, #2
    2020:	4825      	ldr	r0, [pc, #148]	; (20b8 <STACK_SIZE+0xb8>)
    2022:	4b0f      	ldr	r3, [pc, #60]	; (2060 <STACK_SIZE+0x60>)
    2024:	4798      	blx	r3
		return;
    2026:	e5a8      	b.n	1b7a <input_handle+0x22>
	int duration = atoi(argv[1]);
    2028:	6870      	ldr	r0, [r6, #4]
    202a:	4b24      	ldr	r3, [pc, #144]	; (20bc <STACK_SIZE+0xbc>)
    202c:	4798      	blx	r3
    202e:	0004      	movs	r4, r0
	if (isdigit(argv[1][0])) {
    2030:	4b23      	ldr	r3, [pc, #140]	; (20c0 <STACK_SIZE+0xc0>)
    2032:	4798      	blx	r3
    2034:	6873      	ldr	r3, [r6, #4]
    2036:	781b      	ldrb	r3, [r3, #0]
    2038:	18c0      	adds	r0, r0, r3
    203a:	7843      	ldrb	r3, [r0, #1]
    203c:	075b      	lsls	r3, r3, #29
    203e:	d503      	bpl.n	2048 <STACK_SIZE+0x48>
		run_pump(duration);
    2040:	0020      	movs	r0, r4
    2042:	4b20      	ldr	r3, [pc, #128]	; (20c4 <STACK_SIZE+0xc4>)
    2044:	4798      	blx	r3
    2046:	e598      	b.n	1b7a <input_handle+0x22>
	print_general_error("run_pump");
    2048:	481b      	ldr	r0, [pc, #108]	; (20b8 <STACK_SIZE+0xb8>)
    204a:	4b1f      	ldr	r3, [pc, #124]	; (20c8 <STACK_SIZE+0xc8>)
    204c:	4798      	blx	r3
    204e:	e594      	b.n	1b7a <input_handle+0x22>
		printf("Invalid input. See help for correct usage.\r\n");
    2050:	481e      	ldr	r0, [pc, #120]	; (20cc <STACK_SIZE+0xcc>)
    2052:	4b05      	ldr	r3, [pc, #20]	; (2068 <STACK_SIZE+0x68>)
    2054:	4798      	blx	r3
    2056:	e590      	b.n	1b7a <input_handle+0x22>
    2058:	0000909c 	.word	0x0000909c
    205c:	000043d1 	.word	0x000043d1
    2060:	0000149d 	.word	0x0000149d
    2064:	000090a8 	.word	0x000090a8
    2068:	0000422d 	.word	0x0000422d
    206c:	00001ad9 	.word	0x00001ad9
    2070:	000090c0 	.word	0x000090c0
    2074:	000090cc 	.word	0x000090cc
    2078:	00001a59 	.word	0x00001a59
    207c:	000090e8 	.word	0x000090e8
    2080:	000090f4 	.word	0x000090f4
    2084:	00001a75 	.word	0x00001a75
    2088:	00009110 	.word	0x00009110
    208c:	00009118 	.word	0x00009118
    2090:	000019f1 	.word	0x000019f1
    2094:	0000912c 	.word	0x0000912c
    2098:	00009138 	.word	0x00009138
    209c:	00001a0d 	.word	0x00001a0d
    20a0:	0000914c 	.word	0x0000914c
    20a4:	00009154 	.word	0x00009154
    20a8:	00001a29 	.word	0x00001a29
    20ac:	00009168 	.word	0x00009168
    20b0:	00009174 	.word	0x00009174
    20b4:	00001a41 	.word	0x00001a41
    20b8:	00009188 	.word	0x00009188
    20bc:	00003635 	.word	0x00003635
    20c0:	00003691 	.word	0x00003691
    20c4:	00001b29 	.word	0x00001b29
    20c8:	00001489 	.word	0x00001489
    20cc:	00009194 	.word	0x00009194

000020d0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    20d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20d2:	46de      	mov	lr, fp
    20d4:	4657      	mov	r7, sl
    20d6:	464e      	mov	r6, r9
    20d8:	4645      	mov	r5, r8
    20da:	b5e0      	push	{r5, r6, r7, lr}
    20dc:	b091      	sub	sp, #68	; 0x44
    20de:	0005      	movs	r5, r0
    20e0:	000c      	movs	r4, r1
    20e2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    20e4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    20e6:	0008      	movs	r0, r1
    20e8:	4bbc      	ldr	r3, [pc, #752]	; (23dc <usart_init+0x30c>)
    20ea:	4798      	blx	r3
    20ec:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    20ee:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    20f0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    20f2:	07db      	lsls	r3, r3, #31
    20f4:	d506      	bpl.n	2104 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    20f6:	b011      	add	sp, #68	; 0x44
    20f8:	bc3c      	pop	{r2, r3, r4, r5}
    20fa:	4690      	mov	r8, r2
    20fc:	4699      	mov	r9, r3
    20fe:	46a2      	mov	sl, r4
    2100:	46ab      	mov	fp, r5
    2102:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2104:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    2106:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2108:	079b      	lsls	r3, r3, #30
    210a:	d4f4      	bmi.n	20f6 <usart_init+0x26>
    210c:	49b4      	ldr	r1, [pc, #720]	; (23e0 <usart_init+0x310>)
    210e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2110:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2112:	2301      	movs	r3, #1
    2114:	40bb      	lsls	r3, r7
    2116:	4303      	orrs	r3, r0
    2118:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    211a:	a90f      	add	r1, sp, #60	; 0x3c
    211c:	272d      	movs	r7, #45	; 0x2d
    211e:	5df3      	ldrb	r3, [r6, r7]
    2120:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2122:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2124:	b2d3      	uxtb	r3, r2
    2126:	9302      	str	r3, [sp, #8]
    2128:	0018      	movs	r0, r3
    212a:	4bae      	ldr	r3, [pc, #696]	; (23e4 <usart_init+0x314>)
    212c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    212e:	9802      	ldr	r0, [sp, #8]
    2130:	4bad      	ldr	r3, [pc, #692]	; (23e8 <usart_init+0x318>)
    2132:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2134:	5df0      	ldrb	r0, [r6, r7]
    2136:	2100      	movs	r1, #0
    2138:	4bac      	ldr	r3, [pc, #688]	; (23ec <usart_init+0x31c>)
    213a:	4798      	blx	r3
	module->character_size = config->character_size;
    213c:	7af3      	ldrb	r3, [r6, #11]
    213e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2140:	2324      	movs	r3, #36	; 0x24
    2142:	5cf3      	ldrb	r3, [r6, r3]
    2144:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2146:	2325      	movs	r3, #37	; 0x25
    2148:	5cf3      	ldrb	r3, [r6, r3]
    214a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    214c:	7ef3      	ldrb	r3, [r6, #27]
    214e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2150:	7f33      	ldrb	r3, [r6, #28]
    2152:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2154:	682b      	ldr	r3, [r5, #0]
    2156:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2158:	0018      	movs	r0, r3
    215a:	4ba0      	ldr	r3, [pc, #640]	; (23dc <usart_init+0x30c>)
    215c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    215e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2160:	2200      	movs	r2, #0
    2162:	230e      	movs	r3, #14
    2164:	a906      	add	r1, sp, #24
    2166:	468c      	mov	ip, r1
    2168:	4463      	add	r3, ip
    216a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    216c:	8a32      	ldrh	r2, [r6, #16]
    216e:	9202      	str	r2, [sp, #8]
    2170:	2380      	movs	r3, #128	; 0x80
    2172:	01db      	lsls	r3, r3, #7
    2174:	429a      	cmp	r2, r3
    2176:	d100      	bne.n	217a <usart_init+0xaa>
    2178:	e09e      	b.n	22b8 <usart_init+0x1e8>
    217a:	d90f      	bls.n	219c <usart_init+0xcc>
    217c:	23c0      	movs	r3, #192	; 0xc0
    217e:	01db      	lsls	r3, r3, #7
    2180:	9a02      	ldr	r2, [sp, #8]
    2182:	429a      	cmp	r2, r3
    2184:	d100      	bne.n	2188 <usart_init+0xb8>
    2186:	e092      	b.n	22ae <usart_init+0x1de>
    2188:	2380      	movs	r3, #128	; 0x80
    218a:	021b      	lsls	r3, r3, #8
    218c:	429a      	cmp	r2, r3
    218e:	d000      	beq.n	2192 <usart_init+0xc2>
    2190:	e11f      	b.n	23d2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2192:	2303      	movs	r3, #3
    2194:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2196:	2300      	movs	r3, #0
    2198:	9307      	str	r3, [sp, #28]
    219a:	e008      	b.n	21ae <usart_init+0xde>
	switch (config->sample_rate) {
    219c:	2380      	movs	r3, #128	; 0x80
    219e:	019b      	lsls	r3, r3, #6
    21a0:	429a      	cmp	r2, r3
    21a2:	d000      	beq.n	21a6 <usart_init+0xd6>
    21a4:	e115      	b.n	23d2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    21a6:	2310      	movs	r3, #16
    21a8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    21aa:	3b0f      	subs	r3, #15
    21ac:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    21ae:	6833      	ldr	r3, [r6, #0]
    21b0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    21b2:	68f3      	ldr	r3, [r6, #12]
    21b4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    21b6:	6973      	ldr	r3, [r6, #20]
    21b8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    21ba:	7e33      	ldrb	r3, [r6, #24]
    21bc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    21be:	2326      	movs	r3, #38	; 0x26
    21c0:	5cf3      	ldrb	r3, [r6, r3]
    21c2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    21c4:	6873      	ldr	r3, [r6, #4]
    21c6:	4699      	mov	r9, r3
	switch (transfer_mode)
    21c8:	2b00      	cmp	r3, #0
    21ca:	d100      	bne.n	21ce <usart_init+0xfe>
    21cc:	e0a0      	b.n	2310 <usart_init+0x240>
    21ce:	2380      	movs	r3, #128	; 0x80
    21d0:	055b      	lsls	r3, r3, #21
    21d2:	4599      	cmp	r9, r3
    21d4:	d100      	bne.n	21d8 <usart_init+0x108>
    21d6:	e084      	b.n	22e2 <usart_init+0x212>
	if(config->encoding_format_enable) {
    21d8:	7e73      	ldrb	r3, [r6, #25]
    21da:	2b00      	cmp	r3, #0
    21dc:	d002      	beq.n	21e4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    21de:	7eb3      	ldrb	r3, [r6, #26]
    21e0:	4642      	mov	r2, r8
    21e2:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    21e4:	682a      	ldr	r2, [r5, #0]
    21e6:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    21e8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    21ea:	2b00      	cmp	r3, #0
    21ec:	d1fc      	bne.n	21e8 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    21ee:	330e      	adds	r3, #14
    21f0:	aa06      	add	r2, sp, #24
    21f2:	4694      	mov	ip, r2
    21f4:	4463      	add	r3, ip
    21f6:	881b      	ldrh	r3, [r3, #0]
    21f8:	4642      	mov	r2, r8
    21fa:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    21fc:	9b05      	ldr	r3, [sp, #20]
    21fe:	9a03      	ldr	r2, [sp, #12]
    2200:	4313      	orrs	r3, r2
    2202:	9a04      	ldr	r2, [sp, #16]
    2204:	4313      	orrs	r3, r2
    2206:	464a      	mov	r2, r9
    2208:	4313      	orrs	r3, r2
    220a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    220c:	465b      	mov	r3, fp
    220e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2210:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2212:	4653      	mov	r3, sl
    2214:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2216:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2218:	2327      	movs	r3, #39	; 0x27
    221a:	5cf3      	ldrb	r3, [r6, r3]
    221c:	2b00      	cmp	r3, #0
    221e:	d101      	bne.n	2224 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2220:	3304      	adds	r3, #4
    2222:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2224:	7e73      	ldrb	r3, [r6, #25]
    2226:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2228:	7f32      	ldrb	r2, [r6, #28]
    222a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    222c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    222e:	7f72      	ldrb	r2, [r6, #29]
    2230:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2232:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2234:	2224      	movs	r2, #36	; 0x24
    2236:	5cb2      	ldrb	r2, [r6, r2]
    2238:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    223a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    223c:	2225      	movs	r2, #37	; 0x25
    223e:	5cb2      	ldrb	r2, [r6, r2]
    2240:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2242:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2244:	7ab1      	ldrb	r1, [r6, #10]
    2246:	7af2      	ldrb	r2, [r6, #11]
    2248:	4311      	orrs	r1, r2
    224a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    224c:	8933      	ldrh	r3, [r6, #8]
    224e:	2bff      	cmp	r3, #255	; 0xff
    2250:	d100      	bne.n	2254 <usart_init+0x184>
    2252:	e081      	b.n	2358 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2254:	2280      	movs	r2, #128	; 0x80
    2256:	0452      	lsls	r2, r2, #17
    2258:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    225a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    225c:	232c      	movs	r3, #44	; 0x2c
    225e:	5cf3      	ldrb	r3, [r6, r3]
    2260:	2b00      	cmp	r3, #0
    2262:	d103      	bne.n	226c <usart_init+0x19c>
    2264:	4b62      	ldr	r3, [pc, #392]	; (23f0 <usart_init+0x320>)
    2266:	789b      	ldrb	r3, [r3, #2]
    2268:	079b      	lsls	r3, r3, #30
    226a:	d501      	bpl.n	2270 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    226c:	2380      	movs	r3, #128	; 0x80
    226e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2270:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2272:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2274:	2b00      	cmp	r3, #0
    2276:	d1fc      	bne.n	2272 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2278:	4643      	mov	r3, r8
    227a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    227c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    227e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2280:	2b00      	cmp	r3, #0
    2282:	d1fc      	bne.n	227e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    2284:	4643      	mov	r3, r8
    2286:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2288:	ab0e      	add	r3, sp, #56	; 0x38
    228a:	2280      	movs	r2, #128	; 0x80
    228c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    228e:	2200      	movs	r2, #0
    2290:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2292:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2294:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2296:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2298:	930a      	str	r3, [sp, #40]	; 0x28
    229a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    229c:	930b      	str	r3, [sp, #44]	; 0x2c
    229e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    22a0:	930c      	str	r3, [sp, #48]	; 0x30
    22a2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    22a4:	9302      	str	r3, [sp, #8]
    22a6:	930d      	str	r3, [sp, #52]	; 0x34
    22a8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    22aa:	ae0a      	add	r6, sp, #40	; 0x28
    22ac:	e063      	b.n	2376 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    22ae:	2308      	movs	r3, #8
    22b0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    22b2:	3b07      	subs	r3, #7
    22b4:	9307      	str	r3, [sp, #28]
    22b6:	e77a      	b.n	21ae <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    22b8:	6833      	ldr	r3, [r6, #0]
    22ba:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    22bc:	68f3      	ldr	r3, [r6, #12]
    22be:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    22c0:	6973      	ldr	r3, [r6, #20]
    22c2:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    22c4:	7e33      	ldrb	r3, [r6, #24]
    22c6:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    22c8:	2326      	movs	r3, #38	; 0x26
    22ca:	5cf3      	ldrb	r3, [r6, r3]
    22cc:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    22ce:	6873      	ldr	r3, [r6, #4]
    22d0:	4699      	mov	r9, r3
	switch (transfer_mode)
    22d2:	2b00      	cmp	r3, #0
    22d4:	d018      	beq.n	2308 <usart_init+0x238>
    22d6:	2380      	movs	r3, #128	; 0x80
    22d8:	055b      	lsls	r3, r3, #21
    22da:	4599      	cmp	r9, r3
    22dc:	d001      	beq.n	22e2 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    22de:	2000      	movs	r0, #0
    22e0:	e025      	b.n	232e <usart_init+0x25e>
			if (!config->use_external_clock) {
    22e2:	2327      	movs	r3, #39	; 0x27
    22e4:	5cf3      	ldrb	r3, [r6, r3]
    22e6:	2b00      	cmp	r3, #0
    22e8:	d000      	beq.n	22ec <usart_init+0x21c>
    22ea:	e775      	b.n	21d8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    22ec:	6a33      	ldr	r3, [r6, #32]
    22ee:	001f      	movs	r7, r3
    22f0:	b2c0      	uxtb	r0, r0
    22f2:	4b40      	ldr	r3, [pc, #256]	; (23f4 <usart_init+0x324>)
    22f4:	4798      	blx	r3
    22f6:	0001      	movs	r1, r0
    22f8:	220e      	movs	r2, #14
    22fa:	ab06      	add	r3, sp, #24
    22fc:	469c      	mov	ip, r3
    22fe:	4462      	add	r2, ip
    2300:	0038      	movs	r0, r7
    2302:	4b3d      	ldr	r3, [pc, #244]	; (23f8 <usart_init+0x328>)
    2304:	4798      	blx	r3
    2306:	e012      	b.n	232e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2308:	2308      	movs	r3, #8
    230a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    230c:	2300      	movs	r3, #0
    230e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2310:	2327      	movs	r3, #39	; 0x27
    2312:	5cf3      	ldrb	r3, [r6, r3]
    2314:	2b00      	cmp	r3, #0
    2316:	d00e      	beq.n	2336 <usart_init+0x266>
				status_code =
    2318:	9b06      	ldr	r3, [sp, #24]
    231a:	9300      	str	r3, [sp, #0]
    231c:	9b07      	ldr	r3, [sp, #28]
    231e:	220e      	movs	r2, #14
    2320:	a906      	add	r1, sp, #24
    2322:	468c      	mov	ip, r1
    2324:	4462      	add	r2, ip
    2326:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2328:	6a30      	ldr	r0, [r6, #32]
    232a:	4f34      	ldr	r7, [pc, #208]	; (23fc <usart_init+0x32c>)
    232c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    232e:	2800      	cmp	r0, #0
    2330:	d000      	beq.n	2334 <usart_init+0x264>
    2332:	e6e0      	b.n	20f6 <usart_init+0x26>
    2334:	e750      	b.n	21d8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2336:	6a33      	ldr	r3, [r6, #32]
    2338:	001f      	movs	r7, r3
    233a:	b2c0      	uxtb	r0, r0
    233c:	4b2d      	ldr	r3, [pc, #180]	; (23f4 <usart_init+0x324>)
    233e:	4798      	blx	r3
    2340:	0001      	movs	r1, r0
				status_code =
    2342:	9b06      	ldr	r3, [sp, #24]
    2344:	9300      	str	r3, [sp, #0]
    2346:	9b07      	ldr	r3, [sp, #28]
    2348:	220e      	movs	r2, #14
    234a:	a806      	add	r0, sp, #24
    234c:	4684      	mov	ip, r0
    234e:	4462      	add	r2, ip
    2350:	0038      	movs	r0, r7
    2352:	4f2a      	ldr	r7, [pc, #168]	; (23fc <usart_init+0x32c>)
    2354:	47b8      	blx	r7
    2356:	e7ea      	b.n	232e <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2358:	7ef3      	ldrb	r3, [r6, #27]
    235a:	2b00      	cmp	r3, #0
    235c:	d100      	bne.n	2360 <usart_init+0x290>
    235e:	e77d      	b.n	225c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2360:	2380      	movs	r3, #128	; 0x80
    2362:	04db      	lsls	r3, r3, #19
    2364:	431f      	orrs	r7, r3
    2366:	e779      	b.n	225c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2368:	0020      	movs	r0, r4
    236a:	4b25      	ldr	r3, [pc, #148]	; (2400 <usart_init+0x330>)
    236c:	4798      	blx	r3
    236e:	e007      	b.n	2380 <usart_init+0x2b0>
    2370:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2372:	2f04      	cmp	r7, #4
    2374:	d00d      	beq.n	2392 <usart_init+0x2c2>
    2376:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2378:	00bb      	lsls	r3, r7, #2
    237a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    237c:	2800      	cmp	r0, #0
    237e:	d0f3      	beq.n	2368 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2380:	1c43      	adds	r3, r0, #1
    2382:	d0f5      	beq.n	2370 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2384:	a90e      	add	r1, sp, #56	; 0x38
    2386:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2388:	0c00      	lsrs	r0, r0, #16
    238a:	b2c0      	uxtb	r0, r0
    238c:	4b1d      	ldr	r3, [pc, #116]	; (2404 <usart_init+0x334>)
    238e:	4798      	blx	r3
    2390:	e7ee      	b.n	2370 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2392:	2300      	movs	r3, #0
    2394:	60eb      	str	r3, [r5, #12]
    2396:	612b      	str	r3, [r5, #16]
    2398:	616b      	str	r3, [r5, #20]
    239a:	61ab      	str	r3, [r5, #24]
    239c:	61eb      	str	r3, [r5, #28]
    239e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    23a0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    23a2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    23a4:	2200      	movs	r2, #0
    23a6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    23a8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    23aa:	3330      	adds	r3, #48	; 0x30
    23ac:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    23ae:	3301      	adds	r3, #1
    23b0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    23b2:	3301      	adds	r3, #1
    23b4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    23b6:	3301      	adds	r3, #1
    23b8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    23ba:	6828      	ldr	r0, [r5, #0]
    23bc:	4b07      	ldr	r3, [pc, #28]	; (23dc <usart_init+0x30c>)
    23be:	4798      	blx	r3
    23c0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    23c2:	4911      	ldr	r1, [pc, #68]	; (2408 <usart_init+0x338>)
    23c4:	4b11      	ldr	r3, [pc, #68]	; (240c <usart_init+0x33c>)
    23c6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    23c8:	00a4      	lsls	r4, r4, #2
    23ca:	4b11      	ldr	r3, [pc, #68]	; (2410 <usart_init+0x340>)
    23cc:	50e5      	str	r5, [r4, r3]
	return status_code;
    23ce:	2000      	movs	r0, #0
    23d0:	e691      	b.n	20f6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    23d2:	2310      	movs	r3, #16
    23d4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    23d6:	2300      	movs	r3, #0
    23d8:	9307      	str	r3, [sp, #28]
    23da:	e6e8      	b.n	21ae <usart_init+0xde>
    23dc:	00002ad9 	.word	0x00002ad9
    23e0:	40000400 	.word	0x40000400
    23e4:	00003155 	.word	0x00003155
    23e8:	000030c9 	.word	0x000030c9
    23ec:	00002915 	.word	0x00002915
    23f0:	41002000 	.word	0x41002000
    23f4:	00003171 	.word	0x00003171
    23f8:	00002857 	.word	0x00002857
    23fc:	00002881 	.word	0x00002881
    2400:	00002961 	.word	0x00002961
    2404:	0000324d 	.word	0x0000324d
    2408:	00002609 	.word	0x00002609
    240c:	00002b15 	.word	0x00002b15
    2410:	200002bc 	.word	0x200002bc

00002414 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2414:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2416:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2418:	2a00      	cmp	r2, #0
    241a:	d101      	bne.n	2420 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    241c:	0018      	movs	r0, r3
    241e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2420:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2422:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2424:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2426:	2a00      	cmp	r2, #0
    2428:	d1f8      	bne.n	241c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    242a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    242c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    242e:	2a00      	cmp	r2, #0
    2430:	d1fc      	bne.n	242c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2432:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2434:	2102      	movs	r1, #2
    2436:	7e1a      	ldrb	r2, [r3, #24]
    2438:	420a      	tst	r2, r1
    243a:	d0fc      	beq.n	2436 <usart_write_wait+0x22>
	return STATUS_OK;
    243c:	2300      	movs	r3, #0
    243e:	e7ed      	b.n	241c <usart_write_wait+0x8>

00002440 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2440:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2442:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2444:	2a00      	cmp	r2, #0
    2446:	d101      	bne.n	244c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2448:	0018      	movs	r0, r3
    244a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    244c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    244e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2450:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2452:	2a00      	cmp	r2, #0
    2454:	d1f8      	bne.n	2448 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2456:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2458:	7e10      	ldrb	r0, [r2, #24]
    245a:	0740      	lsls	r0, r0, #29
    245c:	d5f4      	bpl.n	2448 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    245e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2460:	2b00      	cmp	r3, #0
    2462:	d1fc      	bne.n	245e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2464:	8b53      	ldrh	r3, [r2, #26]
    2466:	b2db      	uxtb	r3, r3
	if (error_code) {
    2468:	0698      	lsls	r0, r3, #26
    246a:	d01d      	beq.n	24a8 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    246c:	0798      	lsls	r0, r3, #30
    246e:	d503      	bpl.n	2478 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2470:	2302      	movs	r3, #2
    2472:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2474:	3318      	adds	r3, #24
    2476:	e7e7      	b.n	2448 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2478:	0758      	lsls	r0, r3, #29
    247a:	d503      	bpl.n	2484 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    247c:	2304      	movs	r3, #4
    247e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2480:	331a      	adds	r3, #26
    2482:	e7e1      	b.n	2448 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2484:	07d8      	lsls	r0, r3, #31
    2486:	d503      	bpl.n	2490 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2488:	2301      	movs	r3, #1
    248a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    248c:	3312      	adds	r3, #18
    248e:	e7db      	b.n	2448 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2490:	06d8      	lsls	r0, r3, #27
    2492:	d503      	bpl.n	249c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2494:	2310      	movs	r3, #16
    2496:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2498:	3332      	adds	r3, #50	; 0x32
    249a:	e7d5      	b.n	2448 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    249c:	069b      	lsls	r3, r3, #26
    249e:	d503      	bpl.n	24a8 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    24a0:	2320      	movs	r3, #32
    24a2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    24a4:	3321      	adds	r3, #33	; 0x21
    24a6:	e7cf      	b.n	2448 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    24a8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    24aa:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    24ac:	2300      	movs	r3, #0
    24ae:	e7cb      	b.n	2448 <usart_read_wait+0x8>

000024b0 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    24b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24b2:	46ce      	mov	lr, r9
    24b4:	4647      	mov	r7, r8
    24b6:	b580      	push	{r7, lr}
    24b8:	b083      	sub	sp, #12
    24ba:	0005      	movs	r5, r0
    24bc:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    24be:	2017      	movs	r0, #23
	if (length == 0) {
    24c0:	2a00      	cmp	r2, #0
    24c2:	d104      	bne.n	24ce <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    24c4:	b003      	add	sp, #12
    24c6:	bc0c      	pop	{r2, r3}
    24c8:	4690      	mov	r8, r2
    24ca:	4699      	mov	r9, r3
    24cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    24ce:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    24d0:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    24d2:	2b00      	cmp	r3, #0
    24d4:	d0f6      	beq.n	24c4 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    24d6:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    24d8:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    24da:	2b00      	cmp	r3, #0
    24dc:	d1fc      	bne.n	24d8 <usart_write_buffer_wait+0x28>
	while (length--) {
    24de:	3a01      	subs	r2, #1
    24e0:	b293      	uxth	r3, r2
    24e2:	4699      	mov	r9, r3
    24e4:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    24e6:	2701      	movs	r7, #1
	while (length--) {
    24e8:	4b1f      	ldr	r3, [pc, #124]	; (2568 <usart_write_buffer_wait+0xb8>)
    24ea:	4698      	mov	r8, r3
    24ec:	e011      	b.n	2512 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    24ee:	1c73      	adds	r3, r6, #1
    24f0:	b29b      	uxth	r3, r3
    24f2:	9a01      	ldr	r2, [sp, #4]
    24f4:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    24f6:	796a      	ldrb	r2, [r5, #5]
    24f8:	2a01      	cmp	r2, #1
    24fa:	d017      	beq.n	252c <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    24fc:	b289      	uxth	r1, r1
    24fe:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    2500:	0028      	movs	r0, r5
    2502:	4b1a      	ldr	r3, [pc, #104]	; (256c <usart_write_buffer_wait+0xbc>)
    2504:	4798      	blx	r3
	while (length--) {
    2506:	464b      	mov	r3, r9
    2508:	3b01      	subs	r3, #1
    250a:	b29b      	uxth	r3, r3
    250c:	4699      	mov	r9, r3
    250e:	4543      	cmp	r3, r8
    2510:	d013      	beq.n	253a <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    2512:	7e23      	ldrb	r3, [r4, #24]
    2514:	423b      	tst	r3, r7
    2516:	d1ea      	bne.n	24ee <usart_write_buffer_wait+0x3e>
    2518:	4b13      	ldr	r3, [pc, #76]	; (2568 <usart_write_buffer_wait+0xb8>)
    251a:	7e22      	ldrb	r2, [r4, #24]
    251c:	423a      	tst	r2, r7
    251e:	d1e6      	bne.n	24ee <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    2520:	2b01      	cmp	r3, #1
    2522:	d019      	beq.n	2558 <usart_write_buffer_wait+0xa8>
    2524:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2526:	2b00      	cmp	r3, #0
    2528:	d1f7      	bne.n	251a <usart_write_buffer_wait+0x6a>
    252a:	e7e0      	b.n	24ee <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    252c:	3602      	adds	r6, #2
    252e:	b2b6      	uxth	r6, r6
    2530:	9a01      	ldr	r2, [sp, #4]
    2532:	5cd3      	ldrb	r3, [r2, r3]
    2534:	021b      	lsls	r3, r3, #8
    2536:	4319      	orrs	r1, r3
    2538:	e7e2      	b.n	2500 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    253a:	7e23      	ldrb	r3, [r4, #24]
    253c:	079b      	lsls	r3, r3, #30
    253e:	d40d      	bmi.n	255c <usart_write_buffer_wait+0xac>
    2540:	4b09      	ldr	r3, [pc, #36]	; (2568 <usart_write_buffer_wait+0xb8>)
    2542:	2102      	movs	r1, #2
    2544:	7e22      	ldrb	r2, [r4, #24]
    2546:	420a      	tst	r2, r1
    2548:	d10a      	bne.n	2560 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    254a:	2b01      	cmp	r3, #1
    254c:	d00a      	beq.n	2564 <usart_write_buffer_wait+0xb4>
    254e:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2550:	2b00      	cmp	r3, #0
    2552:	d1f7      	bne.n	2544 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    2554:	2000      	movs	r0, #0
    2556:	e7b5      	b.n	24c4 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    2558:	2012      	movs	r0, #18
    255a:	e7b3      	b.n	24c4 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    255c:	2000      	movs	r0, #0
    255e:	e7b1      	b.n	24c4 <usart_write_buffer_wait+0x14>
    2560:	2000      	movs	r0, #0
    2562:	e7af      	b.n	24c4 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    2564:	2012      	movs	r0, #18
    2566:	e7ad      	b.n	24c4 <usart_write_buffer_wait+0x14>
    2568:	0000ffff 	.word	0x0000ffff
    256c:	00002415 	.word	0x00002415

00002570 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2570:	b5f0      	push	{r4, r5, r6, r7, lr}
    2572:	46d6      	mov	lr, sl
    2574:	b500      	push	{lr}
    2576:	b084      	sub	sp, #16
    2578:	0004      	movs	r4, r0
    257a:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    257c:	2017      	movs	r0, #23
	if (length == 0) {
    257e:	2a00      	cmp	r2, #0
    2580:	d103      	bne.n	258a <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    2582:	b004      	add	sp, #16
    2584:	bc04      	pop	{r2}
    2586:	4692      	mov	sl, r2
    2588:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    258a:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    258c:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    258e:	2b00      	cmp	r3, #0
    2590:	d0f7      	beq.n	2582 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2592:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    2594:	3a01      	subs	r2, #1
    2596:	b293      	uxth	r3, r2
    2598:	469a      	mov	sl, r3
    259a:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    259c:	2704      	movs	r7, #4
    259e:	e019      	b.n	25d4 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    25a0:	2300      	movs	r3, #0
    25a2:	aa02      	add	r2, sp, #8
    25a4:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    25a6:	1d91      	adds	r1, r2, #6
    25a8:	0020      	movs	r0, r4
    25aa:	4b15      	ldr	r3, [pc, #84]	; (2600 <usart_read_buffer_wait+0x90>)
    25ac:	4798      	blx	r3
		if (retval != STATUS_OK) {
    25ae:	2800      	cmp	r0, #0
    25b0:	d1e7      	bne.n	2582 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    25b2:	1c69      	adds	r1, r5, #1
    25b4:	b289      	uxth	r1, r1
    25b6:	ab02      	add	r3, sp, #8
    25b8:	88db      	ldrh	r3, [r3, #6]
    25ba:	9a01      	ldr	r2, [sp, #4]
    25bc:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    25be:	7962      	ldrb	r2, [r4, #5]
    25c0:	2a01      	cmp	r2, #1
    25c2:	d014      	beq.n	25ee <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    25c4:	000d      	movs	r5, r1
	while (length--) {
    25c6:	4653      	mov	r3, sl
    25c8:	3b01      	subs	r3, #1
    25ca:	b29b      	uxth	r3, r3
    25cc:	469a      	mov	sl, r3
    25ce:	4b0d      	ldr	r3, [pc, #52]	; (2604 <usart_read_buffer_wait+0x94>)
    25d0:	459a      	cmp	sl, r3
    25d2:	d0d6      	beq.n	2582 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    25d4:	7e33      	ldrb	r3, [r6, #24]
    25d6:	423b      	tst	r3, r7
    25d8:	d1e2      	bne.n	25a0 <usart_read_buffer_wait+0x30>
    25da:	4b0a      	ldr	r3, [pc, #40]	; (2604 <usart_read_buffer_wait+0x94>)
    25dc:	7e32      	ldrb	r2, [r6, #24]
    25de:	423a      	tst	r2, r7
    25e0:	d1de      	bne.n	25a0 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    25e2:	2b01      	cmp	r3, #1
    25e4:	d009      	beq.n	25fa <usart_read_buffer_wait+0x8a>
    25e6:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    25e8:	2b00      	cmp	r3, #0
    25ea:	d1f7      	bne.n	25dc <usart_read_buffer_wait+0x6c>
    25ec:	e7d8      	b.n	25a0 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    25ee:	3502      	adds	r5, #2
    25f0:	b2ad      	uxth	r5, r5
    25f2:	0a1b      	lsrs	r3, r3, #8
    25f4:	9a01      	ldr	r2, [sp, #4]
    25f6:	5453      	strb	r3, [r2, r1]
    25f8:	e7e5      	b.n	25c6 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    25fa:	2012      	movs	r0, #18
    25fc:	e7c1      	b.n	2582 <usart_read_buffer_wait+0x12>
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	00002441 	.word	0x00002441
    2604:	0000ffff 	.word	0x0000ffff

00002608 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    260a:	0080      	lsls	r0, r0, #2
    260c:	4b62      	ldr	r3, [pc, #392]	; (2798 <_usart_interrupt_handler+0x190>)
    260e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2610:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2612:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2614:	2b00      	cmp	r3, #0
    2616:	d1fc      	bne.n	2612 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2618:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    261a:	7da6      	ldrb	r6, [r4, #22]
    261c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    261e:	2330      	movs	r3, #48	; 0x30
    2620:	5ceb      	ldrb	r3, [r5, r3]
    2622:	2231      	movs	r2, #49	; 0x31
    2624:	5caf      	ldrb	r7, [r5, r2]
    2626:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2628:	07f3      	lsls	r3, r6, #31
    262a:	d522      	bpl.n	2672 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    262c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    262e:	b29b      	uxth	r3, r3
    2630:	2b00      	cmp	r3, #0
    2632:	d01c      	beq.n	266e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2634:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2636:	7813      	ldrb	r3, [r2, #0]
    2638:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    263a:	1c51      	adds	r1, r2, #1
    263c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    263e:	7969      	ldrb	r1, [r5, #5]
    2640:	2901      	cmp	r1, #1
    2642:	d00e      	beq.n	2662 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2644:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2646:	05db      	lsls	r3, r3, #23
    2648:	0ddb      	lsrs	r3, r3, #23
    264a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    264c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    264e:	3b01      	subs	r3, #1
    2650:	b29b      	uxth	r3, r3
    2652:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2654:	2b00      	cmp	r3, #0
    2656:	d10c      	bne.n	2672 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2658:	3301      	adds	r3, #1
    265a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    265c:	3301      	adds	r3, #1
    265e:	75a3      	strb	r3, [r4, #22]
    2660:	e007      	b.n	2672 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2662:	7851      	ldrb	r1, [r2, #1]
    2664:	0209      	lsls	r1, r1, #8
    2666:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2668:	3202      	adds	r2, #2
    266a:	62aa      	str	r2, [r5, #40]	; 0x28
    266c:	e7eb      	b.n	2646 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    266e:	2301      	movs	r3, #1
    2670:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2672:	07b3      	lsls	r3, r6, #30
    2674:	d506      	bpl.n	2684 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2676:	2302      	movs	r3, #2
    2678:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    267a:	2200      	movs	r2, #0
    267c:	3331      	adds	r3, #49	; 0x31
    267e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2680:	07fb      	lsls	r3, r7, #31
    2682:	d41a      	bmi.n	26ba <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2684:	0773      	lsls	r3, r6, #29
    2686:	d565      	bpl.n	2754 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2688:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    268a:	b29b      	uxth	r3, r3
    268c:	2b00      	cmp	r3, #0
    268e:	d05f      	beq.n	2750 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2690:	8b63      	ldrh	r3, [r4, #26]
    2692:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2694:	071a      	lsls	r2, r3, #28
    2696:	d414      	bmi.n	26c2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2698:	223f      	movs	r2, #63	; 0x3f
    269a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    269c:	2b00      	cmp	r3, #0
    269e:	d034      	beq.n	270a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    26a0:	079a      	lsls	r2, r3, #30
    26a2:	d511      	bpl.n	26c8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    26a4:	221a      	movs	r2, #26
    26a6:	2332      	movs	r3, #50	; 0x32
    26a8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    26aa:	3b30      	subs	r3, #48	; 0x30
    26ac:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    26ae:	077b      	lsls	r3, r7, #29
    26b0:	d550      	bpl.n	2754 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    26b2:	0028      	movs	r0, r5
    26b4:	696b      	ldr	r3, [r5, #20]
    26b6:	4798      	blx	r3
    26b8:	e04c      	b.n	2754 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    26ba:	0028      	movs	r0, r5
    26bc:	68eb      	ldr	r3, [r5, #12]
    26be:	4798      	blx	r3
    26c0:	e7e0      	b.n	2684 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    26c2:	2237      	movs	r2, #55	; 0x37
    26c4:	4013      	ands	r3, r2
    26c6:	e7e9      	b.n	269c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    26c8:	075a      	lsls	r2, r3, #29
    26ca:	d505      	bpl.n	26d8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    26cc:	221e      	movs	r2, #30
    26ce:	2332      	movs	r3, #50	; 0x32
    26d0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    26d2:	3b2e      	subs	r3, #46	; 0x2e
    26d4:	8363      	strh	r3, [r4, #26]
    26d6:	e7ea      	b.n	26ae <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    26d8:	07da      	lsls	r2, r3, #31
    26da:	d505      	bpl.n	26e8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    26dc:	2213      	movs	r2, #19
    26de:	2332      	movs	r3, #50	; 0x32
    26e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    26e2:	3b31      	subs	r3, #49	; 0x31
    26e4:	8363      	strh	r3, [r4, #26]
    26e6:	e7e2      	b.n	26ae <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    26e8:	06da      	lsls	r2, r3, #27
    26ea:	d505      	bpl.n	26f8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    26ec:	2242      	movs	r2, #66	; 0x42
    26ee:	2332      	movs	r3, #50	; 0x32
    26f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    26f2:	3b22      	subs	r3, #34	; 0x22
    26f4:	8363      	strh	r3, [r4, #26]
    26f6:	e7da      	b.n	26ae <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    26f8:	2220      	movs	r2, #32
    26fa:	421a      	tst	r2, r3
    26fc:	d0d7      	beq.n	26ae <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    26fe:	3221      	adds	r2, #33	; 0x21
    2700:	2332      	movs	r3, #50	; 0x32
    2702:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2704:	3b12      	subs	r3, #18
    2706:	8363      	strh	r3, [r4, #26]
    2708:	e7d1      	b.n	26ae <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    270a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    270c:	05db      	lsls	r3, r3, #23
    270e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2710:	b2da      	uxtb	r2, r3
    2712:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2714:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2716:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2718:	1c51      	adds	r1, r2, #1
    271a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    271c:	7969      	ldrb	r1, [r5, #5]
    271e:	2901      	cmp	r1, #1
    2720:	d010      	beq.n	2744 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2722:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2724:	3b01      	subs	r3, #1
    2726:	b29b      	uxth	r3, r3
    2728:	85ab      	strh	r3, [r5, #44]	; 0x2c
    272a:	2b00      	cmp	r3, #0
    272c:	d112      	bne.n	2754 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    272e:	3304      	adds	r3, #4
    2730:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2732:	2200      	movs	r2, #0
    2734:	332e      	adds	r3, #46	; 0x2e
    2736:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2738:	07bb      	lsls	r3, r7, #30
    273a:	d50b      	bpl.n	2754 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    273c:	0028      	movs	r0, r5
    273e:	692b      	ldr	r3, [r5, #16]
    2740:	4798      	blx	r3
    2742:	e007      	b.n	2754 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2744:	0a1b      	lsrs	r3, r3, #8
    2746:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2748:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    274a:	3301      	adds	r3, #1
    274c:	626b      	str	r3, [r5, #36]	; 0x24
    274e:	e7e8      	b.n	2722 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2750:	2304      	movs	r3, #4
    2752:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2754:	06f3      	lsls	r3, r6, #27
    2756:	d504      	bpl.n	2762 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2758:	2310      	movs	r3, #16
    275a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    275c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    275e:	06fb      	lsls	r3, r7, #27
    2760:	d40e      	bmi.n	2780 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2762:	06b3      	lsls	r3, r6, #26
    2764:	d504      	bpl.n	2770 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2766:	2320      	movs	r3, #32
    2768:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    276a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    276c:	073b      	lsls	r3, r7, #28
    276e:	d40b      	bmi.n	2788 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2770:	0733      	lsls	r3, r6, #28
    2772:	d504      	bpl.n	277e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2774:	2308      	movs	r3, #8
    2776:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2778:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    277a:	06bb      	lsls	r3, r7, #26
    277c:	d408      	bmi.n	2790 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    277e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2780:	0028      	movs	r0, r5
    2782:	69eb      	ldr	r3, [r5, #28]
    2784:	4798      	blx	r3
    2786:	e7ec      	b.n	2762 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2788:	0028      	movs	r0, r5
    278a:	69ab      	ldr	r3, [r5, #24]
    278c:	4798      	blx	r3
    278e:	e7ef      	b.n	2770 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2790:	6a2b      	ldr	r3, [r5, #32]
    2792:	0028      	movs	r0, r5
    2794:	4798      	blx	r3
}
    2796:	e7f2      	b.n	277e <_usart_interrupt_handler+0x176>
    2798:	200002bc 	.word	0x200002bc

0000279c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    279c:	b5f0      	push	{r4, r5, r6, r7, lr}
    279e:	46de      	mov	lr, fp
    27a0:	4657      	mov	r7, sl
    27a2:	464e      	mov	r6, r9
    27a4:	4645      	mov	r5, r8
    27a6:	b5e0      	push	{r5, r6, r7, lr}
    27a8:	b087      	sub	sp, #28
    27aa:	4680      	mov	r8, r0
    27ac:	9104      	str	r1, [sp, #16]
    27ae:	0016      	movs	r6, r2
    27b0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    27b2:	2200      	movs	r2, #0
    27b4:	2300      	movs	r3, #0
    27b6:	2100      	movs	r1, #0
    27b8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    27ba:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    27bc:	2001      	movs	r0, #1
    27be:	0021      	movs	r1, r4
    27c0:	9600      	str	r6, [sp, #0]
    27c2:	9701      	str	r7, [sp, #4]
    27c4:	465c      	mov	r4, fp
    27c6:	9403      	str	r4, [sp, #12]
    27c8:	4644      	mov	r4, r8
    27ca:	9405      	str	r4, [sp, #20]
    27cc:	e013      	b.n	27f6 <long_division+0x5a>
    27ce:	2420      	movs	r4, #32
    27d0:	1a64      	subs	r4, r4, r1
    27d2:	0005      	movs	r5, r0
    27d4:	40e5      	lsrs	r5, r4
    27d6:	46a8      	mov	r8, r5
    27d8:	e014      	b.n	2804 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    27da:	9c00      	ldr	r4, [sp, #0]
    27dc:	9d01      	ldr	r5, [sp, #4]
    27de:	1b12      	subs	r2, r2, r4
    27e0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    27e2:	465c      	mov	r4, fp
    27e4:	464d      	mov	r5, r9
    27e6:	432c      	orrs	r4, r5
    27e8:	46a3      	mov	fp, r4
    27ea:	9c03      	ldr	r4, [sp, #12]
    27ec:	4645      	mov	r5, r8
    27ee:	432c      	orrs	r4, r5
    27f0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    27f2:	3901      	subs	r1, #1
    27f4:	d325      	bcc.n	2842 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    27f6:	2420      	movs	r4, #32
    27f8:	4264      	negs	r4, r4
    27fa:	190c      	adds	r4, r1, r4
    27fc:	d4e7      	bmi.n	27ce <long_division+0x32>
    27fe:	0005      	movs	r5, r0
    2800:	40a5      	lsls	r5, r4
    2802:	46a8      	mov	r8, r5
    2804:	0004      	movs	r4, r0
    2806:	408c      	lsls	r4, r1
    2808:	46a1      	mov	r9, r4
		r = r << 1;
    280a:	1892      	adds	r2, r2, r2
    280c:	415b      	adcs	r3, r3
    280e:	0014      	movs	r4, r2
    2810:	001d      	movs	r5, r3
		if (n & bit_shift) {
    2812:	9e05      	ldr	r6, [sp, #20]
    2814:	464f      	mov	r7, r9
    2816:	403e      	ands	r6, r7
    2818:	46b4      	mov	ip, r6
    281a:	9e04      	ldr	r6, [sp, #16]
    281c:	4647      	mov	r7, r8
    281e:	403e      	ands	r6, r7
    2820:	46b2      	mov	sl, r6
    2822:	4666      	mov	r6, ip
    2824:	4657      	mov	r7, sl
    2826:	433e      	orrs	r6, r7
    2828:	d003      	beq.n	2832 <long_division+0x96>
			r |= 0x01;
    282a:	0006      	movs	r6, r0
    282c:	4326      	orrs	r6, r4
    282e:	0032      	movs	r2, r6
    2830:	002b      	movs	r3, r5
		if (r >= d) {
    2832:	9c00      	ldr	r4, [sp, #0]
    2834:	9d01      	ldr	r5, [sp, #4]
    2836:	429d      	cmp	r5, r3
    2838:	d8db      	bhi.n	27f2 <long_division+0x56>
    283a:	d1ce      	bne.n	27da <long_division+0x3e>
    283c:	4294      	cmp	r4, r2
    283e:	d8d8      	bhi.n	27f2 <long_division+0x56>
    2840:	e7cb      	b.n	27da <long_division+0x3e>
    2842:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    2844:	4658      	mov	r0, fp
    2846:	0019      	movs	r1, r3
    2848:	b007      	add	sp, #28
    284a:	bc3c      	pop	{r2, r3, r4, r5}
    284c:	4690      	mov	r8, r2
    284e:	4699      	mov	r9, r3
    2850:	46a2      	mov	sl, r4
    2852:	46ab      	mov	fp, r5
    2854:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002856 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2856:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2858:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    285a:	2340      	movs	r3, #64	; 0x40
    285c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    285e:	4281      	cmp	r1, r0
    2860:	d202      	bcs.n	2868 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    2862:	0018      	movs	r0, r3
    2864:	bd10      	pop	{r4, pc}
		baud_calculated++;
    2866:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    2868:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    286a:	1c63      	adds	r3, r4, #1
    286c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    286e:	4288      	cmp	r0, r1
    2870:	d9f9      	bls.n	2866 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2872:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    2874:	2cff      	cmp	r4, #255	; 0xff
    2876:	d8f4      	bhi.n	2862 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    2878:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    287a:	2300      	movs	r3, #0
    287c:	e7f1      	b.n	2862 <_sercom_get_sync_baud_val+0xc>
	...

00002880 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2880:	b5f0      	push	{r4, r5, r6, r7, lr}
    2882:	b083      	sub	sp, #12
    2884:	000f      	movs	r7, r1
    2886:	0016      	movs	r6, r2
    2888:	aa08      	add	r2, sp, #32
    288a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    288c:	0004      	movs	r4, r0
    288e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2890:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    2892:	42bc      	cmp	r4, r7
    2894:	d902      	bls.n	289c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    2896:	0010      	movs	r0, r2
    2898:	b003      	add	sp, #12
    289a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    289c:	2b00      	cmp	r3, #0
    289e:	d114      	bne.n	28ca <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    28a0:	0002      	movs	r2, r0
    28a2:	0008      	movs	r0, r1
    28a4:	2100      	movs	r1, #0
    28a6:	4c19      	ldr	r4, [pc, #100]	; (290c <_sercom_get_async_baud_val+0x8c>)
    28a8:	47a0      	blx	r4
    28aa:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    28ac:	003a      	movs	r2, r7
    28ae:	2300      	movs	r3, #0
    28b0:	2000      	movs	r0, #0
    28b2:	4c17      	ldr	r4, [pc, #92]	; (2910 <_sercom_get_async_baud_val+0x90>)
    28b4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    28b6:	2200      	movs	r2, #0
    28b8:	2301      	movs	r3, #1
    28ba:	1a12      	subs	r2, r2, r0
    28bc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    28be:	0c12      	lsrs	r2, r2, #16
    28c0:	041b      	lsls	r3, r3, #16
    28c2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    28c4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    28c6:	2200      	movs	r2, #0
    28c8:	e7e5      	b.n	2896 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    28ca:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    28cc:	2b01      	cmp	r3, #1
    28ce:	d1f9      	bne.n	28c4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    28d0:	000a      	movs	r2, r1
    28d2:	2300      	movs	r3, #0
    28d4:	2100      	movs	r1, #0
    28d6:	4c0d      	ldr	r4, [pc, #52]	; (290c <_sercom_get_async_baud_val+0x8c>)
    28d8:	47a0      	blx	r4
    28da:	0002      	movs	r2, r0
    28dc:	000b      	movs	r3, r1
    28de:	9200      	str	r2, [sp, #0]
    28e0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    28e2:	0038      	movs	r0, r7
    28e4:	2100      	movs	r1, #0
    28e6:	4c0a      	ldr	r4, [pc, #40]	; (2910 <_sercom_get_async_baud_val+0x90>)
    28e8:	47a0      	blx	r4
    28ea:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    28ec:	2380      	movs	r3, #128	; 0x80
    28ee:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    28f0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    28f2:	4298      	cmp	r0, r3
    28f4:	d8cf      	bhi.n	2896 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    28f6:	0f79      	lsrs	r1, r7, #29
    28f8:	00f8      	lsls	r0, r7, #3
    28fa:	9a00      	ldr	r2, [sp, #0]
    28fc:	9b01      	ldr	r3, [sp, #4]
    28fe:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    2900:	00ea      	lsls	r2, r5, #3
    2902:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    2904:	b2d2      	uxtb	r2, r2
    2906:	0352      	lsls	r2, r2, #13
    2908:	432a      	orrs	r2, r5
    290a:	e7db      	b.n	28c4 <_sercom_get_async_baud_val+0x44>
    290c:	000065f5 	.word	0x000065f5
    2910:	0000279d 	.word	0x0000279d

00002914 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2914:	b510      	push	{r4, lr}
    2916:	b082      	sub	sp, #8
    2918:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    291a:	4b0e      	ldr	r3, [pc, #56]	; (2954 <sercom_set_gclk_generator+0x40>)
    291c:	781b      	ldrb	r3, [r3, #0]
    291e:	2b00      	cmp	r3, #0
    2920:	d007      	beq.n	2932 <sercom_set_gclk_generator+0x1e>
    2922:	2900      	cmp	r1, #0
    2924:	d105      	bne.n	2932 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2926:	4b0b      	ldr	r3, [pc, #44]	; (2954 <sercom_set_gclk_generator+0x40>)
    2928:	785b      	ldrb	r3, [r3, #1]
    292a:	4283      	cmp	r3, r0
    292c:	d010      	beq.n	2950 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    292e:	201d      	movs	r0, #29
    2930:	e00c      	b.n	294c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    2932:	a901      	add	r1, sp, #4
    2934:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2936:	2013      	movs	r0, #19
    2938:	4b07      	ldr	r3, [pc, #28]	; (2958 <sercom_set_gclk_generator+0x44>)
    293a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    293c:	2013      	movs	r0, #19
    293e:	4b07      	ldr	r3, [pc, #28]	; (295c <sercom_set_gclk_generator+0x48>)
    2940:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    2942:	4b04      	ldr	r3, [pc, #16]	; (2954 <sercom_set_gclk_generator+0x40>)
    2944:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    2946:	2201      	movs	r2, #1
    2948:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    294a:	2000      	movs	r0, #0
}
    294c:	b002      	add	sp, #8
    294e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    2950:	2000      	movs	r0, #0
    2952:	e7fb      	b.n	294c <sercom_set_gclk_generator+0x38>
    2954:	200001fc 	.word	0x200001fc
    2958:	00003155 	.word	0x00003155
    295c:	000030c9 	.word	0x000030c9

00002960 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2960:	4b40      	ldr	r3, [pc, #256]	; (2a64 <_sercom_get_default_pad+0x104>)
    2962:	4298      	cmp	r0, r3
    2964:	d031      	beq.n	29ca <_sercom_get_default_pad+0x6a>
    2966:	d90a      	bls.n	297e <_sercom_get_default_pad+0x1e>
    2968:	4b3f      	ldr	r3, [pc, #252]	; (2a68 <_sercom_get_default_pad+0x108>)
    296a:	4298      	cmp	r0, r3
    296c:	d04d      	beq.n	2a0a <_sercom_get_default_pad+0xaa>
    296e:	4b3f      	ldr	r3, [pc, #252]	; (2a6c <_sercom_get_default_pad+0x10c>)
    2970:	4298      	cmp	r0, r3
    2972:	d05a      	beq.n	2a2a <_sercom_get_default_pad+0xca>
    2974:	4b3e      	ldr	r3, [pc, #248]	; (2a70 <_sercom_get_default_pad+0x110>)
    2976:	4298      	cmp	r0, r3
    2978:	d037      	beq.n	29ea <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    297a:	2000      	movs	r0, #0
}
    297c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    297e:	4b3d      	ldr	r3, [pc, #244]	; (2a74 <_sercom_get_default_pad+0x114>)
    2980:	4298      	cmp	r0, r3
    2982:	d00c      	beq.n	299e <_sercom_get_default_pad+0x3e>
    2984:	4b3c      	ldr	r3, [pc, #240]	; (2a78 <_sercom_get_default_pad+0x118>)
    2986:	4298      	cmp	r0, r3
    2988:	d1f7      	bne.n	297a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    298a:	2901      	cmp	r1, #1
    298c:	d017      	beq.n	29be <_sercom_get_default_pad+0x5e>
    298e:	2900      	cmp	r1, #0
    2990:	d05d      	beq.n	2a4e <_sercom_get_default_pad+0xee>
    2992:	2902      	cmp	r1, #2
    2994:	d015      	beq.n	29c2 <_sercom_get_default_pad+0x62>
    2996:	2903      	cmp	r1, #3
    2998:	d015      	beq.n	29c6 <_sercom_get_default_pad+0x66>
	return 0;
    299a:	2000      	movs	r0, #0
    299c:	e7ee      	b.n	297c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    299e:	2901      	cmp	r1, #1
    29a0:	d007      	beq.n	29b2 <_sercom_get_default_pad+0x52>
    29a2:	2900      	cmp	r1, #0
    29a4:	d051      	beq.n	2a4a <_sercom_get_default_pad+0xea>
    29a6:	2902      	cmp	r1, #2
    29a8:	d005      	beq.n	29b6 <_sercom_get_default_pad+0x56>
    29aa:	2903      	cmp	r1, #3
    29ac:	d005      	beq.n	29ba <_sercom_get_default_pad+0x5a>
	return 0;
    29ae:	2000      	movs	r0, #0
    29b0:	e7e4      	b.n	297c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    29b2:	4832      	ldr	r0, [pc, #200]	; (2a7c <_sercom_get_default_pad+0x11c>)
    29b4:	e7e2      	b.n	297c <_sercom_get_default_pad+0x1c>
    29b6:	4832      	ldr	r0, [pc, #200]	; (2a80 <_sercom_get_default_pad+0x120>)
    29b8:	e7e0      	b.n	297c <_sercom_get_default_pad+0x1c>
    29ba:	4832      	ldr	r0, [pc, #200]	; (2a84 <_sercom_get_default_pad+0x124>)
    29bc:	e7de      	b.n	297c <_sercom_get_default_pad+0x1c>
    29be:	4832      	ldr	r0, [pc, #200]	; (2a88 <_sercom_get_default_pad+0x128>)
    29c0:	e7dc      	b.n	297c <_sercom_get_default_pad+0x1c>
    29c2:	4832      	ldr	r0, [pc, #200]	; (2a8c <_sercom_get_default_pad+0x12c>)
    29c4:	e7da      	b.n	297c <_sercom_get_default_pad+0x1c>
    29c6:	4832      	ldr	r0, [pc, #200]	; (2a90 <_sercom_get_default_pad+0x130>)
    29c8:	e7d8      	b.n	297c <_sercom_get_default_pad+0x1c>
    29ca:	2901      	cmp	r1, #1
    29cc:	d007      	beq.n	29de <_sercom_get_default_pad+0x7e>
    29ce:	2900      	cmp	r1, #0
    29d0:	d03f      	beq.n	2a52 <_sercom_get_default_pad+0xf2>
    29d2:	2902      	cmp	r1, #2
    29d4:	d005      	beq.n	29e2 <_sercom_get_default_pad+0x82>
    29d6:	2903      	cmp	r1, #3
    29d8:	d005      	beq.n	29e6 <_sercom_get_default_pad+0x86>
	return 0;
    29da:	2000      	movs	r0, #0
    29dc:	e7ce      	b.n	297c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    29de:	482d      	ldr	r0, [pc, #180]	; (2a94 <_sercom_get_default_pad+0x134>)
    29e0:	e7cc      	b.n	297c <_sercom_get_default_pad+0x1c>
    29e2:	482d      	ldr	r0, [pc, #180]	; (2a98 <_sercom_get_default_pad+0x138>)
    29e4:	e7ca      	b.n	297c <_sercom_get_default_pad+0x1c>
    29e6:	482d      	ldr	r0, [pc, #180]	; (2a9c <_sercom_get_default_pad+0x13c>)
    29e8:	e7c8      	b.n	297c <_sercom_get_default_pad+0x1c>
    29ea:	2901      	cmp	r1, #1
    29ec:	d007      	beq.n	29fe <_sercom_get_default_pad+0x9e>
    29ee:	2900      	cmp	r1, #0
    29f0:	d031      	beq.n	2a56 <_sercom_get_default_pad+0xf6>
    29f2:	2902      	cmp	r1, #2
    29f4:	d005      	beq.n	2a02 <_sercom_get_default_pad+0xa2>
    29f6:	2903      	cmp	r1, #3
    29f8:	d005      	beq.n	2a06 <_sercom_get_default_pad+0xa6>
	return 0;
    29fa:	2000      	movs	r0, #0
    29fc:	e7be      	b.n	297c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    29fe:	4828      	ldr	r0, [pc, #160]	; (2aa0 <_sercom_get_default_pad+0x140>)
    2a00:	e7bc      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a02:	4828      	ldr	r0, [pc, #160]	; (2aa4 <_sercom_get_default_pad+0x144>)
    2a04:	e7ba      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a06:	4828      	ldr	r0, [pc, #160]	; (2aa8 <_sercom_get_default_pad+0x148>)
    2a08:	e7b8      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a0a:	2901      	cmp	r1, #1
    2a0c:	d007      	beq.n	2a1e <_sercom_get_default_pad+0xbe>
    2a0e:	2900      	cmp	r1, #0
    2a10:	d023      	beq.n	2a5a <_sercom_get_default_pad+0xfa>
    2a12:	2902      	cmp	r1, #2
    2a14:	d005      	beq.n	2a22 <_sercom_get_default_pad+0xc2>
    2a16:	2903      	cmp	r1, #3
    2a18:	d005      	beq.n	2a26 <_sercom_get_default_pad+0xc6>
	return 0;
    2a1a:	2000      	movs	r0, #0
    2a1c:	e7ae      	b.n	297c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2a1e:	4823      	ldr	r0, [pc, #140]	; (2aac <_sercom_get_default_pad+0x14c>)
    2a20:	e7ac      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a22:	4823      	ldr	r0, [pc, #140]	; (2ab0 <_sercom_get_default_pad+0x150>)
    2a24:	e7aa      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a26:	4823      	ldr	r0, [pc, #140]	; (2ab4 <_sercom_get_default_pad+0x154>)
    2a28:	e7a8      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a2a:	2901      	cmp	r1, #1
    2a2c:	d007      	beq.n	2a3e <_sercom_get_default_pad+0xde>
    2a2e:	2900      	cmp	r1, #0
    2a30:	d015      	beq.n	2a5e <_sercom_get_default_pad+0xfe>
    2a32:	2902      	cmp	r1, #2
    2a34:	d005      	beq.n	2a42 <_sercom_get_default_pad+0xe2>
    2a36:	2903      	cmp	r1, #3
    2a38:	d005      	beq.n	2a46 <_sercom_get_default_pad+0xe6>
	return 0;
    2a3a:	2000      	movs	r0, #0
    2a3c:	e79e      	b.n	297c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2a3e:	481e      	ldr	r0, [pc, #120]	; (2ab8 <_sercom_get_default_pad+0x158>)
    2a40:	e79c      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a42:	481e      	ldr	r0, [pc, #120]	; (2abc <_sercom_get_default_pad+0x15c>)
    2a44:	e79a      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a46:	481e      	ldr	r0, [pc, #120]	; (2ac0 <_sercom_get_default_pad+0x160>)
    2a48:	e798      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a4a:	481e      	ldr	r0, [pc, #120]	; (2ac4 <_sercom_get_default_pad+0x164>)
    2a4c:	e796      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a4e:	2003      	movs	r0, #3
    2a50:	e794      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a52:	481d      	ldr	r0, [pc, #116]	; (2ac8 <_sercom_get_default_pad+0x168>)
    2a54:	e792      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a56:	481d      	ldr	r0, [pc, #116]	; (2acc <_sercom_get_default_pad+0x16c>)
    2a58:	e790      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a5a:	481d      	ldr	r0, [pc, #116]	; (2ad0 <_sercom_get_default_pad+0x170>)
    2a5c:	e78e      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a5e:	481d      	ldr	r0, [pc, #116]	; (2ad4 <_sercom_get_default_pad+0x174>)
    2a60:	e78c      	b.n	297c <_sercom_get_default_pad+0x1c>
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	42001000 	.word	0x42001000
    2a68:	42001800 	.word	0x42001800
    2a6c:	42001c00 	.word	0x42001c00
    2a70:	42001400 	.word	0x42001400
    2a74:	42000800 	.word	0x42000800
    2a78:	42000c00 	.word	0x42000c00
    2a7c:	00050003 	.word	0x00050003
    2a80:	00060003 	.word	0x00060003
    2a84:	00070003 	.word	0x00070003
    2a88:	00010003 	.word	0x00010003
    2a8c:	001e0003 	.word	0x001e0003
    2a90:	001f0003 	.word	0x001f0003
    2a94:	00090003 	.word	0x00090003
    2a98:	000a0003 	.word	0x000a0003
    2a9c:	000b0003 	.word	0x000b0003
    2aa0:	00110003 	.word	0x00110003
    2aa4:	00120003 	.word	0x00120003
    2aa8:	00130003 	.word	0x00130003
    2aac:	000d0003 	.word	0x000d0003
    2ab0:	000e0003 	.word	0x000e0003
    2ab4:	000f0003 	.word	0x000f0003
    2ab8:	00170003 	.word	0x00170003
    2abc:	00180003 	.word	0x00180003
    2ac0:	00190003 	.word	0x00190003
    2ac4:	00040003 	.word	0x00040003
    2ac8:	00080003 	.word	0x00080003
    2acc:	00100003 	.word	0x00100003
    2ad0:	000c0003 	.word	0x000c0003
    2ad4:	00160003 	.word	0x00160003

00002ad8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2ad8:	b530      	push	{r4, r5, lr}
    2ada:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2adc:	4b0b      	ldr	r3, [pc, #44]	; (2b0c <_sercom_get_sercom_inst_index+0x34>)
    2ade:	466a      	mov	r2, sp
    2ae0:	cb32      	ldmia	r3!, {r1, r4, r5}
    2ae2:	c232      	stmia	r2!, {r1, r4, r5}
    2ae4:	cb32      	ldmia	r3!, {r1, r4, r5}
    2ae6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2ae8:	9b00      	ldr	r3, [sp, #0]
    2aea:	4283      	cmp	r3, r0
    2aec:	d00b      	beq.n	2b06 <_sercom_get_sercom_inst_index+0x2e>
    2aee:	2301      	movs	r3, #1
    2af0:	009a      	lsls	r2, r3, #2
    2af2:	4669      	mov	r1, sp
    2af4:	5852      	ldr	r2, [r2, r1]
    2af6:	4282      	cmp	r2, r0
    2af8:	d006      	beq.n	2b08 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2afa:	3301      	adds	r3, #1
    2afc:	2b06      	cmp	r3, #6
    2afe:	d1f7      	bne.n	2af0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2b00:	2000      	movs	r0, #0
}
    2b02:	b007      	add	sp, #28
    2b04:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2b06:	2300      	movs	r3, #0
			return i;
    2b08:	b2d8      	uxtb	r0, r3
    2b0a:	e7fa      	b.n	2b02 <_sercom_get_sercom_inst_index+0x2a>
    2b0c:	00009348 	.word	0x00009348

00002b10 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2b10:	4770      	bx	lr
	...

00002b14 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2b14:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2b16:	4b0a      	ldr	r3, [pc, #40]	; (2b40 <_sercom_set_handler+0x2c>)
    2b18:	781b      	ldrb	r3, [r3, #0]
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	d10c      	bne.n	2b38 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2b1e:	4f09      	ldr	r7, [pc, #36]	; (2b44 <_sercom_set_handler+0x30>)
    2b20:	4e09      	ldr	r6, [pc, #36]	; (2b48 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2b22:	4d0a      	ldr	r5, [pc, #40]	; (2b4c <_sercom_set_handler+0x38>)
    2b24:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2b26:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2b28:	195a      	adds	r2, r3, r5
    2b2a:	6014      	str	r4, [r2, #0]
    2b2c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2b2e:	2b18      	cmp	r3, #24
    2b30:	d1f9      	bne.n	2b26 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2b32:	2201      	movs	r2, #1
    2b34:	4b02      	ldr	r3, [pc, #8]	; (2b40 <_sercom_set_handler+0x2c>)
    2b36:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2b38:	0080      	lsls	r0, r0, #2
    2b3a:	4b02      	ldr	r3, [pc, #8]	; (2b44 <_sercom_set_handler+0x30>)
    2b3c:	50c1      	str	r1, [r0, r3]
}
    2b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b40:	200001fe 	.word	0x200001fe
    2b44:	20000200 	.word	0x20000200
    2b48:	00002b11 	.word	0x00002b11
    2b4c:	200002bc 	.word	0x200002bc

00002b50 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2b50:	b500      	push	{lr}
    2b52:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2b54:	2309      	movs	r3, #9
    2b56:	466a      	mov	r2, sp
    2b58:	7013      	strb	r3, [r2, #0]
    2b5a:	3301      	adds	r3, #1
    2b5c:	7053      	strb	r3, [r2, #1]
    2b5e:	3301      	adds	r3, #1
    2b60:	7093      	strb	r3, [r2, #2]
    2b62:	3301      	adds	r3, #1
    2b64:	70d3      	strb	r3, [r2, #3]
    2b66:	3301      	adds	r3, #1
    2b68:	7113      	strb	r3, [r2, #4]
    2b6a:	3301      	adds	r3, #1
    2b6c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2b6e:	4b03      	ldr	r3, [pc, #12]	; (2b7c <_sercom_get_interrupt_vector+0x2c>)
    2b70:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2b72:	466b      	mov	r3, sp
    2b74:	5618      	ldrsb	r0, [r3, r0]
}
    2b76:	b003      	add	sp, #12
    2b78:	bd00      	pop	{pc}
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	00002ad9 	.word	0x00002ad9

00002b80 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2b80:	b510      	push	{r4, lr}
    2b82:	4b02      	ldr	r3, [pc, #8]	; (2b8c <SERCOM0_Handler+0xc>)
    2b84:	681b      	ldr	r3, [r3, #0]
    2b86:	2000      	movs	r0, #0
    2b88:	4798      	blx	r3
    2b8a:	bd10      	pop	{r4, pc}
    2b8c:	20000200 	.word	0x20000200

00002b90 <SERCOM1_Handler>:
    2b90:	b510      	push	{r4, lr}
    2b92:	4b02      	ldr	r3, [pc, #8]	; (2b9c <SERCOM1_Handler+0xc>)
    2b94:	685b      	ldr	r3, [r3, #4]
    2b96:	2001      	movs	r0, #1
    2b98:	4798      	blx	r3
    2b9a:	bd10      	pop	{r4, pc}
    2b9c:	20000200 	.word	0x20000200

00002ba0 <SERCOM2_Handler>:
    2ba0:	b510      	push	{r4, lr}
    2ba2:	4b02      	ldr	r3, [pc, #8]	; (2bac <SERCOM2_Handler+0xc>)
    2ba4:	689b      	ldr	r3, [r3, #8]
    2ba6:	2002      	movs	r0, #2
    2ba8:	4798      	blx	r3
    2baa:	bd10      	pop	{r4, pc}
    2bac:	20000200 	.word	0x20000200

00002bb0 <SERCOM3_Handler>:
    2bb0:	b510      	push	{r4, lr}
    2bb2:	4b02      	ldr	r3, [pc, #8]	; (2bbc <SERCOM3_Handler+0xc>)
    2bb4:	68db      	ldr	r3, [r3, #12]
    2bb6:	2003      	movs	r0, #3
    2bb8:	4798      	blx	r3
    2bba:	bd10      	pop	{r4, pc}
    2bbc:	20000200 	.word	0x20000200

00002bc0 <SERCOM4_Handler>:
    2bc0:	b510      	push	{r4, lr}
    2bc2:	4b02      	ldr	r3, [pc, #8]	; (2bcc <SERCOM4_Handler+0xc>)
    2bc4:	691b      	ldr	r3, [r3, #16]
    2bc6:	2004      	movs	r0, #4
    2bc8:	4798      	blx	r3
    2bca:	bd10      	pop	{r4, pc}
    2bcc:	20000200 	.word	0x20000200

00002bd0 <SERCOM5_Handler>:
    2bd0:	b510      	push	{r4, lr}
    2bd2:	4b02      	ldr	r3, [pc, #8]	; (2bdc <SERCOM5_Handler+0xc>)
    2bd4:	695b      	ldr	r3, [r3, #20]
    2bd6:	2005      	movs	r0, #5
    2bd8:	4798      	blx	r3
    2bda:	bd10      	pop	{r4, pc}
    2bdc:	20000200 	.word	0x20000200

00002be0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    2be0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    2be2:	2000      	movs	r0, #0
    2be4:	4b08      	ldr	r3, [pc, #32]	; (2c08 <delay_init+0x28>)
    2be6:	4798      	blx	r3
    2be8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    2bea:	4c08      	ldr	r4, [pc, #32]	; (2c0c <delay_init+0x2c>)
    2bec:	21fa      	movs	r1, #250	; 0xfa
    2bee:	0089      	lsls	r1, r1, #2
    2bf0:	47a0      	blx	r4
    2bf2:	4b07      	ldr	r3, [pc, #28]	; (2c10 <delay_init+0x30>)
    2bf4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    2bf6:	4907      	ldr	r1, [pc, #28]	; (2c14 <delay_init+0x34>)
    2bf8:	0028      	movs	r0, r5
    2bfa:	47a0      	blx	r4
    2bfc:	4b06      	ldr	r3, [pc, #24]	; (2c18 <delay_init+0x38>)
    2bfe:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2c00:	2205      	movs	r2, #5
    2c02:	4b06      	ldr	r3, [pc, #24]	; (2c1c <delay_init+0x3c>)
    2c04:	601a      	str	r2, [r3, #0]
}
    2c06:	bd70      	pop	{r4, r5, r6, pc}
    2c08:	0000303d 	.word	0x0000303d
    2c0c:	0000628d 	.word	0x0000628d
    2c10:	20000000 	.word	0x20000000
    2c14:	000f4240 	.word	0x000f4240
    2c18:	20000004 	.word	0x20000004
    2c1c:	e000e010 	.word	0xe000e010

00002c20 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    2c20:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    2c22:	4b08      	ldr	r3, [pc, #32]	; (2c44 <delay_cycles_us+0x24>)
    2c24:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    2c26:	4a08      	ldr	r2, [pc, #32]	; (2c48 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    2c28:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2c2a:	2180      	movs	r1, #128	; 0x80
    2c2c:	0249      	lsls	r1, r1, #9
	while (n--) {
    2c2e:	3801      	subs	r0, #1
    2c30:	d307      	bcc.n	2c42 <delay_cycles_us+0x22>
	if (n > 0) {
    2c32:	2c00      	cmp	r4, #0
    2c34:	d0fb      	beq.n	2c2e <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    2c36:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    2c38:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2c3a:	6813      	ldr	r3, [r2, #0]
    2c3c:	420b      	tst	r3, r1
    2c3e:	d0fc      	beq.n	2c3a <delay_cycles_us+0x1a>
    2c40:	e7f5      	b.n	2c2e <delay_cycles_us+0xe>
	}
}
    2c42:	bd30      	pop	{r4, r5, pc}
    2c44:	20000004 	.word	0x20000004
    2c48:	e000e010 	.word	0xe000e010

00002c4c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    2c4c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    2c4e:	4b08      	ldr	r3, [pc, #32]	; (2c70 <delay_cycles_ms+0x24>)
    2c50:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    2c52:	4a08      	ldr	r2, [pc, #32]	; (2c74 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    2c54:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2c56:	2180      	movs	r1, #128	; 0x80
    2c58:	0249      	lsls	r1, r1, #9
	while (n--) {
    2c5a:	3801      	subs	r0, #1
    2c5c:	d307      	bcc.n	2c6e <delay_cycles_ms+0x22>
	if (n > 0) {
    2c5e:	2c00      	cmp	r4, #0
    2c60:	d0fb      	beq.n	2c5a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    2c62:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    2c64:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2c66:	6813      	ldr	r3, [r2, #0]
    2c68:	420b      	tst	r3, r1
    2c6a:	d0fc      	beq.n	2c66 <delay_cycles_ms+0x1a>
    2c6c:	e7f5      	b.n	2c5a <delay_cycles_ms+0xe>
	}
}
    2c6e:	bd30      	pop	{r4, r5, pc}
    2c70:	20000000 	.word	0x20000000
    2c74:	e000e010 	.word	0xe000e010

00002c78 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2c78:	b500      	push	{lr}
    2c7a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2c7c:	ab01      	add	r3, sp, #4
    2c7e:	2280      	movs	r2, #128	; 0x80
    2c80:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2c82:	780a      	ldrb	r2, [r1, #0]
    2c84:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2c86:	784a      	ldrb	r2, [r1, #1]
    2c88:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2c8a:	788a      	ldrb	r2, [r1, #2]
    2c8c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2c8e:	0019      	movs	r1, r3
    2c90:	4b01      	ldr	r3, [pc, #4]	; (2c98 <port_pin_set_config+0x20>)
    2c92:	4798      	blx	r3
}
    2c94:	b003      	add	sp, #12
    2c96:	bd00      	pop	{pc}
    2c98:	0000324d 	.word	0x0000324d

00002c9c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2c9c:	4770      	bx	lr
	...

00002ca0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2ca0:	4b0c      	ldr	r3, [pc, #48]	; (2cd4 <cpu_irq_enter_critical+0x34>)
    2ca2:	681b      	ldr	r3, [r3, #0]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d106      	bne.n	2cb6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2ca8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2cac:	2b00      	cmp	r3, #0
    2cae:	d007      	beq.n	2cc0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2cb0:	2200      	movs	r2, #0
    2cb2:	4b09      	ldr	r3, [pc, #36]	; (2cd8 <cpu_irq_enter_critical+0x38>)
    2cb4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2cb6:	4a07      	ldr	r2, [pc, #28]	; (2cd4 <cpu_irq_enter_critical+0x34>)
    2cb8:	6813      	ldr	r3, [r2, #0]
    2cba:	3301      	adds	r3, #1
    2cbc:	6013      	str	r3, [r2, #0]
}
    2cbe:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2cc0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2cc2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2cc6:	2200      	movs	r2, #0
    2cc8:	4b04      	ldr	r3, [pc, #16]	; (2cdc <cpu_irq_enter_critical+0x3c>)
    2cca:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2ccc:	3201      	adds	r2, #1
    2cce:	4b02      	ldr	r3, [pc, #8]	; (2cd8 <cpu_irq_enter_critical+0x38>)
    2cd0:	701a      	strb	r2, [r3, #0]
    2cd2:	e7f0      	b.n	2cb6 <cpu_irq_enter_critical+0x16>
    2cd4:	20000218 	.word	0x20000218
    2cd8:	2000021c 	.word	0x2000021c
    2cdc:	20000008 	.word	0x20000008

00002ce0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2ce0:	4b08      	ldr	r3, [pc, #32]	; (2d04 <cpu_irq_leave_critical+0x24>)
    2ce2:	681a      	ldr	r2, [r3, #0]
    2ce4:	3a01      	subs	r2, #1
    2ce6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2ce8:	681b      	ldr	r3, [r3, #0]
    2cea:	2b00      	cmp	r3, #0
    2cec:	d109      	bne.n	2d02 <cpu_irq_leave_critical+0x22>
    2cee:	4b06      	ldr	r3, [pc, #24]	; (2d08 <cpu_irq_leave_critical+0x28>)
    2cf0:	781b      	ldrb	r3, [r3, #0]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d005      	beq.n	2d02 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2cf6:	2201      	movs	r2, #1
    2cf8:	4b04      	ldr	r3, [pc, #16]	; (2d0c <cpu_irq_leave_critical+0x2c>)
    2cfa:	701a      	strb	r2, [r3, #0]
    2cfc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2d00:	b662      	cpsie	i
	}
}
    2d02:	4770      	bx	lr
    2d04:	20000218 	.word	0x20000218
    2d08:	2000021c 	.word	0x2000021c
    2d0c:	20000008 	.word	0x20000008

00002d10 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2d10:	b510      	push	{r4, lr}
	switch (clock_source) {
    2d12:	2808      	cmp	r0, #8
    2d14:	d803      	bhi.n	2d1e <system_clock_source_get_hz+0xe>
    2d16:	0080      	lsls	r0, r0, #2
    2d18:	4b1b      	ldr	r3, [pc, #108]	; (2d88 <system_clock_source_get_hz+0x78>)
    2d1a:	581b      	ldr	r3, [r3, r0]
    2d1c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2d1e:	2000      	movs	r0, #0
    2d20:	e030      	b.n	2d84 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    2d22:	4b1a      	ldr	r3, [pc, #104]	; (2d8c <system_clock_source_get_hz+0x7c>)
    2d24:	6918      	ldr	r0, [r3, #16]
    2d26:	e02d      	b.n	2d84 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2d28:	4b19      	ldr	r3, [pc, #100]	; (2d90 <system_clock_source_get_hz+0x80>)
    2d2a:	6a1b      	ldr	r3, [r3, #32]
    2d2c:	059b      	lsls	r3, r3, #22
    2d2e:	0f9b      	lsrs	r3, r3, #30
    2d30:	4818      	ldr	r0, [pc, #96]	; (2d94 <system_clock_source_get_hz+0x84>)
    2d32:	40d8      	lsrs	r0, r3
    2d34:	e026      	b.n	2d84 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    2d36:	4b15      	ldr	r3, [pc, #84]	; (2d8c <system_clock_source_get_hz+0x7c>)
    2d38:	6958      	ldr	r0, [r3, #20]
    2d3a:	e023      	b.n	2d84 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2d3c:	4b13      	ldr	r3, [pc, #76]	; (2d8c <system_clock_source_get_hz+0x7c>)
    2d3e:	681b      	ldr	r3, [r3, #0]
			return 0;
    2d40:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2d42:	079b      	lsls	r3, r3, #30
    2d44:	d51e      	bpl.n	2d84 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2d46:	4912      	ldr	r1, [pc, #72]	; (2d90 <system_clock_source_get_hz+0x80>)
    2d48:	2210      	movs	r2, #16
    2d4a:	68cb      	ldr	r3, [r1, #12]
    2d4c:	421a      	tst	r2, r3
    2d4e:	d0fc      	beq.n	2d4a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2d50:	4b0e      	ldr	r3, [pc, #56]	; (2d8c <system_clock_source_get_hz+0x7c>)
    2d52:	681b      	ldr	r3, [r3, #0]
    2d54:	075b      	lsls	r3, r3, #29
    2d56:	d401      	bmi.n	2d5c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2d58:	480f      	ldr	r0, [pc, #60]	; (2d98 <system_clock_source_get_hz+0x88>)
    2d5a:	e013      	b.n	2d84 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2d5c:	2000      	movs	r0, #0
    2d5e:	4b0f      	ldr	r3, [pc, #60]	; (2d9c <system_clock_source_get_hz+0x8c>)
    2d60:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2d62:	4b0a      	ldr	r3, [pc, #40]	; (2d8c <system_clock_source_get_hz+0x7c>)
    2d64:	689b      	ldr	r3, [r3, #8]
    2d66:	041b      	lsls	r3, r3, #16
    2d68:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2d6a:	4358      	muls	r0, r3
    2d6c:	e00a      	b.n	2d84 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2d6e:	2350      	movs	r3, #80	; 0x50
    2d70:	4a07      	ldr	r2, [pc, #28]	; (2d90 <system_clock_source_get_hz+0x80>)
    2d72:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2d74:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2d76:	075b      	lsls	r3, r3, #29
    2d78:	d504      	bpl.n	2d84 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2d7a:	4b04      	ldr	r3, [pc, #16]	; (2d8c <system_clock_source_get_hz+0x7c>)
    2d7c:	68d8      	ldr	r0, [r3, #12]
    2d7e:	e001      	b.n	2d84 <system_clock_source_get_hz+0x74>
		return 32768UL;
    2d80:	2080      	movs	r0, #128	; 0x80
    2d82:	0200      	lsls	r0, r0, #8
	}
}
    2d84:	bd10      	pop	{r4, pc}
    2d86:	46c0      	nop			; (mov r8, r8)
    2d88:	00009360 	.word	0x00009360
    2d8c:	20000220 	.word	0x20000220
    2d90:	40000800 	.word	0x40000800
    2d94:	007a1200 	.word	0x007a1200
    2d98:	02dc6c00 	.word	0x02dc6c00
    2d9c:	00003171 	.word	0x00003171

00002da0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2da0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2da2:	490c      	ldr	r1, [pc, #48]	; (2dd4 <system_clock_source_osc8m_set_config+0x34>)
    2da4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2da6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2da8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2daa:	7840      	ldrb	r0, [r0, #1]
    2dac:	2201      	movs	r2, #1
    2dae:	4010      	ands	r0, r2
    2db0:	0180      	lsls	r0, r0, #6
    2db2:	2640      	movs	r6, #64	; 0x40
    2db4:	43b3      	bics	r3, r6
    2db6:	4303      	orrs	r3, r0
    2db8:	402a      	ands	r2, r5
    2dba:	01d2      	lsls	r2, r2, #7
    2dbc:	2080      	movs	r0, #128	; 0x80
    2dbe:	4383      	bics	r3, r0
    2dc0:	4313      	orrs	r3, r2
    2dc2:	2203      	movs	r2, #3
    2dc4:	4022      	ands	r2, r4
    2dc6:	0212      	lsls	r2, r2, #8
    2dc8:	4803      	ldr	r0, [pc, #12]	; (2dd8 <system_clock_source_osc8m_set_config+0x38>)
    2dca:	4003      	ands	r3, r0
    2dcc:	4313      	orrs	r3, r2
    2dce:	620b      	str	r3, [r1, #32]
}
    2dd0:	bd70      	pop	{r4, r5, r6, pc}
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	40000800 	.word	0x40000800
    2dd8:	fffffcff 	.word	0xfffffcff

00002ddc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2ddc:	2808      	cmp	r0, #8
    2dde:	d803      	bhi.n	2de8 <system_clock_source_enable+0xc>
    2de0:	0080      	lsls	r0, r0, #2
    2de2:	4b25      	ldr	r3, [pc, #148]	; (2e78 <system_clock_source_enable+0x9c>)
    2de4:	581b      	ldr	r3, [r3, r0]
    2de6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2de8:	2017      	movs	r0, #23
    2dea:	e044      	b.n	2e76 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2dec:	4a23      	ldr	r2, [pc, #140]	; (2e7c <system_clock_source_enable+0xa0>)
    2dee:	6a13      	ldr	r3, [r2, #32]
    2df0:	2102      	movs	r1, #2
    2df2:	430b      	orrs	r3, r1
    2df4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2df6:	2000      	movs	r0, #0
    2df8:	e03d      	b.n	2e76 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2dfa:	4a20      	ldr	r2, [pc, #128]	; (2e7c <system_clock_source_enable+0xa0>)
    2dfc:	6993      	ldr	r3, [r2, #24]
    2dfe:	2102      	movs	r1, #2
    2e00:	430b      	orrs	r3, r1
    2e02:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2e04:	2000      	movs	r0, #0
		break;
    2e06:	e036      	b.n	2e76 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2e08:	4a1c      	ldr	r2, [pc, #112]	; (2e7c <system_clock_source_enable+0xa0>)
    2e0a:	8a13      	ldrh	r3, [r2, #16]
    2e0c:	2102      	movs	r1, #2
    2e0e:	430b      	orrs	r3, r1
    2e10:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2e12:	2000      	movs	r0, #0
		break;
    2e14:	e02f      	b.n	2e76 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2e16:	4a19      	ldr	r2, [pc, #100]	; (2e7c <system_clock_source_enable+0xa0>)
    2e18:	8a93      	ldrh	r3, [r2, #20]
    2e1a:	2102      	movs	r1, #2
    2e1c:	430b      	orrs	r3, r1
    2e1e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2e20:	2000      	movs	r0, #0
		break;
    2e22:	e028      	b.n	2e76 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2e24:	4916      	ldr	r1, [pc, #88]	; (2e80 <system_clock_source_enable+0xa4>)
    2e26:	680b      	ldr	r3, [r1, #0]
    2e28:	2202      	movs	r2, #2
    2e2a:	4313      	orrs	r3, r2
    2e2c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2e2e:	4b13      	ldr	r3, [pc, #76]	; (2e7c <system_clock_source_enable+0xa0>)
    2e30:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2e32:	0019      	movs	r1, r3
    2e34:	320e      	adds	r2, #14
    2e36:	68cb      	ldr	r3, [r1, #12]
    2e38:	421a      	tst	r2, r3
    2e3a:	d0fc      	beq.n	2e36 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2e3c:	4a10      	ldr	r2, [pc, #64]	; (2e80 <system_clock_source_enable+0xa4>)
    2e3e:	6891      	ldr	r1, [r2, #8]
    2e40:	4b0e      	ldr	r3, [pc, #56]	; (2e7c <system_clock_source_enable+0xa0>)
    2e42:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2e44:	6852      	ldr	r2, [r2, #4]
    2e46:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2e48:	2200      	movs	r2, #0
    2e4a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2e4c:	0019      	movs	r1, r3
    2e4e:	3210      	adds	r2, #16
    2e50:	68cb      	ldr	r3, [r1, #12]
    2e52:	421a      	tst	r2, r3
    2e54:	d0fc      	beq.n	2e50 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2e56:	4b0a      	ldr	r3, [pc, #40]	; (2e80 <system_clock_source_enable+0xa4>)
    2e58:	681b      	ldr	r3, [r3, #0]
    2e5a:	b29b      	uxth	r3, r3
    2e5c:	4a07      	ldr	r2, [pc, #28]	; (2e7c <system_clock_source_enable+0xa0>)
    2e5e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2e60:	2000      	movs	r0, #0
    2e62:	e008      	b.n	2e76 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2e64:	4905      	ldr	r1, [pc, #20]	; (2e7c <system_clock_source_enable+0xa0>)
    2e66:	2244      	movs	r2, #68	; 0x44
    2e68:	5c8b      	ldrb	r3, [r1, r2]
    2e6a:	2002      	movs	r0, #2
    2e6c:	4303      	orrs	r3, r0
    2e6e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2e70:	2000      	movs	r0, #0
		break;
    2e72:	e000      	b.n	2e76 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2e74:	2000      	movs	r0, #0
}
    2e76:	4770      	bx	lr
    2e78:	00009384 	.word	0x00009384
    2e7c:	40000800 	.word	0x40000800
    2e80:	20000220 	.word	0x20000220

00002e84 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2e84:	b530      	push	{r4, r5, lr}
    2e86:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2e88:	22c2      	movs	r2, #194	; 0xc2
    2e8a:	00d2      	lsls	r2, r2, #3
    2e8c:	4b1a      	ldr	r3, [pc, #104]	; (2ef8 <system_clock_init+0x74>)
    2e8e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2e90:	4a1a      	ldr	r2, [pc, #104]	; (2efc <system_clock_init+0x78>)
    2e92:	6853      	ldr	r3, [r2, #4]
    2e94:	211e      	movs	r1, #30
    2e96:	438b      	bics	r3, r1
    2e98:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2e9a:	2301      	movs	r3, #1
    2e9c:	466a      	mov	r2, sp
    2e9e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2ea0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2ea2:	4d17      	ldr	r5, [pc, #92]	; (2f00 <system_clock_init+0x7c>)
    2ea4:	b2e0      	uxtb	r0, r4
    2ea6:	4669      	mov	r1, sp
    2ea8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2eaa:	3401      	adds	r4, #1
    2eac:	2c25      	cmp	r4, #37	; 0x25
    2eae:	d1f9      	bne.n	2ea4 <system_clock_init+0x20>
	config->run_in_standby  = false;
    2eb0:	a803      	add	r0, sp, #12
    2eb2:	2400      	movs	r4, #0
    2eb4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2eb6:	2501      	movs	r5, #1
    2eb8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2eba:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2ebc:	4b11      	ldr	r3, [pc, #68]	; (2f04 <system_clock_init+0x80>)
    2ebe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2ec0:	2006      	movs	r0, #6
    2ec2:	4b11      	ldr	r3, [pc, #68]	; (2f08 <system_clock_init+0x84>)
    2ec4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2ec6:	4b11      	ldr	r3, [pc, #68]	; (2f0c <system_clock_init+0x88>)
    2ec8:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    2eca:	4b11      	ldr	r3, [pc, #68]	; (2f10 <system_clock_init+0x8c>)
    2ecc:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2ece:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2ed0:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2ed2:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2ed4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    2ed6:	466b      	mov	r3, sp
    2ed8:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2eda:	2306      	movs	r3, #6
    2edc:	466a      	mov	r2, sp
    2ede:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    2ee0:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    2ee2:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2ee4:	4669      	mov	r1, sp
    2ee6:	2000      	movs	r0, #0
    2ee8:	4b0a      	ldr	r3, [pc, #40]	; (2f14 <system_clock_init+0x90>)
    2eea:	4798      	blx	r3
    2eec:	2000      	movs	r0, #0
    2eee:	4b0a      	ldr	r3, [pc, #40]	; (2f18 <system_clock_init+0x94>)
    2ef0:	4798      	blx	r3
#endif
}
    2ef2:	b005      	add	sp, #20
    2ef4:	bd30      	pop	{r4, r5, pc}
    2ef6:	46c0      	nop			; (mov r8, r8)
    2ef8:	40000800 	.word	0x40000800
    2efc:	41004000 	.word	0x41004000
    2f00:	00003155 	.word	0x00003155
    2f04:	00002da1 	.word	0x00002da1
    2f08:	00002ddd 	.word	0x00002ddd
    2f0c:	00002f1d 	.word	0x00002f1d
    2f10:	40000400 	.word	0x40000400
    2f14:	00002f41 	.word	0x00002f41
    2f18:	00002ff9 	.word	0x00002ff9

00002f1c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2f1c:	4a06      	ldr	r2, [pc, #24]	; (2f38 <system_gclk_init+0x1c>)
    2f1e:	6993      	ldr	r3, [r2, #24]
    2f20:	2108      	movs	r1, #8
    2f22:	430b      	orrs	r3, r1
    2f24:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2f26:	2201      	movs	r2, #1
    2f28:	4b04      	ldr	r3, [pc, #16]	; (2f3c <system_gclk_init+0x20>)
    2f2a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2f2c:	0019      	movs	r1, r3
    2f2e:	780b      	ldrb	r3, [r1, #0]
    2f30:	4213      	tst	r3, r2
    2f32:	d1fc      	bne.n	2f2e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2f34:	4770      	bx	lr
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	40000400 	.word	0x40000400
    2f3c:	40000c00 	.word	0x40000c00

00002f40 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2f40:	b570      	push	{r4, r5, r6, lr}
    2f42:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2f44:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2f46:	780d      	ldrb	r5, [r1, #0]
    2f48:	022d      	lsls	r5, r5, #8
    2f4a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2f4c:	784b      	ldrb	r3, [r1, #1]
    2f4e:	2b00      	cmp	r3, #0
    2f50:	d002      	beq.n	2f58 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2f52:	2380      	movs	r3, #128	; 0x80
    2f54:	02db      	lsls	r3, r3, #11
    2f56:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2f58:	7a4b      	ldrb	r3, [r1, #9]
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	d002      	beq.n	2f64 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2f5e:	2380      	movs	r3, #128	; 0x80
    2f60:	031b      	lsls	r3, r3, #12
    2f62:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2f64:	6848      	ldr	r0, [r1, #4]
    2f66:	2801      	cmp	r0, #1
    2f68:	d910      	bls.n	2f8c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2f6a:	1e43      	subs	r3, r0, #1
    2f6c:	4218      	tst	r0, r3
    2f6e:	d134      	bne.n	2fda <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2f70:	2802      	cmp	r0, #2
    2f72:	d930      	bls.n	2fd6 <system_gclk_gen_set_config+0x96>
    2f74:	2302      	movs	r3, #2
    2f76:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2f78:	3201      	adds	r2, #1
						mask <<= 1) {
    2f7a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2f7c:	4298      	cmp	r0, r3
    2f7e:	d8fb      	bhi.n	2f78 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2f80:	0212      	lsls	r2, r2, #8
    2f82:	4332      	orrs	r2, r6
    2f84:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2f86:	2380      	movs	r3, #128	; 0x80
    2f88:	035b      	lsls	r3, r3, #13
    2f8a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2f8c:	7a0b      	ldrb	r3, [r1, #8]
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d002      	beq.n	2f98 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2f92:	2380      	movs	r3, #128	; 0x80
    2f94:	039b      	lsls	r3, r3, #14
    2f96:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2f98:	4a13      	ldr	r2, [pc, #76]	; (2fe8 <system_gclk_gen_set_config+0xa8>)
    2f9a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2f9c:	b25b      	sxtb	r3, r3
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	dbfb      	blt.n	2f9a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2fa2:	4b12      	ldr	r3, [pc, #72]	; (2fec <system_gclk_gen_set_config+0xac>)
    2fa4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2fa6:	4b12      	ldr	r3, [pc, #72]	; (2ff0 <system_gclk_gen_set_config+0xb0>)
    2fa8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2faa:	4a0f      	ldr	r2, [pc, #60]	; (2fe8 <system_gclk_gen_set_config+0xa8>)
    2fac:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2fae:	b25b      	sxtb	r3, r3
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	dbfb      	blt.n	2fac <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2fb4:	4b0c      	ldr	r3, [pc, #48]	; (2fe8 <system_gclk_gen_set_config+0xa8>)
    2fb6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2fb8:	001a      	movs	r2, r3
    2fba:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2fbc:	b25b      	sxtb	r3, r3
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	dbfb      	blt.n	2fba <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2fc2:	4a09      	ldr	r2, [pc, #36]	; (2fe8 <system_gclk_gen_set_config+0xa8>)
    2fc4:	6853      	ldr	r3, [r2, #4]
    2fc6:	2180      	movs	r1, #128	; 0x80
    2fc8:	0249      	lsls	r1, r1, #9
    2fca:	400b      	ands	r3, r1
    2fcc:	431d      	orrs	r5, r3
    2fce:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2fd0:	4b08      	ldr	r3, [pc, #32]	; (2ff4 <system_gclk_gen_set_config+0xb4>)
    2fd2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2fd4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2fd6:	2200      	movs	r2, #0
    2fd8:	e7d2      	b.n	2f80 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2fda:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2fdc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2fde:	2380      	movs	r3, #128	; 0x80
    2fe0:	029b      	lsls	r3, r3, #10
    2fe2:	431d      	orrs	r5, r3
    2fe4:	e7d2      	b.n	2f8c <system_gclk_gen_set_config+0x4c>
    2fe6:	46c0      	nop			; (mov r8, r8)
    2fe8:	40000c00 	.word	0x40000c00
    2fec:	00002ca1 	.word	0x00002ca1
    2ff0:	40000c08 	.word	0x40000c08
    2ff4:	00002ce1 	.word	0x00002ce1

00002ff8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2ff8:	b510      	push	{r4, lr}
    2ffa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ffc:	4a0b      	ldr	r2, [pc, #44]	; (302c <system_gclk_gen_enable+0x34>)
    2ffe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3000:	b25b      	sxtb	r3, r3
    3002:	2b00      	cmp	r3, #0
    3004:	dbfb      	blt.n	2ffe <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3006:	4b0a      	ldr	r3, [pc, #40]	; (3030 <system_gclk_gen_enable+0x38>)
    3008:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    300a:	4b0a      	ldr	r3, [pc, #40]	; (3034 <system_gclk_gen_enable+0x3c>)
    300c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    300e:	4a07      	ldr	r2, [pc, #28]	; (302c <system_gclk_gen_enable+0x34>)
    3010:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3012:	b25b      	sxtb	r3, r3
    3014:	2b00      	cmp	r3, #0
    3016:	dbfb      	blt.n	3010 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3018:	4a04      	ldr	r2, [pc, #16]	; (302c <system_gclk_gen_enable+0x34>)
    301a:	6851      	ldr	r1, [r2, #4]
    301c:	2380      	movs	r3, #128	; 0x80
    301e:	025b      	lsls	r3, r3, #9
    3020:	430b      	orrs	r3, r1
    3022:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3024:	4b04      	ldr	r3, [pc, #16]	; (3038 <system_gclk_gen_enable+0x40>)
    3026:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3028:	bd10      	pop	{r4, pc}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	40000c00 	.word	0x40000c00
    3030:	00002ca1 	.word	0x00002ca1
    3034:	40000c04 	.word	0x40000c04
    3038:	00002ce1 	.word	0x00002ce1

0000303c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    303c:	b570      	push	{r4, r5, r6, lr}
    303e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3040:	4a1a      	ldr	r2, [pc, #104]	; (30ac <system_gclk_gen_get_hz+0x70>)
    3042:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3044:	b25b      	sxtb	r3, r3
    3046:	2b00      	cmp	r3, #0
    3048:	dbfb      	blt.n	3042 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    304a:	4b19      	ldr	r3, [pc, #100]	; (30b0 <system_gclk_gen_get_hz+0x74>)
    304c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    304e:	4b19      	ldr	r3, [pc, #100]	; (30b4 <system_gclk_gen_get_hz+0x78>)
    3050:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3052:	4a16      	ldr	r2, [pc, #88]	; (30ac <system_gclk_gen_get_hz+0x70>)
    3054:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3056:	b25b      	sxtb	r3, r3
    3058:	2b00      	cmp	r3, #0
    305a:	dbfb      	blt.n	3054 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    305c:	4e13      	ldr	r6, [pc, #76]	; (30ac <system_gclk_gen_get_hz+0x70>)
    305e:	6870      	ldr	r0, [r6, #4]
    3060:	04c0      	lsls	r0, r0, #19
    3062:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3064:	4b14      	ldr	r3, [pc, #80]	; (30b8 <system_gclk_gen_get_hz+0x7c>)
    3066:	4798      	blx	r3
    3068:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    306a:	4b12      	ldr	r3, [pc, #72]	; (30b4 <system_gclk_gen_get_hz+0x78>)
    306c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    306e:	6876      	ldr	r6, [r6, #4]
    3070:	02f6      	lsls	r6, r6, #11
    3072:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3074:	4b11      	ldr	r3, [pc, #68]	; (30bc <system_gclk_gen_get_hz+0x80>)
    3076:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3078:	4a0c      	ldr	r2, [pc, #48]	; (30ac <system_gclk_gen_get_hz+0x70>)
    307a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    307c:	b25b      	sxtb	r3, r3
    307e:	2b00      	cmp	r3, #0
    3080:	dbfb      	blt.n	307a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3082:	4b0a      	ldr	r3, [pc, #40]	; (30ac <system_gclk_gen_get_hz+0x70>)
    3084:	689c      	ldr	r4, [r3, #8]
    3086:	0224      	lsls	r4, r4, #8
    3088:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    308a:	4b0d      	ldr	r3, [pc, #52]	; (30c0 <system_gclk_gen_get_hz+0x84>)
    308c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    308e:	2e00      	cmp	r6, #0
    3090:	d107      	bne.n	30a2 <system_gclk_gen_get_hz+0x66>
    3092:	2c01      	cmp	r4, #1
    3094:	d907      	bls.n	30a6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3096:	0021      	movs	r1, r4
    3098:	0028      	movs	r0, r5
    309a:	4b0a      	ldr	r3, [pc, #40]	; (30c4 <system_gclk_gen_get_hz+0x88>)
    309c:	4798      	blx	r3
    309e:	0005      	movs	r5, r0
    30a0:	e001      	b.n	30a6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    30a2:	3401      	adds	r4, #1
    30a4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    30a6:	0028      	movs	r0, r5
    30a8:	bd70      	pop	{r4, r5, r6, pc}
    30aa:	46c0      	nop			; (mov r8, r8)
    30ac:	40000c00 	.word	0x40000c00
    30b0:	00002ca1 	.word	0x00002ca1
    30b4:	40000c04 	.word	0x40000c04
    30b8:	00002d11 	.word	0x00002d11
    30bc:	40000c08 	.word	0x40000c08
    30c0:	00002ce1 	.word	0x00002ce1
    30c4:	0000628d 	.word	0x0000628d

000030c8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    30c8:	b510      	push	{r4, lr}
    30ca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    30cc:	4b06      	ldr	r3, [pc, #24]	; (30e8 <system_gclk_chan_enable+0x20>)
    30ce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    30d0:	4b06      	ldr	r3, [pc, #24]	; (30ec <system_gclk_chan_enable+0x24>)
    30d2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    30d4:	4a06      	ldr	r2, [pc, #24]	; (30f0 <system_gclk_chan_enable+0x28>)
    30d6:	8853      	ldrh	r3, [r2, #2]
    30d8:	2180      	movs	r1, #128	; 0x80
    30da:	01c9      	lsls	r1, r1, #7
    30dc:	430b      	orrs	r3, r1
    30de:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    30e0:	4b04      	ldr	r3, [pc, #16]	; (30f4 <system_gclk_chan_enable+0x2c>)
    30e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    30e4:	bd10      	pop	{r4, pc}
    30e6:	46c0      	nop			; (mov r8, r8)
    30e8:	00002ca1 	.word	0x00002ca1
    30ec:	40000c02 	.word	0x40000c02
    30f0:	40000c00 	.word	0x40000c00
    30f4:	00002ce1 	.word	0x00002ce1

000030f8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    30f8:	b510      	push	{r4, lr}
    30fa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    30fc:	4b0f      	ldr	r3, [pc, #60]	; (313c <system_gclk_chan_disable+0x44>)
    30fe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3100:	4b0f      	ldr	r3, [pc, #60]	; (3140 <system_gclk_chan_disable+0x48>)
    3102:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3104:	4a0f      	ldr	r2, [pc, #60]	; (3144 <system_gclk_chan_disable+0x4c>)
    3106:	8853      	ldrh	r3, [r2, #2]
    3108:	051b      	lsls	r3, r3, #20
    310a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    310c:	8853      	ldrh	r3, [r2, #2]
    310e:	490e      	ldr	r1, [pc, #56]	; (3148 <system_gclk_chan_disable+0x50>)
    3110:	400b      	ands	r3, r1
    3112:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3114:	8853      	ldrh	r3, [r2, #2]
    3116:	490d      	ldr	r1, [pc, #52]	; (314c <system_gclk_chan_disable+0x54>)
    3118:	400b      	ands	r3, r1
    311a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    311c:	0011      	movs	r1, r2
    311e:	2280      	movs	r2, #128	; 0x80
    3120:	01d2      	lsls	r2, r2, #7
    3122:	884b      	ldrh	r3, [r1, #2]
    3124:	4213      	tst	r3, r2
    3126:	d1fc      	bne.n	3122 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3128:	4906      	ldr	r1, [pc, #24]	; (3144 <system_gclk_chan_disable+0x4c>)
    312a:	884a      	ldrh	r2, [r1, #2]
    312c:	0203      	lsls	r3, r0, #8
    312e:	4806      	ldr	r0, [pc, #24]	; (3148 <system_gclk_chan_disable+0x50>)
    3130:	4002      	ands	r2, r0
    3132:	4313      	orrs	r3, r2
    3134:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3136:	4b06      	ldr	r3, [pc, #24]	; (3150 <system_gclk_chan_disable+0x58>)
    3138:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    313a:	bd10      	pop	{r4, pc}
    313c:	00002ca1 	.word	0x00002ca1
    3140:	40000c02 	.word	0x40000c02
    3144:	40000c00 	.word	0x40000c00
    3148:	fffff0ff 	.word	0xfffff0ff
    314c:	ffffbfff 	.word	0xffffbfff
    3150:	00002ce1 	.word	0x00002ce1

00003154 <system_gclk_chan_set_config>:
{
    3154:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3156:	780c      	ldrb	r4, [r1, #0]
    3158:	0224      	lsls	r4, r4, #8
    315a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    315c:	4b02      	ldr	r3, [pc, #8]	; (3168 <system_gclk_chan_set_config+0x14>)
    315e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3160:	b2a4      	uxth	r4, r4
    3162:	4b02      	ldr	r3, [pc, #8]	; (316c <system_gclk_chan_set_config+0x18>)
    3164:	805c      	strh	r4, [r3, #2]
}
    3166:	bd10      	pop	{r4, pc}
    3168:	000030f9 	.word	0x000030f9
    316c:	40000c00 	.word	0x40000c00

00003170 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3170:	b510      	push	{r4, lr}
    3172:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3174:	4b06      	ldr	r3, [pc, #24]	; (3190 <system_gclk_chan_get_hz+0x20>)
    3176:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3178:	4b06      	ldr	r3, [pc, #24]	; (3194 <system_gclk_chan_get_hz+0x24>)
    317a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    317c:	4b06      	ldr	r3, [pc, #24]	; (3198 <system_gclk_chan_get_hz+0x28>)
    317e:	885c      	ldrh	r4, [r3, #2]
    3180:	0524      	lsls	r4, r4, #20
    3182:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3184:	4b05      	ldr	r3, [pc, #20]	; (319c <system_gclk_chan_get_hz+0x2c>)
    3186:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3188:	0020      	movs	r0, r4
    318a:	4b05      	ldr	r3, [pc, #20]	; (31a0 <system_gclk_chan_get_hz+0x30>)
    318c:	4798      	blx	r3
}
    318e:	bd10      	pop	{r4, pc}
    3190:	00002ca1 	.word	0x00002ca1
    3194:	40000c02 	.word	0x40000c02
    3198:	40000c00 	.word	0x40000c00
    319c:	00002ce1 	.word	0x00002ce1
    31a0:	0000303d 	.word	0x0000303d

000031a4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    31a4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    31a6:	78d3      	ldrb	r3, [r2, #3]
    31a8:	2b00      	cmp	r3, #0
    31aa:	d135      	bne.n	3218 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    31ac:	7813      	ldrb	r3, [r2, #0]
    31ae:	2b80      	cmp	r3, #128	; 0x80
    31b0:	d029      	beq.n	3206 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    31b2:	061b      	lsls	r3, r3, #24
    31b4:	2480      	movs	r4, #128	; 0x80
    31b6:	0264      	lsls	r4, r4, #9
    31b8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    31ba:	7854      	ldrb	r4, [r2, #1]
    31bc:	2502      	movs	r5, #2
    31be:	43ac      	bics	r4, r5
    31c0:	d106      	bne.n	31d0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    31c2:	7894      	ldrb	r4, [r2, #2]
    31c4:	2c00      	cmp	r4, #0
    31c6:	d120      	bne.n	320a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    31c8:	2480      	movs	r4, #128	; 0x80
    31ca:	02a4      	lsls	r4, r4, #10
    31cc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    31ce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    31d0:	7854      	ldrb	r4, [r2, #1]
    31d2:	3c01      	subs	r4, #1
    31d4:	2c01      	cmp	r4, #1
    31d6:	d91c      	bls.n	3212 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    31d8:	040d      	lsls	r5, r1, #16
    31da:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    31dc:	24a0      	movs	r4, #160	; 0xa0
    31de:	05e4      	lsls	r4, r4, #23
    31e0:	432c      	orrs	r4, r5
    31e2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31e4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    31e6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    31e8:	24d0      	movs	r4, #208	; 0xd0
    31ea:	0624      	lsls	r4, r4, #24
    31ec:	432c      	orrs	r4, r5
    31ee:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31f0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    31f2:	78d4      	ldrb	r4, [r2, #3]
    31f4:	2c00      	cmp	r4, #0
    31f6:	d122      	bne.n	323e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    31f8:	035b      	lsls	r3, r3, #13
    31fa:	d51c      	bpl.n	3236 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    31fc:	7893      	ldrb	r3, [r2, #2]
    31fe:	2b01      	cmp	r3, #1
    3200:	d01e      	beq.n	3240 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3202:	6141      	str	r1, [r0, #20]
    3204:	e017      	b.n	3236 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3206:	2300      	movs	r3, #0
    3208:	e7d7      	b.n	31ba <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    320a:	24c0      	movs	r4, #192	; 0xc0
    320c:	02e4      	lsls	r4, r4, #11
    320e:	4323      	orrs	r3, r4
    3210:	e7dd      	b.n	31ce <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3212:	4c0d      	ldr	r4, [pc, #52]	; (3248 <_system_pinmux_config+0xa4>)
    3214:	4023      	ands	r3, r4
    3216:	e7df      	b.n	31d8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3218:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    321a:	040c      	lsls	r4, r1, #16
    321c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    321e:	23a0      	movs	r3, #160	; 0xa0
    3220:	05db      	lsls	r3, r3, #23
    3222:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3224:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3226:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3228:	23d0      	movs	r3, #208	; 0xd0
    322a:	061b      	lsls	r3, r3, #24
    322c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    322e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3230:	78d3      	ldrb	r3, [r2, #3]
    3232:	2b00      	cmp	r3, #0
    3234:	d103      	bne.n	323e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3236:	7853      	ldrb	r3, [r2, #1]
    3238:	3b01      	subs	r3, #1
    323a:	2b01      	cmp	r3, #1
    323c:	d902      	bls.n	3244 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    323e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3240:	6181      	str	r1, [r0, #24]
    3242:	e7f8      	b.n	3236 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3244:	6081      	str	r1, [r0, #8]
}
    3246:	e7fa      	b.n	323e <_system_pinmux_config+0x9a>
    3248:	fffbffff 	.word	0xfffbffff

0000324c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    324c:	b510      	push	{r4, lr}
    324e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    3250:	09c1      	lsrs	r1, r0, #7
		return NULL;
    3252:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3254:	2900      	cmp	r1, #0
    3256:	d104      	bne.n	3262 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3258:	0943      	lsrs	r3, r0, #5
    325a:	01db      	lsls	r3, r3, #7
    325c:	4905      	ldr	r1, [pc, #20]	; (3274 <system_pinmux_pin_set_config+0x28>)
    325e:	468c      	mov	ip, r1
    3260:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3262:	241f      	movs	r4, #31
    3264:	4020      	ands	r0, r4
    3266:	2101      	movs	r1, #1
    3268:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    326a:	0018      	movs	r0, r3
    326c:	4b02      	ldr	r3, [pc, #8]	; (3278 <system_pinmux_pin_set_config+0x2c>)
    326e:	4798      	blx	r3
}
    3270:	bd10      	pop	{r4, pc}
    3272:	46c0      	nop			; (mov r8, r8)
    3274:	41004400 	.word	0x41004400
    3278:	000031a5 	.word	0x000031a5

0000327c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    327c:	4770      	bx	lr
	...

00003280 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3280:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3282:	4b05      	ldr	r3, [pc, #20]	; (3298 <system_init+0x18>)
    3284:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3286:	4b05      	ldr	r3, [pc, #20]	; (329c <system_init+0x1c>)
    3288:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    328a:	4b05      	ldr	r3, [pc, #20]	; (32a0 <system_init+0x20>)
    328c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    328e:	4b05      	ldr	r3, [pc, #20]	; (32a4 <system_init+0x24>)
    3290:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3292:	4b05      	ldr	r3, [pc, #20]	; (32a8 <system_init+0x28>)
    3294:	4798      	blx	r3
}
    3296:	bd10      	pop	{r4, pc}
    3298:	00002e85 	.word	0x00002e85
    329c:	00002c9d 	.word	0x00002c9d
    32a0:	0000327d 	.word	0x0000327d
    32a4:	0000327d 	.word	0x0000327d
    32a8:	0000327d 	.word	0x0000327d

000032ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    32ac:	e7fe      	b.n	32ac <Dummy_Handler>
	...

000032b0 <Reset_Handler>:
{
    32b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    32b2:	4a2a      	ldr	r2, [pc, #168]	; (335c <Reset_Handler+0xac>)
    32b4:	4b2a      	ldr	r3, [pc, #168]	; (3360 <Reset_Handler+0xb0>)
    32b6:	429a      	cmp	r2, r3
    32b8:	d011      	beq.n	32de <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    32ba:	001a      	movs	r2, r3
    32bc:	4b29      	ldr	r3, [pc, #164]	; (3364 <Reset_Handler+0xb4>)
    32be:	429a      	cmp	r2, r3
    32c0:	d20d      	bcs.n	32de <Reset_Handler+0x2e>
    32c2:	4a29      	ldr	r2, [pc, #164]	; (3368 <Reset_Handler+0xb8>)
    32c4:	3303      	adds	r3, #3
    32c6:	1a9b      	subs	r3, r3, r2
    32c8:	089b      	lsrs	r3, r3, #2
    32ca:	3301      	adds	r3, #1
    32cc:	009b      	lsls	r3, r3, #2
    32ce:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    32d0:	4823      	ldr	r0, [pc, #140]	; (3360 <Reset_Handler+0xb0>)
    32d2:	4922      	ldr	r1, [pc, #136]	; (335c <Reset_Handler+0xac>)
    32d4:	588c      	ldr	r4, [r1, r2]
    32d6:	5084      	str	r4, [r0, r2]
    32d8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    32da:	429a      	cmp	r2, r3
    32dc:	d1fa      	bne.n	32d4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    32de:	4a23      	ldr	r2, [pc, #140]	; (336c <Reset_Handler+0xbc>)
    32e0:	4b23      	ldr	r3, [pc, #140]	; (3370 <Reset_Handler+0xc0>)
    32e2:	429a      	cmp	r2, r3
    32e4:	d20a      	bcs.n	32fc <Reset_Handler+0x4c>
    32e6:	43d3      	mvns	r3, r2
    32e8:	4921      	ldr	r1, [pc, #132]	; (3370 <Reset_Handler+0xc0>)
    32ea:	185b      	adds	r3, r3, r1
    32ec:	2103      	movs	r1, #3
    32ee:	438b      	bics	r3, r1
    32f0:	3304      	adds	r3, #4
    32f2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    32f4:	2100      	movs	r1, #0
    32f6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    32f8:	4293      	cmp	r3, r2
    32fa:	d1fc      	bne.n	32f6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    32fc:	4a1d      	ldr	r2, [pc, #116]	; (3374 <Reset_Handler+0xc4>)
    32fe:	21ff      	movs	r1, #255	; 0xff
    3300:	4b1d      	ldr	r3, [pc, #116]	; (3378 <Reset_Handler+0xc8>)
    3302:	438b      	bics	r3, r1
    3304:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3306:	39fd      	subs	r1, #253	; 0xfd
    3308:	2390      	movs	r3, #144	; 0x90
    330a:	005b      	lsls	r3, r3, #1
    330c:	4a1b      	ldr	r2, [pc, #108]	; (337c <Reset_Handler+0xcc>)
    330e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3310:	4a1b      	ldr	r2, [pc, #108]	; (3380 <Reset_Handler+0xd0>)
    3312:	78d3      	ldrb	r3, [r2, #3]
    3314:	2503      	movs	r5, #3
    3316:	43ab      	bics	r3, r5
    3318:	2402      	movs	r4, #2
    331a:	4323      	orrs	r3, r4
    331c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    331e:	78d3      	ldrb	r3, [r2, #3]
    3320:	270c      	movs	r7, #12
    3322:	43bb      	bics	r3, r7
    3324:	2608      	movs	r6, #8
    3326:	4333      	orrs	r3, r6
    3328:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    332a:	4b16      	ldr	r3, [pc, #88]	; (3384 <Reset_Handler+0xd4>)
    332c:	7b98      	ldrb	r0, [r3, #14]
    332e:	2230      	movs	r2, #48	; 0x30
    3330:	4390      	bics	r0, r2
    3332:	2220      	movs	r2, #32
    3334:	4310      	orrs	r0, r2
    3336:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3338:	7b99      	ldrb	r1, [r3, #14]
    333a:	43b9      	bics	r1, r7
    333c:	4331      	orrs	r1, r6
    333e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3340:	7b9a      	ldrb	r2, [r3, #14]
    3342:	43aa      	bics	r2, r5
    3344:	4322      	orrs	r2, r4
    3346:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3348:	4a0f      	ldr	r2, [pc, #60]	; (3388 <Reset_Handler+0xd8>)
    334a:	6853      	ldr	r3, [r2, #4]
    334c:	2180      	movs	r1, #128	; 0x80
    334e:	430b      	orrs	r3, r1
    3350:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3352:	4b0e      	ldr	r3, [pc, #56]	; (338c <Reset_Handler+0xdc>)
    3354:	4798      	blx	r3
        main();
    3356:	4b0e      	ldr	r3, [pc, #56]	; (3390 <Reset_Handler+0xe0>)
    3358:	4798      	blx	r3
    335a:	e7fe      	b.n	335a <Reset_Handler+0xaa>
    335c:	00009820 	.word	0x00009820
    3360:	20000000 	.word	0x20000000
    3364:	200001dc 	.word	0x200001dc
    3368:	20000004 	.word	0x20000004
    336c:	200001dc 	.word	0x200001dc
    3370:	20000388 	.word	0x20000388
    3374:	e000ed00 	.word	0xe000ed00
    3378:	00000000 	.word	0x00000000
    337c:	41007000 	.word	0x41007000
    3380:	41005000 	.word	0x41005000
    3384:	41004800 	.word	0x41004800
    3388:	41004000 	.word	0x41004000
    338c:	00003641 	.word	0x00003641
    3390:	00003555 	.word	0x00003555

00003394 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3394:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3396:	4a06      	ldr	r2, [pc, #24]	; (33b0 <_sbrk+0x1c>)
    3398:	6812      	ldr	r2, [r2, #0]
    339a:	2a00      	cmp	r2, #0
    339c:	d004      	beq.n	33a8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    339e:	4a04      	ldr	r2, [pc, #16]	; (33b0 <_sbrk+0x1c>)
    33a0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    33a2:	18c3      	adds	r3, r0, r3
    33a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    33a6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    33a8:	4902      	ldr	r1, [pc, #8]	; (33b4 <_sbrk+0x20>)
    33aa:	4a01      	ldr	r2, [pc, #4]	; (33b0 <_sbrk+0x1c>)
    33ac:	6011      	str	r1, [r2, #0]
    33ae:	e7f6      	b.n	339e <_sbrk+0xa>
    33b0:	20000238 	.word	0x20000238
    33b4:	20002388 	.word	0x20002388

000033b8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    33b8:	2001      	movs	r0, #1
    33ba:	4240      	negs	r0, r0
    33bc:	4770      	bx	lr

000033be <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    33be:	2380      	movs	r3, #128	; 0x80
    33c0:	019b      	lsls	r3, r3, #6
    33c2:	604b      	str	r3, [r1, #4]

	return 0;
}
    33c4:	2000      	movs	r0, #0
    33c6:	4770      	bx	lr

000033c8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    33c8:	2001      	movs	r0, #1
    33ca:	4770      	bx	lr

000033cc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    33cc:	2000      	movs	r0, #0
    33ce:	4770      	bx	lr

000033d0 <processUserInput>:
 * stores user input in rx buffer read from serial
 *
 * @return  true if successful, false if error
 */
bool processUserInput(void)
{
    33d0:	b500      	push	{lr}
    33d2:	b083      	sub	sp, #12
	char singleCharInput;
	volatile enum status_code uartReadCode = usart_read_buffer_wait(&usart_instance, &singleCharInput, 1);
    33d4:	2201      	movs	r2, #1
    33d6:	466b      	mov	r3, sp
    33d8:	1dd9      	adds	r1, r3, #7
    33da:	482f      	ldr	r0, [pc, #188]	; (3498 <processUserInput+0xc8>)
    33dc:	4b2f      	ldr	r3, [pc, #188]	; (349c <processUserInput+0xcc>)
    33de:	4798      	blx	r3
    33e0:	466b      	mov	r3, sp
    33e2:	7198      	strb	r0, [r3, #6]
    33e4:	3306      	adds	r3, #6

	if (STATUS_OK != uartReadCode) {
    33e6:	781b      	ldrb	r3, [r3, #0]
		return false;
    33e8:	2000      	movs	r0, #0
	if (STATUS_OK != uartReadCode) {
    33ea:	2b00      	cmp	r3, #0
    33ec:	d121      	bne.n	3432 <processUserInput+0x62>
	}
	if((singleCharInput != BS && !numberCharsRead) || numberCharsRead) {
    33ee:	466b      	mov	r3, sp
    33f0:	3307      	adds	r3, #7
    33f2:	781b      	ldrb	r3, [r3, #0]
    33f4:	2b7f      	cmp	r3, #127	; 0x7f
    33f6:	d01e      	beq.n	3436 <processUserInput+0x66>
		if (STATUS_OK == uartReadCode) {
    33f8:	466b      	mov	r3, sp
    33fa:	3306      	adds	r3, #6
    33fc:	781b      	ldrb	r3, [r3, #0]
    33fe:	2b00      	cmp	r3, #0
    3400:	d02d      	beq.n	345e <processUserInput+0x8e>
			volatile enum status_code uartWriteCode = usart_write_buffer_wait(&usart_instance, &singleCharInput, 1);
		}
	}
	

	switch (singleCharInput) {
    3402:	466b      	mov	r3, sp
    3404:	3307      	adds	r3, #7
    3406:	781b      	ldrb	r3, [r3, #0]
    3408:	2b0d      	cmp	r3, #13
    340a:	d031      	beq.n	3470 <processUserInput+0xa0>
    340c:	2b7f      	cmp	r3, #127	; 0x7f
    340e:	d03c      	beq.n	348a <processUserInput+0xba>
    3410:	2b0a      	cmp	r3, #10
    3412:	d02d      	beq.n	3470 <processUserInput+0xa0>
		// rx_buffer[--numberCharsRead] = NULLCHAR;
		break;
	}
	default: {
		/// All other cases
		if (numberCharsRead < MAX_RX_BUFFER_LENGTH)
    3414:	4a22      	ldr	r2, [pc, #136]	; (34a0 <processUserInput+0xd0>)
    3416:	7812      	ldrb	r2, [r2, #0]
    3418:	2a63      	cmp	r2, #99	; 0x63
    341a:	d804      	bhi.n	3426 <processUserInput+0x56>
			rx_buffer[numberCharsRead++] = singleCharInput;
    341c:	1c50      	adds	r0, r2, #1
    341e:	4920      	ldr	r1, [pc, #128]	; (34a0 <processUserInput+0xd0>)
    3420:	7008      	strb	r0, [r1, #0]
    3422:	4920      	ldr	r1, [pc, #128]	; (34a4 <processUserInput+0xd4>)
    3424:	548b      	strb	r3, [r1, r2]
		rx_buffer[numberCharsRead] = NULLCHAR;  ///< String read protection
    3426:	4b1e      	ldr	r3, [pc, #120]	; (34a0 <processUserInput+0xd0>)
    3428:	781b      	ldrb	r3, [r3, #0]
    342a:	2100      	movs	r1, #0
    342c:	4a1d      	ldr	r2, [pc, #116]	; (34a4 <processUserInput+0xd4>)
    342e:	54d1      	strb	r1, [r2, r3]
		break;
	}
	}
	return false;
    3430:	2000      	movs	r0, #0
}
    3432:	b003      	add	sp, #12
    3434:	bd00      	pop	{pc}
	if((singleCharInput != BS && !numberCharsRead) || numberCharsRead) {
    3436:	4b1a      	ldr	r3, [pc, #104]	; (34a0 <processUserInput+0xd0>)
    3438:	781b      	ldrb	r3, [r3, #0]
    343a:	2b00      	cmp	r3, #0
    343c:	d0f9      	beq.n	3432 <processUserInput+0x62>
		if (STATUS_OK == uartReadCode) {
    343e:	466b      	mov	r3, sp
    3440:	3306      	adds	r3, #6
    3442:	781b      	ldrb	r3, [r3, #0]
    3444:	2b00      	cmp	r3, #0
    3446:	d00a      	beq.n	345e <processUserInput+0x8e>
		if(!numberCharsRead) //no characters written
    3448:	4b15      	ldr	r3, [pc, #84]	; (34a0 <processUserInput+0xd0>)
    344a:	781b      	ldrb	r3, [r3, #0]
		numberCharsRead--;
    344c:	3b01      	subs	r3, #1
    344e:	b2db      	uxtb	r3, r3
    3450:	4a13      	ldr	r2, [pc, #76]	; (34a0 <processUserInput+0xd0>)
    3452:	7013      	strb	r3, [r2, #0]
		rx_buffer[numberCharsRead] = NULLCHAR;
    3454:	2100      	movs	r1, #0
    3456:	4a13      	ldr	r2, [pc, #76]	; (34a4 <processUserInput+0xd4>)
    3458:	54d1      	strb	r1, [r2, r3]
	return false;
    345a:	2000      	movs	r0, #0
		break;
    345c:	e7e9      	b.n	3432 <processUserInput+0x62>
			volatile enum status_code uartWriteCode = usart_write_buffer_wait(&usart_instance, &singleCharInput, 1);
    345e:	2201      	movs	r2, #1
    3460:	466b      	mov	r3, sp
    3462:	1dd9      	adds	r1, r3, #7
    3464:	480c      	ldr	r0, [pc, #48]	; (3498 <processUserInput+0xc8>)
    3466:	4b10      	ldr	r3, [pc, #64]	; (34a8 <processUserInput+0xd8>)
    3468:	4798      	blx	r3
    346a:	466b      	mov	r3, sp
    346c:	7158      	strb	r0, [r3, #5]
    346e:	e7c8      	b.n	3402 <processUserInput+0x32>
		rx_buffer[numberCharsRead] = NULLCHAR;
    3470:	4b0b      	ldr	r3, [pc, #44]	; (34a0 <processUserInput+0xd0>)
    3472:	781b      	ldrb	r3, [r3, #0]
    3474:	2100      	movs	r1, #0
    3476:	4a0b      	ldr	r2, [pc, #44]	; (34a4 <processUserInput+0xd4>)
    3478:	54d1      	strb	r1, [r2, r3]
	return false;
    347a:	2000      	movs	r0, #0
		if (numberCharsRead > 0) {
    347c:	2b00      	cmp	r3, #0
    347e:	d0d8      	beq.n	3432 <processUserInput+0x62>
			numberCharsRead = 0;
    3480:	2200      	movs	r2, #0
    3482:	4b07      	ldr	r3, [pc, #28]	; (34a0 <processUserInput+0xd0>)
    3484:	701a      	strb	r2, [r3, #0]
			return true;
    3486:	3001      	adds	r0, #1
    3488:	e7d3      	b.n	3432 <processUserInput+0x62>
		if(!numberCharsRead) //no characters written
    348a:	4b05      	ldr	r3, [pc, #20]	; (34a0 <processUserInput+0xd0>)
    348c:	781b      	ldrb	r3, [r3, #0]
    348e:	2b00      	cmp	r3, #0
    3490:	d1dc      	bne.n	344c <processUserInput+0x7c>
	return false;
    3492:	2000      	movs	r0, #0
    3494:	e7cd      	b.n	3432 <processUserInput+0x62>
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	200002e4 	.word	0x200002e4
    349c:	00002571 	.word	0x00002571
    34a0:	20000380 	.word	0x20000380
    34a4:	2000031c 	.word	0x2000031c
    34a8:	000024b1 	.word	0x000024b1

000034ac <make_lowercase>:
/**
 * helper function to set string to all lowercase
 * @param str string to make all lowercase
 */
void make_lowercase(char **str)
{
    34ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34ae:	46ce      	mov	lr, r9
    34b0:	4647      	mov	r7, r8
    34b2:	b580      	push	{r7, lr}
    34b4:	0007      	movs	r7, r0
	int i = 0;

	while (*(*(str) + i) != 0) {
    34b6:	6804      	ldr	r4, [r0, #0]
    34b8:	7825      	ldrb	r5, [r4, #0]
    34ba:	2d00      	cmp	r5, #0
    34bc:	d016      	beq.n	34ec <make_lowercase+0x40>
    34be:	2600      	movs	r6, #0
		*(*(str) + i) = tolower(*(*str + i));
    34c0:	4b0c      	ldr	r3, [pc, #48]	; (34f4 <make_lowercase+0x48>)
    34c2:	4699      	mov	r9, r3
    34c4:	2303      	movs	r3, #3
    34c6:	4698      	mov	r8, r3
    34c8:	e006      	b.n	34d8 <make_lowercase+0x2c>
    34ca:	7022      	strb	r2, [r4, #0]
		i++;
    34cc:	3601      	adds	r6, #1
	while (*(*(str) + i) != 0) {
    34ce:	683b      	ldr	r3, [r7, #0]
    34d0:	199c      	adds	r4, r3, r6
    34d2:	7825      	ldrb	r5, [r4, #0]
    34d4:	2d00      	cmp	r5, #0
    34d6:	d009      	beq.n	34ec <make_lowercase+0x40>
		*(*(str) + i) = tolower(*(*str + i));
    34d8:	47c8      	blx	r9
    34da:	1940      	adds	r0, r0, r5
    34dc:	7843      	ldrb	r3, [r0, #1]
    34de:	4642      	mov	r2, r8
    34e0:	4013      	ands	r3, r2
    34e2:	002a      	movs	r2, r5
    34e4:	2b01      	cmp	r3, #1
    34e6:	d1f0      	bne.n	34ca <make_lowercase+0x1e>
    34e8:	3220      	adds	r2, #32
    34ea:	e7ee      	b.n	34ca <make_lowercase+0x1e>
	}
}
    34ec:	bc0c      	pop	{r2, r3}
    34ee:	4690      	mov	r8, r2
    34f0:	4699      	mov	r9, r3
    34f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34f4:	00003691 	.word	0x00003691

000034f8 <fix_args>:

/**
 * fixes arguments and adds them to the argv buffer
 */
void fix_args()
{
    34f8:	b570      	push	{r4, r5, r6, lr}
    34fa:	b082      	sub	sp, #8
	char *p = strtok(rx_buffer, " "); /// NOTE: strtok destroys the input string
    34fc:	490e      	ldr	r1, [pc, #56]	; (3538 <fix_args+0x40>)
    34fe:	480f      	ldr	r0, [pc, #60]	; (353c <fix_args+0x44>)
    3500:	4b0f      	ldr	r3, [pc, #60]	; (3540 <fix_args+0x48>)
    3502:	4798      	blx	r3
    3504:	9001      	str	r0, [sp, #4]

	while (p != NULL) {
    3506:	2800      	cmp	r0, #0
    3508:	d013      	beq.n	3532 <fix_args+0x3a>
		make_lowercase(&p);
    350a:	4e0e      	ldr	r6, [pc, #56]	; (3544 <fix_args+0x4c>)
		strcpy(argv[argc++], p);
    350c:	4c0e      	ldr	r4, [pc, #56]	; (3548 <fix_args+0x50>)
    350e:	4d0f      	ldr	r5, [pc, #60]	; (354c <fix_args+0x54>)
		make_lowercase(&p);
    3510:	a801      	add	r0, sp, #4
    3512:	47b0      	blx	r6
		strcpy(argv[argc++], p);
    3514:	7823      	ldrb	r3, [r4, #0]
    3516:	1c5a      	adds	r2, r3, #1
    3518:	7022      	strb	r2, [r4, #0]
    351a:	009b      	lsls	r3, r3, #2
    351c:	5958      	ldr	r0, [r3, r5]
    351e:	9901      	ldr	r1, [sp, #4]
    3520:	4b0b      	ldr	r3, [pc, #44]	; (3550 <fix_args+0x58>)
    3522:	4798      	blx	r3
		p = strtok(NULL, " ");
    3524:	4904      	ldr	r1, [pc, #16]	; (3538 <fix_args+0x40>)
    3526:	2000      	movs	r0, #0
    3528:	4b05      	ldr	r3, [pc, #20]	; (3540 <fix_args+0x48>)
    352a:	4798      	blx	r3
    352c:	9001      	str	r0, [sp, #4]
	while (p != NULL) {
    352e:	2800      	cmp	r0, #0
    3530:	d1ee      	bne.n	3510 <fix_args+0x18>
	}
}
    3532:	b002      	add	sp, #8
    3534:	bd70      	pop	{r4, r5, r6, pc}
    3536:	46c0      	nop			; (mov r8, r8)
    3538:	000093a8 	.word	0x000093a8
    353c:	2000031c 	.word	0x2000031c
    3540:	00004405 	.word	0x00004405
    3544:	000034ad 	.word	0x000034ad
    3548:	20000318 	.word	0x20000318
    354c:	200002d4 	.word	0x200002d4
    3550:	000043e5 	.word	0x000043e5

00003554 <main>:


int main(void)
{
    3554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	system_init();
    3556:	4b21      	ldr	r3, [pc, #132]	; (35dc <main+0x88>)
    3558:	4798      	blx	r3
	cpu_irq_enable();
    355a:	2201      	movs	r2, #1
    355c:	4b20      	ldr	r3, [pc, #128]	; (35e0 <main+0x8c>)
    355e:	701a      	strb	r2, [r3, #0]
    3560:	f3bf 8f5f 	dmb	sy
    3564:	b662      	cpsie	i
	system_interrupt_enable_global();
	delay_init();
    3566:	4b1f      	ldr	r3, [pc, #124]	; (35e4 <main+0x90>)
    3568:	4798      	blx	r3
	configure_usart();
    356a:	4b1f      	ldr	r3, [pc, #124]	; (35e8 <main+0x94>)
    356c:	4798      	blx	r3
	configure_i2c_tsl2561(ADDR_FLOAT);
    356e:	2039      	movs	r0, #57	; 0x39
    3570:	4b1e      	ldr	r3, [pc, #120]	; (35ec <main+0x98>)
    3572:	4798      	blx	r3
	configure_i2c_hdc();
    3574:	4b1e      	ldr	r3, [pc, #120]	; (35f0 <main+0x9c>)
    3576:	4798      	blx	r3
	set_resolution(FOURTEEN_BIT_RESOLUTION, FOURTEEN_BIT_RESOLUTION);
    3578:	2102      	movs	r1, #2
    357a:	2002      	movs	r0, #2
    357c:	4b1d      	ldr	r3, [pc, #116]	; (35f4 <main+0xa0>)
    357e:	4798      	blx	r3
	
	uint16_t hdc_dev = get_hdc_device_id();
    3580:	4b1d      	ldr	r3, [pc, #116]	; (35f8 <main+0xa4>)
    3582:	4798      	blx	r3
    3584:	0004      	movs	r4, r0
	uint16_t hdc_manu = get_hdc_manufacturer_id();
    3586:	4b1d      	ldr	r3, [pc, #116]	; (35fc <main+0xa8>)
    3588:	4798      	blx	r3
    358a:	0002      	movs	r2, r0
	printf("dev id: 0x%02x\r\n manu id: 0x%02x\r\n", hdc_dev, hdc_manu);
    358c:	0021      	movs	r1, r4
    358e:	481c      	ldr	r0, [pc, #112]	; (3600 <main+0xac>)
    3590:	4b1c      	ldr	r3, [pc, #112]	; (3604 <main+0xb0>)
    3592:	4798      	blx	r3
    3594:	2400      	movs	r4, #0
	for (int i = 0; i < MAX_ARGS; i++)
		argv[i] = malloc(sizeof(char) * MAX_ARG_LENGTH);
    3596:	4e1c      	ldr	r6, [pc, #112]	; (3608 <main+0xb4>)
    3598:	4d1c      	ldr	r5, [pc, #112]	; (360c <main+0xb8>)
    359a:	2019      	movs	r0, #25
    359c:	47b0      	blx	r6
    359e:	5128      	str	r0, [r5, r4]
    35a0:	3404      	adds	r4, #4
	for (int i = 0; i < MAX_ARGS; i++)
    35a2:	2c10      	cmp	r4, #16
    35a4:	d1f9      	bne.n	359a <main+0x46>

	//TODO: print version information
	printf("\r\nWelcome to the Evergreen CLI.\r\n");
    35a6:	481a      	ldr	r0, [pc, #104]	; (3610 <main+0xbc>)
    35a8:	4b1a      	ldr	r3, [pc, #104]	; (3614 <main+0xc0>)
    35aa:	4798      	blx	r3
	printf("> ");
    35ac:	481a      	ldr	r0, [pc, #104]	; (3618 <main+0xc4>)
    35ae:	4b15      	ldr	r3, [pc, #84]	; (3604 <main+0xb0>)
    35b0:	4798      	blx	r3
	while (1) {
 			bool commandEntered = processUserInput();
    35b2:	4c1a      	ldr	r4, [pc, #104]	; (361c <main+0xc8>)
 			if (commandEntered) {
				printf("> %s\r\n", rx_buffer);
    35b4:	4e1a      	ldr	r6, [pc, #104]	; (3620 <main+0xcc>)
 			bool commandEntered = processUserInput();
    35b6:	47a0      	blx	r4
 			if (commandEntered) {
    35b8:	2800      	cmp	r0, #0
    35ba:	d0fc      	beq.n	35b6 <main+0x62>
				printf("> %s\r\n", rx_buffer);
    35bc:	0031      	movs	r1, r6
    35be:	4819      	ldr	r0, [pc, #100]	; (3624 <main+0xd0>)
    35c0:	4f10      	ldr	r7, [pc, #64]	; (3604 <main+0xb0>)
    35c2:	47b8      	blx	r7
 				fix_args();
    35c4:	4b18      	ldr	r3, [pc, #96]	; (3628 <main+0xd4>)
    35c6:	4798      	blx	r3
 				input_handle(argc, argv); //fix
    35c8:	4d18      	ldr	r5, [pc, #96]	; (362c <main+0xd8>)
    35ca:	7828      	ldrb	r0, [r5, #0]
    35cc:	490f      	ldr	r1, [pc, #60]	; (360c <main+0xb8>)
    35ce:	4b18      	ldr	r3, [pc, #96]	; (3630 <main+0xdc>)
    35d0:	4798      	blx	r3
 				argc = 0;
    35d2:	2300      	movs	r3, #0
    35d4:	702b      	strb	r3, [r5, #0]
 				printf("> ");
    35d6:	4810      	ldr	r0, [pc, #64]	; (3618 <main+0xc4>)
    35d8:	47b8      	blx	r7
    35da:	e7ec      	b.n	35b6 <main+0x62>
    35dc:	00003281 	.word	0x00003281
    35e0:	20000008 	.word	0x20000008
    35e4:	00002be1 	.word	0x00002be1
    35e8:	00000159 	.word	0x00000159
    35ec:	00000489 	.word	0x00000489
    35f0:	0000024d 	.word	0x0000024d
    35f4:	000002f5 	.word	0x000002f5
    35f8:	00000409 	.word	0x00000409
    35fc:	000003f9 	.word	0x000003f9
    3600:	000093ac 	.word	0x000093ac
    3604:	00004139 	.word	0x00004139
    3608:	000036ad 	.word	0x000036ad
    360c:	200002d4 	.word	0x200002d4
    3610:	000093d0 	.word	0x000093d0
    3614:	0000422d 	.word	0x0000422d
    3618:	000093f4 	.word	0x000093f4
    361c:	000033d1 	.word	0x000033d1
    3620:	2000031c 	.word	0x2000031c
    3624:	000093f8 	.word	0x000093f8
    3628:	000034f9 	.word	0x000034f9
    362c:	20000318 	.word	0x20000318
    3630:	00001b59 	.word	0x00001b59

00003634 <atoi>:
    3634:	b510      	push	{r4, lr}
    3636:	220a      	movs	r2, #10
    3638:	2100      	movs	r1, #0
    363a:	f000 ffbf 	bl	45bc <strtol>
    363e:	bd10      	pop	{r4, pc}

00003640 <__libc_init_array>:
    3640:	b570      	push	{r4, r5, r6, lr}
    3642:	2600      	movs	r6, #0
    3644:	4d0c      	ldr	r5, [pc, #48]	; (3678 <__libc_init_array+0x38>)
    3646:	4c0d      	ldr	r4, [pc, #52]	; (367c <__libc_init_array+0x3c>)
    3648:	1b64      	subs	r4, r4, r5
    364a:	10a4      	asrs	r4, r4, #2
    364c:	42a6      	cmp	r6, r4
    364e:	d109      	bne.n	3664 <__libc_init_array+0x24>
    3650:	2600      	movs	r6, #0
    3652:	f006 f8d5 	bl	9800 <_init>
    3656:	4d0a      	ldr	r5, [pc, #40]	; (3680 <__libc_init_array+0x40>)
    3658:	4c0a      	ldr	r4, [pc, #40]	; (3684 <__libc_init_array+0x44>)
    365a:	1b64      	subs	r4, r4, r5
    365c:	10a4      	asrs	r4, r4, #2
    365e:	42a6      	cmp	r6, r4
    3660:	d105      	bne.n	366e <__libc_init_array+0x2e>
    3662:	bd70      	pop	{r4, r5, r6, pc}
    3664:	00b3      	lsls	r3, r6, #2
    3666:	58eb      	ldr	r3, [r5, r3]
    3668:	4798      	blx	r3
    366a:	3601      	adds	r6, #1
    366c:	e7ee      	b.n	364c <__libc_init_array+0xc>
    366e:	00b3      	lsls	r3, r6, #2
    3670:	58eb      	ldr	r3, [r5, r3]
    3672:	4798      	blx	r3
    3674:	3601      	adds	r6, #1
    3676:	e7f2      	b.n	365e <__libc_init_array+0x1e>
    3678:	0000980c 	.word	0x0000980c
    367c:	0000980c 	.word	0x0000980c
    3680:	0000980c 	.word	0x0000980c
    3684:	00009810 	.word	0x00009810

00003688 <__locale_ctype_ptr_l>:
    3688:	30ec      	adds	r0, #236	; 0xec
    368a:	6800      	ldr	r0, [r0, #0]
    368c:	4770      	bx	lr
	...

00003690 <__locale_ctype_ptr>:
    3690:	4b04      	ldr	r3, [pc, #16]	; (36a4 <__locale_ctype_ptr+0x14>)
    3692:	681b      	ldr	r3, [r3, #0]
    3694:	6a1b      	ldr	r3, [r3, #32]
    3696:	2b00      	cmp	r3, #0
    3698:	d100      	bne.n	369c <__locale_ctype_ptr+0xc>
    369a:	4b03      	ldr	r3, [pc, #12]	; (36a8 <__locale_ctype_ptr+0x18>)
    369c:	33ec      	adds	r3, #236	; 0xec
    369e:	6818      	ldr	r0, [r3, #0]
    36a0:	4770      	bx	lr
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	2000000c 	.word	0x2000000c
    36a8:	20000070 	.word	0x20000070

000036ac <malloc>:
    36ac:	b510      	push	{r4, lr}
    36ae:	4b03      	ldr	r3, [pc, #12]	; (36bc <malloc+0x10>)
    36b0:	0001      	movs	r1, r0
    36b2:	6818      	ldr	r0, [r3, #0]
    36b4:	f000 f872 	bl	379c <_malloc_r>
    36b8:	bd10      	pop	{r4, pc}
    36ba:	46c0      	nop			; (mov r8, r8)
    36bc:	2000000c 	.word	0x2000000c

000036c0 <__ascii_mbtowc>:
    36c0:	b082      	sub	sp, #8
    36c2:	2900      	cmp	r1, #0
    36c4:	d100      	bne.n	36c8 <__ascii_mbtowc+0x8>
    36c6:	a901      	add	r1, sp, #4
    36c8:	1e10      	subs	r0, r2, #0
    36ca:	d006      	beq.n	36da <__ascii_mbtowc+0x1a>
    36cc:	2b00      	cmp	r3, #0
    36ce:	d006      	beq.n	36de <__ascii_mbtowc+0x1e>
    36d0:	7813      	ldrb	r3, [r2, #0]
    36d2:	600b      	str	r3, [r1, #0]
    36d4:	7810      	ldrb	r0, [r2, #0]
    36d6:	1e43      	subs	r3, r0, #1
    36d8:	4198      	sbcs	r0, r3
    36da:	b002      	add	sp, #8
    36dc:	4770      	bx	lr
    36de:	2002      	movs	r0, #2
    36e0:	4240      	negs	r0, r0
    36e2:	e7fa      	b.n	36da <__ascii_mbtowc+0x1a>

000036e4 <memcpy>:
    36e4:	2300      	movs	r3, #0
    36e6:	b510      	push	{r4, lr}
    36e8:	429a      	cmp	r2, r3
    36ea:	d100      	bne.n	36ee <memcpy+0xa>
    36ec:	bd10      	pop	{r4, pc}
    36ee:	5ccc      	ldrb	r4, [r1, r3]
    36f0:	54c4      	strb	r4, [r0, r3]
    36f2:	3301      	adds	r3, #1
    36f4:	e7f8      	b.n	36e8 <memcpy+0x4>

000036f6 <memset>:
    36f6:	0003      	movs	r3, r0
    36f8:	1882      	adds	r2, r0, r2
    36fa:	4293      	cmp	r3, r2
    36fc:	d100      	bne.n	3700 <memset+0xa>
    36fe:	4770      	bx	lr
    3700:	7019      	strb	r1, [r3, #0]
    3702:	3301      	adds	r3, #1
    3704:	e7f9      	b.n	36fa <memset+0x4>
	...

00003708 <_free_r>:
    3708:	b570      	push	{r4, r5, r6, lr}
    370a:	0005      	movs	r5, r0
    370c:	2900      	cmp	r1, #0
    370e:	d010      	beq.n	3732 <_free_r+0x2a>
    3710:	1f0c      	subs	r4, r1, #4
    3712:	6823      	ldr	r3, [r4, #0]
    3714:	2b00      	cmp	r3, #0
    3716:	da00      	bge.n	371a <_free_r+0x12>
    3718:	18e4      	adds	r4, r4, r3
    371a:	0028      	movs	r0, r5
    371c:	f002 f8b7 	bl	588e <__malloc_lock>
    3720:	4a1d      	ldr	r2, [pc, #116]	; (3798 <_free_r+0x90>)
    3722:	6813      	ldr	r3, [r2, #0]
    3724:	2b00      	cmp	r3, #0
    3726:	d105      	bne.n	3734 <_free_r+0x2c>
    3728:	6063      	str	r3, [r4, #4]
    372a:	6014      	str	r4, [r2, #0]
    372c:	0028      	movs	r0, r5
    372e:	f002 f8af 	bl	5890 <__malloc_unlock>
    3732:	bd70      	pop	{r4, r5, r6, pc}
    3734:	42a3      	cmp	r3, r4
    3736:	d909      	bls.n	374c <_free_r+0x44>
    3738:	6821      	ldr	r1, [r4, #0]
    373a:	1860      	adds	r0, r4, r1
    373c:	4283      	cmp	r3, r0
    373e:	d1f3      	bne.n	3728 <_free_r+0x20>
    3740:	6818      	ldr	r0, [r3, #0]
    3742:	685b      	ldr	r3, [r3, #4]
    3744:	1841      	adds	r1, r0, r1
    3746:	6021      	str	r1, [r4, #0]
    3748:	e7ee      	b.n	3728 <_free_r+0x20>
    374a:	0013      	movs	r3, r2
    374c:	685a      	ldr	r2, [r3, #4]
    374e:	2a00      	cmp	r2, #0
    3750:	d001      	beq.n	3756 <_free_r+0x4e>
    3752:	42a2      	cmp	r2, r4
    3754:	d9f9      	bls.n	374a <_free_r+0x42>
    3756:	6819      	ldr	r1, [r3, #0]
    3758:	1858      	adds	r0, r3, r1
    375a:	42a0      	cmp	r0, r4
    375c:	d10b      	bne.n	3776 <_free_r+0x6e>
    375e:	6820      	ldr	r0, [r4, #0]
    3760:	1809      	adds	r1, r1, r0
    3762:	1858      	adds	r0, r3, r1
    3764:	6019      	str	r1, [r3, #0]
    3766:	4282      	cmp	r2, r0
    3768:	d1e0      	bne.n	372c <_free_r+0x24>
    376a:	6810      	ldr	r0, [r2, #0]
    376c:	6852      	ldr	r2, [r2, #4]
    376e:	1841      	adds	r1, r0, r1
    3770:	6019      	str	r1, [r3, #0]
    3772:	605a      	str	r2, [r3, #4]
    3774:	e7da      	b.n	372c <_free_r+0x24>
    3776:	42a0      	cmp	r0, r4
    3778:	d902      	bls.n	3780 <_free_r+0x78>
    377a:	230c      	movs	r3, #12
    377c:	602b      	str	r3, [r5, #0]
    377e:	e7d5      	b.n	372c <_free_r+0x24>
    3780:	6821      	ldr	r1, [r4, #0]
    3782:	1860      	adds	r0, r4, r1
    3784:	4282      	cmp	r2, r0
    3786:	d103      	bne.n	3790 <_free_r+0x88>
    3788:	6810      	ldr	r0, [r2, #0]
    378a:	6852      	ldr	r2, [r2, #4]
    378c:	1841      	adds	r1, r0, r1
    378e:	6021      	str	r1, [r4, #0]
    3790:	6062      	str	r2, [r4, #4]
    3792:	605c      	str	r4, [r3, #4]
    3794:	e7ca      	b.n	372c <_free_r+0x24>
    3796:	46c0      	nop			; (mov r8, r8)
    3798:	2000023c 	.word	0x2000023c

0000379c <_malloc_r>:
    379c:	2303      	movs	r3, #3
    379e:	b570      	push	{r4, r5, r6, lr}
    37a0:	1ccd      	adds	r5, r1, #3
    37a2:	439d      	bics	r5, r3
    37a4:	3508      	adds	r5, #8
    37a6:	0006      	movs	r6, r0
    37a8:	2d0c      	cmp	r5, #12
    37aa:	d21e      	bcs.n	37ea <_malloc_r+0x4e>
    37ac:	250c      	movs	r5, #12
    37ae:	42a9      	cmp	r1, r5
    37b0:	d81d      	bhi.n	37ee <_malloc_r+0x52>
    37b2:	0030      	movs	r0, r6
    37b4:	f002 f86b 	bl	588e <__malloc_lock>
    37b8:	4a25      	ldr	r2, [pc, #148]	; (3850 <_malloc_r+0xb4>)
    37ba:	6814      	ldr	r4, [r2, #0]
    37bc:	0021      	movs	r1, r4
    37be:	2900      	cmp	r1, #0
    37c0:	d119      	bne.n	37f6 <_malloc_r+0x5a>
    37c2:	4c24      	ldr	r4, [pc, #144]	; (3854 <_malloc_r+0xb8>)
    37c4:	6823      	ldr	r3, [r4, #0]
    37c6:	2b00      	cmp	r3, #0
    37c8:	d103      	bne.n	37d2 <_malloc_r+0x36>
    37ca:	0030      	movs	r0, r6
    37cc:	f000 fd38 	bl	4240 <_sbrk_r>
    37d0:	6020      	str	r0, [r4, #0]
    37d2:	0029      	movs	r1, r5
    37d4:	0030      	movs	r0, r6
    37d6:	f000 fd33 	bl	4240 <_sbrk_r>
    37da:	1c43      	adds	r3, r0, #1
    37dc:	d12c      	bne.n	3838 <_malloc_r+0x9c>
    37de:	230c      	movs	r3, #12
    37e0:	0030      	movs	r0, r6
    37e2:	6033      	str	r3, [r6, #0]
    37e4:	f002 f854 	bl	5890 <__malloc_unlock>
    37e8:	e003      	b.n	37f2 <_malloc_r+0x56>
    37ea:	2d00      	cmp	r5, #0
    37ec:	dadf      	bge.n	37ae <_malloc_r+0x12>
    37ee:	230c      	movs	r3, #12
    37f0:	6033      	str	r3, [r6, #0]
    37f2:	2000      	movs	r0, #0
    37f4:	bd70      	pop	{r4, r5, r6, pc}
    37f6:	680b      	ldr	r3, [r1, #0]
    37f8:	1b5b      	subs	r3, r3, r5
    37fa:	d41a      	bmi.n	3832 <_malloc_r+0x96>
    37fc:	2b0b      	cmp	r3, #11
    37fe:	d903      	bls.n	3808 <_malloc_r+0x6c>
    3800:	600b      	str	r3, [r1, #0]
    3802:	18cc      	adds	r4, r1, r3
    3804:	6025      	str	r5, [r4, #0]
    3806:	e003      	b.n	3810 <_malloc_r+0x74>
    3808:	428c      	cmp	r4, r1
    380a:	d10e      	bne.n	382a <_malloc_r+0x8e>
    380c:	6863      	ldr	r3, [r4, #4]
    380e:	6013      	str	r3, [r2, #0]
    3810:	0030      	movs	r0, r6
    3812:	f002 f83d 	bl	5890 <__malloc_unlock>
    3816:	0020      	movs	r0, r4
    3818:	2207      	movs	r2, #7
    381a:	300b      	adds	r0, #11
    381c:	1d23      	adds	r3, r4, #4
    381e:	4390      	bics	r0, r2
    3820:	1ac3      	subs	r3, r0, r3
    3822:	d0e7      	beq.n	37f4 <_malloc_r+0x58>
    3824:	425a      	negs	r2, r3
    3826:	50e2      	str	r2, [r4, r3]
    3828:	e7e4      	b.n	37f4 <_malloc_r+0x58>
    382a:	684b      	ldr	r3, [r1, #4]
    382c:	6063      	str	r3, [r4, #4]
    382e:	000c      	movs	r4, r1
    3830:	e7ee      	b.n	3810 <_malloc_r+0x74>
    3832:	000c      	movs	r4, r1
    3834:	6849      	ldr	r1, [r1, #4]
    3836:	e7c2      	b.n	37be <_malloc_r+0x22>
    3838:	2303      	movs	r3, #3
    383a:	1cc4      	adds	r4, r0, #3
    383c:	439c      	bics	r4, r3
    383e:	42a0      	cmp	r0, r4
    3840:	d0e0      	beq.n	3804 <_malloc_r+0x68>
    3842:	1a21      	subs	r1, r4, r0
    3844:	0030      	movs	r0, r6
    3846:	f000 fcfb 	bl	4240 <_sbrk_r>
    384a:	1c43      	adds	r3, r0, #1
    384c:	d1da      	bne.n	3804 <_malloc_r+0x68>
    384e:	e7c6      	b.n	37de <_malloc_r+0x42>
    3850:	2000023c 	.word	0x2000023c
    3854:	20000240 	.word	0x20000240

00003858 <__cvt>:
    3858:	b5f0      	push	{r4, r5, r6, r7, lr}
    385a:	b08b      	sub	sp, #44	; 0x2c
    385c:	0014      	movs	r4, r2
    385e:	1e1d      	subs	r5, r3, #0
    3860:	9912      	ldr	r1, [sp, #72]	; 0x48
    3862:	da53      	bge.n	390c <__cvt+0xb4>
    3864:	2480      	movs	r4, #128	; 0x80
    3866:	0624      	lsls	r4, r4, #24
    3868:	191b      	adds	r3, r3, r4
    386a:	001d      	movs	r5, r3
    386c:	0014      	movs	r4, r2
    386e:	232d      	movs	r3, #45	; 0x2d
    3870:	700b      	strb	r3, [r1, #0]
    3872:	2320      	movs	r3, #32
    3874:	9e14      	ldr	r6, [sp, #80]	; 0x50
    3876:	2203      	movs	r2, #3
    3878:	439e      	bics	r6, r3
    387a:	2e46      	cmp	r6, #70	; 0x46
    387c:	d007      	beq.n	388e <__cvt+0x36>
    387e:	0033      	movs	r3, r6
    3880:	3b45      	subs	r3, #69	; 0x45
    3882:	4259      	negs	r1, r3
    3884:	414b      	adcs	r3, r1
    3886:	9910      	ldr	r1, [sp, #64]	; 0x40
    3888:	3a01      	subs	r2, #1
    388a:	18cb      	adds	r3, r1, r3
    388c:	9310      	str	r3, [sp, #64]	; 0x40
    388e:	ab09      	add	r3, sp, #36	; 0x24
    3890:	9304      	str	r3, [sp, #16]
    3892:	ab08      	add	r3, sp, #32
    3894:	9303      	str	r3, [sp, #12]
    3896:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3898:	9200      	str	r2, [sp, #0]
    389a:	9302      	str	r3, [sp, #8]
    389c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    389e:	0022      	movs	r2, r4
    38a0:	9301      	str	r3, [sp, #4]
    38a2:	002b      	movs	r3, r5
    38a4:	f000 fffa 	bl	489c <_dtoa_r>
    38a8:	0007      	movs	r7, r0
    38aa:	2e47      	cmp	r6, #71	; 0x47
    38ac:	d102      	bne.n	38b4 <__cvt+0x5c>
    38ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    38b0:	07db      	lsls	r3, r3, #31
    38b2:	d524      	bpl.n	38fe <__cvt+0xa6>
    38b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    38b6:	18fb      	adds	r3, r7, r3
    38b8:	9307      	str	r3, [sp, #28]
    38ba:	2e46      	cmp	r6, #70	; 0x46
    38bc:	d114      	bne.n	38e8 <__cvt+0x90>
    38be:	783b      	ldrb	r3, [r7, #0]
    38c0:	2b30      	cmp	r3, #48	; 0x30
    38c2:	d10c      	bne.n	38de <__cvt+0x86>
    38c4:	2200      	movs	r2, #0
    38c6:	2300      	movs	r3, #0
    38c8:	0020      	movs	r0, r4
    38ca:	0029      	movs	r1, r5
    38cc:	f002 fe64 	bl	6598 <__aeabi_dcmpeq>
    38d0:	2800      	cmp	r0, #0
    38d2:	d104      	bne.n	38de <__cvt+0x86>
    38d4:	2301      	movs	r3, #1
    38d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    38d8:	1a9b      	subs	r3, r3, r2
    38da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    38dc:	6013      	str	r3, [r2, #0]
    38de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    38e0:	9a07      	ldr	r2, [sp, #28]
    38e2:	681b      	ldr	r3, [r3, #0]
    38e4:	18d3      	adds	r3, r2, r3
    38e6:	9307      	str	r3, [sp, #28]
    38e8:	2200      	movs	r2, #0
    38ea:	2300      	movs	r3, #0
    38ec:	0020      	movs	r0, r4
    38ee:	0029      	movs	r1, r5
    38f0:	f002 fe52 	bl	6598 <__aeabi_dcmpeq>
    38f4:	2230      	movs	r2, #48	; 0x30
    38f6:	2800      	cmp	r0, #0
    38f8:	d00d      	beq.n	3916 <__cvt+0xbe>
    38fa:	9b07      	ldr	r3, [sp, #28]
    38fc:	9309      	str	r3, [sp, #36]	; 0x24
    38fe:	0038      	movs	r0, r7
    3900:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3902:	9a15      	ldr	r2, [sp, #84]	; 0x54
    3904:	1bdb      	subs	r3, r3, r7
    3906:	6013      	str	r3, [r2, #0]
    3908:	b00b      	add	sp, #44	; 0x2c
    390a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    390c:	2300      	movs	r3, #0
    390e:	e7af      	b.n	3870 <__cvt+0x18>
    3910:	1c59      	adds	r1, r3, #1
    3912:	9109      	str	r1, [sp, #36]	; 0x24
    3914:	701a      	strb	r2, [r3, #0]
    3916:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3918:	9907      	ldr	r1, [sp, #28]
    391a:	4299      	cmp	r1, r3
    391c:	d8f8      	bhi.n	3910 <__cvt+0xb8>
    391e:	e7ee      	b.n	38fe <__cvt+0xa6>

00003920 <__exponent>:
    3920:	b5f0      	push	{r4, r5, r6, r7, lr}
    3922:	232b      	movs	r3, #43	; 0x2b
    3924:	b085      	sub	sp, #20
    3926:	0007      	movs	r7, r0
    3928:	000c      	movs	r4, r1
    392a:	7002      	strb	r2, [r0, #0]
    392c:	1c86      	adds	r6, r0, #2
    392e:	2900      	cmp	r1, #0
    3930:	da01      	bge.n	3936 <__exponent+0x16>
    3932:	232d      	movs	r3, #45	; 0x2d
    3934:	424c      	negs	r4, r1
    3936:	707b      	strb	r3, [r7, #1]
    3938:	2c09      	cmp	r4, #9
    393a:	dd23      	ble.n	3984 <__exponent+0x64>
    393c:	ab02      	add	r3, sp, #8
    393e:	1ddd      	adds	r5, r3, #7
    3940:	1e6b      	subs	r3, r5, #1
    3942:	0020      	movs	r0, r4
    3944:	210a      	movs	r1, #10
    3946:	9301      	str	r3, [sp, #4]
    3948:	f002 fe10 	bl	656c <__aeabi_idivmod>
    394c:	1e6b      	subs	r3, r5, #1
    394e:	3130      	adds	r1, #48	; 0x30
    3950:	7019      	strb	r1, [r3, #0]
    3952:	0020      	movs	r0, r4
    3954:	210a      	movs	r1, #10
    3956:	f002 fd23 	bl	63a0 <__divsi3>
    395a:	0004      	movs	r4, r0
    395c:	2809      	cmp	r0, #9
    395e:	dc0a      	bgt.n	3976 <__exponent+0x56>
    3960:	3d02      	subs	r5, #2
    3962:	3430      	adds	r4, #48	; 0x30
    3964:	702c      	strb	r4, [r5, #0]
    3966:	ab02      	add	r3, sp, #8
    3968:	3307      	adds	r3, #7
    396a:	0030      	movs	r0, r6
    396c:	42ab      	cmp	r3, r5
    396e:	d804      	bhi.n	397a <__exponent+0x5a>
    3970:	1bc0      	subs	r0, r0, r7
    3972:	b005      	add	sp, #20
    3974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3976:	9d01      	ldr	r5, [sp, #4]
    3978:	e7e2      	b.n	3940 <__exponent+0x20>
    397a:	782b      	ldrb	r3, [r5, #0]
    397c:	3501      	adds	r5, #1
    397e:	7033      	strb	r3, [r6, #0]
    3980:	3601      	adds	r6, #1
    3982:	e7f0      	b.n	3966 <__exponent+0x46>
    3984:	2330      	movs	r3, #48	; 0x30
    3986:	18e4      	adds	r4, r4, r3
    3988:	7033      	strb	r3, [r6, #0]
    398a:	1cb0      	adds	r0, r6, #2
    398c:	7074      	strb	r4, [r6, #1]
    398e:	e7ef      	b.n	3970 <__exponent+0x50>

00003990 <_printf_float>:
    3990:	b5f0      	push	{r4, r5, r6, r7, lr}
    3992:	b095      	sub	sp, #84	; 0x54
    3994:	000c      	movs	r4, r1
    3996:	920a      	str	r2, [sp, #40]	; 0x28
    3998:	930b      	str	r3, [sp, #44]	; 0x2c
    399a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    399c:	9009      	str	r0, [sp, #36]	; 0x24
    399e:	f001 fef3 	bl	5788 <_localeconv_r>
    39a2:	6803      	ldr	r3, [r0, #0]
    39a4:	0018      	movs	r0, r3
    39a6:	930d      	str	r3, [sp, #52]	; 0x34
    39a8:	f000 fd24 	bl	43f4 <strlen>
    39ac:	2300      	movs	r3, #0
    39ae:	9312      	str	r3, [sp, #72]	; 0x48
    39b0:	6823      	ldr	r3, [r4, #0]
    39b2:	900e      	str	r0, [sp, #56]	; 0x38
    39b4:	930c      	str	r3, [sp, #48]	; 0x30
    39b6:	990c      	ldr	r1, [sp, #48]	; 0x30
    39b8:	7e27      	ldrb	r7, [r4, #24]
    39ba:	682b      	ldr	r3, [r5, #0]
    39bc:	2207      	movs	r2, #7
    39be:	05c9      	lsls	r1, r1, #23
    39c0:	d547      	bpl.n	3a52 <_printf_float+0xc2>
    39c2:	189b      	adds	r3, r3, r2
    39c4:	4393      	bics	r3, r2
    39c6:	001a      	movs	r2, r3
    39c8:	3208      	adds	r2, #8
    39ca:	602a      	str	r2, [r5, #0]
    39cc:	681a      	ldr	r2, [r3, #0]
    39ce:	685b      	ldr	r3, [r3, #4]
    39d0:	64a2      	str	r2, [r4, #72]	; 0x48
    39d2:	64e3      	str	r3, [r4, #76]	; 0x4c
    39d4:	2201      	movs	r2, #1
    39d6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    39d8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    39da:	006b      	lsls	r3, r5, #1
    39dc:	085b      	lsrs	r3, r3, #1
    39de:	930f      	str	r3, [sp, #60]	; 0x3c
    39e0:	4252      	negs	r2, r2
    39e2:	4ba7      	ldr	r3, [pc, #668]	; (3c80 <_printf_float+0x2f0>)
    39e4:	0030      	movs	r0, r6
    39e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    39e8:	f004 fdc0 	bl	856c <__aeabi_dcmpun>
    39ec:	2800      	cmp	r0, #0
    39ee:	d000      	beq.n	39f2 <_printf_float+0x62>
    39f0:	e206      	b.n	3e00 <_printf_float+0x470>
    39f2:	2201      	movs	r2, #1
    39f4:	4ba2      	ldr	r3, [pc, #648]	; (3c80 <_printf_float+0x2f0>)
    39f6:	4252      	negs	r2, r2
    39f8:	0030      	movs	r0, r6
    39fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
    39fc:	f002 fddc 	bl	65b8 <__aeabi_dcmple>
    3a00:	2800      	cmp	r0, #0
    3a02:	d000      	beq.n	3a06 <_printf_float+0x76>
    3a04:	e1fc      	b.n	3e00 <_printf_float+0x470>
    3a06:	2200      	movs	r2, #0
    3a08:	2300      	movs	r3, #0
    3a0a:	0030      	movs	r0, r6
    3a0c:	0029      	movs	r1, r5
    3a0e:	f002 fdc9 	bl	65a4 <__aeabi_dcmplt>
    3a12:	2800      	cmp	r0, #0
    3a14:	d003      	beq.n	3a1e <_printf_float+0x8e>
    3a16:	0023      	movs	r3, r4
    3a18:	222d      	movs	r2, #45	; 0x2d
    3a1a:	3343      	adds	r3, #67	; 0x43
    3a1c:	701a      	strb	r2, [r3, #0]
    3a1e:	4d99      	ldr	r5, [pc, #612]	; (3c84 <_printf_float+0x2f4>)
    3a20:	2f47      	cmp	r7, #71	; 0x47
    3a22:	d800      	bhi.n	3a26 <_printf_float+0x96>
    3a24:	4d98      	ldr	r5, [pc, #608]	; (3c88 <_printf_float+0x2f8>)
    3a26:	2303      	movs	r3, #3
    3a28:	2600      	movs	r6, #0
    3a2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3a2c:	6123      	str	r3, [r4, #16]
    3a2e:	3301      	adds	r3, #1
    3a30:	439a      	bics	r2, r3
    3a32:	6022      	str	r2, [r4, #0]
    3a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3a36:	aa13      	add	r2, sp, #76	; 0x4c
    3a38:	9300      	str	r3, [sp, #0]
    3a3a:	0021      	movs	r1, r4
    3a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3a3e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a40:	f000 f9f2 	bl	3e28 <_printf_common>
    3a44:	1c43      	adds	r3, r0, #1
    3a46:	d000      	beq.n	3a4a <_printf_float+0xba>
    3a48:	e09c      	b.n	3b84 <_printf_float+0x1f4>
    3a4a:	2001      	movs	r0, #1
    3a4c:	4240      	negs	r0, r0
    3a4e:	b015      	add	sp, #84	; 0x54
    3a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a52:	3307      	adds	r3, #7
    3a54:	e7b6      	b.n	39c4 <_printf_float+0x34>
    3a56:	2380      	movs	r3, #128	; 0x80
    3a58:	6862      	ldr	r2, [r4, #4]
    3a5a:	00db      	lsls	r3, r3, #3
    3a5c:	1c51      	adds	r1, r2, #1
    3a5e:	d145      	bne.n	3aec <_printf_float+0x15c>
    3a60:	3207      	adds	r2, #7
    3a62:	6062      	str	r2, [r4, #4]
    3a64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3a66:	2100      	movs	r1, #0
    3a68:	4313      	orrs	r3, r2
    3a6a:	aa12      	add	r2, sp, #72	; 0x48
    3a6c:	9205      	str	r2, [sp, #20]
    3a6e:	aa11      	add	r2, sp, #68	; 0x44
    3a70:	9203      	str	r2, [sp, #12]
    3a72:	2223      	movs	r2, #35	; 0x23
    3a74:	6023      	str	r3, [r4, #0]
    3a76:	9106      	str	r1, [sp, #24]
    3a78:	9301      	str	r3, [sp, #4]
    3a7a:	a908      	add	r1, sp, #32
    3a7c:	6863      	ldr	r3, [r4, #4]
    3a7e:	1852      	adds	r2, r2, r1
    3a80:	9202      	str	r2, [sp, #8]
    3a82:	9300      	str	r3, [sp, #0]
    3a84:	0032      	movs	r2, r6
    3a86:	002b      	movs	r3, r5
    3a88:	9704      	str	r7, [sp, #16]
    3a8a:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a8c:	f7ff fee4 	bl	3858 <__cvt>
    3a90:	2320      	movs	r3, #32
    3a92:	003a      	movs	r2, r7
    3a94:	0005      	movs	r5, r0
    3a96:	439a      	bics	r2, r3
    3a98:	2a47      	cmp	r2, #71	; 0x47
    3a9a:	d107      	bne.n	3aac <_printf_float+0x11c>
    3a9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3a9e:	1cda      	adds	r2, r3, #3
    3aa0:	db02      	blt.n	3aa8 <_printf_float+0x118>
    3aa2:	6862      	ldr	r2, [r4, #4]
    3aa4:	4293      	cmp	r3, r2
    3aa6:	dd5b      	ble.n	3b60 <_printf_float+0x1d0>
    3aa8:	3f02      	subs	r7, #2
    3aaa:	b2ff      	uxtb	r7, r7
    3aac:	9911      	ldr	r1, [sp, #68]	; 0x44
    3aae:	2f65      	cmp	r7, #101	; 0x65
    3ab0:	d83b      	bhi.n	3b2a <_printf_float+0x19a>
    3ab2:	0020      	movs	r0, r4
    3ab4:	3901      	subs	r1, #1
    3ab6:	003a      	movs	r2, r7
    3ab8:	3050      	adds	r0, #80	; 0x50
    3aba:	9111      	str	r1, [sp, #68]	; 0x44
    3abc:	f7ff ff30 	bl	3920 <__exponent>
    3ac0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3ac2:	0006      	movs	r6, r0
    3ac4:	1883      	adds	r3, r0, r2
    3ac6:	6123      	str	r3, [r4, #16]
    3ac8:	2a01      	cmp	r2, #1
    3aca:	dc02      	bgt.n	3ad2 <_printf_float+0x142>
    3acc:	6822      	ldr	r2, [r4, #0]
    3ace:	07d2      	lsls	r2, r2, #31
    3ad0:	d501      	bpl.n	3ad6 <_printf_float+0x146>
    3ad2:	3301      	adds	r3, #1
    3ad4:	6123      	str	r3, [r4, #16]
    3ad6:	2323      	movs	r3, #35	; 0x23
    3ad8:	aa08      	add	r2, sp, #32
    3ada:	189b      	adds	r3, r3, r2
    3adc:	781b      	ldrb	r3, [r3, #0]
    3ade:	2b00      	cmp	r3, #0
    3ae0:	d0a8      	beq.n	3a34 <_printf_float+0xa4>
    3ae2:	0023      	movs	r3, r4
    3ae4:	222d      	movs	r2, #45	; 0x2d
    3ae6:	3343      	adds	r3, #67	; 0x43
    3ae8:	701a      	strb	r2, [r3, #0]
    3aea:	e7a3      	b.n	3a34 <_printf_float+0xa4>
    3aec:	2f67      	cmp	r7, #103	; 0x67
    3aee:	d001      	beq.n	3af4 <_printf_float+0x164>
    3af0:	2f47      	cmp	r7, #71	; 0x47
    3af2:	d1b7      	bne.n	3a64 <_printf_float+0xd4>
    3af4:	2a00      	cmp	r2, #0
    3af6:	d016      	beq.n	3b26 <_printf_float+0x196>
    3af8:	990c      	ldr	r1, [sp, #48]	; 0x30
    3afa:	a808      	add	r0, sp, #32
    3afc:	430b      	orrs	r3, r1
    3afe:	2100      	movs	r1, #0
    3b00:	9106      	str	r1, [sp, #24]
    3b02:	a912      	add	r1, sp, #72	; 0x48
    3b04:	9105      	str	r1, [sp, #20]
    3b06:	a911      	add	r1, sp, #68	; 0x44
    3b08:	9103      	str	r1, [sp, #12]
    3b0a:	2123      	movs	r1, #35	; 0x23
    3b0c:	1809      	adds	r1, r1, r0
    3b0e:	6023      	str	r3, [r4, #0]
    3b10:	9301      	str	r3, [sp, #4]
    3b12:	9200      	str	r2, [sp, #0]
    3b14:	002b      	movs	r3, r5
    3b16:	9704      	str	r7, [sp, #16]
    3b18:	9102      	str	r1, [sp, #8]
    3b1a:	0032      	movs	r2, r6
    3b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b1e:	f7ff fe9b 	bl	3858 <__cvt>
    3b22:	0005      	movs	r5, r0
    3b24:	e7ba      	b.n	3a9c <_printf_float+0x10c>
    3b26:	2201      	movs	r2, #1
    3b28:	e79b      	b.n	3a62 <_printf_float+0xd2>
    3b2a:	2f66      	cmp	r7, #102	; 0x66
    3b2c:	d119      	bne.n	3b62 <_printf_float+0x1d2>
    3b2e:	6863      	ldr	r3, [r4, #4]
    3b30:	2900      	cmp	r1, #0
    3b32:	dd0c      	ble.n	3b4e <_printf_float+0x1be>
    3b34:	6121      	str	r1, [r4, #16]
    3b36:	2b00      	cmp	r3, #0
    3b38:	d102      	bne.n	3b40 <_printf_float+0x1b0>
    3b3a:	6822      	ldr	r2, [r4, #0]
    3b3c:	07d2      	lsls	r2, r2, #31
    3b3e:	d502      	bpl.n	3b46 <_printf_float+0x1b6>
    3b40:	3301      	adds	r3, #1
    3b42:	185b      	adds	r3, r3, r1
    3b44:	6123      	str	r3, [r4, #16]
    3b46:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3b48:	2600      	movs	r6, #0
    3b4a:	65a3      	str	r3, [r4, #88]	; 0x58
    3b4c:	e7c3      	b.n	3ad6 <_printf_float+0x146>
    3b4e:	2b00      	cmp	r3, #0
    3b50:	d103      	bne.n	3b5a <_printf_float+0x1ca>
    3b52:	2201      	movs	r2, #1
    3b54:	6821      	ldr	r1, [r4, #0]
    3b56:	4211      	tst	r1, r2
    3b58:	d000      	beq.n	3b5c <_printf_float+0x1cc>
    3b5a:	1c9a      	adds	r2, r3, #2
    3b5c:	6122      	str	r2, [r4, #16]
    3b5e:	e7f2      	b.n	3b46 <_printf_float+0x1b6>
    3b60:	2767      	movs	r7, #103	; 0x67
    3b62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3b64:	9812      	ldr	r0, [sp, #72]	; 0x48
    3b66:	4283      	cmp	r3, r0
    3b68:	db05      	blt.n	3b76 <_printf_float+0x1e6>
    3b6a:	6822      	ldr	r2, [r4, #0]
    3b6c:	6123      	str	r3, [r4, #16]
    3b6e:	07d2      	lsls	r2, r2, #31
    3b70:	d5e9      	bpl.n	3b46 <_printf_float+0x1b6>
    3b72:	3301      	adds	r3, #1
    3b74:	e7e6      	b.n	3b44 <_printf_float+0x1b4>
    3b76:	2201      	movs	r2, #1
    3b78:	2b00      	cmp	r3, #0
    3b7a:	dc01      	bgt.n	3b80 <_printf_float+0x1f0>
    3b7c:	1892      	adds	r2, r2, r2
    3b7e:	1ad2      	subs	r2, r2, r3
    3b80:	1812      	adds	r2, r2, r0
    3b82:	e7eb      	b.n	3b5c <_printf_float+0x1cc>
    3b84:	6822      	ldr	r2, [r4, #0]
    3b86:	0553      	lsls	r3, r2, #21
    3b88:	d408      	bmi.n	3b9c <_printf_float+0x20c>
    3b8a:	6923      	ldr	r3, [r4, #16]
    3b8c:	002a      	movs	r2, r5
    3b8e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3b90:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3b94:	47a8      	blx	r5
    3b96:	1c43      	adds	r3, r0, #1
    3b98:	d129      	bne.n	3bee <_printf_float+0x25e>
    3b9a:	e756      	b.n	3a4a <_printf_float+0xba>
    3b9c:	2f65      	cmp	r7, #101	; 0x65
    3b9e:	d800      	bhi.n	3ba2 <_printf_float+0x212>
    3ba0:	e0dc      	b.n	3d5c <_printf_float+0x3cc>
    3ba2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    3ba4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    3ba6:	2200      	movs	r2, #0
    3ba8:	2300      	movs	r3, #0
    3baa:	f002 fcf5 	bl	6598 <__aeabi_dcmpeq>
    3bae:	2800      	cmp	r0, #0
    3bb0:	d035      	beq.n	3c1e <_printf_float+0x28e>
    3bb2:	2301      	movs	r3, #1
    3bb4:	4a35      	ldr	r2, [pc, #212]	; (3c8c <_printf_float+0x2fc>)
    3bb6:	990a      	ldr	r1, [sp, #40]	; 0x28
    3bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
    3bba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3bbc:	47a8      	blx	r5
    3bbe:	1c43      	adds	r3, r0, #1
    3bc0:	d100      	bne.n	3bc4 <_printf_float+0x234>
    3bc2:	e742      	b.n	3a4a <_printf_float+0xba>
    3bc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3bc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3bc8:	4293      	cmp	r3, r2
    3bca:	db02      	blt.n	3bd2 <_printf_float+0x242>
    3bcc:	6823      	ldr	r3, [r4, #0]
    3bce:	07db      	lsls	r3, r3, #31
    3bd0:	d50d      	bpl.n	3bee <_printf_float+0x25e>
    3bd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3bd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3bd8:	990a      	ldr	r1, [sp, #40]	; 0x28
    3bda:	9809      	ldr	r0, [sp, #36]	; 0x24
    3bdc:	47a8      	blx	r5
    3bde:	2500      	movs	r5, #0
    3be0:	1c43      	adds	r3, r0, #1
    3be2:	d100      	bne.n	3be6 <_printf_float+0x256>
    3be4:	e731      	b.n	3a4a <_printf_float+0xba>
    3be6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3be8:	3b01      	subs	r3, #1
    3bea:	429d      	cmp	r5, r3
    3bec:	db0b      	blt.n	3c06 <_printf_float+0x276>
    3bee:	6823      	ldr	r3, [r4, #0]
    3bf0:	2500      	movs	r5, #0
    3bf2:	079b      	lsls	r3, r3, #30
    3bf4:	d500      	bpl.n	3bf8 <_printf_float+0x268>
    3bf6:	e0fd      	b.n	3df4 <_printf_float+0x464>
    3bf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3bfa:	68e0      	ldr	r0, [r4, #12]
    3bfc:	4298      	cmp	r0, r3
    3bfe:	db00      	blt.n	3c02 <_printf_float+0x272>
    3c00:	e725      	b.n	3a4e <_printf_float+0xbe>
    3c02:	0018      	movs	r0, r3
    3c04:	e723      	b.n	3a4e <_printf_float+0xbe>
    3c06:	0022      	movs	r2, r4
    3c08:	2301      	movs	r3, #1
    3c0a:	321a      	adds	r2, #26
    3c0c:	990a      	ldr	r1, [sp, #40]	; 0x28
    3c0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3c10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3c12:	47b0      	blx	r6
    3c14:	1c43      	adds	r3, r0, #1
    3c16:	d100      	bne.n	3c1a <_printf_float+0x28a>
    3c18:	e717      	b.n	3a4a <_printf_float+0xba>
    3c1a:	3501      	adds	r5, #1
    3c1c:	e7e3      	b.n	3be6 <_printf_float+0x256>
    3c1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3c20:	2b00      	cmp	r3, #0
    3c22:	dc35      	bgt.n	3c90 <_printf_float+0x300>
    3c24:	2301      	movs	r3, #1
    3c26:	4a19      	ldr	r2, [pc, #100]	; (3c8c <_printf_float+0x2fc>)
    3c28:	990a      	ldr	r1, [sp, #40]	; 0x28
    3c2a:	9809      	ldr	r0, [sp, #36]	; 0x24
    3c2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3c2e:	47b0      	blx	r6
    3c30:	1c43      	adds	r3, r0, #1
    3c32:	d100      	bne.n	3c36 <_printf_float+0x2a6>
    3c34:	e709      	b.n	3a4a <_printf_float+0xba>
    3c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d105      	bne.n	3c48 <_printf_float+0x2b8>
    3c3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d102      	bne.n	3c48 <_printf_float+0x2b8>
    3c42:	6823      	ldr	r3, [r4, #0]
    3c44:	07db      	lsls	r3, r3, #31
    3c46:	d5d2      	bpl.n	3bee <_printf_float+0x25e>
    3c48:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3c4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3c4e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3c50:	9809      	ldr	r0, [sp, #36]	; 0x24
    3c52:	47b0      	blx	r6
    3c54:	2600      	movs	r6, #0
    3c56:	1c43      	adds	r3, r0, #1
    3c58:	d100      	bne.n	3c5c <_printf_float+0x2cc>
    3c5a:	e6f6      	b.n	3a4a <_printf_float+0xba>
    3c5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3c5e:	425b      	negs	r3, r3
    3c60:	429e      	cmp	r6, r3
    3c62:	db01      	blt.n	3c68 <_printf_float+0x2d8>
    3c64:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3c66:	e791      	b.n	3b8c <_printf_float+0x1fc>
    3c68:	0022      	movs	r2, r4
    3c6a:	2301      	movs	r3, #1
    3c6c:	321a      	adds	r2, #26
    3c6e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3c70:	9809      	ldr	r0, [sp, #36]	; 0x24
    3c72:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3c74:	47b8      	blx	r7
    3c76:	1c43      	adds	r3, r0, #1
    3c78:	d100      	bne.n	3c7c <_printf_float+0x2ec>
    3c7a:	e6e6      	b.n	3a4a <_printf_float+0xba>
    3c7c:	3601      	adds	r6, #1
    3c7e:	e7ed      	b.n	3c5c <_printf_float+0x2cc>
    3c80:	7fefffff 	.word	0x7fefffff
    3c84:	00009412 	.word	0x00009412
    3c88:	0000940e 	.word	0x0000940e
    3c8c:	0000941e 	.word	0x0000941e
    3c90:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3c92:	9e12      	ldr	r6, [sp, #72]	; 0x48
    3c94:	429e      	cmp	r6, r3
    3c96:	dd00      	ble.n	3c9a <_printf_float+0x30a>
    3c98:	001e      	movs	r6, r3
    3c9a:	2e00      	cmp	r6, #0
    3c9c:	dc35      	bgt.n	3d0a <_printf_float+0x37a>
    3c9e:	2300      	movs	r3, #0
    3ca0:	930c      	str	r3, [sp, #48]	; 0x30
    3ca2:	43f3      	mvns	r3, r6
    3ca4:	17db      	asrs	r3, r3, #31
    3ca6:	930f      	str	r3, [sp, #60]	; 0x3c
    3ca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3caa:	6da7      	ldr	r7, [r4, #88]	; 0x58
    3cac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3cae:	4033      	ands	r3, r6
    3cb0:	1afb      	subs	r3, r7, r3
    3cb2:	429a      	cmp	r2, r3
    3cb4:	db32      	blt.n	3d1c <_printf_float+0x38c>
    3cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3cb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3cba:	4293      	cmp	r3, r2
    3cbc:	db3c      	blt.n	3d38 <_printf_float+0x3a8>
    3cbe:	6823      	ldr	r3, [r4, #0]
    3cc0:	07db      	lsls	r3, r3, #31
    3cc2:	d439      	bmi.n	3d38 <_printf_float+0x3a8>
    3cc4:	9e12      	ldr	r6, [sp, #72]	; 0x48
    3cc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3cc8:	1bf3      	subs	r3, r6, r7
    3cca:	1ab6      	subs	r6, r6, r2
    3ccc:	429e      	cmp	r6, r3
    3cce:	dd00      	ble.n	3cd2 <_printf_float+0x342>
    3cd0:	001e      	movs	r6, r3
    3cd2:	2e00      	cmp	r6, #0
    3cd4:	dc39      	bgt.n	3d4a <_printf_float+0x3ba>
    3cd6:	43f7      	mvns	r7, r6
    3cd8:	2500      	movs	r5, #0
    3cda:	17fb      	asrs	r3, r7, #31
    3cdc:	930c      	str	r3, [sp, #48]	; 0x30
    3cde:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3ce0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
    3ce4:	1a9b      	subs	r3, r3, r2
    3ce6:	0032      	movs	r2, r6
    3ce8:	400a      	ands	r2, r1
    3cea:	1a9b      	subs	r3, r3, r2
    3cec:	429d      	cmp	r5, r3
    3cee:	db00      	blt.n	3cf2 <_printf_float+0x362>
    3cf0:	e77d      	b.n	3bee <_printf_float+0x25e>
    3cf2:	0022      	movs	r2, r4
    3cf4:	2301      	movs	r3, #1
    3cf6:	321a      	adds	r2, #26
    3cf8:	990a      	ldr	r1, [sp, #40]	; 0x28
    3cfa:	9809      	ldr	r0, [sp, #36]	; 0x24
    3cfc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3cfe:	47b8      	blx	r7
    3d00:	1c43      	adds	r3, r0, #1
    3d02:	d100      	bne.n	3d06 <_printf_float+0x376>
    3d04:	e6a1      	b.n	3a4a <_printf_float+0xba>
    3d06:	3501      	adds	r5, #1
    3d08:	e7e9      	b.n	3cde <_printf_float+0x34e>
    3d0a:	0033      	movs	r3, r6
    3d0c:	002a      	movs	r2, r5
    3d0e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3d10:	9809      	ldr	r0, [sp, #36]	; 0x24
    3d12:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3d14:	47b8      	blx	r7
    3d16:	1c43      	adds	r3, r0, #1
    3d18:	d1c1      	bne.n	3c9e <_printf_float+0x30e>
    3d1a:	e696      	b.n	3a4a <_printf_float+0xba>
    3d1c:	0022      	movs	r2, r4
    3d1e:	2301      	movs	r3, #1
    3d20:	321a      	adds	r2, #26
    3d22:	990a      	ldr	r1, [sp, #40]	; 0x28
    3d24:	9809      	ldr	r0, [sp, #36]	; 0x24
    3d26:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3d28:	47b8      	blx	r7
    3d2a:	1c43      	adds	r3, r0, #1
    3d2c:	d100      	bne.n	3d30 <_printf_float+0x3a0>
    3d2e:	e68c      	b.n	3a4a <_printf_float+0xba>
    3d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3d32:	3301      	adds	r3, #1
    3d34:	930c      	str	r3, [sp, #48]	; 0x30
    3d36:	e7b7      	b.n	3ca8 <_printf_float+0x318>
    3d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3d3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3d3c:	990a      	ldr	r1, [sp, #40]	; 0x28
    3d3e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3d40:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3d42:	47b0      	blx	r6
    3d44:	1c43      	adds	r3, r0, #1
    3d46:	d1bd      	bne.n	3cc4 <_printf_float+0x334>
    3d48:	e67f      	b.n	3a4a <_printf_float+0xba>
    3d4a:	19ea      	adds	r2, r5, r7
    3d4c:	0033      	movs	r3, r6
    3d4e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3d50:	9809      	ldr	r0, [sp, #36]	; 0x24
    3d52:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3d54:	47a8      	blx	r5
    3d56:	1c43      	adds	r3, r0, #1
    3d58:	d1bd      	bne.n	3cd6 <_printf_float+0x346>
    3d5a:	e676      	b.n	3a4a <_printf_float+0xba>
    3d5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3d5e:	2b01      	cmp	r3, #1
    3d60:	dc02      	bgt.n	3d68 <_printf_float+0x3d8>
    3d62:	2301      	movs	r3, #1
    3d64:	421a      	tst	r2, r3
    3d66:	d038      	beq.n	3dda <_printf_float+0x44a>
    3d68:	2301      	movs	r3, #1
    3d6a:	002a      	movs	r2, r5
    3d6c:	990a      	ldr	r1, [sp, #40]	; 0x28
    3d6e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3d70:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3d72:	47b8      	blx	r7
    3d74:	1c43      	adds	r3, r0, #1
    3d76:	d100      	bne.n	3d7a <_printf_float+0x3ea>
    3d78:	e667      	b.n	3a4a <_printf_float+0xba>
    3d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3d7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3d7e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3d80:	9809      	ldr	r0, [sp, #36]	; 0x24
    3d82:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3d84:	47b8      	blx	r7
    3d86:	1c43      	adds	r3, r0, #1
    3d88:	d100      	bne.n	3d8c <_printf_float+0x3fc>
    3d8a:	e65e      	b.n	3a4a <_printf_float+0xba>
    3d8c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    3d8e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    3d90:	2200      	movs	r2, #0
    3d92:	2300      	movs	r3, #0
    3d94:	f002 fc00 	bl	6598 <__aeabi_dcmpeq>
    3d98:	2800      	cmp	r0, #0
    3d9a:	d008      	beq.n	3dae <_printf_float+0x41e>
    3d9c:	2500      	movs	r5, #0
    3d9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3da0:	3b01      	subs	r3, #1
    3da2:	429d      	cmp	r5, r3
    3da4:	db0d      	blt.n	3dc2 <_printf_float+0x432>
    3da6:	0022      	movs	r2, r4
    3da8:	0033      	movs	r3, r6
    3daa:	3250      	adds	r2, #80	; 0x50
    3dac:	e6ef      	b.n	3b8e <_printf_float+0x1fe>
    3dae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3db0:	1c6a      	adds	r2, r5, #1
    3db2:	3b01      	subs	r3, #1
    3db4:	990a      	ldr	r1, [sp, #40]	; 0x28
    3db6:	9809      	ldr	r0, [sp, #36]	; 0x24
    3db8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3dba:	47a8      	blx	r5
    3dbc:	1c43      	adds	r3, r0, #1
    3dbe:	d1f2      	bne.n	3da6 <_printf_float+0x416>
    3dc0:	e643      	b.n	3a4a <_printf_float+0xba>
    3dc2:	0022      	movs	r2, r4
    3dc4:	2301      	movs	r3, #1
    3dc6:	321a      	adds	r2, #26
    3dc8:	990a      	ldr	r1, [sp, #40]	; 0x28
    3dca:	9809      	ldr	r0, [sp, #36]	; 0x24
    3dcc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3dce:	47b8      	blx	r7
    3dd0:	1c43      	adds	r3, r0, #1
    3dd2:	d100      	bne.n	3dd6 <_printf_float+0x446>
    3dd4:	e639      	b.n	3a4a <_printf_float+0xba>
    3dd6:	3501      	adds	r5, #1
    3dd8:	e7e1      	b.n	3d9e <_printf_float+0x40e>
    3dda:	002a      	movs	r2, r5
    3ddc:	e7ea      	b.n	3db4 <_printf_float+0x424>
    3dde:	0022      	movs	r2, r4
    3de0:	2301      	movs	r3, #1
    3de2:	3219      	adds	r2, #25
    3de4:	990a      	ldr	r1, [sp, #40]	; 0x28
    3de6:	9809      	ldr	r0, [sp, #36]	; 0x24
    3de8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3dea:	47b0      	blx	r6
    3dec:	1c43      	adds	r3, r0, #1
    3dee:	d100      	bne.n	3df2 <_printf_float+0x462>
    3df0:	e62b      	b.n	3a4a <_printf_float+0xba>
    3df2:	3501      	adds	r5, #1
    3df4:	68e3      	ldr	r3, [r4, #12]
    3df6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3df8:	1a9b      	subs	r3, r3, r2
    3dfa:	429d      	cmp	r5, r3
    3dfc:	dbef      	blt.n	3dde <_printf_float+0x44e>
    3dfe:	e6fb      	b.n	3bf8 <_printf_float+0x268>
    3e00:	0032      	movs	r2, r6
    3e02:	002b      	movs	r3, r5
    3e04:	0030      	movs	r0, r6
    3e06:	0029      	movs	r1, r5
    3e08:	f004 fbb0 	bl	856c <__aeabi_dcmpun>
    3e0c:	2800      	cmp	r0, #0
    3e0e:	d100      	bne.n	3e12 <_printf_float+0x482>
    3e10:	e621      	b.n	3a56 <_printf_float+0xc6>
    3e12:	4d03      	ldr	r5, [pc, #12]	; (3e20 <_printf_float+0x490>)
    3e14:	2f47      	cmp	r7, #71	; 0x47
    3e16:	d900      	bls.n	3e1a <_printf_float+0x48a>
    3e18:	e605      	b.n	3a26 <_printf_float+0x96>
    3e1a:	4d02      	ldr	r5, [pc, #8]	; (3e24 <_printf_float+0x494>)
    3e1c:	e603      	b.n	3a26 <_printf_float+0x96>
    3e1e:	46c0      	nop			; (mov r8, r8)
    3e20:	0000941a 	.word	0x0000941a
    3e24:	00009416 	.word	0x00009416

00003e28 <_printf_common>:
    3e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e2a:	0015      	movs	r5, r2
    3e2c:	9301      	str	r3, [sp, #4]
    3e2e:	688a      	ldr	r2, [r1, #8]
    3e30:	690b      	ldr	r3, [r1, #16]
    3e32:	9000      	str	r0, [sp, #0]
    3e34:	000c      	movs	r4, r1
    3e36:	4293      	cmp	r3, r2
    3e38:	da00      	bge.n	3e3c <_printf_common+0x14>
    3e3a:	0013      	movs	r3, r2
    3e3c:	0022      	movs	r2, r4
    3e3e:	602b      	str	r3, [r5, #0]
    3e40:	3243      	adds	r2, #67	; 0x43
    3e42:	7812      	ldrb	r2, [r2, #0]
    3e44:	2a00      	cmp	r2, #0
    3e46:	d001      	beq.n	3e4c <_printf_common+0x24>
    3e48:	3301      	adds	r3, #1
    3e4a:	602b      	str	r3, [r5, #0]
    3e4c:	6823      	ldr	r3, [r4, #0]
    3e4e:	069b      	lsls	r3, r3, #26
    3e50:	d502      	bpl.n	3e58 <_printf_common+0x30>
    3e52:	682b      	ldr	r3, [r5, #0]
    3e54:	3302      	adds	r3, #2
    3e56:	602b      	str	r3, [r5, #0]
    3e58:	2706      	movs	r7, #6
    3e5a:	6823      	ldr	r3, [r4, #0]
    3e5c:	401f      	ands	r7, r3
    3e5e:	d027      	beq.n	3eb0 <_printf_common+0x88>
    3e60:	0023      	movs	r3, r4
    3e62:	3343      	adds	r3, #67	; 0x43
    3e64:	781b      	ldrb	r3, [r3, #0]
    3e66:	1e5a      	subs	r2, r3, #1
    3e68:	4193      	sbcs	r3, r2
    3e6a:	6822      	ldr	r2, [r4, #0]
    3e6c:	0692      	lsls	r2, r2, #26
    3e6e:	d430      	bmi.n	3ed2 <_printf_common+0xaa>
    3e70:	0022      	movs	r2, r4
    3e72:	9901      	ldr	r1, [sp, #4]
    3e74:	3243      	adds	r2, #67	; 0x43
    3e76:	9800      	ldr	r0, [sp, #0]
    3e78:	9e08      	ldr	r6, [sp, #32]
    3e7a:	47b0      	blx	r6
    3e7c:	1c43      	adds	r3, r0, #1
    3e7e:	d025      	beq.n	3ecc <_printf_common+0xa4>
    3e80:	2306      	movs	r3, #6
    3e82:	6820      	ldr	r0, [r4, #0]
    3e84:	682a      	ldr	r2, [r5, #0]
    3e86:	68e1      	ldr	r1, [r4, #12]
    3e88:	4003      	ands	r3, r0
    3e8a:	2500      	movs	r5, #0
    3e8c:	2b04      	cmp	r3, #4
    3e8e:	d103      	bne.n	3e98 <_printf_common+0x70>
    3e90:	1a8d      	subs	r5, r1, r2
    3e92:	43eb      	mvns	r3, r5
    3e94:	17db      	asrs	r3, r3, #31
    3e96:	401d      	ands	r5, r3
    3e98:	68a3      	ldr	r3, [r4, #8]
    3e9a:	6922      	ldr	r2, [r4, #16]
    3e9c:	4293      	cmp	r3, r2
    3e9e:	dd01      	ble.n	3ea4 <_printf_common+0x7c>
    3ea0:	1a9b      	subs	r3, r3, r2
    3ea2:	18ed      	adds	r5, r5, r3
    3ea4:	2700      	movs	r7, #0
    3ea6:	42bd      	cmp	r5, r7
    3ea8:	d120      	bne.n	3eec <_printf_common+0xc4>
    3eaa:	2000      	movs	r0, #0
    3eac:	e010      	b.n	3ed0 <_printf_common+0xa8>
    3eae:	3701      	adds	r7, #1
    3eb0:	68e3      	ldr	r3, [r4, #12]
    3eb2:	682a      	ldr	r2, [r5, #0]
    3eb4:	1a9b      	subs	r3, r3, r2
    3eb6:	429f      	cmp	r7, r3
    3eb8:	dad2      	bge.n	3e60 <_printf_common+0x38>
    3eba:	0022      	movs	r2, r4
    3ebc:	2301      	movs	r3, #1
    3ebe:	3219      	adds	r2, #25
    3ec0:	9901      	ldr	r1, [sp, #4]
    3ec2:	9800      	ldr	r0, [sp, #0]
    3ec4:	9e08      	ldr	r6, [sp, #32]
    3ec6:	47b0      	blx	r6
    3ec8:	1c43      	adds	r3, r0, #1
    3eca:	d1f0      	bne.n	3eae <_printf_common+0x86>
    3ecc:	2001      	movs	r0, #1
    3ece:	4240      	negs	r0, r0
    3ed0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3ed2:	2030      	movs	r0, #48	; 0x30
    3ed4:	18e1      	adds	r1, r4, r3
    3ed6:	3143      	adds	r1, #67	; 0x43
    3ed8:	7008      	strb	r0, [r1, #0]
    3eda:	0021      	movs	r1, r4
    3edc:	1c5a      	adds	r2, r3, #1
    3ede:	3145      	adds	r1, #69	; 0x45
    3ee0:	7809      	ldrb	r1, [r1, #0]
    3ee2:	18a2      	adds	r2, r4, r2
    3ee4:	3243      	adds	r2, #67	; 0x43
    3ee6:	3302      	adds	r3, #2
    3ee8:	7011      	strb	r1, [r2, #0]
    3eea:	e7c1      	b.n	3e70 <_printf_common+0x48>
    3eec:	0022      	movs	r2, r4
    3eee:	2301      	movs	r3, #1
    3ef0:	321a      	adds	r2, #26
    3ef2:	9901      	ldr	r1, [sp, #4]
    3ef4:	9800      	ldr	r0, [sp, #0]
    3ef6:	9e08      	ldr	r6, [sp, #32]
    3ef8:	47b0      	blx	r6
    3efa:	1c43      	adds	r3, r0, #1
    3efc:	d0e6      	beq.n	3ecc <_printf_common+0xa4>
    3efe:	3701      	adds	r7, #1
    3f00:	e7d1      	b.n	3ea6 <_printf_common+0x7e>
	...

00003f04 <_printf_i>:
    3f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f06:	b08b      	sub	sp, #44	; 0x2c
    3f08:	9206      	str	r2, [sp, #24]
    3f0a:	000a      	movs	r2, r1
    3f0c:	3243      	adds	r2, #67	; 0x43
    3f0e:	9307      	str	r3, [sp, #28]
    3f10:	9005      	str	r0, [sp, #20]
    3f12:	9204      	str	r2, [sp, #16]
    3f14:	7e0a      	ldrb	r2, [r1, #24]
    3f16:	000c      	movs	r4, r1
    3f18:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3f1a:	2a6e      	cmp	r2, #110	; 0x6e
    3f1c:	d100      	bne.n	3f20 <_printf_i+0x1c>
    3f1e:	e08f      	b.n	4040 <_printf_i+0x13c>
    3f20:	d817      	bhi.n	3f52 <_printf_i+0x4e>
    3f22:	2a63      	cmp	r2, #99	; 0x63
    3f24:	d02c      	beq.n	3f80 <_printf_i+0x7c>
    3f26:	d808      	bhi.n	3f3a <_printf_i+0x36>
    3f28:	2a00      	cmp	r2, #0
    3f2a:	d100      	bne.n	3f2e <_printf_i+0x2a>
    3f2c:	e099      	b.n	4062 <_printf_i+0x15e>
    3f2e:	2a58      	cmp	r2, #88	; 0x58
    3f30:	d054      	beq.n	3fdc <_printf_i+0xd8>
    3f32:	0026      	movs	r6, r4
    3f34:	3642      	adds	r6, #66	; 0x42
    3f36:	7032      	strb	r2, [r6, #0]
    3f38:	e029      	b.n	3f8e <_printf_i+0x8a>
    3f3a:	2a64      	cmp	r2, #100	; 0x64
    3f3c:	d001      	beq.n	3f42 <_printf_i+0x3e>
    3f3e:	2a69      	cmp	r2, #105	; 0x69
    3f40:	d1f7      	bne.n	3f32 <_printf_i+0x2e>
    3f42:	6821      	ldr	r1, [r4, #0]
    3f44:	681a      	ldr	r2, [r3, #0]
    3f46:	0608      	lsls	r0, r1, #24
    3f48:	d523      	bpl.n	3f92 <_printf_i+0x8e>
    3f4a:	1d11      	adds	r1, r2, #4
    3f4c:	6019      	str	r1, [r3, #0]
    3f4e:	6815      	ldr	r5, [r2, #0]
    3f50:	e025      	b.n	3f9e <_printf_i+0x9a>
    3f52:	2a73      	cmp	r2, #115	; 0x73
    3f54:	d100      	bne.n	3f58 <_printf_i+0x54>
    3f56:	e088      	b.n	406a <_printf_i+0x166>
    3f58:	d808      	bhi.n	3f6c <_printf_i+0x68>
    3f5a:	2a6f      	cmp	r2, #111	; 0x6f
    3f5c:	d029      	beq.n	3fb2 <_printf_i+0xae>
    3f5e:	2a70      	cmp	r2, #112	; 0x70
    3f60:	d1e7      	bne.n	3f32 <_printf_i+0x2e>
    3f62:	2220      	movs	r2, #32
    3f64:	6809      	ldr	r1, [r1, #0]
    3f66:	430a      	orrs	r2, r1
    3f68:	6022      	str	r2, [r4, #0]
    3f6a:	e003      	b.n	3f74 <_printf_i+0x70>
    3f6c:	2a75      	cmp	r2, #117	; 0x75
    3f6e:	d020      	beq.n	3fb2 <_printf_i+0xae>
    3f70:	2a78      	cmp	r2, #120	; 0x78
    3f72:	d1de      	bne.n	3f32 <_printf_i+0x2e>
    3f74:	0022      	movs	r2, r4
    3f76:	2178      	movs	r1, #120	; 0x78
    3f78:	3245      	adds	r2, #69	; 0x45
    3f7a:	7011      	strb	r1, [r2, #0]
    3f7c:	4a6c      	ldr	r2, [pc, #432]	; (4130 <_printf_i+0x22c>)
    3f7e:	e030      	b.n	3fe2 <_printf_i+0xde>
    3f80:	000e      	movs	r6, r1
    3f82:	681a      	ldr	r2, [r3, #0]
    3f84:	3642      	adds	r6, #66	; 0x42
    3f86:	1d11      	adds	r1, r2, #4
    3f88:	6019      	str	r1, [r3, #0]
    3f8a:	6813      	ldr	r3, [r2, #0]
    3f8c:	7033      	strb	r3, [r6, #0]
    3f8e:	2301      	movs	r3, #1
    3f90:	e079      	b.n	4086 <_printf_i+0x182>
    3f92:	0649      	lsls	r1, r1, #25
    3f94:	d5d9      	bpl.n	3f4a <_printf_i+0x46>
    3f96:	1d11      	adds	r1, r2, #4
    3f98:	6019      	str	r1, [r3, #0]
    3f9a:	2300      	movs	r3, #0
    3f9c:	5ed5      	ldrsh	r5, [r2, r3]
    3f9e:	2d00      	cmp	r5, #0
    3fa0:	da03      	bge.n	3faa <_printf_i+0xa6>
    3fa2:	232d      	movs	r3, #45	; 0x2d
    3fa4:	9a04      	ldr	r2, [sp, #16]
    3fa6:	426d      	negs	r5, r5
    3fa8:	7013      	strb	r3, [r2, #0]
    3faa:	4b62      	ldr	r3, [pc, #392]	; (4134 <_printf_i+0x230>)
    3fac:	270a      	movs	r7, #10
    3fae:	9303      	str	r3, [sp, #12]
    3fb0:	e02f      	b.n	4012 <_printf_i+0x10e>
    3fb2:	6820      	ldr	r0, [r4, #0]
    3fb4:	6819      	ldr	r1, [r3, #0]
    3fb6:	0605      	lsls	r5, r0, #24
    3fb8:	d503      	bpl.n	3fc2 <_printf_i+0xbe>
    3fba:	1d08      	adds	r0, r1, #4
    3fbc:	6018      	str	r0, [r3, #0]
    3fbe:	680d      	ldr	r5, [r1, #0]
    3fc0:	e005      	b.n	3fce <_printf_i+0xca>
    3fc2:	0640      	lsls	r0, r0, #25
    3fc4:	d5f9      	bpl.n	3fba <_printf_i+0xb6>
    3fc6:	680d      	ldr	r5, [r1, #0]
    3fc8:	1d08      	adds	r0, r1, #4
    3fca:	6018      	str	r0, [r3, #0]
    3fcc:	b2ad      	uxth	r5, r5
    3fce:	4b59      	ldr	r3, [pc, #356]	; (4134 <_printf_i+0x230>)
    3fd0:	2708      	movs	r7, #8
    3fd2:	9303      	str	r3, [sp, #12]
    3fd4:	2a6f      	cmp	r2, #111	; 0x6f
    3fd6:	d018      	beq.n	400a <_printf_i+0x106>
    3fd8:	270a      	movs	r7, #10
    3fda:	e016      	b.n	400a <_printf_i+0x106>
    3fdc:	3145      	adds	r1, #69	; 0x45
    3fde:	700a      	strb	r2, [r1, #0]
    3fe0:	4a54      	ldr	r2, [pc, #336]	; (4134 <_printf_i+0x230>)
    3fe2:	9203      	str	r2, [sp, #12]
    3fe4:	681a      	ldr	r2, [r3, #0]
    3fe6:	6821      	ldr	r1, [r4, #0]
    3fe8:	1d10      	adds	r0, r2, #4
    3fea:	6018      	str	r0, [r3, #0]
    3fec:	6815      	ldr	r5, [r2, #0]
    3fee:	0608      	lsls	r0, r1, #24
    3ff0:	d522      	bpl.n	4038 <_printf_i+0x134>
    3ff2:	07cb      	lsls	r3, r1, #31
    3ff4:	d502      	bpl.n	3ffc <_printf_i+0xf8>
    3ff6:	2320      	movs	r3, #32
    3ff8:	4319      	orrs	r1, r3
    3ffa:	6021      	str	r1, [r4, #0]
    3ffc:	2710      	movs	r7, #16
    3ffe:	2d00      	cmp	r5, #0
    4000:	d103      	bne.n	400a <_printf_i+0x106>
    4002:	2320      	movs	r3, #32
    4004:	6822      	ldr	r2, [r4, #0]
    4006:	439a      	bics	r2, r3
    4008:	6022      	str	r2, [r4, #0]
    400a:	0023      	movs	r3, r4
    400c:	2200      	movs	r2, #0
    400e:	3343      	adds	r3, #67	; 0x43
    4010:	701a      	strb	r2, [r3, #0]
    4012:	6863      	ldr	r3, [r4, #4]
    4014:	60a3      	str	r3, [r4, #8]
    4016:	2b00      	cmp	r3, #0
    4018:	db5c      	blt.n	40d4 <_printf_i+0x1d0>
    401a:	2204      	movs	r2, #4
    401c:	6821      	ldr	r1, [r4, #0]
    401e:	4391      	bics	r1, r2
    4020:	6021      	str	r1, [r4, #0]
    4022:	2d00      	cmp	r5, #0
    4024:	d158      	bne.n	40d8 <_printf_i+0x1d4>
    4026:	9e04      	ldr	r6, [sp, #16]
    4028:	2b00      	cmp	r3, #0
    402a:	d064      	beq.n	40f6 <_printf_i+0x1f2>
    402c:	0026      	movs	r6, r4
    402e:	9b03      	ldr	r3, [sp, #12]
    4030:	3642      	adds	r6, #66	; 0x42
    4032:	781b      	ldrb	r3, [r3, #0]
    4034:	7033      	strb	r3, [r6, #0]
    4036:	e05e      	b.n	40f6 <_printf_i+0x1f2>
    4038:	0648      	lsls	r0, r1, #25
    403a:	d5da      	bpl.n	3ff2 <_printf_i+0xee>
    403c:	b2ad      	uxth	r5, r5
    403e:	e7d8      	b.n	3ff2 <_printf_i+0xee>
    4040:	6809      	ldr	r1, [r1, #0]
    4042:	681a      	ldr	r2, [r3, #0]
    4044:	0608      	lsls	r0, r1, #24
    4046:	d505      	bpl.n	4054 <_printf_i+0x150>
    4048:	1d11      	adds	r1, r2, #4
    404a:	6019      	str	r1, [r3, #0]
    404c:	6813      	ldr	r3, [r2, #0]
    404e:	6962      	ldr	r2, [r4, #20]
    4050:	601a      	str	r2, [r3, #0]
    4052:	e006      	b.n	4062 <_printf_i+0x15e>
    4054:	0649      	lsls	r1, r1, #25
    4056:	d5f7      	bpl.n	4048 <_printf_i+0x144>
    4058:	1d11      	adds	r1, r2, #4
    405a:	6019      	str	r1, [r3, #0]
    405c:	6813      	ldr	r3, [r2, #0]
    405e:	8aa2      	ldrh	r2, [r4, #20]
    4060:	801a      	strh	r2, [r3, #0]
    4062:	2300      	movs	r3, #0
    4064:	9e04      	ldr	r6, [sp, #16]
    4066:	6123      	str	r3, [r4, #16]
    4068:	e054      	b.n	4114 <_printf_i+0x210>
    406a:	681a      	ldr	r2, [r3, #0]
    406c:	1d11      	adds	r1, r2, #4
    406e:	6019      	str	r1, [r3, #0]
    4070:	6816      	ldr	r6, [r2, #0]
    4072:	2100      	movs	r1, #0
    4074:	6862      	ldr	r2, [r4, #4]
    4076:	0030      	movs	r0, r6
    4078:	f001 fbfe 	bl	5878 <memchr>
    407c:	2800      	cmp	r0, #0
    407e:	d001      	beq.n	4084 <_printf_i+0x180>
    4080:	1b80      	subs	r0, r0, r6
    4082:	6060      	str	r0, [r4, #4]
    4084:	6863      	ldr	r3, [r4, #4]
    4086:	6123      	str	r3, [r4, #16]
    4088:	2300      	movs	r3, #0
    408a:	9a04      	ldr	r2, [sp, #16]
    408c:	7013      	strb	r3, [r2, #0]
    408e:	e041      	b.n	4114 <_printf_i+0x210>
    4090:	6923      	ldr	r3, [r4, #16]
    4092:	0032      	movs	r2, r6
    4094:	9906      	ldr	r1, [sp, #24]
    4096:	9805      	ldr	r0, [sp, #20]
    4098:	9d07      	ldr	r5, [sp, #28]
    409a:	47a8      	blx	r5
    409c:	1c43      	adds	r3, r0, #1
    409e:	d043      	beq.n	4128 <_printf_i+0x224>
    40a0:	6823      	ldr	r3, [r4, #0]
    40a2:	2500      	movs	r5, #0
    40a4:	079b      	lsls	r3, r3, #30
    40a6:	d40f      	bmi.n	40c8 <_printf_i+0x1c4>
    40a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    40aa:	68e0      	ldr	r0, [r4, #12]
    40ac:	4298      	cmp	r0, r3
    40ae:	da3d      	bge.n	412c <_printf_i+0x228>
    40b0:	0018      	movs	r0, r3
    40b2:	e03b      	b.n	412c <_printf_i+0x228>
    40b4:	0022      	movs	r2, r4
    40b6:	2301      	movs	r3, #1
    40b8:	3219      	adds	r2, #25
    40ba:	9906      	ldr	r1, [sp, #24]
    40bc:	9805      	ldr	r0, [sp, #20]
    40be:	9e07      	ldr	r6, [sp, #28]
    40c0:	47b0      	blx	r6
    40c2:	1c43      	adds	r3, r0, #1
    40c4:	d030      	beq.n	4128 <_printf_i+0x224>
    40c6:	3501      	adds	r5, #1
    40c8:	68e3      	ldr	r3, [r4, #12]
    40ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    40cc:	1a9b      	subs	r3, r3, r2
    40ce:	429d      	cmp	r5, r3
    40d0:	dbf0      	blt.n	40b4 <_printf_i+0x1b0>
    40d2:	e7e9      	b.n	40a8 <_printf_i+0x1a4>
    40d4:	2d00      	cmp	r5, #0
    40d6:	d0a9      	beq.n	402c <_printf_i+0x128>
    40d8:	9e04      	ldr	r6, [sp, #16]
    40da:	0028      	movs	r0, r5
    40dc:	0039      	movs	r1, r7
    40de:	f002 f95b 	bl	6398 <__aeabi_uidivmod>
    40e2:	9b03      	ldr	r3, [sp, #12]
    40e4:	3e01      	subs	r6, #1
    40e6:	5c5b      	ldrb	r3, [r3, r1]
    40e8:	0028      	movs	r0, r5
    40ea:	7033      	strb	r3, [r6, #0]
    40ec:	0039      	movs	r1, r7
    40ee:	f002 f8cd 	bl	628c <__udivsi3>
    40f2:	1e05      	subs	r5, r0, #0
    40f4:	d1f1      	bne.n	40da <_printf_i+0x1d6>
    40f6:	2f08      	cmp	r7, #8
    40f8:	d109      	bne.n	410e <_printf_i+0x20a>
    40fa:	6823      	ldr	r3, [r4, #0]
    40fc:	07db      	lsls	r3, r3, #31
    40fe:	d506      	bpl.n	410e <_printf_i+0x20a>
    4100:	6863      	ldr	r3, [r4, #4]
    4102:	6922      	ldr	r2, [r4, #16]
    4104:	4293      	cmp	r3, r2
    4106:	dc02      	bgt.n	410e <_printf_i+0x20a>
    4108:	2330      	movs	r3, #48	; 0x30
    410a:	3e01      	subs	r6, #1
    410c:	7033      	strb	r3, [r6, #0]
    410e:	9b04      	ldr	r3, [sp, #16]
    4110:	1b9b      	subs	r3, r3, r6
    4112:	6123      	str	r3, [r4, #16]
    4114:	9b07      	ldr	r3, [sp, #28]
    4116:	aa09      	add	r2, sp, #36	; 0x24
    4118:	9300      	str	r3, [sp, #0]
    411a:	0021      	movs	r1, r4
    411c:	9b06      	ldr	r3, [sp, #24]
    411e:	9805      	ldr	r0, [sp, #20]
    4120:	f7ff fe82 	bl	3e28 <_printf_common>
    4124:	1c43      	adds	r3, r0, #1
    4126:	d1b3      	bne.n	4090 <_printf_i+0x18c>
    4128:	2001      	movs	r0, #1
    412a:	4240      	negs	r0, r0
    412c:	b00b      	add	sp, #44	; 0x2c
    412e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4130:	00009431 	.word	0x00009431
    4134:	00009420 	.word	0x00009420

00004138 <iprintf>:
    4138:	b40f      	push	{r0, r1, r2, r3}
    413a:	4b0b      	ldr	r3, [pc, #44]	; (4168 <iprintf+0x30>)
    413c:	b513      	push	{r0, r1, r4, lr}
    413e:	681c      	ldr	r4, [r3, #0]
    4140:	2c00      	cmp	r4, #0
    4142:	d005      	beq.n	4150 <iprintf+0x18>
    4144:	69a3      	ldr	r3, [r4, #24]
    4146:	2b00      	cmp	r3, #0
    4148:	d102      	bne.n	4150 <iprintf+0x18>
    414a:	0020      	movs	r0, r4
    414c:	f001 fa86 	bl	565c <__sinit>
    4150:	ab05      	add	r3, sp, #20
    4152:	9a04      	ldr	r2, [sp, #16]
    4154:	68a1      	ldr	r1, [r4, #8]
    4156:	0020      	movs	r0, r4
    4158:	9301      	str	r3, [sp, #4]
    415a:	f001 feb3 	bl	5ec4 <_vfiprintf_r>
    415e:	bc16      	pop	{r1, r2, r4}
    4160:	bc08      	pop	{r3}
    4162:	b004      	add	sp, #16
    4164:	4718      	bx	r3
    4166:	46c0      	nop			; (mov r8, r8)
    4168:	2000000c 	.word	0x2000000c

0000416c <_puts_r>:
    416c:	b570      	push	{r4, r5, r6, lr}
    416e:	0005      	movs	r5, r0
    4170:	000e      	movs	r6, r1
    4172:	2800      	cmp	r0, #0
    4174:	d004      	beq.n	4180 <_puts_r+0x14>
    4176:	6983      	ldr	r3, [r0, #24]
    4178:	2b00      	cmp	r3, #0
    417a:	d101      	bne.n	4180 <_puts_r+0x14>
    417c:	f001 fa6e 	bl	565c <__sinit>
    4180:	69ab      	ldr	r3, [r5, #24]
    4182:	68ac      	ldr	r4, [r5, #8]
    4184:	2b00      	cmp	r3, #0
    4186:	d102      	bne.n	418e <_puts_r+0x22>
    4188:	0028      	movs	r0, r5
    418a:	f001 fa67 	bl	565c <__sinit>
    418e:	4b24      	ldr	r3, [pc, #144]	; (4220 <_puts_r+0xb4>)
    4190:	429c      	cmp	r4, r3
    4192:	d10f      	bne.n	41b4 <_puts_r+0x48>
    4194:	686c      	ldr	r4, [r5, #4]
    4196:	89a3      	ldrh	r3, [r4, #12]
    4198:	071b      	lsls	r3, r3, #28
    419a:	d502      	bpl.n	41a2 <_puts_r+0x36>
    419c:	6923      	ldr	r3, [r4, #16]
    419e:	2b00      	cmp	r3, #0
    41a0:	d120      	bne.n	41e4 <_puts_r+0x78>
    41a2:	0021      	movs	r1, r4
    41a4:	0028      	movs	r0, r5
    41a6:	f000 fa7f 	bl	46a8 <__swsetup_r>
    41aa:	2800      	cmp	r0, #0
    41ac:	d01a      	beq.n	41e4 <_puts_r+0x78>
    41ae:	2001      	movs	r0, #1
    41b0:	4240      	negs	r0, r0
    41b2:	bd70      	pop	{r4, r5, r6, pc}
    41b4:	4b1b      	ldr	r3, [pc, #108]	; (4224 <_puts_r+0xb8>)
    41b6:	429c      	cmp	r4, r3
    41b8:	d101      	bne.n	41be <_puts_r+0x52>
    41ba:	68ac      	ldr	r4, [r5, #8]
    41bc:	e7eb      	b.n	4196 <_puts_r+0x2a>
    41be:	4b1a      	ldr	r3, [pc, #104]	; (4228 <_puts_r+0xbc>)
    41c0:	429c      	cmp	r4, r3
    41c2:	d1e8      	bne.n	4196 <_puts_r+0x2a>
    41c4:	68ec      	ldr	r4, [r5, #12]
    41c6:	e7e6      	b.n	4196 <_puts_r+0x2a>
    41c8:	3b01      	subs	r3, #1
    41ca:	3601      	adds	r6, #1
    41cc:	60a3      	str	r3, [r4, #8]
    41ce:	2b00      	cmp	r3, #0
    41d0:	da04      	bge.n	41dc <_puts_r+0x70>
    41d2:	69a2      	ldr	r2, [r4, #24]
    41d4:	4293      	cmp	r3, r2
    41d6:	db16      	blt.n	4206 <_puts_r+0x9a>
    41d8:	290a      	cmp	r1, #10
    41da:	d014      	beq.n	4206 <_puts_r+0x9a>
    41dc:	6823      	ldr	r3, [r4, #0]
    41de:	1c5a      	adds	r2, r3, #1
    41e0:	6022      	str	r2, [r4, #0]
    41e2:	7019      	strb	r1, [r3, #0]
    41e4:	7831      	ldrb	r1, [r6, #0]
    41e6:	68a3      	ldr	r3, [r4, #8]
    41e8:	2900      	cmp	r1, #0
    41ea:	d1ed      	bne.n	41c8 <_puts_r+0x5c>
    41ec:	3b01      	subs	r3, #1
    41ee:	60a3      	str	r3, [r4, #8]
    41f0:	2b00      	cmp	r3, #0
    41f2:	da0f      	bge.n	4214 <_puts_r+0xa8>
    41f4:	0022      	movs	r2, r4
    41f6:	310a      	adds	r1, #10
    41f8:	0028      	movs	r0, r5
    41fa:	f000 f9f3 	bl	45e4 <__swbuf_r>
    41fe:	1c43      	adds	r3, r0, #1
    4200:	d0d5      	beq.n	41ae <_puts_r+0x42>
    4202:	200a      	movs	r0, #10
    4204:	e7d5      	b.n	41b2 <_puts_r+0x46>
    4206:	0022      	movs	r2, r4
    4208:	0028      	movs	r0, r5
    420a:	f000 f9eb 	bl	45e4 <__swbuf_r>
    420e:	1c43      	adds	r3, r0, #1
    4210:	d1e8      	bne.n	41e4 <_puts_r+0x78>
    4212:	e7cc      	b.n	41ae <_puts_r+0x42>
    4214:	200a      	movs	r0, #10
    4216:	6823      	ldr	r3, [r4, #0]
    4218:	1c5a      	adds	r2, r3, #1
    421a:	6022      	str	r2, [r4, #0]
    421c:	7018      	strb	r0, [r3, #0]
    421e:	e7c8      	b.n	41b2 <_puts_r+0x46>
    4220:	00009570 	.word	0x00009570
    4224:	00009590 	.word	0x00009590
    4228:	00009550 	.word	0x00009550

0000422c <puts>:
    422c:	b510      	push	{r4, lr}
    422e:	4b03      	ldr	r3, [pc, #12]	; (423c <puts+0x10>)
    4230:	0001      	movs	r1, r0
    4232:	6818      	ldr	r0, [r3, #0]
    4234:	f7ff ff9a 	bl	416c <_puts_r>
    4238:	bd10      	pop	{r4, pc}
    423a:	46c0      	nop			; (mov r8, r8)
    423c:	2000000c 	.word	0x2000000c

00004240 <_sbrk_r>:
    4240:	2300      	movs	r3, #0
    4242:	b570      	push	{r4, r5, r6, lr}
    4244:	4c06      	ldr	r4, [pc, #24]	; (4260 <_sbrk_r+0x20>)
    4246:	0005      	movs	r5, r0
    4248:	0008      	movs	r0, r1
    424a:	6023      	str	r3, [r4, #0]
    424c:	f7ff f8a2 	bl	3394 <_sbrk>
    4250:	1c43      	adds	r3, r0, #1
    4252:	d103      	bne.n	425c <_sbrk_r+0x1c>
    4254:	6823      	ldr	r3, [r4, #0]
    4256:	2b00      	cmp	r3, #0
    4258:	d000      	beq.n	425c <_sbrk_r+0x1c>
    425a:	602b      	str	r3, [r5, #0]
    425c:	bd70      	pop	{r4, r5, r6, pc}
    425e:	46c0      	nop			; (mov r8, r8)
    4260:	20000384 	.word	0x20000384

00004264 <setbuf>:
    4264:	424a      	negs	r2, r1
    4266:	414a      	adcs	r2, r1
    4268:	2380      	movs	r3, #128	; 0x80
    426a:	b510      	push	{r4, lr}
    426c:	0052      	lsls	r2, r2, #1
    426e:	00db      	lsls	r3, r3, #3
    4270:	f000 f802 	bl	4278 <setvbuf>
    4274:	bd10      	pop	{r4, pc}
	...

00004278 <setvbuf>:
    4278:	b5f0      	push	{r4, r5, r6, r7, lr}
    427a:	001d      	movs	r5, r3
    427c:	4b4f      	ldr	r3, [pc, #316]	; (43bc <setvbuf+0x144>)
    427e:	b085      	sub	sp, #20
    4280:	681e      	ldr	r6, [r3, #0]
    4282:	0004      	movs	r4, r0
    4284:	000f      	movs	r7, r1
    4286:	9200      	str	r2, [sp, #0]
    4288:	2e00      	cmp	r6, #0
    428a:	d005      	beq.n	4298 <setvbuf+0x20>
    428c:	69b3      	ldr	r3, [r6, #24]
    428e:	2b00      	cmp	r3, #0
    4290:	d102      	bne.n	4298 <setvbuf+0x20>
    4292:	0030      	movs	r0, r6
    4294:	f001 f9e2 	bl	565c <__sinit>
    4298:	4b49      	ldr	r3, [pc, #292]	; (43c0 <setvbuf+0x148>)
    429a:	429c      	cmp	r4, r3
    429c:	d150      	bne.n	4340 <setvbuf+0xc8>
    429e:	6874      	ldr	r4, [r6, #4]
    42a0:	9b00      	ldr	r3, [sp, #0]
    42a2:	2b02      	cmp	r3, #2
    42a4:	d005      	beq.n	42b2 <setvbuf+0x3a>
    42a6:	2b01      	cmp	r3, #1
    42a8:	d900      	bls.n	42ac <setvbuf+0x34>
    42aa:	e084      	b.n	43b6 <setvbuf+0x13e>
    42ac:	2d00      	cmp	r5, #0
    42ae:	da00      	bge.n	42b2 <setvbuf+0x3a>
    42b0:	e081      	b.n	43b6 <setvbuf+0x13e>
    42b2:	0021      	movs	r1, r4
    42b4:	0030      	movs	r0, r6
    42b6:	f001 f963 	bl	5580 <_fflush_r>
    42ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    42bc:	2900      	cmp	r1, #0
    42be:	d008      	beq.n	42d2 <setvbuf+0x5a>
    42c0:	0023      	movs	r3, r4
    42c2:	3344      	adds	r3, #68	; 0x44
    42c4:	4299      	cmp	r1, r3
    42c6:	d002      	beq.n	42ce <setvbuf+0x56>
    42c8:	0030      	movs	r0, r6
    42ca:	f7ff fa1d 	bl	3708 <_free_r>
    42ce:	2300      	movs	r3, #0
    42d0:	6363      	str	r3, [r4, #52]	; 0x34
    42d2:	2300      	movs	r3, #0
    42d4:	61a3      	str	r3, [r4, #24]
    42d6:	6063      	str	r3, [r4, #4]
    42d8:	89a3      	ldrh	r3, [r4, #12]
    42da:	061b      	lsls	r3, r3, #24
    42dc:	d503      	bpl.n	42e6 <setvbuf+0x6e>
    42de:	6921      	ldr	r1, [r4, #16]
    42e0:	0030      	movs	r0, r6
    42e2:	f7ff fa11 	bl	3708 <_free_r>
    42e6:	89a3      	ldrh	r3, [r4, #12]
    42e8:	4a36      	ldr	r2, [pc, #216]	; (43c4 <setvbuf+0x14c>)
    42ea:	4013      	ands	r3, r2
    42ec:	81a3      	strh	r3, [r4, #12]
    42ee:	9b00      	ldr	r3, [sp, #0]
    42f0:	2b02      	cmp	r3, #2
    42f2:	d05a      	beq.n	43aa <setvbuf+0x132>
    42f4:	ab03      	add	r3, sp, #12
    42f6:	aa02      	add	r2, sp, #8
    42f8:	0021      	movs	r1, r4
    42fa:	0030      	movs	r0, r6
    42fc:	f001 fa50 	bl	57a0 <__swhatbuf_r>
    4300:	89a3      	ldrh	r3, [r4, #12]
    4302:	4318      	orrs	r0, r3
    4304:	81a0      	strh	r0, [r4, #12]
    4306:	2d00      	cmp	r5, #0
    4308:	d124      	bne.n	4354 <setvbuf+0xdc>
    430a:	9d02      	ldr	r5, [sp, #8]
    430c:	0028      	movs	r0, r5
    430e:	f7ff f9cd 	bl	36ac <malloc>
    4312:	9501      	str	r5, [sp, #4]
    4314:	1e07      	subs	r7, r0, #0
    4316:	d142      	bne.n	439e <setvbuf+0x126>
    4318:	9b02      	ldr	r3, [sp, #8]
    431a:	9301      	str	r3, [sp, #4]
    431c:	42ab      	cmp	r3, r5
    431e:	d139      	bne.n	4394 <setvbuf+0x11c>
    4320:	2001      	movs	r0, #1
    4322:	4240      	negs	r0, r0
    4324:	2302      	movs	r3, #2
    4326:	89a2      	ldrh	r2, [r4, #12]
    4328:	4313      	orrs	r3, r2
    432a:	81a3      	strh	r3, [r4, #12]
    432c:	2300      	movs	r3, #0
    432e:	60a3      	str	r3, [r4, #8]
    4330:	0023      	movs	r3, r4
    4332:	3347      	adds	r3, #71	; 0x47
    4334:	6023      	str	r3, [r4, #0]
    4336:	6123      	str	r3, [r4, #16]
    4338:	2301      	movs	r3, #1
    433a:	6163      	str	r3, [r4, #20]
    433c:	b005      	add	sp, #20
    433e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4340:	4b21      	ldr	r3, [pc, #132]	; (43c8 <setvbuf+0x150>)
    4342:	429c      	cmp	r4, r3
    4344:	d101      	bne.n	434a <setvbuf+0xd2>
    4346:	68b4      	ldr	r4, [r6, #8]
    4348:	e7aa      	b.n	42a0 <setvbuf+0x28>
    434a:	4b20      	ldr	r3, [pc, #128]	; (43cc <setvbuf+0x154>)
    434c:	429c      	cmp	r4, r3
    434e:	d1a7      	bne.n	42a0 <setvbuf+0x28>
    4350:	68f4      	ldr	r4, [r6, #12]
    4352:	e7a5      	b.n	42a0 <setvbuf+0x28>
    4354:	2f00      	cmp	r7, #0
    4356:	d0d9      	beq.n	430c <setvbuf+0x94>
    4358:	69b3      	ldr	r3, [r6, #24]
    435a:	2b00      	cmp	r3, #0
    435c:	d102      	bne.n	4364 <setvbuf+0xec>
    435e:	0030      	movs	r0, r6
    4360:	f001 f97c 	bl	565c <__sinit>
    4364:	9b00      	ldr	r3, [sp, #0]
    4366:	2b01      	cmp	r3, #1
    4368:	d103      	bne.n	4372 <setvbuf+0xfa>
    436a:	89a3      	ldrh	r3, [r4, #12]
    436c:	9a00      	ldr	r2, [sp, #0]
    436e:	431a      	orrs	r2, r3
    4370:	81a2      	strh	r2, [r4, #12]
    4372:	2008      	movs	r0, #8
    4374:	89a3      	ldrh	r3, [r4, #12]
    4376:	6027      	str	r7, [r4, #0]
    4378:	6127      	str	r7, [r4, #16]
    437a:	6165      	str	r5, [r4, #20]
    437c:	4018      	ands	r0, r3
    437e:	d018      	beq.n	43b2 <setvbuf+0x13a>
    4380:	2001      	movs	r0, #1
    4382:	4018      	ands	r0, r3
    4384:	2300      	movs	r3, #0
    4386:	4298      	cmp	r0, r3
    4388:	d011      	beq.n	43ae <setvbuf+0x136>
    438a:	426d      	negs	r5, r5
    438c:	60a3      	str	r3, [r4, #8]
    438e:	61a5      	str	r5, [r4, #24]
    4390:	0018      	movs	r0, r3
    4392:	e7d3      	b.n	433c <setvbuf+0xc4>
    4394:	9801      	ldr	r0, [sp, #4]
    4396:	f7ff f989 	bl	36ac <malloc>
    439a:	1e07      	subs	r7, r0, #0
    439c:	d0c0      	beq.n	4320 <setvbuf+0xa8>
    439e:	2380      	movs	r3, #128	; 0x80
    43a0:	89a2      	ldrh	r2, [r4, #12]
    43a2:	9d01      	ldr	r5, [sp, #4]
    43a4:	4313      	orrs	r3, r2
    43a6:	81a3      	strh	r3, [r4, #12]
    43a8:	e7d6      	b.n	4358 <setvbuf+0xe0>
    43aa:	2000      	movs	r0, #0
    43ac:	e7ba      	b.n	4324 <setvbuf+0xac>
    43ae:	60a5      	str	r5, [r4, #8]
    43b0:	e7c4      	b.n	433c <setvbuf+0xc4>
    43b2:	60a0      	str	r0, [r4, #8]
    43b4:	e7c2      	b.n	433c <setvbuf+0xc4>
    43b6:	2001      	movs	r0, #1
    43b8:	4240      	negs	r0, r0
    43ba:	e7bf      	b.n	433c <setvbuf+0xc4>
    43bc:	2000000c 	.word	0x2000000c
    43c0:	00009570 	.word	0x00009570
    43c4:	fffff35c 	.word	0xfffff35c
    43c8:	00009590 	.word	0x00009590
    43cc:	00009550 	.word	0x00009550

000043d0 <strcmp>:
    43d0:	7802      	ldrb	r2, [r0, #0]
    43d2:	780b      	ldrb	r3, [r1, #0]
    43d4:	2a00      	cmp	r2, #0
    43d6:	d003      	beq.n	43e0 <strcmp+0x10>
    43d8:	3001      	adds	r0, #1
    43da:	3101      	adds	r1, #1
    43dc:	429a      	cmp	r2, r3
    43de:	d0f7      	beq.n	43d0 <strcmp>
    43e0:	1ad0      	subs	r0, r2, r3
    43e2:	4770      	bx	lr

000043e4 <strcpy>:
    43e4:	1c03      	adds	r3, r0, #0
    43e6:	780a      	ldrb	r2, [r1, #0]
    43e8:	3101      	adds	r1, #1
    43ea:	701a      	strb	r2, [r3, #0]
    43ec:	3301      	adds	r3, #1
    43ee:	2a00      	cmp	r2, #0
    43f0:	d1f9      	bne.n	43e6 <strcpy+0x2>
    43f2:	4770      	bx	lr

000043f4 <strlen>:
    43f4:	2300      	movs	r3, #0
    43f6:	5cc2      	ldrb	r2, [r0, r3]
    43f8:	3301      	adds	r3, #1
    43fa:	2a00      	cmp	r2, #0
    43fc:	d1fb      	bne.n	43f6 <strlen+0x2>
    43fe:	1e58      	subs	r0, r3, #1
    4400:	4770      	bx	lr
	...

00004404 <strtok>:
    4404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4406:	4b12      	ldr	r3, [pc, #72]	; (4450 <strtok+0x4c>)
    4408:	0006      	movs	r6, r0
    440a:	681d      	ldr	r5, [r3, #0]
    440c:	000f      	movs	r7, r1
    440e:	6dac      	ldr	r4, [r5, #88]	; 0x58
    4410:	2c00      	cmp	r4, #0
    4412:	d116      	bne.n	4442 <strtok+0x3e>
    4414:	2050      	movs	r0, #80	; 0x50
    4416:	f7ff f949 	bl	36ac <malloc>
    441a:	65a8      	str	r0, [r5, #88]	; 0x58
    441c:	6004      	str	r4, [r0, #0]
    441e:	6044      	str	r4, [r0, #4]
    4420:	6084      	str	r4, [r0, #8]
    4422:	60c4      	str	r4, [r0, #12]
    4424:	6104      	str	r4, [r0, #16]
    4426:	6144      	str	r4, [r0, #20]
    4428:	6184      	str	r4, [r0, #24]
    442a:	6284      	str	r4, [r0, #40]	; 0x28
    442c:	62c4      	str	r4, [r0, #44]	; 0x2c
    442e:	6304      	str	r4, [r0, #48]	; 0x30
    4430:	6344      	str	r4, [r0, #52]	; 0x34
    4432:	6384      	str	r4, [r0, #56]	; 0x38
    4434:	63c4      	str	r4, [r0, #60]	; 0x3c
    4436:	6404      	str	r4, [r0, #64]	; 0x40
    4438:	6444      	str	r4, [r0, #68]	; 0x44
    443a:	6484      	str	r4, [r0, #72]	; 0x48
    443c:	64c4      	str	r4, [r0, #76]	; 0x4c
    443e:	7704      	strb	r4, [r0, #28]
    4440:	6244      	str	r4, [r0, #36]	; 0x24
    4442:	6daa      	ldr	r2, [r5, #88]	; 0x58
    4444:	0039      	movs	r1, r7
    4446:	0030      	movs	r0, r6
    4448:	2301      	movs	r3, #1
    444a:	f000 f803 	bl	4454 <__strtok_r>
    444e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4450:	2000000c 	.word	0x2000000c

00004454 <__strtok_r>:
    4454:	b5f0      	push	{r4, r5, r6, r7, lr}
    4456:	2800      	cmp	r0, #0
    4458:	d104      	bne.n	4464 <__strtok_r+0x10>
    445a:	6810      	ldr	r0, [r2, #0]
    445c:	2800      	cmp	r0, #0
    445e:	d101      	bne.n	4464 <__strtok_r+0x10>
    4460:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4462:	0020      	movs	r0, r4
    4464:	000e      	movs	r6, r1
    4466:	7805      	ldrb	r5, [r0, #0]
    4468:	1c44      	adds	r4, r0, #1
    446a:	7837      	ldrb	r7, [r6, #0]
    446c:	2f00      	cmp	r7, #0
    446e:	d104      	bne.n	447a <__strtok_r+0x26>
    4470:	2d00      	cmp	r5, #0
    4472:	d110      	bne.n	4496 <__strtok_r+0x42>
    4474:	6015      	str	r5, [r2, #0]
    4476:	0028      	movs	r0, r5
    4478:	e7f2      	b.n	4460 <__strtok_r+0xc>
    447a:	3601      	adds	r6, #1
    447c:	42bd      	cmp	r5, r7
    447e:	d1f4      	bne.n	446a <__strtok_r+0x16>
    4480:	2b00      	cmp	r3, #0
    4482:	d1ee      	bne.n	4462 <__strtok_r+0xe>
    4484:	6014      	str	r4, [r2, #0]
    4486:	7003      	strb	r3, [r0, #0]
    4488:	e7ea      	b.n	4460 <__strtok_r+0xc>
    448a:	0033      	movs	r3, r6
    448c:	e00e      	b.n	44ac <__strtok_r+0x58>
    448e:	3501      	adds	r5, #1
    4490:	001c      	movs	r4, r3
    4492:	2f00      	cmp	r7, #0
    4494:	d102      	bne.n	449c <__strtok_r+0x48>
    4496:	000d      	movs	r5, r1
    4498:	7826      	ldrb	r6, [r4, #0]
    449a:	1c63      	adds	r3, r4, #1
    449c:	782f      	ldrb	r7, [r5, #0]
    449e:	42be      	cmp	r6, r7
    44a0:	d1f5      	bne.n	448e <__strtok_r+0x3a>
    44a2:	2e00      	cmp	r6, #0
    44a4:	d0f1      	beq.n	448a <__strtok_r+0x36>
    44a6:	2400      	movs	r4, #0
    44a8:	1e59      	subs	r1, r3, #1
    44aa:	700c      	strb	r4, [r1, #0]
    44ac:	6013      	str	r3, [r2, #0]
    44ae:	e7d7      	b.n	4460 <__strtok_r+0xc>

000044b0 <_strtol_l.isra.0>:
    44b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44b2:	001f      	movs	r7, r3
    44b4:	000e      	movs	r6, r1
    44b6:	b087      	sub	sp, #28
    44b8:	9005      	str	r0, [sp, #20]
    44ba:	9103      	str	r1, [sp, #12]
    44bc:	9202      	str	r2, [sp, #8]
    44be:	980c      	ldr	r0, [sp, #48]	; 0x30
    44c0:	7834      	ldrb	r4, [r6, #0]
    44c2:	f7ff f8e1 	bl	3688 <__locale_ctype_ptr_l>
    44c6:	2208      	movs	r2, #8
    44c8:	1900      	adds	r0, r0, r4
    44ca:	7843      	ldrb	r3, [r0, #1]
    44cc:	1c75      	adds	r5, r6, #1
    44ce:	4013      	ands	r3, r2
    44d0:	d10c      	bne.n	44ec <_strtol_l.isra.0+0x3c>
    44d2:	2c2d      	cmp	r4, #45	; 0x2d
    44d4:	d10c      	bne.n	44f0 <_strtol_l.isra.0+0x40>
    44d6:	3301      	adds	r3, #1
    44d8:	782c      	ldrb	r4, [r5, #0]
    44da:	9301      	str	r3, [sp, #4]
    44dc:	1cb5      	adds	r5, r6, #2
    44de:	2f00      	cmp	r7, #0
    44e0:	d00c      	beq.n	44fc <_strtol_l.isra.0+0x4c>
    44e2:	2f10      	cmp	r7, #16
    44e4:	d114      	bne.n	4510 <_strtol_l.isra.0+0x60>
    44e6:	2c30      	cmp	r4, #48	; 0x30
    44e8:	d00a      	beq.n	4500 <_strtol_l.isra.0+0x50>
    44ea:	e011      	b.n	4510 <_strtol_l.isra.0+0x60>
    44ec:	002e      	movs	r6, r5
    44ee:	e7e6      	b.n	44be <_strtol_l.isra.0+0xe>
    44f0:	9301      	str	r3, [sp, #4]
    44f2:	2c2b      	cmp	r4, #43	; 0x2b
    44f4:	d1f3      	bne.n	44de <_strtol_l.isra.0+0x2e>
    44f6:	782c      	ldrb	r4, [r5, #0]
    44f8:	1cb5      	adds	r5, r6, #2
    44fa:	e7f0      	b.n	44de <_strtol_l.isra.0+0x2e>
    44fc:	2c30      	cmp	r4, #48	; 0x30
    44fe:	d12f      	bne.n	4560 <_strtol_l.isra.0+0xb0>
    4500:	2220      	movs	r2, #32
    4502:	782b      	ldrb	r3, [r5, #0]
    4504:	4393      	bics	r3, r2
    4506:	2b58      	cmp	r3, #88	; 0x58
    4508:	d151      	bne.n	45ae <_strtol_l.isra.0+0xfe>
    450a:	2710      	movs	r7, #16
    450c:	786c      	ldrb	r4, [r5, #1]
    450e:	3502      	adds	r5, #2
    4510:	9b01      	ldr	r3, [sp, #4]
    4512:	4a29      	ldr	r2, [pc, #164]	; (45b8 <_strtol_l.isra.0+0x108>)
    4514:	0039      	movs	r1, r7
    4516:	189e      	adds	r6, r3, r2
    4518:	0030      	movs	r0, r6
    451a:	f001 ff3d 	bl	6398 <__aeabi_uidivmod>
    451e:	0030      	movs	r0, r6
    4520:	9104      	str	r1, [sp, #16]
    4522:	0039      	movs	r1, r7
    4524:	f001 feb2 	bl	628c <__udivsi3>
    4528:	2101      	movs	r1, #1
    452a:	2300      	movs	r3, #0
    452c:	4249      	negs	r1, r1
    452e:	0002      	movs	r2, r0
    4530:	468c      	mov	ip, r1
    4532:	0018      	movs	r0, r3
    4534:	0021      	movs	r1, r4
    4536:	3930      	subs	r1, #48	; 0x30
    4538:	2909      	cmp	r1, #9
    453a:	d813      	bhi.n	4564 <_strtol_l.isra.0+0xb4>
    453c:	000c      	movs	r4, r1
    453e:	42a7      	cmp	r7, r4
    4540:	dd1c      	ble.n	457c <_strtol_l.isra.0+0xcc>
    4542:	1c59      	adds	r1, r3, #1
    4544:	d009      	beq.n	455a <_strtol_l.isra.0+0xaa>
    4546:	4663      	mov	r3, ip
    4548:	4282      	cmp	r2, r0
    454a:	d306      	bcc.n	455a <_strtol_l.isra.0+0xaa>
    454c:	d102      	bne.n	4554 <_strtol_l.isra.0+0xa4>
    454e:	9904      	ldr	r1, [sp, #16]
    4550:	42a1      	cmp	r1, r4
    4552:	db02      	blt.n	455a <_strtol_l.isra.0+0xaa>
    4554:	2301      	movs	r3, #1
    4556:	4378      	muls	r0, r7
    4558:	1820      	adds	r0, r4, r0
    455a:	782c      	ldrb	r4, [r5, #0]
    455c:	3501      	adds	r5, #1
    455e:	e7e9      	b.n	4534 <_strtol_l.isra.0+0x84>
    4560:	270a      	movs	r7, #10
    4562:	e7d5      	b.n	4510 <_strtol_l.isra.0+0x60>
    4564:	0021      	movs	r1, r4
    4566:	3941      	subs	r1, #65	; 0x41
    4568:	2919      	cmp	r1, #25
    456a:	d801      	bhi.n	4570 <_strtol_l.isra.0+0xc0>
    456c:	3c37      	subs	r4, #55	; 0x37
    456e:	e7e6      	b.n	453e <_strtol_l.isra.0+0x8e>
    4570:	0021      	movs	r1, r4
    4572:	3961      	subs	r1, #97	; 0x61
    4574:	2919      	cmp	r1, #25
    4576:	d801      	bhi.n	457c <_strtol_l.isra.0+0xcc>
    4578:	3c57      	subs	r4, #87	; 0x57
    457a:	e7e0      	b.n	453e <_strtol_l.isra.0+0x8e>
    457c:	1c5a      	adds	r2, r3, #1
    457e:	d108      	bne.n	4592 <_strtol_l.isra.0+0xe2>
    4580:	9a05      	ldr	r2, [sp, #20]
    4582:	3323      	adds	r3, #35	; 0x23
    4584:	6013      	str	r3, [r2, #0]
    4586:	9b02      	ldr	r3, [sp, #8]
    4588:	0030      	movs	r0, r6
    458a:	2b00      	cmp	r3, #0
    458c:	d10b      	bne.n	45a6 <_strtol_l.isra.0+0xf6>
    458e:	b007      	add	sp, #28
    4590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4592:	9a01      	ldr	r2, [sp, #4]
    4594:	2a00      	cmp	r2, #0
    4596:	d000      	beq.n	459a <_strtol_l.isra.0+0xea>
    4598:	4240      	negs	r0, r0
    459a:	9a02      	ldr	r2, [sp, #8]
    459c:	2a00      	cmp	r2, #0
    459e:	d0f6      	beq.n	458e <_strtol_l.isra.0+0xde>
    45a0:	9a03      	ldr	r2, [sp, #12]
    45a2:	2b00      	cmp	r3, #0
    45a4:	d000      	beq.n	45a8 <_strtol_l.isra.0+0xf8>
    45a6:	1e6a      	subs	r2, r5, #1
    45a8:	9b02      	ldr	r3, [sp, #8]
    45aa:	601a      	str	r2, [r3, #0]
    45ac:	e7ef      	b.n	458e <_strtol_l.isra.0+0xde>
    45ae:	2430      	movs	r4, #48	; 0x30
    45b0:	2f00      	cmp	r7, #0
    45b2:	d1ad      	bne.n	4510 <_strtol_l.isra.0+0x60>
    45b4:	3708      	adds	r7, #8
    45b6:	e7ab      	b.n	4510 <_strtol_l.isra.0+0x60>
    45b8:	7fffffff 	.word	0x7fffffff

000045bc <strtol>:
    45bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    45be:	0013      	movs	r3, r2
    45c0:	4a06      	ldr	r2, [pc, #24]	; (45dc <strtol+0x20>)
    45c2:	0005      	movs	r5, r0
    45c4:	6810      	ldr	r0, [r2, #0]
    45c6:	6a04      	ldr	r4, [r0, #32]
    45c8:	2c00      	cmp	r4, #0
    45ca:	d100      	bne.n	45ce <strtol+0x12>
    45cc:	4c04      	ldr	r4, [pc, #16]	; (45e0 <strtol+0x24>)
    45ce:	000a      	movs	r2, r1
    45d0:	9400      	str	r4, [sp, #0]
    45d2:	0029      	movs	r1, r5
    45d4:	f7ff ff6c 	bl	44b0 <_strtol_l.isra.0>
    45d8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    45da:	46c0      	nop			; (mov r8, r8)
    45dc:	2000000c 	.word	0x2000000c
    45e0:	20000070 	.word	0x20000070

000045e4 <__swbuf_r>:
    45e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45e6:	0005      	movs	r5, r0
    45e8:	000e      	movs	r6, r1
    45ea:	0014      	movs	r4, r2
    45ec:	2800      	cmp	r0, #0
    45ee:	d004      	beq.n	45fa <__swbuf_r+0x16>
    45f0:	6983      	ldr	r3, [r0, #24]
    45f2:	2b00      	cmp	r3, #0
    45f4:	d101      	bne.n	45fa <__swbuf_r+0x16>
    45f6:	f001 f831 	bl	565c <__sinit>
    45fa:	4b22      	ldr	r3, [pc, #136]	; (4684 <__swbuf_r+0xa0>)
    45fc:	429c      	cmp	r4, r3
    45fe:	d12d      	bne.n	465c <__swbuf_r+0x78>
    4600:	686c      	ldr	r4, [r5, #4]
    4602:	69a3      	ldr	r3, [r4, #24]
    4604:	60a3      	str	r3, [r4, #8]
    4606:	89a3      	ldrh	r3, [r4, #12]
    4608:	071b      	lsls	r3, r3, #28
    460a:	d531      	bpl.n	4670 <__swbuf_r+0x8c>
    460c:	6923      	ldr	r3, [r4, #16]
    460e:	2b00      	cmp	r3, #0
    4610:	d02e      	beq.n	4670 <__swbuf_r+0x8c>
    4612:	6823      	ldr	r3, [r4, #0]
    4614:	6922      	ldr	r2, [r4, #16]
    4616:	b2f7      	uxtb	r7, r6
    4618:	1a98      	subs	r0, r3, r2
    461a:	6963      	ldr	r3, [r4, #20]
    461c:	b2f6      	uxtb	r6, r6
    461e:	4298      	cmp	r0, r3
    4620:	db05      	blt.n	462e <__swbuf_r+0x4a>
    4622:	0021      	movs	r1, r4
    4624:	0028      	movs	r0, r5
    4626:	f000 ffab 	bl	5580 <_fflush_r>
    462a:	2800      	cmp	r0, #0
    462c:	d126      	bne.n	467c <__swbuf_r+0x98>
    462e:	68a3      	ldr	r3, [r4, #8]
    4630:	3001      	adds	r0, #1
    4632:	3b01      	subs	r3, #1
    4634:	60a3      	str	r3, [r4, #8]
    4636:	6823      	ldr	r3, [r4, #0]
    4638:	1c5a      	adds	r2, r3, #1
    463a:	6022      	str	r2, [r4, #0]
    463c:	701f      	strb	r7, [r3, #0]
    463e:	6963      	ldr	r3, [r4, #20]
    4640:	4298      	cmp	r0, r3
    4642:	d004      	beq.n	464e <__swbuf_r+0x6a>
    4644:	89a3      	ldrh	r3, [r4, #12]
    4646:	07db      	lsls	r3, r3, #31
    4648:	d51a      	bpl.n	4680 <__swbuf_r+0x9c>
    464a:	2e0a      	cmp	r6, #10
    464c:	d118      	bne.n	4680 <__swbuf_r+0x9c>
    464e:	0021      	movs	r1, r4
    4650:	0028      	movs	r0, r5
    4652:	f000 ff95 	bl	5580 <_fflush_r>
    4656:	2800      	cmp	r0, #0
    4658:	d012      	beq.n	4680 <__swbuf_r+0x9c>
    465a:	e00f      	b.n	467c <__swbuf_r+0x98>
    465c:	4b0a      	ldr	r3, [pc, #40]	; (4688 <__swbuf_r+0xa4>)
    465e:	429c      	cmp	r4, r3
    4660:	d101      	bne.n	4666 <__swbuf_r+0x82>
    4662:	68ac      	ldr	r4, [r5, #8]
    4664:	e7cd      	b.n	4602 <__swbuf_r+0x1e>
    4666:	4b09      	ldr	r3, [pc, #36]	; (468c <__swbuf_r+0xa8>)
    4668:	429c      	cmp	r4, r3
    466a:	d1ca      	bne.n	4602 <__swbuf_r+0x1e>
    466c:	68ec      	ldr	r4, [r5, #12]
    466e:	e7c8      	b.n	4602 <__swbuf_r+0x1e>
    4670:	0021      	movs	r1, r4
    4672:	0028      	movs	r0, r5
    4674:	f000 f818 	bl	46a8 <__swsetup_r>
    4678:	2800      	cmp	r0, #0
    467a:	d0ca      	beq.n	4612 <__swbuf_r+0x2e>
    467c:	2601      	movs	r6, #1
    467e:	4276      	negs	r6, r6
    4680:	0030      	movs	r0, r6
    4682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4684:	00009570 	.word	0x00009570
    4688:	00009590 	.word	0x00009590
    468c:	00009550 	.word	0x00009550

00004690 <__ascii_wctomb>:
    4690:	1e0b      	subs	r3, r1, #0
    4692:	d004      	beq.n	469e <__ascii_wctomb+0xe>
    4694:	2aff      	cmp	r2, #255	; 0xff
    4696:	d904      	bls.n	46a2 <__ascii_wctomb+0x12>
    4698:	238a      	movs	r3, #138	; 0x8a
    469a:	6003      	str	r3, [r0, #0]
    469c:	3b8b      	subs	r3, #139	; 0x8b
    469e:	0018      	movs	r0, r3
    46a0:	4770      	bx	lr
    46a2:	700a      	strb	r2, [r1, #0]
    46a4:	2301      	movs	r3, #1
    46a6:	e7fa      	b.n	469e <__ascii_wctomb+0xe>

000046a8 <__swsetup_r>:
    46a8:	4b36      	ldr	r3, [pc, #216]	; (4784 <__swsetup_r+0xdc>)
    46aa:	b570      	push	{r4, r5, r6, lr}
    46ac:	681d      	ldr	r5, [r3, #0]
    46ae:	0006      	movs	r6, r0
    46b0:	000c      	movs	r4, r1
    46b2:	2d00      	cmp	r5, #0
    46b4:	d005      	beq.n	46c2 <__swsetup_r+0x1a>
    46b6:	69ab      	ldr	r3, [r5, #24]
    46b8:	2b00      	cmp	r3, #0
    46ba:	d102      	bne.n	46c2 <__swsetup_r+0x1a>
    46bc:	0028      	movs	r0, r5
    46be:	f000 ffcd 	bl	565c <__sinit>
    46c2:	4b31      	ldr	r3, [pc, #196]	; (4788 <__swsetup_r+0xe0>)
    46c4:	429c      	cmp	r4, r3
    46c6:	d10f      	bne.n	46e8 <__swsetup_r+0x40>
    46c8:	686c      	ldr	r4, [r5, #4]
    46ca:	230c      	movs	r3, #12
    46cc:	5ee2      	ldrsh	r2, [r4, r3]
    46ce:	b293      	uxth	r3, r2
    46d0:	0719      	lsls	r1, r3, #28
    46d2:	d42d      	bmi.n	4730 <__swsetup_r+0x88>
    46d4:	06d9      	lsls	r1, r3, #27
    46d6:	d411      	bmi.n	46fc <__swsetup_r+0x54>
    46d8:	2309      	movs	r3, #9
    46da:	2001      	movs	r0, #1
    46dc:	6033      	str	r3, [r6, #0]
    46de:	3337      	adds	r3, #55	; 0x37
    46e0:	4313      	orrs	r3, r2
    46e2:	81a3      	strh	r3, [r4, #12]
    46e4:	4240      	negs	r0, r0
    46e6:	bd70      	pop	{r4, r5, r6, pc}
    46e8:	4b28      	ldr	r3, [pc, #160]	; (478c <__swsetup_r+0xe4>)
    46ea:	429c      	cmp	r4, r3
    46ec:	d101      	bne.n	46f2 <__swsetup_r+0x4a>
    46ee:	68ac      	ldr	r4, [r5, #8]
    46f0:	e7eb      	b.n	46ca <__swsetup_r+0x22>
    46f2:	4b27      	ldr	r3, [pc, #156]	; (4790 <__swsetup_r+0xe8>)
    46f4:	429c      	cmp	r4, r3
    46f6:	d1e8      	bne.n	46ca <__swsetup_r+0x22>
    46f8:	68ec      	ldr	r4, [r5, #12]
    46fa:	e7e6      	b.n	46ca <__swsetup_r+0x22>
    46fc:	075b      	lsls	r3, r3, #29
    46fe:	d513      	bpl.n	4728 <__swsetup_r+0x80>
    4700:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4702:	2900      	cmp	r1, #0
    4704:	d008      	beq.n	4718 <__swsetup_r+0x70>
    4706:	0023      	movs	r3, r4
    4708:	3344      	adds	r3, #68	; 0x44
    470a:	4299      	cmp	r1, r3
    470c:	d002      	beq.n	4714 <__swsetup_r+0x6c>
    470e:	0030      	movs	r0, r6
    4710:	f7fe fffa 	bl	3708 <_free_r>
    4714:	2300      	movs	r3, #0
    4716:	6363      	str	r3, [r4, #52]	; 0x34
    4718:	2224      	movs	r2, #36	; 0x24
    471a:	89a3      	ldrh	r3, [r4, #12]
    471c:	4393      	bics	r3, r2
    471e:	81a3      	strh	r3, [r4, #12]
    4720:	2300      	movs	r3, #0
    4722:	6063      	str	r3, [r4, #4]
    4724:	6923      	ldr	r3, [r4, #16]
    4726:	6023      	str	r3, [r4, #0]
    4728:	2308      	movs	r3, #8
    472a:	89a2      	ldrh	r2, [r4, #12]
    472c:	4313      	orrs	r3, r2
    472e:	81a3      	strh	r3, [r4, #12]
    4730:	6923      	ldr	r3, [r4, #16]
    4732:	2b00      	cmp	r3, #0
    4734:	d10b      	bne.n	474e <__swsetup_r+0xa6>
    4736:	21a0      	movs	r1, #160	; 0xa0
    4738:	2280      	movs	r2, #128	; 0x80
    473a:	89a3      	ldrh	r3, [r4, #12]
    473c:	0089      	lsls	r1, r1, #2
    473e:	0092      	lsls	r2, r2, #2
    4740:	400b      	ands	r3, r1
    4742:	4293      	cmp	r3, r2
    4744:	d003      	beq.n	474e <__swsetup_r+0xa6>
    4746:	0021      	movs	r1, r4
    4748:	0030      	movs	r0, r6
    474a:	f001 f851 	bl	57f0 <__smakebuf_r>
    474e:	2301      	movs	r3, #1
    4750:	89a2      	ldrh	r2, [r4, #12]
    4752:	4013      	ands	r3, r2
    4754:	d011      	beq.n	477a <__swsetup_r+0xd2>
    4756:	2300      	movs	r3, #0
    4758:	60a3      	str	r3, [r4, #8]
    475a:	6963      	ldr	r3, [r4, #20]
    475c:	425b      	negs	r3, r3
    475e:	61a3      	str	r3, [r4, #24]
    4760:	2000      	movs	r0, #0
    4762:	6923      	ldr	r3, [r4, #16]
    4764:	4283      	cmp	r3, r0
    4766:	d1be      	bne.n	46e6 <__swsetup_r+0x3e>
    4768:	230c      	movs	r3, #12
    476a:	5ee2      	ldrsh	r2, [r4, r3]
    476c:	0613      	lsls	r3, r2, #24
    476e:	d5ba      	bpl.n	46e6 <__swsetup_r+0x3e>
    4770:	2340      	movs	r3, #64	; 0x40
    4772:	4313      	orrs	r3, r2
    4774:	81a3      	strh	r3, [r4, #12]
    4776:	3801      	subs	r0, #1
    4778:	e7b5      	b.n	46e6 <__swsetup_r+0x3e>
    477a:	0792      	lsls	r2, r2, #30
    477c:	d400      	bmi.n	4780 <__swsetup_r+0xd8>
    477e:	6963      	ldr	r3, [r4, #20]
    4780:	60a3      	str	r3, [r4, #8]
    4782:	e7ed      	b.n	4760 <__swsetup_r+0xb8>
    4784:	2000000c 	.word	0x2000000c
    4788:	00009570 	.word	0x00009570
    478c:	00009590 	.word	0x00009590
    4790:	00009550 	.word	0x00009550

00004794 <quorem>:
    4794:	b5f0      	push	{r4, r5, r6, r7, lr}
    4796:	6903      	ldr	r3, [r0, #16]
    4798:	690c      	ldr	r4, [r1, #16]
    479a:	b089      	sub	sp, #36	; 0x24
    479c:	0007      	movs	r7, r0
    479e:	9105      	str	r1, [sp, #20]
    47a0:	2600      	movs	r6, #0
    47a2:	429c      	cmp	r4, r3
    47a4:	dc6d      	bgt.n	4882 <quorem+0xee>
    47a6:	000b      	movs	r3, r1
    47a8:	3c01      	subs	r4, #1
    47aa:	3314      	adds	r3, #20
    47ac:	00a5      	lsls	r5, r4, #2
    47ae:	9303      	str	r3, [sp, #12]
    47b0:	195b      	adds	r3, r3, r5
    47b2:	9304      	str	r3, [sp, #16]
    47b4:	0003      	movs	r3, r0
    47b6:	3314      	adds	r3, #20
    47b8:	9302      	str	r3, [sp, #8]
    47ba:	195d      	adds	r5, r3, r5
    47bc:	9b04      	ldr	r3, [sp, #16]
    47be:	6828      	ldr	r0, [r5, #0]
    47c0:	681b      	ldr	r3, [r3, #0]
    47c2:	1c59      	adds	r1, r3, #1
    47c4:	9301      	str	r3, [sp, #4]
    47c6:	f001 fd61 	bl	628c <__udivsi3>
    47ca:	9001      	str	r0, [sp, #4]
    47cc:	42b0      	cmp	r0, r6
    47ce:	d02d      	beq.n	482c <quorem+0x98>
    47d0:	9b03      	ldr	r3, [sp, #12]
    47d2:	9802      	ldr	r0, [sp, #8]
    47d4:	469c      	mov	ip, r3
    47d6:	9606      	str	r6, [sp, #24]
    47d8:	4662      	mov	r2, ip
    47da:	ca08      	ldmia	r2!, {r3}
    47dc:	4694      	mov	ip, r2
    47de:	9a01      	ldr	r2, [sp, #4]
    47e0:	b299      	uxth	r1, r3
    47e2:	4351      	muls	r1, r2
    47e4:	0c1b      	lsrs	r3, r3, #16
    47e6:	4353      	muls	r3, r2
    47e8:	1989      	adds	r1, r1, r6
    47ea:	0c0a      	lsrs	r2, r1, #16
    47ec:	189b      	adds	r3, r3, r2
    47ee:	9307      	str	r3, [sp, #28]
    47f0:	8802      	ldrh	r2, [r0, #0]
    47f2:	0c1e      	lsrs	r6, r3, #16
    47f4:	9b06      	ldr	r3, [sp, #24]
    47f6:	b289      	uxth	r1, r1
    47f8:	18d2      	adds	r2, r2, r3
    47fa:	6803      	ldr	r3, [r0, #0]
    47fc:	1a52      	subs	r2, r2, r1
    47fe:	0c19      	lsrs	r1, r3, #16
    4800:	466b      	mov	r3, sp
    4802:	8b9b      	ldrh	r3, [r3, #28]
    4804:	1acb      	subs	r3, r1, r3
    4806:	1411      	asrs	r1, r2, #16
    4808:	185b      	adds	r3, r3, r1
    480a:	1419      	asrs	r1, r3, #16
    480c:	b292      	uxth	r2, r2
    480e:	041b      	lsls	r3, r3, #16
    4810:	431a      	orrs	r2, r3
    4812:	9b04      	ldr	r3, [sp, #16]
    4814:	9106      	str	r1, [sp, #24]
    4816:	c004      	stmia	r0!, {r2}
    4818:	4563      	cmp	r3, ip
    481a:	d2dd      	bcs.n	47d8 <quorem+0x44>
    481c:	682b      	ldr	r3, [r5, #0]
    481e:	2b00      	cmp	r3, #0
    4820:	d104      	bne.n	482c <quorem+0x98>
    4822:	9b02      	ldr	r3, [sp, #8]
    4824:	3d04      	subs	r5, #4
    4826:	42ab      	cmp	r3, r5
    4828:	d32e      	bcc.n	4888 <quorem+0xf4>
    482a:	613c      	str	r4, [r7, #16]
    482c:	9905      	ldr	r1, [sp, #20]
    482e:	0038      	movs	r0, r7
    4830:	f001 fa41 	bl	5cb6 <__mcmp>
    4834:	2800      	cmp	r0, #0
    4836:	db23      	blt.n	4880 <quorem+0xec>
    4838:	2500      	movs	r5, #0
    483a:	9b01      	ldr	r3, [sp, #4]
    483c:	9802      	ldr	r0, [sp, #8]
    483e:	3301      	adds	r3, #1
    4840:	9903      	ldr	r1, [sp, #12]
    4842:	9301      	str	r3, [sp, #4]
    4844:	c908      	ldmia	r1!, {r3}
    4846:	8802      	ldrh	r2, [r0, #0]
    4848:	1955      	adds	r5, r2, r5
    484a:	b29a      	uxth	r2, r3
    484c:	1aaa      	subs	r2, r5, r2
    484e:	6805      	ldr	r5, [r0, #0]
    4850:	0c1b      	lsrs	r3, r3, #16
    4852:	0c2d      	lsrs	r5, r5, #16
    4854:	1aeb      	subs	r3, r5, r3
    4856:	1415      	asrs	r5, r2, #16
    4858:	195b      	adds	r3, r3, r5
    485a:	141d      	asrs	r5, r3, #16
    485c:	b292      	uxth	r2, r2
    485e:	041b      	lsls	r3, r3, #16
    4860:	4313      	orrs	r3, r2
    4862:	c008      	stmia	r0!, {r3}
    4864:	9b04      	ldr	r3, [sp, #16]
    4866:	428b      	cmp	r3, r1
    4868:	d2ec      	bcs.n	4844 <quorem+0xb0>
    486a:	9a02      	ldr	r2, [sp, #8]
    486c:	00a3      	lsls	r3, r4, #2
    486e:	18d3      	adds	r3, r2, r3
    4870:	681a      	ldr	r2, [r3, #0]
    4872:	2a00      	cmp	r2, #0
    4874:	d104      	bne.n	4880 <quorem+0xec>
    4876:	9a02      	ldr	r2, [sp, #8]
    4878:	3b04      	subs	r3, #4
    487a:	429a      	cmp	r2, r3
    487c:	d309      	bcc.n	4892 <quorem+0xfe>
    487e:	613c      	str	r4, [r7, #16]
    4880:	9e01      	ldr	r6, [sp, #4]
    4882:	0030      	movs	r0, r6
    4884:	b009      	add	sp, #36	; 0x24
    4886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4888:	682b      	ldr	r3, [r5, #0]
    488a:	2b00      	cmp	r3, #0
    488c:	d1cd      	bne.n	482a <quorem+0x96>
    488e:	3c01      	subs	r4, #1
    4890:	e7c7      	b.n	4822 <quorem+0x8e>
    4892:	681a      	ldr	r2, [r3, #0]
    4894:	2a00      	cmp	r2, #0
    4896:	d1f2      	bne.n	487e <quorem+0xea>
    4898:	3c01      	subs	r4, #1
    489a:	e7ec      	b.n	4876 <quorem+0xe2>

0000489c <_dtoa_r>:
    489c:	b5f0      	push	{r4, r5, r6, r7, lr}
    489e:	0016      	movs	r6, r2
    48a0:	001f      	movs	r7, r3
    48a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    48a4:	b09d      	sub	sp, #116	; 0x74
    48a6:	9004      	str	r0, [sp, #16]
    48a8:	9d25      	ldr	r5, [sp, #148]	; 0x94
    48aa:	9606      	str	r6, [sp, #24]
    48ac:	9707      	str	r7, [sp, #28]
    48ae:	2c00      	cmp	r4, #0
    48b0:	d108      	bne.n	48c4 <_dtoa_r+0x28>
    48b2:	2010      	movs	r0, #16
    48b4:	f7fe fefa 	bl	36ac <malloc>
    48b8:	9b04      	ldr	r3, [sp, #16]
    48ba:	6258      	str	r0, [r3, #36]	; 0x24
    48bc:	6044      	str	r4, [r0, #4]
    48be:	6084      	str	r4, [r0, #8]
    48c0:	6004      	str	r4, [r0, #0]
    48c2:	60c4      	str	r4, [r0, #12]
    48c4:	9b04      	ldr	r3, [sp, #16]
    48c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    48c8:	6819      	ldr	r1, [r3, #0]
    48ca:	2900      	cmp	r1, #0
    48cc:	d00b      	beq.n	48e6 <_dtoa_r+0x4a>
    48ce:	685a      	ldr	r2, [r3, #4]
    48d0:	2301      	movs	r3, #1
    48d2:	4093      	lsls	r3, r2
    48d4:	604a      	str	r2, [r1, #4]
    48d6:	608b      	str	r3, [r1, #8]
    48d8:	9804      	ldr	r0, [sp, #16]
    48da:	f001 f812 	bl	5902 <_Bfree>
    48de:	2200      	movs	r2, #0
    48e0:	9b04      	ldr	r3, [sp, #16]
    48e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    48e4:	601a      	str	r2, [r3, #0]
    48e6:	9b07      	ldr	r3, [sp, #28]
    48e8:	2b00      	cmp	r3, #0
    48ea:	da1f      	bge.n	492c <_dtoa_r+0x90>
    48ec:	2301      	movs	r3, #1
    48ee:	602b      	str	r3, [r5, #0]
    48f0:	007b      	lsls	r3, r7, #1
    48f2:	085b      	lsrs	r3, r3, #1
    48f4:	9307      	str	r3, [sp, #28]
    48f6:	9c07      	ldr	r4, [sp, #28]
    48f8:	4bb7      	ldr	r3, [pc, #732]	; (4bd8 <_dtoa_r+0x33c>)
    48fa:	0022      	movs	r2, r4
    48fc:	9319      	str	r3, [sp, #100]	; 0x64
    48fe:	401a      	ands	r2, r3
    4900:	429a      	cmp	r2, r3
    4902:	d116      	bne.n	4932 <_dtoa_r+0x96>
    4904:	4bb5      	ldr	r3, [pc, #724]	; (4bdc <_dtoa_r+0x340>)
    4906:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4908:	6013      	str	r3, [r2, #0]
    490a:	9b06      	ldr	r3, [sp, #24]
    490c:	2b00      	cmp	r3, #0
    490e:	d103      	bne.n	4918 <_dtoa_r+0x7c>
    4910:	0324      	lsls	r4, r4, #12
    4912:	d101      	bne.n	4918 <_dtoa_r+0x7c>
    4914:	f000 fd91 	bl	543a <_dtoa_r+0xb9e>
    4918:	4bb1      	ldr	r3, [pc, #708]	; (4be0 <_dtoa_r+0x344>)
    491a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    491c:	930a      	str	r3, [sp, #40]	; 0x28
    491e:	4bb1      	ldr	r3, [pc, #708]	; (4be4 <_dtoa_r+0x348>)
    4920:	2a00      	cmp	r2, #0
    4922:	d001      	beq.n	4928 <_dtoa_r+0x8c>
    4924:	f000 fd8f 	bl	5446 <_dtoa_r+0xbaa>
    4928:	f000 fd8f 	bl	544a <_dtoa_r+0xbae>
    492c:	2300      	movs	r3, #0
    492e:	602b      	str	r3, [r5, #0]
    4930:	e7e1      	b.n	48f6 <_dtoa_r+0x5a>
    4932:	9e06      	ldr	r6, [sp, #24]
    4934:	9f07      	ldr	r7, [sp, #28]
    4936:	2200      	movs	r2, #0
    4938:	2300      	movs	r3, #0
    493a:	0030      	movs	r0, r6
    493c:	0039      	movs	r1, r7
    493e:	f001 fe2b 	bl	6598 <__aeabi_dcmpeq>
    4942:	1e05      	subs	r5, r0, #0
    4944:	d00e      	beq.n	4964 <_dtoa_r+0xc8>
    4946:	2301      	movs	r3, #1
    4948:	9a24      	ldr	r2, [sp, #144]	; 0x90
    494a:	6013      	str	r3, [r2, #0]
    494c:	4ba6      	ldr	r3, [pc, #664]	; (4be8 <_dtoa_r+0x34c>)
    494e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4950:	930a      	str	r3, [sp, #40]	; 0x28
    4952:	2a00      	cmp	r2, #0
    4954:	d101      	bne.n	495a <_dtoa_r+0xbe>
    4956:	f000 fd78 	bl	544a <_dtoa_r+0xbae>
    495a:	4aa4      	ldr	r2, [pc, #656]	; (4bec <_dtoa_r+0x350>)
    495c:	9926      	ldr	r1, [sp, #152]	; 0x98
    495e:	600a      	str	r2, [r1, #0]
    4960:	f000 fd73 	bl	544a <_dtoa_r+0xbae>
    4964:	ab1a      	add	r3, sp, #104	; 0x68
    4966:	9301      	str	r3, [sp, #4]
    4968:	ab1b      	add	r3, sp, #108	; 0x6c
    496a:	9300      	str	r3, [sp, #0]
    496c:	0032      	movs	r2, r6
    496e:	003b      	movs	r3, r7
    4970:	9804      	ldr	r0, [sp, #16]
    4972:	f001 fa1d 	bl	5db0 <__d2b>
    4976:	0063      	lsls	r3, r4, #1
    4978:	9005      	str	r0, [sp, #20]
    497a:	0d5b      	lsrs	r3, r3, #21
    497c:	d100      	bne.n	4980 <_dtoa_r+0xe4>
    497e:	e07f      	b.n	4a80 <_dtoa_r+0x1e4>
    4980:	033a      	lsls	r2, r7, #12
    4982:	4c9b      	ldr	r4, [pc, #620]	; (4bf0 <_dtoa_r+0x354>)
    4984:	0b12      	lsrs	r2, r2, #12
    4986:	4314      	orrs	r4, r2
    4988:	0021      	movs	r1, r4
    498a:	4a9a      	ldr	r2, [pc, #616]	; (4bf4 <_dtoa_r+0x358>)
    498c:	0030      	movs	r0, r6
    498e:	9518      	str	r5, [sp, #96]	; 0x60
    4990:	189e      	adds	r6, r3, r2
    4992:	2200      	movs	r2, #0
    4994:	4b98      	ldr	r3, [pc, #608]	; (4bf8 <_dtoa_r+0x35c>)
    4996:	f003 fad3 	bl	7f40 <__aeabi_dsub>
    499a:	4a98      	ldr	r2, [pc, #608]	; (4bfc <_dtoa_r+0x360>)
    499c:	4b98      	ldr	r3, [pc, #608]	; (4c00 <_dtoa_r+0x364>)
    499e:	f003 f84f 	bl	7a40 <__aeabi_dmul>
    49a2:	4a98      	ldr	r2, [pc, #608]	; (4c04 <_dtoa_r+0x368>)
    49a4:	4b98      	ldr	r3, [pc, #608]	; (4c08 <_dtoa_r+0x36c>)
    49a6:	f002 f907 	bl	6bb8 <__aeabi_dadd>
    49aa:	0004      	movs	r4, r0
    49ac:	0030      	movs	r0, r6
    49ae:	000d      	movs	r5, r1
    49b0:	f003 fe30 	bl	8614 <__aeabi_i2d>
    49b4:	4a95      	ldr	r2, [pc, #596]	; (4c0c <_dtoa_r+0x370>)
    49b6:	4b96      	ldr	r3, [pc, #600]	; (4c10 <_dtoa_r+0x374>)
    49b8:	f003 f842 	bl	7a40 <__aeabi_dmul>
    49bc:	0002      	movs	r2, r0
    49be:	000b      	movs	r3, r1
    49c0:	0020      	movs	r0, r4
    49c2:	0029      	movs	r1, r5
    49c4:	f002 f8f8 	bl	6bb8 <__aeabi_dadd>
    49c8:	0004      	movs	r4, r0
    49ca:	000d      	movs	r5, r1
    49cc:	f003 fdee 	bl	85ac <__aeabi_d2iz>
    49d0:	2200      	movs	r2, #0
    49d2:	9003      	str	r0, [sp, #12]
    49d4:	2300      	movs	r3, #0
    49d6:	0020      	movs	r0, r4
    49d8:	0029      	movs	r1, r5
    49da:	f001 fde3 	bl	65a4 <__aeabi_dcmplt>
    49de:	2800      	cmp	r0, #0
    49e0:	d00e      	beq.n	4a00 <_dtoa_r+0x164>
    49e2:	9803      	ldr	r0, [sp, #12]
    49e4:	f003 fe16 	bl	8614 <__aeabi_i2d>
    49e8:	000b      	movs	r3, r1
    49ea:	0002      	movs	r2, r0
    49ec:	0029      	movs	r1, r5
    49ee:	0020      	movs	r0, r4
    49f0:	f001 fdd2 	bl	6598 <__aeabi_dcmpeq>
    49f4:	0003      	movs	r3, r0
    49f6:	4258      	negs	r0, r3
    49f8:	4158      	adcs	r0, r3
    49fa:	9b03      	ldr	r3, [sp, #12]
    49fc:	1a1b      	subs	r3, r3, r0
    49fe:	9303      	str	r3, [sp, #12]
    4a00:	2301      	movs	r3, #1
    4a02:	9316      	str	r3, [sp, #88]	; 0x58
    4a04:	9b03      	ldr	r3, [sp, #12]
    4a06:	2b16      	cmp	r3, #22
    4a08:	d80f      	bhi.n	4a2a <_dtoa_r+0x18e>
    4a0a:	4982      	ldr	r1, [pc, #520]	; (4c14 <_dtoa_r+0x378>)
    4a0c:	00db      	lsls	r3, r3, #3
    4a0e:	18c9      	adds	r1, r1, r3
    4a10:	6808      	ldr	r0, [r1, #0]
    4a12:	6849      	ldr	r1, [r1, #4]
    4a14:	9a06      	ldr	r2, [sp, #24]
    4a16:	9b07      	ldr	r3, [sp, #28]
    4a18:	f001 fdd8 	bl	65cc <__aeabi_dcmpgt>
    4a1c:	2800      	cmp	r0, #0
    4a1e:	d04b      	beq.n	4ab8 <_dtoa_r+0x21c>
    4a20:	9b03      	ldr	r3, [sp, #12]
    4a22:	3b01      	subs	r3, #1
    4a24:	9303      	str	r3, [sp, #12]
    4a26:	2300      	movs	r3, #0
    4a28:	9316      	str	r3, [sp, #88]	; 0x58
    4a2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4a2c:	1b9e      	subs	r6, r3, r6
    4a2e:	2300      	movs	r3, #0
    4a30:	930b      	str	r3, [sp, #44]	; 0x2c
    4a32:	0033      	movs	r3, r6
    4a34:	3b01      	subs	r3, #1
    4a36:	930c      	str	r3, [sp, #48]	; 0x30
    4a38:	d504      	bpl.n	4a44 <_dtoa_r+0x1a8>
    4a3a:	2301      	movs	r3, #1
    4a3c:	1b9b      	subs	r3, r3, r6
    4a3e:	930b      	str	r3, [sp, #44]	; 0x2c
    4a40:	2300      	movs	r3, #0
    4a42:	930c      	str	r3, [sp, #48]	; 0x30
    4a44:	9b03      	ldr	r3, [sp, #12]
    4a46:	2b00      	cmp	r3, #0
    4a48:	db38      	blt.n	4abc <_dtoa_r+0x220>
    4a4a:	9a03      	ldr	r2, [sp, #12]
    4a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4a4e:	4694      	mov	ip, r2
    4a50:	4463      	add	r3, ip
    4a52:	930c      	str	r3, [sp, #48]	; 0x30
    4a54:	2300      	movs	r3, #0
    4a56:	920f      	str	r2, [sp, #60]	; 0x3c
    4a58:	9308      	str	r3, [sp, #32]
    4a5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4a5c:	2501      	movs	r5, #1
    4a5e:	2b09      	cmp	r3, #9
    4a60:	d900      	bls.n	4a64 <_dtoa_r+0x1c8>
    4a62:	e091      	b.n	4b88 <_dtoa_r+0x2ec>
    4a64:	2b05      	cmp	r3, #5
    4a66:	dd02      	ble.n	4a6e <_dtoa_r+0x1d2>
    4a68:	2500      	movs	r5, #0
    4a6a:	3b04      	subs	r3, #4
    4a6c:	9322      	str	r3, [sp, #136]	; 0x88
    4a6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4a70:	1e98      	subs	r0, r3, #2
    4a72:	2803      	cmp	r0, #3
    4a74:	d900      	bls.n	4a78 <_dtoa_r+0x1dc>
    4a76:	e091      	b.n	4b9c <_dtoa_r+0x300>
    4a78:	f001 fbfe 	bl	6278 <__gnu_thumb1_case_uqi>
    4a7c:	76298482 	.word	0x76298482
    4a80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4a82:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    4a84:	189e      	adds	r6, r3, r2
    4a86:	4b64      	ldr	r3, [pc, #400]	; (4c18 <_dtoa_r+0x37c>)
    4a88:	18f2      	adds	r2, r6, r3
    4a8a:	2a20      	cmp	r2, #32
    4a8c:	dd0f      	ble.n	4aae <_dtoa_r+0x212>
    4a8e:	4b63      	ldr	r3, [pc, #396]	; (4c1c <_dtoa_r+0x380>)
    4a90:	9806      	ldr	r0, [sp, #24]
    4a92:	18f3      	adds	r3, r6, r3
    4a94:	40d8      	lsrs	r0, r3
    4a96:	2340      	movs	r3, #64	; 0x40
    4a98:	1a9b      	subs	r3, r3, r2
    4a9a:	409c      	lsls	r4, r3
    4a9c:	4320      	orrs	r0, r4
    4a9e:	f003 fdfb 	bl	8698 <__aeabi_ui2d>
    4aa2:	2301      	movs	r3, #1
    4aa4:	4c5e      	ldr	r4, [pc, #376]	; (4c20 <_dtoa_r+0x384>)
    4aa6:	3e01      	subs	r6, #1
    4aa8:	1909      	adds	r1, r1, r4
    4aaa:	9318      	str	r3, [sp, #96]	; 0x60
    4aac:	e771      	b.n	4992 <_dtoa_r+0xf6>
    4aae:	2320      	movs	r3, #32
    4ab0:	9806      	ldr	r0, [sp, #24]
    4ab2:	1a9b      	subs	r3, r3, r2
    4ab4:	4098      	lsls	r0, r3
    4ab6:	e7f2      	b.n	4a9e <_dtoa_r+0x202>
    4ab8:	9016      	str	r0, [sp, #88]	; 0x58
    4aba:	e7b6      	b.n	4a2a <_dtoa_r+0x18e>
    4abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4abe:	9a03      	ldr	r2, [sp, #12]
    4ac0:	1a9b      	subs	r3, r3, r2
    4ac2:	930b      	str	r3, [sp, #44]	; 0x2c
    4ac4:	4253      	negs	r3, r2
    4ac6:	9308      	str	r3, [sp, #32]
    4ac8:	2300      	movs	r3, #0
    4aca:	930f      	str	r3, [sp, #60]	; 0x3c
    4acc:	e7c5      	b.n	4a5a <_dtoa_r+0x1be>
    4ace:	2301      	movs	r3, #1
    4ad0:	930e      	str	r3, [sp, #56]	; 0x38
    4ad2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4ad4:	2b00      	cmp	r3, #0
    4ad6:	dd65      	ble.n	4ba4 <_dtoa_r+0x308>
    4ad8:	001f      	movs	r7, r3
    4ada:	930d      	str	r3, [sp, #52]	; 0x34
    4adc:	9a04      	ldr	r2, [sp, #16]
    4ade:	6a54      	ldr	r4, [r2, #36]	; 0x24
    4ae0:	2200      	movs	r2, #0
    4ae2:	6062      	str	r2, [r4, #4]
    4ae4:	3204      	adds	r2, #4
    4ae6:	0011      	movs	r1, r2
    4ae8:	3114      	adds	r1, #20
    4aea:	4299      	cmp	r1, r3
    4aec:	d95f      	bls.n	4bae <_dtoa_r+0x312>
    4aee:	6861      	ldr	r1, [r4, #4]
    4af0:	9804      	ldr	r0, [sp, #16]
    4af2:	f000 fece 	bl	5892 <_Balloc>
    4af6:	9b04      	ldr	r3, [sp, #16]
    4af8:	6020      	str	r0, [r4, #0]
    4afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4afc:	681b      	ldr	r3, [r3, #0]
    4afe:	930a      	str	r3, [sp, #40]	; 0x28
    4b00:	2f0e      	cmp	r7, #14
    4b02:	d900      	bls.n	4b06 <_dtoa_r+0x26a>
    4b04:	e105      	b.n	4d12 <_dtoa_r+0x476>
    4b06:	2d00      	cmp	r5, #0
    4b08:	d100      	bne.n	4b0c <_dtoa_r+0x270>
    4b0a:	e102      	b.n	4d12 <_dtoa_r+0x476>
    4b0c:	9b06      	ldr	r3, [sp, #24]
    4b0e:	9c07      	ldr	r4, [sp, #28]
    4b10:	9314      	str	r3, [sp, #80]	; 0x50
    4b12:	9415      	str	r4, [sp, #84]	; 0x54
    4b14:	9b03      	ldr	r3, [sp, #12]
    4b16:	2b00      	cmp	r3, #0
    4b18:	dc00      	bgt.n	4b1c <_dtoa_r+0x280>
    4b1a:	e085      	b.n	4c28 <_dtoa_r+0x38c>
    4b1c:	001a      	movs	r2, r3
    4b1e:	210f      	movs	r1, #15
    4b20:	4b3c      	ldr	r3, [pc, #240]	; (4c14 <_dtoa_r+0x378>)
    4b22:	400a      	ands	r2, r1
    4b24:	00d2      	lsls	r2, r2, #3
    4b26:	189b      	adds	r3, r3, r2
    4b28:	685c      	ldr	r4, [r3, #4]
    4b2a:	681b      	ldr	r3, [r3, #0]
    4b2c:	9310      	str	r3, [sp, #64]	; 0x40
    4b2e:	9411      	str	r4, [sp, #68]	; 0x44
    4b30:	9b03      	ldr	r3, [sp, #12]
    4b32:	2402      	movs	r4, #2
    4b34:	111d      	asrs	r5, r3, #4
    4b36:	06eb      	lsls	r3, r5, #27
    4b38:	d50a      	bpl.n	4b50 <_dtoa_r+0x2b4>
    4b3a:	4b3a      	ldr	r3, [pc, #232]	; (4c24 <_dtoa_r+0x388>)
    4b3c:	400d      	ands	r5, r1
    4b3e:	6a1a      	ldr	r2, [r3, #32]
    4b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4b42:	9814      	ldr	r0, [sp, #80]	; 0x50
    4b44:	9915      	ldr	r1, [sp, #84]	; 0x54
    4b46:	f002 fb47 	bl	71d8 <__aeabi_ddiv>
    4b4a:	9006      	str	r0, [sp, #24]
    4b4c:	9107      	str	r1, [sp, #28]
    4b4e:	3401      	adds	r4, #1
    4b50:	4e34      	ldr	r6, [pc, #208]	; (4c24 <_dtoa_r+0x388>)
    4b52:	2d00      	cmp	r5, #0
    4b54:	d130      	bne.n	4bb8 <_dtoa_r+0x31c>
    4b56:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4b58:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4b5a:	9806      	ldr	r0, [sp, #24]
    4b5c:	9907      	ldr	r1, [sp, #28]
    4b5e:	f002 fb3b 	bl	71d8 <__aeabi_ddiv>
    4b62:	9006      	str	r0, [sp, #24]
    4b64:	9107      	str	r1, [sp, #28]
    4b66:	e07a      	b.n	4c5e <_dtoa_r+0x3c2>
    4b68:	2301      	movs	r3, #1
    4b6a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4b6c:	930e      	str	r3, [sp, #56]	; 0x38
    4b6e:	4694      	mov	ip, r2
    4b70:	9b03      	ldr	r3, [sp, #12]
    4b72:	4463      	add	r3, ip
    4b74:	1c5f      	adds	r7, r3, #1
    4b76:	930d      	str	r3, [sp, #52]	; 0x34
    4b78:	1e3b      	subs	r3, r7, #0
    4b7a:	dcaf      	bgt.n	4adc <_dtoa_r+0x240>
    4b7c:	2301      	movs	r3, #1
    4b7e:	e7ad      	b.n	4adc <_dtoa_r+0x240>
    4b80:	2300      	movs	r3, #0
    4b82:	e7a5      	b.n	4ad0 <_dtoa_r+0x234>
    4b84:	2300      	movs	r3, #0
    4b86:	e7f0      	b.n	4b6a <_dtoa_r+0x2ce>
    4b88:	2300      	movs	r3, #0
    4b8a:	950e      	str	r5, [sp, #56]	; 0x38
    4b8c:	9322      	str	r3, [sp, #136]	; 0x88
    4b8e:	3b01      	subs	r3, #1
    4b90:	2200      	movs	r2, #0
    4b92:	930d      	str	r3, [sp, #52]	; 0x34
    4b94:	001f      	movs	r7, r3
    4b96:	3313      	adds	r3, #19
    4b98:	9223      	str	r2, [sp, #140]	; 0x8c
    4b9a:	e79f      	b.n	4adc <_dtoa_r+0x240>
    4b9c:	2301      	movs	r3, #1
    4b9e:	930e      	str	r3, [sp, #56]	; 0x38
    4ba0:	3b02      	subs	r3, #2
    4ba2:	e7f5      	b.n	4b90 <_dtoa_r+0x2f4>
    4ba4:	2301      	movs	r3, #1
    4ba6:	930d      	str	r3, [sp, #52]	; 0x34
    4ba8:	001f      	movs	r7, r3
    4baa:	001a      	movs	r2, r3
    4bac:	e7f4      	b.n	4b98 <_dtoa_r+0x2fc>
    4bae:	6861      	ldr	r1, [r4, #4]
    4bb0:	0052      	lsls	r2, r2, #1
    4bb2:	3101      	adds	r1, #1
    4bb4:	6061      	str	r1, [r4, #4]
    4bb6:	e796      	b.n	4ae6 <_dtoa_r+0x24a>
    4bb8:	2301      	movs	r3, #1
    4bba:	421d      	tst	r5, r3
    4bbc:	d008      	beq.n	4bd0 <_dtoa_r+0x334>
    4bbe:	9810      	ldr	r0, [sp, #64]	; 0x40
    4bc0:	9911      	ldr	r1, [sp, #68]	; 0x44
    4bc2:	18e4      	adds	r4, r4, r3
    4bc4:	6832      	ldr	r2, [r6, #0]
    4bc6:	6873      	ldr	r3, [r6, #4]
    4bc8:	f002 ff3a 	bl	7a40 <__aeabi_dmul>
    4bcc:	9010      	str	r0, [sp, #64]	; 0x40
    4bce:	9111      	str	r1, [sp, #68]	; 0x44
    4bd0:	106d      	asrs	r5, r5, #1
    4bd2:	3608      	adds	r6, #8
    4bd4:	e7bd      	b.n	4b52 <_dtoa_r+0x2b6>
    4bd6:	46c0      	nop			; (mov r8, r8)
    4bd8:	7ff00000 	.word	0x7ff00000
    4bdc:	0000270f 	.word	0x0000270f
    4be0:	0000954c 	.word	0x0000954c
    4be4:	0000954f 	.word	0x0000954f
    4be8:	0000941e 	.word	0x0000941e
    4bec:	0000941f 	.word	0x0000941f
    4bf0:	3ff00000 	.word	0x3ff00000
    4bf4:	fffffc01 	.word	0xfffffc01
    4bf8:	3ff80000 	.word	0x3ff80000
    4bfc:	636f4361 	.word	0x636f4361
    4c00:	3fd287a7 	.word	0x3fd287a7
    4c04:	8b60c8b3 	.word	0x8b60c8b3
    4c08:	3fc68a28 	.word	0x3fc68a28
    4c0c:	509f79fb 	.word	0x509f79fb
    4c10:	3fd34413 	.word	0x3fd34413
    4c14:	000095d8 	.word	0x000095d8
    4c18:	00000432 	.word	0x00000432
    4c1c:	00000412 	.word	0x00000412
    4c20:	fe100000 	.word	0xfe100000
    4c24:	000095b0 	.word	0x000095b0
    4c28:	9b03      	ldr	r3, [sp, #12]
    4c2a:	2402      	movs	r4, #2
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	d016      	beq.n	4c5e <_dtoa_r+0x3c2>
    4c30:	9814      	ldr	r0, [sp, #80]	; 0x50
    4c32:	9915      	ldr	r1, [sp, #84]	; 0x54
    4c34:	425d      	negs	r5, r3
    4c36:	230f      	movs	r3, #15
    4c38:	4aca      	ldr	r2, [pc, #808]	; (4f64 <_dtoa_r+0x6c8>)
    4c3a:	402b      	ands	r3, r5
    4c3c:	00db      	lsls	r3, r3, #3
    4c3e:	18d3      	adds	r3, r2, r3
    4c40:	681a      	ldr	r2, [r3, #0]
    4c42:	685b      	ldr	r3, [r3, #4]
    4c44:	f002 fefc 	bl	7a40 <__aeabi_dmul>
    4c48:	2300      	movs	r3, #0
    4c4a:	9006      	str	r0, [sp, #24]
    4c4c:	9107      	str	r1, [sp, #28]
    4c4e:	4ec6      	ldr	r6, [pc, #792]	; (4f68 <_dtoa_r+0x6cc>)
    4c50:	112d      	asrs	r5, r5, #4
    4c52:	2d00      	cmp	r5, #0
    4c54:	d000      	beq.n	4c58 <_dtoa_r+0x3bc>
    4c56:	e08c      	b.n	4d72 <_dtoa_r+0x4d6>
    4c58:	2b00      	cmp	r3, #0
    4c5a:	d000      	beq.n	4c5e <_dtoa_r+0x3c2>
    4c5c:	e781      	b.n	4b62 <_dtoa_r+0x2c6>
    4c5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4c60:	2b00      	cmp	r3, #0
    4c62:	d100      	bne.n	4c66 <_dtoa_r+0x3ca>
    4c64:	e091      	b.n	4d8a <_dtoa_r+0x4ee>
    4c66:	9a06      	ldr	r2, [sp, #24]
    4c68:	9b07      	ldr	r3, [sp, #28]
    4c6a:	9210      	str	r2, [sp, #64]	; 0x40
    4c6c:	9311      	str	r3, [sp, #68]	; 0x44
    4c6e:	9810      	ldr	r0, [sp, #64]	; 0x40
    4c70:	9911      	ldr	r1, [sp, #68]	; 0x44
    4c72:	2200      	movs	r2, #0
    4c74:	4bbd      	ldr	r3, [pc, #756]	; (4f6c <_dtoa_r+0x6d0>)
    4c76:	f001 fc95 	bl	65a4 <__aeabi_dcmplt>
    4c7a:	2800      	cmp	r0, #0
    4c7c:	d100      	bne.n	4c80 <_dtoa_r+0x3e4>
    4c7e:	e084      	b.n	4d8a <_dtoa_r+0x4ee>
    4c80:	2f00      	cmp	r7, #0
    4c82:	d100      	bne.n	4c86 <_dtoa_r+0x3ea>
    4c84:	e081      	b.n	4d8a <_dtoa_r+0x4ee>
    4c86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4c88:	2b00      	cmp	r3, #0
    4c8a:	dd3e      	ble.n	4d0a <_dtoa_r+0x46e>
    4c8c:	9810      	ldr	r0, [sp, #64]	; 0x40
    4c8e:	9911      	ldr	r1, [sp, #68]	; 0x44
    4c90:	9b03      	ldr	r3, [sp, #12]
    4c92:	2200      	movs	r2, #0
    4c94:	1e5e      	subs	r6, r3, #1
    4c96:	4bb6      	ldr	r3, [pc, #728]	; (4f70 <_dtoa_r+0x6d4>)
    4c98:	f002 fed2 	bl	7a40 <__aeabi_dmul>
    4c9c:	9006      	str	r0, [sp, #24]
    4c9e:	9107      	str	r1, [sp, #28]
    4ca0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4ca2:	3401      	adds	r4, #1
    4ca4:	0020      	movs	r0, r4
    4ca6:	f003 fcb5 	bl	8614 <__aeabi_i2d>
    4caa:	9a06      	ldr	r2, [sp, #24]
    4cac:	9b07      	ldr	r3, [sp, #28]
    4cae:	f002 fec7 	bl	7a40 <__aeabi_dmul>
    4cb2:	2200      	movs	r2, #0
    4cb4:	4baf      	ldr	r3, [pc, #700]	; (4f74 <_dtoa_r+0x6d8>)
    4cb6:	f001 ff7f 	bl	6bb8 <__aeabi_dadd>
    4cba:	9012      	str	r0, [sp, #72]	; 0x48
    4cbc:	9113      	str	r1, [sp, #76]	; 0x4c
    4cbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4cc0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    4cc2:	4aad      	ldr	r2, [pc, #692]	; (4f78 <_dtoa_r+0x6dc>)
    4cc4:	9310      	str	r3, [sp, #64]	; 0x40
    4cc6:	9411      	str	r4, [sp, #68]	; 0x44
    4cc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4cca:	189c      	adds	r4, r3, r2
    4ccc:	9411      	str	r4, [sp, #68]	; 0x44
    4cce:	2d00      	cmp	r5, #0
    4cd0:	d15e      	bne.n	4d90 <_dtoa_r+0x4f4>
    4cd2:	9806      	ldr	r0, [sp, #24]
    4cd4:	9907      	ldr	r1, [sp, #28]
    4cd6:	2200      	movs	r2, #0
    4cd8:	4ba8      	ldr	r3, [pc, #672]	; (4f7c <_dtoa_r+0x6e0>)
    4cda:	f003 f931 	bl	7f40 <__aeabi_dsub>
    4cde:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4ce0:	0023      	movs	r3, r4
    4ce2:	9006      	str	r0, [sp, #24]
    4ce4:	9107      	str	r1, [sp, #28]
    4ce6:	f001 fc71 	bl	65cc <__aeabi_dcmpgt>
    4cea:	2800      	cmp	r0, #0
    4cec:	d000      	beq.n	4cf0 <_dtoa_r+0x454>
    4cee:	e301      	b.n	52f4 <_dtoa_r+0xa58>
    4cf0:	48a3      	ldr	r0, [pc, #652]	; (4f80 <_dtoa_r+0x6e4>)
    4cf2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4cf4:	4684      	mov	ip, r0
    4cf6:	4461      	add	r1, ip
    4cf8:	000b      	movs	r3, r1
    4cfa:	9806      	ldr	r0, [sp, #24]
    4cfc:	9907      	ldr	r1, [sp, #28]
    4cfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4d00:	f001 fc50 	bl	65a4 <__aeabi_dcmplt>
    4d04:	2800      	cmp	r0, #0
    4d06:	d000      	beq.n	4d0a <_dtoa_r+0x46e>
    4d08:	e2e8      	b.n	52dc <_dtoa_r+0xa40>
    4d0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4d0c:	9c15      	ldr	r4, [sp, #84]	; 0x54
    4d0e:	9306      	str	r3, [sp, #24]
    4d10:	9407      	str	r4, [sp, #28]
    4d12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    4d14:	2b00      	cmp	r3, #0
    4d16:	da00      	bge.n	4d1a <_dtoa_r+0x47e>
    4d18:	e157      	b.n	4fca <_dtoa_r+0x72e>
    4d1a:	9a03      	ldr	r2, [sp, #12]
    4d1c:	2a0e      	cmp	r2, #14
    4d1e:	dd00      	ble.n	4d22 <_dtoa_r+0x486>
    4d20:	e153      	b.n	4fca <_dtoa_r+0x72e>
    4d22:	4b90      	ldr	r3, [pc, #576]	; (4f64 <_dtoa_r+0x6c8>)
    4d24:	00d2      	lsls	r2, r2, #3
    4d26:	189b      	adds	r3, r3, r2
    4d28:	685c      	ldr	r4, [r3, #4]
    4d2a:	681b      	ldr	r3, [r3, #0]
    4d2c:	9308      	str	r3, [sp, #32]
    4d2e:	9409      	str	r4, [sp, #36]	; 0x24
    4d30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4d32:	2b00      	cmp	r3, #0
    4d34:	db00      	blt.n	4d38 <_dtoa_r+0x49c>
    4d36:	e0ce      	b.n	4ed6 <_dtoa_r+0x63a>
    4d38:	2f00      	cmp	r7, #0
    4d3a:	dd00      	ble.n	4d3e <_dtoa_r+0x4a2>
    4d3c:	e0cb      	b.n	4ed6 <_dtoa_r+0x63a>
    4d3e:	d000      	beq.n	4d42 <_dtoa_r+0x4a6>
    4d40:	e2cf      	b.n	52e2 <_dtoa_r+0xa46>
    4d42:	9808      	ldr	r0, [sp, #32]
    4d44:	9909      	ldr	r1, [sp, #36]	; 0x24
    4d46:	2200      	movs	r2, #0
    4d48:	4b8c      	ldr	r3, [pc, #560]	; (4f7c <_dtoa_r+0x6e0>)
    4d4a:	f002 fe79 	bl	7a40 <__aeabi_dmul>
    4d4e:	9a06      	ldr	r2, [sp, #24]
    4d50:	9b07      	ldr	r3, [sp, #28]
    4d52:	f001 fc45 	bl	65e0 <__aeabi_dcmpge>
    4d56:	003e      	movs	r6, r7
    4d58:	9708      	str	r7, [sp, #32]
    4d5a:	2800      	cmp	r0, #0
    4d5c:	d000      	beq.n	4d60 <_dtoa_r+0x4c4>
    4d5e:	e2a4      	b.n	52aa <_dtoa_r+0xa0e>
    4d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4d62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4d64:	1c5d      	adds	r5, r3, #1
    4d66:	2331      	movs	r3, #49	; 0x31
    4d68:	7013      	strb	r3, [r2, #0]
    4d6a:	9b03      	ldr	r3, [sp, #12]
    4d6c:	3301      	adds	r3, #1
    4d6e:	9303      	str	r3, [sp, #12]
    4d70:	e29f      	b.n	52b2 <_dtoa_r+0xa16>
    4d72:	2201      	movs	r2, #1
    4d74:	4215      	tst	r5, r2
    4d76:	d005      	beq.n	4d84 <_dtoa_r+0x4e8>
    4d78:	18a4      	adds	r4, r4, r2
    4d7a:	6832      	ldr	r2, [r6, #0]
    4d7c:	6873      	ldr	r3, [r6, #4]
    4d7e:	f002 fe5f 	bl	7a40 <__aeabi_dmul>
    4d82:	2301      	movs	r3, #1
    4d84:	106d      	asrs	r5, r5, #1
    4d86:	3608      	adds	r6, #8
    4d88:	e763      	b.n	4c52 <_dtoa_r+0x3b6>
    4d8a:	9e03      	ldr	r6, [sp, #12]
    4d8c:	003d      	movs	r5, r7
    4d8e:	e789      	b.n	4ca4 <_dtoa_r+0x408>
    4d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4d92:	1e69      	subs	r1, r5, #1
    4d94:	1952      	adds	r2, r2, r5
    4d96:	9217      	str	r2, [sp, #92]	; 0x5c
    4d98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4d9a:	4b72      	ldr	r3, [pc, #456]	; (4f64 <_dtoa_r+0x6c8>)
    4d9c:	00c9      	lsls	r1, r1, #3
    4d9e:	2a00      	cmp	r2, #0
    4da0:	d04a      	beq.n	4e38 <_dtoa_r+0x59c>
    4da2:	185b      	adds	r3, r3, r1
    4da4:	681a      	ldr	r2, [r3, #0]
    4da6:	685b      	ldr	r3, [r3, #4]
    4da8:	2000      	movs	r0, #0
    4daa:	4976      	ldr	r1, [pc, #472]	; (4f84 <_dtoa_r+0x6e8>)
    4dac:	f002 fa14 	bl	71d8 <__aeabi_ddiv>
    4db0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4db2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4db4:	f003 f8c4 	bl	7f40 <__aeabi_dsub>
    4db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4dba:	9010      	str	r0, [sp, #64]	; 0x40
    4dbc:	9111      	str	r1, [sp, #68]	; 0x44
    4dbe:	9312      	str	r3, [sp, #72]	; 0x48
    4dc0:	9806      	ldr	r0, [sp, #24]
    4dc2:	9907      	ldr	r1, [sp, #28]
    4dc4:	f003 fbf2 	bl	85ac <__aeabi_d2iz>
    4dc8:	0004      	movs	r4, r0
    4dca:	f003 fc23 	bl	8614 <__aeabi_i2d>
    4dce:	0002      	movs	r2, r0
    4dd0:	000b      	movs	r3, r1
    4dd2:	9806      	ldr	r0, [sp, #24]
    4dd4:	9907      	ldr	r1, [sp, #28]
    4dd6:	f003 f8b3 	bl	7f40 <__aeabi_dsub>
    4dda:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4ddc:	3430      	adds	r4, #48	; 0x30
    4dde:	1c5d      	adds	r5, r3, #1
    4de0:	701c      	strb	r4, [r3, #0]
    4de2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4de4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4de6:	9006      	str	r0, [sp, #24]
    4de8:	9107      	str	r1, [sp, #28]
    4dea:	f001 fbdb 	bl	65a4 <__aeabi_dcmplt>
    4dee:	2800      	cmp	r0, #0
    4df0:	d165      	bne.n	4ebe <_dtoa_r+0x622>
    4df2:	9a06      	ldr	r2, [sp, #24]
    4df4:	9b07      	ldr	r3, [sp, #28]
    4df6:	2000      	movs	r0, #0
    4df8:	495c      	ldr	r1, [pc, #368]	; (4f6c <_dtoa_r+0x6d0>)
    4dfa:	f003 f8a1 	bl	7f40 <__aeabi_dsub>
    4dfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4e00:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4e02:	f001 fbcf 	bl	65a4 <__aeabi_dcmplt>
    4e06:	2800      	cmp	r0, #0
    4e08:	d000      	beq.n	4e0c <_dtoa_r+0x570>
    4e0a:	e0be      	b.n	4f8a <_dtoa_r+0x6ee>
    4e0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4e0e:	429d      	cmp	r5, r3
    4e10:	d100      	bne.n	4e14 <_dtoa_r+0x578>
    4e12:	e77a      	b.n	4d0a <_dtoa_r+0x46e>
    4e14:	9810      	ldr	r0, [sp, #64]	; 0x40
    4e16:	9911      	ldr	r1, [sp, #68]	; 0x44
    4e18:	2200      	movs	r2, #0
    4e1a:	4b55      	ldr	r3, [pc, #340]	; (4f70 <_dtoa_r+0x6d4>)
    4e1c:	f002 fe10 	bl	7a40 <__aeabi_dmul>
    4e20:	2200      	movs	r2, #0
    4e22:	9010      	str	r0, [sp, #64]	; 0x40
    4e24:	9111      	str	r1, [sp, #68]	; 0x44
    4e26:	9806      	ldr	r0, [sp, #24]
    4e28:	9907      	ldr	r1, [sp, #28]
    4e2a:	4b51      	ldr	r3, [pc, #324]	; (4f70 <_dtoa_r+0x6d4>)
    4e2c:	f002 fe08 	bl	7a40 <__aeabi_dmul>
    4e30:	9512      	str	r5, [sp, #72]	; 0x48
    4e32:	9006      	str	r0, [sp, #24]
    4e34:	9107      	str	r1, [sp, #28]
    4e36:	e7c3      	b.n	4dc0 <_dtoa_r+0x524>
    4e38:	1859      	adds	r1, r3, r1
    4e3a:	6808      	ldr	r0, [r1, #0]
    4e3c:	6849      	ldr	r1, [r1, #4]
    4e3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4e40:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4e42:	f002 fdfd 	bl	7a40 <__aeabi_dmul>
    4e46:	9010      	str	r0, [sp, #64]	; 0x40
    4e48:	9111      	str	r1, [sp, #68]	; 0x44
    4e4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4e4c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    4e4e:	9806      	ldr	r0, [sp, #24]
    4e50:	9907      	ldr	r1, [sp, #28]
    4e52:	f003 fbab 	bl	85ac <__aeabi_d2iz>
    4e56:	9012      	str	r0, [sp, #72]	; 0x48
    4e58:	f003 fbdc 	bl	8614 <__aeabi_i2d>
    4e5c:	0002      	movs	r2, r0
    4e5e:	000b      	movs	r3, r1
    4e60:	9806      	ldr	r0, [sp, #24]
    4e62:	9907      	ldr	r1, [sp, #28]
    4e64:	f003 f86c 	bl	7f40 <__aeabi_dsub>
    4e68:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4e6a:	9006      	str	r0, [sp, #24]
    4e6c:	9107      	str	r1, [sp, #28]
    4e6e:	3330      	adds	r3, #48	; 0x30
    4e70:	7023      	strb	r3, [r4, #0]
    4e72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4e74:	3401      	adds	r4, #1
    4e76:	2200      	movs	r2, #0
    4e78:	42a3      	cmp	r3, r4
    4e7a:	d124      	bne.n	4ec6 <_dtoa_r+0x62a>
    4e7c:	4b41      	ldr	r3, [pc, #260]	; (4f84 <_dtoa_r+0x6e8>)
    4e7e:	9810      	ldr	r0, [sp, #64]	; 0x40
    4e80:	9911      	ldr	r1, [sp, #68]	; 0x44
    4e82:	f001 fe99 	bl	6bb8 <__aeabi_dadd>
    4e86:	0002      	movs	r2, r0
    4e88:	000b      	movs	r3, r1
    4e8a:	9806      	ldr	r0, [sp, #24]
    4e8c:	9907      	ldr	r1, [sp, #28]
    4e8e:	f001 fb9d 	bl	65cc <__aeabi_dcmpgt>
    4e92:	2800      	cmp	r0, #0
    4e94:	d000      	beq.n	4e98 <_dtoa_r+0x5fc>
    4e96:	e078      	b.n	4f8a <_dtoa_r+0x6ee>
    4e98:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4e9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4e9c:	2000      	movs	r0, #0
    4e9e:	4939      	ldr	r1, [pc, #228]	; (4f84 <_dtoa_r+0x6e8>)
    4ea0:	f003 f84e 	bl	7f40 <__aeabi_dsub>
    4ea4:	0002      	movs	r2, r0
    4ea6:	000b      	movs	r3, r1
    4ea8:	9806      	ldr	r0, [sp, #24]
    4eaa:	9907      	ldr	r1, [sp, #28]
    4eac:	f001 fb7a 	bl	65a4 <__aeabi_dcmplt>
    4eb0:	2800      	cmp	r0, #0
    4eb2:	d100      	bne.n	4eb6 <_dtoa_r+0x61a>
    4eb4:	e729      	b.n	4d0a <_dtoa_r+0x46e>
    4eb6:	1e6b      	subs	r3, r5, #1
    4eb8:	781a      	ldrb	r2, [r3, #0]
    4eba:	2a30      	cmp	r2, #48	; 0x30
    4ebc:	d001      	beq.n	4ec2 <_dtoa_r+0x626>
    4ebe:	9603      	str	r6, [sp, #12]
    4ec0:	e03f      	b.n	4f42 <_dtoa_r+0x6a6>
    4ec2:	001d      	movs	r5, r3
    4ec4:	e7f7      	b.n	4eb6 <_dtoa_r+0x61a>
    4ec6:	9806      	ldr	r0, [sp, #24]
    4ec8:	9907      	ldr	r1, [sp, #28]
    4eca:	4b29      	ldr	r3, [pc, #164]	; (4f70 <_dtoa_r+0x6d4>)
    4ecc:	f002 fdb8 	bl	7a40 <__aeabi_dmul>
    4ed0:	9006      	str	r0, [sp, #24]
    4ed2:	9107      	str	r1, [sp, #28]
    4ed4:	e7bb      	b.n	4e4e <_dtoa_r+0x5b2>
    4ed6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    4ed8:	9a08      	ldr	r2, [sp, #32]
    4eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4edc:	9806      	ldr	r0, [sp, #24]
    4ede:	9907      	ldr	r1, [sp, #28]
    4ee0:	f002 f97a 	bl	71d8 <__aeabi_ddiv>
    4ee4:	f003 fb62 	bl	85ac <__aeabi_d2iz>
    4ee8:	0004      	movs	r4, r0
    4eea:	f003 fb93 	bl	8614 <__aeabi_i2d>
    4eee:	9a08      	ldr	r2, [sp, #32]
    4ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4ef2:	f002 fda5 	bl	7a40 <__aeabi_dmul>
    4ef6:	000b      	movs	r3, r1
    4ef8:	0002      	movs	r2, r0
    4efa:	9806      	ldr	r0, [sp, #24]
    4efc:	9907      	ldr	r1, [sp, #28]
    4efe:	f003 f81f 	bl	7f40 <__aeabi_dsub>
    4f02:	0023      	movs	r3, r4
    4f04:	3330      	adds	r3, #48	; 0x30
    4f06:	7033      	strb	r3, [r6, #0]
    4f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4f0a:	1c75      	adds	r5, r6, #1
    4f0c:	1aeb      	subs	r3, r5, r3
    4f0e:	429f      	cmp	r7, r3
    4f10:	d14c      	bne.n	4fac <_dtoa_r+0x710>
    4f12:	0002      	movs	r2, r0
    4f14:	000b      	movs	r3, r1
    4f16:	f001 fe4f 	bl	6bb8 <__aeabi_dadd>
    4f1a:	0006      	movs	r6, r0
    4f1c:	000f      	movs	r7, r1
    4f1e:	0002      	movs	r2, r0
    4f20:	000b      	movs	r3, r1
    4f22:	9808      	ldr	r0, [sp, #32]
    4f24:	9909      	ldr	r1, [sp, #36]	; 0x24
    4f26:	f001 fb3d 	bl	65a4 <__aeabi_dcmplt>
    4f2a:	2800      	cmp	r0, #0
    4f2c:	d12c      	bne.n	4f88 <_dtoa_r+0x6ec>
    4f2e:	9808      	ldr	r0, [sp, #32]
    4f30:	9909      	ldr	r1, [sp, #36]	; 0x24
    4f32:	0032      	movs	r2, r6
    4f34:	003b      	movs	r3, r7
    4f36:	f001 fb2f 	bl	6598 <__aeabi_dcmpeq>
    4f3a:	2800      	cmp	r0, #0
    4f3c:	d001      	beq.n	4f42 <_dtoa_r+0x6a6>
    4f3e:	07e3      	lsls	r3, r4, #31
    4f40:	d422      	bmi.n	4f88 <_dtoa_r+0x6ec>
    4f42:	9905      	ldr	r1, [sp, #20]
    4f44:	9804      	ldr	r0, [sp, #16]
    4f46:	f000 fcdc 	bl	5902 <_Bfree>
    4f4a:	2300      	movs	r3, #0
    4f4c:	702b      	strb	r3, [r5, #0]
    4f4e:	9b03      	ldr	r3, [sp, #12]
    4f50:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4f52:	3301      	adds	r3, #1
    4f54:	6013      	str	r3, [r2, #0]
    4f56:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4f58:	2b00      	cmp	r3, #0
    4f5a:	d100      	bne.n	4f5e <_dtoa_r+0x6c2>
    4f5c:	e275      	b.n	544a <_dtoa_r+0xbae>
    4f5e:	601d      	str	r5, [r3, #0]
    4f60:	e273      	b.n	544a <_dtoa_r+0xbae>
    4f62:	46c0      	nop			; (mov r8, r8)
    4f64:	000095d8 	.word	0x000095d8
    4f68:	000095b0 	.word	0x000095b0
    4f6c:	3ff00000 	.word	0x3ff00000
    4f70:	40240000 	.word	0x40240000
    4f74:	401c0000 	.word	0x401c0000
    4f78:	fcc00000 	.word	0xfcc00000
    4f7c:	40140000 	.word	0x40140000
    4f80:	7cc00000 	.word	0x7cc00000
    4f84:	3fe00000 	.word	0x3fe00000
    4f88:	9e03      	ldr	r6, [sp, #12]
    4f8a:	1e6b      	subs	r3, r5, #1
    4f8c:	781a      	ldrb	r2, [r3, #0]
    4f8e:	2a39      	cmp	r2, #57	; 0x39
    4f90:	d106      	bne.n	4fa0 <_dtoa_r+0x704>
    4f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4f94:	429a      	cmp	r2, r3
    4f96:	d107      	bne.n	4fa8 <_dtoa_r+0x70c>
    4f98:	2330      	movs	r3, #48	; 0x30
    4f9a:	7013      	strb	r3, [r2, #0]
    4f9c:	0013      	movs	r3, r2
    4f9e:	3601      	adds	r6, #1
    4fa0:	781a      	ldrb	r2, [r3, #0]
    4fa2:	3201      	adds	r2, #1
    4fa4:	701a      	strb	r2, [r3, #0]
    4fa6:	e78a      	b.n	4ebe <_dtoa_r+0x622>
    4fa8:	001d      	movs	r5, r3
    4faa:	e7ee      	b.n	4f8a <_dtoa_r+0x6ee>
    4fac:	2200      	movs	r2, #0
    4fae:	4bcf      	ldr	r3, [pc, #828]	; (52ec <_dtoa_r+0xa50>)
    4fb0:	f002 fd46 	bl	7a40 <__aeabi_dmul>
    4fb4:	2200      	movs	r2, #0
    4fb6:	2300      	movs	r3, #0
    4fb8:	9006      	str	r0, [sp, #24]
    4fba:	9107      	str	r1, [sp, #28]
    4fbc:	002e      	movs	r6, r5
    4fbe:	f001 faeb 	bl	6598 <__aeabi_dcmpeq>
    4fc2:	2800      	cmp	r0, #0
    4fc4:	d100      	bne.n	4fc8 <_dtoa_r+0x72c>
    4fc6:	e787      	b.n	4ed8 <_dtoa_r+0x63c>
    4fc8:	e7bb      	b.n	4f42 <_dtoa_r+0x6a6>
    4fca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4fcc:	2a00      	cmp	r2, #0
    4fce:	d100      	bne.n	4fd2 <_dtoa_r+0x736>
    4fd0:	e087      	b.n	50e2 <_dtoa_r+0x846>
    4fd2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4fd4:	2a01      	cmp	r2, #1
    4fd6:	dc6e      	bgt.n	50b6 <_dtoa_r+0x81a>
    4fd8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    4fda:	2a00      	cmp	r2, #0
    4fdc:	d067      	beq.n	50ae <_dtoa_r+0x812>
    4fde:	4ac4      	ldr	r2, [pc, #784]	; (52f0 <_dtoa_r+0xa54>)
    4fe0:	189b      	adds	r3, r3, r2
    4fe2:	9d08      	ldr	r5, [sp, #32]
    4fe4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4fe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4fe8:	2101      	movs	r1, #1
    4fea:	18d2      	adds	r2, r2, r3
    4fec:	920b      	str	r2, [sp, #44]	; 0x2c
    4fee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4ff0:	9804      	ldr	r0, [sp, #16]
    4ff2:	18d3      	adds	r3, r2, r3
    4ff4:	930c      	str	r3, [sp, #48]	; 0x30
    4ff6:	f000 fd22 	bl	5a3e <__i2b>
    4ffa:	0006      	movs	r6, r0
    4ffc:	2c00      	cmp	r4, #0
    4ffe:	dd0e      	ble.n	501e <_dtoa_r+0x782>
    5000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5002:	2b00      	cmp	r3, #0
    5004:	dd0b      	ble.n	501e <_dtoa_r+0x782>
    5006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5008:	0023      	movs	r3, r4
    500a:	4294      	cmp	r4, r2
    500c:	dd00      	ble.n	5010 <_dtoa_r+0x774>
    500e:	0013      	movs	r3, r2
    5010:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5012:	1ae4      	subs	r4, r4, r3
    5014:	1ad2      	subs	r2, r2, r3
    5016:	920b      	str	r2, [sp, #44]	; 0x2c
    5018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    501a:	1ad3      	subs	r3, r2, r3
    501c:	930c      	str	r3, [sp, #48]	; 0x30
    501e:	9b08      	ldr	r3, [sp, #32]
    5020:	2b00      	cmp	r3, #0
    5022:	d01e      	beq.n	5062 <_dtoa_r+0x7c6>
    5024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5026:	2b00      	cmp	r3, #0
    5028:	d05f      	beq.n	50ea <_dtoa_r+0x84e>
    502a:	2d00      	cmp	r5, #0
    502c:	dd11      	ble.n	5052 <_dtoa_r+0x7b6>
    502e:	0031      	movs	r1, r6
    5030:	002a      	movs	r2, r5
    5032:	9804      	ldr	r0, [sp, #16]
    5034:	f000 fd9c 	bl	5b70 <__pow5mult>
    5038:	9a05      	ldr	r2, [sp, #20]
    503a:	0001      	movs	r1, r0
    503c:	0006      	movs	r6, r0
    503e:	9804      	ldr	r0, [sp, #16]
    5040:	f000 fd06 	bl	5a50 <__multiply>
    5044:	9905      	ldr	r1, [sp, #20]
    5046:	9010      	str	r0, [sp, #64]	; 0x40
    5048:	9804      	ldr	r0, [sp, #16]
    504a:	f000 fc5a 	bl	5902 <_Bfree>
    504e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5050:	9305      	str	r3, [sp, #20]
    5052:	9b08      	ldr	r3, [sp, #32]
    5054:	1b5a      	subs	r2, r3, r5
    5056:	d004      	beq.n	5062 <_dtoa_r+0x7c6>
    5058:	9905      	ldr	r1, [sp, #20]
    505a:	9804      	ldr	r0, [sp, #16]
    505c:	f000 fd88 	bl	5b70 <__pow5mult>
    5060:	9005      	str	r0, [sp, #20]
    5062:	2101      	movs	r1, #1
    5064:	9804      	ldr	r0, [sp, #16]
    5066:	f000 fcea 	bl	5a3e <__i2b>
    506a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    506c:	9008      	str	r0, [sp, #32]
    506e:	2b00      	cmp	r3, #0
    5070:	dd3d      	ble.n	50ee <_dtoa_r+0x852>
    5072:	001a      	movs	r2, r3
    5074:	0001      	movs	r1, r0
    5076:	9804      	ldr	r0, [sp, #16]
    5078:	f000 fd7a 	bl	5b70 <__pow5mult>
    507c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    507e:	9008      	str	r0, [sp, #32]
    5080:	2500      	movs	r5, #0
    5082:	2b01      	cmp	r3, #1
    5084:	dc3b      	bgt.n	50fe <_dtoa_r+0x862>
    5086:	2500      	movs	r5, #0
    5088:	9b06      	ldr	r3, [sp, #24]
    508a:	42ab      	cmp	r3, r5
    508c:	d133      	bne.n	50f6 <_dtoa_r+0x85a>
    508e:	9b07      	ldr	r3, [sp, #28]
    5090:	031b      	lsls	r3, r3, #12
    5092:	42ab      	cmp	r3, r5
    5094:	d12f      	bne.n	50f6 <_dtoa_r+0x85a>
    5096:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5098:	9a07      	ldr	r2, [sp, #28]
    509a:	4213      	tst	r3, r2
    509c:	d02b      	beq.n	50f6 <_dtoa_r+0x85a>
    509e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    50a0:	3501      	adds	r5, #1
    50a2:	3301      	adds	r3, #1
    50a4:	930b      	str	r3, [sp, #44]	; 0x2c
    50a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    50a8:	3301      	adds	r3, #1
    50aa:	930c      	str	r3, [sp, #48]	; 0x30
    50ac:	e023      	b.n	50f6 <_dtoa_r+0x85a>
    50ae:	2336      	movs	r3, #54	; 0x36
    50b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    50b2:	1a9b      	subs	r3, r3, r2
    50b4:	e795      	b.n	4fe2 <_dtoa_r+0x746>
    50b6:	9b08      	ldr	r3, [sp, #32]
    50b8:	1e7d      	subs	r5, r7, #1
    50ba:	42ab      	cmp	r3, r5
    50bc:	db06      	blt.n	50cc <_dtoa_r+0x830>
    50be:	1b5d      	subs	r5, r3, r5
    50c0:	2f00      	cmp	r7, #0
    50c2:	da0b      	bge.n	50dc <_dtoa_r+0x840>
    50c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    50c6:	1bdc      	subs	r4, r3, r7
    50c8:	2300      	movs	r3, #0
    50ca:	e78c      	b.n	4fe6 <_dtoa_r+0x74a>
    50cc:	9b08      	ldr	r3, [sp, #32]
    50ce:	9508      	str	r5, [sp, #32]
    50d0:	1aea      	subs	r2, r5, r3
    50d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    50d4:	2500      	movs	r5, #0
    50d6:	189b      	adds	r3, r3, r2
    50d8:	930f      	str	r3, [sp, #60]	; 0x3c
    50da:	e7f1      	b.n	50c0 <_dtoa_r+0x824>
    50dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    50de:	003b      	movs	r3, r7
    50e0:	e781      	b.n	4fe6 <_dtoa_r+0x74a>
    50e2:	9d08      	ldr	r5, [sp, #32]
    50e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    50e6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    50e8:	e788      	b.n	4ffc <_dtoa_r+0x760>
    50ea:	9a08      	ldr	r2, [sp, #32]
    50ec:	e7b4      	b.n	5058 <_dtoa_r+0x7bc>
    50ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
    50f0:	2500      	movs	r5, #0
    50f2:	2b01      	cmp	r3, #1
    50f4:	ddc7      	ble.n	5086 <_dtoa_r+0x7ea>
    50f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    50f8:	2001      	movs	r0, #1
    50fa:	2b00      	cmp	r3, #0
    50fc:	d00b      	beq.n	5116 <_dtoa_r+0x87a>
    50fe:	9b08      	ldr	r3, [sp, #32]
    5100:	9a08      	ldr	r2, [sp, #32]
    5102:	691b      	ldr	r3, [r3, #16]
    5104:	930f      	str	r3, [sp, #60]	; 0x3c
    5106:	3303      	adds	r3, #3
    5108:	009b      	lsls	r3, r3, #2
    510a:	18d3      	adds	r3, r2, r3
    510c:	6858      	ldr	r0, [r3, #4]
    510e:	f000 fc4d 	bl	59ac <__hi0bits>
    5112:	2320      	movs	r3, #32
    5114:	1a18      	subs	r0, r3, r0
    5116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5118:	18c0      	adds	r0, r0, r3
    511a:	231f      	movs	r3, #31
    511c:	4018      	ands	r0, r3
    511e:	d100      	bne.n	5122 <_dtoa_r+0x886>
    5120:	e0ab      	b.n	527a <_dtoa_r+0x9de>
    5122:	3301      	adds	r3, #1
    5124:	1a1b      	subs	r3, r3, r0
    5126:	2b04      	cmp	r3, #4
    5128:	dc00      	bgt.n	512c <_dtoa_r+0x890>
    512a:	e09b      	b.n	5264 <_dtoa_r+0x9c8>
    512c:	231c      	movs	r3, #28
    512e:	1a18      	subs	r0, r3, r0
    5130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5132:	1824      	adds	r4, r4, r0
    5134:	181b      	adds	r3, r3, r0
    5136:	930b      	str	r3, [sp, #44]	; 0x2c
    5138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    513a:	181b      	adds	r3, r3, r0
    513c:	930c      	str	r3, [sp, #48]	; 0x30
    513e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5140:	2b00      	cmp	r3, #0
    5142:	dd05      	ble.n	5150 <_dtoa_r+0x8b4>
    5144:	001a      	movs	r2, r3
    5146:	9905      	ldr	r1, [sp, #20]
    5148:	9804      	ldr	r0, [sp, #16]
    514a:	f000 fd63 	bl	5c14 <__lshift>
    514e:	9005      	str	r0, [sp, #20]
    5150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5152:	2b00      	cmp	r3, #0
    5154:	dd05      	ble.n	5162 <_dtoa_r+0x8c6>
    5156:	001a      	movs	r2, r3
    5158:	9908      	ldr	r1, [sp, #32]
    515a:	9804      	ldr	r0, [sp, #16]
    515c:	f000 fd5a 	bl	5c14 <__lshift>
    5160:	9008      	str	r0, [sp, #32]
    5162:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5164:	2b00      	cmp	r3, #0
    5166:	d100      	bne.n	516a <_dtoa_r+0x8ce>
    5168:	e089      	b.n	527e <_dtoa_r+0x9e2>
    516a:	9908      	ldr	r1, [sp, #32]
    516c:	9805      	ldr	r0, [sp, #20]
    516e:	f000 fda2 	bl	5cb6 <__mcmp>
    5172:	2800      	cmp	r0, #0
    5174:	db00      	blt.n	5178 <_dtoa_r+0x8dc>
    5176:	e082      	b.n	527e <_dtoa_r+0x9e2>
    5178:	9b03      	ldr	r3, [sp, #12]
    517a:	220a      	movs	r2, #10
    517c:	3b01      	subs	r3, #1
    517e:	9303      	str	r3, [sp, #12]
    5180:	9905      	ldr	r1, [sp, #20]
    5182:	2300      	movs	r3, #0
    5184:	9804      	ldr	r0, [sp, #16]
    5186:	f000 fbd5 	bl	5934 <__multadd>
    518a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    518c:	9005      	str	r0, [sp, #20]
    518e:	2b00      	cmp	r3, #0
    5190:	d100      	bne.n	5194 <_dtoa_r+0x8f8>
    5192:	e15d      	b.n	5450 <_dtoa_r+0xbb4>
    5194:	2300      	movs	r3, #0
    5196:	0031      	movs	r1, r6
    5198:	220a      	movs	r2, #10
    519a:	9804      	ldr	r0, [sp, #16]
    519c:	f000 fbca 	bl	5934 <__multadd>
    51a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    51a2:	0006      	movs	r6, r0
    51a4:	2b00      	cmp	r3, #0
    51a6:	dc02      	bgt.n	51ae <_dtoa_r+0x912>
    51a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    51aa:	2b02      	cmp	r3, #2
    51ac:	dc6d      	bgt.n	528a <_dtoa_r+0x9ee>
    51ae:	2c00      	cmp	r4, #0
    51b0:	dd05      	ble.n	51be <_dtoa_r+0x922>
    51b2:	0031      	movs	r1, r6
    51b4:	0022      	movs	r2, r4
    51b6:	9804      	ldr	r0, [sp, #16]
    51b8:	f000 fd2c 	bl	5c14 <__lshift>
    51bc:	0006      	movs	r6, r0
    51be:	0030      	movs	r0, r6
    51c0:	2d00      	cmp	r5, #0
    51c2:	d011      	beq.n	51e8 <_dtoa_r+0x94c>
    51c4:	6871      	ldr	r1, [r6, #4]
    51c6:	9804      	ldr	r0, [sp, #16]
    51c8:	f000 fb63 	bl	5892 <_Balloc>
    51cc:	0031      	movs	r1, r6
    51ce:	0004      	movs	r4, r0
    51d0:	6933      	ldr	r3, [r6, #16]
    51d2:	310c      	adds	r1, #12
    51d4:	1c9a      	adds	r2, r3, #2
    51d6:	0092      	lsls	r2, r2, #2
    51d8:	300c      	adds	r0, #12
    51da:	f7fe fa83 	bl	36e4 <memcpy>
    51de:	2201      	movs	r2, #1
    51e0:	0021      	movs	r1, r4
    51e2:	9804      	ldr	r0, [sp, #16]
    51e4:	f000 fd16 	bl	5c14 <__lshift>
    51e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    51ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    51ec:	3f01      	subs	r7, #1
    51ee:	930b      	str	r3, [sp, #44]	; 0x2c
    51f0:	19db      	adds	r3, r3, r7
    51f2:	0037      	movs	r7, r6
    51f4:	0006      	movs	r6, r0
    51f6:	930f      	str	r3, [sp, #60]	; 0x3c
    51f8:	9908      	ldr	r1, [sp, #32]
    51fa:	9805      	ldr	r0, [sp, #20]
    51fc:	f7ff faca 	bl	4794 <quorem>
    5200:	0039      	movs	r1, r7
    5202:	900d      	str	r0, [sp, #52]	; 0x34
    5204:	0004      	movs	r4, r0
    5206:	9805      	ldr	r0, [sp, #20]
    5208:	f000 fd55 	bl	5cb6 <__mcmp>
    520c:	0032      	movs	r2, r6
    520e:	900e      	str	r0, [sp, #56]	; 0x38
    5210:	9908      	ldr	r1, [sp, #32]
    5212:	9804      	ldr	r0, [sp, #16]
    5214:	f000 fd68 	bl	5ce8 <__mdiff>
    5218:	2301      	movs	r3, #1
    521a:	930c      	str	r3, [sp, #48]	; 0x30
    521c:	68c3      	ldr	r3, [r0, #12]
    521e:	3430      	adds	r4, #48	; 0x30
    5220:	0005      	movs	r5, r0
    5222:	2b00      	cmp	r3, #0
    5224:	d104      	bne.n	5230 <_dtoa_r+0x994>
    5226:	0001      	movs	r1, r0
    5228:	9805      	ldr	r0, [sp, #20]
    522a:	f000 fd44 	bl	5cb6 <__mcmp>
    522e:	900c      	str	r0, [sp, #48]	; 0x30
    5230:	0029      	movs	r1, r5
    5232:	9804      	ldr	r0, [sp, #16]
    5234:	f000 fb65 	bl	5902 <_Bfree>
    5238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    523a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    523c:	4313      	orrs	r3, r2
    523e:	d000      	beq.n	5242 <_dtoa_r+0x9a6>
    5240:	e089      	b.n	5356 <_dtoa_r+0xaba>
    5242:	9a06      	ldr	r2, [sp, #24]
    5244:	3301      	adds	r3, #1
    5246:	4213      	tst	r3, r2
    5248:	d000      	beq.n	524c <_dtoa_r+0x9b0>
    524a:	e084      	b.n	5356 <_dtoa_r+0xaba>
    524c:	2c39      	cmp	r4, #57	; 0x39
    524e:	d100      	bne.n	5252 <_dtoa_r+0x9b6>
    5250:	e0a3      	b.n	539a <_dtoa_r+0xafe>
    5252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5254:	2b00      	cmp	r3, #0
    5256:	dd01      	ble.n	525c <_dtoa_r+0x9c0>
    5258:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    525a:	3431      	adds	r4, #49	; 0x31
    525c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    525e:	1c5d      	adds	r5, r3, #1
    5260:	701c      	strb	r4, [r3, #0]
    5262:	e027      	b.n	52b4 <_dtoa_r+0xa18>
    5264:	2b04      	cmp	r3, #4
    5266:	d100      	bne.n	526a <_dtoa_r+0x9ce>
    5268:	e769      	b.n	513e <_dtoa_r+0x8a2>
    526a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    526c:	331c      	adds	r3, #28
    526e:	18d2      	adds	r2, r2, r3
    5270:	920b      	str	r2, [sp, #44]	; 0x2c
    5272:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5274:	18e4      	adds	r4, r4, r3
    5276:	18d3      	adds	r3, r2, r3
    5278:	e760      	b.n	513c <_dtoa_r+0x8a0>
    527a:	0003      	movs	r3, r0
    527c:	e7f5      	b.n	526a <_dtoa_r+0x9ce>
    527e:	2f00      	cmp	r7, #0
    5280:	dc3c      	bgt.n	52fc <_dtoa_r+0xa60>
    5282:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5284:	2b02      	cmp	r3, #2
    5286:	dd39      	ble.n	52fc <_dtoa_r+0xa60>
    5288:	970d      	str	r7, [sp, #52]	; 0x34
    528a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    528c:	2b00      	cmp	r3, #0
    528e:	d10c      	bne.n	52aa <_dtoa_r+0xa0e>
    5290:	9908      	ldr	r1, [sp, #32]
    5292:	2205      	movs	r2, #5
    5294:	9804      	ldr	r0, [sp, #16]
    5296:	f000 fb4d 	bl	5934 <__multadd>
    529a:	9008      	str	r0, [sp, #32]
    529c:	0001      	movs	r1, r0
    529e:	9805      	ldr	r0, [sp, #20]
    52a0:	f000 fd09 	bl	5cb6 <__mcmp>
    52a4:	2800      	cmp	r0, #0
    52a6:	dd00      	ble.n	52aa <_dtoa_r+0xa0e>
    52a8:	e55a      	b.n	4d60 <_dtoa_r+0x4c4>
    52aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    52ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    52ae:	43db      	mvns	r3, r3
    52b0:	9303      	str	r3, [sp, #12]
    52b2:	2700      	movs	r7, #0
    52b4:	9908      	ldr	r1, [sp, #32]
    52b6:	9804      	ldr	r0, [sp, #16]
    52b8:	f000 fb23 	bl	5902 <_Bfree>
    52bc:	2e00      	cmp	r6, #0
    52be:	d100      	bne.n	52c2 <_dtoa_r+0xa26>
    52c0:	e63f      	b.n	4f42 <_dtoa_r+0x6a6>
    52c2:	2f00      	cmp	r7, #0
    52c4:	d005      	beq.n	52d2 <_dtoa_r+0xa36>
    52c6:	42b7      	cmp	r7, r6
    52c8:	d003      	beq.n	52d2 <_dtoa_r+0xa36>
    52ca:	0039      	movs	r1, r7
    52cc:	9804      	ldr	r0, [sp, #16]
    52ce:	f000 fb18 	bl	5902 <_Bfree>
    52d2:	0031      	movs	r1, r6
    52d4:	9804      	ldr	r0, [sp, #16]
    52d6:	f000 fb14 	bl	5902 <_Bfree>
    52da:	e632      	b.n	4f42 <_dtoa_r+0x6a6>
    52dc:	9508      	str	r5, [sp, #32]
    52de:	002e      	movs	r6, r5
    52e0:	e7e3      	b.n	52aa <_dtoa_r+0xa0e>
    52e2:	2300      	movs	r3, #0
    52e4:	9308      	str	r3, [sp, #32]
    52e6:	001e      	movs	r6, r3
    52e8:	e7df      	b.n	52aa <_dtoa_r+0xa0e>
    52ea:	46c0      	nop			; (mov r8, r8)
    52ec:	40240000 	.word	0x40240000
    52f0:	00000433 	.word	0x00000433
    52f4:	9603      	str	r6, [sp, #12]
    52f6:	9508      	str	r5, [sp, #32]
    52f8:	002e      	movs	r6, r5
    52fa:	e531      	b.n	4d60 <_dtoa_r+0x4c4>
    52fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    52fe:	970d      	str	r7, [sp, #52]	; 0x34
    5300:	2b00      	cmp	r3, #0
    5302:	d000      	beq.n	5306 <_dtoa_r+0xa6a>
    5304:	e753      	b.n	51ae <_dtoa_r+0x912>
    5306:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    5308:	9908      	ldr	r1, [sp, #32]
    530a:	9805      	ldr	r0, [sp, #20]
    530c:	f7ff fa42 	bl	4794 <quorem>
    5310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5312:	3030      	adds	r0, #48	; 0x30
    5314:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5316:	7028      	strb	r0, [r5, #0]
    5318:	3501      	adds	r5, #1
    531a:	0004      	movs	r4, r0
    531c:	1aeb      	subs	r3, r5, r3
    531e:	429a      	cmp	r2, r3
    5320:	dc78      	bgt.n	5414 <_dtoa_r+0xb78>
    5322:	1e15      	subs	r5, r2, #0
    5324:	dc00      	bgt.n	5328 <_dtoa_r+0xa8c>
    5326:	2501      	movs	r5, #1
    5328:	2700      	movs	r7, #0
    532a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    532c:	195d      	adds	r5, r3, r5
    532e:	9905      	ldr	r1, [sp, #20]
    5330:	2201      	movs	r2, #1
    5332:	9804      	ldr	r0, [sp, #16]
    5334:	f000 fc6e 	bl	5c14 <__lshift>
    5338:	9908      	ldr	r1, [sp, #32]
    533a:	9005      	str	r0, [sp, #20]
    533c:	f000 fcbb 	bl	5cb6 <__mcmp>
    5340:	2800      	cmp	r0, #0
    5342:	dc2f      	bgt.n	53a4 <_dtoa_r+0xb08>
    5344:	d101      	bne.n	534a <_dtoa_r+0xaae>
    5346:	07e3      	lsls	r3, r4, #31
    5348:	d42c      	bmi.n	53a4 <_dtoa_r+0xb08>
    534a:	1e6b      	subs	r3, r5, #1
    534c:	781a      	ldrb	r2, [r3, #0]
    534e:	2a30      	cmp	r2, #48	; 0x30
    5350:	d1b0      	bne.n	52b4 <_dtoa_r+0xa18>
    5352:	001d      	movs	r5, r3
    5354:	e7f9      	b.n	534a <_dtoa_r+0xaae>
    5356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5358:	2b00      	cmp	r3, #0
    535a:	db07      	blt.n	536c <_dtoa_r+0xad0>
    535c:	001d      	movs	r5, r3
    535e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5360:	431d      	orrs	r5, r3
    5362:	d126      	bne.n	53b2 <_dtoa_r+0xb16>
    5364:	2301      	movs	r3, #1
    5366:	9a06      	ldr	r2, [sp, #24]
    5368:	4213      	tst	r3, r2
    536a:	d122      	bne.n	53b2 <_dtoa_r+0xb16>
    536c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    536e:	2b00      	cmp	r3, #0
    5370:	dc00      	bgt.n	5374 <_dtoa_r+0xad8>
    5372:	e773      	b.n	525c <_dtoa_r+0x9c0>
    5374:	9905      	ldr	r1, [sp, #20]
    5376:	2201      	movs	r2, #1
    5378:	9804      	ldr	r0, [sp, #16]
    537a:	f000 fc4b 	bl	5c14 <__lshift>
    537e:	9908      	ldr	r1, [sp, #32]
    5380:	9005      	str	r0, [sp, #20]
    5382:	f000 fc98 	bl	5cb6 <__mcmp>
    5386:	2800      	cmp	r0, #0
    5388:	dc04      	bgt.n	5394 <_dtoa_r+0xaf8>
    538a:	d000      	beq.n	538e <_dtoa_r+0xaf2>
    538c:	e766      	b.n	525c <_dtoa_r+0x9c0>
    538e:	07e3      	lsls	r3, r4, #31
    5390:	d400      	bmi.n	5394 <_dtoa_r+0xaf8>
    5392:	e763      	b.n	525c <_dtoa_r+0x9c0>
    5394:	2c39      	cmp	r4, #57	; 0x39
    5396:	d000      	beq.n	539a <_dtoa_r+0xafe>
    5398:	e75e      	b.n	5258 <_dtoa_r+0x9bc>
    539a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    539c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    539e:	1c5d      	adds	r5, r3, #1
    53a0:	2339      	movs	r3, #57	; 0x39
    53a2:	7013      	strb	r3, [r2, #0]
    53a4:	1e6b      	subs	r3, r5, #1
    53a6:	781a      	ldrb	r2, [r3, #0]
    53a8:	2a39      	cmp	r2, #57	; 0x39
    53aa:	d03b      	beq.n	5424 <_dtoa_r+0xb88>
    53ac:	3201      	adds	r2, #1
    53ae:	701a      	strb	r2, [r3, #0]
    53b0:	e780      	b.n	52b4 <_dtoa_r+0xa18>
    53b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    53b4:	3301      	adds	r3, #1
    53b6:	930d      	str	r3, [sp, #52]	; 0x34
    53b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    53ba:	2b00      	cmp	r3, #0
    53bc:	dd05      	ble.n	53ca <_dtoa_r+0xb2e>
    53be:	2c39      	cmp	r4, #57	; 0x39
    53c0:	d0eb      	beq.n	539a <_dtoa_r+0xafe>
    53c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    53c4:	3401      	adds	r4, #1
    53c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    53c8:	e74a      	b.n	5260 <_dtoa_r+0x9c4>
    53ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    53cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    53ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    53d0:	701c      	strb	r4, [r3, #0]
    53d2:	4293      	cmp	r3, r2
    53d4:	d0ab      	beq.n	532e <_dtoa_r+0xa92>
    53d6:	2300      	movs	r3, #0
    53d8:	220a      	movs	r2, #10
    53da:	9905      	ldr	r1, [sp, #20]
    53dc:	9804      	ldr	r0, [sp, #16]
    53de:	f000 faa9 	bl	5934 <__multadd>
    53e2:	2300      	movs	r3, #0
    53e4:	9005      	str	r0, [sp, #20]
    53e6:	220a      	movs	r2, #10
    53e8:	0039      	movs	r1, r7
    53ea:	9804      	ldr	r0, [sp, #16]
    53ec:	42b7      	cmp	r7, r6
    53ee:	d106      	bne.n	53fe <_dtoa_r+0xb62>
    53f0:	f000 faa0 	bl	5934 <__multadd>
    53f4:	0007      	movs	r7, r0
    53f6:	0006      	movs	r6, r0
    53f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    53fa:	930b      	str	r3, [sp, #44]	; 0x2c
    53fc:	e6fc      	b.n	51f8 <_dtoa_r+0x95c>
    53fe:	f000 fa99 	bl	5934 <__multadd>
    5402:	0031      	movs	r1, r6
    5404:	0007      	movs	r7, r0
    5406:	2300      	movs	r3, #0
    5408:	220a      	movs	r2, #10
    540a:	9804      	ldr	r0, [sp, #16]
    540c:	f000 fa92 	bl	5934 <__multadd>
    5410:	0006      	movs	r6, r0
    5412:	e7f1      	b.n	53f8 <_dtoa_r+0xb5c>
    5414:	2300      	movs	r3, #0
    5416:	220a      	movs	r2, #10
    5418:	9905      	ldr	r1, [sp, #20]
    541a:	9804      	ldr	r0, [sp, #16]
    541c:	f000 fa8a 	bl	5934 <__multadd>
    5420:	9005      	str	r0, [sp, #20]
    5422:	e771      	b.n	5308 <_dtoa_r+0xa6c>
    5424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5426:	429a      	cmp	r2, r3
    5428:	d105      	bne.n	5436 <_dtoa_r+0xb9a>
    542a:	9b03      	ldr	r3, [sp, #12]
    542c:	3301      	adds	r3, #1
    542e:	9303      	str	r3, [sp, #12]
    5430:	2331      	movs	r3, #49	; 0x31
    5432:	7013      	strb	r3, [r2, #0]
    5434:	e73e      	b.n	52b4 <_dtoa_r+0xa18>
    5436:	001d      	movs	r5, r3
    5438:	e7b4      	b.n	53a4 <_dtoa_r+0xb08>
    543a:	4b0a      	ldr	r3, [pc, #40]	; (5464 <_dtoa_r+0xbc8>)
    543c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    543e:	930a      	str	r3, [sp, #40]	; 0x28
    5440:	4b09      	ldr	r3, [pc, #36]	; (5468 <_dtoa_r+0xbcc>)
    5442:	2a00      	cmp	r2, #0
    5444:	d001      	beq.n	544a <_dtoa_r+0xbae>
    5446:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5448:	6013      	str	r3, [r2, #0]
    544a:	980a      	ldr	r0, [sp, #40]	; 0x28
    544c:	b01d      	add	sp, #116	; 0x74
    544e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5452:	2b00      	cmp	r3, #0
    5454:	dd00      	ble.n	5458 <_dtoa_r+0xbbc>
    5456:	e756      	b.n	5306 <_dtoa_r+0xa6a>
    5458:	9b22      	ldr	r3, [sp, #136]	; 0x88
    545a:	2b02      	cmp	r3, #2
    545c:	dc00      	bgt.n	5460 <_dtoa_r+0xbc4>
    545e:	e752      	b.n	5306 <_dtoa_r+0xa6a>
    5460:	e713      	b.n	528a <_dtoa_r+0x9ee>
    5462:	46c0      	nop			; (mov r8, r8)
    5464:	00009543 	.word	0x00009543
    5468:	0000954b 	.word	0x0000954b

0000546c <__sflush_r>:
    546c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    546e:	898a      	ldrh	r2, [r1, #12]
    5470:	0005      	movs	r5, r0
    5472:	000c      	movs	r4, r1
    5474:	0713      	lsls	r3, r2, #28
    5476:	d460      	bmi.n	553a <__sflush_r+0xce>
    5478:	684b      	ldr	r3, [r1, #4]
    547a:	2b00      	cmp	r3, #0
    547c:	dc04      	bgt.n	5488 <__sflush_r+0x1c>
    547e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5480:	2b00      	cmp	r3, #0
    5482:	dc01      	bgt.n	5488 <__sflush_r+0x1c>
    5484:	2000      	movs	r0, #0
    5486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5488:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    548a:	2f00      	cmp	r7, #0
    548c:	d0fa      	beq.n	5484 <__sflush_r+0x18>
    548e:	2300      	movs	r3, #0
    5490:	682e      	ldr	r6, [r5, #0]
    5492:	602b      	str	r3, [r5, #0]
    5494:	2380      	movs	r3, #128	; 0x80
    5496:	015b      	lsls	r3, r3, #5
    5498:	401a      	ands	r2, r3
    549a:	d034      	beq.n	5506 <__sflush_r+0x9a>
    549c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    549e:	89a3      	ldrh	r3, [r4, #12]
    54a0:	075b      	lsls	r3, r3, #29
    54a2:	d506      	bpl.n	54b2 <__sflush_r+0x46>
    54a4:	6863      	ldr	r3, [r4, #4]
    54a6:	1ac0      	subs	r0, r0, r3
    54a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    54aa:	2b00      	cmp	r3, #0
    54ac:	d001      	beq.n	54b2 <__sflush_r+0x46>
    54ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
    54b0:	1ac0      	subs	r0, r0, r3
    54b2:	0002      	movs	r2, r0
    54b4:	6a21      	ldr	r1, [r4, #32]
    54b6:	2300      	movs	r3, #0
    54b8:	0028      	movs	r0, r5
    54ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    54bc:	47b8      	blx	r7
    54be:	89a1      	ldrh	r1, [r4, #12]
    54c0:	1c43      	adds	r3, r0, #1
    54c2:	d106      	bne.n	54d2 <__sflush_r+0x66>
    54c4:	682b      	ldr	r3, [r5, #0]
    54c6:	2b1d      	cmp	r3, #29
    54c8:	d831      	bhi.n	552e <__sflush_r+0xc2>
    54ca:	4a2c      	ldr	r2, [pc, #176]	; (557c <__sflush_r+0x110>)
    54cc:	40da      	lsrs	r2, r3
    54ce:	07d3      	lsls	r3, r2, #31
    54d0:	d52d      	bpl.n	552e <__sflush_r+0xc2>
    54d2:	2300      	movs	r3, #0
    54d4:	6063      	str	r3, [r4, #4]
    54d6:	6923      	ldr	r3, [r4, #16]
    54d8:	6023      	str	r3, [r4, #0]
    54da:	04cb      	lsls	r3, r1, #19
    54dc:	d505      	bpl.n	54ea <__sflush_r+0x7e>
    54de:	1c43      	adds	r3, r0, #1
    54e0:	d102      	bne.n	54e8 <__sflush_r+0x7c>
    54e2:	682b      	ldr	r3, [r5, #0]
    54e4:	2b00      	cmp	r3, #0
    54e6:	d100      	bne.n	54ea <__sflush_r+0x7e>
    54e8:	6560      	str	r0, [r4, #84]	; 0x54
    54ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
    54ec:	602e      	str	r6, [r5, #0]
    54ee:	2900      	cmp	r1, #0
    54f0:	d0c8      	beq.n	5484 <__sflush_r+0x18>
    54f2:	0023      	movs	r3, r4
    54f4:	3344      	adds	r3, #68	; 0x44
    54f6:	4299      	cmp	r1, r3
    54f8:	d002      	beq.n	5500 <__sflush_r+0x94>
    54fa:	0028      	movs	r0, r5
    54fc:	f7fe f904 	bl	3708 <_free_r>
    5500:	2000      	movs	r0, #0
    5502:	6360      	str	r0, [r4, #52]	; 0x34
    5504:	e7bf      	b.n	5486 <__sflush_r+0x1a>
    5506:	2301      	movs	r3, #1
    5508:	6a21      	ldr	r1, [r4, #32]
    550a:	0028      	movs	r0, r5
    550c:	47b8      	blx	r7
    550e:	1c43      	adds	r3, r0, #1
    5510:	d1c5      	bne.n	549e <__sflush_r+0x32>
    5512:	682b      	ldr	r3, [r5, #0]
    5514:	2b00      	cmp	r3, #0
    5516:	d0c2      	beq.n	549e <__sflush_r+0x32>
    5518:	2b1d      	cmp	r3, #29
    551a:	d001      	beq.n	5520 <__sflush_r+0xb4>
    551c:	2b16      	cmp	r3, #22
    551e:	d101      	bne.n	5524 <__sflush_r+0xb8>
    5520:	602e      	str	r6, [r5, #0]
    5522:	e7af      	b.n	5484 <__sflush_r+0x18>
    5524:	2340      	movs	r3, #64	; 0x40
    5526:	89a2      	ldrh	r2, [r4, #12]
    5528:	4313      	orrs	r3, r2
    552a:	81a3      	strh	r3, [r4, #12]
    552c:	e7ab      	b.n	5486 <__sflush_r+0x1a>
    552e:	2340      	movs	r3, #64	; 0x40
    5530:	430b      	orrs	r3, r1
    5532:	2001      	movs	r0, #1
    5534:	81a3      	strh	r3, [r4, #12]
    5536:	4240      	negs	r0, r0
    5538:	e7a5      	b.n	5486 <__sflush_r+0x1a>
    553a:	690f      	ldr	r7, [r1, #16]
    553c:	2f00      	cmp	r7, #0
    553e:	d0a1      	beq.n	5484 <__sflush_r+0x18>
    5540:	680b      	ldr	r3, [r1, #0]
    5542:	600f      	str	r7, [r1, #0]
    5544:	1bdb      	subs	r3, r3, r7
    5546:	9301      	str	r3, [sp, #4]
    5548:	2300      	movs	r3, #0
    554a:	0792      	lsls	r2, r2, #30
    554c:	d100      	bne.n	5550 <__sflush_r+0xe4>
    554e:	694b      	ldr	r3, [r1, #20]
    5550:	60a3      	str	r3, [r4, #8]
    5552:	9b01      	ldr	r3, [sp, #4]
    5554:	2b00      	cmp	r3, #0
    5556:	dc00      	bgt.n	555a <__sflush_r+0xee>
    5558:	e794      	b.n	5484 <__sflush_r+0x18>
    555a:	9b01      	ldr	r3, [sp, #4]
    555c:	003a      	movs	r2, r7
    555e:	6a21      	ldr	r1, [r4, #32]
    5560:	0028      	movs	r0, r5
    5562:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5564:	47b0      	blx	r6
    5566:	2800      	cmp	r0, #0
    5568:	dc03      	bgt.n	5572 <__sflush_r+0x106>
    556a:	2340      	movs	r3, #64	; 0x40
    556c:	89a2      	ldrh	r2, [r4, #12]
    556e:	4313      	orrs	r3, r2
    5570:	e7df      	b.n	5532 <__sflush_r+0xc6>
    5572:	9b01      	ldr	r3, [sp, #4]
    5574:	183f      	adds	r7, r7, r0
    5576:	1a1b      	subs	r3, r3, r0
    5578:	9301      	str	r3, [sp, #4]
    557a:	e7ea      	b.n	5552 <__sflush_r+0xe6>
    557c:	20400001 	.word	0x20400001

00005580 <_fflush_r>:
    5580:	690b      	ldr	r3, [r1, #16]
    5582:	b570      	push	{r4, r5, r6, lr}
    5584:	0005      	movs	r5, r0
    5586:	000c      	movs	r4, r1
    5588:	2b00      	cmp	r3, #0
    558a:	d101      	bne.n	5590 <_fflush_r+0x10>
    558c:	2000      	movs	r0, #0
    558e:	bd70      	pop	{r4, r5, r6, pc}
    5590:	2800      	cmp	r0, #0
    5592:	d004      	beq.n	559e <_fflush_r+0x1e>
    5594:	6983      	ldr	r3, [r0, #24]
    5596:	2b00      	cmp	r3, #0
    5598:	d101      	bne.n	559e <_fflush_r+0x1e>
    559a:	f000 f85f 	bl	565c <__sinit>
    559e:	4b0b      	ldr	r3, [pc, #44]	; (55cc <_fflush_r+0x4c>)
    55a0:	429c      	cmp	r4, r3
    55a2:	d109      	bne.n	55b8 <_fflush_r+0x38>
    55a4:	686c      	ldr	r4, [r5, #4]
    55a6:	220c      	movs	r2, #12
    55a8:	5ea3      	ldrsh	r3, [r4, r2]
    55aa:	2b00      	cmp	r3, #0
    55ac:	d0ee      	beq.n	558c <_fflush_r+0xc>
    55ae:	0021      	movs	r1, r4
    55b0:	0028      	movs	r0, r5
    55b2:	f7ff ff5b 	bl	546c <__sflush_r>
    55b6:	e7ea      	b.n	558e <_fflush_r+0xe>
    55b8:	4b05      	ldr	r3, [pc, #20]	; (55d0 <_fflush_r+0x50>)
    55ba:	429c      	cmp	r4, r3
    55bc:	d101      	bne.n	55c2 <_fflush_r+0x42>
    55be:	68ac      	ldr	r4, [r5, #8]
    55c0:	e7f1      	b.n	55a6 <_fflush_r+0x26>
    55c2:	4b04      	ldr	r3, [pc, #16]	; (55d4 <_fflush_r+0x54>)
    55c4:	429c      	cmp	r4, r3
    55c6:	d1ee      	bne.n	55a6 <_fflush_r+0x26>
    55c8:	68ec      	ldr	r4, [r5, #12]
    55ca:	e7ec      	b.n	55a6 <_fflush_r+0x26>
    55cc:	00009570 	.word	0x00009570
    55d0:	00009590 	.word	0x00009590
    55d4:	00009550 	.word	0x00009550

000055d8 <_cleanup_r>:
    55d8:	b510      	push	{r4, lr}
    55da:	4902      	ldr	r1, [pc, #8]	; (55e4 <_cleanup_r+0xc>)
    55dc:	f000 f8b2 	bl	5744 <_fwalk_reent>
    55e0:	bd10      	pop	{r4, pc}
    55e2:	46c0      	nop			; (mov r8, r8)
    55e4:	00005581 	.word	0x00005581

000055e8 <std.isra.0>:
    55e8:	2300      	movs	r3, #0
    55ea:	b510      	push	{r4, lr}
    55ec:	0004      	movs	r4, r0
    55ee:	6003      	str	r3, [r0, #0]
    55f0:	6043      	str	r3, [r0, #4]
    55f2:	6083      	str	r3, [r0, #8]
    55f4:	8181      	strh	r1, [r0, #12]
    55f6:	6643      	str	r3, [r0, #100]	; 0x64
    55f8:	81c2      	strh	r2, [r0, #14]
    55fa:	6103      	str	r3, [r0, #16]
    55fc:	6143      	str	r3, [r0, #20]
    55fe:	6183      	str	r3, [r0, #24]
    5600:	0019      	movs	r1, r3
    5602:	2208      	movs	r2, #8
    5604:	305c      	adds	r0, #92	; 0x5c
    5606:	f7fe f876 	bl	36f6 <memset>
    560a:	4b05      	ldr	r3, [pc, #20]	; (5620 <std.isra.0+0x38>)
    560c:	6224      	str	r4, [r4, #32]
    560e:	6263      	str	r3, [r4, #36]	; 0x24
    5610:	4b04      	ldr	r3, [pc, #16]	; (5624 <std.isra.0+0x3c>)
    5612:	62a3      	str	r3, [r4, #40]	; 0x28
    5614:	4b04      	ldr	r3, [pc, #16]	; (5628 <std.isra.0+0x40>)
    5616:	62e3      	str	r3, [r4, #44]	; 0x2c
    5618:	4b04      	ldr	r3, [pc, #16]	; (562c <std.isra.0+0x44>)
    561a:	6323      	str	r3, [r4, #48]	; 0x30
    561c:	bd10      	pop	{r4, pc}
    561e:	46c0      	nop			; (mov r8, r8)
    5620:	000060fd 	.word	0x000060fd
    5624:	00006125 	.word	0x00006125
    5628:	0000615d 	.word	0x0000615d
    562c:	00006189 	.word	0x00006189

00005630 <__sfmoreglue>:
    5630:	b570      	push	{r4, r5, r6, lr}
    5632:	2568      	movs	r5, #104	; 0x68
    5634:	1e4a      	subs	r2, r1, #1
    5636:	4355      	muls	r5, r2
    5638:	000e      	movs	r6, r1
    563a:	0029      	movs	r1, r5
    563c:	3174      	adds	r1, #116	; 0x74
    563e:	f7fe f8ad 	bl	379c <_malloc_r>
    5642:	1e04      	subs	r4, r0, #0
    5644:	d008      	beq.n	5658 <__sfmoreglue+0x28>
    5646:	2100      	movs	r1, #0
    5648:	002a      	movs	r2, r5
    564a:	6001      	str	r1, [r0, #0]
    564c:	6046      	str	r6, [r0, #4]
    564e:	300c      	adds	r0, #12
    5650:	60a0      	str	r0, [r4, #8]
    5652:	3268      	adds	r2, #104	; 0x68
    5654:	f7fe f84f 	bl	36f6 <memset>
    5658:	0020      	movs	r0, r4
    565a:	bd70      	pop	{r4, r5, r6, pc}

0000565c <__sinit>:
    565c:	6983      	ldr	r3, [r0, #24]
    565e:	b513      	push	{r0, r1, r4, lr}
    5660:	0004      	movs	r4, r0
    5662:	2b00      	cmp	r3, #0
    5664:	d128      	bne.n	56b8 <__sinit+0x5c>
    5666:	6483      	str	r3, [r0, #72]	; 0x48
    5668:	64c3      	str	r3, [r0, #76]	; 0x4c
    566a:	6503      	str	r3, [r0, #80]	; 0x50
    566c:	4b13      	ldr	r3, [pc, #76]	; (56bc <__sinit+0x60>)
    566e:	4a14      	ldr	r2, [pc, #80]	; (56c0 <__sinit+0x64>)
    5670:	681b      	ldr	r3, [r3, #0]
    5672:	6282      	str	r2, [r0, #40]	; 0x28
    5674:	9301      	str	r3, [sp, #4]
    5676:	4298      	cmp	r0, r3
    5678:	d101      	bne.n	567e <__sinit+0x22>
    567a:	2301      	movs	r3, #1
    567c:	6183      	str	r3, [r0, #24]
    567e:	0020      	movs	r0, r4
    5680:	f000 f820 	bl	56c4 <__sfp>
    5684:	6060      	str	r0, [r4, #4]
    5686:	0020      	movs	r0, r4
    5688:	f000 f81c 	bl	56c4 <__sfp>
    568c:	60a0      	str	r0, [r4, #8]
    568e:	0020      	movs	r0, r4
    5690:	f000 f818 	bl	56c4 <__sfp>
    5694:	2200      	movs	r2, #0
    5696:	60e0      	str	r0, [r4, #12]
    5698:	2104      	movs	r1, #4
    569a:	6860      	ldr	r0, [r4, #4]
    569c:	f7ff ffa4 	bl	55e8 <std.isra.0>
    56a0:	2201      	movs	r2, #1
    56a2:	2109      	movs	r1, #9
    56a4:	68a0      	ldr	r0, [r4, #8]
    56a6:	f7ff ff9f 	bl	55e8 <std.isra.0>
    56aa:	2202      	movs	r2, #2
    56ac:	2112      	movs	r1, #18
    56ae:	68e0      	ldr	r0, [r4, #12]
    56b0:	f7ff ff9a 	bl	55e8 <std.isra.0>
    56b4:	2301      	movs	r3, #1
    56b6:	61a3      	str	r3, [r4, #24]
    56b8:	bd13      	pop	{r0, r1, r4, pc}
    56ba:	46c0      	nop			; (mov r8, r8)
    56bc:	00009400 	.word	0x00009400
    56c0:	000055d9 	.word	0x000055d9

000056c4 <__sfp>:
    56c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56c6:	4b1e      	ldr	r3, [pc, #120]	; (5740 <__sfp+0x7c>)
    56c8:	0007      	movs	r7, r0
    56ca:	681e      	ldr	r6, [r3, #0]
    56cc:	69b3      	ldr	r3, [r6, #24]
    56ce:	2b00      	cmp	r3, #0
    56d0:	d102      	bne.n	56d8 <__sfp+0x14>
    56d2:	0030      	movs	r0, r6
    56d4:	f7ff ffc2 	bl	565c <__sinit>
    56d8:	3648      	adds	r6, #72	; 0x48
    56da:	68b4      	ldr	r4, [r6, #8]
    56dc:	6873      	ldr	r3, [r6, #4]
    56de:	3b01      	subs	r3, #1
    56e0:	d504      	bpl.n	56ec <__sfp+0x28>
    56e2:	6833      	ldr	r3, [r6, #0]
    56e4:	2b00      	cmp	r3, #0
    56e6:	d007      	beq.n	56f8 <__sfp+0x34>
    56e8:	6836      	ldr	r6, [r6, #0]
    56ea:	e7f6      	b.n	56da <__sfp+0x16>
    56ec:	220c      	movs	r2, #12
    56ee:	5ea5      	ldrsh	r5, [r4, r2]
    56f0:	2d00      	cmp	r5, #0
    56f2:	d00d      	beq.n	5710 <__sfp+0x4c>
    56f4:	3468      	adds	r4, #104	; 0x68
    56f6:	e7f2      	b.n	56de <__sfp+0x1a>
    56f8:	2104      	movs	r1, #4
    56fa:	0038      	movs	r0, r7
    56fc:	f7ff ff98 	bl	5630 <__sfmoreglue>
    5700:	6030      	str	r0, [r6, #0]
    5702:	2800      	cmp	r0, #0
    5704:	d1f0      	bne.n	56e8 <__sfp+0x24>
    5706:	230c      	movs	r3, #12
    5708:	0004      	movs	r4, r0
    570a:	603b      	str	r3, [r7, #0]
    570c:	0020      	movs	r0, r4
    570e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5710:	2301      	movs	r3, #1
    5712:	0020      	movs	r0, r4
    5714:	425b      	negs	r3, r3
    5716:	81e3      	strh	r3, [r4, #14]
    5718:	3302      	adds	r3, #2
    571a:	81a3      	strh	r3, [r4, #12]
    571c:	6665      	str	r5, [r4, #100]	; 0x64
    571e:	6025      	str	r5, [r4, #0]
    5720:	60a5      	str	r5, [r4, #8]
    5722:	6065      	str	r5, [r4, #4]
    5724:	6125      	str	r5, [r4, #16]
    5726:	6165      	str	r5, [r4, #20]
    5728:	61a5      	str	r5, [r4, #24]
    572a:	2208      	movs	r2, #8
    572c:	0029      	movs	r1, r5
    572e:	305c      	adds	r0, #92	; 0x5c
    5730:	f7fd ffe1 	bl	36f6 <memset>
    5734:	6365      	str	r5, [r4, #52]	; 0x34
    5736:	63a5      	str	r5, [r4, #56]	; 0x38
    5738:	64a5      	str	r5, [r4, #72]	; 0x48
    573a:	64e5      	str	r5, [r4, #76]	; 0x4c
    573c:	e7e6      	b.n	570c <__sfp+0x48>
    573e:	46c0      	nop			; (mov r8, r8)
    5740:	00009400 	.word	0x00009400

00005744 <_fwalk_reent>:
    5744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5746:	0004      	movs	r4, r0
    5748:	0007      	movs	r7, r0
    574a:	2600      	movs	r6, #0
    574c:	9101      	str	r1, [sp, #4]
    574e:	3448      	adds	r4, #72	; 0x48
    5750:	2c00      	cmp	r4, #0
    5752:	d101      	bne.n	5758 <_fwalk_reent+0x14>
    5754:	0030      	movs	r0, r6
    5756:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5758:	6863      	ldr	r3, [r4, #4]
    575a:	68a5      	ldr	r5, [r4, #8]
    575c:	9300      	str	r3, [sp, #0]
    575e:	9b00      	ldr	r3, [sp, #0]
    5760:	3b01      	subs	r3, #1
    5762:	9300      	str	r3, [sp, #0]
    5764:	d501      	bpl.n	576a <_fwalk_reent+0x26>
    5766:	6824      	ldr	r4, [r4, #0]
    5768:	e7f2      	b.n	5750 <_fwalk_reent+0xc>
    576a:	89ab      	ldrh	r3, [r5, #12]
    576c:	2b01      	cmp	r3, #1
    576e:	d908      	bls.n	5782 <_fwalk_reent+0x3e>
    5770:	220e      	movs	r2, #14
    5772:	5eab      	ldrsh	r3, [r5, r2]
    5774:	3301      	adds	r3, #1
    5776:	d004      	beq.n	5782 <_fwalk_reent+0x3e>
    5778:	0029      	movs	r1, r5
    577a:	0038      	movs	r0, r7
    577c:	9b01      	ldr	r3, [sp, #4]
    577e:	4798      	blx	r3
    5780:	4306      	orrs	r6, r0
    5782:	3568      	adds	r5, #104	; 0x68
    5784:	e7eb      	b.n	575e <_fwalk_reent+0x1a>
	...

00005788 <_localeconv_r>:
    5788:	4b03      	ldr	r3, [pc, #12]	; (5798 <_localeconv_r+0x10>)
    578a:	681b      	ldr	r3, [r3, #0]
    578c:	6a18      	ldr	r0, [r3, #32]
    578e:	2800      	cmp	r0, #0
    5790:	d100      	bne.n	5794 <_localeconv_r+0xc>
    5792:	4802      	ldr	r0, [pc, #8]	; (579c <_localeconv_r+0x14>)
    5794:	30f0      	adds	r0, #240	; 0xf0
    5796:	4770      	bx	lr
    5798:	2000000c 	.word	0x2000000c
    579c:	20000070 	.word	0x20000070

000057a0 <__swhatbuf_r>:
    57a0:	b570      	push	{r4, r5, r6, lr}
    57a2:	000e      	movs	r6, r1
    57a4:	001d      	movs	r5, r3
    57a6:	230e      	movs	r3, #14
    57a8:	5ec9      	ldrsh	r1, [r1, r3]
    57aa:	b090      	sub	sp, #64	; 0x40
    57ac:	0014      	movs	r4, r2
    57ae:	2900      	cmp	r1, #0
    57b0:	da07      	bge.n	57c2 <__swhatbuf_r+0x22>
    57b2:	2300      	movs	r3, #0
    57b4:	602b      	str	r3, [r5, #0]
    57b6:	89b3      	ldrh	r3, [r6, #12]
    57b8:	061b      	lsls	r3, r3, #24
    57ba:	d411      	bmi.n	57e0 <__swhatbuf_r+0x40>
    57bc:	2380      	movs	r3, #128	; 0x80
    57be:	00db      	lsls	r3, r3, #3
    57c0:	e00f      	b.n	57e2 <__swhatbuf_r+0x42>
    57c2:	aa01      	add	r2, sp, #4
    57c4:	f000 fd0c 	bl	61e0 <_fstat_r>
    57c8:	2800      	cmp	r0, #0
    57ca:	dbf2      	blt.n	57b2 <__swhatbuf_r+0x12>
    57cc:	22f0      	movs	r2, #240	; 0xf0
    57ce:	9b02      	ldr	r3, [sp, #8]
    57d0:	0212      	lsls	r2, r2, #8
    57d2:	4013      	ands	r3, r2
    57d4:	4a05      	ldr	r2, [pc, #20]	; (57ec <__swhatbuf_r+0x4c>)
    57d6:	189b      	adds	r3, r3, r2
    57d8:	425a      	negs	r2, r3
    57da:	4153      	adcs	r3, r2
    57dc:	602b      	str	r3, [r5, #0]
    57de:	e7ed      	b.n	57bc <__swhatbuf_r+0x1c>
    57e0:	2340      	movs	r3, #64	; 0x40
    57e2:	2000      	movs	r0, #0
    57e4:	6023      	str	r3, [r4, #0]
    57e6:	b010      	add	sp, #64	; 0x40
    57e8:	bd70      	pop	{r4, r5, r6, pc}
    57ea:	46c0      	nop			; (mov r8, r8)
    57ec:	ffffe000 	.word	0xffffe000

000057f0 <__smakebuf_r>:
    57f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    57f2:	2602      	movs	r6, #2
    57f4:	898b      	ldrh	r3, [r1, #12]
    57f6:	0005      	movs	r5, r0
    57f8:	000c      	movs	r4, r1
    57fa:	4233      	tst	r3, r6
    57fc:	d006      	beq.n	580c <__smakebuf_r+0x1c>
    57fe:	0023      	movs	r3, r4
    5800:	3347      	adds	r3, #71	; 0x47
    5802:	6023      	str	r3, [r4, #0]
    5804:	6123      	str	r3, [r4, #16]
    5806:	2301      	movs	r3, #1
    5808:	6163      	str	r3, [r4, #20]
    580a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    580c:	ab01      	add	r3, sp, #4
    580e:	466a      	mov	r2, sp
    5810:	f7ff ffc6 	bl	57a0 <__swhatbuf_r>
    5814:	9900      	ldr	r1, [sp, #0]
    5816:	0007      	movs	r7, r0
    5818:	0028      	movs	r0, r5
    581a:	f7fd ffbf 	bl	379c <_malloc_r>
    581e:	2800      	cmp	r0, #0
    5820:	d108      	bne.n	5834 <__smakebuf_r+0x44>
    5822:	220c      	movs	r2, #12
    5824:	5ea3      	ldrsh	r3, [r4, r2]
    5826:	059a      	lsls	r2, r3, #22
    5828:	d4ef      	bmi.n	580a <__smakebuf_r+0x1a>
    582a:	2203      	movs	r2, #3
    582c:	4393      	bics	r3, r2
    582e:	431e      	orrs	r6, r3
    5830:	81a6      	strh	r6, [r4, #12]
    5832:	e7e4      	b.n	57fe <__smakebuf_r+0xe>
    5834:	4b0f      	ldr	r3, [pc, #60]	; (5874 <__smakebuf_r+0x84>)
    5836:	62ab      	str	r3, [r5, #40]	; 0x28
    5838:	2380      	movs	r3, #128	; 0x80
    583a:	89a2      	ldrh	r2, [r4, #12]
    583c:	6020      	str	r0, [r4, #0]
    583e:	4313      	orrs	r3, r2
    5840:	81a3      	strh	r3, [r4, #12]
    5842:	9b00      	ldr	r3, [sp, #0]
    5844:	6120      	str	r0, [r4, #16]
    5846:	6163      	str	r3, [r4, #20]
    5848:	9b01      	ldr	r3, [sp, #4]
    584a:	2b00      	cmp	r3, #0
    584c:	d00d      	beq.n	586a <__smakebuf_r+0x7a>
    584e:	230e      	movs	r3, #14
    5850:	5ee1      	ldrsh	r1, [r4, r3]
    5852:	0028      	movs	r0, r5
    5854:	f000 fcd6 	bl	6204 <_isatty_r>
    5858:	2800      	cmp	r0, #0
    585a:	d006      	beq.n	586a <__smakebuf_r+0x7a>
    585c:	2203      	movs	r2, #3
    585e:	89a3      	ldrh	r3, [r4, #12]
    5860:	4393      	bics	r3, r2
    5862:	001a      	movs	r2, r3
    5864:	2301      	movs	r3, #1
    5866:	4313      	orrs	r3, r2
    5868:	81a3      	strh	r3, [r4, #12]
    586a:	89a0      	ldrh	r0, [r4, #12]
    586c:	4338      	orrs	r0, r7
    586e:	81a0      	strh	r0, [r4, #12]
    5870:	e7cb      	b.n	580a <__smakebuf_r+0x1a>
    5872:	46c0      	nop			; (mov r8, r8)
    5874:	000055d9 	.word	0x000055d9

00005878 <memchr>:
    5878:	b2c9      	uxtb	r1, r1
    587a:	1882      	adds	r2, r0, r2
    587c:	4290      	cmp	r0, r2
    587e:	d101      	bne.n	5884 <memchr+0xc>
    5880:	2000      	movs	r0, #0
    5882:	4770      	bx	lr
    5884:	7803      	ldrb	r3, [r0, #0]
    5886:	428b      	cmp	r3, r1
    5888:	d0fb      	beq.n	5882 <memchr+0xa>
    588a:	3001      	adds	r0, #1
    588c:	e7f6      	b.n	587c <memchr+0x4>

0000588e <__malloc_lock>:
    588e:	4770      	bx	lr

00005890 <__malloc_unlock>:
    5890:	4770      	bx	lr

00005892 <_Balloc>:
    5892:	b570      	push	{r4, r5, r6, lr}
    5894:	6a46      	ldr	r6, [r0, #36]	; 0x24
    5896:	0004      	movs	r4, r0
    5898:	000d      	movs	r5, r1
    589a:	2e00      	cmp	r6, #0
    589c:	d107      	bne.n	58ae <_Balloc+0x1c>
    589e:	2010      	movs	r0, #16
    58a0:	f7fd ff04 	bl	36ac <malloc>
    58a4:	6260      	str	r0, [r4, #36]	; 0x24
    58a6:	6046      	str	r6, [r0, #4]
    58a8:	6086      	str	r6, [r0, #8]
    58aa:	6006      	str	r6, [r0, #0]
    58ac:	60c6      	str	r6, [r0, #12]
    58ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
    58b0:	68f3      	ldr	r3, [r6, #12]
    58b2:	2b00      	cmp	r3, #0
    58b4:	d013      	beq.n	58de <_Balloc+0x4c>
    58b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    58b8:	00aa      	lsls	r2, r5, #2
    58ba:	68db      	ldr	r3, [r3, #12]
    58bc:	189b      	adds	r3, r3, r2
    58be:	6818      	ldr	r0, [r3, #0]
    58c0:	2800      	cmp	r0, #0
    58c2:	d118      	bne.n	58f6 <_Balloc+0x64>
    58c4:	2101      	movs	r1, #1
    58c6:	000e      	movs	r6, r1
    58c8:	40ae      	lsls	r6, r5
    58ca:	1d72      	adds	r2, r6, #5
    58cc:	0092      	lsls	r2, r2, #2
    58ce:	0020      	movs	r0, r4
    58d0:	f000 fac2 	bl	5e58 <_calloc_r>
    58d4:	2800      	cmp	r0, #0
    58d6:	d00c      	beq.n	58f2 <_Balloc+0x60>
    58d8:	6045      	str	r5, [r0, #4]
    58da:	6086      	str	r6, [r0, #8]
    58dc:	e00d      	b.n	58fa <_Balloc+0x68>
    58de:	2221      	movs	r2, #33	; 0x21
    58e0:	2104      	movs	r1, #4
    58e2:	0020      	movs	r0, r4
    58e4:	f000 fab8 	bl	5e58 <_calloc_r>
    58e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    58ea:	60f0      	str	r0, [r6, #12]
    58ec:	68db      	ldr	r3, [r3, #12]
    58ee:	2b00      	cmp	r3, #0
    58f0:	d1e1      	bne.n	58b6 <_Balloc+0x24>
    58f2:	2000      	movs	r0, #0
    58f4:	bd70      	pop	{r4, r5, r6, pc}
    58f6:	6802      	ldr	r2, [r0, #0]
    58f8:	601a      	str	r2, [r3, #0]
    58fa:	2300      	movs	r3, #0
    58fc:	6103      	str	r3, [r0, #16]
    58fe:	60c3      	str	r3, [r0, #12]
    5900:	e7f8      	b.n	58f4 <_Balloc+0x62>

00005902 <_Bfree>:
    5902:	b570      	push	{r4, r5, r6, lr}
    5904:	6a44      	ldr	r4, [r0, #36]	; 0x24
    5906:	0006      	movs	r6, r0
    5908:	000d      	movs	r5, r1
    590a:	2c00      	cmp	r4, #0
    590c:	d107      	bne.n	591e <_Bfree+0x1c>
    590e:	2010      	movs	r0, #16
    5910:	f7fd fecc 	bl	36ac <malloc>
    5914:	6270      	str	r0, [r6, #36]	; 0x24
    5916:	6044      	str	r4, [r0, #4]
    5918:	6084      	str	r4, [r0, #8]
    591a:	6004      	str	r4, [r0, #0]
    591c:	60c4      	str	r4, [r0, #12]
    591e:	2d00      	cmp	r5, #0
    5920:	d007      	beq.n	5932 <_Bfree+0x30>
    5922:	6a73      	ldr	r3, [r6, #36]	; 0x24
    5924:	686a      	ldr	r2, [r5, #4]
    5926:	68db      	ldr	r3, [r3, #12]
    5928:	0092      	lsls	r2, r2, #2
    592a:	189b      	adds	r3, r3, r2
    592c:	681a      	ldr	r2, [r3, #0]
    592e:	602a      	str	r2, [r5, #0]
    5930:	601d      	str	r5, [r3, #0]
    5932:	bd70      	pop	{r4, r5, r6, pc}

00005934 <__multadd>:
    5934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5936:	001e      	movs	r6, r3
    5938:	2314      	movs	r3, #20
    593a:	469c      	mov	ip, r3
    593c:	0007      	movs	r7, r0
    593e:	000c      	movs	r4, r1
    5940:	2000      	movs	r0, #0
    5942:	690d      	ldr	r5, [r1, #16]
    5944:	448c      	add	ip, r1
    5946:	4663      	mov	r3, ip
    5948:	8819      	ldrh	r1, [r3, #0]
    594a:	681b      	ldr	r3, [r3, #0]
    594c:	4351      	muls	r1, r2
    594e:	0c1b      	lsrs	r3, r3, #16
    5950:	4353      	muls	r3, r2
    5952:	1989      	adds	r1, r1, r6
    5954:	0c0e      	lsrs	r6, r1, #16
    5956:	199b      	adds	r3, r3, r6
    5958:	b289      	uxth	r1, r1
    595a:	0c1e      	lsrs	r6, r3, #16
    595c:	041b      	lsls	r3, r3, #16
    595e:	185b      	adds	r3, r3, r1
    5960:	4661      	mov	r1, ip
    5962:	3001      	adds	r0, #1
    5964:	c108      	stmia	r1!, {r3}
    5966:	468c      	mov	ip, r1
    5968:	4285      	cmp	r5, r0
    596a:	dcec      	bgt.n	5946 <__multadd+0x12>
    596c:	2e00      	cmp	r6, #0
    596e:	d01b      	beq.n	59a8 <__multadd+0x74>
    5970:	68a3      	ldr	r3, [r4, #8]
    5972:	429d      	cmp	r5, r3
    5974:	db12      	blt.n	599c <__multadd+0x68>
    5976:	6863      	ldr	r3, [r4, #4]
    5978:	0038      	movs	r0, r7
    597a:	1c59      	adds	r1, r3, #1
    597c:	f7ff ff89 	bl	5892 <_Balloc>
    5980:	0021      	movs	r1, r4
    5982:	6923      	ldr	r3, [r4, #16]
    5984:	9001      	str	r0, [sp, #4]
    5986:	1c9a      	adds	r2, r3, #2
    5988:	0092      	lsls	r2, r2, #2
    598a:	310c      	adds	r1, #12
    598c:	300c      	adds	r0, #12
    598e:	f7fd fea9 	bl	36e4 <memcpy>
    5992:	0021      	movs	r1, r4
    5994:	0038      	movs	r0, r7
    5996:	f7ff ffb4 	bl	5902 <_Bfree>
    599a:	9c01      	ldr	r4, [sp, #4]
    599c:	1d2b      	adds	r3, r5, #4
    599e:	009b      	lsls	r3, r3, #2
    59a0:	18e3      	adds	r3, r4, r3
    59a2:	3501      	adds	r5, #1
    59a4:	605e      	str	r6, [r3, #4]
    59a6:	6125      	str	r5, [r4, #16]
    59a8:	0020      	movs	r0, r4
    59aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000059ac <__hi0bits>:
    59ac:	0003      	movs	r3, r0
    59ae:	0c02      	lsrs	r2, r0, #16
    59b0:	2000      	movs	r0, #0
    59b2:	4282      	cmp	r2, r0
    59b4:	d101      	bne.n	59ba <__hi0bits+0xe>
    59b6:	041b      	lsls	r3, r3, #16
    59b8:	3010      	adds	r0, #16
    59ba:	0e1a      	lsrs	r2, r3, #24
    59bc:	d101      	bne.n	59c2 <__hi0bits+0x16>
    59be:	3008      	adds	r0, #8
    59c0:	021b      	lsls	r3, r3, #8
    59c2:	0f1a      	lsrs	r2, r3, #28
    59c4:	d101      	bne.n	59ca <__hi0bits+0x1e>
    59c6:	3004      	adds	r0, #4
    59c8:	011b      	lsls	r3, r3, #4
    59ca:	0f9a      	lsrs	r2, r3, #30
    59cc:	d101      	bne.n	59d2 <__hi0bits+0x26>
    59ce:	3002      	adds	r0, #2
    59d0:	009b      	lsls	r3, r3, #2
    59d2:	2b00      	cmp	r3, #0
    59d4:	db03      	blt.n	59de <__hi0bits+0x32>
    59d6:	3001      	adds	r0, #1
    59d8:	005b      	lsls	r3, r3, #1
    59da:	d400      	bmi.n	59de <__hi0bits+0x32>
    59dc:	2020      	movs	r0, #32
    59de:	4770      	bx	lr

000059e0 <__lo0bits>:
    59e0:	2207      	movs	r2, #7
    59e2:	6803      	ldr	r3, [r0, #0]
    59e4:	b510      	push	{r4, lr}
    59e6:	0001      	movs	r1, r0
    59e8:	401a      	ands	r2, r3
    59ea:	d00d      	beq.n	5a08 <__lo0bits+0x28>
    59ec:	2401      	movs	r4, #1
    59ee:	2000      	movs	r0, #0
    59f0:	4223      	tst	r3, r4
    59f2:	d105      	bne.n	5a00 <__lo0bits+0x20>
    59f4:	3002      	adds	r0, #2
    59f6:	4203      	tst	r3, r0
    59f8:	d003      	beq.n	5a02 <__lo0bits+0x22>
    59fa:	40e3      	lsrs	r3, r4
    59fc:	0020      	movs	r0, r4
    59fe:	600b      	str	r3, [r1, #0]
    5a00:	bd10      	pop	{r4, pc}
    5a02:	089b      	lsrs	r3, r3, #2
    5a04:	600b      	str	r3, [r1, #0]
    5a06:	e7fb      	b.n	5a00 <__lo0bits+0x20>
    5a08:	b29c      	uxth	r4, r3
    5a0a:	0010      	movs	r0, r2
    5a0c:	2c00      	cmp	r4, #0
    5a0e:	d101      	bne.n	5a14 <__lo0bits+0x34>
    5a10:	2010      	movs	r0, #16
    5a12:	0c1b      	lsrs	r3, r3, #16
    5a14:	b2da      	uxtb	r2, r3
    5a16:	2a00      	cmp	r2, #0
    5a18:	d101      	bne.n	5a1e <__lo0bits+0x3e>
    5a1a:	3008      	adds	r0, #8
    5a1c:	0a1b      	lsrs	r3, r3, #8
    5a1e:	071a      	lsls	r2, r3, #28
    5a20:	d101      	bne.n	5a26 <__lo0bits+0x46>
    5a22:	3004      	adds	r0, #4
    5a24:	091b      	lsrs	r3, r3, #4
    5a26:	079a      	lsls	r2, r3, #30
    5a28:	d101      	bne.n	5a2e <__lo0bits+0x4e>
    5a2a:	3002      	adds	r0, #2
    5a2c:	089b      	lsrs	r3, r3, #2
    5a2e:	07da      	lsls	r2, r3, #31
    5a30:	d4e8      	bmi.n	5a04 <__lo0bits+0x24>
    5a32:	085b      	lsrs	r3, r3, #1
    5a34:	d001      	beq.n	5a3a <__lo0bits+0x5a>
    5a36:	3001      	adds	r0, #1
    5a38:	e7e4      	b.n	5a04 <__lo0bits+0x24>
    5a3a:	2020      	movs	r0, #32
    5a3c:	e7e0      	b.n	5a00 <__lo0bits+0x20>

00005a3e <__i2b>:
    5a3e:	b510      	push	{r4, lr}
    5a40:	000c      	movs	r4, r1
    5a42:	2101      	movs	r1, #1
    5a44:	f7ff ff25 	bl	5892 <_Balloc>
    5a48:	2301      	movs	r3, #1
    5a4a:	6144      	str	r4, [r0, #20]
    5a4c:	6103      	str	r3, [r0, #16]
    5a4e:	bd10      	pop	{r4, pc}

00005a50 <__multiply>:
    5a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a52:	690b      	ldr	r3, [r1, #16]
    5a54:	0015      	movs	r5, r2
    5a56:	6912      	ldr	r2, [r2, #16]
    5a58:	b089      	sub	sp, #36	; 0x24
    5a5a:	000c      	movs	r4, r1
    5a5c:	4293      	cmp	r3, r2
    5a5e:	da01      	bge.n	5a64 <__multiply+0x14>
    5a60:	002c      	movs	r4, r5
    5a62:	000d      	movs	r5, r1
    5a64:	6927      	ldr	r7, [r4, #16]
    5a66:	692e      	ldr	r6, [r5, #16]
    5a68:	68a2      	ldr	r2, [r4, #8]
    5a6a:	19bb      	adds	r3, r7, r6
    5a6c:	6861      	ldr	r1, [r4, #4]
    5a6e:	9301      	str	r3, [sp, #4]
    5a70:	4293      	cmp	r3, r2
    5a72:	dd00      	ble.n	5a76 <__multiply+0x26>
    5a74:	3101      	adds	r1, #1
    5a76:	f7ff ff0c 	bl	5892 <_Balloc>
    5a7a:	0003      	movs	r3, r0
    5a7c:	3314      	adds	r3, #20
    5a7e:	9300      	str	r3, [sp, #0]
    5a80:	9a00      	ldr	r2, [sp, #0]
    5a82:	19bb      	adds	r3, r7, r6
    5a84:	4694      	mov	ip, r2
    5a86:	009b      	lsls	r3, r3, #2
    5a88:	449c      	add	ip, r3
    5a8a:	0013      	movs	r3, r2
    5a8c:	2200      	movs	r2, #0
    5a8e:	9004      	str	r0, [sp, #16]
    5a90:	4563      	cmp	r3, ip
    5a92:	d31c      	bcc.n	5ace <__multiply+0x7e>
    5a94:	002a      	movs	r2, r5
    5a96:	3414      	adds	r4, #20
    5a98:	00bf      	lsls	r7, r7, #2
    5a9a:	19e3      	adds	r3, r4, r7
    5a9c:	3214      	adds	r2, #20
    5a9e:	00b6      	lsls	r6, r6, #2
    5aa0:	9305      	str	r3, [sp, #20]
    5aa2:	1993      	adds	r3, r2, r6
    5aa4:	9402      	str	r4, [sp, #8]
    5aa6:	9306      	str	r3, [sp, #24]
    5aa8:	9b06      	ldr	r3, [sp, #24]
    5aaa:	429a      	cmp	r2, r3
    5aac:	d311      	bcc.n	5ad2 <__multiply+0x82>
    5aae:	9b01      	ldr	r3, [sp, #4]
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	dd06      	ble.n	5ac2 <__multiply+0x72>
    5ab4:	2304      	movs	r3, #4
    5ab6:	425b      	negs	r3, r3
    5ab8:	449c      	add	ip, r3
    5aba:	4663      	mov	r3, ip
    5abc:	681b      	ldr	r3, [r3, #0]
    5abe:	2b00      	cmp	r3, #0
    5ac0:	d051      	beq.n	5b66 <__multiply+0x116>
    5ac2:	9b04      	ldr	r3, [sp, #16]
    5ac4:	9a01      	ldr	r2, [sp, #4]
    5ac6:	0018      	movs	r0, r3
    5ac8:	611a      	str	r2, [r3, #16]
    5aca:	b009      	add	sp, #36	; 0x24
    5acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ace:	c304      	stmia	r3!, {r2}
    5ad0:	e7de      	b.n	5a90 <__multiply+0x40>
    5ad2:	8814      	ldrh	r4, [r2, #0]
    5ad4:	2c00      	cmp	r4, #0
    5ad6:	d01e      	beq.n	5b16 <__multiply+0xc6>
    5ad8:	2600      	movs	r6, #0
    5ada:	9d00      	ldr	r5, [sp, #0]
    5adc:	9f02      	ldr	r7, [sp, #8]
    5ade:	cf01      	ldmia	r7!, {r0}
    5ae0:	9507      	str	r5, [sp, #28]
    5ae2:	cd08      	ldmia	r5!, {r3}
    5ae4:	9303      	str	r3, [sp, #12]
    5ae6:	b283      	uxth	r3, r0
    5ae8:	4363      	muls	r3, r4
    5aea:	0019      	movs	r1, r3
    5aec:	466b      	mov	r3, sp
    5aee:	0c00      	lsrs	r0, r0, #16
    5af0:	899b      	ldrh	r3, [r3, #12]
    5af2:	4360      	muls	r0, r4
    5af4:	18cb      	adds	r3, r1, r3
    5af6:	9903      	ldr	r1, [sp, #12]
    5af8:	199b      	adds	r3, r3, r6
    5afa:	0c09      	lsrs	r1, r1, #16
    5afc:	1841      	adds	r1, r0, r1
    5afe:	0c18      	lsrs	r0, r3, #16
    5b00:	1809      	adds	r1, r1, r0
    5b02:	0c0e      	lsrs	r6, r1, #16
    5b04:	b29b      	uxth	r3, r3
    5b06:	0409      	lsls	r1, r1, #16
    5b08:	430b      	orrs	r3, r1
    5b0a:	9907      	ldr	r1, [sp, #28]
    5b0c:	600b      	str	r3, [r1, #0]
    5b0e:	9b05      	ldr	r3, [sp, #20]
    5b10:	42bb      	cmp	r3, r7
    5b12:	d8e4      	bhi.n	5ade <__multiply+0x8e>
    5b14:	602e      	str	r6, [r5, #0]
    5b16:	6813      	ldr	r3, [r2, #0]
    5b18:	0c1b      	lsrs	r3, r3, #16
    5b1a:	9303      	str	r3, [sp, #12]
    5b1c:	d01e      	beq.n	5b5c <__multiply+0x10c>
    5b1e:	2600      	movs	r6, #0
    5b20:	9b00      	ldr	r3, [sp, #0]
    5b22:	9c02      	ldr	r4, [sp, #8]
    5b24:	681b      	ldr	r3, [r3, #0]
    5b26:	9800      	ldr	r0, [sp, #0]
    5b28:	0007      	movs	r7, r0
    5b2a:	8821      	ldrh	r1, [r4, #0]
    5b2c:	9d03      	ldr	r5, [sp, #12]
    5b2e:	b29b      	uxth	r3, r3
    5b30:	4369      	muls	r1, r5
    5b32:	c820      	ldmia	r0!, {r5}
    5b34:	0c2d      	lsrs	r5, r5, #16
    5b36:	1949      	adds	r1, r1, r5
    5b38:	198e      	adds	r6, r1, r6
    5b3a:	0431      	lsls	r1, r6, #16
    5b3c:	430b      	orrs	r3, r1
    5b3e:	603b      	str	r3, [r7, #0]
    5b40:	cc08      	ldmia	r4!, {r3}
    5b42:	9903      	ldr	r1, [sp, #12]
    5b44:	0c1b      	lsrs	r3, r3, #16
    5b46:	434b      	muls	r3, r1
    5b48:	6879      	ldr	r1, [r7, #4]
    5b4a:	0c36      	lsrs	r6, r6, #16
    5b4c:	b289      	uxth	r1, r1
    5b4e:	185b      	adds	r3, r3, r1
    5b50:	9905      	ldr	r1, [sp, #20]
    5b52:	199b      	adds	r3, r3, r6
    5b54:	0c1e      	lsrs	r6, r3, #16
    5b56:	42a1      	cmp	r1, r4
    5b58:	d8e6      	bhi.n	5b28 <__multiply+0xd8>
    5b5a:	6003      	str	r3, [r0, #0]
    5b5c:	9b00      	ldr	r3, [sp, #0]
    5b5e:	3204      	adds	r2, #4
    5b60:	3304      	adds	r3, #4
    5b62:	9300      	str	r3, [sp, #0]
    5b64:	e7a0      	b.n	5aa8 <__multiply+0x58>
    5b66:	9b01      	ldr	r3, [sp, #4]
    5b68:	3b01      	subs	r3, #1
    5b6a:	9301      	str	r3, [sp, #4]
    5b6c:	e79f      	b.n	5aae <__multiply+0x5e>
	...

00005b70 <__pow5mult>:
    5b70:	2303      	movs	r3, #3
    5b72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5b74:	4013      	ands	r3, r2
    5b76:	0005      	movs	r5, r0
    5b78:	000e      	movs	r6, r1
    5b7a:	0014      	movs	r4, r2
    5b7c:	2b00      	cmp	r3, #0
    5b7e:	d008      	beq.n	5b92 <__pow5mult+0x22>
    5b80:	4922      	ldr	r1, [pc, #136]	; (5c0c <__pow5mult+0x9c>)
    5b82:	3b01      	subs	r3, #1
    5b84:	009a      	lsls	r2, r3, #2
    5b86:	5852      	ldr	r2, [r2, r1]
    5b88:	2300      	movs	r3, #0
    5b8a:	0031      	movs	r1, r6
    5b8c:	f7ff fed2 	bl	5934 <__multadd>
    5b90:	0006      	movs	r6, r0
    5b92:	10a3      	asrs	r3, r4, #2
    5b94:	9301      	str	r3, [sp, #4]
    5b96:	d036      	beq.n	5c06 <__pow5mult+0x96>
    5b98:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    5b9a:	2c00      	cmp	r4, #0
    5b9c:	d107      	bne.n	5bae <__pow5mult+0x3e>
    5b9e:	2010      	movs	r0, #16
    5ba0:	f7fd fd84 	bl	36ac <malloc>
    5ba4:	6268      	str	r0, [r5, #36]	; 0x24
    5ba6:	6044      	str	r4, [r0, #4]
    5ba8:	6084      	str	r4, [r0, #8]
    5baa:	6004      	str	r4, [r0, #0]
    5bac:	60c4      	str	r4, [r0, #12]
    5bae:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    5bb0:	68bc      	ldr	r4, [r7, #8]
    5bb2:	2c00      	cmp	r4, #0
    5bb4:	d107      	bne.n	5bc6 <__pow5mult+0x56>
    5bb6:	4916      	ldr	r1, [pc, #88]	; (5c10 <__pow5mult+0xa0>)
    5bb8:	0028      	movs	r0, r5
    5bba:	f7ff ff40 	bl	5a3e <__i2b>
    5bbe:	2300      	movs	r3, #0
    5bc0:	0004      	movs	r4, r0
    5bc2:	60b8      	str	r0, [r7, #8]
    5bc4:	6003      	str	r3, [r0, #0]
    5bc6:	2201      	movs	r2, #1
    5bc8:	9b01      	ldr	r3, [sp, #4]
    5bca:	4213      	tst	r3, r2
    5bcc:	d00a      	beq.n	5be4 <__pow5mult+0x74>
    5bce:	0031      	movs	r1, r6
    5bd0:	0022      	movs	r2, r4
    5bd2:	0028      	movs	r0, r5
    5bd4:	f7ff ff3c 	bl	5a50 <__multiply>
    5bd8:	0007      	movs	r7, r0
    5bda:	0031      	movs	r1, r6
    5bdc:	0028      	movs	r0, r5
    5bde:	f7ff fe90 	bl	5902 <_Bfree>
    5be2:	003e      	movs	r6, r7
    5be4:	9b01      	ldr	r3, [sp, #4]
    5be6:	105b      	asrs	r3, r3, #1
    5be8:	9301      	str	r3, [sp, #4]
    5bea:	d00c      	beq.n	5c06 <__pow5mult+0x96>
    5bec:	6820      	ldr	r0, [r4, #0]
    5bee:	2800      	cmp	r0, #0
    5bf0:	d107      	bne.n	5c02 <__pow5mult+0x92>
    5bf2:	0022      	movs	r2, r4
    5bf4:	0021      	movs	r1, r4
    5bf6:	0028      	movs	r0, r5
    5bf8:	f7ff ff2a 	bl	5a50 <__multiply>
    5bfc:	2300      	movs	r3, #0
    5bfe:	6020      	str	r0, [r4, #0]
    5c00:	6003      	str	r3, [r0, #0]
    5c02:	0004      	movs	r4, r0
    5c04:	e7df      	b.n	5bc6 <__pow5mult+0x56>
    5c06:	0030      	movs	r0, r6
    5c08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5c0a:	46c0      	nop			; (mov r8, r8)
    5c0c:	000096a0 	.word	0x000096a0
    5c10:	00000271 	.word	0x00000271

00005c14 <__lshift>:
    5c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c16:	000d      	movs	r5, r1
    5c18:	0017      	movs	r7, r2
    5c1a:	692b      	ldr	r3, [r5, #16]
    5c1c:	1154      	asrs	r4, r2, #5
    5c1e:	b085      	sub	sp, #20
    5c20:	18e3      	adds	r3, r4, r3
    5c22:	9302      	str	r3, [sp, #8]
    5c24:	3301      	adds	r3, #1
    5c26:	9301      	str	r3, [sp, #4]
    5c28:	6849      	ldr	r1, [r1, #4]
    5c2a:	68ab      	ldr	r3, [r5, #8]
    5c2c:	9003      	str	r0, [sp, #12]
    5c2e:	9a01      	ldr	r2, [sp, #4]
    5c30:	4293      	cmp	r3, r2
    5c32:	db34      	blt.n	5c9e <__lshift+0x8a>
    5c34:	9803      	ldr	r0, [sp, #12]
    5c36:	f7ff fe2c 	bl	5892 <_Balloc>
    5c3a:	2300      	movs	r3, #0
    5c3c:	0002      	movs	r2, r0
    5c3e:	0006      	movs	r6, r0
    5c40:	0019      	movs	r1, r3
    5c42:	3214      	adds	r2, #20
    5c44:	42a3      	cmp	r3, r4
    5c46:	db2d      	blt.n	5ca4 <__lshift+0x90>
    5c48:	43e3      	mvns	r3, r4
    5c4a:	17db      	asrs	r3, r3, #31
    5c4c:	401c      	ands	r4, r3
    5c4e:	002b      	movs	r3, r5
    5c50:	211f      	movs	r1, #31
    5c52:	00a4      	lsls	r4, r4, #2
    5c54:	1914      	adds	r4, r2, r4
    5c56:	692a      	ldr	r2, [r5, #16]
    5c58:	3314      	adds	r3, #20
    5c5a:	0092      	lsls	r2, r2, #2
    5c5c:	189a      	adds	r2, r3, r2
    5c5e:	400f      	ands	r7, r1
    5c60:	d024      	beq.n	5cac <__lshift+0x98>
    5c62:	3101      	adds	r1, #1
    5c64:	1bc9      	subs	r1, r1, r7
    5c66:	468c      	mov	ip, r1
    5c68:	2100      	movs	r1, #0
    5c6a:	6818      	ldr	r0, [r3, #0]
    5c6c:	40b8      	lsls	r0, r7
    5c6e:	4301      	orrs	r1, r0
    5c70:	4660      	mov	r0, ip
    5c72:	6021      	str	r1, [r4, #0]
    5c74:	cb02      	ldmia	r3!, {r1}
    5c76:	3404      	adds	r4, #4
    5c78:	40c1      	lsrs	r1, r0
    5c7a:	429a      	cmp	r2, r3
    5c7c:	d8f5      	bhi.n	5c6a <__lshift+0x56>
    5c7e:	6021      	str	r1, [r4, #0]
    5c80:	2900      	cmp	r1, #0
    5c82:	d002      	beq.n	5c8a <__lshift+0x76>
    5c84:	9b02      	ldr	r3, [sp, #8]
    5c86:	3302      	adds	r3, #2
    5c88:	9301      	str	r3, [sp, #4]
    5c8a:	9b01      	ldr	r3, [sp, #4]
    5c8c:	9803      	ldr	r0, [sp, #12]
    5c8e:	3b01      	subs	r3, #1
    5c90:	6133      	str	r3, [r6, #16]
    5c92:	0029      	movs	r1, r5
    5c94:	f7ff fe35 	bl	5902 <_Bfree>
    5c98:	0030      	movs	r0, r6
    5c9a:	b005      	add	sp, #20
    5c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c9e:	3101      	adds	r1, #1
    5ca0:	005b      	lsls	r3, r3, #1
    5ca2:	e7c4      	b.n	5c2e <__lshift+0x1a>
    5ca4:	0098      	lsls	r0, r3, #2
    5ca6:	5011      	str	r1, [r2, r0]
    5ca8:	3301      	adds	r3, #1
    5caa:	e7cb      	b.n	5c44 <__lshift+0x30>
    5cac:	cb02      	ldmia	r3!, {r1}
    5cae:	c402      	stmia	r4!, {r1}
    5cb0:	429a      	cmp	r2, r3
    5cb2:	d8fb      	bhi.n	5cac <__lshift+0x98>
    5cb4:	e7e9      	b.n	5c8a <__lshift+0x76>

00005cb6 <__mcmp>:
    5cb6:	690a      	ldr	r2, [r1, #16]
    5cb8:	6903      	ldr	r3, [r0, #16]
    5cba:	b530      	push	{r4, r5, lr}
    5cbc:	1a9b      	subs	r3, r3, r2
    5cbe:	d10e      	bne.n	5cde <__mcmp+0x28>
    5cc0:	0092      	lsls	r2, r2, #2
    5cc2:	3014      	adds	r0, #20
    5cc4:	3114      	adds	r1, #20
    5cc6:	1884      	adds	r4, r0, r2
    5cc8:	1889      	adds	r1, r1, r2
    5cca:	3c04      	subs	r4, #4
    5ccc:	3904      	subs	r1, #4
    5cce:	6822      	ldr	r2, [r4, #0]
    5cd0:	680d      	ldr	r5, [r1, #0]
    5cd2:	42aa      	cmp	r2, r5
    5cd4:	d005      	beq.n	5ce2 <__mcmp+0x2c>
    5cd6:	42aa      	cmp	r2, r5
    5cd8:	4192      	sbcs	r2, r2
    5cda:	2301      	movs	r3, #1
    5cdc:	4313      	orrs	r3, r2
    5cde:	0018      	movs	r0, r3
    5ce0:	bd30      	pop	{r4, r5, pc}
    5ce2:	42a0      	cmp	r0, r4
    5ce4:	d3f1      	bcc.n	5cca <__mcmp+0x14>
    5ce6:	e7fa      	b.n	5cde <__mcmp+0x28>

00005ce8 <__mdiff>:
    5ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cea:	000d      	movs	r5, r1
    5cec:	b085      	sub	sp, #20
    5cee:	0007      	movs	r7, r0
    5cf0:	0011      	movs	r1, r2
    5cf2:	0028      	movs	r0, r5
    5cf4:	0014      	movs	r4, r2
    5cf6:	f7ff ffde 	bl	5cb6 <__mcmp>
    5cfa:	1e06      	subs	r6, r0, #0
    5cfc:	d108      	bne.n	5d10 <__mdiff+0x28>
    5cfe:	0001      	movs	r1, r0
    5d00:	0038      	movs	r0, r7
    5d02:	f7ff fdc6 	bl	5892 <_Balloc>
    5d06:	2301      	movs	r3, #1
    5d08:	6146      	str	r6, [r0, #20]
    5d0a:	6103      	str	r3, [r0, #16]
    5d0c:	b005      	add	sp, #20
    5d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d10:	2301      	movs	r3, #1
    5d12:	9301      	str	r3, [sp, #4]
    5d14:	2800      	cmp	r0, #0
    5d16:	db04      	blt.n	5d22 <__mdiff+0x3a>
    5d18:	0023      	movs	r3, r4
    5d1a:	002c      	movs	r4, r5
    5d1c:	001d      	movs	r5, r3
    5d1e:	2300      	movs	r3, #0
    5d20:	9301      	str	r3, [sp, #4]
    5d22:	6861      	ldr	r1, [r4, #4]
    5d24:	0038      	movs	r0, r7
    5d26:	f7ff fdb4 	bl	5892 <_Balloc>
    5d2a:	002f      	movs	r7, r5
    5d2c:	2200      	movs	r2, #0
    5d2e:	9b01      	ldr	r3, [sp, #4]
    5d30:	6926      	ldr	r6, [r4, #16]
    5d32:	60c3      	str	r3, [r0, #12]
    5d34:	3414      	adds	r4, #20
    5d36:	00b3      	lsls	r3, r6, #2
    5d38:	18e3      	adds	r3, r4, r3
    5d3a:	9302      	str	r3, [sp, #8]
    5d3c:	692b      	ldr	r3, [r5, #16]
    5d3e:	3714      	adds	r7, #20
    5d40:	009b      	lsls	r3, r3, #2
    5d42:	18fb      	adds	r3, r7, r3
    5d44:	9303      	str	r3, [sp, #12]
    5d46:	0003      	movs	r3, r0
    5d48:	4694      	mov	ip, r2
    5d4a:	3314      	adds	r3, #20
    5d4c:	cc20      	ldmia	r4!, {r5}
    5d4e:	cf04      	ldmia	r7!, {r2}
    5d50:	9201      	str	r2, [sp, #4]
    5d52:	b2aa      	uxth	r2, r5
    5d54:	4494      	add	ip, r2
    5d56:	466a      	mov	r2, sp
    5d58:	4661      	mov	r1, ip
    5d5a:	8892      	ldrh	r2, [r2, #4]
    5d5c:	0c2d      	lsrs	r5, r5, #16
    5d5e:	1a8a      	subs	r2, r1, r2
    5d60:	9901      	ldr	r1, [sp, #4]
    5d62:	0c09      	lsrs	r1, r1, #16
    5d64:	1a69      	subs	r1, r5, r1
    5d66:	1415      	asrs	r5, r2, #16
    5d68:	1949      	adds	r1, r1, r5
    5d6a:	140d      	asrs	r5, r1, #16
    5d6c:	b292      	uxth	r2, r2
    5d6e:	0409      	lsls	r1, r1, #16
    5d70:	430a      	orrs	r2, r1
    5d72:	601a      	str	r2, [r3, #0]
    5d74:	9a03      	ldr	r2, [sp, #12]
    5d76:	46ac      	mov	ip, r5
    5d78:	3304      	adds	r3, #4
    5d7a:	42ba      	cmp	r2, r7
    5d7c:	d8e6      	bhi.n	5d4c <__mdiff+0x64>
    5d7e:	9902      	ldr	r1, [sp, #8]
    5d80:	001a      	movs	r2, r3
    5d82:	428c      	cmp	r4, r1
    5d84:	d305      	bcc.n	5d92 <__mdiff+0xaa>
    5d86:	3a04      	subs	r2, #4
    5d88:	6813      	ldr	r3, [r2, #0]
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	d00e      	beq.n	5dac <__mdiff+0xc4>
    5d8e:	6106      	str	r6, [r0, #16]
    5d90:	e7bc      	b.n	5d0c <__mdiff+0x24>
    5d92:	cc04      	ldmia	r4!, {r2}
    5d94:	b291      	uxth	r1, r2
    5d96:	4461      	add	r1, ip
    5d98:	140d      	asrs	r5, r1, #16
    5d9a:	0c12      	lsrs	r2, r2, #16
    5d9c:	1952      	adds	r2, r2, r5
    5d9e:	1415      	asrs	r5, r2, #16
    5da0:	b289      	uxth	r1, r1
    5da2:	0412      	lsls	r2, r2, #16
    5da4:	430a      	orrs	r2, r1
    5da6:	46ac      	mov	ip, r5
    5da8:	c304      	stmia	r3!, {r2}
    5daa:	e7e8      	b.n	5d7e <__mdiff+0x96>
    5dac:	3e01      	subs	r6, #1
    5dae:	e7ea      	b.n	5d86 <__mdiff+0x9e>

00005db0 <__d2b>:
    5db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5db2:	001d      	movs	r5, r3
    5db4:	2101      	movs	r1, #1
    5db6:	9f08      	ldr	r7, [sp, #32]
    5db8:	0014      	movs	r4, r2
    5dba:	f7ff fd6a 	bl	5892 <_Balloc>
    5dbe:	032b      	lsls	r3, r5, #12
    5dc0:	006d      	lsls	r5, r5, #1
    5dc2:	0006      	movs	r6, r0
    5dc4:	0b1b      	lsrs	r3, r3, #12
    5dc6:	0d6d      	lsrs	r5, r5, #21
    5dc8:	d124      	bne.n	5e14 <__d2b+0x64>
    5dca:	9301      	str	r3, [sp, #4]
    5dcc:	2c00      	cmp	r4, #0
    5dce:	d027      	beq.n	5e20 <__d2b+0x70>
    5dd0:	4668      	mov	r0, sp
    5dd2:	9400      	str	r4, [sp, #0]
    5dd4:	f7ff fe04 	bl	59e0 <__lo0bits>
    5dd8:	9c00      	ldr	r4, [sp, #0]
    5dda:	2800      	cmp	r0, #0
    5ddc:	d01e      	beq.n	5e1c <__d2b+0x6c>
    5dde:	9b01      	ldr	r3, [sp, #4]
    5de0:	2120      	movs	r1, #32
    5de2:	001a      	movs	r2, r3
    5de4:	1a09      	subs	r1, r1, r0
    5de6:	408a      	lsls	r2, r1
    5de8:	40c3      	lsrs	r3, r0
    5dea:	4322      	orrs	r2, r4
    5dec:	6172      	str	r2, [r6, #20]
    5dee:	9301      	str	r3, [sp, #4]
    5df0:	9c01      	ldr	r4, [sp, #4]
    5df2:	61b4      	str	r4, [r6, #24]
    5df4:	1e63      	subs	r3, r4, #1
    5df6:	419c      	sbcs	r4, r3
    5df8:	3401      	adds	r4, #1
    5dfa:	6134      	str	r4, [r6, #16]
    5dfc:	2d00      	cmp	r5, #0
    5dfe:	d018      	beq.n	5e32 <__d2b+0x82>
    5e00:	4b12      	ldr	r3, [pc, #72]	; (5e4c <__d2b+0x9c>)
    5e02:	18ed      	adds	r5, r5, r3
    5e04:	2335      	movs	r3, #53	; 0x35
    5e06:	182d      	adds	r5, r5, r0
    5e08:	603d      	str	r5, [r7, #0]
    5e0a:	1a18      	subs	r0, r3, r0
    5e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5e0e:	6018      	str	r0, [r3, #0]
    5e10:	0030      	movs	r0, r6
    5e12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5e14:	2280      	movs	r2, #128	; 0x80
    5e16:	0352      	lsls	r2, r2, #13
    5e18:	4313      	orrs	r3, r2
    5e1a:	e7d6      	b.n	5dca <__d2b+0x1a>
    5e1c:	6174      	str	r4, [r6, #20]
    5e1e:	e7e7      	b.n	5df0 <__d2b+0x40>
    5e20:	a801      	add	r0, sp, #4
    5e22:	f7ff fddd 	bl	59e0 <__lo0bits>
    5e26:	2401      	movs	r4, #1
    5e28:	9b01      	ldr	r3, [sp, #4]
    5e2a:	6134      	str	r4, [r6, #16]
    5e2c:	6173      	str	r3, [r6, #20]
    5e2e:	3020      	adds	r0, #32
    5e30:	e7e4      	b.n	5dfc <__d2b+0x4c>
    5e32:	4b07      	ldr	r3, [pc, #28]	; (5e50 <__d2b+0xa0>)
    5e34:	18c0      	adds	r0, r0, r3
    5e36:	4b07      	ldr	r3, [pc, #28]	; (5e54 <__d2b+0xa4>)
    5e38:	6038      	str	r0, [r7, #0]
    5e3a:	18e3      	adds	r3, r4, r3
    5e3c:	009b      	lsls	r3, r3, #2
    5e3e:	18f3      	adds	r3, r6, r3
    5e40:	6958      	ldr	r0, [r3, #20]
    5e42:	f7ff fdb3 	bl	59ac <__hi0bits>
    5e46:	0164      	lsls	r4, r4, #5
    5e48:	1a20      	subs	r0, r4, r0
    5e4a:	e7df      	b.n	5e0c <__d2b+0x5c>
    5e4c:	fffffbcd 	.word	0xfffffbcd
    5e50:	fffffbce 	.word	0xfffffbce
    5e54:	3fffffff 	.word	0x3fffffff

00005e58 <_calloc_r>:
    5e58:	434a      	muls	r2, r1
    5e5a:	b570      	push	{r4, r5, r6, lr}
    5e5c:	0011      	movs	r1, r2
    5e5e:	0014      	movs	r4, r2
    5e60:	f7fd fc9c 	bl	379c <_malloc_r>
    5e64:	1e05      	subs	r5, r0, #0
    5e66:	d003      	beq.n	5e70 <_calloc_r+0x18>
    5e68:	0022      	movs	r2, r4
    5e6a:	2100      	movs	r1, #0
    5e6c:	f7fd fc43 	bl	36f6 <memset>
    5e70:	0028      	movs	r0, r5
    5e72:	bd70      	pop	{r4, r5, r6, pc}

00005e74 <__sfputc_r>:
    5e74:	6893      	ldr	r3, [r2, #8]
    5e76:	b510      	push	{r4, lr}
    5e78:	3b01      	subs	r3, #1
    5e7a:	6093      	str	r3, [r2, #8]
    5e7c:	2b00      	cmp	r3, #0
    5e7e:	da05      	bge.n	5e8c <__sfputc_r+0x18>
    5e80:	6994      	ldr	r4, [r2, #24]
    5e82:	42a3      	cmp	r3, r4
    5e84:	db08      	blt.n	5e98 <__sfputc_r+0x24>
    5e86:	b2cb      	uxtb	r3, r1
    5e88:	2b0a      	cmp	r3, #10
    5e8a:	d005      	beq.n	5e98 <__sfputc_r+0x24>
    5e8c:	6813      	ldr	r3, [r2, #0]
    5e8e:	1c58      	adds	r0, r3, #1
    5e90:	6010      	str	r0, [r2, #0]
    5e92:	7019      	strb	r1, [r3, #0]
    5e94:	b2c8      	uxtb	r0, r1
    5e96:	bd10      	pop	{r4, pc}
    5e98:	f7fe fba4 	bl	45e4 <__swbuf_r>
    5e9c:	e7fb      	b.n	5e96 <__sfputc_r+0x22>

00005e9e <__sfputs_r>:
    5e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ea0:	0006      	movs	r6, r0
    5ea2:	000f      	movs	r7, r1
    5ea4:	0014      	movs	r4, r2
    5ea6:	18d5      	adds	r5, r2, r3
    5ea8:	42ac      	cmp	r4, r5
    5eaa:	d101      	bne.n	5eb0 <__sfputs_r+0x12>
    5eac:	2000      	movs	r0, #0
    5eae:	e007      	b.n	5ec0 <__sfputs_r+0x22>
    5eb0:	7821      	ldrb	r1, [r4, #0]
    5eb2:	003a      	movs	r2, r7
    5eb4:	0030      	movs	r0, r6
    5eb6:	f7ff ffdd 	bl	5e74 <__sfputc_r>
    5eba:	3401      	adds	r4, #1
    5ebc:	1c43      	adds	r3, r0, #1
    5ebe:	d1f3      	bne.n	5ea8 <__sfputs_r+0xa>
    5ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005ec4 <_vfiprintf_r>:
    5ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ec6:	b09f      	sub	sp, #124	; 0x7c
    5ec8:	0006      	movs	r6, r0
    5eca:	000f      	movs	r7, r1
    5ecc:	0014      	movs	r4, r2
    5ece:	9305      	str	r3, [sp, #20]
    5ed0:	2800      	cmp	r0, #0
    5ed2:	d004      	beq.n	5ede <_vfiprintf_r+0x1a>
    5ed4:	6983      	ldr	r3, [r0, #24]
    5ed6:	2b00      	cmp	r3, #0
    5ed8:	d101      	bne.n	5ede <_vfiprintf_r+0x1a>
    5eda:	f7ff fbbf 	bl	565c <__sinit>
    5ede:	4b7f      	ldr	r3, [pc, #508]	; (60dc <_vfiprintf_r+0x218>)
    5ee0:	429f      	cmp	r7, r3
    5ee2:	d15c      	bne.n	5f9e <_vfiprintf_r+0xda>
    5ee4:	6877      	ldr	r7, [r6, #4]
    5ee6:	89bb      	ldrh	r3, [r7, #12]
    5ee8:	071b      	lsls	r3, r3, #28
    5eea:	d562      	bpl.n	5fb2 <_vfiprintf_r+0xee>
    5eec:	693b      	ldr	r3, [r7, #16]
    5eee:	2b00      	cmp	r3, #0
    5ef0:	d05f      	beq.n	5fb2 <_vfiprintf_r+0xee>
    5ef2:	2300      	movs	r3, #0
    5ef4:	ad06      	add	r5, sp, #24
    5ef6:	616b      	str	r3, [r5, #20]
    5ef8:	3320      	adds	r3, #32
    5efa:	766b      	strb	r3, [r5, #25]
    5efc:	3310      	adds	r3, #16
    5efe:	76ab      	strb	r3, [r5, #26]
    5f00:	9402      	str	r4, [sp, #8]
    5f02:	9c02      	ldr	r4, [sp, #8]
    5f04:	7823      	ldrb	r3, [r4, #0]
    5f06:	2b00      	cmp	r3, #0
    5f08:	d15d      	bne.n	5fc6 <_vfiprintf_r+0x102>
    5f0a:	9b02      	ldr	r3, [sp, #8]
    5f0c:	1ae3      	subs	r3, r4, r3
    5f0e:	9304      	str	r3, [sp, #16]
    5f10:	d00d      	beq.n	5f2e <_vfiprintf_r+0x6a>
    5f12:	9b04      	ldr	r3, [sp, #16]
    5f14:	9a02      	ldr	r2, [sp, #8]
    5f16:	0039      	movs	r1, r7
    5f18:	0030      	movs	r0, r6
    5f1a:	f7ff ffc0 	bl	5e9e <__sfputs_r>
    5f1e:	1c43      	adds	r3, r0, #1
    5f20:	d100      	bne.n	5f24 <_vfiprintf_r+0x60>
    5f22:	e0cc      	b.n	60be <_vfiprintf_r+0x1fa>
    5f24:	696a      	ldr	r2, [r5, #20]
    5f26:	9b04      	ldr	r3, [sp, #16]
    5f28:	4694      	mov	ip, r2
    5f2a:	4463      	add	r3, ip
    5f2c:	616b      	str	r3, [r5, #20]
    5f2e:	7823      	ldrb	r3, [r4, #0]
    5f30:	2b00      	cmp	r3, #0
    5f32:	d100      	bne.n	5f36 <_vfiprintf_r+0x72>
    5f34:	e0c3      	b.n	60be <_vfiprintf_r+0x1fa>
    5f36:	2201      	movs	r2, #1
    5f38:	2300      	movs	r3, #0
    5f3a:	4252      	negs	r2, r2
    5f3c:	606a      	str	r2, [r5, #4]
    5f3e:	a902      	add	r1, sp, #8
    5f40:	3254      	adds	r2, #84	; 0x54
    5f42:	1852      	adds	r2, r2, r1
    5f44:	3401      	adds	r4, #1
    5f46:	602b      	str	r3, [r5, #0]
    5f48:	60eb      	str	r3, [r5, #12]
    5f4a:	60ab      	str	r3, [r5, #8]
    5f4c:	7013      	strb	r3, [r2, #0]
    5f4e:	65ab      	str	r3, [r5, #88]	; 0x58
    5f50:	7821      	ldrb	r1, [r4, #0]
    5f52:	2205      	movs	r2, #5
    5f54:	4862      	ldr	r0, [pc, #392]	; (60e0 <_vfiprintf_r+0x21c>)
    5f56:	f7ff fc8f 	bl	5878 <memchr>
    5f5a:	1c63      	adds	r3, r4, #1
    5f5c:	469c      	mov	ip, r3
    5f5e:	2800      	cmp	r0, #0
    5f60:	d135      	bne.n	5fce <_vfiprintf_r+0x10a>
    5f62:	6829      	ldr	r1, [r5, #0]
    5f64:	06cb      	lsls	r3, r1, #27
    5f66:	d504      	bpl.n	5f72 <_vfiprintf_r+0xae>
    5f68:	2353      	movs	r3, #83	; 0x53
    5f6a:	aa02      	add	r2, sp, #8
    5f6c:	3020      	adds	r0, #32
    5f6e:	189b      	adds	r3, r3, r2
    5f70:	7018      	strb	r0, [r3, #0]
    5f72:	070b      	lsls	r3, r1, #28
    5f74:	d504      	bpl.n	5f80 <_vfiprintf_r+0xbc>
    5f76:	2353      	movs	r3, #83	; 0x53
    5f78:	202b      	movs	r0, #43	; 0x2b
    5f7a:	aa02      	add	r2, sp, #8
    5f7c:	189b      	adds	r3, r3, r2
    5f7e:	7018      	strb	r0, [r3, #0]
    5f80:	7823      	ldrb	r3, [r4, #0]
    5f82:	2b2a      	cmp	r3, #42	; 0x2a
    5f84:	d02c      	beq.n	5fe0 <_vfiprintf_r+0x11c>
    5f86:	2000      	movs	r0, #0
    5f88:	210a      	movs	r1, #10
    5f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5f8c:	7822      	ldrb	r2, [r4, #0]
    5f8e:	3a30      	subs	r2, #48	; 0x30
    5f90:	2a09      	cmp	r2, #9
    5f92:	d800      	bhi.n	5f96 <_vfiprintf_r+0xd2>
    5f94:	e06b      	b.n	606e <_vfiprintf_r+0x1aa>
    5f96:	2800      	cmp	r0, #0
    5f98:	d02a      	beq.n	5ff0 <_vfiprintf_r+0x12c>
    5f9a:	9309      	str	r3, [sp, #36]	; 0x24
    5f9c:	e028      	b.n	5ff0 <_vfiprintf_r+0x12c>
    5f9e:	4b51      	ldr	r3, [pc, #324]	; (60e4 <_vfiprintf_r+0x220>)
    5fa0:	429f      	cmp	r7, r3
    5fa2:	d101      	bne.n	5fa8 <_vfiprintf_r+0xe4>
    5fa4:	68b7      	ldr	r7, [r6, #8]
    5fa6:	e79e      	b.n	5ee6 <_vfiprintf_r+0x22>
    5fa8:	4b4f      	ldr	r3, [pc, #316]	; (60e8 <_vfiprintf_r+0x224>)
    5faa:	429f      	cmp	r7, r3
    5fac:	d19b      	bne.n	5ee6 <_vfiprintf_r+0x22>
    5fae:	68f7      	ldr	r7, [r6, #12]
    5fb0:	e799      	b.n	5ee6 <_vfiprintf_r+0x22>
    5fb2:	0039      	movs	r1, r7
    5fb4:	0030      	movs	r0, r6
    5fb6:	f7fe fb77 	bl	46a8 <__swsetup_r>
    5fba:	2800      	cmp	r0, #0
    5fbc:	d099      	beq.n	5ef2 <_vfiprintf_r+0x2e>
    5fbe:	2001      	movs	r0, #1
    5fc0:	4240      	negs	r0, r0
    5fc2:	b01f      	add	sp, #124	; 0x7c
    5fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fc6:	2b25      	cmp	r3, #37	; 0x25
    5fc8:	d09f      	beq.n	5f0a <_vfiprintf_r+0x46>
    5fca:	3401      	adds	r4, #1
    5fcc:	e79a      	b.n	5f04 <_vfiprintf_r+0x40>
    5fce:	4b44      	ldr	r3, [pc, #272]	; (60e0 <_vfiprintf_r+0x21c>)
    5fd0:	6829      	ldr	r1, [r5, #0]
    5fd2:	1ac0      	subs	r0, r0, r3
    5fd4:	2301      	movs	r3, #1
    5fd6:	4083      	lsls	r3, r0
    5fd8:	430b      	orrs	r3, r1
    5fda:	602b      	str	r3, [r5, #0]
    5fdc:	4664      	mov	r4, ip
    5fde:	e7b7      	b.n	5f50 <_vfiprintf_r+0x8c>
    5fe0:	9b05      	ldr	r3, [sp, #20]
    5fe2:	1d18      	adds	r0, r3, #4
    5fe4:	681b      	ldr	r3, [r3, #0]
    5fe6:	9005      	str	r0, [sp, #20]
    5fe8:	2b00      	cmp	r3, #0
    5fea:	db3a      	blt.n	6062 <_vfiprintf_r+0x19e>
    5fec:	9309      	str	r3, [sp, #36]	; 0x24
    5fee:	4664      	mov	r4, ip
    5ff0:	7823      	ldrb	r3, [r4, #0]
    5ff2:	2b2e      	cmp	r3, #46	; 0x2e
    5ff4:	d10b      	bne.n	600e <_vfiprintf_r+0x14a>
    5ff6:	7863      	ldrb	r3, [r4, #1]
    5ff8:	1c62      	adds	r2, r4, #1
    5ffa:	2b2a      	cmp	r3, #42	; 0x2a
    5ffc:	d13f      	bne.n	607e <_vfiprintf_r+0x1ba>
    5ffe:	9b05      	ldr	r3, [sp, #20]
    6000:	3402      	adds	r4, #2
    6002:	1d1a      	adds	r2, r3, #4
    6004:	681b      	ldr	r3, [r3, #0]
    6006:	9205      	str	r2, [sp, #20]
    6008:	2b00      	cmp	r3, #0
    600a:	db35      	blt.n	6078 <_vfiprintf_r+0x1b4>
    600c:	9307      	str	r3, [sp, #28]
    600e:	7821      	ldrb	r1, [r4, #0]
    6010:	2203      	movs	r2, #3
    6012:	4836      	ldr	r0, [pc, #216]	; (60ec <_vfiprintf_r+0x228>)
    6014:	f7ff fc30 	bl	5878 <memchr>
    6018:	2800      	cmp	r0, #0
    601a:	d007      	beq.n	602c <_vfiprintf_r+0x168>
    601c:	4b33      	ldr	r3, [pc, #204]	; (60ec <_vfiprintf_r+0x228>)
    601e:	682a      	ldr	r2, [r5, #0]
    6020:	1ac0      	subs	r0, r0, r3
    6022:	2340      	movs	r3, #64	; 0x40
    6024:	4083      	lsls	r3, r0
    6026:	4313      	orrs	r3, r2
    6028:	602b      	str	r3, [r5, #0]
    602a:	3401      	adds	r4, #1
    602c:	7821      	ldrb	r1, [r4, #0]
    602e:	1c63      	adds	r3, r4, #1
    6030:	2206      	movs	r2, #6
    6032:	482f      	ldr	r0, [pc, #188]	; (60f0 <_vfiprintf_r+0x22c>)
    6034:	9302      	str	r3, [sp, #8]
    6036:	7629      	strb	r1, [r5, #24]
    6038:	f7ff fc1e 	bl	5878 <memchr>
    603c:	2800      	cmp	r0, #0
    603e:	d044      	beq.n	60ca <_vfiprintf_r+0x206>
    6040:	4b2c      	ldr	r3, [pc, #176]	; (60f4 <_vfiprintf_r+0x230>)
    6042:	2b00      	cmp	r3, #0
    6044:	d12f      	bne.n	60a6 <_vfiprintf_r+0x1e2>
    6046:	6829      	ldr	r1, [r5, #0]
    6048:	9b05      	ldr	r3, [sp, #20]
    604a:	2207      	movs	r2, #7
    604c:	05c9      	lsls	r1, r1, #23
    604e:	d528      	bpl.n	60a2 <_vfiprintf_r+0x1de>
    6050:	189b      	adds	r3, r3, r2
    6052:	4393      	bics	r3, r2
    6054:	3308      	adds	r3, #8
    6056:	9305      	str	r3, [sp, #20]
    6058:	696b      	ldr	r3, [r5, #20]
    605a:	9a03      	ldr	r2, [sp, #12]
    605c:	189b      	adds	r3, r3, r2
    605e:	616b      	str	r3, [r5, #20]
    6060:	e74f      	b.n	5f02 <_vfiprintf_r+0x3e>
    6062:	425b      	negs	r3, r3
    6064:	60eb      	str	r3, [r5, #12]
    6066:	2302      	movs	r3, #2
    6068:	430b      	orrs	r3, r1
    606a:	602b      	str	r3, [r5, #0]
    606c:	e7bf      	b.n	5fee <_vfiprintf_r+0x12a>
    606e:	434b      	muls	r3, r1
    6070:	3401      	adds	r4, #1
    6072:	189b      	adds	r3, r3, r2
    6074:	2001      	movs	r0, #1
    6076:	e789      	b.n	5f8c <_vfiprintf_r+0xc8>
    6078:	2301      	movs	r3, #1
    607a:	425b      	negs	r3, r3
    607c:	e7c6      	b.n	600c <_vfiprintf_r+0x148>
    607e:	2300      	movs	r3, #0
    6080:	0014      	movs	r4, r2
    6082:	200a      	movs	r0, #10
    6084:	001a      	movs	r2, r3
    6086:	606b      	str	r3, [r5, #4]
    6088:	7821      	ldrb	r1, [r4, #0]
    608a:	3930      	subs	r1, #48	; 0x30
    608c:	2909      	cmp	r1, #9
    608e:	d903      	bls.n	6098 <_vfiprintf_r+0x1d4>
    6090:	2b00      	cmp	r3, #0
    6092:	d0bc      	beq.n	600e <_vfiprintf_r+0x14a>
    6094:	9207      	str	r2, [sp, #28]
    6096:	e7ba      	b.n	600e <_vfiprintf_r+0x14a>
    6098:	4342      	muls	r2, r0
    609a:	3401      	adds	r4, #1
    609c:	1852      	adds	r2, r2, r1
    609e:	2301      	movs	r3, #1
    60a0:	e7f2      	b.n	6088 <_vfiprintf_r+0x1c4>
    60a2:	3307      	adds	r3, #7
    60a4:	e7d5      	b.n	6052 <_vfiprintf_r+0x18e>
    60a6:	ab05      	add	r3, sp, #20
    60a8:	9300      	str	r3, [sp, #0]
    60aa:	003a      	movs	r2, r7
    60ac:	4b12      	ldr	r3, [pc, #72]	; (60f8 <_vfiprintf_r+0x234>)
    60ae:	0029      	movs	r1, r5
    60b0:	0030      	movs	r0, r6
    60b2:	f7fd fc6d 	bl	3990 <_printf_float>
    60b6:	9003      	str	r0, [sp, #12]
    60b8:	9b03      	ldr	r3, [sp, #12]
    60ba:	3301      	adds	r3, #1
    60bc:	d1cc      	bne.n	6058 <_vfiprintf_r+0x194>
    60be:	89bb      	ldrh	r3, [r7, #12]
    60c0:	065b      	lsls	r3, r3, #25
    60c2:	d500      	bpl.n	60c6 <_vfiprintf_r+0x202>
    60c4:	e77b      	b.n	5fbe <_vfiprintf_r+0xfa>
    60c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    60c8:	e77b      	b.n	5fc2 <_vfiprintf_r+0xfe>
    60ca:	ab05      	add	r3, sp, #20
    60cc:	9300      	str	r3, [sp, #0]
    60ce:	003a      	movs	r2, r7
    60d0:	4b09      	ldr	r3, [pc, #36]	; (60f8 <_vfiprintf_r+0x234>)
    60d2:	0029      	movs	r1, r5
    60d4:	0030      	movs	r0, r6
    60d6:	f7fd ff15 	bl	3f04 <_printf_i>
    60da:	e7ec      	b.n	60b6 <_vfiprintf_r+0x1f2>
    60dc:	00009570 	.word	0x00009570
    60e0:	000096ac 	.word	0x000096ac
    60e4:	00009590 	.word	0x00009590
    60e8:	00009550 	.word	0x00009550
    60ec:	000096b2 	.word	0x000096b2
    60f0:	000096b6 	.word	0x000096b6
    60f4:	00003991 	.word	0x00003991
    60f8:	00005e9f 	.word	0x00005e9f

000060fc <__sread>:
    60fc:	b570      	push	{r4, r5, r6, lr}
    60fe:	000c      	movs	r4, r1
    6100:	250e      	movs	r5, #14
    6102:	5f49      	ldrsh	r1, [r1, r5]
    6104:	f000 f8a4 	bl	6250 <_read_r>
    6108:	2800      	cmp	r0, #0
    610a:	db03      	blt.n	6114 <__sread+0x18>
    610c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    610e:	181b      	adds	r3, r3, r0
    6110:	6563      	str	r3, [r4, #84]	; 0x54
    6112:	bd70      	pop	{r4, r5, r6, pc}
    6114:	89a3      	ldrh	r3, [r4, #12]
    6116:	4a02      	ldr	r2, [pc, #8]	; (6120 <__sread+0x24>)
    6118:	4013      	ands	r3, r2
    611a:	81a3      	strh	r3, [r4, #12]
    611c:	e7f9      	b.n	6112 <__sread+0x16>
    611e:	46c0      	nop			; (mov r8, r8)
    6120:	ffffefff 	.word	0xffffefff

00006124 <__swrite>:
    6124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6126:	001f      	movs	r7, r3
    6128:	898b      	ldrh	r3, [r1, #12]
    612a:	0005      	movs	r5, r0
    612c:	000c      	movs	r4, r1
    612e:	0016      	movs	r6, r2
    6130:	05db      	lsls	r3, r3, #23
    6132:	d505      	bpl.n	6140 <__swrite+0x1c>
    6134:	230e      	movs	r3, #14
    6136:	5ec9      	ldrsh	r1, [r1, r3]
    6138:	2200      	movs	r2, #0
    613a:	2302      	movs	r3, #2
    613c:	f000 f874 	bl	6228 <_lseek_r>
    6140:	89a3      	ldrh	r3, [r4, #12]
    6142:	4a05      	ldr	r2, [pc, #20]	; (6158 <__swrite+0x34>)
    6144:	0028      	movs	r0, r5
    6146:	4013      	ands	r3, r2
    6148:	81a3      	strh	r3, [r4, #12]
    614a:	0032      	movs	r2, r6
    614c:	230e      	movs	r3, #14
    614e:	5ee1      	ldrsh	r1, [r4, r3]
    6150:	003b      	movs	r3, r7
    6152:	f000 f81f 	bl	6194 <_write_r>
    6156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6158:	ffffefff 	.word	0xffffefff

0000615c <__sseek>:
    615c:	b570      	push	{r4, r5, r6, lr}
    615e:	000c      	movs	r4, r1
    6160:	250e      	movs	r5, #14
    6162:	5f49      	ldrsh	r1, [r1, r5]
    6164:	f000 f860 	bl	6228 <_lseek_r>
    6168:	89a3      	ldrh	r3, [r4, #12]
    616a:	1c42      	adds	r2, r0, #1
    616c:	d103      	bne.n	6176 <__sseek+0x1a>
    616e:	4a05      	ldr	r2, [pc, #20]	; (6184 <__sseek+0x28>)
    6170:	4013      	ands	r3, r2
    6172:	81a3      	strh	r3, [r4, #12]
    6174:	bd70      	pop	{r4, r5, r6, pc}
    6176:	2280      	movs	r2, #128	; 0x80
    6178:	0152      	lsls	r2, r2, #5
    617a:	4313      	orrs	r3, r2
    617c:	81a3      	strh	r3, [r4, #12]
    617e:	6560      	str	r0, [r4, #84]	; 0x54
    6180:	e7f8      	b.n	6174 <__sseek+0x18>
    6182:	46c0      	nop			; (mov r8, r8)
    6184:	ffffefff 	.word	0xffffefff

00006188 <__sclose>:
    6188:	b510      	push	{r4, lr}
    618a:	230e      	movs	r3, #14
    618c:	5ec9      	ldrsh	r1, [r1, r3]
    618e:	f000 f815 	bl	61bc <_close_r>
    6192:	bd10      	pop	{r4, pc}

00006194 <_write_r>:
    6194:	b570      	push	{r4, r5, r6, lr}
    6196:	0005      	movs	r5, r0
    6198:	0008      	movs	r0, r1
    619a:	0011      	movs	r1, r2
    619c:	2200      	movs	r2, #0
    619e:	4c06      	ldr	r4, [pc, #24]	; (61b8 <_write_r+0x24>)
    61a0:	6022      	str	r2, [r4, #0]
    61a2:	001a      	movs	r2, r3
    61a4:	f7fb f870 	bl	1288 <_write>
    61a8:	1c43      	adds	r3, r0, #1
    61aa:	d103      	bne.n	61b4 <_write_r+0x20>
    61ac:	6823      	ldr	r3, [r4, #0]
    61ae:	2b00      	cmp	r3, #0
    61b0:	d000      	beq.n	61b4 <_write_r+0x20>
    61b2:	602b      	str	r3, [r5, #0]
    61b4:	bd70      	pop	{r4, r5, r6, pc}
    61b6:	46c0      	nop			; (mov r8, r8)
    61b8:	20000384 	.word	0x20000384

000061bc <_close_r>:
    61bc:	2300      	movs	r3, #0
    61be:	b570      	push	{r4, r5, r6, lr}
    61c0:	4c06      	ldr	r4, [pc, #24]	; (61dc <_close_r+0x20>)
    61c2:	0005      	movs	r5, r0
    61c4:	0008      	movs	r0, r1
    61c6:	6023      	str	r3, [r4, #0]
    61c8:	f7fd f8f6 	bl	33b8 <_close>
    61cc:	1c43      	adds	r3, r0, #1
    61ce:	d103      	bne.n	61d8 <_close_r+0x1c>
    61d0:	6823      	ldr	r3, [r4, #0]
    61d2:	2b00      	cmp	r3, #0
    61d4:	d000      	beq.n	61d8 <_close_r+0x1c>
    61d6:	602b      	str	r3, [r5, #0]
    61d8:	bd70      	pop	{r4, r5, r6, pc}
    61da:	46c0      	nop			; (mov r8, r8)
    61dc:	20000384 	.word	0x20000384

000061e0 <_fstat_r>:
    61e0:	2300      	movs	r3, #0
    61e2:	b570      	push	{r4, r5, r6, lr}
    61e4:	4c06      	ldr	r4, [pc, #24]	; (6200 <_fstat_r+0x20>)
    61e6:	0005      	movs	r5, r0
    61e8:	0008      	movs	r0, r1
    61ea:	0011      	movs	r1, r2
    61ec:	6023      	str	r3, [r4, #0]
    61ee:	f7fd f8e6 	bl	33be <_fstat>
    61f2:	1c43      	adds	r3, r0, #1
    61f4:	d103      	bne.n	61fe <_fstat_r+0x1e>
    61f6:	6823      	ldr	r3, [r4, #0]
    61f8:	2b00      	cmp	r3, #0
    61fa:	d000      	beq.n	61fe <_fstat_r+0x1e>
    61fc:	602b      	str	r3, [r5, #0]
    61fe:	bd70      	pop	{r4, r5, r6, pc}
    6200:	20000384 	.word	0x20000384

00006204 <_isatty_r>:
    6204:	2300      	movs	r3, #0
    6206:	b570      	push	{r4, r5, r6, lr}
    6208:	4c06      	ldr	r4, [pc, #24]	; (6224 <_isatty_r+0x20>)
    620a:	0005      	movs	r5, r0
    620c:	0008      	movs	r0, r1
    620e:	6023      	str	r3, [r4, #0]
    6210:	f7fd f8da 	bl	33c8 <_isatty>
    6214:	1c43      	adds	r3, r0, #1
    6216:	d103      	bne.n	6220 <_isatty_r+0x1c>
    6218:	6823      	ldr	r3, [r4, #0]
    621a:	2b00      	cmp	r3, #0
    621c:	d000      	beq.n	6220 <_isatty_r+0x1c>
    621e:	602b      	str	r3, [r5, #0]
    6220:	bd70      	pop	{r4, r5, r6, pc}
    6222:	46c0      	nop			; (mov r8, r8)
    6224:	20000384 	.word	0x20000384

00006228 <_lseek_r>:
    6228:	b570      	push	{r4, r5, r6, lr}
    622a:	0005      	movs	r5, r0
    622c:	0008      	movs	r0, r1
    622e:	0011      	movs	r1, r2
    6230:	2200      	movs	r2, #0
    6232:	4c06      	ldr	r4, [pc, #24]	; (624c <_lseek_r+0x24>)
    6234:	6022      	str	r2, [r4, #0]
    6236:	001a      	movs	r2, r3
    6238:	f7fd f8c8 	bl	33cc <_lseek>
    623c:	1c43      	adds	r3, r0, #1
    623e:	d103      	bne.n	6248 <_lseek_r+0x20>
    6240:	6823      	ldr	r3, [r4, #0]
    6242:	2b00      	cmp	r3, #0
    6244:	d000      	beq.n	6248 <_lseek_r+0x20>
    6246:	602b      	str	r3, [r5, #0]
    6248:	bd70      	pop	{r4, r5, r6, pc}
    624a:	46c0      	nop			; (mov r8, r8)
    624c:	20000384 	.word	0x20000384

00006250 <_read_r>:
    6250:	b570      	push	{r4, r5, r6, lr}
    6252:	0005      	movs	r5, r0
    6254:	0008      	movs	r0, r1
    6256:	0011      	movs	r1, r2
    6258:	2200      	movs	r2, #0
    625a:	4c06      	ldr	r4, [pc, #24]	; (6274 <_read_r+0x24>)
    625c:	6022      	str	r2, [r4, #0]
    625e:	001a      	movs	r2, r3
    6260:	f7fa fff0 	bl	1244 <_read>
    6264:	1c43      	adds	r3, r0, #1
    6266:	d103      	bne.n	6270 <_read_r+0x20>
    6268:	6823      	ldr	r3, [r4, #0]
    626a:	2b00      	cmp	r3, #0
    626c:	d000      	beq.n	6270 <_read_r+0x20>
    626e:	602b      	str	r3, [r5, #0]
    6270:	bd70      	pop	{r4, r5, r6, pc}
    6272:	46c0      	nop			; (mov r8, r8)
    6274:	20000384 	.word	0x20000384

00006278 <__gnu_thumb1_case_uqi>:
    6278:	b402      	push	{r1}
    627a:	4671      	mov	r1, lr
    627c:	0849      	lsrs	r1, r1, #1
    627e:	0049      	lsls	r1, r1, #1
    6280:	5c09      	ldrb	r1, [r1, r0]
    6282:	0049      	lsls	r1, r1, #1
    6284:	448e      	add	lr, r1
    6286:	bc02      	pop	{r1}
    6288:	4770      	bx	lr
    628a:	46c0      	nop			; (mov r8, r8)

0000628c <__udivsi3>:
    628c:	2200      	movs	r2, #0
    628e:	0843      	lsrs	r3, r0, #1
    6290:	428b      	cmp	r3, r1
    6292:	d374      	bcc.n	637e <__udivsi3+0xf2>
    6294:	0903      	lsrs	r3, r0, #4
    6296:	428b      	cmp	r3, r1
    6298:	d35f      	bcc.n	635a <__udivsi3+0xce>
    629a:	0a03      	lsrs	r3, r0, #8
    629c:	428b      	cmp	r3, r1
    629e:	d344      	bcc.n	632a <__udivsi3+0x9e>
    62a0:	0b03      	lsrs	r3, r0, #12
    62a2:	428b      	cmp	r3, r1
    62a4:	d328      	bcc.n	62f8 <__udivsi3+0x6c>
    62a6:	0c03      	lsrs	r3, r0, #16
    62a8:	428b      	cmp	r3, r1
    62aa:	d30d      	bcc.n	62c8 <__udivsi3+0x3c>
    62ac:	22ff      	movs	r2, #255	; 0xff
    62ae:	0209      	lsls	r1, r1, #8
    62b0:	ba12      	rev	r2, r2
    62b2:	0c03      	lsrs	r3, r0, #16
    62b4:	428b      	cmp	r3, r1
    62b6:	d302      	bcc.n	62be <__udivsi3+0x32>
    62b8:	1212      	asrs	r2, r2, #8
    62ba:	0209      	lsls	r1, r1, #8
    62bc:	d065      	beq.n	638a <__udivsi3+0xfe>
    62be:	0b03      	lsrs	r3, r0, #12
    62c0:	428b      	cmp	r3, r1
    62c2:	d319      	bcc.n	62f8 <__udivsi3+0x6c>
    62c4:	e000      	b.n	62c8 <__udivsi3+0x3c>
    62c6:	0a09      	lsrs	r1, r1, #8
    62c8:	0bc3      	lsrs	r3, r0, #15
    62ca:	428b      	cmp	r3, r1
    62cc:	d301      	bcc.n	62d2 <__udivsi3+0x46>
    62ce:	03cb      	lsls	r3, r1, #15
    62d0:	1ac0      	subs	r0, r0, r3
    62d2:	4152      	adcs	r2, r2
    62d4:	0b83      	lsrs	r3, r0, #14
    62d6:	428b      	cmp	r3, r1
    62d8:	d301      	bcc.n	62de <__udivsi3+0x52>
    62da:	038b      	lsls	r3, r1, #14
    62dc:	1ac0      	subs	r0, r0, r3
    62de:	4152      	adcs	r2, r2
    62e0:	0b43      	lsrs	r3, r0, #13
    62e2:	428b      	cmp	r3, r1
    62e4:	d301      	bcc.n	62ea <__udivsi3+0x5e>
    62e6:	034b      	lsls	r3, r1, #13
    62e8:	1ac0      	subs	r0, r0, r3
    62ea:	4152      	adcs	r2, r2
    62ec:	0b03      	lsrs	r3, r0, #12
    62ee:	428b      	cmp	r3, r1
    62f0:	d301      	bcc.n	62f6 <__udivsi3+0x6a>
    62f2:	030b      	lsls	r3, r1, #12
    62f4:	1ac0      	subs	r0, r0, r3
    62f6:	4152      	adcs	r2, r2
    62f8:	0ac3      	lsrs	r3, r0, #11
    62fa:	428b      	cmp	r3, r1
    62fc:	d301      	bcc.n	6302 <__udivsi3+0x76>
    62fe:	02cb      	lsls	r3, r1, #11
    6300:	1ac0      	subs	r0, r0, r3
    6302:	4152      	adcs	r2, r2
    6304:	0a83      	lsrs	r3, r0, #10
    6306:	428b      	cmp	r3, r1
    6308:	d301      	bcc.n	630e <__udivsi3+0x82>
    630a:	028b      	lsls	r3, r1, #10
    630c:	1ac0      	subs	r0, r0, r3
    630e:	4152      	adcs	r2, r2
    6310:	0a43      	lsrs	r3, r0, #9
    6312:	428b      	cmp	r3, r1
    6314:	d301      	bcc.n	631a <__udivsi3+0x8e>
    6316:	024b      	lsls	r3, r1, #9
    6318:	1ac0      	subs	r0, r0, r3
    631a:	4152      	adcs	r2, r2
    631c:	0a03      	lsrs	r3, r0, #8
    631e:	428b      	cmp	r3, r1
    6320:	d301      	bcc.n	6326 <__udivsi3+0x9a>
    6322:	020b      	lsls	r3, r1, #8
    6324:	1ac0      	subs	r0, r0, r3
    6326:	4152      	adcs	r2, r2
    6328:	d2cd      	bcs.n	62c6 <__udivsi3+0x3a>
    632a:	09c3      	lsrs	r3, r0, #7
    632c:	428b      	cmp	r3, r1
    632e:	d301      	bcc.n	6334 <__udivsi3+0xa8>
    6330:	01cb      	lsls	r3, r1, #7
    6332:	1ac0      	subs	r0, r0, r3
    6334:	4152      	adcs	r2, r2
    6336:	0983      	lsrs	r3, r0, #6
    6338:	428b      	cmp	r3, r1
    633a:	d301      	bcc.n	6340 <__udivsi3+0xb4>
    633c:	018b      	lsls	r3, r1, #6
    633e:	1ac0      	subs	r0, r0, r3
    6340:	4152      	adcs	r2, r2
    6342:	0943      	lsrs	r3, r0, #5
    6344:	428b      	cmp	r3, r1
    6346:	d301      	bcc.n	634c <__udivsi3+0xc0>
    6348:	014b      	lsls	r3, r1, #5
    634a:	1ac0      	subs	r0, r0, r3
    634c:	4152      	adcs	r2, r2
    634e:	0903      	lsrs	r3, r0, #4
    6350:	428b      	cmp	r3, r1
    6352:	d301      	bcc.n	6358 <__udivsi3+0xcc>
    6354:	010b      	lsls	r3, r1, #4
    6356:	1ac0      	subs	r0, r0, r3
    6358:	4152      	adcs	r2, r2
    635a:	08c3      	lsrs	r3, r0, #3
    635c:	428b      	cmp	r3, r1
    635e:	d301      	bcc.n	6364 <__udivsi3+0xd8>
    6360:	00cb      	lsls	r3, r1, #3
    6362:	1ac0      	subs	r0, r0, r3
    6364:	4152      	adcs	r2, r2
    6366:	0883      	lsrs	r3, r0, #2
    6368:	428b      	cmp	r3, r1
    636a:	d301      	bcc.n	6370 <__udivsi3+0xe4>
    636c:	008b      	lsls	r3, r1, #2
    636e:	1ac0      	subs	r0, r0, r3
    6370:	4152      	adcs	r2, r2
    6372:	0843      	lsrs	r3, r0, #1
    6374:	428b      	cmp	r3, r1
    6376:	d301      	bcc.n	637c <__udivsi3+0xf0>
    6378:	004b      	lsls	r3, r1, #1
    637a:	1ac0      	subs	r0, r0, r3
    637c:	4152      	adcs	r2, r2
    637e:	1a41      	subs	r1, r0, r1
    6380:	d200      	bcs.n	6384 <__udivsi3+0xf8>
    6382:	4601      	mov	r1, r0
    6384:	4152      	adcs	r2, r2
    6386:	4610      	mov	r0, r2
    6388:	4770      	bx	lr
    638a:	e7ff      	b.n	638c <__udivsi3+0x100>
    638c:	b501      	push	{r0, lr}
    638e:	2000      	movs	r0, #0
    6390:	f000 f8f0 	bl	6574 <__aeabi_idiv0>
    6394:	bd02      	pop	{r1, pc}
    6396:	46c0      	nop			; (mov r8, r8)

00006398 <__aeabi_uidivmod>:
    6398:	2900      	cmp	r1, #0
    639a:	d0f7      	beq.n	638c <__udivsi3+0x100>
    639c:	e776      	b.n	628c <__udivsi3>
    639e:	4770      	bx	lr

000063a0 <__divsi3>:
    63a0:	4603      	mov	r3, r0
    63a2:	430b      	orrs	r3, r1
    63a4:	d47f      	bmi.n	64a6 <__divsi3+0x106>
    63a6:	2200      	movs	r2, #0
    63a8:	0843      	lsrs	r3, r0, #1
    63aa:	428b      	cmp	r3, r1
    63ac:	d374      	bcc.n	6498 <__divsi3+0xf8>
    63ae:	0903      	lsrs	r3, r0, #4
    63b0:	428b      	cmp	r3, r1
    63b2:	d35f      	bcc.n	6474 <__divsi3+0xd4>
    63b4:	0a03      	lsrs	r3, r0, #8
    63b6:	428b      	cmp	r3, r1
    63b8:	d344      	bcc.n	6444 <__divsi3+0xa4>
    63ba:	0b03      	lsrs	r3, r0, #12
    63bc:	428b      	cmp	r3, r1
    63be:	d328      	bcc.n	6412 <__divsi3+0x72>
    63c0:	0c03      	lsrs	r3, r0, #16
    63c2:	428b      	cmp	r3, r1
    63c4:	d30d      	bcc.n	63e2 <__divsi3+0x42>
    63c6:	22ff      	movs	r2, #255	; 0xff
    63c8:	0209      	lsls	r1, r1, #8
    63ca:	ba12      	rev	r2, r2
    63cc:	0c03      	lsrs	r3, r0, #16
    63ce:	428b      	cmp	r3, r1
    63d0:	d302      	bcc.n	63d8 <__divsi3+0x38>
    63d2:	1212      	asrs	r2, r2, #8
    63d4:	0209      	lsls	r1, r1, #8
    63d6:	d065      	beq.n	64a4 <__divsi3+0x104>
    63d8:	0b03      	lsrs	r3, r0, #12
    63da:	428b      	cmp	r3, r1
    63dc:	d319      	bcc.n	6412 <__divsi3+0x72>
    63de:	e000      	b.n	63e2 <__divsi3+0x42>
    63e0:	0a09      	lsrs	r1, r1, #8
    63e2:	0bc3      	lsrs	r3, r0, #15
    63e4:	428b      	cmp	r3, r1
    63e6:	d301      	bcc.n	63ec <__divsi3+0x4c>
    63e8:	03cb      	lsls	r3, r1, #15
    63ea:	1ac0      	subs	r0, r0, r3
    63ec:	4152      	adcs	r2, r2
    63ee:	0b83      	lsrs	r3, r0, #14
    63f0:	428b      	cmp	r3, r1
    63f2:	d301      	bcc.n	63f8 <__divsi3+0x58>
    63f4:	038b      	lsls	r3, r1, #14
    63f6:	1ac0      	subs	r0, r0, r3
    63f8:	4152      	adcs	r2, r2
    63fa:	0b43      	lsrs	r3, r0, #13
    63fc:	428b      	cmp	r3, r1
    63fe:	d301      	bcc.n	6404 <__divsi3+0x64>
    6400:	034b      	lsls	r3, r1, #13
    6402:	1ac0      	subs	r0, r0, r3
    6404:	4152      	adcs	r2, r2
    6406:	0b03      	lsrs	r3, r0, #12
    6408:	428b      	cmp	r3, r1
    640a:	d301      	bcc.n	6410 <__divsi3+0x70>
    640c:	030b      	lsls	r3, r1, #12
    640e:	1ac0      	subs	r0, r0, r3
    6410:	4152      	adcs	r2, r2
    6412:	0ac3      	lsrs	r3, r0, #11
    6414:	428b      	cmp	r3, r1
    6416:	d301      	bcc.n	641c <__divsi3+0x7c>
    6418:	02cb      	lsls	r3, r1, #11
    641a:	1ac0      	subs	r0, r0, r3
    641c:	4152      	adcs	r2, r2
    641e:	0a83      	lsrs	r3, r0, #10
    6420:	428b      	cmp	r3, r1
    6422:	d301      	bcc.n	6428 <__divsi3+0x88>
    6424:	028b      	lsls	r3, r1, #10
    6426:	1ac0      	subs	r0, r0, r3
    6428:	4152      	adcs	r2, r2
    642a:	0a43      	lsrs	r3, r0, #9
    642c:	428b      	cmp	r3, r1
    642e:	d301      	bcc.n	6434 <__divsi3+0x94>
    6430:	024b      	lsls	r3, r1, #9
    6432:	1ac0      	subs	r0, r0, r3
    6434:	4152      	adcs	r2, r2
    6436:	0a03      	lsrs	r3, r0, #8
    6438:	428b      	cmp	r3, r1
    643a:	d301      	bcc.n	6440 <__divsi3+0xa0>
    643c:	020b      	lsls	r3, r1, #8
    643e:	1ac0      	subs	r0, r0, r3
    6440:	4152      	adcs	r2, r2
    6442:	d2cd      	bcs.n	63e0 <__divsi3+0x40>
    6444:	09c3      	lsrs	r3, r0, #7
    6446:	428b      	cmp	r3, r1
    6448:	d301      	bcc.n	644e <__divsi3+0xae>
    644a:	01cb      	lsls	r3, r1, #7
    644c:	1ac0      	subs	r0, r0, r3
    644e:	4152      	adcs	r2, r2
    6450:	0983      	lsrs	r3, r0, #6
    6452:	428b      	cmp	r3, r1
    6454:	d301      	bcc.n	645a <__divsi3+0xba>
    6456:	018b      	lsls	r3, r1, #6
    6458:	1ac0      	subs	r0, r0, r3
    645a:	4152      	adcs	r2, r2
    645c:	0943      	lsrs	r3, r0, #5
    645e:	428b      	cmp	r3, r1
    6460:	d301      	bcc.n	6466 <__divsi3+0xc6>
    6462:	014b      	lsls	r3, r1, #5
    6464:	1ac0      	subs	r0, r0, r3
    6466:	4152      	adcs	r2, r2
    6468:	0903      	lsrs	r3, r0, #4
    646a:	428b      	cmp	r3, r1
    646c:	d301      	bcc.n	6472 <__divsi3+0xd2>
    646e:	010b      	lsls	r3, r1, #4
    6470:	1ac0      	subs	r0, r0, r3
    6472:	4152      	adcs	r2, r2
    6474:	08c3      	lsrs	r3, r0, #3
    6476:	428b      	cmp	r3, r1
    6478:	d301      	bcc.n	647e <__divsi3+0xde>
    647a:	00cb      	lsls	r3, r1, #3
    647c:	1ac0      	subs	r0, r0, r3
    647e:	4152      	adcs	r2, r2
    6480:	0883      	lsrs	r3, r0, #2
    6482:	428b      	cmp	r3, r1
    6484:	d301      	bcc.n	648a <__divsi3+0xea>
    6486:	008b      	lsls	r3, r1, #2
    6488:	1ac0      	subs	r0, r0, r3
    648a:	4152      	adcs	r2, r2
    648c:	0843      	lsrs	r3, r0, #1
    648e:	428b      	cmp	r3, r1
    6490:	d301      	bcc.n	6496 <__divsi3+0xf6>
    6492:	004b      	lsls	r3, r1, #1
    6494:	1ac0      	subs	r0, r0, r3
    6496:	4152      	adcs	r2, r2
    6498:	1a41      	subs	r1, r0, r1
    649a:	d200      	bcs.n	649e <__divsi3+0xfe>
    649c:	4601      	mov	r1, r0
    649e:	4152      	adcs	r2, r2
    64a0:	4610      	mov	r0, r2
    64a2:	4770      	bx	lr
    64a4:	e05d      	b.n	6562 <__divsi3+0x1c2>
    64a6:	0fca      	lsrs	r2, r1, #31
    64a8:	d000      	beq.n	64ac <__divsi3+0x10c>
    64aa:	4249      	negs	r1, r1
    64ac:	1003      	asrs	r3, r0, #32
    64ae:	d300      	bcc.n	64b2 <__divsi3+0x112>
    64b0:	4240      	negs	r0, r0
    64b2:	4053      	eors	r3, r2
    64b4:	2200      	movs	r2, #0
    64b6:	469c      	mov	ip, r3
    64b8:	0903      	lsrs	r3, r0, #4
    64ba:	428b      	cmp	r3, r1
    64bc:	d32d      	bcc.n	651a <__divsi3+0x17a>
    64be:	0a03      	lsrs	r3, r0, #8
    64c0:	428b      	cmp	r3, r1
    64c2:	d312      	bcc.n	64ea <__divsi3+0x14a>
    64c4:	22fc      	movs	r2, #252	; 0xfc
    64c6:	0189      	lsls	r1, r1, #6
    64c8:	ba12      	rev	r2, r2
    64ca:	0a03      	lsrs	r3, r0, #8
    64cc:	428b      	cmp	r3, r1
    64ce:	d30c      	bcc.n	64ea <__divsi3+0x14a>
    64d0:	0189      	lsls	r1, r1, #6
    64d2:	1192      	asrs	r2, r2, #6
    64d4:	428b      	cmp	r3, r1
    64d6:	d308      	bcc.n	64ea <__divsi3+0x14a>
    64d8:	0189      	lsls	r1, r1, #6
    64da:	1192      	asrs	r2, r2, #6
    64dc:	428b      	cmp	r3, r1
    64de:	d304      	bcc.n	64ea <__divsi3+0x14a>
    64e0:	0189      	lsls	r1, r1, #6
    64e2:	d03a      	beq.n	655a <__divsi3+0x1ba>
    64e4:	1192      	asrs	r2, r2, #6
    64e6:	e000      	b.n	64ea <__divsi3+0x14a>
    64e8:	0989      	lsrs	r1, r1, #6
    64ea:	09c3      	lsrs	r3, r0, #7
    64ec:	428b      	cmp	r3, r1
    64ee:	d301      	bcc.n	64f4 <__divsi3+0x154>
    64f0:	01cb      	lsls	r3, r1, #7
    64f2:	1ac0      	subs	r0, r0, r3
    64f4:	4152      	adcs	r2, r2
    64f6:	0983      	lsrs	r3, r0, #6
    64f8:	428b      	cmp	r3, r1
    64fa:	d301      	bcc.n	6500 <__divsi3+0x160>
    64fc:	018b      	lsls	r3, r1, #6
    64fe:	1ac0      	subs	r0, r0, r3
    6500:	4152      	adcs	r2, r2
    6502:	0943      	lsrs	r3, r0, #5
    6504:	428b      	cmp	r3, r1
    6506:	d301      	bcc.n	650c <__divsi3+0x16c>
    6508:	014b      	lsls	r3, r1, #5
    650a:	1ac0      	subs	r0, r0, r3
    650c:	4152      	adcs	r2, r2
    650e:	0903      	lsrs	r3, r0, #4
    6510:	428b      	cmp	r3, r1
    6512:	d301      	bcc.n	6518 <__divsi3+0x178>
    6514:	010b      	lsls	r3, r1, #4
    6516:	1ac0      	subs	r0, r0, r3
    6518:	4152      	adcs	r2, r2
    651a:	08c3      	lsrs	r3, r0, #3
    651c:	428b      	cmp	r3, r1
    651e:	d301      	bcc.n	6524 <__divsi3+0x184>
    6520:	00cb      	lsls	r3, r1, #3
    6522:	1ac0      	subs	r0, r0, r3
    6524:	4152      	adcs	r2, r2
    6526:	0883      	lsrs	r3, r0, #2
    6528:	428b      	cmp	r3, r1
    652a:	d301      	bcc.n	6530 <__divsi3+0x190>
    652c:	008b      	lsls	r3, r1, #2
    652e:	1ac0      	subs	r0, r0, r3
    6530:	4152      	adcs	r2, r2
    6532:	d2d9      	bcs.n	64e8 <__divsi3+0x148>
    6534:	0843      	lsrs	r3, r0, #1
    6536:	428b      	cmp	r3, r1
    6538:	d301      	bcc.n	653e <__divsi3+0x19e>
    653a:	004b      	lsls	r3, r1, #1
    653c:	1ac0      	subs	r0, r0, r3
    653e:	4152      	adcs	r2, r2
    6540:	1a41      	subs	r1, r0, r1
    6542:	d200      	bcs.n	6546 <__divsi3+0x1a6>
    6544:	4601      	mov	r1, r0
    6546:	4663      	mov	r3, ip
    6548:	4152      	adcs	r2, r2
    654a:	105b      	asrs	r3, r3, #1
    654c:	4610      	mov	r0, r2
    654e:	d301      	bcc.n	6554 <__divsi3+0x1b4>
    6550:	4240      	negs	r0, r0
    6552:	2b00      	cmp	r3, #0
    6554:	d500      	bpl.n	6558 <__divsi3+0x1b8>
    6556:	4249      	negs	r1, r1
    6558:	4770      	bx	lr
    655a:	4663      	mov	r3, ip
    655c:	105b      	asrs	r3, r3, #1
    655e:	d300      	bcc.n	6562 <__divsi3+0x1c2>
    6560:	4240      	negs	r0, r0
    6562:	b501      	push	{r0, lr}
    6564:	2000      	movs	r0, #0
    6566:	f000 f805 	bl	6574 <__aeabi_idiv0>
    656a:	bd02      	pop	{r1, pc}

0000656c <__aeabi_idivmod>:
    656c:	2900      	cmp	r1, #0
    656e:	d0f8      	beq.n	6562 <__divsi3+0x1c2>
    6570:	e716      	b.n	63a0 <__divsi3>
    6572:	4770      	bx	lr

00006574 <__aeabi_idiv0>:
    6574:	4770      	bx	lr
    6576:	46c0      	nop			; (mov r8, r8)

00006578 <__aeabi_cdrcmple>:
    6578:	4684      	mov	ip, r0
    657a:	1c10      	adds	r0, r2, #0
    657c:	4662      	mov	r2, ip
    657e:	468c      	mov	ip, r1
    6580:	1c19      	adds	r1, r3, #0
    6582:	4663      	mov	r3, ip
    6584:	e000      	b.n	6588 <__aeabi_cdcmpeq>
    6586:	46c0      	nop			; (mov r8, r8)

00006588 <__aeabi_cdcmpeq>:
    6588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    658a:	f001 f9f7 	bl	797c <__ledf2>
    658e:	2800      	cmp	r0, #0
    6590:	d401      	bmi.n	6596 <__aeabi_cdcmpeq+0xe>
    6592:	2100      	movs	r1, #0
    6594:	42c8      	cmn	r0, r1
    6596:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006598 <__aeabi_dcmpeq>:
    6598:	b510      	push	{r4, lr}
    659a:	f001 f951 	bl	7840 <__eqdf2>
    659e:	4240      	negs	r0, r0
    65a0:	3001      	adds	r0, #1
    65a2:	bd10      	pop	{r4, pc}

000065a4 <__aeabi_dcmplt>:
    65a4:	b510      	push	{r4, lr}
    65a6:	f001 f9e9 	bl	797c <__ledf2>
    65aa:	2800      	cmp	r0, #0
    65ac:	db01      	blt.n	65b2 <__aeabi_dcmplt+0xe>
    65ae:	2000      	movs	r0, #0
    65b0:	bd10      	pop	{r4, pc}
    65b2:	2001      	movs	r0, #1
    65b4:	bd10      	pop	{r4, pc}
    65b6:	46c0      	nop			; (mov r8, r8)

000065b8 <__aeabi_dcmple>:
    65b8:	b510      	push	{r4, lr}
    65ba:	f001 f9df 	bl	797c <__ledf2>
    65be:	2800      	cmp	r0, #0
    65c0:	dd01      	ble.n	65c6 <__aeabi_dcmple+0xe>
    65c2:	2000      	movs	r0, #0
    65c4:	bd10      	pop	{r4, pc}
    65c6:	2001      	movs	r0, #1
    65c8:	bd10      	pop	{r4, pc}
    65ca:	46c0      	nop			; (mov r8, r8)

000065cc <__aeabi_dcmpgt>:
    65cc:	b510      	push	{r4, lr}
    65ce:	f001 f971 	bl	78b4 <__gedf2>
    65d2:	2800      	cmp	r0, #0
    65d4:	dc01      	bgt.n	65da <__aeabi_dcmpgt+0xe>
    65d6:	2000      	movs	r0, #0
    65d8:	bd10      	pop	{r4, pc}
    65da:	2001      	movs	r0, #1
    65dc:	bd10      	pop	{r4, pc}
    65de:	46c0      	nop			; (mov r8, r8)

000065e0 <__aeabi_dcmpge>:
    65e0:	b510      	push	{r4, lr}
    65e2:	f001 f967 	bl	78b4 <__gedf2>
    65e6:	2800      	cmp	r0, #0
    65e8:	da01      	bge.n	65ee <__aeabi_dcmpge+0xe>
    65ea:	2000      	movs	r0, #0
    65ec:	bd10      	pop	{r4, pc}
    65ee:	2001      	movs	r0, #1
    65f0:	bd10      	pop	{r4, pc}
    65f2:	46c0      	nop			; (mov r8, r8)

000065f4 <__aeabi_lmul>:
    65f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    65f6:	46ce      	mov	lr, r9
    65f8:	4647      	mov	r7, r8
    65fa:	0415      	lsls	r5, r2, #16
    65fc:	0c2d      	lsrs	r5, r5, #16
    65fe:	002e      	movs	r6, r5
    6600:	b580      	push	{r7, lr}
    6602:	0407      	lsls	r7, r0, #16
    6604:	0c14      	lsrs	r4, r2, #16
    6606:	0c3f      	lsrs	r7, r7, #16
    6608:	4699      	mov	r9, r3
    660a:	0c03      	lsrs	r3, r0, #16
    660c:	437e      	muls	r6, r7
    660e:	435d      	muls	r5, r3
    6610:	4367      	muls	r7, r4
    6612:	4363      	muls	r3, r4
    6614:	197f      	adds	r7, r7, r5
    6616:	0c34      	lsrs	r4, r6, #16
    6618:	19e4      	adds	r4, r4, r7
    661a:	469c      	mov	ip, r3
    661c:	42a5      	cmp	r5, r4
    661e:	d903      	bls.n	6628 <__aeabi_lmul+0x34>
    6620:	2380      	movs	r3, #128	; 0x80
    6622:	025b      	lsls	r3, r3, #9
    6624:	4698      	mov	r8, r3
    6626:	44c4      	add	ip, r8
    6628:	464b      	mov	r3, r9
    662a:	4351      	muls	r1, r2
    662c:	4343      	muls	r3, r0
    662e:	0436      	lsls	r6, r6, #16
    6630:	0c36      	lsrs	r6, r6, #16
    6632:	0c25      	lsrs	r5, r4, #16
    6634:	0424      	lsls	r4, r4, #16
    6636:	4465      	add	r5, ip
    6638:	19a4      	adds	r4, r4, r6
    663a:	1859      	adds	r1, r3, r1
    663c:	1949      	adds	r1, r1, r5
    663e:	0020      	movs	r0, r4
    6640:	bc0c      	pop	{r2, r3}
    6642:	4690      	mov	r8, r2
    6644:	4699      	mov	r9, r3
    6646:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006648 <__aeabi_fdiv>:
    6648:	b5f0      	push	{r4, r5, r6, r7, lr}
    664a:	4657      	mov	r7, sl
    664c:	464e      	mov	r6, r9
    664e:	46de      	mov	lr, fp
    6650:	4645      	mov	r5, r8
    6652:	b5e0      	push	{r5, r6, r7, lr}
    6654:	0244      	lsls	r4, r0, #9
    6656:	0043      	lsls	r3, r0, #1
    6658:	0fc6      	lsrs	r6, r0, #31
    665a:	b083      	sub	sp, #12
    665c:	1c0f      	adds	r7, r1, #0
    665e:	0a64      	lsrs	r4, r4, #9
    6660:	0e1b      	lsrs	r3, r3, #24
    6662:	46b2      	mov	sl, r6
    6664:	d053      	beq.n	670e <__aeabi_fdiv+0xc6>
    6666:	2bff      	cmp	r3, #255	; 0xff
    6668:	d027      	beq.n	66ba <__aeabi_fdiv+0x72>
    666a:	2280      	movs	r2, #128	; 0x80
    666c:	00e4      	lsls	r4, r4, #3
    666e:	04d2      	lsls	r2, r2, #19
    6670:	4314      	orrs	r4, r2
    6672:	227f      	movs	r2, #127	; 0x7f
    6674:	4252      	negs	r2, r2
    6676:	4690      	mov	r8, r2
    6678:	4498      	add	r8, r3
    667a:	2300      	movs	r3, #0
    667c:	4699      	mov	r9, r3
    667e:	469b      	mov	fp, r3
    6680:	027d      	lsls	r5, r7, #9
    6682:	0078      	lsls	r0, r7, #1
    6684:	0ffb      	lsrs	r3, r7, #31
    6686:	0a6d      	lsrs	r5, r5, #9
    6688:	0e00      	lsrs	r0, r0, #24
    668a:	9300      	str	r3, [sp, #0]
    668c:	d024      	beq.n	66d8 <__aeabi_fdiv+0x90>
    668e:	28ff      	cmp	r0, #255	; 0xff
    6690:	d046      	beq.n	6720 <__aeabi_fdiv+0xd8>
    6692:	2380      	movs	r3, #128	; 0x80
    6694:	2100      	movs	r1, #0
    6696:	00ed      	lsls	r5, r5, #3
    6698:	04db      	lsls	r3, r3, #19
    669a:	431d      	orrs	r5, r3
    669c:	387f      	subs	r0, #127	; 0x7f
    669e:	4647      	mov	r7, r8
    66a0:	1a38      	subs	r0, r7, r0
    66a2:	464f      	mov	r7, r9
    66a4:	430f      	orrs	r7, r1
    66a6:	00bf      	lsls	r7, r7, #2
    66a8:	46b9      	mov	r9, r7
    66aa:	0033      	movs	r3, r6
    66ac:	9a00      	ldr	r2, [sp, #0]
    66ae:	4f87      	ldr	r7, [pc, #540]	; (68cc <__aeabi_fdiv+0x284>)
    66b0:	4053      	eors	r3, r2
    66b2:	464a      	mov	r2, r9
    66b4:	58ba      	ldr	r2, [r7, r2]
    66b6:	9301      	str	r3, [sp, #4]
    66b8:	4697      	mov	pc, r2
    66ba:	2c00      	cmp	r4, #0
    66bc:	d14e      	bne.n	675c <__aeabi_fdiv+0x114>
    66be:	2308      	movs	r3, #8
    66c0:	4699      	mov	r9, r3
    66c2:	33f7      	adds	r3, #247	; 0xf7
    66c4:	4698      	mov	r8, r3
    66c6:	3bfd      	subs	r3, #253	; 0xfd
    66c8:	469b      	mov	fp, r3
    66ca:	027d      	lsls	r5, r7, #9
    66cc:	0078      	lsls	r0, r7, #1
    66ce:	0ffb      	lsrs	r3, r7, #31
    66d0:	0a6d      	lsrs	r5, r5, #9
    66d2:	0e00      	lsrs	r0, r0, #24
    66d4:	9300      	str	r3, [sp, #0]
    66d6:	d1da      	bne.n	668e <__aeabi_fdiv+0x46>
    66d8:	2d00      	cmp	r5, #0
    66da:	d126      	bne.n	672a <__aeabi_fdiv+0xe2>
    66dc:	2000      	movs	r0, #0
    66de:	2101      	movs	r1, #1
    66e0:	0033      	movs	r3, r6
    66e2:	9a00      	ldr	r2, [sp, #0]
    66e4:	4f7a      	ldr	r7, [pc, #488]	; (68d0 <__aeabi_fdiv+0x288>)
    66e6:	4053      	eors	r3, r2
    66e8:	4642      	mov	r2, r8
    66ea:	1a10      	subs	r0, r2, r0
    66ec:	464a      	mov	r2, r9
    66ee:	430a      	orrs	r2, r1
    66f0:	0092      	lsls	r2, r2, #2
    66f2:	58ba      	ldr	r2, [r7, r2]
    66f4:	001d      	movs	r5, r3
    66f6:	4697      	mov	pc, r2
    66f8:	9b00      	ldr	r3, [sp, #0]
    66fa:	002c      	movs	r4, r5
    66fc:	469a      	mov	sl, r3
    66fe:	468b      	mov	fp, r1
    6700:	465b      	mov	r3, fp
    6702:	2b02      	cmp	r3, #2
    6704:	d131      	bne.n	676a <__aeabi_fdiv+0x122>
    6706:	4653      	mov	r3, sl
    6708:	21ff      	movs	r1, #255	; 0xff
    670a:	2400      	movs	r4, #0
    670c:	e038      	b.n	6780 <__aeabi_fdiv+0x138>
    670e:	2c00      	cmp	r4, #0
    6710:	d117      	bne.n	6742 <__aeabi_fdiv+0xfa>
    6712:	2304      	movs	r3, #4
    6714:	4699      	mov	r9, r3
    6716:	2300      	movs	r3, #0
    6718:	4698      	mov	r8, r3
    671a:	3301      	adds	r3, #1
    671c:	469b      	mov	fp, r3
    671e:	e7af      	b.n	6680 <__aeabi_fdiv+0x38>
    6720:	20ff      	movs	r0, #255	; 0xff
    6722:	2d00      	cmp	r5, #0
    6724:	d10b      	bne.n	673e <__aeabi_fdiv+0xf6>
    6726:	2102      	movs	r1, #2
    6728:	e7da      	b.n	66e0 <__aeabi_fdiv+0x98>
    672a:	0028      	movs	r0, r5
    672c:	f002 f8c8 	bl	88c0 <__clzsi2>
    6730:	1f43      	subs	r3, r0, #5
    6732:	409d      	lsls	r5, r3
    6734:	2376      	movs	r3, #118	; 0x76
    6736:	425b      	negs	r3, r3
    6738:	1a18      	subs	r0, r3, r0
    673a:	2100      	movs	r1, #0
    673c:	e7af      	b.n	669e <__aeabi_fdiv+0x56>
    673e:	2103      	movs	r1, #3
    6740:	e7ad      	b.n	669e <__aeabi_fdiv+0x56>
    6742:	0020      	movs	r0, r4
    6744:	f002 f8bc 	bl	88c0 <__clzsi2>
    6748:	1f43      	subs	r3, r0, #5
    674a:	409c      	lsls	r4, r3
    674c:	2376      	movs	r3, #118	; 0x76
    674e:	425b      	negs	r3, r3
    6750:	1a1b      	subs	r3, r3, r0
    6752:	4698      	mov	r8, r3
    6754:	2300      	movs	r3, #0
    6756:	4699      	mov	r9, r3
    6758:	469b      	mov	fp, r3
    675a:	e791      	b.n	6680 <__aeabi_fdiv+0x38>
    675c:	230c      	movs	r3, #12
    675e:	4699      	mov	r9, r3
    6760:	33f3      	adds	r3, #243	; 0xf3
    6762:	4698      	mov	r8, r3
    6764:	3bfc      	subs	r3, #252	; 0xfc
    6766:	469b      	mov	fp, r3
    6768:	e78a      	b.n	6680 <__aeabi_fdiv+0x38>
    676a:	2b03      	cmp	r3, #3
    676c:	d100      	bne.n	6770 <__aeabi_fdiv+0x128>
    676e:	e0a5      	b.n	68bc <__aeabi_fdiv+0x274>
    6770:	4655      	mov	r5, sl
    6772:	2b01      	cmp	r3, #1
    6774:	d000      	beq.n	6778 <__aeabi_fdiv+0x130>
    6776:	e081      	b.n	687c <__aeabi_fdiv+0x234>
    6778:	2301      	movs	r3, #1
    677a:	2100      	movs	r1, #0
    677c:	2400      	movs	r4, #0
    677e:	402b      	ands	r3, r5
    6780:	0264      	lsls	r4, r4, #9
    6782:	05c9      	lsls	r1, r1, #23
    6784:	0a60      	lsrs	r0, r4, #9
    6786:	07db      	lsls	r3, r3, #31
    6788:	4308      	orrs	r0, r1
    678a:	4318      	orrs	r0, r3
    678c:	b003      	add	sp, #12
    678e:	bc3c      	pop	{r2, r3, r4, r5}
    6790:	4690      	mov	r8, r2
    6792:	4699      	mov	r9, r3
    6794:	46a2      	mov	sl, r4
    6796:	46ab      	mov	fp, r5
    6798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    679a:	2480      	movs	r4, #128	; 0x80
    679c:	2300      	movs	r3, #0
    679e:	03e4      	lsls	r4, r4, #15
    67a0:	21ff      	movs	r1, #255	; 0xff
    67a2:	e7ed      	b.n	6780 <__aeabi_fdiv+0x138>
    67a4:	21ff      	movs	r1, #255	; 0xff
    67a6:	2400      	movs	r4, #0
    67a8:	e7ea      	b.n	6780 <__aeabi_fdiv+0x138>
    67aa:	2301      	movs	r3, #1
    67ac:	1a59      	subs	r1, r3, r1
    67ae:	291b      	cmp	r1, #27
    67b0:	dd66      	ble.n	6880 <__aeabi_fdiv+0x238>
    67b2:	9a01      	ldr	r2, [sp, #4]
    67b4:	4013      	ands	r3, r2
    67b6:	2100      	movs	r1, #0
    67b8:	2400      	movs	r4, #0
    67ba:	e7e1      	b.n	6780 <__aeabi_fdiv+0x138>
    67bc:	2380      	movs	r3, #128	; 0x80
    67be:	03db      	lsls	r3, r3, #15
    67c0:	421c      	tst	r4, r3
    67c2:	d038      	beq.n	6836 <__aeabi_fdiv+0x1ee>
    67c4:	421d      	tst	r5, r3
    67c6:	d051      	beq.n	686c <__aeabi_fdiv+0x224>
    67c8:	431c      	orrs	r4, r3
    67ca:	0264      	lsls	r4, r4, #9
    67cc:	0a64      	lsrs	r4, r4, #9
    67ce:	0033      	movs	r3, r6
    67d0:	21ff      	movs	r1, #255	; 0xff
    67d2:	e7d5      	b.n	6780 <__aeabi_fdiv+0x138>
    67d4:	0163      	lsls	r3, r4, #5
    67d6:	016c      	lsls	r4, r5, #5
    67d8:	42a3      	cmp	r3, r4
    67da:	d23b      	bcs.n	6854 <__aeabi_fdiv+0x20c>
    67dc:	261b      	movs	r6, #27
    67de:	2100      	movs	r1, #0
    67e0:	3801      	subs	r0, #1
    67e2:	2501      	movs	r5, #1
    67e4:	001f      	movs	r7, r3
    67e6:	0049      	lsls	r1, r1, #1
    67e8:	005b      	lsls	r3, r3, #1
    67ea:	2f00      	cmp	r7, #0
    67ec:	db01      	blt.n	67f2 <__aeabi_fdiv+0x1aa>
    67ee:	429c      	cmp	r4, r3
    67f0:	d801      	bhi.n	67f6 <__aeabi_fdiv+0x1ae>
    67f2:	1b1b      	subs	r3, r3, r4
    67f4:	4329      	orrs	r1, r5
    67f6:	3e01      	subs	r6, #1
    67f8:	2e00      	cmp	r6, #0
    67fa:	d1f3      	bne.n	67e4 <__aeabi_fdiv+0x19c>
    67fc:	001c      	movs	r4, r3
    67fe:	1e63      	subs	r3, r4, #1
    6800:	419c      	sbcs	r4, r3
    6802:	430c      	orrs	r4, r1
    6804:	0001      	movs	r1, r0
    6806:	317f      	adds	r1, #127	; 0x7f
    6808:	2900      	cmp	r1, #0
    680a:	ddce      	ble.n	67aa <__aeabi_fdiv+0x162>
    680c:	0763      	lsls	r3, r4, #29
    680e:	d004      	beq.n	681a <__aeabi_fdiv+0x1d2>
    6810:	230f      	movs	r3, #15
    6812:	4023      	ands	r3, r4
    6814:	2b04      	cmp	r3, #4
    6816:	d000      	beq.n	681a <__aeabi_fdiv+0x1d2>
    6818:	3404      	adds	r4, #4
    681a:	0123      	lsls	r3, r4, #4
    681c:	d503      	bpl.n	6826 <__aeabi_fdiv+0x1de>
    681e:	0001      	movs	r1, r0
    6820:	4b2c      	ldr	r3, [pc, #176]	; (68d4 <__aeabi_fdiv+0x28c>)
    6822:	3180      	adds	r1, #128	; 0x80
    6824:	401c      	ands	r4, r3
    6826:	29fe      	cmp	r1, #254	; 0xfe
    6828:	dd0d      	ble.n	6846 <__aeabi_fdiv+0x1fe>
    682a:	2301      	movs	r3, #1
    682c:	9a01      	ldr	r2, [sp, #4]
    682e:	21ff      	movs	r1, #255	; 0xff
    6830:	4013      	ands	r3, r2
    6832:	2400      	movs	r4, #0
    6834:	e7a4      	b.n	6780 <__aeabi_fdiv+0x138>
    6836:	2380      	movs	r3, #128	; 0x80
    6838:	03db      	lsls	r3, r3, #15
    683a:	431c      	orrs	r4, r3
    683c:	0264      	lsls	r4, r4, #9
    683e:	0a64      	lsrs	r4, r4, #9
    6840:	0033      	movs	r3, r6
    6842:	21ff      	movs	r1, #255	; 0xff
    6844:	e79c      	b.n	6780 <__aeabi_fdiv+0x138>
    6846:	2301      	movs	r3, #1
    6848:	9a01      	ldr	r2, [sp, #4]
    684a:	01a4      	lsls	r4, r4, #6
    684c:	0a64      	lsrs	r4, r4, #9
    684e:	b2c9      	uxtb	r1, r1
    6850:	4013      	ands	r3, r2
    6852:	e795      	b.n	6780 <__aeabi_fdiv+0x138>
    6854:	1b1b      	subs	r3, r3, r4
    6856:	261a      	movs	r6, #26
    6858:	2101      	movs	r1, #1
    685a:	e7c2      	b.n	67e2 <__aeabi_fdiv+0x19a>
    685c:	9b00      	ldr	r3, [sp, #0]
    685e:	468b      	mov	fp, r1
    6860:	469a      	mov	sl, r3
    6862:	2400      	movs	r4, #0
    6864:	e74c      	b.n	6700 <__aeabi_fdiv+0xb8>
    6866:	0263      	lsls	r3, r4, #9
    6868:	d5e5      	bpl.n	6836 <__aeabi_fdiv+0x1ee>
    686a:	2500      	movs	r5, #0
    686c:	2480      	movs	r4, #128	; 0x80
    686e:	03e4      	lsls	r4, r4, #15
    6870:	432c      	orrs	r4, r5
    6872:	0264      	lsls	r4, r4, #9
    6874:	0a64      	lsrs	r4, r4, #9
    6876:	9b00      	ldr	r3, [sp, #0]
    6878:	21ff      	movs	r1, #255	; 0xff
    687a:	e781      	b.n	6780 <__aeabi_fdiv+0x138>
    687c:	9501      	str	r5, [sp, #4]
    687e:	e7c1      	b.n	6804 <__aeabi_fdiv+0x1bc>
    6880:	0023      	movs	r3, r4
    6882:	2020      	movs	r0, #32
    6884:	40cb      	lsrs	r3, r1
    6886:	1a41      	subs	r1, r0, r1
    6888:	408c      	lsls	r4, r1
    688a:	1e61      	subs	r1, r4, #1
    688c:	418c      	sbcs	r4, r1
    688e:	431c      	orrs	r4, r3
    6890:	0763      	lsls	r3, r4, #29
    6892:	d004      	beq.n	689e <__aeabi_fdiv+0x256>
    6894:	230f      	movs	r3, #15
    6896:	4023      	ands	r3, r4
    6898:	2b04      	cmp	r3, #4
    689a:	d000      	beq.n	689e <__aeabi_fdiv+0x256>
    689c:	3404      	adds	r4, #4
    689e:	0163      	lsls	r3, r4, #5
    68a0:	d505      	bpl.n	68ae <__aeabi_fdiv+0x266>
    68a2:	2301      	movs	r3, #1
    68a4:	9a01      	ldr	r2, [sp, #4]
    68a6:	2101      	movs	r1, #1
    68a8:	4013      	ands	r3, r2
    68aa:	2400      	movs	r4, #0
    68ac:	e768      	b.n	6780 <__aeabi_fdiv+0x138>
    68ae:	2301      	movs	r3, #1
    68b0:	9a01      	ldr	r2, [sp, #4]
    68b2:	01a4      	lsls	r4, r4, #6
    68b4:	0a64      	lsrs	r4, r4, #9
    68b6:	4013      	ands	r3, r2
    68b8:	2100      	movs	r1, #0
    68ba:	e761      	b.n	6780 <__aeabi_fdiv+0x138>
    68bc:	2380      	movs	r3, #128	; 0x80
    68be:	03db      	lsls	r3, r3, #15
    68c0:	431c      	orrs	r4, r3
    68c2:	0264      	lsls	r4, r4, #9
    68c4:	0a64      	lsrs	r4, r4, #9
    68c6:	4653      	mov	r3, sl
    68c8:	21ff      	movs	r1, #255	; 0xff
    68ca:	e759      	b.n	6780 <__aeabi_fdiv+0x138>
    68cc:	000096c0 	.word	0x000096c0
    68d0:	00009700 	.word	0x00009700
    68d4:	f7ffffff 	.word	0xf7ffffff

000068d8 <__aeabi_fmul>:
    68d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68da:	4657      	mov	r7, sl
    68dc:	464e      	mov	r6, r9
    68de:	4645      	mov	r5, r8
    68e0:	46de      	mov	lr, fp
    68e2:	b5e0      	push	{r5, r6, r7, lr}
    68e4:	0247      	lsls	r7, r0, #9
    68e6:	0046      	lsls	r6, r0, #1
    68e8:	4688      	mov	r8, r1
    68ea:	0a7f      	lsrs	r7, r7, #9
    68ec:	0e36      	lsrs	r6, r6, #24
    68ee:	0fc4      	lsrs	r4, r0, #31
    68f0:	2e00      	cmp	r6, #0
    68f2:	d047      	beq.n	6984 <__aeabi_fmul+0xac>
    68f4:	2eff      	cmp	r6, #255	; 0xff
    68f6:	d024      	beq.n	6942 <__aeabi_fmul+0x6a>
    68f8:	00fb      	lsls	r3, r7, #3
    68fa:	2780      	movs	r7, #128	; 0x80
    68fc:	04ff      	lsls	r7, r7, #19
    68fe:	431f      	orrs	r7, r3
    6900:	2300      	movs	r3, #0
    6902:	4699      	mov	r9, r3
    6904:	469a      	mov	sl, r3
    6906:	3e7f      	subs	r6, #127	; 0x7f
    6908:	4643      	mov	r3, r8
    690a:	025d      	lsls	r5, r3, #9
    690c:	0058      	lsls	r0, r3, #1
    690e:	0fdb      	lsrs	r3, r3, #31
    6910:	0a6d      	lsrs	r5, r5, #9
    6912:	0e00      	lsrs	r0, r0, #24
    6914:	4698      	mov	r8, r3
    6916:	d043      	beq.n	69a0 <__aeabi_fmul+0xc8>
    6918:	28ff      	cmp	r0, #255	; 0xff
    691a:	d03b      	beq.n	6994 <__aeabi_fmul+0xbc>
    691c:	00eb      	lsls	r3, r5, #3
    691e:	2580      	movs	r5, #128	; 0x80
    6920:	2200      	movs	r2, #0
    6922:	04ed      	lsls	r5, r5, #19
    6924:	431d      	orrs	r5, r3
    6926:	387f      	subs	r0, #127	; 0x7f
    6928:	1836      	adds	r6, r6, r0
    692a:	1c73      	adds	r3, r6, #1
    692c:	4641      	mov	r1, r8
    692e:	469b      	mov	fp, r3
    6930:	464b      	mov	r3, r9
    6932:	4061      	eors	r1, r4
    6934:	4313      	orrs	r3, r2
    6936:	2b0f      	cmp	r3, #15
    6938:	d864      	bhi.n	6a04 <__aeabi_fmul+0x12c>
    693a:	4875      	ldr	r0, [pc, #468]	; (6b10 <__aeabi_fmul+0x238>)
    693c:	009b      	lsls	r3, r3, #2
    693e:	58c3      	ldr	r3, [r0, r3]
    6940:	469f      	mov	pc, r3
    6942:	2f00      	cmp	r7, #0
    6944:	d142      	bne.n	69cc <__aeabi_fmul+0xf4>
    6946:	2308      	movs	r3, #8
    6948:	4699      	mov	r9, r3
    694a:	3b06      	subs	r3, #6
    694c:	26ff      	movs	r6, #255	; 0xff
    694e:	469a      	mov	sl, r3
    6950:	e7da      	b.n	6908 <__aeabi_fmul+0x30>
    6952:	4641      	mov	r1, r8
    6954:	2a02      	cmp	r2, #2
    6956:	d028      	beq.n	69aa <__aeabi_fmul+0xd2>
    6958:	2a03      	cmp	r2, #3
    695a:	d100      	bne.n	695e <__aeabi_fmul+0x86>
    695c:	e0ce      	b.n	6afc <__aeabi_fmul+0x224>
    695e:	2a01      	cmp	r2, #1
    6960:	d000      	beq.n	6964 <__aeabi_fmul+0x8c>
    6962:	e0ac      	b.n	6abe <__aeabi_fmul+0x1e6>
    6964:	4011      	ands	r1, r2
    6966:	2000      	movs	r0, #0
    6968:	2200      	movs	r2, #0
    696a:	b2cc      	uxtb	r4, r1
    696c:	0240      	lsls	r0, r0, #9
    696e:	05d2      	lsls	r2, r2, #23
    6970:	0a40      	lsrs	r0, r0, #9
    6972:	07e4      	lsls	r4, r4, #31
    6974:	4310      	orrs	r0, r2
    6976:	4320      	orrs	r0, r4
    6978:	bc3c      	pop	{r2, r3, r4, r5}
    697a:	4690      	mov	r8, r2
    697c:	4699      	mov	r9, r3
    697e:	46a2      	mov	sl, r4
    6980:	46ab      	mov	fp, r5
    6982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6984:	2f00      	cmp	r7, #0
    6986:	d115      	bne.n	69b4 <__aeabi_fmul+0xdc>
    6988:	2304      	movs	r3, #4
    698a:	4699      	mov	r9, r3
    698c:	3b03      	subs	r3, #3
    698e:	2600      	movs	r6, #0
    6990:	469a      	mov	sl, r3
    6992:	e7b9      	b.n	6908 <__aeabi_fmul+0x30>
    6994:	20ff      	movs	r0, #255	; 0xff
    6996:	2202      	movs	r2, #2
    6998:	2d00      	cmp	r5, #0
    699a:	d0c5      	beq.n	6928 <__aeabi_fmul+0x50>
    699c:	2203      	movs	r2, #3
    699e:	e7c3      	b.n	6928 <__aeabi_fmul+0x50>
    69a0:	2d00      	cmp	r5, #0
    69a2:	d119      	bne.n	69d8 <__aeabi_fmul+0x100>
    69a4:	2000      	movs	r0, #0
    69a6:	2201      	movs	r2, #1
    69a8:	e7be      	b.n	6928 <__aeabi_fmul+0x50>
    69aa:	2401      	movs	r4, #1
    69ac:	22ff      	movs	r2, #255	; 0xff
    69ae:	400c      	ands	r4, r1
    69b0:	2000      	movs	r0, #0
    69b2:	e7db      	b.n	696c <__aeabi_fmul+0x94>
    69b4:	0038      	movs	r0, r7
    69b6:	f001 ff83 	bl	88c0 <__clzsi2>
    69ba:	2676      	movs	r6, #118	; 0x76
    69bc:	1f43      	subs	r3, r0, #5
    69be:	409f      	lsls	r7, r3
    69c0:	2300      	movs	r3, #0
    69c2:	4276      	negs	r6, r6
    69c4:	1a36      	subs	r6, r6, r0
    69c6:	4699      	mov	r9, r3
    69c8:	469a      	mov	sl, r3
    69ca:	e79d      	b.n	6908 <__aeabi_fmul+0x30>
    69cc:	230c      	movs	r3, #12
    69ce:	4699      	mov	r9, r3
    69d0:	3b09      	subs	r3, #9
    69d2:	26ff      	movs	r6, #255	; 0xff
    69d4:	469a      	mov	sl, r3
    69d6:	e797      	b.n	6908 <__aeabi_fmul+0x30>
    69d8:	0028      	movs	r0, r5
    69da:	f001 ff71 	bl	88c0 <__clzsi2>
    69de:	1f43      	subs	r3, r0, #5
    69e0:	409d      	lsls	r5, r3
    69e2:	2376      	movs	r3, #118	; 0x76
    69e4:	425b      	negs	r3, r3
    69e6:	1a18      	subs	r0, r3, r0
    69e8:	2200      	movs	r2, #0
    69ea:	e79d      	b.n	6928 <__aeabi_fmul+0x50>
    69ec:	2080      	movs	r0, #128	; 0x80
    69ee:	2400      	movs	r4, #0
    69f0:	03c0      	lsls	r0, r0, #15
    69f2:	22ff      	movs	r2, #255	; 0xff
    69f4:	e7ba      	b.n	696c <__aeabi_fmul+0x94>
    69f6:	003d      	movs	r5, r7
    69f8:	4652      	mov	r2, sl
    69fa:	e7ab      	b.n	6954 <__aeabi_fmul+0x7c>
    69fc:	003d      	movs	r5, r7
    69fe:	0021      	movs	r1, r4
    6a00:	4652      	mov	r2, sl
    6a02:	e7a7      	b.n	6954 <__aeabi_fmul+0x7c>
    6a04:	0c3b      	lsrs	r3, r7, #16
    6a06:	469c      	mov	ip, r3
    6a08:	042a      	lsls	r2, r5, #16
    6a0a:	0c12      	lsrs	r2, r2, #16
    6a0c:	0c2b      	lsrs	r3, r5, #16
    6a0e:	0014      	movs	r4, r2
    6a10:	4660      	mov	r0, ip
    6a12:	4665      	mov	r5, ip
    6a14:	043f      	lsls	r7, r7, #16
    6a16:	0c3f      	lsrs	r7, r7, #16
    6a18:	437c      	muls	r4, r7
    6a1a:	4342      	muls	r2, r0
    6a1c:	435d      	muls	r5, r3
    6a1e:	437b      	muls	r3, r7
    6a20:	0c27      	lsrs	r7, r4, #16
    6a22:	189b      	adds	r3, r3, r2
    6a24:	18ff      	adds	r7, r7, r3
    6a26:	42ba      	cmp	r2, r7
    6a28:	d903      	bls.n	6a32 <__aeabi_fmul+0x15a>
    6a2a:	2380      	movs	r3, #128	; 0x80
    6a2c:	025b      	lsls	r3, r3, #9
    6a2e:	469c      	mov	ip, r3
    6a30:	4465      	add	r5, ip
    6a32:	0424      	lsls	r4, r4, #16
    6a34:	043a      	lsls	r2, r7, #16
    6a36:	0c24      	lsrs	r4, r4, #16
    6a38:	1912      	adds	r2, r2, r4
    6a3a:	0193      	lsls	r3, r2, #6
    6a3c:	1e5c      	subs	r4, r3, #1
    6a3e:	41a3      	sbcs	r3, r4
    6a40:	0c3f      	lsrs	r7, r7, #16
    6a42:	0e92      	lsrs	r2, r2, #26
    6a44:	197d      	adds	r5, r7, r5
    6a46:	431a      	orrs	r2, r3
    6a48:	01ad      	lsls	r5, r5, #6
    6a4a:	4315      	orrs	r5, r2
    6a4c:	012b      	lsls	r3, r5, #4
    6a4e:	d504      	bpl.n	6a5a <__aeabi_fmul+0x182>
    6a50:	2301      	movs	r3, #1
    6a52:	465e      	mov	r6, fp
    6a54:	086a      	lsrs	r2, r5, #1
    6a56:	401d      	ands	r5, r3
    6a58:	4315      	orrs	r5, r2
    6a5a:	0032      	movs	r2, r6
    6a5c:	327f      	adds	r2, #127	; 0x7f
    6a5e:	2a00      	cmp	r2, #0
    6a60:	dd25      	ble.n	6aae <__aeabi_fmul+0x1d6>
    6a62:	076b      	lsls	r3, r5, #29
    6a64:	d004      	beq.n	6a70 <__aeabi_fmul+0x198>
    6a66:	230f      	movs	r3, #15
    6a68:	402b      	ands	r3, r5
    6a6a:	2b04      	cmp	r3, #4
    6a6c:	d000      	beq.n	6a70 <__aeabi_fmul+0x198>
    6a6e:	3504      	adds	r5, #4
    6a70:	012b      	lsls	r3, r5, #4
    6a72:	d503      	bpl.n	6a7c <__aeabi_fmul+0x1a4>
    6a74:	0032      	movs	r2, r6
    6a76:	4b27      	ldr	r3, [pc, #156]	; (6b14 <__aeabi_fmul+0x23c>)
    6a78:	3280      	adds	r2, #128	; 0x80
    6a7a:	401d      	ands	r5, r3
    6a7c:	2afe      	cmp	r2, #254	; 0xfe
    6a7e:	dc94      	bgt.n	69aa <__aeabi_fmul+0xd2>
    6a80:	2401      	movs	r4, #1
    6a82:	01a8      	lsls	r0, r5, #6
    6a84:	0a40      	lsrs	r0, r0, #9
    6a86:	b2d2      	uxtb	r2, r2
    6a88:	400c      	ands	r4, r1
    6a8a:	e76f      	b.n	696c <__aeabi_fmul+0x94>
    6a8c:	2080      	movs	r0, #128	; 0x80
    6a8e:	03c0      	lsls	r0, r0, #15
    6a90:	4207      	tst	r7, r0
    6a92:	d007      	beq.n	6aa4 <__aeabi_fmul+0x1cc>
    6a94:	4205      	tst	r5, r0
    6a96:	d105      	bne.n	6aa4 <__aeabi_fmul+0x1cc>
    6a98:	4328      	orrs	r0, r5
    6a9a:	0240      	lsls	r0, r0, #9
    6a9c:	0a40      	lsrs	r0, r0, #9
    6a9e:	4644      	mov	r4, r8
    6aa0:	22ff      	movs	r2, #255	; 0xff
    6aa2:	e763      	b.n	696c <__aeabi_fmul+0x94>
    6aa4:	4338      	orrs	r0, r7
    6aa6:	0240      	lsls	r0, r0, #9
    6aa8:	0a40      	lsrs	r0, r0, #9
    6aaa:	22ff      	movs	r2, #255	; 0xff
    6aac:	e75e      	b.n	696c <__aeabi_fmul+0x94>
    6aae:	2401      	movs	r4, #1
    6ab0:	1aa3      	subs	r3, r4, r2
    6ab2:	2b1b      	cmp	r3, #27
    6ab4:	dd05      	ble.n	6ac2 <__aeabi_fmul+0x1ea>
    6ab6:	400c      	ands	r4, r1
    6ab8:	2200      	movs	r2, #0
    6aba:	2000      	movs	r0, #0
    6abc:	e756      	b.n	696c <__aeabi_fmul+0x94>
    6abe:	465e      	mov	r6, fp
    6ac0:	e7cb      	b.n	6a5a <__aeabi_fmul+0x182>
    6ac2:	002a      	movs	r2, r5
    6ac4:	2020      	movs	r0, #32
    6ac6:	40da      	lsrs	r2, r3
    6ac8:	1ac3      	subs	r3, r0, r3
    6aca:	409d      	lsls	r5, r3
    6acc:	002b      	movs	r3, r5
    6ace:	1e5d      	subs	r5, r3, #1
    6ad0:	41ab      	sbcs	r3, r5
    6ad2:	4313      	orrs	r3, r2
    6ad4:	075a      	lsls	r2, r3, #29
    6ad6:	d004      	beq.n	6ae2 <__aeabi_fmul+0x20a>
    6ad8:	220f      	movs	r2, #15
    6ada:	401a      	ands	r2, r3
    6adc:	2a04      	cmp	r2, #4
    6ade:	d000      	beq.n	6ae2 <__aeabi_fmul+0x20a>
    6ae0:	3304      	adds	r3, #4
    6ae2:	015a      	lsls	r2, r3, #5
    6ae4:	d504      	bpl.n	6af0 <__aeabi_fmul+0x218>
    6ae6:	2401      	movs	r4, #1
    6ae8:	2201      	movs	r2, #1
    6aea:	400c      	ands	r4, r1
    6aec:	2000      	movs	r0, #0
    6aee:	e73d      	b.n	696c <__aeabi_fmul+0x94>
    6af0:	2401      	movs	r4, #1
    6af2:	019b      	lsls	r3, r3, #6
    6af4:	0a58      	lsrs	r0, r3, #9
    6af6:	400c      	ands	r4, r1
    6af8:	2200      	movs	r2, #0
    6afa:	e737      	b.n	696c <__aeabi_fmul+0x94>
    6afc:	2080      	movs	r0, #128	; 0x80
    6afe:	2401      	movs	r4, #1
    6b00:	03c0      	lsls	r0, r0, #15
    6b02:	4328      	orrs	r0, r5
    6b04:	0240      	lsls	r0, r0, #9
    6b06:	0a40      	lsrs	r0, r0, #9
    6b08:	400c      	ands	r4, r1
    6b0a:	22ff      	movs	r2, #255	; 0xff
    6b0c:	e72e      	b.n	696c <__aeabi_fmul+0x94>
    6b0e:	46c0      	nop			; (mov r8, r8)
    6b10:	00009740 	.word	0x00009740
    6b14:	f7ffffff 	.word	0xf7ffffff

00006b18 <__aeabi_i2f>:
    6b18:	b570      	push	{r4, r5, r6, lr}
    6b1a:	2800      	cmp	r0, #0
    6b1c:	d030      	beq.n	6b80 <__aeabi_i2f+0x68>
    6b1e:	17c3      	asrs	r3, r0, #31
    6b20:	18c4      	adds	r4, r0, r3
    6b22:	405c      	eors	r4, r3
    6b24:	0fc5      	lsrs	r5, r0, #31
    6b26:	0020      	movs	r0, r4
    6b28:	f001 feca 	bl	88c0 <__clzsi2>
    6b2c:	239e      	movs	r3, #158	; 0x9e
    6b2e:	1a1b      	subs	r3, r3, r0
    6b30:	2b96      	cmp	r3, #150	; 0x96
    6b32:	dc0d      	bgt.n	6b50 <__aeabi_i2f+0x38>
    6b34:	2296      	movs	r2, #150	; 0x96
    6b36:	1ad2      	subs	r2, r2, r3
    6b38:	4094      	lsls	r4, r2
    6b3a:	002a      	movs	r2, r5
    6b3c:	0264      	lsls	r4, r4, #9
    6b3e:	0a64      	lsrs	r4, r4, #9
    6b40:	b2db      	uxtb	r3, r3
    6b42:	0264      	lsls	r4, r4, #9
    6b44:	05db      	lsls	r3, r3, #23
    6b46:	0a60      	lsrs	r0, r4, #9
    6b48:	07d2      	lsls	r2, r2, #31
    6b4a:	4318      	orrs	r0, r3
    6b4c:	4310      	orrs	r0, r2
    6b4e:	bd70      	pop	{r4, r5, r6, pc}
    6b50:	2b99      	cmp	r3, #153	; 0x99
    6b52:	dc19      	bgt.n	6b88 <__aeabi_i2f+0x70>
    6b54:	2299      	movs	r2, #153	; 0x99
    6b56:	1ad2      	subs	r2, r2, r3
    6b58:	2a00      	cmp	r2, #0
    6b5a:	dd29      	ble.n	6bb0 <__aeabi_i2f+0x98>
    6b5c:	4094      	lsls	r4, r2
    6b5e:	0022      	movs	r2, r4
    6b60:	4c14      	ldr	r4, [pc, #80]	; (6bb4 <__aeabi_i2f+0x9c>)
    6b62:	4014      	ands	r4, r2
    6b64:	0751      	lsls	r1, r2, #29
    6b66:	d004      	beq.n	6b72 <__aeabi_i2f+0x5a>
    6b68:	210f      	movs	r1, #15
    6b6a:	400a      	ands	r2, r1
    6b6c:	2a04      	cmp	r2, #4
    6b6e:	d000      	beq.n	6b72 <__aeabi_i2f+0x5a>
    6b70:	3404      	adds	r4, #4
    6b72:	0162      	lsls	r2, r4, #5
    6b74:	d413      	bmi.n	6b9e <__aeabi_i2f+0x86>
    6b76:	01a4      	lsls	r4, r4, #6
    6b78:	0a64      	lsrs	r4, r4, #9
    6b7a:	b2db      	uxtb	r3, r3
    6b7c:	002a      	movs	r2, r5
    6b7e:	e7e0      	b.n	6b42 <__aeabi_i2f+0x2a>
    6b80:	2200      	movs	r2, #0
    6b82:	2300      	movs	r3, #0
    6b84:	2400      	movs	r4, #0
    6b86:	e7dc      	b.n	6b42 <__aeabi_i2f+0x2a>
    6b88:	2205      	movs	r2, #5
    6b8a:	0021      	movs	r1, r4
    6b8c:	1a12      	subs	r2, r2, r0
    6b8e:	40d1      	lsrs	r1, r2
    6b90:	22b9      	movs	r2, #185	; 0xb9
    6b92:	1ad2      	subs	r2, r2, r3
    6b94:	4094      	lsls	r4, r2
    6b96:	1e62      	subs	r2, r4, #1
    6b98:	4194      	sbcs	r4, r2
    6b9a:	430c      	orrs	r4, r1
    6b9c:	e7da      	b.n	6b54 <__aeabi_i2f+0x3c>
    6b9e:	4b05      	ldr	r3, [pc, #20]	; (6bb4 <__aeabi_i2f+0x9c>)
    6ba0:	002a      	movs	r2, r5
    6ba2:	401c      	ands	r4, r3
    6ba4:	239f      	movs	r3, #159	; 0x9f
    6ba6:	01a4      	lsls	r4, r4, #6
    6ba8:	1a1b      	subs	r3, r3, r0
    6baa:	0a64      	lsrs	r4, r4, #9
    6bac:	b2db      	uxtb	r3, r3
    6bae:	e7c8      	b.n	6b42 <__aeabi_i2f+0x2a>
    6bb0:	0022      	movs	r2, r4
    6bb2:	e7d5      	b.n	6b60 <__aeabi_i2f+0x48>
    6bb4:	fbffffff 	.word	0xfbffffff

00006bb8 <__aeabi_dadd>:
    6bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bba:	4645      	mov	r5, r8
    6bbc:	46de      	mov	lr, fp
    6bbe:	4657      	mov	r7, sl
    6bc0:	464e      	mov	r6, r9
    6bc2:	030c      	lsls	r4, r1, #12
    6bc4:	b5e0      	push	{r5, r6, r7, lr}
    6bc6:	004e      	lsls	r6, r1, #1
    6bc8:	0fc9      	lsrs	r1, r1, #31
    6bca:	4688      	mov	r8, r1
    6bcc:	000d      	movs	r5, r1
    6bce:	0a61      	lsrs	r1, r4, #9
    6bd0:	0f44      	lsrs	r4, r0, #29
    6bd2:	430c      	orrs	r4, r1
    6bd4:	00c7      	lsls	r7, r0, #3
    6bd6:	0319      	lsls	r1, r3, #12
    6bd8:	0058      	lsls	r0, r3, #1
    6bda:	0fdb      	lsrs	r3, r3, #31
    6bdc:	469b      	mov	fp, r3
    6bde:	0a4b      	lsrs	r3, r1, #9
    6be0:	0f51      	lsrs	r1, r2, #29
    6be2:	430b      	orrs	r3, r1
    6be4:	0d76      	lsrs	r6, r6, #21
    6be6:	0d40      	lsrs	r0, r0, #21
    6be8:	0019      	movs	r1, r3
    6bea:	00d2      	lsls	r2, r2, #3
    6bec:	45d8      	cmp	r8, fp
    6bee:	d100      	bne.n	6bf2 <__aeabi_dadd+0x3a>
    6bf0:	e0ae      	b.n	6d50 <__aeabi_dadd+0x198>
    6bf2:	1a35      	subs	r5, r6, r0
    6bf4:	2d00      	cmp	r5, #0
    6bf6:	dc00      	bgt.n	6bfa <__aeabi_dadd+0x42>
    6bf8:	e0f6      	b.n	6de8 <__aeabi_dadd+0x230>
    6bfa:	2800      	cmp	r0, #0
    6bfc:	d10f      	bne.n	6c1e <__aeabi_dadd+0x66>
    6bfe:	4313      	orrs	r3, r2
    6c00:	d100      	bne.n	6c04 <__aeabi_dadd+0x4c>
    6c02:	e0db      	b.n	6dbc <__aeabi_dadd+0x204>
    6c04:	1e6b      	subs	r3, r5, #1
    6c06:	2b00      	cmp	r3, #0
    6c08:	d000      	beq.n	6c0c <__aeabi_dadd+0x54>
    6c0a:	e137      	b.n	6e7c <__aeabi_dadd+0x2c4>
    6c0c:	1aba      	subs	r2, r7, r2
    6c0e:	4297      	cmp	r7, r2
    6c10:	41bf      	sbcs	r7, r7
    6c12:	1a64      	subs	r4, r4, r1
    6c14:	427f      	negs	r7, r7
    6c16:	1be4      	subs	r4, r4, r7
    6c18:	2601      	movs	r6, #1
    6c1a:	0017      	movs	r7, r2
    6c1c:	e024      	b.n	6c68 <__aeabi_dadd+0xb0>
    6c1e:	4bc6      	ldr	r3, [pc, #792]	; (6f38 <__aeabi_dadd+0x380>)
    6c20:	429e      	cmp	r6, r3
    6c22:	d04d      	beq.n	6cc0 <__aeabi_dadd+0x108>
    6c24:	2380      	movs	r3, #128	; 0x80
    6c26:	041b      	lsls	r3, r3, #16
    6c28:	4319      	orrs	r1, r3
    6c2a:	2d38      	cmp	r5, #56	; 0x38
    6c2c:	dd00      	ble.n	6c30 <__aeabi_dadd+0x78>
    6c2e:	e107      	b.n	6e40 <__aeabi_dadd+0x288>
    6c30:	2d1f      	cmp	r5, #31
    6c32:	dd00      	ble.n	6c36 <__aeabi_dadd+0x7e>
    6c34:	e138      	b.n	6ea8 <__aeabi_dadd+0x2f0>
    6c36:	2020      	movs	r0, #32
    6c38:	1b43      	subs	r3, r0, r5
    6c3a:	469a      	mov	sl, r3
    6c3c:	000b      	movs	r3, r1
    6c3e:	4650      	mov	r0, sl
    6c40:	4083      	lsls	r3, r0
    6c42:	4699      	mov	r9, r3
    6c44:	0013      	movs	r3, r2
    6c46:	4648      	mov	r0, r9
    6c48:	40eb      	lsrs	r3, r5
    6c4a:	4318      	orrs	r0, r3
    6c4c:	0003      	movs	r3, r0
    6c4e:	4650      	mov	r0, sl
    6c50:	4082      	lsls	r2, r0
    6c52:	1e50      	subs	r0, r2, #1
    6c54:	4182      	sbcs	r2, r0
    6c56:	40e9      	lsrs	r1, r5
    6c58:	431a      	orrs	r2, r3
    6c5a:	1aba      	subs	r2, r7, r2
    6c5c:	1a61      	subs	r1, r4, r1
    6c5e:	4297      	cmp	r7, r2
    6c60:	41a4      	sbcs	r4, r4
    6c62:	0017      	movs	r7, r2
    6c64:	4264      	negs	r4, r4
    6c66:	1b0c      	subs	r4, r1, r4
    6c68:	0223      	lsls	r3, r4, #8
    6c6a:	d562      	bpl.n	6d32 <__aeabi_dadd+0x17a>
    6c6c:	0264      	lsls	r4, r4, #9
    6c6e:	0a65      	lsrs	r5, r4, #9
    6c70:	2d00      	cmp	r5, #0
    6c72:	d100      	bne.n	6c76 <__aeabi_dadd+0xbe>
    6c74:	e0df      	b.n	6e36 <__aeabi_dadd+0x27e>
    6c76:	0028      	movs	r0, r5
    6c78:	f001 fe22 	bl	88c0 <__clzsi2>
    6c7c:	0003      	movs	r3, r0
    6c7e:	3b08      	subs	r3, #8
    6c80:	2b1f      	cmp	r3, #31
    6c82:	dd00      	ble.n	6c86 <__aeabi_dadd+0xce>
    6c84:	e0d2      	b.n	6e2c <__aeabi_dadd+0x274>
    6c86:	2220      	movs	r2, #32
    6c88:	003c      	movs	r4, r7
    6c8a:	1ad2      	subs	r2, r2, r3
    6c8c:	409d      	lsls	r5, r3
    6c8e:	40d4      	lsrs	r4, r2
    6c90:	409f      	lsls	r7, r3
    6c92:	4325      	orrs	r5, r4
    6c94:	429e      	cmp	r6, r3
    6c96:	dd00      	ble.n	6c9a <__aeabi_dadd+0xe2>
    6c98:	e0c4      	b.n	6e24 <__aeabi_dadd+0x26c>
    6c9a:	1b9e      	subs	r6, r3, r6
    6c9c:	1c73      	adds	r3, r6, #1
    6c9e:	2b1f      	cmp	r3, #31
    6ca0:	dd00      	ble.n	6ca4 <__aeabi_dadd+0xec>
    6ca2:	e0f1      	b.n	6e88 <__aeabi_dadd+0x2d0>
    6ca4:	2220      	movs	r2, #32
    6ca6:	0038      	movs	r0, r7
    6ca8:	0029      	movs	r1, r5
    6caa:	1ad2      	subs	r2, r2, r3
    6cac:	40d8      	lsrs	r0, r3
    6cae:	4091      	lsls	r1, r2
    6cb0:	4097      	lsls	r7, r2
    6cb2:	002c      	movs	r4, r5
    6cb4:	4301      	orrs	r1, r0
    6cb6:	1e78      	subs	r0, r7, #1
    6cb8:	4187      	sbcs	r7, r0
    6cba:	40dc      	lsrs	r4, r3
    6cbc:	2600      	movs	r6, #0
    6cbe:	430f      	orrs	r7, r1
    6cc0:	077b      	lsls	r3, r7, #29
    6cc2:	d009      	beq.n	6cd8 <__aeabi_dadd+0x120>
    6cc4:	230f      	movs	r3, #15
    6cc6:	403b      	ands	r3, r7
    6cc8:	2b04      	cmp	r3, #4
    6cca:	d005      	beq.n	6cd8 <__aeabi_dadd+0x120>
    6ccc:	1d3b      	adds	r3, r7, #4
    6cce:	42bb      	cmp	r3, r7
    6cd0:	41bf      	sbcs	r7, r7
    6cd2:	427f      	negs	r7, r7
    6cd4:	19e4      	adds	r4, r4, r7
    6cd6:	001f      	movs	r7, r3
    6cd8:	0223      	lsls	r3, r4, #8
    6cda:	d52c      	bpl.n	6d36 <__aeabi_dadd+0x17e>
    6cdc:	4b96      	ldr	r3, [pc, #600]	; (6f38 <__aeabi_dadd+0x380>)
    6cde:	3601      	adds	r6, #1
    6ce0:	429e      	cmp	r6, r3
    6ce2:	d100      	bne.n	6ce6 <__aeabi_dadd+0x12e>
    6ce4:	e09a      	b.n	6e1c <__aeabi_dadd+0x264>
    6ce6:	4645      	mov	r5, r8
    6ce8:	4b94      	ldr	r3, [pc, #592]	; (6f3c <__aeabi_dadd+0x384>)
    6cea:	08ff      	lsrs	r7, r7, #3
    6cec:	401c      	ands	r4, r3
    6cee:	0760      	lsls	r0, r4, #29
    6cf0:	0576      	lsls	r6, r6, #21
    6cf2:	0264      	lsls	r4, r4, #9
    6cf4:	4307      	orrs	r7, r0
    6cf6:	0b24      	lsrs	r4, r4, #12
    6cf8:	0d76      	lsrs	r6, r6, #21
    6cfa:	2100      	movs	r1, #0
    6cfc:	0324      	lsls	r4, r4, #12
    6cfe:	0b23      	lsrs	r3, r4, #12
    6d00:	0d0c      	lsrs	r4, r1, #20
    6d02:	4a8f      	ldr	r2, [pc, #572]	; (6f40 <__aeabi_dadd+0x388>)
    6d04:	0524      	lsls	r4, r4, #20
    6d06:	431c      	orrs	r4, r3
    6d08:	4014      	ands	r4, r2
    6d0a:	0533      	lsls	r3, r6, #20
    6d0c:	4323      	orrs	r3, r4
    6d0e:	005b      	lsls	r3, r3, #1
    6d10:	07ed      	lsls	r5, r5, #31
    6d12:	085b      	lsrs	r3, r3, #1
    6d14:	432b      	orrs	r3, r5
    6d16:	0038      	movs	r0, r7
    6d18:	0019      	movs	r1, r3
    6d1a:	bc3c      	pop	{r2, r3, r4, r5}
    6d1c:	4690      	mov	r8, r2
    6d1e:	4699      	mov	r9, r3
    6d20:	46a2      	mov	sl, r4
    6d22:	46ab      	mov	fp, r5
    6d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d26:	4664      	mov	r4, ip
    6d28:	4304      	orrs	r4, r0
    6d2a:	d100      	bne.n	6d2e <__aeabi_dadd+0x176>
    6d2c:	e211      	b.n	7152 <__aeabi_dadd+0x59a>
    6d2e:	0004      	movs	r4, r0
    6d30:	4667      	mov	r7, ip
    6d32:	077b      	lsls	r3, r7, #29
    6d34:	d1c6      	bne.n	6cc4 <__aeabi_dadd+0x10c>
    6d36:	4645      	mov	r5, r8
    6d38:	0760      	lsls	r0, r4, #29
    6d3a:	08ff      	lsrs	r7, r7, #3
    6d3c:	4307      	orrs	r7, r0
    6d3e:	08e4      	lsrs	r4, r4, #3
    6d40:	4b7d      	ldr	r3, [pc, #500]	; (6f38 <__aeabi_dadd+0x380>)
    6d42:	429e      	cmp	r6, r3
    6d44:	d030      	beq.n	6da8 <__aeabi_dadd+0x1f0>
    6d46:	0324      	lsls	r4, r4, #12
    6d48:	0576      	lsls	r6, r6, #21
    6d4a:	0b24      	lsrs	r4, r4, #12
    6d4c:	0d76      	lsrs	r6, r6, #21
    6d4e:	e7d4      	b.n	6cfa <__aeabi_dadd+0x142>
    6d50:	1a33      	subs	r3, r6, r0
    6d52:	469a      	mov	sl, r3
    6d54:	2b00      	cmp	r3, #0
    6d56:	dd78      	ble.n	6e4a <__aeabi_dadd+0x292>
    6d58:	2800      	cmp	r0, #0
    6d5a:	d031      	beq.n	6dc0 <__aeabi_dadd+0x208>
    6d5c:	4876      	ldr	r0, [pc, #472]	; (6f38 <__aeabi_dadd+0x380>)
    6d5e:	4286      	cmp	r6, r0
    6d60:	d0ae      	beq.n	6cc0 <__aeabi_dadd+0x108>
    6d62:	2080      	movs	r0, #128	; 0x80
    6d64:	0400      	lsls	r0, r0, #16
    6d66:	4301      	orrs	r1, r0
    6d68:	4653      	mov	r3, sl
    6d6a:	2b38      	cmp	r3, #56	; 0x38
    6d6c:	dc00      	bgt.n	6d70 <__aeabi_dadd+0x1b8>
    6d6e:	e0e9      	b.n	6f44 <__aeabi_dadd+0x38c>
    6d70:	430a      	orrs	r2, r1
    6d72:	1e51      	subs	r1, r2, #1
    6d74:	418a      	sbcs	r2, r1
    6d76:	2100      	movs	r1, #0
    6d78:	19d2      	adds	r2, r2, r7
    6d7a:	42ba      	cmp	r2, r7
    6d7c:	41bf      	sbcs	r7, r7
    6d7e:	1909      	adds	r1, r1, r4
    6d80:	427c      	negs	r4, r7
    6d82:	0017      	movs	r7, r2
    6d84:	190c      	adds	r4, r1, r4
    6d86:	0223      	lsls	r3, r4, #8
    6d88:	d5d3      	bpl.n	6d32 <__aeabi_dadd+0x17a>
    6d8a:	4b6b      	ldr	r3, [pc, #428]	; (6f38 <__aeabi_dadd+0x380>)
    6d8c:	3601      	adds	r6, #1
    6d8e:	429e      	cmp	r6, r3
    6d90:	d100      	bne.n	6d94 <__aeabi_dadd+0x1dc>
    6d92:	e13a      	b.n	700a <__aeabi_dadd+0x452>
    6d94:	2001      	movs	r0, #1
    6d96:	4b69      	ldr	r3, [pc, #420]	; (6f3c <__aeabi_dadd+0x384>)
    6d98:	401c      	ands	r4, r3
    6d9a:	087b      	lsrs	r3, r7, #1
    6d9c:	4007      	ands	r7, r0
    6d9e:	431f      	orrs	r7, r3
    6da0:	07e0      	lsls	r0, r4, #31
    6da2:	4307      	orrs	r7, r0
    6da4:	0864      	lsrs	r4, r4, #1
    6da6:	e78b      	b.n	6cc0 <__aeabi_dadd+0x108>
    6da8:	0023      	movs	r3, r4
    6daa:	433b      	orrs	r3, r7
    6dac:	d100      	bne.n	6db0 <__aeabi_dadd+0x1f8>
    6dae:	e1cb      	b.n	7148 <__aeabi_dadd+0x590>
    6db0:	2280      	movs	r2, #128	; 0x80
    6db2:	0312      	lsls	r2, r2, #12
    6db4:	4314      	orrs	r4, r2
    6db6:	0324      	lsls	r4, r4, #12
    6db8:	0b24      	lsrs	r4, r4, #12
    6dba:	e79e      	b.n	6cfa <__aeabi_dadd+0x142>
    6dbc:	002e      	movs	r6, r5
    6dbe:	e77f      	b.n	6cc0 <__aeabi_dadd+0x108>
    6dc0:	0008      	movs	r0, r1
    6dc2:	4310      	orrs	r0, r2
    6dc4:	d100      	bne.n	6dc8 <__aeabi_dadd+0x210>
    6dc6:	e0b4      	b.n	6f32 <__aeabi_dadd+0x37a>
    6dc8:	1e58      	subs	r0, r3, #1
    6dca:	2800      	cmp	r0, #0
    6dcc:	d000      	beq.n	6dd0 <__aeabi_dadd+0x218>
    6dce:	e0de      	b.n	6f8e <__aeabi_dadd+0x3d6>
    6dd0:	18ba      	adds	r2, r7, r2
    6dd2:	42ba      	cmp	r2, r7
    6dd4:	419b      	sbcs	r3, r3
    6dd6:	1864      	adds	r4, r4, r1
    6dd8:	425b      	negs	r3, r3
    6dda:	18e4      	adds	r4, r4, r3
    6ddc:	0017      	movs	r7, r2
    6dde:	2601      	movs	r6, #1
    6de0:	0223      	lsls	r3, r4, #8
    6de2:	d5a6      	bpl.n	6d32 <__aeabi_dadd+0x17a>
    6de4:	2602      	movs	r6, #2
    6de6:	e7d5      	b.n	6d94 <__aeabi_dadd+0x1dc>
    6de8:	2d00      	cmp	r5, #0
    6dea:	d16e      	bne.n	6eca <__aeabi_dadd+0x312>
    6dec:	1c70      	adds	r0, r6, #1
    6dee:	0540      	lsls	r0, r0, #21
    6df0:	0d40      	lsrs	r0, r0, #21
    6df2:	2801      	cmp	r0, #1
    6df4:	dc00      	bgt.n	6df8 <__aeabi_dadd+0x240>
    6df6:	e0f9      	b.n	6fec <__aeabi_dadd+0x434>
    6df8:	1ab8      	subs	r0, r7, r2
    6dfa:	4684      	mov	ip, r0
    6dfc:	4287      	cmp	r7, r0
    6dfe:	4180      	sbcs	r0, r0
    6e00:	1ae5      	subs	r5, r4, r3
    6e02:	4240      	negs	r0, r0
    6e04:	1a2d      	subs	r5, r5, r0
    6e06:	0228      	lsls	r0, r5, #8
    6e08:	d400      	bmi.n	6e0c <__aeabi_dadd+0x254>
    6e0a:	e089      	b.n	6f20 <__aeabi_dadd+0x368>
    6e0c:	1bd7      	subs	r7, r2, r7
    6e0e:	42ba      	cmp	r2, r7
    6e10:	4192      	sbcs	r2, r2
    6e12:	1b1c      	subs	r4, r3, r4
    6e14:	4252      	negs	r2, r2
    6e16:	1aa5      	subs	r5, r4, r2
    6e18:	46d8      	mov	r8, fp
    6e1a:	e729      	b.n	6c70 <__aeabi_dadd+0xb8>
    6e1c:	4645      	mov	r5, r8
    6e1e:	2400      	movs	r4, #0
    6e20:	2700      	movs	r7, #0
    6e22:	e76a      	b.n	6cfa <__aeabi_dadd+0x142>
    6e24:	4c45      	ldr	r4, [pc, #276]	; (6f3c <__aeabi_dadd+0x384>)
    6e26:	1af6      	subs	r6, r6, r3
    6e28:	402c      	ands	r4, r5
    6e2a:	e749      	b.n	6cc0 <__aeabi_dadd+0x108>
    6e2c:	003d      	movs	r5, r7
    6e2e:	3828      	subs	r0, #40	; 0x28
    6e30:	4085      	lsls	r5, r0
    6e32:	2700      	movs	r7, #0
    6e34:	e72e      	b.n	6c94 <__aeabi_dadd+0xdc>
    6e36:	0038      	movs	r0, r7
    6e38:	f001 fd42 	bl	88c0 <__clzsi2>
    6e3c:	3020      	adds	r0, #32
    6e3e:	e71d      	b.n	6c7c <__aeabi_dadd+0xc4>
    6e40:	430a      	orrs	r2, r1
    6e42:	1e51      	subs	r1, r2, #1
    6e44:	418a      	sbcs	r2, r1
    6e46:	2100      	movs	r1, #0
    6e48:	e707      	b.n	6c5a <__aeabi_dadd+0xa2>
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	d000      	beq.n	6e50 <__aeabi_dadd+0x298>
    6e4e:	e0f3      	b.n	7038 <__aeabi_dadd+0x480>
    6e50:	1c70      	adds	r0, r6, #1
    6e52:	0543      	lsls	r3, r0, #21
    6e54:	0d5b      	lsrs	r3, r3, #21
    6e56:	2b01      	cmp	r3, #1
    6e58:	dc00      	bgt.n	6e5c <__aeabi_dadd+0x2a4>
    6e5a:	e0ad      	b.n	6fb8 <__aeabi_dadd+0x400>
    6e5c:	4b36      	ldr	r3, [pc, #216]	; (6f38 <__aeabi_dadd+0x380>)
    6e5e:	4298      	cmp	r0, r3
    6e60:	d100      	bne.n	6e64 <__aeabi_dadd+0x2ac>
    6e62:	e0d1      	b.n	7008 <__aeabi_dadd+0x450>
    6e64:	18ba      	adds	r2, r7, r2
    6e66:	42ba      	cmp	r2, r7
    6e68:	41bf      	sbcs	r7, r7
    6e6a:	1864      	adds	r4, r4, r1
    6e6c:	427f      	negs	r7, r7
    6e6e:	19e4      	adds	r4, r4, r7
    6e70:	07e7      	lsls	r7, r4, #31
    6e72:	0852      	lsrs	r2, r2, #1
    6e74:	4317      	orrs	r7, r2
    6e76:	0864      	lsrs	r4, r4, #1
    6e78:	0006      	movs	r6, r0
    6e7a:	e721      	b.n	6cc0 <__aeabi_dadd+0x108>
    6e7c:	482e      	ldr	r0, [pc, #184]	; (6f38 <__aeabi_dadd+0x380>)
    6e7e:	4285      	cmp	r5, r0
    6e80:	d100      	bne.n	6e84 <__aeabi_dadd+0x2cc>
    6e82:	e093      	b.n	6fac <__aeabi_dadd+0x3f4>
    6e84:	001d      	movs	r5, r3
    6e86:	e6d0      	b.n	6c2a <__aeabi_dadd+0x72>
    6e88:	0029      	movs	r1, r5
    6e8a:	3e1f      	subs	r6, #31
    6e8c:	40f1      	lsrs	r1, r6
    6e8e:	2b20      	cmp	r3, #32
    6e90:	d100      	bne.n	6e94 <__aeabi_dadd+0x2dc>
    6e92:	e08d      	b.n	6fb0 <__aeabi_dadd+0x3f8>
    6e94:	2240      	movs	r2, #64	; 0x40
    6e96:	1ad3      	subs	r3, r2, r3
    6e98:	409d      	lsls	r5, r3
    6e9a:	432f      	orrs	r7, r5
    6e9c:	1e7d      	subs	r5, r7, #1
    6e9e:	41af      	sbcs	r7, r5
    6ea0:	2400      	movs	r4, #0
    6ea2:	430f      	orrs	r7, r1
    6ea4:	2600      	movs	r6, #0
    6ea6:	e744      	b.n	6d32 <__aeabi_dadd+0x17a>
    6ea8:	002b      	movs	r3, r5
    6eaa:	0008      	movs	r0, r1
    6eac:	3b20      	subs	r3, #32
    6eae:	40d8      	lsrs	r0, r3
    6eb0:	0003      	movs	r3, r0
    6eb2:	2d20      	cmp	r5, #32
    6eb4:	d100      	bne.n	6eb8 <__aeabi_dadd+0x300>
    6eb6:	e07d      	b.n	6fb4 <__aeabi_dadd+0x3fc>
    6eb8:	2040      	movs	r0, #64	; 0x40
    6eba:	1b45      	subs	r5, r0, r5
    6ebc:	40a9      	lsls	r1, r5
    6ebe:	430a      	orrs	r2, r1
    6ec0:	1e51      	subs	r1, r2, #1
    6ec2:	418a      	sbcs	r2, r1
    6ec4:	2100      	movs	r1, #0
    6ec6:	431a      	orrs	r2, r3
    6ec8:	e6c7      	b.n	6c5a <__aeabi_dadd+0xa2>
    6eca:	2e00      	cmp	r6, #0
    6ecc:	d050      	beq.n	6f70 <__aeabi_dadd+0x3b8>
    6ece:	4e1a      	ldr	r6, [pc, #104]	; (6f38 <__aeabi_dadd+0x380>)
    6ed0:	42b0      	cmp	r0, r6
    6ed2:	d057      	beq.n	6f84 <__aeabi_dadd+0x3cc>
    6ed4:	2680      	movs	r6, #128	; 0x80
    6ed6:	426b      	negs	r3, r5
    6ed8:	4699      	mov	r9, r3
    6eda:	0436      	lsls	r6, r6, #16
    6edc:	4334      	orrs	r4, r6
    6ede:	464b      	mov	r3, r9
    6ee0:	2b38      	cmp	r3, #56	; 0x38
    6ee2:	dd00      	ble.n	6ee6 <__aeabi_dadd+0x32e>
    6ee4:	e0d6      	b.n	7094 <__aeabi_dadd+0x4dc>
    6ee6:	2b1f      	cmp	r3, #31
    6ee8:	dd00      	ble.n	6eec <__aeabi_dadd+0x334>
    6eea:	e135      	b.n	7158 <__aeabi_dadd+0x5a0>
    6eec:	2620      	movs	r6, #32
    6eee:	1af5      	subs	r5, r6, r3
    6ef0:	0026      	movs	r6, r4
    6ef2:	40ae      	lsls	r6, r5
    6ef4:	46b2      	mov	sl, r6
    6ef6:	003e      	movs	r6, r7
    6ef8:	40de      	lsrs	r6, r3
    6efa:	46ac      	mov	ip, r5
    6efc:	0035      	movs	r5, r6
    6efe:	4656      	mov	r6, sl
    6f00:	432e      	orrs	r6, r5
    6f02:	4665      	mov	r5, ip
    6f04:	40af      	lsls	r7, r5
    6f06:	1e7d      	subs	r5, r7, #1
    6f08:	41af      	sbcs	r7, r5
    6f0a:	40dc      	lsrs	r4, r3
    6f0c:	4337      	orrs	r7, r6
    6f0e:	1bd7      	subs	r7, r2, r7
    6f10:	42ba      	cmp	r2, r7
    6f12:	4192      	sbcs	r2, r2
    6f14:	1b0c      	subs	r4, r1, r4
    6f16:	4252      	negs	r2, r2
    6f18:	1aa4      	subs	r4, r4, r2
    6f1a:	0006      	movs	r6, r0
    6f1c:	46d8      	mov	r8, fp
    6f1e:	e6a3      	b.n	6c68 <__aeabi_dadd+0xb0>
    6f20:	4664      	mov	r4, ip
    6f22:	4667      	mov	r7, ip
    6f24:	432c      	orrs	r4, r5
    6f26:	d000      	beq.n	6f2a <__aeabi_dadd+0x372>
    6f28:	e6a2      	b.n	6c70 <__aeabi_dadd+0xb8>
    6f2a:	2500      	movs	r5, #0
    6f2c:	2600      	movs	r6, #0
    6f2e:	2700      	movs	r7, #0
    6f30:	e706      	b.n	6d40 <__aeabi_dadd+0x188>
    6f32:	001e      	movs	r6, r3
    6f34:	e6c4      	b.n	6cc0 <__aeabi_dadd+0x108>
    6f36:	46c0      	nop			; (mov r8, r8)
    6f38:	000007ff 	.word	0x000007ff
    6f3c:	ff7fffff 	.word	0xff7fffff
    6f40:	800fffff 	.word	0x800fffff
    6f44:	2b1f      	cmp	r3, #31
    6f46:	dc63      	bgt.n	7010 <__aeabi_dadd+0x458>
    6f48:	2020      	movs	r0, #32
    6f4a:	1ac3      	subs	r3, r0, r3
    6f4c:	0008      	movs	r0, r1
    6f4e:	4098      	lsls	r0, r3
    6f50:	469c      	mov	ip, r3
    6f52:	4683      	mov	fp, r0
    6f54:	4653      	mov	r3, sl
    6f56:	0010      	movs	r0, r2
    6f58:	40d8      	lsrs	r0, r3
    6f5a:	0003      	movs	r3, r0
    6f5c:	4658      	mov	r0, fp
    6f5e:	4318      	orrs	r0, r3
    6f60:	4663      	mov	r3, ip
    6f62:	409a      	lsls	r2, r3
    6f64:	1e53      	subs	r3, r2, #1
    6f66:	419a      	sbcs	r2, r3
    6f68:	4653      	mov	r3, sl
    6f6a:	4302      	orrs	r2, r0
    6f6c:	40d9      	lsrs	r1, r3
    6f6e:	e703      	b.n	6d78 <__aeabi_dadd+0x1c0>
    6f70:	0026      	movs	r6, r4
    6f72:	433e      	orrs	r6, r7
    6f74:	d006      	beq.n	6f84 <__aeabi_dadd+0x3cc>
    6f76:	43eb      	mvns	r3, r5
    6f78:	4699      	mov	r9, r3
    6f7a:	2b00      	cmp	r3, #0
    6f7c:	d0c7      	beq.n	6f0e <__aeabi_dadd+0x356>
    6f7e:	4e94      	ldr	r6, [pc, #592]	; (71d0 <__aeabi_dadd+0x618>)
    6f80:	42b0      	cmp	r0, r6
    6f82:	d1ac      	bne.n	6ede <__aeabi_dadd+0x326>
    6f84:	000c      	movs	r4, r1
    6f86:	0017      	movs	r7, r2
    6f88:	0006      	movs	r6, r0
    6f8a:	46d8      	mov	r8, fp
    6f8c:	e698      	b.n	6cc0 <__aeabi_dadd+0x108>
    6f8e:	4b90      	ldr	r3, [pc, #576]	; (71d0 <__aeabi_dadd+0x618>)
    6f90:	459a      	cmp	sl, r3
    6f92:	d00b      	beq.n	6fac <__aeabi_dadd+0x3f4>
    6f94:	4682      	mov	sl, r0
    6f96:	e6e7      	b.n	6d68 <__aeabi_dadd+0x1b0>
    6f98:	2800      	cmp	r0, #0
    6f9a:	d000      	beq.n	6f9e <__aeabi_dadd+0x3e6>
    6f9c:	e09e      	b.n	70dc <__aeabi_dadd+0x524>
    6f9e:	0018      	movs	r0, r3
    6fa0:	4310      	orrs	r0, r2
    6fa2:	d100      	bne.n	6fa6 <__aeabi_dadd+0x3ee>
    6fa4:	e0e9      	b.n	717a <__aeabi_dadd+0x5c2>
    6fa6:	001c      	movs	r4, r3
    6fa8:	0017      	movs	r7, r2
    6faa:	46d8      	mov	r8, fp
    6fac:	4e88      	ldr	r6, [pc, #544]	; (71d0 <__aeabi_dadd+0x618>)
    6fae:	e687      	b.n	6cc0 <__aeabi_dadd+0x108>
    6fb0:	2500      	movs	r5, #0
    6fb2:	e772      	b.n	6e9a <__aeabi_dadd+0x2e2>
    6fb4:	2100      	movs	r1, #0
    6fb6:	e782      	b.n	6ebe <__aeabi_dadd+0x306>
    6fb8:	0023      	movs	r3, r4
    6fba:	433b      	orrs	r3, r7
    6fbc:	2e00      	cmp	r6, #0
    6fbe:	d000      	beq.n	6fc2 <__aeabi_dadd+0x40a>
    6fc0:	e0ab      	b.n	711a <__aeabi_dadd+0x562>
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	d100      	bne.n	6fc8 <__aeabi_dadd+0x410>
    6fc6:	e0e7      	b.n	7198 <__aeabi_dadd+0x5e0>
    6fc8:	000b      	movs	r3, r1
    6fca:	4313      	orrs	r3, r2
    6fcc:	d100      	bne.n	6fd0 <__aeabi_dadd+0x418>
    6fce:	e677      	b.n	6cc0 <__aeabi_dadd+0x108>
    6fd0:	18ba      	adds	r2, r7, r2
    6fd2:	42ba      	cmp	r2, r7
    6fd4:	41bf      	sbcs	r7, r7
    6fd6:	1864      	adds	r4, r4, r1
    6fd8:	427f      	negs	r7, r7
    6fda:	19e4      	adds	r4, r4, r7
    6fdc:	0223      	lsls	r3, r4, #8
    6fde:	d400      	bmi.n	6fe2 <__aeabi_dadd+0x42a>
    6fe0:	e0f2      	b.n	71c8 <__aeabi_dadd+0x610>
    6fe2:	4b7c      	ldr	r3, [pc, #496]	; (71d4 <__aeabi_dadd+0x61c>)
    6fe4:	0017      	movs	r7, r2
    6fe6:	401c      	ands	r4, r3
    6fe8:	0006      	movs	r6, r0
    6fea:	e669      	b.n	6cc0 <__aeabi_dadd+0x108>
    6fec:	0020      	movs	r0, r4
    6fee:	4338      	orrs	r0, r7
    6ff0:	2e00      	cmp	r6, #0
    6ff2:	d1d1      	bne.n	6f98 <__aeabi_dadd+0x3e0>
    6ff4:	2800      	cmp	r0, #0
    6ff6:	d15b      	bne.n	70b0 <__aeabi_dadd+0x4f8>
    6ff8:	001c      	movs	r4, r3
    6ffa:	4314      	orrs	r4, r2
    6ffc:	d100      	bne.n	7000 <__aeabi_dadd+0x448>
    6ffe:	e0a8      	b.n	7152 <__aeabi_dadd+0x59a>
    7000:	001c      	movs	r4, r3
    7002:	0017      	movs	r7, r2
    7004:	46d8      	mov	r8, fp
    7006:	e65b      	b.n	6cc0 <__aeabi_dadd+0x108>
    7008:	0006      	movs	r6, r0
    700a:	2400      	movs	r4, #0
    700c:	2700      	movs	r7, #0
    700e:	e697      	b.n	6d40 <__aeabi_dadd+0x188>
    7010:	4650      	mov	r0, sl
    7012:	000b      	movs	r3, r1
    7014:	3820      	subs	r0, #32
    7016:	40c3      	lsrs	r3, r0
    7018:	4699      	mov	r9, r3
    701a:	4653      	mov	r3, sl
    701c:	2b20      	cmp	r3, #32
    701e:	d100      	bne.n	7022 <__aeabi_dadd+0x46a>
    7020:	e095      	b.n	714e <__aeabi_dadd+0x596>
    7022:	2340      	movs	r3, #64	; 0x40
    7024:	4650      	mov	r0, sl
    7026:	1a1b      	subs	r3, r3, r0
    7028:	4099      	lsls	r1, r3
    702a:	430a      	orrs	r2, r1
    702c:	1e51      	subs	r1, r2, #1
    702e:	418a      	sbcs	r2, r1
    7030:	464b      	mov	r3, r9
    7032:	2100      	movs	r1, #0
    7034:	431a      	orrs	r2, r3
    7036:	e69f      	b.n	6d78 <__aeabi_dadd+0x1c0>
    7038:	2e00      	cmp	r6, #0
    703a:	d130      	bne.n	709e <__aeabi_dadd+0x4e6>
    703c:	0026      	movs	r6, r4
    703e:	433e      	orrs	r6, r7
    7040:	d067      	beq.n	7112 <__aeabi_dadd+0x55a>
    7042:	43db      	mvns	r3, r3
    7044:	469a      	mov	sl, r3
    7046:	2b00      	cmp	r3, #0
    7048:	d01c      	beq.n	7084 <__aeabi_dadd+0x4cc>
    704a:	4e61      	ldr	r6, [pc, #388]	; (71d0 <__aeabi_dadd+0x618>)
    704c:	42b0      	cmp	r0, r6
    704e:	d060      	beq.n	7112 <__aeabi_dadd+0x55a>
    7050:	4653      	mov	r3, sl
    7052:	2b38      	cmp	r3, #56	; 0x38
    7054:	dd00      	ble.n	7058 <__aeabi_dadd+0x4a0>
    7056:	e096      	b.n	7186 <__aeabi_dadd+0x5ce>
    7058:	2b1f      	cmp	r3, #31
    705a:	dd00      	ble.n	705e <__aeabi_dadd+0x4a6>
    705c:	e09f      	b.n	719e <__aeabi_dadd+0x5e6>
    705e:	2620      	movs	r6, #32
    7060:	1af3      	subs	r3, r6, r3
    7062:	0026      	movs	r6, r4
    7064:	409e      	lsls	r6, r3
    7066:	469c      	mov	ip, r3
    7068:	46b3      	mov	fp, r6
    706a:	4653      	mov	r3, sl
    706c:	003e      	movs	r6, r7
    706e:	40de      	lsrs	r6, r3
    7070:	0033      	movs	r3, r6
    7072:	465e      	mov	r6, fp
    7074:	431e      	orrs	r6, r3
    7076:	4663      	mov	r3, ip
    7078:	409f      	lsls	r7, r3
    707a:	1e7b      	subs	r3, r7, #1
    707c:	419f      	sbcs	r7, r3
    707e:	4653      	mov	r3, sl
    7080:	40dc      	lsrs	r4, r3
    7082:	4337      	orrs	r7, r6
    7084:	18bf      	adds	r7, r7, r2
    7086:	4297      	cmp	r7, r2
    7088:	4192      	sbcs	r2, r2
    708a:	1864      	adds	r4, r4, r1
    708c:	4252      	negs	r2, r2
    708e:	18a4      	adds	r4, r4, r2
    7090:	0006      	movs	r6, r0
    7092:	e678      	b.n	6d86 <__aeabi_dadd+0x1ce>
    7094:	4327      	orrs	r7, r4
    7096:	1e7c      	subs	r4, r7, #1
    7098:	41a7      	sbcs	r7, r4
    709a:	2400      	movs	r4, #0
    709c:	e737      	b.n	6f0e <__aeabi_dadd+0x356>
    709e:	4e4c      	ldr	r6, [pc, #304]	; (71d0 <__aeabi_dadd+0x618>)
    70a0:	42b0      	cmp	r0, r6
    70a2:	d036      	beq.n	7112 <__aeabi_dadd+0x55a>
    70a4:	2680      	movs	r6, #128	; 0x80
    70a6:	425b      	negs	r3, r3
    70a8:	0436      	lsls	r6, r6, #16
    70aa:	469a      	mov	sl, r3
    70ac:	4334      	orrs	r4, r6
    70ae:	e7cf      	b.n	7050 <__aeabi_dadd+0x498>
    70b0:	0018      	movs	r0, r3
    70b2:	4310      	orrs	r0, r2
    70b4:	d100      	bne.n	70b8 <__aeabi_dadd+0x500>
    70b6:	e603      	b.n	6cc0 <__aeabi_dadd+0x108>
    70b8:	1ab8      	subs	r0, r7, r2
    70ba:	4684      	mov	ip, r0
    70bc:	4567      	cmp	r7, ip
    70be:	41ad      	sbcs	r5, r5
    70c0:	1ae0      	subs	r0, r4, r3
    70c2:	426d      	negs	r5, r5
    70c4:	1b40      	subs	r0, r0, r5
    70c6:	0205      	lsls	r5, r0, #8
    70c8:	d400      	bmi.n	70cc <__aeabi_dadd+0x514>
    70ca:	e62c      	b.n	6d26 <__aeabi_dadd+0x16e>
    70cc:	1bd7      	subs	r7, r2, r7
    70ce:	42ba      	cmp	r2, r7
    70d0:	4192      	sbcs	r2, r2
    70d2:	1b1c      	subs	r4, r3, r4
    70d4:	4252      	negs	r2, r2
    70d6:	1aa4      	subs	r4, r4, r2
    70d8:	46d8      	mov	r8, fp
    70da:	e5f1      	b.n	6cc0 <__aeabi_dadd+0x108>
    70dc:	0018      	movs	r0, r3
    70de:	4310      	orrs	r0, r2
    70e0:	d100      	bne.n	70e4 <__aeabi_dadd+0x52c>
    70e2:	e763      	b.n	6fac <__aeabi_dadd+0x3f4>
    70e4:	08f8      	lsrs	r0, r7, #3
    70e6:	0767      	lsls	r7, r4, #29
    70e8:	4307      	orrs	r7, r0
    70ea:	2080      	movs	r0, #128	; 0x80
    70ec:	08e4      	lsrs	r4, r4, #3
    70ee:	0300      	lsls	r0, r0, #12
    70f0:	4204      	tst	r4, r0
    70f2:	d008      	beq.n	7106 <__aeabi_dadd+0x54e>
    70f4:	08dd      	lsrs	r5, r3, #3
    70f6:	4205      	tst	r5, r0
    70f8:	d105      	bne.n	7106 <__aeabi_dadd+0x54e>
    70fa:	08d2      	lsrs	r2, r2, #3
    70fc:	0759      	lsls	r1, r3, #29
    70fe:	4311      	orrs	r1, r2
    7100:	000f      	movs	r7, r1
    7102:	002c      	movs	r4, r5
    7104:	46d8      	mov	r8, fp
    7106:	0f7b      	lsrs	r3, r7, #29
    7108:	00e4      	lsls	r4, r4, #3
    710a:	431c      	orrs	r4, r3
    710c:	00ff      	lsls	r7, r7, #3
    710e:	4e30      	ldr	r6, [pc, #192]	; (71d0 <__aeabi_dadd+0x618>)
    7110:	e5d6      	b.n	6cc0 <__aeabi_dadd+0x108>
    7112:	000c      	movs	r4, r1
    7114:	0017      	movs	r7, r2
    7116:	0006      	movs	r6, r0
    7118:	e5d2      	b.n	6cc0 <__aeabi_dadd+0x108>
    711a:	2b00      	cmp	r3, #0
    711c:	d038      	beq.n	7190 <__aeabi_dadd+0x5d8>
    711e:	000b      	movs	r3, r1
    7120:	4313      	orrs	r3, r2
    7122:	d100      	bne.n	7126 <__aeabi_dadd+0x56e>
    7124:	e742      	b.n	6fac <__aeabi_dadd+0x3f4>
    7126:	08f8      	lsrs	r0, r7, #3
    7128:	0767      	lsls	r7, r4, #29
    712a:	4307      	orrs	r7, r0
    712c:	2080      	movs	r0, #128	; 0x80
    712e:	08e4      	lsrs	r4, r4, #3
    7130:	0300      	lsls	r0, r0, #12
    7132:	4204      	tst	r4, r0
    7134:	d0e7      	beq.n	7106 <__aeabi_dadd+0x54e>
    7136:	08cb      	lsrs	r3, r1, #3
    7138:	4203      	tst	r3, r0
    713a:	d1e4      	bne.n	7106 <__aeabi_dadd+0x54e>
    713c:	08d2      	lsrs	r2, r2, #3
    713e:	0749      	lsls	r1, r1, #29
    7140:	4311      	orrs	r1, r2
    7142:	000f      	movs	r7, r1
    7144:	001c      	movs	r4, r3
    7146:	e7de      	b.n	7106 <__aeabi_dadd+0x54e>
    7148:	2700      	movs	r7, #0
    714a:	2400      	movs	r4, #0
    714c:	e5d5      	b.n	6cfa <__aeabi_dadd+0x142>
    714e:	2100      	movs	r1, #0
    7150:	e76b      	b.n	702a <__aeabi_dadd+0x472>
    7152:	2500      	movs	r5, #0
    7154:	2700      	movs	r7, #0
    7156:	e5f3      	b.n	6d40 <__aeabi_dadd+0x188>
    7158:	464e      	mov	r6, r9
    715a:	0025      	movs	r5, r4
    715c:	3e20      	subs	r6, #32
    715e:	40f5      	lsrs	r5, r6
    7160:	464b      	mov	r3, r9
    7162:	002e      	movs	r6, r5
    7164:	2b20      	cmp	r3, #32
    7166:	d02d      	beq.n	71c4 <__aeabi_dadd+0x60c>
    7168:	2540      	movs	r5, #64	; 0x40
    716a:	1aed      	subs	r5, r5, r3
    716c:	40ac      	lsls	r4, r5
    716e:	4327      	orrs	r7, r4
    7170:	1e7c      	subs	r4, r7, #1
    7172:	41a7      	sbcs	r7, r4
    7174:	2400      	movs	r4, #0
    7176:	4337      	orrs	r7, r6
    7178:	e6c9      	b.n	6f0e <__aeabi_dadd+0x356>
    717a:	2480      	movs	r4, #128	; 0x80
    717c:	2500      	movs	r5, #0
    717e:	0324      	lsls	r4, r4, #12
    7180:	4e13      	ldr	r6, [pc, #76]	; (71d0 <__aeabi_dadd+0x618>)
    7182:	2700      	movs	r7, #0
    7184:	e5dc      	b.n	6d40 <__aeabi_dadd+0x188>
    7186:	4327      	orrs	r7, r4
    7188:	1e7c      	subs	r4, r7, #1
    718a:	41a7      	sbcs	r7, r4
    718c:	2400      	movs	r4, #0
    718e:	e779      	b.n	7084 <__aeabi_dadd+0x4cc>
    7190:	000c      	movs	r4, r1
    7192:	0017      	movs	r7, r2
    7194:	4e0e      	ldr	r6, [pc, #56]	; (71d0 <__aeabi_dadd+0x618>)
    7196:	e593      	b.n	6cc0 <__aeabi_dadd+0x108>
    7198:	000c      	movs	r4, r1
    719a:	0017      	movs	r7, r2
    719c:	e590      	b.n	6cc0 <__aeabi_dadd+0x108>
    719e:	4656      	mov	r6, sl
    71a0:	0023      	movs	r3, r4
    71a2:	3e20      	subs	r6, #32
    71a4:	40f3      	lsrs	r3, r6
    71a6:	4699      	mov	r9, r3
    71a8:	4653      	mov	r3, sl
    71aa:	2b20      	cmp	r3, #32
    71ac:	d00e      	beq.n	71cc <__aeabi_dadd+0x614>
    71ae:	2340      	movs	r3, #64	; 0x40
    71b0:	4656      	mov	r6, sl
    71b2:	1b9b      	subs	r3, r3, r6
    71b4:	409c      	lsls	r4, r3
    71b6:	4327      	orrs	r7, r4
    71b8:	1e7c      	subs	r4, r7, #1
    71ba:	41a7      	sbcs	r7, r4
    71bc:	464b      	mov	r3, r9
    71be:	2400      	movs	r4, #0
    71c0:	431f      	orrs	r7, r3
    71c2:	e75f      	b.n	7084 <__aeabi_dadd+0x4cc>
    71c4:	2400      	movs	r4, #0
    71c6:	e7d2      	b.n	716e <__aeabi_dadd+0x5b6>
    71c8:	0017      	movs	r7, r2
    71ca:	e5b2      	b.n	6d32 <__aeabi_dadd+0x17a>
    71cc:	2400      	movs	r4, #0
    71ce:	e7f2      	b.n	71b6 <__aeabi_dadd+0x5fe>
    71d0:	000007ff 	.word	0x000007ff
    71d4:	ff7fffff 	.word	0xff7fffff

000071d8 <__aeabi_ddiv>:
    71d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    71da:	4657      	mov	r7, sl
    71dc:	4645      	mov	r5, r8
    71de:	46de      	mov	lr, fp
    71e0:	464e      	mov	r6, r9
    71e2:	b5e0      	push	{r5, r6, r7, lr}
    71e4:	004c      	lsls	r4, r1, #1
    71e6:	030e      	lsls	r6, r1, #12
    71e8:	b087      	sub	sp, #28
    71ea:	4683      	mov	fp, r0
    71ec:	4692      	mov	sl, r2
    71ee:	001d      	movs	r5, r3
    71f0:	4680      	mov	r8, r0
    71f2:	0b36      	lsrs	r6, r6, #12
    71f4:	0d64      	lsrs	r4, r4, #21
    71f6:	0fcf      	lsrs	r7, r1, #31
    71f8:	2c00      	cmp	r4, #0
    71fa:	d04f      	beq.n	729c <__aeabi_ddiv+0xc4>
    71fc:	4b6f      	ldr	r3, [pc, #444]	; (73bc <__aeabi_ddiv+0x1e4>)
    71fe:	429c      	cmp	r4, r3
    7200:	d035      	beq.n	726e <__aeabi_ddiv+0x96>
    7202:	2380      	movs	r3, #128	; 0x80
    7204:	0f42      	lsrs	r2, r0, #29
    7206:	041b      	lsls	r3, r3, #16
    7208:	00f6      	lsls	r6, r6, #3
    720a:	4313      	orrs	r3, r2
    720c:	4333      	orrs	r3, r6
    720e:	4699      	mov	r9, r3
    7210:	00c3      	lsls	r3, r0, #3
    7212:	4698      	mov	r8, r3
    7214:	4b6a      	ldr	r3, [pc, #424]	; (73c0 <__aeabi_ddiv+0x1e8>)
    7216:	2600      	movs	r6, #0
    7218:	469c      	mov	ip, r3
    721a:	2300      	movs	r3, #0
    721c:	4464      	add	r4, ip
    721e:	9303      	str	r3, [sp, #12]
    7220:	032b      	lsls	r3, r5, #12
    7222:	0b1b      	lsrs	r3, r3, #12
    7224:	469b      	mov	fp, r3
    7226:	006b      	lsls	r3, r5, #1
    7228:	0fed      	lsrs	r5, r5, #31
    722a:	4650      	mov	r0, sl
    722c:	0d5b      	lsrs	r3, r3, #21
    722e:	9501      	str	r5, [sp, #4]
    7230:	d05e      	beq.n	72f0 <__aeabi_ddiv+0x118>
    7232:	4a62      	ldr	r2, [pc, #392]	; (73bc <__aeabi_ddiv+0x1e4>)
    7234:	4293      	cmp	r3, r2
    7236:	d053      	beq.n	72e0 <__aeabi_ddiv+0x108>
    7238:	465a      	mov	r2, fp
    723a:	00d1      	lsls	r1, r2, #3
    723c:	2280      	movs	r2, #128	; 0x80
    723e:	0f40      	lsrs	r0, r0, #29
    7240:	0412      	lsls	r2, r2, #16
    7242:	4302      	orrs	r2, r0
    7244:	430a      	orrs	r2, r1
    7246:	4693      	mov	fp, r2
    7248:	4652      	mov	r2, sl
    724a:	00d1      	lsls	r1, r2, #3
    724c:	4a5c      	ldr	r2, [pc, #368]	; (73c0 <__aeabi_ddiv+0x1e8>)
    724e:	4694      	mov	ip, r2
    7250:	2200      	movs	r2, #0
    7252:	4463      	add	r3, ip
    7254:	0038      	movs	r0, r7
    7256:	4068      	eors	r0, r5
    7258:	4684      	mov	ip, r0
    725a:	9002      	str	r0, [sp, #8]
    725c:	1ae4      	subs	r4, r4, r3
    725e:	4316      	orrs	r6, r2
    7260:	2e0f      	cmp	r6, #15
    7262:	d900      	bls.n	7266 <__aeabi_ddiv+0x8e>
    7264:	e0b4      	b.n	73d0 <__aeabi_ddiv+0x1f8>
    7266:	4b57      	ldr	r3, [pc, #348]	; (73c4 <__aeabi_ddiv+0x1ec>)
    7268:	00b6      	lsls	r6, r6, #2
    726a:	599b      	ldr	r3, [r3, r6]
    726c:	469f      	mov	pc, r3
    726e:	0003      	movs	r3, r0
    7270:	4333      	orrs	r3, r6
    7272:	4699      	mov	r9, r3
    7274:	d16c      	bne.n	7350 <__aeabi_ddiv+0x178>
    7276:	2300      	movs	r3, #0
    7278:	4698      	mov	r8, r3
    727a:	3302      	adds	r3, #2
    727c:	2608      	movs	r6, #8
    727e:	9303      	str	r3, [sp, #12]
    7280:	e7ce      	b.n	7220 <__aeabi_ddiv+0x48>
    7282:	46cb      	mov	fp, r9
    7284:	4641      	mov	r1, r8
    7286:	9a03      	ldr	r2, [sp, #12]
    7288:	9701      	str	r7, [sp, #4]
    728a:	2a02      	cmp	r2, #2
    728c:	d165      	bne.n	735a <__aeabi_ddiv+0x182>
    728e:	9b01      	ldr	r3, [sp, #4]
    7290:	4c4a      	ldr	r4, [pc, #296]	; (73bc <__aeabi_ddiv+0x1e4>)
    7292:	469c      	mov	ip, r3
    7294:	2300      	movs	r3, #0
    7296:	2200      	movs	r2, #0
    7298:	4698      	mov	r8, r3
    729a:	e06b      	b.n	7374 <__aeabi_ddiv+0x19c>
    729c:	0003      	movs	r3, r0
    729e:	4333      	orrs	r3, r6
    72a0:	4699      	mov	r9, r3
    72a2:	d04e      	beq.n	7342 <__aeabi_ddiv+0x16a>
    72a4:	2e00      	cmp	r6, #0
    72a6:	d100      	bne.n	72aa <__aeabi_ddiv+0xd2>
    72a8:	e1bc      	b.n	7624 <__aeabi_ddiv+0x44c>
    72aa:	0030      	movs	r0, r6
    72ac:	f001 fb08 	bl	88c0 <__clzsi2>
    72b0:	0003      	movs	r3, r0
    72b2:	3b0b      	subs	r3, #11
    72b4:	2b1c      	cmp	r3, #28
    72b6:	dd00      	ble.n	72ba <__aeabi_ddiv+0xe2>
    72b8:	e1ac      	b.n	7614 <__aeabi_ddiv+0x43c>
    72ba:	221d      	movs	r2, #29
    72bc:	1ad3      	subs	r3, r2, r3
    72be:	465a      	mov	r2, fp
    72c0:	0001      	movs	r1, r0
    72c2:	40da      	lsrs	r2, r3
    72c4:	3908      	subs	r1, #8
    72c6:	408e      	lsls	r6, r1
    72c8:	0013      	movs	r3, r2
    72ca:	4333      	orrs	r3, r6
    72cc:	4699      	mov	r9, r3
    72ce:	465b      	mov	r3, fp
    72d0:	408b      	lsls	r3, r1
    72d2:	4698      	mov	r8, r3
    72d4:	2300      	movs	r3, #0
    72d6:	4c3c      	ldr	r4, [pc, #240]	; (73c8 <__aeabi_ddiv+0x1f0>)
    72d8:	2600      	movs	r6, #0
    72da:	1a24      	subs	r4, r4, r0
    72dc:	9303      	str	r3, [sp, #12]
    72de:	e79f      	b.n	7220 <__aeabi_ddiv+0x48>
    72e0:	4651      	mov	r1, sl
    72e2:	465a      	mov	r2, fp
    72e4:	4311      	orrs	r1, r2
    72e6:	d129      	bne.n	733c <__aeabi_ddiv+0x164>
    72e8:	2200      	movs	r2, #0
    72ea:	4693      	mov	fp, r2
    72ec:	3202      	adds	r2, #2
    72ee:	e7b1      	b.n	7254 <__aeabi_ddiv+0x7c>
    72f0:	4659      	mov	r1, fp
    72f2:	4301      	orrs	r1, r0
    72f4:	d01e      	beq.n	7334 <__aeabi_ddiv+0x15c>
    72f6:	465b      	mov	r3, fp
    72f8:	2b00      	cmp	r3, #0
    72fa:	d100      	bne.n	72fe <__aeabi_ddiv+0x126>
    72fc:	e19e      	b.n	763c <__aeabi_ddiv+0x464>
    72fe:	4658      	mov	r0, fp
    7300:	f001 fade 	bl	88c0 <__clzsi2>
    7304:	0003      	movs	r3, r0
    7306:	3b0b      	subs	r3, #11
    7308:	2b1c      	cmp	r3, #28
    730a:	dd00      	ble.n	730e <__aeabi_ddiv+0x136>
    730c:	e18f      	b.n	762e <__aeabi_ddiv+0x456>
    730e:	0002      	movs	r2, r0
    7310:	4659      	mov	r1, fp
    7312:	3a08      	subs	r2, #8
    7314:	4091      	lsls	r1, r2
    7316:	468b      	mov	fp, r1
    7318:	211d      	movs	r1, #29
    731a:	1acb      	subs	r3, r1, r3
    731c:	4651      	mov	r1, sl
    731e:	40d9      	lsrs	r1, r3
    7320:	000b      	movs	r3, r1
    7322:	4659      	mov	r1, fp
    7324:	430b      	orrs	r3, r1
    7326:	4651      	mov	r1, sl
    7328:	469b      	mov	fp, r3
    732a:	4091      	lsls	r1, r2
    732c:	4b26      	ldr	r3, [pc, #152]	; (73c8 <__aeabi_ddiv+0x1f0>)
    732e:	2200      	movs	r2, #0
    7330:	1a1b      	subs	r3, r3, r0
    7332:	e78f      	b.n	7254 <__aeabi_ddiv+0x7c>
    7334:	2300      	movs	r3, #0
    7336:	2201      	movs	r2, #1
    7338:	469b      	mov	fp, r3
    733a:	e78b      	b.n	7254 <__aeabi_ddiv+0x7c>
    733c:	4651      	mov	r1, sl
    733e:	2203      	movs	r2, #3
    7340:	e788      	b.n	7254 <__aeabi_ddiv+0x7c>
    7342:	2300      	movs	r3, #0
    7344:	4698      	mov	r8, r3
    7346:	3301      	adds	r3, #1
    7348:	2604      	movs	r6, #4
    734a:	2400      	movs	r4, #0
    734c:	9303      	str	r3, [sp, #12]
    734e:	e767      	b.n	7220 <__aeabi_ddiv+0x48>
    7350:	2303      	movs	r3, #3
    7352:	46b1      	mov	r9, r6
    7354:	9303      	str	r3, [sp, #12]
    7356:	260c      	movs	r6, #12
    7358:	e762      	b.n	7220 <__aeabi_ddiv+0x48>
    735a:	2a03      	cmp	r2, #3
    735c:	d100      	bne.n	7360 <__aeabi_ddiv+0x188>
    735e:	e25c      	b.n	781a <__aeabi_ddiv+0x642>
    7360:	9b01      	ldr	r3, [sp, #4]
    7362:	2a01      	cmp	r2, #1
    7364:	d000      	beq.n	7368 <__aeabi_ddiv+0x190>
    7366:	e1e4      	b.n	7732 <__aeabi_ddiv+0x55a>
    7368:	4013      	ands	r3, r2
    736a:	469c      	mov	ip, r3
    736c:	2300      	movs	r3, #0
    736e:	2400      	movs	r4, #0
    7370:	2200      	movs	r2, #0
    7372:	4698      	mov	r8, r3
    7374:	2100      	movs	r1, #0
    7376:	0312      	lsls	r2, r2, #12
    7378:	0b13      	lsrs	r3, r2, #12
    737a:	0d0a      	lsrs	r2, r1, #20
    737c:	0512      	lsls	r2, r2, #20
    737e:	431a      	orrs	r2, r3
    7380:	0523      	lsls	r3, r4, #20
    7382:	4c12      	ldr	r4, [pc, #72]	; (73cc <__aeabi_ddiv+0x1f4>)
    7384:	4640      	mov	r0, r8
    7386:	4022      	ands	r2, r4
    7388:	4313      	orrs	r3, r2
    738a:	4662      	mov	r2, ip
    738c:	005b      	lsls	r3, r3, #1
    738e:	07d2      	lsls	r2, r2, #31
    7390:	085b      	lsrs	r3, r3, #1
    7392:	4313      	orrs	r3, r2
    7394:	0019      	movs	r1, r3
    7396:	b007      	add	sp, #28
    7398:	bc3c      	pop	{r2, r3, r4, r5}
    739a:	4690      	mov	r8, r2
    739c:	4699      	mov	r9, r3
    739e:	46a2      	mov	sl, r4
    73a0:	46ab      	mov	fp, r5
    73a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73a4:	2300      	movs	r3, #0
    73a6:	2280      	movs	r2, #128	; 0x80
    73a8:	469c      	mov	ip, r3
    73aa:	0312      	lsls	r2, r2, #12
    73ac:	4698      	mov	r8, r3
    73ae:	4c03      	ldr	r4, [pc, #12]	; (73bc <__aeabi_ddiv+0x1e4>)
    73b0:	e7e0      	b.n	7374 <__aeabi_ddiv+0x19c>
    73b2:	2300      	movs	r3, #0
    73b4:	4c01      	ldr	r4, [pc, #4]	; (73bc <__aeabi_ddiv+0x1e4>)
    73b6:	2200      	movs	r2, #0
    73b8:	4698      	mov	r8, r3
    73ba:	e7db      	b.n	7374 <__aeabi_ddiv+0x19c>
    73bc:	000007ff 	.word	0x000007ff
    73c0:	fffffc01 	.word	0xfffffc01
    73c4:	00009780 	.word	0x00009780
    73c8:	fffffc0d 	.word	0xfffffc0d
    73cc:	800fffff 	.word	0x800fffff
    73d0:	45d9      	cmp	r9, fp
    73d2:	d900      	bls.n	73d6 <__aeabi_ddiv+0x1fe>
    73d4:	e139      	b.n	764a <__aeabi_ddiv+0x472>
    73d6:	d100      	bne.n	73da <__aeabi_ddiv+0x202>
    73d8:	e134      	b.n	7644 <__aeabi_ddiv+0x46c>
    73da:	2300      	movs	r3, #0
    73dc:	4646      	mov	r6, r8
    73de:	464d      	mov	r5, r9
    73e0:	469a      	mov	sl, r3
    73e2:	3c01      	subs	r4, #1
    73e4:	465b      	mov	r3, fp
    73e6:	0e0a      	lsrs	r2, r1, #24
    73e8:	021b      	lsls	r3, r3, #8
    73ea:	431a      	orrs	r2, r3
    73ec:	020b      	lsls	r3, r1, #8
    73ee:	0c17      	lsrs	r7, r2, #16
    73f0:	9303      	str	r3, [sp, #12]
    73f2:	0413      	lsls	r3, r2, #16
    73f4:	0c1b      	lsrs	r3, r3, #16
    73f6:	0039      	movs	r1, r7
    73f8:	0028      	movs	r0, r5
    73fa:	4690      	mov	r8, r2
    73fc:	9301      	str	r3, [sp, #4]
    73fe:	f7fe ff45 	bl	628c <__udivsi3>
    7402:	0002      	movs	r2, r0
    7404:	9b01      	ldr	r3, [sp, #4]
    7406:	4683      	mov	fp, r0
    7408:	435a      	muls	r2, r3
    740a:	0028      	movs	r0, r5
    740c:	0039      	movs	r1, r7
    740e:	4691      	mov	r9, r2
    7410:	f7fe ffc2 	bl	6398 <__aeabi_uidivmod>
    7414:	0c35      	lsrs	r5, r6, #16
    7416:	0409      	lsls	r1, r1, #16
    7418:	430d      	orrs	r5, r1
    741a:	45a9      	cmp	r9, r5
    741c:	d90d      	bls.n	743a <__aeabi_ddiv+0x262>
    741e:	465b      	mov	r3, fp
    7420:	4445      	add	r5, r8
    7422:	3b01      	subs	r3, #1
    7424:	45a8      	cmp	r8, r5
    7426:	d900      	bls.n	742a <__aeabi_ddiv+0x252>
    7428:	e13a      	b.n	76a0 <__aeabi_ddiv+0x4c8>
    742a:	45a9      	cmp	r9, r5
    742c:	d800      	bhi.n	7430 <__aeabi_ddiv+0x258>
    742e:	e137      	b.n	76a0 <__aeabi_ddiv+0x4c8>
    7430:	2302      	movs	r3, #2
    7432:	425b      	negs	r3, r3
    7434:	469c      	mov	ip, r3
    7436:	4445      	add	r5, r8
    7438:	44e3      	add	fp, ip
    743a:	464b      	mov	r3, r9
    743c:	1aeb      	subs	r3, r5, r3
    743e:	0039      	movs	r1, r7
    7440:	0018      	movs	r0, r3
    7442:	9304      	str	r3, [sp, #16]
    7444:	f7fe ff22 	bl	628c <__udivsi3>
    7448:	9b01      	ldr	r3, [sp, #4]
    744a:	0005      	movs	r5, r0
    744c:	4343      	muls	r3, r0
    744e:	0039      	movs	r1, r7
    7450:	9804      	ldr	r0, [sp, #16]
    7452:	4699      	mov	r9, r3
    7454:	f7fe ffa0 	bl	6398 <__aeabi_uidivmod>
    7458:	0433      	lsls	r3, r6, #16
    745a:	0409      	lsls	r1, r1, #16
    745c:	0c1b      	lsrs	r3, r3, #16
    745e:	430b      	orrs	r3, r1
    7460:	4599      	cmp	r9, r3
    7462:	d909      	bls.n	7478 <__aeabi_ddiv+0x2a0>
    7464:	4443      	add	r3, r8
    7466:	1e6a      	subs	r2, r5, #1
    7468:	4598      	cmp	r8, r3
    746a:	d900      	bls.n	746e <__aeabi_ddiv+0x296>
    746c:	e11a      	b.n	76a4 <__aeabi_ddiv+0x4cc>
    746e:	4599      	cmp	r9, r3
    7470:	d800      	bhi.n	7474 <__aeabi_ddiv+0x29c>
    7472:	e117      	b.n	76a4 <__aeabi_ddiv+0x4cc>
    7474:	3d02      	subs	r5, #2
    7476:	4443      	add	r3, r8
    7478:	464a      	mov	r2, r9
    747a:	1a9b      	subs	r3, r3, r2
    747c:	465a      	mov	r2, fp
    747e:	0412      	lsls	r2, r2, #16
    7480:	432a      	orrs	r2, r5
    7482:	9903      	ldr	r1, [sp, #12]
    7484:	4693      	mov	fp, r2
    7486:	0c10      	lsrs	r0, r2, #16
    7488:	0c0a      	lsrs	r2, r1, #16
    748a:	4691      	mov	r9, r2
    748c:	0409      	lsls	r1, r1, #16
    748e:	465a      	mov	r2, fp
    7490:	0c09      	lsrs	r1, r1, #16
    7492:	464e      	mov	r6, r9
    7494:	000d      	movs	r5, r1
    7496:	0412      	lsls	r2, r2, #16
    7498:	0c12      	lsrs	r2, r2, #16
    749a:	4345      	muls	r5, r0
    749c:	9105      	str	r1, [sp, #20]
    749e:	4351      	muls	r1, r2
    74a0:	4372      	muls	r2, r6
    74a2:	4370      	muls	r0, r6
    74a4:	1952      	adds	r2, r2, r5
    74a6:	0c0e      	lsrs	r6, r1, #16
    74a8:	18b2      	adds	r2, r6, r2
    74aa:	4295      	cmp	r5, r2
    74ac:	d903      	bls.n	74b6 <__aeabi_ddiv+0x2de>
    74ae:	2580      	movs	r5, #128	; 0x80
    74b0:	026d      	lsls	r5, r5, #9
    74b2:	46ac      	mov	ip, r5
    74b4:	4460      	add	r0, ip
    74b6:	0c15      	lsrs	r5, r2, #16
    74b8:	0409      	lsls	r1, r1, #16
    74ba:	0412      	lsls	r2, r2, #16
    74bc:	0c09      	lsrs	r1, r1, #16
    74be:	1828      	adds	r0, r5, r0
    74c0:	1852      	adds	r2, r2, r1
    74c2:	4283      	cmp	r3, r0
    74c4:	d200      	bcs.n	74c8 <__aeabi_ddiv+0x2f0>
    74c6:	e0ce      	b.n	7666 <__aeabi_ddiv+0x48e>
    74c8:	d100      	bne.n	74cc <__aeabi_ddiv+0x2f4>
    74ca:	e0c8      	b.n	765e <__aeabi_ddiv+0x486>
    74cc:	1a1d      	subs	r5, r3, r0
    74ce:	4653      	mov	r3, sl
    74d0:	1a9e      	subs	r6, r3, r2
    74d2:	45b2      	cmp	sl, r6
    74d4:	4192      	sbcs	r2, r2
    74d6:	4252      	negs	r2, r2
    74d8:	1aab      	subs	r3, r5, r2
    74da:	469a      	mov	sl, r3
    74dc:	4598      	cmp	r8, r3
    74de:	d100      	bne.n	74e2 <__aeabi_ddiv+0x30a>
    74e0:	e117      	b.n	7712 <__aeabi_ddiv+0x53a>
    74e2:	0039      	movs	r1, r7
    74e4:	0018      	movs	r0, r3
    74e6:	f7fe fed1 	bl	628c <__udivsi3>
    74ea:	9b01      	ldr	r3, [sp, #4]
    74ec:	0005      	movs	r5, r0
    74ee:	4343      	muls	r3, r0
    74f0:	0039      	movs	r1, r7
    74f2:	4650      	mov	r0, sl
    74f4:	9304      	str	r3, [sp, #16]
    74f6:	f7fe ff4f 	bl	6398 <__aeabi_uidivmod>
    74fa:	9804      	ldr	r0, [sp, #16]
    74fc:	040b      	lsls	r3, r1, #16
    74fe:	0c31      	lsrs	r1, r6, #16
    7500:	4319      	orrs	r1, r3
    7502:	4288      	cmp	r0, r1
    7504:	d909      	bls.n	751a <__aeabi_ddiv+0x342>
    7506:	4441      	add	r1, r8
    7508:	1e6b      	subs	r3, r5, #1
    750a:	4588      	cmp	r8, r1
    750c:	d900      	bls.n	7510 <__aeabi_ddiv+0x338>
    750e:	e107      	b.n	7720 <__aeabi_ddiv+0x548>
    7510:	4288      	cmp	r0, r1
    7512:	d800      	bhi.n	7516 <__aeabi_ddiv+0x33e>
    7514:	e104      	b.n	7720 <__aeabi_ddiv+0x548>
    7516:	3d02      	subs	r5, #2
    7518:	4441      	add	r1, r8
    751a:	9b04      	ldr	r3, [sp, #16]
    751c:	1acb      	subs	r3, r1, r3
    751e:	0018      	movs	r0, r3
    7520:	0039      	movs	r1, r7
    7522:	9304      	str	r3, [sp, #16]
    7524:	f7fe feb2 	bl	628c <__udivsi3>
    7528:	9b01      	ldr	r3, [sp, #4]
    752a:	4682      	mov	sl, r0
    752c:	4343      	muls	r3, r0
    752e:	0039      	movs	r1, r7
    7530:	9804      	ldr	r0, [sp, #16]
    7532:	9301      	str	r3, [sp, #4]
    7534:	f7fe ff30 	bl	6398 <__aeabi_uidivmod>
    7538:	9801      	ldr	r0, [sp, #4]
    753a:	040b      	lsls	r3, r1, #16
    753c:	0431      	lsls	r1, r6, #16
    753e:	0c09      	lsrs	r1, r1, #16
    7540:	4319      	orrs	r1, r3
    7542:	4288      	cmp	r0, r1
    7544:	d90d      	bls.n	7562 <__aeabi_ddiv+0x38a>
    7546:	4653      	mov	r3, sl
    7548:	4441      	add	r1, r8
    754a:	3b01      	subs	r3, #1
    754c:	4588      	cmp	r8, r1
    754e:	d900      	bls.n	7552 <__aeabi_ddiv+0x37a>
    7550:	e0e8      	b.n	7724 <__aeabi_ddiv+0x54c>
    7552:	4288      	cmp	r0, r1
    7554:	d800      	bhi.n	7558 <__aeabi_ddiv+0x380>
    7556:	e0e5      	b.n	7724 <__aeabi_ddiv+0x54c>
    7558:	2302      	movs	r3, #2
    755a:	425b      	negs	r3, r3
    755c:	469c      	mov	ip, r3
    755e:	4441      	add	r1, r8
    7560:	44e2      	add	sl, ip
    7562:	9b01      	ldr	r3, [sp, #4]
    7564:	042d      	lsls	r5, r5, #16
    7566:	1ace      	subs	r6, r1, r3
    7568:	4651      	mov	r1, sl
    756a:	4329      	orrs	r1, r5
    756c:	9d05      	ldr	r5, [sp, #20]
    756e:	464f      	mov	r7, r9
    7570:	002a      	movs	r2, r5
    7572:	040b      	lsls	r3, r1, #16
    7574:	0c08      	lsrs	r0, r1, #16
    7576:	0c1b      	lsrs	r3, r3, #16
    7578:	435a      	muls	r2, r3
    757a:	4345      	muls	r5, r0
    757c:	437b      	muls	r3, r7
    757e:	4378      	muls	r0, r7
    7580:	195b      	adds	r3, r3, r5
    7582:	0c17      	lsrs	r7, r2, #16
    7584:	18fb      	adds	r3, r7, r3
    7586:	429d      	cmp	r5, r3
    7588:	d903      	bls.n	7592 <__aeabi_ddiv+0x3ba>
    758a:	2580      	movs	r5, #128	; 0x80
    758c:	026d      	lsls	r5, r5, #9
    758e:	46ac      	mov	ip, r5
    7590:	4460      	add	r0, ip
    7592:	0c1d      	lsrs	r5, r3, #16
    7594:	0412      	lsls	r2, r2, #16
    7596:	041b      	lsls	r3, r3, #16
    7598:	0c12      	lsrs	r2, r2, #16
    759a:	1828      	adds	r0, r5, r0
    759c:	189b      	adds	r3, r3, r2
    759e:	4286      	cmp	r6, r0
    75a0:	d200      	bcs.n	75a4 <__aeabi_ddiv+0x3cc>
    75a2:	e093      	b.n	76cc <__aeabi_ddiv+0x4f4>
    75a4:	d100      	bne.n	75a8 <__aeabi_ddiv+0x3d0>
    75a6:	e08e      	b.n	76c6 <__aeabi_ddiv+0x4ee>
    75a8:	2301      	movs	r3, #1
    75aa:	4319      	orrs	r1, r3
    75ac:	4ba0      	ldr	r3, [pc, #640]	; (7830 <__aeabi_ddiv+0x658>)
    75ae:	18e3      	adds	r3, r4, r3
    75b0:	2b00      	cmp	r3, #0
    75b2:	dc00      	bgt.n	75b6 <__aeabi_ddiv+0x3de>
    75b4:	e099      	b.n	76ea <__aeabi_ddiv+0x512>
    75b6:	074a      	lsls	r2, r1, #29
    75b8:	d000      	beq.n	75bc <__aeabi_ddiv+0x3e4>
    75ba:	e09e      	b.n	76fa <__aeabi_ddiv+0x522>
    75bc:	465a      	mov	r2, fp
    75be:	01d2      	lsls	r2, r2, #7
    75c0:	d506      	bpl.n	75d0 <__aeabi_ddiv+0x3f8>
    75c2:	465a      	mov	r2, fp
    75c4:	4b9b      	ldr	r3, [pc, #620]	; (7834 <__aeabi_ddiv+0x65c>)
    75c6:	401a      	ands	r2, r3
    75c8:	2380      	movs	r3, #128	; 0x80
    75ca:	4693      	mov	fp, r2
    75cc:	00db      	lsls	r3, r3, #3
    75ce:	18e3      	adds	r3, r4, r3
    75d0:	4a99      	ldr	r2, [pc, #612]	; (7838 <__aeabi_ddiv+0x660>)
    75d2:	4293      	cmp	r3, r2
    75d4:	dd68      	ble.n	76a8 <__aeabi_ddiv+0x4d0>
    75d6:	2301      	movs	r3, #1
    75d8:	9a02      	ldr	r2, [sp, #8]
    75da:	4c98      	ldr	r4, [pc, #608]	; (783c <__aeabi_ddiv+0x664>)
    75dc:	401a      	ands	r2, r3
    75de:	2300      	movs	r3, #0
    75e0:	4694      	mov	ip, r2
    75e2:	4698      	mov	r8, r3
    75e4:	2200      	movs	r2, #0
    75e6:	e6c5      	b.n	7374 <__aeabi_ddiv+0x19c>
    75e8:	2280      	movs	r2, #128	; 0x80
    75ea:	464b      	mov	r3, r9
    75ec:	0312      	lsls	r2, r2, #12
    75ee:	4213      	tst	r3, r2
    75f0:	d00a      	beq.n	7608 <__aeabi_ddiv+0x430>
    75f2:	465b      	mov	r3, fp
    75f4:	4213      	tst	r3, r2
    75f6:	d106      	bne.n	7606 <__aeabi_ddiv+0x42e>
    75f8:	431a      	orrs	r2, r3
    75fa:	0312      	lsls	r2, r2, #12
    75fc:	0b12      	lsrs	r2, r2, #12
    75fe:	46ac      	mov	ip, r5
    7600:	4688      	mov	r8, r1
    7602:	4c8e      	ldr	r4, [pc, #568]	; (783c <__aeabi_ddiv+0x664>)
    7604:	e6b6      	b.n	7374 <__aeabi_ddiv+0x19c>
    7606:	464b      	mov	r3, r9
    7608:	431a      	orrs	r2, r3
    760a:	0312      	lsls	r2, r2, #12
    760c:	0b12      	lsrs	r2, r2, #12
    760e:	46bc      	mov	ip, r7
    7610:	4c8a      	ldr	r4, [pc, #552]	; (783c <__aeabi_ddiv+0x664>)
    7612:	e6af      	b.n	7374 <__aeabi_ddiv+0x19c>
    7614:	0003      	movs	r3, r0
    7616:	465a      	mov	r2, fp
    7618:	3b28      	subs	r3, #40	; 0x28
    761a:	409a      	lsls	r2, r3
    761c:	2300      	movs	r3, #0
    761e:	4691      	mov	r9, r2
    7620:	4698      	mov	r8, r3
    7622:	e657      	b.n	72d4 <__aeabi_ddiv+0xfc>
    7624:	4658      	mov	r0, fp
    7626:	f001 f94b 	bl	88c0 <__clzsi2>
    762a:	3020      	adds	r0, #32
    762c:	e640      	b.n	72b0 <__aeabi_ddiv+0xd8>
    762e:	0003      	movs	r3, r0
    7630:	4652      	mov	r2, sl
    7632:	3b28      	subs	r3, #40	; 0x28
    7634:	409a      	lsls	r2, r3
    7636:	2100      	movs	r1, #0
    7638:	4693      	mov	fp, r2
    763a:	e677      	b.n	732c <__aeabi_ddiv+0x154>
    763c:	f001 f940 	bl	88c0 <__clzsi2>
    7640:	3020      	adds	r0, #32
    7642:	e65f      	b.n	7304 <__aeabi_ddiv+0x12c>
    7644:	4588      	cmp	r8, r1
    7646:	d200      	bcs.n	764a <__aeabi_ddiv+0x472>
    7648:	e6c7      	b.n	73da <__aeabi_ddiv+0x202>
    764a:	464b      	mov	r3, r9
    764c:	07de      	lsls	r6, r3, #31
    764e:	085d      	lsrs	r5, r3, #1
    7650:	4643      	mov	r3, r8
    7652:	085b      	lsrs	r3, r3, #1
    7654:	431e      	orrs	r6, r3
    7656:	4643      	mov	r3, r8
    7658:	07db      	lsls	r3, r3, #31
    765a:	469a      	mov	sl, r3
    765c:	e6c2      	b.n	73e4 <__aeabi_ddiv+0x20c>
    765e:	2500      	movs	r5, #0
    7660:	4592      	cmp	sl, r2
    7662:	d300      	bcc.n	7666 <__aeabi_ddiv+0x48e>
    7664:	e733      	b.n	74ce <__aeabi_ddiv+0x2f6>
    7666:	9e03      	ldr	r6, [sp, #12]
    7668:	4659      	mov	r1, fp
    766a:	46b4      	mov	ip, r6
    766c:	44e2      	add	sl, ip
    766e:	45b2      	cmp	sl, r6
    7670:	41ad      	sbcs	r5, r5
    7672:	426d      	negs	r5, r5
    7674:	4445      	add	r5, r8
    7676:	18eb      	adds	r3, r5, r3
    7678:	3901      	subs	r1, #1
    767a:	4598      	cmp	r8, r3
    767c:	d207      	bcs.n	768e <__aeabi_ddiv+0x4b6>
    767e:	4298      	cmp	r0, r3
    7680:	d900      	bls.n	7684 <__aeabi_ddiv+0x4ac>
    7682:	e07f      	b.n	7784 <__aeabi_ddiv+0x5ac>
    7684:	d100      	bne.n	7688 <__aeabi_ddiv+0x4b0>
    7686:	e0bc      	b.n	7802 <__aeabi_ddiv+0x62a>
    7688:	1a1d      	subs	r5, r3, r0
    768a:	468b      	mov	fp, r1
    768c:	e71f      	b.n	74ce <__aeabi_ddiv+0x2f6>
    768e:	4598      	cmp	r8, r3
    7690:	d1fa      	bne.n	7688 <__aeabi_ddiv+0x4b0>
    7692:	9d03      	ldr	r5, [sp, #12]
    7694:	4555      	cmp	r5, sl
    7696:	d9f2      	bls.n	767e <__aeabi_ddiv+0x4a6>
    7698:	4643      	mov	r3, r8
    769a:	468b      	mov	fp, r1
    769c:	1a1d      	subs	r5, r3, r0
    769e:	e716      	b.n	74ce <__aeabi_ddiv+0x2f6>
    76a0:	469b      	mov	fp, r3
    76a2:	e6ca      	b.n	743a <__aeabi_ddiv+0x262>
    76a4:	0015      	movs	r5, r2
    76a6:	e6e7      	b.n	7478 <__aeabi_ddiv+0x2a0>
    76a8:	465a      	mov	r2, fp
    76aa:	08c9      	lsrs	r1, r1, #3
    76ac:	0752      	lsls	r2, r2, #29
    76ae:	430a      	orrs	r2, r1
    76b0:	055b      	lsls	r3, r3, #21
    76b2:	4690      	mov	r8, r2
    76b4:	0d5c      	lsrs	r4, r3, #21
    76b6:	465a      	mov	r2, fp
    76b8:	2301      	movs	r3, #1
    76ba:	9902      	ldr	r1, [sp, #8]
    76bc:	0252      	lsls	r2, r2, #9
    76be:	4019      	ands	r1, r3
    76c0:	0b12      	lsrs	r2, r2, #12
    76c2:	468c      	mov	ip, r1
    76c4:	e656      	b.n	7374 <__aeabi_ddiv+0x19c>
    76c6:	2b00      	cmp	r3, #0
    76c8:	d100      	bne.n	76cc <__aeabi_ddiv+0x4f4>
    76ca:	e76f      	b.n	75ac <__aeabi_ddiv+0x3d4>
    76cc:	4446      	add	r6, r8
    76ce:	1e4a      	subs	r2, r1, #1
    76d0:	45b0      	cmp	r8, r6
    76d2:	d929      	bls.n	7728 <__aeabi_ddiv+0x550>
    76d4:	0011      	movs	r1, r2
    76d6:	4286      	cmp	r6, r0
    76d8:	d000      	beq.n	76dc <__aeabi_ddiv+0x504>
    76da:	e765      	b.n	75a8 <__aeabi_ddiv+0x3d0>
    76dc:	9a03      	ldr	r2, [sp, #12]
    76de:	4293      	cmp	r3, r2
    76e0:	d000      	beq.n	76e4 <__aeabi_ddiv+0x50c>
    76e2:	e761      	b.n	75a8 <__aeabi_ddiv+0x3d0>
    76e4:	e762      	b.n	75ac <__aeabi_ddiv+0x3d4>
    76e6:	2101      	movs	r1, #1
    76e8:	4249      	negs	r1, r1
    76ea:	2001      	movs	r0, #1
    76ec:	1ac2      	subs	r2, r0, r3
    76ee:	2a38      	cmp	r2, #56	; 0x38
    76f0:	dd21      	ble.n	7736 <__aeabi_ddiv+0x55e>
    76f2:	9b02      	ldr	r3, [sp, #8]
    76f4:	4003      	ands	r3, r0
    76f6:	469c      	mov	ip, r3
    76f8:	e638      	b.n	736c <__aeabi_ddiv+0x194>
    76fa:	220f      	movs	r2, #15
    76fc:	400a      	ands	r2, r1
    76fe:	2a04      	cmp	r2, #4
    7700:	d100      	bne.n	7704 <__aeabi_ddiv+0x52c>
    7702:	e75b      	b.n	75bc <__aeabi_ddiv+0x3e4>
    7704:	000a      	movs	r2, r1
    7706:	1d11      	adds	r1, r2, #4
    7708:	4291      	cmp	r1, r2
    770a:	4192      	sbcs	r2, r2
    770c:	4252      	negs	r2, r2
    770e:	4493      	add	fp, r2
    7710:	e754      	b.n	75bc <__aeabi_ddiv+0x3e4>
    7712:	4b47      	ldr	r3, [pc, #284]	; (7830 <__aeabi_ddiv+0x658>)
    7714:	18e3      	adds	r3, r4, r3
    7716:	2b00      	cmp	r3, #0
    7718:	dde5      	ble.n	76e6 <__aeabi_ddiv+0x50e>
    771a:	2201      	movs	r2, #1
    771c:	4252      	negs	r2, r2
    771e:	e7f2      	b.n	7706 <__aeabi_ddiv+0x52e>
    7720:	001d      	movs	r5, r3
    7722:	e6fa      	b.n	751a <__aeabi_ddiv+0x342>
    7724:	469a      	mov	sl, r3
    7726:	e71c      	b.n	7562 <__aeabi_ddiv+0x38a>
    7728:	42b0      	cmp	r0, r6
    772a:	d839      	bhi.n	77a0 <__aeabi_ddiv+0x5c8>
    772c:	d06e      	beq.n	780c <__aeabi_ddiv+0x634>
    772e:	0011      	movs	r1, r2
    7730:	e73a      	b.n	75a8 <__aeabi_ddiv+0x3d0>
    7732:	9302      	str	r3, [sp, #8]
    7734:	e73a      	b.n	75ac <__aeabi_ddiv+0x3d4>
    7736:	2a1f      	cmp	r2, #31
    7738:	dc3c      	bgt.n	77b4 <__aeabi_ddiv+0x5dc>
    773a:	2320      	movs	r3, #32
    773c:	1a9b      	subs	r3, r3, r2
    773e:	000c      	movs	r4, r1
    7740:	4658      	mov	r0, fp
    7742:	4099      	lsls	r1, r3
    7744:	4098      	lsls	r0, r3
    7746:	1e4b      	subs	r3, r1, #1
    7748:	4199      	sbcs	r1, r3
    774a:	465b      	mov	r3, fp
    774c:	40d4      	lsrs	r4, r2
    774e:	40d3      	lsrs	r3, r2
    7750:	4320      	orrs	r0, r4
    7752:	4308      	orrs	r0, r1
    7754:	001a      	movs	r2, r3
    7756:	0743      	lsls	r3, r0, #29
    7758:	d009      	beq.n	776e <__aeabi_ddiv+0x596>
    775a:	230f      	movs	r3, #15
    775c:	4003      	ands	r3, r0
    775e:	2b04      	cmp	r3, #4
    7760:	d005      	beq.n	776e <__aeabi_ddiv+0x596>
    7762:	0001      	movs	r1, r0
    7764:	1d08      	adds	r0, r1, #4
    7766:	4288      	cmp	r0, r1
    7768:	419b      	sbcs	r3, r3
    776a:	425b      	negs	r3, r3
    776c:	18d2      	adds	r2, r2, r3
    776e:	0213      	lsls	r3, r2, #8
    7770:	d53a      	bpl.n	77e8 <__aeabi_ddiv+0x610>
    7772:	2301      	movs	r3, #1
    7774:	9a02      	ldr	r2, [sp, #8]
    7776:	2401      	movs	r4, #1
    7778:	401a      	ands	r2, r3
    777a:	2300      	movs	r3, #0
    777c:	4694      	mov	ip, r2
    777e:	4698      	mov	r8, r3
    7780:	2200      	movs	r2, #0
    7782:	e5f7      	b.n	7374 <__aeabi_ddiv+0x19c>
    7784:	2102      	movs	r1, #2
    7786:	4249      	negs	r1, r1
    7788:	468c      	mov	ip, r1
    778a:	9d03      	ldr	r5, [sp, #12]
    778c:	44e3      	add	fp, ip
    778e:	46ac      	mov	ip, r5
    7790:	44e2      	add	sl, ip
    7792:	45aa      	cmp	sl, r5
    7794:	41ad      	sbcs	r5, r5
    7796:	426d      	negs	r5, r5
    7798:	4445      	add	r5, r8
    779a:	18ed      	adds	r5, r5, r3
    779c:	1a2d      	subs	r5, r5, r0
    779e:	e696      	b.n	74ce <__aeabi_ddiv+0x2f6>
    77a0:	1e8a      	subs	r2, r1, #2
    77a2:	9903      	ldr	r1, [sp, #12]
    77a4:	004d      	lsls	r5, r1, #1
    77a6:	428d      	cmp	r5, r1
    77a8:	4189      	sbcs	r1, r1
    77aa:	4249      	negs	r1, r1
    77ac:	4441      	add	r1, r8
    77ae:	1876      	adds	r6, r6, r1
    77b0:	9503      	str	r5, [sp, #12]
    77b2:	e78f      	b.n	76d4 <__aeabi_ddiv+0x4fc>
    77b4:	201f      	movs	r0, #31
    77b6:	4240      	negs	r0, r0
    77b8:	1ac3      	subs	r3, r0, r3
    77ba:	4658      	mov	r0, fp
    77bc:	40d8      	lsrs	r0, r3
    77be:	0003      	movs	r3, r0
    77c0:	2a20      	cmp	r2, #32
    77c2:	d028      	beq.n	7816 <__aeabi_ddiv+0x63e>
    77c4:	2040      	movs	r0, #64	; 0x40
    77c6:	465d      	mov	r5, fp
    77c8:	1a82      	subs	r2, r0, r2
    77ca:	4095      	lsls	r5, r2
    77cc:	4329      	orrs	r1, r5
    77ce:	1e4a      	subs	r2, r1, #1
    77d0:	4191      	sbcs	r1, r2
    77d2:	4319      	orrs	r1, r3
    77d4:	2307      	movs	r3, #7
    77d6:	2200      	movs	r2, #0
    77d8:	400b      	ands	r3, r1
    77da:	d009      	beq.n	77f0 <__aeabi_ddiv+0x618>
    77dc:	230f      	movs	r3, #15
    77de:	2200      	movs	r2, #0
    77e0:	400b      	ands	r3, r1
    77e2:	0008      	movs	r0, r1
    77e4:	2b04      	cmp	r3, #4
    77e6:	d1bd      	bne.n	7764 <__aeabi_ddiv+0x58c>
    77e8:	0001      	movs	r1, r0
    77ea:	0753      	lsls	r3, r2, #29
    77ec:	0252      	lsls	r2, r2, #9
    77ee:	0b12      	lsrs	r2, r2, #12
    77f0:	08c9      	lsrs	r1, r1, #3
    77f2:	4319      	orrs	r1, r3
    77f4:	2301      	movs	r3, #1
    77f6:	4688      	mov	r8, r1
    77f8:	9902      	ldr	r1, [sp, #8]
    77fa:	2400      	movs	r4, #0
    77fc:	4019      	ands	r1, r3
    77fe:	468c      	mov	ip, r1
    7800:	e5b8      	b.n	7374 <__aeabi_ddiv+0x19c>
    7802:	4552      	cmp	r2, sl
    7804:	d8be      	bhi.n	7784 <__aeabi_ddiv+0x5ac>
    7806:	468b      	mov	fp, r1
    7808:	2500      	movs	r5, #0
    780a:	e660      	b.n	74ce <__aeabi_ddiv+0x2f6>
    780c:	9d03      	ldr	r5, [sp, #12]
    780e:	429d      	cmp	r5, r3
    7810:	d3c6      	bcc.n	77a0 <__aeabi_ddiv+0x5c8>
    7812:	0011      	movs	r1, r2
    7814:	e762      	b.n	76dc <__aeabi_ddiv+0x504>
    7816:	2500      	movs	r5, #0
    7818:	e7d8      	b.n	77cc <__aeabi_ddiv+0x5f4>
    781a:	2280      	movs	r2, #128	; 0x80
    781c:	465b      	mov	r3, fp
    781e:	0312      	lsls	r2, r2, #12
    7820:	431a      	orrs	r2, r3
    7822:	9b01      	ldr	r3, [sp, #4]
    7824:	0312      	lsls	r2, r2, #12
    7826:	0b12      	lsrs	r2, r2, #12
    7828:	469c      	mov	ip, r3
    782a:	4688      	mov	r8, r1
    782c:	4c03      	ldr	r4, [pc, #12]	; (783c <__aeabi_ddiv+0x664>)
    782e:	e5a1      	b.n	7374 <__aeabi_ddiv+0x19c>
    7830:	000003ff 	.word	0x000003ff
    7834:	feffffff 	.word	0xfeffffff
    7838:	000007fe 	.word	0x000007fe
    783c:	000007ff 	.word	0x000007ff

00007840 <__eqdf2>:
    7840:	b5f0      	push	{r4, r5, r6, r7, lr}
    7842:	464f      	mov	r7, r9
    7844:	4646      	mov	r6, r8
    7846:	46d6      	mov	lr, sl
    7848:	005c      	lsls	r4, r3, #1
    784a:	b5c0      	push	{r6, r7, lr}
    784c:	031f      	lsls	r7, r3, #12
    784e:	0fdb      	lsrs	r3, r3, #31
    7850:	469a      	mov	sl, r3
    7852:	4b17      	ldr	r3, [pc, #92]	; (78b0 <__eqdf2+0x70>)
    7854:	030e      	lsls	r6, r1, #12
    7856:	004d      	lsls	r5, r1, #1
    7858:	4684      	mov	ip, r0
    785a:	4680      	mov	r8, r0
    785c:	0b36      	lsrs	r6, r6, #12
    785e:	0d6d      	lsrs	r5, r5, #21
    7860:	0fc9      	lsrs	r1, r1, #31
    7862:	4691      	mov	r9, r2
    7864:	0b3f      	lsrs	r7, r7, #12
    7866:	0d64      	lsrs	r4, r4, #21
    7868:	2001      	movs	r0, #1
    786a:	429d      	cmp	r5, r3
    786c:	d008      	beq.n	7880 <__eqdf2+0x40>
    786e:	429c      	cmp	r4, r3
    7870:	d001      	beq.n	7876 <__eqdf2+0x36>
    7872:	42a5      	cmp	r5, r4
    7874:	d00b      	beq.n	788e <__eqdf2+0x4e>
    7876:	bc1c      	pop	{r2, r3, r4}
    7878:	4690      	mov	r8, r2
    787a:	4699      	mov	r9, r3
    787c:	46a2      	mov	sl, r4
    787e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7880:	4663      	mov	r3, ip
    7882:	4333      	orrs	r3, r6
    7884:	d1f7      	bne.n	7876 <__eqdf2+0x36>
    7886:	42ac      	cmp	r4, r5
    7888:	d1f5      	bne.n	7876 <__eqdf2+0x36>
    788a:	433a      	orrs	r2, r7
    788c:	d1f3      	bne.n	7876 <__eqdf2+0x36>
    788e:	2001      	movs	r0, #1
    7890:	42be      	cmp	r6, r7
    7892:	d1f0      	bne.n	7876 <__eqdf2+0x36>
    7894:	45c8      	cmp	r8, r9
    7896:	d1ee      	bne.n	7876 <__eqdf2+0x36>
    7898:	4551      	cmp	r1, sl
    789a:	d007      	beq.n	78ac <__eqdf2+0x6c>
    789c:	2d00      	cmp	r5, #0
    789e:	d1ea      	bne.n	7876 <__eqdf2+0x36>
    78a0:	4663      	mov	r3, ip
    78a2:	431e      	orrs	r6, r3
    78a4:	0030      	movs	r0, r6
    78a6:	1e46      	subs	r6, r0, #1
    78a8:	41b0      	sbcs	r0, r6
    78aa:	e7e4      	b.n	7876 <__eqdf2+0x36>
    78ac:	2000      	movs	r0, #0
    78ae:	e7e2      	b.n	7876 <__eqdf2+0x36>
    78b0:	000007ff 	.word	0x000007ff

000078b4 <__gedf2>:
    78b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    78b6:	4645      	mov	r5, r8
    78b8:	46de      	mov	lr, fp
    78ba:	4657      	mov	r7, sl
    78bc:	464e      	mov	r6, r9
    78be:	b5e0      	push	{r5, r6, r7, lr}
    78c0:	031f      	lsls	r7, r3, #12
    78c2:	0b3d      	lsrs	r5, r7, #12
    78c4:	4f2c      	ldr	r7, [pc, #176]	; (7978 <__gedf2+0xc4>)
    78c6:	030e      	lsls	r6, r1, #12
    78c8:	004c      	lsls	r4, r1, #1
    78ca:	46ab      	mov	fp, r5
    78cc:	005d      	lsls	r5, r3, #1
    78ce:	4684      	mov	ip, r0
    78d0:	0b36      	lsrs	r6, r6, #12
    78d2:	0d64      	lsrs	r4, r4, #21
    78d4:	0fc9      	lsrs	r1, r1, #31
    78d6:	4690      	mov	r8, r2
    78d8:	0d6d      	lsrs	r5, r5, #21
    78da:	0fdb      	lsrs	r3, r3, #31
    78dc:	42bc      	cmp	r4, r7
    78de:	d02a      	beq.n	7936 <__gedf2+0x82>
    78e0:	4f25      	ldr	r7, [pc, #148]	; (7978 <__gedf2+0xc4>)
    78e2:	42bd      	cmp	r5, r7
    78e4:	d02d      	beq.n	7942 <__gedf2+0x8e>
    78e6:	2c00      	cmp	r4, #0
    78e8:	d10f      	bne.n	790a <__gedf2+0x56>
    78ea:	4330      	orrs	r0, r6
    78ec:	0007      	movs	r7, r0
    78ee:	4681      	mov	r9, r0
    78f0:	4278      	negs	r0, r7
    78f2:	4178      	adcs	r0, r7
    78f4:	b2c0      	uxtb	r0, r0
    78f6:	2d00      	cmp	r5, #0
    78f8:	d117      	bne.n	792a <__gedf2+0x76>
    78fa:	465f      	mov	r7, fp
    78fc:	433a      	orrs	r2, r7
    78fe:	d114      	bne.n	792a <__gedf2+0x76>
    7900:	464b      	mov	r3, r9
    7902:	2000      	movs	r0, #0
    7904:	2b00      	cmp	r3, #0
    7906:	d00a      	beq.n	791e <__gedf2+0x6a>
    7908:	e006      	b.n	7918 <__gedf2+0x64>
    790a:	2d00      	cmp	r5, #0
    790c:	d102      	bne.n	7914 <__gedf2+0x60>
    790e:	4658      	mov	r0, fp
    7910:	4302      	orrs	r2, r0
    7912:	d001      	beq.n	7918 <__gedf2+0x64>
    7914:	4299      	cmp	r1, r3
    7916:	d018      	beq.n	794a <__gedf2+0x96>
    7918:	4248      	negs	r0, r1
    791a:	2101      	movs	r1, #1
    791c:	4308      	orrs	r0, r1
    791e:	bc3c      	pop	{r2, r3, r4, r5}
    7920:	4690      	mov	r8, r2
    7922:	4699      	mov	r9, r3
    7924:	46a2      	mov	sl, r4
    7926:	46ab      	mov	fp, r5
    7928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    792a:	2800      	cmp	r0, #0
    792c:	d0f2      	beq.n	7914 <__gedf2+0x60>
    792e:	2001      	movs	r0, #1
    7930:	3b01      	subs	r3, #1
    7932:	4318      	orrs	r0, r3
    7934:	e7f3      	b.n	791e <__gedf2+0x6a>
    7936:	0037      	movs	r7, r6
    7938:	4307      	orrs	r7, r0
    793a:	d0d1      	beq.n	78e0 <__gedf2+0x2c>
    793c:	2002      	movs	r0, #2
    793e:	4240      	negs	r0, r0
    7940:	e7ed      	b.n	791e <__gedf2+0x6a>
    7942:	465f      	mov	r7, fp
    7944:	4317      	orrs	r7, r2
    7946:	d0ce      	beq.n	78e6 <__gedf2+0x32>
    7948:	e7f8      	b.n	793c <__gedf2+0x88>
    794a:	42ac      	cmp	r4, r5
    794c:	dce4      	bgt.n	7918 <__gedf2+0x64>
    794e:	da03      	bge.n	7958 <__gedf2+0xa4>
    7950:	1e48      	subs	r0, r1, #1
    7952:	2101      	movs	r1, #1
    7954:	4308      	orrs	r0, r1
    7956:	e7e2      	b.n	791e <__gedf2+0x6a>
    7958:	455e      	cmp	r6, fp
    795a:	d8dd      	bhi.n	7918 <__gedf2+0x64>
    795c:	d006      	beq.n	796c <__gedf2+0xb8>
    795e:	2000      	movs	r0, #0
    7960:	455e      	cmp	r6, fp
    7962:	d2dc      	bcs.n	791e <__gedf2+0x6a>
    7964:	2301      	movs	r3, #1
    7966:	1e48      	subs	r0, r1, #1
    7968:	4318      	orrs	r0, r3
    796a:	e7d8      	b.n	791e <__gedf2+0x6a>
    796c:	45c4      	cmp	ip, r8
    796e:	d8d3      	bhi.n	7918 <__gedf2+0x64>
    7970:	2000      	movs	r0, #0
    7972:	45c4      	cmp	ip, r8
    7974:	d3f6      	bcc.n	7964 <__gedf2+0xb0>
    7976:	e7d2      	b.n	791e <__gedf2+0x6a>
    7978:	000007ff 	.word	0x000007ff

0000797c <__ledf2>:
    797c:	b5f0      	push	{r4, r5, r6, r7, lr}
    797e:	464e      	mov	r6, r9
    7980:	4645      	mov	r5, r8
    7982:	46de      	mov	lr, fp
    7984:	4657      	mov	r7, sl
    7986:	005c      	lsls	r4, r3, #1
    7988:	b5e0      	push	{r5, r6, r7, lr}
    798a:	031f      	lsls	r7, r3, #12
    798c:	0fdb      	lsrs	r3, r3, #31
    798e:	4699      	mov	r9, r3
    7990:	4b2a      	ldr	r3, [pc, #168]	; (7a3c <__ledf2+0xc0>)
    7992:	030e      	lsls	r6, r1, #12
    7994:	004d      	lsls	r5, r1, #1
    7996:	0fc9      	lsrs	r1, r1, #31
    7998:	4684      	mov	ip, r0
    799a:	0b36      	lsrs	r6, r6, #12
    799c:	0d6d      	lsrs	r5, r5, #21
    799e:	468b      	mov	fp, r1
    79a0:	4690      	mov	r8, r2
    79a2:	0b3f      	lsrs	r7, r7, #12
    79a4:	0d64      	lsrs	r4, r4, #21
    79a6:	429d      	cmp	r5, r3
    79a8:	d020      	beq.n	79ec <__ledf2+0x70>
    79aa:	4b24      	ldr	r3, [pc, #144]	; (7a3c <__ledf2+0xc0>)
    79ac:	429c      	cmp	r4, r3
    79ae:	d022      	beq.n	79f6 <__ledf2+0x7a>
    79b0:	2d00      	cmp	r5, #0
    79b2:	d112      	bne.n	79da <__ledf2+0x5e>
    79b4:	4330      	orrs	r0, r6
    79b6:	4243      	negs	r3, r0
    79b8:	4143      	adcs	r3, r0
    79ba:	b2db      	uxtb	r3, r3
    79bc:	2c00      	cmp	r4, #0
    79be:	d01f      	beq.n	7a00 <__ledf2+0x84>
    79c0:	2b00      	cmp	r3, #0
    79c2:	d00c      	beq.n	79de <__ledf2+0x62>
    79c4:	464b      	mov	r3, r9
    79c6:	2001      	movs	r0, #1
    79c8:	3b01      	subs	r3, #1
    79ca:	4303      	orrs	r3, r0
    79cc:	0018      	movs	r0, r3
    79ce:	bc3c      	pop	{r2, r3, r4, r5}
    79d0:	4690      	mov	r8, r2
    79d2:	4699      	mov	r9, r3
    79d4:	46a2      	mov	sl, r4
    79d6:	46ab      	mov	fp, r5
    79d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79da:	2c00      	cmp	r4, #0
    79dc:	d016      	beq.n	7a0c <__ledf2+0x90>
    79de:	45cb      	cmp	fp, r9
    79e0:	d017      	beq.n	7a12 <__ledf2+0x96>
    79e2:	465b      	mov	r3, fp
    79e4:	4259      	negs	r1, r3
    79e6:	2301      	movs	r3, #1
    79e8:	430b      	orrs	r3, r1
    79ea:	e7ef      	b.n	79cc <__ledf2+0x50>
    79ec:	0031      	movs	r1, r6
    79ee:	2302      	movs	r3, #2
    79f0:	4301      	orrs	r1, r0
    79f2:	d1eb      	bne.n	79cc <__ledf2+0x50>
    79f4:	e7d9      	b.n	79aa <__ledf2+0x2e>
    79f6:	0039      	movs	r1, r7
    79f8:	2302      	movs	r3, #2
    79fa:	4311      	orrs	r1, r2
    79fc:	d1e6      	bne.n	79cc <__ledf2+0x50>
    79fe:	e7d7      	b.n	79b0 <__ledf2+0x34>
    7a00:	433a      	orrs	r2, r7
    7a02:	d1dd      	bne.n	79c0 <__ledf2+0x44>
    7a04:	2300      	movs	r3, #0
    7a06:	2800      	cmp	r0, #0
    7a08:	d0e0      	beq.n	79cc <__ledf2+0x50>
    7a0a:	e7ea      	b.n	79e2 <__ledf2+0x66>
    7a0c:	433a      	orrs	r2, r7
    7a0e:	d1e6      	bne.n	79de <__ledf2+0x62>
    7a10:	e7e7      	b.n	79e2 <__ledf2+0x66>
    7a12:	42a5      	cmp	r5, r4
    7a14:	dce5      	bgt.n	79e2 <__ledf2+0x66>
    7a16:	db05      	blt.n	7a24 <__ledf2+0xa8>
    7a18:	42be      	cmp	r6, r7
    7a1a:	d8e2      	bhi.n	79e2 <__ledf2+0x66>
    7a1c:	d007      	beq.n	7a2e <__ledf2+0xb2>
    7a1e:	2300      	movs	r3, #0
    7a20:	42be      	cmp	r6, r7
    7a22:	d2d3      	bcs.n	79cc <__ledf2+0x50>
    7a24:	4659      	mov	r1, fp
    7a26:	2301      	movs	r3, #1
    7a28:	3901      	subs	r1, #1
    7a2a:	430b      	orrs	r3, r1
    7a2c:	e7ce      	b.n	79cc <__ledf2+0x50>
    7a2e:	45c4      	cmp	ip, r8
    7a30:	d8d7      	bhi.n	79e2 <__ledf2+0x66>
    7a32:	2300      	movs	r3, #0
    7a34:	45c4      	cmp	ip, r8
    7a36:	d3f5      	bcc.n	7a24 <__ledf2+0xa8>
    7a38:	e7c8      	b.n	79cc <__ledf2+0x50>
    7a3a:	46c0      	nop			; (mov r8, r8)
    7a3c:	000007ff 	.word	0x000007ff

00007a40 <__aeabi_dmul>:
    7a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a42:	4657      	mov	r7, sl
    7a44:	4645      	mov	r5, r8
    7a46:	46de      	mov	lr, fp
    7a48:	464e      	mov	r6, r9
    7a4a:	b5e0      	push	{r5, r6, r7, lr}
    7a4c:	030c      	lsls	r4, r1, #12
    7a4e:	4698      	mov	r8, r3
    7a50:	004e      	lsls	r6, r1, #1
    7a52:	0b23      	lsrs	r3, r4, #12
    7a54:	b087      	sub	sp, #28
    7a56:	0007      	movs	r7, r0
    7a58:	4692      	mov	sl, r2
    7a5a:	469b      	mov	fp, r3
    7a5c:	0d76      	lsrs	r6, r6, #21
    7a5e:	0fcd      	lsrs	r5, r1, #31
    7a60:	2e00      	cmp	r6, #0
    7a62:	d06b      	beq.n	7b3c <__aeabi_dmul+0xfc>
    7a64:	4b6d      	ldr	r3, [pc, #436]	; (7c1c <__aeabi_dmul+0x1dc>)
    7a66:	429e      	cmp	r6, r3
    7a68:	d035      	beq.n	7ad6 <__aeabi_dmul+0x96>
    7a6a:	2480      	movs	r4, #128	; 0x80
    7a6c:	465b      	mov	r3, fp
    7a6e:	0f42      	lsrs	r2, r0, #29
    7a70:	0424      	lsls	r4, r4, #16
    7a72:	00db      	lsls	r3, r3, #3
    7a74:	4314      	orrs	r4, r2
    7a76:	431c      	orrs	r4, r3
    7a78:	00c3      	lsls	r3, r0, #3
    7a7a:	4699      	mov	r9, r3
    7a7c:	4b68      	ldr	r3, [pc, #416]	; (7c20 <__aeabi_dmul+0x1e0>)
    7a7e:	46a3      	mov	fp, r4
    7a80:	469c      	mov	ip, r3
    7a82:	2300      	movs	r3, #0
    7a84:	2700      	movs	r7, #0
    7a86:	4466      	add	r6, ip
    7a88:	9302      	str	r3, [sp, #8]
    7a8a:	4643      	mov	r3, r8
    7a8c:	031c      	lsls	r4, r3, #12
    7a8e:	005a      	lsls	r2, r3, #1
    7a90:	0fdb      	lsrs	r3, r3, #31
    7a92:	4650      	mov	r0, sl
    7a94:	0b24      	lsrs	r4, r4, #12
    7a96:	0d52      	lsrs	r2, r2, #21
    7a98:	4698      	mov	r8, r3
    7a9a:	d100      	bne.n	7a9e <__aeabi_dmul+0x5e>
    7a9c:	e076      	b.n	7b8c <__aeabi_dmul+0x14c>
    7a9e:	4b5f      	ldr	r3, [pc, #380]	; (7c1c <__aeabi_dmul+0x1dc>)
    7aa0:	429a      	cmp	r2, r3
    7aa2:	d06d      	beq.n	7b80 <__aeabi_dmul+0x140>
    7aa4:	2380      	movs	r3, #128	; 0x80
    7aa6:	0f41      	lsrs	r1, r0, #29
    7aa8:	041b      	lsls	r3, r3, #16
    7aaa:	430b      	orrs	r3, r1
    7aac:	495c      	ldr	r1, [pc, #368]	; (7c20 <__aeabi_dmul+0x1e0>)
    7aae:	00e4      	lsls	r4, r4, #3
    7ab0:	468c      	mov	ip, r1
    7ab2:	431c      	orrs	r4, r3
    7ab4:	00c3      	lsls	r3, r0, #3
    7ab6:	2000      	movs	r0, #0
    7ab8:	4462      	add	r2, ip
    7aba:	4641      	mov	r1, r8
    7abc:	18b6      	adds	r6, r6, r2
    7abe:	4069      	eors	r1, r5
    7ac0:	1c72      	adds	r2, r6, #1
    7ac2:	9101      	str	r1, [sp, #4]
    7ac4:	4694      	mov	ip, r2
    7ac6:	4307      	orrs	r7, r0
    7ac8:	2f0f      	cmp	r7, #15
    7aca:	d900      	bls.n	7ace <__aeabi_dmul+0x8e>
    7acc:	e0b0      	b.n	7c30 <__aeabi_dmul+0x1f0>
    7ace:	4a55      	ldr	r2, [pc, #340]	; (7c24 <__aeabi_dmul+0x1e4>)
    7ad0:	00bf      	lsls	r7, r7, #2
    7ad2:	59d2      	ldr	r2, [r2, r7]
    7ad4:	4697      	mov	pc, r2
    7ad6:	465b      	mov	r3, fp
    7ad8:	4303      	orrs	r3, r0
    7ada:	4699      	mov	r9, r3
    7adc:	d000      	beq.n	7ae0 <__aeabi_dmul+0xa0>
    7ade:	e087      	b.n	7bf0 <__aeabi_dmul+0x1b0>
    7ae0:	2300      	movs	r3, #0
    7ae2:	469b      	mov	fp, r3
    7ae4:	3302      	adds	r3, #2
    7ae6:	2708      	movs	r7, #8
    7ae8:	9302      	str	r3, [sp, #8]
    7aea:	e7ce      	b.n	7a8a <__aeabi_dmul+0x4a>
    7aec:	4642      	mov	r2, r8
    7aee:	9201      	str	r2, [sp, #4]
    7af0:	2802      	cmp	r0, #2
    7af2:	d067      	beq.n	7bc4 <__aeabi_dmul+0x184>
    7af4:	2803      	cmp	r0, #3
    7af6:	d100      	bne.n	7afa <__aeabi_dmul+0xba>
    7af8:	e20e      	b.n	7f18 <__aeabi_dmul+0x4d8>
    7afa:	2801      	cmp	r0, #1
    7afc:	d000      	beq.n	7b00 <__aeabi_dmul+0xc0>
    7afe:	e162      	b.n	7dc6 <__aeabi_dmul+0x386>
    7b00:	2300      	movs	r3, #0
    7b02:	2400      	movs	r4, #0
    7b04:	2200      	movs	r2, #0
    7b06:	4699      	mov	r9, r3
    7b08:	9901      	ldr	r1, [sp, #4]
    7b0a:	4001      	ands	r1, r0
    7b0c:	b2cd      	uxtb	r5, r1
    7b0e:	2100      	movs	r1, #0
    7b10:	0312      	lsls	r2, r2, #12
    7b12:	0d0b      	lsrs	r3, r1, #20
    7b14:	0b12      	lsrs	r2, r2, #12
    7b16:	051b      	lsls	r3, r3, #20
    7b18:	4313      	orrs	r3, r2
    7b1a:	4a43      	ldr	r2, [pc, #268]	; (7c28 <__aeabi_dmul+0x1e8>)
    7b1c:	0524      	lsls	r4, r4, #20
    7b1e:	4013      	ands	r3, r2
    7b20:	431c      	orrs	r4, r3
    7b22:	0064      	lsls	r4, r4, #1
    7b24:	07ed      	lsls	r5, r5, #31
    7b26:	0864      	lsrs	r4, r4, #1
    7b28:	432c      	orrs	r4, r5
    7b2a:	4648      	mov	r0, r9
    7b2c:	0021      	movs	r1, r4
    7b2e:	b007      	add	sp, #28
    7b30:	bc3c      	pop	{r2, r3, r4, r5}
    7b32:	4690      	mov	r8, r2
    7b34:	4699      	mov	r9, r3
    7b36:	46a2      	mov	sl, r4
    7b38:	46ab      	mov	fp, r5
    7b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b3c:	4303      	orrs	r3, r0
    7b3e:	4699      	mov	r9, r3
    7b40:	d04f      	beq.n	7be2 <__aeabi_dmul+0x1a2>
    7b42:	465b      	mov	r3, fp
    7b44:	2b00      	cmp	r3, #0
    7b46:	d100      	bne.n	7b4a <__aeabi_dmul+0x10a>
    7b48:	e189      	b.n	7e5e <__aeabi_dmul+0x41e>
    7b4a:	4658      	mov	r0, fp
    7b4c:	f000 feb8 	bl	88c0 <__clzsi2>
    7b50:	0003      	movs	r3, r0
    7b52:	3b0b      	subs	r3, #11
    7b54:	2b1c      	cmp	r3, #28
    7b56:	dd00      	ble.n	7b5a <__aeabi_dmul+0x11a>
    7b58:	e17a      	b.n	7e50 <__aeabi_dmul+0x410>
    7b5a:	221d      	movs	r2, #29
    7b5c:	1ad3      	subs	r3, r2, r3
    7b5e:	003a      	movs	r2, r7
    7b60:	0001      	movs	r1, r0
    7b62:	465c      	mov	r4, fp
    7b64:	40da      	lsrs	r2, r3
    7b66:	3908      	subs	r1, #8
    7b68:	408c      	lsls	r4, r1
    7b6a:	0013      	movs	r3, r2
    7b6c:	408f      	lsls	r7, r1
    7b6e:	4323      	orrs	r3, r4
    7b70:	469b      	mov	fp, r3
    7b72:	46b9      	mov	r9, r7
    7b74:	2300      	movs	r3, #0
    7b76:	4e2d      	ldr	r6, [pc, #180]	; (7c2c <__aeabi_dmul+0x1ec>)
    7b78:	2700      	movs	r7, #0
    7b7a:	1a36      	subs	r6, r6, r0
    7b7c:	9302      	str	r3, [sp, #8]
    7b7e:	e784      	b.n	7a8a <__aeabi_dmul+0x4a>
    7b80:	4653      	mov	r3, sl
    7b82:	4323      	orrs	r3, r4
    7b84:	d12a      	bne.n	7bdc <__aeabi_dmul+0x19c>
    7b86:	2400      	movs	r4, #0
    7b88:	2002      	movs	r0, #2
    7b8a:	e796      	b.n	7aba <__aeabi_dmul+0x7a>
    7b8c:	4653      	mov	r3, sl
    7b8e:	4323      	orrs	r3, r4
    7b90:	d020      	beq.n	7bd4 <__aeabi_dmul+0x194>
    7b92:	2c00      	cmp	r4, #0
    7b94:	d100      	bne.n	7b98 <__aeabi_dmul+0x158>
    7b96:	e157      	b.n	7e48 <__aeabi_dmul+0x408>
    7b98:	0020      	movs	r0, r4
    7b9a:	f000 fe91 	bl	88c0 <__clzsi2>
    7b9e:	0003      	movs	r3, r0
    7ba0:	3b0b      	subs	r3, #11
    7ba2:	2b1c      	cmp	r3, #28
    7ba4:	dd00      	ble.n	7ba8 <__aeabi_dmul+0x168>
    7ba6:	e149      	b.n	7e3c <__aeabi_dmul+0x3fc>
    7ba8:	211d      	movs	r1, #29
    7baa:	1acb      	subs	r3, r1, r3
    7bac:	4651      	mov	r1, sl
    7bae:	0002      	movs	r2, r0
    7bb0:	40d9      	lsrs	r1, r3
    7bb2:	4653      	mov	r3, sl
    7bb4:	3a08      	subs	r2, #8
    7bb6:	4094      	lsls	r4, r2
    7bb8:	4093      	lsls	r3, r2
    7bba:	430c      	orrs	r4, r1
    7bbc:	4a1b      	ldr	r2, [pc, #108]	; (7c2c <__aeabi_dmul+0x1ec>)
    7bbe:	1a12      	subs	r2, r2, r0
    7bc0:	2000      	movs	r0, #0
    7bc2:	e77a      	b.n	7aba <__aeabi_dmul+0x7a>
    7bc4:	2501      	movs	r5, #1
    7bc6:	9b01      	ldr	r3, [sp, #4]
    7bc8:	4c14      	ldr	r4, [pc, #80]	; (7c1c <__aeabi_dmul+0x1dc>)
    7bca:	401d      	ands	r5, r3
    7bcc:	2300      	movs	r3, #0
    7bce:	2200      	movs	r2, #0
    7bd0:	4699      	mov	r9, r3
    7bd2:	e79c      	b.n	7b0e <__aeabi_dmul+0xce>
    7bd4:	2400      	movs	r4, #0
    7bd6:	2200      	movs	r2, #0
    7bd8:	2001      	movs	r0, #1
    7bda:	e76e      	b.n	7aba <__aeabi_dmul+0x7a>
    7bdc:	4653      	mov	r3, sl
    7bde:	2003      	movs	r0, #3
    7be0:	e76b      	b.n	7aba <__aeabi_dmul+0x7a>
    7be2:	2300      	movs	r3, #0
    7be4:	469b      	mov	fp, r3
    7be6:	3301      	adds	r3, #1
    7be8:	2704      	movs	r7, #4
    7bea:	2600      	movs	r6, #0
    7bec:	9302      	str	r3, [sp, #8]
    7bee:	e74c      	b.n	7a8a <__aeabi_dmul+0x4a>
    7bf0:	2303      	movs	r3, #3
    7bf2:	4681      	mov	r9, r0
    7bf4:	270c      	movs	r7, #12
    7bf6:	9302      	str	r3, [sp, #8]
    7bf8:	e747      	b.n	7a8a <__aeabi_dmul+0x4a>
    7bfa:	2280      	movs	r2, #128	; 0x80
    7bfc:	2300      	movs	r3, #0
    7bfe:	2500      	movs	r5, #0
    7c00:	0312      	lsls	r2, r2, #12
    7c02:	4699      	mov	r9, r3
    7c04:	4c05      	ldr	r4, [pc, #20]	; (7c1c <__aeabi_dmul+0x1dc>)
    7c06:	e782      	b.n	7b0e <__aeabi_dmul+0xce>
    7c08:	465c      	mov	r4, fp
    7c0a:	464b      	mov	r3, r9
    7c0c:	9802      	ldr	r0, [sp, #8]
    7c0e:	e76f      	b.n	7af0 <__aeabi_dmul+0xb0>
    7c10:	465c      	mov	r4, fp
    7c12:	464b      	mov	r3, r9
    7c14:	9501      	str	r5, [sp, #4]
    7c16:	9802      	ldr	r0, [sp, #8]
    7c18:	e76a      	b.n	7af0 <__aeabi_dmul+0xb0>
    7c1a:	46c0      	nop			; (mov r8, r8)
    7c1c:	000007ff 	.word	0x000007ff
    7c20:	fffffc01 	.word	0xfffffc01
    7c24:	000097c0 	.word	0x000097c0
    7c28:	800fffff 	.word	0x800fffff
    7c2c:	fffffc0d 	.word	0xfffffc0d
    7c30:	464a      	mov	r2, r9
    7c32:	4649      	mov	r1, r9
    7c34:	0c17      	lsrs	r7, r2, #16
    7c36:	0c1a      	lsrs	r2, r3, #16
    7c38:	041b      	lsls	r3, r3, #16
    7c3a:	0c1b      	lsrs	r3, r3, #16
    7c3c:	0408      	lsls	r0, r1, #16
    7c3e:	0019      	movs	r1, r3
    7c40:	0c00      	lsrs	r0, r0, #16
    7c42:	4341      	muls	r1, r0
    7c44:	0015      	movs	r5, r2
    7c46:	4688      	mov	r8, r1
    7c48:	0019      	movs	r1, r3
    7c4a:	437d      	muls	r5, r7
    7c4c:	4379      	muls	r1, r7
    7c4e:	9503      	str	r5, [sp, #12]
    7c50:	4689      	mov	r9, r1
    7c52:	0029      	movs	r1, r5
    7c54:	0015      	movs	r5, r2
    7c56:	4345      	muls	r5, r0
    7c58:	444d      	add	r5, r9
    7c5a:	9502      	str	r5, [sp, #8]
    7c5c:	4645      	mov	r5, r8
    7c5e:	0c2d      	lsrs	r5, r5, #16
    7c60:	46aa      	mov	sl, r5
    7c62:	9d02      	ldr	r5, [sp, #8]
    7c64:	4455      	add	r5, sl
    7c66:	45a9      	cmp	r9, r5
    7c68:	d906      	bls.n	7c78 <__aeabi_dmul+0x238>
    7c6a:	468a      	mov	sl, r1
    7c6c:	2180      	movs	r1, #128	; 0x80
    7c6e:	0249      	lsls	r1, r1, #9
    7c70:	4689      	mov	r9, r1
    7c72:	44ca      	add	sl, r9
    7c74:	4651      	mov	r1, sl
    7c76:	9103      	str	r1, [sp, #12]
    7c78:	0c29      	lsrs	r1, r5, #16
    7c7a:	9104      	str	r1, [sp, #16]
    7c7c:	4641      	mov	r1, r8
    7c7e:	0409      	lsls	r1, r1, #16
    7c80:	042d      	lsls	r5, r5, #16
    7c82:	0c09      	lsrs	r1, r1, #16
    7c84:	4688      	mov	r8, r1
    7c86:	0029      	movs	r1, r5
    7c88:	0c25      	lsrs	r5, r4, #16
    7c8a:	0424      	lsls	r4, r4, #16
    7c8c:	4441      	add	r1, r8
    7c8e:	0c24      	lsrs	r4, r4, #16
    7c90:	9105      	str	r1, [sp, #20]
    7c92:	0021      	movs	r1, r4
    7c94:	4341      	muls	r1, r0
    7c96:	4688      	mov	r8, r1
    7c98:	0021      	movs	r1, r4
    7c9a:	4379      	muls	r1, r7
    7c9c:	468a      	mov	sl, r1
    7c9e:	4368      	muls	r0, r5
    7ca0:	4641      	mov	r1, r8
    7ca2:	4450      	add	r0, sl
    7ca4:	4681      	mov	r9, r0
    7ca6:	0c08      	lsrs	r0, r1, #16
    7ca8:	4448      	add	r0, r9
    7caa:	436f      	muls	r7, r5
    7cac:	4582      	cmp	sl, r0
    7cae:	d903      	bls.n	7cb8 <__aeabi_dmul+0x278>
    7cb0:	2180      	movs	r1, #128	; 0x80
    7cb2:	0249      	lsls	r1, r1, #9
    7cb4:	4689      	mov	r9, r1
    7cb6:	444f      	add	r7, r9
    7cb8:	0c01      	lsrs	r1, r0, #16
    7cba:	4689      	mov	r9, r1
    7cbc:	0039      	movs	r1, r7
    7cbe:	4449      	add	r1, r9
    7cc0:	9102      	str	r1, [sp, #8]
    7cc2:	4641      	mov	r1, r8
    7cc4:	040f      	lsls	r7, r1, #16
    7cc6:	9904      	ldr	r1, [sp, #16]
    7cc8:	0c3f      	lsrs	r7, r7, #16
    7cca:	4688      	mov	r8, r1
    7ccc:	0400      	lsls	r0, r0, #16
    7cce:	19c0      	adds	r0, r0, r7
    7cd0:	4480      	add	r8, r0
    7cd2:	4641      	mov	r1, r8
    7cd4:	9104      	str	r1, [sp, #16]
    7cd6:	4659      	mov	r1, fp
    7cd8:	0c0f      	lsrs	r7, r1, #16
    7cda:	0409      	lsls	r1, r1, #16
    7cdc:	0c09      	lsrs	r1, r1, #16
    7cde:	4688      	mov	r8, r1
    7ce0:	4359      	muls	r1, r3
    7ce2:	468a      	mov	sl, r1
    7ce4:	0039      	movs	r1, r7
    7ce6:	4351      	muls	r1, r2
    7ce8:	4689      	mov	r9, r1
    7cea:	4641      	mov	r1, r8
    7cec:	434a      	muls	r2, r1
    7cee:	4651      	mov	r1, sl
    7cf0:	0c09      	lsrs	r1, r1, #16
    7cf2:	468b      	mov	fp, r1
    7cf4:	437b      	muls	r3, r7
    7cf6:	18d2      	adds	r2, r2, r3
    7cf8:	445a      	add	r2, fp
    7cfa:	4293      	cmp	r3, r2
    7cfc:	d903      	bls.n	7d06 <__aeabi_dmul+0x2c6>
    7cfe:	2380      	movs	r3, #128	; 0x80
    7d00:	025b      	lsls	r3, r3, #9
    7d02:	469b      	mov	fp, r3
    7d04:	44d9      	add	r9, fp
    7d06:	4651      	mov	r1, sl
    7d08:	0409      	lsls	r1, r1, #16
    7d0a:	0c09      	lsrs	r1, r1, #16
    7d0c:	468a      	mov	sl, r1
    7d0e:	4641      	mov	r1, r8
    7d10:	4361      	muls	r1, r4
    7d12:	437c      	muls	r4, r7
    7d14:	0c13      	lsrs	r3, r2, #16
    7d16:	0412      	lsls	r2, r2, #16
    7d18:	444b      	add	r3, r9
    7d1a:	4452      	add	r2, sl
    7d1c:	46a1      	mov	r9, r4
    7d1e:	468a      	mov	sl, r1
    7d20:	003c      	movs	r4, r7
    7d22:	4641      	mov	r1, r8
    7d24:	436c      	muls	r4, r5
    7d26:	434d      	muls	r5, r1
    7d28:	4651      	mov	r1, sl
    7d2a:	444d      	add	r5, r9
    7d2c:	0c0f      	lsrs	r7, r1, #16
    7d2e:	197d      	adds	r5, r7, r5
    7d30:	45a9      	cmp	r9, r5
    7d32:	d903      	bls.n	7d3c <__aeabi_dmul+0x2fc>
    7d34:	2180      	movs	r1, #128	; 0x80
    7d36:	0249      	lsls	r1, r1, #9
    7d38:	4688      	mov	r8, r1
    7d3a:	4444      	add	r4, r8
    7d3c:	9f04      	ldr	r7, [sp, #16]
    7d3e:	9903      	ldr	r1, [sp, #12]
    7d40:	46b8      	mov	r8, r7
    7d42:	4441      	add	r1, r8
    7d44:	468b      	mov	fp, r1
    7d46:	4583      	cmp	fp, r0
    7d48:	4180      	sbcs	r0, r0
    7d4a:	4241      	negs	r1, r0
    7d4c:	4688      	mov	r8, r1
    7d4e:	4651      	mov	r1, sl
    7d50:	0408      	lsls	r0, r1, #16
    7d52:	042f      	lsls	r7, r5, #16
    7d54:	0c00      	lsrs	r0, r0, #16
    7d56:	183f      	adds	r7, r7, r0
    7d58:	4658      	mov	r0, fp
    7d5a:	9902      	ldr	r1, [sp, #8]
    7d5c:	1810      	adds	r0, r2, r0
    7d5e:	4689      	mov	r9, r1
    7d60:	4290      	cmp	r0, r2
    7d62:	4192      	sbcs	r2, r2
    7d64:	444f      	add	r7, r9
    7d66:	46ba      	mov	sl, r7
    7d68:	4252      	negs	r2, r2
    7d6a:	4699      	mov	r9, r3
    7d6c:	4693      	mov	fp, r2
    7d6e:	44c2      	add	sl, r8
    7d70:	44d1      	add	r9, sl
    7d72:	44cb      	add	fp, r9
    7d74:	428f      	cmp	r7, r1
    7d76:	41bf      	sbcs	r7, r7
    7d78:	45c2      	cmp	sl, r8
    7d7a:	4189      	sbcs	r1, r1
    7d7c:	4599      	cmp	r9, r3
    7d7e:	419b      	sbcs	r3, r3
    7d80:	4593      	cmp	fp, r2
    7d82:	4192      	sbcs	r2, r2
    7d84:	427f      	negs	r7, r7
    7d86:	4249      	negs	r1, r1
    7d88:	0c2d      	lsrs	r5, r5, #16
    7d8a:	4252      	negs	r2, r2
    7d8c:	430f      	orrs	r7, r1
    7d8e:	425b      	negs	r3, r3
    7d90:	4313      	orrs	r3, r2
    7d92:	197f      	adds	r7, r7, r5
    7d94:	18ff      	adds	r7, r7, r3
    7d96:	465b      	mov	r3, fp
    7d98:	193c      	adds	r4, r7, r4
    7d9a:	0ddb      	lsrs	r3, r3, #23
    7d9c:	9a05      	ldr	r2, [sp, #20]
    7d9e:	0264      	lsls	r4, r4, #9
    7da0:	431c      	orrs	r4, r3
    7da2:	0243      	lsls	r3, r0, #9
    7da4:	4313      	orrs	r3, r2
    7da6:	1e5d      	subs	r5, r3, #1
    7da8:	41ab      	sbcs	r3, r5
    7daa:	465a      	mov	r2, fp
    7dac:	0dc0      	lsrs	r0, r0, #23
    7dae:	4303      	orrs	r3, r0
    7db0:	0252      	lsls	r2, r2, #9
    7db2:	4313      	orrs	r3, r2
    7db4:	01e2      	lsls	r2, r4, #7
    7db6:	d556      	bpl.n	7e66 <__aeabi_dmul+0x426>
    7db8:	2001      	movs	r0, #1
    7dba:	085a      	lsrs	r2, r3, #1
    7dbc:	4003      	ands	r3, r0
    7dbe:	4313      	orrs	r3, r2
    7dc0:	07e2      	lsls	r2, r4, #31
    7dc2:	4313      	orrs	r3, r2
    7dc4:	0864      	lsrs	r4, r4, #1
    7dc6:	485a      	ldr	r0, [pc, #360]	; (7f30 <__aeabi_dmul+0x4f0>)
    7dc8:	4460      	add	r0, ip
    7dca:	2800      	cmp	r0, #0
    7dcc:	dd4d      	ble.n	7e6a <__aeabi_dmul+0x42a>
    7dce:	075a      	lsls	r2, r3, #29
    7dd0:	d009      	beq.n	7de6 <__aeabi_dmul+0x3a6>
    7dd2:	220f      	movs	r2, #15
    7dd4:	401a      	ands	r2, r3
    7dd6:	2a04      	cmp	r2, #4
    7dd8:	d005      	beq.n	7de6 <__aeabi_dmul+0x3a6>
    7dda:	1d1a      	adds	r2, r3, #4
    7ddc:	429a      	cmp	r2, r3
    7dde:	419b      	sbcs	r3, r3
    7de0:	425b      	negs	r3, r3
    7de2:	18e4      	adds	r4, r4, r3
    7de4:	0013      	movs	r3, r2
    7de6:	01e2      	lsls	r2, r4, #7
    7de8:	d504      	bpl.n	7df4 <__aeabi_dmul+0x3b4>
    7dea:	2080      	movs	r0, #128	; 0x80
    7dec:	4a51      	ldr	r2, [pc, #324]	; (7f34 <__aeabi_dmul+0x4f4>)
    7dee:	00c0      	lsls	r0, r0, #3
    7df0:	4014      	ands	r4, r2
    7df2:	4460      	add	r0, ip
    7df4:	4a50      	ldr	r2, [pc, #320]	; (7f38 <__aeabi_dmul+0x4f8>)
    7df6:	4290      	cmp	r0, r2
    7df8:	dd00      	ble.n	7dfc <__aeabi_dmul+0x3bc>
    7dfa:	e6e3      	b.n	7bc4 <__aeabi_dmul+0x184>
    7dfc:	2501      	movs	r5, #1
    7dfe:	08db      	lsrs	r3, r3, #3
    7e00:	0762      	lsls	r2, r4, #29
    7e02:	431a      	orrs	r2, r3
    7e04:	0264      	lsls	r4, r4, #9
    7e06:	9b01      	ldr	r3, [sp, #4]
    7e08:	4691      	mov	r9, r2
    7e0a:	0b22      	lsrs	r2, r4, #12
    7e0c:	0544      	lsls	r4, r0, #21
    7e0e:	0d64      	lsrs	r4, r4, #21
    7e10:	401d      	ands	r5, r3
    7e12:	e67c      	b.n	7b0e <__aeabi_dmul+0xce>
    7e14:	2280      	movs	r2, #128	; 0x80
    7e16:	4659      	mov	r1, fp
    7e18:	0312      	lsls	r2, r2, #12
    7e1a:	4211      	tst	r1, r2
    7e1c:	d008      	beq.n	7e30 <__aeabi_dmul+0x3f0>
    7e1e:	4214      	tst	r4, r2
    7e20:	d106      	bne.n	7e30 <__aeabi_dmul+0x3f0>
    7e22:	4322      	orrs	r2, r4
    7e24:	0312      	lsls	r2, r2, #12
    7e26:	0b12      	lsrs	r2, r2, #12
    7e28:	4645      	mov	r5, r8
    7e2a:	4699      	mov	r9, r3
    7e2c:	4c43      	ldr	r4, [pc, #268]	; (7f3c <__aeabi_dmul+0x4fc>)
    7e2e:	e66e      	b.n	7b0e <__aeabi_dmul+0xce>
    7e30:	465b      	mov	r3, fp
    7e32:	431a      	orrs	r2, r3
    7e34:	0312      	lsls	r2, r2, #12
    7e36:	0b12      	lsrs	r2, r2, #12
    7e38:	4c40      	ldr	r4, [pc, #256]	; (7f3c <__aeabi_dmul+0x4fc>)
    7e3a:	e668      	b.n	7b0e <__aeabi_dmul+0xce>
    7e3c:	0003      	movs	r3, r0
    7e3e:	4654      	mov	r4, sl
    7e40:	3b28      	subs	r3, #40	; 0x28
    7e42:	409c      	lsls	r4, r3
    7e44:	2300      	movs	r3, #0
    7e46:	e6b9      	b.n	7bbc <__aeabi_dmul+0x17c>
    7e48:	f000 fd3a 	bl	88c0 <__clzsi2>
    7e4c:	3020      	adds	r0, #32
    7e4e:	e6a6      	b.n	7b9e <__aeabi_dmul+0x15e>
    7e50:	0003      	movs	r3, r0
    7e52:	3b28      	subs	r3, #40	; 0x28
    7e54:	409f      	lsls	r7, r3
    7e56:	2300      	movs	r3, #0
    7e58:	46bb      	mov	fp, r7
    7e5a:	4699      	mov	r9, r3
    7e5c:	e68a      	b.n	7b74 <__aeabi_dmul+0x134>
    7e5e:	f000 fd2f 	bl	88c0 <__clzsi2>
    7e62:	3020      	adds	r0, #32
    7e64:	e674      	b.n	7b50 <__aeabi_dmul+0x110>
    7e66:	46b4      	mov	ip, r6
    7e68:	e7ad      	b.n	7dc6 <__aeabi_dmul+0x386>
    7e6a:	2501      	movs	r5, #1
    7e6c:	1a2a      	subs	r2, r5, r0
    7e6e:	2a38      	cmp	r2, #56	; 0x38
    7e70:	dd06      	ble.n	7e80 <__aeabi_dmul+0x440>
    7e72:	9b01      	ldr	r3, [sp, #4]
    7e74:	2400      	movs	r4, #0
    7e76:	401d      	ands	r5, r3
    7e78:	2300      	movs	r3, #0
    7e7a:	2200      	movs	r2, #0
    7e7c:	4699      	mov	r9, r3
    7e7e:	e646      	b.n	7b0e <__aeabi_dmul+0xce>
    7e80:	2a1f      	cmp	r2, #31
    7e82:	dc21      	bgt.n	7ec8 <__aeabi_dmul+0x488>
    7e84:	2520      	movs	r5, #32
    7e86:	0020      	movs	r0, r4
    7e88:	1aad      	subs	r5, r5, r2
    7e8a:	001e      	movs	r6, r3
    7e8c:	40ab      	lsls	r3, r5
    7e8e:	40a8      	lsls	r0, r5
    7e90:	40d6      	lsrs	r6, r2
    7e92:	1e5d      	subs	r5, r3, #1
    7e94:	41ab      	sbcs	r3, r5
    7e96:	4330      	orrs	r0, r6
    7e98:	4318      	orrs	r0, r3
    7e9a:	40d4      	lsrs	r4, r2
    7e9c:	0743      	lsls	r3, r0, #29
    7e9e:	d009      	beq.n	7eb4 <__aeabi_dmul+0x474>
    7ea0:	230f      	movs	r3, #15
    7ea2:	4003      	ands	r3, r0
    7ea4:	2b04      	cmp	r3, #4
    7ea6:	d005      	beq.n	7eb4 <__aeabi_dmul+0x474>
    7ea8:	0003      	movs	r3, r0
    7eaa:	1d18      	adds	r0, r3, #4
    7eac:	4298      	cmp	r0, r3
    7eae:	419b      	sbcs	r3, r3
    7eb0:	425b      	negs	r3, r3
    7eb2:	18e4      	adds	r4, r4, r3
    7eb4:	0223      	lsls	r3, r4, #8
    7eb6:	d521      	bpl.n	7efc <__aeabi_dmul+0x4bc>
    7eb8:	2501      	movs	r5, #1
    7eba:	9b01      	ldr	r3, [sp, #4]
    7ebc:	2401      	movs	r4, #1
    7ebe:	401d      	ands	r5, r3
    7ec0:	2300      	movs	r3, #0
    7ec2:	2200      	movs	r2, #0
    7ec4:	4699      	mov	r9, r3
    7ec6:	e622      	b.n	7b0e <__aeabi_dmul+0xce>
    7ec8:	251f      	movs	r5, #31
    7eca:	0021      	movs	r1, r4
    7ecc:	426d      	negs	r5, r5
    7ece:	1a28      	subs	r0, r5, r0
    7ed0:	40c1      	lsrs	r1, r0
    7ed2:	0008      	movs	r0, r1
    7ed4:	2a20      	cmp	r2, #32
    7ed6:	d01d      	beq.n	7f14 <__aeabi_dmul+0x4d4>
    7ed8:	355f      	adds	r5, #95	; 0x5f
    7eda:	1aaa      	subs	r2, r5, r2
    7edc:	4094      	lsls	r4, r2
    7ede:	4323      	orrs	r3, r4
    7ee0:	1e5c      	subs	r4, r3, #1
    7ee2:	41a3      	sbcs	r3, r4
    7ee4:	2507      	movs	r5, #7
    7ee6:	4303      	orrs	r3, r0
    7ee8:	401d      	ands	r5, r3
    7eea:	2200      	movs	r2, #0
    7eec:	2d00      	cmp	r5, #0
    7eee:	d009      	beq.n	7f04 <__aeabi_dmul+0x4c4>
    7ef0:	220f      	movs	r2, #15
    7ef2:	2400      	movs	r4, #0
    7ef4:	401a      	ands	r2, r3
    7ef6:	0018      	movs	r0, r3
    7ef8:	2a04      	cmp	r2, #4
    7efa:	d1d6      	bne.n	7eaa <__aeabi_dmul+0x46a>
    7efc:	0003      	movs	r3, r0
    7efe:	0765      	lsls	r5, r4, #29
    7f00:	0264      	lsls	r4, r4, #9
    7f02:	0b22      	lsrs	r2, r4, #12
    7f04:	08db      	lsrs	r3, r3, #3
    7f06:	432b      	orrs	r3, r5
    7f08:	2501      	movs	r5, #1
    7f0a:	4699      	mov	r9, r3
    7f0c:	9b01      	ldr	r3, [sp, #4]
    7f0e:	2400      	movs	r4, #0
    7f10:	401d      	ands	r5, r3
    7f12:	e5fc      	b.n	7b0e <__aeabi_dmul+0xce>
    7f14:	2400      	movs	r4, #0
    7f16:	e7e2      	b.n	7ede <__aeabi_dmul+0x49e>
    7f18:	2280      	movs	r2, #128	; 0x80
    7f1a:	2501      	movs	r5, #1
    7f1c:	0312      	lsls	r2, r2, #12
    7f1e:	4322      	orrs	r2, r4
    7f20:	9901      	ldr	r1, [sp, #4]
    7f22:	0312      	lsls	r2, r2, #12
    7f24:	0b12      	lsrs	r2, r2, #12
    7f26:	400d      	ands	r5, r1
    7f28:	4699      	mov	r9, r3
    7f2a:	4c04      	ldr	r4, [pc, #16]	; (7f3c <__aeabi_dmul+0x4fc>)
    7f2c:	e5ef      	b.n	7b0e <__aeabi_dmul+0xce>
    7f2e:	46c0      	nop			; (mov r8, r8)
    7f30:	000003ff 	.word	0x000003ff
    7f34:	feffffff 	.word	0xfeffffff
    7f38:	000007fe 	.word	0x000007fe
    7f3c:	000007ff 	.word	0x000007ff

00007f40 <__aeabi_dsub>:
    7f40:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f42:	4646      	mov	r6, r8
    7f44:	46d6      	mov	lr, sl
    7f46:	464f      	mov	r7, r9
    7f48:	030c      	lsls	r4, r1, #12
    7f4a:	b5c0      	push	{r6, r7, lr}
    7f4c:	0fcd      	lsrs	r5, r1, #31
    7f4e:	004e      	lsls	r6, r1, #1
    7f50:	0a61      	lsrs	r1, r4, #9
    7f52:	0f44      	lsrs	r4, r0, #29
    7f54:	430c      	orrs	r4, r1
    7f56:	00c1      	lsls	r1, r0, #3
    7f58:	0058      	lsls	r0, r3, #1
    7f5a:	0d40      	lsrs	r0, r0, #21
    7f5c:	4684      	mov	ip, r0
    7f5e:	468a      	mov	sl, r1
    7f60:	000f      	movs	r7, r1
    7f62:	0319      	lsls	r1, r3, #12
    7f64:	0f50      	lsrs	r0, r2, #29
    7f66:	0a49      	lsrs	r1, r1, #9
    7f68:	4301      	orrs	r1, r0
    7f6a:	48c6      	ldr	r0, [pc, #792]	; (8284 <__aeabi_dsub+0x344>)
    7f6c:	0d76      	lsrs	r6, r6, #21
    7f6e:	46a8      	mov	r8, r5
    7f70:	0fdb      	lsrs	r3, r3, #31
    7f72:	00d2      	lsls	r2, r2, #3
    7f74:	4584      	cmp	ip, r0
    7f76:	d100      	bne.n	7f7a <__aeabi_dsub+0x3a>
    7f78:	e0d8      	b.n	812c <__aeabi_dsub+0x1ec>
    7f7a:	2001      	movs	r0, #1
    7f7c:	4043      	eors	r3, r0
    7f7e:	42ab      	cmp	r3, r5
    7f80:	d100      	bne.n	7f84 <__aeabi_dsub+0x44>
    7f82:	e0a6      	b.n	80d2 <__aeabi_dsub+0x192>
    7f84:	4660      	mov	r0, ip
    7f86:	1a35      	subs	r5, r6, r0
    7f88:	2d00      	cmp	r5, #0
    7f8a:	dc00      	bgt.n	7f8e <__aeabi_dsub+0x4e>
    7f8c:	e105      	b.n	819a <__aeabi_dsub+0x25a>
    7f8e:	2800      	cmp	r0, #0
    7f90:	d110      	bne.n	7fb4 <__aeabi_dsub+0x74>
    7f92:	000b      	movs	r3, r1
    7f94:	4313      	orrs	r3, r2
    7f96:	d100      	bne.n	7f9a <__aeabi_dsub+0x5a>
    7f98:	e0d7      	b.n	814a <__aeabi_dsub+0x20a>
    7f9a:	1e6b      	subs	r3, r5, #1
    7f9c:	2b00      	cmp	r3, #0
    7f9e:	d000      	beq.n	7fa2 <__aeabi_dsub+0x62>
    7fa0:	e14b      	b.n	823a <__aeabi_dsub+0x2fa>
    7fa2:	4653      	mov	r3, sl
    7fa4:	1a9f      	subs	r7, r3, r2
    7fa6:	45ba      	cmp	sl, r7
    7fa8:	4180      	sbcs	r0, r0
    7faa:	1a64      	subs	r4, r4, r1
    7fac:	4240      	negs	r0, r0
    7fae:	1a24      	subs	r4, r4, r0
    7fb0:	2601      	movs	r6, #1
    7fb2:	e01e      	b.n	7ff2 <__aeabi_dsub+0xb2>
    7fb4:	4bb3      	ldr	r3, [pc, #716]	; (8284 <__aeabi_dsub+0x344>)
    7fb6:	429e      	cmp	r6, r3
    7fb8:	d048      	beq.n	804c <__aeabi_dsub+0x10c>
    7fba:	2380      	movs	r3, #128	; 0x80
    7fbc:	041b      	lsls	r3, r3, #16
    7fbe:	4319      	orrs	r1, r3
    7fc0:	2d38      	cmp	r5, #56	; 0x38
    7fc2:	dd00      	ble.n	7fc6 <__aeabi_dsub+0x86>
    7fc4:	e119      	b.n	81fa <__aeabi_dsub+0x2ba>
    7fc6:	2d1f      	cmp	r5, #31
    7fc8:	dd00      	ble.n	7fcc <__aeabi_dsub+0x8c>
    7fca:	e14c      	b.n	8266 <__aeabi_dsub+0x326>
    7fcc:	2320      	movs	r3, #32
    7fce:	000f      	movs	r7, r1
    7fd0:	1b5b      	subs	r3, r3, r5
    7fd2:	0010      	movs	r0, r2
    7fd4:	409a      	lsls	r2, r3
    7fd6:	409f      	lsls	r7, r3
    7fd8:	40e8      	lsrs	r0, r5
    7fda:	1e53      	subs	r3, r2, #1
    7fdc:	419a      	sbcs	r2, r3
    7fde:	40e9      	lsrs	r1, r5
    7fe0:	4307      	orrs	r7, r0
    7fe2:	4317      	orrs	r7, r2
    7fe4:	4653      	mov	r3, sl
    7fe6:	1bdf      	subs	r7, r3, r7
    7fe8:	1a61      	subs	r1, r4, r1
    7fea:	45ba      	cmp	sl, r7
    7fec:	41a4      	sbcs	r4, r4
    7fee:	4264      	negs	r4, r4
    7ff0:	1b0c      	subs	r4, r1, r4
    7ff2:	0223      	lsls	r3, r4, #8
    7ff4:	d400      	bmi.n	7ff8 <__aeabi_dsub+0xb8>
    7ff6:	e0c5      	b.n	8184 <__aeabi_dsub+0x244>
    7ff8:	0264      	lsls	r4, r4, #9
    7ffa:	0a65      	lsrs	r5, r4, #9
    7ffc:	2d00      	cmp	r5, #0
    7ffe:	d100      	bne.n	8002 <__aeabi_dsub+0xc2>
    8000:	e0f6      	b.n	81f0 <__aeabi_dsub+0x2b0>
    8002:	0028      	movs	r0, r5
    8004:	f000 fc5c 	bl	88c0 <__clzsi2>
    8008:	0003      	movs	r3, r0
    800a:	3b08      	subs	r3, #8
    800c:	2b1f      	cmp	r3, #31
    800e:	dd00      	ble.n	8012 <__aeabi_dsub+0xd2>
    8010:	e0e9      	b.n	81e6 <__aeabi_dsub+0x2a6>
    8012:	2220      	movs	r2, #32
    8014:	003c      	movs	r4, r7
    8016:	1ad2      	subs	r2, r2, r3
    8018:	409d      	lsls	r5, r3
    801a:	40d4      	lsrs	r4, r2
    801c:	409f      	lsls	r7, r3
    801e:	4325      	orrs	r5, r4
    8020:	429e      	cmp	r6, r3
    8022:	dd00      	ble.n	8026 <__aeabi_dsub+0xe6>
    8024:	e0db      	b.n	81de <__aeabi_dsub+0x29e>
    8026:	1b9e      	subs	r6, r3, r6
    8028:	1c73      	adds	r3, r6, #1
    802a:	2b1f      	cmp	r3, #31
    802c:	dd00      	ble.n	8030 <__aeabi_dsub+0xf0>
    802e:	e10a      	b.n	8246 <__aeabi_dsub+0x306>
    8030:	2220      	movs	r2, #32
    8032:	0038      	movs	r0, r7
    8034:	1ad2      	subs	r2, r2, r3
    8036:	0029      	movs	r1, r5
    8038:	4097      	lsls	r7, r2
    803a:	002c      	movs	r4, r5
    803c:	4091      	lsls	r1, r2
    803e:	40d8      	lsrs	r0, r3
    8040:	1e7a      	subs	r2, r7, #1
    8042:	4197      	sbcs	r7, r2
    8044:	40dc      	lsrs	r4, r3
    8046:	2600      	movs	r6, #0
    8048:	4301      	orrs	r1, r0
    804a:	430f      	orrs	r7, r1
    804c:	077b      	lsls	r3, r7, #29
    804e:	d009      	beq.n	8064 <__aeabi_dsub+0x124>
    8050:	230f      	movs	r3, #15
    8052:	403b      	ands	r3, r7
    8054:	2b04      	cmp	r3, #4
    8056:	d005      	beq.n	8064 <__aeabi_dsub+0x124>
    8058:	1d3b      	adds	r3, r7, #4
    805a:	42bb      	cmp	r3, r7
    805c:	41bf      	sbcs	r7, r7
    805e:	427f      	negs	r7, r7
    8060:	19e4      	adds	r4, r4, r7
    8062:	001f      	movs	r7, r3
    8064:	0223      	lsls	r3, r4, #8
    8066:	d525      	bpl.n	80b4 <__aeabi_dsub+0x174>
    8068:	4b86      	ldr	r3, [pc, #536]	; (8284 <__aeabi_dsub+0x344>)
    806a:	3601      	adds	r6, #1
    806c:	429e      	cmp	r6, r3
    806e:	d100      	bne.n	8072 <__aeabi_dsub+0x132>
    8070:	e0af      	b.n	81d2 <__aeabi_dsub+0x292>
    8072:	4b85      	ldr	r3, [pc, #532]	; (8288 <__aeabi_dsub+0x348>)
    8074:	2501      	movs	r5, #1
    8076:	401c      	ands	r4, r3
    8078:	4643      	mov	r3, r8
    807a:	0762      	lsls	r2, r4, #29
    807c:	08ff      	lsrs	r7, r7, #3
    807e:	0264      	lsls	r4, r4, #9
    8080:	0576      	lsls	r6, r6, #21
    8082:	4317      	orrs	r7, r2
    8084:	0b24      	lsrs	r4, r4, #12
    8086:	0d76      	lsrs	r6, r6, #21
    8088:	401d      	ands	r5, r3
    808a:	2100      	movs	r1, #0
    808c:	0324      	lsls	r4, r4, #12
    808e:	0b23      	lsrs	r3, r4, #12
    8090:	0d0c      	lsrs	r4, r1, #20
    8092:	4a7e      	ldr	r2, [pc, #504]	; (828c <__aeabi_dsub+0x34c>)
    8094:	0524      	lsls	r4, r4, #20
    8096:	431c      	orrs	r4, r3
    8098:	4014      	ands	r4, r2
    809a:	0533      	lsls	r3, r6, #20
    809c:	4323      	orrs	r3, r4
    809e:	005b      	lsls	r3, r3, #1
    80a0:	07ed      	lsls	r5, r5, #31
    80a2:	085b      	lsrs	r3, r3, #1
    80a4:	432b      	orrs	r3, r5
    80a6:	0038      	movs	r0, r7
    80a8:	0019      	movs	r1, r3
    80aa:	bc1c      	pop	{r2, r3, r4}
    80ac:	4690      	mov	r8, r2
    80ae:	4699      	mov	r9, r3
    80b0:	46a2      	mov	sl, r4
    80b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80b4:	2501      	movs	r5, #1
    80b6:	4643      	mov	r3, r8
    80b8:	0762      	lsls	r2, r4, #29
    80ba:	08ff      	lsrs	r7, r7, #3
    80bc:	4317      	orrs	r7, r2
    80be:	08e4      	lsrs	r4, r4, #3
    80c0:	401d      	ands	r5, r3
    80c2:	4b70      	ldr	r3, [pc, #448]	; (8284 <__aeabi_dsub+0x344>)
    80c4:	429e      	cmp	r6, r3
    80c6:	d036      	beq.n	8136 <__aeabi_dsub+0x1f6>
    80c8:	0324      	lsls	r4, r4, #12
    80ca:	0576      	lsls	r6, r6, #21
    80cc:	0b24      	lsrs	r4, r4, #12
    80ce:	0d76      	lsrs	r6, r6, #21
    80d0:	e7db      	b.n	808a <__aeabi_dsub+0x14a>
    80d2:	4663      	mov	r3, ip
    80d4:	1af3      	subs	r3, r6, r3
    80d6:	2b00      	cmp	r3, #0
    80d8:	dc00      	bgt.n	80dc <__aeabi_dsub+0x19c>
    80da:	e094      	b.n	8206 <__aeabi_dsub+0x2c6>
    80dc:	4660      	mov	r0, ip
    80de:	2800      	cmp	r0, #0
    80e0:	d035      	beq.n	814e <__aeabi_dsub+0x20e>
    80e2:	4868      	ldr	r0, [pc, #416]	; (8284 <__aeabi_dsub+0x344>)
    80e4:	4286      	cmp	r6, r0
    80e6:	d0b1      	beq.n	804c <__aeabi_dsub+0x10c>
    80e8:	2780      	movs	r7, #128	; 0x80
    80ea:	043f      	lsls	r7, r7, #16
    80ec:	4339      	orrs	r1, r7
    80ee:	2b38      	cmp	r3, #56	; 0x38
    80f0:	dc00      	bgt.n	80f4 <__aeabi_dsub+0x1b4>
    80f2:	e0fd      	b.n	82f0 <__aeabi_dsub+0x3b0>
    80f4:	430a      	orrs	r2, r1
    80f6:	0017      	movs	r7, r2
    80f8:	2100      	movs	r1, #0
    80fa:	1e7a      	subs	r2, r7, #1
    80fc:	4197      	sbcs	r7, r2
    80fe:	4457      	add	r7, sl
    8100:	4557      	cmp	r7, sl
    8102:	4180      	sbcs	r0, r0
    8104:	1909      	adds	r1, r1, r4
    8106:	4244      	negs	r4, r0
    8108:	190c      	adds	r4, r1, r4
    810a:	0223      	lsls	r3, r4, #8
    810c:	d53a      	bpl.n	8184 <__aeabi_dsub+0x244>
    810e:	4b5d      	ldr	r3, [pc, #372]	; (8284 <__aeabi_dsub+0x344>)
    8110:	3601      	adds	r6, #1
    8112:	429e      	cmp	r6, r3
    8114:	d100      	bne.n	8118 <__aeabi_dsub+0x1d8>
    8116:	e14b      	b.n	83b0 <__aeabi_dsub+0x470>
    8118:	2201      	movs	r2, #1
    811a:	4b5b      	ldr	r3, [pc, #364]	; (8288 <__aeabi_dsub+0x348>)
    811c:	401c      	ands	r4, r3
    811e:	087b      	lsrs	r3, r7, #1
    8120:	4017      	ands	r7, r2
    8122:	431f      	orrs	r7, r3
    8124:	07e2      	lsls	r2, r4, #31
    8126:	4317      	orrs	r7, r2
    8128:	0864      	lsrs	r4, r4, #1
    812a:	e78f      	b.n	804c <__aeabi_dsub+0x10c>
    812c:	0008      	movs	r0, r1
    812e:	4310      	orrs	r0, r2
    8130:	d000      	beq.n	8134 <__aeabi_dsub+0x1f4>
    8132:	e724      	b.n	7f7e <__aeabi_dsub+0x3e>
    8134:	e721      	b.n	7f7a <__aeabi_dsub+0x3a>
    8136:	0023      	movs	r3, r4
    8138:	433b      	orrs	r3, r7
    813a:	d100      	bne.n	813e <__aeabi_dsub+0x1fe>
    813c:	e1b9      	b.n	84b2 <__aeabi_dsub+0x572>
    813e:	2280      	movs	r2, #128	; 0x80
    8140:	0312      	lsls	r2, r2, #12
    8142:	4314      	orrs	r4, r2
    8144:	0324      	lsls	r4, r4, #12
    8146:	0b24      	lsrs	r4, r4, #12
    8148:	e79f      	b.n	808a <__aeabi_dsub+0x14a>
    814a:	002e      	movs	r6, r5
    814c:	e77e      	b.n	804c <__aeabi_dsub+0x10c>
    814e:	0008      	movs	r0, r1
    8150:	4310      	orrs	r0, r2
    8152:	d100      	bne.n	8156 <__aeabi_dsub+0x216>
    8154:	e0ca      	b.n	82ec <__aeabi_dsub+0x3ac>
    8156:	1e58      	subs	r0, r3, #1
    8158:	4684      	mov	ip, r0
    815a:	2800      	cmp	r0, #0
    815c:	d000      	beq.n	8160 <__aeabi_dsub+0x220>
    815e:	e0e7      	b.n	8330 <__aeabi_dsub+0x3f0>
    8160:	4452      	add	r2, sl
    8162:	4552      	cmp	r2, sl
    8164:	4180      	sbcs	r0, r0
    8166:	1864      	adds	r4, r4, r1
    8168:	4240      	negs	r0, r0
    816a:	1824      	adds	r4, r4, r0
    816c:	0017      	movs	r7, r2
    816e:	2601      	movs	r6, #1
    8170:	0223      	lsls	r3, r4, #8
    8172:	d507      	bpl.n	8184 <__aeabi_dsub+0x244>
    8174:	2602      	movs	r6, #2
    8176:	e7cf      	b.n	8118 <__aeabi_dsub+0x1d8>
    8178:	4664      	mov	r4, ip
    817a:	432c      	orrs	r4, r5
    817c:	d100      	bne.n	8180 <__aeabi_dsub+0x240>
    817e:	e1b3      	b.n	84e8 <__aeabi_dsub+0x5a8>
    8180:	002c      	movs	r4, r5
    8182:	4667      	mov	r7, ip
    8184:	077b      	lsls	r3, r7, #29
    8186:	d000      	beq.n	818a <__aeabi_dsub+0x24a>
    8188:	e762      	b.n	8050 <__aeabi_dsub+0x110>
    818a:	0763      	lsls	r3, r4, #29
    818c:	08ff      	lsrs	r7, r7, #3
    818e:	431f      	orrs	r7, r3
    8190:	2501      	movs	r5, #1
    8192:	4643      	mov	r3, r8
    8194:	08e4      	lsrs	r4, r4, #3
    8196:	401d      	ands	r5, r3
    8198:	e793      	b.n	80c2 <__aeabi_dsub+0x182>
    819a:	2d00      	cmp	r5, #0
    819c:	d178      	bne.n	8290 <__aeabi_dsub+0x350>
    819e:	1c75      	adds	r5, r6, #1
    81a0:	056d      	lsls	r5, r5, #21
    81a2:	0d6d      	lsrs	r5, r5, #21
    81a4:	2d01      	cmp	r5, #1
    81a6:	dc00      	bgt.n	81aa <__aeabi_dsub+0x26a>
    81a8:	e0f2      	b.n	8390 <__aeabi_dsub+0x450>
    81aa:	4650      	mov	r0, sl
    81ac:	1a80      	subs	r0, r0, r2
    81ae:	4582      	cmp	sl, r0
    81b0:	41bf      	sbcs	r7, r7
    81b2:	1a65      	subs	r5, r4, r1
    81b4:	427f      	negs	r7, r7
    81b6:	1bed      	subs	r5, r5, r7
    81b8:	4684      	mov	ip, r0
    81ba:	0228      	lsls	r0, r5, #8
    81bc:	d400      	bmi.n	81c0 <__aeabi_dsub+0x280>
    81be:	e08c      	b.n	82da <__aeabi_dsub+0x39a>
    81c0:	4650      	mov	r0, sl
    81c2:	1a17      	subs	r7, r2, r0
    81c4:	42ba      	cmp	r2, r7
    81c6:	4192      	sbcs	r2, r2
    81c8:	1b0c      	subs	r4, r1, r4
    81ca:	4255      	negs	r5, r2
    81cc:	1b65      	subs	r5, r4, r5
    81ce:	4698      	mov	r8, r3
    81d0:	e714      	b.n	7ffc <__aeabi_dsub+0xbc>
    81d2:	2501      	movs	r5, #1
    81d4:	4643      	mov	r3, r8
    81d6:	2400      	movs	r4, #0
    81d8:	401d      	ands	r5, r3
    81da:	2700      	movs	r7, #0
    81dc:	e755      	b.n	808a <__aeabi_dsub+0x14a>
    81de:	4c2a      	ldr	r4, [pc, #168]	; (8288 <__aeabi_dsub+0x348>)
    81e0:	1af6      	subs	r6, r6, r3
    81e2:	402c      	ands	r4, r5
    81e4:	e732      	b.n	804c <__aeabi_dsub+0x10c>
    81e6:	003d      	movs	r5, r7
    81e8:	3828      	subs	r0, #40	; 0x28
    81ea:	4085      	lsls	r5, r0
    81ec:	2700      	movs	r7, #0
    81ee:	e717      	b.n	8020 <__aeabi_dsub+0xe0>
    81f0:	0038      	movs	r0, r7
    81f2:	f000 fb65 	bl	88c0 <__clzsi2>
    81f6:	3020      	adds	r0, #32
    81f8:	e706      	b.n	8008 <__aeabi_dsub+0xc8>
    81fa:	430a      	orrs	r2, r1
    81fc:	0017      	movs	r7, r2
    81fe:	2100      	movs	r1, #0
    8200:	1e7a      	subs	r2, r7, #1
    8202:	4197      	sbcs	r7, r2
    8204:	e6ee      	b.n	7fe4 <__aeabi_dsub+0xa4>
    8206:	2b00      	cmp	r3, #0
    8208:	d000      	beq.n	820c <__aeabi_dsub+0x2cc>
    820a:	e0e5      	b.n	83d8 <__aeabi_dsub+0x498>
    820c:	1c73      	adds	r3, r6, #1
    820e:	469c      	mov	ip, r3
    8210:	055b      	lsls	r3, r3, #21
    8212:	0d5b      	lsrs	r3, r3, #21
    8214:	2b01      	cmp	r3, #1
    8216:	dc00      	bgt.n	821a <__aeabi_dsub+0x2da>
    8218:	e09f      	b.n	835a <__aeabi_dsub+0x41a>
    821a:	4b1a      	ldr	r3, [pc, #104]	; (8284 <__aeabi_dsub+0x344>)
    821c:	459c      	cmp	ip, r3
    821e:	d100      	bne.n	8222 <__aeabi_dsub+0x2e2>
    8220:	e0c5      	b.n	83ae <__aeabi_dsub+0x46e>
    8222:	4452      	add	r2, sl
    8224:	4552      	cmp	r2, sl
    8226:	4180      	sbcs	r0, r0
    8228:	1864      	adds	r4, r4, r1
    822a:	4240      	negs	r0, r0
    822c:	1824      	adds	r4, r4, r0
    822e:	07e7      	lsls	r7, r4, #31
    8230:	0852      	lsrs	r2, r2, #1
    8232:	4317      	orrs	r7, r2
    8234:	0864      	lsrs	r4, r4, #1
    8236:	4666      	mov	r6, ip
    8238:	e708      	b.n	804c <__aeabi_dsub+0x10c>
    823a:	4812      	ldr	r0, [pc, #72]	; (8284 <__aeabi_dsub+0x344>)
    823c:	4285      	cmp	r5, r0
    823e:	d100      	bne.n	8242 <__aeabi_dsub+0x302>
    8240:	e085      	b.n	834e <__aeabi_dsub+0x40e>
    8242:	001d      	movs	r5, r3
    8244:	e6bc      	b.n	7fc0 <__aeabi_dsub+0x80>
    8246:	0029      	movs	r1, r5
    8248:	3e1f      	subs	r6, #31
    824a:	40f1      	lsrs	r1, r6
    824c:	2b20      	cmp	r3, #32
    824e:	d100      	bne.n	8252 <__aeabi_dsub+0x312>
    8250:	e07f      	b.n	8352 <__aeabi_dsub+0x412>
    8252:	2240      	movs	r2, #64	; 0x40
    8254:	1ad3      	subs	r3, r2, r3
    8256:	409d      	lsls	r5, r3
    8258:	432f      	orrs	r7, r5
    825a:	1e7d      	subs	r5, r7, #1
    825c:	41af      	sbcs	r7, r5
    825e:	2400      	movs	r4, #0
    8260:	430f      	orrs	r7, r1
    8262:	2600      	movs	r6, #0
    8264:	e78e      	b.n	8184 <__aeabi_dsub+0x244>
    8266:	002b      	movs	r3, r5
    8268:	000f      	movs	r7, r1
    826a:	3b20      	subs	r3, #32
    826c:	40df      	lsrs	r7, r3
    826e:	2d20      	cmp	r5, #32
    8270:	d071      	beq.n	8356 <__aeabi_dsub+0x416>
    8272:	2340      	movs	r3, #64	; 0x40
    8274:	1b5d      	subs	r5, r3, r5
    8276:	40a9      	lsls	r1, r5
    8278:	430a      	orrs	r2, r1
    827a:	1e51      	subs	r1, r2, #1
    827c:	418a      	sbcs	r2, r1
    827e:	2100      	movs	r1, #0
    8280:	4317      	orrs	r7, r2
    8282:	e6af      	b.n	7fe4 <__aeabi_dsub+0xa4>
    8284:	000007ff 	.word	0x000007ff
    8288:	ff7fffff 	.word	0xff7fffff
    828c:	800fffff 	.word	0x800fffff
    8290:	2e00      	cmp	r6, #0
    8292:	d03e      	beq.n	8312 <__aeabi_dsub+0x3d2>
    8294:	4eb3      	ldr	r6, [pc, #716]	; (8564 <__aeabi_dsub+0x624>)
    8296:	45b4      	cmp	ip, r6
    8298:	d045      	beq.n	8326 <__aeabi_dsub+0x3e6>
    829a:	2680      	movs	r6, #128	; 0x80
    829c:	0436      	lsls	r6, r6, #16
    829e:	426d      	negs	r5, r5
    82a0:	4334      	orrs	r4, r6
    82a2:	2d38      	cmp	r5, #56	; 0x38
    82a4:	dd00      	ble.n	82a8 <__aeabi_dsub+0x368>
    82a6:	e0a8      	b.n	83fa <__aeabi_dsub+0x4ba>
    82a8:	2d1f      	cmp	r5, #31
    82aa:	dd00      	ble.n	82ae <__aeabi_dsub+0x36e>
    82ac:	e11f      	b.n	84ee <__aeabi_dsub+0x5ae>
    82ae:	2620      	movs	r6, #32
    82b0:	0027      	movs	r7, r4
    82b2:	4650      	mov	r0, sl
    82b4:	1b76      	subs	r6, r6, r5
    82b6:	40b7      	lsls	r7, r6
    82b8:	40e8      	lsrs	r0, r5
    82ba:	4307      	orrs	r7, r0
    82bc:	4650      	mov	r0, sl
    82be:	40b0      	lsls	r0, r6
    82c0:	1e46      	subs	r6, r0, #1
    82c2:	41b0      	sbcs	r0, r6
    82c4:	40ec      	lsrs	r4, r5
    82c6:	4338      	orrs	r0, r7
    82c8:	1a17      	subs	r7, r2, r0
    82ca:	42ba      	cmp	r2, r7
    82cc:	4192      	sbcs	r2, r2
    82ce:	1b0c      	subs	r4, r1, r4
    82d0:	4252      	negs	r2, r2
    82d2:	1aa4      	subs	r4, r4, r2
    82d4:	4666      	mov	r6, ip
    82d6:	4698      	mov	r8, r3
    82d8:	e68b      	b.n	7ff2 <__aeabi_dsub+0xb2>
    82da:	4664      	mov	r4, ip
    82dc:	4667      	mov	r7, ip
    82de:	432c      	orrs	r4, r5
    82e0:	d000      	beq.n	82e4 <__aeabi_dsub+0x3a4>
    82e2:	e68b      	b.n	7ffc <__aeabi_dsub+0xbc>
    82e4:	2500      	movs	r5, #0
    82e6:	2600      	movs	r6, #0
    82e8:	2700      	movs	r7, #0
    82ea:	e6ea      	b.n	80c2 <__aeabi_dsub+0x182>
    82ec:	001e      	movs	r6, r3
    82ee:	e6ad      	b.n	804c <__aeabi_dsub+0x10c>
    82f0:	2b1f      	cmp	r3, #31
    82f2:	dc60      	bgt.n	83b6 <__aeabi_dsub+0x476>
    82f4:	2720      	movs	r7, #32
    82f6:	1af8      	subs	r0, r7, r3
    82f8:	000f      	movs	r7, r1
    82fa:	4684      	mov	ip, r0
    82fc:	4087      	lsls	r7, r0
    82fe:	0010      	movs	r0, r2
    8300:	40d8      	lsrs	r0, r3
    8302:	4307      	orrs	r7, r0
    8304:	4660      	mov	r0, ip
    8306:	4082      	lsls	r2, r0
    8308:	1e50      	subs	r0, r2, #1
    830a:	4182      	sbcs	r2, r0
    830c:	40d9      	lsrs	r1, r3
    830e:	4317      	orrs	r7, r2
    8310:	e6f5      	b.n	80fe <__aeabi_dsub+0x1be>
    8312:	0026      	movs	r6, r4
    8314:	4650      	mov	r0, sl
    8316:	4306      	orrs	r6, r0
    8318:	d005      	beq.n	8326 <__aeabi_dsub+0x3e6>
    831a:	43ed      	mvns	r5, r5
    831c:	2d00      	cmp	r5, #0
    831e:	d0d3      	beq.n	82c8 <__aeabi_dsub+0x388>
    8320:	4e90      	ldr	r6, [pc, #576]	; (8564 <__aeabi_dsub+0x624>)
    8322:	45b4      	cmp	ip, r6
    8324:	d1bd      	bne.n	82a2 <__aeabi_dsub+0x362>
    8326:	000c      	movs	r4, r1
    8328:	0017      	movs	r7, r2
    832a:	4666      	mov	r6, ip
    832c:	4698      	mov	r8, r3
    832e:	e68d      	b.n	804c <__aeabi_dsub+0x10c>
    8330:	488c      	ldr	r0, [pc, #560]	; (8564 <__aeabi_dsub+0x624>)
    8332:	4283      	cmp	r3, r0
    8334:	d00b      	beq.n	834e <__aeabi_dsub+0x40e>
    8336:	4663      	mov	r3, ip
    8338:	e6d9      	b.n	80ee <__aeabi_dsub+0x1ae>
    833a:	2d00      	cmp	r5, #0
    833c:	d000      	beq.n	8340 <__aeabi_dsub+0x400>
    833e:	e096      	b.n	846e <__aeabi_dsub+0x52e>
    8340:	0008      	movs	r0, r1
    8342:	4310      	orrs	r0, r2
    8344:	d100      	bne.n	8348 <__aeabi_dsub+0x408>
    8346:	e0e2      	b.n	850e <__aeabi_dsub+0x5ce>
    8348:	000c      	movs	r4, r1
    834a:	0017      	movs	r7, r2
    834c:	4698      	mov	r8, r3
    834e:	4e85      	ldr	r6, [pc, #532]	; (8564 <__aeabi_dsub+0x624>)
    8350:	e67c      	b.n	804c <__aeabi_dsub+0x10c>
    8352:	2500      	movs	r5, #0
    8354:	e780      	b.n	8258 <__aeabi_dsub+0x318>
    8356:	2100      	movs	r1, #0
    8358:	e78e      	b.n	8278 <__aeabi_dsub+0x338>
    835a:	0023      	movs	r3, r4
    835c:	4650      	mov	r0, sl
    835e:	4303      	orrs	r3, r0
    8360:	2e00      	cmp	r6, #0
    8362:	d000      	beq.n	8366 <__aeabi_dsub+0x426>
    8364:	e0a8      	b.n	84b8 <__aeabi_dsub+0x578>
    8366:	2b00      	cmp	r3, #0
    8368:	d100      	bne.n	836c <__aeabi_dsub+0x42c>
    836a:	e0de      	b.n	852a <__aeabi_dsub+0x5ea>
    836c:	000b      	movs	r3, r1
    836e:	4313      	orrs	r3, r2
    8370:	d100      	bne.n	8374 <__aeabi_dsub+0x434>
    8372:	e66b      	b.n	804c <__aeabi_dsub+0x10c>
    8374:	4452      	add	r2, sl
    8376:	4552      	cmp	r2, sl
    8378:	4180      	sbcs	r0, r0
    837a:	1864      	adds	r4, r4, r1
    837c:	4240      	negs	r0, r0
    837e:	1824      	adds	r4, r4, r0
    8380:	0017      	movs	r7, r2
    8382:	0223      	lsls	r3, r4, #8
    8384:	d400      	bmi.n	8388 <__aeabi_dsub+0x448>
    8386:	e6fd      	b.n	8184 <__aeabi_dsub+0x244>
    8388:	4b77      	ldr	r3, [pc, #476]	; (8568 <__aeabi_dsub+0x628>)
    838a:	4666      	mov	r6, ip
    838c:	401c      	ands	r4, r3
    838e:	e65d      	b.n	804c <__aeabi_dsub+0x10c>
    8390:	0025      	movs	r5, r4
    8392:	4650      	mov	r0, sl
    8394:	4305      	orrs	r5, r0
    8396:	2e00      	cmp	r6, #0
    8398:	d1cf      	bne.n	833a <__aeabi_dsub+0x3fa>
    839a:	2d00      	cmp	r5, #0
    839c:	d14f      	bne.n	843e <__aeabi_dsub+0x4fe>
    839e:	000c      	movs	r4, r1
    83a0:	4314      	orrs	r4, r2
    83a2:	d100      	bne.n	83a6 <__aeabi_dsub+0x466>
    83a4:	e0a0      	b.n	84e8 <__aeabi_dsub+0x5a8>
    83a6:	000c      	movs	r4, r1
    83a8:	0017      	movs	r7, r2
    83aa:	4698      	mov	r8, r3
    83ac:	e64e      	b.n	804c <__aeabi_dsub+0x10c>
    83ae:	4666      	mov	r6, ip
    83b0:	2400      	movs	r4, #0
    83b2:	2700      	movs	r7, #0
    83b4:	e685      	b.n	80c2 <__aeabi_dsub+0x182>
    83b6:	001f      	movs	r7, r3
    83b8:	0008      	movs	r0, r1
    83ba:	3f20      	subs	r7, #32
    83bc:	40f8      	lsrs	r0, r7
    83be:	0007      	movs	r7, r0
    83c0:	2b20      	cmp	r3, #32
    83c2:	d100      	bne.n	83c6 <__aeabi_dsub+0x486>
    83c4:	e08e      	b.n	84e4 <__aeabi_dsub+0x5a4>
    83c6:	2040      	movs	r0, #64	; 0x40
    83c8:	1ac3      	subs	r3, r0, r3
    83ca:	4099      	lsls	r1, r3
    83cc:	430a      	orrs	r2, r1
    83ce:	1e51      	subs	r1, r2, #1
    83d0:	418a      	sbcs	r2, r1
    83d2:	2100      	movs	r1, #0
    83d4:	4317      	orrs	r7, r2
    83d6:	e692      	b.n	80fe <__aeabi_dsub+0x1be>
    83d8:	2e00      	cmp	r6, #0
    83da:	d114      	bne.n	8406 <__aeabi_dsub+0x4c6>
    83dc:	0026      	movs	r6, r4
    83de:	4650      	mov	r0, sl
    83e0:	4306      	orrs	r6, r0
    83e2:	d062      	beq.n	84aa <__aeabi_dsub+0x56a>
    83e4:	43db      	mvns	r3, r3
    83e6:	2b00      	cmp	r3, #0
    83e8:	d15c      	bne.n	84a4 <__aeabi_dsub+0x564>
    83ea:	1887      	adds	r7, r0, r2
    83ec:	4297      	cmp	r7, r2
    83ee:	4192      	sbcs	r2, r2
    83f0:	1864      	adds	r4, r4, r1
    83f2:	4252      	negs	r2, r2
    83f4:	18a4      	adds	r4, r4, r2
    83f6:	4666      	mov	r6, ip
    83f8:	e687      	b.n	810a <__aeabi_dsub+0x1ca>
    83fa:	4650      	mov	r0, sl
    83fc:	4320      	orrs	r0, r4
    83fe:	1e44      	subs	r4, r0, #1
    8400:	41a0      	sbcs	r0, r4
    8402:	2400      	movs	r4, #0
    8404:	e760      	b.n	82c8 <__aeabi_dsub+0x388>
    8406:	4e57      	ldr	r6, [pc, #348]	; (8564 <__aeabi_dsub+0x624>)
    8408:	45b4      	cmp	ip, r6
    840a:	d04e      	beq.n	84aa <__aeabi_dsub+0x56a>
    840c:	2680      	movs	r6, #128	; 0x80
    840e:	0436      	lsls	r6, r6, #16
    8410:	425b      	negs	r3, r3
    8412:	4334      	orrs	r4, r6
    8414:	2b38      	cmp	r3, #56	; 0x38
    8416:	dd00      	ble.n	841a <__aeabi_dsub+0x4da>
    8418:	e07f      	b.n	851a <__aeabi_dsub+0x5da>
    841a:	2b1f      	cmp	r3, #31
    841c:	dd00      	ble.n	8420 <__aeabi_dsub+0x4e0>
    841e:	e08b      	b.n	8538 <__aeabi_dsub+0x5f8>
    8420:	2620      	movs	r6, #32
    8422:	0027      	movs	r7, r4
    8424:	4650      	mov	r0, sl
    8426:	1af6      	subs	r6, r6, r3
    8428:	40b7      	lsls	r7, r6
    842a:	40d8      	lsrs	r0, r3
    842c:	4307      	orrs	r7, r0
    842e:	4650      	mov	r0, sl
    8430:	40b0      	lsls	r0, r6
    8432:	1e46      	subs	r6, r0, #1
    8434:	41b0      	sbcs	r0, r6
    8436:	4307      	orrs	r7, r0
    8438:	40dc      	lsrs	r4, r3
    843a:	18bf      	adds	r7, r7, r2
    843c:	e7d6      	b.n	83ec <__aeabi_dsub+0x4ac>
    843e:	000d      	movs	r5, r1
    8440:	4315      	orrs	r5, r2
    8442:	d100      	bne.n	8446 <__aeabi_dsub+0x506>
    8444:	e602      	b.n	804c <__aeabi_dsub+0x10c>
    8446:	4650      	mov	r0, sl
    8448:	1a80      	subs	r0, r0, r2
    844a:	4582      	cmp	sl, r0
    844c:	41bf      	sbcs	r7, r7
    844e:	1a65      	subs	r5, r4, r1
    8450:	427f      	negs	r7, r7
    8452:	1bed      	subs	r5, r5, r7
    8454:	4684      	mov	ip, r0
    8456:	0228      	lsls	r0, r5, #8
    8458:	d400      	bmi.n	845c <__aeabi_dsub+0x51c>
    845a:	e68d      	b.n	8178 <__aeabi_dsub+0x238>
    845c:	4650      	mov	r0, sl
    845e:	1a17      	subs	r7, r2, r0
    8460:	42ba      	cmp	r2, r7
    8462:	4192      	sbcs	r2, r2
    8464:	1b0c      	subs	r4, r1, r4
    8466:	4252      	negs	r2, r2
    8468:	1aa4      	subs	r4, r4, r2
    846a:	4698      	mov	r8, r3
    846c:	e5ee      	b.n	804c <__aeabi_dsub+0x10c>
    846e:	000d      	movs	r5, r1
    8470:	4315      	orrs	r5, r2
    8472:	d100      	bne.n	8476 <__aeabi_dsub+0x536>
    8474:	e76b      	b.n	834e <__aeabi_dsub+0x40e>
    8476:	4650      	mov	r0, sl
    8478:	0767      	lsls	r7, r4, #29
    847a:	08c0      	lsrs	r0, r0, #3
    847c:	4307      	orrs	r7, r0
    847e:	2080      	movs	r0, #128	; 0x80
    8480:	08e4      	lsrs	r4, r4, #3
    8482:	0300      	lsls	r0, r0, #12
    8484:	4204      	tst	r4, r0
    8486:	d007      	beq.n	8498 <__aeabi_dsub+0x558>
    8488:	08cd      	lsrs	r5, r1, #3
    848a:	4205      	tst	r5, r0
    848c:	d104      	bne.n	8498 <__aeabi_dsub+0x558>
    848e:	002c      	movs	r4, r5
    8490:	4698      	mov	r8, r3
    8492:	08d7      	lsrs	r7, r2, #3
    8494:	0749      	lsls	r1, r1, #29
    8496:	430f      	orrs	r7, r1
    8498:	0f7b      	lsrs	r3, r7, #29
    849a:	00e4      	lsls	r4, r4, #3
    849c:	431c      	orrs	r4, r3
    849e:	00ff      	lsls	r7, r7, #3
    84a0:	4e30      	ldr	r6, [pc, #192]	; (8564 <__aeabi_dsub+0x624>)
    84a2:	e5d3      	b.n	804c <__aeabi_dsub+0x10c>
    84a4:	4e2f      	ldr	r6, [pc, #188]	; (8564 <__aeabi_dsub+0x624>)
    84a6:	45b4      	cmp	ip, r6
    84a8:	d1b4      	bne.n	8414 <__aeabi_dsub+0x4d4>
    84aa:	000c      	movs	r4, r1
    84ac:	0017      	movs	r7, r2
    84ae:	4666      	mov	r6, ip
    84b0:	e5cc      	b.n	804c <__aeabi_dsub+0x10c>
    84b2:	2700      	movs	r7, #0
    84b4:	2400      	movs	r4, #0
    84b6:	e5e8      	b.n	808a <__aeabi_dsub+0x14a>
    84b8:	2b00      	cmp	r3, #0
    84ba:	d039      	beq.n	8530 <__aeabi_dsub+0x5f0>
    84bc:	000b      	movs	r3, r1
    84be:	4313      	orrs	r3, r2
    84c0:	d100      	bne.n	84c4 <__aeabi_dsub+0x584>
    84c2:	e744      	b.n	834e <__aeabi_dsub+0x40e>
    84c4:	08c0      	lsrs	r0, r0, #3
    84c6:	0767      	lsls	r7, r4, #29
    84c8:	4307      	orrs	r7, r0
    84ca:	2080      	movs	r0, #128	; 0x80
    84cc:	08e4      	lsrs	r4, r4, #3
    84ce:	0300      	lsls	r0, r0, #12
    84d0:	4204      	tst	r4, r0
    84d2:	d0e1      	beq.n	8498 <__aeabi_dsub+0x558>
    84d4:	08cb      	lsrs	r3, r1, #3
    84d6:	4203      	tst	r3, r0
    84d8:	d1de      	bne.n	8498 <__aeabi_dsub+0x558>
    84da:	08d7      	lsrs	r7, r2, #3
    84dc:	0749      	lsls	r1, r1, #29
    84de:	430f      	orrs	r7, r1
    84e0:	001c      	movs	r4, r3
    84e2:	e7d9      	b.n	8498 <__aeabi_dsub+0x558>
    84e4:	2100      	movs	r1, #0
    84e6:	e771      	b.n	83cc <__aeabi_dsub+0x48c>
    84e8:	2500      	movs	r5, #0
    84ea:	2700      	movs	r7, #0
    84ec:	e5e9      	b.n	80c2 <__aeabi_dsub+0x182>
    84ee:	002e      	movs	r6, r5
    84f0:	0027      	movs	r7, r4
    84f2:	3e20      	subs	r6, #32
    84f4:	40f7      	lsrs	r7, r6
    84f6:	2d20      	cmp	r5, #32
    84f8:	d02f      	beq.n	855a <__aeabi_dsub+0x61a>
    84fa:	2640      	movs	r6, #64	; 0x40
    84fc:	1b75      	subs	r5, r6, r5
    84fe:	40ac      	lsls	r4, r5
    8500:	4650      	mov	r0, sl
    8502:	4320      	orrs	r0, r4
    8504:	1e44      	subs	r4, r0, #1
    8506:	41a0      	sbcs	r0, r4
    8508:	2400      	movs	r4, #0
    850a:	4338      	orrs	r0, r7
    850c:	e6dc      	b.n	82c8 <__aeabi_dsub+0x388>
    850e:	2480      	movs	r4, #128	; 0x80
    8510:	2500      	movs	r5, #0
    8512:	0324      	lsls	r4, r4, #12
    8514:	4e13      	ldr	r6, [pc, #76]	; (8564 <__aeabi_dsub+0x624>)
    8516:	2700      	movs	r7, #0
    8518:	e5d3      	b.n	80c2 <__aeabi_dsub+0x182>
    851a:	4650      	mov	r0, sl
    851c:	4320      	orrs	r0, r4
    851e:	0007      	movs	r7, r0
    8520:	1e78      	subs	r0, r7, #1
    8522:	4187      	sbcs	r7, r0
    8524:	2400      	movs	r4, #0
    8526:	18bf      	adds	r7, r7, r2
    8528:	e760      	b.n	83ec <__aeabi_dsub+0x4ac>
    852a:	000c      	movs	r4, r1
    852c:	0017      	movs	r7, r2
    852e:	e58d      	b.n	804c <__aeabi_dsub+0x10c>
    8530:	000c      	movs	r4, r1
    8532:	0017      	movs	r7, r2
    8534:	4e0b      	ldr	r6, [pc, #44]	; (8564 <__aeabi_dsub+0x624>)
    8536:	e589      	b.n	804c <__aeabi_dsub+0x10c>
    8538:	001e      	movs	r6, r3
    853a:	0027      	movs	r7, r4
    853c:	3e20      	subs	r6, #32
    853e:	40f7      	lsrs	r7, r6
    8540:	2b20      	cmp	r3, #32
    8542:	d00c      	beq.n	855e <__aeabi_dsub+0x61e>
    8544:	2640      	movs	r6, #64	; 0x40
    8546:	1af3      	subs	r3, r6, r3
    8548:	409c      	lsls	r4, r3
    854a:	4650      	mov	r0, sl
    854c:	4320      	orrs	r0, r4
    854e:	1e44      	subs	r4, r0, #1
    8550:	41a0      	sbcs	r0, r4
    8552:	4307      	orrs	r7, r0
    8554:	2400      	movs	r4, #0
    8556:	18bf      	adds	r7, r7, r2
    8558:	e748      	b.n	83ec <__aeabi_dsub+0x4ac>
    855a:	2400      	movs	r4, #0
    855c:	e7d0      	b.n	8500 <__aeabi_dsub+0x5c0>
    855e:	2400      	movs	r4, #0
    8560:	e7f3      	b.n	854a <__aeabi_dsub+0x60a>
    8562:	46c0      	nop			; (mov r8, r8)
    8564:	000007ff 	.word	0x000007ff
    8568:	ff7fffff 	.word	0xff7fffff

0000856c <__aeabi_dcmpun>:
    856c:	b570      	push	{r4, r5, r6, lr}
    856e:	4e0e      	ldr	r6, [pc, #56]	; (85a8 <__aeabi_dcmpun+0x3c>)
    8570:	030d      	lsls	r5, r1, #12
    8572:	031c      	lsls	r4, r3, #12
    8574:	0049      	lsls	r1, r1, #1
    8576:	005b      	lsls	r3, r3, #1
    8578:	0b2d      	lsrs	r5, r5, #12
    857a:	0d49      	lsrs	r1, r1, #21
    857c:	0b24      	lsrs	r4, r4, #12
    857e:	0d5b      	lsrs	r3, r3, #21
    8580:	42b1      	cmp	r1, r6
    8582:	d004      	beq.n	858e <__aeabi_dcmpun+0x22>
    8584:	4908      	ldr	r1, [pc, #32]	; (85a8 <__aeabi_dcmpun+0x3c>)
    8586:	2000      	movs	r0, #0
    8588:	428b      	cmp	r3, r1
    858a:	d008      	beq.n	859e <__aeabi_dcmpun+0x32>
    858c:	bd70      	pop	{r4, r5, r6, pc}
    858e:	4305      	orrs	r5, r0
    8590:	2001      	movs	r0, #1
    8592:	2d00      	cmp	r5, #0
    8594:	d1fa      	bne.n	858c <__aeabi_dcmpun+0x20>
    8596:	4904      	ldr	r1, [pc, #16]	; (85a8 <__aeabi_dcmpun+0x3c>)
    8598:	2000      	movs	r0, #0
    859a:	428b      	cmp	r3, r1
    859c:	d1f6      	bne.n	858c <__aeabi_dcmpun+0x20>
    859e:	4314      	orrs	r4, r2
    85a0:	0020      	movs	r0, r4
    85a2:	1e44      	subs	r4, r0, #1
    85a4:	41a0      	sbcs	r0, r4
    85a6:	e7f1      	b.n	858c <__aeabi_dcmpun+0x20>
    85a8:	000007ff 	.word	0x000007ff

000085ac <__aeabi_d2iz>:
    85ac:	b530      	push	{r4, r5, lr}
    85ae:	4d13      	ldr	r5, [pc, #76]	; (85fc <__aeabi_d2iz+0x50>)
    85b0:	030a      	lsls	r2, r1, #12
    85b2:	004b      	lsls	r3, r1, #1
    85b4:	0b12      	lsrs	r2, r2, #12
    85b6:	0d5b      	lsrs	r3, r3, #21
    85b8:	0fc9      	lsrs	r1, r1, #31
    85ba:	2400      	movs	r4, #0
    85bc:	42ab      	cmp	r3, r5
    85be:	dd10      	ble.n	85e2 <__aeabi_d2iz+0x36>
    85c0:	4c0f      	ldr	r4, [pc, #60]	; (8600 <__aeabi_d2iz+0x54>)
    85c2:	42a3      	cmp	r3, r4
    85c4:	dc0f      	bgt.n	85e6 <__aeabi_d2iz+0x3a>
    85c6:	2480      	movs	r4, #128	; 0x80
    85c8:	4d0e      	ldr	r5, [pc, #56]	; (8604 <__aeabi_d2iz+0x58>)
    85ca:	0364      	lsls	r4, r4, #13
    85cc:	4322      	orrs	r2, r4
    85ce:	1aed      	subs	r5, r5, r3
    85d0:	2d1f      	cmp	r5, #31
    85d2:	dd0b      	ble.n	85ec <__aeabi_d2iz+0x40>
    85d4:	480c      	ldr	r0, [pc, #48]	; (8608 <__aeabi_d2iz+0x5c>)
    85d6:	1ac3      	subs	r3, r0, r3
    85d8:	40da      	lsrs	r2, r3
    85da:	4254      	negs	r4, r2
    85dc:	2900      	cmp	r1, #0
    85de:	d100      	bne.n	85e2 <__aeabi_d2iz+0x36>
    85e0:	0014      	movs	r4, r2
    85e2:	0020      	movs	r0, r4
    85e4:	bd30      	pop	{r4, r5, pc}
    85e6:	4b09      	ldr	r3, [pc, #36]	; (860c <__aeabi_d2iz+0x60>)
    85e8:	18cc      	adds	r4, r1, r3
    85ea:	e7fa      	b.n	85e2 <__aeabi_d2iz+0x36>
    85ec:	4c08      	ldr	r4, [pc, #32]	; (8610 <__aeabi_d2iz+0x64>)
    85ee:	40e8      	lsrs	r0, r5
    85f0:	46a4      	mov	ip, r4
    85f2:	4463      	add	r3, ip
    85f4:	409a      	lsls	r2, r3
    85f6:	4302      	orrs	r2, r0
    85f8:	e7ef      	b.n	85da <__aeabi_d2iz+0x2e>
    85fa:	46c0      	nop			; (mov r8, r8)
    85fc:	000003fe 	.word	0x000003fe
    8600:	0000041d 	.word	0x0000041d
    8604:	00000433 	.word	0x00000433
    8608:	00000413 	.word	0x00000413
    860c:	7fffffff 	.word	0x7fffffff
    8610:	fffffbed 	.word	0xfffffbed

00008614 <__aeabi_i2d>:
    8614:	b570      	push	{r4, r5, r6, lr}
    8616:	2800      	cmp	r0, #0
    8618:	d030      	beq.n	867c <__aeabi_i2d+0x68>
    861a:	17c3      	asrs	r3, r0, #31
    861c:	18c4      	adds	r4, r0, r3
    861e:	405c      	eors	r4, r3
    8620:	0fc5      	lsrs	r5, r0, #31
    8622:	0020      	movs	r0, r4
    8624:	f000 f94c 	bl	88c0 <__clzsi2>
    8628:	4b17      	ldr	r3, [pc, #92]	; (8688 <__aeabi_i2d+0x74>)
    862a:	4a18      	ldr	r2, [pc, #96]	; (868c <__aeabi_i2d+0x78>)
    862c:	1a1b      	subs	r3, r3, r0
    862e:	1ad2      	subs	r2, r2, r3
    8630:	2a1f      	cmp	r2, #31
    8632:	dd18      	ble.n	8666 <__aeabi_i2d+0x52>
    8634:	4a16      	ldr	r2, [pc, #88]	; (8690 <__aeabi_i2d+0x7c>)
    8636:	1ad2      	subs	r2, r2, r3
    8638:	4094      	lsls	r4, r2
    863a:	2200      	movs	r2, #0
    863c:	0324      	lsls	r4, r4, #12
    863e:	055b      	lsls	r3, r3, #21
    8640:	0b24      	lsrs	r4, r4, #12
    8642:	0d5b      	lsrs	r3, r3, #21
    8644:	2100      	movs	r1, #0
    8646:	0010      	movs	r0, r2
    8648:	0324      	lsls	r4, r4, #12
    864a:	0d0a      	lsrs	r2, r1, #20
    864c:	0b24      	lsrs	r4, r4, #12
    864e:	0512      	lsls	r2, r2, #20
    8650:	4322      	orrs	r2, r4
    8652:	4c10      	ldr	r4, [pc, #64]	; (8694 <__aeabi_i2d+0x80>)
    8654:	051b      	lsls	r3, r3, #20
    8656:	4022      	ands	r2, r4
    8658:	4313      	orrs	r3, r2
    865a:	005b      	lsls	r3, r3, #1
    865c:	07ed      	lsls	r5, r5, #31
    865e:	085b      	lsrs	r3, r3, #1
    8660:	432b      	orrs	r3, r5
    8662:	0019      	movs	r1, r3
    8664:	bd70      	pop	{r4, r5, r6, pc}
    8666:	0021      	movs	r1, r4
    8668:	4091      	lsls	r1, r2
    866a:	000a      	movs	r2, r1
    866c:	210b      	movs	r1, #11
    866e:	1a08      	subs	r0, r1, r0
    8670:	40c4      	lsrs	r4, r0
    8672:	055b      	lsls	r3, r3, #21
    8674:	0324      	lsls	r4, r4, #12
    8676:	0b24      	lsrs	r4, r4, #12
    8678:	0d5b      	lsrs	r3, r3, #21
    867a:	e7e3      	b.n	8644 <__aeabi_i2d+0x30>
    867c:	2500      	movs	r5, #0
    867e:	2300      	movs	r3, #0
    8680:	2400      	movs	r4, #0
    8682:	2200      	movs	r2, #0
    8684:	e7de      	b.n	8644 <__aeabi_i2d+0x30>
    8686:	46c0      	nop			; (mov r8, r8)
    8688:	0000041e 	.word	0x0000041e
    868c:	00000433 	.word	0x00000433
    8690:	00000413 	.word	0x00000413
    8694:	800fffff 	.word	0x800fffff

00008698 <__aeabi_ui2d>:
    8698:	b510      	push	{r4, lr}
    869a:	1e04      	subs	r4, r0, #0
    869c:	d028      	beq.n	86f0 <__aeabi_ui2d+0x58>
    869e:	f000 f90f 	bl	88c0 <__clzsi2>
    86a2:	4b15      	ldr	r3, [pc, #84]	; (86f8 <__aeabi_ui2d+0x60>)
    86a4:	4a15      	ldr	r2, [pc, #84]	; (86fc <__aeabi_ui2d+0x64>)
    86a6:	1a1b      	subs	r3, r3, r0
    86a8:	1ad2      	subs	r2, r2, r3
    86aa:	2a1f      	cmp	r2, #31
    86ac:	dd15      	ble.n	86da <__aeabi_ui2d+0x42>
    86ae:	4a14      	ldr	r2, [pc, #80]	; (8700 <__aeabi_ui2d+0x68>)
    86b0:	1ad2      	subs	r2, r2, r3
    86b2:	4094      	lsls	r4, r2
    86b4:	2200      	movs	r2, #0
    86b6:	0324      	lsls	r4, r4, #12
    86b8:	055b      	lsls	r3, r3, #21
    86ba:	0b24      	lsrs	r4, r4, #12
    86bc:	0d5b      	lsrs	r3, r3, #21
    86be:	2100      	movs	r1, #0
    86c0:	0010      	movs	r0, r2
    86c2:	0324      	lsls	r4, r4, #12
    86c4:	0d0a      	lsrs	r2, r1, #20
    86c6:	0b24      	lsrs	r4, r4, #12
    86c8:	0512      	lsls	r2, r2, #20
    86ca:	4322      	orrs	r2, r4
    86cc:	4c0d      	ldr	r4, [pc, #52]	; (8704 <__aeabi_ui2d+0x6c>)
    86ce:	051b      	lsls	r3, r3, #20
    86d0:	4022      	ands	r2, r4
    86d2:	4313      	orrs	r3, r2
    86d4:	005b      	lsls	r3, r3, #1
    86d6:	0859      	lsrs	r1, r3, #1
    86d8:	bd10      	pop	{r4, pc}
    86da:	0021      	movs	r1, r4
    86dc:	4091      	lsls	r1, r2
    86de:	000a      	movs	r2, r1
    86e0:	210b      	movs	r1, #11
    86e2:	1a08      	subs	r0, r1, r0
    86e4:	40c4      	lsrs	r4, r0
    86e6:	055b      	lsls	r3, r3, #21
    86e8:	0324      	lsls	r4, r4, #12
    86ea:	0b24      	lsrs	r4, r4, #12
    86ec:	0d5b      	lsrs	r3, r3, #21
    86ee:	e7e6      	b.n	86be <__aeabi_ui2d+0x26>
    86f0:	2300      	movs	r3, #0
    86f2:	2400      	movs	r4, #0
    86f4:	2200      	movs	r2, #0
    86f6:	e7e2      	b.n	86be <__aeabi_ui2d+0x26>
    86f8:	0000041e 	.word	0x0000041e
    86fc:	00000433 	.word	0x00000433
    8700:	00000413 	.word	0x00000413
    8704:	800fffff 	.word	0x800fffff

00008708 <__aeabi_f2d>:
    8708:	0041      	lsls	r1, r0, #1
    870a:	0e09      	lsrs	r1, r1, #24
    870c:	1c4b      	adds	r3, r1, #1
    870e:	b570      	push	{r4, r5, r6, lr}
    8710:	b2db      	uxtb	r3, r3
    8712:	0246      	lsls	r6, r0, #9
    8714:	0a75      	lsrs	r5, r6, #9
    8716:	0fc4      	lsrs	r4, r0, #31
    8718:	2b01      	cmp	r3, #1
    871a:	dd14      	ble.n	8746 <__aeabi_f2d+0x3e>
    871c:	23e0      	movs	r3, #224	; 0xe0
    871e:	009b      	lsls	r3, r3, #2
    8720:	076d      	lsls	r5, r5, #29
    8722:	0b36      	lsrs	r6, r6, #12
    8724:	18cb      	adds	r3, r1, r3
    8726:	2100      	movs	r1, #0
    8728:	0d0a      	lsrs	r2, r1, #20
    872a:	0028      	movs	r0, r5
    872c:	0512      	lsls	r2, r2, #20
    872e:	4d1c      	ldr	r5, [pc, #112]	; (87a0 <__aeabi_f2d+0x98>)
    8730:	4332      	orrs	r2, r6
    8732:	055b      	lsls	r3, r3, #21
    8734:	402a      	ands	r2, r5
    8736:	085b      	lsrs	r3, r3, #1
    8738:	4313      	orrs	r3, r2
    873a:	005b      	lsls	r3, r3, #1
    873c:	07e4      	lsls	r4, r4, #31
    873e:	085b      	lsrs	r3, r3, #1
    8740:	4323      	orrs	r3, r4
    8742:	0019      	movs	r1, r3
    8744:	bd70      	pop	{r4, r5, r6, pc}
    8746:	2900      	cmp	r1, #0
    8748:	d114      	bne.n	8774 <__aeabi_f2d+0x6c>
    874a:	2d00      	cmp	r5, #0
    874c:	d01e      	beq.n	878c <__aeabi_f2d+0x84>
    874e:	0028      	movs	r0, r5
    8750:	f000 f8b6 	bl	88c0 <__clzsi2>
    8754:	280a      	cmp	r0, #10
    8756:	dc1c      	bgt.n	8792 <__aeabi_f2d+0x8a>
    8758:	230b      	movs	r3, #11
    875a:	002a      	movs	r2, r5
    875c:	1a1b      	subs	r3, r3, r0
    875e:	40da      	lsrs	r2, r3
    8760:	0003      	movs	r3, r0
    8762:	3315      	adds	r3, #21
    8764:	409d      	lsls	r5, r3
    8766:	4b0f      	ldr	r3, [pc, #60]	; (87a4 <__aeabi_f2d+0x9c>)
    8768:	0312      	lsls	r2, r2, #12
    876a:	1a1b      	subs	r3, r3, r0
    876c:	055b      	lsls	r3, r3, #21
    876e:	0b16      	lsrs	r6, r2, #12
    8770:	0d5b      	lsrs	r3, r3, #21
    8772:	e7d8      	b.n	8726 <__aeabi_f2d+0x1e>
    8774:	2d00      	cmp	r5, #0
    8776:	d006      	beq.n	8786 <__aeabi_f2d+0x7e>
    8778:	0b32      	lsrs	r2, r6, #12
    877a:	2680      	movs	r6, #128	; 0x80
    877c:	0336      	lsls	r6, r6, #12
    877e:	076d      	lsls	r5, r5, #29
    8780:	4316      	orrs	r6, r2
    8782:	4b09      	ldr	r3, [pc, #36]	; (87a8 <__aeabi_f2d+0xa0>)
    8784:	e7cf      	b.n	8726 <__aeabi_f2d+0x1e>
    8786:	4b08      	ldr	r3, [pc, #32]	; (87a8 <__aeabi_f2d+0xa0>)
    8788:	2600      	movs	r6, #0
    878a:	e7cc      	b.n	8726 <__aeabi_f2d+0x1e>
    878c:	2300      	movs	r3, #0
    878e:	2600      	movs	r6, #0
    8790:	e7c9      	b.n	8726 <__aeabi_f2d+0x1e>
    8792:	0003      	movs	r3, r0
    8794:	002a      	movs	r2, r5
    8796:	3b0b      	subs	r3, #11
    8798:	409a      	lsls	r2, r3
    879a:	2500      	movs	r5, #0
    879c:	e7e3      	b.n	8766 <__aeabi_f2d+0x5e>
    879e:	46c0      	nop			; (mov r8, r8)
    87a0:	800fffff 	.word	0x800fffff
    87a4:	00000389 	.word	0x00000389
    87a8:	000007ff 	.word	0x000007ff

000087ac <__aeabi_d2f>:
    87ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    87ae:	004c      	lsls	r4, r1, #1
    87b0:	0d64      	lsrs	r4, r4, #21
    87b2:	030b      	lsls	r3, r1, #12
    87b4:	1c62      	adds	r2, r4, #1
    87b6:	0f45      	lsrs	r5, r0, #29
    87b8:	0a5b      	lsrs	r3, r3, #9
    87ba:	0552      	lsls	r2, r2, #21
    87bc:	432b      	orrs	r3, r5
    87be:	0fc9      	lsrs	r1, r1, #31
    87c0:	00c5      	lsls	r5, r0, #3
    87c2:	0d52      	lsrs	r2, r2, #21
    87c4:	2a01      	cmp	r2, #1
    87c6:	dd28      	ble.n	881a <__aeabi_d2f+0x6e>
    87c8:	4a3a      	ldr	r2, [pc, #232]	; (88b4 <__aeabi_d2f+0x108>)
    87ca:	18a6      	adds	r6, r4, r2
    87cc:	2efe      	cmp	r6, #254	; 0xfe
    87ce:	dc1b      	bgt.n	8808 <__aeabi_d2f+0x5c>
    87d0:	2e00      	cmp	r6, #0
    87d2:	dd3e      	ble.n	8852 <__aeabi_d2f+0xa6>
    87d4:	0180      	lsls	r0, r0, #6
    87d6:	0002      	movs	r2, r0
    87d8:	1e50      	subs	r0, r2, #1
    87da:	4182      	sbcs	r2, r0
    87dc:	0f6d      	lsrs	r5, r5, #29
    87de:	432a      	orrs	r2, r5
    87e0:	00db      	lsls	r3, r3, #3
    87e2:	4313      	orrs	r3, r2
    87e4:	075a      	lsls	r2, r3, #29
    87e6:	d004      	beq.n	87f2 <__aeabi_d2f+0x46>
    87e8:	220f      	movs	r2, #15
    87ea:	401a      	ands	r2, r3
    87ec:	2a04      	cmp	r2, #4
    87ee:	d000      	beq.n	87f2 <__aeabi_d2f+0x46>
    87f0:	3304      	adds	r3, #4
    87f2:	2280      	movs	r2, #128	; 0x80
    87f4:	04d2      	lsls	r2, r2, #19
    87f6:	401a      	ands	r2, r3
    87f8:	d05a      	beq.n	88b0 <__aeabi_d2f+0x104>
    87fa:	3601      	adds	r6, #1
    87fc:	2eff      	cmp	r6, #255	; 0xff
    87fe:	d003      	beq.n	8808 <__aeabi_d2f+0x5c>
    8800:	019b      	lsls	r3, r3, #6
    8802:	0a5b      	lsrs	r3, r3, #9
    8804:	b2f4      	uxtb	r4, r6
    8806:	e001      	b.n	880c <__aeabi_d2f+0x60>
    8808:	24ff      	movs	r4, #255	; 0xff
    880a:	2300      	movs	r3, #0
    880c:	0258      	lsls	r0, r3, #9
    880e:	05e4      	lsls	r4, r4, #23
    8810:	0a40      	lsrs	r0, r0, #9
    8812:	07c9      	lsls	r1, r1, #31
    8814:	4320      	orrs	r0, r4
    8816:	4308      	orrs	r0, r1
    8818:	bdf0      	pop	{r4, r5, r6, r7, pc}
    881a:	2c00      	cmp	r4, #0
    881c:	d007      	beq.n	882e <__aeabi_d2f+0x82>
    881e:	431d      	orrs	r5, r3
    8820:	d0f2      	beq.n	8808 <__aeabi_d2f+0x5c>
    8822:	2080      	movs	r0, #128	; 0x80
    8824:	00db      	lsls	r3, r3, #3
    8826:	0480      	lsls	r0, r0, #18
    8828:	4303      	orrs	r3, r0
    882a:	26ff      	movs	r6, #255	; 0xff
    882c:	e7da      	b.n	87e4 <__aeabi_d2f+0x38>
    882e:	432b      	orrs	r3, r5
    8830:	d003      	beq.n	883a <__aeabi_d2f+0x8e>
    8832:	2305      	movs	r3, #5
    8834:	08db      	lsrs	r3, r3, #3
    8836:	2cff      	cmp	r4, #255	; 0xff
    8838:	d003      	beq.n	8842 <__aeabi_d2f+0x96>
    883a:	025b      	lsls	r3, r3, #9
    883c:	0a5b      	lsrs	r3, r3, #9
    883e:	b2e4      	uxtb	r4, r4
    8840:	e7e4      	b.n	880c <__aeabi_d2f+0x60>
    8842:	2b00      	cmp	r3, #0
    8844:	d032      	beq.n	88ac <__aeabi_d2f+0x100>
    8846:	2080      	movs	r0, #128	; 0x80
    8848:	03c0      	lsls	r0, r0, #15
    884a:	4303      	orrs	r3, r0
    884c:	025b      	lsls	r3, r3, #9
    884e:	0a5b      	lsrs	r3, r3, #9
    8850:	e7dc      	b.n	880c <__aeabi_d2f+0x60>
    8852:	0032      	movs	r2, r6
    8854:	3217      	adds	r2, #23
    8856:	db14      	blt.n	8882 <__aeabi_d2f+0xd6>
    8858:	2280      	movs	r2, #128	; 0x80
    885a:	271e      	movs	r7, #30
    885c:	0412      	lsls	r2, r2, #16
    885e:	4313      	orrs	r3, r2
    8860:	1bbf      	subs	r7, r7, r6
    8862:	2f1f      	cmp	r7, #31
    8864:	dc0f      	bgt.n	8886 <__aeabi_d2f+0xda>
    8866:	4a14      	ldr	r2, [pc, #80]	; (88b8 <__aeabi_d2f+0x10c>)
    8868:	4694      	mov	ip, r2
    886a:	4464      	add	r4, ip
    886c:	002a      	movs	r2, r5
    886e:	40a5      	lsls	r5, r4
    8870:	002e      	movs	r6, r5
    8872:	40a3      	lsls	r3, r4
    8874:	1e75      	subs	r5, r6, #1
    8876:	41ae      	sbcs	r6, r5
    8878:	40fa      	lsrs	r2, r7
    887a:	4333      	orrs	r3, r6
    887c:	4313      	orrs	r3, r2
    887e:	2600      	movs	r6, #0
    8880:	e7b0      	b.n	87e4 <__aeabi_d2f+0x38>
    8882:	2400      	movs	r4, #0
    8884:	e7d5      	b.n	8832 <__aeabi_d2f+0x86>
    8886:	2202      	movs	r2, #2
    8888:	4252      	negs	r2, r2
    888a:	1b96      	subs	r6, r2, r6
    888c:	001a      	movs	r2, r3
    888e:	40f2      	lsrs	r2, r6
    8890:	2f20      	cmp	r7, #32
    8892:	d009      	beq.n	88a8 <__aeabi_d2f+0xfc>
    8894:	4809      	ldr	r0, [pc, #36]	; (88bc <__aeabi_d2f+0x110>)
    8896:	4684      	mov	ip, r0
    8898:	4464      	add	r4, ip
    889a:	40a3      	lsls	r3, r4
    889c:	432b      	orrs	r3, r5
    889e:	1e5d      	subs	r5, r3, #1
    88a0:	41ab      	sbcs	r3, r5
    88a2:	2600      	movs	r6, #0
    88a4:	4313      	orrs	r3, r2
    88a6:	e79d      	b.n	87e4 <__aeabi_d2f+0x38>
    88a8:	2300      	movs	r3, #0
    88aa:	e7f7      	b.n	889c <__aeabi_d2f+0xf0>
    88ac:	2300      	movs	r3, #0
    88ae:	e7ad      	b.n	880c <__aeabi_d2f+0x60>
    88b0:	0034      	movs	r4, r6
    88b2:	e7bf      	b.n	8834 <__aeabi_d2f+0x88>
    88b4:	fffffc80 	.word	0xfffffc80
    88b8:	fffffc82 	.word	0xfffffc82
    88bc:	fffffca2 	.word	0xfffffca2

000088c0 <__clzsi2>:
    88c0:	211c      	movs	r1, #28
    88c2:	2301      	movs	r3, #1
    88c4:	041b      	lsls	r3, r3, #16
    88c6:	4298      	cmp	r0, r3
    88c8:	d301      	bcc.n	88ce <__clzsi2+0xe>
    88ca:	0c00      	lsrs	r0, r0, #16
    88cc:	3910      	subs	r1, #16
    88ce:	0a1b      	lsrs	r3, r3, #8
    88d0:	4298      	cmp	r0, r3
    88d2:	d301      	bcc.n	88d8 <__clzsi2+0x18>
    88d4:	0a00      	lsrs	r0, r0, #8
    88d6:	3908      	subs	r1, #8
    88d8:	091b      	lsrs	r3, r3, #4
    88da:	4298      	cmp	r0, r3
    88dc:	d301      	bcc.n	88e2 <__clzsi2+0x22>
    88de:	0900      	lsrs	r0, r0, #4
    88e0:	3904      	subs	r1, #4
    88e2:	a202      	add	r2, pc, #8	; (adr r2, 88ec <__clzsi2+0x2c>)
    88e4:	5c10      	ldrb	r0, [r2, r0]
    88e6:	1840      	adds	r0, r0, r1
    88e8:	4770      	bx	lr
    88ea:	46c0      	nop			; (mov r8, r8)
    88ec:	02020304 	.word	0x02020304
    88f0:	01010101 	.word	0x01010101
	...
    88fc:	6c696166 	.word	0x6c696166
    8900:	74206465 	.word	0x74206465
    8904:	6e69206f 	.word	0x6e69206f
    8908:	61697469 	.word	0x61697469
    890c:	657a696c 	.word	0x657a696c
    8910:	43444820 	.word	0x43444820
    8914:	30383031 	.word	0x30383031
    8918:	69726420 	.word	0x69726420
    891c:	2e726576 	.word	0x2e726576
    8920:	0000000d 	.word	0x0000000d
    8924:	6c696166 	.word	0x6c696166
    8928:	74206465 	.word	0x74206465
    892c:	0973206f 	.word	0x0973206f
    8930:	20646e65 	.word	0x20646e65
    8934:	69676572 	.word	0x69676572
    8938:	72657473 	.word	0x72657473
    893c:	71657220 	.word	0x71657220
    8940:	74736575 	.word	0x74736575
    8944:	726f6620 	.word	0x726f6620
    8948:	6d6f6320 	.word	0x6d6f6320
    894c:	646e616d 	.word	0x646e616d
    8950:	25783020 	.word	0x25783020
    8954:	21783230 	.word	0x21783230
    8958:	00000a0d 	.word	0x00000a0d
    895c:	6c696166 	.word	0x6c696166
    8960:	74206465 	.word	0x74206465
    8964:	6572206f 	.word	0x6572206f
    8968:	76696563 	.word	0x76696563
    896c:	79622065 	.word	0x79622065
    8970:	20736574 	.word	0x20736574
    8974:	20726f66 	.word	0x20726f66
    8978:	6d6d6f63 	.word	0x6d6d6f63
    897c:	20646e61 	.word	0x20646e61
    8980:	30257830 	.word	0x30257830
    8984:	0d217832 	.word	0x0d217832
    8988:	0000000a 	.word	0x0000000a
    898c:	6f727265 	.word	0x6f727265
    8990:	72742072 	.word	0x72742072
    8994:	676e6979 	.word	0x676e6979
    8998:	206f7420 	.word	0x206f7420
    899c:	20746573 	.word	0x20746573
    89a0:	6f736572 	.word	0x6f736572
    89a4:	6974756c 	.word	0x6974756c
    89a8:	0d216e6f 	.word	0x0d216e6f
    89ac:	00000000 	.word	0x00000000
    89b0:	6c696166 	.word	0x6c696166
    89b4:	74206465 	.word	0x74206465
    89b8:	6e69206f 	.word	0x6e69206f
    89bc:	61697469 	.word	0x61697469
    89c0:	657a696c 	.word	0x657a696c
    89c4:	4c535420 	.word	0x4c535420
    89c8:	31363532 	.word	0x31363532
    89cc:	69726420 	.word	0x69726420
    89d0:	2e726576 	.word	0x2e726576
    89d4:	0000000d 	.word	0x0000000d
    89d8:	6c696166 	.word	0x6c696166
    89dc:	74206465 	.word	0x74206465
    89e0:	6573206f 	.word	0x6573206f
    89e4:	7220646e 	.word	0x7220646e
    89e8:	73696765 	.word	0x73696765
    89ec:	20726574 	.word	0x20726574
    89f0:	75716572 	.word	0x75716572
    89f4:	20747365 	.word	0x20747365
    89f8:	20726f66 	.word	0x20726f66
    89fc:	6d6d6f63 	.word	0x6d6d6f63
    8a00:	20646e61 	.word	0x20646e61
    8a04:	30257830 	.word	0x30257830
    8a08:	0d217832 	.word	0x0d217832
    8a0c:	0000000a 	.word	0x0000000a
    8a10:	0000093e 	.word	0x0000093e
    8a14:	00000b84 	.word	0x00000b84
    8a18:	00000b84 	.word	0x00000b84
    8a1c:	00000b84 	.word	0x00000b84
    8a20:	00000b84 	.word	0x00000b84
    8a24:	00000b84 	.word	0x00000b84
    8a28:	00000b84 	.word	0x00000b84
    8a2c:	00000b84 	.word	0x00000b84
    8a30:	00000b84 	.word	0x00000b84
    8a34:	00000b84 	.word	0x00000b84
    8a38:	00000b84 	.word	0x00000b84
    8a3c:	00000b84 	.word	0x00000b84
    8a40:	00000b84 	.word	0x00000b84
    8a44:	00000b84 	.word	0x00000b84
    8a48:	00000b84 	.word	0x00000b84
    8a4c:	00000b84 	.word	0x00000b84
    8a50:	00000926 	.word	0x00000926
    8a54:	00000b84 	.word	0x00000b84
    8a58:	00000b84 	.word	0x00000b84
    8a5c:	00000b84 	.word	0x00000b84
    8a60:	00000b84 	.word	0x00000b84
    8a64:	00000b84 	.word	0x00000b84
    8a68:	00000b84 	.word	0x00000b84
    8a6c:	00000b84 	.word	0x00000b84
    8a70:	00000b84 	.word	0x00000b84
    8a74:	00000b84 	.word	0x00000b84
    8a78:	00000b84 	.word	0x00000b84
    8a7c:	00000b84 	.word	0x00000b84
    8a80:	00000b84 	.word	0x00000b84
    8a84:	00000b84 	.word	0x00000b84
    8a88:	00000b84 	.word	0x00000b84
    8a8c:	00000b84 	.word	0x00000b84
    8a90:	00000936 	.word	0x00000936
    8a94:	00000b84 	.word	0x00000b84
    8a98:	00000b84 	.word	0x00000b84
    8a9c:	00000b84 	.word	0x00000b84
    8aa0:	00000b84 	.word	0x00000b84
    8aa4:	00000b84 	.word	0x00000b84
    8aa8:	00000b84 	.word	0x00000b84
    8aac:	00000b84 	.word	0x00000b84
    8ab0:	00000b84 	.word	0x00000b84
    8ab4:	00000b84 	.word	0x00000b84
    8ab8:	00000b84 	.word	0x00000b84
    8abc:	00000b84 	.word	0x00000b84
    8ac0:	00000b84 	.word	0x00000b84
    8ac4:	00000b84 	.word	0x00000b84
    8ac8:	00000b84 	.word	0x00000b84
    8acc:	00000b84 	.word	0x00000b84
    8ad0:	0000092e 	.word	0x0000092e
    8ad4:	00000946 	.word	0x00000946
    8ad8:	0000090e 	.word	0x0000090e
    8adc:	0000091e 	.word	0x0000091e
    8ae0:	00000916 	.word	0x00000916
    8ae4:	00000002 	.word	0x00000002
    8ae8:	00000003 	.word	0x00000003
    8aec:	00000028 	.word	0x00000028
    8af0:	00000029 	.word	0x00000029
    8af4:	00000004 	.word	0x00000004
    8af8:	00000005 	.word	0x00000005
    8afc:	00000006 	.word	0x00000006
    8b00:	00000007 	.word	0x00000007
    8b04:	0000ffff 	.word	0x0000ffff
    8b08:	0000ffff 	.word	0x0000ffff
    8b0c:	00000022 	.word	0x00000022
    8b10:	00000023 	.word	0x00000023
    8b14:	0000ffff 	.word	0x0000ffff
    8b18:	0000ffff 	.word	0x0000ffff
    8b1c:	0000ffff 	.word	0x0000ffff
    8b20:	0000ffff 	.word	0x0000ffff
    8b24:	00000008 	.word	0x00000008
    8b28:	00000009 	.word	0x00000009
    8b2c:	0000000a 	.word	0x0000000a
    8b30:	0000000b 	.word	0x0000000b

00008b34 <_tcc_intflag>:
    8b34:	00000001 00000002 00000004 00000008     ................
    8b44:	00001000 00002000 00004000 00008000     ..... ...@......
    8b54:	00010000 00020000 00040000 00080000     ................
    8b64:	6c696166 206e6f20 206e6970 20434441     fail on pin ADC 
    8b74:	206e6163 72727563 6c746e65 6e6f2079     can currently on
    8b84:	6220796c 6f632065 6769666e 64657275     ly be configured
    8b94:	206e6f20 25632550 50202e64 7361656c      on P%c%d. Pleas
    8ba4:	72742065 67612079 2e6e6961 00000a0d     e try again.....
    8bb4:	6c696166 206e6f20 74726f70 43444120     fail on port ADC
    8bc4:	6e616320 72756320 746e6572 6f20796c      can currently o
    8bd4:	20796c6e 63206562 69666e6f 65727567     nly be configure
    8be4:	6e6f2064 25632520 50202e64 7361656c     d on %c%d. Pleas
    8bf4:	72742065 67612079 2e6e6961 00000a0d     e try again.....
    8c04:	746c6f56 20656761 50207461 64256325     Voltage at P%c%d
    8c14:	6625203a 00000a0d 796c6e4f 25415020     : %f....Only PA%
    8c24:	50202c64 2c642541 25425020 50202c64     d, PA%d, PB%d, P
    8c34:	2c642542 206e6163 73206562 0a0d7465     B%d,can be set..
    8c44:	00000000 206e6950 63206425 7261656c     ....Pin %d clear
    8c54:	0a0d6465 00000000 206e6970 76206425     ed......pin %d v
    8c64:	65756c61 6425203a 00000a0d 206e6950     alue: %d....Pin 
    8c74:	73206425 68207465 0d686769 0000000a     %d set high.....
    8c84:	706c6568 50202d20 746e6972 6c612073     help - Prints al
    8c94:	6874206c 76612065 616c6961 20656c62     l the available 
    8ca4:	6d6d6f63 73646e61 646e6120 73206120     commands and a s
    8cb4:	74726f68 6e797320 6973706f 0a0d2073     hort synopsis ..
    8cc4:	5f726576 2d206c62 69725020 2073746e     ver_bl - Prints 
    8cd4:	20656874 746f6f62 64616f6c 66207265     the bootloader f
    8ce4:	776d7269 20657261 73726576 206e6f69     irmware version 
    8cf4:	65760a0d 70615f72 202d0970 6e697250     ..ver_app.- Prin
    8d04:	74207374 61206568 696c7070 69746163     ts the applicati
    8d14:	63206e6f 2065646f 6d726966 65726177     on code firmware
    8d24:	72657620 6e6f6973 670a0d20 5f6f6970      version ..gpio_
    8d34:	20746573 726f705b 5b205d74 5d6e6970     set [port] [pin]
    8d44:	53202d20 61207465 49504720 6970204f      - Set a GPIO pi
    8d54:	6f74206e 67696820 202f2068 0a0d2031     n to high / 1 ..
    8d64:	6f697067 656c635f 5b207261 74726f70     gpio_clear [port
    8d74:	705b205d 095d6e69 6553202d 20612074     ] [pin].- Set a 
    8d84:	4f495047 6e697020 206f7420 20776f6c     GPIO pin to low 
    8d94:	2030202f 70670a0d 675f6f69 5b207465     / 0 ..gpio_get [
    8da4:	74726f70 705b205d 205d6e69 6547202d     port] [pin] - Ge
    8db4:	74732074 20657461 7320666f 69636570     t state of speci
    8dc4:	64656966 49504720 6970204f 0a0d206e     fied GPIO pin ..
    8dd4:	2063616d 6572202d 6e727574 68742073     mac - returns th
    8de4:	616d2065 64612063 73657264 666f2073     e mac address of
    8df4:	65687420 76656420 20656369 70690a0d      the device ..ip
    8e04:	72202d20 72757465 7420736e 49206568      - returns the I
    8e14:	20347650 72646461 20737365 65720a0d     Pv4 address ..re
    8e24:	3c5f6461 736e6573 203e726f 6165725b     ad_<sensor> [rea
    8e34:	676e6964 5b205d73 65746e69 6c617672     dings] [interval
    8e44:	202d205d 6e697250 61207374 6d756e20     ] - Prints a num
    8e54:	20726562 7220666f 69646165 2073676e     ber of readings 
    8e64:	74207461 67206568 6e657669 746e6920     at the given int
    8e74:	61767265 0a0d206c 5f636461 20746567     erval ..adc_get 
    8e84:	726f705b 5b205d74 5d6e6970 47202d20     [port] [pin] - G
    8e94:	74207465 41206568 76204344 65756c61     et the ADC value
    8ea4:	20666f20 20656874 65766967 6970206e      of the given pi
    8eb4:	0d202e6e 75636d0a 6d65745f 202d2070     n. ..mcu_temp - 
    8ec4:	6f706552 20737472 20656874 706d6574     Reports the temp
    8ed4:	74617265 20657275 7420666f 6d206568     erature of the m
    8ee4:	69207563 6543206e 7569736c 0d202e73     cu in Celsius. .
    8ef4:	6332690a 6163735f 202d206e 6e697250     .i2c_scan - Prin
    8f04:	6f207374 61207475 73696c20 6f632074     ts out a list co
    8f14:	63656e6e 20646574 20433249 76616c73     nnected I2C slav
    8f24:	64612065 73657264 20736573 65720a0d     e addresses ..re
    8f34:	5f79616c 20746573 7574202d 20736e72     lay_set - turns 
    8f44:	72206e6f 79616c65 720a0d20 79616c65     on relay ..relay
    8f54:	656c635f 2d207261 72757420 6f20736e     _clear - turns o
    8f64:	72206666 79616c65 00000d20 72646441     ff relay ...Addr
    8f74:	20737365 6e756f66 74612064 58232520     ess found at %#X
    8f84:	00000a0d 6e616353 676e696e 6d657420     ....Scanning tem
    8f94:	75622070 00000d73 6e616353 6f632073     p bus...Scans co
    8fa4:	656c706d 0d2e6574 00000000 706c6568     mplete......help
    8fb4:	00000000 5f726576 00006c62 5f726576     ....ver_bl..ver_
    8fc4:	00707061 6f697067 7465735f 00000000     app.gpio_set....
    8fd4:	6f697067 656c635f 00007261 6f697067     gpio_clear..gpio
    8fe4:	7465675f 00000000 0063616d 00007069     _get....mac.ip..
    8ff4:	64616572 00000000 5f636461 00746567     read....adc_get.
    9004:	5f75636d 706d6574 00000000 5f633269     mcu_temp....i2c_
    9014:	6e616373 00000000 6e6e7572 20676e69     scan....running 
    9024:	5f633269 6e616373 0000000d 616c6572     i2c_scan....rela
    9034:	6f5f3179 0000006e 616c6552 20312079     y1_on...Relay 1 
    9044:	6e727574 20676e69 0d2e6e6f 00000000     turning on......
    9054:	616c6572 6f5f3179 00006666 616c6552     relay1_off..Rela
    9064:	20312079 6e727574 20676e69 2e66666f     y 1 turning off.
    9074:	0000000d 616c6572 6f5f3279 0000006e     ....relay2_on...
    9084:	616c6552 20322079 6e727574 20676e69     Relay 2 turning 
    9094:	0d2e6e6f 00000000 616c6572 6f5f3279     on......relay2_o
    90a4:	00006666 616c6552 20322079 6e727574     ff..Relay 2 turn
    90b4:	20676e69 2e66666f 0000000d 736f6f62     ing off.....boos
    90c4:	6e6f5f74 00000000 736f6f42 6f632074     t_on....Boost co
    90d4:	7265766e 20726574 62616e65 2e64656c     nverter enabled.
    90e4:	0000000d 736f6f62 666f5f74 00000066     ....boost_off...
    90f4:	736f6f42 6f632074 7265766e 20726574     Boost converter 
    9104:	61736964 64656c62 00000d2e 3164656c     disabled....led1
    9114:	006e6f5f 3144454c 72757420 676e696e     _on.LED1 turning
    9124:	2e6e6f20 0000000d 3164656c 66666f5f      on.....led1_off
    9134:	00000000 3144454c 72757420 676e696e     ....LED1 turning
    9144:	66666f20 00000d2e 3264656c 006e6f5f      off....led2_on.
    9154:	3244454c 72757420 676e696e 2e6e6f20     LED2 turning on.
    9164:	0000000d 3264656c 66666f5f 00000000     ....led2_off....
    9174:	3244454c 72757420 676e696e 66666f20     LED2 turning off
    9184:	00000d2e 5f6e7572 706d7570 00000000     ....run_pump....
    9194:	61766e49 2064696c 75706e69 53202e74     Invalid input. S
    91a4:	68206565 20706c65 20726f66 72726f63     ee help for corr
    91b4:	20746365 67617375 000d2e65 2e353532     ect usage...255.
    91c4:	2e353532 2e353532 20353532 0000000d     255.255.255 ....
    91d4:	302e3030 30302e30 0d30302e 00000000     00.00.00.00.....
    91e4:	2055434d 706d6574 74617265 3a657275     MCU temperature:
    91f4:	43642520 000a0d20 61766e49 2064696c      %dC ...Invalid 
    9204:	626d756e 6f207265 72612066 203a7367     number of args: 
    9214:	72207325 69757165 20736572 61206425     %s requires %d a
    9224:	6d756772 73746e65 646e6120 756f7920     rguments and you
    9234:	6f727020 65646976 64252064 2e0a0d20      provided %d ...
    9244:	20656553 706c6568 726f6620 726f6d20     See help for mor
    9254:	6e692065 6d726f66 6f697461 0d202e6e     e information. .
    9264:	0000000a 72656874 61772065 6e612073     ....there was an
    9274:	72726520 7020726f 69737261 7920676e      error parsing y
    9284:	2072756f 73677261 726f6620 2e732520     our args for %s.
    9294:	65655320 6c656820 6f662070 6f632072      See help for co
    92a4:	63657272 73752074 2e656761 00000a0d     rrect usage.....
    92b4:	0078756c 72727543 20746e65 3a78756c     lux.Current lux:
    92c4:	0d642520 0000000a 72727543 20746e65      %d.....Current 
    92d4:	706d6574 74617265 3a657275 2e332520     temperature: %3.
    92e4:	0a0d6632 72754320 746e6572 6d756820     2f.. Current hum
    92f4:	74696469 25203a79 66322e33 00000a0d     idity: %3.2f....
    9304:	73696f6d 65727574 00000000 72727543     moisture....Curr
    9314:	20746e65 73696f6d 65727574 2e25203a     ent moisture: %.
    9324:	20663230 0d202525 0000000a 2e302e30     02f %% .....0.0.
    9334:	00000030 73726556 3a6e6f69 20732520     0...Version: %s 
    9344:	00000a0d 42000800 42000c00 42001000     .......B...B...B
    9354:	42001400 42001800 42001c00 00002d22     ...B...B...B"-..
    9364:	00002d1e 00002d1e 00002d80 00002d80     .-...-...-...-..
    9374:	00002d36 00002d28 00002d3c 00002d6e     6-..(-..<-..n-..
    9384:	00002e08 00002de8 00002de8 00002e74     .....-...-..t...
    9394:	00002dfa 00002e16 00002dec 00002e24     .-.......-..$...
    93a4:	00002e64 00000020 20766564 203a6469     d... ...dev id: 
    93b4:	30257830 0a0d7832 6e616d20 64692075     0x%02x.. manu id
    93c4:	7830203a 78323025 00000a0d 65570a0d     : 0x%02x......We
    93d4:	6d6f636c 6f742065 65687420 65764520     lcome to the Eve
    93e4:	65726772 43206e65 0d2e494c 00000000     rgreen CLI......
    93f4:	0000203e 7325203e 00000a0d              > ..> %s....

00009400 <_global_impure_ptr>:
    9400:	20000010 4f500043 00584953 4e49002e     ... C.POSIX...IN
    9410:	6e690046 414e0066 616e004e 0030006e     F.inf.NAN.nan.0.
    9420:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    9430:	32313000 36353433 61393837 65646362     .0123456789abcde
    9440:	20000066                                         f.

00009442 <_ctype_>:
    9442:	20202000 20202020 28282020 20282828     .         ((((( 
    9452:	20202020 20202020 20202020 20202020                     
    9462:	10108820 10101010 10101010 10101010      ...............
    9472:	04040410 04040404 10040404 10101010     ................
    9482:	41411010 41414141 01010101 01010101     ..AAAAAA........
    9492:	01010101 01010101 01010101 10101010     ................
    94a2:	42421010 42424242 02020202 02020202     ..BBBBBB........
    94b2:	02020202 02020202 02020202 10101010     ................
    94c2:	00000020 00000000 00000000 00000000      ...............
	...
    9542:	666e4900 74696e69 614e0079 0000004e              .Infinity.NaN.

00009550 <__sf_fake_stderr>:
	...

00009570 <__sf_fake_stdin>:
	...

00009590 <__sf_fake_stdout>:
	...

000095b0 <__mprec_bigtens>:
    95b0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    95c0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    95d0:	7f73bf3c 75154fdd                       <.s..O.u

000095d8 <__mprec_tens>:
    95d8:	00000000 3ff00000 00000000 40240000     .......?......$@
    95e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    95f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    9608:	00000000 412e8480 00000000 416312d0     .......A......cA
    9618:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    9628:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    9638:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    9648:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    9658:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    9668:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    9678:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    9688:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    9698:	79d99db4 44ea7843                       ...yCx.D

000096a0 <p05.6047>:
    96a0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    96b0:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
    96c0:	000067d4 000067a4 000067b6 000066f8     .g...g...g...f..
    96d0:	000067b6 0000679a 000067b6 000066f8     .g...g...g...f..
    96e0:	000067a4 000067a4 0000679a 000066f8     .g...g...g...f..
    96f0:	00006700 00006700 00006700 000067bc     .g...g...g...g..
    9700:	000067a4 000067a4 00006778 0000685c     .g...g..xg..\h..
    9710:	00006778 0000679a 00006778 0000685c     xg...g..xg..\h..
    9720:	000067a4 000067a4 0000679a 0000685c     .g...g...g..\h..
    9730:	00006700 00006700 00006700 00006866     .g...g...g..fh..
    9740:	00006a04 00006954 00006954 00006952     .j..Ti..Ti..Ri..
    9750:	000069f6 000069f6 000069ec 00006952     .i...i...i..Ri..
    9760:	000069f6 000069ec 000069f6 00006952     .i...i...i..Ri..
    9770:	000069fc 000069fc 000069fc 00006a8c     .i...i...i...j..
    9780:	000073d0 000073b2 0000736c 0000728a     .s...s..ls...r..
    9790:	0000736c 000073a4 0000736c 0000728a     ls...s..ls...r..
    97a0:	000073b2 000073b2 000073a4 0000728a     .s...s...s...r..
    97b0:	00007282 00007282 00007282 000075e8     .r...r...r...u..
    97c0:	00007c30 00007af0 00007af0 00007aec     0|...z...z...z..
    97d0:	00007c08 00007c08 00007bfa 00007aec     .|...|...{...z..
    97e0:	00007c08 00007bfa 00007c08 00007aec     .|...{...|...z..
    97f0:	00007c10 00007c10 00007c10 00007e14     .|...|...|...~..

00009800 <_init>:
    9800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9802:	46c0      	nop			; (mov r8, r8)
    9804:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9806:	bc08      	pop	{r3}
    9808:	469e      	mov	lr, r3
    980a:	4770      	bx	lr

0000980c <__init_array_start>:
    980c:	000000dd 	.word	0x000000dd

00009810 <_fini>:
    9810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9812:	46c0      	nop			; (mov r8, r8)
    9814:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9816:	bc08      	pop	{r3}
    9818:	469e      	mov	lr, r3
    981a:	4770      	bx	lr

0000981c <__fini_array_start>:
    981c:	000000b5 	.word	0x000000b5
