
cli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012a50  00004000  00004000  00004000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e0  20000000  00016a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000061c  200001e0  00016c30  000201e0  2**2
                  ALLOC
  3 .stack        00002004  200007fc  0001724c  000201e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
  6 .debug_info   00089588  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000aad3  00000000  00000000  000a97e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001e6ab  00000000  00000000  000b42bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000012c8  00000000  00000000  000d2967  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002290  00000000  00000000  000d3c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00027085  00000000  00000000  000d5ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00027fc9  00000000  00000000  000fcf44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00097d30  00000000  00000000  00124f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000475c  00000000  00000000  001bcc40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 28 00 20 2d e4 00 00 29 e4 00 00 29 e4 00 00     .(. -...)...)...
	...
    402c:	29 e4 00 00 00 00 00 00 00 00 00 00 29 e4 00 00     )...........)...
    403c:	29 e4 00 00 29 e4 00 00 29 e4 00 00 29 e4 00 00     )...)...)...)...
    404c:	29 e4 00 00 41 61 00 00 29 e4 00 00 29 e4 00 00     )...Aa..)...)...
    405c:	29 e4 00 00 29 e4 00 00 0d d8 00 00 1d d8 00 00     )...)...........
    406c:	2d d8 00 00 3d d8 00 00 4d d8 00 00 5d d8 00 00     -...=...M...]...
    407c:	69 af 00 00 79 af 00 00 89 af 00 00 29 e4 00 00     i...y.......)...
    408c:	29 e4 00 00 29 e4 00 00 00 00 00 00 00 00 00 00     )...)...........
    409c:	29 e4 00 00 29 e4 00 00 29 e4 00 00 29 e4 00 00     )...)...)...)...
    40ac:	29 e4 00 00 00 00 00 00                             ).......

000040b4 <__do_global_dtors_aux>:
    40b4:	b510      	push	{r4, lr}
    40b6:	4c06      	ldr	r4, [pc, #24]	; (40d0 <__do_global_dtors_aux+0x1c>)
    40b8:	7823      	ldrb	r3, [r4, #0]
    40ba:	2b00      	cmp	r3, #0
    40bc:	d107      	bne.n	40ce <__do_global_dtors_aux+0x1a>
    40be:	4b05      	ldr	r3, [pc, #20]	; (40d4 <__do_global_dtors_aux+0x20>)
    40c0:	2b00      	cmp	r3, #0
    40c2:	d002      	beq.n	40ca <__do_global_dtors_aux+0x16>
    40c4:	4804      	ldr	r0, [pc, #16]	; (40d8 <__do_global_dtors_aux+0x24>)
    40c6:	e000      	b.n	40ca <__do_global_dtors_aux+0x16>
    40c8:	bf00      	nop
    40ca:	2301      	movs	r3, #1
    40cc:	7023      	strb	r3, [r4, #0]
    40ce:	bd10      	pop	{r4, pc}
    40d0:	200001e0 	.word	0x200001e0
    40d4:	00000000 	.word	0x00000000
    40d8:	00016a50 	.word	0x00016a50

000040dc <frame_dummy>:
    40dc:	4b08      	ldr	r3, [pc, #32]	; (4100 <frame_dummy+0x24>)
    40de:	b510      	push	{r4, lr}
    40e0:	2b00      	cmp	r3, #0
    40e2:	d003      	beq.n	40ec <frame_dummy+0x10>
    40e4:	4907      	ldr	r1, [pc, #28]	; (4104 <frame_dummy+0x28>)
    40e6:	4808      	ldr	r0, [pc, #32]	; (4108 <frame_dummy+0x2c>)
    40e8:	e000      	b.n	40ec <frame_dummy+0x10>
    40ea:	bf00      	nop
    40ec:	4807      	ldr	r0, [pc, #28]	; (410c <frame_dummy+0x30>)
    40ee:	6803      	ldr	r3, [r0, #0]
    40f0:	2b00      	cmp	r3, #0
    40f2:	d100      	bne.n	40f6 <frame_dummy+0x1a>
    40f4:	bd10      	pop	{r4, pc}
    40f6:	4b06      	ldr	r3, [pc, #24]	; (4110 <frame_dummy+0x34>)
    40f8:	2b00      	cmp	r3, #0
    40fa:	d0fb      	beq.n	40f4 <frame_dummy+0x18>
    40fc:	4798      	blx	r3
    40fe:	e7f9      	b.n	40f4 <frame_dummy+0x18>
    4100:	00000000 	.word	0x00000000
    4104:	200001e4 	.word	0x200001e4
    4108:	00016a50 	.word	0x00016a50
    410c:	00016a50 	.word	0x00016a50
    4110:	00000000 	.word	0x00000000

00004114 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4114:	b570      	push	{r4, r5, r6, lr}
    4116:	b082      	sub	sp, #8
    4118:	0005      	movs	r5, r0
    411a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    411c:	2200      	movs	r2, #0
    411e:	466b      	mov	r3, sp
    4120:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    4122:	4c06      	ldr	r4, [pc, #24]	; (413c <usart_serial_getchar+0x28>)
    4124:	466b      	mov	r3, sp
    4126:	1d99      	adds	r1, r3, #6
    4128:	0028      	movs	r0, r5
    412a:	47a0      	blx	r4
    412c:	2800      	cmp	r0, #0
    412e:	d1f9      	bne.n	4124 <usart_serial_getchar+0x10>

	*c = temp;
    4130:	466b      	mov	r3, sp
    4132:	3306      	adds	r3, #6
    4134:	881b      	ldrh	r3, [r3, #0]
    4136:	7033      	strb	r3, [r6, #0]
}
    4138:	b002      	add	sp, #8
    413a:	bd70      	pop	{r4, r5, r6, pc}
    413c:	0000c875 	.word	0x0000c875

00004140 <usart_serial_putchar>:
{
    4140:	b570      	push	{r4, r5, r6, lr}
    4142:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    4144:	b28c      	uxth	r4, r1
    4146:	4e03      	ldr	r6, [pc, #12]	; (4154 <usart_serial_putchar+0x14>)
    4148:	0021      	movs	r1, r4
    414a:	0028      	movs	r0, r5
    414c:	47b0      	blx	r6
    414e:	2800      	cmp	r0, #0
    4150:	d1fa      	bne.n	4148 <usart_serial_putchar+0x8>
}
    4152:	bd70      	pop	{r4, r5, r6, pc}
    4154:	0000c849 	.word	0x0000c849

00004158 <configure_usart>:
#endif

#ifdef STDIO_SERIAL_H_INCLUDED
extern struct usart_module usart_instance;
void configure_usart()
{
    4158:	b5f0      	push	{r4, r5, r6, r7, lr}
    415a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    415c:	2380      	movs	r3, #128	; 0x80
    415e:	05db      	lsls	r3, r3, #23
    4160:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4162:	2300      	movs	r3, #0
    4164:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4166:	22ff      	movs	r2, #255	; 0xff
    4168:	4669      	mov	r1, sp
    416a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    416c:	2200      	movs	r2, #0
    416e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4170:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    4172:	2401      	movs	r4, #1
    4174:	2124      	movs	r1, #36	; 0x24
    4176:	4668      	mov	r0, sp
    4178:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    417a:	3101      	adds	r1, #1
    417c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    417e:	3101      	adds	r1, #1
    4180:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    4182:	3101      	adds	r1, #1
    4184:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    4186:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    4188:	3105      	adds	r1, #5
    418a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    418c:	3101      	adds	r1, #1
    418e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4190:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4192:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4194:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    4196:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4198:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    419a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    419c:	2313      	movs	r3, #19
    419e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    41a0:	7742      	strb	r2, [r0, #29]
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 115200;
    41a2:	23e1      	movs	r3, #225	; 0xe1
    41a4:	025b      	lsls	r3, r3, #9
    41a6:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    41a8:	23c4      	movs	r3, #196	; 0xc4
    41aa:	039b      	lsls	r3, r3, #14
    41ac:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    41ae:	2301      	movs	r3, #1
    41b0:	425b      	negs	r3, r3
    41b2:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    41b4:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
    41b6:	4b17      	ldr	r3, [pc, #92]	; (4214 <configure_usart+0xbc>)
    41b8:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
    41ba:	4b17      	ldr	r3, [pc, #92]	; (4218 <configure_usart+0xc0>)
    41bc:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    41be:	4d17      	ldr	r5, [pc, #92]	; (421c <configure_usart+0xc4>)
    41c0:	4b17      	ldr	r3, [pc, #92]	; (4220 <configure_usart+0xc8>)
    41c2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    41c4:	4a17      	ldr	r2, [pc, #92]	; (4224 <configure_usart+0xcc>)
    41c6:	4b18      	ldr	r3, [pc, #96]	; (4228 <configure_usart+0xd0>)
    41c8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    41ca:	4a18      	ldr	r2, [pc, #96]	; (422c <configure_usart+0xd4>)
    41cc:	4b18      	ldr	r3, [pc, #96]	; (4230 <configure_usart+0xd8>)
    41ce:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    41d0:	466a      	mov	r2, sp
    41d2:	4918      	ldr	r1, [pc, #96]	; (4234 <configure_usart+0xdc>)
    41d4:	0028      	movs	r0, r5
    41d6:	4b18      	ldr	r3, [pc, #96]	; (4238 <configure_usart+0xe0>)
    41d8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    41da:	4f18      	ldr	r7, [pc, #96]	; (423c <configure_usart+0xe4>)
    41dc:	683b      	ldr	r3, [r7, #0]
    41de:	6898      	ldr	r0, [r3, #8]
    41e0:	2100      	movs	r1, #0
    41e2:	4e17      	ldr	r6, [pc, #92]	; (4240 <configure_usart+0xe8>)
    41e4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    41e6:	683b      	ldr	r3, [r7, #0]
    41e8:	6858      	ldr	r0, [r3, #4]
    41ea:	2100      	movs	r1, #0
    41ec:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    41ee:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    41f0:	0030      	movs	r0, r6
    41f2:	4b14      	ldr	r3, [pc, #80]	; (4244 <configure_usart+0xec>)
    41f4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    41f6:	231f      	movs	r3, #31
    41f8:	4018      	ands	r0, r3
    41fa:	4084      	lsls	r4, r0
    41fc:	4b12      	ldr	r3, [pc, #72]	; (4248 <configure_usart+0xf0>)
    41fe:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4200:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4202:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4204:	2b00      	cmp	r3, #0
    4206:	d1fc      	bne.n	4202 <configure_usart+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4208:	6833      	ldr	r3, [r6, #0]
    420a:	2202      	movs	r2, #2
    420c:	4313      	orrs	r3, r2
    420e:	6033      	str	r3, [r6, #0]

	stdio_serial_init(&usart_instance, SERCOM4, &config_usart);

	usart_enable(&usart_instance);
}
    4210:	b011      	add	sp, #68	; 0x44
    4212:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4214:	002a0003 	.word	0x002a0003
    4218:	002b0003 	.word	0x002b0003
    421c:	20000758 	.word	0x20000758
    4220:	200006cc 	.word	0x200006cc
    4224:	00004141 	.word	0x00004141
    4228:	200006c8 	.word	0x200006c8
    422c:	00004115 	.word	0x00004115
    4230:	200006c4 	.word	0x200006c4
    4234:	42001800 	.word	0x42001800
    4238:	0000c505 	.word	0x0000c505
    423c:	20000010 	.word	0x20000010
    4240:	0000f45d 	.word	0x0000f45d
    4244:	0000d7dd 	.word	0x0000d7dd
    4248:	e000e100 	.word	0xe000e100

0000424c <configure_flash>:
#endif
#ifdef AT25DFX_H
void configure_flash()
{
    424c:	b570      	push	{r4, r5, r6, lr}
    424e:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    4250:	ac02      	add	r4, sp, #8
    4252:	2501      	movs	r5, #1
    4254:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    4256:	2300      	movs	r3, #0
    4258:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    425a:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    425c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    425e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    4260:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    4262:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    4264:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    4266:	2224      	movs	r2, #36	; 0x24
    4268:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    426a:	3a18      	subs	r2, #24
    426c:	2100      	movs	r1, #0
    426e:	a808      	add	r0, sp, #32
    4270:	4b23      	ldr	r3, [pc, #140]	; (4300 <configure_flash+0xb4>)
    4272:	4798      	blx	r3
	struct at25dfx_chip_config at_chip_config;
	struct spi_config at25dfx_spi_config;

	at25dfx_spi_get_config_defaults(&at25dfx_spi_config);
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    4274:	4b23      	ldr	r3, [pc, #140]	; (4304 <configure_flash+0xb8>)
    4276:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    4278:	2380      	movs	r3, #128	; 0x80
    427a:	025b      	lsls	r3, r3, #9
    427c:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    427e:	4b22      	ldr	r3, [pc, #136]	; (4308 <configure_flash+0xbc>)
    4280:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    4282:	2301      	movs	r3, #1
    4284:	425b      	negs	r3, r3
    4286:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    4288:	4b20      	ldr	r3, [pc, #128]	; (430c <configure_flash+0xc0>)
    428a:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    428c:	4b20      	ldr	r3, [pc, #128]	; (4310 <configure_flash+0xc4>)
    428e:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    4290:	4e20      	ldr	r6, [pc, #128]	; (4314 <configure_flash+0xc8>)
    4292:	0022      	movs	r2, r4
    4294:	4920      	ldr	r1, [pc, #128]	; (4318 <configure_flash+0xcc>)
    4296:	0030      	movs	r0, r6
    4298:	4b20      	ldr	r3, [pc, #128]	; (431c <configure_flash+0xd0>)
    429a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    429c:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    429e:	0020      	movs	r0, r4
    42a0:	4b1f      	ldr	r3, [pc, #124]	; (4320 <configure_flash+0xd4>)
    42a2:	4798      	blx	r3
    42a4:	231f      	movs	r3, #31
    42a6:	4018      	ands	r0, r3
    42a8:	4085      	lsls	r5, r0
    42aa:	4b1e      	ldr	r3, [pc, #120]	; (4324 <configure_flash+0xd8>)
    42ac:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    42ae:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    42b0:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    42b2:	2b00      	cmp	r3, #0
    42b4:	d1fc      	bne.n	42b0 <configure_flash+0x64>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    42b6:	6823      	ldr	r3, [r4, #0]
    42b8:	2202      	movs	r2, #2
    42ba:	4313      	orrs	r3, r2
    42bc:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    42be:	4c1a      	ldr	r4, [pc, #104]	; (4328 <configure_flash+0xdc>)
    42c0:	2304      	movs	r3, #4
    42c2:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
    42c4:	3303      	adds	r3, #3
    42c6:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
    42c8:	4b12      	ldr	r3, [pc, #72]	; (4314 <configure_flash+0xc8>)
    42ca:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    42cc:	a901      	add	r1, sp, #4
    42ce:	2301      	movs	r3, #1
    42d0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    42d2:	2200      	movs	r2, #0
    42d4:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    42d6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    42d8:	2007      	movs	r0, #7
    42da:	4b14      	ldr	r3, [pc, #80]	; (432c <configure_flash+0xe0>)
    42dc:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    42de:	7962      	ldrb	r2, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    42e0:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    42e2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    42e4:	2900      	cmp	r1, #0
    42e6:	d104      	bne.n	42f2 <configure_flash+0xa6>
		return &(ports[port_index]->Group[group_index]);
    42e8:	0953      	lsrs	r3, r2, #5
    42ea:	01db      	lsls	r3, r3, #7
    42ec:	4910      	ldr	r1, [pc, #64]	; (4330 <configure_flash+0xe4>)
    42ee:	468c      	mov	ip, r1
    42f0:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    42f2:	211f      	movs	r1, #31
    42f4:	4011      	ands	r1, r2
    42f6:	2201      	movs	r2, #1
    42f8:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    42fa:	619a      	str	r2, [r3, #24]
	spi_enable(&at25dfx_spi);

	at_chip_config.type = AT25DFX_MEM_TYPE;
	at_chip_config.cs_pin = AT25DFX_CS;
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at_chip_config);
}
    42fc:	b010      	add	sp, #64	; 0x40
    42fe:	bd70      	pop	{r4, r5, r6, pc}
    4300:	0000e8c7 	.word	0x0000e8c7
    4304:	000f4240 	.word	0x000f4240
    4308:	00100002 	.word	0x00100002
    430c:	00120002 	.word	0x00120002
    4310:	00130002 	.word	0x00130002
    4314:	20000404 	.word	0x20000404
    4318:	42000c00 	.word	0x42000c00
    431c:	0000cbd1 	.word	0x0000cbd1
    4320:	0000d7dd 	.word	0x0000d7dd
    4324:	e000e100 	.word	0xe000e100
    4328:	200002b8 	.word	0x200002b8
    432c:	0000dbf5 	.word	0x0000dbf5
    4330:	41004400 	.word	0x41004400

00004334 <configure_nvm>:
#endif

#ifdef NVM_H_INCLUDED
void configure_nvm()
{
    4334:	b500      	push	{lr}
    4336:	b083      	sub	sp, #12
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    4338:	2200      	movs	r2, #0
    433a:	466b      	mov	r3, sp
    433c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    433e:	4b07      	ldr	r3, [pc, #28]	; (435c <configure_nvm+0x28>)
    4340:	685b      	ldr	r3, [r3, #4]
    4342:	06db      	lsls	r3, r3, #27
    4344:	0f1b      	lsrs	r3, r3, #28
    4346:	4669      	mov	r1, sp
    4348:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
    434a:	70ca      	strb	r2, [r1, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    434c:	710a      	strb	r2, [r1, #4]
	struct nvm_config config_nvm;

	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
    434e:	704a      	strb	r2, [r1, #1]

	nvm_set_config(&config_nvm);
    4350:	4668      	mov	r0, sp
    4352:	4b03      	ldr	r3, [pc, #12]	; (4360 <configure_nvm+0x2c>)
    4354:	4798      	blx	r3
}
    4356:	b003      	add	sp, #12
    4358:	bd00      	pop	{pc}
    435a:	46c0      	nop			; (mov r8, r8)
    435c:	41004000 	.word	0x41004000
    4360:	0000d905 	.word	0x0000d905

00004364 <configure_i2c_hdc>:
 **/

#include "hdc_1080.h"

void configure_i2c_hdc()
{
    4364:	b510      	push	{r4, lr}
    4366:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    4368:	aa01      	add	r2, sp, #4
    436a:	2364      	movs	r3, #100	; 0x64
    436c:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    436e:	4b1f      	ldr	r3, [pc, #124]	; (43ec <configure_i2c_hdc+0x88>)
    4370:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    4372:	2300      	movs	r3, #0
    4374:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    4376:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    4378:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    437a:	2180      	movs	r1, #128	; 0x80
    437c:	0389      	lsls	r1, r1, #14
    437e:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    4380:	2101      	movs	r1, #1
    4382:	4249      	negs	r1, r1
    4384:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    4386:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    4388:	3125      	adds	r1, #37	; 0x25
    438a:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    438c:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    438e:	3108      	adds	r1, #8
    4390:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    4392:	3101      	adds	r1, #1
    4394:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    4396:	3101      	adds	r1, #1
    4398:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    439a:	33d7      	adds	r3, #215	; 0xd7
    439c:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    439e:	4b14      	ldr	r3, [pc, #80]	; (43f0 <configure_i2c_hdc+0x8c>)
    43a0:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    43a2:	4b14      	ldr	r3, [pc, #80]	; (43f4 <configure_i2c_hdc+0x90>)
    43a4:	6213      	str	r3, [r2, #32]
	enum status_code init_status = i2c_master_init(&i2c_hdc, SERCOM3, &config_i2c_master);
    43a6:	4914      	ldr	r1, [pc, #80]	; (43f8 <configure_i2c_hdc+0x94>)
    43a8:	4814      	ldr	r0, [pc, #80]	; (43fc <configure_i2c_hdc+0x98>)
    43aa:	4b15      	ldr	r3, [pc, #84]	; (4400 <configure_i2c_hdc+0x9c>)
    43ac:	4798      	blx	r3
	if (STATUS_OK != init_status) {
    43ae:	2800      	cmp	r0, #0
    43b0:	d116      	bne.n	43e0 <configure_i2c_hdc+0x7c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    43b2:	4b12      	ldr	r3, [pc, #72]	; (43fc <configure_i2c_hdc+0x98>)
    43b4:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    43b6:	2107      	movs	r1, #7
    43b8:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    43ba:	4219      	tst	r1, r3
    43bc:	d1fc      	bne.n	43b8 <configure_i2c_hdc+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    43be:	6813      	ldr	r3, [r2, #0]
    43c0:	2102      	movs	r1, #2
    43c2:	430b      	orrs	r3, r1
    43c4:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    43c6:	4b0d      	ldr	r3, [pc, #52]	; (43fc <configure_i2c_hdc+0x98>)
    43c8:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    43ca:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    43cc:	2010      	movs	r0, #16
    43ce:	8b51      	ldrh	r1, [r2, #26]
    43d0:	4201      	tst	r1, r0
    43d2:	d108      	bne.n	43e6 <configure_i2c_hdc+0x82>
		timeout_counter++;
    43d4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    43d6:	42a3      	cmp	r3, r4
    43d8:	d3f9      	bcc.n	43ce <configure_i2c_hdc+0x6a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    43da:	2310      	movs	r3, #16
    43dc:	8353      	strh	r3, [r2, #26]
    43de:	e002      	b.n	43e6 <configure_i2c_hdc+0x82>
		printf("failed to initialize HDC1080 driver.\r\n");
    43e0:	4808      	ldr	r0, [pc, #32]	; (4404 <configure_i2c_hdc+0xa0>)
    43e2:	4b09      	ldr	r3, [pc, #36]	; (4408 <configure_i2c_hdc+0xa4>)
    43e4:	4798      	blx	r3
		return;
	}
	i2c_master_enable(&i2c_hdc);
}
    43e6:	b00e      	add	sp, #56	; 0x38
    43e8:	bd10      	pop	{r4, pc}
    43ea:	46c0      	nop			; (mov r8, r8)
    43ec:	00000d48 	.word	0x00000d48
    43f0:	00160002 	.word	0x00160002
    43f4:	00170002 	.word	0x00170002
    43f8:	42001400 	.word	0x42001400
    43fc:	2000029c 	.word	0x2000029c
    4400:	0000afa5 	.word	0x0000afa5
    4404:	00013f58 	.word	0x00013f58
    4408:	0000f425 	.word	0x0000f425

0000440c <set_resolution>:
//NOTE: bit[10] = 1 for 11 bit temp
//NOTE: bit[9:8] = 00 for 14 bit humidity
//NOTE: bit[9:8] = 01 for 11 bit humidity
//NOTE: bit[9:8] = 10 for 8 bit humidity
void set_resolution(hdc_resolution temp_resolution, hdc_resolution humidity_resolution)
{
    440c:	b500      	push	{lr}
    440e:	b085      	sub	sp, #20
	int8_t data_packet[3];

	data_packet[0] = HDC_SET_RES;
    4410:	2202      	movs	r2, #2
    4412:	ab03      	add	r3, sp, #12
    4414:	701a      	strb	r2, [r3, #0]
	uint8_t write_byte = 0;
	switch (temp_resolution) {
    4416:	2801      	cmp	r0, #1
    4418:	d003      	beq.n	4422 <set_resolution+0x16>
    441a:	2802      	cmp	r0, #2
    441c:	d021      	beq.n	4462 <set_resolution+0x56>
	enum status_code i2c_status = i2c_master_write_packet_wait(&i2c_hdc, &packet);
	if (STATUS_OK != i2c_status)
		printf("error trying to set resolution!\r\n");

	return;
}
    441e:	b005      	add	sp, #20
    4420:	bd00      	pop	{pc}
		write_byte = (1 << 2);
    4422:	2304      	movs	r3, #4
	switch (humidity_resolution) {
    4424:	2901      	cmp	r1, #1
    4426:	d01e      	beq.n	4466 <set_resolution+0x5a>
    4428:	2900      	cmp	r1, #0
    442a:	d01f      	beq.n	446c <set_resolution+0x60>
    442c:	2902      	cmp	r1, #2
    442e:	d1f6      	bne.n	441e <set_resolution+0x12>
	data_packet[1] = write_byte;
    4430:	aa03      	add	r2, sp, #12
	write_byte |= (1 << 4);
    4432:	2110      	movs	r1, #16
    4434:	430b      	orrs	r3, r1
	data_packet[1] = write_byte;
    4436:	7053      	strb	r3, [r2, #1]
	data_packet[2] = 0x00;
    4438:	2300      	movs	r3, #0
    443a:	7093      	strb	r3, [r2, #2]
	struct i2c_master_packet packet = {
    443c:	2140      	movs	r1, #64	; 0x40
    443e:	4668      	mov	r0, sp
    4440:	8001      	strh	r1, [r0, #0]
    4442:	393d      	subs	r1, #61	; 0x3d
    4444:	8041      	strh	r1, [r0, #2]
    4446:	9201      	str	r2, [sp, #4]
    4448:	7203      	strb	r3, [r0, #8]
    444a:	7243      	strb	r3, [r0, #9]
    444c:	7283      	strb	r3, [r0, #10]
	enum status_code i2c_status = i2c_master_write_packet_wait(&i2c_hdc, &packet);
    444e:	4669      	mov	r1, sp
    4450:	4808      	ldr	r0, [pc, #32]	; (4474 <set_resolution+0x68>)
    4452:	4b09      	ldr	r3, [pc, #36]	; (4478 <set_resolution+0x6c>)
    4454:	4798      	blx	r3
	if (STATUS_OK != i2c_status)
    4456:	2800      	cmp	r0, #0
    4458:	d0e1      	beq.n	441e <set_resolution+0x12>
		printf("error trying to set resolution!\r\n");
    445a:	4808      	ldr	r0, [pc, #32]	; (447c <set_resolution+0x70>)
    445c:	4b08      	ldr	r3, [pc, #32]	; (4480 <set_resolution+0x74>)
    445e:	4798      	blx	r3
    4460:	e7dd      	b.n	441e <set_resolution+0x12>
		write_byte = 0;
    4462:	2300      	movs	r3, #0
    4464:	e7de      	b.n	4424 <set_resolution+0x18>
		write_byte |= 1;
    4466:	2201      	movs	r2, #1
    4468:	4313      	orrs	r3, r2
		break;
    446a:	e7e1      	b.n	4430 <set_resolution+0x24>
		write_byte |= 2;
    446c:	2202      	movs	r2, #2
    446e:	4313      	orrs	r3, r2
		break;
    4470:	e7de      	b.n	4430 <set_resolution+0x24>
    4472:	46c0      	nop			; (mov r8, r8)
    4474:	2000029c 	.word	0x2000029c
    4478:	0000b591 	.word	0x0000b591
    447c:	00013fe8 	.word	0x00013fe8
    4480:	0000f425 	.word	0x0000f425

00004484 <request_data>:

uint16_t request_data(hdc_request command)
{
    4484:	b530      	push	{r4, r5, lr}
    4486:	b087      	sub	sp, #28
    4488:	0004      	movs	r4, r0
	uint8_t received_data[2];
	uint8_t write_buffer = command;
    448a:	2313      	movs	r3, #19
    448c:	446b      	add	r3, sp
    448e:	7018      	strb	r0, [r3, #0]
	struct i2c_master_packet packet = {
    4490:	a901      	add	r1, sp, #4
    4492:	2240      	movs	r2, #64	; 0x40
    4494:	800a      	strh	r2, [r1, #0]
    4496:	3a3f      	subs	r2, #63	; 0x3f
    4498:	804a      	strh	r2, [r1, #2]
    449a:	604b      	str	r3, [r1, #4]
    449c:	2300      	movs	r3, #0
    449e:	720b      	strb	r3, [r1, #8]
    44a0:	724b      	strb	r3, [r1, #9]
    44a2:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_hdc, &packet);
    44a4:	4812      	ldr	r0, [pc, #72]	; (44f0 <request_data+0x6c>)
    44a6:	4b13      	ldr	r3, [pc, #76]	; (44f4 <request_data+0x70>)
    44a8:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
    44aa:	2800      	cmp	r0, #0
    44ac:	d006      	beq.n	44bc <request_data+0x38>
		printf("failed to s	end register request for command 0x%02x!\r\n", command);
    44ae:	0021      	movs	r1, r4
    44b0:	4811      	ldr	r0, [pc, #68]	; (44f8 <request_data+0x74>)
    44b2:	4b12      	ldr	r3, [pc, #72]	; (44fc <request_data+0x78>)
    44b4:	4798      	blx	r3
		return -1;
    44b6:	4812      	ldr	r0, [pc, #72]	; (4500 <request_data+0x7c>)
	if (STATUS_OK != i2c_code) {
		printf("failed to receive bytes for command 0x%02x!\r\n", command);
		return -1;
	}
	return (received_data[0] << 8) | received_data[1];
}
    44b8:	b007      	add	sp, #28
    44ba:	bd30      	pop	{r4, r5, pc}
	packet.data = received_data;
    44bc:	ad01      	add	r5, sp, #4
    44be:	ab05      	add	r3, sp, #20
    44c0:	9302      	str	r3, [sp, #8]
	packet.data_length = 2;
    44c2:	2302      	movs	r3, #2
    44c4:	806b      	strh	r3, [r5, #2]
	delay_ms(25);
    44c6:	2019      	movs	r0, #25
    44c8:	4b0e      	ldr	r3, [pc, #56]	; (4504 <request_data+0x80>)
    44ca:	4798      	blx	r3
	i2c_code = i2c_master_read_packet_wait(&i2c_hdc, &packet);
    44cc:	0029      	movs	r1, r5
    44ce:	4808      	ldr	r0, [pc, #32]	; (44f0 <request_data+0x6c>)
    44d0:	4b0d      	ldr	r3, [pc, #52]	; (4508 <request_data+0x84>)
    44d2:	4798      	blx	r3
	if (STATUS_OK != i2c_code) {
    44d4:	2800      	cmp	r0, #0
    44d6:	d105      	bne.n	44e4 <request_data+0x60>
	return (received_data[0] << 8) | received_data[1];
    44d8:	aa05      	add	r2, sp, #20
    44da:	7813      	ldrb	r3, [r2, #0]
    44dc:	021b      	lsls	r3, r3, #8
    44de:	7850      	ldrb	r0, [r2, #1]
    44e0:	4318      	orrs	r0, r3
    44e2:	e7e9      	b.n	44b8 <request_data+0x34>
		printf("failed to receive bytes for command 0x%02x!\r\n", command);
    44e4:	0021      	movs	r1, r4
    44e6:	4809      	ldr	r0, [pc, #36]	; (450c <request_data+0x88>)
    44e8:	4b04      	ldr	r3, [pc, #16]	; (44fc <request_data+0x78>)
    44ea:	4798      	blx	r3
		return -1;
    44ec:	4804      	ldr	r0, [pc, #16]	; (4500 <request_data+0x7c>)
    44ee:	e7e3      	b.n	44b8 <request_data+0x34>
    44f0:	2000029c 	.word	0x2000029c
    44f4:	0000b5a5 	.word	0x0000b5a5
    44f8:	00013f80 	.word	0x00013f80
    44fc:	0000f309 	.word	0x0000f309
    4500:	0000ffff 	.word	0x0000ffff
    4504:	0000d8d9 	.word	0x0000d8d9
    4508:	0000b57d 	.word	0x0000b57d
    450c:	00013fb8 	.word	0x00013fb8

00004510 <get_hdc_manufacturer_id>:

uint16_t get_hdc_manufacturer_id()
{
    4510:	b510      	push	{r4, lr}
	return request_data(HDC_MANUFACTURER_ID);
    4512:	20fe      	movs	r0, #254	; 0xfe
    4514:	4b01      	ldr	r3, [pc, #4]	; (451c <get_hdc_manufacturer_id+0xc>)
    4516:	4798      	blx	r3
}
    4518:	bd10      	pop	{r4, pc}
    451a:	46c0      	nop			; (mov r8, r8)
    451c:	00004485 	.word	0x00004485

00004520 <get_hdc_device_id>:
uint16_t get_hdc_device_id()
{
    4520:	b510      	push	{r4, lr}
	return request_data(HDC_DEVICE_ID);
    4522:	20ff      	movs	r0, #255	; 0xff
    4524:	4b01      	ldr	r3, [pc, #4]	; (452c <get_hdc_device_id+0xc>)
    4526:	4798      	blx	r3
}
    4528:	bd10      	pop	{r4, pc}
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	00004485 	.word	0x00004485

00004530 <get_humidity>:
double get_humidity()
{
    4530:	b510      	push	{r4, lr}
	double raw_data = request_data(HDC_HUMIDITY);
    4532:	2001      	movs	r0, #1
    4534:	4b05      	ldr	r3, [pc, #20]	; (454c <get_humidity+0x1c>)
    4536:	4798      	blx	r3
    4538:	4b05      	ldr	r3, [pc, #20]	; (4550 <get_humidity+0x20>)
    453a:	4798      	blx	r3

	raw_data /= 65536.0;
    453c:	4c05      	ldr	r4, [pc, #20]	; (4554 <get_humidity+0x24>)
    453e:	2200      	movs	r2, #0
    4540:	4b05      	ldr	r3, [pc, #20]	; (4558 <get_humidity+0x28>)
    4542:	47a0      	blx	r4
	raw_data *= 100.0;
    4544:	2200      	movs	r2, #0
    4546:	4b05      	ldr	r3, [pc, #20]	; (455c <get_humidity+0x2c>)
    4548:	47a0      	blx	r4
	return raw_data;
}
    454a:	bd10      	pop	{r4, pc}
    454c:	00004485 	.word	0x00004485
    4550:	00013cf5 	.word	0x00013cf5
    4554:	0001309d 	.word	0x0001309d
    4558:	3ef00000 	.word	0x3ef00000
    455c:	40590000 	.word	0x40590000

00004560 <get_temp>:

double get_temp()
{
    4560:	b510      	push	{r4, lr}
	double raw_data = request_data(HDC_TEMP);
    4562:	2000      	movs	r0, #0
    4564:	4b07      	ldr	r3, [pc, #28]	; (4584 <get_temp+0x24>)
    4566:	4798      	blx	r3
    4568:	4b07      	ldr	r3, [pc, #28]	; (4588 <get_temp+0x28>)
    456a:	4798      	blx	r3

	raw_data /= 65536.0;
    456c:	4c07      	ldr	r4, [pc, #28]	; (458c <get_temp+0x2c>)
    456e:	2200      	movs	r2, #0
    4570:	4b07      	ldr	r3, [pc, #28]	; (4590 <get_temp+0x30>)
    4572:	47a0      	blx	r4
	raw_data *= 165.0;
    4574:	2200      	movs	r2, #0
    4576:	4b07      	ldr	r3, [pc, #28]	; (4594 <get_temp+0x34>)
    4578:	47a0      	blx	r4
	raw_data -= 40.0;
    457a:	2200      	movs	r2, #0
    457c:	4b06      	ldr	r3, [pc, #24]	; (4598 <get_temp+0x38>)
    457e:	4c07      	ldr	r4, [pc, #28]	; (459c <get_temp+0x3c>)
    4580:	47a0      	blx	r4
	return raw_data;
}
    4582:	bd10      	pop	{r4, pc}
    4584:	00004485 	.word	0x00004485
    4588:	00013cf5 	.word	0x00013cf5
    458c:	0001309d 	.word	0x0001309d
    4590:	3ef00000 	.word	0x3ef00000
    4594:	4064a000 	.word	0x4064a000
    4598:	40440000 	.word	0x40440000
    459c:	0001359d 	.word	0x0001359d

000045a0 <configure_i2c_tsl2561>:
#include "TSL2561.h"

tsl2561_i2c_addr tsl2561_addr = 0;

void configure_i2c_tsl2561(tsl2561_i2c_addr addr)
{
    45a0:	b530      	push	{r4, r5, lr}
    45a2:	b08f      	sub	sp, #60	; 0x3c
    45a4:	0004      	movs	r4, r0
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    45a6:	aa01      	add	r2, sp, #4
    45a8:	2364      	movs	r3, #100	; 0x64
    45aa:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    45ac:	4b1f      	ldr	r3, [pc, #124]	; (462c <configure_i2c_tsl2561+0x8c>)
    45ae:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    45b0:	2300      	movs	r3, #0
    45b2:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    45b4:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    45b6:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    45b8:	2180      	movs	r1, #128	; 0x80
    45ba:	0389      	lsls	r1, r1, #14
    45bc:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    45be:	2101      	movs	r1, #1
    45c0:	4249      	negs	r1, r1
    45c2:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    45c4:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    45c6:	3125      	adds	r1, #37	; 0x25
    45c8:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    45ca:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    45cc:	3108      	adds	r1, #8
    45ce:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    45d0:	3101      	adds	r1, #1
    45d2:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    45d4:	3101      	adds	r1, #1
    45d6:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    45d8:	33d7      	adds	r3, #215	; 0xd7
    45da:	8613      	strh	r3, [r2, #48]	; 0x30
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    45dc:	4b14      	ldr	r3, [pc, #80]	; (4630 <configure_i2c_tsl2561+0x90>)
    45de:	61d3      	str	r3, [r2, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    45e0:	4b14      	ldr	r3, [pc, #80]	; (4634 <configure_i2c_tsl2561+0x94>)
    45e2:	6213      	str	r3, [r2, #32]
	enum status_code init_status = i2c_master_init(&i2c_tsl2561, SERCOM0, &config_i2c_master);
    45e4:	4914      	ldr	r1, [pc, #80]	; (4638 <configure_i2c_tsl2561+0x98>)
    45e6:	4815      	ldr	r0, [pc, #84]	; (463c <configure_i2c_tsl2561+0x9c>)
    45e8:	4b15      	ldr	r3, [pc, #84]	; (4640 <configure_i2c_tsl2561+0xa0>)
    45ea:	4798      	blx	r3
	if (STATUS_OK != init_status) {
    45ec:	2800      	cmp	r0, #0
    45ee:	d119      	bne.n	4624 <configure_i2c_tsl2561+0x84>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    45f0:	4b12      	ldr	r3, [pc, #72]	; (463c <configure_i2c_tsl2561+0x9c>)
    45f2:	681a      	ldr	r2, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    45f4:	2107      	movs	r1, #7
    45f6:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    45f8:	4219      	tst	r1, r3
    45fa:	d1fc      	bne.n	45f6 <configure_i2c_tsl2561+0x56>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    45fc:	6813      	ldr	r3, [r2, #0]
    45fe:	2102      	movs	r1, #2
    4600:	430b      	orrs	r3, r1
    4602:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    4604:	4b0d      	ldr	r3, [pc, #52]	; (463c <configure_i2c_tsl2561+0x9c>)
    4606:	88dd      	ldrh	r5, [r3, #6]
	uint32_t timeout_counter = 0;
    4608:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    460a:	2010      	movs	r0, #16
    460c:	8b51      	ldrh	r1, [r2, #26]
    460e:	4201      	tst	r1, r0
    4610:	d104      	bne.n	461c <configure_i2c_tsl2561+0x7c>
		timeout_counter++;
    4612:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    4614:	42ab      	cmp	r3, r5
    4616:	d3f9      	bcc.n	460c <configure_i2c_tsl2561+0x6c>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    4618:	2310      	movs	r3, #16
    461a:	8353      	strh	r3, [r2, #26]
		printf("failed to initialize TSL2561 driver.\r\n");
		return;
	}
	i2c_master_enable(&i2c_tsl2561);
	tsl2561_addr = addr;
    461c:	4b09      	ldr	r3, [pc, #36]	; (4644 <configure_i2c_tsl2561+0xa4>)
    461e:	701c      	strb	r4, [r3, #0]
}
    4620:	b00f      	add	sp, #60	; 0x3c
    4622:	bd30      	pop	{r4, r5, pc}
		printf("failed to initialize TSL2561 driver.\r\n");
    4624:	4808      	ldr	r0, [pc, #32]	; (4648 <configure_i2c_tsl2561+0xa8>)
    4626:	4b09      	ldr	r3, [pc, #36]	; (464c <configure_i2c_tsl2561+0xac>)
    4628:	4798      	blx	r3
    462a:	e7f9      	b.n	4620 <configure_i2c_tsl2561+0x80>
    462c:	00000d48 	.word	0x00000d48
    4630:	00080002 	.word	0x00080002
    4634:	00090002 	.word	0x00090002
    4638:	42000800 	.word	0x42000800
    463c:	200002a8 	.word	0x200002a8
    4640:	0000afa5 	.word	0x0000afa5
    4644:	200001fc 	.word	0x200001fc
    4648:	0001400c 	.word	0x0001400c
    464c:	0000f425 	.word	0x0000f425

00004650 <read_byte>:


uint8_t read_byte(tsl2561_registers reg)
{
    4650:	b500      	push	{lr}
    4652:	b085      	sub	sp, #20
	uint8_t received_data;
	uint8_t write_buffer = reg;
    4654:	230e      	movs	r3, #14
    4656:	446b      	add	r3, sp
    4658:	7018      	strb	r0, [r3, #0]
	struct i2c_master_packet packet = {
    465a:	4a18      	ldr	r2, [pc, #96]	; (46bc <read_byte+0x6c>)
    465c:	7812      	ldrb	r2, [r2, #0]
    465e:	4669      	mov	r1, sp
    4660:	800a      	strh	r2, [r1, #0]
    4662:	2201      	movs	r2, #1
    4664:	804a      	strh	r2, [r1, #2]
    4666:	9301      	str	r3, [sp, #4]
    4668:	2300      	movs	r3, #0
    466a:	720b      	strb	r3, [r1, #8]
    466c:	724b      	strb	r3, [r1, #9]
    466e:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait(&i2c_tsl2561, &packet);
    4670:	4813      	ldr	r0, [pc, #76]	; (46c0 <read_byte+0x70>)
    4672:	4b14      	ldr	r3, [pc, #80]	; (46c4 <read_byte+0x74>)
    4674:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
    4676:	2800      	cmp	r0, #0
    4678:	d008      	beq.n	468c <read_byte+0x3c>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
    467a:	230e      	movs	r3, #14
    467c:	446b      	add	r3, sp
    467e:	7819      	ldrb	r1, [r3, #0]
    4680:	4811      	ldr	r0, [pc, #68]	; (46c8 <read_byte+0x78>)
    4682:	4b12      	ldr	r3, [pc, #72]	; (46cc <read_byte+0x7c>)
    4684:	4798      	blx	r3
		return -1;
    4686:	20ff      	movs	r0, #255	; 0xff
	if (STATUS_OK != i2c_code) {
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
		return -1;
	}
	return received_data;
}
    4688:	b005      	add	sp, #20
    468a:	bd00      	pop	{pc}
	packet.data = &received_data;
    468c:	230f      	movs	r3, #15
    468e:	446b      	add	r3, sp
    4690:	9301      	str	r3, [sp, #4]
	packet.data_length = 1;
    4692:	2301      	movs	r3, #1
    4694:	466a      	mov	r2, sp
    4696:	8053      	strh	r3, [r2, #2]
	i2c_code = i2c_master_read_packet_wait(&i2c_tsl2561, &packet);
    4698:	4669      	mov	r1, sp
    469a:	4809      	ldr	r0, [pc, #36]	; (46c0 <read_byte+0x70>)
    469c:	4b0c      	ldr	r3, [pc, #48]	; (46d0 <read_byte+0x80>)
    469e:	4798      	blx	r3
	if (STATUS_OK != i2c_code) {
    46a0:	2800      	cmp	r0, #0
    46a2:	d103      	bne.n	46ac <read_byte+0x5c>
	return received_data;
    46a4:	230f      	movs	r3, #15
    46a6:	446b      	add	r3, sp
    46a8:	7818      	ldrb	r0, [r3, #0]
    46aa:	e7ed      	b.n	4688 <read_byte+0x38>
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
    46ac:	230e      	movs	r3, #14
    46ae:	446b      	add	r3, sp
    46b0:	7819      	ldrb	r1, [r3, #0]
    46b2:	4808      	ldr	r0, [pc, #32]	; (46d4 <read_byte+0x84>)
    46b4:	4b05      	ldr	r3, [pc, #20]	; (46cc <read_byte+0x7c>)
    46b6:	4798      	blx	r3
		return -1;
    46b8:	20ff      	movs	r0, #255	; 0xff
    46ba:	e7e5      	b.n	4688 <read_byte+0x38>
    46bc:	200001fc 	.word	0x200001fc
    46c0:	200002a8 	.word	0x200002a8
    46c4:	0000b591 	.word	0x0000b591
    46c8:	00014034 	.word	0x00014034
    46cc:	0000f309 	.word	0x0000f309
    46d0:	0000b57d 	.word	0x0000b57d
    46d4:	00013fb8 	.word	0x00013fb8

000046d8 <write_byte>:

void write_byte(tsl2561_registers reg, uint8_t data_byte)
{
    46d8:	b500      	push	{lr}
    46da:	b085      	sub	sp, #20
	uint8_t write_buffer[2] = { reg, data_byte };
    46dc:	ab03      	add	r3, sp, #12
    46de:	7018      	strb	r0, [r3, #0]
    46e0:	7059      	strb	r1, [r3, #1]
	struct i2c_master_packet packet = {
    46e2:	4a0b      	ldr	r2, [pc, #44]	; (4710 <write_byte+0x38>)
    46e4:	7812      	ldrb	r2, [r2, #0]
    46e6:	4669      	mov	r1, sp
    46e8:	800a      	strh	r2, [r1, #0]
    46ea:	2202      	movs	r2, #2
    46ec:	804a      	strh	r2, [r1, #2]
    46ee:	9301      	str	r3, [sp, #4]
    46f0:	2300      	movs	r3, #0
    46f2:	720b      	strb	r3, [r1, #8]
    46f4:	724b      	strb	r3, [r1, #9]
    46f6:	728b      	strb	r3, [r1, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_tsl2561, &packet);
    46f8:	4806      	ldr	r0, [pc, #24]	; (4714 <write_byte+0x3c>)
    46fa:	4b07      	ldr	r3, [pc, #28]	; (4718 <write_byte+0x40>)
    46fc:	4798      	blx	r3

	if (STATUS_OK != i2c_code) {
    46fe:	2800      	cmp	r0, #0
    4700:	d101      	bne.n	4706 <write_byte+0x2e>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
		return;
	}
}
    4702:	b005      	add	sp, #20
    4704:	bd00      	pop	{pc}
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
    4706:	a903      	add	r1, sp, #12
    4708:	4804      	ldr	r0, [pc, #16]	; (471c <write_byte+0x44>)
    470a:	4b05      	ldr	r3, [pc, #20]	; (4720 <write_byte+0x48>)
    470c:	4798      	blx	r3
    470e:	e7f8      	b.n	4702 <write_byte+0x2a>
    4710:	200001fc 	.word	0x200001fc
    4714:	200002a8 	.word	0x200002a8
    4718:	0000b5a5 	.word	0x0000b5a5
    471c:	00014034 	.word	0x00014034
    4720:	0000f309 	.word	0x0000f309

00004724 <set_gain>:
 * For now the integration time will always be 402ms. Will update once decide
 * if we need faster readings
 * @param new_gain new gain multiplier
 */
void set_gain(tsl2561_gains new_gain)
{
    4724:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | TIMING_REG, (INTEGRATE_402MS | new_gain));
    4726:	2102      	movs	r1, #2
    4728:	4301      	orrs	r1, r0
    472a:	2081      	movs	r0, #129	; 0x81
    472c:	4b01      	ldr	r3, [pc, #4]	; (4734 <set_gain+0x10>)
    472e:	4798      	blx	r3
}
    4730:	bd10      	pop	{r4, pc}
    4732:	46c0      	nop			; (mov r8, r8)
    4734:	000046d9 	.word	0x000046d9

00004738 <power_on_tsl2561>:

void power_on_tsl2561()
{
    4738:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | CTRL_REG, 0x03);
    473a:	2103      	movs	r1, #3
    473c:	2080      	movs	r0, #128	; 0x80
    473e:	4b03      	ldr	r3, [pc, #12]	; (474c <power_on_tsl2561+0x14>)
    4740:	4798      	blx	r3
	set_gain(GAIN_16X);
    4742:	2010      	movs	r0, #16
    4744:	4b02      	ldr	r3, [pc, #8]	; (4750 <power_on_tsl2561+0x18>)
    4746:	4798      	blx	r3
}
    4748:	bd10      	pop	{r4, pc}
    474a:	46c0      	nop			; (mov r8, r8)
    474c:	000046d9 	.word	0x000046d9
    4750:	00004725 	.word	0x00004725

00004754 <power_off_tsl2561>:

void power_off_tsl2561()
{
    4754:	b510      	push	{r4, lr}
	write_byte(CMD_BIT | CTRL_REG, 0x0);
    4756:	2100      	movs	r1, #0
    4758:	2080      	movs	r0, #128	; 0x80
    475a:	4b01      	ldr	r3, [pc, #4]	; (4760 <power_off_tsl2561+0xc>)
    475c:	4798      	blx	r3
}
    475e:	bd10      	pop	{r4, pc}
    4760:	000046d9 	.word	0x000046d9

00004764 <get_chan0>:
{
	return read_byte(CMD_BIT | ID_REG);
}

uint16_t get_chan0()
{
    4764:	b570      	push	{r4, r5, r6, lr}
	//TODO: add way to change this
	delay_ms(403);
    4766:	2094      	movs	r0, #148	; 0x94
    4768:	30ff      	adds	r0, #255	; 0xff
    476a:	4b06      	ldr	r3, [pc, #24]	; (4784 <get_chan0+0x20>)
    476c:	4798      	blx	r3
	//HAVE TO READ LOW REGISTER BEFORE HIGH REG PER DATASHEET
	return read_byte(CMD_BIT | CHAN0_LOW_REG) | (read_byte(CMD_BIT | CHAN0_HIGH_REG) << 8);
    476e:	208c      	movs	r0, #140	; 0x8c
    4770:	4c05      	ldr	r4, [pc, #20]	; (4788 <get_chan0+0x24>)
    4772:	47a0      	blx	r4
    4774:	0005      	movs	r5, r0
    4776:	208d      	movs	r0, #141	; 0x8d
    4778:	47a0      	blx	r4
    477a:	0200      	lsls	r0, r0, #8
    477c:	4328      	orrs	r0, r5
    477e:	b280      	uxth	r0, r0
}
    4780:	bd70      	pop	{r4, r5, r6, pc}
    4782:	46c0      	nop			; (mov r8, r8)
    4784:	0000d8d9 	.word	0x0000d8d9
    4788:	00004651 	.word	0x00004651

0000478c <get_chan1>:

uint16_t get_chan1()
{
    478c:	b570      	push	{r4, r5, r6, lr}
	//TODO: add way to change this
	delay_ms(403);
    478e:	2094      	movs	r0, #148	; 0x94
    4790:	30ff      	adds	r0, #255	; 0xff
    4792:	4b06      	ldr	r3, [pc, #24]	; (47ac <get_chan1+0x20>)
    4794:	4798      	blx	r3
	return read_byte(CMD_BIT | CHAN1_LOW_REG) | (read_byte(CMD_BIT | CHAN1_HIGH_REG) << 8);
    4796:	208e      	movs	r0, #142	; 0x8e
    4798:	4c05      	ldr	r4, [pc, #20]	; (47b0 <get_chan1+0x24>)
    479a:	47a0      	blx	r4
    479c:	0005      	movs	r5, r0
    479e:	208f      	movs	r0, #143	; 0x8f
    47a0:	47a0      	blx	r4
    47a2:	0200      	lsls	r0, r0, #8
    47a4:	4328      	orrs	r0, r5
    47a6:	b280      	uxth	r0, r0
}
    47a8:	bd70      	pop	{r4, r5, r6, pc}
    47aa:	46c0      	nop			; (mov r8, r8)
    47ac:	0000d8d9 	.word	0x0000d8d9
    47b0:	00004651 	.word	0x00004651

000047b4 <get_lux>:

uint32_t get_lux()
{
    47b4:	b570      	push	{r4, r5, r6, lr}
	uint16_t chan0 = get_chan0();
    47b6:	4b26      	ldr	r3, [pc, #152]	; (4850 <get_lux+0x9c>)
    47b8:	4798      	blx	r3
    47ba:	0004      	movs	r4, r0
	uint16_t chan1 = get_chan1();
    47bc:	4b25      	ldr	r3, [pc, #148]	; (4854 <get_lux+0xa0>)
    47be:	4798      	blx	r3
    47c0:	0005      	movs	r5, r0
		printf("get_lux: TSL2561 light is saturated");
		return -1;
	}

	unsigned long ratio10 = 0;
	if(chan0 != 0) {
    47c2:	2c00      	cmp	r4, #0
    47c4:	d01b      	beq.n	47fe <get_lux+0x4a>
		 ratio10 = (chan1 << (TSL2561_LUX_RATIOSCALE + 1)) / chan0;
    47c6:	0280      	lsls	r0, r0, #10
    47c8:	0021      	movs	r1, r4
    47ca:	4b23      	ldr	r3, [pc, #140]	; (4858 <get_lux+0xa4>)
    47cc:	4798      	blx	r3
	}
	ratio10 = (ratio10 + 1) >> 1;
    47ce:	3001      	adds	r0, #1
    47d0:	0840      	lsrs	r0, r0, #1
	unsigned int b, m;

	if ((ratio10 >= 0) && (ratio10 <= TSL2561_LUX_K1T)) {
    47d2:	2840      	cmp	r0, #64	; 0x40
    47d4:	d920      	bls.n	4818 <get_lux+0x64>
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
	} else if (ratio10 <= TSL2561_LUX_K2T) {
    47d6:	2880      	cmp	r0, #128	; 0x80
    47d8:	d923      	bls.n	4822 <get_lux+0x6e>
		b = TSL2561_LUX_B2T; m = TSL2561_LUX_M2T;
	} else if (ratio10 <= TSL2561_LUX_K3T) {
    47da:	28c0      	cmp	r0, #192	; 0xc0
    47dc:	d925      	bls.n	482a <get_lux+0x76>
		b = TSL2561_LUX_B3T; m = TSL2561_LUX_M3T;
	} else if (ratio10 <= TSL2561_LUX_K4T) {
    47de:	2380      	movs	r3, #128	; 0x80
    47e0:	005b      	lsls	r3, r3, #1
    47e2:	4298      	cmp	r0, r3
    47e4:	d924      	bls.n	4830 <get_lux+0x7c>
		b = TSL2561_LUX_B4T; m = TSL2561_LUX_M4T;
	} else if (ratio10 <= TSL2561_LUX_K5T) {
    47e6:	3338      	adds	r3, #56	; 0x38
    47e8:	4298      	cmp	r0, r3
    47ea:	d925      	bls.n	4838 <get_lux+0x84>
		b = TSL2561_LUX_B5T; m = TSL2561_LUX_M5T;
	} else if (ratio10 <= TSL2561_LUX_K6T) {
    47ec:	3362      	adds	r3, #98	; 0x62
    47ee:	4298      	cmp	r0, r3
    47f0:	d927      	bls.n	4842 <get_lux+0x8e>
		b = TSL2561_LUX_B6T; m = TSL2561_LUX_M6T;
	} else if (ratio10 <= TSL2561_LUX_K7T) {
    47f2:	4b1a      	ldr	r3, [pc, #104]	; (485c <get_lux+0xa8>)
    47f4:	4298      	cmp	r0, r3
    47f6:	d927      	bls.n	4848 <get_lux+0x94>
		b = TSL2561_LUX_B7T; m = TSL2561_LUX_M7T;
	} else if (ratio10 > TSL2561_LUX_K8T) {
		b = TSL2561_LUX_B8T; m = TSL2561_LUX_M8T;
    47f8:	2300      	movs	r3, #0
    47fa:	2000      	movs	r0, #0
    47fc:	e003      	b.n	4806 <get_lux+0x52>
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
    47fe:	23df      	movs	r3, #223	; 0xdf
    4800:	005b      	lsls	r3, r3, #1
    4802:	20f9      	movs	r0, #249	; 0xf9
    4804:	0040      	lsls	r0, r0, #1
	}
	
	
	unsigned long temp = ((chan0 * b) - (chan1 * m));
    4806:	4360      	muls	r0, r4
	temp = (temp) ? temp : 0; // no negative lux
	temp += (1 << (TSL2561_LUX_LUXSCALE - 1));
    4808:	2280      	movs	r2, #128	; 0x80
    480a:	0192      	lsls	r2, r2, #6
    480c:	4694      	mov	ip, r2
    480e:	4460      	add	r0, ip
	unsigned long temp = ((chan0 * b) - (chan1 * m));
    4810:	435d      	muls	r5, r3
	temp += (1 << (TSL2561_LUX_LUXSCALE - 1));
    4812:	1b40      	subs	r0, r0, r5
	uint32_t lux = temp >> TSL2561_LUX_LUXSCALE;
    4814:	0b80      	lsrs	r0, r0, #14
	return lux;
}
    4816:	bd70      	pop	{r4, r5, r6, pc}
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
    4818:	23df      	movs	r3, #223	; 0xdf
    481a:	005b      	lsls	r3, r3, #1
    481c:	20f9      	movs	r0, #249	; 0xf9
    481e:	0040      	lsls	r0, r0, #1
    4820:	e7f1      	b.n	4806 <get_lux+0x52>
		b = TSL2561_LUX_B2T; m = TSL2561_LUX_M2T;
    4822:	4b0f      	ldr	r3, [pc, #60]	; (4860 <get_lux+0xac>)
    4824:	2085      	movs	r0, #133	; 0x85
    4826:	0080      	lsls	r0, r0, #2
    4828:	e7ed      	b.n	4806 <get_lux+0x52>
		b = TSL2561_LUX_B3T; m = TSL2561_LUX_M3T;
    482a:	4b0e      	ldr	r3, [pc, #56]	; (4864 <get_lux+0xb0>)
    482c:	480e      	ldr	r0, [pc, #56]	; (4868 <get_lux+0xb4>)
    482e:	e7ea      	b.n	4806 <get_lux+0x52>
		b = TSL2561_LUX_B4T; m = TSL2561_LUX_M4T;
    4830:	4b0e      	ldr	r3, [pc, #56]	; (486c <get_lux+0xb8>)
    4832:	209c      	movs	r0, #156	; 0x9c
    4834:	0080      	lsls	r0, r0, #2
    4836:	e7e6      	b.n	4806 <get_lux+0x52>
		b = TSL2561_LUX_B5T; m = TSL2561_LUX_M5T;
    4838:	23fe      	movs	r3, #254	; 0xfe
    483a:	005b      	lsls	r3, r3, #1
    483c:	2070      	movs	r0, #112	; 0x70
    483e:	30ff      	adds	r0, #255	; 0xff
    4840:	e7e1      	b.n	4806 <get_lux+0x52>
		b = TSL2561_LUX_B6T; m = TSL2561_LUX_M6T;
    4842:	23fb      	movs	r3, #251	; 0xfb
    4844:	20d2      	movs	r0, #210	; 0xd2
    4846:	e7de      	b.n	4806 <get_lux+0x52>
		b = TSL2561_LUX_B7T; m = TSL2561_LUX_M7T;
    4848:	2312      	movs	r3, #18
    484a:	2018      	movs	r0, #24
    484c:	e7db      	b.n	4806 <get_lux+0x52>
    484e:	46c0      	nop			; (mov r8, r8)
    4850:	00004765 	.word	0x00004765
    4854:	0000478d 	.word	0x0000478d
    4858:	000119fd 	.word	0x000119fd
    485c:	0000029a 	.word	0x0000029a
    4860:	000002d1 	.word	0x000002d1
    4864:	0000037b 	.word	0x0000037b
    4868:	0000023f 	.word	0x0000023f
    486c:	000003fe 	.word	0x000003fe

00004870 <clear_state>:
 *
 */
//TODO: check and see if it will only clear on mask
static void clear_state(download_state mask)
{
	down_state &= ~mask;
    4870:	4a02      	ldr	r2, [pc, #8]	; (487c <clear_state+0xc>)
    4872:	8813      	ldrh	r3, [r2, #0]
    4874:	4383      	bics	r3, r0
    4876:	8013      	strh	r3, [r2, #0]
}
    4878:	4770      	bx	lr
    487a:	46c0      	nop			; (mov r8, r8)
    487c:	200002c0 	.word	0x200002c0

00004880 <add_state>:
/**
 * add a given state to the global download_state @ref down_state
 * @param mask add given state
 */
static void add_state(download_state mask)
{
    4880:	b510      	push	{r4, lr}
	down_state |= mask;
    4882:	4a0a      	ldr	r2, [pc, #40]	; (48ac <add_state+0x2c>)
    4884:	8813      	ldrh	r3, [r2, #0]
    4886:	4303      	orrs	r3, r0
    4888:	8013      	strh	r3, [r2, #0]
	if (mask == CANCELED || mask == COMPLETED)
    488a:	0002      	movs	r2, r0
    488c:	3a10      	subs	r2, #16
    488e:	4b08      	ldr	r3, [pc, #32]	; (48b0 <add_state+0x30>)
    4890:	421a      	tst	r2, r3
    4892:	d002      	beq.n	489a <add_state+0x1a>
		at25dfx_chip_sleep(&at25dfx_chip);
	else if (mask == DOWNLOADING)
    4894:	2808      	cmp	r0, #8
    4896:	d004      	beq.n	48a2 <add_state+0x22>
		at25dfx_chip_wake(&at25dfx_chip);
}
    4898:	bd10      	pop	{r4, pc}
		at25dfx_chip_sleep(&at25dfx_chip);
    489a:	4806      	ldr	r0, [pc, #24]	; (48b4 <add_state+0x34>)
    489c:	4b06      	ldr	r3, [pc, #24]	; (48b8 <add_state+0x38>)
    489e:	4798      	blx	r3
    48a0:	e7fa      	b.n	4898 <add_state+0x18>
		at25dfx_chip_wake(&at25dfx_chip);
    48a2:	4804      	ldr	r0, [pc, #16]	; (48b4 <add_state+0x34>)
    48a4:	4b05      	ldr	r3, [pc, #20]	; (48bc <add_state+0x3c>)
    48a6:	4798      	blx	r3
}
    48a8:	e7f6      	b.n	4898 <add_state+0x18>
    48aa:	46c0      	nop			; (mov r8, r8)
    48ac:	200002c0 	.word	0x200002c0
    48b0:	0000ffef 	.word	0x0000ffef
    48b4:	200002b8 	.word	0x200002b8
    48b8:	00005dd5 	.word	0x00005dd5
    48bc:	00005e61 	.word	0x00005e61

000048c0 <write_firmware_metadata>:
		return;
	}
}

static void write_firmware_metadata(uint32_t firmware_address, uint16_t firmware_version, uint32_t firmware_checksum, uint32_t fw_size)
{
    48c0:	b570      	push	{r4, r5, r6, lr}
    48c2:	b0c4      	sub	sp, #272	; 0x110
	if (FW1_ADDR == firmware_address)
    48c4:	2480      	movs	r4, #128	; 0x80
    48c6:	01a4      	lsls	r4, r4, #6
    48c8:	42a0      	cmp	r0, r4
    48ca:	d01b      	beq.n	4904 <write_firmware_metadata+0x44>
		firmware_address = FW1_HEADER_ADDR;
	else if (FW2_ADDR == firmware_address)
    48cc:	2482      	movs	r4, #130	; 0x82
    48ce:	02e4      	lsls	r4, r4, #11
    48d0:	42a0      	cmp	r0, r4
    48d2:	d001      	beq.n	48d8 <write_firmware_metadata+0x18>
	enum status_code write_code = at25dfx_chip_write_buffer(&at25dfx_chip, firmware_address, write_buffer, FLASH_ROW_SIZE);
	if (STATUS_OK != write_code) {
		printf("write_firmware_metadata: could not write to flash!\r\n");
		return;
	}
}
    48d4:	b044      	add	sp, #272	; 0x110
    48d6:	bd70      	pop	{r4, r5, r6, pc}
		firmware_address = FW2_HEADER_ADDR;
    48d8:	2480      	movs	r4, #128	; 0x80
    48da:	02e4      	lsls	r4, r4, #11
	fw_header_t new_firmware_header = { .fw_version = firmware_version, .checksum = firmware_checksum, .size = fw_size };
    48dc:	a841      	add	r0, sp, #260	; 0x104
    48de:	8001      	strh	r1, [r0, #0]
    48e0:	9242      	str	r2, [sp, #264]	; 0x108
    48e2:	9343      	str	r3, [sp, #268]	; 0x10c
	memcpy(write_buffer, &new_firmware_header, sizeof(fw_header_t));
    48e4:	aa01      	add	r2, sp, #4
    48e6:	0013      	movs	r3, r2
    48e8:	c862      	ldmia	r0!, {r1, r5, r6}
    48ea:	c362      	stmia	r3!, {r1, r5, r6}
	enum status_code write_code = at25dfx_chip_write_buffer(&at25dfx_chip, firmware_address, write_buffer, FLASH_ROW_SIZE);
    48ec:	2380      	movs	r3, #128	; 0x80
    48ee:	005b      	lsls	r3, r3, #1
    48f0:	0021      	movs	r1, r4
    48f2:	4806      	ldr	r0, [pc, #24]	; (490c <write_firmware_metadata+0x4c>)
    48f4:	4c06      	ldr	r4, [pc, #24]	; (4910 <write_firmware_metadata+0x50>)
    48f6:	47a0      	blx	r4
	if (STATUS_OK != write_code) {
    48f8:	2800      	cmp	r0, #0
    48fa:	d0eb      	beq.n	48d4 <write_firmware_metadata+0x14>
		printf("write_firmware_metadata: could not write to flash!\r\n");
    48fc:	4805      	ldr	r0, [pc, #20]	; (4914 <write_firmware_metadata+0x54>)
    48fe:	4b06      	ldr	r3, [pc, #24]	; (4918 <write_firmware_metadata+0x58>)
    4900:	4798      	blx	r3
		return;
    4902:	e7e7      	b.n	48d4 <write_firmware_metadata+0x14>
		firmware_address = FW1_HEADER_ADDR;
    4904:	2480      	movs	r4, #128	; 0x80
    4906:	0164      	lsls	r4, r4, #5
    4908:	e7e8      	b.n	48dc <write_firmware_metadata+0x1c>
    490a:	46c0      	nop			; (mov r8, r8)
    490c:	200002b8 	.word	0x200002b8
    4910:	00005691 	.word	0x00005691
    4914:	000149c8 	.word	0x000149c8
    4918:	0000f425 	.word	0x0000f425

0000491c <update_boot_status>:

/**
 * update the boot status struct in internal memory
 */
static void update_boot_status()
{
    491c:	b5f0      	push	{r4, r5, r6, r7, lr}
    491e:	b0c7      	sub	sp, #284	; 0x11c
	struct nvm_parameters nvm_information;

	nvm_get_parameters(&nvm_information);
    4920:	a843      	add	r0, sp, #268	; 0x10c
    4922:	4b2b      	ldr	r3, [pc, #172]	; (49d0 <update_boot_status+0xb4>)
    4924:	4798      	blx	r3
	uint16_t num_pages = nvm_information.nvm_number_of_pages;
	int page_to_write = BOOT_STATUS_ADDR / NVMCTRL_PAGE_SIZE;
	int row_to_erase = page_to_write / NVMCTRL_ROW_PAGES;
	printf("update_boot_status: row_to_erase: %d\r\n", row_to_erase);
    4926:	213f      	movs	r1, #63	; 0x3f
    4928:	482a      	ldr	r0, [pc, #168]	; (49d4 <update_boot_status+0xb8>)
    492a:	4d2b      	ldr	r5, [pc, #172]	; (49d8 <update_boot_status+0xbc>)
    492c:	47a8      	blx	r5
	printf("update_boot_status: page_to_write: %d\r\n", page_to_write);
    492e:	21ff      	movs	r1, #255	; 0xff
    4930:	482a      	ldr	r0, [pc, #168]	; (49dc <update_boot_status+0xc0>)
    4932:	47a8      	blx	r5
	uint8_t page_offset = page_to_write - (row_to_erase * NVMCTRL_ROW_PAGES);
	int row_address = row_to_erase * NVMCTRL_ROW_SIZE;
	printf("update_boot_status: row_address: %d\r\n", row_address);
    4934:	24fc      	movs	r4, #252	; 0xfc
    4936:	01a4      	lsls	r4, r4, #6
    4938:	0021      	movs	r1, r4
    493a:	4829      	ldr	r0, [pc, #164]	; (49e0 <update_boot_status+0xc4>)
    493c:	47a8      	blx	r5
	printf("update_boot_status: page_offset: %d\r\n", page_offset);
    493e:	2103      	movs	r1, #3
    4940:	4828      	ldr	r0, [pc, #160]	; (49e4 <update_boot_status+0xc8>)
    4942:	47a8      	blx	r5
	uint8_t row_buffer[NVMCTRL_ROW_SIZE];
	enum status_code read_nvm_code;
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
		int offset = i * NVMCTRL_PAGE_SIZE;
		do
			read_nvm_code = nvm_read_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
    4944:	4e28      	ldr	r6, [pc, #160]	; (49e8 <update_boot_status+0xcc>)
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    4946:	2780      	movs	r7, #128	; 0x80
    4948:	01ff      	lsls	r7, r7, #7
			read_nvm_code = nvm_read_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
    494a:	4b28      	ldr	r3, [pc, #160]	; (49ec <update_boot_status+0xd0>)
    494c:	18e5      	adds	r5, r4, r3
    494e:	ab03      	add	r3, sp, #12
    4950:	469c      	mov	ip, r3
    4952:	4465      	add	r5, ip
    4954:	2240      	movs	r2, #64	; 0x40
    4956:	0029      	movs	r1, r5
    4958:	0020      	movs	r0, r4
    495a:	47b0      	blx	r6
		while (STATUS_OK != read_nvm_code);
    495c:	2800      	cmp	r0, #0
    495e:	d1f9      	bne.n	4954 <update_boot_status+0x38>
    4960:	3440      	adds	r4, #64	; 0x40
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    4962:	42bc      	cmp	r4, r7
    4964:	d1f1      	bne.n	494a <update_boot_status+0x2e>
	}
	printf("row: %04x\r\n", row_buffer);
    4966:	a903      	add	r1, sp, #12
    4968:	4821      	ldr	r0, [pc, #132]	; (49f0 <update_boot_status+0xd4>)
    496a:	4b1b      	ldr	r3, [pc, #108]	; (49d8 <update_boot_status+0xbc>)
    496c:	4798      	blx	r3
	do
		read_nvm_code = nvm_erase_row(row_address);
    496e:	25fc      	movs	r5, #252	; 0xfc
    4970:	01ad      	lsls	r5, r5, #6
    4972:	4c20      	ldr	r4, [pc, #128]	; (49f4 <update_boot_status+0xd8>)
    4974:	0028      	movs	r0, r5
    4976:	47a0      	blx	r4
	while (STATUS_OK != read_nvm_code);
    4978:	2800      	cmp	r0, #0
    497a:	d1fb      	bne.n	4974 <update_boot_status+0x58>

	fw_status_t write_boot;
	memcpy(&write_boot, row_buffer + page_offset * NVMCTRL_PAGE_SIZE, sizeof(fw_status_t));
    497c:	ac01      	add	r4, sp, #4
    497e:	ad33      	add	r5, sp, #204	; 0xcc
    4980:	0023      	movs	r3, r4
    4982:	002a      	movs	r2, r5
    4984:	ca03      	ldmia	r2!, {r0, r1}
    4986:	c303      	stmia	r3!, {r0, r1}
	write_boot.new_image_ready = 1;
    4988:	2301      	movs	r3, #1
    498a:	70e3      	strb	r3, [r4, #3]
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[0]);
    498c:	7821      	ldrb	r1, [r4, #0]
    498e:	481a      	ldr	r0, [pc, #104]	; (49f8 <update_boot_status+0xdc>)
    4990:	4f11      	ldr	r7, [pc, #68]	; (49d8 <update_boot_status+0xbc>)
    4992:	47b8      	blx	r7
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[1]);
    4994:	7861      	ldrb	r1, [r4, #1]
    4996:	4818      	ldr	r0, [pc, #96]	; (49f8 <update_boot_status+0xdc>)
    4998:	47b8      	blx	r7
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[2]);
    499a:	78a1      	ldrb	r1, [r4, #2]
    499c:	4816      	ldr	r0, [pc, #88]	; (49f8 <update_boot_status+0xdc>)
    499e:	47b8      	blx	r7
	memcpy(row_buffer + (page_offset * NVMCTRL_PAGE_SIZE), &write_boot, sizeof(fw_status_t));

	memcpy(row_buffer + (page_offset * NVMCTRL_PAGE_SIZE), &write_boot, sizeof(fw_status_t));
    49a0:	cc0c      	ldmia	r4!, {r2, r3}
    49a2:	c50c      	stmia	r5!, {r2, r3}
    49a4:	24fc      	movs	r4, #252	; 0xfc
    49a6:	01a4      	lsls	r4, r4, #6
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
		int offset = i * NVMCTRL_PAGE_SIZE;
		do
			read_nvm_code = nvm_write_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
    49a8:	4e14      	ldr	r6, [pc, #80]	; (49fc <update_boot_status+0xe0>)
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    49aa:	2780      	movs	r7, #128	; 0x80
    49ac:	01ff      	lsls	r7, r7, #7
			read_nvm_code = nvm_write_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
    49ae:	4b0f      	ldr	r3, [pc, #60]	; (49ec <update_boot_status+0xd0>)
    49b0:	18e5      	adds	r5, r4, r3
    49b2:	ab03      	add	r3, sp, #12
    49b4:	469c      	mov	ip, r3
    49b6:	4465      	add	r5, ip
    49b8:	2240      	movs	r2, #64	; 0x40
    49ba:	0029      	movs	r1, r5
    49bc:	0020      	movs	r0, r4
    49be:	47b0      	blx	r6
		while (STATUS_OK != read_nvm_code);
    49c0:	2800      	cmp	r0, #0
    49c2:	d1f9      	bne.n	49b8 <update_boot_status+0x9c>
    49c4:	3440      	adds	r4, #64	; 0x40
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    49c6:	42bc      	cmp	r4, r7
    49c8:	d1f1      	bne.n	49ae <update_boot_status+0x92>
	}
}
    49ca:	b047      	add	sp, #284	; 0x11c
    49cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49ce:	46c0      	nop			; (mov r8, r8)
    49d0:	0000db9d 	.word	0x0000db9d
    49d4:	00014740 	.word	0x00014740
    49d8:	0000f309 	.word	0x0000f309
    49dc:	00014768 	.word	0x00014768
    49e0:	00014790 	.word	0x00014790
    49e4:	000147b8 	.word	0x000147b8
    49e8:	0000dad5 	.word	0x0000dad5
    49ec:	ffffc100 	.word	0xffffc100
    49f0:	000147e0 	.word	0x000147e0
    49f4:	0000db41 	.word	0x0000db41
    49f8:	000147ec 	.word	0x000147ec
    49fc:	0000da2d 	.word	0x0000da2d

00004a00 <socket_callback>:
 * @param sock    open socket
 * @param evt     event change that pulled callback
 * @param evt_msg event data
 */
void socket_callback(SOCKET sock, uint8_t evt, void *evt_msg)
{
    4a00:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, evt, evt_msg);
    4a02:	4b01      	ldr	r3, [pc, #4]	; (4a08 <socket_callback+0x8>)
    4a04:	4798      	blx	r3
}
    4a06:	bd10      	pop	{r4, pc}
    4a08:	0000a559 	.word	0x0000a559

00004a0c <resolve_cb>:
 * callback to resolve http address to an IP address
 * @param pu8DomainName unknown??
 * @param u32ServerIP   unknown??
 */
void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    4a0c:	b570      	push	{r4, r5, r6, lr}
    4a0e:	b082      	sub	sp, #8
    4a10:	0005      	movs	r5, r0
    4a12:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
	       (int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    4a14:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    4a16:	21ff      	movs	r1, #255	; 0xff
    4a18:	400b      	ands	r3, r1
    4a1a:	000a      	movs	r2, r1
    4a1c:	4022      	ands	r2, r4
	       (int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    4a1e:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    4a20:	9001      	str	r0, [sp, #4]
	       (int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    4a22:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    4a24:	4001      	ands	r1, r0
    4a26:	9100      	str	r1, [sp, #0]
    4a28:	0029      	movs	r1, r5
    4a2a:	4804      	ldr	r0, [pc, #16]	; (4a3c <resolve_cb+0x30>)
    4a2c:	4e04      	ldr	r6, [pc, #16]	; (4a40 <resolve_cb+0x34>)
    4a2e:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    4a30:	0021      	movs	r1, r4
    4a32:	0028      	movs	r0, r5
    4a34:	4b03      	ldr	r3, [pc, #12]	; (4a44 <resolve_cb+0x38>)
    4a36:	4798      	blx	r3
}
    4a38:	b002      	add	sp, #8
    4a3a:	bd70      	pop	{r4, r5, r6, pc}
    4a3c:	000142c4 	.word	0x000142c4
    4a40:	0000f309 	.word	0x0000f309
    4a44:	0000992d 	.word	0x0000992d

00004a48 <start_download>:
{
    4a48:	b510      	push	{r4, lr}
    4a4a:	b082      	sub	sp, #8
	return (down_state & mask) != 0;
    4a4c:	4b20      	ldr	r3, [pc, #128]	; (4ad0 <start_download+0x88>)
    4a4e:	881b      	ldrh	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
    4a50:	07da      	lsls	r2, r3, #31
    4a52:	d512      	bpl.n	4a7a <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
    4a54:	079a      	lsls	r2, r3, #30
    4a56:	d515      	bpl.n	4a84 <start_download+0x3c>
	if (is_state_set(GET_REQUESTED)) {
    4a58:	075a      	lsls	r2, r3, #29
    4a5a:	d417      	bmi.n	4a8c <start_download+0x44>
	if (is_state_set(DOWNLOADING)) {
    4a5c:	071a      	lsls	r2, r3, #28
    4a5e:	d419      	bmi.n	4a94 <start_download+0x4c>
	if (is_state_set(NOT_CHECKED)) {
    4a60:	065a      	lsls	r2, r3, #25
    4a62:	d41b      	bmi.n	4a9c <start_download+0x54>
	if (is_state_set(UPDATE_AVAILABLE)) {
    4a64:	061a      	lsls	r2, r3, #24
    4a66:	d426      	bmi.n	4ab6 <start_download+0x6e>
	if (is_state_set(UPDATE_NOT_AVAILABLE)) {
    4a68:	05db      	lsls	r3, r3, #23
    4a6a:	d509      	bpl.n	4a80 <start_download+0x38>
		printf("start_download: no update available\r\n");
    4a6c:	4819      	ldr	r0, [pc, #100]	; (4ad4 <start_download+0x8c>)
    4a6e:	4b1a      	ldr	r3, [pc, #104]	; (4ad8 <start_download+0x90>)
    4a70:	4798      	blx	r3
		add_state(COMPLETED);
    4a72:	2010      	movs	r0, #16
    4a74:	4b19      	ldr	r3, [pc, #100]	; (4adc <start_download+0x94>)
    4a76:	4798      	blx	r3
		return;
    4a78:	e002      	b.n	4a80 <start_download+0x38>
		printf("start_download: MMC storage not ready.\r\n");
    4a7a:	4819      	ldr	r0, [pc, #100]	; (4ae0 <start_download+0x98>)
    4a7c:	4b16      	ldr	r3, [pc, #88]	; (4ad8 <start_download+0x90>)
    4a7e:	4798      	blx	r3
}
    4a80:	b002      	add	sp, #8
    4a82:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
    4a84:	4817      	ldr	r0, [pc, #92]	; (4ae4 <start_download+0x9c>)
    4a86:	4b14      	ldr	r3, [pc, #80]	; (4ad8 <start_download+0x90>)
    4a88:	4798      	blx	r3
		return;
    4a8a:	e7f9      	b.n	4a80 <start_download+0x38>
		printf("start_download: request is sent already.\r\n");
    4a8c:	4816      	ldr	r0, [pc, #88]	; (4ae8 <start_download+0xa0>)
    4a8e:	4b12      	ldr	r3, [pc, #72]	; (4ad8 <start_download+0x90>)
    4a90:	4798      	blx	r3
		return;
    4a92:	e7f5      	b.n	4a80 <start_download+0x38>
		printf("start_download: running download already.\r\n");
    4a94:	4815      	ldr	r0, [pc, #84]	; (4aec <start_download+0xa4>)
    4a96:	4b10      	ldr	r3, [pc, #64]	; (4ad8 <start_download+0x90>)
    4a98:	4798      	blx	r3
		return;
    4a9a:	e7f1      	b.n	4a80 <start_download+0x38>
		printf("start_download [NOT_CHECKED]: sending HTTP request for header\r\n");
    4a9c:	4814      	ldr	r0, [pc, #80]	; (4af0 <start_download+0xa8>)
    4a9e:	4b0e      	ldr	r3, [pc, #56]	; (4ad8 <start_download+0x90>)
    4aa0:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, current_wifi_config->firmware_header_http_address, HTTP_METHOD_GET, NULL, NULL);
    4aa2:	4b14      	ldr	r3, [pc, #80]	; (4af4 <start_download+0xac>)
    4aa4:	681b      	ldr	r3, [r3, #0]
    4aa6:	68d9      	ldr	r1, [r3, #12]
    4aa8:	2300      	movs	r3, #0
    4aaa:	9300      	str	r3, [sp, #0]
    4aac:	2201      	movs	r2, #1
    4aae:	4812      	ldr	r0, [pc, #72]	; (4af8 <start_download+0xb0>)
    4ab0:	4c12      	ldr	r4, [pc, #72]	; (4afc <start_download+0xb4>)
    4ab2:	47a0      	blx	r4
		return;
    4ab4:	e7e4      	b.n	4a80 <start_download+0x38>
		printf("start_download [UPDATE_AVAILABLE]: sending HTTP request for firmware\r\n");
    4ab6:	4812      	ldr	r0, [pc, #72]	; (4b00 <start_download+0xb8>)
    4ab8:	4b07      	ldr	r3, [pc, #28]	; (4ad8 <start_download+0x90>)
    4aba:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, current_wifi_config->firmware_http_address, HTTP_METHOD_GET, NULL, NULL);
    4abc:	4b0d      	ldr	r3, [pc, #52]	; (4af4 <start_download+0xac>)
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	6919      	ldr	r1, [r3, #16]
    4ac2:	2300      	movs	r3, #0
    4ac4:	9300      	str	r3, [sp, #0]
    4ac6:	2201      	movs	r2, #1
    4ac8:	480b      	ldr	r0, [pc, #44]	; (4af8 <start_download+0xb0>)
    4aca:	4c0c      	ldr	r4, [pc, #48]	; (4afc <start_download+0xb4>)
    4acc:	47a0      	blx	r4
		return;
    4ace:	e7d7      	b.n	4a80 <start_download+0x38>
    4ad0:	200002c0 	.word	0x200002c0
    4ad4:	00014428 	.word	0x00014428
    4ad8:	0000f425 	.word	0x0000f425
    4adc:	00004881 	.word	0x00004881
    4ae0:	000142f4 	.word	0x000142f4
    4ae4:	0001431c 	.word	0x0001431c
    4ae8:	00014348 	.word	0x00014348
    4aec:	00014374 	.word	0x00014374
    4af0:	000143a0 	.word	0x000143a0
    4af4:	20000448 	.word	0x20000448
    4af8:	2000031c 	.word	0x2000031c
    4afc:	00009e5d 	.word	0x00009e5d
    4b00:	000143e0 	.word	0x000143e0

00004b04 <wifi_callback>:
 * Callback for wifi state changes
 * @param evt     event change
 * @param evt_msg information about wifi state change
 */
void wifi_callback(uint8_t evt, void *evt_msg)
{
    4b04:	b530      	push	{r4, r5, lr}
    4b06:	b083      	sub	sp, #12
	switch (evt) {
    4b08:	282c      	cmp	r0, #44	; 0x2c
    4b0a:	d006      	beq.n	4b1a <wifi_callback+0x16>
    4b0c:	2832      	cmp	r0, #50	; 0x32
    4b0e:	d034      	beq.n	4b7a <wifi_callback+0x76>
		add_state(WIFI_CONNECTED);
		start_download();
		break;
	}
	default:
		printf("wifi_callback [default]: ERROR evt %d\r\n", evt);
    4b10:	0001      	movs	r1, r0
    4b12:	4822      	ldr	r0, [pc, #136]	; (4b9c <wifi_callback+0x98>)
    4b14:	4b22      	ldr	r3, [pc, #136]	; (4ba0 <wifi_callback+0x9c>)
    4b16:	4798      	blx	r3
	}
}
    4b18:	e03d      	b.n	4b96 <wifi_callback+0x92>
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    4b1a:	780b      	ldrb	r3, [r1, #0]
    4b1c:	2b01      	cmp	r3, #1
    4b1e:	d01e      	beq.n	4b5e <wifi_callback+0x5a>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    4b20:	2b00      	cmp	r3, #0
    4b22:	d138      	bne.n	4b96 <wifi_callback+0x92>
			printf("wifi_callback [M2M_WIFI_RESP_CON_STATE_CHANGED] disconnected.\r\n");
    4b24:	481f      	ldr	r0, [pc, #124]	; (4ba4 <wifi_callback+0xa0>)
    4b26:	4b20      	ldr	r3, [pc, #128]	; (4ba8 <wifi_callback+0xa4>)
    4b28:	4798      	blx	r3
			clear_state(WIFI_CONNECTED);
    4b2a:	2002      	movs	r0, #2
    4b2c:	4b1f      	ldr	r3, [pc, #124]	; (4bac <wifi_callback+0xa8>)
    4b2e:	4798      	blx	r3
	return (down_state & mask) != 0;
    4b30:	4b1f      	ldr	r3, [pc, #124]	; (4bb0 <wifi_callback+0xac>)
    4b32:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(DOWNLOADING))
    4b34:	071b      	lsls	r3, r3, #28
    4b36:	d418      	bmi.n	4b6a <wifi_callback+0x66>
	return (down_state & mask) != 0;
    4b38:	4b1d      	ldr	r3, [pc, #116]	; (4bb0 <wifi_callback+0xac>)
    4b3a:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED))
    4b3c:	075b      	lsls	r3, r3, #29
    4b3e:	d418      	bmi.n	4b72 <wifi_callback+0x6e>
			m2m_wifi_connect(current_wifi_config->ssid, strlen(current_wifi_config->ssid), current_wifi_config->auth_type, current_wifi_config->password, M2M_WIFI_CH_ALL);
    4b40:	4b1c      	ldr	r3, [pc, #112]	; (4bb4 <wifi_callback+0xb0>)
    4b42:	681c      	ldr	r4, [r3, #0]
    4b44:	6825      	ldr	r5, [r4, #0]
    4b46:	0028      	movs	r0, r5
    4b48:	4b1b      	ldr	r3, [pc, #108]	; (4bb8 <wifi_callback+0xb4>)
    4b4a:	4798      	blx	r3
    4b4c:	68a3      	ldr	r3, [r4, #8]
    4b4e:	7922      	ldrb	r2, [r4, #4]
    4b50:	b2c1      	uxtb	r1, r0
    4b52:	20ff      	movs	r0, #255	; 0xff
    4b54:	9000      	str	r0, [sp, #0]
    4b56:	0028      	movs	r0, r5
    4b58:	4c18      	ldr	r4, [pc, #96]	; (4bbc <wifi_callback+0xb8>)
    4b5a:	47a0      	blx	r4
    4b5c:	e01b      	b.n	4b96 <wifi_callback+0x92>
			printf("wifi_callback [M2M_WIFI_RESP_CON_STATE_CHANGED]: connected.\r\n");
    4b5e:	4818      	ldr	r0, [pc, #96]	; (4bc0 <wifi_callback+0xbc>)
    4b60:	4b11      	ldr	r3, [pc, #68]	; (4ba8 <wifi_callback+0xa4>)
    4b62:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    4b64:	4b17      	ldr	r3, [pc, #92]	; (4bc4 <wifi_callback+0xc0>)
    4b66:	4798      	blx	r3
    4b68:	e015      	b.n	4b96 <wifi_callback+0x92>
				clear_state(DOWNLOADING);
    4b6a:	2008      	movs	r0, #8
    4b6c:	4b0f      	ldr	r3, [pc, #60]	; (4bac <wifi_callback+0xa8>)
    4b6e:	4798      	blx	r3
    4b70:	e7e2      	b.n	4b38 <wifi_callback+0x34>
				clear_state(GET_REQUESTED);
    4b72:	2004      	movs	r0, #4
    4b74:	4b0d      	ldr	r3, [pc, #52]	; (4bac <wifi_callback+0xa8>)
    4b76:	4798      	blx	r3
    4b78:	e7e2      	b.n	4b40 <wifi_callback+0x3c>
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
    4b7a:	788b      	ldrb	r3, [r1, #2]
    4b7c:	784a      	ldrb	r2, [r1, #1]
    4b7e:	7808      	ldrb	r0, [r1, #0]
    4b80:	78c9      	ldrb	r1, [r1, #3]
    4b82:	9100      	str	r1, [sp, #0]
    4b84:	0001      	movs	r1, r0
    4b86:	4810      	ldr	r0, [pc, #64]	; (4bc8 <wifi_callback+0xc4>)
    4b88:	4c05      	ldr	r4, [pc, #20]	; (4ba0 <wifi_callback+0x9c>)
    4b8a:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
    4b8c:	2002      	movs	r0, #2
    4b8e:	4b0f      	ldr	r3, [pc, #60]	; (4bcc <wifi_callback+0xc8>)
    4b90:	4798      	blx	r3
		start_download();
    4b92:	4b0f      	ldr	r3, [pc, #60]	; (4bd0 <wifi_callback+0xcc>)
    4b94:	4798      	blx	r3
}
    4b96:	b003      	add	sp, #12
    4b98:	bd30      	pop	{r4, r5, pc}
    4b9a:	46c0      	nop			; (mov r8, r8)
    4b9c:	000149a0 	.word	0x000149a0
    4ba0:	0000f309 	.word	0x0000f309
    4ba4:	0001491c 	.word	0x0001491c
    4ba8:	0000f425 	.word	0x0000f425
    4bac:	00004871 	.word	0x00004871
    4bb0:	200002c0 	.word	0x200002c0
    4bb4:	20000448 	.word	0x20000448
    4bb8:	0000f66b 	.word	0x0000f66b
    4bbc:	000074f5 	.word	0x000074f5
    4bc0:	000148dc 	.word	0x000148dc
    4bc4:	00007511 	.word	0x00007511
    4bc8:	0001495c 	.word	0x0001495c
    4bcc:	00004881 	.word	0x00004881
    4bd0:	00004a49 	.word	0x00004a49

00004bd4 <verify_flash>:
{
    4bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bd6:	46c6      	mov	lr, r8
    4bd8:	b500      	push	{lr}
    4bda:	b084      	sub	sp, #16
    4bdc:	9001      	str	r0, [sp, #4]
	crc32_t flash_checksum = 0;
    4bde:	2300      	movs	r3, #0
    4be0:	9303      	str	r3, [sp, #12]
	printf("starting seed: %04x\r\n", flash_checksum);
    4be2:	2100      	movs	r1, #0
    4be4:	482e      	ldr	r0, [pc, #184]	; (4ca0 <verify_flash+0xcc>)
    4be6:	4b2f      	ldr	r3, [pc, #188]	; (4ca4 <verify_flash+0xd0>)
    4be8:	4798      	blx	r3
	for (int i = 0; i < total_bytes_written / FLASH_ROW_SIZE; i++) {
    4bea:	4b2f      	ldr	r3, [pc, #188]	; (4ca8 <verify_flash+0xd4>)
    4bec:	681b      	ldr	r3, [r3, #0]
    4bee:	2bff      	cmp	r3, #255	; 0xff
    4bf0:	d930      	bls.n	4c54 <verify_flash+0x80>
    4bf2:	2480      	movs	r4, #128	; 0x80
    4bf4:	01a4      	lsls	r4, r4, #6
    4bf6:	2700      	movs	r7, #0
		read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW1_ADDR + (i * FLASH_ROW_SIZE), write_row_buffer, FLASH_ROW_SIZE);
    4bf8:	4d2c      	ldr	r5, [pc, #176]	; (4cac <verify_flash+0xd8>)
    4bfa:	4e2d      	ldr	r6, [pc, #180]	; (4cb0 <verify_flash+0xdc>)
    4bfc:	e018      	b.n	4c30 <verify_flash+0x5c>
			printf("verify_flash: error trying to read external flash. %d", read_status);
    4bfe:	0001      	movs	r1, r0
    4c00:	482c      	ldr	r0, [pc, #176]	; (4cb4 <verify_flash+0xe0>)
    4c02:	4b28      	ldr	r3, [pc, #160]	; (4ca4 <verify_flash+0xd0>)
    4c04:	4798      	blx	r3
			return false;
    4c06:	2000      	movs	r0, #0
    4c08:	e045      	b.n	4c96 <verify_flash+0xc2>
			crc32_recalculate(write_row_buffer, FLASH_ROW_SIZE, &flash_checksum);
    4c0a:	aa03      	add	r2, sp, #12
    4c0c:	2180      	movs	r1, #128	; 0x80
    4c0e:	0049      	lsls	r1, r1, #1
    4c10:	4826      	ldr	r0, [pc, #152]	; (4cac <verify_flash+0xd8>)
    4c12:	4b29      	ldr	r3, [pc, #164]	; (4cb8 <verify_flash+0xe4>)
    4c14:	4798      	blx	r3
		printf("%d. verify_flash: crc_val: %d\r\n", i, flash_checksum);
    4c16:	9a03      	ldr	r2, [sp, #12]
    4c18:	0039      	movs	r1, r7
    4c1a:	4828      	ldr	r0, [pc, #160]	; (4cbc <verify_flash+0xe8>)
    4c1c:	4b21      	ldr	r3, [pc, #132]	; (4ca4 <verify_flash+0xd0>)
    4c1e:	4798      	blx	r3
	for (int i = 0; i < total_bytes_written / FLASH_ROW_SIZE; i++) {
    4c20:	3701      	adds	r7, #1
    4c22:	4b21      	ldr	r3, [pc, #132]	; (4ca8 <verify_flash+0xd4>)
    4c24:	681b      	ldr	r3, [r3, #0]
    4c26:	3401      	adds	r4, #1
    4c28:	34ff      	adds	r4, #255	; 0xff
    4c2a:	0a1a      	lsrs	r2, r3, #8
    4c2c:	42ba      	cmp	r2, r7
    4c2e:	d911      	bls.n	4c54 <verify_flash+0x80>
		read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW1_ADDR + (i * FLASH_ROW_SIZE), write_row_buffer, FLASH_ROW_SIZE);
    4c30:	2380      	movs	r3, #128	; 0x80
    4c32:	005b      	lsls	r3, r3, #1
    4c34:	002a      	movs	r2, r5
    4c36:	0021      	movs	r1, r4
    4c38:	4821      	ldr	r0, [pc, #132]	; (4cc0 <verify_flash+0xec>)
    4c3a:	47b0      	blx	r6
		if (STATUS_OK != read_status) {
    4c3c:	2800      	cmp	r0, #0
    4c3e:	d1de      	bne.n	4bfe <verify_flash+0x2a>
		if (!flash_checksum)
    4c40:	9b03      	ldr	r3, [sp, #12]
    4c42:	2b00      	cmp	r3, #0
    4c44:	d1e1      	bne.n	4c0a <verify_flash+0x36>
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
	*crc = 0;

	return crc32_recalculate(data, length, crc);
    4c46:	aa03      	add	r2, sp, #12
    4c48:	2180      	movs	r1, #128	; 0x80
    4c4a:	0049      	lsls	r1, r1, #1
    4c4c:	4817      	ldr	r0, [pc, #92]	; (4cac <verify_flash+0xd8>)
    4c4e:	4b1a      	ldr	r3, [pc, #104]	; (4cb8 <verify_flash+0xe4>)
    4c50:	4798      	blx	r3
    4c52:	e7e0      	b.n	4c16 <verify_flash+0x42>
	int remaining_bytes = total_bytes_written % FLASH_ROW_SIZE;
    4c54:	24ff      	movs	r4, #255	; 0xff
    4c56:	401c      	ands	r4, r3
	printf("verify_flash: remaining bytes %d\r\n", remaining_bytes);
    4c58:	0021      	movs	r1, r4
    4c5a:	481a      	ldr	r0, [pc, #104]	; (4cc4 <verify_flash+0xf0>)
    4c5c:	4f11      	ldr	r7, [pc, #68]	; (4ca4 <verify_flash+0xd0>)
    4c5e:	47b8      	blx	r7
	read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW1_ADDR + (total_bytes_written - remaining_bytes), write_row_buffer, remaining_bytes);
    4c60:	b2a3      	uxth	r3, r4
    4c62:	4d12      	ldr	r5, [pc, #72]	; (4cac <verify_flash+0xd8>)
    4c64:	4a10      	ldr	r2, [pc, #64]	; (4ca8 <verify_flash+0xd4>)
    4c66:	6811      	ldr	r1, [r2, #0]
    4c68:	2280      	movs	r2, #128	; 0x80
    4c6a:	0192      	lsls	r2, r2, #6
    4c6c:	4694      	mov	ip, r2
    4c6e:	4461      	add	r1, ip
    4c70:	1b09      	subs	r1, r1, r4
    4c72:	002a      	movs	r2, r5
    4c74:	4812      	ldr	r0, [pc, #72]	; (4cc0 <verify_flash+0xec>)
    4c76:	4e0e      	ldr	r6, [pc, #56]	; (4cb0 <verify_flash+0xdc>)
    4c78:	47b0      	blx	r6
	crc32_recalculate(write_row_buffer, remaining_bytes, &flash_checksum);
    4c7a:	aa03      	add	r2, sp, #12
    4c7c:	0021      	movs	r1, r4
    4c7e:	0028      	movs	r0, r5
    4c80:	4b0d      	ldr	r3, [pc, #52]	; (4cb8 <verify_flash+0xe4>)
    4c82:	4798      	blx	r3
	printf("verify_flash: calculated crc32 val: %d\r\n", flash_checksum);
    4c84:	9903      	ldr	r1, [sp, #12]
    4c86:	4810      	ldr	r0, [pc, #64]	; (4cc8 <verify_flash+0xf4>)
    4c88:	47b8      	blx	r7
	return flash_checksum == known_checksum;
    4c8a:	9b03      	ldr	r3, [sp, #12]
    4c8c:	9a01      	ldr	r2, [sp, #4]
    4c8e:	1a9e      	subs	r6, r3, r2
    4c90:	4270      	negs	r0, r6
    4c92:	4170      	adcs	r0, r6
    4c94:	b2c0      	uxtb	r0, r0
}
    4c96:	b004      	add	sp, #16
    4c98:	bc04      	pop	{r2}
    4c9a:	4690      	mov	r8, r2
    4c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c9e:	46c0      	nop			; (mov r8, r8)
    4ca0:	0001481c 	.word	0x0001481c
    4ca4:	0000f309 	.word	0x0000f309
    4ca8:	200002b4 	.word	0x200002b4
    4cac:	2000044c 	.word	0x2000044c
    4cb0:	00005599 	.word	0x00005599
    4cb4:	00014834 	.word	0x00014834
    4cb8:	00005eed 	.word	0x00005eed
    4cbc:	0001486c 	.word	0x0001486c
    4cc0:	200002b8 	.word	0x200002b8
    4cc4:	0001488c 	.word	0x0001488c
    4cc8:	000148b0 	.word	0x000148b0

00004ccc <store_file_packet>:
{
    4ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cce:	46de      	mov	lr, fp
    4cd0:	4657      	mov	r7, sl
    4cd2:	464e      	mov	r6, r9
    4cd4:	4645      	mov	r5, r8
    4cd6:	b5e0      	push	{r5, r6, r7, lr}
    4cd8:	b085      	sub	sp, #20
    4cda:	4680      	mov	r8, r0
    4cdc:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
    4cde:	2800      	cmp	r0, #0
    4ce0:	d00c      	beq.n	4cfc <store_file_packet+0x30>
    4ce2:	2900      	cmp	r1, #0
    4ce4:	d00a      	beq.n	4cfc <store_file_packet+0x30>
	return (down_state & mask) != 0;
    4ce6:	4bbb      	ldr	r3, [pc, #748]	; (4fd4 <store_file_packet+0x308>)
    4ce8:	881b      	ldrh	r3, [r3, #0]
	if (is_state_set(NOT_CHECKED)) {
    4cea:	065a      	lsls	r2, r3, #25
    4cec:	d53d      	bpl.n	4d6a <store_file_packet+0x9e>
		if (6 != length) {
    4cee:	2906      	cmp	r1, #6
    4cf0:	d00e      	beq.n	4d10 <store_file_packet+0x44>
			printf("store_file_packet [UPDATE_CHECK]: file [%d bytes] does not match header [%d bytes] size\r\n", length, sizeof(fw_header_t));
    4cf2:	220c      	movs	r2, #12
    4cf4:	48b8      	ldr	r0, [pc, #736]	; (4fd8 <store_file_packet+0x30c>)
    4cf6:	4bb9      	ldr	r3, [pc, #740]	; (4fdc <store_file_packet+0x310>)
    4cf8:	4798      	blx	r3
			return;
    4cfa:	e002      	b.n	4d02 <store_file_packet+0x36>
		printf("store_file_packet: empty data.\r\n");
    4cfc:	48b8      	ldr	r0, [pc, #736]	; (4fe0 <store_file_packet+0x314>)
    4cfe:	4bb9      	ldr	r3, [pc, #740]	; (4fe4 <store_file_packet+0x318>)
    4d00:	4798      	blx	r3
}
    4d02:	b005      	add	sp, #20
    4d04:	bc3c      	pop	{r2, r3, r4, r5}
    4d06:	4690      	mov	r8, r2
    4d08:	4699      	mov	r9, r3
    4d0a:	46a2      	mov	sl, r4
    4d0c:	46ab      	mov	fp, r5
    4d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&firmware_header.fw_version, data, 2);
    4d10:	ac01      	add	r4, sp, #4
    4d12:	2202      	movs	r2, #2
    4d14:	0001      	movs	r1, r0
    4d16:	0020      	movs	r0, r4
    4d18:	4db3      	ldr	r5, [pc, #716]	; (4fe8 <store_file_packet+0x31c>)
    4d1a:	47a8      	blx	r5
		memcpy(&firmware_header.checksum, data + 2, 4);
    4d1c:	4641      	mov	r1, r8
    4d1e:	3102      	adds	r1, #2
    4d20:	2204      	movs	r2, #4
    4d22:	a802      	add	r0, sp, #8
    4d24:	47a8      	blx	r5
    4d26:	8824      	ldrh	r4, [r4, #0]
    4d28:	9e02      	ldr	r6, [sp, #8]
	printf("new firmware version: %d\r\n", firmware_header.fw_version);
    4d2a:	0021      	movs	r1, r4
    4d2c:	48af      	ldr	r0, [pc, #700]	; (4fec <store_file_packet+0x320>)
    4d2e:	4dab      	ldr	r5, [pc, #684]	; (4fdc <store_file_packet+0x310>)
    4d30:	47a8      	blx	r5
	printf("new firmware checksum: %04x\r\n", firmware_header.checksum);
    4d32:	0031      	movs	r1, r6
    4d34:	48ae      	ldr	r0, [pc, #696]	; (4ff0 <store_file_packet+0x324>)
    4d36:	47a8      	blx	r5
	if (firmware_header.fw_version > FW_VERSION) {
    4d38:	2c00      	cmp	r4, #0
    4d3a:	d109      	bne.n	4d50 <store_file_packet+0x84>
		clear_state(NOT_CHECKED & GET_REQUESTED);
    4d3c:	2000      	movs	r0, #0
    4d3e:	4bad      	ldr	r3, [pc, #692]	; (4ff4 <store_file_packet+0x328>)
    4d40:	4798      	blx	r3
		add_state(UPDATE_NOT_AVAILABLE & COMPLETED);
    4d42:	2000      	movs	r0, #0
    4d44:	4bac      	ldr	r3, [pc, #688]	; (4ff8 <store_file_packet+0x32c>)
    4d46:	4798      	blx	r3
		add_state(COMPLETED);
    4d48:	2010      	movs	r0, #16
    4d4a:	4bab      	ldr	r3, [pc, #684]	; (4ff8 <store_file_packet+0x32c>)
    4d4c:	4798      	blx	r3
		return;
    4d4e:	e7d8      	b.n	4d02 <store_file_packet+0x36>
		clear_state(GET_REQUESTED);
    4d50:	2004      	movs	r0, #4
    4d52:	4da8      	ldr	r5, [pc, #672]	; (4ff4 <store_file_packet+0x328>)
    4d54:	47a8      	blx	r5
		clear_state(NOT_CHECKED);
    4d56:	2040      	movs	r0, #64	; 0x40
    4d58:	47a8      	blx	r5
		add_state(UPDATE_AVAILABLE);
    4d5a:	2080      	movs	r0, #128	; 0x80
    4d5c:	4ba6      	ldr	r3, [pc, #664]	; (4ff8 <store_file_packet+0x32c>)
    4d5e:	4798      	blx	r3
		new_firmware_checksum = firmware_header.checksum;
    4d60:	4ba6      	ldr	r3, [pc, #664]	; (4ffc <store_file_packet+0x330>)
    4d62:	601e      	str	r6, [r3, #0]
		new_firmware_version = firmware_header.fw_version;
    4d64:	4ba6      	ldr	r3, [pc, #664]	; (5000 <store_file_packet+0x334>)
    4d66:	801c      	strh	r4, [r3, #0]
    4d68:	e7ee      	b.n	4d48 <store_file_packet+0x7c>
	} else if (is_state_set(UPDATE_AVAILABLE)) {
    4d6a:	061a      	lsls	r2, r3, #24
    4d6c:	d5c9      	bpl.n	4d02 <store_file_packet+0x36>
		if (!is_state_set(DOWNLOADING)) {
    4d6e:	071b      	lsls	r3, r3, #28
    4d70:	d506      	bpl.n	4d80 <store_file_packet+0xb4>
{
    4d72:	2500      	movs	r5, #0
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
    4d74:	4ba3      	ldr	r3, [pc, #652]	; (5004 <store_file_packet+0x338>)
    4d76:	469a      	mov	sl, r3
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
    4d78:	469b      	mov	fp, r3
    4d7a:	4ba3      	ldr	r3, [pc, #652]	; (5008 <store_file_packet+0x33c>)
    4d7c:	4699      	mov	r9, r3
    4d7e:	e0dc      	b.n	4f3a <store_file_packet+0x26e>
	printf("FW1_ERASE_ADDR: %d\r\n", firmware_starter_address);
    4d80:	2100      	movs	r1, #0
    4d82:	48a2      	ldr	r0, [pc, #648]	; (500c <store_file_packet+0x340>)
    4d84:	4b95      	ldr	r3, [pc, #596]	; (4fdc <store_file_packet+0x310>)
    4d86:	4798      	blx	r3
	at25dfx_chip_wake(&at25dfx_chip);
    4d88:	4ca1      	ldr	r4, [pc, #644]	; (5010 <store_file_packet+0x344>)
    4d8a:	0020      	movs	r0, r4
    4d8c:	4ba1      	ldr	r3, [pc, #644]	; (5014 <store_file_packet+0x348>)
    4d8e:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    4d90:	0020      	movs	r0, r4
    4d92:	4ba1      	ldr	r3, [pc, #644]	; (5018 <store_file_packet+0x34c>)
    4d94:	4798      	blx	r3
    4d96:	2800      	cmp	r0, #0
    4d98:	d145      	bne.n	4e26 <store_file_packet+0x15a>
	status_val = at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
    4d9a:	2100      	movs	r1, #0
    4d9c:	489c      	ldr	r0, [pc, #624]	; (5010 <store_file_packet+0x344>)
    4d9e:	4b9f      	ldr	r3, [pc, #636]	; (501c <store_file_packet+0x350>)
    4da0:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4da2:	2800      	cmp	r0, #0
    4da4:	d156      	bne.n	4e54 <store_file_packet+0x188>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address, AT25DFX_BLOCK_SIZE_64KB);
    4da6:	2202      	movs	r2, #2
    4da8:	2100      	movs	r1, #0
    4daa:	4899      	ldr	r0, [pc, #612]	; (5010 <store_file_packet+0x344>)
    4dac:	4b9c      	ldr	r3, [pc, #624]	; (5020 <store_file_packet+0x354>)
    4dae:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4db0:	2800      	cmp	r0, #0
    4db2:	d157      	bne.n	4e64 <store_file_packet+0x198>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 1), AT25DFX_BLOCK_SIZE_64KB);
    4db4:	2202      	movs	r2, #2
    4db6:	499b      	ldr	r1, [pc, #620]	; (5024 <store_file_packet+0x358>)
    4db8:	4895      	ldr	r0, [pc, #596]	; (5010 <store_file_packet+0x344>)
    4dba:	4b99      	ldr	r3, [pc, #612]	; (5020 <store_file_packet+0x354>)
    4dbc:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4dbe:	2800      	cmp	r0, #0
    4dc0:	d158      	bne.n	4e74 <store_file_packet+0x1a8>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2), AT25DFX_BLOCK_SIZE_64KB);
    4dc2:	2202      	movs	r2, #2
    4dc4:	4998      	ldr	r1, [pc, #608]	; (5028 <store_file_packet+0x35c>)
    4dc6:	4892      	ldr	r0, [pc, #584]	; (5010 <store_file_packet+0x344>)
    4dc8:	4b95      	ldr	r3, [pc, #596]	; (5020 <store_file_packet+0x354>)
    4dca:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4dcc:	2800      	cmp	r0, #0
    4dce:	d156      	bne.n	4e7e <store_file_packet+0x1b2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 3) + (THIRTY_TWO_KB * 0), AT25DFX_BLOCK_SIZE_32KB);
    4dd0:	2201      	movs	r2, #1
    4dd2:	4996      	ldr	r1, [pc, #600]	; (502c <store_file_packet+0x360>)
    4dd4:	488e      	ldr	r0, [pc, #568]	; (5010 <store_file_packet+0x344>)
    4dd6:	4b92      	ldr	r3, [pc, #584]	; (5020 <store_file_packet+0x354>)
    4dd8:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4dda:	2800      	cmp	r0, #0
    4ddc:	d157      	bne.n	4e8e <store_file_packet+0x1c2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 0), AT25DFX_BLOCK_SIZE_4KB);
    4dde:	2200      	movs	r2, #0
    4de0:	4993      	ldr	r1, [pc, #588]	; (5030 <store_file_packet+0x364>)
    4de2:	488b      	ldr	r0, [pc, #556]	; (5010 <store_file_packet+0x344>)
    4de4:	4b8e      	ldr	r3, [pc, #568]	; (5020 <store_file_packet+0x354>)
    4de6:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4de8:	2800      	cmp	r0, #0
    4dea:	d158      	bne.n	4e9e <store_file_packet+0x1d2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 1), AT25DFX_BLOCK_SIZE_4KB);
    4dec:	2200      	movs	r2, #0
    4dee:	4991      	ldr	r1, [pc, #580]	; (5034 <store_file_packet+0x368>)
    4df0:	4887      	ldr	r0, [pc, #540]	; (5010 <store_file_packet+0x344>)
    4df2:	4b8b      	ldr	r3, [pc, #556]	; (5020 <store_file_packet+0x354>)
    4df4:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4df6:	2800      	cmp	r0, #0
    4df8:	d159      	bne.n	4eae <store_file_packet+0x1e2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 2), AT25DFX_BLOCK_SIZE_4KB);
    4dfa:	2200      	movs	r2, #0
    4dfc:	498e      	ldr	r1, [pc, #568]	; (5038 <store_file_packet+0x36c>)
    4dfe:	4884      	ldr	r0, [pc, #528]	; (5010 <store_file_packet+0x344>)
    4e00:	4b87      	ldr	r3, [pc, #540]	; (5020 <store_file_packet+0x354>)
    4e02:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4e04:	2800      	cmp	r0, #0
    4e06:	d15a      	bne.n	4ebe <store_file_packet+0x1f2>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3), AT25DFX_BLOCK_SIZE_4KB);
    4e08:	2200      	movs	r2, #0
    4e0a:	498c      	ldr	r1, [pc, #560]	; (503c <store_file_packet+0x370>)
    4e0c:	4880      	ldr	r0, [pc, #512]	; (5010 <store_file_packet+0x344>)
    4e0e:	4b84      	ldr	r3, [pc, #528]	; (5020 <store_file_packet+0x354>)
    4e10:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4e12:	2800      	cmp	r0, #0
    4e14:	d05b      	beq.n	4ece <store_file_packet+0x202>
		add_state(CANCELED);
    4e16:	2020      	movs	r0, #32
    4e18:	4b77      	ldr	r3, [pc, #476]	; (4ff8 <store_file_packet+0x32c>)
    4e1a:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3));
    4e1c:	4987      	ldr	r1, [pc, #540]	; (503c <store_file_packet+0x370>)
    4e1e:	4888      	ldr	r0, [pc, #544]	; (5040 <store_file_packet+0x374>)
    4e20:	4b6e      	ldr	r3, [pc, #440]	; (4fdc <store_file_packet+0x310>)
    4e22:	4798      	blx	r3
    4e24:	e002      	b.n	4e2c <store_file_packet+0x160>
		printf("store_file_packet: No flash chip.\r\n");
    4e26:	4887      	ldr	r0, [pc, #540]	; (5044 <store_file_packet+0x378>)
    4e28:	4b6e      	ldr	r3, [pc, #440]	; (4fe4 <store_file_packet+0x318>)
    4e2a:	4798      	blx	r3
			received_file_size = 0;
    4e2c:	2300      	movs	r3, #0
    4e2e:	4a86      	ldr	r2, [pc, #536]	; (5048 <store_file_packet+0x37c>)
    4e30:	6013      	str	r3, [r2, #0]
			write_address = FW1_ADDR; //TODO: MAKE GENERIC SO CAN OTA CLI
    4e32:	2180      	movs	r1, #128	; 0x80
    4e34:	0189      	lsls	r1, r1, #6
    4e36:	4a85      	ldr	r2, [pc, #532]	; (504c <store_file_packet+0x380>)
    4e38:	6011      	str	r1, [r2, #0]
			buffer_cursor = 0;
    4e3a:	4a72      	ldr	r2, [pc, #456]	; (5004 <store_file_packet+0x338>)
    4e3c:	7013      	strb	r3, [r2, #0]
			total_bytes_written = 0;
    4e3e:	4a84      	ldr	r2, [pc, #528]	; (5050 <store_file_packet+0x384>)
    4e40:	6013      	str	r3, [r2, #0]
			printf("starting val: ", crc_val);
    4e42:	4b84      	ldr	r3, [pc, #528]	; (5054 <store_file_packet+0x388>)
    4e44:	6819      	ldr	r1, [r3, #0]
    4e46:	4884      	ldr	r0, [pc, #528]	; (5058 <store_file_packet+0x38c>)
    4e48:	4b64      	ldr	r3, [pc, #400]	; (4fdc <store_file_packet+0x310>)
    4e4a:	4798      	blx	r3
			add_state(DOWNLOADING);
    4e4c:	2008      	movs	r0, #8
    4e4e:	4b6a      	ldr	r3, [pc, #424]	; (4ff8 <store_file_packet+0x32c>)
    4e50:	4798      	blx	r3
    4e52:	e78e      	b.n	4d72 <store_file_packet+0xa6>
		add_state(CANCELED);
    4e54:	2020      	movs	r0, #32
    4e56:	4b68      	ldr	r3, [pc, #416]	; (4ff8 <store_file_packet+0x32c>)
    4e58:	4798      	blx	r3
		printf("store_file_packet: error clearing sector protect at address %d \r\n", SIXTY_FOUR_KB);
    4e5a:	4972      	ldr	r1, [pc, #456]	; (5024 <store_file_packet+0x358>)
    4e5c:	487f      	ldr	r0, [pc, #508]	; (505c <store_file_packet+0x390>)
    4e5e:	4b5f      	ldr	r3, [pc, #380]	; (4fdc <store_file_packet+0x310>)
    4e60:	4798      	blx	r3
    4e62:	e7e3      	b.n	4e2c <store_file_packet+0x160>
		add_state(CANCELED);
    4e64:	2020      	movs	r0, #32
    4e66:	4b64      	ldr	r3, [pc, #400]	; (4ff8 <store_file_packet+0x32c>)
    4e68:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address);
    4e6a:	2100      	movs	r1, #0
    4e6c:	4874      	ldr	r0, [pc, #464]	; (5040 <store_file_packet+0x374>)
    4e6e:	4b5b      	ldr	r3, [pc, #364]	; (4fdc <store_file_packet+0x310>)
    4e70:	4798      	blx	r3
    4e72:	e7db      	b.n	4e2c <store_file_packet+0x160>
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 1));
    4e74:	496b      	ldr	r1, [pc, #428]	; (5024 <store_file_packet+0x358>)
    4e76:	4872      	ldr	r0, [pc, #456]	; (5040 <store_file_packet+0x374>)
    4e78:	4b58      	ldr	r3, [pc, #352]	; (4fdc <store_file_packet+0x310>)
    4e7a:	4798      	blx	r3
    4e7c:	e7d6      	b.n	4e2c <store_file_packet+0x160>
		add_state(CANCELED);
    4e7e:	2020      	movs	r0, #32
    4e80:	4b5d      	ldr	r3, [pc, #372]	; (4ff8 <store_file_packet+0x32c>)
    4e82:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2));
    4e84:	4968      	ldr	r1, [pc, #416]	; (5028 <store_file_packet+0x35c>)
    4e86:	486e      	ldr	r0, [pc, #440]	; (5040 <store_file_packet+0x374>)
    4e88:	4b54      	ldr	r3, [pc, #336]	; (4fdc <store_file_packet+0x310>)
    4e8a:	4798      	blx	r3
    4e8c:	e7ce      	b.n	4e2c <store_file_packet+0x160>
		add_state(CANCELED);
    4e8e:	2020      	movs	r0, #32
    4e90:	4b59      	ldr	r3, [pc, #356]	; (4ff8 <store_file_packet+0x32c>)
    4e92:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 3) + (THIRTY_TWO_KB * 0));
    4e94:	4965      	ldr	r1, [pc, #404]	; (502c <store_file_packet+0x360>)
    4e96:	486a      	ldr	r0, [pc, #424]	; (5040 <store_file_packet+0x374>)
    4e98:	4b50      	ldr	r3, [pc, #320]	; (4fdc <store_file_packet+0x310>)
    4e9a:	4798      	blx	r3
    4e9c:	e7c6      	b.n	4e2c <store_file_packet+0x160>
		add_state(CANCELED);
    4e9e:	2020      	movs	r0, #32
    4ea0:	4b55      	ldr	r3, [pc, #340]	; (4ff8 <store_file_packet+0x32c>)
    4ea2:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 0));
    4ea4:	4962      	ldr	r1, [pc, #392]	; (5030 <store_file_packet+0x364>)
    4ea6:	4866      	ldr	r0, [pc, #408]	; (5040 <store_file_packet+0x374>)
    4ea8:	4b4c      	ldr	r3, [pc, #304]	; (4fdc <store_file_packet+0x310>)
    4eaa:	4798      	blx	r3
    4eac:	e7be      	b.n	4e2c <store_file_packet+0x160>
		add_state(CANCELED);
    4eae:	2020      	movs	r0, #32
    4eb0:	4b51      	ldr	r3, [pc, #324]	; (4ff8 <store_file_packet+0x32c>)
    4eb2:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 1));
    4eb4:	495f      	ldr	r1, [pc, #380]	; (5034 <store_file_packet+0x368>)
    4eb6:	4862      	ldr	r0, [pc, #392]	; (5040 <store_file_packet+0x374>)
    4eb8:	4b48      	ldr	r3, [pc, #288]	; (4fdc <store_file_packet+0x310>)
    4eba:	4798      	blx	r3
    4ebc:	e7b6      	b.n	4e2c <store_file_packet+0x160>
		add_state(CANCELED);
    4ebe:	2020      	movs	r0, #32
    4ec0:	4b4d      	ldr	r3, [pc, #308]	; (4ff8 <store_file_packet+0x32c>)
    4ec2:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 2));
    4ec4:	495c      	ldr	r1, [pc, #368]	; (5038 <store_file_packet+0x36c>)
    4ec6:	485e      	ldr	r0, [pc, #376]	; (5040 <store_file_packet+0x374>)
    4ec8:	4b44      	ldr	r3, [pc, #272]	; (4fdc <store_file_packet+0x310>)
    4eca:	4798      	blx	r3
    4ecc:	e7ae      	b.n	4e2c <store_file_packet+0x160>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 4), AT25DFX_BLOCK_SIZE_4KB);
    4ece:	2200      	movs	r2, #0
    4ed0:	4963      	ldr	r1, [pc, #396]	; (5060 <store_file_packet+0x394>)
    4ed2:	484f      	ldr	r0, [pc, #316]	; (5010 <store_file_packet+0x344>)
    4ed4:	4b52      	ldr	r3, [pc, #328]	; (5020 <store_file_packet+0x354>)
    4ed6:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4ed8:	2800      	cmp	r0, #0
    4eda:	d115      	bne.n	4f08 <store_file_packet+0x23c>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 5), AT25DFX_BLOCK_SIZE_4KB);
    4edc:	2200      	movs	r2, #0
    4ede:	4961      	ldr	r1, [pc, #388]	; (5064 <store_file_packet+0x398>)
    4ee0:	484b      	ldr	r0, [pc, #300]	; (5010 <store_file_packet+0x344>)
    4ee2:	4b4f      	ldr	r3, [pc, #316]	; (5020 <store_file_packet+0x354>)
    4ee4:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4ee6:	2800      	cmp	r0, #0
    4ee8:	d116      	bne.n	4f18 <store_file_packet+0x24c>
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 6), AT25DFX_BLOCK_SIZE_4KB);
    4eea:	2200      	movs	r2, #0
    4eec:	495e      	ldr	r1, [pc, #376]	; (5068 <store_file_packet+0x39c>)
    4eee:	4848      	ldr	r0, [pc, #288]	; (5010 <store_file_packet+0x344>)
    4ef0:	4b4b      	ldr	r3, [pc, #300]	; (5020 <store_file_packet+0x354>)
    4ef2:	4798      	blx	r3
	if (STATUS_OK != status_val) {
    4ef4:	2800      	cmp	r0, #0
    4ef6:	d017      	beq.n	4f28 <store_file_packet+0x25c>
		add_state(CANCELED);
    4ef8:	2020      	movs	r0, #32
    4efa:	4b3f      	ldr	r3, [pc, #252]	; (4ff8 <store_file_packet+0x32c>)
    4efc:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3));
    4efe:	494f      	ldr	r1, [pc, #316]	; (503c <store_file_packet+0x370>)
    4f00:	484f      	ldr	r0, [pc, #316]	; (5040 <store_file_packet+0x374>)
    4f02:	4b36      	ldr	r3, [pc, #216]	; (4fdc <store_file_packet+0x310>)
    4f04:	4798      	blx	r3
    4f06:	e791      	b.n	4e2c <store_file_packet+0x160>
		add_state(CANCELED);
    4f08:	2020      	movs	r0, #32
    4f0a:	4b3b      	ldr	r3, [pc, #236]	; (4ff8 <store_file_packet+0x32c>)
    4f0c:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 4));
    4f0e:	4954      	ldr	r1, [pc, #336]	; (5060 <store_file_packet+0x394>)
    4f10:	484b      	ldr	r0, [pc, #300]	; (5040 <store_file_packet+0x374>)
    4f12:	4b32      	ldr	r3, [pc, #200]	; (4fdc <store_file_packet+0x310>)
    4f14:	4798      	blx	r3
    4f16:	e789      	b.n	4e2c <store_file_packet+0x160>
		add_state(CANCELED);
    4f18:	2020      	movs	r0, #32
    4f1a:	4b37      	ldr	r3, [pc, #220]	; (4ff8 <store_file_packet+0x32c>)
    4f1c:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 5));
    4f1e:	4951      	ldr	r1, [pc, #324]	; (5064 <store_file_packet+0x398>)
    4f20:	4847      	ldr	r0, [pc, #284]	; (5040 <store_file_packet+0x374>)
    4f22:	4b2e      	ldr	r3, [pc, #184]	; (4fdc <store_file_packet+0x310>)
    4f24:	4798      	blx	r3
    4f26:	e781      	b.n	4e2c <store_file_packet+0x160>
	at25dfx_chip_sleep(&at25dfx_chip);
    4f28:	4839      	ldr	r0, [pc, #228]	; (5010 <store_file_packet+0x344>)
    4f2a:	4b50      	ldr	r3, [pc, #320]	; (506c <store_file_packet+0x3a0>)
    4f2c:	4798      	blx	r3
    4f2e:	e77d      	b.n	4e2c <store_file_packet+0x160>
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
    4f30:	1b77      	subs	r7, r6, r5
    4f32:	b2bf      	uxth	r7, r7
    4f34:	e00f      	b.n	4f56 <store_file_packet+0x28a>
				if (buffer_cursor == (FLASH_ROW_SIZE - 1)) {
    4f36:	2cff      	cmp	r4, #255	; 0xff
    4f38:	d01f      	beq.n	4f7a <store_file_packet+0x2ae>
			while (bytes_written < length) {
    4f3a:	0029      	movs	r1, r5
    4f3c:	42ae      	cmp	r6, r5
    4f3e:	d800      	bhi.n	4f42 <store_file_packet+0x276>
    4f40:	e09c      	b.n	507c <store_file_packet+0x3b0>
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
    4f42:	002b      	movs	r3, r5
    4f44:	33ff      	adds	r3, #255	; 0xff
    4f46:	429e      	cmp	r6, r3
    4f48:	d9f2      	bls.n	4f30 <store_file_packet+0x264>
    4f4a:	4653      	mov	r3, sl
    4f4c:	781a      	ldrb	r2, [r3, #0]
    4f4e:	2480      	movs	r4, #128	; 0x80
    4f50:	0064      	lsls	r4, r4, #1
    4f52:	1aa4      	subs	r4, r4, r2
    4f54:	b2a7      	uxth	r7, r4
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
    4f56:	465b      	mov	r3, fp
    4f58:	781c      	ldrb	r4, [r3, #0]
    4f5a:	464b      	mov	r3, r9
    4f5c:	18e0      	adds	r0, r4, r3
				unsigned int data_cursor = data + bytes_written;
    4f5e:	4441      	add	r1, r8
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
    4f60:	003a      	movs	r2, r7
    4f62:	4b21      	ldr	r3, [pc, #132]	; (4fe8 <store_file_packet+0x31c>)
    4f64:	4798      	blx	r3
				bytes_written += num_bytes_to_buffer;
    4f66:	19ed      	adds	r5, r5, r7
				buffer_cursor = buffer_cursor + num_bytes_to_buffer;
    4f68:	19e4      	adds	r4, r4, r7
    4f6a:	b2e4      	uxtb	r4, r4
    4f6c:	465b      	mov	r3, fp
    4f6e:	701c      	strb	r4, [r3, #0]
				if (buffer_cursor == 0)
    4f70:	2c00      	cmp	r4, #0
    4f72:	d1e0      	bne.n	4f36 <store_file_packet+0x26a>
					buffer_cursor = (FLASH_ROW_SIZE - 1);
    4f74:	22ff      	movs	r2, #255	; 0xff
    4f76:	4b23      	ldr	r3, [pc, #140]	; (5004 <store_file_packet+0x338>)
    4f78:	701a      	strb	r2, [r3, #0]
					status_val = at25dfx_chip_write_buffer(&at25dfx_chip, write_address, write_row_buffer, FLASH_ROW_SIZE);
    4f7a:	4b34      	ldr	r3, [pc, #208]	; (504c <store_file_packet+0x380>)
    4f7c:	6819      	ldr	r1, [r3, #0]
    4f7e:	2380      	movs	r3, #128	; 0x80
    4f80:	005b      	lsls	r3, r3, #1
    4f82:	4a21      	ldr	r2, [pc, #132]	; (5008 <store_file_packet+0x33c>)
    4f84:	4822      	ldr	r0, [pc, #136]	; (5010 <store_file_packet+0x344>)
    4f86:	4c3a      	ldr	r4, [pc, #232]	; (5070 <store_file_packet+0x3a4>)
    4f88:	47a0      	blx	r4
					if (STATUS_OK != status_val) {
    4f8a:	2800      	cmp	r0, #0
    4f8c:	d112      	bne.n	4fb4 <store_file_packet+0x2e8>
					buffer_cursor = 0;
    4f8e:	2200      	movs	r2, #0
    4f90:	4b1c      	ldr	r3, [pc, #112]	; (5004 <store_file_packet+0x338>)
    4f92:	701a      	strb	r2, [r3, #0]
					write_address += FLASH_ROW_SIZE;
    4f94:	4a2d      	ldr	r2, [pc, #180]	; (504c <store_file_packet+0x380>)
    4f96:	6813      	ldr	r3, [r2, #0]
    4f98:	3301      	adds	r3, #1
    4f9a:	33ff      	adds	r3, #255	; 0xff
    4f9c:	6013      	str	r3, [r2, #0]
					if (!crc_val)
    4f9e:	4b2d      	ldr	r3, [pc, #180]	; (5054 <store_file_packet+0x388>)
    4fa0:	681b      	ldr	r3, [r3, #0]
    4fa2:	2b00      	cmp	r3, #0
    4fa4:	d10f      	bne.n	4fc6 <store_file_packet+0x2fa>
    4fa6:	4a2b      	ldr	r2, [pc, #172]	; (5054 <store_file_packet+0x388>)
    4fa8:	2180      	movs	r1, #128	; 0x80
    4faa:	0049      	lsls	r1, r1, #1
    4fac:	4816      	ldr	r0, [pc, #88]	; (5008 <store_file_packet+0x33c>)
    4fae:	4b31      	ldr	r3, [pc, #196]	; (5074 <store_file_packet+0x3a8>)
    4fb0:	4798      	blx	r3
    4fb2:	e7c2      	b.n	4f3a <store_file_packet+0x26e>
						add_state(CANCELED);
    4fb4:	2020      	movs	r0, #32
    4fb6:	4b10      	ldr	r3, [pc, #64]	; (4ff8 <store_file_packet+0x32c>)
    4fb8:	4798      	blx	r3
						printf("store_file_packet: error writing row at address %d \r\n", write_address);
    4fba:	4b24      	ldr	r3, [pc, #144]	; (504c <store_file_packet+0x380>)
    4fbc:	6819      	ldr	r1, [r3, #0]
    4fbe:	482e      	ldr	r0, [pc, #184]	; (5078 <store_file_packet+0x3ac>)
    4fc0:	4b06      	ldr	r3, [pc, #24]	; (4fdc <store_file_packet+0x310>)
    4fc2:	4798      	blx	r3
						return;
    4fc4:	e69d      	b.n	4d02 <store_file_packet+0x36>
						crc32_recalculate(write_row_buffer, FLASH_ROW_SIZE, &crc_val);
    4fc6:	4a23      	ldr	r2, [pc, #140]	; (5054 <store_file_packet+0x388>)
    4fc8:	2180      	movs	r1, #128	; 0x80
    4fca:	0049      	lsls	r1, r1, #1
    4fcc:	480e      	ldr	r0, [pc, #56]	; (5008 <store_file_packet+0x33c>)
    4fce:	4b29      	ldr	r3, [pc, #164]	; (5074 <store_file_packet+0x3a8>)
    4fd0:	4798      	blx	r3
    4fd2:	e7b2      	b.n	4f3a <store_file_packet+0x26e>
    4fd4:	200002c0 	.word	0x200002c0
    4fd8:	00014470 	.word	0x00014470
    4fdc:	0000f309 	.word	0x0000f309
    4fe0:	00014450 	.word	0x00014450
    4fe4:	0000f425 	.word	0x0000f425
    4fe8:	0000e891 	.word	0x0000e891
    4fec:	000144cc 	.word	0x000144cc
    4ff0:	000144e8 	.word	0x000144e8
    4ff4:	00004871 	.word	0x00004871
    4ff8:	00004881 	.word	0x00004881
    4ffc:	20000208 	.word	0x20000208
    5000:	2000020c 	.word	0x2000020c
    5004:	20000444 	.word	0x20000444
    5008:	2000044c 	.word	0x2000044c
    500c:	00014508 	.word	0x00014508
    5010:	200002b8 	.word	0x200002b8
    5014:	00005e61 	.word	0x00005e61
    5018:	0000548d 	.word	0x0000548d
    501c:	00005ce5 	.word	0x00005ce5
    5020:	00005acd 	.word	0x00005acd
    5024:	0000ffff 	.word	0x0000ffff
    5028:	0001fffe 	.word	0x0001fffe
    502c:	0002fffd 	.word	0x0002fffd
    5030:	00027ffd 	.word	0x00027ffd
    5034:	00028ffc 	.word	0x00028ffc
    5038:	00029ffb 	.word	0x00029ffb
    503c:	0002affa 	.word	0x0002affa
    5040:	00014588 	.word	0x00014588
    5044:	00014520 	.word	0x00014520
    5048:	20000210 	.word	0x20000210
    504c:	20000440 	.word	0x20000440
    5050:	200002b4 	.word	0x200002b4
    5054:	20000200 	.word	0x20000200
    5058:	000145c4 	.word	0x000145c4
    505c:	00014544 	.word	0x00014544
    5060:	0002bff9 	.word	0x0002bff9
    5064:	0002cff8 	.word	0x0002cff8
    5068:	0002dff7 	.word	0x0002dff7
    506c:	00005dd5 	.word	0x00005dd5
    5070:	00005691 	.word	0x00005691
    5074:	00005eed 	.word	0x00005eed
    5078:	000145d4 	.word	0x000145d4
			total_bytes_written += bytes_written;
    507c:	4b2d      	ldr	r3, [pc, #180]	; (5134 <store_file_packet+0x468>)
    507e:	681a      	ldr	r2, [r3, #0]
    5080:	4694      	mov	ip, r2
    5082:	4461      	add	r1, ip
    5084:	6019      	str	r1, [r3, #0]
			received_file_size += length;
    5086:	4c2c      	ldr	r4, [pc, #176]	; (5138 <store_file_packet+0x46c>)
    5088:	6823      	ldr	r3, [r4, #0]
    508a:	18f1      	adds	r1, r6, r3
    508c:	6021      	str	r1, [r4, #0]
			printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    508e:	4d2b      	ldr	r5, [pc, #172]	; (513c <store_file_packet+0x470>)
    5090:	682a      	ldr	r2, [r5, #0]
    5092:	482b      	ldr	r0, [pc, #172]	; (5140 <store_file_packet+0x474>)
    5094:	4b2b      	ldr	r3, [pc, #172]	; (5144 <store_file_packet+0x478>)
    5096:	4798      	blx	r3
			if (received_file_size >= http_file_size) {
    5098:	6822      	ldr	r2, [r4, #0]
    509a:	682b      	ldr	r3, [r5, #0]
    509c:	429a      	cmp	r2, r3
    509e:	d200      	bcs.n	50a2 <store_file_packet+0x3d6>
    50a0:	e62f      	b.n	4d02 <store_file_packet+0x36>
				status_val = at25dfx_chip_write_buffer(&at25dfx_chip, write_address, write_row_buffer, buffer_cursor);
    50a2:	4b29      	ldr	r3, [pc, #164]	; (5148 <store_file_packet+0x47c>)
    50a4:	781b      	ldrb	r3, [r3, #0]
    50a6:	4a29      	ldr	r2, [pc, #164]	; (514c <store_file_packet+0x480>)
    50a8:	6811      	ldr	r1, [r2, #0]
    50aa:	4a29      	ldr	r2, [pc, #164]	; (5150 <store_file_packet+0x484>)
    50ac:	4829      	ldr	r0, [pc, #164]	; (5154 <store_file_packet+0x488>)
    50ae:	4c2a      	ldr	r4, [pc, #168]	; (5158 <store_file_packet+0x48c>)
    50b0:	47a0      	blx	r4
				if (STATUS_OK != status_val) {
    50b2:	2800      	cmp	r0, #0
    50b4:	d11e      	bne.n	50f4 <store_file_packet+0x428>
				crc32_recalculate(write_row_buffer, buffer_cursor, &crc_val);
    50b6:	4c29      	ldr	r4, [pc, #164]	; (515c <store_file_packet+0x490>)
    50b8:	4b23      	ldr	r3, [pc, #140]	; (5148 <store_file_packet+0x47c>)
    50ba:	7819      	ldrb	r1, [r3, #0]
    50bc:	0022      	movs	r2, r4
    50be:	4824      	ldr	r0, [pc, #144]	; (5150 <store_file_packet+0x484>)
    50c0:	4b27      	ldr	r3, [pc, #156]	; (5160 <store_file_packet+0x494>)
    50c2:	4798      	blx	r3
				printf("store_file_packet: file downloaded successfully.\r\n");
    50c4:	4827      	ldr	r0, [pc, #156]	; (5164 <store_file_packet+0x498>)
    50c6:	4b28      	ldr	r3, [pc, #160]	; (5168 <store_file_packet+0x49c>)
    50c8:	4798      	blx	r3
				if (verify_flash(crc_val)) {
    50ca:	6820      	ldr	r0, [r4, #0]
    50cc:	4b27      	ldr	r3, [pc, #156]	; (516c <store_file_packet+0x4a0>)
    50ce:	4798      	blx	r3
    50d0:	2800      	cmp	r0, #0
    50d2:	d018      	beq.n	5106 <store_file_packet+0x43a>
					printf("store_file_packet: flash successfully written with no errors\r\n");
    50d4:	4826      	ldr	r0, [pc, #152]	; (5170 <store_file_packet+0x4a4>)
    50d6:	4b24      	ldr	r3, [pc, #144]	; (5168 <store_file_packet+0x49c>)
    50d8:	4798      	blx	r3
				if (crc_val != new_firmware_checksum) {
    50da:	4b20      	ldr	r3, [pc, #128]	; (515c <store_file_packet+0x490>)
    50dc:	681a      	ldr	r2, [r3, #0]
    50de:	4b25      	ldr	r3, [pc, #148]	; (5174 <store_file_packet+0x4a8>)
    50e0:	6819      	ldr	r1, [r3, #0]
    50e2:	428a      	cmp	r2, r1
    50e4:	d016      	beq.n	5114 <store_file_packet+0x448>
					printf("store_file_packet: file checksums don't match.\r\n Expected checksum %04x\r\n Received checksum %04x\r\n", new_firmware_checksum, crc_val);
    50e6:	4824      	ldr	r0, [pc, #144]	; (5178 <store_file_packet+0x4ac>)
    50e8:	4b16      	ldr	r3, [pc, #88]	; (5144 <store_file_packet+0x478>)
    50ea:	4798      	blx	r3
					add_state(CANCELED);
    50ec:	2020      	movs	r0, #32
    50ee:	4b23      	ldr	r3, [pc, #140]	; (517c <store_file_packet+0x4b0>)
    50f0:	4798      	blx	r3
					return;
    50f2:	e606      	b.n	4d02 <store_file_packet+0x36>
					add_state(CANCELED);
    50f4:	2020      	movs	r0, #32
    50f6:	4b21      	ldr	r3, [pc, #132]	; (517c <store_file_packet+0x4b0>)
    50f8:	4798      	blx	r3
					printf("store_file_packet: error writing row at address %d \r\n", write_address);
    50fa:	4b14      	ldr	r3, [pc, #80]	; (514c <store_file_packet+0x480>)
    50fc:	6819      	ldr	r1, [r3, #0]
    50fe:	4820      	ldr	r0, [pc, #128]	; (5180 <store_file_packet+0x4b4>)
    5100:	4b10      	ldr	r3, [pc, #64]	; (5144 <store_file_packet+0x478>)
    5102:	4798      	blx	r3
					return;
    5104:	e5fd      	b.n	4d02 <store_file_packet+0x36>
					printf("store_file_packet: flash corrupted.\r\n");
    5106:	481f      	ldr	r0, [pc, #124]	; (5184 <store_file_packet+0x4b8>)
    5108:	4b17      	ldr	r3, [pc, #92]	; (5168 <store_file_packet+0x49c>)
    510a:	4798      	blx	r3
					add_state(CANCELED);
    510c:	2020      	movs	r0, #32
    510e:	4b1b      	ldr	r3, [pc, #108]	; (517c <store_file_packet+0x4b0>)
    5110:	4798      	blx	r3
					return;
    5112:	e5f6      	b.n	4d02 <store_file_packet+0x36>
					update_boot_status();
    5114:	4b1c      	ldr	r3, [pc, #112]	; (5188 <store_file_packet+0x4bc>)
    5116:	4798      	blx	r3
					write_firmware_metadata(FW1_ADDR, new_firmware_version, new_firmware_checksum, received_file_size);
    5118:	4b07      	ldr	r3, [pc, #28]	; (5138 <store_file_packet+0x46c>)
    511a:	681b      	ldr	r3, [r3, #0]
    511c:	4a15      	ldr	r2, [pc, #84]	; (5174 <store_file_packet+0x4a8>)
    511e:	6812      	ldr	r2, [r2, #0]
    5120:	491a      	ldr	r1, [pc, #104]	; (518c <store_file_packet+0x4c0>)
    5122:	8809      	ldrh	r1, [r1, #0]
    5124:	2080      	movs	r0, #128	; 0x80
    5126:	0180      	lsls	r0, r0, #6
    5128:	4c19      	ldr	r4, [pc, #100]	; (5190 <store_file_packet+0x4c4>)
    512a:	47a0      	blx	r4
					add_state(COMPLETED);
    512c:	2010      	movs	r0, #16
    512e:	4b13      	ldr	r3, [pc, #76]	; (517c <store_file_packet+0x4b0>)
    5130:	4798      	blx	r3
				return;
    5132:	e5e6      	b.n	4d02 <store_file_packet+0x36>
    5134:	200002b4 	.word	0x200002b4
    5138:	20000210 	.word	0x20000210
    513c:	20000204 	.word	0x20000204
    5140:	0001460c 	.word	0x0001460c
    5144:	0000f309 	.word	0x0000f309
    5148:	20000444 	.word	0x20000444
    514c:	20000440 	.word	0x20000440
    5150:	2000044c 	.word	0x2000044c
    5154:	200002b8 	.word	0x200002b8
    5158:	00005691 	.word	0x00005691
    515c:	20000200 	.word	0x20000200
    5160:	00005eed 	.word	0x00005eed
    5164:	00014640 	.word	0x00014640
    5168:	0000f425 	.word	0x0000f425
    516c:	00004bd5 	.word	0x00004bd5
    5170:	00014674 	.word	0x00014674
    5174:	20000208 	.word	0x20000208
    5178:	000146dc 	.word	0x000146dc
    517c:	00004881 	.word	0x00004881
    5180:	000145d4 	.word	0x000145d4
    5184:	000146b4 	.word	0x000146b4
    5188:	0000491d 	.word	0x0000491d
    518c:	2000020c 	.word	0x2000020c
    5190:	000048c1 	.word	0x000048c1

00005194 <http_client_callback>:
{
    5194:	b510      	push	{r4, lr}
    5196:	0014      	movs	r4, r2
	switch (evt) {
    5198:	2904      	cmp	r1, #4
    519a:	d806      	bhi.n	51aa <http_client_callback+0x16>
    519c:	0089      	lsls	r1, r1, #2
    519e:	4b21      	ldr	r3, [pc, #132]	; (5224 <http_client_callback+0x90>)
    51a0:	585b      	ldr	r3, [r3, r1]
    51a2:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
    51a4:	4820      	ldr	r0, [pc, #128]	; (5228 <http_client_callback+0x94>)
    51a6:	4b21      	ldr	r3, [pc, #132]	; (522c <http_client_callback+0x98>)
    51a8:	4798      	blx	r3
}
    51aa:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
    51ac:	4820      	ldr	r0, [pc, #128]	; (5230 <http_client_callback+0x9c>)
    51ae:	4b1f      	ldr	r3, [pc, #124]	; (522c <http_client_callback+0x98>)
    51b0:	4798      	blx	r3
		add_state(GET_REQUESTED);
    51b2:	2004      	movs	r0, #4
    51b4:	4b1f      	ldr	r3, [pc, #124]	; (5234 <http_client_callback+0xa0>)
    51b6:	4798      	blx	r3
		break;
    51b8:	e7f7      	b.n	51aa <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
    51ba:	8811      	ldrh	r1, [r2, #0]
    51bc:	6852      	ldr	r2, [r2, #4]
    51be:	481e      	ldr	r0, [pc, #120]	; (5238 <http_client_callback+0xa4>)
    51c0:	4b1e      	ldr	r3, [pc, #120]	; (523c <http_client_callback+0xa8>)
    51c2:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    51c4:	8823      	ldrh	r3, [r4, #0]
    51c6:	2bc8      	cmp	r3, #200	; 0xc8
    51c8:	d10c      	bne.n	51e4 <http_client_callback+0x50>
			http_file_size = data->recv_response.content_length;
    51ca:	6861      	ldr	r1, [r4, #4]
    51cc:	4b1c      	ldr	r3, [pc, #112]	; (5240 <http_client_callback+0xac>)
    51ce:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
    51d0:	2200      	movs	r2, #0
    51d2:	4b1c      	ldr	r3, [pc, #112]	; (5244 <http_client_callback+0xb0>)
    51d4:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MTU_HTTP)
    51d6:	4b1c      	ldr	r3, [pc, #112]	; (5248 <http_client_callback+0xb4>)
    51d8:	4299      	cmp	r1, r3
    51da:	d8e6      	bhi.n	51aa <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    51dc:	68a0      	ldr	r0, [r4, #8]
    51de:	4b1b      	ldr	r3, [pc, #108]	; (524c <http_client_callback+0xb8>)
    51e0:	4798      	blx	r3
    51e2:	e7e2      	b.n	51aa <http_client_callback+0x16>
			add_state(CANCELED);
    51e4:	2020      	movs	r0, #32
    51e6:	4b13      	ldr	r3, [pc, #76]	; (5234 <http_client_callback+0xa0>)
    51e8:	4798      	blx	r3
			return;
    51ea:	e7de      	b.n	51aa <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    51ec:	6811      	ldr	r1, [r2, #0]
    51ee:	6850      	ldr	r0, [r2, #4]
    51f0:	4b16      	ldr	r3, [pc, #88]	; (524c <http_client_callback+0xb8>)
    51f2:	4798      	blx	r3
		break;
    51f4:	e7d9      	b.n	51aa <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    51f6:	6811      	ldr	r1, [r2, #0]
    51f8:	4815      	ldr	r0, [pc, #84]	; (5250 <http_client_callback+0xbc>)
    51fa:	4b10      	ldr	r3, [pc, #64]	; (523c <http_client_callback+0xa8>)
    51fc:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    51fe:	6823      	ldr	r3, [r4, #0]
    5200:	330b      	adds	r3, #11
    5202:	d1d2      	bne.n	51aa <http_client_callback+0x16>
	return (down_state & mask) != 0;
    5204:	4b13      	ldr	r3, [pc, #76]	; (5254 <http_client_callback+0xc0>)
    5206:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(DOWNLOADING))
    5208:	071b      	lsls	r3, r3, #28
    520a:	d407      	bmi.n	521c <http_client_callback+0x88>
	return (down_state & mask) != 0;
    520c:	4b11      	ldr	r3, [pc, #68]	; (5254 <http_client_callback+0xc0>)
    520e:	881b      	ldrh	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED))
    5210:	075b      	lsls	r3, r3, #29
    5212:	d5ca      	bpl.n	51aa <http_client_callback+0x16>
				clear_state(GET_REQUESTED);
    5214:	2004      	movs	r0, #4
    5216:	4b10      	ldr	r3, [pc, #64]	; (5258 <http_client_callback+0xc4>)
    5218:	4798      	blx	r3
    521a:	e7c6      	b.n	51aa <http_client_callback+0x16>
				clear_state(DOWNLOADING);
    521c:	2008      	movs	r0, #8
    521e:	4b0e      	ldr	r3, [pc, #56]	; (5258 <http_client_callback+0xc4>)
    5220:	4798      	blx	r3
    5222:	e7f3      	b.n	520c <http_client_callback+0x78>
    5224:	0001406c 	.word	0x0001406c
    5228:	000141f4 	.word	0x000141f4
    522c:	0000f425 	.word	0x0000f425
    5230:	0001422c 	.word	0x0001422c
    5234:	00004881 	.word	0x00004881
    5238:	00014258 	.word	0x00014258
    523c:	0000f309 	.word	0x0000f309
    5240:	20000204 	.word	0x20000204
    5244:	20000210 	.word	0x20000210
    5248:	000005dc 	.word	0x000005dc
    524c:	00004ccd 	.word	0x00004ccd
    5250:	00014294 	.word	0x00014294
    5254:	200002c0 	.word	0x200002c0
    5258:	00004871 	.word	0x00004871

0000525c <configure_http_client>:
{
    525c:	b500      	push	{lr}
    525e:	b089      	sub	sp, #36	; 0x24
	http_client_get_config_defaults(&httpc_conf);
    5260:	a801      	add	r0, sp, #4
    5262:	4b0b      	ldr	r3, [pc, #44]	; (5290 <configure_http_client+0x34>)
    5264:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MTU_HTTP;
    5266:	4b0b      	ldr	r3, [pc, #44]	; (5294 <configure_http_client+0x38>)
    5268:	9305      	str	r3, [sp, #20]
	httpc_conf.timer_inst = &swt_module_inst;
    526a:	4b0b      	ldr	r3, [pc, #44]	; (5298 <configure_http_client+0x3c>)
    526c:	9302      	str	r3, [sp, #8]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    526e:	a901      	add	r1, sp, #4
    5270:	480a      	ldr	r0, [pc, #40]	; (529c <configure_http_client+0x40>)
    5272:	4b0b      	ldr	r3, [pc, #44]	; (52a0 <configure_http_client+0x44>)
    5274:	4798      	blx	r3
    5276:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
    5278:	db05      	blt.n	5286 <configure_http_client+0x2a>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
    527a:	490a      	ldr	r1, [pc, #40]	; (52a4 <configure_http_client+0x48>)
    527c:	4807      	ldr	r0, [pc, #28]	; (529c <configure_http_client+0x40>)
    527e:	4b0a      	ldr	r3, [pc, #40]	; (52a8 <configure_http_client+0x4c>)
    5280:	4798      	blx	r3
}
    5282:	b009      	add	sp, #36	; 0x24
    5284:	bd00      	pop	{pc}
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    5286:	4809      	ldr	r0, [pc, #36]	; (52ac <configure_http_client+0x50>)
    5288:	4b09      	ldr	r3, [pc, #36]	; (52b0 <configure_http_client+0x54>)
    528a:	4798      	blx	r3
    528c:	e7fe      	b.n	528c <configure_http_client+0x30>
    528e:	46c0      	nop			; (mov r8, r8)
    5290:	000097b9 	.word	0x000097b9
    5294:	000005dc 	.word	0x000005dc
    5298:	200002c4 	.word	0x200002c4
    529c:	2000031c 	.word	0x2000031c
    52a0:	000097e1 	.word	0x000097e1
    52a4:	00005195 	.word	0x00005195
    52a8:	00009895 	.word	0x00009895
    52ac:	00014080 	.word	0x00014080
    52b0:	0000f309 	.word	0x0000f309

000052b4 <get_default_wifi_config>:
	sw_timer_enable(&swt_module_inst);
}

void get_default_wifi_config(wifi_config *wifi_configuration)
{
	wifi_configuration->ssid = "AirPennNet-Device";
    52b4:	4b05      	ldr	r3, [pc, #20]	; (52cc <get_default_wifi_config+0x18>)
    52b6:	6003      	str	r3, [r0, #0]
	wifi_configuration->auth_type = M2M_WIFI_SEC_WPA_PSK;
    52b8:	2302      	movs	r3, #2
    52ba:	6043      	str	r3, [r0, #4]
	wifi_configuration->password = "penn1740wifi";
    52bc:	4b04      	ldr	r3, [pc, #16]	; (52d0 <get_default_wifi_config+0x1c>)
    52be:	6083      	str	r3, [r0, #8]
	wifi_configuration->firmware_header_http_address = "http://www.seas.upenn.edu/~warcher/ese516/metadata.bin";
    52c0:	4b04      	ldr	r3, [pc, #16]	; (52d4 <get_default_wifi_config+0x20>)
    52c2:	60c3      	str	r3, [r0, #12]
	wifi_configuration->firmware_http_address = "http://www.seas.upenn.edu/~warcher/ese516/test-firmware.bin";
    52c4:	4b04      	ldr	r3, [pc, #16]	; (52d8 <get_default_wifi_config+0x24>)
    52c6:	6103      	str	r3, [r0, #16]
}
    52c8:	4770      	bx	lr
    52ca:	46c0      	nop			; (mov r8, r8)
    52cc:	0001415c 	.word	0x0001415c
    52d0:	00014170 	.word	0x00014170
    52d4:	00014180 	.word	0x00014180
    52d8:	000141b8 	.word	0x000141b8

000052dc <configure_wifi_module>:
void configure_wifi_module(wifi_config *wifi_configuration)
{
    52dc:	b530      	push	{r4, r5, lr}
    52de:	b08b      	sub	sp, #44	; 0x2c
    52e0:	0004      	movs	r4, r0
	down_state = NOT_READY;
    52e2:	2200      	movs	r2, #0
    52e4:	4b24      	ldr	r3, [pc, #144]	; (5378 <configure_wifi_module+0x9c>)
    52e6:	801a      	strh	r2, [r3, #0]
	add_state(NOT_CHECKED);
    52e8:	2040      	movs	r0, #64	; 0x40
    52ea:	4d24      	ldr	r5, [pc, #144]	; (537c <configure_wifi_module+0xa0>)
    52ec:	47a8      	blx	r5
	init_state();
	add_state(STORAGE_READY);
    52ee:	2001      	movs	r0, #1
    52f0:	47a8      	blx	r5
	sw_timer_get_config_defaults(&swt_conf);
    52f2:	a803      	add	r0, sp, #12
    52f4:	4b22      	ldr	r3, [pc, #136]	; (5380 <configure_wifi_module+0xa4>)
    52f6:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    52f8:	4d22      	ldr	r5, [pc, #136]	; (5384 <configure_wifi_module+0xa8>)
    52fa:	a903      	add	r1, sp, #12
    52fc:	0028      	movs	r0, r5
    52fe:	4b22      	ldr	r3, [pc, #136]	; (5388 <configure_wifi_module+0xac>)
    5300:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    5302:	0028      	movs	r0, r5
    5304:	4b21      	ldr	r3, [pc, #132]	; (538c <configure_wifi_module+0xb0>)
    5306:	4798      	blx	r3
	configure_timer();
	configure_http_client();
    5308:	4b21      	ldr	r3, [pc, #132]	; (5390 <configure_wifi_module+0xb4>)
    530a:	4798      	blx	r3
	nm_bsp_init();
    530c:	4b21      	ldr	r3, [pc, #132]	; (5394 <configure_wifi_module+0xb8>)
    530e:	4798      	blx	r3

	tstrWifiInitParam wifi_params;
	memset((uint8_t *)&wifi_params, 0, sizeof(tstrWifiInitParam));
    5310:	2218      	movs	r2, #24
    5312:	2100      	movs	r1, #0
    5314:	a804      	add	r0, sp, #16
    5316:	4b20      	ldr	r3, [pc, #128]	; (5398 <configure_wifi_module+0xbc>)
    5318:	4798      	blx	r3
	wifi_params.pfAppWifiCb = wifi_callback;
    531a:	4b20      	ldr	r3, [pc, #128]	; (539c <configure_wifi_module+0xc0>)
    531c:	9304      	str	r3, [sp, #16]
	int8_t ret = m2m_wifi_init(&wifi_params); // NOTE: m2m = machine to machine
    531e:	a804      	add	r0, sp, #16
    5320:	4b1f      	ldr	r3, [pc, #124]	; (53a0 <configure_wifi_module+0xc4>)
    5322:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    5324:	2800      	cmp	r0, #0
    5326:	d11c      	bne.n	5362 <configure_wifi_module+0x86>
		printf("failed to initialize wifi parameters\r\n");
		return 0;
	}

	socketInit();
    5328:	4b1e      	ldr	r3, [pc, #120]	; (53a4 <configure_wifi_module+0xc8>)
    532a:	4798      	blx	r3
	registerSocketCallback(socket_callback, resolve_cb);
    532c:	491e      	ldr	r1, [pc, #120]	; (53a8 <configure_wifi_module+0xcc>)
    532e:	481f      	ldr	r0, [pc, #124]	; (53ac <configure_wifi_module+0xd0>)
    5330:	4b1f      	ldr	r3, [pc, #124]	; (53b0 <configure_wifi_module+0xd4>)
    5332:	4798      	blx	r3
	printf("--- Welcome to ATWINC 1500 Connection Test ---\r\n");
    5334:	481f      	ldr	r0, [pc, #124]	; (53b4 <configure_wifi_module+0xd8>)
    5336:	4b20      	ldr	r3, [pc, #128]	; (53b8 <configure_wifi_module+0xdc>)
    5338:	4798      	blx	r3
	printf("main: connecting to WiFi AP %s...\r\n", (char *)SSID);
    533a:	4920      	ldr	r1, [pc, #128]	; (53bc <configure_wifi_module+0xe0>)
    533c:	4820      	ldr	r0, [pc, #128]	; (53c0 <configure_wifi_module+0xe4>)
    533e:	4b21      	ldr	r3, [pc, #132]	; (53c4 <configure_wifi_module+0xe8>)
    5340:	4798      	blx	r3
	ret = m2m_wifi_connect(wifi_configuration->ssid, strlen(wifi_configuration->ssid), wifi_configuration->auth_type, wifi_configuration->password, M2M_WIFI_CH_ALL);
    5342:	6825      	ldr	r5, [r4, #0]
    5344:	0028      	movs	r0, r5
    5346:	4b20      	ldr	r3, [pc, #128]	; (53c8 <configure_wifi_module+0xec>)
    5348:	4798      	blx	r3
    534a:	7922      	ldrb	r2, [r4, #4]
    534c:	b2c1      	uxtb	r1, r0
    534e:	23ff      	movs	r3, #255	; 0xff
    5350:	9300      	str	r3, [sp, #0]
    5352:	68a3      	ldr	r3, [r4, #8]
    5354:	0028      	movs	r0, r5
    5356:	4d1d      	ldr	r5, [pc, #116]	; (53cc <configure_wifi_module+0xf0>)
    5358:	47a8      	blx	r5
	if (M2M_SUCCESS == ret) {
    535a:	2800      	cmp	r0, #0
    535c:	d005      	beq.n	536a <configure_wifi_module+0x8e>
		printf("successfully connected");
		current_wifi_config = wifi_configuration;
	}
}
    535e:	b00b      	add	sp, #44	; 0x2c
    5360:	bd30      	pop	{r4, r5, pc}
		printf("failed to initialize wifi parameters\r\n");
    5362:	481b      	ldr	r0, [pc, #108]	; (53d0 <configure_wifi_module+0xf4>)
    5364:	4b14      	ldr	r3, [pc, #80]	; (53b8 <configure_wifi_module+0xdc>)
    5366:	4798      	blx	r3
    5368:	e7f9      	b.n	535e <configure_wifi_module+0x82>
		printf("successfully connected");
    536a:	481a      	ldr	r0, [pc, #104]	; (53d4 <configure_wifi_module+0xf8>)
    536c:	4b15      	ldr	r3, [pc, #84]	; (53c4 <configure_wifi_module+0xe8>)
    536e:	4798      	blx	r3
		current_wifi_config = wifi_configuration;
    5370:	4b19      	ldr	r3, [pc, #100]	; (53d8 <configure_wifi_module+0xfc>)
    5372:	601c      	str	r4, [r3, #0]
    5374:	e7f3      	b.n	535e <configure_wifi_module+0x82>
    5376:	46c0      	nop			; (mov r8, r8)
    5378:	200002c0 	.word	0x200002c0
    537c:	00004881 	.word	0x00004881
    5380:	0000a7a1 	.word	0x0000a7a1
    5384:	200002c4 	.word	0x200002c4
    5388:	0000a7ad 	.word	0x0000a7ad
    538c:	0000a859 	.word	0x0000a859
    5390:	0000525d 	.word	0x0000525d
    5394:	000061e9 	.word	0x000061e9
    5398:	0000e8c7 	.word	0x0000e8c7
    539c:	00004b05 	.word	0x00004b05
    53a0:	00007125 	.word	0x00007125
    53a4:	00008d51 	.word	0x00008d51
    53a8:	00004a0d 	.word	0x00004a0d
    53ac:	00004a01 	.word	0x00004a01
    53b0:	00008d95 	.word	0x00008d95
    53b4:	000140f0 	.word	0x000140f0
    53b8:	0000f425 	.word	0x0000f425
    53bc:	0001415c 	.word	0x0001415c
    53c0:	00014120 	.word	0x00014120
    53c4:	0000f309 	.word	0x0000f309
    53c8:	0000f66b 	.word	0x0000f66b
    53cc:	000074f5 	.word	0x000074f5
    53d0:	000140c8 	.word	0x000140c8
    53d4:	00014144 	.word	0x00014144
    53d8:	20000448 	.word	0x20000448

000053dc <check_for_update>:

bool check_for_update()
{
    53dc:	b570      	push	{r4, r5, r6, lr}
	m2m_wifi_request_dhcp_client();
    53de:	4b0e      	ldr	r3, [pc, #56]	; (5418 <check_for_update+0x3c>)
    53e0:	4798      	blx	r3
	return (down_state & mask) != 0;
    53e2:	4b0e      	ldr	r3, [pc, #56]	; (541c <check_for_update+0x40>)
    53e4:	881b      	ldrh	r3, [r3, #0]
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    53e6:	2230      	movs	r2, #48	; 0x30
    53e8:	421a      	tst	r2, r3
    53ea:	d10b      	bne.n	5404 <check_for_update+0x28>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    53ec:	4e0c      	ldr	r6, [pc, #48]	; (5420 <check_for_update+0x44>)
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    53ee:	4c0d      	ldr	r4, [pc, #52]	; (5424 <check_for_update+0x48>)
    53f0:	4d0d      	ldr	r5, [pc, #52]	; (5428 <check_for_update+0x4c>)
		m2m_wifi_handle_events(NULL);
    53f2:	2000      	movs	r0, #0
    53f4:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
    53f6:	0020      	movs	r0, r4
    53f8:	47a8      	blx	r5
	return (down_state & mask) != 0;
    53fa:	4b08      	ldr	r3, [pc, #32]	; (541c <check_for_update+0x40>)
    53fc:	881b      	ldrh	r3, [r3, #0]
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    53fe:	2230      	movs	r2, #48	; 0x30
    5400:	421a      	tst	r2, r3
    5402:	d0f6      	beq.n	53f2 <check_for_update+0x16>
	}
	if (is_state_set(UPDATE_AVAILABLE)) {
		clear_state(COMPLETED);
		return true;
	} else {
		return false;
    5404:	2000      	movs	r0, #0
	if (is_state_set(UPDATE_AVAILABLE)) {
    5406:	061b      	lsls	r3, r3, #24
    5408:	d400      	bmi.n	540c <check_for_update+0x30>
	}
}
    540a:	bd70      	pop	{r4, r5, r6, pc}
		clear_state(COMPLETED);
    540c:	3010      	adds	r0, #16
    540e:	4b07      	ldr	r3, [pc, #28]	; (542c <check_for_update+0x50>)
    5410:	4798      	blx	r3
		return true;
    5412:	2001      	movs	r0, #1
    5414:	e7f9      	b.n	540a <check_for_update+0x2e>
    5416:	46c0      	nop			; (mov r8, r8)
    5418:	00007511 	.word	0x00007511
    541c:	200002c0 	.word	0x200002c0
    5420:	00007259 	.word	0x00007259
    5424:	200002c4 	.word	0x200002c4
    5428:	0000a8e1 	.word	0x0000a8e1
    542c:	00004871 	.word	0x00004871

00005430 <download_firmware>:
bool download_firmware()
{
    5430:	b570      	push	{r4, r5, r6, lr}
	return (down_state & mask) != 0;
    5432:	4b11      	ldr	r3, [pc, #68]	; (5478 <download_firmware+0x48>)
    5434:	881b      	ldrh	r3, [r3, #0]
		if (is_state_set(COMPLETED))
			return true;
		else
			return false;
	} else {
		return false;
    5436:	2000      	movs	r0, #0
	if (is_state_set(UPDATE_AVAILABLE)) {
    5438:	061b      	lsls	r3, r3, #24
    543a:	d400      	bmi.n	543e <download_firmware+0xe>
	}
}
    543c:	bd70      	pop	{r4, r5, r6, pc}
		start_download();
    543e:	4b0f      	ldr	r3, [pc, #60]	; (547c <download_firmware+0x4c>)
    5440:	4798      	blx	r3
	return (down_state & mask) != 0;
    5442:	4b0d      	ldr	r3, [pc, #52]	; (5478 <download_firmware+0x48>)
    5444:	881b      	ldrh	r3, [r3, #0]
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    5446:	2230      	movs	r2, #48	; 0x30
    5448:	421a      	tst	r2, r3
    544a:	d111      	bne.n	5470 <download_firmware+0x40>
			m2m_wifi_handle_events(NULL);
    544c:	4e0c      	ldr	r6, [pc, #48]	; (5480 <download_firmware+0x50>)
			sw_timer_task(&swt_module_inst);
    544e:	4c0d      	ldr	r4, [pc, #52]	; (5484 <download_firmware+0x54>)
    5450:	4d0d      	ldr	r5, [pc, #52]	; (5488 <download_firmware+0x58>)
			m2m_wifi_handle_events(NULL);
    5452:	2000      	movs	r0, #0
    5454:	47b0      	blx	r6
			sw_timer_task(&swt_module_inst);
    5456:	0020      	movs	r0, r4
    5458:	47a8      	blx	r5
	return (down_state & mask) != 0;
    545a:	4b07      	ldr	r3, [pc, #28]	; (5478 <download_firmware+0x48>)
    545c:	8818      	ldrh	r0, [r3, #0]
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    545e:	2330      	movs	r3, #48	; 0x30
    5460:	4203      	tst	r3, r0
    5462:	d0f6      	beq.n	5452 <download_firmware+0x22>
	return (down_state & mask) != 0;
    5464:	3b20      	subs	r3, #32
    5466:	4018      	ands	r0, r3
		if (is_state_set(COMPLETED))
    5468:	1e43      	subs	r3, r0, #1
    546a:	4198      	sbcs	r0, r3
    546c:	b2c0      	uxtb	r0, r0
    546e:	e7e5      	b.n	543c <download_firmware+0xc>
	return (down_state & mask) != 0;
    5470:	2010      	movs	r0, #16
    5472:	4018      	ands	r0, r3
    5474:	e7f8      	b.n	5468 <download_firmware+0x38>
    5476:	46c0      	nop			; (mov r8, r8)
    5478:	200002c0 	.word	0x200002c0
    547c:	00004a49 	.word	0x00004a49
    5480:	00007259 	.word	0x00007259
    5484:	200002c4 	.word	0x200002c4
    5488:	0000a8e1 	.word	0x0000a8e1

0000548c <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    548c:	b530      	push	{r4, r5, lr}
    548e:	b085      	sub	sp, #20
    5490:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    5492:	2300      	movs	r3, #0
    5494:	9303      	str	r3, [sp, #12]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    5496:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    5498:	4b2f      	ldr	r3, [pc, #188]	; (5558 <at25dfx_chip_check_presence+0xcc>)
    549a:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
    549c:	792b      	ldrb	r3, [r5, #4]
    549e:	2b00      	cmp	r3, #0
    54a0:	d156      	bne.n	5550 <at25dfx_chip_check_presence+0xc4>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
    54a2:	3301      	adds	r3, #1
    54a4:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    54a6:	4b2d      	ldr	r3, [pc, #180]	; (555c <at25dfx_chip_check_presence+0xd0>)
    54a8:	4798      	blx	r3
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    54aa:	229f      	movs	r2, #159	; 0x9f
    54ac:	ab01      	add	r3, sp, #4
    54ae:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    54b0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    54b2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    54b4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    54b6:	2900      	cmp	r1, #0
    54b8:	d104      	bne.n	54c4 <at25dfx_chip_check_presence+0x38>
		return &(ports[port_index]->Group[group_index]);
    54ba:	0953      	lsrs	r3, r2, #5
    54bc:	01db      	lsls	r3, r3, #7
    54be:	4928      	ldr	r1, [pc, #160]	; (5560 <at25dfx_chip_check_presence+0xd4>)
    54c0:	468c      	mov	ip, r1
    54c2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    54c4:	211f      	movs	r1, #31
    54c6:	4011      	ands	r1, r2
    54c8:	2201      	movs	r2, #1
    54ca:	408a      	lsls	r2, r1
	} else {
		port_base->OUTCLR.reg = pin_mask;
    54cc:	615a      	str	r2, [r3, #20]
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    54ce:	2201      	movs	r2, #1
    54d0:	a901      	add	r1, sp, #4
    54d2:	6820      	ldr	r0, [r4, #0]
    54d4:	4b23      	ldr	r3, [pc, #140]	; (5564 <at25dfx_chip_check_presence+0xd8>)
    54d6:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    54d8:	2300      	movs	r3, #0
    54da:	2203      	movs	r2, #3
    54dc:	a903      	add	r1, sp, #12
    54de:	6820      	ldr	r0, [r4, #0]
    54e0:	4d21      	ldr	r5, [pc, #132]	; (5568 <at25dfx_chip_check_presence+0xdc>)
    54e2:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    54e4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    54e6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    54e8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    54ea:	2900      	cmp	r1, #0
    54ec:	d104      	bne.n	54f8 <at25dfx_chip_check_presence+0x6c>
		return &(ports[port_index]->Group[group_index]);
    54ee:	0953      	lsrs	r3, r2, #5
    54f0:	01db      	lsls	r3, r3, #7
    54f2:	491b      	ldr	r1, [pc, #108]	; (5560 <at25dfx_chip_check_presence+0xd4>)
    54f4:	468c      	mov	ip, r1
    54f6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    54f8:	211f      	movs	r1, #31
    54fa:	4011      	ands	r1, r2
    54fc:	2201      	movs	r2, #1
    54fe:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5500:	619a      	str	r2, [r3, #24]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
    5502:	2300      	movs	r3, #0
    5504:	6822      	ldr	r2, [r4, #0]
    5506:	7113      	strb	r3, [r2, #4]
	switch (type) {
    5508:	7923      	ldrb	r3, [r4, #4]
    550a:	2b09      	cmp	r3, #9
    550c:	d815      	bhi.n	553a <at25dfx_chip_check_presence+0xae>
    550e:	009b      	lsls	r3, r3, #2
    5510:	4a16      	ldr	r2, [pc, #88]	; (556c <at25dfx_chip_check_presence+0xe0>)
    5512:	58d3      	ldr	r3, [r2, r3]
    5514:	469f      	mov	pc, r3
		return 0x00431f;
    5516:	4b16      	ldr	r3, [pc, #88]	; (5570 <at25dfx_chip_check_presence+0xe4>)
    5518:	e012      	b.n	5540 <at25dfx_chip_check_presence+0xb4>
		return 0x01441f;
    551a:	4b16      	ldr	r3, [pc, #88]	; (5574 <at25dfx_chip_check_presence+0xe8>)
    551c:	e010      	b.n	5540 <at25dfx_chip_check_presence+0xb4>
		return 0x02451f;
    551e:	4b16      	ldr	r3, [pc, #88]	; (5578 <at25dfx_chip_check_presence+0xec>)
    5520:	e00e      	b.n	5540 <at25dfx_chip_check_presence+0xb4>
		return 0x01451f;
    5522:	4b16      	ldr	r3, [pc, #88]	; (557c <at25dfx_chip_check_presence+0xf0>)
    5524:	e00c      	b.n	5540 <at25dfx_chip_check_presence+0xb4>
		return 0x02461f;
    5526:	4b16      	ldr	r3, [pc, #88]	; (5580 <at25dfx_chip_check_presence+0xf4>)
    5528:	e00a      	b.n	5540 <at25dfx_chip_check_presence+0xb4>
		return 0x03461f;
    552a:	4b16      	ldr	r3, [pc, #88]	; (5584 <at25dfx_chip_check_presence+0xf8>)
    552c:	e008      	b.n	5540 <at25dfx_chip_check_presence+0xb4>
		return 0x00861f;
    552e:	4b16      	ldr	r3, [pc, #88]	; (5588 <at25dfx_chip_check_presence+0xfc>)
    5530:	e006      	b.n	5540 <at25dfx_chip_check_presence+0xb4>
		return 0x01471f;
    5532:	4b16      	ldr	r3, [pc, #88]	; (558c <at25dfx_chip_check_presence+0x100>)
    5534:	e004      	b.n	5540 <at25dfx_chip_check_presence+0xb4>
		return 0x00481f;
    5536:	4b16      	ldr	r3, [pc, #88]	; (5590 <at25dfx_chip_check_presence+0x104>)
    5538:	e002      	b.n	5540 <at25dfx_chip_check_presence+0xb4>
		return 0;
    553a:	2300      	movs	r3, #0
    553c:	e000      	b.n	5540 <at25dfx_chip_check_presence+0xb4>
		return 0x00651f;
    553e:	4b15      	ldr	r3, [pc, #84]	; (5594 <at25dfx_chip_check_presence+0x108>)

	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	if (id == _at25dfx_get_device_id(chip->type)) {
    5540:	9a03      	ldr	r2, [sp, #12]
    5542:	429a      	cmp	r2, r3
    5544:	d002      	beq.n	554c <at25dfx_chip_check_presence+0xc0>
		return STATUS_OK;
	} else {
		return STATUS_ERR_NOT_FOUND;
    5546:	2014      	movs	r0, #20
	}
}
    5548:	b005      	add	sp, #20
    554a:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    554c:	2000      	movs	r0, #0
    554e:	e7fb      	b.n	5548 <at25dfx_chip_check_presence+0xbc>
    5550:	4b02      	ldr	r3, [pc, #8]	; (555c <at25dfx_chip_check_presence+0xd0>)
    5552:	4798      	blx	r3
		return status;
    5554:	2005      	movs	r0, #5
    5556:	e7f7      	b.n	5548 <at25dfx_chip_check_presence+0xbc>
    5558:	0000dc1d 	.word	0x0000dc1d
    555c:	0000dc5d 	.word	0x0000dc5d
    5560:	41004400 	.word	0x41004400
    5564:	0000cff5 	.word	0x0000cff5
    5568:	0000cde5 	.word	0x0000cde5
    556c:	000149fc 	.word	0x000149fc
    5570:	0000431f 	.word	0x0000431f
    5574:	0001441f 	.word	0x0001441f
    5578:	0002451f 	.word	0x0002451f
    557c:	0001451f 	.word	0x0001451f
    5580:	0002461f 	.word	0x0002461f
    5584:	0003461f 	.word	0x0003461f
    5588:	0000861f 	.word	0x0000861f
    558c:	0001471f 	.word	0x0001471f
    5590:	0000481f 	.word	0x0000481f
    5594:	0000651f 	.word	0x0000651f

00005598 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
    5598:	b5f0      	push	{r4, r5, r6, r7, lr}
    559a:	b085      	sub	sp, #20
    559c:	0004      	movs	r4, r0
    559e:	000e      	movs	r6, r1
    55a0:	9201      	str	r2, [sp, #4]
    55a2:	001f      	movs	r7, r3
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    55a4:	185a      	adds	r2, r3, r1
	switch (type) {
    55a6:	7903      	ldrb	r3, [r0, #4]
    55a8:	2b09      	cmp	r3, #9
    55aa:	d815      	bhi.n	55d8 <at25dfx_chip_read_buffer+0x40>
    55ac:	009b      	lsls	r3, r3, #2
    55ae:	4932      	ldr	r1, [pc, #200]	; (5678 <at25dfx_chip_read_buffer+0xe0>)
    55b0:	58cb      	ldr	r3, [r1, r3]
    55b2:	469f      	mov	pc, r3
		return 256 * 1024UL;
    55b4:	2380      	movs	r3, #128	; 0x80
    55b6:	02db      	lsls	r3, r3, #11
    55b8:	e012      	b.n	55e0 <at25dfx_chip_read_buffer+0x48>
		return 512 * 1024UL;
    55ba:	2380      	movs	r3, #128	; 0x80
    55bc:	031b      	lsls	r3, r3, #12
    55be:	e00f      	b.n	55e0 <at25dfx_chip_read_buffer+0x48>
		return 1024 * 1024UL;
    55c0:	2380      	movs	r3, #128	; 0x80
    55c2:	035b      	lsls	r3, r3, #13
    55c4:	e00c      	b.n	55e0 <at25dfx_chip_read_buffer+0x48>
		return 2048 * 1024UL;
    55c6:	2380      	movs	r3, #128	; 0x80
    55c8:	039b      	lsls	r3, r3, #14
    55ca:	e009      	b.n	55e0 <at25dfx_chip_read_buffer+0x48>
		return 4096 * 1024UL;
    55cc:	2380      	movs	r3, #128	; 0x80
    55ce:	03db      	lsls	r3, r3, #15
    55d0:	e006      	b.n	55e0 <at25dfx_chip_read_buffer+0x48>
		return 8192 * 1024UL;
    55d2:	2380      	movs	r3, #128	; 0x80
    55d4:	041b      	lsls	r3, r3, #16
    55d6:	e003      	b.n	55e0 <at25dfx_chip_read_buffer+0x48>
		return 0;
    55d8:	2300      	movs	r3, #0
    55da:	e001      	b.n	55e0 <at25dfx_chip_read_buffer+0x48>
		return 64 * 1024UL;
    55dc:	2380      	movs	r3, #128	; 0x80
    55de:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    55e0:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    55e2:	429a      	cmp	r2, r3
    55e4:	d901      	bls.n	55ea <at25dfx_chip_read_buffer+0x52>
	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
    55e6:	b005      	add	sp, #20
    55e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    55ea:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    55ec:	4b23      	ldr	r3, [pc, #140]	; (567c <at25dfx_chip_read_buffer+0xe4>)
    55ee:	4798      	blx	r3
	if (module->locked) {
    55f0:	792b      	ldrb	r3, [r5, #4]
    55f2:	2b00      	cmp	r3, #0
    55f4:	d13c      	bne.n	5670 <at25dfx_chip_read_buffer+0xd8>
		module->locked = true;
    55f6:	3301      	adds	r3, #1
    55f8:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    55fa:	4b21      	ldr	r3, [pc, #132]	; (5680 <at25dfx_chip_read_buffer+0xe8>)
    55fc:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    55fe:	230b      	movs	r3, #11
    5600:	aa02      	add	r2, sp, #8
    5602:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    5604:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    5606:	0a33      	lsrs	r3, r6, #8
    5608:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    560a:	0c36      	lsrs	r6, r6, #16
    560c:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    560e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5610:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5612:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5614:	2900      	cmp	r1, #0
    5616:	d104      	bne.n	5622 <at25dfx_chip_read_buffer+0x8a>
		return &(ports[port_index]->Group[group_index]);
    5618:	0953      	lsrs	r3, r2, #5
    561a:	01db      	lsls	r3, r3, #7
    561c:	4919      	ldr	r1, [pc, #100]	; (5684 <at25dfx_chip_read_buffer+0xec>)
    561e:	468c      	mov	ip, r1
    5620:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5622:	211f      	movs	r1, #31
    5624:	4011      	ands	r1, r2
    5626:	2201      	movs	r2, #1
    5628:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    562a:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    562c:	2205      	movs	r2, #5
    562e:	a902      	add	r1, sp, #8
    5630:	6820      	ldr	r0, [r4, #0]
    5632:	4b15      	ldr	r3, [pc, #84]	; (5688 <at25dfx_chip_read_buffer+0xf0>)
    5634:	4798      	blx	r3
	if (cmd.length) {
    5636:	2f00      	cmp	r7, #0
    5638:	d113      	bne.n	5662 <at25dfx_chip_read_buffer+0xca>
	port_pin_set_output_level(chip->cs_pin, true);
    563a:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    563c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    563e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5640:	2900      	cmp	r1, #0
    5642:	d104      	bne.n	564e <at25dfx_chip_read_buffer+0xb6>
		return &(ports[port_index]->Group[group_index]);
    5644:	0953      	lsrs	r3, r2, #5
    5646:	01db      	lsls	r3, r3, #7
    5648:	490e      	ldr	r1, [pc, #56]	; (5684 <at25dfx_chip_read_buffer+0xec>)
    564a:	468c      	mov	ip, r1
    564c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    564e:	211f      	movs	r1, #31
    5650:	4011      	ands	r1, r2
    5652:	2201      	movs	r2, #1
    5654:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5656:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
    5658:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    565a:	2200      	movs	r2, #0
    565c:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
    565e:	2000      	movs	r0, #0
    5660:	e7c1      	b.n	55e6 <at25dfx_chip_read_buffer+0x4e>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    5662:	2300      	movs	r3, #0
    5664:	003a      	movs	r2, r7
    5666:	9901      	ldr	r1, [sp, #4]
    5668:	6820      	ldr	r0, [r4, #0]
    566a:	4d08      	ldr	r5, [pc, #32]	; (568c <at25dfx_chip_read_buffer+0xf4>)
    566c:	47a8      	blx	r5
    566e:	e7e4      	b.n	563a <at25dfx_chip_read_buffer+0xa2>
    5670:	4b03      	ldr	r3, [pc, #12]	; (5680 <at25dfx_chip_read_buffer+0xe8>)
    5672:	4798      	blx	r3
		return status;
    5674:	2005      	movs	r0, #5
    5676:	e7b6      	b.n	55e6 <at25dfx_chip_read_buffer+0x4e>
    5678:	00014a24 	.word	0x00014a24
    567c:	0000dc1d 	.word	0x0000dc1d
    5680:	0000dc5d 	.word	0x0000dc5d
    5684:	41004400 	.word	0x41004400
    5688:	0000cff5 	.word	0x0000cff5
    568c:	0000cde5 	.word	0x0000cde5

00005690 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    5690:	b5f0      	push	{r4, r5, r6, r7, lr}
    5692:	46de      	mov	lr, fp
    5694:	4657      	mov	r7, sl
    5696:	464e      	mov	r6, r9
    5698:	4645      	mov	r5, r8
    569a:	b5e0      	push	{r5, r6, r7, lr}
    569c:	b085      	sub	sp, #20
    569e:	0005      	movs	r5, r0
    56a0:	000e      	movs	r6, r1
    56a2:	9201      	str	r2, [sp, #4]
    56a4:	001f      	movs	r7, r3

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    56a6:	185a      	adds	r2, r3, r1
	switch (type) {
    56a8:	7903      	ldrb	r3, [r0, #4]
    56aa:	2b09      	cmp	r3, #9
    56ac:	d815      	bhi.n	56da <at25dfx_chip_write_buffer+0x4a>
    56ae:	009b      	lsls	r3, r3, #2
    56b0:	49ae      	ldr	r1, [pc, #696]	; (596c <at25dfx_chip_write_buffer+0x2dc>)
    56b2:	58cb      	ldr	r3, [r1, r3]
    56b4:	469f      	mov	pc, r3
		return 256 * 1024UL;
    56b6:	2380      	movs	r3, #128	; 0x80
    56b8:	02db      	lsls	r3, r3, #11
    56ba:	e012      	b.n	56e2 <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
    56bc:	2380      	movs	r3, #128	; 0x80
    56be:	031b      	lsls	r3, r3, #12
    56c0:	e00f      	b.n	56e2 <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
    56c2:	2380      	movs	r3, #128	; 0x80
    56c4:	035b      	lsls	r3, r3, #13
    56c6:	e00c      	b.n	56e2 <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
    56c8:	2380      	movs	r3, #128	; 0x80
    56ca:	039b      	lsls	r3, r3, #14
    56cc:	e009      	b.n	56e2 <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
    56ce:	2380      	movs	r3, #128	; 0x80
    56d0:	03db      	lsls	r3, r3, #15
    56d2:	e006      	b.n	56e2 <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
    56d4:	2380      	movs	r3, #128	; 0x80
    56d6:	041b      	lsls	r3, r3, #16
    56d8:	e003      	b.n	56e2 <at25dfx_chip_write_buffer+0x52>
		return 0;
    56da:	2300      	movs	r3, #0
    56dc:	e001      	b.n	56e2 <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
    56de:	2380      	movs	r3, #128	; 0x80
    56e0:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    56e2:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    56e4:	429a      	cmp	r2, r3
    56e6:	d906      	bls.n	56f6 <at25dfx_chip_write_buffer+0x66>
	}

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    56e8:	b005      	add	sp, #20
    56ea:	bc3c      	pop	{r2, r3, r4, r5}
    56ec:	4690      	mov	r8, r2
    56ee:	4699      	mov	r9, r3
    56f0:	46a2      	mov	sl, r4
    56f2:	46ab      	mov	fp, r5
    56f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    56f6:	682c      	ldr	r4, [r5, #0]
	cpu_irq_enter_critical();
    56f8:	4b9d      	ldr	r3, [pc, #628]	; (5970 <at25dfx_chip_write_buffer+0x2e0>)
    56fa:	4798      	blx	r3
	if (module->locked) {
    56fc:	7923      	ldrb	r3, [r4, #4]
    56fe:	2b00      	cmp	r3, #0
    5700:	d000      	beq.n	5704 <at25dfx_chip_write_buffer+0x74>
    5702:	e12e      	b.n	5962 <at25dfx_chip_write_buffer+0x2d2>
		module->locked = true;
    5704:	3301      	adds	r3, #1
    5706:	7123      	strb	r3, [r4, #4]
	cpu_irq_leave_critical();
    5708:	4b9a      	ldr	r3, [pc, #616]	; (5974 <at25dfx_chip_write_buffer+0x2e4>)
    570a:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    570c:	2306      	movs	r3, #6
    570e:	aa02      	add	r2, sp, #8
    5710:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5712:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5714:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5716:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5718:	2900      	cmp	r1, #0
    571a:	d104      	bne.n	5726 <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
    571c:	0953      	lsrs	r3, r2, #5
    571e:	01db      	lsls	r3, r3, #7
    5720:	4995      	ldr	r1, [pc, #596]	; (5978 <at25dfx_chip_write_buffer+0x2e8>)
    5722:	468c      	mov	ip, r1
    5724:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5726:	211f      	movs	r1, #31
    5728:	4011      	ands	r1, r2
    572a:	2201      	movs	r2, #1
    572c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    572e:	615a      	str	r2, [r3, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5730:	2201      	movs	r2, #1
    5732:	a902      	add	r1, sp, #8
    5734:	6828      	ldr	r0, [r5, #0]
    5736:	4b91      	ldr	r3, [pc, #580]	; (597c <at25dfx_chip_write_buffer+0x2ec>)
    5738:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    573a:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    573c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    573e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5740:	2900      	cmp	r1, #0
    5742:	d104      	bne.n	574e <at25dfx_chip_write_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5744:	0953      	lsrs	r3, r2, #5
    5746:	01db      	lsls	r3, r3, #7
    5748:	498b      	ldr	r1, [pc, #556]	; (5978 <at25dfx_chip_write_buffer+0x2e8>)
    574a:	468c      	mov	ip, r1
    574c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    574e:	211f      	movs	r1, #31
    5750:	4011      	ands	r1, r2
    5752:	2201      	movs	r2, #1
    5754:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5756:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    5758:	22ff      	movs	r2, #255	; 0xff
    575a:	4032      	ands	r2, r6
    575c:	2380      	movs	r3, #128	; 0x80
    575e:	005b      	lsls	r3, r3, #1
    5760:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
    5762:	1c1a      	adds	r2, r3, #0
    5764:	b29b      	uxth	r3, r3
    5766:	42bb      	cmp	r3, r7
    5768:	d900      	bls.n	576c <at25dfx_chip_write_buffer+0xdc>
    576a:	1c3a      	adds	r2, r7, #0
    576c:	b293      	uxth	r3, r2
    576e:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
    5770:	2302      	movs	r3, #2
    5772:	aa02      	add	r2, sp, #8
    5774:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    5776:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    5778:	0a33      	lsrs	r3, r6, #8
    577a:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    577c:	0c33      	lsrs	r3, r6, #16
    577e:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    5780:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5782:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5784:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5786:	2900      	cmp	r1, #0
    5788:	d104      	bne.n	5794 <at25dfx_chip_write_buffer+0x104>
		return &(ports[port_index]->Group[group_index]);
    578a:	0953      	lsrs	r3, r2, #5
    578c:	01db      	lsls	r3, r3, #7
    578e:	497a      	ldr	r1, [pc, #488]	; (5978 <at25dfx_chip_write_buffer+0x2e8>)
    5790:	468c      	mov	ip, r1
    5792:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5794:	211f      	movs	r1, #31
    5796:	4011      	ands	r1, r2
    5798:	2201      	movs	r2, #1
    579a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    579c:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    579e:	2204      	movs	r2, #4
    57a0:	a902      	add	r1, sp, #8
    57a2:	6828      	ldr	r0, [r5, #0]
    57a4:	4b75      	ldr	r3, [pc, #468]	; (597c <at25dfx_chip_write_buffer+0x2ec>)
    57a6:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
    57a8:	4653      	mov	r3, sl
    57aa:	2b00      	cmp	r3, #0
    57ac:	d145      	bne.n	583a <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
    57ae:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    57b0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    57b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    57b4:	2900      	cmp	r1, #0
    57b6:	d104      	bne.n	57c2 <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
    57b8:	0953      	lsrs	r3, r2, #5
    57ba:	01db      	lsls	r3, r3, #7
    57bc:	496e      	ldr	r1, [pc, #440]	; (5978 <at25dfx_chip_write_buffer+0x2e8>)
    57be:	468c      	mov	ip, r1
    57c0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    57c2:	211f      	movs	r1, #31
    57c4:	4011      	ands	r1, r2
    57c6:	2201      	movs	r2, #1
    57c8:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    57ca:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    57cc:	682b      	ldr	r3, [r5, #0]
    57ce:	6819      	ldr	r1, [r3, #0]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    57d0:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    57d2:	7e0b      	ldrb	r3, [r1, #24]
    57d4:	4213      	tst	r3, r2
    57d6:	d0fc      	beq.n	57d2 <at25dfx_chip_write_buffer+0x142>
	port_pin_set_output_level(chip->cs_pin, false);
    57d8:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    57da:	09d1      	lsrs	r1, r2, #7
		return NULL;
    57dc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    57de:	2900      	cmp	r1, #0
    57e0:	d104      	bne.n	57ec <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
    57e2:	0953      	lsrs	r3, r2, #5
    57e4:	01db      	lsls	r3, r3, #7
    57e6:	4964      	ldr	r1, [pc, #400]	; (5978 <at25dfx_chip_write_buffer+0x2e8>)
    57e8:	468c      	mov	ip, r1
    57ea:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    57ec:	211f      	movs	r1, #31
    57ee:	4011      	ands	r1, r2
    57f0:	2201      	movs	r2, #1
    57f2:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    57f4:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    57f6:	682b      	ldr	r3, [r5, #0]
    57f8:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    57fa:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    57fc:	07d2      	lsls	r2, r2, #31
    57fe:	d501      	bpl.n	5804 <at25dfx_chip_write_buffer+0x174>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5800:	2205      	movs	r2, #5
    5802:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    5804:	6828      	ldr	r0, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5806:	6802      	ldr	r2, [r0, #0]
    5808:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    580a:	7e13      	ldrb	r3, [r2, #24]
    580c:	420b      	tst	r3, r1
    580e:	d0fc      	beq.n	580a <at25dfx_chip_write_buffer+0x17a>
    5810:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    5812:	2400      	movs	r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5814:	075b      	lsls	r3, r3, #29
    5816:	d509      	bpl.n	582c <at25dfx_chip_write_buffer+0x19c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5818:	8b53      	ldrh	r3, [r2, #26]
    581a:	075b      	lsls	r3, r3, #29
    581c:	d501      	bpl.n	5822 <at25dfx_chip_write_buffer+0x192>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    581e:	2304      	movs	r3, #4
    5820:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5822:	7983      	ldrb	r3, [r0, #6]
    5824:	2b01      	cmp	r3, #1
    5826:	d00e      	beq.n	5846 <at25dfx_chip_write_buffer+0x1b6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5828:	6a94      	ldr	r4, [r2, #40]	; 0x28
    582a:	b2e4      	uxtb	r4, r4

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    582c:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    582e:	2300      	movs	r3, #0
    5830:	4698      	mov	r8, r3
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    5832:	2004      	movs	r0, #4
    5834:	46b4      	mov	ip, r6
    5836:	002e      	movs	r6, r5
    5838:	e010      	b.n	585c <at25dfx_chip_write_buffer+0x1cc>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    583a:	4652      	mov	r2, sl
    583c:	9901      	ldr	r1, [sp, #4]
    583e:	6828      	ldr	r0, [r5, #0]
    5840:	4b4e      	ldr	r3, [pc, #312]	; (597c <at25dfx_chip_write_buffer+0x2ec>)
    5842:	4798      	blx	r3
    5844:	e7b3      	b.n	57ae <at25dfx_chip_write_buffer+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5846:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5848:	05db      	lsls	r3, r3, #23
    584a:	0ddc      	lsrs	r4, r3, #23
    584c:	e7ee      	b.n	582c <at25dfx_chip_write_buffer+0x19c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    584e:	79ab      	ldrb	r3, [r5, #6]
    5850:	2b01      	cmp	r3, #1
    5852:	d01a      	beq.n	588a <at25dfx_chip_write_buffer+0x1fa>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5854:	6a94      	ldr	r4, [r2, #40]	; 0x28
    5856:	b2e4      	uxtb	r4, r4
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    5858:	4221      	tst	r1, r4
    585a:	d01a      	beq.n	5892 <at25dfx_chip_write_buffer+0x202>
	SercomSpi *const spi_module = &(module->hw->SPI);
    585c:	6833      	ldr	r3, [r6, #0]
    585e:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5860:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    5862:	420b      	tst	r3, r1
    5864:	d0fc      	beq.n	5860 <at25dfx_chip_write_buffer+0x1d0>
    5866:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    5868:	420b      	tst	r3, r1
    586a:	d001      	beq.n	5870 <at25dfx_chip_write_buffer+0x1e0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    586c:	4643      	mov	r3, r8
    586e:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    5870:	6835      	ldr	r5, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5872:	682a      	ldr	r2, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5874:	7e13      	ldrb	r3, [r2, #24]
    5876:	4203      	tst	r3, r0
    5878:	d0fc      	beq.n	5874 <at25dfx_chip_write_buffer+0x1e4>
    587a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    587c:	4203      	tst	r3, r0
    587e:	d0eb      	beq.n	5858 <at25dfx_chip_write_buffer+0x1c8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5880:	8b53      	ldrh	r3, [r2, #26]
    5882:	4203      	tst	r3, r0
    5884:	d0e3      	beq.n	584e <at25dfx_chip_write_buffer+0x1be>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5886:	8350      	strh	r0, [r2, #26]
    5888:	e7e1      	b.n	584e <at25dfx_chip_write_buffer+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    588a:	6a94      	ldr	r4, [r2, #40]	; 0x28
    588c:	05e4      	lsls	r4, r4, #23
    588e:	0de4      	lsrs	r4, r4, #23
    5890:	e7e2      	b.n	5858 <at25dfx_chip_write_buffer+0x1c8>
    5892:	0035      	movs	r5, r6
    5894:	4666      	mov	r6, ip
	port_pin_set_output_level(chip->cs_pin, true);
    5896:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5898:	09d1      	lsrs	r1, r2, #7
		return NULL;
    589a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    589c:	2900      	cmp	r1, #0
    589e:	d104      	bne.n	58aa <at25dfx_chip_write_buffer+0x21a>
		return &(ports[port_index]->Group[group_index]);
    58a0:	0953      	lsrs	r3, r2, #5
    58a2:	01db      	lsls	r3, r3, #7
    58a4:	4934      	ldr	r1, [pc, #208]	; (5978 <at25dfx_chip_write_buffer+0x2e8>)
    58a6:	468c      	mov	ip, r1
    58a8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    58aa:	211f      	movs	r1, #31
    58ac:	4011      	ands	r1, r2
    58ae:	2201      	movs	r2, #1
    58b0:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    58b2:	619a      	str	r2, [r3, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
    58b4:	2010      	movs	r0, #16
	if (status_reg & AT25DFX_STATUS_ERROR) {
    58b6:	06a3      	lsls	r3, r4, #26
    58b8:	d44f      	bmi.n	595a <at25dfx_chip_write_buffer+0x2ca>
	length -= cmd.length;
    58ba:	4653      	mov	r3, sl
    58bc:	1aff      	subs	r7, r7, r3
    58be:	b2bb      	uxth	r3, r7
    58c0:	0019      	movs	r1, r3
	while (length && (status == STATUS_OK)) {
    58c2:	9a01      	ldr	r2, [sp, #4]
    58c4:	4691      	mov	r9, r2
	}
	return STATUS_OK;
    58c6:	2000      	movs	r0, #0
    58c8:	2b00      	cmp	r3, #0
    58ca:	d046      	beq.n	595a <at25dfx_chip_write_buffer+0x2ca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    58cc:	231f      	movs	r3, #31
    58ce:	469b      	mov	fp, r3
    58d0:	2401      	movs	r4, #1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    58d2:	4b2a      	ldr	r3, [pc, #168]	; (597c <at25dfx_chip_write_buffer+0x2ec>)
    58d4:	4698      	mov	r8, r3
    58d6:	4653      	mov	r3, sl
    58d8:	9301      	str	r3, [sp, #4]
    58da:	468a      	mov	sl, r1
    58dc:	e058      	b.n	5990 <at25dfx_chip_write_buffer+0x300>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    58de:	001a      	movs	r2, r3
    58e0:	4649      	mov	r1, r9
    58e2:	6828      	ldr	r0, [r5, #0]
    58e4:	4b25      	ldr	r3, [pc, #148]	; (597c <at25dfx_chip_write_buffer+0x2ec>)
    58e6:	4798      	blx	r3
    58e8:	e0a4      	b.n	5a34 <at25dfx_chip_write_buffer+0x3a4>
    58ea:	6a90      	ldr	r0, [r2, #40]	; 0x28
    58ec:	05c0      	lsls	r0, r0, #23
    58ee:	0dc0      	lsrs	r0, r0, #23
    58f0:	e0e1      	b.n	5ab6 <at25dfx_chip_write_buffer+0x426>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    58f2:	79bb      	ldrb	r3, [r7, #6]
    58f4:	2b01      	cmp	r3, #1
    58f6:	d01a      	beq.n	592e <at25dfx_chip_write_buffer+0x29e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    58f8:	6a90      	ldr	r0, [r2, #40]	; 0x28
    58fa:	b2c0      	uxtb	r0, r0
	} while (status_reg & AT25DFX_STATUS_BUSY);
    58fc:	4204      	tst	r4, r0
    58fe:	d01a      	beq.n	5936 <at25dfx_chip_write_buffer+0x2a6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5900:	682b      	ldr	r3, [r5, #0]
    5902:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5904:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    5906:	4223      	tst	r3, r4
    5908:	d0fc      	beq.n	5904 <at25dfx_chip_write_buffer+0x274>
    590a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    590c:	4223      	tst	r3, r4
    590e:	d001      	beq.n	5914 <at25dfx_chip_write_buffer+0x284>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5910:	2300      	movs	r3, #0
    5912:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    5914:	682f      	ldr	r7, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5916:	683a      	ldr	r2, [r7, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5918:	7e13      	ldrb	r3, [r2, #24]
    591a:	420b      	tst	r3, r1
    591c:	d0fc      	beq.n	5918 <at25dfx_chip_write_buffer+0x288>
    591e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    5920:	420b      	tst	r3, r1
    5922:	d0eb      	beq.n	58fc <at25dfx_chip_write_buffer+0x26c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5924:	8b53      	ldrh	r3, [r2, #26]
    5926:	420b      	tst	r3, r1
    5928:	d0e3      	beq.n	58f2 <at25dfx_chip_write_buffer+0x262>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    592a:	8351      	strh	r1, [r2, #26]
    592c:	e7e1      	b.n	58f2 <at25dfx_chip_write_buffer+0x262>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    592e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    5930:	05c0      	lsls	r0, r0, #23
    5932:	0dc0      	lsrs	r0, r0, #23
    5934:	e7e2      	b.n	58fc <at25dfx_chip_write_buffer+0x26c>
	port_pin_set_output_level(chip->cs_pin, true);
    5936:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5938:	09d9      	lsrs	r1, r3, #7
		return NULL;
    593a:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    593c:	2900      	cmp	r1, #0
    593e:	d104      	bne.n	594a <at25dfx_chip_write_buffer+0x2ba>
		return &(ports[port_index]->Group[group_index]);
    5940:	095a      	lsrs	r2, r3, #5
    5942:	01d2      	lsls	r2, r2, #7
    5944:	490c      	ldr	r1, [pc, #48]	; (5978 <at25dfx_chip_write_buffer+0x2e8>)
    5946:	468c      	mov	ip, r1
    5948:	4462      	add	r2, ip
    594a:	4659      	mov	r1, fp
    594c:	400b      	ands	r3, r1
    594e:	0021      	movs	r1, r4
    5950:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    5952:	6191      	str	r1, [r2, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    5954:	0683      	lsls	r3, r0, #26
    5956:	d513      	bpl.n	5980 <at25dfx_chip_write_buffer+0x2f0>
		return STATUS_ERR_IO;
    5958:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
    595a:	682b      	ldr	r3, [r5, #0]
	module->locked = false;
    595c:	2200      	movs	r2, #0
    595e:	711a      	strb	r2, [r3, #4]
	return status;
    5960:	e6c2      	b.n	56e8 <at25dfx_chip_write_buffer+0x58>
    5962:	4b04      	ldr	r3, [pc, #16]	; (5974 <at25dfx_chip_write_buffer+0x2e4>)
    5964:	4798      	blx	r3
		return status;
    5966:	2005      	movs	r0, #5
    5968:	e6be      	b.n	56e8 <at25dfx_chip_write_buffer+0x58>
    596a:	46c0      	nop			; (mov r8, r8)
    596c:	00014a50 	.word	0x00014a50
    5970:	0000dc1d 	.word	0x0000dc1d
    5974:	0000dc5d 	.word	0x0000dc5d
    5978:	41004400 	.word	0x41004400
    597c:	0000cff5 	.word	0x0000cff5
		length -= cmd.length;
    5980:	4653      	mov	r3, sl
    5982:	9a01      	ldr	r2, [sp, #4]
    5984:	1a9b      	subs	r3, r3, r2
    5986:	b29b      	uxth	r3, r3
    5988:	469a      	mov	sl, r3
	while (length && (status == STATUS_OK)) {
    598a:	2b00      	cmp	r3, #0
    598c:	d100      	bne.n	5990 <at25dfx_chip_write_buffer+0x300>
    598e:	e094      	b.n	5aba <at25dfx_chip_write_buffer+0x42a>
	cmd_buffer[0] = cmd.opcode;
    5990:	ab02      	add	r3, sp, #8
    5992:	2206      	movs	r2, #6
    5994:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5996:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5998:	09d9      	lsrs	r1, r3, #7
		return NULL;
    599a:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    599c:	2900      	cmp	r1, #0
    599e:	d104      	bne.n	59aa <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
    59a0:	095a      	lsrs	r2, r3, #5
    59a2:	01d2      	lsls	r2, r2, #7
    59a4:	4946      	ldr	r1, [pc, #280]	; (5ac0 <at25dfx_chip_write_buffer+0x430>)
    59a6:	468c      	mov	ip, r1
    59a8:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    59aa:	4659      	mov	r1, fp
    59ac:	400b      	ands	r3, r1
    59ae:	0021      	movs	r1, r4
    59b0:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    59b2:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    59b4:	0022      	movs	r2, r4
    59b6:	a902      	add	r1, sp, #8
    59b8:	6828      	ldr	r0, [r5, #0]
    59ba:	47c0      	blx	r8
	port_pin_set_output_level(chip->cs_pin, true);
    59bc:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    59be:	09d9      	lsrs	r1, r3, #7
		return NULL;
    59c0:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    59c2:	2900      	cmp	r1, #0
    59c4:	d104      	bne.n	59d0 <at25dfx_chip_write_buffer+0x340>
		return &(ports[port_index]->Group[group_index]);
    59c6:	095a      	lsrs	r2, r3, #5
    59c8:	01d2      	lsls	r2, r2, #7
    59ca:	493d      	ldr	r1, [pc, #244]	; (5ac0 <at25dfx_chip_write_buffer+0x430>)
    59cc:	468c      	mov	ip, r1
    59ce:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    59d0:	4659      	mov	r1, fp
    59d2:	400b      	ands	r3, r1
    59d4:	0021      	movs	r1, r4
    59d6:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    59d8:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
    59da:	9a01      	ldr	r2, [sp, #4]
    59dc:	4694      	mov	ip, r2
    59de:	4466      	add	r6, ip
		cmd.data.tx += cmd.length;
    59e0:	44e1      	add	r9, ip
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    59e2:	4657      	mov	r7, sl
    59e4:	2380      	movs	r3, #128	; 0x80
    59e6:	005b      	lsls	r3, r3, #1
    59e8:	459a      	cmp	sl, r3
    59ea:	d901      	bls.n	59f0 <at25dfx_chip_write_buffer+0x360>
    59ec:	4b35      	ldr	r3, [pc, #212]	; (5ac4 <at25dfx_chip_write_buffer+0x434>)
    59ee:	881f      	ldrh	r7, [r3, #0]
    59f0:	b2bb      	uxth	r3, r7
    59f2:	9301      	str	r3, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
    59f4:	2302      	movs	r3, #2
    59f6:	aa02      	add	r2, sp, #8
    59f8:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    59fa:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    59fc:	0a33      	lsrs	r3, r6, #8
    59fe:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    5a00:	0c33      	lsrs	r3, r6, #16
    5a02:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    5a04:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5a06:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5a08:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5a0a:	2900      	cmp	r1, #0
    5a0c:	d104      	bne.n	5a18 <at25dfx_chip_write_buffer+0x388>
		return &(ports[port_index]->Group[group_index]);
    5a0e:	095a      	lsrs	r2, r3, #5
    5a10:	01d2      	lsls	r2, r2, #7
    5a12:	492b      	ldr	r1, [pc, #172]	; (5ac0 <at25dfx_chip_write_buffer+0x430>)
    5a14:	468c      	mov	ip, r1
    5a16:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5a18:	4659      	mov	r1, fp
    5a1a:	400b      	ands	r3, r1
    5a1c:	0021      	movs	r1, r4
    5a1e:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    5a20:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5a22:	2204      	movs	r2, #4
    5a24:	a902      	add	r1, sp, #8
    5a26:	6828      	ldr	r0, [r5, #0]
    5a28:	4b27      	ldr	r3, [pc, #156]	; (5ac8 <at25dfx_chip_write_buffer+0x438>)
    5a2a:	4798      	blx	r3
	if (cmd.length) {
    5a2c:	9b01      	ldr	r3, [sp, #4]
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d000      	beq.n	5a34 <at25dfx_chip_write_buffer+0x3a4>
    5a32:	e754      	b.n	58de <at25dfx_chip_write_buffer+0x24e>
	port_pin_set_output_level(chip->cs_pin, true);
    5a34:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5a36:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5a38:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5a3a:	2900      	cmp	r1, #0
    5a3c:	d104      	bne.n	5a48 <at25dfx_chip_write_buffer+0x3b8>
		return &(ports[port_index]->Group[group_index]);
    5a3e:	095a      	lsrs	r2, r3, #5
    5a40:	01d2      	lsls	r2, r2, #7
    5a42:	491f      	ldr	r1, [pc, #124]	; (5ac0 <at25dfx_chip_write_buffer+0x430>)
    5a44:	468c      	mov	ip, r1
    5a46:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5a48:	4659      	mov	r1, fp
    5a4a:	400b      	ands	r3, r1
    5a4c:	0021      	movs	r1, r4
    5a4e:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    5a50:	6191      	str	r1, [r2, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a52:	682b      	ldr	r3, [r5, #0]
    5a54:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5a56:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
    5a58:	4223      	tst	r3, r4
    5a5a:	d0fc      	beq.n	5a56 <at25dfx_chip_write_buffer+0x3c6>
	port_pin_set_output_level(chip->cs_pin, false);
    5a5c:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    5a5e:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5a60:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5a62:	2900      	cmp	r1, #0
    5a64:	d104      	bne.n	5a70 <at25dfx_chip_write_buffer+0x3e0>
		return &(ports[port_index]->Group[group_index]);
    5a66:	095a      	lsrs	r2, r3, #5
    5a68:	01d2      	lsls	r2, r2, #7
    5a6a:	4915      	ldr	r1, [pc, #84]	; (5ac0 <at25dfx_chip_write_buffer+0x430>)
    5a6c:	468c      	mov	ip, r1
    5a6e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5a70:	4659      	mov	r1, fp
    5a72:	400b      	ands	r3, r1
    5a74:	0021      	movs	r1, r4
    5a76:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    5a78:	6151      	str	r1, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a7a:	682b      	ldr	r3, [r5, #0]
    5a7c:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5a7e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5a80:	4222      	tst	r2, r4
    5a82:	d001      	beq.n	5a88 <at25dfx_chip_write_buffer+0x3f8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5a84:	2205      	movs	r2, #5
    5a86:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    5a88:	682b      	ldr	r3, [r5, #0]
    5a8a:	469c      	mov	ip, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a8c:	681a      	ldr	r2, [r3, #0]
    5a8e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5a90:	7e13      	ldrb	r3, [r2, #24]
    5a92:	420b      	tst	r3, r1
    5a94:	d0fc      	beq.n	5a90 <at25dfx_chip_write_buffer+0x400>
    5a96:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    5a98:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    5a9a:	075b      	lsls	r3, r3, #29
    5a9c:	d50b      	bpl.n	5ab6 <at25dfx_chip_write_buffer+0x426>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5a9e:	8b53      	ldrh	r3, [r2, #26]
    5aa0:	075b      	lsls	r3, r3, #29
    5aa2:	d501      	bpl.n	5aa8 <at25dfx_chip_write_buffer+0x418>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5aa4:	2304      	movs	r3, #4
    5aa6:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5aa8:	4663      	mov	r3, ip
    5aaa:	799b      	ldrb	r3, [r3, #6]
    5aac:	2b01      	cmp	r3, #1
    5aae:	d100      	bne.n	5ab2 <at25dfx_chip_write_buffer+0x422>
    5ab0:	e71b      	b.n	58ea <at25dfx_chip_write_buffer+0x25a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5ab2:	6a90      	ldr	r0, [r2, #40]	; 0x28
    5ab4:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_read(chip->spi)) {
    5ab6:	2104      	movs	r1, #4
    5ab8:	e722      	b.n	5900 <at25dfx_chip_write_buffer+0x270>
	return STATUS_OK;
    5aba:	2000      	movs	r0, #0
    5abc:	e74d      	b.n	595a <at25dfx_chip_write_buffer+0x2ca>
    5abe:	46c0      	nop			; (mov r8, r8)
    5ac0:	41004400 	.word	0x41004400
    5ac4:	00014a4c 	.word	0x00014a4c
    5ac8:	0000cff5 	.word	0x0000cff5

00005acc <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    5acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ace:	b083      	sub	sp, #12
    5ad0:	0004      	movs	r4, r0
    5ad2:	000e      	movs	r6, r1
    5ad4:	0015      	movs	r5, r2
	switch (type) {
    5ad6:	7903      	ldrb	r3, [r0, #4]
    5ad8:	2b09      	cmp	r3, #9
    5ada:	d900      	bls.n	5ade <at25dfx_chip_erase_block+0x12>
    5adc:	e0f2      	b.n	5cc4 <at25dfx_chip_erase_block+0x1f8>
    5ade:	009b      	lsls	r3, r3, #2
    5ae0:	4a7b      	ldr	r2, [pc, #492]	; (5cd0 <at25dfx_chip_erase_block+0x204>)
    5ae2:	58d3      	ldr	r3, [r2, r3]
    5ae4:	469f      	mov	pc, r3
		return 256 * 1024UL;
    5ae6:	2380      	movs	r3, #128	; 0x80
    5ae8:	02db      	lsls	r3, r3, #11
    5aea:	e010      	b.n	5b0e <at25dfx_chip_erase_block+0x42>
		return 512 * 1024UL;
    5aec:	2380      	movs	r3, #128	; 0x80
    5aee:	031b      	lsls	r3, r3, #12
    5af0:	e00d      	b.n	5b0e <at25dfx_chip_erase_block+0x42>
		return 1024 * 1024UL;
    5af2:	2380      	movs	r3, #128	; 0x80
    5af4:	035b      	lsls	r3, r3, #13
    5af6:	e00a      	b.n	5b0e <at25dfx_chip_erase_block+0x42>
		return 2048 * 1024UL;
    5af8:	2380      	movs	r3, #128	; 0x80
    5afa:	039b      	lsls	r3, r3, #14
    5afc:	e007      	b.n	5b0e <at25dfx_chip_erase_block+0x42>
		return 4096 * 1024UL;
    5afe:	2380      	movs	r3, #128	; 0x80
    5b00:	03db      	lsls	r3, r3, #15
    5b02:	e004      	b.n	5b0e <at25dfx_chip_erase_block+0x42>
		return 8192 * 1024UL;
    5b04:	2380      	movs	r3, #128	; 0x80
    5b06:	041b      	lsls	r3, r3, #16
    5b08:	e001      	b.n	5b0e <at25dfx_chip_erase_block+0x42>
		return 64 * 1024UL;
    5b0a:	2380      	movs	r3, #128	; 0x80
    5b0c:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
    5b0e:	2017      	movs	r0, #23
	if (address >= _at25dfx_get_device_size(chip->type)) {
    5b10:	42b3      	cmp	r3, r6
    5b12:	d801      	bhi.n	5b18 <at25dfx_chip_erase_block+0x4c>
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    5b14:	b003      	add	sp, #12
    5b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    5b18:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
    5b1a:	4b6e      	ldr	r3, [pc, #440]	; (5cd4 <at25dfx_chip_erase_block+0x208>)
    5b1c:	4798      	blx	r3
	if (module->locked) {
    5b1e:	793b      	ldrb	r3, [r7, #4]
    5b20:	2b00      	cmp	r3, #0
    5b22:	d000      	beq.n	5b26 <at25dfx_chip_erase_block+0x5a>
    5b24:	e0d0      	b.n	5cc8 <at25dfx_chip_erase_block+0x1fc>
		module->locked = true;
    5b26:	3301      	adds	r3, #1
    5b28:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
    5b2a:	4b6b      	ldr	r3, [pc, #428]	; (5cd8 <at25dfx_chip_erase_block+0x20c>)
    5b2c:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    5b2e:	2306      	movs	r3, #6
    5b30:	466a      	mov	r2, sp
    5b32:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5b34:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5b36:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5b38:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b3a:	2900      	cmp	r1, #0
    5b3c:	d104      	bne.n	5b48 <at25dfx_chip_erase_block+0x7c>
		return &(ports[port_index]->Group[group_index]);
    5b3e:	0953      	lsrs	r3, r2, #5
    5b40:	01db      	lsls	r3, r3, #7
    5b42:	4966      	ldr	r1, [pc, #408]	; (5cdc <at25dfx_chip_erase_block+0x210>)
    5b44:	468c      	mov	ip, r1
    5b46:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b48:	211f      	movs	r1, #31
    5b4a:	4011      	ands	r1, r2
    5b4c:	2201      	movs	r2, #1
    5b4e:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5b50:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5b52:	2201      	movs	r2, #1
    5b54:	4669      	mov	r1, sp
    5b56:	6820      	ldr	r0, [r4, #0]
    5b58:	4b61      	ldr	r3, [pc, #388]	; (5ce0 <at25dfx_chip_erase_block+0x214>)
    5b5a:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    5b5c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5b5e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5b60:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b62:	2900      	cmp	r1, #0
    5b64:	d104      	bne.n	5b70 <at25dfx_chip_erase_block+0xa4>
		return &(ports[port_index]->Group[group_index]);
    5b66:	0953      	lsrs	r3, r2, #5
    5b68:	01db      	lsls	r3, r3, #7
    5b6a:	495c      	ldr	r1, [pc, #368]	; (5cdc <at25dfx_chip_erase_block+0x210>)
    5b6c:	468c      	mov	ip, r1
    5b6e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b70:	211f      	movs	r1, #31
    5b72:	4011      	ands	r1, r2
    5b74:	2201      	movs	r2, #1
    5b76:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5b78:	619a      	str	r2, [r3, #24]
	switch (block_size) {
    5b7a:	2d01      	cmp	r5, #1
    5b7c:	d006      	beq.n	5b8c <at25dfx_chip_erase_block+0xc0>
    5b7e:	2d00      	cmp	r5, #0
    5b80:	d063      	beq.n	5c4a <at25dfx_chip_erase_block+0x17e>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    5b82:	23d8      	movs	r3, #216	; 0xd8
	switch (block_size) {
    5b84:	2d02      	cmp	r5, #2
    5b86:	d002      	beq.n	5b8e <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = (enum at25dfx_command_opcode)0;
    5b88:	2300      	movs	r3, #0
    5b8a:	e000      	b.n	5b8e <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    5b8c:	2352      	movs	r3, #82	; 0x52
	cmd_buffer[0] = cmd.opcode;
    5b8e:	466a      	mov	r2, sp
    5b90:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    5b92:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    5b94:	0a33      	lsrs	r3, r6, #8
    5b96:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    5b98:	0c36      	lsrs	r6, r6, #16
    5b9a:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    5b9c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5b9e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5ba0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5ba2:	2900      	cmp	r1, #0
    5ba4:	d104      	bne.n	5bb0 <at25dfx_chip_erase_block+0xe4>
		return &(ports[port_index]->Group[group_index]);
    5ba6:	0953      	lsrs	r3, r2, #5
    5ba8:	01db      	lsls	r3, r3, #7
    5baa:	494c      	ldr	r1, [pc, #304]	; (5cdc <at25dfx_chip_erase_block+0x210>)
    5bac:	468c      	mov	ip, r1
    5bae:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5bb0:	211f      	movs	r1, #31
    5bb2:	4011      	ands	r1, r2
    5bb4:	2201      	movs	r2, #1
    5bb6:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5bb8:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5bba:	2204      	movs	r2, #4
    5bbc:	4669      	mov	r1, sp
    5bbe:	6820      	ldr	r0, [r4, #0]
    5bc0:	4b47      	ldr	r3, [pc, #284]	; (5ce0 <at25dfx_chip_erase_block+0x214>)
    5bc2:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    5bc4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5bc6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5bc8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5bca:	2900      	cmp	r1, #0
    5bcc:	d104      	bne.n	5bd8 <at25dfx_chip_erase_block+0x10c>
		return &(ports[port_index]->Group[group_index]);
    5bce:	0953      	lsrs	r3, r2, #5
    5bd0:	01db      	lsls	r3, r3, #7
    5bd2:	4942      	ldr	r1, [pc, #264]	; (5cdc <at25dfx_chip_erase_block+0x210>)
    5bd4:	468c      	mov	ip, r1
    5bd6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5bd8:	211f      	movs	r1, #31
    5bda:	4011      	ands	r1, r2
    5bdc:	2201      	movs	r2, #1
    5bde:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5be0:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5be2:	6823      	ldr	r3, [r4, #0]
    5be4:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
    5be6:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5be8:	7e0b      	ldrb	r3, [r1, #24]
    5bea:	4213      	tst	r3, r2
    5bec:	d0fc      	beq.n	5be8 <at25dfx_chip_erase_block+0x11c>
	port_pin_set_output_level(chip->cs_pin, false);
    5bee:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5bf0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5bf2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5bf4:	2900      	cmp	r1, #0
    5bf6:	d104      	bne.n	5c02 <at25dfx_chip_erase_block+0x136>
		return &(ports[port_index]->Group[group_index]);
    5bf8:	0953      	lsrs	r3, r2, #5
    5bfa:	01db      	lsls	r3, r3, #7
    5bfc:	4937      	ldr	r1, [pc, #220]	; (5cdc <at25dfx_chip_erase_block+0x210>)
    5bfe:	468c      	mov	ip, r1
    5c00:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c02:	211f      	movs	r1, #31
    5c04:	4011      	ands	r1, r2
    5c06:	2201      	movs	r2, #1
    5c08:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5c0a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c0c:	6823      	ldr	r3, [r4, #0]
    5c0e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5c10:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5c12:	07d2      	lsls	r2, r2, #31
    5c14:	d501      	bpl.n	5c1a <at25dfx_chip_erase_block+0x14e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5c16:	2205      	movs	r2, #5
    5c18:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    5c1a:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c1c:	6802      	ldr	r2, [r0, #0]
    5c1e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5c20:	7e13      	ldrb	r3, [r2, #24]
    5c22:	420b      	tst	r3, r1
    5c24:	d0fc      	beq.n	5c20 <at25dfx_chip_erase_block+0x154>
    5c26:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    5c28:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    5c2a:	075b      	lsls	r3, r3, #29
    5c2c:	d509      	bpl.n	5c42 <at25dfx_chip_erase_block+0x176>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5c2e:	8b53      	ldrh	r3, [r2, #26]
    5c30:	075b      	lsls	r3, r3, #29
    5c32:	d501      	bpl.n	5c38 <at25dfx_chip_erase_block+0x16c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5c34:	2304      	movs	r3, #4
    5c36:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5c38:	7983      	ldrb	r3, [r0, #6]
    5c3a:	2b01      	cmp	r3, #1
    5c3c:	d007      	beq.n	5c4e <at25dfx_chip_erase_block+0x182>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5c3e:	6a95      	ldr	r5, [r2, #40]	; 0x28
    5c40:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
    5c42:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5c44:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
    5c46:	2004      	movs	r0, #4
    5c48:	e00c      	b.n	5c64 <at25dfx_chip_erase_block+0x198>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    5c4a:	2320      	movs	r3, #32
    5c4c:	e79f      	b.n	5b8e <at25dfx_chip_erase_block+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5c4e:	6a95      	ldr	r5, [r2, #40]	; 0x28
    5c50:	05ed      	lsls	r5, r5, #23
    5c52:	0ded      	lsrs	r5, r5, #23
    5c54:	e7f5      	b.n	5c42 <at25dfx_chip_erase_block+0x176>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5c56:	79b3      	ldrb	r3, [r6, #6]
    5c58:	2b01      	cmp	r3, #1
    5c5a:	d019      	beq.n	5c90 <at25dfx_chip_erase_block+0x1c4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5c5c:	6a95      	ldr	r5, [r2, #40]	; 0x28
    5c5e:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
    5c60:	4229      	tst	r1, r5
    5c62:	d019      	beq.n	5c98 <at25dfx_chip_erase_block+0x1cc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c64:	6823      	ldr	r3, [r4, #0]
    5c66:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5c68:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    5c6a:	420b      	tst	r3, r1
    5c6c:	d0fc      	beq.n	5c68 <at25dfx_chip_erase_block+0x19c>
    5c6e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    5c70:	420b      	tst	r3, r1
    5c72:	d000      	beq.n	5c76 <at25dfx_chip_erase_block+0x1aa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5c74:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    5c76:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c78:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5c7a:	7e13      	ldrb	r3, [r2, #24]
    5c7c:	4203      	tst	r3, r0
    5c7e:	d0fc      	beq.n	5c7a <at25dfx_chip_erase_block+0x1ae>
    5c80:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    5c82:	4203      	tst	r3, r0
    5c84:	d0ec      	beq.n	5c60 <at25dfx_chip_erase_block+0x194>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5c86:	8b53      	ldrh	r3, [r2, #26]
    5c88:	4203      	tst	r3, r0
    5c8a:	d0e4      	beq.n	5c56 <at25dfx_chip_erase_block+0x18a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5c8c:	8350      	strh	r0, [r2, #26]
    5c8e:	e7e2      	b.n	5c56 <at25dfx_chip_erase_block+0x18a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5c90:	6a95      	ldr	r5, [r2, #40]	; 0x28
    5c92:	05ed      	lsls	r5, r5, #23
    5c94:	0ded      	lsrs	r5, r5, #23
    5c96:	e7e3      	b.n	5c60 <at25dfx_chip_erase_block+0x194>
	port_pin_set_output_level(chip->cs_pin, true);
    5c98:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5c9a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5c9c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c9e:	2900      	cmp	r1, #0
    5ca0:	d104      	bne.n	5cac <at25dfx_chip_erase_block+0x1e0>
		return &(ports[port_index]->Group[group_index]);
    5ca2:	0953      	lsrs	r3, r2, #5
    5ca4:	01db      	lsls	r3, r3, #7
    5ca6:	490d      	ldr	r1, [pc, #52]	; (5cdc <at25dfx_chip_erase_block+0x210>)
    5ca8:	468c      	mov	ip, r1
    5caa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5cac:	211f      	movs	r1, #31
    5cae:	4011      	ands	r1, r2
    5cb0:	2201      	movs	r2, #1
    5cb2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5cb4:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    5cb6:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
    5cb8:	0fc0      	lsrs	r0, r0, #31
    5cba:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
    5cbc:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    5cbe:	2200      	movs	r2, #0
    5cc0:	711a      	strb	r2, [r3, #4]
	return status;
    5cc2:	e727      	b.n	5b14 <at25dfx_chip_erase_block+0x48>
		return STATUS_ERR_INVALID_ARG;
    5cc4:	2017      	movs	r0, #23
    5cc6:	e725      	b.n	5b14 <at25dfx_chip_erase_block+0x48>
    5cc8:	4b03      	ldr	r3, [pc, #12]	; (5cd8 <at25dfx_chip_erase_block+0x20c>)
    5cca:	4798      	blx	r3
		return status;
    5ccc:	2005      	movs	r0, #5
    5cce:	e721      	b.n	5b14 <at25dfx_chip_erase_block+0x48>
    5cd0:	00014a78 	.word	0x00014a78
    5cd4:	0000dc1d 	.word	0x0000dc1d
    5cd8:	0000dc5d 	.word	0x0000dc5d
    5cdc:	41004400 	.word	0x41004400
    5ce0:	0000cff5 	.word	0x0000cff5

00005ce4 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    5ce4:	b570      	push	{r4, r5, r6, lr}
    5ce6:	b082      	sub	sp, #8
    5ce8:	0004      	movs	r4, r0
    5cea:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    5cec:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
    5cee:	4b35      	ldr	r3, [pc, #212]	; (5dc4 <at25dfx_chip_set_global_sector_protect+0xe0>)
    5cf0:	4798      	blx	r3
	if (module->locked) {
    5cf2:	7933      	ldrb	r3, [r6, #4]
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	d160      	bne.n	5dba <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
    5cf8:	3301      	adds	r3, #1
    5cfa:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
    5cfc:	4b32      	ldr	r3, [pc, #200]	; (5dc8 <at25dfx_chip_set_global_sector_protect+0xe4>)
    5cfe:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    5d00:	2306      	movs	r3, #6
    5d02:	466a      	mov	r2, sp
    5d04:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5d06:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5d08:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5d0a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5d0c:	2900      	cmp	r1, #0
    5d0e:	d104      	bne.n	5d1a <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
    5d10:	0953      	lsrs	r3, r2, #5
    5d12:	01db      	lsls	r3, r3, #7
    5d14:	492d      	ldr	r1, [pc, #180]	; (5dcc <at25dfx_chip_set_global_sector_protect+0xe8>)
    5d16:	468c      	mov	ip, r1
    5d18:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5d1a:	211f      	movs	r1, #31
    5d1c:	4011      	ands	r1, r2
    5d1e:	2201      	movs	r2, #1
    5d20:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5d22:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5d24:	2201      	movs	r2, #1
    5d26:	4669      	mov	r1, sp
    5d28:	6820      	ldr	r0, [r4, #0]
    5d2a:	4b29      	ldr	r3, [pc, #164]	; (5dd0 <at25dfx_chip_set_global_sector_protect+0xec>)
    5d2c:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    5d2e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5d30:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5d32:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5d34:	2900      	cmp	r1, #0
    5d36:	d104      	bne.n	5d42 <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5d38:	0953      	lsrs	r3, r2, #5
    5d3a:	01db      	lsls	r3, r3, #7
    5d3c:	4923      	ldr	r1, [pc, #140]	; (5dcc <at25dfx_chip_set_global_sector_protect+0xe8>)
    5d3e:	468c      	mov	ip, r1
    5d40:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5d42:	211f      	movs	r1, #31
    5d44:	4011      	ands	r1, r2
    5d46:	2201      	movs	r2, #1
    5d48:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5d4a:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    5d4c:	233c      	movs	r3, #60	; 0x3c
    5d4e:	1e6a      	subs	r2, r5, #1
    5d50:	4195      	sbcs	r5, r2
    5d52:	426d      	negs	r5, r5
    5d54:	402b      	ands	r3, r5
    5d56:	466a      	mov	r2, sp
    5d58:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
    5d5a:	2301      	movs	r3, #1
    5d5c:	466a      	mov	r2, sp
    5d5e:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5d60:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5d62:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5d64:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5d66:	2900      	cmp	r1, #0
    5d68:	d104      	bne.n	5d74 <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
    5d6a:	0953      	lsrs	r3, r2, #5
    5d6c:	01db      	lsls	r3, r3, #7
    5d6e:	4917      	ldr	r1, [pc, #92]	; (5dcc <at25dfx_chip_set_global_sector_protect+0xe8>)
    5d70:	468c      	mov	ip, r1
    5d72:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5d74:	211f      	movs	r1, #31
    5d76:	4011      	ands	r1, r2
    5d78:	2201      	movs	r2, #1
    5d7a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5d7c:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5d7e:	2201      	movs	r2, #1
    5d80:	4669      	mov	r1, sp
    5d82:	6820      	ldr	r0, [r4, #0]
    5d84:	4d12      	ldr	r5, [pc, #72]	; (5dd0 <at25dfx_chip_set_global_sector_protect+0xec>)
    5d86:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    5d88:	2201      	movs	r2, #1
    5d8a:	466b      	mov	r3, sp
    5d8c:	1dd9      	adds	r1, r3, #7
    5d8e:	6820      	ldr	r0, [r4, #0]
    5d90:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    5d92:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5d94:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5d96:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5d98:	2900      	cmp	r1, #0
    5d9a:	d104      	bne.n	5da6 <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
    5d9c:	0953      	lsrs	r3, r2, #5
    5d9e:	01db      	lsls	r3, r3, #7
    5da0:	490a      	ldr	r1, [pc, #40]	; (5dcc <at25dfx_chip_set_global_sector_protect+0xe8>)
    5da2:	468c      	mov	ip, r1
    5da4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5da6:	211f      	movs	r1, #31
    5da8:	4011      	ands	r1, r2
    5daa:	2201      	movs	r2, #1
    5dac:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5dae:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    5db0:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    5db2:	2200      	movs	r2, #0
    5db4:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    5db6:	2000      	movs	r0, #0
    5db8:	e002      	b.n	5dc0 <at25dfx_chip_set_global_sector_protect+0xdc>
    5dba:	4b03      	ldr	r3, [pc, #12]	; (5dc8 <at25dfx_chip_set_global_sector_protect+0xe4>)
    5dbc:	4798      	blx	r3
		return status;
    5dbe:	2005      	movs	r0, #5
}
    5dc0:	b002      	add	sp, #8
    5dc2:	bd70      	pop	{r4, r5, r6, pc}
    5dc4:	0000dc1d 	.word	0x0000dc1d
    5dc8:	0000dc5d 	.word	0x0000dc5d
    5dcc:	41004400 	.word	0x41004400
    5dd0:	0000cff5 	.word	0x0000cff5

00005dd4 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    5dd4:	b530      	push	{r4, r5, lr}
    5dd6:	b083      	sub	sp, #12
    5dd8:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    5dda:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    5ddc:	4b1c      	ldr	r3, [pc, #112]	; (5e50 <at25dfx_chip_sleep+0x7c>)
    5dde:	4798      	blx	r3
	if (module->locked) {
    5de0:	792b      	ldrb	r3, [r5, #4]
    5de2:	2b00      	cmp	r3, #0
    5de4:	d12e      	bne.n	5e44 <at25dfx_chip_sleep+0x70>
		module->locked = true;
    5de6:	3301      	adds	r3, #1
    5de8:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    5dea:	4b1a      	ldr	r3, [pc, #104]	; (5e54 <at25dfx_chip_sleep+0x80>)
    5dec:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    5dee:	23b9      	movs	r3, #185	; 0xb9
    5df0:	466a      	mov	r2, sp
    5df2:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5df4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5df6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5df8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5dfa:	2900      	cmp	r1, #0
    5dfc:	d104      	bne.n	5e08 <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
    5dfe:	0953      	lsrs	r3, r2, #5
    5e00:	01db      	lsls	r3, r3, #7
    5e02:	4915      	ldr	r1, [pc, #84]	; (5e58 <at25dfx_chip_sleep+0x84>)
    5e04:	468c      	mov	ip, r1
    5e06:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5e08:	211f      	movs	r1, #31
    5e0a:	4011      	ands	r1, r2
    5e0c:	2201      	movs	r2, #1
    5e0e:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5e10:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5e12:	2201      	movs	r2, #1
    5e14:	4669      	mov	r1, sp
    5e16:	6820      	ldr	r0, [r4, #0]
    5e18:	4b10      	ldr	r3, [pc, #64]	; (5e5c <at25dfx_chip_sleep+0x88>)
    5e1a:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    5e1c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5e1e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5e20:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5e22:	2900      	cmp	r1, #0
    5e24:	d104      	bne.n	5e30 <at25dfx_chip_sleep+0x5c>
		return &(ports[port_index]->Group[group_index]);
    5e26:	0953      	lsrs	r3, r2, #5
    5e28:	01db      	lsls	r3, r3, #7
    5e2a:	490b      	ldr	r1, [pc, #44]	; (5e58 <at25dfx_chip_sleep+0x84>)
    5e2c:	468c      	mov	ip, r1
    5e2e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5e30:	211f      	movs	r1, #31
    5e32:	4011      	ands	r1, r2
    5e34:	2201      	movs	r2, #1
    5e36:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5e38:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    5e3a:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    5e3c:	2200      	movs	r2, #0
    5e3e:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    5e40:	2000      	movs	r0, #0
    5e42:	e002      	b.n	5e4a <at25dfx_chip_sleep+0x76>
    5e44:	4b03      	ldr	r3, [pc, #12]	; (5e54 <at25dfx_chip_sleep+0x80>)
    5e46:	4798      	blx	r3
		return status;
    5e48:	2005      	movs	r0, #5
}
    5e4a:	b003      	add	sp, #12
    5e4c:	bd30      	pop	{r4, r5, pc}
    5e4e:	46c0      	nop			; (mov r8, r8)
    5e50:	0000dc1d 	.word	0x0000dc1d
    5e54:	0000dc5d 	.word	0x0000dc5d
    5e58:	41004400 	.word	0x41004400
    5e5c:	0000cff5 	.word	0x0000cff5

00005e60 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    5e60:	b530      	push	{r4, r5, lr}
    5e62:	b083      	sub	sp, #12
    5e64:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    5e66:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    5e68:	4b1c      	ldr	r3, [pc, #112]	; (5edc <at25dfx_chip_wake+0x7c>)
    5e6a:	4798      	blx	r3
	if (module->locked) {
    5e6c:	792b      	ldrb	r3, [r5, #4]
    5e6e:	2b00      	cmp	r3, #0
    5e70:	d12e      	bne.n	5ed0 <at25dfx_chip_wake+0x70>
		module->locked = true;
    5e72:	3301      	adds	r3, #1
    5e74:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    5e76:	4b1a      	ldr	r3, [pc, #104]	; (5ee0 <at25dfx_chip_wake+0x80>)
    5e78:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    5e7a:	23ab      	movs	r3, #171	; 0xab
    5e7c:	466a      	mov	r2, sp
    5e7e:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5e80:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5e82:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5e84:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5e86:	2900      	cmp	r1, #0
    5e88:	d104      	bne.n	5e94 <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
    5e8a:	0953      	lsrs	r3, r2, #5
    5e8c:	01db      	lsls	r3, r3, #7
    5e8e:	4915      	ldr	r1, [pc, #84]	; (5ee4 <at25dfx_chip_wake+0x84>)
    5e90:	468c      	mov	ip, r1
    5e92:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5e94:	211f      	movs	r1, #31
    5e96:	4011      	ands	r1, r2
    5e98:	2201      	movs	r2, #1
    5e9a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5e9c:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    5e9e:	2201      	movs	r2, #1
    5ea0:	4669      	mov	r1, sp
    5ea2:	6820      	ldr	r0, [r4, #0]
    5ea4:	4b10      	ldr	r3, [pc, #64]	; (5ee8 <at25dfx_chip_wake+0x88>)
    5ea6:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    5ea8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5eaa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5eac:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5eae:	2900      	cmp	r1, #0
    5eb0:	d104      	bne.n	5ebc <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
    5eb2:	0953      	lsrs	r3, r2, #5
    5eb4:	01db      	lsls	r3, r3, #7
    5eb6:	490b      	ldr	r1, [pc, #44]	; (5ee4 <at25dfx_chip_wake+0x84>)
    5eb8:	468c      	mov	ip, r1
    5eba:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ebc:	211f      	movs	r1, #31
    5ebe:	4011      	ands	r1, r2
    5ec0:	2201      	movs	r2, #1
    5ec2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5ec4:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    5ec6:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    5ec8:	2200      	movs	r2, #0
    5eca:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    5ecc:	2000      	movs	r0, #0
    5ece:	e002      	b.n	5ed6 <at25dfx_chip_wake+0x76>
    5ed0:	4b03      	ldr	r3, [pc, #12]	; (5ee0 <at25dfx_chip_wake+0x80>)
    5ed2:	4798      	blx	r3
		return status;
    5ed4:	2005      	movs	r0, #5
    5ed6:	b003      	add	sp, #12
    5ed8:	bd30      	pop	{r4, r5, pc}
    5eda:	46c0      	nop			; (mov r8, r8)
    5edc:	0000dc1d 	.word	0x0000dc1d
    5ee0:	0000dc5d 	.word	0x0000dc5d
    5ee4:	41004400 	.word	0x41004400
    5ee8:	0000cff5 	.word	0x0000cff5

00005eec <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    5eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    5eee:	46c6      	mov	lr, r8
    5ef0:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    5ef2:	2303      	movs	r3, #3
    5ef4:	0007      	movs	r7, r0
    5ef6:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    5ef8:	6813      	ldr	r3, [r2, #0]
    5efa:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    5efc:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    5efe:	2903      	cmp	r1, #3
    5f00:	d902      	bls.n	5f08 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    5f02:	4244      	negs	r4, r0
    5f04:	2003      	movs	r0, #3
    5f06:	4004      	ands	r4, r0
	}

	if (temp_length) {
    5f08:	2c00      	cmp	r4, #0
    5f0a:	d016      	beq.n	5f3a <crc32_recalculate+0x4e>
		length -= temp_length;
    5f0c:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    5f0e:	1d3e      	adds	r6, r7, #4
    5f10:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    5f12:	00e0      	lsls	r0, r4, #3
    5f14:	4240      	negs	r0, r0
    5f16:	3020      	adds	r0, #32
    5f18:	40c5      	lsrs	r5, r0
	crc ^= data;
    5f1a:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    5f1c:	00e0      	lsls	r0, r4, #3
    5f1e:	d019      	beq.n	5f54 <crc32_recalculate+0x68>
		if (crc & 1) {
    5f20:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    5f22:	4d27      	ldr	r5, [pc, #156]	; (5fc0 <crc32_recalculate+0xd4>)
    5f24:	e003      	b.n	5f2e <crc32_recalculate+0x42>
			crc >>= 1;
    5f26:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    5f28:	3801      	subs	r0, #1
    5f2a:	2800      	cmp	r0, #0
    5f2c:	d004      	beq.n	5f38 <crc32_recalculate+0x4c>
		if (crc & 1) {
    5f2e:	421c      	tst	r4, r3
    5f30:	d0f9      	beq.n	5f26 <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    5f32:	085b      	lsrs	r3, r3, #1
    5f34:	406b      	eors	r3, r5
    5f36:	e7f7      	b.n	5f28 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    5f38:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    5f3a:	2003      	movs	r0, #3
    5f3c:	000c      	movs	r4, r1
    5f3e:	4384      	bics	r4, r0

	if (temp_length) {
    5f40:	d01e      	beq.n	5f80 <crc32_recalculate+0x94>
		length -= temp_length;
    5f42:	1b08      	subs	r0, r1, r4
    5f44:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    5f46:	0889      	lsrs	r1, r1, #2
    5f48:	4688      	mov	r8, r1
    5f4a:	003e      	movs	r6, r7
    5f4c:	000d      	movs	r5, r1
		if (crc & 1) {
    5f4e:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    5f50:	4c1b      	ldr	r4, [pc, #108]	; (5fc0 <crc32_recalculate+0xd4>)

		while (temp_length--) {
    5f52:	e00b      	b.n	5f6c <crc32_recalculate+0x80>
		word = *(word_ptr++);
    5f54:	0037      	movs	r7, r6
    5f56:	e7f0      	b.n	5f3a <crc32_recalculate+0x4e>
			crc >>= 1;
    5f58:	085b      	lsrs	r3, r3, #1
    5f5a:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    5f5c:	2900      	cmp	r1, #0
    5f5e:	d004      	beq.n	5f6a <crc32_recalculate+0x7e>
		if (crc & 1) {
    5f60:	4218      	tst	r0, r3
    5f62:	d0f9      	beq.n	5f58 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    5f64:	085b      	lsrs	r3, r3, #1
    5f66:	4063      	eors	r3, r4
    5f68:	e7f7      	b.n	5f5a <crc32_recalculate+0x6e>
    5f6a:	3604      	adds	r6, #4
		while (temp_length--) {
    5f6c:	3d01      	subs	r5, #1
    5f6e:	d303      	bcc.n	5f78 <crc32_recalculate+0x8c>
	crc ^= data;
    5f70:	6831      	ldr	r1, [r6, #0]
    5f72:	404b      	eors	r3, r1
    5f74:	2120      	movs	r1, #32
    5f76:	e7f3      	b.n	5f60 <crc32_recalculate+0x74>
    5f78:	4641      	mov	r1, r8
    5f7a:	0089      	lsls	r1, r1, #2
    5f7c:	187f      	adds	r7, r7, r1
		length -= temp_length;
    5f7e:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    5f80:	2900      	cmp	r1, #0
    5f82:	d017      	beq.n	5fb4 <crc32_recalculate+0xc8>
		word = *word_ptr;
    5f84:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    5f86:	00c8      	lsls	r0, r1, #3
    5f88:	4240      	negs	r0, r0
    5f8a:	3020      	adds	r0, #32
    5f8c:	2501      	movs	r5, #1
    5f8e:	426d      	negs	r5, r5
    5f90:	40c5      	lsrs	r5, r0
    5f92:	0028      	movs	r0, r5
    5f94:	4020      	ands	r0, r4
	crc ^= data;
    5f96:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    5f98:	00c9      	lsls	r1, r1, #3
    5f9a:	d00b      	beq.n	5fb4 <crc32_recalculate+0xc8>
		if (crc & 1) {
    5f9c:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    5f9e:	4c08      	ldr	r4, [pc, #32]	; (5fc0 <crc32_recalculate+0xd4>)
    5fa0:	e003      	b.n	5faa <crc32_recalculate+0xbe>
			crc >>= 1;
    5fa2:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    5fa4:	3901      	subs	r1, #1
    5fa6:	2900      	cmp	r1, #0
    5fa8:	d004      	beq.n	5fb4 <crc32_recalculate+0xc8>
		if (crc & 1) {
    5faa:	4218      	tst	r0, r3
    5fac:	d0f9      	beq.n	5fa2 <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    5fae:	085b      	lsrs	r3, r3, #1
    5fb0:	4063      	eors	r3, r4
    5fb2:	e7f7      	b.n	5fa4 <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    5fb4:	43db      	mvns	r3, r3
    5fb6:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    5fb8:	2000      	movs	r0, #0
    5fba:	bc04      	pop	{r2}
    5fbc:	4690      	mov	r8, r2
    5fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fc0:	edb88320 	.word	0xedb88320

00005fc4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    5fc4:	4a04      	ldr	r2, [pc, #16]	; (5fd8 <_extint_enable+0x14>)
    5fc6:	7813      	ldrb	r3, [r2, #0]
    5fc8:	2102      	movs	r1, #2
    5fca:	430b      	orrs	r3, r1
    5fcc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    5fce:	7853      	ldrb	r3, [r2, #1]
    5fd0:	b25b      	sxtb	r3, r3
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	dbfb      	blt.n	5fce <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    5fd6:	4770      	bx	lr
    5fd8:	40001800 	.word	0x40001800

00005fdc <_system_extint_init>:
{
    5fdc:	b500      	push	{lr}
    5fde:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5fe0:	4a12      	ldr	r2, [pc, #72]	; (602c <_system_extint_init+0x50>)
    5fe2:	6993      	ldr	r3, [r2, #24]
    5fe4:	2140      	movs	r1, #64	; 0x40
    5fe6:	430b      	orrs	r3, r1
    5fe8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5fea:	a901      	add	r1, sp, #4
    5fec:	2300      	movs	r3, #0
    5fee:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    5ff0:	2005      	movs	r0, #5
    5ff2:	4b0f      	ldr	r3, [pc, #60]	; (6030 <_system_extint_init+0x54>)
    5ff4:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    5ff6:	2005      	movs	r0, #5
    5ff8:	4b0e      	ldr	r3, [pc, #56]	; (6034 <_system_extint_init+0x58>)
    5ffa:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    5ffc:	4a0e      	ldr	r2, [pc, #56]	; (6038 <_system_extint_init+0x5c>)
    5ffe:	7813      	ldrb	r3, [r2, #0]
    6000:	2101      	movs	r1, #1
    6002:	430b      	orrs	r3, r1
    6004:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6006:	7853      	ldrb	r3, [r2, #1]
    6008:	b25b      	sxtb	r3, r3
    600a:	2b00      	cmp	r3, #0
    600c:	dbfb      	blt.n	6006 <_system_extint_init+0x2a>
    600e:	4b0b      	ldr	r3, [pc, #44]	; (603c <_system_extint_init+0x60>)
    6010:	0019      	movs	r1, r3
    6012:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    6014:	2200      	movs	r2, #0
    6016:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6018:	4299      	cmp	r1, r3
    601a:	d1fc      	bne.n	6016 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    601c:	2210      	movs	r2, #16
    601e:	4b08      	ldr	r3, [pc, #32]	; (6040 <_system_extint_init+0x64>)
    6020:	601a      	str	r2, [r3, #0]
	_extint_enable();
    6022:	4b08      	ldr	r3, [pc, #32]	; (6044 <_system_extint_init+0x68>)
    6024:	4798      	blx	r3
}
    6026:	b003      	add	sp, #12
    6028:	bd00      	pop	{pc}
    602a:	46c0      	nop			; (mov r8, r8)
    602c:	40000400 	.word	0x40000400
    6030:	0000e2d1 	.word	0x0000e2d1
    6034:	0000e245 	.word	0x0000e245
    6038:	40001800 	.word	0x40001800
    603c:	2000054c 	.word	0x2000054c
    6040:	e000e100 	.word	0xe000e100
    6044:	00005fc5 	.word	0x00005fc5

00006048 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    6048:	2300      	movs	r3, #0
    604a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    604c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    604e:	2201      	movs	r2, #1
    6050:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    6052:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    6054:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    6056:	3302      	adds	r3, #2
    6058:	72c3      	strb	r3, [r0, #11]
}
    605a:	4770      	bx	lr

0000605c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    605c:	b5f0      	push	{r4, r5, r6, r7, lr}
    605e:	b083      	sub	sp, #12
    6060:	0005      	movs	r5, r0
    6062:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6064:	a901      	add	r1, sp, #4
    6066:	2300      	movs	r3, #0
    6068:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    606a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    606c:	7923      	ldrb	r3, [r4, #4]
    606e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    6070:	7a23      	ldrb	r3, [r4, #8]
    6072:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    6074:	7820      	ldrb	r0, [r4, #0]
    6076:	4b15      	ldr	r3, [pc, #84]	; (60cc <extint_chan_set_config+0x70>)
    6078:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    607a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    607c:	2d1f      	cmp	r5, #31
    607e:	d800      	bhi.n	6082 <extint_chan_set_config+0x26>
		return eics[eic_index];
    6080:	4813      	ldr	r0, [pc, #76]	; (60d0 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    6082:	2207      	movs	r2, #7
    6084:	402a      	ands	r2, r5
    6086:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    6088:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    608a:	7aa3      	ldrb	r3, [r4, #10]
    608c:	2b00      	cmp	r3, #0
    608e:	d001      	beq.n	6094 <extint_chan_set_config+0x38>
    6090:	2308      	movs	r3, #8
    6092:	431f      	orrs	r7, r3
    6094:	08eb      	lsrs	r3, r5, #3
    6096:	009b      	lsls	r3, r3, #2
    6098:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    609a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    609c:	260f      	movs	r6, #15
    609e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    60a0:	43b1      	bics	r1, r6
			(new_config << config_pos);
    60a2:	4097      	lsls	r7, r2
    60a4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    60a6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    60a8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    60aa:	7a63      	ldrb	r3, [r4, #9]
    60ac:	2b00      	cmp	r3, #0
    60ae:	d106      	bne.n	60be <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    60b0:	6943      	ldr	r3, [r0, #20]
    60b2:	2201      	movs	r2, #1
    60b4:	40aa      	lsls	r2, r5
    60b6:	4393      	bics	r3, r2
    60b8:	6143      	str	r3, [r0, #20]
	}
}
    60ba:	b003      	add	sp, #12
    60bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    60be:	6942      	ldr	r2, [r0, #20]
    60c0:	2301      	movs	r3, #1
    60c2:	40ab      	lsls	r3, r5
    60c4:	4313      	orrs	r3, r2
    60c6:	6143      	str	r3, [r0, #20]
    60c8:	e7f7      	b.n	60ba <extint_chan_set_config+0x5e>
    60ca:	46c0      	nop			; (mov r8, r8)
    60cc:	0000e3c9 	.word	0x0000e3c9
    60d0:	40001800 	.word	0x40001800

000060d4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    60d4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    60d6:	2a00      	cmp	r2, #0
    60d8:	d001      	beq.n	60de <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    60da:	0018      	movs	r0, r3
    60dc:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    60de:	008b      	lsls	r3, r1, #2
    60e0:	4a06      	ldr	r2, [pc, #24]	; (60fc <extint_register_callback+0x28>)
    60e2:	589b      	ldr	r3, [r3, r2]
    60e4:	2b00      	cmp	r3, #0
    60e6:	d003      	beq.n	60f0 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    60e8:	4283      	cmp	r3, r0
    60ea:	d005      	beq.n	60f8 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    60ec:	231d      	movs	r3, #29
    60ee:	e7f4      	b.n	60da <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    60f0:	0089      	lsls	r1, r1, #2
    60f2:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    60f4:	2300      	movs	r3, #0
    60f6:	e7f0      	b.n	60da <extint_register_callback+0x6>
		return STATUS_OK;
    60f8:	2300      	movs	r3, #0
    60fa:	e7ee      	b.n	60da <extint_register_callback+0x6>
    60fc:	2000054c 	.word	0x2000054c

00006100 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6100:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    6102:	2900      	cmp	r1, #0
    6104:	d001      	beq.n	610a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    6106:	0018      	movs	r0, r3
    6108:	4770      	bx	lr
		return NULL;
    610a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    610c:	281f      	cmp	r0, #31
    610e:	d800      	bhi.n	6112 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    6110:	4a02      	ldr	r2, [pc, #8]	; (611c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    6112:	2301      	movs	r3, #1
    6114:	4083      	lsls	r3, r0
    6116:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    6118:	2300      	movs	r3, #0
    611a:	e7f4      	b.n	6106 <extint_chan_enable_callback+0x6>
    611c:	40001800 	.word	0x40001800

00006120 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6120:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    6122:	2900      	cmp	r1, #0
    6124:	d001      	beq.n	612a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    6126:	0018      	movs	r0, r3
    6128:	4770      	bx	lr
		return NULL;
    612a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    612c:	281f      	cmp	r0, #31
    612e:	d800      	bhi.n	6132 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    6130:	4a02      	ldr	r2, [pc, #8]	; (613c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    6132:	2301      	movs	r3, #1
    6134:	4083      	lsls	r3, r0
    6136:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    6138:	2300      	movs	r3, #0
    613a:	e7f4      	b.n	6126 <extint_chan_disable_callback+0x6>
    613c:	40001800 	.word	0x40001800

00006140 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    6140:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6142:	2200      	movs	r2, #0
    6144:	4b10      	ldr	r3, [pc, #64]	; (6188 <EIC_Handler+0x48>)
    6146:	701a      	strb	r2, [r3, #0]
    6148:	2300      	movs	r3, #0
    614a:	4910      	ldr	r1, [pc, #64]	; (618c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    614c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    614e:	4e10      	ldr	r6, [pc, #64]	; (6190 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6150:	4c0d      	ldr	r4, [pc, #52]	; (6188 <EIC_Handler+0x48>)
    6152:	e00a      	b.n	616a <EIC_Handler+0x2a>
		return eics[eic_index];
    6154:	490d      	ldr	r1, [pc, #52]	; (618c <EIC_Handler+0x4c>)
    6156:	e008      	b.n	616a <EIC_Handler+0x2a>
    6158:	7823      	ldrb	r3, [r4, #0]
    615a:	3301      	adds	r3, #1
    615c:	b2db      	uxtb	r3, r3
    615e:	7023      	strb	r3, [r4, #0]
    6160:	2b0f      	cmp	r3, #15
    6162:	d810      	bhi.n	6186 <EIC_Handler+0x46>
		return NULL;
    6164:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    6166:	2b1f      	cmp	r3, #31
    6168:	d9f4      	bls.n	6154 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    616a:	0028      	movs	r0, r5
    616c:	4018      	ands	r0, r3
    616e:	2201      	movs	r2, #1
    6170:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    6172:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    6174:	4210      	tst	r0, r2
    6176:	d0ef      	beq.n	6158 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    6178:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    617a:	009b      	lsls	r3, r3, #2
    617c:	599b      	ldr	r3, [r3, r6]
    617e:	2b00      	cmp	r3, #0
    6180:	d0ea      	beq.n	6158 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    6182:	4798      	blx	r3
    6184:	e7e8      	b.n	6158 <EIC_Handler+0x18>
			}
		}
	}
}
    6186:	bd70      	pop	{r4, r5, r6, pc}
    6188:	2000058c 	.word	0x2000058c
    618c:	40001800 	.word	0x40001800
    6190:	2000054c 	.word	0x2000054c

00006194 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    6194:	b510      	push	{r4, lr}
	if (gpfIsr) {
    6196:	4b03      	ldr	r3, [pc, #12]	; (61a4 <chip_isr+0x10>)
    6198:	681b      	ldr	r3, [r3, #0]
    619a:	2b00      	cmp	r3, #0
    619c:	d000      	beq.n	61a0 <chip_isr+0xc>
		gpfIsr();
    619e:	4798      	blx	r3
	}
}
    61a0:	bd10      	pop	{r4, pc}
    61a2:	46c0      	nop			; (mov r8, r8)
    61a4:	20000214 	.word	0x20000214

000061a8 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    61a8:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    61aa:	1e44      	subs	r4, r0, #1
    61ac:	2800      	cmp	r0, #0
    61ae:	d004      	beq.n	61ba <nm_bsp_sleep+0x12>
		delay_ms(1);
    61b0:	4d02      	ldr	r5, [pc, #8]	; (61bc <nm_bsp_sleep+0x14>)
    61b2:	2001      	movs	r0, #1
    61b4:	47a8      	blx	r5
	while (u32TimeMsec--) {
    61b6:	3c01      	subs	r4, #1
    61b8:	d2fb      	bcs.n	61b2 <nm_bsp_sleep+0xa>
	}
}
    61ba:	bd70      	pop	{r4, r5, r6, pc}
    61bc:	0000d8d9 	.word	0x0000d8d9

000061c0 <nm_bsp_reset>:
{
    61c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		port_base->OUTCLR.reg = pin_mask;
    61c2:	4c07      	ldr	r4, [pc, #28]	; (61e0 <nm_bsp_reset+0x20>)
    61c4:	2780      	movs	r7, #128	; 0x80
    61c6:	057f      	lsls	r7, r7, #21
    61c8:	6167      	str	r7, [r4, #20]
    61ca:	2580      	movs	r5, #128	; 0x80
    61cc:	052d      	lsls	r5, r5, #20
    61ce:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    61d0:	2001      	movs	r0, #1
    61d2:	4e04      	ldr	r6, [pc, #16]	; (61e4 <nm_bsp_reset+0x24>)
    61d4:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    61d6:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    61d8:	200a      	movs	r0, #10
    61da:	47b0      	blx	r6
    61dc:	61a5      	str	r5, [r4, #24]
}
    61de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61e0:	41004400 	.word	0x41004400
    61e4:	000061a9 	.word	0x000061a9

000061e8 <nm_bsp_init>:
{
    61e8:	b570      	push	{r4, r5, r6, lr}
    61ea:	b082      	sub	sp, #8
	gpfIsr = NULL;
    61ec:	2300      	movs	r3, #0
    61ee:	4a16      	ldr	r2, [pc, #88]	; (6248 <nm_bsp_init+0x60>)
    61f0:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    61f2:	ac01      	add	r4, sp, #4
    61f4:	2501      	movs	r5, #1
    61f6:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    61f8:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    61fa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    61fc:	0021      	movs	r1, r4
    61fe:	201b      	movs	r0, #27
    6200:	4e12      	ldr	r6, [pc, #72]	; (624c <nm_bsp_init+0x64>)
    6202:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    6204:	0021      	movs	r1, r4
    6206:	201c      	movs	r0, #28
    6208:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    620a:	0021      	movs	r1, r4
    620c:	2028      	movs	r0, #40	; 0x28
    620e:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    6210:	4b0f      	ldr	r3, [pc, #60]	; (6250 <nm_bsp_init+0x68>)
    6212:	2280      	movs	r2, #128	; 0x80
    6214:	0552      	lsls	r2, r2, #21
    6216:	615a      	str	r2, [r3, #20]
    6218:	2280      	movs	r2, #128	; 0x80
    621a:	0512      	lsls	r2, r2, #20
    621c:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    621e:	4b0d      	ldr	r3, [pc, #52]	; (6254 <nm_bsp_init+0x6c>)
    6220:	681b      	ldr	r3, [r3, #0]
    6222:	421d      	tst	r5, r3
    6224:	d003      	beq.n	622e <nm_bsp_init+0x46>
    6226:	4b0b      	ldr	r3, [pc, #44]	; (6254 <nm_bsp_init+0x6c>)
    6228:	681b      	ldr	r3, [r3, #0]
    622a:	079b      	lsls	r3, r3, #30
    622c:	d401      	bmi.n	6232 <nm_bsp_init+0x4a>
	    delay_init();
    622e:	4b0a      	ldr	r3, [pc, #40]	; (6258 <nm_bsp_init+0x70>)
    6230:	4798      	blx	r3
	nm_bsp_reset();
    6232:	4b0a      	ldr	r3, [pc, #40]	; (625c <nm_bsp_init+0x74>)
    6234:	4798      	blx	r3
	cpu_irq_enable();
    6236:	2201      	movs	r2, #1
    6238:	4b09      	ldr	r3, [pc, #36]	; (6260 <nm_bsp_init+0x78>)
    623a:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    623c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    6240:	b662      	cpsie	i
}
    6242:	2000      	movs	r0, #0
    6244:	b002      	add	sp, #8
    6246:	bd70      	pop	{r4, r5, r6, pc}
    6248:	20000214 	.word	0x20000214
    624c:	0000dbf5 	.word	0x0000dbf5
    6250:	41004400 	.word	0x41004400
    6254:	e000e010 	.word	0xe000e010
    6258:	0000d86d 	.word	0x0000d86d
    625c:	000061c1 	.word	0x000061c1
    6260:	2000000c 	.word	0x2000000c

00006264 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    6264:	b510      	push	{r4, lr}
    6266:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    6268:	4b0e      	ldr	r3, [pc, #56]	; (62a4 <nm_bsp_register_isr+0x40>)
    626a:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    626c:	ac01      	add	r4, sp, #4
    626e:	0020      	movs	r0, r4
    6270:	4b0d      	ldr	r3, [pc, #52]	; (62a8 <nm_bsp_register_isr+0x44>)
    6272:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    6274:	2329      	movs	r3, #41	; 0x29
    6276:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    6278:	2300      	movs	r3, #0
    627a:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    627c:	3301      	adds	r3, #1
    627e:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    6280:	3301      	adds	r3, #1
    6282:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    6284:	0021      	movs	r1, r4
    6286:	2009      	movs	r0, #9
    6288:	4b08      	ldr	r3, [pc, #32]	; (62ac <nm_bsp_register_isr+0x48>)
    628a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    628c:	2200      	movs	r2, #0
    628e:	2109      	movs	r1, #9
    6290:	4807      	ldr	r0, [pc, #28]	; (62b0 <nm_bsp_register_isr+0x4c>)
    6292:	4b08      	ldr	r3, [pc, #32]	; (62b4 <nm_bsp_register_isr+0x50>)
    6294:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    6296:	2100      	movs	r1, #0
    6298:	2009      	movs	r0, #9
    629a:	4b07      	ldr	r3, [pc, #28]	; (62b8 <nm_bsp_register_isr+0x54>)
    629c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    629e:	b004      	add	sp, #16
    62a0:	bd10      	pop	{r4, pc}
    62a2:	46c0      	nop			; (mov r8, r8)
    62a4:	20000214 	.word	0x20000214
    62a8:	00006049 	.word	0x00006049
    62ac:	0000605d 	.word	0x0000605d
    62b0:	00006195 	.word	0x00006195
    62b4:	000060d5 	.word	0x000060d5
    62b8:	00006101 	.word	0x00006101

000062bc <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    62bc:	b510      	push	{r4, lr}
	if (u8Enable) {
    62be:	2800      	cmp	r0, #0
    62c0:	d104      	bne.n	62cc <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    62c2:	2100      	movs	r1, #0
    62c4:	2009      	movs	r0, #9
    62c6:	4b04      	ldr	r3, [pc, #16]	; (62d8 <nm_bsp_interrupt_ctrl+0x1c>)
    62c8:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    62ca:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    62cc:	2100      	movs	r1, #0
    62ce:	2009      	movs	r0, #9
    62d0:	4b02      	ldr	r3, [pc, #8]	; (62dc <nm_bsp_interrupt_ctrl+0x20>)
    62d2:	4798      	blx	r3
    62d4:	e7f9      	b.n	62ca <nm_bsp_interrupt_ctrl+0xe>
    62d6:	46c0      	nop			; (mov r8, r8)
    62d8:	00006121 	.word	0x00006121
    62dc:	00006101 	.word	0x00006101

000062e0 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    62e0:	b530      	push	{r4, r5, lr}
    62e2:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    62e4:	4c30      	ldr	r4, [pc, #192]	; (63a8 <nm_bus_init+0xc8>)
    62e6:	230e      	movs	r3, #14
    62e8:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    62ea:	2300      	movs	r3, #0
    62ec:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    62ee:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    62f0:	a901      	add	r1, sp, #4
    62f2:	2201      	movs	r2, #1
    62f4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    62f6:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    62f8:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    62fa:	200e      	movs	r0, #14
    62fc:	4b2b      	ldr	r3, [pc, #172]	; (63ac <nm_bus_init+0xcc>)
    62fe:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    6300:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    6302:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6304:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6306:	2900      	cmp	r1, #0
    6308:	d104      	bne.n	6314 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    630a:	0953      	lsrs	r3, r2, #5
    630c:	01db      	lsls	r3, r3, #7
    630e:	4928      	ldr	r1, [pc, #160]	; (63b0 <nm_bus_init+0xd0>)
    6310:	468c      	mov	ip, r1
    6312:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6314:	211f      	movs	r1, #31
    6316:	4011      	ands	r1, r2
    6318:	2201      	movs	r2, #1
    631a:	0010      	movs	r0, r2
    631c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    631e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    6320:	ac02      	add	r4, sp, #8
    6322:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    6324:	2300      	movs	r3, #0
    6326:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    6328:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    632a:	21c0      	movs	r1, #192	; 0xc0
    632c:	0389      	lsls	r1, r1, #14
    632e:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    6330:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    6332:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    6334:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    6336:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    6338:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    633a:	3223      	adds	r2, #35	; 0x23
    633c:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    633e:	3a18      	subs	r2, #24
    6340:	2100      	movs	r1, #0
    6342:	a808      	add	r0, sp, #32
    6344:	4b1b      	ldr	r3, [pc, #108]	; (63b4 <nm_bus_init+0xd4>)
    6346:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    6348:	4b1b      	ldr	r3, [pc, #108]	; (63b8 <nm_bus_init+0xd8>)
    634a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    634c:	4b1b      	ldr	r3, [pc, #108]	; (63bc <nm_bus_init+0xdc>)
    634e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    6350:	2301      	movs	r3, #1
    6352:	425b      	negs	r3, r3
    6354:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    6356:	4b1a      	ldr	r3, [pc, #104]	; (63c0 <nm_bus_init+0xe0>)
    6358:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    635a:	4b1a      	ldr	r3, [pc, #104]	; (63c4 <nm_bus_init+0xe4>)
    635c:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    635e:	0022      	movs	r2, r4
    6360:	4919      	ldr	r1, [pc, #100]	; (63c8 <nm_bus_init+0xe8>)
    6362:	481a      	ldr	r0, [pc, #104]	; (63cc <nm_bus_init+0xec>)
    6364:	4b1a      	ldr	r3, [pc, #104]	; (63d0 <nm_bus_init+0xf0>)
    6366:	4798      	blx	r3
    6368:	2800      	cmp	r0, #0
    636a:	d11a      	bne.n	63a2 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    636c:	4d17      	ldr	r5, [pc, #92]	; (63cc <nm_bus_init+0xec>)
    636e:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6370:	0020      	movs	r0, r4
    6372:	4b18      	ldr	r3, [pc, #96]	; (63d4 <nm_bus_init+0xf4>)
    6374:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6376:	231f      	movs	r3, #31
    6378:	4018      	ands	r0, r3
    637a:	3b1e      	subs	r3, #30
    637c:	4083      	lsls	r3, r0
    637e:	4a16      	ldr	r2, [pc, #88]	; (63d8 <nm_bus_init+0xf8>)
    6380:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6382:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    6384:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    6386:	2b00      	cmp	r3, #0
    6388:	d1fc      	bne.n	6384 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    638a:	6823      	ldr	r3, [r4, #0]
    638c:	2202      	movs	r2, #2
    638e:	4313      	orrs	r3, r2
    6390:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    6392:	4b12      	ldr	r3, [pc, #72]	; (63dc <nm_bus_init+0xfc>)
    6394:	4798      	blx	r3
	nm_bsp_sleep(1);
    6396:	2001      	movs	r0, #1
    6398:	4b11      	ldr	r3, [pc, #68]	; (63e0 <nm_bus_init+0x100>)
    639a:	4798      	blx	r3
#endif
	return result;
    639c:	2000      	movs	r0, #0
}
    639e:	b011      	add	sp, #68	; 0x44
    63a0:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    63a2:	2006      	movs	r0, #6
    63a4:	4240      	negs	r0, r0
    63a6:	e7fa      	b.n	639e <nm_bus_init+0xbe>
    63a8:	20000590 	.word	0x20000590
    63ac:	0000dbf5 	.word	0x0000dbf5
    63b0:	41004400 	.word	0x41004400
    63b4:	0000e8c7 	.word	0x0000e8c7
    63b8:	000c0002 	.word	0x000c0002
    63bc:	000d0002 	.word	0x000d0002
    63c0:	000f0002 	.word	0x000f0002
    63c4:	00b71b00 	.word	0x00b71b00
    63c8:	42001000 	.word	0x42001000
    63cc:	20000594 	.word	0x20000594
    63d0:	0000cbd1 	.word	0x0000cbd1
    63d4:	0000d7dd 	.word	0x0000d7dd
    63d8:	e000e100 	.word	0xe000e100
    63dc:	000061c1 	.word	0x000061c1
    63e0:	000061a9 	.word	0x000061a9

000063e4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    63e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    63e6:	46de      	mov	lr, fp
    63e8:	4657      	mov	r7, sl
    63ea:	464e      	mov	r6, r9
    63ec:	4645      	mov	r5, r8
    63ee:	b5e0      	push	{r5, r6, r7, lr}
    63f0:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    63f2:	2803      	cmp	r0, #3
    63f4:	d000      	beq.n	63f8 <nm_bus_ioctl+0x14>
    63f6:	e075      	b.n	64e4 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    63f8:	680e      	ldr	r6, [r1, #0]
    63fa:	684d      	ldr	r5, [r1, #4]
    63fc:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    63fe:	2200      	movs	r2, #0
    6400:	466b      	mov	r3, sp
    6402:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    6404:	2d00      	cmp	r5, #0
    6406:	d027      	beq.n	6458 <nm_bus_ioctl+0x74>
    6408:	2c00      	cmp	r4, #0
    640a:	d065      	beq.n	64d8 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    640c:	2e00      	cmp	r6, #0
    640e:	d100      	bne.n	6412 <nm_bus_ioctl+0x2e>
    6410:	e077      	b.n	6502 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    6412:	2300      	movs	r3, #0
    6414:	4698      	mov	r8, r3
    6416:	2300      	movs	r3, #0
    6418:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    641a:	2201      	movs	r2, #1
    641c:	493b      	ldr	r1, [pc, #236]	; (650c <nm_bus_ioctl+0x128>)
    641e:	483c      	ldr	r0, [pc, #240]	; (6510 <nm_bus_ioctl+0x12c>)
    6420:	4b3c      	ldr	r3, [pc, #240]	; (6514 <nm_bus_ioctl+0x130>)
    6422:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    6424:	4b3a      	ldr	r3, [pc, #232]	; (6510 <nm_bus_ioctl+0x12c>)
    6426:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    6428:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    642a:	2204      	movs	r2, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    642c:	4699      	mov	r9, r3
			pu8Miso++;
    642e:	4659      	mov	r1, fp
    6430:	424b      	negs	r3, r1
    6432:	4159      	adcs	r1, r3
    6434:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    6436:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6438:	4653      	mov	r3, sl
    643a:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    643c:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    643e:	4239      	tst	r1, r7
    6440:	d0fc      	beq.n	643c <nm_bus_ioctl+0x58>
    6442:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    6444:	4239      	tst	r1, r7
    6446:	d0fc      	beq.n	6442 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6448:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    644a:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    644c:	4211      	tst	r1, r2
    644e:	d0fc      	beq.n	644a <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6450:	4649      	mov	r1, r9
    6452:	7989      	ldrb	r1, [r1, #6]
    6454:	468c      	mov	ip, r1
    6456:	e011      	b.n	647c <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    6458:	2e00      	cmp	r6, #0
    645a:	d03a      	beq.n	64d2 <nm_bus_ioctl+0xee>
    645c:	2c00      	cmp	r4, #0
    645e:	d03e      	beq.n	64de <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    6460:	2300      	movs	r3, #0
    6462:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    6464:	3301      	adds	r3, #1
    6466:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    6468:	466b      	mov	r3, sp
    646a:	1ddd      	adds	r5, r3, #7
    646c:	e7d5      	b.n	641a <nm_bus_ioctl+0x36>
    646e:	4660      	mov	r0, ip
    6470:	2801      	cmp	r0, #1
    6472:	d00d      	beq.n	6490 <nm_bus_ioctl+0xac>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6474:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6476:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    6478:	2900      	cmp	r1, #0
    647a:	d00d      	beq.n	6498 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    647c:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    647e:	4211      	tst	r1, r2
    6480:	d0fc      	beq.n	647c <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6482:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    6484:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6486:	4210      	tst	r0, r2
    6488:	d0f1      	beq.n	646e <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    648a:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    648c:	311e      	adds	r1, #30
    648e:	e7ee      	b.n	646e <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6490:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6492:	05c0      	lsls	r0, r0, #23
    6494:	0dc0      	lsrs	r0, r0, #23
    6496:	e7ef      	b.n	6478 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    6498:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    649a:	3c01      	subs	r4, #1
    649c:	b2a4      	uxth	r4, r4
			pu8Miso++;
    649e:	445d      	add	r5, fp
			pu8Mosi++;
    64a0:	4643      	mov	r3, r8
    64a2:	4259      	negs	r1, r3
    64a4:	414b      	adcs	r3, r1
    64a6:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    64a8:	2c00      	cmp	r4, #0
    64aa:	d1c4      	bne.n	6436 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    64ac:	4b18      	ldr	r3, [pc, #96]	; (6510 <nm_bus_ioctl+0x12c>)
    64ae:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    64b0:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    64b2:	7e0b      	ldrb	r3, [r1, #24]
    64b4:	4213      	tst	r3, r2
    64b6:	d0fc      	beq.n	64b2 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    64b8:	2200      	movs	r2, #0
    64ba:	4914      	ldr	r1, [pc, #80]	; (650c <nm_bus_ioctl+0x128>)
    64bc:	4814      	ldr	r0, [pc, #80]	; (6510 <nm_bus_ioctl+0x12c>)
    64be:	4b15      	ldr	r3, [pc, #84]	; (6514 <nm_bus_ioctl+0x130>)
    64c0:	4798      	blx	r3
	return M2M_SUCCESS;
    64c2:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    64c4:	b003      	add	sp, #12
    64c6:	bc3c      	pop	{r2, r3, r4, r5}
    64c8:	4690      	mov	r8, r2
    64ca:	4699      	mov	r9, r3
    64cc:	46a2      	mov	sl, r4
    64ce:	46ab      	mov	fp, r5
    64d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    64d2:	200f      	movs	r0, #15
    64d4:	4240      	negs	r0, r0
    64d6:	e7f5      	b.n	64c4 <nm_bus_ioctl+0xe0>
    64d8:	200f      	movs	r0, #15
    64da:	4240      	negs	r0, r0
    64dc:	e7f2      	b.n	64c4 <nm_bus_ioctl+0xe0>
    64de:	200f      	movs	r0, #15
    64e0:	4240      	negs	r0, r0
		break;
    64e2:	e7ef      	b.n	64c4 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    64e4:	220e      	movs	r2, #14
    64e6:	32ff      	adds	r2, #255	; 0xff
    64e8:	490b      	ldr	r1, [pc, #44]	; (6518 <nm_bus_ioctl+0x134>)
    64ea:	480c      	ldr	r0, [pc, #48]	; (651c <nm_bus_ioctl+0x138>)
    64ec:	4b0c      	ldr	r3, [pc, #48]	; (6520 <nm_bus_ioctl+0x13c>)
    64ee:	4798      	blx	r3
    64f0:	480c      	ldr	r0, [pc, #48]	; (6524 <nm_bus_ioctl+0x140>)
    64f2:	4b0d      	ldr	r3, [pc, #52]	; (6528 <nm_bus_ioctl+0x144>)
    64f4:	4798      	blx	r3
    64f6:	200d      	movs	r0, #13
    64f8:	4b0c      	ldr	r3, [pc, #48]	; (652c <nm_bus_ioctl+0x148>)
    64fa:	4798      	blx	r3
			s8Ret = -1;
    64fc:	2001      	movs	r0, #1
    64fe:	4240      	negs	r0, r0
	return s8Ret;
    6500:	e7e0      	b.n	64c4 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    6502:	2301      	movs	r3, #1
    6504:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    6506:	466b      	mov	r3, sp
    6508:	1dde      	adds	r6, r3, #7
    650a:	e784      	b.n	6416 <nm_bus_ioctl+0x32>
    650c:	20000590 	.word	0x20000590
    6510:	20000594 	.word	0x20000594
    6514:	0000cf01 	.word	0x0000cf01
    6518:	00014aa0 	.word	0x00014aa0
    651c:	00014ab0 	.word	0x00014ab0
    6520:	0000f309 	.word	0x0000f309
    6524:	00014ac4 	.word	0x00014ac4
    6528:	0000f425 	.word	0x0000f425
    652c:	0000f33d 	.word	0x0000f33d

00006530 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    6530:	b530      	push	{r4, r5, lr}
    6532:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    6534:	ab01      	add	r3, sp, #4
    6536:	2200      	movs	r2, #0
    6538:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    653a:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    653c:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    653e:	4d13      	ldr	r5, [pc, #76]	; (658c <nm_bus_deinit+0x5c>)
    6540:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    6542:	0020      	movs	r0, r4
    6544:	4b12      	ldr	r3, [pc, #72]	; (6590 <nm_bus_deinit+0x60>)
    6546:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6548:	231f      	movs	r3, #31
    654a:	4018      	ands	r0, r3
    654c:	3b1e      	subs	r3, #30
    654e:	4083      	lsls	r3, r0
    6550:	2280      	movs	r2, #128	; 0x80
    6552:	4910      	ldr	r1, [pc, #64]	; (6594 <nm_bus_deinit+0x64>)
    6554:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6556:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    6558:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    655a:	2b00      	cmp	r3, #0
    655c:	d1fc      	bne.n	6558 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    655e:	338f      	adds	r3, #143	; 0x8f
    6560:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    6562:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6564:	6823      	ldr	r3, [r4, #0]
    6566:	2202      	movs	r2, #2
    6568:	4393      	bics	r3, r2
    656a:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    656c:	a901      	add	r1, sp, #4
    656e:	200c      	movs	r0, #12
    6570:	4c09      	ldr	r4, [pc, #36]	; (6598 <nm_bus_deinit+0x68>)
    6572:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    6574:	a901      	add	r1, sp, #4
    6576:	200f      	movs	r0, #15
    6578:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    657a:	a901      	add	r1, sp, #4
    657c:	200d      	movs	r0, #13
    657e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    6580:	a901      	add	r1, sp, #4
    6582:	200e      	movs	r0, #14
    6584:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    6586:	2000      	movs	r0, #0
    6588:	b003      	add	sp, #12
    658a:	bd30      	pop	{r4, r5, pc}
    658c:	20000594 	.word	0x20000594
    6590:	0000d7dd 	.word	0x0000d7dd
    6594:	e000e100 	.word	0xe000e100
    6598:	0000dbf5 	.word	0x0000dbf5

0000659c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    659c:	2a00      	cmp	r2, #0
    659e:	d006      	beq.n	65ae <m2m_memcpy+0x12>
    65a0:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    65a2:	780b      	ldrb	r3, [r1, #0]
    65a4:	7003      	strb	r3, [r0, #0]
		pDst++;
    65a6:	3001      	adds	r0, #1
		pSrc++;
    65a8:	3101      	adds	r1, #1
	}while(--sz);
    65aa:	4290      	cmp	r0, r2
    65ac:	d1f9      	bne.n	65a2 <m2m_memcpy+0x6>
}
    65ae:	4770      	bx	lr

000065b0 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    65b0:	2a00      	cmp	r2, #0
    65b2:	d004      	beq.n	65be <m2m_memset+0xe>
    65b4:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    65b6:	7001      	strb	r1, [r0, #0]
		pBuf++;
    65b8:	3001      	adds	r0, #1
	}while(--sz);
    65ba:	4290      	cmp	r0, r2
    65bc:	d1fb      	bne.n	65b6 <m2m_memset+0x6>
}
    65be:	4770      	bx	lr

000065c0 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    65c0:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    65c2:	7802      	ldrb	r2, [r0, #0]
    65c4:	2a00      	cmp	r2, #0
    65c6:	d007      	beq.n	65d8 <m2m_strlen+0x18>
    65c8:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    65ca:	3001      	adds	r0, #1
    65cc:	b280      	uxth	r0, r0
		pcStr++;
    65ce:	3301      	adds	r3, #1
	while(*pcStr)
    65d0:	781a      	ldrb	r2, [r3, #0]
    65d2:	2a00      	cmp	r2, #0
    65d4:	d1f9      	bne.n	65ca <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    65d6:	4770      	bx	lr
	uint16	u16StrLen = 0;
    65d8:	2000      	movs	r0, #0
    65da:	e7fc      	b.n	65d6 <m2m_strlen+0x16>

000065dc <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    65dc:	4a02      	ldr	r2, [pc, #8]	; (65e8 <isr+0xc>)
    65de:	78d3      	ldrb	r3, [r2, #3]
    65e0:	3301      	adds	r3, #1
    65e2:	b2db      	uxtb	r3, r3
    65e4:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    65e6:	4770      	bx	lr
    65e8:	200005d0 	.word	0x200005d0

000065ec <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    65ec:	4770      	bx	lr
	...

000065f0 <hif_set_rx_done>:
{
    65f0:	b500      	push	{lr}
    65f2:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    65f4:	2200      	movs	r2, #0
    65f6:	4b0a      	ldr	r3, [pc, #40]	; (6620 <hif_set_rx_done+0x30>)
    65f8:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    65fa:	2001      	movs	r0, #1
    65fc:	4b09      	ldr	r3, [pc, #36]	; (6624 <hif_set_rx_done+0x34>)
    65fe:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    6600:	a901      	add	r1, sp, #4
    6602:	4809      	ldr	r0, [pc, #36]	; (6628 <hif_set_rx_done+0x38>)
    6604:	4b09      	ldr	r3, [pc, #36]	; (662c <hif_set_rx_done+0x3c>)
    6606:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    6608:	2800      	cmp	r0, #0
    660a:	d001      	beq.n	6610 <hif_set_rx_done+0x20>
}
    660c:	b003      	add	sp, #12
    660e:	bd00      	pop	{pc}
	reg |= NBIT1;
    6610:	2102      	movs	r1, #2
    6612:	9b01      	ldr	r3, [sp, #4]
    6614:	4319      	orrs	r1, r3
    6616:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    6618:	4803      	ldr	r0, [pc, #12]	; (6628 <hif_set_rx_done+0x38>)
    661a:	4b05      	ldr	r3, [pc, #20]	; (6630 <hif_set_rx_done+0x40>)
    661c:	4798      	blx	r3
    661e:	e7f5      	b.n	660c <hif_set_rx_done+0x1c>
    6620:	200005d0 	.word	0x200005d0
    6624:	000062bd 	.word	0x000062bd
    6628:	00001070 	.word	0x00001070
    662c:	000079f9 	.word	0x000079f9
    6630:	00007a05 	.word	0x00007a05

00006634 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    6634:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    6636:	4b0c      	ldr	r3, [pc, #48]	; (6668 <hif_chip_wake+0x34>)
    6638:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    663a:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    663c:	2b00      	cmp	r3, #0
    663e:	d10d      	bne.n	665c <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    6640:	4b09      	ldr	r3, [pc, #36]	; (6668 <hif_chip_wake+0x34>)
    6642:	785b      	ldrb	r3, [r3, #1]
    6644:	2b00      	cmp	r3, #0
    6646:	d103      	bne.n	6650 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    6648:	4b07      	ldr	r3, [pc, #28]	; (6668 <hif_chip_wake+0x34>)
    664a:	781b      	ldrb	r3, [r3, #0]
    664c:	2b00      	cmp	r3, #0
    664e:	d106      	bne.n	665e <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    6650:	4a05      	ldr	r2, [pc, #20]	; (6668 <hif_chip_wake+0x34>)
    6652:	7853      	ldrb	r3, [r2, #1]
    6654:	3301      	adds	r3, #1
    6656:	b2db      	uxtb	r3, r3
    6658:	7053      	strb	r3, [r2, #1]
    665a:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    665c:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    665e:	4b03      	ldr	r3, [pc, #12]	; (666c <hif_chip_wake+0x38>)
    6660:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    6662:	2800      	cmp	r0, #0
    6664:	d0f4      	beq.n	6650 <hif_chip_wake+0x1c>
    6666:	e7f9      	b.n	665c <hif_chip_wake+0x28>
    6668:	200005d0 	.word	0x200005d0
    666c:	000076e1 	.word	0x000076e1

00006670 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    6670:	4b05      	ldr	r3, [pc, #20]	; (6688 <hif_chip_sleep_sc+0x18>)
    6672:	785b      	ldrb	r3, [r3, #1]
    6674:	2b00      	cmp	r3, #0
    6676:	d004      	beq.n	6682 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    6678:	4a03      	ldr	r2, [pc, #12]	; (6688 <hif_chip_sleep_sc+0x18>)
    667a:	7853      	ldrb	r3, [r2, #1]
    667c:	3b01      	subs	r3, #1
    667e:	b2db      	uxtb	r3, r3
    6680:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    6682:	2000      	movs	r0, #0
    6684:	4770      	bx	lr
    6686:	46c0      	nop			; (mov r8, r8)
    6688:	200005d0 	.word	0x200005d0

0000668c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    668c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    668e:	4b0b      	ldr	r3, [pc, #44]	; (66bc <hif_chip_sleep+0x30>)
    6690:	785b      	ldrb	r3, [r3, #1]
    6692:	2b00      	cmp	r3, #0
    6694:	d004      	beq.n	66a0 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    6696:	4a09      	ldr	r2, [pc, #36]	; (66bc <hif_chip_sleep+0x30>)
    6698:	7853      	ldrb	r3, [r2, #1]
    669a:	3b01      	subs	r3, #1
    669c:	b2db      	uxtb	r3, r3
    669e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    66a0:	4b06      	ldr	r3, [pc, #24]	; (66bc <hif_chip_sleep+0x30>)
    66a2:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    66a4:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    66a6:	2b00      	cmp	r3, #0
    66a8:	d103      	bne.n	66b2 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    66aa:	4b04      	ldr	r3, [pc, #16]	; (66bc <hif_chip_sleep+0x30>)
    66ac:	781b      	ldrb	r3, [r3, #0]
    66ae:	2b00      	cmp	r3, #0
    66b0:	d100      	bne.n	66b4 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    66b2:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    66b4:	4b02      	ldr	r3, [pc, #8]	; (66c0 <hif_chip_sleep+0x34>)
    66b6:	4798      	blx	r3
    66b8:	e7fb      	b.n	66b2 <hif_chip_sleep+0x26>
    66ba:	46c0      	nop			; (mov r8, r8)
    66bc:	200005d0 	.word	0x200005d0
    66c0:	00007679 	.word	0x00007679

000066c4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    66c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    66c6:	46de      	mov	lr, fp
    66c8:	4657      	mov	r7, sl
    66ca:	b580      	push	{r7, lr}
    66cc:	b089      	sub	sp, #36	; 0x24
    66ce:	4683      	mov	fp, r0
    66d0:	468a      	mov	sl, r1
    66d2:	9201      	str	r2, [sp, #4]
    66d4:	9300      	str	r3, [sp, #0]
    66d6:	ab10      	add	r3, sp, #64	; 0x40
    66d8:	cb80      	ldmia	r3!, {r7}
    66da:	881e      	ldrh	r6, [r3, #0]
    66dc:	ab12      	add	r3, sp, #72	; 0x48
    66de:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    66e0:	227f      	movs	r2, #127	; 0x7f
    66e2:	400a      	ands	r2, r1
    66e4:	ab07      	add	r3, sp, #28
    66e6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    66e8:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    66ea:	2208      	movs	r2, #8
    66ec:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    66ee:	2f00      	cmp	r7, #0
    66f0:	d03d      	beq.n	676e <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    66f2:	885a      	ldrh	r2, [r3, #2]
    66f4:	1992      	adds	r2, r2, r6
    66f6:	18aa      	adds	r2, r5, r2
    66f8:	b292      	uxth	r2, r2
    66fa:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    66fc:	4b69      	ldr	r3, [pc, #420]	; (68a4 <hif_send+0x1e0>)
    66fe:	4798      	blx	r3
    6700:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    6702:	d000      	beq.n	6706 <hif_send+0x42>
    6704:	e0c1      	b.n	688a <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    6706:	2300      	movs	r3, #0
    6708:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    670a:	aa02      	add	r2, sp, #8
    670c:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    670e:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    6710:	9b04      	ldr	r3, [sp, #16]
    6712:	465a      	mov	r2, fp
    6714:	431a      	orrs	r2, r3
    6716:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    6718:	9a04      	ldr	r2, [sp, #16]
    671a:	4653      	mov	r3, sl
    671c:	021b      	lsls	r3, r3, #8
    671e:	4313      	orrs	r3, r2
    6720:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    6722:	ab07      	add	r3, sp, #28
    6724:	885b      	ldrh	r3, [r3, #2]
    6726:	9a04      	ldr	r2, [sp, #16]
    6728:	041b      	lsls	r3, r3, #16
    672a:	4313      	orrs	r3, r2
    672c:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    672e:	9904      	ldr	r1, [sp, #16]
    6730:	485d      	ldr	r0, [pc, #372]	; (68a8 <hif_send+0x1e4>)
    6732:	4b5e      	ldr	r3, [pc, #376]	; (68ac <hif_send+0x1e8>)
    6734:	4798      	blx	r3
    6736:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    6738:	d157      	bne.n	67ea <hif_send+0x126>

		reg = 0UL;
    673a:	2300      	movs	r3, #0
    673c:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    673e:	9b04      	ldr	r3, [sp, #16]
    6740:	2202      	movs	r2, #2
    6742:	4313      	orrs	r3, r2
    6744:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    6746:	9904      	ldr	r1, [sp, #16]
    6748:	4859      	ldr	r0, [pc, #356]	; (68b0 <hif_send+0x1ec>)
    674a:	4b58      	ldr	r3, [pc, #352]	; (68ac <hif_send+0x1e8>)
    674c:	4798      	blx	r3
    674e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    6750:	d14b      	bne.n	67ea <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    6752:	2200      	movs	r2, #0
    6754:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    6756:	ab02      	add	r3, sp, #8
    6758:	80da      	strh	r2, [r3, #6]
    675a:	3306      	adds	r3, #6
    675c:	881b      	ldrh	r3, [r3, #0]
    675e:	b29b      	uxth	r3, r3
    6760:	4a54      	ldr	r2, [pc, #336]	; (68b4 <hif_send+0x1f0>)
    6762:	4293      	cmp	r3, r2
    6764:	d849      	bhi.n	67fa <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    6766:	4c54      	ldr	r4, [pc, #336]	; (68b8 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    6768:	4b54      	ldr	r3, [pc, #336]	; (68bc <hif_send+0x1f8>)
    676a:	469a      	mov	sl, r3
    676c:	e017      	b.n	679e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    676e:	ab07      	add	r3, sp, #28
    6770:	885a      	ldrh	r2, [r3, #2]
    6772:	9900      	ldr	r1, [sp, #0]
    6774:	468c      	mov	ip, r1
    6776:	4462      	add	r2, ip
    6778:	b292      	uxth	r2, r2
    677a:	805a      	strh	r2, [r3, #2]
    677c:	e7be      	b.n	66fc <hif_send+0x38>
				nm_bsp_sleep(1);
    677e:	2001      	movs	r0, #1
    6780:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    6782:	9b04      	ldr	r3, [sp, #16]
    6784:	079b      	lsls	r3, r3, #30
    6786:	d528      	bpl.n	67da <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    6788:	ab02      	add	r3, sp, #8
    678a:	88da      	ldrh	r2, [r3, #6]
    678c:	3201      	adds	r2, #1
    678e:	b292      	uxth	r2, r2
    6790:	80da      	strh	r2, [r3, #6]
    6792:	3306      	adds	r3, #6
    6794:	881b      	ldrh	r3, [r3, #0]
    6796:	b29b      	uxth	r3, r3
    6798:	4a46      	ldr	r2, [pc, #280]	; (68b4 <hif_send+0x1f0>)
    679a:	4293      	cmp	r3, r2
    679c:	d82d      	bhi.n	67fa <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    679e:	a904      	add	r1, sp, #16
    67a0:	4843      	ldr	r0, [pc, #268]	; (68b0 <hif_send+0x1ec>)
    67a2:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    67a4:	2800      	cmp	r0, #0
    67a6:	d128      	bne.n	67fa <hif_send+0x136>
			if(cnt >= 500) {
    67a8:	ab02      	add	r3, sp, #8
    67aa:	3306      	adds	r3, #6
    67ac:	881b      	ldrh	r3, [r3, #0]
    67ae:	b29b      	uxth	r3, r3
    67b0:	22f4      	movs	r2, #244	; 0xf4
    67b2:	32ff      	adds	r2, #255	; 0xff
    67b4:	4293      	cmp	r3, r2
    67b6:	d9e4      	bls.n	6782 <hif_send+0xbe>
				if(cnt < 501) {
    67b8:	ab02      	add	r3, sp, #8
    67ba:	3306      	adds	r3, #6
    67bc:	881b      	ldrh	r3, [r3, #0]
    67be:	b29b      	uxth	r3, r3
    67c0:	3201      	adds	r2, #1
    67c2:	4293      	cmp	r3, r2
    67c4:	d8db      	bhi.n	677e <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    67c6:	483e      	ldr	r0, [pc, #248]	; (68c0 <hif_send+0x1fc>)
    67c8:	4b3e      	ldr	r3, [pc, #248]	; (68c4 <hif_send+0x200>)
    67ca:	4798      	blx	r3
    67cc:	483e      	ldr	r0, [pc, #248]	; (68c8 <hif_send+0x204>)
    67ce:	4b3f      	ldr	r3, [pc, #252]	; (68cc <hif_send+0x208>)
    67d0:	4798      	blx	r3
    67d2:	200d      	movs	r0, #13
    67d4:	4b3e      	ldr	r3, [pc, #248]	; (68d0 <hif_send+0x20c>)
    67d6:	4798      	blx	r3
    67d8:	e7d1      	b.n	677e <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    67da:	a905      	add	r1, sp, #20
    67dc:	483d      	ldr	r0, [pc, #244]	; (68d4 <hif_send+0x210>)
    67de:	4b36      	ldr	r3, [pc, #216]	; (68b8 <hif_send+0x1f4>)
    67e0:	4798      	blx	r3
    67e2:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    67e4:	d009      	beq.n	67fa <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    67e6:	2300      	movs	r3, #0
    67e8:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    67ea:	4b3b      	ldr	r3, [pc, #236]	; (68d8 <hif_send+0x214>)
    67ec:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    67ee:	0020      	movs	r0, r4
    67f0:	b009      	add	sp, #36	; 0x24
    67f2:	bc0c      	pop	{r2, r3}
    67f4:	4692      	mov	sl, r2
    67f6:	469b      	mov	fp, r3
    67f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    67fa:	9b05      	ldr	r3, [sp, #20]
    67fc:	2b00      	cmp	r3, #0
    67fe:	d03f      	beq.n	6880 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    6800:	9b05      	ldr	r3, [sp, #20]
    6802:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    6804:	a907      	add	r1, sp, #28
    6806:	884b      	ldrh	r3, [r1, #2]
    6808:	b29b      	uxth	r3, r3
    680a:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    680c:	9806      	ldr	r0, [sp, #24]
    680e:	2208      	movs	r2, #8
    6810:	4b32      	ldr	r3, [pc, #200]	; (68dc <hif_send+0x218>)
    6812:	4798      	blx	r3
    6814:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    6816:	d1e8      	bne.n	67ea <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    6818:	9b06      	ldr	r3, [sp, #24]
    681a:	3308      	adds	r3, #8
    681c:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    681e:	9b01      	ldr	r3, [sp, #4]
    6820:	2b00      	cmp	r3, #0
    6822:	d00b      	beq.n	683c <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    6824:	9806      	ldr	r0, [sp, #24]
    6826:	9a00      	ldr	r2, [sp, #0]
    6828:	0019      	movs	r1, r3
    682a:	4b2c      	ldr	r3, [pc, #176]	; (68dc <hif_send+0x218>)
    682c:	4798      	blx	r3
    682e:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    6830:	d1db      	bne.n	67ea <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    6832:	9b06      	ldr	r3, [sp, #24]
    6834:	9a00      	ldr	r2, [sp, #0]
    6836:	4694      	mov	ip, r2
    6838:	4463      	add	r3, ip
    683a:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    683c:	2f00      	cmp	r7, #0
    683e:	d00e      	beq.n	685e <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    6840:	9b06      	ldr	r3, [sp, #24]
    6842:	9a00      	ldr	r2, [sp, #0]
    6844:	1aad      	subs	r5, r5, r2
    6846:	18ed      	adds	r5, r5, r3
    6848:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    684a:	9806      	ldr	r0, [sp, #24]
    684c:	0032      	movs	r2, r6
    684e:	0039      	movs	r1, r7
    6850:	4b22      	ldr	r3, [pc, #136]	; (68dc <hif_send+0x218>)
    6852:	4798      	blx	r3
    6854:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    6856:	d1c8      	bne.n	67ea <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    6858:	9b06      	ldr	r3, [sp, #24]
    685a:	18f3      	adds	r3, r6, r3
    685c:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    685e:	9b05      	ldr	r3, [sp, #20]
    6860:	009b      	lsls	r3, r3, #2
    6862:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    6864:	9b04      	ldr	r3, [sp, #16]
    6866:	2202      	movs	r2, #2
    6868:	4313      	orrs	r3, r2
    686a:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    686c:	9904      	ldr	r1, [sp, #16]
    686e:	481c      	ldr	r0, [pc, #112]	; (68e0 <hif_send+0x21c>)
    6870:	4b0e      	ldr	r3, [pc, #56]	; (68ac <hif_send+0x1e8>)
    6872:	4798      	blx	r3
    6874:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    6876:	d1b8      	bne.n	67ea <hif_send+0x126>
 	ret = hif_chip_sleep();
    6878:	4b1a      	ldr	r3, [pc, #104]	; (68e4 <hif_send+0x220>)
    687a:	4798      	blx	r3
    687c:	0004      	movs	r4, r0
	return ret;
    687e:	e7b6      	b.n	67ee <hif_send+0x12a>
			ret = hif_chip_sleep();
    6880:	4b18      	ldr	r3, [pc, #96]	; (68e4 <hif_send+0x220>)
    6882:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    6884:	2403      	movs	r4, #3
    6886:	4264      	negs	r4, r4
			goto ERR2;
    6888:	e7b1      	b.n	67ee <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    688a:	22cb      	movs	r2, #203	; 0xcb
    688c:	0052      	lsls	r2, r2, #1
    688e:	4916      	ldr	r1, [pc, #88]	; (68e8 <hif_send+0x224>)
    6890:	4816      	ldr	r0, [pc, #88]	; (68ec <hif_send+0x228>)
    6892:	4b0c      	ldr	r3, [pc, #48]	; (68c4 <hif_send+0x200>)
    6894:	4798      	blx	r3
    6896:	4816      	ldr	r0, [pc, #88]	; (68f0 <hif_send+0x22c>)
    6898:	4b0c      	ldr	r3, [pc, #48]	; (68cc <hif_send+0x208>)
    689a:	4798      	blx	r3
    689c:	200d      	movs	r0, #13
    689e:	4b0c      	ldr	r3, [pc, #48]	; (68d0 <hif_send+0x20c>)
    68a0:	4798      	blx	r3
		goto ERR2;
    68a2:	e7a4      	b.n	67ee <hif_send+0x12a>
    68a4:	00006635 	.word	0x00006635
    68a8:	0000108c 	.word	0x0000108c
    68ac:	00007a05 	.word	0x00007a05
    68b0:	00001078 	.word	0x00001078
    68b4:	000003e7 	.word	0x000003e7
    68b8:	000079f9 	.word	0x000079f9
    68bc:	000061a9 	.word	0x000061a9
    68c0:	00014de0 	.word	0x00014de0
    68c4:	0000f309 	.word	0x0000f309
    68c8:	00014dec 	.word	0x00014dec
    68cc:	0000f425 	.word	0x0000f425
    68d0:	0000f33d 	.word	0x0000f33d
    68d4:	00150400 	.word	0x00150400
    68d8:	00006671 	.word	0x00006671
    68dc:	00007a79 	.word	0x00007a79
    68e0:	0000106c 	.word	0x0000106c
    68e4:	0000668d 	.word	0x0000668d
    68e8:	00014af8 	.word	0x00014af8
    68ec:	00014ab0 	.word	0x00014ab0
    68f0:	00014dfc 	.word	0x00014dfc

000068f4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    68f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    68f6:	46ce      	mov	lr, r9
    68f8:	4647      	mov	r7, r8
    68fa:	b580      	push	{r7, lr}
    68fc:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    68fe:	4bcf      	ldr	r3, [pc, #828]	; (6c3c <hif_handle_isr+0x348>)
    6900:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    6902:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    6904:	e080      	b.n	6a08 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    6906:	4bcd      	ldr	r3, [pc, #820]	; (6c3c <hif_handle_isr+0x348>)
    6908:	9a05      	ldr	r2, [sp, #20]
    690a:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    690c:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    690e:	af04      	add	r7, sp, #16
    6910:	2204      	movs	r2, #4
    6912:	0039      	movs	r1, r7
    6914:	9805      	ldr	r0, [sp, #20]
    6916:	4bca      	ldr	r3, [pc, #808]	; (6c40 <hif_handle_isr+0x34c>)
    6918:	4798      	blx	r3
    691a:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    691c:	887b      	ldrh	r3, [r7, #2]
    691e:	b29b      	uxth	r3, r3
    6920:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    6922:	2800      	cmp	r0, #0
    6924:	d133      	bne.n	698e <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    6926:	ab04      	add	r3, sp, #16
    6928:	885b      	ldrh	r3, [r3, #2]
    692a:	b29b      	uxth	r3, r3
    692c:	429d      	cmp	r5, r3
    692e:	d004      	beq.n	693a <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    6930:	ab04      	add	r3, sp, #16
    6932:	885b      	ldrh	r3, [r3, #2]
    6934:	1aeb      	subs	r3, r5, r3
    6936:	2b04      	cmp	r3, #4
    6938:	dc39      	bgt.n	69ae <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    693a:	ab04      	add	r3, sp, #16
    693c:	781b      	ldrb	r3, [r3, #0]
    693e:	2b01      	cmp	r3, #1
    6940:	d04e      	beq.n	69e0 <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    6942:	ab04      	add	r3, sp, #16
    6944:	781b      	ldrb	r3, [r3, #0]
    6946:	2b02      	cmp	r3, #2
    6948:	d078      	beq.n	6a3c <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    694a:	ab04      	add	r3, sp, #16
    694c:	781b      	ldrb	r3, [r3, #0]
    694e:	2b04      	cmp	r3, #4
    6950:	d100      	bne.n	6954 <hif_handle_isr+0x60>
    6952:	e090      	b.n	6a76 <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    6954:	ab04      	add	r3, sp, #16
    6956:	781b      	ldrb	r3, [r3, #0]
    6958:	2b06      	cmp	r3, #6
    695a:	d100      	bne.n	695e <hif_handle_isr+0x6a>
    695c:	e0a8      	b.n	6ab0 <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    695e:	ab04      	add	r3, sp, #16
    6960:	781b      	ldrb	r3, [r3, #0]
    6962:	2b07      	cmp	r3, #7
    6964:	d100      	bne.n	6968 <hif_handle_isr+0x74>
    6966:	e0bf      	b.n	6ae8 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    6968:	ab04      	add	r3, sp, #16
    696a:	781b      	ldrb	r3, [r3, #0]
    696c:	2b05      	cmp	r3, #5
    696e:	d100      	bne.n	6972 <hif_handle_isr+0x7e>
    6970:	e0d6      	b.n	6b20 <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    6972:	4ab4      	ldr	r2, [pc, #720]	; (6c44 <hif_handle_isr+0x350>)
    6974:	49b4      	ldr	r1, [pc, #720]	; (6c48 <hif_handle_isr+0x354>)
    6976:	48b5      	ldr	r0, [pc, #724]	; (6c4c <hif_handle_isr+0x358>)
    6978:	4bb5      	ldr	r3, [pc, #724]	; (6c50 <hif_handle_isr+0x35c>)
    697a:	4798      	blx	r3
    697c:	48b5      	ldr	r0, [pc, #724]	; (6c54 <hif_handle_isr+0x360>)
    697e:	4bb6      	ldr	r3, [pc, #728]	; (6c58 <hif_handle_isr+0x364>)
    6980:	4798      	blx	r3
    6982:	200d      	movs	r0, #13
    6984:	4bb5      	ldr	r3, [pc, #724]	; (6c5c <hif_handle_isr+0x368>)
    6986:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    6988:	2406      	movs	r4, #6
    698a:	4264      	negs	r4, r4
    698c:	e116      	b.n	6bbc <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    698e:	22d2      	movs	r2, #210	; 0xd2
    6990:	32ff      	adds	r2, #255	; 0xff
    6992:	49ad      	ldr	r1, [pc, #692]	; (6c48 <hif_handle_isr+0x354>)
    6994:	48ad      	ldr	r0, [pc, #692]	; (6c4c <hif_handle_isr+0x358>)
    6996:	4bae      	ldr	r3, [pc, #696]	; (6c50 <hif_handle_isr+0x35c>)
    6998:	4798      	blx	r3
    699a:	48b1      	ldr	r0, [pc, #708]	; (6c60 <hif_handle_isr+0x36c>)
    699c:	4bae      	ldr	r3, [pc, #696]	; (6c58 <hif_handle_isr+0x364>)
    699e:	4798      	blx	r3
    69a0:	200d      	movs	r0, #13
    69a2:	4bae      	ldr	r3, [pc, #696]	; (6c5c <hif_handle_isr+0x368>)
    69a4:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    69a6:	2001      	movs	r0, #1
    69a8:	4bae      	ldr	r3, [pc, #696]	; (6c64 <hif_handle_isr+0x370>)
    69aa:	4798      	blx	r3
    69ac:	e106      	b.n	6bbc <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    69ae:	22ed      	movs	r2, #237	; 0xed
    69b0:	0052      	lsls	r2, r2, #1
    69b2:	49a5      	ldr	r1, [pc, #660]	; (6c48 <hif_handle_isr+0x354>)
    69b4:	48a5      	ldr	r0, [pc, #660]	; (6c4c <hif_handle_isr+0x358>)
    69b6:	4ca6      	ldr	r4, [pc, #664]	; (6c50 <hif_handle_isr+0x35c>)
    69b8:	47a0      	blx	r4
    69ba:	a904      	add	r1, sp, #16
    69bc:	884a      	ldrh	r2, [r1, #2]
    69be:	b292      	uxth	r2, r2
    69c0:	780b      	ldrb	r3, [r1, #0]
    69c2:	b2db      	uxtb	r3, r3
    69c4:	7849      	ldrb	r1, [r1, #1]
    69c6:	9100      	str	r1, [sp, #0]
    69c8:	0029      	movs	r1, r5
    69ca:	48a7      	ldr	r0, [pc, #668]	; (6c68 <hif_handle_isr+0x374>)
    69cc:	47a0      	blx	r4
    69ce:	200d      	movs	r0, #13
    69d0:	4ba2      	ldr	r3, [pc, #648]	; (6c5c <hif_handle_isr+0x368>)
    69d2:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    69d4:	2001      	movs	r0, #1
    69d6:	4ba3      	ldr	r3, [pc, #652]	; (6c64 <hif_handle_isr+0x370>)
    69d8:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    69da:	2406      	movs	r4, #6
    69dc:	4264      	negs	r4, r4
    69de:	e0ed      	b.n	6bbc <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    69e0:	4b96      	ldr	r3, [pc, #600]	; (6c3c <hif_handle_isr+0x348>)
    69e2:	68db      	ldr	r3, [r3, #12]
    69e4:	2b00      	cmp	r3, #0
    69e6:	d01c      	beq.n	6a22 <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    69e8:	4b94      	ldr	r3, [pc, #592]	; (6c3c <hif_handle_isr+0x348>)
    69ea:	68db      	ldr	r3, [r3, #12]
    69ec:	aa04      	add	r2, sp, #16
    69ee:	7850      	ldrb	r0, [r2, #1]
    69f0:	b2c0      	uxtb	r0, r0
    69f2:	8851      	ldrh	r1, [r2, #2]
    69f4:	9a05      	ldr	r2, [sp, #20]
    69f6:	3208      	adds	r2, #8
    69f8:	3908      	subs	r1, #8
    69fa:	b289      	uxth	r1, r1
    69fc:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    69fe:	4b8f      	ldr	r3, [pc, #572]	; (6c3c <hif_handle_isr+0x348>)
    6a00:	789b      	ldrb	r3, [r3, #2]
    6a02:	2b00      	cmp	r3, #0
    6a04:	d000      	beq.n	6a08 <hif_handle_isr+0x114>
    6a06:	e09c      	b.n	6b42 <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    6a08:	4643      	mov	r3, r8
    6a0a:	78db      	ldrb	r3, [r3, #3]
    6a0c:	2b00      	cmp	r3, #0
    6a0e:	d100      	bne.n	6a12 <hif_handle_isr+0x11e>
    6a10:	e158      	b.n	6cc4 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    6a12:	464b      	mov	r3, r9
    6a14:	78db      	ldrb	r3, [r3, #3]
    6a16:	3b01      	subs	r3, #1
    6a18:	b2db      	uxtb	r3, r3
    6a1a:	464a      	mov	r2, r9
    6a1c:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    6a1e:	4e93      	ldr	r6, [pc, #588]	; (6c6c <hif_handle_isr+0x378>)
    6a20:	e0d7      	b.n	6bd2 <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    6a22:	22f3      	movs	r2, #243	; 0xf3
    6a24:	0052      	lsls	r2, r2, #1
    6a26:	4988      	ldr	r1, [pc, #544]	; (6c48 <hif_handle_isr+0x354>)
    6a28:	4888      	ldr	r0, [pc, #544]	; (6c4c <hif_handle_isr+0x358>)
    6a2a:	4b89      	ldr	r3, [pc, #548]	; (6c50 <hif_handle_isr+0x35c>)
    6a2c:	4798      	blx	r3
    6a2e:	4890      	ldr	r0, [pc, #576]	; (6c70 <hif_handle_isr+0x37c>)
    6a30:	4b89      	ldr	r3, [pc, #548]	; (6c58 <hif_handle_isr+0x364>)
    6a32:	4798      	blx	r3
    6a34:	200d      	movs	r0, #13
    6a36:	4b89      	ldr	r3, [pc, #548]	; (6c5c <hif_handle_isr+0x368>)
    6a38:	4798      	blx	r3
    6a3a:	e7e0      	b.n	69fe <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    6a3c:	4b7f      	ldr	r3, [pc, #508]	; (6c3c <hif_handle_isr+0x348>)
    6a3e:	691b      	ldr	r3, [r3, #16]
    6a40:	2b00      	cmp	r3, #0
    6a42:	d00b      	beq.n	6a5c <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    6a44:	4b7d      	ldr	r3, [pc, #500]	; (6c3c <hif_handle_isr+0x348>)
    6a46:	691b      	ldr	r3, [r3, #16]
    6a48:	aa04      	add	r2, sp, #16
    6a4a:	7850      	ldrb	r0, [r2, #1]
    6a4c:	b2c0      	uxtb	r0, r0
    6a4e:	8851      	ldrh	r1, [r2, #2]
    6a50:	9a05      	ldr	r2, [sp, #20]
    6a52:	3208      	adds	r2, #8
    6a54:	3908      	subs	r1, #8
    6a56:	b289      	uxth	r1, r1
    6a58:	4798      	blx	r3
    6a5a:	e7d0      	b.n	69fe <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    6a5c:	22f7      	movs	r2, #247	; 0xf7
    6a5e:	0052      	lsls	r2, r2, #1
    6a60:	4979      	ldr	r1, [pc, #484]	; (6c48 <hif_handle_isr+0x354>)
    6a62:	487a      	ldr	r0, [pc, #488]	; (6c4c <hif_handle_isr+0x358>)
    6a64:	4b7a      	ldr	r3, [pc, #488]	; (6c50 <hif_handle_isr+0x35c>)
    6a66:	4798      	blx	r3
    6a68:	4882      	ldr	r0, [pc, #520]	; (6c74 <hif_handle_isr+0x380>)
    6a6a:	4b7b      	ldr	r3, [pc, #492]	; (6c58 <hif_handle_isr+0x364>)
    6a6c:	4798      	blx	r3
    6a6e:	200d      	movs	r0, #13
    6a70:	4b7a      	ldr	r3, [pc, #488]	; (6c5c <hif_handle_isr+0x368>)
    6a72:	4798      	blx	r3
    6a74:	e7c3      	b.n	69fe <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    6a76:	4b71      	ldr	r3, [pc, #452]	; (6c3c <hif_handle_isr+0x348>)
    6a78:	695b      	ldr	r3, [r3, #20]
    6a7a:	2b00      	cmp	r3, #0
    6a7c:	d00b      	beq.n	6a96 <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    6a7e:	4b6f      	ldr	r3, [pc, #444]	; (6c3c <hif_handle_isr+0x348>)
    6a80:	695b      	ldr	r3, [r3, #20]
    6a82:	aa04      	add	r2, sp, #16
    6a84:	7850      	ldrb	r0, [r2, #1]
    6a86:	b2c0      	uxtb	r0, r0
    6a88:	8851      	ldrh	r1, [r2, #2]
    6a8a:	9a05      	ldr	r2, [sp, #20]
    6a8c:	3208      	adds	r2, #8
    6a8e:	3908      	subs	r1, #8
    6a90:	b289      	uxth	r1, r1
    6a92:	4798      	blx	r3
    6a94:	e7b3      	b.n	69fe <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    6a96:	22fb      	movs	r2, #251	; 0xfb
    6a98:	0052      	lsls	r2, r2, #1
    6a9a:	496b      	ldr	r1, [pc, #428]	; (6c48 <hif_handle_isr+0x354>)
    6a9c:	486b      	ldr	r0, [pc, #428]	; (6c4c <hif_handle_isr+0x358>)
    6a9e:	4b6c      	ldr	r3, [pc, #432]	; (6c50 <hif_handle_isr+0x35c>)
    6aa0:	4798      	blx	r3
    6aa2:	4875      	ldr	r0, [pc, #468]	; (6c78 <hif_handle_isr+0x384>)
    6aa4:	4b6c      	ldr	r3, [pc, #432]	; (6c58 <hif_handle_isr+0x364>)
    6aa6:	4798      	blx	r3
    6aa8:	200d      	movs	r0, #13
    6aaa:	4b6c      	ldr	r3, [pc, #432]	; (6c5c <hif_handle_isr+0x368>)
    6aac:	4798      	blx	r3
    6aae:	e7a6      	b.n	69fe <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    6ab0:	4b62      	ldr	r3, [pc, #392]	; (6c3c <hif_handle_isr+0x348>)
    6ab2:	6a1b      	ldr	r3, [r3, #32]
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	d00b      	beq.n	6ad0 <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    6ab8:	4b60      	ldr	r3, [pc, #384]	; (6c3c <hif_handle_isr+0x348>)
    6aba:	6a1b      	ldr	r3, [r3, #32]
    6abc:	aa04      	add	r2, sp, #16
    6abe:	7850      	ldrb	r0, [r2, #1]
    6ac0:	b2c0      	uxtb	r0, r0
    6ac2:	8851      	ldrh	r1, [r2, #2]
    6ac4:	9a05      	ldr	r2, [sp, #20]
    6ac6:	3208      	adds	r2, #8
    6ac8:	3908      	subs	r1, #8
    6aca:	b289      	uxth	r1, r1
    6acc:	4798      	blx	r3
    6ace:	e796      	b.n	69fe <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    6ad0:	4a6a      	ldr	r2, [pc, #424]	; (6c7c <hif_handle_isr+0x388>)
    6ad2:	495d      	ldr	r1, [pc, #372]	; (6c48 <hif_handle_isr+0x354>)
    6ad4:	485d      	ldr	r0, [pc, #372]	; (6c4c <hif_handle_isr+0x358>)
    6ad6:	4b5e      	ldr	r3, [pc, #376]	; (6c50 <hif_handle_isr+0x35c>)
    6ad8:	4798      	blx	r3
    6ada:	4869      	ldr	r0, [pc, #420]	; (6c80 <hif_handle_isr+0x38c>)
    6adc:	4b5e      	ldr	r3, [pc, #376]	; (6c58 <hif_handle_isr+0x364>)
    6ade:	4798      	blx	r3
    6ae0:	200d      	movs	r0, #13
    6ae2:	4b5e      	ldr	r3, [pc, #376]	; (6c5c <hif_handle_isr+0x368>)
    6ae4:	4798      	blx	r3
    6ae6:	e78a      	b.n	69fe <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    6ae8:	4b54      	ldr	r3, [pc, #336]	; (6c3c <hif_handle_isr+0x348>)
    6aea:	699b      	ldr	r3, [r3, #24]
    6aec:	2b00      	cmp	r3, #0
    6aee:	d00b      	beq.n	6b08 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    6af0:	4b52      	ldr	r3, [pc, #328]	; (6c3c <hif_handle_isr+0x348>)
    6af2:	699b      	ldr	r3, [r3, #24]
    6af4:	aa04      	add	r2, sp, #16
    6af6:	7850      	ldrb	r0, [r2, #1]
    6af8:	b2c0      	uxtb	r0, r0
    6afa:	8851      	ldrh	r1, [r2, #2]
    6afc:	9a05      	ldr	r2, [sp, #20]
    6afe:	3208      	adds	r2, #8
    6b00:	3908      	subs	r1, #8
    6b02:	b289      	uxth	r1, r1
    6b04:	4798      	blx	r3
    6b06:	e77a      	b.n	69fe <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    6b08:	4a5e      	ldr	r2, [pc, #376]	; (6c84 <hif_handle_isr+0x390>)
    6b0a:	494f      	ldr	r1, [pc, #316]	; (6c48 <hif_handle_isr+0x354>)
    6b0c:	484f      	ldr	r0, [pc, #316]	; (6c4c <hif_handle_isr+0x358>)
    6b0e:	4b50      	ldr	r3, [pc, #320]	; (6c50 <hif_handle_isr+0x35c>)
    6b10:	4798      	blx	r3
    6b12:	485d      	ldr	r0, [pc, #372]	; (6c88 <hif_handle_isr+0x394>)
    6b14:	4b50      	ldr	r3, [pc, #320]	; (6c58 <hif_handle_isr+0x364>)
    6b16:	4798      	blx	r3
    6b18:	200d      	movs	r0, #13
    6b1a:	4b50      	ldr	r3, [pc, #320]	; (6c5c <hif_handle_isr+0x368>)
    6b1c:	4798      	blx	r3
    6b1e:	e76e      	b.n	69fe <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    6b20:	4b46      	ldr	r3, [pc, #280]	; (6c3c <hif_handle_isr+0x348>)
    6b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b24:	2b00      	cmp	r3, #0
    6b26:	d100      	bne.n	6b2a <hif_handle_isr+0x236>
    6b28:	e769      	b.n	69fe <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    6b2a:	4b44      	ldr	r3, [pc, #272]	; (6c3c <hif_handle_isr+0x348>)
    6b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b2e:	aa04      	add	r2, sp, #16
    6b30:	7850      	ldrb	r0, [r2, #1]
    6b32:	b2c0      	uxtb	r0, r0
    6b34:	8851      	ldrh	r1, [r2, #2]
    6b36:	9a05      	ldr	r2, [sp, #20]
    6b38:	3208      	adds	r2, #8
    6b3a:	3908      	subs	r1, #8
    6b3c:	b289      	uxth	r1, r1
    6b3e:	4798      	blx	r3
    6b40:	e75d      	b.n	69fe <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    6b42:	4a52      	ldr	r2, [pc, #328]	; (6c8c <hif_handle_isr+0x398>)
    6b44:	4940      	ldr	r1, [pc, #256]	; (6c48 <hif_handle_isr+0x354>)
    6b46:	4841      	ldr	r0, [pc, #260]	; (6c4c <hif_handle_isr+0x358>)
    6b48:	4c41      	ldr	r4, [pc, #260]	; (6c50 <hif_handle_isr+0x35c>)
    6b4a:	47a0      	blx	r4
    6b4c:	ab04      	add	r3, sp, #16
    6b4e:	7819      	ldrb	r1, [r3, #0]
    6b50:	b2c9      	uxtb	r1, r1
    6b52:	785a      	ldrb	r2, [r3, #1]
    6b54:	b2d2      	uxtb	r2, r2
    6b56:	484e      	ldr	r0, [pc, #312]	; (6c90 <hif_handle_isr+0x39c>)
    6b58:	47a0      	blx	r4
    6b5a:	200d      	movs	r0, #13
    6b5c:	4b3f      	ldr	r3, [pc, #252]	; (6c5c <hif_handle_isr+0x368>)
    6b5e:	4798      	blx	r3
					ret = hif_set_rx_done();
    6b60:	4b4c      	ldr	r3, [pc, #304]	; (6c94 <hif_handle_isr+0x3a0>)
    6b62:	4798      	blx	r3
    6b64:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    6b66:	d129      	bne.n	6bbc <hif_handle_isr+0x2c8>
    6b68:	e74e      	b.n	6a08 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    6b6a:	2287      	movs	r2, #135	; 0x87
    6b6c:	0092      	lsls	r2, r2, #2
    6b6e:	4936      	ldr	r1, [pc, #216]	; (6c48 <hif_handle_isr+0x354>)
    6b70:	4836      	ldr	r0, [pc, #216]	; (6c4c <hif_handle_isr+0x358>)
    6b72:	4b37      	ldr	r3, [pc, #220]	; (6c50 <hif_handle_isr+0x35c>)
    6b74:	4798      	blx	r3
    6b76:	4848      	ldr	r0, [pc, #288]	; (6c98 <hif_handle_isr+0x3a4>)
    6b78:	4b37      	ldr	r3, [pc, #220]	; (6c58 <hif_handle_isr+0x364>)
    6b7a:	4798      	blx	r3
    6b7c:	200d      	movs	r0, #13
    6b7e:	4b37      	ldr	r3, [pc, #220]	; (6c5c <hif_handle_isr+0x368>)
    6b80:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    6b82:	2402      	movs	r4, #2
    6b84:	4264      	negs	r4, r4
    6b86:	e019      	b.n	6bbc <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    6b88:	2289      	movs	r2, #137	; 0x89
    6b8a:	0092      	lsls	r2, r2, #2
    6b8c:	492e      	ldr	r1, [pc, #184]	; (6c48 <hif_handle_isr+0x354>)
    6b8e:	482f      	ldr	r0, [pc, #188]	; (6c4c <hif_handle_isr+0x358>)
    6b90:	4c2f      	ldr	r4, [pc, #188]	; (6c50 <hif_handle_isr+0x35c>)
    6b92:	47a0      	blx	r4
    6b94:	9903      	ldr	r1, [sp, #12]
    6b96:	4841      	ldr	r0, [pc, #260]	; (6c9c <hif_handle_isr+0x3a8>)
    6b98:	47a0      	blx	r4
    6b9a:	200d      	movs	r0, #13
    6b9c:	4b2f      	ldr	r3, [pc, #188]	; (6c5c <hif_handle_isr+0x368>)
    6b9e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    6ba0:	240c      	movs	r4, #12
    6ba2:	4264      	negs	r4, r4
    6ba4:	e00a      	b.n	6bbc <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    6ba6:	4a3e      	ldr	r2, [pc, #248]	; (6ca0 <hif_handle_isr+0x3ac>)
    6ba8:	4927      	ldr	r1, [pc, #156]	; (6c48 <hif_handle_isr+0x354>)
    6baa:	4828      	ldr	r0, [pc, #160]	; (6c4c <hif_handle_isr+0x358>)
    6bac:	4b28      	ldr	r3, [pc, #160]	; (6c50 <hif_handle_isr+0x35c>)
    6bae:	4798      	blx	r3
    6bb0:	483c      	ldr	r0, [pc, #240]	; (6ca4 <hif_handle_isr+0x3b0>)
    6bb2:	4b29      	ldr	r3, [pc, #164]	; (6c58 <hif_handle_isr+0x364>)
    6bb4:	4798      	blx	r3
    6bb6:	200d      	movs	r0, #13
    6bb8:	4b28      	ldr	r3, [pc, #160]	; (6c5c <hif_handle_isr+0x368>)
    6bba:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    6bbc:	4a3a      	ldr	r2, [pc, #232]	; (6ca8 <hif_handle_isr+0x3b4>)
    6bbe:	493b      	ldr	r1, [pc, #236]	; (6cac <hif_handle_isr+0x3b8>)
    6bc0:	4822      	ldr	r0, [pc, #136]	; (6c4c <hif_handle_isr+0x358>)
    6bc2:	4f23      	ldr	r7, [pc, #140]	; (6c50 <hif_handle_isr+0x35c>)
    6bc4:	47b8      	blx	r7
    6bc6:	0021      	movs	r1, r4
    6bc8:	4839      	ldr	r0, [pc, #228]	; (6cb0 <hif_handle_isr+0x3bc>)
    6bca:	47b8      	blx	r7
    6bcc:	200d      	movs	r0, #13
    6bce:	4b23      	ldr	r3, [pc, #140]	; (6c5c <hif_handle_isr+0x368>)
    6bd0:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    6bd2:	a903      	add	r1, sp, #12
    6bd4:	4837      	ldr	r0, [pc, #220]	; (6cb4 <hif_handle_isr+0x3c0>)
    6bd6:	47b0      	blx	r6
    6bd8:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    6bda:	d1e4      	bne.n	6ba6 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    6bdc:	9b03      	ldr	r3, [sp, #12]
    6bde:	07db      	lsls	r3, r3, #31
    6be0:	d5d2      	bpl.n	6b88 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    6be2:	2000      	movs	r0, #0
    6be4:	4b1f      	ldr	r3, [pc, #124]	; (6c64 <hif_handle_isr+0x370>)
    6be6:	4798      	blx	r3
			reg &= ~NBIT0;
    6be8:	2301      	movs	r3, #1
    6bea:	9903      	ldr	r1, [sp, #12]
    6bec:	4399      	bics	r1, r3
    6bee:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    6bf0:	4830      	ldr	r0, [pc, #192]	; (6cb4 <hif_handle_isr+0x3c0>)
    6bf2:	4b31      	ldr	r3, [pc, #196]	; (6cb8 <hif_handle_isr+0x3c4>)
    6bf4:	4798      	blx	r3
    6bf6:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    6bf8:	d1e0      	bne.n	6bbc <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    6bfa:	2201      	movs	r2, #1
    6bfc:	4b0f      	ldr	r3, [pc, #60]	; (6c3c <hif_handle_isr+0x348>)
    6bfe:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    6c00:	9b03      	ldr	r3, [sp, #12]
    6c02:	049d      	lsls	r5, r3, #18
    6c04:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    6c06:	d0b0      	beq.n	6b6a <hif_handle_isr+0x276>
				uint32 address = 0;
    6c08:	2300      	movs	r3, #0
    6c0a:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    6c0c:	a905      	add	r1, sp, #20
    6c0e:	482b      	ldr	r0, [pc, #172]	; (6cbc <hif_handle_isr+0x3c8>)
    6c10:	4b16      	ldr	r3, [pc, #88]	; (6c6c <hif_handle_isr+0x378>)
    6c12:	4798      	blx	r3
    6c14:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    6c16:	d100      	bne.n	6c1a <hif_handle_isr+0x326>
    6c18:	e675      	b.n	6906 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    6c1a:	22c8      	movs	r2, #200	; 0xc8
    6c1c:	32ff      	adds	r2, #255	; 0xff
    6c1e:	490a      	ldr	r1, [pc, #40]	; (6c48 <hif_handle_isr+0x354>)
    6c20:	480a      	ldr	r0, [pc, #40]	; (6c4c <hif_handle_isr+0x358>)
    6c22:	4b0b      	ldr	r3, [pc, #44]	; (6c50 <hif_handle_isr+0x35c>)
    6c24:	4798      	blx	r3
    6c26:	4826      	ldr	r0, [pc, #152]	; (6cc0 <hif_handle_isr+0x3cc>)
    6c28:	4b0b      	ldr	r3, [pc, #44]	; (6c58 <hif_handle_isr+0x364>)
    6c2a:	4798      	blx	r3
    6c2c:	200d      	movs	r0, #13
    6c2e:	4b0b      	ldr	r3, [pc, #44]	; (6c5c <hif_handle_isr+0x368>)
    6c30:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    6c32:	2001      	movs	r0, #1
    6c34:	4b0b      	ldr	r3, [pc, #44]	; (6c64 <hif_handle_isr+0x370>)
    6c36:	4798      	blx	r3
    6c38:	e7c0      	b.n	6bbc <hif_handle_isr+0x2c8>
    6c3a:	46c0      	nop			; (mov r8, r8)
    6c3c:	200005d0 	.word	0x200005d0
    6c40:	00007a11 	.word	0x00007a11
    6c44:	0000020f 	.word	0x0000020f
    6c48:	00014b04 	.word	0x00014b04
    6c4c:	00014ab0 	.word	0x00014ab0
    6c50:	0000f309 	.word	0x0000f309
    6c54:	00014c60 	.word	0x00014c60
    6c58:	0000f425 	.word	0x0000f425
    6c5c:	0000f33d 	.word	0x0000f33d
    6c60:	00014b5c 	.word	0x00014b5c
    6c64:	000062bd 	.word	0x000062bd
    6c68:	00014b74 	.word	0x00014b74
    6c6c:	000079f9 	.word	0x000079f9
    6c70:	00014bb4 	.word	0x00014bb4
    6c74:	00014bd4 	.word	0x00014bd4
    6c78:	00014bf8 	.word	0x00014bf8
    6c7c:	000001ff 	.word	0x000001ff
    6c80:	00014c18 	.word	0x00014c18
    6c84:	00000206 	.word	0x00000206
    6c88:	00014c3c 	.word	0x00014c3c
    6c8c:	00000215 	.word	0x00000215
    6c90:	00014c78 	.word	0x00014c78
    6c94:	000065f1 	.word	0x000065f1
    6c98:	00014ca4 	.word	0x00014ca4
    6c9c:	00014cb8 	.word	0x00014cb8
    6ca0:	0000022d 	.word	0x0000022d
    6ca4:	00014cd4 	.word	0x00014cd4
    6ca8:	0000024a 	.word	0x0000024a
    6cac:	00014b0c 	.word	0x00014b0c
    6cb0:	00014cf8 	.word	0x00014cf8
    6cb4:	00001070 	.word	0x00001070
    6cb8:	00007a05 	.word	0x00007a05
    6cbc:	00001084 	.word	0x00001084
    6cc0:	00014b38 	.word	0x00014b38
			}
		}
	}

	return ret;
}
    6cc4:	2000      	movs	r0, #0
    6cc6:	b007      	add	sp, #28
    6cc8:	bc0c      	pop	{r2, r3}
    6cca:	4690      	mov	r8, r2
    6ccc:	4699      	mov	r9, r3
    6cce:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006cd0 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    6cd0:	b570      	push	{r4, r5, r6, lr}
    6cd2:	0014      	movs	r4, r2
    6cd4:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    6cd6:	2800      	cmp	r0, #0
    6cd8:	d003      	beq.n	6ce2 <hif_receive+0x12>
    6cda:	2900      	cmp	r1, #0
    6cdc:	d001      	beq.n	6ce2 <hif_receive+0x12>
    6cde:	2a00      	cmp	r2, #0
    6ce0:	d112      	bne.n	6d08 <hif_receive+0x38>
	{
		if(isDone)
    6ce2:	2d00      	cmp	r5, #0
    6ce4:	d002      	beq.n	6cec <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    6ce6:	4b27      	ldr	r3, [pc, #156]	; (6d84 <hif_receive+0xb4>)
    6ce8:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    6cea:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    6cec:	4a26      	ldr	r2, [pc, #152]	; (6d88 <hif_receive+0xb8>)
    6cee:	4927      	ldr	r1, [pc, #156]	; (6d8c <hif_receive+0xbc>)
    6cf0:	4827      	ldr	r0, [pc, #156]	; (6d90 <hif_receive+0xc0>)
    6cf2:	4b28      	ldr	r3, [pc, #160]	; (6d94 <hif_receive+0xc4>)
    6cf4:	4798      	blx	r3
    6cf6:	4828      	ldr	r0, [pc, #160]	; (6d98 <hif_receive+0xc8>)
    6cf8:	4b28      	ldr	r3, [pc, #160]	; (6d9c <hif_receive+0xcc>)
    6cfa:	4798      	blx	r3
    6cfc:	200d      	movs	r0, #13
    6cfe:	4b28      	ldr	r3, [pc, #160]	; (6da0 <hif_receive+0xd0>)
    6d00:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    6d02:	200c      	movs	r0, #12
    6d04:	4240      	negs	r0, r0
    6d06:	e7f0      	b.n	6cea <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    6d08:	4b26      	ldr	r3, [pc, #152]	; (6da4 <hif_receive+0xd4>)
    6d0a:	689b      	ldr	r3, [r3, #8]
    6d0c:	429a      	cmp	r2, r3
    6d0e:	d81a      	bhi.n	6d46 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    6d10:	4b24      	ldr	r3, [pc, #144]	; (6da4 <hif_receive+0xd4>)
    6d12:	685b      	ldr	r3, [r3, #4]
    6d14:	4298      	cmp	r0, r3
    6d16:	d326      	bcc.n	6d66 <hif_receive+0x96>
    6d18:	1886      	adds	r6, r0, r2
    6d1a:	4a22      	ldr	r2, [pc, #136]	; (6da4 <hif_receive+0xd4>)
    6d1c:	6853      	ldr	r3, [r2, #4]
    6d1e:	6892      	ldr	r2, [r2, #8]
    6d20:	189b      	adds	r3, r3, r2
    6d22:	429e      	cmp	r6, r3
    6d24:	d81f      	bhi.n	6d66 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    6d26:	0022      	movs	r2, r4
    6d28:	4b1f      	ldr	r3, [pc, #124]	; (6da8 <hif_receive+0xd8>)
    6d2a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    6d2c:	2800      	cmp	r0, #0
    6d2e:	d1dc      	bne.n	6cea <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    6d30:	4a1c      	ldr	r2, [pc, #112]	; (6da4 <hif_receive+0xd4>)
    6d32:	6853      	ldr	r3, [r2, #4]
    6d34:	6892      	ldr	r2, [r2, #8]
    6d36:	189b      	adds	r3, r3, r2
    6d38:	429e      	cmp	r6, r3
    6d3a:	d001      	beq.n	6d40 <hif_receive+0x70>
    6d3c:	2d00      	cmp	r5, #0
    6d3e:	d0d4      	beq.n	6cea <hif_receive+0x1a>
		ret = hif_set_rx_done();
    6d40:	4b10      	ldr	r3, [pc, #64]	; (6d84 <hif_receive+0xb4>)
    6d42:	4798      	blx	r3
    6d44:	e7d1      	b.n	6cea <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    6d46:	4a19      	ldr	r2, [pc, #100]	; (6dac <hif_receive+0xdc>)
    6d48:	4910      	ldr	r1, [pc, #64]	; (6d8c <hif_receive+0xbc>)
    6d4a:	4811      	ldr	r0, [pc, #68]	; (6d90 <hif_receive+0xc0>)
    6d4c:	4d11      	ldr	r5, [pc, #68]	; (6d94 <hif_receive+0xc4>)
    6d4e:	47a8      	blx	r5
    6d50:	4b14      	ldr	r3, [pc, #80]	; (6da4 <hif_receive+0xd4>)
    6d52:	689a      	ldr	r2, [r3, #8]
    6d54:	0021      	movs	r1, r4
    6d56:	4816      	ldr	r0, [pc, #88]	; (6db0 <hif_receive+0xe0>)
    6d58:	47a8      	blx	r5
    6d5a:	200d      	movs	r0, #13
    6d5c:	4b10      	ldr	r3, [pc, #64]	; (6da0 <hif_receive+0xd0>)
    6d5e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    6d60:	200c      	movs	r0, #12
    6d62:	4240      	negs	r0, r0
		goto ERR1;
    6d64:	e7c1      	b.n	6cea <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    6d66:	4a13      	ldr	r2, [pc, #76]	; (6db4 <hif_receive+0xe4>)
    6d68:	4908      	ldr	r1, [pc, #32]	; (6d8c <hif_receive+0xbc>)
    6d6a:	4809      	ldr	r0, [pc, #36]	; (6d90 <hif_receive+0xc0>)
    6d6c:	4b09      	ldr	r3, [pc, #36]	; (6d94 <hif_receive+0xc4>)
    6d6e:	4798      	blx	r3
    6d70:	4811      	ldr	r0, [pc, #68]	; (6db8 <hif_receive+0xe8>)
    6d72:	4b0a      	ldr	r3, [pc, #40]	; (6d9c <hif_receive+0xcc>)
    6d74:	4798      	blx	r3
    6d76:	200d      	movs	r0, #13
    6d78:	4b09      	ldr	r3, [pc, #36]	; (6da0 <hif_receive+0xd0>)
    6d7a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    6d7c:	200c      	movs	r0, #12
    6d7e:	4240      	negs	r0, r0
		goto ERR1;
    6d80:	e7b3      	b.n	6cea <hif_receive+0x1a>
    6d82:	46c0      	nop			; (mov r8, r8)
    6d84:	000065f1 	.word	0x000065f1
    6d88:	0000026b 	.word	0x0000026b
    6d8c:	00014b1c 	.word	0x00014b1c
    6d90:	00014ab0 	.word	0x00014ab0
    6d94:	0000f309 	.word	0x0000f309
    6d98:	00014d28 	.word	0x00014d28
    6d9c:	0000f425 	.word	0x0000f425
    6da0:	0000f33d 	.word	0x0000f33d
    6da4:	200005d0 	.word	0x200005d0
    6da8:	00007a11 	.word	0x00007a11
    6dac:	00000273 	.word	0x00000273
    6db0:	00014d48 	.word	0x00014d48
    6db4:	00000279 	.word	0x00000279
    6db8:	00014d90 	.word	0x00014d90

00006dbc <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    6dbc:	b570      	push	{r4, r5, r6, lr}
    6dbe:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    6dc0:	2807      	cmp	r0, #7
    6dc2:	d81f      	bhi.n	6e04 <hif_register_cb+0x48>
    6dc4:	0083      	lsls	r3, r0, #2
    6dc6:	4a16      	ldr	r2, [pc, #88]	; (6e20 <hif_register_cb+0x64>)
    6dc8:	58d3      	ldr	r3, [r2, r3]
    6dca:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    6dcc:	4b15      	ldr	r3, [pc, #84]	; (6e24 <hif_register_cb+0x68>)
    6dce:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    6dd0:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    6dd2:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    6dd4:	4b13      	ldr	r3, [pc, #76]	; (6e24 <hif_register_cb+0x68>)
    6dd6:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    6dd8:	2000      	movs	r0, #0
			break;
    6dda:	e7fa      	b.n	6dd2 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    6ddc:	4b11      	ldr	r3, [pc, #68]	; (6e24 <hif_register_cb+0x68>)
    6dde:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    6de0:	2000      	movs	r0, #0
			break;
    6de2:	e7f6      	b.n	6dd2 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    6de4:	4b0f      	ldr	r3, [pc, #60]	; (6e24 <hif_register_cb+0x68>)
    6de6:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    6de8:	2000      	movs	r0, #0
			break;
    6dea:	e7f2      	b.n	6dd2 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    6dec:	4b0d      	ldr	r3, [pc, #52]	; (6e24 <hif_register_cb+0x68>)
    6dee:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    6df0:	2000      	movs	r0, #0
			break;
    6df2:	e7ee      	b.n	6dd2 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    6df4:	4b0b      	ldr	r3, [pc, #44]	; (6e24 <hif_register_cb+0x68>)
    6df6:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    6df8:	2000      	movs	r0, #0
			break;
    6dfa:	e7ea      	b.n	6dd2 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    6dfc:	4b09      	ldr	r3, [pc, #36]	; (6e24 <hif_register_cb+0x68>)
    6dfe:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    6e00:	2000      	movs	r0, #0
			break;
    6e02:	e7e6      	b.n	6dd2 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    6e04:	4a08      	ldr	r2, [pc, #32]	; (6e28 <hif_register_cb+0x6c>)
    6e06:	4909      	ldr	r1, [pc, #36]	; (6e2c <hif_register_cb+0x70>)
    6e08:	4809      	ldr	r0, [pc, #36]	; (6e30 <hif_register_cb+0x74>)
    6e0a:	4d0a      	ldr	r5, [pc, #40]	; (6e34 <hif_register_cb+0x78>)
    6e0c:	47a8      	blx	r5
    6e0e:	0021      	movs	r1, r4
    6e10:	4809      	ldr	r0, [pc, #36]	; (6e38 <hif_register_cb+0x7c>)
    6e12:	47a8      	blx	r5
    6e14:	200d      	movs	r0, #13
    6e16:	4b09      	ldr	r3, [pc, #36]	; (6e3c <hif_register_cb+0x80>)
    6e18:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    6e1a:	200c      	movs	r0, #12
    6e1c:	4240      	negs	r0, r0
			break;
    6e1e:	e7d8      	b.n	6dd2 <hif_register_cb+0x16>
    6e20:	00014ad8 	.word	0x00014ad8
    6e24:	200005d0 	.word	0x200005d0
    6e28:	000002b1 	.word	0x000002b1
    6e2c:	00014b28 	.word	0x00014b28
    6e30:	00014ab0 	.word	0x00014ab0
    6e34:	0000f309 	.word	0x0000f309
    6e38:	00014dd4 	.word	0x00014dd4
    6e3c:	0000f33d 	.word	0x0000f33d

00006e40 <hif_init>:
{
    6e40:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    6e42:	2228      	movs	r2, #40	; 0x28
    6e44:	2100      	movs	r1, #0
    6e46:	4806      	ldr	r0, [pc, #24]	; (6e60 <hif_init+0x20>)
    6e48:	4b06      	ldr	r3, [pc, #24]	; (6e64 <hif_init+0x24>)
    6e4a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    6e4c:	4806      	ldr	r0, [pc, #24]	; (6e68 <hif_init+0x28>)
    6e4e:	4b07      	ldr	r3, [pc, #28]	; (6e6c <hif_init+0x2c>)
    6e50:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    6e52:	4907      	ldr	r1, [pc, #28]	; (6e70 <hif_init+0x30>)
    6e54:	2003      	movs	r0, #3
    6e56:	4b07      	ldr	r3, [pc, #28]	; (6e74 <hif_init+0x34>)
    6e58:	4798      	blx	r3
}
    6e5a:	2000      	movs	r0, #0
    6e5c:	bd10      	pop	{r4, pc}
    6e5e:	46c0      	nop			; (mov r8, r8)
    6e60:	200005d0 	.word	0x200005d0
    6e64:	000065b1 	.word	0x000065b1
    6e68:	000065dd 	.word	0x000065dd
    6e6c:	00006265 	.word	0x00006265
    6e70:	000065ed 	.word	0x000065ed
    6e74:	00006dbd 	.word	0x00006dbd

00006e78 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    6e78:	b530      	push	{r4, r5, lr}
    6e7a:	b09f      	sub	sp, #124	; 0x7c
    6e7c:	0004      	movs	r4, r0
    6e7e:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    6e80:	282c      	cmp	r0, #44	; 0x2c
    6e82:	d02f      	beq.n	6ee4 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    6e84:	281b      	cmp	r0, #27
    6e86:	d03d      	beq.n	6f04 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    6e88:	2806      	cmp	r0, #6
    6e8a:	d04b      	beq.n	6f24 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    6e8c:	280e      	cmp	r0, #14
    6e8e:	d027      	beq.n	6ee0 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    6e90:	2832      	cmp	r0, #50	; 0x32
    6e92:	d057      	beq.n	6f44 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    6e94:	282f      	cmp	r0, #47	; 0x2f
    6e96:	d065      	beq.n	6f64 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    6e98:	2834      	cmp	r0, #52	; 0x34
    6e9a:	d100      	bne.n	6e9e <m2m_wifi_cb+0x26>
    6e9c:	e077      	b.n	6f8e <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    6e9e:	2811      	cmp	r0, #17
    6ea0:	d100      	bne.n	6ea4 <m2m_wifi_cb+0x2c>
    6ea2:	e096      	b.n	6fd2 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    6ea4:	2813      	cmp	r0, #19
    6ea6:	d100      	bne.n	6eaa <m2m_wifi_cb+0x32>
    6ea8:	e0ac      	b.n	7004 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    6eaa:	2804      	cmp	r0, #4
    6eac:	d100      	bne.n	6eb0 <m2m_wifi_cb+0x38>
    6eae:	e0bb      	b.n	7028 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    6eb0:	2865      	cmp	r0, #101	; 0x65
    6eb2:	d100      	bne.n	6eb6 <m2m_wifi_cb+0x3e>
    6eb4:	e0ca      	b.n	704c <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    6eb6:	2809      	cmp	r0, #9
    6eb8:	d100      	bne.n	6ebc <m2m_wifi_cb+0x44>
    6eba:	e0d9      	b.n	7070 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    6ebc:	282a      	cmp	r0, #42	; 0x2a
    6ebe:	d100      	bne.n	6ec2 <m2m_wifi_cb+0x4a>
    6ec0:	e0e8      	b.n	7094 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    6ec2:	2820      	cmp	r0, #32
    6ec4:	d100      	bne.n	6ec8 <m2m_wifi_cb+0x50>
    6ec6:	e0f7      	b.n	70b8 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    6ec8:	2295      	movs	r2, #149	; 0x95
    6eca:	0052      	lsls	r2, r2, #1
    6ecc:	4989      	ldr	r1, [pc, #548]	; (70f4 <m2m_wifi_cb+0x27c>)
    6ece:	488a      	ldr	r0, [pc, #552]	; (70f8 <m2m_wifi_cb+0x280>)
    6ed0:	4d8a      	ldr	r5, [pc, #552]	; (70fc <m2m_wifi_cb+0x284>)
    6ed2:	47a8      	blx	r5
    6ed4:	0021      	movs	r1, r4
    6ed6:	488a      	ldr	r0, [pc, #552]	; (7100 <m2m_wifi_cb+0x288>)
    6ed8:	47a8      	blx	r5
    6eda:	200d      	movs	r0, #13
    6edc:	4b89      	ldr	r3, [pc, #548]	; (7104 <m2m_wifi_cb+0x28c>)
    6ede:	4798      	blx	r3
	}
}
    6ee0:	b01f      	add	sp, #124	; 0x7c
    6ee2:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    6ee4:	2300      	movs	r3, #0
    6ee6:	2204      	movs	r2, #4
    6ee8:	a903      	add	r1, sp, #12
    6eea:	0028      	movs	r0, r5
    6eec:	4c86      	ldr	r4, [pc, #536]	; (7108 <m2m_wifi_cb+0x290>)
    6eee:	47a0      	blx	r4
    6ef0:	2800      	cmp	r0, #0
    6ef2:	d1f5      	bne.n	6ee0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6ef4:	4b85      	ldr	r3, [pc, #532]	; (710c <m2m_wifi_cb+0x294>)
    6ef6:	681b      	ldr	r3, [r3, #0]
    6ef8:	2b00      	cmp	r3, #0
    6efa:	d0f1      	beq.n	6ee0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    6efc:	a903      	add	r1, sp, #12
    6efe:	302c      	adds	r0, #44	; 0x2c
    6f00:	4798      	blx	r3
    6f02:	e7ed      	b.n	6ee0 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    6f04:	2300      	movs	r3, #0
    6f06:	2208      	movs	r2, #8
    6f08:	a903      	add	r1, sp, #12
    6f0a:	0028      	movs	r0, r5
    6f0c:	4c7e      	ldr	r4, [pc, #504]	; (7108 <m2m_wifi_cb+0x290>)
    6f0e:	47a0      	blx	r4
    6f10:	2800      	cmp	r0, #0
    6f12:	d1e5      	bne.n	6ee0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6f14:	4b7d      	ldr	r3, [pc, #500]	; (710c <m2m_wifi_cb+0x294>)
    6f16:	681b      	ldr	r3, [r3, #0]
    6f18:	2b00      	cmp	r3, #0
    6f1a:	d0e1      	beq.n	6ee0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    6f1c:	a903      	add	r1, sp, #12
    6f1e:	301b      	adds	r0, #27
    6f20:	4798      	blx	r3
    6f22:	e7dd      	b.n	6ee0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    6f24:	2301      	movs	r3, #1
    6f26:	2230      	movs	r2, #48	; 0x30
    6f28:	a903      	add	r1, sp, #12
    6f2a:	0028      	movs	r0, r5
    6f2c:	4c76      	ldr	r4, [pc, #472]	; (7108 <m2m_wifi_cb+0x290>)
    6f2e:	47a0      	blx	r4
    6f30:	2800      	cmp	r0, #0
    6f32:	d1d5      	bne.n	6ee0 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    6f34:	4b75      	ldr	r3, [pc, #468]	; (710c <m2m_wifi_cb+0x294>)
    6f36:	681b      	ldr	r3, [r3, #0]
    6f38:	2b00      	cmp	r3, #0
    6f3a:	d0d1      	beq.n	6ee0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    6f3c:	a903      	add	r1, sp, #12
    6f3e:	3006      	adds	r0, #6
    6f40:	4798      	blx	r3
    6f42:	e7cd      	b.n	6ee0 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    6f44:	2300      	movs	r3, #0
    6f46:	2214      	movs	r2, #20
    6f48:	a903      	add	r1, sp, #12
    6f4a:	0028      	movs	r0, r5
    6f4c:	4c6e      	ldr	r4, [pc, #440]	; (7108 <m2m_wifi_cb+0x290>)
    6f4e:	47a0      	blx	r4
    6f50:	2800      	cmp	r0, #0
    6f52:	d1c5      	bne.n	6ee0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6f54:	4b6d      	ldr	r3, [pc, #436]	; (710c <m2m_wifi_cb+0x294>)
    6f56:	681b      	ldr	r3, [r3, #0]
    6f58:	2b00      	cmp	r3, #0
    6f5a:	d0c1      	beq.n	6ee0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    6f5c:	a903      	add	r1, sp, #12
    6f5e:	3032      	adds	r0, #50	; 0x32
    6f60:	4798      	blx	r3
    6f62:	e7bd      	b.n	6ee0 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    6f64:	2264      	movs	r2, #100	; 0x64
    6f66:	2100      	movs	r1, #0
    6f68:	a803      	add	r0, sp, #12
    6f6a:	4b69      	ldr	r3, [pc, #420]	; (7110 <m2m_wifi_cb+0x298>)
    6f6c:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    6f6e:	2300      	movs	r3, #0
    6f70:	2264      	movs	r2, #100	; 0x64
    6f72:	a903      	add	r1, sp, #12
    6f74:	0028      	movs	r0, r5
    6f76:	4c64      	ldr	r4, [pc, #400]	; (7108 <m2m_wifi_cb+0x290>)
    6f78:	47a0      	blx	r4
    6f7a:	2800      	cmp	r0, #0
    6f7c:	d1b0      	bne.n	6ee0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6f7e:	4b63      	ldr	r3, [pc, #396]	; (710c <m2m_wifi_cb+0x294>)
    6f80:	681b      	ldr	r3, [r3, #0]
    6f82:	2b00      	cmp	r3, #0
    6f84:	d0ac      	beq.n	6ee0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    6f86:	a903      	add	r1, sp, #12
    6f88:	302f      	adds	r0, #47	; 0x2f
    6f8a:	4798      	blx	r3
    6f8c:	e7a8      	b.n	6ee0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    6f8e:	2300      	movs	r3, #0
    6f90:	2204      	movs	r2, #4
    6f92:	a903      	add	r1, sp, #12
    6f94:	0028      	movs	r0, r5
    6f96:	4c5c      	ldr	r4, [pc, #368]	; (7108 <m2m_wifi_cb+0x290>)
    6f98:	47a0      	blx	r4
    6f9a:	2800      	cmp	r0, #0
    6f9c:	d1a0      	bne.n	6ee0 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    6f9e:	485d      	ldr	r0, [pc, #372]	; (7114 <m2m_wifi_cb+0x29c>)
    6fa0:	4d56      	ldr	r5, [pc, #344]	; (70fc <m2m_wifi_cb+0x284>)
    6fa2:	47a8      	blx	r5
    6fa4:	9c03      	ldr	r4, [sp, #12]
    6fa6:	0a23      	lsrs	r3, r4, #8
    6fa8:	20ff      	movs	r0, #255	; 0xff
    6faa:	4003      	ands	r3, r0
    6fac:	0c22      	lsrs	r2, r4, #16
    6fae:	4002      	ands	r2, r0
    6fb0:	0e21      	lsrs	r1, r4, #24
    6fb2:	4020      	ands	r0, r4
    6fb4:	9000      	str	r0, [sp, #0]
    6fb6:	4858      	ldr	r0, [pc, #352]	; (7118 <m2m_wifi_cb+0x2a0>)
    6fb8:	47a8      	blx	r5
    6fba:	200d      	movs	r0, #13
    6fbc:	4b51      	ldr	r3, [pc, #324]	; (7104 <m2m_wifi_cb+0x28c>)
    6fbe:	4798      	blx	r3
			if (gpfAppWifiCb)
    6fc0:	4b52      	ldr	r3, [pc, #328]	; (710c <m2m_wifi_cb+0x294>)
    6fc2:	681b      	ldr	r3, [r3, #0]
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	d100      	bne.n	6fca <m2m_wifi_cb+0x152>
    6fc8:	e78a      	b.n	6ee0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    6fca:	2100      	movs	r1, #0
    6fcc:	2034      	movs	r0, #52	; 0x34
    6fce:	4798      	blx	r3
    6fd0:	e786      	b.n	6ee0 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    6fd2:	2200      	movs	r2, #0
    6fd4:	4b51      	ldr	r3, [pc, #324]	; (711c <m2m_wifi_cb+0x2a4>)
    6fd6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    6fd8:	2300      	movs	r3, #0
    6fda:	3204      	adds	r2, #4
    6fdc:	a903      	add	r1, sp, #12
    6fde:	0028      	movs	r0, r5
    6fe0:	4c49      	ldr	r4, [pc, #292]	; (7108 <m2m_wifi_cb+0x290>)
    6fe2:	47a0      	blx	r4
    6fe4:	2800      	cmp	r0, #0
    6fe6:	d000      	beq.n	6fea <m2m_wifi_cb+0x172>
    6fe8:	e77a      	b.n	6ee0 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    6fea:	ab03      	add	r3, sp, #12
    6fec:	781a      	ldrb	r2, [r3, #0]
    6fee:	4b4c      	ldr	r3, [pc, #304]	; (7120 <m2m_wifi_cb+0x2a8>)
    6ff0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    6ff2:	4b46      	ldr	r3, [pc, #280]	; (710c <m2m_wifi_cb+0x294>)
    6ff4:	681b      	ldr	r3, [r3, #0]
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	d100      	bne.n	6ffc <m2m_wifi_cb+0x184>
    6ffa:	e771      	b.n	6ee0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    6ffc:	a903      	add	r1, sp, #12
    6ffe:	3011      	adds	r0, #17
    7000:	4798      	blx	r3
    7002:	e76d      	b.n	6ee0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    7004:	2300      	movs	r3, #0
    7006:	222c      	movs	r2, #44	; 0x2c
    7008:	a903      	add	r1, sp, #12
    700a:	0028      	movs	r0, r5
    700c:	4c3e      	ldr	r4, [pc, #248]	; (7108 <m2m_wifi_cb+0x290>)
    700e:	47a0      	blx	r4
    7010:	2800      	cmp	r0, #0
    7012:	d000      	beq.n	7016 <m2m_wifi_cb+0x19e>
    7014:	e764      	b.n	6ee0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    7016:	4b3d      	ldr	r3, [pc, #244]	; (710c <m2m_wifi_cb+0x294>)
    7018:	681b      	ldr	r3, [r3, #0]
    701a:	2b00      	cmp	r3, #0
    701c:	d100      	bne.n	7020 <m2m_wifi_cb+0x1a8>
    701e:	e75f      	b.n	6ee0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    7020:	a903      	add	r1, sp, #12
    7022:	3013      	adds	r0, #19
    7024:	4798      	blx	r3
    7026:	e75b      	b.n	6ee0 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    7028:	2300      	movs	r3, #0
    702a:	2204      	movs	r2, #4
    702c:	a91c      	add	r1, sp, #112	; 0x70
    702e:	0028      	movs	r0, r5
    7030:	4c35      	ldr	r4, [pc, #212]	; (7108 <m2m_wifi_cb+0x290>)
    7032:	47a0      	blx	r4
    7034:	2800      	cmp	r0, #0
    7036:	d000      	beq.n	703a <m2m_wifi_cb+0x1c2>
    7038:	e752      	b.n	6ee0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    703a:	4b34      	ldr	r3, [pc, #208]	; (710c <m2m_wifi_cb+0x294>)
    703c:	681b      	ldr	r3, [r3, #0]
    703e:	2b00      	cmp	r3, #0
    7040:	d100      	bne.n	7044 <m2m_wifi_cb+0x1cc>
    7042:	e74d      	b.n	6ee0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    7044:	a91c      	add	r1, sp, #112	; 0x70
    7046:	3004      	adds	r0, #4
    7048:	4798      	blx	r3
    704a:	e749      	b.n	6ee0 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    704c:	2300      	movs	r3, #0
    704e:	2204      	movs	r2, #4
    7050:	a91c      	add	r1, sp, #112	; 0x70
    7052:	0028      	movs	r0, r5
    7054:	4c2c      	ldr	r4, [pc, #176]	; (7108 <m2m_wifi_cb+0x290>)
    7056:	47a0      	blx	r4
    7058:	2800      	cmp	r0, #0
    705a:	d000      	beq.n	705e <m2m_wifi_cb+0x1e6>
    705c:	e740      	b.n	6ee0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    705e:	4b2b      	ldr	r3, [pc, #172]	; (710c <m2m_wifi_cb+0x294>)
    7060:	681b      	ldr	r3, [r3, #0]
    7062:	2b00      	cmp	r3, #0
    7064:	d100      	bne.n	7068 <m2m_wifi_cb+0x1f0>
    7066:	e73b      	b.n	6ee0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    7068:	a91c      	add	r1, sp, #112	; 0x70
    706a:	3065      	adds	r0, #101	; 0x65
    706c:	4798      	blx	r3
    706e:	e737      	b.n	6ee0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    7070:	2301      	movs	r3, #1
    7072:	2264      	movs	r2, #100	; 0x64
    7074:	a903      	add	r1, sp, #12
    7076:	0028      	movs	r0, r5
    7078:	4c23      	ldr	r4, [pc, #140]	; (7108 <m2m_wifi_cb+0x290>)
    707a:	47a0      	blx	r4
    707c:	2800      	cmp	r0, #0
    707e:	d000      	beq.n	7082 <m2m_wifi_cb+0x20a>
    7080:	e72e      	b.n	6ee0 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    7082:	4b22      	ldr	r3, [pc, #136]	; (710c <m2m_wifi_cb+0x294>)
    7084:	681b      	ldr	r3, [r3, #0]
    7086:	2b00      	cmp	r3, #0
    7088:	d100      	bne.n	708c <m2m_wifi_cb+0x214>
    708a:	e729      	b.n	6ee0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    708c:	a903      	add	r1, sp, #12
    708e:	3009      	adds	r0, #9
    7090:	4798      	blx	r3
    7092:	e725      	b.n	6ee0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    7094:	2301      	movs	r3, #1
    7096:	2204      	movs	r2, #4
    7098:	a903      	add	r1, sp, #12
    709a:	0028      	movs	r0, r5
    709c:	4c1a      	ldr	r4, [pc, #104]	; (7108 <m2m_wifi_cb+0x290>)
    709e:	47a0      	blx	r4
    70a0:	2800      	cmp	r0, #0
    70a2:	d000      	beq.n	70a6 <m2m_wifi_cb+0x22e>
    70a4:	e71c      	b.n	6ee0 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    70a6:	4b19      	ldr	r3, [pc, #100]	; (710c <m2m_wifi_cb+0x294>)
    70a8:	681b      	ldr	r3, [r3, #0]
    70aa:	2b00      	cmp	r3, #0
    70ac:	d100      	bne.n	70b0 <m2m_wifi_cb+0x238>
    70ae:	e717      	b.n	6ee0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    70b0:	a903      	add	r1, sp, #12
    70b2:	302a      	adds	r0, #42	; 0x2a
    70b4:	4798      	blx	r3
    70b6:	e713      	b.n	6ee0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    70b8:	2300      	movs	r3, #0
    70ba:	2208      	movs	r2, #8
    70bc:	a903      	add	r1, sp, #12
    70be:	0028      	movs	r0, r5
    70c0:	4c11      	ldr	r4, [pc, #68]	; (7108 <m2m_wifi_cb+0x290>)
    70c2:	47a0      	blx	r4
    70c4:	2800      	cmp	r0, #0
    70c6:	d000      	beq.n	70ca <m2m_wifi_cb+0x252>
    70c8:	e70a      	b.n	6ee0 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    70ca:	ab03      	add	r3, sp, #12
    70cc:	889a      	ldrh	r2, [r3, #4]
    70ce:	0028      	movs	r0, r5
    70d0:	3008      	adds	r0, #8
    70d2:	2301      	movs	r3, #1
    70d4:	9903      	ldr	r1, [sp, #12]
    70d6:	4c0c      	ldr	r4, [pc, #48]	; (7108 <m2m_wifi_cb+0x290>)
    70d8:	47a0      	blx	r4
    70da:	2800      	cmp	r0, #0
    70dc:	d000      	beq.n	70e0 <m2m_wifi_cb+0x268>
    70de:	e6ff      	b.n	6ee0 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    70e0:	4b0a      	ldr	r3, [pc, #40]	; (710c <m2m_wifi_cb+0x294>)
    70e2:	681b      	ldr	r3, [r3, #0]
    70e4:	2b00      	cmp	r3, #0
    70e6:	d100      	bne.n	70ea <m2m_wifi_cb+0x272>
    70e8:	e6fa      	b.n	6ee0 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    70ea:	a903      	add	r1, sp, #12
    70ec:	3020      	adds	r0, #32
    70ee:	4798      	blx	r3
    70f0:	e6f6      	b.n	6ee0 <m2m_wifi_cb+0x68>
    70f2:	46c0      	nop			; (mov r8, r8)
    70f4:	00014e18 	.word	0x00014e18
    70f8:	00014ab0 	.word	0x00014ab0
    70fc:	0000f309 	.word	0x0000f309
    7100:	00014e68 	.word	0x00014e68
    7104:	0000f33d 	.word	0x0000f33d
    7108:	00006cd1 	.word	0x00006cd1
    710c:	20000218 	.word	0x20000218
    7110:	000065b1 	.word	0x000065b1
    7114:	00014de0 	.word	0x00014de0
    7118:	00014e48 	.word	0x00014e48
    711c:	2000021d 	.word	0x2000021d
    7120:	2000021c 	.word	0x2000021c

00007124 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    7124:	b5f0      	push	{r4, r5, r6, r7, lr}
    7126:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    7128:	2201      	movs	r2, #1
    712a:	230f      	movs	r3, #15
    712c:	446b      	add	r3, sp
    712e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    7130:	2800      	cmp	r0, #0
    7132:	d061      	beq.n	71f8 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    7134:	6802      	ldr	r2, [r0, #0]
    7136:	4b32      	ldr	r3, [pc, #200]	; (7200 <m2m_wifi_init+0xdc>)
    7138:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    713a:	2200      	movs	r2, #0
    713c:	4b31      	ldr	r3, [pc, #196]	; (7204 <m2m_wifi_init+0xe0>)
    713e:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    7140:	200f      	movs	r0, #15
    7142:	4468      	add	r0, sp
    7144:	4b30      	ldr	r3, [pc, #192]	; (7208 <m2m_wifi_init+0xe4>)
    7146:	4798      	blx	r3
    7148:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    714a:	d002      	beq.n	7152 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    714c:	0020      	movs	r0, r4
    714e:	b00f      	add	sp, #60	; 0x3c
    7150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    7152:	2000      	movs	r0, #0
    7154:	4b2d      	ldr	r3, [pc, #180]	; (720c <m2m_wifi_init+0xe8>)
    7156:	4798      	blx	r3
    7158:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    715a:	d149      	bne.n	71f0 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    715c:	492c      	ldr	r1, [pc, #176]	; (7210 <m2m_wifi_init+0xec>)
    715e:	2001      	movs	r0, #1
    7160:	4b2c      	ldr	r3, [pc, #176]	; (7214 <m2m_wifi_init+0xf0>)
    7162:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    7164:	ae04      	add	r6, sp, #16
    7166:	0030      	movs	r0, r6
    7168:	4b2b      	ldr	r3, [pc, #172]	; (7218 <m2m_wifi_init+0xf4>)
    716a:	4798      	blx	r3
    716c:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    716e:	482b      	ldr	r0, [pc, #172]	; (721c <m2m_wifi_init+0xf8>)
    7170:	4d2b      	ldr	r5, [pc, #172]	; (7220 <m2m_wifi_init+0xfc>)
    7172:	47a8      	blx	r5
    7174:	79b3      	ldrb	r3, [r6, #6]
    7176:	7972      	ldrb	r2, [r6, #5]
    7178:	7931      	ldrb	r1, [r6, #4]
    717a:	8c30      	ldrh	r0, [r6, #32]
    717c:	9000      	str	r0, [sp, #0]
    717e:	4829      	ldr	r0, [pc, #164]	; (7224 <m2m_wifi_init+0x100>)
    7180:	47a8      	blx	r5
    7182:	200d      	movs	r0, #13
    7184:	4f28      	ldr	r7, [pc, #160]	; (7228 <m2m_wifi_init+0x104>)
    7186:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    7188:	4824      	ldr	r0, [pc, #144]	; (721c <m2m_wifi_init+0xf8>)
    718a:	47a8      	blx	r5
    718c:	2226      	movs	r2, #38	; 0x26
    718e:	446a      	add	r2, sp
    7190:	211a      	movs	r1, #26
    7192:	4469      	add	r1, sp
    7194:	4825      	ldr	r0, [pc, #148]	; (722c <m2m_wifi_init+0x108>)
    7196:	47a8      	blx	r5
    7198:	200d      	movs	r0, #13
    719a:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    719c:	481f      	ldr	r0, [pc, #124]	; (721c <m2m_wifi_init+0xf8>)
    719e:	47a8      	blx	r5
    71a0:	7a73      	ldrb	r3, [r6, #9]
    71a2:	7a32      	ldrb	r2, [r6, #8]
    71a4:	79f1      	ldrb	r1, [r6, #7]
    71a6:	4822      	ldr	r0, [pc, #136]	; (7230 <m2m_wifi_init+0x10c>)
    71a8:	47a8      	blx	r5
    71aa:	200d      	movs	r0, #13
    71ac:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    71ae:	481b      	ldr	r0, [pc, #108]	; (721c <m2m_wifi_init+0xf8>)
    71b0:	47a8      	blx	r5
    71b2:	2302      	movs	r3, #2
    71b4:	2205      	movs	r2, #5
    71b6:	2113      	movs	r1, #19
    71b8:	481e      	ldr	r0, [pc, #120]	; (7234 <m2m_wifi_init+0x110>)
    71ba:	47a8      	blx	r5
    71bc:	200d      	movs	r0, #13
    71be:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    71c0:	4816      	ldr	r0, [pc, #88]	; (721c <m2m_wifi_init+0xf8>)
    71c2:	47a8      	blx	r5
    71c4:	4a1c      	ldr	r2, [pc, #112]	; (7238 <m2m_wifi_init+0x114>)
    71c6:	491d      	ldr	r1, [pc, #116]	; (723c <m2m_wifi_init+0x118>)
    71c8:	481d      	ldr	r0, [pc, #116]	; (7240 <m2m_wifi_init+0x11c>)
    71ca:	47a8      	blx	r5
    71cc:	200d      	movs	r0, #13
    71ce:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    71d0:	0023      	movs	r3, r4
    71d2:	330d      	adds	r3, #13
    71d4:	d1ba      	bne.n	714c <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    71d6:	22ee      	movs	r2, #238	; 0xee
    71d8:	32ff      	adds	r2, #255	; 0xff
    71da:	491a      	ldr	r1, [pc, #104]	; (7244 <m2m_wifi_init+0x120>)
    71dc:	481a      	ldr	r0, [pc, #104]	; (7248 <m2m_wifi_init+0x124>)
    71de:	4b10      	ldr	r3, [pc, #64]	; (7220 <m2m_wifi_init+0xfc>)
    71e0:	4798      	blx	r3
    71e2:	481a      	ldr	r0, [pc, #104]	; (724c <m2m_wifi_init+0x128>)
    71e4:	4b1a      	ldr	r3, [pc, #104]	; (7250 <m2m_wifi_init+0x12c>)
    71e6:	4798      	blx	r3
    71e8:	200d      	movs	r0, #13
    71ea:	4b0f      	ldr	r3, [pc, #60]	; (7228 <m2m_wifi_init+0x104>)
    71ec:	4798      	blx	r3
    71ee:	e7ad      	b.n	714c <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    71f0:	2000      	movs	r0, #0
    71f2:	4b18      	ldr	r3, [pc, #96]	; (7254 <m2m_wifi_init+0x130>)
    71f4:	4798      	blx	r3
    71f6:	e7a9      	b.n	714c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    71f8:	240c      	movs	r4, #12
    71fa:	4264      	negs	r4, r4
    71fc:	e7a6      	b.n	714c <m2m_wifi_init+0x28>
    71fe:	46c0      	nop			; (mov r8, r8)
    7200:	20000218 	.word	0x20000218
    7204:	2000021d 	.word	0x2000021d
    7208:	00007bc5 	.word	0x00007bc5
    720c:	00006e41 	.word	0x00006e41
    7210:	00006e79 	.word	0x00006e79
    7214:	00006dbd 	.word	0x00006dbd
    7218:	00007ae1 	.word	0x00007ae1
    721c:	00014de0 	.word	0x00014de0
    7220:	0000f309 	.word	0x0000f309
    7224:	00014f24 	.word	0x00014f24
    7228:	0000f33d 	.word	0x0000f33d
    722c:	00014f4c 	.word	0x00014f4c
    7230:	00014f68 	.word	0x00014f68
    7234:	00014f8c 	.word	0x00014f8c
    7238:	00014fa4 	.word	0x00014fa4
    723c:	00014fb0 	.word	0x00014fb0
    7240:	00014fbc 	.word	0x00014fbc
    7244:	00014e24 	.word	0x00014e24
    7248:	00014ab0 	.word	0x00014ab0
    724c:	00014fd4 	.word	0x00014fd4
    7250:	0000f425 	.word	0x0000f425
    7254:	00007c99 	.word	0x00007c99

00007258 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    7258:	b510      	push	{r4, lr}
	return hif_handle_isr();
    725a:	4b01      	ldr	r3, [pc, #4]	; (7260 <m2m_wifi_handle_events+0x8>)
    725c:	4798      	blx	r3
}
    725e:	bd10      	pop	{r4, pc}
    7260:	000068f5 	.word	0x000068f5

00007264 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    7264:	b5f0      	push	{r4, r5, r6, r7, lr}
    7266:	46ce      	mov	lr, r9
    7268:	4647      	mov	r7, r8
    726a:	b580      	push	{r7, lr}
    726c:	b0a3      	sub	sp, #140	; 0x8c
    726e:	9005      	str	r0, [sp, #20]
    7270:	000c      	movs	r4, r1
    7272:	0015      	movs	r5, r2
    7274:	001f      	movs	r7, r3
    7276:	ab2a      	add	r3, sp, #168	; 0xa8
    7278:	881b      	ldrh	r3, [r3, #0]
    727a:	4699      	mov	r9, r3
    727c:	ab2b      	add	r3, sp, #172	; 0xac
    727e:	781b      	ldrb	r3, [r3, #0]
    7280:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    7282:	2a01      	cmp	r2, #1
    7284:	d003      	beq.n	728e <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    7286:	2f00      	cmp	r7, #0
    7288:	d040      	beq.n	730c <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    728a:	2a02      	cmp	r2, #2
    728c:	d04c      	beq.n	7328 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    728e:	1e63      	subs	r3, r4, #1
    7290:	2b1f      	cmp	r3, #31
    7292:	d900      	bls.n	7296 <m2m_wifi_connect_sc+0x32>
    7294:	e078      	b.n	7388 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    7296:	464b      	mov	r3, r9
    7298:	3b01      	subs	r3, #1
    729a:	b29b      	uxth	r3, r3
    729c:	2b0d      	cmp	r3, #13
    729e:	d903      	bls.n	72a8 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    72a0:	464b      	mov	r3, r9
    72a2:	2bff      	cmp	r3, #255	; 0xff
    72a4:	d000      	beq.n	72a8 <m2m_wifi_connect_sc+0x44>
    72a6:	e07d      	b.n	73a4 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    72a8:	ae07      	add	r6, sp, #28
    72aa:	0022      	movs	r2, r4
    72ac:	9905      	ldr	r1, [sp, #20]
    72ae:	205a      	movs	r0, #90	; 0x5a
    72b0:	ab02      	add	r3, sp, #8
    72b2:	469c      	mov	ip, r3
    72b4:	4460      	add	r0, ip
    72b6:	4b78      	ldr	r3, [pc, #480]	; (7498 <m2m_wifi_connect_sc+0x234>)
    72b8:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    72ba:	1934      	adds	r4, r6, r4
    72bc:	3446      	adds	r4, #70	; 0x46
    72be:	2300      	movs	r3, #0
    72c0:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    72c2:	3344      	adds	r3, #68	; 0x44
    72c4:	464a      	mov	r2, r9
    72c6:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    72c8:	4643      	mov	r3, r8
    72ca:	1e5a      	subs	r2, r3, #1
    72cc:	4193      	sbcs	r3, r2
    72ce:	2267      	movs	r2, #103	; 0x67
    72d0:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    72d2:	2341      	movs	r3, #65	; 0x41
    72d4:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    72d6:	2d03      	cmp	r5, #3
    72d8:	d100      	bne.n	72dc <m2m_wifi_connect_sc+0x78>
    72da:	e071      	b.n	73c0 <m2m_wifi_connect_sc+0x15c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    72dc:	2d02      	cmp	r5, #2
    72de:	d100      	bne.n	72e2 <m2m_wifi_connect_sc+0x7e>
    72e0:	e0ab      	b.n	743a <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    72e2:	2d04      	cmp	r5, #4
    72e4:	d100      	bne.n	72e8 <m2m_wifi_connect_sc+0x84>
    72e6:	e0c3      	b.n	7470 <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    72e8:	2d01      	cmp	r5, #1
    72ea:	d000      	beq.n	72ee <m2m_wifi_connect_sc+0x8a>
    72ec:	e0c6      	b.n	747c <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    72ee:	2300      	movs	r3, #0
    72f0:	9302      	str	r3, [sp, #8]
    72f2:	9301      	str	r3, [sp, #4]
    72f4:	9300      	str	r3, [sp, #0]
    72f6:	336c      	adds	r3, #108	; 0x6c
    72f8:	aa07      	add	r2, sp, #28
    72fa:	2128      	movs	r1, #40	; 0x28
    72fc:	2001      	movs	r0, #1
    72fe:	4c67      	ldr	r4, [pc, #412]	; (749c <m2m_wifi_connect_sc+0x238>)
    7300:	47a0      	blx	r4

ERR1:
	return ret;
}
    7302:	b023      	add	sp, #140	; 0x8c
    7304:	bc0c      	pop	{r2, r3}
    7306:	4690      	mov	r8, r2
    7308:	4699      	mov	r9, r3
    730a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    730c:	4a64      	ldr	r2, [pc, #400]	; (74a0 <m2m_wifi_connect_sc+0x23c>)
    730e:	4965      	ldr	r1, [pc, #404]	; (74a4 <m2m_wifi_connect_sc+0x240>)
    7310:	4865      	ldr	r0, [pc, #404]	; (74a8 <m2m_wifi_connect_sc+0x244>)
    7312:	4b66      	ldr	r3, [pc, #408]	; (74ac <m2m_wifi_connect_sc+0x248>)
    7314:	4798      	blx	r3
    7316:	4866      	ldr	r0, [pc, #408]	; (74b0 <m2m_wifi_connect_sc+0x24c>)
    7318:	4b66      	ldr	r3, [pc, #408]	; (74b4 <m2m_wifi_connect_sc+0x250>)
    731a:	4798      	blx	r3
    731c:	200d      	movs	r0, #13
    731e:	4b66      	ldr	r3, [pc, #408]	; (74b8 <m2m_wifi_connect_sc+0x254>)
    7320:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    7322:	200c      	movs	r0, #12
    7324:	4240      	negs	r0, r0
			goto ERR1;
    7326:	e7ec      	b.n	7302 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    7328:	0038      	movs	r0, r7
    732a:	4b64      	ldr	r3, [pc, #400]	; (74bc <m2m_wifi_connect_sc+0x258>)
    732c:	4798      	blx	r3
    732e:	2840      	cmp	r0, #64	; 0x40
    7330:	d1ad      	bne.n	728e <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    7332:	783b      	ldrb	r3, [r7, #0]
    7334:	001a      	movs	r2, r3
    7336:	3a30      	subs	r2, #48	; 0x30
    7338:	2a36      	cmp	r2, #54	; 0x36
    733a:	d817      	bhi.n	736c <m2m_wifi_connect_sc+0x108>
    733c:	3a0a      	subs	r2, #10
    733e:	2a06      	cmp	r2, #6
    7340:	d914      	bls.n	736c <m2m_wifi_connect_sc+0x108>
    7342:	3b47      	subs	r3, #71	; 0x47
    7344:	2b19      	cmp	r3, #25
    7346:	d911      	bls.n	736c <m2m_wifi_connect_sc+0x108>
    7348:	1c7a      	adds	r2, r7, #1
    734a:	0038      	movs	r0, r7
    734c:	3040      	adds	r0, #64	; 0x40
    734e:	7813      	ldrb	r3, [r2, #0]
    7350:	0019      	movs	r1, r3
    7352:	3930      	subs	r1, #48	; 0x30
    7354:	2936      	cmp	r1, #54	; 0x36
    7356:	d809      	bhi.n	736c <m2m_wifi_connect_sc+0x108>
    7358:	390a      	subs	r1, #10
    735a:	2906      	cmp	r1, #6
    735c:	d906      	bls.n	736c <m2m_wifi_connect_sc+0x108>
    735e:	3b47      	subs	r3, #71	; 0x47
    7360:	2b19      	cmp	r3, #25
    7362:	d903      	bls.n	736c <m2m_wifi_connect_sc+0x108>
    7364:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    7366:	4282      	cmp	r2, r0
    7368:	d1f1      	bne.n	734e <m2m_wifi_connect_sc+0xea>
    736a:	e790      	b.n	728e <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    736c:	4a54      	ldr	r2, [pc, #336]	; (74c0 <m2m_wifi_connect_sc+0x25c>)
    736e:	494d      	ldr	r1, [pc, #308]	; (74a4 <m2m_wifi_connect_sc+0x240>)
    7370:	484d      	ldr	r0, [pc, #308]	; (74a8 <m2m_wifi_connect_sc+0x244>)
    7372:	4b4e      	ldr	r3, [pc, #312]	; (74ac <m2m_wifi_connect_sc+0x248>)
    7374:	4798      	blx	r3
    7376:	4853      	ldr	r0, [pc, #332]	; (74c4 <m2m_wifi_connect_sc+0x260>)
    7378:	4b4e      	ldr	r3, [pc, #312]	; (74b4 <m2m_wifi_connect_sc+0x250>)
    737a:	4798      	blx	r3
    737c:	200d      	movs	r0, #13
    737e:	4b4e      	ldr	r3, [pc, #312]	; (74b8 <m2m_wifi_connect_sc+0x254>)
    7380:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    7382:	200c      	movs	r0, #12
    7384:	4240      	negs	r0, r0
					goto ERR1;
    7386:	e7bc      	b.n	7302 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    7388:	4a4f      	ldr	r2, [pc, #316]	; (74c8 <m2m_wifi_connect_sc+0x264>)
    738a:	4946      	ldr	r1, [pc, #280]	; (74a4 <m2m_wifi_connect_sc+0x240>)
    738c:	4846      	ldr	r0, [pc, #280]	; (74a8 <m2m_wifi_connect_sc+0x244>)
    738e:	4b47      	ldr	r3, [pc, #284]	; (74ac <m2m_wifi_connect_sc+0x248>)
    7390:	4798      	blx	r3
    7392:	484e      	ldr	r0, [pc, #312]	; (74cc <m2m_wifi_connect_sc+0x268>)
    7394:	4b47      	ldr	r3, [pc, #284]	; (74b4 <m2m_wifi_connect_sc+0x250>)
    7396:	4798      	blx	r3
    7398:	200d      	movs	r0, #13
    739a:	4b47      	ldr	r3, [pc, #284]	; (74b8 <m2m_wifi_connect_sc+0x254>)
    739c:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    739e:	200c      	movs	r0, #12
    73a0:	4240      	negs	r0, r0
		goto ERR1;
    73a2:	e7ae      	b.n	7302 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    73a4:	4a4a      	ldr	r2, [pc, #296]	; (74d0 <m2m_wifi_connect_sc+0x26c>)
    73a6:	493f      	ldr	r1, [pc, #252]	; (74a4 <m2m_wifi_connect_sc+0x240>)
    73a8:	483f      	ldr	r0, [pc, #252]	; (74a8 <m2m_wifi_connect_sc+0x244>)
    73aa:	4b40      	ldr	r3, [pc, #256]	; (74ac <m2m_wifi_connect_sc+0x248>)
    73ac:	4798      	blx	r3
    73ae:	4849      	ldr	r0, [pc, #292]	; (74d4 <m2m_wifi_connect_sc+0x270>)
    73b0:	4b40      	ldr	r3, [pc, #256]	; (74b4 <m2m_wifi_connect_sc+0x250>)
    73b2:	4798      	blx	r3
    73b4:	200d      	movs	r0, #13
    73b6:	4b40      	ldr	r3, [pc, #256]	; (74b8 <m2m_wifi_connect_sc+0x254>)
    73b8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    73ba:	200c      	movs	r0, #12
    73bc:	4240      	negs	r0, r0
			goto ERR1;
    73be:	e7a0      	b.n	7302 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    73c0:	783b      	ldrb	r3, [r7, #0]
    73c2:	3b01      	subs	r3, #1
    73c4:	b2db      	uxtb	r3, r3
    73c6:	aa07      	add	r2, sp, #28
    73c8:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    73ca:	2b03      	cmp	r3, #3
    73cc:	d818      	bhi.n	7400 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    73ce:	787a      	ldrb	r2, [r7, #1]
    73d0:	1e51      	subs	r1, r2, #1
    73d2:	ab07      	add	r3, sp, #28
    73d4:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    73d6:	2310      	movs	r3, #16
    73d8:	0011      	movs	r1, r2
    73da:	4399      	bics	r1, r3
    73dc:	290b      	cmp	r1, #11
    73de:	d01e      	beq.n	741e <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    73e0:	2296      	movs	r2, #150	; 0x96
    73e2:	0092      	lsls	r2, r2, #2
    73e4:	492f      	ldr	r1, [pc, #188]	; (74a4 <m2m_wifi_connect_sc+0x240>)
    73e6:	4830      	ldr	r0, [pc, #192]	; (74a8 <m2m_wifi_connect_sc+0x244>)
    73e8:	4c30      	ldr	r4, [pc, #192]	; (74ac <m2m_wifi_connect_sc+0x248>)
    73ea:	47a0      	blx	r4
    73ec:	ab07      	add	r3, sp, #28
    73ee:	7859      	ldrb	r1, [r3, #1]
    73f0:	4839      	ldr	r0, [pc, #228]	; (74d8 <m2m_wifi_connect_sc+0x274>)
    73f2:	47a0      	blx	r4
    73f4:	200d      	movs	r0, #13
    73f6:	4b30      	ldr	r3, [pc, #192]	; (74b8 <m2m_wifi_connect_sc+0x254>)
    73f8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    73fa:	200c      	movs	r0, #12
    73fc:	4240      	negs	r0, r0
			goto ERR1;
    73fe:	e780      	b.n	7302 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    7400:	4a36      	ldr	r2, [pc, #216]	; (74dc <m2m_wifi_connect_sc+0x278>)
    7402:	4928      	ldr	r1, [pc, #160]	; (74a4 <m2m_wifi_connect_sc+0x240>)
    7404:	4828      	ldr	r0, [pc, #160]	; (74a8 <m2m_wifi_connect_sc+0x244>)
    7406:	4c29      	ldr	r4, [pc, #164]	; (74ac <m2m_wifi_connect_sc+0x248>)
    7408:	47a0      	blx	r4
    740a:	ab07      	add	r3, sp, #28
    740c:	7819      	ldrb	r1, [r3, #0]
    740e:	4834      	ldr	r0, [pc, #208]	; (74e0 <m2m_wifi_connect_sc+0x27c>)
    7410:	47a0      	blx	r4
    7412:	200d      	movs	r0, #13
    7414:	4b28      	ldr	r3, [pc, #160]	; (74b8 <m2m_wifi_connect_sc+0x254>)
    7416:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    7418:	200c      	movs	r0, #12
    741a:	4240      	negs	r0, r0
			goto ERR1;
    741c:	e771      	b.n	7302 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    741e:	1cb9      	adds	r1, r7, #2
    7420:	2016      	movs	r0, #22
    7422:	ab02      	add	r3, sp, #8
    7424:	469c      	mov	ip, r3
    7426:	4460      	add	r0, ip
    7428:	4b1b      	ldr	r3, [pc, #108]	; (7498 <m2m_wifi_connect_sc+0x234>)
    742a:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    742c:	787b      	ldrb	r3, [r7, #1]
    742e:	aa07      	add	r2, sp, #28
    7430:	4694      	mov	ip, r2
    7432:	4463      	add	r3, ip
    7434:	2200      	movs	r2, #0
    7436:	709a      	strb	r2, [r3, #2]
    7438:	e759      	b.n	72ee <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    743a:	0038      	movs	r0, r7
    743c:	4b1f      	ldr	r3, [pc, #124]	; (74bc <m2m_wifi_connect_sc+0x258>)
    743e:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    7440:	1e43      	subs	r3, r0, #1
    7442:	b29b      	uxth	r3, r3
    7444:	2b3f      	cmp	r3, #63	; 0x3f
    7446:	d805      	bhi.n	7454 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    7448:	1c42      	adds	r2, r0, #1
    744a:	0039      	movs	r1, r7
    744c:	a807      	add	r0, sp, #28
    744e:	4b12      	ldr	r3, [pc, #72]	; (7498 <m2m_wifi_connect_sc+0x234>)
    7450:	4798      	blx	r3
    7452:	e74c      	b.n	72ee <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    7454:	4a23      	ldr	r2, [pc, #140]	; (74e4 <m2m_wifi_connect_sc+0x280>)
    7456:	4913      	ldr	r1, [pc, #76]	; (74a4 <m2m_wifi_connect_sc+0x240>)
    7458:	4813      	ldr	r0, [pc, #76]	; (74a8 <m2m_wifi_connect_sc+0x244>)
    745a:	4b14      	ldr	r3, [pc, #80]	; (74ac <m2m_wifi_connect_sc+0x248>)
    745c:	4798      	blx	r3
    745e:	4822      	ldr	r0, [pc, #136]	; (74e8 <m2m_wifi_connect_sc+0x284>)
    7460:	4b14      	ldr	r3, [pc, #80]	; (74b4 <m2m_wifi_connect_sc+0x250>)
    7462:	4798      	blx	r3
    7464:	200d      	movs	r0, #13
    7466:	4b14      	ldr	r3, [pc, #80]	; (74b8 <m2m_wifi_connect_sc+0x254>)
    7468:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    746a:	200c      	movs	r0, #12
    746c:	4240      	negs	r0, r0
			goto ERR1;
    746e:	e748      	b.n	7302 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    7470:	223e      	movs	r2, #62	; 0x3e
    7472:	0039      	movs	r1, r7
    7474:	a807      	add	r0, sp, #28
    7476:	4b08      	ldr	r3, [pc, #32]	; (7498 <m2m_wifi_connect_sc+0x234>)
    7478:	4798      	blx	r3
    747a:	e738      	b.n	72ee <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    747c:	4a1b      	ldr	r2, [pc, #108]	; (74ec <m2m_wifi_connect_sc+0x288>)
    747e:	4909      	ldr	r1, [pc, #36]	; (74a4 <m2m_wifi_connect_sc+0x240>)
    7480:	4809      	ldr	r0, [pc, #36]	; (74a8 <m2m_wifi_connect_sc+0x244>)
    7482:	4b0a      	ldr	r3, [pc, #40]	; (74ac <m2m_wifi_connect_sc+0x248>)
    7484:	4798      	blx	r3
    7486:	481a      	ldr	r0, [pc, #104]	; (74f0 <m2m_wifi_connect_sc+0x28c>)
    7488:	4b0a      	ldr	r3, [pc, #40]	; (74b4 <m2m_wifi_connect_sc+0x250>)
    748a:	4798      	blx	r3
    748c:	200d      	movs	r0, #13
    748e:	4b0a      	ldr	r3, [pc, #40]	; (74b8 <m2m_wifi_connect_sc+0x254>)
    7490:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    7492:	200c      	movs	r0, #12
    7494:	4240      	negs	r0, r0
		goto ERR1;
    7496:	e734      	b.n	7302 <m2m_wifi_connect_sc+0x9e>
    7498:	0000659d 	.word	0x0000659d
    749c:	000066c5 	.word	0x000066c5
    74a0:	0000021b 	.word	0x0000021b
    74a4:	00014e34 	.word	0x00014e34
    74a8:	00014ab0 	.word	0x00014ab0
    74ac:	0000f309 	.word	0x0000f309
    74b0:	00014e7c 	.word	0x00014e7c
    74b4:	0000f425 	.word	0x0000f425
    74b8:	0000f33d 	.word	0x0000f33d
    74bc:	000065c1 	.word	0x000065c1
    74c0:	00000227 	.word	0x00000227
    74c4:	00014e90 	.word	0x00014e90
    74c8:	00000231 	.word	0x00000231
    74cc:	00014e9c 	.word	0x00014e9c
    74d0:	0000023a 	.word	0x0000023a
    74d4:	00014eb0 	.word	0x00014eb0
    74d8:	00014ed8 	.word	0x00014ed8
    74dc:	00000251 	.word	0x00000251
    74e0:	00014ebc 	.word	0x00014ebc
    74e4:	00000267 	.word	0x00000267
    74e8:	00014ef4 	.word	0x00014ef4
    74ec:	00000277 	.word	0x00000277
    74f0:	00014f10 	.word	0x00014f10

000074f4 <m2m_wifi_connect>:
{
    74f4:	b530      	push	{r4, r5, lr}
    74f6:	b083      	sub	sp, #12
    74f8:	ac06      	add	r4, sp, #24
    74fa:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    74fc:	2500      	movs	r5, #0
    74fe:	9501      	str	r5, [sp, #4]
    7500:	9400      	str	r4, [sp, #0]
    7502:	4c02      	ldr	r4, [pc, #8]	; (750c <m2m_wifi_connect+0x18>)
    7504:	47a0      	blx	r4
}
    7506:	b003      	add	sp, #12
    7508:	bd30      	pop	{r4, r5, pc}
    750a:	46c0      	nop			; (mov r8, r8)
    750c:	00007265 	.word	0x00007265

00007510 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    7510:	2000      	movs	r0, #0
    7512:	4770      	bx	lr

00007514 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    7514:	b5f0      	push	{r4, r5, r6, r7, lr}
    7516:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    7518:	2580      	movs	r5, #128	; 0x80
    751a:	006d      	lsls	r5, r5, #1
    751c:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    751e:	24a5      	movs	r4, #165	; 0xa5
    7520:	0164      	lsls	r4, r4, #5
    7522:	4f08      	ldr	r7, [pc, #32]	; (7544 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    7524:	4e08      	ldr	r6, [pc, #32]	; (7548 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    7526:	0029      	movs	r1, r5
    7528:	0020      	movs	r0, r4
    752a:	47b8      	blx	r7
			uint32 reg = 0;
    752c:	2300      	movs	r3, #0
    752e:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    7530:	a901      	add	r1, sp, #4
    7532:	0020      	movs	r0, r4
    7534:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    7536:	2800      	cmp	r0, #0
    7538:	d1f5      	bne.n	7526 <chip_apply_conf+0x12>
				if(reg == val32)
    753a:	9b01      	ldr	r3, [sp, #4]
    753c:	429d      	cmp	r5, r3
    753e:	d1f2      	bne.n	7526 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    7540:	b003      	add	sp, #12
    7542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7544:	00007a05 	.word	0x00007a05
    7548:	000079f9 	.word	0x000079f9

0000754c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    754c:	b500      	push	{lr}
    754e:	b083      	sub	sp, #12
	uint32 reg = 0;
    7550:	2300      	movs	r3, #0
    7552:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    7554:	a901      	add	r1, sp, #4
    7556:	4811      	ldr	r0, [pc, #68]	; (759c <enable_interrupts+0x50>)
    7558:	4b11      	ldr	r3, [pc, #68]	; (75a0 <enable_interrupts+0x54>)
    755a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    755c:	2800      	cmp	r0, #0
    755e:	d001      	beq.n	7564 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    7560:	b003      	add	sp, #12
    7562:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    7564:	2180      	movs	r1, #128	; 0x80
    7566:	0049      	lsls	r1, r1, #1
    7568:	9b01      	ldr	r3, [sp, #4]
    756a:	4319      	orrs	r1, r3
    756c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    756e:	480b      	ldr	r0, [pc, #44]	; (759c <enable_interrupts+0x50>)
    7570:	4b0c      	ldr	r3, [pc, #48]	; (75a4 <enable_interrupts+0x58>)
    7572:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    7574:	2800      	cmp	r0, #0
    7576:	d1f3      	bne.n	7560 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    7578:	a901      	add	r1, sp, #4
    757a:	20d0      	movs	r0, #208	; 0xd0
    757c:	0140      	lsls	r0, r0, #5
    757e:	4b08      	ldr	r3, [pc, #32]	; (75a0 <enable_interrupts+0x54>)
    7580:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    7582:	2800      	cmp	r0, #0
    7584:	d1ec      	bne.n	7560 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    7586:	2180      	movs	r1, #128	; 0x80
    7588:	0249      	lsls	r1, r1, #9
    758a:	9b01      	ldr	r3, [sp, #4]
    758c:	4319      	orrs	r1, r3
    758e:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    7590:	20d0      	movs	r0, #208	; 0xd0
    7592:	0140      	lsls	r0, r0, #5
    7594:	4b03      	ldr	r3, [pc, #12]	; (75a4 <enable_interrupts+0x58>)
    7596:	4798      	blx	r3
    7598:	e7e2      	b.n	7560 <enable_interrupts+0x14>
    759a:	46c0      	nop			; (mov r8, r8)
    759c:	00001408 	.word	0x00001408
    75a0:	000079f9 	.word	0x000079f9
    75a4:	00007a05 	.word	0x00007a05

000075a8 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    75a8:	b510      	push	{r4, lr}
    75aa:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    75ac:	4b28      	ldr	r3, [pc, #160]	; (7650 <nmi_get_chipid+0xa8>)
    75ae:	681c      	ldr	r4, [r3, #0]
    75b0:	2c00      	cmp	r4, #0
    75b2:	d004      	beq.n	75be <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    75b4:	4b26      	ldr	r3, [pc, #152]	; (7650 <nmi_get_chipid+0xa8>)
    75b6:	681c      	ldr	r4, [r3, #0]
}
    75b8:	0020      	movs	r0, r4
    75ba:	b002      	add	sp, #8
    75bc:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    75be:	0019      	movs	r1, r3
    75c0:	2080      	movs	r0, #128	; 0x80
    75c2:	0140      	lsls	r0, r0, #5
    75c4:	4b23      	ldr	r3, [pc, #140]	; (7654 <nmi_get_chipid+0xac>)
    75c6:	4798      	blx	r3
    75c8:	2800      	cmp	r0, #0
    75ca:	d003      	beq.n	75d4 <nmi_get_chipid+0x2c>
			chipid = 0;
    75cc:	2200      	movs	r2, #0
    75ce:	4b20      	ldr	r3, [pc, #128]	; (7650 <nmi_get_chipid+0xa8>)
    75d0:	601a      	str	r2, [r3, #0]
			return 0;
    75d2:	e7f1      	b.n	75b8 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    75d4:	a901      	add	r1, sp, #4
    75d6:	4820      	ldr	r0, [pc, #128]	; (7658 <nmi_get_chipid+0xb0>)
    75d8:	4b1e      	ldr	r3, [pc, #120]	; (7654 <nmi_get_chipid+0xac>)
    75da:	4798      	blx	r3
    75dc:	2800      	cmp	r0, #0
    75de:	d003      	beq.n	75e8 <nmi_get_chipid+0x40>
			chipid = 0;
    75e0:	2200      	movs	r2, #0
    75e2:	4b1b      	ldr	r3, [pc, #108]	; (7650 <nmi_get_chipid+0xa8>)
    75e4:	601a      	str	r2, [r3, #0]
			return 0;
    75e6:	e7e7      	b.n	75b8 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    75e8:	4b19      	ldr	r3, [pc, #100]	; (7650 <nmi_get_chipid+0xa8>)
    75ea:	681b      	ldr	r3, [r3, #0]
    75ec:	4a1b      	ldr	r2, [pc, #108]	; (765c <nmi_get_chipid+0xb4>)
    75ee:	4293      	cmp	r3, r2
    75f0:	d00e      	beq.n	7610 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    75f2:	4a1b      	ldr	r2, [pc, #108]	; (7660 <nmi_get_chipid+0xb8>)
    75f4:	4293      	cmp	r3, r2
    75f6:	d012      	beq.n	761e <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    75f8:	4a1a      	ldr	r2, [pc, #104]	; (7664 <nmi_get_chipid+0xbc>)
    75fa:	4293      	cmp	r3, r2
    75fc:	d01c      	beq.n	7638 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    75fe:	4914      	ldr	r1, [pc, #80]	; (7650 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    7600:	4a19      	ldr	r2, [pc, #100]	; (7668 <nmi_get_chipid+0xc0>)
    7602:	680b      	ldr	r3, [r1, #0]
    7604:	401a      	ands	r2, r3
		chipid |= 0x050000;
    7606:	23a0      	movs	r3, #160	; 0xa0
    7608:	02db      	lsls	r3, r3, #11
    760a:	4313      	orrs	r3, r2
    760c:	600b      	str	r3, [r1, #0]
    760e:	e7d1      	b.n	75b4 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    7610:	9b01      	ldr	r3, [sp, #4]
    7612:	2b01      	cmp	r3, #1
    7614:	d0f3      	beq.n	75fe <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    7616:	4a15      	ldr	r2, [pc, #84]	; (766c <nmi_get_chipid+0xc4>)
    7618:	4b0d      	ldr	r3, [pc, #52]	; (7650 <nmi_get_chipid+0xa8>)
    761a:	601a      	str	r2, [r3, #0]
    761c:	e7ef      	b.n	75fe <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    761e:	9b01      	ldr	r3, [sp, #4]
    7620:	2b03      	cmp	r3, #3
    7622:	d0ec      	beq.n	75fe <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    7624:	2b04      	cmp	r3, #4
    7626:	d003      	beq.n	7630 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    7628:	4a11      	ldr	r2, [pc, #68]	; (7670 <nmi_get_chipid+0xc8>)
    762a:	4b09      	ldr	r3, [pc, #36]	; (7650 <nmi_get_chipid+0xa8>)
    762c:	601a      	str	r2, [r3, #0]
    762e:	e7e6      	b.n	75fe <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    7630:	4a10      	ldr	r2, [pc, #64]	; (7674 <nmi_get_chipid+0xcc>)
    7632:	4b07      	ldr	r3, [pc, #28]	; (7650 <nmi_get_chipid+0xa8>)
    7634:	601a      	str	r2, [r3, #0]
    7636:	e7e2      	b.n	75fe <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    7638:	4905      	ldr	r1, [pc, #20]	; (7650 <nmi_get_chipid+0xa8>)
    763a:	20ec      	movs	r0, #236	; 0xec
    763c:	0380      	lsls	r0, r0, #14
    763e:	4b05      	ldr	r3, [pc, #20]	; (7654 <nmi_get_chipid+0xac>)
    7640:	4798      	blx	r3
    7642:	2800      	cmp	r0, #0
    7644:	d0db      	beq.n	75fe <nmi_get_chipid+0x56>
			chipid = 0;
    7646:	2200      	movs	r2, #0
    7648:	4b01      	ldr	r3, [pc, #4]	; (7650 <nmi_get_chipid+0xa8>)
    764a:	601a      	str	r2, [r3, #0]
			return 0;
    764c:	e7b4      	b.n	75b8 <nmi_get_chipid+0x10>
    764e:	46c0      	nop			; (mov r8, r8)
    7650:	20000220 	.word	0x20000220
    7654:	000079f9 	.word	0x000079f9
    7658:	000013f4 	.word	0x000013f4
    765c:	001002a0 	.word	0x001002a0
    7660:	001002b0 	.word	0x001002b0
    7664:	001000f0 	.word	0x001000f0
    7668:	fff0ffff 	.word	0xfff0ffff
    766c:	001002a1 	.word	0x001002a1
    7670:	001002b2 	.word	0x001002b2
    7674:	001002b1 	.word	0x001002b1

00007678 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    7678:	b530      	push	{r4, r5, lr}
    767a:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    767c:	4c16      	ldr	r4, [pc, #88]	; (76d8 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    767e:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    7680:	a901      	add	r1, sp, #4
    7682:	2010      	movs	r0, #16
    7684:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    7686:	2800      	cmp	r0, #0
    7688:	d11c      	bne.n	76c4 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    768a:	9b01      	ldr	r3, [sp, #4]
    768c:	422b      	tst	r3, r5
    768e:	d1f7      	bne.n	7680 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    7690:	a901      	add	r1, sp, #4
    7692:	3001      	adds	r0, #1
    7694:	4b10      	ldr	r3, [pc, #64]	; (76d8 <chip_sleep+0x60>)
    7696:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    7698:	2800      	cmp	r0, #0
    769a:	d113      	bne.n	76c4 <chip_sleep+0x4c>
	if(reg & NBIT1)
    769c:	9901      	ldr	r1, [sp, #4]
    769e:	078b      	lsls	r3, r1, #30
    76a0:	d507      	bpl.n	76b2 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    76a2:	2302      	movs	r3, #2
    76a4:	4399      	bics	r1, r3
    76a6:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    76a8:	3001      	adds	r0, #1
    76aa:	4b0c      	ldr	r3, [pc, #48]	; (76dc <chip_sleep+0x64>)
    76ac:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    76ae:	2800      	cmp	r0, #0
    76b0:	d108      	bne.n	76c4 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    76b2:	a901      	add	r1, sp, #4
    76b4:	200b      	movs	r0, #11
    76b6:	4b08      	ldr	r3, [pc, #32]	; (76d8 <chip_sleep+0x60>)
    76b8:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    76ba:	2800      	cmp	r0, #0
    76bc:	d102      	bne.n	76c4 <chip_sleep+0x4c>
	if(reg & NBIT0)
    76be:	9901      	ldr	r1, [sp, #4]
    76c0:	07cb      	lsls	r3, r1, #31
    76c2:	d401      	bmi.n	76c8 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    76c4:	b003      	add	sp, #12
    76c6:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    76c8:	2301      	movs	r3, #1
    76ca:	4399      	bics	r1, r3
    76cc:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    76ce:	300b      	adds	r0, #11
    76d0:	4b02      	ldr	r3, [pc, #8]	; (76dc <chip_sleep+0x64>)
    76d2:	4798      	blx	r3
    76d4:	e7f6      	b.n	76c4 <chip_sleep+0x4c>
    76d6:	46c0      	nop			; (mov r8, r8)
    76d8:	000079f9 	.word	0x000079f9
    76dc:	00007a05 	.word	0x00007a05

000076e0 <chip_wake>:
sint8 chip_wake(void)
{
    76e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    76e2:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    76e4:	2300      	movs	r3, #0
    76e6:	9301      	str	r3, [sp, #4]
    76e8:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    76ea:	a901      	add	r1, sp, #4
    76ec:	200b      	movs	r0, #11
    76ee:	4b28      	ldr	r3, [pc, #160]	; (7790 <chip_wake+0xb0>)
    76f0:	4798      	blx	r3
    76f2:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    76f4:	d130      	bne.n	7758 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    76f6:	9901      	ldr	r1, [sp, #4]
    76f8:	07cb      	lsls	r3, r1, #31
    76fa:	d406      	bmi.n	770a <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    76fc:	2301      	movs	r3, #1
    76fe:	4319      	orrs	r1, r3
    7700:	200b      	movs	r0, #11
    7702:	4b24      	ldr	r3, [pc, #144]	; (7794 <chip_wake+0xb4>)
    7704:	4798      	blx	r3
    7706:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    7708:	d126      	bne.n	7758 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    770a:	a901      	add	r1, sp, #4
    770c:	2001      	movs	r0, #1
    770e:	4b20      	ldr	r3, [pc, #128]	; (7790 <chip_wake+0xb0>)
    7710:	4798      	blx	r3
    7712:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    7714:	d120      	bne.n	7758 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    7716:	9901      	ldr	r1, [sp, #4]
    7718:	078b      	lsls	r3, r1, #30
    771a:	d520      	bpl.n	775e <chip_wake+0x7e>
{
    771c:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    771e:	4f1c      	ldr	r7, [pc, #112]	; (7790 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    7720:	4e1d      	ldr	r6, [pc, #116]	; (7798 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    7722:	4669      	mov	r1, sp
    7724:	200f      	movs	r0, #15
    7726:	47b8      	blx	r7
    7728:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    772a:	d120      	bne.n	776e <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    772c:	9b00      	ldr	r3, [sp, #0]
    772e:	075b      	lsls	r3, r3, #29
    7730:	d42b      	bmi.n	778a <chip_wake+0xaa>
		nm_bsp_sleep(2);
    7732:	2002      	movs	r0, #2
    7734:	47b0      	blx	r6
    7736:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    7738:	2d00      	cmp	r5, #0
    773a:	d1f2      	bne.n	7722 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    773c:	22af      	movs	r2, #175	; 0xaf
    773e:	0052      	lsls	r2, r2, #1
    7740:	4916      	ldr	r1, [pc, #88]	; (779c <chip_wake+0xbc>)
    7742:	4817      	ldr	r0, [pc, #92]	; (77a0 <chip_wake+0xc0>)
    7744:	4b17      	ldr	r3, [pc, #92]	; (77a4 <chip_wake+0xc4>)
    7746:	4798      	blx	r3
    7748:	4817      	ldr	r0, [pc, #92]	; (77a8 <chip_wake+0xc8>)
    774a:	4b18      	ldr	r3, [pc, #96]	; (77ac <chip_wake+0xcc>)
    774c:	4798      	blx	r3
    774e:	200d      	movs	r0, #13
    7750:	4b17      	ldr	r3, [pc, #92]	; (77b0 <chip_wake+0xd0>)
    7752:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    7754:	2404      	movs	r4, #4
    7756:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    7758:	0020      	movs	r0, r4
    775a:	b003      	add	sp, #12
    775c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    775e:	2302      	movs	r3, #2
    7760:	4319      	orrs	r1, r3
    7762:	2001      	movs	r0, #1
    7764:	4b0b      	ldr	r3, [pc, #44]	; (7794 <chip_wake+0xb4>)
    7766:	4798      	blx	r3
    7768:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    776a:	d0d7      	beq.n	771c <chip_wake+0x3c>
    776c:	e7f4      	b.n	7758 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    776e:	22aa      	movs	r2, #170	; 0xaa
    7770:	0052      	lsls	r2, r2, #1
    7772:	490a      	ldr	r1, [pc, #40]	; (779c <chip_wake+0xbc>)
    7774:	480a      	ldr	r0, [pc, #40]	; (77a0 <chip_wake+0xc0>)
    7776:	4d0b      	ldr	r5, [pc, #44]	; (77a4 <chip_wake+0xc4>)
    7778:	47a8      	blx	r5
    777a:	9a00      	ldr	r2, [sp, #0]
    777c:	0021      	movs	r1, r4
    777e:	480d      	ldr	r0, [pc, #52]	; (77b4 <chip_wake+0xd4>)
    7780:	47a8      	blx	r5
    7782:	200d      	movs	r0, #13
    7784:	4b0a      	ldr	r3, [pc, #40]	; (77b0 <chip_wake+0xd0>)
    7786:	4798      	blx	r3
			goto _WAKE_EXIT;
    7788:	e7e6      	b.n	7758 <chip_wake+0x78>
	nm_bus_reset();
    778a:	4b0b      	ldr	r3, [pc, #44]	; (77b8 <chip_wake+0xd8>)
    778c:	4798      	blx	r3
    778e:	e7e3      	b.n	7758 <chip_wake+0x78>
    7790:	000079f9 	.word	0x000079f9
    7794:	00007a05 	.word	0x00007a05
    7798:	000061a9 	.word	0x000061a9
    779c:	00014ff0 	.word	0x00014ff0
    77a0:	00014ab0 	.word	0x00014ab0
    77a4:	0000f309 	.word	0x0000f309
    77a8:	00015038 	.word	0x00015038
    77ac:	0000f425 	.word	0x0000f425
    77b0:	0000f33d 	.word	0x0000f33d
    77b4:	00015020 	.word	0x00015020
    77b8:	000079e1 	.word	0x000079e1

000077bc <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    77bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77be:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    77c0:	4d2d      	ldr	r5, [pc, #180]	; (7878 <wait_for_bootrom+0xbc>)
    77c2:	4c2e      	ldr	r4, [pc, #184]	; (787c <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    77c4:	4e2e      	ldr	r6, [pc, #184]	; (7880 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    77c6:	0028      	movs	r0, r5
    77c8:	47a0      	blx	r4
		if (reg & 0x80000000) {
    77ca:	2800      	cmp	r0, #0
    77cc:	db02      	blt.n	77d4 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    77ce:	2001      	movs	r0, #1
    77d0:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    77d2:	e7f8      	b.n	77c6 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    77d4:	482b      	ldr	r0, [pc, #172]	; (7884 <wait_for_bootrom+0xc8>)
    77d6:	4b29      	ldr	r3, [pc, #164]	; (787c <wait_for_bootrom+0xc0>)
    77d8:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    77da:	07c3      	lsls	r3, r0, #31
    77dc:	d409      	bmi.n	77f2 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    77de:	4e28      	ldr	r6, [pc, #160]	; (7880 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    77e0:	4c29      	ldr	r4, [pc, #164]	; (7888 <wait_for_bootrom+0xcc>)
    77e2:	4d26      	ldr	r5, [pc, #152]	; (787c <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    77e4:	2001      	movs	r0, #1
    77e6:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    77e8:	0020      	movs	r0, r4
    77ea:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    77ec:	4b27      	ldr	r3, [pc, #156]	; (788c <wait_for_bootrom+0xd0>)
    77ee:	4298      	cmp	r0, r3
    77f0:	d1f8      	bne.n	77e4 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    77f2:	2f02      	cmp	r7, #2
    77f4:	d021      	beq.n	783a <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    77f6:	2f03      	cmp	r7, #3
    77f8:	d029      	beq.n	784e <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    77fa:	2f04      	cmp	r7, #4
    77fc:	d030      	beq.n	7860 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    77fe:	4924      	ldr	r1, [pc, #144]	; (7890 <wait_for_bootrom+0xd4>)
    7800:	4824      	ldr	r0, [pc, #144]	; (7894 <wait_for_bootrom+0xd8>)
    7802:	4b25      	ldr	r3, [pc, #148]	; (7898 <wait_for_bootrom+0xdc>)
    7804:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    7806:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    7808:	4b24      	ldr	r3, [pc, #144]	; (789c <wait_for_bootrom+0xe0>)
    780a:	4798      	blx	r3
    780c:	0500      	lsls	r0, r0, #20
    780e:	0d00      	lsrs	r0, r0, #20
    7810:	4b23      	ldr	r3, [pc, #140]	; (78a0 <wait_for_bootrom+0xe4>)
    7812:	4298      	cmp	r0, r3
    7814:	d82a      	bhi.n	786c <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    7816:	0020      	movs	r0, r4
    7818:	4b22      	ldr	r3, [pc, #136]	; (78a4 <wait_for_bootrom+0xe8>)
    781a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    781c:	4822      	ldr	r0, [pc, #136]	; (78a8 <wait_for_bootrom+0xec>)
    781e:	4c23      	ldr	r4, [pc, #140]	; (78ac <wait_for_bootrom+0xf0>)
    7820:	47a0      	blx	r4
    7822:	491b      	ldr	r1, [pc, #108]	; (7890 <wait_for_bootrom+0xd4>)
    7824:	4822      	ldr	r0, [pc, #136]	; (78b0 <wait_for_bootrom+0xf4>)
    7826:	47a0      	blx	r4
    7828:	200d      	movs	r0, #13
    782a:	4b22      	ldr	r3, [pc, #136]	; (78b4 <wait_for_bootrom+0xf8>)
    782c:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    782e:	4922      	ldr	r1, [pc, #136]	; (78b8 <wait_for_bootrom+0xfc>)
    7830:	4815      	ldr	r0, [pc, #84]	; (7888 <wait_for_bootrom+0xcc>)
    7832:	4b19      	ldr	r3, [pc, #100]	; (7898 <wait_for_bootrom+0xdc>)
    7834:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    7836:	2000      	movs	r0, #0
    7838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    783a:	4920      	ldr	r1, [pc, #128]	; (78bc <wait_for_bootrom+0x100>)
    783c:	4820      	ldr	r0, [pc, #128]	; (78c0 <wait_for_bootrom+0x104>)
    783e:	4c16      	ldr	r4, [pc, #88]	; (7898 <wait_for_bootrom+0xdc>)
    7840:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    7842:	2180      	movs	r1, #128	; 0x80
    7844:	0349      	lsls	r1, r1, #13
    7846:	4813      	ldr	r0, [pc, #76]	; (7894 <wait_for_bootrom+0xd8>)
    7848:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    784a:	2400      	movs	r4, #0
    784c:	e7dc      	b.n	7808 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    784e:	491b      	ldr	r1, [pc, #108]	; (78bc <wait_for_bootrom+0x100>)
    7850:	481b      	ldr	r0, [pc, #108]	; (78c0 <wait_for_bootrom+0x104>)
    7852:	4c11      	ldr	r4, [pc, #68]	; (7898 <wait_for_bootrom+0xdc>)
    7854:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    7856:	2100      	movs	r1, #0
    7858:	480e      	ldr	r0, [pc, #56]	; (7894 <wait_for_bootrom+0xd8>)
    785a:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    785c:	2400      	movs	r4, #0
    785e:	e7d3      	b.n	7808 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    7860:	490b      	ldr	r1, [pc, #44]	; (7890 <wait_for_bootrom+0xd4>)
    7862:	480c      	ldr	r0, [pc, #48]	; (7894 <wait_for_bootrom+0xd8>)
    7864:	4b0c      	ldr	r3, [pc, #48]	; (7898 <wait_for_bootrom+0xdc>)
    7866:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    7868:	2480      	movs	r4, #128	; 0x80
    786a:	e7cd      	b.n	7808 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    786c:	2002      	movs	r0, #2
    786e:	4320      	orrs	r0, r4
    7870:	4b0c      	ldr	r3, [pc, #48]	; (78a4 <wait_for_bootrom+0xe8>)
    7872:	4798      	blx	r3
    7874:	e7d2      	b.n	781c <wait_for_bootrom+0x60>
    7876:	46c0      	nop			; (mov r8, r8)
    7878:	00001014 	.word	0x00001014
    787c:	000079ed 	.word	0x000079ed
    7880:	000061a9 	.word	0x000061a9
    7884:	000207bc 	.word	0x000207bc
    7888:	000c000c 	.word	0x000c000c
    788c:	10add09e 	.word	0x10add09e
    7890:	13521352 	.word	0x13521352
    7894:	0000108c 	.word	0x0000108c
    7898:	00007a05 	.word	0x00007a05
    789c:	000075a9 	.word	0x000075a9
    78a0:	0000039f 	.word	0x0000039f
    78a4:	00007515 	.word	0x00007515
    78a8:	00014de0 	.word	0x00014de0
    78ac:	0000f309 	.word	0x0000f309
    78b0:	00015054 	.word	0x00015054
    78b4:	0000f33d 	.word	0x0000f33d
    78b8:	ef522f61 	.word	0xef522f61
    78bc:	3c1cd57d 	.word	0x3c1cd57d
    78c0:	000207ac 	.word	0x000207ac

000078c4 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    78c4:	b570      	push	{r4, r5, r6, lr}
    78c6:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    78c8:	4b15      	ldr	r3, [pc, #84]	; (7920 <wait_for_firmware_start+0x5c>)
    78ca:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    78cc:	4b15      	ldr	r3, [pc, #84]	; (7924 <wait_for_firmware_start+0x60>)
    78ce:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    78d0:	3802      	subs	r0, #2
    78d2:	2801      	cmp	r0, #1
    78d4:	d911      	bls.n	78fa <wait_for_firmware_start+0x36>
{
    78d6:	2401      	movs	r4, #1
    78d8:	4264      	negs	r4, r4
    78da:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    78dc:	4e12      	ldr	r6, [pc, #72]	; (7928 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    78de:	4d13      	ldr	r5, [pc, #76]	; (792c <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    78e0:	9b00      	ldr	r3, [sp, #0]
    78e2:	4298      	cmp	r0, r3
    78e4:	d00e      	beq.n	7904 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    78e6:	2002      	movs	r0, #2
    78e8:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    78ea:	9801      	ldr	r0, [sp, #4]
    78ec:	47a8      	blx	r5
    78ee:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    78f0:	2c00      	cmp	r4, #0
    78f2:	d1f5      	bne.n	78e0 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    78f4:	2005      	movs	r0, #5
    78f6:	4240      	negs	r0, r0
    78f8:	e009      	b.n	790e <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    78fa:	4b0d      	ldr	r3, [pc, #52]	; (7930 <wait_for_firmware_start+0x6c>)
    78fc:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    78fe:	4b0d      	ldr	r3, [pc, #52]	; (7934 <wait_for_firmware_start+0x70>)
    7900:	9300      	str	r3, [sp, #0]
    7902:	e7e8      	b.n	78d6 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    7904:	9a00      	ldr	r2, [sp, #0]
    7906:	4b07      	ldr	r3, [pc, #28]	; (7924 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    7908:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    790a:	429a      	cmp	r2, r3
    790c:	d001      	beq.n	7912 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    790e:	b002      	add	sp, #8
    7910:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    7912:	2100      	movs	r1, #0
    7914:	4802      	ldr	r0, [pc, #8]	; (7920 <wait_for_firmware_start+0x5c>)
    7916:	4b08      	ldr	r3, [pc, #32]	; (7938 <wait_for_firmware_start+0x74>)
    7918:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    791a:	2000      	movs	r0, #0
    791c:	e7f7      	b.n	790e <wait_for_firmware_start+0x4a>
    791e:	46c0      	nop			; (mov r8, r8)
    7920:	0000108c 	.word	0x0000108c
    7924:	02532636 	.word	0x02532636
    7928:	000061a9 	.word	0x000061a9
    792c:	000079ed 	.word	0x000079ed
    7930:	000207ac 	.word	0x000207ac
    7934:	d75dc1c3 	.word	0xd75dc1c3
    7938:	00007a05 	.word	0x00007a05

0000793c <chip_deinit>:

sint8 chip_deinit(void)
{
    793c:	b510      	push	{r4, lr}
    793e:	b082      	sub	sp, #8
	uint32 reg = 0;
    7940:	2300      	movs	r3, #0
    7942:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    7944:	a901      	add	r1, sp, #4
    7946:	20a0      	movs	r0, #160	; 0xa0
    7948:	0140      	lsls	r0, r0, #5
    794a:	4b14      	ldr	r3, [pc, #80]	; (799c <chip_deinit+0x60>)
    794c:	4798      	blx	r3
    794e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    7950:	d115      	bne.n	797e <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    7952:	4913      	ldr	r1, [pc, #76]	; (79a0 <chip_deinit+0x64>)
    7954:	9b01      	ldr	r3, [sp, #4]
    7956:	4019      	ands	r1, r3
    7958:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    795a:	20a0      	movs	r0, #160	; 0xa0
    795c:	0140      	lsls	r0, r0, #5
    795e:	4b11      	ldr	r3, [pc, #68]	; (79a4 <chip_deinit+0x68>)
    7960:	4798      	blx	r3
    7962:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    7964:	d016      	beq.n	7994 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    7966:	4a10      	ldr	r2, [pc, #64]	; (79a8 <chip_deinit+0x6c>)
    7968:	4910      	ldr	r1, [pc, #64]	; (79ac <chip_deinit+0x70>)
    796a:	4811      	ldr	r0, [pc, #68]	; (79b0 <chip_deinit+0x74>)
    796c:	4b11      	ldr	r3, [pc, #68]	; (79b4 <chip_deinit+0x78>)
    796e:	4798      	blx	r3
    7970:	4811      	ldr	r0, [pc, #68]	; (79b8 <chip_deinit+0x7c>)
    7972:	4b12      	ldr	r3, [pc, #72]	; (79bc <chip_deinit+0x80>)
    7974:	4798      	blx	r3
    7976:	200d      	movs	r0, #13
    7978:	4b11      	ldr	r3, [pc, #68]	; (79c0 <chip_deinit+0x84>)
    797a:	4798      	blx	r3
		goto ERR1;
    797c:	e00a      	b.n	7994 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    797e:	4a11      	ldr	r2, [pc, #68]	; (79c4 <chip_deinit+0x88>)
    7980:	490a      	ldr	r1, [pc, #40]	; (79ac <chip_deinit+0x70>)
    7982:	480b      	ldr	r0, [pc, #44]	; (79b0 <chip_deinit+0x74>)
    7984:	4b0b      	ldr	r3, [pc, #44]	; (79b4 <chip_deinit+0x78>)
    7986:	4798      	blx	r3
    7988:	480b      	ldr	r0, [pc, #44]	; (79b8 <chip_deinit+0x7c>)
    798a:	4b0c      	ldr	r3, [pc, #48]	; (79bc <chip_deinit+0x80>)
    798c:	4798      	blx	r3
    798e:	200d      	movs	r0, #13
    7990:	4b0b      	ldr	r3, [pc, #44]	; (79c0 <chip_deinit+0x84>)
    7992:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    7994:	0020      	movs	r0, r4
    7996:	b002      	add	sp, #8
    7998:	bd10      	pop	{r4, pc}
    799a:	46c0      	nop			; (mov r8, r8)
    799c:	000079f9 	.word	0x000079f9
    79a0:	fffffbff 	.word	0xfffffbff
    79a4:	00007a05 	.word	0x00007a05
    79a8:	0000020b 	.word	0x0000020b
    79ac:	00014ffc 	.word	0x00014ffc
    79b0:	00014ab0 	.word	0x00014ab0
    79b4:	0000f309 	.word	0x0000f309
    79b8:	00015008 	.word	0x00015008
    79bc:	0000f425 	.word	0x0000f425
    79c0:	0000f33d 	.word	0x0000f33d
    79c4:	00000205 	.word	0x00000205

000079c8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    79c8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    79ca:	4b01      	ldr	r3, [pc, #4]	; (79d0 <nm_bus_iface_init+0x8>)
    79cc:	4798      	blx	r3
	return ret;
}
    79ce:	bd10      	pop	{r4, pc}
    79d0:	000062e1 	.word	0x000062e1

000079d4 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    79d4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    79d6:	4b01      	ldr	r3, [pc, #4]	; (79dc <nm_bus_iface_deinit+0x8>)
    79d8:	4798      	blx	r3

	return ret;
}
    79da:	bd10      	pop	{r4, pc}
    79dc:	00006531 	.word	0x00006531

000079e0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    79e0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    79e2:	4b01      	ldr	r3, [pc, #4]	; (79e8 <nm_bus_reset+0x8>)
    79e4:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    79e6:	bd10      	pop	{r4, pc}
    79e8:	00008391 	.word	0x00008391

000079ec <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    79ec:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    79ee:	4b01      	ldr	r3, [pc, #4]	; (79f4 <nm_read_reg+0x8>)
    79f0:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    79f2:	bd10      	pop	{r4, pc}
    79f4:	000083c9 	.word	0x000083c9

000079f8 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    79f8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    79fa:	4b01      	ldr	r3, [pc, #4]	; (7a00 <nm_read_reg_with_ret+0x8>)
    79fc:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    79fe:	bd10      	pop	{r4, pc}
    7a00:	000083dd 	.word	0x000083dd

00007a04 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    7a04:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    7a06:	4b01      	ldr	r3, [pc, #4]	; (7a0c <nm_write_reg+0x8>)
    7a08:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    7a0a:	bd10      	pop	{r4, pc}
    7a0c:	000083f5 	.word	0x000083f5

00007a10 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    7a10:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a12:	46d6      	mov	lr, sl
    7a14:	464f      	mov	r7, r9
    7a16:	4646      	mov	r6, r8
    7a18:	b5c0      	push	{r6, r7, lr}
    7a1a:	b082      	sub	sp, #8
    7a1c:	4680      	mov	r8, r0
    7a1e:	4689      	mov	r9, r1
    7a20:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    7a22:	4b13      	ldr	r3, [pc, #76]	; (7a70 <nm_read_block+0x60>)
    7a24:	881f      	ldrh	r7, [r3, #0]
    7a26:	3f08      	subs	r7, #8
    7a28:	b2bb      	uxth	r3, r7
    7a2a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    7a2c:	001e      	movs	r6, r3
    7a2e:	0004      	movs	r4, r0
    7a30:	429a      	cmp	r2, r3
    7a32:	d91a      	bls.n	7a6a <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    7a34:	4b0f      	ldr	r3, [pc, #60]	; (7a74 <nm_read_block+0x64>)
    7a36:	469a      	mov	sl, r3
    7a38:	1a37      	subs	r7, r6, r0
    7a3a:	4643      	mov	r3, r8
    7a3c:	1ae1      	subs	r1, r4, r3
    7a3e:	4449      	add	r1, r9
    7a40:	9a01      	ldr	r2, [sp, #4]
    7a42:	0020      	movs	r0, r4
    7a44:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    7a46:	2800      	cmp	r0, #0
    7a48:	d109      	bne.n	7a5e <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    7a4a:	1bad      	subs	r5, r5, r6
    7a4c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    7a4e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    7a50:	42b5      	cmp	r5, r6
    7a52:	d8f2      	bhi.n	7a3a <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    7a54:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    7a56:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    7a58:	0020      	movs	r0, r4
    7a5a:	4b06      	ldr	r3, [pc, #24]	; (7a74 <nm_read_block+0x64>)
    7a5c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    7a5e:	b002      	add	sp, #8
    7a60:	bc1c      	pop	{r2, r3, r4}
    7a62:	4690      	mov	r8, r2
    7a64:	4699      	mov	r9, r3
    7a66:	46a2      	mov	sl, r4
    7a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    7a6a:	2100      	movs	r1, #0
    7a6c:	e7f2      	b.n	7a54 <nm_read_block+0x44>
    7a6e:	46c0      	nop			; (mov r8, r8)
    7a70:	20000000 	.word	0x20000000
    7a74:	00008539 	.word	0x00008539

00007a78 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    7a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a7a:	46d6      	mov	lr, sl
    7a7c:	464f      	mov	r7, r9
    7a7e:	4646      	mov	r6, r8
    7a80:	b5c0      	push	{r6, r7, lr}
    7a82:	b082      	sub	sp, #8
    7a84:	4680      	mov	r8, r0
    7a86:	4689      	mov	r9, r1
    7a88:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    7a8a:	4b13      	ldr	r3, [pc, #76]	; (7ad8 <nm_write_block+0x60>)
    7a8c:	881f      	ldrh	r7, [r3, #0]
    7a8e:	3f08      	subs	r7, #8
    7a90:	b2bb      	uxth	r3, r7
    7a92:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    7a94:	001e      	movs	r6, r3
    7a96:	0004      	movs	r4, r0
    7a98:	429a      	cmp	r2, r3
    7a9a:	d91a      	bls.n	7ad2 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    7a9c:	4b0f      	ldr	r3, [pc, #60]	; (7adc <nm_write_block+0x64>)
    7a9e:	469a      	mov	sl, r3
    7aa0:	1a37      	subs	r7, r6, r0
    7aa2:	4643      	mov	r3, r8
    7aa4:	1ae1      	subs	r1, r4, r3
    7aa6:	4449      	add	r1, r9
    7aa8:	9a01      	ldr	r2, [sp, #4]
    7aaa:	0020      	movs	r0, r4
    7aac:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    7aae:	2800      	cmp	r0, #0
    7ab0:	d109      	bne.n	7ac6 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    7ab2:	1bad      	subs	r5, r5, r6
    7ab4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    7ab6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    7ab8:	42b5      	cmp	r5, r6
    7aba:	d8f2      	bhi.n	7aa2 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    7abc:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    7abe:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    7ac0:	0020      	movs	r0, r4
    7ac2:	4b06      	ldr	r3, [pc, #24]	; (7adc <nm_write_block+0x64>)
    7ac4:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    7ac6:	b002      	add	sp, #8
    7ac8:	bc1c      	pop	{r2, r3, r4}
    7aca:	4690      	mov	r8, r2
    7acc:	4699      	mov	r9, r3
    7ace:	46a2      	mov	sl, r4
    7ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    7ad2:	2100      	movs	r1, #0
    7ad4:	e7f2      	b.n	7abc <nm_write_block+0x44>
    7ad6:	46c0      	nop			; (mov r8, r8)
    7ad8:	20000000 	.word	0x20000000
    7adc:	00008695 	.word	0x00008695

00007ae0 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    7ae0:	b570      	push	{r4, r5, r6, lr}
    7ae2:	b084      	sub	sp, #16
    7ae4:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    7ae6:	2300      	movs	r3, #0
    7ae8:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    7aea:	2208      	movs	r2, #8
    7aec:	2100      	movs	r1, #0
    7aee:	a801      	add	r0, sp, #4
    7af0:	4b2d      	ldr	r3, [pc, #180]	; (7ba8 <nm_get_firmware_full_info+0xc8>)
    7af2:	4798      	blx	r3
	if (pstrRev != NULL)
    7af4:	2c00      	cmp	r4, #0
    7af6:	d044      	beq.n	7b82 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    7af8:	2228      	movs	r2, #40	; 0x28
    7afa:	2100      	movs	r1, #0
    7afc:	0020      	movs	r0, r4
    7afe:	4b2b      	ldr	r3, [pc, #172]	; (7bac <nm_get_firmware_full_info+0xcc>)
    7b00:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    7b02:	a903      	add	r1, sp, #12
    7b04:	482a      	ldr	r0, [pc, #168]	; (7bb0 <nm_get_firmware_full_info+0xd0>)
    7b06:	4b2b      	ldr	r3, [pc, #172]	; (7bb4 <nm_get_firmware_full_info+0xd4>)
    7b08:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    7b0a:	2800      	cmp	r0, #0
    7b0c:	d13a      	bne.n	7b84 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    7b0e:	9b03      	ldr	r3, [sp, #12]
    7b10:	2b00      	cmp	r3, #0
    7b12:	d039      	beq.n	7b88 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    7b14:	20c0      	movs	r0, #192	; 0xc0
    7b16:	0280      	lsls	r0, r0, #10
    7b18:	4318      	orrs	r0, r3
    7b1a:	2208      	movs	r2, #8
    7b1c:	a901      	add	r1, sp, #4
    7b1e:	4b26      	ldr	r3, [pc, #152]	; (7bb8 <nm_get_firmware_full_info+0xd8>)
    7b20:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    7b22:	2800      	cmp	r0, #0
    7b24:	d12e      	bne.n	7b84 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    7b26:	9b02      	ldr	r3, [sp, #8]
    7b28:	0418      	lsls	r0, r3, #16
    7b2a:	0c00      	lsrs	r0, r0, #16
    7b2c:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    7b2e:	d02e      	beq.n	7b8e <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    7b30:	23c0      	movs	r3, #192	; 0xc0
    7b32:	029b      	lsls	r3, r3, #10
    7b34:	4318      	orrs	r0, r3
    7b36:	2228      	movs	r2, #40	; 0x28
    7b38:	0021      	movs	r1, r4
    7b3a:	4b1f      	ldr	r3, [pc, #124]	; (7bb8 <nm_get_firmware_full_info+0xd8>)
    7b3c:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    7b3e:	2800      	cmp	r0, #0
    7b40:	d120      	bne.n	7b84 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    7b42:	7921      	ldrb	r1, [r4, #4]
    7b44:	0209      	lsls	r1, r1, #8
    7b46:	79a2      	ldrb	r2, [r4, #6]
    7b48:	230f      	movs	r3, #15
    7b4a:	401a      	ands	r2, r3
    7b4c:	430a      	orrs	r2, r1
    7b4e:	7961      	ldrb	r1, [r4, #5]
    7b50:	0109      	lsls	r1, r1, #4
    7b52:	25ff      	movs	r5, #255	; 0xff
    7b54:	4029      	ands	r1, r5
    7b56:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    7b58:	79e1      	ldrb	r1, [r4, #7]
    7b5a:	0209      	lsls	r1, r1, #8
    7b5c:	7a66      	ldrb	r6, [r4, #9]
    7b5e:	4033      	ands	r3, r6
    7b60:	430b      	orrs	r3, r1
    7b62:	7a21      	ldrb	r1, [r4, #8]
    7b64:	0109      	lsls	r1, r1, #4
    7b66:	400d      	ands	r5, r1
    7b68:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    7b6a:	2a00      	cmp	r2, #0
    7b6c:	d012      	beq.n	7b94 <nm_get_firmware_full_info+0xb4>
    7b6e:	2b00      	cmp	r3, #0
    7b70:	d013      	beq.n	7b9a <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    7b72:	4912      	ldr	r1, [pc, #72]	; (7bbc <nm_get_firmware_full_info+0xdc>)
    7b74:	428b      	cmp	r3, r1
    7b76:	d813      	bhi.n	7ba0 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    7b78:	4b11      	ldr	r3, [pc, #68]	; (7bc0 <nm_get_firmware_full_info+0xe0>)
    7b7a:	429a      	cmp	r2, r3
    7b7c:	d802      	bhi.n	7b84 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    7b7e:	380d      	subs	r0, #13
    7b80:	e000      	b.n	7b84 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    7b82:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    7b84:	b004      	add	sp, #16
    7b86:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    7b88:	200c      	movs	r0, #12
    7b8a:	4240      	negs	r0, r0
    7b8c:	e7fa      	b.n	7b84 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    7b8e:	200c      	movs	r0, #12
    7b90:	4240      	negs	r0, r0
    7b92:	e7f7      	b.n	7b84 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    7b94:	200c      	movs	r0, #12
    7b96:	4240      	negs	r0, r0
    7b98:	e7f4      	b.n	7b84 <nm_get_firmware_full_info+0xa4>
    7b9a:	200c      	movs	r0, #12
    7b9c:	4240      	negs	r0, r0
    7b9e:	e7f1      	b.n	7b84 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    7ba0:	200d      	movs	r0, #13
    7ba2:	4240      	negs	r0, r0
    7ba4:	e7ee      	b.n	7b84 <nm_get_firmware_full_info+0xa4>
    7ba6:	46c0      	nop			; (mov r8, r8)
    7ba8:	0000e8c7 	.word	0x0000e8c7
    7bac:	000065b1 	.word	0x000065b1
    7bb0:	000c0008 	.word	0x000c0008
    7bb4:	000079f9 	.word	0x000079f9
    7bb8:	00007a11 	.word	0x00007a11
    7bbc:	00001352 	.word	0x00001352
    7bc0:	00001351 	.word	0x00001351

00007bc4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    7bc4:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    7bc6:	2800      	cmp	r0, #0
    7bc8:	d037      	beq.n	7c3a <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    7bca:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    7bcc:	1e6b      	subs	r3, r5, #1
    7bce:	2b03      	cmp	r3, #3
    7bd0:	d900      	bls.n	7bd4 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    7bd2:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    7bd4:	2000      	movs	r0, #0
    7bd6:	4b20      	ldr	r3, [pc, #128]	; (7c58 <nm_drv_init+0x94>)
    7bd8:	4798      	blx	r3
    7bda:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    7bdc:	d12f      	bne.n	7c3e <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    7bde:	481f      	ldr	r0, [pc, #124]	; (7c5c <nm_drv_init+0x98>)
    7be0:	4c1f      	ldr	r4, [pc, #124]	; (7c60 <nm_drv_init+0x9c>)
    7be2:	47a0      	blx	r4
    7be4:	4b1f      	ldr	r3, [pc, #124]	; (7c64 <nm_drv_init+0xa0>)
    7be6:	4798      	blx	r3
    7be8:	0001      	movs	r1, r0
    7bea:	481f      	ldr	r0, [pc, #124]	; (7c68 <nm_drv_init+0xa4>)
    7bec:	47a0      	blx	r4
    7bee:	200d      	movs	r0, #13
    7bf0:	4b1e      	ldr	r3, [pc, #120]	; (7c6c <nm_drv_init+0xa8>)
    7bf2:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    7bf4:	4b1e      	ldr	r3, [pc, #120]	; (7c70 <nm_drv_init+0xac>)
    7bf6:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    7bf8:	0028      	movs	r0, r5
    7bfa:	4b1e      	ldr	r3, [pc, #120]	; (7c74 <nm_drv_init+0xb0>)
    7bfc:	4798      	blx	r3
    7bfe:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    7c00:	d117      	bne.n	7c32 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    7c02:	0028      	movs	r0, r5
    7c04:	4b1c      	ldr	r3, [pc, #112]	; (7c78 <nm_drv_init+0xb4>)
    7c06:	4798      	blx	r3
    7c08:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    7c0a:	d112      	bne.n	7c32 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    7c0c:	3d02      	subs	r5, #2
    7c0e:	2d01      	cmp	r5, #1
    7c10:	d911      	bls.n	7c36 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    7c12:	4b1a      	ldr	r3, [pc, #104]	; (7c7c <nm_drv_init+0xb8>)
    7c14:	4798      	blx	r3
    7c16:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    7c18:	d00d      	beq.n	7c36 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    7c1a:	2256      	movs	r2, #86	; 0x56
    7c1c:	32ff      	adds	r2, #255	; 0xff
    7c1e:	4918      	ldr	r1, [pc, #96]	; (7c80 <nm_drv_init+0xbc>)
    7c20:	4818      	ldr	r0, [pc, #96]	; (7c84 <nm_drv_init+0xc0>)
    7c22:	4b0f      	ldr	r3, [pc, #60]	; (7c60 <nm_drv_init+0x9c>)
    7c24:	4798      	blx	r3
    7c26:	4818      	ldr	r0, [pc, #96]	; (7c88 <nm_drv_init+0xc4>)
    7c28:	4b18      	ldr	r3, [pc, #96]	; (7c8c <nm_drv_init+0xc8>)
    7c2a:	4798      	blx	r3
    7c2c:	200d      	movs	r0, #13
    7c2e:	4b0f      	ldr	r3, [pc, #60]	; (7c6c <nm_drv_init+0xa8>)
    7c30:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    7c32:	4b17      	ldr	r3, [pc, #92]	; (7c90 <nm_drv_init+0xcc>)
    7c34:	4798      	blx	r3
ERR1:
	return ret;
}
    7c36:	0020      	movs	r0, r4
    7c38:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    7c3a:	2501      	movs	r5, #1
    7c3c:	e7ca      	b.n	7bd4 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    7c3e:	2228      	movs	r2, #40	; 0x28
    7c40:	32ff      	adds	r2, #255	; 0xff
    7c42:	490f      	ldr	r1, [pc, #60]	; (7c80 <nm_drv_init+0xbc>)
    7c44:	480f      	ldr	r0, [pc, #60]	; (7c84 <nm_drv_init+0xc0>)
    7c46:	4b06      	ldr	r3, [pc, #24]	; (7c60 <nm_drv_init+0x9c>)
    7c48:	4798      	blx	r3
    7c4a:	4812      	ldr	r0, [pc, #72]	; (7c94 <nm_drv_init+0xd0>)
    7c4c:	4b0f      	ldr	r3, [pc, #60]	; (7c8c <nm_drv_init+0xc8>)
    7c4e:	4798      	blx	r3
    7c50:	200d      	movs	r0, #13
    7c52:	4b06      	ldr	r3, [pc, #24]	; (7c6c <nm_drv_init+0xa8>)
    7c54:	4798      	blx	r3
		goto ERR1;
    7c56:	e7ee      	b.n	7c36 <nm_drv_init+0x72>
    7c58:	000079c9 	.word	0x000079c9
    7c5c:	00014de0 	.word	0x00014de0
    7c60:	0000f309 	.word	0x0000f309
    7c64:	000075a9 	.word	0x000075a9
    7c68:	00015124 	.word	0x00015124
    7c6c:	0000f33d 	.word	0x0000f33d
    7c70:	0000840d 	.word	0x0000840d
    7c74:	000077bd 	.word	0x000077bd
    7c78:	000078c5 	.word	0x000078c5
    7c7c:	0000754d 	.word	0x0000754d
    7c80:	0001506c 	.word	0x0001506c
    7c84:	00014ab0 	.word	0x00014ab0
    7c88:	000150e8 	.word	0x000150e8
    7c8c:	0000f425 	.word	0x0000f425
    7c90:	000079d5 	.word	0x000079d5
    7c94:	00015108 	.word	0x00015108

00007c98 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    7c98:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    7c9a:	4b1c      	ldr	r3, [pc, #112]	; (7d0c <nm_drv_deinit+0x74>)
    7c9c:	4798      	blx	r3
    7c9e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    7ca0:	d10b      	bne.n	7cba <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    7ca2:	2000      	movs	r0, #0
    7ca4:	4b1a      	ldr	r3, [pc, #104]	; (7d10 <nm_drv_deinit+0x78>)
    7ca6:	4798      	blx	r3
    7ca8:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    7caa:	d114      	bne.n	7cd6 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    7cac:	4b19      	ldr	r3, [pc, #100]	; (7d14 <nm_drv_deinit+0x7c>)
    7cae:	4798      	blx	r3
    7cb0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    7cb2:	d11d      	bne.n	7cf0 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    7cb4:	4b18      	ldr	r3, [pc, #96]	; (7d18 <nm_drv_deinit+0x80>)
    7cb6:	4798      	blx	r3
    7cb8:	e00b      	b.n	7cd2 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    7cba:	22b6      	movs	r2, #182	; 0xb6
    7cbc:	0052      	lsls	r2, r2, #1
    7cbe:	4917      	ldr	r1, [pc, #92]	; (7d1c <nm_drv_deinit+0x84>)
    7cc0:	4817      	ldr	r0, [pc, #92]	; (7d20 <nm_drv_deinit+0x88>)
    7cc2:	4b18      	ldr	r3, [pc, #96]	; (7d24 <nm_drv_deinit+0x8c>)
    7cc4:	4798      	blx	r3
    7cc6:	4818      	ldr	r0, [pc, #96]	; (7d28 <nm_drv_deinit+0x90>)
    7cc8:	4b18      	ldr	r3, [pc, #96]	; (7d2c <nm_drv_deinit+0x94>)
    7cca:	4798      	blx	r3
    7ccc:	200d      	movs	r0, #13
    7cce:	4b18      	ldr	r3, [pc, #96]	; (7d30 <nm_drv_deinit+0x98>)
    7cd0:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    7cd2:	0020      	movs	r0, r4
    7cd4:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    7cd6:	2274      	movs	r2, #116	; 0x74
    7cd8:	32ff      	adds	r2, #255	; 0xff
    7cda:	4910      	ldr	r1, [pc, #64]	; (7d1c <nm_drv_deinit+0x84>)
    7cdc:	4810      	ldr	r0, [pc, #64]	; (7d20 <nm_drv_deinit+0x88>)
    7cde:	4b11      	ldr	r3, [pc, #68]	; (7d24 <nm_drv_deinit+0x8c>)
    7ce0:	4798      	blx	r3
    7ce2:	4814      	ldr	r0, [pc, #80]	; (7d34 <nm_drv_deinit+0x9c>)
    7ce4:	4b11      	ldr	r3, [pc, #68]	; (7d2c <nm_drv_deinit+0x94>)
    7ce6:	4798      	blx	r3
    7ce8:	200d      	movs	r0, #13
    7cea:	4b11      	ldr	r3, [pc, #68]	; (7d30 <nm_drv_deinit+0x98>)
    7cec:	4798      	blx	r3
		goto ERR1;
    7cee:	e7f0      	b.n	7cd2 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    7cf0:	227a      	movs	r2, #122	; 0x7a
    7cf2:	32ff      	adds	r2, #255	; 0xff
    7cf4:	4909      	ldr	r1, [pc, #36]	; (7d1c <nm_drv_deinit+0x84>)
    7cf6:	480a      	ldr	r0, [pc, #40]	; (7d20 <nm_drv_deinit+0x88>)
    7cf8:	4b0a      	ldr	r3, [pc, #40]	; (7d24 <nm_drv_deinit+0x8c>)
    7cfa:	4798      	blx	r3
    7cfc:	480e      	ldr	r0, [pc, #56]	; (7d38 <nm_drv_deinit+0xa0>)
    7cfe:	4b0b      	ldr	r3, [pc, #44]	; (7d2c <nm_drv_deinit+0x94>)
    7d00:	4798      	blx	r3
    7d02:	200d      	movs	r0, #13
    7d04:	4b0a      	ldr	r3, [pc, #40]	; (7d30 <nm_drv_deinit+0x98>)
    7d06:	4798      	blx	r3
		goto ERR1;
    7d08:	e7e3      	b.n	7cd2 <nm_drv_deinit+0x3a>
    7d0a:	46c0      	nop			; (mov r8, r8)
    7d0c:	0000793d 	.word	0x0000793d
    7d10:	0000922d 	.word	0x0000922d
    7d14:	000079d5 	.word	0x000079d5
    7d18:	000083b9 	.word	0x000083b9
    7d1c:	00015078 	.word	0x00015078
    7d20:	00014ab0 	.word	0x00014ab0
    7d24:	0000f309 	.word	0x0000f309
    7d28:	00015088 	.word	0x00015088
    7d2c:	0000f425 	.word	0x0000f425
    7d30:	0000f33d 	.word	0x0000f33d
    7d34:	000150a8 	.word	0x000150a8
    7d38:	000150cc 	.word	0x000150cc

00007d3c <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    7d3c:	b500      	push	{lr}
    7d3e:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    7d40:	ab01      	add	r3, sp, #4
    7d42:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    7d44:	2200      	movs	r2, #0
    7d46:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    7d48:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7d4a:	0019      	movs	r1, r3
    7d4c:	2003      	movs	r0, #3
    7d4e:	4b02      	ldr	r3, [pc, #8]	; (7d58 <nmi_spi_write+0x1c>)
    7d50:	4798      	blx	r3
}
    7d52:	b005      	add	sp, #20
    7d54:	bd00      	pop	{pc}
    7d56:	46c0      	nop			; (mov r8, r8)
    7d58:	000063e5 	.word	0x000063e5

00007d5c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    7d5c:	b570      	push	{r4, r5, r6, lr}
    7d5e:	b084      	sub	sp, #16
    7d60:	ac08      	add	r4, sp, #32
    7d62:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    7d64:	ac01      	add	r4, sp, #4
    7d66:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    7d68:	303f      	adds	r0, #63	; 0x3f
    7d6a:	b2c4      	uxtb	r4, r0
    7d6c:	2c0e      	cmp	r4, #14
    7d6e:	d900      	bls.n	7d72 <spi_cmd+0x16>
    7d70:	e084      	b.n	7e7c <spi_cmd+0x120>
    7d72:	00a0      	lsls	r0, r4, #2
    7d74:	4c4f      	ldr	r4, [pc, #316]	; (7eb4 <spi_cmd+0x158>)
    7d76:	5820      	ldr	r0, [r4, r0]
    7d78:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    7d7a:	ab01      	add	r3, sp, #4
    7d7c:	0c0a      	lsrs	r2, r1, #16
    7d7e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    7d80:	0a0a      	lsrs	r2, r1, #8
    7d82:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    7d84:	70d9      	strb	r1, [r3, #3]
		len = 5;
    7d86:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    7d88:	4b4b      	ldr	r3, [pc, #300]	; (7eb8 <spi_cmd+0x15c>)
    7d8a:	781b      	ldrb	r3, [r3, #0]
    7d8c:	2b00      	cmp	r3, #0
    7d8e:	d077      	beq.n	7e80 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    7d90:	3901      	subs	r1, #1
    7d92:	b2c9      	uxtb	r1, r1
    7d94:	e083      	b.n	7e9e <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    7d96:	0a0b      	lsrs	r3, r1, #8
    7d98:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    7d9a:	2d00      	cmp	r5, #0
    7d9c:	d107      	bne.n	7dae <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    7d9e:	aa01      	add	r2, sp, #4
    7da0:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    7da2:	ab01      	add	r3, sp, #4
    7da4:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    7da6:	2200      	movs	r2, #0
    7da8:	70da      	strb	r2, [r3, #3]
		len = 5;
    7daa:	2105      	movs	r1, #5
		break;
    7dac:	e7ec      	b.n	7d88 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    7dae:	2280      	movs	r2, #128	; 0x80
    7db0:	4252      	negs	r2, r2
    7db2:	4313      	orrs	r3, r2
    7db4:	aa01      	add	r2, sp, #4
    7db6:	7053      	strb	r3, [r2, #1]
    7db8:	e7f3      	b.n	7da2 <spi_cmd+0x46>
		bc[1] = 0x00;
    7dba:	ab01      	add	r3, sp, #4
    7dbc:	2200      	movs	r2, #0
    7dbe:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    7dc0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    7dc2:	70da      	strb	r2, [r3, #3]
		len = 5;
    7dc4:	2105      	movs	r1, #5
		break;
    7dc6:	e7df      	b.n	7d88 <spi_cmd+0x2c>
		bc[1] = 0x00;
    7dc8:	ab01      	add	r3, sp, #4
    7dca:	2200      	movs	r2, #0
    7dcc:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    7dce:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    7dd0:	70da      	strb	r2, [r3, #3]
		len = 5;
    7dd2:	2105      	movs	r1, #5
		break;
    7dd4:	e7d8      	b.n	7d88 <spi_cmd+0x2c>
		bc[1] = 0xff;
    7dd6:	ab01      	add	r3, sp, #4
    7dd8:	22ff      	movs	r2, #255	; 0xff
    7dda:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    7ddc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    7dde:	70da      	strb	r2, [r3, #3]
		len = 5;
    7de0:	2105      	movs	r1, #5
		break;
    7de2:	e7d1      	b.n	7d88 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    7de4:	aa01      	add	r2, sp, #4
    7de6:	0c08      	lsrs	r0, r1, #16
    7de8:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    7dea:	0a08      	lsrs	r0, r1, #8
    7dec:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    7dee:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    7df0:	0a19      	lsrs	r1, r3, #8
    7df2:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    7df4:	7153      	strb	r3, [r2, #5]
		len = 7;
    7df6:	2107      	movs	r1, #7
		break;
    7df8:	e7c6      	b.n	7d88 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    7dfa:	aa01      	add	r2, sp, #4
    7dfc:	0c08      	lsrs	r0, r1, #16
    7dfe:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    7e00:	0a08      	lsrs	r0, r1, #8
    7e02:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    7e04:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    7e06:	0c19      	lsrs	r1, r3, #16
    7e08:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    7e0a:	0a19      	lsrs	r1, r3, #8
    7e0c:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    7e0e:	7193      	strb	r3, [r2, #6]
		len = 8;
    7e10:	2108      	movs	r1, #8
		break;
    7e12:	e7b9      	b.n	7d88 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    7e14:	0a0b      	lsrs	r3, r1, #8
    7e16:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    7e18:	2d00      	cmp	r5, #0
    7e1a:	d10c      	bne.n	7e36 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    7e1c:	a801      	add	r0, sp, #4
    7e1e:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    7e20:	ab01      	add	r3, sp, #4
    7e22:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    7e24:	0e11      	lsrs	r1, r2, #24
    7e26:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    7e28:	0c11      	lsrs	r1, r2, #16
    7e2a:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    7e2c:	0a11      	lsrs	r1, r2, #8
    7e2e:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    7e30:	719a      	strb	r2, [r3, #6]
		len = 8;
    7e32:	2108      	movs	r1, #8
		break;
    7e34:	e7a8      	b.n	7d88 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    7e36:	2080      	movs	r0, #128	; 0x80
    7e38:	4240      	negs	r0, r0
    7e3a:	4303      	orrs	r3, r0
    7e3c:	a801      	add	r0, sp, #4
    7e3e:	7043      	strb	r3, [r0, #1]
    7e40:	e7ee      	b.n	7e20 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    7e42:	ab01      	add	r3, sp, #4
    7e44:	0c08      	lsrs	r0, r1, #16
    7e46:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    7e48:	0a08      	lsrs	r0, r1, #8
    7e4a:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    7e4c:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    7e4e:	0e11      	lsrs	r1, r2, #24
    7e50:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    7e52:	0c11      	lsrs	r1, r2, #16
    7e54:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    7e56:	0a11      	lsrs	r1, r2, #8
    7e58:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    7e5a:	71da      	strb	r2, [r3, #7]
		len = 9;
    7e5c:	2109      	movs	r1, #9
		break;
    7e5e:	e793      	b.n	7d88 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    7e60:	2228      	movs	r2, #40	; 0x28
    7e62:	32ff      	adds	r2, #255	; 0xff
    7e64:	4915      	ldr	r1, [pc, #84]	; (7ebc <spi_cmd+0x160>)
    7e66:	4816      	ldr	r0, [pc, #88]	; (7ec0 <spi_cmd+0x164>)
    7e68:	4b16      	ldr	r3, [pc, #88]	; (7ec4 <spi_cmd+0x168>)
    7e6a:	4798      	blx	r3
    7e6c:	4816      	ldr	r0, [pc, #88]	; (7ec8 <spi_cmd+0x16c>)
    7e6e:	4b17      	ldr	r3, [pc, #92]	; (7ecc <spi_cmd+0x170>)
    7e70:	4798      	blx	r3
    7e72:	200d      	movs	r0, #13
    7e74:	4b16      	ldr	r3, [pc, #88]	; (7ed0 <spi_cmd+0x174>)
    7e76:	4798      	blx	r3
			result = N_FAIL;
    7e78:	2300      	movs	r3, #0
    7e7a:	e017      	b.n	7eac <spi_cmd+0x150>
	switch (cmd) {
    7e7c:	2300      	movs	r3, #0
    7e7e:	e015      	b.n	7eac <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    7e80:	1e4e      	subs	r6, r1, #1
    7e82:	aa01      	add	r2, sp, #4
    7e84:	1995      	adds	r5, r2, r6
    7e86:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    7e88:	4c12      	ldr	r4, [pc, #72]	; (7ed4 <spi_cmd+0x178>)
    7e8a:	005b      	lsls	r3, r3, #1
    7e8c:	7810      	ldrb	r0, [r2, #0]
    7e8e:	4043      	eors	r3, r0
    7e90:	5ce3      	ldrb	r3, [r4, r3]
    7e92:	3201      	adds	r2, #1
	while (len--)
    7e94:	42aa      	cmp	r2, r5
    7e96:	d1f8      	bne.n	7e8a <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    7e98:	005b      	lsls	r3, r3, #1
    7e9a:	aa01      	add	r2, sp, #4
    7e9c:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    7e9e:	b289      	uxth	r1, r1
    7ea0:	a801      	add	r0, sp, #4
    7ea2:	4b0d      	ldr	r3, [pc, #52]	; (7ed8 <spi_cmd+0x17c>)
    7ea4:	4798      	blx	r3
    7ea6:	2301      	movs	r3, #1
    7ea8:	2800      	cmp	r0, #0
    7eaa:	d1d9      	bne.n	7e60 <spi_cmd+0x104>
		}
	}

	return result;
}
    7eac:	0018      	movs	r0, r3
    7eae:	b004      	add	sp, #16
    7eb0:	bd70      	pop	{r4, r5, r6, pc}
    7eb2:	46c0      	nop			; (mov r8, r8)
    7eb4:	00015134 	.word	0x00015134
    7eb8:	20000224 	.word	0x20000224
    7ebc:	00015174 	.word	0x00015174
    7ec0:	00014ab0 	.word	0x00014ab0
    7ec4:	0000f309 	.word	0x0000f309
    7ec8:	00015604 	.word	0x00015604
    7ecc:	0000f425 	.word	0x0000f425
    7ed0:	0000f33d 	.word	0x0000f33d
    7ed4:	00015200 	.word	0x00015200
    7ed8:	00007d3d 	.word	0x00007d3d

00007edc <nmi_spi_read>:
{
    7edc:	b500      	push	{lr}
    7ede:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    7ee0:	ab01      	add	r3, sp, #4
    7ee2:	2200      	movs	r2, #0
    7ee4:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    7ee6:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    7ee8:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7eea:	0019      	movs	r1, r3
    7eec:	2003      	movs	r0, #3
    7eee:	4b02      	ldr	r3, [pc, #8]	; (7ef8 <nmi_spi_read+0x1c>)
    7ef0:	4798      	blx	r3
}
    7ef2:	b005      	add	sp, #20
    7ef4:	bd00      	pop	{pc}
    7ef6:	46c0      	nop			; (mov r8, r8)
    7ef8:	000063e5 	.word	0x000063e5

00007efc <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    7efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7efe:	46c6      	mov	lr, r8
    7f00:	b500      	push	{lr}
    7f02:	b082      	sub	sp, #8
    7f04:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    7f06:	28cf      	cmp	r0, #207	; 0xcf
    7f08:	d02b      	beq.n	7f62 <spi_cmd_rsp+0x66>
    7f0a:	0003      	movs	r3, r0
    7f0c:	333b      	adds	r3, #59	; 0x3b
    7f0e:	b2db      	uxtb	r3, r3
    7f10:	2b01      	cmp	r3, #1
    7f12:	d926      	bls.n	7f62 <spi_cmd_rsp+0x66>
{
    7f14:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7f16:	466b      	mov	r3, sp
    7f18:	1dde      	adds	r6, r3, #7
    7f1a:	4b26      	ldr	r3, [pc, #152]	; (7fb4 <spi_cmd_rsp+0xb8>)
    7f1c:	4698      	mov	r8, r3
    7f1e:	2101      	movs	r1, #1
    7f20:	0030      	movs	r0, r6
    7f22:	47c0      	blx	r8
    7f24:	1e05      	subs	r5, r0, #0
    7f26:	d125      	bne.n	7f74 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    7f28:	7833      	ldrb	r3, [r6, #0]
    7f2a:	42bb      	cmp	r3, r7
    7f2c:	d030      	beq.n	7f90 <spi_cmd_rsp+0x94>
    7f2e:	3c01      	subs	r4, #1
    7f30:	b2e4      	uxtb	r4, r4
    7f32:	2c00      	cmp	r4, #0
    7f34:	d1f3      	bne.n	7f1e <spi_cmd_rsp+0x22>
    7f36:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7f38:	466b      	mov	r3, sp
    7f3a:	1dde      	adds	r6, r3, #7
    7f3c:	4f1d      	ldr	r7, [pc, #116]	; (7fb4 <spi_cmd_rsp+0xb8>)
    7f3e:	2101      	movs	r1, #1
    7f40:	0030      	movs	r0, r6
    7f42:	47b8      	blx	r7
    7f44:	2800      	cmp	r0, #0
    7f46:	d125      	bne.n	7f94 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    7f48:	7833      	ldrb	r3, [r6, #0]
    7f4a:	2b00      	cmp	r3, #0
    7f4c:	d02f      	beq.n	7fae <spi_cmd_rsp+0xb2>
    7f4e:	3c01      	subs	r4, #1
    7f50:	b2e4      	uxtb	r4, r4
    7f52:	2c00      	cmp	r4, #0
    7f54:	d1f3      	bne.n	7f3e <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    7f56:	2501      	movs	r5, #1

_fail_:

	return result;
}
    7f58:	0028      	movs	r0, r5
    7f5a:	b002      	add	sp, #8
    7f5c:	bc04      	pop	{r2}
    7f5e:	4690      	mov	r8, r2
    7f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7f62:	2101      	movs	r1, #1
    7f64:	466b      	mov	r3, sp
    7f66:	1dd8      	adds	r0, r3, #7
    7f68:	4b12      	ldr	r3, [pc, #72]	; (7fb4 <spi_cmd_rsp+0xb8>)
    7f6a:	4798      	blx	r3
			result = N_FAIL;
    7f6c:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7f6e:	2800      	cmp	r0, #0
    7f70:	d0d0      	beq.n	7f14 <spi_cmd_rsp+0x18>
    7f72:	e7f1      	b.n	7f58 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    7f74:	22b1      	movs	r2, #177	; 0xb1
    7f76:	0052      	lsls	r2, r2, #1
    7f78:	490f      	ldr	r1, [pc, #60]	; (7fb8 <spi_cmd_rsp+0xbc>)
    7f7a:	4810      	ldr	r0, [pc, #64]	; (7fbc <spi_cmd_rsp+0xc0>)
    7f7c:	4b10      	ldr	r3, [pc, #64]	; (7fc0 <spi_cmd_rsp+0xc4>)
    7f7e:	4798      	blx	r3
    7f80:	4810      	ldr	r0, [pc, #64]	; (7fc4 <spi_cmd_rsp+0xc8>)
    7f82:	4b11      	ldr	r3, [pc, #68]	; (7fc8 <spi_cmd_rsp+0xcc>)
    7f84:	4798      	blx	r3
    7f86:	200d      	movs	r0, #13
    7f88:	4b10      	ldr	r3, [pc, #64]	; (7fcc <spi_cmd_rsp+0xd0>)
    7f8a:	4798      	blx	r3
			result = N_FAIL;
    7f8c:	2500      	movs	r5, #0
			goto _fail_;
    7f8e:	e7e3      	b.n	7f58 <spi_cmd_rsp+0x5c>
    7f90:	240b      	movs	r4, #11
    7f92:	e7d1      	b.n	7f38 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    7f94:	22b8      	movs	r2, #184	; 0xb8
    7f96:	0052      	lsls	r2, r2, #1
    7f98:	4907      	ldr	r1, [pc, #28]	; (7fb8 <spi_cmd_rsp+0xbc>)
    7f9a:	4808      	ldr	r0, [pc, #32]	; (7fbc <spi_cmd_rsp+0xc0>)
    7f9c:	4b08      	ldr	r3, [pc, #32]	; (7fc0 <spi_cmd_rsp+0xc4>)
    7f9e:	4798      	blx	r3
    7fa0:	4808      	ldr	r0, [pc, #32]	; (7fc4 <spi_cmd_rsp+0xc8>)
    7fa2:	4b09      	ldr	r3, [pc, #36]	; (7fc8 <spi_cmd_rsp+0xcc>)
    7fa4:	4798      	blx	r3
    7fa6:	200d      	movs	r0, #13
    7fa8:	4b08      	ldr	r3, [pc, #32]	; (7fcc <spi_cmd_rsp+0xd0>)
    7faa:	4798      	blx	r3
			goto _fail_;
    7fac:	e7d4      	b.n	7f58 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    7fae:	2501      	movs	r5, #1
    7fb0:	e7d2      	b.n	7f58 <spi_cmd_rsp+0x5c>
    7fb2:	46c0      	nop			; (mov r8, r8)
    7fb4:	00007edd 	.word	0x00007edd
    7fb8:	0001518c 	.word	0x0001518c
    7fbc:	00014ab0 	.word	0x00014ab0
    7fc0:	0000f309 	.word	0x0000f309
    7fc4:	00015630 	.word	0x00015630
    7fc8:	0000f425 	.word	0x0000f425
    7fcc:	0000f33d 	.word	0x0000f33d

00007fd0 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    7fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fd2:	46de      	mov	lr, fp
    7fd4:	4657      	mov	r7, sl
    7fd6:	464e      	mov	r6, r9
    7fd8:	4645      	mov	r5, r8
    7fda:	b5e0      	push	{r5, r6, r7, lr}
    7fdc:	b087      	sub	sp, #28
    7fde:	9001      	str	r0, [sp, #4]
    7fe0:	4689      	mov	r9, r1
    7fe2:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    7fe4:	2300      	movs	r3, #0
    7fe6:	469a      	mov	sl, r3
    7fe8:	2380      	movs	r3, #128	; 0x80
    7fea:	019b      	lsls	r3, r3, #6
    7fec:	469b      	mov	fp, r3
    7fee:	466a      	mov	r2, sp
    7ff0:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7ff2:	4b3b      	ldr	r3, [pc, #236]	; (80e0 <spi_data_read+0x110>)
    7ff4:	4698      	mov	r8, r3
    7ff6:	e02e      	b.n	8056 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    7ff8:	4a3a      	ldr	r2, [pc, #232]	; (80e4 <spi_data_read+0x114>)
    7ffa:	493b      	ldr	r1, [pc, #236]	; (80e8 <spi_data_read+0x118>)
    7ffc:	483b      	ldr	r0, [pc, #236]	; (80ec <spi_data_read+0x11c>)
    7ffe:	4b3c      	ldr	r3, [pc, #240]	; (80f0 <spi_data_read+0x120>)
    8000:	4798      	blx	r3
    8002:	483c      	ldr	r0, [pc, #240]	; (80f4 <spi_data_read+0x124>)
    8004:	4b3c      	ldr	r3, [pc, #240]	; (80f8 <spi_data_read+0x128>)
    8006:	4798      	blx	r3
    8008:	200d      	movs	r0, #13
    800a:	4b3c      	ldr	r3, [pc, #240]	; (80fc <spi_data_read+0x12c>)
    800c:	4798      	blx	r3
    800e:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    8010:	0028      	movs	r0, r5
    8012:	b007      	add	sp, #28
    8014:	bc3c      	pop	{r2, r3, r4, r5}
    8016:	4690      	mov	r8, r2
    8018:	4699      	mov	r9, r3
    801a:	46a2      	mov	sl, r4
    801c:	46ab      	mov	fp, r5
    801e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    8020:	2c00      	cmp	r4, #0
    8022:	dd2e      	ble.n	8082 <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    8024:	9b01      	ldr	r3, [sp, #4]
    8026:	4453      	add	r3, sl
    8028:	0018      	movs	r0, r3
    802a:	0039      	movs	r1, r7
    802c:	4b2c      	ldr	r3, [pc, #176]	; (80e0 <spi_data_read+0x110>)
    802e:	4798      	blx	r3
    8030:	1e04      	subs	r4, r0, #0
    8032:	d133      	bne.n	809c <spi_data_read+0xcc>
		if(!clockless)
    8034:	9b02      	ldr	r3, [sp, #8]
    8036:	2b00      	cmp	r3, #0
    8038:	d103      	bne.n	8042 <spi_data_read+0x72>
			if (!gu8Crc_off) {
    803a:	4b31      	ldr	r3, [pc, #196]	; (8100 <spi_data_read+0x130>)
    803c:	781b      	ldrb	r3, [r3, #0]
    803e:	2b00      	cmp	r3, #0
    8040:	d039      	beq.n	80b6 <spi_data_read+0xe6>
		ix += nbytes;
    8042:	4653      	mov	r3, sl
    8044:	18fb      	adds	r3, r7, r3
    8046:	b21b      	sxth	r3, r3
    8048:	469a      	mov	sl, r3
		sz -= nbytes;
    804a:	464b      	mov	r3, r9
    804c:	1bdf      	subs	r7, r3, r7
    804e:	b2bb      	uxth	r3, r7
    8050:	4699      	mov	r9, r3
	} while (sz);
    8052:	2b00      	cmp	r3, #0
    8054:	d042      	beq.n	80dc <spi_data_read+0x10c>
    8056:	464f      	mov	r7, r9
    8058:	45d9      	cmp	r9, fp
    805a:	d901      	bls.n	8060 <spi_data_read+0x90>
    805c:	466b      	mov	r3, sp
    805e:	89df      	ldrh	r7, [r3, #14]
    8060:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    8062:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    8064:	ab04      	add	r3, sp, #16
    8066:	1cde      	adds	r6, r3, #3
    8068:	2101      	movs	r1, #1
    806a:	0030      	movs	r0, r6
    806c:	47c0      	blx	r8
    806e:	1e05      	subs	r5, r0, #0
    8070:	d1c2      	bne.n	7ff8 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    8072:	7833      	ldrb	r3, [r6, #0]
    8074:	091b      	lsrs	r3, r3, #4
    8076:	2b0f      	cmp	r3, #15
    8078:	d0d2      	beq.n	8020 <spi_data_read+0x50>
    807a:	3c01      	subs	r4, #1
    807c:	b224      	sxth	r4, r4
		} while (retry--);
    807e:	1c63      	adds	r3, r4, #1
    8080:	d1f2      	bne.n	8068 <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    8082:	4a20      	ldr	r2, [pc, #128]	; (8104 <spi_data_read+0x134>)
    8084:	4918      	ldr	r1, [pc, #96]	; (80e8 <spi_data_read+0x118>)
    8086:	4819      	ldr	r0, [pc, #100]	; (80ec <spi_data_read+0x11c>)
    8088:	4c19      	ldr	r4, [pc, #100]	; (80f0 <spi_data_read+0x120>)
    808a:	47a0      	blx	r4
    808c:	ab04      	add	r3, sp, #16
    808e:	78d9      	ldrb	r1, [r3, #3]
    8090:	481d      	ldr	r0, [pc, #116]	; (8108 <spi_data_read+0x138>)
    8092:	47a0      	blx	r4
    8094:	200d      	movs	r0, #13
    8096:	4b19      	ldr	r3, [pc, #100]	; (80fc <spi_data_read+0x12c>)
    8098:	4798      	blx	r3
			break;
    809a:	e7b9      	b.n	8010 <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    809c:	22c5      	movs	r2, #197	; 0xc5
    809e:	0092      	lsls	r2, r2, #2
    80a0:	4911      	ldr	r1, [pc, #68]	; (80e8 <spi_data_read+0x118>)
    80a2:	4812      	ldr	r0, [pc, #72]	; (80ec <spi_data_read+0x11c>)
    80a4:	4b12      	ldr	r3, [pc, #72]	; (80f0 <spi_data_read+0x120>)
    80a6:	4798      	blx	r3
    80a8:	4818      	ldr	r0, [pc, #96]	; (810c <spi_data_read+0x13c>)
    80aa:	4b13      	ldr	r3, [pc, #76]	; (80f8 <spi_data_read+0x128>)
    80ac:	4798      	blx	r3
    80ae:	200d      	movs	r0, #13
    80b0:	4b12      	ldr	r3, [pc, #72]	; (80fc <spi_data_read+0x12c>)
    80b2:	4798      	blx	r3
			break;
    80b4:	e7ac      	b.n	8010 <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    80b6:	2102      	movs	r1, #2
    80b8:	a805      	add	r0, sp, #20
    80ba:	4b09      	ldr	r3, [pc, #36]	; (80e0 <spi_data_read+0x110>)
    80bc:	4798      	blx	r3
    80be:	2800      	cmp	r0, #0
    80c0:	d0bf      	beq.n	8042 <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    80c2:	4a13      	ldr	r2, [pc, #76]	; (8110 <spi_data_read+0x140>)
    80c4:	4908      	ldr	r1, [pc, #32]	; (80e8 <spi_data_read+0x118>)
    80c6:	4809      	ldr	r0, [pc, #36]	; (80ec <spi_data_read+0x11c>)
    80c8:	4b09      	ldr	r3, [pc, #36]	; (80f0 <spi_data_read+0x120>)
    80ca:	4798      	blx	r3
    80cc:	4811      	ldr	r0, [pc, #68]	; (8114 <spi_data_read+0x144>)
    80ce:	4b0a      	ldr	r3, [pc, #40]	; (80f8 <spi_data_read+0x128>)
    80d0:	4798      	blx	r3
    80d2:	200d      	movs	r0, #13
    80d4:	4b09      	ldr	r3, [pc, #36]	; (80fc <spi_data_read+0x12c>)
    80d6:	4798      	blx	r3
					result = N_FAIL;
    80d8:	0025      	movs	r5, r4
					break;
    80da:	e799      	b.n	8010 <spi_data_read+0x40>
    80dc:	2501      	movs	r5, #1
    80de:	e797      	b.n	8010 <spi_data_read+0x40>
    80e0:	00007edd 	.word	0x00007edd
    80e4:	000002ff 	.word	0x000002ff
    80e8:	00015198 	.word	0x00015198
    80ec:	00014ab0 	.word	0x00014ab0
    80f0:	0000f309 	.word	0x0000f309
    80f4:	00015664 	.word	0x00015664
    80f8:	0000f425 	.word	0x0000f425
    80fc:	0000f33d 	.word	0x0000f33d
    8100:	20000224 	.word	0x20000224
    8104:	0000030b 	.word	0x0000030b
    8108:	00015698 	.word	0x00015698
    810c:	000156c8 	.word	0x000156c8
    8110:	0000031f 	.word	0x0000031f
    8114:	000156f8 	.word	0x000156f8

00008118 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    8118:	b5f0      	push	{r4, r5, r6, r7, lr}
    811a:	46d6      	mov	lr, sl
    811c:	464f      	mov	r7, r9
    811e:	4646      	mov	r6, r8
    8120:	b5c0      	push	{r6, r7, lr}
    8122:	b086      	sub	sp, #24
    8124:	9003      	str	r0, [sp, #12]
    8126:	9104      	str	r1, [sp, #16]
    8128:	2830      	cmp	r0, #48	; 0x30
    812a:	d80f      	bhi.n	814c <spi_write_reg+0x34>
    812c:	4b30      	ldr	r3, [pc, #192]	; (81f0 <spi_write_reg+0xd8>)
    812e:	781f      	ldrb	r7, [r3, #0]
    8130:	b2fb      	uxtb	r3, r7
    8132:	9305      	str	r3, [sp, #20]
    8134:	2300      	movs	r3, #0
    8136:	2230      	movs	r2, #48	; 0x30
    8138:	9903      	ldr	r1, [sp, #12]
    813a:	428a      	cmp	r2, r1
    813c:	415b      	adcs	r3, r3
    813e:	b2db      	uxtb	r3, r3
    8140:	469a      	mov	sl, r3
    8142:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    8144:	4b2b      	ldr	r3, [pc, #172]	; (81f4 <spi_write_reg+0xdc>)
    8146:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    8148:	46d1      	mov	r9, sl
    814a:	e033      	b.n	81b4 <spi_write_reg+0x9c>
    814c:	4b2a      	ldr	r3, [pc, #168]	; (81f8 <spi_write_reg+0xe0>)
    814e:	781f      	ldrb	r7, [r3, #0]
    8150:	e7ee      	b.n	8130 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    8152:	9805      	ldr	r0, [sp, #20]
    8154:	4b29      	ldr	r3, [pc, #164]	; (81fc <spi_write_reg+0xe4>)
    8156:	4798      	blx	r3
    8158:	0004      	movs	r4, r0
	if (result != N_OK) {
    815a:	2801      	cmp	r0, #1
    815c:	d041      	beq.n	81e2 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    815e:	22e7      	movs	r2, #231	; 0xe7
    8160:	0092      	lsls	r2, r2, #2
    8162:	4927      	ldr	r1, [pc, #156]	; (8200 <spi_write_reg+0xe8>)
    8164:	4827      	ldr	r0, [pc, #156]	; (8204 <spi_write_reg+0xec>)
    8166:	4e28      	ldr	r6, [pc, #160]	; (8208 <spi_write_reg+0xf0>)
    8168:	47b0      	blx	r6
    816a:	9903      	ldr	r1, [sp, #12]
    816c:	4827      	ldr	r0, [pc, #156]	; (820c <spi_write_reg+0xf4>)
    816e:	47b0      	blx	r6
    8170:	200d      	movs	r0, #13
    8172:	4b27      	ldr	r3, [pc, #156]	; (8210 <spi_write_reg+0xf8>)
    8174:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    8176:	2001      	movs	r0, #1
    8178:	4e26      	ldr	r6, [pc, #152]	; (8214 <spi_write_reg+0xfc>)
    817a:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    817c:	2300      	movs	r3, #0
    817e:	9300      	str	r3, [sp, #0]
    8180:	2200      	movs	r2, #0
    8182:	2100      	movs	r1, #0
    8184:	20cf      	movs	r0, #207	; 0xcf
    8186:	4f1b      	ldr	r7, [pc, #108]	; (81f4 <spi_write_reg+0xdc>)
    8188:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    818a:	20cf      	movs	r0, #207	; 0xcf
    818c:	4b1b      	ldr	r3, [pc, #108]	; (81fc <spi_write_reg+0xe4>)
    818e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    8190:	4a21      	ldr	r2, [pc, #132]	; (8218 <spi_write_reg+0x100>)
    8192:	491b      	ldr	r1, [pc, #108]	; (8200 <spi_write_reg+0xe8>)
    8194:	481b      	ldr	r0, [pc, #108]	; (8204 <spi_write_reg+0xec>)
    8196:	4f1c      	ldr	r7, [pc, #112]	; (8208 <spi_write_reg+0xf0>)
    8198:	47b8      	blx	r7
    819a:	9b04      	ldr	r3, [sp, #16]
    819c:	9a03      	ldr	r2, [sp, #12]
    819e:	0029      	movs	r1, r5
    81a0:	481e      	ldr	r0, [pc, #120]	; (821c <spi_write_reg+0x104>)
    81a2:	47b8      	blx	r7
    81a4:	200d      	movs	r0, #13
    81a6:	4b1a      	ldr	r3, [pc, #104]	; (8210 <spi_write_reg+0xf8>)
    81a8:	4798      	blx	r3
		nm_bsp_sleep(1);
    81aa:	2001      	movs	r0, #1
    81ac:	47b0      	blx	r6
    81ae:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    81b0:	2d00      	cmp	r5, #0
    81b2:	d016      	beq.n	81e2 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    81b4:	464b      	mov	r3, r9
    81b6:	9300      	str	r3, [sp, #0]
    81b8:	2304      	movs	r3, #4
    81ba:	9a04      	ldr	r2, [sp, #16]
    81bc:	9f03      	ldr	r7, [sp, #12]
    81be:	0039      	movs	r1, r7
    81c0:	9805      	ldr	r0, [sp, #20]
    81c2:	47c0      	blx	r8
    81c4:	0004      	movs	r4, r0
	if (result != N_OK) {
    81c6:	2801      	cmp	r0, #1
    81c8:	d0c3      	beq.n	8152 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    81ca:	4a15      	ldr	r2, [pc, #84]	; (8220 <spi_write_reg+0x108>)
    81cc:	490c      	ldr	r1, [pc, #48]	; (8200 <spi_write_reg+0xe8>)
    81ce:	480d      	ldr	r0, [pc, #52]	; (8204 <spi_write_reg+0xec>)
    81d0:	4e0d      	ldr	r6, [pc, #52]	; (8208 <spi_write_reg+0xf0>)
    81d2:	47b0      	blx	r6
    81d4:	0039      	movs	r1, r7
    81d6:	4813      	ldr	r0, [pc, #76]	; (8224 <spi_write_reg+0x10c>)
    81d8:	47b0      	blx	r6
    81da:	200d      	movs	r0, #13
    81dc:	4b0c      	ldr	r3, [pc, #48]	; (8210 <spi_write_reg+0xf8>)
    81de:	4798      	blx	r3
		goto _FAIL_;
    81e0:	e7c9      	b.n	8176 <spi_write_reg+0x5e>
	}

	return result;
}
    81e2:	0020      	movs	r0, r4
    81e4:	b006      	add	sp, #24
    81e6:	bc1c      	pop	{r2, r3, r4}
    81e8:	4690      	mov	r8, r2
    81ea:	4699      	mov	r9, r3
    81ec:	46a2      	mov	sl, r4
    81ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81f0:	00015170 	.word	0x00015170
    81f4:	00007d5d 	.word	0x00007d5d
    81f8:	00015171 	.word	0x00015171
    81fc:	00007efd 	.word	0x00007efd
    8200:	000151b8 	.word	0x000151b8
    8204:	00014ab0 	.word	0x00014ab0
    8208:	0000f309 	.word	0x0000f309
    820c:	000157f0 	.word	0x000157f0
    8210:	0000f33d 	.word	0x0000f33d
    8214:	000061a9 	.word	0x000061a9
    8218:	000003af 	.word	0x000003af
    821c:	00015828 	.word	0x00015828
    8220:	00000396 	.word	0x00000396
    8224:	000157c4 	.word	0x000157c4

00008228 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    8228:	b5f0      	push	{r4, r5, r6, r7, lr}
    822a:	46de      	mov	lr, fp
    822c:	4657      	mov	r7, sl
    822e:	464e      	mov	r6, r9
    8230:	4645      	mov	r5, r8
    8232:	b5e0      	push	{r5, r6, r7, lr}
    8234:	b087      	sub	sp, #28
    8236:	9002      	str	r0, [sp, #8]
    8238:	468b      	mov	fp, r1
    823a:	28ff      	cmp	r0, #255	; 0xff
    823c:	d80f      	bhi.n	825e <spi_read_reg+0x36>
    823e:	4b41      	ldr	r3, [pc, #260]	; (8344 <spi_read_reg+0x11c>)
    8240:	781f      	ldrb	r7, [r3, #0]
    8242:	b2fb      	uxtb	r3, r7
    8244:	9303      	str	r3, [sp, #12]
    8246:	2300      	movs	r3, #0
    8248:	22ff      	movs	r2, #255	; 0xff
    824a:	9902      	ldr	r1, [sp, #8]
    824c:	428a      	cmp	r2, r1
    824e:	415b      	adcs	r3, r3
    8250:	b2db      	uxtb	r3, r3
    8252:	469a      	mov	sl, r3
    8254:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    8256:	4b3c      	ldr	r3, [pc, #240]	; (8348 <spi_read_reg+0x120>)
    8258:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    825a:	46d1      	mov	r9, sl
    825c:	e031      	b.n	82c2 <spi_read_reg+0x9a>
    825e:	4b3b      	ldr	r3, [pc, #236]	; (834c <spi_read_reg+0x124>)
    8260:	781f      	ldrb	r7, [r3, #0]
    8262:	e7ee      	b.n	8242 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    8264:	9803      	ldr	r0, [sp, #12]
    8266:	4b3a      	ldr	r3, [pc, #232]	; (8350 <spi_read_reg+0x128>)
    8268:	4798      	blx	r3
    826a:	0004      	movs	r4, r0
	if (result != N_OK) {
    826c:	2801      	cmp	r0, #1
    826e:	d03f      	beq.n	82f0 <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    8270:	4a38      	ldr	r2, [pc, #224]	; (8354 <spi_read_reg+0x12c>)
    8272:	4939      	ldr	r1, [pc, #228]	; (8358 <spi_read_reg+0x130>)
    8274:	4839      	ldr	r0, [pc, #228]	; (835c <spi_read_reg+0x134>)
    8276:	4e3a      	ldr	r6, [pc, #232]	; (8360 <spi_read_reg+0x138>)
    8278:	47b0      	blx	r6
    827a:	9902      	ldr	r1, [sp, #8]
    827c:	4839      	ldr	r0, [pc, #228]	; (8364 <spi_read_reg+0x13c>)
    827e:	47b0      	blx	r6
    8280:	200d      	movs	r0, #13
    8282:	4b39      	ldr	r3, [pc, #228]	; (8368 <spi_read_reg+0x140>)
    8284:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    8286:	2001      	movs	r0, #1
    8288:	4e38      	ldr	r6, [pc, #224]	; (836c <spi_read_reg+0x144>)
    828a:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    828c:	2300      	movs	r3, #0
    828e:	9300      	str	r3, [sp, #0]
    8290:	2200      	movs	r2, #0
    8292:	2100      	movs	r1, #0
    8294:	20cf      	movs	r0, #207	; 0xcf
    8296:	4f2c      	ldr	r7, [pc, #176]	; (8348 <spi_read_reg+0x120>)
    8298:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    829a:	20cf      	movs	r0, #207	; 0xcf
    829c:	4b2c      	ldr	r3, [pc, #176]	; (8350 <spi_read_reg+0x128>)
    829e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    82a0:	4a33      	ldr	r2, [pc, #204]	; (8370 <spi_read_reg+0x148>)
    82a2:	492d      	ldr	r1, [pc, #180]	; (8358 <spi_read_reg+0x130>)
    82a4:	482d      	ldr	r0, [pc, #180]	; (835c <spi_read_reg+0x134>)
    82a6:	4f2e      	ldr	r7, [pc, #184]	; (8360 <spi_read_reg+0x138>)
    82a8:	47b8      	blx	r7
    82aa:	9a02      	ldr	r2, [sp, #8]
    82ac:	0029      	movs	r1, r5
    82ae:	4831      	ldr	r0, [pc, #196]	; (8374 <spi_read_reg+0x14c>)
    82b0:	47b8      	blx	r7
    82b2:	200d      	movs	r0, #13
    82b4:	4b2c      	ldr	r3, [pc, #176]	; (8368 <spi_read_reg+0x140>)
    82b6:	4798      	blx	r3
		nm_bsp_sleep(1);
    82b8:	2001      	movs	r0, #1
    82ba:	47b0      	blx	r6
    82bc:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    82be:	2d00      	cmp	r5, #0
    82c0:	d037      	beq.n	8332 <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    82c2:	464b      	mov	r3, r9
    82c4:	9300      	str	r3, [sp, #0]
    82c6:	2304      	movs	r3, #4
    82c8:	2200      	movs	r2, #0
    82ca:	9f02      	ldr	r7, [sp, #8]
    82cc:	0039      	movs	r1, r7
    82ce:	9803      	ldr	r0, [sp, #12]
    82d0:	47c0      	blx	r8
    82d2:	0004      	movs	r4, r0
	if (result != N_OK) {
    82d4:	2801      	cmp	r0, #1
    82d6:	d0c5      	beq.n	8264 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    82d8:	4a27      	ldr	r2, [pc, #156]	; (8378 <spi_read_reg+0x150>)
    82da:	491f      	ldr	r1, [pc, #124]	; (8358 <spi_read_reg+0x130>)
    82dc:	481f      	ldr	r0, [pc, #124]	; (835c <spi_read_reg+0x134>)
    82de:	4e20      	ldr	r6, [pc, #128]	; (8360 <spi_read_reg+0x138>)
    82e0:	47b0      	blx	r6
    82e2:	0039      	movs	r1, r7
    82e4:	4825      	ldr	r0, [pc, #148]	; (837c <spi_read_reg+0x154>)
    82e6:	47b0      	blx	r6
    82e8:	200d      	movs	r0, #13
    82ea:	4b1f      	ldr	r3, [pc, #124]	; (8368 <spi_read_reg+0x140>)
    82ec:	4798      	blx	r3
		goto _FAIL_;
    82ee:	e7ca      	b.n	8286 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    82f0:	464a      	mov	r2, r9
    82f2:	2104      	movs	r1, #4
    82f4:	a805      	add	r0, sp, #20
    82f6:	4b22      	ldr	r3, [pc, #136]	; (8380 <spi_read_reg+0x158>)
    82f8:	4798      	blx	r3
    82fa:	0004      	movs	r4, r0
	if (result != N_OK) {
    82fc:	2801      	cmp	r0, #1
    82fe:	d00b      	beq.n	8318 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    8300:	4a20      	ldr	r2, [pc, #128]	; (8384 <spi_read_reg+0x15c>)
    8302:	4915      	ldr	r1, [pc, #84]	; (8358 <spi_read_reg+0x130>)
    8304:	4815      	ldr	r0, [pc, #84]	; (835c <spi_read_reg+0x134>)
    8306:	4b16      	ldr	r3, [pc, #88]	; (8360 <spi_read_reg+0x138>)
    8308:	4798      	blx	r3
    830a:	481f      	ldr	r0, [pc, #124]	; (8388 <spi_read_reg+0x160>)
    830c:	4b1f      	ldr	r3, [pc, #124]	; (838c <spi_read_reg+0x164>)
    830e:	4798      	blx	r3
    8310:	200d      	movs	r0, #13
    8312:	4b15      	ldr	r3, [pc, #84]	; (8368 <spi_read_reg+0x140>)
    8314:	4798      	blx	r3
		goto _FAIL_;
    8316:	e7b6      	b.n	8286 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    8318:	aa05      	add	r2, sp, #20
    831a:	7853      	ldrb	r3, [r2, #1]
    831c:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    831e:	7891      	ldrb	r1, [r2, #2]
    8320:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    8322:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    8324:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    8326:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    8328:	78d2      	ldrb	r2, [r2, #3]
    832a:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    832c:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    832e:	465a      	mov	r2, fp
    8330:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    8332:	0020      	movs	r0, r4
    8334:	b007      	add	sp, #28
    8336:	bc3c      	pop	{r2, r3, r4, r5}
    8338:	4690      	mov	r8, r2
    833a:	4699      	mov	r9, r3
    833c:	46a2      	mov	sl, r4
    833e:	46ab      	mov	fp, r5
    8340:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8342:	46c0      	nop			; (mov r8, r8)
    8344:	00015172 	.word	0x00015172
    8348:	00007d5d 	.word	0x00007d5d
    834c:	00015173 	.word	0x00015173
    8350:	00007efd 	.word	0x00007efd
    8354:	0000041d 	.word	0x0000041d
    8358:	000151d8 	.word	0x000151d8
    835c:	00014ab0 	.word	0x00014ab0
    8360:	0000f309 	.word	0x0000f309
    8364:	00015758 	.word	0x00015758
    8368:	0000f33d 	.word	0x0000f33d
    836c:	000061a9 	.word	0x000061a9
    8370:	0000043c 	.word	0x0000043c
    8374:	000157ac 	.word	0x000157ac
    8378:	00000417 	.word	0x00000417
    837c:	0001572c 	.word	0x0001572c
    8380:	00007fd1 	.word	0x00007fd1
    8384:	00000424 	.word	0x00000424
    8388:	0001578c 	.word	0x0001578c
    838c:	0000f425 	.word	0x0000f425

00008390 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    8390:	b510      	push	{r4, lr}
    8392:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    8394:	2300      	movs	r3, #0
    8396:	9300      	str	r3, [sp, #0]
    8398:	2200      	movs	r2, #0
    839a:	2100      	movs	r1, #0
    839c:	20cf      	movs	r0, #207	; 0xcf
    839e:	4c04      	ldr	r4, [pc, #16]	; (83b0 <nm_spi_reset+0x20>)
    83a0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    83a2:	20cf      	movs	r0, #207	; 0xcf
    83a4:	4b03      	ldr	r3, [pc, #12]	; (83b4 <nm_spi_reset+0x24>)
    83a6:	4798      	blx	r3
	return M2M_SUCCESS;
}
    83a8:	2000      	movs	r0, #0
    83aa:	b002      	add	sp, #8
    83ac:	bd10      	pop	{r4, pc}
    83ae:	46c0      	nop			; (mov r8, r8)
    83b0:	00007d5d 	.word	0x00007d5d
    83b4:	00007efd 	.word	0x00007efd

000083b8 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    83b8:	2200      	movs	r2, #0
    83ba:	4b02      	ldr	r3, [pc, #8]	; (83c4 <nm_spi_deinit+0xc>)
    83bc:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    83be:	2000      	movs	r0, #0
    83c0:	4770      	bx	lr
    83c2:	46c0      	nop			; (mov r8, r8)
    83c4:	20000224 	.word	0x20000224

000083c8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    83c8:	b500      	push	{lr}
    83ca:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    83cc:	a901      	add	r1, sp, #4
    83ce:	4b02      	ldr	r3, [pc, #8]	; (83d8 <nm_spi_read_reg+0x10>)
    83d0:	4798      	blx	r3

	return u32Val;
}
    83d2:	9801      	ldr	r0, [sp, #4]
    83d4:	b003      	add	sp, #12
    83d6:	bd00      	pop	{pc}
    83d8:	00008229 	.word	0x00008229

000083dc <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    83dc:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    83de:	4b04      	ldr	r3, [pc, #16]	; (83f0 <nm_spi_read_reg_with_ret+0x14>)
    83e0:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    83e2:	2300      	movs	r3, #0
    83e4:	2801      	cmp	r0, #1
    83e6:	d101      	bne.n	83ec <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    83e8:	0018      	movs	r0, r3
    83ea:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    83ec:	3b06      	subs	r3, #6
    83ee:	e7fb      	b.n	83e8 <nm_spi_read_reg_with_ret+0xc>
    83f0:	00008229 	.word	0x00008229

000083f4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    83f4:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    83f6:	4b04      	ldr	r3, [pc, #16]	; (8408 <nm_spi_write_reg+0x14>)
    83f8:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    83fa:	2300      	movs	r3, #0
    83fc:	2801      	cmp	r0, #1
    83fe:	d101      	bne.n	8404 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    8400:	0018      	movs	r0, r3
    8402:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    8404:	3b06      	subs	r3, #6
    8406:	e7fb      	b.n	8400 <nm_spi_write_reg+0xc>
    8408:	00008119 	.word	0x00008119

0000840c <nm_spi_init>:
{
    840c:	b510      	push	{r4, lr}
    840e:	b082      	sub	sp, #8
	uint32 reg = 0;
    8410:	2300      	movs	r3, #0
    8412:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    8414:	4a35      	ldr	r2, [pc, #212]	; (84ec <nm_spi_init+0xe0>)
    8416:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    8418:	4669      	mov	r1, sp
    841a:	4835      	ldr	r0, [pc, #212]	; (84f0 <nm_spi_init+0xe4>)
    841c:	4b35      	ldr	r3, [pc, #212]	; (84f4 <nm_spi_init+0xe8>)
    841e:	4798      	blx	r3
    8420:	2800      	cmp	r0, #0
    8422:	d028      	beq.n	8476 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    8424:	4b31      	ldr	r3, [pc, #196]	; (84ec <nm_spi_init+0xe0>)
    8426:	781b      	ldrb	r3, [r3, #0]
    8428:	2b00      	cmp	r3, #0
    842a:	d10d      	bne.n	8448 <nm_spi_init+0x3c>
		reg &= ~0x70;
    842c:	337c      	adds	r3, #124	; 0x7c
    842e:	9900      	ldr	r1, [sp, #0]
    8430:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    8432:	3b2c      	subs	r3, #44	; 0x2c
    8434:	4319      	orrs	r1, r3
    8436:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    8438:	482d      	ldr	r0, [pc, #180]	; (84f0 <nm_spi_init+0xe4>)
    843a:	4b2f      	ldr	r3, [pc, #188]	; (84f8 <nm_spi_init+0xec>)
    843c:	4798      	blx	r3
    843e:	1e04      	subs	r4, r0, #0
    8440:	d039      	beq.n	84b6 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    8442:	2201      	movs	r2, #1
    8444:	4b29      	ldr	r3, [pc, #164]	; (84ec <nm_spi_init+0xe0>)
    8446:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    8448:	a901      	add	r1, sp, #4
    844a:	2080      	movs	r0, #128	; 0x80
    844c:	0140      	lsls	r0, r0, #5
    844e:	4b29      	ldr	r3, [pc, #164]	; (84f4 <nm_spi_init+0xe8>)
    8450:	4798      	blx	r3
    8452:	2800      	cmp	r0, #0
    8454:	d03b      	beq.n	84ce <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    8456:	4c26      	ldr	r4, [pc, #152]	; (84f0 <nm_spi_init+0xe4>)
    8458:	0020      	movs	r0, r4
    845a:	4b28      	ldr	r3, [pc, #160]	; (84fc <nm_spi_init+0xf0>)
    845c:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    845e:	2370      	movs	r3, #112	; 0x70
    8460:	0001      	movs	r1, r0
    8462:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    8464:	2050      	movs	r0, #80	; 0x50
    8466:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    8468:	0020      	movs	r0, r4
    846a:	4b25      	ldr	r3, [pc, #148]	; (8500 <nm_spi_init+0xf4>)
    846c:	4798      	blx	r3
	return M2M_SUCCESS;
    846e:	2400      	movs	r4, #0
}
    8470:	0020      	movs	r0, r4
    8472:	b002      	add	sp, #8
    8474:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    8476:	2201      	movs	r2, #1
    8478:	4b1c      	ldr	r3, [pc, #112]	; (84ec <nm_spi_init+0xe0>)
    847a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    847c:	4a21      	ldr	r2, [pc, #132]	; (8504 <nm_spi_init+0xf8>)
    847e:	4922      	ldr	r1, [pc, #136]	; (8508 <nm_spi_init+0xfc>)
    8480:	4822      	ldr	r0, [pc, #136]	; (850c <nm_spi_init+0x100>)
    8482:	4b23      	ldr	r3, [pc, #140]	; (8510 <nm_spi_init+0x104>)
    8484:	4798      	blx	r3
    8486:	4823      	ldr	r0, [pc, #140]	; (8514 <nm_spi_init+0x108>)
    8488:	4b23      	ldr	r3, [pc, #140]	; (8518 <nm_spi_init+0x10c>)
    848a:	4798      	blx	r3
    848c:	200d      	movs	r0, #13
    848e:	4b23      	ldr	r3, [pc, #140]	; (851c <nm_spi_init+0x110>)
    8490:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    8492:	4669      	mov	r1, sp
    8494:	4816      	ldr	r0, [pc, #88]	; (84f0 <nm_spi_init+0xe4>)
    8496:	4b17      	ldr	r3, [pc, #92]	; (84f4 <nm_spi_init+0xe8>)
    8498:	4798      	blx	r3
    849a:	1e04      	subs	r4, r0, #0
    849c:	d1c2      	bne.n	8424 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    849e:	4a20      	ldr	r2, [pc, #128]	; (8520 <nm_spi_init+0x114>)
    84a0:	4919      	ldr	r1, [pc, #100]	; (8508 <nm_spi_init+0xfc>)
    84a2:	481a      	ldr	r0, [pc, #104]	; (850c <nm_spi_init+0x100>)
    84a4:	4b1a      	ldr	r3, [pc, #104]	; (8510 <nm_spi_init+0x104>)
    84a6:	4798      	blx	r3
    84a8:	481e      	ldr	r0, [pc, #120]	; (8524 <nm_spi_init+0x118>)
    84aa:	4b1b      	ldr	r3, [pc, #108]	; (8518 <nm_spi_init+0x10c>)
    84ac:	4798      	blx	r3
    84ae:	200d      	movs	r0, #13
    84b0:	4b1a      	ldr	r3, [pc, #104]	; (851c <nm_spi_init+0x110>)
    84b2:	4798      	blx	r3
			return 0;
    84b4:	e7dc      	b.n	8470 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    84b6:	4a1c      	ldr	r2, [pc, #112]	; (8528 <nm_spi_init+0x11c>)
    84b8:	4913      	ldr	r1, [pc, #76]	; (8508 <nm_spi_init+0xfc>)
    84ba:	4814      	ldr	r0, [pc, #80]	; (850c <nm_spi_init+0x100>)
    84bc:	4b14      	ldr	r3, [pc, #80]	; (8510 <nm_spi_init+0x104>)
    84be:	4798      	blx	r3
    84c0:	481a      	ldr	r0, [pc, #104]	; (852c <nm_spi_init+0x120>)
    84c2:	4b15      	ldr	r3, [pc, #84]	; (8518 <nm_spi_init+0x10c>)
    84c4:	4798      	blx	r3
    84c6:	200d      	movs	r0, #13
    84c8:	4b14      	ldr	r3, [pc, #80]	; (851c <nm_spi_init+0x110>)
    84ca:	4798      	blx	r3
			return 0;
    84cc:	e7d0      	b.n	8470 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    84ce:	4a18      	ldr	r2, [pc, #96]	; (8530 <nm_spi_init+0x124>)
    84d0:	490d      	ldr	r1, [pc, #52]	; (8508 <nm_spi_init+0xfc>)
    84d2:	480e      	ldr	r0, [pc, #56]	; (850c <nm_spi_init+0x100>)
    84d4:	4b0e      	ldr	r3, [pc, #56]	; (8510 <nm_spi_init+0x104>)
    84d6:	4798      	blx	r3
    84d8:	4816      	ldr	r0, [pc, #88]	; (8534 <nm_spi_init+0x128>)
    84da:	4b0f      	ldr	r3, [pc, #60]	; (8518 <nm_spi_init+0x10c>)
    84dc:	4798      	blx	r3
    84de:	200d      	movs	r0, #13
    84e0:	4b0e      	ldr	r3, [pc, #56]	; (851c <nm_spi_init+0x110>)
    84e2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    84e4:	2406      	movs	r4, #6
    84e6:	4264      	negs	r4, r4
    84e8:	e7c2      	b.n	8470 <nm_spi_init+0x64>
    84ea:	46c0      	nop			; (mov r8, r8)
    84ec:	20000224 	.word	0x20000224
    84f0:	0000e824 	.word	0x0000e824
    84f4:	00008229 	.word	0x00008229
    84f8:	00008119 	.word	0x00008119
    84fc:	000083c9 	.word	0x000083c9
    8500:	000083f5 	.word	0x000083f5
    8504:	000004c7 	.word	0x000004c7
    8508:	000151f4 	.word	0x000151f4
    850c:	00014ab0 	.word	0x00014ab0
    8510:	0000f309 	.word	0x0000f309
    8514:	00015300 	.word	0x00015300
    8518:	0000f425 	.word	0x0000f425
    851c:	0000f33d 	.word	0x0000f33d
    8520:	000004ca 	.word	0x000004ca
    8524:	00015350 	.word	0x00015350
    8528:	000004d4 	.word	0x000004d4
    852c:	0001537c 	.word	0x0001537c
    8530:	000004de 	.word	0x000004de
    8534:	000153b0 	.word	0x000153b0

00008538 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    8538:	b5f0      	push	{r4, r5, r6, r7, lr}
    853a:	46de      	mov	lr, fp
    853c:	4657      	mov	r7, sl
    853e:	464e      	mov	r6, r9
    8540:	4645      	mov	r5, r8
    8542:	b5e0      	push	{r5, r6, r7, lr}
    8544:	b087      	sub	sp, #28
    8546:	9002      	str	r0, [sp, #8]
    8548:	9103      	str	r1, [sp, #12]
    854a:	0016      	movs	r6, r2
    854c:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    854e:	2300      	movs	r3, #0
    8550:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    8552:	2400      	movs	r4, #0
    8554:	4b3e      	ldr	r3, [pc, #248]	; (8650 <nm_spi_read_block+0x118>)
    8556:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    8558:	46a9      	mov	r9, r5
    855a:	e037      	b.n	85cc <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    855c:	2301      	movs	r3, #1
    855e:	469b      	mov	fp, r3
		size = 2;
    8560:	3601      	adds	r6, #1
    8562:	e035      	b.n	85d0 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    8564:	20c8      	movs	r0, #200	; 0xc8
    8566:	4b3b      	ldr	r3, [pc, #236]	; (8654 <nm_spi_read_block+0x11c>)
    8568:	4798      	blx	r3
	if (result != N_OK) {
    856a:	2801      	cmp	r0, #1
    856c:	d045      	beq.n	85fa <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    856e:	4a3a      	ldr	r2, [pc, #232]	; (8658 <nm_spi_read_block+0x120>)
    8570:	493a      	ldr	r1, [pc, #232]	; (865c <nm_spi_read_block+0x124>)
    8572:	483b      	ldr	r0, [pc, #236]	; (8660 <nm_spi_read_block+0x128>)
    8574:	4f3b      	ldr	r7, [pc, #236]	; (8664 <nm_spi_read_block+0x12c>)
    8576:	47b8      	blx	r7
    8578:	9902      	ldr	r1, [sp, #8]
    857a:	483b      	ldr	r0, [pc, #236]	; (8668 <nm_spi_read_block+0x130>)
    857c:	47b8      	blx	r7
    857e:	200d      	movs	r0, #13
    8580:	4b3a      	ldr	r3, [pc, #232]	; (866c <nm_spi_read_block+0x134>)
    8582:	4798      	blx	r3
		nm_bsp_sleep(1);
    8584:	2001      	movs	r0, #1
    8586:	4f3a      	ldr	r7, [pc, #232]	; (8670 <nm_spi_read_block+0x138>)
    8588:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    858a:	9400      	str	r4, [sp, #0]
    858c:	0023      	movs	r3, r4
    858e:	0022      	movs	r2, r4
    8590:	0021      	movs	r1, r4
    8592:	20cf      	movs	r0, #207	; 0xcf
    8594:	4d2e      	ldr	r5, [pc, #184]	; (8650 <nm_spi_read_block+0x118>)
    8596:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    8598:	20cf      	movs	r0, #207	; 0xcf
    859a:	4b2e      	ldr	r3, [pc, #184]	; (8654 <nm_spi_read_block+0x11c>)
    859c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    859e:	4a35      	ldr	r2, [pc, #212]	; (8674 <nm_spi_read_block+0x13c>)
    85a0:	492e      	ldr	r1, [pc, #184]	; (865c <nm_spi_read_block+0x124>)
    85a2:	482f      	ldr	r0, [pc, #188]	; (8660 <nm_spi_read_block+0x128>)
    85a4:	4b2f      	ldr	r3, [pc, #188]	; (8664 <nm_spi_read_block+0x12c>)
    85a6:	469a      	mov	sl, r3
    85a8:	4798      	blx	r3
    85aa:	0033      	movs	r3, r6
    85ac:	9a02      	ldr	r2, [sp, #8]
    85ae:	4649      	mov	r1, r9
    85b0:	4831      	ldr	r0, [pc, #196]	; (8678 <nm_spi_read_block+0x140>)
    85b2:	47d0      	blx	sl
    85b4:	200d      	movs	r0, #13
    85b6:	4b2d      	ldr	r3, [pc, #180]	; (866c <nm_spi_read_block+0x134>)
    85b8:	4798      	blx	r3
		nm_bsp_sleep(1);
    85ba:	2001      	movs	r0, #1
    85bc:	47b8      	blx	r7
    85be:	2301      	movs	r3, #1
    85c0:	425b      	negs	r3, r3
    85c2:	469c      	mov	ip, r3
    85c4:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    85c6:	464b      	mov	r3, r9
    85c8:	2b00      	cmp	r3, #0
    85ca:	d038      	beq.n	863e <nm_spi_read_block+0x106>
	if (size == 1)
    85cc:	2e01      	cmp	r6, #1
    85ce:	d0c5      	beq.n	855c <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    85d0:	9400      	str	r4, [sp, #0]
    85d2:	0033      	movs	r3, r6
    85d4:	0022      	movs	r2, r4
    85d6:	9d02      	ldr	r5, [sp, #8]
    85d8:	0029      	movs	r1, r5
    85da:	20c8      	movs	r0, #200	; 0xc8
    85dc:	47c0      	blx	r8
	if (result != N_OK) {
    85de:	2801      	cmp	r0, #1
    85e0:	d0c0      	beq.n	8564 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    85e2:	4a26      	ldr	r2, [pc, #152]	; (867c <nm_spi_read_block+0x144>)
    85e4:	491d      	ldr	r1, [pc, #116]	; (865c <nm_spi_read_block+0x124>)
    85e6:	481e      	ldr	r0, [pc, #120]	; (8660 <nm_spi_read_block+0x128>)
    85e8:	4f1e      	ldr	r7, [pc, #120]	; (8664 <nm_spi_read_block+0x12c>)
    85ea:	47b8      	blx	r7
    85ec:	0029      	movs	r1, r5
    85ee:	4824      	ldr	r0, [pc, #144]	; (8680 <nm_spi_read_block+0x148>)
    85f0:	47b8      	blx	r7
    85f2:	200d      	movs	r0, #13
    85f4:	4b1d      	ldr	r3, [pc, #116]	; (866c <nm_spi_read_block+0x134>)
    85f6:	4798      	blx	r3
    85f8:	e7c4      	b.n	8584 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    85fa:	465b      	mov	r3, fp
    85fc:	2b00      	cmp	r3, #0
    85fe:	d016      	beq.n	862e <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    8600:	af05      	add	r7, sp, #20
    8602:	0022      	movs	r2, r4
    8604:	0031      	movs	r1, r6
    8606:	0038      	movs	r0, r7
    8608:	4b1e      	ldr	r3, [pc, #120]	; (8684 <nm_spi_read_block+0x14c>)
    860a:	4798      	blx	r3
		buf[0] = tmp[0];
    860c:	783b      	ldrb	r3, [r7, #0]
    860e:	9a03      	ldr	r2, [sp, #12]
    8610:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    8612:	2801      	cmp	r0, #1
    8614:	d011      	beq.n	863a <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    8616:	4a1c      	ldr	r2, [pc, #112]	; (8688 <nm_spi_read_block+0x150>)
    8618:	4910      	ldr	r1, [pc, #64]	; (865c <nm_spi_read_block+0x124>)
    861a:	4811      	ldr	r0, [pc, #68]	; (8660 <nm_spi_read_block+0x128>)
    861c:	4b11      	ldr	r3, [pc, #68]	; (8664 <nm_spi_read_block+0x12c>)
    861e:	4798      	blx	r3
    8620:	481a      	ldr	r0, [pc, #104]	; (868c <nm_spi_read_block+0x154>)
    8622:	4b1b      	ldr	r3, [pc, #108]	; (8690 <nm_spi_read_block+0x158>)
    8624:	4798      	blx	r3
    8626:	200d      	movs	r0, #13
    8628:	4b10      	ldr	r3, [pc, #64]	; (866c <nm_spi_read_block+0x134>)
    862a:	4798      	blx	r3
    862c:	e7aa      	b.n	8584 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    862e:	0022      	movs	r2, r4
    8630:	0031      	movs	r1, r6
    8632:	9803      	ldr	r0, [sp, #12]
    8634:	4b13      	ldr	r3, [pc, #76]	; (8684 <nm_spi_read_block+0x14c>)
    8636:	4798      	blx	r3
    8638:	e7eb      	b.n	8612 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    863a:	2000      	movs	r0, #0
    863c:	e001      	b.n	8642 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    863e:	2006      	movs	r0, #6
    8640:	4240      	negs	r0, r0

	return s8Ret;
}
    8642:	b007      	add	sp, #28
    8644:	bc3c      	pop	{r2, r3, r4, r5}
    8646:	4690      	mov	r8, r2
    8648:	4699      	mov	r9, r3
    864a:	46a2      	mov	sl, r4
    864c:	46ab      	mov	fp, r5
    864e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8650:	00007d5d 	.word	0x00007d5d
    8654:	00007efd 	.word	0x00007efd
    8658:	00000463 	.word	0x00000463
    865c:	000151e8 	.word	0x000151e8
    8660:	00014ab0 	.word	0x00014ab0
    8664:	0000f309 	.word	0x0000f309
    8668:	00015404 	.word	0x00015404
    866c:	0000f33d 	.word	0x0000f33d
    8670:	000061a9 	.word	0x000061a9
    8674:	00000484 	.word	0x00000484
    8678:	00015464 	.word	0x00015464
    867c:	0000045d 	.word	0x0000045d
    8680:	000153d4 	.word	0x000153d4
    8684:	00007fd1 	.word	0x00007fd1
    8688:	00000473 	.word	0x00000473
    868c:	0001543c 	.word	0x0001543c
    8690:	0000f425 	.word	0x0000f425

00008694 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    8694:	b5f0      	push	{r4, r5, r6, r7, lr}
    8696:	46de      	mov	lr, fp
    8698:	4647      	mov	r7, r8
    869a:	b580      	push	{r7, lr}
    869c:	b089      	sub	sp, #36	; 0x24
    869e:	9004      	str	r0, [sp, #16]
    86a0:	468b      	mov	fp, r1
    86a2:	9203      	str	r2, [sp, #12]
    86a4:	260a      	movs	r6, #10
    86a6:	2780      	movs	r7, #128	; 0x80
    86a8:	01bf      	lsls	r7, r7, #6
    86aa:	466b      	mov	r3, sp
    86ac:	82df      	strh	r7, [r3, #22]
    86ae:	0035      	movs	r5, r6
    86b0:	e02d      	b.n	870e <nm_spi_write_block+0x7a>
		size = 2;
    86b2:	3301      	adds	r3, #1
    86b4:	9303      	str	r3, [sp, #12]
    86b6:	e02d      	b.n	8714 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    86b8:	4a83      	ldr	r2, [pc, #524]	; (88c8 <nm_spi_write_block+0x234>)
    86ba:	4984      	ldr	r1, [pc, #528]	; (88cc <nm_spi_write_block+0x238>)
    86bc:	4884      	ldr	r0, [pc, #528]	; (88d0 <nm_spi_write_block+0x23c>)
    86be:	4c85      	ldr	r4, [pc, #532]	; (88d4 <nm_spi_write_block+0x240>)
    86c0:	47a0      	blx	r4
    86c2:	0031      	movs	r1, r6
    86c4:	4884      	ldr	r0, [pc, #528]	; (88d8 <nm_spi_write_block+0x244>)
    86c6:	47a0      	blx	r4
    86c8:	200d      	movs	r0, #13
    86ca:	4b84      	ldr	r3, [pc, #528]	; (88dc <nm_spi_write_block+0x248>)
    86cc:	4798      	blx	r3
		nm_bsp_sleep(1);
    86ce:	2001      	movs	r0, #1
    86d0:	4c83      	ldr	r4, [pc, #524]	; (88e0 <nm_spi_write_block+0x24c>)
    86d2:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    86d4:	2300      	movs	r3, #0
    86d6:	9300      	str	r3, [sp, #0]
    86d8:	2200      	movs	r2, #0
    86da:	2100      	movs	r1, #0
    86dc:	20cf      	movs	r0, #207	; 0xcf
    86de:	4e81      	ldr	r6, [pc, #516]	; (88e4 <nm_spi_write_block+0x250>)
    86e0:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    86e2:	20cf      	movs	r0, #207	; 0xcf
    86e4:	4b80      	ldr	r3, [pc, #512]	; (88e8 <nm_spi_write_block+0x254>)
    86e6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    86e8:	4a80      	ldr	r2, [pc, #512]	; (88ec <nm_spi_write_block+0x258>)
    86ea:	4978      	ldr	r1, [pc, #480]	; (88cc <nm_spi_write_block+0x238>)
    86ec:	4878      	ldr	r0, [pc, #480]	; (88d0 <nm_spi_write_block+0x23c>)
    86ee:	4e79      	ldr	r6, [pc, #484]	; (88d4 <nm_spi_write_block+0x240>)
    86f0:	47b0      	blx	r6
    86f2:	9b03      	ldr	r3, [sp, #12]
    86f4:	9a04      	ldr	r2, [sp, #16]
    86f6:	0029      	movs	r1, r5
    86f8:	487d      	ldr	r0, [pc, #500]	; (88f0 <nm_spi_write_block+0x25c>)
    86fa:	47b0      	blx	r6
    86fc:	200d      	movs	r0, #13
    86fe:	4b77      	ldr	r3, [pc, #476]	; (88dc <nm_spi_write_block+0x248>)
    8700:	4798      	blx	r3
		nm_bsp_sleep(1);
    8702:	2001      	movs	r0, #1
    8704:	47a0      	blx	r4
    8706:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    8708:	2d00      	cmp	r5, #0
    870a:	d100      	bne.n	870e <nm_spi_write_block+0x7a>
    870c:	e0d5      	b.n	88ba <nm_spi_write_block+0x226>
	if (size == 1)
    870e:	9b03      	ldr	r3, [sp, #12]
    8710:	2b01      	cmp	r3, #1
    8712:	d0ce      	beq.n	86b2 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    8714:	2300      	movs	r3, #0
    8716:	9300      	str	r3, [sp, #0]
    8718:	9b03      	ldr	r3, [sp, #12]
    871a:	2200      	movs	r2, #0
    871c:	9e04      	ldr	r6, [sp, #16]
    871e:	0031      	movs	r1, r6
    8720:	20c7      	movs	r0, #199	; 0xc7
    8722:	4c70      	ldr	r4, [pc, #448]	; (88e4 <nm_spi_write_block+0x250>)
    8724:	47a0      	blx	r4
	if (result != N_OK) {
    8726:	2801      	cmp	r0, #1
    8728:	d1c6      	bne.n	86b8 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    872a:	20c7      	movs	r0, #199	; 0xc7
    872c:	4b6e      	ldr	r3, [pc, #440]	; (88e8 <nm_spi_write_block+0x254>)
    872e:	4798      	blx	r3
	if (result != N_OK) {
    8730:	2801      	cmp	r0, #1
    8732:	d00c      	beq.n	874e <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    8734:	22f4      	movs	r2, #244	; 0xf4
    8736:	0092      	lsls	r2, r2, #2
    8738:	4964      	ldr	r1, [pc, #400]	; (88cc <nm_spi_write_block+0x238>)
    873a:	4865      	ldr	r0, [pc, #404]	; (88d0 <nm_spi_write_block+0x23c>)
    873c:	4c65      	ldr	r4, [pc, #404]	; (88d4 <nm_spi_write_block+0x240>)
    873e:	47a0      	blx	r4
    8740:	9904      	ldr	r1, [sp, #16]
    8742:	486c      	ldr	r0, [pc, #432]	; (88f4 <nm_spi_write_block+0x260>)
    8744:	47a0      	blx	r4
    8746:	200d      	movs	r0, #13
    8748:	4b64      	ldr	r3, [pc, #400]	; (88dc <nm_spi_write_block+0x248>)
    874a:	4798      	blx	r3
    874c:	e7bf      	b.n	86ce <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    874e:	2200      	movs	r2, #0
    8750:	ab07      	add	r3, sp, #28
    8752:	801a      	strh	r2, [r3, #0]
    8754:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    8756:	2600      	movs	r6, #0
				order = 0x1;
    8758:	46a8      	mov	r8, r5
    875a:	0035      	movs	r5, r6
    875c:	0026      	movs	r6, r4
    875e:	e021      	b.n	87a4 <nm_spi_write_block+0x110>
				order = 0x2;
    8760:	2300      	movs	r3, #0
    8762:	42b7      	cmp	r7, r6
    8764:	415b      	adcs	r3, r3
    8766:	3302      	adds	r3, #2
		cmd |= order;
    8768:	200b      	movs	r0, #11
    876a:	aa04      	add	r2, sp, #16
    876c:	4694      	mov	ip, r2
    876e:	4460      	add	r0, ip
    8770:	2210      	movs	r2, #16
    8772:	4252      	negs	r2, r2
    8774:	4313      	orrs	r3, r2
    8776:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    8778:	2101      	movs	r1, #1
    877a:	4b5f      	ldr	r3, [pc, #380]	; (88f8 <nm_spi_write_block+0x264>)
    877c:	4798      	blx	r3
    877e:	2800      	cmp	r0, #0
    8780:	d11d      	bne.n	87be <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    8782:	465b      	mov	r3, fp
    8784:	1958      	adds	r0, r3, r5
    8786:	0021      	movs	r1, r4
    8788:	4b5b      	ldr	r3, [pc, #364]	; (88f8 <nm_spi_write_block+0x264>)
    878a:	4798      	blx	r3
    878c:	2800      	cmp	r0, #0
    878e:	d130      	bne.n	87f2 <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    8790:	4b5a      	ldr	r3, [pc, #360]	; (88fc <nm_spi_write_block+0x268>)
    8792:	781b      	ldrb	r3, [r3, #0]
    8794:	2b00      	cmp	r3, #0
    8796:	d039      	beq.n	880c <nm_spi_write_block+0x178>
		ix += nbytes;
    8798:	1965      	adds	r5, r4, r5
    879a:	b22d      	sxth	r5, r5
		sz -= nbytes;
    879c:	1b36      	subs	r6, r6, r4
    879e:	b2b6      	uxth	r6, r6
	} while (sz);
    87a0:	2e00      	cmp	r6, #0
    87a2:	d053      	beq.n	884c <nm_spi_write_block+0x1b8>
    87a4:	1c34      	adds	r4, r6, #0
    87a6:	42be      	cmp	r6, r7
    87a8:	d901      	bls.n	87ae <nm_spi_write_block+0x11a>
    87aa:	466b      	mov	r3, sp
    87ac:	8adc      	ldrh	r4, [r3, #22]
    87ae:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    87b0:	2d00      	cmp	r5, #0
    87b2:	d1d5      	bne.n	8760 <nm_spi_write_block+0xcc>
				order = 0x3;
    87b4:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    87b6:	42be      	cmp	r6, r7
    87b8:	d9d6      	bls.n	8768 <nm_spi_write_block+0xd4>
				order = 0x1;
    87ba:	3b02      	subs	r3, #2
    87bc:	e7d4      	b.n	8768 <nm_spi_write_block+0xd4>
    87be:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    87c0:	22d4      	movs	r2, #212	; 0xd4
    87c2:	0092      	lsls	r2, r2, #2
    87c4:	494e      	ldr	r1, [pc, #312]	; (8900 <nm_spi_write_block+0x26c>)
    87c6:	4842      	ldr	r0, [pc, #264]	; (88d0 <nm_spi_write_block+0x23c>)
    87c8:	4b42      	ldr	r3, [pc, #264]	; (88d4 <nm_spi_write_block+0x240>)
    87ca:	4798      	blx	r3
    87cc:	484d      	ldr	r0, [pc, #308]	; (8904 <nm_spi_write_block+0x270>)
    87ce:	4b4e      	ldr	r3, [pc, #312]	; (8908 <nm_spi_write_block+0x274>)
    87d0:	4798      	blx	r3
    87d2:	200d      	movs	r0, #13
    87d4:	4b41      	ldr	r3, [pc, #260]	; (88dc <nm_spi_write_block+0x248>)
    87d6:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    87d8:	22f8      	movs	r2, #248	; 0xf8
    87da:	0092      	lsls	r2, r2, #2
    87dc:	493b      	ldr	r1, [pc, #236]	; (88cc <nm_spi_write_block+0x238>)
    87de:	483c      	ldr	r0, [pc, #240]	; (88d0 <nm_spi_write_block+0x23c>)
    87e0:	4b3c      	ldr	r3, [pc, #240]	; (88d4 <nm_spi_write_block+0x240>)
    87e2:	4798      	blx	r3
    87e4:	4849      	ldr	r0, [pc, #292]	; (890c <nm_spi_write_block+0x278>)
    87e6:	4b48      	ldr	r3, [pc, #288]	; (8908 <nm_spi_write_block+0x274>)
    87e8:	4798      	blx	r3
    87ea:	200d      	movs	r0, #13
    87ec:	4b3b      	ldr	r3, [pc, #236]	; (88dc <nm_spi_write_block+0x248>)
    87ee:	4798      	blx	r3
    87f0:	e76d      	b.n	86ce <nm_spi_write_block+0x3a>
    87f2:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    87f4:	4a46      	ldr	r2, [pc, #280]	; (8910 <nm_spi_write_block+0x27c>)
    87f6:	4942      	ldr	r1, [pc, #264]	; (8900 <nm_spi_write_block+0x26c>)
    87f8:	4835      	ldr	r0, [pc, #212]	; (88d0 <nm_spi_write_block+0x23c>)
    87fa:	4b36      	ldr	r3, [pc, #216]	; (88d4 <nm_spi_write_block+0x240>)
    87fc:	4798      	blx	r3
    87fe:	4845      	ldr	r0, [pc, #276]	; (8914 <nm_spi_write_block+0x280>)
    8800:	4b41      	ldr	r3, [pc, #260]	; (8908 <nm_spi_write_block+0x274>)
    8802:	4798      	blx	r3
    8804:	200d      	movs	r0, #13
    8806:	4b35      	ldr	r3, [pc, #212]	; (88dc <nm_spi_write_block+0x248>)
    8808:	4798      	blx	r3
    880a:	e7e5      	b.n	87d8 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    880c:	2102      	movs	r1, #2
    880e:	a807      	add	r0, sp, #28
    8810:	4b39      	ldr	r3, [pc, #228]	; (88f8 <nm_spi_write_block+0x264>)
    8812:	4798      	blx	r3
    8814:	2800      	cmp	r0, #0
    8816:	d0bf      	beq.n	8798 <nm_spi_write_block+0x104>
    8818:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    881a:	4a3f      	ldr	r2, [pc, #252]	; (8918 <nm_spi_write_block+0x284>)
    881c:	4938      	ldr	r1, [pc, #224]	; (8900 <nm_spi_write_block+0x26c>)
    881e:	482c      	ldr	r0, [pc, #176]	; (88d0 <nm_spi_write_block+0x23c>)
    8820:	4b2c      	ldr	r3, [pc, #176]	; (88d4 <nm_spi_write_block+0x240>)
    8822:	4798      	blx	r3
    8824:	483d      	ldr	r0, [pc, #244]	; (891c <nm_spi_write_block+0x288>)
    8826:	4b38      	ldr	r3, [pc, #224]	; (8908 <nm_spi_write_block+0x274>)
    8828:	4798      	blx	r3
    882a:	200d      	movs	r0, #13
    882c:	4b2b      	ldr	r3, [pc, #172]	; (88dc <nm_spi_write_block+0x248>)
    882e:	4798      	blx	r3
    8830:	e7d2      	b.n	87d8 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    8832:	223c      	movs	r2, #60	; 0x3c
    8834:	32ff      	adds	r2, #255	; 0xff
    8836:	493a      	ldr	r1, [pc, #232]	; (8920 <nm_spi_write_block+0x28c>)
    8838:	4825      	ldr	r0, [pc, #148]	; (88d0 <nm_spi_write_block+0x23c>)
    883a:	4b26      	ldr	r3, [pc, #152]	; (88d4 <nm_spi_write_block+0x240>)
    883c:	4798      	blx	r3
    883e:	4839      	ldr	r0, [pc, #228]	; (8924 <nm_spi_write_block+0x290>)
    8840:	4b31      	ldr	r3, [pc, #196]	; (8908 <nm_spi_write_block+0x274>)
    8842:	4798      	blx	r3
    8844:	200d      	movs	r0, #13
    8846:	4b25      	ldr	r3, [pc, #148]	; (88dc <nm_spi_write_block+0x248>)
    8848:	4798      	blx	r3
    884a:	e027      	b.n	889c <nm_spi_write_block+0x208>
    884c:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    884e:	4b2b      	ldr	r3, [pc, #172]	; (88fc <nm_spi_write_block+0x268>)
    8850:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    8852:	1e63      	subs	r3, r4, #1
    8854:	419c      	sbcs	r4, r3
    8856:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    8858:	b2a1      	uxth	r1, r4
    885a:	a807      	add	r0, sp, #28
    885c:	4b32      	ldr	r3, [pc, #200]	; (8928 <nm_spi_write_block+0x294>)
    885e:	4798      	blx	r3
    8860:	2800      	cmp	r0, #0
    8862:	d1e6      	bne.n	8832 <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    8864:	ab08      	add	r3, sp, #32
    8866:	191b      	adds	r3, r3, r4
    8868:	3b05      	subs	r3, #5
    886a:	781b      	ldrb	r3, [r3, #0]
    886c:	2b00      	cmp	r3, #0
    886e:	d106      	bne.n	887e <nm_spi_write_block+0x1ea>
    8870:	ab08      	add	r3, sp, #32
    8872:	469c      	mov	ip, r3
    8874:	4464      	add	r4, ip
    8876:	3c06      	subs	r4, #6
    8878:	7823      	ldrb	r3, [r4, #0]
    887a:	2bc3      	cmp	r3, #195	; 0xc3
    887c:	d01b      	beq.n	88b6 <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    887e:	22a1      	movs	r2, #161	; 0xa1
    8880:	0052      	lsls	r2, r2, #1
    8882:	4927      	ldr	r1, [pc, #156]	; (8920 <nm_spi_write_block+0x28c>)
    8884:	4812      	ldr	r0, [pc, #72]	; (88d0 <nm_spi_write_block+0x23c>)
    8886:	4c13      	ldr	r4, [pc, #76]	; (88d4 <nm_spi_write_block+0x240>)
    8888:	47a0      	blx	r4
    888a:	a907      	add	r1, sp, #28
    888c:	788b      	ldrb	r3, [r1, #2]
    888e:	784a      	ldrb	r2, [r1, #1]
    8890:	7809      	ldrb	r1, [r1, #0]
    8892:	4826      	ldr	r0, [pc, #152]	; (892c <nm_spi_write_block+0x298>)
    8894:	47a0      	blx	r4
    8896:	200d      	movs	r0, #13
    8898:	4b10      	ldr	r3, [pc, #64]	; (88dc <nm_spi_write_block+0x248>)
    889a:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    889c:	22fa      	movs	r2, #250	; 0xfa
    889e:	0092      	lsls	r2, r2, #2
    88a0:	490a      	ldr	r1, [pc, #40]	; (88cc <nm_spi_write_block+0x238>)
    88a2:	480b      	ldr	r0, [pc, #44]	; (88d0 <nm_spi_write_block+0x23c>)
    88a4:	4b0b      	ldr	r3, [pc, #44]	; (88d4 <nm_spi_write_block+0x240>)
    88a6:	4798      	blx	r3
    88a8:	4818      	ldr	r0, [pc, #96]	; (890c <nm_spi_write_block+0x278>)
    88aa:	4b17      	ldr	r3, [pc, #92]	; (8908 <nm_spi_write_block+0x274>)
    88ac:	4798      	blx	r3
    88ae:	200d      	movs	r0, #13
    88b0:	4b0a      	ldr	r3, [pc, #40]	; (88dc <nm_spi_write_block+0x248>)
    88b2:	4798      	blx	r3
    88b4:	e70b      	b.n	86ce <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    88b6:	2000      	movs	r0, #0
    88b8:	e001      	b.n	88be <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    88ba:	2006      	movs	r0, #6
    88bc:	4240      	negs	r0, r0

	return s8Ret;
}
    88be:	b009      	add	sp, #36	; 0x24
    88c0:	bc0c      	pop	{r2, r3}
    88c2:	4690      	mov	r8, r2
    88c4:	469b      	mov	fp, r3
    88c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88c8:	000003ca 	.word	0x000003ca
    88cc:	000151c8 	.word	0x000151c8
    88d0:	00014ab0 	.word	0x00014ab0
    88d4:	0000f309 	.word	0x0000f309
    88d8:	00015480 	.word	0x00015480
    88dc:	0000f33d 	.word	0x0000f33d
    88e0:	000061a9 	.word	0x000061a9
    88e4:	00007d5d 	.word	0x00007d5d
    88e8:	00007efd 	.word	0x00007efd
    88ec:	000003f2 	.word	0x000003f2
    88f0:	00015464 	.word	0x00015464
    88f4:	000154b0 	.word	0x000154b0
    88f8:	00007d3d 	.word	0x00007d3d
    88fc:	20000224 	.word	0x20000224
    8900:	000151a8 	.word	0x000151a8
    8904:	000154e8 	.word	0x000154e8
    8908:	0000f425 	.word	0x0000f425
    890c:	000155dc 	.word	0x000155dc
    8910:	00000359 	.word	0x00000359
    8914:	00015520 	.word	0x00015520
    8918:	00000363 	.word	0x00000363
    891c:	00015554 	.word	0x00015554
    8920:	0001517c 	.word	0x0001517c
    8924:	0001558c 	.word	0x0001558c
    8928:	00007edd 	.word	0x00007edd
    892c:	000155ac 	.word	0x000155ac

00008930 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    8930:	b5f0      	push	{r4, r5, r6, r7, lr}
    8932:	46de      	mov	lr, fp
    8934:	4657      	mov	r7, sl
    8936:	464e      	mov	r6, r9
    8938:	4645      	mov	r5, r8
    893a:	b5e0      	push	{r5, r6, r7, lr}
    893c:	b085      	sub	sp, #20
    893e:	9001      	str	r0, [sp, #4]
    8940:	000e      	movs	r6, r1
    8942:	9202      	str	r2, [sp, #8]
    8944:	001d      	movs	r5, r3
    8946:	ab0e      	add	r3, sp, #56	; 0x38
    8948:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    894a:	2c00      	cmp	r4, #0
    894c:	d064      	beq.n	8a18 <Socket_ReadSocketData+0xe8>
    894e:	0103      	lsls	r3, r0, #4
    8950:	4935      	ldr	r1, [pc, #212]	; (8a28 <Socket_ReadSocketData+0xf8>)
    8952:	585b      	ldr	r3, [r3, r1]
    8954:	2b00      	cmp	r3, #0
    8956:	d05f      	beq.n	8a18 <Socket_ReadSocketData+0xe8>
    8958:	0101      	lsls	r1, r0, #4
    895a:	4b33      	ldr	r3, [pc, #204]	; (8a28 <Socket_ReadSocketData+0xf8>)
    895c:	185b      	adds	r3, r3, r1
    895e:	889b      	ldrh	r3, [r3, #4]
    8960:	b29b      	uxth	r3, r3
    8962:	2b00      	cmp	r3, #0
    8964:	d058      	beq.n	8a18 <Socket_ReadSocketData+0xe8>
    8966:	4b30      	ldr	r3, [pc, #192]	; (8a28 <Socket_ReadSocketData+0xf8>)
    8968:	185b      	adds	r3, r3, r1
    896a:	7a9b      	ldrb	r3, [r3, #10]
    896c:	2b01      	cmp	r3, #1
    896e:	d153      	bne.n	8a18 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    8970:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    8972:	4b2d      	ldr	r3, [pc, #180]	; (8a28 <Socket_ReadSocketData+0xf8>)
    8974:	469b      	mov	fp, r3
    8976:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    8978:	465b      	mov	r3, fp
    897a:	220a      	movs	r2, #10
    897c:	4690      	mov	r8, r2
    897e:	44d8      	add	r8, fp
    8980:	468a      	mov	sl, r1
    8982:	9500      	str	r5, [sp, #0]
    8984:	9303      	str	r3, [sp, #12]
    8986:	e015      	b.n	89b4 <Socket_ReadSocketData+0x84>
    8988:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    898a:	2301      	movs	r3, #1
    898c:	e01c      	b.n	89c8 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    898e:	3301      	adds	r3, #1
    8990:	2200      	movs	r2, #0
    8992:	2100      	movs	r1, #0
    8994:	2000      	movs	r0, #0
    8996:	4c25      	ldr	r4, [pc, #148]	; (8a2c <Socket_ReadSocketData+0xfc>)
    8998:	47a0      	blx	r4
    899a:	e03d      	b.n	8a18 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    899c:	4824      	ldr	r0, [pc, #144]	; (8a30 <Socket_ReadSocketData+0x100>)
    899e:	4d25      	ldr	r5, [pc, #148]	; (8a34 <Socket_ReadSocketData+0x104>)
    89a0:	47a8      	blx	r5
    89a2:	0021      	movs	r1, r4
    89a4:	4824      	ldr	r0, [pc, #144]	; (8a38 <Socket_ReadSocketData+0x108>)
    89a6:	47a8      	blx	r5
    89a8:	200d      	movs	r0, #13
    89aa:	4b24      	ldr	r3, [pc, #144]	; (8a3c <Socket_ReadSocketData+0x10c>)
    89ac:	4798      	blx	r3
				break;
    89ae:	e033      	b.n	8a18 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    89b0:	2c00      	cmp	r4, #0
    89b2:	d031      	beq.n	8a18 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    89b4:	465b      	mov	r3, fp
    89b6:	889b      	ldrh	r3, [r3, #4]
    89b8:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    89ba:	b21b      	sxth	r3, r3
    89bc:	2b00      	cmp	r3, #0
    89be:	dde3      	ble.n	8988 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    89c0:	9b03      	ldr	r3, [sp, #12]
    89c2:	889d      	ldrh	r5, [r3, #4]
    89c4:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    89c6:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    89c8:	4a17      	ldr	r2, [pc, #92]	; (8a28 <Socket_ReadSocketData+0xf8>)
    89ca:	4651      	mov	r1, sl
    89cc:	5889      	ldr	r1, [r1, r2]
    89ce:	002a      	movs	r2, r5
    89d0:	9800      	ldr	r0, [sp, #0]
    89d2:	4f16      	ldr	r7, [pc, #88]	; (8a2c <Socket_ReadSocketData+0xfc>)
    89d4:	47b8      	blx	r7
    89d6:	2800      	cmp	r0, #0
    89d8:	d1e0      	bne.n	899c <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    89da:	4b13      	ldr	r3, [pc, #76]	; (8a28 <Socket_ReadSocketData+0xf8>)
    89dc:	4652      	mov	r2, sl
    89de:	58d3      	ldr	r3, [r2, r3]
    89e0:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    89e2:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    89e4:	88f3      	ldrh	r3, [r6, #6]
    89e6:	1b5b      	subs	r3, r3, r5
    89e8:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    89ea:	4b15      	ldr	r3, [pc, #84]	; (8a40 <Socket_ReadSocketData+0x110>)
    89ec:	681b      	ldr	r3, [r3, #0]
    89ee:	2b00      	cmp	r3, #0
    89f0:	d005      	beq.n	89fe <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    89f2:	4b13      	ldr	r3, [pc, #76]	; (8a40 <Socket_ReadSocketData+0x110>)
    89f4:	681b      	ldr	r3, [r3, #0]
    89f6:	0032      	movs	r2, r6
    89f8:	9902      	ldr	r1, [sp, #8]
    89fa:	9801      	ldr	r0, [sp, #4]
    89fc:	4798      	blx	r3
				u16ReadCount -= u16Read;
    89fe:	1b64      	subs	r4, r4, r5
    8a00:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    8a02:	9b00      	ldr	r3, [sp, #0]
    8a04:	469c      	mov	ip, r3
    8a06:	44ac      	add	ip, r5
    8a08:	4663      	mov	r3, ip
    8a0a:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    8a0c:	4643      	mov	r3, r8
    8a0e:	781b      	ldrb	r3, [r3, #0]
    8a10:	2b00      	cmp	r3, #0
    8a12:	d1cd      	bne.n	89b0 <Socket_ReadSocketData+0x80>
    8a14:	2c00      	cmp	r4, #0
    8a16:	d1ba      	bne.n	898e <Socket_ReadSocketData+0x5e>
	}
}
    8a18:	b005      	add	sp, #20
    8a1a:	bc3c      	pop	{r2, r3, r4, r5}
    8a1c:	4690      	mov	r8, r2
    8a1e:	4699      	mov	r9, r3
    8a20:	46a2      	mov	sl, r4
    8a22:	46ab      	mov	fp, r5
    8a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a26:	46c0      	nop			; (mov r8, r8)
    8a28:	200005fc 	.word	0x200005fc
    8a2c:	00006cd1 	.word	0x00006cd1
    8a30:	00014de0 	.word	0x00014de0
    8a34:	0000f309 	.word	0x0000f309
    8a38:	00015844 	.word	0x00015844
    8a3c:	0000f33d 	.word	0x0000f33d
    8a40:	200006ac 	.word	0x200006ac

00008a44 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    8a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a46:	46d6      	mov	lr, sl
    8a48:	464f      	mov	r7, r9
    8a4a:	4646      	mov	r6, r8
    8a4c:	b5c0      	push	{r6, r7, lr}
    8a4e:	b09a      	sub	sp, #104	; 0x68
    8a50:	000d      	movs	r5, r1
    8a52:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    8a54:	2841      	cmp	r0, #65	; 0x41
    8a56:	d039      	beq.n	8acc <m2m_ip_cb+0x88>
    8a58:	2854      	cmp	r0, #84	; 0x54
    8a5a:	d037      	beq.n	8acc <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    8a5c:	2842      	cmp	r0, #66	; 0x42
    8a5e:	d053      	beq.n	8b08 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    8a60:	2843      	cmp	r0, #67	; 0x43
    8a62:	d06a      	beq.n	8b3a <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    8a64:	2844      	cmp	r0, #68	; 0x44
    8a66:	d100      	bne.n	8a6a <m2m_ip_cb+0x26>
    8a68:	e0af      	b.n	8bca <m2m_ip_cb+0x186>
    8a6a:	284b      	cmp	r0, #75	; 0x4b
    8a6c:	d100      	bne.n	8a70 <m2m_ip_cb+0x2c>
    8a6e:	e0ac      	b.n	8bca <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    8a70:	284a      	cmp	r0, #74	; 0x4a
    8a72:	d100      	bne.n	8a76 <m2m_ip_cb+0x32>
    8a74:	e0cf      	b.n	8c16 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    8a76:	2846      	cmp	r0, #70	; 0x46
    8a78:	d100      	bne.n	8a7c <m2m_ip_cb+0x38>
    8a7a:	e0e5      	b.n	8c48 <m2m_ip_cb+0x204>
    8a7c:	2848      	cmp	r0, #72	; 0x48
    8a7e:	d100      	bne.n	8a82 <m2m_ip_cb+0x3e>
    8a80:	e10e      	b.n	8ca0 <m2m_ip_cb+0x25c>
    8a82:	284d      	cmp	r0, #77	; 0x4d
    8a84:	d100      	bne.n	8a88 <m2m_ip_cb+0x44>
    8a86:	e0dc      	b.n	8c42 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    8a88:	2845      	cmp	r0, #69	; 0x45
    8a8a:	d100      	bne.n	8a8e <m2m_ip_cb+0x4a>
    8a8c:	e12c      	b.n	8ce8 <m2m_ip_cb+0x2a4>
    8a8e:	2847      	cmp	r0, #71	; 0x47
    8a90:	d100      	bne.n	8a94 <m2m_ip_cb+0x50>
    8a92:	e14d      	b.n	8d30 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    8a94:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    8a96:	284c      	cmp	r0, #76	; 0x4c
    8a98:	d100      	bne.n	8a9c <m2m_ip_cb+0x58>
    8a9a:	e126      	b.n	8cea <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    8a9c:	2852      	cmp	r0, #82	; 0x52
    8a9e:	d12d      	bne.n	8afc <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    8aa0:	2301      	movs	r3, #1
    8aa2:	2214      	movs	r2, #20
    8aa4:	a909      	add	r1, sp, #36	; 0x24
    8aa6:	0020      	movs	r0, r4
    8aa8:	4ca2      	ldr	r4, [pc, #648]	; (8d34 <m2m_ip_cb+0x2f0>)
    8aaa:	47a0      	blx	r4
    8aac:	2800      	cmp	r0, #0
    8aae:	d125      	bne.n	8afc <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    8ab0:	4ba1      	ldr	r3, [pc, #644]	; (8d38 <m2m_ip_cb+0x2f4>)
    8ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8ab4:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    8ab6:	681b      	ldr	r3, [r3, #0]
    8ab8:	2b00      	cmp	r3, #0
    8aba:	d01f      	beq.n	8afc <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    8abc:	4b9e      	ldr	r3, [pc, #632]	; (8d38 <m2m_ip_cb+0x2f4>)
    8abe:	681c      	ldr	r4, [r3, #0]
    8ac0:	ab09      	add	r3, sp, #36	; 0x24
    8ac2:	7c1a      	ldrb	r2, [r3, #16]
    8ac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8ac6:	9809      	ldr	r0, [sp, #36]	; 0x24
    8ac8:	47a0      	blx	r4
			}
		}
	}
}
    8aca:	e017      	b.n	8afc <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    8acc:	2300      	movs	r3, #0
    8ace:	2204      	movs	r2, #4
    8ad0:	a909      	add	r1, sp, #36	; 0x24
    8ad2:	0020      	movs	r0, r4
    8ad4:	4c97      	ldr	r4, [pc, #604]	; (8d34 <m2m_ip_cb+0x2f0>)
    8ad6:	47a0      	blx	r4
    8ad8:	2800      	cmp	r0, #0
    8ada:	d10f      	bne.n	8afc <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    8adc:	ab09      	add	r3, sp, #36	; 0x24
    8ade:	785a      	ldrb	r2, [r3, #1]
    8ae0:	ab05      	add	r3, sp, #20
    8ae2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    8ae4:	4b95      	ldr	r3, [pc, #596]	; (8d3c <m2m_ip_cb+0x2f8>)
    8ae6:	681b      	ldr	r3, [r3, #0]
    8ae8:	2b00      	cmp	r3, #0
    8aea:	d007      	beq.n	8afc <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    8aec:	4b93      	ldr	r3, [pc, #588]	; (8d3c <m2m_ip_cb+0x2f8>)
    8aee:	681b      	ldr	r3, [r3, #0]
    8af0:	aa09      	add	r2, sp, #36	; 0x24
    8af2:	2000      	movs	r0, #0
    8af4:	5610      	ldrsb	r0, [r2, r0]
    8af6:	aa05      	add	r2, sp, #20
    8af8:	2101      	movs	r1, #1
    8afa:	4798      	blx	r3
}
    8afc:	b01a      	add	sp, #104	; 0x68
    8afe:	bc1c      	pop	{r2, r3, r4}
    8b00:	4690      	mov	r8, r2
    8b02:	4699      	mov	r9, r3
    8b04:	46a2      	mov	sl, r4
    8b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    8b08:	2300      	movs	r3, #0
    8b0a:	2204      	movs	r2, #4
    8b0c:	a909      	add	r1, sp, #36	; 0x24
    8b0e:	0020      	movs	r0, r4
    8b10:	4c88      	ldr	r4, [pc, #544]	; (8d34 <m2m_ip_cb+0x2f0>)
    8b12:	47a0      	blx	r4
    8b14:	2800      	cmp	r0, #0
    8b16:	d1f1      	bne.n	8afc <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    8b18:	ab09      	add	r3, sp, #36	; 0x24
    8b1a:	785a      	ldrb	r2, [r3, #1]
    8b1c:	ab05      	add	r3, sp, #20
    8b1e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    8b20:	4b86      	ldr	r3, [pc, #536]	; (8d3c <m2m_ip_cb+0x2f8>)
    8b22:	681b      	ldr	r3, [r3, #0]
    8b24:	2b00      	cmp	r3, #0
    8b26:	d0e9      	beq.n	8afc <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    8b28:	4b84      	ldr	r3, [pc, #528]	; (8d3c <m2m_ip_cb+0x2f8>)
    8b2a:	681b      	ldr	r3, [r3, #0]
    8b2c:	aa09      	add	r2, sp, #36	; 0x24
    8b2e:	2000      	movs	r0, #0
    8b30:	5610      	ldrsb	r0, [r2, r0]
    8b32:	aa05      	add	r2, sp, #20
    8b34:	2102      	movs	r1, #2
    8b36:	4798      	blx	r3
    8b38:	e7e0      	b.n	8afc <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    8b3a:	2300      	movs	r3, #0
    8b3c:	220c      	movs	r2, #12
    8b3e:	a905      	add	r1, sp, #20
    8b40:	0020      	movs	r0, r4
    8b42:	4c7c      	ldr	r4, [pc, #496]	; (8d34 <m2m_ip_cb+0x2f0>)
    8b44:	47a0      	blx	r4
    8b46:	2800      	cmp	r0, #0
    8b48:	d1d8      	bne.n	8afc <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    8b4a:	ab05      	add	r3, sp, #20
    8b4c:	2209      	movs	r2, #9
    8b4e:	569a      	ldrsb	r2, [r3, r2]
    8b50:	2a00      	cmp	r2, #0
    8b52:	db24      	blt.n	8b9e <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    8b54:	0018      	movs	r0, r3
    8b56:	2108      	movs	r1, #8
    8b58:	5659      	ldrsb	r1, [r3, r1]
    8b5a:	4b79      	ldr	r3, [pc, #484]	; (8d40 <m2m_ip_cb+0x2fc>)
    8b5c:	0109      	lsls	r1, r1, #4
    8b5e:	1859      	adds	r1, r3, r1
    8b60:	7ac9      	ldrb	r1, [r1, #11]
    8b62:	b2c9      	uxtb	r1, r1
    8b64:	0114      	lsls	r4, r2, #4
    8b66:	191b      	adds	r3, r3, r4
    8b68:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    8b6a:	2101      	movs	r1, #1
    8b6c:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    8b6e:	8941      	ldrh	r1, [r0, #10]
    8b70:	3908      	subs	r1, #8
    8b72:	b289      	uxth	r1, r1
    8b74:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    8b76:	4973      	ldr	r1, [pc, #460]	; (8d44 <m2m_ip_cb+0x300>)
    8b78:	880b      	ldrh	r3, [r1, #0]
    8b7a:	3301      	adds	r3, #1
    8b7c:	b29b      	uxth	r3, r3
    8b7e:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    8b80:	880b      	ldrh	r3, [r1, #0]
    8b82:	b29b      	uxth	r3, r3
    8b84:	2b00      	cmp	r3, #0
    8b86:	d103      	bne.n	8b90 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    8b88:	880b      	ldrh	r3, [r1, #0]
    8b8a:	3301      	adds	r3, #1
    8b8c:	b29b      	uxth	r3, r3
    8b8e:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    8b90:	4b6c      	ldr	r3, [pc, #432]	; (8d44 <m2m_ip_cb+0x300>)
    8b92:	8819      	ldrh	r1, [r3, #0]
    8b94:	b289      	uxth	r1, r1
    8b96:	0110      	lsls	r0, r2, #4
    8b98:	4b69      	ldr	r3, [pc, #420]	; (8d40 <m2m_ip_cb+0x2fc>)
    8b9a:	181b      	adds	r3, r3, r0
    8b9c:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    8b9e:	ab09      	add	r3, sp, #36	; 0x24
    8ba0:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    8ba2:	2202      	movs	r2, #2
    8ba4:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    8ba6:	aa05      	add	r2, sp, #20
    8ba8:	8851      	ldrh	r1, [r2, #2]
    8baa:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    8bac:	9a06      	ldr	r2, [sp, #24]
    8bae:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    8bb0:	4b62      	ldr	r3, [pc, #392]	; (8d3c <m2m_ip_cb+0x2f8>)
    8bb2:	681b      	ldr	r3, [r3, #0]
    8bb4:	2b00      	cmp	r3, #0
    8bb6:	d0a1      	beq.n	8afc <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    8bb8:	4b60      	ldr	r3, [pc, #384]	; (8d3c <m2m_ip_cb+0x2f8>)
    8bba:	681b      	ldr	r3, [r3, #0]
    8bbc:	aa05      	add	r2, sp, #20
    8bbe:	2008      	movs	r0, #8
    8bc0:	5610      	ldrsb	r0, [r2, r0]
    8bc2:	aa09      	add	r2, sp, #36	; 0x24
    8bc4:	2104      	movs	r1, #4
    8bc6:	4798      	blx	r3
    8bc8:	e798      	b.n	8afc <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    8bca:	2300      	movs	r3, #0
    8bcc:	2204      	movs	r2, #4
    8bce:	a909      	add	r1, sp, #36	; 0x24
    8bd0:	0020      	movs	r0, r4
    8bd2:	4c58      	ldr	r4, [pc, #352]	; (8d34 <m2m_ip_cb+0x2f0>)
    8bd4:	47a0      	blx	r4
    8bd6:	2800      	cmp	r0, #0
    8bd8:	d000      	beq.n	8bdc <m2m_ip_cb+0x198>
    8bda:	e78f      	b.n	8afc <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    8bdc:	ab09      	add	r3, sp, #36	; 0x24
    8bde:	2000      	movs	r0, #0
    8be0:	5618      	ldrsb	r0, [r3, r0]
    8be2:	aa05      	add	r2, sp, #20
    8be4:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    8be6:	785b      	ldrb	r3, [r3, #1]
    8be8:	b25b      	sxtb	r3, r3
    8bea:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    8bec:	2b00      	cmp	r3, #0
    8bee:	d107      	bne.n	8c00 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    8bf0:	ab09      	add	r3, sp, #36	; 0x24
    8bf2:	885b      	ldrh	r3, [r3, #2]
    8bf4:	3b08      	subs	r3, #8
    8bf6:	b29b      	uxth	r3, r3
    8bf8:	0101      	lsls	r1, r0, #4
    8bfa:	4a51      	ldr	r2, [pc, #324]	; (8d40 <m2m_ip_cb+0x2fc>)
    8bfc:	1852      	adds	r2, r2, r1
    8bfe:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    8c00:	4b4e      	ldr	r3, [pc, #312]	; (8d3c <m2m_ip_cb+0x2f8>)
    8c02:	681b      	ldr	r3, [r3, #0]
    8c04:	2b00      	cmp	r3, #0
    8c06:	d100      	bne.n	8c0a <m2m_ip_cb+0x1c6>
    8c08:	e778      	b.n	8afc <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    8c0a:	4b4c      	ldr	r3, [pc, #304]	; (8d3c <m2m_ip_cb+0x2f8>)
    8c0c:	681b      	ldr	r3, [r3, #0]
    8c0e:	aa05      	add	r2, sp, #20
    8c10:	2105      	movs	r1, #5
    8c12:	4798      	blx	r3
	{
    8c14:	e772      	b.n	8afc <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    8c16:	2300      	movs	r3, #0
    8c18:	2244      	movs	r2, #68	; 0x44
    8c1a:	a909      	add	r1, sp, #36	; 0x24
    8c1c:	0020      	movs	r0, r4
    8c1e:	4c45      	ldr	r4, [pc, #276]	; (8d34 <m2m_ip_cb+0x2f0>)
    8c20:	47a0      	blx	r4
    8c22:	2800      	cmp	r0, #0
    8c24:	d000      	beq.n	8c28 <m2m_ip_cb+0x1e4>
    8c26:	e769      	b.n	8afc <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    8c28:	4b47      	ldr	r3, [pc, #284]	; (8d48 <m2m_ip_cb+0x304>)
    8c2a:	681b      	ldr	r3, [r3, #0]
    8c2c:	2b00      	cmp	r3, #0
    8c2e:	d100      	bne.n	8c32 <m2m_ip_cb+0x1ee>
    8c30:	e764      	b.n	8afc <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    8c32:	4b45      	ldr	r3, [pc, #276]	; (8d48 <m2m_ip_cb+0x304>)
    8c34:	681b      	ldr	r3, [r3, #0]
    8c36:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8c38:	9203      	str	r2, [sp, #12]
    8c3a:	0011      	movs	r1, r2
    8c3c:	a809      	add	r0, sp, #36	; 0x24
    8c3e:	4798      	blx	r3
    8c40:	e75c      	b.n	8afc <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    8c42:	2306      	movs	r3, #6
    8c44:	469a      	mov	sl, r3
    8c46:	e001      	b.n	8c4c <m2m_ip_cb+0x208>
    8c48:	2306      	movs	r3, #6
    8c4a:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    8c4c:	2300      	movs	r3, #0
    8c4e:	2210      	movs	r2, #16
    8c50:	a905      	add	r1, sp, #20
    8c52:	0020      	movs	r0, r4
    8c54:	4f37      	ldr	r7, [pc, #220]	; (8d34 <m2m_ip_cb+0x2f0>)
    8c56:	47b8      	blx	r7
    8c58:	2800      	cmp	r0, #0
    8c5a:	d000      	beq.n	8c5e <m2m_ip_cb+0x21a>
    8c5c:	e74e      	b.n	8afc <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    8c5e:	aa05      	add	r2, sp, #20
    8c60:	200c      	movs	r0, #12
    8c62:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    8c64:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    8c66:	0107      	lsls	r7, r0, #4
    8c68:	4935      	ldr	r1, [pc, #212]	; (8d40 <m2m_ip_cb+0x2fc>)
    8c6a:	19c9      	adds	r1, r1, r7
    8c6c:	2700      	movs	r7, #0
    8c6e:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    8c70:	2608      	movs	r6, #8
    8c72:	5f97      	ldrsh	r7, [r2, r6]
    8c74:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    8c76:	8957      	ldrh	r7, [r2, #10]
    8c78:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    8c7a:	af09      	add	r7, sp, #36	; 0x24
    8c7c:	8856      	ldrh	r6, [r2, #2]
    8c7e:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    8c80:	9a06      	ldr	r2, [sp, #24]
    8c82:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    8c84:	88ca      	ldrh	r2, [r1, #6]
    8c86:	b292      	uxth	r2, r2
    8c88:	4293      	cmp	r3, r2
    8c8a:	d00c      	beq.n	8ca6 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    8c8c:	2d10      	cmp	r5, #16
    8c8e:	d800      	bhi.n	8c92 <m2m_ip_cb+0x24e>
    8c90:	e734      	b.n	8afc <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    8c92:	2301      	movs	r3, #1
    8c94:	2200      	movs	r2, #0
    8c96:	2100      	movs	r1, #0
    8c98:	2000      	movs	r0, #0
    8c9a:	4c26      	ldr	r4, [pc, #152]	; (8d34 <m2m_ip_cb+0x2f0>)
    8c9c:	47a0      	blx	r4
	{
    8c9e:	e72d      	b.n	8afc <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    8ca0:	2309      	movs	r3, #9
    8ca2:	469a      	mov	sl, r3
    8ca4:	e7d2      	b.n	8c4c <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    8ca6:	4643      	mov	r3, r8
    8ca8:	2b00      	cmp	r3, #0
    8caa:	dd01      	ble.n	8cb0 <m2m_ip_cb+0x26c>
    8cac:	45a8      	cmp	r8, r5
    8cae:	db0f      	blt.n	8cd0 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    8cb0:	ab09      	add	r3, sp, #36	; 0x24
    8cb2:	4642      	mov	r2, r8
    8cb4:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    8cb6:	2300      	movs	r3, #0
    8cb8:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    8cba:	4b20      	ldr	r3, [pc, #128]	; (8d3c <m2m_ip_cb+0x2f8>)
    8cbc:	681b      	ldr	r3, [r3, #0]
    8cbe:	2b00      	cmp	r3, #0
    8cc0:	d100      	bne.n	8cc4 <m2m_ip_cb+0x280>
    8cc2:	e71b      	b.n	8afc <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    8cc4:	4b1d      	ldr	r3, [pc, #116]	; (8d3c <m2m_ip_cb+0x2f8>)
    8cc6:	681b      	ldr	r3, [r3, #0]
    8cc8:	aa09      	add	r2, sp, #36	; 0x24
    8cca:	4651      	mov	r1, sl
    8ccc:	4798      	blx	r3
    8cce:	e715      	b.n	8afc <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    8cd0:	0023      	movs	r3, r4
    8cd2:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    8cd4:	4642      	mov	r2, r8
    8cd6:	4669      	mov	r1, sp
    8cd8:	818a      	strh	r2, [r1, #12]
    8cda:	898a      	ldrh	r2, [r1, #12]
    8cdc:	9200      	str	r2, [sp, #0]
    8cde:	4652      	mov	r2, sl
    8ce0:	0039      	movs	r1, r7
    8ce2:	4c1a      	ldr	r4, [pc, #104]	; (8d4c <m2m_ip_cb+0x308>)
    8ce4:	47a0      	blx	r4
    8ce6:	e709      	b.n	8afc <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    8ce8:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    8cea:	2300      	movs	r3, #0
    8cec:	2208      	movs	r2, #8
    8cee:	a909      	add	r1, sp, #36	; 0x24
    8cf0:	0020      	movs	r0, r4
    8cf2:	4c10      	ldr	r4, [pc, #64]	; (8d34 <m2m_ip_cb+0x2f0>)
    8cf4:	47a0      	blx	r4
    8cf6:	2800      	cmp	r0, #0
    8cf8:	d000      	beq.n	8cfc <m2m_ip_cb+0x2b8>
    8cfa:	e6ff      	b.n	8afc <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    8cfc:	ab09      	add	r3, sp, #36	; 0x24
    8cfe:	2000      	movs	r0, #0
    8d00:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    8d02:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    8d04:	8859      	ldrh	r1, [r3, #2]
    8d06:	ab05      	add	r3, sp, #20
    8d08:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    8d0a:	0101      	lsls	r1, r0, #4
    8d0c:	4b0c      	ldr	r3, [pc, #48]	; (8d40 <m2m_ip_cb+0x2fc>)
    8d0e:	185b      	adds	r3, r3, r1
    8d10:	88db      	ldrh	r3, [r3, #6]
    8d12:	b29b      	uxth	r3, r3
    8d14:	429a      	cmp	r2, r3
    8d16:	d000      	beq.n	8d1a <m2m_ip_cb+0x2d6>
    8d18:	e6f0      	b.n	8afc <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    8d1a:	4b08      	ldr	r3, [pc, #32]	; (8d3c <m2m_ip_cb+0x2f8>)
    8d1c:	681b      	ldr	r3, [r3, #0]
    8d1e:	2b00      	cmp	r3, #0
    8d20:	d100      	bne.n	8d24 <m2m_ip_cb+0x2e0>
    8d22:	e6eb      	b.n	8afc <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    8d24:	4b05      	ldr	r3, [pc, #20]	; (8d3c <m2m_ip_cb+0x2f8>)
    8d26:	681b      	ldr	r3, [r3, #0]
    8d28:	aa05      	add	r2, sp, #20
    8d2a:	0029      	movs	r1, r5
    8d2c:	4798      	blx	r3
	{
    8d2e:	e6e5      	b.n	8afc <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    8d30:	2508      	movs	r5, #8
    8d32:	e7da      	b.n	8cea <m2m_ip_cb+0x2a6>
    8d34:	00006cd1 	.word	0x00006cd1
    8d38:	200006b0 	.word	0x200006b0
    8d3c:	200006ac 	.word	0x200006ac
    8d40:	200005fc 	.word	0x200005fc
    8d44:	20000226 	.word	0x20000226
    8d48:	200006b4 	.word	0x200006b4
    8d4c:	00008931 	.word	0x00008931

00008d50 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    8d50:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    8d52:	4b0a      	ldr	r3, [pc, #40]	; (8d7c <socketInit+0x2c>)
    8d54:	781b      	ldrb	r3, [r3, #0]
    8d56:	2b00      	cmp	r3, #0
    8d58:	d000      	beq.n	8d5c <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    8d5a:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    8d5c:	22b0      	movs	r2, #176	; 0xb0
    8d5e:	2100      	movs	r1, #0
    8d60:	4807      	ldr	r0, [pc, #28]	; (8d80 <socketInit+0x30>)
    8d62:	4b08      	ldr	r3, [pc, #32]	; (8d84 <socketInit+0x34>)
    8d64:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    8d66:	4908      	ldr	r1, [pc, #32]	; (8d88 <socketInit+0x38>)
    8d68:	2002      	movs	r0, #2
    8d6a:	4b08      	ldr	r3, [pc, #32]	; (8d8c <socketInit+0x3c>)
    8d6c:	4798      	blx	r3
		gbSocketInit	= 1;
    8d6e:	2201      	movs	r2, #1
    8d70:	4b02      	ldr	r3, [pc, #8]	; (8d7c <socketInit+0x2c>)
    8d72:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    8d74:	2200      	movs	r2, #0
    8d76:	4b06      	ldr	r3, [pc, #24]	; (8d90 <socketInit+0x40>)
    8d78:	801a      	strh	r2, [r3, #0]
}
    8d7a:	e7ee      	b.n	8d5a <socketInit+0xa>
    8d7c:	20000225 	.word	0x20000225
    8d80:	200005fc 	.word	0x200005fc
    8d84:	000065b1 	.word	0x000065b1
    8d88:	00008a45 	.word	0x00008a45
    8d8c:	00006dbd 	.word	0x00006dbd
    8d90:	20000226 	.word	0x20000226

00008d94 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    8d94:	4b02      	ldr	r3, [pc, #8]	; (8da0 <registerSocketCallback+0xc>)
    8d96:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    8d98:	4b02      	ldr	r3, [pc, #8]	; (8da4 <registerSocketCallback+0x10>)
    8d9a:	6019      	str	r1, [r3, #0]
}
    8d9c:	4770      	bx	lr
    8d9e:	46c0      	nop			; (mov r8, r8)
    8da0:	200006ac 	.word	0x200006ac
    8da4:	200006b4 	.word	0x200006b4

00008da8 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    8da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8daa:	46d6      	mov	lr, sl
    8dac:	4647      	mov	r7, r8
    8dae:	b580      	push	{r7, lr}
    8db0:	b089      	sub	sp, #36	; 0x24
    8db2:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    8db4:	2802      	cmp	r0, #2
    8db6:	d000      	beq.n	8dba <socket+0x12>
    8db8:	e09c      	b.n	8ef4 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    8dba:	2901      	cmp	r1, #1
    8dbc:	d00a      	beq.n	8dd4 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    8dbe:	2902      	cmp	r1, #2
    8dc0:	d100      	bne.n	8dc4 <socket+0x1c>
    8dc2:	e070      	b.n	8ea6 <socket+0xfe>
	SOCKET					sock = -1;
    8dc4:	2501      	movs	r5, #1
    8dc6:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    8dc8:	0028      	movs	r0, r5
    8dca:	b009      	add	sp, #36	; 0x24
    8dcc:	bc0c      	pop	{r2, r3}
    8dce:	4690      	mov	r8, r2
    8dd0:	469a      	mov	sl, r3
    8dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    8dd4:	4c49      	ldr	r4, [pc, #292]	; (8efc <socket+0x154>)
    8dd6:	7827      	ldrb	r7, [r4, #0]
    8dd8:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    8dda:	7826      	ldrb	r6, [r4, #0]
    8ddc:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    8dde:	7820      	ldrb	r0, [r4, #0]
    8de0:	3001      	adds	r0, #1
    8de2:	3106      	adds	r1, #6
    8de4:	4b46      	ldr	r3, [pc, #280]	; (8f00 <socket+0x158>)
    8de6:	4798      	blx	r3
    8de8:	b2c9      	uxtb	r1, r1
    8dea:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    8dec:	0132      	lsls	r2, r6, #4
    8dee:	4b45      	ldr	r3, [pc, #276]	; (8f04 <socket+0x15c>)
    8df0:	189b      	adds	r3, r3, r2
    8df2:	7a9b      	ldrb	r3, [r3, #10]
    8df4:	2506      	movs	r5, #6
    8df6:	2b00      	cmp	r3, #0
    8df8:	d018      	beq.n	8e2c <socket+0x84>
				u8SockID	= u8NextTcpSock;
    8dfa:	4e40      	ldr	r6, [pc, #256]	; (8efc <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    8dfc:	4b40      	ldr	r3, [pc, #256]	; (8f00 <socket+0x158>)
    8dfe:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    8e00:	4b40      	ldr	r3, [pc, #256]	; (8f04 <socket+0x15c>)
    8e02:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    8e04:	7837      	ldrb	r7, [r6, #0]
    8e06:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    8e08:	7834      	ldrb	r4, [r6, #0]
    8e0a:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    8e0c:	7830      	ldrb	r0, [r6, #0]
    8e0e:	3001      	adds	r0, #1
    8e10:	2107      	movs	r1, #7
    8e12:	47d0      	blx	sl
    8e14:	b2c9      	uxtb	r1, r1
    8e16:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    8e18:	0123      	lsls	r3, r4, #4
    8e1a:	4443      	add	r3, r8
    8e1c:	7a9b      	ldrb	r3, [r3, #10]
    8e1e:	2b00      	cmp	r3, #0
    8e20:	d007      	beq.n	8e32 <socket+0x8a>
    8e22:	3d01      	subs	r5, #1
    8e24:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    8e26:	2d00      	cmp	r5, #0
    8e28:	d1ec      	bne.n	8e04 <socket+0x5c>
    8e2a:	e7cb      	b.n	8dc4 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    8e2c:	4b35      	ldr	r3, [pc, #212]	; (8f04 <socket+0x15c>)
    8e2e:	18d4      	adds	r4, r2, r3
    8e30:	e002      	b.n	8e38 <socket+0x90>
    8e32:	0124      	lsls	r4, r4, #4
    8e34:	4b33      	ldr	r3, [pc, #204]	; (8f04 <socket+0x15c>)
    8e36:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    8e38:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    8e3a:	2d00      	cmp	r5, #0
    8e3c:	dbc4      	blt.n	8dc8 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    8e3e:	2210      	movs	r2, #16
    8e40:	2100      	movs	r1, #0
    8e42:	0020      	movs	r0, r4
    8e44:	4b30      	ldr	r3, [pc, #192]	; (8f08 <socket+0x160>)
    8e46:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    8e48:	2301      	movs	r3, #1
    8e4a:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    8e4c:	4a2f      	ldr	r2, [pc, #188]	; (8f0c <socket+0x164>)
    8e4e:	8813      	ldrh	r3, [r2, #0]
    8e50:	3301      	adds	r3, #1
    8e52:	b29b      	uxth	r3, r3
    8e54:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    8e56:	8813      	ldrh	r3, [r2, #0]
    8e58:	b29b      	uxth	r3, r3
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d103      	bne.n	8e66 <socket+0xbe>
				++gu16SessionID;
    8e5e:	8813      	ldrh	r3, [r2, #0]
    8e60:	3301      	adds	r3, #1
    8e62:	b29b      	uxth	r3, r3
    8e64:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    8e66:	4e29      	ldr	r6, [pc, #164]	; (8f0c <socket+0x164>)
    8e68:	8833      	ldrh	r3, [r6, #0]
    8e6a:	b29b      	uxth	r3, r3
    8e6c:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    8e6e:	4828      	ldr	r0, [pc, #160]	; (8f10 <socket+0x168>)
    8e70:	4f28      	ldr	r7, [pc, #160]	; (8f14 <socket+0x16c>)
    8e72:	47b8      	blx	r7
    8e74:	8832      	ldrh	r2, [r6, #0]
    8e76:	b292      	uxth	r2, r2
    8e78:	0029      	movs	r1, r5
    8e7a:	4827      	ldr	r0, [pc, #156]	; (8f18 <socket+0x170>)
    8e7c:	47b8      	blx	r7
    8e7e:	200d      	movs	r0, #13
    8e80:	4b26      	ldr	r3, [pc, #152]	; (8f1c <socket+0x174>)
    8e82:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    8e84:	9b05      	ldr	r3, [sp, #20]
    8e86:	07db      	lsls	r3, r3, #31
    8e88:	d59e      	bpl.n	8dc8 <socket+0x20>
				strSSLCreate.sslSock = sock;
    8e8a:	aa07      	add	r2, sp, #28
    8e8c:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    8e8e:	2321      	movs	r3, #33	; 0x21
    8e90:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    8e92:	2300      	movs	r3, #0
    8e94:	9302      	str	r3, [sp, #8]
    8e96:	9301      	str	r3, [sp, #4]
    8e98:	9300      	str	r3, [sp, #0]
    8e9a:	3304      	adds	r3, #4
    8e9c:	2150      	movs	r1, #80	; 0x50
    8e9e:	2002      	movs	r0, #2
    8ea0:	4c1f      	ldr	r4, [pc, #124]	; (8f20 <socket+0x178>)
    8ea2:	47a0      	blx	r4
    8ea4:	e790      	b.n	8dc8 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    8ea6:	4b1f      	ldr	r3, [pc, #124]	; (8f24 <socket+0x17c>)
    8ea8:	781d      	ldrb	r5, [r3, #0]
    8eaa:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    8eac:	781c      	ldrb	r4, [r3, #0]
    8eae:	0124      	lsls	r4, r4, #4
    8eb0:	4a1d      	ldr	r2, [pc, #116]	; (8f28 <socket+0x180>)
    8eb2:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    8eb4:	7819      	ldrb	r1, [r3, #0]
    8eb6:	3101      	adds	r1, #1
    8eb8:	2203      	movs	r2, #3
    8eba:	400a      	ands	r2, r1
    8ebc:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    8ebe:	7aa3      	ldrb	r3, [r4, #10]
    8ec0:	2b00      	cmp	r3, #0
    8ec2:	d014      	beq.n	8eee <socket+0x146>
    8ec4:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    8ec6:	4917      	ldr	r1, [pc, #92]	; (8f24 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    8ec8:	4f17      	ldr	r7, [pc, #92]	; (8f28 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    8eca:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    8ecc:	780d      	ldrb	r5, [r1, #0]
    8ece:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    8ed0:	780c      	ldrb	r4, [r1, #0]
    8ed2:	0124      	lsls	r4, r4, #4
    8ed4:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    8ed6:	780b      	ldrb	r3, [r1, #0]
    8ed8:	3301      	adds	r3, #1
    8eda:	4003      	ands	r3, r0
    8edc:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    8ede:	7aa3      	ldrb	r3, [r4, #10]
    8ee0:	2b00      	cmp	r3, #0
    8ee2:	d004      	beq.n	8eee <socket+0x146>
    8ee4:	3a01      	subs	r2, #1
    8ee6:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    8ee8:	2a00      	cmp	r2, #0
    8eea:	d1ef      	bne.n	8ecc <socket+0x124>
    8eec:	e76a      	b.n	8dc4 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    8eee:	3507      	adds	r5, #7
    8ef0:	b26d      	sxtb	r5, r5
					break;
    8ef2:	e7a2      	b.n	8e3a <socket+0x92>
	SOCKET					sock = -1;
    8ef4:	2501      	movs	r5, #1
    8ef6:	426d      	negs	r5, r5
    8ef8:	e766      	b.n	8dc8 <socket+0x20>
    8efa:	46c0      	nop			; (mov r8, r8)
    8efc:	20000228 	.word	0x20000228
    8f00:	00011bc9 	.word	0x00011bc9
    8f04:	200005fc 	.word	0x200005fc
    8f08:	000065b1 	.word	0x000065b1
    8f0c:	20000226 	.word	0x20000226
    8f10:	00014de0 	.word	0x00014de0
    8f14:	0000f309 	.word	0x0000f309
    8f18:	00015870 	.word	0x00015870
    8f1c:	0000f33d 	.word	0x0000f33d
    8f20:	000066c5 	.word	0x000066c5
    8f24:	20000229 	.word	0x20000229
    8f28:	2000066c 	.word	0x2000066c

00008f2c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    8f2c:	b570      	push	{r4, r5, r6, lr}
    8f2e:	b088      	sub	sp, #32
    8f30:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    8f32:	db30      	blt.n	8f96 <connect+0x6a>
    8f34:	2900      	cmp	r1, #0
    8f36:	d031      	beq.n	8f9c <connect+0x70>
    8f38:	0100      	lsls	r0, r0, #4
    8f3a:	4b1d      	ldr	r3, [pc, #116]	; (8fb0 <connect+0x84>)
    8f3c:	181b      	adds	r3, r3, r0
    8f3e:	7a9b      	ldrb	r3, [r3, #10]
    8f40:	2b01      	cmp	r3, #1
    8f42:	d12e      	bne.n	8fa2 <connect+0x76>
    8f44:	2a00      	cmp	r2, #0
    8f46:	d02f      	beq.n	8fa8 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    8f48:	4b19      	ldr	r3, [pc, #100]	; (8fb0 <connect+0x84>)
    8f4a:	181b      	adds	r3, r3, r0
    8f4c:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    8f4e:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    8f50:	07db      	lsls	r3, r3, #31
    8f52:	d505      	bpl.n	8f60 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    8f54:	4b16      	ldr	r3, [pc, #88]	; (8fb0 <connect+0x84>)
    8f56:	181b      	adds	r3, r3, r0
    8f58:	7ada      	ldrb	r2, [r3, #11]
    8f5a:	ab05      	add	r3, sp, #20
    8f5c:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    8f5e:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    8f60:	ad05      	add	r5, sp, #20
    8f62:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    8f64:	2208      	movs	r2, #8
    8f66:	0028      	movs	r0, r5
    8f68:	4b12      	ldr	r3, [pc, #72]	; (8fb4 <connect+0x88>)
    8f6a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    8f6c:	0124      	lsls	r4, r4, #4
    8f6e:	4b10      	ldr	r3, [pc, #64]	; (8fb0 <connect+0x84>)
    8f70:	191c      	adds	r4, r3, r4
    8f72:	88e3      	ldrh	r3, [r4, #6]
    8f74:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    8f76:	2300      	movs	r3, #0
    8f78:	9302      	str	r3, [sp, #8]
    8f7a:	9301      	str	r3, [sp, #4]
    8f7c:	9300      	str	r3, [sp, #0]
    8f7e:	330c      	adds	r3, #12
    8f80:	002a      	movs	r2, r5
    8f82:	0031      	movs	r1, r6
    8f84:	2002      	movs	r0, #2
    8f86:	4c0c      	ldr	r4, [pc, #48]	; (8fb8 <connect+0x8c>)
    8f88:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    8f8a:	2800      	cmp	r0, #0
    8f8c:	d001      	beq.n	8f92 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    8f8e:	2009      	movs	r0, #9
    8f90:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    8f92:	b008      	add	sp, #32
    8f94:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    8f96:	2006      	movs	r0, #6
    8f98:	4240      	negs	r0, r0
    8f9a:	e7fa      	b.n	8f92 <connect+0x66>
    8f9c:	2006      	movs	r0, #6
    8f9e:	4240      	negs	r0, r0
    8fa0:	e7f7      	b.n	8f92 <connect+0x66>
    8fa2:	2006      	movs	r0, #6
    8fa4:	4240      	negs	r0, r0
    8fa6:	e7f4      	b.n	8f92 <connect+0x66>
    8fa8:	2006      	movs	r0, #6
    8faa:	4240      	negs	r0, r0
    8fac:	e7f1      	b.n	8f92 <connect+0x66>
    8fae:	46c0      	nop			; (mov r8, r8)
    8fb0:	200005fc 	.word	0x200005fc
    8fb4:	0000659d 	.word	0x0000659d
    8fb8:	000066c5 	.word	0x000066c5

00008fbc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    8fbc:	b530      	push	{r4, r5, lr}
    8fbe:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    8fc0:	2800      	cmp	r0, #0
    8fc2:	db36      	blt.n	9032 <send+0x76>
    8fc4:	2900      	cmp	r1, #0
    8fc6:	d037      	beq.n	9038 <send+0x7c>
    8fc8:	23af      	movs	r3, #175	; 0xaf
    8fca:	00db      	lsls	r3, r3, #3
    8fcc:	429a      	cmp	r2, r3
    8fce:	d836      	bhi.n	903e <send+0x82>
    8fd0:	0104      	lsls	r4, r0, #4
    8fd2:	4b1e      	ldr	r3, [pc, #120]	; (904c <send+0x90>)
    8fd4:	191b      	adds	r3, r3, r4
    8fd6:	7a9b      	ldrb	r3, [r3, #10]
    8fd8:	2b01      	cmp	r3, #1
    8fda:	d133      	bne.n	9044 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    8fdc:	ab04      	add	r3, sp, #16
    8fde:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    8fe0:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    8fe2:	0025      	movs	r5, r4
    8fe4:	4c19      	ldr	r4, [pc, #100]	; (904c <send+0x90>)
    8fe6:	1964      	adds	r4, r4, r5
    8fe8:	88e4      	ldrh	r4, [r4, #6]
    8fea:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    8fec:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    8fee:	2806      	cmp	r0, #6
    8ff0:	dd00      	ble.n	8ff4 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    8ff2:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8ff4:	0104      	lsls	r4, r0, #4
    8ff6:	4b15      	ldr	r3, [pc, #84]	; (904c <send+0x90>)
    8ff8:	191b      	adds	r3, r3, r4
    8ffa:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    8ffc:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8ffe:	07e4      	lsls	r4, r4, #31
    9000:	d505      	bpl.n	900e <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    9002:	0100      	lsls	r0, r0, #4
    9004:	4b11      	ldr	r3, [pc, #68]	; (904c <send+0x90>)
    9006:	1818      	adds	r0, r3, r0
    9008:	8905      	ldrh	r5, [r0, #8]
    900a:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    900c:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    900e:	2080      	movs	r0, #128	; 0x80
    9010:	4318      	orrs	r0, r3
    9012:	9502      	str	r5, [sp, #8]
    9014:	9201      	str	r2, [sp, #4]
    9016:	9100      	str	r1, [sp, #0]
    9018:	2310      	movs	r3, #16
    901a:	aa04      	add	r2, sp, #16
    901c:	0001      	movs	r1, r0
    901e:	2002      	movs	r0, #2
    9020:	4c0b      	ldr	r4, [pc, #44]	; (9050 <send+0x94>)
    9022:	47a0      	blx	r4
    9024:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    9026:	2800      	cmp	r0, #0
    9028:	d000      	beq.n	902c <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    902a:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    902c:	0018      	movs	r0, r3
    902e:	b009      	add	sp, #36	; 0x24
    9030:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    9032:	2306      	movs	r3, #6
    9034:	425b      	negs	r3, r3
    9036:	e7f9      	b.n	902c <send+0x70>
    9038:	2306      	movs	r3, #6
    903a:	425b      	negs	r3, r3
    903c:	e7f6      	b.n	902c <send+0x70>
    903e:	2306      	movs	r3, #6
    9040:	425b      	negs	r3, r3
    9042:	e7f3      	b.n	902c <send+0x70>
    9044:	2306      	movs	r3, #6
    9046:	425b      	negs	r3, r3
    9048:	e7f0      	b.n	902c <send+0x70>
    904a:	46c0      	nop			; (mov r8, r8)
    904c:	200005fc 	.word	0x200005fc
    9050:	000066c5 	.word	0x000066c5

00009054 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    9054:	b530      	push	{r4, r5, lr}
    9056:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    9058:	2800      	cmp	r0, #0
    905a:	db34      	blt.n	90c6 <recv+0x72>
    905c:	2900      	cmp	r1, #0
    905e:	d035      	beq.n	90cc <recv+0x78>
    9060:	2a00      	cmp	r2, #0
    9062:	d036      	beq.n	90d2 <recv+0x7e>
    9064:	0105      	lsls	r5, r0, #4
    9066:	4c1e      	ldr	r4, [pc, #120]	; (90e0 <recv+0x8c>)
    9068:	1964      	adds	r4, r4, r5
    906a:	7aa4      	ldrb	r4, [r4, #10]
    906c:	2c01      	cmp	r4, #1
    906e:	d133      	bne.n	90d8 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    9070:	4c1b      	ldr	r4, [pc, #108]	; (90e0 <recv+0x8c>)
    9072:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    9074:	1964      	adds	r4, r4, r5
    9076:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    9078:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    907a:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    907c:	2900      	cmp	r1, #0
    907e:	d11d      	bne.n	90bc <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    9080:	2101      	movs	r1, #1
    9082:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    9084:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    9086:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    9088:	07d2      	lsls	r2, r2, #31
    908a:	d500      	bpl.n	908e <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    908c:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    908e:	2b00      	cmp	r3, #0
    9090:	d117      	bne.n	90c2 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    9092:	3b01      	subs	r3, #1
    9094:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    9096:	aa04      	add	r2, sp, #16
    9098:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    909a:	0100      	lsls	r0, r0, #4
    909c:	4b10      	ldr	r3, [pc, #64]	; (90e0 <recv+0x8c>)
    909e:	1818      	adds	r0, r3, r0
    90a0:	88c3      	ldrh	r3, [r0, #6]
    90a2:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    90a4:	2300      	movs	r3, #0
    90a6:	9302      	str	r3, [sp, #8]
    90a8:	9301      	str	r3, [sp, #4]
    90aa:	9300      	str	r3, [sp, #0]
    90ac:	3308      	adds	r3, #8
    90ae:	2002      	movs	r0, #2
    90b0:	4c0c      	ldr	r4, [pc, #48]	; (90e4 <recv+0x90>)
    90b2:	47a0      	blx	r4
    90b4:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    90b6:	2800      	cmp	r0, #0
    90b8:	d000      	beq.n	90bc <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    90ba:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    90bc:	0010      	movs	r0, r2
    90be:	b007      	add	sp, #28
    90c0:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    90c2:	9304      	str	r3, [sp, #16]
    90c4:	e7e7      	b.n	9096 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    90c6:	2206      	movs	r2, #6
    90c8:	4252      	negs	r2, r2
    90ca:	e7f7      	b.n	90bc <recv+0x68>
    90cc:	2206      	movs	r2, #6
    90ce:	4252      	negs	r2, r2
    90d0:	e7f4      	b.n	90bc <recv+0x68>
    90d2:	2206      	movs	r2, #6
    90d4:	4252      	negs	r2, r2
    90d6:	e7f1      	b.n	90bc <recv+0x68>
    90d8:	2206      	movs	r2, #6
    90da:	4252      	negs	r2, r2
    90dc:	e7ee      	b.n	90bc <recv+0x68>
    90de:	46c0      	nop			; (mov r8, r8)
    90e0:	200005fc 	.word	0x200005fc
    90e4:	000066c5 	.word	0x000066c5

000090e8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    90e8:	b530      	push	{r4, r5, lr}
    90ea:	b087      	sub	sp, #28
    90ec:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    90ee:	481e      	ldr	r0, [pc, #120]	; (9168 <close+0x80>)
    90f0:	4d1e      	ldr	r5, [pc, #120]	; (916c <close+0x84>)
    90f2:	47a8      	blx	r5
    90f4:	0021      	movs	r1, r4
    90f6:	481e      	ldr	r0, [pc, #120]	; (9170 <close+0x88>)
    90f8:	47a8      	blx	r5
    90fa:	200d      	movs	r0, #13
    90fc:	4b1d      	ldr	r3, [pc, #116]	; (9174 <close+0x8c>)
    90fe:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    9100:	2c00      	cmp	r4, #0
    9102:	db2a      	blt.n	915a <close+0x72>
    9104:	0122      	lsls	r2, r4, #4
    9106:	4b1c      	ldr	r3, [pc, #112]	; (9178 <close+0x90>)
    9108:	189b      	adds	r3, r3, r2
    910a:	7a9b      	ldrb	r3, [r3, #10]
    910c:	2b01      	cmp	r3, #1
    910e:	d127      	bne.n	9160 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    9110:	a905      	add	r1, sp, #20
    9112:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    9114:	4b18      	ldr	r3, [pc, #96]	; (9178 <close+0x90>)
    9116:	189b      	adds	r3, r3, r2
    9118:	88da      	ldrh	r2, [r3, #6]
    911a:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    911c:	2200      	movs	r2, #0
    911e:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    9120:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    9122:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    9124:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    9126:	07db      	lsls	r3, r3, #31
    9128:	d500      	bpl.n	912c <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    912a:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    912c:	2300      	movs	r3, #0
    912e:	9302      	str	r3, [sp, #8]
    9130:	9301      	str	r3, [sp, #4]
    9132:	9300      	str	r3, [sp, #0]
    9134:	3304      	adds	r3, #4
    9136:	aa05      	add	r2, sp, #20
    9138:	2002      	movs	r0, #2
    913a:	4d10      	ldr	r5, [pc, #64]	; (917c <close+0x94>)
    913c:	47a8      	blx	r5
    913e:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    9140:	d001      	beq.n	9146 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    9142:	2509      	movs	r5, #9
    9144:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    9146:	0124      	lsls	r4, r4, #4
    9148:	480b      	ldr	r0, [pc, #44]	; (9178 <close+0x90>)
    914a:	1820      	adds	r0, r4, r0
    914c:	2210      	movs	r2, #16
    914e:	2100      	movs	r1, #0
    9150:	4b0b      	ldr	r3, [pc, #44]	; (9180 <close+0x98>)
    9152:	4798      	blx	r3
	}
	return s8Ret;
}
    9154:	0028      	movs	r0, r5
    9156:	b007      	add	sp, #28
    9158:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    915a:	2506      	movs	r5, #6
    915c:	426d      	negs	r5, r5
    915e:	e7f9      	b.n	9154 <close+0x6c>
    9160:	2506      	movs	r5, #6
    9162:	426d      	negs	r5, r5
    9164:	e7f6      	b.n	9154 <close+0x6c>
    9166:	46c0      	nop			; (mov r8, r8)
    9168:	00014de0 	.word	0x00014de0
    916c:	0000f309 	.word	0x0000f309
    9170:	00015858 	.word	0x00015858
    9174:	0000f33d 	.word	0x0000f33d
    9178:	200005fc 	.word	0x200005fc
    917c:	000066c5 	.word	0x000066c5
    9180:	000065b1 	.word	0x000065b1

00009184 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    9184:	b570      	push	{r4, r5, r6, lr}
    9186:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    9188:	2300      	movs	r3, #0
    918a:	9301      	str	r3, [sp, #4]
    918c:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    918e:	2100      	movs	r1, #0
    9190:	7802      	ldrb	r2, [r0, #0]
    9192:	1c44      	adds	r4, r0, #1
    9194:	3005      	adds	r0, #5
    9196:	000b      	movs	r3, r1
    9198:	e009      	b.n	91ae <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    919a:	009d      	lsls	r5, r3, #2
    919c:	195b      	adds	r3, r3, r5
    919e:	005b      	lsls	r3, r3, #1
    91a0:	189b      	adds	r3, r3, r2
    91a2:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    91a4:	0022      	movs	r2, r4
    91a6:	3401      	adds	r4, #1
			if(j > 4)
    91a8:	42a0      	cmp	r0, r4
    91aa:	d00a      	beq.n	91c2 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    91ac:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    91ae:	2a2e      	cmp	r2, #46	; 0x2e
    91b0:	d00a      	beq.n	91c8 <nmi_inet_addr+0x44>
    91b2:	2a00      	cmp	r2, #0
    91b4:	d00c      	beq.n	91d0 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    91b6:	3a30      	subs	r2, #48	; 0x30
    91b8:	b2d2      	uxtb	r2, r2
    91ba:	2a09      	cmp	r2, #9
    91bc:	d9ed      	bls.n	919a <nmi_inet_addr+0x16>
				return 0;
    91be:	2000      	movs	r0, #0
    91c0:	e000      	b.n	91c4 <nmi_inet_addr+0x40>
				return 0;
    91c2:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    91c4:	b002      	add	sp, #8
    91c6:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    91c8:	466a      	mov	r2, sp
    91ca:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    91cc:	0020      	movs	r0, r4
    91ce:	e002      	b.n	91d6 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    91d0:	466a      	mov	r2, sp
    91d2:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    91d4:	0020      	movs	r0, r4
    91d6:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    91d8:	2e04      	cmp	r6, #4
    91da:	d1d9      	bne.n	9190 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    91dc:	2204      	movs	r2, #4
    91de:	4669      	mov	r1, sp
    91e0:	a801      	add	r0, sp, #4
    91e2:	4b02      	ldr	r3, [pc, #8]	; (91ec <nmi_inet_addr+0x68>)
    91e4:	4798      	blx	r3
	return u32IP;
    91e6:	9801      	ldr	r0, [sp, #4]
    91e8:	e7ec      	b.n	91c4 <nmi_inet_addr+0x40>
    91ea:	46c0      	nop			; (mov r8, r8)
    91ec:	0000659d 	.word	0x0000659d

000091f0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    91f0:	b510      	push	{r4, lr}
    91f2:	b084      	sub	sp, #16
    91f4:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    91f6:	4b0b      	ldr	r3, [pc, #44]	; (9224 <gethostbyname+0x34>)
    91f8:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    91fa:	b2c3      	uxtb	r3, r0
    91fc:	2b40      	cmp	r3, #64	; 0x40
    91fe:	d80d      	bhi.n	921c <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    9200:	23ff      	movs	r3, #255	; 0xff
    9202:	4003      	ands	r3, r0
    9204:	3301      	adds	r3, #1
    9206:	2200      	movs	r2, #0
    9208:	9202      	str	r2, [sp, #8]
    920a:	9201      	str	r2, [sp, #4]
    920c:	9200      	str	r2, [sp, #0]
    920e:	0022      	movs	r2, r4
    9210:	214a      	movs	r1, #74	; 0x4a
    9212:	2002      	movs	r0, #2
    9214:	4c04      	ldr	r4, [pc, #16]	; (9228 <gethostbyname+0x38>)
    9216:	47a0      	blx	r4
	}
	return s8Err;
}
    9218:	b004      	add	sp, #16
    921a:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    921c:	2006      	movs	r0, #6
    921e:	4240      	negs	r0, r0
    9220:	e7fa      	b.n	9218 <gethostbyname+0x28>
    9222:	46c0      	nop			; (mov r8, r8)
    9224:	000065c1 	.word	0x000065c1
    9228:	000066c5 	.word	0x000066c5

0000922c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    922c:	b570      	push	{r4, r5, r6, lr}
    922e:	b082      	sub	sp, #8
    9230:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    9232:	4b2a      	ldr	r3, [pc, #168]	; (92dc <spi_flash_enable+0xb0>)
    9234:	4798      	blx	r3
    9236:	0500      	lsls	r0, r0, #20
    9238:	0d00      	lsrs	r0, r0, #20
    923a:	4b29      	ldr	r3, [pc, #164]	; (92e0 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    923c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    923e:	4298      	cmp	r0, r3
    9240:	d802      	bhi.n	9248 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    9242:	0028      	movs	r0, r5
    9244:	b002      	add	sp, #8
    9246:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    9248:	a901      	add	r1, sp, #4
    924a:	4826      	ldr	r0, [pc, #152]	; (92e4 <spi_flash_enable+0xb8>)
    924c:	4b26      	ldr	r3, [pc, #152]	; (92e8 <spi_flash_enable+0xbc>)
    924e:	4798      	blx	r3
    9250:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    9252:	d1f6      	bne.n	9242 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    9254:	4b25      	ldr	r3, [pc, #148]	; (92ec <spi_flash_enable+0xc0>)
    9256:	9a01      	ldr	r2, [sp, #4]
    9258:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    925a:	4925      	ldr	r1, [pc, #148]	; (92f0 <spi_flash_enable+0xc4>)
    925c:	4319      	orrs	r1, r3
    925e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    9260:	4820      	ldr	r0, [pc, #128]	; (92e4 <spi_flash_enable+0xb8>)
    9262:	4b24      	ldr	r3, [pc, #144]	; (92f4 <spi_flash_enable+0xc8>)
    9264:	4798      	blx	r3
		if(enable) {
    9266:	2c00      	cmp	r4, #0
    9268:	d020      	beq.n	92ac <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    926a:	2100      	movs	r1, #0
    926c:	4822      	ldr	r0, [pc, #136]	; (92f8 <spi_flash_enable+0xcc>)
    926e:	4c21      	ldr	r4, [pc, #132]	; (92f4 <spi_flash_enable+0xc8>)
    9270:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    9272:	21ab      	movs	r1, #171	; 0xab
    9274:	4821      	ldr	r0, [pc, #132]	; (92fc <spi_flash_enable+0xd0>)
    9276:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    9278:	2101      	movs	r1, #1
    927a:	4821      	ldr	r0, [pc, #132]	; (9300 <spi_flash_enable+0xd4>)
    927c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    927e:	2100      	movs	r1, #0
    9280:	4820      	ldr	r0, [pc, #128]	; (9304 <spi_flash_enable+0xd8>)
    9282:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    9284:	2181      	movs	r1, #129	; 0x81
    9286:	4820      	ldr	r0, [pc, #128]	; (9308 <spi_flash_enable+0xdc>)
    9288:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    928a:	4e20      	ldr	r6, [pc, #128]	; (930c <spi_flash_enable+0xe0>)
    928c:	4c20      	ldr	r4, [pc, #128]	; (9310 <spi_flash_enable+0xe4>)
    928e:	0030      	movs	r0, r6
    9290:	47a0      	blx	r4
    9292:	2801      	cmp	r0, #1
    9294:	d1fb      	bne.n	928e <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    9296:	4b15      	ldr	r3, [pc, #84]	; (92ec <spi_flash_enable+0xc0>)
    9298:	9a01      	ldr	r2, [sp, #4]
    929a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    929c:	2180      	movs	r1, #128	; 0x80
    929e:	0249      	lsls	r1, r1, #9
    92a0:	4319      	orrs	r1, r3
    92a2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    92a4:	480f      	ldr	r0, [pc, #60]	; (92e4 <spi_flash_enable+0xb8>)
    92a6:	4b13      	ldr	r3, [pc, #76]	; (92f4 <spi_flash_enable+0xc8>)
    92a8:	4798      	blx	r3
    92aa:	e7ca      	b.n	9242 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    92ac:	2100      	movs	r1, #0
    92ae:	4812      	ldr	r0, [pc, #72]	; (92f8 <spi_flash_enable+0xcc>)
    92b0:	4c10      	ldr	r4, [pc, #64]	; (92f4 <spi_flash_enable+0xc8>)
    92b2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    92b4:	21b9      	movs	r1, #185	; 0xb9
    92b6:	4811      	ldr	r0, [pc, #68]	; (92fc <spi_flash_enable+0xd0>)
    92b8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    92ba:	2101      	movs	r1, #1
    92bc:	4810      	ldr	r0, [pc, #64]	; (9300 <spi_flash_enable+0xd4>)
    92be:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    92c0:	2100      	movs	r1, #0
    92c2:	4810      	ldr	r0, [pc, #64]	; (9304 <spi_flash_enable+0xd8>)
    92c4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    92c6:	2181      	movs	r1, #129	; 0x81
    92c8:	480f      	ldr	r0, [pc, #60]	; (9308 <spi_flash_enable+0xdc>)
    92ca:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    92cc:	4e0f      	ldr	r6, [pc, #60]	; (930c <spi_flash_enable+0xe0>)
    92ce:	4c10      	ldr	r4, [pc, #64]	; (9310 <spi_flash_enable+0xe4>)
    92d0:	0030      	movs	r0, r6
    92d2:	47a0      	blx	r4
    92d4:	2801      	cmp	r0, #1
    92d6:	d1fb      	bne.n	92d0 <spi_flash_enable+0xa4>
    92d8:	e7dd      	b.n	9296 <spi_flash_enable+0x6a>
    92da:	46c0      	nop			; (mov r8, r8)
    92dc:	000075a9 	.word	0x000075a9
    92e0:	0000039f 	.word	0x0000039f
    92e4:	00001410 	.word	0x00001410
    92e8:	000079f9 	.word	0x000079f9
    92ec:	f8888fff 	.word	0xf8888fff
    92f0:	01111000 	.word	0x01111000
    92f4:	00007a05 	.word	0x00007a05
    92f8:	00010208 	.word	0x00010208
    92fc:	0001020c 	.word	0x0001020c
    9300:	00010214 	.word	0x00010214
    9304:	0001021c 	.word	0x0001021c
    9308:	00010204 	.word	0x00010204
    930c:	00010218 	.word	0x00010218
    9310:	000079ed 	.word	0x000079ed

00009314 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    9314:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    9316:	2200      	movs	r2, #0
    9318:	2300      	movs	r3, #0
    931a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    931c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    931e:	2100      	movs	r1, #0
    9320:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    9322:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    9324:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    9326:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    9328:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    932a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    932c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    932e:	24c0      	movs	r4, #192	; 0xc0
    9330:	0164      	lsls	r4, r4, #5
    9332:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    9334:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    9336:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    9338:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    933a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    933c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    933e:	242a      	movs	r4, #42	; 0x2a
    9340:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    9342:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    9344:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    9346:	3c06      	subs	r4, #6
    9348:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    934a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    934c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    934e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    9350:	232b      	movs	r3, #43	; 0x2b
    9352:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    9354:	3301      	adds	r3, #1
    9356:	54c1      	strb	r1, [r0, r3]
}
    9358:	bd10      	pop	{r4, pc}
	...

0000935c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    935c:	b5f0      	push	{r4, r5, r6, r7, lr}
    935e:	46d6      	mov	lr, sl
    9360:	464f      	mov	r7, r9
    9362:	4646      	mov	r6, r8
    9364:	b5c0      	push	{r6, r7, lr}
    9366:	b096      	sub	sp, #88	; 0x58
    9368:	0007      	movs	r7, r0
    936a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    936c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    936e:	4acb      	ldr	r2, [pc, #812]	; (969c <adc_init+0x340>)
    9370:	6a10      	ldr	r0, [r2, #32]
    9372:	2380      	movs	r3, #128	; 0x80
    9374:	025b      	lsls	r3, r3, #9
    9376:	4303      	orrs	r3, r0
    9378:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    937a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    937c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    937e:	07db      	lsls	r3, r3, #31
    9380:	d505      	bpl.n	938e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    9382:	b016      	add	sp, #88	; 0x58
    9384:	bc1c      	pop	{r2, r3, r4}
    9386:	4690      	mov	r8, r2
    9388:	4699      	mov	r9, r3
    938a:	46a2      	mov	sl, r4
    938c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    938e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    9390:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    9392:	079b      	lsls	r3, r3, #30
    9394:	d4f5      	bmi.n	9382 <adc_init+0x26>
	module_inst->reference = config->reference;
    9396:	7873      	ldrb	r3, [r6, #1]
    9398:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    939a:	2b00      	cmp	r3, #0
    939c:	d104      	bne.n	93a8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    939e:	4ac0      	ldr	r2, [pc, #768]	; (96a0 <adc_init+0x344>)
    93a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
    93a2:	2104      	movs	r1, #4
    93a4:	430b      	orrs	r3, r1
    93a6:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
    93a8:	683b      	ldr	r3, [r7, #0]
    93aa:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    93ac:	7833      	ldrb	r3, [r6, #0]
    93ae:	466a      	mov	r2, sp
    93b0:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    93b2:	4669      	mov	r1, sp
    93b4:	201e      	movs	r0, #30
    93b6:	4bbb      	ldr	r3, [pc, #748]	; (96a4 <adc_init+0x348>)
    93b8:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    93ba:	201e      	movs	r0, #30
    93bc:	4bba      	ldr	r3, [pc, #744]	; (96a8 <adc_init+0x34c>)
    93be:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    93c0:	232c      	movs	r3, #44	; 0x2c
    93c2:	5cf2      	ldrb	r2, [r6, r3]
    93c4:	2a00      	cmp	r2, #0
    93c6:	d054      	beq.n	9472 <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
    93c8:	3b01      	subs	r3, #1
    93ca:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    93cc:	7b33      	ldrb	r3, [r6, #12]
    93ce:	18eb      	adds	r3, r5, r3
    93d0:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    93d2:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    93d4:	b2c9      	uxtb	r1, r1
    93d6:	428b      	cmp	r3, r1
    93d8:	d221      	bcs.n	941e <adc_init+0xc2>
    93da:	1952      	adds	r2, r2, r5
    93dc:	b2d3      	uxtb	r3, r2
    93de:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    93e0:	4bb2      	ldr	r3, [pc, #712]	; (96ac <adc_init+0x350>)
    93e2:	469a      	mov	sl, r3
    93e4:	e003      	b.n	93ee <adc_init+0x92>
			offset++;
    93e6:	3501      	adds	r5, #1
    93e8:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    93ea:	45a9      	cmp	r9, r5
    93ec:	d017      	beq.n	941e <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    93ee:	240f      	movs	r4, #15
    93f0:	402c      	ands	r4, r5
    93f2:	7b33      	ldrb	r3, [r6, #12]
    93f4:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    93f6:	2250      	movs	r2, #80	; 0x50
    93f8:	49ad      	ldr	r1, [pc, #692]	; (96b0 <adc_init+0x354>)
    93fa:	a802      	add	r0, sp, #8
    93fc:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    93fe:	2c13      	cmp	r4, #19
    9400:	d8f1      	bhi.n	93e6 <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    9402:	00a4      	lsls	r4, r4, #2
    9404:	ab02      	add	r3, sp, #8
    9406:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9408:	a901      	add	r1, sp, #4
    940a:	2300      	movs	r3, #0
    940c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    940e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    9410:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    9412:	3301      	adds	r3, #1
    9414:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    9416:	b2c0      	uxtb	r0, r0
    9418:	4ba6      	ldr	r3, [pc, #664]	; (96b4 <adc_init+0x358>)
    941a:	4798      	blx	r3
    941c:	e7e3      	b.n	93e6 <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
    941e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    9420:	2250      	movs	r2, #80	; 0x50
    9422:	49a3      	ldr	r1, [pc, #652]	; (96b0 <adc_init+0x354>)
    9424:	a802      	add	r0, sp, #8
    9426:	4ba1      	ldr	r3, [pc, #644]	; (96ac <adc_init+0x350>)
    9428:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    942a:	2c13      	cmp	r4, #19
    942c:	d913      	bls.n	9456 <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    942e:	7d73      	ldrb	r3, [r6, #21]
    9430:	009b      	lsls	r3, r3, #2
    9432:	b2db      	uxtb	r3, r3
    9434:	4642      	mov	r2, r8
    9436:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    9438:	7db3      	ldrb	r3, [r6, #22]
    943a:	01db      	lsls	r3, r3, #7
    943c:	7872      	ldrb	r2, [r6, #1]
    943e:	4313      	orrs	r3, r2
    9440:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    9442:	4642      	mov	r2, r8
    9444:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    9446:	7933      	ldrb	r3, [r6, #4]
    9448:	2b34      	cmp	r3, #52	; 0x34
    944a:	d900      	bls.n	944e <adc_init+0xf2>
    944c:	e178      	b.n	9740 <adc_init+0x3e4>
    944e:	009b      	lsls	r3, r3, #2
    9450:	4a99      	ldr	r2, [pc, #612]	; (96b8 <adc_init+0x35c>)
    9452:	58d3      	ldr	r3, [r2, r3]
    9454:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    9456:	00a4      	lsls	r4, r4, #2
    9458:	ab02      	add	r3, sp, #8
    945a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    945c:	a901      	add	r1, sp, #4
    945e:	2300      	movs	r3, #0
    9460:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    9462:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    9464:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    9466:	3301      	adds	r3, #1
    9468:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    946a:	b2c0      	uxtb	r0, r0
    946c:	4b91      	ldr	r3, [pc, #580]	; (96b4 <adc_init+0x358>)
    946e:	4798      	blx	r3
    9470:	e7dd      	b.n	942e <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
    9472:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    9474:	2250      	movs	r2, #80	; 0x50
    9476:	498e      	ldr	r1, [pc, #568]	; (96b0 <adc_init+0x354>)
    9478:	a802      	add	r0, sp, #8
    947a:	4b8c      	ldr	r3, [pc, #560]	; (96ac <adc_init+0x350>)
    947c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    947e:	2c13      	cmp	r4, #19
    9480:	d915      	bls.n	94ae <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
    9482:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    9484:	2250      	movs	r2, #80	; 0x50
    9486:	498a      	ldr	r1, [pc, #552]	; (96b0 <adc_init+0x354>)
    9488:	a802      	add	r0, sp, #8
    948a:	4b88      	ldr	r3, [pc, #544]	; (96ac <adc_init+0x350>)
    948c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    948e:	2c13      	cmp	r4, #19
    9490:	d8cd      	bhi.n	942e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    9492:	00a4      	lsls	r4, r4, #2
    9494:	ab02      	add	r3, sp, #8
    9496:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9498:	a901      	add	r1, sp, #4
    949a:	2300      	movs	r3, #0
    949c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    949e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    94a0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    94a2:	3301      	adds	r3, #1
    94a4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    94a6:	b2c0      	uxtb	r0, r0
    94a8:	4b82      	ldr	r3, [pc, #520]	; (96b4 <adc_init+0x358>)
    94aa:	4798      	blx	r3
    94ac:	e7bf      	b.n	942e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    94ae:	00a4      	lsls	r4, r4, #2
    94b0:	ab02      	add	r3, sp, #8
    94b2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    94b4:	a901      	add	r1, sp, #4
    94b6:	2300      	movs	r3, #0
    94b8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    94ba:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    94bc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    94be:	3301      	adds	r3, #1
    94c0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    94c2:	b2c0      	uxtb	r0, r0
    94c4:	4b7b      	ldr	r3, [pc, #492]	; (96b4 <adc_init+0x358>)
    94c6:	4798      	blx	r3
    94c8:	e7db      	b.n	9482 <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    94ca:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    94cc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    94ce:	2102      	movs	r1, #2
    94d0:	e01a      	b.n	9508 <adc_init+0x1ac>
		adjres = config->divide_result;
    94d2:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    94d4:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    94d6:	2410      	movs	r4, #16
    94d8:	e016      	b.n	9508 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    94da:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    94dc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    94de:	2101      	movs	r1, #1
    94e0:	e012      	b.n	9508 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    94e2:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    94e4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    94e6:	2100      	movs	r1, #0
    94e8:	e00e      	b.n	9508 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    94ea:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    94ec:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    94ee:	2100      	movs	r1, #0
    94f0:	e00a      	b.n	9508 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    94f2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    94f4:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    94f6:	2100      	movs	r1, #0
    94f8:	e006      	b.n	9508 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    94fa:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    94fc:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    94fe:	2100      	movs	r1, #0
    9500:	e002      	b.n	9508 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    9502:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    9504:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    9506:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    9508:	0109      	lsls	r1, r1, #4
    950a:	2270      	movs	r2, #112	; 0x70
    950c:	400a      	ands	r2, r1
    950e:	4313      	orrs	r3, r2
    9510:	4642      	mov	r2, r8
    9512:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    9514:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    9516:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    9518:	2b3f      	cmp	r3, #63	; 0x3f
    951a:	d900      	bls.n	951e <adc_init+0x1c2>
    951c:	e731      	b.n	9382 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    951e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    9520:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    9522:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    9524:	b25b      	sxtb	r3, r3
    9526:	2b00      	cmp	r3, #0
    9528:	dbfb      	blt.n	9522 <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    952a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    952c:	8872      	ldrh	r2, [r6, #2]
    952e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    9530:	2224      	movs	r2, #36	; 0x24
    9532:	5cb2      	ldrb	r2, [r6, r2]
    9534:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    9536:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    9538:	7d32      	ldrb	r2, [r6, #20]
    953a:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    953c:	4313      	orrs	r3, r2
    953e:	7cb2      	ldrb	r2, [r6, #18]
    9540:	0052      	lsls	r2, r2, #1
    9542:	4313      	orrs	r3, r2
    9544:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    9546:	4642      	mov	r2, r8
    9548:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    954a:	7e33      	ldrb	r3, [r6, #24]
    954c:	2b00      	cmp	r3, #0
    954e:	d020      	beq.n	9592 <adc_init+0x236>
		switch (resolution) {
    9550:	2c10      	cmp	r4, #16
    9552:	d100      	bne.n	9556 <adc_init+0x1fa>
    9554:	e0d6      	b.n	9704 <adc_init+0x3a8>
    9556:	d800      	bhi.n	955a <adc_init+0x1fe>
    9558:	e080      	b.n	965c <adc_init+0x300>
    955a:	2c20      	cmp	r4, #32
    955c:	d100      	bne.n	9560 <adc_init+0x204>
    955e:	e0b3      	b.n	96c8 <adc_init+0x36c>
    9560:	2c30      	cmp	r4, #48	; 0x30
    9562:	d116      	bne.n	9592 <adc_init+0x236>
			if (config->differential_mode &&
    9564:	7cf2      	ldrb	r2, [r6, #19]
    9566:	2a00      	cmp	r2, #0
    9568:	d00a      	beq.n	9580 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
    956a:	69f2      	ldr	r2, [r6, #28]
    956c:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    956e:	2017      	movs	r0, #23
			if (config->differential_mode &&
    9570:	2aff      	cmp	r2, #255	; 0xff
    9572:	d900      	bls.n	9576 <adc_init+0x21a>
    9574:	e705      	b.n	9382 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    9576:	6a32      	ldr	r2, [r6, #32]
    9578:	3280      	adds	r2, #128	; 0x80
    957a:	2aff      	cmp	r2, #255	; 0xff
    957c:	d900      	bls.n	9580 <adc_init+0x224>
    957e:	e700      	b.n	9382 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    9580:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    9582:	69f2      	ldr	r2, [r6, #28]
    9584:	2aff      	cmp	r2, #255	; 0xff
    9586:	dd00      	ble.n	958a <adc_init+0x22e>
    9588:	e6fb      	b.n	9382 <adc_init+0x26>
    958a:	6a32      	ldr	r2, [r6, #32]
    958c:	2aff      	cmp	r2, #255	; 0xff
    958e:	dd00      	ble.n	9592 <adc_init+0x236>
    9590:	e6f7      	b.n	9382 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    9592:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    9594:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    9596:	b252      	sxtb	r2, r2
    9598:	2a00      	cmp	r2, #0
    959a:	dbfb      	blt.n	9594 <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
    959c:	4642      	mov	r2, r8
    959e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    95a0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    95a2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    95a4:	b25b      	sxtb	r3, r3
    95a6:	2b00      	cmp	r3, #0
    95a8:	dbfb      	blt.n	95a2 <adc_init+0x246>
	adc_module->WINLT.reg =
    95aa:	8bb3      	ldrh	r3, [r6, #28]
    95ac:	4642      	mov	r2, r8
    95ae:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    95b0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    95b2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    95b4:	b25b      	sxtb	r3, r3
    95b6:	2b00      	cmp	r3, #0
    95b8:	dbfb      	blt.n	95b2 <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    95ba:	8c33      	ldrh	r3, [r6, #32]
    95bc:	4642      	mov	r2, r8
    95be:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    95c0:	232c      	movs	r3, #44	; 0x2c
    95c2:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    95c4:	2b00      	cmp	r3, #0
    95c6:	d005      	beq.n	95d4 <adc_init+0x278>
		inputs_to_scan--;
    95c8:	3b01      	subs	r3, #1
    95ca:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    95cc:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    95ce:	2b0f      	cmp	r3, #15
    95d0:	d900      	bls.n	95d4 <adc_init+0x278>
    95d2:	e6d6      	b.n	9382 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    95d4:	222b      	movs	r2, #43	; 0x2b
    95d6:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    95d8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    95da:	290f      	cmp	r1, #15
    95dc:	d900      	bls.n	95e0 <adc_init+0x284>
    95de:	e6d0      	b.n	9382 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    95e0:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    95e2:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    95e4:	b252      	sxtb	r2, r2
    95e6:	2a00      	cmp	r2, #0
    95e8:	dbfb      	blt.n	95e2 <adc_init+0x286>
			config->negative_input |
    95ea:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    95ec:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    95ee:	4302      	orrs	r2, r0
    95f0:	68b0      	ldr	r0, [r6, #8]
    95f2:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    95f4:	0509      	lsls	r1, r1, #20
			config->negative_input |
    95f6:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    95f8:	041b      	lsls	r3, r3, #16
			config->negative_input |
    95fa:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    95fc:	4642      	mov	r2, r8
    95fe:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    9600:	232a      	movs	r3, #42	; 0x2a
    9602:	5cf3      	ldrb	r3, [r6, r3]
    9604:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    9606:	230f      	movs	r3, #15
    9608:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    960a:	3315      	adds	r3, #21
    960c:	5cf3      	ldrb	r3, [r6, r3]
    960e:	2b00      	cmp	r3, #0
    9610:	d012      	beq.n	9638 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    9612:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    9614:	4a29      	ldr	r2, [pc, #164]	; (96bc <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
    9616:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    9618:	4293      	cmp	r3, r2
    961a:	d900      	bls.n	961e <adc_init+0x2c2>
    961c:	e6b1      	b.n	9382 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    961e:	4642      	mov	r2, r8
    9620:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    9622:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    9624:	2380      	movs	r3, #128	; 0x80
    9626:	011b      	lsls	r3, r3, #4
    9628:	18d3      	adds	r3, r2, r3
    962a:	4924      	ldr	r1, [pc, #144]	; (96bc <adc_init+0x360>)
    962c:	b29b      	uxth	r3, r3
    962e:	428b      	cmp	r3, r1
    9630:	d900      	bls.n	9634 <adc_init+0x2d8>
    9632:	e6a6      	b.n	9382 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    9634:	4643      	mov	r3, r8
    9636:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    9638:	4b21      	ldr	r3, [pc, #132]	; (96c0 <adc_init+0x364>)
    963a:	681b      	ldr	r3, [r3, #0]
    963c:	015b      	lsls	r3, r3, #5
    963e:	22e0      	movs	r2, #224	; 0xe0
    9640:	00d2      	lsls	r2, r2, #3
    9642:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    9644:	4a1f      	ldr	r2, [pc, #124]	; (96c4 <adc_init+0x368>)
    9646:	6851      	ldr	r1, [r2, #4]
    9648:	0149      	lsls	r1, r1, #5
    964a:	6812      	ldr	r2, [r2, #0]
    964c:	0ed2      	lsrs	r2, r2, #27
    964e:	430a      	orrs	r2, r1
    9650:	b2d2      	uxtb	r2, r2
			) |
    9652:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    9654:	4642      	mov	r2, r8
    9656:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    9658:	2000      	movs	r0, #0
    965a:	e692      	b.n	9382 <adc_init+0x26>
		switch (resolution) {
    965c:	2c00      	cmp	r4, #0
    965e:	d198      	bne.n	9592 <adc_init+0x236>
			if (config->differential_mode &&
    9660:	7cf2      	ldrb	r2, [r6, #19]
    9662:	2a00      	cmp	r2, #0
    9664:	d00f      	beq.n	9686 <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
    9666:	69f2      	ldr	r2, [r6, #28]
    9668:	2180      	movs	r1, #128	; 0x80
    966a:	0109      	lsls	r1, r1, #4
    966c:	468c      	mov	ip, r1
    966e:	4462      	add	r2, ip
			if (config->differential_mode &&
    9670:	4912      	ldr	r1, [pc, #72]	; (96bc <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
    9672:	2017      	movs	r0, #23
			if (config->differential_mode &&
    9674:	428a      	cmp	r2, r1
    9676:	d900      	bls.n	967a <adc_init+0x31e>
    9678:	e683      	b.n	9382 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    967a:	6a32      	ldr	r2, [r6, #32]
    967c:	4462      	add	r2, ip
    967e:	490f      	ldr	r1, [pc, #60]	; (96bc <adc_init+0x360>)
    9680:	428a      	cmp	r2, r1
    9682:	d900      	bls.n	9686 <adc_init+0x32a>
    9684:	e67d      	b.n	9382 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    9686:	4a0d      	ldr	r2, [pc, #52]	; (96bc <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
    9688:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    968a:	69f1      	ldr	r1, [r6, #28]
    968c:	4291      	cmp	r1, r2
    968e:	dd00      	ble.n	9692 <adc_init+0x336>
    9690:	e677      	b.n	9382 <adc_init+0x26>
    9692:	6a31      	ldr	r1, [r6, #32]
    9694:	4291      	cmp	r1, r2
    9696:	dd00      	ble.n	969a <adc_init+0x33e>
    9698:	e673      	b.n	9382 <adc_init+0x26>
    969a:	e77a      	b.n	9592 <adc_init+0x236>
    969c:	40000400 	.word	0x40000400
    96a0:	40000800 	.word	0x40000800
    96a4:	0000e2d1 	.word	0x0000e2d1
    96a8:	0000e245 	.word	0x0000e245
    96ac:	0000e891 	.word	0x0000e891
    96b0:	00015960 	.word	0x00015960
    96b4:	0000e3c9 	.word	0x0000e3c9
    96b8:	0001588c 	.word	0x0001588c
    96bc:	00000fff 	.word	0x00000fff
    96c0:	00806024 	.word	0x00806024
    96c4:	00806020 	.word	0x00806020
			if (config->differential_mode &&
    96c8:	7cf2      	ldrb	r2, [r6, #19]
    96ca:	2a00      	cmp	r2, #0
    96cc:	d00f      	beq.n	96ee <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
    96ce:	69f2      	ldr	r2, [r6, #28]
    96d0:	2180      	movs	r1, #128	; 0x80
    96d2:	0089      	lsls	r1, r1, #2
    96d4:	468c      	mov	ip, r1
    96d6:	4462      	add	r2, ip
			if (config->differential_mode &&
    96d8:	491a      	ldr	r1, [pc, #104]	; (9744 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
    96da:	2017      	movs	r0, #23
			if (config->differential_mode &&
    96dc:	428a      	cmp	r2, r1
    96de:	d900      	bls.n	96e2 <adc_init+0x386>
    96e0:	e64f      	b.n	9382 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    96e2:	6a32      	ldr	r2, [r6, #32]
    96e4:	4462      	add	r2, ip
    96e6:	4917      	ldr	r1, [pc, #92]	; (9744 <adc_init+0x3e8>)
    96e8:	428a      	cmp	r2, r1
    96ea:	d900      	bls.n	96ee <adc_init+0x392>
    96ec:	e649      	b.n	9382 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    96ee:	4a15      	ldr	r2, [pc, #84]	; (9744 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
    96f0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    96f2:	69f1      	ldr	r1, [r6, #28]
    96f4:	4291      	cmp	r1, r2
    96f6:	dd00      	ble.n	96fa <adc_init+0x39e>
    96f8:	e643      	b.n	9382 <adc_init+0x26>
    96fa:	6a31      	ldr	r1, [r6, #32]
    96fc:	4291      	cmp	r1, r2
    96fe:	dd00      	ble.n	9702 <adc_init+0x3a6>
    9700:	e63f      	b.n	9382 <adc_init+0x26>
    9702:	e746      	b.n	9592 <adc_init+0x236>
			if (config->differential_mode &&
    9704:	7cf2      	ldrb	r2, [r6, #19]
    9706:	2a00      	cmp	r2, #0
    9708:	d00f      	beq.n	972a <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
    970a:	69f2      	ldr	r2, [r6, #28]
    970c:	2180      	movs	r1, #128	; 0x80
    970e:	0209      	lsls	r1, r1, #8
    9710:	468c      	mov	ip, r1
    9712:	4462      	add	r2, ip
			if (config->differential_mode &&
    9714:	490c      	ldr	r1, [pc, #48]	; (9748 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
    9716:	2017      	movs	r0, #23
			if (config->differential_mode &&
    9718:	428a      	cmp	r2, r1
    971a:	d900      	bls.n	971e <adc_init+0x3c2>
    971c:	e631      	b.n	9382 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    971e:	6a32      	ldr	r2, [r6, #32]
    9720:	4462      	add	r2, ip
    9722:	4909      	ldr	r1, [pc, #36]	; (9748 <adc_init+0x3ec>)
    9724:	428a      	cmp	r2, r1
    9726:	d900      	bls.n	972a <adc_init+0x3ce>
    9728:	e62b      	b.n	9382 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    972a:	4a07      	ldr	r2, [pc, #28]	; (9748 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
    972c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    972e:	69f1      	ldr	r1, [r6, #28]
    9730:	4291      	cmp	r1, r2
    9732:	dd00      	ble.n	9736 <adc_init+0x3da>
    9734:	e625      	b.n	9382 <adc_init+0x26>
    9736:	6a31      	ldr	r1, [r6, #32]
    9738:	4291      	cmp	r1, r2
    973a:	dd00      	ble.n	973e <adc_init+0x3e2>
    973c:	e621      	b.n	9382 <adc_init+0x26>
    973e:	e728      	b.n	9592 <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
    9740:	2017      	movs	r0, #23
    9742:	e61e      	b.n	9382 <adc_init+0x26>
    9744:	000003ff 	.word	0x000003ff
    9748:	0000ffff 	.word	0x0000ffff

0000974c <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    974e:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    9750:	2041      	movs	r0, #65	; 0x41
    9752:	5c23      	ldrb	r3, [r4, r0]
    9754:	2501      	movs	r5, #1
    9756:	432b      	orrs	r3, r5
    9758:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    975a:	b292      	uxth	r2, r2
    975c:	2000      	movs	r0, #0
    975e:	5620      	ldrsb	r0, [r4, r0]
    9760:	2300      	movs	r3, #0
    9762:	4d12      	ldr	r5, [pc, #72]	; (97ac <_http_client_send_wait+0x60>)
    9764:	47a8      	blx	r5
    9766:	2800      	cmp	r0, #0
    9768:	db16      	blt.n	9798 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    976a:	2341      	movs	r3, #65	; 0x41
    976c:	5ce3      	ldrb	r3, [r4, r3]
    976e:	07db      	lsls	r3, r3, #31
    9770:	d518      	bpl.n	97a4 <_http_client_send_wait+0x58>
    9772:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    9774:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9776:	2b02      	cmp	r3, #2
    9778:	d917      	bls.n	97aa <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    977a:	4f0d      	ldr	r7, [pc, #52]	; (97b0 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    977c:	4e0d      	ldr	r6, [pc, #52]	; (97b4 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    977e:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    9780:	2000      	movs	r0, #0
    9782:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    9784:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9786:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9788:	5d63      	ldrb	r3, [r4, r5]
    978a:	07db      	lsls	r3, r3, #31
    978c:	d50c      	bpl.n	97a8 <_http_client_send_wait+0x5c>
    978e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9790:	2b02      	cmp	r3, #2
    9792:	d8f5      	bhi.n	9780 <_http_client_send_wait+0x34>
	return 0;
    9794:	2000      	movs	r0, #0
    9796:	e008      	b.n	97aa <_http_client_send_wait+0x5e>
		module->sending = 0;
    9798:	2241      	movs	r2, #65	; 0x41
    979a:	5ca3      	ldrb	r3, [r4, r2]
    979c:	2101      	movs	r1, #1
    979e:	438b      	bics	r3, r1
    97a0:	54a3      	strb	r3, [r4, r2]
		return result;
    97a2:	e002      	b.n	97aa <_http_client_send_wait+0x5e>
	return 0;
    97a4:	2000      	movs	r0, #0
    97a6:	e000      	b.n	97aa <_http_client_send_wait+0x5e>
    97a8:	2000      	movs	r0, #0
}
    97aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    97ac:	00008fbd 	.word	0x00008fbd
    97b0:	00007259 	.word	0x00007259
    97b4:	0000a8e1 	.word	0x0000a8e1

000097b8 <http_client_get_config_defaults>:
	config->port = 80;
    97b8:	2350      	movs	r3, #80	; 0x50
    97ba:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    97bc:	2300      	movs	r3, #0
    97be:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    97c0:	4a05      	ldr	r2, [pc, #20]	; (97d8 <http_client_get_config_defaults+0x20>)
    97c2:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    97c4:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    97c6:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    97c8:	3301      	adds	r3, #1
    97ca:	33ff      	adds	r3, #255	; 0xff
    97cc:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    97ce:	3bae      	subs	r3, #174	; 0xae
    97d0:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    97d2:	4b02      	ldr	r3, [pc, #8]	; (97dc <http_client_get_config_defaults+0x24>)
    97d4:	6183      	str	r3, [r0, #24]
}
    97d6:	4770      	bx	lr
    97d8:	00004e20 	.word	0x00004e20
    97dc:	00015b78 	.word	0x00015b78

000097e0 <http_client_init>:
{
    97e0:	b570      	push	{r4, r5, r6, lr}
    97e2:	0004      	movs	r4, r0
    97e4:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    97e6:	2800      	cmp	r0, #0
    97e8:	d038      	beq.n	985c <http_client_init+0x7c>
    97ea:	2900      	cmp	r1, #0
    97ec:	d039      	beq.n	9862 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    97ee:	690b      	ldr	r3, [r1, #16]
    97f0:	2b00      	cmp	r3, #0
    97f2:	d039      	beq.n	9868 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    97f4:	684b      	ldr	r3, [r1, #4]
    97f6:	2b00      	cmp	r3, #0
    97f8:	d039      	beq.n	986e <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    97fa:	694b      	ldr	r3, [r1, #20]
    97fc:	2b51      	cmp	r3, #81	; 0x51
    97fe:	d939      	bls.n	9874 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    9800:	22e8      	movs	r2, #232	; 0xe8
    9802:	2100      	movs	r1, #0
    9804:	4b1e      	ldr	r3, [pc, #120]	; (9880 <http_client_init+0xa0>)
    9806:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    9808:	0020      	movs	r0, r4
    980a:	3050      	adds	r0, #80	; 0x50
    980c:	221c      	movs	r2, #28
    980e:	0029      	movs	r1, r5
    9810:	4b1c      	ldr	r3, [pc, #112]	; (9884 <http_client_init+0xa4>)
    9812:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    9814:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    9816:	2b00      	cmp	r3, #0
    9818:	d008      	beq.n	982c <http_client_init+0x4c>
	if (config->timeout > 0) {
    981a:	892b      	ldrh	r3, [r5, #8]
    981c:	2b00      	cmp	r3, #0
    981e:	d111      	bne.n	9844 <http_client_init+0x64>
	module->req.state = STATE_INIT;
    9820:	2300      	movs	r3, #0
    9822:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    9824:	22d8      	movs	r2, #216	; 0xd8
    9826:	50a3      	str	r3, [r4, r2]
	return 0;
    9828:	2000      	movs	r0, #0
}
    982a:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    982c:	6928      	ldr	r0, [r5, #16]
    982e:	4b16      	ldr	r3, [pc, #88]	; (9888 <http_client_init+0xa8>)
    9830:	4798      	blx	r3
    9832:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    9834:	2800      	cmp	r0, #0
    9836:	d020      	beq.n	987a <http_client_init+0x9a>
		module->alloc_buffer = 1;
    9838:	2241      	movs	r2, #65	; 0x41
    983a:	5ca3      	ldrb	r3, [r4, r2]
    983c:	2104      	movs	r1, #4
    983e:	430b      	orrs	r3, r1
    9840:	54a3      	strb	r3, [r4, r2]
    9842:	e7ea      	b.n	981a <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    9844:	6868      	ldr	r0, [r5, #4]
    9846:	2300      	movs	r3, #0
    9848:	0022      	movs	r2, r4
    984a:	4910      	ldr	r1, [pc, #64]	; (988c <http_client_init+0xac>)
    984c:	4d10      	ldr	r5, [pc, #64]	; (9890 <http_client_init+0xb0>)
    984e:	47a8      	blx	r5
    9850:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    9852:	2800      	cmp	r0, #0
    9854:	dae4      	bge.n	9820 <http_client_init+0x40>
			return -ENOSPC;
    9856:	201c      	movs	r0, #28
    9858:	4240      	negs	r0, r0
    985a:	e7e6      	b.n	982a <http_client_init+0x4a>
		return -EINVAL;
    985c:	2016      	movs	r0, #22
    985e:	4240      	negs	r0, r0
    9860:	e7e3      	b.n	982a <http_client_init+0x4a>
    9862:	2016      	movs	r0, #22
    9864:	4240      	negs	r0, r0
    9866:	e7e0      	b.n	982a <http_client_init+0x4a>
		return -EINVAL;
    9868:	2016      	movs	r0, #22
    986a:	4240      	negs	r0, r0
    986c:	e7dd      	b.n	982a <http_client_init+0x4a>
		return -EINVAL;
    986e:	2016      	movs	r0, #22
    9870:	4240      	negs	r0, r0
    9872:	e7da      	b.n	982a <http_client_init+0x4a>
		return -EINVAL;
    9874:	2016      	movs	r0, #22
    9876:	4240      	negs	r0, r0
    9878:	e7d7      	b.n	982a <http_client_init+0x4a>
			return -ENOMEM;
    987a:	200c      	movs	r0, #12
    987c:	4240      	negs	r0, r0
    987e:	e7d4      	b.n	982a <http_client_init+0x4a>
    9880:	0000e8c7 	.word	0x0000e8c7
    9884:	0000e891 	.word	0x0000e891
    9888:	0000e845 	.word	0x0000e845
    988c:	000099a5 	.word	0x000099a5
    9890:	0000a86d 	.word	0x0000a86d

00009894 <http_client_register_callback>:
	if (module == NULL) {
    9894:	2800      	cmp	r0, #0
    9896:	d002      	beq.n	989e <http_client_register_callback+0xa>
	module->cb = callback;
    9898:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    989a:	2000      	movs	r0, #0
}
    989c:	4770      	bx	lr
		return -EINVAL;
    989e:	2016      	movs	r0, #22
    98a0:	4240      	negs	r0, r0
    98a2:	e7fb      	b.n	989c <http_client_register_callback+0x8>

000098a4 <_http_client_clear_conn>:
{
    98a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    98a6:	b085      	sub	sp, #20
    98a8:	0004      	movs	r4, r0
    98aa:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    98ac:	23c0      	movs	r3, #192	; 0xc0
    98ae:	58c3      	ldr	r3, [r0, r3]
    98b0:	2b00      	cmp	r3, #0
    98b2:	d002      	beq.n	98ba <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    98b4:	22c4      	movs	r2, #196	; 0xc4
    98b6:	5880      	ldr	r0, [r0, r2]
    98b8:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    98ba:	0020      	movs	r0, r4
    98bc:	30b0      	adds	r0, #176	; 0xb0
    98be:	2218      	movs	r2, #24
    98c0:	2100      	movs	r1, #0
    98c2:	4b17      	ldr	r3, [pc, #92]	; (9920 <_http_client_clear_conn+0x7c>)
    98c4:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    98c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    98c8:	2b00      	cmp	r3, #0
    98ca:	d124      	bne.n	9916 <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    98cc:	2300      	movs	r3, #0
    98ce:	56e3      	ldrsb	r3, [r4, r3]
    98d0:	009b      	lsls	r3, r3, #2
    98d2:	2500      	movs	r5, #0
    98d4:	4a13      	ldr	r2, [pc, #76]	; (9924 <_http_client_clear_conn+0x80>)
    98d6:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    98d8:	0020      	movs	r0, r4
    98da:	306c      	adds	r0, #108	; 0x6c
    98dc:	226c      	movs	r2, #108	; 0x6c
    98de:	2100      	movs	r1, #0
    98e0:	4f0f      	ldr	r7, [pc, #60]	; (9920 <_http_client_clear_conn+0x7c>)
    98e2:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    98e4:	0020      	movs	r0, r4
    98e6:	30d8      	adds	r0, #216	; 0xd8
    98e8:	2210      	movs	r2, #16
    98ea:	2100      	movs	r1, #0
    98ec:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    98ee:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    98f0:	23d8      	movs	r3, #216	; 0xd8
    98f2:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    98f4:	2241      	movs	r2, #65	; 0x41
    98f6:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    98f8:	2101      	movs	r1, #1
    98fa:	438b      	bics	r3, r1
    98fc:	3101      	adds	r1, #1
    98fe:	438b      	bics	r3, r1
    9900:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    9902:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    9904:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9906:	2b00      	cmp	r3, #0
    9908:	d003      	beq.n	9912 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    990a:	aa01      	add	r2, sp, #4
    990c:	3102      	adds	r1, #2
    990e:	0020      	movs	r0, r4
    9910:	4798      	blx	r3
}
    9912:	b005      	add	sp, #20
    9914:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    9916:	2000      	movs	r0, #0
    9918:	5620      	ldrsb	r0, [r4, r0]
    991a:	4b03      	ldr	r3, [pc, #12]	; (9928 <_http_client_clear_conn+0x84>)
    991c:	4798      	blx	r3
    991e:	e7d5      	b.n	98cc <_http_client_clear_conn+0x28>
    9920:	0000e8c7 	.word	0x0000e8c7
    9924:	2000022c 	.word	0x2000022c
    9928:	000090e9 	.word	0x000090e9

0000992c <http_client_socket_resolve_handler>:
{
    992c:	b5f0      	push	{r4, r5, r6, r7, lr}
    992e:	b087      	sub	sp, #28
    9930:	9000      	str	r0, [sp, #0]
    9932:	9101      	str	r1, [sp, #4]
    9934:	4c17      	ldr	r4, [pc, #92]	; (9994 <http_client_socket_resolve_handler+0x68>)
    9936:	0026      	movs	r6, r4
    9938:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    993a:	4f17      	ldr	r7, [pc, #92]	; (9998 <http_client_socket_resolve_handler+0x6c>)
    993c:	e015      	b.n	996a <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    993e:	2302      	movs	r3, #2
    9940:	aa02      	add	r2, sp, #8
    9942:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    9944:	334e      	adds	r3, #78	; 0x4e
    9946:	5aeb      	ldrh	r3, [r5, r3]
    9948:	021a      	lsls	r2, r3, #8
    994a:	0a1b      	lsrs	r3, r3, #8
    994c:	4313      	orrs	r3, r2
    994e:	aa02      	add	r2, sp, #8
    9950:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    9952:	9b01      	ldr	r3, [sp, #4]
    9954:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    9956:	2000      	movs	r0, #0
    9958:	5628      	ldrsb	r0, [r5, r0]
    995a:	2210      	movs	r2, #16
    995c:	a902      	add	r1, sp, #8
    995e:	4b0f      	ldr	r3, [pc, #60]	; (999c <http_client_socket_resolve_handler+0x70>)
    9960:	4798      	blx	r3
				return;
    9962:	e015      	b.n	9990 <http_client_socket_resolve_handler+0x64>
    9964:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    9966:	42b4      	cmp	r4, r6
    9968:	d012      	beq.n	9990 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    996a:	6825      	ldr	r5, [r4, #0]
    996c:	2d00      	cmp	r5, #0
    996e:	d0f9      	beq.n	9964 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    9970:	1c69      	adds	r1, r5, #1
    9972:	9800      	ldr	r0, [sp, #0]
    9974:	47b8      	blx	r7
    9976:	2800      	cmp	r0, #0
    9978:	d1f4      	bne.n	9964 <http_client_socket_resolve_handler+0x38>
    997a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    997c:	2b01      	cmp	r3, #1
    997e:	d1f1      	bne.n	9964 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    9980:	9b01      	ldr	r3, [sp, #4]
    9982:	2b00      	cmp	r3, #0
    9984:	d1db      	bne.n	993e <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    9986:	2176      	movs	r1, #118	; 0x76
    9988:	4249      	negs	r1, r1
    998a:	0028      	movs	r0, r5
    998c:	4b04      	ldr	r3, [pc, #16]	; (99a0 <http_client_socket_resolve_handler+0x74>)
    998e:	4798      	blx	r3
}
    9990:	b007      	add	sp, #28
    9992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9994:	2000022c 	.word	0x2000022c
    9998:	0000f60d 	.word	0x0000f60d
    999c:	00008f2d 	.word	0x00008f2d
    99a0:	000098a5 	.word	0x000098a5

000099a4 <http_client_timer_callback>:
{
    99a4:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    99a6:	2a00      	cmp	r2, #0
    99a8:	d004      	beq.n	99b4 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    99aa:	213e      	movs	r1, #62	; 0x3e
    99ac:	4249      	negs	r1, r1
    99ae:	0010      	movs	r0, r2
    99b0:	4b01      	ldr	r3, [pc, #4]	; (99b8 <http_client_timer_callback+0x14>)
    99b2:	4798      	blx	r3
}
    99b4:	bd10      	pop	{r4, pc}
    99b6:	46c0      	nop			; (mov r8, r8)
    99b8:	000098a5 	.word	0x000098a5

000099bc <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    99bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    99be:	46de      	mov	lr, fp
    99c0:	4657      	mov	r7, sl
    99c2:	b580      	push	{r7, lr}
    99c4:	b095      	sub	sp, #84	; 0x54
    99c6:	af02      	add	r7, sp, #8
    99c8:	0004      	movs	r4, r0
    99ca:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    99cc:	2310      	movs	r3, #16
    99ce:	2208      	movs	r2, #8
    99d0:	18ba      	adds	r2, r7, r2
    99d2:	18d2      	adds	r2, r2, r3
    99d4:	4bb1      	ldr	r3, [pc, #708]	; (9c9c <_http_client_request+0x2e0>)
    99d6:	cb23      	ldmia	r3!, {r0, r1, r5}
    99d8:	c223      	stmia	r2!, {r0, r1, r5}
    99da:	681b      	ldr	r3, [r3, #0]
    99dc:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    99de:	6e62      	ldr	r2, [r4, #100]	; 0x64
    99e0:	1dd3      	adds	r3, r2, #7
    99e2:	08db      	lsrs	r3, r3, #3
    99e4:	00db      	lsls	r3, r3, #3
    99e6:	4669      	mov	r1, sp
    99e8:	1acb      	subs	r3, r1, r3
    99ea:	469d      	mov	sp, r3
    99ec:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    99ee:	2c00      	cmp	r4, #0
    99f0:	d100      	bne.n	99f4 <_http_client_request+0x38>
    99f2:	e1f0      	b.n	9dd6 <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    99f4:	2341      	movs	r3, #65	; 0x41
    99f6:	5ce3      	ldrb	r3, [r4, r3]
    99f8:	07db      	lsls	r3, r3, #31
    99fa:	d500      	bpl.n	99fe <_http_client_request+0x42>
    99fc:	e1eb      	b.n	9dd6 <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    99fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9a00:	2b03      	cmp	r3, #3
    9a02:	d004      	beq.n	9a0e <_http_client_request+0x52>
    9a04:	2b04      	cmp	r3, #4
    9a06:	d100      	bne.n	9a0a <_http_client_request+0x4e>
    9a08:	e120      	b.n	9c4c <_http_client_request+0x290>
    9a0a:	46dd      	mov	sp, fp
    9a0c:	e1e4      	b.n	9dd8 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    9a0e:	2300      	movs	r3, #0
    9a10:	21cc      	movs	r1, #204	; 0xcc
    9a12:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    9a14:	3104      	adds	r1, #4
    9a16:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    9a18:	9400      	str	r4, [sp, #0]
    9a1a:	4ba1      	ldr	r3, [pc, #644]	; (9ca0 <_http_client_request+0x2e4>)
    9a1c:	0031      	movs	r1, r6
    9a1e:	202c      	movs	r0, #44	; 0x2c
    9a20:	2508      	movs	r5, #8
    9a22:	46ac      	mov	ip, r5
    9a24:	44bc      	add	ip, r7
    9a26:	4460      	add	r0, ip
    9a28:	4d9e      	ldr	r5, [pc, #632]	; (9ca4 <_http_client_request+0x2e8>)
    9a2a:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    9a2c:	23c8      	movs	r3, #200	; 0xc8
    9a2e:	5ce3      	ldrb	r3, [r4, r3]
    9a30:	2b01      	cmp	r3, #1
    9a32:	d100      	bne.n	9a36 <_http_client_request+0x7a>
    9a34:	e0a9      	b.n	9b8a <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    9a36:	2b02      	cmp	r3, #2
    9a38:	d100      	bne.n	9a3c <_http_client_request+0x80>
    9a3a:	e0af      	b.n	9b9c <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    9a3c:	2b03      	cmp	r3, #3
    9a3e:	d100      	bne.n	9a42 <_http_client_request+0x86>
    9a40:	e0b5      	b.n	9bae <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    9a42:	2b04      	cmp	r3, #4
    9a44:	d100      	bne.n	9a48 <_http_client_request+0x8c>
    9a46:	e0bb      	b.n	9bc0 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    9a48:	2b05      	cmp	r3, #5
    9a4a:	d100      	bne.n	9a4e <_http_client_request+0x92>
    9a4c:	e0c1      	b.n	9bd2 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    9a4e:	2b06      	cmp	r3, #6
    9a50:	d100      	bne.n	9a54 <_http_client_request+0x98>
    9a52:	e0c7      	b.n	9be4 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    9a54:	0025      	movs	r5, r4
    9a56:	3570      	adds	r5, #112	; 0x70
    9a58:	0028      	movs	r0, r5
    9a5a:	4b93      	ldr	r3, [pc, #588]	; (9ca8 <_http_client_request+0x2ec>)
    9a5c:	469a      	mov	sl, r3
    9a5e:	4798      	blx	r3
    9a60:	0002      	movs	r2, r0
    9a62:	0029      	movs	r1, r5
    9a64:	232c      	movs	r3, #44	; 0x2c
    9a66:	2008      	movs	r0, #8
    9a68:	1838      	adds	r0, r7, r0
    9a6a:	18c0      	adds	r0, r0, r3
    9a6c:	4d8f      	ldr	r5, [pc, #572]	; (9cac <_http_client_request+0x2f0>)
    9a6e:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    9a70:	220b      	movs	r2, #11
    9a72:	498f      	ldr	r1, [pc, #572]	; (9cb0 <_http_client_request+0x2f4>)
    9a74:	232c      	movs	r3, #44	; 0x2c
    9a76:	2008      	movs	r0, #8
    9a78:	1838      	adds	r0, r7, r0
    9a7a:	18c0      	adds	r0, r0, r3
    9a7c:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    9a7e:	220c      	movs	r2, #12
    9a80:	498c      	ldr	r1, [pc, #560]	; (9cb4 <_http_client_request+0x2f8>)
    9a82:	232c      	movs	r3, #44	; 0x2c
    9a84:	2008      	movs	r0, #8
    9a86:	1838      	adds	r0, r7, r0
    9a88:	18c0      	adds	r0, r0, r3
    9a8a:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    9a8c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    9a8e:	607b      	str	r3, [r7, #4]
    9a90:	0018      	movs	r0, r3
    9a92:	47d0      	blx	sl
    9a94:	0002      	movs	r2, r0
    9a96:	6879      	ldr	r1, [r7, #4]
    9a98:	232c      	movs	r3, #44	; 0x2c
    9a9a:	2008      	movs	r0, #8
    9a9c:	1838      	adds	r0, r7, r0
    9a9e:	18c0      	adds	r0, r0, r3
    9aa0:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9aa2:	2202      	movs	r2, #2
    9aa4:	4984      	ldr	r1, [pc, #528]	; (9cb8 <_http_client_request+0x2fc>)
    9aa6:	232c      	movs	r3, #44	; 0x2c
    9aa8:	2008      	movs	r0, #8
    9aaa:	1838      	adds	r0, r7, r0
    9aac:	18c0      	adds	r0, r0, r3
    9aae:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    9ab0:	2206      	movs	r2, #6
    9ab2:	4982      	ldr	r1, [pc, #520]	; (9cbc <_http_client_request+0x300>)
    9ab4:	232c      	movs	r3, #44	; 0x2c
    9ab6:	2008      	movs	r0, #8
    9ab8:	1838      	adds	r0, r7, r0
    9aba:	18c0      	adds	r0, r0, r3
    9abc:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    9abe:	1c63      	adds	r3, r4, #1
    9ac0:	607b      	str	r3, [r7, #4]
    9ac2:	0018      	movs	r0, r3
    9ac4:	47d0      	blx	sl
    9ac6:	0002      	movs	r2, r0
    9ac8:	6879      	ldr	r1, [r7, #4]
    9aca:	232c      	movs	r3, #44	; 0x2c
    9acc:	2008      	movs	r0, #8
    9ace:	1838      	adds	r0, r7, r0
    9ad0:	18c0      	adds	r0, r0, r3
    9ad2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9ad4:	2202      	movs	r2, #2
    9ad6:	4978      	ldr	r1, [pc, #480]	; (9cb8 <_http_client_request+0x2fc>)
    9ad8:	232c      	movs	r3, #44	; 0x2c
    9ada:	2008      	movs	r0, #8
    9adc:	1838      	adds	r0, r7, r0
    9ade:	18c0      	adds	r0, r0, r3
    9ae0:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    9ae2:	2218      	movs	r2, #24
    9ae4:	4976      	ldr	r1, [pc, #472]	; (9cc0 <_http_client_request+0x304>)
    9ae6:	232c      	movs	r3, #44	; 0x2c
    9ae8:	2008      	movs	r0, #8
    9aea:	1838      	adds	r0, r7, r0
    9aec:	18c0      	adds	r0, r0, r3
    9aee:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    9af0:	2213      	movs	r2, #19
    9af2:	4974      	ldr	r1, [pc, #464]	; (9cc4 <_http_client_request+0x308>)
    9af4:	232c      	movs	r3, #44	; 0x2c
    9af6:	2008      	movs	r0, #8
    9af8:	1838      	adds	r0, r7, r0
    9afa:	18c0      	adds	r0, r0, r3
    9afc:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    9afe:	2217      	movs	r2, #23
    9b00:	4971      	ldr	r1, [pc, #452]	; (9cc8 <_http_client_request+0x30c>)
    9b02:	232c      	movs	r3, #44	; 0x2c
    9b04:	2008      	movs	r0, #8
    9b06:	1838      	adds	r0, r7, r0
    9b08:	18c0      	adds	r0, r0, r3
    9b0a:	47a8      	blx	r5

		if (entity->read != NULL) {
    9b0c:	0023      	movs	r3, r4
    9b0e:	33b0      	adds	r3, #176	; 0xb0
    9b10:	68db      	ldr	r3, [r3, #12]
    9b12:	2b00      	cmp	r3, #0
    9b14:	d07b      	beq.n	9c0e <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    9b16:	23b0      	movs	r3, #176	; 0xb0
    9b18:	5ce3      	ldrb	r3, [r4, r3]
    9b1a:	2b00      	cmp	r3, #0
    9b1c:	d16b      	bne.n	9bf6 <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    9b1e:	0023      	movs	r3, r4
    9b20:	33b0      	adds	r3, #176	; 0xb0
    9b22:	689b      	ldr	r3, [r3, #8]
    9b24:	2b00      	cmp	r3, #0
    9b26:	d072      	beq.n	9c0e <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    9b28:	0022      	movs	r2, r4
    9b2a:	32b0      	adds	r2, #176	; 0xb0
    9b2c:	6950      	ldr	r0, [r2, #20]
    9b2e:	4798      	blx	r3
    9b30:	23cc      	movs	r3, #204	; 0xcc
    9b32:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    9b34:	2800      	cmp	r0, #0
    9b36:	da00      	bge.n	9b3a <_http_client_request+0x17e>
    9b38:	e0ac      	b.n	9c94 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    9b3a:	0002      	movs	r2, r0
    9b3c:	4963      	ldr	r1, [pc, #396]	; (9ccc <_http_client_request+0x310>)
    9b3e:	2320      	movs	r3, #32
    9b40:	2008      	movs	r0, #8
    9b42:	1838      	adds	r0, r7, r0
    9b44:	18c0      	adds	r0, r0, r3
    9b46:	4b62      	ldr	r3, [pc, #392]	; (9cd0 <_http_client_request+0x314>)
    9b48:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    9b4a:	2210      	movs	r2, #16
    9b4c:	4961      	ldr	r1, [pc, #388]	; (9cd4 <_http_client_request+0x318>)
    9b4e:	232c      	movs	r3, #44	; 0x2c
    9b50:	2008      	movs	r0, #8
    9b52:	1838      	adds	r0, r7, r0
    9b54:	18c0      	adds	r0, r0, r3
    9b56:	4d55      	ldr	r5, [pc, #340]	; (9cac <_http_client_request+0x2f0>)
    9b58:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    9b5a:	2320      	movs	r3, #32
    9b5c:	2208      	movs	r2, #8
    9b5e:	18ba      	adds	r2, r7, r2
    9b60:	18d0      	adds	r0, r2, r3
    9b62:	4b51      	ldr	r3, [pc, #324]	; (9ca8 <_http_client_request+0x2ec>)
    9b64:	4798      	blx	r3
    9b66:	0002      	movs	r2, r0
    9b68:	2320      	movs	r3, #32
    9b6a:	2108      	movs	r1, #8
    9b6c:	1879      	adds	r1, r7, r1
    9b6e:	18c9      	adds	r1, r1, r3
    9b70:	330c      	adds	r3, #12
    9b72:	2008      	movs	r0, #8
    9b74:	1838      	adds	r0, r7, r0
    9b76:	18c0      	adds	r0, r0, r3
    9b78:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9b7a:	2202      	movs	r2, #2
    9b7c:	494e      	ldr	r1, [pc, #312]	; (9cb8 <_http_client_request+0x2fc>)
    9b7e:	232c      	movs	r3, #44	; 0x2c
    9b80:	2008      	movs	r0, #8
    9b82:	1838      	adds	r0, r7, r0
    9b84:	18c0      	adds	r0, r0, r3
    9b86:	47a8      	blx	r5
    9b88:	e041      	b.n	9c0e <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
    9b8a:	2204      	movs	r2, #4
    9b8c:	4952      	ldr	r1, [pc, #328]	; (9cd8 <_http_client_request+0x31c>)
    9b8e:	332b      	adds	r3, #43	; 0x2b
    9b90:	2008      	movs	r0, #8
    9b92:	1838      	adds	r0, r7, r0
    9b94:	18c0      	adds	r0, r0, r3
    9b96:	4b45      	ldr	r3, [pc, #276]	; (9cac <_http_client_request+0x2f0>)
    9b98:	4798      	blx	r3
    9b9a:	e75b      	b.n	9a54 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
    9b9c:	2205      	movs	r2, #5
    9b9e:	494f      	ldr	r1, [pc, #316]	; (9cdc <_http_client_request+0x320>)
    9ba0:	332a      	adds	r3, #42	; 0x2a
    9ba2:	2008      	movs	r0, #8
    9ba4:	1838      	adds	r0, r7, r0
    9ba6:	18c0      	adds	r0, r0, r3
    9ba8:	4b40      	ldr	r3, [pc, #256]	; (9cac <_http_client_request+0x2f0>)
    9baa:	4798      	blx	r3
    9bac:	e752      	b.n	9a54 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    9bae:	2207      	movs	r2, #7
    9bb0:	494b      	ldr	r1, [pc, #300]	; (9ce0 <_http_client_request+0x324>)
    9bb2:	3329      	adds	r3, #41	; 0x29
    9bb4:	2008      	movs	r0, #8
    9bb6:	1838      	adds	r0, r7, r0
    9bb8:	18c0      	adds	r0, r0, r3
    9bba:	4b3c      	ldr	r3, [pc, #240]	; (9cac <_http_client_request+0x2f0>)
    9bbc:	4798      	blx	r3
    9bbe:	e749      	b.n	9a54 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    9bc0:	2204      	movs	r2, #4
    9bc2:	4948      	ldr	r1, [pc, #288]	; (9ce4 <_http_client_request+0x328>)
    9bc4:	3328      	adds	r3, #40	; 0x28
    9bc6:	2008      	movs	r0, #8
    9bc8:	1838      	adds	r0, r7, r0
    9bca:	18c0      	adds	r0, r0, r3
    9bcc:	4b37      	ldr	r3, [pc, #220]	; (9cac <_http_client_request+0x2f0>)
    9bce:	4798      	blx	r3
    9bd0:	e740      	b.n	9a54 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    9bd2:	2208      	movs	r2, #8
    9bd4:	4944      	ldr	r1, [pc, #272]	; (9ce8 <_http_client_request+0x32c>)
    9bd6:	3327      	adds	r3, #39	; 0x27
    9bd8:	2008      	movs	r0, #8
    9bda:	1838      	adds	r0, r7, r0
    9bdc:	18c0      	adds	r0, r0, r3
    9bde:	4b33      	ldr	r3, [pc, #204]	; (9cac <_http_client_request+0x2f0>)
    9be0:	4798      	blx	r3
    9be2:	e737      	b.n	9a54 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    9be4:	2205      	movs	r2, #5
    9be6:	4941      	ldr	r1, [pc, #260]	; (9cec <_http_client_request+0x330>)
    9be8:	3326      	adds	r3, #38	; 0x26
    9bea:	2008      	movs	r0, #8
    9bec:	1838      	adds	r0, r7, r0
    9bee:	18c0      	adds	r0, r0, r3
    9bf0:	4b2e      	ldr	r3, [pc, #184]	; (9cac <_http_client_request+0x2f0>)
    9bf2:	4798      	blx	r3
    9bf4:	e72e      	b.n	9a54 <_http_client_request+0x98>
				module->req.content_length = -1;
    9bf6:	2201      	movs	r2, #1
    9bf8:	4252      	negs	r2, r2
    9bfa:	23cc      	movs	r3, #204	; 0xcc
    9bfc:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    9bfe:	321d      	adds	r2, #29
    9c00:	493b      	ldr	r1, [pc, #236]	; (9cf0 <_http_client_request+0x334>)
    9c02:	3ba0      	subs	r3, #160	; 0xa0
    9c04:	2008      	movs	r0, #8
    9c06:	1838      	adds	r0, r7, r0
    9c08:	18c0      	adds	r0, r0, r3
    9c0a:	4b28      	ldr	r3, [pc, #160]	; (9cac <_http_client_request+0x2f0>)
    9c0c:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    9c0e:	23d4      	movs	r3, #212	; 0xd4
    9c10:	58e5      	ldr	r5, [r4, r3]
    9c12:	2d00      	cmp	r5, #0
    9c14:	d00a      	beq.n	9c2c <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
    9c16:	0028      	movs	r0, r5
    9c18:	4b23      	ldr	r3, [pc, #140]	; (9ca8 <_http_client_request+0x2ec>)
    9c1a:	4798      	blx	r3
    9c1c:	0002      	movs	r2, r0
    9c1e:	0029      	movs	r1, r5
    9c20:	232c      	movs	r3, #44	; 0x2c
    9c22:	2008      	movs	r0, #8
    9c24:	1838      	adds	r0, r7, r0
    9c26:	18c0      	adds	r0, r0, r3
    9c28:	4b20      	ldr	r3, [pc, #128]	; (9cac <_http_client_request+0x2f0>)
    9c2a:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9c2c:	2202      	movs	r2, #2
    9c2e:	4922      	ldr	r1, [pc, #136]	; (9cb8 <_http_client_request+0x2fc>)
    9c30:	232c      	movs	r3, #44	; 0x2c
    9c32:	2008      	movs	r0, #8
    9c34:	1838      	adds	r0, r7, r0
    9c36:	18c0      	adds	r0, r0, r3
    9c38:	4b1c      	ldr	r3, [pc, #112]	; (9cac <_http_client_request+0x2f0>)
    9c3a:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    9c3c:	232c      	movs	r3, #44	; 0x2c
    9c3e:	2208      	movs	r2, #8
    9c40:	18ba      	adds	r2, r7, r2
    9c42:	18d0      	adds	r0, r2, r3
    9c44:	4b2b      	ldr	r3, [pc, #172]	; (9cf4 <_http_client_request+0x338>)
    9c46:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    9c48:	2304      	movs	r3, #4
    9c4a:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    9c4c:	23cc      	movs	r3, #204	; 0xcc
    9c4e:	58e2      	ldr	r2, [r4, r3]
    9c50:	2a00      	cmp	r2, #0
    9c52:	db51      	blt.n	9cf8 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    9c54:	dc00      	bgt.n	9c58 <_http_client_request+0x29c>
    9c56:	e0f0      	b.n	9e3a <_http_client_request+0x47e>
    9c58:	0023      	movs	r3, r4
    9c5a:	33b0      	adds	r3, #176	; 0xb0
    9c5c:	68dd      	ldr	r5, [r3, #12]
    9c5e:	2d00      	cmp	r5, #0
    9c60:	d100      	bne.n	9c64 <_http_client_request+0x2a8>
    9c62:	e0ea      	b.n	9e3a <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    9c64:	23d0      	movs	r3, #208	; 0xd0
    9c66:	58e3      	ldr	r3, [r4, r3]
    9c68:	429a      	cmp	r2, r3
    9c6a:	dd00      	ble.n	9c6e <_http_client_request+0x2b2>
    9c6c:	e0ba      	b.n	9de4 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    9c6e:	23c0      	movs	r3, #192	; 0xc0
    9c70:	58e3      	ldr	r3, [r4, r3]
    9c72:	2b00      	cmp	r3, #0
    9c74:	d002      	beq.n	9c7c <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
    9c76:	22c4      	movs	r2, #196	; 0xc4
    9c78:	58a0      	ldr	r0, [r4, r2]
    9c7a:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    9c7c:	2302      	movs	r3, #2
    9c7e:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    9c80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9c82:	2b00      	cmp	r3, #0
    9c84:	d100      	bne.n	9c88 <_http_client_request+0x2cc>
    9c86:	e6c0      	b.n	9a0a <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    9c88:	220c      	movs	r2, #12
    9c8a:	18ba      	adds	r2, r7, r2
    9c8c:	2101      	movs	r1, #1
    9c8e:	0020      	movs	r0, r4
    9c90:	4798      	blx	r3
    9c92:	e6ba      	b.n	9a0a <_http_client_request+0x4e>
					module->req.content_length = 0;
    9c94:	2200      	movs	r2, #0
    9c96:	50e2      	str	r2, [r4, r3]
    9c98:	e7b9      	b.n	9c0e <_http_client_request+0x252>
    9c9a:	46c0      	nop			; (mov r8, r8)
    9c9c:	00015a60 	.word	0x00015a60
    9ca0:	0000974d 	.word	0x0000974d
    9ca4:	0000a719 	.word	0x0000a719
    9ca8:	0000f66b 	.word	0x0000f66b
    9cac:	0000a76d 	.word	0x0000a76d
    9cb0:	00015ad4 	.word	0x00015ad4
    9cb4:	00015ae0 	.word	0x00015ae0
    9cb8:	00016460 	.word	0x00016460
    9cbc:	00015af0 	.word	0x00015af0
    9cc0:	00015af8 	.word	0x00015af8
    9cc4:	00015b14 	.word	0x00015b14
    9cc8:	00015b28 	.word	0x00015b28
    9ccc:	00015b60 	.word	0x00015b60
    9cd0:	0000f5c9 	.word	0x0000f5c9
    9cd4:	00015b64 	.word	0x00015b64
    9cd8:	00015aa0 	.word	0x00015aa0
    9cdc:	00015aa8 	.word	0x00015aa8
    9ce0:	00015ab0 	.word	0x00015ab0
    9ce4:	00015ab8 	.word	0x00015ab8
    9ce8:	00015ac0 	.word	0x00015ac0
    9cec:	00015acc 	.word	0x00015acc
    9cf0:	00015b40 	.word	0x00015b40
    9cf4:	0000a729 	.word	0x0000a729
		if (module->req.content_length < 0 && entity->read) {
    9cf8:	0023      	movs	r3, r4
    9cfa:	33b0      	adds	r3, #176	; 0xb0
    9cfc:	68dd      	ldr	r5, [r3, #12]
    9cfe:	2d00      	cmp	r5, #0
    9d00:	d100      	bne.n	9d04 <_http_client_request+0x348>
    9d02:	e09a      	b.n	9e3a <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    9d04:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    9d06:	58e3      	ldr	r3, [r4, r3]
    9d08:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9d0a:	3a07      	subs	r2, #7
    9d0c:	1d71      	adds	r1, r6, #5
    9d0e:	0020      	movs	r0, r4
    9d10:	30b0      	adds	r0, #176	; 0xb0
    9d12:	6940      	ldr	r0, [r0, #20]
    9d14:	47a8      	blx	r5
    9d16:	0005      	movs	r5, r0
    9d18:	43c3      	mvns	r3, r0
    9d1a:	17db      	asrs	r3, r3, #31
    9d1c:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    9d1e:	220a      	movs	r2, #10
    9d20:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    9d22:	210d      	movs	r1, #13
    9d24:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    9d26:	1973      	adds	r3, r6, r5
    9d28:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    9d2a:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    9d2c:	230f      	movs	r3, #15
    9d2e:	402b      	ands	r3, r5
    9d30:	3206      	adds	r2, #6
    9d32:	3905      	subs	r1, #5
    9d34:	468c      	mov	ip, r1
    9d36:	44bc      	add	ip, r7
    9d38:	4462      	add	r2, ip
    9d3a:	5cd3      	ldrb	r3, [r2, r3]
    9d3c:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    9d3e:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    9d40:	2d0f      	cmp	r5, #15
    9d42:	dd0d      	ble.n	9d60 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    9d44:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    9d46:	17eb      	asrs	r3, r5, #31
    9d48:	220f      	movs	r2, #15
    9d4a:	4013      	ands	r3, r2
    9d4c:	195b      	adds	r3, r3, r5
    9d4e:	111b      	asrs	r3, r3, #4
    9d50:	4013      	ands	r3, r2
    9d52:	3201      	adds	r2, #1
    9d54:	2008      	movs	r0, #8
    9d56:	4684      	mov	ip, r0
    9d58:	44bc      	add	ip, r7
    9d5a:	4462      	add	r2, ip
    9d5c:	5cd3      	ldrb	r3, [r2, r3]
    9d5e:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    9d60:	2dff      	cmp	r5, #255	; 0xff
    9d62:	dd0d      	ble.n	9d80 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    9d64:	17ea      	asrs	r2, r5, #31
    9d66:	23ff      	movs	r3, #255	; 0xff
    9d68:	4013      	ands	r3, r2
    9d6a:	195b      	adds	r3, r3, r5
    9d6c:	051b      	lsls	r3, r3, #20
    9d6e:	0f1b      	lsrs	r3, r3, #28
    9d70:	2210      	movs	r2, #16
    9d72:	2108      	movs	r1, #8
    9d74:	468c      	mov	ip, r1
    9d76:	44bc      	add	ip, r7
    9d78:	4462      	add	r2, ip
    9d7a:	5cd3      	ldrb	r3, [r2, r3]
    9d7c:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    9d7e:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    9d80:	1cca      	adds	r2, r1, #3
    9d82:	1b92      	subs	r2, r2, r6
    9d84:	1d2b      	adds	r3, r5, #4
    9d86:	18d2      	adds	r2, r2, r3
    9d88:	b292      	uxth	r2, r2
    9d8a:	2000      	movs	r0, #0
    9d8c:	5620      	ldrsb	r0, [r4, r0]
    9d8e:	2300      	movs	r3, #0
    9d90:	4e30      	ldr	r6, [pc, #192]	; (9e54 <_http_client_request+0x498>)
    9d92:	47b0      	blx	r6
    9d94:	2800      	cmp	r0, #0
    9d96:	db19      	blt.n	9dcc <_http_client_request+0x410>
			module->req.sent_length += size;
    9d98:	22d0      	movs	r2, #208	; 0xd0
    9d9a:	58a3      	ldr	r3, [r4, r2]
    9d9c:	195b      	adds	r3, r3, r5
    9d9e:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    9da0:	2d00      	cmp	r5, #0
    9da2:	d000      	beq.n	9da6 <_http_client_request+0x3ea>
    9da4:	e631      	b.n	9a0a <_http_client_request+0x4e>
				if (module->req.entity.close) {
    9da6:	23c0      	movs	r3, #192	; 0xc0
    9da8:	58e3      	ldr	r3, [r4, r3]
    9daa:	2b00      	cmp	r3, #0
    9dac:	d002      	beq.n	9db4 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    9dae:	3a0c      	subs	r2, #12
    9db0:	58a0      	ldr	r0, [r4, r2]
    9db2:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    9db4:	2302      	movs	r3, #2
    9db6:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    9db8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9dba:	2b00      	cmp	r3, #0
    9dbc:	d100      	bne.n	9dc0 <_http_client_request+0x404>
    9dbe:	e624      	b.n	9a0a <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    9dc0:	220c      	movs	r2, #12
    9dc2:	18ba      	adds	r2, r7, r2
    9dc4:	2101      	movs	r1, #1
    9dc6:	0020      	movs	r0, r4
    9dc8:	4798      	blx	r3
    9dca:	e61e      	b.n	9a0a <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
    9dcc:	2105      	movs	r1, #5
    9dce:	4249      	negs	r1, r1
    9dd0:	0020      	movs	r0, r4
    9dd2:	4b21      	ldr	r3, [pc, #132]	; (9e58 <_http_client_request+0x49c>)
    9dd4:	4798      	blx	r3
    9dd6:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    9dd8:	46bd      	mov	sp, r7
    9dda:	b013      	add	sp, #76	; 0x4c
    9ddc:	bc0c      	pop	{r2, r3}
    9dde:	4692      	mov	sl, r2
    9de0:	469b      	mov	fp, r3
    9de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    9de4:	0022      	movs	r2, r4
    9de6:	32b0      	adds	r2, #176	; 0xb0
    9de8:	6950      	ldr	r0, [r2, #20]
    9dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9dec:	0031      	movs	r1, r6
    9dee:	47a8      	blx	r5
			if (size < 0) {
    9df0:	2800      	cmp	r0, #0
    9df2:	db16      	blt.n	9e22 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    9df4:	23cc      	movs	r3, #204	; 0xcc
    9df6:	58e5      	ldr	r5, [r4, r3]
    9df8:	3304      	adds	r3, #4
    9dfa:	58e3      	ldr	r3, [r4, r3]
    9dfc:	1aed      	subs	r5, r5, r3
    9dfe:	4285      	cmp	r5, r0
    9e00:	dd00      	ble.n	9e04 <_http_client_request+0x448>
    9e02:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    9e04:	b2aa      	uxth	r2, r5
    9e06:	2000      	movs	r0, #0
    9e08:	5620      	ldrsb	r0, [r4, r0]
    9e0a:	2300      	movs	r3, #0
    9e0c:	0031      	movs	r1, r6
    9e0e:	4e11      	ldr	r6, [pc, #68]	; (9e54 <_http_client_request+0x498>)
    9e10:	47b0      	blx	r6
    9e12:	2800      	cmp	r0, #0
    9e14:	db0b      	blt.n	9e2e <_http_client_request+0x472>
				module->req.sent_length += size;
    9e16:	23d0      	movs	r3, #208	; 0xd0
    9e18:	58e2      	ldr	r2, [r4, r3]
    9e1a:	4694      	mov	ip, r2
    9e1c:	4465      	add	r5, ip
    9e1e:	50e5      	str	r5, [r4, r3]
    9e20:	e5f3      	b.n	9a0a <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    9e22:	2105      	movs	r1, #5
    9e24:	4249      	negs	r1, r1
    9e26:	0020      	movs	r0, r4
    9e28:	4b0b      	ldr	r3, [pc, #44]	; (9e58 <_http_client_request+0x49c>)
    9e2a:	4798      	blx	r3
    9e2c:	e5ed      	b.n	9a0a <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
    9e2e:	2105      	movs	r1, #5
    9e30:	4249      	negs	r1, r1
    9e32:	0020      	movs	r0, r4
    9e34:	4b08      	ldr	r3, [pc, #32]	; (9e58 <_http_client_request+0x49c>)
    9e36:	4798      	blx	r3
					return;
    9e38:	e7cd      	b.n	9dd6 <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    9e3a:	2302      	movs	r3, #2
    9e3c:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    9e3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9e40:	2b00      	cmp	r3, #0
    9e42:	d100      	bne.n	9e46 <_http_client_request+0x48a>
    9e44:	e5e1      	b.n	9a0a <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    9e46:	220c      	movs	r2, #12
    9e48:	18ba      	adds	r2, r7, r2
    9e4a:	2101      	movs	r1, #1
    9e4c:	0020      	movs	r0, r4
    9e4e:	4798      	blx	r3
    9e50:	e5db      	b.n	9a0a <_http_client_request+0x4e>
    9e52:	46c0      	nop			; (mov r8, r8)
    9e54:	00008fbd 	.word	0x00008fbd
    9e58:	000098a5 	.word	0x000098a5

00009e5c <http_client_send_request>:
{
    9e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e5e:	46d6      	mov	lr, sl
    9e60:	b500      	push	{lr}
    9e62:	b088      	sub	sp, #32
    9e64:	0004      	movs	r4, r0
    9e66:	000f      	movs	r7, r1
    9e68:	4692      	mov	sl, r2
    9e6a:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    9e6c:	2800      	cmp	r0, #0
    9e6e:	d100      	bne.n	9e72 <http_client_send_request+0x16>
    9e70:	e0d3      	b.n	a01a <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    9e72:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    9e74:	2b02      	cmp	r3, #2
    9e76:	d900      	bls.n	9e7a <http_client_send_request+0x1e>
    9e78:	e0d3      	b.n	a022 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    9e7a:	2207      	movs	r2, #7
    9e7c:	4981      	ldr	r1, [pc, #516]	; (a084 <http_client_send_request+0x228>)
    9e7e:	0038      	movs	r0, r7
    9e80:	4b81      	ldr	r3, [pc, #516]	; (a088 <http_client_send_request+0x22c>)
    9e82:	4798      	blx	r3
		i = 7;
    9e84:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    9e86:	2800      	cmp	r0, #0
    9e88:	d007      	beq.n	9e9a <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    9e8a:	2208      	movs	r2, #8
    9e8c:	497f      	ldr	r1, [pc, #508]	; (a08c <http_client_send_request+0x230>)
    9e8e:	0038      	movs	r0, r7
    9e90:	4b7d      	ldr	r3, [pc, #500]	; (a088 <http_client_send_request+0x22c>)
    9e92:	4798      	blx	r3
		i = 8;
    9e94:	4246      	negs	r6, r0
    9e96:	4146      	adcs	r6, r0
    9e98:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    9e9a:	1c63      	adds	r3, r4, #1
    9e9c:	19bd      	adds	r5, r7, r6
    9e9e:	9302      	str	r3, [sp, #8]
    9ea0:	0018      	movs	r0, r3
    9ea2:	4b7b      	ldr	r3, [pc, #492]	; (a090 <http_client_send_request+0x234>)
    9ea4:	4798      	blx	r3
    9ea6:	0002      	movs	r2, r0
    9ea8:	0029      	movs	r1, r5
    9eaa:	9802      	ldr	r0, [sp, #8]
    9eac:	4b76      	ldr	r3, [pc, #472]	; (a088 <http_client_send_request+0x22c>)
    9eae:	4798      	blx	r3
    9eb0:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    9eb2:	782b      	ldrb	r3, [r5, #0]
    9eb4:	2b00      	cmp	r3, #0
    9eb6:	d052      	beq.n	9f5e <http_client_send_request+0x102>
    9eb8:	2b2f      	cmp	r3, #47	; 0x2f
    9eba:	d052      	beq.n	9f62 <http_client_send_request+0x106>
    9ebc:	1c71      	adds	r1, r6, #1
    9ebe:	1879      	adds	r1, r7, r1
    9ec0:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    9ec2:	3201      	adds	r2, #1
    9ec4:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    9ec6:	000d      	movs	r5, r1
    9ec8:	780b      	ldrb	r3, [r1, #0]
    9eca:	2b00      	cmp	r3, #0
    9ecc:	d002      	beq.n	9ed4 <http_client_send_request+0x78>
    9ece:	3101      	adds	r1, #1
    9ed0:	2b2f      	cmp	r3, #47	; 0x2f
    9ed2:	d1f6      	bne.n	9ec2 <http_client_send_request+0x66>
	module->host[j] = '\0';
    9ed4:	18a2      	adds	r2, r4, r2
    9ed6:	2300      	movs	r3, #0
    9ed8:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    9eda:	7863      	ldrb	r3, [r4, #1]
    9edc:	2b00      	cmp	r3, #0
    9ede:	d100      	bne.n	9ee2 <http_client_send_request+0x86>
    9ee0:	e0a3      	b.n	a02a <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    9ee2:	0028      	movs	r0, r5
    9ee4:	4b6a      	ldr	r3, [pc, #424]	; (a090 <http_client_send_request+0x234>)
    9ee6:	4798      	blx	r3
    9ee8:	283f      	cmp	r0, #63	; 0x3f
    9eea:	d900      	bls.n	9eee <http_client_send_request+0x92>
    9eec:	e0a1      	b.n	a032 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    9eee:	23d4      	movs	r3, #212	; 0xd4
    9ef0:	58e0      	ldr	r0, [r4, r3]
    9ef2:	2800      	cmp	r0, #0
    9ef4:	d001      	beq.n	9efa <http_client_send_request+0x9e>
		free(module->req.ext_header);
    9ef6:	4b67      	ldr	r3, [pc, #412]	; (a094 <http_client_send_request+0x238>)
    9ef8:	4798      	blx	r3
	if (ext_header != NULL) {
    9efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9efc:	2b00      	cmp	r3, #0
    9efe:	d032      	beq.n	9f66 <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    9f00:	0018      	movs	r0, r3
    9f02:	4b65      	ldr	r3, [pc, #404]	; (a098 <http_client_send_request+0x23c>)
    9f04:	4798      	blx	r3
    9f06:	23d4      	movs	r3, #212	; 0xd4
    9f08:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    9f0a:	2800      	cmp	r0, #0
    9f0c:	d100      	bne.n	9f10 <http_client_send_request+0xb4>
    9f0e:	e094      	b.n	a03a <http_client_send_request+0x1de>
	module->sending = 0;
    9f10:	2241      	movs	r2, #65	; 0x41
    9f12:	5ca3      	ldrb	r3, [r4, r2]
    9f14:	2101      	movs	r1, #1
    9f16:	438b      	bics	r3, r1
    9f18:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    9f1a:	2300      	movs	r3, #0
    9f1c:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    9f1e:	782b      	ldrb	r3, [r5, #0]
    9f20:	2b2f      	cmp	r3, #47	; 0x2f
    9f22:	d024      	beq.n	9f6e <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    9f24:	222f      	movs	r2, #47	; 0x2f
    9f26:	2370      	movs	r3, #112	; 0x70
    9f28:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    9f2a:	782b      	ldrb	r3, [r5, #0]
    9f2c:	2b00      	cmp	r3, #0
    9f2e:	d124      	bne.n	9f7a <http_client_send_request+0x11e>
	if (entity != NULL) {
    9f30:	9b03      	ldr	r3, [sp, #12]
    9f32:	2b00      	cmp	r3, #0
    9f34:	d027      	beq.n	9f86 <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    9f36:	0020      	movs	r0, r4
    9f38:	30b0      	adds	r0, #176	; 0xb0
    9f3a:	2218      	movs	r2, #24
    9f3c:	0019      	movs	r1, r3
    9f3e:	4b57      	ldr	r3, [pc, #348]	; (a09c <http_client_send_request+0x240>)
    9f40:	4798      	blx	r3
	module->req.method = method;
    9f42:	23c8      	movs	r3, #200	; 0xc8
    9f44:	4652      	mov	r2, sl
    9f46:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    9f48:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9f4a:	2b01      	cmp	r3, #1
    9f4c:	d022      	beq.n	9f94 <http_client_send_request+0x138>
    9f4e:	2b00      	cmp	r3, #0
    9f50:	d027      	beq.n	9fa2 <http_client_send_request+0x146>
    9f52:	2b02      	cmp	r3, #2
    9f54:	d03a      	beq.n	9fcc <http_client_send_request+0x170>
		return -EAGAIN;
    9f56:	230b      	movs	r3, #11
    9f58:	425b      	negs	r3, r3
    9f5a:	9301      	str	r3, [sp, #4]
    9f5c:	e08d      	b.n	a07a <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    9f5e:	2200      	movs	r2, #0
    9f60:	e7b8      	b.n	9ed4 <http_client_send_request+0x78>
    9f62:	2200      	movs	r2, #0
    9f64:	e7b6      	b.n	9ed4 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    9f66:	2200      	movs	r2, #0
    9f68:	23d4      	movs	r3, #212	; 0xd4
    9f6a:	50e2      	str	r2, [r4, r3]
    9f6c:	e7d0      	b.n	9f10 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    9f6e:	0020      	movs	r0, r4
    9f70:	3070      	adds	r0, #112	; 0x70
    9f72:	0029      	movs	r1, r5
    9f74:	4b4a      	ldr	r3, [pc, #296]	; (a0a0 <http_client_send_request+0x244>)
    9f76:	4798      	blx	r3
    9f78:	e7da      	b.n	9f30 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    9f7a:	0029      	movs	r1, r5
    9f7c:	0020      	movs	r0, r4
    9f7e:	3071      	adds	r0, #113	; 0x71
    9f80:	4b47      	ldr	r3, [pc, #284]	; (a0a0 <http_client_send_request+0x244>)
    9f82:	4798      	blx	r3
    9f84:	e7d4      	b.n	9f30 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    9f86:	0020      	movs	r0, r4
    9f88:	30b0      	adds	r0, #176	; 0xb0
    9f8a:	2218      	movs	r2, #24
    9f8c:	2100      	movs	r1, #0
    9f8e:	4b45      	ldr	r3, [pc, #276]	; (a0a4 <http_client_send_request+0x248>)
    9f90:	4798      	blx	r3
    9f92:	e7d6      	b.n	9f42 <http_client_send_request+0xe6>
		if (!reconnect) {
    9f94:	9b01      	ldr	r3, [sp, #4]
    9f96:	2b00      	cmp	r3, #0
    9f98:	d06f      	beq.n	a07a <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    9f9a:	2100      	movs	r1, #0
    9f9c:	0020      	movs	r0, r4
    9f9e:	4b42      	ldr	r3, [pc, #264]	; (a0a8 <http_client_send_request+0x24c>)
    9fa0:	4798      	blx	r3
		if (module->config.tls) {
    9fa2:	2352      	movs	r3, #82	; 0x52
    9fa4:	5ce2      	ldrb	r2, [r4, r3]
    9fa6:	1e53      	subs	r3, r2, #1
    9fa8:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    9faa:	b2d2      	uxtb	r2, r2
    9fac:	2101      	movs	r1, #1
    9fae:	2002      	movs	r0, #2
    9fb0:	4b3e      	ldr	r3, [pc, #248]	; (a0ac <http_client_send_request+0x250>)
    9fb2:	4798      	blx	r3
    9fb4:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    9fb6:	2800      	cmp	r0, #0
    9fb8:	db43      	blt.n	a042 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    9fba:	0080      	lsls	r0, r0, #2
    9fbc:	4b3c      	ldr	r3, [pc, #240]	; (a0b0 <http_client_send_request+0x254>)
    9fbe:	50c4      	str	r4, [r0, r3]
    9fc0:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    9fc2:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    9fc4:	2620      	movs	r6, #32
			isv6 = 1;
    9fc6:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    9fc8:	2730      	movs	r7, #48	; 0x30
    9fca:	e00c      	b.n	9fe6 <http_client_send_request+0x18a>
		if (!reconnect) {
    9fcc:	9b01      	ldr	r3, [sp, #4]
    9fce:	2b00      	cmp	r3, #0
    9fd0:	d1e3      	bne.n	9f9a <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    9fd2:	3303      	adds	r3, #3
    9fd4:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    9fd6:	0020      	movs	r0, r4
    9fd8:	4b36      	ldr	r3, [pc, #216]	; (a0b4 <http_client_send_request+0x258>)
    9fda:	4798      	blx	r3
			break;
    9fdc:	e04d      	b.n	a07a <http_client_send_request+0x21e>
			if (isv6) {
    9fde:	2900      	cmp	r1, #0
    9fe0:	d001      	beq.n	9fe6 <http_client_send_request+0x18a>
    9fe2:	e012      	b.n	a00a <http_client_send_request+0x1ae>
			isv6 = 1;
    9fe4:	0001      	movs	r1, r0
	while (*host != '\0') {
    9fe6:	782a      	ldrb	r2, [r5, #0]
    9fe8:	2a00      	cmp	r2, #0
    9fea:	d02e      	beq.n	a04a <http_client_send_request+0x1ee>
		ch = *host++;
    9fec:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    9fee:	0013      	movs	r3, r2
    9ff0:	43b3      	bics	r3, r6
    9ff2:	3b41      	subs	r3, #65	; 0x41
    9ff4:	2b05      	cmp	r3, #5
    9ff6:	d9f5      	bls.n	9fe4 <http_client_send_request+0x188>
    9ff8:	2a3a      	cmp	r2, #58	; 0x3a
    9ffa:	d00a      	beq.n	a012 <http_client_send_request+0x1b6>
    9ffc:	2a2f      	cmp	r2, #47	; 0x2f
    9ffe:	d00a      	beq.n	a016 <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    a000:	2a2e      	cmp	r2, #46	; 0x2e
    a002:	d0ec      	beq.n	9fde <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    a004:	403a      	ands	r2, r7
    a006:	2a30      	cmp	r2, #48	; 0x30
    a008:	d0ed      	beq.n	9fe6 <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    a00a:	9802      	ldr	r0, [sp, #8]
    a00c:	4b2a      	ldr	r3, [pc, #168]	; (a0b8 <http_client_send_request+0x25c>)
    a00e:	4798      	blx	r3
    a010:	e02f      	b.n	a072 <http_client_send_request+0x216>
			isv6 = 1;
    a012:	0001      	movs	r1, r0
    a014:	e7e7      	b.n	9fe6 <http_client_send_request+0x18a>
    a016:	0001      	movs	r1, r0
    a018:	e7e5      	b.n	9fe6 <http_client_send_request+0x18a>
		return -EINVAL;
    a01a:	2316      	movs	r3, #22
    a01c:	425b      	negs	r3, r3
    a01e:	9301      	str	r3, [sp, #4]
    a020:	e02b      	b.n	a07a <http_client_send_request+0x21e>
		return -EBUSY;
    a022:	2310      	movs	r3, #16
    a024:	425b      	negs	r3, r3
    a026:	9301      	str	r3, [sp, #4]
    a028:	e027      	b.n	a07a <http_client_send_request+0x21e>
		return -EINVAL;
    a02a:	2316      	movs	r3, #22
    a02c:	425b      	negs	r3, r3
    a02e:	9301      	str	r3, [sp, #4]
    a030:	e023      	b.n	a07a <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    a032:	235b      	movs	r3, #91	; 0x5b
    a034:	425b      	negs	r3, r3
    a036:	9301      	str	r3, [sp, #4]
    a038:	e01f      	b.n	a07a <http_client_send_request+0x21e>
			return -ENOMEM;
    a03a:	230c      	movs	r3, #12
    a03c:	425b      	negs	r3, r3
    a03e:	9301      	str	r3, [sp, #4]
    a040:	e01b      	b.n	a07a <http_client_send_request+0x21e>
			return -ENOSPC;
    a042:	231c      	movs	r3, #28
    a044:	425b      	negs	r3, r3
    a046:	9301      	str	r3, [sp, #4]
    a048:	e017      	b.n	a07a <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    a04a:	2302      	movs	r3, #2
    a04c:	aa04      	add	r2, sp, #16
    a04e:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    a050:	334e      	adds	r3, #78	; 0x4e
    a052:	5ae3      	ldrh	r3, [r4, r3]
    a054:	021a      	lsls	r2, r3, #8
    a056:	0a1b      	lsrs	r3, r3, #8
    a058:	4313      	orrs	r3, r2
    a05a:	aa04      	add	r2, sp, #16
    a05c:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    a05e:	9802      	ldr	r0, [sp, #8]
    a060:	4b16      	ldr	r3, [pc, #88]	; (a0bc <http_client_send_request+0x260>)
    a062:	4798      	blx	r3
    a064:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    a066:	2000      	movs	r0, #0
    a068:	5620      	ldrsb	r0, [r4, r0]
    a06a:	2210      	movs	r2, #16
    a06c:	a904      	add	r1, sp, #16
    a06e:	4b14      	ldr	r3, [pc, #80]	; (a0c0 <http_client_send_request+0x264>)
    a070:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    a072:	2301      	movs	r3, #1
    a074:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    a076:	2300      	movs	r3, #0
    a078:	9301      	str	r3, [sp, #4]
}
    a07a:	9801      	ldr	r0, [sp, #4]
    a07c:	b008      	add	sp, #32
    a07e:	bc04      	pop	{r2}
    a080:	4692      	mov	sl, r2
    a082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a084:	00015b84 	.word	0x00015b84
    a088:	0000f679 	.word	0x0000f679
    a08c:	00015b8c 	.word	0x00015b8c
    a090:	0000f66b 	.word	0x0000f66b
    a094:	0000e859 	.word	0x0000e859
    a098:	0000f631 	.word	0x0000f631
    a09c:	0000e891 	.word	0x0000e891
    a0a0:	0000f621 	.word	0x0000f621
    a0a4:	0000e8c7 	.word	0x0000e8c7
    a0a8:	000098a5 	.word	0x000098a5
    a0ac:	00008da9 	.word	0x00008da9
    a0b0:	2000022c 	.word	0x2000022c
    a0b4:	000099bd 	.word	0x000099bd
    a0b8:	000091f1 	.word	0x000091f1
    a0bc:	00009185 	.word	0x00009185
    a0c0:	00008f2d 	.word	0x00008f2d

0000a0c4 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    a0c4:	b510      	push	{r4, lr}
	if (module == NULL) {
    a0c6:	2800      	cmp	r0, #0
    a0c8:	d00d      	beq.n	a0e6 <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    a0ca:	6c41      	ldr	r1, [r0, #68]	; 0x44
    a0cc:	6e02      	ldr	r2, [r0, #96]	; 0x60
    a0ce:	4291      	cmp	r1, r2
    a0d0:	d20a      	bcs.n	a0e8 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    a0d2:	1a52      	subs	r2, r2, r1
    a0d4:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    a0d6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    a0d8:	469c      	mov	ip, r3
    a0da:	4461      	add	r1, ip
	recv(module->sock,
    a0dc:	7800      	ldrb	r0, [r0, #0]
    a0de:	b240      	sxtb	r0, r0
    a0e0:	2300      	movs	r3, #0
    a0e2:	4c04      	ldr	r4, [pc, #16]	; (a0f4 <_http_client_recv_packet+0x30>)
    a0e4:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    a0e6:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    a0e8:	218b      	movs	r1, #139	; 0x8b
    a0ea:	4249      	negs	r1, r1
    a0ec:	4b02      	ldr	r3, [pc, #8]	; (a0f8 <_http_client_recv_packet+0x34>)
    a0ee:	4798      	blx	r3
		return;
    a0f0:	e7f9      	b.n	a0e6 <_http_client_recv_packet+0x22>
    a0f2:	46c0      	nop			; (mov r8, r8)
    a0f4:	00009055 	.word	0x00009055
    a0f8:	000098a5 	.word	0x000098a5

0000a0fc <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    a0fc:	b570      	push	{r4, r5, r6, lr}
    a0fe:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    a100:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    a102:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    a104:	1a5c      	subs	r4, r3, r1
    a106:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    a108:	2c00      	cmp	r4, #0
    a10a:	dc02      	bgt.n	a112 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    a10c:	2300      	movs	r3, #0
    a10e:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    a110:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    a112:	0022      	movs	r2, r4
    a114:	4b01      	ldr	r3, [pc, #4]	; (a11c <_http_client_move_buffer+0x20>)
    a116:	4798      	blx	r3
		module->recved_size = remain;
    a118:	646c      	str	r4, [r5, #68]	; 0x44
    a11a:	e7f9      	b.n	a110 <_http_client_move_buffer+0x14>
    a11c:	0000e8a3 	.word	0x0000e8a3

0000a120 <_http_client_handle_header>:
{
    a120:	b5f0      	push	{r4, r5, r6, r7, lr}
    a122:	46ce      	mov	lr, r9
    a124:	b500      	push	{lr}
    a126:	b084      	sub	sp, #16
    a128:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    a12a:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    a12c:	4b62      	ldr	r3, [pc, #392]	; (a2b8 <_http_client_handle_header+0x198>)
    a12e:	4699      	mov	r9, r3
    a130:	e049      	b.n	a1c6 <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    a132:	0021      	movs	r1, r4
    a134:	0038      	movs	r0, r7
    a136:	4b61      	ldr	r3, [pc, #388]	; (a2bc <_http_client_handle_header+0x19c>)
    a138:	4798      	blx	r3
			return 0;
    a13a:	2600      	movs	r6, #0
}
    a13c:	0030      	movs	r0, r6
    a13e:	b004      	add	sp, #16
    a140:	bc04      	pop	{r2}
    a142:	4691      	mov	r9, r2
    a144:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    a146:	1ca1      	adds	r1, r4, #2
    a148:	0038      	movs	r0, r7
    a14a:	4b5c      	ldr	r3, [pc, #368]	; (a2bc <_http_client_handle_header+0x19c>)
    a14c:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    a14e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a150:	2b00      	cmp	r3, #0
    a152:	d00a      	beq.n	a16a <_http_client_handle_header+0x4a>
    a154:	22e4      	movs	r2, #228	; 0xe4
    a156:	5ab9      	ldrh	r1, [r7, r2]
    a158:	2900      	cmp	r1, #0
    a15a:	d006      	beq.n	a16a <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    a15c:	3a08      	subs	r2, #8
    a15e:	58b8      	ldr	r0, [r7, r2]
    a160:	2800      	cmp	r0, #0
    a162:	db07      	blt.n	a174 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    a164:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    a166:	4290      	cmp	r0, r2
    a168:	dc10      	bgt.n	a18c <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    a16a:	2201      	movs	r2, #1
    a16c:	23d8      	movs	r3, #216	; 0xd8
    a16e:	50fa      	str	r2, [r7, r3]
			return 1;
    a170:	2601      	movs	r6, #1
    a172:	e7e3      	b.n	a13c <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    a174:	aa01      	add	r2, sp, #4
    a176:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    a178:	2101      	movs	r1, #1
    a17a:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    a17c:	2100      	movs	r1, #0
    a17e:	20e0      	movs	r0, #224	; 0xe0
    a180:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    a182:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    a184:	3102      	adds	r1, #2
    a186:	0038      	movs	r0, r7
    a188:	4798      	blx	r3
    a18a:	e7ee      	b.n	a16a <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    a18c:	aa01      	add	r2, sp, #4
    a18e:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    a190:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    a192:	2100      	movs	r1, #0
    a194:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    a196:	20e0      	movs	r0, #224	; 0xe0
    a198:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    a19a:	3102      	adds	r1, #2
    a19c:	0038      	movs	r0, r7
    a19e:	4798      	blx	r3
    a1a0:	e7e3      	b.n	a16a <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    a1a2:	0020      	movs	r0, r4
    a1a4:	3010      	adds	r0, #16
    a1a6:	4b46      	ldr	r3, [pc, #280]	; (a2c0 <_http_client_handle_header+0x1a0>)
    a1a8:	4798      	blx	r3
    a1aa:	23dc      	movs	r3, #220	; 0xdc
    a1ac:	50f8      	str	r0, [r7, r3]
    a1ae:	e009      	b.n	a1c4 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    a1b0:	3201      	adds	r2, #1
    a1b2:	4295      	cmp	r5, r2
    a1b4:	d006      	beq.n	a1c4 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    a1b6:	7813      	ldrb	r3, [r2, #0]
    a1b8:	2b20      	cmp	r3, #32
    a1ba:	d12b      	bne.n	a214 <_http_client_handle_header+0xf4>
    a1bc:	e7f8      	b.n	a1b0 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    a1be:	3a21      	subs	r2, #33	; 0x21
    a1c0:	3389      	adds	r3, #137	; 0x89
    a1c2:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    a1c4:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    a1c6:	493f      	ldr	r1, [pc, #252]	; (a2c4 <_http_client_handle_header+0x1a4>)
    a1c8:	0020      	movs	r0, r4
    a1ca:	47c8      	blx	r9
    a1cc:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    a1ce:	d0b0      	beq.n	a132 <_http_client_handle_header+0x12>
    a1d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a1d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    a1d4:	4694      	mov	ip, r2
    a1d6:	4463      	add	r3, ip
    a1d8:	4298      	cmp	r0, r3
    a1da:	d2aa      	bcs.n	a132 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    a1dc:	2202      	movs	r2, #2
    a1de:	4939      	ldr	r1, [pc, #228]	; (a2c4 <_http_client_handle_header+0x1a4>)
    a1e0:	0020      	movs	r0, r4
    a1e2:	4b39      	ldr	r3, [pc, #228]	; (a2c8 <_http_client_handle_header+0x1a8>)
    a1e4:	4798      	blx	r3
    a1e6:	2800      	cmp	r0, #0
    a1e8:	d0ad      	beq.n	a146 <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    a1ea:	2210      	movs	r2, #16
    a1ec:	4937      	ldr	r1, [pc, #220]	; (a2cc <_http_client_handle_header+0x1ac>)
    a1ee:	0020      	movs	r0, r4
    a1f0:	4b35      	ldr	r3, [pc, #212]	; (a2c8 <_http_client_handle_header+0x1a8>)
    a1f2:	4798      	blx	r3
    a1f4:	2800      	cmp	r0, #0
    a1f6:	d0d4      	beq.n	a1a2 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    a1f8:	2213      	movs	r2, #19
    a1fa:	4935      	ldr	r1, [pc, #212]	; (a2d0 <_http_client_handle_header+0x1b0>)
    a1fc:	0020      	movs	r0, r4
    a1fe:	4b32      	ldr	r3, [pc, #200]	; (a2c8 <_http_client_handle_header+0x1a8>)
    a200:	4798      	blx	r3
    a202:	1e06      	subs	r6, r0, #0
    a204:	d110      	bne.n	a228 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    a206:	0022      	movs	r2, r4
    a208:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    a20a:	4295      	cmp	r5, r2
    a20c:	d9da      	bls.n	a1c4 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    a20e:	7ce3      	ldrb	r3, [r4, #19]
    a210:	2b20      	cmp	r3, #32
    a212:	d0cd      	beq.n	a1b0 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    a214:	2220      	movs	r2, #32
    a216:	4393      	bics	r3, r2
    a218:	2b43      	cmp	r3, #67	; 0x43
    a21a:	d0d0      	beq.n	a1be <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    a21c:	2186      	movs	r1, #134	; 0x86
    a21e:	4249      	negs	r1, r1
    a220:	0038      	movs	r0, r7
    a222:	4b2c      	ldr	r3, [pc, #176]	; (a2d4 <_http_client_handle_header+0x1b4>)
    a224:	4798      	blx	r3
					return 0;
    a226:	e789      	b.n	a13c <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    a228:	220c      	movs	r2, #12
    a22a:	492b      	ldr	r1, [pc, #172]	; (a2d8 <_http_client_handle_header+0x1b8>)
    a22c:	0020      	movs	r0, r4
    a22e:	4b26      	ldr	r3, [pc, #152]	; (a2c8 <_http_client_handle_header+0x1a8>)
    a230:	4798      	blx	r3
    a232:	2800      	cmp	r0, #0
    a234:	d11d      	bne.n	a272 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    a236:	0022      	movs	r2, r4
    a238:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    a23a:	4295      	cmp	r5, r2
    a23c:	d9c2      	bls.n	a1c4 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    a23e:	7b23      	ldrb	r3, [r4, #12]
    a240:	2b20      	cmp	r3, #32
    a242:	d009      	beq.n	a258 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    a244:	2220      	movs	r2, #32
    a246:	4393      	bics	r3, r2
    a248:	2b4b      	cmp	r3, #75	; 0x4b
    a24a:	d00c      	beq.n	a266 <_http_client_handle_header+0x146>
					module->permanent = 0;
    a24c:	2241      	movs	r2, #65	; 0x41
    a24e:	5cbb      	ldrb	r3, [r7, r2]
    a250:	2102      	movs	r1, #2
    a252:	438b      	bics	r3, r1
    a254:	54bb      	strb	r3, [r7, r2]
    a256:	e7b5      	b.n	a1c4 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    a258:	3201      	adds	r2, #1
    a25a:	4295      	cmp	r5, r2
    a25c:	d0b2      	beq.n	a1c4 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    a25e:	7813      	ldrb	r3, [r2, #0]
    a260:	2b20      	cmp	r3, #32
    a262:	d1ef      	bne.n	a244 <_http_client_handle_header+0x124>
    a264:	e7f8      	b.n	a258 <_http_client_handle_header+0x138>
					module->permanent = 1;
    a266:	3221      	adds	r2, #33	; 0x21
    a268:	5cbb      	ldrb	r3, [r7, r2]
    a26a:	2102      	movs	r1, #2
    a26c:	430b      	orrs	r3, r1
    a26e:	54bb      	strb	r3, [r7, r2]
    a270:	e7a8      	b.n	a1c4 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    a272:	2205      	movs	r2, #5
    a274:	4919      	ldr	r1, [pc, #100]	; (a2dc <_http_client_handle_header+0x1bc>)
    a276:	0020      	movs	r0, r4
    a278:	4b13      	ldr	r3, [pc, #76]	; (a2c8 <_http_client_handle_header+0x1a8>)
    a27a:	4798      	blx	r3
    a27c:	2800      	cmp	r0, #0
    a27e:	d1a1      	bne.n	a1c4 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    a280:	0020      	movs	r0, r4
    a282:	3009      	adds	r0, #9
    a284:	4b0e      	ldr	r3, [pc, #56]	; (a2c0 <_http_client_handle_header+0x1a0>)
    a286:	4798      	blx	r3
    a288:	23e4      	movs	r3, #228	; 0xe4
    a28a:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    a28c:	2200      	movs	r2, #0
    a28e:	3b08      	subs	r3, #8
    a290:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    a292:	7963      	ldrb	r3, [r4, #5]
    a294:	2b31      	cmp	r3, #49	; 0x31
    a296:	d802      	bhi.n	a29e <_http_client_handle_header+0x17e>
    a298:	79e3      	ldrb	r3, [r4, #7]
    a29a:	2b30      	cmp	r3, #48	; 0x30
    a29c:	d905      	bls.n	a2aa <_http_client_handle_header+0x18a>
				module->permanent = 1;
    a29e:	2241      	movs	r2, #65	; 0x41
    a2a0:	5cbb      	ldrb	r3, [r7, r2]
    a2a2:	2102      	movs	r1, #2
    a2a4:	430b      	orrs	r3, r1
    a2a6:	54bb      	strb	r3, [r7, r2]
    a2a8:	e78c      	b.n	a1c4 <_http_client_handle_header+0xa4>
				module->permanent = 0;
    a2aa:	2241      	movs	r2, #65	; 0x41
    a2ac:	5cbb      	ldrb	r3, [r7, r2]
    a2ae:	2102      	movs	r1, #2
    a2b0:	438b      	bics	r3, r1
    a2b2:	54bb      	strb	r3, [r7, r2]
    a2b4:	e786      	b.n	a1c4 <_http_client_handle_header+0xa4>
    a2b6:	46c0      	nop			; (mov r8, r8)
    a2b8:	0000f69b 	.word	0x0000f69b
    a2bc:	0000a0fd 	.word	0x0000a0fd
    a2c0:	0000e7cd 	.word	0x0000e7cd
    a2c4:	00016460 	.word	0x00016460
    a2c8:	0000f679 	.word	0x0000f679
    a2cc:	00015b64 	.word	0x00015b64
    a2d0:	00015a74 	.word	0x00015a74
    a2d4:	000098a5 	.word	0x000098a5
    a2d8:	00015a88 	.word	0x00015a88
    a2dc:	00015a98 	.word	0x00015a98

0000a2e0 <_http_client_handle_entity>:
{
    a2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2e2:	46ce      	mov	lr, r9
    a2e4:	b500      	push	{lr}
    a2e6:	b086      	sub	sp, #24
    a2e8:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    a2ea:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    a2ec:	23dc      	movs	r3, #220	; 0xdc
    a2ee:	58c3      	ldr	r3, [r0, r3]
    a2f0:	2b00      	cmp	r3, #0
    a2f2:	db69      	blt.n	a3c8 <_http_client_handle_entity+0xe8>
    a2f4:	6e02      	ldr	r2, [r0, #96]	; 0x60
    a2f6:	4293      	cmp	r3, r2
    a2f8:	dc2b      	bgt.n	a352 <_http_client_handle_entity+0x72>
	return 0;
    a2fa:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    a2fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
    a2fe:	4293      	cmp	r3, r2
    a300:	dc4e      	bgt.n	a3a0 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    a302:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    a304:	2e00      	cmp	r6, #0
    a306:	d003      	beq.n	a310 <_http_client_handle_entity+0x30>
    a308:	22e4      	movs	r2, #228	; 0xe4
    a30a:	5aa1      	ldrh	r1, [r4, r2]
    a30c:	2900      	cmp	r1, #0
    a30e:	d10e      	bne.n	a32e <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    a310:	2300      	movs	r3, #0
    a312:	22d8      	movs	r2, #216	; 0xd8
    a314:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    a316:	320c      	adds	r2, #12
    a318:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    a31a:	3341      	adds	r3, #65	; 0x41
    a31c:	5ce3      	ldrb	r3, [r4, r3]
    a31e:	079b      	lsls	r3, r3, #30
    a320:	d40f      	bmi.n	a342 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    a322:	2100      	movs	r1, #0
    a324:	0020      	movs	r0, r4
    a326:	4b71      	ldr	r3, [pc, #452]	; (a4ec <_http_client_handle_entity+0x20c>)
    a328:	4798      	blx	r3
	return 0;
    a32a:	2000      	movs	r0, #0
    a32c:	e038      	b.n	a3a0 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    a32e:	aa03      	add	r2, sp, #12
    a330:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    a332:	2100      	movs	r1, #0
    a334:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    a336:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    a338:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    a33a:	3102      	adds	r1, #2
    a33c:	0020      	movs	r0, r4
    a33e:	47b0      	blx	r6
    a340:	e7e6      	b.n	a310 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    a342:	23dc      	movs	r3, #220	; 0xdc
    a344:	58e1      	ldr	r1, [r4, r3]
    a346:	1869      	adds	r1, r5, r1
    a348:	0020      	movs	r0, r4
    a34a:	4b69      	ldr	r3, [pc, #420]	; (a4f0 <_http_client_handle_entity+0x210>)
    a34c:	4798      	blx	r3
				return module->recved_size;
    a34e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    a350:	e026      	b.n	a3a0 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    a352:	6c42      	ldr	r2, [r0, #68]	; 0x44
    a354:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    a356:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    a358:	21e0      	movs	r1, #224	; 0xe0
    a35a:	5840      	ldr	r0, [r0, r1]
    a35c:	4684      	mov	ip, r0
    a35e:	4462      	add	r2, ip
    a360:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    a362:	4293      	cmp	r3, r2
    a364:	dc20      	bgt.n	a3a8 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    a366:	2300      	movs	r3, #0
    a368:	22d8      	movs	r2, #216	; 0xd8
    a36a:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    a36c:	320c      	adds	r2, #12
    a36e:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    a370:	3ae3      	subs	r2, #227	; 0xe3
    a372:	ab03      	add	r3, sp, #12
    a374:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    a376:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a378:	2b00      	cmp	r3, #0
    a37a:	d007      	beq.n	a38c <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    a37c:	ae03      	add	r6, sp, #12
    a37e:	0032      	movs	r2, r6
    a380:	2103      	movs	r1, #3
    a382:	0020      	movs	r0, r4
    a384:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    a386:	7a33      	ldrb	r3, [r6, #8]
    a388:	2b01      	cmp	r3, #1
    a38a:	d103      	bne.n	a394 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    a38c:	2341      	movs	r3, #65	; 0x41
    a38e:	5ce3      	ldrb	r3, [r4, r3]
    a390:	079b      	lsls	r3, r3, #30
    a392:	d510      	bpl.n	a3b6 <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    a394:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a396:	18e9      	adds	r1, r5, r3
    a398:	0020      	movs	r0, r4
    a39a:	4b55      	ldr	r3, [pc, #340]	; (a4f0 <_http_client_handle_entity+0x210>)
    a39c:	4798      	blx	r3
	return 0;
    a39e:	2000      	movs	r0, #0
}
    a3a0:	b006      	add	sp, #24
    a3a2:	bc04      	pop	{r2}
    a3a4:	4691      	mov	r9, r2
    a3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    a3a8:	2200      	movs	r2, #0
    a3aa:	ab03      	add	r3, sp, #12
    a3ac:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    a3ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a3b0:	2b00      	cmp	r3, #0
    a3b2:	d0ef      	beq.n	a394 <_http_client_handle_entity+0xb4>
    a3b4:	e7e2      	b.n	a37c <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    a3b6:	484f      	ldr	r0, [pc, #316]	; (a4f4 <_http_client_handle_entity+0x214>)
    a3b8:	4b4f      	ldr	r3, [pc, #316]	; (a4f8 <_http_client_handle_entity+0x218>)
    a3ba:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    a3bc:	2100      	movs	r1, #0
    a3be:	0020      	movs	r0, r4
    a3c0:	4b4a      	ldr	r3, [pc, #296]	; (a4ec <_http_client_handle_entity+0x20c>)
    a3c2:	4798      	blx	r3
					return 0;
    a3c4:	2000      	movs	r0, #0
    a3c6:	e7eb      	b.n	a3a0 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    a3c8:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    a3ca:	2300      	movs	r3, #0
    a3cc:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    a3ce:	26e0      	movs	r6, #224	; 0xe0
    a3d0:	e00a      	b.n	a3e8 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    a3d2:	2341      	movs	r3, #65	; 0x41
    a3d4:	5ce3      	ldrb	r3, [r4, r3]
    a3d6:	079b      	lsls	r3, r3, #30
    a3d8:	d51b      	bpl.n	a412 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    a3da:	1ca9      	adds	r1, r5, #2
    a3dc:	0020      	movs	r0, r4
    a3de:	4b44      	ldr	r3, [pc, #272]	; (a4f0 <_http_client_handle_entity+0x210>)
    a3e0:	4798      	blx	r3
	} while(module->recved_size > 0);
    a3e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a3e4:	2b00      	cmp	r3, #0
    a3e6:	d073      	beq.n	a4d0 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    a3e8:	59a3      	ldr	r3, [r4, r6]
    a3ea:	2b00      	cmp	r3, #0
    a3ec:	db30      	blt.n	a450 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    a3ee:	d116      	bne.n	a41e <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    a3f0:	22d8      	movs	r2, #216	; 0xd8
    a3f2:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    a3f4:	320c      	adds	r2, #12
    a3f6:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    a3f8:	3ae3      	subs	r2, #227	; 0xe3
    a3fa:	4669      	mov	r1, sp
    a3fc:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    a3fe:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    a400:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    a402:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a404:	2b00      	cmp	r3, #0
    a406:	d0e4      	beq.n	a3d2 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    a408:	466a      	mov	r2, sp
    a40a:	2103      	movs	r1, #3
    a40c:	0020      	movs	r0, r4
    a40e:	4798      	blx	r3
    a410:	e7df      	b.n	a3d2 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    a412:	2100      	movs	r1, #0
    a414:	0020      	movs	r0, r4
    a416:	4b35      	ldr	r3, [pc, #212]	; (a4ec <_http_client_handle_entity+0x20c>)
    a418:	4798      	blx	r3
	return 0;
    a41a:	2000      	movs	r0, #0
    a41c:	e7c0      	b.n	a3a0 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    a41e:	42bb      	cmp	r3, r7
    a420:	dcdf      	bgt.n	a3e2 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    a422:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    a424:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    a426:	2300      	movs	r3, #0
    a428:	466a      	mov	r2, sp
    a42a:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    a42c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a42e:	2b00      	cmp	r3, #0
    a430:	d002      	beq.n	a438 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    a432:	2103      	movs	r1, #3
    a434:	0020      	movs	r0, r4
    a436:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    a438:	59a3      	ldr	r3, [r4, r6]
    a43a:	1c99      	adds	r1, r3, #2
    a43c:	1869      	adds	r1, r5, r1
    a43e:	0020      	movs	r0, r4
    a440:	4b2b      	ldr	r3, [pc, #172]	; (a4f0 <_http_client_handle_entity+0x210>)
    a442:	4798      	blx	r3
				length = (int)module->recved_size;
    a444:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    a446:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    a448:	2301      	movs	r3, #1
    a44a:	425b      	negs	r3, r3
    a44c:	51a3      	str	r3, [r4, r6]
    a44e:	e7c8      	b.n	a3e2 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    a450:	2300      	movs	r3, #0
    a452:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    a454:	2f00      	cmp	r7, #0
    a456:	dd04      	ble.n	a462 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    a458:	782b      	ldrb	r3, [r5, #0]
    a45a:	2b0a      	cmp	r3, #10
    a45c:	d11c      	bne.n	a498 <_http_client_handle_entity+0x1b8>
					buffer++;
    a45e:	3501      	adds	r5, #1
					length--;
    a460:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    a462:	59a3      	ldr	r3, [r4, r6]
    a464:	6e22      	ldr	r2, [r4, #96]	; 0x60
    a466:	4293      	cmp	r3, r2
    a468:	dc39      	bgt.n	a4de <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    a46a:	2f00      	cmp	r7, #0
    a46c:	d1b9      	bne.n	a3e2 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    a46e:	2201      	movs	r2, #1
    a470:	4252      	negs	r2, r2
    a472:	23e0      	movs	r3, #224	; 0xe0
    a474:	50e2      	str	r2, [r4, r3]
    a476:	e7d0      	b.n	a41a <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    a478:	001a      	movs	r2, r3
    a47a:	3a61      	subs	r2, #97	; 0x61
    a47c:	2a05      	cmp	r2, #5
    a47e:	d818      	bhi.n	a4b2 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    a480:	59a2      	ldr	r2, [r4, r6]
    a482:	0112      	lsls	r2, r2, #4
    a484:	18d3      	adds	r3, r2, r3
    a486:	3b61      	subs	r3, #97	; 0x61
    a488:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    a48a:	3501      	adds	r5, #1
    a48c:	3f01      	subs	r7, #1
    a48e:	2f00      	cmp	r7, #0
    a490:	d020      	beq.n	a4d4 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    a492:	782b      	ldrb	r3, [r5, #0]
    a494:	2b0a      	cmp	r3, #10
    a496:	d0e2      	beq.n	a45e <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    a498:	464a      	mov	r2, r9
    a49a:	2a00      	cmp	r2, #0
    a49c:	d1f5      	bne.n	a48a <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    a49e:	001a      	movs	r2, r3
    a4a0:	3a30      	subs	r2, #48	; 0x30
    a4a2:	2a09      	cmp	r2, #9
    a4a4:	d8e8      	bhi.n	a478 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    a4a6:	59a2      	ldr	r2, [r4, r6]
    a4a8:	0112      	lsls	r2, r2, #4
    a4aa:	18d3      	adds	r3, r2, r3
    a4ac:	3b30      	subs	r3, #48	; 0x30
    a4ae:	51a3      	str	r3, [r4, r6]
    a4b0:	e7eb      	b.n	a48a <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    a4b2:	001a      	movs	r2, r3
    a4b4:	3a41      	subs	r2, #65	; 0x41
    a4b6:	2a05      	cmp	r2, #5
    a4b8:	d805      	bhi.n	a4c6 <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    a4ba:	59a2      	ldr	r2, [r4, r6]
    a4bc:	0112      	lsls	r2, r2, #4
    a4be:	18d3      	adds	r3, r2, r3
    a4c0:	3b41      	subs	r3, #65	; 0x41
    a4c2:	51a3      	str	r3, [r4, r6]
    a4c4:	e7e1      	b.n	a48a <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    a4c6:	3b3b      	subs	r3, #59	; 0x3b
    a4c8:	425a      	negs	r2, r3
    a4ca:	415a      	adcs	r2, r3
    a4cc:	4691      	mov	r9, r2
    a4ce:	e7dc      	b.n	a48a <_http_client_handle_entity+0x1aa>
	return 0;
    a4d0:	2000      	movs	r0, #0
    a4d2:	e765      	b.n	a3a0 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    a4d4:	23e0      	movs	r3, #224	; 0xe0
    a4d6:	58e3      	ldr	r3, [r4, r3]
    a4d8:	6e22      	ldr	r2, [r4, #96]	; 0x60
    a4da:	4293      	cmp	r3, r2
    a4dc:	ddc7      	ble.n	a46e <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    a4de:	218b      	movs	r1, #139	; 0x8b
    a4e0:	4249      	negs	r1, r1
    a4e2:	0020      	movs	r0, r4
    a4e4:	4b01      	ldr	r3, [pc, #4]	; (a4ec <_http_client_handle_entity+0x20c>)
    a4e6:	4798      	blx	r3
    a4e8:	e797      	b.n	a41a <_http_client_handle_entity+0x13a>
    a4ea:	46c0      	nop			; (mov r8, r8)
    a4ec:	000098a5 	.word	0x000098a5
    a4f0:	0000a0fd 	.word	0x0000a0fd
    a4f4:	00015a70 	.word	0x00015a70
    a4f8:	0000f425 	.word	0x0000f425

0000a4fc <_http_client_handle_response>:
{
    a4fc:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    a4fe:	23d8      	movs	r3, #216	; 0xd8
    a500:	58c3      	ldr	r3, [r0, r3]
    a502:	2b00      	cmp	r3, #0
    a504:	d003      	beq.n	a50e <_http_client_handle_response+0x12>
    a506:	2b01      	cmp	r3, #1
    a508:	d004      	beq.n	a514 <_http_client_handle_response+0x18>
	return 0;
    a50a:	2000      	movs	r0, #0
    a50c:	e001      	b.n	a512 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    a50e:	4b03      	ldr	r3, [pc, #12]	; (a51c <_http_client_handle_response+0x20>)
    a510:	4798      	blx	r3
}
    a512:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    a514:	4b02      	ldr	r3, [pc, #8]	; (a520 <_http_client_handle_response+0x24>)
    a516:	4798      	blx	r3
    a518:	e7fb      	b.n	a512 <_http_client_handle_response+0x16>
    a51a:	46c0      	nop			; (mov r8, r8)
    a51c:	0000a121 	.word	0x0000a121
    a520:	0000a2e1 	.word	0x0000a2e1

0000a524 <_http_client_recved_packet>:
{
    a524:	b570      	push	{r4, r5, r6, lr}
    a526:	0004      	movs	r4, r0
	module->recved_size += read_len;
    a528:	6c43      	ldr	r3, [r0, #68]	; 0x44
    a52a:	469c      	mov	ip, r3
    a52c:	4461      	add	r1, ip
    a52e:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    a530:	2358      	movs	r3, #88	; 0x58
    a532:	5ac3      	ldrh	r3, [r0, r3]
    a534:	2b00      	cmp	r3, #0
    a536:	d105      	bne.n	a544 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    a538:	4d05      	ldr	r5, [pc, #20]	; (a550 <_http_client_recved_packet+0x2c>)
    a53a:	0020      	movs	r0, r4
    a53c:	47a8      	blx	r5
    a53e:	2800      	cmp	r0, #0
    a540:	d1fb      	bne.n	a53a <_http_client_recved_packet+0x16>
}
    a542:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    a544:	6c81      	ldr	r1, [r0, #72]	; 0x48
    a546:	6d40      	ldr	r0, [r0, #84]	; 0x54
    a548:	4b02      	ldr	r3, [pc, #8]	; (a554 <_http_client_recved_packet+0x30>)
    a54a:	4798      	blx	r3
    a54c:	e7f4      	b.n	a538 <_http_client_recved_packet+0x14>
    a54e:	46c0      	nop			; (mov r8, r8)
    a550:	0000a4fd 	.word	0x0000a4fd
    a554:	0000a8d1 	.word	0x0000a8d1

0000a558 <http_client_socket_event_handler>:
{
    a558:	b510      	push	{r4, lr}
    a55a:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    a55c:	0080      	lsls	r0, r0, #2
    a55e:	4b65      	ldr	r3, [pc, #404]	; (a6f4 <http_client_socket_event_handler+0x19c>)
    a560:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    a562:	2c00      	cmp	r4, #0
    a564:	d006      	beq.n	a574 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    a566:	2906      	cmp	r1, #6
    a568:	d051      	beq.n	a60e <http_client_socket_event_handler+0xb6>
    a56a:	2907      	cmp	r1, #7
    a56c:	d100      	bne.n	a570 <http_client_socket_event_handler+0x18>
    a56e:	e08a      	b.n	a686 <http_client_socket_event_handler+0x12e>
    a570:	2905      	cmp	r1, #5
    a572:	d001      	beq.n	a578 <http_client_socket_event_handler+0x20>
}
    a574:	b004      	add	sp, #16
    a576:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    a578:	2301      	movs	r3, #1
    a57a:	56d3      	ldrsb	r3, [r2, r3]
    a57c:	1e1a      	subs	r2, r3, #0
    a57e:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    a580:	db15      	blt.n	a5ae <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    a582:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a584:	2b00      	cmp	r3, #0
    a586:	d003      	beq.n	a590 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    a588:	aa01      	add	r2, sp, #4
    a58a:	2100      	movs	r1, #0
    a58c:	0020      	movs	r0, r4
    a58e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    a590:	2303      	movs	r3, #3
    a592:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    a594:	3355      	adds	r3, #85	; 0x55
    a596:	5ae2      	ldrh	r2, [r4, r3]
    a598:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a59a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    a59c:	4b56      	ldr	r3, [pc, #344]	; (a6f8 <http_client_socket_event_handler+0x1a0>)
    a59e:	4798      	blx	r3
    		_http_client_recv_packet(module);
    a5a0:	0020      	movs	r0, r4
    a5a2:	4b56      	ldr	r3, [pc, #344]	; (a6fc <http_client_socket_event_handler+0x1a4>)
    a5a4:	4798      	blx	r3
			_http_client_request(module);
    a5a6:	0020      	movs	r0, r4
    a5a8:	4b55      	ldr	r3, [pc, #340]	; (a700 <http_client_socket_event_handler+0x1a8>)
    a5aa:	4798      	blx	r3
    a5ac:	e7e2      	b.n	a574 <http_client_socket_event_handler+0x1c>
	switch (err) {
    a5ae:	330e      	adds	r3, #14
    a5b0:	b2d9      	uxtb	r1, r3
    a5b2:	290e      	cmp	r1, #14
    a5b4:	d81e      	bhi.n	a5f4 <http_client_socket_event_handler+0x9c>
    a5b6:	008b      	lsls	r3, r1, #2
    a5b8:	4952      	ldr	r1, [pc, #328]	; (a704 <http_client_socket_event_handler+0x1ac>)
    a5ba:	58cb      	ldr	r3, [r1, r3]
    a5bc:	469f      	mov	pc, r3
			return -ENOENT;
    a5be:	2102      	movs	r1, #2
    a5c0:	4249      	negs	r1, r1
    a5c2:	e01d      	b.n	a600 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    a5c4:	2170      	movs	r1, #112	; 0x70
    a5c6:	4249      	negs	r1, r1
    a5c8:	e01a      	b.n	a600 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    a5ca:	210c      	movs	r1, #12
    a5cc:	4249      	negs	r1, r1
    a5ce:	e017      	b.n	a600 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    a5d0:	2116      	movs	r1, #22
    a5d2:	4249      	negs	r1, r1
    a5d4:	e014      	b.n	a600 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    a5d6:	210c      	movs	r1, #12
    a5d8:	4249      	negs	r1, r1
    a5da:	e011      	b.n	a600 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    a5dc:	2179      	movs	r1, #121	; 0x79
    a5de:	4249      	negs	r1, r1
    a5e0:	e00e      	b.n	a600 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    a5e2:	2168      	movs	r1, #104	; 0x68
    a5e4:	4249      	negs	r1, r1
    a5e6:	e00b      	b.n	a600 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    a5e8:	210b      	movs	r1, #11
    a5ea:	4249      	negs	r1, r1
    a5ec:	e008      	b.n	a600 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    a5ee:	2110      	movs	r1, #16
    a5f0:	4249      	negs	r1, r1
    a5f2:	e005      	b.n	a600 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    a5f4:	2a00      	cmp	r2, #0
    a5f6:	db07      	blt.n	a608 <http_client_socket_event_handler+0xb0>
			return 0;
    a5f8:	2100      	movs	r1, #0
    a5fa:	e001      	b.n	a600 <http_client_socket_event_handler+0xa8>
			return -EIO;
    a5fc:	2105      	movs	r1, #5
    a5fe:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    a600:	0020      	movs	r0, r4
    a602:	4b41      	ldr	r3, [pc, #260]	; (a708 <http_client_socket_event_handler+0x1b0>)
    a604:	4798      	blx	r3
    a606:	e7b5      	b.n	a574 <http_client_socket_event_handler+0x1c>
				return -EIO;
    a608:	2105      	movs	r1, #5
    a60a:	4249      	negs	r1, r1
    a60c:	e7f8      	b.n	a600 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    a60e:	2304      	movs	r3, #4
    a610:	5ed1      	ldrsh	r1, [r2, r3]
    a612:	2900      	cmp	r1, #0
    a614:	dd06      	ble.n	a624 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    a616:	0020      	movs	r0, r4
    a618:	4b3c      	ldr	r3, [pc, #240]	; (a70c <http_client_socket_event_handler+0x1b4>)
    a61a:	4798      	blx	r3
		_http_client_recv_packet(module);
    a61c:	0020      	movs	r0, r4
    a61e:	4b37      	ldr	r3, [pc, #220]	; (a6fc <http_client_socket_event_handler+0x1a4>)
    a620:	4798      	blx	r3
		break;
    a622:	e7a7      	b.n	a574 <http_client_socket_event_handler+0x1c>
	switch (err) {
    a624:	000b      	movs	r3, r1
    a626:	330e      	adds	r3, #14
    a628:	b29a      	uxth	r2, r3
    a62a:	2a0e      	cmp	r2, #14
    a62c:	d81e      	bhi.n	a66c <http_client_socket_event_handler+0x114>
    a62e:	0093      	lsls	r3, r2, #2
    a630:	4a37      	ldr	r2, [pc, #220]	; (a710 <http_client_socket_event_handler+0x1b8>)
    a632:	58d3      	ldr	r3, [r2, r3]
    a634:	469f      	mov	pc, r3
			return -ENOENT;
    a636:	2102      	movs	r1, #2
    a638:	4249      	negs	r1, r1
    a63a:	e01d      	b.n	a678 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    a63c:	2170      	movs	r1, #112	; 0x70
    a63e:	4249      	negs	r1, r1
    a640:	e01a      	b.n	a678 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    a642:	210c      	movs	r1, #12
    a644:	4249      	negs	r1, r1
    a646:	e017      	b.n	a678 <http_client_socket_event_handler+0x120>
			return -EINVAL;
    a648:	2116      	movs	r1, #22
    a64a:	4249      	negs	r1, r1
    a64c:	e014      	b.n	a678 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    a64e:	210c      	movs	r1, #12
    a650:	4249      	negs	r1, r1
    a652:	e011      	b.n	a678 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    a654:	2179      	movs	r1, #121	; 0x79
    a656:	4249      	negs	r1, r1
    a658:	e00e      	b.n	a678 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    a65a:	2168      	movs	r1, #104	; 0x68
    a65c:	4249      	negs	r1, r1
    a65e:	e00b      	b.n	a678 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    a660:	210b      	movs	r1, #11
    a662:	4249      	negs	r1, r1
    a664:	e008      	b.n	a678 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    a666:	2110      	movs	r1, #16
    a668:	4249      	negs	r1, r1
    a66a:	e005      	b.n	a678 <http_client_socket_event_handler+0x120>
			if (err < 0) {
    a66c:	2900      	cmp	r1, #0
    a66e:	db07      	blt.n	a680 <http_client_socket_event_handler+0x128>
			return 0;
    a670:	2100      	movs	r1, #0
    a672:	e001      	b.n	a678 <http_client_socket_event_handler+0x120>
			return -EIO;
    a674:	2105      	movs	r1, #5
    a676:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    a678:	0020      	movs	r0, r4
    a67a:	4b23      	ldr	r3, [pc, #140]	; (a708 <http_client_socket_event_handler+0x1b0>)
    a67c:	4798      	blx	r3
    a67e:	e7cd      	b.n	a61c <http_client_socket_event_handler+0xc4>
				return -EIO;
    a680:	2105      	movs	r1, #5
    a682:	4249      	negs	r1, r1
    a684:	e7f8      	b.n	a678 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    a686:	2300      	movs	r3, #0
    a688:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    a68a:	2b00      	cmp	r3, #0
    a68c:	db08      	blt.n	a6a0 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    a68e:	0020      	movs	r0, r4
    a690:	4b1b      	ldr	r3, [pc, #108]	; (a700 <http_client_socket_event_handler+0x1a8>)
    a692:	4798      	blx	r3
		module->sending = 0;
    a694:	2241      	movs	r2, #65	; 0x41
    a696:	5ca3      	ldrb	r3, [r4, r2]
    a698:	2101      	movs	r1, #1
    a69a:	438b      	bics	r3, r1
    a69c:	54a3      	strb	r3, [r4, r2]
    	break;
    a69e:	e769      	b.n	a574 <http_client_socket_event_handler+0x1c>
	switch (err) {
    a6a0:	330e      	adds	r3, #14
    a6a2:	b29a      	uxth	r2, r3
    a6a4:	2a0d      	cmp	r2, #13
    a6a6:	d81e      	bhi.n	a6e6 <http_client_socket_event_handler+0x18e>
    a6a8:	0093      	lsls	r3, r2, #2
    a6aa:	4a1a      	ldr	r2, [pc, #104]	; (a714 <http_client_socket_event_handler+0x1bc>)
    a6ac:	58d3      	ldr	r3, [r2, r3]
    a6ae:	469f      	mov	pc, r3
			return -ENOENT;
    a6b0:	2102      	movs	r1, #2
    a6b2:	4249      	negs	r1, r1
    a6b4:	e019      	b.n	a6ea <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    a6b6:	2170      	movs	r1, #112	; 0x70
    a6b8:	4249      	negs	r1, r1
    a6ba:	e016      	b.n	a6ea <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    a6bc:	210c      	movs	r1, #12
    a6be:	4249      	negs	r1, r1
    a6c0:	e013      	b.n	a6ea <http_client_socket_event_handler+0x192>
			return -EINVAL;
    a6c2:	2116      	movs	r1, #22
    a6c4:	4249      	negs	r1, r1
    a6c6:	e010      	b.n	a6ea <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    a6c8:	210c      	movs	r1, #12
    a6ca:	4249      	negs	r1, r1
    a6cc:	e00d      	b.n	a6ea <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    a6ce:	2179      	movs	r1, #121	; 0x79
    a6d0:	4249      	negs	r1, r1
    a6d2:	e00a      	b.n	a6ea <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    a6d4:	2168      	movs	r1, #104	; 0x68
    a6d6:	4249      	negs	r1, r1
    a6d8:	e007      	b.n	a6ea <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    a6da:	210b      	movs	r1, #11
    a6dc:	4249      	negs	r1, r1
    a6de:	e004      	b.n	a6ea <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    a6e0:	2110      	movs	r1, #16
    a6e2:	4249      	negs	r1, r1
    a6e4:	e001      	b.n	a6ea <http_client_socket_event_handler+0x192>
			return -EIO;
    a6e6:	2105      	movs	r1, #5
    a6e8:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    a6ea:	0020      	movs	r0, r4
    a6ec:	4b06      	ldr	r3, [pc, #24]	; (a708 <http_client_socket_event_handler+0x1b0>)
    a6ee:	4798      	blx	r3
    a6f0:	e7d0      	b.n	a694 <http_client_socket_event_handler+0x13c>
    a6f2:	46c0      	nop			; (mov r8, r8)
    a6f4:	2000022c 	.word	0x2000022c
    a6f8:	0000a8a5 	.word	0x0000a8a5
    a6fc:	0000a0c5 	.word	0x0000a0c5
    a700:	000099bd 	.word	0x000099bd
    a704:	000159b0 	.word	0x000159b0
    a708:	000098a5 	.word	0x000098a5
    a70c:	0000a525 	.word	0x0000a525
    a710:	000159ec 	.word	0x000159ec
    a714:	00015a28 	.word	0x00015a28

0000a718 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    a718:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    a71a:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    a71c:	2200      	movs	r2, #0
    a71e:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    a720:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    a722:	9b00      	ldr	r3, [sp, #0]
    a724:	60c3      	str	r3, [r0, #12]
}
    a726:	4770      	bx	lr

0000a728 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    a728:	b510      	push	{r4, lr}
    a72a:	0004      	movs	r4, r0
	if(writer->written > 0) {
    a72c:	6842      	ldr	r2, [r0, #4]
    a72e:	2a00      	cmp	r2, #0
    a730:	d100      	bne.n	a734 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    a732:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    a734:	6901      	ldr	r1, [r0, #16]
    a736:	68c0      	ldr	r0, [r0, #12]
    a738:	68a3      	ldr	r3, [r4, #8]
    a73a:	4798      	blx	r3
		writer->written = 0;
    a73c:	2300      	movs	r3, #0
    a73e:	6063      	str	r3, [r4, #4]
}
    a740:	e7f7      	b.n	a732 <stream_writer_send_remain+0xa>
	...

0000a744 <stream_writer_send_8>:
{
    a744:	b570      	push	{r4, r5, r6, lr}
    a746:	0004      	movs	r4, r0
    a748:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    a74a:	6803      	ldr	r3, [r0, #0]
    a74c:	6842      	ldr	r2, [r0, #4]
    a74e:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    a750:	2b00      	cmp	r3, #0
    a752:	dd05      	ble.n	a760 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    a754:	6922      	ldr	r2, [r4, #16]
    a756:	6863      	ldr	r3, [r4, #4]
    a758:	1c59      	adds	r1, r3, #1
    a75a:	6061      	str	r1, [r4, #4]
    a75c:	54d5      	strb	r5, [r2, r3]
}
    a75e:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    a760:	4b01      	ldr	r3, [pc, #4]	; (a768 <stream_writer_send_8+0x24>)
    a762:	4798      	blx	r3
    a764:	e7f6      	b.n	a754 <stream_writer_send_8+0x10>
    a766:	46c0      	nop			; (mov r8, r8)
    a768:	0000a729 	.word	0x0000a729

0000a76c <stream_writer_send_buffer>:
{
    a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a76e:	0006      	movs	r6, r0
    a770:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    a772:	2a00      	cmp	r2, #0
    a774:	d008      	beq.n	a788 <stream_writer_send_buffer+0x1c>
    a776:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    a778:	4f04      	ldr	r7, [pc, #16]	; (a78c <stream_writer_send_buffer+0x20>)
    a77a:	2100      	movs	r1, #0
    a77c:	5661      	ldrsb	r1, [r4, r1]
    a77e:	0030      	movs	r0, r6
    a780:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    a782:	3401      	adds	r4, #1
    a784:	42a5      	cmp	r5, r4
    a786:	d1f8      	bne.n	a77a <stream_writer_send_buffer+0xe>
}
    a788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a78a:	46c0      	nop			; (mov r8, r8)
    a78c:	0000a745 	.word	0x0000a745

0000a790 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    a790:	4a02      	ldr	r2, [pc, #8]	; (a79c <sw_timer_tcc_callback+0xc>)
    a792:	6813      	ldr	r3, [r2, #0]
    a794:	3301      	adds	r3, #1
    a796:	6013      	str	r3, [r2, #0]
}
    a798:	4770      	bx	lr
    a79a:	46c0      	nop			; (mov r8, r8)
    a79c:	20000248 	.word	0x20000248

0000a7a0 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    a7a0:	2364      	movs	r3, #100	; 0x64
    a7a2:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    a7a4:	2300      	movs	r3, #0
    a7a6:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    a7a8:	7043      	strb	r3, [r0, #1]
}
    a7aa:	4770      	bx	lr

0000a7ac <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    a7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7ae:	46c6      	mov	lr, r8
    a7b0:	b500      	push	{lr}
    a7b2:	b0ac      	sub	sp, #176	; 0xb0
    a7b4:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    a7b6:	466e      	mov	r6, sp
    a7b8:	4b1d      	ldr	r3, [pc, #116]	; (a830 <sw_timer_init+0x84>)
    a7ba:	466a      	mov	r2, sp
    a7bc:	cb92      	ldmia	r3!, {r1, r4, r7}
    a7be:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    a7c0:	886b      	ldrh	r3, [r5, #2]
    a7c2:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    a7c4:	3014      	adds	r0, #20
    a7c6:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    a7c8:	782b      	ldrb	r3, [r5, #0]
    a7ca:	009b      	lsls	r3, r3, #2
    a7cc:	5999      	ldr	r1, [r3, r6]
    a7ce:	0017      	movs	r7, r2
    a7d0:	0010      	movs	r0, r2
    a7d2:	4b18      	ldr	r3, [pc, #96]	; (a834 <sw_timer_init+0x88>)
    a7d4:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    a7d6:	2000      	movs	r0, #0
    a7d8:	4b17      	ldr	r3, [pc, #92]	; (a838 <sw_timer_init+0x8c>)
    a7da:	4798      	blx	r3
    a7dc:	4b17      	ldr	r3, [pc, #92]	; (a83c <sw_timer_init+0x90>)
    a7de:	7a1b      	ldrb	r3, [r3, #8]
    a7e0:	b2db      	uxtb	r3, r3
    a7e2:	40d8      	lsrs	r0, r3
    a7e4:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    a7e6:	8869      	ldrh	r1, [r5, #2]
    a7e8:	20fa      	movs	r0, #250	; 0xfa
    a7ea:	0200      	lsls	r0, r0, #8
    a7ec:	4b14      	ldr	r3, [pc, #80]	; (a840 <sw_timer_init+0x94>)
    a7ee:	4798      	blx	r3
    a7f0:	0001      	movs	r1, r0
    a7f2:	4640      	mov	r0, r8
    a7f4:	4b13      	ldr	r3, [pc, #76]	; (a844 <sw_timer_init+0x98>)
    a7f6:	4798      	blx	r3
    a7f8:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    a7fa:	2305      	movs	r3, #5
    a7fc:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    a7fe:	782b      	ldrb	r3, [r5, #0]
    a800:	009b      	lsls	r3, r3, #2
    a802:	5999      	ldr	r1, [r3, r6]
    a804:	003a      	movs	r2, r7
    a806:	0020      	movs	r0, r4
    a808:	4b0f      	ldr	r3, [pc, #60]	; (a848 <sw_timer_init+0x9c>)
    a80a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    a80c:	786a      	ldrb	r2, [r5, #1]
    a80e:	3208      	adds	r2, #8
    a810:	b2d2      	uxtb	r2, r2
    a812:	490e      	ldr	r1, [pc, #56]	; (a84c <sw_timer_init+0xa0>)
    a814:	0020      	movs	r0, r4
    a816:	4b0e      	ldr	r3, [pc, #56]	; (a850 <sw_timer_init+0xa4>)
    a818:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    a81a:	7869      	ldrb	r1, [r5, #1]
    a81c:	3108      	adds	r1, #8
    a81e:	b2c9      	uxtb	r1, r1
    a820:	0020      	movs	r0, r4
    a822:	4b0c      	ldr	r3, [pc, #48]	; (a854 <sw_timer_init+0xa8>)
    a824:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    a826:	b02c      	add	sp, #176	; 0xb0
    a828:	bc04      	pop	{r2}
    a82a:	4690      	mov	r8, r2
    a82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a82e:	46c0      	nop			; (mov r8, r8)
    a830:	00015b98 	.word	0x00015b98
    a834:	0000a96d 	.word	0x0000a96d
    a838:	0000e1b9 	.word	0x0000e1b9
    a83c:	40000400 	.word	0x40000400
    a840:	000119fd 	.word	0x000119fd
    a844:	000118e9 	.word	0x000118e9
    a848:	0000aab9 	.word	0x0000aab9
    a84c:	0000a791 	.word	0x0000a791
    a850:	0000aec5 	.word	0x0000aec5
    a854:	0000aedd 	.word	0x0000aedd

0000a858 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    a858:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    a85a:	2102      	movs	r1, #2
    a85c:	6893      	ldr	r3, [r2, #8]
    a85e:	4219      	tst	r1, r3
    a860:	d1fc      	bne.n	a85c <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    a862:	6813      	ldr	r3, [r2, #0]
    a864:	2102      	movs	r1, #2
    a866:	430b      	orrs	r3, r1
    a868:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    a86a:	4770      	bx	lr

0000a86c <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    a86c:	b570      	push	{r4, r5, r6, lr}
    a86e:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    a870:	7805      	ldrb	r5, [r0, #0]
    a872:	07e8      	lsls	r0, r5, #31
    a874:	d502      	bpl.n	a87c <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    a876:	2001      	movs	r0, #1
    a878:	4240      	negs	r0, r0
}
    a87a:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    a87c:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    a87e:	0029      	movs	r1, r5
    a880:	2002      	movs	r0, #2
    a882:	4381      	bics	r1, r0
    a884:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    a886:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    a888:	6d61      	ldr	r1, [r4, #84]	; 0x54
    a88a:	0018      	movs	r0, r3
    a88c:	4b04      	ldr	r3, [pc, #16]	; (a8a0 <sw_timer_register_callback+0x34>)
    a88e:	4798      	blx	r3
    a890:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    a892:	7823      	ldrb	r3, [r4, #0]
    a894:	2201      	movs	r2, #1
    a896:	4313      	orrs	r3, r2
    a898:	7023      	strb	r3, [r4, #0]
			return index;
    a89a:	2000      	movs	r0, #0
    a89c:	e7ed      	b.n	a87a <sw_timer_register_callback+0xe>
    a89e:	46c0      	nop			; (mov r8, r8)
    a8a0:	000118e9 	.word	0x000118e9

0000a8a4 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    a8a4:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    a8a6:	008b      	lsls	r3, r1, #2
    a8a8:	185d      	adds	r5, r3, r1
    a8aa:	00ad      	lsls	r5, r5, #2
    a8ac:	5c29      	ldrb	r1, [r5, r0]
    a8ae:	2602      	movs	r6, #2
    a8b0:	4331      	orrs	r1, r6
    a8b2:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    a8b4:	1944      	adds	r4, r0, r5
    a8b6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    a8b8:	0010      	movs	r0, r2
    a8ba:	4b03      	ldr	r3, [pc, #12]	; (a8c8 <sw_timer_enable_callback+0x24>)
    a8bc:	4798      	blx	r3
    a8be:	4b03      	ldr	r3, [pc, #12]	; (a8cc <sw_timer_enable_callback+0x28>)
    a8c0:	681b      	ldr	r3, [r3, #0]
    a8c2:	18c0      	adds	r0, r0, r3
    a8c4:	6120      	str	r0, [r4, #16]
}
    a8c6:	bd70      	pop	{r4, r5, r6, pc}
    a8c8:	000118e9 	.word	0x000118e9
    a8cc:	20000248 	.word	0x20000248

0000a8d0 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    a8d0:	008b      	lsls	r3, r1, #2
    a8d2:	1859      	adds	r1, r3, r1
    a8d4:	0089      	lsls	r1, r1, #2
    a8d6:	5c0b      	ldrb	r3, [r1, r0]
    a8d8:	2202      	movs	r2, #2
    a8da:	4393      	bics	r3, r2
    a8dc:	540b      	strb	r3, [r1, r0]
}
    a8de:	4770      	bx	lr

0000a8e0 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    a8e0:	b570      	push	{r4, r5, r6, lr}
    a8e2:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    a8e4:	7803      	ldrb	r3, [r0, #0]
    a8e6:	07db      	lsls	r3, r3, #31
    a8e8:	d507      	bpl.n	a8fa <sw_timer_task+0x1a>
    a8ea:	7803      	ldrb	r3, [r0, #0]
    a8ec:	079b      	lsls	r3, r3, #30
    a8ee:	d504      	bpl.n	a8fa <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    a8f0:	4b10      	ldr	r3, [pc, #64]	; (a934 <sw_timer_task+0x54>)
    a8f2:	681a      	ldr	r2, [r3, #0]
    a8f4:	6903      	ldr	r3, [r0, #16]
    a8f6:	1a9b      	subs	r3, r3, r2
    a8f8:	d400      	bmi.n	a8fc <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    a8fa:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    a8fc:	7803      	ldrb	r3, [r0, #0]
    a8fe:	075b      	lsls	r3, r3, #29
    a900:	d4fb      	bmi.n	a8fa <sw_timer_task+0x1a>
				handler->busy = 1;
    a902:	7803      	ldrb	r3, [r0, #0]
    a904:	2104      	movs	r1, #4
    a906:	430b      	orrs	r3, r1
    a908:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
    a90a:	68c3      	ldr	r3, [r0, #12]
    a90c:	2b00      	cmp	r3, #0
    a90e:	d00b      	beq.n	a928 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
    a910:	18d2      	adds	r2, r2, r3
    a912:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
    a914:	68a2      	ldr	r2, [r4, #8]
    a916:	2100      	movs	r1, #0
    a918:	0020      	movs	r0, r4
    a91a:	6865      	ldr	r5, [r4, #4]
    a91c:	47a8      	blx	r5
				handler->busy = 0;
    a91e:	7823      	ldrb	r3, [r4, #0]
    a920:	2204      	movs	r2, #4
    a922:	4393      	bics	r3, r2
    a924:	7023      	strb	r3, [r4, #0]
}
    a926:	e7e8      	b.n	a8fa <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    a928:	7802      	ldrb	r2, [r0, #0]
    a92a:	2102      	movs	r1, #2
    a92c:	438a      	bics	r2, r1
    a92e:	7002      	strb	r2, [r0, #0]
    a930:	e7f0      	b.n	a914 <sw_timer_task+0x34>
    a932:	46c0      	nop			; (mov r8, r8)
    a934:	20000248 	.word	0x20000248

0000a938 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    a938:	4b09      	ldr	r3, [pc, #36]	; (a960 <_tcc_get_inst_index+0x28>)
    a93a:	4298      	cmp	r0, r3
    a93c:	d00c      	beq.n	a958 <_tcc_get_inst_index+0x20>
    a93e:	4b09      	ldr	r3, [pc, #36]	; (a964 <_tcc_get_inst_index+0x2c>)
    a940:	4298      	cmp	r0, r3
    a942:	d007      	beq.n	a954 <_tcc_get_inst_index+0x1c>
    a944:	4a08      	ldr	r2, [pc, #32]	; (a968 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    a946:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    a948:	4290      	cmp	r0, r2
    a94a:	d001      	beq.n	a950 <_tcc_get_inst_index+0x18>
}
    a94c:	0018      	movs	r0, r3
    a94e:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    a950:	3302      	adds	r3, #2
    a952:	e002      	b.n	a95a <_tcc_get_inst_index+0x22>
    a954:	2301      	movs	r3, #1
    a956:	e000      	b.n	a95a <_tcc_get_inst_index+0x22>
    a958:	2300      	movs	r3, #0
			return i;
    a95a:	b2db      	uxtb	r3, r3
    a95c:	e7f6      	b.n	a94c <_tcc_get_inst_index+0x14>
    a95e:	46c0      	nop			; (mov r8, r8)
    a960:	42002000 	.word	0x42002000
    a964:	42002400 	.word	0x42002400
    a968:	42002800 	.word	0x42002800

0000a96c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    a96c:	b510      	push	{r4, lr}
    a96e:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    a970:	0008      	movs	r0, r1
    a972:	4b4f      	ldr	r3, [pc, #316]	; (aab0 <tcc_get_config_defaults+0x144>)
    a974:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    a976:	2300      	movs	r3, #0
    a978:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    a97a:	0080      	lsls	r0, r0, #2
    a97c:	4a4d      	ldr	r2, [pc, #308]	; (aab4 <tcc_get_config_defaults+0x148>)
    a97e:	5882      	ldr	r2, [r0, r2]
    a980:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    a982:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    a984:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    a986:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    a988:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    a98a:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    a98c:	61e3      	str	r3, [r4, #28]
    a98e:	6223      	str	r3, [r4, #32]
    a990:	6263      	str	r3, [r4, #36]	; 0x24
    a992:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    a994:	7523      	strb	r3, [r4, #20]
    a996:	7563      	strb	r3, [r4, #21]
    a998:	75a3      	strb	r3, [r4, #22]
    a99a:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    a99c:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    a99e:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    a9a0:	7423      	strb	r3, [r4, #16]
    a9a2:	7463      	strb	r3, [r4, #17]
    a9a4:	74a3      	strb	r3, [r4, #18]
    a9a6:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    a9a8:	222c      	movs	r2, #44	; 0x2c
    a9aa:	54a3      	strb	r3, [r4, r2]
    a9ac:	3201      	adds	r2, #1
    a9ae:	54a3      	strb	r3, [r4, r2]
    a9b0:	3201      	adds	r2, #1
    a9b2:	54a3      	strb	r3, [r4, r2]
    a9b4:	3201      	adds	r2, #1
    a9b6:	54a3      	strb	r3, [r4, r2]
    a9b8:	3201      	adds	r2, #1
    a9ba:	54a3      	strb	r3, [r4, r2]
    a9bc:	3201      	adds	r2, #1
    a9be:	54a3      	strb	r3, [r4, r2]
    a9c0:	3201      	adds	r2, #1
    a9c2:	54a3      	strb	r3, [r4, r2]
    a9c4:	3201      	adds	r2, #1
    a9c6:	54a3      	strb	r3, [r4, r2]
    a9c8:	3201      	adds	r2, #1
    a9ca:	54a3      	strb	r3, [r4, r2]
    a9cc:	3201      	adds	r2, #1
    a9ce:	54a3      	strb	r3, [r4, r2]
    a9d0:	3201      	adds	r2, #1
    a9d2:	54a3      	strb	r3, [r4, r2]
    a9d4:	3201      	adds	r2, #1
    a9d6:	54a3      	strb	r3, [r4, r2]
    a9d8:	3201      	adds	r2, #1
    a9da:	54a3      	strb	r3, [r4, r2]
    a9dc:	3201      	adds	r2, #1
    a9de:	54a3      	strb	r3, [r4, r2]
    a9e0:	3201      	adds	r2, #1
    a9e2:	54a3      	strb	r3, [r4, r2]
    a9e4:	3201      	adds	r2, #1
    a9e6:	54a3      	strb	r3, [r4, r2]
    a9e8:	3201      	adds	r2, #1
    a9ea:	54a3      	strb	r3, [r4, r2]
    a9ec:	3201      	adds	r2, #1
    a9ee:	54a3      	strb	r3, [r4, r2]
    a9f0:	3201      	adds	r2, #1
    a9f2:	54a3      	strb	r3, [r4, r2]
    a9f4:	3201      	adds	r2, #1
    a9f6:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    a9f8:	3201      	adds	r2, #1
    a9fa:	54a3      	strb	r3, [r4, r2]
    a9fc:	3201      	adds	r2, #1
    a9fe:	54a3      	strb	r3, [r4, r2]
    aa00:	3201      	adds	r2, #1
    aa02:	54a3      	strb	r3, [r4, r2]
    aa04:	3201      	adds	r2, #1
    aa06:	54a3      	strb	r3, [r4, r2]
    aa08:	3201      	adds	r2, #1
    aa0a:	54a3      	strb	r3, [r4, r2]
    aa0c:	3201      	adds	r2, #1
    aa0e:	54a3      	strb	r3, [r4, r2]
    aa10:	3201      	adds	r2, #1
    aa12:	54a3      	strb	r3, [r4, r2]
    aa14:	3201      	adds	r2, #1
    aa16:	54a3      	strb	r3, [r4, r2]
    aa18:	3201      	adds	r2, #1
    aa1a:	54a3      	strb	r3, [r4, r2]
    aa1c:	3201      	adds	r2, #1
    aa1e:	54a3      	strb	r3, [r4, r2]
    aa20:	3201      	adds	r2, #1
    aa22:	54a3      	strb	r3, [r4, r2]
    aa24:	3201      	adds	r2, #1
    aa26:	54a3      	strb	r3, [r4, r2]
    aa28:	3201      	adds	r2, #1
    aa2a:	54a3      	strb	r3, [r4, r2]
    aa2c:	3201      	adds	r2, #1
    aa2e:	54a3      	strb	r3, [r4, r2]
    aa30:	3201      	adds	r2, #1
    aa32:	54a3      	strb	r3, [r4, r2]
    aa34:	3201      	adds	r2, #1
    aa36:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    aa38:	3201      	adds	r2, #1
    aa3a:	54a3      	strb	r3, [r4, r2]
    aa3c:	3201      	adds	r2, #1
    aa3e:	54a3      	strb	r3, [r4, r2]
    aa40:	3201      	adds	r2, #1
    aa42:	54a3      	strb	r3, [r4, r2]
    aa44:	3201      	adds	r2, #1
    aa46:	54a3      	strb	r3, [r4, r2]
    aa48:	3201      	adds	r2, #1
    aa4a:	54a3      	strb	r3, [r4, r2]
    aa4c:	3201      	adds	r2, #1
    aa4e:	54a3      	strb	r3, [r4, r2]
    aa50:	3201      	adds	r2, #1
    aa52:	54a3      	strb	r3, [r4, r2]
    aa54:	3201      	adds	r2, #1
    aa56:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    aa58:	3241      	adds	r2, #65	; 0x41
    aa5a:	54a3      	strb	r3, [r4, r2]
    aa5c:	65a3      	str	r3, [r4, #88]	; 0x58
    aa5e:	67a3      	str	r3, [r4, #120]	; 0x78
    aa60:	3201      	adds	r2, #1
    aa62:	54a3      	strb	r3, [r4, r2]
    aa64:	65e3      	str	r3, [r4, #92]	; 0x5c
    aa66:	67e3      	str	r3, [r4, #124]	; 0x7c
    aa68:	3201      	adds	r2, #1
    aa6a:	54a3      	strb	r3, [r4, r2]
    aa6c:	6623      	str	r3, [r4, #96]	; 0x60
    aa6e:	3a1a      	subs	r2, #26
    aa70:	50a3      	str	r3, [r4, r2]
    aa72:	321b      	adds	r2, #27
    aa74:	54a3      	strb	r3, [r4, r2]
    aa76:	6663      	str	r3, [r4, #100]	; 0x64
    aa78:	3a17      	subs	r2, #23
    aa7a:	50a3      	str	r3, [r4, r2]
    aa7c:	3218      	adds	r2, #24
    aa7e:	54a3      	strb	r3, [r4, r2]
    aa80:	66a3      	str	r3, [r4, #104]	; 0x68
    aa82:	3a14      	subs	r2, #20
    aa84:	50a3      	str	r3, [r4, r2]
    aa86:	3215      	adds	r2, #21
    aa88:	54a3      	strb	r3, [r4, r2]
    aa8a:	66e3      	str	r3, [r4, #108]	; 0x6c
    aa8c:	3a11      	subs	r2, #17
    aa8e:	50a3      	str	r3, [r4, r2]
    aa90:	3212      	adds	r2, #18
    aa92:	54a3      	strb	r3, [r4, r2]
    aa94:	6723      	str	r3, [r4, #112]	; 0x70
    aa96:	3a0e      	subs	r2, #14
    aa98:	50a3      	str	r3, [r4, r2]
    aa9a:	320f      	adds	r2, #15
    aa9c:	54a3      	strb	r3, [r4, r2]
    aa9e:	6763      	str	r3, [r4, #116]	; 0x74
    aaa0:	3a0b      	subs	r2, #11
    aaa2:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    aaa4:	2101      	movs	r1, #1
    aaa6:	320c      	adds	r2, #12
    aaa8:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    aaaa:	3201      	adds	r2, #1
    aaac:	54a3      	strb	r3, [r4, r2]
}
    aaae:	bd10      	pop	{r4, pc}
    aab0:	0000a939 	.word	0x0000a939
    aab4:	00015bb8 	.word	0x00015bb8

0000aab8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    aab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    aaba:	46de      	mov	lr, fp
    aabc:	4657      	mov	r7, sl
    aabe:	464e      	mov	r6, r9
    aac0:	4645      	mov	r5, r8
    aac2:	b5e0      	push	{r5, r6, r7, lr}
    aac4:	b091      	sub	sp, #68	; 0x44
    aac6:	9001      	str	r0, [sp, #4]
    aac8:	000c      	movs	r4, r1
    aaca:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    aacc:	0008      	movs	r0, r1
    aace:	4bc3      	ldr	r3, [pc, #780]	; (addc <tcc_init+0x324>)
    aad0:	4798      	blx	r3
    aad2:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    aad4:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    aad6:	48c2      	ldr	r0, [pc, #776]	; (ade0 <tcc_init+0x328>)
    aad8:	6a02      	ldr	r2, [r0, #32]
    aada:	009e      	lsls	r6, r3, #2
    aadc:	4fc1      	ldr	r7, [pc, #772]	; (ade4 <tcc_init+0x32c>)
    aade:	59f7      	ldr	r7, [r6, r7]
    aae0:	433a      	orrs	r2, r7
    aae2:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    aae4:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    aae6:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    aae8:	0792      	lsls	r2, r2, #30
    aaea:	d506      	bpl.n	aafa <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    aaec:	b011      	add	sp, #68	; 0x44
    aaee:	bc3c      	pop	{r2, r3, r4, r5}
    aaf0:	4690      	mov	r8, r2
    aaf2:	4699      	mov	r9, r3
    aaf4:	46a2      	mov	sl, r4
    aaf6:	46ab      	mov	fp, r5
    aaf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    aafa:	6822      	ldr	r2, [r4, #0]
    aafc:	2701      	movs	r7, #1
    aafe:	4017      	ands	r7, r2
    ab00:	d1f4      	bne.n	aaec <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    ab02:	48b9      	ldr	r0, [pc, #740]	; (ade8 <tcc_init+0x330>)
    ab04:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    ab06:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    ab08:	682e      	ldr	r6, [r5, #0]
    ab0a:	42b2      	cmp	r2, r6
    ab0c:	d3ee      	bcc.n	aaec <tcc_init+0x34>
		|| (config->counter.period > count_max)
    ab0e:	686e      	ldr	r6, [r5, #4]
    ab10:	42b2      	cmp	r2, r6
    ab12:	d3eb      	bcc.n	aaec <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    ab14:	69e8      	ldr	r0, [r5, #28]
    ab16:	4282      	cmp	r2, r0
    ab18:	d200      	bcs.n	ab1c <tcc_init+0x64>
    ab1a:	e1b9      	b.n	ae90 <tcc_init+0x3d8>
    ab1c:	6a28      	ldr	r0, [r5, #32]
    ab1e:	4282      	cmp	r2, r0
    ab20:	d200      	bcs.n	ab24 <tcc_init+0x6c>
    ab22:	e1b7      	b.n	ae94 <tcc_init+0x3dc>
    ab24:	6a68      	ldr	r0, [r5, #36]	; 0x24
    ab26:	4282      	cmp	r2, r0
    ab28:	d200      	bcs.n	ab2c <tcc_init+0x74>
    ab2a:	e1b5      	b.n	ae98 <tcc_init+0x3e0>
    ab2c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    ab2e:	4282      	cmp	r2, r0
    ab30:	d200      	bcs.n	ab34 <tcc_init+0x7c>
    ab32:	e1b3      	b.n	ae9c <tcc_init+0x3e4>
    ab34:	2298      	movs	r2, #152	; 0x98
    ab36:	4694      	mov	ip, r2
    ab38:	44ac      	add	ip, r5
    ab3a:	4662      	mov	r2, ip
    ab3c:	9208      	str	r2, [sp, #32]
    ab3e:	2000      	movs	r0, #0
    ab40:	e003      	b.n	ab4a <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    ab42:	3001      	adds	r0, #1
    ab44:	3201      	adds	r2, #1
    ab46:	2808      	cmp	r0, #8
    ab48:	d008      	beq.n	ab5c <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    ab4a:	7816      	ldrb	r6, [r2, #0]
    ab4c:	2e00      	cmp	r6, #0
    ab4e:	d0f8      	beq.n	ab42 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    ab50:	4ea6      	ldr	r6, [pc, #664]	; (adec <tcc_init+0x334>)
    ab52:	5c76      	ldrb	r6, [r6, r1]
    ab54:	4286      	cmp	r6, r0
    ab56:	dcf4      	bgt.n	ab42 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    ab58:	2017      	movs	r0, #23
    ab5a:	e7c7      	b.n	aaec <tcc_init+0x34>
    ab5c:	2200      	movs	r2, #0
    ab5e:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    ab60:	2080      	movs	r0, #128	; 0x80
    ab62:	0440      	lsls	r0, r0, #17
    ab64:	4684      	mov	ip, r0
    ab66:	e002      	b.n	ab6e <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    ab68:	3201      	adds	r2, #1
    ab6a:	2a04      	cmp	r2, #4
    ab6c:	d00e      	beq.n	ab8c <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    ab6e:	18a8      	adds	r0, r5, r2
    ab70:	7c00      	ldrb	r0, [r0, #16]
    ab72:	2801      	cmp	r0, #1
    ab74:	d1f8      	bne.n	ab68 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    ab76:	489e      	ldr	r0, [pc, #632]	; (adf0 <tcc_init+0x338>)
    ab78:	5c40      	ldrb	r0, [r0, r1]
    ab7a:	4290      	cmp	r0, r2
    ab7c:	da00      	bge.n	ab80 <tcc_init+0xc8>
    ab7e:	e18f      	b.n	aea0 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    ab80:	4660      	mov	r0, ip
    ab82:	4090      	lsls	r0, r2
    ab84:	9e02      	ldr	r6, [sp, #8]
    ab86:	4306      	orrs	r6, r0
    ab88:	9602      	str	r6, [sp, #8]
    ab8a:	e7ed      	b.n	ab68 <tcc_init+0xb0>
	if (config->run_in_standby) {
    ab8c:	329d      	adds	r2, #157	; 0x9d
    ab8e:	5caa      	ldrb	r2, [r5, r2]
    ab90:	2a00      	cmp	r2, #0
    ab92:	d004      	beq.n	ab9e <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    ab94:	2280      	movs	r2, #128	; 0x80
    ab96:	0112      	lsls	r2, r2, #4
    ab98:	9902      	ldr	r1, [sp, #8]
    ab9a:	4311      	orrs	r1, r2
    ab9c:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    ab9e:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    aba0:	1e51      	subs	r1, r2, #1
    aba2:	418a      	sbcs	r2, r1
    aba4:	0092      	lsls	r2, r2, #2
    aba6:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    aba8:	7a6a      	ldrb	r2, [r5, #9]
    abaa:	2a01      	cmp	r2, #1
    abac:	d022      	beq.n	abf4 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    abae:	4a90      	ldr	r2, [pc, #576]	; (adf0 <tcc_init+0x338>)
    abb0:	5cd2      	ldrb	r2, [r2, r3]
    abb2:	0011      	movs	r1, r2
    abb4:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    abb6:	2235      	movs	r2, #53	; 0x35
    abb8:	5caa      	ldrb	r2, [r5, r2]
    abba:	428a      	cmp	r2, r1
    abbc:	d300      	bcc.n	abc0 <tcc_init+0x108>
    abbe:	e179      	b.n	aeb4 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    abc0:	212c      	movs	r1, #44	; 0x2c
    abc2:	5c69      	ldrb	r1, [r5, r1]
    abc4:	290f      	cmp	r1, #15
    abc6:	d900      	bls.n	abca <tcc_init+0x112>
    abc8:	e174      	b.n	aeb4 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    abca:	7b28      	ldrb	r0, [r5, #12]
    abcc:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    abce:	7ae8      	ldrb	r0, [r5, #11]
    abd0:	900b      	str	r0, [sp, #44]	; 0x2c
    abd2:	202d      	movs	r0, #45	; 0x2d
    abd4:	4682      	mov	sl, r0
    abd6:	44aa      	add	sl, r5
    abd8:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    abda:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    abdc:	ae0e      	add	r6, sp, #56	; 0x38
    abde:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    abe0:	26c0      	movs	r6, #192	; 0xc0
    abe2:	0136      	lsls	r6, r6, #4
    abe4:	46b1      	mov	r9, r6
    abe6:	4684      	mov	ip, r0
    abe8:	46a0      	mov	r8, r4
    abea:	0028      	movs	r0, r5
    abec:	4655      	mov	r5, sl
    abee:	9309      	str	r3, [sp, #36]	; 0x24
    abf0:	4682      	mov	sl, r0
    abf2:	e035      	b.n	ac60 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    abf4:	9906      	ldr	r1, [sp, #24]
    abf6:	4311      	orrs	r1, r2
    abf8:	9106      	str	r1, [sp, #24]
    abfa:	e7d8      	b.n	abae <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    abfc:	0292      	lsls	r2, r2, #10
    abfe:	464f      	mov	r7, r9
    ac00:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    ac02:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    ac04:	7919      	ldrb	r1, [r3, #4]
    ac06:	468b      	mov	fp, r1
    ac08:	2103      	movs	r1, #3
    ac0a:	465f      	mov	r7, fp
    ac0c:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    ac0e:	430a      	orrs	r2, r1
    ac10:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    ac12:	795a      	ldrb	r2, [r3, #5]
    ac14:	0152      	lsls	r2, r2, #5
    ac16:	2160      	movs	r1, #96	; 0x60
    ac18:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    ac1a:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    ac1c:	7999      	ldrb	r1, [r3, #6]
    ac1e:	0209      	lsls	r1, r1, #8
    ac20:	26c0      	movs	r6, #192	; 0xc0
    ac22:	00b6      	lsls	r6, r6, #2
    ac24:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    ac26:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    ac28:	79da      	ldrb	r2, [r3, #7]
    ac2a:	0312      	lsls	r2, r2, #12
    ac2c:	21e0      	movs	r1, #224	; 0xe0
    ac2e:	01c9      	lsls	r1, r1, #7
    ac30:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    ac32:	4316      	orrs	r6, r2
    ac34:	4334      	orrs	r4, r6
    ac36:	9a03      	ldr	r2, [sp, #12]
    ac38:	4314      	orrs	r4, r2
    ac3a:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    ac3c:	4662      	mov	r2, ip
    ac3e:	9907      	ldr	r1, [sp, #28]
    ac40:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    ac42:	2a04      	cmp	r2, #4
    ac44:	d02a      	beq.n	ac9c <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    ac46:	7c9a      	ldrb	r2, [r3, #18]
    ac48:	9905      	ldr	r1, [sp, #20]
    ac4a:	4291      	cmp	r1, r2
    ac4c:	d800      	bhi.n	ac50 <tcc_init+0x198>
    ac4e:	e131      	b.n	aeb4 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    ac50:	7a59      	ldrb	r1, [r3, #9]
    ac52:	350a      	adds	r5, #10
    ac54:	2304      	movs	r3, #4
    ac56:	469b      	mov	fp, r3
    ac58:	44dc      	add	ip, fp
    ac5a:	290f      	cmp	r1, #15
    ac5c:	d900      	bls.n	ac60 <tcc_init+0x1a8>
    ac5e:	e129      	b.n	aeb4 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    ac60:	0609      	lsls	r1, r1, #24
    ac62:	23f0      	movs	r3, #240	; 0xf0
    ac64:	051b      	lsls	r3, r3, #20
    ac66:	4019      	ands	r1, r3
    ac68:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    ac6a:	782e      	ldrb	r6, [r5, #0]
    ac6c:	0436      	lsls	r6, r6, #16
    ac6e:	20ff      	movs	r0, #255	; 0xff
    ac70:	0400      	lsls	r0, r0, #16
    ac72:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    ac74:	7868      	ldrb	r0, [r5, #1]
    ac76:	2480      	movs	r4, #128	; 0x80
    ac78:	2800      	cmp	r0, #0
    ac7a:	d100      	bne.n	ac7e <tcc_init+0x1c6>
    ac7c:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    ac7e:	7898      	ldrb	r0, [r3, #2]
    ac80:	2708      	movs	r7, #8
    ac82:	9703      	str	r7, [sp, #12]
    ac84:	2800      	cmp	r0, #0
    ac86:	d101      	bne.n	ac8c <tcc_init+0x1d4>
    ac88:	9804      	ldr	r0, [sp, #16]
    ac8a:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    ac8c:	78d8      	ldrb	r0, [r3, #3]
    ac8e:	4683      	mov	fp, r0
    ac90:	2010      	movs	r0, #16
    ac92:	465f      	mov	r7, fp
    ac94:	2f00      	cmp	r7, #0
    ac96:	d1b1      	bne.n	abfc <tcc_init+0x144>
    ac98:	9804      	ldr	r0, [sp, #16]
    ac9a:	e7af      	b.n	abfc <tcc_init+0x144>
    ac9c:	4644      	mov	r4, r8
    ac9e:	4655      	mov	r5, sl
    aca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    aca2:	4a52      	ldr	r2, [pc, #328]	; (adec <tcc_init+0x334>)
    aca4:	5cd2      	ldrb	r2, [r2, r3]
    aca6:	4691      	mov	r9, r2
    aca8:	4651      	mov	r1, sl
    acaa:	3150      	adds	r1, #80	; 0x50
    acac:	4650      	mov	r0, sl
    acae:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    acb0:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    acb2:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    acb4:	2601      	movs	r6, #1
    acb6:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    acb8:	2602      	movs	r6, #2
    acba:	36ff      	adds	r6, #255	; 0xff
    acbc:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    acbe:	2680      	movs	r6, #128	; 0x80
    acc0:	0276      	lsls	r6, r6, #9
    acc2:	46b0      	mov	r8, r6
    acc4:	46a4      	mov	ip, r4
    acc6:	001c      	movs	r4, r3
    acc8:	464b      	mov	r3, r9
    acca:	e00f      	b.n	acec <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    accc:	7806      	ldrb	r6, [r0, #0]
    acce:	2e00      	cmp	r6, #0
    acd0:	d007      	beq.n	ace2 <tcc_init+0x22a>
			if (i >= ow_num) {
    acd2:	4293      	cmp	r3, r2
    acd4:	d800      	bhi.n	acd8 <tcc_init+0x220>
    acd6:	e0e7      	b.n	aea8 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    acd8:	2e02      	cmp	r6, #2
    acda:	d014      	beq.n	ad06 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    acdc:	4656      	mov	r6, sl
    acde:	4096      	lsls	r6, r2
    ace0:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    ace2:	3201      	adds	r2, #1
    ace4:	3101      	adds	r1, #1
    ace6:	3002      	adds	r0, #2
    ace8:	2a08      	cmp	r2, #8
    acea:	d010      	beq.n	ad0e <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    acec:	780e      	ldrb	r6, [r1, #0]
    acee:	2e00      	cmp	r6, #0
    acf0:	d0ec      	beq.n	accc <tcc_init+0x214>
			if (i >= ow_num) {
    acf2:	4293      	cmp	r3, r2
    acf4:	d800      	bhi.n	acf8 <tcc_init+0x240>
    acf6:	e0d5      	b.n	aea4 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    acf8:	4646      	mov	r6, r8
    acfa:	4096      	lsls	r6, r2
    acfc:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    acfe:	7806      	ldrb	r6, [r0, #0]
    ad00:	2e00      	cmp	r6, #0
    ad02:	d1e9      	bne.n	acd8 <tcc_init+0x220>
    ad04:	e7ed      	b.n	ace2 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    ad06:	465e      	mov	r6, fp
    ad08:	4096      	lsls	r6, r2
    ad0a:	4337      	orrs	r7, r6
    ad0c:	e7e9      	b.n	ace2 <tcc_init+0x22a>
    ad0e:	4699      	mov	r9, r3
    ad10:	0023      	movs	r3, r4
    ad12:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    ad14:	7e6a      	ldrb	r2, [r5, #25]
    ad16:	0112      	lsls	r2, r2, #4
    ad18:	2130      	movs	r1, #48	; 0x30
    ad1a:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    ad1c:	7e28      	ldrb	r0, [r5, #24]
    ad1e:	2207      	movs	r2, #7
    ad20:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    ad22:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    ad24:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    ad26:	2080      	movs	r0, #128	; 0x80
    ad28:	0240      	lsls	r0, r0, #9
    ad2a:	000e      	movs	r6, r1
    ad2c:	e002      	b.n	ad34 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    ad2e:	3201      	adds	r2, #1
    ad30:	2a04      	cmp	r2, #4
    ad32:	d00b      	beq.n	ad4c <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    ad34:	18a9      	adds	r1, r5, r2
    ad36:	7d09      	ldrb	r1, [r1, #20]
    ad38:	2900      	cmp	r1, #0
    ad3a:	d0f8      	beq.n	ad2e <tcc_init+0x276>
			if (n >= cc_num) {
    ad3c:	9905      	ldr	r1, [sp, #20]
    ad3e:	4291      	cmp	r1, r2
    ad40:	dc00      	bgt.n	ad44 <tcc_init+0x28c>
    ad42:	e0b3      	b.n	aeac <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    ad44:	0001      	movs	r1, r0
    ad46:	4091      	lsls	r1, r2
    ad48:	430e      	orrs	r6, r1
    ad4a:	e7f0      	b.n	ad2e <tcc_init+0x276>
    ad4c:	46b2      	mov	sl, r6
    ad4e:	9801      	ldr	r0, [sp, #4]
    ad50:	0002      	movs	r2, r0
    ad52:	3204      	adds	r2, #4
    ad54:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    ad56:	2100      	movs	r1, #0
    ad58:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    ad5a:	4282      	cmp	r2, r0
    ad5c:	d1fc      	bne.n	ad58 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    ad5e:	2200      	movs	r2, #0
    ad60:	9801      	ldr	r0, [sp, #4]
    ad62:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    ad64:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    ad66:	0099      	lsls	r1, r3, #2
    ad68:	4a22      	ldr	r2, [pc, #136]	; (adf4 <tcc_init+0x33c>)
    ad6a:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    ad6c:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    ad6e:	22a0      	movs	r2, #160	; 0xa0
    ad70:	5ca9      	ldrb	r1, [r5, r2]
    ad72:	3a64      	subs	r2, #100	; 0x64
    ad74:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    ad76:	a90d      	add	r1, sp, #52	; 0x34
    ad78:	7aaa      	ldrb	r2, [r5, #10]
    ad7a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    ad7c:	4a1e      	ldr	r2, [pc, #120]	; (adf8 <tcc_init+0x340>)
    ad7e:	5cd6      	ldrb	r6, [r2, r3]
    ad80:	0030      	movs	r0, r6
    ad82:	4b1e      	ldr	r3, [pc, #120]	; (adfc <tcc_init+0x344>)
    ad84:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    ad86:	0030      	movs	r0, r6
    ad88:	4b1d      	ldr	r3, [pc, #116]	; (ae00 <tcc_init+0x348>)
    ad8a:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    ad8c:	464b      	mov	r3, r9
    ad8e:	2b00      	cmp	r3, #0
    ad90:	dd3c      	ble.n	ae0c <tcc_init+0x354>
    ad92:	002e      	movs	r6, r5
    ad94:	3658      	adds	r6, #88	; 0x58
    ad96:	3398      	adds	r3, #152	; 0x98
    ad98:	4698      	mov	r8, r3
    ad9a:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    ad9c:	2301      	movs	r3, #1
    ad9e:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    ada0:	46ab      	mov	fp, r5
    ada2:	4645      	mov	r5, r8
    ada4:	46a0      	mov	r8, r4
    ada6:	9c08      	ldr	r4, [sp, #32]
    ada8:	e003      	b.n	adb2 <tcc_init+0x2fa>
    adaa:	3401      	adds	r4, #1
    adac:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    adae:	42ac      	cmp	r4, r5
    adb0:	d02a      	beq.n	ae08 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    adb2:	7823      	ldrb	r3, [r4, #0]
    adb4:	2b00      	cmp	r3, #0
    adb6:	d0f8      	beq.n	adaa <tcc_init+0x2f2>
    adb8:	ab0c      	add	r3, sp, #48	; 0x30
    adba:	464a      	mov	r2, r9
    adbc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    adbe:	2300      	movs	r3, #0
    adc0:	aa0c      	add	r2, sp, #48	; 0x30
    adc2:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    adc4:	0013      	movs	r3, r2
    adc6:	2220      	movs	r2, #32
    adc8:	18b2      	adds	r2, r6, r2
    adca:	7812      	ldrb	r2, [r2, #0]
    adcc:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    adce:	464a      	mov	r2, r9
    add0:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    add2:	7830      	ldrb	r0, [r6, #0]
    add4:	0019      	movs	r1, r3
    add6:	4b0b      	ldr	r3, [pc, #44]	; (ae04 <tcc_init+0x34c>)
    add8:	4798      	blx	r3
    adda:	e7e6      	b.n	adaa <tcc_init+0x2f2>
    addc:	0000a939 	.word	0x0000a939
    ade0:	40000400 	.word	0x40000400
    ade4:	00015ba4 	.word	0x00015ba4
    ade8:	00015bb8 	.word	0x00015bb8
    adec:	00015bc4 	.word	0x00015bc4
    adf0:	00015bb0 	.word	0x00015bb0
    adf4:	200006b8 	.word	0x200006b8
    adf8:	00015bb4 	.word	0x00015bb4
    adfc:	0000e2d1 	.word	0x0000e2d1
    ae00:	0000e245 	.word	0x0000e245
    ae04:	0000e3c9 	.word	0x0000e3c9
    ae08:	4644      	mov	r4, r8
    ae0a:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    ae0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ae0e:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    ae10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ae12:	0212      	lsls	r2, r2, #8
    ae14:	4313      	orrs	r3, r2
    ae16:	9a02      	ldr	r2, [sp, #8]
    ae18:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    ae1a:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    ae1c:	2204      	movs	r2, #4
    ae1e:	68a3      	ldr	r3, [r4, #8]
    ae20:	421a      	tst	r2, r3
    ae22:	d1fc      	bne.n	ae1e <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    ae24:	23ff      	movs	r3, #255	; 0xff
    ae26:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    ae28:	2204      	movs	r2, #4
    ae2a:	68a3      	ldr	r3, [r4, #8]
    ae2c:	421a      	tst	r2, r3
    ae2e:	d1fc      	bne.n	ae2a <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    ae30:	466b      	mov	r3, sp
    ae32:	7e1b      	ldrb	r3, [r3, #24]
    ae34:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    ae36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ae38:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    ae3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ae3c:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    ae3e:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    ae40:	4a1d      	ldr	r2, [pc, #116]	; (aeb8 <tcc_init+0x400>)
    ae42:	68a3      	ldr	r3, [r4, #8]
    ae44:	4213      	tst	r3, r2
    ae46:	d1fc      	bne.n	ae42 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    ae48:	4653      	mov	r3, sl
    ae4a:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    ae4c:	2210      	movs	r2, #16
    ae4e:	68a3      	ldr	r3, [r4, #8]
    ae50:	421a      	tst	r2, r3
    ae52:	d1fc      	bne.n	ae4e <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    ae54:	682b      	ldr	r3, [r5, #0]
    ae56:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    ae58:	4a18      	ldr	r2, [pc, #96]	; (aebc <tcc_init+0x404>)
    ae5a:	68a3      	ldr	r3, [r4, #8]
    ae5c:	4213      	tst	r3, r2
    ae5e:	d1fc      	bne.n	ae5a <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    ae60:	686b      	ldr	r3, [r5, #4]
    ae62:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    ae64:	9805      	ldr	r0, [sp, #20]
    ae66:	2800      	cmp	r0, #0
    ae68:	dd22      	ble.n	aeb0 <tcc_init+0x3f8>
    ae6a:	351c      	adds	r5, #28
    ae6c:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    ae6e:	4e14      	ldr	r6, [pc, #80]	; (aec0 <tcc_init+0x408>)
    ae70:	0032      	movs	r2, r6
    ae72:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    ae74:	68a3      	ldr	r3, [r4, #8]
    ae76:	421a      	tst	r2, r3
    ae78:	d1fc      	bne.n	ae74 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    ae7a:	cd04      	ldmia	r5!, {r2}
    ae7c:	000b      	movs	r3, r1
    ae7e:	3310      	adds	r3, #16
    ae80:	009b      	lsls	r3, r3, #2
    ae82:	18e3      	adds	r3, r4, r3
    ae84:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    ae86:	3101      	adds	r1, #1
    ae88:	4288      	cmp	r0, r1
    ae8a:	dcf1      	bgt.n	ae70 <tcc_init+0x3b8>
	return STATUS_OK;
    ae8c:	2000      	movs	r0, #0
    ae8e:	e62d      	b.n	aaec <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    ae90:	2017      	movs	r0, #23
    ae92:	e62b      	b.n	aaec <tcc_init+0x34>
    ae94:	2017      	movs	r0, #23
    ae96:	e629      	b.n	aaec <tcc_init+0x34>
    ae98:	2017      	movs	r0, #23
    ae9a:	e627      	b.n	aaec <tcc_init+0x34>
    ae9c:	2017      	movs	r0, #23
    ae9e:	e625      	b.n	aaec <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    aea0:	2017      	movs	r0, #23
    aea2:	e623      	b.n	aaec <tcc_init+0x34>
			if (i >= ow_num) {
    aea4:	2017      	movs	r0, #23
    aea6:	e621      	b.n	aaec <tcc_init+0x34>
			if (i >= ow_num) {
    aea8:	2017      	movs	r0, #23
    aeaa:	e61f      	b.n	aaec <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    aeac:	2017      	movs	r0, #23
    aeae:	e61d      	b.n	aaec <tcc_init+0x34>
	return STATUS_OK;
    aeb0:	2000      	movs	r0, #0
    aeb2:	e61b      	b.n	aaec <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    aeb4:	2017      	movs	r0, #23
    aeb6:	e619      	b.n	aaec <tcc_init+0x34>
    aeb8:	00020040 	.word	0x00020040
    aebc:	00040080 	.word	0x00040080
    aec0:	00080100 	.word	0x00080100

0000aec4 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    aec4:	0092      	lsls	r2, r2, #2
    aec6:	1883      	adds	r3, r0, r2
    aec8:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    aeca:	4b03      	ldr	r3, [pc, #12]	; (aed8 <tcc_register_callback+0x14>)
    aecc:	58d3      	ldr	r3, [r2, r3]
    aece:	6b42      	ldr	r2, [r0, #52]	; 0x34
    aed0:	4313      	orrs	r3, r2
    aed2:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    aed4:	2000      	movs	r0, #0
    aed6:	4770      	bx	lr
    aed8:	00015bc8 	.word	0x00015bc8

0000aedc <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    aedc:	b570      	push	{r4, r5, r6, lr}
    aede:	0004      	movs	r4, r0
    aee0:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    aee2:	6800      	ldr	r0, [r0, #0]
    aee4:	4b09      	ldr	r3, [pc, #36]	; (af0c <tcc_enable_callback+0x30>)
    aee6:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    aee8:	4b09      	ldr	r3, [pc, #36]	; (af10 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    aeea:	5c1b      	ldrb	r3, [r3, r0]
    aeec:	221f      	movs	r2, #31
    aeee:	401a      	ands	r2, r3
    aef0:	2301      	movs	r3, #1
    aef2:	4093      	lsls	r3, r2
    aef4:	4a07      	ldr	r2, [pc, #28]	; (af14 <tcc_enable_callback+0x38>)
    aef6:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    aef8:	00ad      	lsls	r5, r5, #2
    aefa:	4b07      	ldr	r3, [pc, #28]	; (af18 <tcc_enable_callback+0x3c>)
    aefc:	58ea      	ldr	r2, [r5, r3]
    aefe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    af00:	4313      	orrs	r3, r2
    af02:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    af04:	6823      	ldr	r3, [r4, #0]
    af06:	629a      	str	r2, [r3, #40]	; 0x28
}
    af08:	bd70      	pop	{r4, r5, r6, pc}
    af0a:	46c0      	nop			; (mov r8, r8)
    af0c:	0000a939 	.word	0x0000a939
    af10:	00015bf8 	.word	0x00015bf8
    af14:	e000e100 	.word	0xe000e100
    af18:	00015bc8 	.word	0x00015bc8

0000af1c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    af1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    af1e:	46c6      	mov	lr, r8
    af20:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    af22:	0080      	lsls	r0, r0, #2
    af24:	4b0e      	ldr	r3, [pc, #56]	; (af60 <_tcc_interrupt_handler+0x44>)
    af26:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    af28:	683b      	ldr	r3, [r7, #0]
    af2a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    af2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    af2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    af30:	4013      	ands	r3, r2
    af32:	401e      	ands	r6, r3
    af34:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    af36:	4b0b      	ldr	r3, [pc, #44]	; (af64 <_tcc_interrupt_handler+0x48>)
    af38:	4698      	mov	r8, r3
    af3a:	e002      	b.n	af42 <_tcc_interrupt_handler+0x26>
    af3c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    af3e:	2c30      	cmp	r4, #48	; 0x30
    af40:	d00a      	beq.n	af58 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    af42:	4643      	mov	r3, r8
    af44:	58e5      	ldr	r5, [r4, r3]
    af46:	4235      	tst	r5, r6
    af48:	d0f8      	beq.n	af3c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    af4a:	193b      	adds	r3, r7, r4
    af4c:	685b      	ldr	r3, [r3, #4]
    af4e:	0038      	movs	r0, r7
    af50:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    af52:	683b      	ldr	r3, [r7, #0]
    af54:	62dd      	str	r5, [r3, #44]	; 0x2c
    af56:	e7f1      	b.n	af3c <_tcc_interrupt_handler+0x20>
		}
	}
}
    af58:	bc04      	pop	{r2}
    af5a:	4690      	mov	r8, r2
    af5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af5e:	46c0      	nop			; (mov r8, r8)
    af60:	200006b8 	.word	0x200006b8
    af64:	00015bc8 	.word	0x00015bc8

0000af68 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    af68:	b510      	push	{r4, lr}
    af6a:	2000      	movs	r0, #0
    af6c:	4b01      	ldr	r3, [pc, #4]	; (af74 <TCC0_Handler+0xc>)
    af6e:	4798      	blx	r3
    af70:	bd10      	pop	{r4, pc}
    af72:	46c0      	nop			; (mov r8, r8)
    af74:	0000af1d 	.word	0x0000af1d

0000af78 <TCC1_Handler>:
    af78:	b510      	push	{r4, lr}
    af7a:	2001      	movs	r0, #1
    af7c:	4b01      	ldr	r3, [pc, #4]	; (af84 <TCC1_Handler+0xc>)
    af7e:	4798      	blx	r3
    af80:	bd10      	pop	{r4, pc}
    af82:	46c0      	nop			; (mov r8, r8)
    af84:	0000af1d 	.word	0x0000af1d

0000af88 <TCC2_Handler>:
    af88:	b510      	push	{r4, lr}
    af8a:	2002      	movs	r0, #2
    af8c:	4b01      	ldr	r3, [pc, #4]	; (af94 <TCC2_Handler+0xc>)
    af8e:	4798      	blx	r3
    af90:	bd10      	pop	{r4, pc}
    af92:	46c0      	nop			; (mov r8, r8)
    af94:	0000af1d 	.word	0x0000af1d

0000af98 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    af98:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    af9a:	2207      	movs	r2, #7
    af9c:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    af9e:	421a      	tst	r2, r3
    afa0:	d1fc      	bne.n	af9c <_i2c_master_wait_for_sync+0x4>
}
    afa2:	4770      	bx	lr

0000afa4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    afa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    afa6:	46d6      	mov	lr, sl
    afa8:	464f      	mov	r7, r9
    afaa:	4646      	mov	r6, r8
    afac:	b5c0      	push	{r6, r7, lr}
    afae:	b08a      	sub	sp, #40	; 0x28
    afb0:	0006      	movs	r6, r0
    afb2:	000f      	movs	r7, r1
    afb4:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    afb6:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    afb8:	0008      	movs	r0, r1
    afba:	4b97      	ldr	r3, [pc, #604]	; (b218 <i2c_master_init+0x274>)
    afbc:	4798      	blx	r3
    afbe:	4a97      	ldr	r2, [pc, #604]	; (b21c <i2c_master_init+0x278>)
    afc0:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    afc2:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    afc4:	2301      	movs	r3, #1
    afc6:	40ab      	lsls	r3, r5
    afc8:	430b      	orrs	r3, r1
    afca:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    afcc:	a909      	add	r1, sp, #36	; 0x24
    afce:	7b23      	ldrb	r3, [r4, #12]
    afd0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    afd2:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    afd4:	b2c5      	uxtb	r5, r0
    afd6:	0028      	movs	r0, r5
    afd8:	4b91      	ldr	r3, [pc, #580]	; (b220 <i2c_master_init+0x27c>)
    afda:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    afdc:	0028      	movs	r0, r5
    afde:	4b91      	ldr	r3, [pc, #580]	; (b224 <i2c_master_init+0x280>)
    afe0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    afe2:	7b20      	ldrb	r0, [r4, #12]
    afe4:	2100      	movs	r1, #0
    afe6:	4b90      	ldr	r3, [pc, #576]	; (b228 <i2c_master_init+0x284>)
    afe8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    afea:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    afec:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    afee:	079b      	lsls	r3, r3, #30
    aff0:	d505      	bpl.n	affe <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    aff2:	b00a      	add	sp, #40	; 0x28
    aff4:	bc1c      	pop	{r2, r3, r4}
    aff6:	4690      	mov	r8, r2
    aff8:	4699      	mov	r9, r3
    affa:	46a2      	mov	sl, r4
    affc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    affe:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    b000:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    b002:	07db      	lsls	r3, r3, #31
    b004:	d4f5      	bmi.n	aff2 <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    b006:	2314      	movs	r3, #20
    b008:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b00a:	6833      	ldr	r3, [r6, #0]
    b00c:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    b00e:	0018      	movs	r0, r3
    b010:	4b81      	ldr	r3, [pc, #516]	; (b218 <i2c_master_init+0x274>)
    b012:	4798      	blx	r3
    b014:	0005      	movs	r5, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    b016:	2380      	movs	r3, #128	; 0x80
    b018:	aa08      	add	r2, sp, #32
    b01a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b01c:	2300      	movs	r3, #0
    b01e:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    b020:	2201      	movs	r2, #1
    b022:	a908      	add	r1, sp, #32
    b024:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    b026:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    b028:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    b02a:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    b02c:	2800      	cmp	r0, #0
    b02e:	d100      	bne.n	b032 <i2c_master_init+0x8e>
    b030:	e0af      	b.n	b192 <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
    b032:	ab08      	add	r3, sp, #32
    b034:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    b036:	2302      	movs	r3, #2
    b038:	aa08      	add	r2, sp, #32
    b03a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    b03c:	0c00      	lsrs	r0, r0, #16
    b03e:	b2c0      	uxtb	r0, r0
    b040:	0011      	movs	r1, r2
    b042:	4b7a      	ldr	r3, [pc, #488]	; (b22c <i2c_master_init+0x288>)
    b044:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    b046:	2f00      	cmp	r7, #0
    b048:	d100      	bne.n	b04c <i2c_master_init+0xa8>
    b04a:	e0a7      	b.n	b19c <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
    b04c:	ab08      	add	r3, sp, #32
    b04e:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    b050:	2302      	movs	r3, #2
    b052:	aa08      	add	r2, sp, #32
    b054:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    b056:	0c3f      	lsrs	r7, r7, #16
    b058:	b2f8      	uxtb	r0, r7
    b05a:	0011      	movs	r1, r2
    b05c:	4b73      	ldr	r3, [pc, #460]	; (b22c <i2c_master_init+0x288>)
    b05e:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    b060:	8aa3      	ldrh	r3, [r4, #20]
    b062:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    b064:	8ae3      	ldrh	r3, [r4, #22]
    b066:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    b068:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    b06a:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    b06c:	2b00      	cmp	r3, #0
    b06e:	d104      	bne.n	b07a <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    b070:	4b6f      	ldr	r3, [pc, #444]	; (b230 <i2c_master_init+0x28c>)
    b072:	789b      	ldrb	r3, [r3, #2]
    b074:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    b076:	0fdb      	lsrs	r3, r3, #31
    b078:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    b07a:	68a1      	ldr	r1, [r4, #8]
    b07c:	6923      	ldr	r3, [r4, #16]
    b07e:	430b      	orrs	r3, r1
    b080:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    b082:	2224      	movs	r2, #36	; 0x24
    b084:	5ca2      	ldrb	r2, [r4, r2]
    b086:	2a00      	cmp	r2, #0
    b088:	d002      	beq.n	b090 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    b08a:	2280      	movs	r2, #128	; 0x80
    b08c:	05d2      	lsls	r2, r2, #23
    b08e:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    b090:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    b092:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    b094:	222c      	movs	r2, #44	; 0x2c
    b096:	5ca2      	ldrb	r2, [r4, r2]
    b098:	2a00      	cmp	r2, #0
    b09a:	d103      	bne.n	b0a4 <i2c_master_init+0x100>
    b09c:	2280      	movs	r2, #128	; 0x80
    b09e:	0492      	lsls	r2, r2, #18
    b0a0:	4291      	cmp	r1, r2
    b0a2:	d102      	bne.n	b0aa <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    b0a4:	2280      	movs	r2, #128	; 0x80
    b0a6:	0512      	lsls	r2, r2, #20
    b0a8:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    b0aa:	222d      	movs	r2, #45	; 0x2d
    b0ac:	5ca2      	ldrb	r2, [r4, r2]
    b0ae:	2a00      	cmp	r2, #0
    b0b0:	d002      	beq.n	b0b8 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    b0b2:	2280      	movs	r2, #128	; 0x80
    b0b4:	0412      	lsls	r2, r2, #16
    b0b6:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    b0b8:	222e      	movs	r2, #46	; 0x2e
    b0ba:	5ca2      	ldrb	r2, [r4, r2]
    b0bc:	2a00      	cmp	r2, #0
    b0be:	d002      	beq.n	b0c6 <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    b0c0:	2280      	movs	r2, #128	; 0x80
    b0c2:	03d2      	lsls	r2, r2, #15
    b0c4:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    b0c6:	4642      	mov	r2, r8
    b0c8:	6812      	ldr	r2, [r2, #0]
    b0ca:	4313      	orrs	r3, r2
    b0cc:	4642      	mov	r2, r8
    b0ce:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    b0d0:	2380      	movs	r3, #128	; 0x80
    b0d2:	005b      	lsls	r3, r3, #1
    b0d4:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    b0d6:	0028      	movs	r0, r5
    b0d8:	3014      	adds	r0, #20
    b0da:	b2c0      	uxtb	r0, r0
    b0dc:	4b55      	ldr	r3, [pc, #340]	; (b234 <i2c_master_init+0x290>)
    b0de:	4798      	blx	r3
    b0e0:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    b0e2:	23fa      	movs	r3, #250	; 0xfa
    b0e4:	009b      	lsls	r3, r3, #2
    b0e6:	6822      	ldr	r2, [r4, #0]
    b0e8:	435a      	muls	r2, r3
    b0ea:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    b0ec:	6863      	ldr	r3, [r4, #4]
    b0ee:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    b0f0:	4d51      	ldr	r5, [pc, #324]	; (b238 <i2c_master_init+0x294>)
    b0f2:	47a8      	blx	r5
    b0f4:	9000      	str	r0, [sp, #0]
    b0f6:	9101      	str	r1, [sp, #4]
    b0f8:	464b      	mov	r3, r9
    b0fa:	0058      	lsls	r0, r3, #1
    b0fc:	47a8      	blx	r5
    b0fe:	9002      	str	r0, [sp, #8]
    b100:	9103      	str	r1, [sp, #12]
    b102:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    b104:	47a8      	blx	r5
    b106:	9004      	str	r0, [sp, #16]
    b108:	9105      	str	r1, [sp, #20]
    b10a:	4f4c      	ldr	r7, [pc, #304]	; (b23c <i2c_master_init+0x298>)
    b10c:	4a4c      	ldr	r2, [pc, #304]	; (b240 <i2c_master_init+0x29c>)
    b10e:	4b4d      	ldr	r3, [pc, #308]	; (b244 <i2c_master_init+0x2a0>)
    b110:	9800      	ldr	r0, [sp, #0]
    b112:	9901      	ldr	r1, [sp, #4]
    b114:	47b8      	blx	r7
    b116:	0002      	movs	r2, r0
    b118:	000b      	movs	r3, r1
    b11a:	9804      	ldr	r0, [sp, #16]
    b11c:	9905      	ldr	r1, [sp, #20]
    b11e:	47b8      	blx	r7
    b120:	4e49      	ldr	r6, [pc, #292]	; (b248 <i2c_master_init+0x2a4>)
    b122:	2200      	movs	r2, #0
    b124:	4b49      	ldr	r3, [pc, #292]	; (b24c <i2c_master_init+0x2a8>)
    b126:	47b0      	blx	r6
    b128:	9004      	str	r0, [sp, #16]
    b12a:	9105      	str	r1, [sp, #20]
    b12c:	4648      	mov	r0, r9
    b12e:	47a8      	blx	r5
    b130:	0002      	movs	r2, r0
    b132:	000b      	movs	r3, r1
    b134:	9804      	ldr	r0, [sp, #16]
    b136:	9905      	ldr	r1, [sp, #20]
    b138:	47b8      	blx	r7
    b13a:	0002      	movs	r2, r0
    b13c:	000b      	movs	r3, r1
    b13e:	4d44      	ldr	r5, [pc, #272]	; (b250 <i2c_master_init+0x2ac>)
    b140:	9800      	ldr	r0, [sp, #0]
    b142:	9901      	ldr	r1, [sp, #4]
    b144:	47a8      	blx	r5
    b146:	9a02      	ldr	r2, [sp, #8]
    b148:	9b03      	ldr	r3, [sp, #12]
    b14a:	47b0      	blx	r6
    b14c:	2200      	movs	r2, #0
    b14e:	4b41      	ldr	r3, [pc, #260]	; (b254 <i2c_master_init+0x2b0>)
    b150:	47a8      	blx	r5
    b152:	9a02      	ldr	r2, [sp, #8]
    b154:	9b03      	ldr	r3, [sp, #12]
    b156:	4d40      	ldr	r5, [pc, #256]	; (b258 <i2c_master_init+0x2b4>)
    b158:	47a8      	blx	r5
    b15a:	4b40      	ldr	r3, [pc, #256]	; (b25c <i2c_master_init+0x2b8>)
    b15c:	4798      	blx	r3
    b15e:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    b160:	2380      	movs	r3, #128	; 0x80
    b162:	049b      	lsls	r3, r3, #18
    b164:	68a2      	ldr	r2, [r4, #8]
    b166:	429a      	cmp	r2, r3
    b168:	d01e      	beq.n	b1a8 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    b16a:	0003      	movs	r3, r0
    b16c:	2040      	movs	r0, #64	; 0x40
    b16e:	2dff      	cmp	r5, #255	; 0xff
    b170:	d900      	bls.n	b174 <i2c_master_init+0x1d0>
    b172:	e73e      	b.n	aff2 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    b174:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    b176:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    b178:	25ff      	movs	r5, #255	; 0xff
    b17a:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    b17c:	0624      	lsls	r4, r4, #24
    b17e:	4325      	orrs	r5, r4
    b180:	0400      	lsls	r0, r0, #16
    b182:	23ff      	movs	r3, #255	; 0xff
    b184:	041b      	lsls	r3, r3, #16
    b186:	4018      	ands	r0, r3
    b188:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    b18a:	4643      	mov	r3, r8
    b18c:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    b18e:	2000      	movs	r0, #0
    b190:	e72f      	b.n	aff2 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    b192:	2100      	movs	r1, #0
    b194:	4640      	mov	r0, r8
    b196:	4b32      	ldr	r3, [pc, #200]	; (b260 <i2c_master_init+0x2bc>)
    b198:	4798      	blx	r3
    b19a:	e74a      	b.n	b032 <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    b19c:	2101      	movs	r1, #1
    b19e:	4640      	mov	r0, r8
    b1a0:	4b2f      	ldr	r3, [pc, #188]	; (b260 <i2c_master_init+0x2bc>)
    b1a2:	4798      	blx	r3
    b1a4:	0007      	movs	r7, r0
    b1a6:	e751      	b.n	b04c <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    b1a8:	26fa      	movs	r6, #250	; 0xfa
    b1aa:	00b6      	lsls	r6, r6, #2
    b1ac:	4653      	mov	r3, sl
    b1ae:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    b1b0:	9800      	ldr	r0, [sp, #0]
    b1b2:	9901      	ldr	r1, [sp, #4]
    b1b4:	0002      	movs	r2, r0
    b1b6:	000b      	movs	r3, r1
    b1b8:	4c23      	ldr	r4, [pc, #140]	; (b248 <i2c_master_init+0x2a4>)
    b1ba:	47a0      	blx	r4
    b1bc:	9000      	str	r0, [sp, #0]
    b1be:	9101      	str	r1, [sp, #4]
    b1c0:	0030      	movs	r0, r6
    b1c2:	4b1d      	ldr	r3, [pc, #116]	; (b238 <i2c_master_init+0x294>)
    b1c4:	4798      	blx	r3
    b1c6:	2200      	movs	r2, #0
    b1c8:	4b26      	ldr	r3, [pc, #152]	; (b264 <i2c_master_init+0x2c0>)
    b1ca:	47b8      	blx	r7
    b1cc:	0002      	movs	r2, r0
    b1ce:	000b      	movs	r3, r1
    b1d0:	9800      	ldr	r0, [sp, #0]
    b1d2:	9901      	ldr	r1, [sp, #4]
    b1d4:	4c20      	ldr	r4, [pc, #128]	; (b258 <i2c_master_init+0x2b4>)
    b1d6:	47a0      	blx	r4
    b1d8:	2200      	movs	r2, #0
    b1da:	4b1e      	ldr	r3, [pc, #120]	; (b254 <i2c_master_init+0x2b0>)
    b1dc:	4c1c      	ldr	r4, [pc, #112]	; (b250 <i2c_master_init+0x2ac>)
    b1de:	47a0      	blx	r4
    b1e0:	4b1e      	ldr	r3, [pc, #120]	; (b25c <i2c_master_init+0x2b8>)
    b1e2:	4798      	blx	r3
    b1e4:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    b1e6:	d00c      	beq.n	b202 <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    b1e8:	0031      	movs	r1, r6
    b1ea:	9807      	ldr	r0, [sp, #28]
    b1ec:	4b1e      	ldr	r3, [pc, #120]	; (b268 <i2c_master_init+0x2c4>)
    b1ee:	4798      	blx	r3
    b1f0:	3802      	subs	r0, #2
    b1f2:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    b1f4:	002b      	movs	r3, r5
    b1f6:	2dff      	cmp	r5, #255	; 0xff
    b1f8:	d80c      	bhi.n	b214 <i2c_master_init+0x270>
    b1fa:	28ff      	cmp	r0, #255	; 0xff
    b1fc:	d9bc      	bls.n	b178 <i2c_master_init+0x1d4>
    b1fe:	2040      	movs	r0, #64	; 0x40
    b200:	e6f7      	b.n	aff2 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    b202:	0071      	lsls	r1, r6, #1
    b204:	1e48      	subs	r0, r1, #1
    b206:	9b07      	ldr	r3, [sp, #28]
    b208:	469c      	mov	ip, r3
    b20a:	4460      	add	r0, ip
    b20c:	4b16      	ldr	r3, [pc, #88]	; (b268 <i2c_master_init+0x2c4>)
    b20e:	4798      	blx	r3
    b210:	3801      	subs	r0, #1
    b212:	e7ef      	b.n	b1f4 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    b214:	2040      	movs	r0, #64	; 0x40
    b216:	e6ec      	b.n	aff2 <i2c_master_init+0x4e>
    b218:	0000d765 	.word	0x0000d765
    b21c:	40000400 	.word	0x40000400
    b220:	0000e2d1 	.word	0x0000e2d1
    b224:	0000e245 	.word	0x0000e245
    b228:	0000d5a1 	.word	0x0000d5a1
    b22c:	0000e3c9 	.word	0x0000e3c9
    b230:	41002000 	.word	0x41002000
    b234:	0000e2ed 	.word	0x0000e2ed
    b238:	00013cf5 	.word	0x00013cf5
    b23c:	0001309d 	.word	0x0001309d
    b240:	e826d695 	.word	0xe826d695
    b244:	3e112e0b 	.word	0x3e112e0b
    b248:	00012215 	.word	0x00012215
    b24c:	40240000 	.word	0x40240000
    b250:	0001359d 	.word	0x0001359d
    b254:	3ff00000 	.word	0x3ff00000
    b258:	00012835 	.word	0x00012835
    b25c:	00013c09 	.word	0x00013c09
    b260:	0000d5ed 	.word	0x0000d5ed
    b264:	40080000 	.word	0x40080000
    b268:	000118e9 	.word	0x000118e9

0000b26c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b26c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    b26e:	7e1a      	ldrb	r2, [r3, #24]
    b270:	0792      	lsls	r2, r2, #30
    b272:	d507      	bpl.n	b284 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    b274:	2202      	movs	r2, #2
    b276:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    b278:	8b5b      	ldrh	r3, [r3, #26]
    b27a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    b27c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    b27e:	17db      	asrs	r3, r3, #31
    b280:	4018      	ands	r0, r3
}
    b282:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    b284:	8b5a      	ldrh	r2, [r3, #26]
    b286:	0752      	lsls	r2, r2, #29
    b288:	d506      	bpl.n	b298 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    b28a:	6859      	ldr	r1, [r3, #4]
    b28c:	22c0      	movs	r2, #192	; 0xc0
    b28e:	0292      	lsls	r2, r2, #10
    b290:	430a      	orrs	r2, r1
    b292:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    b294:	2018      	movs	r0, #24
    b296:	e7f4      	b.n	b282 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    b298:	2000      	movs	r0, #0
    b29a:	e7f2      	b.n	b282 <_i2c_master_address_response+0x16>

0000b29c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    b29c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b29e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    b2a0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b2a2:	2401      	movs	r4, #1
    b2a4:	2502      	movs	r5, #2
    b2a6:	7e11      	ldrb	r1, [r2, #24]
    b2a8:	4221      	tst	r1, r4
    b2aa:	d10b      	bne.n	b2c4 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    b2ac:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    b2ae:	4229      	tst	r1, r5
    b2b0:	d106      	bne.n	b2c0 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    b2b2:	3301      	adds	r3, #1
    b2b4:	b29b      	uxth	r3, r3
    b2b6:	8901      	ldrh	r1, [r0, #8]
    b2b8:	4299      	cmp	r1, r3
    b2ba:	d8f4      	bhi.n	b2a6 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    b2bc:	2012      	movs	r0, #18
    b2be:	e002      	b.n	b2c6 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    b2c0:	2000      	movs	r0, #0
    b2c2:	e000      	b.n	b2c6 <_i2c_master_wait_for_bus+0x2a>
    b2c4:	2000      	movs	r0, #0
}
    b2c6:	bd30      	pop	{r4, r5, pc}

0000b2c8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    b2c8:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b2ca:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    b2cc:	6862      	ldr	r2, [r4, #4]
    b2ce:	2380      	movs	r3, #128	; 0x80
    b2d0:	02db      	lsls	r3, r3, #11
    b2d2:	4313      	orrs	r3, r2
    b2d4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    b2d6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    b2d8:	4b02      	ldr	r3, [pc, #8]	; (b2e4 <_i2c_master_send_hs_master_code+0x1c>)
    b2da:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    b2dc:	2301      	movs	r3, #1
    b2de:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    b2e0:	bd10      	pop	{r4, pc}
    b2e2:	46c0      	nop			; (mov r8, r8)
    b2e4:	0000b29d 	.word	0x0000b29d

0000b2e8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    b2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2ea:	46de      	mov	lr, fp
    b2ec:	4657      	mov	r7, sl
    b2ee:	464e      	mov	r6, r9
    b2f0:	4645      	mov	r5, r8
    b2f2:	b5e0      	push	{r5, r6, r7, lr}
    b2f4:	b083      	sub	sp, #12
    b2f6:	0006      	movs	r6, r0
    b2f8:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b2fa:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    b2fc:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    b2fe:	682b      	ldr	r3, [r5, #0]
    b300:	011b      	lsls	r3, r3, #4
    b302:	0fdb      	lsrs	r3, r3, #31
    b304:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    b306:	7a4b      	ldrb	r3, [r1, #9]
    b308:	2b00      	cmp	r3, #0
    b30a:	d12b      	bne.n	b364 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    b30c:	686b      	ldr	r3, [r5, #4]
    b30e:	4a58      	ldr	r2, [pc, #352]	; (b470 <_i2c_master_read_packet+0x188>)
    b310:	4013      	ands	r3, r2
    b312:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    b314:	464b      	mov	r3, r9
    b316:	7a1b      	ldrb	r3, [r3, #8]
    b318:	2b00      	cmp	r3, #0
    b31a:	d127      	bne.n	b36c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    b31c:	464b      	mov	r3, r9
    b31e:	881b      	ldrh	r3, [r3, #0]
    b320:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    b322:	464a      	mov	r2, r9
    b324:	7a52      	ldrb	r2, [r2, #9]
    b326:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    b328:	4313      	orrs	r3, r2
    b32a:	2201      	movs	r2, #1
    b32c:	4313      	orrs	r3, r2
    b32e:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    b330:	0030      	movs	r0, r6
    b332:	4b50      	ldr	r3, [pc, #320]	; (b474 <_i2c_master_read_packet+0x18c>)
    b334:	4798      	blx	r3
    b336:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    b338:	4653      	mov	r3, sl
    b33a:	2b00      	cmp	r3, #0
    b33c:	d003      	beq.n	b346 <_i2c_master_read_packet+0x5e>
    b33e:	464b      	mov	r3, r9
    b340:	885b      	ldrh	r3, [r3, #2]
    b342:	2b01      	cmp	r3, #1
    b344:	d03b      	beq.n	b3be <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    b346:	686b      	ldr	r3, [r5, #4]
    b348:	4a49      	ldr	r2, [pc, #292]	; (b470 <_i2c_master_read_packet+0x188>)
    b34a:	4013      	ands	r3, r2
    b34c:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    b34e:	9b01      	ldr	r3, [sp, #4]
    b350:	2b00      	cmp	r3, #0
    b352:	d03a      	beq.n	b3ca <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    b354:	9801      	ldr	r0, [sp, #4]
    b356:	b003      	add	sp, #12
    b358:	bc3c      	pop	{r2, r3, r4, r5}
    b35a:	4690      	mov	r8, r2
    b35c:	4699      	mov	r9, r3
    b35e:	46a2      	mov	sl, r4
    b360:	46ab      	mov	fp, r5
    b362:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    b364:	7a89      	ldrb	r1, [r1, #10]
    b366:	4b44      	ldr	r3, [pc, #272]	; (b478 <_i2c_master_read_packet+0x190>)
    b368:	4798      	blx	r3
    b36a:	e7cf      	b.n	b30c <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    b36c:	464b      	mov	r3, r9
    b36e:	881b      	ldrh	r3, [r3, #0]
    b370:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b372:	464a      	mov	r2, r9
    b374:	7a52      	ldrb	r2, [r2, #9]
    b376:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    b378:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b37a:	2280      	movs	r2, #128	; 0x80
    b37c:	0212      	lsls	r2, r2, #8
    b37e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    b380:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    b382:	0030      	movs	r0, r6
    b384:	4b3b      	ldr	r3, [pc, #236]	; (b474 <_i2c_master_read_packet+0x18c>)
    b386:	4798      	blx	r3
    b388:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    b38a:	686b      	ldr	r3, [r5, #4]
    b38c:	4a38      	ldr	r2, [pc, #224]	; (b470 <_i2c_master_read_packet+0x188>)
    b38e:	4013      	ands	r3, r2
    b390:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    b392:	2800      	cmp	r0, #0
    b394:	d1de      	bne.n	b354 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    b396:	0030      	movs	r0, r6
    b398:	4b38      	ldr	r3, [pc, #224]	; (b47c <_i2c_master_read_packet+0x194>)
    b39a:	4798      	blx	r3
    b39c:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    b39e:	2800      	cmp	r0, #0
    b3a0:	d1d8      	bne.n	b354 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    b3a2:	464b      	mov	r3, r9
    b3a4:	881b      	ldrh	r3, [r3, #0]
    b3a6:	0a1b      	lsrs	r3, r3, #8
    b3a8:	2278      	movs	r2, #120	; 0x78
    b3aa:	4313      	orrs	r3, r2
    b3ac:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b3ae:	464a      	mov	r2, r9
    b3b0:	7a52      	ldrb	r2, [r2, #9]
    b3b2:	0392      	lsls	r2, r2, #14
    b3b4:	2101      	movs	r1, #1
    b3b6:	430a      	orrs	r2, r1
    b3b8:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    b3ba:	626b      	str	r3, [r5, #36]	; 0x24
    b3bc:	e7b8      	b.n	b330 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    b3be:	686a      	ldr	r2, [r5, #4]
    b3c0:	2380      	movs	r3, #128	; 0x80
    b3c2:	02db      	lsls	r3, r3, #11
    b3c4:	4313      	orrs	r3, r2
    b3c6:	606b      	str	r3, [r5, #4]
    b3c8:	e7c1      	b.n	b34e <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    b3ca:	0030      	movs	r0, r6
    b3cc:	4b2b      	ldr	r3, [pc, #172]	; (b47c <_i2c_master_read_packet+0x194>)
    b3ce:	4798      	blx	r3
    b3d0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    b3d2:	2800      	cmp	r0, #0
    b3d4:	d1be      	bne.n	b354 <_i2c_master_read_packet+0x6c>
    b3d6:	3c01      	subs	r4, #1
    b3d8:	b2a4      	uxth	r4, r4
    b3da:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    b3dc:	4b28      	ldr	r3, [pc, #160]	; (b480 <_i2c_master_read_packet+0x198>)
    b3de:	469b      	mov	fp, r3
    b3e0:	e015      	b.n	b40e <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    b3e2:	2c01      	cmp	r4, #1
    b3e4:	d020      	beq.n	b428 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    b3e6:	0030      	movs	r0, r6
    b3e8:	4b26      	ldr	r3, [pc, #152]	; (b484 <_i2c_master_read_packet+0x19c>)
    b3ea:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    b3ec:	4643      	mov	r3, r8
    b3ee:	1c5f      	adds	r7, r3, #1
    b3f0:	b2bf      	uxth	r7, r7
    b3f2:	2328      	movs	r3, #40	; 0x28
    b3f4:	5ceb      	ldrb	r3, [r5, r3]
    b3f6:	464a      	mov	r2, r9
    b3f8:	6852      	ldr	r2, [r2, #4]
    b3fa:	4641      	mov	r1, r8
    b3fc:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    b3fe:	0030      	movs	r0, r6
    b400:	4b1c      	ldr	r3, [pc, #112]	; (b474 <_i2c_master_read_packet+0x18c>)
    b402:	4798      	blx	r3
    b404:	3c01      	subs	r4, #1
    b406:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    b408:	2800      	cmp	r0, #0
    b40a:	d115      	bne.n	b438 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    b40c:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    b40e:	455c      	cmp	r4, fp
    b410:	d014      	beq.n	b43c <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    b412:	8b6b      	ldrh	r3, [r5, #26]
    b414:	069b      	lsls	r3, r3, #26
    b416:	d527      	bpl.n	b468 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    b418:	7af3      	ldrb	r3, [r6, #11]
    b41a:	2b00      	cmp	r3, #0
    b41c:	d0e3      	beq.n	b3e6 <_i2c_master_read_packet+0xfe>
    b41e:	4653      	mov	r3, sl
    b420:	2b00      	cmp	r3, #0
    b422:	d1de      	bne.n	b3e2 <_i2c_master_read_packet+0xfa>
    b424:	2c00      	cmp	r4, #0
    b426:	d1de      	bne.n	b3e6 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    b428:	686a      	ldr	r2, [r5, #4]
    b42a:	2380      	movs	r3, #128	; 0x80
    b42c:	02db      	lsls	r3, r3, #11
    b42e:	4313      	orrs	r3, r2
    b430:	606b      	str	r3, [r5, #4]
    b432:	3c01      	subs	r4, #1
    b434:	b2a4      	uxth	r4, r4
    b436:	e7ea      	b.n	b40e <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    b438:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    b43a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    b43c:	7ab3      	ldrb	r3, [r6, #10]
    b43e:	2b00      	cmp	r3, #0
    b440:	d109      	bne.n	b456 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    b442:	0030      	movs	r0, r6
    b444:	4b0f      	ldr	r3, [pc, #60]	; (b484 <_i2c_master_read_packet+0x19c>)
    b446:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    b448:	2328      	movs	r3, #40	; 0x28
    b44a:	5cea      	ldrb	r2, [r5, r3]
    b44c:	464b      	mov	r3, r9
    b44e:	685b      	ldr	r3, [r3, #4]
    b450:	4641      	mov	r1, r8
    b452:	545a      	strb	r2, [r3, r1]
    b454:	e77e      	b.n	b354 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    b456:	0030      	movs	r0, r6
    b458:	4b0a      	ldr	r3, [pc, #40]	; (b484 <_i2c_master_read_packet+0x19c>)
    b45a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    b45c:	686a      	ldr	r2, [r5, #4]
    b45e:	23c0      	movs	r3, #192	; 0xc0
    b460:	029b      	lsls	r3, r3, #10
    b462:	4313      	orrs	r3, r2
    b464:	606b      	str	r3, [r5, #4]
    b466:	e7ec      	b.n	b442 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    b468:	2341      	movs	r3, #65	; 0x41
    b46a:	9301      	str	r3, [sp, #4]
    b46c:	e772      	b.n	b354 <_i2c_master_read_packet+0x6c>
    b46e:	46c0      	nop			; (mov r8, r8)
    b470:	fffbffff 	.word	0xfffbffff
    b474:	0000b29d 	.word	0x0000b29d
    b478:	0000b2c9 	.word	0x0000b2c9
    b47c:	0000b26d 	.word	0x0000b26d
    b480:	0000ffff 	.word	0x0000ffff
    b484:	0000af99 	.word	0x0000af99

0000b488 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    b488:	b5f0      	push	{r4, r5, r6, r7, lr}
    b48a:	46de      	mov	lr, fp
    b48c:	4657      	mov	r7, sl
    b48e:	464e      	mov	r6, r9
    b490:	4645      	mov	r5, r8
    b492:	b5e0      	push	{r5, r6, r7, lr}
    b494:	b083      	sub	sp, #12
    b496:	0006      	movs	r6, r0
    b498:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b49a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    b49c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    b49e:	4b32      	ldr	r3, [pc, #200]	; (b568 <_i2c_master_write_packet+0xe0>)
    b4a0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    b4a2:	7a7b      	ldrb	r3, [r7, #9]
    b4a4:	2b00      	cmp	r3, #0
    b4a6:	d11d      	bne.n	b4e4 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    b4a8:	686b      	ldr	r3, [r5, #4]
    b4aa:	4a30      	ldr	r2, [pc, #192]	; (b56c <_i2c_master_write_packet+0xe4>)
    b4ac:	4013      	ands	r3, r2
    b4ae:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    b4b0:	7a3b      	ldrb	r3, [r7, #8]
    b4b2:	2b00      	cmp	r3, #0
    b4b4:	d01b      	beq.n	b4ee <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b4b6:	883b      	ldrh	r3, [r7, #0]
    b4b8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b4ba:	7a7a      	ldrb	r2, [r7, #9]
    b4bc:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b4be:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    b4c0:	2280      	movs	r2, #128	; 0x80
    b4c2:	0212      	lsls	r2, r2, #8
    b4c4:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b4c6:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    b4c8:	0030      	movs	r0, r6
    b4ca:	4b29      	ldr	r3, [pc, #164]	; (b570 <_i2c_master_write_packet+0xe8>)
    b4cc:	4798      	blx	r3
    b4ce:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    b4d0:	2800      	cmp	r0, #0
    b4d2:	d013      	beq.n	b4fc <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    b4d4:	9801      	ldr	r0, [sp, #4]
    b4d6:	b003      	add	sp, #12
    b4d8:	bc3c      	pop	{r2, r3, r4, r5}
    b4da:	4690      	mov	r8, r2
    b4dc:	4699      	mov	r9, r3
    b4de:	46a2      	mov	sl, r4
    b4e0:	46ab      	mov	fp, r5
    b4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    b4e4:	7ab9      	ldrb	r1, [r7, #10]
    b4e6:	0030      	movs	r0, r6
    b4e8:	4b22      	ldr	r3, [pc, #136]	; (b574 <_i2c_master_write_packet+0xec>)
    b4ea:	4798      	blx	r3
    b4ec:	e7dc      	b.n	b4a8 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b4ee:	883b      	ldrh	r3, [r7, #0]
    b4f0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    b4f2:	7a7a      	ldrb	r2, [r7, #9]
    b4f4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    b4f6:	4313      	orrs	r3, r2
    b4f8:	626b      	str	r3, [r5, #36]	; 0x24
    b4fa:	e7e5      	b.n	b4c8 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    b4fc:	0030      	movs	r0, r6
    b4fe:	4b1e      	ldr	r3, [pc, #120]	; (b578 <_i2c_master_write_packet+0xf0>)
    b500:	4798      	blx	r3
    b502:	1e03      	subs	r3, r0, #0
    b504:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    b506:	d1e5      	bne.n	b4d4 <_i2c_master_write_packet+0x4c>
    b508:	46a0      	mov	r8, r4
    b50a:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    b50c:	3320      	adds	r3, #32
    b50e:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    b510:	4b15      	ldr	r3, [pc, #84]	; (b568 <_i2c_master_write_packet+0xe0>)
    b512:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    b514:	4b16      	ldr	r3, [pc, #88]	; (b570 <_i2c_master_write_packet+0xe8>)
    b516:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    b518:	4544      	cmp	r4, r8
    b51a:	d015      	beq.n	b548 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    b51c:	8b6b      	ldrh	r3, [r5, #26]
    b51e:	464a      	mov	r2, r9
    b520:	4213      	tst	r3, r2
    b522:	d01d      	beq.n	b560 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    b524:	0030      	movs	r0, r6
    b526:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    b528:	687b      	ldr	r3, [r7, #4]
    b52a:	5d1a      	ldrb	r2, [r3, r4]
    b52c:	2328      	movs	r3, #40	; 0x28
    b52e:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    b530:	0030      	movs	r0, r6
    b532:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    b534:	2800      	cmp	r0, #0
    b536:	d106      	bne.n	b546 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    b538:	8b6b      	ldrh	r3, [r5, #26]
    b53a:	3401      	adds	r4, #1
    b53c:	075b      	lsls	r3, r3, #29
    b53e:	d5eb      	bpl.n	b518 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    b540:	231e      	movs	r3, #30
    b542:	9301      	str	r3, [sp, #4]
    b544:	e000      	b.n	b548 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    b546:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    b548:	7ab3      	ldrb	r3, [r6, #10]
    b54a:	2b00      	cmp	r3, #0
    b54c:	d0c2      	beq.n	b4d4 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    b54e:	0030      	movs	r0, r6
    b550:	4b05      	ldr	r3, [pc, #20]	; (b568 <_i2c_master_write_packet+0xe0>)
    b552:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    b554:	686a      	ldr	r2, [r5, #4]
    b556:	23c0      	movs	r3, #192	; 0xc0
    b558:	029b      	lsls	r3, r3, #10
    b55a:	4313      	orrs	r3, r2
    b55c:	606b      	str	r3, [r5, #4]
    b55e:	e7b9      	b.n	b4d4 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    b560:	2341      	movs	r3, #65	; 0x41
    b562:	9301      	str	r3, [sp, #4]
    b564:	e7b6      	b.n	b4d4 <_i2c_master_write_packet+0x4c>
    b566:	46c0      	nop			; (mov r8, r8)
    b568:	0000af99 	.word	0x0000af99
    b56c:	fffbffff 	.word	0xfffbffff
    b570:	0000b29d 	.word	0x0000b29d
    b574:	0000b2c9 	.word	0x0000b2c9
    b578:	0000b26d 	.word	0x0000b26d

0000b57c <i2c_master_read_packet_wait>:
{
    b57c:	b510      	push	{r4, lr}
	module->send_stop = true;
    b57e:	2301      	movs	r3, #1
    b580:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    b582:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    b584:	4b01      	ldr	r3, [pc, #4]	; (b58c <i2c_master_read_packet_wait+0x10>)
    b586:	4798      	blx	r3
}
    b588:	bd10      	pop	{r4, pc}
    b58a:	46c0      	nop			; (mov r8, r8)
    b58c:	0000b2e9 	.word	0x0000b2e9

0000b590 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    b590:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    b592:	2301      	movs	r3, #1
    b594:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    b596:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    b598:	4b01      	ldr	r3, [pc, #4]	; (b5a0 <i2c_master_write_packet_wait+0x10>)
    b59a:	4798      	blx	r3
}
    b59c:	bd10      	pop	{r4, pc}
    b59e:	46c0      	nop			; (mov r8, r8)
    b5a0:	0000b489 	.word	0x0000b489

0000b5a4 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    b5a4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    b5a6:	2300      	movs	r3, #0
    b5a8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    b5aa:	3301      	adds	r3, #1
    b5ac:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    b5ae:	4b01      	ldr	r3, [pc, #4]	; (b5b4 <i2c_master_write_packet_wait_no_stop+0x10>)
    b5b0:	4798      	blx	r3
}
    b5b2:	bd10      	pop	{r4, pc}
    b5b4:	0000b489 	.word	0x0000b489

0000b5b8 <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
    b5b8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b5ba:	6804      	ldr	r4, [r0, #0]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
    b5bc:	4b03      	ldr	r3, [pc, #12]	; (b5cc <i2c_master_send_stop+0x14>)
    b5be:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    b5c0:	6862      	ldr	r2, [r4, #4]
    b5c2:	23c0      	movs	r3, #192	; 0xc0
    b5c4:	029b      	lsls	r3, r3, #10
    b5c6:	4313      	orrs	r3, r2
    b5c8:	6063      	str	r3, [r4, #4]
}
    b5ca:	bd10      	pop	{r4, pc}
    b5cc:	0000af99 	.word	0x0000af99

0000b5d0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    b5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5d2:	46c6      	mov	lr, r8
    b5d4:	b500      	push	{lr}
    b5d6:	000c      	movs	r4, r1
    b5d8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    b5da:	2800      	cmp	r0, #0
    b5dc:	d10f      	bne.n	b5fe <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    b5de:	2a00      	cmp	r2, #0
    b5e0:	dd11      	ble.n	b606 <_read+0x36>
    b5e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    b5e4:	4e09      	ldr	r6, [pc, #36]	; (b60c <_read+0x3c>)
    b5e6:	4d0a      	ldr	r5, [pc, #40]	; (b610 <_read+0x40>)
    b5e8:	6830      	ldr	r0, [r6, #0]
    b5ea:	0021      	movs	r1, r4
    b5ec:	682b      	ldr	r3, [r5, #0]
    b5ee:	4798      	blx	r3
		ptr++;
    b5f0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    b5f2:	42bc      	cmp	r4, r7
    b5f4:	d1f8      	bne.n	b5e8 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    b5f6:	4640      	mov	r0, r8
    b5f8:	bc04      	pop	{r2}
    b5fa:	4690      	mov	r8, r2
    b5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    b5fe:	2301      	movs	r3, #1
    b600:	425b      	negs	r3, r3
    b602:	4698      	mov	r8, r3
    b604:	e7f7      	b.n	b5f6 <_read+0x26>
	for (; len > 0; --len) {
    b606:	4680      	mov	r8, r0
    b608:	e7f5      	b.n	b5f6 <_read+0x26>
    b60a:	46c0      	nop			; (mov r8, r8)
    b60c:	200006cc 	.word	0x200006cc
    b610:	200006c4 	.word	0x200006c4

0000b614 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    b614:	b5f0      	push	{r4, r5, r6, r7, lr}
    b616:	46c6      	mov	lr, r8
    b618:	b500      	push	{lr}
    b61a:	000e      	movs	r6, r1
    b61c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    b61e:	3801      	subs	r0, #1
    b620:	2802      	cmp	r0, #2
    b622:	d810      	bhi.n	b646 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    b624:	2a00      	cmp	r2, #0
    b626:	d011      	beq.n	b64c <_write+0x38>
    b628:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    b62a:	4b0c      	ldr	r3, [pc, #48]	; (b65c <_write+0x48>)
    b62c:	4698      	mov	r8, r3
    b62e:	4f0c      	ldr	r7, [pc, #48]	; (b660 <_write+0x4c>)
    b630:	4643      	mov	r3, r8
    b632:	6818      	ldr	r0, [r3, #0]
    b634:	5d31      	ldrb	r1, [r6, r4]
    b636:	683b      	ldr	r3, [r7, #0]
    b638:	4798      	blx	r3
    b63a:	2800      	cmp	r0, #0
    b63c:	db08      	blt.n	b650 <_write+0x3c>
			return -1;
		}
		++nChars;
    b63e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    b640:	42a5      	cmp	r5, r4
    b642:	d1f5      	bne.n	b630 <_write+0x1c>
    b644:	e006      	b.n	b654 <_write+0x40>
		return -1;
    b646:	2401      	movs	r4, #1
    b648:	4264      	negs	r4, r4
    b64a:	e003      	b.n	b654 <_write+0x40>
	for (; len != 0; --len) {
    b64c:	0014      	movs	r4, r2
    b64e:	e001      	b.n	b654 <_write+0x40>
			return -1;
    b650:	2401      	movs	r4, #1
    b652:	4264      	negs	r4, r4
	}
	return nChars;
}
    b654:	0020      	movs	r0, r4
    b656:	bc04      	pop	{r2}
    b658:	4690      	mov	r8, r2
    b65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b65c:	200006cc 	.word	0x200006cc
    b660:	200006c8 	.word	0x200006c8

0000b664 <get_gpio_pin>:
 * @param  port port to use. Either A or B
 * @param  pin  pin that's being selected. Depends on port
 * @return      value of the pin that was selected.
 */
int get_gpio_pin(char port, int pin)
{
    b664:	b530      	push	{r4, r5, lr}
    b666:	b083      	sub	sp, #12
    b668:	000c      	movs	r4, r1
	int pin_val = -1;

	switch (port) {
    b66a:	2861      	cmp	r0, #97	; 0x61
    b66c:	d006      	beq.n	b67c <get_gpio_pin+0x18>
    b66e:	2862      	cmp	r0, #98	; 0x62
    b670:	d013      	beq.n	b69a <get_gpio_pin+0x36>
	int pin_val = -1;
    b672:	2501      	movs	r5, #1
    b674:	426d      	negs	r5, r5
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
			//TODO: error codes
		}
	}
	return pin_val;
}
    b676:	0028      	movs	r0, r5
    b678:	b003      	add	sp, #12
    b67a:	bd30      	pop	{r4, r5, pc}
		switch (pin) {
    b67c:	2908      	cmp	r1, #8
    b67e:	d014      	beq.n	b6aa <get_gpio_pin+0x46>
    b680:	2909      	cmp	r1, #9
    b682:	d014      	beq.n	b6ae <get_gpio_pin+0x4a>
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    b684:	2303      	movs	r3, #3
    b686:	9300      	str	r3, [sp, #0]
    b688:	3b01      	subs	r3, #1
    b68a:	2209      	movs	r2, #9
    b68c:	2108      	movs	r1, #8
    b68e:	480e      	ldr	r0, [pc, #56]	; (b6c8 <get_gpio_pin+0x64>)
    b690:	4d0e      	ldr	r5, [pc, #56]	; (b6cc <get_gpio_pin+0x68>)
    b692:	47a8      	blx	r5
	int pin_val = -1;
    b694:	2501      	movs	r5, #1
    b696:	426d      	negs	r5, r5
			break;
    b698:	e001      	b.n	b69e <get_gpio_pin+0x3a>
	int pin_val = -1;
    b69a:	2501      	movs	r5, #1
    b69c:	426d      	negs	r5, r5
		switch (pin) {
    b69e:	2c02      	cmp	r4, #2
    b6a0:	d00f      	beq.n	b6c2 <get_gpio_pin+0x5e>
    b6a2:	2c03      	cmp	r4, #3
    b6a4:	d104      	bne.n	b6b0 <get_gpio_pin+0x4c>
			pin_val = PIN_PB03;
    b6a6:	2523      	movs	r5, #35	; 0x23
    b6a8:	e7e5      	b.n	b676 <get_gpio_pin+0x12>
			pin_val = PIN_PA08;
    b6aa:	000d      	movs	r5, r1
    b6ac:	e7f7      	b.n	b69e <get_gpio_pin+0x3a>
			pin_val = PIN_PA09;
    b6ae:	000d      	movs	r5, r1
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    b6b0:	2303      	movs	r3, #3
    b6b2:	9300      	str	r3, [sp, #0]
    b6b4:	3b01      	subs	r3, #1
    b6b6:	2209      	movs	r2, #9
    b6b8:	2108      	movs	r1, #8
    b6ba:	4803      	ldr	r0, [pc, #12]	; (b6c8 <get_gpio_pin+0x64>)
    b6bc:	4c03      	ldr	r4, [pc, #12]	; (b6cc <get_gpio_pin+0x68>)
    b6be:	47a0      	blx	r4
    b6c0:	e7d9      	b.n	b676 <get_gpio_pin+0x12>
			pin_val = PIN_PB02;
    b6c2:	2522      	movs	r5, #34	; 0x22
	return pin_val;
    b6c4:	e7d7      	b.n	b676 <get_gpio_pin+0x12>
    b6c6:	46c0      	nop			; (mov r8, r8)
    b6c8:	00015cb4 	.word	0x00015cb4
    b6cc:	0000f309 	.word	0x0000f309

0000b6d0 <help>:

/**
 * Prints out information about the available cli commands.
 */
void help()
{
    b6d0:	b510      	push	{r4, lr}
	printf("help - Prints all the available commands and a short synopsis \r\n"
    b6d2:	4802      	ldr	r0, [pc, #8]	; (b6dc <help+0xc>)
    b6d4:	4b02      	ldr	r3, [pc, #8]	; (b6e0 <help+0x10>)
    b6d6:	4798      	blx	r3
	       "adc_get [port] [pin] - Get the ADC value of the given pin. \r\n"
	       "mcu_temp - Reports the temperature of the mcu in Celsius. \r\n"
	       "i2c_scan - Prints out a list connected I2C slave addresses \r\n"
		   "relay_set - turns on relay \r\n"
		   "relay_clear - turns off relay \r\n");
}
    b6d8:	bd10      	pop	{r4, pc}
    b6da:	46c0      	nop			; (mov r8, r8)
    b6dc:	00015d1c 	.word	0x00015d1c
    b6e0:	0000f425 	.word	0x0000f425

0000b6e4 <ver_bl>:
 *
 * Version follows correct Semantic Versioning guidelines. <br>
 * <b>See</b> <a href="https://semver.org/">SemVer</a> for more information.
 */
void ver_bl()
{
    b6e4:	b510      	push	{r4, lr}
	printf("Version: %s \r\n", BL_VERSION);
    b6e6:	4902      	ldr	r1, [pc, #8]	; (b6f0 <ver_bl+0xc>)
    b6e8:	4802      	ldr	r0, [pc, #8]	; (b6f4 <ver_bl+0x10>)
    b6ea:	4b03      	ldr	r3, [pc, #12]	; (b6f8 <ver_bl+0x14>)
    b6ec:	4798      	blx	r3
}
    b6ee:	bd10      	pop	{r4, pc}
    b6f0:	0001644c 	.word	0x0001644c
    b6f4:	00016454 	.word	0x00016454
    b6f8:	0000f309 	.word	0x0000f309

0000b6fc <ver_app>:
 *
 * Version follows correct Semantic Versioning guidelines. <br>
 * <b>See</b> <a href="https://semver.org/">SemVer</a> for more information.
 */
void ver_app()
{
    b6fc:	b510      	push	{r4, lr}
	printf("Version: %s \r\n", APP_VERSION);
    b6fe:	4902      	ldr	r1, [pc, #8]	; (b708 <ver_app+0xc>)
    b700:	4802      	ldr	r0, [pc, #8]	; (b70c <ver_app+0x10>)
    b702:	4b03      	ldr	r3, [pc, #12]	; (b710 <ver_app+0x14>)
    b704:	4798      	blx	r3
}
    b706:	bd10      	pop	{r4, pc}
    b708:	0001644c 	.word	0x0001644c
    b70c:	00016454 	.word	0x00016454
    b710:	0000f309 	.word	0x0000f309

0000b714 <mac>:
 * Prints the MAC address of the Wi-Fi chip.
 *
 * For more information on MAC addresses, see <a href="https://en.wikipedia.org/wiki/MAC_address">Wikipedia</a>
 */
void mac()
{
    b714:	b510      	push	{r4, lr}
	printf("00.00.00.00\r\n");
    b716:	4802      	ldr	r0, [pc, #8]	; (b720 <mac+0xc>)
    b718:	4b02      	ldr	r3, [pc, #8]	; (b724 <mac+0x10>)
    b71a:	4798      	blx	r3
}
    b71c:	bd10      	pop	{r4, pc}
    b71e:	46c0      	nop			; (mov r8, r8)
    b720:	00016290 	.word	0x00016290
    b724:	0000f425 	.word	0x0000f425

0000b728 <ip>:
 * Prints the IP address of the Wi-Fi chip.
 *
 * @note Currently this only returns a dummy IP address and will need to be updated.
 */
void ip()
{
    b728:	b510      	push	{r4, lr}
	printf("255.255.255.255 \r\n");
    b72a:	4802      	ldr	r0, [pc, #8]	; (b734 <ip+0xc>)
    b72c:	4b02      	ldr	r3, [pc, #8]	; (b738 <ip+0x10>)
    b72e:	4798      	blx	r3
}
    b730:	bd10      	pop	{r4, pc}
    b732:	46c0      	nop			; (mov r8, r8)
    b734:	0001627c 	.word	0x0001627c
    b738:	0000f425 	.word	0x0000f425

0000b73c <otafu>:

	
}

// 1 = update 0 check for upgrade
void otafu(uint8_t update_or_firmware) {
    b73c:	b510      	push	{r4, lr}
	if(update_or_firmware) {
    b73e:	2800      	cmp	r0, #0
    b740:	d00b      	beq.n	b75a <otafu+0x1e>
		if(download_firmware()) {
    b742:	4b0c      	ldr	r3, [pc, #48]	; (b774 <otafu+0x38>)
    b744:	4798      	blx	r3
    b746:	2800      	cmp	r0, #0
    b748:	d003      	beq.n	b752 <otafu+0x16>
			printf("firmware successfully downloaded!\r\n");
    b74a:	480b      	ldr	r0, [pc, #44]	; (b778 <otafu+0x3c>)
    b74c:	4b0b      	ldr	r3, [pc, #44]	; (b77c <otafu+0x40>)
    b74e:	4798      	blx	r3
    b750:	e00a      	b.n	b768 <otafu+0x2c>
		} else {
			printf("download failed...\r\n");
    b752:	480b      	ldr	r0, [pc, #44]	; (b780 <otafu+0x44>)
    b754:	4b09      	ldr	r3, [pc, #36]	; (b77c <otafu+0x40>)
    b756:	4798      	blx	r3
    b758:	e006      	b.n	b768 <otafu+0x2c>
		}
	} else {
		if(check_for_update()) {
    b75a:	4b0a      	ldr	r3, [pc, #40]	; (b784 <otafu+0x48>)
    b75c:	4798      	blx	r3
    b75e:	2800      	cmp	r0, #0
    b760:	d103      	bne.n	b76a <otafu+0x2e>
			printf("update available!\r\n");
		} else {
			printf("on latest version\r\n");
    b762:	4809      	ldr	r0, [pc, #36]	; (b788 <otafu+0x4c>)
    b764:	4b05      	ldr	r3, [pc, #20]	; (b77c <otafu+0x40>)
    b766:	4798      	blx	r3
		}
	}
	
}
    b768:	bd10      	pop	{r4, pc}
			printf("update available!\r\n");
    b76a:	4808      	ldr	r0, [pc, #32]	; (b78c <otafu+0x50>)
    b76c:	4b03      	ldr	r3, [pc, #12]	; (b77c <otafu+0x40>)
    b76e:	4798      	blx	r3
    b770:	e7fa      	b.n	b768 <otafu+0x2c>
    b772:	46c0      	nop			; (mov r8, r8)
    b774:	00005431 	.word	0x00005431
    b778:	000162b8 	.word	0x000162b8
    b77c:	0000f425 	.word	0x0000f425
    b780:	000162dc 	.word	0x000162dc
    b784:	000053dd 	.word	0x000053dd
    b788:	00016304 	.word	0x00016304
    b78c:	000162f0 	.word	0x000162f0

0000b790 <i2c_scan>:
/**
 * Reports all connected I2C slave devices over a 7 bit (128) address space.
 *
 */
void i2c_scan()
{
    b790:	b5f0      	push	{r4, r5, r6, r7, lr}
    b792:	b089      	sub	sp, #36	; 0x24
	struct i2c_master_packet wr_packet = {
    b794:	aa05      	add	r2, sp, #20
    b796:	2300      	movs	r3, #0
    b798:	7213      	strb	r3, [r2, #8]
    b79a:	7253      	strb	r3, [r2, #9]
    b79c:	7293      	strb	r3, [r2, #10]
		.data			=  0,
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};
	struct i2c_master_packet rd_packet = {
    b79e:	aa02      	add	r2, sp, #8
    b7a0:	2101      	movs	r1, #1
    b7a2:	8051      	strh	r1, [r2, #2]
    b7a4:	9303      	str	r3, [sp, #12]
    b7a6:	7213      	strb	r3, [r2, #8]
    b7a8:	7253      	strb	r3, [r2, #9]
    b7aa:	7293      	strb	r3, [r2, #10]
		.data			=  0,
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    b7ac:	2400      	movs	r4, #0
		enum status_code i2c_status;
		wr_packet.address = slave_address;
    b7ae:	ad05      	add	r5, sp, #20
		rd_packet.address = slave_address;
		wr_packet.data_length = 0;
    b7b0:	2700      	movs	r7, #0
		uint8_t wr_buffer = 0x05;
		wr_packet.data = &wr_buffer;
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_tsl2561, &wr_packet);
    b7b2:	4e23      	ldr	r6, [pc, #140]	; (b840 <i2c_scan+0xb0>)
    b7b4:	e005      	b.n	b7c2 <i2c_scan+0x32>
		if (i2c_status == STATUS_OK) {
			i2c_status = i2c_master_read_packet_wait(&i2c_tsl2561, &rd_packet);
			printf("Address found at %#X\r\n", slave_address);
		}
		i2c_master_send_stop(&i2c_tsl2561);
    b7b6:	4822      	ldr	r0, [pc, #136]	; (b840 <i2c_scan+0xb0>)
    b7b8:	4b22      	ldr	r3, [pc, #136]	; (b844 <i2c_scan+0xb4>)
    b7ba:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    b7bc:	3401      	adds	r4, #1
    b7be:	2c80      	cmp	r4, #128	; 0x80
    b7c0:	d018      	beq.n	b7f4 <i2c_scan+0x64>
		wr_packet.address = slave_address;
    b7c2:	b2a3      	uxth	r3, r4
    b7c4:	802b      	strh	r3, [r5, #0]
		rd_packet.address = slave_address;
    b7c6:	aa02      	add	r2, sp, #8
    b7c8:	8013      	strh	r3, [r2, #0]
		wr_packet.data_length = 0;
    b7ca:	806f      	strh	r7, [r5, #2]
		uint8_t wr_buffer = 0x05;
    b7cc:	466b      	mov	r3, sp
    b7ce:	2205      	movs	r2, #5
    b7d0:	71da      	strb	r2, [r3, #7]
    b7d2:	3307      	adds	r3, #7
		wr_packet.data = &wr_buffer;
    b7d4:	606b      	str	r3, [r5, #4]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_tsl2561, &wr_packet);
    b7d6:	0029      	movs	r1, r5
    b7d8:	0030      	movs	r0, r6
    b7da:	4b1b      	ldr	r3, [pc, #108]	; (b848 <i2c_scan+0xb8>)
    b7dc:	4798      	blx	r3
		if (i2c_status == STATUS_OK) {
    b7de:	2800      	cmp	r0, #0
    b7e0:	d1e9      	bne.n	b7b6 <i2c_scan+0x26>
			i2c_status = i2c_master_read_packet_wait(&i2c_tsl2561, &rd_packet);
    b7e2:	a902      	add	r1, sp, #8
    b7e4:	4816      	ldr	r0, [pc, #88]	; (b840 <i2c_scan+0xb0>)
    b7e6:	4b19      	ldr	r3, [pc, #100]	; (b84c <i2c_scan+0xbc>)
    b7e8:	4798      	blx	r3
			printf("Address found at %#X\r\n", slave_address);
    b7ea:	0021      	movs	r1, r4
    b7ec:	4818      	ldr	r0, [pc, #96]	; (b850 <i2c_scan+0xc0>)
    b7ee:	4b19      	ldr	r3, [pc, #100]	; (b854 <i2c_scan+0xc4>)
    b7f0:	4798      	blx	r3
    b7f2:	e7e0      	b.n	b7b6 <i2c_scan+0x26>
	}
	
	printf("Scanning temp bus\r\n");
    b7f4:	4818      	ldr	r0, [pc, #96]	; (b858 <i2c_scan+0xc8>)
    b7f6:	4b19      	ldr	r3, [pc, #100]	; (b85c <i2c_scan+0xcc>)
    b7f8:	4798      	blx	r3
	

	for (int slave_address = 0; slave_address < 128; slave_address++) {
    b7fa:	2600      	movs	r6, #0
		//int slave_address = 64;
		enum status_code i2c_status;
		wr_packet.address = slave_address;
		rd_packet.address = slave_address;
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_hdc, &wr_packet);
    b7fc:	4c18      	ldr	r4, [pc, #96]	; (b860 <i2c_scan+0xd0>)
    b7fe:	4f12      	ldr	r7, [pc, #72]	; (b848 <i2c_scan+0xb8>)
		if (i2c_status == STATUS_OK) {
			i2c_status = i2c_master_read_packet_wait(&i2c_hdc, &rd_packet);
    b800:	0025      	movs	r5, r4
    b802:	e005      	b.n	b810 <i2c_scan+0x80>
			printf("Address found at %#X\r\n", slave_address);
		}
		i2c_master_send_stop(&i2c_hdc);
    b804:	4816      	ldr	r0, [pc, #88]	; (b860 <i2c_scan+0xd0>)
    b806:	4b0f      	ldr	r3, [pc, #60]	; (b844 <i2c_scan+0xb4>)
    b808:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    b80a:	3601      	adds	r6, #1
    b80c:	2e80      	cmp	r6, #128	; 0x80
    b80e:	d011      	beq.n	b834 <i2c_scan+0xa4>
		wr_packet.address = slave_address;
    b810:	b2b3      	uxth	r3, r6
    b812:	a905      	add	r1, sp, #20
    b814:	800b      	strh	r3, [r1, #0]
		rd_packet.address = slave_address;
    b816:	aa02      	add	r2, sp, #8
    b818:	8013      	strh	r3, [r2, #0]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_hdc, &wr_packet);
    b81a:	0020      	movs	r0, r4
    b81c:	47b8      	blx	r7
		if (i2c_status == STATUS_OK) {
    b81e:	2800      	cmp	r0, #0
    b820:	d1f0      	bne.n	b804 <i2c_scan+0x74>
			i2c_status = i2c_master_read_packet_wait(&i2c_hdc, &rd_packet);
    b822:	a902      	add	r1, sp, #8
    b824:	0028      	movs	r0, r5
    b826:	4b09      	ldr	r3, [pc, #36]	; (b84c <i2c_scan+0xbc>)
    b828:	4798      	blx	r3
			printf("Address found at %#X\r\n", slave_address);
    b82a:	0031      	movs	r1, r6
    b82c:	4808      	ldr	r0, [pc, #32]	; (b850 <i2c_scan+0xc0>)
    b82e:	4b09      	ldr	r3, [pc, #36]	; (b854 <i2c_scan+0xc4>)
    b830:	4798      	blx	r3
    b832:	e7e7      	b.n	b804 <i2c_scan+0x74>
	}
	
	printf("Scans complete.\r\n");
    b834:	480b      	ldr	r0, [pc, #44]	; (b864 <i2c_scan+0xd4>)
    b836:	4b09      	ldr	r3, [pc, #36]	; (b85c <i2c_scan+0xcc>)
    b838:	4798      	blx	r3
}
    b83a:	b009      	add	sp, #36	; 0x24
    b83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b83e:	46c0      	nop			; (mov r8, r8)
    b840:	200002a8 	.word	0x200002a8
    b844:	0000b5b9 	.word	0x0000b5b9
    b848:	0000b5a5 	.word	0x0000b5a5
    b84c:	0000b57d 	.word	0x0000b57d
    b850:	00016008 	.word	0x00016008
    b854:	0000f309 	.word	0x0000f309
    b858:	00016020 	.word	0x00016020
    b85c:	0000f425 	.word	0x0000f425
    b860:	2000029c 	.word	0x2000029c
    b864:	00016034 	.word	0x00016034

0000b868 <print_general_error>:
 * Prints a general error message.
 *
 * @param func_name function where error occured.
 */
void print_general_error(char *func_name)
{
    b868:	b510      	push	{r4, lr}
    b86a:	0001      	movs	r1, r0
	printf("there was an error parsing your args for %s. See help for correct usage.\r\n", func_name);
    b86c:	4801      	ldr	r0, [pc, #4]	; (b874 <print_general_error+0xc>)
    b86e:	4b02      	ldr	r3, [pc, #8]	; (b878 <print_general_error+0x10>)
    b870:	4798      	blx	r3
}
    b872:	bd10      	pop	{r4, pc}
    b874:	00016384 	.word	0x00016384
    b878:	0000f309 	.word	0x0000f309

0000b87c <print_args_error>:
 * @param func_name     name of the function where error occured
 * @param required_args number of arguments required for the function
 * @param num_args      number of arguments given to the function
 */
void print_args_error(char *func_name, int required_args, int num_args)
{
    b87c:	b510      	push	{r4, lr}
    b87e:	0013      	movs	r3, r2
	printf("Invalid number of args: %s requires %d arguments and you provided %d \r\n."
    b880:	000a      	movs	r2, r1
    b882:	0001      	movs	r1, r0
    b884:	4801      	ldr	r0, [pc, #4]	; (b88c <print_args_error+0x10>)
    b886:	4c02      	ldr	r4, [pc, #8]	; (b890 <print_args_error+0x14>)
    b888:	47a0      	blx	r4
	       "See help for more information. \r\n", func_name, required_args, num_args);
}
    b88a:	bd10      	pop	{r4, pc}
    b88c:	00016318 	.word	0x00016318
    b890:	0000f309 	.word	0x0000f309

0000b894 <configure_adc>:
 *      @li Reference voltage: 1/2* VCC (1.65V)
 *      @li clock prescale: 16x
 * @param pin pin to read value from
 */
void configure_adc(int pin)
{
    b894:	b510      	push	{r4, lr}
    b896:	b08c      	sub	sp, #48	; 0x30
    b898:	0004      	movs	r4, r0
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    b89a:	4668      	mov	r0, sp
    b89c:	4b11      	ldr	r3, [pc, #68]	; (b8e4 <configure_adc+0x50>)
    b89e:	4798      	blx	r3
	config_adc.positive_input = pin;
    b8a0:	466b      	mov	r3, sp
    b8a2:	731c      	strb	r4, [r3, #12]
	config_adc.reference = ADC_REFERENCE_INTVCC0;
    b8a4:	2301      	movs	r3, #1
    b8a6:	466a      	mov	r2, sp
    b8a8:	7053      	strb	r3, [r2, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    b8aa:	2380      	movs	r3, #128	; 0x80
    b8ac:	009b      	lsls	r3, r3, #2
    b8ae:	8053      	strh	r3, [r2, #2]
	adc_init(&adc_instance, ADC, &config_adc);
    b8b0:	4c0d      	ldr	r4, [pc, #52]	; (b8e8 <configure_adc+0x54>)
    b8b2:	490e      	ldr	r1, [pc, #56]	; (b8ec <configure_adc+0x58>)
    b8b4:	0020      	movs	r0, r4
    b8b6:	4b0e      	ldr	r3, [pc, #56]	; (b8f0 <configure_adc+0x5c>)
    b8b8:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    b8ba:	6822      	ldr	r2, [r4, #0]
    b8bc:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    b8be:	b25b      	sxtb	r3, r3
    b8c0:	2b00      	cmp	r3, #0
    b8c2:	dbfb      	blt.n	b8bc <configure_adc+0x28>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    b8c4:	230f      	movs	r3, #15
    b8c6:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    b8c8:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    b8ca:	7813      	ldrb	r3, [r2, #0]
    b8cc:	2102      	movs	r1, #2
    b8ce:	430b      	orrs	r3, r1
    b8d0:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    b8d2:	4b05      	ldr	r3, [pc, #20]	; (b8e8 <configure_adc+0x54>)
    b8d4:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    b8d6:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    b8d8:	b25b      	sxtb	r3, r3
    b8da:	2b00      	cmp	r3, #0
    b8dc:	dbfb      	blt.n	b8d6 <configure_adc+0x42>
	adc_enable(&adc_instance);
}
    b8de:	b00c      	add	sp, #48	; 0x30
    b8e0:	bd10      	pop	{r4, pc}
    b8e2:	46c0      	nop			; (mov r8, r8)
    b8e4:	00009315 	.word	0x00009315
    b8e8:	20000724 	.word	0x20000724
    b8ec:	42004000 	.word	0x42004000
    b8f0:	0000935d 	.word	0x0000935d

0000b8f4 <adc_get>:
{
    b8f4:	b530      	push	{r4, r5, lr}
    b8f6:	b083      	sub	sp, #12
	switch (port) {
    b8f8:	2861      	cmp	r0, #97	; 0x61
    b8fa:	d126      	bne.n	b94a <adc_get+0x56>
			switch (pin) {
    b8fc:	2902      	cmp	r1, #2
    b8fe:	d114      	bne.n	b92a <adc_get+0x36>
		configure_adc(pin_val);
    b900:	2000      	movs	r0, #0
    b902:	4b3e      	ldr	r3, [pc, #248]	; (b9fc <adc_get+0x108>)
    b904:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    b906:	4b3e      	ldr	r3, [pc, #248]	; (ba00 <adc_get+0x10c>)
    b908:	6819      	ldr	r1, [r3, #0]
    b90a:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    b90c:	b25b      	sxtb	r3, r3
    b90e:	2b00      	cmp	r3, #0
    b910:	dbfb      	blt.n	b90a <adc_get+0x16>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    b912:	7b0b      	ldrb	r3, [r1, #12]
    b914:	2202      	movs	r2, #2
    b916:	4313      	orrs	r3, r2
    b918:	730b      	strb	r3, [r1, #12]
    b91a:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    b91c:	b25b      	sxtb	r3, r3
    b91e:	2b00      	cmp	r3, #0
    b920:	dbfb      	blt.n	b91a <adc_get+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    b922:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    b924:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    b926:	2402      	movs	r4, #2
    b928:	e022      	b.n	b970 <adc_get+0x7c>
					printf("fail on pin ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    b92a:	4b36      	ldr	r3, [pc, #216]	; (ba04 <adc_get+0x110>)
    b92c:	4798      	blx	r3
    b92e:	2362      	movs	r3, #98	; 0x62
    b930:	5cc2      	ldrb	r2, [r0, r3]
    b932:	3b5f      	subs	r3, #95	; 0x5f
    b934:	4013      	ands	r3, r2
    b936:	2b02      	cmp	r3, #2
    b938:	d005      	beq.n	b946 <adc_get+0x52>
    b93a:	2161      	movs	r1, #97	; 0x61
    b93c:	2202      	movs	r2, #2
    b93e:	4832      	ldr	r0, [pc, #200]	; (ba08 <adc_get+0x114>)
    b940:	4b32      	ldr	r3, [pc, #200]	; (ba0c <adc_get+0x118>)
    b942:	4798      	blx	r3
					break;
    b944:	e00e      	b.n	b964 <adc_get+0x70>
					printf("fail on pin ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    b946:	2141      	movs	r1, #65	; 0x41
    b948:	e7f8      	b.n	b93c <adc_get+0x48>
			printf("fail on port ADC can currently only be configured on %c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    b94a:	4b2e      	ldr	r3, [pc, #184]	; (ba04 <adc_get+0x110>)
    b94c:	4798      	blx	r3
    b94e:	2362      	movs	r3, #98	; 0x62
    b950:	5cc2      	ldrb	r2, [r0, r3]
    b952:	3b5f      	subs	r3, #95	; 0x5f
    b954:	4013      	ands	r3, r2
    b956:	2b02      	cmp	r3, #2
    b958:	d006      	beq.n	b968 <adc_get+0x74>
    b95a:	2161      	movs	r1, #97	; 0x61
    b95c:	2202      	movs	r2, #2
    b95e:	482c      	ldr	r0, [pc, #176]	; (ba10 <adc_get+0x11c>)
    b960:	4b2a      	ldr	r3, [pc, #168]	; (ba0c <adc_get+0x118>)
    b962:	4798      	blx	r3
}
    b964:	b003      	add	sp, #12
    b966:	bd30      	pop	{r4, r5, pc}
			printf("fail on port ADC can currently only be configured on %c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    b968:	2141      	movs	r1, #65	; 0x41
    b96a:	e7f7      	b.n	b95c <adc_get+0x68>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    b96c:	4210      	tst	r0, r2
    b96e:	d10a      	bne.n	b986 <adc_get+0x92>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    b970:	7e0b      	ldrb	r3, [r1, #24]
    b972:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    b974:	0002      	movs	r2, r0
    b976:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    b978:	421d      	tst	r5, r3
    b97a:	d000      	beq.n	b97e <adc_get+0x8a>
		status_flags |= ADC_STATUS_WINDOW;
    b97c:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    b97e:	421c      	tst	r4, r3
    b980:	d0f4      	beq.n	b96c <adc_get+0x78>
		status_flags |= ADC_STATUS_OVERRUN;
    b982:	432a      	orrs	r2, r5
    b984:	e7f2      	b.n	b96c <adc_get+0x78>
    b986:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    b988:	b25b      	sxtb	r3, r3
    b98a:	2b00      	cmp	r3, #0
    b98c:	dbfb      	blt.n	b986 <adc_get+0x92>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    b98e:	8b48      	ldrh	r0, [r1, #26]
    b990:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    b992:	2301      	movs	r3, #1
    b994:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    b996:	7e0a      	ldrb	r2, [r1, #24]
    b998:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    b99a:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    b99c:	0754      	lsls	r4, r2, #29
    b99e:	d501      	bpl.n	b9a4 <adc_get+0xb0>
		status_flags |= ADC_STATUS_WINDOW;
    b9a0:	2402      	movs	r4, #2
    b9a2:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    b9a4:	0792      	lsls	r2, r2, #30
    b9a6:	d501      	bpl.n	b9ac <adc_get+0xb8>
		status_flags |= ADC_STATUS_OVERRUN;
    b9a8:	2204      	movs	r2, #4
    b9aa:	4313      	orrs	r3, r2

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    b9ac:	075b      	lsls	r3, r3, #29
    b9ae:	d501      	bpl.n	b9b4 <adc_get+0xc0>
	adc_module->INTFLAG.reg = int_flags;
    b9b0:	2302      	movs	r3, #2
    b9b2:	760b      	strb	r3, [r1, #24]
		float voltage = (adc_result/4095.0)*1.65; //TODO: set values, NO MAGIC NUMBERS
    b9b4:	4b17      	ldr	r3, [pc, #92]	; (ba14 <adc_get+0x120>)
    b9b6:	4798      	blx	r3
    b9b8:	2200      	movs	r2, #0
    b9ba:	4b17      	ldr	r3, [pc, #92]	; (ba18 <adc_get+0x124>)
    b9bc:	4c17      	ldr	r4, [pc, #92]	; (ba1c <adc_get+0x128>)
    b9be:	47a0      	blx	r4
    b9c0:	4a17      	ldr	r2, [pc, #92]	; (ba20 <adc_get+0x12c>)
    b9c2:	4b18      	ldr	r3, [pc, #96]	; (ba24 <adc_get+0x130>)
    b9c4:	4c18      	ldr	r4, [pc, #96]	; (ba28 <adc_get+0x134>)
    b9c6:	47a0      	blx	r4
    b9c8:	4b18      	ldr	r3, [pc, #96]	; (ba2c <adc_get+0x138>)
    b9ca:	4798      	blx	r3
    b9cc:	1c04      	adds	r4, r0, #0
		printf("Voltage at P%c%d: %f\r\n", toupper(port), pin_val, voltage);
    b9ce:	4b0d      	ldr	r3, [pc, #52]	; (ba04 <adc_get+0x110>)
    b9d0:	4798      	blx	r3
    b9d2:	2362      	movs	r3, #98	; 0x62
    b9d4:	5cc2      	ldrb	r2, [r0, r3]
    b9d6:	3b5f      	subs	r3, #95	; 0x5f
    b9d8:	4013      	ands	r3, r2
    b9da:	2b02      	cmp	r3, #2
    b9dc:	d00b      	beq.n	b9f6 <adc_get+0x102>
    b9de:	2561      	movs	r5, #97	; 0x61
    b9e0:	1c20      	adds	r0, r4, #0
    b9e2:	4b13      	ldr	r3, [pc, #76]	; (ba30 <adc_get+0x13c>)
    b9e4:	4798      	blx	r3
    b9e6:	9000      	str	r0, [sp, #0]
    b9e8:	9101      	str	r1, [sp, #4]
    b9ea:	2200      	movs	r2, #0
    b9ec:	0029      	movs	r1, r5
    b9ee:	4811      	ldr	r0, [pc, #68]	; (ba34 <adc_get+0x140>)
    b9f0:	4b06      	ldr	r3, [pc, #24]	; (ba0c <adc_get+0x118>)
    b9f2:	4798      	blx	r3
}
    b9f4:	e7b6      	b.n	b964 <adc_get+0x70>
		printf("Voltage at P%c%d: %f\r\n", toupper(port), pin_val, voltage);
    b9f6:	2541      	movs	r5, #65	; 0x41
    b9f8:	e7f2      	b.n	b9e0 <adc_get+0xec>
    b9fa:	46c0      	nop			; (mov r8, r8)
    b9fc:	0000b895 	.word	0x0000b895
    ba00:	20000724 	.word	0x20000724
    ba04:	0000e829 	.word	0x0000e829
    ba08:	00015bfc 	.word	0x00015bfc
    ba0c:	0000f309 	.word	0x0000f309
    ba10:	00015c4c 	.word	0x00015c4c
    ba14:	00013c71 	.word	0x00013c71
    ba18:	40affe00 	.word	0x40affe00
    ba1c:	00012835 	.word	0x00012835
    ba20:	66666666 	.word	0x66666666
    ba24:	3ffa6666 	.word	0x3ffa6666
    ba28:	0001309d 	.word	0x0001309d
    ba2c:	00013e09 	.word	0x00013e09
    ba30:	00013d65 	.word	0x00013d65
    ba34:	00015c9c 	.word	0x00015c9c

0000ba38 <mcu_temp>:
{
    ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configure_adc(pin);
    ba3a:	2018      	movs	r0, #24
    ba3c:	4b34      	ldr	r3, [pc, #208]	; (bb10 <mcu_temp+0xd8>)
    ba3e:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    ba40:	4b34      	ldr	r3, [pc, #208]	; (bb14 <mcu_temp+0xdc>)
    ba42:	6819      	ldr	r1, [r3, #0]
    ba44:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    ba46:	b25b      	sxtb	r3, r3
    ba48:	2b00      	cmp	r3, #0
    ba4a:	dbfb      	blt.n	ba44 <mcu_temp+0xc>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    ba4c:	7b0b      	ldrb	r3, [r1, #12]
    ba4e:	2202      	movs	r2, #2
    ba50:	4313      	orrs	r3, r2
    ba52:	730b      	strb	r3, [r1, #12]
    ba54:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    ba56:	b25b      	sxtb	r3, r3
    ba58:	2b00      	cmp	r3, #0
    ba5a:	dbfb      	blt.n	ba54 <mcu_temp+0x1c>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    ba5c:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    ba5e:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    ba60:	2402      	movs	r4, #2
    ba62:	e001      	b.n	ba68 <mcu_temp+0x30>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    ba64:	4210      	tst	r0, r2
    ba66:	d10a      	bne.n	ba7e <mcu_temp+0x46>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    ba68:	7e0b      	ldrb	r3, [r1, #24]
    ba6a:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    ba6c:	0002      	movs	r2, r0
    ba6e:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    ba70:	421d      	tst	r5, r3
    ba72:	d000      	beq.n	ba76 <mcu_temp+0x3e>
		status_flags |= ADC_STATUS_WINDOW;
    ba74:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    ba76:	421c      	tst	r4, r3
    ba78:	d0f4      	beq.n	ba64 <mcu_temp+0x2c>
		status_flags |= ADC_STATUS_OVERRUN;
    ba7a:	432a      	orrs	r2, r5
    ba7c:	e7f2      	b.n	ba64 <mcu_temp+0x2c>
    ba7e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    ba80:	b25b      	sxtb	r3, r3
    ba82:	2b00      	cmp	r3, #0
    ba84:	dbfb      	blt.n	ba7e <mcu_temp+0x46>
	*result = adc_module->RESULT.reg;
    ba86:	8b4c      	ldrh	r4, [r1, #26]
    ba88:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    ba8a:	2301      	movs	r3, #1
    ba8c:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    ba8e:	7e0a      	ldrb	r2, [r1, #24]
    ba90:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    ba92:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    ba94:	0750      	lsls	r0, r2, #29
    ba96:	d501      	bpl.n	ba9c <mcu_temp+0x64>
		status_flags |= ADC_STATUS_WINDOW;
    ba98:	2002      	movs	r0, #2
    ba9a:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    ba9c:	0792      	lsls	r2, r2, #30
    ba9e:	d501      	bpl.n	baa4 <mcu_temp+0x6c>
		status_flags |= ADC_STATUS_OVERRUN;
    baa0:	2204      	movs	r2, #4
    baa2:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    baa4:	075b      	lsls	r3, r3, #29
    baa6:	d501      	bpl.n	baac <mcu_temp+0x74>
	adc_module->INTFLAG.reg = int_flags;
    baa8:	2302      	movs	r3, #2
    baaa:	760b      	strb	r3, [r1, #24]
	if((adc_result & 0x8000) == 0) {
    baac:	b223      	sxth	r3, r4
    baae:	2b00      	cmp	r3, #0
    bab0:	db18      	blt.n	bae4 <mcu_temp+0xac>
      temperature = (adc_result >> 8) + ((adc_result & 0x00F0)>>4)*0.5;
    bab2:	0620      	lsls	r0, r4, #24
    bab4:	0f00      	lsrs	r0, r0, #28
    bab6:	4d18      	ldr	r5, [pc, #96]	; (bb18 <mcu_temp+0xe0>)
    bab8:	47a8      	blx	r5
    baba:	2200      	movs	r2, #0
    babc:	4b17      	ldr	r3, [pc, #92]	; (bb1c <mcu_temp+0xe4>)
    babe:	4e18      	ldr	r6, [pc, #96]	; (bb20 <mcu_temp+0xe8>)
    bac0:	47b0      	blx	r6
    bac2:	0006      	movs	r6, r0
    bac4:	000f      	movs	r7, r1
    bac6:	0a20      	lsrs	r0, r4, #8
    bac8:	47a8      	blx	r5
    baca:	0002      	movs	r2, r0
    bacc:	000b      	movs	r3, r1
    bace:	0030      	movs	r0, r6
    bad0:	0039      	movs	r1, r7
    bad2:	4c14      	ldr	r4, [pc, #80]	; (bb24 <mcu_temp+0xec>)
    bad4:	47a0      	blx	r4
	printf("MCU temperature: %dC \r\n", (int) temperature);
    bad6:	4b14      	ldr	r3, [pc, #80]	; (bb28 <mcu_temp+0xf0>)
    bad8:	4798      	blx	r3
    bada:	0001      	movs	r1, r0
    badc:	4813      	ldr	r0, [pc, #76]	; (bb2c <mcu_temp+0xf4>)
    bade:	4b14      	ldr	r3, [pc, #80]	; (bb30 <mcu_temp+0xf8>)
    bae0:	4798      	blx	r3
}
    bae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      uint16_t twosComplement = (~adc_result) + 1;
    bae4:	4264      	negs	r4, r4
    bae6:	b2a4      	uxth	r4, r4
      temperature = - (twosComplement >> 8) - ((twosComplement & 0x00F0)>>4)*0.5;
    bae8:	0a20      	lsrs	r0, r4, #8
    baea:	4240      	negs	r0, r0
    baec:	4d0a      	ldr	r5, [pc, #40]	; (bb18 <mcu_temp+0xe0>)
    baee:	47a8      	blx	r5
    baf0:	0006      	movs	r6, r0
    baf2:	000f      	movs	r7, r1
    baf4:	0624      	lsls	r4, r4, #24
    baf6:	0f20      	lsrs	r0, r4, #28
    baf8:	47a8      	blx	r5
    bafa:	2200      	movs	r2, #0
    bafc:	4b07      	ldr	r3, [pc, #28]	; (bb1c <mcu_temp+0xe4>)
    bafe:	4c08      	ldr	r4, [pc, #32]	; (bb20 <mcu_temp+0xe8>)
    bb00:	47a0      	blx	r4
    bb02:	0002      	movs	r2, r0
    bb04:	000b      	movs	r3, r1
    bb06:	0030      	movs	r0, r6
    bb08:	0039      	movs	r1, r7
    bb0a:	4c0a      	ldr	r4, [pc, #40]	; (bb34 <mcu_temp+0xfc>)
    bb0c:	47a0      	blx	r4
    bb0e:	e7e2      	b.n	bad6 <mcu_temp+0x9e>
    bb10:	0000b895 	.word	0x0000b895
    bb14:	20000724 	.word	0x20000724
    bb18:	00013c71 	.word	0x00013c71
    bb1c:	3fe00000 	.word	0x3fe00000
    bb20:	0001309d 	.word	0x0001309d
    bb24:	00012215 	.word	0x00012215
    bb28:	00013c09 	.word	0x00013c09
    bb2c:	000162a0 	.word	0x000162a0
    bb30:	0000f309 	.word	0x0000f309
    bb34:	0001359d 	.word	0x0001359d

0000bb38 <configure_port_pins_set>:
/**
 * Sets a given port to output.
 * @param pin pin of the port to set
 */
void configure_port_pins_set(int pin)
{
    bb38:	b500      	push	{lr}
    bb3a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    bb3c:	a901      	add	r1, sp, #4
    bb3e:	2301      	movs	r3, #1
    bb40:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    bb42:	2200      	movs	r2, #0
    bb44:	708a      	strb	r2, [r1, #2]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    bb46:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(pin, &config_port_pin);
    bb48:	b2c0      	uxtb	r0, r0
    bb4a:	4b02      	ldr	r3, [pc, #8]	; (bb54 <configure_port_pins_set+0x1c>)
    bb4c:	4798      	blx	r3
}
    bb4e:	b003      	add	sp, #12
    bb50:	bd00      	pop	{pc}
    bb52:	46c0      	nop			; (mov r8, r8)
    bb54:	0000dbf5 	.word	0x0000dbf5

0000bb58 <gpio_set>:
{
    bb58:	b510      	push	{r4, lr}
	int pin_val = get_gpio_pin(port, pin);
    bb5a:	4b0d      	ldr	r3, [pc, #52]	; (bb90 <gpio_set+0x38>)
    bb5c:	4798      	blx	r3
    bb5e:	0004      	movs	r4, r0
	if (pin_val != -1) {
    bb60:	1c43      	adds	r3, r0, #1
    bb62:	d013      	beq.n	bb8c <gpio_set+0x34>
		configure_port_pins_set(pin_val); //TODO: decide if this is necessary
    bb64:	4b0b      	ldr	r3, [pc, #44]	; (bb94 <gpio_set+0x3c>)
    bb66:	4798      	blx	r3
	if (port_index < PORT_INST_NUM) {
    bb68:	b2e2      	uxtb	r2, r4
		return NULL;
    bb6a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    bb6c:	0621      	lsls	r1, r4, #24
    bb6e:	d404      	bmi.n	bb7a <gpio_set+0x22>
		return &(ports[port_index]->Group[group_index]);
    bb70:	0953      	lsrs	r3, r2, #5
    bb72:	01db      	lsls	r3, r3, #7
    bb74:	4908      	ldr	r1, [pc, #32]	; (bb98 <gpio_set+0x40>)
    bb76:	468c      	mov	ip, r1
    bb78:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    bb7a:	211f      	movs	r1, #31
    bb7c:	4011      	ands	r1, r2
    bb7e:	2201      	movs	r2, #1
    bb80:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    bb82:	619a      	str	r2, [r3, #24]
		printf("Pin %d set high\r\n", pin_val);
    bb84:	0021      	movs	r1, r4
    bb86:	4805      	ldr	r0, [pc, #20]	; (bb9c <gpio_set+0x44>)
    bb88:	4b05      	ldr	r3, [pc, #20]	; (bba0 <gpio_set+0x48>)
    bb8a:	4798      	blx	r3
}
    bb8c:	bd10      	pop	{r4, pc}
    bb8e:	46c0      	nop			; (mov r8, r8)
    bb90:	0000b665 	.word	0x0000b665
    bb94:	0000bb39 	.word	0x0000bb39
    bb98:	41004400 	.word	0x41004400
    bb9c:	00015d08 	.word	0x00015d08
    bba0:	0000f309 	.word	0x0000f309

0000bba4 <gpio_clear>:
{
    bba4:	b510      	push	{r4, lr}
	int pin_val = get_gpio_pin(port, pin);
    bba6:	4b0d      	ldr	r3, [pc, #52]	; (bbdc <gpio_clear+0x38>)
    bba8:	4798      	blx	r3
    bbaa:	0004      	movs	r4, r0
	if (pin_val != -1) {
    bbac:	1c43      	adds	r3, r0, #1
    bbae:	d013      	beq.n	bbd8 <gpio_clear+0x34>
		configure_port_pins_set(pin_val); //TODO: decide if this is necessary
    bbb0:	4b0b      	ldr	r3, [pc, #44]	; (bbe0 <gpio_clear+0x3c>)
    bbb2:	4798      	blx	r3
	if (port_index < PORT_INST_NUM) {
    bbb4:	b2e2      	uxtb	r2, r4
		return NULL;
    bbb6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    bbb8:	0621      	lsls	r1, r4, #24
    bbba:	d404      	bmi.n	bbc6 <gpio_clear+0x22>
		return &(ports[port_index]->Group[group_index]);
    bbbc:	0953      	lsrs	r3, r2, #5
    bbbe:	01db      	lsls	r3, r3, #7
    bbc0:	4908      	ldr	r1, [pc, #32]	; (bbe4 <gpio_clear+0x40>)
    bbc2:	468c      	mov	ip, r1
    bbc4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    bbc6:	211f      	movs	r1, #31
    bbc8:	4011      	ands	r1, r2
    bbca:	2201      	movs	r2, #1
    bbcc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    bbce:	615a      	str	r2, [r3, #20]
		printf("Pin %d cleared\r\n", pin_val);
    bbd0:	0021      	movs	r1, r4
    bbd2:	4805      	ldr	r0, [pc, #20]	; (bbe8 <gpio_clear+0x44>)
    bbd4:	4b05      	ldr	r3, [pc, #20]	; (bbec <gpio_clear+0x48>)
    bbd6:	4798      	blx	r3
}
    bbd8:	bd10      	pop	{r4, pc}
    bbda:	46c0      	nop			; (mov r8, r8)
    bbdc:	0000b665 	.word	0x0000b665
    bbe0:	0000bb39 	.word	0x0000bb39
    bbe4:	41004400 	.word	0x41004400
    bbe8:	00015ce0 	.word	0x00015ce0
    bbec:	0000f309 	.word	0x0000f309

0000bbf0 <get_moisture>:
{
    bbf0:	b570      	push	{r4, r5, r6, lr}
	configure_port_pins_set(PIN_PA17);
    bbf2:	2011      	movs	r0, #17
    bbf4:	4b26      	ldr	r3, [pc, #152]	; (bc90 <get_moisture+0xa0>)
    bbf6:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    bbf8:	2280      	movs	r2, #128	; 0x80
    bbfa:	0292      	lsls	r2, r2, #10
    bbfc:	4b25      	ldr	r3, [pc, #148]	; (bc94 <get_moisture+0xa4>)
    bbfe:	619a      	str	r2, [r3, #24]
	delay_ms(500);
    bc00:	20fa      	movs	r0, #250	; 0xfa
    bc02:	0040      	lsls	r0, r0, #1
    bc04:	4b24      	ldr	r3, [pc, #144]	; (bc98 <get_moisture+0xa8>)
    bc06:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    bc08:	4b24      	ldr	r3, [pc, #144]	; (bc9c <get_moisture+0xac>)
    bc0a:	6819      	ldr	r1, [r3, #0]
    bc0c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    bc0e:	b25b      	sxtb	r3, r3
    bc10:	2b00      	cmp	r3, #0
    bc12:	dbfb      	blt.n	bc0c <get_moisture+0x1c>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    bc14:	7b0b      	ldrb	r3, [r1, #12]
    bc16:	2202      	movs	r2, #2
    bc18:	4313      	orrs	r3, r2
    bc1a:	730b      	strb	r3, [r1, #12]
    bc1c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    bc1e:	b25b      	sxtb	r3, r3
    bc20:	2b00      	cmp	r3, #0
    bc22:	dbfb      	blt.n	bc1c <get_moisture+0x2c>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    bc24:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    bc26:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    bc28:	2402      	movs	r4, #2
    bc2a:	e001      	b.n	bc30 <get_moisture+0x40>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    bc2c:	4210      	tst	r0, r2
    bc2e:	d10a      	bne.n	bc46 <get_moisture+0x56>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    bc30:	7e0b      	ldrb	r3, [r1, #24]
    bc32:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    bc34:	0002      	movs	r2, r0
    bc36:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    bc38:	421d      	tst	r5, r3
    bc3a:	d000      	beq.n	bc3e <get_moisture+0x4e>
		status_flags |= ADC_STATUS_WINDOW;
    bc3c:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    bc3e:	421c      	tst	r4, r3
    bc40:	d0f4      	beq.n	bc2c <get_moisture+0x3c>
		status_flags |= ADC_STATUS_OVERRUN;
    bc42:	432a      	orrs	r2, r5
    bc44:	e7f2      	b.n	bc2c <get_moisture+0x3c>
    bc46:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    bc48:	b25b      	sxtb	r3, r3
    bc4a:	2b00      	cmp	r3, #0
    bc4c:	dbfb      	blt.n	bc46 <get_moisture+0x56>
	*result = adc_module->RESULT.reg;
    bc4e:	8b48      	ldrh	r0, [r1, #26]
    bc50:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    bc52:	2301      	movs	r3, #1
    bc54:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    bc56:	7e0a      	ldrb	r2, [r1, #24]
    bc58:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    bc5a:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    bc5c:	0754      	lsls	r4, r2, #29
    bc5e:	d501      	bpl.n	bc64 <get_moisture+0x74>
		status_flags |= ADC_STATUS_WINDOW;
    bc60:	2402      	movs	r4, #2
    bc62:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    bc64:	0792      	lsls	r2, r2, #30
    bc66:	d501      	bpl.n	bc6c <get_moisture+0x7c>
		status_flags |= ADC_STATUS_OVERRUN;
    bc68:	2204      	movs	r2, #4
    bc6a:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    bc6c:	075b      	lsls	r3, r3, #29
    bc6e:	d501      	bpl.n	bc74 <get_moisture+0x84>
	adc_module->INTFLAG.reg = int_flags;
    bc70:	2302      	movs	r3, #2
    bc72:	760b      	strb	r3, [r1, #24]
		port_base->OUTCLR.reg = pin_mask;
    bc74:	2280      	movs	r2, #128	; 0x80
    bc76:	0292      	lsls	r2, r2, #10
    bc78:	4b06      	ldr	r3, [pc, #24]	; (bc94 <get_moisture+0xa4>)
    bc7a:	615a      	str	r2, [r3, #20]
	float moisture = (adc_result/4095.0f)*(100.0f); //TODO: set values, NO MAGIC NUMBERS
    bc7c:	4b08      	ldr	r3, [pc, #32]	; (bca0 <get_moisture+0xb0>)
    bc7e:	4798      	blx	r3
    bc80:	4908      	ldr	r1, [pc, #32]	; (bca4 <get_moisture+0xb4>)
    bc82:	4b09      	ldr	r3, [pc, #36]	; (bca8 <get_moisture+0xb8>)
    bc84:	4798      	blx	r3
    bc86:	4909      	ldr	r1, [pc, #36]	; (bcac <get_moisture+0xbc>)
    bc88:	4b09      	ldr	r3, [pc, #36]	; (bcb0 <get_moisture+0xc0>)
    bc8a:	4798      	blx	r3
}
    bc8c:	bd70      	pop	{r4, r5, r6, pc}
    bc8e:	46c0      	nop			; (mov r8, r8)
    bc90:	0000bb39 	.word	0x0000bb39
    bc94:	41004400 	.word	0x41004400
    bc98:	0000d8d9 	.word	0x0000d8d9
    bc9c:	20000724 	.word	0x20000724
    bca0:	00012175 	.word	0x00012175
    bca4:	457ff000 	.word	0x457ff000
    bca8:	00011ca5 	.word	0x00011ca5
    bcac:	42c80000 	.word	0x42c80000
    bcb0:	00011f35 	.word	0x00011f35

0000bcb4 <read_sensor>:
{
    bcb4:	b5d0      	push	{r4, r6, r7, lr}
    bcb6:	b082      	sub	sp, #8
    bcb8:	0004      	movs	r4, r0
	if(!strcmp("lux", sensor_name)) {
    bcba:	0001      	movs	r1, r0
    bcbc:	481a      	ldr	r0, [pc, #104]	; (bd28 <read_sensor+0x74>)
    bcbe:	4b1b      	ldr	r3, [pc, #108]	; (bd2c <read_sensor+0x78>)
    bcc0:	4798      	blx	r3
    bcc2:	2800      	cmp	r0, #0
    bcc4:	d00d      	beq.n	bce2 <read_sensor+0x2e>
	if(!strcmp("temp", sensor_name)) {
    bcc6:	0021      	movs	r1, r4
    bcc8:	4819      	ldr	r0, [pc, #100]	; (bd30 <read_sensor+0x7c>)
    bcca:	4b18      	ldr	r3, [pc, #96]	; (bd2c <read_sensor+0x78>)
    bccc:	4798      	blx	r3
    bcce:	2800      	cmp	r0, #0
    bcd0:	d012      	beq.n	bcf8 <read_sensor+0x44>
	if(!strcmp("moisture", sensor_name)) {
    bcd2:	0021      	movs	r1, r4
    bcd4:	4817      	ldr	r0, [pc, #92]	; (bd34 <read_sensor+0x80>)
    bcd6:	4b15      	ldr	r3, [pc, #84]	; (bd2c <read_sensor+0x78>)
    bcd8:	4798      	blx	r3
    bcda:	2800      	cmp	r0, #0
    bcdc:	d01a      	beq.n	bd14 <read_sensor+0x60>
}
    bcde:	b002      	add	sp, #8
    bce0:	bdd0      	pop	{r4, r6, r7, pc}
		power_on_tsl2561();
    bce2:	4b15      	ldr	r3, [pc, #84]	; (bd38 <read_sensor+0x84>)
    bce4:	4798      	blx	r3
		printf("Current lux: %d\r\n", get_lux());
    bce6:	4b15      	ldr	r3, [pc, #84]	; (bd3c <read_sensor+0x88>)
    bce8:	4798      	blx	r3
    bcea:	0001      	movs	r1, r0
    bcec:	4814      	ldr	r0, [pc, #80]	; (bd40 <read_sensor+0x8c>)
    bcee:	4b15      	ldr	r3, [pc, #84]	; (bd44 <read_sensor+0x90>)
    bcf0:	4798      	blx	r3
		power_off_tsl2561();
    bcf2:	4b15      	ldr	r3, [pc, #84]	; (bd48 <read_sensor+0x94>)
    bcf4:	4798      	blx	r3
    bcf6:	e7e6      	b.n	bcc6 <read_sensor+0x12>
		double temperature = get_temp();
    bcf8:	4b14      	ldr	r3, [pc, #80]	; (bd4c <read_sensor+0x98>)
    bcfa:	4798      	blx	r3
    bcfc:	0006      	movs	r6, r0
    bcfe:	000f      	movs	r7, r1
		double humidity = get_humidity();
    bd00:	4b13      	ldr	r3, [pc, #76]	; (bd50 <read_sensor+0x9c>)
    bd02:	4798      	blx	r3
		printf("Current temperature: %3.2f\r\n Current humidity: %3.2f\r\n", temperature, humidity);
    bd04:	9000      	str	r0, [sp, #0]
    bd06:	9101      	str	r1, [sp, #4]
    bd08:	0032      	movs	r2, r6
    bd0a:	003b      	movs	r3, r7
    bd0c:	4811      	ldr	r0, [pc, #68]	; (bd54 <read_sensor+0xa0>)
    bd0e:	490d      	ldr	r1, [pc, #52]	; (bd44 <read_sensor+0x90>)
    bd10:	4788      	blx	r1
    bd12:	e7de      	b.n	bcd2 <read_sensor+0x1e>
		float m_value = get_moisture();
    bd14:	4b10      	ldr	r3, [pc, #64]	; (bd58 <read_sensor+0xa4>)
    bd16:	4798      	blx	r3
		printf("Current moisture: %.02f %% \r\n", m_value);
    bd18:	4b10      	ldr	r3, [pc, #64]	; (bd5c <read_sensor+0xa8>)
    bd1a:	4798      	blx	r3
    bd1c:	0002      	movs	r2, r0
    bd1e:	000b      	movs	r3, r1
    bd20:	480f      	ldr	r0, [pc, #60]	; (bd60 <read_sensor+0xac>)
    bd22:	4908      	ldr	r1, [pc, #32]	; (bd44 <read_sensor+0x90>)
    bd24:	4788      	blx	r1
}
    bd26:	e7da      	b.n	bcde <read_sensor+0x2a>
    bd28:	000163d0 	.word	0x000163d0
    bd2c:	0000f60d 	.word	0x0000f60d
    bd30:	000160a0 	.word	0x000160a0
    bd34:	00016420 	.word	0x00016420
    bd38:	00004739 	.word	0x00004739
    bd3c:	000047b5 	.word	0x000047b5
    bd40:	000163d4 	.word	0x000163d4
    bd44:	0000f309 	.word	0x0000f309
    bd48:	00004755 	.word	0x00004755
    bd4c:	00004561 	.word	0x00004561
    bd50:	00004531 	.word	0x00004531
    bd54:	000163e8 	.word	0x000163e8
    bd58:	0000bbf1 	.word	0x0000bbf1
    bd5c:	00013d65 	.word	0x00013d65
    bd60:	0001642c 	.word	0x0001642c

0000bd64 <configure_port_pins_get>:
/**
 * Sets a given port to input
 * @param pin pin to set as input
 */
void configure_port_pins_get(int pin)
{
    bd64:	b500      	push	{lr}
    bd66:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    bd68:	a901      	add	r1, sp, #4
    bd6a:	2300      	movs	r3, #0
    bd6c:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    bd6e:	2201      	movs	r2, #1
    bd70:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    bd72:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(pin, &config_port_pin);
    bd74:	b2c0      	uxtb	r0, r0
    bd76:	4b02      	ldr	r3, [pc, #8]	; (bd80 <configure_port_pins_get+0x1c>)
    bd78:	4798      	blx	r3
}
    bd7a:	b003      	add	sp, #12
    bd7c:	bd00      	pop	{pc}
    bd7e:	46c0      	nop			; (mov r8, r8)
    bd80:	0000dbf5 	.word	0x0000dbf5

0000bd84 <gpio_get>:
{
    bd84:	b510      	push	{r4, lr}
	int pin_val = get_gpio_pin(port, pin);
    bd86:	4b0d      	ldr	r3, [pc, #52]	; (bdbc <gpio_get+0x38>)
    bd88:	4798      	blx	r3
    bd8a:	0004      	movs	r4, r0
	configure_port_pins_get(pin_val); //TODO: decide if this is necessary
    bd8c:	4b0c      	ldr	r3, [pc, #48]	; (bdc0 <gpio_get+0x3c>)
    bd8e:	4798      	blx	r3
	if (port_index < PORT_INST_NUM) {
    bd90:	b2e0      	uxtb	r0, r4
		return NULL;
    bd92:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    bd94:	0622      	lsls	r2, r4, #24
    bd96:	d404      	bmi.n	bda2 <gpio_get+0x1e>
		return &(ports[port_index]->Group[group_index]);
    bd98:	0943      	lsrs	r3, r0, #5
    bd9a:	01db      	lsls	r3, r3, #7
    bd9c:	4a09      	ldr	r2, [pc, #36]	; (bdc4 <gpio_get+0x40>)
    bd9e:	4694      	mov	ip, r2
    bda0:	4463      	add	r3, ip
	return (port_base->IN.reg & pin_mask);
    bda2:	6a1a      	ldr	r2, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    bda4:	211f      	movs	r1, #31
    bda6:	4001      	ands	r1, r0
    bda8:	2301      	movs	r3, #1
    bdaa:	408b      	lsls	r3, r1
	return (port_base->IN.reg & pin_mask);
    bdac:	401a      	ands	r2, r3
    bdae:	1e53      	subs	r3, r2, #1
    bdb0:	419a      	sbcs	r2, r3
	printf("pin %d value: %d\r\n", pin_val, state);
    bdb2:	0021      	movs	r1, r4
    bdb4:	4804      	ldr	r0, [pc, #16]	; (bdc8 <gpio_get+0x44>)
    bdb6:	4b05      	ldr	r3, [pc, #20]	; (bdcc <gpio_get+0x48>)
    bdb8:	4798      	blx	r3
}
    bdba:	bd10      	pop	{r4, pc}
    bdbc:	0000b665 	.word	0x0000b665
    bdc0:	0000bd65 	.word	0x0000bd65
    bdc4:	41004400 	.word	0x41004400
    bdc8:	00015cf4 	.word	0x00015cf4
    bdcc:	0000f309 	.word	0x0000f309

0000bdd0 <led1_on>:

/**
 * Functions to toggle LEDs
 */
void led1_on(void)
{
    bdd0:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA21);
    bdd2:	2015      	movs	r0, #21
    bdd4:	4b03      	ldr	r3, [pc, #12]	; (bde4 <led1_on+0x14>)
    bdd6:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    bdd8:	2280      	movs	r2, #128	; 0x80
    bdda:	0392      	lsls	r2, r2, #14
    bddc:	4b02      	ldr	r3, [pc, #8]	; (bde8 <led1_on+0x18>)
    bdde:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PA21, true);	
}
    bde0:	bd10      	pop	{r4, pc}
    bde2:	46c0      	nop			; (mov r8, r8)
    bde4:	0000bb39 	.word	0x0000bb39
    bde8:	41004400 	.word	0x41004400

0000bdec <led1_off>:

void led1_off(void)
{
    bdec:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA21);
    bdee:	2015      	movs	r0, #21
    bdf0:	4b03      	ldr	r3, [pc, #12]	; (be00 <led1_off+0x14>)
    bdf2:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    bdf4:	2280      	movs	r2, #128	; 0x80
    bdf6:	0392      	lsls	r2, r2, #14
    bdf8:	4b02      	ldr	r3, [pc, #8]	; (be04 <led1_off+0x18>)
    bdfa:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA21, false);
}
    bdfc:	bd10      	pop	{r4, pc}
    bdfe:	46c0      	nop			; (mov r8, r8)
    be00:	0000bb39 	.word	0x0000bb39
    be04:	41004400 	.word	0x41004400

0000be08 <led2_on>:

void led2_on(void)
{
    be08:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA03);
    be0a:	2003      	movs	r0, #3
    be0c:	4b02      	ldr	r3, [pc, #8]	; (be18 <led2_on+0x10>)
    be0e:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    be10:	2208      	movs	r2, #8
    be12:	4b02      	ldr	r3, [pc, #8]	; (be1c <led2_on+0x14>)
    be14:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PA03, true);
}
    be16:	bd10      	pop	{r4, pc}
    be18:	0000bb39 	.word	0x0000bb39
    be1c:	41004400 	.word	0x41004400

0000be20 <led2_off>:

void led2_off(void)
{
    be20:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA03);
    be22:	2003      	movs	r0, #3
    be24:	4b02      	ldr	r3, [pc, #8]	; (be30 <led2_off+0x10>)
    be26:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    be28:	2208      	movs	r2, #8
    be2a:	4b02      	ldr	r3, [pc, #8]	; (be34 <led2_off+0x14>)
    be2c:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA03, false);
}
    be2e:	bd10      	pop	{r4, pc}
    be30:	0000bb39 	.word	0x0000bb39
    be34:	41004400 	.word	0x41004400

0000be38 <boost_enable>:

void boost_enable(void)
{
    be38:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA20);
    be3a:	2014      	movs	r0, #20
    be3c:	4b03      	ldr	r3, [pc, #12]	; (be4c <boost_enable+0x14>)
    be3e:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    be40:	2280      	movs	r2, #128	; 0x80
    be42:	0352      	lsls	r2, r2, #13
    be44:	4b02      	ldr	r3, [pc, #8]	; (be50 <boost_enable+0x18>)
    be46:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PA20, true);
}
    be48:	bd10      	pop	{r4, pc}
    be4a:	46c0      	nop			; (mov r8, r8)
    be4c:	0000bb39 	.word	0x0000bb39
    be50:	41004400 	.word	0x41004400

0000be54 <boost_disable>:

void boost_disable(void)
{
    be54:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PA20);
    be56:	2014      	movs	r0, #20
    be58:	4b03      	ldr	r3, [pc, #12]	; (be68 <boost_disable+0x14>)
    be5a:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    be5c:	2280      	movs	r2, #128	; 0x80
    be5e:	0352      	lsls	r2, r2, #13
    be60:	4b02      	ldr	r3, [pc, #8]	; (be6c <boost_disable+0x18>)
    be62:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA20, false);
}
    be64:	bd10      	pop	{r4, pc}
    be66:	46c0      	nop			; (mov r8, r8)
    be68:	0000bb39 	.word	0x0000bb39
    be6c:	41004400 	.word	0x41004400

0000be70 <relay1_enable>:

void relay1_enable(void)
{
    be70:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB02);
    be72:	2022      	movs	r0, #34	; 0x22
    be74:	4b02      	ldr	r3, [pc, #8]	; (be80 <relay1_enable+0x10>)
    be76:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    be78:	2204      	movs	r2, #4
    be7a:	4b02      	ldr	r3, [pc, #8]	; (be84 <relay1_enable+0x14>)
    be7c:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB02, true);
}
    be7e:	bd10      	pop	{r4, pc}
    be80:	0000bb39 	.word	0x0000bb39
    be84:	41004480 	.word	0x41004480

0000be88 <relay1_disable>:

void relay1_disable(void)
{
    be88:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB02);
    be8a:	2022      	movs	r0, #34	; 0x22
    be8c:	4b02      	ldr	r3, [pc, #8]	; (be98 <relay1_disable+0x10>)
    be8e:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    be90:	2204      	movs	r2, #4
    be92:	4b02      	ldr	r3, [pc, #8]	; (be9c <relay1_disable+0x14>)
    be94:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PB02, false);
}
    be96:	bd10      	pop	{r4, pc}
    be98:	0000bb39 	.word	0x0000bb39
    be9c:	41004480 	.word	0x41004480

0000bea0 <relay2_enable>:

void relay2_enable(void)
{
    bea0:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB03);
    bea2:	2023      	movs	r0, #35	; 0x23
    bea4:	4b02      	ldr	r3, [pc, #8]	; (beb0 <relay2_enable+0x10>)
    bea6:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    bea8:	2208      	movs	r2, #8
    beaa:	4b02      	ldr	r3, [pc, #8]	; (beb4 <relay2_enable+0x14>)
    beac:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB03, true);
}
    beae:	bd10      	pop	{r4, pc}
    beb0:	0000bb39 	.word	0x0000bb39
    beb4:	41004480 	.word	0x41004480

0000beb8 <relay2_disable>:

void relay2_disable(void)
{
    beb8:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB03);
    beba:	2023      	movs	r0, #35	; 0x23
    bebc:	4b02      	ldr	r3, [pc, #8]	; (bec8 <relay2_disable+0x10>)
    bebe:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    bec0:	2208      	movs	r2, #8
    bec2:	4b02      	ldr	r3, [pc, #8]	; (becc <relay2_disable+0x14>)
    bec4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PB03, false);
}
    bec6:	bd10      	pop	{r4, pc}
    bec8:	0000bb39 	.word	0x0000bb39
    becc:	41004480 	.word	0x41004480

0000bed0 <gpio5_enable>:

void gpio5_enable(void)
{
    bed0:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB23);
    bed2:	2037      	movs	r0, #55	; 0x37
    bed4:	4b03      	ldr	r3, [pc, #12]	; (bee4 <gpio5_enable+0x14>)
    bed6:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    bed8:	2280      	movs	r2, #128	; 0x80
    beda:	0412      	lsls	r2, r2, #16
    bedc:	4b02      	ldr	r3, [pc, #8]	; (bee8 <gpio5_enable+0x18>)
    bede:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB23, true);
}
    bee0:	bd10      	pop	{r4, pc}
    bee2:	46c0      	nop			; (mov r8, r8)
    bee4:	0000bb39 	.word	0x0000bb39
    bee8:	41004480 	.word	0x41004480

0000beec <gpio5_disable>:

void gpio5_disable(void)
{
    beec:	b510      	push	{r4, lr}
	configure_port_pins_set(PIN_PB23);
    beee:	2037      	movs	r0, #55	; 0x37
    bef0:	4b03      	ldr	r3, [pc, #12]	; (bf00 <gpio5_disable+0x14>)
    bef2:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    bef4:	2280      	movs	r2, #128	; 0x80
    bef6:	0412      	lsls	r2, r2, #16
    bef8:	4b02      	ldr	r3, [pc, #8]	; (bf04 <gpio5_disable+0x18>)
    befa:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PB23, false);
}
    befc:	bd10      	pop	{r4, pc}
    befe:	46c0      	nop			; (mov r8, r8)
    bf00:	0000bb39 	.word	0x0000bb39
    bf04:	41004480 	.word	0x41004480

0000bf08 <run_pump>:

	tcc_init(&tcc_instance_pwm, CONF_PWM_MODULE, &config_tcc);
	tcc_enable(&tcc_instance_pwm);
}

void run_pump(int duration) {
    bf08:	b510      	push	{r4, lr}
    bf0a:	0004      	movs	r4, r0
	
	//boost_enable();
	gpio5_enable();
    bf0c:	4b06      	ldr	r3, [pc, #24]	; (bf28 <run_pump+0x20>)
    bf0e:	4798      	blx	r3
// 		{
// 			ramp_tcc_pwm(0xFFFF*i);
// 			delay_ms(2000);
// 		}
		
	delay_ms(duration); //duration of pump
    bf10:	2c00      	cmp	r4, #0
    bf12:	d105      	bne.n	bf20 <run_pump+0x18>
    bf14:	2001      	movs	r0, #1
    bf16:	4b05      	ldr	r3, [pc, #20]	; (bf2c <run_pump+0x24>)
    bf18:	4798      	blx	r3
	
	//tcc_disable(&tcc_instance_pwm);
	gpio5_disable();
    bf1a:	4b05      	ldr	r3, [pc, #20]	; (bf30 <run_pump+0x28>)
    bf1c:	4798      	blx	r3
	//boost_disable();
	
    bf1e:	bd10      	pop	{r4, pc}
	delay_ms(duration); //duration of pump
    bf20:	0020      	movs	r0, r4
    bf22:	4b04      	ldr	r3, [pc, #16]	; (bf34 <run_pump+0x2c>)
    bf24:	4798      	blx	r3
    bf26:	e7f8      	b.n	bf1a <run_pump+0x12>
    bf28:	0000bed1 	.word	0x0000bed1
    bf2c:	0000d8ad 	.word	0x0000d8ad
    bf30:	0000beed 	.word	0x0000beed
    bf34:	0000d8d9 	.word	0x0000d8d9

0000bf38 <input_handle>:
{
    bf38:	b570      	push	{r4, r5, r6, lr}
    bf3a:	0005      	movs	r5, r0
    bf3c:	000e      	movs	r6, r1
	if (!(strcmp("help", argv[0]))) {
    bf3e:	680c      	ldr	r4, [r1, #0]
    bf40:	0021      	movs	r1, r4
    bf42:	48bc      	ldr	r0, [pc, #752]	; (c234 <input_handle+0x2fc>)
    bf44:	4bbc      	ldr	r3, [pc, #752]	; (c238 <input_handle+0x300>)
    bf46:	4798      	blx	r3
    bf48:	2800      	cmp	r0, #0
    bf4a:	d10a      	bne.n	bf62 <input_handle+0x2a>
		if (argc != required_args) {
    bf4c:	2d01      	cmp	r5, #1
    bf4e:	d005      	beq.n	bf5c <input_handle+0x24>
			print_args_error("help", required_args, argc);
    bf50:	002a      	movs	r2, r5
    bf52:	2101      	movs	r1, #1
    bf54:	48b7      	ldr	r0, [pc, #732]	; (c234 <input_handle+0x2fc>)
    bf56:	4bb9      	ldr	r3, [pc, #740]	; (c23c <input_handle+0x304>)
    bf58:	4798      	blx	r3
}
    bf5a:	bd70      	pop	{r4, r5, r6, pc}
		help();
    bf5c:	4bb8      	ldr	r3, [pc, #736]	; (c240 <input_handle+0x308>)
    bf5e:	4798      	blx	r3
    bf60:	e7fb      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("ver_bl", argv[0]))) {
    bf62:	0021      	movs	r1, r4
    bf64:	48b7      	ldr	r0, [pc, #732]	; (c244 <input_handle+0x30c>)
    bf66:	4bb4      	ldr	r3, [pc, #720]	; (c238 <input_handle+0x300>)
    bf68:	4798      	blx	r3
    bf6a:	2800      	cmp	r0, #0
    bf6c:	d10a      	bne.n	bf84 <input_handle+0x4c>
		if (argc != required_args) {
    bf6e:	2d01      	cmp	r5, #1
    bf70:	d005      	beq.n	bf7e <input_handle+0x46>
			print_args_error("ver_bl", required_args, argc);
    bf72:	002a      	movs	r2, r5
    bf74:	2101      	movs	r1, #1
    bf76:	48b3      	ldr	r0, [pc, #716]	; (c244 <input_handle+0x30c>)
    bf78:	4bb0      	ldr	r3, [pc, #704]	; (c23c <input_handle+0x304>)
    bf7a:	4798      	blx	r3
			return;
    bf7c:	e7ed      	b.n	bf5a <input_handle+0x22>
		ver_bl();
    bf7e:	4bb2      	ldr	r3, [pc, #712]	; (c248 <input_handle+0x310>)
    bf80:	4798      	blx	r3
    bf82:	e7ea      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("ver_app", argv[0]))) {
    bf84:	0021      	movs	r1, r4
    bf86:	48b1      	ldr	r0, [pc, #708]	; (c24c <input_handle+0x314>)
    bf88:	4bab      	ldr	r3, [pc, #684]	; (c238 <input_handle+0x300>)
    bf8a:	4798      	blx	r3
    bf8c:	2800      	cmp	r0, #0
    bf8e:	d10a      	bne.n	bfa6 <input_handle+0x6e>
		if (argc != required_args) {
    bf90:	2d01      	cmp	r5, #1
    bf92:	d005      	beq.n	bfa0 <input_handle+0x68>
			print_args_error("ver_app", required_args, argc);
    bf94:	002a      	movs	r2, r5
    bf96:	2101      	movs	r1, #1
    bf98:	48ac      	ldr	r0, [pc, #688]	; (c24c <input_handle+0x314>)
    bf9a:	4ba8      	ldr	r3, [pc, #672]	; (c23c <input_handle+0x304>)
    bf9c:	4798      	blx	r3
			return;
    bf9e:	e7dc      	b.n	bf5a <input_handle+0x22>
		ver_app();
    bfa0:	4bab      	ldr	r3, [pc, #684]	; (c250 <input_handle+0x318>)
    bfa2:	4798      	blx	r3
    bfa4:	e7d9      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("gpio_set", argv[0]))) {
    bfa6:	0021      	movs	r1, r4
    bfa8:	48aa      	ldr	r0, [pc, #680]	; (c254 <input_handle+0x31c>)
    bfaa:	4ba3      	ldr	r3, [pc, #652]	; (c238 <input_handle+0x300>)
    bfac:	4798      	blx	r3
    bfae:	2800      	cmp	r0, #0
    bfb0:	d11e      	bne.n	bff0 <input_handle+0xb8>
		if (argc != required_args) {
    bfb2:	2d03      	cmp	r5, #3
    bfb4:	d005      	beq.n	bfc2 <input_handle+0x8a>
			print_args_error("gpio_set", required_args, argc);
    bfb6:	002a      	movs	r2, r5
    bfb8:	2103      	movs	r1, #3
    bfba:	48a6      	ldr	r0, [pc, #664]	; (c254 <input_handle+0x31c>)
    bfbc:	4b9f      	ldr	r3, [pc, #636]	; (c23c <input_handle+0x304>)
    bfbe:	4798      	blx	r3
			return;
    bfc0:	e7cb      	b.n	bf5a <input_handle+0x22>
		char port = argv[1][0];
    bfc2:	6873      	ldr	r3, [r6, #4]
    bfc4:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    bfc6:	68b0      	ldr	r0, [r6, #8]
    bfc8:	4ba3      	ldr	r3, [pc, #652]	; (c258 <input_handle+0x320>)
    bfca:	4798      	blx	r3
    bfcc:	0004      	movs	r4, r0
		if (isdigit(argv[2][0]))
    bfce:	4ba3      	ldr	r3, [pc, #652]	; (c25c <input_handle+0x324>)
    bfd0:	4798      	blx	r3
    bfd2:	68b3      	ldr	r3, [r6, #8]
    bfd4:	781b      	ldrb	r3, [r3, #0]
    bfd6:	18c0      	adds	r0, r0, r3
    bfd8:	7843      	ldrb	r3, [r0, #1]
    bfda:	075b      	lsls	r3, r3, #29
    bfdc:	d504      	bpl.n	bfe8 <input_handle+0xb0>
			gpio_set(port, pin);
    bfde:	0021      	movs	r1, r4
    bfe0:	0028      	movs	r0, r5
    bfe2:	4b9f      	ldr	r3, [pc, #636]	; (c260 <input_handle+0x328>)
    bfe4:	4798      	blx	r3
    bfe6:	e7b8      	b.n	bf5a <input_handle+0x22>
			print_general_error("gpio_set");
    bfe8:	489a      	ldr	r0, [pc, #616]	; (c254 <input_handle+0x31c>)
    bfea:	4b9e      	ldr	r3, [pc, #632]	; (c264 <input_handle+0x32c>)
    bfec:	4798      	blx	r3
    bfee:	e7b4      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("gpio_clear", argv[0]))) {
    bff0:	0021      	movs	r1, r4
    bff2:	489d      	ldr	r0, [pc, #628]	; (c268 <input_handle+0x330>)
    bff4:	4b90      	ldr	r3, [pc, #576]	; (c238 <input_handle+0x300>)
    bff6:	4798      	blx	r3
    bff8:	2800      	cmp	r0, #0
    bffa:	d11e      	bne.n	c03a <input_handle+0x102>
		if (argc != required_args) {
    bffc:	2d03      	cmp	r5, #3
    bffe:	d005      	beq.n	c00c <input_handle+0xd4>
			print_args_error("gpio_clear", required_args, argc);
    c000:	002a      	movs	r2, r5
    c002:	2103      	movs	r1, #3
    c004:	4898      	ldr	r0, [pc, #608]	; (c268 <input_handle+0x330>)
    c006:	4b8d      	ldr	r3, [pc, #564]	; (c23c <input_handle+0x304>)
    c008:	4798      	blx	r3
			return;
    c00a:	e7a6      	b.n	bf5a <input_handle+0x22>
		char port = argv[1][0];
    c00c:	6873      	ldr	r3, [r6, #4]
    c00e:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    c010:	68b0      	ldr	r0, [r6, #8]
    c012:	4b91      	ldr	r3, [pc, #580]	; (c258 <input_handle+0x320>)
    c014:	4798      	blx	r3
    c016:	0004      	movs	r4, r0
		if (isdigit(argv[2][0]))
    c018:	4b90      	ldr	r3, [pc, #576]	; (c25c <input_handle+0x324>)
    c01a:	4798      	blx	r3
    c01c:	68b3      	ldr	r3, [r6, #8]
    c01e:	781b      	ldrb	r3, [r3, #0]
    c020:	18c0      	adds	r0, r0, r3
    c022:	7843      	ldrb	r3, [r0, #1]
    c024:	075b      	lsls	r3, r3, #29
    c026:	d504      	bpl.n	c032 <input_handle+0xfa>
			gpio_clear(port, pin);
    c028:	0021      	movs	r1, r4
    c02a:	0028      	movs	r0, r5
    c02c:	4b8f      	ldr	r3, [pc, #572]	; (c26c <input_handle+0x334>)
    c02e:	4798      	blx	r3
    c030:	e793      	b.n	bf5a <input_handle+0x22>
			print_general_error("gpio_clear");
    c032:	488d      	ldr	r0, [pc, #564]	; (c268 <input_handle+0x330>)
    c034:	4b8b      	ldr	r3, [pc, #556]	; (c264 <input_handle+0x32c>)
    c036:	4798      	blx	r3
    c038:	e78f      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("gpio_get", argv[0]))) {
    c03a:	0021      	movs	r1, r4
    c03c:	488c      	ldr	r0, [pc, #560]	; (c270 <input_handle+0x338>)
    c03e:	4b7e      	ldr	r3, [pc, #504]	; (c238 <input_handle+0x300>)
    c040:	4798      	blx	r3
    c042:	2800      	cmp	r0, #0
    c044:	d11e      	bne.n	c084 <input_handle+0x14c>
		if (argc != required_args) {
    c046:	2d03      	cmp	r5, #3
    c048:	d005      	beq.n	c056 <input_handle+0x11e>
			print_args_error("gpio_get", required_args, argc);
    c04a:	002a      	movs	r2, r5
    c04c:	2103      	movs	r1, #3
    c04e:	4888      	ldr	r0, [pc, #544]	; (c270 <input_handle+0x338>)
    c050:	4b7a      	ldr	r3, [pc, #488]	; (c23c <input_handle+0x304>)
    c052:	4798      	blx	r3
			return;
    c054:	e781      	b.n	bf5a <input_handle+0x22>
		char port = argv[1][0];
    c056:	6873      	ldr	r3, [r6, #4]
    c058:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    c05a:	68b0      	ldr	r0, [r6, #8]
    c05c:	4b7e      	ldr	r3, [pc, #504]	; (c258 <input_handle+0x320>)
    c05e:	4798      	blx	r3
    c060:	0004      	movs	r4, r0
		if (isdigit(argv[2][0]))
    c062:	4b7e      	ldr	r3, [pc, #504]	; (c25c <input_handle+0x324>)
    c064:	4798      	blx	r3
    c066:	68b3      	ldr	r3, [r6, #8]
    c068:	781b      	ldrb	r3, [r3, #0]
    c06a:	18c0      	adds	r0, r0, r3
    c06c:	7843      	ldrb	r3, [r0, #1]
    c06e:	075b      	lsls	r3, r3, #29
    c070:	d504      	bpl.n	c07c <input_handle+0x144>
			gpio_get(port, pin);
    c072:	0021      	movs	r1, r4
    c074:	0028      	movs	r0, r5
    c076:	4b7f      	ldr	r3, [pc, #508]	; (c274 <input_handle+0x33c>)
    c078:	4798      	blx	r3
    c07a:	e76e      	b.n	bf5a <input_handle+0x22>
			print_general_error("gpio_get");
    c07c:	487c      	ldr	r0, [pc, #496]	; (c270 <input_handle+0x338>)
    c07e:	4b79      	ldr	r3, [pc, #484]	; (c264 <input_handle+0x32c>)
    c080:	4798      	blx	r3
    c082:	e76a      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("mac", argv[0]))) {
    c084:	0021      	movs	r1, r4
    c086:	487c      	ldr	r0, [pc, #496]	; (c278 <input_handle+0x340>)
    c088:	4b6b      	ldr	r3, [pc, #428]	; (c238 <input_handle+0x300>)
    c08a:	4798      	blx	r3
    c08c:	2800      	cmp	r0, #0
    c08e:	d10a      	bne.n	c0a6 <input_handle+0x16e>
		if (argc != required_args) {
    c090:	2d01      	cmp	r5, #1
    c092:	d005      	beq.n	c0a0 <input_handle+0x168>
			print_args_error("mac", required_args, argc);
    c094:	002a      	movs	r2, r5
    c096:	2101      	movs	r1, #1
    c098:	4877      	ldr	r0, [pc, #476]	; (c278 <input_handle+0x340>)
    c09a:	4b68      	ldr	r3, [pc, #416]	; (c23c <input_handle+0x304>)
    c09c:	4798      	blx	r3
			return;
    c09e:	e75c      	b.n	bf5a <input_handle+0x22>
		mac();
    c0a0:	4b76      	ldr	r3, [pc, #472]	; (c27c <input_handle+0x344>)
    c0a2:	4798      	blx	r3
    c0a4:	e759      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("ip", argv[0]))) {
    c0a6:	0021      	movs	r1, r4
    c0a8:	4875      	ldr	r0, [pc, #468]	; (c280 <input_handle+0x348>)
    c0aa:	4b63      	ldr	r3, [pc, #396]	; (c238 <input_handle+0x300>)
    c0ac:	4798      	blx	r3
    c0ae:	2800      	cmp	r0, #0
    c0b0:	d10a      	bne.n	c0c8 <input_handle+0x190>
		if (argc != required_args) {
    c0b2:	2d01      	cmp	r5, #1
    c0b4:	d005      	beq.n	c0c2 <input_handle+0x18a>
			print_args_error("ip", required_args, argc);
    c0b6:	002a      	movs	r2, r5
    c0b8:	2101      	movs	r1, #1
    c0ba:	4871      	ldr	r0, [pc, #452]	; (c280 <input_handle+0x348>)
    c0bc:	4b5f      	ldr	r3, [pc, #380]	; (c23c <input_handle+0x304>)
    c0be:	4798      	blx	r3
			return;
    c0c0:	e74b      	b.n	bf5a <input_handle+0x22>
		ip();
    c0c2:	4b70      	ldr	r3, [pc, #448]	; (c284 <input_handle+0x34c>)
    c0c4:	4798      	blx	r3
    c0c6:	e748      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("read", argv[0]))) {
    c0c8:	0021      	movs	r1, r4
    c0ca:	486f      	ldr	r0, [pc, #444]	; (c288 <input_handle+0x350>)
    c0cc:	4b5a      	ldr	r3, [pc, #360]	; (c238 <input_handle+0x300>)
    c0ce:	4798      	blx	r3
    c0d0:	2800      	cmp	r0, #0
    c0d2:	d128      	bne.n	c126 <input_handle+0x1ee>
		if (argc != required_args) {
    c0d4:	2d04      	cmp	r5, #4
    c0d6:	d005      	beq.n	c0e4 <input_handle+0x1ac>
			print_args_error("read", required_args, argc);
    c0d8:	002a      	movs	r2, r5
    c0da:	2104      	movs	r1, #4
    c0dc:	486a      	ldr	r0, [pc, #424]	; (c288 <input_handle+0x350>)
    c0de:	4b57      	ldr	r3, [pc, #348]	; (c23c <input_handle+0x304>)
    c0e0:	4798      	blx	r3
			return;
    c0e2:	e73a      	b.n	bf5a <input_handle+0x22>
		int reading = atoi(argv[2]);
    c0e4:	68b0      	ldr	r0, [r6, #8]
    c0e6:	4d5c      	ldr	r5, [pc, #368]	; (c258 <input_handle+0x320>)
    c0e8:	47a8      	blx	r5
    c0ea:	0004      	movs	r4, r0
		int interval_ms = atoi(argv[3]);
    c0ec:	68f0      	ldr	r0, [r6, #12]
    c0ee:	47a8      	blx	r5
    c0f0:	0005      	movs	r5, r0
		if (isdigit(argv[2][0]) && isdigit(argv[3][0]))
    c0f2:	4b5a      	ldr	r3, [pc, #360]	; (c25c <input_handle+0x324>)
    c0f4:	4798      	blx	r3
    c0f6:	68b3      	ldr	r3, [r6, #8]
    c0f8:	781b      	ldrb	r3, [r3, #0]
    c0fa:	18c0      	adds	r0, r0, r3
    c0fc:	7843      	ldrb	r3, [r0, #1]
    c0fe:	075b      	lsls	r3, r3, #29
    c100:	d507      	bpl.n	c112 <input_handle+0x1da>
    c102:	4b56      	ldr	r3, [pc, #344]	; (c25c <input_handle+0x324>)
    c104:	4798      	blx	r3
    c106:	68f3      	ldr	r3, [r6, #12]
    c108:	781b      	ldrb	r3, [r3, #0]
    c10a:	18c0      	adds	r0, r0, r3
    c10c:	7843      	ldrb	r3, [r0, #1]
    c10e:	075b      	lsls	r3, r3, #29
    c110:	d403      	bmi.n	c11a <input_handle+0x1e2>
			print_general_error("read");
    c112:	485d      	ldr	r0, [pc, #372]	; (c288 <input_handle+0x350>)
    c114:	4b53      	ldr	r3, [pc, #332]	; (c264 <input_handle+0x32c>)
    c116:	4798      	blx	r3
    c118:	e71f      	b.n	bf5a <input_handle+0x22>
			read_sensor(argv[1], reading, interval_ms);
    c11a:	002a      	movs	r2, r5
    c11c:	0021      	movs	r1, r4
    c11e:	6870      	ldr	r0, [r6, #4]
    c120:	4b5a      	ldr	r3, [pc, #360]	; (c28c <input_handle+0x354>)
    c122:	4798      	blx	r3
    c124:	e719      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("adc_get", argv[0]))) {
    c126:	0021      	movs	r1, r4
    c128:	4859      	ldr	r0, [pc, #356]	; (c290 <input_handle+0x358>)
    c12a:	4b43      	ldr	r3, [pc, #268]	; (c238 <input_handle+0x300>)
    c12c:	4798      	blx	r3
    c12e:	2800      	cmp	r0, #0
    c130:	d11e      	bne.n	c170 <input_handle+0x238>
		if (argc != required_args) {
    c132:	2d03      	cmp	r5, #3
    c134:	d005      	beq.n	c142 <input_handle+0x20a>
			print_args_error("adc_get", required_args, argc);
    c136:	002a      	movs	r2, r5
    c138:	2103      	movs	r1, #3
    c13a:	4855      	ldr	r0, [pc, #340]	; (c290 <input_handle+0x358>)
    c13c:	4b3f      	ldr	r3, [pc, #252]	; (c23c <input_handle+0x304>)
    c13e:	4798      	blx	r3
			return;
    c140:	e70b      	b.n	bf5a <input_handle+0x22>
		char port = argv[1][0];
    c142:	6873      	ldr	r3, [r6, #4]
    c144:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    c146:	68b0      	ldr	r0, [r6, #8]
    c148:	4b43      	ldr	r3, [pc, #268]	; (c258 <input_handle+0x320>)
    c14a:	4798      	blx	r3
    c14c:	0004      	movs	r4, r0
		if (isdigit(argv[2][0])) {
    c14e:	4b43      	ldr	r3, [pc, #268]	; (c25c <input_handle+0x324>)
    c150:	4798      	blx	r3
    c152:	68b3      	ldr	r3, [r6, #8]
    c154:	781b      	ldrb	r3, [r3, #0]
    c156:	18c0      	adds	r0, r0, r3
    c158:	7843      	ldrb	r3, [r0, #1]
    c15a:	075b      	lsls	r3, r3, #29
    c15c:	d504      	bpl.n	c168 <input_handle+0x230>
			adc_get(port, pin);
    c15e:	0021      	movs	r1, r4
    c160:	0028      	movs	r0, r5
    c162:	4b4c      	ldr	r3, [pc, #304]	; (c294 <input_handle+0x35c>)
    c164:	4798      	blx	r3
    c166:	e6f8      	b.n	bf5a <input_handle+0x22>
			print_general_error("adc_get");
    c168:	4849      	ldr	r0, [pc, #292]	; (c290 <input_handle+0x358>)
    c16a:	4b3e      	ldr	r3, [pc, #248]	; (c264 <input_handle+0x32c>)
    c16c:	4798      	blx	r3
    c16e:	e6f4      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("mcu_temp", argv[0]))) {
    c170:	0021      	movs	r1, r4
    c172:	4849      	ldr	r0, [pc, #292]	; (c298 <input_handle+0x360>)
    c174:	4b30      	ldr	r3, [pc, #192]	; (c238 <input_handle+0x300>)
    c176:	4798      	blx	r3
    c178:	2800      	cmp	r0, #0
    c17a:	d10a      	bne.n	c192 <input_handle+0x25a>
		if (argc != required_args) {
    c17c:	2d01      	cmp	r5, #1
    c17e:	d005      	beq.n	c18c <input_handle+0x254>
			print_args_error("mcu_temp", required_args, argc);
    c180:	002a      	movs	r2, r5
    c182:	2101      	movs	r1, #1
    c184:	4844      	ldr	r0, [pc, #272]	; (c298 <input_handle+0x360>)
    c186:	4b2d      	ldr	r3, [pc, #180]	; (c23c <input_handle+0x304>)
    c188:	4798      	blx	r3
			return;
    c18a:	e6e6      	b.n	bf5a <input_handle+0x22>
		mcu_temp();
    c18c:	4b43      	ldr	r3, [pc, #268]	; (c29c <input_handle+0x364>)
    c18e:	4798      	blx	r3
    c190:	e6e3      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("i2c_scan", argv[0]))) {
    c192:	0021      	movs	r1, r4
    c194:	4842      	ldr	r0, [pc, #264]	; (c2a0 <input_handle+0x368>)
    c196:	4b28      	ldr	r3, [pc, #160]	; (c238 <input_handle+0x300>)
    c198:	4798      	blx	r3
    c19a:	2800      	cmp	r0, #0
    c19c:	d10d      	bne.n	c1ba <input_handle+0x282>
		if (argc != required_args) {
    c19e:	2d01      	cmp	r5, #1
    c1a0:	d005      	beq.n	c1ae <input_handle+0x276>
			print_args_error("i2c_scan", required_args, argc);
    c1a2:	002a      	movs	r2, r5
    c1a4:	2101      	movs	r1, #1
    c1a6:	483e      	ldr	r0, [pc, #248]	; (c2a0 <input_handle+0x368>)
    c1a8:	4b24      	ldr	r3, [pc, #144]	; (c23c <input_handle+0x304>)
    c1aa:	4798      	blx	r3
			return;
    c1ac:	e6d5      	b.n	bf5a <input_handle+0x22>
		printf("running i2c_scan\r\n");
    c1ae:	483d      	ldr	r0, [pc, #244]	; (c2a4 <input_handle+0x36c>)
    c1b0:	4b3d      	ldr	r3, [pc, #244]	; (c2a8 <input_handle+0x370>)
    c1b2:	4798      	blx	r3
		i2c_scan();
    c1b4:	4b3d      	ldr	r3, [pc, #244]	; (c2ac <input_handle+0x374>)
    c1b6:	4798      	blx	r3
    c1b8:	e6cf      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("relay1_on", argv[0]))) {
    c1ba:	0021      	movs	r1, r4
    c1bc:	483c      	ldr	r0, [pc, #240]	; (c2b0 <input_handle+0x378>)
    c1be:	4b1e      	ldr	r3, [pc, #120]	; (c238 <input_handle+0x300>)
    c1c0:	4798      	blx	r3
    c1c2:	2800      	cmp	r0, #0
    c1c4:	d10d      	bne.n	c1e2 <input_handle+0x2aa>
		if (argc != required_args) {
    c1c6:	2d01      	cmp	r5, #1
    c1c8:	d005      	beq.n	c1d6 <input_handle+0x29e>
			print_args_error("relay1_on", required_args, argc);
    c1ca:	002a      	movs	r2, r5
    c1cc:	2101      	movs	r1, #1
    c1ce:	4838      	ldr	r0, [pc, #224]	; (c2b0 <input_handle+0x378>)
    c1d0:	4b1a      	ldr	r3, [pc, #104]	; (c23c <input_handle+0x304>)
    c1d2:	4798      	blx	r3
			return;
    c1d4:	e6c1      	b.n	bf5a <input_handle+0x22>
	printf("Relay 1 turning on.\r\n");
    c1d6:	4837      	ldr	r0, [pc, #220]	; (c2b4 <input_handle+0x37c>)
    c1d8:	4b33      	ldr	r3, [pc, #204]	; (c2a8 <input_handle+0x370>)
    c1da:	4798      	blx	r3
	relay1_enable();
    c1dc:	4b36      	ldr	r3, [pc, #216]	; (c2b8 <input_handle+0x380>)
    c1de:	4798      	blx	r3
    c1e0:	e6bb      	b.n	bf5a <input_handle+0x22>
	}  else if (!(strcmp("relay1_off", argv[0]))) {
    c1e2:	0021      	movs	r1, r4
    c1e4:	4835      	ldr	r0, [pc, #212]	; (c2bc <input_handle+0x384>)
    c1e6:	4b14      	ldr	r3, [pc, #80]	; (c238 <input_handle+0x300>)
    c1e8:	4798      	blx	r3
    c1ea:	2800      	cmp	r0, #0
    c1ec:	d10d      	bne.n	c20a <input_handle+0x2d2>
		if (argc != required_args) {
    c1ee:	2d01      	cmp	r5, #1
    c1f0:	d005      	beq.n	c1fe <input_handle+0x2c6>
			print_args_error("relay1_off", required_args, argc);
    c1f2:	002a      	movs	r2, r5
    c1f4:	2101      	movs	r1, #1
    c1f6:	4831      	ldr	r0, [pc, #196]	; (c2bc <input_handle+0x384>)
    c1f8:	4b10      	ldr	r3, [pc, #64]	; (c23c <input_handle+0x304>)
    c1fa:	4798      	blx	r3
			return;
    c1fc:	e6ad      	b.n	bf5a <input_handle+0x22>
	printf("Relay 1 turning off.\r\n");
    c1fe:	4830      	ldr	r0, [pc, #192]	; (c2c0 <input_handle+0x388>)
    c200:	4b29      	ldr	r3, [pc, #164]	; (c2a8 <input_handle+0x370>)
    c202:	4798      	blx	r3
	relay1_disable();
    c204:	4b2f      	ldr	r3, [pc, #188]	; (c2c4 <input_handle+0x38c>)
    c206:	4798      	blx	r3
    c208:	e6a7      	b.n	bf5a <input_handle+0x22>
	}  else if (!(strcmp("relay2_on", argv[0]))) {
    c20a:	0021      	movs	r1, r4
    c20c:	482e      	ldr	r0, [pc, #184]	; (c2c8 <input_handle+0x390>)
    c20e:	4b0a      	ldr	r3, [pc, #40]	; (c238 <input_handle+0x300>)
    c210:	4798      	blx	r3
    c212:	2800      	cmp	r0, #0
    c214:	d15e      	bne.n	c2d4 <input_handle+0x39c>
	if (argc != required_args) {
    c216:	2d01      	cmp	r5, #1
    c218:	d005      	beq.n	c226 <input_handle+0x2ee>
		print_args_error("relay2_on", required_args, argc);
    c21a:	002a      	movs	r2, r5
    c21c:	2101      	movs	r1, #1
    c21e:	482a      	ldr	r0, [pc, #168]	; (c2c8 <input_handle+0x390>)
    c220:	4b06      	ldr	r3, [pc, #24]	; (c23c <input_handle+0x304>)
    c222:	4798      	blx	r3
		return;
    c224:	e699      	b.n	bf5a <input_handle+0x22>
	printf("Relay 2 turning on.\r\n");
    c226:	4829      	ldr	r0, [pc, #164]	; (c2cc <input_handle+0x394>)
    c228:	4b1f      	ldr	r3, [pc, #124]	; (c2a8 <input_handle+0x370>)
    c22a:	4798      	blx	r3
	relay2_enable();
    c22c:	4b28      	ldr	r3, [pc, #160]	; (c2d0 <input_handle+0x398>)
    c22e:	4798      	blx	r3
    c230:	e693      	b.n	bf5a <input_handle+0x22>
    c232:	46c0      	nop			; (mov r8, r8)
    c234:	00016048 	.word	0x00016048
    c238:	0000f60d 	.word	0x0000f60d
    c23c:	0000b87d 	.word	0x0000b87d
    c240:	0000b6d1 	.word	0x0000b6d1
    c244:	00016050 	.word	0x00016050
    c248:	0000b6e5 	.word	0x0000b6e5
    c24c:	00016058 	.word	0x00016058
    c250:	0000b6fd 	.word	0x0000b6fd
    c254:	00016060 	.word	0x00016060
    c258:	0000e7cd 	.word	0x0000e7cd
    c25c:	0000e829 	.word	0x0000e829
    c260:	0000bb59 	.word	0x0000bb59
    c264:	0000b869 	.word	0x0000b869
    c268:	0001606c 	.word	0x0001606c
    c26c:	0000bba5 	.word	0x0000bba5
    c270:	00016078 	.word	0x00016078
    c274:	0000bd85 	.word	0x0000bd85
    c278:	00016084 	.word	0x00016084
    c27c:	0000b715 	.word	0x0000b715
    c280:	00016088 	.word	0x00016088
    c284:	0000b729 	.word	0x0000b729
    c288:	0001608c 	.word	0x0001608c
    c28c:	0000bcb5 	.word	0x0000bcb5
    c290:	00016094 	.word	0x00016094
    c294:	0000b8f5 	.word	0x0000b8f5
    c298:	0001609c 	.word	0x0001609c
    c29c:	0000ba39 	.word	0x0000ba39
    c2a0:	000160a8 	.word	0x000160a8
    c2a4:	000160b4 	.word	0x000160b4
    c2a8:	0000f425 	.word	0x0000f425
    c2ac:	0000b791 	.word	0x0000b791
    c2b0:	000160c8 	.word	0x000160c8
    c2b4:	000160d4 	.word	0x000160d4
    c2b8:	0000be71 	.word	0x0000be71
    c2bc:	000160ec 	.word	0x000160ec
    c2c0:	000160f8 	.word	0x000160f8
    c2c4:	0000be89 	.word	0x0000be89
    c2c8:	00016110 	.word	0x00016110
    c2cc:	0001611c 	.word	0x0001611c
    c2d0:	0000bea1 	.word	0x0000bea1
	}  else if (!(strcmp("relay2_off", argv[0]))) {
    c2d4:	0021      	movs	r1, r4
    c2d6:	486a      	ldr	r0, [pc, #424]	; (c480 <input_handle+0x548>)
    c2d8:	4b6a      	ldr	r3, [pc, #424]	; (c484 <input_handle+0x54c>)
    c2da:	4798      	blx	r3
    c2dc:	2800      	cmp	r0, #0
    c2de:	d10d      	bne.n	c2fc <input_handle+0x3c4>
	if (argc != required_args) {
    c2e0:	2d01      	cmp	r5, #1
    c2e2:	d005      	beq.n	c2f0 <input_handle+0x3b8>
		print_args_error("relay2_off", required_args, argc);
    c2e4:	002a      	movs	r2, r5
    c2e6:	2101      	movs	r1, #1
    c2e8:	4865      	ldr	r0, [pc, #404]	; (c480 <input_handle+0x548>)
    c2ea:	4b67      	ldr	r3, [pc, #412]	; (c488 <input_handle+0x550>)
    c2ec:	4798      	blx	r3
		return;
    c2ee:	e634      	b.n	bf5a <input_handle+0x22>
	printf("Relay 2 turning off.\r\n");
    c2f0:	4866      	ldr	r0, [pc, #408]	; (c48c <input_handle+0x554>)
    c2f2:	4b67      	ldr	r3, [pc, #412]	; (c490 <input_handle+0x558>)
    c2f4:	4798      	blx	r3
	relay2_disable();
    c2f6:	4b67      	ldr	r3, [pc, #412]	; (c494 <input_handle+0x55c>)
    c2f8:	4798      	blx	r3
    c2fa:	e62e      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("boost_on", argv[0]))) {
    c2fc:	0021      	movs	r1, r4
    c2fe:	4866      	ldr	r0, [pc, #408]	; (c498 <input_handle+0x560>)
    c300:	4b60      	ldr	r3, [pc, #384]	; (c484 <input_handle+0x54c>)
    c302:	4798      	blx	r3
    c304:	2800      	cmp	r0, #0
    c306:	d10d      	bne.n	c324 <input_handle+0x3ec>
	if (argc != required_args) {
    c308:	2d01      	cmp	r5, #1
    c30a:	d005      	beq.n	c318 <input_handle+0x3e0>
		print_args_error("boost_on", required_args, argc);
    c30c:	002a      	movs	r2, r5
    c30e:	2101      	movs	r1, #1
    c310:	4861      	ldr	r0, [pc, #388]	; (c498 <input_handle+0x560>)
    c312:	4b5d      	ldr	r3, [pc, #372]	; (c488 <input_handle+0x550>)
    c314:	4798      	blx	r3
		return;
    c316:	e620      	b.n	bf5a <input_handle+0x22>
	printf("Boost converter enabled.\r\n");
    c318:	4860      	ldr	r0, [pc, #384]	; (c49c <input_handle+0x564>)
    c31a:	4b5d      	ldr	r3, [pc, #372]	; (c490 <input_handle+0x558>)
    c31c:	4798      	blx	r3
	boost_enable();
    c31e:	4b60      	ldr	r3, [pc, #384]	; (c4a0 <input_handle+0x568>)
    c320:	4798      	blx	r3
    c322:	e61a      	b.n	bf5a <input_handle+0x22>
	}  else if (!(strcmp("boost_off", argv[0]))) {
    c324:	0021      	movs	r1, r4
    c326:	485f      	ldr	r0, [pc, #380]	; (c4a4 <input_handle+0x56c>)
    c328:	4b56      	ldr	r3, [pc, #344]	; (c484 <input_handle+0x54c>)
    c32a:	4798      	blx	r3
    c32c:	2800      	cmp	r0, #0
    c32e:	d10d      	bne.n	c34c <input_handle+0x414>
	if (argc != required_args) {
    c330:	2d01      	cmp	r5, #1
    c332:	d005      	beq.n	c340 <input_handle+0x408>
		print_args_error("boost_off", required_args, argc);
    c334:	002a      	movs	r2, r5
    c336:	2101      	movs	r1, #1
    c338:	485a      	ldr	r0, [pc, #360]	; (c4a4 <input_handle+0x56c>)
    c33a:	4b53      	ldr	r3, [pc, #332]	; (c488 <input_handle+0x550>)
    c33c:	4798      	blx	r3
		return;
    c33e:	e60c      	b.n	bf5a <input_handle+0x22>
	printf("Boost converter disabled.\r\n");
    c340:	4859      	ldr	r0, [pc, #356]	; (c4a8 <input_handle+0x570>)
    c342:	4b53      	ldr	r3, [pc, #332]	; (c490 <input_handle+0x558>)
    c344:	4798      	blx	r3
	boost_disable();
    c346:	4b59      	ldr	r3, [pc, #356]	; (c4ac <input_handle+0x574>)
    c348:	4798      	blx	r3
    c34a:	e606      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("led1_on", argv[0]))) {
    c34c:	0021      	movs	r1, r4
    c34e:	4858      	ldr	r0, [pc, #352]	; (c4b0 <input_handle+0x578>)
    c350:	4b4c      	ldr	r3, [pc, #304]	; (c484 <input_handle+0x54c>)
    c352:	4798      	blx	r3
    c354:	2800      	cmp	r0, #0
    c356:	d10d      	bne.n	c374 <input_handle+0x43c>
		if (argc != required_args) {
    c358:	2d01      	cmp	r5, #1
    c35a:	d005      	beq.n	c368 <input_handle+0x430>
			print_args_error("led1_on", required_args, argc);
    c35c:	002a      	movs	r2, r5
    c35e:	2101      	movs	r1, #1
    c360:	4853      	ldr	r0, [pc, #332]	; (c4b0 <input_handle+0x578>)
    c362:	4b49      	ldr	r3, [pc, #292]	; (c488 <input_handle+0x550>)
    c364:	4798      	blx	r3
			return;
    c366:	e5f8      	b.n	bf5a <input_handle+0x22>
	printf("LED1 turning on.\r\n");
    c368:	4852      	ldr	r0, [pc, #328]	; (c4b4 <input_handle+0x57c>)
    c36a:	4b49      	ldr	r3, [pc, #292]	; (c490 <input_handle+0x558>)
    c36c:	4798      	blx	r3
	led1_on();
    c36e:	4b52      	ldr	r3, [pc, #328]	; (c4b8 <input_handle+0x580>)
    c370:	4798      	blx	r3
    c372:	e5f2      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("led1_off", argv[0]))) {
    c374:	0021      	movs	r1, r4
    c376:	4851      	ldr	r0, [pc, #324]	; (c4bc <input_handle+0x584>)
    c378:	4b42      	ldr	r3, [pc, #264]	; (c484 <input_handle+0x54c>)
    c37a:	4798      	blx	r3
    c37c:	2800      	cmp	r0, #0
    c37e:	d10d      	bne.n	c39c <input_handle+0x464>
		if (argc != required_args) {
    c380:	2d01      	cmp	r5, #1
    c382:	d005      	beq.n	c390 <input_handle+0x458>
		print_args_error("led1_off", required_args, argc);
    c384:	002a      	movs	r2, r5
    c386:	2101      	movs	r1, #1
    c388:	484c      	ldr	r0, [pc, #304]	; (c4bc <input_handle+0x584>)
    c38a:	4b3f      	ldr	r3, [pc, #252]	; (c488 <input_handle+0x550>)
    c38c:	4798      	blx	r3
		return;
    c38e:	e5e4      	b.n	bf5a <input_handle+0x22>
	printf("LED1 turning off.\r\n");
    c390:	484b      	ldr	r0, [pc, #300]	; (c4c0 <input_handle+0x588>)
    c392:	4b3f      	ldr	r3, [pc, #252]	; (c490 <input_handle+0x558>)
    c394:	4798      	blx	r3
	led1_off();
    c396:	4b4b      	ldr	r3, [pc, #300]	; (c4c4 <input_handle+0x58c>)
    c398:	4798      	blx	r3
    c39a:	e5de      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("led2_on", argv[0]))) {
    c39c:	0021      	movs	r1, r4
    c39e:	484a      	ldr	r0, [pc, #296]	; (c4c8 <input_handle+0x590>)
    c3a0:	4b38      	ldr	r3, [pc, #224]	; (c484 <input_handle+0x54c>)
    c3a2:	4798      	blx	r3
    c3a4:	2800      	cmp	r0, #0
    c3a6:	d10d      	bne.n	c3c4 <input_handle+0x48c>
		if (argc != required_args) {
    c3a8:	2d01      	cmp	r5, #1
    c3aa:	d005      	beq.n	c3b8 <input_handle+0x480>
			print_args_error("led2_on", required_args, argc);
    c3ac:	002a      	movs	r2, r5
    c3ae:	2101      	movs	r1, #1
    c3b0:	4845      	ldr	r0, [pc, #276]	; (c4c8 <input_handle+0x590>)
    c3b2:	4b35      	ldr	r3, [pc, #212]	; (c488 <input_handle+0x550>)
    c3b4:	4798      	blx	r3
			return;
    c3b6:	e5d0      	b.n	bf5a <input_handle+0x22>
	printf("LED2 turning on.\r\n");
    c3b8:	4844      	ldr	r0, [pc, #272]	; (c4cc <input_handle+0x594>)
    c3ba:	4b35      	ldr	r3, [pc, #212]	; (c490 <input_handle+0x558>)
    c3bc:	4798      	blx	r3
	led2_on();
    c3be:	4b44      	ldr	r3, [pc, #272]	; (c4d0 <input_handle+0x598>)
    c3c0:	4798      	blx	r3
    c3c2:	e5ca      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("led2_off", argv[0]))) {
    c3c4:	0021      	movs	r1, r4
    c3c6:	4843      	ldr	r0, [pc, #268]	; (c4d4 <input_handle+0x59c>)
    c3c8:	4b2e      	ldr	r3, [pc, #184]	; (c484 <input_handle+0x54c>)
    c3ca:	4798      	blx	r3
    c3cc:	2800      	cmp	r0, #0
    c3ce:	d10d      	bne.n	c3ec <input_handle+0x4b4>
		if (argc != required_args) {
    c3d0:	2d01      	cmp	r5, #1
    c3d2:	d005      	beq.n	c3e0 <input_handle+0x4a8>
			print_args_error("led2_off", required_args, argc);
    c3d4:	002a      	movs	r2, r5
    c3d6:	2101      	movs	r1, #1
    c3d8:	483e      	ldr	r0, [pc, #248]	; (c4d4 <input_handle+0x59c>)
    c3da:	4b2b      	ldr	r3, [pc, #172]	; (c488 <input_handle+0x550>)
    c3dc:	4798      	blx	r3
			return;
    c3de:	e5bc      	b.n	bf5a <input_handle+0x22>
	printf("LED2 turning off.\r\n");
    c3e0:	483d      	ldr	r0, [pc, #244]	; (c4d8 <input_handle+0x5a0>)
    c3e2:	4b2b      	ldr	r3, [pc, #172]	; (c490 <input_handle+0x558>)
    c3e4:	4798      	blx	r3
	led2_off();
    c3e6:	4b3d      	ldr	r3, [pc, #244]	; (c4dc <input_handle+0x5a4>)
    c3e8:	4798      	blx	r3
    c3ea:	e5b6      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("check_for_update", argv[0]))) {
    c3ec:	0021      	movs	r1, r4
    c3ee:	483c      	ldr	r0, [pc, #240]	; (c4e0 <input_handle+0x5a8>)
    c3f0:	4b24      	ldr	r3, [pc, #144]	; (c484 <input_handle+0x54c>)
    c3f2:	4798      	blx	r3
    c3f4:	2800      	cmp	r0, #0
    c3f6:	d10b      	bne.n	c410 <input_handle+0x4d8>
	if (argc != required_args) {
    c3f8:	2d01      	cmp	r5, #1
    c3fa:	d005      	beq.n	c408 <input_handle+0x4d0>
		print_args_error("check_for_update", required_args, argc);
    c3fc:	002a      	movs	r2, r5
    c3fe:	2101      	movs	r1, #1
    c400:	4837      	ldr	r0, [pc, #220]	; (c4e0 <input_handle+0x5a8>)
    c402:	4b21      	ldr	r3, [pc, #132]	; (c488 <input_handle+0x550>)
    c404:	4798      	blx	r3
		return;
    c406:	e5a8      	b.n	bf5a <input_handle+0x22>
	otafu(0);
    c408:	2000      	movs	r0, #0
    c40a:	4b36      	ldr	r3, [pc, #216]	; (c4e4 <input_handle+0x5ac>)
    c40c:	4798      	blx	r3
    c40e:	e5a4      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("download_update", argv[0]))) {
    c410:	0021      	movs	r1, r4
    c412:	4835      	ldr	r0, [pc, #212]	; (c4e8 <input_handle+0x5b0>)
    c414:	4b1b      	ldr	r3, [pc, #108]	; (c484 <input_handle+0x54c>)
    c416:	4798      	blx	r3
    c418:	2800      	cmp	r0, #0
    c41a:	d10b      	bne.n	c434 <input_handle+0x4fc>
	if (argc != required_args) {
    c41c:	2d01      	cmp	r5, #1
    c41e:	d005      	beq.n	c42c <input_handle+0x4f4>
		print_args_error("download_update", required_args, argc);
    c420:	002a      	movs	r2, r5
    c422:	2101      	movs	r1, #1
    c424:	4830      	ldr	r0, [pc, #192]	; (c4e8 <input_handle+0x5b0>)
    c426:	4b18      	ldr	r3, [pc, #96]	; (c488 <input_handle+0x550>)
    c428:	4798      	blx	r3
		return;
    c42a:	e596      	b.n	bf5a <input_handle+0x22>
	otafu(1);
    c42c:	2001      	movs	r0, #1
    c42e:	4b2d      	ldr	r3, [pc, #180]	; (c4e4 <input_handle+0x5ac>)
    c430:	4798      	blx	r3
    c432:	e592      	b.n	bf5a <input_handle+0x22>
	} else if (!(strcmp("run_pump", argv[0]))) {
    c434:	0021      	movs	r1, r4
    c436:	482d      	ldr	r0, [pc, #180]	; (c4ec <input_handle+0x5b4>)
    c438:	4b12      	ldr	r3, [pc, #72]	; (c484 <input_handle+0x54c>)
    c43a:	4798      	blx	r3
    c43c:	2800      	cmp	r0, #0
    c43e:	d11b      	bne.n	c478 <input_handle+0x540>
	if (argc != required_args) {
    c440:	2d02      	cmp	r5, #2
    c442:	d005      	beq.n	c450 <input_handle+0x518>
		print_args_error("run_pump", required_args, argc);
    c444:	002a      	movs	r2, r5
    c446:	2102      	movs	r1, #2
    c448:	4828      	ldr	r0, [pc, #160]	; (c4ec <input_handle+0x5b4>)
    c44a:	4b0f      	ldr	r3, [pc, #60]	; (c488 <input_handle+0x550>)
    c44c:	4798      	blx	r3
		return;
    c44e:	e584      	b.n	bf5a <input_handle+0x22>
	int duration = atoi(argv[1]);
    c450:	6870      	ldr	r0, [r6, #4]
    c452:	4b27      	ldr	r3, [pc, #156]	; (c4f0 <input_handle+0x5b8>)
    c454:	4798      	blx	r3
    c456:	0004      	movs	r4, r0
	if (isdigit(argv[1][0])) {
    c458:	4b26      	ldr	r3, [pc, #152]	; (c4f4 <input_handle+0x5bc>)
    c45a:	4798      	blx	r3
    c45c:	6873      	ldr	r3, [r6, #4]
    c45e:	781b      	ldrb	r3, [r3, #0]
    c460:	18c0      	adds	r0, r0, r3
    c462:	7843      	ldrb	r3, [r0, #1]
    c464:	075b      	lsls	r3, r3, #29
    c466:	d503      	bpl.n	c470 <input_handle+0x538>
		run_pump(duration);
    c468:	0020      	movs	r0, r4
    c46a:	4b23      	ldr	r3, [pc, #140]	; (c4f8 <input_handle+0x5c0>)
    c46c:	4798      	blx	r3
    c46e:	e574      	b.n	bf5a <input_handle+0x22>
	print_general_error("run_pump");
    c470:	481e      	ldr	r0, [pc, #120]	; (c4ec <input_handle+0x5b4>)
    c472:	4b22      	ldr	r3, [pc, #136]	; (c4fc <input_handle+0x5c4>)
    c474:	4798      	blx	r3
    c476:	e570      	b.n	bf5a <input_handle+0x22>
		printf("Invalid input. See help for correct usage.\r\n");
    c478:	4821      	ldr	r0, [pc, #132]	; (c500 <input_handle+0x5c8>)
    c47a:	4b05      	ldr	r3, [pc, #20]	; (c490 <input_handle+0x558>)
    c47c:	4798      	blx	r3
    c47e:	e56c      	b.n	bf5a <input_handle+0x22>
    c480:	00016134 	.word	0x00016134
    c484:	0000f60d 	.word	0x0000f60d
    c488:	0000b87d 	.word	0x0000b87d
    c48c:	00016140 	.word	0x00016140
    c490:	0000f425 	.word	0x0000f425
    c494:	0000beb9 	.word	0x0000beb9
    c498:	00016158 	.word	0x00016158
    c49c:	00016164 	.word	0x00016164
    c4a0:	0000be39 	.word	0x0000be39
    c4a4:	00016180 	.word	0x00016180
    c4a8:	0001618c 	.word	0x0001618c
    c4ac:	0000be55 	.word	0x0000be55
    c4b0:	000161a8 	.word	0x000161a8
    c4b4:	000161b0 	.word	0x000161b0
    c4b8:	0000bdd1 	.word	0x0000bdd1
    c4bc:	000161c4 	.word	0x000161c4
    c4c0:	000161d0 	.word	0x000161d0
    c4c4:	0000bded 	.word	0x0000bded
    c4c8:	000161e4 	.word	0x000161e4
    c4cc:	000161ec 	.word	0x000161ec
    c4d0:	0000be09 	.word	0x0000be09
    c4d4:	00016200 	.word	0x00016200
    c4d8:	0001620c 	.word	0x0001620c
    c4dc:	0000be21 	.word	0x0000be21
    c4e0:	00016220 	.word	0x00016220
    c4e4:	0000b73d 	.word	0x0000b73d
    c4e8:	00016234 	.word	0x00016234
    c4ec:	00016244 	.word	0x00016244
    c4f0:	0000e7cd 	.word	0x0000e7cd
    c4f4:	0000e829 	.word	0x0000e829
    c4f8:	0000bf09 	.word	0x0000bf09
    c4fc:	0000b869 	.word	0x0000b869
    c500:	00016250 	.word	0x00016250

0000c504 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    c504:	b5f0      	push	{r4, r5, r6, r7, lr}
    c506:	46de      	mov	lr, fp
    c508:	4657      	mov	r7, sl
    c50a:	464e      	mov	r6, r9
    c50c:	4645      	mov	r5, r8
    c50e:	b5e0      	push	{r5, r6, r7, lr}
    c510:	b091      	sub	sp, #68	; 0x44
    c512:	0005      	movs	r5, r0
    c514:	000c      	movs	r4, r1
    c516:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    c518:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    c51a:	0008      	movs	r0, r1
    c51c:	4bbc      	ldr	r3, [pc, #752]	; (c810 <usart_init+0x30c>)
    c51e:	4798      	blx	r3
    c520:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    c522:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    c524:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    c526:	07db      	lsls	r3, r3, #31
    c528:	d506      	bpl.n	c538 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    c52a:	b011      	add	sp, #68	; 0x44
    c52c:	bc3c      	pop	{r2, r3, r4, r5}
    c52e:	4690      	mov	r8, r2
    c530:	4699      	mov	r9, r3
    c532:	46a2      	mov	sl, r4
    c534:	46ab      	mov	fp, r5
    c536:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    c538:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    c53a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    c53c:	079b      	lsls	r3, r3, #30
    c53e:	d4f4      	bmi.n	c52a <usart_init+0x26>
    c540:	49b4      	ldr	r1, [pc, #720]	; (c814 <usart_init+0x310>)
    c542:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    c544:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    c546:	2301      	movs	r3, #1
    c548:	40bb      	lsls	r3, r7
    c54a:	4303      	orrs	r3, r0
    c54c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    c54e:	a90f      	add	r1, sp, #60	; 0x3c
    c550:	272d      	movs	r7, #45	; 0x2d
    c552:	5df3      	ldrb	r3, [r6, r7]
    c554:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    c556:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    c558:	b2d3      	uxtb	r3, r2
    c55a:	9302      	str	r3, [sp, #8]
    c55c:	0018      	movs	r0, r3
    c55e:	4bae      	ldr	r3, [pc, #696]	; (c818 <usart_init+0x314>)
    c560:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    c562:	9802      	ldr	r0, [sp, #8]
    c564:	4bad      	ldr	r3, [pc, #692]	; (c81c <usart_init+0x318>)
    c566:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    c568:	5df0      	ldrb	r0, [r6, r7]
    c56a:	2100      	movs	r1, #0
    c56c:	4bac      	ldr	r3, [pc, #688]	; (c820 <usart_init+0x31c>)
    c56e:	4798      	blx	r3
	module->character_size = config->character_size;
    c570:	7af3      	ldrb	r3, [r6, #11]
    c572:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    c574:	2324      	movs	r3, #36	; 0x24
    c576:	5cf3      	ldrb	r3, [r6, r3]
    c578:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    c57a:	2325      	movs	r3, #37	; 0x25
    c57c:	5cf3      	ldrb	r3, [r6, r3]
    c57e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    c580:	7ef3      	ldrb	r3, [r6, #27]
    c582:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    c584:	7f33      	ldrb	r3, [r6, #28]
    c586:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    c588:	682b      	ldr	r3, [r5, #0]
    c58a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    c58c:	0018      	movs	r0, r3
    c58e:	4ba0      	ldr	r3, [pc, #640]	; (c810 <usart_init+0x30c>)
    c590:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    c592:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    c594:	2200      	movs	r2, #0
    c596:	230e      	movs	r3, #14
    c598:	a906      	add	r1, sp, #24
    c59a:	468c      	mov	ip, r1
    c59c:	4463      	add	r3, ip
    c59e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    c5a0:	8a32      	ldrh	r2, [r6, #16]
    c5a2:	9202      	str	r2, [sp, #8]
    c5a4:	2380      	movs	r3, #128	; 0x80
    c5a6:	01db      	lsls	r3, r3, #7
    c5a8:	429a      	cmp	r2, r3
    c5aa:	d100      	bne.n	c5ae <usart_init+0xaa>
    c5ac:	e09e      	b.n	c6ec <usart_init+0x1e8>
    c5ae:	d90f      	bls.n	c5d0 <usart_init+0xcc>
    c5b0:	23c0      	movs	r3, #192	; 0xc0
    c5b2:	01db      	lsls	r3, r3, #7
    c5b4:	9a02      	ldr	r2, [sp, #8]
    c5b6:	429a      	cmp	r2, r3
    c5b8:	d100      	bne.n	c5bc <usart_init+0xb8>
    c5ba:	e092      	b.n	c6e2 <usart_init+0x1de>
    c5bc:	2380      	movs	r3, #128	; 0x80
    c5be:	021b      	lsls	r3, r3, #8
    c5c0:	429a      	cmp	r2, r3
    c5c2:	d000      	beq.n	c5c6 <usart_init+0xc2>
    c5c4:	e11f      	b.n	c806 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    c5c6:	2303      	movs	r3, #3
    c5c8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    c5ca:	2300      	movs	r3, #0
    c5cc:	9307      	str	r3, [sp, #28]
    c5ce:	e008      	b.n	c5e2 <usart_init+0xde>
	switch (config->sample_rate) {
    c5d0:	2380      	movs	r3, #128	; 0x80
    c5d2:	019b      	lsls	r3, r3, #6
    c5d4:	429a      	cmp	r2, r3
    c5d6:	d000      	beq.n	c5da <usart_init+0xd6>
    c5d8:	e115      	b.n	c806 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    c5da:	2310      	movs	r3, #16
    c5dc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    c5de:	3b0f      	subs	r3, #15
    c5e0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    c5e2:	6833      	ldr	r3, [r6, #0]
    c5e4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    c5e6:	68f3      	ldr	r3, [r6, #12]
    c5e8:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    c5ea:	6973      	ldr	r3, [r6, #20]
    c5ec:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    c5ee:	7e33      	ldrb	r3, [r6, #24]
    c5f0:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    c5f2:	2326      	movs	r3, #38	; 0x26
    c5f4:	5cf3      	ldrb	r3, [r6, r3]
    c5f6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    c5f8:	6873      	ldr	r3, [r6, #4]
    c5fa:	4699      	mov	r9, r3
	switch (transfer_mode)
    c5fc:	2b00      	cmp	r3, #0
    c5fe:	d100      	bne.n	c602 <usart_init+0xfe>
    c600:	e0a0      	b.n	c744 <usart_init+0x240>
    c602:	2380      	movs	r3, #128	; 0x80
    c604:	055b      	lsls	r3, r3, #21
    c606:	4599      	cmp	r9, r3
    c608:	d100      	bne.n	c60c <usart_init+0x108>
    c60a:	e084      	b.n	c716 <usart_init+0x212>
	if(config->encoding_format_enable) {
    c60c:	7e73      	ldrb	r3, [r6, #25]
    c60e:	2b00      	cmp	r3, #0
    c610:	d002      	beq.n	c618 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    c612:	7eb3      	ldrb	r3, [r6, #26]
    c614:	4642      	mov	r2, r8
    c616:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    c618:	682a      	ldr	r2, [r5, #0]
    c61a:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    c61c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    c61e:	2b00      	cmp	r3, #0
    c620:	d1fc      	bne.n	c61c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    c622:	330e      	adds	r3, #14
    c624:	aa06      	add	r2, sp, #24
    c626:	4694      	mov	ip, r2
    c628:	4463      	add	r3, ip
    c62a:	881b      	ldrh	r3, [r3, #0]
    c62c:	4642      	mov	r2, r8
    c62e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    c630:	9b05      	ldr	r3, [sp, #20]
    c632:	9a03      	ldr	r2, [sp, #12]
    c634:	4313      	orrs	r3, r2
    c636:	9a04      	ldr	r2, [sp, #16]
    c638:	4313      	orrs	r3, r2
    c63a:	464a      	mov	r2, r9
    c63c:	4313      	orrs	r3, r2
    c63e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    c640:	465b      	mov	r3, fp
    c642:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    c644:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    c646:	4653      	mov	r3, sl
    c648:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    c64a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    c64c:	2327      	movs	r3, #39	; 0x27
    c64e:	5cf3      	ldrb	r3, [r6, r3]
    c650:	2b00      	cmp	r3, #0
    c652:	d101      	bne.n	c658 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    c654:	3304      	adds	r3, #4
    c656:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    c658:	7e73      	ldrb	r3, [r6, #25]
    c65a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    c65c:	7f32      	ldrb	r2, [r6, #28]
    c65e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    c660:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    c662:	7f72      	ldrb	r2, [r6, #29]
    c664:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    c666:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    c668:	2224      	movs	r2, #36	; 0x24
    c66a:	5cb2      	ldrb	r2, [r6, r2]
    c66c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    c66e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    c670:	2225      	movs	r2, #37	; 0x25
    c672:	5cb2      	ldrb	r2, [r6, r2]
    c674:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    c676:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    c678:	7ab1      	ldrb	r1, [r6, #10]
    c67a:	7af2      	ldrb	r2, [r6, #11]
    c67c:	4311      	orrs	r1, r2
    c67e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    c680:	8933      	ldrh	r3, [r6, #8]
    c682:	2bff      	cmp	r3, #255	; 0xff
    c684:	d100      	bne.n	c688 <usart_init+0x184>
    c686:	e081      	b.n	c78c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    c688:	2280      	movs	r2, #128	; 0x80
    c68a:	0452      	lsls	r2, r2, #17
    c68c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    c68e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    c690:	232c      	movs	r3, #44	; 0x2c
    c692:	5cf3      	ldrb	r3, [r6, r3]
    c694:	2b00      	cmp	r3, #0
    c696:	d103      	bne.n	c6a0 <usart_init+0x19c>
    c698:	4b62      	ldr	r3, [pc, #392]	; (c824 <usart_init+0x320>)
    c69a:	789b      	ldrb	r3, [r3, #2]
    c69c:	079b      	lsls	r3, r3, #30
    c69e:	d501      	bpl.n	c6a4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    c6a0:	2380      	movs	r3, #128	; 0x80
    c6a2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    c6a4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    c6a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    c6a8:	2b00      	cmp	r3, #0
    c6aa:	d1fc      	bne.n	c6a6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    c6ac:	4643      	mov	r3, r8
    c6ae:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    c6b0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    c6b2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    c6b4:	2b00      	cmp	r3, #0
    c6b6:	d1fc      	bne.n	c6b2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    c6b8:	4643      	mov	r3, r8
    c6ba:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    c6bc:	ab0e      	add	r3, sp, #56	; 0x38
    c6be:	2280      	movs	r2, #128	; 0x80
    c6c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    c6c2:	2200      	movs	r2, #0
    c6c4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    c6c6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    c6c8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    c6ca:	6b33      	ldr	r3, [r6, #48]	; 0x30
    c6cc:	930a      	str	r3, [sp, #40]	; 0x28
    c6ce:	6b73      	ldr	r3, [r6, #52]	; 0x34
    c6d0:	930b      	str	r3, [sp, #44]	; 0x2c
    c6d2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    c6d4:	930c      	str	r3, [sp, #48]	; 0x30
    c6d6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    c6d8:	9302      	str	r3, [sp, #8]
    c6da:	930d      	str	r3, [sp, #52]	; 0x34
    c6dc:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    c6de:	ae0a      	add	r6, sp, #40	; 0x28
    c6e0:	e063      	b.n	c7aa <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    c6e2:	2308      	movs	r3, #8
    c6e4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    c6e6:	3b07      	subs	r3, #7
    c6e8:	9307      	str	r3, [sp, #28]
    c6ea:	e77a      	b.n	c5e2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    c6ec:	6833      	ldr	r3, [r6, #0]
    c6ee:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    c6f0:	68f3      	ldr	r3, [r6, #12]
    c6f2:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    c6f4:	6973      	ldr	r3, [r6, #20]
    c6f6:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    c6f8:	7e33      	ldrb	r3, [r6, #24]
    c6fa:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    c6fc:	2326      	movs	r3, #38	; 0x26
    c6fe:	5cf3      	ldrb	r3, [r6, r3]
    c700:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    c702:	6873      	ldr	r3, [r6, #4]
    c704:	4699      	mov	r9, r3
	switch (transfer_mode)
    c706:	2b00      	cmp	r3, #0
    c708:	d018      	beq.n	c73c <usart_init+0x238>
    c70a:	2380      	movs	r3, #128	; 0x80
    c70c:	055b      	lsls	r3, r3, #21
    c70e:	4599      	cmp	r9, r3
    c710:	d001      	beq.n	c716 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    c712:	2000      	movs	r0, #0
    c714:	e025      	b.n	c762 <usart_init+0x25e>
			if (!config->use_external_clock) {
    c716:	2327      	movs	r3, #39	; 0x27
    c718:	5cf3      	ldrb	r3, [r6, r3]
    c71a:	2b00      	cmp	r3, #0
    c71c:	d000      	beq.n	c720 <usart_init+0x21c>
    c71e:	e775      	b.n	c60c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    c720:	6a33      	ldr	r3, [r6, #32]
    c722:	001f      	movs	r7, r3
    c724:	b2c0      	uxtb	r0, r0
    c726:	4b40      	ldr	r3, [pc, #256]	; (c828 <usart_init+0x324>)
    c728:	4798      	blx	r3
    c72a:	0001      	movs	r1, r0
    c72c:	220e      	movs	r2, #14
    c72e:	ab06      	add	r3, sp, #24
    c730:	469c      	mov	ip, r3
    c732:	4462      	add	r2, ip
    c734:	0038      	movs	r0, r7
    c736:	4b3d      	ldr	r3, [pc, #244]	; (c82c <usart_init+0x328>)
    c738:	4798      	blx	r3
    c73a:	e012      	b.n	c762 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    c73c:	2308      	movs	r3, #8
    c73e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    c740:	2300      	movs	r3, #0
    c742:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    c744:	2327      	movs	r3, #39	; 0x27
    c746:	5cf3      	ldrb	r3, [r6, r3]
    c748:	2b00      	cmp	r3, #0
    c74a:	d00e      	beq.n	c76a <usart_init+0x266>
				status_code =
    c74c:	9b06      	ldr	r3, [sp, #24]
    c74e:	9300      	str	r3, [sp, #0]
    c750:	9b07      	ldr	r3, [sp, #28]
    c752:	220e      	movs	r2, #14
    c754:	a906      	add	r1, sp, #24
    c756:	468c      	mov	ip, r1
    c758:	4462      	add	r2, ip
    c75a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    c75c:	6a30      	ldr	r0, [r6, #32]
    c75e:	4f34      	ldr	r7, [pc, #208]	; (c830 <usart_init+0x32c>)
    c760:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    c762:	2800      	cmp	r0, #0
    c764:	d000      	beq.n	c768 <usart_init+0x264>
    c766:	e6e0      	b.n	c52a <usart_init+0x26>
    c768:	e750      	b.n	c60c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    c76a:	6a33      	ldr	r3, [r6, #32]
    c76c:	001f      	movs	r7, r3
    c76e:	b2c0      	uxtb	r0, r0
    c770:	4b2d      	ldr	r3, [pc, #180]	; (c828 <usart_init+0x324>)
    c772:	4798      	blx	r3
    c774:	0001      	movs	r1, r0
				status_code =
    c776:	9b06      	ldr	r3, [sp, #24]
    c778:	9300      	str	r3, [sp, #0]
    c77a:	9b07      	ldr	r3, [sp, #28]
    c77c:	220e      	movs	r2, #14
    c77e:	a806      	add	r0, sp, #24
    c780:	4684      	mov	ip, r0
    c782:	4462      	add	r2, ip
    c784:	0038      	movs	r0, r7
    c786:	4f2a      	ldr	r7, [pc, #168]	; (c830 <usart_init+0x32c>)
    c788:	47b8      	blx	r7
    c78a:	e7ea      	b.n	c762 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    c78c:	7ef3      	ldrb	r3, [r6, #27]
    c78e:	2b00      	cmp	r3, #0
    c790:	d100      	bne.n	c794 <usart_init+0x290>
    c792:	e77d      	b.n	c690 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    c794:	2380      	movs	r3, #128	; 0x80
    c796:	04db      	lsls	r3, r3, #19
    c798:	431f      	orrs	r7, r3
    c79a:	e779      	b.n	c690 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    c79c:	0020      	movs	r0, r4
    c79e:	4b25      	ldr	r3, [pc, #148]	; (c834 <usart_init+0x330>)
    c7a0:	4798      	blx	r3
    c7a2:	e007      	b.n	c7b4 <usart_init+0x2b0>
    c7a4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    c7a6:	2f04      	cmp	r7, #4
    c7a8:	d00d      	beq.n	c7c6 <usart_init+0x2c2>
    c7aa:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    c7ac:	00bb      	lsls	r3, r7, #2
    c7ae:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    c7b0:	2800      	cmp	r0, #0
    c7b2:	d0f3      	beq.n	c79c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    c7b4:	1c43      	adds	r3, r0, #1
    c7b6:	d0f5      	beq.n	c7a4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    c7b8:	a90e      	add	r1, sp, #56	; 0x38
    c7ba:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    c7bc:	0c00      	lsrs	r0, r0, #16
    c7be:	b2c0      	uxtb	r0, r0
    c7c0:	4b1d      	ldr	r3, [pc, #116]	; (c838 <usart_init+0x334>)
    c7c2:	4798      	blx	r3
    c7c4:	e7ee      	b.n	c7a4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    c7c6:	2300      	movs	r3, #0
    c7c8:	60eb      	str	r3, [r5, #12]
    c7ca:	612b      	str	r3, [r5, #16]
    c7cc:	616b      	str	r3, [r5, #20]
    c7ce:	61ab      	str	r3, [r5, #24]
    c7d0:	61eb      	str	r3, [r5, #28]
    c7d2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    c7d4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    c7d6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    c7d8:	2200      	movs	r2, #0
    c7da:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    c7dc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    c7de:	3330      	adds	r3, #48	; 0x30
    c7e0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    c7e2:	3301      	adds	r3, #1
    c7e4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    c7e6:	3301      	adds	r3, #1
    c7e8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    c7ea:	3301      	adds	r3, #1
    c7ec:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    c7ee:	6828      	ldr	r0, [r5, #0]
    c7f0:	4b07      	ldr	r3, [pc, #28]	; (c810 <usart_init+0x30c>)
    c7f2:	4798      	blx	r3
    c7f4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    c7f6:	4911      	ldr	r1, [pc, #68]	; (c83c <usart_init+0x338>)
    c7f8:	4b11      	ldr	r3, [pc, #68]	; (c840 <usart_init+0x33c>)
    c7fa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    c7fc:	00a4      	lsls	r4, r4, #2
    c7fe:	4b11      	ldr	r3, [pc, #68]	; (c844 <usart_init+0x340>)
    c800:	50e5      	str	r5, [r4, r3]
	return status_code;
    c802:	2000      	movs	r0, #0
    c804:	e691      	b.n	c52a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    c806:	2310      	movs	r3, #16
    c808:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    c80a:	2300      	movs	r3, #0
    c80c:	9307      	str	r3, [sp, #28]
    c80e:	e6e8      	b.n	c5e2 <usart_init+0xde>
    c810:	0000d765 	.word	0x0000d765
    c814:	40000400 	.word	0x40000400
    c818:	0000e2d1 	.word	0x0000e2d1
    c81c:	0000e245 	.word	0x0000e245
    c820:	0000d5a1 	.word	0x0000d5a1
    c824:	41002000 	.word	0x41002000
    c828:	0000e2ed 	.word	0x0000e2ed
    c82c:	0000d4e3 	.word	0x0000d4e3
    c830:	0000d50d 	.word	0x0000d50d
    c834:	0000d5ed 	.word	0x0000d5ed
    c838:	0000e3c9 	.word	0x0000e3c9
    c83c:	0000ca3d 	.word	0x0000ca3d
    c840:	0000d7a1 	.word	0x0000d7a1
    c844:	20000730 	.word	0x20000730

0000c848 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    c848:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    c84a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    c84c:	2a00      	cmp	r2, #0
    c84e:	d101      	bne.n	c854 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    c850:	0018      	movs	r0, r3
    c852:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    c854:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    c856:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    c858:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    c85a:	2a00      	cmp	r2, #0
    c85c:	d1f8      	bne.n	c850 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    c85e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    c860:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c862:	2a00      	cmp	r2, #0
    c864:	d1fc      	bne.n	c860 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    c866:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    c868:	2102      	movs	r1, #2
    c86a:	7e1a      	ldrb	r2, [r3, #24]
    c86c:	420a      	tst	r2, r1
    c86e:	d0fc      	beq.n	c86a <usart_write_wait+0x22>
	return STATUS_OK;
    c870:	2300      	movs	r3, #0
    c872:	e7ed      	b.n	c850 <usart_write_wait+0x8>

0000c874 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    c874:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    c876:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    c878:	2a00      	cmp	r2, #0
    c87a:	d101      	bne.n	c880 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    c87c:	0018      	movs	r0, r3
    c87e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    c880:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    c882:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    c884:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    c886:	2a00      	cmp	r2, #0
    c888:	d1f8      	bne.n	c87c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    c88a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    c88c:	7e10      	ldrb	r0, [r2, #24]
    c88e:	0740      	lsls	r0, r0, #29
    c890:	d5f4      	bpl.n	c87c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    c892:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    c894:	2b00      	cmp	r3, #0
    c896:	d1fc      	bne.n	c892 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    c898:	8b53      	ldrh	r3, [r2, #26]
    c89a:	b2db      	uxtb	r3, r3
	if (error_code) {
    c89c:	0698      	lsls	r0, r3, #26
    c89e:	d01d      	beq.n	c8dc <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    c8a0:	0798      	lsls	r0, r3, #30
    c8a2:	d503      	bpl.n	c8ac <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    c8a4:	2302      	movs	r3, #2
    c8a6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    c8a8:	3318      	adds	r3, #24
    c8aa:	e7e7      	b.n	c87c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    c8ac:	0758      	lsls	r0, r3, #29
    c8ae:	d503      	bpl.n	c8b8 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    c8b0:	2304      	movs	r3, #4
    c8b2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    c8b4:	331a      	adds	r3, #26
    c8b6:	e7e1      	b.n	c87c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    c8b8:	07d8      	lsls	r0, r3, #31
    c8ba:	d503      	bpl.n	c8c4 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    c8bc:	2301      	movs	r3, #1
    c8be:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    c8c0:	3312      	adds	r3, #18
    c8c2:	e7db      	b.n	c87c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    c8c4:	06d8      	lsls	r0, r3, #27
    c8c6:	d503      	bpl.n	c8d0 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    c8c8:	2310      	movs	r3, #16
    c8ca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    c8cc:	3332      	adds	r3, #50	; 0x32
    c8ce:	e7d5      	b.n	c87c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    c8d0:	069b      	lsls	r3, r3, #26
    c8d2:	d503      	bpl.n	c8dc <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    c8d4:	2320      	movs	r3, #32
    c8d6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    c8d8:	3321      	adds	r3, #33	; 0x21
    c8da:	e7cf      	b.n	c87c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    c8dc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    c8de:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    c8e0:	2300      	movs	r3, #0
    c8e2:	e7cb      	b.n	c87c <usart_read_wait+0x8>

0000c8e4 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    c8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8e6:	46ce      	mov	lr, r9
    c8e8:	4647      	mov	r7, r8
    c8ea:	b580      	push	{r7, lr}
    c8ec:	b083      	sub	sp, #12
    c8ee:	0005      	movs	r5, r0
    c8f0:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    c8f2:	2017      	movs	r0, #23
	if (length == 0) {
    c8f4:	2a00      	cmp	r2, #0
    c8f6:	d104      	bne.n	c902 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    c8f8:	b003      	add	sp, #12
    c8fa:	bc0c      	pop	{r2, r3}
    c8fc:	4690      	mov	r8, r2
    c8fe:	4699      	mov	r9, r3
    c900:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    c902:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    c904:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    c906:	2b00      	cmp	r3, #0
    c908:	d0f6      	beq.n	c8f8 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    c90a:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    c90c:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    c90e:	2b00      	cmp	r3, #0
    c910:	d1fc      	bne.n	c90c <usart_write_buffer_wait+0x28>
	while (length--) {
    c912:	3a01      	subs	r2, #1
    c914:	b293      	uxth	r3, r2
    c916:	4699      	mov	r9, r3
    c918:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    c91a:	2701      	movs	r7, #1
	while (length--) {
    c91c:	4b1f      	ldr	r3, [pc, #124]	; (c99c <usart_write_buffer_wait+0xb8>)
    c91e:	4698      	mov	r8, r3
    c920:	e011      	b.n	c946 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    c922:	1c73      	adds	r3, r6, #1
    c924:	b29b      	uxth	r3, r3
    c926:	9a01      	ldr	r2, [sp, #4]
    c928:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    c92a:	796a      	ldrb	r2, [r5, #5]
    c92c:	2a01      	cmp	r2, #1
    c92e:	d017      	beq.n	c960 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    c930:	b289      	uxth	r1, r1
    c932:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    c934:	0028      	movs	r0, r5
    c936:	4b1a      	ldr	r3, [pc, #104]	; (c9a0 <usart_write_buffer_wait+0xbc>)
    c938:	4798      	blx	r3
	while (length--) {
    c93a:	464b      	mov	r3, r9
    c93c:	3b01      	subs	r3, #1
    c93e:	b29b      	uxth	r3, r3
    c940:	4699      	mov	r9, r3
    c942:	4543      	cmp	r3, r8
    c944:	d013      	beq.n	c96e <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    c946:	7e23      	ldrb	r3, [r4, #24]
    c948:	423b      	tst	r3, r7
    c94a:	d1ea      	bne.n	c922 <usart_write_buffer_wait+0x3e>
    c94c:	4b13      	ldr	r3, [pc, #76]	; (c99c <usart_write_buffer_wait+0xb8>)
    c94e:	7e22      	ldrb	r2, [r4, #24]
    c950:	423a      	tst	r2, r7
    c952:	d1e6      	bne.n	c922 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    c954:	2b01      	cmp	r3, #1
    c956:	d019      	beq.n	c98c <usart_write_buffer_wait+0xa8>
    c958:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    c95a:	2b00      	cmp	r3, #0
    c95c:	d1f7      	bne.n	c94e <usart_write_buffer_wait+0x6a>
    c95e:	e7e0      	b.n	c922 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    c960:	3602      	adds	r6, #2
    c962:	b2b6      	uxth	r6, r6
    c964:	9a01      	ldr	r2, [sp, #4]
    c966:	5cd3      	ldrb	r3, [r2, r3]
    c968:	021b      	lsls	r3, r3, #8
    c96a:	4319      	orrs	r1, r3
    c96c:	e7e2      	b.n	c934 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    c96e:	7e23      	ldrb	r3, [r4, #24]
    c970:	079b      	lsls	r3, r3, #30
    c972:	d40d      	bmi.n	c990 <usart_write_buffer_wait+0xac>
    c974:	4b09      	ldr	r3, [pc, #36]	; (c99c <usart_write_buffer_wait+0xb8>)
    c976:	2102      	movs	r1, #2
    c978:	7e22      	ldrb	r2, [r4, #24]
    c97a:	420a      	tst	r2, r1
    c97c:	d10a      	bne.n	c994 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    c97e:	2b01      	cmp	r3, #1
    c980:	d00a      	beq.n	c998 <usart_write_buffer_wait+0xb4>
    c982:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    c984:	2b00      	cmp	r3, #0
    c986:	d1f7      	bne.n	c978 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    c988:	2000      	movs	r0, #0
    c98a:	e7b5      	b.n	c8f8 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    c98c:	2012      	movs	r0, #18
    c98e:	e7b3      	b.n	c8f8 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    c990:	2000      	movs	r0, #0
    c992:	e7b1      	b.n	c8f8 <usart_write_buffer_wait+0x14>
    c994:	2000      	movs	r0, #0
    c996:	e7af      	b.n	c8f8 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    c998:	2012      	movs	r0, #18
    c99a:	e7ad      	b.n	c8f8 <usart_write_buffer_wait+0x14>
    c99c:	0000ffff 	.word	0x0000ffff
    c9a0:	0000c849 	.word	0x0000c849

0000c9a4 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    c9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9a6:	46d6      	mov	lr, sl
    c9a8:	b500      	push	{lr}
    c9aa:	b084      	sub	sp, #16
    c9ac:	0004      	movs	r4, r0
    c9ae:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    c9b0:	2017      	movs	r0, #23
	if (length == 0) {
    c9b2:	2a00      	cmp	r2, #0
    c9b4:	d103      	bne.n	c9be <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    c9b6:	b004      	add	sp, #16
    c9b8:	bc04      	pop	{r2}
    c9ba:	4692      	mov	sl, r2
    c9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    c9be:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    c9c0:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    c9c2:	2b00      	cmp	r3, #0
    c9c4:	d0f7      	beq.n	c9b6 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    c9c6:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    c9c8:	3a01      	subs	r2, #1
    c9ca:	b293      	uxth	r3, r2
    c9cc:	469a      	mov	sl, r3
    c9ce:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    c9d0:	2704      	movs	r7, #4
    c9d2:	e019      	b.n	ca08 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    c9d4:	2300      	movs	r3, #0
    c9d6:	aa02      	add	r2, sp, #8
    c9d8:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    c9da:	1d91      	adds	r1, r2, #6
    c9dc:	0020      	movs	r0, r4
    c9de:	4b15      	ldr	r3, [pc, #84]	; (ca34 <usart_read_buffer_wait+0x90>)
    c9e0:	4798      	blx	r3
		if (retval != STATUS_OK) {
    c9e2:	2800      	cmp	r0, #0
    c9e4:	d1e7      	bne.n	c9b6 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    c9e6:	1c69      	adds	r1, r5, #1
    c9e8:	b289      	uxth	r1, r1
    c9ea:	ab02      	add	r3, sp, #8
    c9ec:	88db      	ldrh	r3, [r3, #6]
    c9ee:	9a01      	ldr	r2, [sp, #4]
    c9f0:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    c9f2:	7962      	ldrb	r2, [r4, #5]
    c9f4:	2a01      	cmp	r2, #1
    c9f6:	d014      	beq.n	ca22 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    c9f8:	000d      	movs	r5, r1
	while (length--) {
    c9fa:	4653      	mov	r3, sl
    c9fc:	3b01      	subs	r3, #1
    c9fe:	b29b      	uxth	r3, r3
    ca00:	469a      	mov	sl, r3
    ca02:	4b0d      	ldr	r3, [pc, #52]	; (ca38 <usart_read_buffer_wait+0x94>)
    ca04:	459a      	cmp	sl, r3
    ca06:	d0d6      	beq.n	c9b6 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    ca08:	7e33      	ldrb	r3, [r6, #24]
    ca0a:	423b      	tst	r3, r7
    ca0c:	d1e2      	bne.n	c9d4 <usart_read_buffer_wait+0x30>
    ca0e:	4b0a      	ldr	r3, [pc, #40]	; (ca38 <usart_read_buffer_wait+0x94>)
    ca10:	7e32      	ldrb	r2, [r6, #24]
    ca12:	423a      	tst	r2, r7
    ca14:	d1de      	bne.n	c9d4 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    ca16:	2b01      	cmp	r3, #1
    ca18:	d009      	beq.n	ca2e <usart_read_buffer_wait+0x8a>
    ca1a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    ca1c:	2b00      	cmp	r3, #0
    ca1e:	d1f7      	bne.n	ca10 <usart_read_buffer_wait+0x6c>
    ca20:	e7d8      	b.n	c9d4 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    ca22:	3502      	adds	r5, #2
    ca24:	b2ad      	uxth	r5, r5
    ca26:	0a1b      	lsrs	r3, r3, #8
    ca28:	9a01      	ldr	r2, [sp, #4]
    ca2a:	5453      	strb	r3, [r2, r1]
    ca2c:	e7e5      	b.n	c9fa <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    ca2e:	2012      	movs	r0, #18
    ca30:	e7c1      	b.n	c9b6 <usart_read_buffer_wait+0x12>
    ca32:	46c0      	nop			; (mov r8, r8)
    ca34:	0000c875 	.word	0x0000c875
    ca38:	0000ffff 	.word	0x0000ffff

0000ca3c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    ca3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    ca3e:	0080      	lsls	r0, r0, #2
    ca40:	4b62      	ldr	r3, [pc, #392]	; (cbcc <_usart_interrupt_handler+0x190>)
    ca42:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    ca44:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    ca46:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    ca48:	2b00      	cmp	r3, #0
    ca4a:	d1fc      	bne.n	ca46 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    ca4c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    ca4e:	7da6      	ldrb	r6, [r4, #22]
    ca50:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    ca52:	2330      	movs	r3, #48	; 0x30
    ca54:	5ceb      	ldrb	r3, [r5, r3]
    ca56:	2231      	movs	r2, #49	; 0x31
    ca58:	5caf      	ldrb	r7, [r5, r2]
    ca5a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    ca5c:	07f3      	lsls	r3, r6, #31
    ca5e:	d522      	bpl.n	caa6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    ca60:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    ca62:	b29b      	uxth	r3, r3
    ca64:	2b00      	cmp	r3, #0
    ca66:	d01c      	beq.n	caa2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    ca68:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ca6a:	7813      	ldrb	r3, [r2, #0]
    ca6c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    ca6e:	1c51      	adds	r1, r2, #1
    ca70:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    ca72:	7969      	ldrb	r1, [r5, #5]
    ca74:	2901      	cmp	r1, #1
    ca76:	d00e      	beq.n	ca96 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    ca78:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    ca7a:	05db      	lsls	r3, r3, #23
    ca7c:	0ddb      	lsrs	r3, r3, #23
    ca7e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    ca80:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    ca82:	3b01      	subs	r3, #1
    ca84:	b29b      	uxth	r3, r3
    ca86:	85eb      	strh	r3, [r5, #46]	; 0x2e
    ca88:	2b00      	cmp	r3, #0
    ca8a:	d10c      	bne.n	caa6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    ca8c:	3301      	adds	r3, #1
    ca8e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    ca90:	3301      	adds	r3, #1
    ca92:	75a3      	strb	r3, [r4, #22]
    ca94:	e007      	b.n	caa6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    ca96:	7851      	ldrb	r1, [r2, #1]
    ca98:	0209      	lsls	r1, r1, #8
    ca9a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    ca9c:	3202      	adds	r2, #2
    ca9e:	62aa      	str	r2, [r5, #40]	; 0x28
    caa0:	e7eb      	b.n	ca7a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    caa2:	2301      	movs	r3, #1
    caa4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    caa6:	07b3      	lsls	r3, r6, #30
    caa8:	d506      	bpl.n	cab8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    caaa:	2302      	movs	r3, #2
    caac:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    caae:	2200      	movs	r2, #0
    cab0:	3331      	adds	r3, #49	; 0x31
    cab2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    cab4:	07fb      	lsls	r3, r7, #31
    cab6:	d41a      	bmi.n	caee <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    cab8:	0773      	lsls	r3, r6, #29
    caba:	d565      	bpl.n	cb88 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    cabc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    cabe:	b29b      	uxth	r3, r3
    cac0:	2b00      	cmp	r3, #0
    cac2:	d05f      	beq.n	cb84 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    cac4:	8b63      	ldrh	r3, [r4, #26]
    cac6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    cac8:	071a      	lsls	r2, r3, #28
    caca:	d414      	bmi.n	caf6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    cacc:	223f      	movs	r2, #63	; 0x3f
    cace:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    cad0:	2b00      	cmp	r3, #0
    cad2:	d034      	beq.n	cb3e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    cad4:	079a      	lsls	r2, r3, #30
    cad6:	d511      	bpl.n	cafc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    cad8:	221a      	movs	r2, #26
    cada:	2332      	movs	r3, #50	; 0x32
    cadc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    cade:	3b30      	subs	r3, #48	; 0x30
    cae0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    cae2:	077b      	lsls	r3, r7, #29
    cae4:	d550      	bpl.n	cb88 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    cae6:	0028      	movs	r0, r5
    cae8:	696b      	ldr	r3, [r5, #20]
    caea:	4798      	blx	r3
    caec:	e04c      	b.n	cb88 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    caee:	0028      	movs	r0, r5
    caf0:	68eb      	ldr	r3, [r5, #12]
    caf2:	4798      	blx	r3
    caf4:	e7e0      	b.n	cab8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    caf6:	2237      	movs	r2, #55	; 0x37
    caf8:	4013      	ands	r3, r2
    cafa:	e7e9      	b.n	cad0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    cafc:	075a      	lsls	r2, r3, #29
    cafe:	d505      	bpl.n	cb0c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    cb00:	221e      	movs	r2, #30
    cb02:	2332      	movs	r3, #50	; 0x32
    cb04:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    cb06:	3b2e      	subs	r3, #46	; 0x2e
    cb08:	8363      	strh	r3, [r4, #26]
    cb0a:	e7ea      	b.n	cae2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    cb0c:	07da      	lsls	r2, r3, #31
    cb0e:	d505      	bpl.n	cb1c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    cb10:	2213      	movs	r2, #19
    cb12:	2332      	movs	r3, #50	; 0x32
    cb14:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    cb16:	3b31      	subs	r3, #49	; 0x31
    cb18:	8363      	strh	r3, [r4, #26]
    cb1a:	e7e2      	b.n	cae2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    cb1c:	06da      	lsls	r2, r3, #27
    cb1e:	d505      	bpl.n	cb2c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    cb20:	2242      	movs	r2, #66	; 0x42
    cb22:	2332      	movs	r3, #50	; 0x32
    cb24:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    cb26:	3b22      	subs	r3, #34	; 0x22
    cb28:	8363      	strh	r3, [r4, #26]
    cb2a:	e7da      	b.n	cae2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    cb2c:	2220      	movs	r2, #32
    cb2e:	421a      	tst	r2, r3
    cb30:	d0d7      	beq.n	cae2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    cb32:	3221      	adds	r2, #33	; 0x21
    cb34:	2332      	movs	r3, #50	; 0x32
    cb36:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    cb38:	3b12      	subs	r3, #18
    cb3a:	8363      	strh	r3, [r4, #26]
    cb3c:	e7d1      	b.n	cae2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    cb3e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    cb40:	05db      	lsls	r3, r3, #23
    cb42:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    cb44:	b2da      	uxtb	r2, r3
    cb46:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cb48:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    cb4a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    cb4c:	1c51      	adds	r1, r2, #1
    cb4e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    cb50:	7969      	ldrb	r1, [r5, #5]
    cb52:	2901      	cmp	r1, #1
    cb54:	d010      	beq.n	cb78 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    cb56:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    cb58:	3b01      	subs	r3, #1
    cb5a:	b29b      	uxth	r3, r3
    cb5c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    cb5e:	2b00      	cmp	r3, #0
    cb60:	d112      	bne.n	cb88 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    cb62:	3304      	adds	r3, #4
    cb64:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    cb66:	2200      	movs	r2, #0
    cb68:	332e      	adds	r3, #46	; 0x2e
    cb6a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    cb6c:	07bb      	lsls	r3, r7, #30
    cb6e:	d50b      	bpl.n	cb88 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    cb70:	0028      	movs	r0, r5
    cb72:	692b      	ldr	r3, [r5, #16]
    cb74:	4798      	blx	r3
    cb76:	e007      	b.n	cb88 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    cb78:	0a1b      	lsrs	r3, r3, #8
    cb7a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    cb7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cb7e:	3301      	adds	r3, #1
    cb80:	626b      	str	r3, [r5, #36]	; 0x24
    cb82:	e7e8      	b.n	cb56 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    cb84:	2304      	movs	r3, #4
    cb86:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    cb88:	06f3      	lsls	r3, r6, #27
    cb8a:	d504      	bpl.n	cb96 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    cb8c:	2310      	movs	r3, #16
    cb8e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    cb90:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    cb92:	06fb      	lsls	r3, r7, #27
    cb94:	d40e      	bmi.n	cbb4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    cb96:	06b3      	lsls	r3, r6, #26
    cb98:	d504      	bpl.n	cba4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    cb9a:	2320      	movs	r3, #32
    cb9c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    cb9e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    cba0:	073b      	lsls	r3, r7, #28
    cba2:	d40b      	bmi.n	cbbc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    cba4:	0733      	lsls	r3, r6, #28
    cba6:	d504      	bpl.n	cbb2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    cba8:	2308      	movs	r3, #8
    cbaa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    cbac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    cbae:	06bb      	lsls	r3, r7, #26
    cbb0:	d408      	bmi.n	cbc4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    cbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    cbb4:	0028      	movs	r0, r5
    cbb6:	69eb      	ldr	r3, [r5, #28]
    cbb8:	4798      	blx	r3
    cbba:	e7ec      	b.n	cb96 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    cbbc:	0028      	movs	r0, r5
    cbbe:	69ab      	ldr	r3, [r5, #24]
    cbc0:	4798      	blx	r3
    cbc2:	e7ef      	b.n	cba4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    cbc4:	6a2b      	ldr	r3, [r5, #32]
    cbc6:	0028      	movs	r0, r5
    cbc8:	4798      	blx	r3
}
    cbca:	e7f2      	b.n	cbb2 <_usart_interrupt_handler+0x176>
    cbcc:	20000730 	.word	0x20000730

0000cbd0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    cbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbd2:	b08b      	sub	sp, #44	; 0x2c
    cbd4:	0005      	movs	r5, r0
    cbd6:	000c      	movs	r4, r1
    cbd8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    cbda:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    cbdc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    cbde:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    cbe0:	079b      	lsls	r3, r3, #30
    cbe2:	d501      	bpl.n	cbe8 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    cbe4:	b00b      	add	sp, #44	; 0x2c
    cbe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    cbe8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    cbea:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    cbec:	07db      	lsls	r3, r3, #31
    cbee:	d4f9      	bmi.n	cbe4 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    cbf0:	0008      	movs	r0, r1
    cbf2:	4b6f      	ldr	r3, [pc, #444]	; (cdb0 <spi_init+0x1e0>)
    cbf4:	4798      	blx	r3
    cbf6:	4a6f      	ldr	r2, [pc, #444]	; (cdb4 <spi_init+0x1e4>)
    cbf8:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    cbfa:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    cbfc:	2301      	movs	r3, #1
    cbfe:	40bb      	lsls	r3, r7
    cc00:	430b      	orrs	r3, r1
    cc02:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    cc04:	a909      	add	r1, sp, #36	; 0x24
    cc06:	2724      	movs	r7, #36	; 0x24
    cc08:	5df3      	ldrb	r3, [r6, r7]
    cc0a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    cc0c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    cc0e:	b2c3      	uxtb	r3, r0
    cc10:	9301      	str	r3, [sp, #4]
    cc12:	0018      	movs	r0, r3
    cc14:	4b68      	ldr	r3, [pc, #416]	; (cdb8 <spi_init+0x1e8>)
    cc16:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    cc18:	9801      	ldr	r0, [sp, #4]
    cc1a:	4b68      	ldr	r3, [pc, #416]	; (cdbc <spi_init+0x1ec>)
    cc1c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    cc1e:	5df0      	ldrb	r0, [r6, r7]
    cc20:	2100      	movs	r1, #0
    cc22:	4b67      	ldr	r3, [pc, #412]	; (cdc0 <spi_init+0x1f0>)
    cc24:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    cc26:	7833      	ldrb	r3, [r6, #0]
    cc28:	2b01      	cmp	r3, #1
    cc2a:	d03f      	beq.n	ccac <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    cc2c:	7833      	ldrb	r3, [r6, #0]
    cc2e:	2b00      	cmp	r3, #0
    cc30:	d103      	bne.n	cc3a <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    cc32:	6823      	ldr	r3, [r4, #0]
    cc34:	2208      	movs	r2, #8
    cc36:	4313      	orrs	r3, r2
    cc38:	6023      	str	r3, [r4, #0]
    cc3a:	002b      	movs	r3, r5
    cc3c:	330c      	adds	r3, #12
    cc3e:	0029      	movs	r1, r5
    cc40:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    cc42:	2200      	movs	r2, #0
    cc44:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    cc46:	428b      	cmp	r3, r1
    cc48:	d1fc      	bne.n	cc44 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    cc4a:	2300      	movs	r3, #0
    cc4c:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    cc4e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    cc50:	2400      	movs	r4, #0
    cc52:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    cc54:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    cc56:	3336      	adds	r3, #54	; 0x36
    cc58:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    cc5a:	3301      	adds	r3, #1
    cc5c:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    cc5e:	3301      	adds	r3, #1
    cc60:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    cc62:	3b35      	subs	r3, #53	; 0x35
    cc64:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    cc66:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    cc68:	6828      	ldr	r0, [r5, #0]
    cc6a:	4b51      	ldr	r3, [pc, #324]	; (cdb0 <spi_init+0x1e0>)
    cc6c:	4798      	blx	r3
    cc6e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    cc70:	4954      	ldr	r1, [pc, #336]	; (cdc4 <spi_init+0x1f4>)
    cc72:	4b55      	ldr	r3, [pc, #340]	; (cdc8 <spi_init+0x1f8>)
    cc74:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    cc76:	00bf      	lsls	r7, r7, #2
    cc78:	4b54      	ldr	r3, [pc, #336]	; (cdcc <spi_init+0x1fc>)
    cc7a:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cc7c:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    cc7e:	ab04      	add	r3, sp, #16
    cc80:	2280      	movs	r2, #128	; 0x80
    cc82:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    cc84:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    cc86:	3a7f      	subs	r2, #127	; 0x7f
    cc88:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    cc8a:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    cc8c:	7833      	ldrb	r3, [r6, #0]
    cc8e:	2b00      	cmp	r3, #0
    cc90:	d102      	bne.n	cc98 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    cc92:	2200      	movs	r2, #0
    cc94:	ab04      	add	r3, sp, #16
    cc96:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    cc98:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    cc9a:	9305      	str	r3, [sp, #20]
    cc9c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    cc9e:	9306      	str	r3, [sp, #24]
    cca0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    cca2:	9307      	str	r3, [sp, #28]
    cca4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    cca6:	9308      	str	r3, [sp, #32]
    cca8:	2400      	movs	r4, #0
    ccaa:	e00b      	b.n	ccc4 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    ccac:	6823      	ldr	r3, [r4, #0]
    ccae:	220c      	movs	r2, #12
    ccb0:	4313      	orrs	r3, r2
    ccb2:	6023      	str	r3, [r4, #0]
    ccb4:	e7ba      	b.n	cc2c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    ccb6:	0038      	movs	r0, r7
    ccb8:	4b45      	ldr	r3, [pc, #276]	; (cdd0 <spi_init+0x200>)
    ccba:	4798      	blx	r3
    ccbc:	e00a      	b.n	ccd4 <spi_init+0x104>
    ccbe:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    ccc0:	2c04      	cmp	r4, #4
    ccc2:	d010      	beq.n	cce6 <spi_init+0x116>
    ccc4:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    ccc6:	00a3      	lsls	r3, r4, #2
    ccc8:	aa02      	add	r2, sp, #8
    ccca:	200c      	movs	r0, #12
    cccc:	1812      	adds	r2, r2, r0
    ccce:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    ccd0:	2800      	cmp	r0, #0
    ccd2:	d0f0      	beq.n	ccb6 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    ccd4:	1c43      	adds	r3, r0, #1
    ccd6:	d0f2      	beq.n	ccbe <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    ccd8:	a904      	add	r1, sp, #16
    ccda:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    ccdc:	0c00      	lsrs	r0, r0, #16
    ccde:	b2c0      	uxtb	r0, r0
    cce0:	4b3c      	ldr	r3, [pc, #240]	; (cdd4 <spi_init+0x204>)
    cce2:	4798      	blx	r3
    cce4:	e7eb      	b.n	ccbe <spi_init+0xee>
	module->mode             = config->mode;
    cce6:	7833      	ldrb	r3, [r6, #0]
    cce8:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    ccea:	7c33      	ldrb	r3, [r6, #16]
    ccec:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    ccee:	7cb3      	ldrb	r3, [r6, #18]
    ccf0:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    ccf2:	7d33      	ldrb	r3, [r6, #20]
    ccf4:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    ccf6:	2200      	movs	r2, #0
    ccf8:	ab02      	add	r3, sp, #8
    ccfa:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    ccfc:	7833      	ldrb	r3, [r6, #0]
    ccfe:	2b01      	cmp	r3, #1
    cd00:	d012      	beq.n	cd28 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    cd02:	7833      	ldrb	r3, [r6, #0]
    cd04:	2b00      	cmp	r3, #0
    cd06:	d126      	bne.n	cd56 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    cd08:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    cd0a:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    cd0e:	7ff1      	ldrb	r1, [r6, #31]
    cd10:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    cd12:	7fb4      	ldrb	r4, [r6, #30]
    cd14:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    cd16:	4319      	orrs	r1, r3
    cd18:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    cd1a:	2320      	movs	r3, #32
    cd1c:	5cf3      	ldrb	r3, [r6, r3]
    cd1e:	2b00      	cmp	r3, #0
    cd20:	d01b      	beq.n	cd5a <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    cd22:	2340      	movs	r3, #64	; 0x40
    cd24:	431a      	orrs	r2, r3
    cd26:	e018      	b.n	cd5a <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    cd28:	6828      	ldr	r0, [r5, #0]
    cd2a:	4b21      	ldr	r3, [pc, #132]	; (cdb0 <spi_init+0x1e0>)
    cd2c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    cd2e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    cd30:	b2c0      	uxtb	r0, r0
    cd32:	4b29      	ldr	r3, [pc, #164]	; (cdd8 <spi_init+0x208>)
    cd34:	4798      	blx	r3
    cd36:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    cd38:	ab02      	add	r3, sp, #8
    cd3a:	1d9a      	adds	r2, r3, #6
    cd3c:	69b0      	ldr	r0, [r6, #24]
    cd3e:	4b27      	ldr	r3, [pc, #156]	; (cddc <spi_init+0x20c>)
    cd40:	4798      	blx	r3
    cd42:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    cd44:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    cd46:	2b00      	cmp	r3, #0
    cd48:	d000      	beq.n	cd4c <spi_init+0x17c>
    cd4a:	e74b      	b.n	cbe4 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    cd4c:	ab02      	add	r3, sp, #8
    cd4e:	3306      	adds	r3, #6
    cd50:	781b      	ldrb	r3, [r3, #0]
    cd52:	733b      	strb	r3, [r7, #12]
    cd54:	e7d5      	b.n	cd02 <spi_init+0x132>
	uint32_t ctrlb = 0;
    cd56:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    cd58:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    cd5a:	6873      	ldr	r3, [r6, #4]
    cd5c:	68b1      	ldr	r1, [r6, #8]
    cd5e:	430b      	orrs	r3, r1
    cd60:	68f1      	ldr	r1, [r6, #12]
    cd62:	430b      	orrs	r3, r1
    cd64:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    cd66:	7c31      	ldrb	r1, [r6, #16]
    cd68:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    cd6a:	7c71      	ldrb	r1, [r6, #17]
    cd6c:	2900      	cmp	r1, #0
    cd6e:	d103      	bne.n	cd78 <spi_init+0x1a8>
    cd70:	491b      	ldr	r1, [pc, #108]	; (cde0 <spi_init+0x210>)
    cd72:	7889      	ldrb	r1, [r1, #2]
    cd74:	0789      	lsls	r1, r1, #30
    cd76:	d501      	bpl.n	cd7c <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    cd78:	2180      	movs	r1, #128	; 0x80
    cd7a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    cd7c:	7cb1      	ldrb	r1, [r6, #18]
    cd7e:	2900      	cmp	r1, #0
    cd80:	d002      	beq.n	cd88 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    cd82:	2180      	movs	r1, #128	; 0x80
    cd84:	0289      	lsls	r1, r1, #10
    cd86:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    cd88:	7cf1      	ldrb	r1, [r6, #19]
    cd8a:	2900      	cmp	r1, #0
    cd8c:	d002      	beq.n	cd94 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    cd8e:	2180      	movs	r1, #128	; 0x80
    cd90:	0089      	lsls	r1, r1, #2
    cd92:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    cd94:	7d31      	ldrb	r1, [r6, #20]
    cd96:	2900      	cmp	r1, #0
    cd98:	d002      	beq.n	cda0 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    cd9a:	2180      	movs	r1, #128	; 0x80
    cd9c:	0189      	lsls	r1, r1, #6
    cd9e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    cda0:	6839      	ldr	r1, [r7, #0]
    cda2:	430b      	orrs	r3, r1
    cda4:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    cda6:	687b      	ldr	r3, [r7, #4]
    cda8:	431a      	orrs	r2, r3
    cdaa:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    cdac:	2000      	movs	r0, #0
    cdae:	e719      	b.n	cbe4 <spi_init+0x14>
    cdb0:	0000d765 	.word	0x0000d765
    cdb4:	40000400 	.word	0x40000400
    cdb8:	0000e2d1 	.word	0x0000e2d1
    cdbc:	0000e245 	.word	0x0000e245
    cdc0:	0000d5a1 	.word	0x0000d5a1
    cdc4:	0000d205 	.word	0x0000d205
    cdc8:	0000d7a1 	.word	0x0000d7a1
    cdcc:	20000730 	.word	0x20000730
    cdd0:	0000d5ed 	.word	0x0000d5ed
    cdd4:	0000e3c9 	.word	0x0000e3c9
    cdd8:	0000e2ed 	.word	0x0000e2ed
    cddc:	0000d4e3 	.word	0x0000d4e3
    cde0:	41002000 	.word	0x41002000

0000cde4 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    cde4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cde6:	46d6      	mov	lr, sl
    cde8:	464f      	mov	r7, r9
    cdea:	b580      	push	{r7, lr}
    cdec:	b083      	sub	sp, #12
    cdee:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    cdf0:	2538      	movs	r5, #56	; 0x38
    cdf2:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    cdf4:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    cdf6:	2e05      	cmp	r6, #5
    cdf8:	d075      	beq.n	cee6 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    cdfa:	3512      	adds	r5, #18
	if (length == 0) {
    cdfc:	2a00      	cmp	r2, #0
    cdfe:	d072      	beq.n	cee6 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    ce00:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    ce02:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    ce04:	2c00      	cmp	r4, #0
    ce06:	d06e      	beq.n	cee6 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    ce08:	7944      	ldrb	r4, [r0, #5]
    ce0a:	2c00      	cmp	r4, #0
    ce0c:	d103      	bne.n	ce16 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ce0e:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ce10:	7e25      	ldrb	r5, [r4, #24]
    ce12:	07a9      	lsls	r1, r5, #30
    ce14:	d40a      	bmi.n	ce2c <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    ce16:	3a01      	subs	r2, #1
    ce18:	b294      	uxth	r4, r2
    ce1a:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    ce1c:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    ce1e:	2102      	movs	r1, #2
    ce20:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    ce22:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ce24:	05db      	lsls	r3, r3, #23
    ce26:	0ddb      	lsrs	r3, r3, #23
    ce28:	469a      	mov	sl, r3
    ce2a:	e037      	b.n	ce9c <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    ce2c:	2502      	movs	r5, #2
    ce2e:	7625      	strb	r5, [r4, #24]
    ce30:	e7f1      	b.n	ce16 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ce32:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ce34:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    ce36:	423b      	tst	r3, r7
    ce38:	d0fc      	beq.n	ce34 <spi_read_buffer_wait+0x50>
    ce3a:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    ce3c:	423b      	tst	r3, r7
    ce3e:	d009      	beq.n	ce54 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ce40:	4653      	mov	r3, sl
    ce42:	628b      	str	r3, [r1, #40]	; 0x28
    ce44:	e02d      	b.n	cea2 <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ce46:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    ce48:	464d      	mov	r5, r9
    ce4a:	422b      	tst	r3, r5
    ce4c:	d138      	bne.n	cec0 <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ce4e:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    ce50:	4213      	tst	r3, r2
    ce52:	d045      	beq.n	cee0 <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ce54:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ce56:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    ce58:	4213      	tst	r3, r2
    ce5a:	d0fc      	beq.n	ce56 <spi_read_buffer_wait+0x72>
    ce5c:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    ce5e:	4213      	tst	r3, r2
    ce60:	d040      	beq.n	cee4 <spi_read_buffer_wait+0x100>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ce62:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    ce64:	2500      	movs	r5, #0
    ce66:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ce68:	4213      	tst	r3, r2
    ce6a:	d002      	beq.n	ce72 <spi_read_buffer_wait+0x8e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ce6c:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    ce6e:	231e      	movs	r3, #30
    ce70:	9301      	str	r3, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ce72:	7983      	ldrb	r3, [r0, #6]
    ce74:	2b01      	cmp	r3, #1
    ce76:	d027      	beq.n	cec8 <spi_read_buffer_wait+0xe4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ce78:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    ce7a:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    ce7c:	9901      	ldr	r1, [sp, #4]
    ce7e:	2900      	cmp	r1, #0
    ce80:	d137      	bne.n	cef2 <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    ce82:	1c75      	adds	r5, r6, #1
    ce84:	b2ad      	uxth	r5, r5
    ce86:	4661      	mov	r1, ip
    ce88:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ce8a:	7981      	ldrb	r1, [r0, #6]
    ce8c:	2901      	cmp	r1, #1
    ce8e:	d01f      	beq.n	ced0 <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    ce90:	002e      	movs	r6, r5
	while (length--) {
    ce92:	3c01      	subs	r4, #1
    ce94:	b2a4      	uxth	r4, r4
    ce96:	4b18      	ldr	r3, [pc, #96]	; (cef8 <spi_read_buffer_wait+0x114>)
    ce98:	429c      	cmp	r4, r3
    ce9a:	d01f      	beq.n	cedc <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    ce9c:	7943      	ldrb	r3, [r0, #5]
    ce9e:	2b01      	cmp	r3, #1
    cea0:	d0c7      	beq.n	ce32 <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    cea2:	7943      	ldrb	r3, [r0, #5]
    cea4:	2b00      	cmp	r3, #0
    cea6:	d1d5      	bne.n	ce54 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    cea8:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ceaa:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    ceac:	4213      	tst	r3, r2
    ceae:	d1ca      	bne.n	ce46 <spi_read_buffer_wait+0x62>
    ceb0:	4b12      	ldr	r3, [pc, #72]	; (cefc <spi_read_buffer_wait+0x118>)
    ceb2:	7e0d      	ldrb	r5, [r1, #24]
    ceb4:	4215      	tst	r5, r2
    ceb6:	d1c6      	bne.n	ce46 <spi_read_buffer_wait+0x62>
    ceb8:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    ceba:	2b00      	cmp	r3, #0
    cebc:	d1f9      	bne.n	ceb2 <spi_read_buffer_wait+0xce>
    cebe:	e7c2      	b.n	ce46 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    cec0:	2302      	movs	r3, #2
    cec2:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    cec4:	2504      	movs	r5, #4
    cec6:	e00e      	b.n	cee6 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cec8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    ceca:	05db      	lsls	r3, r3, #23
    cecc:	0ddb      	lsrs	r3, r3, #23
    cece:	e7d5      	b.n	ce7c <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    ced0:	3602      	adds	r6, #2
    ced2:	b2b6      	uxth	r6, r6
    ced4:	0a1b      	lsrs	r3, r3, #8
    ced6:	4661      	mov	r1, ip
    ced8:	554b      	strb	r3, [r1, r5]
    ceda:	e7da      	b.n	ce92 <spi_read_buffer_wait+0xae>
    cedc:	9d01      	ldr	r5, [sp, #4]
    cede:	e002      	b.n	cee6 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    cee0:	2512      	movs	r5, #18
    cee2:	e000      	b.n	cee6 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    cee4:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    cee6:	0028      	movs	r0, r5
    cee8:	b003      	add	sp, #12
    ceea:	bc0c      	pop	{r2, r3}
    ceec:	4691      	mov	r9, r2
    ceee:	469a      	mov	sl, r3
    cef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cef2:	9d01      	ldr	r5, [sp, #4]
    cef4:	e7f7      	b.n	cee6 <spi_read_buffer_wait+0x102>
    cef6:	46c0      	nop			; (mov r8, r8)
    cef8:	0000ffff 	.word	0x0000ffff
    cefc:	00002710 	.word	0x00002710

0000cf00 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    cf00:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    cf02:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    cf04:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    cf06:	2c01      	cmp	r4, #1
    cf08:	d001      	beq.n	cf0e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    cf0a:	0018      	movs	r0, r3
    cf0c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    cf0e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    cf10:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    cf12:	2c00      	cmp	r4, #0
    cf14:	d1f9      	bne.n	cf0a <spi_select_slave+0xa>
		if (select) {
    cf16:	2a00      	cmp	r2, #0
    cf18:	d058      	beq.n	cfcc <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    cf1a:	784b      	ldrb	r3, [r1, #1]
    cf1c:	2b00      	cmp	r3, #0
    cf1e:	d044      	beq.n	cfaa <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cf20:	6803      	ldr	r3, [r0, #0]
    cf22:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    cf24:	07db      	lsls	r3, r3, #31
    cf26:	d410      	bmi.n	cf4a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    cf28:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    cf2a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    cf2c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    cf2e:	2900      	cmp	r1, #0
    cf30:	d104      	bne.n	cf3c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    cf32:	0953      	lsrs	r3, r2, #5
    cf34:	01db      	lsls	r3, r3, #7
    cf36:	492e      	ldr	r1, [pc, #184]	; (cff0 <spi_select_slave+0xf0>)
    cf38:	468c      	mov	ip, r1
    cf3a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    cf3c:	211f      	movs	r1, #31
    cf3e:	4011      	ands	r1, r2
    cf40:	2201      	movs	r2, #1
    cf42:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    cf44:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    cf46:	2305      	movs	r3, #5
    cf48:	e7df      	b.n	cf0a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    cf4a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    cf4c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    cf4e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    cf50:	2c00      	cmp	r4, #0
    cf52:	d104      	bne.n	cf5e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    cf54:	0953      	lsrs	r3, r2, #5
    cf56:	01db      	lsls	r3, r3, #7
    cf58:	4c25      	ldr	r4, [pc, #148]	; (cff0 <spi_select_slave+0xf0>)
    cf5a:	46a4      	mov	ip, r4
    cf5c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    cf5e:	241f      	movs	r4, #31
    cf60:	4014      	ands	r4, r2
    cf62:	2201      	movs	r2, #1
    cf64:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    cf66:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cf68:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cf6a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cf6c:	07d2      	lsls	r2, r2, #31
    cf6e:	d501      	bpl.n	cf74 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cf70:	788a      	ldrb	r2, [r1, #2]
    cf72:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    cf74:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    cf76:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    cf78:	2a00      	cmp	r2, #0
    cf7a:	d1c6      	bne.n	cf0a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    cf7c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    cf7e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cf80:	7e13      	ldrb	r3, [r2, #24]
    cf82:	420b      	tst	r3, r1
    cf84:	d0fc      	beq.n	cf80 <spi_select_slave+0x80>
    cf86:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    cf88:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    cf8a:	0749      	lsls	r1, r1, #29
    cf8c:	d5bd      	bpl.n	cf0a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cf8e:	8b53      	ldrh	r3, [r2, #26]
    cf90:	075b      	lsls	r3, r3, #29
    cf92:	d501      	bpl.n	cf98 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cf94:	2304      	movs	r3, #4
    cf96:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cf98:	7983      	ldrb	r3, [r0, #6]
    cf9a:	2b01      	cmp	r3, #1
    cf9c:	d002      	beq.n	cfa4 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cf9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    cfa0:	2300      	movs	r3, #0
    cfa2:	e7b2      	b.n	cf0a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cfa4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    cfa6:	2300      	movs	r3, #0
    cfa8:	e7af      	b.n	cf0a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    cfaa:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    cfac:	09d1      	lsrs	r1, r2, #7
		return NULL;
    cfae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    cfb0:	2900      	cmp	r1, #0
    cfb2:	d104      	bne.n	cfbe <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    cfb4:	0953      	lsrs	r3, r2, #5
    cfb6:	01db      	lsls	r3, r3, #7
    cfb8:	490d      	ldr	r1, [pc, #52]	; (cff0 <spi_select_slave+0xf0>)
    cfba:	468c      	mov	ip, r1
    cfbc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    cfbe:	211f      	movs	r1, #31
    cfc0:	4011      	ands	r1, r2
    cfc2:	2201      	movs	r2, #1
    cfc4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    cfc6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    cfc8:	2300      	movs	r3, #0
    cfca:	e79e      	b.n	cf0a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    cfcc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    cfce:	09d1      	lsrs	r1, r2, #7
		return NULL;
    cfd0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    cfd2:	2900      	cmp	r1, #0
    cfd4:	d104      	bne.n	cfe0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    cfd6:	0953      	lsrs	r3, r2, #5
    cfd8:	01db      	lsls	r3, r3, #7
    cfda:	4905      	ldr	r1, [pc, #20]	; (cff0 <spi_select_slave+0xf0>)
    cfdc:	468c      	mov	ip, r1
    cfde:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    cfe0:	211f      	movs	r1, #31
    cfe2:	4011      	ands	r1, r2
    cfe4:	2201      	movs	r2, #1
    cfe6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    cfe8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    cfea:	2300      	movs	r3, #0
    cfec:	e78d      	b.n	cf0a <spi_select_slave+0xa>
    cfee:	46c0      	nop			; (mov r8, r8)
    cff0:	41004400 	.word	0x41004400

0000cff4 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    cff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cff6:	46de      	mov	lr, fp
    cff8:	4657      	mov	r7, sl
    cffa:	464e      	mov	r6, r9
    cffc:	4645      	mov	r5, r8
    cffe:	b5e0      	push	{r5, r6, r7, lr}
    d000:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    d002:	2338      	movs	r3, #56	; 0x38
    d004:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    d006:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    d008:	2c05      	cmp	r4, #5
    d00a:	d002      	beq.n	d012 <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    d00c:	3312      	adds	r3, #18
	if (length == 0) {
    d00e:	2a00      	cmp	r2, #0
    d010:	d107      	bne.n	d022 <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    d012:	0018      	movs	r0, r3
    d014:	b003      	add	sp, #12
    d016:	bc3c      	pop	{r2, r3, r4, r5}
    d018:	4690      	mov	r8, r2
    d01a:	4699      	mov	r9, r3
    d01c:	46a2      	mov	sl, r4
    d01e:	46ab      	mov	fp, r5
    d020:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    d022:	7943      	ldrb	r3, [r0, #5]
    d024:	2b00      	cmp	r3, #0
    d026:	d103      	bne.n	d030 <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d028:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d02a:	7e1c      	ldrb	r4, [r3, #24]
    d02c:	07a4      	lsls	r4, r4, #30
    d02e:	d40a      	bmi.n	d046 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    d030:	4693      	mov	fp, r2
    d032:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    d034:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    d036:	2502      	movs	r5, #2
    d038:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    d03a:	3502      	adds	r5, #2
    d03c:	46a8      	mov	r8, r5
    d03e:	3a01      	subs	r2, #1
    d040:	b292      	uxth	r2, r2
    d042:	468a      	mov	sl, r1
    d044:	e023      	b.n	d08e <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    d046:	2402      	movs	r4, #2
    d048:	761c      	strb	r4, [r3, #24]
    d04a:	e7f1      	b.n	d030 <spi_write_buffer_wait+0x3c>
    d04c:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    d04e:	4661      	mov	r1, ip
    d050:	420d      	tst	r5, r1
    d052:	d12e      	bne.n	d0b2 <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d054:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    d056:	421d      	tst	r5, r3
    d058:	d100      	bne.n	d05c <spi_write_buffer_wait+0x68>
    d05a:	e0c2      	b.n	d1e2 <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d05c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d05e:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    d060:	421d      	tst	r5, r3
    d062:	d0fc      	beq.n	d05e <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    d064:	1c67      	adds	r7, r4, #1
    d066:	b2bf      	uxth	r7, r7
    d068:	4651      	mov	r1, sl
    d06a:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d06c:	7981      	ldrb	r1, [r0, #6]
    d06e:	2901      	cmp	r1, #1
    d070:	d023      	beq.n	d0ba <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    d072:	b2ad      	uxth	r5, r5
    d074:	003c      	movs	r4, r7
    d076:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    d078:	421f      	tst	r7, r3
    d07a:	d002      	beq.n	d082 <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d07c:	05ed      	lsls	r5, r5, #23
    d07e:	0ded      	lsrs	r5, r5, #23
    d080:	62b5      	str	r5, [r6, #40]	; 0x28
    d082:	1e55      	subs	r5, r2, #1
    d084:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    d086:	79c6      	ldrb	r6, [r0, #7]
    d088:	2e00      	cmp	r6, #0
    d08a:	d11d      	bne.n	d0c8 <spi_write_buffer_wait+0xd4>
    d08c:	002a      	movs	r2, r5
	while (length--) {
    d08e:	4d5a      	ldr	r5, [pc, #360]	; (d1f8 <spi_write_buffer_wait+0x204>)
    d090:	42aa      	cmp	r2, r5
    d092:	d070      	beq.n	d176 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    d094:	7945      	ldrb	r5, [r0, #5]
    d096:	2d00      	cmp	r5, #0
    d098:	d1e0      	bne.n	d05c <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d09a:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d09c:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    d09e:	421d      	tst	r5, r3
    d0a0:	d1d4      	bne.n	d04c <spi_write_buffer_wait+0x58>
    d0a2:	4d56      	ldr	r5, [pc, #344]	; (d1fc <spi_write_buffer_wait+0x208>)
    d0a4:	7e37      	ldrb	r7, [r6, #24]
    d0a6:	421f      	tst	r7, r3
    d0a8:	d1d0      	bne.n	d04c <spi_write_buffer_wait+0x58>
    d0aa:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    d0ac:	2d00      	cmp	r5, #0
    d0ae:	d1f9      	bne.n	d0a4 <spi_write_buffer_wait+0xb0>
    d0b0:	e7cc      	b.n	d04c <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    d0b2:	2302      	movs	r3, #2
    d0b4:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    d0b6:	3302      	adds	r3, #2
    d0b8:	e7ab      	b.n	d012 <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    d0ba:	3402      	adds	r4, #2
    d0bc:	b2a4      	uxth	r4, r4
    d0be:	4651      	mov	r1, sl
    d0c0:	5dcf      	ldrb	r7, [r1, r7]
    d0c2:	023f      	lsls	r7, r7, #8
    d0c4:	433d      	orrs	r5, r7
    d0c6:	e7d6      	b.n	d076 <spi_write_buffer_wait+0x82>
    d0c8:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    d0ca:	7945      	ldrb	r5, [r0, #5]
    d0cc:	2d00      	cmp	r5, #0
    d0ce:	d137      	bne.n	d140 <spi_write_buffer_wait+0x14c>
    d0d0:	4d4b      	ldr	r5, [pc, #300]	; (d200 <spi_write_buffer_wait+0x20c>)
    d0d2:	9101      	str	r1, [sp, #4]
    d0d4:	e012      	b.n	d0fc <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    d0d6:	3402      	adds	r4, #2
    d0d8:	b2a4      	uxth	r4, r4
    d0da:	4649      	mov	r1, r9
    d0dc:	9f01      	ldr	r7, [sp, #4]
    d0de:	5c79      	ldrb	r1, [r7, r1]
    d0e0:	0209      	lsls	r1, r1, #8
    d0e2:	9f00      	ldr	r7, [sp, #0]
    d0e4:	430f      	orrs	r7, r1
    d0e6:	e01b      	b.n	d120 <spi_write_buffer_wait+0x12c>
						length--;
    d0e8:	3a01      	subs	r2, #1
    d0ea:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    d0ec:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d0ee:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    d0f0:	4641      	mov	r1, r8
    d0f2:	420f      	tst	r7, r1
    d0f4:	d11b      	bne.n	d12e <spi_write_buffer_wait+0x13a>
    d0f6:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    d0f8:	2d00      	cmp	r5, #0
    d0fa:	d018      	beq.n	d12e <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    d0fc:	2a00      	cmp	r2, #0
    d0fe:	d0f5      	beq.n	d0ec <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d100:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d102:	7e37      	ldrb	r7, [r6, #24]
    d104:	421f      	tst	r7, r3
    d106:	d0f1      	beq.n	d0ec <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    d108:	1c67      	adds	r7, r4, #1
    d10a:	b2b9      	uxth	r1, r7
    d10c:	4689      	mov	r9, r1
    d10e:	9901      	ldr	r1, [sp, #4]
    d110:	5d09      	ldrb	r1, [r1, r4]
    d112:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d114:	7981      	ldrb	r1, [r0, #6]
    d116:	2901      	cmp	r1, #1
    d118:	d0dd      	beq.n	d0d6 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    d11a:	4669      	mov	r1, sp
    d11c:	880f      	ldrh	r7, [r1, #0]
    d11e:	464c      	mov	r4, r9
    d120:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    d122:	4219      	tst	r1, r3
    d124:	d0e0      	beq.n	d0e8 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d126:	05ff      	lsls	r7, r7, #23
    d128:	0dff      	lsrs	r7, r7, #23
    d12a:	62b7      	str	r7, [r6, #40]	; 0x28
    d12c:	e7dc      	b.n	d0e8 <spi_write_buffer_wait+0xf4>
    d12e:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d130:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    d132:	4667      	mov	r7, ip
    d134:	423d      	tst	r5, r7
    d136:	d118      	bne.n	d16a <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d138:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    d13a:	4646      	mov	r6, r8
    d13c:	4235      	tst	r5, r6
    d13e:	d052      	beq.n	d1e6 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d140:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d142:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    d144:	4647      	mov	r7, r8
    d146:	423d      	tst	r5, r7
    d148:	d0fb      	beq.n	d142 <spi_write_buffer_wait+0x14e>
    d14a:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    d14c:	423d      	tst	r5, r7
    d14e:	d007      	beq.n	d160 <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d150:	8b75      	ldrh	r5, [r6, #26]
    d152:	423d      	tst	r5, r7
    d154:	d000      	beq.n	d158 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d156:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d158:	7985      	ldrb	r5, [r0, #6]
    d15a:	2d01      	cmp	r5, #1
    d15c:	d009      	beq.n	d172 <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d15e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    d160:	465d      	mov	r5, fp
    d162:	3d01      	subs	r5, #1
    d164:	b2ad      	uxth	r5, r5
    d166:	46ab      	mov	fp, r5
    d168:	e769      	b.n	d03e <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    d16a:	2302      	movs	r3, #2
    d16c:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    d16e:	3302      	adds	r3, #2
    d170:	e74f      	b.n	d012 <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d172:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    d174:	e7f4      	b.n	d160 <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    d176:	7943      	ldrb	r3, [r0, #5]
    d178:	2b01      	cmp	r3, #1
    d17a:	d00b      	beq.n	d194 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    d17c:	2b00      	cmp	r3, #0
    d17e:	d134      	bne.n	d1ea <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    d180:	79c2      	ldrb	r2, [r0, #7]
    d182:	2a00      	cmp	r2, #0
    d184:	d100      	bne.n	d188 <spi_write_buffer_wait+0x194>
    d186:	e744      	b.n	d012 <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    d188:	2404      	movs	r4, #4
			while (flush_length) {
    d18a:	465b      	mov	r3, fp
    d18c:	465d      	mov	r5, fp
    d18e:	2b00      	cmp	r3, #0
    d190:	d119      	bne.n	d1c6 <spi_write_buffer_wait+0x1d2>
    d192:	e73e      	b.n	d012 <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d194:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    d196:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d198:	7e0b      	ldrb	r3, [r1, #24]
    d19a:	4213      	tst	r3, r2
    d19c:	d0fc      	beq.n	d198 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    d19e:	2300      	movs	r3, #0
    d1a0:	e737      	b.n	d012 <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d1a2:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    d1a4:	4223      	tst	r3, r4
    d1a6:	d022      	beq.n	d1ee <spi_write_buffer_wait+0x1fa>
    d1a8:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    d1aa:	4223      	tst	r3, r4
    d1ac:	d007      	beq.n	d1be <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d1ae:	8b4b      	ldrh	r3, [r1, #26]
    d1b0:	4223      	tst	r3, r4
    d1b2:	d000      	beq.n	d1b6 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d1b4:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d1b6:	7983      	ldrb	r3, [r0, #6]
    d1b8:	2b01      	cmp	r3, #1
    d1ba:	d010      	beq.n	d1de <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d1bc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    d1be:	3d01      	subs	r5, #1
    d1c0:	b2ad      	uxth	r5, r5
			while (flush_length) {
    d1c2:	2d00      	cmp	r5, #0
    d1c4:	d015      	beq.n	d1f2 <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d1c6:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d1c8:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    d1ca:	4223      	tst	r3, r4
    d1cc:	d1e9      	bne.n	d1a2 <spi_write_buffer_wait+0x1ae>
    d1ce:	4b0b      	ldr	r3, [pc, #44]	; (d1fc <spi_write_buffer_wait+0x208>)
    d1d0:	7e0a      	ldrb	r2, [r1, #24]
    d1d2:	4222      	tst	r2, r4
    d1d4:	d1e5      	bne.n	d1a2 <spi_write_buffer_wait+0x1ae>
    d1d6:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    d1d8:	2b00      	cmp	r3, #0
    d1da:	d1f9      	bne.n	d1d0 <spi_write_buffer_wait+0x1dc>
    d1dc:	e7e1      	b.n	d1a2 <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d1de:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    d1e0:	e7ed      	b.n	d1be <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    d1e2:	2312      	movs	r3, #18
    d1e4:	e715      	b.n	d012 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    d1e6:	2312      	movs	r3, #18
    d1e8:	e713      	b.n	d012 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    d1ea:	2300      	movs	r3, #0
    d1ec:	e711      	b.n	d012 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    d1ee:	2312      	movs	r3, #18
    d1f0:	e70f      	b.n	d012 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    d1f2:	2300      	movs	r3, #0
    d1f4:	e70d      	b.n	d012 <spi_write_buffer_wait+0x1e>
    d1f6:	46c0      	nop			; (mov r8, r8)
    d1f8:	0000ffff 	.word	0x0000ffff
    d1fc:	00002710 	.word	0x00002710
    d200:	00002711 	.word	0x00002711

0000d204 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    d204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    d206:	0080      	lsls	r0, r0, #2
    d208:	4b85      	ldr	r3, [pc, #532]	; (d420 <_spi_interrupt_handler+0x21c>)
    d20a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d20c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    d20e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    d210:	5ce3      	ldrb	r3, [r4, r3]
    d212:	2236      	movs	r2, #54	; 0x36
    d214:	5ca7      	ldrb	r7, [r4, r2]
    d216:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    d218:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    d21a:	7db5      	ldrb	r5, [r6, #22]
    d21c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    d21e:	07eb      	lsls	r3, r5, #31
    d220:	d52e      	bpl.n	d280 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    d222:	7963      	ldrb	r3, [r4, #5]
    d224:	2b01      	cmp	r3, #1
    d226:	d025      	beq.n	d274 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    d228:	2b00      	cmp	r3, #0
    d22a:	d129      	bne.n	d280 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    d22c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    d22e:	2b00      	cmp	r3, #0
    d230:	d026      	beq.n	d280 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d232:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    d234:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    d236:	7813      	ldrb	r3, [r2, #0]
    d238:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    d23a:	1c50      	adds	r0, r2, #1
    d23c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d23e:	79a0      	ldrb	r0, [r4, #6]
    d240:	2801      	cmp	r0, #1
    d242:	d100      	bne.n	d246 <_spi_interrupt_handler+0x42>
    d244:	e069      	b.n	d31a <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    d246:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    d248:	05db      	lsls	r3, r3, #23
    d24a:	0ddb      	lsrs	r3, r3, #23
    d24c:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    d24e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    d250:	3b01      	subs	r3, #1
    d252:	b29b      	uxth	r3, r3
    d254:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    d256:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    d258:	b29b      	uxth	r3, r3
    d25a:	2b00      	cmp	r3, #0
    d25c:	d110      	bne.n	d280 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    d25e:	3301      	adds	r3, #1
    d260:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    d262:	7a63      	ldrb	r3, [r4, #9]
    d264:	2b01      	cmp	r3, #1
    d266:	d10b      	bne.n	d280 <_spi_interrupt_handler+0x7c>
    d268:	79e3      	ldrb	r3, [r4, #7]
    d26a:	2b00      	cmp	r3, #0
    d26c:	d108      	bne.n	d280 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    d26e:	3302      	adds	r3, #2
    d270:	75b3      	strb	r3, [r6, #22]
    d272:	e005      	b.n	d280 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    d274:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    d276:	2b00      	cmp	r3, #0
    d278:	d03e      	beq.n	d2f8 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    d27a:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    d27c:	2b00      	cmp	r3, #0
    d27e:	d1d8      	bne.n	d232 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    d280:	076b      	lsls	r3, r5, #29
    d282:	d511      	bpl.n	d2a8 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d284:	8b73      	ldrh	r3, [r6, #26]
    d286:	075b      	lsls	r3, r3, #29
    d288:	d551      	bpl.n	d32e <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    d28a:	7a63      	ldrb	r3, [r4, #9]
    d28c:	2b01      	cmp	r3, #1
    d28e:	d008      	beq.n	d2a2 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    d290:	221e      	movs	r2, #30
    d292:	2338      	movs	r3, #56	; 0x38
    d294:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    d296:	3b35      	subs	r3, #53	; 0x35
    d298:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    d29a:	3302      	adds	r3, #2
    d29c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    d29e:	073b      	lsls	r3, r7, #28
    d2a0:	d441      	bmi.n	d326 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    d2a2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d2a4:	2304      	movs	r3, #4
    d2a6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    d2a8:	07ab      	lsls	r3, r5, #30
    d2aa:	d515      	bpl.n	d2d8 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    d2ac:	7963      	ldrb	r3, [r4, #5]
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	d10e      	bne.n	d2d0 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    d2b2:	3307      	adds	r3, #7
    d2b4:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    d2b6:	3b05      	subs	r3, #5
    d2b8:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    d2ba:	3301      	adds	r3, #1
    d2bc:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    d2be:	2300      	movs	r3, #0
    d2c0:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    d2c2:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    d2c4:	3338      	adds	r3, #56	; 0x38
    d2c6:	2200      	movs	r2, #0
    d2c8:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    d2ca:	06fb      	lsls	r3, r7, #27
    d2cc:	d500      	bpl.n	d2d0 <_spi_interrupt_handler+0xcc>
    d2ce:	e07f      	b.n	d3d0 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    d2d0:	7963      	ldrb	r3, [r4, #5]
    d2d2:	2b01      	cmp	r3, #1
    d2d4:	d100      	bne.n	d2d8 <_spi_interrupt_handler+0xd4>
    d2d6:	e07f      	b.n	d3d8 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    d2d8:	072b      	lsls	r3, r5, #28
    d2da:	d508      	bpl.n	d2ee <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    d2dc:	7963      	ldrb	r3, [r4, #5]
    d2de:	2b00      	cmp	r3, #0
    d2e0:	d105      	bne.n	d2ee <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    d2e2:	3308      	adds	r3, #8
    d2e4:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    d2e6:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    d2e8:	06bb      	lsls	r3, r7, #26
    d2ea:	d500      	bpl.n	d2ee <_spi_interrupt_handler+0xea>
    d2ec:	e08a      	b.n	d404 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    d2ee:	b26d      	sxtb	r5, r5
    d2f0:	2d00      	cmp	r5, #0
    d2f2:	da00      	bge.n	d2f6 <_spi_interrupt_handler+0xf2>
    d2f4:	e08a      	b.n	d40c <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    d2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    d2f8:	4b4a      	ldr	r3, [pc, #296]	; (d424 <_spi_interrupt_handler+0x220>)
    d2fa:	881b      	ldrh	r3, [r3, #0]
    d2fc:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    d2fe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    d300:	3b01      	subs	r3, #1
    d302:	b29b      	uxth	r3, r3
    d304:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    d306:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    d308:	b29b      	uxth	r3, r3
    d30a:	2b00      	cmp	r3, #0
    d30c:	d101      	bne.n	d312 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    d30e:	3301      	adds	r3, #1
    d310:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    d312:	7963      	ldrb	r3, [r4, #5]
		if (0
    d314:	2b01      	cmp	r3, #1
    d316:	d0b0      	beq.n	d27a <_spi_interrupt_handler+0x76>
    d318:	e786      	b.n	d228 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    d31a:	7850      	ldrb	r0, [r2, #1]
    d31c:	0200      	lsls	r0, r0, #8
    d31e:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    d320:	3202      	adds	r2, #2
    d322:	62e2      	str	r2, [r4, #44]	; 0x2c
    d324:	e790      	b.n	d248 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    d326:	0020      	movs	r0, r4
    d328:	69a3      	ldr	r3, [r4, #24]
    d32a:	4798      	blx	r3
    d32c:	e7b9      	b.n	d2a2 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    d32e:	7a63      	ldrb	r3, [r4, #9]
    d330:	2b01      	cmp	r3, #1
    d332:	d027      	beq.n	d384 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d334:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    d336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d338:	05db      	lsls	r3, r3, #23
    d33a:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    d33c:	b2da      	uxtb	r2, r3
    d33e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    d340:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    d342:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d344:	1c51      	adds	r1, r2, #1
    d346:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d348:	79a1      	ldrb	r1, [r4, #6]
    d34a:	2901      	cmp	r1, #1
    d34c:	d033      	beq.n	d3b6 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    d34e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    d350:	3b01      	subs	r3, #1
    d352:	b29b      	uxth	r3, r3
    d354:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    d356:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    d358:	b29b      	uxth	r3, r3
    d35a:	2b00      	cmp	r3, #0
    d35c:	d1a4      	bne.n	d2a8 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    d35e:	2200      	movs	r2, #0
    d360:	3338      	adds	r3, #56	; 0x38
    d362:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    d364:	3b34      	subs	r3, #52	; 0x34
    d366:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    d368:	7a63      	ldrb	r3, [r4, #9]
    d36a:	2b02      	cmp	r3, #2
    d36c:	d029      	beq.n	d3c2 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    d36e:	7a63      	ldrb	r3, [r4, #9]
    d370:	2b00      	cmp	r3, #0
    d372:	d000      	beq.n	d376 <_spi_interrupt_handler+0x172>
    d374:	e798      	b.n	d2a8 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    d376:	07bb      	lsls	r3, r7, #30
    d378:	d400      	bmi.n	d37c <_spi_interrupt_handler+0x178>
    d37a:	e795      	b.n	d2a8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    d37c:	0020      	movs	r0, r4
    d37e:	6923      	ldr	r3, [r4, #16]
    d380:	4798      	blx	r3
    d382:	e791      	b.n	d2a8 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d384:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    d386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    d388:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    d38a:	3b01      	subs	r3, #1
    d38c:	b29b      	uxth	r3, r3
    d38e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    d390:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    d392:	b29b      	uxth	r3, r3
    d394:	2b00      	cmp	r3, #0
    d396:	d000      	beq.n	d39a <_spi_interrupt_handler+0x196>
    d398:	e786      	b.n	d2a8 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    d39a:	3304      	adds	r3, #4
    d39c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    d39e:	2200      	movs	r2, #0
    d3a0:	3334      	adds	r3, #52	; 0x34
    d3a2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    d3a4:	3b35      	subs	r3, #53	; 0x35
    d3a6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    d3a8:	07fb      	lsls	r3, r7, #31
    d3aa:	d400      	bmi.n	d3ae <_spi_interrupt_handler+0x1aa>
    d3ac:	e77c      	b.n	d2a8 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    d3ae:	0020      	movs	r0, r4
    d3b0:	68e3      	ldr	r3, [r4, #12]
    d3b2:	4798      	blx	r3
    d3b4:	e778      	b.n	d2a8 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    d3b6:	0a1b      	lsrs	r3, r3, #8
    d3b8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    d3ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d3bc:	3301      	adds	r3, #1
    d3be:	62a3      	str	r3, [r4, #40]	; 0x28
    d3c0:	e7c5      	b.n	d34e <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    d3c2:	077b      	lsls	r3, r7, #29
    d3c4:	d400      	bmi.n	d3c8 <_spi_interrupt_handler+0x1c4>
    d3c6:	e76f      	b.n	d2a8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    d3c8:	0020      	movs	r0, r4
    d3ca:	6963      	ldr	r3, [r4, #20]
    d3cc:	4798      	blx	r3
    d3ce:	e76b      	b.n	d2a8 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    d3d0:	0020      	movs	r0, r4
    d3d2:	69e3      	ldr	r3, [r4, #28]
    d3d4:	4798      	blx	r3
    d3d6:	e77b      	b.n	d2d0 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    d3d8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    d3da:	2b01      	cmp	r3, #1
    d3dc:	d000      	beq.n	d3e0 <_spi_interrupt_handler+0x1dc>
    d3de:	e786      	b.n	d2ee <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    d3e0:	79e3      	ldrb	r3, [r4, #7]
    d3e2:	2b00      	cmp	r3, #0
    d3e4:	d000      	beq.n	d3e8 <_spi_interrupt_handler+0x1e4>
    d3e6:	e782      	b.n	d2ee <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    d3e8:	3302      	adds	r3, #2
    d3ea:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    d3ec:	3301      	adds	r3, #1
    d3ee:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    d3f0:	2200      	movs	r2, #0
    d3f2:	3335      	adds	r3, #53	; 0x35
    d3f4:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    d3f6:	07fb      	lsls	r3, r7, #31
    d3f8:	d400      	bmi.n	d3fc <_spi_interrupt_handler+0x1f8>
    d3fa:	e76d      	b.n	d2d8 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    d3fc:	0020      	movs	r0, r4
    d3fe:	68e3      	ldr	r3, [r4, #12]
    d400:	4798      	blx	r3
    d402:	e769      	b.n	d2d8 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    d404:	0020      	movs	r0, r4
    d406:	6a23      	ldr	r3, [r4, #32]
    d408:	4798      	blx	r3
    d40a:	e770      	b.n	d2ee <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    d40c:	2380      	movs	r3, #128	; 0x80
    d40e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    d410:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    d412:	067b      	lsls	r3, r7, #25
    d414:	d400      	bmi.n	d418 <_spi_interrupt_handler+0x214>
    d416:	e76e      	b.n	d2f6 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    d418:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d41a:	0020      	movs	r0, r4
    d41c:	4798      	blx	r3
}
    d41e:	e76a      	b.n	d2f6 <_spi_interrupt_handler+0xf2>
    d420:	20000730 	.word	0x20000730
    d424:	2000072c 	.word	0x2000072c

0000d428 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    d428:	b5f0      	push	{r4, r5, r6, r7, lr}
    d42a:	46de      	mov	lr, fp
    d42c:	4657      	mov	r7, sl
    d42e:	464e      	mov	r6, r9
    d430:	4645      	mov	r5, r8
    d432:	b5e0      	push	{r5, r6, r7, lr}
    d434:	b087      	sub	sp, #28
    d436:	4680      	mov	r8, r0
    d438:	9104      	str	r1, [sp, #16]
    d43a:	0016      	movs	r6, r2
    d43c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    d43e:	2200      	movs	r2, #0
    d440:	2300      	movs	r3, #0
    d442:	2100      	movs	r1, #0
    d444:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    d446:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    d448:	2001      	movs	r0, #1
    d44a:	0021      	movs	r1, r4
    d44c:	9600      	str	r6, [sp, #0]
    d44e:	9701      	str	r7, [sp, #4]
    d450:	465c      	mov	r4, fp
    d452:	9403      	str	r4, [sp, #12]
    d454:	4644      	mov	r4, r8
    d456:	9405      	str	r4, [sp, #20]
    d458:	e013      	b.n	d482 <long_division+0x5a>
    d45a:	2420      	movs	r4, #32
    d45c:	1a64      	subs	r4, r4, r1
    d45e:	0005      	movs	r5, r0
    d460:	40e5      	lsrs	r5, r4
    d462:	46a8      	mov	r8, r5
    d464:	e014      	b.n	d490 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    d466:	9c00      	ldr	r4, [sp, #0]
    d468:	9d01      	ldr	r5, [sp, #4]
    d46a:	1b12      	subs	r2, r2, r4
    d46c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    d46e:	465c      	mov	r4, fp
    d470:	464d      	mov	r5, r9
    d472:	432c      	orrs	r4, r5
    d474:	46a3      	mov	fp, r4
    d476:	9c03      	ldr	r4, [sp, #12]
    d478:	4645      	mov	r5, r8
    d47a:	432c      	orrs	r4, r5
    d47c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    d47e:	3901      	subs	r1, #1
    d480:	d325      	bcc.n	d4ce <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    d482:	2420      	movs	r4, #32
    d484:	4264      	negs	r4, r4
    d486:	190c      	adds	r4, r1, r4
    d488:	d4e7      	bmi.n	d45a <long_division+0x32>
    d48a:	0005      	movs	r5, r0
    d48c:	40a5      	lsls	r5, r4
    d48e:	46a8      	mov	r8, r5
    d490:	0004      	movs	r4, r0
    d492:	408c      	lsls	r4, r1
    d494:	46a1      	mov	r9, r4
		r = r << 1;
    d496:	1892      	adds	r2, r2, r2
    d498:	415b      	adcs	r3, r3
    d49a:	0014      	movs	r4, r2
    d49c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    d49e:	9e05      	ldr	r6, [sp, #20]
    d4a0:	464f      	mov	r7, r9
    d4a2:	403e      	ands	r6, r7
    d4a4:	46b4      	mov	ip, r6
    d4a6:	9e04      	ldr	r6, [sp, #16]
    d4a8:	4647      	mov	r7, r8
    d4aa:	403e      	ands	r6, r7
    d4ac:	46b2      	mov	sl, r6
    d4ae:	4666      	mov	r6, ip
    d4b0:	4657      	mov	r7, sl
    d4b2:	433e      	orrs	r6, r7
    d4b4:	d003      	beq.n	d4be <long_division+0x96>
			r |= 0x01;
    d4b6:	0006      	movs	r6, r0
    d4b8:	4326      	orrs	r6, r4
    d4ba:	0032      	movs	r2, r6
    d4bc:	002b      	movs	r3, r5
		if (r >= d) {
    d4be:	9c00      	ldr	r4, [sp, #0]
    d4c0:	9d01      	ldr	r5, [sp, #4]
    d4c2:	429d      	cmp	r5, r3
    d4c4:	d8db      	bhi.n	d47e <long_division+0x56>
    d4c6:	d1ce      	bne.n	d466 <long_division+0x3e>
    d4c8:	4294      	cmp	r4, r2
    d4ca:	d8d8      	bhi.n	d47e <long_division+0x56>
    d4cc:	e7cb      	b.n	d466 <long_division+0x3e>
    d4ce:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    d4d0:	4658      	mov	r0, fp
    d4d2:	0019      	movs	r1, r3
    d4d4:	b007      	add	sp, #28
    d4d6:	bc3c      	pop	{r2, r3, r4, r5}
    d4d8:	4690      	mov	r8, r2
    d4da:	4699      	mov	r9, r3
    d4dc:	46a2      	mov	sl, r4
    d4de:	46ab      	mov	fp, r5
    d4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d4e2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    d4e2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    d4e4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d4e6:	2340      	movs	r3, #64	; 0x40
    d4e8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    d4ea:	4281      	cmp	r1, r0
    d4ec:	d202      	bcs.n	d4f4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    d4ee:	0018      	movs	r0, r3
    d4f0:	bd10      	pop	{r4, pc}
		baud_calculated++;
    d4f2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    d4f4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    d4f6:	1c63      	adds	r3, r4, #1
    d4f8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    d4fa:	4288      	cmp	r0, r1
    d4fc:	d9f9      	bls.n	d4f2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d4fe:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    d500:	2cff      	cmp	r4, #255	; 0xff
    d502:	d8f4      	bhi.n	d4ee <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    d504:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    d506:	2300      	movs	r3, #0
    d508:	e7f1      	b.n	d4ee <_sercom_get_sync_baud_val+0xc>
	...

0000d50c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    d50c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d50e:	b083      	sub	sp, #12
    d510:	000f      	movs	r7, r1
    d512:	0016      	movs	r6, r2
    d514:	aa08      	add	r2, sp, #32
    d516:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    d518:	0004      	movs	r4, r0
    d51a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d51c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    d51e:	42bc      	cmp	r4, r7
    d520:	d902      	bls.n	d528 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    d522:	0010      	movs	r0, r2
    d524:	b003      	add	sp, #12
    d526:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    d528:	2b00      	cmp	r3, #0
    d52a:	d114      	bne.n	d556 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    d52c:	0002      	movs	r2, r0
    d52e:	0008      	movs	r0, r1
    d530:	2100      	movs	r1, #0
    d532:	4c19      	ldr	r4, [pc, #100]	; (d598 <_sercom_get_async_baud_val+0x8c>)
    d534:	47a0      	blx	r4
    d536:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    d538:	003a      	movs	r2, r7
    d53a:	2300      	movs	r3, #0
    d53c:	2000      	movs	r0, #0
    d53e:	4c17      	ldr	r4, [pc, #92]	; (d59c <_sercom_get_async_baud_val+0x90>)
    d540:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    d542:	2200      	movs	r2, #0
    d544:	2301      	movs	r3, #1
    d546:	1a12      	subs	r2, r2, r0
    d548:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    d54a:	0c12      	lsrs	r2, r2, #16
    d54c:	041b      	lsls	r3, r3, #16
    d54e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    d550:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    d552:	2200      	movs	r2, #0
    d554:	e7e5      	b.n	d522 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    d556:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    d558:	2b01      	cmp	r3, #1
    d55a:	d1f9      	bne.n	d550 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    d55c:	000a      	movs	r2, r1
    d55e:	2300      	movs	r3, #0
    d560:	2100      	movs	r1, #0
    d562:	4c0d      	ldr	r4, [pc, #52]	; (d598 <_sercom_get_async_baud_val+0x8c>)
    d564:	47a0      	blx	r4
    d566:	0002      	movs	r2, r0
    d568:	000b      	movs	r3, r1
    d56a:	9200      	str	r2, [sp, #0]
    d56c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    d56e:	0038      	movs	r0, r7
    d570:	2100      	movs	r1, #0
    d572:	4c0a      	ldr	r4, [pc, #40]	; (d59c <_sercom_get_async_baud_val+0x90>)
    d574:	47a0      	blx	r4
    d576:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    d578:	2380      	movs	r3, #128	; 0x80
    d57a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d57c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    d57e:	4298      	cmp	r0, r3
    d580:	d8cf      	bhi.n	d522 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    d582:	0f79      	lsrs	r1, r7, #29
    d584:	00f8      	lsls	r0, r7, #3
    d586:	9a00      	ldr	r2, [sp, #0]
    d588:	9b01      	ldr	r3, [sp, #4]
    d58a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    d58c:	00ea      	lsls	r2, r5, #3
    d58e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    d590:	b2d2      	uxtb	r2, r2
    d592:	0352      	lsls	r2, r2, #13
    d594:	432a      	orrs	r2, r5
    d596:	e7db      	b.n	d550 <_sercom_get_async_baud_val+0x44>
    d598:	00011c51 	.word	0x00011c51
    d59c:	0000d429 	.word	0x0000d429

0000d5a0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    d5a0:	b510      	push	{r4, lr}
    d5a2:	b082      	sub	sp, #8
    d5a4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    d5a6:	4b0e      	ldr	r3, [pc, #56]	; (d5e0 <sercom_set_gclk_generator+0x40>)
    d5a8:	781b      	ldrb	r3, [r3, #0]
    d5aa:	2b00      	cmp	r3, #0
    d5ac:	d007      	beq.n	d5be <sercom_set_gclk_generator+0x1e>
    d5ae:	2900      	cmp	r1, #0
    d5b0:	d105      	bne.n	d5be <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    d5b2:	4b0b      	ldr	r3, [pc, #44]	; (d5e0 <sercom_set_gclk_generator+0x40>)
    d5b4:	785b      	ldrb	r3, [r3, #1]
    d5b6:	4283      	cmp	r3, r0
    d5b8:	d010      	beq.n	d5dc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    d5ba:	201d      	movs	r0, #29
    d5bc:	e00c      	b.n	d5d8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    d5be:	a901      	add	r1, sp, #4
    d5c0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    d5c2:	2013      	movs	r0, #19
    d5c4:	4b07      	ldr	r3, [pc, #28]	; (d5e4 <sercom_set_gclk_generator+0x44>)
    d5c6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    d5c8:	2013      	movs	r0, #19
    d5ca:	4b07      	ldr	r3, [pc, #28]	; (d5e8 <sercom_set_gclk_generator+0x48>)
    d5cc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    d5ce:	4b04      	ldr	r3, [pc, #16]	; (d5e0 <sercom_set_gclk_generator+0x40>)
    d5d0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    d5d2:	2201      	movs	r2, #1
    d5d4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    d5d6:	2000      	movs	r0, #0
}
    d5d8:	b002      	add	sp, #8
    d5da:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    d5dc:	2000      	movs	r0, #0
    d5de:	e7fb      	b.n	d5d8 <sercom_set_gclk_generator+0x38>
    d5e0:	2000024c 	.word	0x2000024c
    d5e4:	0000e2d1 	.word	0x0000e2d1
    d5e8:	0000e245 	.word	0x0000e245

0000d5ec <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    d5ec:	4b40      	ldr	r3, [pc, #256]	; (d6f0 <_sercom_get_default_pad+0x104>)
    d5ee:	4298      	cmp	r0, r3
    d5f0:	d031      	beq.n	d656 <_sercom_get_default_pad+0x6a>
    d5f2:	d90a      	bls.n	d60a <_sercom_get_default_pad+0x1e>
    d5f4:	4b3f      	ldr	r3, [pc, #252]	; (d6f4 <_sercom_get_default_pad+0x108>)
    d5f6:	4298      	cmp	r0, r3
    d5f8:	d04d      	beq.n	d696 <_sercom_get_default_pad+0xaa>
    d5fa:	4b3f      	ldr	r3, [pc, #252]	; (d6f8 <_sercom_get_default_pad+0x10c>)
    d5fc:	4298      	cmp	r0, r3
    d5fe:	d05a      	beq.n	d6b6 <_sercom_get_default_pad+0xca>
    d600:	4b3e      	ldr	r3, [pc, #248]	; (d6fc <_sercom_get_default_pad+0x110>)
    d602:	4298      	cmp	r0, r3
    d604:	d037      	beq.n	d676 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    d606:	2000      	movs	r0, #0
}
    d608:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    d60a:	4b3d      	ldr	r3, [pc, #244]	; (d700 <_sercom_get_default_pad+0x114>)
    d60c:	4298      	cmp	r0, r3
    d60e:	d00c      	beq.n	d62a <_sercom_get_default_pad+0x3e>
    d610:	4b3c      	ldr	r3, [pc, #240]	; (d704 <_sercom_get_default_pad+0x118>)
    d612:	4298      	cmp	r0, r3
    d614:	d1f7      	bne.n	d606 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d616:	2901      	cmp	r1, #1
    d618:	d017      	beq.n	d64a <_sercom_get_default_pad+0x5e>
    d61a:	2900      	cmp	r1, #0
    d61c:	d05d      	beq.n	d6da <_sercom_get_default_pad+0xee>
    d61e:	2902      	cmp	r1, #2
    d620:	d015      	beq.n	d64e <_sercom_get_default_pad+0x62>
    d622:	2903      	cmp	r1, #3
    d624:	d015      	beq.n	d652 <_sercom_get_default_pad+0x66>
	return 0;
    d626:	2000      	movs	r0, #0
    d628:	e7ee      	b.n	d608 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d62a:	2901      	cmp	r1, #1
    d62c:	d007      	beq.n	d63e <_sercom_get_default_pad+0x52>
    d62e:	2900      	cmp	r1, #0
    d630:	d051      	beq.n	d6d6 <_sercom_get_default_pad+0xea>
    d632:	2902      	cmp	r1, #2
    d634:	d005      	beq.n	d642 <_sercom_get_default_pad+0x56>
    d636:	2903      	cmp	r1, #3
    d638:	d005      	beq.n	d646 <_sercom_get_default_pad+0x5a>
	return 0;
    d63a:	2000      	movs	r0, #0
    d63c:	e7e4      	b.n	d608 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d63e:	4832      	ldr	r0, [pc, #200]	; (d708 <_sercom_get_default_pad+0x11c>)
    d640:	e7e2      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d642:	4832      	ldr	r0, [pc, #200]	; (d70c <_sercom_get_default_pad+0x120>)
    d644:	e7e0      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d646:	4832      	ldr	r0, [pc, #200]	; (d710 <_sercom_get_default_pad+0x124>)
    d648:	e7de      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d64a:	4832      	ldr	r0, [pc, #200]	; (d714 <_sercom_get_default_pad+0x128>)
    d64c:	e7dc      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d64e:	4832      	ldr	r0, [pc, #200]	; (d718 <_sercom_get_default_pad+0x12c>)
    d650:	e7da      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d652:	4832      	ldr	r0, [pc, #200]	; (d71c <_sercom_get_default_pad+0x130>)
    d654:	e7d8      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d656:	2901      	cmp	r1, #1
    d658:	d007      	beq.n	d66a <_sercom_get_default_pad+0x7e>
    d65a:	2900      	cmp	r1, #0
    d65c:	d03f      	beq.n	d6de <_sercom_get_default_pad+0xf2>
    d65e:	2902      	cmp	r1, #2
    d660:	d005      	beq.n	d66e <_sercom_get_default_pad+0x82>
    d662:	2903      	cmp	r1, #3
    d664:	d005      	beq.n	d672 <_sercom_get_default_pad+0x86>
	return 0;
    d666:	2000      	movs	r0, #0
    d668:	e7ce      	b.n	d608 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d66a:	482d      	ldr	r0, [pc, #180]	; (d720 <_sercom_get_default_pad+0x134>)
    d66c:	e7cc      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d66e:	482d      	ldr	r0, [pc, #180]	; (d724 <_sercom_get_default_pad+0x138>)
    d670:	e7ca      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d672:	482d      	ldr	r0, [pc, #180]	; (d728 <_sercom_get_default_pad+0x13c>)
    d674:	e7c8      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d676:	2901      	cmp	r1, #1
    d678:	d007      	beq.n	d68a <_sercom_get_default_pad+0x9e>
    d67a:	2900      	cmp	r1, #0
    d67c:	d031      	beq.n	d6e2 <_sercom_get_default_pad+0xf6>
    d67e:	2902      	cmp	r1, #2
    d680:	d005      	beq.n	d68e <_sercom_get_default_pad+0xa2>
    d682:	2903      	cmp	r1, #3
    d684:	d005      	beq.n	d692 <_sercom_get_default_pad+0xa6>
	return 0;
    d686:	2000      	movs	r0, #0
    d688:	e7be      	b.n	d608 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d68a:	4828      	ldr	r0, [pc, #160]	; (d72c <_sercom_get_default_pad+0x140>)
    d68c:	e7bc      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d68e:	4828      	ldr	r0, [pc, #160]	; (d730 <_sercom_get_default_pad+0x144>)
    d690:	e7ba      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d692:	4828      	ldr	r0, [pc, #160]	; (d734 <_sercom_get_default_pad+0x148>)
    d694:	e7b8      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d696:	2901      	cmp	r1, #1
    d698:	d007      	beq.n	d6aa <_sercom_get_default_pad+0xbe>
    d69a:	2900      	cmp	r1, #0
    d69c:	d023      	beq.n	d6e6 <_sercom_get_default_pad+0xfa>
    d69e:	2902      	cmp	r1, #2
    d6a0:	d005      	beq.n	d6ae <_sercom_get_default_pad+0xc2>
    d6a2:	2903      	cmp	r1, #3
    d6a4:	d005      	beq.n	d6b2 <_sercom_get_default_pad+0xc6>
	return 0;
    d6a6:	2000      	movs	r0, #0
    d6a8:	e7ae      	b.n	d608 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d6aa:	4823      	ldr	r0, [pc, #140]	; (d738 <_sercom_get_default_pad+0x14c>)
    d6ac:	e7ac      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d6ae:	4823      	ldr	r0, [pc, #140]	; (d73c <_sercom_get_default_pad+0x150>)
    d6b0:	e7aa      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d6b2:	4823      	ldr	r0, [pc, #140]	; (d740 <_sercom_get_default_pad+0x154>)
    d6b4:	e7a8      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d6b6:	2901      	cmp	r1, #1
    d6b8:	d007      	beq.n	d6ca <_sercom_get_default_pad+0xde>
    d6ba:	2900      	cmp	r1, #0
    d6bc:	d015      	beq.n	d6ea <_sercom_get_default_pad+0xfe>
    d6be:	2902      	cmp	r1, #2
    d6c0:	d005      	beq.n	d6ce <_sercom_get_default_pad+0xe2>
    d6c2:	2903      	cmp	r1, #3
    d6c4:	d005      	beq.n	d6d2 <_sercom_get_default_pad+0xe6>
	return 0;
    d6c6:	2000      	movs	r0, #0
    d6c8:	e79e      	b.n	d608 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d6ca:	481e      	ldr	r0, [pc, #120]	; (d744 <_sercom_get_default_pad+0x158>)
    d6cc:	e79c      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d6ce:	481e      	ldr	r0, [pc, #120]	; (d748 <_sercom_get_default_pad+0x15c>)
    d6d0:	e79a      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d6d2:	481e      	ldr	r0, [pc, #120]	; (d74c <_sercom_get_default_pad+0x160>)
    d6d4:	e798      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d6d6:	481e      	ldr	r0, [pc, #120]	; (d750 <_sercom_get_default_pad+0x164>)
    d6d8:	e796      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d6da:	2003      	movs	r0, #3
    d6dc:	e794      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d6de:	481d      	ldr	r0, [pc, #116]	; (d754 <_sercom_get_default_pad+0x168>)
    d6e0:	e792      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d6e2:	481d      	ldr	r0, [pc, #116]	; (d758 <_sercom_get_default_pad+0x16c>)
    d6e4:	e790      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d6e6:	481d      	ldr	r0, [pc, #116]	; (d75c <_sercom_get_default_pad+0x170>)
    d6e8:	e78e      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d6ea:	481d      	ldr	r0, [pc, #116]	; (d760 <_sercom_get_default_pad+0x174>)
    d6ec:	e78c      	b.n	d608 <_sercom_get_default_pad+0x1c>
    d6ee:	46c0      	nop			; (mov r8, r8)
    d6f0:	42001000 	.word	0x42001000
    d6f4:	42001800 	.word	0x42001800
    d6f8:	42001c00 	.word	0x42001c00
    d6fc:	42001400 	.word	0x42001400
    d700:	42000800 	.word	0x42000800
    d704:	42000c00 	.word	0x42000c00
    d708:	00050003 	.word	0x00050003
    d70c:	00060003 	.word	0x00060003
    d710:	00070003 	.word	0x00070003
    d714:	00010003 	.word	0x00010003
    d718:	001e0003 	.word	0x001e0003
    d71c:	001f0003 	.word	0x001f0003
    d720:	00090003 	.word	0x00090003
    d724:	000a0003 	.word	0x000a0003
    d728:	000b0003 	.word	0x000b0003
    d72c:	00110003 	.word	0x00110003
    d730:	00120003 	.word	0x00120003
    d734:	00130003 	.word	0x00130003
    d738:	000d0003 	.word	0x000d0003
    d73c:	000e0003 	.word	0x000e0003
    d740:	000f0003 	.word	0x000f0003
    d744:	00170003 	.word	0x00170003
    d748:	00180003 	.word	0x00180003
    d74c:	00190003 	.word	0x00190003
    d750:	00040003 	.word	0x00040003
    d754:	00080003 	.word	0x00080003
    d758:	00100003 	.word	0x00100003
    d75c:	000c0003 	.word	0x000c0003
    d760:	00160003 	.word	0x00160003

0000d764 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    d764:	b530      	push	{r4, r5, lr}
    d766:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    d768:	4b0b      	ldr	r3, [pc, #44]	; (d798 <_sercom_get_sercom_inst_index+0x34>)
    d76a:	466a      	mov	r2, sp
    d76c:	cb32      	ldmia	r3!, {r1, r4, r5}
    d76e:	c232      	stmia	r2!, {r1, r4, r5}
    d770:	cb32      	ldmia	r3!, {r1, r4, r5}
    d772:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    d774:	9b00      	ldr	r3, [sp, #0]
    d776:	4283      	cmp	r3, r0
    d778:	d00b      	beq.n	d792 <_sercom_get_sercom_inst_index+0x2e>
    d77a:	2301      	movs	r3, #1
    d77c:	009a      	lsls	r2, r3, #2
    d77e:	4669      	mov	r1, sp
    d780:	5852      	ldr	r2, [r2, r1]
    d782:	4282      	cmp	r2, r0
    d784:	d006      	beq.n	d794 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    d786:	3301      	adds	r3, #1
    d788:	2b06      	cmp	r3, #6
    d78a:	d1f7      	bne.n	d77c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    d78c:	2000      	movs	r0, #0
}
    d78e:	b007      	add	sp, #28
    d790:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    d792:	2300      	movs	r3, #0
			return i;
    d794:	b2d8      	uxtb	r0, r3
    d796:	e7fa      	b.n	d78e <_sercom_get_sercom_inst_index+0x2a>
    d798:	00016464 	.word	0x00016464

0000d79c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    d79c:	4770      	bx	lr
	...

0000d7a0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    d7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    d7a2:	4b0a      	ldr	r3, [pc, #40]	; (d7cc <_sercom_set_handler+0x2c>)
    d7a4:	781b      	ldrb	r3, [r3, #0]
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	d10c      	bne.n	d7c4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    d7aa:	4f09      	ldr	r7, [pc, #36]	; (d7d0 <_sercom_set_handler+0x30>)
    d7ac:	4e09      	ldr	r6, [pc, #36]	; (d7d4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    d7ae:	4d0a      	ldr	r5, [pc, #40]	; (d7d8 <_sercom_set_handler+0x38>)
    d7b0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    d7b2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    d7b4:	195a      	adds	r2, r3, r5
    d7b6:	6014      	str	r4, [r2, #0]
    d7b8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    d7ba:	2b18      	cmp	r3, #24
    d7bc:	d1f9      	bne.n	d7b2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    d7be:	2201      	movs	r2, #1
    d7c0:	4b02      	ldr	r3, [pc, #8]	; (d7cc <_sercom_set_handler+0x2c>)
    d7c2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    d7c4:	0080      	lsls	r0, r0, #2
    d7c6:	4b02      	ldr	r3, [pc, #8]	; (d7d0 <_sercom_set_handler+0x30>)
    d7c8:	50c1      	str	r1, [r0, r3]
}
    d7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d7cc:	2000024e 	.word	0x2000024e
    d7d0:	20000250 	.word	0x20000250
    d7d4:	0000d79d 	.word	0x0000d79d
    d7d8:	20000730 	.word	0x20000730

0000d7dc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    d7dc:	b500      	push	{lr}
    d7de:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    d7e0:	2309      	movs	r3, #9
    d7e2:	466a      	mov	r2, sp
    d7e4:	7013      	strb	r3, [r2, #0]
    d7e6:	3301      	adds	r3, #1
    d7e8:	7053      	strb	r3, [r2, #1]
    d7ea:	3301      	adds	r3, #1
    d7ec:	7093      	strb	r3, [r2, #2]
    d7ee:	3301      	adds	r3, #1
    d7f0:	70d3      	strb	r3, [r2, #3]
    d7f2:	3301      	adds	r3, #1
    d7f4:	7113      	strb	r3, [r2, #4]
    d7f6:	3301      	adds	r3, #1
    d7f8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    d7fa:	4b03      	ldr	r3, [pc, #12]	; (d808 <_sercom_get_interrupt_vector+0x2c>)
    d7fc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    d7fe:	466b      	mov	r3, sp
    d800:	5618      	ldrsb	r0, [r3, r0]
}
    d802:	b003      	add	sp, #12
    d804:	bd00      	pop	{pc}
    d806:	46c0      	nop			; (mov r8, r8)
    d808:	0000d765 	.word	0x0000d765

0000d80c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    d80c:	b510      	push	{r4, lr}
    d80e:	4b02      	ldr	r3, [pc, #8]	; (d818 <SERCOM0_Handler+0xc>)
    d810:	681b      	ldr	r3, [r3, #0]
    d812:	2000      	movs	r0, #0
    d814:	4798      	blx	r3
    d816:	bd10      	pop	{r4, pc}
    d818:	20000250 	.word	0x20000250

0000d81c <SERCOM1_Handler>:
    d81c:	b510      	push	{r4, lr}
    d81e:	4b02      	ldr	r3, [pc, #8]	; (d828 <SERCOM1_Handler+0xc>)
    d820:	685b      	ldr	r3, [r3, #4]
    d822:	2001      	movs	r0, #1
    d824:	4798      	blx	r3
    d826:	bd10      	pop	{r4, pc}
    d828:	20000250 	.word	0x20000250

0000d82c <SERCOM2_Handler>:
    d82c:	b510      	push	{r4, lr}
    d82e:	4b02      	ldr	r3, [pc, #8]	; (d838 <SERCOM2_Handler+0xc>)
    d830:	689b      	ldr	r3, [r3, #8]
    d832:	2002      	movs	r0, #2
    d834:	4798      	blx	r3
    d836:	bd10      	pop	{r4, pc}
    d838:	20000250 	.word	0x20000250

0000d83c <SERCOM3_Handler>:
    d83c:	b510      	push	{r4, lr}
    d83e:	4b02      	ldr	r3, [pc, #8]	; (d848 <SERCOM3_Handler+0xc>)
    d840:	68db      	ldr	r3, [r3, #12]
    d842:	2003      	movs	r0, #3
    d844:	4798      	blx	r3
    d846:	bd10      	pop	{r4, pc}
    d848:	20000250 	.word	0x20000250

0000d84c <SERCOM4_Handler>:
    d84c:	b510      	push	{r4, lr}
    d84e:	4b02      	ldr	r3, [pc, #8]	; (d858 <SERCOM4_Handler+0xc>)
    d850:	691b      	ldr	r3, [r3, #16]
    d852:	2004      	movs	r0, #4
    d854:	4798      	blx	r3
    d856:	bd10      	pop	{r4, pc}
    d858:	20000250 	.word	0x20000250

0000d85c <SERCOM5_Handler>:
    d85c:	b510      	push	{r4, lr}
    d85e:	4b02      	ldr	r3, [pc, #8]	; (d868 <SERCOM5_Handler+0xc>)
    d860:	695b      	ldr	r3, [r3, #20]
    d862:	2005      	movs	r0, #5
    d864:	4798      	blx	r3
    d866:	bd10      	pop	{r4, pc}
    d868:	20000250 	.word	0x20000250

0000d86c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    d86c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    d86e:	2000      	movs	r0, #0
    d870:	4b08      	ldr	r3, [pc, #32]	; (d894 <delay_init+0x28>)
    d872:	4798      	blx	r3
    d874:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    d876:	4c08      	ldr	r4, [pc, #32]	; (d898 <delay_init+0x2c>)
    d878:	21fa      	movs	r1, #250	; 0xfa
    d87a:	0089      	lsls	r1, r1, #2
    d87c:	47a0      	blx	r4
    d87e:	4b07      	ldr	r3, [pc, #28]	; (d89c <delay_init+0x30>)
    d880:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    d882:	4907      	ldr	r1, [pc, #28]	; (d8a0 <delay_init+0x34>)
    d884:	0028      	movs	r0, r5
    d886:	47a0      	blx	r4
    d888:	4b06      	ldr	r3, [pc, #24]	; (d8a4 <delay_init+0x38>)
    d88a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    d88c:	2205      	movs	r2, #5
    d88e:	4b06      	ldr	r3, [pc, #24]	; (d8a8 <delay_init+0x3c>)
    d890:	601a      	str	r2, [r3, #0]
}
    d892:	bd70      	pop	{r4, r5, r6, pc}
    d894:	0000e1b9 	.word	0x0000e1b9
    d898:	000118e9 	.word	0x000118e9
    d89c:	20000004 	.word	0x20000004
    d8a0:	000f4240 	.word	0x000f4240
    d8a4:	20000008 	.word	0x20000008
    d8a8:	e000e010 	.word	0xe000e010

0000d8ac <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    d8ac:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    d8ae:	4b08      	ldr	r3, [pc, #32]	; (d8d0 <delay_cycles_us+0x24>)
    d8b0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    d8b2:	4a08      	ldr	r2, [pc, #32]	; (d8d4 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    d8b4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    d8b6:	2180      	movs	r1, #128	; 0x80
    d8b8:	0249      	lsls	r1, r1, #9
	while (n--) {
    d8ba:	3801      	subs	r0, #1
    d8bc:	d307      	bcc.n	d8ce <delay_cycles_us+0x22>
	if (n > 0) {
    d8be:	2c00      	cmp	r4, #0
    d8c0:	d0fb      	beq.n	d8ba <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    d8c2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    d8c4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    d8c6:	6813      	ldr	r3, [r2, #0]
    d8c8:	420b      	tst	r3, r1
    d8ca:	d0fc      	beq.n	d8c6 <delay_cycles_us+0x1a>
    d8cc:	e7f5      	b.n	d8ba <delay_cycles_us+0xe>
	}
}
    d8ce:	bd30      	pop	{r4, r5, pc}
    d8d0:	20000008 	.word	0x20000008
    d8d4:	e000e010 	.word	0xe000e010

0000d8d8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    d8d8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    d8da:	4b08      	ldr	r3, [pc, #32]	; (d8fc <delay_cycles_ms+0x24>)
    d8dc:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    d8de:	4a08      	ldr	r2, [pc, #32]	; (d900 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    d8e0:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    d8e2:	2180      	movs	r1, #128	; 0x80
    d8e4:	0249      	lsls	r1, r1, #9
	while (n--) {
    d8e6:	3801      	subs	r0, #1
    d8e8:	d307      	bcc.n	d8fa <delay_cycles_ms+0x22>
	if (n > 0) {
    d8ea:	2c00      	cmp	r4, #0
    d8ec:	d0fb      	beq.n	d8e6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    d8ee:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    d8f0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    d8f2:	6813      	ldr	r3, [r2, #0]
    d8f4:	420b      	tst	r3, r1
    d8f6:	d0fc      	beq.n	d8f2 <delay_cycles_ms+0x1a>
    d8f8:	e7f5      	b.n	d8e6 <delay_cycles_ms+0xe>
	}
}
    d8fa:	bd30      	pop	{r4, r5, pc}
    d8fc:	20000004 	.word	0x20000004
    d900:	e000e010 	.word	0xe000e010

0000d904 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    d904:	b510      	push	{r4, lr}
			PM->APBBMASK.reg |= mask;
    d906:	4a1e      	ldr	r2, [pc, #120]	; (d980 <nvm_set_config+0x7c>)
    d908:	69d3      	ldr	r3, [r2, #28]
    d90a:	2104      	movs	r1, #4
    d90c:	430b      	orrs	r3, r1
    d90e:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    d910:	4b1c      	ldr	r3, [pc, #112]	; (d984 <nvm_set_config+0x80>)
    d912:	2220      	movs	r2, #32
    d914:	32ff      	adds	r2, #255	; 0xff
    d916:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    d918:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    d91a:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    d91c:	07d2      	lsls	r2, r2, #31
    d91e:	d401      	bmi.n	d924 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    d920:	0018      	movs	r0, r3
    d922:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    d924:	7803      	ldrb	r3, [r0, #0]
    d926:	021b      	lsls	r3, r3, #8
    d928:	22c0      	movs	r2, #192	; 0xc0
    d92a:	0092      	lsls	r2, r2, #2
    d92c:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    d92e:	7841      	ldrb	r1, [r0, #1]
    d930:	01c9      	lsls	r1, r1, #7
    d932:	22ff      	movs	r2, #255	; 0xff
    d934:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    d936:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    d938:	7881      	ldrb	r1, [r0, #2]
    d93a:	0049      	lsls	r1, r1, #1
    d93c:	221e      	movs	r2, #30
    d93e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    d940:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    d942:	78c2      	ldrb	r2, [r0, #3]
    d944:	0492      	lsls	r2, r2, #18
    d946:	2180      	movs	r1, #128	; 0x80
    d948:	02c9      	lsls	r1, r1, #11
    d94a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    d94c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    d94e:	7902      	ldrb	r2, [r0, #4]
    d950:	0412      	lsls	r2, r2, #16
    d952:	21c0      	movs	r1, #192	; 0xc0
    d954:	0289      	lsls	r1, r1, #10
    d956:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    d958:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    d95a:	4a0a      	ldr	r2, [pc, #40]	; (d984 <nvm_set_config+0x80>)
    d95c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    d95e:	6893      	ldr	r3, [r2, #8]
    d960:	035b      	lsls	r3, r3, #13
    d962:	0f5b      	lsrs	r3, r3, #29
    d964:	4908      	ldr	r1, [pc, #32]	; (d988 <nvm_set_config+0x84>)
    d966:	2408      	movs	r4, #8
    d968:	409c      	lsls	r4, r3
    d96a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    d96c:	6893      	ldr	r3, [r2, #8]
    d96e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    d970:	7843      	ldrb	r3, [r0, #1]
    d972:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    d974:	8b13      	ldrh	r3, [r2, #24]
    d976:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    d978:	0fdb      	lsrs	r3, r3, #31
    d97a:	011b      	lsls	r3, r3, #4
    d97c:	e7d0      	b.n	d920 <nvm_set_config+0x1c>
    d97e:	46c0      	nop			; (mov r8, r8)
    d980:	40000400 	.word	0x40000400
    d984:	41004000 	.word	0x41004000
    d988:	20000268 	.word	0x20000268

0000d98c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    d98c:	b530      	push	{r4, r5, lr}
    d98e:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    d990:	4a22      	ldr	r2, [pc, #136]	; (da1c <nvm_execute_command+0x90>)
    d992:	8810      	ldrh	r0, [r2, #0]
    d994:	8853      	ldrh	r3, [r2, #2]
    d996:	4343      	muls	r3, r0
    d998:	428b      	cmp	r3, r1
    d99a:	d206      	bcs.n	d9aa <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    d99c:	2280      	movs	r2, #128	; 0x80
    d99e:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    d9a0:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    d9a2:	4b1f      	ldr	r3, [pc, #124]	; (da20 <nvm_execute_command+0x94>)
    d9a4:	18cb      	adds	r3, r1, r3
    d9a6:	4293      	cmp	r3, r2
    d9a8:	d80e      	bhi.n	d9c8 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    d9aa:	4b1e      	ldr	r3, [pc, #120]	; (da24 <nvm_execute_command+0x98>)
    d9ac:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    d9ae:	2280      	movs	r2, #128	; 0x80
    d9b0:	02d2      	lsls	r2, r2, #11
    d9b2:	432a      	orrs	r2, r5
    d9b4:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    d9b6:	2220      	movs	r2, #32
    d9b8:	32ff      	adds	r2, #255	; 0xff
    d9ba:	831a      	strh	r2, [r3, #24]
    d9bc:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    d9be:	07db      	lsls	r3, r3, #31
    d9c0:	d403      	bmi.n	d9ca <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    d9c2:	4b18      	ldr	r3, [pc, #96]	; (da24 <nvm_execute_command+0x98>)
    d9c4:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    d9c6:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    d9c8:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    d9ca:	2c45      	cmp	r4, #69	; 0x45
    d9cc:	d822      	bhi.n	da14 <nvm_execute_command+0x88>
    d9ce:	00a3      	lsls	r3, r4, #2
    d9d0:	4a15      	ldr	r2, [pc, #84]	; (da28 <nvm_execute_command+0x9c>)
    d9d2:	58d3      	ldr	r3, [r2, r3]
    d9d4:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    d9d6:	4b13      	ldr	r3, [pc, #76]	; (da24 <nvm_execute_command+0x98>)
    d9d8:	8b1b      	ldrh	r3, [r3, #24]
    d9da:	05db      	lsls	r3, r3, #23
    d9dc:	d503      	bpl.n	d9e6 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    d9de:	4b11      	ldr	r3, [pc, #68]	; (da24 <nvm_execute_command+0x98>)
    d9e0:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    d9e2:	2010      	movs	r0, #16
    d9e4:	e7f0      	b.n	d9c8 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    d9e6:	0889      	lsrs	r1, r1, #2
    d9e8:	0049      	lsls	r1, r1, #1
    d9ea:	4b0e      	ldr	r3, [pc, #56]	; (da24 <nvm_execute_command+0x98>)
    d9ec:	61d9      	str	r1, [r3, #28]
			break;
    d9ee:	e003      	b.n	d9f8 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    d9f0:	0889      	lsrs	r1, r1, #2
    d9f2:	0049      	lsls	r1, r1, #1
    d9f4:	4b0b      	ldr	r3, [pc, #44]	; (da24 <nvm_execute_command+0x98>)
    d9f6:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    d9f8:	20a5      	movs	r0, #165	; 0xa5
    d9fa:	0200      	lsls	r0, r0, #8
    d9fc:	4304      	orrs	r4, r0
    d9fe:	4b09      	ldr	r3, [pc, #36]	; (da24 <nvm_execute_command+0x98>)
    da00:	801c      	strh	r4, [r3, #0]
    da02:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    da04:	2201      	movs	r2, #1
    da06:	7d0b      	ldrb	r3, [r1, #20]
    da08:	4213      	tst	r3, r2
    da0a:	d0fc      	beq.n	da06 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    da0c:	4b05      	ldr	r3, [pc, #20]	; (da24 <nvm_execute_command+0x98>)
    da0e:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    da10:	2000      	movs	r0, #0
    da12:	e7d9      	b.n	d9c8 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    da14:	4b03      	ldr	r3, [pc, #12]	; (da24 <nvm_execute_command+0x98>)
    da16:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    da18:	2017      	movs	r0, #23
    da1a:	e7d5      	b.n	d9c8 <nvm_execute_command+0x3c>
    da1c:	20000268 	.word	0x20000268
    da20:	ff7fc000 	.word	0xff7fc000
    da24:	41004000 	.word	0x41004000
    da28:	0001647c 	.word	0x0001647c

0000da2c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    da2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    da2e:	4b25      	ldr	r3, [pc, #148]	; (dac4 <nvm_write_buffer+0x98>)
    da30:	881d      	ldrh	r5, [r3, #0]
    da32:	885b      	ldrh	r3, [r3, #2]
    da34:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    da36:	2418      	movs	r4, #24
	if (destination_address >
    da38:	4283      	cmp	r3, r0
    da3a:	d201      	bcs.n	da40 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    da3c:	0020      	movs	r0, r4
    da3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    da40:	1e6b      	subs	r3, r5, #1
    da42:	4218      	tst	r0, r3
    da44:	d1fa      	bne.n	da3c <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    da46:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    da48:	4295      	cmp	r5, r2
    da4a:	d3f7      	bcc.n	da3c <nvm_write_buffer+0x10>
    da4c:	4b1e      	ldr	r3, [pc, #120]	; (dac8 <nvm_write_buffer+0x9c>)
    da4e:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    da50:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    da52:	07db      	lsls	r3, r3, #31
    da54:	d5f2      	bpl.n	da3c <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    da56:	4c1d      	ldr	r4, [pc, #116]	; (dacc <nvm_write_buffer+0xa0>)
    da58:	4b1b      	ldr	r3, [pc, #108]	; (dac8 <nvm_write_buffer+0x9c>)
    da5a:	801c      	strh	r4, [r3, #0]
    da5c:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    da5e:	2401      	movs	r4, #1
    da60:	7d2b      	ldrb	r3, [r5, #20]
    da62:	4223      	tst	r3, r4
    da64:	d0fc      	beq.n	da60 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    da66:	2420      	movs	r4, #32
    da68:	34ff      	adds	r4, #255	; 0xff
    da6a:	4b17      	ldr	r3, [pc, #92]	; (dac8 <nvm_write_buffer+0x9c>)
    da6c:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    da6e:	2a00      	cmp	r2, #0
    da70:	d022      	beq.n	dab8 <nvm_write_buffer+0x8c>
    da72:	2301      	movs	r3, #1
    da74:	0005      	movs	r5, r0
    da76:	439d      	bics	r5, r3
    da78:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    da7a:	1e57      	subs	r7, r2, #1
    da7c:	e009      	b.n	da92 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    da7e:	18ce      	adds	r6, r1, r3
    da80:	7876      	ldrb	r6, [r6, #1]
    da82:	0236      	lsls	r6, r6, #8
    da84:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    da86:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    da88:	3302      	adds	r3, #2
    da8a:	b29b      	uxth	r3, r3
    da8c:	3502      	adds	r5, #2
    da8e:	429a      	cmp	r2, r3
    da90:	d904      	bls.n	da9c <nvm_write_buffer+0x70>
		data = buffer[i];
    da92:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    da94:	42bb      	cmp	r3, r7
    da96:	dbf2      	blt.n	da7e <nvm_write_buffer+0x52>
		data = buffer[i];
    da98:	b2a4      	uxth	r4, r4
    da9a:	e7f4      	b.n	da86 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    da9c:	4b09      	ldr	r3, [pc, #36]	; (dac4 <nvm_write_buffer+0x98>)
    da9e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    daa0:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    daa2:	2b00      	cmp	r3, #0
    daa4:	d1ca      	bne.n	da3c <nvm_write_buffer+0x10>
    daa6:	2a3f      	cmp	r2, #63	; 0x3f
    daa8:	d8c8      	bhi.n	da3c <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    daaa:	2200      	movs	r2, #0
    daac:	0001      	movs	r1, r0
    daae:	2004      	movs	r0, #4
    dab0:	4b07      	ldr	r3, [pc, #28]	; (dad0 <nvm_write_buffer+0xa4>)
    dab2:	4798      	blx	r3
    dab4:	0004      	movs	r4, r0
    dab6:	e7c1      	b.n	da3c <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    dab8:	4b02      	ldr	r3, [pc, #8]	; (dac4 <nvm_write_buffer+0x98>)
    daba:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    dabc:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    dabe:	2b00      	cmp	r3, #0
    dac0:	d0f3      	beq.n	daaa <nvm_write_buffer+0x7e>
    dac2:	e7bb      	b.n	da3c <nvm_write_buffer+0x10>
    dac4:	20000268 	.word	0x20000268
    dac8:	41004000 	.word	0x41004000
    dacc:	ffffa544 	.word	0xffffa544
    dad0:	0000d98d 	.word	0x0000d98d

0000dad4 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    dad4:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    dad6:	4b18      	ldr	r3, [pc, #96]	; (db38 <nvm_read_buffer+0x64>)
    dad8:	881d      	ldrh	r5, [r3, #0]
    dada:	885b      	ldrh	r3, [r3, #2]
    dadc:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    dade:	2418      	movs	r4, #24
	if (source_address >
    dae0:	4283      	cmp	r3, r0
    dae2:	d201      	bcs.n	dae8 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    dae4:	0020      	movs	r0, r4
    dae6:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    dae8:	1e6b      	subs	r3, r5, #1
    daea:	4218      	tst	r0, r3
    daec:	d1fa      	bne.n	dae4 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    daee:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    daf0:	4295      	cmp	r5, r2
    daf2:	d3f7      	bcc.n	dae4 <nvm_read_buffer+0x10>
    daf4:	4b11      	ldr	r3, [pc, #68]	; (db3c <nvm_read_buffer+0x68>)
    daf6:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    daf8:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    dafa:	07db      	lsls	r3, r3, #31
    dafc:	d5f2      	bpl.n	dae4 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    dafe:	2420      	movs	r4, #32
    db00:	34ff      	adds	r4, #255	; 0xff
    db02:	4b0e      	ldr	r3, [pc, #56]	; (db3c <nvm_read_buffer+0x68>)
    db04:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    db06:	2a00      	cmp	r2, #0
    db08:	d014      	beq.n	db34 <nvm_read_buffer+0x60>
    db0a:	2301      	movs	r3, #1
    db0c:	4398      	bics	r0, r3
    db0e:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    db10:	1e56      	subs	r6, r2, #1
    db12:	e004      	b.n	db1e <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    db14:	3302      	adds	r3, #2
    db16:	b29b      	uxth	r3, r3
    db18:	3002      	adds	r0, #2
    db1a:	429a      	cmp	r2, r3
    db1c:	d908      	bls.n	db30 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    db1e:	8804      	ldrh	r4, [r0, #0]
    db20:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    db22:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    db24:	42b3      	cmp	r3, r6
    db26:	daf5      	bge.n	db14 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    db28:	18cd      	adds	r5, r1, r3
    db2a:	0a24      	lsrs	r4, r4, #8
    db2c:	706c      	strb	r4, [r5, #1]
    db2e:	e7f1      	b.n	db14 <nvm_read_buffer+0x40>
	return STATUS_OK;
    db30:	2400      	movs	r4, #0
    db32:	e7d7      	b.n	dae4 <nvm_read_buffer+0x10>
    db34:	2400      	movs	r4, #0
    db36:	e7d5      	b.n	dae4 <nvm_read_buffer+0x10>
    db38:	20000268 	.word	0x20000268
    db3c:	41004000 	.word	0x41004000

0000db40 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    db40:	4b13      	ldr	r3, [pc, #76]	; (db90 <nvm_erase_row+0x50>)
    db42:	881a      	ldrh	r2, [r3, #0]
    db44:	885b      	ldrh	r3, [r3, #2]
    db46:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    db48:	2118      	movs	r1, #24
	if (row_address >
    db4a:	4283      	cmp	r3, r0
    db4c:	d201      	bcs.n	db52 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    db4e:	0008      	movs	r0, r1
    db50:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    db52:	0092      	lsls	r2, r2, #2
    db54:	3a01      	subs	r2, #1
    db56:	4210      	tst	r0, r2
    db58:	d1f9      	bne.n	db4e <nvm_erase_row+0xe>
    db5a:	4b0e      	ldr	r3, [pc, #56]	; (db94 <nvm_erase_row+0x54>)
    db5c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    db5e:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    db60:	07db      	lsls	r3, r3, #31
    db62:	d5f4      	bpl.n	db4e <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    db64:	4b0b      	ldr	r3, [pc, #44]	; (db94 <nvm_erase_row+0x54>)
    db66:	2220      	movs	r2, #32
    db68:	32ff      	adds	r2, #255	; 0xff
    db6a:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    db6c:	0880      	lsrs	r0, r0, #2
    db6e:	0040      	lsls	r0, r0, #1
    db70:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    db72:	4a09      	ldr	r2, [pc, #36]	; (db98 <nvm_erase_row+0x58>)
    db74:	801a      	strh	r2, [r3, #0]
    db76:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    db78:	2201      	movs	r2, #1
    db7a:	7d0b      	ldrb	r3, [r1, #20]
    db7c:	4213      	tst	r3, r2
    db7e:	d0fc      	beq.n	db7a <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    db80:	4b04      	ldr	r3, [pc, #16]	; (db94 <nvm_erase_row+0x54>)
    db82:	8b19      	ldrh	r1, [r3, #24]
    db84:	201c      	movs	r0, #28
    db86:	4001      	ands	r1, r0
	return STATUS_OK;
    db88:	1e48      	subs	r0, r1, #1
    db8a:	4181      	sbcs	r1, r0
    db8c:	0089      	lsls	r1, r1, #2
    db8e:	e7de      	b.n	db4e <nvm_erase_row+0xe>
    db90:	20000268 	.word	0x20000268
    db94:	41004000 	.word	0x41004000
    db98:	ffffa502 	.word	0xffffa502

0000db9c <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    db9c:	4b13      	ldr	r3, [pc, #76]	; (dbec <nvm_get_parameters+0x50>)
    db9e:	2220      	movs	r2, #32
    dba0:	32ff      	adds	r2, #255	; 0xff
    dba2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    dba4:	6899      	ldr	r1, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    dba6:	034a      	lsls	r2, r1, #13
    dba8:	0f52      	lsrs	r2, r2, #29
    dbaa:	2308      	movs	r3, #8
    dbac:	4093      	lsls	r3, r2
	parameters->page_size =
    dbae:	7003      	strb	r3, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    dbb0:	8041      	strh	r1, [r0, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    dbb2:	4b0f      	ldr	r3, [pc, #60]	; (dbf0 <nvm_get_parameters+0x54>)
    dbb4:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
    dbb6:	065b      	lsls	r3, r3, #25
    dbb8:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    dbba:	2b07      	cmp	r3, #7
    dbbc:	d010      	beq.n	dbe0 <nvm_get_parameters+0x44>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    dbbe:	2206      	movs	r2, #6
    dbc0:	1ad2      	subs	r2, r2, r3
    dbc2:	2304      	movs	r3, #4
    dbc4:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
    dbc6:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    dbc8:	4b09      	ldr	r3, [pc, #36]	; (dbf0 <nvm_get_parameters+0x54>)
    dbca:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    dbcc:	2207      	movs	r2, #7
    dbce:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    dbd0:	2b07      	cmp	r3, #7
    dbd2:	d008      	beq.n	dbe6 <nvm_get_parameters+0x4a>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    dbd4:	2207      	movs	r2, #7
    dbd6:	1ad2      	subs	r2, r2, r3
    dbd8:	2304      	movs	r3, #4
    dbda:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    dbdc:	6083      	str	r3, [r0, #8]
	}
}
    dbde:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    dbe0:	2300      	movs	r3, #0
    dbe2:	6043      	str	r3, [r0, #4]
    dbe4:	e7f0      	b.n	dbc8 <nvm_get_parameters+0x2c>
		parameters->bootloader_number_of_pages = 0;
    dbe6:	2300      	movs	r3, #0
    dbe8:	6083      	str	r3, [r0, #8]
    dbea:	e7f8      	b.n	dbde <nvm_get_parameters+0x42>
    dbec:	41004000 	.word	0x41004000
    dbf0:	00804000 	.word	0x00804000

0000dbf4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    dbf4:	b500      	push	{lr}
    dbf6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    dbf8:	ab01      	add	r3, sp, #4
    dbfa:	2280      	movs	r2, #128	; 0x80
    dbfc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    dbfe:	780a      	ldrb	r2, [r1, #0]
    dc00:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    dc02:	784a      	ldrb	r2, [r1, #1]
    dc04:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    dc06:	788a      	ldrb	r2, [r1, #2]
    dc08:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    dc0a:	0019      	movs	r1, r3
    dc0c:	4b01      	ldr	r3, [pc, #4]	; (dc14 <port_pin_set_config+0x20>)
    dc0e:	4798      	blx	r3
}
    dc10:	b003      	add	sp, #12
    dc12:	bd00      	pop	{pc}
    dc14:	0000e3c9 	.word	0x0000e3c9

0000dc18 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    dc18:	4770      	bx	lr
	...

0000dc1c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    dc1c:	4b0c      	ldr	r3, [pc, #48]	; (dc50 <cpu_irq_enter_critical+0x34>)
    dc1e:	681b      	ldr	r3, [r3, #0]
    dc20:	2b00      	cmp	r3, #0
    dc22:	d106      	bne.n	dc32 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    dc24:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    dc28:	2b00      	cmp	r3, #0
    dc2a:	d007      	beq.n	dc3c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    dc2c:	2200      	movs	r2, #0
    dc2e:	4b09      	ldr	r3, [pc, #36]	; (dc54 <cpu_irq_enter_critical+0x38>)
    dc30:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    dc32:	4a07      	ldr	r2, [pc, #28]	; (dc50 <cpu_irq_enter_critical+0x34>)
    dc34:	6813      	ldr	r3, [r2, #0]
    dc36:	3301      	adds	r3, #1
    dc38:	6013      	str	r3, [r2, #0]
}
    dc3a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    dc3c:	b672      	cpsid	i
    dc3e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    dc42:	2200      	movs	r2, #0
    dc44:	4b04      	ldr	r3, [pc, #16]	; (dc58 <cpu_irq_enter_critical+0x3c>)
    dc46:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    dc48:	3201      	adds	r2, #1
    dc4a:	4b02      	ldr	r3, [pc, #8]	; (dc54 <cpu_irq_enter_critical+0x38>)
    dc4c:	701a      	strb	r2, [r3, #0]
    dc4e:	e7f0      	b.n	dc32 <cpu_irq_enter_critical+0x16>
    dc50:	20000270 	.word	0x20000270
    dc54:	20000274 	.word	0x20000274
    dc58:	2000000c 	.word	0x2000000c

0000dc5c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    dc5c:	4b08      	ldr	r3, [pc, #32]	; (dc80 <cpu_irq_leave_critical+0x24>)
    dc5e:	681a      	ldr	r2, [r3, #0]
    dc60:	3a01      	subs	r2, #1
    dc62:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    dc64:	681b      	ldr	r3, [r3, #0]
    dc66:	2b00      	cmp	r3, #0
    dc68:	d109      	bne.n	dc7e <cpu_irq_leave_critical+0x22>
    dc6a:	4b06      	ldr	r3, [pc, #24]	; (dc84 <cpu_irq_leave_critical+0x28>)
    dc6c:	781b      	ldrb	r3, [r3, #0]
    dc6e:	2b00      	cmp	r3, #0
    dc70:	d005      	beq.n	dc7e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    dc72:	2201      	movs	r2, #1
    dc74:	4b04      	ldr	r3, [pc, #16]	; (dc88 <cpu_irq_leave_critical+0x2c>)
    dc76:	701a      	strb	r2, [r3, #0]
    dc78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    dc7c:	b662      	cpsie	i
	}
}
    dc7e:	4770      	bx	lr
    dc80:	20000270 	.word	0x20000270
    dc84:	20000274 	.word	0x20000274
    dc88:	2000000c 	.word	0x2000000c

0000dc8c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    dc8c:	b510      	push	{r4, lr}
	switch (clock_source) {
    dc8e:	2808      	cmp	r0, #8
    dc90:	d803      	bhi.n	dc9a <system_clock_source_get_hz+0xe>
    dc92:	0080      	lsls	r0, r0, #2
    dc94:	4b1b      	ldr	r3, [pc, #108]	; (dd04 <system_clock_source_get_hz+0x78>)
    dc96:	581b      	ldr	r3, [r3, r0]
    dc98:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    dc9a:	2000      	movs	r0, #0
    dc9c:	e030      	b.n	dd00 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    dc9e:	4b1a      	ldr	r3, [pc, #104]	; (dd08 <system_clock_source_get_hz+0x7c>)
    dca0:	6918      	ldr	r0, [r3, #16]
    dca2:	e02d      	b.n	dd00 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    dca4:	4b19      	ldr	r3, [pc, #100]	; (dd0c <system_clock_source_get_hz+0x80>)
    dca6:	6a1b      	ldr	r3, [r3, #32]
    dca8:	059b      	lsls	r3, r3, #22
    dcaa:	0f9b      	lsrs	r3, r3, #30
    dcac:	4818      	ldr	r0, [pc, #96]	; (dd10 <system_clock_source_get_hz+0x84>)
    dcae:	40d8      	lsrs	r0, r3
    dcb0:	e026      	b.n	dd00 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    dcb2:	4b15      	ldr	r3, [pc, #84]	; (dd08 <system_clock_source_get_hz+0x7c>)
    dcb4:	6958      	ldr	r0, [r3, #20]
    dcb6:	e023      	b.n	dd00 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    dcb8:	4b13      	ldr	r3, [pc, #76]	; (dd08 <system_clock_source_get_hz+0x7c>)
    dcba:	681b      	ldr	r3, [r3, #0]
			return 0;
    dcbc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    dcbe:	079b      	lsls	r3, r3, #30
    dcc0:	d51e      	bpl.n	dd00 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    dcc2:	4912      	ldr	r1, [pc, #72]	; (dd0c <system_clock_source_get_hz+0x80>)
    dcc4:	2210      	movs	r2, #16
    dcc6:	68cb      	ldr	r3, [r1, #12]
    dcc8:	421a      	tst	r2, r3
    dcca:	d0fc      	beq.n	dcc6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    dccc:	4b0e      	ldr	r3, [pc, #56]	; (dd08 <system_clock_source_get_hz+0x7c>)
    dcce:	681b      	ldr	r3, [r3, #0]
    dcd0:	075b      	lsls	r3, r3, #29
    dcd2:	d401      	bmi.n	dcd8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    dcd4:	480f      	ldr	r0, [pc, #60]	; (dd14 <system_clock_source_get_hz+0x88>)
    dcd6:	e013      	b.n	dd00 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    dcd8:	2000      	movs	r0, #0
    dcda:	4b0f      	ldr	r3, [pc, #60]	; (dd18 <system_clock_source_get_hz+0x8c>)
    dcdc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    dcde:	4b0a      	ldr	r3, [pc, #40]	; (dd08 <system_clock_source_get_hz+0x7c>)
    dce0:	689b      	ldr	r3, [r3, #8]
    dce2:	041b      	lsls	r3, r3, #16
    dce4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    dce6:	4358      	muls	r0, r3
    dce8:	e00a      	b.n	dd00 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    dcea:	2350      	movs	r3, #80	; 0x50
    dcec:	4a07      	ldr	r2, [pc, #28]	; (dd0c <system_clock_source_get_hz+0x80>)
    dcee:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    dcf0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    dcf2:	075b      	lsls	r3, r3, #29
    dcf4:	d504      	bpl.n	dd00 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    dcf6:	4b04      	ldr	r3, [pc, #16]	; (dd08 <system_clock_source_get_hz+0x7c>)
    dcf8:	68d8      	ldr	r0, [r3, #12]
    dcfa:	e001      	b.n	dd00 <system_clock_source_get_hz+0x74>
		return 32768UL;
    dcfc:	2080      	movs	r0, #128	; 0x80
    dcfe:	0200      	lsls	r0, r0, #8
	}
}
    dd00:	bd10      	pop	{r4, pc}
    dd02:	46c0      	nop			; (mov r8, r8)
    dd04:	00016594 	.word	0x00016594
    dd08:	20000278 	.word	0x20000278
    dd0c:	40000800 	.word	0x40000800
    dd10:	007a1200 	.word	0x007a1200
    dd14:	02dc6c00 	.word	0x02dc6c00
    dd18:	0000e2ed 	.word	0x0000e2ed

0000dd1c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    dd1c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    dd1e:	490c      	ldr	r1, [pc, #48]	; (dd50 <system_clock_source_osc8m_set_config+0x34>)
    dd20:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    dd22:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    dd24:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    dd26:	7840      	ldrb	r0, [r0, #1]
    dd28:	2201      	movs	r2, #1
    dd2a:	4010      	ands	r0, r2
    dd2c:	0180      	lsls	r0, r0, #6
    dd2e:	2640      	movs	r6, #64	; 0x40
    dd30:	43b3      	bics	r3, r6
    dd32:	4303      	orrs	r3, r0
    dd34:	402a      	ands	r2, r5
    dd36:	01d2      	lsls	r2, r2, #7
    dd38:	2080      	movs	r0, #128	; 0x80
    dd3a:	4383      	bics	r3, r0
    dd3c:	4313      	orrs	r3, r2
    dd3e:	2203      	movs	r2, #3
    dd40:	4022      	ands	r2, r4
    dd42:	0212      	lsls	r2, r2, #8
    dd44:	4803      	ldr	r0, [pc, #12]	; (dd54 <system_clock_source_osc8m_set_config+0x38>)
    dd46:	4003      	ands	r3, r0
    dd48:	4313      	orrs	r3, r2
    dd4a:	620b      	str	r3, [r1, #32]
}
    dd4c:	bd70      	pop	{r4, r5, r6, pc}
    dd4e:	46c0      	nop			; (mov r8, r8)
    dd50:	40000800 	.word	0x40000800
    dd54:	fffffcff 	.word	0xfffffcff

0000dd58 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    dd58:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd5a:	46de      	mov	lr, fp
    dd5c:	4657      	mov	r7, sl
    dd5e:	464e      	mov	r6, r9
    dd60:	4645      	mov	r5, r8
    dd62:	b5e0      	push	{r5, r6, r7, lr}
    dd64:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    dd66:	4b26      	ldr	r3, [pc, #152]	; (de00 <system_clock_source_xosc32k_set_config+0xa8>)
    dd68:	469b      	mov	fp, r3
    dd6a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    dd6c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    dd6e:	7800      	ldrb	r0, [r0, #0]
    dd70:	4242      	negs	r2, r0
    dd72:	4142      	adcs	r2, r0
    dd74:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    dd76:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    dd78:	78ca      	ldrb	r2, [r1, #3]
    dd7a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    dd7c:	790a      	ldrb	r2, [r1, #4]
    dd7e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    dd80:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    dd82:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    dd84:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    dd86:	688a      	ldr	r2, [r1, #8]
    dd88:	491e      	ldr	r1, [pc, #120]	; (de04 <system_clock_source_xosc32k_set_config+0xac>)
    dd8a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    dd8c:	2101      	movs	r1, #1
    dd8e:	464a      	mov	r2, r9
    dd90:	0092      	lsls	r2, r2, #2
    dd92:	4691      	mov	r9, r2
    dd94:	2204      	movs	r2, #4
    dd96:	4393      	bics	r3, r2
    dd98:	464a      	mov	r2, r9
    dd9a:	4313      	orrs	r3, r2
    dd9c:	4642      	mov	r2, r8
    dd9e:	400a      	ands	r2, r1
    dda0:	00d2      	lsls	r2, r2, #3
    dda2:	4690      	mov	r8, r2
    dda4:	2208      	movs	r2, #8
    dda6:	4393      	bics	r3, r2
    dda8:	4642      	mov	r2, r8
    ddaa:	4313      	orrs	r3, r2
    ddac:	4662      	mov	r2, ip
    ddae:	400a      	ands	r2, r1
    ddb0:	0112      	lsls	r2, r2, #4
    ddb2:	4694      	mov	ip, r2
    ddb4:	2210      	movs	r2, #16
    ddb6:	4393      	bics	r3, r2
    ddb8:	4662      	mov	r2, ip
    ddba:	4313      	orrs	r3, r2
    ddbc:	4008      	ands	r0, r1
    ddbe:	0140      	lsls	r0, r0, #5
    ddc0:	2220      	movs	r2, #32
    ddc2:	4393      	bics	r3, r2
    ddc4:	4303      	orrs	r3, r0
    ddc6:	400f      	ands	r7, r1
    ddc8:	01bf      	lsls	r7, r7, #6
    ddca:	2040      	movs	r0, #64	; 0x40
    ddcc:	4383      	bics	r3, r0
    ddce:	433b      	orrs	r3, r7
    ddd0:	400e      	ands	r6, r1
    ddd2:	01f6      	lsls	r6, r6, #7
    ddd4:	3040      	adds	r0, #64	; 0x40
    ddd6:	4383      	bics	r3, r0
    ddd8:	4333      	orrs	r3, r6
    ddda:	3879      	subs	r0, #121	; 0x79
    dddc:	4005      	ands	r5, r0
    ddde:	022d      	lsls	r5, r5, #8
    dde0:	4809      	ldr	r0, [pc, #36]	; (de08 <system_clock_source_xosc32k_set_config+0xb0>)
    dde2:	4003      	ands	r3, r0
    dde4:	432b      	orrs	r3, r5
    dde6:	4021      	ands	r1, r4
    dde8:	0309      	lsls	r1, r1, #12
    ddea:	4808      	ldr	r0, [pc, #32]	; (de0c <system_clock_source_xosc32k_set_config+0xb4>)
    ddec:	4003      	ands	r3, r0
    ddee:	430b      	orrs	r3, r1
    ddf0:	465a      	mov	r2, fp
    ddf2:	8293      	strh	r3, [r2, #20]
}
    ddf4:	bc3c      	pop	{r2, r3, r4, r5}
    ddf6:	4690      	mov	r8, r2
    ddf8:	4699      	mov	r9, r3
    ddfa:	46a2      	mov	sl, r4
    ddfc:	46ab      	mov	fp, r5
    ddfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de00:	40000800 	.word	0x40000800
    de04:	20000278 	.word	0x20000278
    de08:	fffff8ff 	.word	0xfffff8ff
    de0c:	ffffefff 	.word	0xffffefff

0000de10 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    de10:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    de12:	7a03      	ldrb	r3, [r0, #8]
    de14:	069b      	lsls	r3, r3, #26
    de16:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    de18:	8942      	ldrh	r2, [r0, #10]
    de1a:	0592      	lsls	r2, r2, #22
    de1c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    de1e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    de20:	4918      	ldr	r1, [pc, #96]	; (de84 <system_clock_source_dfll_set_config+0x74>)
    de22:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    de24:	7983      	ldrb	r3, [r0, #6]
    de26:	79c2      	ldrb	r2, [r0, #7]
    de28:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    de2a:	8842      	ldrh	r2, [r0, #2]
    de2c:	8884      	ldrh	r4, [r0, #4]
    de2e:	4322      	orrs	r2, r4
    de30:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    de32:	7842      	ldrb	r2, [r0, #1]
    de34:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    de36:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    de38:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    de3a:	7803      	ldrb	r3, [r0, #0]
    de3c:	2b04      	cmp	r3, #4
    de3e:	d011      	beq.n	de64 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    de40:	2b20      	cmp	r3, #32
    de42:	d10e      	bne.n	de62 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    de44:	7b03      	ldrb	r3, [r0, #12]
    de46:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    de48:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    de4a:	4313      	orrs	r3, r2
    de4c:	89c2      	ldrh	r2, [r0, #14]
    de4e:	0412      	lsls	r2, r2, #16
    de50:	490d      	ldr	r1, [pc, #52]	; (de88 <system_clock_source_dfll_set_config+0x78>)
    de52:	400a      	ands	r2, r1
    de54:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    de56:	4a0b      	ldr	r2, [pc, #44]	; (de84 <system_clock_source_dfll_set_config+0x74>)
    de58:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    de5a:	6811      	ldr	r1, [r2, #0]
    de5c:	4b0b      	ldr	r3, [pc, #44]	; (de8c <system_clock_source_dfll_set_config+0x7c>)
    de5e:	430b      	orrs	r3, r1
    de60:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    de62:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    de64:	7b03      	ldrb	r3, [r0, #12]
    de66:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    de68:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    de6a:	4313      	orrs	r3, r2
    de6c:	89c2      	ldrh	r2, [r0, #14]
    de6e:	0412      	lsls	r2, r2, #16
    de70:	4905      	ldr	r1, [pc, #20]	; (de88 <system_clock_source_dfll_set_config+0x78>)
    de72:	400a      	ands	r2, r1
    de74:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    de76:	4a03      	ldr	r2, [pc, #12]	; (de84 <system_clock_source_dfll_set_config+0x74>)
    de78:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    de7a:	6813      	ldr	r3, [r2, #0]
    de7c:	2104      	movs	r1, #4
    de7e:	430b      	orrs	r3, r1
    de80:	6013      	str	r3, [r2, #0]
    de82:	e7ee      	b.n	de62 <system_clock_source_dfll_set_config+0x52>
    de84:	20000278 	.word	0x20000278
    de88:	03ff0000 	.word	0x03ff0000
    de8c:	00000424 	.word	0x00000424

0000de90 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    de90:	2808      	cmp	r0, #8
    de92:	d803      	bhi.n	de9c <system_clock_source_enable+0xc>
    de94:	0080      	lsls	r0, r0, #2
    de96:	4b25      	ldr	r3, [pc, #148]	; (df2c <system_clock_source_enable+0x9c>)
    de98:	581b      	ldr	r3, [r3, r0]
    de9a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    de9c:	2017      	movs	r0, #23
    de9e:	e044      	b.n	df2a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    dea0:	4a23      	ldr	r2, [pc, #140]	; (df30 <system_clock_source_enable+0xa0>)
    dea2:	6a13      	ldr	r3, [r2, #32]
    dea4:	2102      	movs	r1, #2
    dea6:	430b      	orrs	r3, r1
    dea8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    deaa:	2000      	movs	r0, #0
    deac:	e03d      	b.n	df2a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    deae:	4a20      	ldr	r2, [pc, #128]	; (df30 <system_clock_source_enable+0xa0>)
    deb0:	6993      	ldr	r3, [r2, #24]
    deb2:	2102      	movs	r1, #2
    deb4:	430b      	orrs	r3, r1
    deb6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    deb8:	2000      	movs	r0, #0
		break;
    deba:	e036      	b.n	df2a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    debc:	4a1c      	ldr	r2, [pc, #112]	; (df30 <system_clock_source_enable+0xa0>)
    debe:	8a13      	ldrh	r3, [r2, #16]
    dec0:	2102      	movs	r1, #2
    dec2:	430b      	orrs	r3, r1
    dec4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    dec6:	2000      	movs	r0, #0
		break;
    dec8:	e02f      	b.n	df2a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    deca:	4a19      	ldr	r2, [pc, #100]	; (df30 <system_clock_source_enable+0xa0>)
    decc:	8a93      	ldrh	r3, [r2, #20]
    dece:	2102      	movs	r1, #2
    ded0:	430b      	orrs	r3, r1
    ded2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    ded4:	2000      	movs	r0, #0
		break;
    ded6:	e028      	b.n	df2a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    ded8:	4916      	ldr	r1, [pc, #88]	; (df34 <system_clock_source_enable+0xa4>)
    deda:	680b      	ldr	r3, [r1, #0]
    dedc:	2202      	movs	r2, #2
    dede:	4313      	orrs	r3, r2
    dee0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    dee2:	4b13      	ldr	r3, [pc, #76]	; (df30 <system_clock_source_enable+0xa0>)
    dee4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    dee6:	0019      	movs	r1, r3
    dee8:	320e      	adds	r2, #14
    deea:	68cb      	ldr	r3, [r1, #12]
    deec:	421a      	tst	r2, r3
    deee:	d0fc      	beq.n	deea <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    def0:	4a10      	ldr	r2, [pc, #64]	; (df34 <system_clock_source_enable+0xa4>)
    def2:	6891      	ldr	r1, [r2, #8]
    def4:	4b0e      	ldr	r3, [pc, #56]	; (df30 <system_clock_source_enable+0xa0>)
    def6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    def8:	6852      	ldr	r2, [r2, #4]
    defa:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    defc:	2200      	movs	r2, #0
    defe:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    df00:	0019      	movs	r1, r3
    df02:	3210      	adds	r2, #16
    df04:	68cb      	ldr	r3, [r1, #12]
    df06:	421a      	tst	r2, r3
    df08:	d0fc      	beq.n	df04 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    df0a:	4b0a      	ldr	r3, [pc, #40]	; (df34 <system_clock_source_enable+0xa4>)
    df0c:	681b      	ldr	r3, [r3, #0]
    df0e:	b29b      	uxth	r3, r3
    df10:	4a07      	ldr	r2, [pc, #28]	; (df30 <system_clock_source_enable+0xa0>)
    df12:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    df14:	2000      	movs	r0, #0
    df16:	e008      	b.n	df2a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    df18:	4905      	ldr	r1, [pc, #20]	; (df30 <system_clock_source_enable+0xa0>)
    df1a:	2244      	movs	r2, #68	; 0x44
    df1c:	5c8b      	ldrb	r3, [r1, r2]
    df1e:	2002      	movs	r0, #2
    df20:	4303      	orrs	r3, r0
    df22:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    df24:	2000      	movs	r0, #0
		break;
    df26:	e000      	b.n	df2a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    df28:	2000      	movs	r0, #0
}
    df2a:	4770      	bx	lr
    df2c:	000165b8 	.word	0x000165b8
    df30:	40000800 	.word	0x40000800
    df34:	20000278 	.word	0x20000278

0000df38 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    df38:	b5f0      	push	{r4, r5, r6, r7, lr}
    df3a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    df3c:	22c2      	movs	r2, #194	; 0xc2
    df3e:	00d2      	lsls	r2, r2, #3
    df40:	4b47      	ldr	r3, [pc, #284]	; (e060 <system_clock_init+0x128>)
    df42:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    df44:	4947      	ldr	r1, [pc, #284]	; (e064 <system_clock_init+0x12c>)
    df46:	684b      	ldr	r3, [r1, #4]
    df48:	221e      	movs	r2, #30
    df4a:	4393      	bics	r3, r2
    df4c:	3a1c      	subs	r2, #28
    df4e:	4313      	orrs	r3, r2
    df50:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    df52:	ab01      	add	r3, sp, #4
    df54:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    df56:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    df58:	4d43      	ldr	r5, [pc, #268]	; (e068 <system_clock_init+0x130>)
    df5a:	b2e0      	uxtb	r0, r4
    df5c:	a901      	add	r1, sp, #4
    df5e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    df60:	3401      	adds	r4, #1
    df62:	2c25      	cmp	r4, #37	; 0x25
    df64:	d1f9      	bne.n	df5a <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    df66:	a80a      	add	r0, sp, #40	; 0x28
    df68:	2300      	movs	r3, #0
    df6a:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    df6c:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    df6e:	2280      	movs	r2, #128	; 0x80
    df70:	0212      	lsls	r2, r2, #8
    df72:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    df74:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    df76:	2201      	movs	r2, #1
    df78:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    df7a:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    df7c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    df7e:	3202      	adds	r2, #2
    df80:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    df82:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    df84:	4b39      	ldr	r3, [pc, #228]	; (e06c <system_clock_init+0x134>)
    df86:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    df88:	2005      	movs	r0, #5
    df8a:	4b39      	ldr	r3, [pc, #228]	; (e070 <system_clock_init+0x138>)
    df8c:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    df8e:	4934      	ldr	r1, [pc, #208]	; (e060 <system_clock_init+0x128>)
    df90:	2202      	movs	r2, #2
    df92:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    df94:	421a      	tst	r2, r3
    df96:	d0fc      	beq.n	df92 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    df98:	4a31      	ldr	r2, [pc, #196]	; (e060 <system_clock_init+0x128>)
    df9a:	8a93      	ldrh	r3, [r2, #20]
    df9c:	2180      	movs	r1, #128	; 0x80
    df9e:	430b      	orrs	r3, r1
    dfa0:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    dfa2:	ab05      	add	r3, sp, #20
    dfa4:	2100      	movs	r1, #0
    dfa6:	2200      	movs	r2, #0
    dfa8:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    dfaa:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    dfac:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    dfae:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    dfb0:	313f      	adds	r1, #63	; 0x3f
    dfb2:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    dfb4:	393b      	subs	r1, #59	; 0x3b
    dfb6:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    dfb8:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    dfba:	4b2e      	ldr	r3, [pc, #184]	; (e074 <system_clock_init+0x13c>)
    dfbc:	681b      	ldr	r3, [r3, #0]
    dfbe:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    dfc0:	2b3f      	cmp	r3, #63	; 0x3f
    dfc2:	d04a      	beq.n	e05a <system_clock_init+0x122>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    dfc4:	a805      	add	r0, sp, #20
    dfc6:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    dfc8:	4b2b      	ldr	r3, [pc, #172]	; (e078 <system_clock_init+0x140>)
    dfca:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    dfcc:	2307      	movs	r3, #7
    dfce:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    dfd0:	3338      	adds	r3, #56	; 0x38
    dfd2:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    dfd4:	4b29      	ldr	r3, [pc, #164]	; (e07c <system_clock_init+0x144>)
    dfd6:	4798      	blx	r3
	config->run_in_standby  = false;
    dfd8:	a804      	add	r0, sp, #16
    dfda:	2500      	movs	r5, #0
    dfdc:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    dfde:	2601      	movs	r6, #1
    dfe0:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    dfe2:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    dfe4:	4b26      	ldr	r3, [pc, #152]	; (e080 <system_clock_init+0x148>)
    dfe6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    dfe8:	2006      	movs	r0, #6
    dfea:	4f21      	ldr	r7, [pc, #132]	; (e070 <system_clock_init+0x138>)
    dfec:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    dfee:	4b25      	ldr	r3, [pc, #148]	; (e084 <system_clock_init+0x14c>)
    dff0:	4798      	blx	r3
	config->division_factor    = 1;
    dff2:	ac01      	add	r4, sp, #4
    dff4:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    dff6:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    dff8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    dffa:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    dffc:	2305      	movs	r3, #5
    dffe:	7023      	strb	r3, [r4, #0]
    e000:	0021      	movs	r1, r4
    e002:	2001      	movs	r0, #1
    e004:	4b20      	ldr	r3, [pc, #128]	; (e088 <system_clock_init+0x150>)
    e006:	4798      	blx	r3
    e008:	2001      	movs	r0, #1
    e00a:	4b20      	ldr	r3, [pc, #128]	; (e08c <system_clock_init+0x154>)
    e00c:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    e00e:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    e010:	0021      	movs	r1, r4
    e012:	2000      	movs	r0, #0
    e014:	4b14      	ldr	r3, [pc, #80]	; (e068 <system_clock_init+0x130>)
    e016:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    e018:	2000      	movs	r0, #0
    e01a:	4b1d      	ldr	r3, [pc, #116]	; (e090 <system_clock_init+0x158>)
    e01c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    e01e:	2007      	movs	r0, #7
    e020:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    e022:	490f      	ldr	r1, [pc, #60]	; (e060 <system_clock_init+0x128>)
    e024:	22d0      	movs	r2, #208	; 0xd0
    e026:	68cb      	ldr	r3, [r1, #12]
    e028:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    e02a:	2bd0      	cmp	r3, #208	; 0xd0
    e02c:	d1fb      	bne.n	e026 <system_clock_init+0xee>
	PM->CPUSEL.reg = (uint32_t)divider;
    e02e:	4a19      	ldr	r2, [pc, #100]	; (e094 <system_clock_init+0x15c>)
    e030:	2300      	movs	r3, #0
    e032:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    e034:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    e036:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    e038:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    e03a:	a901      	add	r1, sp, #4
    e03c:	2201      	movs	r2, #1
    e03e:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    e040:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    e042:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    e044:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    e046:	3307      	adds	r3, #7
    e048:	700b      	strb	r3, [r1, #0]
    e04a:	2000      	movs	r0, #0
    e04c:	4b0e      	ldr	r3, [pc, #56]	; (e088 <system_clock_init+0x150>)
    e04e:	4798      	blx	r3
    e050:	2000      	movs	r0, #0
    e052:	4b0e      	ldr	r3, [pc, #56]	; (e08c <system_clock_init+0x154>)
    e054:	4798      	blx	r3
#endif
}
    e056:	b00f      	add	sp, #60	; 0x3c
    e058:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    e05a:	3b20      	subs	r3, #32
    e05c:	e7b2      	b.n	dfc4 <system_clock_init+0x8c>
    e05e:	46c0      	nop			; (mov r8, r8)
    e060:	40000800 	.word	0x40000800
    e064:	41004000 	.word	0x41004000
    e068:	0000e2d1 	.word	0x0000e2d1
    e06c:	0000dd59 	.word	0x0000dd59
    e070:	0000de91 	.word	0x0000de91
    e074:	00806024 	.word	0x00806024
    e078:	000005b9 	.word	0x000005b9
    e07c:	0000de11 	.word	0x0000de11
    e080:	0000dd1d 	.word	0x0000dd1d
    e084:	0000e099 	.word	0x0000e099
    e088:	0000e0bd 	.word	0x0000e0bd
    e08c:	0000e175 	.word	0x0000e175
    e090:	0000e245 	.word	0x0000e245
    e094:	40000400 	.word	0x40000400

0000e098 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    e098:	4a06      	ldr	r2, [pc, #24]	; (e0b4 <system_gclk_init+0x1c>)
    e09a:	6993      	ldr	r3, [r2, #24]
    e09c:	2108      	movs	r1, #8
    e09e:	430b      	orrs	r3, r1
    e0a0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    e0a2:	2201      	movs	r2, #1
    e0a4:	4b04      	ldr	r3, [pc, #16]	; (e0b8 <system_gclk_init+0x20>)
    e0a6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    e0a8:	0019      	movs	r1, r3
    e0aa:	780b      	ldrb	r3, [r1, #0]
    e0ac:	4213      	tst	r3, r2
    e0ae:	d1fc      	bne.n	e0aa <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    e0b0:	4770      	bx	lr
    e0b2:	46c0      	nop			; (mov r8, r8)
    e0b4:	40000400 	.word	0x40000400
    e0b8:	40000c00 	.word	0x40000c00

0000e0bc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    e0bc:	b570      	push	{r4, r5, r6, lr}
    e0be:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    e0c0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    e0c2:	780d      	ldrb	r5, [r1, #0]
    e0c4:	022d      	lsls	r5, r5, #8
    e0c6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    e0c8:	784b      	ldrb	r3, [r1, #1]
    e0ca:	2b00      	cmp	r3, #0
    e0cc:	d002      	beq.n	e0d4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    e0ce:	2380      	movs	r3, #128	; 0x80
    e0d0:	02db      	lsls	r3, r3, #11
    e0d2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    e0d4:	7a4b      	ldrb	r3, [r1, #9]
    e0d6:	2b00      	cmp	r3, #0
    e0d8:	d002      	beq.n	e0e0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    e0da:	2380      	movs	r3, #128	; 0x80
    e0dc:	031b      	lsls	r3, r3, #12
    e0de:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    e0e0:	6848      	ldr	r0, [r1, #4]
    e0e2:	2801      	cmp	r0, #1
    e0e4:	d910      	bls.n	e108 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    e0e6:	1e43      	subs	r3, r0, #1
    e0e8:	4218      	tst	r0, r3
    e0ea:	d134      	bne.n	e156 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    e0ec:	2802      	cmp	r0, #2
    e0ee:	d930      	bls.n	e152 <system_gclk_gen_set_config+0x96>
    e0f0:	2302      	movs	r3, #2
    e0f2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    e0f4:	3201      	adds	r2, #1
						mask <<= 1) {
    e0f6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    e0f8:	4298      	cmp	r0, r3
    e0fa:	d8fb      	bhi.n	e0f4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    e0fc:	0212      	lsls	r2, r2, #8
    e0fe:	4332      	orrs	r2, r6
    e100:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    e102:	2380      	movs	r3, #128	; 0x80
    e104:	035b      	lsls	r3, r3, #13
    e106:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    e108:	7a0b      	ldrb	r3, [r1, #8]
    e10a:	2b00      	cmp	r3, #0
    e10c:	d002      	beq.n	e114 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    e10e:	2380      	movs	r3, #128	; 0x80
    e110:	039b      	lsls	r3, r3, #14
    e112:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    e114:	4a13      	ldr	r2, [pc, #76]	; (e164 <system_gclk_gen_set_config+0xa8>)
    e116:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    e118:	b25b      	sxtb	r3, r3
    e11a:	2b00      	cmp	r3, #0
    e11c:	dbfb      	blt.n	e116 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    e11e:	4b12      	ldr	r3, [pc, #72]	; (e168 <system_gclk_gen_set_config+0xac>)
    e120:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    e122:	4b12      	ldr	r3, [pc, #72]	; (e16c <system_gclk_gen_set_config+0xb0>)
    e124:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    e126:	4a0f      	ldr	r2, [pc, #60]	; (e164 <system_gclk_gen_set_config+0xa8>)
    e128:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    e12a:	b25b      	sxtb	r3, r3
    e12c:	2b00      	cmp	r3, #0
    e12e:	dbfb      	blt.n	e128 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    e130:	4b0c      	ldr	r3, [pc, #48]	; (e164 <system_gclk_gen_set_config+0xa8>)
    e132:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    e134:	001a      	movs	r2, r3
    e136:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    e138:	b25b      	sxtb	r3, r3
    e13a:	2b00      	cmp	r3, #0
    e13c:	dbfb      	blt.n	e136 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    e13e:	4a09      	ldr	r2, [pc, #36]	; (e164 <system_gclk_gen_set_config+0xa8>)
    e140:	6853      	ldr	r3, [r2, #4]
    e142:	2180      	movs	r1, #128	; 0x80
    e144:	0249      	lsls	r1, r1, #9
    e146:	400b      	ands	r3, r1
    e148:	431d      	orrs	r5, r3
    e14a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    e14c:	4b08      	ldr	r3, [pc, #32]	; (e170 <system_gclk_gen_set_config+0xb4>)
    e14e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    e150:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    e152:	2200      	movs	r2, #0
    e154:	e7d2      	b.n	e0fc <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    e156:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    e158:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    e15a:	2380      	movs	r3, #128	; 0x80
    e15c:	029b      	lsls	r3, r3, #10
    e15e:	431d      	orrs	r5, r3
    e160:	e7d2      	b.n	e108 <system_gclk_gen_set_config+0x4c>
    e162:	46c0      	nop			; (mov r8, r8)
    e164:	40000c00 	.word	0x40000c00
    e168:	0000dc1d 	.word	0x0000dc1d
    e16c:	40000c08 	.word	0x40000c08
    e170:	0000dc5d 	.word	0x0000dc5d

0000e174 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    e174:	b510      	push	{r4, lr}
    e176:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    e178:	4a0b      	ldr	r2, [pc, #44]	; (e1a8 <system_gclk_gen_enable+0x34>)
    e17a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    e17c:	b25b      	sxtb	r3, r3
    e17e:	2b00      	cmp	r3, #0
    e180:	dbfb      	blt.n	e17a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    e182:	4b0a      	ldr	r3, [pc, #40]	; (e1ac <system_gclk_gen_enable+0x38>)
    e184:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    e186:	4b0a      	ldr	r3, [pc, #40]	; (e1b0 <system_gclk_gen_enable+0x3c>)
    e188:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    e18a:	4a07      	ldr	r2, [pc, #28]	; (e1a8 <system_gclk_gen_enable+0x34>)
    e18c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    e18e:	b25b      	sxtb	r3, r3
    e190:	2b00      	cmp	r3, #0
    e192:	dbfb      	blt.n	e18c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    e194:	4a04      	ldr	r2, [pc, #16]	; (e1a8 <system_gclk_gen_enable+0x34>)
    e196:	6851      	ldr	r1, [r2, #4]
    e198:	2380      	movs	r3, #128	; 0x80
    e19a:	025b      	lsls	r3, r3, #9
    e19c:	430b      	orrs	r3, r1
    e19e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    e1a0:	4b04      	ldr	r3, [pc, #16]	; (e1b4 <system_gclk_gen_enable+0x40>)
    e1a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    e1a4:	bd10      	pop	{r4, pc}
    e1a6:	46c0      	nop			; (mov r8, r8)
    e1a8:	40000c00 	.word	0x40000c00
    e1ac:	0000dc1d 	.word	0x0000dc1d
    e1b0:	40000c04 	.word	0x40000c04
    e1b4:	0000dc5d 	.word	0x0000dc5d

0000e1b8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    e1b8:	b570      	push	{r4, r5, r6, lr}
    e1ba:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    e1bc:	4a1a      	ldr	r2, [pc, #104]	; (e228 <system_gclk_gen_get_hz+0x70>)
    e1be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    e1c0:	b25b      	sxtb	r3, r3
    e1c2:	2b00      	cmp	r3, #0
    e1c4:	dbfb      	blt.n	e1be <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    e1c6:	4b19      	ldr	r3, [pc, #100]	; (e22c <system_gclk_gen_get_hz+0x74>)
    e1c8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    e1ca:	4b19      	ldr	r3, [pc, #100]	; (e230 <system_gclk_gen_get_hz+0x78>)
    e1cc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    e1ce:	4a16      	ldr	r2, [pc, #88]	; (e228 <system_gclk_gen_get_hz+0x70>)
    e1d0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    e1d2:	b25b      	sxtb	r3, r3
    e1d4:	2b00      	cmp	r3, #0
    e1d6:	dbfb      	blt.n	e1d0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    e1d8:	4e13      	ldr	r6, [pc, #76]	; (e228 <system_gclk_gen_get_hz+0x70>)
    e1da:	6870      	ldr	r0, [r6, #4]
    e1dc:	04c0      	lsls	r0, r0, #19
    e1de:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    e1e0:	4b14      	ldr	r3, [pc, #80]	; (e234 <system_gclk_gen_get_hz+0x7c>)
    e1e2:	4798      	blx	r3
    e1e4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    e1e6:	4b12      	ldr	r3, [pc, #72]	; (e230 <system_gclk_gen_get_hz+0x78>)
    e1e8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    e1ea:	6876      	ldr	r6, [r6, #4]
    e1ec:	02f6      	lsls	r6, r6, #11
    e1ee:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    e1f0:	4b11      	ldr	r3, [pc, #68]	; (e238 <system_gclk_gen_get_hz+0x80>)
    e1f2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    e1f4:	4a0c      	ldr	r2, [pc, #48]	; (e228 <system_gclk_gen_get_hz+0x70>)
    e1f6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    e1f8:	b25b      	sxtb	r3, r3
    e1fa:	2b00      	cmp	r3, #0
    e1fc:	dbfb      	blt.n	e1f6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    e1fe:	4b0a      	ldr	r3, [pc, #40]	; (e228 <system_gclk_gen_get_hz+0x70>)
    e200:	689c      	ldr	r4, [r3, #8]
    e202:	0224      	lsls	r4, r4, #8
    e204:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    e206:	4b0d      	ldr	r3, [pc, #52]	; (e23c <system_gclk_gen_get_hz+0x84>)
    e208:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    e20a:	2e00      	cmp	r6, #0
    e20c:	d107      	bne.n	e21e <system_gclk_gen_get_hz+0x66>
    e20e:	2c01      	cmp	r4, #1
    e210:	d907      	bls.n	e222 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    e212:	0021      	movs	r1, r4
    e214:	0028      	movs	r0, r5
    e216:	4b0a      	ldr	r3, [pc, #40]	; (e240 <system_gclk_gen_get_hz+0x88>)
    e218:	4798      	blx	r3
    e21a:	0005      	movs	r5, r0
    e21c:	e001      	b.n	e222 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    e21e:	3401      	adds	r4, #1
    e220:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    e222:	0028      	movs	r0, r5
    e224:	bd70      	pop	{r4, r5, r6, pc}
    e226:	46c0      	nop			; (mov r8, r8)
    e228:	40000c00 	.word	0x40000c00
    e22c:	0000dc1d 	.word	0x0000dc1d
    e230:	40000c04 	.word	0x40000c04
    e234:	0000dc8d 	.word	0x0000dc8d
    e238:	40000c08 	.word	0x40000c08
    e23c:	0000dc5d 	.word	0x0000dc5d
    e240:	000118e9 	.word	0x000118e9

0000e244 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    e244:	b510      	push	{r4, lr}
    e246:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    e248:	4b06      	ldr	r3, [pc, #24]	; (e264 <system_gclk_chan_enable+0x20>)
    e24a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    e24c:	4b06      	ldr	r3, [pc, #24]	; (e268 <system_gclk_chan_enable+0x24>)
    e24e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    e250:	4a06      	ldr	r2, [pc, #24]	; (e26c <system_gclk_chan_enable+0x28>)
    e252:	8853      	ldrh	r3, [r2, #2]
    e254:	2180      	movs	r1, #128	; 0x80
    e256:	01c9      	lsls	r1, r1, #7
    e258:	430b      	orrs	r3, r1
    e25a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    e25c:	4b04      	ldr	r3, [pc, #16]	; (e270 <system_gclk_chan_enable+0x2c>)
    e25e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    e260:	bd10      	pop	{r4, pc}
    e262:	46c0      	nop			; (mov r8, r8)
    e264:	0000dc1d 	.word	0x0000dc1d
    e268:	40000c02 	.word	0x40000c02
    e26c:	40000c00 	.word	0x40000c00
    e270:	0000dc5d 	.word	0x0000dc5d

0000e274 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    e274:	b510      	push	{r4, lr}
    e276:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    e278:	4b0f      	ldr	r3, [pc, #60]	; (e2b8 <system_gclk_chan_disable+0x44>)
    e27a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    e27c:	4b0f      	ldr	r3, [pc, #60]	; (e2bc <system_gclk_chan_disable+0x48>)
    e27e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    e280:	4a0f      	ldr	r2, [pc, #60]	; (e2c0 <system_gclk_chan_disable+0x4c>)
    e282:	8853      	ldrh	r3, [r2, #2]
    e284:	051b      	lsls	r3, r3, #20
    e286:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    e288:	8853      	ldrh	r3, [r2, #2]
    e28a:	490e      	ldr	r1, [pc, #56]	; (e2c4 <system_gclk_chan_disable+0x50>)
    e28c:	400b      	ands	r3, r1
    e28e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    e290:	8853      	ldrh	r3, [r2, #2]
    e292:	490d      	ldr	r1, [pc, #52]	; (e2c8 <system_gclk_chan_disable+0x54>)
    e294:	400b      	ands	r3, r1
    e296:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    e298:	0011      	movs	r1, r2
    e29a:	2280      	movs	r2, #128	; 0x80
    e29c:	01d2      	lsls	r2, r2, #7
    e29e:	884b      	ldrh	r3, [r1, #2]
    e2a0:	4213      	tst	r3, r2
    e2a2:	d1fc      	bne.n	e29e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    e2a4:	4906      	ldr	r1, [pc, #24]	; (e2c0 <system_gclk_chan_disable+0x4c>)
    e2a6:	884a      	ldrh	r2, [r1, #2]
    e2a8:	0203      	lsls	r3, r0, #8
    e2aa:	4806      	ldr	r0, [pc, #24]	; (e2c4 <system_gclk_chan_disable+0x50>)
    e2ac:	4002      	ands	r2, r0
    e2ae:	4313      	orrs	r3, r2
    e2b0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    e2b2:	4b06      	ldr	r3, [pc, #24]	; (e2cc <system_gclk_chan_disable+0x58>)
    e2b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    e2b6:	bd10      	pop	{r4, pc}
    e2b8:	0000dc1d 	.word	0x0000dc1d
    e2bc:	40000c02 	.word	0x40000c02
    e2c0:	40000c00 	.word	0x40000c00
    e2c4:	fffff0ff 	.word	0xfffff0ff
    e2c8:	ffffbfff 	.word	0xffffbfff
    e2cc:	0000dc5d 	.word	0x0000dc5d

0000e2d0 <system_gclk_chan_set_config>:
{
    e2d0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    e2d2:	780c      	ldrb	r4, [r1, #0]
    e2d4:	0224      	lsls	r4, r4, #8
    e2d6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    e2d8:	4b02      	ldr	r3, [pc, #8]	; (e2e4 <system_gclk_chan_set_config+0x14>)
    e2da:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    e2dc:	b2a4      	uxth	r4, r4
    e2de:	4b02      	ldr	r3, [pc, #8]	; (e2e8 <system_gclk_chan_set_config+0x18>)
    e2e0:	805c      	strh	r4, [r3, #2]
}
    e2e2:	bd10      	pop	{r4, pc}
    e2e4:	0000e275 	.word	0x0000e275
    e2e8:	40000c00 	.word	0x40000c00

0000e2ec <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    e2ec:	b510      	push	{r4, lr}
    e2ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    e2f0:	4b06      	ldr	r3, [pc, #24]	; (e30c <system_gclk_chan_get_hz+0x20>)
    e2f2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    e2f4:	4b06      	ldr	r3, [pc, #24]	; (e310 <system_gclk_chan_get_hz+0x24>)
    e2f6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    e2f8:	4b06      	ldr	r3, [pc, #24]	; (e314 <system_gclk_chan_get_hz+0x28>)
    e2fa:	885c      	ldrh	r4, [r3, #2]
    e2fc:	0524      	lsls	r4, r4, #20
    e2fe:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    e300:	4b05      	ldr	r3, [pc, #20]	; (e318 <system_gclk_chan_get_hz+0x2c>)
    e302:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    e304:	0020      	movs	r0, r4
    e306:	4b05      	ldr	r3, [pc, #20]	; (e31c <system_gclk_chan_get_hz+0x30>)
    e308:	4798      	blx	r3
}
    e30a:	bd10      	pop	{r4, pc}
    e30c:	0000dc1d 	.word	0x0000dc1d
    e310:	40000c02 	.word	0x40000c02
    e314:	40000c00 	.word	0x40000c00
    e318:	0000dc5d 	.word	0x0000dc5d
    e31c:	0000e1b9 	.word	0x0000e1b9

0000e320 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    e320:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    e322:	78d3      	ldrb	r3, [r2, #3]
    e324:	2b00      	cmp	r3, #0
    e326:	d135      	bne.n	e394 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    e328:	7813      	ldrb	r3, [r2, #0]
    e32a:	2b80      	cmp	r3, #128	; 0x80
    e32c:	d029      	beq.n	e382 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    e32e:	061b      	lsls	r3, r3, #24
    e330:	2480      	movs	r4, #128	; 0x80
    e332:	0264      	lsls	r4, r4, #9
    e334:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    e336:	7854      	ldrb	r4, [r2, #1]
    e338:	2502      	movs	r5, #2
    e33a:	43ac      	bics	r4, r5
    e33c:	d106      	bne.n	e34c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    e33e:	7894      	ldrb	r4, [r2, #2]
    e340:	2c00      	cmp	r4, #0
    e342:	d120      	bne.n	e386 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    e344:	2480      	movs	r4, #128	; 0x80
    e346:	02a4      	lsls	r4, r4, #10
    e348:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    e34a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    e34c:	7854      	ldrb	r4, [r2, #1]
    e34e:	3c01      	subs	r4, #1
    e350:	2c01      	cmp	r4, #1
    e352:	d91c      	bls.n	e38e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    e354:	040d      	lsls	r5, r1, #16
    e356:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    e358:	24a0      	movs	r4, #160	; 0xa0
    e35a:	05e4      	lsls	r4, r4, #23
    e35c:	432c      	orrs	r4, r5
    e35e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    e360:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    e362:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    e364:	24d0      	movs	r4, #208	; 0xd0
    e366:	0624      	lsls	r4, r4, #24
    e368:	432c      	orrs	r4, r5
    e36a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    e36c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    e36e:	78d4      	ldrb	r4, [r2, #3]
    e370:	2c00      	cmp	r4, #0
    e372:	d122      	bne.n	e3ba <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    e374:	035b      	lsls	r3, r3, #13
    e376:	d51c      	bpl.n	e3b2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    e378:	7893      	ldrb	r3, [r2, #2]
    e37a:	2b01      	cmp	r3, #1
    e37c:	d01e      	beq.n	e3bc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    e37e:	6141      	str	r1, [r0, #20]
    e380:	e017      	b.n	e3b2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    e382:	2300      	movs	r3, #0
    e384:	e7d7      	b.n	e336 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    e386:	24c0      	movs	r4, #192	; 0xc0
    e388:	02e4      	lsls	r4, r4, #11
    e38a:	4323      	orrs	r3, r4
    e38c:	e7dd      	b.n	e34a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    e38e:	4c0d      	ldr	r4, [pc, #52]	; (e3c4 <_system_pinmux_config+0xa4>)
    e390:	4023      	ands	r3, r4
    e392:	e7df      	b.n	e354 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    e394:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    e396:	040c      	lsls	r4, r1, #16
    e398:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    e39a:	23a0      	movs	r3, #160	; 0xa0
    e39c:	05db      	lsls	r3, r3, #23
    e39e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    e3a0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    e3a2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    e3a4:	23d0      	movs	r3, #208	; 0xd0
    e3a6:	061b      	lsls	r3, r3, #24
    e3a8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    e3aa:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    e3ac:	78d3      	ldrb	r3, [r2, #3]
    e3ae:	2b00      	cmp	r3, #0
    e3b0:	d103      	bne.n	e3ba <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    e3b2:	7853      	ldrb	r3, [r2, #1]
    e3b4:	3b01      	subs	r3, #1
    e3b6:	2b01      	cmp	r3, #1
    e3b8:	d902      	bls.n	e3c0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    e3ba:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    e3bc:	6181      	str	r1, [r0, #24]
    e3be:	e7f8      	b.n	e3b2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    e3c0:	6081      	str	r1, [r0, #8]
}
    e3c2:	e7fa      	b.n	e3ba <_system_pinmux_config+0x9a>
    e3c4:	fffbffff 	.word	0xfffbffff

0000e3c8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    e3c8:	b510      	push	{r4, lr}
    e3ca:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    e3cc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    e3ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e3d0:	2900      	cmp	r1, #0
    e3d2:	d104      	bne.n	e3de <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    e3d4:	0943      	lsrs	r3, r0, #5
    e3d6:	01db      	lsls	r3, r3, #7
    e3d8:	4905      	ldr	r1, [pc, #20]	; (e3f0 <system_pinmux_pin_set_config+0x28>)
    e3da:	468c      	mov	ip, r1
    e3dc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    e3de:	241f      	movs	r4, #31
    e3e0:	4020      	ands	r0, r4
    e3e2:	2101      	movs	r1, #1
    e3e4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    e3e6:	0018      	movs	r0, r3
    e3e8:	4b02      	ldr	r3, [pc, #8]	; (e3f4 <system_pinmux_pin_set_config+0x2c>)
    e3ea:	4798      	blx	r3
}
    e3ec:	bd10      	pop	{r4, pc}
    e3ee:	46c0      	nop			; (mov r8, r8)
    e3f0:	41004400 	.word	0x41004400
    e3f4:	0000e321 	.word	0x0000e321

0000e3f8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    e3f8:	4770      	bx	lr
	...

0000e3fc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    e3fc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    e3fe:	4b05      	ldr	r3, [pc, #20]	; (e414 <system_init+0x18>)
    e400:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    e402:	4b05      	ldr	r3, [pc, #20]	; (e418 <system_init+0x1c>)
    e404:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    e406:	4b05      	ldr	r3, [pc, #20]	; (e41c <system_init+0x20>)
    e408:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    e40a:	4b05      	ldr	r3, [pc, #20]	; (e420 <system_init+0x24>)
    e40c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    e40e:	4b05      	ldr	r3, [pc, #20]	; (e424 <system_init+0x28>)
    e410:	4798      	blx	r3
}
    e412:	bd10      	pop	{r4, pc}
    e414:	0000df39 	.word	0x0000df39
    e418:	0000dc19 	.word	0x0000dc19
    e41c:	0000e3f9 	.word	0x0000e3f9
    e420:	00005fdd 	.word	0x00005fdd
    e424:	0000e3f9 	.word	0x0000e3f9

0000e428 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    e428:	e7fe      	b.n	e428 <Dummy_Handler>
	...

0000e42c <Reset_Handler>:
{
    e42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    e42e:	4a2a      	ldr	r2, [pc, #168]	; (e4d8 <Reset_Handler+0xac>)
    e430:	4b2a      	ldr	r3, [pc, #168]	; (e4dc <Reset_Handler+0xb0>)
    e432:	429a      	cmp	r2, r3
    e434:	d011      	beq.n	e45a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    e436:	001a      	movs	r2, r3
    e438:	4b29      	ldr	r3, [pc, #164]	; (e4e0 <Reset_Handler+0xb4>)
    e43a:	429a      	cmp	r2, r3
    e43c:	d20d      	bcs.n	e45a <Reset_Handler+0x2e>
    e43e:	4a29      	ldr	r2, [pc, #164]	; (e4e4 <Reset_Handler+0xb8>)
    e440:	3303      	adds	r3, #3
    e442:	1a9b      	subs	r3, r3, r2
    e444:	089b      	lsrs	r3, r3, #2
    e446:	3301      	adds	r3, #1
    e448:	009b      	lsls	r3, r3, #2
    e44a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    e44c:	4823      	ldr	r0, [pc, #140]	; (e4dc <Reset_Handler+0xb0>)
    e44e:	4922      	ldr	r1, [pc, #136]	; (e4d8 <Reset_Handler+0xac>)
    e450:	588c      	ldr	r4, [r1, r2]
    e452:	5084      	str	r4, [r0, r2]
    e454:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    e456:	429a      	cmp	r2, r3
    e458:	d1fa      	bne.n	e450 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    e45a:	4a23      	ldr	r2, [pc, #140]	; (e4e8 <Reset_Handler+0xbc>)
    e45c:	4b23      	ldr	r3, [pc, #140]	; (e4ec <Reset_Handler+0xc0>)
    e45e:	429a      	cmp	r2, r3
    e460:	d20a      	bcs.n	e478 <Reset_Handler+0x4c>
    e462:	43d3      	mvns	r3, r2
    e464:	4921      	ldr	r1, [pc, #132]	; (e4ec <Reset_Handler+0xc0>)
    e466:	185b      	adds	r3, r3, r1
    e468:	2103      	movs	r1, #3
    e46a:	438b      	bics	r3, r1
    e46c:	3304      	adds	r3, #4
    e46e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    e470:	2100      	movs	r1, #0
    e472:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    e474:	4293      	cmp	r3, r2
    e476:	d1fc      	bne.n	e472 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    e478:	4a1d      	ldr	r2, [pc, #116]	; (e4f0 <Reset_Handler+0xc4>)
    e47a:	21ff      	movs	r1, #255	; 0xff
    e47c:	4b1d      	ldr	r3, [pc, #116]	; (e4f4 <Reset_Handler+0xc8>)
    e47e:	438b      	bics	r3, r1
    e480:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    e482:	39fd      	subs	r1, #253	; 0xfd
    e484:	2390      	movs	r3, #144	; 0x90
    e486:	005b      	lsls	r3, r3, #1
    e488:	4a1b      	ldr	r2, [pc, #108]	; (e4f8 <Reset_Handler+0xcc>)
    e48a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    e48c:	4a1b      	ldr	r2, [pc, #108]	; (e4fc <Reset_Handler+0xd0>)
    e48e:	78d3      	ldrb	r3, [r2, #3]
    e490:	2503      	movs	r5, #3
    e492:	43ab      	bics	r3, r5
    e494:	2402      	movs	r4, #2
    e496:	4323      	orrs	r3, r4
    e498:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    e49a:	78d3      	ldrb	r3, [r2, #3]
    e49c:	270c      	movs	r7, #12
    e49e:	43bb      	bics	r3, r7
    e4a0:	2608      	movs	r6, #8
    e4a2:	4333      	orrs	r3, r6
    e4a4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    e4a6:	4b16      	ldr	r3, [pc, #88]	; (e500 <Reset_Handler+0xd4>)
    e4a8:	7b98      	ldrb	r0, [r3, #14]
    e4aa:	2230      	movs	r2, #48	; 0x30
    e4ac:	4390      	bics	r0, r2
    e4ae:	2220      	movs	r2, #32
    e4b0:	4310      	orrs	r0, r2
    e4b2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    e4b4:	7b99      	ldrb	r1, [r3, #14]
    e4b6:	43b9      	bics	r1, r7
    e4b8:	4331      	orrs	r1, r6
    e4ba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    e4bc:	7b9a      	ldrb	r2, [r3, #14]
    e4be:	43aa      	bics	r2, r5
    e4c0:	4322      	orrs	r2, r4
    e4c2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    e4c4:	4a0f      	ldr	r2, [pc, #60]	; (e504 <Reset_Handler+0xd8>)
    e4c6:	6853      	ldr	r3, [r2, #4]
    e4c8:	2180      	movs	r1, #128	; 0x80
    e4ca:	430b      	orrs	r3, r1
    e4cc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    e4ce:	4b0e      	ldr	r3, [pc, #56]	; (e508 <Reset_Handler+0xdc>)
    e4d0:	4798      	blx	r3
        main();
    e4d2:	4b0e      	ldr	r3, [pc, #56]	; (e50c <Reset_Handler+0xe0>)
    e4d4:	4798      	blx	r3
    e4d6:	e7fe      	b.n	e4d6 <Reset_Handler+0xaa>
    e4d8:	00016a50 	.word	0x00016a50
    e4dc:	20000000 	.word	0x20000000
    e4e0:	200001e0 	.word	0x200001e0
    e4e4:	20000004 	.word	0x20000004
    e4e8:	200001e0 	.word	0x200001e0
    e4ec:	200007fc 	.word	0x200007fc
    e4f0:	e000ed00 	.word	0xe000ed00
    e4f4:	00004000 	.word	0x00004000
    e4f8:	41007000 	.word	0x41007000
    e4fc:	41005000 	.word	0x41005000
    e500:	41004800 	.word	0x41004800
    e504:	41004000 	.word	0x41004000
    e508:	0000e7d9 	.word	0x0000e7d9
    e50c:	0000e6d1 	.word	0x0000e6d1

0000e510 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    e510:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    e512:	4a06      	ldr	r2, [pc, #24]	; (e52c <_sbrk+0x1c>)
    e514:	6812      	ldr	r2, [r2, #0]
    e516:	2a00      	cmp	r2, #0
    e518:	d004      	beq.n	e524 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    e51a:	4a04      	ldr	r2, [pc, #16]	; (e52c <_sbrk+0x1c>)
    e51c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    e51e:	18c3      	adds	r3, r0, r3
    e520:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    e522:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    e524:	4902      	ldr	r1, [pc, #8]	; (e530 <_sbrk+0x20>)
    e526:	4a01      	ldr	r2, [pc, #4]	; (e52c <_sbrk+0x1c>)
    e528:	6011      	str	r1, [r2, #0]
    e52a:	e7f6      	b.n	e51a <_sbrk+0xa>
    e52c:	20000290 	.word	0x20000290
    e530:	20002800 	.word	0x20002800

0000e534 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    e534:	2001      	movs	r0, #1
    e536:	4240      	negs	r0, r0
    e538:	4770      	bx	lr

0000e53a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    e53a:	2380      	movs	r3, #128	; 0x80
    e53c:	019b      	lsls	r3, r3, #6
    e53e:	604b      	str	r3, [r1, #4]

	return 0;
}
    e540:	2000      	movs	r0, #0
    e542:	4770      	bx	lr

0000e544 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    e544:	2001      	movs	r0, #1
    e546:	4770      	bx	lr

0000e548 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    e548:	2000      	movs	r0, #0
    e54a:	4770      	bx	lr

0000e54c <processUserInput>:
 * stores user input in rx buffer read from serial
 *
 * @return  true if successful, false if error
 */
bool processUserInput(void)
{
    e54c:	b500      	push	{lr}
    e54e:	b083      	sub	sp, #12
	char singleCharInput;
	volatile enum status_code uartReadCode = usart_read_buffer_wait(&usart_instance, &singleCharInput, 1);
    e550:	2201      	movs	r2, #1
    e552:	466b      	mov	r3, sp
    e554:	1dd9      	adds	r1, r3, #7
    e556:	482f      	ldr	r0, [pc, #188]	; (e614 <processUserInput+0xc8>)
    e558:	4b2f      	ldr	r3, [pc, #188]	; (e618 <processUserInput+0xcc>)
    e55a:	4798      	blx	r3
    e55c:	466b      	mov	r3, sp
    e55e:	7198      	strb	r0, [r3, #6]
    e560:	3306      	adds	r3, #6

	if (STATUS_OK != uartReadCode) {
    e562:	781b      	ldrb	r3, [r3, #0]
		return false;
    e564:	2000      	movs	r0, #0
	if (STATUS_OK != uartReadCode) {
    e566:	2b00      	cmp	r3, #0
    e568:	d121      	bne.n	e5ae <processUserInput+0x62>
	}
	if((singleCharInput != BS && !numberCharsRead) || numberCharsRead) {
    e56a:	466b      	mov	r3, sp
    e56c:	3307      	adds	r3, #7
    e56e:	781b      	ldrb	r3, [r3, #0]
    e570:	2b7f      	cmp	r3, #127	; 0x7f
    e572:	d01e      	beq.n	e5b2 <processUserInput+0x66>
		if (STATUS_OK == uartReadCode) {
    e574:	466b      	mov	r3, sp
    e576:	3306      	adds	r3, #6
    e578:	781b      	ldrb	r3, [r3, #0]
    e57a:	2b00      	cmp	r3, #0
    e57c:	d02d      	beq.n	e5da <processUserInput+0x8e>
			volatile enum status_code uartWriteCode = usart_write_buffer_wait(&usart_instance, &singleCharInput, 1);
		}
	}
	

	switch (singleCharInput) {
    e57e:	466b      	mov	r3, sp
    e580:	3307      	adds	r3, #7
    e582:	781b      	ldrb	r3, [r3, #0]
    e584:	2b0d      	cmp	r3, #13
    e586:	d031      	beq.n	e5ec <processUserInput+0xa0>
    e588:	2b7f      	cmp	r3, #127	; 0x7f
    e58a:	d03c      	beq.n	e606 <processUserInput+0xba>
    e58c:	2b0a      	cmp	r3, #10
    e58e:	d02d      	beq.n	e5ec <processUserInput+0xa0>
		// rx_buffer[--numberCharsRead] = NULLCHAR;
		break;
	}
	default: {
		/// All other cases
		if (numberCharsRead < MAX_RX_BUFFER_LENGTH)
    e590:	4a22      	ldr	r2, [pc, #136]	; (e61c <processUserInput+0xd0>)
    e592:	7812      	ldrb	r2, [r2, #0]
    e594:	2a63      	cmp	r2, #99	; 0x63
    e596:	d804      	bhi.n	e5a2 <processUserInput+0x56>
			rx_buffer[numberCharsRead++] = singleCharInput;
    e598:	1c50      	adds	r0, r2, #1
    e59a:	4920      	ldr	r1, [pc, #128]	; (e61c <processUserInput+0xd0>)
    e59c:	7008      	strb	r0, [r1, #0]
    e59e:	4920      	ldr	r1, [pc, #128]	; (e620 <processUserInput+0xd4>)
    e5a0:	548b      	strb	r3, [r1, r2]
		rx_buffer[numberCharsRead] = NULLCHAR;  ///< String read protection
    e5a2:	4b1e      	ldr	r3, [pc, #120]	; (e61c <processUserInput+0xd0>)
    e5a4:	781b      	ldrb	r3, [r3, #0]
    e5a6:	2100      	movs	r1, #0
    e5a8:	4a1d      	ldr	r2, [pc, #116]	; (e620 <processUserInput+0xd4>)
    e5aa:	54d1      	strb	r1, [r2, r3]
		break;
	}
	}
	return false;
    e5ac:	2000      	movs	r0, #0
}
    e5ae:	b003      	add	sp, #12
    e5b0:	bd00      	pop	{pc}
	if((singleCharInput != BS && !numberCharsRead) || numberCharsRead) {
    e5b2:	4b1a      	ldr	r3, [pc, #104]	; (e61c <processUserInput+0xd0>)
    e5b4:	781b      	ldrb	r3, [r3, #0]
    e5b6:	2b00      	cmp	r3, #0
    e5b8:	d0f9      	beq.n	e5ae <processUserInput+0x62>
		if (STATUS_OK == uartReadCode) {
    e5ba:	466b      	mov	r3, sp
    e5bc:	3306      	adds	r3, #6
    e5be:	781b      	ldrb	r3, [r3, #0]
    e5c0:	2b00      	cmp	r3, #0
    e5c2:	d00a      	beq.n	e5da <processUserInput+0x8e>
		if(!numberCharsRead) //no characters written
    e5c4:	4b15      	ldr	r3, [pc, #84]	; (e61c <processUserInput+0xd0>)
    e5c6:	781b      	ldrb	r3, [r3, #0]
		numberCharsRead--;
    e5c8:	3b01      	subs	r3, #1
    e5ca:	b2db      	uxtb	r3, r3
    e5cc:	4a13      	ldr	r2, [pc, #76]	; (e61c <processUserInput+0xd0>)
    e5ce:	7013      	strb	r3, [r2, #0]
		rx_buffer[numberCharsRead] = NULLCHAR;
    e5d0:	2100      	movs	r1, #0
    e5d2:	4a13      	ldr	r2, [pc, #76]	; (e620 <processUserInput+0xd4>)
    e5d4:	54d1      	strb	r1, [r2, r3]
	return false;
    e5d6:	2000      	movs	r0, #0
		break;
    e5d8:	e7e9      	b.n	e5ae <processUserInput+0x62>
			volatile enum status_code uartWriteCode = usart_write_buffer_wait(&usart_instance, &singleCharInput, 1);
    e5da:	2201      	movs	r2, #1
    e5dc:	466b      	mov	r3, sp
    e5de:	1dd9      	adds	r1, r3, #7
    e5e0:	480c      	ldr	r0, [pc, #48]	; (e614 <processUserInput+0xc8>)
    e5e2:	4b10      	ldr	r3, [pc, #64]	; (e624 <processUserInput+0xd8>)
    e5e4:	4798      	blx	r3
    e5e6:	466b      	mov	r3, sp
    e5e8:	7158      	strb	r0, [r3, #5]
    e5ea:	e7c8      	b.n	e57e <processUserInput+0x32>
		rx_buffer[numberCharsRead] = NULLCHAR;
    e5ec:	4b0b      	ldr	r3, [pc, #44]	; (e61c <processUserInput+0xd0>)
    e5ee:	781b      	ldrb	r3, [r3, #0]
    e5f0:	2100      	movs	r1, #0
    e5f2:	4a0b      	ldr	r2, [pc, #44]	; (e620 <processUserInput+0xd4>)
    e5f4:	54d1      	strb	r1, [r2, r3]
	return false;
    e5f6:	2000      	movs	r0, #0
		if (numberCharsRead > 0) {
    e5f8:	2b00      	cmp	r3, #0
    e5fa:	d0d8      	beq.n	e5ae <processUserInput+0x62>
			numberCharsRead = 0;
    e5fc:	2200      	movs	r2, #0
    e5fe:	4b07      	ldr	r3, [pc, #28]	; (e61c <processUserInput+0xd0>)
    e600:	701a      	strb	r2, [r3, #0]
			return true;
    e602:	3001      	adds	r0, #1
    e604:	e7d3      	b.n	e5ae <processUserInput+0x62>
		if(!numberCharsRead) //no characters written
    e606:	4b05      	ldr	r3, [pc, #20]	; (e61c <processUserInput+0xd0>)
    e608:	781b      	ldrb	r3, [r3, #0]
    e60a:	2b00      	cmp	r3, #0
    e60c:	d1dc      	bne.n	e5c8 <processUserInput+0x7c>
	return false;
    e60e:	2000      	movs	r0, #0
    e610:	e7cd      	b.n	e5ae <processUserInput+0x62>
    e612:	46c0      	nop			; (mov r8, r8)
    e614:	20000758 	.word	0x20000758
    e618:	0000c9a5 	.word	0x0000c9a5
    e61c:	200007f4 	.word	0x200007f4
    e620:	20000790 	.word	0x20000790
    e624:	0000c8e5 	.word	0x0000c8e5

0000e628 <make_lowercase>:
/**
 * helper function to set string to all lowercase
 * @param str string to make all lowercase
 */
void make_lowercase(char **str)
{
    e628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e62a:	46ce      	mov	lr, r9
    e62c:	4647      	mov	r7, r8
    e62e:	b580      	push	{r7, lr}
    e630:	0007      	movs	r7, r0
	int i = 0;

	while (*(*(str) + i) != 0) {
    e632:	6804      	ldr	r4, [r0, #0]
    e634:	7825      	ldrb	r5, [r4, #0]
    e636:	2d00      	cmp	r5, #0
    e638:	d016      	beq.n	e668 <make_lowercase+0x40>
    e63a:	2600      	movs	r6, #0
		*(*(str) + i) = tolower(*(*str + i));
    e63c:	4b0c      	ldr	r3, [pc, #48]	; (e670 <make_lowercase+0x48>)
    e63e:	4699      	mov	r9, r3
    e640:	2303      	movs	r3, #3
    e642:	4698      	mov	r8, r3
    e644:	e006      	b.n	e654 <make_lowercase+0x2c>
    e646:	7022      	strb	r2, [r4, #0]
		i++;
    e648:	3601      	adds	r6, #1
	while (*(*(str) + i) != 0) {
    e64a:	683b      	ldr	r3, [r7, #0]
    e64c:	199c      	adds	r4, r3, r6
    e64e:	7825      	ldrb	r5, [r4, #0]
    e650:	2d00      	cmp	r5, #0
    e652:	d009      	beq.n	e668 <make_lowercase+0x40>
		*(*(str) + i) = tolower(*(*str + i));
    e654:	47c8      	blx	r9
    e656:	1940      	adds	r0, r0, r5
    e658:	7843      	ldrb	r3, [r0, #1]
    e65a:	4642      	mov	r2, r8
    e65c:	4013      	ands	r3, r2
    e65e:	002a      	movs	r2, r5
    e660:	2b01      	cmp	r3, #1
    e662:	d1f0      	bne.n	e646 <make_lowercase+0x1e>
    e664:	3220      	adds	r2, #32
    e666:	e7ee      	b.n	e646 <make_lowercase+0x1e>
	}
}
    e668:	bc0c      	pop	{r2, r3}
    e66a:	4690      	mov	r8, r2
    e66c:	4699      	mov	r9, r3
    e66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e670:	0000e829 	.word	0x0000e829

0000e674 <fix_args>:

/**
 * fixes arguments and adds them to the argv buffer
 */
void fix_args()
{
    e674:	b570      	push	{r4, r5, r6, lr}
    e676:	b082      	sub	sp, #8
	char *p = strtok(rx_buffer, " "); /// NOTE: strtok destroys the input string
    e678:	490e      	ldr	r1, [pc, #56]	; (e6b4 <fix_args+0x40>)
    e67a:	480f      	ldr	r0, [pc, #60]	; (e6b8 <fix_args+0x44>)
    e67c:	4b0f      	ldr	r3, [pc, #60]	; (e6bc <fix_args+0x48>)
    e67e:	4798      	blx	r3
    e680:	9001      	str	r0, [sp, #4]

	while (p != NULL) {
    e682:	2800      	cmp	r0, #0
    e684:	d013      	beq.n	e6ae <fix_args+0x3a>
		make_lowercase(&p);
    e686:	4e0e      	ldr	r6, [pc, #56]	; (e6c0 <fix_args+0x4c>)
		strcpy(argv[argc++], p);
    e688:	4c0e      	ldr	r4, [pc, #56]	; (e6c4 <fix_args+0x50>)
    e68a:	4d0f      	ldr	r5, [pc, #60]	; (e6c8 <fix_args+0x54>)
		make_lowercase(&p);
    e68c:	a801      	add	r0, sp, #4
    e68e:	47b0      	blx	r6
		strcpy(argv[argc++], p);
    e690:	7823      	ldrb	r3, [r4, #0]
    e692:	1c5a      	adds	r2, r3, #1
    e694:	7022      	strb	r2, [r4, #0]
    e696:	009b      	lsls	r3, r3, #2
    e698:	5958      	ldr	r0, [r3, r5]
    e69a:	9901      	ldr	r1, [sp, #4]
    e69c:	4b0b      	ldr	r3, [pc, #44]	; (e6cc <fix_args+0x58>)
    e69e:	4798      	blx	r3
		p = strtok(NULL, " ");
    e6a0:	4904      	ldr	r1, [pc, #16]	; (e6b4 <fix_args+0x40>)
    e6a2:	2000      	movs	r0, #0
    e6a4:	4b05      	ldr	r3, [pc, #20]	; (e6bc <fix_args+0x48>)
    e6a6:	4798      	blx	r3
    e6a8:	9001      	str	r0, [sp, #4]
	while (p != NULL) {
    e6aa:	2800      	cmp	r0, #0
    e6ac:	d1ee      	bne.n	e68c <fix_args+0x18>
	}
}
    e6ae:	b002      	add	sp, #8
    e6b0:	bd70      	pop	{r4, r5, r6, pc}
    e6b2:	46c0      	nop			; (mov r8, r8)
    e6b4:	00015ad0 	.word	0x00015ad0
    e6b8:	20000790 	.word	0x20000790
    e6bc:	0000f6cd 	.word	0x0000f6cd
    e6c0:	0000e629 	.word	0x0000e629
    e6c4:	2000078c 	.word	0x2000078c
    e6c8:	20000748 	.word	0x20000748
    e6cc:	0000f621 	.word	0x0000f621

0000e6d0 <main>:


int main(void)
{
    e6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	system_init();
    e6d2:	4b24      	ldr	r3, [pc, #144]	; (e764 <main+0x94>)
    e6d4:	4798      	blx	r3
	//system_interrupt_enable_global();
	delay_init();
    e6d6:	4b24      	ldr	r3, [pc, #144]	; (e768 <main+0x98>)
    e6d8:	4798      	blx	r3
	configure_usart();
    e6da:	4b24      	ldr	r3, [pc, #144]	; (e76c <main+0x9c>)
    e6dc:	4798      	blx	r3
	configure_nvm();
    e6de:	4b24      	ldr	r3, [pc, #144]	; (e770 <main+0xa0>)
    e6e0:	4798      	blx	r3
	configure_flash();
    e6e2:	4b24      	ldr	r3, [pc, #144]	; (e774 <main+0xa4>)
    e6e4:	4798      	blx	r3
	configure_i2c_tsl2561(ADDR_FLOAT);
    e6e6:	2039      	movs	r0, #57	; 0x39
    e6e8:	4b23      	ldr	r3, [pc, #140]	; (e778 <main+0xa8>)
    e6ea:	4798      	blx	r3
	configure_i2c_hdc();
    e6ec:	4b23      	ldr	r3, [pc, #140]	; (e77c <main+0xac>)
    e6ee:	4798      	blx	r3
	set_resolution(FOURTEEN_BIT_RESOLUTION, FOURTEEN_BIT_RESOLUTION);
    e6f0:	2102      	movs	r1, #2
    e6f2:	2002      	movs	r0, #2
    e6f4:	4b22      	ldr	r3, [pc, #136]	; (e780 <main+0xb0>)
    e6f6:	4798      	blx	r3
	get_default_wifi_config(&new_wifi_configuration);
    e6f8:	4c22      	ldr	r4, [pc, #136]	; (e784 <main+0xb4>)
    e6fa:	0020      	movs	r0, r4
    e6fc:	4b22      	ldr	r3, [pc, #136]	; (e788 <main+0xb8>)
    e6fe:	4798      	blx	r3
	configure_wifi_module(&new_wifi_configuration);
    e700:	0020      	movs	r0, r4
    e702:	4b22      	ldr	r3, [pc, #136]	; (e78c <main+0xbc>)
    e704:	4798      	blx	r3
	
	uint16_t hdc_dev = get_hdc_device_id();
    e706:	4b22      	ldr	r3, [pc, #136]	; (e790 <main+0xc0>)
    e708:	4798      	blx	r3
    e70a:	0004      	movs	r4, r0
	uint16_t hdc_manu = get_hdc_manufacturer_id();
    e70c:	4b21      	ldr	r3, [pc, #132]	; (e794 <main+0xc4>)
    e70e:	4798      	blx	r3
    e710:	0002      	movs	r2, r0
	printf("dev id: 0x%02x\r\n manu id: 0x%02x\r\n", hdc_dev, hdc_manu);
    e712:	0021      	movs	r1, r4
    e714:	4820      	ldr	r0, [pc, #128]	; (e798 <main+0xc8>)
    e716:	4b21      	ldr	r3, [pc, #132]	; (e79c <main+0xcc>)
    e718:	4798      	blx	r3
    e71a:	2400      	movs	r4, #0
	for (int i = 0; i < MAX_ARGS; i++)
		argv[i] = malloc(sizeof(char) * MAX_ARG_LENGTH);
    e71c:	4e20      	ldr	r6, [pc, #128]	; (e7a0 <main+0xd0>)
    e71e:	4d21      	ldr	r5, [pc, #132]	; (e7a4 <main+0xd4>)
    e720:	2019      	movs	r0, #25
    e722:	47b0      	blx	r6
    e724:	5128      	str	r0, [r5, r4]
    e726:	3404      	adds	r4, #4
	for (int i = 0; i < MAX_ARGS; i++)
    e728:	2c10      	cmp	r4, #16
    e72a:	d1f9      	bne.n	e720 <main+0x50>

	//TODO: print version information
	printf("\r\nWelcome to the Evergreen CLI.\r\n");
    e72c:	481e      	ldr	r0, [pc, #120]	; (e7a8 <main+0xd8>)
    e72e:	4b1f      	ldr	r3, [pc, #124]	; (e7ac <main+0xdc>)
    e730:	4798      	blx	r3
	printf("> ");
    e732:	481f      	ldr	r0, [pc, #124]	; (e7b0 <main+0xe0>)
    e734:	4b19      	ldr	r3, [pc, #100]	; (e79c <main+0xcc>)
    e736:	4798      	blx	r3
	while (1) {
 			bool commandEntered = processUserInput();
    e738:	4c1e      	ldr	r4, [pc, #120]	; (e7b4 <main+0xe4>)
 			if (commandEntered) {
				printf("> %s\r\n", rx_buffer);
    e73a:	4e1f      	ldr	r6, [pc, #124]	; (e7b8 <main+0xe8>)
 			bool commandEntered = processUserInput();
    e73c:	47a0      	blx	r4
 			if (commandEntered) {
    e73e:	2800      	cmp	r0, #0
    e740:	d0fc      	beq.n	e73c <main+0x6c>
				printf("> %s\r\n", rx_buffer);
    e742:	0031      	movs	r1, r6
    e744:	481d      	ldr	r0, [pc, #116]	; (e7bc <main+0xec>)
    e746:	4f15      	ldr	r7, [pc, #84]	; (e79c <main+0xcc>)
    e748:	47b8      	blx	r7
 				fix_args();
    e74a:	4b1d      	ldr	r3, [pc, #116]	; (e7c0 <main+0xf0>)
    e74c:	4798      	blx	r3
 				input_handle(argc, argv); //fix
    e74e:	4d1d      	ldr	r5, [pc, #116]	; (e7c4 <main+0xf4>)
    e750:	7828      	ldrb	r0, [r5, #0]
    e752:	4914      	ldr	r1, [pc, #80]	; (e7a4 <main+0xd4>)
    e754:	4b1c      	ldr	r3, [pc, #112]	; (e7c8 <main+0xf8>)
    e756:	4798      	blx	r3
 				argc = 0;
    e758:	2300      	movs	r3, #0
    e75a:	702b      	strb	r3, [r5, #0]
 				printf("> ");
    e75c:	4814      	ldr	r0, [pc, #80]	; (e7b0 <main+0xe0>)
    e75e:	47b8      	blx	r7
    e760:	e7ec      	b.n	e73c <main+0x6c>
    e762:	46c0      	nop			; (mov r8, r8)
    e764:	0000e3fd 	.word	0x0000e3fd
    e768:	0000d86d 	.word	0x0000d86d
    e76c:	00004159 	.word	0x00004159
    e770:	00004335 	.word	0x00004335
    e774:	0000424d 	.word	0x0000424d
    e778:	000045a1 	.word	0x000045a1
    e77c:	00004365 	.word	0x00004365
    e780:	0000440d 	.word	0x0000440d
    e784:	20000710 	.word	0x20000710
    e788:	000052b5 	.word	0x000052b5
    e78c:	000052dd 	.word	0x000052dd
    e790:	00004521 	.word	0x00004521
    e794:	00004511 	.word	0x00004511
    e798:	000165dc 	.word	0x000165dc
    e79c:	0000f309 	.word	0x0000f309
    e7a0:	0000e845 	.word	0x0000e845
    e7a4:	20000748 	.word	0x20000748
    e7a8:	00016600 	.word	0x00016600
    e7ac:	0000f425 	.word	0x0000f425
    e7b0:	00016624 	.word	0x00016624
    e7b4:	0000e54d 	.word	0x0000e54d
    e7b8:	20000790 	.word	0x20000790
    e7bc:	00016628 	.word	0x00016628
    e7c0:	0000e675 	.word	0x0000e675
    e7c4:	2000078c 	.word	0x2000078c
    e7c8:	0000bf39 	.word	0x0000bf39

0000e7cc <atoi>:
    e7cc:	b510      	push	{r4, lr}
    e7ce:	220a      	movs	r2, #10
    e7d0:	2100      	movs	r1, #0
    e7d2:	f001 f857 	bl	f884 <strtol>
    e7d6:	bd10      	pop	{r4, pc}

0000e7d8 <__libc_init_array>:
    e7d8:	b570      	push	{r4, r5, r6, lr}
    e7da:	2600      	movs	r6, #0
    e7dc:	4d0c      	ldr	r5, [pc, #48]	; (e810 <__libc_init_array+0x38>)
    e7de:	4c0d      	ldr	r4, [pc, #52]	; (e814 <__libc_init_array+0x3c>)
    e7e0:	1b64      	subs	r4, r4, r5
    e7e2:	10a4      	asrs	r4, r4, #2
    e7e4:	42a6      	cmp	r6, r4
    e7e6:	d109      	bne.n	e7fc <__libc_init_array+0x24>
    e7e8:	2600      	movs	r6, #0
    e7ea:	f008 f921 	bl	16a30 <_init>
    e7ee:	4d0a      	ldr	r5, [pc, #40]	; (e818 <__libc_init_array+0x40>)
    e7f0:	4c0a      	ldr	r4, [pc, #40]	; (e81c <__libc_init_array+0x44>)
    e7f2:	1b64      	subs	r4, r4, r5
    e7f4:	10a4      	asrs	r4, r4, #2
    e7f6:	42a6      	cmp	r6, r4
    e7f8:	d105      	bne.n	e806 <__libc_init_array+0x2e>
    e7fa:	bd70      	pop	{r4, r5, r6, pc}
    e7fc:	00b3      	lsls	r3, r6, #2
    e7fe:	58eb      	ldr	r3, [r5, r3]
    e800:	4798      	blx	r3
    e802:	3601      	adds	r6, #1
    e804:	e7ee      	b.n	e7e4 <__libc_init_array+0xc>
    e806:	00b3      	lsls	r3, r6, #2
    e808:	58eb      	ldr	r3, [r5, r3]
    e80a:	4798      	blx	r3
    e80c:	3601      	adds	r6, #1
    e80e:	e7f2      	b.n	e7f6 <__libc_init_array+0x1e>
    e810:	00016a3c 	.word	0x00016a3c
    e814:	00016a3c 	.word	0x00016a3c
    e818:	00016a3c 	.word	0x00016a3c
    e81c:	00016a40 	.word	0x00016a40

0000e820 <__locale_ctype_ptr_l>:
    e820:	30ec      	adds	r0, #236	; 0xec
    e822:	6800      	ldr	r0, [r0, #0]
    e824:	4770      	bx	lr
	...

0000e828 <__locale_ctype_ptr>:
    e828:	4b04      	ldr	r3, [pc, #16]	; (e83c <__locale_ctype_ptr+0x14>)
    e82a:	681b      	ldr	r3, [r3, #0]
    e82c:	6a1b      	ldr	r3, [r3, #32]
    e82e:	2b00      	cmp	r3, #0
    e830:	d100      	bne.n	e834 <__locale_ctype_ptr+0xc>
    e832:	4b03      	ldr	r3, [pc, #12]	; (e840 <__locale_ctype_ptr+0x18>)
    e834:	33ec      	adds	r3, #236	; 0xec
    e836:	6818      	ldr	r0, [r3, #0]
    e838:	4770      	bx	lr
    e83a:	46c0      	nop			; (mov r8, r8)
    e83c:	20000010 	.word	0x20000010
    e840:	20000074 	.word	0x20000074

0000e844 <malloc>:
    e844:	b510      	push	{r4, lr}
    e846:	4b03      	ldr	r3, [pc, #12]	; (e854 <malloc+0x10>)
    e848:	0001      	movs	r1, r0
    e84a:	6818      	ldr	r0, [r3, #0]
    e84c:	f000 f88e 	bl	e96c <_malloc_r>
    e850:	bd10      	pop	{r4, pc}
    e852:	46c0      	nop			; (mov r8, r8)
    e854:	20000010 	.word	0x20000010

0000e858 <free>:
    e858:	b510      	push	{r4, lr}
    e85a:	4b03      	ldr	r3, [pc, #12]	; (e868 <free+0x10>)
    e85c:	0001      	movs	r1, r0
    e85e:	6818      	ldr	r0, [r3, #0]
    e860:	f000 f83a 	bl	e8d8 <_free_r>
    e864:	bd10      	pop	{r4, pc}
    e866:	46c0      	nop			; (mov r8, r8)
    e868:	20000010 	.word	0x20000010

0000e86c <__ascii_mbtowc>:
    e86c:	b082      	sub	sp, #8
    e86e:	2900      	cmp	r1, #0
    e870:	d100      	bne.n	e874 <__ascii_mbtowc+0x8>
    e872:	a901      	add	r1, sp, #4
    e874:	1e10      	subs	r0, r2, #0
    e876:	d006      	beq.n	e886 <__ascii_mbtowc+0x1a>
    e878:	2b00      	cmp	r3, #0
    e87a:	d006      	beq.n	e88a <__ascii_mbtowc+0x1e>
    e87c:	7813      	ldrb	r3, [r2, #0]
    e87e:	600b      	str	r3, [r1, #0]
    e880:	7810      	ldrb	r0, [r2, #0]
    e882:	1e43      	subs	r3, r0, #1
    e884:	4198      	sbcs	r0, r3
    e886:	b002      	add	sp, #8
    e888:	4770      	bx	lr
    e88a:	2002      	movs	r0, #2
    e88c:	4240      	negs	r0, r0
    e88e:	e7fa      	b.n	e886 <__ascii_mbtowc+0x1a>

0000e890 <memcpy>:
    e890:	2300      	movs	r3, #0
    e892:	b510      	push	{r4, lr}
    e894:	429a      	cmp	r2, r3
    e896:	d100      	bne.n	e89a <memcpy+0xa>
    e898:	bd10      	pop	{r4, pc}
    e89a:	5ccc      	ldrb	r4, [r1, r3]
    e89c:	54c4      	strb	r4, [r0, r3]
    e89e:	3301      	adds	r3, #1
    e8a0:	e7f8      	b.n	e894 <memcpy+0x4>

0000e8a2 <memmove>:
    e8a2:	b510      	push	{r4, lr}
    e8a4:	4288      	cmp	r0, r1
    e8a6:	d902      	bls.n	e8ae <memmove+0xc>
    e8a8:	188b      	adds	r3, r1, r2
    e8aa:	4298      	cmp	r0, r3
    e8ac:	d308      	bcc.n	e8c0 <memmove+0x1e>
    e8ae:	2300      	movs	r3, #0
    e8b0:	429a      	cmp	r2, r3
    e8b2:	d007      	beq.n	e8c4 <memmove+0x22>
    e8b4:	5ccc      	ldrb	r4, [r1, r3]
    e8b6:	54c4      	strb	r4, [r0, r3]
    e8b8:	3301      	adds	r3, #1
    e8ba:	e7f9      	b.n	e8b0 <memmove+0xe>
    e8bc:	5c8b      	ldrb	r3, [r1, r2]
    e8be:	5483      	strb	r3, [r0, r2]
    e8c0:	3a01      	subs	r2, #1
    e8c2:	d2fb      	bcs.n	e8bc <memmove+0x1a>
    e8c4:	bd10      	pop	{r4, pc}

0000e8c6 <memset>:
    e8c6:	0003      	movs	r3, r0
    e8c8:	1882      	adds	r2, r0, r2
    e8ca:	4293      	cmp	r3, r2
    e8cc:	d100      	bne.n	e8d0 <memset+0xa>
    e8ce:	4770      	bx	lr
    e8d0:	7019      	strb	r1, [r3, #0]
    e8d2:	3301      	adds	r3, #1
    e8d4:	e7f9      	b.n	e8ca <memset+0x4>
	...

0000e8d8 <_free_r>:
    e8d8:	b570      	push	{r4, r5, r6, lr}
    e8da:	0005      	movs	r5, r0
    e8dc:	2900      	cmp	r1, #0
    e8de:	d010      	beq.n	e902 <_free_r+0x2a>
    e8e0:	1f0c      	subs	r4, r1, #4
    e8e2:	6823      	ldr	r3, [r4, #0]
    e8e4:	2b00      	cmp	r3, #0
    e8e6:	da00      	bge.n	e8ea <_free_r+0x12>
    e8e8:	18e4      	adds	r4, r4, r3
    e8ea:	0028      	movs	r0, r5
    e8ec:	f002 f933 	bl	10b56 <__malloc_lock>
    e8f0:	4a1d      	ldr	r2, [pc, #116]	; (e968 <_free_r+0x90>)
    e8f2:	6813      	ldr	r3, [r2, #0]
    e8f4:	2b00      	cmp	r3, #0
    e8f6:	d105      	bne.n	e904 <_free_r+0x2c>
    e8f8:	6063      	str	r3, [r4, #4]
    e8fa:	6014      	str	r4, [r2, #0]
    e8fc:	0028      	movs	r0, r5
    e8fe:	f002 f92b 	bl	10b58 <__malloc_unlock>
    e902:	bd70      	pop	{r4, r5, r6, pc}
    e904:	42a3      	cmp	r3, r4
    e906:	d909      	bls.n	e91c <_free_r+0x44>
    e908:	6821      	ldr	r1, [r4, #0]
    e90a:	1860      	adds	r0, r4, r1
    e90c:	4283      	cmp	r3, r0
    e90e:	d1f3      	bne.n	e8f8 <_free_r+0x20>
    e910:	6818      	ldr	r0, [r3, #0]
    e912:	685b      	ldr	r3, [r3, #4]
    e914:	1841      	adds	r1, r0, r1
    e916:	6021      	str	r1, [r4, #0]
    e918:	e7ee      	b.n	e8f8 <_free_r+0x20>
    e91a:	0013      	movs	r3, r2
    e91c:	685a      	ldr	r2, [r3, #4]
    e91e:	2a00      	cmp	r2, #0
    e920:	d001      	beq.n	e926 <_free_r+0x4e>
    e922:	42a2      	cmp	r2, r4
    e924:	d9f9      	bls.n	e91a <_free_r+0x42>
    e926:	6819      	ldr	r1, [r3, #0]
    e928:	1858      	adds	r0, r3, r1
    e92a:	42a0      	cmp	r0, r4
    e92c:	d10b      	bne.n	e946 <_free_r+0x6e>
    e92e:	6820      	ldr	r0, [r4, #0]
    e930:	1809      	adds	r1, r1, r0
    e932:	1858      	adds	r0, r3, r1
    e934:	6019      	str	r1, [r3, #0]
    e936:	4282      	cmp	r2, r0
    e938:	d1e0      	bne.n	e8fc <_free_r+0x24>
    e93a:	6810      	ldr	r0, [r2, #0]
    e93c:	6852      	ldr	r2, [r2, #4]
    e93e:	1841      	adds	r1, r0, r1
    e940:	6019      	str	r1, [r3, #0]
    e942:	605a      	str	r2, [r3, #4]
    e944:	e7da      	b.n	e8fc <_free_r+0x24>
    e946:	42a0      	cmp	r0, r4
    e948:	d902      	bls.n	e950 <_free_r+0x78>
    e94a:	230c      	movs	r3, #12
    e94c:	602b      	str	r3, [r5, #0]
    e94e:	e7d5      	b.n	e8fc <_free_r+0x24>
    e950:	6821      	ldr	r1, [r4, #0]
    e952:	1860      	adds	r0, r4, r1
    e954:	4282      	cmp	r2, r0
    e956:	d103      	bne.n	e960 <_free_r+0x88>
    e958:	6810      	ldr	r0, [r2, #0]
    e95a:	6852      	ldr	r2, [r2, #4]
    e95c:	1841      	adds	r1, r0, r1
    e95e:	6021      	str	r1, [r4, #0]
    e960:	6062      	str	r2, [r4, #4]
    e962:	605c      	str	r4, [r3, #4]
    e964:	e7ca      	b.n	e8fc <_free_r+0x24>
    e966:	46c0      	nop			; (mov r8, r8)
    e968:	20000294 	.word	0x20000294

0000e96c <_malloc_r>:
    e96c:	2303      	movs	r3, #3
    e96e:	b570      	push	{r4, r5, r6, lr}
    e970:	1ccd      	adds	r5, r1, #3
    e972:	439d      	bics	r5, r3
    e974:	3508      	adds	r5, #8
    e976:	0006      	movs	r6, r0
    e978:	2d0c      	cmp	r5, #12
    e97a:	d21e      	bcs.n	e9ba <_malloc_r+0x4e>
    e97c:	250c      	movs	r5, #12
    e97e:	42a9      	cmp	r1, r5
    e980:	d81d      	bhi.n	e9be <_malloc_r+0x52>
    e982:	0030      	movs	r0, r6
    e984:	f002 f8e7 	bl	10b56 <__malloc_lock>
    e988:	4a25      	ldr	r2, [pc, #148]	; (ea20 <_malloc_r+0xb4>)
    e98a:	6814      	ldr	r4, [r2, #0]
    e98c:	0021      	movs	r1, r4
    e98e:	2900      	cmp	r1, #0
    e990:	d119      	bne.n	e9c6 <_malloc_r+0x5a>
    e992:	4c24      	ldr	r4, [pc, #144]	; (ea24 <_malloc_r+0xb8>)
    e994:	6823      	ldr	r3, [r4, #0]
    e996:	2b00      	cmp	r3, #0
    e998:	d103      	bne.n	e9a2 <_malloc_r+0x36>
    e99a:	0030      	movs	r0, r6
    e99c:	f000 fd4c 	bl	f438 <_sbrk_r>
    e9a0:	6020      	str	r0, [r4, #0]
    e9a2:	0029      	movs	r1, r5
    e9a4:	0030      	movs	r0, r6
    e9a6:	f000 fd47 	bl	f438 <_sbrk_r>
    e9aa:	1c43      	adds	r3, r0, #1
    e9ac:	d12c      	bne.n	ea08 <_malloc_r+0x9c>
    e9ae:	230c      	movs	r3, #12
    e9b0:	0030      	movs	r0, r6
    e9b2:	6033      	str	r3, [r6, #0]
    e9b4:	f002 f8d0 	bl	10b58 <__malloc_unlock>
    e9b8:	e003      	b.n	e9c2 <_malloc_r+0x56>
    e9ba:	2d00      	cmp	r5, #0
    e9bc:	dadf      	bge.n	e97e <_malloc_r+0x12>
    e9be:	230c      	movs	r3, #12
    e9c0:	6033      	str	r3, [r6, #0]
    e9c2:	2000      	movs	r0, #0
    e9c4:	bd70      	pop	{r4, r5, r6, pc}
    e9c6:	680b      	ldr	r3, [r1, #0]
    e9c8:	1b5b      	subs	r3, r3, r5
    e9ca:	d41a      	bmi.n	ea02 <_malloc_r+0x96>
    e9cc:	2b0b      	cmp	r3, #11
    e9ce:	d903      	bls.n	e9d8 <_malloc_r+0x6c>
    e9d0:	600b      	str	r3, [r1, #0]
    e9d2:	18cc      	adds	r4, r1, r3
    e9d4:	6025      	str	r5, [r4, #0]
    e9d6:	e003      	b.n	e9e0 <_malloc_r+0x74>
    e9d8:	428c      	cmp	r4, r1
    e9da:	d10e      	bne.n	e9fa <_malloc_r+0x8e>
    e9dc:	6863      	ldr	r3, [r4, #4]
    e9de:	6013      	str	r3, [r2, #0]
    e9e0:	0030      	movs	r0, r6
    e9e2:	f002 f8b9 	bl	10b58 <__malloc_unlock>
    e9e6:	0020      	movs	r0, r4
    e9e8:	2207      	movs	r2, #7
    e9ea:	300b      	adds	r0, #11
    e9ec:	1d23      	adds	r3, r4, #4
    e9ee:	4390      	bics	r0, r2
    e9f0:	1ac3      	subs	r3, r0, r3
    e9f2:	d0e7      	beq.n	e9c4 <_malloc_r+0x58>
    e9f4:	425a      	negs	r2, r3
    e9f6:	50e2      	str	r2, [r4, r3]
    e9f8:	e7e4      	b.n	e9c4 <_malloc_r+0x58>
    e9fa:	684b      	ldr	r3, [r1, #4]
    e9fc:	6063      	str	r3, [r4, #4]
    e9fe:	000c      	movs	r4, r1
    ea00:	e7ee      	b.n	e9e0 <_malloc_r+0x74>
    ea02:	000c      	movs	r4, r1
    ea04:	6849      	ldr	r1, [r1, #4]
    ea06:	e7c2      	b.n	e98e <_malloc_r+0x22>
    ea08:	2303      	movs	r3, #3
    ea0a:	1cc4      	adds	r4, r0, #3
    ea0c:	439c      	bics	r4, r3
    ea0e:	42a0      	cmp	r0, r4
    ea10:	d0e0      	beq.n	e9d4 <_malloc_r+0x68>
    ea12:	1a21      	subs	r1, r4, r0
    ea14:	0030      	movs	r0, r6
    ea16:	f000 fd0f 	bl	f438 <_sbrk_r>
    ea1a:	1c43      	adds	r3, r0, #1
    ea1c:	d1da      	bne.n	e9d4 <_malloc_r+0x68>
    ea1e:	e7c6      	b.n	e9ae <_malloc_r+0x42>
    ea20:	20000294 	.word	0x20000294
    ea24:	20000298 	.word	0x20000298

0000ea28 <__cvt>:
    ea28:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea2a:	b08b      	sub	sp, #44	; 0x2c
    ea2c:	0014      	movs	r4, r2
    ea2e:	1e1d      	subs	r5, r3, #0
    ea30:	9912      	ldr	r1, [sp, #72]	; 0x48
    ea32:	da53      	bge.n	eadc <__cvt+0xb4>
    ea34:	2480      	movs	r4, #128	; 0x80
    ea36:	0624      	lsls	r4, r4, #24
    ea38:	191b      	adds	r3, r3, r4
    ea3a:	001d      	movs	r5, r3
    ea3c:	0014      	movs	r4, r2
    ea3e:	232d      	movs	r3, #45	; 0x2d
    ea40:	700b      	strb	r3, [r1, #0]
    ea42:	2320      	movs	r3, #32
    ea44:	9e14      	ldr	r6, [sp, #80]	; 0x50
    ea46:	2203      	movs	r2, #3
    ea48:	439e      	bics	r6, r3
    ea4a:	2e46      	cmp	r6, #70	; 0x46
    ea4c:	d007      	beq.n	ea5e <__cvt+0x36>
    ea4e:	0033      	movs	r3, r6
    ea50:	3b45      	subs	r3, #69	; 0x45
    ea52:	4259      	negs	r1, r3
    ea54:	414b      	adcs	r3, r1
    ea56:	9910      	ldr	r1, [sp, #64]	; 0x40
    ea58:	3a01      	subs	r2, #1
    ea5a:	18cb      	adds	r3, r1, r3
    ea5c:	9310      	str	r3, [sp, #64]	; 0x40
    ea5e:	ab09      	add	r3, sp, #36	; 0x24
    ea60:	9304      	str	r3, [sp, #16]
    ea62:	ab08      	add	r3, sp, #32
    ea64:	9303      	str	r3, [sp, #12]
    ea66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ea68:	9200      	str	r2, [sp, #0]
    ea6a:	9302      	str	r3, [sp, #8]
    ea6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ea6e:	0022      	movs	r2, r4
    ea70:	9301      	str	r3, [sp, #4]
    ea72:	002b      	movs	r3, r5
    ea74:	f001 f876 	bl	fb64 <_dtoa_r>
    ea78:	0007      	movs	r7, r0
    ea7a:	2e47      	cmp	r6, #71	; 0x47
    ea7c:	d102      	bne.n	ea84 <__cvt+0x5c>
    ea7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ea80:	07db      	lsls	r3, r3, #31
    ea82:	d524      	bpl.n	eace <__cvt+0xa6>
    ea84:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ea86:	18fb      	adds	r3, r7, r3
    ea88:	9307      	str	r3, [sp, #28]
    ea8a:	2e46      	cmp	r6, #70	; 0x46
    ea8c:	d114      	bne.n	eab8 <__cvt+0x90>
    ea8e:	783b      	ldrb	r3, [r7, #0]
    ea90:	2b30      	cmp	r3, #48	; 0x30
    ea92:	d10c      	bne.n	eaae <__cvt+0x86>
    ea94:	2200      	movs	r2, #0
    ea96:	2300      	movs	r3, #0
    ea98:	0020      	movs	r0, r4
    ea9a:	0029      	movs	r1, r5
    ea9c:	f003 f8aa 	bl	11bf4 <__aeabi_dcmpeq>
    eaa0:	2800      	cmp	r0, #0
    eaa2:	d104      	bne.n	eaae <__cvt+0x86>
    eaa4:	2301      	movs	r3, #1
    eaa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    eaa8:	1a9b      	subs	r3, r3, r2
    eaaa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    eaac:	6013      	str	r3, [r2, #0]
    eaae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    eab0:	9a07      	ldr	r2, [sp, #28]
    eab2:	681b      	ldr	r3, [r3, #0]
    eab4:	18d3      	adds	r3, r2, r3
    eab6:	9307      	str	r3, [sp, #28]
    eab8:	2200      	movs	r2, #0
    eaba:	2300      	movs	r3, #0
    eabc:	0020      	movs	r0, r4
    eabe:	0029      	movs	r1, r5
    eac0:	f003 f898 	bl	11bf4 <__aeabi_dcmpeq>
    eac4:	2230      	movs	r2, #48	; 0x30
    eac6:	2800      	cmp	r0, #0
    eac8:	d00d      	beq.n	eae6 <__cvt+0xbe>
    eaca:	9b07      	ldr	r3, [sp, #28]
    eacc:	9309      	str	r3, [sp, #36]	; 0x24
    eace:	0038      	movs	r0, r7
    ead0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ead2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ead4:	1bdb      	subs	r3, r3, r7
    ead6:	6013      	str	r3, [r2, #0]
    ead8:	b00b      	add	sp, #44	; 0x2c
    eada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eadc:	2300      	movs	r3, #0
    eade:	e7af      	b.n	ea40 <__cvt+0x18>
    eae0:	1c59      	adds	r1, r3, #1
    eae2:	9109      	str	r1, [sp, #36]	; 0x24
    eae4:	701a      	strb	r2, [r3, #0]
    eae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eae8:	9907      	ldr	r1, [sp, #28]
    eaea:	4299      	cmp	r1, r3
    eaec:	d8f8      	bhi.n	eae0 <__cvt+0xb8>
    eaee:	e7ee      	b.n	eace <__cvt+0xa6>

0000eaf0 <__exponent>:
    eaf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    eaf2:	232b      	movs	r3, #43	; 0x2b
    eaf4:	b085      	sub	sp, #20
    eaf6:	0007      	movs	r7, r0
    eaf8:	000c      	movs	r4, r1
    eafa:	7002      	strb	r2, [r0, #0]
    eafc:	1c86      	adds	r6, r0, #2
    eafe:	2900      	cmp	r1, #0
    eb00:	da01      	bge.n	eb06 <__exponent+0x16>
    eb02:	232d      	movs	r3, #45	; 0x2d
    eb04:	424c      	negs	r4, r1
    eb06:	707b      	strb	r3, [r7, #1]
    eb08:	2c09      	cmp	r4, #9
    eb0a:	dd23      	ble.n	eb54 <__exponent+0x64>
    eb0c:	ab02      	add	r3, sp, #8
    eb0e:	1ddd      	adds	r5, r3, #7
    eb10:	1e6b      	subs	r3, r5, #1
    eb12:	0020      	movs	r0, r4
    eb14:	210a      	movs	r1, #10
    eb16:	9301      	str	r3, [sp, #4]
    eb18:	f003 f856 	bl	11bc8 <__aeabi_idivmod>
    eb1c:	1e6b      	subs	r3, r5, #1
    eb1e:	3130      	adds	r1, #48	; 0x30
    eb20:	7019      	strb	r1, [r3, #0]
    eb22:	0020      	movs	r0, r4
    eb24:	210a      	movs	r1, #10
    eb26:	f002 ff69 	bl	119fc <__divsi3>
    eb2a:	0004      	movs	r4, r0
    eb2c:	2809      	cmp	r0, #9
    eb2e:	dc0a      	bgt.n	eb46 <__exponent+0x56>
    eb30:	3d02      	subs	r5, #2
    eb32:	3430      	adds	r4, #48	; 0x30
    eb34:	702c      	strb	r4, [r5, #0]
    eb36:	ab02      	add	r3, sp, #8
    eb38:	3307      	adds	r3, #7
    eb3a:	0030      	movs	r0, r6
    eb3c:	42ab      	cmp	r3, r5
    eb3e:	d804      	bhi.n	eb4a <__exponent+0x5a>
    eb40:	1bc0      	subs	r0, r0, r7
    eb42:	b005      	add	sp, #20
    eb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb46:	9d01      	ldr	r5, [sp, #4]
    eb48:	e7e2      	b.n	eb10 <__exponent+0x20>
    eb4a:	782b      	ldrb	r3, [r5, #0]
    eb4c:	3501      	adds	r5, #1
    eb4e:	7033      	strb	r3, [r6, #0]
    eb50:	3601      	adds	r6, #1
    eb52:	e7f0      	b.n	eb36 <__exponent+0x46>
    eb54:	2330      	movs	r3, #48	; 0x30
    eb56:	18e4      	adds	r4, r4, r3
    eb58:	7033      	strb	r3, [r6, #0]
    eb5a:	1cb0      	adds	r0, r6, #2
    eb5c:	7074      	strb	r4, [r6, #1]
    eb5e:	e7ef      	b.n	eb40 <__exponent+0x50>

0000eb60 <_printf_float>:
    eb60:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb62:	b095      	sub	sp, #84	; 0x54
    eb64:	000c      	movs	r4, r1
    eb66:	920a      	str	r2, [sp, #40]	; 0x28
    eb68:	930b      	str	r3, [sp, #44]	; 0x2c
    eb6a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    eb6c:	9009      	str	r0, [sp, #36]	; 0x24
    eb6e:	f001 ff6f 	bl	10a50 <_localeconv_r>
    eb72:	6803      	ldr	r3, [r0, #0]
    eb74:	0018      	movs	r0, r3
    eb76:	930d      	str	r3, [sp, #52]	; 0x34
    eb78:	f000 fd77 	bl	f66a <strlen>
    eb7c:	2300      	movs	r3, #0
    eb7e:	9312      	str	r3, [sp, #72]	; 0x48
    eb80:	6823      	ldr	r3, [r4, #0]
    eb82:	900e      	str	r0, [sp, #56]	; 0x38
    eb84:	930c      	str	r3, [sp, #48]	; 0x30
    eb86:	990c      	ldr	r1, [sp, #48]	; 0x30
    eb88:	7e27      	ldrb	r7, [r4, #24]
    eb8a:	682b      	ldr	r3, [r5, #0]
    eb8c:	2207      	movs	r2, #7
    eb8e:	05c9      	lsls	r1, r1, #23
    eb90:	d547      	bpl.n	ec22 <_printf_float+0xc2>
    eb92:	189b      	adds	r3, r3, r2
    eb94:	4393      	bics	r3, r2
    eb96:	001a      	movs	r2, r3
    eb98:	3208      	adds	r2, #8
    eb9a:	602a      	str	r2, [r5, #0]
    eb9c:	681a      	ldr	r2, [r3, #0]
    eb9e:	685b      	ldr	r3, [r3, #4]
    eba0:	64a2      	str	r2, [r4, #72]	; 0x48
    eba2:	64e3      	str	r3, [r4, #76]	; 0x4c
    eba4:	2201      	movs	r2, #1
    eba6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    eba8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    ebaa:	006b      	lsls	r3, r5, #1
    ebac:	085b      	lsrs	r3, r3, #1
    ebae:	930f      	str	r3, [sp, #60]	; 0x3c
    ebb0:	4252      	negs	r2, r2
    ebb2:	4ba7      	ldr	r3, [pc, #668]	; (ee50 <_printf_float+0x2f0>)
    ebb4:	0030      	movs	r0, r6
    ebb6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ebb8:	f005 f806 	bl	13bc8 <__aeabi_dcmpun>
    ebbc:	2800      	cmp	r0, #0
    ebbe:	d000      	beq.n	ebc2 <_printf_float+0x62>
    ebc0:	e206      	b.n	efd0 <_printf_float+0x470>
    ebc2:	2201      	movs	r2, #1
    ebc4:	4ba2      	ldr	r3, [pc, #648]	; (ee50 <_printf_float+0x2f0>)
    ebc6:	4252      	negs	r2, r2
    ebc8:	0030      	movs	r0, r6
    ebca:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ebcc:	f003 f822 	bl	11c14 <__aeabi_dcmple>
    ebd0:	2800      	cmp	r0, #0
    ebd2:	d000      	beq.n	ebd6 <_printf_float+0x76>
    ebd4:	e1fc      	b.n	efd0 <_printf_float+0x470>
    ebd6:	2200      	movs	r2, #0
    ebd8:	2300      	movs	r3, #0
    ebda:	0030      	movs	r0, r6
    ebdc:	0029      	movs	r1, r5
    ebde:	f003 f80f 	bl	11c00 <__aeabi_dcmplt>
    ebe2:	2800      	cmp	r0, #0
    ebe4:	d003      	beq.n	ebee <_printf_float+0x8e>
    ebe6:	0023      	movs	r3, r4
    ebe8:	222d      	movs	r2, #45	; 0x2d
    ebea:	3343      	adds	r3, #67	; 0x43
    ebec:	701a      	strb	r2, [r3, #0]
    ebee:	4d99      	ldr	r5, [pc, #612]	; (ee54 <_printf_float+0x2f4>)
    ebf0:	2f47      	cmp	r7, #71	; 0x47
    ebf2:	d800      	bhi.n	ebf6 <_printf_float+0x96>
    ebf4:	4d98      	ldr	r5, [pc, #608]	; (ee58 <_printf_float+0x2f8>)
    ebf6:	2303      	movs	r3, #3
    ebf8:	2600      	movs	r6, #0
    ebfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ebfc:	6123      	str	r3, [r4, #16]
    ebfe:	3301      	adds	r3, #1
    ec00:	439a      	bics	r2, r3
    ec02:	6022      	str	r2, [r4, #0]
    ec04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec06:	aa13      	add	r2, sp, #76	; 0x4c
    ec08:	9300      	str	r3, [sp, #0]
    ec0a:	0021      	movs	r1, r4
    ec0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ec0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    ec10:	f000 f9f2 	bl	eff8 <_printf_common>
    ec14:	1c43      	adds	r3, r0, #1
    ec16:	d000      	beq.n	ec1a <_printf_float+0xba>
    ec18:	e09c      	b.n	ed54 <_printf_float+0x1f4>
    ec1a:	2001      	movs	r0, #1
    ec1c:	4240      	negs	r0, r0
    ec1e:	b015      	add	sp, #84	; 0x54
    ec20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec22:	3307      	adds	r3, #7
    ec24:	e7b6      	b.n	eb94 <_printf_float+0x34>
    ec26:	2380      	movs	r3, #128	; 0x80
    ec28:	6862      	ldr	r2, [r4, #4]
    ec2a:	00db      	lsls	r3, r3, #3
    ec2c:	1c51      	adds	r1, r2, #1
    ec2e:	d145      	bne.n	ecbc <_printf_float+0x15c>
    ec30:	3207      	adds	r2, #7
    ec32:	6062      	str	r2, [r4, #4]
    ec34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ec36:	2100      	movs	r1, #0
    ec38:	4313      	orrs	r3, r2
    ec3a:	aa12      	add	r2, sp, #72	; 0x48
    ec3c:	9205      	str	r2, [sp, #20]
    ec3e:	aa11      	add	r2, sp, #68	; 0x44
    ec40:	9203      	str	r2, [sp, #12]
    ec42:	2223      	movs	r2, #35	; 0x23
    ec44:	6023      	str	r3, [r4, #0]
    ec46:	9106      	str	r1, [sp, #24]
    ec48:	9301      	str	r3, [sp, #4]
    ec4a:	a908      	add	r1, sp, #32
    ec4c:	6863      	ldr	r3, [r4, #4]
    ec4e:	1852      	adds	r2, r2, r1
    ec50:	9202      	str	r2, [sp, #8]
    ec52:	9300      	str	r3, [sp, #0]
    ec54:	0032      	movs	r2, r6
    ec56:	002b      	movs	r3, r5
    ec58:	9704      	str	r7, [sp, #16]
    ec5a:	9809      	ldr	r0, [sp, #36]	; 0x24
    ec5c:	f7ff fee4 	bl	ea28 <__cvt>
    ec60:	2320      	movs	r3, #32
    ec62:	003a      	movs	r2, r7
    ec64:	0005      	movs	r5, r0
    ec66:	439a      	bics	r2, r3
    ec68:	2a47      	cmp	r2, #71	; 0x47
    ec6a:	d107      	bne.n	ec7c <_printf_float+0x11c>
    ec6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec6e:	1cda      	adds	r2, r3, #3
    ec70:	db02      	blt.n	ec78 <_printf_float+0x118>
    ec72:	6862      	ldr	r2, [r4, #4]
    ec74:	4293      	cmp	r3, r2
    ec76:	dd5b      	ble.n	ed30 <_printf_float+0x1d0>
    ec78:	3f02      	subs	r7, #2
    ec7a:	b2ff      	uxtb	r7, r7
    ec7c:	9911      	ldr	r1, [sp, #68]	; 0x44
    ec7e:	2f65      	cmp	r7, #101	; 0x65
    ec80:	d83b      	bhi.n	ecfa <_printf_float+0x19a>
    ec82:	0020      	movs	r0, r4
    ec84:	3901      	subs	r1, #1
    ec86:	003a      	movs	r2, r7
    ec88:	3050      	adds	r0, #80	; 0x50
    ec8a:	9111      	str	r1, [sp, #68]	; 0x44
    ec8c:	f7ff ff30 	bl	eaf0 <__exponent>
    ec90:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ec92:	0006      	movs	r6, r0
    ec94:	1883      	adds	r3, r0, r2
    ec96:	6123      	str	r3, [r4, #16]
    ec98:	2a01      	cmp	r2, #1
    ec9a:	dc02      	bgt.n	eca2 <_printf_float+0x142>
    ec9c:	6822      	ldr	r2, [r4, #0]
    ec9e:	07d2      	lsls	r2, r2, #31
    eca0:	d501      	bpl.n	eca6 <_printf_float+0x146>
    eca2:	3301      	adds	r3, #1
    eca4:	6123      	str	r3, [r4, #16]
    eca6:	2323      	movs	r3, #35	; 0x23
    eca8:	aa08      	add	r2, sp, #32
    ecaa:	189b      	adds	r3, r3, r2
    ecac:	781b      	ldrb	r3, [r3, #0]
    ecae:	2b00      	cmp	r3, #0
    ecb0:	d0a8      	beq.n	ec04 <_printf_float+0xa4>
    ecb2:	0023      	movs	r3, r4
    ecb4:	222d      	movs	r2, #45	; 0x2d
    ecb6:	3343      	adds	r3, #67	; 0x43
    ecb8:	701a      	strb	r2, [r3, #0]
    ecba:	e7a3      	b.n	ec04 <_printf_float+0xa4>
    ecbc:	2f67      	cmp	r7, #103	; 0x67
    ecbe:	d001      	beq.n	ecc4 <_printf_float+0x164>
    ecc0:	2f47      	cmp	r7, #71	; 0x47
    ecc2:	d1b7      	bne.n	ec34 <_printf_float+0xd4>
    ecc4:	2a00      	cmp	r2, #0
    ecc6:	d016      	beq.n	ecf6 <_printf_float+0x196>
    ecc8:	990c      	ldr	r1, [sp, #48]	; 0x30
    ecca:	a808      	add	r0, sp, #32
    eccc:	430b      	orrs	r3, r1
    ecce:	2100      	movs	r1, #0
    ecd0:	9106      	str	r1, [sp, #24]
    ecd2:	a912      	add	r1, sp, #72	; 0x48
    ecd4:	9105      	str	r1, [sp, #20]
    ecd6:	a911      	add	r1, sp, #68	; 0x44
    ecd8:	9103      	str	r1, [sp, #12]
    ecda:	2123      	movs	r1, #35	; 0x23
    ecdc:	1809      	adds	r1, r1, r0
    ecde:	6023      	str	r3, [r4, #0]
    ece0:	9301      	str	r3, [sp, #4]
    ece2:	9200      	str	r2, [sp, #0]
    ece4:	002b      	movs	r3, r5
    ece6:	9704      	str	r7, [sp, #16]
    ece8:	9102      	str	r1, [sp, #8]
    ecea:	0032      	movs	r2, r6
    ecec:	9809      	ldr	r0, [sp, #36]	; 0x24
    ecee:	f7ff fe9b 	bl	ea28 <__cvt>
    ecf2:	0005      	movs	r5, r0
    ecf4:	e7ba      	b.n	ec6c <_printf_float+0x10c>
    ecf6:	2201      	movs	r2, #1
    ecf8:	e79b      	b.n	ec32 <_printf_float+0xd2>
    ecfa:	2f66      	cmp	r7, #102	; 0x66
    ecfc:	d119      	bne.n	ed32 <_printf_float+0x1d2>
    ecfe:	6863      	ldr	r3, [r4, #4]
    ed00:	2900      	cmp	r1, #0
    ed02:	dd0c      	ble.n	ed1e <_printf_float+0x1be>
    ed04:	6121      	str	r1, [r4, #16]
    ed06:	2b00      	cmp	r3, #0
    ed08:	d102      	bne.n	ed10 <_printf_float+0x1b0>
    ed0a:	6822      	ldr	r2, [r4, #0]
    ed0c:	07d2      	lsls	r2, r2, #31
    ed0e:	d502      	bpl.n	ed16 <_printf_float+0x1b6>
    ed10:	3301      	adds	r3, #1
    ed12:	185b      	adds	r3, r3, r1
    ed14:	6123      	str	r3, [r4, #16]
    ed16:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ed18:	2600      	movs	r6, #0
    ed1a:	65a3      	str	r3, [r4, #88]	; 0x58
    ed1c:	e7c3      	b.n	eca6 <_printf_float+0x146>
    ed1e:	2b00      	cmp	r3, #0
    ed20:	d103      	bne.n	ed2a <_printf_float+0x1ca>
    ed22:	2201      	movs	r2, #1
    ed24:	6821      	ldr	r1, [r4, #0]
    ed26:	4211      	tst	r1, r2
    ed28:	d000      	beq.n	ed2c <_printf_float+0x1cc>
    ed2a:	1c9a      	adds	r2, r3, #2
    ed2c:	6122      	str	r2, [r4, #16]
    ed2e:	e7f2      	b.n	ed16 <_printf_float+0x1b6>
    ed30:	2767      	movs	r7, #103	; 0x67
    ed32:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ed34:	9812      	ldr	r0, [sp, #72]	; 0x48
    ed36:	4283      	cmp	r3, r0
    ed38:	db05      	blt.n	ed46 <_printf_float+0x1e6>
    ed3a:	6822      	ldr	r2, [r4, #0]
    ed3c:	6123      	str	r3, [r4, #16]
    ed3e:	07d2      	lsls	r2, r2, #31
    ed40:	d5e9      	bpl.n	ed16 <_printf_float+0x1b6>
    ed42:	3301      	adds	r3, #1
    ed44:	e7e6      	b.n	ed14 <_printf_float+0x1b4>
    ed46:	2201      	movs	r2, #1
    ed48:	2b00      	cmp	r3, #0
    ed4a:	dc01      	bgt.n	ed50 <_printf_float+0x1f0>
    ed4c:	1892      	adds	r2, r2, r2
    ed4e:	1ad2      	subs	r2, r2, r3
    ed50:	1812      	adds	r2, r2, r0
    ed52:	e7eb      	b.n	ed2c <_printf_float+0x1cc>
    ed54:	6822      	ldr	r2, [r4, #0]
    ed56:	0553      	lsls	r3, r2, #21
    ed58:	d408      	bmi.n	ed6c <_printf_float+0x20c>
    ed5a:	6923      	ldr	r3, [r4, #16]
    ed5c:	002a      	movs	r2, r5
    ed5e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ed60:	9809      	ldr	r0, [sp, #36]	; 0x24
    ed62:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ed64:	47a8      	blx	r5
    ed66:	1c43      	adds	r3, r0, #1
    ed68:	d129      	bne.n	edbe <_printf_float+0x25e>
    ed6a:	e756      	b.n	ec1a <_printf_float+0xba>
    ed6c:	2f65      	cmp	r7, #101	; 0x65
    ed6e:	d800      	bhi.n	ed72 <_printf_float+0x212>
    ed70:	e0dc      	b.n	ef2c <_printf_float+0x3cc>
    ed72:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    ed74:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    ed76:	2200      	movs	r2, #0
    ed78:	2300      	movs	r3, #0
    ed7a:	f002 ff3b 	bl	11bf4 <__aeabi_dcmpeq>
    ed7e:	2800      	cmp	r0, #0
    ed80:	d035      	beq.n	edee <_printf_float+0x28e>
    ed82:	2301      	movs	r3, #1
    ed84:	4a35      	ldr	r2, [pc, #212]	; (ee5c <_printf_float+0x2fc>)
    ed86:	990a      	ldr	r1, [sp, #40]	; 0x28
    ed88:	9809      	ldr	r0, [sp, #36]	; 0x24
    ed8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ed8c:	47a8      	blx	r5
    ed8e:	1c43      	adds	r3, r0, #1
    ed90:	d100      	bne.n	ed94 <_printf_float+0x234>
    ed92:	e742      	b.n	ec1a <_printf_float+0xba>
    ed94:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ed96:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ed98:	4293      	cmp	r3, r2
    ed9a:	db02      	blt.n	eda2 <_printf_float+0x242>
    ed9c:	6823      	ldr	r3, [r4, #0]
    ed9e:	07db      	lsls	r3, r3, #31
    eda0:	d50d      	bpl.n	edbe <_printf_float+0x25e>
    eda2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    eda4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eda6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    eda8:	990a      	ldr	r1, [sp, #40]	; 0x28
    edaa:	9809      	ldr	r0, [sp, #36]	; 0x24
    edac:	47a8      	blx	r5
    edae:	2500      	movs	r5, #0
    edb0:	1c43      	adds	r3, r0, #1
    edb2:	d100      	bne.n	edb6 <_printf_float+0x256>
    edb4:	e731      	b.n	ec1a <_printf_float+0xba>
    edb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    edb8:	3b01      	subs	r3, #1
    edba:	429d      	cmp	r5, r3
    edbc:	db0b      	blt.n	edd6 <_printf_float+0x276>
    edbe:	6823      	ldr	r3, [r4, #0]
    edc0:	2500      	movs	r5, #0
    edc2:	079b      	lsls	r3, r3, #30
    edc4:	d500      	bpl.n	edc8 <_printf_float+0x268>
    edc6:	e0fd      	b.n	efc4 <_printf_float+0x464>
    edc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    edca:	68e0      	ldr	r0, [r4, #12]
    edcc:	4298      	cmp	r0, r3
    edce:	db00      	blt.n	edd2 <_printf_float+0x272>
    edd0:	e725      	b.n	ec1e <_printf_float+0xbe>
    edd2:	0018      	movs	r0, r3
    edd4:	e723      	b.n	ec1e <_printf_float+0xbe>
    edd6:	0022      	movs	r2, r4
    edd8:	2301      	movs	r3, #1
    edda:	321a      	adds	r2, #26
    eddc:	990a      	ldr	r1, [sp, #40]	; 0x28
    edde:	9809      	ldr	r0, [sp, #36]	; 0x24
    ede0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ede2:	47b0      	blx	r6
    ede4:	1c43      	adds	r3, r0, #1
    ede6:	d100      	bne.n	edea <_printf_float+0x28a>
    ede8:	e717      	b.n	ec1a <_printf_float+0xba>
    edea:	3501      	adds	r5, #1
    edec:	e7e3      	b.n	edb6 <_printf_float+0x256>
    edee:	9b11      	ldr	r3, [sp, #68]	; 0x44
    edf0:	2b00      	cmp	r3, #0
    edf2:	dc35      	bgt.n	ee60 <_printf_float+0x300>
    edf4:	2301      	movs	r3, #1
    edf6:	4a19      	ldr	r2, [pc, #100]	; (ee5c <_printf_float+0x2fc>)
    edf8:	990a      	ldr	r1, [sp, #40]	; 0x28
    edfa:	9809      	ldr	r0, [sp, #36]	; 0x24
    edfc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    edfe:	47b0      	blx	r6
    ee00:	1c43      	adds	r3, r0, #1
    ee02:	d100      	bne.n	ee06 <_printf_float+0x2a6>
    ee04:	e709      	b.n	ec1a <_printf_float+0xba>
    ee06:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ee08:	2b00      	cmp	r3, #0
    ee0a:	d105      	bne.n	ee18 <_printf_float+0x2b8>
    ee0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ee0e:	2b00      	cmp	r3, #0
    ee10:	d102      	bne.n	ee18 <_printf_float+0x2b8>
    ee12:	6823      	ldr	r3, [r4, #0]
    ee14:	07db      	lsls	r3, r3, #31
    ee16:	d5d2      	bpl.n	edbe <_printf_float+0x25e>
    ee18:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ee1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ee1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ee20:	9809      	ldr	r0, [sp, #36]	; 0x24
    ee22:	47b0      	blx	r6
    ee24:	2600      	movs	r6, #0
    ee26:	1c43      	adds	r3, r0, #1
    ee28:	d100      	bne.n	ee2c <_printf_float+0x2cc>
    ee2a:	e6f6      	b.n	ec1a <_printf_float+0xba>
    ee2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ee2e:	425b      	negs	r3, r3
    ee30:	429e      	cmp	r6, r3
    ee32:	db01      	blt.n	ee38 <_printf_float+0x2d8>
    ee34:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ee36:	e791      	b.n	ed5c <_printf_float+0x1fc>
    ee38:	0022      	movs	r2, r4
    ee3a:	2301      	movs	r3, #1
    ee3c:	321a      	adds	r2, #26
    ee3e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ee40:	9809      	ldr	r0, [sp, #36]	; 0x24
    ee42:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ee44:	47b8      	blx	r7
    ee46:	1c43      	adds	r3, r0, #1
    ee48:	d100      	bne.n	ee4c <_printf_float+0x2ec>
    ee4a:	e6e6      	b.n	ec1a <_printf_float+0xba>
    ee4c:	3601      	adds	r6, #1
    ee4e:	e7ed      	b.n	ee2c <_printf_float+0x2cc>
    ee50:	7fefffff 	.word	0x7fefffff
    ee54:	00016642 	.word	0x00016642
    ee58:	0001663e 	.word	0x0001663e
    ee5c:	0001664e 	.word	0x0001664e
    ee60:	6da3      	ldr	r3, [r4, #88]	; 0x58
    ee62:	9e12      	ldr	r6, [sp, #72]	; 0x48
    ee64:	429e      	cmp	r6, r3
    ee66:	dd00      	ble.n	ee6a <_printf_float+0x30a>
    ee68:	001e      	movs	r6, r3
    ee6a:	2e00      	cmp	r6, #0
    ee6c:	dc35      	bgt.n	eeda <_printf_float+0x37a>
    ee6e:	2300      	movs	r3, #0
    ee70:	930c      	str	r3, [sp, #48]	; 0x30
    ee72:	43f3      	mvns	r3, r6
    ee74:	17db      	asrs	r3, r3, #31
    ee76:	930f      	str	r3, [sp, #60]	; 0x3c
    ee78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ee7a:	6da7      	ldr	r7, [r4, #88]	; 0x58
    ee7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ee7e:	4033      	ands	r3, r6
    ee80:	1afb      	subs	r3, r7, r3
    ee82:	429a      	cmp	r2, r3
    ee84:	db32      	blt.n	eeec <_printf_float+0x38c>
    ee86:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ee88:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ee8a:	4293      	cmp	r3, r2
    ee8c:	db3c      	blt.n	ef08 <_printf_float+0x3a8>
    ee8e:	6823      	ldr	r3, [r4, #0]
    ee90:	07db      	lsls	r3, r3, #31
    ee92:	d439      	bmi.n	ef08 <_printf_float+0x3a8>
    ee94:	9e12      	ldr	r6, [sp, #72]	; 0x48
    ee96:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ee98:	1bf3      	subs	r3, r6, r7
    ee9a:	1ab6      	subs	r6, r6, r2
    ee9c:	429e      	cmp	r6, r3
    ee9e:	dd00      	ble.n	eea2 <_printf_float+0x342>
    eea0:	001e      	movs	r6, r3
    eea2:	2e00      	cmp	r6, #0
    eea4:	dc39      	bgt.n	ef1a <_printf_float+0x3ba>
    eea6:	43f7      	mvns	r7, r6
    eea8:	2500      	movs	r5, #0
    eeaa:	17fb      	asrs	r3, r7, #31
    eeac:	930c      	str	r3, [sp, #48]	; 0x30
    eeae:	9a11      	ldr	r2, [sp, #68]	; 0x44
    eeb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eeb2:	990c      	ldr	r1, [sp, #48]	; 0x30
    eeb4:	1a9b      	subs	r3, r3, r2
    eeb6:	0032      	movs	r2, r6
    eeb8:	400a      	ands	r2, r1
    eeba:	1a9b      	subs	r3, r3, r2
    eebc:	429d      	cmp	r5, r3
    eebe:	db00      	blt.n	eec2 <_printf_float+0x362>
    eec0:	e77d      	b.n	edbe <_printf_float+0x25e>
    eec2:	0022      	movs	r2, r4
    eec4:	2301      	movs	r3, #1
    eec6:	321a      	adds	r2, #26
    eec8:	990a      	ldr	r1, [sp, #40]	; 0x28
    eeca:	9809      	ldr	r0, [sp, #36]	; 0x24
    eecc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    eece:	47b8      	blx	r7
    eed0:	1c43      	adds	r3, r0, #1
    eed2:	d100      	bne.n	eed6 <_printf_float+0x376>
    eed4:	e6a1      	b.n	ec1a <_printf_float+0xba>
    eed6:	3501      	adds	r5, #1
    eed8:	e7e9      	b.n	eeae <_printf_float+0x34e>
    eeda:	0033      	movs	r3, r6
    eedc:	002a      	movs	r2, r5
    eede:	990a      	ldr	r1, [sp, #40]	; 0x28
    eee0:	9809      	ldr	r0, [sp, #36]	; 0x24
    eee2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    eee4:	47b8      	blx	r7
    eee6:	1c43      	adds	r3, r0, #1
    eee8:	d1c1      	bne.n	ee6e <_printf_float+0x30e>
    eeea:	e696      	b.n	ec1a <_printf_float+0xba>
    eeec:	0022      	movs	r2, r4
    eeee:	2301      	movs	r3, #1
    eef0:	321a      	adds	r2, #26
    eef2:	990a      	ldr	r1, [sp, #40]	; 0x28
    eef4:	9809      	ldr	r0, [sp, #36]	; 0x24
    eef6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    eef8:	47b8      	blx	r7
    eefa:	1c43      	adds	r3, r0, #1
    eefc:	d100      	bne.n	ef00 <_printf_float+0x3a0>
    eefe:	e68c      	b.n	ec1a <_printf_float+0xba>
    ef00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef02:	3301      	adds	r3, #1
    ef04:	930c      	str	r3, [sp, #48]	; 0x30
    ef06:	e7b7      	b.n	ee78 <_printf_float+0x318>
    ef08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ef0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ef0c:	990a      	ldr	r1, [sp, #40]	; 0x28
    ef0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    ef10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ef12:	47b0      	blx	r6
    ef14:	1c43      	adds	r3, r0, #1
    ef16:	d1bd      	bne.n	ee94 <_printf_float+0x334>
    ef18:	e67f      	b.n	ec1a <_printf_float+0xba>
    ef1a:	19ea      	adds	r2, r5, r7
    ef1c:	0033      	movs	r3, r6
    ef1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ef20:	9809      	ldr	r0, [sp, #36]	; 0x24
    ef22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ef24:	47a8      	blx	r5
    ef26:	1c43      	adds	r3, r0, #1
    ef28:	d1bd      	bne.n	eea6 <_printf_float+0x346>
    ef2a:	e676      	b.n	ec1a <_printf_float+0xba>
    ef2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ef2e:	2b01      	cmp	r3, #1
    ef30:	dc02      	bgt.n	ef38 <_printf_float+0x3d8>
    ef32:	2301      	movs	r3, #1
    ef34:	421a      	tst	r2, r3
    ef36:	d038      	beq.n	efaa <_printf_float+0x44a>
    ef38:	2301      	movs	r3, #1
    ef3a:	002a      	movs	r2, r5
    ef3c:	990a      	ldr	r1, [sp, #40]	; 0x28
    ef3e:	9809      	ldr	r0, [sp, #36]	; 0x24
    ef40:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ef42:	47b8      	blx	r7
    ef44:	1c43      	adds	r3, r0, #1
    ef46:	d100      	bne.n	ef4a <_printf_float+0x3ea>
    ef48:	e667      	b.n	ec1a <_printf_float+0xba>
    ef4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ef4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ef4e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ef50:	9809      	ldr	r0, [sp, #36]	; 0x24
    ef52:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ef54:	47b8      	blx	r7
    ef56:	1c43      	adds	r3, r0, #1
    ef58:	d100      	bne.n	ef5c <_printf_float+0x3fc>
    ef5a:	e65e      	b.n	ec1a <_printf_float+0xba>
    ef5c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    ef5e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    ef60:	2200      	movs	r2, #0
    ef62:	2300      	movs	r3, #0
    ef64:	f002 fe46 	bl	11bf4 <__aeabi_dcmpeq>
    ef68:	2800      	cmp	r0, #0
    ef6a:	d008      	beq.n	ef7e <_printf_float+0x41e>
    ef6c:	2500      	movs	r5, #0
    ef6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ef70:	3b01      	subs	r3, #1
    ef72:	429d      	cmp	r5, r3
    ef74:	db0d      	blt.n	ef92 <_printf_float+0x432>
    ef76:	0022      	movs	r2, r4
    ef78:	0033      	movs	r3, r6
    ef7a:	3250      	adds	r2, #80	; 0x50
    ef7c:	e6ef      	b.n	ed5e <_printf_float+0x1fe>
    ef7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ef80:	1c6a      	adds	r2, r5, #1
    ef82:	3b01      	subs	r3, #1
    ef84:	990a      	ldr	r1, [sp, #40]	; 0x28
    ef86:	9809      	ldr	r0, [sp, #36]	; 0x24
    ef88:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    ef8a:	47a8      	blx	r5
    ef8c:	1c43      	adds	r3, r0, #1
    ef8e:	d1f2      	bne.n	ef76 <_printf_float+0x416>
    ef90:	e643      	b.n	ec1a <_printf_float+0xba>
    ef92:	0022      	movs	r2, r4
    ef94:	2301      	movs	r3, #1
    ef96:	321a      	adds	r2, #26
    ef98:	990a      	ldr	r1, [sp, #40]	; 0x28
    ef9a:	9809      	ldr	r0, [sp, #36]	; 0x24
    ef9c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ef9e:	47b8      	blx	r7
    efa0:	1c43      	adds	r3, r0, #1
    efa2:	d100      	bne.n	efa6 <_printf_float+0x446>
    efa4:	e639      	b.n	ec1a <_printf_float+0xba>
    efa6:	3501      	adds	r5, #1
    efa8:	e7e1      	b.n	ef6e <_printf_float+0x40e>
    efaa:	002a      	movs	r2, r5
    efac:	e7ea      	b.n	ef84 <_printf_float+0x424>
    efae:	0022      	movs	r2, r4
    efb0:	2301      	movs	r3, #1
    efb2:	3219      	adds	r2, #25
    efb4:	990a      	ldr	r1, [sp, #40]	; 0x28
    efb6:	9809      	ldr	r0, [sp, #36]	; 0x24
    efb8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    efba:	47b0      	blx	r6
    efbc:	1c43      	adds	r3, r0, #1
    efbe:	d100      	bne.n	efc2 <_printf_float+0x462>
    efc0:	e62b      	b.n	ec1a <_printf_float+0xba>
    efc2:	3501      	adds	r5, #1
    efc4:	68e3      	ldr	r3, [r4, #12]
    efc6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    efc8:	1a9b      	subs	r3, r3, r2
    efca:	429d      	cmp	r5, r3
    efcc:	dbef      	blt.n	efae <_printf_float+0x44e>
    efce:	e6fb      	b.n	edc8 <_printf_float+0x268>
    efd0:	0032      	movs	r2, r6
    efd2:	002b      	movs	r3, r5
    efd4:	0030      	movs	r0, r6
    efd6:	0029      	movs	r1, r5
    efd8:	f004 fdf6 	bl	13bc8 <__aeabi_dcmpun>
    efdc:	2800      	cmp	r0, #0
    efde:	d100      	bne.n	efe2 <_printf_float+0x482>
    efe0:	e621      	b.n	ec26 <_printf_float+0xc6>
    efe2:	4d03      	ldr	r5, [pc, #12]	; (eff0 <_printf_float+0x490>)
    efe4:	2f47      	cmp	r7, #71	; 0x47
    efe6:	d900      	bls.n	efea <_printf_float+0x48a>
    efe8:	e605      	b.n	ebf6 <_printf_float+0x96>
    efea:	4d02      	ldr	r5, [pc, #8]	; (eff4 <_printf_float+0x494>)
    efec:	e603      	b.n	ebf6 <_printf_float+0x96>
    efee:	46c0      	nop			; (mov r8, r8)
    eff0:	0001664a 	.word	0x0001664a
    eff4:	00016646 	.word	0x00016646

0000eff8 <_printf_common>:
    eff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    effa:	0015      	movs	r5, r2
    effc:	9301      	str	r3, [sp, #4]
    effe:	688a      	ldr	r2, [r1, #8]
    f000:	690b      	ldr	r3, [r1, #16]
    f002:	9000      	str	r0, [sp, #0]
    f004:	000c      	movs	r4, r1
    f006:	4293      	cmp	r3, r2
    f008:	da00      	bge.n	f00c <_printf_common+0x14>
    f00a:	0013      	movs	r3, r2
    f00c:	0022      	movs	r2, r4
    f00e:	602b      	str	r3, [r5, #0]
    f010:	3243      	adds	r2, #67	; 0x43
    f012:	7812      	ldrb	r2, [r2, #0]
    f014:	2a00      	cmp	r2, #0
    f016:	d001      	beq.n	f01c <_printf_common+0x24>
    f018:	3301      	adds	r3, #1
    f01a:	602b      	str	r3, [r5, #0]
    f01c:	6823      	ldr	r3, [r4, #0]
    f01e:	069b      	lsls	r3, r3, #26
    f020:	d502      	bpl.n	f028 <_printf_common+0x30>
    f022:	682b      	ldr	r3, [r5, #0]
    f024:	3302      	adds	r3, #2
    f026:	602b      	str	r3, [r5, #0]
    f028:	2706      	movs	r7, #6
    f02a:	6823      	ldr	r3, [r4, #0]
    f02c:	401f      	ands	r7, r3
    f02e:	d027      	beq.n	f080 <_printf_common+0x88>
    f030:	0023      	movs	r3, r4
    f032:	3343      	adds	r3, #67	; 0x43
    f034:	781b      	ldrb	r3, [r3, #0]
    f036:	1e5a      	subs	r2, r3, #1
    f038:	4193      	sbcs	r3, r2
    f03a:	6822      	ldr	r2, [r4, #0]
    f03c:	0692      	lsls	r2, r2, #26
    f03e:	d430      	bmi.n	f0a2 <_printf_common+0xaa>
    f040:	0022      	movs	r2, r4
    f042:	9901      	ldr	r1, [sp, #4]
    f044:	3243      	adds	r2, #67	; 0x43
    f046:	9800      	ldr	r0, [sp, #0]
    f048:	9e08      	ldr	r6, [sp, #32]
    f04a:	47b0      	blx	r6
    f04c:	1c43      	adds	r3, r0, #1
    f04e:	d025      	beq.n	f09c <_printf_common+0xa4>
    f050:	2306      	movs	r3, #6
    f052:	6820      	ldr	r0, [r4, #0]
    f054:	682a      	ldr	r2, [r5, #0]
    f056:	68e1      	ldr	r1, [r4, #12]
    f058:	4003      	ands	r3, r0
    f05a:	2500      	movs	r5, #0
    f05c:	2b04      	cmp	r3, #4
    f05e:	d103      	bne.n	f068 <_printf_common+0x70>
    f060:	1a8d      	subs	r5, r1, r2
    f062:	43eb      	mvns	r3, r5
    f064:	17db      	asrs	r3, r3, #31
    f066:	401d      	ands	r5, r3
    f068:	68a3      	ldr	r3, [r4, #8]
    f06a:	6922      	ldr	r2, [r4, #16]
    f06c:	4293      	cmp	r3, r2
    f06e:	dd01      	ble.n	f074 <_printf_common+0x7c>
    f070:	1a9b      	subs	r3, r3, r2
    f072:	18ed      	adds	r5, r5, r3
    f074:	2700      	movs	r7, #0
    f076:	42bd      	cmp	r5, r7
    f078:	d120      	bne.n	f0bc <_printf_common+0xc4>
    f07a:	2000      	movs	r0, #0
    f07c:	e010      	b.n	f0a0 <_printf_common+0xa8>
    f07e:	3701      	adds	r7, #1
    f080:	68e3      	ldr	r3, [r4, #12]
    f082:	682a      	ldr	r2, [r5, #0]
    f084:	1a9b      	subs	r3, r3, r2
    f086:	429f      	cmp	r7, r3
    f088:	dad2      	bge.n	f030 <_printf_common+0x38>
    f08a:	0022      	movs	r2, r4
    f08c:	2301      	movs	r3, #1
    f08e:	3219      	adds	r2, #25
    f090:	9901      	ldr	r1, [sp, #4]
    f092:	9800      	ldr	r0, [sp, #0]
    f094:	9e08      	ldr	r6, [sp, #32]
    f096:	47b0      	blx	r6
    f098:	1c43      	adds	r3, r0, #1
    f09a:	d1f0      	bne.n	f07e <_printf_common+0x86>
    f09c:	2001      	movs	r0, #1
    f09e:	4240      	negs	r0, r0
    f0a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f0a2:	2030      	movs	r0, #48	; 0x30
    f0a4:	18e1      	adds	r1, r4, r3
    f0a6:	3143      	adds	r1, #67	; 0x43
    f0a8:	7008      	strb	r0, [r1, #0]
    f0aa:	0021      	movs	r1, r4
    f0ac:	1c5a      	adds	r2, r3, #1
    f0ae:	3145      	adds	r1, #69	; 0x45
    f0b0:	7809      	ldrb	r1, [r1, #0]
    f0b2:	18a2      	adds	r2, r4, r2
    f0b4:	3243      	adds	r2, #67	; 0x43
    f0b6:	3302      	adds	r3, #2
    f0b8:	7011      	strb	r1, [r2, #0]
    f0ba:	e7c1      	b.n	f040 <_printf_common+0x48>
    f0bc:	0022      	movs	r2, r4
    f0be:	2301      	movs	r3, #1
    f0c0:	321a      	adds	r2, #26
    f0c2:	9901      	ldr	r1, [sp, #4]
    f0c4:	9800      	ldr	r0, [sp, #0]
    f0c6:	9e08      	ldr	r6, [sp, #32]
    f0c8:	47b0      	blx	r6
    f0ca:	1c43      	adds	r3, r0, #1
    f0cc:	d0e6      	beq.n	f09c <_printf_common+0xa4>
    f0ce:	3701      	adds	r7, #1
    f0d0:	e7d1      	b.n	f076 <_printf_common+0x7e>
	...

0000f0d4 <_printf_i>:
    f0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f0d6:	b08b      	sub	sp, #44	; 0x2c
    f0d8:	9206      	str	r2, [sp, #24]
    f0da:	000a      	movs	r2, r1
    f0dc:	3243      	adds	r2, #67	; 0x43
    f0de:	9307      	str	r3, [sp, #28]
    f0e0:	9005      	str	r0, [sp, #20]
    f0e2:	9204      	str	r2, [sp, #16]
    f0e4:	7e0a      	ldrb	r2, [r1, #24]
    f0e6:	000c      	movs	r4, r1
    f0e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f0ea:	2a6e      	cmp	r2, #110	; 0x6e
    f0ec:	d100      	bne.n	f0f0 <_printf_i+0x1c>
    f0ee:	e08f      	b.n	f210 <_printf_i+0x13c>
    f0f0:	d817      	bhi.n	f122 <_printf_i+0x4e>
    f0f2:	2a63      	cmp	r2, #99	; 0x63
    f0f4:	d02c      	beq.n	f150 <_printf_i+0x7c>
    f0f6:	d808      	bhi.n	f10a <_printf_i+0x36>
    f0f8:	2a00      	cmp	r2, #0
    f0fa:	d100      	bne.n	f0fe <_printf_i+0x2a>
    f0fc:	e099      	b.n	f232 <_printf_i+0x15e>
    f0fe:	2a58      	cmp	r2, #88	; 0x58
    f100:	d054      	beq.n	f1ac <_printf_i+0xd8>
    f102:	0026      	movs	r6, r4
    f104:	3642      	adds	r6, #66	; 0x42
    f106:	7032      	strb	r2, [r6, #0]
    f108:	e029      	b.n	f15e <_printf_i+0x8a>
    f10a:	2a64      	cmp	r2, #100	; 0x64
    f10c:	d001      	beq.n	f112 <_printf_i+0x3e>
    f10e:	2a69      	cmp	r2, #105	; 0x69
    f110:	d1f7      	bne.n	f102 <_printf_i+0x2e>
    f112:	6821      	ldr	r1, [r4, #0]
    f114:	681a      	ldr	r2, [r3, #0]
    f116:	0608      	lsls	r0, r1, #24
    f118:	d523      	bpl.n	f162 <_printf_i+0x8e>
    f11a:	1d11      	adds	r1, r2, #4
    f11c:	6019      	str	r1, [r3, #0]
    f11e:	6815      	ldr	r5, [r2, #0]
    f120:	e025      	b.n	f16e <_printf_i+0x9a>
    f122:	2a73      	cmp	r2, #115	; 0x73
    f124:	d100      	bne.n	f128 <_printf_i+0x54>
    f126:	e088      	b.n	f23a <_printf_i+0x166>
    f128:	d808      	bhi.n	f13c <_printf_i+0x68>
    f12a:	2a6f      	cmp	r2, #111	; 0x6f
    f12c:	d029      	beq.n	f182 <_printf_i+0xae>
    f12e:	2a70      	cmp	r2, #112	; 0x70
    f130:	d1e7      	bne.n	f102 <_printf_i+0x2e>
    f132:	2220      	movs	r2, #32
    f134:	6809      	ldr	r1, [r1, #0]
    f136:	430a      	orrs	r2, r1
    f138:	6022      	str	r2, [r4, #0]
    f13a:	e003      	b.n	f144 <_printf_i+0x70>
    f13c:	2a75      	cmp	r2, #117	; 0x75
    f13e:	d020      	beq.n	f182 <_printf_i+0xae>
    f140:	2a78      	cmp	r2, #120	; 0x78
    f142:	d1de      	bne.n	f102 <_printf_i+0x2e>
    f144:	0022      	movs	r2, r4
    f146:	2178      	movs	r1, #120	; 0x78
    f148:	3245      	adds	r2, #69	; 0x45
    f14a:	7011      	strb	r1, [r2, #0]
    f14c:	4a6c      	ldr	r2, [pc, #432]	; (f300 <_printf_i+0x22c>)
    f14e:	e030      	b.n	f1b2 <_printf_i+0xde>
    f150:	000e      	movs	r6, r1
    f152:	681a      	ldr	r2, [r3, #0]
    f154:	3642      	adds	r6, #66	; 0x42
    f156:	1d11      	adds	r1, r2, #4
    f158:	6019      	str	r1, [r3, #0]
    f15a:	6813      	ldr	r3, [r2, #0]
    f15c:	7033      	strb	r3, [r6, #0]
    f15e:	2301      	movs	r3, #1
    f160:	e079      	b.n	f256 <_printf_i+0x182>
    f162:	0649      	lsls	r1, r1, #25
    f164:	d5d9      	bpl.n	f11a <_printf_i+0x46>
    f166:	1d11      	adds	r1, r2, #4
    f168:	6019      	str	r1, [r3, #0]
    f16a:	2300      	movs	r3, #0
    f16c:	5ed5      	ldrsh	r5, [r2, r3]
    f16e:	2d00      	cmp	r5, #0
    f170:	da03      	bge.n	f17a <_printf_i+0xa6>
    f172:	232d      	movs	r3, #45	; 0x2d
    f174:	9a04      	ldr	r2, [sp, #16]
    f176:	426d      	negs	r5, r5
    f178:	7013      	strb	r3, [r2, #0]
    f17a:	4b62      	ldr	r3, [pc, #392]	; (f304 <_printf_i+0x230>)
    f17c:	270a      	movs	r7, #10
    f17e:	9303      	str	r3, [sp, #12]
    f180:	e02f      	b.n	f1e2 <_printf_i+0x10e>
    f182:	6820      	ldr	r0, [r4, #0]
    f184:	6819      	ldr	r1, [r3, #0]
    f186:	0605      	lsls	r5, r0, #24
    f188:	d503      	bpl.n	f192 <_printf_i+0xbe>
    f18a:	1d08      	adds	r0, r1, #4
    f18c:	6018      	str	r0, [r3, #0]
    f18e:	680d      	ldr	r5, [r1, #0]
    f190:	e005      	b.n	f19e <_printf_i+0xca>
    f192:	0640      	lsls	r0, r0, #25
    f194:	d5f9      	bpl.n	f18a <_printf_i+0xb6>
    f196:	680d      	ldr	r5, [r1, #0]
    f198:	1d08      	adds	r0, r1, #4
    f19a:	6018      	str	r0, [r3, #0]
    f19c:	b2ad      	uxth	r5, r5
    f19e:	4b59      	ldr	r3, [pc, #356]	; (f304 <_printf_i+0x230>)
    f1a0:	2708      	movs	r7, #8
    f1a2:	9303      	str	r3, [sp, #12]
    f1a4:	2a6f      	cmp	r2, #111	; 0x6f
    f1a6:	d018      	beq.n	f1da <_printf_i+0x106>
    f1a8:	270a      	movs	r7, #10
    f1aa:	e016      	b.n	f1da <_printf_i+0x106>
    f1ac:	3145      	adds	r1, #69	; 0x45
    f1ae:	700a      	strb	r2, [r1, #0]
    f1b0:	4a54      	ldr	r2, [pc, #336]	; (f304 <_printf_i+0x230>)
    f1b2:	9203      	str	r2, [sp, #12]
    f1b4:	681a      	ldr	r2, [r3, #0]
    f1b6:	6821      	ldr	r1, [r4, #0]
    f1b8:	1d10      	adds	r0, r2, #4
    f1ba:	6018      	str	r0, [r3, #0]
    f1bc:	6815      	ldr	r5, [r2, #0]
    f1be:	0608      	lsls	r0, r1, #24
    f1c0:	d522      	bpl.n	f208 <_printf_i+0x134>
    f1c2:	07cb      	lsls	r3, r1, #31
    f1c4:	d502      	bpl.n	f1cc <_printf_i+0xf8>
    f1c6:	2320      	movs	r3, #32
    f1c8:	4319      	orrs	r1, r3
    f1ca:	6021      	str	r1, [r4, #0]
    f1cc:	2710      	movs	r7, #16
    f1ce:	2d00      	cmp	r5, #0
    f1d0:	d103      	bne.n	f1da <_printf_i+0x106>
    f1d2:	2320      	movs	r3, #32
    f1d4:	6822      	ldr	r2, [r4, #0]
    f1d6:	439a      	bics	r2, r3
    f1d8:	6022      	str	r2, [r4, #0]
    f1da:	0023      	movs	r3, r4
    f1dc:	2200      	movs	r2, #0
    f1de:	3343      	adds	r3, #67	; 0x43
    f1e0:	701a      	strb	r2, [r3, #0]
    f1e2:	6863      	ldr	r3, [r4, #4]
    f1e4:	60a3      	str	r3, [r4, #8]
    f1e6:	2b00      	cmp	r3, #0
    f1e8:	db5c      	blt.n	f2a4 <_printf_i+0x1d0>
    f1ea:	2204      	movs	r2, #4
    f1ec:	6821      	ldr	r1, [r4, #0]
    f1ee:	4391      	bics	r1, r2
    f1f0:	6021      	str	r1, [r4, #0]
    f1f2:	2d00      	cmp	r5, #0
    f1f4:	d158      	bne.n	f2a8 <_printf_i+0x1d4>
    f1f6:	9e04      	ldr	r6, [sp, #16]
    f1f8:	2b00      	cmp	r3, #0
    f1fa:	d064      	beq.n	f2c6 <_printf_i+0x1f2>
    f1fc:	0026      	movs	r6, r4
    f1fe:	9b03      	ldr	r3, [sp, #12]
    f200:	3642      	adds	r6, #66	; 0x42
    f202:	781b      	ldrb	r3, [r3, #0]
    f204:	7033      	strb	r3, [r6, #0]
    f206:	e05e      	b.n	f2c6 <_printf_i+0x1f2>
    f208:	0648      	lsls	r0, r1, #25
    f20a:	d5da      	bpl.n	f1c2 <_printf_i+0xee>
    f20c:	b2ad      	uxth	r5, r5
    f20e:	e7d8      	b.n	f1c2 <_printf_i+0xee>
    f210:	6809      	ldr	r1, [r1, #0]
    f212:	681a      	ldr	r2, [r3, #0]
    f214:	0608      	lsls	r0, r1, #24
    f216:	d505      	bpl.n	f224 <_printf_i+0x150>
    f218:	1d11      	adds	r1, r2, #4
    f21a:	6019      	str	r1, [r3, #0]
    f21c:	6813      	ldr	r3, [r2, #0]
    f21e:	6962      	ldr	r2, [r4, #20]
    f220:	601a      	str	r2, [r3, #0]
    f222:	e006      	b.n	f232 <_printf_i+0x15e>
    f224:	0649      	lsls	r1, r1, #25
    f226:	d5f7      	bpl.n	f218 <_printf_i+0x144>
    f228:	1d11      	adds	r1, r2, #4
    f22a:	6019      	str	r1, [r3, #0]
    f22c:	6813      	ldr	r3, [r2, #0]
    f22e:	8aa2      	ldrh	r2, [r4, #20]
    f230:	801a      	strh	r2, [r3, #0]
    f232:	2300      	movs	r3, #0
    f234:	9e04      	ldr	r6, [sp, #16]
    f236:	6123      	str	r3, [r4, #16]
    f238:	e054      	b.n	f2e4 <_printf_i+0x210>
    f23a:	681a      	ldr	r2, [r3, #0]
    f23c:	1d11      	adds	r1, r2, #4
    f23e:	6019      	str	r1, [r3, #0]
    f240:	6816      	ldr	r6, [r2, #0]
    f242:	2100      	movs	r1, #0
    f244:	6862      	ldr	r2, [r4, #4]
    f246:	0030      	movs	r0, r6
    f248:	f001 fc7a 	bl	10b40 <memchr>
    f24c:	2800      	cmp	r0, #0
    f24e:	d001      	beq.n	f254 <_printf_i+0x180>
    f250:	1b80      	subs	r0, r0, r6
    f252:	6060      	str	r0, [r4, #4]
    f254:	6863      	ldr	r3, [r4, #4]
    f256:	6123      	str	r3, [r4, #16]
    f258:	2300      	movs	r3, #0
    f25a:	9a04      	ldr	r2, [sp, #16]
    f25c:	7013      	strb	r3, [r2, #0]
    f25e:	e041      	b.n	f2e4 <_printf_i+0x210>
    f260:	6923      	ldr	r3, [r4, #16]
    f262:	0032      	movs	r2, r6
    f264:	9906      	ldr	r1, [sp, #24]
    f266:	9805      	ldr	r0, [sp, #20]
    f268:	9d07      	ldr	r5, [sp, #28]
    f26a:	47a8      	blx	r5
    f26c:	1c43      	adds	r3, r0, #1
    f26e:	d043      	beq.n	f2f8 <_printf_i+0x224>
    f270:	6823      	ldr	r3, [r4, #0]
    f272:	2500      	movs	r5, #0
    f274:	079b      	lsls	r3, r3, #30
    f276:	d40f      	bmi.n	f298 <_printf_i+0x1c4>
    f278:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f27a:	68e0      	ldr	r0, [r4, #12]
    f27c:	4298      	cmp	r0, r3
    f27e:	da3d      	bge.n	f2fc <_printf_i+0x228>
    f280:	0018      	movs	r0, r3
    f282:	e03b      	b.n	f2fc <_printf_i+0x228>
    f284:	0022      	movs	r2, r4
    f286:	2301      	movs	r3, #1
    f288:	3219      	adds	r2, #25
    f28a:	9906      	ldr	r1, [sp, #24]
    f28c:	9805      	ldr	r0, [sp, #20]
    f28e:	9e07      	ldr	r6, [sp, #28]
    f290:	47b0      	blx	r6
    f292:	1c43      	adds	r3, r0, #1
    f294:	d030      	beq.n	f2f8 <_printf_i+0x224>
    f296:	3501      	adds	r5, #1
    f298:	68e3      	ldr	r3, [r4, #12]
    f29a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f29c:	1a9b      	subs	r3, r3, r2
    f29e:	429d      	cmp	r5, r3
    f2a0:	dbf0      	blt.n	f284 <_printf_i+0x1b0>
    f2a2:	e7e9      	b.n	f278 <_printf_i+0x1a4>
    f2a4:	2d00      	cmp	r5, #0
    f2a6:	d0a9      	beq.n	f1fc <_printf_i+0x128>
    f2a8:	9e04      	ldr	r6, [sp, #16]
    f2aa:	0028      	movs	r0, r5
    f2ac:	0039      	movs	r1, r7
    f2ae:	f002 fba1 	bl	119f4 <__aeabi_uidivmod>
    f2b2:	9b03      	ldr	r3, [sp, #12]
    f2b4:	3e01      	subs	r6, #1
    f2b6:	5c5b      	ldrb	r3, [r3, r1]
    f2b8:	0028      	movs	r0, r5
    f2ba:	7033      	strb	r3, [r6, #0]
    f2bc:	0039      	movs	r1, r7
    f2be:	f002 fb13 	bl	118e8 <__udivsi3>
    f2c2:	1e05      	subs	r5, r0, #0
    f2c4:	d1f1      	bne.n	f2aa <_printf_i+0x1d6>
    f2c6:	2f08      	cmp	r7, #8
    f2c8:	d109      	bne.n	f2de <_printf_i+0x20a>
    f2ca:	6823      	ldr	r3, [r4, #0]
    f2cc:	07db      	lsls	r3, r3, #31
    f2ce:	d506      	bpl.n	f2de <_printf_i+0x20a>
    f2d0:	6863      	ldr	r3, [r4, #4]
    f2d2:	6922      	ldr	r2, [r4, #16]
    f2d4:	4293      	cmp	r3, r2
    f2d6:	dc02      	bgt.n	f2de <_printf_i+0x20a>
    f2d8:	2330      	movs	r3, #48	; 0x30
    f2da:	3e01      	subs	r6, #1
    f2dc:	7033      	strb	r3, [r6, #0]
    f2de:	9b04      	ldr	r3, [sp, #16]
    f2e0:	1b9b      	subs	r3, r3, r6
    f2e2:	6123      	str	r3, [r4, #16]
    f2e4:	9b07      	ldr	r3, [sp, #28]
    f2e6:	aa09      	add	r2, sp, #36	; 0x24
    f2e8:	9300      	str	r3, [sp, #0]
    f2ea:	0021      	movs	r1, r4
    f2ec:	9b06      	ldr	r3, [sp, #24]
    f2ee:	9805      	ldr	r0, [sp, #20]
    f2f0:	f7ff fe82 	bl	eff8 <_printf_common>
    f2f4:	1c43      	adds	r3, r0, #1
    f2f6:	d1b3      	bne.n	f260 <_printf_i+0x18c>
    f2f8:	2001      	movs	r0, #1
    f2fa:	4240      	negs	r0, r0
    f2fc:	b00b      	add	sp, #44	; 0x2c
    f2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f300:	00016661 	.word	0x00016661
    f304:	00016650 	.word	0x00016650

0000f308 <iprintf>:
    f308:	b40f      	push	{r0, r1, r2, r3}
    f30a:	4b0b      	ldr	r3, [pc, #44]	; (f338 <iprintf+0x30>)
    f30c:	b513      	push	{r0, r1, r4, lr}
    f30e:	681c      	ldr	r4, [r3, #0]
    f310:	2c00      	cmp	r4, #0
    f312:	d005      	beq.n	f320 <iprintf+0x18>
    f314:	69a3      	ldr	r3, [r4, #24]
    f316:	2b00      	cmp	r3, #0
    f318:	d102      	bne.n	f320 <iprintf+0x18>
    f31a:	0020      	movs	r0, r4
    f31c:	f001 fb02 	bl	10924 <__sinit>
    f320:	ab05      	add	r3, sp, #20
    f322:	9a04      	ldr	r2, [sp, #16]
    f324:	68a1      	ldr	r1, [r4, #8]
    f326:	0020      	movs	r0, r4
    f328:	9301      	str	r3, [sp, #4]
    f32a:	f002 f895 	bl	11458 <_vfiprintf_r>
    f32e:	bc16      	pop	{r1, r2, r4}
    f330:	bc08      	pop	{r3}
    f332:	b004      	add	sp, #16
    f334:	4718      	bx	r3
    f336:	46c0      	nop			; (mov r8, r8)
    f338:	20000010 	.word	0x20000010

0000f33c <putchar>:
    f33c:	4b08      	ldr	r3, [pc, #32]	; (f360 <putchar+0x24>)
    f33e:	b570      	push	{r4, r5, r6, lr}
    f340:	681c      	ldr	r4, [r3, #0]
    f342:	0005      	movs	r5, r0
    f344:	2c00      	cmp	r4, #0
    f346:	d005      	beq.n	f354 <putchar+0x18>
    f348:	69a3      	ldr	r3, [r4, #24]
    f34a:	2b00      	cmp	r3, #0
    f34c:	d102      	bne.n	f354 <putchar+0x18>
    f34e:	0020      	movs	r0, r4
    f350:	f001 fae8 	bl	10924 <__sinit>
    f354:	0029      	movs	r1, r5
    f356:	68a2      	ldr	r2, [r4, #8]
    f358:	0020      	movs	r0, r4
    f35a:	f002 f999 	bl	11690 <_putc_r>
    f35e:	bd70      	pop	{r4, r5, r6, pc}
    f360:	20000010 	.word	0x20000010

0000f364 <_puts_r>:
    f364:	b570      	push	{r4, r5, r6, lr}
    f366:	0005      	movs	r5, r0
    f368:	000e      	movs	r6, r1
    f36a:	2800      	cmp	r0, #0
    f36c:	d004      	beq.n	f378 <_puts_r+0x14>
    f36e:	6983      	ldr	r3, [r0, #24]
    f370:	2b00      	cmp	r3, #0
    f372:	d101      	bne.n	f378 <_puts_r+0x14>
    f374:	f001 fad6 	bl	10924 <__sinit>
    f378:	69ab      	ldr	r3, [r5, #24]
    f37a:	68ac      	ldr	r4, [r5, #8]
    f37c:	2b00      	cmp	r3, #0
    f37e:	d102      	bne.n	f386 <_puts_r+0x22>
    f380:	0028      	movs	r0, r5
    f382:	f001 facf 	bl	10924 <__sinit>
    f386:	4b24      	ldr	r3, [pc, #144]	; (f418 <_puts_r+0xb4>)
    f388:	429c      	cmp	r4, r3
    f38a:	d10f      	bne.n	f3ac <_puts_r+0x48>
    f38c:	686c      	ldr	r4, [r5, #4]
    f38e:	89a3      	ldrh	r3, [r4, #12]
    f390:	071b      	lsls	r3, r3, #28
    f392:	d502      	bpl.n	f39a <_puts_r+0x36>
    f394:	6923      	ldr	r3, [r4, #16]
    f396:	2b00      	cmp	r3, #0
    f398:	d120      	bne.n	f3dc <_puts_r+0x78>
    f39a:	0021      	movs	r1, r4
    f39c:	0028      	movs	r0, r5
    f39e:	f000 fae7 	bl	f970 <__swsetup_r>
    f3a2:	2800      	cmp	r0, #0
    f3a4:	d01a      	beq.n	f3dc <_puts_r+0x78>
    f3a6:	2001      	movs	r0, #1
    f3a8:	4240      	negs	r0, r0
    f3aa:	bd70      	pop	{r4, r5, r6, pc}
    f3ac:	4b1b      	ldr	r3, [pc, #108]	; (f41c <_puts_r+0xb8>)
    f3ae:	429c      	cmp	r4, r3
    f3b0:	d101      	bne.n	f3b6 <_puts_r+0x52>
    f3b2:	68ac      	ldr	r4, [r5, #8]
    f3b4:	e7eb      	b.n	f38e <_puts_r+0x2a>
    f3b6:	4b1a      	ldr	r3, [pc, #104]	; (f420 <_puts_r+0xbc>)
    f3b8:	429c      	cmp	r4, r3
    f3ba:	d1e8      	bne.n	f38e <_puts_r+0x2a>
    f3bc:	68ec      	ldr	r4, [r5, #12]
    f3be:	e7e6      	b.n	f38e <_puts_r+0x2a>
    f3c0:	3b01      	subs	r3, #1
    f3c2:	3601      	adds	r6, #1
    f3c4:	60a3      	str	r3, [r4, #8]
    f3c6:	2b00      	cmp	r3, #0
    f3c8:	da04      	bge.n	f3d4 <_puts_r+0x70>
    f3ca:	69a2      	ldr	r2, [r4, #24]
    f3cc:	4293      	cmp	r3, r2
    f3ce:	db16      	blt.n	f3fe <_puts_r+0x9a>
    f3d0:	290a      	cmp	r1, #10
    f3d2:	d014      	beq.n	f3fe <_puts_r+0x9a>
    f3d4:	6823      	ldr	r3, [r4, #0]
    f3d6:	1c5a      	adds	r2, r3, #1
    f3d8:	6022      	str	r2, [r4, #0]
    f3da:	7019      	strb	r1, [r3, #0]
    f3dc:	7831      	ldrb	r1, [r6, #0]
    f3de:	68a3      	ldr	r3, [r4, #8]
    f3e0:	2900      	cmp	r1, #0
    f3e2:	d1ed      	bne.n	f3c0 <_puts_r+0x5c>
    f3e4:	3b01      	subs	r3, #1
    f3e6:	60a3      	str	r3, [r4, #8]
    f3e8:	2b00      	cmp	r3, #0
    f3ea:	da0f      	bge.n	f40c <_puts_r+0xa8>
    f3ec:	0022      	movs	r2, r4
    f3ee:	310a      	adds	r1, #10
    f3f0:	0028      	movs	r0, r5
    f3f2:	f000 fa5b 	bl	f8ac <__swbuf_r>
    f3f6:	1c43      	adds	r3, r0, #1
    f3f8:	d0d5      	beq.n	f3a6 <_puts_r+0x42>
    f3fa:	200a      	movs	r0, #10
    f3fc:	e7d5      	b.n	f3aa <_puts_r+0x46>
    f3fe:	0022      	movs	r2, r4
    f400:	0028      	movs	r0, r5
    f402:	f000 fa53 	bl	f8ac <__swbuf_r>
    f406:	1c43      	adds	r3, r0, #1
    f408:	d1e8      	bne.n	f3dc <_puts_r+0x78>
    f40a:	e7cc      	b.n	f3a6 <_puts_r+0x42>
    f40c:	200a      	movs	r0, #10
    f40e:	6823      	ldr	r3, [r4, #0]
    f410:	1c5a      	adds	r2, r3, #1
    f412:	6022      	str	r2, [r4, #0]
    f414:	7018      	strb	r0, [r3, #0]
    f416:	e7c8      	b.n	f3aa <_puts_r+0x46>
    f418:	000167a0 	.word	0x000167a0
    f41c:	000167c0 	.word	0x000167c0
    f420:	00016780 	.word	0x00016780

0000f424 <puts>:
    f424:	b510      	push	{r4, lr}
    f426:	4b03      	ldr	r3, [pc, #12]	; (f434 <puts+0x10>)
    f428:	0001      	movs	r1, r0
    f42a:	6818      	ldr	r0, [r3, #0]
    f42c:	f7ff ff9a 	bl	f364 <_puts_r>
    f430:	bd10      	pop	{r4, pc}
    f432:	46c0      	nop			; (mov r8, r8)
    f434:	20000010 	.word	0x20000010

0000f438 <_sbrk_r>:
    f438:	2300      	movs	r3, #0
    f43a:	b570      	push	{r4, r5, r6, lr}
    f43c:	4c06      	ldr	r4, [pc, #24]	; (f458 <_sbrk_r+0x20>)
    f43e:	0005      	movs	r5, r0
    f440:	0008      	movs	r0, r1
    f442:	6023      	str	r3, [r4, #0]
    f444:	f7ff f864 	bl	e510 <_sbrk>
    f448:	1c43      	adds	r3, r0, #1
    f44a:	d103      	bne.n	f454 <_sbrk_r+0x1c>
    f44c:	6823      	ldr	r3, [r4, #0]
    f44e:	2b00      	cmp	r3, #0
    f450:	d000      	beq.n	f454 <_sbrk_r+0x1c>
    f452:	602b      	str	r3, [r5, #0]
    f454:	bd70      	pop	{r4, r5, r6, pc}
    f456:	46c0      	nop			; (mov r8, r8)
    f458:	200007f8 	.word	0x200007f8

0000f45c <setbuf>:
    f45c:	424a      	negs	r2, r1
    f45e:	414a      	adcs	r2, r1
    f460:	2380      	movs	r3, #128	; 0x80
    f462:	b510      	push	{r4, lr}
    f464:	0052      	lsls	r2, r2, #1
    f466:	00db      	lsls	r3, r3, #3
    f468:	f000 f802 	bl	f470 <setvbuf>
    f46c:	bd10      	pop	{r4, pc}
	...

0000f470 <setvbuf>:
    f470:	b5f0      	push	{r4, r5, r6, r7, lr}
    f472:	001d      	movs	r5, r3
    f474:	4b4f      	ldr	r3, [pc, #316]	; (f5b4 <setvbuf+0x144>)
    f476:	b085      	sub	sp, #20
    f478:	681e      	ldr	r6, [r3, #0]
    f47a:	0004      	movs	r4, r0
    f47c:	000f      	movs	r7, r1
    f47e:	9200      	str	r2, [sp, #0]
    f480:	2e00      	cmp	r6, #0
    f482:	d005      	beq.n	f490 <setvbuf+0x20>
    f484:	69b3      	ldr	r3, [r6, #24]
    f486:	2b00      	cmp	r3, #0
    f488:	d102      	bne.n	f490 <setvbuf+0x20>
    f48a:	0030      	movs	r0, r6
    f48c:	f001 fa4a 	bl	10924 <__sinit>
    f490:	4b49      	ldr	r3, [pc, #292]	; (f5b8 <setvbuf+0x148>)
    f492:	429c      	cmp	r4, r3
    f494:	d150      	bne.n	f538 <setvbuf+0xc8>
    f496:	6874      	ldr	r4, [r6, #4]
    f498:	9b00      	ldr	r3, [sp, #0]
    f49a:	2b02      	cmp	r3, #2
    f49c:	d005      	beq.n	f4aa <setvbuf+0x3a>
    f49e:	2b01      	cmp	r3, #1
    f4a0:	d900      	bls.n	f4a4 <setvbuf+0x34>
    f4a2:	e084      	b.n	f5ae <setvbuf+0x13e>
    f4a4:	2d00      	cmp	r5, #0
    f4a6:	da00      	bge.n	f4aa <setvbuf+0x3a>
    f4a8:	e081      	b.n	f5ae <setvbuf+0x13e>
    f4aa:	0021      	movs	r1, r4
    f4ac:	0030      	movs	r0, r6
    f4ae:	f001 f9cb 	bl	10848 <_fflush_r>
    f4b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f4b4:	2900      	cmp	r1, #0
    f4b6:	d008      	beq.n	f4ca <setvbuf+0x5a>
    f4b8:	0023      	movs	r3, r4
    f4ba:	3344      	adds	r3, #68	; 0x44
    f4bc:	4299      	cmp	r1, r3
    f4be:	d002      	beq.n	f4c6 <setvbuf+0x56>
    f4c0:	0030      	movs	r0, r6
    f4c2:	f7ff fa09 	bl	e8d8 <_free_r>
    f4c6:	2300      	movs	r3, #0
    f4c8:	6363      	str	r3, [r4, #52]	; 0x34
    f4ca:	2300      	movs	r3, #0
    f4cc:	61a3      	str	r3, [r4, #24]
    f4ce:	6063      	str	r3, [r4, #4]
    f4d0:	89a3      	ldrh	r3, [r4, #12]
    f4d2:	061b      	lsls	r3, r3, #24
    f4d4:	d503      	bpl.n	f4de <setvbuf+0x6e>
    f4d6:	6921      	ldr	r1, [r4, #16]
    f4d8:	0030      	movs	r0, r6
    f4da:	f7ff f9fd 	bl	e8d8 <_free_r>
    f4de:	89a3      	ldrh	r3, [r4, #12]
    f4e0:	4a36      	ldr	r2, [pc, #216]	; (f5bc <setvbuf+0x14c>)
    f4e2:	4013      	ands	r3, r2
    f4e4:	81a3      	strh	r3, [r4, #12]
    f4e6:	9b00      	ldr	r3, [sp, #0]
    f4e8:	2b02      	cmp	r3, #2
    f4ea:	d05a      	beq.n	f5a2 <setvbuf+0x132>
    f4ec:	ab03      	add	r3, sp, #12
    f4ee:	aa02      	add	r2, sp, #8
    f4f0:	0021      	movs	r1, r4
    f4f2:	0030      	movs	r0, r6
    f4f4:	f001 fab8 	bl	10a68 <__swhatbuf_r>
    f4f8:	89a3      	ldrh	r3, [r4, #12]
    f4fa:	4318      	orrs	r0, r3
    f4fc:	81a0      	strh	r0, [r4, #12]
    f4fe:	2d00      	cmp	r5, #0
    f500:	d124      	bne.n	f54c <setvbuf+0xdc>
    f502:	9d02      	ldr	r5, [sp, #8]
    f504:	0028      	movs	r0, r5
    f506:	f7ff f99d 	bl	e844 <malloc>
    f50a:	9501      	str	r5, [sp, #4]
    f50c:	1e07      	subs	r7, r0, #0
    f50e:	d142      	bne.n	f596 <setvbuf+0x126>
    f510:	9b02      	ldr	r3, [sp, #8]
    f512:	9301      	str	r3, [sp, #4]
    f514:	42ab      	cmp	r3, r5
    f516:	d139      	bne.n	f58c <setvbuf+0x11c>
    f518:	2001      	movs	r0, #1
    f51a:	4240      	negs	r0, r0
    f51c:	2302      	movs	r3, #2
    f51e:	89a2      	ldrh	r2, [r4, #12]
    f520:	4313      	orrs	r3, r2
    f522:	81a3      	strh	r3, [r4, #12]
    f524:	2300      	movs	r3, #0
    f526:	60a3      	str	r3, [r4, #8]
    f528:	0023      	movs	r3, r4
    f52a:	3347      	adds	r3, #71	; 0x47
    f52c:	6023      	str	r3, [r4, #0]
    f52e:	6123      	str	r3, [r4, #16]
    f530:	2301      	movs	r3, #1
    f532:	6163      	str	r3, [r4, #20]
    f534:	b005      	add	sp, #20
    f536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f538:	4b21      	ldr	r3, [pc, #132]	; (f5c0 <setvbuf+0x150>)
    f53a:	429c      	cmp	r4, r3
    f53c:	d101      	bne.n	f542 <setvbuf+0xd2>
    f53e:	68b4      	ldr	r4, [r6, #8]
    f540:	e7aa      	b.n	f498 <setvbuf+0x28>
    f542:	4b20      	ldr	r3, [pc, #128]	; (f5c4 <setvbuf+0x154>)
    f544:	429c      	cmp	r4, r3
    f546:	d1a7      	bne.n	f498 <setvbuf+0x28>
    f548:	68f4      	ldr	r4, [r6, #12]
    f54a:	e7a5      	b.n	f498 <setvbuf+0x28>
    f54c:	2f00      	cmp	r7, #0
    f54e:	d0d9      	beq.n	f504 <setvbuf+0x94>
    f550:	69b3      	ldr	r3, [r6, #24]
    f552:	2b00      	cmp	r3, #0
    f554:	d102      	bne.n	f55c <setvbuf+0xec>
    f556:	0030      	movs	r0, r6
    f558:	f001 f9e4 	bl	10924 <__sinit>
    f55c:	9b00      	ldr	r3, [sp, #0]
    f55e:	2b01      	cmp	r3, #1
    f560:	d103      	bne.n	f56a <setvbuf+0xfa>
    f562:	89a3      	ldrh	r3, [r4, #12]
    f564:	9a00      	ldr	r2, [sp, #0]
    f566:	431a      	orrs	r2, r3
    f568:	81a2      	strh	r2, [r4, #12]
    f56a:	2008      	movs	r0, #8
    f56c:	89a3      	ldrh	r3, [r4, #12]
    f56e:	6027      	str	r7, [r4, #0]
    f570:	6127      	str	r7, [r4, #16]
    f572:	6165      	str	r5, [r4, #20]
    f574:	4018      	ands	r0, r3
    f576:	d018      	beq.n	f5aa <setvbuf+0x13a>
    f578:	2001      	movs	r0, #1
    f57a:	4018      	ands	r0, r3
    f57c:	2300      	movs	r3, #0
    f57e:	4298      	cmp	r0, r3
    f580:	d011      	beq.n	f5a6 <setvbuf+0x136>
    f582:	426d      	negs	r5, r5
    f584:	60a3      	str	r3, [r4, #8]
    f586:	61a5      	str	r5, [r4, #24]
    f588:	0018      	movs	r0, r3
    f58a:	e7d3      	b.n	f534 <setvbuf+0xc4>
    f58c:	9801      	ldr	r0, [sp, #4]
    f58e:	f7ff f959 	bl	e844 <malloc>
    f592:	1e07      	subs	r7, r0, #0
    f594:	d0c0      	beq.n	f518 <setvbuf+0xa8>
    f596:	2380      	movs	r3, #128	; 0x80
    f598:	89a2      	ldrh	r2, [r4, #12]
    f59a:	9d01      	ldr	r5, [sp, #4]
    f59c:	4313      	orrs	r3, r2
    f59e:	81a3      	strh	r3, [r4, #12]
    f5a0:	e7d6      	b.n	f550 <setvbuf+0xe0>
    f5a2:	2000      	movs	r0, #0
    f5a4:	e7ba      	b.n	f51c <setvbuf+0xac>
    f5a6:	60a5      	str	r5, [r4, #8]
    f5a8:	e7c4      	b.n	f534 <setvbuf+0xc4>
    f5aa:	60a0      	str	r0, [r4, #8]
    f5ac:	e7c2      	b.n	f534 <setvbuf+0xc4>
    f5ae:	2001      	movs	r0, #1
    f5b0:	4240      	negs	r0, r0
    f5b2:	e7bf      	b.n	f534 <setvbuf+0xc4>
    f5b4:	20000010 	.word	0x20000010
    f5b8:	000167a0 	.word	0x000167a0
    f5bc:	fffff35c 	.word	0xfffff35c
    f5c0:	000167c0 	.word	0x000167c0
    f5c4:	00016780 	.word	0x00016780

0000f5c8 <siprintf>:
    f5c8:	b40e      	push	{r1, r2, r3}
    f5ca:	b510      	push	{r4, lr}
    f5cc:	b09d      	sub	sp, #116	; 0x74
    f5ce:	a902      	add	r1, sp, #8
    f5d0:	9002      	str	r0, [sp, #8]
    f5d2:	6108      	str	r0, [r1, #16]
    f5d4:	480b      	ldr	r0, [pc, #44]	; (f604 <siprintf+0x3c>)
    f5d6:	2482      	movs	r4, #130	; 0x82
    f5d8:	6088      	str	r0, [r1, #8]
    f5da:	6148      	str	r0, [r1, #20]
    f5dc:	2001      	movs	r0, #1
    f5de:	4240      	negs	r0, r0
    f5e0:	ab1f      	add	r3, sp, #124	; 0x7c
    f5e2:	81c8      	strh	r0, [r1, #14]
    f5e4:	4808      	ldr	r0, [pc, #32]	; (f608 <siprintf+0x40>)
    f5e6:	cb04      	ldmia	r3!, {r2}
    f5e8:	00a4      	lsls	r4, r4, #2
    f5ea:	6800      	ldr	r0, [r0, #0]
    f5ec:	9301      	str	r3, [sp, #4]
    f5ee:	818c      	strh	r4, [r1, #12]
    f5f0:	f001 fe06 	bl	11200 <_svfiprintf_r>
    f5f4:	2300      	movs	r3, #0
    f5f6:	9a02      	ldr	r2, [sp, #8]
    f5f8:	7013      	strb	r3, [r2, #0]
    f5fa:	b01d      	add	sp, #116	; 0x74
    f5fc:	bc10      	pop	{r4}
    f5fe:	bc08      	pop	{r3}
    f600:	b003      	add	sp, #12
    f602:	4718      	bx	r3
    f604:	7fffffff 	.word	0x7fffffff
    f608:	20000010 	.word	0x20000010

0000f60c <strcmp>:
    f60c:	7802      	ldrb	r2, [r0, #0]
    f60e:	780b      	ldrb	r3, [r1, #0]
    f610:	2a00      	cmp	r2, #0
    f612:	d003      	beq.n	f61c <strcmp+0x10>
    f614:	3001      	adds	r0, #1
    f616:	3101      	adds	r1, #1
    f618:	429a      	cmp	r2, r3
    f61a:	d0f7      	beq.n	f60c <strcmp>
    f61c:	1ad0      	subs	r0, r2, r3
    f61e:	4770      	bx	lr

0000f620 <strcpy>:
    f620:	1c03      	adds	r3, r0, #0
    f622:	780a      	ldrb	r2, [r1, #0]
    f624:	3101      	adds	r1, #1
    f626:	701a      	strb	r2, [r3, #0]
    f628:	3301      	adds	r3, #1
    f62a:	2a00      	cmp	r2, #0
    f62c:	d1f9      	bne.n	f622 <strcpy+0x2>
    f62e:	4770      	bx	lr

0000f630 <strdup>:
    f630:	b510      	push	{r4, lr}
    f632:	4b03      	ldr	r3, [pc, #12]	; (f640 <strdup+0x10>)
    f634:	0001      	movs	r1, r0
    f636:	6818      	ldr	r0, [r3, #0]
    f638:	f000 f804 	bl	f644 <_strdup_r>
    f63c:	bd10      	pop	{r4, pc}
    f63e:	46c0      	nop			; (mov r8, r8)
    f640:	20000010 	.word	0x20000010

0000f644 <_strdup_r>:
    f644:	b570      	push	{r4, r5, r6, lr}
    f646:	0005      	movs	r5, r0
    f648:	0008      	movs	r0, r1
    f64a:	000e      	movs	r6, r1
    f64c:	f000 f80d 	bl	f66a <strlen>
    f650:	1c44      	adds	r4, r0, #1
    f652:	0021      	movs	r1, r4
    f654:	0028      	movs	r0, r5
    f656:	f7ff f989 	bl	e96c <_malloc_r>
    f65a:	1e05      	subs	r5, r0, #0
    f65c:	d003      	beq.n	f666 <_strdup_r+0x22>
    f65e:	0022      	movs	r2, r4
    f660:	0031      	movs	r1, r6
    f662:	f7ff f915 	bl	e890 <memcpy>
    f666:	0028      	movs	r0, r5
    f668:	bd70      	pop	{r4, r5, r6, pc}

0000f66a <strlen>:
    f66a:	2300      	movs	r3, #0
    f66c:	5cc2      	ldrb	r2, [r0, r3]
    f66e:	3301      	adds	r3, #1
    f670:	2a00      	cmp	r2, #0
    f672:	d1fb      	bne.n	f66c <strlen+0x2>
    f674:	1e58      	subs	r0, r3, #1
    f676:	4770      	bx	lr

0000f678 <strncmp>:
    f678:	2300      	movs	r3, #0
    f67a:	b530      	push	{r4, r5, lr}
    f67c:	429a      	cmp	r2, r3
    f67e:	d00a      	beq.n	f696 <strncmp+0x1e>
    f680:	3a01      	subs	r2, #1
    f682:	5cc4      	ldrb	r4, [r0, r3]
    f684:	5ccd      	ldrb	r5, [r1, r3]
    f686:	42ac      	cmp	r4, r5
    f688:	d104      	bne.n	f694 <strncmp+0x1c>
    f68a:	429a      	cmp	r2, r3
    f68c:	d002      	beq.n	f694 <strncmp+0x1c>
    f68e:	3301      	adds	r3, #1
    f690:	2c00      	cmp	r4, #0
    f692:	d1f6      	bne.n	f682 <strncmp+0xa>
    f694:	1b63      	subs	r3, r4, r5
    f696:	0018      	movs	r0, r3
    f698:	bd30      	pop	{r4, r5, pc}

0000f69a <strstr>:
    f69a:	b510      	push	{r4, lr}
    f69c:	0002      	movs	r2, r0
    f69e:	7800      	ldrb	r0, [r0, #0]
    f6a0:	2800      	cmp	r0, #0
    f6a2:	d104      	bne.n	f6ae <strstr+0x14>
    f6a4:	7809      	ldrb	r1, [r1, #0]
    f6a6:	2900      	cmp	r1, #0
    f6a8:	d00d      	beq.n	f6c6 <strstr+0x2c>
    f6aa:	bd10      	pop	{r4, pc}
    f6ac:	3201      	adds	r2, #1
    f6ae:	7810      	ldrb	r0, [r2, #0]
    f6b0:	2800      	cmp	r0, #0
    f6b2:	d0fa      	beq.n	f6aa <strstr+0x10>
    f6b4:	2300      	movs	r3, #0
    f6b6:	5cc8      	ldrb	r0, [r1, r3]
    f6b8:	2800      	cmp	r0, #0
    f6ba:	d004      	beq.n	f6c6 <strstr+0x2c>
    f6bc:	5cd4      	ldrb	r4, [r2, r3]
    f6be:	4284      	cmp	r4, r0
    f6c0:	d1f4      	bne.n	f6ac <strstr+0x12>
    f6c2:	3301      	adds	r3, #1
    f6c4:	e7f7      	b.n	f6b6 <strstr+0x1c>
    f6c6:	0010      	movs	r0, r2
    f6c8:	e7ef      	b.n	f6aa <strstr+0x10>
	...

0000f6cc <strtok>:
    f6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f6ce:	4b12      	ldr	r3, [pc, #72]	; (f718 <strtok+0x4c>)
    f6d0:	0006      	movs	r6, r0
    f6d2:	681d      	ldr	r5, [r3, #0]
    f6d4:	000f      	movs	r7, r1
    f6d6:	6dac      	ldr	r4, [r5, #88]	; 0x58
    f6d8:	2c00      	cmp	r4, #0
    f6da:	d116      	bne.n	f70a <strtok+0x3e>
    f6dc:	2050      	movs	r0, #80	; 0x50
    f6de:	f7ff f8b1 	bl	e844 <malloc>
    f6e2:	65a8      	str	r0, [r5, #88]	; 0x58
    f6e4:	6004      	str	r4, [r0, #0]
    f6e6:	6044      	str	r4, [r0, #4]
    f6e8:	6084      	str	r4, [r0, #8]
    f6ea:	60c4      	str	r4, [r0, #12]
    f6ec:	6104      	str	r4, [r0, #16]
    f6ee:	6144      	str	r4, [r0, #20]
    f6f0:	6184      	str	r4, [r0, #24]
    f6f2:	6284      	str	r4, [r0, #40]	; 0x28
    f6f4:	62c4      	str	r4, [r0, #44]	; 0x2c
    f6f6:	6304      	str	r4, [r0, #48]	; 0x30
    f6f8:	6344      	str	r4, [r0, #52]	; 0x34
    f6fa:	6384      	str	r4, [r0, #56]	; 0x38
    f6fc:	63c4      	str	r4, [r0, #60]	; 0x3c
    f6fe:	6404      	str	r4, [r0, #64]	; 0x40
    f700:	6444      	str	r4, [r0, #68]	; 0x44
    f702:	6484      	str	r4, [r0, #72]	; 0x48
    f704:	64c4      	str	r4, [r0, #76]	; 0x4c
    f706:	7704      	strb	r4, [r0, #28]
    f708:	6244      	str	r4, [r0, #36]	; 0x24
    f70a:	6daa      	ldr	r2, [r5, #88]	; 0x58
    f70c:	0039      	movs	r1, r7
    f70e:	0030      	movs	r0, r6
    f710:	2301      	movs	r3, #1
    f712:	f000 f803 	bl	f71c <__strtok_r>
    f716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f718:	20000010 	.word	0x20000010

0000f71c <__strtok_r>:
    f71c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f71e:	2800      	cmp	r0, #0
    f720:	d104      	bne.n	f72c <__strtok_r+0x10>
    f722:	6810      	ldr	r0, [r2, #0]
    f724:	2800      	cmp	r0, #0
    f726:	d101      	bne.n	f72c <__strtok_r+0x10>
    f728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f72a:	0020      	movs	r0, r4
    f72c:	000e      	movs	r6, r1
    f72e:	7805      	ldrb	r5, [r0, #0]
    f730:	1c44      	adds	r4, r0, #1
    f732:	7837      	ldrb	r7, [r6, #0]
    f734:	2f00      	cmp	r7, #0
    f736:	d104      	bne.n	f742 <__strtok_r+0x26>
    f738:	2d00      	cmp	r5, #0
    f73a:	d110      	bne.n	f75e <__strtok_r+0x42>
    f73c:	6015      	str	r5, [r2, #0]
    f73e:	0028      	movs	r0, r5
    f740:	e7f2      	b.n	f728 <__strtok_r+0xc>
    f742:	3601      	adds	r6, #1
    f744:	42bd      	cmp	r5, r7
    f746:	d1f4      	bne.n	f732 <__strtok_r+0x16>
    f748:	2b00      	cmp	r3, #0
    f74a:	d1ee      	bne.n	f72a <__strtok_r+0xe>
    f74c:	6014      	str	r4, [r2, #0]
    f74e:	7003      	strb	r3, [r0, #0]
    f750:	e7ea      	b.n	f728 <__strtok_r+0xc>
    f752:	0033      	movs	r3, r6
    f754:	e00e      	b.n	f774 <__strtok_r+0x58>
    f756:	3501      	adds	r5, #1
    f758:	001c      	movs	r4, r3
    f75a:	2f00      	cmp	r7, #0
    f75c:	d102      	bne.n	f764 <__strtok_r+0x48>
    f75e:	000d      	movs	r5, r1
    f760:	7826      	ldrb	r6, [r4, #0]
    f762:	1c63      	adds	r3, r4, #1
    f764:	782f      	ldrb	r7, [r5, #0]
    f766:	42be      	cmp	r6, r7
    f768:	d1f5      	bne.n	f756 <__strtok_r+0x3a>
    f76a:	2e00      	cmp	r6, #0
    f76c:	d0f1      	beq.n	f752 <__strtok_r+0x36>
    f76e:	2400      	movs	r4, #0
    f770:	1e59      	subs	r1, r3, #1
    f772:	700c      	strb	r4, [r1, #0]
    f774:	6013      	str	r3, [r2, #0]
    f776:	e7d7      	b.n	f728 <__strtok_r+0xc>

0000f778 <_strtol_l.isra.0>:
    f778:	b5f0      	push	{r4, r5, r6, r7, lr}
    f77a:	001f      	movs	r7, r3
    f77c:	000e      	movs	r6, r1
    f77e:	b087      	sub	sp, #28
    f780:	9005      	str	r0, [sp, #20]
    f782:	9103      	str	r1, [sp, #12]
    f784:	9202      	str	r2, [sp, #8]
    f786:	980c      	ldr	r0, [sp, #48]	; 0x30
    f788:	7834      	ldrb	r4, [r6, #0]
    f78a:	f7ff f849 	bl	e820 <__locale_ctype_ptr_l>
    f78e:	2208      	movs	r2, #8
    f790:	1900      	adds	r0, r0, r4
    f792:	7843      	ldrb	r3, [r0, #1]
    f794:	1c75      	adds	r5, r6, #1
    f796:	4013      	ands	r3, r2
    f798:	d10c      	bne.n	f7b4 <_strtol_l.isra.0+0x3c>
    f79a:	2c2d      	cmp	r4, #45	; 0x2d
    f79c:	d10c      	bne.n	f7b8 <_strtol_l.isra.0+0x40>
    f79e:	3301      	adds	r3, #1
    f7a0:	782c      	ldrb	r4, [r5, #0]
    f7a2:	9301      	str	r3, [sp, #4]
    f7a4:	1cb5      	adds	r5, r6, #2
    f7a6:	2f00      	cmp	r7, #0
    f7a8:	d00c      	beq.n	f7c4 <_strtol_l.isra.0+0x4c>
    f7aa:	2f10      	cmp	r7, #16
    f7ac:	d114      	bne.n	f7d8 <_strtol_l.isra.0+0x60>
    f7ae:	2c30      	cmp	r4, #48	; 0x30
    f7b0:	d00a      	beq.n	f7c8 <_strtol_l.isra.0+0x50>
    f7b2:	e011      	b.n	f7d8 <_strtol_l.isra.0+0x60>
    f7b4:	002e      	movs	r6, r5
    f7b6:	e7e6      	b.n	f786 <_strtol_l.isra.0+0xe>
    f7b8:	9301      	str	r3, [sp, #4]
    f7ba:	2c2b      	cmp	r4, #43	; 0x2b
    f7bc:	d1f3      	bne.n	f7a6 <_strtol_l.isra.0+0x2e>
    f7be:	782c      	ldrb	r4, [r5, #0]
    f7c0:	1cb5      	adds	r5, r6, #2
    f7c2:	e7f0      	b.n	f7a6 <_strtol_l.isra.0+0x2e>
    f7c4:	2c30      	cmp	r4, #48	; 0x30
    f7c6:	d12f      	bne.n	f828 <_strtol_l.isra.0+0xb0>
    f7c8:	2220      	movs	r2, #32
    f7ca:	782b      	ldrb	r3, [r5, #0]
    f7cc:	4393      	bics	r3, r2
    f7ce:	2b58      	cmp	r3, #88	; 0x58
    f7d0:	d151      	bne.n	f876 <_strtol_l.isra.0+0xfe>
    f7d2:	2710      	movs	r7, #16
    f7d4:	786c      	ldrb	r4, [r5, #1]
    f7d6:	3502      	adds	r5, #2
    f7d8:	9b01      	ldr	r3, [sp, #4]
    f7da:	4a29      	ldr	r2, [pc, #164]	; (f880 <_strtol_l.isra.0+0x108>)
    f7dc:	0039      	movs	r1, r7
    f7de:	189e      	adds	r6, r3, r2
    f7e0:	0030      	movs	r0, r6
    f7e2:	f002 f907 	bl	119f4 <__aeabi_uidivmod>
    f7e6:	0030      	movs	r0, r6
    f7e8:	9104      	str	r1, [sp, #16]
    f7ea:	0039      	movs	r1, r7
    f7ec:	f002 f87c 	bl	118e8 <__udivsi3>
    f7f0:	2101      	movs	r1, #1
    f7f2:	2300      	movs	r3, #0
    f7f4:	4249      	negs	r1, r1
    f7f6:	0002      	movs	r2, r0
    f7f8:	468c      	mov	ip, r1
    f7fa:	0018      	movs	r0, r3
    f7fc:	0021      	movs	r1, r4
    f7fe:	3930      	subs	r1, #48	; 0x30
    f800:	2909      	cmp	r1, #9
    f802:	d813      	bhi.n	f82c <_strtol_l.isra.0+0xb4>
    f804:	000c      	movs	r4, r1
    f806:	42a7      	cmp	r7, r4
    f808:	dd1c      	ble.n	f844 <_strtol_l.isra.0+0xcc>
    f80a:	1c59      	adds	r1, r3, #1
    f80c:	d009      	beq.n	f822 <_strtol_l.isra.0+0xaa>
    f80e:	4663      	mov	r3, ip
    f810:	4282      	cmp	r2, r0
    f812:	d306      	bcc.n	f822 <_strtol_l.isra.0+0xaa>
    f814:	d102      	bne.n	f81c <_strtol_l.isra.0+0xa4>
    f816:	9904      	ldr	r1, [sp, #16]
    f818:	42a1      	cmp	r1, r4
    f81a:	db02      	blt.n	f822 <_strtol_l.isra.0+0xaa>
    f81c:	2301      	movs	r3, #1
    f81e:	4378      	muls	r0, r7
    f820:	1820      	adds	r0, r4, r0
    f822:	782c      	ldrb	r4, [r5, #0]
    f824:	3501      	adds	r5, #1
    f826:	e7e9      	b.n	f7fc <_strtol_l.isra.0+0x84>
    f828:	270a      	movs	r7, #10
    f82a:	e7d5      	b.n	f7d8 <_strtol_l.isra.0+0x60>
    f82c:	0021      	movs	r1, r4
    f82e:	3941      	subs	r1, #65	; 0x41
    f830:	2919      	cmp	r1, #25
    f832:	d801      	bhi.n	f838 <_strtol_l.isra.0+0xc0>
    f834:	3c37      	subs	r4, #55	; 0x37
    f836:	e7e6      	b.n	f806 <_strtol_l.isra.0+0x8e>
    f838:	0021      	movs	r1, r4
    f83a:	3961      	subs	r1, #97	; 0x61
    f83c:	2919      	cmp	r1, #25
    f83e:	d801      	bhi.n	f844 <_strtol_l.isra.0+0xcc>
    f840:	3c57      	subs	r4, #87	; 0x57
    f842:	e7e0      	b.n	f806 <_strtol_l.isra.0+0x8e>
    f844:	1c5a      	adds	r2, r3, #1
    f846:	d108      	bne.n	f85a <_strtol_l.isra.0+0xe2>
    f848:	9a05      	ldr	r2, [sp, #20]
    f84a:	3323      	adds	r3, #35	; 0x23
    f84c:	6013      	str	r3, [r2, #0]
    f84e:	9b02      	ldr	r3, [sp, #8]
    f850:	0030      	movs	r0, r6
    f852:	2b00      	cmp	r3, #0
    f854:	d10b      	bne.n	f86e <_strtol_l.isra.0+0xf6>
    f856:	b007      	add	sp, #28
    f858:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f85a:	9a01      	ldr	r2, [sp, #4]
    f85c:	2a00      	cmp	r2, #0
    f85e:	d000      	beq.n	f862 <_strtol_l.isra.0+0xea>
    f860:	4240      	negs	r0, r0
    f862:	9a02      	ldr	r2, [sp, #8]
    f864:	2a00      	cmp	r2, #0
    f866:	d0f6      	beq.n	f856 <_strtol_l.isra.0+0xde>
    f868:	9a03      	ldr	r2, [sp, #12]
    f86a:	2b00      	cmp	r3, #0
    f86c:	d000      	beq.n	f870 <_strtol_l.isra.0+0xf8>
    f86e:	1e6a      	subs	r2, r5, #1
    f870:	9b02      	ldr	r3, [sp, #8]
    f872:	601a      	str	r2, [r3, #0]
    f874:	e7ef      	b.n	f856 <_strtol_l.isra.0+0xde>
    f876:	2430      	movs	r4, #48	; 0x30
    f878:	2f00      	cmp	r7, #0
    f87a:	d1ad      	bne.n	f7d8 <_strtol_l.isra.0+0x60>
    f87c:	3708      	adds	r7, #8
    f87e:	e7ab      	b.n	f7d8 <_strtol_l.isra.0+0x60>
    f880:	7fffffff 	.word	0x7fffffff

0000f884 <strtol>:
    f884:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f886:	0013      	movs	r3, r2
    f888:	4a06      	ldr	r2, [pc, #24]	; (f8a4 <strtol+0x20>)
    f88a:	0005      	movs	r5, r0
    f88c:	6810      	ldr	r0, [r2, #0]
    f88e:	6a04      	ldr	r4, [r0, #32]
    f890:	2c00      	cmp	r4, #0
    f892:	d100      	bne.n	f896 <strtol+0x12>
    f894:	4c04      	ldr	r4, [pc, #16]	; (f8a8 <strtol+0x24>)
    f896:	000a      	movs	r2, r1
    f898:	9400      	str	r4, [sp, #0]
    f89a:	0029      	movs	r1, r5
    f89c:	f7ff ff6c 	bl	f778 <_strtol_l.isra.0>
    f8a0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f8a2:	46c0      	nop			; (mov r8, r8)
    f8a4:	20000010 	.word	0x20000010
    f8a8:	20000074 	.word	0x20000074

0000f8ac <__swbuf_r>:
    f8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f8ae:	0005      	movs	r5, r0
    f8b0:	000e      	movs	r6, r1
    f8b2:	0014      	movs	r4, r2
    f8b4:	2800      	cmp	r0, #0
    f8b6:	d004      	beq.n	f8c2 <__swbuf_r+0x16>
    f8b8:	6983      	ldr	r3, [r0, #24]
    f8ba:	2b00      	cmp	r3, #0
    f8bc:	d101      	bne.n	f8c2 <__swbuf_r+0x16>
    f8be:	f001 f831 	bl	10924 <__sinit>
    f8c2:	4b22      	ldr	r3, [pc, #136]	; (f94c <__swbuf_r+0xa0>)
    f8c4:	429c      	cmp	r4, r3
    f8c6:	d12d      	bne.n	f924 <__swbuf_r+0x78>
    f8c8:	686c      	ldr	r4, [r5, #4]
    f8ca:	69a3      	ldr	r3, [r4, #24]
    f8cc:	60a3      	str	r3, [r4, #8]
    f8ce:	89a3      	ldrh	r3, [r4, #12]
    f8d0:	071b      	lsls	r3, r3, #28
    f8d2:	d531      	bpl.n	f938 <__swbuf_r+0x8c>
    f8d4:	6923      	ldr	r3, [r4, #16]
    f8d6:	2b00      	cmp	r3, #0
    f8d8:	d02e      	beq.n	f938 <__swbuf_r+0x8c>
    f8da:	6823      	ldr	r3, [r4, #0]
    f8dc:	6922      	ldr	r2, [r4, #16]
    f8de:	b2f7      	uxtb	r7, r6
    f8e0:	1a98      	subs	r0, r3, r2
    f8e2:	6963      	ldr	r3, [r4, #20]
    f8e4:	b2f6      	uxtb	r6, r6
    f8e6:	4298      	cmp	r0, r3
    f8e8:	db05      	blt.n	f8f6 <__swbuf_r+0x4a>
    f8ea:	0021      	movs	r1, r4
    f8ec:	0028      	movs	r0, r5
    f8ee:	f000 ffab 	bl	10848 <_fflush_r>
    f8f2:	2800      	cmp	r0, #0
    f8f4:	d126      	bne.n	f944 <__swbuf_r+0x98>
    f8f6:	68a3      	ldr	r3, [r4, #8]
    f8f8:	3001      	adds	r0, #1
    f8fa:	3b01      	subs	r3, #1
    f8fc:	60a3      	str	r3, [r4, #8]
    f8fe:	6823      	ldr	r3, [r4, #0]
    f900:	1c5a      	adds	r2, r3, #1
    f902:	6022      	str	r2, [r4, #0]
    f904:	701f      	strb	r7, [r3, #0]
    f906:	6963      	ldr	r3, [r4, #20]
    f908:	4298      	cmp	r0, r3
    f90a:	d004      	beq.n	f916 <__swbuf_r+0x6a>
    f90c:	89a3      	ldrh	r3, [r4, #12]
    f90e:	07db      	lsls	r3, r3, #31
    f910:	d51a      	bpl.n	f948 <__swbuf_r+0x9c>
    f912:	2e0a      	cmp	r6, #10
    f914:	d118      	bne.n	f948 <__swbuf_r+0x9c>
    f916:	0021      	movs	r1, r4
    f918:	0028      	movs	r0, r5
    f91a:	f000 ff95 	bl	10848 <_fflush_r>
    f91e:	2800      	cmp	r0, #0
    f920:	d012      	beq.n	f948 <__swbuf_r+0x9c>
    f922:	e00f      	b.n	f944 <__swbuf_r+0x98>
    f924:	4b0a      	ldr	r3, [pc, #40]	; (f950 <__swbuf_r+0xa4>)
    f926:	429c      	cmp	r4, r3
    f928:	d101      	bne.n	f92e <__swbuf_r+0x82>
    f92a:	68ac      	ldr	r4, [r5, #8]
    f92c:	e7cd      	b.n	f8ca <__swbuf_r+0x1e>
    f92e:	4b09      	ldr	r3, [pc, #36]	; (f954 <__swbuf_r+0xa8>)
    f930:	429c      	cmp	r4, r3
    f932:	d1ca      	bne.n	f8ca <__swbuf_r+0x1e>
    f934:	68ec      	ldr	r4, [r5, #12]
    f936:	e7c8      	b.n	f8ca <__swbuf_r+0x1e>
    f938:	0021      	movs	r1, r4
    f93a:	0028      	movs	r0, r5
    f93c:	f000 f818 	bl	f970 <__swsetup_r>
    f940:	2800      	cmp	r0, #0
    f942:	d0ca      	beq.n	f8da <__swbuf_r+0x2e>
    f944:	2601      	movs	r6, #1
    f946:	4276      	negs	r6, r6
    f948:	0030      	movs	r0, r6
    f94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f94c:	000167a0 	.word	0x000167a0
    f950:	000167c0 	.word	0x000167c0
    f954:	00016780 	.word	0x00016780

0000f958 <__ascii_wctomb>:
    f958:	1e0b      	subs	r3, r1, #0
    f95a:	d004      	beq.n	f966 <__ascii_wctomb+0xe>
    f95c:	2aff      	cmp	r2, #255	; 0xff
    f95e:	d904      	bls.n	f96a <__ascii_wctomb+0x12>
    f960:	238a      	movs	r3, #138	; 0x8a
    f962:	6003      	str	r3, [r0, #0]
    f964:	3b8b      	subs	r3, #139	; 0x8b
    f966:	0018      	movs	r0, r3
    f968:	4770      	bx	lr
    f96a:	700a      	strb	r2, [r1, #0]
    f96c:	2301      	movs	r3, #1
    f96e:	e7fa      	b.n	f966 <__ascii_wctomb+0xe>

0000f970 <__swsetup_r>:
    f970:	4b36      	ldr	r3, [pc, #216]	; (fa4c <__swsetup_r+0xdc>)
    f972:	b570      	push	{r4, r5, r6, lr}
    f974:	681d      	ldr	r5, [r3, #0]
    f976:	0006      	movs	r6, r0
    f978:	000c      	movs	r4, r1
    f97a:	2d00      	cmp	r5, #0
    f97c:	d005      	beq.n	f98a <__swsetup_r+0x1a>
    f97e:	69ab      	ldr	r3, [r5, #24]
    f980:	2b00      	cmp	r3, #0
    f982:	d102      	bne.n	f98a <__swsetup_r+0x1a>
    f984:	0028      	movs	r0, r5
    f986:	f000 ffcd 	bl	10924 <__sinit>
    f98a:	4b31      	ldr	r3, [pc, #196]	; (fa50 <__swsetup_r+0xe0>)
    f98c:	429c      	cmp	r4, r3
    f98e:	d10f      	bne.n	f9b0 <__swsetup_r+0x40>
    f990:	686c      	ldr	r4, [r5, #4]
    f992:	230c      	movs	r3, #12
    f994:	5ee2      	ldrsh	r2, [r4, r3]
    f996:	b293      	uxth	r3, r2
    f998:	0719      	lsls	r1, r3, #28
    f99a:	d42d      	bmi.n	f9f8 <__swsetup_r+0x88>
    f99c:	06d9      	lsls	r1, r3, #27
    f99e:	d411      	bmi.n	f9c4 <__swsetup_r+0x54>
    f9a0:	2309      	movs	r3, #9
    f9a2:	2001      	movs	r0, #1
    f9a4:	6033      	str	r3, [r6, #0]
    f9a6:	3337      	adds	r3, #55	; 0x37
    f9a8:	4313      	orrs	r3, r2
    f9aa:	81a3      	strh	r3, [r4, #12]
    f9ac:	4240      	negs	r0, r0
    f9ae:	bd70      	pop	{r4, r5, r6, pc}
    f9b0:	4b28      	ldr	r3, [pc, #160]	; (fa54 <__swsetup_r+0xe4>)
    f9b2:	429c      	cmp	r4, r3
    f9b4:	d101      	bne.n	f9ba <__swsetup_r+0x4a>
    f9b6:	68ac      	ldr	r4, [r5, #8]
    f9b8:	e7eb      	b.n	f992 <__swsetup_r+0x22>
    f9ba:	4b27      	ldr	r3, [pc, #156]	; (fa58 <__swsetup_r+0xe8>)
    f9bc:	429c      	cmp	r4, r3
    f9be:	d1e8      	bne.n	f992 <__swsetup_r+0x22>
    f9c0:	68ec      	ldr	r4, [r5, #12]
    f9c2:	e7e6      	b.n	f992 <__swsetup_r+0x22>
    f9c4:	075b      	lsls	r3, r3, #29
    f9c6:	d513      	bpl.n	f9f0 <__swsetup_r+0x80>
    f9c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f9ca:	2900      	cmp	r1, #0
    f9cc:	d008      	beq.n	f9e0 <__swsetup_r+0x70>
    f9ce:	0023      	movs	r3, r4
    f9d0:	3344      	adds	r3, #68	; 0x44
    f9d2:	4299      	cmp	r1, r3
    f9d4:	d002      	beq.n	f9dc <__swsetup_r+0x6c>
    f9d6:	0030      	movs	r0, r6
    f9d8:	f7fe ff7e 	bl	e8d8 <_free_r>
    f9dc:	2300      	movs	r3, #0
    f9de:	6363      	str	r3, [r4, #52]	; 0x34
    f9e0:	2224      	movs	r2, #36	; 0x24
    f9e2:	89a3      	ldrh	r3, [r4, #12]
    f9e4:	4393      	bics	r3, r2
    f9e6:	81a3      	strh	r3, [r4, #12]
    f9e8:	2300      	movs	r3, #0
    f9ea:	6063      	str	r3, [r4, #4]
    f9ec:	6923      	ldr	r3, [r4, #16]
    f9ee:	6023      	str	r3, [r4, #0]
    f9f0:	2308      	movs	r3, #8
    f9f2:	89a2      	ldrh	r2, [r4, #12]
    f9f4:	4313      	orrs	r3, r2
    f9f6:	81a3      	strh	r3, [r4, #12]
    f9f8:	6923      	ldr	r3, [r4, #16]
    f9fa:	2b00      	cmp	r3, #0
    f9fc:	d10b      	bne.n	fa16 <__swsetup_r+0xa6>
    f9fe:	21a0      	movs	r1, #160	; 0xa0
    fa00:	2280      	movs	r2, #128	; 0x80
    fa02:	89a3      	ldrh	r3, [r4, #12]
    fa04:	0089      	lsls	r1, r1, #2
    fa06:	0092      	lsls	r2, r2, #2
    fa08:	400b      	ands	r3, r1
    fa0a:	4293      	cmp	r3, r2
    fa0c:	d003      	beq.n	fa16 <__swsetup_r+0xa6>
    fa0e:	0021      	movs	r1, r4
    fa10:	0030      	movs	r0, r6
    fa12:	f001 f851 	bl	10ab8 <__smakebuf_r>
    fa16:	2301      	movs	r3, #1
    fa18:	89a2      	ldrh	r2, [r4, #12]
    fa1a:	4013      	ands	r3, r2
    fa1c:	d011      	beq.n	fa42 <__swsetup_r+0xd2>
    fa1e:	2300      	movs	r3, #0
    fa20:	60a3      	str	r3, [r4, #8]
    fa22:	6963      	ldr	r3, [r4, #20]
    fa24:	425b      	negs	r3, r3
    fa26:	61a3      	str	r3, [r4, #24]
    fa28:	2000      	movs	r0, #0
    fa2a:	6923      	ldr	r3, [r4, #16]
    fa2c:	4283      	cmp	r3, r0
    fa2e:	d1be      	bne.n	f9ae <__swsetup_r+0x3e>
    fa30:	230c      	movs	r3, #12
    fa32:	5ee2      	ldrsh	r2, [r4, r3]
    fa34:	0613      	lsls	r3, r2, #24
    fa36:	d5ba      	bpl.n	f9ae <__swsetup_r+0x3e>
    fa38:	2340      	movs	r3, #64	; 0x40
    fa3a:	4313      	orrs	r3, r2
    fa3c:	81a3      	strh	r3, [r4, #12]
    fa3e:	3801      	subs	r0, #1
    fa40:	e7b5      	b.n	f9ae <__swsetup_r+0x3e>
    fa42:	0792      	lsls	r2, r2, #30
    fa44:	d400      	bmi.n	fa48 <__swsetup_r+0xd8>
    fa46:	6963      	ldr	r3, [r4, #20]
    fa48:	60a3      	str	r3, [r4, #8]
    fa4a:	e7ed      	b.n	fa28 <__swsetup_r+0xb8>
    fa4c:	20000010 	.word	0x20000010
    fa50:	000167a0 	.word	0x000167a0
    fa54:	000167c0 	.word	0x000167c0
    fa58:	00016780 	.word	0x00016780

0000fa5c <quorem>:
    fa5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa5e:	6903      	ldr	r3, [r0, #16]
    fa60:	690c      	ldr	r4, [r1, #16]
    fa62:	b089      	sub	sp, #36	; 0x24
    fa64:	0007      	movs	r7, r0
    fa66:	9105      	str	r1, [sp, #20]
    fa68:	2600      	movs	r6, #0
    fa6a:	429c      	cmp	r4, r3
    fa6c:	dc6d      	bgt.n	fb4a <quorem+0xee>
    fa6e:	000b      	movs	r3, r1
    fa70:	3c01      	subs	r4, #1
    fa72:	3314      	adds	r3, #20
    fa74:	00a5      	lsls	r5, r4, #2
    fa76:	9303      	str	r3, [sp, #12]
    fa78:	195b      	adds	r3, r3, r5
    fa7a:	9304      	str	r3, [sp, #16]
    fa7c:	0003      	movs	r3, r0
    fa7e:	3314      	adds	r3, #20
    fa80:	9302      	str	r3, [sp, #8]
    fa82:	195d      	adds	r5, r3, r5
    fa84:	9b04      	ldr	r3, [sp, #16]
    fa86:	6828      	ldr	r0, [r5, #0]
    fa88:	681b      	ldr	r3, [r3, #0]
    fa8a:	1c59      	adds	r1, r3, #1
    fa8c:	9301      	str	r3, [sp, #4]
    fa8e:	f001 ff2b 	bl	118e8 <__udivsi3>
    fa92:	9001      	str	r0, [sp, #4]
    fa94:	42b0      	cmp	r0, r6
    fa96:	d02d      	beq.n	faf4 <quorem+0x98>
    fa98:	9b03      	ldr	r3, [sp, #12]
    fa9a:	9802      	ldr	r0, [sp, #8]
    fa9c:	469c      	mov	ip, r3
    fa9e:	9606      	str	r6, [sp, #24]
    faa0:	4662      	mov	r2, ip
    faa2:	ca08      	ldmia	r2!, {r3}
    faa4:	4694      	mov	ip, r2
    faa6:	9a01      	ldr	r2, [sp, #4]
    faa8:	b299      	uxth	r1, r3
    faaa:	4351      	muls	r1, r2
    faac:	0c1b      	lsrs	r3, r3, #16
    faae:	4353      	muls	r3, r2
    fab0:	1989      	adds	r1, r1, r6
    fab2:	0c0a      	lsrs	r2, r1, #16
    fab4:	189b      	adds	r3, r3, r2
    fab6:	9307      	str	r3, [sp, #28]
    fab8:	8802      	ldrh	r2, [r0, #0]
    faba:	0c1e      	lsrs	r6, r3, #16
    fabc:	9b06      	ldr	r3, [sp, #24]
    fabe:	b289      	uxth	r1, r1
    fac0:	18d2      	adds	r2, r2, r3
    fac2:	6803      	ldr	r3, [r0, #0]
    fac4:	1a52      	subs	r2, r2, r1
    fac6:	0c19      	lsrs	r1, r3, #16
    fac8:	466b      	mov	r3, sp
    faca:	8b9b      	ldrh	r3, [r3, #28]
    facc:	1acb      	subs	r3, r1, r3
    face:	1411      	asrs	r1, r2, #16
    fad0:	185b      	adds	r3, r3, r1
    fad2:	1419      	asrs	r1, r3, #16
    fad4:	b292      	uxth	r2, r2
    fad6:	041b      	lsls	r3, r3, #16
    fad8:	431a      	orrs	r2, r3
    fada:	9b04      	ldr	r3, [sp, #16]
    fadc:	9106      	str	r1, [sp, #24]
    fade:	c004      	stmia	r0!, {r2}
    fae0:	4563      	cmp	r3, ip
    fae2:	d2dd      	bcs.n	faa0 <quorem+0x44>
    fae4:	682b      	ldr	r3, [r5, #0]
    fae6:	2b00      	cmp	r3, #0
    fae8:	d104      	bne.n	faf4 <quorem+0x98>
    faea:	9b02      	ldr	r3, [sp, #8]
    faec:	3d04      	subs	r5, #4
    faee:	42ab      	cmp	r3, r5
    faf0:	d32e      	bcc.n	fb50 <quorem+0xf4>
    faf2:	613c      	str	r4, [r7, #16]
    faf4:	9905      	ldr	r1, [sp, #20]
    faf6:	0038      	movs	r0, r7
    faf8:	f001 fa41 	bl	10f7e <__mcmp>
    fafc:	2800      	cmp	r0, #0
    fafe:	db23      	blt.n	fb48 <quorem+0xec>
    fb00:	2500      	movs	r5, #0
    fb02:	9b01      	ldr	r3, [sp, #4]
    fb04:	9802      	ldr	r0, [sp, #8]
    fb06:	3301      	adds	r3, #1
    fb08:	9903      	ldr	r1, [sp, #12]
    fb0a:	9301      	str	r3, [sp, #4]
    fb0c:	c908      	ldmia	r1!, {r3}
    fb0e:	8802      	ldrh	r2, [r0, #0]
    fb10:	1955      	adds	r5, r2, r5
    fb12:	b29a      	uxth	r2, r3
    fb14:	1aaa      	subs	r2, r5, r2
    fb16:	6805      	ldr	r5, [r0, #0]
    fb18:	0c1b      	lsrs	r3, r3, #16
    fb1a:	0c2d      	lsrs	r5, r5, #16
    fb1c:	1aeb      	subs	r3, r5, r3
    fb1e:	1415      	asrs	r5, r2, #16
    fb20:	195b      	adds	r3, r3, r5
    fb22:	141d      	asrs	r5, r3, #16
    fb24:	b292      	uxth	r2, r2
    fb26:	041b      	lsls	r3, r3, #16
    fb28:	4313      	orrs	r3, r2
    fb2a:	c008      	stmia	r0!, {r3}
    fb2c:	9b04      	ldr	r3, [sp, #16]
    fb2e:	428b      	cmp	r3, r1
    fb30:	d2ec      	bcs.n	fb0c <quorem+0xb0>
    fb32:	9a02      	ldr	r2, [sp, #8]
    fb34:	00a3      	lsls	r3, r4, #2
    fb36:	18d3      	adds	r3, r2, r3
    fb38:	681a      	ldr	r2, [r3, #0]
    fb3a:	2a00      	cmp	r2, #0
    fb3c:	d104      	bne.n	fb48 <quorem+0xec>
    fb3e:	9a02      	ldr	r2, [sp, #8]
    fb40:	3b04      	subs	r3, #4
    fb42:	429a      	cmp	r2, r3
    fb44:	d309      	bcc.n	fb5a <quorem+0xfe>
    fb46:	613c      	str	r4, [r7, #16]
    fb48:	9e01      	ldr	r6, [sp, #4]
    fb4a:	0030      	movs	r0, r6
    fb4c:	b009      	add	sp, #36	; 0x24
    fb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb50:	682b      	ldr	r3, [r5, #0]
    fb52:	2b00      	cmp	r3, #0
    fb54:	d1cd      	bne.n	faf2 <quorem+0x96>
    fb56:	3c01      	subs	r4, #1
    fb58:	e7c7      	b.n	faea <quorem+0x8e>
    fb5a:	681a      	ldr	r2, [r3, #0]
    fb5c:	2a00      	cmp	r2, #0
    fb5e:	d1f2      	bne.n	fb46 <quorem+0xea>
    fb60:	3c01      	subs	r4, #1
    fb62:	e7ec      	b.n	fb3e <quorem+0xe2>

0000fb64 <_dtoa_r>:
    fb64:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb66:	0016      	movs	r6, r2
    fb68:	001f      	movs	r7, r3
    fb6a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    fb6c:	b09d      	sub	sp, #116	; 0x74
    fb6e:	9004      	str	r0, [sp, #16]
    fb70:	9d25      	ldr	r5, [sp, #148]	; 0x94
    fb72:	9606      	str	r6, [sp, #24]
    fb74:	9707      	str	r7, [sp, #28]
    fb76:	2c00      	cmp	r4, #0
    fb78:	d108      	bne.n	fb8c <_dtoa_r+0x28>
    fb7a:	2010      	movs	r0, #16
    fb7c:	f7fe fe62 	bl	e844 <malloc>
    fb80:	9b04      	ldr	r3, [sp, #16]
    fb82:	6258      	str	r0, [r3, #36]	; 0x24
    fb84:	6044      	str	r4, [r0, #4]
    fb86:	6084      	str	r4, [r0, #8]
    fb88:	6004      	str	r4, [r0, #0]
    fb8a:	60c4      	str	r4, [r0, #12]
    fb8c:	9b04      	ldr	r3, [sp, #16]
    fb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fb90:	6819      	ldr	r1, [r3, #0]
    fb92:	2900      	cmp	r1, #0
    fb94:	d00b      	beq.n	fbae <_dtoa_r+0x4a>
    fb96:	685a      	ldr	r2, [r3, #4]
    fb98:	2301      	movs	r3, #1
    fb9a:	4093      	lsls	r3, r2
    fb9c:	604a      	str	r2, [r1, #4]
    fb9e:	608b      	str	r3, [r1, #8]
    fba0:	9804      	ldr	r0, [sp, #16]
    fba2:	f001 f812 	bl	10bca <_Bfree>
    fba6:	2200      	movs	r2, #0
    fba8:	9b04      	ldr	r3, [sp, #16]
    fbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fbac:	601a      	str	r2, [r3, #0]
    fbae:	9b07      	ldr	r3, [sp, #28]
    fbb0:	2b00      	cmp	r3, #0
    fbb2:	da1f      	bge.n	fbf4 <_dtoa_r+0x90>
    fbb4:	2301      	movs	r3, #1
    fbb6:	602b      	str	r3, [r5, #0]
    fbb8:	007b      	lsls	r3, r7, #1
    fbba:	085b      	lsrs	r3, r3, #1
    fbbc:	9307      	str	r3, [sp, #28]
    fbbe:	9c07      	ldr	r4, [sp, #28]
    fbc0:	4bb7      	ldr	r3, [pc, #732]	; (fea0 <_dtoa_r+0x33c>)
    fbc2:	0022      	movs	r2, r4
    fbc4:	9319      	str	r3, [sp, #100]	; 0x64
    fbc6:	401a      	ands	r2, r3
    fbc8:	429a      	cmp	r2, r3
    fbca:	d116      	bne.n	fbfa <_dtoa_r+0x96>
    fbcc:	4bb5      	ldr	r3, [pc, #724]	; (fea4 <_dtoa_r+0x340>)
    fbce:	9a24      	ldr	r2, [sp, #144]	; 0x90
    fbd0:	6013      	str	r3, [r2, #0]
    fbd2:	9b06      	ldr	r3, [sp, #24]
    fbd4:	2b00      	cmp	r3, #0
    fbd6:	d103      	bne.n	fbe0 <_dtoa_r+0x7c>
    fbd8:	0324      	lsls	r4, r4, #12
    fbda:	d101      	bne.n	fbe0 <_dtoa_r+0x7c>
    fbdc:	f000 fd91 	bl	10702 <_dtoa_r+0xb9e>
    fbe0:	4bb1      	ldr	r3, [pc, #708]	; (fea8 <_dtoa_r+0x344>)
    fbe2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fbe4:	930a      	str	r3, [sp, #40]	; 0x28
    fbe6:	4bb1      	ldr	r3, [pc, #708]	; (feac <_dtoa_r+0x348>)
    fbe8:	2a00      	cmp	r2, #0
    fbea:	d001      	beq.n	fbf0 <_dtoa_r+0x8c>
    fbec:	f000 fd8f 	bl	1070e <_dtoa_r+0xbaa>
    fbf0:	f000 fd8f 	bl	10712 <_dtoa_r+0xbae>
    fbf4:	2300      	movs	r3, #0
    fbf6:	602b      	str	r3, [r5, #0]
    fbf8:	e7e1      	b.n	fbbe <_dtoa_r+0x5a>
    fbfa:	9e06      	ldr	r6, [sp, #24]
    fbfc:	9f07      	ldr	r7, [sp, #28]
    fbfe:	2200      	movs	r2, #0
    fc00:	2300      	movs	r3, #0
    fc02:	0030      	movs	r0, r6
    fc04:	0039      	movs	r1, r7
    fc06:	f001 fff5 	bl	11bf4 <__aeabi_dcmpeq>
    fc0a:	1e05      	subs	r5, r0, #0
    fc0c:	d00e      	beq.n	fc2c <_dtoa_r+0xc8>
    fc0e:	2301      	movs	r3, #1
    fc10:	9a24      	ldr	r2, [sp, #144]	; 0x90
    fc12:	6013      	str	r3, [r2, #0]
    fc14:	4ba6      	ldr	r3, [pc, #664]	; (feb0 <_dtoa_r+0x34c>)
    fc16:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fc18:	930a      	str	r3, [sp, #40]	; 0x28
    fc1a:	2a00      	cmp	r2, #0
    fc1c:	d101      	bne.n	fc22 <_dtoa_r+0xbe>
    fc1e:	f000 fd78 	bl	10712 <_dtoa_r+0xbae>
    fc22:	4aa4      	ldr	r2, [pc, #656]	; (feb4 <_dtoa_r+0x350>)
    fc24:	9926      	ldr	r1, [sp, #152]	; 0x98
    fc26:	600a      	str	r2, [r1, #0]
    fc28:	f000 fd73 	bl	10712 <_dtoa_r+0xbae>
    fc2c:	ab1a      	add	r3, sp, #104	; 0x68
    fc2e:	9301      	str	r3, [sp, #4]
    fc30:	ab1b      	add	r3, sp, #108	; 0x6c
    fc32:	9300      	str	r3, [sp, #0]
    fc34:	0032      	movs	r2, r6
    fc36:	003b      	movs	r3, r7
    fc38:	9804      	ldr	r0, [sp, #16]
    fc3a:	f001 fa1d 	bl	11078 <__d2b>
    fc3e:	0063      	lsls	r3, r4, #1
    fc40:	9005      	str	r0, [sp, #20]
    fc42:	0d5b      	lsrs	r3, r3, #21
    fc44:	d100      	bne.n	fc48 <_dtoa_r+0xe4>
    fc46:	e07f      	b.n	fd48 <_dtoa_r+0x1e4>
    fc48:	033a      	lsls	r2, r7, #12
    fc4a:	4c9b      	ldr	r4, [pc, #620]	; (feb8 <_dtoa_r+0x354>)
    fc4c:	0b12      	lsrs	r2, r2, #12
    fc4e:	4314      	orrs	r4, r2
    fc50:	0021      	movs	r1, r4
    fc52:	4a9a      	ldr	r2, [pc, #616]	; (febc <_dtoa_r+0x358>)
    fc54:	0030      	movs	r0, r6
    fc56:	9518      	str	r5, [sp, #96]	; 0x60
    fc58:	189e      	adds	r6, r3, r2
    fc5a:	2200      	movs	r2, #0
    fc5c:	4b98      	ldr	r3, [pc, #608]	; (fec0 <_dtoa_r+0x35c>)
    fc5e:	f003 fc9d 	bl	1359c <__aeabi_dsub>
    fc62:	4a98      	ldr	r2, [pc, #608]	; (fec4 <_dtoa_r+0x360>)
    fc64:	4b98      	ldr	r3, [pc, #608]	; (fec8 <_dtoa_r+0x364>)
    fc66:	f003 fa19 	bl	1309c <__aeabi_dmul>
    fc6a:	4a98      	ldr	r2, [pc, #608]	; (fecc <_dtoa_r+0x368>)
    fc6c:	4b98      	ldr	r3, [pc, #608]	; (fed0 <_dtoa_r+0x36c>)
    fc6e:	f002 fad1 	bl	12214 <__aeabi_dadd>
    fc72:	0004      	movs	r4, r0
    fc74:	0030      	movs	r0, r6
    fc76:	000d      	movs	r5, r1
    fc78:	f003 fffa 	bl	13c70 <__aeabi_i2d>
    fc7c:	4a95      	ldr	r2, [pc, #596]	; (fed4 <_dtoa_r+0x370>)
    fc7e:	4b96      	ldr	r3, [pc, #600]	; (fed8 <_dtoa_r+0x374>)
    fc80:	f003 fa0c 	bl	1309c <__aeabi_dmul>
    fc84:	0002      	movs	r2, r0
    fc86:	000b      	movs	r3, r1
    fc88:	0020      	movs	r0, r4
    fc8a:	0029      	movs	r1, r5
    fc8c:	f002 fac2 	bl	12214 <__aeabi_dadd>
    fc90:	0004      	movs	r4, r0
    fc92:	000d      	movs	r5, r1
    fc94:	f003 ffb8 	bl	13c08 <__aeabi_d2iz>
    fc98:	2200      	movs	r2, #0
    fc9a:	9003      	str	r0, [sp, #12]
    fc9c:	2300      	movs	r3, #0
    fc9e:	0020      	movs	r0, r4
    fca0:	0029      	movs	r1, r5
    fca2:	f001 ffad 	bl	11c00 <__aeabi_dcmplt>
    fca6:	2800      	cmp	r0, #0
    fca8:	d00e      	beq.n	fcc8 <_dtoa_r+0x164>
    fcaa:	9803      	ldr	r0, [sp, #12]
    fcac:	f003 ffe0 	bl	13c70 <__aeabi_i2d>
    fcb0:	000b      	movs	r3, r1
    fcb2:	0002      	movs	r2, r0
    fcb4:	0029      	movs	r1, r5
    fcb6:	0020      	movs	r0, r4
    fcb8:	f001 ff9c 	bl	11bf4 <__aeabi_dcmpeq>
    fcbc:	0003      	movs	r3, r0
    fcbe:	4258      	negs	r0, r3
    fcc0:	4158      	adcs	r0, r3
    fcc2:	9b03      	ldr	r3, [sp, #12]
    fcc4:	1a1b      	subs	r3, r3, r0
    fcc6:	9303      	str	r3, [sp, #12]
    fcc8:	2301      	movs	r3, #1
    fcca:	9316      	str	r3, [sp, #88]	; 0x58
    fccc:	9b03      	ldr	r3, [sp, #12]
    fcce:	2b16      	cmp	r3, #22
    fcd0:	d80f      	bhi.n	fcf2 <_dtoa_r+0x18e>
    fcd2:	4982      	ldr	r1, [pc, #520]	; (fedc <_dtoa_r+0x378>)
    fcd4:	00db      	lsls	r3, r3, #3
    fcd6:	18c9      	adds	r1, r1, r3
    fcd8:	6808      	ldr	r0, [r1, #0]
    fcda:	6849      	ldr	r1, [r1, #4]
    fcdc:	9a06      	ldr	r2, [sp, #24]
    fcde:	9b07      	ldr	r3, [sp, #28]
    fce0:	f001 ffa2 	bl	11c28 <__aeabi_dcmpgt>
    fce4:	2800      	cmp	r0, #0
    fce6:	d04b      	beq.n	fd80 <_dtoa_r+0x21c>
    fce8:	9b03      	ldr	r3, [sp, #12]
    fcea:	3b01      	subs	r3, #1
    fcec:	9303      	str	r3, [sp, #12]
    fcee:	2300      	movs	r3, #0
    fcf0:	9316      	str	r3, [sp, #88]	; 0x58
    fcf2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    fcf4:	1b9e      	subs	r6, r3, r6
    fcf6:	2300      	movs	r3, #0
    fcf8:	930b      	str	r3, [sp, #44]	; 0x2c
    fcfa:	0033      	movs	r3, r6
    fcfc:	3b01      	subs	r3, #1
    fcfe:	930c      	str	r3, [sp, #48]	; 0x30
    fd00:	d504      	bpl.n	fd0c <_dtoa_r+0x1a8>
    fd02:	2301      	movs	r3, #1
    fd04:	1b9b      	subs	r3, r3, r6
    fd06:	930b      	str	r3, [sp, #44]	; 0x2c
    fd08:	2300      	movs	r3, #0
    fd0a:	930c      	str	r3, [sp, #48]	; 0x30
    fd0c:	9b03      	ldr	r3, [sp, #12]
    fd0e:	2b00      	cmp	r3, #0
    fd10:	db38      	blt.n	fd84 <_dtoa_r+0x220>
    fd12:	9a03      	ldr	r2, [sp, #12]
    fd14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fd16:	4694      	mov	ip, r2
    fd18:	4463      	add	r3, ip
    fd1a:	930c      	str	r3, [sp, #48]	; 0x30
    fd1c:	2300      	movs	r3, #0
    fd1e:	920f      	str	r2, [sp, #60]	; 0x3c
    fd20:	9308      	str	r3, [sp, #32]
    fd22:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fd24:	2501      	movs	r5, #1
    fd26:	2b09      	cmp	r3, #9
    fd28:	d900      	bls.n	fd2c <_dtoa_r+0x1c8>
    fd2a:	e091      	b.n	fe50 <_dtoa_r+0x2ec>
    fd2c:	2b05      	cmp	r3, #5
    fd2e:	dd02      	ble.n	fd36 <_dtoa_r+0x1d2>
    fd30:	2500      	movs	r5, #0
    fd32:	3b04      	subs	r3, #4
    fd34:	9322      	str	r3, [sp, #136]	; 0x88
    fd36:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fd38:	1e98      	subs	r0, r3, #2
    fd3a:	2803      	cmp	r0, #3
    fd3c:	d900      	bls.n	fd40 <_dtoa_r+0x1dc>
    fd3e:	e091      	b.n	fe64 <_dtoa_r+0x300>
    fd40:	f001 fdc8 	bl	118d4 <__gnu_thumb1_case_uqi>
    fd44:	76298482 	.word	0x76298482
    fd48:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    fd4a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    fd4c:	189e      	adds	r6, r3, r2
    fd4e:	4b64      	ldr	r3, [pc, #400]	; (fee0 <_dtoa_r+0x37c>)
    fd50:	18f2      	adds	r2, r6, r3
    fd52:	2a20      	cmp	r2, #32
    fd54:	dd0f      	ble.n	fd76 <_dtoa_r+0x212>
    fd56:	4b63      	ldr	r3, [pc, #396]	; (fee4 <_dtoa_r+0x380>)
    fd58:	9806      	ldr	r0, [sp, #24]
    fd5a:	18f3      	adds	r3, r6, r3
    fd5c:	40d8      	lsrs	r0, r3
    fd5e:	2340      	movs	r3, #64	; 0x40
    fd60:	1a9b      	subs	r3, r3, r2
    fd62:	409c      	lsls	r4, r3
    fd64:	4320      	orrs	r0, r4
    fd66:	f003 ffc5 	bl	13cf4 <__aeabi_ui2d>
    fd6a:	2301      	movs	r3, #1
    fd6c:	4c5e      	ldr	r4, [pc, #376]	; (fee8 <_dtoa_r+0x384>)
    fd6e:	3e01      	subs	r6, #1
    fd70:	1909      	adds	r1, r1, r4
    fd72:	9318      	str	r3, [sp, #96]	; 0x60
    fd74:	e771      	b.n	fc5a <_dtoa_r+0xf6>
    fd76:	2320      	movs	r3, #32
    fd78:	9806      	ldr	r0, [sp, #24]
    fd7a:	1a9b      	subs	r3, r3, r2
    fd7c:	4098      	lsls	r0, r3
    fd7e:	e7f2      	b.n	fd66 <_dtoa_r+0x202>
    fd80:	9016      	str	r0, [sp, #88]	; 0x58
    fd82:	e7b6      	b.n	fcf2 <_dtoa_r+0x18e>
    fd84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fd86:	9a03      	ldr	r2, [sp, #12]
    fd88:	1a9b      	subs	r3, r3, r2
    fd8a:	930b      	str	r3, [sp, #44]	; 0x2c
    fd8c:	4253      	negs	r3, r2
    fd8e:	9308      	str	r3, [sp, #32]
    fd90:	2300      	movs	r3, #0
    fd92:	930f      	str	r3, [sp, #60]	; 0x3c
    fd94:	e7c5      	b.n	fd22 <_dtoa_r+0x1be>
    fd96:	2301      	movs	r3, #1
    fd98:	930e      	str	r3, [sp, #56]	; 0x38
    fd9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fd9c:	2b00      	cmp	r3, #0
    fd9e:	dd65      	ble.n	fe6c <_dtoa_r+0x308>
    fda0:	001f      	movs	r7, r3
    fda2:	930d      	str	r3, [sp, #52]	; 0x34
    fda4:	9a04      	ldr	r2, [sp, #16]
    fda6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    fda8:	2200      	movs	r2, #0
    fdaa:	6062      	str	r2, [r4, #4]
    fdac:	3204      	adds	r2, #4
    fdae:	0011      	movs	r1, r2
    fdb0:	3114      	adds	r1, #20
    fdb2:	4299      	cmp	r1, r3
    fdb4:	d95f      	bls.n	fe76 <_dtoa_r+0x312>
    fdb6:	6861      	ldr	r1, [r4, #4]
    fdb8:	9804      	ldr	r0, [sp, #16]
    fdba:	f000 fece 	bl	10b5a <_Balloc>
    fdbe:	9b04      	ldr	r3, [sp, #16]
    fdc0:	6020      	str	r0, [r4, #0]
    fdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fdc4:	681b      	ldr	r3, [r3, #0]
    fdc6:	930a      	str	r3, [sp, #40]	; 0x28
    fdc8:	2f0e      	cmp	r7, #14
    fdca:	d900      	bls.n	fdce <_dtoa_r+0x26a>
    fdcc:	e105      	b.n	ffda <_dtoa_r+0x476>
    fdce:	2d00      	cmp	r5, #0
    fdd0:	d100      	bne.n	fdd4 <_dtoa_r+0x270>
    fdd2:	e102      	b.n	ffda <_dtoa_r+0x476>
    fdd4:	9b06      	ldr	r3, [sp, #24]
    fdd6:	9c07      	ldr	r4, [sp, #28]
    fdd8:	9314      	str	r3, [sp, #80]	; 0x50
    fdda:	9415      	str	r4, [sp, #84]	; 0x54
    fddc:	9b03      	ldr	r3, [sp, #12]
    fdde:	2b00      	cmp	r3, #0
    fde0:	dc00      	bgt.n	fde4 <_dtoa_r+0x280>
    fde2:	e085      	b.n	fef0 <_dtoa_r+0x38c>
    fde4:	001a      	movs	r2, r3
    fde6:	210f      	movs	r1, #15
    fde8:	4b3c      	ldr	r3, [pc, #240]	; (fedc <_dtoa_r+0x378>)
    fdea:	400a      	ands	r2, r1
    fdec:	00d2      	lsls	r2, r2, #3
    fdee:	189b      	adds	r3, r3, r2
    fdf0:	685c      	ldr	r4, [r3, #4]
    fdf2:	681b      	ldr	r3, [r3, #0]
    fdf4:	9310      	str	r3, [sp, #64]	; 0x40
    fdf6:	9411      	str	r4, [sp, #68]	; 0x44
    fdf8:	9b03      	ldr	r3, [sp, #12]
    fdfa:	2402      	movs	r4, #2
    fdfc:	111d      	asrs	r5, r3, #4
    fdfe:	06eb      	lsls	r3, r5, #27
    fe00:	d50a      	bpl.n	fe18 <_dtoa_r+0x2b4>
    fe02:	4b3a      	ldr	r3, [pc, #232]	; (feec <_dtoa_r+0x388>)
    fe04:	400d      	ands	r5, r1
    fe06:	6a1a      	ldr	r2, [r3, #32]
    fe08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fe0a:	9814      	ldr	r0, [sp, #80]	; 0x50
    fe0c:	9915      	ldr	r1, [sp, #84]	; 0x54
    fe0e:	f002 fd11 	bl	12834 <__aeabi_ddiv>
    fe12:	9006      	str	r0, [sp, #24]
    fe14:	9107      	str	r1, [sp, #28]
    fe16:	3401      	adds	r4, #1
    fe18:	4e34      	ldr	r6, [pc, #208]	; (feec <_dtoa_r+0x388>)
    fe1a:	2d00      	cmp	r5, #0
    fe1c:	d130      	bne.n	fe80 <_dtoa_r+0x31c>
    fe1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fe20:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fe22:	9806      	ldr	r0, [sp, #24]
    fe24:	9907      	ldr	r1, [sp, #28]
    fe26:	f002 fd05 	bl	12834 <__aeabi_ddiv>
    fe2a:	9006      	str	r0, [sp, #24]
    fe2c:	9107      	str	r1, [sp, #28]
    fe2e:	e07a      	b.n	ff26 <_dtoa_r+0x3c2>
    fe30:	2301      	movs	r3, #1
    fe32:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    fe34:	930e      	str	r3, [sp, #56]	; 0x38
    fe36:	4694      	mov	ip, r2
    fe38:	9b03      	ldr	r3, [sp, #12]
    fe3a:	4463      	add	r3, ip
    fe3c:	1c5f      	adds	r7, r3, #1
    fe3e:	930d      	str	r3, [sp, #52]	; 0x34
    fe40:	1e3b      	subs	r3, r7, #0
    fe42:	dcaf      	bgt.n	fda4 <_dtoa_r+0x240>
    fe44:	2301      	movs	r3, #1
    fe46:	e7ad      	b.n	fda4 <_dtoa_r+0x240>
    fe48:	2300      	movs	r3, #0
    fe4a:	e7a5      	b.n	fd98 <_dtoa_r+0x234>
    fe4c:	2300      	movs	r3, #0
    fe4e:	e7f0      	b.n	fe32 <_dtoa_r+0x2ce>
    fe50:	2300      	movs	r3, #0
    fe52:	950e      	str	r5, [sp, #56]	; 0x38
    fe54:	9322      	str	r3, [sp, #136]	; 0x88
    fe56:	3b01      	subs	r3, #1
    fe58:	2200      	movs	r2, #0
    fe5a:	930d      	str	r3, [sp, #52]	; 0x34
    fe5c:	001f      	movs	r7, r3
    fe5e:	3313      	adds	r3, #19
    fe60:	9223      	str	r2, [sp, #140]	; 0x8c
    fe62:	e79f      	b.n	fda4 <_dtoa_r+0x240>
    fe64:	2301      	movs	r3, #1
    fe66:	930e      	str	r3, [sp, #56]	; 0x38
    fe68:	3b02      	subs	r3, #2
    fe6a:	e7f5      	b.n	fe58 <_dtoa_r+0x2f4>
    fe6c:	2301      	movs	r3, #1
    fe6e:	930d      	str	r3, [sp, #52]	; 0x34
    fe70:	001f      	movs	r7, r3
    fe72:	001a      	movs	r2, r3
    fe74:	e7f4      	b.n	fe60 <_dtoa_r+0x2fc>
    fe76:	6861      	ldr	r1, [r4, #4]
    fe78:	0052      	lsls	r2, r2, #1
    fe7a:	3101      	adds	r1, #1
    fe7c:	6061      	str	r1, [r4, #4]
    fe7e:	e796      	b.n	fdae <_dtoa_r+0x24a>
    fe80:	2301      	movs	r3, #1
    fe82:	421d      	tst	r5, r3
    fe84:	d008      	beq.n	fe98 <_dtoa_r+0x334>
    fe86:	9810      	ldr	r0, [sp, #64]	; 0x40
    fe88:	9911      	ldr	r1, [sp, #68]	; 0x44
    fe8a:	18e4      	adds	r4, r4, r3
    fe8c:	6832      	ldr	r2, [r6, #0]
    fe8e:	6873      	ldr	r3, [r6, #4]
    fe90:	f003 f904 	bl	1309c <__aeabi_dmul>
    fe94:	9010      	str	r0, [sp, #64]	; 0x40
    fe96:	9111      	str	r1, [sp, #68]	; 0x44
    fe98:	106d      	asrs	r5, r5, #1
    fe9a:	3608      	adds	r6, #8
    fe9c:	e7bd      	b.n	fe1a <_dtoa_r+0x2b6>
    fe9e:	46c0      	nop			; (mov r8, r8)
    fea0:	7ff00000 	.word	0x7ff00000
    fea4:	0000270f 	.word	0x0000270f
    fea8:	0001677c 	.word	0x0001677c
    feac:	0001677f 	.word	0x0001677f
    feb0:	0001664e 	.word	0x0001664e
    feb4:	0001664f 	.word	0x0001664f
    feb8:	3ff00000 	.word	0x3ff00000
    febc:	fffffc01 	.word	0xfffffc01
    fec0:	3ff80000 	.word	0x3ff80000
    fec4:	636f4361 	.word	0x636f4361
    fec8:	3fd287a7 	.word	0x3fd287a7
    fecc:	8b60c8b3 	.word	0x8b60c8b3
    fed0:	3fc68a28 	.word	0x3fc68a28
    fed4:	509f79fb 	.word	0x509f79fb
    fed8:	3fd34413 	.word	0x3fd34413
    fedc:	00016808 	.word	0x00016808
    fee0:	00000432 	.word	0x00000432
    fee4:	00000412 	.word	0x00000412
    fee8:	fe100000 	.word	0xfe100000
    feec:	000167e0 	.word	0x000167e0
    fef0:	9b03      	ldr	r3, [sp, #12]
    fef2:	2402      	movs	r4, #2
    fef4:	2b00      	cmp	r3, #0
    fef6:	d016      	beq.n	ff26 <_dtoa_r+0x3c2>
    fef8:	9814      	ldr	r0, [sp, #80]	; 0x50
    fefa:	9915      	ldr	r1, [sp, #84]	; 0x54
    fefc:	425d      	negs	r5, r3
    fefe:	230f      	movs	r3, #15
    ff00:	4aca      	ldr	r2, [pc, #808]	; (1022c <_dtoa_r+0x6c8>)
    ff02:	402b      	ands	r3, r5
    ff04:	00db      	lsls	r3, r3, #3
    ff06:	18d3      	adds	r3, r2, r3
    ff08:	681a      	ldr	r2, [r3, #0]
    ff0a:	685b      	ldr	r3, [r3, #4]
    ff0c:	f003 f8c6 	bl	1309c <__aeabi_dmul>
    ff10:	2300      	movs	r3, #0
    ff12:	9006      	str	r0, [sp, #24]
    ff14:	9107      	str	r1, [sp, #28]
    ff16:	4ec6      	ldr	r6, [pc, #792]	; (10230 <_dtoa_r+0x6cc>)
    ff18:	112d      	asrs	r5, r5, #4
    ff1a:	2d00      	cmp	r5, #0
    ff1c:	d000      	beq.n	ff20 <_dtoa_r+0x3bc>
    ff1e:	e08c      	b.n	1003a <_dtoa_r+0x4d6>
    ff20:	2b00      	cmp	r3, #0
    ff22:	d000      	beq.n	ff26 <_dtoa_r+0x3c2>
    ff24:	e781      	b.n	fe2a <_dtoa_r+0x2c6>
    ff26:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ff28:	2b00      	cmp	r3, #0
    ff2a:	d100      	bne.n	ff2e <_dtoa_r+0x3ca>
    ff2c:	e091      	b.n	10052 <_dtoa_r+0x4ee>
    ff2e:	9a06      	ldr	r2, [sp, #24]
    ff30:	9b07      	ldr	r3, [sp, #28]
    ff32:	9210      	str	r2, [sp, #64]	; 0x40
    ff34:	9311      	str	r3, [sp, #68]	; 0x44
    ff36:	9810      	ldr	r0, [sp, #64]	; 0x40
    ff38:	9911      	ldr	r1, [sp, #68]	; 0x44
    ff3a:	2200      	movs	r2, #0
    ff3c:	4bbd      	ldr	r3, [pc, #756]	; (10234 <_dtoa_r+0x6d0>)
    ff3e:	f001 fe5f 	bl	11c00 <__aeabi_dcmplt>
    ff42:	2800      	cmp	r0, #0
    ff44:	d100      	bne.n	ff48 <_dtoa_r+0x3e4>
    ff46:	e084      	b.n	10052 <_dtoa_r+0x4ee>
    ff48:	2f00      	cmp	r7, #0
    ff4a:	d100      	bne.n	ff4e <_dtoa_r+0x3ea>
    ff4c:	e081      	b.n	10052 <_dtoa_r+0x4ee>
    ff4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ff50:	2b00      	cmp	r3, #0
    ff52:	dd3e      	ble.n	ffd2 <_dtoa_r+0x46e>
    ff54:	9810      	ldr	r0, [sp, #64]	; 0x40
    ff56:	9911      	ldr	r1, [sp, #68]	; 0x44
    ff58:	9b03      	ldr	r3, [sp, #12]
    ff5a:	2200      	movs	r2, #0
    ff5c:	1e5e      	subs	r6, r3, #1
    ff5e:	4bb6      	ldr	r3, [pc, #728]	; (10238 <_dtoa_r+0x6d4>)
    ff60:	f003 f89c 	bl	1309c <__aeabi_dmul>
    ff64:	9006      	str	r0, [sp, #24]
    ff66:	9107      	str	r1, [sp, #28]
    ff68:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    ff6a:	3401      	adds	r4, #1
    ff6c:	0020      	movs	r0, r4
    ff6e:	f003 fe7f 	bl	13c70 <__aeabi_i2d>
    ff72:	9a06      	ldr	r2, [sp, #24]
    ff74:	9b07      	ldr	r3, [sp, #28]
    ff76:	f003 f891 	bl	1309c <__aeabi_dmul>
    ff7a:	2200      	movs	r2, #0
    ff7c:	4baf      	ldr	r3, [pc, #700]	; (1023c <_dtoa_r+0x6d8>)
    ff7e:	f002 f949 	bl	12214 <__aeabi_dadd>
    ff82:	9012      	str	r0, [sp, #72]	; 0x48
    ff84:	9113      	str	r1, [sp, #76]	; 0x4c
    ff86:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ff88:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    ff8a:	4aad      	ldr	r2, [pc, #692]	; (10240 <_dtoa_r+0x6dc>)
    ff8c:	9310      	str	r3, [sp, #64]	; 0x40
    ff8e:	9411      	str	r4, [sp, #68]	; 0x44
    ff90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ff92:	189c      	adds	r4, r3, r2
    ff94:	9411      	str	r4, [sp, #68]	; 0x44
    ff96:	2d00      	cmp	r5, #0
    ff98:	d15e      	bne.n	10058 <_dtoa_r+0x4f4>
    ff9a:	9806      	ldr	r0, [sp, #24]
    ff9c:	9907      	ldr	r1, [sp, #28]
    ff9e:	2200      	movs	r2, #0
    ffa0:	4ba8      	ldr	r3, [pc, #672]	; (10244 <_dtoa_r+0x6e0>)
    ffa2:	f003 fafb 	bl	1359c <__aeabi_dsub>
    ffa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ffa8:	0023      	movs	r3, r4
    ffaa:	9006      	str	r0, [sp, #24]
    ffac:	9107      	str	r1, [sp, #28]
    ffae:	f001 fe3b 	bl	11c28 <__aeabi_dcmpgt>
    ffb2:	2800      	cmp	r0, #0
    ffb4:	d000      	beq.n	ffb8 <_dtoa_r+0x454>
    ffb6:	e301      	b.n	105bc <_dtoa_r+0xa58>
    ffb8:	48a3      	ldr	r0, [pc, #652]	; (10248 <_dtoa_r+0x6e4>)
    ffba:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ffbc:	4684      	mov	ip, r0
    ffbe:	4461      	add	r1, ip
    ffc0:	000b      	movs	r3, r1
    ffc2:	9806      	ldr	r0, [sp, #24]
    ffc4:	9907      	ldr	r1, [sp, #28]
    ffc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ffc8:	f001 fe1a 	bl	11c00 <__aeabi_dcmplt>
    ffcc:	2800      	cmp	r0, #0
    ffce:	d000      	beq.n	ffd2 <_dtoa_r+0x46e>
    ffd0:	e2e8      	b.n	105a4 <_dtoa_r+0xa40>
    ffd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ffd4:	9c15      	ldr	r4, [sp, #84]	; 0x54
    ffd6:	9306      	str	r3, [sp, #24]
    ffd8:	9407      	str	r4, [sp, #28]
    ffda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ffdc:	2b00      	cmp	r3, #0
    ffde:	da00      	bge.n	ffe2 <_dtoa_r+0x47e>
    ffe0:	e157      	b.n	10292 <_dtoa_r+0x72e>
    ffe2:	9a03      	ldr	r2, [sp, #12]
    ffe4:	2a0e      	cmp	r2, #14
    ffe6:	dd00      	ble.n	ffea <_dtoa_r+0x486>
    ffe8:	e153      	b.n	10292 <_dtoa_r+0x72e>
    ffea:	4b90      	ldr	r3, [pc, #576]	; (1022c <_dtoa_r+0x6c8>)
    ffec:	00d2      	lsls	r2, r2, #3
    ffee:	189b      	adds	r3, r3, r2
    fff0:	685c      	ldr	r4, [r3, #4]
    fff2:	681b      	ldr	r3, [r3, #0]
    fff4:	9308      	str	r3, [sp, #32]
    fff6:	9409      	str	r4, [sp, #36]	; 0x24
    fff8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fffa:	2b00      	cmp	r3, #0
    fffc:	db00      	blt.n	10000 <_dtoa_r+0x49c>
    fffe:	e0ce      	b.n	1019e <_dtoa_r+0x63a>
   10000:	2f00      	cmp	r7, #0
   10002:	dd00      	ble.n	10006 <_dtoa_r+0x4a2>
   10004:	e0cb      	b.n	1019e <_dtoa_r+0x63a>
   10006:	d000      	beq.n	1000a <_dtoa_r+0x4a6>
   10008:	e2cf      	b.n	105aa <_dtoa_r+0xa46>
   1000a:	9808      	ldr	r0, [sp, #32]
   1000c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1000e:	2200      	movs	r2, #0
   10010:	4b8c      	ldr	r3, [pc, #560]	; (10244 <_dtoa_r+0x6e0>)
   10012:	f003 f843 	bl	1309c <__aeabi_dmul>
   10016:	9a06      	ldr	r2, [sp, #24]
   10018:	9b07      	ldr	r3, [sp, #28]
   1001a:	f001 fe0f 	bl	11c3c <__aeabi_dcmpge>
   1001e:	003e      	movs	r6, r7
   10020:	9708      	str	r7, [sp, #32]
   10022:	2800      	cmp	r0, #0
   10024:	d000      	beq.n	10028 <_dtoa_r+0x4c4>
   10026:	e2a4      	b.n	10572 <_dtoa_r+0xa0e>
   10028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1002a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1002c:	1c5d      	adds	r5, r3, #1
   1002e:	2331      	movs	r3, #49	; 0x31
   10030:	7013      	strb	r3, [r2, #0]
   10032:	9b03      	ldr	r3, [sp, #12]
   10034:	3301      	adds	r3, #1
   10036:	9303      	str	r3, [sp, #12]
   10038:	e29f      	b.n	1057a <_dtoa_r+0xa16>
   1003a:	2201      	movs	r2, #1
   1003c:	4215      	tst	r5, r2
   1003e:	d005      	beq.n	1004c <_dtoa_r+0x4e8>
   10040:	18a4      	adds	r4, r4, r2
   10042:	6832      	ldr	r2, [r6, #0]
   10044:	6873      	ldr	r3, [r6, #4]
   10046:	f003 f829 	bl	1309c <__aeabi_dmul>
   1004a:	2301      	movs	r3, #1
   1004c:	106d      	asrs	r5, r5, #1
   1004e:	3608      	adds	r6, #8
   10050:	e763      	b.n	ff1a <_dtoa_r+0x3b6>
   10052:	9e03      	ldr	r6, [sp, #12]
   10054:	003d      	movs	r5, r7
   10056:	e789      	b.n	ff6c <_dtoa_r+0x408>
   10058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1005a:	1e69      	subs	r1, r5, #1
   1005c:	1952      	adds	r2, r2, r5
   1005e:	9217      	str	r2, [sp, #92]	; 0x5c
   10060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10062:	4b72      	ldr	r3, [pc, #456]	; (1022c <_dtoa_r+0x6c8>)
   10064:	00c9      	lsls	r1, r1, #3
   10066:	2a00      	cmp	r2, #0
   10068:	d04a      	beq.n	10100 <_dtoa_r+0x59c>
   1006a:	185b      	adds	r3, r3, r1
   1006c:	681a      	ldr	r2, [r3, #0]
   1006e:	685b      	ldr	r3, [r3, #4]
   10070:	2000      	movs	r0, #0
   10072:	4976      	ldr	r1, [pc, #472]	; (1024c <_dtoa_r+0x6e8>)
   10074:	f002 fbde 	bl	12834 <__aeabi_ddiv>
   10078:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1007a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1007c:	f003 fa8e 	bl	1359c <__aeabi_dsub>
   10080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10082:	9010      	str	r0, [sp, #64]	; 0x40
   10084:	9111      	str	r1, [sp, #68]	; 0x44
   10086:	9312      	str	r3, [sp, #72]	; 0x48
   10088:	9806      	ldr	r0, [sp, #24]
   1008a:	9907      	ldr	r1, [sp, #28]
   1008c:	f003 fdbc 	bl	13c08 <__aeabi_d2iz>
   10090:	0004      	movs	r4, r0
   10092:	f003 fded 	bl	13c70 <__aeabi_i2d>
   10096:	0002      	movs	r2, r0
   10098:	000b      	movs	r3, r1
   1009a:	9806      	ldr	r0, [sp, #24]
   1009c:	9907      	ldr	r1, [sp, #28]
   1009e:	f003 fa7d 	bl	1359c <__aeabi_dsub>
   100a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   100a4:	3430      	adds	r4, #48	; 0x30
   100a6:	1c5d      	adds	r5, r3, #1
   100a8:	701c      	strb	r4, [r3, #0]
   100aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   100ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   100ae:	9006      	str	r0, [sp, #24]
   100b0:	9107      	str	r1, [sp, #28]
   100b2:	f001 fda5 	bl	11c00 <__aeabi_dcmplt>
   100b6:	2800      	cmp	r0, #0
   100b8:	d165      	bne.n	10186 <_dtoa_r+0x622>
   100ba:	9a06      	ldr	r2, [sp, #24]
   100bc:	9b07      	ldr	r3, [sp, #28]
   100be:	2000      	movs	r0, #0
   100c0:	495c      	ldr	r1, [pc, #368]	; (10234 <_dtoa_r+0x6d0>)
   100c2:	f003 fa6b 	bl	1359c <__aeabi_dsub>
   100c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   100c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   100ca:	f001 fd99 	bl	11c00 <__aeabi_dcmplt>
   100ce:	2800      	cmp	r0, #0
   100d0:	d000      	beq.n	100d4 <_dtoa_r+0x570>
   100d2:	e0be      	b.n	10252 <_dtoa_r+0x6ee>
   100d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   100d6:	429d      	cmp	r5, r3
   100d8:	d100      	bne.n	100dc <_dtoa_r+0x578>
   100da:	e77a      	b.n	ffd2 <_dtoa_r+0x46e>
   100dc:	9810      	ldr	r0, [sp, #64]	; 0x40
   100de:	9911      	ldr	r1, [sp, #68]	; 0x44
   100e0:	2200      	movs	r2, #0
   100e2:	4b55      	ldr	r3, [pc, #340]	; (10238 <_dtoa_r+0x6d4>)
   100e4:	f002 ffda 	bl	1309c <__aeabi_dmul>
   100e8:	2200      	movs	r2, #0
   100ea:	9010      	str	r0, [sp, #64]	; 0x40
   100ec:	9111      	str	r1, [sp, #68]	; 0x44
   100ee:	9806      	ldr	r0, [sp, #24]
   100f0:	9907      	ldr	r1, [sp, #28]
   100f2:	4b51      	ldr	r3, [pc, #324]	; (10238 <_dtoa_r+0x6d4>)
   100f4:	f002 ffd2 	bl	1309c <__aeabi_dmul>
   100f8:	9512      	str	r5, [sp, #72]	; 0x48
   100fa:	9006      	str	r0, [sp, #24]
   100fc:	9107      	str	r1, [sp, #28]
   100fe:	e7c3      	b.n	10088 <_dtoa_r+0x524>
   10100:	1859      	adds	r1, r3, r1
   10102:	6808      	ldr	r0, [r1, #0]
   10104:	6849      	ldr	r1, [r1, #4]
   10106:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10108:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1010a:	f002 ffc7 	bl	1309c <__aeabi_dmul>
   1010e:	9010      	str	r0, [sp, #64]	; 0x40
   10110:	9111      	str	r1, [sp, #68]	; 0x44
   10112:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10114:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   10116:	9806      	ldr	r0, [sp, #24]
   10118:	9907      	ldr	r1, [sp, #28]
   1011a:	f003 fd75 	bl	13c08 <__aeabi_d2iz>
   1011e:	9012      	str	r0, [sp, #72]	; 0x48
   10120:	f003 fda6 	bl	13c70 <__aeabi_i2d>
   10124:	0002      	movs	r2, r0
   10126:	000b      	movs	r3, r1
   10128:	9806      	ldr	r0, [sp, #24]
   1012a:	9907      	ldr	r1, [sp, #28]
   1012c:	f003 fa36 	bl	1359c <__aeabi_dsub>
   10130:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10132:	9006      	str	r0, [sp, #24]
   10134:	9107      	str	r1, [sp, #28]
   10136:	3330      	adds	r3, #48	; 0x30
   10138:	7023      	strb	r3, [r4, #0]
   1013a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1013c:	3401      	adds	r4, #1
   1013e:	2200      	movs	r2, #0
   10140:	42a3      	cmp	r3, r4
   10142:	d124      	bne.n	1018e <_dtoa_r+0x62a>
   10144:	4b41      	ldr	r3, [pc, #260]	; (1024c <_dtoa_r+0x6e8>)
   10146:	9810      	ldr	r0, [sp, #64]	; 0x40
   10148:	9911      	ldr	r1, [sp, #68]	; 0x44
   1014a:	f002 f863 	bl	12214 <__aeabi_dadd>
   1014e:	0002      	movs	r2, r0
   10150:	000b      	movs	r3, r1
   10152:	9806      	ldr	r0, [sp, #24]
   10154:	9907      	ldr	r1, [sp, #28]
   10156:	f001 fd67 	bl	11c28 <__aeabi_dcmpgt>
   1015a:	2800      	cmp	r0, #0
   1015c:	d000      	beq.n	10160 <_dtoa_r+0x5fc>
   1015e:	e078      	b.n	10252 <_dtoa_r+0x6ee>
   10160:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10162:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10164:	2000      	movs	r0, #0
   10166:	4939      	ldr	r1, [pc, #228]	; (1024c <_dtoa_r+0x6e8>)
   10168:	f003 fa18 	bl	1359c <__aeabi_dsub>
   1016c:	0002      	movs	r2, r0
   1016e:	000b      	movs	r3, r1
   10170:	9806      	ldr	r0, [sp, #24]
   10172:	9907      	ldr	r1, [sp, #28]
   10174:	f001 fd44 	bl	11c00 <__aeabi_dcmplt>
   10178:	2800      	cmp	r0, #0
   1017a:	d100      	bne.n	1017e <_dtoa_r+0x61a>
   1017c:	e729      	b.n	ffd2 <_dtoa_r+0x46e>
   1017e:	1e6b      	subs	r3, r5, #1
   10180:	781a      	ldrb	r2, [r3, #0]
   10182:	2a30      	cmp	r2, #48	; 0x30
   10184:	d001      	beq.n	1018a <_dtoa_r+0x626>
   10186:	9603      	str	r6, [sp, #12]
   10188:	e03f      	b.n	1020a <_dtoa_r+0x6a6>
   1018a:	001d      	movs	r5, r3
   1018c:	e7f7      	b.n	1017e <_dtoa_r+0x61a>
   1018e:	9806      	ldr	r0, [sp, #24]
   10190:	9907      	ldr	r1, [sp, #28]
   10192:	4b29      	ldr	r3, [pc, #164]	; (10238 <_dtoa_r+0x6d4>)
   10194:	f002 ff82 	bl	1309c <__aeabi_dmul>
   10198:	9006      	str	r0, [sp, #24]
   1019a:	9107      	str	r1, [sp, #28]
   1019c:	e7bb      	b.n	10116 <_dtoa_r+0x5b2>
   1019e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   101a0:	9a08      	ldr	r2, [sp, #32]
   101a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   101a4:	9806      	ldr	r0, [sp, #24]
   101a6:	9907      	ldr	r1, [sp, #28]
   101a8:	f002 fb44 	bl	12834 <__aeabi_ddiv>
   101ac:	f003 fd2c 	bl	13c08 <__aeabi_d2iz>
   101b0:	0004      	movs	r4, r0
   101b2:	f003 fd5d 	bl	13c70 <__aeabi_i2d>
   101b6:	9a08      	ldr	r2, [sp, #32]
   101b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   101ba:	f002 ff6f 	bl	1309c <__aeabi_dmul>
   101be:	000b      	movs	r3, r1
   101c0:	0002      	movs	r2, r0
   101c2:	9806      	ldr	r0, [sp, #24]
   101c4:	9907      	ldr	r1, [sp, #28]
   101c6:	f003 f9e9 	bl	1359c <__aeabi_dsub>
   101ca:	0023      	movs	r3, r4
   101cc:	3330      	adds	r3, #48	; 0x30
   101ce:	7033      	strb	r3, [r6, #0]
   101d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   101d2:	1c75      	adds	r5, r6, #1
   101d4:	1aeb      	subs	r3, r5, r3
   101d6:	429f      	cmp	r7, r3
   101d8:	d14c      	bne.n	10274 <_dtoa_r+0x710>
   101da:	0002      	movs	r2, r0
   101dc:	000b      	movs	r3, r1
   101de:	f002 f819 	bl	12214 <__aeabi_dadd>
   101e2:	0006      	movs	r6, r0
   101e4:	000f      	movs	r7, r1
   101e6:	0002      	movs	r2, r0
   101e8:	000b      	movs	r3, r1
   101ea:	9808      	ldr	r0, [sp, #32]
   101ec:	9909      	ldr	r1, [sp, #36]	; 0x24
   101ee:	f001 fd07 	bl	11c00 <__aeabi_dcmplt>
   101f2:	2800      	cmp	r0, #0
   101f4:	d12c      	bne.n	10250 <_dtoa_r+0x6ec>
   101f6:	9808      	ldr	r0, [sp, #32]
   101f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   101fa:	0032      	movs	r2, r6
   101fc:	003b      	movs	r3, r7
   101fe:	f001 fcf9 	bl	11bf4 <__aeabi_dcmpeq>
   10202:	2800      	cmp	r0, #0
   10204:	d001      	beq.n	1020a <_dtoa_r+0x6a6>
   10206:	07e3      	lsls	r3, r4, #31
   10208:	d422      	bmi.n	10250 <_dtoa_r+0x6ec>
   1020a:	9905      	ldr	r1, [sp, #20]
   1020c:	9804      	ldr	r0, [sp, #16]
   1020e:	f000 fcdc 	bl	10bca <_Bfree>
   10212:	2300      	movs	r3, #0
   10214:	702b      	strb	r3, [r5, #0]
   10216:	9b03      	ldr	r3, [sp, #12]
   10218:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1021a:	3301      	adds	r3, #1
   1021c:	6013      	str	r3, [r2, #0]
   1021e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10220:	2b00      	cmp	r3, #0
   10222:	d100      	bne.n	10226 <_dtoa_r+0x6c2>
   10224:	e275      	b.n	10712 <_dtoa_r+0xbae>
   10226:	601d      	str	r5, [r3, #0]
   10228:	e273      	b.n	10712 <_dtoa_r+0xbae>
   1022a:	46c0      	nop			; (mov r8, r8)
   1022c:	00016808 	.word	0x00016808
   10230:	000167e0 	.word	0x000167e0
   10234:	3ff00000 	.word	0x3ff00000
   10238:	40240000 	.word	0x40240000
   1023c:	401c0000 	.word	0x401c0000
   10240:	fcc00000 	.word	0xfcc00000
   10244:	40140000 	.word	0x40140000
   10248:	7cc00000 	.word	0x7cc00000
   1024c:	3fe00000 	.word	0x3fe00000
   10250:	9e03      	ldr	r6, [sp, #12]
   10252:	1e6b      	subs	r3, r5, #1
   10254:	781a      	ldrb	r2, [r3, #0]
   10256:	2a39      	cmp	r2, #57	; 0x39
   10258:	d106      	bne.n	10268 <_dtoa_r+0x704>
   1025a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1025c:	429a      	cmp	r2, r3
   1025e:	d107      	bne.n	10270 <_dtoa_r+0x70c>
   10260:	2330      	movs	r3, #48	; 0x30
   10262:	7013      	strb	r3, [r2, #0]
   10264:	0013      	movs	r3, r2
   10266:	3601      	adds	r6, #1
   10268:	781a      	ldrb	r2, [r3, #0]
   1026a:	3201      	adds	r2, #1
   1026c:	701a      	strb	r2, [r3, #0]
   1026e:	e78a      	b.n	10186 <_dtoa_r+0x622>
   10270:	001d      	movs	r5, r3
   10272:	e7ee      	b.n	10252 <_dtoa_r+0x6ee>
   10274:	2200      	movs	r2, #0
   10276:	4bcf      	ldr	r3, [pc, #828]	; (105b4 <_dtoa_r+0xa50>)
   10278:	f002 ff10 	bl	1309c <__aeabi_dmul>
   1027c:	2200      	movs	r2, #0
   1027e:	2300      	movs	r3, #0
   10280:	9006      	str	r0, [sp, #24]
   10282:	9107      	str	r1, [sp, #28]
   10284:	002e      	movs	r6, r5
   10286:	f001 fcb5 	bl	11bf4 <__aeabi_dcmpeq>
   1028a:	2800      	cmp	r0, #0
   1028c:	d100      	bne.n	10290 <_dtoa_r+0x72c>
   1028e:	e787      	b.n	101a0 <_dtoa_r+0x63c>
   10290:	e7bb      	b.n	1020a <_dtoa_r+0x6a6>
   10292:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10294:	2a00      	cmp	r2, #0
   10296:	d100      	bne.n	1029a <_dtoa_r+0x736>
   10298:	e087      	b.n	103aa <_dtoa_r+0x846>
   1029a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1029c:	2a01      	cmp	r2, #1
   1029e:	dc6e      	bgt.n	1037e <_dtoa_r+0x81a>
   102a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   102a2:	2a00      	cmp	r2, #0
   102a4:	d067      	beq.n	10376 <_dtoa_r+0x812>
   102a6:	4ac4      	ldr	r2, [pc, #784]	; (105b8 <_dtoa_r+0xa54>)
   102a8:	189b      	adds	r3, r3, r2
   102aa:	9d08      	ldr	r5, [sp, #32]
   102ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   102ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   102b0:	2101      	movs	r1, #1
   102b2:	18d2      	adds	r2, r2, r3
   102b4:	920b      	str	r2, [sp, #44]	; 0x2c
   102b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   102b8:	9804      	ldr	r0, [sp, #16]
   102ba:	18d3      	adds	r3, r2, r3
   102bc:	930c      	str	r3, [sp, #48]	; 0x30
   102be:	f000 fd22 	bl	10d06 <__i2b>
   102c2:	0006      	movs	r6, r0
   102c4:	2c00      	cmp	r4, #0
   102c6:	dd0e      	ble.n	102e6 <_dtoa_r+0x782>
   102c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   102ca:	2b00      	cmp	r3, #0
   102cc:	dd0b      	ble.n	102e6 <_dtoa_r+0x782>
   102ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   102d0:	0023      	movs	r3, r4
   102d2:	4294      	cmp	r4, r2
   102d4:	dd00      	ble.n	102d8 <_dtoa_r+0x774>
   102d6:	0013      	movs	r3, r2
   102d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   102da:	1ae4      	subs	r4, r4, r3
   102dc:	1ad2      	subs	r2, r2, r3
   102de:	920b      	str	r2, [sp, #44]	; 0x2c
   102e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   102e2:	1ad3      	subs	r3, r2, r3
   102e4:	930c      	str	r3, [sp, #48]	; 0x30
   102e6:	9b08      	ldr	r3, [sp, #32]
   102e8:	2b00      	cmp	r3, #0
   102ea:	d01e      	beq.n	1032a <_dtoa_r+0x7c6>
   102ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   102ee:	2b00      	cmp	r3, #0
   102f0:	d05f      	beq.n	103b2 <_dtoa_r+0x84e>
   102f2:	2d00      	cmp	r5, #0
   102f4:	dd11      	ble.n	1031a <_dtoa_r+0x7b6>
   102f6:	0031      	movs	r1, r6
   102f8:	002a      	movs	r2, r5
   102fa:	9804      	ldr	r0, [sp, #16]
   102fc:	f000 fd9c 	bl	10e38 <__pow5mult>
   10300:	9a05      	ldr	r2, [sp, #20]
   10302:	0001      	movs	r1, r0
   10304:	0006      	movs	r6, r0
   10306:	9804      	ldr	r0, [sp, #16]
   10308:	f000 fd06 	bl	10d18 <__multiply>
   1030c:	9905      	ldr	r1, [sp, #20]
   1030e:	9010      	str	r0, [sp, #64]	; 0x40
   10310:	9804      	ldr	r0, [sp, #16]
   10312:	f000 fc5a 	bl	10bca <_Bfree>
   10316:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10318:	9305      	str	r3, [sp, #20]
   1031a:	9b08      	ldr	r3, [sp, #32]
   1031c:	1b5a      	subs	r2, r3, r5
   1031e:	d004      	beq.n	1032a <_dtoa_r+0x7c6>
   10320:	9905      	ldr	r1, [sp, #20]
   10322:	9804      	ldr	r0, [sp, #16]
   10324:	f000 fd88 	bl	10e38 <__pow5mult>
   10328:	9005      	str	r0, [sp, #20]
   1032a:	2101      	movs	r1, #1
   1032c:	9804      	ldr	r0, [sp, #16]
   1032e:	f000 fcea 	bl	10d06 <__i2b>
   10332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10334:	9008      	str	r0, [sp, #32]
   10336:	2b00      	cmp	r3, #0
   10338:	dd3d      	ble.n	103b6 <_dtoa_r+0x852>
   1033a:	001a      	movs	r2, r3
   1033c:	0001      	movs	r1, r0
   1033e:	9804      	ldr	r0, [sp, #16]
   10340:	f000 fd7a 	bl	10e38 <__pow5mult>
   10344:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10346:	9008      	str	r0, [sp, #32]
   10348:	2500      	movs	r5, #0
   1034a:	2b01      	cmp	r3, #1
   1034c:	dc3b      	bgt.n	103c6 <_dtoa_r+0x862>
   1034e:	2500      	movs	r5, #0
   10350:	9b06      	ldr	r3, [sp, #24]
   10352:	42ab      	cmp	r3, r5
   10354:	d133      	bne.n	103be <_dtoa_r+0x85a>
   10356:	9b07      	ldr	r3, [sp, #28]
   10358:	031b      	lsls	r3, r3, #12
   1035a:	42ab      	cmp	r3, r5
   1035c:	d12f      	bne.n	103be <_dtoa_r+0x85a>
   1035e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10360:	9a07      	ldr	r2, [sp, #28]
   10362:	4213      	tst	r3, r2
   10364:	d02b      	beq.n	103be <_dtoa_r+0x85a>
   10366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10368:	3501      	adds	r5, #1
   1036a:	3301      	adds	r3, #1
   1036c:	930b      	str	r3, [sp, #44]	; 0x2c
   1036e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10370:	3301      	adds	r3, #1
   10372:	930c      	str	r3, [sp, #48]	; 0x30
   10374:	e023      	b.n	103be <_dtoa_r+0x85a>
   10376:	2336      	movs	r3, #54	; 0x36
   10378:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1037a:	1a9b      	subs	r3, r3, r2
   1037c:	e795      	b.n	102aa <_dtoa_r+0x746>
   1037e:	9b08      	ldr	r3, [sp, #32]
   10380:	1e7d      	subs	r5, r7, #1
   10382:	42ab      	cmp	r3, r5
   10384:	db06      	blt.n	10394 <_dtoa_r+0x830>
   10386:	1b5d      	subs	r5, r3, r5
   10388:	2f00      	cmp	r7, #0
   1038a:	da0b      	bge.n	103a4 <_dtoa_r+0x840>
   1038c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1038e:	1bdc      	subs	r4, r3, r7
   10390:	2300      	movs	r3, #0
   10392:	e78c      	b.n	102ae <_dtoa_r+0x74a>
   10394:	9b08      	ldr	r3, [sp, #32]
   10396:	9508      	str	r5, [sp, #32]
   10398:	1aea      	subs	r2, r5, r3
   1039a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1039c:	2500      	movs	r5, #0
   1039e:	189b      	adds	r3, r3, r2
   103a0:	930f      	str	r3, [sp, #60]	; 0x3c
   103a2:	e7f1      	b.n	10388 <_dtoa_r+0x824>
   103a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   103a6:	003b      	movs	r3, r7
   103a8:	e781      	b.n	102ae <_dtoa_r+0x74a>
   103aa:	9d08      	ldr	r5, [sp, #32]
   103ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   103ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   103b0:	e788      	b.n	102c4 <_dtoa_r+0x760>
   103b2:	9a08      	ldr	r2, [sp, #32]
   103b4:	e7b4      	b.n	10320 <_dtoa_r+0x7bc>
   103b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   103b8:	2500      	movs	r5, #0
   103ba:	2b01      	cmp	r3, #1
   103bc:	ddc7      	ble.n	1034e <_dtoa_r+0x7ea>
   103be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   103c0:	2001      	movs	r0, #1
   103c2:	2b00      	cmp	r3, #0
   103c4:	d00b      	beq.n	103de <_dtoa_r+0x87a>
   103c6:	9b08      	ldr	r3, [sp, #32]
   103c8:	9a08      	ldr	r2, [sp, #32]
   103ca:	691b      	ldr	r3, [r3, #16]
   103cc:	930f      	str	r3, [sp, #60]	; 0x3c
   103ce:	3303      	adds	r3, #3
   103d0:	009b      	lsls	r3, r3, #2
   103d2:	18d3      	adds	r3, r2, r3
   103d4:	6858      	ldr	r0, [r3, #4]
   103d6:	f000 fc4d 	bl	10c74 <__hi0bits>
   103da:	2320      	movs	r3, #32
   103dc:	1a18      	subs	r0, r3, r0
   103de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   103e0:	18c0      	adds	r0, r0, r3
   103e2:	231f      	movs	r3, #31
   103e4:	4018      	ands	r0, r3
   103e6:	d100      	bne.n	103ea <_dtoa_r+0x886>
   103e8:	e0ab      	b.n	10542 <_dtoa_r+0x9de>
   103ea:	3301      	adds	r3, #1
   103ec:	1a1b      	subs	r3, r3, r0
   103ee:	2b04      	cmp	r3, #4
   103f0:	dc00      	bgt.n	103f4 <_dtoa_r+0x890>
   103f2:	e09b      	b.n	1052c <_dtoa_r+0x9c8>
   103f4:	231c      	movs	r3, #28
   103f6:	1a18      	subs	r0, r3, r0
   103f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   103fa:	1824      	adds	r4, r4, r0
   103fc:	181b      	adds	r3, r3, r0
   103fe:	930b      	str	r3, [sp, #44]	; 0x2c
   10400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10402:	181b      	adds	r3, r3, r0
   10404:	930c      	str	r3, [sp, #48]	; 0x30
   10406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10408:	2b00      	cmp	r3, #0
   1040a:	dd05      	ble.n	10418 <_dtoa_r+0x8b4>
   1040c:	001a      	movs	r2, r3
   1040e:	9905      	ldr	r1, [sp, #20]
   10410:	9804      	ldr	r0, [sp, #16]
   10412:	f000 fd63 	bl	10edc <__lshift>
   10416:	9005      	str	r0, [sp, #20]
   10418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1041a:	2b00      	cmp	r3, #0
   1041c:	dd05      	ble.n	1042a <_dtoa_r+0x8c6>
   1041e:	001a      	movs	r2, r3
   10420:	9908      	ldr	r1, [sp, #32]
   10422:	9804      	ldr	r0, [sp, #16]
   10424:	f000 fd5a 	bl	10edc <__lshift>
   10428:	9008      	str	r0, [sp, #32]
   1042a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1042c:	2b00      	cmp	r3, #0
   1042e:	d100      	bne.n	10432 <_dtoa_r+0x8ce>
   10430:	e089      	b.n	10546 <_dtoa_r+0x9e2>
   10432:	9908      	ldr	r1, [sp, #32]
   10434:	9805      	ldr	r0, [sp, #20]
   10436:	f000 fda2 	bl	10f7e <__mcmp>
   1043a:	2800      	cmp	r0, #0
   1043c:	db00      	blt.n	10440 <_dtoa_r+0x8dc>
   1043e:	e082      	b.n	10546 <_dtoa_r+0x9e2>
   10440:	9b03      	ldr	r3, [sp, #12]
   10442:	220a      	movs	r2, #10
   10444:	3b01      	subs	r3, #1
   10446:	9303      	str	r3, [sp, #12]
   10448:	9905      	ldr	r1, [sp, #20]
   1044a:	2300      	movs	r3, #0
   1044c:	9804      	ldr	r0, [sp, #16]
   1044e:	f000 fbd5 	bl	10bfc <__multadd>
   10452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10454:	9005      	str	r0, [sp, #20]
   10456:	2b00      	cmp	r3, #0
   10458:	d100      	bne.n	1045c <_dtoa_r+0x8f8>
   1045a:	e15d      	b.n	10718 <_dtoa_r+0xbb4>
   1045c:	2300      	movs	r3, #0
   1045e:	0031      	movs	r1, r6
   10460:	220a      	movs	r2, #10
   10462:	9804      	ldr	r0, [sp, #16]
   10464:	f000 fbca 	bl	10bfc <__multadd>
   10468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1046a:	0006      	movs	r6, r0
   1046c:	2b00      	cmp	r3, #0
   1046e:	dc02      	bgt.n	10476 <_dtoa_r+0x912>
   10470:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10472:	2b02      	cmp	r3, #2
   10474:	dc6d      	bgt.n	10552 <_dtoa_r+0x9ee>
   10476:	2c00      	cmp	r4, #0
   10478:	dd05      	ble.n	10486 <_dtoa_r+0x922>
   1047a:	0031      	movs	r1, r6
   1047c:	0022      	movs	r2, r4
   1047e:	9804      	ldr	r0, [sp, #16]
   10480:	f000 fd2c 	bl	10edc <__lshift>
   10484:	0006      	movs	r6, r0
   10486:	0030      	movs	r0, r6
   10488:	2d00      	cmp	r5, #0
   1048a:	d011      	beq.n	104b0 <_dtoa_r+0x94c>
   1048c:	6871      	ldr	r1, [r6, #4]
   1048e:	9804      	ldr	r0, [sp, #16]
   10490:	f000 fb63 	bl	10b5a <_Balloc>
   10494:	0031      	movs	r1, r6
   10496:	0004      	movs	r4, r0
   10498:	6933      	ldr	r3, [r6, #16]
   1049a:	310c      	adds	r1, #12
   1049c:	1c9a      	adds	r2, r3, #2
   1049e:	0092      	lsls	r2, r2, #2
   104a0:	300c      	adds	r0, #12
   104a2:	f7fe f9f5 	bl	e890 <memcpy>
   104a6:	2201      	movs	r2, #1
   104a8:	0021      	movs	r1, r4
   104aa:	9804      	ldr	r0, [sp, #16]
   104ac:	f000 fd16 	bl	10edc <__lshift>
   104b0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   104b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   104b4:	3f01      	subs	r7, #1
   104b6:	930b      	str	r3, [sp, #44]	; 0x2c
   104b8:	19db      	adds	r3, r3, r7
   104ba:	0037      	movs	r7, r6
   104bc:	0006      	movs	r6, r0
   104be:	930f      	str	r3, [sp, #60]	; 0x3c
   104c0:	9908      	ldr	r1, [sp, #32]
   104c2:	9805      	ldr	r0, [sp, #20]
   104c4:	f7ff faca 	bl	fa5c <quorem>
   104c8:	0039      	movs	r1, r7
   104ca:	900d      	str	r0, [sp, #52]	; 0x34
   104cc:	0004      	movs	r4, r0
   104ce:	9805      	ldr	r0, [sp, #20]
   104d0:	f000 fd55 	bl	10f7e <__mcmp>
   104d4:	0032      	movs	r2, r6
   104d6:	900e      	str	r0, [sp, #56]	; 0x38
   104d8:	9908      	ldr	r1, [sp, #32]
   104da:	9804      	ldr	r0, [sp, #16]
   104dc:	f000 fd68 	bl	10fb0 <__mdiff>
   104e0:	2301      	movs	r3, #1
   104e2:	930c      	str	r3, [sp, #48]	; 0x30
   104e4:	68c3      	ldr	r3, [r0, #12]
   104e6:	3430      	adds	r4, #48	; 0x30
   104e8:	0005      	movs	r5, r0
   104ea:	2b00      	cmp	r3, #0
   104ec:	d104      	bne.n	104f8 <_dtoa_r+0x994>
   104ee:	0001      	movs	r1, r0
   104f0:	9805      	ldr	r0, [sp, #20]
   104f2:	f000 fd44 	bl	10f7e <__mcmp>
   104f6:	900c      	str	r0, [sp, #48]	; 0x30
   104f8:	0029      	movs	r1, r5
   104fa:	9804      	ldr	r0, [sp, #16]
   104fc:	f000 fb65 	bl	10bca <_Bfree>
   10500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10502:	9a22      	ldr	r2, [sp, #136]	; 0x88
   10504:	4313      	orrs	r3, r2
   10506:	d000      	beq.n	1050a <_dtoa_r+0x9a6>
   10508:	e089      	b.n	1061e <_dtoa_r+0xaba>
   1050a:	9a06      	ldr	r2, [sp, #24]
   1050c:	3301      	adds	r3, #1
   1050e:	4213      	tst	r3, r2
   10510:	d000      	beq.n	10514 <_dtoa_r+0x9b0>
   10512:	e084      	b.n	1061e <_dtoa_r+0xaba>
   10514:	2c39      	cmp	r4, #57	; 0x39
   10516:	d100      	bne.n	1051a <_dtoa_r+0x9b6>
   10518:	e0a3      	b.n	10662 <_dtoa_r+0xafe>
   1051a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1051c:	2b00      	cmp	r3, #0
   1051e:	dd01      	ble.n	10524 <_dtoa_r+0x9c0>
   10520:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   10522:	3431      	adds	r4, #49	; 0x31
   10524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10526:	1c5d      	adds	r5, r3, #1
   10528:	701c      	strb	r4, [r3, #0]
   1052a:	e027      	b.n	1057c <_dtoa_r+0xa18>
   1052c:	2b04      	cmp	r3, #4
   1052e:	d100      	bne.n	10532 <_dtoa_r+0x9ce>
   10530:	e769      	b.n	10406 <_dtoa_r+0x8a2>
   10532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10534:	331c      	adds	r3, #28
   10536:	18d2      	adds	r2, r2, r3
   10538:	920b      	str	r2, [sp, #44]	; 0x2c
   1053a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1053c:	18e4      	adds	r4, r4, r3
   1053e:	18d3      	adds	r3, r2, r3
   10540:	e760      	b.n	10404 <_dtoa_r+0x8a0>
   10542:	0003      	movs	r3, r0
   10544:	e7f5      	b.n	10532 <_dtoa_r+0x9ce>
   10546:	2f00      	cmp	r7, #0
   10548:	dc3c      	bgt.n	105c4 <_dtoa_r+0xa60>
   1054a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1054c:	2b02      	cmp	r3, #2
   1054e:	dd39      	ble.n	105c4 <_dtoa_r+0xa60>
   10550:	970d      	str	r7, [sp, #52]	; 0x34
   10552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10554:	2b00      	cmp	r3, #0
   10556:	d10c      	bne.n	10572 <_dtoa_r+0xa0e>
   10558:	9908      	ldr	r1, [sp, #32]
   1055a:	2205      	movs	r2, #5
   1055c:	9804      	ldr	r0, [sp, #16]
   1055e:	f000 fb4d 	bl	10bfc <__multadd>
   10562:	9008      	str	r0, [sp, #32]
   10564:	0001      	movs	r1, r0
   10566:	9805      	ldr	r0, [sp, #20]
   10568:	f000 fd09 	bl	10f7e <__mcmp>
   1056c:	2800      	cmp	r0, #0
   1056e:	dd00      	ble.n	10572 <_dtoa_r+0xa0e>
   10570:	e55a      	b.n	10028 <_dtoa_r+0x4c4>
   10572:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10574:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10576:	43db      	mvns	r3, r3
   10578:	9303      	str	r3, [sp, #12]
   1057a:	2700      	movs	r7, #0
   1057c:	9908      	ldr	r1, [sp, #32]
   1057e:	9804      	ldr	r0, [sp, #16]
   10580:	f000 fb23 	bl	10bca <_Bfree>
   10584:	2e00      	cmp	r6, #0
   10586:	d100      	bne.n	1058a <_dtoa_r+0xa26>
   10588:	e63f      	b.n	1020a <_dtoa_r+0x6a6>
   1058a:	2f00      	cmp	r7, #0
   1058c:	d005      	beq.n	1059a <_dtoa_r+0xa36>
   1058e:	42b7      	cmp	r7, r6
   10590:	d003      	beq.n	1059a <_dtoa_r+0xa36>
   10592:	0039      	movs	r1, r7
   10594:	9804      	ldr	r0, [sp, #16]
   10596:	f000 fb18 	bl	10bca <_Bfree>
   1059a:	0031      	movs	r1, r6
   1059c:	9804      	ldr	r0, [sp, #16]
   1059e:	f000 fb14 	bl	10bca <_Bfree>
   105a2:	e632      	b.n	1020a <_dtoa_r+0x6a6>
   105a4:	9508      	str	r5, [sp, #32]
   105a6:	002e      	movs	r6, r5
   105a8:	e7e3      	b.n	10572 <_dtoa_r+0xa0e>
   105aa:	2300      	movs	r3, #0
   105ac:	9308      	str	r3, [sp, #32]
   105ae:	001e      	movs	r6, r3
   105b0:	e7df      	b.n	10572 <_dtoa_r+0xa0e>
   105b2:	46c0      	nop			; (mov r8, r8)
   105b4:	40240000 	.word	0x40240000
   105b8:	00000433 	.word	0x00000433
   105bc:	9603      	str	r6, [sp, #12]
   105be:	9508      	str	r5, [sp, #32]
   105c0:	002e      	movs	r6, r5
   105c2:	e531      	b.n	10028 <_dtoa_r+0x4c4>
   105c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   105c6:	970d      	str	r7, [sp, #52]	; 0x34
   105c8:	2b00      	cmp	r3, #0
   105ca:	d000      	beq.n	105ce <_dtoa_r+0xa6a>
   105cc:	e753      	b.n	10476 <_dtoa_r+0x912>
   105ce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   105d0:	9908      	ldr	r1, [sp, #32]
   105d2:	9805      	ldr	r0, [sp, #20]
   105d4:	f7ff fa42 	bl	fa5c <quorem>
   105d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   105da:	3030      	adds	r0, #48	; 0x30
   105dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   105de:	7028      	strb	r0, [r5, #0]
   105e0:	3501      	adds	r5, #1
   105e2:	0004      	movs	r4, r0
   105e4:	1aeb      	subs	r3, r5, r3
   105e6:	429a      	cmp	r2, r3
   105e8:	dc78      	bgt.n	106dc <_dtoa_r+0xb78>
   105ea:	1e15      	subs	r5, r2, #0
   105ec:	dc00      	bgt.n	105f0 <_dtoa_r+0xa8c>
   105ee:	2501      	movs	r5, #1
   105f0:	2700      	movs	r7, #0
   105f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   105f4:	195d      	adds	r5, r3, r5
   105f6:	9905      	ldr	r1, [sp, #20]
   105f8:	2201      	movs	r2, #1
   105fa:	9804      	ldr	r0, [sp, #16]
   105fc:	f000 fc6e 	bl	10edc <__lshift>
   10600:	9908      	ldr	r1, [sp, #32]
   10602:	9005      	str	r0, [sp, #20]
   10604:	f000 fcbb 	bl	10f7e <__mcmp>
   10608:	2800      	cmp	r0, #0
   1060a:	dc2f      	bgt.n	1066c <_dtoa_r+0xb08>
   1060c:	d101      	bne.n	10612 <_dtoa_r+0xaae>
   1060e:	07e3      	lsls	r3, r4, #31
   10610:	d42c      	bmi.n	1066c <_dtoa_r+0xb08>
   10612:	1e6b      	subs	r3, r5, #1
   10614:	781a      	ldrb	r2, [r3, #0]
   10616:	2a30      	cmp	r2, #48	; 0x30
   10618:	d1b0      	bne.n	1057c <_dtoa_r+0xa18>
   1061a:	001d      	movs	r5, r3
   1061c:	e7f9      	b.n	10612 <_dtoa_r+0xaae>
   1061e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10620:	2b00      	cmp	r3, #0
   10622:	db07      	blt.n	10634 <_dtoa_r+0xad0>
   10624:	001d      	movs	r5, r3
   10626:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10628:	431d      	orrs	r5, r3
   1062a:	d126      	bne.n	1067a <_dtoa_r+0xb16>
   1062c:	2301      	movs	r3, #1
   1062e:	9a06      	ldr	r2, [sp, #24]
   10630:	4213      	tst	r3, r2
   10632:	d122      	bne.n	1067a <_dtoa_r+0xb16>
   10634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10636:	2b00      	cmp	r3, #0
   10638:	dc00      	bgt.n	1063c <_dtoa_r+0xad8>
   1063a:	e773      	b.n	10524 <_dtoa_r+0x9c0>
   1063c:	9905      	ldr	r1, [sp, #20]
   1063e:	2201      	movs	r2, #1
   10640:	9804      	ldr	r0, [sp, #16]
   10642:	f000 fc4b 	bl	10edc <__lshift>
   10646:	9908      	ldr	r1, [sp, #32]
   10648:	9005      	str	r0, [sp, #20]
   1064a:	f000 fc98 	bl	10f7e <__mcmp>
   1064e:	2800      	cmp	r0, #0
   10650:	dc04      	bgt.n	1065c <_dtoa_r+0xaf8>
   10652:	d000      	beq.n	10656 <_dtoa_r+0xaf2>
   10654:	e766      	b.n	10524 <_dtoa_r+0x9c0>
   10656:	07e3      	lsls	r3, r4, #31
   10658:	d400      	bmi.n	1065c <_dtoa_r+0xaf8>
   1065a:	e763      	b.n	10524 <_dtoa_r+0x9c0>
   1065c:	2c39      	cmp	r4, #57	; 0x39
   1065e:	d000      	beq.n	10662 <_dtoa_r+0xafe>
   10660:	e75e      	b.n	10520 <_dtoa_r+0x9bc>
   10662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10664:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10666:	1c5d      	adds	r5, r3, #1
   10668:	2339      	movs	r3, #57	; 0x39
   1066a:	7013      	strb	r3, [r2, #0]
   1066c:	1e6b      	subs	r3, r5, #1
   1066e:	781a      	ldrb	r2, [r3, #0]
   10670:	2a39      	cmp	r2, #57	; 0x39
   10672:	d03b      	beq.n	106ec <_dtoa_r+0xb88>
   10674:	3201      	adds	r2, #1
   10676:	701a      	strb	r2, [r3, #0]
   10678:	e780      	b.n	1057c <_dtoa_r+0xa18>
   1067a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1067c:	3301      	adds	r3, #1
   1067e:	930d      	str	r3, [sp, #52]	; 0x34
   10680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10682:	2b00      	cmp	r3, #0
   10684:	dd05      	ble.n	10692 <_dtoa_r+0xb2e>
   10686:	2c39      	cmp	r4, #57	; 0x39
   10688:	d0eb      	beq.n	10662 <_dtoa_r+0xafe>
   1068a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1068c:	3401      	adds	r4, #1
   1068e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10690:	e74a      	b.n	10528 <_dtoa_r+0x9c4>
   10692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10694:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10696:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   10698:	701c      	strb	r4, [r3, #0]
   1069a:	4293      	cmp	r3, r2
   1069c:	d0ab      	beq.n	105f6 <_dtoa_r+0xa92>
   1069e:	2300      	movs	r3, #0
   106a0:	220a      	movs	r2, #10
   106a2:	9905      	ldr	r1, [sp, #20]
   106a4:	9804      	ldr	r0, [sp, #16]
   106a6:	f000 faa9 	bl	10bfc <__multadd>
   106aa:	2300      	movs	r3, #0
   106ac:	9005      	str	r0, [sp, #20]
   106ae:	220a      	movs	r2, #10
   106b0:	0039      	movs	r1, r7
   106b2:	9804      	ldr	r0, [sp, #16]
   106b4:	42b7      	cmp	r7, r6
   106b6:	d106      	bne.n	106c6 <_dtoa_r+0xb62>
   106b8:	f000 faa0 	bl	10bfc <__multadd>
   106bc:	0007      	movs	r7, r0
   106be:	0006      	movs	r6, r0
   106c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   106c2:	930b      	str	r3, [sp, #44]	; 0x2c
   106c4:	e6fc      	b.n	104c0 <_dtoa_r+0x95c>
   106c6:	f000 fa99 	bl	10bfc <__multadd>
   106ca:	0031      	movs	r1, r6
   106cc:	0007      	movs	r7, r0
   106ce:	2300      	movs	r3, #0
   106d0:	220a      	movs	r2, #10
   106d2:	9804      	ldr	r0, [sp, #16]
   106d4:	f000 fa92 	bl	10bfc <__multadd>
   106d8:	0006      	movs	r6, r0
   106da:	e7f1      	b.n	106c0 <_dtoa_r+0xb5c>
   106dc:	2300      	movs	r3, #0
   106de:	220a      	movs	r2, #10
   106e0:	9905      	ldr	r1, [sp, #20]
   106e2:	9804      	ldr	r0, [sp, #16]
   106e4:	f000 fa8a 	bl	10bfc <__multadd>
   106e8:	9005      	str	r0, [sp, #20]
   106ea:	e771      	b.n	105d0 <_dtoa_r+0xa6c>
   106ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   106ee:	429a      	cmp	r2, r3
   106f0:	d105      	bne.n	106fe <_dtoa_r+0xb9a>
   106f2:	9b03      	ldr	r3, [sp, #12]
   106f4:	3301      	adds	r3, #1
   106f6:	9303      	str	r3, [sp, #12]
   106f8:	2331      	movs	r3, #49	; 0x31
   106fa:	7013      	strb	r3, [r2, #0]
   106fc:	e73e      	b.n	1057c <_dtoa_r+0xa18>
   106fe:	001d      	movs	r5, r3
   10700:	e7b4      	b.n	1066c <_dtoa_r+0xb08>
   10702:	4b0a      	ldr	r3, [pc, #40]	; (1072c <_dtoa_r+0xbc8>)
   10704:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10706:	930a      	str	r3, [sp, #40]	; 0x28
   10708:	4b09      	ldr	r3, [pc, #36]	; (10730 <_dtoa_r+0xbcc>)
   1070a:	2a00      	cmp	r2, #0
   1070c:	d001      	beq.n	10712 <_dtoa_r+0xbae>
   1070e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10710:	6013      	str	r3, [r2, #0]
   10712:	980a      	ldr	r0, [sp, #40]	; 0x28
   10714:	b01d      	add	sp, #116	; 0x74
   10716:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10718:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1071a:	2b00      	cmp	r3, #0
   1071c:	dd00      	ble.n	10720 <_dtoa_r+0xbbc>
   1071e:	e756      	b.n	105ce <_dtoa_r+0xa6a>
   10720:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10722:	2b02      	cmp	r3, #2
   10724:	dc00      	bgt.n	10728 <_dtoa_r+0xbc4>
   10726:	e752      	b.n	105ce <_dtoa_r+0xa6a>
   10728:	e713      	b.n	10552 <_dtoa_r+0x9ee>
   1072a:	46c0      	nop			; (mov r8, r8)
   1072c:	00016773 	.word	0x00016773
   10730:	0001677b 	.word	0x0001677b

00010734 <__sflush_r>:
   10734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10736:	898a      	ldrh	r2, [r1, #12]
   10738:	0005      	movs	r5, r0
   1073a:	000c      	movs	r4, r1
   1073c:	0713      	lsls	r3, r2, #28
   1073e:	d460      	bmi.n	10802 <__sflush_r+0xce>
   10740:	684b      	ldr	r3, [r1, #4]
   10742:	2b00      	cmp	r3, #0
   10744:	dc04      	bgt.n	10750 <__sflush_r+0x1c>
   10746:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   10748:	2b00      	cmp	r3, #0
   1074a:	dc01      	bgt.n	10750 <__sflush_r+0x1c>
   1074c:	2000      	movs	r0, #0
   1074e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10750:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10752:	2f00      	cmp	r7, #0
   10754:	d0fa      	beq.n	1074c <__sflush_r+0x18>
   10756:	2300      	movs	r3, #0
   10758:	682e      	ldr	r6, [r5, #0]
   1075a:	602b      	str	r3, [r5, #0]
   1075c:	2380      	movs	r3, #128	; 0x80
   1075e:	015b      	lsls	r3, r3, #5
   10760:	401a      	ands	r2, r3
   10762:	d034      	beq.n	107ce <__sflush_r+0x9a>
   10764:	6d60      	ldr	r0, [r4, #84]	; 0x54
   10766:	89a3      	ldrh	r3, [r4, #12]
   10768:	075b      	lsls	r3, r3, #29
   1076a:	d506      	bpl.n	1077a <__sflush_r+0x46>
   1076c:	6863      	ldr	r3, [r4, #4]
   1076e:	1ac0      	subs	r0, r0, r3
   10770:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10772:	2b00      	cmp	r3, #0
   10774:	d001      	beq.n	1077a <__sflush_r+0x46>
   10776:	6c23      	ldr	r3, [r4, #64]	; 0x40
   10778:	1ac0      	subs	r0, r0, r3
   1077a:	0002      	movs	r2, r0
   1077c:	6a21      	ldr	r1, [r4, #32]
   1077e:	2300      	movs	r3, #0
   10780:	0028      	movs	r0, r5
   10782:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10784:	47b8      	blx	r7
   10786:	89a1      	ldrh	r1, [r4, #12]
   10788:	1c43      	adds	r3, r0, #1
   1078a:	d106      	bne.n	1079a <__sflush_r+0x66>
   1078c:	682b      	ldr	r3, [r5, #0]
   1078e:	2b1d      	cmp	r3, #29
   10790:	d831      	bhi.n	107f6 <__sflush_r+0xc2>
   10792:	4a2c      	ldr	r2, [pc, #176]	; (10844 <__sflush_r+0x110>)
   10794:	40da      	lsrs	r2, r3
   10796:	07d3      	lsls	r3, r2, #31
   10798:	d52d      	bpl.n	107f6 <__sflush_r+0xc2>
   1079a:	2300      	movs	r3, #0
   1079c:	6063      	str	r3, [r4, #4]
   1079e:	6923      	ldr	r3, [r4, #16]
   107a0:	6023      	str	r3, [r4, #0]
   107a2:	04cb      	lsls	r3, r1, #19
   107a4:	d505      	bpl.n	107b2 <__sflush_r+0x7e>
   107a6:	1c43      	adds	r3, r0, #1
   107a8:	d102      	bne.n	107b0 <__sflush_r+0x7c>
   107aa:	682b      	ldr	r3, [r5, #0]
   107ac:	2b00      	cmp	r3, #0
   107ae:	d100      	bne.n	107b2 <__sflush_r+0x7e>
   107b0:	6560      	str	r0, [r4, #84]	; 0x54
   107b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   107b4:	602e      	str	r6, [r5, #0]
   107b6:	2900      	cmp	r1, #0
   107b8:	d0c8      	beq.n	1074c <__sflush_r+0x18>
   107ba:	0023      	movs	r3, r4
   107bc:	3344      	adds	r3, #68	; 0x44
   107be:	4299      	cmp	r1, r3
   107c0:	d002      	beq.n	107c8 <__sflush_r+0x94>
   107c2:	0028      	movs	r0, r5
   107c4:	f7fe f888 	bl	e8d8 <_free_r>
   107c8:	2000      	movs	r0, #0
   107ca:	6360      	str	r0, [r4, #52]	; 0x34
   107cc:	e7bf      	b.n	1074e <__sflush_r+0x1a>
   107ce:	2301      	movs	r3, #1
   107d0:	6a21      	ldr	r1, [r4, #32]
   107d2:	0028      	movs	r0, r5
   107d4:	47b8      	blx	r7
   107d6:	1c43      	adds	r3, r0, #1
   107d8:	d1c5      	bne.n	10766 <__sflush_r+0x32>
   107da:	682b      	ldr	r3, [r5, #0]
   107dc:	2b00      	cmp	r3, #0
   107de:	d0c2      	beq.n	10766 <__sflush_r+0x32>
   107e0:	2b1d      	cmp	r3, #29
   107e2:	d001      	beq.n	107e8 <__sflush_r+0xb4>
   107e4:	2b16      	cmp	r3, #22
   107e6:	d101      	bne.n	107ec <__sflush_r+0xb8>
   107e8:	602e      	str	r6, [r5, #0]
   107ea:	e7af      	b.n	1074c <__sflush_r+0x18>
   107ec:	2340      	movs	r3, #64	; 0x40
   107ee:	89a2      	ldrh	r2, [r4, #12]
   107f0:	4313      	orrs	r3, r2
   107f2:	81a3      	strh	r3, [r4, #12]
   107f4:	e7ab      	b.n	1074e <__sflush_r+0x1a>
   107f6:	2340      	movs	r3, #64	; 0x40
   107f8:	430b      	orrs	r3, r1
   107fa:	2001      	movs	r0, #1
   107fc:	81a3      	strh	r3, [r4, #12]
   107fe:	4240      	negs	r0, r0
   10800:	e7a5      	b.n	1074e <__sflush_r+0x1a>
   10802:	690f      	ldr	r7, [r1, #16]
   10804:	2f00      	cmp	r7, #0
   10806:	d0a1      	beq.n	1074c <__sflush_r+0x18>
   10808:	680b      	ldr	r3, [r1, #0]
   1080a:	600f      	str	r7, [r1, #0]
   1080c:	1bdb      	subs	r3, r3, r7
   1080e:	9301      	str	r3, [sp, #4]
   10810:	2300      	movs	r3, #0
   10812:	0792      	lsls	r2, r2, #30
   10814:	d100      	bne.n	10818 <__sflush_r+0xe4>
   10816:	694b      	ldr	r3, [r1, #20]
   10818:	60a3      	str	r3, [r4, #8]
   1081a:	9b01      	ldr	r3, [sp, #4]
   1081c:	2b00      	cmp	r3, #0
   1081e:	dc00      	bgt.n	10822 <__sflush_r+0xee>
   10820:	e794      	b.n	1074c <__sflush_r+0x18>
   10822:	9b01      	ldr	r3, [sp, #4]
   10824:	003a      	movs	r2, r7
   10826:	6a21      	ldr	r1, [r4, #32]
   10828:	0028      	movs	r0, r5
   1082a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1082c:	47b0      	blx	r6
   1082e:	2800      	cmp	r0, #0
   10830:	dc03      	bgt.n	1083a <__sflush_r+0x106>
   10832:	2340      	movs	r3, #64	; 0x40
   10834:	89a2      	ldrh	r2, [r4, #12]
   10836:	4313      	orrs	r3, r2
   10838:	e7df      	b.n	107fa <__sflush_r+0xc6>
   1083a:	9b01      	ldr	r3, [sp, #4]
   1083c:	183f      	adds	r7, r7, r0
   1083e:	1a1b      	subs	r3, r3, r0
   10840:	9301      	str	r3, [sp, #4]
   10842:	e7ea      	b.n	1081a <__sflush_r+0xe6>
   10844:	20400001 	.word	0x20400001

00010848 <_fflush_r>:
   10848:	690b      	ldr	r3, [r1, #16]
   1084a:	b570      	push	{r4, r5, r6, lr}
   1084c:	0005      	movs	r5, r0
   1084e:	000c      	movs	r4, r1
   10850:	2b00      	cmp	r3, #0
   10852:	d101      	bne.n	10858 <_fflush_r+0x10>
   10854:	2000      	movs	r0, #0
   10856:	bd70      	pop	{r4, r5, r6, pc}
   10858:	2800      	cmp	r0, #0
   1085a:	d004      	beq.n	10866 <_fflush_r+0x1e>
   1085c:	6983      	ldr	r3, [r0, #24]
   1085e:	2b00      	cmp	r3, #0
   10860:	d101      	bne.n	10866 <_fflush_r+0x1e>
   10862:	f000 f85f 	bl	10924 <__sinit>
   10866:	4b0b      	ldr	r3, [pc, #44]	; (10894 <_fflush_r+0x4c>)
   10868:	429c      	cmp	r4, r3
   1086a:	d109      	bne.n	10880 <_fflush_r+0x38>
   1086c:	686c      	ldr	r4, [r5, #4]
   1086e:	220c      	movs	r2, #12
   10870:	5ea3      	ldrsh	r3, [r4, r2]
   10872:	2b00      	cmp	r3, #0
   10874:	d0ee      	beq.n	10854 <_fflush_r+0xc>
   10876:	0021      	movs	r1, r4
   10878:	0028      	movs	r0, r5
   1087a:	f7ff ff5b 	bl	10734 <__sflush_r>
   1087e:	e7ea      	b.n	10856 <_fflush_r+0xe>
   10880:	4b05      	ldr	r3, [pc, #20]	; (10898 <_fflush_r+0x50>)
   10882:	429c      	cmp	r4, r3
   10884:	d101      	bne.n	1088a <_fflush_r+0x42>
   10886:	68ac      	ldr	r4, [r5, #8]
   10888:	e7f1      	b.n	1086e <_fflush_r+0x26>
   1088a:	4b04      	ldr	r3, [pc, #16]	; (1089c <_fflush_r+0x54>)
   1088c:	429c      	cmp	r4, r3
   1088e:	d1ee      	bne.n	1086e <_fflush_r+0x26>
   10890:	68ec      	ldr	r4, [r5, #12]
   10892:	e7ec      	b.n	1086e <_fflush_r+0x26>
   10894:	000167a0 	.word	0x000167a0
   10898:	000167c0 	.word	0x000167c0
   1089c:	00016780 	.word	0x00016780

000108a0 <_cleanup_r>:
   108a0:	b510      	push	{r4, lr}
   108a2:	4902      	ldr	r1, [pc, #8]	; (108ac <_cleanup_r+0xc>)
   108a4:	f000 f8b2 	bl	10a0c <_fwalk_reent>
   108a8:	bd10      	pop	{r4, pc}
   108aa:	46c0      	nop			; (mov r8, r8)
   108ac:	00010849 	.word	0x00010849

000108b0 <std.isra.0>:
   108b0:	2300      	movs	r3, #0
   108b2:	b510      	push	{r4, lr}
   108b4:	0004      	movs	r4, r0
   108b6:	6003      	str	r3, [r0, #0]
   108b8:	6043      	str	r3, [r0, #4]
   108ba:	6083      	str	r3, [r0, #8]
   108bc:	8181      	strh	r1, [r0, #12]
   108be:	6643      	str	r3, [r0, #100]	; 0x64
   108c0:	81c2      	strh	r2, [r0, #14]
   108c2:	6103      	str	r3, [r0, #16]
   108c4:	6143      	str	r3, [r0, #20]
   108c6:	6183      	str	r3, [r0, #24]
   108c8:	0019      	movs	r1, r3
   108ca:	2208      	movs	r2, #8
   108cc:	305c      	adds	r0, #92	; 0x5c
   108ce:	f7fd fffa 	bl	e8c6 <memset>
   108d2:	4b05      	ldr	r3, [pc, #20]	; (108e8 <std.isra.0+0x38>)
   108d4:	6224      	str	r4, [r4, #32]
   108d6:	6263      	str	r3, [r4, #36]	; 0x24
   108d8:	4b04      	ldr	r3, [pc, #16]	; (108ec <std.isra.0+0x3c>)
   108da:	62a3      	str	r3, [r4, #40]	; 0x28
   108dc:	4b04      	ldr	r3, [pc, #16]	; (108f0 <std.isra.0+0x40>)
   108de:	62e3      	str	r3, [r4, #44]	; 0x2c
   108e0:	4b04      	ldr	r3, [pc, #16]	; (108f4 <std.isra.0+0x44>)
   108e2:	6323      	str	r3, [r4, #48]	; 0x30
   108e4:	bd10      	pop	{r4, pc}
   108e6:	46c0      	nop			; (mov r8, r8)
   108e8:	000116fd 	.word	0x000116fd
   108ec:	00011725 	.word	0x00011725
   108f0:	0001175d 	.word	0x0001175d
   108f4:	00011789 	.word	0x00011789

000108f8 <__sfmoreglue>:
   108f8:	b570      	push	{r4, r5, r6, lr}
   108fa:	2568      	movs	r5, #104	; 0x68
   108fc:	1e4a      	subs	r2, r1, #1
   108fe:	4355      	muls	r5, r2
   10900:	000e      	movs	r6, r1
   10902:	0029      	movs	r1, r5
   10904:	3174      	adds	r1, #116	; 0x74
   10906:	f7fe f831 	bl	e96c <_malloc_r>
   1090a:	1e04      	subs	r4, r0, #0
   1090c:	d008      	beq.n	10920 <__sfmoreglue+0x28>
   1090e:	2100      	movs	r1, #0
   10910:	002a      	movs	r2, r5
   10912:	6001      	str	r1, [r0, #0]
   10914:	6046      	str	r6, [r0, #4]
   10916:	300c      	adds	r0, #12
   10918:	60a0      	str	r0, [r4, #8]
   1091a:	3268      	adds	r2, #104	; 0x68
   1091c:	f7fd ffd3 	bl	e8c6 <memset>
   10920:	0020      	movs	r0, r4
   10922:	bd70      	pop	{r4, r5, r6, pc}

00010924 <__sinit>:
   10924:	6983      	ldr	r3, [r0, #24]
   10926:	b513      	push	{r0, r1, r4, lr}
   10928:	0004      	movs	r4, r0
   1092a:	2b00      	cmp	r3, #0
   1092c:	d128      	bne.n	10980 <__sinit+0x5c>
   1092e:	6483      	str	r3, [r0, #72]	; 0x48
   10930:	64c3      	str	r3, [r0, #76]	; 0x4c
   10932:	6503      	str	r3, [r0, #80]	; 0x50
   10934:	4b13      	ldr	r3, [pc, #76]	; (10984 <__sinit+0x60>)
   10936:	4a14      	ldr	r2, [pc, #80]	; (10988 <__sinit+0x64>)
   10938:	681b      	ldr	r3, [r3, #0]
   1093a:	6282      	str	r2, [r0, #40]	; 0x28
   1093c:	9301      	str	r3, [sp, #4]
   1093e:	4298      	cmp	r0, r3
   10940:	d101      	bne.n	10946 <__sinit+0x22>
   10942:	2301      	movs	r3, #1
   10944:	6183      	str	r3, [r0, #24]
   10946:	0020      	movs	r0, r4
   10948:	f000 f820 	bl	1098c <__sfp>
   1094c:	6060      	str	r0, [r4, #4]
   1094e:	0020      	movs	r0, r4
   10950:	f000 f81c 	bl	1098c <__sfp>
   10954:	60a0      	str	r0, [r4, #8]
   10956:	0020      	movs	r0, r4
   10958:	f000 f818 	bl	1098c <__sfp>
   1095c:	2200      	movs	r2, #0
   1095e:	60e0      	str	r0, [r4, #12]
   10960:	2104      	movs	r1, #4
   10962:	6860      	ldr	r0, [r4, #4]
   10964:	f7ff ffa4 	bl	108b0 <std.isra.0>
   10968:	2201      	movs	r2, #1
   1096a:	2109      	movs	r1, #9
   1096c:	68a0      	ldr	r0, [r4, #8]
   1096e:	f7ff ff9f 	bl	108b0 <std.isra.0>
   10972:	2202      	movs	r2, #2
   10974:	2112      	movs	r1, #18
   10976:	68e0      	ldr	r0, [r4, #12]
   10978:	f7ff ff9a 	bl	108b0 <std.isra.0>
   1097c:	2301      	movs	r3, #1
   1097e:	61a3      	str	r3, [r4, #24]
   10980:	bd13      	pop	{r0, r1, r4, pc}
   10982:	46c0      	nop			; (mov r8, r8)
   10984:	00016630 	.word	0x00016630
   10988:	000108a1 	.word	0x000108a1

0001098c <__sfp>:
   1098c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1098e:	4b1e      	ldr	r3, [pc, #120]	; (10a08 <__sfp+0x7c>)
   10990:	0007      	movs	r7, r0
   10992:	681e      	ldr	r6, [r3, #0]
   10994:	69b3      	ldr	r3, [r6, #24]
   10996:	2b00      	cmp	r3, #0
   10998:	d102      	bne.n	109a0 <__sfp+0x14>
   1099a:	0030      	movs	r0, r6
   1099c:	f7ff ffc2 	bl	10924 <__sinit>
   109a0:	3648      	adds	r6, #72	; 0x48
   109a2:	68b4      	ldr	r4, [r6, #8]
   109a4:	6873      	ldr	r3, [r6, #4]
   109a6:	3b01      	subs	r3, #1
   109a8:	d504      	bpl.n	109b4 <__sfp+0x28>
   109aa:	6833      	ldr	r3, [r6, #0]
   109ac:	2b00      	cmp	r3, #0
   109ae:	d007      	beq.n	109c0 <__sfp+0x34>
   109b0:	6836      	ldr	r6, [r6, #0]
   109b2:	e7f6      	b.n	109a2 <__sfp+0x16>
   109b4:	220c      	movs	r2, #12
   109b6:	5ea5      	ldrsh	r5, [r4, r2]
   109b8:	2d00      	cmp	r5, #0
   109ba:	d00d      	beq.n	109d8 <__sfp+0x4c>
   109bc:	3468      	adds	r4, #104	; 0x68
   109be:	e7f2      	b.n	109a6 <__sfp+0x1a>
   109c0:	2104      	movs	r1, #4
   109c2:	0038      	movs	r0, r7
   109c4:	f7ff ff98 	bl	108f8 <__sfmoreglue>
   109c8:	6030      	str	r0, [r6, #0]
   109ca:	2800      	cmp	r0, #0
   109cc:	d1f0      	bne.n	109b0 <__sfp+0x24>
   109ce:	230c      	movs	r3, #12
   109d0:	0004      	movs	r4, r0
   109d2:	603b      	str	r3, [r7, #0]
   109d4:	0020      	movs	r0, r4
   109d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   109d8:	2301      	movs	r3, #1
   109da:	0020      	movs	r0, r4
   109dc:	425b      	negs	r3, r3
   109de:	81e3      	strh	r3, [r4, #14]
   109e0:	3302      	adds	r3, #2
   109e2:	81a3      	strh	r3, [r4, #12]
   109e4:	6665      	str	r5, [r4, #100]	; 0x64
   109e6:	6025      	str	r5, [r4, #0]
   109e8:	60a5      	str	r5, [r4, #8]
   109ea:	6065      	str	r5, [r4, #4]
   109ec:	6125      	str	r5, [r4, #16]
   109ee:	6165      	str	r5, [r4, #20]
   109f0:	61a5      	str	r5, [r4, #24]
   109f2:	2208      	movs	r2, #8
   109f4:	0029      	movs	r1, r5
   109f6:	305c      	adds	r0, #92	; 0x5c
   109f8:	f7fd ff65 	bl	e8c6 <memset>
   109fc:	6365      	str	r5, [r4, #52]	; 0x34
   109fe:	63a5      	str	r5, [r4, #56]	; 0x38
   10a00:	64a5      	str	r5, [r4, #72]	; 0x48
   10a02:	64e5      	str	r5, [r4, #76]	; 0x4c
   10a04:	e7e6      	b.n	109d4 <__sfp+0x48>
   10a06:	46c0      	nop			; (mov r8, r8)
   10a08:	00016630 	.word	0x00016630

00010a0c <_fwalk_reent>:
   10a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10a0e:	0004      	movs	r4, r0
   10a10:	0007      	movs	r7, r0
   10a12:	2600      	movs	r6, #0
   10a14:	9101      	str	r1, [sp, #4]
   10a16:	3448      	adds	r4, #72	; 0x48
   10a18:	2c00      	cmp	r4, #0
   10a1a:	d101      	bne.n	10a20 <_fwalk_reent+0x14>
   10a1c:	0030      	movs	r0, r6
   10a1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10a20:	6863      	ldr	r3, [r4, #4]
   10a22:	68a5      	ldr	r5, [r4, #8]
   10a24:	9300      	str	r3, [sp, #0]
   10a26:	9b00      	ldr	r3, [sp, #0]
   10a28:	3b01      	subs	r3, #1
   10a2a:	9300      	str	r3, [sp, #0]
   10a2c:	d501      	bpl.n	10a32 <_fwalk_reent+0x26>
   10a2e:	6824      	ldr	r4, [r4, #0]
   10a30:	e7f2      	b.n	10a18 <_fwalk_reent+0xc>
   10a32:	89ab      	ldrh	r3, [r5, #12]
   10a34:	2b01      	cmp	r3, #1
   10a36:	d908      	bls.n	10a4a <_fwalk_reent+0x3e>
   10a38:	220e      	movs	r2, #14
   10a3a:	5eab      	ldrsh	r3, [r5, r2]
   10a3c:	3301      	adds	r3, #1
   10a3e:	d004      	beq.n	10a4a <_fwalk_reent+0x3e>
   10a40:	0029      	movs	r1, r5
   10a42:	0038      	movs	r0, r7
   10a44:	9b01      	ldr	r3, [sp, #4]
   10a46:	4798      	blx	r3
   10a48:	4306      	orrs	r6, r0
   10a4a:	3568      	adds	r5, #104	; 0x68
   10a4c:	e7eb      	b.n	10a26 <_fwalk_reent+0x1a>
	...

00010a50 <_localeconv_r>:
   10a50:	4b03      	ldr	r3, [pc, #12]	; (10a60 <_localeconv_r+0x10>)
   10a52:	681b      	ldr	r3, [r3, #0]
   10a54:	6a18      	ldr	r0, [r3, #32]
   10a56:	2800      	cmp	r0, #0
   10a58:	d100      	bne.n	10a5c <_localeconv_r+0xc>
   10a5a:	4802      	ldr	r0, [pc, #8]	; (10a64 <_localeconv_r+0x14>)
   10a5c:	30f0      	adds	r0, #240	; 0xf0
   10a5e:	4770      	bx	lr
   10a60:	20000010 	.word	0x20000010
   10a64:	20000074 	.word	0x20000074

00010a68 <__swhatbuf_r>:
   10a68:	b570      	push	{r4, r5, r6, lr}
   10a6a:	000e      	movs	r6, r1
   10a6c:	001d      	movs	r5, r3
   10a6e:	230e      	movs	r3, #14
   10a70:	5ec9      	ldrsh	r1, [r1, r3]
   10a72:	b090      	sub	sp, #64	; 0x40
   10a74:	0014      	movs	r4, r2
   10a76:	2900      	cmp	r1, #0
   10a78:	da07      	bge.n	10a8a <__swhatbuf_r+0x22>
   10a7a:	2300      	movs	r3, #0
   10a7c:	602b      	str	r3, [r5, #0]
   10a7e:	89b3      	ldrh	r3, [r6, #12]
   10a80:	061b      	lsls	r3, r3, #24
   10a82:	d411      	bmi.n	10aa8 <__swhatbuf_r+0x40>
   10a84:	2380      	movs	r3, #128	; 0x80
   10a86:	00db      	lsls	r3, r3, #3
   10a88:	e00f      	b.n	10aaa <__swhatbuf_r+0x42>
   10a8a:	aa01      	add	r2, sp, #4
   10a8c:	f000 fea8 	bl	117e0 <_fstat_r>
   10a90:	2800      	cmp	r0, #0
   10a92:	dbf2      	blt.n	10a7a <__swhatbuf_r+0x12>
   10a94:	22f0      	movs	r2, #240	; 0xf0
   10a96:	9b02      	ldr	r3, [sp, #8]
   10a98:	0212      	lsls	r2, r2, #8
   10a9a:	4013      	ands	r3, r2
   10a9c:	4a05      	ldr	r2, [pc, #20]	; (10ab4 <__swhatbuf_r+0x4c>)
   10a9e:	189b      	adds	r3, r3, r2
   10aa0:	425a      	negs	r2, r3
   10aa2:	4153      	adcs	r3, r2
   10aa4:	602b      	str	r3, [r5, #0]
   10aa6:	e7ed      	b.n	10a84 <__swhatbuf_r+0x1c>
   10aa8:	2340      	movs	r3, #64	; 0x40
   10aaa:	2000      	movs	r0, #0
   10aac:	6023      	str	r3, [r4, #0]
   10aae:	b010      	add	sp, #64	; 0x40
   10ab0:	bd70      	pop	{r4, r5, r6, pc}
   10ab2:	46c0      	nop			; (mov r8, r8)
   10ab4:	ffffe000 	.word	0xffffe000

00010ab8 <__smakebuf_r>:
   10ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10aba:	2602      	movs	r6, #2
   10abc:	898b      	ldrh	r3, [r1, #12]
   10abe:	0005      	movs	r5, r0
   10ac0:	000c      	movs	r4, r1
   10ac2:	4233      	tst	r3, r6
   10ac4:	d006      	beq.n	10ad4 <__smakebuf_r+0x1c>
   10ac6:	0023      	movs	r3, r4
   10ac8:	3347      	adds	r3, #71	; 0x47
   10aca:	6023      	str	r3, [r4, #0]
   10acc:	6123      	str	r3, [r4, #16]
   10ace:	2301      	movs	r3, #1
   10ad0:	6163      	str	r3, [r4, #20]
   10ad2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10ad4:	ab01      	add	r3, sp, #4
   10ad6:	466a      	mov	r2, sp
   10ad8:	f7ff ffc6 	bl	10a68 <__swhatbuf_r>
   10adc:	9900      	ldr	r1, [sp, #0]
   10ade:	0007      	movs	r7, r0
   10ae0:	0028      	movs	r0, r5
   10ae2:	f7fd ff43 	bl	e96c <_malloc_r>
   10ae6:	2800      	cmp	r0, #0
   10ae8:	d108      	bne.n	10afc <__smakebuf_r+0x44>
   10aea:	220c      	movs	r2, #12
   10aec:	5ea3      	ldrsh	r3, [r4, r2]
   10aee:	059a      	lsls	r2, r3, #22
   10af0:	d4ef      	bmi.n	10ad2 <__smakebuf_r+0x1a>
   10af2:	2203      	movs	r2, #3
   10af4:	4393      	bics	r3, r2
   10af6:	431e      	orrs	r6, r3
   10af8:	81a6      	strh	r6, [r4, #12]
   10afa:	e7e4      	b.n	10ac6 <__smakebuf_r+0xe>
   10afc:	4b0f      	ldr	r3, [pc, #60]	; (10b3c <__smakebuf_r+0x84>)
   10afe:	62ab      	str	r3, [r5, #40]	; 0x28
   10b00:	2380      	movs	r3, #128	; 0x80
   10b02:	89a2      	ldrh	r2, [r4, #12]
   10b04:	6020      	str	r0, [r4, #0]
   10b06:	4313      	orrs	r3, r2
   10b08:	81a3      	strh	r3, [r4, #12]
   10b0a:	9b00      	ldr	r3, [sp, #0]
   10b0c:	6120      	str	r0, [r4, #16]
   10b0e:	6163      	str	r3, [r4, #20]
   10b10:	9b01      	ldr	r3, [sp, #4]
   10b12:	2b00      	cmp	r3, #0
   10b14:	d00d      	beq.n	10b32 <__smakebuf_r+0x7a>
   10b16:	230e      	movs	r3, #14
   10b18:	5ee1      	ldrsh	r1, [r4, r3]
   10b1a:	0028      	movs	r0, r5
   10b1c:	f000 fe72 	bl	11804 <_isatty_r>
   10b20:	2800      	cmp	r0, #0
   10b22:	d006      	beq.n	10b32 <__smakebuf_r+0x7a>
   10b24:	2203      	movs	r2, #3
   10b26:	89a3      	ldrh	r3, [r4, #12]
   10b28:	4393      	bics	r3, r2
   10b2a:	001a      	movs	r2, r3
   10b2c:	2301      	movs	r3, #1
   10b2e:	4313      	orrs	r3, r2
   10b30:	81a3      	strh	r3, [r4, #12]
   10b32:	89a0      	ldrh	r0, [r4, #12]
   10b34:	4338      	orrs	r0, r7
   10b36:	81a0      	strh	r0, [r4, #12]
   10b38:	e7cb      	b.n	10ad2 <__smakebuf_r+0x1a>
   10b3a:	46c0      	nop			; (mov r8, r8)
   10b3c:	000108a1 	.word	0x000108a1

00010b40 <memchr>:
   10b40:	b2c9      	uxtb	r1, r1
   10b42:	1882      	adds	r2, r0, r2
   10b44:	4290      	cmp	r0, r2
   10b46:	d101      	bne.n	10b4c <memchr+0xc>
   10b48:	2000      	movs	r0, #0
   10b4a:	4770      	bx	lr
   10b4c:	7803      	ldrb	r3, [r0, #0]
   10b4e:	428b      	cmp	r3, r1
   10b50:	d0fb      	beq.n	10b4a <memchr+0xa>
   10b52:	3001      	adds	r0, #1
   10b54:	e7f6      	b.n	10b44 <memchr+0x4>

00010b56 <__malloc_lock>:
   10b56:	4770      	bx	lr

00010b58 <__malloc_unlock>:
   10b58:	4770      	bx	lr

00010b5a <_Balloc>:
   10b5a:	b570      	push	{r4, r5, r6, lr}
   10b5c:	6a46      	ldr	r6, [r0, #36]	; 0x24
   10b5e:	0004      	movs	r4, r0
   10b60:	000d      	movs	r5, r1
   10b62:	2e00      	cmp	r6, #0
   10b64:	d107      	bne.n	10b76 <_Balloc+0x1c>
   10b66:	2010      	movs	r0, #16
   10b68:	f7fd fe6c 	bl	e844 <malloc>
   10b6c:	6260      	str	r0, [r4, #36]	; 0x24
   10b6e:	6046      	str	r6, [r0, #4]
   10b70:	6086      	str	r6, [r0, #8]
   10b72:	6006      	str	r6, [r0, #0]
   10b74:	60c6      	str	r6, [r0, #12]
   10b76:	6a66      	ldr	r6, [r4, #36]	; 0x24
   10b78:	68f3      	ldr	r3, [r6, #12]
   10b7a:	2b00      	cmp	r3, #0
   10b7c:	d013      	beq.n	10ba6 <_Balloc+0x4c>
   10b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10b80:	00aa      	lsls	r2, r5, #2
   10b82:	68db      	ldr	r3, [r3, #12]
   10b84:	189b      	adds	r3, r3, r2
   10b86:	6818      	ldr	r0, [r3, #0]
   10b88:	2800      	cmp	r0, #0
   10b8a:	d118      	bne.n	10bbe <_Balloc+0x64>
   10b8c:	2101      	movs	r1, #1
   10b8e:	000e      	movs	r6, r1
   10b90:	40ae      	lsls	r6, r5
   10b92:	1d72      	adds	r2, r6, #5
   10b94:	0092      	lsls	r2, r2, #2
   10b96:	0020      	movs	r0, r4
   10b98:	f000 fac2 	bl	11120 <_calloc_r>
   10b9c:	2800      	cmp	r0, #0
   10b9e:	d00c      	beq.n	10bba <_Balloc+0x60>
   10ba0:	6045      	str	r5, [r0, #4]
   10ba2:	6086      	str	r6, [r0, #8]
   10ba4:	e00d      	b.n	10bc2 <_Balloc+0x68>
   10ba6:	2221      	movs	r2, #33	; 0x21
   10ba8:	2104      	movs	r1, #4
   10baa:	0020      	movs	r0, r4
   10bac:	f000 fab8 	bl	11120 <_calloc_r>
   10bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10bb2:	60f0      	str	r0, [r6, #12]
   10bb4:	68db      	ldr	r3, [r3, #12]
   10bb6:	2b00      	cmp	r3, #0
   10bb8:	d1e1      	bne.n	10b7e <_Balloc+0x24>
   10bba:	2000      	movs	r0, #0
   10bbc:	bd70      	pop	{r4, r5, r6, pc}
   10bbe:	6802      	ldr	r2, [r0, #0]
   10bc0:	601a      	str	r2, [r3, #0]
   10bc2:	2300      	movs	r3, #0
   10bc4:	6103      	str	r3, [r0, #16]
   10bc6:	60c3      	str	r3, [r0, #12]
   10bc8:	e7f8      	b.n	10bbc <_Balloc+0x62>

00010bca <_Bfree>:
   10bca:	b570      	push	{r4, r5, r6, lr}
   10bcc:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10bce:	0006      	movs	r6, r0
   10bd0:	000d      	movs	r5, r1
   10bd2:	2c00      	cmp	r4, #0
   10bd4:	d107      	bne.n	10be6 <_Bfree+0x1c>
   10bd6:	2010      	movs	r0, #16
   10bd8:	f7fd fe34 	bl	e844 <malloc>
   10bdc:	6270      	str	r0, [r6, #36]	; 0x24
   10bde:	6044      	str	r4, [r0, #4]
   10be0:	6084      	str	r4, [r0, #8]
   10be2:	6004      	str	r4, [r0, #0]
   10be4:	60c4      	str	r4, [r0, #12]
   10be6:	2d00      	cmp	r5, #0
   10be8:	d007      	beq.n	10bfa <_Bfree+0x30>
   10bea:	6a73      	ldr	r3, [r6, #36]	; 0x24
   10bec:	686a      	ldr	r2, [r5, #4]
   10bee:	68db      	ldr	r3, [r3, #12]
   10bf0:	0092      	lsls	r2, r2, #2
   10bf2:	189b      	adds	r3, r3, r2
   10bf4:	681a      	ldr	r2, [r3, #0]
   10bf6:	602a      	str	r2, [r5, #0]
   10bf8:	601d      	str	r5, [r3, #0]
   10bfa:	bd70      	pop	{r4, r5, r6, pc}

00010bfc <__multadd>:
   10bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10bfe:	001e      	movs	r6, r3
   10c00:	2314      	movs	r3, #20
   10c02:	469c      	mov	ip, r3
   10c04:	0007      	movs	r7, r0
   10c06:	000c      	movs	r4, r1
   10c08:	2000      	movs	r0, #0
   10c0a:	690d      	ldr	r5, [r1, #16]
   10c0c:	448c      	add	ip, r1
   10c0e:	4663      	mov	r3, ip
   10c10:	8819      	ldrh	r1, [r3, #0]
   10c12:	681b      	ldr	r3, [r3, #0]
   10c14:	4351      	muls	r1, r2
   10c16:	0c1b      	lsrs	r3, r3, #16
   10c18:	4353      	muls	r3, r2
   10c1a:	1989      	adds	r1, r1, r6
   10c1c:	0c0e      	lsrs	r6, r1, #16
   10c1e:	199b      	adds	r3, r3, r6
   10c20:	b289      	uxth	r1, r1
   10c22:	0c1e      	lsrs	r6, r3, #16
   10c24:	041b      	lsls	r3, r3, #16
   10c26:	185b      	adds	r3, r3, r1
   10c28:	4661      	mov	r1, ip
   10c2a:	3001      	adds	r0, #1
   10c2c:	c108      	stmia	r1!, {r3}
   10c2e:	468c      	mov	ip, r1
   10c30:	4285      	cmp	r5, r0
   10c32:	dcec      	bgt.n	10c0e <__multadd+0x12>
   10c34:	2e00      	cmp	r6, #0
   10c36:	d01b      	beq.n	10c70 <__multadd+0x74>
   10c38:	68a3      	ldr	r3, [r4, #8]
   10c3a:	429d      	cmp	r5, r3
   10c3c:	db12      	blt.n	10c64 <__multadd+0x68>
   10c3e:	6863      	ldr	r3, [r4, #4]
   10c40:	0038      	movs	r0, r7
   10c42:	1c59      	adds	r1, r3, #1
   10c44:	f7ff ff89 	bl	10b5a <_Balloc>
   10c48:	0021      	movs	r1, r4
   10c4a:	6923      	ldr	r3, [r4, #16]
   10c4c:	9001      	str	r0, [sp, #4]
   10c4e:	1c9a      	adds	r2, r3, #2
   10c50:	0092      	lsls	r2, r2, #2
   10c52:	310c      	adds	r1, #12
   10c54:	300c      	adds	r0, #12
   10c56:	f7fd fe1b 	bl	e890 <memcpy>
   10c5a:	0021      	movs	r1, r4
   10c5c:	0038      	movs	r0, r7
   10c5e:	f7ff ffb4 	bl	10bca <_Bfree>
   10c62:	9c01      	ldr	r4, [sp, #4]
   10c64:	1d2b      	adds	r3, r5, #4
   10c66:	009b      	lsls	r3, r3, #2
   10c68:	18e3      	adds	r3, r4, r3
   10c6a:	3501      	adds	r5, #1
   10c6c:	605e      	str	r6, [r3, #4]
   10c6e:	6125      	str	r5, [r4, #16]
   10c70:	0020      	movs	r0, r4
   10c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00010c74 <__hi0bits>:
   10c74:	0003      	movs	r3, r0
   10c76:	0c02      	lsrs	r2, r0, #16
   10c78:	2000      	movs	r0, #0
   10c7a:	4282      	cmp	r2, r0
   10c7c:	d101      	bne.n	10c82 <__hi0bits+0xe>
   10c7e:	041b      	lsls	r3, r3, #16
   10c80:	3010      	adds	r0, #16
   10c82:	0e1a      	lsrs	r2, r3, #24
   10c84:	d101      	bne.n	10c8a <__hi0bits+0x16>
   10c86:	3008      	adds	r0, #8
   10c88:	021b      	lsls	r3, r3, #8
   10c8a:	0f1a      	lsrs	r2, r3, #28
   10c8c:	d101      	bne.n	10c92 <__hi0bits+0x1e>
   10c8e:	3004      	adds	r0, #4
   10c90:	011b      	lsls	r3, r3, #4
   10c92:	0f9a      	lsrs	r2, r3, #30
   10c94:	d101      	bne.n	10c9a <__hi0bits+0x26>
   10c96:	3002      	adds	r0, #2
   10c98:	009b      	lsls	r3, r3, #2
   10c9a:	2b00      	cmp	r3, #0
   10c9c:	db03      	blt.n	10ca6 <__hi0bits+0x32>
   10c9e:	3001      	adds	r0, #1
   10ca0:	005b      	lsls	r3, r3, #1
   10ca2:	d400      	bmi.n	10ca6 <__hi0bits+0x32>
   10ca4:	2020      	movs	r0, #32
   10ca6:	4770      	bx	lr

00010ca8 <__lo0bits>:
   10ca8:	2207      	movs	r2, #7
   10caa:	6803      	ldr	r3, [r0, #0]
   10cac:	b510      	push	{r4, lr}
   10cae:	0001      	movs	r1, r0
   10cb0:	401a      	ands	r2, r3
   10cb2:	d00d      	beq.n	10cd0 <__lo0bits+0x28>
   10cb4:	2401      	movs	r4, #1
   10cb6:	2000      	movs	r0, #0
   10cb8:	4223      	tst	r3, r4
   10cba:	d105      	bne.n	10cc8 <__lo0bits+0x20>
   10cbc:	3002      	adds	r0, #2
   10cbe:	4203      	tst	r3, r0
   10cc0:	d003      	beq.n	10cca <__lo0bits+0x22>
   10cc2:	40e3      	lsrs	r3, r4
   10cc4:	0020      	movs	r0, r4
   10cc6:	600b      	str	r3, [r1, #0]
   10cc8:	bd10      	pop	{r4, pc}
   10cca:	089b      	lsrs	r3, r3, #2
   10ccc:	600b      	str	r3, [r1, #0]
   10cce:	e7fb      	b.n	10cc8 <__lo0bits+0x20>
   10cd0:	b29c      	uxth	r4, r3
   10cd2:	0010      	movs	r0, r2
   10cd4:	2c00      	cmp	r4, #0
   10cd6:	d101      	bne.n	10cdc <__lo0bits+0x34>
   10cd8:	2010      	movs	r0, #16
   10cda:	0c1b      	lsrs	r3, r3, #16
   10cdc:	b2da      	uxtb	r2, r3
   10cde:	2a00      	cmp	r2, #0
   10ce0:	d101      	bne.n	10ce6 <__lo0bits+0x3e>
   10ce2:	3008      	adds	r0, #8
   10ce4:	0a1b      	lsrs	r3, r3, #8
   10ce6:	071a      	lsls	r2, r3, #28
   10ce8:	d101      	bne.n	10cee <__lo0bits+0x46>
   10cea:	3004      	adds	r0, #4
   10cec:	091b      	lsrs	r3, r3, #4
   10cee:	079a      	lsls	r2, r3, #30
   10cf0:	d101      	bne.n	10cf6 <__lo0bits+0x4e>
   10cf2:	3002      	adds	r0, #2
   10cf4:	089b      	lsrs	r3, r3, #2
   10cf6:	07da      	lsls	r2, r3, #31
   10cf8:	d4e8      	bmi.n	10ccc <__lo0bits+0x24>
   10cfa:	085b      	lsrs	r3, r3, #1
   10cfc:	d001      	beq.n	10d02 <__lo0bits+0x5a>
   10cfe:	3001      	adds	r0, #1
   10d00:	e7e4      	b.n	10ccc <__lo0bits+0x24>
   10d02:	2020      	movs	r0, #32
   10d04:	e7e0      	b.n	10cc8 <__lo0bits+0x20>

00010d06 <__i2b>:
   10d06:	b510      	push	{r4, lr}
   10d08:	000c      	movs	r4, r1
   10d0a:	2101      	movs	r1, #1
   10d0c:	f7ff ff25 	bl	10b5a <_Balloc>
   10d10:	2301      	movs	r3, #1
   10d12:	6144      	str	r4, [r0, #20]
   10d14:	6103      	str	r3, [r0, #16]
   10d16:	bd10      	pop	{r4, pc}

00010d18 <__multiply>:
   10d18:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d1a:	690b      	ldr	r3, [r1, #16]
   10d1c:	0015      	movs	r5, r2
   10d1e:	6912      	ldr	r2, [r2, #16]
   10d20:	b089      	sub	sp, #36	; 0x24
   10d22:	000c      	movs	r4, r1
   10d24:	4293      	cmp	r3, r2
   10d26:	da01      	bge.n	10d2c <__multiply+0x14>
   10d28:	002c      	movs	r4, r5
   10d2a:	000d      	movs	r5, r1
   10d2c:	6927      	ldr	r7, [r4, #16]
   10d2e:	692e      	ldr	r6, [r5, #16]
   10d30:	68a2      	ldr	r2, [r4, #8]
   10d32:	19bb      	adds	r3, r7, r6
   10d34:	6861      	ldr	r1, [r4, #4]
   10d36:	9301      	str	r3, [sp, #4]
   10d38:	4293      	cmp	r3, r2
   10d3a:	dd00      	ble.n	10d3e <__multiply+0x26>
   10d3c:	3101      	adds	r1, #1
   10d3e:	f7ff ff0c 	bl	10b5a <_Balloc>
   10d42:	0003      	movs	r3, r0
   10d44:	3314      	adds	r3, #20
   10d46:	9300      	str	r3, [sp, #0]
   10d48:	9a00      	ldr	r2, [sp, #0]
   10d4a:	19bb      	adds	r3, r7, r6
   10d4c:	4694      	mov	ip, r2
   10d4e:	009b      	lsls	r3, r3, #2
   10d50:	449c      	add	ip, r3
   10d52:	0013      	movs	r3, r2
   10d54:	2200      	movs	r2, #0
   10d56:	9004      	str	r0, [sp, #16]
   10d58:	4563      	cmp	r3, ip
   10d5a:	d31c      	bcc.n	10d96 <__multiply+0x7e>
   10d5c:	002a      	movs	r2, r5
   10d5e:	3414      	adds	r4, #20
   10d60:	00bf      	lsls	r7, r7, #2
   10d62:	19e3      	adds	r3, r4, r7
   10d64:	3214      	adds	r2, #20
   10d66:	00b6      	lsls	r6, r6, #2
   10d68:	9305      	str	r3, [sp, #20]
   10d6a:	1993      	adds	r3, r2, r6
   10d6c:	9402      	str	r4, [sp, #8]
   10d6e:	9306      	str	r3, [sp, #24]
   10d70:	9b06      	ldr	r3, [sp, #24]
   10d72:	429a      	cmp	r2, r3
   10d74:	d311      	bcc.n	10d9a <__multiply+0x82>
   10d76:	9b01      	ldr	r3, [sp, #4]
   10d78:	2b00      	cmp	r3, #0
   10d7a:	dd06      	ble.n	10d8a <__multiply+0x72>
   10d7c:	2304      	movs	r3, #4
   10d7e:	425b      	negs	r3, r3
   10d80:	449c      	add	ip, r3
   10d82:	4663      	mov	r3, ip
   10d84:	681b      	ldr	r3, [r3, #0]
   10d86:	2b00      	cmp	r3, #0
   10d88:	d051      	beq.n	10e2e <__multiply+0x116>
   10d8a:	9b04      	ldr	r3, [sp, #16]
   10d8c:	9a01      	ldr	r2, [sp, #4]
   10d8e:	0018      	movs	r0, r3
   10d90:	611a      	str	r2, [r3, #16]
   10d92:	b009      	add	sp, #36	; 0x24
   10d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d96:	c304      	stmia	r3!, {r2}
   10d98:	e7de      	b.n	10d58 <__multiply+0x40>
   10d9a:	8814      	ldrh	r4, [r2, #0]
   10d9c:	2c00      	cmp	r4, #0
   10d9e:	d01e      	beq.n	10dde <__multiply+0xc6>
   10da0:	2600      	movs	r6, #0
   10da2:	9d00      	ldr	r5, [sp, #0]
   10da4:	9f02      	ldr	r7, [sp, #8]
   10da6:	cf01      	ldmia	r7!, {r0}
   10da8:	9507      	str	r5, [sp, #28]
   10daa:	cd08      	ldmia	r5!, {r3}
   10dac:	9303      	str	r3, [sp, #12]
   10dae:	b283      	uxth	r3, r0
   10db0:	4363      	muls	r3, r4
   10db2:	0019      	movs	r1, r3
   10db4:	466b      	mov	r3, sp
   10db6:	0c00      	lsrs	r0, r0, #16
   10db8:	899b      	ldrh	r3, [r3, #12]
   10dba:	4360      	muls	r0, r4
   10dbc:	18cb      	adds	r3, r1, r3
   10dbe:	9903      	ldr	r1, [sp, #12]
   10dc0:	199b      	adds	r3, r3, r6
   10dc2:	0c09      	lsrs	r1, r1, #16
   10dc4:	1841      	adds	r1, r0, r1
   10dc6:	0c18      	lsrs	r0, r3, #16
   10dc8:	1809      	adds	r1, r1, r0
   10dca:	0c0e      	lsrs	r6, r1, #16
   10dcc:	b29b      	uxth	r3, r3
   10dce:	0409      	lsls	r1, r1, #16
   10dd0:	430b      	orrs	r3, r1
   10dd2:	9907      	ldr	r1, [sp, #28]
   10dd4:	600b      	str	r3, [r1, #0]
   10dd6:	9b05      	ldr	r3, [sp, #20]
   10dd8:	42bb      	cmp	r3, r7
   10dda:	d8e4      	bhi.n	10da6 <__multiply+0x8e>
   10ddc:	602e      	str	r6, [r5, #0]
   10dde:	6813      	ldr	r3, [r2, #0]
   10de0:	0c1b      	lsrs	r3, r3, #16
   10de2:	9303      	str	r3, [sp, #12]
   10de4:	d01e      	beq.n	10e24 <__multiply+0x10c>
   10de6:	2600      	movs	r6, #0
   10de8:	9b00      	ldr	r3, [sp, #0]
   10dea:	9c02      	ldr	r4, [sp, #8]
   10dec:	681b      	ldr	r3, [r3, #0]
   10dee:	9800      	ldr	r0, [sp, #0]
   10df0:	0007      	movs	r7, r0
   10df2:	8821      	ldrh	r1, [r4, #0]
   10df4:	9d03      	ldr	r5, [sp, #12]
   10df6:	b29b      	uxth	r3, r3
   10df8:	4369      	muls	r1, r5
   10dfa:	c820      	ldmia	r0!, {r5}
   10dfc:	0c2d      	lsrs	r5, r5, #16
   10dfe:	1949      	adds	r1, r1, r5
   10e00:	198e      	adds	r6, r1, r6
   10e02:	0431      	lsls	r1, r6, #16
   10e04:	430b      	orrs	r3, r1
   10e06:	603b      	str	r3, [r7, #0]
   10e08:	cc08      	ldmia	r4!, {r3}
   10e0a:	9903      	ldr	r1, [sp, #12]
   10e0c:	0c1b      	lsrs	r3, r3, #16
   10e0e:	434b      	muls	r3, r1
   10e10:	6879      	ldr	r1, [r7, #4]
   10e12:	0c36      	lsrs	r6, r6, #16
   10e14:	b289      	uxth	r1, r1
   10e16:	185b      	adds	r3, r3, r1
   10e18:	9905      	ldr	r1, [sp, #20]
   10e1a:	199b      	adds	r3, r3, r6
   10e1c:	0c1e      	lsrs	r6, r3, #16
   10e1e:	42a1      	cmp	r1, r4
   10e20:	d8e6      	bhi.n	10df0 <__multiply+0xd8>
   10e22:	6003      	str	r3, [r0, #0]
   10e24:	9b00      	ldr	r3, [sp, #0]
   10e26:	3204      	adds	r2, #4
   10e28:	3304      	adds	r3, #4
   10e2a:	9300      	str	r3, [sp, #0]
   10e2c:	e7a0      	b.n	10d70 <__multiply+0x58>
   10e2e:	9b01      	ldr	r3, [sp, #4]
   10e30:	3b01      	subs	r3, #1
   10e32:	9301      	str	r3, [sp, #4]
   10e34:	e79f      	b.n	10d76 <__multiply+0x5e>
	...

00010e38 <__pow5mult>:
   10e38:	2303      	movs	r3, #3
   10e3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10e3c:	4013      	ands	r3, r2
   10e3e:	0005      	movs	r5, r0
   10e40:	000e      	movs	r6, r1
   10e42:	0014      	movs	r4, r2
   10e44:	2b00      	cmp	r3, #0
   10e46:	d008      	beq.n	10e5a <__pow5mult+0x22>
   10e48:	4922      	ldr	r1, [pc, #136]	; (10ed4 <__pow5mult+0x9c>)
   10e4a:	3b01      	subs	r3, #1
   10e4c:	009a      	lsls	r2, r3, #2
   10e4e:	5852      	ldr	r2, [r2, r1]
   10e50:	2300      	movs	r3, #0
   10e52:	0031      	movs	r1, r6
   10e54:	f7ff fed2 	bl	10bfc <__multadd>
   10e58:	0006      	movs	r6, r0
   10e5a:	10a3      	asrs	r3, r4, #2
   10e5c:	9301      	str	r3, [sp, #4]
   10e5e:	d036      	beq.n	10ece <__pow5mult+0x96>
   10e60:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   10e62:	2c00      	cmp	r4, #0
   10e64:	d107      	bne.n	10e76 <__pow5mult+0x3e>
   10e66:	2010      	movs	r0, #16
   10e68:	f7fd fcec 	bl	e844 <malloc>
   10e6c:	6268      	str	r0, [r5, #36]	; 0x24
   10e6e:	6044      	str	r4, [r0, #4]
   10e70:	6084      	str	r4, [r0, #8]
   10e72:	6004      	str	r4, [r0, #0]
   10e74:	60c4      	str	r4, [r0, #12]
   10e76:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   10e78:	68bc      	ldr	r4, [r7, #8]
   10e7a:	2c00      	cmp	r4, #0
   10e7c:	d107      	bne.n	10e8e <__pow5mult+0x56>
   10e7e:	4916      	ldr	r1, [pc, #88]	; (10ed8 <__pow5mult+0xa0>)
   10e80:	0028      	movs	r0, r5
   10e82:	f7ff ff40 	bl	10d06 <__i2b>
   10e86:	2300      	movs	r3, #0
   10e88:	0004      	movs	r4, r0
   10e8a:	60b8      	str	r0, [r7, #8]
   10e8c:	6003      	str	r3, [r0, #0]
   10e8e:	2201      	movs	r2, #1
   10e90:	9b01      	ldr	r3, [sp, #4]
   10e92:	4213      	tst	r3, r2
   10e94:	d00a      	beq.n	10eac <__pow5mult+0x74>
   10e96:	0031      	movs	r1, r6
   10e98:	0022      	movs	r2, r4
   10e9a:	0028      	movs	r0, r5
   10e9c:	f7ff ff3c 	bl	10d18 <__multiply>
   10ea0:	0007      	movs	r7, r0
   10ea2:	0031      	movs	r1, r6
   10ea4:	0028      	movs	r0, r5
   10ea6:	f7ff fe90 	bl	10bca <_Bfree>
   10eaa:	003e      	movs	r6, r7
   10eac:	9b01      	ldr	r3, [sp, #4]
   10eae:	105b      	asrs	r3, r3, #1
   10eb0:	9301      	str	r3, [sp, #4]
   10eb2:	d00c      	beq.n	10ece <__pow5mult+0x96>
   10eb4:	6820      	ldr	r0, [r4, #0]
   10eb6:	2800      	cmp	r0, #0
   10eb8:	d107      	bne.n	10eca <__pow5mult+0x92>
   10eba:	0022      	movs	r2, r4
   10ebc:	0021      	movs	r1, r4
   10ebe:	0028      	movs	r0, r5
   10ec0:	f7ff ff2a 	bl	10d18 <__multiply>
   10ec4:	2300      	movs	r3, #0
   10ec6:	6020      	str	r0, [r4, #0]
   10ec8:	6003      	str	r3, [r0, #0]
   10eca:	0004      	movs	r4, r0
   10ecc:	e7df      	b.n	10e8e <__pow5mult+0x56>
   10ece:	0030      	movs	r0, r6
   10ed0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10ed2:	46c0      	nop			; (mov r8, r8)
   10ed4:	000168d0 	.word	0x000168d0
   10ed8:	00000271 	.word	0x00000271

00010edc <__lshift>:
   10edc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ede:	000d      	movs	r5, r1
   10ee0:	0017      	movs	r7, r2
   10ee2:	692b      	ldr	r3, [r5, #16]
   10ee4:	1154      	asrs	r4, r2, #5
   10ee6:	b085      	sub	sp, #20
   10ee8:	18e3      	adds	r3, r4, r3
   10eea:	9302      	str	r3, [sp, #8]
   10eec:	3301      	adds	r3, #1
   10eee:	9301      	str	r3, [sp, #4]
   10ef0:	6849      	ldr	r1, [r1, #4]
   10ef2:	68ab      	ldr	r3, [r5, #8]
   10ef4:	9003      	str	r0, [sp, #12]
   10ef6:	9a01      	ldr	r2, [sp, #4]
   10ef8:	4293      	cmp	r3, r2
   10efa:	db34      	blt.n	10f66 <__lshift+0x8a>
   10efc:	9803      	ldr	r0, [sp, #12]
   10efe:	f7ff fe2c 	bl	10b5a <_Balloc>
   10f02:	2300      	movs	r3, #0
   10f04:	0002      	movs	r2, r0
   10f06:	0006      	movs	r6, r0
   10f08:	0019      	movs	r1, r3
   10f0a:	3214      	adds	r2, #20
   10f0c:	42a3      	cmp	r3, r4
   10f0e:	db2d      	blt.n	10f6c <__lshift+0x90>
   10f10:	43e3      	mvns	r3, r4
   10f12:	17db      	asrs	r3, r3, #31
   10f14:	401c      	ands	r4, r3
   10f16:	002b      	movs	r3, r5
   10f18:	211f      	movs	r1, #31
   10f1a:	00a4      	lsls	r4, r4, #2
   10f1c:	1914      	adds	r4, r2, r4
   10f1e:	692a      	ldr	r2, [r5, #16]
   10f20:	3314      	adds	r3, #20
   10f22:	0092      	lsls	r2, r2, #2
   10f24:	189a      	adds	r2, r3, r2
   10f26:	400f      	ands	r7, r1
   10f28:	d024      	beq.n	10f74 <__lshift+0x98>
   10f2a:	3101      	adds	r1, #1
   10f2c:	1bc9      	subs	r1, r1, r7
   10f2e:	468c      	mov	ip, r1
   10f30:	2100      	movs	r1, #0
   10f32:	6818      	ldr	r0, [r3, #0]
   10f34:	40b8      	lsls	r0, r7
   10f36:	4301      	orrs	r1, r0
   10f38:	4660      	mov	r0, ip
   10f3a:	6021      	str	r1, [r4, #0]
   10f3c:	cb02      	ldmia	r3!, {r1}
   10f3e:	3404      	adds	r4, #4
   10f40:	40c1      	lsrs	r1, r0
   10f42:	429a      	cmp	r2, r3
   10f44:	d8f5      	bhi.n	10f32 <__lshift+0x56>
   10f46:	6021      	str	r1, [r4, #0]
   10f48:	2900      	cmp	r1, #0
   10f4a:	d002      	beq.n	10f52 <__lshift+0x76>
   10f4c:	9b02      	ldr	r3, [sp, #8]
   10f4e:	3302      	adds	r3, #2
   10f50:	9301      	str	r3, [sp, #4]
   10f52:	9b01      	ldr	r3, [sp, #4]
   10f54:	9803      	ldr	r0, [sp, #12]
   10f56:	3b01      	subs	r3, #1
   10f58:	6133      	str	r3, [r6, #16]
   10f5a:	0029      	movs	r1, r5
   10f5c:	f7ff fe35 	bl	10bca <_Bfree>
   10f60:	0030      	movs	r0, r6
   10f62:	b005      	add	sp, #20
   10f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f66:	3101      	adds	r1, #1
   10f68:	005b      	lsls	r3, r3, #1
   10f6a:	e7c4      	b.n	10ef6 <__lshift+0x1a>
   10f6c:	0098      	lsls	r0, r3, #2
   10f6e:	5011      	str	r1, [r2, r0]
   10f70:	3301      	adds	r3, #1
   10f72:	e7cb      	b.n	10f0c <__lshift+0x30>
   10f74:	cb02      	ldmia	r3!, {r1}
   10f76:	c402      	stmia	r4!, {r1}
   10f78:	429a      	cmp	r2, r3
   10f7a:	d8fb      	bhi.n	10f74 <__lshift+0x98>
   10f7c:	e7e9      	b.n	10f52 <__lshift+0x76>

00010f7e <__mcmp>:
   10f7e:	690a      	ldr	r2, [r1, #16]
   10f80:	6903      	ldr	r3, [r0, #16]
   10f82:	b530      	push	{r4, r5, lr}
   10f84:	1a9b      	subs	r3, r3, r2
   10f86:	d10e      	bne.n	10fa6 <__mcmp+0x28>
   10f88:	0092      	lsls	r2, r2, #2
   10f8a:	3014      	adds	r0, #20
   10f8c:	3114      	adds	r1, #20
   10f8e:	1884      	adds	r4, r0, r2
   10f90:	1889      	adds	r1, r1, r2
   10f92:	3c04      	subs	r4, #4
   10f94:	3904      	subs	r1, #4
   10f96:	6822      	ldr	r2, [r4, #0]
   10f98:	680d      	ldr	r5, [r1, #0]
   10f9a:	42aa      	cmp	r2, r5
   10f9c:	d005      	beq.n	10faa <__mcmp+0x2c>
   10f9e:	42aa      	cmp	r2, r5
   10fa0:	4192      	sbcs	r2, r2
   10fa2:	2301      	movs	r3, #1
   10fa4:	4313      	orrs	r3, r2
   10fa6:	0018      	movs	r0, r3
   10fa8:	bd30      	pop	{r4, r5, pc}
   10faa:	42a0      	cmp	r0, r4
   10fac:	d3f1      	bcc.n	10f92 <__mcmp+0x14>
   10fae:	e7fa      	b.n	10fa6 <__mcmp+0x28>

00010fb0 <__mdiff>:
   10fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fb2:	000d      	movs	r5, r1
   10fb4:	b085      	sub	sp, #20
   10fb6:	0007      	movs	r7, r0
   10fb8:	0011      	movs	r1, r2
   10fba:	0028      	movs	r0, r5
   10fbc:	0014      	movs	r4, r2
   10fbe:	f7ff ffde 	bl	10f7e <__mcmp>
   10fc2:	1e06      	subs	r6, r0, #0
   10fc4:	d108      	bne.n	10fd8 <__mdiff+0x28>
   10fc6:	0001      	movs	r1, r0
   10fc8:	0038      	movs	r0, r7
   10fca:	f7ff fdc6 	bl	10b5a <_Balloc>
   10fce:	2301      	movs	r3, #1
   10fd0:	6146      	str	r6, [r0, #20]
   10fd2:	6103      	str	r3, [r0, #16]
   10fd4:	b005      	add	sp, #20
   10fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fd8:	2301      	movs	r3, #1
   10fda:	9301      	str	r3, [sp, #4]
   10fdc:	2800      	cmp	r0, #0
   10fde:	db04      	blt.n	10fea <__mdiff+0x3a>
   10fe0:	0023      	movs	r3, r4
   10fe2:	002c      	movs	r4, r5
   10fe4:	001d      	movs	r5, r3
   10fe6:	2300      	movs	r3, #0
   10fe8:	9301      	str	r3, [sp, #4]
   10fea:	6861      	ldr	r1, [r4, #4]
   10fec:	0038      	movs	r0, r7
   10fee:	f7ff fdb4 	bl	10b5a <_Balloc>
   10ff2:	002f      	movs	r7, r5
   10ff4:	2200      	movs	r2, #0
   10ff6:	9b01      	ldr	r3, [sp, #4]
   10ff8:	6926      	ldr	r6, [r4, #16]
   10ffa:	60c3      	str	r3, [r0, #12]
   10ffc:	3414      	adds	r4, #20
   10ffe:	00b3      	lsls	r3, r6, #2
   11000:	18e3      	adds	r3, r4, r3
   11002:	9302      	str	r3, [sp, #8]
   11004:	692b      	ldr	r3, [r5, #16]
   11006:	3714      	adds	r7, #20
   11008:	009b      	lsls	r3, r3, #2
   1100a:	18fb      	adds	r3, r7, r3
   1100c:	9303      	str	r3, [sp, #12]
   1100e:	0003      	movs	r3, r0
   11010:	4694      	mov	ip, r2
   11012:	3314      	adds	r3, #20
   11014:	cc20      	ldmia	r4!, {r5}
   11016:	cf04      	ldmia	r7!, {r2}
   11018:	9201      	str	r2, [sp, #4]
   1101a:	b2aa      	uxth	r2, r5
   1101c:	4494      	add	ip, r2
   1101e:	466a      	mov	r2, sp
   11020:	4661      	mov	r1, ip
   11022:	8892      	ldrh	r2, [r2, #4]
   11024:	0c2d      	lsrs	r5, r5, #16
   11026:	1a8a      	subs	r2, r1, r2
   11028:	9901      	ldr	r1, [sp, #4]
   1102a:	0c09      	lsrs	r1, r1, #16
   1102c:	1a69      	subs	r1, r5, r1
   1102e:	1415      	asrs	r5, r2, #16
   11030:	1949      	adds	r1, r1, r5
   11032:	140d      	asrs	r5, r1, #16
   11034:	b292      	uxth	r2, r2
   11036:	0409      	lsls	r1, r1, #16
   11038:	430a      	orrs	r2, r1
   1103a:	601a      	str	r2, [r3, #0]
   1103c:	9a03      	ldr	r2, [sp, #12]
   1103e:	46ac      	mov	ip, r5
   11040:	3304      	adds	r3, #4
   11042:	42ba      	cmp	r2, r7
   11044:	d8e6      	bhi.n	11014 <__mdiff+0x64>
   11046:	9902      	ldr	r1, [sp, #8]
   11048:	001a      	movs	r2, r3
   1104a:	428c      	cmp	r4, r1
   1104c:	d305      	bcc.n	1105a <__mdiff+0xaa>
   1104e:	3a04      	subs	r2, #4
   11050:	6813      	ldr	r3, [r2, #0]
   11052:	2b00      	cmp	r3, #0
   11054:	d00e      	beq.n	11074 <__mdiff+0xc4>
   11056:	6106      	str	r6, [r0, #16]
   11058:	e7bc      	b.n	10fd4 <__mdiff+0x24>
   1105a:	cc04      	ldmia	r4!, {r2}
   1105c:	b291      	uxth	r1, r2
   1105e:	4461      	add	r1, ip
   11060:	140d      	asrs	r5, r1, #16
   11062:	0c12      	lsrs	r2, r2, #16
   11064:	1952      	adds	r2, r2, r5
   11066:	1415      	asrs	r5, r2, #16
   11068:	b289      	uxth	r1, r1
   1106a:	0412      	lsls	r2, r2, #16
   1106c:	430a      	orrs	r2, r1
   1106e:	46ac      	mov	ip, r5
   11070:	c304      	stmia	r3!, {r2}
   11072:	e7e8      	b.n	11046 <__mdiff+0x96>
   11074:	3e01      	subs	r6, #1
   11076:	e7ea      	b.n	1104e <__mdiff+0x9e>

00011078 <__d2b>:
   11078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1107a:	001d      	movs	r5, r3
   1107c:	2101      	movs	r1, #1
   1107e:	9f08      	ldr	r7, [sp, #32]
   11080:	0014      	movs	r4, r2
   11082:	f7ff fd6a 	bl	10b5a <_Balloc>
   11086:	032b      	lsls	r3, r5, #12
   11088:	006d      	lsls	r5, r5, #1
   1108a:	0006      	movs	r6, r0
   1108c:	0b1b      	lsrs	r3, r3, #12
   1108e:	0d6d      	lsrs	r5, r5, #21
   11090:	d124      	bne.n	110dc <__d2b+0x64>
   11092:	9301      	str	r3, [sp, #4]
   11094:	2c00      	cmp	r4, #0
   11096:	d027      	beq.n	110e8 <__d2b+0x70>
   11098:	4668      	mov	r0, sp
   1109a:	9400      	str	r4, [sp, #0]
   1109c:	f7ff fe04 	bl	10ca8 <__lo0bits>
   110a0:	9c00      	ldr	r4, [sp, #0]
   110a2:	2800      	cmp	r0, #0
   110a4:	d01e      	beq.n	110e4 <__d2b+0x6c>
   110a6:	9b01      	ldr	r3, [sp, #4]
   110a8:	2120      	movs	r1, #32
   110aa:	001a      	movs	r2, r3
   110ac:	1a09      	subs	r1, r1, r0
   110ae:	408a      	lsls	r2, r1
   110b0:	40c3      	lsrs	r3, r0
   110b2:	4322      	orrs	r2, r4
   110b4:	6172      	str	r2, [r6, #20]
   110b6:	9301      	str	r3, [sp, #4]
   110b8:	9c01      	ldr	r4, [sp, #4]
   110ba:	61b4      	str	r4, [r6, #24]
   110bc:	1e63      	subs	r3, r4, #1
   110be:	419c      	sbcs	r4, r3
   110c0:	3401      	adds	r4, #1
   110c2:	6134      	str	r4, [r6, #16]
   110c4:	2d00      	cmp	r5, #0
   110c6:	d018      	beq.n	110fa <__d2b+0x82>
   110c8:	4b12      	ldr	r3, [pc, #72]	; (11114 <__d2b+0x9c>)
   110ca:	18ed      	adds	r5, r5, r3
   110cc:	2335      	movs	r3, #53	; 0x35
   110ce:	182d      	adds	r5, r5, r0
   110d0:	603d      	str	r5, [r7, #0]
   110d2:	1a18      	subs	r0, r3, r0
   110d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   110d6:	6018      	str	r0, [r3, #0]
   110d8:	0030      	movs	r0, r6
   110da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   110dc:	2280      	movs	r2, #128	; 0x80
   110de:	0352      	lsls	r2, r2, #13
   110e0:	4313      	orrs	r3, r2
   110e2:	e7d6      	b.n	11092 <__d2b+0x1a>
   110e4:	6174      	str	r4, [r6, #20]
   110e6:	e7e7      	b.n	110b8 <__d2b+0x40>
   110e8:	a801      	add	r0, sp, #4
   110ea:	f7ff fddd 	bl	10ca8 <__lo0bits>
   110ee:	2401      	movs	r4, #1
   110f0:	9b01      	ldr	r3, [sp, #4]
   110f2:	6134      	str	r4, [r6, #16]
   110f4:	6173      	str	r3, [r6, #20]
   110f6:	3020      	adds	r0, #32
   110f8:	e7e4      	b.n	110c4 <__d2b+0x4c>
   110fa:	4b07      	ldr	r3, [pc, #28]	; (11118 <__d2b+0xa0>)
   110fc:	18c0      	adds	r0, r0, r3
   110fe:	4b07      	ldr	r3, [pc, #28]	; (1111c <__d2b+0xa4>)
   11100:	6038      	str	r0, [r7, #0]
   11102:	18e3      	adds	r3, r4, r3
   11104:	009b      	lsls	r3, r3, #2
   11106:	18f3      	adds	r3, r6, r3
   11108:	6958      	ldr	r0, [r3, #20]
   1110a:	f7ff fdb3 	bl	10c74 <__hi0bits>
   1110e:	0164      	lsls	r4, r4, #5
   11110:	1a20      	subs	r0, r4, r0
   11112:	e7df      	b.n	110d4 <__d2b+0x5c>
   11114:	fffffbcd 	.word	0xfffffbcd
   11118:	fffffbce 	.word	0xfffffbce
   1111c:	3fffffff 	.word	0x3fffffff

00011120 <_calloc_r>:
   11120:	434a      	muls	r2, r1
   11122:	b570      	push	{r4, r5, r6, lr}
   11124:	0011      	movs	r1, r2
   11126:	0014      	movs	r4, r2
   11128:	f7fd fc20 	bl	e96c <_malloc_r>
   1112c:	1e05      	subs	r5, r0, #0
   1112e:	d003      	beq.n	11138 <_calloc_r+0x18>
   11130:	0022      	movs	r2, r4
   11132:	2100      	movs	r1, #0
   11134:	f7fd fbc7 	bl	e8c6 <memset>
   11138:	0028      	movs	r0, r5
   1113a:	bd70      	pop	{r4, r5, r6, pc}

0001113c <__ssputs_r>:
   1113c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1113e:	688e      	ldr	r6, [r1, #8]
   11140:	b085      	sub	sp, #20
   11142:	0007      	movs	r7, r0
   11144:	000c      	movs	r4, r1
   11146:	9203      	str	r2, [sp, #12]
   11148:	9301      	str	r3, [sp, #4]
   1114a:	429e      	cmp	r6, r3
   1114c:	d839      	bhi.n	111c2 <__ssputs_r+0x86>
   1114e:	2390      	movs	r3, #144	; 0x90
   11150:	898a      	ldrh	r2, [r1, #12]
   11152:	00db      	lsls	r3, r3, #3
   11154:	421a      	tst	r2, r3
   11156:	d034      	beq.n	111c2 <__ssputs_r+0x86>
   11158:	2503      	movs	r5, #3
   1115a:	6909      	ldr	r1, [r1, #16]
   1115c:	6823      	ldr	r3, [r4, #0]
   1115e:	1a5b      	subs	r3, r3, r1
   11160:	9302      	str	r3, [sp, #8]
   11162:	6963      	ldr	r3, [r4, #20]
   11164:	9802      	ldr	r0, [sp, #8]
   11166:	435d      	muls	r5, r3
   11168:	0feb      	lsrs	r3, r5, #31
   1116a:	195d      	adds	r5, r3, r5
   1116c:	9b01      	ldr	r3, [sp, #4]
   1116e:	106d      	asrs	r5, r5, #1
   11170:	3301      	adds	r3, #1
   11172:	181b      	adds	r3, r3, r0
   11174:	42ab      	cmp	r3, r5
   11176:	d900      	bls.n	1117a <__ssputs_r+0x3e>
   11178:	001d      	movs	r5, r3
   1117a:	0553      	lsls	r3, r2, #21
   1117c:	d532      	bpl.n	111e4 <__ssputs_r+0xa8>
   1117e:	0029      	movs	r1, r5
   11180:	0038      	movs	r0, r7
   11182:	f7fd fbf3 	bl	e96c <_malloc_r>
   11186:	1e06      	subs	r6, r0, #0
   11188:	d109      	bne.n	1119e <__ssputs_r+0x62>
   1118a:	230c      	movs	r3, #12
   1118c:	603b      	str	r3, [r7, #0]
   1118e:	2340      	movs	r3, #64	; 0x40
   11190:	2001      	movs	r0, #1
   11192:	89a2      	ldrh	r2, [r4, #12]
   11194:	4240      	negs	r0, r0
   11196:	4313      	orrs	r3, r2
   11198:	81a3      	strh	r3, [r4, #12]
   1119a:	b005      	add	sp, #20
   1119c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1119e:	9a02      	ldr	r2, [sp, #8]
   111a0:	6921      	ldr	r1, [r4, #16]
   111a2:	f7fd fb75 	bl	e890 <memcpy>
   111a6:	89a3      	ldrh	r3, [r4, #12]
   111a8:	4a14      	ldr	r2, [pc, #80]	; (111fc <__ssputs_r+0xc0>)
   111aa:	401a      	ands	r2, r3
   111ac:	2380      	movs	r3, #128	; 0x80
   111ae:	4313      	orrs	r3, r2
   111b0:	81a3      	strh	r3, [r4, #12]
   111b2:	9b02      	ldr	r3, [sp, #8]
   111b4:	6126      	str	r6, [r4, #16]
   111b6:	18f6      	adds	r6, r6, r3
   111b8:	6026      	str	r6, [r4, #0]
   111ba:	6165      	str	r5, [r4, #20]
   111bc:	9e01      	ldr	r6, [sp, #4]
   111be:	1aed      	subs	r5, r5, r3
   111c0:	60a5      	str	r5, [r4, #8]
   111c2:	9b01      	ldr	r3, [sp, #4]
   111c4:	42b3      	cmp	r3, r6
   111c6:	d200      	bcs.n	111ca <__ssputs_r+0x8e>
   111c8:	001e      	movs	r6, r3
   111ca:	0032      	movs	r2, r6
   111cc:	9903      	ldr	r1, [sp, #12]
   111ce:	6820      	ldr	r0, [r4, #0]
   111d0:	f7fd fb67 	bl	e8a2 <memmove>
   111d4:	68a3      	ldr	r3, [r4, #8]
   111d6:	2000      	movs	r0, #0
   111d8:	1b9b      	subs	r3, r3, r6
   111da:	60a3      	str	r3, [r4, #8]
   111dc:	6823      	ldr	r3, [r4, #0]
   111de:	199e      	adds	r6, r3, r6
   111e0:	6026      	str	r6, [r4, #0]
   111e2:	e7da      	b.n	1119a <__ssputs_r+0x5e>
   111e4:	002a      	movs	r2, r5
   111e6:	0038      	movs	r0, r7
   111e8:	f000 fb32 	bl	11850 <_realloc_r>
   111ec:	1e06      	subs	r6, r0, #0
   111ee:	d1e0      	bne.n	111b2 <__ssputs_r+0x76>
   111f0:	6921      	ldr	r1, [r4, #16]
   111f2:	0038      	movs	r0, r7
   111f4:	f7fd fb70 	bl	e8d8 <_free_r>
   111f8:	e7c7      	b.n	1118a <__ssputs_r+0x4e>
   111fa:	46c0      	nop			; (mov r8, r8)
   111fc:	fffffb7f 	.word	0xfffffb7f

00011200 <_svfiprintf_r>:
   11200:	b5f0      	push	{r4, r5, r6, r7, lr}
   11202:	b09f      	sub	sp, #124	; 0x7c
   11204:	9002      	str	r0, [sp, #8]
   11206:	9305      	str	r3, [sp, #20]
   11208:	898b      	ldrh	r3, [r1, #12]
   1120a:	000f      	movs	r7, r1
   1120c:	0016      	movs	r6, r2
   1120e:	061b      	lsls	r3, r3, #24
   11210:	d511      	bpl.n	11236 <_svfiprintf_r+0x36>
   11212:	690b      	ldr	r3, [r1, #16]
   11214:	2b00      	cmp	r3, #0
   11216:	d10e      	bne.n	11236 <_svfiprintf_r+0x36>
   11218:	2140      	movs	r1, #64	; 0x40
   1121a:	f7fd fba7 	bl	e96c <_malloc_r>
   1121e:	6038      	str	r0, [r7, #0]
   11220:	6138      	str	r0, [r7, #16]
   11222:	2800      	cmp	r0, #0
   11224:	d105      	bne.n	11232 <_svfiprintf_r+0x32>
   11226:	230c      	movs	r3, #12
   11228:	9a02      	ldr	r2, [sp, #8]
   1122a:	3801      	subs	r0, #1
   1122c:	6013      	str	r3, [r2, #0]
   1122e:	b01f      	add	sp, #124	; 0x7c
   11230:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11232:	2340      	movs	r3, #64	; 0x40
   11234:	617b      	str	r3, [r7, #20]
   11236:	2300      	movs	r3, #0
   11238:	ad06      	add	r5, sp, #24
   1123a:	616b      	str	r3, [r5, #20]
   1123c:	3320      	adds	r3, #32
   1123e:	766b      	strb	r3, [r5, #25]
   11240:	3310      	adds	r3, #16
   11242:	76ab      	strb	r3, [r5, #26]
   11244:	0034      	movs	r4, r6
   11246:	7823      	ldrb	r3, [r4, #0]
   11248:	2b00      	cmp	r3, #0
   1124a:	d147      	bne.n	112dc <_svfiprintf_r+0xdc>
   1124c:	1ba3      	subs	r3, r4, r6
   1124e:	9304      	str	r3, [sp, #16]
   11250:	d00d      	beq.n	1126e <_svfiprintf_r+0x6e>
   11252:	1ba3      	subs	r3, r4, r6
   11254:	0032      	movs	r2, r6
   11256:	0039      	movs	r1, r7
   11258:	9802      	ldr	r0, [sp, #8]
   1125a:	f7ff ff6f 	bl	1113c <__ssputs_r>
   1125e:	1c43      	adds	r3, r0, #1
   11260:	d100      	bne.n	11264 <_svfiprintf_r+0x64>
   11262:	e0b5      	b.n	113d0 <_svfiprintf_r+0x1d0>
   11264:	696a      	ldr	r2, [r5, #20]
   11266:	9b04      	ldr	r3, [sp, #16]
   11268:	4694      	mov	ip, r2
   1126a:	4463      	add	r3, ip
   1126c:	616b      	str	r3, [r5, #20]
   1126e:	7823      	ldrb	r3, [r4, #0]
   11270:	2b00      	cmp	r3, #0
   11272:	d100      	bne.n	11276 <_svfiprintf_r+0x76>
   11274:	e0ac      	b.n	113d0 <_svfiprintf_r+0x1d0>
   11276:	2201      	movs	r2, #1
   11278:	2300      	movs	r3, #0
   1127a:	4252      	negs	r2, r2
   1127c:	606a      	str	r2, [r5, #4]
   1127e:	a902      	add	r1, sp, #8
   11280:	3254      	adds	r2, #84	; 0x54
   11282:	1852      	adds	r2, r2, r1
   11284:	3401      	adds	r4, #1
   11286:	602b      	str	r3, [r5, #0]
   11288:	60eb      	str	r3, [r5, #12]
   1128a:	60ab      	str	r3, [r5, #8]
   1128c:	7013      	strb	r3, [r2, #0]
   1128e:	65ab      	str	r3, [r5, #88]	; 0x58
   11290:	4e58      	ldr	r6, [pc, #352]	; (113f4 <_svfiprintf_r+0x1f4>)
   11292:	2205      	movs	r2, #5
   11294:	7821      	ldrb	r1, [r4, #0]
   11296:	0030      	movs	r0, r6
   11298:	f7ff fc52 	bl	10b40 <memchr>
   1129c:	1c62      	adds	r2, r4, #1
   1129e:	2800      	cmp	r0, #0
   112a0:	d120      	bne.n	112e4 <_svfiprintf_r+0xe4>
   112a2:	6829      	ldr	r1, [r5, #0]
   112a4:	06cb      	lsls	r3, r1, #27
   112a6:	d504      	bpl.n	112b2 <_svfiprintf_r+0xb2>
   112a8:	2353      	movs	r3, #83	; 0x53
   112aa:	ae02      	add	r6, sp, #8
   112ac:	3020      	adds	r0, #32
   112ae:	199b      	adds	r3, r3, r6
   112b0:	7018      	strb	r0, [r3, #0]
   112b2:	070b      	lsls	r3, r1, #28
   112b4:	d504      	bpl.n	112c0 <_svfiprintf_r+0xc0>
   112b6:	2353      	movs	r3, #83	; 0x53
   112b8:	202b      	movs	r0, #43	; 0x2b
   112ba:	ae02      	add	r6, sp, #8
   112bc:	199b      	adds	r3, r3, r6
   112be:	7018      	strb	r0, [r3, #0]
   112c0:	7823      	ldrb	r3, [r4, #0]
   112c2:	2b2a      	cmp	r3, #42	; 0x2a
   112c4:	d016      	beq.n	112f4 <_svfiprintf_r+0xf4>
   112c6:	2000      	movs	r0, #0
   112c8:	210a      	movs	r1, #10
   112ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   112cc:	7822      	ldrb	r2, [r4, #0]
   112ce:	3a30      	subs	r2, #48	; 0x30
   112d0:	2a09      	cmp	r2, #9
   112d2:	d955      	bls.n	11380 <_svfiprintf_r+0x180>
   112d4:	2800      	cmp	r0, #0
   112d6:	d015      	beq.n	11304 <_svfiprintf_r+0x104>
   112d8:	9309      	str	r3, [sp, #36]	; 0x24
   112da:	e013      	b.n	11304 <_svfiprintf_r+0x104>
   112dc:	2b25      	cmp	r3, #37	; 0x25
   112de:	d0b5      	beq.n	1124c <_svfiprintf_r+0x4c>
   112e0:	3401      	adds	r4, #1
   112e2:	e7b0      	b.n	11246 <_svfiprintf_r+0x46>
   112e4:	2301      	movs	r3, #1
   112e6:	1b80      	subs	r0, r0, r6
   112e8:	4083      	lsls	r3, r0
   112ea:	6829      	ldr	r1, [r5, #0]
   112ec:	0014      	movs	r4, r2
   112ee:	430b      	orrs	r3, r1
   112f0:	602b      	str	r3, [r5, #0]
   112f2:	e7cd      	b.n	11290 <_svfiprintf_r+0x90>
   112f4:	9b05      	ldr	r3, [sp, #20]
   112f6:	1d18      	adds	r0, r3, #4
   112f8:	681b      	ldr	r3, [r3, #0]
   112fa:	9005      	str	r0, [sp, #20]
   112fc:	2b00      	cmp	r3, #0
   112fe:	db39      	blt.n	11374 <_svfiprintf_r+0x174>
   11300:	9309      	str	r3, [sp, #36]	; 0x24
   11302:	0014      	movs	r4, r2
   11304:	7823      	ldrb	r3, [r4, #0]
   11306:	2b2e      	cmp	r3, #46	; 0x2e
   11308:	d10b      	bne.n	11322 <_svfiprintf_r+0x122>
   1130a:	7863      	ldrb	r3, [r4, #1]
   1130c:	1c62      	adds	r2, r4, #1
   1130e:	2b2a      	cmp	r3, #42	; 0x2a
   11310:	d13e      	bne.n	11390 <_svfiprintf_r+0x190>
   11312:	9b05      	ldr	r3, [sp, #20]
   11314:	3402      	adds	r4, #2
   11316:	1d1a      	adds	r2, r3, #4
   11318:	681b      	ldr	r3, [r3, #0]
   1131a:	9205      	str	r2, [sp, #20]
   1131c:	2b00      	cmp	r3, #0
   1131e:	db34      	blt.n	1138a <_svfiprintf_r+0x18a>
   11320:	9307      	str	r3, [sp, #28]
   11322:	4e35      	ldr	r6, [pc, #212]	; (113f8 <_svfiprintf_r+0x1f8>)
   11324:	7821      	ldrb	r1, [r4, #0]
   11326:	2203      	movs	r2, #3
   11328:	0030      	movs	r0, r6
   1132a:	f7ff fc09 	bl	10b40 <memchr>
   1132e:	2800      	cmp	r0, #0
   11330:	d006      	beq.n	11340 <_svfiprintf_r+0x140>
   11332:	2340      	movs	r3, #64	; 0x40
   11334:	1b80      	subs	r0, r0, r6
   11336:	4083      	lsls	r3, r0
   11338:	682a      	ldr	r2, [r5, #0]
   1133a:	3401      	adds	r4, #1
   1133c:	4313      	orrs	r3, r2
   1133e:	602b      	str	r3, [r5, #0]
   11340:	7821      	ldrb	r1, [r4, #0]
   11342:	2206      	movs	r2, #6
   11344:	482d      	ldr	r0, [pc, #180]	; (113fc <_svfiprintf_r+0x1fc>)
   11346:	1c66      	adds	r6, r4, #1
   11348:	7629      	strb	r1, [r5, #24]
   1134a:	f7ff fbf9 	bl	10b40 <memchr>
   1134e:	2800      	cmp	r0, #0
   11350:	d046      	beq.n	113e0 <_svfiprintf_r+0x1e0>
   11352:	4b2b      	ldr	r3, [pc, #172]	; (11400 <_svfiprintf_r+0x200>)
   11354:	2b00      	cmp	r3, #0
   11356:	d12f      	bne.n	113b8 <_svfiprintf_r+0x1b8>
   11358:	6829      	ldr	r1, [r5, #0]
   1135a:	9b05      	ldr	r3, [sp, #20]
   1135c:	2207      	movs	r2, #7
   1135e:	05c9      	lsls	r1, r1, #23
   11360:	d528      	bpl.n	113b4 <_svfiprintf_r+0x1b4>
   11362:	189b      	adds	r3, r3, r2
   11364:	4393      	bics	r3, r2
   11366:	3308      	adds	r3, #8
   11368:	9305      	str	r3, [sp, #20]
   1136a:	696b      	ldr	r3, [r5, #20]
   1136c:	9a03      	ldr	r2, [sp, #12]
   1136e:	189b      	adds	r3, r3, r2
   11370:	616b      	str	r3, [r5, #20]
   11372:	e767      	b.n	11244 <_svfiprintf_r+0x44>
   11374:	425b      	negs	r3, r3
   11376:	60eb      	str	r3, [r5, #12]
   11378:	2302      	movs	r3, #2
   1137a:	430b      	orrs	r3, r1
   1137c:	602b      	str	r3, [r5, #0]
   1137e:	e7c0      	b.n	11302 <_svfiprintf_r+0x102>
   11380:	434b      	muls	r3, r1
   11382:	3401      	adds	r4, #1
   11384:	189b      	adds	r3, r3, r2
   11386:	2001      	movs	r0, #1
   11388:	e7a0      	b.n	112cc <_svfiprintf_r+0xcc>
   1138a:	2301      	movs	r3, #1
   1138c:	425b      	negs	r3, r3
   1138e:	e7c7      	b.n	11320 <_svfiprintf_r+0x120>
   11390:	2300      	movs	r3, #0
   11392:	0014      	movs	r4, r2
   11394:	200a      	movs	r0, #10
   11396:	001a      	movs	r2, r3
   11398:	606b      	str	r3, [r5, #4]
   1139a:	7821      	ldrb	r1, [r4, #0]
   1139c:	3930      	subs	r1, #48	; 0x30
   1139e:	2909      	cmp	r1, #9
   113a0:	d903      	bls.n	113aa <_svfiprintf_r+0x1aa>
   113a2:	2b00      	cmp	r3, #0
   113a4:	d0bd      	beq.n	11322 <_svfiprintf_r+0x122>
   113a6:	9207      	str	r2, [sp, #28]
   113a8:	e7bb      	b.n	11322 <_svfiprintf_r+0x122>
   113aa:	4342      	muls	r2, r0
   113ac:	3401      	adds	r4, #1
   113ae:	1852      	adds	r2, r2, r1
   113b0:	2301      	movs	r3, #1
   113b2:	e7f2      	b.n	1139a <_svfiprintf_r+0x19a>
   113b4:	3307      	adds	r3, #7
   113b6:	e7d5      	b.n	11364 <_svfiprintf_r+0x164>
   113b8:	ab05      	add	r3, sp, #20
   113ba:	9300      	str	r3, [sp, #0]
   113bc:	003a      	movs	r2, r7
   113be:	4b11      	ldr	r3, [pc, #68]	; (11404 <_svfiprintf_r+0x204>)
   113c0:	0029      	movs	r1, r5
   113c2:	9802      	ldr	r0, [sp, #8]
   113c4:	f7fd fbcc 	bl	eb60 <_printf_float>
   113c8:	9003      	str	r0, [sp, #12]
   113ca:	9b03      	ldr	r3, [sp, #12]
   113cc:	3301      	adds	r3, #1
   113ce:	d1cc      	bne.n	1136a <_svfiprintf_r+0x16a>
   113d0:	89bb      	ldrh	r3, [r7, #12]
   113d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   113d4:	065b      	lsls	r3, r3, #25
   113d6:	d400      	bmi.n	113da <_svfiprintf_r+0x1da>
   113d8:	e729      	b.n	1122e <_svfiprintf_r+0x2e>
   113da:	2001      	movs	r0, #1
   113dc:	4240      	negs	r0, r0
   113de:	e726      	b.n	1122e <_svfiprintf_r+0x2e>
   113e0:	ab05      	add	r3, sp, #20
   113e2:	9300      	str	r3, [sp, #0]
   113e4:	003a      	movs	r2, r7
   113e6:	4b07      	ldr	r3, [pc, #28]	; (11404 <_svfiprintf_r+0x204>)
   113e8:	0029      	movs	r1, r5
   113ea:	9802      	ldr	r0, [sp, #8]
   113ec:	f7fd fe72 	bl	f0d4 <_printf_i>
   113f0:	e7ea      	b.n	113c8 <_svfiprintf_r+0x1c8>
   113f2:	46c0      	nop			; (mov r8, r8)
   113f4:	000168dc 	.word	0x000168dc
   113f8:	000168e2 	.word	0x000168e2
   113fc:	000168e6 	.word	0x000168e6
   11400:	0000eb61 	.word	0x0000eb61
   11404:	0001113d 	.word	0x0001113d

00011408 <__sfputc_r>:
   11408:	6893      	ldr	r3, [r2, #8]
   1140a:	b510      	push	{r4, lr}
   1140c:	3b01      	subs	r3, #1
   1140e:	6093      	str	r3, [r2, #8]
   11410:	2b00      	cmp	r3, #0
   11412:	da05      	bge.n	11420 <__sfputc_r+0x18>
   11414:	6994      	ldr	r4, [r2, #24]
   11416:	42a3      	cmp	r3, r4
   11418:	db08      	blt.n	1142c <__sfputc_r+0x24>
   1141a:	b2cb      	uxtb	r3, r1
   1141c:	2b0a      	cmp	r3, #10
   1141e:	d005      	beq.n	1142c <__sfputc_r+0x24>
   11420:	6813      	ldr	r3, [r2, #0]
   11422:	1c58      	adds	r0, r3, #1
   11424:	6010      	str	r0, [r2, #0]
   11426:	7019      	strb	r1, [r3, #0]
   11428:	b2c8      	uxtb	r0, r1
   1142a:	bd10      	pop	{r4, pc}
   1142c:	f7fe fa3e 	bl	f8ac <__swbuf_r>
   11430:	e7fb      	b.n	1142a <__sfputc_r+0x22>

00011432 <__sfputs_r>:
   11432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11434:	0006      	movs	r6, r0
   11436:	000f      	movs	r7, r1
   11438:	0014      	movs	r4, r2
   1143a:	18d5      	adds	r5, r2, r3
   1143c:	42ac      	cmp	r4, r5
   1143e:	d101      	bne.n	11444 <__sfputs_r+0x12>
   11440:	2000      	movs	r0, #0
   11442:	e007      	b.n	11454 <__sfputs_r+0x22>
   11444:	7821      	ldrb	r1, [r4, #0]
   11446:	003a      	movs	r2, r7
   11448:	0030      	movs	r0, r6
   1144a:	f7ff ffdd 	bl	11408 <__sfputc_r>
   1144e:	3401      	adds	r4, #1
   11450:	1c43      	adds	r3, r0, #1
   11452:	d1f3      	bne.n	1143c <__sfputs_r+0xa>
   11454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00011458 <_vfiprintf_r>:
   11458:	b5f0      	push	{r4, r5, r6, r7, lr}
   1145a:	b09f      	sub	sp, #124	; 0x7c
   1145c:	0006      	movs	r6, r0
   1145e:	000f      	movs	r7, r1
   11460:	0014      	movs	r4, r2
   11462:	9305      	str	r3, [sp, #20]
   11464:	2800      	cmp	r0, #0
   11466:	d004      	beq.n	11472 <_vfiprintf_r+0x1a>
   11468:	6983      	ldr	r3, [r0, #24]
   1146a:	2b00      	cmp	r3, #0
   1146c:	d101      	bne.n	11472 <_vfiprintf_r+0x1a>
   1146e:	f7ff fa59 	bl	10924 <__sinit>
   11472:	4b7f      	ldr	r3, [pc, #508]	; (11670 <_vfiprintf_r+0x218>)
   11474:	429f      	cmp	r7, r3
   11476:	d15c      	bne.n	11532 <_vfiprintf_r+0xda>
   11478:	6877      	ldr	r7, [r6, #4]
   1147a:	89bb      	ldrh	r3, [r7, #12]
   1147c:	071b      	lsls	r3, r3, #28
   1147e:	d562      	bpl.n	11546 <_vfiprintf_r+0xee>
   11480:	693b      	ldr	r3, [r7, #16]
   11482:	2b00      	cmp	r3, #0
   11484:	d05f      	beq.n	11546 <_vfiprintf_r+0xee>
   11486:	2300      	movs	r3, #0
   11488:	ad06      	add	r5, sp, #24
   1148a:	616b      	str	r3, [r5, #20]
   1148c:	3320      	adds	r3, #32
   1148e:	766b      	strb	r3, [r5, #25]
   11490:	3310      	adds	r3, #16
   11492:	76ab      	strb	r3, [r5, #26]
   11494:	9402      	str	r4, [sp, #8]
   11496:	9c02      	ldr	r4, [sp, #8]
   11498:	7823      	ldrb	r3, [r4, #0]
   1149a:	2b00      	cmp	r3, #0
   1149c:	d15d      	bne.n	1155a <_vfiprintf_r+0x102>
   1149e:	9b02      	ldr	r3, [sp, #8]
   114a0:	1ae3      	subs	r3, r4, r3
   114a2:	9304      	str	r3, [sp, #16]
   114a4:	d00d      	beq.n	114c2 <_vfiprintf_r+0x6a>
   114a6:	9b04      	ldr	r3, [sp, #16]
   114a8:	9a02      	ldr	r2, [sp, #8]
   114aa:	0039      	movs	r1, r7
   114ac:	0030      	movs	r0, r6
   114ae:	f7ff ffc0 	bl	11432 <__sfputs_r>
   114b2:	1c43      	adds	r3, r0, #1
   114b4:	d100      	bne.n	114b8 <_vfiprintf_r+0x60>
   114b6:	e0cc      	b.n	11652 <_vfiprintf_r+0x1fa>
   114b8:	696a      	ldr	r2, [r5, #20]
   114ba:	9b04      	ldr	r3, [sp, #16]
   114bc:	4694      	mov	ip, r2
   114be:	4463      	add	r3, ip
   114c0:	616b      	str	r3, [r5, #20]
   114c2:	7823      	ldrb	r3, [r4, #0]
   114c4:	2b00      	cmp	r3, #0
   114c6:	d100      	bne.n	114ca <_vfiprintf_r+0x72>
   114c8:	e0c3      	b.n	11652 <_vfiprintf_r+0x1fa>
   114ca:	2201      	movs	r2, #1
   114cc:	2300      	movs	r3, #0
   114ce:	4252      	negs	r2, r2
   114d0:	606a      	str	r2, [r5, #4]
   114d2:	a902      	add	r1, sp, #8
   114d4:	3254      	adds	r2, #84	; 0x54
   114d6:	1852      	adds	r2, r2, r1
   114d8:	3401      	adds	r4, #1
   114da:	602b      	str	r3, [r5, #0]
   114dc:	60eb      	str	r3, [r5, #12]
   114de:	60ab      	str	r3, [r5, #8]
   114e0:	7013      	strb	r3, [r2, #0]
   114e2:	65ab      	str	r3, [r5, #88]	; 0x58
   114e4:	7821      	ldrb	r1, [r4, #0]
   114e6:	2205      	movs	r2, #5
   114e8:	4862      	ldr	r0, [pc, #392]	; (11674 <_vfiprintf_r+0x21c>)
   114ea:	f7ff fb29 	bl	10b40 <memchr>
   114ee:	1c63      	adds	r3, r4, #1
   114f0:	469c      	mov	ip, r3
   114f2:	2800      	cmp	r0, #0
   114f4:	d135      	bne.n	11562 <_vfiprintf_r+0x10a>
   114f6:	6829      	ldr	r1, [r5, #0]
   114f8:	06cb      	lsls	r3, r1, #27
   114fa:	d504      	bpl.n	11506 <_vfiprintf_r+0xae>
   114fc:	2353      	movs	r3, #83	; 0x53
   114fe:	aa02      	add	r2, sp, #8
   11500:	3020      	adds	r0, #32
   11502:	189b      	adds	r3, r3, r2
   11504:	7018      	strb	r0, [r3, #0]
   11506:	070b      	lsls	r3, r1, #28
   11508:	d504      	bpl.n	11514 <_vfiprintf_r+0xbc>
   1150a:	2353      	movs	r3, #83	; 0x53
   1150c:	202b      	movs	r0, #43	; 0x2b
   1150e:	aa02      	add	r2, sp, #8
   11510:	189b      	adds	r3, r3, r2
   11512:	7018      	strb	r0, [r3, #0]
   11514:	7823      	ldrb	r3, [r4, #0]
   11516:	2b2a      	cmp	r3, #42	; 0x2a
   11518:	d02c      	beq.n	11574 <_vfiprintf_r+0x11c>
   1151a:	2000      	movs	r0, #0
   1151c:	210a      	movs	r1, #10
   1151e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11520:	7822      	ldrb	r2, [r4, #0]
   11522:	3a30      	subs	r2, #48	; 0x30
   11524:	2a09      	cmp	r2, #9
   11526:	d800      	bhi.n	1152a <_vfiprintf_r+0xd2>
   11528:	e06b      	b.n	11602 <_vfiprintf_r+0x1aa>
   1152a:	2800      	cmp	r0, #0
   1152c:	d02a      	beq.n	11584 <_vfiprintf_r+0x12c>
   1152e:	9309      	str	r3, [sp, #36]	; 0x24
   11530:	e028      	b.n	11584 <_vfiprintf_r+0x12c>
   11532:	4b51      	ldr	r3, [pc, #324]	; (11678 <_vfiprintf_r+0x220>)
   11534:	429f      	cmp	r7, r3
   11536:	d101      	bne.n	1153c <_vfiprintf_r+0xe4>
   11538:	68b7      	ldr	r7, [r6, #8]
   1153a:	e79e      	b.n	1147a <_vfiprintf_r+0x22>
   1153c:	4b4f      	ldr	r3, [pc, #316]	; (1167c <_vfiprintf_r+0x224>)
   1153e:	429f      	cmp	r7, r3
   11540:	d19b      	bne.n	1147a <_vfiprintf_r+0x22>
   11542:	68f7      	ldr	r7, [r6, #12]
   11544:	e799      	b.n	1147a <_vfiprintf_r+0x22>
   11546:	0039      	movs	r1, r7
   11548:	0030      	movs	r0, r6
   1154a:	f7fe fa11 	bl	f970 <__swsetup_r>
   1154e:	2800      	cmp	r0, #0
   11550:	d099      	beq.n	11486 <_vfiprintf_r+0x2e>
   11552:	2001      	movs	r0, #1
   11554:	4240      	negs	r0, r0
   11556:	b01f      	add	sp, #124	; 0x7c
   11558:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1155a:	2b25      	cmp	r3, #37	; 0x25
   1155c:	d09f      	beq.n	1149e <_vfiprintf_r+0x46>
   1155e:	3401      	adds	r4, #1
   11560:	e79a      	b.n	11498 <_vfiprintf_r+0x40>
   11562:	4b44      	ldr	r3, [pc, #272]	; (11674 <_vfiprintf_r+0x21c>)
   11564:	6829      	ldr	r1, [r5, #0]
   11566:	1ac0      	subs	r0, r0, r3
   11568:	2301      	movs	r3, #1
   1156a:	4083      	lsls	r3, r0
   1156c:	430b      	orrs	r3, r1
   1156e:	602b      	str	r3, [r5, #0]
   11570:	4664      	mov	r4, ip
   11572:	e7b7      	b.n	114e4 <_vfiprintf_r+0x8c>
   11574:	9b05      	ldr	r3, [sp, #20]
   11576:	1d18      	adds	r0, r3, #4
   11578:	681b      	ldr	r3, [r3, #0]
   1157a:	9005      	str	r0, [sp, #20]
   1157c:	2b00      	cmp	r3, #0
   1157e:	db3a      	blt.n	115f6 <_vfiprintf_r+0x19e>
   11580:	9309      	str	r3, [sp, #36]	; 0x24
   11582:	4664      	mov	r4, ip
   11584:	7823      	ldrb	r3, [r4, #0]
   11586:	2b2e      	cmp	r3, #46	; 0x2e
   11588:	d10b      	bne.n	115a2 <_vfiprintf_r+0x14a>
   1158a:	7863      	ldrb	r3, [r4, #1]
   1158c:	1c62      	adds	r2, r4, #1
   1158e:	2b2a      	cmp	r3, #42	; 0x2a
   11590:	d13f      	bne.n	11612 <_vfiprintf_r+0x1ba>
   11592:	9b05      	ldr	r3, [sp, #20]
   11594:	3402      	adds	r4, #2
   11596:	1d1a      	adds	r2, r3, #4
   11598:	681b      	ldr	r3, [r3, #0]
   1159a:	9205      	str	r2, [sp, #20]
   1159c:	2b00      	cmp	r3, #0
   1159e:	db35      	blt.n	1160c <_vfiprintf_r+0x1b4>
   115a0:	9307      	str	r3, [sp, #28]
   115a2:	7821      	ldrb	r1, [r4, #0]
   115a4:	2203      	movs	r2, #3
   115a6:	4836      	ldr	r0, [pc, #216]	; (11680 <_vfiprintf_r+0x228>)
   115a8:	f7ff faca 	bl	10b40 <memchr>
   115ac:	2800      	cmp	r0, #0
   115ae:	d007      	beq.n	115c0 <_vfiprintf_r+0x168>
   115b0:	4b33      	ldr	r3, [pc, #204]	; (11680 <_vfiprintf_r+0x228>)
   115b2:	682a      	ldr	r2, [r5, #0]
   115b4:	1ac0      	subs	r0, r0, r3
   115b6:	2340      	movs	r3, #64	; 0x40
   115b8:	4083      	lsls	r3, r0
   115ba:	4313      	orrs	r3, r2
   115bc:	602b      	str	r3, [r5, #0]
   115be:	3401      	adds	r4, #1
   115c0:	7821      	ldrb	r1, [r4, #0]
   115c2:	1c63      	adds	r3, r4, #1
   115c4:	2206      	movs	r2, #6
   115c6:	482f      	ldr	r0, [pc, #188]	; (11684 <_vfiprintf_r+0x22c>)
   115c8:	9302      	str	r3, [sp, #8]
   115ca:	7629      	strb	r1, [r5, #24]
   115cc:	f7ff fab8 	bl	10b40 <memchr>
   115d0:	2800      	cmp	r0, #0
   115d2:	d044      	beq.n	1165e <_vfiprintf_r+0x206>
   115d4:	4b2c      	ldr	r3, [pc, #176]	; (11688 <_vfiprintf_r+0x230>)
   115d6:	2b00      	cmp	r3, #0
   115d8:	d12f      	bne.n	1163a <_vfiprintf_r+0x1e2>
   115da:	6829      	ldr	r1, [r5, #0]
   115dc:	9b05      	ldr	r3, [sp, #20]
   115de:	2207      	movs	r2, #7
   115e0:	05c9      	lsls	r1, r1, #23
   115e2:	d528      	bpl.n	11636 <_vfiprintf_r+0x1de>
   115e4:	189b      	adds	r3, r3, r2
   115e6:	4393      	bics	r3, r2
   115e8:	3308      	adds	r3, #8
   115ea:	9305      	str	r3, [sp, #20]
   115ec:	696b      	ldr	r3, [r5, #20]
   115ee:	9a03      	ldr	r2, [sp, #12]
   115f0:	189b      	adds	r3, r3, r2
   115f2:	616b      	str	r3, [r5, #20]
   115f4:	e74f      	b.n	11496 <_vfiprintf_r+0x3e>
   115f6:	425b      	negs	r3, r3
   115f8:	60eb      	str	r3, [r5, #12]
   115fa:	2302      	movs	r3, #2
   115fc:	430b      	orrs	r3, r1
   115fe:	602b      	str	r3, [r5, #0]
   11600:	e7bf      	b.n	11582 <_vfiprintf_r+0x12a>
   11602:	434b      	muls	r3, r1
   11604:	3401      	adds	r4, #1
   11606:	189b      	adds	r3, r3, r2
   11608:	2001      	movs	r0, #1
   1160a:	e789      	b.n	11520 <_vfiprintf_r+0xc8>
   1160c:	2301      	movs	r3, #1
   1160e:	425b      	negs	r3, r3
   11610:	e7c6      	b.n	115a0 <_vfiprintf_r+0x148>
   11612:	2300      	movs	r3, #0
   11614:	0014      	movs	r4, r2
   11616:	200a      	movs	r0, #10
   11618:	001a      	movs	r2, r3
   1161a:	606b      	str	r3, [r5, #4]
   1161c:	7821      	ldrb	r1, [r4, #0]
   1161e:	3930      	subs	r1, #48	; 0x30
   11620:	2909      	cmp	r1, #9
   11622:	d903      	bls.n	1162c <_vfiprintf_r+0x1d4>
   11624:	2b00      	cmp	r3, #0
   11626:	d0bc      	beq.n	115a2 <_vfiprintf_r+0x14a>
   11628:	9207      	str	r2, [sp, #28]
   1162a:	e7ba      	b.n	115a2 <_vfiprintf_r+0x14a>
   1162c:	4342      	muls	r2, r0
   1162e:	3401      	adds	r4, #1
   11630:	1852      	adds	r2, r2, r1
   11632:	2301      	movs	r3, #1
   11634:	e7f2      	b.n	1161c <_vfiprintf_r+0x1c4>
   11636:	3307      	adds	r3, #7
   11638:	e7d5      	b.n	115e6 <_vfiprintf_r+0x18e>
   1163a:	ab05      	add	r3, sp, #20
   1163c:	9300      	str	r3, [sp, #0]
   1163e:	003a      	movs	r2, r7
   11640:	4b12      	ldr	r3, [pc, #72]	; (1168c <_vfiprintf_r+0x234>)
   11642:	0029      	movs	r1, r5
   11644:	0030      	movs	r0, r6
   11646:	f7fd fa8b 	bl	eb60 <_printf_float>
   1164a:	9003      	str	r0, [sp, #12]
   1164c:	9b03      	ldr	r3, [sp, #12]
   1164e:	3301      	adds	r3, #1
   11650:	d1cc      	bne.n	115ec <_vfiprintf_r+0x194>
   11652:	89bb      	ldrh	r3, [r7, #12]
   11654:	065b      	lsls	r3, r3, #25
   11656:	d500      	bpl.n	1165a <_vfiprintf_r+0x202>
   11658:	e77b      	b.n	11552 <_vfiprintf_r+0xfa>
   1165a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1165c:	e77b      	b.n	11556 <_vfiprintf_r+0xfe>
   1165e:	ab05      	add	r3, sp, #20
   11660:	9300      	str	r3, [sp, #0]
   11662:	003a      	movs	r2, r7
   11664:	4b09      	ldr	r3, [pc, #36]	; (1168c <_vfiprintf_r+0x234>)
   11666:	0029      	movs	r1, r5
   11668:	0030      	movs	r0, r6
   1166a:	f7fd fd33 	bl	f0d4 <_printf_i>
   1166e:	e7ec      	b.n	1164a <_vfiprintf_r+0x1f2>
   11670:	000167a0 	.word	0x000167a0
   11674:	000168dc 	.word	0x000168dc
   11678:	000167c0 	.word	0x000167c0
   1167c:	00016780 	.word	0x00016780
   11680:	000168e2 	.word	0x000168e2
   11684:	000168e6 	.word	0x000168e6
   11688:	0000eb61 	.word	0x0000eb61
   1168c:	00011433 	.word	0x00011433

00011690 <_putc_r>:
   11690:	b570      	push	{r4, r5, r6, lr}
   11692:	0006      	movs	r6, r0
   11694:	000d      	movs	r5, r1
   11696:	0014      	movs	r4, r2
   11698:	2800      	cmp	r0, #0
   1169a:	d004      	beq.n	116a6 <_putc_r+0x16>
   1169c:	6983      	ldr	r3, [r0, #24]
   1169e:	2b00      	cmp	r3, #0
   116a0:	d101      	bne.n	116a6 <_putc_r+0x16>
   116a2:	f7ff f93f 	bl	10924 <__sinit>
   116a6:	4b12      	ldr	r3, [pc, #72]	; (116f0 <_putc_r+0x60>)
   116a8:	429c      	cmp	r4, r3
   116aa:	d111      	bne.n	116d0 <_putc_r+0x40>
   116ac:	6874      	ldr	r4, [r6, #4]
   116ae:	68a3      	ldr	r3, [r4, #8]
   116b0:	3b01      	subs	r3, #1
   116b2:	60a3      	str	r3, [r4, #8]
   116b4:	2b00      	cmp	r3, #0
   116b6:	da05      	bge.n	116c4 <_putc_r+0x34>
   116b8:	69a2      	ldr	r2, [r4, #24]
   116ba:	4293      	cmp	r3, r2
   116bc:	db12      	blt.n	116e4 <_putc_r+0x54>
   116be:	b2eb      	uxtb	r3, r5
   116c0:	2b0a      	cmp	r3, #10
   116c2:	d00f      	beq.n	116e4 <_putc_r+0x54>
   116c4:	6823      	ldr	r3, [r4, #0]
   116c6:	b2e8      	uxtb	r0, r5
   116c8:	1c5a      	adds	r2, r3, #1
   116ca:	6022      	str	r2, [r4, #0]
   116cc:	701d      	strb	r5, [r3, #0]
   116ce:	bd70      	pop	{r4, r5, r6, pc}
   116d0:	4b08      	ldr	r3, [pc, #32]	; (116f4 <_putc_r+0x64>)
   116d2:	429c      	cmp	r4, r3
   116d4:	d101      	bne.n	116da <_putc_r+0x4a>
   116d6:	68b4      	ldr	r4, [r6, #8]
   116d8:	e7e9      	b.n	116ae <_putc_r+0x1e>
   116da:	4b07      	ldr	r3, [pc, #28]	; (116f8 <_putc_r+0x68>)
   116dc:	429c      	cmp	r4, r3
   116de:	d1e6      	bne.n	116ae <_putc_r+0x1e>
   116e0:	68f4      	ldr	r4, [r6, #12]
   116e2:	e7e4      	b.n	116ae <_putc_r+0x1e>
   116e4:	0022      	movs	r2, r4
   116e6:	0029      	movs	r1, r5
   116e8:	0030      	movs	r0, r6
   116ea:	f7fe f8df 	bl	f8ac <__swbuf_r>
   116ee:	e7ee      	b.n	116ce <_putc_r+0x3e>
   116f0:	000167a0 	.word	0x000167a0
   116f4:	000167c0 	.word	0x000167c0
   116f8:	00016780 	.word	0x00016780

000116fc <__sread>:
   116fc:	b570      	push	{r4, r5, r6, lr}
   116fe:	000c      	movs	r4, r1
   11700:	250e      	movs	r5, #14
   11702:	5f49      	ldrsh	r1, [r1, r5]
   11704:	f000 f8ca 	bl	1189c <_read_r>
   11708:	2800      	cmp	r0, #0
   1170a:	db03      	blt.n	11714 <__sread+0x18>
   1170c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1170e:	181b      	adds	r3, r3, r0
   11710:	6563      	str	r3, [r4, #84]	; 0x54
   11712:	bd70      	pop	{r4, r5, r6, pc}
   11714:	89a3      	ldrh	r3, [r4, #12]
   11716:	4a02      	ldr	r2, [pc, #8]	; (11720 <__sread+0x24>)
   11718:	4013      	ands	r3, r2
   1171a:	81a3      	strh	r3, [r4, #12]
   1171c:	e7f9      	b.n	11712 <__sread+0x16>
   1171e:	46c0      	nop			; (mov r8, r8)
   11720:	ffffefff 	.word	0xffffefff

00011724 <__swrite>:
   11724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11726:	001f      	movs	r7, r3
   11728:	898b      	ldrh	r3, [r1, #12]
   1172a:	0005      	movs	r5, r0
   1172c:	000c      	movs	r4, r1
   1172e:	0016      	movs	r6, r2
   11730:	05db      	lsls	r3, r3, #23
   11732:	d505      	bpl.n	11740 <__swrite+0x1c>
   11734:	230e      	movs	r3, #14
   11736:	5ec9      	ldrsh	r1, [r1, r3]
   11738:	2200      	movs	r2, #0
   1173a:	2302      	movs	r3, #2
   1173c:	f000 f874 	bl	11828 <_lseek_r>
   11740:	89a3      	ldrh	r3, [r4, #12]
   11742:	4a05      	ldr	r2, [pc, #20]	; (11758 <__swrite+0x34>)
   11744:	0028      	movs	r0, r5
   11746:	4013      	ands	r3, r2
   11748:	81a3      	strh	r3, [r4, #12]
   1174a:	0032      	movs	r2, r6
   1174c:	230e      	movs	r3, #14
   1174e:	5ee1      	ldrsh	r1, [r4, r3]
   11750:	003b      	movs	r3, r7
   11752:	f000 f81f 	bl	11794 <_write_r>
   11756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11758:	ffffefff 	.word	0xffffefff

0001175c <__sseek>:
   1175c:	b570      	push	{r4, r5, r6, lr}
   1175e:	000c      	movs	r4, r1
   11760:	250e      	movs	r5, #14
   11762:	5f49      	ldrsh	r1, [r1, r5]
   11764:	f000 f860 	bl	11828 <_lseek_r>
   11768:	89a3      	ldrh	r3, [r4, #12]
   1176a:	1c42      	adds	r2, r0, #1
   1176c:	d103      	bne.n	11776 <__sseek+0x1a>
   1176e:	4a05      	ldr	r2, [pc, #20]	; (11784 <__sseek+0x28>)
   11770:	4013      	ands	r3, r2
   11772:	81a3      	strh	r3, [r4, #12]
   11774:	bd70      	pop	{r4, r5, r6, pc}
   11776:	2280      	movs	r2, #128	; 0x80
   11778:	0152      	lsls	r2, r2, #5
   1177a:	4313      	orrs	r3, r2
   1177c:	81a3      	strh	r3, [r4, #12]
   1177e:	6560      	str	r0, [r4, #84]	; 0x54
   11780:	e7f8      	b.n	11774 <__sseek+0x18>
   11782:	46c0      	nop			; (mov r8, r8)
   11784:	ffffefff 	.word	0xffffefff

00011788 <__sclose>:
   11788:	b510      	push	{r4, lr}
   1178a:	230e      	movs	r3, #14
   1178c:	5ec9      	ldrsh	r1, [r1, r3]
   1178e:	f000 f815 	bl	117bc <_close_r>
   11792:	bd10      	pop	{r4, pc}

00011794 <_write_r>:
   11794:	b570      	push	{r4, r5, r6, lr}
   11796:	0005      	movs	r5, r0
   11798:	0008      	movs	r0, r1
   1179a:	0011      	movs	r1, r2
   1179c:	2200      	movs	r2, #0
   1179e:	4c06      	ldr	r4, [pc, #24]	; (117b8 <_write_r+0x24>)
   117a0:	6022      	str	r2, [r4, #0]
   117a2:	001a      	movs	r2, r3
   117a4:	f7f9 ff36 	bl	b614 <_write>
   117a8:	1c43      	adds	r3, r0, #1
   117aa:	d103      	bne.n	117b4 <_write_r+0x20>
   117ac:	6823      	ldr	r3, [r4, #0]
   117ae:	2b00      	cmp	r3, #0
   117b0:	d000      	beq.n	117b4 <_write_r+0x20>
   117b2:	602b      	str	r3, [r5, #0]
   117b4:	bd70      	pop	{r4, r5, r6, pc}
   117b6:	46c0      	nop			; (mov r8, r8)
   117b8:	200007f8 	.word	0x200007f8

000117bc <_close_r>:
   117bc:	2300      	movs	r3, #0
   117be:	b570      	push	{r4, r5, r6, lr}
   117c0:	4c06      	ldr	r4, [pc, #24]	; (117dc <_close_r+0x20>)
   117c2:	0005      	movs	r5, r0
   117c4:	0008      	movs	r0, r1
   117c6:	6023      	str	r3, [r4, #0]
   117c8:	f7fc feb4 	bl	e534 <_close>
   117cc:	1c43      	adds	r3, r0, #1
   117ce:	d103      	bne.n	117d8 <_close_r+0x1c>
   117d0:	6823      	ldr	r3, [r4, #0]
   117d2:	2b00      	cmp	r3, #0
   117d4:	d000      	beq.n	117d8 <_close_r+0x1c>
   117d6:	602b      	str	r3, [r5, #0]
   117d8:	bd70      	pop	{r4, r5, r6, pc}
   117da:	46c0      	nop			; (mov r8, r8)
   117dc:	200007f8 	.word	0x200007f8

000117e0 <_fstat_r>:
   117e0:	2300      	movs	r3, #0
   117e2:	b570      	push	{r4, r5, r6, lr}
   117e4:	4c06      	ldr	r4, [pc, #24]	; (11800 <_fstat_r+0x20>)
   117e6:	0005      	movs	r5, r0
   117e8:	0008      	movs	r0, r1
   117ea:	0011      	movs	r1, r2
   117ec:	6023      	str	r3, [r4, #0]
   117ee:	f7fc fea4 	bl	e53a <_fstat>
   117f2:	1c43      	adds	r3, r0, #1
   117f4:	d103      	bne.n	117fe <_fstat_r+0x1e>
   117f6:	6823      	ldr	r3, [r4, #0]
   117f8:	2b00      	cmp	r3, #0
   117fa:	d000      	beq.n	117fe <_fstat_r+0x1e>
   117fc:	602b      	str	r3, [r5, #0]
   117fe:	bd70      	pop	{r4, r5, r6, pc}
   11800:	200007f8 	.word	0x200007f8

00011804 <_isatty_r>:
   11804:	2300      	movs	r3, #0
   11806:	b570      	push	{r4, r5, r6, lr}
   11808:	4c06      	ldr	r4, [pc, #24]	; (11824 <_isatty_r+0x20>)
   1180a:	0005      	movs	r5, r0
   1180c:	0008      	movs	r0, r1
   1180e:	6023      	str	r3, [r4, #0]
   11810:	f7fc fe98 	bl	e544 <_isatty>
   11814:	1c43      	adds	r3, r0, #1
   11816:	d103      	bne.n	11820 <_isatty_r+0x1c>
   11818:	6823      	ldr	r3, [r4, #0]
   1181a:	2b00      	cmp	r3, #0
   1181c:	d000      	beq.n	11820 <_isatty_r+0x1c>
   1181e:	602b      	str	r3, [r5, #0]
   11820:	bd70      	pop	{r4, r5, r6, pc}
   11822:	46c0      	nop			; (mov r8, r8)
   11824:	200007f8 	.word	0x200007f8

00011828 <_lseek_r>:
   11828:	b570      	push	{r4, r5, r6, lr}
   1182a:	0005      	movs	r5, r0
   1182c:	0008      	movs	r0, r1
   1182e:	0011      	movs	r1, r2
   11830:	2200      	movs	r2, #0
   11832:	4c06      	ldr	r4, [pc, #24]	; (1184c <_lseek_r+0x24>)
   11834:	6022      	str	r2, [r4, #0]
   11836:	001a      	movs	r2, r3
   11838:	f7fc fe86 	bl	e548 <_lseek>
   1183c:	1c43      	adds	r3, r0, #1
   1183e:	d103      	bne.n	11848 <_lseek_r+0x20>
   11840:	6823      	ldr	r3, [r4, #0]
   11842:	2b00      	cmp	r3, #0
   11844:	d000      	beq.n	11848 <_lseek_r+0x20>
   11846:	602b      	str	r3, [r5, #0]
   11848:	bd70      	pop	{r4, r5, r6, pc}
   1184a:	46c0      	nop			; (mov r8, r8)
   1184c:	200007f8 	.word	0x200007f8

00011850 <_realloc_r>:
   11850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11852:	0007      	movs	r7, r0
   11854:	000d      	movs	r5, r1
   11856:	0016      	movs	r6, r2
   11858:	2900      	cmp	r1, #0
   1185a:	d105      	bne.n	11868 <_realloc_r+0x18>
   1185c:	0011      	movs	r1, r2
   1185e:	f7fd f885 	bl	e96c <_malloc_r>
   11862:	0004      	movs	r4, r0
   11864:	0020      	movs	r0, r4
   11866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11868:	2a00      	cmp	r2, #0
   1186a:	d103      	bne.n	11874 <_realloc_r+0x24>
   1186c:	f7fd f834 	bl	e8d8 <_free_r>
   11870:	0034      	movs	r4, r6
   11872:	e7f7      	b.n	11864 <_realloc_r+0x14>
   11874:	f000 f826 	bl	118c4 <_malloc_usable_size_r>
   11878:	002c      	movs	r4, r5
   1187a:	4286      	cmp	r6, r0
   1187c:	d9f2      	bls.n	11864 <_realloc_r+0x14>
   1187e:	0031      	movs	r1, r6
   11880:	0038      	movs	r0, r7
   11882:	f7fd f873 	bl	e96c <_malloc_r>
   11886:	1e04      	subs	r4, r0, #0
   11888:	d0ec      	beq.n	11864 <_realloc_r+0x14>
   1188a:	0029      	movs	r1, r5
   1188c:	0032      	movs	r2, r6
   1188e:	f7fc ffff 	bl	e890 <memcpy>
   11892:	0029      	movs	r1, r5
   11894:	0038      	movs	r0, r7
   11896:	f7fd f81f 	bl	e8d8 <_free_r>
   1189a:	e7e3      	b.n	11864 <_realloc_r+0x14>

0001189c <_read_r>:
   1189c:	b570      	push	{r4, r5, r6, lr}
   1189e:	0005      	movs	r5, r0
   118a0:	0008      	movs	r0, r1
   118a2:	0011      	movs	r1, r2
   118a4:	2200      	movs	r2, #0
   118a6:	4c06      	ldr	r4, [pc, #24]	; (118c0 <_read_r+0x24>)
   118a8:	6022      	str	r2, [r4, #0]
   118aa:	001a      	movs	r2, r3
   118ac:	f7f9 fe90 	bl	b5d0 <_read>
   118b0:	1c43      	adds	r3, r0, #1
   118b2:	d103      	bne.n	118bc <_read_r+0x20>
   118b4:	6823      	ldr	r3, [r4, #0]
   118b6:	2b00      	cmp	r3, #0
   118b8:	d000      	beq.n	118bc <_read_r+0x20>
   118ba:	602b      	str	r3, [r5, #0]
   118bc:	bd70      	pop	{r4, r5, r6, pc}
   118be:	46c0      	nop			; (mov r8, r8)
   118c0:	200007f8 	.word	0x200007f8

000118c4 <_malloc_usable_size_r>:
   118c4:	1f0b      	subs	r3, r1, #4
   118c6:	681b      	ldr	r3, [r3, #0]
   118c8:	1f18      	subs	r0, r3, #4
   118ca:	2b00      	cmp	r3, #0
   118cc:	da01      	bge.n	118d2 <_malloc_usable_size_r+0xe>
   118ce:	580b      	ldr	r3, [r1, r0]
   118d0:	18c0      	adds	r0, r0, r3
   118d2:	4770      	bx	lr

000118d4 <__gnu_thumb1_case_uqi>:
   118d4:	b402      	push	{r1}
   118d6:	4671      	mov	r1, lr
   118d8:	0849      	lsrs	r1, r1, #1
   118da:	0049      	lsls	r1, r1, #1
   118dc:	5c09      	ldrb	r1, [r1, r0]
   118de:	0049      	lsls	r1, r1, #1
   118e0:	448e      	add	lr, r1
   118e2:	bc02      	pop	{r1}
   118e4:	4770      	bx	lr
   118e6:	46c0      	nop			; (mov r8, r8)

000118e8 <__udivsi3>:
   118e8:	2200      	movs	r2, #0
   118ea:	0843      	lsrs	r3, r0, #1
   118ec:	428b      	cmp	r3, r1
   118ee:	d374      	bcc.n	119da <__udivsi3+0xf2>
   118f0:	0903      	lsrs	r3, r0, #4
   118f2:	428b      	cmp	r3, r1
   118f4:	d35f      	bcc.n	119b6 <__udivsi3+0xce>
   118f6:	0a03      	lsrs	r3, r0, #8
   118f8:	428b      	cmp	r3, r1
   118fa:	d344      	bcc.n	11986 <__udivsi3+0x9e>
   118fc:	0b03      	lsrs	r3, r0, #12
   118fe:	428b      	cmp	r3, r1
   11900:	d328      	bcc.n	11954 <__udivsi3+0x6c>
   11902:	0c03      	lsrs	r3, r0, #16
   11904:	428b      	cmp	r3, r1
   11906:	d30d      	bcc.n	11924 <__udivsi3+0x3c>
   11908:	22ff      	movs	r2, #255	; 0xff
   1190a:	0209      	lsls	r1, r1, #8
   1190c:	ba12      	rev	r2, r2
   1190e:	0c03      	lsrs	r3, r0, #16
   11910:	428b      	cmp	r3, r1
   11912:	d302      	bcc.n	1191a <__udivsi3+0x32>
   11914:	1212      	asrs	r2, r2, #8
   11916:	0209      	lsls	r1, r1, #8
   11918:	d065      	beq.n	119e6 <__udivsi3+0xfe>
   1191a:	0b03      	lsrs	r3, r0, #12
   1191c:	428b      	cmp	r3, r1
   1191e:	d319      	bcc.n	11954 <__udivsi3+0x6c>
   11920:	e000      	b.n	11924 <__udivsi3+0x3c>
   11922:	0a09      	lsrs	r1, r1, #8
   11924:	0bc3      	lsrs	r3, r0, #15
   11926:	428b      	cmp	r3, r1
   11928:	d301      	bcc.n	1192e <__udivsi3+0x46>
   1192a:	03cb      	lsls	r3, r1, #15
   1192c:	1ac0      	subs	r0, r0, r3
   1192e:	4152      	adcs	r2, r2
   11930:	0b83      	lsrs	r3, r0, #14
   11932:	428b      	cmp	r3, r1
   11934:	d301      	bcc.n	1193a <__udivsi3+0x52>
   11936:	038b      	lsls	r3, r1, #14
   11938:	1ac0      	subs	r0, r0, r3
   1193a:	4152      	adcs	r2, r2
   1193c:	0b43      	lsrs	r3, r0, #13
   1193e:	428b      	cmp	r3, r1
   11940:	d301      	bcc.n	11946 <__udivsi3+0x5e>
   11942:	034b      	lsls	r3, r1, #13
   11944:	1ac0      	subs	r0, r0, r3
   11946:	4152      	adcs	r2, r2
   11948:	0b03      	lsrs	r3, r0, #12
   1194a:	428b      	cmp	r3, r1
   1194c:	d301      	bcc.n	11952 <__udivsi3+0x6a>
   1194e:	030b      	lsls	r3, r1, #12
   11950:	1ac0      	subs	r0, r0, r3
   11952:	4152      	adcs	r2, r2
   11954:	0ac3      	lsrs	r3, r0, #11
   11956:	428b      	cmp	r3, r1
   11958:	d301      	bcc.n	1195e <__udivsi3+0x76>
   1195a:	02cb      	lsls	r3, r1, #11
   1195c:	1ac0      	subs	r0, r0, r3
   1195e:	4152      	adcs	r2, r2
   11960:	0a83      	lsrs	r3, r0, #10
   11962:	428b      	cmp	r3, r1
   11964:	d301      	bcc.n	1196a <__udivsi3+0x82>
   11966:	028b      	lsls	r3, r1, #10
   11968:	1ac0      	subs	r0, r0, r3
   1196a:	4152      	adcs	r2, r2
   1196c:	0a43      	lsrs	r3, r0, #9
   1196e:	428b      	cmp	r3, r1
   11970:	d301      	bcc.n	11976 <__udivsi3+0x8e>
   11972:	024b      	lsls	r3, r1, #9
   11974:	1ac0      	subs	r0, r0, r3
   11976:	4152      	adcs	r2, r2
   11978:	0a03      	lsrs	r3, r0, #8
   1197a:	428b      	cmp	r3, r1
   1197c:	d301      	bcc.n	11982 <__udivsi3+0x9a>
   1197e:	020b      	lsls	r3, r1, #8
   11980:	1ac0      	subs	r0, r0, r3
   11982:	4152      	adcs	r2, r2
   11984:	d2cd      	bcs.n	11922 <__udivsi3+0x3a>
   11986:	09c3      	lsrs	r3, r0, #7
   11988:	428b      	cmp	r3, r1
   1198a:	d301      	bcc.n	11990 <__udivsi3+0xa8>
   1198c:	01cb      	lsls	r3, r1, #7
   1198e:	1ac0      	subs	r0, r0, r3
   11990:	4152      	adcs	r2, r2
   11992:	0983      	lsrs	r3, r0, #6
   11994:	428b      	cmp	r3, r1
   11996:	d301      	bcc.n	1199c <__udivsi3+0xb4>
   11998:	018b      	lsls	r3, r1, #6
   1199a:	1ac0      	subs	r0, r0, r3
   1199c:	4152      	adcs	r2, r2
   1199e:	0943      	lsrs	r3, r0, #5
   119a0:	428b      	cmp	r3, r1
   119a2:	d301      	bcc.n	119a8 <__udivsi3+0xc0>
   119a4:	014b      	lsls	r3, r1, #5
   119a6:	1ac0      	subs	r0, r0, r3
   119a8:	4152      	adcs	r2, r2
   119aa:	0903      	lsrs	r3, r0, #4
   119ac:	428b      	cmp	r3, r1
   119ae:	d301      	bcc.n	119b4 <__udivsi3+0xcc>
   119b0:	010b      	lsls	r3, r1, #4
   119b2:	1ac0      	subs	r0, r0, r3
   119b4:	4152      	adcs	r2, r2
   119b6:	08c3      	lsrs	r3, r0, #3
   119b8:	428b      	cmp	r3, r1
   119ba:	d301      	bcc.n	119c0 <__udivsi3+0xd8>
   119bc:	00cb      	lsls	r3, r1, #3
   119be:	1ac0      	subs	r0, r0, r3
   119c0:	4152      	adcs	r2, r2
   119c2:	0883      	lsrs	r3, r0, #2
   119c4:	428b      	cmp	r3, r1
   119c6:	d301      	bcc.n	119cc <__udivsi3+0xe4>
   119c8:	008b      	lsls	r3, r1, #2
   119ca:	1ac0      	subs	r0, r0, r3
   119cc:	4152      	adcs	r2, r2
   119ce:	0843      	lsrs	r3, r0, #1
   119d0:	428b      	cmp	r3, r1
   119d2:	d301      	bcc.n	119d8 <__udivsi3+0xf0>
   119d4:	004b      	lsls	r3, r1, #1
   119d6:	1ac0      	subs	r0, r0, r3
   119d8:	4152      	adcs	r2, r2
   119da:	1a41      	subs	r1, r0, r1
   119dc:	d200      	bcs.n	119e0 <__udivsi3+0xf8>
   119de:	4601      	mov	r1, r0
   119e0:	4152      	adcs	r2, r2
   119e2:	4610      	mov	r0, r2
   119e4:	4770      	bx	lr
   119e6:	e7ff      	b.n	119e8 <__udivsi3+0x100>
   119e8:	b501      	push	{r0, lr}
   119ea:	2000      	movs	r0, #0
   119ec:	f000 f8f0 	bl	11bd0 <__aeabi_idiv0>
   119f0:	bd02      	pop	{r1, pc}
   119f2:	46c0      	nop			; (mov r8, r8)

000119f4 <__aeabi_uidivmod>:
   119f4:	2900      	cmp	r1, #0
   119f6:	d0f7      	beq.n	119e8 <__udivsi3+0x100>
   119f8:	e776      	b.n	118e8 <__udivsi3>
   119fa:	4770      	bx	lr

000119fc <__divsi3>:
   119fc:	4603      	mov	r3, r0
   119fe:	430b      	orrs	r3, r1
   11a00:	d47f      	bmi.n	11b02 <__divsi3+0x106>
   11a02:	2200      	movs	r2, #0
   11a04:	0843      	lsrs	r3, r0, #1
   11a06:	428b      	cmp	r3, r1
   11a08:	d374      	bcc.n	11af4 <__divsi3+0xf8>
   11a0a:	0903      	lsrs	r3, r0, #4
   11a0c:	428b      	cmp	r3, r1
   11a0e:	d35f      	bcc.n	11ad0 <__divsi3+0xd4>
   11a10:	0a03      	lsrs	r3, r0, #8
   11a12:	428b      	cmp	r3, r1
   11a14:	d344      	bcc.n	11aa0 <__divsi3+0xa4>
   11a16:	0b03      	lsrs	r3, r0, #12
   11a18:	428b      	cmp	r3, r1
   11a1a:	d328      	bcc.n	11a6e <__divsi3+0x72>
   11a1c:	0c03      	lsrs	r3, r0, #16
   11a1e:	428b      	cmp	r3, r1
   11a20:	d30d      	bcc.n	11a3e <__divsi3+0x42>
   11a22:	22ff      	movs	r2, #255	; 0xff
   11a24:	0209      	lsls	r1, r1, #8
   11a26:	ba12      	rev	r2, r2
   11a28:	0c03      	lsrs	r3, r0, #16
   11a2a:	428b      	cmp	r3, r1
   11a2c:	d302      	bcc.n	11a34 <__divsi3+0x38>
   11a2e:	1212      	asrs	r2, r2, #8
   11a30:	0209      	lsls	r1, r1, #8
   11a32:	d065      	beq.n	11b00 <__divsi3+0x104>
   11a34:	0b03      	lsrs	r3, r0, #12
   11a36:	428b      	cmp	r3, r1
   11a38:	d319      	bcc.n	11a6e <__divsi3+0x72>
   11a3a:	e000      	b.n	11a3e <__divsi3+0x42>
   11a3c:	0a09      	lsrs	r1, r1, #8
   11a3e:	0bc3      	lsrs	r3, r0, #15
   11a40:	428b      	cmp	r3, r1
   11a42:	d301      	bcc.n	11a48 <__divsi3+0x4c>
   11a44:	03cb      	lsls	r3, r1, #15
   11a46:	1ac0      	subs	r0, r0, r3
   11a48:	4152      	adcs	r2, r2
   11a4a:	0b83      	lsrs	r3, r0, #14
   11a4c:	428b      	cmp	r3, r1
   11a4e:	d301      	bcc.n	11a54 <__divsi3+0x58>
   11a50:	038b      	lsls	r3, r1, #14
   11a52:	1ac0      	subs	r0, r0, r3
   11a54:	4152      	adcs	r2, r2
   11a56:	0b43      	lsrs	r3, r0, #13
   11a58:	428b      	cmp	r3, r1
   11a5a:	d301      	bcc.n	11a60 <__divsi3+0x64>
   11a5c:	034b      	lsls	r3, r1, #13
   11a5e:	1ac0      	subs	r0, r0, r3
   11a60:	4152      	adcs	r2, r2
   11a62:	0b03      	lsrs	r3, r0, #12
   11a64:	428b      	cmp	r3, r1
   11a66:	d301      	bcc.n	11a6c <__divsi3+0x70>
   11a68:	030b      	lsls	r3, r1, #12
   11a6a:	1ac0      	subs	r0, r0, r3
   11a6c:	4152      	adcs	r2, r2
   11a6e:	0ac3      	lsrs	r3, r0, #11
   11a70:	428b      	cmp	r3, r1
   11a72:	d301      	bcc.n	11a78 <__divsi3+0x7c>
   11a74:	02cb      	lsls	r3, r1, #11
   11a76:	1ac0      	subs	r0, r0, r3
   11a78:	4152      	adcs	r2, r2
   11a7a:	0a83      	lsrs	r3, r0, #10
   11a7c:	428b      	cmp	r3, r1
   11a7e:	d301      	bcc.n	11a84 <__divsi3+0x88>
   11a80:	028b      	lsls	r3, r1, #10
   11a82:	1ac0      	subs	r0, r0, r3
   11a84:	4152      	adcs	r2, r2
   11a86:	0a43      	lsrs	r3, r0, #9
   11a88:	428b      	cmp	r3, r1
   11a8a:	d301      	bcc.n	11a90 <__divsi3+0x94>
   11a8c:	024b      	lsls	r3, r1, #9
   11a8e:	1ac0      	subs	r0, r0, r3
   11a90:	4152      	adcs	r2, r2
   11a92:	0a03      	lsrs	r3, r0, #8
   11a94:	428b      	cmp	r3, r1
   11a96:	d301      	bcc.n	11a9c <__divsi3+0xa0>
   11a98:	020b      	lsls	r3, r1, #8
   11a9a:	1ac0      	subs	r0, r0, r3
   11a9c:	4152      	adcs	r2, r2
   11a9e:	d2cd      	bcs.n	11a3c <__divsi3+0x40>
   11aa0:	09c3      	lsrs	r3, r0, #7
   11aa2:	428b      	cmp	r3, r1
   11aa4:	d301      	bcc.n	11aaa <__divsi3+0xae>
   11aa6:	01cb      	lsls	r3, r1, #7
   11aa8:	1ac0      	subs	r0, r0, r3
   11aaa:	4152      	adcs	r2, r2
   11aac:	0983      	lsrs	r3, r0, #6
   11aae:	428b      	cmp	r3, r1
   11ab0:	d301      	bcc.n	11ab6 <__divsi3+0xba>
   11ab2:	018b      	lsls	r3, r1, #6
   11ab4:	1ac0      	subs	r0, r0, r3
   11ab6:	4152      	adcs	r2, r2
   11ab8:	0943      	lsrs	r3, r0, #5
   11aba:	428b      	cmp	r3, r1
   11abc:	d301      	bcc.n	11ac2 <__divsi3+0xc6>
   11abe:	014b      	lsls	r3, r1, #5
   11ac0:	1ac0      	subs	r0, r0, r3
   11ac2:	4152      	adcs	r2, r2
   11ac4:	0903      	lsrs	r3, r0, #4
   11ac6:	428b      	cmp	r3, r1
   11ac8:	d301      	bcc.n	11ace <__divsi3+0xd2>
   11aca:	010b      	lsls	r3, r1, #4
   11acc:	1ac0      	subs	r0, r0, r3
   11ace:	4152      	adcs	r2, r2
   11ad0:	08c3      	lsrs	r3, r0, #3
   11ad2:	428b      	cmp	r3, r1
   11ad4:	d301      	bcc.n	11ada <__divsi3+0xde>
   11ad6:	00cb      	lsls	r3, r1, #3
   11ad8:	1ac0      	subs	r0, r0, r3
   11ada:	4152      	adcs	r2, r2
   11adc:	0883      	lsrs	r3, r0, #2
   11ade:	428b      	cmp	r3, r1
   11ae0:	d301      	bcc.n	11ae6 <__divsi3+0xea>
   11ae2:	008b      	lsls	r3, r1, #2
   11ae4:	1ac0      	subs	r0, r0, r3
   11ae6:	4152      	adcs	r2, r2
   11ae8:	0843      	lsrs	r3, r0, #1
   11aea:	428b      	cmp	r3, r1
   11aec:	d301      	bcc.n	11af2 <__divsi3+0xf6>
   11aee:	004b      	lsls	r3, r1, #1
   11af0:	1ac0      	subs	r0, r0, r3
   11af2:	4152      	adcs	r2, r2
   11af4:	1a41      	subs	r1, r0, r1
   11af6:	d200      	bcs.n	11afa <__divsi3+0xfe>
   11af8:	4601      	mov	r1, r0
   11afa:	4152      	adcs	r2, r2
   11afc:	4610      	mov	r0, r2
   11afe:	4770      	bx	lr
   11b00:	e05d      	b.n	11bbe <__divsi3+0x1c2>
   11b02:	0fca      	lsrs	r2, r1, #31
   11b04:	d000      	beq.n	11b08 <__divsi3+0x10c>
   11b06:	4249      	negs	r1, r1
   11b08:	1003      	asrs	r3, r0, #32
   11b0a:	d300      	bcc.n	11b0e <__divsi3+0x112>
   11b0c:	4240      	negs	r0, r0
   11b0e:	4053      	eors	r3, r2
   11b10:	2200      	movs	r2, #0
   11b12:	469c      	mov	ip, r3
   11b14:	0903      	lsrs	r3, r0, #4
   11b16:	428b      	cmp	r3, r1
   11b18:	d32d      	bcc.n	11b76 <__divsi3+0x17a>
   11b1a:	0a03      	lsrs	r3, r0, #8
   11b1c:	428b      	cmp	r3, r1
   11b1e:	d312      	bcc.n	11b46 <__divsi3+0x14a>
   11b20:	22fc      	movs	r2, #252	; 0xfc
   11b22:	0189      	lsls	r1, r1, #6
   11b24:	ba12      	rev	r2, r2
   11b26:	0a03      	lsrs	r3, r0, #8
   11b28:	428b      	cmp	r3, r1
   11b2a:	d30c      	bcc.n	11b46 <__divsi3+0x14a>
   11b2c:	0189      	lsls	r1, r1, #6
   11b2e:	1192      	asrs	r2, r2, #6
   11b30:	428b      	cmp	r3, r1
   11b32:	d308      	bcc.n	11b46 <__divsi3+0x14a>
   11b34:	0189      	lsls	r1, r1, #6
   11b36:	1192      	asrs	r2, r2, #6
   11b38:	428b      	cmp	r3, r1
   11b3a:	d304      	bcc.n	11b46 <__divsi3+0x14a>
   11b3c:	0189      	lsls	r1, r1, #6
   11b3e:	d03a      	beq.n	11bb6 <__divsi3+0x1ba>
   11b40:	1192      	asrs	r2, r2, #6
   11b42:	e000      	b.n	11b46 <__divsi3+0x14a>
   11b44:	0989      	lsrs	r1, r1, #6
   11b46:	09c3      	lsrs	r3, r0, #7
   11b48:	428b      	cmp	r3, r1
   11b4a:	d301      	bcc.n	11b50 <__divsi3+0x154>
   11b4c:	01cb      	lsls	r3, r1, #7
   11b4e:	1ac0      	subs	r0, r0, r3
   11b50:	4152      	adcs	r2, r2
   11b52:	0983      	lsrs	r3, r0, #6
   11b54:	428b      	cmp	r3, r1
   11b56:	d301      	bcc.n	11b5c <__divsi3+0x160>
   11b58:	018b      	lsls	r3, r1, #6
   11b5a:	1ac0      	subs	r0, r0, r3
   11b5c:	4152      	adcs	r2, r2
   11b5e:	0943      	lsrs	r3, r0, #5
   11b60:	428b      	cmp	r3, r1
   11b62:	d301      	bcc.n	11b68 <__divsi3+0x16c>
   11b64:	014b      	lsls	r3, r1, #5
   11b66:	1ac0      	subs	r0, r0, r3
   11b68:	4152      	adcs	r2, r2
   11b6a:	0903      	lsrs	r3, r0, #4
   11b6c:	428b      	cmp	r3, r1
   11b6e:	d301      	bcc.n	11b74 <__divsi3+0x178>
   11b70:	010b      	lsls	r3, r1, #4
   11b72:	1ac0      	subs	r0, r0, r3
   11b74:	4152      	adcs	r2, r2
   11b76:	08c3      	lsrs	r3, r0, #3
   11b78:	428b      	cmp	r3, r1
   11b7a:	d301      	bcc.n	11b80 <__divsi3+0x184>
   11b7c:	00cb      	lsls	r3, r1, #3
   11b7e:	1ac0      	subs	r0, r0, r3
   11b80:	4152      	adcs	r2, r2
   11b82:	0883      	lsrs	r3, r0, #2
   11b84:	428b      	cmp	r3, r1
   11b86:	d301      	bcc.n	11b8c <__divsi3+0x190>
   11b88:	008b      	lsls	r3, r1, #2
   11b8a:	1ac0      	subs	r0, r0, r3
   11b8c:	4152      	adcs	r2, r2
   11b8e:	d2d9      	bcs.n	11b44 <__divsi3+0x148>
   11b90:	0843      	lsrs	r3, r0, #1
   11b92:	428b      	cmp	r3, r1
   11b94:	d301      	bcc.n	11b9a <__divsi3+0x19e>
   11b96:	004b      	lsls	r3, r1, #1
   11b98:	1ac0      	subs	r0, r0, r3
   11b9a:	4152      	adcs	r2, r2
   11b9c:	1a41      	subs	r1, r0, r1
   11b9e:	d200      	bcs.n	11ba2 <__divsi3+0x1a6>
   11ba0:	4601      	mov	r1, r0
   11ba2:	4663      	mov	r3, ip
   11ba4:	4152      	adcs	r2, r2
   11ba6:	105b      	asrs	r3, r3, #1
   11ba8:	4610      	mov	r0, r2
   11baa:	d301      	bcc.n	11bb0 <__divsi3+0x1b4>
   11bac:	4240      	negs	r0, r0
   11bae:	2b00      	cmp	r3, #0
   11bb0:	d500      	bpl.n	11bb4 <__divsi3+0x1b8>
   11bb2:	4249      	negs	r1, r1
   11bb4:	4770      	bx	lr
   11bb6:	4663      	mov	r3, ip
   11bb8:	105b      	asrs	r3, r3, #1
   11bba:	d300      	bcc.n	11bbe <__divsi3+0x1c2>
   11bbc:	4240      	negs	r0, r0
   11bbe:	b501      	push	{r0, lr}
   11bc0:	2000      	movs	r0, #0
   11bc2:	f000 f805 	bl	11bd0 <__aeabi_idiv0>
   11bc6:	bd02      	pop	{r1, pc}

00011bc8 <__aeabi_idivmod>:
   11bc8:	2900      	cmp	r1, #0
   11bca:	d0f8      	beq.n	11bbe <__divsi3+0x1c2>
   11bcc:	e716      	b.n	119fc <__divsi3>
   11bce:	4770      	bx	lr

00011bd0 <__aeabi_idiv0>:
   11bd0:	4770      	bx	lr
   11bd2:	46c0      	nop			; (mov r8, r8)

00011bd4 <__aeabi_cdrcmple>:
   11bd4:	4684      	mov	ip, r0
   11bd6:	1c10      	adds	r0, r2, #0
   11bd8:	4662      	mov	r2, ip
   11bda:	468c      	mov	ip, r1
   11bdc:	1c19      	adds	r1, r3, #0
   11bde:	4663      	mov	r3, ip
   11be0:	e000      	b.n	11be4 <__aeabi_cdcmpeq>
   11be2:	46c0      	nop			; (mov r8, r8)

00011be4 <__aeabi_cdcmpeq>:
   11be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11be6:	f001 f9f7 	bl	12fd8 <__ledf2>
   11bea:	2800      	cmp	r0, #0
   11bec:	d401      	bmi.n	11bf2 <__aeabi_cdcmpeq+0xe>
   11bee:	2100      	movs	r1, #0
   11bf0:	42c8      	cmn	r0, r1
   11bf2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00011bf4 <__aeabi_dcmpeq>:
   11bf4:	b510      	push	{r4, lr}
   11bf6:	f001 f951 	bl	12e9c <__eqdf2>
   11bfa:	4240      	negs	r0, r0
   11bfc:	3001      	adds	r0, #1
   11bfe:	bd10      	pop	{r4, pc}

00011c00 <__aeabi_dcmplt>:
   11c00:	b510      	push	{r4, lr}
   11c02:	f001 f9e9 	bl	12fd8 <__ledf2>
   11c06:	2800      	cmp	r0, #0
   11c08:	db01      	blt.n	11c0e <__aeabi_dcmplt+0xe>
   11c0a:	2000      	movs	r0, #0
   11c0c:	bd10      	pop	{r4, pc}
   11c0e:	2001      	movs	r0, #1
   11c10:	bd10      	pop	{r4, pc}
   11c12:	46c0      	nop			; (mov r8, r8)

00011c14 <__aeabi_dcmple>:
   11c14:	b510      	push	{r4, lr}
   11c16:	f001 f9df 	bl	12fd8 <__ledf2>
   11c1a:	2800      	cmp	r0, #0
   11c1c:	dd01      	ble.n	11c22 <__aeabi_dcmple+0xe>
   11c1e:	2000      	movs	r0, #0
   11c20:	bd10      	pop	{r4, pc}
   11c22:	2001      	movs	r0, #1
   11c24:	bd10      	pop	{r4, pc}
   11c26:	46c0      	nop			; (mov r8, r8)

00011c28 <__aeabi_dcmpgt>:
   11c28:	b510      	push	{r4, lr}
   11c2a:	f001 f971 	bl	12f10 <__gedf2>
   11c2e:	2800      	cmp	r0, #0
   11c30:	dc01      	bgt.n	11c36 <__aeabi_dcmpgt+0xe>
   11c32:	2000      	movs	r0, #0
   11c34:	bd10      	pop	{r4, pc}
   11c36:	2001      	movs	r0, #1
   11c38:	bd10      	pop	{r4, pc}
   11c3a:	46c0      	nop			; (mov r8, r8)

00011c3c <__aeabi_dcmpge>:
   11c3c:	b510      	push	{r4, lr}
   11c3e:	f001 f967 	bl	12f10 <__gedf2>
   11c42:	2800      	cmp	r0, #0
   11c44:	da01      	bge.n	11c4a <__aeabi_dcmpge+0xe>
   11c46:	2000      	movs	r0, #0
   11c48:	bd10      	pop	{r4, pc}
   11c4a:	2001      	movs	r0, #1
   11c4c:	bd10      	pop	{r4, pc}
   11c4e:	46c0      	nop			; (mov r8, r8)

00011c50 <__aeabi_lmul>:
   11c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c52:	46ce      	mov	lr, r9
   11c54:	4647      	mov	r7, r8
   11c56:	0415      	lsls	r5, r2, #16
   11c58:	0c2d      	lsrs	r5, r5, #16
   11c5a:	002e      	movs	r6, r5
   11c5c:	b580      	push	{r7, lr}
   11c5e:	0407      	lsls	r7, r0, #16
   11c60:	0c14      	lsrs	r4, r2, #16
   11c62:	0c3f      	lsrs	r7, r7, #16
   11c64:	4699      	mov	r9, r3
   11c66:	0c03      	lsrs	r3, r0, #16
   11c68:	437e      	muls	r6, r7
   11c6a:	435d      	muls	r5, r3
   11c6c:	4367      	muls	r7, r4
   11c6e:	4363      	muls	r3, r4
   11c70:	197f      	adds	r7, r7, r5
   11c72:	0c34      	lsrs	r4, r6, #16
   11c74:	19e4      	adds	r4, r4, r7
   11c76:	469c      	mov	ip, r3
   11c78:	42a5      	cmp	r5, r4
   11c7a:	d903      	bls.n	11c84 <__aeabi_lmul+0x34>
   11c7c:	2380      	movs	r3, #128	; 0x80
   11c7e:	025b      	lsls	r3, r3, #9
   11c80:	4698      	mov	r8, r3
   11c82:	44c4      	add	ip, r8
   11c84:	464b      	mov	r3, r9
   11c86:	4351      	muls	r1, r2
   11c88:	4343      	muls	r3, r0
   11c8a:	0436      	lsls	r6, r6, #16
   11c8c:	0c36      	lsrs	r6, r6, #16
   11c8e:	0c25      	lsrs	r5, r4, #16
   11c90:	0424      	lsls	r4, r4, #16
   11c92:	4465      	add	r5, ip
   11c94:	19a4      	adds	r4, r4, r6
   11c96:	1859      	adds	r1, r3, r1
   11c98:	1949      	adds	r1, r1, r5
   11c9a:	0020      	movs	r0, r4
   11c9c:	bc0c      	pop	{r2, r3}
   11c9e:	4690      	mov	r8, r2
   11ca0:	4699      	mov	r9, r3
   11ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011ca4 <__aeabi_fdiv>:
   11ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ca6:	4657      	mov	r7, sl
   11ca8:	464e      	mov	r6, r9
   11caa:	46de      	mov	lr, fp
   11cac:	4645      	mov	r5, r8
   11cae:	b5e0      	push	{r5, r6, r7, lr}
   11cb0:	0244      	lsls	r4, r0, #9
   11cb2:	0043      	lsls	r3, r0, #1
   11cb4:	0fc6      	lsrs	r6, r0, #31
   11cb6:	b083      	sub	sp, #12
   11cb8:	1c0f      	adds	r7, r1, #0
   11cba:	0a64      	lsrs	r4, r4, #9
   11cbc:	0e1b      	lsrs	r3, r3, #24
   11cbe:	46b2      	mov	sl, r6
   11cc0:	d053      	beq.n	11d6a <__aeabi_fdiv+0xc6>
   11cc2:	2bff      	cmp	r3, #255	; 0xff
   11cc4:	d027      	beq.n	11d16 <__aeabi_fdiv+0x72>
   11cc6:	2280      	movs	r2, #128	; 0x80
   11cc8:	00e4      	lsls	r4, r4, #3
   11cca:	04d2      	lsls	r2, r2, #19
   11ccc:	4314      	orrs	r4, r2
   11cce:	227f      	movs	r2, #127	; 0x7f
   11cd0:	4252      	negs	r2, r2
   11cd2:	4690      	mov	r8, r2
   11cd4:	4498      	add	r8, r3
   11cd6:	2300      	movs	r3, #0
   11cd8:	4699      	mov	r9, r3
   11cda:	469b      	mov	fp, r3
   11cdc:	027d      	lsls	r5, r7, #9
   11cde:	0078      	lsls	r0, r7, #1
   11ce0:	0ffb      	lsrs	r3, r7, #31
   11ce2:	0a6d      	lsrs	r5, r5, #9
   11ce4:	0e00      	lsrs	r0, r0, #24
   11ce6:	9300      	str	r3, [sp, #0]
   11ce8:	d024      	beq.n	11d34 <__aeabi_fdiv+0x90>
   11cea:	28ff      	cmp	r0, #255	; 0xff
   11cec:	d046      	beq.n	11d7c <__aeabi_fdiv+0xd8>
   11cee:	2380      	movs	r3, #128	; 0x80
   11cf0:	2100      	movs	r1, #0
   11cf2:	00ed      	lsls	r5, r5, #3
   11cf4:	04db      	lsls	r3, r3, #19
   11cf6:	431d      	orrs	r5, r3
   11cf8:	387f      	subs	r0, #127	; 0x7f
   11cfa:	4647      	mov	r7, r8
   11cfc:	1a38      	subs	r0, r7, r0
   11cfe:	464f      	mov	r7, r9
   11d00:	430f      	orrs	r7, r1
   11d02:	00bf      	lsls	r7, r7, #2
   11d04:	46b9      	mov	r9, r7
   11d06:	0033      	movs	r3, r6
   11d08:	9a00      	ldr	r2, [sp, #0]
   11d0a:	4f87      	ldr	r7, [pc, #540]	; (11f28 <__aeabi_fdiv+0x284>)
   11d0c:	4053      	eors	r3, r2
   11d0e:	464a      	mov	r2, r9
   11d10:	58ba      	ldr	r2, [r7, r2]
   11d12:	9301      	str	r3, [sp, #4]
   11d14:	4697      	mov	pc, r2
   11d16:	2c00      	cmp	r4, #0
   11d18:	d14e      	bne.n	11db8 <__aeabi_fdiv+0x114>
   11d1a:	2308      	movs	r3, #8
   11d1c:	4699      	mov	r9, r3
   11d1e:	33f7      	adds	r3, #247	; 0xf7
   11d20:	4698      	mov	r8, r3
   11d22:	3bfd      	subs	r3, #253	; 0xfd
   11d24:	469b      	mov	fp, r3
   11d26:	027d      	lsls	r5, r7, #9
   11d28:	0078      	lsls	r0, r7, #1
   11d2a:	0ffb      	lsrs	r3, r7, #31
   11d2c:	0a6d      	lsrs	r5, r5, #9
   11d2e:	0e00      	lsrs	r0, r0, #24
   11d30:	9300      	str	r3, [sp, #0]
   11d32:	d1da      	bne.n	11cea <__aeabi_fdiv+0x46>
   11d34:	2d00      	cmp	r5, #0
   11d36:	d126      	bne.n	11d86 <__aeabi_fdiv+0xe2>
   11d38:	2000      	movs	r0, #0
   11d3a:	2101      	movs	r1, #1
   11d3c:	0033      	movs	r3, r6
   11d3e:	9a00      	ldr	r2, [sp, #0]
   11d40:	4f7a      	ldr	r7, [pc, #488]	; (11f2c <__aeabi_fdiv+0x288>)
   11d42:	4053      	eors	r3, r2
   11d44:	4642      	mov	r2, r8
   11d46:	1a10      	subs	r0, r2, r0
   11d48:	464a      	mov	r2, r9
   11d4a:	430a      	orrs	r2, r1
   11d4c:	0092      	lsls	r2, r2, #2
   11d4e:	58ba      	ldr	r2, [r7, r2]
   11d50:	001d      	movs	r5, r3
   11d52:	4697      	mov	pc, r2
   11d54:	9b00      	ldr	r3, [sp, #0]
   11d56:	002c      	movs	r4, r5
   11d58:	469a      	mov	sl, r3
   11d5a:	468b      	mov	fp, r1
   11d5c:	465b      	mov	r3, fp
   11d5e:	2b02      	cmp	r3, #2
   11d60:	d131      	bne.n	11dc6 <__aeabi_fdiv+0x122>
   11d62:	4653      	mov	r3, sl
   11d64:	21ff      	movs	r1, #255	; 0xff
   11d66:	2400      	movs	r4, #0
   11d68:	e038      	b.n	11ddc <__aeabi_fdiv+0x138>
   11d6a:	2c00      	cmp	r4, #0
   11d6c:	d117      	bne.n	11d9e <__aeabi_fdiv+0xfa>
   11d6e:	2304      	movs	r3, #4
   11d70:	4699      	mov	r9, r3
   11d72:	2300      	movs	r3, #0
   11d74:	4698      	mov	r8, r3
   11d76:	3301      	adds	r3, #1
   11d78:	469b      	mov	fp, r3
   11d7a:	e7af      	b.n	11cdc <__aeabi_fdiv+0x38>
   11d7c:	20ff      	movs	r0, #255	; 0xff
   11d7e:	2d00      	cmp	r5, #0
   11d80:	d10b      	bne.n	11d9a <__aeabi_fdiv+0xf6>
   11d82:	2102      	movs	r1, #2
   11d84:	e7da      	b.n	11d3c <__aeabi_fdiv+0x98>
   11d86:	0028      	movs	r0, r5
   11d88:	f002 f8c8 	bl	13f1c <__clzsi2>
   11d8c:	1f43      	subs	r3, r0, #5
   11d8e:	409d      	lsls	r5, r3
   11d90:	2376      	movs	r3, #118	; 0x76
   11d92:	425b      	negs	r3, r3
   11d94:	1a18      	subs	r0, r3, r0
   11d96:	2100      	movs	r1, #0
   11d98:	e7af      	b.n	11cfa <__aeabi_fdiv+0x56>
   11d9a:	2103      	movs	r1, #3
   11d9c:	e7ad      	b.n	11cfa <__aeabi_fdiv+0x56>
   11d9e:	0020      	movs	r0, r4
   11da0:	f002 f8bc 	bl	13f1c <__clzsi2>
   11da4:	1f43      	subs	r3, r0, #5
   11da6:	409c      	lsls	r4, r3
   11da8:	2376      	movs	r3, #118	; 0x76
   11daa:	425b      	negs	r3, r3
   11dac:	1a1b      	subs	r3, r3, r0
   11dae:	4698      	mov	r8, r3
   11db0:	2300      	movs	r3, #0
   11db2:	4699      	mov	r9, r3
   11db4:	469b      	mov	fp, r3
   11db6:	e791      	b.n	11cdc <__aeabi_fdiv+0x38>
   11db8:	230c      	movs	r3, #12
   11dba:	4699      	mov	r9, r3
   11dbc:	33f3      	adds	r3, #243	; 0xf3
   11dbe:	4698      	mov	r8, r3
   11dc0:	3bfc      	subs	r3, #252	; 0xfc
   11dc2:	469b      	mov	fp, r3
   11dc4:	e78a      	b.n	11cdc <__aeabi_fdiv+0x38>
   11dc6:	2b03      	cmp	r3, #3
   11dc8:	d100      	bne.n	11dcc <__aeabi_fdiv+0x128>
   11dca:	e0a5      	b.n	11f18 <__aeabi_fdiv+0x274>
   11dcc:	4655      	mov	r5, sl
   11dce:	2b01      	cmp	r3, #1
   11dd0:	d000      	beq.n	11dd4 <__aeabi_fdiv+0x130>
   11dd2:	e081      	b.n	11ed8 <__aeabi_fdiv+0x234>
   11dd4:	2301      	movs	r3, #1
   11dd6:	2100      	movs	r1, #0
   11dd8:	2400      	movs	r4, #0
   11dda:	402b      	ands	r3, r5
   11ddc:	0264      	lsls	r4, r4, #9
   11dde:	05c9      	lsls	r1, r1, #23
   11de0:	0a60      	lsrs	r0, r4, #9
   11de2:	07db      	lsls	r3, r3, #31
   11de4:	4308      	orrs	r0, r1
   11de6:	4318      	orrs	r0, r3
   11de8:	b003      	add	sp, #12
   11dea:	bc3c      	pop	{r2, r3, r4, r5}
   11dec:	4690      	mov	r8, r2
   11dee:	4699      	mov	r9, r3
   11df0:	46a2      	mov	sl, r4
   11df2:	46ab      	mov	fp, r5
   11df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11df6:	2480      	movs	r4, #128	; 0x80
   11df8:	2300      	movs	r3, #0
   11dfa:	03e4      	lsls	r4, r4, #15
   11dfc:	21ff      	movs	r1, #255	; 0xff
   11dfe:	e7ed      	b.n	11ddc <__aeabi_fdiv+0x138>
   11e00:	21ff      	movs	r1, #255	; 0xff
   11e02:	2400      	movs	r4, #0
   11e04:	e7ea      	b.n	11ddc <__aeabi_fdiv+0x138>
   11e06:	2301      	movs	r3, #1
   11e08:	1a59      	subs	r1, r3, r1
   11e0a:	291b      	cmp	r1, #27
   11e0c:	dd66      	ble.n	11edc <__aeabi_fdiv+0x238>
   11e0e:	9a01      	ldr	r2, [sp, #4]
   11e10:	4013      	ands	r3, r2
   11e12:	2100      	movs	r1, #0
   11e14:	2400      	movs	r4, #0
   11e16:	e7e1      	b.n	11ddc <__aeabi_fdiv+0x138>
   11e18:	2380      	movs	r3, #128	; 0x80
   11e1a:	03db      	lsls	r3, r3, #15
   11e1c:	421c      	tst	r4, r3
   11e1e:	d038      	beq.n	11e92 <__aeabi_fdiv+0x1ee>
   11e20:	421d      	tst	r5, r3
   11e22:	d051      	beq.n	11ec8 <__aeabi_fdiv+0x224>
   11e24:	431c      	orrs	r4, r3
   11e26:	0264      	lsls	r4, r4, #9
   11e28:	0a64      	lsrs	r4, r4, #9
   11e2a:	0033      	movs	r3, r6
   11e2c:	21ff      	movs	r1, #255	; 0xff
   11e2e:	e7d5      	b.n	11ddc <__aeabi_fdiv+0x138>
   11e30:	0163      	lsls	r3, r4, #5
   11e32:	016c      	lsls	r4, r5, #5
   11e34:	42a3      	cmp	r3, r4
   11e36:	d23b      	bcs.n	11eb0 <__aeabi_fdiv+0x20c>
   11e38:	261b      	movs	r6, #27
   11e3a:	2100      	movs	r1, #0
   11e3c:	3801      	subs	r0, #1
   11e3e:	2501      	movs	r5, #1
   11e40:	001f      	movs	r7, r3
   11e42:	0049      	lsls	r1, r1, #1
   11e44:	005b      	lsls	r3, r3, #1
   11e46:	2f00      	cmp	r7, #0
   11e48:	db01      	blt.n	11e4e <__aeabi_fdiv+0x1aa>
   11e4a:	429c      	cmp	r4, r3
   11e4c:	d801      	bhi.n	11e52 <__aeabi_fdiv+0x1ae>
   11e4e:	1b1b      	subs	r3, r3, r4
   11e50:	4329      	orrs	r1, r5
   11e52:	3e01      	subs	r6, #1
   11e54:	2e00      	cmp	r6, #0
   11e56:	d1f3      	bne.n	11e40 <__aeabi_fdiv+0x19c>
   11e58:	001c      	movs	r4, r3
   11e5a:	1e63      	subs	r3, r4, #1
   11e5c:	419c      	sbcs	r4, r3
   11e5e:	430c      	orrs	r4, r1
   11e60:	0001      	movs	r1, r0
   11e62:	317f      	adds	r1, #127	; 0x7f
   11e64:	2900      	cmp	r1, #0
   11e66:	ddce      	ble.n	11e06 <__aeabi_fdiv+0x162>
   11e68:	0763      	lsls	r3, r4, #29
   11e6a:	d004      	beq.n	11e76 <__aeabi_fdiv+0x1d2>
   11e6c:	230f      	movs	r3, #15
   11e6e:	4023      	ands	r3, r4
   11e70:	2b04      	cmp	r3, #4
   11e72:	d000      	beq.n	11e76 <__aeabi_fdiv+0x1d2>
   11e74:	3404      	adds	r4, #4
   11e76:	0123      	lsls	r3, r4, #4
   11e78:	d503      	bpl.n	11e82 <__aeabi_fdiv+0x1de>
   11e7a:	0001      	movs	r1, r0
   11e7c:	4b2c      	ldr	r3, [pc, #176]	; (11f30 <__aeabi_fdiv+0x28c>)
   11e7e:	3180      	adds	r1, #128	; 0x80
   11e80:	401c      	ands	r4, r3
   11e82:	29fe      	cmp	r1, #254	; 0xfe
   11e84:	dd0d      	ble.n	11ea2 <__aeabi_fdiv+0x1fe>
   11e86:	2301      	movs	r3, #1
   11e88:	9a01      	ldr	r2, [sp, #4]
   11e8a:	21ff      	movs	r1, #255	; 0xff
   11e8c:	4013      	ands	r3, r2
   11e8e:	2400      	movs	r4, #0
   11e90:	e7a4      	b.n	11ddc <__aeabi_fdiv+0x138>
   11e92:	2380      	movs	r3, #128	; 0x80
   11e94:	03db      	lsls	r3, r3, #15
   11e96:	431c      	orrs	r4, r3
   11e98:	0264      	lsls	r4, r4, #9
   11e9a:	0a64      	lsrs	r4, r4, #9
   11e9c:	0033      	movs	r3, r6
   11e9e:	21ff      	movs	r1, #255	; 0xff
   11ea0:	e79c      	b.n	11ddc <__aeabi_fdiv+0x138>
   11ea2:	2301      	movs	r3, #1
   11ea4:	9a01      	ldr	r2, [sp, #4]
   11ea6:	01a4      	lsls	r4, r4, #6
   11ea8:	0a64      	lsrs	r4, r4, #9
   11eaa:	b2c9      	uxtb	r1, r1
   11eac:	4013      	ands	r3, r2
   11eae:	e795      	b.n	11ddc <__aeabi_fdiv+0x138>
   11eb0:	1b1b      	subs	r3, r3, r4
   11eb2:	261a      	movs	r6, #26
   11eb4:	2101      	movs	r1, #1
   11eb6:	e7c2      	b.n	11e3e <__aeabi_fdiv+0x19a>
   11eb8:	9b00      	ldr	r3, [sp, #0]
   11eba:	468b      	mov	fp, r1
   11ebc:	469a      	mov	sl, r3
   11ebe:	2400      	movs	r4, #0
   11ec0:	e74c      	b.n	11d5c <__aeabi_fdiv+0xb8>
   11ec2:	0263      	lsls	r3, r4, #9
   11ec4:	d5e5      	bpl.n	11e92 <__aeabi_fdiv+0x1ee>
   11ec6:	2500      	movs	r5, #0
   11ec8:	2480      	movs	r4, #128	; 0x80
   11eca:	03e4      	lsls	r4, r4, #15
   11ecc:	432c      	orrs	r4, r5
   11ece:	0264      	lsls	r4, r4, #9
   11ed0:	0a64      	lsrs	r4, r4, #9
   11ed2:	9b00      	ldr	r3, [sp, #0]
   11ed4:	21ff      	movs	r1, #255	; 0xff
   11ed6:	e781      	b.n	11ddc <__aeabi_fdiv+0x138>
   11ed8:	9501      	str	r5, [sp, #4]
   11eda:	e7c1      	b.n	11e60 <__aeabi_fdiv+0x1bc>
   11edc:	0023      	movs	r3, r4
   11ede:	2020      	movs	r0, #32
   11ee0:	40cb      	lsrs	r3, r1
   11ee2:	1a41      	subs	r1, r0, r1
   11ee4:	408c      	lsls	r4, r1
   11ee6:	1e61      	subs	r1, r4, #1
   11ee8:	418c      	sbcs	r4, r1
   11eea:	431c      	orrs	r4, r3
   11eec:	0763      	lsls	r3, r4, #29
   11eee:	d004      	beq.n	11efa <__aeabi_fdiv+0x256>
   11ef0:	230f      	movs	r3, #15
   11ef2:	4023      	ands	r3, r4
   11ef4:	2b04      	cmp	r3, #4
   11ef6:	d000      	beq.n	11efa <__aeabi_fdiv+0x256>
   11ef8:	3404      	adds	r4, #4
   11efa:	0163      	lsls	r3, r4, #5
   11efc:	d505      	bpl.n	11f0a <__aeabi_fdiv+0x266>
   11efe:	2301      	movs	r3, #1
   11f00:	9a01      	ldr	r2, [sp, #4]
   11f02:	2101      	movs	r1, #1
   11f04:	4013      	ands	r3, r2
   11f06:	2400      	movs	r4, #0
   11f08:	e768      	b.n	11ddc <__aeabi_fdiv+0x138>
   11f0a:	2301      	movs	r3, #1
   11f0c:	9a01      	ldr	r2, [sp, #4]
   11f0e:	01a4      	lsls	r4, r4, #6
   11f10:	0a64      	lsrs	r4, r4, #9
   11f12:	4013      	ands	r3, r2
   11f14:	2100      	movs	r1, #0
   11f16:	e761      	b.n	11ddc <__aeabi_fdiv+0x138>
   11f18:	2380      	movs	r3, #128	; 0x80
   11f1a:	03db      	lsls	r3, r3, #15
   11f1c:	431c      	orrs	r4, r3
   11f1e:	0264      	lsls	r4, r4, #9
   11f20:	0a64      	lsrs	r4, r4, #9
   11f22:	4653      	mov	r3, sl
   11f24:	21ff      	movs	r1, #255	; 0xff
   11f26:	e759      	b.n	11ddc <__aeabi_fdiv+0x138>
   11f28:	000168f0 	.word	0x000168f0
   11f2c:	00016930 	.word	0x00016930
   11f30:	f7ffffff 	.word	0xf7ffffff

00011f34 <__aeabi_fmul>:
   11f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f36:	4657      	mov	r7, sl
   11f38:	464e      	mov	r6, r9
   11f3a:	4645      	mov	r5, r8
   11f3c:	46de      	mov	lr, fp
   11f3e:	b5e0      	push	{r5, r6, r7, lr}
   11f40:	0247      	lsls	r7, r0, #9
   11f42:	0046      	lsls	r6, r0, #1
   11f44:	4688      	mov	r8, r1
   11f46:	0a7f      	lsrs	r7, r7, #9
   11f48:	0e36      	lsrs	r6, r6, #24
   11f4a:	0fc4      	lsrs	r4, r0, #31
   11f4c:	2e00      	cmp	r6, #0
   11f4e:	d047      	beq.n	11fe0 <__aeabi_fmul+0xac>
   11f50:	2eff      	cmp	r6, #255	; 0xff
   11f52:	d024      	beq.n	11f9e <__aeabi_fmul+0x6a>
   11f54:	00fb      	lsls	r3, r7, #3
   11f56:	2780      	movs	r7, #128	; 0x80
   11f58:	04ff      	lsls	r7, r7, #19
   11f5a:	431f      	orrs	r7, r3
   11f5c:	2300      	movs	r3, #0
   11f5e:	4699      	mov	r9, r3
   11f60:	469a      	mov	sl, r3
   11f62:	3e7f      	subs	r6, #127	; 0x7f
   11f64:	4643      	mov	r3, r8
   11f66:	025d      	lsls	r5, r3, #9
   11f68:	0058      	lsls	r0, r3, #1
   11f6a:	0fdb      	lsrs	r3, r3, #31
   11f6c:	0a6d      	lsrs	r5, r5, #9
   11f6e:	0e00      	lsrs	r0, r0, #24
   11f70:	4698      	mov	r8, r3
   11f72:	d043      	beq.n	11ffc <__aeabi_fmul+0xc8>
   11f74:	28ff      	cmp	r0, #255	; 0xff
   11f76:	d03b      	beq.n	11ff0 <__aeabi_fmul+0xbc>
   11f78:	00eb      	lsls	r3, r5, #3
   11f7a:	2580      	movs	r5, #128	; 0x80
   11f7c:	2200      	movs	r2, #0
   11f7e:	04ed      	lsls	r5, r5, #19
   11f80:	431d      	orrs	r5, r3
   11f82:	387f      	subs	r0, #127	; 0x7f
   11f84:	1836      	adds	r6, r6, r0
   11f86:	1c73      	adds	r3, r6, #1
   11f88:	4641      	mov	r1, r8
   11f8a:	469b      	mov	fp, r3
   11f8c:	464b      	mov	r3, r9
   11f8e:	4061      	eors	r1, r4
   11f90:	4313      	orrs	r3, r2
   11f92:	2b0f      	cmp	r3, #15
   11f94:	d864      	bhi.n	12060 <__aeabi_fmul+0x12c>
   11f96:	4875      	ldr	r0, [pc, #468]	; (1216c <__aeabi_fmul+0x238>)
   11f98:	009b      	lsls	r3, r3, #2
   11f9a:	58c3      	ldr	r3, [r0, r3]
   11f9c:	469f      	mov	pc, r3
   11f9e:	2f00      	cmp	r7, #0
   11fa0:	d142      	bne.n	12028 <__aeabi_fmul+0xf4>
   11fa2:	2308      	movs	r3, #8
   11fa4:	4699      	mov	r9, r3
   11fa6:	3b06      	subs	r3, #6
   11fa8:	26ff      	movs	r6, #255	; 0xff
   11faa:	469a      	mov	sl, r3
   11fac:	e7da      	b.n	11f64 <__aeabi_fmul+0x30>
   11fae:	4641      	mov	r1, r8
   11fb0:	2a02      	cmp	r2, #2
   11fb2:	d028      	beq.n	12006 <__aeabi_fmul+0xd2>
   11fb4:	2a03      	cmp	r2, #3
   11fb6:	d100      	bne.n	11fba <__aeabi_fmul+0x86>
   11fb8:	e0ce      	b.n	12158 <__aeabi_fmul+0x224>
   11fba:	2a01      	cmp	r2, #1
   11fbc:	d000      	beq.n	11fc0 <__aeabi_fmul+0x8c>
   11fbe:	e0ac      	b.n	1211a <__aeabi_fmul+0x1e6>
   11fc0:	4011      	ands	r1, r2
   11fc2:	2000      	movs	r0, #0
   11fc4:	2200      	movs	r2, #0
   11fc6:	b2cc      	uxtb	r4, r1
   11fc8:	0240      	lsls	r0, r0, #9
   11fca:	05d2      	lsls	r2, r2, #23
   11fcc:	0a40      	lsrs	r0, r0, #9
   11fce:	07e4      	lsls	r4, r4, #31
   11fd0:	4310      	orrs	r0, r2
   11fd2:	4320      	orrs	r0, r4
   11fd4:	bc3c      	pop	{r2, r3, r4, r5}
   11fd6:	4690      	mov	r8, r2
   11fd8:	4699      	mov	r9, r3
   11fda:	46a2      	mov	sl, r4
   11fdc:	46ab      	mov	fp, r5
   11fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11fe0:	2f00      	cmp	r7, #0
   11fe2:	d115      	bne.n	12010 <__aeabi_fmul+0xdc>
   11fe4:	2304      	movs	r3, #4
   11fe6:	4699      	mov	r9, r3
   11fe8:	3b03      	subs	r3, #3
   11fea:	2600      	movs	r6, #0
   11fec:	469a      	mov	sl, r3
   11fee:	e7b9      	b.n	11f64 <__aeabi_fmul+0x30>
   11ff0:	20ff      	movs	r0, #255	; 0xff
   11ff2:	2202      	movs	r2, #2
   11ff4:	2d00      	cmp	r5, #0
   11ff6:	d0c5      	beq.n	11f84 <__aeabi_fmul+0x50>
   11ff8:	2203      	movs	r2, #3
   11ffa:	e7c3      	b.n	11f84 <__aeabi_fmul+0x50>
   11ffc:	2d00      	cmp	r5, #0
   11ffe:	d119      	bne.n	12034 <__aeabi_fmul+0x100>
   12000:	2000      	movs	r0, #0
   12002:	2201      	movs	r2, #1
   12004:	e7be      	b.n	11f84 <__aeabi_fmul+0x50>
   12006:	2401      	movs	r4, #1
   12008:	22ff      	movs	r2, #255	; 0xff
   1200a:	400c      	ands	r4, r1
   1200c:	2000      	movs	r0, #0
   1200e:	e7db      	b.n	11fc8 <__aeabi_fmul+0x94>
   12010:	0038      	movs	r0, r7
   12012:	f001 ff83 	bl	13f1c <__clzsi2>
   12016:	2676      	movs	r6, #118	; 0x76
   12018:	1f43      	subs	r3, r0, #5
   1201a:	409f      	lsls	r7, r3
   1201c:	2300      	movs	r3, #0
   1201e:	4276      	negs	r6, r6
   12020:	1a36      	subs	r6, r6, r0
   12022:	4699      	mov	r9, r3
   12024:	469a      	mov	sl, r3
   12026:	e79d      	b.n	11f64 <__aeabi_fmul+0x30>
   12028:	230c      	movs	r3, #12
   1202a:	4699      	mov	r9, r3
   1202c:	3b09      	subs	r3, #9
   1202e:	26ff      	movs	r6, #255	; 0xff
   12030:	469a      	mov	sl, r3
   12032:	e797      	b.n	11f64 <__aeabi_fmul+0x30>
   12034:	0028      	movs	r0, r5
   12036:	f001 ff71 	bl	13f1c <__clzsi2>
   1203a:	1f43      	subs	r3, r0, #5
   1203c:	409d      	lsls	r5, r3
   1203e:	2376      	movs	r3, #118	; 0x76
   12040:	425b      	negs	r3, r3
   12042:	1a18      	subs	r0, r3, r0
   12044:	2200      	movs	r2, #0
   12046:	e79d      	b.n	11f84 <__aeabi_fmul+0x50>
   12048:	2080      	movs	r0, #128	; 0x80
   1204a:	2400      	movs	r4, #0
   1204c:	03c0      	lsls	r0, r0, #15
   1204e:	22ff      	movs	r2, #255	; 0xff
   12050:	e7ba      	b.n	11fc8 <__aeabi_fmul+0x94>
   12052:	003d      	movs	r5, r7
   12054:	4652      	mov	r2, sl
   12056:	e7ab      	b.n	11fb0 <__aeabi_fmul+0x7c>
   12058:	003d      	movs	r5, r7
   1205a:	0021      	movs	r1, r4
   1205c:	4652      	mov	r2, sl
   1205e:	e7a7      	b.n	11fb0 <__aeabi_fmul+0x7c>
   12060:	0c3b      	lsrs	r3, r7, #16
   12062:	469c      	mov	ip, r3
   12064:	042a      	lsls	r2, r5, #16
   12066:	0c12      	lsrs	r2, r2, #16
   12068:	0c2b      	lsrs	r3, r5, #16
   1206a:	0014      	movs	r4, r2
   1206c:	4660      	mov	r0, ip
   1206e:	4665      	mov	r5, ip
   12070:	043f      	lsls	r7, r7, #16
   12072:	0c3f      	lsrs	r7, r7, #16
   12074:	437c      	muls	r4, r7
   12076:	4342      	muls	r2, r0
   12078:	435d      	muls	r5, r3
   1207a:	437b      	muls	r3, r7
   1207c:	0c27      	lsrs	r7, r4, #16
   1207e:	189b      	adds	r3, r3, r2
   12080:	18ff      	adds	r7, r7, r3
   12082:	42ba      	cmp	r2, r7
   12084:	d903      	bls.n	1208e <__aeabi_fmul+0x15a>
   12086:	2380      	movs	r3, #128	; 0x80
   12088:	025b      	lsls	r3, r3, #9
   1208a:	469c      	mov	ip, r3
   1208c:	4465      	add	r5, ip
   1208e:	0424      	lsls	r4, r4, #16
   12090:	043a      	lsls	r2, r7, #16
   12092:	0c24      	lsrs	r4, r4, #16
   12094:	1912      	adds	r2, r2, r4
   12096:	0193      	lsls	r3, r2, #6
   12098:	1e5c      	subs	r4, r3, #1
   1209a:	41a3      	sbcs	r3, r4
   1209c:	0c3f      	lsrs	r7, r7, #16
   1209e:	0e92      	lsrs	r2, r2, #26
   120a0:	197d      	adds	r5, r7, r5
   120a2:	431a      	orrs	r2, r3
   120a4:	01ad      	lsls	r5, r5, #6
   120a6:	4315      	orrs	r5, r2
   120a8:	012b      	lsls	r3, r5, #4
   120aa:	d504      	bpl.n	120b6 <__aeabi_fmul+0x182>
   120ac:	2301      	movs	r3, #1
   120ae:	465e      	mov	r6, fp
   120b0:	086a      	lsrs	r2, r5, #1
   120b2:	401d      	ands	r5, r3
   120b4:	4315      	orrs	r5, r2
   120b6:	0032      	movs	r2, r6
   120b8:	327f      	adds	r2, #127	; 0x7f
   120ba:	2a00      	cmp	r2, #0
   120bc:	dd25      	ble.n	1210a <__aeabi_fmul+0x1d6>
   120be:	076b      	lsls	r3, r5, #29
   120c0:	d004      	beq.n	120cc <__aeabi_fmul+0x198>
   120c2:	230f      	movs	r3, #15
   120c4:	402b      	ands	r3, r5
   120c6:	2b04      	cmp	r3, #4
   120c8:	d000      	beq.n	120cc <__aeabi_fmul+0x198>
   120ca:	3504      	adds	r5, #4
   120cc:	012b      	lsls	r3, r5, #4
   120ce:	d503      	bpl.n	120d8 <__aeabi_fmul+0x1a4>
   120d0:	0032      	movs	r2, r6
   120d2:	4b27      	ldr	r3, [pc, #156]	; (12170 <__aeabi_fmul+0x23c>)
   120d4:	3280      	adds	r2, #128	; 0x80
   120d6:	401d      	ands	r5, r3
   120d8:	2afe      	cmp	r2, #254	; 0xfe
   120da:	dc94      	bgt.n	12006 <__aeabi_fmul+0xd2>
   120dc:	2401      	movs	r4, #1
   120de:	01a8      	lsls	r0, r5, #6
   120e0:	0a40      	lsrs	r0, r0, #9
   120e2:	b2d2      	uxtb	r2, r2
   120e4:	400c      	ands	r4, r1
   120e6:	e76f      	b.n	11fc8 <__aeabi_fmul+0x94>
   120e8:	2080      	movs	r0, #128	; 0x80
   120ea:	03c0      	lsls	r0, r0, #15
   120ec:	4207      	tst	r7, r0
   120ee:	d007      	beq.n	12100 <__aeabi_fmul+0x1cc>
   120f0:	4205      	tst	r5, r0
   120f2:	d105      	bne.n	12100 <__aeabi_fmul+0x1cc>
   120f4:	4328      	orrs	r0, r5
   120f6:	0240      	lsls	r0, r0, #9
   120f8:	0a40      	lsrs	r0, r0, #9
   120fa:	4644      	mov	r4, r8
   120fc:	22ff      	movs	r2, #255	; 0xff
   120fe:	e763      	b.n	11fc8 <__aeabi_fmul+0x94>
   12100:	4338      	orrs	r0, r7
   12102:	0240      	lsls	r0, r0, #9
   12104:	0a40      	lsrs	r0, r0, #9
   12106:	22ff      	movs	r2, #255	; 0xff
   12108:	e75e      	b.n	11fc8 <__aeabi_fmul+0x94>
   1210a:	2401      	movs	r4, #1
   1210c:	1aa3      	subs	r3, r4, r2
   1210e:	2b1b      	cmp	r3, #27
   12110:	dd05      	ble.n	1211e <__aeabi_fmul+0x1ea>
   12112:	400c      	ands	r4, r1
   12114:	2200      	movs	r2, #0
   12116:	2000      	movs	r0, #0
   12118:	e756      	b.n	11fc8 <__aeabi_fmul+0x94>
   1211a:	465e      	mov	r6, fp
   1211c:	e7cb      	b.n	120b6 <__aeabi_fmul+0x182>
   1211e:	002a      	movs	r2, r5
   12120:	2020      	movs	r0, #32
   12122:	40da      	lsrs	r2, r3
   12124:	1ac3      	subs	r3, r0, r3
   12126:	409d      	lsls	r5, r3
   12128:	002b      	movs	r3, r5
   1212a:	1e5d      	subs	r5, r3, #1
   1212c:	41ab      	sbcs	r3, r5
   1212e:	4313      	orrs	r3, r2
   12130:	075a      	lsls	r2, r3, #29
   12132:	d004      	beq.n	1213e <__aeabi_fmul+0x20a>
   12134:	220f      	movs	r2, #15
   12136:	401a      	ands	r2, r3
   12138:	2a04      	cmp	r2, #4
   1213a:	d000      	beq.n	1213e <__aeabi_fmul+0x20a>
   1213c:	3304      	adds	r3, #4
   1213e:	015a      	lsls	r2, r3, #5
   12140:	d504      	bpl.n	1214c <__aeabi_fmul+0x218>
   12142:	2401      	movs	r4, #1
   12144:	2201      	movs	r2, #1
   12146:	400c      	ands	r4, r1
   12148:	2000      	movs	r0, #0
   1214a:	e73d      	b.n	11fc8 <__aeabi_fmul+0x94>
   1214c:	2401      	movs	r4, #1
   1214e:	019b      	lsls	r3, r3, #6
   12150:	0a58      	lsrs	r0, r3, #9
   12152:	400c      	ands	r4, r1
   12154:	2200      	movs	r2, #0
   12156:	e737      	b.n	11fc8 <__aeabi_fmul+0x94>
   12158:	2080      	movs	r0, #128	; 0x80
   1215a:	2401      	movs	r4, #1
   1215c:	03c0      	lsls	r0, r0, #15
   1215e:	4328      	orrs	r0, r5
   12160:	0240      	lsls	r0, r0, #9
   12162:	0a40      	lsrs	r0, r0, #9
   12164:	400c      	ands	r4, r1
   12166:	22ff      	movs	r2, #255	; 0xff
   12168:	e72e      	b.n	11fc8 <__aeabi_fmul+0x94>
   1216a:	46c0      	nop			; (mov r8, r8)
   1216c:	00016970 	.word	0x00016970
   12170:	f7ffffff 	.word	0xf7ffffff

00012174 <__aeabi_i2f>:
   12174:	b570      	push	{r4, r5, r6, lr}
   12176:	2800      	cmp	r0, #0
   12178:	d030      	beq.n	121dc <__aeabi_i2f+0x68>
   1217a:	17c3      	asrs	r3, r0, #31
   1217c:	18c4      	adds	r4, r0, r3
   1217e:	405c      	eors	r4, r3
   12180:	0fc5      	lsrs	r5, r0, #31
   12182:	0020      	movs	r0, r4
   12184:	f001 feca 	bl	13f1c <__clzsi2>
   12188:	239e      	movs	r3, #158	; 0x9e
   1218a:	1a1b      	subs	r3, r3, r0
   1218c:	2b96      	cmp	r3, #150	; 0x96
   1218e:	dc0d      	bgt.n	121ac <__aeabi_i2f+0x38>
   12190:	2296      	movs	r2, #150	; 0x96
   12192:	1ad2      	subs	r2, r2, r3
   12194:	4094      	lsls	r4, r2
   12196:	002a      	movs	r2, r5
   12198:	0264      	lsls	r4, r4, #9
   1219a:	0a64      	lsrs	r4, r4, #9
   1219c:	b2db      	uxtb	r3, r3
   1219e:	0264      	lsls	r4, r4, #9
   121a0:	05db      	lsls	r3, r3, #23
   121a2:	0a60      	lsrs	r0, r4, #9
   121a4:	07d2      	lsls	r2, r2, #31
   121a6:	4318      	orrs	r0, r3
   121a8:	4310      	orrs	r0, r2
   121aa:	bd70      	pop	{r4, r5, r6, pc}
   121ac:	2b99      	cmp	r3, #153	; 0x99
   121ae:	dc19      	bgt.n	121e4 <__aeabi_i2f+0x70>
   121b0:	2299      	movs	r2, #153	; 0x99
   121b2:	1ad2      	subs	r2, r2, r3
   121b4:	2a00      	cmp	r2, #0
   121b6:	dd29      	ble.n	1220c <__aeabi_i2f+0x98>
   121b8:	4094      	lsls	r4, r2
   121ba:	0022      	movs	r2, r4
   121bc:	4c14      	ldr	r4, [pc, #80]	; (12210 <__aeabi_i2f+0x9c>)
   121be:	4014      	ands	r4, r2
   121c0:	0751      	lsls	r1, r2, #29
   121c2:	d004      	beq.n	121ce <__aeabi_i2f+0x5a>
   121c4:	210f      	movs	r1, #15
   121c6:	400a      	ands	r2, r1
   121c8:	2a04      	cmp	r2, #4
   121ca:	d000      	beq.n	121ce <__aeabi_i2f+0x5a>
   121cc:	3404      	adds	r4, #4
   121ce:	0162      	lsls	r2, r4, #5
   121d0:	d413      	bmi.n	121fa <__aeabi_i2f+0x86>
   121d2:	01a4      	lsls	r4, r4, #6
   121d4:	0a64      	lsrs	r4, r4, #9
   121d6:	b2db      	uxtb	r3, r3
   121d8:	002a      	movs	r2, r5
   121da:	e7e0      	b.n	1219e <__aeabi_i2f+0x2a>
   121dc:	2200      	movs	r2, #0
   121de:	2300      	movs	r3, #0
   121e0:	2400      	movs	r4, #0
   121e2:	e7dc      	b.n	1219e <__aeabi_i2f+0x2a>
   121e4:	2205      	movs	r2, #5
   121e6:	0021      	movs	r1, r4
   121e8:	1a12      	subs	r2, r2, r0
   121ea:	40d1      	lsrs	r1, r2
   121ec:	22b9      	movs	r2, #185	; 0xb9
   121ee:	1ad2      	subs	r2, r2, r3
   121f0:	4094      	lsls	r4, r2
   121f2:	1e62      	subs	r2, r4, #1
   121f4:	4194      	sbcs	r4, r2
   121f6:	430c      	orrs	r4, r1
   121f8:	e7da      	b.n	121b0 <__aeabi_i2f+0x3c>
   121fa:	4b05      	ldr	r3, [pc, #20]	; (12210 <__aeabi_i2f+0x9c>)
   121fc:	002a      	movs	r2, r5
   121fe:	401c      	ands	r4, r3
   12200:	239f      	movs	r3, #159	; 0x9f
   12202:	01a4      	lsls	r4, r4, #6
   12204:	1a1b      	subs	r3, r3, r0
   12206:	0a64      	lsrs	r4, r4, #9
   12208:	b2db      	uxtb	r3, r3
   1220a:	e7c8      	b.n	1219e <__aeabi_i2f+0x2a>
   1220c:	0022      	movs	r2, r4
   1220e:	e7d5      	b.n	121bc <__aeabi_i2f+0x48>
   12210:	fbffffff 	.word	0xfbffffff

00012214 <__aeabi_dadd>:
   12214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12216:	4645      	mov	r5, r8
   12218:	46de      	mov	lr, fp
   1221a:	4657      	mov	r7, sl
   1221c:	464e      	mov	r6, r9
   1221e:	030c      	lsls	r4, r1, #12
   12220:	b5e0      	push	{r5, r6, r7, lr}
   12222:	004e      	lsls	r6, r1, #1
   12224:	0fc9      	lsrs	r1, r1, #31
   12226:	4688      	mov	r8, r1
   12228:	000d      	movs	r5, r1
   1222a:	0a61      	lsrs	r1, r4, #9
   1222c:	0f44      	lsrs	r4, r0, #29
   1222e:	430c      	orrs	r4, r1
   12230:	00c7      	lsls	r7, r0, #3
   12232:	0319      	lsls	r1, r3, #12
   12234:	0058      	lsls	r0, r3, #1
   12236:	0fdb      	lsrs	r3, r3, #31
   12238:	469b      	mov	fp, r3
   1223a:	0a4b      	lsrs	r3, r1, #9
   1223c:	0f51      	lsrs	r1, r2, #29
   1223e:	430b      	orrs	r3, r1
   12240:	0d76      	lsrs	r6, r6, #21
   12242:	0d40      	lsrs	r0, r0, #21
   12244:	0019      	movs	r1, r3
   12246:	00d2      	lsls	r2, r2, #3
   12248:	45d8      	cmp	r8, fp
   1224a:	d100      	bne.n	1224e <__aeabi_dadd+0x3a>
   1224c:	e0ae      	b.n	123ac <__aeabi_dadd+0x198>
   1224e:	1a35      	subs	r5, r6, r0
   12250:	2d00      	cmp	r5, #0
   12252:	dc00      	bgt.n	12256 <__aeabi_dadd+0x42>
   12254:	e0f6      	b.n	12444 <__aeabi_dadd+0x230>
   12256:	2800      	cmp	r0, #0
   12258:	d10f      	bne.n	1227a <__aeabi_dadd+0x66>
   1225a:	4313      	orrs	r3, r2
   1225c:	d100      	bne.n	12260 <__aeabi_dadd+0x4c>
   1225e:	e0db      	b.n	12418 <__aeabi_dadd+0x204>
   12260:	1e6b      	subs	r3, r5, #1
   12262:	2b00      	cmp	r3, #0
   12264:	d000      	beq.n	12268 <__aeabi_dadd+0x54>
   12266:	e137      	b.n	124d8 <__aeabi_dadd+0x2c4>
   12268:	1aba      	subs	r2, r7, r2
   1226a:	4297      	cmp	r7, r2
   1226c:	41bf      	sbcs	r7, r7
   1226e:	1a64      	subs	r4, r4, r1
   12270:	427f      	negs	r7, r7
   12272:	1be4      	subs	r4, r4, r7
   12274:	2601      	movs	r6, #1
   12276:	0017      	movs	r7, r2
   12278:	e024      	b.n	122c4 <__aeabi_dadd+0xb0>
   1227a:	4bc6      	ldr	r3, [pc, #792]	; (12594 <__aeabi_dadd+0x380>)
   1227c:	429e      	cmp	r6, r3
   1227e:	d04d      	beq.n	1231c <__aeabi_dadd+0x108>
   12280:	2380      	movs	r3, #128	; 0x80
   12282:	041b      	lsls	r3, r3, #16
   12284:	4319      	orrs	r1, r3
   12286:	2d38      	cmp	r5, #56	; 0x38
   12288:	dd00      	ble.n	1228c <__aeabi_dadd+0x78>
   1228a:	e107      	b.n	1249c <__aeabi_dadd+0x288>
   1228c:	2d1f      	cmp	r5, #31
   1228e:	dd00      	ble.n	12292 <__aeabi_dadd+0x7e>
   12290:	e138      	b.n	12504 <__aeabi_dadd+0x2f0>
   12292:	2020      	movs	r0, #32
   12294:	1b43      	subs	r3, r0, r5
   12296:	469a      	mov	sl, r3
   12298:	000b      	movs	r3, r1
   1229a:	4650      	mov	r0, sl
   1229c:	4083      	lsls	r3, r0
   1229e:	4699      	mov	r9, r3
   122a0:	0013      	movs	r3, r2
   122a2:	4648      	mov	r0, r9
   122a4:	40eb      	lsrs	r3, r5
   122a6:	4318      	orrs	r0, r3
   122a8:	0003      	movs	r3, r0
   122aa:	4650      	mov	r0, sl
   122ac:	4082      	lsls	r2, r0
   122ae:	1e50      	subs	r0, r2, #1
   122b0:	4182      	sbcs	r2, r0
   122b2:	40e9      	lsrs	r1, r5
   122b4:	431a      	orrs	r2, r3
   122b6:	1aba      	subs	r2, r7, r2
   122b8:	1a61      	subs	r1, r4, r1
   122ba:	4297      	cmp	r7, r2
   122bc:	41a4      	sbcs	r4, r4
   122be:	0017      	movs	r7, r2
   122c0:	4264      	negs	r4, r4
   122c2:	1b0c      	subs	r4, r1, r4
   122c4:	0223      	lsls	r3, r4, #8
   122c6:	d562      	bpl.n	1238e <__aeabi_dadd+0x17a>
   122c8:	0264      	lsls	r4, r4, #9
   122ca:	0a65      	lsrs	r5, r4, #9
   122cc:	2d00      	cmp	r5, #0
   122ce:	d100      	bne.n	122d2 <__aeabi_dadd+0xbe>
   122d0:	e0df      	b.n	12492 <__aeabi_dadd+0x27e>
   122d2:	0028      	movs	r0, r5
   122d4:	f001 fe22 	bl	13f1c <__clzsi2>
   122d8:	0003      	movs	r3, r0
   122da:	3b08      	subs	r3, #8
   122dc:	2b1f      	cmp	r3, #31
   122de:	dd00      	ble.n	122e2 <__aeabi_dadd+0xce>
   122e0:	e0d2      	b.n	12488 <__aeabi_dadd+0x274>
   122e2:	2220      	movs	r2, #32
   122e4:	003c      	movs	r4, r7
   122e6:	1ad2      	subs	r2, r2, r3
   122e8:	409d      	lsls	r5, r3
   122ea:	40d4      	lsrs	r4, r2
   122ec:	409f      	lsls	r7, r3
   122ee:	4325      	orrs	r5, r4
   122f0:	429e      	cmp	r6, r3
   122f2:	dd00      	ble.n	122f6 <__aeabi_dadd+0xe2>
   122f4:	e0c4      	b.n	12480 <__aeabi_dadd+0x26c>
   122f6:	1b9e      	subs	r6, r3, r6
   122f8:	1c73      	adds	r3, r6, #1
   122fa:	2b1f      	cmp	r3, #31
   122fc:	dd00      	ble.n	12300 <__aeabi_dadd+0xec>
   122fe:	e0f1      	b.n	124e4 <__aeabi_dadd+0x2d0>
   12300:	2220      	movs	r2, #32
   12302:	0038      	movs	r0, r7
   12304:	0029      	movs	r1, r5
   12306:	1ad2      	subs	r2, r2, r3
   12308:	40d8      	lsrs	r0, r3
   1230a:	4091      	lsls	r1, r2
   1230c:	4097      	lsls	r7, r2
   1230e:	002c      	movs	r4, r5
   12310:	4301      	orrs	r1, r0
   12312:	1e78      	subs	r0, r7, #1
   12314:	4187      	sbcs	r7, r0
   12316:	40dc      	lsrs	r4, r3
   12318:	2600      	movs	r6, #0
   1231a:	430f      	orrs	r7, r1
   1231c:	077b      	lsls	r3, r7, #29
   1231e:	d009      	beq.n	12334 <__aeabi_dadd+0x120>
   12320:	230f      	movs	r3, #15
   12322:	403b      	ands	r3, r7
   12324:	2b04      	cmp	r3, #4
   12326:	d005      	beq.n	12334 <__aeabi_dadd+0x120>
   12328:	1d3b      	adds	r3, r7, #4
   1232a:	42bb      	cmp	r3, r7
   1232c:	41bf      	sbcs	r7, r7
   1232e:	427f      	negs	r7, r7
   12330:	19e4      	adds	r4, r4, r7
   12332:	001f      	movs	r7, r3
   12334:	0223      	lsls	r3, r4, #8
   12336:	d52c      	bpl.n	12392 <__aeabi_dadd+0x17e>
   12338:	4b96      	ldr	r3, [pc, #600]	; (12594 <__aeabi_dadd+0x380>)
   1233a:	3601      	adds	r6, #1
   1233c:	429e      	cmp	r6, r3
   1233e:	d100      	bne.n	12342 <__aeabi_dadd+0x12e>
   12340:	e09a      	b.n	12478 <__aeabi_dadd+0x264>
   12342:	4645      	mov	r5, r8
   12344:	4b94      	ldr	r3, [pc, #592]	; (12598 <__aeabi_dadd+0x384>)
   12346:	08ff      	lsrs	r7, r7, #3
   12348:	401c      	ands	r4, r3
   1234a:	0760      	lsls	r0, r4, #29
   1234c:	0576      	lsls	r6, r6, #21
   1234e:	0264      	lsls	r4, r4, #9
   12350:	4307      	orrs	r7, r0
   12352:	0b24      	lsrs	r4, r4, #12
   12354:	0d76      	lsrs	r6, r6, #21
   12356:	2100      	movs	r1, #0
   12358:	0324      	lsls	r4, r4, #12
   1235a:	0b23      	lsrs	r3, r4, #12
   1235c:	0d0c      	lsrs	r4, r1, #20
   1235e:	4a8f      	ldr	r2, [pc, #572]	; (1259c <__aeabi_dadd+0x388>)
   12360:	0524      	lsls	r4, r4, #20
   12362:	431c      	orrs	r4, r3
   12364:	4014      	ands	r4, r2
   12366:	0533      	lsls	r3, r6, #20
   12368:	4323      	orrs	r3, r4
   1236a:	005b      	lsls	r3, r3, #1
   1236c:	07ed      	lsls	r5, r5, #31
   1236e:	085b      	lsrs	r3, r3, #1
   12370:	432b      	orrs	r3, r5
   12372:	0038      	movs	r0, r7
   12374:	0019      	movs	r1, r3
   12376:	bc3c      	pop	{r2, r3, r4, r5}
   12378:	4690      	mov	r8, r2
   1237a:	4699      	mov	r9, r3
   1237c:	46a2      	mov	sl, r4
   1237e:	46ab      	mov	fp, r5
   12380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12382:	4664      	mov	r4, ip
   12384:	4304      	orrs	r4, r0
   12386:	d100      	bne.n	1238a <__aeabi_dadd+0x176>
   12388:	e211      	b.n	127ae <__aeabi_dadd+0x59a>
   1238a:	0004      	movs	r4, r0
   1238c:	4667      	mov	r7, ip
   1238e:	077b      	lsls	r3, r7, #29
   12390:	d1c6      	bne.n	12320 <__aeabi_dadd+0x10c>
   12392:	4645      	mov	r5, r8
   12394:	0760      	lsls	r0, r4, #29
   12396:	08ff      	lsrs	r7, r7, #3
   12398:	4307      	orrs	r7, r0
   1239a:	08e4      	lsrs	r4, r4, #3
   1239c:	4b7d      	ldr	r3, [pc, #500]	; (12594 <__aeabi_dadd+0x380>)
   1239e:	429e      	cmp	r6, r3
   123a0:	d030      	beq.n	12404 <__aeabi_dadd+0x1f0>
   123a2:	0324      	lsls	r4, r4, #12
   123a4:	0576      	lsls	r6, r6, #21
   123a6:	0b24      	lsrs	r4, r4, #12
   123a8:	0d76      	lsrs	r6, r6, #21
   123aa:	e7d4      	b.n	12356 <__aeabi_dadd+0x142>
   123ac:	1a33      	subs	r3, r6, r0
   123ae:	469a      	mov	sl, r3
   123b0:	2b00      	cmp	r3, #0
   123b2:	dd78      	ble.n	124a6 <__aeabi_dadd+0x292>
   123b4:	2800      	cmp	r0, #0
   123b6:	d031      	beq.n	1241c <__aeabi_dadd+0x208>
   123b8:	4876      	ldr	r0, [pc, #472]	; (12594 <__aeabi_dadd+0x380>)
   123ba:	4286      	cmp	r6, r0
   123bc:	d0ae      	beq.n	1231c <__aeabi_dadd+0x108>
   123be:	2080      	movs	r0, #128	; 0x80
   123c0:	0400      	lsls	r0, r0, #16
   123c2:	4301      	orrs	r1, r0
   123c4:	4653      	mov	r3, sl
   123c6:	2b38      	cmp	r3, #56	; 0x38
   123c8:	dc00      	bgt.n	123cc <__aeabi_dadd+0x1b8>
   123ca:	e0e9      	b.n	125a0 <__aeabi_dadd+0x38c>
   123cc:	430a      	orrs	r2, r1
   123ce:	1e51      	subs	r1, r2, #1
   123d0:	418a      	sbcs	r2, r1
   123d2:	2100      	movs	r1, #0
   123d4:	19d2      	adds	r2, r2, r7
   123d6:	42ba      	cmp	r2, r7
   123d8:	41bf      	sbcs	r7, r7
   123da:	1909      	adds	r1, r1, r4
   123dc:	427c      	negs	r4, r7
   123de:	0017      	movs	r7, r2
   123e0:	190c      	adds	r4, r1, r4
   123e2:	0223      	lsls	r3, r4, #8
   123e4:	d5d3      	bpl.n	1238e <__aeabi_dadd+0x17a>
   123e6:	4b6b      	ldr	r3, [pc, #428]	; (12594 <__aeabi_dadd+0x380>)
   123e8:	3601      	adds	r6, #1
   123ea:	429e      	cmp	r6, r3
   123ec:	d100      	bne.n	123f0 <__aeabi_dadd+0x1dc>
   123ee:	e13a      	b.n	12666 <__aeabi_dadd+0x452>
   123f0:	2001      	movs	r0, #1
   123f2:	4b69      	ldr	r3, [pc, #420]	; (12598 <__aeabi_dadd+0x384>)
   123f4:	401c      	ands	r4, r3
   123f6:	087b      	lsrs	r3, r7, #1
   123f8:	4007      	ands	r7, r0
   123fa:	431f      	orrs	r7, r3
   123fc:	07e0      	lsls	r0, r4, #31
   123fe:	4307      	orrs	r7, r0
   12400:	0864      	lsrs	r4, r4, #1
   12402:	e78b      	b.n	1231c <__aeabi_dadd+0x108>
   12404:	0023      	movs	r3, r4
   12406:	433b      	orrs	r3, r7
   12408:	d100      	bne.n	1240c <__aeabi_dadd+0x1f8>
   1240a:	e1cb      	b.n	127a4 <__aeabi_dadd+0x590>
   1240c:	2280      	movs	r2, #128	; 0x80
   1240e:	0312      	lsls	r2, r2, #12
   12410:	4314      	orrs	r4, r2
   12412:	0324      	lsls	r4, r4, #12
   12414:	0b24      	lsrs	r4, r4, #12
   12416:	e79e      	b.n	12356 <__aeabi_dadd+0x142>
   12418:	002e      	movs	r6, r5
   1241a:	e77f      	b.n	1231c <__aeabi_dadd+0x108>
   1241c:	0008      	movs	r0, r1
   1241e:	4310      	orrs	r0, r2
   12420:	d100      	bne.n	12424 <__aeabi_dadd+0x210>
   12422:	e0b4      	b.n	1258e <__aeabi_dadd+0x37a>
   12424:	1e58      	subs	r0, r3, #1
   12426:	2800      	cmp	r0, #0
   12428:	d000      	beq.n	1242c <__aeabi_dadd+0x218>
   1242a:	e0de      	b.n	125ea <__aeabi_dadd+0x3d6>
   1242c:	18ba      	adds	r2, r7, r2
   1242e:	42ba      	cmp	r2, r7
   12430:	419b      	sbcs	r3, r3
   12432:	1864      	adds	r4, r4, r1
   12434:	425b      	negs	r3, r3
   12436:	18e4      	adds	r4, r4, r3
   12438:	0017      	movs	r7, r2
   1243a:	2601      	movs	r6, #1
   1243c:	0223      	lsls	r3, r4, #8
   1243e:	d5a6      	bpl.n	1238e <__aeabi_dadd+0x17a>
   12440:	2602      	movs	r6, #2
   12442:	e7d5      	b.n	123f0 <__aeabi_dadd+0x1dc>
   12444:	2d00      	cmp	r5, #0
   12446:	d16e      	bne.n	12526 <__aeabi_dadd+0x312>
   12448:	1c70      	adds	r0, r6, #1
   1244a:	0540      	lsls	r0, r0, #21
   1244c:	0d40      	lsrs	r0, r0, #21
   1244e:	2801      	cmp	r0, #1
   12450:	dc00      	bgt.n	12454 <__aeabi_dadd+0x240>
   12452:	e0f9      	b.n	12648 <__aeabi_dadd+0x434>
   12454:	1ab8      	subs	r0, r7, r2
   12456:	4684      	mov	ip, r0
   12458:	4287      	cmp	r7, r0
   1245a:	4180      	sbcs	r0, r0
   1245c:	1ae5      	subs	r5, r4, r3
   1245e:	4240      	negs	r0, r0
   12460:	1a2d      	subs	r5, r5, r0
   12462:	0228      	lsls	r0, r5, #8
   12464:	d400      	bmi.n	12468 <__aeabi_dadd+0x254>
   12466:	e089      	b.n	1257c <__aeabi_dadd+0x368>
   12468:	1bd7      	subs	r7, r2, r7
   1246a:	42ba      	cmp	r2, r7
   1246c:	4192      	sbcs	r2, r2
   1246e:	1b1c      	subs	r4, r3, r4
   12470:	4252      	negs	r2, r2
   12472:	1aa5      	subs	r5, r4, r2
   12474:	46d8      	mov	r8, fp
   12476:	e729      	b.n	122cc <__aeabi_dadd+0xb8>
   12478:	4645      	mov	r5, r8
   1247a:	2400      	movs	r4, #0
   1247c:	2700      	movs	r7, #0
   1247e:	e76a      	b.n	12356 <__aeabi_dadd+0x142>
   12480:	4c45      	ldr	r4, [pc, #276]	; (12598 <__aeabi_dadd+0x384>)
   12482:	1af6      	subs	r6, r6, r3
   12484:	402c      	ands	r4, r5
   12486:	e749      	b.n	1231c <__aeabi_dadd+0x108>
   12488:	003d      	movs	r5, r7
   1248a:	3828      	subs	r0, #40	; 0x28
   1248c:	4085      	lsls	r5, r0
   1248e:	2700      	movs	r7, #0
   12490:	e72e      	b.n	122f0 <__aeabi_dadd+0xdc>
   12492:	0038      	movs	r0, r7
   12494:	f001 fd42 	bl	13f1c <__clzsi2>
   12498:	3020      	adds	r0, #32
   1249a:	e71d      	b.n	122d8 <__aeabi_dadd+0xc4>
   1249c:	430a      	orrs	r2, r1
   1249e:	1e51      	subs	r1, r2, #1
   124a0:	418a      	sbcs	r2, r1
   124a2:	2100      	movs	r1, #0
   124a4:	e707      	b.n	122b6 <__aeabi_dadd+0xa2>
   124a6:	2b00      	cmp	r3, #0
   124a8:	d000      	beq.n	124ac <__aeabi_dadd+0x298>
   124aa:	e0f3      	b.n	12694 <__aeabi_dadd+0x480>
   124ac:	1c70      	adds	r0, r6, #1
   124ae:	0543      	lsls	r3, r0, #21
   124b0:	0d5b      	lsrs	r3, r3, #21
   124b2:	2b01      	cmp	r3, #1
   124b4:	dc00      	bgt.n	124b8 <__aeabi_dadd+0x2a4>
   124b6:	e0ad      	b.n	12614 <__aeabi_dadd+0x400>
   124b8:	4b36      	ldr	r3, [pc, #216]	; (12594 <__aeabi_dadd+0x380>)
   124ba:	4298      	cmp	r0, r3
   124bc:	d100      	bne.n	124c0 <__aeabi_dadd+0x2ac>
   124be:	e0d1      	b.n	12664 <__aeabi_dadd+0x450>
   124c0:	18ba      	adds	r2, r7, r2
   124c2:	42ba      	cmp	r2, r7
   124c4:	41bf      	sbcs	r7, r7
   124c6:	1864      	adds	r4, r4, r1
   124c8:	427f      	negs	r7, r7
   124ca:	19e4      	adds	r4, r4, r7
   124cc:	07e7      	lsls	r7, r4, #31
   124ce:	0852      	lsrs	r2, r2, #1
   124d0:	4317      	orrs	r7, r2
   124d2:	0864      	lsrs	r4, r4, #1
   124d4:	0006      	movs	r6, r0
   124d6:	e721      	b.n	1231c <__aeabi_dadd+0x108>
   124d8:	482e      	ldr	r0, [pc, #184]	; (12594 <__aeabi_dadd+0x380>)
   124da:	4285      	cmp	r5, r0
   124dc:	d100      	bne.n	124e0 <__aeabi_dadd+0x2cc>
   124de:	e093      	b.n	12608 <__aeabi_dadd+0x3f4>
   124e0:	001d      	movs	r5, r3
   124e2:	e6d0      	b.n	12286 <__aeabi_dadd+0x72>
   124e4:	0029      	movs	r1, r5
   124e6:	3e1f      	subs	r6, #31
   124e8:	40f1      	lsrs	r1, r6
   124ea:	2b20      	cmp	r3, #32
   124ec:	d100      	bne.n	124f0 <__aeabi_dadd+0x2dc>
   124ee:	e08d      	b.n	1260c <__aeabi_dadd+0x3f8>
   124f0:	2240      	movs	r2, #64	; 0x40
   124f2:	1ad3      	subs	r3, r2, r3
   124f4:	409d      	lsls	r5, r3
   124f6:	432f      	orrs	r7, r5
   124f8:	1e7d      	subs	r5, r7, #1
   124fa:	41af      	sbcs	r7, r5
   124fc:	2400      	movs	r4, #0
   124fe:	430f      	orrs	r7, r1
   12500:	2600      	movs	r6, #0
   12502:	e744      	b.n	1238e <__aeabi_dadd+0x17a>
   12504:	002b      	movs	r3, r5
   12506:	0008      	movs	r0, r1
   12508:	3b20      	subs	r3, #32
   1250a:	40d8      	lsrs	r0, r3
   1250c:	0003      	movs	r3, r0
   1250e:	2d20      	cmp	r5, #32
   12510:	d100      	bne.n	12514 <__aeabi_dadd+0x300>
   12512:	e07d      	b.n	12610 <__aeabi_dadd+0x3fc>
   12514:	2040      	movs	r0, #64	; 0x40
   12516:	1b45      	subs	r5, r0, r5
   12518:	40a9      	lsls	r1, r5
   1251a:	430a      	orrs	r2, r1
   1251c:	1e51      	subs	r1, r2, #1
   1251e:	418a      	sbcs	r2, r1
   12520:	2100      	movs	r1, #0
   12522:	431a      	orrs	r2, r3
   12524:	e6c7      	b.n	122b6 <__aeabi_dadd+0xa2>
   12526:	2e00      	cmp	r6, #0
   12528:	d050      	beq.n	125cc <__aeabi_dadd+0x3b8>
   1252a:	4e1a      	ldr	r6, [pc, #104]	; (12594 <__aeabi_dadd+0x380>)
   1252c:	42b0      	cmp	r0, r6
   1252e:	d057      	beq.n	125e0 <__aeabi_dadd+0x3cc>
   12530:	2680      	movs	r6, #128	; 0x80
   12532:	426b      	negs	r3, r5
   12534:	4699      	mov	r9, r3
   12536:	0436      	lsls	r6, r6, #16
   12538:	4334      	orrs	r4, r6
   1253a:	464b      	mov	r3, r9
   1253c:	2b38      	cmp	r3, #56	; 0x38
   1253e:	dd00      	ble.n	12542 <__aeabi_dadd+0x32e>
   12540:	e0d6      	b.n	126f0 <__aeabi_dadd+0x4dc>
   12542:	2b1f      	cmp	r3, #31
   12544:	dd00      	ble.n	12548 <__aeabi_dadd+0x334>
   12546:	e135      	b.n	127b4 <__aeabi_dadd+0x5a0>
   12548:	2620      	movs	r6, #32
   1254a:	1af5      	subs	r5, r6, r3
   1254c:	0026      	movs	r6, r4
   1254e:	40ae      	lsls	r6, r5
   12550:	46b2      	mov	sl, r6
   12552:	003e      	movs	r6, r7
   12554:	40de      	lsrs	r6, r3
   12556:	46ac      	mov	ip, r5
   12558:	0035      	movs	r5, r6
   1255a:	4656      	mov	r6, sl
   1255c:	432e      	orrs	r6, r5
   1255e:	4665      	mov	r5, ip
   12560:	40af      	lsls	r7, r5
   12562:	1e7d      	subs	r5, r7, #1
   12564:	41af      	sbcs	r7, r5
   12566:	40dc      	lsrs	r4, r3
   12568:	4337      	orrs	r7, r6
   1256a:	1bd7      	subs	r7, r2, r7
   1256c:	42ba      	cmp	r2, r7
   1256e:	4192      	sbcs	r2, r2
   12570:	1b0c      	subs	r4, r1, r4
   12572:	4252      	negs	r2, r2
   12574:	1aa4      	subs	r4, r4, r2
   12576:	0006      	movs	r6, r0
   12578:	46d8      	mov	r8, fp
   1257a:	e6a3      	b.n	122c4 <__aeabi_dadd+0xb0>
   1257c:	4664      	mov	r4, ip
   1257e:	4667      	mov	r7, ip
   12580:	432c      	orrs	r4, r5
   12582:	d000      	beq.n	12586 <__aeabi_dadd+0x372>
   12584:	e6a2      	b.n	122cc <__aeabi_dadd+0xb8>
   12586:	2500      	movs	r5, #0
   12588:	2600      	movs	r6, #0
   1258a:	2700      	movs	r7, #0
   1258c:	e706      	b.n	1239c <__aeabi_dadd+0x188>
   1258e:	001e      	movs	r6, r3
   12590:	e6c4      	b.n	1231c <__aeabi_dadd+0x108>
   12592:	46c0      	nop			; (mov r8, r8)
   12594:	000007ff 	.word	0x000007ff
   12598:	ff7fffff 	.word	0xff7fffff
   1259c:	800fffff 	.word	0x800fffff
   125a0:	2b1f      	cmp	r3, #31
   125a2:	dc63      	bgt.n	1266c <__aeabi_dadd+0x458>
   125a4:	2020      	movs	r0, #32
   125a6:	1ac3      	subs	r3, r0, r3
   125a8:	0008      	movs	r0, r1
   125aa:	4098      	lsls	r0, r3
   125ac:	469c      	mov	ip, r3
   125ae:	4683      	mov	fp, r0
   125b0:	4653      	mov	r3, sl
   125b2:	0010      	movs	r0, r2
   125b4:	40d8      	lsrs	r0, r3
   125b6:	0003      	movs	r3, r0
   125b8:	4658      	mov	r0, fp
   125ba:	4318      	orrs	r0, r3
   125bc:	4663      	mov	r3, ip
   125be:	409a      	lsls	r2, r3
   125c0:	1e53      	subs	r3, r2, #1
   125c2:	419a      	sbcs	r2, r3
   125c4:	4653      	mov	r3, sl
   125c6:	4302      	orrs	r2, r0
   125c8:	40d9      	lsrs	r1, r3
   125ca:	e703      	b.n	123d4 <__aeabi_dadd+0x1c0>
   125cc:	0026      	movs	r6, r4
   125ce:	433e      	orrs	r6, r7
   125d0:	d006      	beq.n	125e0 <__aeabi_dadd+0x3cc>
   125d2:	43eb      	mvns	r3, r5
   125d4:	4699      	mov	r9, r3
   125d6:	2b00      	cmp	r3, #0
   125d8:	d0c7      	beq.n	1256a <__aeabi_dadd+0x356>
   125da:	4e94      	ldr	r6, [pc, #592]	; (1282c <__aeabi_dadd+0x618>)
   125dc:	42b0      	cmp	r0, r6
   125de:	d1ac      	bne.n	1253a <__aeabi_dadd+0x326>
   125e0:	000c      	movs	r4, r1
   125e2:	0017      	movs	r7, r2
   125e4:	0006      	movs	r6, r0
   125e6:	46d8      	mov	r8, fp
   125e8:	e698      	b.n	1231c <__aeabi_dadd+0x108>
   125ea:	4b90      	ldr	r3, [pc, #576]	; (1282c <__aeabi_dadd+0x618>)
   125ec:	459a      	cmp	sl, r3
   125ee:	d00b      	beq.n	12608 <__aeabi_dadd+0x3f4>
   125f0:	4682      	mov	sl, r0
   125f2:	e6e7      	b.n	123c4 <__aeabi_dadd+0x1b0>
   125f4:	2800      	cmp	r0, #0
   125f6:	d000      	beq.n	125fa <__aeabi_dadd+0x3e6>
   125f8:	e09e      	b.n	12738 <__aeabi_dadd+0x524>
   125fa:	0018      	movs	r0, r3
   125fc:	4310      	orrs	r0, r2
   125fe:	d100      	bne.n	12602 <__aeabi_dadd+0x3ee>
   12600:	e0e9      	b.n	127d6 <__aeabi_dadd+0x5c2>
   12602:	001c      	movs	r4, r3
   12604:	0017      	movs	r7, r2
   12606:	46d8      	mov	r8, fp
   12608:	4e88      	ldr	r6, [pc, #544]	; (1282c <__aeabi_dadd+0x618>)
   1260a:	e687      	b.n	1231c <__aeabi_dadd+0x108>
   1260c:	2500      	movs	r5, #0
   1260e:	e772      	b.n	124f6 <__aeabi_dadd+0x2e2>
   12610:	2100      	movs	r1, #0
   12612:	e782      	b.n	1251a <__aeabi_dadd+0x306>
   12614:	0023      	movs	r3, r4
   12616:	433b      	orrs	r3, r7
   12618:	2e00      	cmp	r6, #0
   1261a:	d000      	beq.n	1261e <__aeabi_dadd+0x40a>
   1261c:	e0ab      	b.n	12776 <__aeabi_dadd+0x562>
   1261e:	2b00      	cmp	r3, #0
   12620:	d100      	bne.n	12624 <__aeabi_dadd+0x410>
   12622:	e0e7      	b.n	127f4 <__aeabi_dadd+0x5e0>
   12624:	000b      	movs	r3, r1
   12626:	4313      	orrs	r3, r2
   12628:	d100      	bne.n	1262c <__aeabi_dadd+0x418>
   1262a:	e677      	b.n	1231c <__aeabi_dadd+0x108>
   1262c:	18ba      	adds	r2, r7, r2
   1262e:	42ba      	cmp	r2, r7
   12630:	41bf      	sbcs	r7, r7
   12632:	1864      	adds	r4, r4, r1
   12634:	427f      	negs	r7, r7
   12636:	19e4      	adds	r4, r4, r7
   12638:	0223      	lsls	r3, r4, #8
   1263a:	d400      	bmi.n	1263e <__aeabi_dadd+0x42a>
   1263c:	e0f2      	b.n	12824 <__aeabi_dadd+0x610>
   1263e:	4b7c      	ldr	r3, [pc, #496]	; (12830 <__aeabi_dadd+0x61c>)
   12640:	0017      	movs	r7, r2
   12642:	401c      	ands	r4, r3
   12644:	0006      	movs	r6, r0
   12646:	e669      	b.n	1231c <__aeabi_dadd+0x108>
   12648:	0020      	movs	r0, r4
   1264a:	4338      	orrs	r0, r7
   1264c:	2e00      	cmp	r6, #0
   1264e:	d1d1      	bne.n	125f4 <__aeabi_dadd+0x3e0>
   12650:	2800      	cmp	r0, #0
   12652:	d15b      	bne.n	1270c <__aeabi_dadd+0x4f8>
   12654:	001c      	movs	r4, r3
   12656:	4314      	orrs	r4, r2
   12658:	d100      	bne.n	1265c <__aeabi_dadd+0x448>
   1265a:	e0a8      	b.n	127ae <__aeabi_dadd+0x59a>
   1265c:	001c      	movs	r4, r3
   1265e:	0017      	movs	r7, r2
   12660:	46d8      	mov	r8, fp
   12662:	e65b      	b.n	1231c <__aeabi_dadd+0x108>
   12664:	0006      	movs	r6, r0
   12666:	2400      	movs	r4, #0
   12668:	2700      	movs	r7, #0
   1266a:	e697      	b.n	1239c <__aeabi_dadd+0x188>
   1266c:	4650      	mov	r0, sl
   1266e:	000b      	movs	r3, r1
   12670:	3820      	subs	r0, #32
   12672:	40c3      	lsrs	r3, r0
   12674:	4699      	mov	r9, r3
   12676:	4653      	mov	r3, sl
   12678:	2b20      	cmp	r3, #32
   1267a:	d100      	bne.n	1267e <__aeabi_dadd+0x46a>
   1267c:	e095      	b.n	127aa <__aeabi_dadd+0x596>
   1267e:	2340      	movs	r3, #64	; 0x40
   12680:	4650      	mov	r0, sl
   12682:	1a1b      	subs	r3, r3, r0
   12684:	4099      	lsls	r1, r3
   12686:	430a      	orrs	r2, r1
   12688:	1e51      	subs	r1, r2, #1
   1268a:	418a      	sbcs	r2, r1
   1268c:	464b      	mov	r3, r9
   1268e:	2100      	movs	r1, #0
   12690:	431a      	orrs	r2, r3
   12692:	e69f      	b.n	123d4 <__aeabi_dadd+0x1c0>
   12694:	2e00      	cmp	r6, #0
   12696:	d130      	bne.n	126fa <__aeabi_dadd+0x4e6>
   12698:	0026      	movs	r6, r4
   1269a:	433e      	orrs	r6, r7
   1269c:	d067      	beq.n	1276e <__aeabi_dadd+0x55a>
   1269e:	43db      	mvns	r3, r3
   126a0:	469a      	mov	sl, r3
   126a2:	2b00      	cmp	r3, #0
   126a4:	d01c      	beq.n	126e0 <__aeabi_dadd+0x4cc>
   126a6:	4e61      	ldr	r6, [pc, #388]	; (1282c <__aeabi_dadd+0x618>)
   126a8:	42b0      	cmp	r0, r6
   126aa:	d060      	beq.n	1276e <__aeabi_dadd+0x55a>
   126ac:	4653      	mov	r3, sl
   126ae:	2b38      	cmp	r3, #56	; 0x38
   126b0:	dd00      	ble.n	126b4 <__aeabi_dadd+0x4a0>
   126b2:	e096      	b.n	127e2 <__aeabi_dadd+0x5ce>
   126b4:	2b1f      	cmp	r3, #31
   126b6:	dd00      	ble.n	126ba <__aeabi_dadd+0x4a6>
   126b8:	e09f      	b.n	127fa <__aeabi_dadd+0x5e6>
   126ba:	2620      	movs	r6, #32
   126bc:	1af3      	subs	r3, r6, r3
   126be:	0026      	movs	r6, r4
   126c0:	409e      	lsls	r6, r3
   126c2:	469c      	mov	ip, r3
   126c4:	46b3      	mov	fp, r6
   126c6:	4653      	mov	r3, sl
   126c8:	003e      	movs	r6, r7
   126ca:	40de      	lsrs	r6, r3
   126cc:	0033      	movs	r3, r6
   126ce:	465e      	mov	r6, fp
   126d0:	431e      	orrs	r6, r3
   126d2:	4663      	mov	r3, ip
   126d4:	409f      	lsls	r7, r3
   126d6:	1e7b      	subs	r3, r7, #1
   126d8:	419f      	sbcs	r7, r3
   126da:	4653      	mov	r3, sl
   126dc:	40dc      	lsrs	r4, r3
   126de:	4337      	orrs	r7, r6
   126e0:	18bf      	adds	r7, r7, r2
   126e2:	4297      	cmp	r7, r2
   126e4:	4192      	sbcs	r2, r2
   126e6:	1864      	adds	r4, r4, r1
   126e8:	4252      	negs	r2, r2
   126ea:	18a4      	adds	r4, r4, r2
   126ec:	0006      	movs	r6, r0
   126ee:	e678      	b.n	123e2 <__aeabi_dadd+0x1ce>
   126f0:	4327      	orrs	r7, r4
   126f2:	1e7c      	subs	r4, r7, #1
   126f4:	41a7      	sbcs	r7, r4
   126f6:	2400      	movs	r4, #0
   126f8:	e737      	b.n	1256a <__aeabi_dadd+0x356>
   126fa:	4e4c      	ldr	r6, [pc, #304]	; (1282c <__aeabi_dadd+0x618>)
   126fc:	42b0      	cmp	r0, r6
   126fe:	d036      	beq.n	1276e <__aeabi_dadd+0x55a>
   12700:	2680      	movs	r6, #128	; 0x80
   12702:	425b      	negs	r3, r3
   12704:	0436      	lsls	r6, r6, #16
   12706:	469a      	mov	sl, r3
   12708:	4334      	orrs	r4, r6
   1270a:	e7cf      	b.n	126ac <__aeabi_dadd+0x498>
   1270c:	0018      	movs	r0, r3
   1270e:	4310      	orrs	r0, r2
   12710:	d100      	bne.n	12714 <__aeabi_dadd+0x500>
   12712:	e603      	b.n	1231c <__aeabi_dadd+0x108>
   12714:	1ab8      	subs	r0, r7, r2
   12716:	4684      	mov	ip, r0
   12718:	4567      	cmp	r7, ip
   1271a:	41ad      	sbcs	r5, r5
   1271c:	1ae0      	subs	r0, r4, r3
   1271e:	426d      	negs	r5, r5
   12720:	1b40      	subs	r0, r0, r5
   12722:	0205      	lsls	r5, r0, #8
   12724:	d400      	bmi.n	12728 <__aeabi_dadd+0x514>
   12726:	e62c      	b.n	12382 <__aeabi_dadd+0x16e>
   12728:	1bd7      	subs	r7, r2, r7
   1272a:	42ba      	cmp	r2, r7
   1272c:	4192      	sbcs	r2, r2
   1272e:	1b1c      	subs	r4, r3, r4
   12730:	4252      	negs	r2, r2
   12732:	1aa4      	subs	r4, r4, r2
   12734:	46d8      	mov	r8, fp
   12736:	e5f1      	b.n	1231c <__aeabi_dadd+0x108>
   12738:	0018      	movs	r0, r3
   1273a:	4310      	orrs	r0, r2
   1273c:	d100      	bne.n	12740 <__aeabi_dadd+0x52c>
   1273e:	e763      	b.n	12608 <__aeabi_dadd+0x3f4>
   12740:	08f8      	lsrs	r0, r7, #3
   12742:	0767      	lsls	r7, r4, #29
   12744:	4307      	orrs	r7, r0
   12746:	2080      	movs	r0, #128	; 0x80
   12748:	08e4      	lsrs	r4, r4, #3
   1274a:	0300      	lsls	r0, r0, #12
   1274c:	4204      	tst	r4, r0
   1274e:	d008      	beq.n	12762 <__aeabi_dadd+0x54e>
   12750:	08dd      	lsrs	r5, r3, #3
   12752:	4205      	tst	r5, r0
   12754:	d105      	bne.n	12762 <__aeabi_dadd+0x54e>
   12756:	08d2      	lsrs	r2, r2, #3
   12758:	0759      	lsls	r1, r3, #29
   1275a:	4311      	orrs	r1, r2
   1275c:	000f      	movs	r7, r1
   1275e:	002c      	movs	r4, r5
   12760:	46d8      	mov	r8, fp
   12762:	0f7b      	lsrs	r3, r7, #29
   12764:	00e4      	lsls	r4, r4, #3
   12766:	431c      	orrs	r4, r3
   12768:	00ff      	lsls	r7, r7, #3
   1276a:	4e30      	ldr	r6, [pc, #192]	; (1282c <__aeabi_dadd+0x618>)
   1276c:	e5d6      	b.n	1231c <__aeabi_dadd+0x108>
   1276e:	000c      	movs	r4, r1
   12770:	0017      	movs	r7, r2
   12772:	0006      	movs	r6, r0
   12774:	e5d2      	b.n	1231c <__aeabi_dadd+0x108>
   12776:	2b00      	cmp	r3, #0
   12778:	d038      	beq.n	127ec <__aeabi_dadd+0x5d8>
   1277a:	000b      	movs	r3, r1
   1277c:	4313      	orrs	r3, r2
   1277e:	d100      	bne.n	12782 <__aeabi_dadd+0x56e>
   12780:	e742      	b.n	12608 <__aeabi_dadd+0x3f4>
   12782:	08f8      	lsrs	r0, r7, #3
   12784:	0767      	lsls	r7, r4, #29
   12786:	4307      	orrs	r7, r0
   12788:	2080      	movs	r0, #128	; 0x80
   1278a:	08e4      	lsrs	r4, r4, #3
   1278c:	0300      	lsls	r0, r0, #12
   1278e:	4204      	tst	r4, r0
   12790:	d0e7      	beq.n	12762 <__aeabi_dadd+0x54e>
   12792:	08cb      	lsrs	r3, r1, #3
   12794:	4203      	tst	r3, r0
   12796:	d1e4      	bne.n	12762 <__aeabi_dadd+0x54e>
   12798:	08d2      	lsrs	r2, r2, #3
   1279a:	0749      	lsls	r1, r1, #29
   1279c:	4311      	orrs	r1, r2
   1279e:	000f      	movs	r7, r1
   127a0:	001c      	movs	r4, r3
   127a2:	e7de      	b.n	12762 <__aeabi_dadd+0x54e>
   127a4:	2700      	movs	r7, #0
   127a6:	2400      	movs	r4, #0
   127a8:	e5d5      	b.n	12356 <__aeabi_dadd+0x142>
   127aa:	2100      	movs	r1, #0
   127ac:	e76b      	b.n	12686 <__aeabi_dadd+0x472>
   127ae:	2500      	movs	r5, #0
   127b0:	2700      	movs	r7, #0
   127b2:	e5f3      	b.n	1239c <__aeabi_dadd+0x188>
   127b4:	464e      	mov	r6, r9
   127b6:	0025      	movs	r5, r4
   127b8:	3e20      	subs	r6, #32
   127ba:	40f5      	lsrs	r5, r6
   127bc:	464b      	mov	r3, r9
   127be:	002e      	movs	r6, r5
   127c0:	2b20      	cmp	r3, #32
   127c2:	d02d      	beq.n	12820 <__aeabi_dadd+0x60c>
   127c4:	2540      	movs	r5, #64	; 0x40
   127c6:	1aed      	subs	r5, r5, r3
   127c8:	40ac      	lsls	r4, r5
   127ca:	4327      	orrs	r7, r4
   127cc:	1e7c      	subs	r4, r7, #1
   127ce:	41a7      	sbcs	r7, r4
   127d0:	2400      	movs	r4, #0
   127d2:	4337      	orrs	r7, r6
   127d4:	e6c9      	b.n	1256a <__aeabi_dadd+0x356>
   127d6:	2480      	movs	r4, #128	; 0x80
   127d8:	2500      	movs	r5, #0
   127da:	0324      	lsls	r4, r4, #12
   127dc:	4e13      	ldr	r6, [pc, #76]	; (1282c <__aeabi_dadd+0x618>)
   127de:	2700      	movs	r7, #0
   127e0:	e5dc      	b.n	1239c <__aeabi_dadd+0x188>
   127e2:	4327      	orrs	r7, r4
   127e4:	1e7c      	subs	r4, r7, #1
   127e6:	41a7      	sbcs	r7, r4
   127e8:	2400      	movs	r4, #0
   127ea:	e779      	b.n	126e0 <__aeabi_dadd+0x4cc>
   127ec:	000c      	movs	r4, r1
   127ee:	0017      	movs	r7, r2
   127f0:	4e0e      	ldr	r6, [pc, #56]	; (1282c <__aeabi_dadd+0x618>)
   127f2:	e593      	b.n	1231c <__aeabi_dadd+0x108>
   127f4:	000c      	movs	r4, r1
   127f6:	0017      	movs	r7, r2
   127f8:	e590      	b.n	1231c <__aeabi_dadd+0x108>
   127fa:	4656      	mov	r6, sl
   127fc:	0023      	movs	r3, r4
   127fe:	3e20      	subs	r6, #32
   12800:	40f3      	lsrs	r3, r6
   12802:	4699      	mov	r9, r3
   12804:	4653      	mov	r3, sl
   12806:	2b20      	cmp	r3, #32
   12808:	d00e      	beq.n	12828 <__aeabi_dadd+0x614>
   1280a:	2340      	movs	r3, #64	; 0x40
   1280c:	4656      	mov	r6, sl
   1280e:	1b9b      	subs	r3, r3, r6
   12810:	409c      	lsls	r4, r3
   12812:	4327      	orrs	r7, r4
   12814:	1e7c      	subs	r4, r7, #1
   12816:	41a7      	sbcs	r7, r4
   12818:	464b      	mov	r3, r9
   1281a:	2400      	movs	r4, #0
   1281c:	431f      	orrs	r7, r3
   1281e:	e75f      	b.n	126e0 <__aeabi_dadd+0x4cc>
   12820:	2400      	movs	r4, #0
   12822:	e7d2      	b.n	127ca <__aeabi_dadd+0x5b6>
   12824:	0017      	movs	r7, r2
   12826:	e5b2      	b.n	1238e <__aeabi_dadd+0x17a>
   12828:	2400      	movs	r4, #0
   1282a:	e7f2      	b.n	12812 <__aeabi_dadd+0x5fe>
   1282c:	000007ff 	.word	0x000007ff
   12830:	ff7fffff 	.word	0xff7fffff

00012834 <__aeabi_ddiv>:
   12834:	b5f0      	push	{r4, r5, r6, r7, lr}
   12836:	4657      	mov	r7, sl
   12838:	4645      	mov	r5, r8
   1283a:	46de      	mov	lr, fp
   1283c:	464e      	mov	r6, r9
   1283e:	b5e0      	push	{r5, r6, r7, lr}
   12840:	004c      	lsls	r4, r1, #1
   12842:	030e      	lsls	r6, r1, #12
   12844:	b087      	sub	sp, #28
   12846:	4683      	mov	fp, r0
   12848:	4692      	mov	sl, r2
   1284a:	001d      	movs	r5, r3
   1284c:	4680      	mov	r8, r0
   1284e:	0b36      	lsrs	r6, r6, #12
   12850:	0d64      	lsrs	r4, r4, #21
   12852:	0fcf      	lsrs	r7, r1, #31
   12854:	2c00      	cmp	r4, #0
   12856:	d04f      	beq.n	128f8 <__aeabi_ddiv+0xc4>
   12858:	4b6f      	ldr	r3, [pc, #444]	; (12a18 <__aeabi_ddiv+0x1e4>)
   1285a:	429c      	cmp	r4, r3
   1285c:	d035      	beq.n	128ca <__aeabi_ddiv+0x96>
   1285e:	2380      	movs	r3, #128	; 0x80
   12860:	0f42      	lsrs	r2, r0, #29
   12862:	041b      	lsls	r3, r3, #16
   12864:	00f6      	lsls	r6, r6, #3
   12866:	4313      	orrs	r3, r2
   12868:	4333      	orrs	r3, r6
   1286a:	4699      	mov	r9, r3
   1286c:	00c3      	lsls	r3, r0, #3
   1286e:	4698      	mov	r8, r3
   12870:	4b6a      	ldr	r3, [pc, #424]	; (12a1c <__aeabi_ddiv+0x1e8>)
   12872:	2600      	movs	r6, #0
   12874:	469c      	mov	ip, r3
   12876:	2300      	movs	r3, #0
   12878:	4464      	add	r4, ip
   1287a:	9303      	str	r3, [sp, #12]
   1287c:	032b      	lsls	r3, r5, #12
   1287e:	0b1b      	lsrs	r3, r3, #12
   12880:	469b      	mov	fp, r3
   12882:	006b      	lsls	r3, r5, #1
   12884:	0fed      	lsrs	r5, r5, #31
   12886:	4650      	mov	r0, sl
   12888:	0d5b      	lsrs	r3, r3, #21
   1288a:	9501      	str	r5, [sp, #4]
   1288c:	d05e      	beq.n	1294c <__aeabi_ddiv+0x118>
   1288e:	4a62      	ldr	r2, [pc, #392]	; (12a18 <__aeabi_ddiv+0x1e4>)
   12890:	4293      	cmp	r3, r2
   12892:	d053      	beq.n	1293c <__aeabi_ddiv+0x108>
   12894:	465a      	mov	r2, fp
   12896:	00d1      	lsls	r1, r2, #3
   12898:	2280      	movs	r2, #128	; 0x80
   1289a:	0f40      	lsrs	r0, r0, #29
   1289c:	0412      	lsls	r2, r2, #16
   1289e:	4302      	orrs	r2, r0
   128a0:	430a      	orrs	r2, r1
   128a2:	4693      	mov	fp, r2
   128a4:	4652      	mov	r2, sl
   128a6:	00d1      	lsls	r1, r2, #3
   128a8:	4a5c      	ldr	r2, [pc, #368]	; (12a1c <__aeabi_ddiv+0x1e8>)
   128aa:	4694      	mov	ip, r2
   128ac:	2200      	movs	r2, #0
   128ae:	4463      	add	r3, ip
   128b0:	0038      	movs	r0, r7
   128b2:	4068      	eors	r0, r5
   128b4:	4684      	mov	ip, r0
   128b6:	9002      	str	r0, [sp, #8]
   128b8:	1ae4      	subs	r4, r4, r3
   128ba:	4316      	orrs	r6, r2
   128bc:	2e0f      	cmp	r6, #15
   128be:	d900      	bls.n	128c2 <__aeabi_ddiv+0x8e>
   128c0:	e0b4      	b.n	12a2c <__aeabi_ddiv+0x1f8>
   128c2:	4b57      	ldr	r3, [pc, #348]	; (12a20 <__aeabi_ddiv+0x1ec>)
   128c4:	00b6      	lsls	r6, r6, #2
   128c6:	599b      	ldr	r3, [r3, r6]
   128c8:	469f      	mov	pc, r3
   128ca:	0003      	movs	r3, r0
   128cc:	4333      	orrs	r3, r6
   128ce:	4699      	mov	r9, r3
   128d0:	d16c      	bne.n	129ac <__aeabi_ddiv+0x178>
   128d2:	2300      	movs	r3, #0
   128d4:	4698      	mov	r8, r3
   128d6:	3302      	adds	r3, #2
   128d8:	2608      	movs	r6, #8
   128da:	9303      	str	r3, [sp, #12]
   128dc:	e7ce      	b.n	1287c <__aeabi_ddiv+0x48>
   128de:	46cb      	mov	fp, r9
   128e0:	4641      	mov	r1, r8
   128e2:	9a03      	ldr	r2, [sp, #12]
   128e4:	9701      	str	r7, [sp, #4]
   128e6:	2a02      	cmp	r2, #2
   128e8:	d165      	bne.n	129b6 <__aeabi_ddiv+0x182>
   128ea:	9b01      	ldr	r3, [sp, #4]
   128ec:	4c4a      	ldr	r4, [pc, #296]	; (12a18 <__aeabi_ddiv+0x1e4>)
   128ee:	469c      	mov	ip, r3
   128f0:	2300      	movs	r3, #0
   128f2:	2200      	movs	r2, #0
   128f4:	4698      	mov	r8, r3
   128f6:	e06b      	b.n	129d0 <__aeabi_ddiv+0x19c>
   128f8:	0003      	movs	r3, r0
   128fa:	4333      	orrs	r3, r6
   128fc:	4699      	mov	r9, r3
   128fe:	d04e      	beq.n	1299e <__aeabi_ddiv+0x16a>
   12900:	2e00      	cmp	r6, #0
   12902:	d100      	bne.n	12906 <__aeabi_ddiv+0xd2>
   12904:	e1bc      	b.n	12c80 <__aeabi_ddiv+0x44c>
   12906:	0030      	movs	r0, r6
   12908:	f001 fb08 	bl	13f1c <__clzsi2>
   1290c:	0003      	movs	r3, r0
   1290e:	3b0b      	subs	r3, #11
   12910:	2b1c      	cmp	r3, #28
   12912:	dd00      	ble.n	12916 <__aeabi_ddiv+0xe2>
   12914:	e1ac      	b.n	12c70 <__aeabi_ddiv+0x43c>
   12916:	221d      	movs	r2, #29
   12918:	1ad3      	subs	r3, r2, r3
   1291a:	465a      	mov	r2, fp
   1291c:	0001      	movs	r1, r0
   1291e:	40da      	lsrs	r2, r3
   12920:	3908      	subs	r1, #8
   12922:	408e      	lsls	r6, r1
   12924:	0013      	movs	r3, r2
   12926:	4333      	orrs	r3, r6
   12928:	4699      	mov	r9, r3
   1292a:	465b      	mov	r3, fp
   1292c:	408b      	lsls	r3, r1
   1292e:	4698      	mov	r8, r3
   12930:	2300      	movs	r3, #0
   12932:	4c3c      	ldr	r4, [pc, #240]	; (12a24 <__aeabi_ddiv+0x1f0>)
   12934:	2600      	movs	r6, #0
   12936:	1a24      	subs	r4, r4, r0
   12938:	9303      	str	r3, [sp, #12]
   1293a:	e79f      	b.n	1287c <__aeabi_ddiv+0x48>
   1293c:	4651      	mov	r1, sl
   1293e:	465a      	mov	r2, fp
   12940:	4311      	orrs	r1, r2
   12942:	d129      	bne.n	12998 <__aeabi_ddiv+0x164>
   12944:	2200      	movs	r2, #0
   12946:	4693      	mov	fp, r2
   12948:	3202      	adds	r2, #2
   1294a:	e7b1      	b.n	128b0 <__aeabi_ddiv+0x7c>
   1294c:	4659      	mov	r1, fp
   1294e:	4301      	orrs	r1, r0
   12950:	d01e      	beq.n	12990 <__aeabi_ddiv+0x15c>
   12952:	465b      	mov	r3, fp
   12954:	2b00      	cmp	r3, #0
   12956:	d100      	bne.n	1295a <__aeabi_ddiv+0x126>
   12958:	e19e      	b.n	12c98 <__aeabi_ddiv+0x464>
   1295a:	4658      	mov	r0, fp
   1295c:	f001 fade 	bl	13f1c <__clzsi2>
   12960:	0003      	movs	r3, r0
   12962:	3b0b      	subs	r3, #11
   12964:	2b1c      	cmp	r3, #28
   12966:	dd00      	ble.n	1296a <__aeabi_ddiv+0x136>
   12968:	e18f      	b.n	12c8a <__aeabi_ddiv+0x456>
   1296a:	0002      	movs	r2, r0
   1296c:	4659      	mov	r1, fp
   1296e:	3a08      	subs	r2, #8
   12970:	4091      	lsls	r1, r2
   12972:	468b      	mov	fp, r1
   12974:	211d      	movs	r1, #29
   12976:	1acb      	subs	r3, r1, r3
   12978:	4651      	mov	r1, sl
   1297a:	40d9      	lsrs	r1, r3
   1297c:	000b      	movs	r3, r1
   1297e:	4659      	mov	r1, fp
   12980:	430b      	orrs	r3, r1
   12982:	4651      	mov	r1, sl
   12984:	469b      	mov	fp, r3
   12986:	4091      	lsls	r1, r2
   12988:	4b26      	ldr	r3, [pc, #152]	; (12a24 <__aeabi_ddiv+0x1f0>)
   1298a:	2200      	movs	r2, #0
   1298c:	1a1b      	subs	r3, r3, r0
   1298e:	e78f      	b.n	128b0 <__aeabi_ddiv+0x7c>
   12990:	2300      	movs	r3, #0
   12992:	2201      	movs	r2, #1
   12994:	469b      	mov	fp, r3
   12996:	e78b      	b.n	128b0 <__aeabi_ddiv+0x7c>
   12998:	4651      	mov	r1, sl
   1299a:	2203      	movs	r2, #3
   1299c:	e788      	b.n	128b0 <__aeabi_ddiv+0x7c>
   1299e:	2300      	movs	r3, #0
   129a0:	4698      	mov	r8, r3
   129a2:	3301      	adds	r3, #1
   129a4:	2604      	movs	r6, #4
   129a6:	2400      	movs	r4, #0
   129a8:	9303      	str	r3, [sp, #12]
   129aa:	e767      	b.n	1287c <__aeabi_ddiv+0x48>
   129ac:	2303      	movs	r3, #3
   129ae:	46b1      	mov	r9, r6
   129b0:	9303      	str	r3, [sp, #12]
   129b2:	260c      	movs	r6, #12
   129b4:	e762      	b.n	1287c <__aeabi_ddiv+0x48>
   129b6:	2a03      	cmp	r2, #3
   129b8:	d100      	bne.n	129bc <__aeabi_ddiv+0x188>
   129ba:	e25c      	b.n	12e76 <__aeabi_ddiv+0x642>
   129bc:	9b01      	ldr	r3, [sp, #4]
   129be:	2a01      	cmp	r2, #1
   129c0:	d000      	beq.n	129c4 <__aeabi_ddiv+0x190>
   129c2:	e1e4      	b.n	12d8e <__aeabi_ddiv+0x55a>
   129c4:	4013      	ands	r3, r2
   129c6:	469c      	mov	ip, r3
   129c8:	2300      	movs	r3, #0
   129ca:	2400      	movs	r4, #0
   129cc:	2200      	movs	r2, #0
   129ce:	4698      	mov	r8, r3
   129d0:	2100      	movs	r1, #0
   129d2:	0312      	lsls	r2, r2, #12
   129d4:	0b13      	lsrs	r3, r2, #12
   129d6:	0d0a      	lsrs	r2, r1, #20
   129d8:	0512      	lsls	r2, r2, #20
   129da:	431a      	orrs	r2, r3
   129dc:	0523      	lsls	r3, r4, #20
   129de:	4c12      	ldr	r4, [pc, #72]	; (12a28 <__aeabi_ddiv+0x1f4>)
   129e0:	4640      	mov	r0, r8
   129e2:	4022      	ands	r2, r4
   129e4:	4313      	orrs	r3, r2
   129e6:	4662      	mov	r2, ip
   129e8:	005b      	lsls	r3, r3, #1
   129ea:	07d2      	lsls	r2, r2, #31
   129ec:	085b      	lsrs	r3, r3, #1
   129ee:	4313      	orrs	r3, r2
   129f0:	0019      	movs	r1, r3
   129f2:	b007      	add	sp, #28
   129f4:	bc3c      	pop	{r2, r3, r4, r5}
   129f6:	4690      	mov	r8, r2
   129f8:	4699      	mov	r9, r3
   129fa:	46a2      	mov	sl, r4
   129fc:	46ab      	mov	fp, r5
   129fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a00:	2300      	movs	r3, #0
   12a02:	2280      	movs	r2, #128	; 0x80
   12a04:	469c      	mov	ip, r3
   12a06:	0312      	lsls	r2, r2, #12
   12a08:	4698      	mov	r8, r3
   12a0a:	4c03      	ldr	r4, [pc, #12]	; (12a18 <__aeabi_ddiv+0x1e4>)
   12a0c:	e7e0      	b.n	129d0 <__aeabi_ddiv+0x19c>
   12a0e:	2300      	movs	r3, #0
   12a10:	4c01      	ldr	r4, [pc, #4]	; (12a18 <__aeabi_ddiv+0x1e4>)
   12a12:	2200      	movs	r2, #0
   12a14:	4698      	mov	r8, r3
   12a16:	e7db      	b.n	129d0 <__aeabi_ddiv+0x19c>
   12a18:	000007ff 	.word	0x000007ff
   12a1c:	fffffc01 	.word	0xfffffc01
   12a20:	000169b0 	.word	0x000169b0
   12a24:	fffffc0d 	.word	0xfffffc0d
   12a28:	800fffff 	.word	0x800fffff
   12a2c:	45d9      	cmp	r9, fp
   12a2e:	d900      	bls.n	12a32 <__aeabi_ddiv+0x1fe>
   12a30:	e139      	b.n	12ca6 <__aeabi_ddiv+0x472>
   12a32:	d100      	bne.n	12a36 <__aeabi_ddiv+0x202>
   12a34:	e134      	b.n	12ca0 <__aeabi_ddiv+0x46c>
   12a36:	2300      	movs	r3, #0
   12a38:	4646      	mov	r6, r8
   12a3a:	464d      	mov	r5, r9
   12a3c:	469a      	mov	sl, r3
   12a3e:	3c01      	subs	r4, #1
   12a40:	465b      	mov	r3, fp
   12a42:	0e0a      	lsrs	r2, r1, #24
   12a44:	021b      	lsls	r3, r3, #8
   12a46:	431a      	orrs	r2, r3
   12a48:	020b      	lsls	r3, r1, #8
   12a4a:	0c17      	lsrs	r7, r2, #16
   12a4c:	9303      	str	r3, [sp, #12]
   12a4e:	0413      	lsls	r3, r2, #16
   12a50:	0c1b      	lsrs	r3, r3, #16
   12a52:	0039      	movs	r1, r7
   12a54:	0028      	movs	r0, r5
   12a56:	4690      	mov	r8, r2
   12a58:	9301      	str	r3, [sp, #4]
   12a5a:	f7fe ff45 	bl	118e8 <__udivsi3>
   12a5e:	0002      	movs	r2, r0
   12a60:	9b01      	ldr	r3, [sp, #4]
   12a62:	4683      	mov	fp, r0
   12a64:	435a      	muls	r2, r3
   12a66:	0028      	movs	r0, r5
   12a68:	0039      	movs	r1, r7
   12a6a:	4691      	mov	r9, r2
   12a6c:	f7fe ffc2 	bl	119f4 <__aeabi_uidivmod>
   12a70:	0c35      	lsrs	r5, r6, #16
   12a72:	0409      	lsls	r1, r1, #16
   12a74:	430d      	orrs	r5, r1
   12a76:	45a9      	cmp	r9, r5
   12a78:	d90d      	bls.n	12a96 <__aeabi_ddiv+0x262>
   12a7a:	465b      	mov	r3, fp
   12a7c:	4445      	add	r5, r8
   12a7e:	3b01      	subs	r3, #1
   12a80:	45a8      	cmp	r8, r5
   12a82:	d900      	bls.n	12a86 <__aeabi_ddiv+0x252>
   12a84:	e13a      	b.n	12cfc <__aeabi_ddiv+0x4c8>
   12a86:	45a9      	cmp	r9, r5
   12a88:	d800      	bhi.n	12a8c <__aeabi_ddiv+0x258>
   12a8a:	e137      	b.n	12cfc <__aeabi_ddiv+0x4c8>
   12a8c:	2302      	movs	r3, #2
   12a8e:	425b      	negs	r3, r3
   12a90:	469c      	mov	ip, r3
   12a92:	4445      	add	r5, r8
   12a94:	44e3      	add	fp, ip
   12a96:	464b      	mov	r3, r9
   12a98:	1aeb      	subs	r3, r5, r3
   12a9a:	0039      	movs	r1, r7
   12a9c:	0018      	movs	r0, r3
   12a9e:	9304      	str	r3, [sp, #16]
   12aa0:	f7fe ff22 	bl	118e8 <__udivsi3>
   12aa4:	9b01      	ldr	r3, [sp, #4]
   12aa6:	0005      	movs	r5, r0
   12aa8:	4343      	muls	r3, r0
   12aaa:	0039      	movs	r1, r7
   12aac:	9804      	ldr	r0, [sp, #16]
   12aae:	4699      	mov	r9, r3
   12ab0:	f7fe ffa0 	bl	119f4 <__aeabi_uidivmod>
   12ab4:	0433      	lsls	r3, r6, #16
   12ab6:	0409      	lsls	r1, r1, #16
   12ab8:	0c1b      	lsrs	r3, r3, #16
   12aba:	430b      	orrs	r3, r1
   12abc:	4599      	cmp	r9, r3
   12abe:	d909      	bls.n	12ad4 <__aeabi_ddiv+0x2a0>
   12ac0:	4443      	add	r3, r8
   12ac2:	1e6a      	subs	r2, r5, #1
   12ac4:	4598      	cmp	r8, r3
   12ac6:	d900      	bls.n	12aca <__aeabi_ddiv+0x296>
   12ac8:	e11a      	b.n	12d00 <__aeabi_ddiv+0x4cc>
   12aca:	4599      	cmp	r9, r3
   12acc:	d800      	bhi.n	12ad0 <__aeabi_ddiv+0x29c>
   12ace:	e117      	b.n	12d00 <__aeabi_ddiv+0x4cc>
   12ad0:	3d02      	subs	r5, #2
   12ad2:	4443      	add	r3, r8
   12ad4:	464a      	mov	r2, r9
   12ad6:	1a9b      	subs	r3, r3, r2
   12ad8:	465a      	mov	r2, fp
   12ada:	0412      	lsls	r2, r2, #16
   12adc:	432a      	orrs	r2, r5
   12ade:	9903      	ldr	r1, [sp, #12]
   12ae0:	4693      	mov	fp, r2
   12ae2:	0c10      	lsrs	r0, r2, #16
   12ae4:	0c0a      	lsrs	r2, r1, #16
   12ae6:	4691      	mov	r9, r2
   12ae8:	0409      	lsls	r1, r1, #16
   12aea:	465a      	mov	r2, fp
   12aec:	0c09      	lsrs	r1, r1, #16
   12aee:	464e      	mov	r6, r9
   12af0:	000d      	movs	r5, r1
   12af2:	0412      	lsls	r2, r2, #16
   12af4:	0c12      	lsrs	r2, r2, #16
   12af6:	4345      	muls	r5, r0
   12af8:	9105      	str	r1, [sp, #20]
   12afa:	4351      	muls	r1, r2
   12afc:	4372      	muls	r2, r6
   12afe:	4370      	muls	r0, r6
   12b00:	1952      	adds	r2, r2, r5
   12b02:	0c0e      	lsrs	r6, r1, #16
   12b04:	18b2      	adds	r2, r6, r2
   12b06:	4295      	cmp	r5, r2
   12b08:	d903      	bls.n	12b12 <__aeabi_ddiv+0x2de>
   12b0a:	2580      	movs	r5, #128	; 0x80
   12b0c:	026d      	lsls	r5, r5, #9
   12b0e:	46ac      	mov	ip, r5
   12b10:	4460      	add	r0, ip
   12b12:	0c15      	lsrs	r5, r2, #16
   12b14:	0409      	lsls	r1, r1, #16
   12b16:	0412      	lsls	r2, r2, #16
   12b18:	0c09      	lsrs	r1, r1, #16
   12b1a:	1828      	adds	r0, r5, r0
   12b1c:	1852      	adds	r2, r2, r1
   12b1e:	4283      	cmp	r3, r0
   12b20:	d200      	bcs.n	12b24 <__aeabi_ddiv+0x2f0>
   12b22:	e0ce      	b.n	12cc2 <__aeabi_ddiv+0x48e>
   12b24:	d100      	bne.n	12b28 <__aeabi_ddiv+0x2f4>
   12b26:	e0c8      	b.n	12cba <__aeabi_ddiv+0x486>
   12b28:	1a1d      	subs	r5, r3, r0
   12b2a:	4653      	mov	r3, sl
   12b2c:	1a9e      	subs	r6, r3, r2
   12b2e:	45b2      	cmp	sl, r6
   12b30:	4192      	sbcs	r2, r2
   12b32:	4252      	negs	r2, r2
   12b34:	1aab      	subs	r3, r5, r2
   12b36:	469a      	mov	sl, r3
   12b38:	4598      	cmp	r8, r3
   12b3a:	d100      	bne.n	12b3e <__aeabi_ddiv+0x30a>
   12b3c:	e117      	b.n	12d6e <__aeabi_ddiv+0x53a>
   12b3e:	0039      	movs	r1, r7
   12b40:	0018      	movs	r0, r3
   12b42:	f7fe fed1 	bl	118e8 <__udivsi3>
   12b46:	9b01      	ldr	r3, [sp, #4]
   12b48:	0005      	movs	r5, r0
   12b4a:	4343      	muls	r3, r0
   12b4c:	0039      	movs	r1, r7
   12b4e:	4650      	mov	r0, sl
   12b50:	9304      	str	r3, [sp, #16]
   12b52:	f7fe ff4f 	bl	119f4 <__aeabi_uidivmod>
   12b56:	9804      	ldr	r0, [sp, #16]
   12b58:	040b      	lsls	r3, r1, #16
   12b5a:	0c31      	lsrs	r1, r6, #16
   12b5c:	4319      	orrs	r1, r3
   12b5e:	4288      	cmp	r0, r1
   12b60:	d909      	bls.n	12b76 <__aeabi_ddiv+0x342>
   12b62:	4441      	add	r1, r8
   12b64:	1e6b      	subs	r3, r5, #1
   12b66:	4588      	cmp	r8, r1
   12b68:	d900      	bls.n	12b6c <__aeabi_ddiv+0x338>
   12b6a:	e107      	b.n	12d7c <__aeabi_ddiv+0x548>
   12b6c:	4288      	cmp	r0, r1
   12b6e:	d800      	bhi.n	12b72 <__aeabi_ddiv+0x33e>
   12b70:	e104      	b.n	12d7c <__aeabi_ddiv+0x548>
   12b72:	3d02      	subs	r5, #2
   12b74:	4441      	add	r1, r8
   12b76:	9b04      	ldr	r3, [sp, #16]
   12b78:	1acb      	subs	r3, r1, r3
   12b7a:	0018      	movs	r0, r3
   12b7c:	0039      	movs	r1, r7
   12b7e:	9304      	str	r3, [sp, #16]
   12b80:	f7fe feb2 	bl	118e8 <__udivsi3>
   12b84:	9b01      	ldr	r3, [sp, #4]
   12b86:	4682      	mov	sl, r0
   12b88:	4343      	muls	r3, r0
   12b8a:	0039      	movs	r1, r7
   12b8c:	9804      	ldr	r0, [sp, #16]
   12b8e:	9301      	str	r3, [sp, #4]
   12b90:	f7fe ff30 	bl	119f4 <__aeabi_uidivmod>
   12b94:	9801      	ldr	r0, [sp, #4]
   12b96:	040b      	lsls	r3, r1, #16
   12b98:	0431      	lsls	r1, r6, #16
   12b9a:	0c09      	lsrs	r1, r1, #16
   12b9c:	4319      	orrs	r1, r3
   12b9e:	4288      	cmp	r0, r1
   12ba0:	d90d      	bls.n	12bbe <__aeabi_ddiv+0x38a>
   12ba2:	4653      	mov	r3, sl
   12ba4:	4441      	add	r1, r8
   12ba6:	3b01      	subs	r3, #1
   12ba8:	4588      	cmp	r8, r1
   12baa:	d900      	bls.n	12bae <__aeabi_ddiv+0x37a>
   12bac:	e0e8      	b.n	12d80 <__aeabi_ddiv+0x54c>
   12bae:	4288      	cmp	r0, r1
   12bb0:	d800      	bhi.n	12bb4 <__aeabi_ddiv+0x380>
   12bb2:	e0e5      	b.n	12d80 <__aeabi_ddiv+0x54c>
   12bb4:	2302      	movs	r3, #2
   12bb6:	425b      	negs	r3, r3
   12bb8:	469c      	mov	ip, r3
   12bba:	4441      	add	r1, r8
   12bbc:	44e2      	add	sl, ip
   12bbe:	9b01      	ldr	r3, [sp, #4]
   12bc0:	042d      	lsls	r5, r5, #16
   12bc2:	1ace      	subs	r6, r1, r3
   12bc4:	4651      	mov	r1, sl
   12bc6:	4329      	orrs	r1, r5
   12bc8:	9d05      	ldr	r5, [sp, #20]
   12bca:	464f      	mov	r7, r9
   12bcc:	002a      	movs	r2, r5
   12bce:	040b      	lsls	r3, r1, #16
   12bd0:	0c08      	lsrs	r0, r1, #16
   12bd2:	0c1b      	lsrs	r3, r3, #16
   12bd4:	435a      	muls	r2, r3
   12bd6:	4345      	muls	r5, r0
   12bd8:	437b      	muls	r3, r7
   12bda:	4378      	muls	r0, r7
   12bdc:	195b      	adds	r3, r3, r5
   12bde:	0c17      	lsrs	r7, r2, #16
   12be0:	18fb      	adds	r3, r7, r3
   12be2:	429d      	cmp	r5, r3
   12be4:	d903      	bls.n	12bee <__aeabi_ddiv+0x3ba>
   12be6:	2580      	movs	r5, #128	; 0x80
   12be8:	026d      	lsls	r5, r5, #9
   12bea:	46ac      	mov	ip, r5
   12bec:	4460      	add	r0, ip
   12bee:	0c1d      	lsrs	r5, r3, #16
   12bf0:	0412      	lsls	r2, r2, #16
   12bf2:	041b      	lsls	r3, r3, #16
   12bf4:	0c12      	lsrs	r2, r2, #16
   12bf6:	1828      	adds	r0, r5, r0
   12bf8:	189b      	adds	r3, r3, r2
   12bfa:	4286      	cmp	r6, r0
   12bfc:	d200      	bcs.n	12c00 <__aeabi_ddiv+0x3cc>
   12bfe:	e093      	b.n	12d28 <__aeabi_ddiv+0x4f4>
   12c00:	d100      	bne.n	12c04 <__aeabi_ddiv+0x3d0>
   12c02:	e08e      	b.n	12d22 <__aeabi_ddiv+0x4ee>
   12c04:	2301      	movs	r3, #1
   12c06:	4319      	orrs	r1, r3
   12c08:	4ba0      	ldr	r3, [pc, #640]	; (12e8c <__aeabi_ddiv+0x658>)
   12c0a:	18e3      	adds	r3, r4, r3
   12c0c:	2b00      	cmp	r3, #0
   12c0e:	dc00      	bgt.n	12c12 <__aeabi_ddiv+0x3de>
   12c10:	e099      	b.n	12d46 <__aeabi_ddiv+0x512>
   12c12:	074a      	lsls	r2, r1, #29
   12c14:	d000      	beq.n	12c18 <__aeabi_ddiv+0x3e4>
   12c16:	e09e      	b.n	12d56 <__aeabi_ddiv+0x522>
   12c18:	465a      	mov	r2, fp
   12c1a:	01d2      	lsls	r2, r2, #7
   12c1c:	d506      	bpl.n	12c2c <__aeabi_ddiv+0x3f8>
   12c1e:	465a      	mov	r2, fp
   12c20:	4b9b      	ldr	r3, [pc, #620]	; (12e90 <__aeabi_ddiv+0x65c>)
   12c22:	401a      	ands	r2, r3
   12c24:	2380      	movs	r3, #128	; 0x80
   12c26:	4693      	mov	fp, r2
   12c28:	00db      	lsls	r3, r3, #3
   12c2a:	18e3      	adds	r3, r4, r3
   12c2c:	4a99      	ldr	r2, [pc, #612]	; (12e94 <__aeabi_ddiv+0x660>)
   12c2e:	4293      	cmp	r3, r2
   12c30:	dd68      	ble.n	12d04 <__aeabi_ddiv+0x4d0>
   12c32:	2301      	movs	r3, #1
   12c34:	9a02      	ldr	r2, [sp, #8]
   12c36:	4c98      	ldr	r4, [pc, #608]	; (12e98 <__aeabi_ddiv+0x664>)
   12c38:	401a      	ands	r2, r3
   12c3a:	2300      	movs	r3, #0
   12c3c:	4694      	mov	ip, r2
   12c3e:	4698      	mov	r8, r3
   12c40:	2200      	movs	r2, #0
   12c42:	e6c5      	b.n	129d0 <__aeabi_ddiv+0x19c>
   12c44:	2280      	movs	r2, #128	; 0x80
   12c46:	464b      	mov	r3, r9
   12c48:	0312      	lsls	r2, r2, #12
   12c4a:	4213      	tst	r3, r2
   12c4c:	d00a      	beq.n	12c64 <__aeabi_ddiv+0x430>
   12c4e:	465b      	mov	r3, fp
   12c50:	4213      	tst	r3, r2
   12c52:	d106      	bne.n	12c62 <__aeabi_ddiv+0x42e>
   12c54:	431a      	orrs	r2, r3
   12c56:	0312      	lsls	r2, r2, #12
   12c58:	0b12      	lsrs	r2, r2, #12
   12c5a:	46ac      	mov	ip, r5
   12c5c:	4688      	mov	r8, r1
   12c5e:	4c8e      	ldr	r4, [pc, #568]	; (12e98 <__aeabi_ddiv+0x664>)
   12c60:	e6b6      	b.n	129d0 <__aeabi_ddiv+0x19c>
   12c62:	464b      	mov	r3, r9
   12c64:	431a      	orrs	r2, r3
   12c66:	0312      	lsls	r2, r2, #12
   12c68:	0b12      	lsrs	r2, r2, #12
   12c6a:	46bc      	mov	ip, r7
   12c6c:	4c8a      	ldr	r4, [pc, #552]	; (12e98 <__aeabi_ddiv+0x664>)
   12c6e:	e6af      	b.n	129d0 <__aeabi_ddiv+0x19c>
   12c70:	0003      	movs	r3, r0
   12c72:	465a      	mov	r2, fp
   12c74:	3b28      	subs	r3, #40	; 0x28
   12c76:	409a      	lsls	r2, r3
   12c78:	2300      	movs	r3, #0
   12c7a:	4691      	mov	r9, r2
   12c7c:	4698      	mov	r8, r3
   12c7e:	e657      	b.n	12930 <__aeabi_ddiv+0xfc>
   12c80:	4658      	mov	r0, fp
   12c82:	f001 f94b 	bl	13f1c <__clzsi2>
   12c86:	3020      	adds	r0, #32
   12c88:	e640      	b.n	1290c <__aeabi_ddiv+0xd8>
   12c8a:	0003      	movs	r3, r0
   12c8c:	4652      	mov	r2, sl
   12c8e:	3b28      	subs	r3, #40	; 0x28
   12c90:	409a      	lsls	r2, r3
   12c92:	2100      	movs	r1, #0
   12c94:	4693      	mov	fp, r2
   12c96:	e677      	b.n	12988 <__aeabi_ddiv+0x154>
   12c98:	f001 f940 	bl	13f1c <__clzsi2>
   12c9c:	3020      	adds	r0, #32
   12c9e:	e65f      	b.n	12960 <__aeabi_ddiv+0x12c>
   12ca0:	4588      	cmp	r8, r1
   12ca2:	d200      	bcs.n	12ca6 <__aeabi_ddiv+0x472>
   12ca4:	e6c7      	b.n	12a36 <__aeabi_ddiv+0x202>
   12ca6:	464b      	mov	r3, r9
   12ca8:	07de      	lsls	r6, r3, #31
   12caa:	085d      	lsrs	r5, r3, #1
   12cac:	4643      	mov	r3, r8
   12cae:	085b      	lsrs	r3, r3, #1
   12cb0:	431e      	orrs	r6, r3
   12cb2:	4643      	mov	r3, r8
   12cb4:	07db      	lsls	r3, r3, #31
   12cb6:	469a      	mov	sl, r3
   12cb8:	e6c2      	b.n	12a40 <__aeabi_ddiv+0x20c>
   12cba:	2500      	movs	r5, #0
   12cbc:	4592      	cmp	sl, r2
   12cbe:	d300      	bcc.n	12cc2 <__aeabi_ddiv+0x48e>
   12cc0:	e733      	b.n	12b2a <__aeabi_ddiv+0x2f6>
   12cc2:	9e03      	ldr	r6, [sp, #12]
   12cc4:	4659      	mov	r1, fp
   12cc6:	46b4      	mov	ip, r6
   12cc8:	44e2      	add	sl, ip
   12cca:	45b2      	cmp	sl, r6
   12ccc:	41ad      	sbcs	r5, r5
   12cce:	426d      	negs	r5, r5
   12cd0:	4445      	add	r5, r8
   12cd2:	18eb      	adds	r3, r5, r3
   12cd4:	3901      	subs	r1, #1
   12cd6:	4598      	cmp	r8, r3
   12cd8:	d207      	bcs.n	12cea <__aeabi_ddiv+0x4b6>
   12cda:	4298      	cmp	r0, r3
   12cdc:	d900      	bls.n	12ce0 <__aeabi_ddiv+0x4ac>
   12cde:	e07f      	b.n	12de0 <__aeabi_ddiv+0x5ac>
   12ce0:	d100      	bne.n	12ce4 <__aeabi_ddiv+0x4b0>
   12ce2:	e0bc      	b.n	12e5e <__aeabi_ddiv+0x62a>
   12ce4:	1a1d      	subs	r5, r3, r0
   12ce6:	468b      	mov	fp, r1
   12ce8:	e71f      	b.n	12b2a <__aeabi_ddiv+0x2f6>
   12cea:	4598      	cmp	r8, r3
   12cec:	d1fa      	bne.n	12ce4 <__aeabi_ddiv+0x4b0>
   12cee:	9d03      	ldr	r5, [sp, #12]
   12cf0:	4555      	cmp	r5, sl
   12cf2:	d9f2      	bls.n	12cda <__aeabi_ddiv+0x4a6>
   12cf4:	4643      	mov	r3, r8
   12cf6:	468b      	mov	fp, r1
   12cf8:	1a1d      	subs	r5, r3, r0
   12cfa:	e716      	b.n	12b2a <__aeabi_ddiv+0x2f6>
   12cfc:	469b      	mov	fp, r3
   12cfe:	e6ca      	b.n	12a96 <__aeabi_ddiv+0x262>
   12d00:	0015      	movs	r5, r2
   12d02:	e6e7      	b.n	12ad4 <__aeabi_ddiv+0x2a0>
   12d04:	465a      	mov	r2, fp
   12d06:	08c9      	lsrs	r1, r1, #3
   12d08:	0752      	lsls	r2, r2, #29
   12d0a:	430a      	orrs	r2, r1
   12d0c:	055b      	lsls	r3, r3, #21
   12d0e:	4690      	mov	r8, r2
   12d10:	0d5c      	lsrs	r4, r3, #21
   12d12:	465a      	mov	r2, fp
   12d14:	2301      	movs	r3, #1
   12d16:	9902      	ldr	r1, [sp, #8]
   12d18:	0252      	lsls	r2, r2, #9
   12d1a:	4019      	ands	r1, r3
   12d1c:	0b12      	lsrs	r2, r2, #12
   12d1e:	468c      	mov	ip, r1
   12d20:	e656      	b.n	129d0 <__aeabi_ddiv+0x19c>
   12d22:	2b00      	cmp	r3, #0
   12d24:	d100      	bne.n	12d28 <__aeabi_ddiv+0x4f4>
   12d26:	e76f      	b.n	12c08 <__aeabi_ddiv+0x3d4>
   12d28:	4446      	add	r6, r8
   12d2a:	1e4a      	subs	r2, r1, #1
   12d2c:	45b0      	cmp	r8, r6
   12d2e:	d929      	bls.n	12d84 <__aeabi_ddiv+0x550>
   12d30:	0011      	movs	r1, r2
   12d32:	4286      	cmp	r6, r0
   12d34:	d000      	beq.n	12d38 <__aeabi_ddiv+0x504>
   12d36:	e765      	b.n	12c04 <__aeabi_ddiv+0x3d0>
   12d38:	9a03      	ldr	r2, [sp, #12]
   12d3a:	4293      	cmp	r3, r2
   12d3c:	d000      	beq.n	12d40 <__aeabi_ddiv+0x50c>
   12d3e:	e761      	b.n	12c04 <__aeabi_ddiv+0x3d0>
   12d40:	e762      	b.n	12c08 <__aeabi_ddiv+0x3d4>
   12d42:	2101      	movs	r1, #1
   12d44:	4249      	negs	r1, r1
   12d46:	2001      	movs	r0, #1
   12d48:	1ac2      	subs	r2, r0, r3
   12d4a:	2a38      	cmp	r2, #56	; 0x38
   12d4c:	dd21      	ble.n	12d92 <__aeabi_ddiv+0x55e>
   12d4e:	9b02      	ldr	r3, [sp, #8]
   12d50:	4003      	ands	r3, r0
   12d52:	469c      	mov	ip, r3
   12d54:	e638      	b.n	129c8 <__aeabi_ddiv+0x194>
   12d56:	220f      	movs	r2, #15
   12d58:	400a      	ands	r2, r1
   12d5a:	2a04      	cmp	r2, #4
   12d5c:	d100      	bne.n	12d60 <__aeabi_ddiv+0x52c>
   12d5e:	e75b      	b.n	12c18 <__aeabi_ddiv+0x3e4>
   12d60:	000a      	movs	r2, r1
   12d62:	1d11      	adds	r1, r2, #4
   12d64:	4291      	cmp	r1, r2
   12d66:	4192      	sbcs	r2, r2
   12d68:	4252      	negs	r2, r2
   12d6a:	4493      	add	fp, r2
   12d6c:	e754      	b.n	12c18 <__aeabi_ddiv+0x3e4>
   12d6e:	4b47      	ldr	r3, [pc, #284]	; (12e8c <__aeabi_ddiv+0x658>)
   12d70:	18e3      	adds	r3, r4, r3
   12d72:	2b00      	cmp	r3, #0
   12d74:	dde5      	ble.n	12d42 <__aeabi_ddiv+0x50e>
   12d76:	2201      	movs	r2, #1
   12d78:	4252      	negs	r2, r2
   12d7a:	e7f2      	b.n	12d62 <__aeabi_ddiv+0x52e>
   12d7c:	001d      	movs	r5, r3
   12d7e:	e6fa      	b.n	12b76 <__aeabi_ddiv+0x342>
   12d80:	469a      	mov	sl, r3
   12d82:	e71c      	b.n	12bbe <__aeabi_ddiv+0x38a>
   12d84:	42b0      	cmp	r0, r6
   12d86:	d839      	bhi.n	12dfc <__aeabi_ddiv+0x5c8>
   12d88:	d06e      	beq.n	12e68 <__aeabi_ddiv+0x634>
   12d8a:	0011      	movs	r1, r2
   12d8c:	e73a      	b.n	12c04 <__aeabi_ddiv+0x3d0>
   12d8e:	9302      	str	r3, [sp, #8]
   12d90:	e73a      	b.n	12c08 <__aeabi_ddiv+0x3d4>
   12d92:	2a1f      	cmp	r2, #31
   12d94:	dc3c      	bgt.n	12e10 <__aeabi_ddiv+0x5dc>
   12d96:	2320      	movs	r3, #32
   12d98:	1a9b      	subs	r3, r3, r2
   12d9a:	000c      	movs	r4, r1
   12d9c:	4658      	mov	r0, fp
   12d9e:	4099      	lsls	r1, r3
   12da0:	4098      	lsls	r0, r3
   12da2:	1e4b      	subs	r3, r1, #1
   12da4:	4199      	sbcs	r1, r3
   12da6:	465b      	mov	r3, fp
   12da8:	40d4      	lsrs	r4, r2
   12daa:	40d3      	lsrs	r3, r2
   12dac:	4320      	orrs	r0, r4
   12dae:	4308      	orrs	r0, r1
   12db0:	001a      	movs	r2, r3
   12db2:	0743      	lsls	r3, r0, #29
   12db4:	d009      	beq.n	12dca <__aeabi_ddiv+0x596>
   12db6:	230f      	movs	r3, #15
   12db8:	4003      	ands	r3, r0
   12dba:	2b04      	cmp	r3, #4
   12dbc:	d005      	beq.n	12dca <__aeabi_ddiv+0x596>
   12dbe:	0001      	movs	r1, r0
   12dc0:	1d08      	adds	r0, r1, #4
   12dc2:	4288      	cmp	r0, r1
   12dc4:	419b      	sbcs	r3, r3
   12dc6:	425b      	negs	r3, r3
   12dc8:	18d2      	adds	r2, r2, r3
   12dca:	0213      	lsls	r3, r2, #8
   12dcc:	d53a      	bpl.n	12e44 <__aeabi_ddiv+0x610>
   12dce:	2301      	movs	r3, #1
   12dd0:	9a02      	ldr	r2, [sp, #8]
   12dd2:	2401      	movs	r4, #1
   12dd4:	401a      	ands	r2, r3
   12dd6:	2300      	movs	r3, #0
   12dd8:	4694      	mov	ip, r2
   12dda:	4698      	mov	r8, r3
   12ddc:	2200      	movs	r2, #0
   12dde:	e5f7      	b.n	129d0 <__aeabi_ddiv+0x19c>
   12de0:	2102      	movs	r1, #2
   12de2:	4249      	negs	r1, r1
   12de4:	468c      	mov	ip, r1
   12de6:	9d03      	ldr	r5, [sp, #12]
   12de8:	44e3      	add	fp, ip
   12dea:	46ac      	mov	ip, r5
   12dec:	44e2      	add	sl, ip
   12dee:	45aa      	cmp	sl, r5
   12df0:	41ad      	sbcs	r5, r5
   12df2:	426d      	negs	r5, r5
   12df4:	4445      	add	r5, r8
   12df6:	18ed      	adds	r5, r5, r3
   12df8:	1a2d      	subs	r5, r5, r0
   12dfa:	e696      	b.n	12b2a <__aeabi_ddiv+0x2f6>
   12dfc:	1e8a      	subs	r2, r1, #2
   12dfe:	9903      	ldr	r1, [sp, #12]
   12e00:	004d      	lsls	r5, r1, #1
   12e02:	428d      	cmp	r5, r1
   12e04:	4189      	sbcs	r1, r1
   12e06:	4249      	negs	r1, r1
   12e08:	4441      	add	r1, r8
   12e0a:	1876      	adds	r6, r6, r1
   12e0c:	9503      	str	r5, [sp, #12]
   12e0e:	e78f      	b.n	12d30 <__aeabi_ddiv+0x4fc>
   12e10:	201f      	movs	r0, #31
   12e12:	4240      	negs	r0, r0
   12e14:	1ac3      	subs	r3, r0, r3
   12e16:	4658      	mov	r0, fp
   12e18:	40d8      	lsrs	r0, r3
   12e1a:	0003      	movs	r3, r0
   12e1c:	2a20      	cmp	r2, #32
   12e1e:	d028      	beq.n	12e72 <__aeabi_ddiv+0x63e>
   12e20:	2040      	movs	r0, #64	; 0x40
   12e22:	465d      	mov	r5, fp
   12e24:	1a82      	subs	r2, r0, r2
   12e26:	4095      	lsls	r5, r2
   12e28:	4329      	orrs	r1, r5
   12e2a:	1e4a      	subs	r2, r1, #1
   12e2c:	4191      	sbcs	r1, r2
   12e2e:	4319      	orrs	r1, r3
   12e30:	2307      	movs	r3, #7
   12e32:	2200      	movs	r2, #0
   12e34:	400b      	ands	r3, r1
   12e36:	d009      	beq.n	12e4c <__aeabi_ddiv+0x618>
   12e38:	230f      	movs	r3, #15
   12e3a:	2200      	movs	r2, #0
   12e3c:	400b      	ands	r3, r1
   12e3e:	0008      	movs	r0, r1
   12e40:	2b04      	cmp	r3, #4
   12e42:	d1bd      	bne.n	12dc0 <__aeabi_ddiv+0x58c>
   12e44:	0001      	movs	r1, r0
   12e46:	0753      	lsls	r3, r2, #29
   12e48:	0252      	lsls	r2, r2, #9
   12e4a:	0b12      	lsrs	r2, r2, #12
   12e4c:	08c9      	lsrs	r1, r1, #3
   12e4e:	4319      	orrs	r1, r3
   12e50:	2301      	movs	r3, #1
   12e52:	4688      	mov	r8, r1
   12e54:	9902      	ldr	r1, [sp, #8]
   12e56:	2400      	movs	r4, #0
   12e58:	4019      	ands	r1, r3
   12e5a:	468c      	mov	ip, r1
   12e5c:	e5b8      	b.n	129d0 <__aeabi_ddiv+0x19c>
   12e5e:	4552      	cmp	r2, sl
   12e60:	d8be      	bhi.n	12de0 <__aeabi_ddiv+0x5ac>
   12e62:	468b      	mov	fp, r1
   12e64:	2500      	movs	r5, #0
   12e66:	e660      	b.n	12b2a <__aeabi_ddiv+0x2f6>
   12e68:	9d03      	ldr	r5, [sp, #12]
   12e6a:	429d      	cmp	r5, r3
   12e6c:	d3c6      	bcc.n	12dfc <__aeabi_ddiv+0x5c8>
   12e6e:	0011      	movs	r1, r2
   12e70:	e762      	b.n	12d38 <__aeabi_ddiv+0x504>
   12e72:	2500      	movs	r5, #0
   12e74:	e7d8      	b.n	12e28 <__aeabi_ddiv+0x5f4>
   12e76:	2280      	movs	r2, #128	; 0x80
   12e78:	465b      	mov	r3, fp
   12e7a:	0312      	lsls	r2, r2, #12
   12e7c:	431a      	orrs	r2, r3
   12e7e:	9b01      	ldr	r3, [sp, #4]
   12e80:	0312      	lsls	r2, r2, #12
   12e82:	0b12      	lsrs	r2, r2, #12
   12e84:	469c      	mov	ip, r3
   12e86:	4688      	mov	r8, r1
   12e88:	4c03      	ldr	r4, [pc, #12]	; (12e98 <__aeabi_ddiv+0x664>)
   12e8a:	e5a1      	b.n	129d0 <__aeabi_ddiv+0x19c>
   12e8c:	000003ff 	.word	0x000003ff
   12e90:	feffffff 	.word	0xfeffffff
   12e94:	000007fe 	.word	0x000007fe
   12e98:	000007ff 	.word	0x000007ff

00012e9c <__eqdf2>:
   12e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e9e:	464f      	mov	r7, r9
   12ea0:	4646      	mov	r6, r8
   12ea2:	46d6      	mov	lr, sl
   12ea4:	005c      	lsls	r4, r3, #1
   12ea6:	b5c0      	push	{r6, r7, lr}
   12ea8:	031f      	lsls	r7, r3, #12
   12eaa:	0fdb      	lsrs	r3, r3, #31
   12eac:	469a      	mov	sl, r3
   12eae:	4b17      	ldr	r3, [pc, #92]	; (12f0c <__eqdf2+0x70>)
   12eb0:	030e      	lsls	r6, r1, #12
   12eb2:	004d      	lsls	r5, r1, #1
   12eb4:	4684      	mov	ip, r0
   12eb6:	4680      	mov	r8, r0
   12eb8:	0b36      	lsrs	r6, r6, #12
   12eba:	0d6d      	lsrs	r5, r5, #21
   12ebc:	0fc9      	lsrs	r1, r1, #31
   12ebe:	4691      	mov	r9, r2
   12ec0:	0b3f      	lsrs	r7, r7, #12
   12ec2:	0d64      	lsrs	r4, r4, #21
   12ec4:	2001      	movs	r0, #1
   12ec6:	429d      	cmp	r5, r3
   12ec8:	d008      	beq.n	12edc <__eqdf2+0x40>
   12eca:	429c      	cmp	r4, r3
   12ecc:	d001      	beq.n	12ed2 <__eqdf2+0x36>
   12ece:	42a5      	cmp	r5, r4
   12ed0:	d00b      	beq.n	12eea <__eqdf2+0x4e>
   12ed2:	bc1c      	pop	{r2, r3, r4}
   12ed4:	4690      	mov	r8, r2
   12ed6:	4699      	mov	r9, r3
   12ed8:	46a2      	mov	sl, r4
   12eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12edc:	4663      	mov	r3, ip
   12ede:	4333      	orrs	r3, r6
   12ee0:	d1f7      	bne.n	12ed2 <__eqdf2+0x36>
   12ee2:	42ac      	cmp	r4, r5
   12ee4:	d1f5      	bne.n	12ed2 <__eqdf2+0x36>
   12ee6:	433a      	orrs	r2, r7
   12ee8:	d1f3      	bne.n	12ed2 <__eqdf2+0x36>
   12eea:	2001      	movs	r0, #1
   12eec:	42be      	cmp	r6, r7
   12eee:	d1f0      	bne.n	12ed2 <__eqdf2+0x36>
   12ef0:	45c8      	cmp	r8, r9
   12ef2:	d1ee      	bne.n	12ed2 <__eqdf2+0x36>
   12ef4:	4551      	cmp	r1, sl
   12ef6:	d007      	beq.n	12f08 <__eqdf2+0x6c>
   12ef8:	2d00      	cmp	r5, #0
   12efa:	d1ea      	bne.n	12ed2 <__eqdf2+0x36>
   12efc:	4663      	mov	r3, ip
   12efe:	431e      	orrs	r6, r3
   12f00:	0030      	movs	r0, r6
   12f02:	1e46      	subs	r6, r0, #1
   12f04:	41b0      	sbcs	r0, r6
   12f06:	e7e4      	b.n	12ed2 <__eqdf2+0x36>
   12f08:	2000      	movs	r0, #0
   12f0a:	e7e2      	b.n	12ed2 <__eqdf2+0x36>
   12f0c:	000007ff 	.word	0x000007ff

00012f10 <__gedf2>:
   12f10:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f12:	4645      	mov	r5, r8
   12f14:	46de      	mov	lr, fp
   12f16:	4657      	mov	r7, sl
   12f18:	464e      	mov	r6, r9
   12f1a:	b5e0      	push	{r5, r6, r7, lr}
   12f1c:	031f      	lsls	r7, r3, #12
   12f1e:	0b3d      	lsrs	r5, r7, #12
   12f20:	4f2c      	ldr	r7, [pc, #176]	; (12fd4 <__gedf2+0xc4>)
   12f22:	030e      	lsls	r6, r1, #12
   12f24:	004c      	lsls	r4, r1, #1
   12f26:	46ab      	mov	fp, r5
   12f28:	005d      	lsls	r5, r3, #1
   12f2a:	4684      	mov	ip, r0
   12f2c:	0b36      	lsrs	r6, r6, #12
   12f2e:	0d64      	lsrs	r4, r4, #21
   12f30:	0fc9      	lsrs	r1, r1, #31
   12f32:	4690      	mov	r8, r2
   12f34:	0d6d      	lsrs	r5, r5, #21
   12f36:	0fdb      	lsrs	r3, r3, #31
   12f38:	42bc      	cmp	r4, r7
   12f3a:	d02a      	beq.n	12f92 <__gedf2+0x82>
   12f3c:	4f25      	ldr	r7, [pc, #148]	; (12fd4 <__gedf2+0xc4>)
   12f3e:	42bd      	cmp	r5, r7
   12f40:	d02d      	beq.n	12f9e <__gedf2+0x8e>
   12f42:	2c00      	cmp	r4, #0
   12f44:	d10f      	bne.n	12f66 <__gedf2+0x56>
   12f46:	4330      	orrs	r0, r6
   12f48:	0007      	movs	r7, r0
   12f4a:	4681      	mov	r9, r0
   12f4c:	4278      	negs	r0, r7
   12f4e:	4178      	adcs	r0, r7
   12f50:	b2c0      	uxtb	r0, r0
   12f52:	2d00      	cmp	r5, #0
   12f54:	d117      	bne.n	12f86 <__gedf2+0x76>
   12f56:	465f      	mov	r7, fp
   12f58:	433a      	orrs	r2, r7
   12f5a:	d114      	bne.n	12f86 <__gedf2+0x76>
   12f5c:	464b      	mov	r3, r9
   12f5e:	2000      	movs	r0, #0
   12f60:	2b00      	cmp	r3, #0
   12f62:	d00a      	beq.n	12f7a <__gedf2+0x6a>
   12f64:	e006      	b.n	12f74 <__gedf2+0x64>
   12f66:	2d00      	cmp	r5, #0
   12f68:	d102      	bne.n	12f70 <__gedf2+0x60>
   12f6a:	4658      	mov	r0, fp
   12f6c:	4302      	orrs	r2, r0
   12f6e:	d001      	beq.n	12f74 <__gedf2+0x64>
   12f70:	4299      	cmp	r1, r3
   12f72:	d018      	beq.n	12fa6 <__gedf2+0x96>
   12f74:	4248      	negs	r0, r1
   12f76:	2101      	movs	r1, #1
   12f78:	4308      	orrs	r0, r1
   12f7a:	bc3c      	pop	{r2, r3, r4, r5}
   12f7c:	4690      	mov	r8, r2
   12f7e:	4699      	mov	r9, r3
   12f80:	46a2      	mov	sl, r4
   12f82:	46ab      	mov	fp, r5
   12f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f86:	2800      	cmp	r0, #0
   12f88:	d0f2      	beq.n	12f70 <__gedf2+0x60>
   12f8a:	2001      	movs	r0, #1
   12f8c:	3b01      	subs	r3, #1
   12f8e:	4318      	orrs	r0, r3
   12f90:	e7f3      	b.n	12f7a <__gedf2+0x6a>
   12f92:	0037      	movs	r7, r6
   12f94:	4307      	orrs	r7, r0
   12f96:	d0d1      	beq.n	12f3c <__gedf2+0x2c>
   12f98:	2002      	movs	r0, #2
   12f9a:	4240      	negs	r0, r0
   12f9c:	e7ed      	b.n	12f7a <__gedf2+0x6a>
   12f9e:	465f      	mov	r7, fp
   12fa0:	4317      	orrs	r7, r2
   12fa2:	d0ce      	beq.n	12f42 <__gedf2+0x32>
   12fa4:	e7f8      	b.n	12f98 <__gedf2+0x88>
   12fa6:	42ac      	cmp	r4, r5
   12fa8:	dce4      	bgt.n	12f74 <__gedf2+0x64>
   12faa:	da03      	bge.n	12fb4 <__gedf2+0xa4>
   12fac:	1e48      	subs	r0, r1, #1
   12fae:	2101      	movs	r1, #1
   12fb0:	4308      	orrs	r0, r1
   12fb2:	e7e2      	b.n	12f7a <__gedf2+0x6a>
   12fb4:	455e      	cmp	r6, fp
   12fb6:	d8dd      	bhi.n	12f74 <__gedf2+0x64>
   12fb8:	d006      	beq.n	12fc8 <__gedf2+0xb8>
   12fba:	2000      	movs	r0, #0
   12fbc:	455e      	cmp	r6, fp
   12fbe:	d2dc      	bcs.n	12f7a <__gedf2+0x6a>
   12fc0:	2301      	movs	r3, #1
   12fc2:	1e48      	subs	r0, r1, #1
   12fc4:	4318      	orrs	r0, r3
   12fc6:	e7d8      	b.n	12f7a <__gedf2+0x6a>
   12fc8:	45c4      	cmp	ip, r8
   12fca:	d8d3      	bhi.n	12f74 <__gedf2+0x64>
   12fcc:	2000      	movs	r0, #0
   12fce:	45c4      	cmp	ip, r8
   12fd0:	d3f6      	bcc.n	12fc0 <__gedf2+0xb0>
   12fd2:	e7d2      	b.n	12f7a <__gedf2+0x6a>
   12fd4:	000007ff 	.word	0x000007ff

00012fd8 <__ledf2>:
   12fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12fda:	464e      	mov	r6, r9
   12fdc:	4645      	mov	r5, r8
   12fde:	46de      	mov	lr, fp
   12fe0:	4657      	mov	r7, sl
   12fe2:	005c      	lsls	r4, r3, #1
   12fe4:	b5e0      	push	{r5, r6, r7, lr}
   12fe6:	031f      	lsls	r7, r3, #12
   12fe8:	0fdb      	lsrs	r3, r3, #31
   12fea:	4699      	mov	r9, r3
   12fec:	4b2a      	ldr	r3, [pc, #168]	; (13098 <__ledf2+0xc0>)
   12fee:	030e      	lsls	r6, r1, #12
   12ff0:	004d      	lsls	r5, r1, #1
   12ff2:	0fc9      	lsrs	r1, r1, #31
   12ff4:	4684      	mov	ip, r0
   12ff6:	0b36      	lsrs	r6, r6, #12
   12ff8:	0d6d      	lsrs	r5, r5, #21
   12ffa:	468b      	mov	fp, r1
   12ffc:	4690      	mov	r8, r2
   12ffe:	0b3f      	lsrs	r7, r7, #12
   13000:	0d64      	lsrs	r4, r4, #21
   13002:	429d      	cmp	r5, r3
   13004:	d020      	beq.n	13048 <__ledf2+0x70>
   13006:	4b24      	ldr	r3, [pc, #144]	; (13098 <__ledf2+0xc0>)
   13008:	429c      	cmp	r4, r3
   1300a:	d022      	beq.n	13052 <__ledf2+0x7a>
   1300c:	2d00      	cmp	r5, #0
   1300e:	d112      	bne.n	13036 <__ledf2+0x5e>
   13010:	4330      	orrs	r0, r6
   13012:	4243      	negs	r3, r0
   13014:	4143      	adcs	r3, r0
   13016:	b2db      	uxtb	r3, r3
   13018:	2c00      	cmp	r4, #0
   1301a:	d01f      	beq.n	1305c <__ledf2+0x84>
   1301c:	2b00      	cmp	r3, #0
   1301e:	d00c      	beq.n	1303a <__ledf2+0x62>
   13020:	464b      	mov	r3, r9
   13022:	2001      	movs	r0, #1
   13024:	3b01      	subs	r3, #1
   13026:	4303      	orrs	r3, r0
   13028:	0018      	movs	r0, r3
   1302a:	bc3c      	pop	{r2, r3, r4, r5}
   1302c:	4690      	mov	r8, r2
   1302e:	4699      	mov	r9, r3
   13030:	46a2      	mov	sl, r4
   13032:	46ab      	mov	fp, r5
   13034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13036:	2c00      	cmp	r4, #0
   13038:	d016      	beq.n	13068 <__ledf2+0x90>
   1303a:	45cb      	cmp	fp, r9
   1303c:	d017      	beq.n	1306e <__ledf2+0x96>
   1303e:	465b      	mov	r3, fp
   13040:	4259      	negs	r1, r3
   13042:	2301      	movs	r3, #1
   13044:	430b      	orrs	r3, r1
   13046:	e7ef      	b.n	13028 <__ledf2+0x50>
   13048:	0031      	movs	r1, r6
   1304a:	2302      	movs	r3, #2
   1304c:	4301      	orrs	r1, r0
   1304e:	d1eb      	bne.n	13028 <__ledf2+0x50>
   13050:	e7d9      	b.n	13006 <__ledf2+0x2e>
   13052:	0039      	movs	r1, r7
   13054:	2302      	movs	r3, #2
   13056:	4311      	orrs	r1, r2
   13058:	d1e6      	bne.n	13028 <__ledf2+0x50>
   1305a:	e7d7      	b.n	1300c <__ledf2+0x34>
   1305c:	433a      	orrs	r2, r7
   1305e:	d1dd      	bne.n	1301c <__ledf2+0x44>
   13060:	2300      	movs	r3, #0
   13062:	2800      	cmp	r0, #0
   13064:	d0e0      	beq.n	13028 <__ledf2+0x50>
   13066:	e7ea      	b.n	1303e <__ledf2+0x66>
   13068:	433a      	orrs	r2, r7
   1306a:	d1e6      	bne.n	1303a <__ledf2+0x62>
   1306c:	e7e7      	b.n	1303e <__ledf2+0x66>
   1306e:	42a5      	cmp	r5, r4
   13070:	dce5      	bgt.n	1303e <__ledf2+0x66>
   13072:	db05      	blt.n	13080 <__ledf2+0xa8>
   13074:	42be      	cmp	r6, r7
   13076:	d8e2      	bhi.n	1303e <__ledf2+0x66>
   13078:	d007      	beq.n	1308a <__ledf2+0xb2>
   1307a:	2300      	movs	r3, #0
   1307c:	42be      	cmp	r6, r7
   1307e:	d2d3      	bcs.n	13028 <__ledf2+0x50>
   13080:	4659      	mov	r1, fp
   13082:	2301      	movs	r3, #1
   13084:	3901      	subs	r1, #1
   13086:	430b      	orrs	r3, r1
   13088:	e7ce      	b.n	13028 <__ledf2+0x50>
   1308a:	45c4      	cmp	ip, r8
   1308c:	d8d7      	bhi.n	1303e <__ledf2+0x66>
   1308e:	2300      	movs	r3, #0
   13090:	45c4      	cmp	ip, r8
   13092:	d3f5      	bcc.n	13080 <__ledf2+0xa8>
   13094:	e7c8      	b.n	13028 <__ledf2+0x50>
   13096:	46c0      	nop			; (mov r8, r8)
   13098:	000007ff 	.word	0x000007ff

0001309c <__aeabi_dmul>:
   1309c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1309e:	4657      	mov	r7, sl
   130a0:	4645      	mov	r5, r8
   130a2:	46de      	mov	lr, fp
   130a4:	464e      	mov	r6, r9
   130a6:	b5e0      	push	{r5, r6, r7, lr}
   130a8:	030c      	lsls	r4, r1, #12
   130aa:	4698      	mov	r8, r3
   130ac:	004e      	lsls	r6, r1, #1
   130ae:	0b23      	lsrs	r3, r4, #12
   130b0:	b087      	sub	sp, #28
   130b2:	0007      	movs	r7, r0
   130b4:	4692      	mov	sl, r2
   130b6:	469b      	mov	fp, r3
   130b8:	0d76      	lsrs	r6, r6, #21
   130ba:	0fcd      	lsrs	r5, r1, #31
   130bc:	2e00      	cmp	r6, #0
   130be:	d06b      	beq.n	13198 <__aeabi_dmul+0xfc>
   130c0:	4b6d      	ldr	r3, [pc, #436]	; (13278 <__aeabi_dmul+0x1dc>)
   130c2:	429e      	cmp	r6, r3
   130c4:	d035      	beq.n	13132 <__aeabi_dmul+0x96>
   130c6:	2480      	movs	r4, #128	; 0x80
   130c8:	465b      	mov	r3, fp
   130ca:	0f42      	lsrs	r2, r0, #29
   130cc:	0424      	lsls	r4, r4, #16
   130ce:	00db      	lsls	r3, r3, #3
   130d0:	4314      	orrs	r4, r2
   130d2:	431c      	orrs	r4, r3
   130d4:	00c3      	lsls	r3, r0, #3
   130d6:	4699      	mov	r9, r3
   130d8:	4b68      	ldr	r3, [pc, #416]	; (1327c <__aeabi_dmul+0x1e0>)
   130da:	46a3      	mov	fp, r4
   130dc:	469c      	mov	ip, r3
   130de:	2300      	movs	r3, #0
   130e0:	2700      	movs	r7, #0
   130e2:	4466      	add	r6, ip
   130e4:	9302      	str	r3, [sp, #8]
   130e6:	4643      	mov	r3, r8
   130e8:	031c      	lsls	r4, r3, #12
   130ea:	005a      	lsls	r2, r3, #1
   130ec:	0fdb      	lsrs	r3, r3, #31
   130ee:	4650      	mov	r0, sl
   130f0:	0b24      	lsrs	r4, r4, #12
   130f2:	0d52      	lsrs	r2, r2, #21
   130f4:	4698      	mov	r8, r3
   130f6:	d100      	bne.n	130fa <__aeabi_dmul+0x5e>
   130f8:	e076      	b.n	131e8 <__aeabi_dmul+0x14c>
   130fa:	4b5f      	ldr	r3, [pc, #380]	; (13278 <__aeabi_dmul+0x1dc>)
   130fc:	429a      	cmp	r2, r3
   130fe:	d06d      	beq.n	131dc <__aeabi_dmul+0x140>
   13100:	2380      	movs	r3, #128	; 0x80
   13102:	0f41      	lsrs	r1, r0, #29
   13104:	041b      	lsls	r3, r3, #16
   13106:	430b      	orrs	r3, r1
   13108:	495c      	ldr	r1, [pc, #368]	; (1327c <__aeabi_dmul+0x1e0>)
   1310a:	00e4      	lsls	r4, r4, #3
   1310c:	468c      	mov	ip, r1
   1310e:	431c      	orrs	r4, r3
   13110:	00c3      	lsls	r3, r0, #3
   13112:	2000      	movs	r0, #0
   13114:	4462      	add	r2, ip
   13116:	4641      	mov	r1, r8
   13118:	18b6      	adds	r6, r6, r2
   1311a:	4069      	eors	r1, r5
   1311c:	1c72      	adds	r2, r6, #1
   1311e:	9101      	str	r1, [sp, #4]
   13120:	4694      	mov	ip, r2
   13122:	4307      	orrs	r7, r0
   13124:	2f0f      	cmp	r7, #15
   13126:	d900      	bls.n	1312a <__aeabi_dmul+0x8e>
   13128:	e0b0      	b.n	1328c <__aeabi_dmul+0x1f0>
   1312a:	4a55      	ldr	r2, [pc, #340]	; (13280 <__aeabi_dmul+0x1e4>)
   1312c:	00bf      	lsls	r7, r7, #2
   1312e:	59d2      	ldr	r2, [r2, r7]
   13130:	4697      	mov	pc, r2
   13132:	465b      	mov	r3, fp
   13134:	4303      	orrs	r3, r0
   13136:	4699      	mov	r9, r3
   13138:	d000      	beq.n	1313c <__aeabi_dmul+0xa0>
   1313a:	e087      	b.n	1324c <__aeabi_dmul+0x1b0>
   1313c:	2300      	movs	r3, #0
   1313e:	469b      	mov	fp, r3
   13140:	3302      	adds	r3, #2
   13142:	2708      	movs	r7, #8
   13144:	9302      	str	r3, [sp, #8]
   13146:	e7ce      	b.n	130e6 <__aeabi_dmul+0x4a>
   13148:	4642      	mov	r2, r8
   1314a:	9201      	str	r2, [sp, #4]
   1314c:	2802      	cmp	r0, #2
   1314e:	d067      	beq.n	13220 <__aeabi_dmul+0x184>
   13150:	2803      	cmp	r0, #3
   13152:	d100      	bne.n	13156 <__aeabi_dmul+0xba>
   13154:	e20e      	b.n	13574 <__aeabi_dmul+0x4d8>
   13156:	2801      	cmp	r0, #1
   13158:	d000      	beq.n	1315c <__aeabi_dmul+0xc0>
   1315a:	e162      	b.n	13422 <__aeabi_dmul+0x386>
   1315c:	2300      	movs	r3, #0
   1315e:	2400      	movs	r4, #0
   13160:	2200      	movs	r2, #0
   13162:	4699      	mov	r9, r3
   13164:	9901      	ldr	r1, [sp, #4]
   13166:	4001      	ands	r1, r0
   13168:	b2cd      	uxtb	r5, r1
   1316a:	2100      	movs	r1, #0
   1316c:	0312      	lsls	r2, r2, #12
   1316e:	0d0b      	lsrs	r3, r1, #20
   13170:	0b12      	lsrs	r2, r2, #12
   13172:	051b      	lsls	r3, r3, #20
   13174:	4313      	orrs	r3, r2
   13176:	4a43      	ldr	r2, [pc, #268]	; (13284 <__aeabi_dmul+0x1e8>)
   13178:	0524      	lsls	r4, r4, #20
   1317a:	4013      	ands	r3, r2
   1317c:	431c      	orrs	r4, r3
   1317e:	0064      	lsls	r4, r4, #1
   13180:	07ed      	lsls	r5, r5, #31
   13182:	0864      	lsrs	r4, r4, #1
   13184:	432c      	orrs	r4, r5
   13186:	4648      	mov	r0, r9
   13188:	0021      	movs	r1, r4
   1318a:	b007      	add	sp, #28
   1318c:	bc3c      	pop	{r2, r3, r4, r5}
   1318e:	4690      	mov	r8, r2
   13190:	4699      	mov	r9, r3
   13192:	46a2      	mov	sl, r4
   13194:	46ab      	mov	fp, r5
   13196:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13198:	4303      	orrs	r3, r0
   1319a:	4699      	mov	r9, r3
   1319c:	d04f      	beq.n	1323e <__aeabi_dmul+0x1a2>
   1319e:	465b      	mov	r3, fp
   131a0:	2b00      	cmp	r3, #0
   131a2:	d100      	bne.n	131a6 <__aeabi_dmul+0x10a>
   131a4:	e189      	b.n	134ba <__aeabi_dmul+0x41e>
   131a6:	4658      	mov	r0, fp
   131a8:	f000 feb8 	bl	13f1c <__clzsi2>
   131ac:	0003      	movs	r3, r0
   131ae:	3b0b      	subs	r3, #11
   131b0:	2b1c      	cmp	r3, #28
   131b2:	dd00      	ble.n	131b6 <__aeabi_dmul+0x11a>
   131b4:	e17a      	b.n	134ac <__aeabi_dmul+0x410>
   131b6:	221d      	movs	r2, #29
   131b8:	1ad3      	subs	r3, r2, r3
   131ba:	003a      	movs	r2, r7
   131bc:	0001      	movs	r1, r0
   131be:	465c      	mov	r4, fp
   131c0:	40da      	lsrs	r2, r3
   131c2:	3908      	subs	r1, #8
   131c4:	408c      	lsls	r4, r1
   131c6:	0013      	movs	r3, r2
   131c8:	408f      	lsls	r7, r1
   131ca:	4323      	orrs	r3, r4
   131cc:	469b      	mov	fp, r3
   131ce:	46b9      	mov	r9, r7
   131d0:	2300      	movs	r3, #0
   131d2:	4e2d      	ldr	r6, [pc, #180]	; (13288 <__aeabi_dmul+0x1ec>)
   131d4:	2700      	movs	r7, #0
   131d6:	1a36      	subs	r6, r6, r0
   131d8:	9302      	str	r3, [sp, #8]
   131da:	e784      	b.n	130e6 <__aeabi_dmul+0x4a>
   131dc:	4653      	mov	r3, sl
   131de:	4323      	orrs	r3, r4
   131e0:	d12a      	bne.n	13238 <__aeabi_dmul+0x19c>
   131e2:	2400      	movs	r4, #0
   131e4:	2002      	movs	r0, #2
   131e6:	e796      	b.n	13116 <__aeabi_dmul+0x7a>
   131e8:	4653      	mov	r3, sl
   131ea:	4323      	orrs	r3, r4
   131ec:	d020      	beq.n	13230 <__aeabi_dmul+0x194>
   131ee:	2c00      	cmp	r4, #0
   131f0:	d100      	bne.n	131f4 <__aeabi_dmul+0x158>
   131f2:	e157      	b.n	134a4 <__aeabi_dmul+0x408>
   131f4:	0020      	movs	r0, r4
   131f6:	f000 fe91 	bl	13f1c <__clzsi2>
   131fa:	0003      	movs	r3, r0
   131fc:	3b0b      	subs	r3, #11
   131fe:	2b1c      	cmp	r3, #28
   13200:	dd00      	ble.n	13204 <__aeabi_dmul+0x168>
   13202:	e149      	b.n	13498 <__aeabi_dmul+0x3fc>
   13204:	211d      	movs	r1, #29
   13206:	1acb      	subs	r3, r1, r3
   13208:	4651      	mov	r1, sl
   1320a:	0002      	movs	r2, r0
   1320c:	40d9      	lsrs	r1, r3
   1320e:	4653      	mov	r3, sl
   13210:	3a08      	subs	r2, #8
   13212:	4094      	lsls	r4, r2
   13214:	4093      	lsls	r3, r2
   13216:	430c      	orrs	r4, r1
   13218:	4a1b      	ldr	r2, [pc, #108]	; (13288 <__aeabi_dmul+0x1ec>)
   1321a:	1a12      	subs	r2, r2, r0
   1321c:	2000      	movs	r0, #0
   1321e:	e77a      	b.n	13116 <__aeabi_dmul+0x7a>
   13220:	2501      	movs	r5, #1
   13222:	9b01      	ldr	r3, [sp, #4]
   13224:	4c14      	ldr	r4, [pc, #80]	; (13278 <__aeabi_dmul+0x1dc>)
   13226:	401d      	ands	r5, r3
   13228:	2300      	movs	r3, #0
   1322a:	2200      	movs	r2, #0
   1322c:	4699      	mov	r9, r3
   1322e:	e79c      	b.n	1316a <__aeabi_dmul+0xce>
   13230:	2400      	movs	r4, #0
   13232:	2200      	movs	r2, #0
   13234:	2001      	movs	r0, #1
   13236:	e76e      	b.n	13116 <__aeabi_dmul+0x7a>
   13238:	4653      	mov	r3, sl
   1323a:	2003      	movs	r0, #3
   1323c:	e76b      	b.n	13116 <__aeabi_dmul+0x7a>
   1323e:	2300      	movs	r3, #0
   13240:	469b      	mov	fp, r3
   13242:	3301      	adds	r3, #1
   13244:	2704      	movs	r7, #4
   13246:	2600      	movs	r6, #0
   13248:	9302      	str	r3, [sp, #8]
   1324a:	e74c      	b.n	130e6 <__aeabi_dmul+0x4a>
   1324c:	2303      	movs	r3, #3
   1324e:	4681      	mov	r9, r0
   13250:	270c      	movs	r7, #12
   13252:	9302      	str	r3, [sp, #8]
   13254:	e747      	b.n	130e6 <__aeabi_dmul+0x4a>
   13256:	2280      	movs	r2, #128	; 0x80
   13258:	2300      	movs	r3, #0
   1325a:	2500      	movs	r5, #0
   1325c:	0312      	lsls	r2, r2, #12
   1325e:	4699      	mov	r9, r3
   13260:	4c05      	ldr	r4, [pc, #20]	; (13278 <__aeabi_dmul+0x1dc>)
   13262:	e782      	b.n	1316a <__aeabi_dmul+0xce>
   13264:	465c      	mov	r4, fp
   13266:	464b      	mov	r3, r9
   13268:	9802      	ldr	r0, [sp, #8]
   1326a:	e76f      	b.n	1314c <__aeabi_dmul+0xb0>
   1326c:	465c      	mov	r4, fp
   1326e:	464b      	mov	r3, r9
   13270:	9501      	str	r5, [sp, #4]
   13272:	9802      	ldr	r0, [sp, #8]
   13274:	e76a      	b.n	1314c <__aeabi_dmul+0xb0>
   13276:	46c0      	nop			; (mov r8, r8)
   13278:	000007ff 	.word	0x000007ff
   1327c:	fffffc01 	.word	0xfffffc01
   13280:	000169f0 	.word	0x000169f0
   13284:	800fffff 	.word	0x800fffff
   13288:	fffffc0d 	.word	0xfffffc0d
   1328c:	464a      	mov	r2, r9
   1328e:	4649      	mov	r1, r9
   13290:	0c17      	lsrs	r7, r2, #16
   13292:	0c1a      	lsrs	r2, r3, #16
   13294:	041b      	lsls	r3, r3, #16
   13296:	0c1b      	lsrs	r3, r3, #16
   13298:	0408      	lsls	r0, r1, #16
   1329a:	0019      	movs	r1, r3
   1329c:	0c00      	lsrs	r0, r0, #16
   1329e:	4341      	muls	r1, r0
   132a0:	0015      	movs	r5, r2
   132a2:	4688      	mov	r8, r1
   132a4:	0019      	movs	r1, r3
   132a6:	437d      	muls	r5, r7
   132a8:	4379      	muls	r1, r7
   132aa:	9503      	str	r5, [sp, #12]
   132ac:	4689      	mov	r9, r1
   132ae:	0029      	movs	r1, r5
   132b0:	0015      	movs	r5, r2
   132b2:	4345      	muls	r5, r0
   132b4:	444d      	add	r5, r9
   132b6:	9502      	str	r5, [sp, #8]
   132b8:	4645      	mov	r5, r8
   132ba:	0c2d      	lsrs	r5, r5, #16
   132bc:	46aa      	mov	sl, r5
   132be:	9d02      	ldr	r5, [sp, #8]
   132c0:	4455      	add	r5, sl
   132c2:	45a9      	cmp	r9, r5
   132c4:	d906      	bls.n	132d4 <__aeabi_dmul+0x238>
   132c6:	468a      	mov	sl, r1
   132c8:	2180      	movs	r1, #128	; 0x80
   132ca:	0249      	lsls	r1, r1, #9
   132cc:	4689      	mov	r9, r1
   132ce:	44ca      	add	sl, r9
   132d0:	4651      	mov	r1, sl
   132d2:	9103      	str	r1, [sp, #12]
   132d4:	0c29      	lsrs	r1, r5, #16
   132d6:	9104      	str	r1, [sp, #16]
   132d8:	4641      	mov	r1, r8
   132da:	0409      	lsls	r1, r1, #16
   132dc:	042d      	lsls	r5, r5, #16
   132de:	0c09      	lsrs	r1, r1, #16
   132e0:	4688      	mov	r8, r1
   132e2:	0029      	movs	r1, r5
   132e4:	0c25      	lsrs	r5, r4, #16
   132e6:	0424      	lsls	r4, r4, #16
   132e8:	4441      	add	r1, r8
   132ea:	0c24      	lsrs	r4, r4, #16
   132ec:	9105      	str	r1, [sp, #20]
   132ee:	0021      	movs	r1, r4
   132f0:	4341      	muls	r1, r0
   132f2:	4688      	mov	r8, r1
   132f4:	0021      	movs	r1, r4
   132f6:	4379      	muls	r1, r7
   132f8:	468a      	mov	sl, r1
   132fa:	4368      	muls	r0, r5
   132fc:	4641      	mov	r1, r8
   132fe:	4450      	add	r0, sl
   13300:	4681      	mov	r9, r0
   13302:	0c08      	lsrs	r0, r1, #16
   13304:	4448      	add	r0, r9
   13306:	436f      	muls	r7, r5
   13308:	4582      	cmp	sl, r0
   1330a:	d903      	bls.n	13314 <__aeabi_dmul+0x278>
   1330c:	2180      	movs	r1, #128	; 0x80
   1330e:	0249      	lsls	r1, r1, #9
   13310:	4689      	mov	r9, r1
   13312:	444f      	add	r7, r9
   13314:	0c01      	lsrs	r1, r0, #16
   13316:	4689      	mov	r9, r1
   13318:	0039      	movs	r1, r7
   1331a:	4449      	add	r1, r9
   1331c:	9102      	str	r1, [sp, #8]
   1331e:	4641      	mov	r1, r8
   13320:	040f      	lsls	r7, r1, #16
   13322:	9904      	ldr	r1, [sp, #16]
   13324:	0c3f      	lsrs	r7, r7, #16
   13326:	4688      	mov	r8, r1
   13328:	0400      	lsls	r0, r0, #16
   1332a:	19c0      	adds	r0, r0, r7
   1332c:	4480      	add	r8, r0
   1332e:	4641      	mov	r1, r8
   13330:	9104      	str	r1, [sp, #16]
   13332:	4659      	mov	r1, fp
   13334:	0c0f      	lsrs	r7, r1, #16
   13336:	0409      	lsls	r1, r1, #16
   13338:	0c09      	lsrs	r1, r1, #16
   1333a:	4688      	mov	r8, r1
   1333c:	4359      	muls	r1, r3
   1333e:	468a      	mov	sl, r1
   13340:	0039      	movs	r1, r7
   13342:	4351      	muls	r1, r2
   13344:	4689      	mov	r9, r1
   13346:	4641      	mov	r1, r8
   13348:	434a      	muls	r2, r1
   1334a:	4651      	mov	r1, sl
   1334c:	0c09      	lsrs	r1, r1, #16
   1334e:	468b      	mov	fp, r1
   13350:	437b      	muls	r3, r7
   13352:	18d2      	adds	r2, r2, r3
   13354:	445a      	add	r2, fp
   13356:	4293      	cmp	r3, r2
   13358:	d903      	bls.n	13362 <__aeabi_dmul+0x2c6>
   1335a:	2380      	movs	r3, #128	; 0x80
   1335c:	025b      	lsls	r3, r3, #9
   1335e:	469b      	mov	fp, r3
   13360:	44d9      	add	r9, fp
   13362:	4651      	mov	r1, sl
   13364:	0409      	lsls	r1, r1, #16
   13366:	0c09      	lsrs	r1, r1, #16
   13368:	468a      	mov	sl, r1
   1336a:	4641      	mov	r1, r8
   1336c:	4361      	muls	r1, r4
   1336e:	437c      	muls	r4, r7
   13370:	0c13      	lsrs	r3, r2, #16
   13372:	0412      	lsls	r2, r2, #16
   13374:	444b      	add	r3, r9
   13376:	4452      	add	r2, sl
   13378:	46a1      	mov	r9, r4
   1337a:	468a      	mov	sl, r1
   1337c:	003c      	movs	r4, r7
   1337e:	4641      	mov	r1, r8
   13380:	436c      	muls	r4, r5
   13382:	434d      	muls	r5, r1
   13384:	4651      	mov	r1, sl
   13386:	444d      	add	r5, r9
   13388:	0c0f      	lsrs	r7, r1, #16
   1338a:	197d      	adds	r5, r7, r5
   1338c:	45a9      	cmp	r9, r5
   1338e:	d903      	bls.n	13398 <__aeabi_dmul+0x2fc>
   13390:	2180      	movs	r1, #128	; 0x80
   13392:	0249      	lsls	r1, r1, #9
   13394:	4688      	mov	r8, r1
   13396:	4444      	add	r4, r8
   13398:	9f04      	ldr	r7, [sp, #16]
   1339a:	9903      	ldr	r1, [sp, #12]
   1339c:	46b8      	mov	r8, r7
   1339e:	4441      	add	r1, r8
   133a0:	468b      	mov	fp, r1
   133a2:	4583      	cmp	fp, r0
   133a4:	4180      	sbcs	r0, r0
   133a6:	4241      	negs	r1, r0
   133a8:	4688      	mov	r8, r1
   133aa:	4651      	mov	r1, sl
   133ac:	0408      	lsls	r0, r1, #16
   133ae:	042f      	lsls	r7, r5, #16
   133b0:	0c00      	lsrs	r0, r0, #16
   133b2:	183f      	adds	r7, r7, r0
   133b4:	4658      	mov	r0, fp
   133b6:	9902      	ldr	r1, [sp, #8]
   133b8:	1810      	adds	r0, r2, r0
   133ba:	4689      	mov	r9, r1
   133bc:	4290      	cmp	r0, r2
   133be:	4192      	sbcs	r2, r2
   133c0:	444f      	add	r7, r9
   133c2:	46ba      	mov	sl, r7
   133c4:	4252      	negs	r2, r2
   133c6:	4699      	mov	r9, r3
   133c8:	4693      	mov	fp, r2
   133ca:	44c2      	add	sl, r8
   133cc:	44d1      	add	r9, sl
   133ce:	44cb      	add	fp, r9
   133d0:	428f      	cmp	r7, r1
   133d2:	41bf      	sbcs	r7, r7
   133d4:	45c2      	cmp	sl, r8
   133d6:	4189      	sbcs	r1, r1
   133d8:	4599      	cmp	r9, r3
   133da:	419b      	sbcs	r3, r3
   133dc:	4593      	cmp	fp, r2
   133de:	4192      	sbcs	r2, r2
   133e0:	427f      	negs	r7, r7
   133e2:	4249      	negs	r1, r1
   133e4:	0c2d      	lsrs	r5, r5, #16
   133e6:	4252      	negs	r2, r2
   133e8:	430f      	orrs	r7, r1
   133ea:	425b      	negs	r3, r3
   133ec:	4313      	orrs	r3, r2
   133ee:	197f      	adds	r7, r7, r5
   133f0:	18ff      	adds	r7, r7, r3
   133f2:	465b      	mov	r3, fp
   133f4:	193c      	adds	r4, r7, r4
   133f6:	0ddb      	lsrs	r3, r3, #23
   133f8:	9a05      	ldr	r2, [sp, #20]
   133fa:	0264      	lsls	r4, r4, #9
   133fc:	431c      	orrs	r4, r3
   133fe:	0243      	lsls	r3, r0, #9
   13400:	4313      	orrs	r3, r2
   13402:	1e5d      	subs	r5, r3, #1
   13404:	41ab      	sbcs	r3, r5
   13406:	465a      	mov	r2, fp
   13408:	0dc0      	lsrs	r0, r0, #23
   1340a:	4303      	orrs	r3, r0
   1340c:	0252      	lsls	r2, r2, #9
   1340e:	4313      	orrs	r3, r2
   13410:	01e2      	lsls	r2, r4, #7
   13412:	d556      	bpl.n	134c2 <__aeabi_dmul+0x426>
   13414:	2001      	movs	r0, #1
   13416:	085a      	lsrs	r2, r3, #1
   13418:	4003      	ands	r3, r0
   1341a:	4313      	orrs	r3, r2
   1341c:	07e2      	lsls	r2, r4, #31
   1341e:	4313      	orrs	r3, r2
   13420:	0864      	lsrs	r4, r4, #1
   13422:	485a      	ldr	r0, [pc, #360]	; (1358c <__aeabi_dmul+0x4f0>)
   13424:	4460      	add	r0, ip
   13426:	2800      	cmp	r0, #0
   13428:	dd4d      	ble.n	134c6 <__aeabi_dmul+0x42a>
   1342a:	075a      	lsls	r2, r3, #29
   1342c:	d009      	beq.n	13442 <__aeabi_dmul+0x3a6>
   1342e:	220f      	movs	r2, #15
   13430:	401a      	ands	r2, r3
   13432:	2a04      	cmp	r2, #4
   13434:	d005      	beq.n	13442 <__aeabi_dmul+0x3a6>
   13436:	1d1a      	adds	r2, r3, #4
   13438:	429a      	cmp	r2, r3
   1343a:	419b      	sbcs	r3, r3
   1343c:	425b      	negs	r3, r3
   1343e:	18e4      	adds	r4, r4, r3
   13440:	0013      	movs	r3, r2
   13442:	01e2      	lsls	r2, r4, #7
   13444:	d504      	bpl.n	13450 <__aeabi_dmul+0x3b4>
   13446:	2080      	movs	r0, #128	; 0x80
   13448:	4a51      	ldr	r2, [pc, #324]	; (13590 <__aeabi_dmul+0x4f4>)
   1344a:	00c0      	lsls	r0, r0, #3
   1344c:	4014      	ands	r4, r2
   1344e:	4460      	add	r0, ip
   13450:	4a50      	ldr	r2, [pc, #320]	; (13594 <__aeabi_dmul+0x4f8>)
   13452:	4290      	cmp	r0, r2
   13454:	dd00      	ble.n	13458 <__aeabi_dmul+0x3bc>
   13456:	e6e3      	b.n	13220 <__aeabi_dmul+0x184>
   13458:	2501      	movs	r5, #1
   1345a:	08db      	lsrs	r3, r3, #3
   1345c:	0762      	lsls	r2, r4, #29
   1345e:	431a      	orrs	r2, r3
   13460:	0264      	lsls	r4, r4, #9
   13462:	9b01      	ldr	r3, [sp, #4]
   13464:	4691      	mov	r9, r2
   13466:	0b22      	lsrs	r2, r4, #12
   13468:	0544      	lsls	r4, r0, #21
   1346a:	0d64      	lsrs	r4, r4, #21
   1346c:	401d      	ands	r5, r3
   1346e:	e67c      	b.n	1316a <__aeabi_dmul+0xce>
   13470:	2280      	movs	r2, #128	; 0x80
   13472:	4659      	mov	r1, fp
   13474:	0312      	lsls	r2, r2, #12
   13476:	4211      	tst	r1, r2
   13478:	d008      	beq.n	1348c <__aeabi_dmul+0x3f0>
   1347a:	4214      	tst	r4, r2
   1347c:	d106      	bne.n	1348c <__aeabi_dmul+0x3f0>
   1347e:	4322      	orrs	r2, r4
   13480:	0312      	lsls	r2, r2, #12
   13482:	0b12      	lsrs	r2, r2, #12
   13484:	4645      	mov	r5, r8
   13486:	4699      	mov	r9, r3
   13488:	4c43      	ldr	r4, [pc, #268]	; (13598 <__aeabi_dmul+0x4fc>)
   1348a:	e66e      	b.n	1316a <__aeabi_dmul+0xce>
   1348c:	465b      	mov	r3, fp
   1348e:	431a      	orrs	r2, r3
   13490:	0312      	lsls	r2, r2, #12
   13492:	0b12      	lsrs	r2, r2, #12
   13494:	4c40      	ldr	r4, [pc, #256]	; (13598 <__aeabi_dmul+0x4fc>)
   13496:	e668      	b.n	1316a <__aeabi_dmul+0xce>
   13498:	0003      	movs	r3, r0
   1349a:	4654      	mov	r4, sl
   1349c:	3b28      	subs	r3, #40	; 0x28
   1349e:	409c      	lsls	r4, r3
   134a0:	2300      	movs	r3, #0
   134a2:	e6b9      	b.n	13218 <__aeabi_dmul+0x17c>
   134a4:	f000 fd3a 	bl	13f1c <__clzsi2>
   134a8:	3020      	adds	r0, #32
   134aa:	e6a6      	b.n	131fa <__aeabi_dmul+0x15e>
   134ac:	0003      	movs	r3, r0
   134ae:	3b28      	subs	r3, #40	; 0x28
   134b0:	409f      	lsls	r7, r3
   134b2:	2300      	movs	r3, #0
   134b4:	46bb      	mov	fp, r7
   134b6:	4699      	mov	r9, r3
   134b8:	e68a      	b.n	131d0 <__aeabi_dmul+0x134>
   134ba:	f000 fd2f 	bl	13f1c <__clzsi2>
   134be:	3020      	adds	r0, #32
   134c0:	e674      	b.n	131ac <__aeabi_dmul+0x110>
   134c2:	46b4      	mov	ip, r6
   134c4:	e7ad      	b.n	13422 <__aeabi_dmul+0x386>
   134c6:	2501      	movs	r5, #1
   134c8:	1a2a      	subs	r2, r5, r0
   134ca:	2a38      	cmp	r2, #56	; 0x38
   134cc:	dd06      	ble.n	134dc <__aeabi_dmul+0x440>
   134ce:	9b01      	ldr	r3, [sp, #4]
   134d0:	2400      	movs	r4, #0
   134d2:	401d      	ands	r5, r3
   134d4:	2300      	movs	r3, #0
   134d6:	2200      	movs	r2, #0
   134d8:	4699      	mov	r9, r3
   134da:	e646      	b.n	1316a <__aeabi_dmul+0xce>
   134dc:	2a1f      	cmp	r2, #31
   134de:	dc21      	bgt.n	13524 <__aeabi_dmul+0x488>
   134e0:	2520      	movs	r5, #32
   134e2:	0020      	movs	r0, r4
   134e4:	1aad      	subs	r5, r5, r2
   134e6:	001e      	movs	r6, r3
   134e8:	40ab      	lsls	r3, r5
   134ea:	40a8      	lsls	r0, r5
   134ec:	40d6      	lsrs	r6, r2
   134ee:	1e5d      	subs	r5, r3, #1
   134f0:	41ab      	sbcs	r3, r5
   134f2:	4330      	orrs	r0, r6
   134f4:	4318      	orrs	r0, r3
   134f6:	40d4      	lsrs	r4, r2
   134f8:	0743      	lsls	r3, r0, #29
   134fa:	d009      	beq.n	13510 <__aeabi_dmul+0x474>
   134fc:	230f      	movs	r3, #15
   134fe:	4003      	ands	r3, r0
   13500:	2b04      	cmp	r3, #4
   13502:	d005      	beq.n	13510 <__aeabi_dmul+0x474>
   13504:	0003      	movs	r3, r0
   13506:	1d18      	adds	r0, r3, #4
   13508:	4298      	cmp	r0, r3
   1350a:	419b      	sbcs	r3, r3
   1350c:	425b      	negs	r3, r3
   1350e:	18e4      	adds	r4, r4, r3
   13510:	0223      	lsls	r3, r4, #8
   13512:	d521      	bpl.n	13558 <__aeabi_dmul+0x4bc>
   13514:	2501      	movs	r5, #1
   13516:	9b01      	ldr	r3, [sp, #4]
   13518:	2401      	movs	r4, #1
   1351a:	401d      	ands	r5, r3
   1351c:	2300      	movs	r3, #0
   1351e:	2200      	movs	r2, #0
   13520:	4699      	mov	r9, r3
   13522:	e622      	b.n	1316a <__aeabi_dmul+0xce>
   13524:	251f      	movs	r5, #31
   13526:	0021      	movs	r1, r4
   13528:	426d      	negs	r5, r5
   1352a:	1a28      	subs	r0, r5, r0
   1352c:	40c1      	lsrs	r1, r0
   1352e:	0008      	movs	r0, r1
   13530:	2a20      	cmp	r2, #32
   13532:	d01d      	beq.n	13570 <__aeabi_dmul+0x4d4>
   13534:	355f      	adds	r5, #95	; 0x5f
   13536:	1aaa      	subs	r2, r5, r2
   13538:	4094      	lsls	r4, r2
   1353a:	4323      	orrs	r3, r4
   1353c:	1e5c      	subs	r4, r3, #1
   1353e:	41a3      	sbcs	r3, r4
   13540:	2507      	movs	r5, #7
   13542:	4303      	orrs	r3, r0
   13544:	401d      	ands	r5, r3
   13546:	2200      	movs	r2, #0
   13548:	2d00      	cmp	r5, #0
   1354a:	d009      	beq.n	13560 <__aeabi_dmul+0x4c4>
   1354c:	220f      	movs	r2, #15
   1354e:	2400      	movs	r4, #0
   13550:	401a      	ands	r2, r3
   13552:	0018      	movs	r0, r3
   13554:	2a04      	cmp	r2, #4
   13556:	d1d6      	bne.n	13506 <__aeabi_dmul+0x46a>
   13558:	0003      	movs	r3, r0
   1355a:	0765      	lsls	r5, r4, #29
   1355c:	0264      	lsls	r4, r4, #9
   1355e:	0b22      	lsrs	r2, r4, #12
   13560:	08db      	lsrs	r3, r3, #3
   13562:	432b      	orrs	r3, r5
   13564:	2501      	movs	r5, #1
   13566:	4699      	mov	r9, r3
   13568:	9b01      	ldr	r3, [sp, #4]
   1356a:	2400      	movs	r4, #0
   1356c:	401d      	ands	r5, r3
   1356e:	e5fc      	b.n	1316a <__aeabi_dmul+0xce>
   13570:	2400      	movs	r4, #0
   13572:	e7e2      	b.n	1353a <__aeabi_dmul+0x49e>
   13574:	2280      	movs	r2, #128	; 0x80
   13576:	2501      	movs	r5, #1
   13578:	0312      	lsls	r2, r2, #12
   1357a:	4322      	orrs	r2, r4
   1357c:	9901      	ldr	r1, [sp, #4]
   1357e:	0312      	lsls	r2, r2, #12
   13580:	0b12      	lsrs	r2, r2, #12
   13582:	400d      	ands	r5, r1
   13584:	4699      	mov	r9, r3
   13586:	4c04      	ldr	r4, [pc, #16]	; (13598 <__aeabi_dmul+0x4fc>)
   13588:	e5ef      	b.n	1316a <__aeabi_dmul+0xce>
   1358a:	46c0      	nop			; (mov r8, r8)
   1358c:	000003ff 	.word	0x000003ff
   13590:	feffffff 	.word	0xfeffffff
   13594:	000007fe 	.word	0x000007fe
   13598:	000007ff 	.word	0x000007ff

0001359c <__aeabi_dsub>:
   1359c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1359e:	4646      	mov	r6, r8
   135a0:	46d6      	mov	lr, sl
   135a2:	464f      	mov	r7, r9
   135a4:	030c      	lsls	r4, r1, #12
   135a6:	b5c0      	push	{r6, r7, lr}
   135a8:	0fcd      	lsrs	r5, r1, #31
   135aa:	004e      	lsls	r6, r1, #1
   135ac:	0a61      	lsrs	r1, r4, #9
   135ae:	0f44      	lsrs	r4, r0, #29
   135b0:	430c      	orrs	r4, r1
   135b2:	00c1      	lsls	r1, r0, #3
   135b4:	0058      	lsls	r0, r3, #1
   135b6:	0d40      	lsrs	r0, r0, #21
   135b8:	4684      	mov	ip, r0
   135ba:	468a      	mov	sl, r1
   135bc:	000f      	movs	r7, r1
   135be:	0319      	lsls	r1, r3, #12
   135c0:	0f50      	lsrs	r0, r2, #29
   135c2:	0a49      	lsrs	r1, r1, #9
   135c4:	4301      	orrs	r1, r0
   135c6:	48c6      	ldr	r0, [pc, #792]	; (138e0 <__aeabi_dsub+0x344>)
   135c8:	0d76      	lsrs	r6, r6, #21
   135ca:	46a8      	mov	r8, r5
   135cc:	0fdb      	lsrs	r3, r3, #31
   135ce:	00d2      	lsls	r2, r2, #3
   135d0:	4584      	cmp	ip, r0
   135d2:	d100      	bne.n	135d6 <__aeabi_dsub+0x3a>
   135d4:	e0d8      	b.n	13788 <__aeabi_dsub+0x1ec>
   135d6:	2001      	movs	r0, #1
   135d8:	4043      	eors	r3, r0
   135da:	42ab      	cmp	r3, r5
   135dc:	d100      	bne.n	135e0 <__aeabi_dsub+0x44>
   135de:	e0a6      	b.n	1372e <__aeabi_dsub+0x192>
   135e0:	4660      	mov	r0, ip
   135e2:	1a35      	subs	r5, r6, r0
   135e4:	2d00      	cmp	r5, #0
   135e6:	dc00      	bgt.n	135ea <__aeabi_dsub+0x4e>
   135e8:	e105      	b.n	137f6 <__aeabi_dsub+0x25a>
   135ea:	2800      	cmp	r0, #0
   135ec:	d110      	bne.n	13610 <__aeabi_dsub+0x74>
   135ee:	000b      	movs	r3, r1
   135f0:	4313      	orrs	r3, r2
   135f2:	d100      	bne.n	135f6 <__aeabi_dsub+0x5a>
   135f4:	e0d7      	b.n	137a6 <__aeabi_dsub+0x20a>
   135f6:	1e6b      	subs	r3, r5, #1
   135f8:	2b00      	cmp	r3, #0
   135fa:	d000      	beq.n	135fe <__aeabi_dsub+0x62>
   135fc:	e14b      	b.n	13896 <__aeabi_dsub+0x2fa>
   135fe:	4653      	mov	r3, sl
   13600:	1a9f      	subs	r7, r3, r2
   13602:	45ba      	cmp	sl, r7
   13604:	4180      	sbcs	r0, r0
   13606:	1a64      	subs	r4, r4, r1
   13608:	4240      	negs	r0, r0
   1360a:	1a24      	subs	r4, r4, r0
   1360c:	2601      	movs	r6, #1
   1360e:	e01e      	b.n	1364e <__aeabi_dsub+0xb2>
   13610:	4bb3      	ldr	r3, [pc, #716]	; (138e0 <__aeabi_dsub+0x344>)
   13612:	429e      	cmp	r6, r3
   13614:	d048      	beq.n	136a8 <__aeabi_dsub+0x10c>
   13616:	2380      	movs	r3, #128	; 0x80
   13618:	041b      	lsls	r3, r3, #16
   1361a:	4319      	orrs	r1, r3
   1361c:	2d38      	cmp	r5, #56	; 0x38
   1361e:	dd00      	ble.n	13622 <__aeabi_dsub+0x86>
   13620:	e119      	b.n	13856 <__aeabi_dsub+0x2ba>
   13622:	2d1f      	cmp	r5, #31
   13624:	dd00      	ble.n	13628 <__aeabi_dsub+0x8c>
   13626:	e14c      	b.n	138c2 <__aeabi_dsub+0x326>
   13628:	2320      	movs	r3, #32
   1362a:	000f      	movs	r7, r1
   1362c:	1b5b      	subs	r3, r3, r5
   1362e:	0010      	movs	r0, r2
   13630:	409a      	lsls	r2, r3
   13632:	409f      	lsls	r7, r3
   13634:	40e8      	lsrs	r0, r5
   13636:	1e53      	subs	r3, r2, #1
   13638:	419a      	sbcs	r2, r3
   1363a:	40e9      	lsrs	r1, r5
   1363c:	4307      	orrs	r7, r0
   1363e:	4317      	orrs	r7, r2
   13640:	4653      	mov	r3, sl
   13642:	1bdf      	subs	r7, r3, r7
   13644:	1a61      	subs	r1, r4, r1
   13646:	45ba      	cmp	sl, r7
   13648:	41a4      	sbcs	r4, r4
   1364a:	4264      	negs	r4, r4
   1364c:	1b0c      	subs	r4, r1, r4
   1364e:	0223      	lsls	r3, r4, #8
   13650:	d400      	bmi.n	13654 <__aeabi_dsub+0xb8>
   13652:	e0c5      	b.n	137e0 <__aeabi_dsub+0x244>
   13654:	0264      	lsls	r4, r4, #9
   13656:	0a65      	lsrs	r5, r4, #9
   13658:	2d00      	cmp	r5, #0
   1365a:	d100      	bne.n	1365e <__aeabi_dsub+0xc2>
   1365c:	e0f6      	b.n	1384c <__aeabi_dsub+0x2b0>
   1365e:	0028      	movs	r0, r5
   13660:	f000 fc5c 	bl	13f1c <__clzsi2>
   13664:	0003      	movs	r3, r0
   13666:	3b08      	subs	r3, #8
   13668:	2b1f      	cmp	r3, #31
   1366a:	dd00      	ble.n	1366e <__aeabi_dsub+0xd2>
   1366c:	e0e9      	b.n	13842 <__aeabi_dsub+0x2a6>
   1366e:	2220      	movs	r2, #32
   13670:	003c      	movs	r4, r7
   13672:	1ad2      	subs	r2, r2, r3
   13674:	409d      	lsls	r5, r3
   13676:	40d4      	lsrs	r4, r2
   13678:	409f      	lsls	r7, r3
   1367a:	4325      	orrs	r5, r4
   1367c:	429e      	cmp	r6, r3
   1367e:	dd00      	ble.n	13682 <__aeabi_dsub+0xe6>
   13680:	e0db      	b.n	1383a <__aeabi_dsub+0x29e>
   13682:	1b9e      	subs	r6, r3, r6
   13684:	1c73      	adds	r3, r6, #1
   13686:	2b1f      	cmp	r3, #31
   13688:	dd00      	ble.n	1368c <__aeabi_dsub+0xf0>
   1368a:	e10a      	b.n	138a2 <__aeabi_dsub+0x306>
   1368c:	2220      	movs	r2, #32
   1368e:	0038      	movs	r0, r7
   13690:	1ad2      	subs	r2, r2, r3
   13692:	0029      	movs	r1, r5
   13694:	4097      	lsls	r7, r2
   13696:	002c      	movs	r4, r5
   13698:	4091      	lsls	r1, r2
   1369a:	40d8      	lsrs	r0, r3
   1369c:	1e7a      	subs	r2, r7, #1
   1369e:	4197      	sbcs	r7, r2
   136a0:	40dc      	lsrs	r4, r3
   136a2:	2600      	movs	r6, #0
   136a4:	4301      	orrs	r1, r0
   136a6:	430f      	orrs	r7, r1
   136a8:	077b      	lsls	r3, r7, #29
   136aa:	d009      	beq.n	136c0 <__aeabi_dsub+0x124>
   136ac:	230f      	movs	r3, #15
   136ae:	403b      	ands	r3, r7
   136b0:	2b04      	cmp	r3, #4
   136b2:	d005      	beq.n	136c0 <__aeabi_dsub+0x124>
   136b4:	1d3b      	adds	r3, r7, #4
   136b6:	42bb      	cmp	r3, r7
   136b8:	41bf      	sbcs	r7, r7
   136ba:	427f      	negs	r7, r7
   136bc:	19e4      	adds	r4, r4, r7
   136be:	001f      	movs	r7, r3
   136c0:	0223      	lsls	r3, r4, #8
   136c2:	d525      	bpl.n	13710 <__aeabi_dsub+0x174>
   136c4:	4b86      	ldr	r3, [pc, #536]	; (138e0 <__aeabi_dsub+0x344>)
   136c6:	3601      	adds	r6, #1
   136c8:	429e      	cmp	r6, r3
   136ca:	d100      	bne.n	136ce <__aeabi_dsub+0x132>
   136cc:	e0af      	b.n	1382e <__aeabi_dsub+0x292>
   136ce:	4b85      	ldr	r3, [pc, #532]	; (138e4 <__aeabi_dsub+0x348>)
   136d0:	2501      	movs	r5, #1
   136d2:	401c      	ands	r4, r3
   136d4:	4643      	mov	r3, r8
   136d6:	0762      	lsls	r2, r4, #29
   136d8:	08ff      	lsrs	r7, r7, #3
   136da:	0264      	lsls	r4, r4, #9
   136dc:	0576      	lsls	r6, r6, #21
   136de:	4317      	orrs	r7, r2
   136e0:	0b24      	lsrs	r4, r4, #12
   136e2:	0d76      	lsrs	r6, r6, #21
   136e4:	401d      	ands	r5, r3
   136e6:	2100      	movs	r1, #0
   136e8:	0324      	lsls	r4, r4, #12
   136ea:	0b23      	lsrs	r3, r4, #12
   136ec:	0d0c      	lsrs	r4, r1, #20
   136ee:	4a7e      	ldr	r2, [pc, #504]	; (138e8 <__aeabi_dsub+0x34c>)
   136f0:	0524      	lsls	r4, r4, #20
   136f2:	431c      	orrs	r4, r3
   136f4:	4014      	ands	r4, r2
   136f6:	0533      	lsls	r3, r6, #20
   136f8:	4323      	orrs	r3, r4
   136fa:	005b      	lsls	r3, r3, #1
   136fc:	07ed      	lsls	r5, r5, #31
   136fe:	085b      	lsrs	r3, r3, #1
   13700:	432b      	orrs	r3, r5
   13702:	0038      	movs	r0, r7
   13704:	0019      	movs	r1, r3
   13706:	bc1c      	pop	{r2, r3, r4}
   13708:	4690      	mov	r8, r2
   1370a:	4699      	mov	r9, r3
   1370c:	46a2      	mov	sl, r4
   1370e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13710:	2501      	movs	r5, #1
   13712:	4643      	mov	r3, r8
   13714:	0762      	lsls	r2, r4, #29
   13716:	08ff      	lsrs	r7, r7, #3
   13718:	4317      	orrs	r7, r2
   1371a:	08e4      	lsrs	r4, r4, #3
   1371c:	401d      	ands	r5, r3
   1371e:	4b70      	ldr	r3, [pc, #448]	; (138e0 <__aeabi_dsub+0x344>)
   13720:	429e      	cmp	r6, r3
   13722:	d036      	beq.n	13792 <__aeabi_dsub+0x1f6>
   13724:	0324      	lsls	r4, r4, #12
   13726:	0576      	lsls	r6, r6, #21
   13728:	0b24      	lsrs	r4, r4, #12
   1372a:	0d76      	lsrs	r6, r6, #21
   1372c:	e7db      	b.n	136e6 <__aeabi_dsub+0x14a>
   1372e:	4663      	mov	r3, ip
   13730:	1af3      	subs	r3, r6, r3
   13732:	2b00      	cmp	r3, #0
   13734:	dc00      	bgt.n	13738 <__aeabi_dsub+0x19c>
   13736:	e094      	b.n	13862 <__aeabi_dsub+0x2c6>
   13738:	4660      	mov	r0, ip
   1373a:	2800      	cmp	r0, #0
   1373c:	d035      	beq.n	137aa <__aeabi_dsub+0x20e>
   1373e:	4868      	ldr	r0, [pc, #416]	; (138e0 <__aeabi_dsub+0x344>)
   13740:	4286      	cmp	r6, r0
   13742:	d0b1      	beq.n	136a8 <__aeabi_dsub+0x10c>
   13744:	2780      	movs	r7, #128	; 0x80
   13746:	043f      	lsls	r7, r7, #16
   13748:	4339      	orrs	r1, r7
   1374a:	2b38      	cmp	r3, #56	; 0x38
   1374c:	dc00      	bgt.n	13750 <__aeabi_dsub+0x1b4>
   1374e:	e0fd      	b.n	1394c <__aeabi_dsub+0x3b0>
   13750:	430a      	orrs	r2, r1
   13752:	0017      	movs	r7, r2
   13754:	2100      	movs	r1, #0
   13756:	1e7a      	subs	r2, r7, #1
   13758:	4197      	sbcs	r7, r2
   1375a:	4457      	add	r7, sl
   1375c:	4557      	cmp	r7, sl
   1375e:	4180      	sbcs	r0, r0
   13760:	1909      	adds	r1, r1, r4
   13762:	4244      	negs	r4, r0
   13764:	190c      	adds	r4, r1, r4
   13766:	0223      	lsls	r3, r4, #8
   13768:	d53a      	bpl.n	137e0 <__aeabi_dsub+0x244>
   1376a:	4b5d      	ldr	r3, [pc, #372]	; (138e0 <__aeabi_dsub+0x344>)
   1376c:	3601      	adds	r6, #1
   1376e:	429e      	cmp	r6, r3
   13770:	d100      	bne.n	13774 <__aeabi_dsub+0x1d8>
   13772:	e14b      	b.n	13a0c <__aeabi_dsub+0x470>
   13774:	2201      	movs	r2, #1
   13776:	4b5b      	ldr	r3, [pc, #364]	; (138e4 <__aeabi_dsub+0x348>)
   13778:	401c      	ands	r4, r3
   1377a:	087b      	lsrs	r3, r7, #1
   1377c:	4017      	ands	r7, r2
   1377e:	431f      	orrs	r7, r3
   13780:	07e2      	lsls	r2, r4, #31
   13782:	4317      	orrs	r7, r2
   13784:	0864      	lsrs	r4, r4, #1
   13786:	e78f      	b.n	136a8 <__aeabi_dsub+0x10c>
   13788:	0008      	movs	r0, r1
   1378a:	4310      	orrs	r0, r2
   1378c:	d000      	beq.n	13790 <__aeabi_dsub+0x1f4>
   1378e:	e724      	b.n	135da <__aeabi_dsub+0x3e>
   13790:	e721      	b.n	135d6 <__aeabi_dsub+0x3a>
   13792:	0023      	movs	r3, r4
   13794:	433b      	orrs	r3, r7
   13796:	d100      	bne.n	1379a <__aeabi_dsub+0x1fe>
   13798:	e1b9      	b.n	13b0e <__aeabi_dsub+0x572>
   1379a:	2280      	movs	r2, #128	; 0x80
   1379c:	0312      	lsls	r2, r2, #12
   1379e:	4314      	orrs	r4, r2
   137a0:	0324      	lsls	r4, r4, #12
   137a2:	0b24      	lsrs	r4, r4, #12
   137a4:	e79f      	b.n	136e6 <__aeabi_dsub+0x14a>
   137a6:	002e      	movs	r6, r5
   137a8:	e77e      	b.n	136a8 <__aeabi_dsub+0x10c>
   137aa:	0008      	movs	r0, r1
   137ac:	4310      	orrs	r0, r2
   137ae:	d100      	bne.n	137b2 <__aeabi_dsub+0x216>
   137b0:	e0ca      	b.n	13948 <__aeabi_dsub+0x3ac>
   137b2:	1e58      	subs	r0, r3, #1
   137b4:	4684      	mov	ip, r0
   137b6:	2800      	cmp	r0, #0
   137b8:	d000      	beq.n	137bc <__aeabi_dsub+0x220>
   137ba:	e0e7      	b.n	1398c <__aeabi_dsub+0x3f0>
   137bc:	4452      	add	r2, sl
   137be:	4552      	cmp	r2, sl
   137c0:	4180      	sbcs	r0, r0
   137c2:	1864      	adds	r4, r4, r1
   137c4:	4240      	negs	r0, r0
   137c6:	1824      	adds	r4, r4, r0
   137c8:	0017      	movs	r7, r2
   137ca:	2601      	movs	r6, #1
   137cc:	0223      	lsls	r3, r4, #8
   137ce:	d507      	bpl.n	137e0 <__aeabi_dsub+0x244>
   137d0:	2602      	movs	r6, #2
   137d2:	e7cf      	b.n	13774 <__aeabi_dsub+0x1d8>
   137d4:	4664      	mov	r4, ip
   137d6:	432c      	orrs	r4, r5
   137d8:	d100      	bne.n	137dc <__aeabi_dsub+0x240>
   137da:	e1b3      	b.n	13b44 <__aeabi_dsub+0x5a8>
   137dc:	002c      	movs	r4, r5
   137de:	4667      	mov	r7, ip
   137e0:	077b      	lsls	r3, r7, #29
   137e2:	d000      	beq.n	137e6 <__aeabi_dsub+0x24a>
   137e4:	e762      	b.n	136ac <__aeabi_dsub+0x110>
   137e6:	0763      	lsls	r3, r4, #29
   137e8:	08ff      	lsrs	r7, r7, #3
   137ea:	431f      	orrs	r7, r3
   137ec:	2501      	movs	r5, #1
   137ee:	4643      	mov	r3, r8
   137f0:	08e4      	lsrs	r4, r4, #3
   137f2:	401d      	ands	r5, r3
   137f4:	e793      	b.n	1371e <__aeabi_dsub+0x182>
   137f6:	2d00      	cmp	r5, #0
   137f8:	d178      	bne.n	138ec <__aeabi_dsub+0x350>
   137fa:	1c75      	adds	r5, r6, #1
   137fc:	056d      	lsls	r5, r5, #21
   137fe:	0d6d      	lsrs	r5, r5, #21
   13800:	2d01      	cmp	r5, #1
   13802:	dc00      	bgt.n	13806 <__aeabi_dsub+0x26a>
   13804:	e0f2      	b.n	139ec <__aeabi_dsub+0x450>
   13806:	4650      	mov	r0, sl
   13808:	1a80      	subs	r0, r0, r2
   1380a:	4582      	cmp	sl, r0
   1380c:	41bf      	sbcs	r7, r7
   1380e:	1a65      	subs	r5, r4, r1
   13810:	427f      	negs	r7, r7
   13812:	1bed      	subs	r5, r5, r7
   13814:	4684      	mov	ip, r0
   13816:	0228      	lsls	r0, r5, #8
   13818:	d400      	bmi.n	1381c <__aeabi_dsub+0x280>
   1381a:	e08c      	b.n	13936 <__aeabi_dsub+0x39a>
   1381c:	4650      	mov	r0, sl
   1381e:	1a17      	subs	r7, r2, r0
   13820:	42ba      	cmp	r2, r7
   13822:	4192      	sbcs	r2, r2
   13824:	1b0c      	subs	r4, r1, r4
   13826:	4255      	negs	r5, r2
   13828:	1b65      	subs	r5, r4, r5
   1382a:	4698      	mov	r8, r3
   1382c:	e714      	b.n	13658 <__aeabi_dsub+0xbc>
   1382e:	2501      	movs	r5, #1
   13830:	4643      	mov	r3, r8
   13832:	2400      	movs	r4, #0
   13834:	401d      	ands	r5, r3
   13836:	2700      	movs	r7, #0
   13838:	e755      	b.n	136e6 <__aeabi_dsub+0x14a>
   1383a:	4c2a      	ldr	r4, [pc, #168]	; (138e4 <__aeabi_dsub+0x348>)
   1383c:	1af6      	subs	r6, r6, r3
   1383e:	402c      	ands	r4, r5
   13840:	e732      	b.n	136a8 <__aeabi_dsub+0x10c>
   13842:	003d      	movs	r5, r7
   13844:	3828      	subs	r0, #40	; 0x28
   13846:	4085      	lsls	r5, r0
   13848:	2700      	movs	r7, #0
   1384a:	e717      	b.n	1367c <__aeabi_dsub+0xe0>
   1384c:	0038      	movs	r0, r7
   1384e:	f000 fb65 	bl	13f1c <__clzsi2>
   13852:	3020      	adds	r0, #32
   13854:	e706      	b.n	13664 <__aeabi_dsub+0xc8>
   13856:	430a      	orrs	r2, r1
   13858:	0017      	movs	r7, r2
   1385a:	2100      	movs	r1, #0
   1385c:	1e7a      	subs	r2, r7, #1
   1385e:	4197      	sbcs	r7, r2
   13860:	e6ee      	b.n	13640 <__aeabi_dsub+0xa4>
   13862:	2b00      	cmp	r3, #0
   13864:	d000      	beq.n	13868 <__aeabi_dsub+0x2cc>
   13866:	e0e5      	b.n	13a34 <__aeabi_dsub+0x498>
   13868:	1c73      	adds	r3, r6, #1
   1386a:	469c      	mov	ip, r3
   1386c:	055b      	lsls	r3, r3, #21
   1386e:	0d5b      	lsrs	r3, r3, #21
   13870:	2b01      	cmp	r3, #1
   13872:	dc00      	bgt.n	13876 <__aeabi_dsub+0x2da>
   13874:	e09f      	b.n	139b6 <__aeabi_dsub+0x41a>
   13876:	4b1a      	ldr	r3, [pc, #104]	; (138e0 <__aeabi_dsub+0x344>)
   13878:	459c      	cmp	ip, r3
   1387a:	d100      	bne.n	1387e <__aeabi_dsub+0x2e2>
   1387c:	e0c5      	b.n	13a0a <__aeabi_dsub+0x46e>
   1387e:	4452      	add	r2, sl
   13880:	4552      	cmp	r2, sl
   13882:	4180      	sbcs	r0, r0
   13884:	1864      	adds	r4, r4, r1
   13886:	4240      	negs	r0, r0
   13888:	1824      	adds	r4, r4, r0
   1388a:	07e7      	lsls	r7, r4, #31
   1388c:	0852      	lsrs	r2, r2, #1
   1388e:	4317      	orrs	r7, r2
   13890:	0864      	lsrs	r4, r4, #1
   13892:	4666      	mov	r6, ip
   13894:	e708      	b.n	136a8 <__aeabi_dsub+0x10c>
   13896:	4812      	ldr	r0, [pc, #72]	; (138e0 <__aeabi_dsub+0x344>)
   13898:	4285      	cmp	r5, r0
   1389a:	d100      	bne.n	1389e <__aeabi_dsub+0x302>
   1389c:	e085      	b.n	139aa <__aeabi_dsub+0x40e>
   1389e:	001d      	movs	r5, r3
   138a0:	e6bc      	b.n	1361c <__aeabi_dsub+0x80>
   138a2:	0029      	movs	r1, r5
   138a4:	3e1f      	subs	r6, #31
   138a6:	40f1      	lsrs	r1, r6
   138a8:	2b20      	cmp	r3, #32
   138aa:	d100      	bne.n	138ae <__aeabi_dsub+0x312>
   138ac:	e07f      	b.n	139ae <__aeabi_dsub+0x412>
   138ae:	2240      	movs	r2, #64	; 0x40
   138b0:	1ad3      	subs	r3, r2, r3
   138b2:	409d      	lsls	r5, r3
   138b4:	432f      	orrs	r7, r5
   138b6:	1e7d      	subs	r5, r7, #1
   138b8:	41af      	sbcs	r7, r5
   138ba:	2400      	movs	r4, #0
   138bc:	430f      	orrs	r7, r1
   138be:	2600      	movs	r6, #0
   138c0:	e78e      	b.n	137e0 <__aeabi_dsub+0x244>
   138c2:	002b      	movs	r3, r5
   138c4:	000f      	movs	r7, r1
   138c6:	3b20      	subs	r3, #32
   138c8:	40df      	lsrs	r7, r3
   138ca:	2d20      	cmp	r5, #32
   138cc:	d071      	beq.n	139b2 <__aeabi_dsub+0x416>
   138ce:	2340      	movs	r3, #64	; 0x40
   138d0:	1b5d      	subs	r5, r3, r5
   138d2:	40a9      	lsls	r1, r5
   138d4:	430a      	orrs	r2, r1
   138d6:	1e51      	subs	r1, r2, #1
   138d8:	418a      	sbcs	r2, r1
   138da:	2100      	movs	r1, #0
   138dc:	4317      	orrs	r7, r2
   138de:	e6af      	b.n	13640 <__aeabi_dsub+0xa4>
   138e0:	000007ff 	.word	0x000007ff
   138e4:	ff7fffff 	.word	0xff7fffff
   138e8:	800fffff 	.word	0x800fffff
   138ec:	2e00      	cmp	r6, #0
   138ee:	d03e      	beq.n	1396e <__aeabi_dsub+0x3d2>
   138f0:	4eb3      	ldr	r6, [pc, #716]	; (13bc0 <__aeabi_dsub+0x624>)
   138f2:	45b4      	cmp	ip, r6
   138f4:	d045      	beq.n	13982 <__aeabi_dsub+0x3e6>
   138f6:	2680      	movs	r6, #128	; 0x80
   138f8:	0436      	lsls	r6, r6, #16
   138fa:	426d      	negs	r5, r5
   138fc:	4334      	orrs	r4, r6
   138fe:	2d38      	cmp	r5, #56	; 0x38
   13900:	dd00      	ble.n	13904 <__aeabi_dsub+0x368>
   13902:	e0a8      	b.n	13a56 <__aeabi_dsub+0x4ba>
   13904:	2d1f      	cmp	r5, #31
   13906:	dd00      	ble.n	1390a <__aeabi_dsub+0x36e>
   13908:	e11f      	b.n	13b4a <__aeabi_dsub+0x5ae>
   1390a:	2620      	movs	r6, #32
   1390c:	0027      	movs	r7, r4
   1390e:	4650      	mov	r0, sl
   13910:	1b76      	subs	r6, r6, r5
   13912:	40b7      	lsls	r7, r6
   13914:	40e8      	lsrs	r0, r5
   13916:	4307      	orrs	r7, r0
   13918:	4650      	mov	r0, sl
   1391a:	40b0      	lsls	r0, r6
   1391c:	1e46      	subs	r6, r0, #1
   1391e:	41b0      	sbcs	r0, r6
   13920:	40ec      	lsrs	r4, r5
   13922:	4338      	orrs	r0, r7
   13924:	1a17      	subs	r7, r2, r0
   13926:	42ba      	cmp	r2, r7
   13928:	4192      	sbcs	r2, r2
   1392a:	1b0c      	subs	r4, r1, r4
   1392c:	4252      	negs	r2, r2
   1392e:	1aa4      	subs	r4, r4, r2
   13930:	4666      	mov	r6, ip
   13932:	4698      	mov	r8, r3
   13934:	e68b      	b.n	1364e <__aeabi_dsub+0xb2>
   13936:	4664      	mov	r4, ip
   13938:	4667      	mov	r7, ip
   1393a:	432c      	orrs	r4, r5
   1393c:	d000      	beq.n	13940 <__aeabi_dsub+0x3a4>
   1393e:	e68b      	b.n	13658 <__aeabi_dsub+0xbc>
   13940:	2500      	movs	r5, #0
   13942:	2600      	movs	r6, #0
   13944:	2700      	movs	r7, #0
   13946:	e6ea      	b.n	1371e <__aeabi_dsub+0x182>
   13948:	001e      	movs	r6, r3
   1394a:	e6ad      	b.n	136a8 <__aeabi_dsub+0x10c>
   1394c:	2b1f      	cmp	r3, #31
   1394e:	dc60      	bgt.n	13a12 <__aeabi_dsub+0x476>
   13950:	2720      	movs	r7, #32
   13952:	1af8      	subs	r0, r7, r3
   13954:	000f      	movs	r7, r1
   13956:	4684      	mov	ip, r0
   13958:	4087      	lsls	r7, r0
   1395a:	0010      	movs	r0, r2
   1395c:	40d8      	lsrs	r0, r3
   1395e:	4307      	orrs	r7, r0
   13960:	4660      	mov	r0, ip
   13962:	4082      	lsls	r2, r0
   13964:	1e50      	subs	r0, r2, #1
   13966:	4182      	sbcs	r2, r0
   13968:	40d9      	lsrs	r1, r3
   1396a:	4317      	orrs	r7, r2
   1396c:	e6f5      	b.n	1375a <__aeabi_dsub+0x1be>
   1396e:	0026      	movs	r6, r4
   13970:	4650      	mov	r0, sl
   13972:	4306      	orrs	r6, r0
   13974:	d005      	beq.n	13982 <__aeabi_dsub+0x3e6>
   13976:	43ed      	mvns	r5, r5
   13978:	2d00      	cmp	r5, #0
   1397a:	d0d3      	beq.n	13924 <__aeabi_dsub+0x388>
   1397c:	4e90      	ldr	r6, [pc, #576]	; (13bc0 <__aeabi_dsub+0x624>)
   1397e:	45b4      	cmp	ip, r6
   13980:	d1bd      	bne.n	138fe <__aeabi_dsub+0x362>
   13982:	000c      	movs	r4, r1
   13984:	0017      	movs	r7, r2
   13986:	4666      	mov	r6, ip
   13988:	4698      	mov	r8, r3
   1398a:	e68d      	b.n	136a8 <__aeabi_dsub+0x10c>
   1398c:	488c      	ldr	r0, [pc, #560]	; (13bc0 <__aeabi_dsub+0x624>)
   1398e:	4283      	cmp	r3, r0
   13990:	d00b      	beq.n	139aa <__aeabi_dsub+0x40e>
   13992:	4663      	mov	r3, ip
   13994:	e6d9      	b.n	1374a <__aeabi_dsub+0x1ae>
   13996:	2d00      	cmp	r5, #0
   13998:	d000      	beq.n	1399c <__aeabi_dsub+0x400>
   1399a:	e096      	b.n	13aca <__aeabi_dsub+0x52e>
   1399c:	0008      	movs	r0, r1
   1399e:	4310      	orrs	r0, r2
   139a0:	d100      	bne.n	139a4 <__aeabi_dsub+0x408>
   139a2:	e0e2      	b.n	13b6a <__aeabi_dsub+0x5ce>
   139a4:	000c      	movs	r4, r1
   139a6:	0017      	movs	r7, r2
   139a8:	4698      	mov	r8, r3
   139aa:	4e85      	ldr	r6, [pc, #532]	; (13bc0 <__aeabi_dsub+0x624>)
   139ac:	e67c      	b.n	136a8 <__aeabi_dsub+0x10c>
   139ae:	2500      	movs	r5, #0
   139b0:	e780      	b.n	138b4 <__aeabi_dsub+0x318>
   139b2:	2100      	movs	r1, #0
   139b4:	e78e      	b.n	138d4 <__aeabi_dsub+0x338>
   139b6:	0023      	movs	r3, r4
   139b8:	4650      	mov	r0, sl
   139ba:	4303      	orrs	r3, r0
   139bc:	2e00      	cmp	r6, #0
   139be:	d000      	beq.n	139c2 <__aeabi_dsub+0x426>
   139c0:	e0a8      	b.n	13b14 <__aeabi_dsub+0x578>
   139c2:	2b00      	cmp	r3, #0
   139c4:	d100      	bne.n	139c8 <__aeabi_dsub+0x42c>
   139c6:	e0de      	b.n	13b86 <__aeabi_dsub+0x5ea>
   139c8:	000b      	movs	r3, r1
   139ca:	4313      	orrs	r3, r2
   139cc:	d100      	bne.n	139d0 <__aeabi_dsub+0x434>
   139ce:	e66b      	b.n	136a8 <__aeabi_dsub+0x10c>
   139d0:	4452      	add	r2, sl
   139d2:	4552      	cmp	r2, sl
   139d4:	4180      	sbcs	r0, r0
   139d6:	1864      	adds	r4, r4, r1
   139d8:	4240      	negs	r0, r0
   139da:	1824      	adds	r4, r4, r0
   139dc:	0017      	movs	r7, r2
   139de:	0223      	lsls	r3, r4, #8
   139e0:	d400      	bmi.n	139e4 <__aeabi_dsub+0x448>
   139e2:	e6fd      	b.n	137e0 <__aeabi_dsub+0x244>
   139e4:	4b77      	ldr	r3, [pc, #476]	; (13bc4 <__aeabi_dsub+0x628>)
   139e6:	4666      	mov	r6, ip
   139e8:	401c      	ands	r4, r3
   139ea:	e65d      	b.n	136a8 <__aeabi_dsub+0x10c>
   139ec:	0025      	movs	r5, r4
   139ee:	4650      	mov	r0, sl
   139f0:	4305      	orrs	r5, r0
   139f2:	2e00      	cmp	r6, #0
   139f4:	d1cf      	bne.n	13996 <__aeabi_dsub+0x3fa>
   139f6:	2d00      	cmp	r5, #0
   139f8:	d14f      	bne.n	13a9a <__aeabi_dsub+0x4fe>
   139fa:	000c      	movs	r4, r1
   139fc:	4314      	orrs	r4, r2
   139fe:	d100      	bne.n	13a02 <__aeabi_dsub+0x466>
   13a00:	e0a0      	b.n	13b44 <__aeabi_dsub+0x5a8>
   13a02:	000c      	movs	r4, r1
   13a04:	0017      	movs	r7, r2
   13a06:	4698      	mov	r8, r3
   13a08:	e64e      	b.n	136a8 <__aeabi_dsub+0x10c>
   13a0a:	4666      	mov	r6, ip
   13a0c:	2400      	movs	r4, #0
   13a0e:	2700      	movs	r7, #0
   13a10:	e685      	b.n	1371e <__aeabi_dsub+0x182>
   13a12:	001f      	movs	r7, r3
   13a14:	0008      	movs	r0, r1
   13a16:	3f20      	subs	r7, #32
   13a18:	40f8      	lsrs	r0, r7
   13a1a:	0007      	movs	r7, r0
   13a1c:	2b20      	cmp	r3, #32
   13a1e:	d100      	bne.n	13a22 <__aeabi_dsub+0x486>
   13a20:	e08e      	b.n	13b40 <__aeabi_dsub+0x5a4>
   13a22:	2040      	movs	r0, #64	; 0x40
   13a24:	1ac3      	subs	r3, r0, r3
   13a26:	4099      	lsls	r1, r3
   13a28:	430a      	orrs	r2, r1
   13a2a:	1e51      	subs	r1, r2, #1
   13a2c:	418a      	sbcs	r2, r1
   13a2e:	2100      	movs	r1, #0
   13a30:	4317      	orrs	r7, r2
   13a32:	e692      	b.n	1375a <__aeabi_dsub+0x1be>
   13a34:	2e00      	cmp	r6, #0
   13a36:	d114      	bne.n	13a62 <__aeabi_dsub+0x4c6>
   13a38:	0026      	movs	r6, r4
   13a3a:	4650      	mov	r0, sl
   13a3c:	4306      	orrs	r6, r0
   13a3e:	d062      	beq.n	13b06 <__aeabi_dsub+0x56a>
   13a40:	43db      	mvns	r3, r3
   13a42:	2b00      	cmp	r3, #0
   13a44:	d15c      	bne.n	13b00 <__aeabi_dsub+0x564>
   13a46:	1887      	adds	r7, r0, r2
   13a48:	4297      	cmp	r7, r2
   13a4a:	4192      	sbcs	r2, r2
   13a4c:	1864      	adds	r4, r4, r1
   13a4e:	4252      	negs	r2, r2
   13a50:	18a4      	adds	r4, r4, r2
   13a52:	4666      	mov	r6, ip
   13a54:	e687      	b.n	13766 <__aeabi_dsub+0x1ca>
   13a56:	4650      	mov	r0, sl
   13a58:	4320      	orrs	r0, r4
   13a5a:	1e44      	subs	r4, r0, #1
   13a5c:	41a0      	sbcs	r0, r4
   13a5e:	2400      	movs	r4, #0
   13a60:	e760      	b.n	13924 <__aeabi_dsub+0x388>
   13a62:	4e57      	ldr	r6, [pc, #348]	; (13bc0 <__aeabi_dsub+0x624>)
   13a64:	45b4      	cmp	ip, r6
   13a66:	d04e      	beq.n	13b06 <__aeabi_dsub+0x56a>
   13a68:	2680      	movs	r6, #128	; 0x80
   13a6a:	0436      	lsls	r6, r6, #16
   13a6c:	425b      	negs	r3, r3
   13a6e:	4334      	orrs	r4, r6
   13a70:	2b38      	cmp	r3, #56	; 0x38
   13a72:	dd00      	ble.n	13a76 <__aeabi_dsub+0x4da>
   13a74:	e07f      	b.n	13b76 <__aeabi_dsub+0x5da>
   13a76:	2b1f      	cmp	r3, #31
   13a78:	dd00      	ble.n	13a7c <__aeabi_dsub+0x4e0>
   13a7a:	e08b      	b.n	13b94 <__aeabi_dsub+0x5f8>
   13a7c:	2620      	movs	r6, #32
   13a7e:	0027      	movs	r7, r4
   13a80:	4650      	mov	r0, sl
   13a82:	1af6      	subs	r6, r6, r3
   13a84:	40b7      	lsls	r7, r6
   13a86:	40d8      	lsrs	r0, r3
   13a88:	4307      	orrs	r7, r0
   13a8a:	4650      	mov	r0, sl
   13a8c:	40b0      	lsls	r0, r6
   13a8e:	1e46      	subs	r6, r0, #1
   13a90:	41b0      	sbcs	r0, r6
   13a92:	4307      	orrs	r7, r0
   13a94:	40dc      	lsrs	r4, r3
   13a96:	18bf      	adds	r7, r7, r2
   13a98:	e7d6      	b.n	13a48 <__aeabi_dsub+0x4ac>
   13a9a:	000d      	movs	r5, r1
   13a9c:	4315      	orrs	r5, r2
   13a9e:	d100      	bne.n	13aa2 <__aeabi_dsub+0x506>
   13aa0:	e602      	b.n	136a8 <__aeabi_dsub+0x10c>
   13aa2:	4650      	mov	r0, sl
   13aa4:	1a80      	subs	r0, r0, r2
   13aa6:	4582      	cmp	sl, r0
   13aa8:	41bf      	sbcs	r7, r7
   13aaa:	1a65      	subs	r5, r4, r1
   13aac:	427f      	negs	r7, r7
   13aae:	1bed      	subs	r5, r5, r7
   13ab0:	4684      	mov	ip, r0
   13ab2:	0228      	lsls	r0, r5, #8
   13ab4:	d400      	bmi.n	13ab8 <__aeabi_dsub+0x51c>
   13ab6:	e68d      	b.n	137d4 <__aeabi_dsub+0x238>
   13ab8:	4650      	mov	r0, sl
   13aba:	1a17      	subs	r7, r2, r0
   13abc:	42ba      	cmp	r2, r7
   13abe:	4192      	sbcs	r2, r2
   13ac0:	1b0c      	subs	r4, r1, r4
   13ac2:	4252      	negs	r2, r2
   13ac4:	1aa4      	subs	r4, r4, r2
   13ac6:	4698      	mov	r8, r3
   13ac8:	e5ee      	b.n	136a8 <__aeabi_dsub+0x10c>
   13aca:	000d      	movs	r5, r1
   13acc:	4315      	orrs	r5, r2
   13ace:	d100      	bne.n	13ad2 <__aeabi_dsub+0x536>
   13ad0:	e76b      	b.n	139aa <__aeabi_dsub+0x40e>
   13ad2:	4650      	mov	r0, sl
   13ad4:	0767      	lsls	r7, r4, #29
   13ad6:	08c0      	lsrs	r0, r0, #3
   13ad8:	4307      	orrs	r7, r0
   13ada:	2080      	movs	r0, #128	; 0x80
   13adc:	08e4      	lsrs	r4, r4, #3
   13ade:	0300      	lsls	r0, r0, #12
   13ae0:	4204      	tst	r4, r0
   13ae2:	d007      	beq.n	13af4 <__aeabi_dsub+0x558>
   13ae4:	08cd      	lsrs	r5, r1, #3
   13ae6:	4205      	tst	r5, r0
   13ae8:	d104      	bne.n	13af4 <__aeabi_dsub+0x558>
   13aea:	002c      	movs	r4, r5
   13aec:	4698      	mov	r8, r3
   13aee:	08d7      	lsrs	r7, r2, #3
   13af0:	0749      	lsls	r1, r1, #29
   13af2:	430f      	orrs	r7, r1
   13af4:	0f7b      	lsrs	r3, r7, #29
   13af6:	00e4      	lsls	r4, r4, #3
   13af8:	431c      	orrs	r4, r3
   13afa:	00ff      	lsls	r7, r7, #3
   13afc:	4e30      	ldr	r6, [pc, #192]	; (13bc0 <__aeabi_dsub+0x624>)
   13afe:	e5d3      	b.n	136a8 <__aeabi_dsub+0x10c>
   13b00:	4e2f      	ldr	r6, [pc, #188]	; (13bc0 <__aeabi_dsub+0x624>)
   13b02:	45b4      	cmp	ip, r6
   13b04:	d1b4      	bne.n	13a70 <__aeabi_dsub+0x4d4>
   13b06:	000c      	movs	r4, r1
   13b08:	0017      	movs	r7, r2
   13b0a:	4666      	mov	r6, ip
   13b0c:	e5cc      	b.n	136a8 <__aeabi_dsub+0x10c>
   13b0e:	2700      	movs	r7, #0
   13b10:	2400      	movs	r4, #0
   13b12:	e5e8      	b.n	136e6 <__aeabi_dsub+0x14a>
   13b14:	2b00      	cmp	r3, #0
   13b16:	d039      	beq.n	13b8c <__aeabi_dsub+0x5f0>
   13b18:	000b      	movs	r3, r1
   13b1a:	4313      	orrs	r3, r2
   13b1c:	d100      	bne.n	13b20 <__aeabi_dsub+0x584>
   13b1e:	e744      	b.n	139aa <__aeabi_dsub+0x40e>
   13b20:	08c0      	lsrs	r0, r0, #3
   13b22:	0767      	lsls	r7, r4, #29
   13b24:	4307      	orrs	r7, r0
   13b26:	2080      	movs	r0, #128	; 0x80
   13b28:	08e4      	lsrs	r4, r4, #3
   13b2a:	0300      	lsls	r0, r0, #12
   13b2c:	4204      	tst	r4, r0
   13b2e:	d0e1      	beq.n	13af4 <__aeabi_dsub+0x558>
   13b30:	08cb      	lsrs	r3, r1, #3
   13b32:	4203      	tst	r3, r0
   13b34:	d1de      	bne.n	13af4 <__aeabi_dsub+0x558>
   13b36:	08d7      	lsrs	r7, r2, #3
   13b38:	0749      	lsls	r1, r1, #29
   13b3a:	430f      	orrs	r7, r1
   13b3c:	001c      	movs	r4, r3
   13b3e:	e7d9      	b.n	13af4 <__aeabi_dsub+0x558>
   13b40:	2100      	movs	r1, #0
   13b42:	e771      	b.n	13a28 <__aeabi_dsub+0x48c>
   13b44:	2500      	movs	r5, #0
   13b46:	2700      	movs	r7, #0
   13b48:	e5e9      	b.n	1371e <__aeabi_dsub+0x182>
   13b4a:	002e      	movs	r6, r5
   13b4c:	0027      	movs	r7, r4
   13b4e:	3e20      	subs	r6, #32
   13b50:	40f7      	lsrs	r7, r6
   13b52:	2d20      	cmp	r5, #32
   13b54:	d02f      	beq.n	13bb6 <__aeabi_dsub+0x61a>
   13b56:	2640      	movs	r6, #64	; 0x40
   13b58:	1b75      	subs	r5, r6, r5
   13b5a:	40ac      	lsls	r4, r5
   13b5c:	4650      	mov	r0, sl
   13b5e:	4320      	orrs	r0, r4
   13b60:	1e44      	subs	r4, r0, #1
   13b62:	41a0      	sbcs	r0, r4
   13b64:	2400      	movs	r4, #0
   13b66:	4338      	orrs	r0, r7
   13b68:	e6dc      	b.n	13924 <__aeabi_dsub+0x388>
   13b6a:	2480      	movs	r4, #128	; 0x80
   13b6c:	2500      	movs	r5, #0
   13b6e:	0324      	lsls	r4, r4, #12
   13b70:	4e13      	ldr	r6, [pc, #76]	; (13bc0 <__aeabi_dsub+0x624>)
   13b72:	2700      	movs	r7, #0
   13b74:	e5d3      	b.n	1371e <__aeabi_dsub+0x182>
   13b76:	4650      	mov	r0, sl
   13b78:	4320      	orrs	r0, r4
   13b7a:	0007      	movs	r7, r0
   13b7c:	1e78      	subs	r0, r7, #1
   13b7e:	4187      	sbcs	r7, r0
   13b80:	2400      	movs	r4, #0
   13b82:	18bf      	adds	r7, r7, r2
   13b84:	e760      	b.n	13a48 <__aeabi_dsub+0x4ac>
   13b86:	000c      	movs	r4, r1
   13b88:	0017      	movs	r7, r2
   13b8a:	e58d      	b.n	136a8 <__aeabi_dsub+0x10c>
   13b8c:	000c      	movs	r4, r1
   13b8e:	0017      	movs	r7, r2
   13b90:	4e0b      	ldr	r6, [pc, #44]	; (13bc0 <__aeabi_dsub+0x624>)
   13b92:	e589      	b.n	136a8 <__aeabi_dsub+0x10c>
   13b94:	001e      	movs	r6, r3
   13b96:	0027      	movs	r7, r4
   13b98:	3e20      	subs	r6, #32
   13b9a:	40f7      	lsrs	r7, r6
   13b9c:	2b20      	cmp	r3, #32
   13b9e:	d00c      	beq.n	13bba <__aeabi_dsub+0x61e>
   13ba0:	2640      	movs	r6, #64	; 0x40
   13ba2:	1af3      	subs	r3, r6, r3
   13ba4:	409c      	lsls	r4, r3
   13ba6:	4650      	mov	r0, sl
   13ba8:	4320      	orrs	r0, r4
   13baa:	1e44      	subs	r4, r0, #1
   13bac:	41a0      	sbcs	r0, r4
   13bae:	4307      	orrs	r7, r0
   13bb0:	2400      	movs	r4, #0
   13bb2:	18bf      	adds	r7, r7, r2
   13bb4:	e748      	b.n	13a48 <__aeabi_dsub+0x4ac>
   13bb6:	2400      	movs	r4, #0
   13bb8:	e7d0      	b.n	13b5c <__aeabi_dsub+0x5c0>
   13bba:	2400      	movs	r4, #0
   13bbc:	e7f3      	b.n	13ba6 <__aeabi_dsub+0x60a>
   13bbe:	46c0      	nop			; (mov r8, r8)
   13bc0:	000007ff 	.word	0x000007ff
   13bc4:	ff7fffff 	.word	0xff7fffff

00013bc8 <__aeabi_dcmpun>:
   13bc8:	b570      	push	{r4, r5, r6, lr}
   13bca:	4e0e      	ldr	r6, [pc, #56]	; (13c04 <__aeabi_dcmpun+0x3c>)
   13bcc:	030d      	lsls	r5, r1, #12
   13bce:	031c      	lsls	r4, r3, #12
   13bd0:	0049      	lsls	r1, r1, #1
   13bd2:	005b      	lsls	r3, r3, #1
   13bd4:	0b2d      	lsrs	r5, r5, #12
   13bd6:	0d49      	lsrs	r1, r1, #21
   13bd8:	0b24      	lsrs	r4, r4, #12
   13bda:	0d5b      	lsrs	r3, r3, #21
   13bdc:	42b1      	cmp	r1, r6
   13bde:	d004      	beq.n	13bea <__aeabi_dcmpun+0x22>
   13be0:	4908      	ldr	r1, [pc, #32]	; (13c04 <__aeabi_dcmpun+0x3c>)
   13be2:	2000      	movs	r0, #0
   13be4:	428b      	cmp	r3, r1
   13be6:	d008      	beq.n	13bfa <__aeabi_dcmpun+0x32>
   13be8:	bd70      	pop	{r4, r5, r6, pc}
   13bea:	4305      	orrs	r5, r0
   13bec:	2001      	movs	r0, #1
   13bee:	2d00      	cmp	r5, #0
   13bf0:	d1fa      	bne.n	13be8 <__aeabi_dcmpun+0x20>
   13bf2:	4904      	ldr	r1, [pc, #16]	; (13c04 <__aeabi_dcmpun+0x3c>)
   13bf4:	2000      	movs	r0, #0
   13bf6:	428b      	cmp	r3, r1
   13bf8:	d1f6      	bne.n	13be8 <__aeabi_dcmpun+0x20>
   13bfa:	4314      	orrs	r4, r2
   13bfc:	0020      	movs	r0, r4
   13bfe:	1e44      	subs	r4, r0, #1
   13c00:	41a0      	sbcs	r0, r4
   13c02:	e7f1      	b.n	13be8 <__aeabi_dcmpun+0x20>
   13c04:	000007ff 	.word	0x000007ff

00013c08 <__aeabi_d2iz>:
   13c08:	b530      	push	{r4, r5, lr}
   13c0a:	4d13      	ldr	r5, [pc, #76]	; (13c58 <__aeabi_d2iz+0x50>)
   13c0c:	030a      	lsls	r2, r1, #12
   13c0e:	004b      	lsls	r3, r1, #1
   13c10:	0b12      	lsrs	r2, r2, #12
   13c12:	0d5b      	lsrs	r3, r3, #21
   13c14:	0fc9      	lsrs	r1, r1, #31
   13c16:	2400      	movs	r4, #0
   13c18:	42ab      	cmp	r3, r5
   13c1a:	dd10      	ble.n	13c3e <__aeabi_d2iz+0x36>
   13c1c:	4c0f      	ldr	r4, [pc, #60]	; (13c5c <__aeabi_d2iz+0x54>)
   13c1e:	42a3      	cmp	r3, r4
   13c20:	dc0f      	bgt.n	13c42 <__aeabi_d2iz+0x3a>
   13c22:	2480      	movs	r4, #128	; 0x80
   13c24:	4d0e      	ldr	r5, [pc, #56]	; (13c60 <__aeabi_d2iz+0x58>)
   13c26:	0364      	lsls	r4, r4, #13
   13c28:	4322      	orrs	r2, r4
   13c2a:	1aed      	subs	r5, r5, r3
   13c2c:	2d1f      	cmp	r5, #31
   13c2e:	dd0b      	ble.n	13c48 <__aeabi_d2iz+0x40>
   13c30:	480c      	ldr	r0, [pc, #48]	; (13c64 <__aeabi_d2iz+0x5c>)
   13c32:	1ac3      	subs	r3, r0, r3
   13c34:	40da      	lsrs	r2, r3
   13c36:	4254      	negs	r4, r2
   13c38:	2900      	cmp	r1, #0
   13c3a:	d100      	bne.n	13c3e <__aeabi_d2iz+0x36>
   13c3c:	0014      	movs	r4, r2
   13c3e:	0020      	movs	r0, r4
   13c40:	bd30      	pop	{r4, r5, pc}
   13c42:	4b09      	ldr	r3, [pc, #36]	; (13c68 <__aeabi_d2iz+0x60>)
   13c44:	18cc      	adds	r4, r1, r3
   13c46:	e7fa      	b.n	13c3e <__aeabi_d2iz+0x36>
   13c48:	4c08      	ldr	r4, [pc, #32]	; (13c6c <__aeabi_d2iz+0x64>)
   13c4a:	40e8      	lsrs	r0, r5
   13c4c:	46a4      	mov	ip, r4
   13c4e:	4463      	add	r3, ip
   13c50:	409a      	lsls	r2, r3
   13c52:	4302      	orrs	r2, r0
   13c54:	e7ef      	b.n	13c36 <__aeabi_d2iz+0x2e>
   13c56:	46c0      	nop			; (mov r8, r8)
   13c58:	000003fe 	.word	0x000003fe
   13c5c:	0000041d 	.word	0x0000041d
   13c60:	00000433 	.word	0x00000433
   13c64:	00000413 	.word	0x00000413
   13c68:	7fffffff 	.word	0x7fffffff
   13c6c:	fffffbed 	.word	0xfffffbed

00013c70 <__aeabi_i2d>:
   13c70:	b570      	push	{r4, r5, r6, lr}
   13c72:	2800      	cmp	r0, #0
   13c74:	d030      	beq.n	13cd8 <__aeabi_i2d+0x68>
   13c76:	17c3      	asrs	r3, r0, #31
   13c78:	18c4      	adds	r4, r0, r3
   13c7a:	405c      	eors	r4, r3
   13c7c:	0fc5      	lsrs	r5, r0, #31
   13c7e:	0020      	movs	r0, r4
   13c80:	f000 f94c 	bl	13f1c <__clzsi2>
   13c84:	4b17      	ldr	r3, [pc, #92]	; (13ce4 <__aeabi_i2d+0x74>)
   13c86:	4a18      	ldr	r2, [pc, #96]	; (13ce8 <__aeabi_i2d+0x78>)
   13c88:	1a1b      	subs	r3, r3, r0
   13c8a:	1ad2      	subs	r2, r2, r3
   13c8c:	2a1f      	cmp	r2, #31
   13c8e:	dd18      	ble.n	13cc2 <__aeabi_i2d+0x52>
   13c90:	4a16      	ldr	r2, [pc, #88]	; (13cec <__aeabi_i2d+0x7c>)
   13c92:	1ad2      	subs	r2, r2, r3
   13c94:	4094      	lsls	r4, r2
   13c96:	2200      	movs	r2, #0
   13c98:	0324      	lsls	r4, r4, #12
   13c9a:	055b      	lsls	r3, r3, #21
   13c9c:	0b24      	lsrs	r4, r4, #12
   13c9e:	0d5b      	lsrs	r3, r3, #21
   13ca0:	2100      	movs	r1, #0
   13ca2:	0010      	movs	r0, r2
   13ca4:	0324      	lsls	r4, r4, #12
   13ca6:	0d0a      	lsrs	r2, r1, #20
   13ca8:	0b24      	lsrs	r4, r4, #12
   13caa:	0512      	lsls	r2, r2, #20
   13cac:	4322      	orrs	r2, r4
   13cae:	4c10      	ldr	r4, [pc, #64]	; (13cf0 <__aeabi_i2d+0x80>)
   13cb0:	051b      	lsls	r3, r3, #20
   13cb2:	4022      	ands	r2, r4
   13cb4:	4313      	orrs	r3, r2
   13cb6:	005b      	lsls	r3, r3, #1
   13cb8:	07ed      	lsls	r5, r5, #31
   13cba:	085b      	lsrs	r3, r3, #1
   13cbc:	432b      	orrs	r3, r5
   13cbe:	0019      	movs	r1, r3
   13cc0:	bd70      	pop	{r4, r5, r6, pc}
   13cc2:	0021      	movs	r1, r4
   13cc4:	4091      	lsls	r1, r2
   13cc6:	000a      	movs	r2, r1
   13cc8:	210b      	movs	r1, #11
   13cca:	1a08      	subs	r0, r1, r0
   13ccc:	40c4      	lsrs	r4, r0
   13cce:	055b      	lsls	r3, r3, #21
   13cd0:	0324      	lsls	r4, r4, #12
   13cd2:	0b24      	lsrs	r4, r4, #12
   13cd4:	0d5b      	lsrs	r3, r3, #21
   13cd6:	e7e3      	b.n	13ca0 <__aeabi_i2d+0x30>
   13cd8:	2500      	movs	r5, #0
   13cda:	2300      	movs	r3, #0
   13cdc:	2400      	movs	r4, #0
   13cde:	2200      	movs	r2, #0
   13ce0:	e7de      	b.n	13ca0 <__aeabi_i2d+0x30>
   13ce2:	46c0      	nop			; (mov r8, r8)
   13ce4:	0000041e 	.word	0x0000041e
   13ce8:	00000433 	.word	0x00000433
   13cec:	00000413 	.word	0x00000413
   13cf0:	800fffff 	.word	0x800fffff

00013cf4 <__aeabi_ui2d>:
   13cf4:	b510      	push	{r4, lr}
   13cf6:	1e04      	subs	r4, r0, #0
   13cf8:	d028      	beq.n	13d4c <__aeabi_ui2d+0x58>
   13cfa:	f000 f90f 	bl	13f1c <__clzsi2>
   13cfe:	4b15      	ldr	r3, [pc, #84]	; (13d54 <__aeabi_ui2d+0x60>)
   13d00:	4a15      	ldr	r2, [pc, #84]	; (13d58 <__aeabi_ui2d+0x64>)
   13d02:	1a1b      	subs	r3, r3, r0
   13d04:	1ad2      	subs	r2, r2, r3
   13d06:	2a1f      	cmp	r2, #31
   13d08:	dd15      	ble.n	13d36 <__aeabi_ui2d+0x42>
   13d0a:	4a14      	ldr	r2, [pc, #80]	; (13d5c <__aeabi_ui2d+0x68>)
   13d0c:	1ad2      	subs	r2, r2, r3
   13d0e:	4094      	lsls	r4, r2
   13d10:	2200      	movs	r2, #0
   13d12:	0324      	lsls	r4, r4, #12
   13d14:	055b      	lsls	r3, r3, #21
   13d16:	0b24      	lsrs	r4, r4, #12
   13d18:	0d5b      	lsrs	r3, r3, #21
   13d1a:	2100      	movs	r1, #0
   13d1c:	0010      	movs	r0, r2
   13d1e:	0324      	lsls	r4, r4, #12
   13d20:	0d0a      	lsrs	r2, r1, #20
   13d22:	0b24      	lsrs	r4, r4, #12
   13d24:	0512      	lsls	r2, r2, #20
   13d26:	4322      	orrs	r2, r4
   13d28:	4c0d      	ldr	r4, [pc, #52]	; (13d60 <__aeabi_ui2d+0x6c>)
   13d2a:	051b      	lsls	r3, r3, #20
   13d2c:	4022      	ands	r2, r4
   13d2e:	4313      	orrs	r3, r2
   13d30:	005b      	lsls	r3, r3, #1
   13d32:	0859      	lsrs	r1, r3, #1
   13d34:	bd10      	pop	{r4, pc}
   13d36:	0021      	movs	r1, r4
   13d38:	4091      	lsls	r1, r2
   13d3a:	000a      	movs	r2, r1
   13d3c:	210b      	movs	r1, #11
   13d3e:	1a08      	subs	r0, r1, r0
   13d40:	40c4      	lsrs	r4, r0
   13d42:	055b      	lsls	r3, r3, #21
   13d44:	0324      	lsls	r4, r4, #12
   13d46:	0b24      	lsrs	r4, r4, #12
   13d48:	0d5b      	lsrs	r3, r3, #21
   13d4a:	e7e6      	b.n	13d1a <__aeabi_ui2d+0x26>
   13d4c:	2300      	movs	r3, #0
   13d4e:	2400      	movs	r4, #0
   13d50:	2200      	movs	r2, #0
   13d52:	e7e2      	b.n	13d1a <__aeabi_ui2d+0x26>
   13d54:	0000041e 	.word	0x0000041e
   13d58:	00000433 	.word	0x00000433
   13d5c:	00000413 	.word	0x00000413
   13d60:	800fffff 	.word	0x800fffff

00013d64 <__aeabi_f2d>:
   13d64:	0041      	lsls	r1, r0, #1
   13d66:	0e09      	lsrs	r1, r1, #24
   13d68:	1c4b      	adds	r3, r1, #1
   13d6a:	b570      	push	{r4, r5, r6, lr}
   13d6c:	b2db      	uxtb	r3, r3
   13d6e:	0246      	lsls	r6, r0, #9
   13d70:	0a75      	lsrs	r5, r6, #9
   13d72:	0fc4      	lsrs	r4, r0, #31
   13d74:	2b01      	cmp	r3, #1
   13d76:	dd14      	ble.n	13da2 <__aeabi_f2d+0x3e>
   13d78:	23e0      	movs	r3, #224	; 0xe0
   13d7a:	009b      	lsls	r3, r3, #2
   13d7c:	076d      	lsls	r5, r5, #29
   13d7e:	0b36      	lsrs	r6, r6, #12
   13d80:	18cb      	adds	r3, r1, r3
   13d82:	2100      	movs	r1, #0
   13d84:	0d0a      	lsrs	r2, r1, #20
   13d86:	0028      	movs	r0, r5
   13d88:	0512      	lsls	r2, r2, #20
   13d8a:	4d1c      	ldr	r5, [pc, #112]	; (13dfc <__aeabi_f2d+0x98>)
   13d8c:	4332      	orrs	r2, r6
   13d8e:	055b      	lsls	r3, r3, #21
   13d90:	402a      	ands	r2, r5
   13d92:	085b      	lsrs	r3, r3, #1
   13d94:	4313      	orrs	r3, r2
   13d96:	005b      	lsls	r3, r3, #1
   13d98:	07e4      	lsls	r4, r4, #31
   13d9a:	085b      	lsrs	r3, r3, #1
   13d9c:	4323      	orrs	r3, r4
   13d9e:	0019      	movs	r1, r3
   13da0:	bd70      	pop	{r4, r5, r6, pc}
   13da2:	2900      	cmp	r1, #0
   13da4:	d114      	bne.n	13dd0 <__aeabi_f2d+0x6c>
   13da6:	2d00      	cmp	r5, #0
   13da8:	d01e      	beq.n	13de8 <__aeabi_f2d+0x84>
   13daa:	0028      	movs	r0, r5
   13dac:	f000 f8b6 	bl	13f1c <__clzsi2>
   13db0:	280a      	cmp	r0, #10
   13db2:	dc1c      	bgt.n	13dee <__aeabi_f2d+0x8a>
   13db4:	230b      	movs	r3, #11
   13db6:	002a      	movs	r2, r5
   13db8:	1a1b      	subs	r3, r3, r0
   13dba:	40da      	lsrs	r2, r3
   13dbc:	0003      	movs	r3, r0
   13dbe:	3315      	adds	r3, #21
   13dc0:	409d      	lsls	r5, r3
   13dc2:	4b0f      	ldr	r3, [pc, #60]	; (13e00 <__aeabi_f2d+0x9c>)
   13dc4:	0312      	lsls	r2, r2, #12
   13dc6:	1a1b      	subs	r3, r3, r0
   13dc8:	055b      	lsls	r3, r3, #21
   13dca:	0b16      	lsrs	r6, r2, #12
   13dcc:	0d5b      	lsrs	r3, r3, #21
   13dce:	e7d8      	b.n	13d82 <__aeabi_f2d+0x1e>
   13dd0:	2d00      	cmp	r5, #0
   13dd2:	d006      	beq.n	13de2 <__aeabi_f2d+0x7e>
   13dd4:	0b32      	lsrs	r2, r6, #12
   13dd6:	2680      	movs	r6, #128	; 0x80
   13dd8:	0336      	lsls	r6, r6, #12
   13dda:	076d      	lsls	r5, r5, #29
   13ddc:	4316      	orrs	r6, r2
   13dde:	4b09      	ldr	r3, [pc, #36]	; (13e04 <__aeabi_f2d+0xa0>)
   13de0:	e7cf      	b.n	13d82 <__aeabi_f2d+0x1e>
   13de2:	4b08      	ldr	r3, [pc, #32]	; (13e04 <__aeabi_f2d+0xa0>)
   13de4:	2600      	movs	r6, #0
   13de6:	e7cc      	b.n	13d82 <__aeabi_f2d+0x1e>
   13de8:	2300      	movs	r3, #0
   13dea:	2600      	movs	r6, #0
   13dec:	e7c9      	b.n	13d82 <__aeabi_f2d+0x1e>
   13dee:	0003      	movs	r3, r0
   13df0:	002a      	movs	r2, r5
   13df2:	3b0b      	subs	r3, #11
   13df4:	409a      	lsls	r2, r3
   13df6:	2500      	movs	r5, #0
   13df8:	e7e3      	b.n	13dc2 <__aeabi_f2d+0x5e>
   13dfa:	46c0      	nop			; (mov r8, r8)
   13dfc:	800fffff 	.word	0x800fffff
   13e00:	00000389 	.word	0x00000389
   13e04:	000007ff 	.word	0x000007ff

00013e08 <__aeabi_d2f>:
   13e08:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e0a:	004c      	lsls	r4, r1, #1
   13e0c:	0d64      	lsrs	r4, r4, #21
   13e0e:	030b      	lsls	r3, r1, #12
   13e10:	1c62      	adds	r2, r4, #1
   13e12:	0f45      	lsrs	r5, r0, #29
   13e14:	0a5b      	lsrs	r3, r3, #9
   13e16:	0552      	lsls	r2, r2, #21
   13e18:	432b      	orrs	r3, r5
   13e1a:	0fc9      	lsrs	r1, r1, #31
   13e1c:	00c5      	lsls	r5, r0, #3
   13e1e:	0d52      	lsrs	r2, r2, #21
   13e20:	2a01      	cmp	r2, #1
   13e22:	dd28      	ble.n	13e76 <__aeabi_d2f+0x6e>
   13e24:	4a3a      	ldr	r2, [pc, #232]	; (13f10 <__aeabi_d2f+0x108>)
   13e26:	18a6      	adds	r6, r4, r2
   13e28:	2efe      	cmp	r6, #254	; 0xfe
   13e2a:	dc1b      	bgt.n	13e64 <__aeabi_d2f+0x5c>
   13e2c:	2e00      	cmp	r6, #0
   13e2e:	dd3e      	ble.n	13eae <__aeabi_d2f+0xa6>
   13e30:	0180      	lsls	r0, r0, #6
   13e32:	0002      	movs	r2, r0
   13e34:	1e50      	subs	r0, r2, #1
   13e36:	4182      	sbcs	r2, r0
   13e38:	0f6d      	lsrs	r5, r5, #29
   13e3a:	432a      	orrs	r2, r5
   13e3c:	00db      	lsls	r3, r3, #3
   13e3e:	4313      	orrs	r3, r2
   13e40:	075a      	lsls	r2, r3, #29
   13e42:	d004      	beq.n	13e4e <__aeabi_d2f+0x46>
   13e44:	220f      	movs	r2, #15
   13e46:	401a      	ands	r2, r3
   13e48:	2a04      	cmp	r2, #4
   13e4a:	d000      	beq.n	13e4e <__aeabi_d2f+0x46>
   13e4c:	3304      	adds	r3, #4
   13e4e:	2280      	movs	r2, #128	; 0x80
   13e50:	04d2      	lsls	r2, r2, #19
   13e52:	401a      	ands	r2, r3
   13e54:	d05a      	beq.n	13f0c <__aeabi_d2f+0x104>
   13e56:	3601      	adds	r6, #1
   13e58:	2eff      	cmp	r6, #255	; 0xff
   13e5a:	d003      	beq.n	13e64 <__aeabi_d2f+0x5c>
   13e5c:	019b      	lsls	r3, r3, #6
   13e5e:	0a5b      	lsrs	r3, r3, #9
   13e60:	b2f4      	uxtb	r4, r6
   13e62:	e001      	b.n	13e68 <__aeabi_d2f+0x60>
   13e64:	24ff      	movs	r4, #255	; 0xff
   13e66:	2300      	movs	r3, #0
   13e68:	0258      	lsls	r0, r3, #9
   13e6a:	05e4      	lsls	r4, r4, #23
   13e6c:	0a40      	lsrs	r0, r0, #9
   13e6e:	07c9      	lsls	r1, r1, #31
   13e70:	4320      	orrs	r0, r4
   13e72:	4308      	orrs	r0, r1
   13e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e76:	2c00      	cmp	r4, #0
   13e78:	d007      	beq.n	13e8a <__aeabi_d2f+0x82>
   13e7a:	431d      	orrs	r5, r3
   13e7c:	d0f2      	beq.n	13e64 <__aeabi_d2f+0x5c>
   13e7e:	2080      	movs	r0, #128	; 0x80
   13e80:	00db      	lsls	r3, r3, #3
   13e82:	0480      	lsls	r0, r0, #18
   13e84:	4303      	orrs	r3, r0
   13e86:	26ff      	movs	r6, #255	; 0xff
   13e88:	e7da      	b.n	13e40 <__aeabi_d2f+0x38>
   13e8a:	432b      	orrs	r3, r5
   13e8c:	d003      	beq.n	13e96 <__aeabi_d2f+0x8e>
   13e8e:	2305      	movs	r3, #5
   13e90:	08db      	lsrs	r3, r3, #3
   13e92:	2cff      	cmp	r4, #255	; 0xff
   13e94:	d003      	beq.n	13e9e <__aeabi_d2f+0x96>
   13e96:	025b      	lsls	r3, r3, #9
   13e98:	0a5b      	lsrs	r3, r3, #9
   13e9a:	b2e4      	uxtb	r4, r4
   13e9c:	e7e4      	b.n	13e68 <__aeabi_d2f+0x60>
   13e9e:	2b00      	cmp	r3, #0
   13ea0:	d032      	beq.n	13f08 <__aeabi_d2f+0x100>
   13ea2:	2080      	movs	r0, #128	; 0x80
   13ea4:	03c0      	lsls	r0, r0, #15
   13ea6:	4303      	orrs	r3, r0
   13ea8:	025b      	lsls	r3, r3, #9
   13eaa:	0a5b      	lsrs	r3, r3, #9
   13eac:	e7dc      	b.n	13e68 <__aeabi_d2f+0x60>
   13eae:	0032      	movs	r2, r6
   13eb0:	3217      	adds	r2, #23
   13eb2:	db14      	blt.n	13ede <__aeabi_d2f+0xd6>
   13eb4:	2280      	movs	r2, #128	; 0x80
   13eb6:	271e      	movs	r7, #30
   13eb8:	0412      	lsls	r2, r2, #16
   13eba:	4313      	orrs	r3, r2
   13ebc:	1bbf      	subs	r7, r7, r6
   13ebe:	2f1f      	cmp	r7, #31
   13ec0:	dc0f      	bgt.n	13ee2 <__aeabi_d2f+0xda>
   13ec2:	4a14      	ldr	r2, [pc, #80]	; (13f14 <__aeabi_d2f+0x10c>)
   13ec4:	4694      	mov	ip, r2
   13ec6:	4464      	add	r4, ip
   13ec8:	002a      	movs	r2, r5
   13eca:	40a5      	lsls	r5, r4
   13ecc:	002e      	movs	r6, r5
   13ece:	40a3      	lsls	r3, r4
   13ed0:	1e75      	subs	r5, r6, #1
   13ed2:	41ae      	sbcs	r6, r5
   13ed4:	40fa      	lsrs	r2, r7
   13ed6:	4333      	orrs	r3, r6
   13ed8:	4313      	orrs	r3, r2
   13eda:	2600      	movs	r6, #0
   13edc:	e7b0      	b.n	13e40 <__aeabi_d2f+0x38>
   13ede:	2400      	movs	r4, #0
   13ee0:	e7d5      	b.n	13e8e <__aeabi_d2f+0x86>
   13ee2:	2202      	movs	r2, #2
   13ee4:	4252      	negs	r2, r2
   13ee6:	1b96      	subs	r6, r2, r6
   13ee8:	001a      	movs	r2, r3
   13eea:	40f2      	lsrs	r2, r6
   13eec:	2f20      	cmp	r7, #32
   13eee:	d009      	beq.n	13f04 <__aeabi_d2f+0xfc>
   13ef0:	4809      	ldr	r0, [pc, #36]	; (13f18 <__aeabi_d2f+0x110>)
   13ef2:	4684      	mov	ip, r0
   13ef4:	4464      	add	r4, ip
   13ef6:	40a3      	lsls	r3, r4
   13ef8:	432b      	orrs	r3, r5
   13efa:	1e5d      	subs	r5, r3, #1
   13efc:	41ab      	sbcs	r3, r5
   13efe:	2600      	movs	r6, #0
   13f00:	4313      	orrs	r3, r2
   13f02:	e79d      	b.n	13e40 <__aeabi_d2f+0x38>
   13f04:	2300      	movs	r3, #0
   13f06:	e7f7      	b.n	13ef8 <__aeabi_d2f+0xf0>
   13f08:	2300      	movs	r3, #0
   13f0a:	e7ad      	b.n	13e68 <__aeabi_d2f+0x60>
   13f0c:	0034      	movs	r4, r6
   13f0e:	e7bf      	b.n	13e90 <__aeabi_d2f+0x88>
   13f10:	fffffc80 	.word	0xfffffc80
   13f14:	fffffc82 	.word	0xfffffc82
   13f18:	fffffca2 	.word	0xfffffca2

00013f1c <__clzsi2>:
   13f1c:	211c      	movs	r1, #28
   13f1e:	2301      	movs	r3, #1
   13f20:	041b      	lsls	r3, r3, #16
   13f22:	4298      	cmp	r0, r3
   13f24:	d301      	bcc.n	13f2a <__clzsi2+0xe>
   13f26:	0c00      	lsrs	r0, r0, #16
   13f28:	3910      	subs	r1, #16
   13f2a:	0a1b      	lsrs	r3, r3, #8
   13f2c:	4298      	cmp	r0, r3
   13f2e:	d301      	bcc.n	13f34 <__clzsi2+0x18>
   13f30:	0a00      	lsrs	r0, r0, #8
   13f32:	3908      	subs	r1, #8
   13f34:	091b      	lsrs	r3, r3, #4
   13f36:	4298      	cmp	r0, r3
   13f38:	d301      	bcc.n	13f3e <__clzsi2+0x22>
   13f3a:	0900      	lsrs	r0, r0, #4
   13f3c:	3904      	subs	r1, #4
   13f3e:	a202      	add	r2, pc, #8	; (adr r2, 13f48 <__clzsi2+0x2c>)
   13f40:	5c10      	ldrb	r0, [r2, r0]
   13f42:	1840      	adds	r0, r0, r1
   13f44:	4770      	bx	lr
   13f46:	46c0      	nop			; (mov r8, r8)
   13f48:	02020304 	.word	0x02020304
   13f4c:	01010101 	.word	0x01010101
	...
   13f58:	6c696166 	.word	0x6c696166
   13f5c:	74206465 	.word	0x74206465
   13f60:	6e69206f 	.word	0x6e69206f
   13f64:	61697469 	.word	0x61697469
   13f68:	657a696c 	.word	0x657a696c
   13f6c:	43444820 	.word	0x43444820
   13f70:	30383031 	.word	0x30383031
   13f74:	69726420 	.word	0x69726420
   13f78:	2e726576 	.word	0x2e726576
   13f7c:	0000000d 	.word	0x0000000d
   13f80:	6c696166 	.word	0x6c696166
   13f84:	74206465 	.word	0x74206465
   13f88:	0973206f 	.word	0x0973206f
   13f8c:	20646e65 	.word	0x20646e65
   13f90:	69676572 	.word	0x69676572
   13f94:	72657473 	.word	0x72657473
   13f98:	71657220 	.word	0x71657220
   13f9c:	74736575 	.word	0x74736575
   13fa0:	726f6620 	.word	0x726f6620
   13fa4:	6d6f6320 	.word	0x6d6f6320
   13fa8:	646e616d 	.word	0x646e616d
   13fac:	25783020 	.word	0x25783020
   13fb0:	21783230 	.word	0x21783230
   13fb4:	00000a0d 	.word	0x00000a0d
   13fb8:	6c696166 	.word	0x6c696166
   13fbc:	74206465 	.word	0x74206465
   13fc0:	6572206f 	.word	0x6572206f
   13fc4:	76696563 	.word	0x76696563
   13fc8:	79622065 	.word	0x79622065
   13fcc:	20736574 	.word	0x20736574
   13fd0:	20726f66 	.word	0x20726f66
   13fd4:	6d6d6f63 	.word	0x6d6d6f63
   13fd8:	20646e61 	.word	0x20646e61
   13fdc:	30257830 	.word	0x30257830
   13fe0:	0d217832 	.word	0x0d217832
   13fe4:	0000000a 	.word	0x0000000a
   13fe8:	6f727265 	.word	0x6f727265
   13fec:	72742072 	.word	0x72742072
   13ff0:	676e6979 	.word	0x676e6979
   13ff4:	206f7420 	.word	0x206f7420
   13ff8:	20746573 	.word	0x20746573
   13ffc:	6f736572 	.word	0x6f736572
   14000:	6974756c 	.word	0x6974756c
   14004:	0d216e6f 	.word	0x0d216e6f
   14008:	00000000 	.word	0x00000000
   1400c:	6c696166 	.word	0x6c696166
   14010:	74206465 	.word	0x74206465
   14014:	6e69206f 	.word	0x6e69206f
   14018:	61697469 	.word	0x61697469
   1401c:	657a696c 	.word	0x657a696c
   14020:	4c535420 	.word	0x4c535420
   14024:	31363532 	.word	0x31363532
   14028:	69726420 	.word	0x69726420
   1402c:	2e726576 	.word	0x2e726576
   14030:	0000000d 	.word	0x0000000d
   14034:	6c696166 	.word	0x6c696166
   14038:	74206465 	.word	0x74206465
   1403c:	6573206f 	.word	0x6573206f
   14040:	7220646e 	.word	0x7220646e
   14044:	73696765 	.word	0x73696765
   14048:	20726574 	.word	0x20726574
   1404c:	75716572 	.word	0x75716572
   14050:	20747365 	.word	0x20747365
   14054:	20726f66 	.word	0x20726f66
   14058:	6d6d6f63 	.word	0x6d6d6f63
   1405c:	20646e61 	.word	0x20646e61
   14060:	30257830 	.word	0x30257830
   14064:	0d217832 	.word	0x0d217832
   14068:	0000000a 	.word	0x0000000a
   1406c:	000051a4 	.word	0x000051a4
   14070:	000051ac 	.word	0x000051ac
   14074:	000051ba 	.word	0x000051ba
   14078:	000051ec 	.word	0x000051ec
   1407c:	000051f6 	.word	0x000051f6
   14080:	666e6f63 	.word	0x666e6f63
   14084:	72756769 	.word	0x72756769
   14088:	74685f65 	.word	0x74685f65
   1408c:	635f7074 	.word	0x635f7074
   14090:	6e65696c 	.word	0x6e65696c
   14094:	48203a74 	.word	0x48203a74
   14098:	20505454 	.word	0x20505454
   1409c:	65696c63 	.word	0x65696c63
   140a0:	6920746e 	.word	0x6920746e
   140a4:	6974696e 	.word	0x6974696e
   140a8:	7a696c61 	.word	0x7a696c61
   140ac:	6f697461 	.word	0x6f697461
   140b0:	6166206e 	.word	0x6166206e
   140b4:	64656c69 	.word	0x64656c69
   140b8:	72282021 	.word	0x72282021
   140bc:	25207365 	.word	0x25207365
   140c0:	0a0d2964 	.word	0x0a0d2964
   140c4:	00000000 	.word	0x00000000
   140c8:	6c696166 	.word	0x6c696166
   140cc:	74206465 	.word	0x74206465
   140d0:	6e69206f 	.word	0x6e69206f
   140d4:	61697469 	.word	0x61697469
   140d8:	657a696c 	.word	0x657a696c
   140dc:	66697720 	.word	0x66697720
   140e0:	61702069 	.word	0x61702069
   140e4:	656d6172 	.word	0x656d6172
   140e8:	73726574 	.word	0x73726574
   140ec:	0000000d 	.word	0x0000000d
   140f0:	202d2d2d 	.word	0x202d2d2d
   140f4:	636c6557 	.word	0x636c6557
   140f8:	20656d6f 	.word	0x20656d6f
   140fc:	41206f74 	.word	0x41206f74
   14100:	4e495754 	.word	0x4e495754
   14104:	35312043 	.word	0x35312043
   14108:	43203030 	.word	0x43203030
   1410c:	656e6e6f 	.word	0x656e6e6f
   14110:	6f697463 	.word	0x6f697463
   14114:	6554206e 	.word	0x6554206e
   14118:	2d207473 	.word	0x2d207473
   1411c:	000d2d2d 	.word	0x000d2d2d
   14120:	6e69616d 	.word	0x6e69616d
   14124:	6f63203a 	.word	0x6f63203a
   14128:	63656e6e 	.word	0x63656e6e
   1412c:	676e6974 	.word	0x676e6974
   14130:	206f7420 	.word	0x206f7420
   14134:	69466957 	.word	0x69466957
   14138:	20504120 	.word	0x20504120
   1413c:	2e2e7325 	.word	0x2e2e7325
   14140:	000a0d2e 	.word	0x000a0d2e
   14144:	63637573 	.word	0x63637573
   14148:	66737365 	.word	0x66737365
   1414c:	796c6c75 	.word	0x796c6c75
   14150:	6e6f6320 	.word	0x6e6f6320
   14154:	7463656e 	.word	0x7463656e
   14158:	00006465 	.word	0x00006465
   1415c:	50726941 	.word	0x50726941
   14160:	4e6e6e65 	.word	0x4e6e6e65
   14164:	442d7465 	.word	0x442d7465
   14168:	63697665 	.word	0x63697665
   1416c:	00000065 	.word	0x00000065
   14170:	6e6e6570 	.word	0x6e6e6570
   14174:	30343731 	.word	0x30343731
   14178:	69666977 	.word	0x69666977
   1417c:	00000000 	.word	0x00000000
   14180:	70747468 	.word	0x70747468
   14184:	772f2f3a 	.word	0x772f2f3a
   14188:	732e7777 	.word	0x732e7777
   1418c:	2e736165 	.word	0x2e736165
   14190:	6e657075 	.word	0x6e657075
   14194:	64652e6e 	.word	0x64652e6e
   14198:	777e2f75 	.word	0x777e2f75
   1419c:	68637261 	.word	0x68637261
   141a0:	652f7265 	.word	0x652f7265
   141a4:	31356573 	.word	0x31356573
   141a8:	656d2f36 	.word	0x656d2f36
   141ac:	61646174 	.word	0x61646174
   141b0:	622e6174 	.word	0x622e6174
   141b4:	00006e69 	.word	0x00006e69
   141b8:	70747468 	.word	0x70747468
   141bc:	772f2f3a 	.word	0x772f2f3a
   141c0:	732e7777 	.word	0x732e7777
   141c4:	2e736165 	.word	0x2e736165
   141c8:	6e657075 	.word	0x6e657075
   141cc:	64652e6e 	.word	0x64652e6e
   141d0:	777e2f75 	.word	0x777e2f75
   141d4:	68637261 	.word	0x68637261
   141d8:	652f7265 	.word	0x652f7265
   141dc:	31356573 	.word	0x31356573
   141e0:	65742f36 	.word	0x65742f36
   141e4:	662d7473 	.word	0x662d7473
   141e8:	776d7269 	.word	0x776d7269
   141ec:	2e657261 	.word	0x2e657261
   141f0:	006e6962 	.word	0x006e6962
   141f4:	70747468 	.word	0x70747468
   141f8:	696c635f 	.word	0x696c635f
   141fc:	5f746e65 	.word	0x5f746e65
   14200:	6c6c6163 	.word	0x6c6c6163
   14204:	6b636162 	.word	0x6b636162
   14208:	5448203a 	.word	0x5448203a
   1420c:	63205054 	.word	0x63205054
   14210:	6e65696c 	.word	0x6e65696c
   14214:	6f732074 	.word	0x6f732074
   14218:	74656b63 	.word	0x74656b63
   1421c:	6e6f6320 	.word	0x6e6f6320
   14220:	7463656e 	.word	0x7463656e
   14224:	0d2e6465 	.word	0x0d2e6465
   14228:	00000000 	.word	0x00000000
   1422c:	70747468 	.word	0x70747468
   14230:	696c635f 	.word	0x696c635f
   14234:	5f746e65 	.word	0x5f746e65
   14238:	6c6c6163 	.word	0x6c6c6163
   1423c:	6b636162 	.word	0x6b636162
   14240:	6572203a 	.word	0x6572203a
   14244:	73657571 	.word	0x73657571
   14248:	6f632074 	.word	0x6f632074
   1424c:	656c706d 	.word	0x656c706d
   14250:	2e646574 	.word	0x2e646574
   14254:	0000000d 	.word	0x0000000d
   14258:	70747468 	.word	0x70747468
   1425c:	696c635f 	.word	0x696c635f
   14260:	5f746e65 	.word	0x5f746e65
   14264:	6c6c6163 	.word	0x6c6c6163
   14268:	6b636162 	.word	0x6b636162
   1426c:	6572203a 	.word	0x6572203a
   14270:	76696563 	.word	0x76696563
   14274:	72206465 	.word	0x72206465
   14278:	6f707365 	.word	0x6f707365
   1427c:	2065736e 	.word	0x2065736e
   14280:	64207525 	.word	0x64207525
   14284:	20617461 	.word	0x20617461
   14288:	657a6973 	.word	0x657a6973
   1428c:	0d752520 	.word	0x0d752520
   14290:	0000000a 	.word	0x0000000a
   14294:	70747468 	.word	0x70747468
   14298:	696c635f 	.word	0x696c635f
   1429c:	5f746e65 	.word	0x5f746e65
   142a0:	6c6c6163 	.word	0x6c6c6163
   142a4:	6b636162 	.word	0x6b636162
   142a8:	6964203a 	.word	0x6964203a
   142ac:	6e6f6373 	.word	0x6e6f6373
   142b0:	7463656e 	.word	0x7463656e
   142b4:	206e6f69 	.word	0x206e6f69
   142b8:	73616572 	.word	0x73616572
   142bc:	253a6e6f 	.word	0x253a6e6f
   142c0:	000a0d64 	.word	0x000a0d64
   142c4:	6f736572 	.word	0x6f736572
   142c8:	5f65766c 	.word	0x5f65766c
   142cc:	203a6263 	.word	0x203a6263
   142d0:	49207325 	.word	0x49207325
   142d4:	64612050 	.word	0x64612050
   142d8:	73657264 	.word	0x73657264
   142dc:	73692073 	.word	0x73692073
   142e0:	2e642520 	.word	0x2e642520
   142e4:	252e6425 	.word	0x252e6425
   142e8:	64252e64 	.word	0x64252e64
   142ec:	0a0d0a0d 	.word	0x0a0d0a0d
   142f0:	00000000 	.word	0x00000000
   142f4:	72617473 	.word	0x72617473
   142f8:	6f645f74 	.word	0x6f645f74
   142fc:	6f6c6e77 	.word	0x6f6c6e77
   14300:	203a6461 	.word	0x203a6461
   14304:	20434d4d 	.word	0x20434d4d
   14308:	726f7473 	.word	0x726f7473
   1430c:	20656761 	.word	0x20656761
   14310:	20746f6e 	.word	0x20746f6e
   14314:	64616572 	.word	0x64616572
   14318:	000d2e79 	.word	0x000d2e79
   1431c:	72617473 	.word	0x72617473
   14320:	6f645f74 	.word	0x6f645f74
   14324:	6f6c6e77 	.word	0x6f6c6e77
   14328:	203a6461 	.word	0x203a6461
   1432c:	462d6957 	.word	0x462d6957
   14330:	73692069 	.word	0x73692069
   14334:	746f6e20 	.word	0x746f6e20
   14338:	6e6f6320 	.word	0x6e6f6320
   1433c:	7463656e 	.word	0x7463656e
   14340:	0d2e6465 	.word	0x0d2e6465
   14344:	00000000 	.word	0x00000000
   14348:	72617473 	.word	0x72617473
   1434c:	6f645f74 	.word	0x6f645f74
   14350:	6f6c6e77 	.word	0x6f6c6e77
   14354:	203a6461 	.word	0x203a6461
   14358:	75716572 	.word	0x75716572
   1435c:	20747365 	.word	0x20747365
   14360:	73207369 	.word	0x73207369
   14364:	20746e65 	.word	0x20746e65
   14368:	65726c61 	.word	0x65726c61
   1436c:	2e796461 	.word	0x2e796461
   14370:	0000000d 	.word	0x0000000d
   14374:	72617473 	.word	0x72617473
   14378:	6f645f74 	.word	0x6f645f74
   1437c:	6f6c6e77 	.word	0x6f6c6e77
   14380:	203a6461 	.word	0x203a6461
   14384:	6e6e7572 	.word	0x6e6e7572
   14388:	20676e69 	.word	0x20676e69
   1438c:	6e776f64 	.word	0x6e776f64
   14390:	64616f6c 	.word	0x64616f6c
   14394:	726c6120 	.word	0x726c6120
   14398:	79646165 	.word	0x79646165
   1439c:	00000d2e 	.word	0x00000d2e
   143a0:	72617473 	.word	0x72617473
   143a4:	6f645f74 	.word	0x6f645f74
   143a8:	6f6c6e77 	.word	0x6f6c6e77
   143ac:	5b206461 	.word	0x5b206461
   143b0:	5f544f4e 	.word	0x5f544f4e
   143b4:	43454843 	.word	0x43454843
   143b8:	5d44454b 	.word	0x5d44454b
   143bc:	6573203a 	.word	0x6573203a
   143c0:	6e69646e 	.word	0x6e69646e
   143c4:	54482067 	.word	0x54482067
   143c8:	72205054 	.word	0x72205054
   143cc:	65757165 	.word	0x65757165
   143d0:	66207473 	.word	0x66207473
   143d4:	6820726f 	.word	0x6820726f
   143d8:	65646165 	.word	0x65646165
   143dc:	00000d72 	.word	0x00000d72
   143e0:	72617473 	.word	0x72617473
   143e4:	6f645f74 	.word	0x6f645f74
   143e8:	6f6c6e77 	.word	0x6f6c6e77
   143ec:	5b206461 	.word	0x5b206461
   143f0:	41445055 	.word	0x41445055
   143f4:	415f4554 	.word	0x415f4554
   143f8:	4c494156 	.word	0x4c494156
   143fc:	454c4241 	.word	0x454c4241
   14400:	73203a5d 	.word	0x73203a5d
   14404:	69646e65 	.word	0x69646e65
   14408:	4820676e 	.word	0x4820676e
   1440c:	20505454 	.word	0x20505454
   14410:	75716572 	.word	0x75716572
   14414:	20747365 	.word	0x20747365
   14418:	20726f66 	.word	0x20726f66
   1441c:	6d726966 	.word	0x6d726966
   14420:	65726177 	.word	0x65726177
   14424:	0000000d 	.word	0x0000000d
   14428:	72617473 	.word	0x72617473
   1442c:	6f645f74 	.word	0x6f645f74
   14430:	6f6c6e77 	.word	0x6f6c6e77
   14434:	203a6461 	.word	0x203a6461
   14438:	75206f6e 	.word	0x75206f6e
   1443c:	74616470 	.word	0x74616470
   14440:	76612065 	.word	0x76612065
   14444:	616c6961 	.word	0x616c6961
   14448:	0d656c62 	.word	0x0d656c62
   1444c:	00000000 	.word	0x00000000
   14450:	726f7473 	.word	0x726f7473
   14454:	69665f65 	.word	0x69665f65
   14458:	705f656c 	.word	0x705f656c
   1445c:	656b6361 	.word	0x656b6361
   14460:	65203a74 	.word	0x65203a74
   14464:	7974706d 	.word	0x7974706d
   14468:	74616420 	.word	0x74616420
   1446c:	000d2e61 	.word	0x000d2e61
   14470:	726f7473 	.word	0x726f7473
   14474:	69665f65 	.word	0x69665f65
   14478:	705f656c 	.word	0x705f656c
   1447c:	656b6361 	.word	0x656b6361
   14480:	555b2074 	.word	0x555b2074
   14484:	54414450 	.word	0x54414450
   14488:	48435f45 	.word	0x48435f45
   1448c:	5d4b4345 	.word	0x5d4b4345
   14490:	6966203a 	.word	0x6966203a
   14494:	5b20656c 	.word	0x5b20656c
   14498:	62206425 	.word	0x62206425
   1449c:	73657479 	.word	0x73657479
   144a0:	6f64205d 	.word	0x6f64205d
   144a4:	6e207365 	.word	0x6e207365
   144a8:	6d20746f 	.word	0x6d20746f
   144ac:	68637461 	.word	0x68637461
   144b0:	61656820 	.word	0x61656820
   144b4:	20726564 	.word	0x20726564
   144b8:	2064255b 	.word	0x2064255b
   144bc:	65747962 	.word	0x65747962
   144c0:	73205d73 	.word	0x73205d73
   144c4:	0d657a69 	.word	0x0d657a69
   144c8:	0000000a 	.word	0x0000000a
   144cc:	2077656e 	.word	0x2077656e
   144d0:	6d726966 	.word	0x6d726966
   144d4:	65726177 	.word	0x65726177
   144d8:	72657620 	.word	0x72657620
   144dc:	6e6f6973 	.word	0x6e6f6973
   144e0:	6425203a 	.word	0x6425203a
   144e4:	00000a0d 	.word	0x00000a0d
   144e8:	2077656e 	.word	0x2077656e
   144ec:	6d726966 	.word	0x6d726966
   144f0:	65726177 	.word	0x65726177
   144f4:	65686320 	.word	0x65686320
   144f8:	75736b63 	.word	0x75736b63
   144fc:	25203a6d 	.word	0x25203a6d
   14500:	0d783430 	.word	0x0d783430
   14504:	0000000a 	.word	0x0000000a
   14508:	5f315746 	.word	0x5f315746
   1450c:	53415245 	.word	0x53415245
   14510:	44415f45 	.word	0x44415f45
   14514:	203a5244 	.word	0x203a5244
   14518:	0a0d6425 	.word	0x0a0d6425
   1451c:	00000000 	.word	0x00000000
   14520:	726f7473 	.word	0x726f7473
   14524:	69665f65 	.word	0x69665f65
   14528:	705f656c 	.word	0x705f656c
   1452c:	656b6361 	.word	0x656b6361
   14530:	4e203a74 	.word	0x4e203a74
   14534:	6c66206f 	.word	0x6c66206f
   14538:	20687361 	.word	0x20687361
   1453c:	70696863 	.word	0x70696863
   14540:	00000d2e 	.word	0x00000d2e
   14544:	726f7473 	.word	0x726f7473
   14548:	69665f65 	.word	0x69665f65
   1454c:	705f656c 	.word	0x705f656c
   14550:	656b6361 	.word	0x656b6361
   14554:	65203a74 	.word	0x65203a74
   14558:	726f7272 	.word	0x726f7272
   1455c:	656c6320 	.word	0x656c6320
   14560:	6e697261 	.word	0x6e697261
   14564:	65732067 	.word	0x65732067
   14568:	726f7463 	.word	0x726f7463
   1456c:	6f727020 	.word	0x6f727020
   14570:	74636574 	.word	0x74636574
   14574:	20746120 	.word	0x20746120
   14578:	72646461 	.word	0x72646461
   1457c:	20737365 	.word	0x20737365
   14580:	0d206425 	.word	0x0d206425
   14584:	0000000a 	.word	0x0000000a
   14588:	726f7473 	.word	0x726f7473
   1458c:	69665f65 	.word	0x69665f65
   14590:	705f656c 	.word	0x705f656c
   14594:	656b6361 	.word	0x656b6361
   14598:	65203a74 	.word	0x65203a74
   1459c:	726f7272 	.word	0x726f7272
   145a0:	61726520 	.word	0x61726520
   145a4:	676e6973 	.word	0x676e6973
   145a8:	63657320 	.word	0x63657320
   145ac:	20726f74 	.word	0x20726f74
   145b0:	61207461 	.word	0x61207461
   145b4:	65726464 	.word	0x65726464
   145b8:	25207373 	.word	0x25207373
   145bc:	0a0d2064 	.word	0x0a0d2064
   145c0:	00000000 	.word	0x00000000
   145c4:	72617473 	.word	0x72617473
   145c8:	676e6974 	.word	0x676e6974
   145cc:	6c617620 	.word	0x6c617620
   145d0:	0000203a 	.word	0x0000203a
   145d4:	726f7473 	.word	0x726f7473
   145d8:	69665f65 	.word	0x69665f65
   145dc:	705f656c 	.word	0x705f656c
   145e0:	656b6361 	.word	0x656b6361
   145e4:	65203a74 	.word	0x65203a74
   145e8:	726f7272 	.word	0x726f7272
   145ec:	69727720 	.word	0x69727720
   145f0:	676e6974 	.word	0x676e6974
   145f4:	776f7220 	.word	0x776f7220
   145f8:	20746120 	.word	0x20746120
   145fc:	72646461 	.word	0x72646461
   14600:	20737365 	.word	0x20737365
   14604:	0d206425 	.word	0x0d206425
   14608:	0000000a 	.word	0x0000000a
   1460c:	726f7473 	.word	0x726f7473
   14610:	69665f65 	.word	0x69665f65
   14614:	705f656c 	.word	0x705f656c
   14618:	656b6361 	.word	0x656b6361
   1461c:	72203a74 	.word	0x72203a74
   14620:	69656365 	.word	0x69656365
   14624:	5b646576 	.word	0x5b646576
   14628:	5d756c25 	.word	0x5d756c25
   1462c:	6966202c 	.word	0x6966202c
   14630:	7320656c 	.word	0x7320656c
   14634:	5b657a69 	.word	0x5b657a69
   14638:	5d756c25 	.word	0x5d756c25
   1463c:	00000a0d 	.word	0x00000a0d
   14640:	726f7473 	.word	0x726f7473
   14644:	69665f65 	.word	0x69665f65
   14648:	705f656c 	.word	0x705f656c
   1464c:	656b6361 	.word	0x656b6361
   14650:	66203a74 	.word	0x66203a74
   14654:	20656c69 	.word	0x20656c69
   14658:	6e776f64 	.word	0x6e776f64
   1465c:	64616f6c 	.word	0x64616f6c
   14660:	73206465 	.word	0x73206465
   14664:	65636375 	.word	0x65636375
   14668:	75667373 	.word	0x75667373
   1466c:	2e796c6c 	.word	0x2e796c6c
   14670:	0000000d 	.word	0x0000000d
   14674:	726f7473 	.word	0x726f7473
   14678:	69665f65 	.word	0x69665f65
   1467c:	705f656c 	.word	0x705f656c
   14680:	656b6361 	.word	0x656b6361
   14684:	66203a74 	.word	0x66203a74
   14688:	6873616c 	.word	0x6873616c
   1468c:	63757320 	.word	0x63757320
   14690:	73736563 	.word	0x73736563
   14694:	6c6c7566 	.word	0x6c6c7566
   14698:	72772079 	.word	0x72772079
   1469c:	65747469 	.word	0x65747469
   146a0:	6977206e 	.word	0x6977206e
   146a4:	6e206874 	.word	0x6e206874
   146a8:	7265206f 	.word	0x7265206f
   146ac:	73726f72 	.word	0x73726f72
   146b0:	0000000d 	.word	0x0000000d
   146b4:	726f7473 	.word	0x726f7473
   146b8:	69665f65 	.word	0x69665f65
   146bc:	705f656c 	.word	0x705f656c
   146c0:	656b6361 	.word	0x656b6361
   146c4:	66203a74 	.word	0x66203a74
   146c8:	6873616c 	.word	0x6873616c
   146cc:	726f6320 	.word	0x726f6320
   146d0:	74707572 	.word	0x74707572
   146d4:	0d2e6465 	.word	0x0d2e6465
   146d8:	00000000 	.word	0x00000000
   146dc:	726f7473 	.word	0x726f7473
   146e0:	69665f65 	.word	0x69665f65
   146e4:	705f656c 	.word	0x705f656c
   146e8:	656b6361 	.word	0x656b6361
   146ec:	66203a74 	.word	0x66203a74
   146f0:	20656c69 	.word	0x20656c69
   146f4:	63656863 	.word	0x63656863
   146f8:	6d75736b 	.word	0x6d75736b
   146fc:	6f642073 	.word	0x6f642073
   14700:	2074276e 	.word	0x2074276e
   14704:	6374616d 	.word	0x6374616d
   14708:	0a0d2e68 	.word	0x0a0d2e68
   1470c:	70784520 	.word	0x70784520
   14710:	65746365 	.word	0x65746365
   14714:	68632064 	.word	0x68632064
   14718:	736b6365 	.word	0x736b6365
   1471c:	25206d75 	.word	0x25206d75
   14720:	0d783430 	.word	0x0d783430
   14724:	6552200a 	.word	0x6552200a
   14728:	76696563 	.word	0x76696563
   1472c:	63206465 	.word	0x63206465
   14730:	6b636568 	.word	0x6b636568
   14734:	206d7573 	.word	0x206d7573
   14738:	78343025 	.word	0x78343025
   1473c:	00000a0d 	.word	0x00000a0d
   14740:	61647075 	.word	0x61647075
   14744:	625f6574 	.word	0x625f6574
   14748:	5f746f6f 	.word	0x5f746f6f
   1474c:	74617473 	.word	0x74617473
   14750:	203a7375 	.word	0x203a7375
   14754:	5f776f72 	.word	0x5f776f72
   14758:	655f6f74 	.word	0x655f6f74
   1475c:	65736172 	.word	0x65736172
   14760:	6425203a 	.word	0x6425203a
   14764:	00000a0d 	.word	0x00000a0d
   14768:	61647075 	.word	0x61647075
   1476c:	625f6574 	.word	0x625f6574
   14770:	5f746f6f 	.word	0x5f746f6f
   14774:	74617473 	.word	0x74617473
   14778:	203a7375 	.word	0x203a7375
   1477c:	65676170 	.word	0x65676170
   14780:	5f6f745f 	.word	0x5f6f745f
   14784:	74697277 	.word	0x74697277
   14788:	25203a65 	.word	0x25203a65
   1478c:	000a0d64 	.word	0x000a0d64
   14790:	61647075 	.word	0x61647075
   14794:	625f6574 	.word	0x625f6574
   14798:	5f746f6f 	.word	0x5f746f6f
   1479c:	74617473 	.word	0x74617473
   147a0:	203a7375 	.word	0x203a7375
   147a4:	5f776f72 	.word	0x5f776f72
   147a8:	72646461 	.word	0x72646461
   147ac:	3a737365 	.word	0x3a737365
   147b0:	0d642520 	.word	0x0d642520
   147b4:	0000000a 	.word	0x0000000a
   147b8:	61647075 	.word	0x61647075
   147bc:	625f6574 	.word	0x625f6574
   147c0:	5f746f6f 	.word	0x5f746f6f
   147c4:	74617473 	.word	0x74617473
   147c8:	203a7375 	.word	0x203a7375
   147cc:	65676170 	.word	0x65676170
   147d0:	66666f5f 	.word	0x66666f5f
   147d4:	3a746573 	.word	0x3a746573
   147d8:	0d642520 	.word	0x0d642520
   147dc:	0000000a 	.word	0x0000000a
   147e0:	3a776f72 	.word	0x3a776f72
   147e4:	34302520 	.word	0x34302520
   147e8:	000a0d78 	.word	0x000a0d78
   147ec:	61647075 	.word	0x61647075
   147f0:	625f6574 	.word	0x625f6574
   147f4:	5f746f6f 	.word	0x5f746f6f
   147f8:	74617473 	.word	0x74617473
   147fc:	77207375 	.word	0x77207375
   14800:	65746972 	.word	0x65746972
   14804:	6f6f625f 	.word	0x6f6f625f
   14808:	69732e74 	.word	0x69732e74
   1480c:	74616e67 	.word	0x74616e67
   14810:	3a657275 	.word	0x3a657275
   14814:	32302520 	.word	0x32302520
   14818:	000a0d78 	.word	0x000a0d78
   1481c:	72617473 	.word	0x72617473
   14820:	676e6974 	.word	0x676e6974
   14824:	65657320 	.word	0x65657320
   14828:	25203a64 	.word	0x25203a64
   1482c:	0d783430 	.word	0x0d783430
   14830:	0000000a 	.word	0x0000000a
   14834:	69726576 	.word	0x69726576
   14838:	665f7966 	.word	0x665f7966
   1483c:	6873616c 	.word	0x6873616c
   14840:	7265203a 	.word	0x7265203a
   14844:	20726f72 	.word	0x20726f72
   14848:	69797274 	.word	0x69797274
   1484c:	7420676e 	.word	0x7420676e
   14850:	6572206f 	.word	0x6572206f
   14854:	65206461 	.word	0x65206461
   14858:	72657478 	.word	0x72657478
   1485c:	206c616e 	.word	0x206c616e
   14860:	73616c66 	.word	0x73616c66
   14864:	25202e68 	.word	0x25202e68
   14868:	00000064 	.word	0x00000064
   1486c:	202e6425 	.word	0x202e6425
   14870:	69726576 	.word	0x69726576
   14874:	665f7966 	.word	0x665f7966
   14878:	6873616c 	.word	0x6873616c
   1487c:	7263203a 	.word	0x7263203a
   14880:	61765f63 	.word	0x61765f63
   14884:	25203a6c 	.word	0x25203a6c
   14888:	000a0d64 	.word	0x000a0d64
   1488c:	69726576 	.word	0x69726576
   14890:	665f7966 	.word	0x665f7966
   14894:	6873616c 	.word	0x6873616c
   14898:	6572203a 	.word	0x6572203a
   1489c:	6e69616d 	.word	0x6e69616d
   148a0:	20676e69 	.word	0x20676e69
   148a4:	65747962 	.word	0x65747962
   148a8:	64252073 	.word	0x64252073
   148ac:	00000a0d 	.word	0x00000a0d
   148b0:	69726576 	.word	0x69726576
   148b4:	665f7966 	.word	0x665f7966
   148b8:	6873616c 	.word	0x6873616c
   148bc:	6163203a 	.word	0x6163203a
   148c0:	6c75636c 	.word	0x6c75636c
   148c4:	64657461 	.word	0x64657461
   148c8:	63726320 	.word	0x63726320
   148cc:	76203233 	.word	0x76203233
   148d0:	203a6c61 	.word	0x203a6c61
   148d4:	0a0d6425 	.word	0x0a0d6425
   148d8:	00000000 	.word	0x00000000
   148dc:	69666977 	.word	0x69666977
   148e0:	6c61635f 	.word	0x6c61635f
   148e4:	6361626c 	.word	0x6361626c
   148e8:	4d5b206b 	.word	0x4d5b206b
   148ec:	575f4d32 	.word	0x575f4d32
   148f0:	5f494649 	.word	0x5f494649
   148f4:	50534552 	.word	0x50534552
   148f8:	4e4f435f 	.word	0x4e4f435f
   148fc:	4154535f 	.word	0x4154535f
   14900:	435f4554 	.word	0x435f4554
   14904:	474e4148 	.word	0x474e4148
   14908:	3a5d4445 	.word	0x3a5d4445
   1490c:	6e6f6320 	.word	0x6e6f6320
   14910:	7463656e 	.word	0x7463656e
   14914:	0d2e6465 	.word	0x0d2e6465
   14918:	00000000 	.word	0x00000000
   1491c:	69666977 	.word	0x69666977
   14920:	6c61635f 	.word	0x6c61635f
   14924:	6361626c 	.word	0x6361626c
   14928:	4d5b206b 	.word	0x4d5b206b
   1492c:	575f4d32 	.word	0x575f4d32
   14930:	5f494649 	.word	0x5f494649
   14934:	50534552 	.word	0x50534552
   14938:	4e4f435f 	.word	0x4e4f435f
   1493c:	4154535f 	.word	0x4154535f
   14940:	435f4554 	.word	0x435f4554
   14944:	474e4148 	.word	0x474e4148
   14948:	205d4445 	.word	0x205d4445
   1494c:	63736964 	.word	0x63736964
   14950:	656e6e6f 	.word	0x656e6e6f
   14954:	64657463 	.word	0x64657463
   14958:	00000d2e 	.word	0x00000d2e
   1495c:	69666977 	.word	0x69666977
   14960:	6c61635f 	.word	0x6c61635f
   14964:	6361626c 	.word	0x6361626c
   14968:	4d5b206b 	.word	0x4d5b206b
   1496c:	575f4d32 	.word	0x575f4d32
   14970:	5f494649 	.word	0x5f494649
   14974:	5f514552 	.word	0x5f514552
   14978:	50434844 	.word	0x50434844
   1497c:	4e4f435f 	.word	0x4e4f435f
   14980:	203a5d46 	.word	0x203a5d46
   14984:	61205049 	.word	0x61205049
   14988:	65726464 	.word	0x65726464
   1498c:	69207373 	.word	0x69207373
   14990:	75252073 	.word	0x75252073
   14994:	2e75252e 	.word	0x2e75252e
   14998:	252e7525 	.word	0x252e7525
   1499c:	000a0d75 	.word	0x000a0d75
   149a0:	69666977 	.word	0x69666977
   149a4:	6c61635f 	.word	0x6c61635f
   149a8:	6361626c 	.word	0x6361626c
   149ac:	645b206b 	.word	0x645b206b
   149b0:	75616665 	.word	0x75616665
   149b4:	3a5d746c 	.word	0x3a5d746c
   149b8:	52524520 	.word	0x52524520
   149bc:	6520524f 	.word	0x6520524f
   149c0:	25207476 	.word	0x25207476
   149c4:	000a0d64 	.word	0x000a0d64
   149c8:	74697277 	.word	0x74697277
   149cc:	69665f65 	.word	0x69665f65
   149d0:	61776d72 	.word	0x61776d72
   149d4:	6d5f6572 	.word	0x6d5f6572
   149d8:	64617465 	.word	0x64617465
   149dc:	3a617461 	.word	0x3a617461
   149e0:	756f6320 	.word	0x756f6320
   149e4:	6e20646c 	.word	0x6e20646c
   149e8:	7720746f 	.word	0x7720746f
   149ec:	65746972 	.word	0x65746972
   149f0:	206f7420 	.word	0x206f7420
   149f4:	73616c66 	.word	0x73616c66
   149f8:	000d2168 	.word	0x000d2168
   149fc:	0000553e 	.word	0x0000553e
   14a00:	00005516 	.word	0x00005516
   14a04:	0000551a 	.word	0x0000551a
   14a08:	0000551e 	.word	0x0000551e
   14a0c:	00005522 	.word	0x00005522
   14a10:	00005526 	.word	0x00005526
   14a14:	0000552a 	.word	0x0000552a
   14a18:	0000552e 	.word	0x0000552e
   14a1c:	00005532 	.word	0x00005532
   14a20:	00005536 	.word	0x00005536
   14a24:	000055dc 	.word	0x000055dc
   14a28:	000055b4 	.word	0x000055b4
   14a2c:	000055ba 	.word	0x000055ba
   14a30:	000055c0 	.word	0x000055c0
   14a34:	000055c0 	.word	0x000055c0
   14a38:	000055c6 	.word	0x000055c6
   14a3c:	000055c6 	.word	0x000055c6
   14a40:	000055c6 	.word	0x000055c6
   14a44:	000055cc 	.word	0x000055cc
   14a48:	000055d2 	.word	0x000055d2
   14a4c:	00000100 	.word	0x00000100
   14a50:	000056de 	.word	0x000056de
   14a54:	000056b6 	.word	0x000056b6
   14a58:	000056bc 	.word	0x000056bc
   14a5c:	000056c2 	.word	0x000056c2
   14a60:	000056c2 	.word	0x000056c2
   14a64:	000056c8 	.word	0x000056c8
   14a68:	000056c8 	.word	0x000056c8
   14a6c:	000056c8 	.word	0x000056c8
   14a70:	000056ce 	.word	0x000056ce
   14a74:	000056d4 	.word	0x000056d4
   14a78:	00005b0a 	.word	0x00005b0a
   14a7c:	00005ae6 	.word	0x00005ae6
   14a80:	00005aec 	.word	0x00005aec
   14a84:	00005af2 	.word	0x00005af2
   14a88:	00005af2 	.word	0x00005af2
   14a8c:	00005af8 	.word	0x00005af8
   14a90:	00005af8 	.word	0x00005af8
   14a94:	00005af8 	.word	0x00005af8
   14a98:	00005afe 	.word	0x00005afe
   14a9c:	00005b04 	.word	0x00005b04

00014aa0 <__FUNCTION__.14835>:
   14aa0:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   14ab0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   14ac0:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   14ad0:	6320746c 0000646d 00006e04 00006dd4     lt cmd...n...m..
   14ae0:	00006dcc 00006de4 00006ddc 00006dfc     .m...m...m...m..
   14af0:	00006dec 00006df4                       .m...m..

00014af8 <__FUNCTION__.13073>:
   14af8:	5f666968 646e6573 00000000              hif_send....

00014b04 <__FUNCTION__.13083>:
   14b04:	5f666968 00727369                       hif_isr.

00014b0c <__FUNCTION__.13089>:
   14b0c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00014b1c <__FUNCTION__.13101>:
   14b1c:	5f666968 65636572 00657669              hif_receive.

00014b28 <__FUNCTION__.13117>:
   14b28:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   14b38:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   14b48:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   14b58:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   14b68:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   14b78:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   14b88:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   14b98:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   14ba8:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
   14bb8:	6c616320 6361626c 7369206b 746f6e20      callback is not
   14bc8:	67657220 65747369 00646572 6b6f6353      registered.Scok
   14bd8:	63207465 626c6c61 206b6361 6e207369     et callback is n
   14be8:	7220746f 73696765 65726574 00000064     ot registered...
   14bf8:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   14c08:	20746f6e 69676572 72657473 00006465     not registered..
   14c18:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   14c28:	6e207369 7220746f 73696765 65726574     is not registere
   14c38:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
   14c48:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   14c58:	64657265 00000000 66696828 6e692029     ered....(hif) in
   14c68:	696c6176 72672064 2070756f 00004449     valid group ID..
   14c78:	66696828 6f682029 61207473 64207070     (hif) host app d
   14c88:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   14c98:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   14ca8:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
   14cb8:	66696828 61462029 2065736c 65746e69     (hif) False inte
   14cc8:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   14cd8:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   14ce8:	7265746e 74707572 67657220 00000000     nterrupt reg....
   14cf8:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   14d08:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   14d18:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   14d28:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   14d38:	696c6176 72612064 656d7567 0000746e     valid argument..
   14d48:	20505041 75716552 65747365 69532064     APP Requested Si
   14d58:	6920657a 616c2073 72656772 61687420     ze is larger tha
   14d68:	6874206e 65722065 65766963 75622064     n the recived bu
   14d78:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   14d88:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   14d98:	65747365 64412064 73657264 65622073     ested Address be
   14da8:	646e6f79 65687420 63657220 64657669     yond the recived
   14db8:	66756220 20726566 72646461 20737365      buffer address 
   14dc8:	20646e61 676e656c 00006874 20705247     and length..GRp 
   14dd8:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
   14de8:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
   14df8:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
   14e08:	6b617720 74207075 63206568 00706968      wakup the chip.

00014e18 <__FUNCTION__.13052>:
   14e18:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00014e24 <__FUNCTION__.13081>:
   14e24:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00014e34 <__FUNCTION__.13109>:
   14e34:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   14e44:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   14e54:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   14e64:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   14e74:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   14e84:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   14e94:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   14ea4:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   14eb4:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   14ec4:	20706557 2079656b 65646e69 64252078     Wep key index %d
   14ed4:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   14ee4:	2079656b 676e656c 25206874 00000a64     key length %d...
   14ef4:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   14f04:	656c2079 6874676e 00000000 65646e75     y length....unde
   14f14:	656e6966 65732064 79742063 00006570     fined sec type..
   14f24:	6d726946 65726177 72657620 3a202020     Firmware ver   :
   14f34:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
   14f44:	0a752520 00000000 6d726946 65726177      %u.....Firmware
   14f54:	69754220 2520646c 69542073 2520656d      Build %s Time %
   14f64:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
   14f74:	69726420 20726576 20726576 7525203a      driver ver : %u
   14f84:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
   14f94:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
   14fa4:	323a3831 38353a36 00000000 20727041     18:26:58....Apr 
   14fb4:	32203332 00383130 76697244 62207265     23 2018.Driver b
   14fc4:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
   14fd4:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
   14fe4:	65562065 6f697372 0000006e              e Version...

00014ff0 <__FUNCTION__.12915>:
   14ff0:	70696863 6b61775f 00000065              chip_wake...

00014ffc <__FUNCTION__.12964>:
   14ffc:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   1500c:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   1501c:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
   1502c:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
   1503c:	74206465 6177206f 2070756b 20656874     ed to wakup the 
   1504c:	70696863 00000000 76697244 65567265     chip....DriverVe
   1505c:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

0001506c <__FUNCTION__.12962>:
   1506c:	645f6d6e 695f7672 0074696e              nm_drv_init.

00015078 <__FUNCTION__.12969>:
   15078:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   15088:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   15098:	6965645f 2074696e 6c696166 00000000     _deinit fail....
   150a8:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   150b8:	73616c66 69642068 6c626173 61662065     flash disable fa
   150c8:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   150d8:	6c696166 696e6920 75622074 00000073     fail init bus...
   150e8:	6c696166 74206465 6e65206f 656c6261     failed to enable
   150f8:	746e6920 75727265 2e737470 0000002e      interrupts.....
   15108:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   15118:	6e69206c 62207469 00007375 70696843     l init bus..Chip
   15128:	20444920 0a786c25 00000000 00007de4      ID %lx......}..
   15138:	00007de4 00007e14 00007d96 00007dba     .}...~...}...}..
   15148:	00007dc8 00007dfa 00007dfa 00007e42     .}...}...}..B~..
   15158:	00007d7a 00007e7c 00007e7c 00007e7c     z}..|~..|~..|~..
   15168:	00007e7c 00007dd6 cac4c9c3              |~...}......

00015174 <__FUNCTION__.12268>:
   15174:	5f697073 00646d63                       spi_cmd.

0001517c <__FUNCTION__.12275>:
   1517c:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0001518c <__FUNCTION__.12284>:
   1518c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00015198 <__FUNCTION__.12300>:
   15198:	5f697073 61746164 6165725f 00000064     spi_data_read...

000151a8 <__FUNCTION__.12315>:
   151a8:	5f697073 61746164 6972775f 00006574     spi_data_write..

000151b8 <__FUNCTION__.12327>:
   151b8:	5f697073 74697277 65725f65 00000067     spi_write_reg...

000151c8 <__FUNCTION__.12338>:
   151c8:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

000151d8 <__FUNCTION__.12350>:
   151d8:	5f697073 64616572 6765725f 00000000     spi_read_reg....

000151e8 <__FUNCTION__.12363>:
   151e8:	735f6d6e 725f6970 00646165              nm_spi_read.

000151f4 <__FUNCTION__.12384>:
   151f4:	735f6d6e 695f6970 0074696e              nm_spi_init.

00015200 <crc7_syndrome_table>:
   15200:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   15210:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   15220:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   15230:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   15240:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   15250:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   15260:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   15270:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   15280:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   15290:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   152a0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   152b0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   152c0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   152d0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   152e0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   152f0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   15300:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   15310:	6e692064 6e726574 72206c61 20646165     d internal read 
   15320:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   15330:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   15340:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
   15350:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   15360:	6e692064 6e726574 72206c61 20646165     d internal read 
   15370:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
   15380:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   15390:	6e726574 77206c61 65746972 6f727020     ternal write pro
   153a0:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
   153b0:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   153c0:	20646d63 64616572 69686320 64692070     cmd read chip id
   153d0:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   153e0:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   153f0:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   15400:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   15410:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   15420:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   15430:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   15440:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   15450:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   15460:	00000000 65736552 6e612074 65722064     ....Reset and re
   15470:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
   15480:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   15490:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   154a0:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   154b0:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   154c0:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   154d0:	69727720 62206574 6b636f6c 30252820      write block (%0
   154e0:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   154f0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   15500:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   15510:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   15520:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   15530:	61642064 62206174 6b636f6c 69727720     d data block wri
   15540:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   15550:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   15560:	656c6961 61642064 62206174 6b636f6c     ailed data block
   15570:	63726320 69727720 202c6574 20737562      crc write, bus 
   15580:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
   15590:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   155a0:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
   155b0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   155c0:	72206174 6f707365 2065736e 64616572     ta response read
   155d0:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   155e0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   155f0:	206b636f 61746164 69727720 2e2e6574     ock data write..
   15600:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   15610:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   15620:	73756220 72726520 2e2e726f 0000002e      bus error......
   15630:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   15640:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   15650:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   15660:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   15670:	656c6961 61642064 72206174 6f707365     ailed data respo
   15680:	2065736e 64616572 7562202c 72652073     nse read, bus er
   15690:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   156a0:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   156b0:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   156c0:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   156d0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   156e0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   156f0:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   15700:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   15710:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   15720:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   15730:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   15740:	72202c64 20646165 20676572 38302528     d, read reg (%08
   15750:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   15760:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   15770:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   15780:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   15790:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   157a0:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   157b0:	6e612074 65722064 20797274 25206425     t and retry %d %
   157c0:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   157d0:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   157e0:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
   157f0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   15800:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   15810:	74697277 65722065 25282067 29783830     write reg (%08x)
   15820:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
   15830:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   15840:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
   15850:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
   15860:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   15870:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   15880:	4449206e 25203d20 000a0d64 000094fa     n ID = %d.......
   15890:	00009740 00009740 00009740 00009740     @...@...@...@...
   158a0:	00009740 00009740 00009740 00009740     @...@...@...@...
   158b0:	00009740 00009740 00009740 00009740     @...@...@...@...
   158c0:	00009740 00009740 00009740 000094e2     @...@...@.......
   158d0:	00009740 00009740 00009740 00009740     @...@...@...@...
   158e0:	00009740 00009740 00009740 00009740     @...@...@...@...
   158f0:	00009740 00009740 00009740 00009740     @...@...@...@...
   15900:	00009740 00009740 00009740 000094f2     @...@...@.......
   15910:	00009740 00009740 00009740 00009740     @...@...@...@...
   15920:	00009740 00009740 00009740 00009740     @...@...@...@...
   15930:	00009740 00009740 00009740 00009740     @...@...@...@...
   15940:	00009740 00009740 00009740 000094ea     @...@...@.......
   15950:	00009502 000094ca 000094da 000094d2     ................
   15960:	00000002 00000003 00000028 00000029     ........(...)...
   15970:	00000004 00000005 00000006 00000007     ................
   15980:	0000ffff 0000ffff 00000022 00000023     ........"...#...
   15990:	0000ffff 0000ffff 0000ffff 0000ffff     ................
   159a0:	00000008 00000009 0000000a 0000000b     ................
   159b0:	0000a5ee 0000a5e8 0000a5e2 0000a5dc     ................
   159c0:	0000a5f4 0000a5fc 0000a5f4 0000a5d6     ................
   159d0:	0000a5d0 0000a5f4 0000a5ca 0000a5ca     ................
   159e0:	0000a5c4 0000a5be 0000a5fc 0000a666     ............f...
   159f0:	0000a660 0000a65a 0000a654 0000a66c     `...Z...T...l...
   15a00:	0000a674 0000a66c 0000a64e 0000a648     t...l...N...H...
   15a10:	0000a66c 0000a642 0000a642 0000a63c     l...B...B...<...
   15a20:	0000a636 0000a674 0000a6e0 0000a6da     6...t...........
   15a30:	0000a6d4 0000a6ce 0000a6e6 0000a6e6     ................
   15a40:	0000a6e6 0000a6c8 0000a6c2 0000a6e6     ................
   15a50:	0000a6bc 0000a6bc 0000a6b6 0000a6b0     ................
   15a60:	33323130 37363534 62613938 66656463     0123456789abcdef
   15a70:	00000d31 6e617254 72656673 636e452d     1...Transfer-Enc
   15a80:	6e69646f 00203a67 6e6e6f43 69746365     oding: .Connecti
   15a90:	203a6e6f 00000000 50545448 0000002f     on: ....HTTP/...
   15aa0:	20544547 00000000 54534f50 00000020     GET ....POST ...
   15ab0:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   15ac0:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   15ad0:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   15ae0:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   15af0:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
   15b00:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   15b10:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
   15b20:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
   15b30:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
   15b40:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
   15b50:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
   15b60:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
   15b70:	203a6874 00000000 656d7461 2e312f6c     th: ....atmel/1.
   15b80:	00322e30 70747468 002f2f3a 70747468     0.2.http://.http
   15b90:	2f2f3a73 00000000 42002000 42002400     s://..... .B.$.B
   15ba0:	42002800                                .(.B

00015ba4 <_tcc_apbcmasks>:
   15ba4:	00000100 00000200 00000400              ............

00015bb0 <_tcc_cc_nums>:
   15bb0:	00020204                                ....

00015bb4 <_tcc_gclk_ids>:
   15bb4:	001b1a1a                                ....

00015bb8 <_tcc_maxs>:
   15bb8:	00ffffff 00ffffff 0000ffff              ............

00015bc4 <_tcc_ow_nums>:
   15bc4:	00020408                                ....

00015bc8 <_tcc_intflag>:
   15bc8:	00000001 00000002 00000004 00000008     ................
   15bd8:	00001000 00002000 00004000 00008000     ..... ...@......
   15be8:	00010000 00020000 00040000 00080000     ................

00015bf8 <tcc_interrupt_vectors.12458>:
   15bf8:	0011100f 6c696166 206e6f20 206e6970     ....fail on pin 
   15c08:	20434441 206e6163 72727563 6c746e65     ADC can currentl
   15c18:	6e6f2079 6220796c 6f632065 6769666e     y only be config
   15c28:	64657275 206e6f20 25632550 50202e64     ured on P%c%d. P
   15c38:	7361656c 72742065 67612079 2e6e6961     lease try again.
   15c48:	00000a0d 6c696166 206e6f20 74726f70     ....fail on port
   15c58:	43444120 6e616320 72756320 746e6572      ADC can current
   15c68:	6f20796c 20796c6e 63206562 69666e6f     ly only be confi
   15c78:	65727567 6e6f2064 25632520 50202e64     gured on %c%d. P
   15c88:	7361656c 72742065 67612079 2e6e6961     lease try again.
   15c98:	00000a0d 746c6f56 20656761 50207461     ....Voltage at P
   15ca8:	64256325 6625203a 00000a0d 796c6e4f     %c%d: %f....Only
   15cb8:	25415020 50202c64 2c642541 25425020      PA%d, PA%d, PB%
   15cc8:	50202c64 2c642542 206e6163 73206562     d, PB%d,can be s
   15cd8:	0a0d7465 00000000 206e6950 63206425     et......Pin %d c
   15ce8:	7261656c 0a0d6465 00000000 206e6970     leared......pin 
   15cf8:	76206425 65756c61 6425203a 00000a0d     %d value: %d....
   15d08:	206e6950 73206425 68207465 0d686769     Pin %d set high.
   15d18:	0000000a 706c6568 50202d20 746e6972     ....help - Print
   15d28:	6c612073 6874206c 76612065 616c6961     s all the availa
   15d38:	20656c62 6d6d6f63 73646e61 646e6120     ble commands and
   15d48:	73206120 74726f68 6e797320 6973706f      a short synopsi
   15d58:	0a0d2073 5f726576 2d206c62 69725020     s ..ver_bl - Pri
   15d68:	2073746e 20656874 746f6f62 64616f6c     nts the bootload
   15d78:	66207265 776d7269 20657261 73726576     er firmware vers
   15d88:	206e6f69 65760a0d 70615f72 202d0970     ion ..ver_app.- 
   15d98:	6e697250 74207374 61206568 696c7070     Prints the appli
   15da8:	69746163 63206e6f 2065646f 6d726966     cation code firm
   15db8:	65726177 72657620 6e6f6973 670a0d20     ware version ..g
   15dc8:	5f6f6970 20746573 726f705b 5b205d74     pio_set [port] [
   15dd8:	5d6e6970 53202d20 61207465 49504720     pin] - Set a GPI
   15de8:	6970204f 6f74206e 67696820 202f2068     O pin to high / 
   15df8:	0a0d2031 6f697067 656c635f 5b207261     1 ..gpio_clear [
   15e08:	74726f70 705b205d 095d6e69 6553202d     port] [pin].- Se
   15e18:	20612074 4f495047 6e697020 206f7420     t a GPIO pin to 
   15e28:	20776f6c 2030202f 70670a0d 675f6f69     low / 0 ..gpio_g
   15e38:	5b207465 74726f70 705b205d 205d6e69     et [port] [pin] 
   15e48:	6547202d 74732074 20657461 7320666f     - Get state of s
   15e58:	69636570 64656966 49504720 6970204f     pecified GPIO pi
   15e68:	0a0d206e 2063616d 6572202d 6e727574     n ..mac - return
   15e78:	68742073 616d2065 64612063 73657264     s the mac addres
   15e88:	666f2073 65687420 76656420 20656369     s of the device 
   15e98:	70690a0d 72202d20 72757465 7420736e     ..ip - returns t
   15ea8:	49206568 20347650 72646461 20737365     he IPv4 address 
   15eb8:	65720a0d 3c5f6461 736e6573 203e726f     ..read_<sensor> 
   15ec8:	6165725b 676e6964 5b205d73 65746e69     [readings] [inte
   15ed8:	6c617672 202d205d 6e697250 61207374     rval] - Prints a
   15ee8:	6d756e20 20726562 7220666f 69646165      number of readi
   15ef8:	2073676e 74207461 67206568 6e657669     ngs at the given
   15f08:	746e6920 61767265 0a0d206c 5f636461      interval ..adc_
   15f18:	20746567 726f705b 5b205d74 5d6e6970     get [port] [pin]
   15f28:	47202d20 74207465 41206568 76204344      - Get the ADC v
   15f38:	65756c61 20666f20 20656874 65766967     alue of the give
   15f48:	6970206e 0d202e6e 75636d0a 6d65745f     n pin. ..mcu_tem
   15f58:	202d2070 6f706552 20737472 20656874     p - Reports the 
   15f68:	706d6574 74617265 20657275 7420666f     temperature of t
   15f78:	6d206568 69207563 6543206e 7569736c     he mcu in Celsiu
   15f88:	0d202e73 6332690a 6163735f 202d206e     s. ..i2c_scan - 
   15f98:	6e697250 6f207374 61207475 73696c20     Prints out a lis
   15fa8:	6f632074 63656e6e 20646574 20433249     t connected I2C 
   15fb8:	76616c73 64612065 73657264 20736573     slave addresses 
   15fc8:	65720a0d 5f79616c 20746573 7574202d     ..relay_set - tu
   15fd8:	20736e72 72206e6f 79616c65 720a0d20     rns on relay ..r
   15fe8:	79616c65 656c635f 2d207261 72757420     elay_clear - tur
   15ff8:	6f20736e 72206666 79616c65 00000d20     ns off relay ...
   16008:	72646441 20737365 6e756f66 74612064     Address found at
   16018:	58232520 00000a0d 6e616353 676e696e      %#X....Scanning
   16028:	6d657420 75622070 00000d73 6e616353      temp bus...Scan
   16038:	6f632073 656c706d 0d2e6574 00000000     s complete......
   16048:	706c6568 00000000 5f726576 00006c62     help....ver_bl..
   16058:	5f726576 00707061 6f697067 7465735f     ver_app.gpio_set
   16068:	00000000 6f697067 656c635f 00007261     ....gpio_clear..
   16078:	6f697067 7465675f 00000000 0063616d     gpio_get....mac.
   16088:	00007069 64616572 00000000 5f636461     ip..read....adc_
   16098:	00746567 5f75636d 706d6574 00000000     get.mcu_temp....
   160a8:	5f633269 6e616373 00000000 6e6e7572     i2c_scan....runn
   160b8:	20676e69 5f633269 6e616373 0000000d     ing i2c_scan....
   160c8:	616c6572 6f5f3179 0000006e 616c6552     relay1_on...Rela
   160d8:	20312079 6e727574 20676e69 0d2e6e6f     y 1 turning on..
   160e8:	00000000 616c6572 6f5f3179 00006666     ....relay1_off..
   160f8:	616c6552 20312079 6e727574 20676e69     Relay 1 turning 
   16108:	2e66666f 0000000d 616c6572 6f5f3279     off.....relay2_o
   16118:	0000006e 616c6552 20322079 6e727574     n...Relay 2 turn
   16128:	20676e69 0d2e6e6f 00000000 616c6572     ing on......rela
   16138:	6f5f3279 00006666 616c6552 20322079     y2_off..Relay 2 
   16148:	6e727574 20676e69 2e66666f 0000000d     turning off.....
   16158:	736f6f62 6e6f5f74 00000000 736f6f42     boost_on....Boos
   16168:	6f632074 7265766e 20726574 62616e65     t converter enab
   16178:	2e64656c 0000000d 736f6f62 666f5f74     led.....boost_of
   16188:	00000066 736f6f42 6f632074 7265766e     f...Boost conver
   16198:	20726574 61736964 64656c62 00000d2e     ter disabled....
   161a8:	3164656c 006e6f5f 3144454c 72757420     led1_on.LED1 tur
   161b8:	676e696e 2e6e6f20 0000000d 3164656c     ning on.....led1
   161c8:	66666f5f 00000000 3144454c 72757420     _off....LED1 tur
   161d8:	676e696e 66666f20 00000d2e 3264656c     ning off....led2
   161e8:	006e6f5f 3244454c 72757420 676e696e     _on.LED2 turning
   161f8:	2e6e6f20 0000000d 3264656c 66666f5f      on.....led2_off
   16208:	00000000 3244454c 72757420 676e696e     ....LED2 turning
   16218:	66666f20 00000d2e 63656863 6f665f6b      off....check_fo
   16228:	70755f72 65746164 00000000 6e776f64     r_update....down
   16238:	64616f6c 6470755f 00657461 5f6e7572     load_update.run_
   16248:	706d7570 00000000 61766e49 2064696c     pump....Invalid 
   16258:	75706e69 53202e74 68206565 20706c65     input. See help 
   16268:	20726f66 72726f63 20746365 67617375     for correct usag
   16278:	000d2e65 2e353532 2e353532 2e353532     e...255.255.255.
   16288:	20353532 0000000d 302e3030 30302e30     255 ....00.00.00
   16298:	0d30302e 00000000 2055434d 706d6574     .00.....MCU temp
   162a8:	74617265 3a657275 43642520 000a0d20     erature: %dC ...
   162b8:	6d726966 65726177 63757320 73736563     firmware success
   162c8:	6c6c7566 6f642079 6f6c6e77 64656461     fully downloaded
   162d8:	00000d21 6e776f64 64616f6c 69616620     !...download fai
   162e8:	2e64656c 000d2e2e 61647075 61206574     led.....update a
   162f8:	6c696176 656c6261 00000d21 6c206e6f     vailable!...on l
   16308:	73657461 65762074 6f697372 00000d6e     atest version...
   16318:	61766e49 2064696c 626d756e 6f207265     Invalid number o
   16328:	72612066 203a7367 72207325 69757165     f args: %s requi
   16338:	20736572 61206425 6d756772 73746e65     res %d arguments
   16348:	646e6120 756f7920 6f727020 65646976      and you provide
   16358:	64252064 2e0a0d20 20656553 706c6568     d %d ...See help
   16368:	726f6620 726f6d20 6e692065 6d726f66      for more inform
   16378:	6f697461 0d202e6e 0000000a 72656874     ation. .....ther
   16388:	61772065 6e612073 72726520 7020726f     e was an error p
   16398:	69737261 7920676e 2072756f 73677261     arsing your args
   163a8:	726f6620 2e732520 65655320 6c656820      for %s. See hel
   163b8:	6f662070 6f632072 63657272 73752074     p for correct us
   163c8:	2e656761 00000a0d 0078756c 72727543     age.....lux.Curr
   163d8:	20746e65 3a78756c 0d642520 0000000a     ent lux: %d.....
   163e8:	72727543 20746e65 706d6574 74617265     Current temperat
   163f8:	3a657275 2e332520 0a0d6632 72754320     ure: %3.2f.. Cur
   16408:	746e6572 6d756820 74696469 25203a79     rent humidity: %
   16418:	66322e33 00000a0d 73696f6d 65727574     3.2f....moisture
   16428:	00000000 72727543 20746e65 73696f6d     ....Current mois
   16438:	65727574 2e25203a 20663230 0d202525     ture: %.02f %% .
   16448:	0000000a 2e302e30 00000030 73726556     ....0.0.0...Vers
   16458:	3a6e6f69 20732520 00000a0d 42000800     ion: %s .......B
   16468:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   16478:	42001c00 0000da14 0000da14 0000d9f0     ...B............
   16488:	0000da14 0000d9f0 0000d9d6 0000d9d6     ................
   16498:	0000da14 0000da14 0000da14 0000da14     ................
   164a8:	0000da14 0000da14 0000da14 0000da14     ................
   164b8:	0000da14 0000da14 0000da14 0000da14     ................
   164c8:	0000da14 0000da14 0000da14 0000da14     ................
   164d8:	0000da14 0000da14 0000da14 0000da14     ................
   164e8:	0000da14 0000da14 0000da14 0000da14     ................
   164f8:	0000da14 0000da14 0000da14 0000da14     ................
   16508:	0000da14 0000da14 0000da14 0000da14     ................
   16518:	0000da14 0000da14 0000da14 0000da14     ................
   16528:	0000da14 0000da14 0000da14 0000da14     ................
   16538:	0000da14 0000da14 0000da14 0000da14     ................
   16548:	0000da14 0000da14 0000da14 0000da14     ................
   16558:	0000da14 0000da14 0000da14 0000da14     ................
   16568:	0000da14 0000da14 0000da14 0000da14     ................
   16578:	0000da14 0000d9f0 0000d9f0 0000d9f8     ................
   16588:	0000d9f8 0000d9f8 0000d9f8 0000dc9e     ................
   16598:	0000dc9a 0000dc9a 0000dcfc 0000dcfc     ................
   165a8:	0000dcb2 0000dca4 0000dcb8 0000dcea     ................
   165b8:	0000debc 0000de9c 0000de9c 0000df28     ............(...
   165c8:	0000deae 0000deca 0000dea0 0000ded8     ................
   165d8:	0000df18 20766564 203a6469 30257830     ....dev id: 0x%0
   165e8:	0a0d7832 6e616d20 64692075 7830203a     2x.. manu id: 0x
   165f8:	78323025 00000a0d 65570a0d 6d6f636c     %02x......Welcom
   16608:	6f742065 65687420 65764520 65726772     e to the Evergre
   16618:	43206e65 0d2e494c 00000000 0000203e     en CLI......> ..
   16628:	7325203e 00000a0d                       > %s....

00016630 <_global_impure_ptr>:
   16630:	20000014 4f500043 00584953 4e49002e     ... C.POSIX...IN
   16640:	6e690046 414e0066 616e004e 0030006e     F.inf.NAN.nan.0.
   16650:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   16660:	32313000 36353433 61393837 65646362     .0123456789abcde
   16670:	20000066                                         f.

00016672 <_ctype_>:
   16672:	20202000 20202020 28282020 20282828     .         ((((( 
   16682:	20202020 20202020 20202020 20202020                     
   16692:	10108820 10101010 10101010 10101010      ...............
   166a2:	04040410 04040404 10040404 10101010     ................
   166b2:	41411010 41414141 01010101 01010101     ..AAAAAA........
   166c2:	01010101 01010101 01010101 10101010     ................
   166d2:	42421010 42424242 02020202 02020202     ..BBBBBB........
   166e2:	02020202 02020202 02020202 10101010     ................
   166f2:	00000020 00000000 00000000 00000000      ...............
	...
   16772:	666e4900 74696e69 614e0079 0000004e              .Infinity.NaN.

00016780 <__sf_fake_stderr>:
	...

000167a0 <__sf_fake_stdin>:
	...

000167c0 <__sf_fake_stdout>:
	...

000167e0 <__mprec_bigtens>:
   167e0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   167f0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   16800:	7f73bf3c 75154fdd                       <.s..O.u

00016808 <__mprec_tens>:
   16808:	00000000 3ff00000 00000000 40240000     .......?......$@
   16818:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   16828:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   16838:	00000000 412e8480 00000000 416312d0     .......A......cA
   16848:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   16858:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   16868:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   16878:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   16888:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   16898:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   168a8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   168b8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   168c8:	79d99db4 44ea7843                       ...yCx.D

000168d0 <p05.6047>:
   168d0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   168e0:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
   168f0:	00011e30 00011e00 00011e12 00011d54     0...........T...
   16900:	00011e12 00011df6 00011e12 00011d54     ............T...
   16910:	00011e00 00011e00 00011df6 00011d54     ............T...
   16920:	00011d5c 00011d5c 00011d5c 00011e18     \...\...\.......
   16930:	00011e00 00011e00 00011dd4 00011eb8     ................
   16940:	00011dd4 00011df6 00011dd4 00011eb8     ................
   16950:	00011e00 00011e00 00011df6 00011eb8     ................
   16960:	00011d5c 00011d5c 00011d5c 00011ec2     \...\...\.......
   16970:	00012060 00011fb0 00011fb0 00011fae     ` ..............
   16980:	00012052 00012052 00012048 00011fae     R ..R ..H ......
   16990:	00012052 00012048 00012052 00011fae     R ..H ..R ......
   169a0:	00012058 00012058 00012058 000120e8     X ..X ..X ... ..
   169b0:	00012a2c 00012a0e 000129c8 000128e6     ,*...*...)...(..
   169c0:	000129c8 00012a00 000129c8 000128e6     .)...*...)...(..
   169d0:	00012a0e 00012a0e 00012a00 000128e6     .*...*...*...(..
   169e0:	000128de 000128de 000128de 00012c44     .(...(...(..D,..
   169f0:	0001328c 0001314c 0001314c 00013148     .2..L1..L1..H1..
   16a00:	00013264 00013264 00013256 00013148     d2..d2..V2..H1..
   16a10:	00013264 00013256 00013264 00013148     d2..V2..d2..H1..
   16a20:	0001326c 0001326c 0001326c 00013470     l2..l2..l2..p4..

00016a30 <_init>:
   16a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a32:	46c0      	nop			; (mov r8, r8)
   16a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16a36:	bc08      	pop	{r3}
   16a38:	469e      	mov	lr, r3
   16a3a:	4770      	bx	lr

00016a3c <__init_array_start>:
   16a3c:	000040dd 	.word	0x000040dd

00016a40 <_fini>:
   16a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a42:	46c0      	nop			; (mov r8, r8)
   16a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16a46:	bc08      	pop	{r3}
   16a48:	469e      	mov	lr, r3
   16a4a:	4770      	bx	lr

00016a4c <__fini_array_start>:
   16a4c:	000040b5 	.word	0x000040b5
