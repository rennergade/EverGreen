
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006710  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001fc  20000000  00006710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000174  200001fc  0000690c  000201fc  2**2
                  ALLOC
  3 .stack        00002000  20000370  00006a80  000201fc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
  6 .debug_info   000348c4  00000000  00000000  0002027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004628  00000000  00000000  00054b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000756f  00000000  00000000  00059169  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006a0  00000000  00000000  000606d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000828  00000000  00000000  00060d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b7e6  00000000  00000000  000615a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e7d3  00000000  00000000  0007cd86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008b757  00000000  00000000  0008b559  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001bbc  00000000  00000000  00116cb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 23 00 20 d1 23 00 00 cd 23 00 00 cd 23 00 00     p#. .#...#...#..
	...
      2c:	cd 23 00 00 00 00 00 00 00 00 00 00 cd 23 00 00     .#...........#..
      3c:	cd 23 00 00 cd 23 00 00 cd 23 00 00 cd 23 00 00     .#...#...#...#..
      4c:	cd 23 00 00 cd 23 00 00 cd 23 00 00 cd 23 00 00     .#...#...#...#..
      5c:	cd 23 00 00 cd 23 00 00 05 1b 00 00 15 1b 00 00     .#...#..........
      6c:	25 1b 00 00 35 1b 00 00 45 1b 00 00 55 1b 00 00     %...5...E...U...
      7c:	cd 23 00 00 cd 23 00 00 cd 23 00 00 cd 23 00 00     .#...#...#...#..
      8c:	cd 23 00 00 cd 23 00 00 00 00 00 00 00 00 00 00     .#...#..........
      9c:	cd 23 00 00 cd 23 00 00 cd 23 00 00 cd 23 00 00     .#...#...#...#..
      ac:	cd 23 00 00 00 00 00 00                             .#......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001fc 	.word	0x200001fc
      d4:	00000000 	.word	0x00000000
      d8:	00006710 	.word	0x00006710

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000200 	.word	0x20000200
     108:	00006710 	.word	0x00006710
     10c:	00006710 	.word	0x00006710
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	0000215d 	.word	0x0000215d
     140:	00002fad 	.word	0x00002fad
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     154:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     156:	2200      	movs	r2, #0
     158:	2300      	movs	r3, #0
     15a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     15c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     15e:	2100      	movs	r1, #0
     160:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     162:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     164:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     166:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     168:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     16a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     16c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     16e:	24c0      	movs	r4, #192	; 0xc0
     170:	0164      	lsls	r4, r4, #5
     172:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     174:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     176:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     178:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     17a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     17c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     17e:	242a      	movs	r4, #42	; 0x2a
     180:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     182:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     184:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     186:	3c06      	subs	r4, #6
     188:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     18a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     18c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     18e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     190:	232b      	movs	r3, #43	; 0x2b
     192:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     194:	3301      	adds	r3, #1
     196:	54c1      	strb	r1, [r0, r3]
}
     198:	bd10      	pop	{r4, pc}
	...

0000019c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     19c:	b5f0      	push	{r4, r5, r6, r7, lr}
     19e:	46d6      	mov	lr, sl
     1a0:	464f      	mov	r7, r9
     1a2:	4646      	mov	r6, r8
     1a4:	b5c0      	push	{r6, r7, lr}
     1a6:	b096      	sub	sp, #88	; 0x58
     1a8:	0007      	movs	r7, r0
     1aa:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1ac:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1ae:	4acb      	ldr	r2, [pc, #812]	; (4dc <adc_init+0x340>)
     1b0:	6a10      	ldr	r0, [r2, #32]
     1b2:	2380      	movs	r3, #128	; 0x80
     1b4:	025b      	lsls	r3, r3, #9
     1b6:	4303      	orrs	r3, r0
     1b8:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1ba:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1bc:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1be:	07db      	lsls	r3, r3, #31
     1c0:	d505      	bpl.n	1ce <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     1c2:	b016      	add	sp, #88	; 0x58
     1c4:	bc1c      	pop	{r2, r3, r4}
     1c6:	4690      	mov	r8, r2
     1c8:	4699      	mov	r9, r3
     1ca:	46a2      	mov	sl, r4
     1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1ce:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     1d0:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d2:	079b      	lsls	r3, r3, #30
     1d4:	d4f5      	bmi.n	1c2 <adc_init+0x26>
	module_inst->reference = config->reference;
     1d6:	7873      	ldrb	r3, [r6, #1]
     1d8:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     1da:	2b00      	cmp	r3, #0
     1dc:	d104      	bne.n	1e8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     1de:	4ac0      	ldr	r2, [pc, #768]	; (4e0 <adc_init+0x344>)
     1e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     1e2:	2104      	movs	r1, #4
     1e4:	430b      	orrs	r3, r1
     1e6:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
     1e8:	683b      	ldr	r3, [r7, #0]
     1ea:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     1ec:	7833      	ldrb	r3, [r6, #0]
     1ee:	466a      	mov	r2, sp
     1f0:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     1f2:	4669      	mov	r1, sp
     1f4:	201e      	movs	r0, #30
     1f6:	4bbb      	ldr	r3, [pc, #748]	; (4e4 <adc_init+0x348>)
     1f8:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     1fa:	201e      	movs	r0, #30
     1fc:	4bba      	ldr	r3, [pc, #744]	; (4e8 <adc_init+0x34c>)
     1fe:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     200:	232c      	movs	r3, #44	; 0x2c
     202:	5cf2      	ldrb	r2, [r6, r3]
     204:	2a00      	cmp	r2, #0
     206:	d054      	beq.n	2b2 <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
     208:	3b01      	subs	r3, #1
     20a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     20c:	7b33      	ldrb	r3, [r6, #12]
     20e:	18eb      	adds	r3, r5, r3
     210:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     212:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     214:	b2c9      	uxtb	r1, r1
     216:	428b      	cmp	r3, r1
     218:	d221      	bcs.n	25e <adc_init+0xc2>
     21a:	1952      	adds	r2, r2, r5
     21c:	b2d3      	uxtb	r3, r2
     21e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     220:	4bb2      	ldr	r3, [pc, #712]	; (4ec <adc_init+0x350>)
     222:	469a      	mov	sl, r3
     224:	e003      	b.n	22e <adc_init+0x92>
			offset++;
     226:	3501      	adds	r5, #1
     228:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     22a:	45a9      	cmp	r9, r5
     22c:	d017      	beq.n	25e <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     22e:	240f      	movs	r4, #15
     230:	402c      	ands	r4, r5
     232:	7b33      	ldrb	r3, [r6, #12]
     234:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     236:	2250      	movs	r2, #80	; 0x50
     238:	49ad      	ldr	r1, [pc, #692]	; (4f0 <adc_init+0x354>)
     23a:	a802      	add	r0, sp, #8
     23c:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     23e:	2c13      	cmp	r4, #19
     240:	d8f1      	bhi.n	226 <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     242:	00a4      	lsls	r4, r4, #2
     244:	ab02      	add	r3, sp, #8
     246:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     248:	a901      	add	r1, sp, #4
     24a:	2300      	movs	r3, #0
     24c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     24e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     250:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     252:	3301      	adds	r3, #1
     254:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     256:	b2c0      	uxtb	r0, r0
     258:	4ba6      	ldr	r3, [pc, #664]	; (4f4 <adc_init+0x358>)
     25a:	4798      	blx	r3
     25c:	e7e3      	b.n	226 <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
     25e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     260:	2250      	movs	r2, #80	; 0x50
     262:	49a3      	ldr	r1, [pc, #652]	; (4f0 <adc_init+0x354>)
     264:	a802      	add	r0, sp, #8
     266:	4ba1      	ldr	r3, [pc, #644]	; (4ec <adc_init+0x350>)
     268:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     26a:	2c13      	cmp	r4, #19
     26c:	d913      	bls.n	296 <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     26e:	7d73      	ldrb	r3, [r6, #21]
     270:	009b      	lsls	r3, r3, #2
     272:	b2db      	uxtb	r3, r3
     274:	4642      	mov	r2, r8
     276:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     278:	7db3      	ldrb	r3, [r6, #22]
     27a:	01db      	lsls	r3, r3, #7
     27c:	7872      	ldrb	r2, [r6, #1]
     27e:	4313      	orrs	r3, r2
     280:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     282:	4642      	mov	r2, r8
     284:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     286:	7933      	ldrb	r3, [r6, #4]
     288:	2b34      	cmp	r3, #52	; 0x34
     28a:	d900      	bls.n	28e <adc_init+0xf2>
     28c:	e178      	b.n	580 <adc_init+0x3e4>
     28e:	009b      	lsls	r3, r3, #2
     290:	4a99      	ldr	r2, [pc, #612]	; (4f8 <adc_init+0x35c>)
     292:	58d3      	ldr	r3, [r2, r3]
     294:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     296:	00a4      	lsls	r4, r4, #2
     298:	ab02      	add	r3, sp, #8
     29a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     29c:	a901      	add	r1, sp, #4
     29e:	2300      	movs	r3, #0
     2a0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2a2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2a4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2a6:	3301      	adds	r3, #1
     2a8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2aa:	b2c0      	uxtb	r0, r0
     2ac:	4b91      	ldr	r3, [pc, #580]	; (4f4 <adc_init+0x358>)
     2ae:	4798      	blx	r3
     2b0:	e7dd      	b.n	26e <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
     2b2:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     2b4:	2250      	movs	r2, #80	; 0x50
     2b6:	498e      	ldr	r1, [pc, #568]	; (4f0 <adc_init+0x354>)
     2b8:	a802      	add	r0, sp, #8
     2ba:	4b8c      	ldr	r3, [pc, #560]	; (4ec <adc_init+0x350>)
     2bc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2be:	2c13      	cmp	r4, #19
     2c0:	d915      	bls.n	2ee <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
     2c2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2c4:	2250      	movs	r2, #80	; 0x50
     2c6:	498a      	ldr	r1, [pc, #552]	; (4f0 <adc_init+0x354>)
     2c8:	a802      	add	r0, sp, #8
     2ca:	4b88      	ldr	r3, [pc, #544]	; (4ec <adc_init+0x350>)
     2cc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2ce:	2c13      	cmp	r4, #19
     2d0:	d8cd      	bhi.n	26e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2d2:	00a4      	lsls	r4, r4, #2
     2d4:	ab02      	add	r3, sp, #8
     2d6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2d8:	a901      	add	r1, sp, #4
     2da:	2300      	movs	r3, #0
     2dc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2de:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2e0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2e2:	3301      	adds	r3, #1
     2e4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2e6:	b2c0      	uxtb	r0, r0
     2e8:	4b82      	ldr	r3, [pc, #520]	; (4f4 <adc_init+0x358>)
     2ea:	4798      	blx	r3
     2ec:	e7bf      	b.n	26e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2ee:	00a4      	lsls	r4, r4, #2
     2f0:	ab02      	add	r3, sp, #8
     2f2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2f4:	a901      	add	r1, sp, #4
     2f6:	2300      	movs	r3, #0
     2f8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2fa:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2fc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2fe:	3301      	adds	r3, #1
     300:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     302:	b2c0      	uxtb	r0, r0
     304:	4b7b      	ldr	r3, [pc, #492]	; (4f4 <adc_init+0x358>)
     306:	4798      	blx	r3
     308:	e7db      	b.n	2c2 <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     30a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     30c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     30e:	2102      	movs	r1, #2
     310:	e01a      	b.n	348 <adc_init+0x1ac>
		adjres = config->divide_result;
     312:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     314:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     316:	2410      	movs	r4, #16
     318:	e016      	b.n	348 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     31a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     31c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     31e:	2101      	movs	r1, #1
     320:	e012      	b.n	348 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     322:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     324:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     326:	2100      	movs	r1, #0
     328:	e00e      	b.n	348 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     32a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     32c:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     32e:	2100      	movs	r1, #0
     330:	e00a      	b.n	348 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     332:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     334:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     336:	2100      	movs	r1, #0
     338:	e006      	b.n	348 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     33a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     33c:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     33e:	2100      	movs	r1, #0
     340:	e002      	b.n	348 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     342:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     344:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     346:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     348:	0109      	lsls	r1, r1, #4
     34a:	2270      	movs	r2, #112	; 0x70
     34c:	400a      	ands	r2, r1
     34e:	4313      	orrs	r3, r2
     350:	4642      	mov	r2, r8
     352:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     354:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     356:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     358:	2b3f      	cmp	r3, #63	; 0x3f
     35a:	d900      	bls.n	35e <adc_init+0x1c2>
     35c:	e731      	b.n	1c2 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     35e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     360:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     362:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     364:	b25b      	sxtb	r3, r3
     366:	2b00      	cmp	r3, #0
     368:	dbfb      	blt.n	362 <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     36a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     36c:	8872      	ldrh	r2, [r6, #2]
     36e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     370:	2224      	movs	r2, #36	; 0x24
     372:	5cb2      	ldrb	r2, [r6, r2]
     374:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     376:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     378:	7d32      	ldrb	r2, [r6, #20]
     37a:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     37c:	4313      	orrs	r3, r2
     37e:	7cb2      	ldrb	r2, [r6, #18]
     380:	0052      	lsls	r2, r2, #1
     382:	4313      	orrs	r3, r2
     384:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     386:	4642      	mov	r2, r8
     388:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     38a:	7e33      	ldrb	r3, [r6, #24]
     38c:	2b00      	cmp	r3, #0
     38e:	d020      	beq.n	3d2 <adc_init+0x236>
		switch (resolution) {
     390:	2c10      	cmp	r4, #16
     392:	d100      	bne.n	396 <adc_init+0x1fa>
     394:	e0d6      	b.n	544 <adc_init+0x3a8>
     396:	d800      	bhi.n	39a <adc_init+0x1fe>
     398:	e080      	b.n	49c <adc_init+0x300>
     39a:	2c20      	cmp	r4, #32
     39c:	d100      	bne.n	3a0 <adc_init+0x204>
     39e:	e0b3      	b.n	508 <adc_init+0x36c>
     3a0:	2c30      	cmp	r4, #48	; 0x30
     3a2:	d116      	bne.n	3d2 <adc_init+0x236>
			if (config->differential_mode &&
     3a4:	7cf2      	ldrb	r2, [r6, #19]
     3a6:	2a00      	cmp	r2, #0
     3a8:	d00a      	beq.n	3c0 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
     3aa:	69f2      	ldr	r2, [r6, #28]
     3ac:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     3ae:	2017      	movs	r0, #23
			if (config->differential_mode &&
     3b0:	2aff      	cmp	r2, #255	; 0xff
     3b2:	d900      	bls.n	3b6 <adc_init+0x21a>
     3b4:	e705      	b.n	1c2 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     3b6:	6a32      	ldr	r2, [r6, #32]
     3b8:	3280      	adds	r2, #128	; 0x80
     3ba:	2aff      	cmp	r2, #255	; 0xff
     3bc:	d900      	bls.n	3c0 <adc_init+0x224>
     3be:	e700      	b.n	1c2 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     3c0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     3c2:	69f2      	ldr	r2, [r6, #28]
     3c4:	2aff      	cmp	r2, #255	; 0xff
     3c6:	dd00      	ble.n	3ca <adc_init+0x22e>
     3c8:	e6fb      	b.n	1c2 <adc_init+0x26>
     3ca:	6a32      	ldr	r2, [r6, #32]
     3cc:	2aff      	cmp	r2, #255	; 0xff
     3ce:	dd00      	ble.n	3d2 <adc_init+0x236>
     3d0:	e6f7      	b.n	1c2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     3d2:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3d4:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     3d6:	b252      	sxtb	r2, r2
     3d8:	2a00      	cmp	r2, #0
     3da:	dbfb      	blt.n	3d4 <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
     3dc:	4642      	mov	r2, r8
     3de:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     3e0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3e2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3e4:	b25b      	sxtb	r3, r3
     3e6:	2b00      	cmp	r3, #0
     3e8:	dbfb      	blt.n	3e2 <adc_init+0x246>
	adc_module->WINLT.reg =
     3ea:	8bb3      	ldrh	r3, [r6, #28]
     3ec:	4642      	mov	r2, r8
     3ee:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     3f0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3f2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3f4:	b25b      	sxtb	r3, r3
     3f6:	2b00      	cmp	r3, #0
     3f8:	dbfb      	blt.n	3f2 <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     3fa:	8c33      	ldrh	r3, [r6, #32]
     3fc:	4642      	mov	r2, r8
     3fe:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     400:	232c      	movs	r3, #44	; 0x2c
     402:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     404:	2b00      	cmp	r3, #0
     406:	d005      	beq.n	414 <adc_init+0x278>
		inputs_to_scan--;
     408:	3b01      	subs	r3, #1
     40a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     40c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     40e:	2b0f      	cmp	r3, #15
     410:	d900      	bls.n	414 <adc_init+0x278>
     412:	e6d6      	b.n	1c2 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     414:	222b      	movs	r2, #43	; 0x2b
     416:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     418:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     41a:	290f      	cmp	r1, #15
     41c:	d900      	bls.n	420 <adc_init+0x284>
     41e:	e6d0      	b.n	1c2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     420:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     422:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     424:	b252      	sxtb	r2, r2
     426:	2a00      	cmp	r2, #0
     428:	dbfb      	blt.n	422 <adc_init+0x286>
			config->negative_input |
     42a:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     42c:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     42e:	4302      	orrs	r2, r0
     430:	68b0      	ldr	r0, [r6, #8]
     432:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     434:	0509      	lsls	r1, r1, #20
			config->negative_input |
     436:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     438:	041b      	lsls	r3, r3, #16
			config->negative_input |
     43a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     43c:	4642      	mov	r2, r8
     43e:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     440:	232a      	movs	r3, #42	; 0x2a
     442:	5cf3      	ldrb	r3, [r6, r3]
     444:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     446:	230f      	movs	r3, #15
     448:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     44a:	3315      	adds	r3, #21
     44c:	5cf3      	ldrb	r3, [r6, r3]
     44e:	2b00      	cmp	r3, #0
     450:	d012      	beq.n	478 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     452:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     454:	4a29      	ldr	r2, [pc, #164]	; (4fc <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
     456:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     458:	4293      	cmp	r3, r2
     45a:	d900      	bls.n	45e <adc_init+0x2c2>
     45c:	e6b1      	b.n	1c2 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     45e:	4642      	mov	r2, r8
     460:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     462:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     464:	2380      	movs	r3, #128	; 0x80
     466:	011b      	lsls	r3, r3, #4
     468:	18d3      	adds	r3, r2, r3
     46a:	4924      	ldr	r1, [pc, #144]	; (4fc <adc_init+0x360>)
     46c:	b29b      	uxth	r3, r3
     46e:	428b      	cmp	r3, r1
     470:	d900      	bls.n	474 <adc_init+0x2d8>
     472:	e6a6      	b.n	1c2 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     474:	4643      	mov	r3, r8
     476:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     478:	4b21      	ldr	r3, [pc, #132]	; (500 <adc_init+0x364>)
     47a:	681b      	ldr	r3, [r3, #0]
     47c:	015b      	lsls	r3, r3, #5
     47e:	22e0      	movs	r2, #224	; 0xe0
     480:	00d2      	lsls	r2, r2, #3
     482:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     484:	4a1f      	ldr	r2, [pc, #124]	; (504 <adc_init+0x368>)
     486:	6851      	ldr	r1, [r2, #4]
     488:	0149      	lsls	r1, r1, #5
     48a:	6812      	ldr	r2, [r2, #0]
     48c:	0ed2      	lsrs	r2, r2, #27
     48e:	430a      	orrs	r2, r1
     490:	b2d2      	uxtb	r2, r2
			) |
     492:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     494:	4642      	mov	r2, r8
     496:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     498:	2000      	movs	r0, #0
     49a:	e692      	b.n	1c2 <adc_init+0x26>
		switch (resolution) {
     49c:	2c00      	cmp	r4, #0
     49e:	d198      	bne.n	3d2 <adc_init+0x236>
			if (config->differential_mode &&
     4a0:	7cf2      	ldrb	r2, [r6, #19]
     4a2:	2a00      	cmp	r2, #0
     4a4:	d00f      	beq.n	4c6 <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
     4a6:	69f2      	ldr	r2, [r6, #28]
     4a8:	2180      	movs	r1, #128	; 0x80
     4aa:	0109      	lsls	r1, r1, #4
     4ac:	468c      	mov	ip, r1
     4ae:	4462      	add	r2, ip
			if (config->differential_mode &&
     4b0:	4912      	ldr	r1, [pc, #72]	; (4fc <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     4b2:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4b4:	428a      	cmp	r2, r1
     4b6:	d900      	bls.n	4ba <adc_init+0x31e>
     4b8:	e683      	b.n	1c2 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     4ba:	6a32      	ldr	r2, [r6, #32]
     4bc:	4462      	add	r2, ip
     4be:	490f      	ldr	r1, [pc, #60]	; (4fc <adc_init+0x360>)
     4c0:	428a      	cmp	r2, r1
     4c2:	d900      	bls.n	4c6 <adc_init+0x32a>
     4c4:	e67d      	b.n	1c2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     4c6:	4a0d      	ldr	r2, [pc, #52]	; (4fc <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     4c8:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     4ca:	69f1      	ldr	r1, [r6, #28]
     4cc:	4291      	cmp	r1, r2
     4ce:	dd00      	ble.n	4d2 <adc_init+0x336>
     4d0:	e677      	b.n	1c2 <adc_init+0x26>
     4d2:	6a31      	ldr	r1, [r6, #32]
     4d4:	4291      	cmp	r1, r2
     4d6:	dd00      	ble.n	4da <adc_init+0x33e>
     4d8:	e673      	b.n	1c2 <adc_init+0x26>
     4da:	e77a      	b.n	3d2 <adc_init+0x236>
     4dc:	40000400 	.word	0x40000400
     4e0:	40000800 	.word	0x40000800
     4e4:	00002275 	.word	0x00002275
     4e8:	000021e9 	.word	0x000021e9
     4ec:	00004a91 	.word	0x00004a91
     4f0:	00005d8c 	.word	0x00005d8c
     4f4:	0000236d 	.word	0x0000236d
     4f8:	00005cb8 	.word	0x00005cb8
     4fc:	00000fff 	.word	0x00000fff
     500:	00806024 	.word	0x00806024
     504:	00806020 	.word	0x00806020
			if (config->differential_mode &&
     508:	7cf2      	ldrb	r2, [r6, #19]
     50a:	2a00      	cmp	r2, #0
     50c:	d00f      	beq.n	52e <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
     50e:	69f2      	ldr	r2, [r6, #28]
     510:	2180      	movs	r1, #128	; 0x80
     512:	0089      	lsls	r1, r1, #2
     514:	468c      	mov	ip, r1
     516:	4462      	add	r2, ip
			if (config->differential_mode &&
     518:	491a      	ldr	r1, [pc, #104]	; (584 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     51a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     51c:	428a      	cmp	r2, r1
     51e:	d900      	bls.n	522 <adc_init+0x386>
     520:	e64f      	b.n	1c2 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     522:	6a32      	ldr	r2, [r6, #32]
     524:	4462      	add	r2, ip
     526:	4917      	ldr	r1, [pc, #92]	; (584 <adc_init+0x3e8>)
     528:	428a      	cmp	r2, r1
     52a:	d900      	bls.n	52e <adc_init+0x392>
     52c:	e649      	b.n	1c2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     52e:	4a15      	ldr	r2, [pc, #84]	; (584 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     530:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     532:	69f1      	ldr	r1, [r6, #28]
     534:	4291      	cmp	r1, r2
     536:	dd00      	ble.n	53a <adc_init+0x39e>
     538:	e643      	b.n	1c2 <adc_init+0x26>
     53a:	6a31      	ldr	r1, [r6, #32]
     53c:	4291      	cmp	r1, r2
     53e:	dd00      	ble.n	542 <adc_init+0x3a6>
     540:	e63f      	b.n	1c2 <adc_init+0x26>
     542:	e746      	b.n	3d2 <adc_init+0x236>
			if (config->differential_mode &&
     544:	7cf2      	ldrb	r2, [r6, #19]
     546:	2a00      	cmp	r2, #0
     548:	d00f      	beq.n	56a <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
     54a:	69f2      	ldr	r2, [r6, #28]
     54c:	2180      	movs	r1, #128	; 0x80
     54e:	0209      	lsls	r1, r1, #8
     550:	468c      	mov	ip, r1
     552:	4462      	add	r2, ip
			if (config->differential_mode &&
     554:	490c      	ldr	r1, [pc, #48]	; (588 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     556:	2017      	movs	r0, #23
			if (config->differential_mode &&
     558:	428a      	cmp	r2, r1
     55a:	d900      	bls.n	55e <adc_init+0x3c2>
     55c:	e631      	b.n	1c2 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     55e:	6a32      	ldr	r2, [r6, #32]
     560:	4462      	add	r2, ip
     562:	4909      	ldr	r1, [pc, #36]	; (588 <adc_init+0x3ec>)
     564:	428a      	cmp	r2, r1
     566:	d900      	bls.n	56a <adc_init+0x3ce>
     568:	e62b      	b.n	1c2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     56a:	4a07      	ldr	r2, [pc, #28]	; (588 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     56c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     56e:	69f1      	ldr	r1, [r6, #28]
     570:	4291      	cmp	r1, r2
     572:	dd00      	ble.n	576 <adc_init+0x3da>
     574:	e625      	b.n	1c2 <adc_init+0x26>
     576:	6a31      	ldr	r1, [r6, #32]
     578:	4291      	cmp	r1, r2
     57a:	dd00      	ble.n	57e <adc_init+0x3e2>
     57c:	e621      	b.n	1c2 <adc_init+0x26>
     57e:	e728      	b.n	3d2 <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
     580:	2017      	movs	r0, #23
     582:	e61e      	b.n	1c2 <adc_init+0x26>
     584:	000003ff 	.word	0x000003ff
     588:	0000ffff 	.word	0x0000ffff

0000058c <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     58c:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     58e:	2207      	movs	r2, #7
     590:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     592:	421a      	tst	r2, r3
     594:	d1fc      	bne.n	590 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     596:	4770      	bx	lr

00000598 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     598:	b5f0      	push	{r4, r5, r6, r7, lr}
     59a:	46d6      	mov	lr, sl
     59c:	464f      	mov	r7, r9
     59e:	4646      	mov	r6, r8
     5a0:	b5c0      	push	{r6, r7, lr}
     5a2:	b08a      	sub	sp, #40	; 0x28
     5a4:	0006      	movs	r6, r0
     5a6:	000f      	movs	r7, r1
     5a8:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     5aa:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5ac:	0008      	movs	r0, r1
     5ae:	4ba0      	ldr	r3, [pc, #640]	; (830 <i2c_master_init+0x298>)
     5b0:	4798      	blx	r3
     5b2:	4aa0      	ldr	r2, [pc, #640]	; (834 <i2c_master_init+0x29c>)
     5b4:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5b6:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5b8:	2301      	movs	r3, #1
     5ba:	40ab      	lsls	r3, r5
     5bc:	430b      	orrs	r3, r1
     5be:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     5c0:	a909      	add	r1, sp, #36	; 0x24
     5c2:	7b23      	ldrb	r3, [r4, #12]
     5c4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5c6:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5c8:	b2c5      	uxtb	r5, r0
     5ca:	0028      	movs	r0, r5
     5cc:	4b9a      	ldr	r3, [pc, #616]	; (838 <i2c_master_init+0x2a0>)
     5ce:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     5d0:	0028      	movs	r0, r5
     5d2:	4b9a      	ldr	r3, [pc, #616]	; (83c <i2c_master_init+0x2a4>)
     5d4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     5d6:	7b20      	ldrb	r0, [r4, #12]
     5d8:	2100      	movs	r1, #0
     5da:	4b99      	ldr	r3, [pc, #612]	; (840 <i2c_master_init+0x2a8>)
     5dc:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     5de:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     5e0:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     5e2:	079b      	lsls	r3, r3, #30
     5e4:	d505      	bpl.n	5f2 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     5e6:	b00a      	add	sp, #40	; 0x28
     5e8:	bc1c      	pop	{r2, r3, r4}
     5ea:	4690      	mov	r8, r2
     5ec:	4699      	mov	r9, r3
     5ee:	46a2      	mov	sl, r4
     5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     5f2:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     5f4:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     5f6:	07db      	lsls	r3, r3, #31
     5f8:	d4f5      	bmi.n	5e6 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     5fa:	6830      	ldr	r0, [r6, #0]
     5fc:	4b8c      	ldr	r3, [pc, #560]	; (830 <i2c_master_init+0x298>)
     5fe:	4699      	mov	r9, r3
     600:	4798      	blx	r3
     602:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     604:	498f      	ldr	r1, [pc, #572]	; (844 <i2c_master_init+0x2ac>)
     606:	4b90      	ldr	r3, [pc, #576]	; (848 <i2c_master_init+0x2b0>)
     608:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     60a:	00ad      	lsls	r5, r5, #2
     60c:	4b8f      	ldr	r3, [pc, #572]	; (84c <i2c_master_init+0x2b4>)
     60e:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     610:	2300      	movs	r3, #0
     612:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     614:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     616:	2500      	movs	r5, #0
     618:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     61a:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     61c:	2225      	movs	r2, #37	; 0x25
     61e:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     620:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     622:	3314      	adds	r3, #20
     624:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     626:	6833      	ldr	r3, [r6, #0]
     628:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     62a:	0018      	movs	r0, r3
     62c:	47c8      	blx	r9
     62e:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     630:	2380      	movs	r3, #128	; 0x80
     632:	aa08      	add	r2, sp, #32
     634:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     636:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     638:	2301      	movs	r3, #1
     63a:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     63c:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     63e:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     640:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     642:	2800      	cmp	r0, #0
     644:	d100      	bne.n	648 <i2c_master_init+0xb0>
     646:	e0af      	b.n	7a8 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     648:	ab08      	add	r3, sp, #32
     64a:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     64c:	2302      	movs	r3, #2
     64e:	aa08      	add	r2, sp, #32
     650:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     652:	0c00      	lsrs	r0, r0, #16
     654:	b2c0      	uxtb	r0, r0
     656:	0011      	movs	r1, r2
     658:	4b7d      	ldr	r3, [pc, #500]	; (850 <i2c_master_init+0x2b8>)
     65a:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     65c:	2f00      	cmp	r7, #0
     65e:	d100      	bne.n	662 <i2c_master_init+0xca>
     660:	e0a7      	b.n	7b2 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     662:	ab08      	add	r3, sp, #32
     664:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     666:	2302      	movs	r3, #2
     668:	aa08      	add	r2, sp, #32
     66a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     66c:	0c3f      	lsrs	r7, r7, #16
     66e:	b2f8      	uxtb	r0, r7
     670:	0011      	movs	r1, r2
     672:	4b77      	ldr	r3, [pc, #476]	; (850 <i2c_master_init+0x2b8>)
     674:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     676:	8aa3      	ldrh	r3, [r4, #20]
     678:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     67a:	8ae3      	ldrh	r3, [r4, #22]
     67c:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     67e:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     680:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     682:	2b00      	cmp	r3, #0
     684:	d104      	bne.n	690 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     686:	4b73      	ldr	r3, [pc, #460]	; (854 <i2c_master_init+0x2bc>)
     688:	789b      	ldrb	r3, [r3, #2]
     68a:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     68c:	0fdb      	lsrs	r3, r3, #31
     68e:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     690:	68a1      	ldr	r1, [r4, #8]
     692:	6923      	ldr	r3, [r4, #16]
     694:	430b      	orrs	r3, r1
     696:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     698:	2224      	movs	r2, #36	; 0x24
     69a:	5ca2      	ldrb	r2, [r4, r2]
     69c:	2a00      	cmp	r2, #0
     69e:	d002      	beq.n	6a6 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     6a0:	2280      	movs	r2, #128	; 0x80
     6a2:	05d2      	lsls	r2, r2, #23
     6a4:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     6a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     6a8:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     6aa:	222c      	movs	r2, #44	; 0x2c
     6ac:	5ca2      	ldrb	r2, [r4, r2]
     6ae:	2a00      	cmp	r2, #0
     6b0:	d103      	bne.n	6ba <i2c_master_init+0x122>
     6b2:	2280      	movs	r2, #128	; 0x80
     6b4:	0492      	lsls	r2, r2, #18
     6b6:	4291      	cmp	r1, r2
     6b8:	d102      	bne.n	6c0 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     6ba:	2280      	movs	r2, #128	; 0x80
     6bc:	0512      	lsls	r2, r2, #20
     6be:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     6c0:	222d      	movs	r2, #45	; 0x2d
     6c2:	5ca2      	ldrb	r2, [r4, r2]
     6c4:	2a00      	cmp	r2, #0
     6c6:	d002      	beq.n	6ce <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     6c8:	2280      	movs	r2, #128	; 0x80
     6ca:	0412      	lsls	r2, r2, #16
     6cc:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     6ce:	222e      	movs	r2, #46	; 0x2e
     6d0:	5ca2      	ldrb	r2, [r4, r2]
     6d2:	2a00      	cmp	r2, #0
     6d4:	d002      	beq.n	6dc <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     6d6:	2280      	movs	r2, #128	; 0x80
     6d8:	03d2      	lsls	r2, r2, #15
     6da:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     6dc:	4642      	mov	r2, r8
     6de:	6812      	ldr	r2, [r2, #0]
     6e0:	4313      	orrs	r3, r2
     6e2:	4642      	mov	r2, r8
     6e4:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     6e6:	2380      	movs	r3, #128	; 0x80
     6e8:	005b      	lsls	r3, r3, #1
     6ea:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     6ec:	4648      	mov	r0, r9
     6ee:	3014      	adds	r0, #20
     6f0:	b2c0      	uxtb	r0, r0
     6f2:	4b59      	ldr	r3, [pc, #356]	; (858 <i2c_master_init+0x2c0>)
     6f4:	4798      	blx	r3
     6f6:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     6f8:	23fa      	movs	r3, #250	; 0xfa
     6fa:	009b      	lsls	r3, r3, #2
     6fc:	6822      	ldr	r2, [r4, #0]
     6fe:	435a      	muls	r2, r3
     700:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     702:	6863      	ldr	r3, [r4, #4]
     704:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     706:	4d55      	ldr	r5, [pc, #340]	; (85c <i2c_master_init+0x2c4>)
     708:	47a8      	blx	r5
     70a:	9000      	str	r0, [sp, #0]
     70c:	9101      	str	r1, [sp, #4]
     70e:	464b      	mov	r3, r9
     710:	0058      	lsls	r0, r3, #1
     712:	47a8      	blx	r5
     714:	9002      	str	r0, [sp, #8]
     716:	9103      	str	r1, [sp, #12]
     718:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     71a:	47a8      	blx	r5
     71c:	9004      	str	r0, [sp, #16]
     71e:	9105      	str	r1, [sp, #20]
     720:	4f4f      	ldr	r7, [pc, #316]	; (860 <i2c_master_init+0x2c8>)
     722:	4a50      	ldr	r2, [pc, #320]	; (864 <i2c_master_init+0x2cc>)
     724:	4b50      	ldr	r3, [pc, #320]	; (868 <i2c_master_init+0x2d0>)
     726:	9800      	ldr	r0, [sp, #0]
     728:	9901      	ldr	r1, [sp, #4]
     72a:	47b8      	blx	r7
     72c:	0002      	movs	r2, r0
     72e:	000b      	movs	r3, r1
     730:	9804      	ldr	r0, [sp, #16]
     732:	9905      	ldr	r1, [sp, #20]
     734:	47b8      	blx	r7
     736:	4e4d      	ldr	r6, [pc, #308]	; (86c <i2c_master_init+0x2d4>)
     738:	2200      	movs	r2, #0
     73a:	4b4d      	ldr	r3, [pc, #308]	; (870 <i2c_master_init+0x2d8>)
     73c:	47b0      	blx	r6
     73e:	9004      	str	r0, [sp, #16]
     740:	9105      	str	r1, [sp, #20]
     742:	4648      	mov	r0, r9
     744:	47a8      	blx	r5
     746:	0002      	movs	r2, r0
     748:	000b      	movs	r3, r1
     74a:	9804      	ldr	r0, [sp, #16]
     74c:	9905      	ldr	r1, [sp, #20]
     74e:	47b8      	blx	r7
     750:	0002      	movs	r2, r0
     752:	000b      	movs	r3, r1
     754:	4d47      	ldr	r5, [pc, #284]	; (874 <i2c_master_init+0x2dc>)
     756:	9800      	ldr	r0, [sp, #0]
     758:	9901      	ldr	r1, [sp, #4]
     75a:	47a8      	blx	r5
     75c:	9a02      	ldr	r2, [sp, #8]
     75e:	9b03      	ldr	r3, [sp, #12]
     760:	47b0      	blx	r6
     762:	2200      	movs	r2, #0
     764:	4b44      	ldr	r3, [pc, #272]	; (878 <i2c_master_init+0x2e0>)
     766:	47a8      	blx	r5
     768:	9a02      	ldr	r2, [sp, #8]
     76a:	9b03      	ldr	r3, [sp, #12]
     76c:	4d43      	ldr	r5, [pc, #268]	; (87c <i2c_master_init+0x2e4>)
     76e:	47a8      	blx	r5
     770:	4b43      	ldr	r3, [pc, #268]	; (880 <i2c_master_init+0x2e8>)
     772:	4798      	blx	r3
     774:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     776:	2380      	movs	r3, #128	; 0x80
     778:	049b      	lsls	r3, r3, #18
     77a:	68a2      	ldr	r2, [r4, #8]
     77c:	429a      	cmp	r2, r3
     77e:	d01e      	beq.n	7be <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     780:	0003      	movs	r3, r0
     782:	2040      	movs	r0, #64	; 0x40
     784:	2dff      	cmp	r5, #255	; 0xff
     786:	d900      	bls.n	78a <i2c_master_init+0x1f2>
     788:	e72d      	b.n	5e6 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     78a:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     78c:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     78e:	25ff      	movs	r5, #255	; 0xff
     790:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     792:	0624      	lsls	r4, r4, #24
     794:	4325      	orrs	r5, r4
     796:	0400      	lsls	r0, r0, #16
     798:	23ff      	movs	r3, #255	; 0xff
     79a:	041b      	lsls	r3, r3, #16
     79c:	4018      	ands	r0, r3
     79e:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     7a0:	4643      	mov	r3, r8
     7a2:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     7a4:	2000      	movs	r0, #0
     7a6:	e71e      	b.n	5e6 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     7a8:	2100      	movs	r1, #0
     7aa:	4640      	mov	r0, r8
     7ac:	4b35      	ldr	r3, [pc, #212]	; (884 <i2c_master_init+0x2ec>)
     7ae:	4798      	blx	r3
     7b0:	e74a      	b.n	648 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     7b2:	2101      	movs	r1, #1
     7b4:	4640      	mov	r0, r8
     7b6:	4b33      	ldr	r3, [pc, #204]	; (884 <i2c_master_init+0x2ec>)
     7b8:	4798      	blx	r3
     7ba:	0007      	movs	r7, r0
     7bc:	e751      	b.n	662 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     7be:	26fa      	movs	r6, #250	; 0xfa
     7c0:	00b6      	lsls	r6, r6, #2
     7c2:	4653      	mov	r3, sl
     7c4:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     7c6:	9800      	ldr	r0, [sp, #0]
     7c8:	9901      	ldr	r1, [sp, #4]
     7ca:	0002      	movs	r2, r0
     7cc:	000b      	movs	r3, r1
     7ce:	4c27      	ldr	r4, [pc, #156]	; (86c <i2c_master_init+0x2d4>)
     7d0:	47a0      	blx	r4
     7d2:	9000      	str	r0, [sp, #0]
     7d4:	9101      	str	r1, [sp, #4]
     7d6:	0030      	movs	r0, r6
     7d8:	4b20      	ldr	r3, [pc, #128]	; (85c <i2c_master_init+0x2c4>)
     7da:	4798      	blx	r3
     7dc:	2200      	movs	r2, #0
     7de:	4b2a      	ldr	r3, [pc, #168]	; (888 <i2c_master_init+0x2f0>)
     7e0:	47b8      	blx	r7
     7e2:	0002      	movs	r2, r0
     7e4:	000b      	movs	r3, r1
     7e6:	9800      	ldr	r0, [sp, #0]
     7e8:	9901      	ldr	r1, [sp, #4]
     7ea:	4c24      	ldr	r4, [pc, #144]	; (87c <i2c_master_init+0x2e4>)
     7ec:	47a0      	blx	r4
     7ee:	2200      	movs	r2, #0
     7f0:	4b21      	ldr	r3, [pc, #132]	; (878 <i2c_master_init+0x2e0>)
     7f2:	4c20      	ldr	r4, [pc, #128]	; (874 <i2c_master_init+0x2dc>)
     7f4:	47a0      	blx	r4
     7f6:	4b22      	ldr	r3, [pc, #136]	; (880 <i2c_master_init+0x2e8>)
     7f8:	4798      	blx	r3
     7fa:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     7fc:	d00c      	beq.n	818 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     7fe:	0031      	movs	r1, r6
     800:	9807      	ldr	r0, [sp, #28]
     802:	4b22      	ldr	r3, [pc, #136]	; (88c <i2c_master_init+0x2f4>)
     804:	4798      	blx	r3
     806:	3802      	subs	r0, #2
     808:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     80a:	002b      	movs	r3, r5
     80c:	2dff      	cmp	r5, #255	; 0xff
     80e:	d80c      	bhi.n	82a <i2c_master_init+0x292>
     810:	28ff      	cmp	r0, #255	; 0xff
     812:	d9bc      	bls.n	78e <i2c_master_init+0x1f6>
     814:	2040      	movs	r0, #64	; 0x40
     816:	e6e6      	b.n	5e6 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     818:	0071      	lsls	r1, r6, #1
     81a:	1e48      	subs	r0, r1, #1
     81c:	9b07      	ldr	r3, [sp, #28]
     81e:	469c      	mov	ip, r3
     820:	4460      	add	r0, ip
     822:	4b1a      	ldr	r3, [pc, #104]	; (88c <i2c_master_init+0x2f4>)
     824:	4798      	blx	r3
     826:	3801      	subs	r0, #1
     828:	e7ef      	b.n	80a <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     82a:	2040      	movs	r0, #64	; 0x40
     82c:	e6db      	b.n	5e6 <i2c_master_init+0x4e>
     82e:	46c0      	nop			; (mov r8, r8)
     830:	000012fd 	.word	0x000012fd
     834:	40000400 	.word	0x40000400
     838:	00002275 	.word	0x00002275
     83c:	000021e9 	.word	0x000021e9
     840:	00001139 	.word	0x00001139
     844:	00000dd5 	.word	0x00000dd5
     848:	00001a99 	.word	0x00001a99
     84c:	20000274 	.word	0x20000274
     850:	0000236d 	.word	0x0000236d
     854:	41002000 	.word	0x41002000
     858:	00002291 	.word	0x00002291
     85c:	00004935 	.word	0x00004935
     860:	00003da1 	.word	0x00003da1
     864:	e826d695 	.word	0xe826d695
     868:	3e112e0b 	.word	0x3e112e0b
     86c:	00003119 	.word	0x00003119
     870:	40240000 	.word	0x40240000
     874:	000042a1 	.word	0x000042a1
     878:	3ff00000 	.word	0x3ff00000
     87c:	00003739 	.word	0x00003739
     880:	000048cd 	.word	0x000048cd
     884:	00001185 	.word	0x00001185
     888:	40080000 	.word	0x40080000
     88c:	00002fad 	.word	0x00002fad

00000890 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     890:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     892:	7e1a      	ldrb	r2, [r3, #24]
     894:	0792      	lsls	r2, r2, #30
     896:	d507      	bpl.n	8a8 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     898:	2202      	movs	r2, #2
     89a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     89c:	8b5b      	ldrh	r3, [r3, #26]
     89e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     8a0:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     8a2:	17db      	asrs	r3, r3, #31
     8a4:	4018      	ands	r0, r3
}
     8a6:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     8a8:	8b5a      	ldrh	r2, [r3, #26]
     8aa:	0752      	lsls	r2, r2, #29
     8ac:	d506      	bpl.n	8bc <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8ae:	6859      	ldr	r1, [r3, #4]
     8b0:	22c0      	movs	r2, #192	; 0xc0
     8b2:	0292      	lsls	r2, r2, #10
     8b4:	430a      	orrs	r2, r1
     8b6:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     8b8:	2018      	movs	r0, #24
     8ba:	e7f4      	b.n	8a6 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     8bc:	2000      	movs	r0, #0
     8be:	e7f2      	b.n	8a6 <_i2c_master_address_response+0x16>

000008c0 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     8c0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8c2:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     8c4:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     8c6:	2401      	movs	r4, #1
     8c8:	2502      	movs	r5, #2
     8ca:	7e11      	ldrb	r1, [r2, #24]
     8cc:	4221      	tst	r1, r4
     8ce:	d10b      	bne.n	8e8 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     8d0:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     8d2:	4229      	tst	r1, r5
     8d4:	d106      	bne.n	8e4 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     8d6:	3301      	adds	r3, #1
     8d8:	b29b      	uxth	r3, r3
     8da:	8901      	ldrh	r1, [r0, #8]
     8dc:	4299      	cmp	r1, r3
     8de:	d8f4      	bhi.n	8ca <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     8e0:	2012      	movs	r0, #18
     8e2:	e002      	b.n	8ea <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     8e4:	2000      	movs	r0, #0
     8e6:	e000      	b.n	8ea <_i2c_master_wait_for_bus+0x2a>
     8e8:	2000      	movs	r0, #0
}
     8ea:	bd30      	pop	{r4, r5, pc}

000008ec <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     8ec:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8ee:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     8f0:	6862      	ldr	r2, [r4, #4]
     8f2:	2380      	movs	r3, #128	; 0x80
     8f4:	02db      	lsls	r3, r3, #11
     8f6:	4313      	orrs	r3, r2
     8f8:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     8fa:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     8fc:	4b02      	ldr	r3, [pc, #8]	; (908 <_i2c_master_send_hs_master_code+0x1c>)
     8fe:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     900:	2301      	movs	r3, #1
     902:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     904:	bd10      	pop	{r4, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	000008c1 	.word	0x000008c1

0000090c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     90c:	b5f0      	push	{r4, r5, r6, r7, lr}
     90e:	46de      	mov	lr, fp
     910:	4657      	mov	r7, sl
     912:	464e      	mov	r6, r9
     914:	4645      	mov	r5, r8
     916:	b5e0      	push	{r5, r6, r7, lr}
     918:	b083      	sub	sp, #12
     91a:	0006      	movs	r6, r0
     91c:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     91e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     920:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     922:	682b      	ldr	r3, [r5, #0]
     924:	011b      	lsls	r3, r3, #4
     926:	0fdb      	lsrs	r3, r3, #31
     928:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     92a:	7a4b      	ldrb	r3, [r1, #9]
     92c:	2b00      	cmp	r3, #0
     92e:	d12b      	bne.n	988 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     930:	686b      	ldr	r3, [r5, #4]
     932:	4a58      	ldr	r2, [pc, #352]	; (a94 <_i2c_master_read_packet+0x188>)
     934:	4013      	ands	r3, r2
     936:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     938:	464b      	mov	r3, r9
     93a:	7a1b      	ldrb	r3, [r3, #8]
     93c:	2b00      	cmp	r3, #0
     93e:	d127      	bne.n	990 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     940:	464b      	mov	r3, r9
     942:	881b      	ldrh	r3, [r3, #0]
     944:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     946:	464a      	mov	r2, r9
     948:	7a52      	ldrb	r2, [r2, #9]
     94a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     94c:	4313      	orrs	r3, r2
     94e:	2201      	movs	r2, #1
     950:	4313      	orrs	r3, r2
     952:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     954:	0030      	movs	r0, r6
     956:	4b50      	ldr	r3, [pc, #320]	; (a98 <_i2c_master_read_packet+0x18c>)
     958:	4798      	blx	r3
     95a:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     95c:	4653      	mov	r3, sl
     95e:	2b00      	cmp	r3, #0
     960:	d003      	beq.n	96a <_i2c_master_read_packet+0x5e>
     962:	464b      	mov	r3, r9
     964:	885b      	ldrh	r3, [r3, #2]
     966:	2b01      	cmp	r3, #1
     968:	d03b      	beq.n	9e2 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     96a:	686b      	ldr	r3, [r5, #4]
     96c:	4a49      	ldr	r2, [pc, #292]	; (a94 <_i2c_master_read_packet+0x188>)
     96e:	4013      	ands	r3, r2
     970:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     972:	9b01      	ldr	r3, [sp, #4]
     974:	2b00      	cmp	r3, #0
     976:	d03a      	beq.n	9ee <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     978:	9801      	ldr	r0, [sp, #4]
     97a:	b003      	add	sp, #12
     97c:	bc3c      	pop	{r2, r3, r4, r5}
     97e:	4690      	mov	r8, r2
     980:	4699      	mov	r9, r3
     982:	46a2      	mov	sl, r4
     984:	46ab      	mov	fp, r5
     986:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     988:	7a89      	ldrb	r1, [r1, #10]
     98a:	4b44      	ldr	r3, [pc, #272]	; (a9c <_i2c_master_read_packet+0x190>)
     98c:	4798      	blx	r3
     98e:	e7cf      	b.n	930 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     990:	464b      	mov	r3, r9
     992:	881b      	ldrh	r3, [r3, #0]
     994:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     996:	464a      	mov	r2, r9
     998:	7a52      	ldrb	r2, [r2, #9]
     99a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     99c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     99e:	2280      	movs	r2, #128	; 0x80
     9a0:	0212      	lsls	r2, r2, #8
     9a2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     9a4:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     9a6:	0030      	movs	r0, r6
     9a8:	4b3b      	ldr	r3, [pc, #236]	; (a98 <_i2c_master_read_packet+0x18c>)
     9aa:	4798      	blx	r3
     9ac:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     9ae:	686b      	ldr	r3, [r5, #4]
     9b0:	4a38      	ldr	r2, [pc, #224]	; (a94 <_i2c_master_read_packet+0x188>)
     9b2:	4013      	ands	r3, r2
     9b4:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     9b6:	2800      	cmp	r0, #0
     9b8:	d1de      	bne.n	978 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     9ba:	0030      	movs	r0, r6
     9bc:	4b38      	ldr	r3, [pc, #224]	; (aa0 <_i2c_master_read_packet+0x194>)
     9be:	4798      	blx	r3
     9c0:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     9c2:	2800      	cmp	r0, #0
     9c4:	d1d8      	bne.n	978 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     9c6:	464b      	mov	r3, r9
     9c8:	881b      	ldrh	r3, [r3, #0]
     9ca:	0a1b      	lsrs	r3, r3, #8
     9cc:	2278      	movs	r2, #120	; 0x78
     9ce:	4313      	orrs	r3, r2
     9d0:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9d2:	464a      	mov	r2, r9
     9d4:	7a52      	ldrb	r2, [r2, #9]
     9d6:	0392      	lsls	r2, r2, #14
     9d8:	2101      	movs	r1, #1
     9da:	430a      	orrs	r2, r1
     9dc:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     9de:	626b      	str	r3, [r5, #36]	; 0x24
     9e0:	e7b8      	b.n	954 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     9e2:	686a      	ldr	r2, [r5, #4]
     9e4:	2380      	movs	r3, #128	; 0x80
     9e6:	02db      	lsls	r3, r3, #11
     9e8:	4313      	orrs	r3, r2
     9ea:	606b      	str	r3, [r5, #4]
     9ec:	e7c1      	b.n	972 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     9ee:	0030      	movs	r0, r6
     9f0:	4b2b      	ldr	r3, [pc, #172]	; (aa0 <_i2c_master_read_packet+0x194>)
     9f2:	4798      	blx	r3
     9f4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     9f6:	2800      	cmp	r0, #0
     9f8:	d1be      	bne.n	978 <_i2c_master_read_packet+0x6c>
     9fa:	3c01      	subs	r4, #1
     9fc:	b2a4      	uxth	r4, r4
     9fe:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     a00:	4b28      	ldr	r3, [pc, #160]	; (aa4 <_i2c_master_read_packet+0x198>)
     a02:	469b      	mov	fp, r3
     a04:	e015      	b.n	a32 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     a06:	2c01      	cmp	r4, #1
     a08:	d020      	beq.n	a4c <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     a0a:	0030      	movs	r0, r6
     a0c:	4b26      	ldr	r3, [pc, #152]	; (aa8 <_i2c_master_read_packet+0x19c>)
     a0e:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     a10:	4643      	mov	r3, r8
     a12:	1c5f      	adds	r7, r3, #1
     a14:	b2bf      	uxth	r7, r7
     a16:	2328      	movs	r3, #40	; 0x28
     a18:	5ceb      	ldrb	r3, [r5, r3]
     a1a:	464a      	mov	r2, r9
     a1c:	6852      	ldr	r2, [r2, #4]
     a1e:	4641      	mov	r1, r8
     a20:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     a22:	0030      	movs	r0, r6
     a24:	4b1c      	ldr	r3, [pc, #112]	; (a98 <_i2c_master_read_packet+0x18c>)
     a26:	4798      	blx	r3
     a28:	3c01      	subs	r4, #1
     a2a:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     a2c:	2800      	cmp	r0, #0
     a2e:	d115      	bne.n	a5c <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     a30:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     a32:	455c      	cmp	r4, fp
     a34:	d014      	beq.n	a60 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     a36:	8b6b      	ldrh	r3, [r5, #26]
     a38:	069b      	lsls	r3, r3, #26
     a3a:	d527      	bpl.n	a8c <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     a3c:	7af3      	ldrb	r3, [r6, #11]
     a3e:	2b00      	cmp	r3, #0
     a40:	d0e3      	beq.n	a0a <_i2c_master_read_packet+0xfe>
     a42:	4653      	mov	r3, sl
     a44:	2b00      	cmp	r3, #0
     a46:	d1de      	bne.n	a06 <_i2c_master_read_packet+0xfa>
     a48:	2c00      	cmp	r4, #0
     a4a:	d1de      	bne.n	a0a <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     a4c:	686a      	ldr	r2, [r5, #4]
     a4e:	2380      	movs	r3, #128	; 0x80
     a50:	02db      	lsls	r3, r3, #11
     a52:	4313      	orrs	r3, r2
     a54:	606b      	str	r3, [r5, #4]
     a56:	3c01      	subs	r4, #1
     a58:	b2a4      	uxth	r4, r4
     a5a:	e7ea      	b.n	a32 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     a5c:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     a5e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     a60:	7ab3      	ldrb	r3, [r6, #10]
     a62:	2b00      	cmp	r3, #0
     a64:	d109      	bne.n	a7a <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     a66:	0030      	movs	r0, r6
     a68:	4b0f      	ldr	r3, [pc, #60]	; (aa8 <_i2c_master_read_packet+0x19c>)
     a6a:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     a6c:	2328      	movs	r3, #40	; 0x28
     a6e:	5cea      	ldrb	r2, [r5, r3]
     a70:	464b      	mov	r3, r9
     a72:	685b      	ldr	r3, [r3, #4]
     a74:	4641      	mov	r1, r8
     a76:	545a      	strb	r2, [r3, r1]
     a78:	e77e      	b.n	978 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     a7a:	0030      	movs	r0, r6
     a7c:	4b0a      	ldr	r3, [pc, #40]	; (aa8 <_i2c_master_read_packet+0x19c>)
     a7e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a80:	686a      	ldr	r2, [r5, #4]
     a82:	23c0      	movs	r3, #192	; 0xc0
     a84:	029b      	lsls	r3, r3, #10
     a86:	4313      	orrs	r3, r2
     a88:	606b      	str	r3, [r5, #4]
     a8a:	e7ec      	b.n	a66 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     a8c:	2341      	movs	r3, #65	; 0x41
     a8e:	9301      	str	r3, [sp, #4]
     a90:	e772      	b.n	978 <_i2c_master_read_packet+0x6c>
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	fffbffff 	.word	0xfffbffff
     a98:	000008c1 	.word	0x000008c1
     a9c:	000008ed 	.word	0x000008ed
     aa0:	00000891 	.word	0x00000891
     aa4:	0000ffff 	.word	0x0000ffff
     aa8:	0000058d 	.word	0x0000058d

00000aac <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     aac:	b5f0      	push	{r4, r5, r6, r7, lr}
     aae:	46de      	mov	lr, fp
     ab0:	4657      	mov	r7, sl
     ab2:	464e      	mov	r6, r9
     ab4:	4645      	mov	r5, r8
     ab6:	b5e0      	push	{r5, r6, r7, lr}
     ab8:	b083      	sub	sp, #12
     aba:	0006      	movs	r6, r0
     abc:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     abe:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     ac0:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     ac2:	4b32      	ldr	r3, [pc, #200]	; (b8c <_i2c_master_write_packet+0xe0>)
     ac4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     ac6:	7a7b      	ldrb	r3, [r7, #9]
     ac8:	2b00      	cmp	r3, #0
     aca:	d11d      	bne.n	b08 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     acc:	686b      	ldr	r3, [r5, #4]
     ace:	4a30      	ldr	r2, [pc, #192]	; (b90 <_i2c_master_write_packet+0xe4>)
     ad0:	4013      	ands	r3, r2
     ad2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     ad4:	7a3b      	ldrb	r3, [r7, #8]
     ad6:	2b00      	cmp	r3, #0
     ad8:	d01b      	beq.n	b12 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     ada:	883b      	ldrh	r3, [r7, #0]
     adc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     ade:	7a7a      	ldrb	r2, [r7, #9]
     ae0:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     ae2:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     ae4:	2280      	movs	r2, #128	; 0x80
     ae6:	0212      	lsls	r2, r2, #8
     ae8:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     aea:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     aec:	0030      	movs	r0, r6
     aee:	4b29      	ldr	r3, [pc, #164]	; (b94 <_i2c_master_write_packet+0xe8>)
     af0:	4798      	blx	r3
     af2:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     af4:	2800      	cmp	r0, #0
     af6:	d013      	beq.n	b20 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     af8:	9801      	ldr	r0, [sp, #4]
     afa:	b003      	add	sp, #12
     afc:	bc3c      	pop	{r2, r3, r4, r5}
     afe:	4690      	mov	r8, r2
     b00:	4699      	mov	r9, r3
     b02:	46a2      	mov	sl, r4
     b04:	46ab      	mov	fp, r5
     b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     b08:	7ab9      	ldrb	r1, [r7, #10]
     b0a:	0030      	movs	r0, r6
     b0c:	4b22      	ldr	r3, [pc, #136]	; (b98 <_i2c_master_write_packet+0xec>)
     b0e:	4798      	blx	r3
     b10:	e7dc      	b.n	acc <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b12:	883b      	ldrh	r3, [r7, #0]
     b14:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     b16:	7a7a      	ldrb	r2, [r7, #9]
     b18:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b1a:	4313      	orrs	r3, r2
     b1c:	626b      	str	r3, [r5, #36]	; 0x24
     b1e:	e7e5      	b.n	aec <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     b20:	0030      	movs	r0, r6
     b22:	4b1e      	ldr	r3, [pc, #120]	; (b9c <_i2c_master_write_packet+0xf0>)
     b24:	4798      	blx	r3
     b26:	1e03      	subs	r3, r0, #0
     b28:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     b2a:	d1e5      	bne.n	af8 <_i2c_master_write_packet+0x4c>
     b2c:	46a0      	mov	r8, r4
     b2e:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     b30:	3320      	adds	r3, #32
     b32:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     b34:	4b15      	ldr	r3, [pc, #84]	; (b8c <_i2c_master_write_packet+0xe0>)
     b36:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     b38:	4b16      	ldr	r3, [pc, #88]	; (b94 <_i2c_master_write_packet+0xe8>)
     b3a:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     b3c:	4544      	cmp	r4, r8
     b3e:	d015      	beq.n	b6c <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     b40:	8b6b      	ldrh	r3, [r5, #26]
     b42:	464a      	mov	r2, r9
     b44:	4213      	tst	r3, r2
     b46:	d01d      	beq.n	b84 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     b48:	0030      	movs	r0, r6
     b4a:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     b4c:	687b      	ldr	r3, [r7, #4]
     b4e:	5d1a      	ldrb	r2, [r3, r4]
     b50:	2328      	movs	r3, #40	; 0x28
     b52:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     b54:	0030      	movs	r0, r6
     b56:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     b58:	2800      	cmp	r0, #0
     b5a:	d106      	bne.n	b6a <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     b5c:	8b6b      	ldrh	r3, [r5, #26]
     b5e:	3401      	adds	r4, #1
     b60:	075b      	lsls	r3, r3, #29
     b62:	d5eb      	bpl.n	b3c <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     b64:	231e      	movs	r3, #30
     b66:	9301      	str	r3, [sp, #4]
     b68:	e000      	b.n	b6c <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     b6a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     b6c:	7ab3      	ldrb	r3, [r6, #10]
     b6e:	2b00      	cmp	r3, #0
     b70:	d0c2      	beq.n	af8 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     b72:	0030      	movs	r0, r6
     b74:	4b05      	ldr	r3, [pc, #20]	; (b8c <_i2c_master_write_packet+0xe0>)
     b76:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b78:	686a      	ldr	r2, [r5, #4]
     b7a:	23c0      	movs	r3, #192	; 0xc0
     b7c:	029b      	lsls	r3, r3, #10
     b7e:	4313      	orrs	r3, r2
     b80:	606b      	str	r3, [r5, #4]
     b82:	e7b9      	b.n	af8 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     b84:	2341      	movs	r3, #65	; 0x41
     b86:	9301      	str	r3, [sp, #4]
     b88:	e7b6      	b.n	af8 <_i2c_master_write_packet+0x4c>
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	0000058d 	.word	0x0000058d
     b90:	fffbffff 	.word	0xfffbffff
     b94:	000008c1 	.word	0x000008c1
     b98:	000008ed 	.word	0x000008ed
     b9c:	00000891 	.word	0x00000891

00000ba0 <i2c_master_read_packet_wait>:
{
     ba0:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     ba2:	8b83      	ldrh	r3, [r0, #28]
     ba4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     ba6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     ba8:	2b00      	cmp	r3, #0
     baa:	d001      	beq.n	bb0 <i2c_master_read_packet_wait+0x10>
}
     bac:	0010      	movs	r0, r2
     bae:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     bb0:	3301      	adds	r3, #1
     bb2:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     bb4:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     bb6:	4b02      	ldr	r3, [pc, #8]	; (bc0 <i2c_master_read_packet_wait+0x20>)
     bb8:	4798      	blx	r3
     bba:	0002      	movs	r2, r0
     bbc:	e7f6      	b.n	bac <i2c_master_read_packet_wait+0xc>
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	0000090d 	.word	0x0000090d

00000bc4 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     bc4:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     bc6:	8b83      	ldrh	r3, [r0, #28]
     bc8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     bca:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     bcc:	2b00      	cmp	r3, #0
     bce:	d001      	beq.n	bd4 <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     bd0:	0010      	movs	r0, r2
     bd2:	bd10      	pop	{r4, pc}
	module->send_stop = false;
     bd4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     bd6:	3301      	adds	r3, #1
     bd8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     bda:	4b02      	ldr	r3, [pc, #8]	; (be4 <i2c_master_write_packet_wait_no_stop+0x20>)
     bdc:	4798      	blx	r3
     bde:	0002      	movs	r2, r0
     be0:	e7f6      	b.n	bd0 <i2c_master_write_packet_wait_no_stop+0xc>
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	00000aad 	.word	0x00000aad

00000be8 <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
     be8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     bea:	6804      	ldr	r4, [r0, #0]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
     bec:	4b03      	ldr	r3, [pc, #12]	; (bfc <i2c_master_send_stop+0x14>)
     bee:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     bf0:	6862      	ldr	r2, [r4, #4]
     bf2:	23c0      	movs	r3, #192	; 0xc0
     bf4:	029b      	lsls	r3, r3, #10
     bf6:	4313      	orrs	r3, r2
     bf8:	6063      	str	r3, [r4, #4]
}
     bfa:	bd10      	pop	{r4, pc}
     bfc:	0000058d 	.word	0x0000058d

00000c00 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     c00:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     c02:	2207      	movs	r2, #7
     c04:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     c06:	421a      	tst	r2, r3
     c08:	d1fc      	bne.n	c04 <_i2c_master_wait_for_sync+0x4>
}
     c0a:	4770      	bx	lr

00000c0c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     c0c:	b570      	push	{r4, r5, r6, lr}
     c0e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c10:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     c12:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     c14:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     c16:	8b83      	ldrh	r3, [r0, #28]
     c18:	1aed      	subs	r5, r5, r3
     c1a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     c1c:	8b83      	ldrh	r3, [r0, #28]
     c1e:	3b01      	subs	r3, #1
     c20:	b29b      	uxth	r3, r3
     c22:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     c24:	0113      	lsls	r3, r2, #4
     c26:	d51d      	bpl.n	c64 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     c28:	7ac3      	ldrb	r3, [r0, #11]
     c2a:	2b00      	cmp	r3, #0
     c2c:	d003      	beq.n	c36 <_i2c_master_read+0x2a>
     c2e:	8b83      	ldrh	r3, [r0, #28]
     c30:	b29b      	uxth	r3, r3
     c32:	2b01      	cmp	r3, #1
     c34:	d010      	beq.n	c58 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     c36:	8ba3      	ldrh	r3, [r4, #28]
     c38:	b29b      	uxth	r3, r3
     c3a:	2b00      	cmp	r3, #0
     c3c:	d102      	bne.n	c44 <_i2c_master_read+0x38>
		if (module->send_stop) {
     c3e:	7aa3      	ldrb	r3, [r4, #10]
     c40:	2b00      	cmp	r3, #0
     c42:	d11c      	bne.n	c7e <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     c44:	0020      	movs	r0, r4
     c46:	4b12      	ldr	r3, [pc, #72]	; (c90 <_i2c_master_read+0x84>)
     c48:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     c4a:	6a23      	ldr	r3, [r4, #32]
     c4c:	195d      	adds	r5, r3, r5
     c4e:	2328      	movs	r3, #40	; 0x28
     c50:	5cf3      	ldrb	r3, [r6, r3]
     c52:	b2db      	uxtb	r3, r3
     c54:	702b      	strb	r3, [r5, #0]
}
     c56:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c58:	6872      	ldr	r2, [r6, #4]
     c5a:	2380      	movs	r3, #128	; 0x80
     c5c:	02db      	lsls	r3, r3, #11
     c5e:	4313      	orrs	r3, r2
     c60:	6073      	str	r3, [r6, #4]
     c62:	e7e8      	b.n	c36 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     c64:	7ac3      	ldrb	r3, [r0, #11]
     c66:	2b00      	cmp	r3, #0
     c68:	d0e5      	beq.n	c36 <_i2c_master_read+0x2a>
     c6a:	8b83      	ldrh	r3, [r0, #28]
     c6c:	b29b      	uxth	r3, r3
     c6e:	2b00      	cmp	r3, #0
     c70:	d1e1      	bne.n	c36 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c72:	6872      	ldr	r2, [r6, #4]
     c74:	2380      	movs	r3, #128	; 0x80
     c76:	02db      	lsls	r3, r3, #11
     c78:	4313      	orrs	r3, r2
     c7a:	6073      	str	r3, [r6, #4]
     c7c:	e7db      	b.n	c36 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     c7e:	0020      	movs	r0, r4
     c80:	4b03      	ldr	r3, [pc, #12]	; (c90 <_i2c_master_read+0x84>)
     c82:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c84:	6872      	ldr	r2, [r6, #4]
     c86:	23c0      	movs	r3, #192	; 0xc0
     c88:	029b      	lsls	r3, r3, #10
     c8a:	4313      	orrs	r3, r2
     c8c:	6073      	str	r3, [r6, #4]
     c8e:	e7d9      	b.n	c44 <_i2c_master_read+0x38>
     c90:	00000c01 	.word	0x00000c01

00000c94 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     c94:	b570      	push	{r4, r5, r6, lr}
     c96:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c98:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     c9a:	8b6b      	ldrh	r3, [r5, #26]
     c9c:	075b      	lsls	r3, r3, #29
     c9e:	d503      	bpl.n	ca8 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     ca0:	221e      	movs	r2, #30
     ca2:	2325      	movs	r3, #37	; 0x25
     ca4:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     ca6:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     ca8:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     caa:	8b83      	ldrh	r3, [r0, #28]
     cac:	1af6      	subs	r6, r6, r3
     cae:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     cb0:	8b83      	ldrh	r3, [r0, #28]
     cb2:	3b01      	subs	r3, #1
     cb4:	b29b      	uxth	r3, r3
     cb6:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     cb8:	4b04      	ldr	r3, [pc, #16]	; (ccc <_i2c_master_write+0x38>)
     cba:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     cbc:	6a23      	ldr	r3, [r4, #32]
     cbe:	199e      	adds	r6, r3, r6
     cc0:	7833      	ldrb	r3, [r6, #0]
     cc2:	b2db      	uxtb	r3, r3
     cc4:	2228      	movs	r2, #40	; 0x28
     cc6:	54ab      	strb	r3, [r5, r2]
     cc8:	e7ed      	b.n	ca6 <_i2c_master_write+0x12>
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	00000c01 	.word	0x00000c01

00000cd0 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cd2:	0005      	movs	r5, r0
     cd4:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     cd6:	6806      	ldr	r6, [r0, #0]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
     cd8:	684b      	ldr	r3, [r1, #4]
     cda:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     cdc:	884b      	ldrh	r3, [r1, #2]
     cde:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     ce0:	2201      	movs	r2, #1
     ce2:	2324      	movs	r3, #36	; 0x24
     ce4:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     ce6:	3204      	adds	r2, #4
     ce8:	3301      	adds	r3, #1
     cea:	54c2      	strb	r2, [r0, r3]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     cec:	6837      	ldr	r7, [r6, #0]
     cee:	013f      	lsls	r7, r7, #4
     cf0:	0fff      	lsrs	r7, r7, #31

	/* Switch to high speed mode */
	if (packet->high_speed) {
     cf2:	7a4b      	ldrb	r3, [r1, #9]
     cf4:	2b00      	cmp	r3, #0
     cf6:	d117      	bne.n	d28 <_i2c_master_read_packet+0x58>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     cf8:	2f00      	cmp	r7, #0
     cfa:	d002      	beq.n	d02 <_i2c_master_read_packet+0x32>
     cfc:	8863      	ldrh	r3, [r4, #2]
     cfe:	2b01      	cmp	r3, #1
     d00:	d016      	beq.n	d30 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     d02:	6873      	ldr	r3, [r6, #4]
     d04:	4a20      	ldr	r2, [pc, #128]	; (d88 <_i2c_master_read_packet+0xb8>)
     d06:	4013      	ands	r3, r2
     d08:	6073      	str	r3, [r6, #4]
	}

	if (packet->ten_bit_address) {
     d0a:	7a23      	ldrb	r3, [r4, #8]
     d0c:	2b00      	cmp	r3, #0
     d0e:	d115      	bne.n	d3c <_i2c_master_read_packet+0x6c>
		} else {
			return tmp_status;
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
     d10:	2303      	movs	r3, #3
     d12:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     d14:	8823      	ldrh	r3, [r4, #0]
     d16:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     d18:	7a62      	ldrb	r2, [r4, #9]
     d1a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     d1c:	4313      	orrs	r3, r2
     d1e:	2201      	movs	r2, #1
     d20:	4313      	orrs	r3, r2
     d22:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
     d24:	2000      	movs	r0, #0
}
     d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     d28:	7a89      	ldrb	r1, [r1, #10]
     d2a:	4b18      	ldr	r3, [pc, #96]	; (d8c <_i2c_master_read_packet+0xbc>)
     d2c:	4798      	blx	r3
     d2e:	e7e3      	b.n	cf8 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     d30:	6872      	ldr	r2, [r6, #4]
     d32:	2380      	movs	r3, #128	; 0x80
     d34:	02db      	lsls	r3, r3, #11
     d36:	4313      	orrs	r3, r2
     d38:	6073      	str	r3, [r6, #4]
     d3a:	e7e6      	b.n	d0a <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     d3c:	8823      	ldrh	r3, [r4, #0]
     d3e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d40:	7a62      	ldrb	r2, [r4, #9]
     d42:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     d44:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d46:	2280      	movs	r2, #128	; 0x80
     d48:	0212      	lsls	r2, r2, #8
     d4a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     d4c:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     d4e:	0028      	movs	r0, r5
     d50:	4b0f      	ldr	r3, [pc, #60]	; (d90 <_i2c_master_read_packet+0xc0>)
     d52:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     d54:	6873      	ldr	r3, [r6, #4]
     d56:	4a0c      	ldr	r2, [pc, #48]	; (d88 <_i2c_master_read_packet+0xb8>)
     d58:	4013      	ands	r3, r2
     d5a:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     d5c:	2800      	cmp	r0, #0
     d5e:	d1e2      	bne.n	d26 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     d60:	0028      	movs	r0, r5
     d62:	4b0c      	ldr	r3, [pc, #48]	; (d94 <_i2c_master_read_packet+0xc4>)
     d64:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     d66:	2800      	cmp	r0, #0
     d68:	d1dd      	bne.n	d26 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     d6a:	2303      	movs	r3, #3
     d6c:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     d6e:	8823      	ldrh	r3, [r4, #0]
     d70:	0a1b      	lsrs	r3, r3, #8
     d72:	2278      	movs	r2, #120	; 0x78
     d74:	4313      	orrs	r3, r2
     d76:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d78:	7a62      	ldrb	r2, [r4, #9]
     d7a:	0392      	lsls	r2, r2, #14
     d7c:	2101      	movs	r1, #1
     d7e:	430a      	orrs	r2, r1
     d80:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     d82:	6273      	str	r3, [r6, #36]	; 0x24
     d84:	e7cf      	b.n	d26 <_i2c_master_read_packet+0x56>
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	fffbffff 	.word	0xfffbffff
     d8c:	000008ed 	.word	0x000008ed
     d90:	000008c1 	.word	0x000008c1
     d94:	00000891 	.word	0x00000891

00000d98 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     d98:	1c93      	adds	r3, r2, #2
     d9a:	009b      	lsls	r3, r3, #2
     d9c:	18c3      	adds	r3, r0, r3
     d9e:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     da0:	7e03      	ldrb	r3, [r0, #24]
     da2:	2101      	movs	r1, #1
     da4:	4091      	lsls	r1, r2
     da6:	430b      	orrs	r3, r1
     da8:	b2db      	uxtb	r3, r3
     daa:	7603      	strb	r3, [r0, #24]
}
     dac:	4770      	bx	lr
	...

00000db0 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     db0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     db2:	8b83      	ldrh	r3, [r0, #28]
     db4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     db6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     db8:	2b00      	cmp	r3, #0
     dba:	d001      	beq.n	dc0 <i2c_master_read_packet_job+0x10>
	/* Make sure we send STOP */
	module->send_stop = true;
	module->send_nack = true;
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
}
     dbc:	0010      	movs	r0, r2
     dbe:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     dc0:	3301      	adds	r3, #1
     dc2:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     dc4:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     dc6:	4b02      	ldr	r3, [pc, #8]	; (dd0 <i2c_master_read_packet_job+0x20>)
     dc8:	4798      	blx	r3
     dca:	0002      	movs	r2, r0
     dcc:	e7f6      	b.n	dbc <i2c_master_read_packet_job+0xc>
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	00000cd1 	.word	0x00000cd1

00000dd4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     dd4:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     dd6:	0080      	lsls	r0, r0, #2
     dd8:	4b75      	ldr	r3, [pc, #468]	; (fb0 <_i2c_master_interrupt_handler+0x1dc>)
     dda:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ddc:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     dde:	682b      	ldr	r3, [r5, #0]
     de0:	011b      	lsls	r3, r3, #4
     de2:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     de4:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     de6:	7e26      	ldrb	r6, [r4, #24]
     de8:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     dea:	8b63      	ldrh	r3, [r4, #26]
     dec:	b29b      	uxth	r3, r3
     dee:	2b00      	cmp	r3, #0
     df0:	d103      	bne.n	dfa <_i2c_master_interrupt_handler+0x26>
     df2:	8ba3      	ldrh	r3, [r4, #28]
     df4:	b29b      	uxth	r3, r3
     df6:	2b00      	cmp	r3, #0
     df8:	d123      	bne.n	e42 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     dfa:	8b63      	ldrh	r3, [r4, #26]
     dfc:	b29b      	uxth	r3, r3
     dfe:	2b00      	cmp	r3, #0
     e00:	d008      	beq.n	e14 <_i2c_master_interrupt_handler+0x40>
     e02:	8ba3      	ldrh	r3, [r4, #28]
     e04:	b29b      	uxth	r3, r3
     e06:	2b00      	cmp	r3, #0
     e08:	d104      	bne.n	e14 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     e0a:	3325      	adds	r3, #37	; 0x25
     e0c:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     e0e:	2b05      	cmp	r3, #5
     e10:	d100      	bne.n	e14 <_i2c_master_interrupt_handler+0x40>
     e12:	e06d      	b.n	ef0 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     e14:	8b63      	ldrh	r3, [r4, #26]
     e16:	b29b      	uxth	r3, r3
     e18:	2b00      	cmp	r3, #0
     e1a:	d024      	beq.n	e66 <_i2c_master_interrupt_handler+0x92>
     e1c:	8ba3      	ldrh	r3, [r4, #28]
     e1e:	b29b      	uxth	r3, r3
     e20:	2b00      	cmp	r3, #0
     e22:	d020      	beq.n	e66 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     e24:	8b6b      	ldrh	r3, [r5, #26]
     e26:	069b      	lsls	r3, r3, #26
     e28:	d500      	bpl.n	e2c <_i2c_master_interrupt_handler+0x58>
     e2a:	e081      	b.n	f30 <_i2c_master_interrupt_handler+0x15c>
     e2c:	2a00      	cmp	r2, #0
     e2e:	d004      	beq.n	e3a <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     e30:	8ba3      	ldrh	r3, [r4, #28]
     e32:	b29b      	uxth	r3, r3
     e34:	2b01      	cmp	r3, #1
     e36:	d100      	bne.n	e3a <_i2c_master_interrupt_handler+0x66>
     e38:	e07a      	b.n	f30 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     e3a:	2241      	movs	r2, #65	; 0x41
     e3c:	2325      	movs	r3, #37	; 0x25
     e3e:	54e2      	strb	r2, [r4, r3]
     e40:	e011      	b.n	e66 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     e42:	7e2b      	ldrb	r3, [r5, #24]
     e44:	07db      	lsls	r3, r3, #31
     e46:	d507      	bpl.n	e58 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     e48:	2301      	movs	r3, #1
     e4a:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     e4c:	8b6b      	ldrh	r3, [r5, #26]
     e4e:	079b      	lsls	r3, r3, #30
     e50:	d52e      	bpl.n	eb0 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     e52:	2241      	movs	r2, #65	; 0x41
     e54:	2325      	movs	r3, #37	; 0x25
     e56:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     e58:	8ba3      	ldrh	r3, [r4, #28]
     e5a:	b29b      	uxth	r3, r3
     e5c:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     e5e:	2325      	movs	r3, #37	; 0x25
     e60:	5ce3      	ldrb	r3, [r4, r3]
     e62:	2b05      	cmp	r3, #5
     e64:	d038      	beq.n	ed8 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     e66:	8b63      	ldrh	r3, [r4, #26]
     e68:	b29b      	uxth	r3, r3
     e6a:	2b00      	cmp	r3, #0
     e6c:	d007      	beq.n	e7e <_i2c_master_interrupt_handler+0xaa>
     e6e:	8ba3      	ldrh	r3, [r4, #28]
     e70:	b29b      	uxth	r3, r3
     e72:	2b00      	cmp	r3, #0
     e74:	d103      	bne.n	e7e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     e76:	3325      	adds	r3, #37	; 0x25
     e78:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     e7a:	2b05      	cmp	r3, #5
     e7c:	d064      	beq.n	f48 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     e7e:	2325      	movs	r3, #37	; 0x25
     e80:	5ce3      	ldrb	r3, [r4, r3]
     e82:	2b05      	cmp	r3, #5
     e84:	d013      	beq.n	eae <_i2c_master_interrupt_handler+0xda>
     e86:	2325      	movs	r3, #37	; 0x25
     e88:	5ce3      	ldrb	r3, [r4, r3]
     e8a:	2b00      	cmp	r3, #0
     e8c:	d00f      	beq.n	eae <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     e8e:	2303      	movs	r3, #3
     e90:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     e92:	2300      	movs	r3, #0
     e94:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     e96:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     e98:	3325      	adds	r3, #37	; 0x25
     e9a:	5ce3      	ldrb	r3, [r4, r3]
     e9c:	2b41      	cmp	r3, #65	; 0x41
     e9e:	d003      	beq.n	ea8 <_i2c_master_interrupt_handler+0xd4>
     ea0:	7aa3      	ldrb	r3, [r4, #10]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d000      	beq.n	ea8 <_i2c_master_interrupt_handler+0xd4>
     ea6:	e075      	b.n	f94 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     ea8:	0773      	lsls	r3, r6, #29
     eaa:	d500      	bpl.n	eae <_i2c_master_interrupt_handler+0xda>
     eac:	e07b      	b.n	fa6 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     eae:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     eb0:	8b6b      	ldrh	r3, [r5, #26]
     eb2:	075b      	lsls	r3, r3, #29
     eb4:	d5d0      	bpl.n	e58 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     eb6:	2218      	movs	r2, #24
     eb8:	2325      	movs	r3, #37	; 0x25
     eba:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     ebc:	2300      	movs	r3, #0
     ebe:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     ec0:	7aa3      	ldrb	r3, [r4, #10]
     ec2:	2b00      	cmp	r3, #0
     ec4:	d0c8      	beq.n	e58 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     ec6:	0020      	movs	r0, r4
     ec8:	4b3a      	ldr	r3, [pc, #232]	; (fb4 <_i2c_master_interrupt_handler+0x1e0>)
     eca:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ecc:	686a      	ldr	r2, [r5, #4]
     ece:	23c0      	movs	r3, #192	; 0xc0
     ed0:	029b      	lsls	r3, r3, #10
     ed2:	4313      	orrs	r3, r2
     ed4:	606b      	str	r3, [r5, #4]
     ed6:	e7bf      	b.n	e58 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     ed8:	331f      	adds	r3, #31
     eda:	5ce3      	ldrb	r3, [r4, r3]
     edc:	2b00      	cmp	r3, #0
     ede:	d003      	beq.n	ee8 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     ee0:	0020      	movs	r0, r4
     ee2:	4b35      	ldr	r3, [pc, #212]	; (fb8 <_i2c_master_interrupt_handler+0x1e4>)
     ee4:	4798      	blx	r3
     ee6:	e7be      	b.n	e66 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     ee8:	0020      	movs	r0, r4
     eea:	4b34      	ldr	r3, [pc, #208]	; (fbc <_i2c_master_interrupt_handler+0x1e8>)
     eec:	4798      	blx	r3
     eee:	e7ba      	b.n	e66 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     ef0:	331f      	adds	r3, #31
     ef2:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     ef4:	2b00      	cmp	r3, #0
     ef6:	d000      	beq.n	efa <_i2c_master_interrupt_handler+0x126>
     ef8:	e78c      	b.n	e14 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     efa:	3303      	adds	r3, #3
     efc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     efe:	2300      	movs	r3, #0
     f00:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     f02:	3325      	adds	r3, #37	; 0x25
     f04:	2200      	movs	r2, #0
     f06:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     f08:	7aa3      	ldrb	r3, [r4, #10]
     f0a:	2b00      	cmp	r3, #0
     f0c:	d107      	bne.n	f1e <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     f0e:	2301      	movs	r3, #1
     f10:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     f12:	07f3      	lsls	r3, r6, #31
     f14:	d5a7      	bpl.n	e66 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     f16:	68e3      	ldr	r3, [r4, #12]
     f18:	0020      	movs	r0, r4
     f1a:	4798      	blx	r3
     f1c:	e7a3      	b.n	e66 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     f1e:	0020      	movs	r0, r4
     f20:	4b24      	ldr	r3, [pc, #144]	; (fb4 <_i2c_master_interrupt_handler+0x1e0>)
     f22:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f24:	686a      	ldr	r2, [r5, #4]
     f26:	23c0      	movs	r3, #192	; 0xc0
     f28:	029b      	lsls	r3, r3, #10
     f2a:	4313      	orrs	r3, r2
     f2c:	606b      	str	r3, [r5, #4]
     f2e:	e7f0      	b.n	f12 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     f30:	2324      	movs	r3, #36	; 0x24
     f32:	5ce3      	ldrb	r3, [r4, r3]
     f34:	2b00      	cmp	r3, #0
     f36:	d103      	bne.n	f40 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     f38:	0020      	movs	r0, r4
     f3a:	4b20      	ldr	r3, [pc, #128]	; (fbc <_i2c_master_interrupt_handler+0x1e8>)
     f3c:	4798      	blx	r3
     f3e:	e792      	b.n	e66 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     f40:	0020      	movs	r0, r4
     f42:	4b1d      	ldr	r3, [pc, #116]	; (fb8 <_i2c_master_interrupt_handler+0x1e4>)
     f44:	4798      	blx	r3
     f46:	e78e      	b.n	e66 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     f48:	331f      	adds	r3, #31
     f4a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     f4c:	2b01      	cmp	r3, #1
     f4e:	d196      	bne.n	e7e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     f50:	7e2b      	ldrb	r3, [r5, #24]
     f52:	079b      	lsls	r3, r3, #30
     f54:	d501      	bpl.n	f5a <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     f56:	2302      	movs	r3, #2
     f58:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     f5a:	2303      	movs	r3, #3
     f5c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     f5e:	2300      	movs	r3, #0
     f60:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     f62:	3325      	adds	r3, #37	; 0x25
     f64:	2200      	movs	r2, #0
     f66:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     f68:	07b3      	lsls	r3, r6, #30
     f6a:	d503      	bpl.n	f74 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     f6c:	2324      	movs	r3, #36	; 0x24
     f6e:	5ce3      	ldrb	r3, [r4, r3]
     f70:	2b01      	cmp	r3, #1
     f72:	d00b      	beq.n	f8c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     f74:	07f3      	lsls	r3, r6, #31
     f76:	d400      	bmi.n	f7a <_i2c_master_interrupt_handler+0x1a6>
     f78:	e781      	b.n	e7e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     f7a:	2324      	movs	r3, #36	; 0x24
     f7c:	5ce3      	ldrb	r3, [r4, r3]
     f7e:	2b00      	cmp	r3, #0
     f80:	d000      	beq.n	f84 <_i2c_master_interrupt_handler+0x1b0>
     f82:	e77c      	b.n	e7e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     f84:	68e3      	ldr	r3, [r4, #12]
     f86:	0020      	movs	r0, r4
     f88:	4798      	blx	r3
     f8a:	e778      	b.n	e7e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     f8c:	6923      	ldr	r3, [r4, #16]
     f8e:	0020      	movs	r0, r4
     f90:	4798      	blx	r3
     f92:	e774      	b.n	e7e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     f94:	0020      	movs	r0, r4
     f96:	4b07      	ldr	r3, [pc, #28]	; (fb4 <_i2c_master_interrupt_handler+0x1e0>)
     f98:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     f9a:	686a      	ldr	r2, [r5, #4]
     f9c:	23e0      	movs	r3, #224	; 0xe0
     f9e:	02db      	lsls	r3, r3, #11
     fa0:	4313      	orrs	r3, r2
     fa2:	606b      	str	r3, [r5, #4]
     fa4:	e780      	b.n	ea8 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     fa6:	6963      	ldr	r3, [r4, #20]
     fa8:	0020      	movs	r0, r4
     faa:	4798      	blx	r3
}
     fac:	e77f      	b.n	eae <_i2c_master_interrupt_handler+0xda>
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	20000274 	.word	0x20000274
     fb4:	00000c01 	.word	0x00000c01
     fb8:	00000c0d 	.word	0x00000c0d
     fbc:	00000c95 	.word	0x00000c95

00000fc0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fc2:	46de      	mov	lr, fp
     fc4:	4657      	mov	r7, sl
     fc6:	464e      	mov	r6, r9
     fc8:	4645      	mov	r5, r8
     fca:	b5e0      	push	{r5, r6, r7, lr}
     fcc:	b087      	sub	sp, #28
     fce:	4680      	mov	r8, r0
     fd0:	9104      	str	r1, [sp, #16]
     fd2:	0016      	movs	r6, r2
     fd4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     fd6:	2200      	movs	r2, #0
     fd8:	2300      	movs	r3, #0
     fda:	2100      	movs	r1, #0
     fdc:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     fde:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     fe0:	2001      	movs	r0, #1
     fe2:	0021      	movs	r1, r4
     fe4:	9600      	str	r6, [sp, #0]
     fe6:	9701      	str	r7, [sp, #4]
     fe8:	465c      	mov	r4, fp
     fea:	9403      	str	r4, [sp, #12]
     fec:	4644      	mov	r4, r8
     fee:	9405      	str	r4, [sp, #20]
     ff0:	e013      	b.n	101a <long_division+0x5a>
     ff2:	2420      	movs	r4, #32
     ff4:	1a64      	subs	r4, r4, r1
     ff6:	0005      	movs	r5, r0
     ff8:	40e5      	lsrs	r5, r4
     ffa:	46a8      	mov	r8, r5
     ffc:	e014      	b.n	1028 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     ffe:	9c00      	ldr	r4, [sp, #0]
    1000:	9d01      	ldr	r5, [sp, #4]
    1002:	1b12      	subs	r2, r2, r4
    1004:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1006:	465c      	mov	r4, fp
    1008:	464d      	mov	r5, r9
    100a:	432c      	orrs	r4, r5
    100c:	46a3      	mov	fp, r4
    100e:	9c03      	ldr	r4, [sp, #12]
    1010:	4645      	mov	r5, r8
    1012:	432c      	orrs	r4, r5
    1014:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1016:	3901      	subs	r1, #1
    1018:	d325      	bcc.n	1066 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    101a:	2420      	movs	r4, #32
    101c:	4264      	negs	r4, r4
    101e:	190c      	adds	r4, r1, r4
    1020:	d4e7      	bmi.n	ff2 <long_division+0x32>
    1022:	0005      	movs	r5, r0
    1024:	40a5      	lsls	r5, r4
    1026:	46a8      	mov	r8, r5
    1028:	0004      	movs	r4, r0
    102a:	408c      	lsls	r4, r1
    102c:	46a1      	mov	r9, r4
		r = r << 1;
    102e:	1892      	adds	r2, r2, r2
    1030:	415b      	adcs	r3, r3
    1032:	0014      	movs	r4, r2
    1034:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1036:	9e05      	ldr	r6, [sp, #20]
    1038:	464f      	mov	r7, r9
    103a:	403e      	ands	r6, r7
    103c:	46b4      	mov	ip, r6
    103e:	9e04      	ldr	r6, [sp, #16]
    1040:	4647      	mov	r7, r8
    1042:	403e      	ands	r6, r7
    1044:	46b2      	mov	sl, r6
    1046:	4666      	mov	r6, ip
    1048:	4657      	mov	r7, sl
    104a:	433e      	orrs	r6, r7
    104c:	d003      	beq.n	1056 <long_division+0x96>
			r |= 0x01;
    104e:	0006      	movs	r6, r0
    1050:	4326      	orrs	r6, r4
    1052:	0032      	movs	r2, r6
    1054:	002b      	movs	r3, r5
		if (r >= d) {
    1056:	9c00      	ldr	r4, [sp, #0]
    1058:	9d01      	ldr	r5, [sp, #4]
    105a:	429d      	cmp	r5, r3
    105c:	d8db      	bhi.n	1016 <long_division+0x56>
    105e:	d1ce      	bne.n	ffe <long_division+0x3e>
    1060:	4294      	cmp	r4, r2
    1062:	d8d8      	bhi.n	1016 <long_division+0x56>
    1064:	e7cb      	b.n	ffe <long_division+0x3e>
    1066:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1068:	4658      	mov	r0, fp
    106a:	0019      	movs	r1, r3
    106c:	b007      	add	sp, #28
    106e:	bc3c      	pop	{r2, r3, r4, r5}
    1070:	4690      	mov	r8, r2
    1072:	4699      	mov	r9, r3
    1074:	46a2      	mov	sl, r4
    1076:	46ab      	mov	fp, r5
    1078:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000107a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    107a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    107c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    107e:	2340      	movs	r3, #64	; 0x40
    1080:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1082:	4281      	cmp	r1, r0
    1084:	d202      	bcs.n	108c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1086:	0018      	movs	r0, r3
    1088:	bd10      	pop	{r4, pc}
		baud_calculated++;
    108a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    108c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    108e:	1c63      	adds	r3, r4, #1
    1090:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1092:	4288      	cmp	r0, r1
    1094:	d9f9      	bls.n	108a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1096:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1098:	2cff      	cmp	r4, #255	; 0xff
    109a:	d8f4      	bhi.n	1086 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    109c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    109e:	2300      	movs	r3, #0
    10a0:	e7f1      	b.n	1086 <_sercom_get_sync_baud_val+0xc>
	...

000010a4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    10a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10a6:	b083      	sub	sp, #12
    10a8:	000f      	movs	r7, r1
    10aa:	0016      	movs	r6, r2
    10ac:	aa08      	add	r2, sp, #32
    10ae:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    10b0:	0004      	movs	r4, r0
    10b2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    10b4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    10b6:	42bc      	cmp	r4, r7
    10b8:	d902      	bls.n	10c0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    10ba:	0010      	movs	r0, r2
    10bc:	b003      	add	sp, #12
    10be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    10c0:	2b00      	cmp	r3, #0
    10c2:	d114      	bne.n	10ee <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    10c4:	0002      	movs	r2, r0
    10c6:	0008      	movs	r0, r1
    10c8:	2100      	movs	r1, #0
    10ca:	4c19      	ldr	r4, [pc, #100]	; (1130 <_sercom_get_async_baud_val+0x8c>)
    10cc:	47a0      	blx	r4
    10ce:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    10d0:	003a      	movs	r2, r7
    10d2:	2300      	movs	r3, #0
    10d4:	2000      	movs	r0, #0
    10d6:	4c17      	ldr	r4, [pc, #92]	; (1134 <_sercom_get_async_baud_val+0x90>)
    10d8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    10da:	2200      	movs	r2, #0
    10dc:	2301      	movs	r3, #1
    10de:	1a12      	subs	r2, r2, r0
    10e0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    10e2:	0c12      	lsrs	r2, r2, #16
    10e4:	041b      	lsls	r3, r3, #16
    10e6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    10e8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    10ea:	2200      	movs	r2, #0
    10ec:	e7e5      	b.n	10ba <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    10ee:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    10f0:	2b01      	cmp	r3, #1
    10f2:	d1f9      	bne.n	10e8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    10f4:	000a      	movs	r2, r1
    10f6:	2300      	movs	r3, #0
    10f8:	2100      	movs	r1, #0
    10fa:	4c0d      	ldr	r4, [pc, #52]	; (1130 <_sercom_get_async_baud_val+0x8c>)
    10fc:	47a0      	blx	r4
    10fe:	0002      	movs	r2, r0
    1100:	000b      	movs	r3, r1
    1102:	9200      	str	r2, [sp, #0]
    1104:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1106:	0038      	movs	r0, r7
    1108:	2100      	movs	r1, #0
    110a:	4c0a      	ldr	r4, [pc, #40]	; (1134 <_sercom_get_async_baud_val+0x90>)
    110c:	47a0      	blx	r4
    110e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1110:	2380      	movs	r3, #128	; 0x80
    1112:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1114:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1116:	4298      	cmp	r0, r3
    1118:	d8cf      	bhi.n	10ba <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    111a:	0f79      	lsrs	r1, r7, #29
    111c:	00f8      	lsls	r0, r7, #3
    111e:	9a00      	ldr	r2, [sp, #0]
    1120:	9b01      	ldr	r3, [sp, #4]
    1122:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1124:	00ea      	lsls	r2, r5, #3
    1126:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1128:	b2d2      	uxtb	r2, r2
    112a:	0352      	lsls	r2, r2, #13
    112c:	432a      	orrs	r2, r5
    112e:	e7db      	b.n	10e8 <_sercom_get_async_baud_val+0x44>
    1130:	000030c5 	.word	0x000030c5
    1134:	00000fc1 	.word	0x00000fc1

00001138 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1138:	b510      	push	{r4, lr}
    113a:	b082      	sub	sp, #8
    113c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    113e:	4b0e      	ldr	r3, [pc, #56]	; (1178 <sercom_set_gclk_generator+0x40>)
    1140:	781b      	ldrb	r3, [r3, #0]
    1142:	2b00      	cmp	r3, #0
    1144:	d007      	beq.n	1156 <sercom_set_gclk_generator+0x1e>
    1146:	2900      	cmp	r1, #0
    1148:	d105      	bne.n	1156 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    114a:	4b0b      	ldr	r3, [pc, #44]	; (1178 <sercom_set_gclk_generator+0x40>)
    114c:	785b      	ldrb	r3, [r3, #1]
    114e:	4283      	cmp	r3, r0
    1150:	d010      	beq.n	1174 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1152:	201d      	movs	r0, #29
    1154:	e00c      	b.n	1170 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1156:	a901      	add	r1, sp, #4
    1158:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    115a:	2013      	movs	r0, #19
    115c:	4b07      	ldr	r3, [pc, #28]	; (117c <sercom_set_gclk_generator+0x44>)
    115e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1160:	2013      	movs	r0, #19
    1162:	4b07      	ldr	r3, [pc, #28]	; (1180 <sercom_set_gclk_generator+0x48>)
    1164:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1166:	4b04      	ldr	r3, [pc, #16]	; (1178 <sercom_set_gclk_generator+0x40>)
    1168:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    116a:	2201      	movs	r2, #1
    116c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    116e:	2000      	movs	r0, #0
}
    1170:	b002      	add	sp, #8
    1172:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1174:	2000      	movs	r0, #0
    1176:	e7fb      	b.n	1170 <sercom_set_gclk_generator+0x38>
    1178:	20000218 	.word	0x20000218
    117c:	00002275 	.word	0x00002275
    1180:	000021e9 	.word	0x000021e9

00001184 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1184:	4b40      	ldr	r3, [pc, #256]	; (1288 <_sercom_get_default_pad+0x104>)
    1186:	4298      	cmp	r0, r3
    1188:	d031      	beq.n	11ee <_sercom_get_default_pad+0x6a>
    118a:	d90a      	bls.n	11a2 <_sercom_get_default_pad+0x1e>
    118c:	4b3f      	ldr	r3, [pc, #252]	; (128c <_sercom_get_default_pad+0x108>)
    118e:	4298      	cmp	r0, r3
    1190:	d04d      	beq.n	122e <_sercom_get_default_pad+0xaa>
    1192:	4b3f      	ldr	r3, [pc, #252]	; (1290 <_sercom_get_default_pad+0x10c>)
    1194:	4298      	cmp	r0, r3
    1196:	d05a      	beq.n	124e <_sercom_get_default_pad+0xca>
    1198:	4b3e      	ldr	r3, [pc, #248]	; (1294 <_sercom_get_default_pad+0x110>)
    119a:	4298      	cmp	r0, r3
    119c:	d037      	beq.n	120e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    119e:	2000      	movs	r0, #0
}
    11a0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    11a2:	4b3d      	ldr	r3, [pc, #244]	; (1298 <_sercom_get_default_pad+0x114>)
    11a4:	4298      	cmp	r0, r3
    11a6:	d00c      	beq.n	11c2 <_sercom_get_default_pad+0x3e>
    11a8:	4b3c      	ldr	r3, [pc, #240]	; (129c <_sercom_get_default_pad+0x118>)
    11aa:	4298      	cmp	r0, r3
    11ac:	d1f7      	bne.n	119e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11ae:	2901      	cmp	r1, #1
    11b0:	d017      	beq.n	11e2 <_sercom_get_default_pad+0x5e>
    11b2:	2900      	cmp	r1, #0
    11b4:	d05d      	beq.n	1272 <_sercom_get_default_pad+0xee>
    11b6:	2902      	cmp	r1, #2
    11b8:	d015      	beq.n	11e6 <_sercom_get_default_pad+0x62>
    11ba:	2903      	cmp	r1, #3
    11bc:	d015      	beq.n	11ea <_sercom_get_default_pad+0x66>
	return 0;
    11be:	2000      	movs	r0, #0
    11c0:	e7ee      	b.n	11a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11c2:	2901      	cmp	r1, #1
    11c4:	d007      	beq.n	11d6 <_sercom_get_default_pad+0x52>
    11c6:	2900      	cmp	r1, #0
    11c8:	d051      	beq.n	126e <_sercom_get_default_pad+0xea>
    11ca:	2902      	cmp	r1, #2
    11cc:	d005      	beq.n	11da <_sercom_get_default_pad+0x56>
    11ce:	2903      	cmp	r1, #3
    11d0:	d005      	beq.n	11de <_sercom_get_default_pad+0x5a>
	return 0;
    11d2:	2000      	movs	r0, #0
    11d4:	e7e4      	b.n	11a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11d6:	4832      	ldr	r0, [pc, #200]	; (12a0 <_sercom_get_default_pad+0x11c>)
    11d8:	e7e2      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    11da:	4832      	ldr	r0, [pc, #200]	; (12a4 <_sercom_get_default_pad+0x120>)
    11dc:	e7e0      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    11de:	4832      	ldr	r0, [pc, #200]	; (12a8 <_sercom_get_default_pad+0x124>)
    11e0:	e7de      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    11e2:	4832      	ldr	r0, [pc, #200]	; (12ac <_sercom_get_default_pad+0x128>)
    11e4:	e7dc      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    11e6:	4832      	ldr	r0, [pc, #200]	; (12b0 <_sercom_get_default_pad+0x12c>)
    11e8:	e7da      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    11ea:	4832      	ldr	r0, [pc, #200]	; (12b4 <_sercom_get_default_pad+0x130>)
    11ec:	e7d8      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    11ee:	2901      	cmp	r1, #1
    11f0:	d007      	beq.n	1202 <_sercom_get_default_pad+0x7e>
    11f2:	2900      	cmp	r1, #0
    11f4:	d03f      	beq.n	1276 <_sercom_get_default_pad+0xf2>
    11f6:	2902      	cmp	r1, #2
    11f8:	d005      	beq.n	1206 <_sercom_get_default_pad+0x82>
    11fa:	2903      	cmp	r1, #3
    11fc:	d005      	beq.n	120a <_sercom_get_default_pad+0x86>
	return 0;
    11fe:	2000      	movs	r0, #0
    1200:	e7ce      	b.n	11a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1202:	482d      	ldr	r0, [pc, #180]	; (12b8 <_sercom_get_default_pad+0x134>)
    1204:	e7cc      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    1206:	482d      	ldr	r0, [pc, #180]	; (12bc <_sercom_get_default_pad+0x138>)
    1208:	e7ca      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    120a:	482d      	ldr	r0, [pc, #180]	; (12c0 <_sercom_get_default_pad+0x13c>)
    120c:	e7c8      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    120e:	2901      	cmp	r1, #1
    1210:	d007      	beq.n	1222 <_sercom_get_default_pad+0x9e>
    1212:	2900      	cmp	r1, #0
    1214:	d031      	beq.n	127a <_sercom_get_default_pad+0xf6>
    1216:	2902      	cmp	r1, #2
    1218:	d005      	beq.n	1226 <_sercom_get_default_pad+0xa2>
    121a:	2903      	cmp	r1, #3
    121c:	d005      	beq.n	122a <_sercom_get_default_pad+0xa6>
	return 0;
    121e:	2000      	movs	r0, #0
    1220:	e7be      	b.n	11a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1222:	4828      	ldr	r0, [pc, #160]	; (12c4 <_sercom_get_default_pad+0x140>)
    1224:	e7bc      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    1226:	4828      	ldr	r0, [pc, #160]	; (12c8 <_sercom_get_default_pad+0x144>)
    1228:	e7ba      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    122a:	4828      	ldr	r0, [pc, #160]	; (12cc <_sercom_get_default_pad+0x148>)
    122c:	e7b8      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    122e:	2901      	cmp	r1, #1
    1230:	d007      	beq.n	1242 <_sercom_get_default_pad+0xbe>
    1232:	2900      	cmp	r1, #0
    1234:	d023      	beq.n	127e <_sercom_get_default_pad+0xfa>
    1236:	2902      	cmp	r1, #2
    1238:	d005      	beq.n	1246 <_sercom_get_default_pad+0xc2>
    123a:	2903      	cmp	r1, #3
    123c:	d005      	beq.n	124a <_sercom_get_default_pad+0xc6>
	return 0;
    123e:	2000      	movs	r0, #0
    1240:	e7ae      	b.n	11a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1242:	4823      	ldr	r0, [pc, #140]	; (12d0 <_sercom_get_default_pad+0x14c>)
    1244:	e7ac      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    1246:	4823      	ldr	r0, [pc, #140]	; (12d4 <_sercom_get_default_pad+0x150>)
    1248:	e7aa      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    124a:	4823      	ldr	r0, [pc, #140]	; (12d8 <_sercom_get_default_pad+0x154>)
    124c:	e7a8      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    124e:	2901      	cmp	r1, #1
    1250:	d007      	beq.n	1262 <_sercom_get_default_pad+0xde>
    1252:	2900      	cmp	r1, #0
    1254:	d015      	beq.n	1282 <_sercom_get_default_pad+0xfe>
    1256:	2902      	cmp	r1, #2
    1258:	d005      	beq.n	1266 <_sercom_get_default_pad+0xe2>
    125a:	2903      	cmp	r1, #3
    125c:	d005      	beq.n	126a <_sercom_get_default_pad+0xe6>
	return 0;
    125e:	2000      	movs	r0, #0
    1260:	e79e      	b.n	11a0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1262:	481e      	ldr	r0, [pc, #120]	; (12dc <_sercom_get_default_pad+0x158>)
    1264:	e79c      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    1266:	481e      	ldr	r0, [pc, #120]	; (12e0 <_sercom_get_default_pad+0x15c>)
    1268:	e79a      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    126a:	481e      	ldr	r0, [pc, #120]	; (12e4 <_sercom_get_default_pad+0x160>)
    126c:	e798      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    126e:	481e      	ldr	r0, [pc, #120]	; (12e8 <_sercom_get_default_pad+0x164>)
    1270:	e796      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    1272:	2003      	movs	r0, #3
    1274:	e794      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    1276:	481d      	ldr	r0, [pc, #116]	; (12ec <_sercom_get_default_pad+0x168>)
    1278:	e792      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    127a:	481d      	ldr	r0, [pc, #116]	; (12f0 <_sercom_get_default_pad+0x16c>)
    127c:	e790      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    127e:	481d      	ldr	r0, [pc, #116]	; (12f4 <_sercom_get_default_pad+0x170>)
    1280:	e78e      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    1282:	481d      	ldr	r0, [pc, #116]	; (12f8 <_sercom_get_default_pad+0x174>)
    1284:	e78c      	b.n	11a0 <_sercom_get_default_pad+0x1c>
    1286:	46c0      	nop			; (mov r8, r8)
    1288:	42001000 	.word	0x42001000
    128c:	42001800 	.word	0x42001800
    1290:	42001c00 	.word	0x42001c00
    1294:	42001400 	.word	0x42001400
    1298:	42000800 	.word	0x42000800
    129c:	42000c00 	.word	0x42000c00
    12a0:	00050003 	.word	0x00050003
    12a4:	00060003 	.word	0x00060003
    12a8:	00070003 	.word	0x00070003
    12ac:	00010003 	.word	0x00010003
    12b0:	001e0003 	.word	0x001e0003
    12b4:	001f0003 	.word	0x001f0003
    12b8:	00090003 	.word	0x00090003
    12bc:	000a0003 	.word	0x000a0003
    12c0:	000b0003 	.word	0x000b0003
    12c4:	00110003 	.word	0x00110003
    12c8:	00120003 	.word	0x00120003
    12cc:	00130003 	.word	0x00130003
    12d0:	000d0003 	.word	0x000d0003
    12d4:	000e0003 	.word	0x000e0003
    12d8:	000f0003 	.word	0x000f0003
    12dc:	00170003 	.word	0x00170003
    12e0:	00180003 	.word	0x00180003
    12e4:	00190003 	.word	0x00190003
    12e8:	00040003 	.word	0x00040003
    12ec:	00080003 	.word	0x00080003
    12f0:	00100003 	.word	0x00100003
    12f4:	000c0003 	.word	0x000c0003
    12f8:	00160003 	.word	0x00160003

000012fc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    12fc:	b530      	push	{r4, r5, lr}
    12fe:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1300:	4b0b      	ldr	r3, [pc, #44]	; (1330 <_sercom_get_sercom_inst_index+0x34>)
    1302:	466a      	mov	r2, sp
    1304:	cb32      	ldmia	r3!, {r1, r4, r5}
    1306:	c232      	stmia	r2!, {r1, r4, r5}
    1308:	cb32      	ldmia	r3!, {r1, r4, r5}
    130a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    130c:	9b00      	ldr	r3, [sp, #0]
    130e:	4283      	cmp	r3, r0
    1310:	d00b      	beq.n	132a <_sercom_get_sercom_inst_index+0x2e>
    1312:	2301      	movs	r3, #1
    1314:	009a      	lsls	r2, r3, #2
    1316:	4669      	mov	r1, sp
    1318:	5852      	ldr	r2, [r2, r1]
    131a:	4282      	cmp	r2, r0
    131c:	d006      	beq.n	132c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    131e:	3301      	adds	r3, #1
    1320:	2b06      	cmp	r3, #6
    1322:	d1f7      	bne.n	1314 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1324:	2000      	movs	r0, #0
}
    1326:	b007      	add	sp, #28
    1328:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    132a:	2300      	movs	r3, #0
			return i;
    132c:	b2d8      	uxtb	r0, r3
    132e:	e7fa      	b.n	1326 <_sercom_get_sercom_inst_index+0x2a>
    1330:	00005ddc 	.word	0x00005ddc

00001334 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1334:	b5f0      	push	{r4, r5, r6, r7, lr}
    1336:	46c6      	mov	lr, r8
    1338:	b500      	push	{lr}
    133a:	000c      	movs	r4, r1
    133c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    133e:	2800      	cmp	r0, #0
    1340:	d10f      	bne.n	1362 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1342:	2a00      	cmp	r2, #0
    1344:	dd11      	ble.n	136a <_read+0x36>
    1346:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1348:	4e09      	ldr	r6, [pc, #36]	; (1370 <_read+0x3c>)
    134a:	4d0a      	ldr	r5, [pc, #40]	; (1374 <_read+0x40>)
    134c:	6830      	ldr	r0, [r6, #0]
    134e:	0021      	movs	r1, r4
    1350:	682b      	ldr	r3, [r5, #0]
    1352:	4798      	blx	r3
		ptr++;
    1354:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1356:	42bc      	cmp	r4, r7
    1358:	d1f8      	bne.n	134c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    135a:	4640      	mov	r0, r8
    135c:	bc04      	pop	{r2}
    135e:	4690      	mov	r8, r2
    1360:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1362:	2301      	movs	r3, #1
    1364:	425b      	negs	r3, r3
    1366:	4698      	mov	r8, r3
    1368:	e7f7      	b.n	135a <_read+0x26>
	for (; len > 0; --len) {
    136a:	4680      	mov	r8, r0
    136c:	e7f5      	b.n	135a <_read+0x26>
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	20000270 	.word	0x20000270
    1374:	20000268 	.word	0x20000268

00001378 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1378:	b5f0      	push	{r4, r5, r6, r7, lr}
    137a:	46c6      	mov	lr, r8
    137c:	b500      	push	{lr}
    137e:	000e      	movs	r6, r1
    1380:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1382:	3801      	subs	r0, #1
    1384:	2802      	cmp	r0, #2
    1386:	d810      	bhi.n	13aa <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1388:	2a00      	cmp	r2, #0
    138a:	d011      	beq.n	13b0 <_write+0x38>
    138c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    138e:	4b0c      	ldr	r3, [pc, #48]	; (13c0 <_write+0x48>)
    1390:	4698      	mov	r8, r3
    1392:	4f0c      	ldr	r7, [pc, #48]	; (13c4 <_write+0x4c>)
    1394:	4643      	mov	r3, r8
    1396:	6818      	ldr	r0, [r3, #0]
    1398:	5d31      	ldrb	r1, [r6, r4]
    139a:	683b      	ldr	r3, [r7, #0]
    139c:	4798      	blx	r3
    139e:	2800      	cmp	r0, #0
    13a0:	db08      	blt.n	13b4 <_write+0x3c>
			return -1;
		}
		++nChars;
    13a2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    13a4:	42a5      	cmp	r5, r4
    13a6:	d1f5      	bne.n	1394 <_write+0x1c>
    13a8:	e006      	b.n	13b8 <_write+0x40>
		return -1;
    13aa:	2401      	movs	r4, #1
    13ac:	4264      	negs	r4, r4
    13ae:	e003      	b.n	13b8 <_write+0x40>
	for (; len != 0; --len) {
    13b0:	0014      	movs	r4, r2
    13b2:	e001      	b.n	13b8 <_write+0x40>
			return -1;
    13b4:	2401      	movs	r4, #1
    13b6:	4264      	negs	r4, r4
	}
	return nChars;
}
    13b8:	0020      	movs	r0, r4
    13ba:	bc04      	pop	{r2}
    13bc:	4690      	mov	r8, r2
    13be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13c0:	20000270 	.word	0x20000270
    13c4:	2000026c 	.word	0x2000026c

000013c8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    13c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ca:	46de      	mov	lr, fp
    13cc:	4657      	mov	r7, sl
    13ce:	464e      	mov	r6, r9
    13d0:	4645      	mov	r5, r8
    13d2:	b5e0      	push	{r5, r6, r7, lr}
    13d4:	b091      	sub	sp, #68	; 0x44
    13d6:	0005      	movs	r5, r0
    13d8:	000c      	movs	r4, r1
    13da:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    13dc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13de:	0008      	movs	r0, r1
    13e0:	4bbc      	ldr	r3, [pc, #752]	; (16d4 <usart_init+0x30c>)
    13e2:	4798      	blx	r3
    13e4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    13e6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    13e8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    13ea:	07db      	lsls	r3, r3, #31
    13ec:	d506      	bpl.n	13fc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    13ee:	b011      	add	sp, #68	; 0x44
    13f0:	bc3c      	pop	{r2, r3, r4, r5}
    13f2:	4690      	mov	r8, r2
    13f4:	4699      	mov	r9, r3
    13f6:	46a2      	mov	sl, r4
    13f8:	46ab      	mov	fp, r5
    13fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    13fc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    13fe:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1400:	079b      	lsls	r3, r3, #30
    1402:	d4f4      	bmi.n	13ee <usart_init+0x26>
    1404:	49b4      	ldr	r1, [pc, #720]	; (16d8 <usart_init+0x310>)
    1406:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1408:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    140a:	2301      	movs	r3, #1
    140c:	40bb      	lsls	r3, r7
    140e:	4303      	orrs	r3, r0
    1410:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1412:	a90f      	add	r1, sp, #60	; 0x3c
    1414:	272d      	movs	r7, #45	; 0x2d
    1416:	5df3      	ldrb	r3, [r6, r7]
    1418:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    141a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    141c:	b2d3      	uxtb	r3, r2
    141e:	9302      	str	r3, [sp, #8]
    1420:	0018      	movs	r0, r3
    1422:	4bae      	ldr	r3, [pc, #696]	; (16dc <usart_init+0x314>)
    1424:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1426:	9802      	ldr	r0, [sp, #8]
    1428:	4bad      	ldr	r3, [pc, #692]	; (16e0 <usart_init+0x318>)
    142a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    142c:	5df0      	ldrb	r0, [r6, r7]
    142e:	2100      	movs	r1, #0
    1430:	4bac      	ldr	r3, [pc, #688]	; (16e4 <usart_init+0x31c>)
    1432:	4798      	blx	r3
	module->character_size = config->character_size;
    1434:	7af3      	ldrb	r3, [r6, #11]
    1436:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1438:	2324      	movs	r3, #36	; 0x24
    143a:	5cf3      	ldrb	r3, [r6, r3]
    143c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    143e:	2325      	movs	r3, #37	; 0x25
    1440:	5cf3      	ldrb	r3, [r6, r3]
    1442:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1444:	7ef3      	ldrb	r3, [r6, #27]
    1446:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1448:	7f33      	ldrb	r3, [r6, #28]
    144a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    144c:	682b      	ldr	r3, [r5, #0]
    144e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1450:	0018      	movs	r0, r3
    1452:	4ba0      	ldr	r3, [pc, #640]	; (16d4 <usart_init+0x30c>)
    1454:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1456:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1458:	2200      	movs	r2, #0
    145a:	230e      	movs	r3, #14
    145c:	a906      	add	r1, sp, #24
    145e:	468c      	mov	ip, r1
    1460:	4463      	add	r3, ip
    1462:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1464:	8a32      	ldrh	r2, [r6, #16]
    1466:	9202      	str	r2, [sp, #8]
    1468:	2380      	movs	r3, #128	; 0x80
    146a:	01db      	lsls	r3, r3, #7
    146c:	429a      	cmp	r2, r3
    146e:	d100      	bne.n	1472 <usart_init+0xaa>
    1470:	e09e      	b.n	15b0 <usart_init+0x1e8>
    1472:	d90f      	bls.n	1494 <usart_init+0xcc>
    1474:	23c0      	movs	r3, #192	; 0xc0
    1476:	01db      	lsls	r3, r3, #7
    1478:	9a02      	ldr	r2, [sp, #8]
    147a:	429a      	cmp	r2, r3
    147c:	d100      	bne.n	1480 <usart_init+0xb8>
    147e:	e092      	b.n	15a6 <usart_init+0x1de>
    1480:	2380      	movs	r3, #128	; 0x80
    1482:	021b      	lsls	r3, r3, #8
    1484:	429a      	cmp	r2, r3
    1486:	d000      	beq.n	148a <usart_init+0xc2>
    1488:	e11f      	b.n	16ca <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    148a:	2303      	movs	r3, #3
    148c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    148e:	2300      	movs	r3, #0
    1490:	9307      	str	r3, [sp, #28]
    1492:	e008      	b.n	14a6 <usart_init+0xde>
	switch (config->sample_rate) {
    1494:	2380      	movs	r3, #128	; 0x80
    1496:	019b      	lsls	r3, r3, #6
    1498:	429a      	cmp	r2, r3
    149a:	d000      	beq.n	149e <usart_init+0xd6>
    149c:	e115      	b.n	16ca <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    149e:	2310      	movs	r3, #16
    14a0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    14a2:	3b0f      	subs	r3, #15
    14a4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    14a6:	6833      	ldr	r3, [r6, #0]
    14a8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    14aa:	68f3      	ldr	r3, [r6, #12]
    14ac:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    14ae:	6973      	ldr	r3, [r6, #20]
    14b0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    14b2:	7e33      	ldrb	r3, [r6, #24]
    14b4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    14b6:	2326      	movs	r3, #38	; 0x26
    14b8:	5cf3      	ldrb	r3, [r6, r3]
    14ba:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    14bc:	6873      	ldr	r3, [r6, #4]
    14be:	4699      	mov	r9, r3
	switch (transfer_mode)
    14c0:	2b00      	cmp	r3, #0
    14c2:	d100      	bne.n	14c6 <usart_init+0xfe>
    14c4:	e0a0      	b.n	1608 <usart_init+0x240>
    14c6:	2380      	movs	r3, #128	; 0x80
    14c8:	055b      	lsls	r3, r3, #21
    14ca:	4599      	cmp	r9, r3
    14cc:	d100      	bne.n	14d0 <usart_init+0x108>
    14ce:	e084      	b.n	15da <usart_init+0x212>
	if(config->encoding_format_enable) {
    14d0:	7e73      	ldrb	r3, [r6, #25]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d002      	beq.n	14dc <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    14d6:	7eb3      	ldrb	r3, [r6, #26]
    14d8:	4642      	mov	r2, r8
    14da:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    14dc:	682a      	ldr	r2, [r5, #0]
    14de:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    14e0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    14e2:	2b00      	cmp	r3, #0
    14e4:	d1fc      	bne.n	14e0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    14e6:	330e      	adds	r3, #14
    14e8:	aa06      	add	r2, sp, #24
    14ea:	4694      	mov	ip, r2
    14ec:	4463      	add	r3, ip
    14ee:	881b      	ldrh	r3, [r3, #0]
    14f0:	4642      	mov	r2, r8
    14f2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    14f4:	9b05      	ldr	r3, [sp, #20]
    14f6:	9a03      	ldr	r2, [sp, #12]
    14f8:	4313      	orrs	r3, r2
    14fa:	9a04      	ldr	r2, [sp, #16]
    14fc:	4313      	orrs	r3, r2
    14fe:	464a      	mov	r2, r9
    1500:	4313      	orrs	r3, r2
    1502:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1504:	465b      	mov	r3, fp
    1506:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1508:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    150a:	4653      	mov	r3, sl
    150c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    150e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1510:	2327      	movs	r3, #39	; 0x27
    1512:	5cf3      	ldrb	r3, [r6, r3]
    1514:	2b00      	cmp	r3, #0
    1516:	d101      	bne.n	151c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1518:	3304      	adds	r3, #4
    151a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    151c:	7e73      	ldrb	r3, [r6, #25]
    151e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1520:	7f32      	ldrb	r2, [r6, #28]
    1522:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1524:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1526:	7f72      	ldrb	r2, [r6, #29]
    1528:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    152a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    152c:	2224      	movs	r2, #36	; 0x24
    152e:	5cb2      	ldrb	r2, [r6, r2]
    1530:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1532:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1534:	2225      	movs	r2, #37	; 0x25
    1536:	5cb2      	ldrb	r2, [r6, r2]
    1538:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    153a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    153c:	7ab1      	ldrb	r1, [r6, #10]
    153e:	7af2      	ldrb	r2, [r6, #11]
    1540:	4311      	orrs	r1, r2
    1542:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1544:	8933      	ldrh	r3, [r6, #8]
    1546:	2bff      	cmp	r3, #255	; 0xff
    1548:	d100      	bne.n	154c <usart_init+0x184>
    154a:	e081      	b.n	1650 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    154c:	2280      	movs	r2, #128	; 0x80
    154e:	0452      	lsls	r2, r2, #17
    1550:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1552:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1554:	232c      	movs	r3, #44	; 0x2c
    1556:	5cf3      	ldrb	r3, [r6, r3]
    1558:	2b00      	cmp	r3, #0
    155a:	d103      	bne.n	1564 <usart_init+0x19c>
    155c:	4b62      	ldr	r3, [pc, #392]	; (16e8 <usart_init+0x320>)
    155e:	789b      	ldrb	r3, [r3, #2]
    1560:	079b      	lsls	r3, r3, #30
    1562:	d501      	bpl.n	1568 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1564:	2380      	movs	r3, #128	; 0x80
    1566:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1568:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    156a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    156c:	2b00      	cmp	r3, #0
    156e:	d1fc      	bne.n	156a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1570:	4643      	mov	r3, r8
    1572:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1574:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1576:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1578:	2b00      	cmp	r3, #0
    157a:	d1fc      	bne.n	1576 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    157c:	4643      	mov	r3, r8
    157e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1580:	ab0e      	add	r3, sp, #56	; 0x38
    1582:	2280      	movs	r2, #128	; 0x80
    1584:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1586:	2200      	movs	r2, #0
    1588:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    158a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    158c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    158e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1590:	930a      	str	r3, [sp, #40]	; 0x28
    1592:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1594:	930b      	str	r3, [sp, #44]	; 0x2c
    1596:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1598:	930c      	str	r3, [sp, #48]	; 0x30
    159a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    159c:	9302      	str	r3, [sp, #8]
    159e:	930d      	str	r3, [sp, #52]	; 0x34
    15a0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    15a2:	ae0a      	add	r6, sp, #40	; 0x28
    15a4:	e063      	b.n	166e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    15a6:	2308      	movs	r3, #8
    15a8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    15aa:	3b07      	subs	r3, #7
    15ac:	9307      	str	r3, [sp, #28]
    15ae:	e77a      	b.n	14a6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    15b0:	6833      	ldr	r3, [r6, #0]
    15b2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    15b4:	68f3      	ldr	r3, [r6, #12]
    15b6:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    15b8:	6973      	ldr	r3, [r6, #20]
    15ba:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    15bc:	7e33      	ldrb	r3, [r6, #24]
    15be:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    15c0:	2326      	movs	r3, #38	; 0x26
    15c2:	5cf3      	ldrb	r3, [r6, r3]
    15c4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    15c6:	6873      	ldr	r3, [r6, #4]
    15c8:	4699      	mov	r9, r3
	switch (transfer_mode)
    15ca:	2b00      	cmp	r3, #0
    15cc:	d018      	beq.n	1600 <usart_init+0x238>
    15ce:	2380      	movs	r3, #128	; 0x80
    15d0:	055b      	lsls	r3, r3, #21
    15d2:	4599      	cmp	r9, r3
    15d4:	d001      	beq.n	15da <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    15d6:	2000      	movs	r0, #0
    15d8:	e025      	b.n	1626 <usart_init+0x25e>
			if (!config->use_external_clock) {
    15da:	2327      	movs	r3, #39	; 0x27
    15dc:	5cf3      	ldrb	r3, [r6, r3]
    15de:	2b00      	cmp	r3, #0
    15e0:	d000      	beq.n	15e4 <usart_init+0x21c>
    15e2:	e775      	b.n	14d0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    15e4:	6a33      	ldr	r3, [r6, #32]
    15e6:	001f      	movs	r7, r3
    15e8:	b2c0      	uxtb	r0, r0
    15ea:	4b40      	ldr	r3, [pc, #256]	; (16ec <usart_init+0x324>)
    15ec:	4798      	blx	r3
    15ee:	0001      	movs	r1, r0
    15f0:	220e      	movs	r2, #14
    15f2:	ab06      	add	r3, sp, #24
    15f4:	469c      	mov	ip, r3
    15f6:	4462      	add	r2, ip
    15f8:	0038      	movs	r0, r7
    15fa:	4b3d      	ldr	r3, [pc, #244]	; (16f0 <usart_init+0x328>)
    15fc:	4798      	blx	r3
    15fe:	e012      	b.n	1626 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1600:	2308      	movs	r3, #8
    1602:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1604:	2300      	movs	r3, #0
    1606:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1608:	2327      	movs	r3, #39	; 0x27
    160a:	5cf3      	ldrb	r3, [r6, r3]
    160c:	2b00      	cmp	r3, #0
    160e:	d00e      	beq.n	162e <usart_init+0x266>
				status_code =
    1610:	9b06      	ldr	r3, [sp, #24]
    1612:	9300      	str	r3, [sp, #0]
    1614:	9b07      	ldr	r3, [sp, #28]
    1616:	220e      	movs	r2, #14
    1618:	a906      	add	r1, sp, #24
    161a:	468c      	mov	ip, r1
    161c:	4462      	add	r2, ip
    161e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1620:	6a30      	ldr	r0, [r6, #32]
    1622:	4f34      	ldr	r7, [pc, #208]	; (16f4 <usart_init+0x32c>)
    1624:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1626:	2800      	cmp	r0, #0
    1628:	d000      	beq.n	162c <usart_init+0x264>
    162a:	e6e0      	b.n	13ee <usart_init+0x26>
    162c:	e750      	b.n	14d0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    162e:	6a33      	ldr	r3, [r6, #32]
    1630:	001f      	movs	r7, r3
    1632:	b2c0      	uxtb	r0, r0
    1634:	4b2d      	ldr	r3, [pc, #180]	; (16ec <usart_init+0x324>)
    1636:	4798      	blx	r3
    1638:	0001      	movs	r1, r0
				status_code =
    163a:	9b06      	ldr	r3, [sp, #24]
    163c:	9300      	str	r3, [sp, #0]
    163e:	9b07      	ldr	r3, [sp, #28]
    1640:	220e      	movs	r2, #14
    1642:	a806      	add	r0, sp, #24
    1644:	4684      	mov	ip, r0
    1646:	4462      	add	r2, ip
    1648:	0038      	movs	r0, r7
    164a:	4f2a      	ldr	r7, [pc, #168]	; (16f4 <usart_init+0x32c>)
    164c:	47b8      	blx	r7
    164e:	e7ea      	b.n	1626 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1650:	7ef3      	ldrb	r3, [r6, #27]
    1652:	2b00      	cmp	r3, #0
    1654:	d100      	bne.n	1658 <usart_init+0x290>
    1656:	e77d      	b.n	1554 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1658:	2380      	movs	r3, #128	; 0x80
    165a:	04db      	lsls	r3, r3, #19
    165c:	431f      	orrs	r7, r3
    165e:	e779      	b.n	1554 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1660:	0020      	movs	r0, r4
    1662:	4b25      	ldr	r3, [pc, #148]	; (16f8 <usart_init+0x330>)
    1664:	4798      	blx	r3
    1666:	e007      	b.n	1678 <usart_init+0x2b0>
    1668:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    166a:	2f04      	cmp	r7, #4
    166c:	d00d      	beq.n	168a <usart_init+0x2c2>
    166e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1670:	00bb      	lsls	r3, r7, #2
    1672:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1674:	2800      	cmp	r0, #0
    1676:	d0f3      	beq.n	1660 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1678:	1c43      	adds	r3, r0, #1
    167a:	d0f5      	beq.n	1668 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    167c:	a90e      	add	r1, sp, #56	; 0x38
    167e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1680:	0c00      	lsrs	r0, r0, #16
    1682:	b2c0      	uxtb	r0, r0
    1684:	4b1d      	ldr	r3, [pc, #116]	; (16fc <usart_init+0x334>)
    1686:	4798      	blx	r3
    1688:	e7ee      	b.n	1668 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    168a:	2300      	movs	r3, #0
    168c:	60eb      	str	r3, [r5, #12]
    168e:	612b      	str	r3, [r5, #16]
    1690:	616b      	str	r3, [r5, #20]
    1692:	61ab      	str	r3, [r5, #24]
    1694:	61eb      	str	r3, [r5, #28]
    1696:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1698:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    169a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    169c:	2200      	movs	r2, #0
    169e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    16a0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    16a2:	3330      	adds	r3, #48	; 0x30
    16a4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    16a6:	3301      	adds	r3, #1
    16a8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    16aa:	3301      	adds	r3, #1
    16ac:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    16ae:	3301      	adds	r3, #1
    16b0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    16b2:	6828      	ldr	r0, [r5, #0]
    16b4:	4b07      	ldr	r3, [pc, #28]	; (16d4 <usart_init+0x30c>)
    16b6:	4798      	blx	r3
    16b8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    16ba:	4911      	ldr	r1, [pc, #68]	; (1700 <usart_init+0x338>)
    16bc:	4b11      	ldr	r3, [pc, #68]	; (1704 <usart_init+0x33c>)
    16be:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    16c0:	00a4      	lsls	r4, r4, #2
    16c2:	4b11      	ldr	r3, [pc, #68]	; (1708 <usart_init+0x340>)
    16c4:	50e5      	str	r5, [r4, r3]
	return status_code;
    16c6:	2000      	movs	r0, #0
    16c8:	e691      	b.n	13ee <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    16ca:	2310      	movs	r3, #16
    16cc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    16ce:	2300      	movs	r3, #0
    16d0:	9307      	str	r3, [sp, #28]
    16d2:	e6e8      	b.n	14a6 <usart_init+0xde>
    16d4:	000012fd 	.word	0x000012fd
    16d8:	40000400 	.word	0x40000400
    16dc:	00002275 	.word	0x00002275
    16e0:	000021e9 	.word	0x000021e9
    16e4:	00001139 	.word	0x00001139
    16e8:	41002000 	.word	0x41002000
    16ec:	00002291 	.word	0x00002291
    16f0:	0000107b 	.word	0x0000107b
    16f4:	000010a5 	.word	0x000010a5
    16f8:	00001185 	.word	0x00001185
    16fc:	0000236d 	.word	0x0000236d
    1700:	00001901 	.word	0x00001901
    1704:	00001a99 	.word	0x00001a99
    1708:	20000274 	.word	0x20000274

0000170c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    170c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    170e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1710:	2a00      	cmp	r2, #0
    1712:	d101      	bne.n	1718 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1714:	0018      	movs	r0, r3
    1716:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1718:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    171a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    171c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    171e:	2a00      	cmp	r2, #0
    1720:	d1f8      	bne.n	1714 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1722:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1724:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1726:	2a00      	cmp	r2, #0
    1728:	d1fc      	bne.n	1724 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    172a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    172c:	2102      	movs	r1, #2
    172e:	7e1a      	ldrb	r2, [r3, #24]
    1730:	420a      	tst	r2, r1
    1732:	d0fc      	beq.n	172e <usart_write_wait+0x22>
	return STATUS_OK;
    1734:	2300      	movs	r3, #0
    1736:	e7ed      	b.n	1714 <usart_write_wait+0x8>

00001738 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1738:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    173a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    173c:	2a00      	cmp	r2, #0
    173e:	d101      	bne.n	1744 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1740:	0018      	movs	r0, r3
    1742:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1744:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1746:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1748:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    174a:	2a00      	cmp	r2, #0
    174c:	d1f8      	bne.n	1740 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    174e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1750:	7e10      	ldrb	r0, [r2, #24]
    1752:	0740      	lsls	r0, r0, #29
    1754:	d5f4      	bpl.n	1740 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1756:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1758:	2b00      	cmp	r3, #0
    175a:	d1fc      	bne.n	1756 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    175c:	8b53      	ldrh	r3, [r2, #26]
    175e:	b2db      	uxtb	r3, r3
	if (error_code) {
    1760:	0698      	lsls	r0, r3, #26
    1762:	d01d      	beq.n	17a0 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1764:	0798      	lsls	r0, r3, #30
    1766:	d503      	bpl.n	1770 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1768:	2302      	movs	r3, #2
    176a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    176c:	3318      	adds	r3, #24
    176e:	e7e7      	b.n	1740 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1770:	0758      	lsls	r0, r3, #29
    1772:	d503      	bpl.n	177c <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1774:	2304      	movs	r3, #4
    1776:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1778:	331a      	adds	r3, #26
    177a:	e7e1      	b.n	1740 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    177c:	07d8      	lsls	r0, r3, #31
    177e:	d503      	bpl.n	1788 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1780:	2301      	movs	r3, #1
    1782:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1784:	3312      	adds	r3, #18
    1786:	e7db      	b.n	1740 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1788:	06d8      	lsls	r0, r3, #27
    178a:	d503      	bpl.n	1794 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    178c:	2310      	movs	r3, #16
    178e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1790:	3332      	adds	r3, #50	; 0x32
    1792:	e7d5      	b.n	1740 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1794:	069b      	lsls	r3, r3, #26
    1796:	d503      	bpl.n	17a0 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1798:	2320      	movs	r3, #32
    179a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    179c:	3321      	adds	r3, #33	; 0x21
    179e:	e7cf      	b.n	1740 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    17a0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    17a2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    17a4:	2300      	movs	r3, #0
    17a6:	e7cb      	b.n	1740 <usart_read_wait+0x8>

000017a8 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    17a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17aa:	46ce      	mov	lr, r9
    17ac:	4647      	mov	r7, r8
    17ae:	b580      	push	{r7, lr}
    17b0:	b083      	sub	sp, #12
    17b2:	0005      	movs	r5, r0
    17b4:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    17b6:	2017      	movs	r0, #23
	if (length == 0) {
    17b8:	2a00      	cmp	r2, #0
    17ba:	d104      	bne.n	17c6 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    17bc:	b003      	add	sp, #12
    17be:	bc0c      	pop	{r2, r3}
    17c0:	4690      	mov	r8, r2
    17c2:	4699      	mov	r9, r3
    17c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    17c6:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    17c8:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    17ca:	2b00      	cmp	r3, #0
    17cc:	d0f6      	beq.n	17bc <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    17ce:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    17d0:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    17d2:	2b00      	cmp	r3, #0
    17d4:	d1fc      	bne.n	17d0 <usart_write_buffer_wait+0x28>
	while (length--) {
    17d6:	3a01      	subs	r2, #1
    17d8:	b293      	uxth	r3, r2
    17da:	4699      	mov	r9, r3
    17dc:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    17de:	2701      	movs	r7, #1
	while (length--) {
    17e0:	4b1f      	ldr	r3, [pc, #124]	; (1860 <usart_write_buffer_wait+0xb8>)
    17e2:	4698      	mov	r8, r3
    17e4:	e011      	b.n	180a <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    17e6:	1c73      	adds	r3, r6, #1
    17e8:	b29b      	uxth	r3, r3
    17ea:	9a01      	ldr	r2, [sp, #4]
    17ec:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    17ee:	796a      	ldrb	r2, [r5, #5]
    17f0:	2a01      	cmp	r2, #1
    17f2:	d017      	beq.n	1824 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    17f4:	b289      	uxth	r1, r1
    17f6:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    17f8:	0028      	movs	r0, r5
    17fa:	4b1a      	ldr	r3, [pc, #104]	; (1864 <usart_write_buffer_wait+0xbc>)
    17fc:	4798      	blx	r3
	while (length--) {
    17fe:	464b      	mov	r3, r9
    1800:	3b01      	subs	r3, #1
    1802:	b29b      	uxth	r3, r3
    1804:	4699      	mov	r9, r3
    1806:	4543      	cmp	r3, r8
    1808:	d013      	beq.n	1832 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    180a:	7e23      	ldrb	r3, [r4, #24]
    180c:	423b      	tst	r3, r7
    180e:	d1ea      	bne.n	17e6 <usart_write_buffer_wait+0x3e>
    1810:	4b13      	ldr	r3, [pc, #76]	; (1860 <usart_write_buffer_wait+0xb8>)
    1812:	7e22      	ldrb	r2, [r4, #24]
    1814:	423a      	tst	r2, r7
    1816:	d1e6      	bne.n	17e6 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    1818:	2b01      	cmp	r3, #1
    181a:	d019      	beq.n	1850 <usart_write_buffer_wait+0xa8>
    181c:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    181e:	2b00      	cmp	r3, #0
    1820:	d1f7      	bne.n	1812 <usart_write_buffer_wait+0x6a>
    1822:	e7e0      	b.n	17e6 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1824:	3602      	adds	r6, #2
    1826:	b2b6      	uxth	r6, r6
    1828:	9a01      	ldr	r2, [sp, #4]
    182a:	5cd3      	ldrb	r3, [r2, r3]
    182c:	021b      	lsls	r3, r3, #8
    182e:	4319      	orrs	r1, r3
    1830:	e7e2      	b.n	17f8 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1832:	7e23      	ldrb	r3, [r4, #24]
    1834:	079b      	lsls	r3, r3, #30
    1836:	d40d      	bmi.n	1854 <usart_write_buffer_wait+0xac>
    1838:	4b09      	ldr	r3, [pc, #36]	; (1860 <usart_write_buffer_wait+0xb8>)
    183a:	2102      	movs	r1, #2
    183c:	7e22      	ldrb	r2, [r4, #24]
    183e:	420a      	tst	r2, r1
    1840:	d10a      	bne.n	1858 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    1842:	2b01      	cmp	r3, #1
    1844:	d00a      	beq.n	185c <usart_write_buffer_wait+0xb4>
    1846:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1848:	2b00      	cmp	r3, #0
    184a:	d1f7      	bne.n	183c <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    184c:	2000      	movs	r0, #0
    184e:	e7b5      	b.n	17bc <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    1850:	2012      	movs	r0, #18
    1852:	e7b3      	b.n	17bc <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    1854:	2000      	movs	r0, #0
    1856:	e7b1      	b.n	17bc <usart_write_buffer_wait+0x14>
    1858:	2000      	movs	r0, #0
    185a:	e7af      	b.n	17bc <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    185c:	2012      	movs	r0, #18
    185e:	e7ad      	b.n	17bc <usart_write_buffer_wait+0x14>
    1860:	0000ffff 	.word	0x0000ffff
    1864:	0000170d 	.word	0x0000170d

00001868 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1868:	b5f0      	push	{r4, r5, r6, r7, lr}
    186a:	46d6      	mov	lr, sl
    186c:	b500      	push	{lr}
    186e:	b084      	sub	sp, #16
    1870:	0004      	movs	r4, r0
    1872:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1874:	2017      	movs	r0, #23
	if (length == 0) {
    1876:	2a00      	cmp	r2, #0
    1878:	d103      	bne.n	1882 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    187a:	b004      	add	sp, #16
    187c:	bc04      	pop	{r2}
    187e:	4692      	mov	sl, r2
    1880:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    1882:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    1884:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    1886:	2b00      	cmp	r3, #0
    1888:	d0f7      	beq.n	187a <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    188a:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    188c:	3a01      	subs	r2, #1
    188e:	b293      	uxth	r3, r2
    1890:	469a      	mov	sl, r3
    1892:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1894:	2704      	movs	r7, #4
    1896:	e019      	b.n	18cc <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    1898:	2300      	movs	r3, #0
    189a:	aa02      	add	r2, sp, #8
    189c:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    189e:	1d91      	adds	r1, r2, #6
    18a0:	0020      	movs	r0, r4
    18a2:	4b15      	ldr	r3, [pc, #84]	; (18f8 <usart_read_buffer_wait+0x90>)
    18a4:	4798      	blx	r3
		if (retval != STATUS_OK) {
    18a6:	2800      	cmp	r0, #0
    18a8:	d1e7      	bne.n	187a <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    18aa:	1c69      	adds	r1, r5, #1
    18ac:	b289      	uxth	r1, r1
    18ae:	ab02      	add	r3, sp, #8
    18b0:	88db      	ldrh	r3, [r3, #6]
    18b2:	9a01      	ldr	r2, [sp, #4]
    18b4:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18b6:	7962      	ldrb	r2, [r4, #5]
    18b8:	2a01      	cmp	r2, #1
    18ba:	d014      	beq.n	18e6 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    18bc:	000d      	movs	r5, r1
	while (length--) {
    18be:	4653      	mov	r3, sl
    18c0:	3b01      	subs	r3, #1
    18c2:	b29b      	uxth	r3, r3
    18c4:	469a      	mov	sl, r3
    18c6:	4b0d      	ldr	r3, [pc, #52]	; (18fc <usart_read_buffer_wait+0x94>)
    18c8:	459a      	cmp	sl, r3
    18ca:	d0d6      	beq.n	187a <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    18cc:	7e33      	ldrb	r3, [r6, #24]
    18ce:	423b      	tst	r3, r7
    18d0:	d1e2      	bne.n	1898 <usart_read_buffer_wait+0x30>
    18d2:	4b0a      	ldr	r3, [pc, #40]	; (18fc <usart_read_buffer_wait+0x94>)
    18d4:	7e32      	ldrb	r2, [r6, #24]
    18d6:	423a      	tst	r2, r7
    18d8:	d1de      	bne.n	1898 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    18da:	2b01      	cmp	r3, #1
    18dc:	d009      	beq.n	18f2 <usart_read_buffer_wait+0x8a>
    18de:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    18e0:	2b00      	cmp	r3, #0
    18e2:	d1f7      	bne.n	18d4 <usart_read_buffer_wait+0x6c>
    18e4:	e7d8      	b.n	1898 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    18e6:	3502      	adds	r5, #2
    18e8:	b2ad      	uxth	r5, r5
    18ea:	0a1b      	lsrs	r3, r3, #8
    18ec:	9a01      	ldr	r2, [sp, #4]
    18ee:	5453      	strb	r3, [r2, r1]
    18f0:	e7e5      	b.n	18be <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    18f2:	2012      	movs	r0, #18
    18f4:	e7c1      	b.n	187a <usart_read_buffer_wait+0x12>
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	00001739 	.word	0x00001739
    18fc:	0000ffff 	.word	0x0000ffff

00001900 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1902:	0080      	lsls	r0, r0, #2
    1904:	4b62      	ldr	r3, [pc, #392]	; (1a90 <_usart_interrupt_handler+0x190>)
    1906:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1908:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    190a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    190c:	2b00      	cmp	r3, #0
    190e:	d1fc      	bne.n	190a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1910:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1912:	7da6      	ldrb	r6, [r4, #22]
    1914:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1916:	2330      	movs	r3, #48	; 0x30
    1918:	5ceb      	ldrb	r3, [r5, r3]
    191a:	2231      	movs	r2, #49	; 0x31
    191c:	5caf      	ldrb	r7, [r5, r2]
    191e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1920:	07f3      	lsls	r3, r6, #31
    1922:	d522      	bpl.n	196a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1924:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1926:	b29b      	uxth	r3, r3
    1928:	2b00      	cmp	r3, #0
    192a:	d01c      	beq.n	1966 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    192c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    192e:	7813      	ldrb	r3, [r2, #0]
    1930:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1932:	1c51      	adds	r1, r2, #1
    1934:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1936:	7969      	ldrb	r1, [r5, #5]
    1938:	2901      	cmp	r1, #1
    193a:	d00e      	beq.n	195a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    193c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    193e:	05db      	lsls	r3, r3, #23
    1940:	0ddb      	lsrs	r3, r3, #23
    1942:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1944:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1946:	3b01      	subs	r3, #1
    1948:	b29b      	uxth	r3, r3
    194a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    194c:	2b00      	cmp	r3, #0
    194e:	d10c      	bne.n	196a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1950:	3301      	adds	r3, #1
    1952:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1954:	3301      	adds	r3, #1
    1956:	75a3      	strb	r3, [r4, #22]
    1958:	e007      	b.n	196a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    195a:	7851      	ldrb	r1, [r2, #1]
    195c:	0209      	lsls	r1, r1, #8
    195e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1960:	3202      	adds	r2, #2
    1962:	62aa      	str	r2, [r5, #40]	; 0x28
    1964:	e7eb      	b.n	193e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1966:	2301      	movs	r3, #1
    1968:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    196a:	07b3      	lsls	r3, r6, #30
    196c:	d506      	bpl.n	197c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    196e:	2302      	movs	r3, #2
    1970:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1972:	2200      	movs	r2, #0
    1974:	3331      	adds	r3, #49	; 0x31
    1976:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1978:	07fb      	lsls	r3, r7, #31
    197a:	d41a      	bmi.n	19b2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    197c:	0773      	lsls	r3, r6, #29
    197e:	d565      	bpl.n	1a4c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1980:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1982:	b29b      	uxth	r3, r3
    1984:	2b00      	cmp	r3, #0
    1986:	d05f      	beq.n	1a48 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1988:	8b63      	ldrh	r3, [r4, #26]
    198a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    198c:	071a      	lsls	r2, r3, #28
    198e:	d414      	bmi.n	19ba <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1990:	223f      	movs	r2, #63	; 0x3f
    1992:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1994:	2b00      	cmp	r3, #0
    1996:	d034      	beq.n	1a02 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1998:	079a      	lsls	r2, r3, #30
    199a:	d511      	bpl.n	19c0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    199c:	221a      	movs	r2, #26
    199e:	2332      	movs	r3, #50	; 0x32
    19a0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    19a2:	3b30      	subs	r3, #48	; 0x30
    19a4:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    19a6:	077b      	lsls	r3, r7, #29
    19a8:	d550      	bpl.n	1a4c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    19aa:	0028      	movs	r0, r5
    19ac:	696b      	ldr	r3, [r5, #20]
    19ae:	4798      	blx	r3
    19b0:	e04c      	b.n	1a4c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    19b2:	0028      	movs	r0, r5
    19b4:	68eb      	ldr	r3, [r5, #12]
    19b6:	4798      	blx	r3
    19b8:	e7e0      	b.n	197c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    19ba:	2237      	movs	r2, #55	; 0x37
    19bc:	4013      	ands	r3, r2
    19be:	e7e9      	b.n	1994 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    19c0:	075a      	lsls	r2, r3, #29
    19c2:	d505      	bpl.n	19d0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    19c4:	221e      	movs	r2, #30
    19c6:	2332      	movs	r3, #50	; 0x32
    19c8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    19ca:	3b2e      	subs	r3, #46	; 0x2e
    19cc:	8363      	strh	r3, [r4, #26]
    19ce:	e7ea      	b.n	19a6 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    19d0:	07da      	lsls	r2, r3, #31
    19d2:	d505      	bpl.n	19e0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    19d4:	2213      	movs	r2, #19
    19d6:	2332      	movs	r3, #50	; 0x32
    19d8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    19da:	3b31      	subs	r3, #49	; 0x31
    19dc:	8363      	strh	r3, [r4, #26]
    19de:	e7e2      	b.n	19a6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    19e0:	06da      	lsls	r2, r3, #27
    19e2:	d505      	bpl.n	19f0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    19e4:	2242      	movs	r2, #66	; 0x42
    19e6:	2332      	movs	r3, #50	; 0x32
    19e8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    19ea:	3b22      	subs	r3, #34	; 0x22
    19ec:	8363      	strh	r3, [r4, #26]
    19ee:	e7da      	b.n	19a6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    19f0:	2220      	movs	r2, #32
    19f2:	421a      	tst	r2, r3
    19f4:	d0d7      	beq.n	19a6 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    19f6:	3221      	adds	r2, #33	; 0x21
    19f8:	2332      	movs	r3, #50	; 0x32
    19fa:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    19fc:	3b12      	subs	r3, #18
    19fe:	8363      	strh	r3, [r4, #26]
    1a00:	e7d1      	b.n	19a6 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1a02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1a04:	05db      	lsls	r3, r3, #23
    1a06:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1a08:	b2da      	uxtb	r2, r3
    1a0a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1a0c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1a0e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1a10:	1c51      	adds	r1, r2, #1
    1a12:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a14:	7969      	ldrb	r1, [r5, #5]
    1a16:	2901      	cmp	r1, #1
    1a18:	d010      	beq.n	1a3c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1a1a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1a1c:	3b01      	subs	r3, #1
    1a1e:	b29b      	uxth	r3, r3
    1a20:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1a22:	2b00      	cmp	r3, #0
    1a24:	d112      	bne.n	1a4c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a26:	3304      	adds	r3, #4
    1a28:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1a2a:	2200      	movs	r2, #0
    1a2c:	332e      	adds	r3, #46	; 0x2e
    1a2e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1a30:	07bb      	lsls	r3, r7, #30
    1a32:	d50b      	bpl.n	1a4c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1a34:	0028      	movs	r0, r5
    1a36:	692b      	ldr	r3, [r5, #16]
    1a38:	4798      	blx	r3
    1a3a:	e007      	b.n	1a4c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1a3c:	0a1b      	lsrs	r3, r3, #8
    1a3e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1a40:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a42:	3301      	adds	r3, #1
    1a44:	626b      	str	r3, [r5, #36]	; 0x24
    1a46:	e7e8      	b.n	1a1a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a48:	2304      	movs	r3, #4
    1a4a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1a4c:	06f3      	lsls	r3, r6, #27
    1a4e:	d504      	bpl.n	1a5a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1a50:	2310      	movs	r3, #16
    1a52:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1a54:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1a56:	06fb      	lsls	r3, r7, #27
    1a58:	d40e      	bmi.n	1a78 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1a5a:	06b3      	lsls	r3, r6, #26
    1a5c:	d504      	bpl.n	1a68 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1a5e:	2320      	movs	r3, #32
    1a60:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1a62:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1a64:	073b      	lsls	r3, r7, #28
    1a66:	d40b      	bmi.n	1a80 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1a68:	0733      	lsls	r3, r6, #28
    1a6a:	d504      	bpl.n	1a76 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1a6c:	2308      	movs	r3, #8
    1a6e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1a70:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1a72:	06bb      	lsls	r3, r7, #26
    1a74:	d408      	bmi.n	1a88 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1a78:	0028      	movs	r0, r5
    1a7a:	69eb      	ldr	r3, [r5, #28]
    1a7c:	4798      	blx	r3
    1a7e:	e7ec      	b.n	1a5a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1a80:	0028      	movs	r0, r5
    1a82:	69ab      	ldr	r3, [r5, #24]
    1a84:	4798      	blx	r3
    1a86:	e7ef      	b.n	1a68 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1a88:	6a2b      	ldr	r3, [r5, #32]
    1a8a:	0028      	movs	r0, r5
    1a8c:	4798      	blx	r3
}
    1a8e:	e7f2      	b.n	1a76 <_usart_interrupt_handler+0x176>
    1a90:	20000274 	.word	0x20000274

00001a94 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1a94:	4770      	bx	lr
	...

00001a98 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1a98:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1a9a:	4b0a      	ldr	r3, [pc, #40]	; (1ac4 <_sercom_set_handler+0x2c>)
    1a9c:	781b      	ldrb	r3, [r3, #0]
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d10c      	bne.n	1abc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1aa2:	4f09      	ldr	r7, [pc, #36]	; (1ac8 <_sercom_set_handler+0x30>)
    1aa4:	4e09      	ldr	r6, [pc, #36]	; (1acc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1aa6:	4d0a      	ldr	r5, [pc, #40]	; (1ad0 <_sercom_set_handler+0x38>)
    1aa8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1aaa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1aac:	195a      	adds	r2, r3, r5
    1aae:	6014      	str	r4, [r2, #0]
    1ab0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1ab2:	2b18      	cmp	r3, #24
    1ab4:	d1f9      	bne.n	1aaa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1ab6:	2201      	movs	r2, #1
    1ab8:	4b02      	ldr	r3, [pc, #8]	; (1ac4 <_sercom_set_handler+0x2c>)
    1aba:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1abc:	0080      	lsls	r0, r0, #2
    1abe:	4b02      	ldr	r3, [pc, #8]	; (1ac8 <_sercom_set_handler+0x30>)
    1ac0:	50c1      	str	r1, [r0, r3]
}
    1ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ac4:	2000021a 	.word	0x2000021a
    1ac8:	2000021c 	.word	0x2000021c
    1acc:	00001a95 	.word	0x00001a95
    1ad0:	20000274 	.word	0x20000274

00001ad4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1ad4:	b500      	push	{lr}
    1ad6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1ad8:	2309      	movs	r3, #9
    1ada:	466a      	mov	r2, sp
    1adc:	7013      	strb	r3, [r2, #0]
    1ade:	3301      	adds	r3, #1
    1ae0:	7053      	strb	r3, [r2, #1]
    1ae2:	3301      	adds	r3, #1
    1ae4:	7093      	strb	r3, [r2, #2]
    1ae6:	3301      	adds	r3, #1
    1ae8:	70d3      	strb	r3, [r2, #3]
    1aea:	3301      	adds	r3, #1
    1aec:	7113      	strb	r3, [r2, #4]
    1aee:	3301      	adds	r3, #1
    1af0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1af2:	4b03      	ldr	r3, [pc, #12]	; (1b00 <_sercom_get_interrupt_vector+0x2c>)
    1af4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1af6:	466b      	mov	r3, sp
    1af8:	5618      	ldrsb	r0, [r3, r0]
}
    1afa:	b003      	add	sp, #12
    1afc:	bd00      	pop	{pc}
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	000012fd 	.word	0x000012fd

00001b04 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1b04:	b510      	push	{r4, lr}
    1b06:	4b02      	ldr	r3, [pc, #8]	; (1b10 <SERCOM0_Handler+0xc>)
    1b08:	681b      	ldr	r3, [r3, #0]
    1b0a:	2000      	movs	r0, #0
    1b0c:	4798      	blx	r3
    1b0e:	bd10      	pop	{r4, pc}
    1b10:	2000021c 	.word	0x2000021c

00001b14 <SERCOM1_Handler>:
    1b14:	b510      	push	{r4, lr}
    1b16:	4b02      	ldr	r3, [pc, #8]	; (1b20 <SERCOM1_Handler+0xc>)
    1b18:	685b      	ldr	r3, [r3, #4]
    1b1a:	2001      	movs	r0, #1
    1b1c:	4798      	blx	r3
    1b1e:	bd10      	pop	{r4, pc}
    1b20:	2000021c 	.word	0x2000021c

00001b24 <SERCOM2_Handler>:
    1b24:	b510      	push	{r4, lr}
    1b26:	4b02      	ldr	r3, [pc, #8]	; (1b30 <SERCOM2_Handler+0xc>)
    1b28:	689b      	ldr	r3, [r3, #8]
    1b2a:	2002      	movs	r0, #2
    1b2c:	4798      	blx	r3
    1b2e:	bd10      	pop	{r4, pc}
    1b30:	2000021c 	.word	0x2000021c

00001b34 <SERCOM3_Handler>:
    1b34:	b510      	push	{r4, lr}
    1b36:	4b02      	ldr	r3, [pc, #8]	; (1b40 <SERCOM3_Handler+0xc>)
    1b38:	68db      	ldr	r3, [r3, #12]
    1b3a:	2003      	movs	r0, #3
    1b3c:	4798      	blx	r3
    1b3e:	bd10      	pop	{r4, pc}
    1b40:	2000021c 	.word	0x2000021c

00001b44 <SERCOM4_Handler>:
    1b44:	b510      	push	{r4, lr}
    1b46:	4b02      	ldr	r3, [pc, #8]	; (1b50 <SERCOM4_Handler+0xc>)
    1b48:	691b      	ldr	r3, [r3, #16]
    1b4a:	2004      	movs	r0, #4
    1b4c:	4798      	blx	r3
    1b4e:	bd10      	pop	{r4, pc}
    1b50:	2000021c 	.word	0x2000021c

00001b54 <SERCOM5_Handler>:
    1b54:	b510      	push	{r4, lr}
    1b56:	4b02      	ldr	r3, [pc, #8]	; (1b60 <SERCOM5_Handler+0xc>)
    1b58:	695b      	ldr	r3, [r3, #20]
    1b5a:	2005      	movs	r0, #5
    1b5c:	4798      	blx	r3
    1b5e:	bd10      	pop	{r4, pc}
    1b60:	2000021c 	.word	0x2000021c

00001b64 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1b64:	4b0c      	ldr	r3, [pc, #48]	; (1b98 <cpu_irq_enter_critical+0x34>)
    1b66:	681b      	ldr	r3, [r3, #0]
    1b68:	2b00      	cmp	r3, #0
    1b6a:	d106      	bne.n	1b7a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b6c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1b70:	2b00      	cmp	r3, #0
    1b72:	d007      	beq.n	1b84 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1b74:	2200      	movs	r2, #0
    1b76:	4b09      	ldr	r3, [pc, #36]	; (1b9c <cpu_irq_enter_critical+0x38>)
    1b78:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1b7a:	4a07      	ldr	r2, [pc, #28]	; (1b98 <cpu_irq_enter_critical+0x34>)
    1b7c:	6813      	ldr	r3, [r2, #0]
    1b7e:	3301      	adds	r3, #1
    1b80:	6013      	str	r3, [r2, #0]
}
    1b82:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1b84:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1b86:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1b8a:	2200      	movs	r2, #0
    1b8c:	4b04      	ldr	r3, [pc, #16]	; (1ba0 <cpu_irq_enter_critical+0x3c>)
    1b8e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1b90:	3201      	adds	r2, #1
    1b92:	4b02      	ldr	r3, [pc, #8]	; (1b9c <cpu_irq_enter_critical+0x38>)
    1b94:	701a      	strb	r2, [r3, #0]
    1b96:	e7f0      	b.n	1b7a <cpu_irq_enter_critical+0x16>
    1b98:	20000234 	.word	0x20000234
    1b9c:	20000238 	.word	0x20000238
    1ba0:	20000008 	.word	0x20000008

00001ba4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1ba4:	4b08      	ldr	r3, [pc, #32]	; (1bc8 <cpu_irq_leave_critical+0x24>)
    1ba6:	681a      	ldr	r2, [r3, #0]
    1ba8:	3a01      	subs	r2, #1
    1baa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1bac:	681b      	ldr	r3, [r3, #0]
    1bae:	2b00      	cmp	r3, #0
    1bb0:	d109      	bne.n	1bc6 <cpu_irq_leave_critical+0x22>
    1bb2:	4b06      	ldr	r3, [pc, #24]	; (1bcc <cpu_irq_leave_critical+0x28>)
    1bb4:	781b      	ldrb	r3, [r3, #0]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d005      	beq.n	1bc6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1bba:	2201      	movs	r2, #1
    1bbc:	4b04      	ldr	r3, [pc, #16]	; (1bd0 <cpu_irq_leave_critical+0x2c>)
    1bbe:	701a      	strb	r2, [r3, #0]
    1bc0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1bc4:	b662      	cpsie	i
	}
}
    1bc6:	4770      	bx	lr
    1bc8:	20000234 	.word	0x20000234
    1bcc:	20000238 	.word	0x20000238
    1bd0:	20000008 	.word	0x20000008

00001bd4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bd6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1bd8:	ac01      	add	r4, sp, #4
    1bda:	2501      	movs	r5, #1
    1bdc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1bde:	2700      	movs	r7, #0
    1be0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1be2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1be4:	0021      	movs	r1, r4
    1be6:	2017      	movs	r0, #23
    1be8:	4e06      	ldr	r6, [pc, #24]	; (1c04 <system_board_init+0x30>)
    1bea:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1bec:	2280      	movs	r2, #128	; 0x80
    1bee:	0412      	lsls	r2, r2, #16
    1bf0:	4b05      	ldr	r3, [pc, #20]	; (1c08 <system_board_init+0x34>)
    1bf2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1bf4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1bf6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1bf8:	0021      	movs	r1, r4
    1bfa:	2037      	movs	r0, #55	; 0x37
    1bfc:	47b0      	blx	r6
}
    1bfe:	b003      	add	sp, #12
    1c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	00001c0d 	.word	0x00001c0d
    1c08:	41004400 	.word	0x41004400

00001c0c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1c0c:	b500      	push	{lr}
    1c0e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1c10:	ab01      	add	r3, sp, #4
    1c12:	2280      	movs	r2, #128	; 0x80
    1c14:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1c16:	780a      	ldrb	r2, [r1, #0]
    1c18:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1c1a:	784a      	ldrb	r2, [r1, #1]
    1c1c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1c1e:	788a      	ldrb	r2, [r1, #2]
    1c20:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1c22:	0019      	movs	r1, r3
    1c24:	4b01      	ldr	r3, [pc, #4]	; (1c2c <port_pin_set_config+0x20>)
    1c26:	4798      	blx	r3
}
    1c28:	b003      	add	sp, #12
    1c2a:	bd00      	pop	{pc}
    1c2c:	0000236d 	.word	0x0000236d

00001c30 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1c30:	b510      	push	{r4, lr}
	switch (clock_source) {
    1c32:	2808      	cmp	r0, #8
    1c34:	d803      	bhi.n	1c3e <system_clock_source_get_hz+0xe>
    1c36:	0080      	lsls	r0, r0, #2
    1c38:	4b1b      	ldr	r3, [pc, #108]	; (1ca8 <system_clock_source_get_hz+0x78>)
    1c3a:	581b      	ldr	r3, [r3, r0]
    1c3c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1c3e:	2000      	movs	r0, #0
    1c40:	e030      	b.n	1ca4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1c42:	4b1a      	ldr	r3, [pc, #104]	; (1cac <system_clock_source_get_hz+0x7c>)
    1c44:	6918      	ldr	r0, [r3, #16]
    1c46:	e02d      	b.n	1ca4 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1c48:	4b19      	ldr	r3, [pc, #100]	; (1cb0 <system_clock_source_get_hz+0x80>)
    1c4a:	6a1b      	ldr	r3, [r3, #32]
    1c4c:	059b      	lsls	r3, r3, #22
    1c4e:	0f9b      	lsrs	r3, r3, #30
    1c50:	4818      	ldr	r0, [pc, #96]	; (1cb4 <system_clock_source_get_hz+0x84>)
    1c52:	40d8      	lsrs	r0, r3
    1c54:	e026      	b.n	1ca4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1c56:	4b15      	ldr	r3, [pc, #84]	; (1cac <system_clock_source_get_hz+0x7c>)
    1c58:	6958      	ldr	r0, [r3, #20]
    1c5a:	e023      	b.n	1ca4 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1c5c:	4b13      	ldr	r3, [pc, #76]	; (1cac <system_clock_source_get_hz+0x7c>)
    1c5e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1c60:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1c62:	079b      	lsls	r3, r3, #30
    1c64:	d51e      	bpl.n	1ca4 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1c66:	4912      	ldr	r1, [pc, #72]	; (1cb0 <system_clock_source_get_hz+0x80>)
    1c68:	2210      	movs	r2, #16
    1c6a:	68cb      	ldr	r3, [r1, #12]
    1c6c:	421a      	tst	r2, r3
    1c6e:	d0fc      	beq.n	1c6a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1c70:	4b0e      	ldr	r3, [pc, #56]	; (1cac <system_clock_source_get_hz+0x7c>)
    1c72:	681b      	ldr	r3, [r3, #0]
    1c74:	075b      	lsls	r3, r3, #29
    1c76:	d401      	bmi.n	1c7c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1c78:	480f      	ldr	r0, [pc, #60]	; (1cb8 <system_clock_source_get_hz+0x88>)
    1c7a:	e013      	b.n	1ca4 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1c7c:	2000      	movs	r0, #0
    1c7e:	4b0f      	ldr	r3, [pc, #60]	; (1cbc <system_clock_source_get_hz+0x8c>)
    1c80:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1c82:	4b0a      	ldr	r3, [pc, #40]	; (1cac <system_clock_source_get_hz+0x7c>)
    1c84:	689b      	ldr	r3, [r3, #8]
    1c86:	041b      	lsls	r3, r3, #16
    1c88:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1c8a:	4358      	muls	r0, r3
    1c8c:	e00a      	b.n	1ca4 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1c8e:	2350      	movs	r3, #80	; 0x50
    1c90:	4a07      	ldr	r2, [pc, #28]	; (1cb0 <system_clock_source_get_hz+0x80>)
    1c92:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1c94:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1c96:	075b      	lsls	r3, r3, #29
    1c98:	d504      	bpl.n	1ca4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1c9a:	4b04      	ldr	r3, [pc, #16]	; (1cac <system_clock_source_get_hz+0x7c>)
    1c9c:	68d8      	ldr	r0, [r3, #12]
    1c9e:	e001      	b.n	1ca4 <system_clock_source_get_hz+0x74>
		return 32768UL;
    1ca0:	2080      	movs	r0, #128	; 0x80
    1ca2:	0200      	lsls	r0, r0, #8
	}
}
    1ca4:	bd10      	pop	{r4, pc}
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	00005df4 	.word	0x00005df4
    1cac:	2000023c 	.word	0x2000023c
    1cb0:	40000800 	.word	0x40000800
    1cb4:	007a1200 	.word	0x007a1200
    1cb8:	02dc6c00 	.word	0x02dc6c00
    1cbc:	00002291 	.word	0x00002291

00001cc0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1cc0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1cc2:	490c      	ldr	r1, [pc, #48]	; (1cf4 <system_clock_source_osc8m_set_config+0x34>)
    1cc4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1cc6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1cc8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1cca:	7840      	ldrb	r0, [r0, #1]
    1ccc:	2201      	movs	r2, #1
    1cce:	4010      	ands	r0, r2
    1cd0:	0180      	lsls	r0, r0, #6
    1cd2:	2640      	movs	r6, #64	; 0x40
    1cd4:	43b3      	bics	r3, r6
    1cd6:	4303      	orrs	r3, r0
    1cd8:	402a      	ands	r2, r5
    1cda:	01d2      	lsls	r2, r2, #7
    1cdc:	2080      	movs	r0, #128	; 0x80
    1cde:	4383      	bics	r3, r0
    1ce0:	4313      	orrs	r3, r2
    1ce2:	2203      	movs	r2, #3
    1ce4:	4022      	ands	r2, r4
    1ce6:	0212      	lsls	r2, r2, #8
    1ce8:	4803      	ldr	r0, [pc, #12]	; (1cf8 <system_clock_source_osc8m_set_config+0x38>)
    1cea:	4003      	ands	r3, r0
    1cec:	4313      	orrs	r3, r2
    1cee:	620b      	str	r3, [r1, #32]
}
    1cf0:	bd70      	pop	{r4, r5, r6, pc}
    1cf2:	46c0      	nop			; (mov r8, r8)
    1cf4:	40000800 	.word	0x40000800
    1cf8:	fffffcff 	.word	0xfffffcff

00001cfc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cfe:	46de      	mov	lr, fp
    1d00:	4657      	mov	r7, sl
    1d02:	464e      	mov	r6, r9
    1d04:	4645      	mov	r5, r8
    1d06:	b5e0      	push	{r5, r6, r7, lr}
    1d08:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1d0a:	4b26      	ldr	r3, [pc, #152]	; (1da4 <system_clock_source_xosc32k_set_config+0xa8>)
    1d0c:	469b      	mov	fp, r3
    1d0e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1d10:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1d12:	7800      	ldrb	r0, [r0, #0]
    1d14:	4242      	negs	r2, r0
    1d16:	4142      	adcs	r2, r0
    1d18:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1d1a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1d1c:	78ca      	ldrb	r2, [r1, #3]
    1d1e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1d20:	790a      	ldrb	r2, [r1, #4]
    1d22:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1d24:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1d26:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1d28:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1d2a:	688a      	ldr	r2, [r1, #8]
    1d2c:	491e      	ldr	r1, [pc, #120]	; (1da8 <system_clock_source_xosc32k_set_config+0xac>)
    1d2e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1d30:	2101      	movs	r1, #1
    1d32:	464a      	mov	r2, r9
    1d34:	0092      	lsls	r2, r2, #2
    1d36:	4691      	mov	r9, r2
    1d38:	2204      	movs	r2, #4
    1d3a:	4393      	bics	r3, r2
    1d3c:	464a      	mov	r2, r9
    1d3e:	4313      	orrs	r3, r2
    1d40:	4642      	mov	r2, r8
    1d42:	400a      	ands	r2, r1
    1d44:	00d2      	lsls	r2, r2, #3
    1d46:	4690      	mov	r8, r2
    1d48:	2208      	movs	r2, #8
    1d4a:	4393      	bics	r3, r2
    1d4c:	4642      	mov	r2, r8
    1d4e:	4313      	orrs	r3, r2
    1d50:	4662      	mov	r2, ip
    1d52:	400a      	ands	r2, r1
    1d54:	0112      	lsls	r2, r2, #4
    1d56:	4694      	mov	ip, r2
    1d58:	2210      	movs	r2, #16
    1d5a:	4393      	bics	r3, r2
    1d5c:	4662      	mov	r2, ip
    1d5e:	4313      	orrs	r3, r2
    1d60:	4008      	ands	r0, r1
    1d62:	0140      	lsls	r0, r0, #5
    1d64:	2220      	movs	r2, #32
    1d66:	4393      	bics	r3, r2
    1d68:	4303      	orrs	r3, r0
    1d6a:	400f      	ands	r7, r1
    1d6c:	01bf      	lsls	r7, r7, #6
    1d6e:	2040      	movs	r0, #64	; 0x40
    1d70:	4383      	bics	r3, r0
    1d72:	433b      	orrs	r3, r7
    1d74:	400e      	ands	r6, r1
    1d76:	01f6      	lsls	r6, r6, #7
    1d78:	3040      	adds	r0, #64	; 0x40
    1d7a:	4383      	bics	r3, r0
    1d7c:	4333      	orrs	r3, r6
    1d7e:	3879      	subs	r0, #121	; 0x79
    1d80:	4005      	ands	r5, r0
    1d82:	022d      	lsls	r5, r5, #8
    1d84:	4809      	ldr	r0, [pc, #36]	; (1dac <system_clock_source_xosc32k_set_config+0xb0>)
    1d86:	4003      	ands	r3, r0
    1d88:	432b      	orrs	r3, r5
    1d8a:	4021      	ands	r1, r4
    1d8c:	0309      	lsls	r1, r1, #12
    1d8e:	4808      	ldr	r0, [pc, #32]	; (1db0 <system_clock_source_xosc32k_set_config+0xb4>)
    1d90:	4003      	ands	r3, r0
    1d92:	430b      	orrs	r3, r1
    1d94:	465a      	mov	r2, fp
    1d96:	8293      	strh	r3, [r2, #20]
}
    1d98:	bc3c      	pop	{r2, r3, r4, r5}
    1d9a:	4690      	mov	r8, r2
    1d9c:	4699      	mov	r9, r3
    1d9e:	46a2      	mov	sl, r4
    1da0:	46ab      	mov	fp, r5
    1da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1da4:	40000800 	.word	0x40000800
    1da8:	2000023c 	.word	0x2000023c
    1dac:	fffff8ff 	.word	0xfffff8ff
    1db0:	ffffefff 	.word	0xffffefff

00001db4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1db4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1db6:	7a03      	ldrb	r3, [r0, #8]
    1db8:	069b      	lsls	r3, r3, #26
    1dba:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1dbc:	8942      	ldrh	r2, [r0, #10]
    1dbe:	0592      	lsls	r2, r2, #22
    1dc0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1dc2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1dc4:	4918      	ldr	r1, [pc, #96]	; (1e28 <system_clock_source_dfll_set_config+0x74>)
    1dc6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1dc8:	7983      	ldrb	r3, [r0, #6]
    1dca:	79c2      	ldrb	r2, [r0, #7]
    1dcc:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1dce:	8842      	ldrh	r2, [r0, #2]
    1dd0:	8884      	ldrh	r4, [r0, #4]
    1dd2:	4322      	orrs	r2, r4
    1dd4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1dd6:	7842      	ldrb	r2, [r0, #1]
    1dd8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1dda:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1ddc:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1dde:	7803      	ldrb	r3, [r0, #0]
    1de0:	2b04      	cmp	r3, #4
    1de2:	d011      	beq.n	1e08 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1de4:	2b20      	cmp	r3, #32
    1de6:	d10e      	bne.n	1e06 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1de8:	7b03      	ldrb	r3, [r0, #12]
    1dea:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1dec:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1dee:	4313      	orrs	r3, r2
    1df0:	89c2      	ldrh	r2, [r0, #14]
    1df2:	0412      	lsls	r2, r2, #16
    1df4:	490d      	ldr	r1, [pc, #52]	; (1e2c <system_clock_source_dfll_set_config+0x78>)
    1df6:	400a      	ands	r2, r1
    1df8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1dfa:	4a0b      	ldr	r2, [pc, #44]	; (1e28 <system_clock_source_dfll_set_config+0x74>)
    1dfc:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1dfe:	6811      	ldr	r1, [r2, #0]
    1e00:	4b0b      	ldr	r3, [pc, #44]	; (1e30 <system_clock_source_dfll_set_config+0x7c>)
    1e02:	430b      	orrs	r3, r1
    1e04:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1e06:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1e08:	7b03      	ldrb	r3, [r0, #12]
    1e0a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1e0c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1e0e:	4313      	orrs	r3, r2
    1e10:	89c2      	ldrh	r2, [r0, #14]
    1e12:	0412      	lsls	r2, r2, #16
    1e14:	4905      	ldr	r1, [pc, #20]	; (1e2c <system_clock_source_dfll_set_config+0x78>)
    1e16:	400a      	ands	r2, r1
    1e18:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1e1a:	4a03      	ldr	r2, [pc, #12]	; (1e28 <system_clock_source_dfll_set_config+0x74>)
    1e1c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1e1e:	6813      	ldr	r3, [r2, #0]
    1e20:	2104      	movs	r1, #4
    1e22:	430b      	orrs	r3, r1
    1e24:	6013      	str	r3, [r2, #0]
    1e26:	e7ee      	b.n	1e06 <system_clock_source_dfll_set_config+0x52>
    1e28:	2000023c 	.word	0x2000023c
    1e2c:	03ff0000 	.word	0x03ff0000
    1e30:	00000424 	.word	0x00000424

00001e34 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1e34:	2808      	cmp	r0, #8
    1e36:	d803      	bhi.n	1e40 <system_clock_source_enable+0xc>
    1e38:	0080      	lsls	r0, r0, #2
    1e3a:	4b25      	ldr	r3, [pc, #148]	; (1ed0 <system_clock_source_enable+0x9c>)
    1e3c:	581b      	ldr	r3, [r3, r0]
    1e3e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1e40:	2017      	movs	r0, #23
    1e42:	e044      	b.n	1ece <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1e44:	4a23      	ldr	r2, [pc, #140]	; (1ed4 <system_clock_source_enable+0xa0>)
    1e46:	6a13      	ldr	r3, [r2, #32]
    1e48:	2102      	movs	r1, #2
    1e4a:	430b      	orrs	r3, r1
    1e4c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1e4e:	2000      	movs	r0, #0
    1e50:	e03d      	b.n	1ece <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1e52:	4a20      	ldr	r2, [pc, #128]	; (1ed4 <system_clock_source_enable+0xa0>)
    1e54:	6993      	ldr	r3, [r2, #24]
    1e56:	2102      	movs	r1, #2
    1e58:	430b      	orrs	r3, r1
    1e5a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1e5c:	2000      	movs	r0, #0
		break;
    1e5e:	e036      	b.n	1ece <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1e60:	4a1c      	ldr	r2, [pc, #112]	; (1ed4 <system_clock_source_enable+0xa0>)
    1e62:	8a13      	ldrh	r3, [r2, #16]
    1e64:	2102      	movs	r1, #2
    1e66:	430b      	orrs	r3, r1
    1e68:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1e6a:	2000      	movs	r0, #0
		break;
    1e6c:	e02f      	b.n	1ece <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1e6e:	4a19      	ldr	r2, [pc, #100]	; (1ed4 <system_clock_source_enable+0xa0>)
    1e70:	8a93      	ldrh	r3, [r2, #20]
    1e72:	2102      	movs	r1, #2
    1e74:	430b      	orrs	r3, r1
    1e76:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1e78:	2000      	movs	r0, #0
		break;
    1e7a:	e028      	b.n	1ece <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1e7c:	4916      	ldr	r1, [pc, #88]	; (1ed8 <system_clock_source_enable+0xa4>)
    1e7e:	680b      	ldr	r3, [r1, #0]
    1e80:	2202      	movs	r2, #2
    1e82:	4313      	orrs	r3, r2
    1e84:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1e86:	4b13      	ldr	r3, [pc, #76]	; (1ed4 <system_clock_source_enable+0xa0>)
    1e88:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1e8a:	0019      	movs	r1, r3
    1e8c:	320e      	adds	r2, #14
    1e8e:	68cb      	ldr	r3, [r1, #12]
    1e90:	421a      	tst	r2, r3
    1e92:	d0fc      	beq.n	1e8e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1e94:	4a10      	ldr	r2, [pc, #64]	; (1ed8 <system_clock_source_enable+0xa4>)
    1e96:	6891      	ldr	r1, [r2, #8]
    1e98:	4b0e      	ldr	r3, [pc, #56]	; (1ed4 <system_clock_source_enable+0xa0>)
    1e9a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1e9c:	6852      	ldr	r2, [r2, #4]
    1e9e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1ea0:	2200      	movs	r2, #0
    1ea2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ea4:	0019      	movs	r1, r3
    1ea6:	3210      	adds	r2, #16
    1ea8:	68cb      	ldr	r3, [r1, #12]
    1eaa:	421a      	tst	r2, r3
    1eac:	d0fc      	beq.n	1ea8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1eae:	4b0a      	ldr	r3, [pc, #40]	; (1ed8 <system_clock_source_enable+0xa4>)
    1eb0:	681b      	ldr	r3, [r3, #0]
    1eb2:	b29b      	uxth	r3, r3
    1eb4:	4a07      	ldr	r2, [pc, #28]	; (1ed4 <system_clock_source_enable+0xa0>)
    1eb6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1eb8:	2000      	movs	r0, #0
    1eba:	e008      	b.n	1ece <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1ebc:	4905      	ldr	r1, [pc, #20]	; (1ed4 <system_clock_source_enable+0xa0>)
    1ebe:	2244      	movs	r2, #68	; 0x44
    1ec0:	5c8b      	ldrb	r3, [r1, r2]
    1ec2:	2002      	movs	r0, #2
    1ec4:	4303      	orrs	r3, r0
    1ec6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1ec8:	2000      	movs	r0, #0
		break;
    1eca:	e000      	b.n	1ece <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1ecc:	2000      	movs	r0, #0
}
    1ece:	4770      	bx	lr
    1ed0:	00005e18 	.word	0x00005e18
    1ed4:	40000800 	.word	0x40000800
    1ed8:	2000023c 	.word	0x2000023c

00001edc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ede:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1ee0:	22c2      	movs	r2, #194	; 0xc2
    1ee2:	00d2      	lsls	r2, r2, #3
    1ee4:	4b47      	ldr	r3, [pc, #284]	; (2004 <STACK_SIZE+0x4>)
    1ee6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1ee8:	4a47      	ldr	r2, [pc, #284]	; (2008 <STACK_SIZE+0x8>)
    1eea:	6853      	ldr	r3, [r2, #4]
    1eec:	211e      	movs	r1, #30
    1eee:	438b      	bics	r3, r1
    1ef0:	391a      	subs	r1, #26
    1ef2:	430b      	orrs	r3, r1
    1ef4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1ef6:	2202      	movs	r2, #2
    1ef8:	ab01      	add	r3, sp, #4
    1efa:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1efc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1efe:	4d43      	ldr	r5, [pc, #268]	; (200c <STACK_SIZE+0xc>)
    1f00:	b2e0      	uxtb	r0, r4
    1f02:	a901      	add	r1, sp, #4
    1f04:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f06:	3401      	adds	r4, #1
    1f08:	2c25      	cmp	r4, #37	; 0x25
    1f0a:	d1f9      	bne.n	1f00 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1f0c:	a80a      	add	r0, sp, #40	; 0x28
    1f0e:	2300      	movs	r3, #0
    1f10:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1f12:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1f14:	2280      	movs	r2, #128	; 0x80
    1f16:	0212      	lsls	r2, r2, #8
    1f18:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1f1a:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1f1c:	2201      	movs	r2, #1
    1f1e:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1f20:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1f22:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1f24:	3202      	adds	r2, #2
    1f26:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1f28:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1f2a:	4b39      	ldr	r3, [pc, #228]	; (2010 <STACK_SIZE+0x10>)
    1f2c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1f2e:	2005      	movs	r0, #5
    1f30:	4b38      	ldr	r3, [pc, #224]	; (2014 <STACK_SIZE+0x14>)
    1f32:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1f34:	4933      	ldr	r1, [pc, #204]	; (2004 <STACK_SIZE+0x4>)
    1f36:	2202      	movs	r2, #2
    1f38:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1f3a:	421a      	tst	r2, r3
    1f3c:	d0fc      	beq.n	1f38 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1f3e:	4a31      	ldr	r2, [pc, #196]	; (2004 <STACK_SIZE+0x4>)
    1f40:	8a93      	ldrh	r3, [r2, #20]
    1f42:	2180      	movs	r1, #128	; 0x80
    1f44:	430b      	orrs	r3, r1
    1f46:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1f48:	ab05      	add	r3, sp, #20
    1f4a:	2100      	movs	r1, #0
    1f4c:	2200      	movs	r2, #0
    1f4e:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1f50:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1f52:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1f54:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1f56:	313f      	adds	r1, #63	; 0x3f
    1f58:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1f5a:	393b      	subs	r1, #59	; 0x3b
    1f5c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1f5e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1f60:	4b2d      	ldr	r3, [pc, #180]	; (2018 <STACK_SIZE+0x18>)
    1f62:	681b      	ldr	r3, [r3, #0]
    1f64:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1f66:	2b3f      	cmp	r3, #63	; 0x3f
    1f68:	d04a      	beq.n	2000 <STACK_SIZE>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1f6a:	a805      	add	r0, sp, #20
    1f6c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1f6e:	4b2b      	ldr	r3, [pc, #172]	; (201c <STACK_SIZE+0x1c>)
    1f70:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1f72:	2307      	movs	r3, #7
    1f74:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1f76:	3338      	adds	r3, #56	; 0x38
    1f78:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1f7a:	4b29      	ldr	r3, [pc, #164]	; (2020 <STACK_SIZE+0x20>)
    1f7c:	4798      	blx	r3
	config->run_in_standby  = false;
    1f7e:	a804      	add	r0, sp, #16
    1f80:	2500      	movs	r5, #0
    1f82:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1f84:	2601      	movs	r6, #1
    1f86:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1f88:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1f8a:	4b26      	ldr	r3, [pc, #152]	; (2024 <STACK_SIZE+0x24>)
    1f8c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1f8e:	2006      	movs	r0, #6
    1f90:	4f20      	ldr	r7, [pc, #128]	; (2014 <STACK_SIZE+0x14>)
    1f92:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1f94:	4b24      	ldr	r3, [pc, #144]	; (2028 <STACK_SIZE+0x28>)
    1f96:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1f98:	ac01      	add	r4, sp, #4
    1f9a:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1f9c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1f9e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1fa0:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1fa2:	2305      	movs	r3, #5
    1fa4:	7023      	strb	r3, [r4, #0]
    1fa6:	0021      	movs	r1, r4
    1fa8:	2001      	movs	r0, #1
    1faa:	4b20      	ldr	r3, [pc, #128]	; (202c <STACK_SIZE+0x2c>)
    1fac:	4798      	blx	r3
    1fae:	2001      	movs	r0, #1
    1fb0:	4b1f      	ldr	r3, [pc, #124]	; (2030 <STACK_SIZE+0x30>)
    1fb2:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1fb4:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1fb6:	0021      	movs	r1, r4
    1fb8:	2000      	movs	r0, #0
    1fba:	4b14      	ldr	r3, [pc, #80]	; (200c <STACK_SIZE+0xc>)
    1fbc:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1fbe:	2000      	movs	r0, #0
    1fc0:	4b1c      	ldr	r3, [pc, #112]	; (2034 <STACK_SIZE+0x34>)
    1fc2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1fc4:	2007      	movs	r0, #7
    1fc6:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1fc8:	490e      	ldr	r1, [pc, #56]	; (2004 <STACK_SIZE+0x4>)
    1fca:	22d0      	movs	r2, #208	; 0xd0
    1fcc:	68cb      	ldr	r3, [r1, #12]
    1fce:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1fd0:	2bd0      	cmp	r3, #208	; 0xd0
    1fd2:	d1fb      	bne.n	1fcc <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1fd4:	4a18      	ldr	r2, [pc, #96]	; (2038 <STACK_SIZE+0x38>)
    1fd6:	2300      	movs	r3, #0
    1fd8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1fda:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1fdc:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1fde:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1fe0:	a901      	add	r1, sp, #4
    1fe2:	2201      	movs	r2, #1
    1fe4:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1fe6:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1fe8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1fea:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1fec:	3307      	adds	r3, #7
    1fee:	700b      	strb	r3, [r1, #0]
    1ff0:	2000      	movs	r0, #0
    1ff2:	4b0e      	ldr	r3, [pc, #56]	; (202c <STACK_SIZE+0x2c>)
    1ff4:	4798      	blx	r3
    1ff6:	2000      	movs	r0, #0
    1ff8:	4b0d      	ldr	r3, [pc, #52]	; (2030 <STACK_SIZE+0x30>)
    1ffa:	4798      	blx	r3
#endif
}
    1ffc:	b00f      	add	sp, #60	; 0x3c
    1ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2000:	3b20      	subs	r3, #32
    2002:	e7b2      	b.n	1f6a <system_clock_init+0x8e>
    2004:	40000800 	.word	0x40000800
    2008:	41004000 	.word	0x41004000
    200c:	00002275 	.word	0x00002275
    2010:	00001cfd 	.word	0x00001cfd
    2014:	00001e35 	.word	0x00001e35
    2018:	00806024 	.word	0x00806024
    201c:	000005b9 	.word	0x000005b9
    2020:	00001db5 	.word	0x00001db5
    2024:	00001cc1 	.word	0x00001cc1
    2028:	0000203d 	.word	0x0000203d
    202c:	00002061 	.word	0x00002061
    2030:	00002119 	.word	0x00002119
    2034:	000021e9 	.word	0x000021e9
    2038:	40000400 	.word	0x40000400

0000203c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    203c:	4a06      	ldr	r2, [pc, #24]	; (2058 <system_gclk_init+0x1c>)
    203e:	6993      	ldr	r3, [r2, #24]
    2040:	2108      	movs	r1, #8
    2042:	430b      	orrs	r3, r1
    2044:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2046:	2201      	movs	r2, #1
    2048:	4b04      	ldr	r3, [pc, #16]	; (205c <system_gclk_init+0x20>)
    204a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    204c:	0019      	movs	r1, r3
    204e:	780b      	ldrb	r3, [r1, #0]
    2050:	4213      	tst	r3, r2
    2052:	d1fc      	bne.n	204e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2054:	4770      	bx	lr
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	40000400 	.word	0x40000400
    205c:	40000c00 	.word	0x40000c00

00002060 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2060:	b570      	push	{r4, r5, r6, lr}
    2062:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2064:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2066:	780d      	ldrb	r5, [r1, #0]
    2068:	022d      	lsls	r5, r5, #8
    206a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    206c:	784b      	ldrb	r3, [r1, #1]
    206e:	2b00      	cmp	r3, #0
    2070:	d002      	beq.n	2078 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2072:	2380      	movs	r3, #128	; 0x80
    2074:	02db      	lsls	r3, r3, #11
    2076:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2078:	7a4b      	ldrb	r3, [r1, #9]
    207a:	2b00      	cmp	r3, #0
    207c:	d002      	beq.n	2084 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    207e:	2380      	movs	r3, #128	; 0x80
    2080:	031b      	lsls	r3, r3, #12
    2082:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2084:	6848      	ldr	r0, [r1, #4]
    2086:	2801      	cmp	r0, #1
    2088:	d910      	bls.n	20ac <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    208a:	1e43      	subs	r3, r0, #1
    208c:	4218      	tst	r0, r3
    208e:	d134      	bne.n	20fa <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2090:	2802      	cmp	r0, #2
    2092:	d930      	bls.n	20f6 <system_gclk_gen_set_config+0x96>
    2094:	2302      	movs	r3, #2
    2096:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2098:	3201      	adds	r2, #1
						mask <<= 1) {
    209a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    209c:	4298      	cmp	r0, r3
    209e:	d8fb      	bhi.n	2098 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    20a0:	0212      	lsls	r2, r2, #8
    20a2:	4332      	orrs	r2, r6
    20a4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    20a6:	2380      	movs	r3, #128	; 0x80
    20a8:	035b      	lsls	r3, r3, #13
    20aa:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    20ac:	7a0b      	ldrb	r3, [r1, #8]
    20ae:	2b00      	cmp	r3, #0
    20b0:	d002      	beq.n	20b8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    20b2:	2380      	movs	r3, #128	; 0x80
    20b4:	039b      	lsls	r3, r3, #14
    20b6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20b8:	4a13      	ldr	r2, [pc, #76]	; (2108 <system_gclk_gen_set_config+0xa8>)
    20ba:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    20bc:	b25b      	sxtb	r3, r3
    20be:	2b00      	cmp	r3, #0
    20c0:	dbfb      	blt.n	20ba <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    20c2:	4b12      	ldr	r3, [pc, #72]	; (210c <system_gclk_gen_set_config+0xac>)
    20c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    20c6:	4b12      	ldr	r3, [pc, #72]	; (2110 <system_gclk_gen_set_config+0xb0>)
    20c8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20ca:	4a0f      	ldr	r2, [pc, #60]	; (2108 <system_gclk_gen_set_config+0xa8>)
    20cc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    20ce:	b25b      	sxtb	r3, r3
    20d0:	2b00      	cmp	r3, #0
    20d2:	dbfb      	blt.n	20cc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    20d4:	4b0c      	ldr	r3, [pc, #48]	; (2108 <system_gclk_gen_set_config+0xa8>)
    20d6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20d8:	001a      	movs	r2, r3
    20da:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    20dc:	b25b      	sxtb	r3, r3
    20de:	2b00      	cmp	r3, #0
    20e0:	dbfb      	blt.n	20da <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    20e2:	4a09      	ldr	r2, [pc, #36]	; (2108 <system_gclk_gen_set_config+0xa8>)
    20e4:	6853      	ldr	r3, [r2, #4]
    20e6:	2180      	movs	r1, #128	; 0x80
    20e8:	0249      	lsls	r1, r1, #9
    20ea:	400b      	ands	r3, r1
    20ec:	431d      	orrs	r5, r3
    20ee:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    20f0:	4b08      	ldr	r3, [pc, #32]	; (2114 <system_gclk_gen_set_config+0xb4>)
    20f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20f4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    20f6:	2200      	movs	r2, #0
    20f8:	e7d2      	b.n	20a0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    20fa:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    20fc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    20fe:	2380      	movs	r3, #128	; 0x80
    2100:	029b      	lsls	r3, r3, #10
    2102:	431d      	orrs	r5, r3
    2104:	e7d2      	b.n	20ac <system_gclk_gen_set_config+0x4c>
    2106:	46c0      	nop			; (mov r8, r8)
    2108:	40000c00 	.word	0x40000c00
    210c:	00001b65 	.word	0x00001b65
    2110:	40000c08 	.word	0x40000c08
    2114:	00001ba5 	.word	0x00001ba5

00002118 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2118:	b510      	push	{r4, lr}
    211a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    211c:	4a0b      	ldr	r2, [pc, #44]	; (214c <system_gclk_gen_enable+0x34>)
    211e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2120:	b25b      	sxtb	r3, r3
    2122:	2b00      	cmp	r3, #0
    2124:	dbfb      	blt.n	211e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2126:	4b0a      	ldr	r3, [pc, #40]	; (2150 <system_gclk_gen_enable+0x38>)
    2128:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    212a:	4b0a      	ldr	r3, [pc, #40]	; (2154 <system_gclk_gen_enable+0x3c>)
    212c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    212e:	4a07      	ldr	r2, [pc, #28]	; (214c <system_gclk_gen_enable+0x34>)
    2130:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2132:	b25b      	sxtb	r3, r3
    2134:	2b00      	cmp	r3, #0
    2136:	dbfb      	blt.n	2130 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2138:	4a04      	ldr	r2, [pc, #16]	; (214c <system_gclk_gen_enable+0x34>)
    213a:	6851      	ldr	r1, [r2, #4]
    213c:	2380      	movs	r3, #128	; 0x80
    213e:	025b      	lsls	r3, r3, #9
    2140:	430b      	orrs	r3, r1
    2142:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2144:	4b04      	ldr	r3, [pc, #16]	; (2158 <system_gclk_gen_enable+0x40>)
    2146:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2148:	bd10      	pop	{r4, pc}
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	40000c00 	.word	0x40000c00
    2150:	00001b65 	.word	0x00001b65
    2154:	40000c04 	.word	0x40000c04
    2158:	00001ba5 	.word	0x00001ba5

0000215c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    215c:	b570      	push	{r4, r5, r6, lr}
    215e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2160:	4a1a      	ldr	r2, [pc, #104]	; (21cc <system_gclk_gen_get_hz+0x70>)
    2162:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2164:	b25b      	sxtb	r3, r3
    2166:	2b00      	cmp	r3, #0
    2168:	dbfb      	blt.n	2162 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    216a:	4b19      	ldr	r3, [pc, #100]	; (21d0 <system_gclk_gen_get_hz+0x74>)
    216c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    216e:	4b19      	ldr	r3, [pc, #100]	; (21d4 <system_gclk_gen_get_hz+0x78>)
    2170:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2172:	4a16      	ldr	r2, [pc, #88]	; (21cc <system_gclk_gen_get_hz+0x70>)
    2174:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2176:	b25b      	sxtb	r3, r3
    2178:	2b00      	cmp	r3, #0
    217a:	dbfb      	blt.n	2174 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    217c:	4e13      	ldr	r6, [pc, #76]	; (21cc <system_gclk_gen_get_hz+0x70>)
    217e:	6870      	ldr	r0, [r6, #4]
    2180:	04c0      	lsls	r0, r0, #19
    2182:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2184:	4b14      	ldr	r3, [pc, #80]	; (21d8 <system_gclk_gen_get_hz+0x7c>)
    2186:	4798      	blx	r3
    2188:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    218a:	4b12      	ldr	r3, [pc, #72]	; (21d4 <system_gclk_gen_get_hz+0x78>)
    218c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    218e:	6876      	ldr	r6, [r6, #4]
    2190:	02f6      	lsls	r6, r6, #11
    2192:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2194:	4b11      	ldr	r3, [pc, #68]	; (21dc <system_gclk_gen_get_hz+0x80>)
    2196:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2198:	4a0c      	ldr	r2, [pc, #48]	; (21cc <system_gclk_gen_get_hz+0x70>)
    219a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    219c:	b25b      	sxtb	r3, r3
    219e:	2b00      	cmp	r3, #0
    21a0:	dbfb      	blt.n	219a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    21a2:	4b0a      	ldr	r3, [pc, #40]	; (21cc <system_gclk_gen_get_hz+0x70>)
    21a4:	689c      	ldr	r4, [r3, #8]
    21a6:	0224      	lsls	r4, r4, #8
    21a8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    21aa:	4b0d      	ldr	r3, [pc, #52]	; (21e0 <system_gclk_gen_get_hz+0x84>)
    21ac:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    21ae:	2e00      	cmp	r6, #0
    21b0:	d107      	bne.n	21c2 <system_gclk_gen_get_hz+0x66>
    21b2:	2c01      	cmp	r4, #1
    21b4:	d907      	bls.n	21c6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    21b6:	0021      	movs	r1, r4
    21b8:	0028      	movs	r0, r5
    21ba:	4b0a      	ldr	r3, [pc, #40]	; (21e4 <system_gclk_gen_get_hz+0x88>)
    21bc:	4798      	blx	r3
    21be:	0005      	movs	r5, r0
    21c0:	e001      	b.n	21c6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    21c2:	3401      	adds	r4, #1
    21c4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    21c6:	0028      	movs	r0, r5
    21c8:	bd70      	pop	{r4, r5, r6, pc}
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	40000c00 	.word	0x40000c00
    21d0:	00001b65 	.word	0x00001b65
    21d4:	40000c04 	.word	0x40000c04
    21d8:	00001c31 	.word	0x00001c31
    21dc:	40000c08 	.word	0x40000c08
    21e0:	00001ba5 	.word	0x00001ba5
    21e4:	00002fad 	.word	0x00002fad

000021e8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    21e8:	b510      	push	{r4, lr}
    21ea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    21ec:	4b06      	ldr	r3, [pc, #24]	; (2208 <system_gclk_chan_enable+0x20>)
    21ee:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21f0:	4b06      	ldr	r3, [pc, #24]	; (220c <system_gclk_chan_enable+0x24>)
    21f2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    21f4:	4a06      	ldr	r2, [pc, #24]	; (2210 <system_gclk_chan_enable+0x28>)
    21f6:	8853      	ldrh	r3, [r2, #2]
    21f8:	2180      	movs	r1, #128	; 0x80
    21fa:	01c9      	lsls	r1, r1, #7
    21fc:	430b      	orrs	r3, r1
    21fe:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2200:	4b04      	ldr	r3, [pc, #16]	; (2214 <system_gclk_chan_enable+0x2c>)
    2202:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2204:	bd10      	pop	{r4, pc}
    2206:	46c0      	nop			; (mov r8, r8)
    2208:	00001b65 	.word	0x00001b65
    220c:	40000c02 	.word	0x40000c02
    2210:	40000c00 	.word	0x40000c00
    2214:	00001ba5 	.word	0x00001ba5

00002218 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2218:	b510      	push	{r4, lr}
    221a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    221c:	4b0f      	ldr	r3, [pc, #60]	; (225c <system_gclk_chan_disable+0x44>)
    221e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2220:	4b0f      	ldr	r3, [pc, #60]	; (2260 <system_gclk_chan_disable+0x48>)
    2222:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2224:	4a0f      	ldr	r2, [pc, #60]	; (2264 <system_gclk_chan_disable+0x4c>)
    2226:	8853      	ldrh	r3, [r2, #2]
    2228:	051b      	lsls	r3, r3, #20
    222a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    222c:	8853      	ldrh	r3, [r2, #2]
    222e:	490e      	ldr	r1, [pc, #56]	; (2268 <system_gclk_chan_disable+0x50>)
    2230:	400b      	ands	r3, r1
    2232:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2234:	8853      	ldrh	r3, [r2, #2]
    2236:	490d      	ldr	r1, [pc, #52]	; (226c <system_gclk_chan_disable+0x54>)
    2238:	400b      	ands	r3, r1
    223a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    223c:	0011      	movs	r1, r2
    223e:	2280      	movs	r2, #128	; 0x80
    2240:	01d2      	lsls	r2, r2, #7
    2242:	884b      	ldrh	r3, [r1, #2]
    2244:	4213      	tst	r3, r2
    2246:	d1fc      	bne.n	2242 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2248:	4906      	ldr	r1, [pc, #24]	; (2264 <system_gclk_chan_disable+0x4c>)
    224a:	884a      	ldrh	r2, [r1, #2]
    224c:	0203      	lsls	r3, r0, #8
    224e:	4806      	ldr	r0, [pc, #24]	; (2268 <system_gclk_chan_disable+0x50>)
    2250:	4002      	ands	r2, r0
    2252:	4313      	orrs	r3, r2
    2254:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2256:	4b06      	ldr	r3, [pc, #24]	; (2270 <system_gclk_chan_disable+0x58>)
    2258:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    225a:	bd10      	pop	{r4, pc}
    225c:	00001b65 	.word	0x00001b65
    2260:	40000c02 	.word	0x40000c02
    2264:	40000c00 	.word	0x40000c00
    2268:	fffff0ff 	.word	0xfffff0ff
    226c:	ffffbfff 	.word	0xffffbfff
    2270:	00001ba5 	.word	0x00001ba5

00002274 <system_gclk_chan_set_config>:
{
    2274:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2276:	780c      	ldrb	r4, [r1, #0]
    2278:	0224      	lsls	r4, r4, #8
    227a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    227c:	4b02      	ldr	r3, [pc, #8]	; (2288 <system_gclk_chan_set_config+0x14>)
    227e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2280:	b2a4      	uxth	r4, r4
    2282:	4b02      	ldr	r3, [pc, #8]	; (228c <system_gclk_chan_set_config+0x18>)
    2284:	805c      	strh	r4, [r3, #2]
}
    2286:	bd10      	pop	{r4, pc}
    2288:	00002219 	.word	0x00002219
    228c:	40000c00 	.word	0x40000c00

00002290 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2290:	b510      	push	{r4, lr}
    2292:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2294:	4b06      	ldr	r3, [pc, #24]	; (22b0 <system_gclk_chan_get_hz+0x20>)
    2296:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2298:	4b06      	ldr	r3, [pc, #24]	; (22b4 <system_gclk_chan_get_hz+0x24>)
    229a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    229c:	4b06      	ldr	r3, [pc, #24]	; (22b8 <system_gclk_chan_get_hz+0x28>)
    229e:	885c      	ldrh	r4, [r3, #2]
    22a0:	0524      	lsls	r4, r4, #20
    22a2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    22a4:	4b05      	ldr	r3, [pc, #20]	; (22bc <system_gclk_chan_get_hz+0x2c>)
    22a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    22a8:	0020      	movs	r0, r4
    22aa:	4b05      	ldr	r3, [pc, #20]	; (22c0 <system_gclk_chan_get_hz+0x30>)
    22ac:	4798      	blx	r3
}
    22ae:	bd10      	pop	{r4, pc}
    22b0:	00001b65 	.word	0x00001b65
    22b4:	40000c02 	.word	0x40000c02
    22b8:	40000c00 	.word	0x40000c00
    22bc:	00001ba5 	.word	0x00001ba5
    22c0:	0000215d 	.word	0x0000215d

000022c4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    22c4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    22c6:	78d3      	ldrb	r3, [r2, #3]
    22c8:	2b00      	cmp	r3, #0
    22ca:	d135      	bne.n	2338 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    22cc:	7813      	ldrb	r3, [r2, #0]
    22ce:	2b80      	cmp	r3, #128	; 0x80
    22d0:	d029      	beq.n	2326 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    22d2:	061b      	lsls	r3, r3, #24
    22d4:	2480      	movs	r4, #128	; 0x80
    22d6:	0264      	lsls	r4, r4, #9
    22d8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    22da:	7854      	ldrb	r4, [r2, #1]
    22dc:	2502      	movs	r5, #2
    22de:	43ac      	bics	r4, r5
    22e0:	d106      	bne.n	22f0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    22e2:	7894      	ldrb	r4, [r2, #2]
    22e4:	2c00      	cmp	r4, #0
    22e6:	d120      	bne.n	232a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    22e8:	2480      	movs	r4, #128	; 0x80
    22ea:	02a4      	lsls	r4, r4, #10
    22ec:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    22ee:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    22f0:	7854      	ldrb	r4, [r2, #1]
    22f2:	3c01      	subs	r4, #1
    22f4:	2c01      	cmp	r4, #1
    22f6:	d91c      	bls.n	2332 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    22f8:	040d      	lsls	r5, r1, #16
    22fa:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    22fc:	24a0      	movs	r4, #160	; 0xa0
    22fe:	05e4      	lsls	r4, r4, #23
    2300:	432c      	orrs	r4, r5
    2302:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2304:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2306:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2308:	24d0      	movs	r4, #208	; 0xd0
    230a:	0624      	lsls	r4, r4, #24
    230c:	432c      	orrs	r4, r5
    230e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2310:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2312:	78d4      	ldrb	r4, [r2, #3]
    2314:	2c00      	cmp	r4, #0
    2316:	d122      	bne.n	235e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2318:	035b      	lsls	r3, r3, #13
    231a:	d51c      	bpl.n	2356 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    231c:	7893      	ldrb	r3, [r2, #2]
    231e:	2b01      	cmp	r3, #1
    2320:	d01e      	beq.n	2360 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2322:	6141      	str	r1, [r0, #20]
    2324:	e017      	b.n	2356 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2326:	2300      	movs	r3, #0
    2328:	e7d7      	b.n	22da <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    232a:	24c0      	movs	r4, #192	; 0xc0
    232c:	02e4      	lsls	r4, r4, #11
    232e:	4323      	orrs	r3, r4
    2330:	e7dd      	b.n	22ee <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2332:	4c0d      	ldr	r4, [pc, #52]	; (2368 <_system_pinmux_config+0xa4>)
    2334:	4023      	ands	r3, r4
    2336:	e7df      	b.n	22f8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2338:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    233a:	040c      	lsls	r4, r1, #16
    233c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    233e:	23a0      	movs	r3, #160	; 0xa0
    2340:	05db      	lsls	r3, r3, #23
    2342:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2344:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2346:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2348:	23d0      	movs	r3, #208	; 0xd0
    234a:	061b      	lsls	r3, r3, #24
    234c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    234e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2350:	78d3      	ldrb	r3, [r2, #3]
    2352:	2b00      	cmp	r3, #0
    2354:	d103      	bne.n	235e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2356:	7853      	ldrb	r3, [r2, #1]
    2358:	3b01      	subs	r3, #1
    235a:	2b01      	cmp	r3, #1
    235c:	d902      	bls.n	2364 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    235e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2360:	6181      	str	r1, [r0, #24]
    2362:	e7f8      	b.n	2356 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2364:	6081      	str	r1, [r0, #8]
}
    2366:	e7fa      	b.n	235e <_system_pinmux_config+0x9a>
    2368:	fffbffff 	.word	0xfffbffff

0000236c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    236c:	b510      	push	{r4, lr}
    236e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2370:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2372:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2374:	2900      	cmp	r1, #0
    2376:	d104      	bne.n	2382 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2378:	0943      	lsrs	r3, r0, #5
    237a:	01db      	lsls	r3, r3, #7
    237c:	4905      	ldr	r1, [pc, #20]	; (2394 <system_pinmux_pin_set_config+0x28>)
    237e:	468c      	mov	ip, r1
    2380:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2382:	241f      	movs	r4, #31
    2384:	4020      	ands	r0, r4
    2386:	2101      	movs	r1, #1
    2388:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    238a:	0018      	movs	r0, r3
    238c:	4b02      	ldr	r3, [pc, #8]	; (2398 <system_pinmux_pin_set_config+0x2c>)
    238e:	4798      	blx	r3
}
    2390:	bd10      	pop	{r4, pc}
    2392:	46c0      	nop			; (mov r8, r8)
    2394:	41004400 	.word	0x41004400
    2398:	000022c5 	.word	0x000022c5

0000239c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    239c:	4770      	bx	lr
	...

000023a0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    23a0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    23a2:	4b05      	ldr	r3, [pc, #20]	; (23b8 <system_init+0x18>)
    23a4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    23a6:	4b05      	ldr	r3, [pc, #20]	; (23bc <system_init+0x1c>)
    23a8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    23aa:	4b05      	ldr	r3, [pc, #20]	; (23c0 <system_init+0x20>)
    23ac:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    23ae:	4b05      	ldr	r3, [pc, #20]	; (23c4 <system_init+0x24>)
    23b0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    23b2:	4b05      	ldr	r3, [pc, #20]	; (23c8 <system_init+0x28>)
    23b4:	4798      	blx	r3
}
    23b6:	bd10      	pop	{r4, pc}
    23b8:	00001edd 	.word	0x00001edd
    23bc:	00001bd5 	.word	0x00001bd5
    23c0:	0000239d 	.word	0x0000239d
    23c4:	0000239d 	.word	0x0000239d
    23c8:	0000239d 	.word	0x0000239d

000023cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    23cc:	e7fe      	b.n	23cc <Dummy_Handler>
	...

000023d0 <Reset_Handler>:
{
    23d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    23d2:	4a2a      	ldr	r2, [pc, #168]	; (247c <Reset_Handler+0xac>)
    23d4:	4b2a      	ldr	r3, [pc, #168]	; (2480 <Reset_Handler+0xb0>)
    23d6:	429a      	cmp	r2, r3
    23d8:	d011      	beq.n	23fe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    23da:	001a      	movs	r2, r3
    23dc:	4b29      	ldr	r3, [pc, #164]	; (2484 <Reset_Handler+0xb4>)
    23de:	429a      	cmp	r2, r3
    23e0:	d20d      	bcs.n	23fe <Reset_Handler+0x2e>
    23e2:	4a29      	ldr	r2, [pc, #164]	; (2488 <Reset_Handler+0xb8>)
    23e4:	3303      	adds	r3, #3
    23e6:	1a9b      	subs	r3, r3, r2
    23e8:	089b      	lsrs	r3, r3, #2
    23ea:	3301      	adds	r3, #1
    23ec:	009b      	lsls	r3, r3, #2
    23ee:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    23f0:	4823      	ldr	r0, [pc, #140]	; (2480 <Reset_Handler+0xb0>)
    23f2:	4922      	ldr	r1, [pc, #136]	; (247c <Reset_Handler+0xac>)
    23f4:	588c      	ldr	r4, [r1, r2]
    23f6:	5084      	str	r4, [r0, r2]
    23f8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    23fa:	429a      	cmp	r2, r3
    23fc:	d1fa      	bne.n	23f4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    23fe:	4a23      	ldr	r2, [pc, #140]	; (248c <Reset_Handler+0xbc>)
    2400:	4b23      	ldr	r3, [pc, #140]	; (2490 <Reset_Handler+0xc0>)
    2402:	429a      	cmp	r2, r3
    2404:	d20a      	bcs.n	241c <Reset_Handler+0x4c>
    2406:	43d3      	mvns	r3, r2
    2408:	4921      	ldr	r1, [pc, #132]	; (2490 <Reset_Handler+0xc0>)
    240a:	185b      	adds	r3, r3, r1
    240c:	2103      	movs	r1, #3
    240e:	438b      	bics	r3, r1
    2410:	3304      	adds	r3, #4
    2412:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2414:	2100      	movs	r1, #0
    2416:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2418:	4293      	cmp	r3, r2
    241a:	d1fc      	bne.n	2416 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    241c:	4a1d      	ldr	r2, [pc, #116]	; (2494 <Reset_Handler+0xc4>)
    241e:	21ff      	movs	r1, #255	; 0xff
    2420:	4b1d      	ldr	r3, [pc, #116]	; (2498 <Reset_Handler+0xc8>)
    2422:	438b      	bics	r3, r1
    2424:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2426:	39fd      	subs	r1, #253	; 0xfd
    2428:	2390      	movs	r3, #144	; 0x90
    242a:	005b      	lsls	r3, r3, #1
    242c:	4a1b      	ldr	r2, [pc, #108]	; (249c <Reset_Handler+0xcc>)
    242e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2430:	4a1b      	ldr	r2, [pc, #108]	; (24a0 <Reset_Handler+0xd0>)
    2432:	78d3      	ldrb	r3, [r2, #3]
    2434:	2503      	movs	r5, #3
    2436:	43ab      	bics	r3, r5
    2438:	2402      	movs	r4, #2
    243a:	4323      	orrs	r3, r4
    243c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    243e:	78d3      	ldrb	r3, [r2, #3]
    2440:	270c      	movs	r7, #12
    2442:	43bb      	bics	r3, r7
    2444:	2608      	movs	r6, #8
    2446:	4333      	orrs	r3, r6
    2448:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    244a:	4b16      	ldr	r3, [pc, #88]	; (24a4 <Reset_Handler+0xd4>)
    244c:	7b98      	ldrb	r0, [r3, #14]
    244e:	2230      	movs	r2, #48	; 0x30
    2450:	4390      	bics	r0, r2
    2452:	2220      	movs	r2, #32
    2454:	4310      	orrs	r0, r2
    2456:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2458:	7b99      	ldrb	r1, [r3, #14]
    245a:	43b9      	bics	r1, r7
    245c:	4331      	orrs	r1, r6
    245e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2460:	7b9a      	ldrb	r2, [r3, #14]
    2462:	43aa      	bics	r2, r5
    2464:	4322      	orrs	r2, r4
    2466:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2468:	4a0f      	ldr	r2, [pc, #60]	; (24a8 <Reset_Handler+0xd8>)
    246a:	6853      	ldr	r3, [r2, #4]
    246c:	2180      	movs	r1, #128	; 0x80
    246e:	430b      	orrs	r3, r1
    2470:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2472:	4b0e      	ldr	r3, [pc, #56]	; (24ac <Reset_Handler+0xdc>)
    2474:	4798      	blx	r3
        main();
    2476:	4b0e      	ldr	r3, [pc, #56]	; (24b0 <Reset_Handler+0xe0>)
    2478:	4798      	blx	r3
    247a:	e7fe      	b.n	247a <Reset_Handler+0xaa>
    247c:	00006710 	.word	0x00006710
    2480:	20000000 	.word	0x20000000
    2484:	200001fc 	.word	0x200001fc
    2488:	20000004 	.word	0x20000004
    248c:	200001fc 	.word	0x200001fc
    2490:	20000370 	.word	0x20000370
    2494:	e000ed00 	.word	0xe000ed00
    2498:	00000000 	.word	0x00000000
    249c:	41007000 	.word	0x41007000
    24a0:	41005000 	.word	0x41005000
    24a4:	41004800 	.word	0x41004800
    24a8:	41004000 	.word	0x41004000
    24ac:	000049ed 	.word	0x000049ed
    24b0:	00002f41 	.word	0x00002f41

000024b4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    24b4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    24b6:	4a06      	ldr	r2, [pc, #24]	; (24d0 <_sbrk+0x1c>)
    24b8:	6812      	ldr	r2, [r2, #0]
    24ba:	2a00      	cmp	r2, #0
    24bc:	d004      	beq.n	24c8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    24be:	4a04      	ldr	r2, [pc, #16]	; (24d0 <_sbrk+0x1c>)
    24c0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    24c2:	18c3      	adds	r3, r0, r3
    24c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    24c6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    24c8:	4902      	ldr	r1, [pc, #8]	; (24d4 <_sbrk+0x20>)
    24ca:	4a01      	ldr	r2, [pc, #4]	; (24d0 <_sbrk+0x1c>)
    24cc:	6011      	str	r1, [r2, #0]
    24ce:	e7f6      	b.n	24be <_sbrk+0xa>
    24d0:	20000254 	.word	0x20000254
    24d4:	20002370 	.word	0x20002370

000024d8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    24d8:	2001      	movs	r0, #1
    24da:	4240      	negs	r0, r0
    24dc:	4770      	bx	lr

000024de <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    24de:	2380      	movs	r3, #128	; 0x80
    24e0:	019b      	lsls	r3, r3, #6
    24e2:	604b      	str	r3, [r1, #4]

	return 0;
}
    24e4:	2000      	movs	r0, #0
    24e6:	4770      	bx	lr

000024e8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    24e8:	2001      	movs	r0, #1
    24ea:	4770      	bx	lr

000024ec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    24ec:	2000      	movs	r0, #0
    24ee:	4770      	bx	lr

000024f0 <i2c_write_complete_callback>:
/**
 * Callback after a successful I2C write.
 * @param module i2c module to bind to
 */
void i2c_write_complete_callback(struct i2c_master_module *const module)
{
    24f0:	b510      	push	{r4, lr}
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_master_instance, &rd_packet);
    24f2:	4902      	ldr	r1, [pc, #8]	; (24fc <i2c_write_complete_callback+0xc>)
    24f4:	4802      	ldr	r0, [pc, #8]	; (2500 <i2c_write_complete_callback+0x10>)
    24f6:	4b03      	ldr	r3, [pc, #12]	; (2504 <i2c_write_complete_callback+0x14>)
    24f8:	4798      	blx	r3
}
    24fa:	bd10      	pop	{r4, pc}
    24fc:	2000000c 	.word	0x2000000c
    2500:	200002c0 	.word	0x200002c0
    2504:	00000db1 	.word	0x00000db1

00002508 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2508:	b570      	push	{r4, r5, r6, lr}
    250a:	b082      	sub	sp, #8
    250c:	0005      	movs	r5, r0
    250e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2510:	2200      	movs	r2, #0
    2512:	466b      	mov	r3, sp
    2514:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2516:	4c06      	ldr	r4, [pc, #24]	; (2530 <usart_serial_getchar+0x28>)
    2518:	466b      	mov	r3, sp
    251a:	1d99      	adds	r1, r3, #6
    251c:	0028      	movs	r0, r5
    251e:	47a0      	blx	r4
    2520:	2800      	cmp	r0, #0
    2522:	d1f9      	bne.n	2518 <usart_serial_getchar+0x10>

	*c = temp;
    2524:	466b      	mov	r3, sp
    2526:	3306      	adds	r3, #6
    2528:	881b      	ldrh	r3, [r3, #0]
    252a:	7033      	strb	r3, [r6, #0]
}
    252c:	b002      	add	sp, #8
    252e:	bd70      	pop	{r4, r5, r6, pc}
    2530:	00001739 	.word	0x00001739

00002534 <usart_serial_putchar>:
{
    2534:	b570      	push	{r4, r5, r6, lr}
    2536:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2538:	b28c      	uxth	r4, r1
    253a:	4e03      	ldr	r6, [pc, #12]	; (2548 <usart_serial_putchar+0x14>)
    253c:	0021      	movs	r1, r4
    253e:	0028      	movs	r0, r5
    2540:	47b0      	blx	r6
    2542:	2800      	cmp	r0, #0
    2544:	d1fa      	bne.n	253c <usart_serial_putchar+0x8>
}
    2546:	bd70      	pop	{r4, r5, r6, pc}
    2548:	0000170d 	.word	0x0000170d

0000254c <get_gpio_pin>:
{
    254c:	b530      	push	{r4, r5, lr}
    254e:	b083      	sub	sp, #12
    2550:	000c      	movs	r4, r1
	switch (port) {
    2552:	2861      	cmp	r0, #97	; 0x61
    2554:	d006      	beq.n	2564 <get_gpio_pin+0x18>
    2556:	2862      	cmp	r0, #98	; 0x62
    2558:	d013      	beq.n	2582 <get_gpio_pin+0x36>
	int pin_val = -1;
    255a:	2501      	movs	r5, #1
    255c:	426d      	negs	r5, r5
}
    255e:	0028      	movs	r0, r5
    2560:	b003      	add	sp, #12
    2562:	bd30      	pop	{r4, r5, pc}
		switch (pin) {
    2564:	2908      	cmp	r1, #8
    2566:	d014      	beq.n	2592 <get_gpio_pin+0x46>
    2568:	2909      	cmp	r1, #9
    256a:	d014      	beq.n	2596 <get_gpio_pin+0x4a>
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    256c:	2303      	movs	r3, #3
    256e:	9300      	str	r3, [sp, #0]
    2570:	3b01      	subs	r3, #1
    2572:	2209      	movs	r2, #9
    2574:	2108      	movs	r1, #8
    2576:	480e      	ldr	r0, [pc, #56]	; (25b0 <get_gpio_pin+0x64>)
    2578:	4d0e      	ldr	r5, [pc, #56]	; (25b4 <get_gpio_pin+0x68>)
    257a:	47a8      	blx	r5
	int pin_val = -1;
    257c:	2501      	movs	r5, #1
    257e:	426d      	negs	r5, r5
			break;
    2580:	e001      	b.n	2586 <get_gpio_pin+0x3a>
	int pin_val = -1;
    2582:	2501      	movs	r5, #1
    2584:	426d      	negs	r5, r5
		switch (pin) {
    2586:	2c02      	cmp	r4, #2
    2588:	d00f      	beq.n	25aa <get_gpio_pin+0x5e>
    258a:	2c03      	cmp	r4, #3
    258c:	d104      	bne.n	2598 <get_gpio_pin+0x4c>
			pin_val = PIN_PB03;
    258e:	2523      	movs	r5, #35	; 0x23
    2590:	e7e5      	b.n	255e <get_gpio_pin+0x12>
			pin_val = PIN_PA08;
    2592:	000d      	movs	r5, r1
    2594:	e7f7      	b.n	2586 <get_gpio_pin+0x3a>
			pin_val = PIN_PA09;
    2596:	000d      	movs	r5, r1
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    2598:	2303      	movs	r3, #3
    259a:	9300      	str	r3, [sp, #0]
    259c:	3b01      	subs	r3, #1
    259e:	2209      	movs	r2, #9
    25a0:	2108      	movs	r1, #8
    25a2:	4803      	ldr	r0, [pc, #12]	; (25b0 <get_gpio_pin+0x64>)
    25a4:	4c03      	ldr	r4, [pc, #12]	; (25b4 <get_gpio_pin+0x68>)
    25a6:	47a0      	blx	r4
    25a8:	e7d9      	b.n	255e <get_gpio_pin+0x12>
			pin_val = PIN_PB02;
    25aa:	2522      	movs	r5, #34	; 0x22
	return pin_val;
    25ac:	e7d7      	b.n	255e <get_gpio_pin+0x12>
    25ae:	46c0      	nop			; (mov r8, r8)
    25b0:	00005edc 	.word	0x00005edc
    25b4:	00004c05 	.word	0x00004c05

000025b8 <help>:
{
    25b8:	b510      	push	{r4, lr}
	printf("help																- Prints all the available commands and a short synopsis\r\n"
    25ba:	4802      	ldr	r0, [pc, #8]	; (25c4 <help+0xc>)
    25bc:	4b02      	ldr	r3, [pc, #8]	; (25c8 <help+0x10>)
    25be:	4798      	blx	r3
}
    25c0:	bd10      	pop	{r4, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	00005f44 	.word	0x00005f44
    25c8:	00004cf9 	.word	0x00004cf9

000025cc <ver_bl>:
{
    25cc:	b510      	push	{r4, lr}
	printf("Version: %s \r\n", BL_VERSION);
    25ce:	4902      	ldr	r1, [pc, #8]	; (25d8 <ver_bl+0xc>)
    25d0:	4802      	ldr	r0, [pc, #8]	; (25dc <ver_bl+0x10>)
    25d2:	4b03      	ldr	r3, [pc, #12]	; (25e0 <ver_bl+0x14>)
    25d4:	4798      	blx	r3
}
    25d6:	bd10      	pop	{r4, pc}
    25d8:	000064b4 	.word	0x000064b4
    25dc:	000064bc 	.word	0x000064bc
    25e0:	00004c05 	.word	0x00004c05

000025e4 <ver_app>:
{
    25e4:	b510      	push	{r4, lr}
	printf("Version: %s \r\n", APP_VERSION);
    25e6:	4902      	ldr	r1, [pc, #8]	; (25f0 <ver_app+0xc>)
    25e8:	4802      	ldr	r0, [pc, #8]	; (25f4 <ver_app+0x10>)
    25ea:	4b03      	ldr	r3, [pc, #12]	; (25f8 <ver_app+0x14>)
    25ec:	4798      	blx	r3
}
    25ee:	bd10      	pop	{r4, pc}
    25f0:	000064b4 	.word	0x000064b4
    25f4:	000064bc 	.word	0x000064bc
    25f8:	00004c05 	.word	0x00004c05

000025fc <mac>:
{
    25fc:	b510      	push	{r4, lr}
	printf("00.00.00.00\r\n");
    25fe:	4802      	ldr	r0, [pc, #8]	; (2608 <mac+0xc>)
    2600:	4b02      	ldr	r3, [pc, #8]	; (260c <mac+0x10>)
    2602:	4798      	blx	r3
}
    2604:	bd10      	pop	{r4, pc}
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	000063c8 	.word	0x000063c8
    260c:	00004cf9 	.word	0x00004cf9

00002610 <ip>:
{
    2610:	b510      	push	{r4, lr}
	printf("255.255.255.255");
    2612:	4802      	ldr	r0, [pc, #8]	; (261c <ip+0xc>)
    2614:	4b02      	ldr	r3, [pc, #8]	; (2620 <ip+0x10>)
    2616:	4798      	blx	r3
}
    2618:	bd10      	pop	{r4, pc}
    261a:	46c0      	nop			; (mov r8, r8)
    261c:	000063b8 	.word	0x000063b8
    2620:	00004c05 	.word	0x00004c05

00002624 <print_general_error>:
{
    2624:	b510      	push	{r4, lr}
    2626:	0001      	movs	r1, r0
	printf("there was an error parsing your args for %s. See help for correct usage.\r\n", func_name);
    2628:	4801      	ldr	r0, [pc, #4]	; (2630 <print_general_error+0xc>)
    262a:	4b02      	ldr	r3, [pc, #8]	; (2634 <print_general_error+0x10>)
    262c:	4798      	blx	r3
}
    262e:	bd10      	pop	{r4, pc}
    2630:	0000645c 	.word	0x0000645c
    2634:	00004c05 	.word	0x00004c05

00002638 <print_args_error>:
{
    2638:	b510      	push	{r4, lr}
    263a:	0013      	movs	r3, r2
	printf("Invalid number of args: %s requires %d arguments and you provided %d \r\n."
    263c:	000a      	movs	r2, r1
    263e:	0001      	movs	r1, r0
    2640:	4801      	ldr	r0, [pc, #4]	; (2648 <print_args_error+0x10>)
    2642:	4c02      	ldr	r4, [pc, #8]	; (264c <print_args_error+0x14>)
    2644:	47a0      	blx	r4
}
    2646:	bd10      	pop	{r4, pc}
    2648:	000063f0 	.word	0x000063f0
    264c:	00004c05 	.word	0x00004c05

00002650 <configure_i2c>:
{
    2650:	b530      	push	{r4, r5, lr}
    2652:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2654:	ab01      	add	r3, sp, #4
    2656:	2264      	movs	r2, #100	; 0x64
    2658:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    265a:	4a22      	ldr	r2, [pc, #136]	; (26e4 <configure_i2c+0x94>)
    265c:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    265e:	2200      	movs	r2, #0
    2660:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2662:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    2664:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2666:	2180      	movs	r1, #128	; 0x80
    2668:	0389      	lsls	r1, r1, #14
    266a:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    266c:	2101      	movs	r1, #1
    266e:	4249      	negs	r1, r1
    2670:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    2672:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2674:	3125      	adds	r1, #37	; 0x25
    2676:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2678:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    267a:	3108      	adds	r1, #8
    267c:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    267e:	3101      	adds	r1, #1
    2680:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    2682:	3101      	adds	r1, #1
    2684:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2686:	32d7      	adds	r2, #215	; 0xd7
    2688:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    268a:	4a17      	ldr	r2, [pc, #92]	; (26e8 <configure_i2c+0x98>)
    268c:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    268e:	4a17      	ldr	r2, [pc, #92]	; (26ec <configure_i2c+0x9c>)
    2690:	9209      	str	r2, [sp, #36]	; 0x24
	while (i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master) != STATUS_OK);
    2692:	4d17      	ldr	r5, [pc, #92]	; (26f0 <configure_i2c+0xa0>)
    2694:	4c17      	ldr	r4, [pc, #92]	; (26f4 <configure_i2c+0xa4>)
    2696:	aa01      	add	r2, sp, #4
    2698:	4917      	ldr	r1, [pc, #92]	; (26f8 <configure_i2c+0xa8>)
    269a:	0028      	movs	r0, r5
    269c:	47a0      	blx	r4
    269e:	2800      	cmp	r0, #0
    26a0:	d1f9      	bne.n	2696 <configure_i2c+0x46>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    26a2:	4b13      	ldr	r3, [pc, #76]	; (26f0 <configure_i2c+0xa0>)
    26a4:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    26a6:	2207      	movs	r2, #7
    26a8:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    26aa:	421a      	tst	r2, r3
    26ac:	d1fc      	bne.n	26a8 <configure_i2c+0x58>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    26ae:	6823      	ldr	r3, [r4, #0]
    26b0:	2202      	movs	r2, #2
    26b2:	4313      	orrs	r3, r2
    26b4:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    26b6:	4d0e      	ldr	r5, [pc, #56]	; (26f0 <configure_i2c+0xa0>)
    26b8:	6828      	ldr	r0, [r5, #0]
    26ba:	4b10      	ldr	r3, [pc, #64]	; (26fc <configure_i2c+0xac>)
    26bc:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    26be:	231f      	movs	r3, #31
    26c0:	4018      	ands	r0, r3
    26c2:	3b1e      	subs	r3, #30
    26c4:	4083      	lsls	r3, r0
    26c6:	4a0e      	ldr	r2, [pc, #56]	; (2700 <configure_i2c+0xb0>)
    26c8:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    26ca:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    26cc:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    26ce:	2110      	movs	r1, #16
    26d0:	8b62      	ldrh	r2, [r4, #26]
    26d2:	420a      	tst	r2, r1
    26d4:	d104      	bne.n	26e0 <configure_i2c+0x90>
		timeout_counter++;
    26d6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    26d8:	4283      	cmp	r3, r0
    26da:	d3f9      	bcc.n	26d0 <configure_i2c+0x80>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    26dc:	2310      	movs	r3, #16
    26de:	8363      	strh	r3, [r4, #26]
}
    26e0:	b00f      	add	sp, #60	; 0x3c
    26e2:	bd30      	pop	{r4, r5, pc}
    26e4:	00000d48 	.word	0x00000d48
    26e8:	00080003 	.word	0x00080003
    26ec:	00090003 	.word	0x00090003
    26f0:	200002c0 	.word	0x200002c0
    26f4:	00000599 	.word	0x00000599
    26f8:	42001000 	.word	0x42001000
    26fc:	00001ad5 	.word	0x00001ad5
    2700:	e000e100 	.word	0xe000e100

00002704 <configure_i2c_callbacks>:

/**
 * Configures callbacks for I2C
 */
void configure_i2c_callbacks(void)
{
    2704:	b510      	push	{r4, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2c_master_instance, i2c_write_complete_callback,
    2706:	4c05      	ldr	r4, [pc, #20]	; (271c <configure_i2c_callbacks+0x18>)
    2708:	2200      	movs	r2, #0
    270a:	4905      	ldr	r1, [pc, #20]	; (2720 <configure_i2c_callbacks+0x1c>)
    270c:	0020      	movs	r0, r4
    270e:	4b05      	ldr	r3, [pc, #20]	; (2724 <configure_i2c_callbacks+0x20>)
    2710:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    2712:	7e63      	ldrb	r3, [r4, #25]
    2714:	2201      	movs	r2, #1
    2716:	4313      	orrs	r3, r2
    2718:	7663      	strb	r3, [r4, #25]
				     I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	i2c_master_enable_callback(&i2c_master_instance,
				   I2C_MASTER_CALLBACK_WRITE_COMPLETE);
}
    271a:	bd10      	pop	{r4, pc}
    271c:	200002c0 	.word	0x200002c0
    2720:	000024f1 	.word	0x000024f1
    2724:	00000d99 	.word	0x00000d99

00002728 <i2c_scan>:
{
    2728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configure_i2c();
    272a:	4b14      	ldr	r3, [pc, #80]	; (277c <i2c_scan+0x54>)
    272c:	4798      	blx	r3
	configure_i2c_callbacks();
    272e:	4b14      	ldr	r3, [pc, #80]	; (2780 <i2c_scan+0x58>)
    2730:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    2732:	2400      	movs	r4, #0
		wr_packet.address = slave_address;
    2734:	4d13      	ldr	r5, [pc, #76]	; (2784 <i2c_scan+0x5c>)
		wr_buffer[0] = 0x05;
    2736:	4e14      	ldr	r6, [pc, #80]	; (2788 <i2c_scan+0x60>)
		wr_packet.data = wr_buffer;
    2738:	0037      	movs	r7, r6
    273a:	e005      	b.n	2748 <i2c_scan+0x20>
		i2c_master_send_stop(&i2c_master_instance);
    273c:	4813      	ldr	r0, [pc, #76]	; (278c <i2c_scan+0x64>)
    273e:	4b14      	ldr	r3, [pc, #80]	; (2790 <i2c_scan+0x68>)
    2740:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    2742:	3401      	adds	r4, #1
    2744:	2c80      	cmp	r4, #128	; 0x80
    2746:	d017      	beq.n	2778 <i2c_scan+0x50>
		wr_packet.address = slave_address;
    2748:	b2a3      	uxth	r3, r4
    274a:	802b      	strh	r3, [r5, #0]
		rd_packet.address = slave_address;
    274c:	4a11      	ldr	r2, [pc, #68]	; (2794 <i2c_scan+0x6c>)
    274e:	8013      	strh	r3, [r2, #0]
		wr_packet.data_length = 1;
    2750:	2301      	movs	r3, #1
    2752:	806b      	strh	r3, [r5, #2]
		wr_buffer[0] = 0x05;
    2754:	3304      	adds	r3, #4
    2756:	7033      	strb	r3, [r6, #0]
		wr_packet.data = wr_buffer;
    2758:	606f      	str	r7, [r5, #4]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    275a:	0029      	movs	r1, r5
    275c:	480b      	ldr	r0, [pc, #44]	; (278c <i2c_scan+0x64>)
    275e:	4b0e      	ldr	r3, [pc, #56]	; (2798 <i2c_scan+0x70>)
    2760:	4798      	blx	r3
		if (i2c_status == STATUS_OK) {
    2762:	2800      	cmp	r0, #0
    2764:	d1ea      	bne.n	273c <i2c_scan+0x14>
			i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
    2766:	490b      	ldr	r1, [pc, #44]	; (2794 <i2c_scan+0x6c>)
    2768:	4808      	ldr	r0, [pc, #32]	; (278c <i2c_scan+0x64>)
    276a:	4b0c      	ldr	r3, [pc, #48]	; (279c <i2c_scan+0x74>)
    276c:	4798      	blx	r3
			printf("Address found at %#X\r\n", slave_address);
    276e:	0021      	movs	r1, r4
    2770:	480b      	ldr	r0, [pc, #44]	; (27a0 <i2c_scan+0x78>)
    2772:	4b0c      	ldr	r3, [pc, #48]	; (27a4 <i2c_scan+0x7c>)
    2774:	4798      	blx	r3
    2776:	e7e1      	b.n	273c <i2c_scan+0x14>
}
    2778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    277a:	46c0      	nop			; (mov r8, r8)
    277c:	00002651 	.word	0x00002651
    2780:	00002705 	.word	0x00002705
    2784:	20000020 	.word	0x20000020
    2788:	20000018 	.word	0x20000018
    278c:	200002c0 	.word	0x200002c0
    2790:	00000be9 	.word	0x00000be9
    2794:	2000000c 	.word	0x2000000c
    2798:	00000bc5 	.word	0x00000bc5
    279c:	00000ba1 	.word	0x00000ba1
    27a0:	00006308 	.word	0x00006308
    27a4:	00004c05 	.word	0x00004c05

000027a8 <configure_usart>:
 *      @li RX Pin: PA20
 *      @li TX Pin: PA21
 *      @li SERCOM: SERCOM3
 */
void configure_usart(void)
{
    27a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27aa:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    27ac:	2380      	movs	r3, #128	; 0x80
    27ae:	05db      	lsls	r3, r3, #23
    27b0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    27b2:	2300      	movs	r3, #0
    27b4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    27b6:	22ff      	movs	r2, #255	; 0xff
    27b8:	4669      	mov	r1, sp
    27ba:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    27bc:	2200      	movs	r2, #0
    27be:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    27c0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    27c2:	2401      	movs	r4, #1
    27c4:	2124      	movs	r1, #36	; 0x24
    27c6:	4668      	mov	r0, sp
    27c8:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    27ca:	3101      	adds	r1, #1
    27cc:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    27ce:	3101      	adds	r1, #1
    27d0:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    27d2:	3101      	adds	r1, #1
    27d4:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    27d6:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    27d8:	3105      	adds	r1, #5
    27da:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    27dc:	3101      	adds	r1, #1
    27de:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    27e0:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    27e2:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    27e4:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    27e6:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    27e8:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    27ea:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    27ec:	2313      	movs	r3, #19
    27ee:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    27f0:	7742      	strb	r2, [r0, #29]
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 115200;
    27f2:	23e1      	movs	r3, #225	; 0xe1
    27f4:	025b      	lsls	r3, r3, #9
    27f6:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    27f8:	23c4      	movs	r3, #196	; 0xc4
    27fa:	039b      	lsls	r3, r3, #14
    27fc:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    27fe:	2301      	movs	r3, #1
    2800:	425b      	negs	r3, r3
    2802:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    2804:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA20D_SERCOM3_PAD2;
    2806:	4b17      	ldr	r3, [pc, #92]	; (2864 <configure_usart+0xbc>)
    2808:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA21D_SERCOM3_PAD3;
    280a:	4b17      	ldr	r3, [pc, #92]	; (2868 <configure_usart+0xc0>)
    280c:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    280e:	4d17      	ldr	r5, [pc, #92]	; (286c <configure_usart+0xc4>)
    2810:	4b17      	ldr	r3, [pc, #92]	; (2870 <configure_usart+0xc8>)
    2812:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2814:	4a17      	ldr	r2, [pc, #92]	; (2874 <configure_usart+0xcc>)
    2816:	4b18      	ldr	r3, [pc, #96]	; (2878 <configure_usart+0xd0>)
    2818:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    281a:	4a18      	ldr	r2, [pc, #96]	; (287c <configure_usart+0xd4>)
    281c:	4b18      	ldr	r3, [pc, #96]	; (2880 <configure_usart+0xd8>)
    281e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2820:	466a      	mov	r2, sp
    2822:	4918      	ldr	r1, [pc, #96]	; (2884 <configure_usart+0xdc>)
    2824:	0028      	movs	r0, r5
    2826:	4b18      	ldr	r3, [pc, #96]	; (2888 <configure_usart+0xe0>)
    2828:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    282a:	4f18      	ldr	r7, [pc, #96]	; (288c <configure_usart+0xe4>)
    282c:	683b      	ldr	r3, [r7, #0]
    282e:	6898      	ldr	r0, [r3, #8]
    2830:	2100      	movs	r1, #0
    2832:	4e17      	ldr	r6, [pc, #92]	; (2890 <configure_usart+0xe8>)
    2834:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2836:	683b      	ldr	r3, [r7, #0]
    2838:	6858      	ldr	r0, [r3, #4]
    283a:	2100      	movs	r1, #0
    283c:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    283e:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2840:	0030      	movs	r0, r6
    2842:	4b14      	ldr	r3, [pc, #80]	; (2894 <configure_usart+0xec>)
    2844:	4798      	blx	r3
    2846:	231f      	movs	r3, #31
    2848:	4018      	ands	r0, r3
    284a:	4084      	lsls	r4, r0
    284c:	4b12      	ldr	r3, [pc, #72]	; (2898 <configure_usart+0xf0>)
    284e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2850:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2852:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2854:	2b00      	cmp	r3, #0
    2856:	d1fc      	bne.n	2852 <configure_usart+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2858:	6833      	ldr	r3, [r6, #0]
    285a:	2202      	movs	r2, #2
    285c:	4313      	orrs	r3, r2
    285e:	6033      	str	r3, [r6, #0]

	stdio_serial_init(&usart_instance, SERCOM3, &config_usart);

	usart_enable(&usart_instance);
}
    2860:	b011      	add	sp, #68	; 0x44
    2862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2864:	00140003 	.word	0x00140003
    2868:	00150003 	.word	0x00150003
    286c:	2000028c 	.word	0x2000028c
    2870:	20000270 	.word	0x20000270
    2874:	00002535 	.word	0x00002535
    2878:	2000026c 	.word	0x2000026c
    287c:	00002509 	.word	0x00002509
    2880:	20000268 	.word	0x20000268
    2884:	42001400 	.word	0x42001400
    2888:	000013c9 	.word	0x000013c9
    288c:	2000002c 	.word	0x2000002c
    2890:	00004d31 	.word	0x00004d31
    2894:	00001ad5 	.word	0x00001ad5
    2898:	e000e100 	.word	0xe000e100

0000289c <configure_adc>:
 *      @li Reference voltage: VCC (3.3V)
 *      @li clock prescale: 16x
 * @param pin pin to read value from
 */
void configure_adc(int pin)
{
    289c:	b510      	push	{r4, lr}
    289e:	b08c      	sub	sp, #48	; 0x30
    28a0:	0004      	movs	r4, r0
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    28a2:	4668      	mov	r0, sp
    28a4:	4b11      	ldr	r3, [pc, #68]	; (28ec <configure_adc+0x50>)
    28a6:	4798      	blx	r3
	config_adc.positive_input = pin;
    28a8:	466b      	mov	r3, sp
    28aa:	731c      	strb	r4, [r3, #12]
	config_adc.reference = ADC_REFERENCE_INTVCC1;
    28ac:	2302      	movs	r3, #2
    28ae:	466a      	mov	r2, sp
    28b0:	7053      	strb	r3, [r2, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    28b2:	33ff      	adds	r3, #255	; 0xff
    28b4:	33ff      	adds	r3, #255	; 0xff
    28b6:	8053      	strh	r3, [r2, #2]
	adc_init(&adc_instance, ADC, &config_adc);
    28b8:	4c0d      	ldr	r4, [pc, #52]	; (28f0 <configure_adc+0x54>)
    28ba:	490e      	ldr	r1, [pc, #56]	; (28f4 <configure_adc+0x58>)
    28bc:	0020      	movs	r0, r4
    28be:	4b0e      	ldr	r3, [pc, #56]	; (28f8 <configure_adc+0x5c>)
    28c0:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    28c2:	6822      	ldr	r2, [r4, #0]
    28c4:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    28c6:	b25b      	sxtb	r3, r3
    28c8:	2b00      	cmp	r3, #0
    28ca:	dbfb      	blt.n	28c4 <configure_adc+0x28>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    28cc:	230f      	movs	r3, #15
    28ce:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    28d0:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    28d2:	7813      	ldrb	r3, [r2, #0]
    28d4:	2102      	movs	r1, #2
    28d6:	430b      	orrs	r3, r1
    28d8:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    28da:	4b05      	ldr	r3, [pc, #20]	; (28f0 <configure_adc+0x54>)
    28dc:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    28de:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    28e0:	b25b      	sxtb	r3, r3
    28e2:	2b00      	cmp	r3, #0
    28e4:	dbfb      	blt.n	28de <configure_adc+0x42>
	adc_enable(&adc_instance);
}
    28e6:	b00c      	add	sp, #48	; 0x30
    28e8:	bd10      	pop	{r4, pc}
    28ea:	46c0      	nop			; (mov r8, r8)
    28ec:	00000155 	.word	0x00000155
    28f0:	200002e8 	.word	0x200002e8
    28f4:	42004000 	.word	0x42004000
    28f8:	0000019d 	.word	0x0000019d

000028fc <adc_get>:
{
    28fc:	b570      	push	{r4, r5, r6, lr}
	switch (port) {
    28fe:	2861      	cmp	r0, #97	; 0x61
    2900:	d115      	bne.n	292e <adc_get+0x32>
		switch (pin) {
    2902:	2902      	cmp	r1, #2
    2904:	d167      	bne.n	29d6 <adc_get+0xda>
			printf("ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    2906:	4b3a      	ldr	r3, [pc, #232]	; (29f0 <adc_get+0xf4>)
    2908:	4798      	blx	r3
    290a:	2362      	movs	r3, #98	; 0x62
    290c:	5cc2      	ldrb	r2, [r0, r3]
    290e:	3b5f      	subs	r3, #95	; 0x5f
    2910:	4013      	ands	r3, r2
    2912:	2b02      	cmp	r3, #2
    2914:	d008      	beq.n	2928 <adc_get+0x2c>
			pin_val = ADC_POSITIVE_INPUT_PIN0;
    2916:	2600      	movs	r6, #0
			printf("ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    2918:	2161      	movs	r1, #97	; 0x61
    291a:	2202      	movs	r2, #2
    291c:	4835      	ldr	r0, [pc, #212]	; (29f4 <adc_get+0xf8>)
    291e:	4b36      	ldr	r3, [pc, #216]	; (29f8 <adc_get+0xfc>)
    2920:	4798      	blx	r3
	if (pin_val != -1) {
    2922:	1c73      	adds	r3, r6, #1
    2924:	d113      	bne.n	294e <adc_get+0x52>
}
    2926:	bd70      	pop	{r4, r5, r6, pc}
			pin_val = ADC_POSITIVE_INPUT_PIN0;
    2928:	2600      	movs	r6, #0
			printf("ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    292a:	2141      	movs	r1, #65	; 0x41
    292c:	e7f5      	b.n	291a <adc_get+0x1e>
		printf("ADC can currently only be configured on %c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    292e:	4b30      	ldr	r3, [pc, #192]	; (29f0 <adc_get+0xf4>)
    2930:	4798      	blx	r3
    2932:	2362      	movs	r3, #98	; 0x62
    2934:	5cc2      	ldrb	r2, [r0, r3]
    2936:	3b5f      	subs	r3, #95	; 0x5f
    2938:	4013      	ands	r3, r2
    293a:	2b02      	cmp	r3, #2
    293c:	d005      	beq.n	294a <adc_get+0x4e>
    293e:	2161      	movs	r1, #97	; 0x61
    2940:	2202      	movs	r2, #2
    2942:	482e      	ldr	r0, [pc, #184]	; (29fc <adc_get+0x100>)
    2944:	4b2c      	ldr	r3, [pc, #176]	; (29f8 <adc_get+0xfc>)
    2946:	4798      	blx	r3
    2948:	e7ed      	b.n	2926 <adc_get+0x2a>
    294a:	2141      	movs	r1, #65	; 0x41
    294c:	e7f8      	b.n	2940 <adc_get+0x44>
		configure_adc(pin_val);
    294e:	0030      	movs	r0, r6
    2950:	4b2b      	ldr	r3, [pc, #172]	; (2a00 <adc_get+0x104>)
    2952:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2954:	4b2b      	ldr	r3, [pc, #172]	; (2a04 <adc_get+0x108>)
    2956:	6819      	ldr	r1, [r3, #0]
    2958:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    295a:	b25b      	sxtb	r3, r3
    295c:	2b00      	cmp	r3, #0
    295e:	dbfb      	blt.n	2958 <adc_get+0x5c>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2960:	7b0b      	ldrb	r3, [r1, #12]
    2962:	2202      	movs	r2, #2
    2964:	4313      	orrs	r3, r2
    2966:	730b      	strb	r3, [r1, #12]
    2968:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    296a:	b25b      	sxtb	r3, r3
    296c:	2b00      	cmp	r3, #0
    296e:	dbfb      	blt.n	2968 <adc_get+0x6c>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2970:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2972:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2974:	2402      	movs	r4, #2
    2976:	e001      	b.n	297c <adc_get+0x80>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2978:	4210      	tst	r0, r2
    297a:	d10a      	bne.n	2992 <adc_get+0x96>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    297c:	7e0b      	ldrb	r3, [r1, #24]
    297e:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2980:	0002      	movs	r2, r0
    2982:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    2984:	421d      	tst	r5, r3
    2986:	d000      	beq.n	298a <adc_get+0x8e>
		status_flags |= ADC_STATUS_WINDOW;
    2988:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    298a:	421c      	tst	r4, r3
    298c:	d0f4      	beq.n	2978 <adc_get+0x7c>
		status_flags |= ADC_STATUS_OVERRUN;
    298e:	432a      	orrs	r2, r5
    2990:	e7f2      	b.n	2978 <adc_get+0x7c>
    2992:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    2994:	b25b      	sxtb	r3, r3
    2996:	2b00      	cmp	r3, #0
    2998:	dbfb      	blt.n	2992 <adc_get+0x96>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    299a:	8b4a      	ldrh	r2, [r1, #26]
    299c:	b292      	uxth	r2, r2
	adc_module->INTFLAG.reg = int_flags;
    299e:	2301      	movs	r3, #1
    29a0:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    29a2:	7e08      	ldrb	r0, [r1, #24]
    29a4:	b2c0      	uxtb	r0, r0
	if (int_flags & ADC_INTFLAG_RESRDY) {
    29a6:	4003      	ands	r3, r0
	if (int_flags & ADC_INTFLAG_WINMON) {
    29a8:	0744      	lsls	r4, r0, #29
    29aa:	d501      	bpl.n	29b0 <adc_get+0xb4>
		status_flags |= ADC_STATUS_WINDOW;
    29ac:	2402      	movs	r4, #2
    29ae:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    29b0:	0780      	lsls	r0, r0, #30
    29b2:	d501      	bpl.n	29b8 <adc_get+0xbc>
		status_flags |= ADC_STATUS_OVERRUN;
    29b4:	2004      	movs	r0, #4
    29b6:	4303      	orrs	r3, r0

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    29b8:	075b      	lsls	r3, r3, #29
    29ba:	d501      	bpl.n	29c0 <adc_get+0xc4>
	adc_module->INTFLAG.reg = int_flags;
    29bc:	2302      	movs	r3, #2
    29be:	760b      	strb	r3, [r1, #24]
		printf("Pin %d ADC value: %d\r\n", pin_val, adc_result);
    29c0:	0031      	movs	r1, r6
    29c2:	4811      	ldr	r0, [pc, #68]	; (2a08 <adc_get+0x10c>)
    29c4:	4b0c      	ldr	r3, [pc, #48]	; (29f8 <adc_get+0xfc>)
    29c6:	4798      	blx	r3
    29c8:	e7ad      	b.n	2926 <adc_get+0x2a>
			printf("ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    29ca:	2202      	movs	r2, #2
    29cc:	2141      	movs	r1, #65	; 0x41
    29ce:	4809      	ldr	r0, [pc, #36]	; (29f4 <adc_get+0xf8>)
    29d0:	4b09      	ldr	r3, [pc, #36]	; (29f8 <adc_get+0xfc>)
    29d2:	4798      	blx	r3
    29d4:	e7a7      	b.n	2926 <adc_get+0x2a>
    29d6:	4b06      	ldr	r3, [pc, #24]	; (29f0 <adc_get+0xf4>)
    29d8:	4798      	blx	r3
    29da:	2362      	movs	r3, #98	; 0x62
    29dc:	5cc2      	ldrb	r2, [r0, r3]
    29de:	3b5f      	subs	r3, #95	; 0x5f
    29e0:	4013      	ands	r3, r2
    29e2:	2b02      	cmp	r3, #2
    29e4:	d0f1      	beq.n	29ca <adc_get+0xce>
	int pin_val = -1;
    29e6:	2601      	movs	r6, #1
    29e8:	4276      	negs	r6, r6
			printf("ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    29ea:	2161      	movs	r1, #97	; 0x61
    29ec:	e795      	b.n	291a <adc_get+0x1e>
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	00004a3d 	.word	0x00004a3d
    29f4:	00005e3c 	.word	0x00005e3c
    29f8:	00004c05 	.word	0x00004c05
    29fc:	00005e80 	.word	0x00005e80
    2a00:	0000289d 	.word	0x0000289d
    2a04:	200002e8 	.word	0x200002e8
    2a08:	00005ec4 	.word	0x00005ec4

00002a0c <mcu_temp>:
{
    2a0c:	b570      	push	{r4, r5, r6, lr}
	configure_adc(pin);
    2a0e:	2018      	movs	r0, #24
    2a10:	4b1d      	ldr	r3, [pc, #116]	; (2a88 <mcu_temp+0x7c>)
    2a12:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2a14:	4b1d      	ldr	r3, [pc, #116]	; (2a8c <mcu_temp+0x80>)
    2a16:	6818      	ldr	r0, [r3, #0]
    2a18:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    2a1a:	b25b      	sxtb	r3, r3
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	dbfb      	blt.n	2a18 <mcu_temp+0xc>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2a20:	7b03      	ldrb	r3, [r0, #12]
    2a22:	2202      	movs	r2, #2
    2a24:	4313      	orrs	r3, r2
    2a26:	7303      	strb	r3, [r0, #12]
    2a28:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    2a2a:	b25b      	sxtb	r3, r3
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	dbfb      	blt.n	2a28 <mcu_temp+0x1c>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2a30:	2101      	movs	r1, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2a32:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2a34:	2402      	movs	r4, #2
    2a36:	e001      	b.n	2a3c <mcu_temp+0x30>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2a38:	4211      	tst	r1, r2
    2a3a:	d10a      	bne.n	2a52 <mcu_temp+0x46>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2a3c:	7e03      	ldrb	r3, [r0, #24]
    2a3e:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2a40:	000a      	movs	r2, r1
    2a42:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    2a44:	421d      	tst	r5, r3
    2a46:	d000      	beq.n	2a4a <mcu_temp+0x3e>
		status_flags |= ADC_STATUS_WINDOW;
    2a48:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2a4a:	421c      	tst	r4, r3
    2a4c:	d0f4      	beq.n	2a38 <mcu_temp+0x2c>
		status_flags |= ADC_STATUS_OVERRUN;
    2a4e:	432a      	orrs	r2, r5
    2a50:	e7f2      	b.n	2a38 <mcu_temp+0x2c>
    2a52:	7e43      	ldrb	r3, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    2a54:	b25b      	sxtb	r3, r3
    2a56:	2b00      	cmp	r3, #0
    2a58:	dbfb      	blt.n	2a52 <mcu_temp+0x46>
	*result = adc_module->RESULT.reg;
    2a5a:	8b41      	ldrh	r1, [r0, #26]
    2a5c:	b289      	uxth	r1, r1
	adc_module->INTFLAG.reg = int_flags;
    2a5e:	2301      	movs	r3, #1
    2a60:	7603      	strb	r3, [r0, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2a62:	7e02      	ldrb	r2, [r0, #24]
    2a64:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2a66:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    2a68:	0754      	lsls	r4, r2, #29
    2a6a:	d501      	bpl.n	2a70 <mcu_temp+0x64>
		status_flags |= ADC_STATUS_WINDOW;
    2a6c:	2402      	movs	r4, #2
    2a6e:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2a70:	0792      	lsls	r2, r2, #30
    2a72:	d501      	bpl.n	2a78 <mcu_temp+0x6c>
		status_flags |= ADC_STATUS_OVERRUN;
    2a74:	2204      	movs	r2, #4
    2a76:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2a78:	075b      	lsls	r3, r3, #29
    2a7a:	d501      	bpl.n	2a80 <mcu_temp+0x74>
	adc_module->INTFLAG.reg = int_flags;
    2a7c:	2302      	movs	r3, #2
    2a7e:	7603      	strb	r3, [r0, #24]
	printf("MCU temperature: %d\r\n", temperature);
    2a80:	4803      	ldr	r0, [pc, #12]	; (2a90 <mcu_temp+0x84>)
    2a82:	4b04      	ldr	r3, [pc, #16]	; (2a94 <mcu_temp+0x88>)
    2a84:	4798      	blx	r3
}
    2a86:	bd70      	pop	{r4, r5, r6, pc}
    2a88:	0000289d 	.word	0x0000289d
    2a8c:	200002e8 	.word	0x200002e8
    2a90:	000063d8 	.word	0x000063d8
    2a94:	00004c05 	.word	0x00004c05

00002a98 <configure_port_pins_set>:
/**
 * Sets a given port to output.
 * @param pin pin of the port to set
 */
void configure_port_pins_set(int pin)
{
    2a98:	b500      	push	{lr}
    2a9a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    2a9c:	a901      	add	r1, sp, #4
    2a9e:	2301      	movs	r3, #1
    2aa0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    2aa2:	2200      	movs	r2, #0
    2aa4:	708a      	strb	r2, [r1, #2]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2aa6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(pin, &config_port_pin);
    2aa8:	b2c0      	uxtb	r0, r0
    2aaa:	4b02      	ldr	r3, [pc, #8]	; (2ab4 <configure_port_pins_set+0x1c>)
    2aac:	4798      	blx	r3
}
    2aae:	b003      	add	sp, #12
    2ab0:	bd00      	pop	{pc}
    2ab2:	46c0      	nop			; (mov r8, r8)
    2ab4:	00001c0d 	.word	0x00001c0d

00002ab8 <gpio_set>:
{
    2ab8:	b570      	push	{r4, r5, r6, lr}
    2aba:	000d      	movs	r5, r1
	int pin_val = get_gpio_pin(port, pin);
    2abc:	4b0d      	ldr	r3, [pc, #52]	; (2af4 <gpio_set+0x3c>)
    2abe:	4798      	blx	r3
    2ac0:	0004      	movs	r4, r0
	if (pin_val != -1) {
    2ac2:	1c43      	adds	r3, r0, #1
    2ac4:	d014      	beq.n	2af0 <gpio_set+0x38>
		configure_port_pins_set(pin); //TODO: decide if this is necessary
    2ac6:	0028      	movs	r0, r5
    2ac8:	4b0b      	ldr	r3, [pc, #44]	; (2af8 <gpio_set+0x40>)
    2aca:	4798      	blx	r3
	if (port_index < PORT_INST_NUM) {
    2acc:	b2e2      	uxtb	r2, r4
		return NULL;
    2ace:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2ad0:	0621      	lsls	r1, r4, #24
    2ad2:	d404      	bmi.n	2ade <gpio_set+0x26>
		return &(ports[port_index]->Group[group_index]);
    2ad4:	0953      	lsrs	r3, r2, #5
    2ad6:	01db      	lsls	r3, r3, #7
    2ad8:	4908      	ldr	r1, [pc, #32]	; (2afc <gpio_set+0x44>)
    2ada:	468c      	mov	ip, r1
    2adc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2ade:	211f      	movs	r1, #31
    2ae0:	4011      	ands	r1, r2
    2ae2:	2201      	movs	r2, #1
    2ae4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2ae6:	619a      	str	r2, [r3, #24]
		printf("Pin %d set high\r\n", pin_val);
    2ae8:	0021      	movs	r1, r4
    2aea:	4805      	ldr	r0, [pc, #20]	; (2b00 <gpio_set+0x48>)
    2aec:	4b05      	ldr	r3, [pc, #20]	; (2b04 <gpio_set+0x4c>)
    2aee:	4798      	blx	r3
}
    2af0:	bd70      	pop	{r4, r5, r6, pc}
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	0000254d 	.word	0x0000254d
    2af8:	00002a99 	.word	0x00002a99
    2afc:	41004400 	.word	0x41004400
    2b00:	00005f30 	.word	0x00005f30
    2b04:	00004c05 	.word	0x00004c05

00002b08 <gpio_clear>:
{
    2b08:	b570      	push	{r4, r5, r6, lr}
    2b0a:	000d      	movs	r5, r1
	int pin_val = get_gpio_pin(port, pin);
    2b0c:	4b0d      	ldr	r3, [pc, #52]	; (2b44 <gpio_clear+0x3c>)
    2b0e:	4798      	blx	r3
    2b10:	0004      	movs	r4, r0
	if (pin_val != -1) {
    2b12:	1c43      	adds	r3, r0, #1
    2b14:	d014      	beq.n	2b40 <gpio_clear+0x38>
		configure_port_pins_set(pin); //TODO: decide if this is necessary
    2b16:	0028      	movs	r0, r5
    2b18:	4b0b      	ldr	r3, [pc, #44]	; (2b48 <gpio_clear+0x40>)
    2b1a:	4798      	blx	r3
	if (port_index < PORT_INST_NUM) {
    2b1c:	b2e2      	uxtb	r2, r4
		return NULL;
    2b1e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2b20:	0621      	lsls	r1, r4, #24
    2b22:	d404      	bmi.n	2b2e <gpio_clear+0x26>
		return &(ports[port_index]->Group[group_index]);
    2b24:	0953      	lsrs	r3, r2, #5
    2b26:	01db      	lsls	r3, r3, #7
    2b28:	4908      	ldr	r1, [pc, #32]	; (2b4c <gpio_clear+0x44>)
    2b2a:	468c      	mov	ip, r1
    2b2c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2b2e:	211f      	movs	r1, #31
    2b30:	4011      	ands	r1, r2
    2b32:	2201      	movs	r2, #1
    2b34:	408a      	lsls	r2, r1
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2b36:	615a      	str	r2, [r3, #20]
		printf("Pin %d cleared\r\n", pin_val);
    2b38:	0021      	movs	r1, r4
    2b3a:	4805      	ldr	r0, [pc, #20]	; (2b50 <gpio_clear+0x48>)
    2b3c:	4b05      	ldr	r3, [pc, #20]	; (2b54 <gpio_clear+0x4c>)
    2b3e:	4798      	blx	r3
}
    2b40:	bd70      	pop	{r4, r5, r6, pc}
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	0000254d 	.word	0x0000254d
    2b48:	00002a99 	.word	0x00002a99
    2b4c:	41004400 	.word	0x41004400
    2b50:	00005f08 	.word	0x00005f08
    2b54:	00004c05 	.word	0x00004c05

00002b58 <configure_port_pins_get>:
/**
 * Sets a given port to input
 * @param pin pin to set as input
 */
void configure_port_pins_get(int pin)
{
    2b58:	b500      	push	{lr}
    2b5a:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    2b5c:	a901      	add	r1, sp, #4
    2b5e:	2300      	movs	r3, #0
    2b60:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2b62:	2201      	movs	r2, #1
    2b64:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2b66:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(pin, &config_port_pin);
    2b68:	b2c0      	uxtb	r0, r0
    2b6a:	4b02      	ldr	r3, [pc, #8]	; (2b74 <configure_port_pins_get+0x1c>)
    2b6c:	4798      	blx	r3
}
    2b6e:	b003      	add	sp, #12
    2b70:	bd00      	pop	{pc}
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	00001c0d 	.word	0x00001c0d

00002b78 <gpio_get>:
{
    2b78:	b570      	push	{r4, r5, r6, lr}
    2b7a:	000d      	movs	r5, r1
	int pin_val = get_gpio_pin(port, pin);
    2b7c:	4b0d      	ldr	r3, [pc, #52]	; (2bb4 <gpio_get+0x3c>)
    2b7e:	4798      	blx	r3
    2b80:	0004      	movs	r4, r0
	configure_port_pins_get(pin); //TODO: decide if this is necessary
    2b82:	0028      	movs	r0, r5
    2b84:	4b0c      	ldr	r3, [pc, #48]	; (2bb8 <gpio_get+0x40>)
    2b86:	4798      	blx	r3
	if (port_index < PORT_INST_NUM) {
    2b88:	b2e0      	uxtb	r0, r4
		return NULL;
    2b8a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2b8c:	0622      	lsls	r2, r4, #24
    2b8e:	d404      	bmi.n	2b9a <gpio_get+0x22>
		return &(ports[port_index]->Group[group_index]);
    2b90:	0943      	lsrs	r3, r0, #5
    2b92:	01db      	lsls	r3, r3, #7
    2b94:	4a09      	ldr	r2, [pc, #36]	; (2bbc <gpio_get+0x44>)
    2b96:	4694      	mov	ip, r2
    2b98:	4463      	add	r3, ip
	return (port_base->IN.reg & pin_mask);
    2b9a:	6a1a      	ldr	r2, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2b9c:	211f      	movs	r1, #31
    2b9e:	4001      	ands	r1, r0
    2ba0:	2301      	movs	r3, #1
    2ba2:	408b      	lsls	r3, r1
	return (port_base->IN.reg & pin_mask);
    2ba4:	401a      	ands	r2, r3
    2ba6:	1e53      	subs	r3, r2, #1
    2ba8:	419a      	sbcs	r2, r3
	printf("pin %d value: %d\r\n", pin_val, state);
    2baa:	0021      	movs	r1, r4
    2bac:	4804      	ldr	r0, [pc, #16]	; (2bc0 <gpio_get+0x48>)
    2bae:	4b05      	ldr	r3, [pc, #20]	; (2bc4 <gpio_get+0x4c>)
    2bb0:	4798      	blx	r3
}
    2bb2:	bd70      	pop	{r4, r5, r6, pc}
    2bb4:	0000254d 	.word	0x0000254d
    2bb8:	00002b59 	.word	0x00002b59
    2bbc:	41004400 	.word	0x41004400
    2bc0:	00005f1c 	.word	0x00005f1c
    2bc4:	00004c05 	.word	0x00004c05

00002bc8 <input_handle>:
{
    2bc8:	b570      	push	{r4, r5, r6, lr}
    2bca:	0005      	movs	r5, r0
    2bcc:	000e      	movs	r6, r1
	if (!(strcmp("help", argv[0]))) {
    2bce:	680c      	ldr	r4, [r1, #0]
    2bd0:	0021      	movs	r1, r4
    2bd2:	488f      	ldr	r0, [pc, #572]	; (2e10 <input_handle+0x248>)
    2bd4:	4b8f      	ldr	r3, [pc, #572]	; (2e14 <input_handle+0x24c>)
    2bd6:	4798      	blx	r3
    2bd8:	2800      	cmp	r0, #0
    2bda:	d10a      	bne.n	2bf2 <input_handle+0x2a>
		if (argc != required_args) {
    2bdc:	2d01      	cmp	r5, #1
    2bde:	d005      	beq.n	2bec <input_handle+0x24>
			print_args_error("help", required_args, argc);
    2be0:	002a      	movs	r2, r5
    2be2:	2101      	movs	r1, #1
    2be4:	488a      	ldr	r0, [pc, #552]	; (2e10 <input_handle+0x248>)
    2be6:	4b8c      	ldr	r3, [pc, #560]	; (2e18 <input_handle+0x250>)
    2be8:	4798      	blx	r3
}
    2bea:	bd70      	pop	{r4, r5, r6, pc}
		help();
    2bec:	4b8b      	ldr	r3, [pc, #556]	; (2e1c <input_handle+0x254>)
    2bee:	4798      	blx	r3
    2bf0:	e7fb      	b.n	2bea <input_handle+0x22>
	} else if (!(strcmp("ver_bl", argv[0]))) {
    2bf2:	0021      	movs	r1, r4
    2bf4:	488a      	ldr	r0, [pc, #552]	; (2e20 <input_handle+0x258>)
    2bf6:	4b87      	ldr	r3, [pc, #540]	; (2e14 <input_handle+0x24c>)
    2bf8:	4798      	blx	r3
    2bfa:	2800      	cmp	r0, #0
    2bfc:	d10a      	bne.n	2c14 <input_handle+0x4c>
		if (argc != required_args) {
    2bfe:	2d01      	cmp	r5, #1
    2c00:	d005      	beq.n	2c0e <input_handle+0x46>
			print_args_error("ver_bl", required_args, argc);
    2c02:	002a      	movs	r2, r5
    2c04:	2101      	movs	r1, #1
    2c06:	4886      	ldr	r0, [pc, #536]	; (2e20 <input_handle+0x258>)
    2c08:	4b83      	ldr	r3, [pc, #524]	; (2e18 <input_handle+0x250>)
    2c0a:	4798      	blx	r3
			return;
    2c0c:	e7ed      	b.n	2bea <input_handle+0x22>
		ver_bl();
    2c0e:	4b85      	ldr	r3, [pc, #532]	; (2e24 <input_handle+0x25c>)
    2c10:	4798      	blx	r3
    2c12:	e7ea      	b.n	2bea <input_handle+0x22>
	} else if (!(strcmp("ver_app", argv[0]))) {
    2c14:	0021      	movs	r1, r4
    2c16:	4884      	ldr	r0, [pc, #528]	; (2e28 <input_handle+0x260>)
    2c18:	4b7e      	ldr	r3, [pc, #504]	; (2e14 <input_handle+0x24c>)
    2c1a:	4798      	blx	r3
    2c1c:	2800      	cmp	r0, #0
    2c1e:	d10a      	bne.n	2c36 <input_handle+0x6e>
		if (argc != required_args) {
    2c20:	2d01      	cmp	r5, #1
    2c22:	d005      	beq.n	2c30 <input_handle+0x68>
			print_args_error("ver_app", required_args, argc);
    2c24:	002a      	movs	r2, r5
    2c26:	2101      	movs	r1, #1
    2c28:	487f      	ldr	r0, [pc, #508]	; (2e28 <input_handle+0x260>)
    2c2a:	4b7b      	ldr	r3, [pc, #492]	; (2e18 <input_handle+0x250>)
    2c2c:	4798      	blx	r3
			return;
    2c2e:	e7dc      	b.n	2bea <input_handle+0x22>
		ver_app();
    2c30:	4b7e      	ldr	r3, [pc, #504]	; (2e2c <input_handle+0x264>)
    2c32:	4798      	blx	r3
    2c34:	e7d9      	b.n	2bea <input_handle+0x22>
	} else if (!(strcmp("gpio_set", argv[0]))) {
    2c36:	0021      	movs	r1, r4
    2c38:	487d      	ldr	r0, [pc, #500]	; (2e30 <input_handle+0x268>)
    2c3a:	4b76      	ldr	r3, [pc, #472]	; (2e14 <input_handle+0x24c>)
    2c3c:	4798      	blx	r3
    2c3e:	2800      	cmp	r0, #0
    2c40:	d11c      	bne.n	2c7c <input_handle+0xb4>
		if (argc != required_args) {
    2c42:	2d03      	cmp	r5, #3
    2c44:	d005      	beq.n	2c52 <input_handle+0x8a>
			print_args_error("gpio_set", required_args, argc);
    2c46:	002a      	movs	r2, r5
    2c48:	2103      	movs	r1, #3
    2c4a:	4879      	ldr	r0, [pc, #484]	; (2e30 <input_handle+0x268>)
    2c4c:	4b72      	ldr	r3, [pc, #456]	; (2e18 <input_handle+0x250>)
    2c4e:	4798      	blx	r3
			return;
    2c50:	e7cb      	b.n	2bea <input_handle+0x22>
		char port = argv[1][0];
    2c52:	6873      	ldr	r3, [r6, #4]
    2c54:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    2c56:	68b0      	ldr	r0, [r6, #8]
    2c58:	4b76      	ldr	r3, [pc, #472]	; (2e34 <input_handle+0x26c>)
    2c5a:	4798      	blx	r3
    2c5c:	0004      	movs	r4, r0
		if (isdigit(pin))
    2c5e:	4b76      	ldr	r3, [pc, #472]	; (2e38 <input_handle+0x270>)
    2c60:	4798      	blx	r3
    2c62:	1900      	adds	r0, r0, r4
    2c64:	7843      	ldrb	r3, [r0, #1]
    2c66:	075b      	lsls	r3, r3, #29
    2c68:	d504      	bpl.n	2c74 <input_handle+0xac>
			gpio_set(port, pin);
    2c6a:	0021      	movs	r1, r4
    2c6c:	0028      	movs	r0, r5
    2c6e:	4b73      	ldr	r3, [pc, #460]	; (2e3c <input_handle+0x274>)
    2c70:	4798      	blx	r3
    2c72:	e7ba      	b.n	2bea <input_handle+0x22>
			print_general_error("gpio_set");
    2c74:	486e      	ldr	r0, [pc, #440]	; (2e30 <input_handle+0x268>)
    2c76:	4b72      	ldr	r3, [pc, #456]	; (2e40 <input_handle+0x278>)
    2c78:	4798      	blx	r3
    2c7a:	e7b6      	b.n	2bea <input_handle+0x22>
	} else if (!(strcmp("gpio_clear", argv[0]))) {
    2c7c:	0021      	movs	r1, r4
    2c7e:	4871      	ldr	r0, [pc, #452]	; (2e44 <input_handle+0x27c>)
    2c80:	4b64      	ldr	r3, [pc, #400]	; (2e14 <input_handle+0x24c>)
    2c82:	4798      	blx	r3
    2c84:	2800      	cmp	r0, #0
    2c86:	d11c      	bne.n	2cc2 <input_handle+0xfa>
		if (argc != required_args) {
    2c88:	2d03      	cmp	r5, #3
    2c8a:	d005      	beq.n	2c98 <input_handle+0xd0>
			print_args_error("gpio_clear", required_args, argc);
    2c8c:	002a      	movs	r2, r5
    2c8e:	2103      	movs	r1, #3
    2c90:	486c      	ldr	r0, [pc, #432]	; (2e44 <input_handle+0x27c>)
    2c92:	4b61      	ldr	r3, [pc, #388]	; (2e18 <input_handle+0x250>)
    2c94:	4798      	blx	r3
			return;
    2c96:	e7a8      	b.n	2bea <input_handle+0x22>
		char port = argv[1][0];
    2c98:	6873      	ldr	r3, [r6, #4]
    2c9a:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    2c9c:	68b0      	ldr	r0, [r6, #8]
    2c9e:	4b65      	ldr	r3, [pc, #404]	; (2e34 <input_handle+0x26c>)
    2ca0:	4798      	blx	r3
    2ca2:	0004      	movs	r4, r0
		if (isdigit(pin))
    2ca4:	4b64      	ldr	r3, [pc, #400]	; (2e38 <input_handle+0x270>)
    2ca6:	4798      	blx	r3
    2ca8:	1900      	adds	r0, r0, r4
    2caa:	7843      	ldrb	r3, [r0, #1]
    2cac:	075b      	lsls	r3, r3, #29
    2cae:	d504      	bpl.n	2cba <input_handle+0xf2>
			gpio_clear(port, pin);
    2cb0:	0021      	movs	r1, r4
    2cb2:	0028      	movs	r0, r5
    2cb4:	4b64      	ldr	r3, [pc, #400]	; (2e48 <input_handle+0x280>)
    2cb6:	4798      	blx	r3
    2cb8:	e797      	b.n	2bea <input_handle+0x22>
			print_general_error("gpio_clear");
    2cba:	4862      	ldr	r0, [pc, #392]	; (2e44 <input_handle+0x27c>)
    2cbc:	4b60      	ldr	r3, [pc, #384]	; (2e40 <input_handle+0x278>)
    2cbe:	4798      	blx	r3
    2cc0:	e793      	b.n	2bea <input_handle+0x22>
	} else if (!(strcmp("gpio_get", argv[0]))) {
    2cc2:	0021      	movs	r1, r4
    2cc4:	4861      	ldr	r0, [pc, #388]	; (2e4c <input_handle+0x284>)
    2cc6:	4b53      	ldr	r3, [pc, #332]	; (2e14 <input_handle+0x24c>)
    2cc8:	4798      	blx	r3
    2cca:	2800      	cmp	r0, #0
    2ccc:	d11c      	bne.n	2d08 <input_handle+0x140>
		if (argc != required_args) {
    2cce:	2d03      	cmp	r5, #3
    2cd0:	d005      	beq.n	2cde <input_handle+0x116>
			print_args_error("gpio_get", required_args, argc);
    2cd2:	002a      	movs	r2, r5
    2cd4:	2103      	movs	r1, #3
    2cd6:	485d      	ldr	r0, [pc, #372]	; (2e4c <input_handle+0x284>)
    2cd8:	4b4f      	ldr	r3, [pc, #316]	; (2e18 <input_handle+0x250>)
    2cda:	4798      	blx	r3
			return;
    2cdc:	e785      	b.n	2bea <input_handle+0x22>
		char port = argv[1][0];
    2cde:	6873      	ldr	r3, [r6, #4]
    2ce0:	781d      	ldrb	r5, [r3, #0]
		int pin = atoi(argv[2]);
    2ce2:	68b0      	ldr	r0, [r6, #8]
    2ce4:	4b53      	ldr	r3, [pc, #332]	; (2e34 <input_handle+0x26c>)
    2ce6:	4798      	blx	r3
    2ce8:	0004      	movs	r4, r0
		if (isdigit(pin))
    2cea:	4b53      	ldr	r3, [pc, #332]	; (2e38 <input_handle+0x270>)
    2cec:	4798      	blx	r3
    2cee:	1900      	adds	r0, r0, r4
    2cf0:	7843      	ldrb	r3, [r0, #1]
    2cf2:	075b      	lsls	r3, r3, #29
    2cf4:	d504      	bpl.n	2d00 <input_handle+0x138>
			gpio_get(port, pin);
    2cf6:	0021      	movs	r1, r4
    2cf8:	0028      	movs	r0, r5
    2cfa:	4b55      	ldr	r3, [pc, #340]	; (2e50 <input_handle+0x288>)
    2cfc:	4798      	blx	r3
    2cfe:	e774      	b.n	2bea <input_handle+0x22>
			print_general_error("gpio_get");
    2d00:	4852      	ldr	r0, [pc, #328]	; (2e4c <input_handle+0x284>)
    2d02:	4b4f      	ldr	r3, [pc, #316]	; (2e40 <input_handle+0x278>)
    2d04:	4798      	blx	r3
    2d06:	e770      	b.n	2bea <input_handle+0x22>
	} else if (!(strcmp("mac", argv[0]))) {
    2d08:	0021      	movs	r1, r4
    2d0a:	4852      	ldr	r0, [pc, #328]	; (2e54 <input_handle+0x28c>)
    2d0c:	4b41      	ldr	r3, [pc, #260]	; (2e14 <input_handle+0x24c>)
    2d0e:	4798      	blx	r3
    2d10:	2800      	cmp	r0, #0
    2d12:	d10a      	bne.n	2d2a <input_handle+0x162>
		if (argc != required_args) {
    2d14:	2d01      	cmp	r5, #1
    2d16:	d005      	beq.n	2d24 <input_handle+0x15c>
			print_args_error("mac", required_args, argc);
    2d18:	002a      	movs	r2, r5
    2d1a:	2101      	movs	r1, #1
    2d1c:	484d      	ldr	r0, [pc, #308]	; (2e54 <input_handle+0x28c>)
    2d1e:	4b3e      	ldr	r3, [pc, #248]	; (2e18 <input_handle+0x250>)
    2d20:	4798      	blx	r3
			return;
    2d22:	e762      	b.n	2bea <input_handle+0x22>
		mac();
    2d24:	4b4c      	ldr	r3, [pc, #304]	; (2e58 <input_handle+0x290>)
    2d26:	4798      	blx	r3
    2d28:	e75f      	b.n	2bea <input_handle+0x22>
	} else if (!(strcmp("ip", argv[0]))) {
    2d2a:	0021      	movs	r1, r4
    2d2c:	484b      	ldr	r0, [pc, #300]	; (2e5c <input_handle+0x294>)
    2d2e:	4b39      	ldr	r3, [pc, #228]	; (2e14 <input_handle+0x24c>)
    2d30:	4798      	blx	r3
    2d32:	2800      	cmp	r0, #0
    2d34:	d10a      	bne.n	2d4c <input_handle+0x184>
		if (argc != required_args) {
    2d36:	2d01      	cmp	r5, #1
    2d38:	d005      	beq.n	2d46 <input_handle+0x17e>
			print_args_error("ip", required_args, argc);
    2d3a:	002a      	movs	r2, r5
    2d3c:	2101      	movs	r1, #1
    2d3e:	4847      	ldr	r0, [pc, #284]	; (2e5c <input_handle+0x294>)
    2d40:	4b35      	ldr	r3, [pc, #212]	; (2e18 <input_handle+0x250>)
    2d42:	4798      	blx	r3
			return;
    2d44:	e751      	b.n	2bea <input_handle+0x22>
		ip();
    2d46:	4b46      	ldr	r3, [pc, #280]	; (2e60 <input_handle+0x298>)
    2d48:	4798      	blx	r3
    2d4a:	e74e      	b.n	2bea <input_handle+0x22>
	} else if (!(strcmp("read", argv[0]))) {
    2d4c:	0021      	movs	r1, r4
    2d4e:	4845      	ldr	r0, [pc, #276]	; (2e64 <input_handle+0x29c>)
    2d50:	4b30      	ldr	r3, [pc, #192]	; (2e14 <input_handle+0x24c>)
    2d52:	4798      	blx	r3
    2d54:	2800      	cmp	r0, #0
    2d56:	d122      	bne.n	2d9e <input_handle+0x1d6>
		if (argc != required_args) {
    2d58:	2d04      	cmp	r5, #4
    2d5a:	d005      	beq.n	2d68 <input_handle+0x1a0>
			print_args_error("read", required_args, argc);
    2d5c:	002a      	movs	r2, r5
    2d5e:	2104      	movs	r1, #4
    2d60:	4840      	ldr	r0, [pc, #256]	; (2e64 <input_handle+0x29c>)
    2d62:	4b2d      	ldr	r3, [pc, #180]	; (2e18 <input_handle+0x250>)
    2d64:	4798      	blx	r3
			return;
    2d66:	e740      	b.n	2bea <input_handle+0x22>
		int reading = atoi(argv[2]);
    2d68:	68b0      	ldr	r0, [r6, #8]
    2d6a:	4c32      	ldr	r4, [pc, #200]	; (2e34 <input_handle+0x26c>)
    2d6c:	47a0      	blx	r4
    2d6e:	0005      	movs	r5, r0
		int interval_ms = atoi(argv[3]);
    2d70:	68f0      	ldr	r0, [r6, #12]
    2d72:	47a0      	blx	r4
    2d74:	0004      	movs	r4, r0
		if (isdigit(reading) && isdigit(interval_ms))
    2d76:	4b30      	ldr	r3, [pc, #192]	; (2e38 <input_handle+0x270>)
    2d78:	4798      	blx	r3
    2d7a:	1940      	adds	r0, r0, r5
    2d7c:	7843      	ldrb	r3, [r0, #1]
    2d7e:	075b      	lsls	r3, r3, #29
    2d80:	d505      	bpl.n	2d8e <input_handle+0x1c6>
    2d82:	4b2d      	ldr	r3, [pc, #180]	; (2e38 <input_handle+0x270>)
    2d84:	4798      	blx	r3
    2d86:	1900      	adds	r0, r0, r4
    2d88:	7843      	ldrb	r3, [r0, #1]
    2d8a:	075b      	lsls	r3, r3, #29
    2d8c:	d403      	bmi.n	2d96 <input_handle+0x1ce>
			print_general_error("read");
    2d8e:	4835      	ldr	r0, [pc, #212]	; (2e64 <input_handle+0x29c>)
    2d90:	4b2b      	ldr	r3, [pc, #172]	; (2e40 <input_handle+0x278>)
    2d92:	4798      	blx	r3
    2d94:	e729      	b.n	2bea <input_handle+0x22>
	printf("Dummy info");
    2d96:	4834      	ldr	r0, [pc, #208]	; (2e68 <input_handle+0x2a0>)
    2d98:	4b34      	ldr	r3, [pc, #208]	; (2e6c <input_handle+0x2a4>)
    2d9a:	4798      	blx	r3
    2d9c:	e725      	b.n	2bea <input_handle+0x22>
	} else if (!(strcmp("adc_get", argv[0]))) {
    2d9e:	0021      	movs	r1, r4
    2da0:	4833      	ldr	r0, [pc, #204]	; (2e70 <input_handle+0x2a8>)
    2da2:	4b1c      	ldr	r3, [pc, #112]	; (2e14 <input_handle+0x24c>)
    2da4:	4798      	blx	r3
    2da6:	2800      	cmp	r0, #0
    2da8:	d10c      	bne.n	2dc4 <input_handle+0x1fc>
		if (argc != required_args) {
    2daa:	2d03      	cmp	r5, #3
    2dac:	d005      	beq.n	2dba <input_handle+0x1f2>
			print_args_error("adc_get", required_args, argc);
    2dae:	002a      	movs	r2, r5
    2db0:	2103      	movs	r1, #3
    2db2:	482f      	ldr	r0, [pc, #188]	; (2e70 <input_handle+0x2a8>)
    2db4:	4b18      	ldr	r3, [pc, #96]	; (2e18 <input_handle+0x250>)
    2db6:	4798      	blx	r3
			return;
    2db8:	e717      	b.n	2bea <input_handle+0x22>
		adc_get(argv[1], argv[2]);
    2dba:	7930      	ldrb	r0, [r6, #4]
    2dbc:	68b1      	ldr	r1, [r6, #8]
    2dbe:	4b2d      	ldr	r3, [pc, #180]	; (2e74 <input_handle+0x2ac>)
    2dc0:	4798      	blx	r3
    2dc2:	e712      	b.n	2bea <input_handle+0x22>
	} else if (!(strcmp("mcu_temp", argv[0]))) {
    2dc4:	0021      	movs	r1, r4
    2dc6:	482c      	ldr	r0, [pc, #176]	; (2e78 <input_handle+0x2b0>)
    2dc8:	4b12      	ldr	r3, [pc, #72]	; (2e14 <input_handle+0x24c>)
    2dca:	4798      	blx	r3
    2dcc:	2800      	cmp	r0, #0
    2dce:	d10a      	bne.n	2de6 <input_handle+0x21e>
		if (argc != required_args) {
    2dd0:	2d01      	cmp	r5, #1
    2dd2:	d005      	beq.n	2de0 <input_handle+0x218>
			print_args_error("mcu_temp", required_args, argc);
    2dd4:	002a      	movs	r2, r5
    2dd6:	2101      	movs	r1, #1
    2dd8:	4827      	ldr	r0, [pc, #156]	; (2e78 <input_handle+0x2b0>)
    2dda:	4b0f      	ldr	r3, [pc, #60]	; (2e18 <input_handle+0x250>)
    2ddc:	4798      	blx	r3
			return;
    2dde:	e704      	b.n	2bea <input_handle+0x22>
		mcu_temp();
    2de0:	4b26      	ldr	r3, [pc, #152]	; (2e7c <input_handle+0x2b4>)
    2de2:	4798      	blx	r3
    2de4:	e701      	b.n	2bea <input_handle+0x22>
	} else if (!(strcmp("i2c_scan", argv[0]))) {
    2de6:	0021      	movs	r1, r4
    2de8:	4825      	ldr	r0, [pc, #148]	; (2e80 <input_handle+0x2b8>)
    2dea:	4b0a      	ldr	r3, [pc, #40]	; (2e14 <input_handle+0x24c>)
    2dec:	4798      	blx	r3
    2dee:	2800      	cmp	r0, #0
    2df0:	d10a      	bne.n	2e08 <input_handle+0x240>
		if (argc != required_args) {
    2df2:	2d01      	cmp	r5, #1
    2df4:	d005      	beq.n	2e02 <input_handle+0x23a>
			print_args_error("i2c_scan", required_args, argc);
    2df6:	002a      	movs	r2, r5
    2df8:	2101      	movs	r1, #1
    2dfa:	4821      	ldr	r0, [pc, #132]	; (2e80 <input_handle+0x2b8>)
    2dfc:	4b06      	ldr	r3, [pc, #24]	; (2e18 <input_handle+0x250>)
    2dfe:	4798      	blx	r3
			return;
    2e00:	e6f3      	b.n	2bea <input_handle+0x22>
		i2c_scan();
    2e02:	4b20      	ldr	r3, [pc, #128]	; (2e84 <input_handle+0x2bc>)
    2e04:	4798      	blx	r3
    2e06:	e6f0      	b.n	2bea <input_handle+0x22>
		printf("Invalid input. See help for correct usage.\r\n");
    2e08:	481f      	ldr	r0, [pc, #124]	; (2e88 <input_handle+0x2c0>)
    2e0a:	4b20      	ldr	r3, [pc, #128]	; (2e8c <input_handle+0x2c4>)
    2e0c:	4798      	blx	r3
    2e0e:	e6ec      	b.n	2bea <input_handle+0x22>
    2e10:	00006320 	.word	0x00006320
    2e14:	00004e9d 	.word	0x00004e9d
    2e18:	00002639 	.word	0x00002639
    2e1c:	000025b9 	.word	0x000025b9
    2e20:	00006328 	.word	0x00006328
    2e24:	000025cd 	.word	0x000025cd
    2e28:	00006330 	.word	0x00006330
    2e2c:	000025e5 	.word	0x000025e5
    2e30:	00006338 	.word	0x00006338
    2e34:	000049e1 	.word	0x000049e1
    2e38:	00004a3d 	.word	0x00004a3d
    2e3c:	00002ab9 	.word	0x00002ab9
    2e40:	00002625 	.word	0x00002625
    2e44:	00006344 	.word	0x00006344
    2e48:	00002b09 	.word	0x00002b09
    2e4c:	00006350 	.word	0x00006350
    2e50:	00002b79 	.word	0x00002b79
    2e54:	0000635c 	.word	0x0000635c
    2e58:	000025fd 	.word	0x000025fd
    2e5c:	00006360 	.word	0x00006360
    2e60:	00002611 	.word	0x00002611
    2e64:	00006364 	.word	0x00006364
    2e68:	000064a8 	.word	0x000064a8
    2e6c:	00004c05 	.word	0x00004c05
    2e70:	0000636c 	.word	0x0000636c
    2e74:	000028fd 	.word	0x000028fd
    2e78:	00006374 	.word	0x00006374
    2e7c:	00002a0d 	.word	0x00002a0d
    2e80:	00006380 	.word	0x00006380
    2e84:	00002729 	.word	0x00002729
    2e88:	0000638c 	.word	0x0000638c
    2e8c:	00004cf9 	.word	0x00004cf9

00002e90 <processUserInput>:
 * stores user input in rx buffer read from serial
 *
 * @return  true if successful, false if error
 */
bool processUserInput(void)
{
    2e90:	b500      	push	{lr}
    2e92:	b083      	sub	sp, #12
	char singleCharInput;
	volatile enum status_code uartReadCode = usart_read_buffer_wait(&usart_instance, &singleCharInput, 1);
    2e94:	2201      	movs	r2, #1
    2e96:	466b      	mov	r3, sp
    2e98:	1dd9      	adds	r1, r3, #7
    2e9a:	4824      	ldr	r0, [pc, #144]	; (2f2c <processUserInput+0x9c>)
    2e9c:	4b24      	ldr	r3, [pc, #144]	; (2f30 <processUserInput+0xa0>)
    2e9e:	4798      	blx	r3
    2ea0:	466b      	mov	r3, sp
    2ea2:	7198      	strb	r0, [r3, #6]
    2ea4:	3306      	adds	r3, #6

	if (STATUS_OK != uartReadCode)
    2ea6:	781b      	ldrb	r3, [r3, #0]
		return false;
    2ea8:	2000      	movs	r0, #0
	if (STATUS_OK != uartReadCode)
    2eaa:	2b00      	cmp	r3, #0
    2eac:	d13c      	bne.n	2f28 <processUserInput+0x98>
	if (STATUS_OK == uartReadCode) {
    2eae:	466b      	mov	r3, sp
    2eb0:	3306      	adds	r3, #6
    2eb2:	781b      	ldrb	r3, [r3, #0]
    2eb4:	2b00      	cmp	r3, #0
    2eb6:	d018      	beq.n	2eea <processUserInput+0x5a>
		volatile enum status_code uartWriteCode = usart_write_buffer_wait(&usart_instance, &singleCharInput, 1);
	}

	switch (singleCharInput) {
    2eb8:	466b      	mov	r3, sp
    2eba:	3307      	adds	r3, #7
    2ebc:	781b      	ldrb	r3, [r3, #0]
    2ebe:	2b0a      	cmp	r3, #10
    2ec0:	d01c      	beq.n	2efc <processUserInput+0x6c>
    2ec2:	2b0d      	cmp	r3, #13
    2ec4:	d01a      	beq.n	2efc <processUserInput+0x6c>
    2ec6:	2b08      	cmp	r3, #8
    2ec8:	d025      	beq.n	2f16 <processUserInput+0x86>
		// rx_buffer[--numberCharsRead] = NULLCHAR;
		break;

	default:
		/// All other cases
		if (numberCharsRead < MAX_RX_BUFFER_LENGTH)
    2eca:	4a1a      	ldr	r2, [pc, #104]	; (2f34 <processUserInput+0xa4>)
    2ecc:	7812      	ldrb	r2, [r2, #0]
    2ece:	2a63      	cmp	r2, #99	; 0x63
    2ed0:	d804      	bhi.n	2edc <processUserInput+0x4c>
			rx_buffer[numberCharsRead++] = singleCharInput;
    2ed2:	1c50      	adds	r0, r2, #1
    2ed4:	4917      	ldr	r1, [pc, #92]	; (2f34 <processUserInput+0xa4>)
    2ed6:	7008      	strb	r0, [r1, #0]
    2ed8:	4917      	ldr	r1, [pc, #92]	; (2f38 <processUserInput+0xa8>)
    2eda:	548b      	strb	r3, [r1, r2]
		rx_buffer[numberCharsRead] = NULLCHAR;  ///< String read protection
    2edc:	4b15      	ldr	r3, [pc, #84]	; (2f34 <processUserInput+0xa4>)
    2ede:	781b      	ldrb	r3, [r3, #0]
    2ee0:	2100      	movs	r1, #0
    2ee2:	4a15      	ldr	r2, [pc, #84]	; (2f38 <processUserInput+0xa8>)
    2ee4:	54d1      	strb	r1, [r2, r3]
		break;
	}
	return false;
    2ee6:	2000      	movs	r0, #0
		break;
    2ee8:	e01e      	b.n	2f28 <processUserInput+0x98>
		volatile enum status_code uartWriteCode = usart_write_buffer_wait(&usart_instance, &singleCharInput, 1);
    2eea:	2201      	movs	r2, #1
    2eec:	466b      	mov	r3, sp
    2eee:	1dd9      	adds	r1, r3, #7
    2ef0:	480e      	ldr	r0, [pc, #56]	; (2f2c <processUserInput+0x9c>)
    2ef2:	4b12      	ldr	r3, [pc, #72]	; (2f3c <processUserInput+0xac>)
    2ef4:	4798      	blx	r3
    2ef6:	466b      	mov	r3, sp
    2ef8:	7158      	strb	r0, [r3, #5]
    2efa:	e7dd      	b.n	2eb8 <processUserInput+0x28>
		rx_buffer[numberCharsRead] = NULLCHAR;
    2efc:	4b0d      	ldr	r3, [pc, #52]	; (2f34 <processUserInput+0xa4>)
    2efe:	781b      	ldrb	r3, [r3, #0]
    2f00:	2100      	movs	r1, #0
    2f02:	4a0d      	ldr	r2, [pc, #52]	; (2f38 <processUserInput+0xa8>)
    2f04:	54d1      	strb	r1, [r2, r3]
	return false;
    2f06:	2000      	movs	r0, #0
		if (numberCharsRead > 0) {
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d00d      	beq.n	2f28 <processUserInput+0x98>
			numberCharsRead = 0;
    2f0c:	2200      	movs	r2, #0
    2f0e:	4b09      	ldr	r3, [pc, #36]	; (2f34 <processUserInput+0xa4>)
    2f10:	701a      	strb	r2, [r3, #0]
			return true;
    2f12:	3001      	adds	r0, #1
    2f14:	e008      	b.n	2f28 <processUserInput+0x98>
		numberCharsRead--;
    2f16:	4a07      	ldr	r2, [pc, #28]	; (2f34 <processUserInput+0xa4>)
    2f18:	7813      	ldrb	r3, [r2, #0]
    2f1a:	3b01      	subs	r3, #1
    2f1c:	b2db      	uxtb	r3, r3
    2f1e:	7013      	strb	r3, [r2, #0]
		rx_buffer[numberCharsRead] = NULLCHAR;
    2f20:	2100      	movs	r1, #0
    2f22:	4a05      	ldr	r2, [pc, #20]	; (2f38 <processUserInput+0xa8>)
    2f24:	54d1      	strb	r1, [r2, r3]
	return false;
    2f26:	2000      	movs	r0, #0
}
    2f28:	b003      	add	sp, #12
    2f2a:	bd00      	pop	{pc}
    2f2c:	2000028c 	.word	0x2000028c
    2f30:	00001869 	.word	0x00001869
    2f34:	20000368 	.word	0x20000368
    2f38:	20000304 	.word	0x20000304
    2f3c:	000017a9 	.word	0x000017a9

00002f40 <main>:
	}
}


int main(void)
{
    2f40:	b570      	push	{r4, r5, r6, lr}
	system_init();
    2f42:	4b11      	ldr	r3, [pc, #68]	; (2f88 <main+0x48>)
    2f44:	4798      	blx	r3
	cpu_irq_enable();
    2f46:	2201      	movs	r2, #1
    2f48:	4b10      	ldr	r3, [pc, #64]	; (2f8c <main+0x4c>)
    2f4a:	701a      	strb	r2, [r3, #0]
    2f4c:	f3bf 8f5f 	dmb	sy
    2f50:	b662      	cpsie	i
	system_interrupt_enable_global();
	delay_init();
    2f52:	4b0f      	ldr	r3, [pc, #60]	; (2f90 <main+0x50>)
    2f54:	4798      	blx	r3

	configure_usart();
    2f56:	4b0f      	ldr	r3, [pc, #60]	; (2f94 <main+0x54>)
    2f58:	4798      	blx	r3
    2f5a:	2400      	movs	r4, #0
	
	for (int i = 0; i < MAX_ARGS; i++)
		argv[i] = malloc(sizeof(char) * MAX_ARG_LENGTH);
    2f5c:	4e0e      	ldr	r6, [pc, #56]	; (2f98 <main+0x58>)
    2f5e:	4d0f      	ldr	r5, [pc, #60]	; (2f9c <main+0x5c>)
    2f60:	2019      	movs	r0, #25
    2f62:	47b0      	blx	r6
    2f64:	5128      	str	r0, [r5, r4]
    2f66:	3404      	adds	r4, #4
	for (int i = 0; i < MAX_ARGS; i++)
    2f68:	2c10      	cmp	r4, #16
    2f6a:	d1f9      	bne.n	2f60 <main+0x20>

	//TODO: print version information

	while (1) {
		bool commandEntered = processUserInput();
    2f6c:	4c0c      	ldr	r4, [pc, #48]	; (2fa0 <main+0x60>)
		if (commandEntered) {
			input_handle(argc, argv); //fix
    2f6e:	4e0b      	ldr	r6, [pc, #44]	; (2f9c <main+0x5c>)
    2f70:	4d0c      	ldr	r5, [pc, #48]	; (2fa4 <main+0x64>)
		bool commandEntered = processUserInput();
    2f72:	47a0      	blx	r4
		if (commandEntered) {
    2f74:	2800      	cmp	r0, #0
    2f76:	d0fc      	beq.n	2f72 <main+0x32>
			input_handle(argc, argv); //fix
    2f78:	7828      	ldrb	r0, [r5, #0]
    2f7a:	0031      	movs	r1, r6
    2f7c:	4b0a      	ldr	r3, [pc, #40]	; (2fa8 <main+0x68>)
    2f7e:	4798      	blx	r3
			argc = 0;
    2f80:	2300      	movs	r3, #0
    2f82:	702b      	strb	r3, [r5, #0]
    2f84:	e7f5      	b.n	2f72 <main+0x32>
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	000023a1 	.word	0x000023a1
    2f8c:	20000008 	.word	0x20000008
    2f90:	00000115 	.word	0x00000115
    2f94:	000027a9 	.word	0x000027a9
    2f98:	00004a59 	.word	0x00004a59
    2f9c:	200002f0 	.word	0x200002f0
    2fa0:	00002e91 	.word	0x00002e91
    2fa4:	20000300 	.word	0x20000300
    2fa8:	00002bc9 	.word	0x00002bc9

00002fac <__udivsi3>:
    2fac:	2200      	movs	r2, #0
    2fae:	0843      	lsrs	r3, r0, #1
    2fb0:	428b      	cmp	r3, r1
    2fb2:	d374      	bcc.n	309e <__udivsi3+0xf2>
    2fb4:	0903      	lsrs	r3, r0, #4
    2fb6:	428b      	cmp	r3, r1
    2fb8:	d35f      	bcc.n	307a <__udivsi3+0xce>
    2fba:	0a03      	lsrs	r3, r0, #8
    2fbc:	428b      	cmp	r3, r1
    2fbe:	d344      	bcc.n	304a <__udivsi3+0x9e>
    2fc0:	0b03      	lsrs	r3, r0, #12
    2fc2:	428b      	cmp	r3, r1
    2fc4:	d328      	bcc.n	3018 <__udivsi3+0x6c>
    2fc6:	0c03      	lsrs	r3, r0, #16
    2fc8:	428b      	cmp	r3, r1
    2fca:	d30d      	bcc.n	2fe8 <__udivsi3+0x3c>
    2fcc:	22ff      	movs	r2, #255	; 0xff
    2fce:	0209      	lsls	r1, r1, #8
    2fd0:	ba12      	rev	r2, r2
    2fd2:	0c03      	lsrs	r3, r0, #16
    2fd4:	428b      	cmp	r3, r1
    2fd6:	d302      	bcc.n	2fde <__udivsi3+0x32>
    2fd8:	1212      	asrs	r2, r2, #8
    2fda:	0209      	lsls	r1, r1, #8
    2fdc:	d065      	beq.n	30aa <__udivsi3+0xfe>
    2fde:	0b03      	lsrs	r3, r0, #12
    2fe0:	428b      	cmp	r3, r1
    2fe2:	d319      	bcc.n	3018 <__udivsi3+0x6c>
    2fe4:	e000      	b.n	2fe8 <__udivsi3+0x3c>
    2fe6:	0a09      	lsrs	r1, r1, #8
    2fe8:	0bc3      	lsrs	r3, r0, #15
    2fea:	428b      	cmp	r3, r1
    2fec:	d301      	bcc.n	2ff2 <__udivsi3+0x46>
    2fee:	03cb      	lsls	r3, r1, #15
    2ff0:	1ac0      	subs	r0, r0, r3
    2ff2:	4152      	adcs	r2, r2
    2ff4:	0b83      	lsrs	r3, r0, #14
    2ff6:	428b      	cmp	r3, r1
    2ff8:	d301      	bcc.n	2ffe <__udivsi3+0x52>
    2ffa:	038b      	lsls	r3, r1, #14
    2ffc:	1ac0      	subs	r0, r0, r3
    2ffe:	4152      	adcs	r2, r2
    3000:	0b43      	lsrs	r3, r0, #13
    3002:	428b      	cmp	r3, r1
    3004:	d301      	bcc.n	300a <__udivsi3+0x5e>
    3006:	034b      	lsls	r3, r1, #13
    3008:	1ac0      	subs	r0, r0, r3
    300a:	4152      	adcs	r2, r2
    300c:	0b03      	lsrs	r3, r0, #12
    300e:	428b      	cmp	r3, r1
    3010:	d301      	bcc.n	3016 <__udivsi3+0x6a>
    3012:	030b      	lsls	r3, r1, #12
    3014:	1ac0      	subs	r0, r0, r3
    3016:	4152      	adcs	r2, r2
    3018:	0ac3      	lsrs	r3, r0, #11
    301a:	428b      	cmp	r3, r1
    301c:	d301      	bcc.n	3022 <__udivsi3+0x76>
    301e:	02cb      	lsls	r3, r1, #11
    3020:	1ac0      	subs	r0, r0, r3
    3022:	4152      	adcs	r2, r2
    3024:	0a83      	lsrs	r3, r0, #10
    3026:	428b      	cmp	r3, r1
    3028:	d301      	bcc.n	302e <__udivsi3+0x82>
    302a:	028b      	lsls	r3, r1, #10
    302c:	1ac0      	subs	r0, r0, r3
    302e:	4152      	adcs	r2, r2
    3030:	0a43      	lsrs	r3, r0, #9
    3032:	428b      	cmp	r3, r1
    3034:	d301      	bcc.n	303a <__udivsi3+0x8e>
    3036:	024b      	lsls	r3, r1, #9
    3038:	1ac0      	subs	r0, r0, r3
    303a:	4152      	adcs	r2, r2
    303c:	0a03      	lsrs	r3, r0, #8
    303e:	428b      	cmp	r3, r1
    3040:	d301      	bcc.n	3046 <__udivsi3+0x9a>
    3042:	020b      	lsls	r3, r1, #8
    3044:	1ac0      	subs	r0, r0, r3
    3046:	4152      	adcs	r2, r2
    3048:	d2cd      	bcs.n	2fe6 <__udivsi3+0x3a>
    304a:	09c3      	lsrs	r3, r0, #7
    304c:	428b      	cmp	r3, r1
    304e:	d301      	bcc.n	3054 <__udivsi3+0xa8>
    3050:	01cb      	lsls	r3, r1, #7
    3052:	1ac0      	subs	r0, r0, r3
    3054:	4152      	adcs	r2, r2
    3056:	0983      	lsrs	r3, r0, #6
    3058:	428b      	cmp	r3, r1
    305a:	d301      	bcc.n	3060 <__udivsi3+0xb4>
    305c:	018b      	lsls	r3, r1, #6
    305e:	1ac0      	subs	r0, r0, r3
    3060:	4152      	adcs	r2, r2
    3062:	0943      	lsrs	r3, r0, #5
    3064:	428b      	cmp	r3, r1
    3066:	d301      	bcc.n	306c <__udivsi3+0xc0>
    3068:	014b      	lsls	r3, r1, #5
    306a:	1ac0      	subs	r0, r0, r3
    306c:	4152      	adcs	r2, r2
    306e:	0903      	lsrs	r3, r0, #4
    3070:	428b      	cmp	r3, r1
    3072:	d301      	bcc.n	3078 <__udivsi3+0xcc>
    3074:	010b      	lsls	r3, r1, #4
    3076:	1ac0      	subs	r0, r0, r3
    3078:	4152      	adcs	r2, r2
    307a:	08c3      	lsrs	r3, r0, #3
    307c:	428b      	cmp	r3, r1
    307e:	d301      	bcc.n	3084 <__udivsi3+0xd8>
    3080:	00cb      	lsls	r3, r1, #3
    3082:	1ac0      	subs	r0, r0, r3
    3084:	4152      	adcs	r2, r2
    3086:	0883      	lsrs	r3, r0, #2
    3088:	428b      	cmp	r3, r1
    308a:	d301      	bcc.n	3090 <__udivsi3+0xe4>
    308c:	008b      	lsls	r3, r1, #2
    308e:	1ac0      	subs	r0, r0, r3
    3090:	4152      	adcs	r2, r2
    3092:	0843      	lsrs	r3, r0, #1
    3094:	428b      	cmp	r3, r1
    3096:	d301      	bcc.n	309c <__udivsi3+0xf0>
    3098:	004b      	lsls	r3, r1, #1
    309a:	1ac0      	subs	r0, r0, r3
    309c:	4152      	adcs	r2, r2
    309e:	1a41      	subs	r1, r0, r1
    30a0:	d200      	bcs.n	30a4 <__udivsi3+0xf8>
    30a2:	4601      	mov	r1, r0
    30a4:	4152      	adcs	r2, r2
    30a6:	4610      	mov	r0, r2
    30a8:	4770      	bx	lr
    30aa:	e7ff      	b.n	30ac <__udivsi3+0x100>
    30ac:	b501      	push	{r0, lr}
    30ae:	2000      	movs	r0, #0
    30b0:	f000 f806 	bl	30c0 <__aeabi_idiv0>
    30b4:	bd02      	pop	{r1, pc}
    30b6:	46c0      	nop			; (mov r8, r8)

000030b8 <__aeabi_uidivmod>:
    30b8:	2900      	cmp	r1, #0
    30ba:	d0f7      	beq.n	30ac <__udivsi3+0x100>
    30bc:	e776      	b.n	2fac <__udivsi3>
    30be:	4770      	bx	lr

000030c0 <__aeabi_idiv0>:
    30c0:	4770      	bx	lr
    30c2:	46c0      	nop			; (mov r8, r8)

000030c4 <__aeabi_lmul>:
    30c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30c6:	46ce      	mov	lr, r9
    30c8:	4647      	mov	r7, r8
    30ca:	0415      	lsls	r5, r2, #16
    30cc:	0c2d      	lsrs	r5, r5, #16
    30ce:	002e      	movs	r6, r5
    30d0:	b580      	push	{r7, lr}
    30d2:	0407      	lsls	r7, r0, #16
    30d4:	0c14      	lsrs	r4, r2, #16
    30d6:	0c3f      	lsrs	r7, r7, #16
    30d8:	4699      	mov	r9, r3
    30da:	0c03      	lsrs	r3, r0, #16
    30dc:	437e      	muls	r6, r7
    30de:	435d      	muls	r5, r3
    30e0:	4367      	muls	r7, r4
    30e2:	4363      	muls	r3, r4
    30e4:	197f      	adds	r7, r7, r5
    30e6:	0c34      	lsrs	r4, r6, #16
    30e8:	19e4      	adds	r4, r4, r7
    30ea:	469c      	mov	ip, r3
    30ec:	42a5      	cmp	r5, r4
    30ee:	d903      	bls.n	30f8 <__aeabi_lmul+0x34>
    30f0:	2380      	movs	r3, #128	; 0x80
    30f2:	025b      	lsls	r3, r3, #9
    30f4:	4698      	mov	r8, r3
    30f6:	44c4      	add	ip, r8
    30f8:	464b      	mov	r3, r9
    30fa:	4351      	muls	r1, r2
    30fc:	4343      	muls	r3, r0
    30fe:	0436      	lsls	r6, r6, #16
    3100:	0c36      	lsrs	r6, r6, #16
    3102:	0c25      	lsrs	r5, r4, #16
    3104:	0424      	lsls	r4, r4, #16
    3106:	4465      	add	r5, ip
    3108:	19a4      	adds	r4, r4, r6
    310a:	1859      	adds	r1, r3, r1
    310c:	1949      	adds	r1, r1, r5
    310e:	0020      	movs	r0, r4
    3110:	bc0c      	pop	{r2, r3}
    3112:	4690      	mov	r8, r2
    3114:	4699      	mov	r9, r3
    3116:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003118 <__aeabi_dadd>:
    3118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    311a:	4645      	mov	r5, r8
    311c:	46de      	mov	lr, fp
    311e:	4657      	mov	r7, sl
    3120:	464e      	mov	r6, r9
    3122:	030c      	lsls	r4, r1, #12
    3124:	b5e0      	push	{r5, r6, r7, lr}
    3126:	004e      	lsls	r6, r1, #1
    3128:	0fc9      	lsrs	r1, r1, #31
    312a:	4688      	mov	r8, r1
    312c:	000d      	movs	r5, r1
    312e:	0a61      	lsrs	r1, r4, #9
    3130:	0f44      	lsrs	r4, r0, #29
    3132:	430c      	orrs	r4, r1
    3134:	00c7      	lsls	r7, r0, #3
    3136:	0319      	lsls	r1, r3, #12
    3138:	0058      	lsls	r0, r3, #1
    313a:	0fdb      	lsrs	r3, r3, #31
    313c:	469b      	mov	fp, r3
    313e:	0a4b      	lsrs	r3, r1, #9
    3140:	0f51      	lsrs	r1, r2, #29
    3142:	430b      	orrs	r3, r1
    3144:	0d76      	lsrs	r6, r6, #21
    3146:	0d40      	lsrs	r0, r0, #21
    3148:	0019      	movs	r1, r3
    314a:	00d2      	lsls	r2, r2, #3
    314c:	45d8      	cmp	r8, fp
    314e:	d100      	bne.n	3152 <__aeabi_dadd+0x3a>
    3150:	e0ae      	b.n	32b0 <__aeabi_dadd+0x198>
    3152:	1a35      	subs	r5, r6, r0
    3154:	2d00      	cmp	r5, #0
    3156:	dc00      	bgt.n	315a <__aeabi_dadd+0x42>
    3158:	e0f6      	b.n	3348 <__aeabi_dadd+0x230>
    315a:	2800      	cmp	r0, #0
    315c:	d10f      	bne.n	317e <__aeabi_dadd+0x66>
    315e:	4313      	orrs	r3, r2
    3160:	d100      	bne.n	3164 <__aeabi_dadd+0x4c>
    3162:	e0db      	b.n	331c <__aeabi_dadd+0x204>
    3164:	1e6b      	subs	r3, r5, #1
    3166:	2b00      	cmp	r3, #0
    3168:	d000      	beq.n	316c <__aeabi_dadd+0x54>
    316a:	e137      	b.n	33dc <__aeabi_dadd+0x2c4>
    316c:	1aba      	subs	r2, r7, r2
    316e:	4297      	cmp	r7, r2
    3170:	41bf      	sbcs	r7, r7
    3172:	1a64      	subs	r4, r4, r1
    3174:	427f      	negs	r7, r7
    3176:	1be4      	subs	r4, r4, r7
    3178:	2601      	movs	r6, #1
    317a:	0017      	movs	r7, r2
    317c:	e024      	b.n	31c8 <__aeabi_dadd+0xb0>
    317e:	4bc6      	ldr	r3, [pc, #792]	; (3498 <__aeabi_dadd+0x380>)
    3180:	429e      	cmp	r6, r3
    3182:	d04d      	beq.n	3220 <__aeabi_dadd+0x108>
    3184:	2380      	movs	r3, #128	; 0x80
    3186:	041b      	lsls	r3, r3, #16
    3188:	4319      	orrs	r1, r3
    318a:	2d38      	cmp	r5, #56	; 0x38
    318c:	dd00      	ble.n	3190 <__aeabi_dadd+0x78>
    318e:	e107      	b.n	33a0 <__aeabi_dadd+0x288>
    3190:	2d1f      	cmp	r5, #31
    3192:	dd00      	ble.n	3196 <__aeabi_dadd+0x7e>
    3194:	e138      	b.n	3408 <__aeabi_dadd+0x2f0>
    3196:	2020      	movs	r0, #32
    3198:	1b43      	subs	r3, r0, r5
    319a:	469a      	mov	sl, r3
    319c:	000b      	movs	r3, r1
    319e:	4650      	mov	r0, sl
    31a0:	4083      	lsls	r3, r0
    31a2:	4699      	mov	r9, r3
    31a4:	0013      	movs	r3, r2
    31a6:	4648      	mov	r0, r9
    31a8:	40eb      	lsrs	r3, r5
    31aa:	4318      	orrs	r0, r3
    31ac:	0003      	movs	r3, r0
    31ae:	4650      	mov	r0, sl
    31b0:	4082      	lsls	r2, r0
    31b2:	1e50      	subs	r0, r2, #1
    31b4:	4182      	sbcs	r2, r0
    31b6:	40e9      	lsrs	r1, r5
    31b8:	431a      	orrs	r2, r3
    31ba:	1aba      	subs	r2, r7, r2
    31bc:	1a61      	subs	r1, r4, r1
    31be:	4297      	cmp	r7, r2
    31c0:	41a4      	sbcs	r4, r4
    31c2:	0017      	movs	r7, r2
    31c4:	4264      	negs	r4, r4
    31c6:	1b0c      	subs	r4, r1, r4
    31c8:	0223      	lsls	r3, r4, #8
    31ca:	d562      	bpl.n	3292 <__aeabi_dadd+0x17a>
    31cc:	0264      	lsls	r4, r4, #9
    31ce:	0a65      	lsrs	r5, r4, #9
    31d0:	2d00      	cmp	r5, #0
    31d2:	d100      	bne.n	31d6 <__aeabi_dadd+0xbe>
    31d4:	e0df      	b.n	3396 <__aeabi_dadd+0x27e>
    31d6:	0028      	movs	r0, r5
    31d8:	f001 fbe4 	bl	49a4 <__clzsi2>
    31dc:	0003      	movs	r3, r0
    31de:	3b08      	subs	r3, #8
    31e0:	2b1f      	cmp	r3, #31
    31e2:	dd00      	ble.n	31e6 <__aeabi_dadd+0xce>
    31e4:	e0d2      	b.n	338c <__aeabi_dadd+0x274>
    31e6:	2220      	movs	r2, #32
    31e8:	003c      	movs	r4, r7
    31ea:	1ad2      	subs	r2, r2, r3
    31ec:	409d      	lsls	r5, r3
    31ee:	40d4      	lsrs	r4, r2
    31f0:	409f      	lsls	r7, r3
    31f2:	4325      	orrs	r5, r4
    31f4:	429e      	cmp	r6, r3
    31f6:	dd00      	ble.n	31fa <__aeabi_dadd+0xe2>
    31f8:	e0c4      	b.n	3384 <__aeabi_dadd+0x26c>
    31fa:	1b9e      	subs	r6, r3, r6
    31fc:	1c73      	adds	r3, r6, #1
    31fe:	2b1f      	cmp	r3, #31
    3200:	dd00      	ble.n	3204 <__aeabi_dadd+0xec>
    3202:	e0f1      	b.n	33e8 <__aeabi_dadd+0x2d0>
    3204:	2220      	movs	r2, #32
    3206:	0038      	movs	r0, r7
    3208:	0029      	movs	r1, r5
    320a:	1ad2      	subs	r2, r2, r3
    320c:	40d8      	lsrs	r0, r3
    320e:	4091      	lsls	r1, r2
    3210:	4097      	lsls	r7, r2
    3212:	002c      	movs	r4, r5
    3214:	4301      	orrs	r1, r0
    3216:	1e78      	subs	r0, r7, #1
    3218:	4187      	sbcs	r7, r0
    321a:	40dc      	lsrs	r4, r3
    321c:	2600      	movs	r6, #0
    321e:	430f      	orrs	r7, r1
    3220:	077b      	lsls	r3, r7, #29
    3222:	d009      	beq.n	3238 <__aeabi_dadd+0x120>
    3224:	230f      	movs	r3, #15
    3226:	403b      	ands	r3, r7
    3228:	2b04      	cmp	r3, #4
    322a:	d005      	beq.n	3238 <__aeabi_dadd+0x120>
    322c:	1d3b      	adds	r3, r7, #4
    322e:	42bb      	cmp	r3, r7
    3230:	41bf      	sbcs	r7, r7
    3232:	427f      	negs	r7, r7
    3234:	19e4      	adds	r4, r4, r7
    3236:	001f      	movs	r7, r3
    3238:	0223      	lsls	r3, r4, #8
    323a:	d52c      	bpl.n	3296 <__aeabi_dadd+0x17e>
    323c:	4b96      	ldr	r3, [pc, #600]	; (3498 <__aeabi_dadd+0x380>)
    323e:	3601      	adds	r6, #1
    3240:	429e      	cmp	r6, r3
    3242:	d100      	bne.n	3246 <__aeabi_dadd+0x12e>
    3244:	e09a      	b.n	337c <__aeabi_dadd+0x264>
    3246:	4645      	mov	r5, r8
    3248:	4b94      	ldr	r3, [pc, #592]	; (349c <__aeabi_dadd+0x384>)
    324a:	08ff      	lsrs	r7, r7, #3
    324c:	401c      	ands	r4, r3
    324e:	0760      	lsls	r0, r4, #29
    3250:	0576      	lsls	r6, r6, #21
    3252:	0264      	lsls	r4, r4, #9
    3254:	4307      	orrs	r7, r0
    3256:	0b24      	lsrs	r4, r4, #12
    3258:	0d76      	lsrs	r6, r6, #21
    325a:	2100      	movs	r1, #0
    325c:	0324      	lsls	r4, r4, #12
    325e:	0b23      	lsrs	r3, r4, #12
    3260:	0d0c      	lsrs	r4, r1, #20
    3262:	4a8f      	ldr	r2, [pc, #572]	; (34a0 <__aeabi_dadd+0x388>)
    3264:	0524      	lsls	r4, r4, #20
    3266:	431c      	orrs	r4, r3
    3268:	4014      	ands	r4, r2
    326a:	0533      	lsls	r3, r6, #20
    326c:	4323      	orrs	r3, r4
    326e:	005b      	lsls	r3, r3, #1
    3270:	07ed      	lsls	r5, r5, #31
    3272:	085b      	lsrs	r3, r3, #1
    3274:	432b      	orrs	r3, r5
    3276:	0038      	movs	r0, r7
    3278:	0019      	movs	r1, r3
    327a:	bc3c      	pop	{r2, r3, r4, r5}
    327c:	4690      	mov	r8, r2
    327e:	4699      	mov	r9, r3
    3280:	46a2      	mov	sl, r4
    3282:	46ab      	mov	fp, r5
    3284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3286:	4664      	mov	r4, ip
    3288:	4304      	orrs	r4, r0
    328a:	d100      	bne.n	328e <__aeabi_dadd+0x176>
    328c:	e211      	b.n	36b2 <__aeabi_dadd+0x59a>
    328e:	0004      	movs	r4, r0
    3290:	4667      	mov	r7, ip
    3292:	077b      	lsls	r3, r7, #29
    3294:	d1c6      	bne.n	3224 <__aeabi_dadd+0x10c>
    3296:	4645      	mov	r5, r8
    3298:	0760      	lsls	r0, r4, #29
    329a:	08ff      	lsrs	r7, r7, #3
    329c:	4307      	orrs	r7, r0
    329e:	08e4      	lsrs	r4, r4, #3
    32a0:	4b7d      	ldr	r3, [pc, #500]	; (3498 <__aeabi_dadd+0x380>)
    32a2:	429e      	cmp	r6, r3
    32a4:	d030      	beq.n	3308 <__aeabi_dadd+0x1f0>
    32a6:	0324      	lsls	r4, r4, #12
    32a8:	0576      	lsls	r6, r6, #21
    32aa:	0b24      	lsrs	r4, r4, #12
    32ac:	0d76      	lsrs	r6, r6, #21
    32ae:	e7d4      	b.n	325a <__aeabi_dadd+0x142>
    32b0:	1a33      	subs	r3, r6, r0
    32b2:	469a      	mov	sl, r3
    32b4:	2b00      	cmp	r3, #0
    32b6:	dd78      	ble.n	33aa <__aeabi_dadd+0x292>
    32b8:	2800      	cmp	r0, #0
    32ba:	d031      	beq.n	3320 <__aeabi_dadd+0x208>
    32bc:	4876      	ldr	r0, [pc, #472]	; (3498 <__aeabi_dadd+0x380>)
    32be:	4286      	cmp	r6, r0
    32c0:	d0ae      	beq.n	3220 <__aeabi_dadd+0x108>
    32c2:	2080      	movs	r0, #128	; 0x80
    32c4:	0400      	lsls	r0, r0, #16
    32c6:	4301      	orrs	r1, r0
    32c8:	4653      	mov	r3, sl
    32ca:	2b38      	cmp	r3, #56	; 0x38
    32cc:	dc00      	bgt.n	32d0 <__aeabi_dadd+0x1b8>
    32ce:	e0e9      	b.n	34a4 <__aeabi_dadd+0x38c>
    32d0:	430a      	orrs	r2, r1
    32d2:	1e51      	subs	r1, r2, #1
    32d4:	418a      	sbcs	r2, r1
    32d6:	2100      	movs	r1, #0
    32d8:	19d2      	adds	r2, r2, r7
    32da:	42ba      	cmp	r2, r7
    32dc:	41bf      	sbcs	r7, r7
    32de:	1909      	adds	r1, r1, r4
    32e0:	427c      	negs	r4, r7
    32e2:	0017      	movs	r7, r2
    32e4:	190c      	adds	r4, r1, r4
    32e6:	0223      	lsls	r3, r4, #8
    32e8:	d5d3      	bpl.n	3292 <__aeabi_dadd+0x17a>
    32ea:	4b6b      	ldr	r3, [pc, #428]	; (3498 <__aeabi_dadd+0x380>)
    32ec:	3601      	adds	r6, #1
    32ee:	429e      	cmp	r6, r3
    32f0:	d100      	bne.n	32f4 <__aeabi_dadd+0x1dc>
    32f2:	e13a      	b.n	356a <__aeabi_dadd+0x452>
    32f4:	2001      	movs	r0, #1
    32f6:	4b69      	ldr	r3, [pc, #420]	; (349c <__aeabi_dadd+0x384>)
    32f8:	401c      	ands	r4, r3
    32fa:	087b      	lsrs	r3, r7, #1
    32fc:	4007      	ands	r7, r0
    32fe:	431f      	orrs	r7, r3
    3300:	07e0      	lsls	r0, r4, #31
    3302:	4307      	orrs	r7, r0
    3304:	0864      	lsrs	r4, r4, #1
    3306:	e78b      	b.n	3220 <__aeabi_dadd+0x108>
    3308:	0023      	movs	r3, r4
    330a:	433b      	orrs	r3, r7
    330c:	d100      	bne.n	3310 <__aeabi_dadd+0x1f8>
    330e:	e1cb      	b.n	36a8 <__aeabi_dadd+0x590>
    3310:	2280      	movs	r2, #128	; 0x80
    3312:	0312      	lsls	r2, r2, #12
    3314:	4314      	orrs	r4, r2
    3316:	0324      	lsls	r4, r4, #12
    3318:	0b24      	lsrs	r4, r4, #12
    331a:	e79e      	b.n	325a <__aeabi_dadd+0x142>
    331c:	002e      	movs	r6, r5
    331e:	e77f      	b.n	3220 <__aeabi_dadd+0x108>
    3320:	0008      	movs	r0, r1
    3322:	4310      	orrs	r0, r2
    3324:	d100      	bne.n	3328 <__aeabi_dadd+0x210>
    3326:	e0b4      	b.n	3492 <__aeabi_dadd+0x37a>
    3328:	1e58      	subs	r0, r3, #1
    332a:	2800      	cmp	r0, #0
    332c:	d000      	beq.n	3330 <__aeabi_dadd+0x218>
    332e:	e0de      	b.n	34ee <__aeabi_dadd+0x3d6>
    3330:	18ba      	adds	r2, r7, r2
    3332:	42ba      	cmp	r2, r7
    3334:	419b      	sbcs	r3, r3
    3336:	1864      	adds	r4, r4, r1
    3338:	425b      	negs	r3, r3
    333a:	18e4      	adds	r4, r4, r3
    333c:	0017      	movs	r7, r2
    333e:	2601      	movs	r6, #1
    3340:	0223      	lsls	r3, r4, #8
    3342:	d5a6      	bpl.n	3292 <__aeabi_dadd+0x17a>
    3344:	2602      	movs	r6, #2
    3346:	e7d5      	b.n	32f4 <__aeabi_dadd+0x1dc>
    3348:	2d00      	cmp	r5, #0
    334a:	d16e      	bne.n	342a <__aeabi_dadd+0x312>
    334c:	1c70      	adds	r0, r6, #1
    334e:	0540      	lsls	r0, r0, #21
    3350:	0d40      	lsrs	r0, r0, #21
    3352:	2801      	cmp	r0, #1
    3354:	dc00      	bgt.n	3358 <__aeabi_dadd+0x240>
    3356:	e0f9      	b.n	354c <__aeabi_dadd+0x434>
    3358:	1ab8      	subs	r0, r7, r2
    335a:	4684      	mov	ip, r0
    335c:	4287      	cmp	r7, r0
    335e:	4180      	sbcs	r0, r0
    3360:	1ae5      	subs	r5, r4, r3
    3362:	4240      	negs	r0, r0
    3364:	1a2d      	subs	r5, r5, r0
    3366:	0228      	lsls	r0, r5, #8
    3368:	d400      	bmi.n	336c <__aeabi_dadd+0x254>
    336a:	e089      	b.n	3480 <__aeabi_dadd+0x368>
    336c:	1bd7      	subs	r7, r2, r7
    336e:	42ba      	cmp	r2, r7
    3370:	4192      	sbcs	r2, r2
    3372:	1b1c      	subs	r4, r3, r4
    3374:	4252      	negs	r2, r2
    3376:	1aa5      	subs	r5, r4, r2
    3378:	46d8      	mov	r8, fp
    337a:	e729      	b.n	31d0 <__aeabi_dadd+0xb8>
    337c:	4645      	mov	r5, r8
    337e:	2400      	movs	r4, #0
    3380:	2700      	movs	r7, #0
    3382:	e76a      	b.n	325a <__aeabi_dadd+0x142>
    3384:	4c45      	ldr	r4, [pc, #276]	; (349c <__aeabi_dadd+0x384>)
    3386:	1af6      	subs	r6, r6, r3
    3388:	402c      	ands	r4, r5
    338a:	e749      	b.n	3220 <__aeabi_dadd+0x108>
    338c:	003d      	movs	r5, r7
    338e:	3828      	subs	r0, #40	; 0x28
    3390:	4085      	lsls	r5, r0
    3392:	2700      	movs	r7, #0
    3394:	e72e      	b.n	31f4 <__aeabi_dadd+0xdc>
    3396:	0038      	movs	r0, r7
    3398:	f001 fb04 	bl	49a4 <__clzsi2>
    339c:	3020      	adds	r0, #32
    339e:	e71d      	b.n	31dc <__aeabi_dadd+0xc4>
    33a0:	430a      	orrs	r2, r1
    33a2:	1e51      	subs	r1, r2, #1
    33a4:	418a      	sbcs	r2, r1
    33a6:	2100      	movs	r1, #0
    33a8:	e707      	b.n	31ba <__aeabi_dadd+0xa2>
    33aa:	2b00      	cmp	r3, #0
    33ac:	d000      	beq.n	33b0 <__aeabi_dadd+0x298>
    33ae:	e0f3      	b.n	3598 <__aeabi_dadd+0x480>
    33b0:	1c70      	adds	r0, r6, #1
    33b2:	0543      	lsls	r3, r0, #21
    33b4:	0d5b      	lsrs	r3, r3, #21
    33b6:	2b01      	cmp	r3, #1
    33b8:	dc00      	bgt.n	33bc <__aeabi_dadd+0x2a4>
    33ba:	e0ad      	b.n	3518 <__aeabi_dadd+0x400>
    33bc:	4b36      	ldr	r3, [pc, #216]	; (3498 <__aeabi_dadd+0x380>)
    33be:	4298      	cmp	r0, r3
    33c0:	d100      	bne.n	33c4 <__aeabi_dadd+0x2ac>
    33c2:	e0d1      	b.n	3568 <__aeabi_dadd+0x450>
    33c4:	18ba      	adds	r2, r7, r2
    33c6:	42ba      	cmp	r2, r7
    33c8:	41bf      	sbcs	r7, r7
    33ca:	1864      	adds	r4, r4, r1
    33cc:	427f      	negs	r7, r7
    33ce:	19e4      	adds	r4, r4, r7
    33d0:	07e7      	lsls	r7, r4, #31
    33d2:	0852      	lsrs	r2, r2, #1
    33d4:	4317      	orrs	r7, r2
    33d6:	0864      	lsrs	r4, r4, #1
    33d8:	0006      	movs	r6, r0
    33da:	e721      	b.n	3220 <__aeabi_dadd+0x108>
    33dc:	482e      	ldr	r0, [pc, #184]	; (3498 <__aeabi_dadd+0x380>)
    33de:	4285      	cmp	r5, r0
    33e0:	d100      	bne.n	33e4 <__aeabi_dadd+0x2cc>
    33e2:	e093      	b.n	350c <__aeabi_dadd+0x3f4>
    33e4:	001d      	movs	r5, r3
    33e6:	e6d0      	b.n	318a <__aeabi_dadd+0x72>
    33e8:	0029      	movs	r1, r5
    33ea:	3e1f      	subs	r6, #31
    33ec:	40f1      	lsrs	r1, r6
    33ee:	2b20      	cmp	r3, #32
    33f0:	d100      	bne.n	33f4 <__aeabi_dadd+0x2dc>
    33f2:	e08d      	b.n	3510 <__aeabi_dadd+0x3f8>
    33f4:	2240      	movs	r2, #64	; 0x40
    33f6:	1ad3      	subs	r3, r2, r3
    33f8:	409d      	lsls	r5, r3
    33fa:	432f      	orrs	r7, r5
    33fc:	1e7d      	subs	r5, r7, #1
    33fe:	41af      	sbcs	r7, r5
    3400:	2400      	movs	r4, #0
    3402:	430f      	orrs	r7, r1
    3404:	2600      	movs	r6, #0
    3406:	e744      	b.n	3292 <__aeabi_dadd+0x17a>
    3408:	002b      	movs	r3, r5
    340a:	0008      	movs	r0, r1
    340c:	3b20      	subs	r3, #32
    340e:	40d8      	lsrs	r0, r3
    3410:	0003      	movs	r3, r0
    3412:	2d20      	cmp	r5, #32
    3414:	d100      	bne.n	3418 <__aeabi_dadd+0x300>
    3416:	e07d      	b.n	3514 <__aeabi_dadd+0x3fc>
    3418:	2040      	movs	r0, #64	; 0x40
    341a:	1b45      	subs	r5, r0, r5
    341c:	40a9      	lsls	r1, r5
    341e:	430a      	orrs	r2, r1
    3420:	1e51      	subs	r1, r2, #1
    3422:	418a      	sbcs	r2, r1
    3424:	2100      	movs	r1, #0
    3426:	431a      	orrs	r2, r3
    3428:	e6c7      	b.n	31ba <__aeabi_dadd+0xa2>
    342a:	2e00      	cmp	r6, #0
    342c:	d050      	beq.n	34d0 <__aeabi_dadd+0x3b8>
    342e:	4e1a      	ldr	r6, [pc, #104]	; (3498 <__aeabi_dadd+0x380>)
    3430:	42b0      	cmp	r0, r6
    3432:	d057      	beq.n	34e4 <__aeabi_dadd+0x3cc>
    3434:	2680      	movs	r6, #128	; 0x80
    3436:	426b      	negs	r3, r5
    3438:	4699      	mov	r9, r3
    343a:	0436      	lsls	r6, r6, #16
    343c:	4334      	orrs	r4, r6
    343e:	464b      	mov	r3, r9
    3440:	2b38      	cmp	r3, #56	; 0x38
    3442:	dd00      	ble.n	3446 <__aeabi_dadd+0x32e>
    3444:	e0d6      	b.n	35f4 <__aeabi_dadd+0x4dc>
    3446:	2b1f      	cmp	r3, #31
    3448:	dd00      	ble.n	344c <__aeabi_dadd+0x334>
    344a:	e135      	b.n	36b8 <__aeabi_dadd+0x5a0>
    344c:	2620      	movs	r6, #32
    344e:	1af5      	subs	r5, r6, r3
    3450:	0026      	movs	r6, r4
    3452:	40ae      	lsls	r6, r5
    3454:	46b2      	mov	sl, r6
    3456:	003e      	movs	r6, r7
    3458:	40de      	lsrs	r6, r3
    345a:	46ac      	mov	ip, r5
    345c:	0035      	movs	r5, r6
    345e:	4656      	mov	r6, sl
    3460:	432e      	orrs	r6, r5
    3462:	4665      	mov	r5, ip
    3464:	40af      	lsls	r7, r5
    3466:	1e7d      	subs	r5, r7, #1
    3468:	41af      	sbcs	r7, r5
    346a:	40dc      	lsrs	r4, r3
    346c:	4337      	orrs	r7, r6
    346e:	1bd7      	subs	r7, r2, r7
    3470:	42ba      	cmp	r2, r7
    3472:	4192      	sbcs	r2, r2
    3474:	1b0c      	subs	r4, r1, r4
    3476:	4252      	negs	r2, r2
    3478:	1aa4      	subs	r4, r4, r2
    347a:	0006      	movs	r6, r0
    347c:	46d8      	mov	r8, fp
    347e:	e6a3      	b.n	31c8 <__aeabi_dadd+0xb0>
    3480:	4664      	mov	r4, ip
    3482:	4667      	mov	r7, ip
    3484:	432c      	orrs	r4, r5
    3486:	d000      	beq.n	348a <__aeabi_dadd+0x372>
    3488:	e6a2      	b.n	31d0 <__aeabi_dadd+0xb8>
    348a:	2500      	movs	r5, #0
    348c:	2600      	movs	r6, #0
    348e:	2700      	movs	r7, #0
    3490:	e706      	b.n	32a0 <__aeabi_dadd+0x188>
    3492:	001e      	movs	r6, r3
    3494:	e6c4      	b.n	3220 <__aeabi_dadd+0x108>
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	000007ff 	.word	0x000007ff
    349c:	ff7fffff 	.word	0xff7fffff
    34a0:	800fffff 	.word	0x800fffff
    34a4:	2b1f      	cmp	r3, #31
    34a6:	dc63      	bgt.n	3570 <__aeabi_dadd+0x458>
    34a8:	2020      	movs	r0, #32
    34aa:	1ac3      	subs	r3, r0, r3
    34ac:	0008      	movs	r0, r1
    34ae:	4098      	lsls	r0, r3
    34b0:	469c      	mov	ip, r3
    34b2:	4683      	mov	fp, r0
    34b4:	4653      	mov	r3, sl
    34b6:	0010      	movs	r0, r2
    34b8:	40d8      	lsrs	r0, r3
    34ba:	0003      	movs	r3, r0
    34bc:	4658      	mov	r0, fp
    34be:	4318      	orrs	r0, r3
    34c0:	4663      	mov	r3, ip
    34c2:	409a      	lsls	r2, r3
    34c4:	1e53      	subs	r3, r2, #1
    34c6:	419a      	sbcs	r2, r3
    34c8:	4653      	mov	r3, sl
    34ca:	4302      	orrs	r2, r0
    34cc:	40d9      	lsrs	r1, r3
    34ce:	e703      	b.n	32d8 <__aeabi_dadd+0x1c0>
    34d0:	0026      	movs	r6, r4
    34d2:	433e      	orrs	r6, r7
    34d4:	d006      	beq.n	34e4 <__aeabi_dadd+0x3cc>
    34d6:	43eb      	mvns	r3, r5
    34d8:	4699      	mov	r9, r3
    34da:	2b00      	cmp	r3, #0
    34dc:	d0c7      	beq.n	346e <__aeabi_dadd+0x356>
    34de:	4e94      	ldr	r6, [pc, #592]	; (3730 <__aeabi_dadd+0x618>)
    34e0:	42b0      	cmp	r0, r6
    34e2:	d1ac      	bne.n	343e <__aeabi_dadd+0x326>
    34e4:	000c      	movs	r4, r1
    34e6:	0017      	movs	r7, r2
    34e8:	0006      	movs	r6, r0
    34ea:	46d8      	mov	r8, fp
    34ec:	e698      	b.n	3220 <__aeabi_dadd+0x108>
    34ee:	4b90      	ldr	r3, [pc, #576]	; (3730 <__aeabi_dadd+0x618>)
    34f0:	459a      	cmp	sl, r3
    34f2:	d00b      	beq.n	350c <__aeabi_dadd+0x3f4>
    34f4:	4682      	mov	sl, r0
    34f6:	e6e7      	b.n	32c8 <__aeabi_dadd+0x1b0>
    34f8:	2800      	cmp	r0, #0
    34fa:	d000      	beq.n	34fe <__aeabi_dadd+0x3e6>
    34fc:	e09e      	b.n	363c <__aeabi_dadd+0x524>
    34fe:	0018      	movs	r0, r3
    3500:	4310      	orrs	r0, r2
    3502:	d100      	bne.n	3506 <__aeabi_dadd+0x3ee>
    3504:	e0e9      	b.n	36da <__aeabi_dadd+0x5c2>
    3506:	001c      	movs	r4, r3
    3508:	0017      	movs	r7, r2
    350a:	46d8      	mov	r8, fp
    350c:	4e88      	ldr	r6, [pc, #544]	; (3730 <__aeabi_dadd+0x618>)
    350e:	e687      	b.n	3220 <__aeabi_dadd+0x108>
    3510:	2500      	movs	r5, #0
    3512:	e772      	b.n	33fa <__aeabi_dadd+0x2e2>
    3514:	2100      	movs	r1, #0
    3516:	e782      	b.n	341e <__aeabi_dadd+0x306>
    3518:	0023      	movs	r3, r4
    351a:	433b      	orrs	r3, r7
    351c:	2e00      	cmp	r6, #0
    351e:	d000      	beq.n	3522 <__aeabi_dadd+0x40a>
    3520:	e0ab      	b.n	367a <__aeabi_dadd+0x562>
    3522:	2b00      	cmp	r3, #0
    3524:	d100      	bne.n	3528 <__aeabi_dadd+0x410>
    3526:	e0e7      	b.n	36f8 <__aeabi_dadd+0x5e0>
    3528:	000b      	movs	r3, r1
    352a:	4313      	orrs	r3, r2
    352c:	d100      	bne.n	3530 <__aeabi_dadd+0x418>
    352e:	e677      	b.n	3220 <__aeabi_dadd+0x108>
    3530:	18ba      	adds	r2, r7, r2
    3532:	42ba      	cmp	r2, r7
    3534:	41bf      	sbcs	r7, r7
    3536:	1864      	adds	r4, r4, r1
    3538:	427f      	negs	r7, r7
    353a:	19e4      	adds	r4, r4, r7
    353c:	0223      	lsls	r3, r4, #8
    353e:	d400      	bmi.n	3542 <__aeabi_dadd+0x42a>
    3540:	e0f2      	b.n	3728 <__aeabi_dadd+0x610>
    3542:	4b7c      	ldr	r3, [pc, #496]	; (3734 <__aeabi_dadd+0x61c>)
    3544:	0017      	movs	r7, r2
    3546:	401c      	ands	r4, r3
    3548:	0006      	movs	r6, r0
    354a:	e669      	b.n	3220 <__aeabi_dadd+0x108>
    354c:	0020      	movs	r0, r4
    354e:	4338      	orrs	r0, r7
    3550:	2e00      	cmp	r6, #0
    3552:	d1d1      	bne.n	34f8 <__aeabi_dadd+0x3e0>
    3554:	2800      	cmp	r0, #0
    3556:	d15b      	bne.n	3610 <__aeabi_dadd+0x4f8>
    3558:	001c      	movs	r4, r3
    355a:	4314      	orrs	r4, r2
    355c:	d100      	bne.n	3560 <__aeabi_dadd+0x448>
    355e:	e0a8      	b.n	36b2 <__aeabi_dadd+0x59a>
    3560:	001c      	movs	r4, r3
    3562:	0017      	movs	r7, r2
    3564:	46d8      	mov	r8, fp
    3566:	e65b      	b.n	3220 <__aeabi_dadd+0x108>
    3568:	0006      	movs	r6, r0
    356a:	2400      	movs	r4, #0
    356c:	2700      	movs	r7, #0
    356e:	e697      	b.n	32a0 <__aeabi_dadd+0x188>
    3570:	4650      	mov	r0, sl
    3572:	000b      	movs	r3, r1
    3574:	3820      	subs	r0, #32
    3576:	40c3      	lsrs	r3, r0
    3578:	4699      	mov	r9, r3
    357a:	4653      	mov	r3, sl
    357c:	2b20      	cmp	r3, #32
    357e:	d100      	bne.n	3582 <__aeabi_dadd+0x46a>
    3580:	e095      	b.n	36ae <__aeabi_dadd+0x596>
    3582:	2340      	movs	r3, #64	; 0x40
    3584:	4650      	mov	r0, sl
    3586:	1a1b      	subs	r3, r3, r0
    3588:	4099      	lsls	r1, r3
    358a:	430a      	orrs	r2, r1
    358c:	1e51      	subs	r1, r2, #1
    358e:	418a      	sbcs	r2, r1
    3590:	464b      	mov	r3, r9
    3592:	2100      	movs	r1, #0
    3594:	431a      	orrs	r2, r3
    3596:	e69f      	b.n	32d8 <__aeabi_dadd+0x1c0>
    3598:	2e00      	cmp	r6, #0
    359a:	d130      	bne.n	35fe <__aeabi_dadd+0x4e6>
    359c:	0026      	movs	r6, r4
    359e:	433e      	orrs	r6, r7
    35a0:	d067      	beq.n	3672 <__aeabi_dadd+0x55a>
    35a2:	43db      	mvns	r3, r3
    35a4:	469a      	mov	sl, r3
    35a6:	2b00      	cmp	r3, #0
    35a8:	d01c      	beq.n	35e4 <__aeabi_dadd+0x4cc>
    35aa:	4e61      	ldr	r6, [pc, #388]	; (3730 <__aeabi_dadd+0x618>)
    35ac:	42b0      	cmp	r0, r6
    35ae:	d060      	beq.n	3672 <__aeabi_dadd+0x55a>
    35b0:	4653      	mov	r3, sl
    35b2:	2b38      	cmp	r3, #56	; 0x38
    35b4:	dd00      	ble.n	35b8 <__aeabi_dadd+0x4a0>
    35b6:	e096      	b.n	36e6 <__aeabi_dadd+0x5ce>
    35b8:	2b1f      	cmp	r3, #31
    35ba:	dd00      	ble.n	35be <__aeabi_dadd+0x4a6>
    35bc:	e09f      	b.n	36fe <__aeabi_dadd+0x5e6>
    35be:	2620      	movs	r6, #32
    35c0:	1af3      	subs	r3, r6, r3
    35c2:	0026      	movs	r6, r4
    35c4:	409e      	lsls	r6, r3
    35c6:	469c      	mov	ip, r3
    35c8:	46b3      	mov	fp, r6
    35ca:	4653      	mov	r3, sl
    35cc:	003e      	movs	r6, r7
    35ce:	40de      	lsrs	r6, r3
    35d0:	0033      	movs	r3, r6
    35d2:	465e      	mov	r6, fp
    35d4:	431e      	orrs	r6, r3
    35d6:	4663      	mov	r3, ip
    35d8:	409f      	lsls	r7, r3
    35da:	1e7b      	subs	r3, r7, #1
    35dc:	419f      	sbcs	r7, r3
    35de:	4653      	mov	r3, sl
    35e0:	40dc      	lsrs	r4, r3
    35e2:	4337      	orrs	r7, r6
    35e4:	18bf      	adds	r7, r7, r2
    35e6:	4297      	cmp	r7, r2
    35e8:	4192      	sbcs	r2, r2
    35ea:	1864      	adds	r4, r4, r1
    35ec:	4252      	negs	r2, r2
    35ee:	18a4      	adds	r4, r4, r2
    35f0:	0006      	movs	r6, r0
    35f2:	e678      	b.n	32e6 <__aeabi_dadd+0x1ce>
    35f4:	4327      	orrs	r7, r4
    35f6:	1e7c      	subs	r4, r7, #1
    35f8:	41a7      	sbcs	r7, r4
    35fa:	2400      	movs	r4, #0
    35fc:	e737      	b.n	346e <__aeabi_dadd+0x356>
    35fe:	4e4c      	ldr	r6, [pc, #304]	; (3730 <__aeabi_dadd+0x618>)
    3600:	42b0      	cmp	r0, r6
    3602:	d036      	beq.n	3672 <__aeabi_dadd+0x55a>
    3604:	2680      	movs	r6, #128	; 0x80
    3606:	425b      	negs	r3, r3
    3608:	0436      	lsls	r6, r6, #16
    360a:	469a      	mov	sl, r3
    360c:	4334      	orrs	r4, r6
    360e:	e7cf      	b.n	35b0 <__aeabi_dadd+0x498>
    3610:	0018      	movs	r0, r3
    3612:	4310      	orrs	r0, r2
    3614:	d100      	bne.n	3618 <__aeabi_dadd+0x500>
    3616:	e603      	b.n	3220 <__aeabi_dadd+0x108>
    3618:	1ab8      	subs	r0, r7, r2
    361a:	4684      	mov	ip, r0
    361c:	4567      	cmp	r7, ip
    361e:	41ad      	sbcs	r5, r5
    3620:	1ae0      	subs	r0, r4, r3
    3622:	426d      	negs	r5, r5
    3624:	1b40      	subs	r0, r0, r5
    3626:	0205      	lsls	r5, r0, #8
    3628:	d400      	bmi.n	362c <__aeabi_dadd+0x514>
    362a:	e62c      	b.n	3286 <__aeabi_dadd+0x16e>
    362c:	1bd7      	subs	r7, r2, r7
    362e:	42ba      	cmp	r2, r7
    3630:	4192      	sbcs	r2, r2
    3632:	1b1c      	subs	r4, r3, r4
    3634:	4252      	negs	r2, r2
    3636:	1aa4      	subs	r4, r4, r2
    3638:	46d8      	mov	r8, fp
    363a:	e5f1      	b.n	3220 <__aeabi_dadd+0x108>
    363c:	0018      	movs	r0, r3
    363e:	4310      	orrs	r0, r2
    3640:	d100      	bne.n	3644 <__aeabi_dadd+0x52c>
    3642:	e763      	b.n	350c <__aeabi_dadd+0x3f4>
    3644:	08f8      	lsrs	r0, r7, #3
    3646:	0767      	lsls	r7, r4, #29
    3648:	4307      	orrs	r7, r0
    364a:	2080      	movs	r0, #128	; 0x80
    364c:	08e4      	lsrs	r4, r4, #3
    364e:	0300      	lsls	r0, r0, #12
    3650:	4204      	tst	r4, r0
    3652:	d008      	beq.n	3666 <__aeabi_dadd+0x54e>
    3654:	08dd      	lsrs	r5, r3, #3
    3656:	4205      	tst	r5, r0
    3658:	d105      	bne.n	3666 <__aeabi_dadd+0x54e>
    365a:	08d2      	lsrs	r2, r2, #3
    365c:	0759      	lsls	r1, r3, #29
    365e:	4311      	orrs	r1, r2
    3660:	000f      	movs	r7, r1
    3662:	002c      	movs	r4, r5
    3664:	46d8      	mov	r8, fp
    3666:	0f7b      	lsrs	r3, r7, #29
    3668:	00e4      	lsls	r4, r4, #3
    366a:	431c      	orrs	r4, r3
    366c:	00ff      	lsls	r7, r7, #3
    366e:	4e30      	ldr	r6, [pc, #192]	; (3730 <__aeabi_dadd+0x618>)
    3670:	e5d6      	b.n	3220 <__aeabi_dadd+0x108>
    3672:	000c      	movs	r4, r1
    3674:	0017      	movs	r7, r2
    3676:	0006      	movs	r6, r0
    3678:	e5d2      	b.n	3220 <__aeabi_dadd+0x108>
    367a:	2b00      	cmp	r3, #0
    367c:	d038      	beq.n	36f0 <__aeabi_dadd+0x5d8>
    367e:	000b      	movs	r3, r1
    3680:	4313      	orrs	r3, r2
    3682:	d100      	bne.n	3686 <__aeabi_dadd+0x56e>
    3684:	e742      	b.n	350c <__aeabi_dadd+0x3f4>
    3686:	08f8      	lsrs	r0, r7, #3
    3688:	0767      	lsls	r7, r4, #29
    368a:	4307      	orrs	r7, r0
    368c:	2080      	movs	r0, #128	; 0x80
    368e:	08e4      	lsrs	r4, r4, #3
    3690:	0300      	lsls	r0, r0, #12
    3692:	4204      	tst	r4, r0
    3694:	d0e7      	beq.n	3666 <__aeabi_dadd+0x54e>
    3696:	08cb      	lsrs	r3, r1, #3
    3698:	4203      	tst	r3, r0
    369a:	d1e4      	bne.n	3666 <__aeabi_dadd+0x54e>
    369c:	08d2      	lsrs	r2, r2, #3
    369e:	0749      	lsls	r1, r1, #29
    36a0:	4311      	orrs	r1, r2
    36a2:	000f      	movs	r7, r1
    36a4:	001c      	movs	r4, r3
    36a6:	e7de      	b.n	3666 <__aeabi_dadd+0x54e>
    36a8:	2700      	movs	r7, #0
    36aa:	2400      	movs	r4, #0
    36ac:	e5d5      	b.n	325a <__aeabi_dadd+0x142>
    36ae:	2100      	movs	r1, #0
    36b0:	e76b      	b.n	358a <__aeabi_dadd+0x472>
    36b2:	2500      	movs	r5, #0
    36b4:	2700      	movs	r7, #0
    36b6:	e5f3      	b.n	32a0 <__aeabi_dadd+0x188>
    36b8:	464e      	mov	r6, r9
    36ba:	0025      	movs	r5, r4
    36bc:	3e20      	subs	r6, #32
    36be:	40f5      	lsrs	r5, r6
    36c0:	464b      	mov	r3, r9
    36c2:	002e      	movs	r6, r5
    36c4:	2b20      	cmp	r3, #32
    36c6:	d02d      	beq.n	3724 <__aeabi_dadd+0x60c>
    36c8:	2540      	movs	r5, #64	; 0x40
    36ca:	1aed      	subs	r5, r5, r3
    36cc:	40ac      	lsls	r4, r5
    36ce:	4327      	orrs	r7, r4
    36d0:	1e7c      	subs	r4, r7, #1
    36d2:	41a7      	sbcs	r7, r4
    36d4:	2400      	movs	r4, #0
    36d6:	4337      	orrs	r7, r6
    36d8:	e6c9      	b.n	346e <__aeabi_dadd+0x356>
    36da:	2480      	movs	r4, #128	; 0x80
    36dc:	2500      	movs	r5, #0
    36de:	0324      	lsls	r4, r4, #12
    36e0:	4e13      	ldr	r6, [pc, #76]	; (3730 <__aeabi_dadd+0x618>)
    36e2:	2700      	movs	r7, #0
    36e4:	e5dc      	b.n	32a0 <__aeabi_dadd+0x188>
    36e6:	4327      	orrs	r7, r4
    36e8:	1e7c      	subs	r4, r7, #1
    36ea:	41a7      	sbcs	r7, r4
    36ec:	2400      	movs	r4, #0
    36ee:	e779      	b.n	35e4 <__aeabi_dadd+0x4cc>
    36f0:	000c      	movs	r4, r1
    36f2:	0017      	movs	r7, r2
    36f4:	4e0e      	ldr	r6, [pc, #56]	; (3730 <__aeabi_dadd+0x618>)
    36f6:	e593      	b.n	3220 <__aeabi_dadd+0x108>
    36f8:	000c      	movs	r4, r1
    36fa:	0017      	movs	r7, r2
    36fc:	e590      	b.n	3220 <__aeabi_dadd+0x108>
    36fe:	4656      	mov	r6, sl
    3700:	0023      	movs	r3, r4
    3702:	3e20      	subs	r6, #32
    3704:	40f3      	lsrs	r3, r6
    3706:	4699      	mov	r9, r3
    3708:	4653      	mov	r3, sl
    370a:	2b20      	cmp	r3, #32
    370c:	d00e      	beq.n	372c <__aeabi_dadd+0x614>
    370e:	2340      	movs	r3, #64	; 0x40
    3710:	4656      	mov	r6, sl
    3712:	1b9b      	subs	r3, r3, r6
    3714:	409c      	lsls	r4, r3
    3716:	4327      	orrs	r7, r4
    3718:	1e7c      	subs	r4, r7, #1
    371a:	41a7      	sbcs	r7, r4
    371c:	464b      	mov	r3, r9
    371e:	2400      	movs	r4, #0
    3720:	431f      	orrs	r7, r3
    3722:	e75f      	b.n	35e4 <__aeabi_dadd+0x4cc>
    3724:	2400      	movs	r4, #0
    3726:	e7d2      	b.n	36ce <__aeabi_dadd+0x5b6>
    3728:	0017      	movs	r7, r2
    372a:	e5b2      	b.n	3292 <__aeabi_dadd+0x17a>
    372c:	2400      	movs	r4, #0
    372e:	e7f2      	b.n	3716 <__aeabi_dadd+0x5fe>
    3730:	000007ff 	.word	0x000007ff
    3734:	ff7fffff 	.word	0xff7fffff

00003738 <__aeabi_ddiv>:
    3738:	b5f0      	push	{r4, r5, r6, r7, lr}
    373a:	4657      	mov	r7, sl
    373c:	4645      	mov	r5, r8
    373e:	46de      	mov	lr, fp
    3740:	464e      	mov	r6, r9
    3742:	b5e0      	push	{r5, r6, r7, lr}
    3744:	004c      	lsls	r4, r1, #1
    3746:	030e      	lsls	r6, r1, #12
    3748:	b087      	sub	sp, #28
    374a:	4683      	mov	fp, r0
    374c:	4692      	mov	sl, r2
    374e:	001d      	movs	r5, r3
    3750:	4680      	mov	r8, r0
    3752:	0b36      	lsrs	r6, r6, #12
    3754:	0d64      	lsrs	r4, r4, #21
    3756:	0fcf      	lsrs	r7, r1, #31
    3758:	2c00      	cmp	r4, #0
    375a:	d04f      	beq.n	37fc <__aeabi_ddiv+0xc4>
    375c:	4b6f      	ldr	r3, [pc, #444]	; (391c <__aeabi_ddiv+0x1e4>)
    375e:	429c      	cmp	r4, r3
    3760:	d035      	beq.n	37ce <__aeabi_ddiv+0x96>
    3762:	2380      	movs	r3, #128	; 0x80
    3764:	0f42      	lsrs	r2, r0, #29
    3766:	041b      	lsls	r3, r3, #16
    3768:	00f6      	lsls	r6, r6, #3
    376a:	4313      	orrs	r3, r2
    376c:	4333      	orrs	r3, r6
    376e:	4699      	mov	r9, r3
    3770:	00c3      	lsls	r3, r0, #3
    3772:	4698      	mov	r8, r3
    3774:	4b6a      	ldr	r3, [pc, #424]	; (3920 <__aeabi_ddiv+0x1e8>)
    3776:	2600      	movs	r6, #0
    3778:	469c      	mov	ip, r3
    377a:	2300      	movs	r3, #0
    377c:	4464      	add	r4, ip
    377e:	9303      	str	r3, [sp, #12]
    3780:	032b      	lsls	r3, r5, #12
    3782:	0b1b      	lsrs	r3, r3, #12
    3784:	469b      	mov	fp, r3
    3786:	006b      	lsls	r3, r5, #1
    3788:	0fed      	lsrs	r5, r5, #31
    378a:	4650      	mov	r0, sl
    378c:	0d5b      	lsrs	r3, r3, #21
    378e:	9501      	str	r5, [sp, #4]
    3790:	d05e      	beq.n	3850 <__aeabi_ddiv+0x118>
    3792:	4a62      	ldr	r2, [pc, #392]	; (391c <__aeabi_ddiv+0x1e4>)
    3794:	4293      	cmp	r3, r2
    3796:	d053      	beq.n	3840 <__aeabi_ddiv+0x108>
    3798:	465a      	mov	r2, fp
    379a:	00d1      	lsls	r1, r2, #3
    379c:	2280      	movs	r2, #128	; 0x80
    379e:	0f40      	lsrs	r0, r0, #29
    37a0:	0412      	lsls	r2, r2, #16
    37a2:	4302      	orrs	r2, r0
    37a4:	430a      	orrs	r2, r1
    37a6:	4693      	mov	fp, r2
    37a8:	4652      	mov	r2, sl
    37aa:	00d1      	lsls	r1, r2, #3
    37ac:	4a5c      	ldr	r2, [pc, #368]	; (3920 <__aeabi_ddiv+0x1e8>)
    37ae:	4694      	mov	ip, r2
    37b0:	2200      	movs	r2, #0
    37b2:	4463      	add	r3, ip
    37b4:	0038      	movs	r0, r7
    37b6:	4068      	eors	r0, r5
    37b8:	4684      	mov	ip, r0
    37ba:	9002      	str	r0, [sp, #8]
    37bc:	1ae4      	subs	r4, r4, r3
    37be:	4316      	orrs	r6, r2
    37c0:	2e0f      	cmp	r6, #15
    37c2:	d900      	bls.n	37c6 <__aeabi_ddiv+0x8e>
    37c4:	e0b4      	b.n	3930 <__aeabi_ddiv+0x1f8>
    37c6:	4b57      	ldr	r3, [pc, #348]	; (3924 <__aeabi_ddiv+0x1ec>)
    37c8:	00b6      	lsls	r6, r6, #2
    37ca:	599b      	ldr	r3, [r3, r6]
    37cc:	469f      	mov	pc, r3
    37ce:	0003      	movs	r3, r0
    37d0:	4333      	orrs	r3, r6
    37d2:	4699      	mov	r9, r3
    37d4:	d16c      	bne.n	38b0 <__aeabi_ddiv+0x178>
    37d6:	2300      	movs	r3, #0
    37d8:	4698      	mov	r8, r3
    37da:	3302      	adds	r3, #2
    37dc:	2608      	movs	r6, #8
    37de:	9303      	str	r3, [sp, #12]
    37e0:	e7ce      	b.n	3780 <__aeabi_ddiv+0x48>
    37e2:	46cb      	mov	fp, r9
    37e4:	4641      	mov	r1, r8
    37e6:	9a03      	ldr	r2, [sp, #12]
    37e8:	9701      	str	r7, [sp, #4]
    37ea:	2a02      	cmp	r2, #2
    37ec:	d165      	bne.n	38ba <__aeabi_ddiv+0x182>
    37ee:	9b01      	ldr	r3, [sp, #4]
    37f0:	4c4a      	ldr	r4, [pc, #296]	; (391c <__aeabi_ddiv+0x1e4>)
    37f2:	469c      	mov	ip, r3
    37f4:	2300      	movs	r3, #0
    37f6:	2200      	movs	r2, #0
    37f8:	4698      	mov	r8, r3
    37fa:	e06b      	b.n	38d4 <__aeabi_ddiv+0x19c>
    37fc:	0003      	movs	r3, r0
    37fe:	4333      	orrs	r3, r6
    3800:	4699      	mov	r9, r3
    3802:	d04e      	beq.n	38a2 <__aeabi_ddiv+0x16a>
    3804:	2e00      	cmp	r6, #0
    3806:	d100      	bne.n	380a <__aeabi_ddiv+0xd2>
    3808:	e1bc      	b.n	3b84 <__aeabi_ddiv+0x44c>
    380a:	0030      	movs	r0, r6
    380c:	f001 f8ca 	bl	49a4 <__clzsi2>
    3810:	0003      	movs	r3, r0
    3812:	3b0b      	subs	r3, #11
    3814:	2b1c      	cmp	r3, #28
    3816:	dd00      	ble.n	381a <__aeabi_ddiv+0xe2>
    3818:	e1ac      	b.n	3b74 <__aeabi_ddiv+0x43c>
    381a:	221d      	movs	r2, #29
    381c:	1ad3      	subs	r3, r2, r3
    381e:	465a      	mov	r2, fp
    3820:	0001      	movs	r1, r0
    3822:	40da      	lsrs	r2, r3
    3824:	3908      	subs	r1, #8
    3826:	408e      	lsls	r6, r1
    3828:	0013      	movs	r3, r2
    382a:	4333      	orrs	r3, r6
    382c:	4699      	mov	r9, r3
    382e:	465b      	mov	r3, fp
    3830:	408b      	lsls	r3, r1
    3832:	4698      	mov	r8, r3
    3834:	2300      	movs	r3, #0
    3836:	4c3c      	ldr	r4, [pc, #240]	; (3928 <__aeabi_ddiv+0x1f0>)
    3838:	2600      	movs	r6, #0
    383a:	1a24      	subs	r4, r4, r0
    383c:	9303      	str	r3, [sp, #12]
    383e:	e79f      	b.n	3780 <__aeabi_ddiv+0x48>
    3840:	4651      	mov	r1, sl
    3842:	465a      	mov	r2, fp
    3844:	4311      	orrs	r1, r2
    3846:	d129      	bne.n	389c <__aeabi_ddiv+0x164>
    3848:	2200      	movs	r2, #0
    384a:	4693      	mov	fp, r2
    384c:	3202      	adds	r2, #2
    384e:	e7b1      	b.n	37b4 <__aeabi_ddiv+0x7c>
    3850:	4659      	mov	r1, fp
    3852:	4301      	orrs	r1, r0
    3854:	d01e      	beq.n	3894 <__aeabi_ddiv+0x15c>
    3856:	465b      	mov	r3, fp
    3858:	2b00      	cmp	r3, #0
    385a:	d100      	bne.n	385e <__aeabi_ddiv+0x126>
    385c:	e19e      	b.n	3b9c <__aeabi_ddiv+0x464>
    385e:	4658      	mov	r0, fp
    3860:	f001 f8a0 	bl	49a4 <__clzsi2>
    3864:	0003      	movs	r3, r0
    3866:	3b0b      	subs	r3, #11
    3868:	2b1c      	cmp	r3, #28
    386a:	dd00      	ble.n	386e <__aeabi_ddiv+0x136>
    386c:	e18f      	b.n	3b8e <__aeabi_ddiv+0x456>
    386e:	0002      	movs	r2, r0
    3870:	4659      	mov	r1, fp
    3872:	3a08      	subs	r2, #8
    3874:	4091      	lsls	r1, r2
    3876:	468b      	mov	fp, r1
    3878:	211d      	movs	r1, #29
    387a:	1acb      	subs	r3, r1, r3
    387c:	4651      	mov	r1, sl
    387e:	40d9      	lsrs	r1, r3
    3880:	000b      	movs	r3, r1
    3882:	4659      	mov	r1, fp
    3884:	430b      	orrs	r3, r1
    3886:	4651      	mov	r1, sl
    3888:	469b      	mov	fp, r3
    388a:	4091      	lsls	r1, r2
    388c:	4b26      	ldr	r3, [pc, #152]	; (3928 <__aeabi_ddiv+0x1f0>)
    388e:	2200      	movs	r2, #0
    3890:	1a1b      	subs	r3, r3, r0
    3892:	e78f      	b.n	37b4 <__aeabi_ddiv+0x7c>
    3894:	2300      	movs	r3, #0
    3896:	2201      	movs	r2, #1
    3898:	469b      	mov	fp, r3
    389a:	e78b      	b.n	37b4 <__aeabi_ddiv+0x7c>
    389c:	4651      	mov	r1, sl
    389e:	2203      	movs	r2, #3
    38a0:	e788      	b.n	37b4 <__aeabi_ddiv+0x7c>
    38a2:	2300      	movs	r3, #0
    38a4:	4698      	mov	r8, r3
    38a6:	3301      	adds	r3, #1
    38a8:	2604      	movs	r6, #4
    38aa:	2400      	movs	r4, #0
    38ac:	9303      	str	r3, [sp, #12]
    38ae:	e767      	b.n	3780 <__aeabi_ddiv+0x48>
    38b0:	2303      	movs	r3, #3
    38b2:	46b1      	mov	r9, r6
    38b4:	9303      	str	r3, [sp, #12]
    38b6:	260c      	movs	r6, #12
    38b8:	e762      	b.n	3780 <__aeabi_ddiv+0x48>
    38ba:	2a03      	cmp	r2, #3
    38bc:	d100      	bne.n	38c0 <__aeabi_ddiv+0x188>
    38be:	e25c      	b.n	3d7a <__aeabi_ddiv+0x642>
    38c0:	9b01      	ldr	r3, [sp, #4]
    38c2:	2a01      	cmp	r2, #1
    38c4:	d000      	beq.n	38c8 <__aeabi_ddiv+0x190>
    38c6:	e1e4      	b.n	3c92 <__aeabi_ddiv+0x55a>
    38c8:	4013      	ands	r3, r2
    38ca:	469c      	mov	ip, r3
    38cc:	2300      	movs	r3, #0
    38ce:	2400      	movs	r4, #0
    38d0:	2200      	movs	r2, #0
    38d2:	4698      	mov	r8, r3
    38d4:	2100      	movs	r1, #0
    38d6:	0312      	lsls	r2, r2, #12
    38d8:	0b13      	lsrs	r3, r2, #12
    38da:	0d0a      	lsrs	r2, r1, #20
    38dc:	0512      	lsls	r2, r2, #20
    38de:	431a      	orrs	r2, r3
    38e0:	0523      	lsls	r3, r4, #20
    38e2:	4c12      	ldr	r4, [pc, #72]	; (392c <__aeabi_ddiv+0x1f4>)
    38e4:	4640      	mov	r0, r8
    38e6:	4022      	ands	r2, r4
    38e8:	4313      	orrs	r3, r2
    38ea:	4662      	mov	r2, ip
    38ec:	005b      	lsls	r3, r3, #1
    38ee:	07d2      	lsls	r2, r2, #31
    38f0:	085b      	lsrs	r3, r3, #1
    38f2:	4313      	orrs	r3, r2
    38f4:	0019      	movs	r1, r3
    38f6:	b007      	add	sp, #28
    38f8:	bc3c      	pop	{r2, r3, r4, r5}
    38fa:	4690      	mov	r8, r2
    38fc:	4699      	mov	r9, r3
    38fe:	46a2      	mov	sl, r4
    3900:	46ab      	mov	fp, r5
    3902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3904:	2300      	movs	r3, #0
    3906:	2280      	movs	r2, #128	; 0x80
    3908:	469c      	mov	ip, r3
    390a:	0312      	lsls	r2, r2, #12
    390c:	4698      	mov	r8, r3
    390e:	4c03      	ldr	r4, [pc, #12]	; (391c <__aeabi_ddiv+0x1e4>)
    3910:	e7e0      	b.n	38d4 <__aeabi_ddiv+0x19c>
    3912:	2300      	movs	r3, #0
    3914:	4c01      	ldr	r4, [pc, #4]	; (391c <__aeabi_ddiv+0x1e4>)
    3916:	2200      	movs	r2, #0
    3918:	4698      	mov	r8, r3
    391a:	e7db      	b.n	38d4 <__aeabi_ddiv+0x19c>
    391c:	000007ff 	.word	0x000007ff
    3920:	fffffc01 	.word	0xfffffc01
    3924:	000064cc 	.word	0x000064cc
    3928:	fffffc0d 	.word	0xfffffc0d
    392c:	800fffff 	.word	0x800fffff
    3930:	45d9      	cmp	r9, fp
    3932:	d900      	bls.n	3936 <__aeabi_ddiv+0x1fe>
    3934:	e139      	b.n	3baa <__aeabi_ddiv+0x472>
    3936:	d100      	bne.n	393a <__aeabi_ddiv+0x202>
    3938:	e134      	b.n	3ba4 <__aeabi_ddiv+0x46c>
    393a:	2300      	movs	r3, #0
    393c:	4646      	mov	r6, r8
    393e:	464d      	mov	r5, r9
    3940:	469a      	mov	sl, r3
    3942:	3c01      	subs	r4, #1
    3944:	465b      	mov	r3, fp
    3946:	0e0a      	lsrs	r2, r1, #24
    3948:	021b      	lsls	r3, r3, #8
    394a:	431a      	orrs	r2, r3
    394c:	020b      	lsls	r3, r1, #8
    394e:	0c17      	lsrs	r7, r2, #16
    3950:	9303      	str	r3, [sp, #12]
    3952:	0413      	lsls	r3, r2, #16
    3954:	0c1b      	lsrs	r3, r3, #16
    3956:	0039      	movs	r1, r7
    3958:	0028      	movs	r0, r5
    395a:	4690      	mov	r8, r2
    395c:	9301      	str	r3, [sp, #4]
    395e:	f7ff fb25 	bl	2fac <__udivsi3>
    3962:	0002      	movs	r2, r0
    3964:	9b01      	ldr	r3, [sp, #4]
    3966:	4683      	mov	fp, r0
    3968:	435a      	muls	r2, r3
    396a:	0028      	movs	r0, r5
    396c:	0039      	movs	r1, r7
    396e:	4691      	mov	r9, r2
    3970:	f7ff fba2 	bl	30b8 <__aeabi_uidivmod>
    3974:	0c35      	lsrs	r5, r6, #16
    3976:	0409      	lsls	r1, r1, #16
    3978:	430d      	orrs	r5, r1
    397a:	45a9      	cmp	r9, r5
    397c:	d90d      	bls.n	399a <__aeabi_ddiv+0x262>
    397e:	465b      	mov	r3, fp
    3980:	4445      	add	r5, r8
    3982:	3b01      	subs	r3, #1
    3984:	45a8      	cmp	r8, r5
    3986:	d900      	bls.n	398a <__aeabi_ddiv+0x252>
    3988:	e13a      	b.n	3c00 <__aeabi_ddiv+0x4c8>
    398a:	45a9      	cmp	r9, r5
    398c:	d800      	bhi.n	3990 <__aeabi_ddiv+0x258>
    398e:	e137      	b.n	3c00 <__aeabi_ddiv+0x4c8>
    3990:	2302      	movs	r3, #2
    3992:	425b      	negs	r3, r3
    3994:	469c      	mov	ip, r3
    3996:	4445      	add	r5, r8
    3998:	44e3      	add	fp, ip
    399a:	464b      	mov	r3, r9
    399c:	1aeb      	subs	r3, r5, r3
    399e:	0039      	movs	r1, r7
    39a0:	0018      	movs	r0, r3
    39a2:	9304      	str	r3, [sp, #16]
    39a4:	f7ff fb02 	bl	2fac <__udivsi3>
    39a8:	9b01      	ldr	r3, [sp, #4]
    39aa:	0005      	movs	r5, r0
    39ac:	4343      	muls	r3, r0
    39ae:	0039      	movs	r1, r7
    39b0:	9804      	ldr	r0, [sp, #16]
    39b2:	4699      	mov	r9, r3
    39b4:	f7ff fb80 	bl	30b8 <__aeabi_uidivmod>
    39b8:	0433      	lsls	r3, r6, #16
    39ba:	0409      	lsls	r1, r1, #16
    39bc:	0c1b      	lsrs	r3, r3, #16
    39be:	430b      	orrs	r3, r1
    39c0:	4599      	cmp	r9, r3
    39c2:	d909      	bls.n	39d8 <__aeabi_ddiv+0x2a0>
    39c4:	4443      	add	r3, r8
    39c6:	1e6a      	subs	r2, r5, #1
    39c8:	4598      	cmp	r8, r3
    39ca:	d900      	bls.n	39ce <__aeabi_ddiv+0x296>
    39cc:	e11a      	b.n	3c04 <__aeabi_ddiv+0x4cc>
    39ce:	4599      	cmp	r9, r3
    39d0:	d800      	bhi.n	39d4 <__aeabi_ddiv+0x29c>
    39d2:	e117      	b.n	3c04 <__aeabi_ddiv+0x4cc>
    39d4:	3d02      	subs	r5, #2
    39d6:	4443      	add	r3, r8
    39d8:	464a      	mov	r2, r9
    39da:	1a9b      	subs	r3, r3, r2
    39dc:	465a      	mov	r2, fp
    39de:	0412      	lsls	r2, r2, #16
    39e0:	432a      	orrs	r2, r5
    39e2:	9903      	ldr	r1, [sp, #12]
    39e4:	4693      	mov	fp, r2
    39e6:	0c10      	lsrs	r0, r2, #16
    39e8:	0c0a      	lsrs	r2, r1, #16
    39ea:	4691      	mov	r9, r2
    39ec:	0409      	lsls	r1, r1, #16
    39ee:	465a      	mov	r2, fp
    39f0:	0c09      	lsrs	r1, r1, #16
    39f2:	464e      	mov	r6, r9
    39f4:	000d      	movs	r5, r1
    39f6:	0412      	lsls	r2, r2, #16
    39f8:	0c12      	lsrs	r2, r2, #16
    39fa:	4345      	muls	r5, r0
    39fc:	9105      	str	r1, [sp, #20]
    39fe:	4351      	muls	r1, r2
    3a00:	4372      	muls	r2, r6
    3a02:	4370      	muls	r0, r6
    3a04:	1952      	adds	r2, r2, r5
    3a06:	0c0e      	lsrs	r6, r1, #16
    3a08:	18b2      	adds	r2, r6, r2
    3a0a:	4295      	cmp	r5, r2
    3a0c:	d903      	bls.n	3a16 <__aeabi_ddiv+0x2de>
    3a0e:	2580      	movs	r5, #128	; 0x80
    3a10:	026d      	lsls	r5, r5, #9
    3a12:	46ac      	mov	ip, r5
    3a14:	4460      	add	r0, ip
    3a16:	0c15      	lsrs	r5, r2, #16
    3a18:	0409      	lsls	r1, r1, #16
    3a1a:	0412      	lsls	r2, r2, #16
    3a1c:	0c09      	lsrs	r1, r1, #16
    3a1e:	1828      	adds	r0, r5, r0
    3a20:	1852      	adds	r2, r2, r1
    3a22:	4283      	cmp	r3, r0
    3a24:	d200      	bcs.n	3a28 <__aeabi_ddiv+0x2f0>
    3a26:	e0ce      	b.n	3bc6 <__aeabi_ddiv+0x48e>
    3a28:	d100      	bne.n	3a2c <__aeabi_ddiv+0x2f4>
    3a2a:	e0c8      	b.n	3bbe <__aeabi_ddiv+0x486>
    3a2c:	1a1d      	subs	r5, r3, r0
    3a2e:	4653      	mov	r3, sl
    3a30:	1a9e      	subs	r6, r3, r2
    3a32:	45b2      	cmp	sl, r6
    3a34:	4192      	sbcs	r2, r2
    3a36:	4252      	negs	r2, r2
    3a38:	1aab      	subs	r3, r5, r2
    3a3a:	469a      	mov	sl, r3
    3a3c:	4598      	cmp	r8, r3
    3a3e:	d100      	bne.n	3a42 <__aeabi_ddiv+0x30a>
    3a40:	e117      	b.n	3c72 <__aeabi_ddiv+0x53a>
    3a42:	0039      	movs	r1, r7
    3a44:	0018      	movs	r0, r3
    3a46:	f7ff fab1 	bl	2fac <__udivsi3>
    3a4a:	9b01      	ldr	r3, [sp, #4]
    3a4c:	0005      	movs	r5, r0
    3a4e:	4343      	muls	r3, r0
    3a50:	0039      	movs	r1, r7
    3a52:	4650      	mov	r0, sl
    3a54:	9304      	str	r3, [sp, #16]
    3a56:	f7ff fb2f 	bl	30b8 <__aeabi_uidivmod>
    3a5a:	9804      	ldr	r0, [sp, #16]
    3a5c:	040b      	lsls	r3, r1, #16
    3a5e:	0c31      	lsrs	r1, r6, #16
    3a60:	4319      	orrs	r1, r3
    3a62:	4288      	cmp	r0, r1
    3a64:	d909      	bls.n	3a7a <__aeabi_ddiv+0x342>
    3a66:	4441      	add	r1, r8
    3a68:	1e6b      	subs	r3, r5, #1
    3a6a:	4588      	cmp	r8, r1
    3a6c:	d900      	bls.n	3a70 <__aeabi_ddiv+0x338>
    3a6e:	e107      	b.n	3c80 <__aeabi_ddiv+0x548>
    3a70:	4288      	cmp	r0, r1
    3a72:	d800      	bhi.n	3a76 <__aeabi_ddiv+0x33e>
    3a74:	e104      	b.n	3c80 <__aeabi_ddiv+0x548>
    3a76:	3d02      	subs	r5, #2
    3a78:	4441      	add	r1, r8
    3a7a:	9b04      	ldr	r3, [sp, #16]
    3a7c:	1acb      	subs	r3, r1, r3
    3a7e:	0018      	movs	r0, r3
    3a80:	0039      	movs	r1, r7
    3a82:	9304      	str	r3, [sp, #16]
    3a84:	f7ff fa92 	bl	2fac <__udivsi3>
    3a88:	9b01      	ldr	r3, [sp, #4]
    3a8a:	4682      	mov	sl, r0
    3a8c:	4343      	muls	r3, r0
    3a8e:	0039      	movs	r1, r7
    3a90:	9804      	ldr	r0, [sp, #16]
    3a92:	9301      	str	r3, [sp, #4]
    3a94:	f7ff fb10 	bl	30b8 <__aeabi_uidivmod>
    3a98:	9801      	ldr	r0, [sp, #4]
    3a9a:	040b      	lsls	r3, r1, #16
    3a9c:	0431      	lsls	r1, r6, #16
    3a9e:	0c09      	lsrs	r1, r1, #16
    3aa0:	4319      	orrs	r1, r3
    3aa2:	4288      	cmp	r0, r1
    3aa4:	d90d      	bls.n	3ac2 <__aeabi_ddiv+0x38a>
    3aa6:	4653      	mov	r3, sl
    3aa8:	4441      	add	r1, r8
    3aaa:	3b01      	subs	r3, #1
    3aac:	4588      	cmp	r8, r1
    3aae:	d900      	bls.n	3ab2 <__aeabi_ddiv+0x37a>
    3ab0:	e0e8      	b.n	3c84 <__aeabi_ddiv+0x54c>
    3ab2:	4288      	cmp	r0, r1
    3ab4:	d800      	bhi.n	3ab8 <__aeabi_ddiv+0x380>
    3ab6:	e0e5      	b.n	3c84 <__aeabi_ddiv+0x54c>
    3ab8:	2302      	movs	r3, #2
    3aba:	425b      	negs	r3, r3
    3abc:	469c      	mov	ip, r3
    3abe:	4441      	add	r1, r8
    3ac0:	44e2      	add	sl, ip
    3ac2:	9b01      	ldr	r3, [sp, #4]
    3ac4:	042d      	lsls	r5, r5, #16
    3ac6:	1ace      	subs	r6, r1, r3
    3ac8:	4651      	mov	r1, sl
    3aca:	4329      	orrs	r1, r5
    3acc:	9d05      	ldr	r5, [sp, #20]
    3ace:	464f      	mov	r7, r9
    3ad0:	002a      	movs	r2, r5
    3ad2:	040b      	lsls	r3, r1, #16
    3ad4:	0c08      	lsrs	r0, r1, #16
    3ad6:	0c1b      	lsrs	r3, r3, #16
    3ad8:	435a      	muls	r2, r3
    3ada:	4345      	muls	r5, r0
    3adc:	437b      	muls	r3, r7
    3ade:	4378      	muls	r0, r7
    3ae0:	195b      	adds	r3, r3, r5
    3ae2:	0c17      	lsrs	r7, r2, #16
    3ae4:	18fb      	adds	r3, r7, r3
    3ae6:	429d      	cmp	r5, r3
    3ae8:	d903      	bls.n	3af2 <__aeabi_ddiv+0x3ba>
    3aea:	2580      	movs	r5, #128	; 0x80
    3aec:	026d      	lsls	r5, r5, #9
    3aee:	46ac      	mov	ip, r5
    3af0:	4460      	add	r0, ip
    3af2:	0c1d      	lsrs	r5, r3, #16
    3af4:	0412      	lsls	r2, r2, #16
    3af6:	041b      	lsls	r3, r3, #16
    3af8:	0c12      	lsrs	r2, r2, #16
    3afa:	1828      	adds	r0, r5, r0
    3afc:	189b      	adds	r3, r3, r2
    3afe:	4286      	cmp	r6, r0
    3b00:	d200      	bcs.n	3b04 <__aeabi_ddiv+0x3cc>
    3b02:	e093      	b.n	3c2c <__aeabi_ddiv+0x4f4>
    3b04:	d100      	bne.n	3b08 <__aeabi_ddiv+0x3d0>
    3b06:	e08e      	b.n	3c26 <__aeabi_ddiv+0x4ee>
    3b08:	2301      	movs	r3, #1
    3b0a:	4319      	orrs	r1, r3
    3b0c:	4ba0      	ldr	r3, [pc, #640]	; (3d90 <__aeabi_ddiv+0x658>)
    3b0e:	18e3      	adds	r3, r4, r3
    3b10:	2b00      	cmp	r3, #0
    3b12:	dc00      	bgt.n	3b16 <__aeabi_ddiv+0x3de>
    3b14:	e099      	b.n	3c4a <__aeabi_ddiv+0x512>
    3b16:	074a      	lsls	r2, r1, #29
    3b18:	d000      	beq.n	3b1c <__aeabi_ddiv+0x3e4>
    3b1a:	e09e      	b.n	3c5a <__aeabi_ddiv+0x522>
    3b1c:	465a      	mov	r2, fp
    3b1e:	01d2      	lsls	r2, r2, #7
    3b20:	d506      	bpl.n	3b30 <__aeabi_ddiv+0x3f8>
    3b22:	465a      	mov	r2, fp
    3b24:	4b9b      	ldr	r3, [pc, #620]	; (3d94 <__aeabi_ddiv+0x65c>)
    3b26:	401a      	ands	r2, r3
    3b28:	2380      	movs	r3, #128	; 0x80
    3b2a:	4693      	mov	fp, r2
    3b2c:	00db      	lsls	r3, r3, #3
    3b2e:	18e3      	adds	r3, r4, r3
    3b30:	4a99      	ldr	r2, [pc, #612]	; (3d98 <__aeabi_ddiv+0x660>)
    3b32:	4293      	cmp	r3, r2
    3b34:	dd68      	ble.n	3c08 <__aeabi_ddiv+0x4d0>
    3b36:	2301      	movs	r3, #1
    3b38:	9a02      	ldr	r2, [sp, #8]
    3b3a:	4c98      	ldr	r4, [pc, #608]	; (3d9c <__aeabi_ddiv+0x664>)
    3b3c:	401a      	ands	r2, r3
    3b3e:	2300      	movs	r3, #0
    3b40:	4694      	mov	ip, r2
    3b42:	4698      	mov	r8, r3
    3b44:	2200      	movs	r2, #0
    3b46:	e6c5      	b.n	38d4 <__aeabi_ddiv+0x19c>
    3b48:	2280      	movs	r2, #128	; 0x80
    3b4a:	464b      	mov	r3, r9
    3b4c:	0312      	lsls	r2, r2, #12
    3b4e:	4213      	tst	r3, r2
    3b50:	d00a      	beq.n	3b68 <__aeabi_ddiv+0x430>
    3b52:	465b      	mov	r3, fp
    3b54:	4213      	tst	r3, r2
    3b56:	d106      	bne.n	3b66 <__aeabi_ddiv+0x42e>
    3b58:	431a      	orrs	r2, r3
    3b5a:	0312      	lsls	r2, r2, #12
    3b5c:	0b12      	lsrs	r2, r2, #12
    3b5e:	46ac      	mov	ip, r5
    3b60:	4688      	mov	r8, r1
    3b62:	4c8e      	ldr	r4, [pc, #568]	; (3d9c <__aeabi_ddiv+0x664>)
    3b64:	e6b6      	b.n	38d4 <__aeabi_ddiv+0x19c>
    3b66:	464b      	mov	r3, r9
    3b68:	431a      	orrs	r2, r3
    3b6a:	0312      	lsls	r2, r2, #12
    3b6c:	0b12      	lsrs	r2, r2, #12
    3b6e:	46bc      	mov	ip, r7
    3b70:	4c8a      	ldr	r4, [pc, #552]	; (3d9c <__aeabi_ddiv+0x664>)
    3b72:	e6af      	b.n	38d4 <__aeabi_ddiv+0x19c>
    3b74:	0003      	movs	r3, r0
    3b76:	465a      	mov	r2, fp
    3b78:	3b28      	subs	r3, #40	; 0x28
    3b7a:	409a      	lsls	r2, r3
    3b7c:	2300      	movs	r3, #0
    3b7e:	4691      	mov	r9, r2
    3b80:	4698      	mov	r8, r3
    3b82:	e657      	b.n	3834 <__aeabi_ddiv+0xfc>
    3b84:	4658      	mov	r0, fp
    3b86:	f000 ff0d 	bl	49a4 <__clzsi2>
    3b8a:	3020      	adds	r0, #32
    3b8c:	e640      	b.n	3810 <__aeabi_ddiv+0xd8>
    3b8e:	0003      	movs	r3, r0
    3b90:	4652      	mov	r2, sl
    3b92:	3b28      	subs	r3, #40	; 0x28
    3b94:	409a      	lsls	r2, r3
    3b96:	2100      	movs	r1, #0
    3b98:	4693      	mov	fp, r2
    3b9a:	e677      	b.n	388c <__aeabi_ddiv+0x154>
    3b9c:	f000 ff02 	bl	49a4 <__clzsi2>
    3ba0:	3020      	adds	r0, #32
    3ba2:	e65f      	b.n	3864 <__aeabi_ddiv+0x12c>
    3ba4:	4588      	cmp	r8, r1
    3ba6:	d200      	bcs.n	3baa <__aeabi_ddiv+0x472>
    3ba8:	e6c7      	b.n	393a <__aeabi_ddiv+0x202>
    3baa:	464b      	mov	r3, r9
    3bac:	07de      	lsls	r6, r3, #31
    3bae:	085d      	lsrs	r5, r3, #1
    3bb0:	4643      	mov	r3, r8
    3bb2:	085b      	lsrs	r3, r3, #1
    3bb4:	431e      	orrs	r6, r3
    3bb6:	4643      	mov	r3, r8
    3bb8:	07db      	lsls	r3, r3, #31
    3bba:	469a      	mov	sl, r3
    3bbc:	e6c2      	b.n	3944 <__aeabi_ddiv+0x20c>
    3bbe:	2500      	movs	r5, #0
    3bc0:	4592      	cmp	sl, r2
    3bc2:	d300      	bcc.n	3bc6 <__aeabi_ddiv+0x48e>
    3bc4:	e733      	b.n	3a2e <__aeabi_ddiv+0x2f6>
    3bc6:	9e03      	ldr	r6, [sp, #12]
    3bc8:	4659      	mov	r1, fp
    3bca:	46b4      	mov	ip, r6
    3bcc:	44e2      	add	sl, ip
    3bce:	45b2      	cmp	sl, r6
    3bd0:	41ad      	sbcs	r5, r5
    3bd2:	426d      	negs	r5, r5
    3bd4:	4445      	add	r5, r8
    3bd6:	18eb      	adds	r3, r5, r3
    3bd8:	3901      	subs	r1, #1
    3bda:	4598      	cmp	r8, r3
    3bdc:	d207      	bcs.n	3bee <__aeabi_ddiv+0x4b6>
    3bde:	4298      	cmp	r0, r3
    3be0:	d900      	bls.n	3be4 <__aeabi_ddiv+0x4ac>
    3be2:	e07f      	b.n	3ce4 <__aeabi_ddiv+0x5ac>
    3be4:	d100      	bne.n	3be8 <__aeabi_ddiv+0x4b0>
    3be6:	e0bc      	b.n	3d62 <__aeabi_ddiv+0x62a>
    3be8:	1a1d      	subs	r5, r3, r0
    3bea:	468b      	mov	fp, r1
    3bec:	e71f      	b.n	3a2e <__aeabi_ddiv+0x2f6>
    3bee:	4598      	cmp	r8, r3
    3bf0:	d1fa      	bne.n	3be8 <__aeabi_ddiv+0x4b0>
    3bf2:	9d03      	ldr	r5, [sp, #12]
    3bf4:	4555      	cmp	r5, sl
    3bf6:	d9f2      	bls.n	3bde <__aeabi_ddiv+0x4a6>
    3bf8:	4643      	mov	r3, r8
    3bfa:	468b      	mov	fp, r1
    3bfc:	1a1d      	subs	r5, r3, r0
    3bfe:	e716      	b.n	3a2e <__aeabi_ddiv+0x2f6>
    3c00:	469b      	mov	fp, r3
    3c02:	e6ca      	b.n	399a <__aeabi_ddiv+0x262>
    3c04:	0015      	movs	r5, r2
    3c06:	e6e7      	b.n	39d8 <__aeabi_ddiv+0x2a0>
    3c08:	465a      	mov	r2, fp
    3c0a:	08c9      	lsrs	r1, r1, #3
    3c0c:	0752      	lsls	r2, r2, #29
    3c0e:	430a      	orrs	r2, r1
    3c10:	055b      	lsls	r3, r3, #21
    3c12:	4690      	mov	r8, r2
    3c14:	0d5c      	lsrs	r4, r3, #21
    3c16:	465a      	mov	r2, fp
    3c18:	2301      	movs	r3, #1
    3c1a:	9902      	ldr	r1, [sp, #8]
    3c1c:	0252      	lsls	r2, r2, #9
    3c1e:	4019      	ands	r1, r3
    3c20:	0b12      	lsrs	r2, r2, #12
    3c22:	468c      	mov	ip, r1
    3c24:	e656      	b.n	38d4 <__aeabi_ddiv+0x19c>
    3c26:	2b00      	cmp	r3, #0
    3c28:	d100      	bne.n	3c2c <__aeabi_ddiv+0x4f4>
    3c2a:	e76f      	b.n	3b0c <__aeabi_ddiv+0x3d4>
    3c2c:	4446      	add	r6, r8
    3c2e:	1e4a      	subs	r2, r1, #1
    3c30:	45b0      	cmp	r8, r6
    3c32:	d929      	bls.n	3c88 <__aeabi_ddiv+0x550>
    3c34:	0011      	movs	r1, r2
    3c36:	4286      	cmp	r6, r0
    3c38:	d000      	beq.n	3c3c <__aeabi_ddiv+0x504>
    3c3a:	e765      	b.n	3b08 <__aeabi_ddiv+0x3d0>
    3c3c:	9a03      	ldr	r2, [sp, #12]
    3c3e:	4293      	cmp	r3, r2
    3c40:	d000      	beq.n	3c44 <__aeabi_ddiv+0x50c>
    3c42:	e761      	b.n	3b08 <__aeabi_ddiv+0x3d0>
    3c44:	e762      	b.n	3b0c <__aeabi_ddiv+0x3d4>
    3c46:	2101      	movs	r1, #1
    3c48:	4249      	negs	r1, r1
    3c4a:	2001      	movs	r0, #1
    3c4c:	1ac2      	subs	r2, r0, r3
    3c4e:	2a38      	cmp	r2, #56	; 0x38
    3c50:	dd21      	ble.n	3c96 <__aeabi_ddiv+0x55e>
    3c52:	9b02      	ldr	r3, [sp, #8]
    3c54:	4003      	ands	r3, r0
    3c56:	469c      	mov	ip, r3
    3c58:	e638      	b.n	38cc <__aeabi_ddiv+0x194>
    3c5a:	220f      	movs	r2, #15
    3c5c:	400a      	ands	r2, r1
    3c5e:	2a04      	cmp	r2, #4
    3c60:	d100      	bne.n	3c64 <__aeabi_ddiv+0x52c>
    3c62:	e75b      	b.n	3b1c <__aeabi_ddiv+0x3e4>
    3c64:	000a      	movs	r2, r1
    3c66:	1d11      	adds	r1, r2, #4
    3c68:	4291      	cmp	r1, r2
    3c6a:	4192      	sbcs	r2, r2
    3c6c:	4252      	negs	r2, r2
    3c6e:	4493      	add	fp, r2
    3c70:	e754      	b.n	3b1c <__aeabi_ddiv+0x3e4>
    3c72:	4b47      	ldr	r3, [pc, #284]	; (3d90 <__aeabi_ddiv+0x658>)
    3c74:	18e3      	adds	r3, r4, r3
    3c76:	2b00      	cmp	r3, #0
    3c78:	dde5      	ble.n	3c46 <__aeabi_ddiv+0x50e>
    3c7a:	2201      	movs	r2, #1
    3c7c:	4252      	negs	r2, r2
    3c7e:	e7f2      	b.n	3c66 <__aeabi_ddiv+0x52e>
    3c80:	001d      	movs	r5, r3
    3c82:	e6fa      	b.n	3a7a <__aeabi_ddiv+0x342>
    3c84:	469a      	mov	sl, r3
    3c86:	e71c      	b.n	3ac2 <__aeabi_ddiv+0x38a>
    3c88:	42b0      	cmp	r0, r6
    3c8a:	d839      	bhi.n	3d00 <__aeabi_ddiv+0x5c8>
    3c8c:	d06e      	beq.n	3d6c <__aeabi_ddiv+0x634>
    3c8e:	0011      	movs	r1, r2
    3c90:	e73a      	b.n	3b08 <__aeabi_ddiv+0x3d0>
    3c92:	9302      	str	r3, [sp, #8]
    3c94:	e73a      	b.n	3b0c <__aeabi_ddiv+0x3d4>
    3c96:	2a1f      	cmp	r2, #31
    3c98:	dc3c      	bgt.n	3d14 <__aeabi_ddiv+0x5dc>
    3c9a:	2320      	movs	r3, #32
    3c9c:	1a9b      	subs	r3, r3, r2
    3c9e:	000c      	movs	r4, r1
    3ca0:	4658      	mov	r0, fp
    3ca2:	4099      	lsls	r1, r3
    3ca4:	4098      	lsls	r0, r3
    3ca6:	1e4b      	subs	r3, r1, #1
    3ca8:	4199      	sbcs	r1, r3
    3caa:	465b      	mov	r3, fp
    3cac:	40d4      	lsrs	r4, r2
    3cae:	40d3      	lsrs	r3, r2
    3cb0:	4320      	orrs	r0, r4
    3cb2:	4308      	orrs	r0, r1
    3cb4:	001a      	movs	r2, r3
    3cb6:	0743      	lsls	r3, r0, #29
    3cb8:	d009      	beq.n	3cce <__aeabi_ddiv+0x596>
    3cba:	230f      	movs	r3, #15
    3cbc:	4003      	ands	r3, r0
    3cbe:	2b04      	cmp	r3, #4
    3cc0:	d005      	beq.n	3cce <__aeabi_ddiv+0x596>
    3cc2:	0001      	movs	r1, r0
    3cc4:	1d08      	adds	r0, r1, #4
    3cc6:	4288      	cmp	r0, r1
    3cc8:	419b      	sbcs	r3, r3
    3cca:	425b      	negs	r3, r3
    3ccc:	18d2      	adds	r2, r2, r3
    3cce:	0213      	lsls	r3, r2, #8
    3cd0:	d53a      	bpl.n	3d48 <__aeabi_ddiv+0x610>
    3cd2:	2301      	movs	r3, #1
    3cd4:	9a02      	ldr	r2, [sp, #8]
    3cd6:	2401      	movs	r4, #1
    3cd8:	401a      	ands	r2, r3
    3cda:	2300      	movs	r3, #0
    3cdc:	4694      	mov	ip, r2
    3cde:	4698      	mov	r8, r3
    3ce0:	2200      	movs	r2, #0
    3ce2:	e5f7      	b.n	38d4 <__aeabi_ddiv+0x19c>
    3ce4:	2102      	movs	r1, #2
    3ce6:	4249      	negs	r1, r1
    3ce8:	468c      	mov	ip, r1
    3cea:	9d03      	ldr	r5, [sp, #12]
    3cec:	44e3      	add	fp, ip
    3cee:	46ac      	mov	ip, r5
    3cf0:	44e2      	add	sl, ip
    3cf2:	45aa      	cmp	sl, r5
    3cf4:	41ad      	sbcs	r5, r5
    3cf6:	426d      	negs	r5, r5
    3cf8:	4445      	add	r5, r8
    3cfa:	18ed      	adds	r5, r5, r3
    3cfc:	1a2d      	subs	r5, r5, r0
    3cfe:	e696      	b.n	3a2e <__aeabi_ddiv+0x2f6>
    3d00:	1e8a      	subs	r2, r1, #2
    3d02:	9903      	ldr	r1, [sp, #12]
    3d04:	004d      	lsls	r5, r1, #1
    3d06:	428d      	cmp	r5, r1
    3d08:	4189      	sbcs	r1, r1
    3d0a:	4249      	negs	r1, r1
    3d0c:	4441      	add	r1, r8
    3d0e:	1876      	adds	r6, r6, r1
    3d10:	9503      	str	r5, [sp, #12]
    3d12:	e78f      	b.n	3c34 <__aeabi_ddiv+0x4fc>
    3d14:	201f      	movs	r0, #31
    3d16:	4240      	negs	r0, r0
    3d18:	1ac3      	subs	r3, r0, r3
    3d1a:	4658      	mov	r0, fp
    3d1c:	40d8      	lsrs	r0, r3
    3d1e:	0003      	movs	r3, r0
    3d20:	2a20      	cmp	r2, #32
    3d22:	d028      	beq.n	3d76 <__aeabi_ddiv+0x63e>
    3d24:	2040      	movs	r0, #64	; 0x40
    3d26:	465d      	mov	r5, fp
    3d28:	1a82      	subs	r2, r0, r2
    3d2a:	4095      	lsls	r5, r2
    3d2c:	4329      	orrs	r1, r5
    3d2e:	1e4a      	subs	r2, r1, #1
    3d30:	4191      	sbcs	r1, r2
    3d32:	4319      	orrs	r1, r3
    3d34:	2307      	movs	r3, #7
    3d36:	2200      	movs	r2, #0
    3d38:	400b      	ands	r3, r1
    3d3a:	d009      	beq.n	3d50 <__aeabi_ddiv+0x618>
    3d3c:	230f      	movs	r3, #15
    3d3e:	2200      	movs	r2, #0
    3d40:	400b      	ands	r3, r1
    3d42:	0008      	movs	r0, r1
    3d44:	2b04      	cmp	r3, #4
    3d46:	d1bd      	bne.n	3cc4 <__aeabi_ddiv+0x58c>
    3d48:	0001      	movs	r1, r0
    3d4a:	0753      	lsls	r3, r2, #29
    3d4c:	0252      	lsls	r2, r2, #9
    3d4e:	0b12      	lsrs	r2, r2, #12
    3d50:	08c9      	lsrs	r1, r1, #3
    3d52:	4319      	orrs	r1, r3
    3d54:	2301      	movs	r3, #1
    3d56:	4688      	mov	r8, r1
    3d58:	9902      	ldr	r1, [sp, #8]
    3d5a:	2400      	movs	r4, #0
    3d5c:	4019      	ands	r1, r3
    3d5e:	468c      	mov	ip, r1
    3d60:	e5b8      	b.n	38d4 <__aeabi_ddiv+0x19c>
    3d62:	4552      	cmp	r2, sl
    3d64:	d8be      	bhi.n	3ce4 <__aeabi_ddiv+0x5ac>
    3d66:	468b      	mov	fp, r1
    3d68:	2500      	movs	r5, #0
    3d6a:	e660      	b.n	3a2e <__aeabi_ddiv+0x2f6>
    3d6c:	9d03      	ldr	r5, [sp, #12]
    3d6e:	429d      	cmp	r5, r3
    3d70:	d3c6      	bcc.n	3d00 <__aeabi_ddiv+0x5c8>
    3d72:	0011      	movs	r1, r2
    3d74:	e762      	b.n	3c3c <__aeabi_ddiv+0x504>
    3d76:	2500      	movs	r5, #0
    3d78:	e7d8      	b.n	3d2c <__aeabi_ddiv+0x5f4>
    3d7a:	2280      	movs	r2, #128	; 0x80
    3d7c:	465b      	mov	r3, fp
    3d7e:	0312      	lsls	r2, r2, #12
    3d80:	431a      	orrs	r2, r3
    3d82:	9b01      	ldr	r3, [sp, #4]
    3d84:	0312      	lsls	r2, r2, #12
    3d86:	0b12      	lsrs	r2, r2, #12
    3d88:	469c      	mov	ip, r3
    3d8a:	4688      	mov	r8, r1
    3d8c:	4c03      	ldr	r4, [pc, #12]	; (3d9c <__aeabi_ddiv+0x664>)
    3d8e:	e5a1      	b.n	38d4 <__aeabi_ddiv+0x19c>
    3d90:	000003ff 	.word	0x000003ff
    3d94:	feffffff 	.word	0xfeffffff
    3d98:	000007fe 	.word	0x000007fe
    3d9c:	000007ff 	.word	0x000007ff

00003da0 <__aeabi_dmul>:
    3da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3da2:	4657      	mov	r7, sl
    3da4:	4645      	mov	r5, r8
    3da6:	46de      	mov	lr, fp
    3da8:	464e      	mov	r6, r9
    3daa:	b5e0      	push	{r5, r6, r7, lr}
    3dac:	030c      	lsls	r4, r1, #12
    3dae:	4698      	mov	r8, r3
    3db0:	004e      	lsls	r6, r1, #1
    3db2:	0b23      	lsrs	r3, r4, #12
    3db4:	b087      	sub	sp, #28
    3db6:	0007      	movs	r7, r0
    3db8:	4692      	mov	sl, r2
    3dba:	469b      	mov	fp, r3
    3dbc:	0d76      	lsrs	r6, r6, #21
    3dbe:	0fcd      	lsrs	r5, r1, #31
    3dc0:	2e00      	cmp	r6, #0
    3dc2:	d06b      	beq.n	3e9c <__aeabi_dmul+0xfc>
    3dc4:	4b6d      	ldr	r3, [pc, #436]	; (3f7c <__aeabi_dmul+0x1dc>)
    3dc6:	429e      	cmp	r6, r3
    3dc8:	d035      	beq.n	3e36 <__aeabi_dmul+0x96>
    3dca:	2480      	movs	r4, #128	; 0x80
    3dcc:	465b      	mov	r3, fp
    3dce:	0f42      	lsrs	r2, r0, #29
    3dd0:	0424      	lsls	r4, r4, #16
    3dd2:	00db      	lsls	r3, r3, #3
    3dd4:	4314      	orrs	r4, r2
    3dd6:	431c      	orrs	r4, r3
    3dd8:	00c3      	lsls	r3, r0, #3
    3dda:	4699      	mov	r9, r3
    3ddc:	4b68      	ldr	r3, [pc, #416]	; (3f80 <__aeabi_dmul+0x1e0>)
    3dde:	46a3      	mov	fp, r4
    3de0:	469c      	mov	ip, r3
    3de2:	2300      	movs	r3, #0
    3de4:	2700      	movs	r7, #0
    3de6:	4466      	add	r6, ip
    3de8:	9302      	str	r3, [sp, #8]
    3dea:	4643      	mov	r3, r8
    3dec:	031c      	lsls	r4, r3, #12
    3dee:	005a      	lsls	r2, r3, #1
    3df0:	0fdb      	lsrs	r3, r3, #31
    3df2:	4650      	mov	r0, sl
    3df4:	0b24      	lsrs	r4, r4, #12
    3df6:	0d52      	lsrs	r2, r2, #21
    3df8:	4698      	mov	r8, r3
    3dfa:	d100      	bne.n	3dfe <__aeabi_dmul+0x5e>
    3dfc:	e076      	b.n	3eec <__aeabi_dmul+0x14c>
    3dfe:	4b5f      	ldr	r3, [pc, #380]	; (3f7c <__aeabi_dmul+0x1dc>)
    3e00:	429a      	cmp	r2, r3
    3e02:	d06d      	beq.n	3ee0 <__aeabi_dmul+0x140>
    3e04:	2380      	movs	r3, #128	; 0x80
    3e06:	0f41      	lsrs	r1, r0, #29
    3e08:	041b      	lsls	r3, r3, #16
    3e0a:	430b      	orrs	r3, r1
    3e0c:	495c      	ldr	r1, [pc, #368]	; (3f80 <__aeabi_dmul+0x1e0>)
    3e0e:	00e4      	lsls	r4, r4, #3
    3e10:	468c      	mov	ip, r1
    3e12:	431c      	orrs	r4, r3
    3e14:	00c3      	lsls	r3, r0, #3
    3e16:	2000      	movs	r0, #0
    3e18:	4462      	add	r2, ip
    3e1a:	4641      	mov	r1, r8
    3e1c:	18b6      	adds	r6, r6, r2
    3e1e:	4069      	eors	r1, r5
    3e20:	1c72      	adds	r2, r6, #1
    3e22:	9101      	str	r1, [sp, #4]
    3e24:	4694      	mov	ip, r2
    3e26:	4307      	orrs	r7, r0
    3e28:	2f0f      	cmp	r7, #15
    3e2a:	d900      	bls.n	3e2e <__aeabi_dmul+0x8e>
    3e2c:	e0b0      	b.n	3f90 <__aeabi_dmul+0x1f0>
    3e2e:	4a55      	ldr	r2, [pc, #340]	; (3f84 <__aeabi_dmul+0x1e4>)
    3e30:	00bf      	lsls	r7, r7, #2
    3e32:	59d2      	ldr	r2, [r2, r7]
    3e34:	4697      	mov	pc, r2
    3e36:	465b      	mov	r3, fp
    3e38:	4303      	orrs	r3, r0
    3e3a:	4699      	mov	r9, r3
    3e3c:	d000      	beq.n	3e40 <__aeabi_dmul+0xa0>
    3e3e:	e087      	b.n	3f50 <__aeabi_dmul+0x1b0>
    3e40:	2300      	movs	r3, #0
    3e42:	469b      	mov	fp, r3
    3e44:	3302      	adds	r3, #2
    3e46:	2708      	movs	r7, #8
    3e48:	9302      	str	r3, [sp, #8]
    3e4a:	e7ce      	b.n	3dea <__aeabi_dmul+0x4a>
    3e4c:	4642      	mov	r2, r8
    3e4e:	9201      	str	r2, [sp, #4]
    3e50:	2802      	cmp	r0, #2
    3e52:	d067      	beq.n	3f24 <__aeabi_dmul+0x184>
    3e54:	2803      	cmp	r0, #3
    3e56:	d100      	bne.n	3e5a <__aeabi_dmul+0xba>
    3e58:	e20e      	b.n	4278 <__aeabi_dmul+0x4d8>
    3e5a:	2801      	cmp	r0, #1
    3e5c:	d000      	beq.n	3e60 <__aeabi_dmul+0xc0>
    3e5e:	e162      	b.n	4126 <__aeabi_dmul+0x386>
    3e60:	2300      	movs	r3, #0
    3e62:	2400      	movs	r4, #0
    3e64:	2200      	movs	r2, #0
    3e66:	4699      	mov	r9, r3
    3e68:	9901      	ldr	r1, [sp, #4]
    3e6a:	4001      	ands	r1, r0
    3e6c:	b2cd      	uxtb	r5, r1
    3e6e:	2100      	movs	r1, #0
    3e70:	0312      	lsls	r2, r2, #12
    3e72:	0d0b      	lsrs	r3, r1, #20
    3e74:	0b12      	lsrs	r2, r2, #12
    3e76:	051b      	lsls	r3, r3, #20
    3e78:	4313      	orrs	r3, r2
    3e7a:	4a43      	ldr	r2, [pc, #268]	; (3f88 <__aeabi_dmul+0x1e8>)
    3e7c:	0524      	lsls	r4, r4, #20
    3e7e:	4013      	ands	r3, r2
    3e80:	431c      	orrs	r4, r3
    3e82:	0064      	lsls	r4, r4, #1
    3e84:	07ed      	lsls	r5, r5, #31
    3e86:	0864      	lsrs	r4, r4, #1
    3e88:	432c      	orrs	r4, r5
    3e8a:	4648      	mov	r0, r9
    3e8c:	0021      	movs	r1, r4
    3e8e:	b007      	add	sp, #28
    3e90:	bc3c      	pop	{r2, r3, r4, r5}
    3e92:	4690      	mov	r8, r2
    3e94:	4699      	mov	r9, r3
    3e96:	46a2      	mov	sl, r4
    3e98:	46ab      	mov	fp, r5
    3e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e9c:	4303      	orrs	r3, r0
    3e9e:	4699      	mov	r9, r3
    3ea0:	d04f      	beq.n	3f42 <__aeabi_dmul+0x1a2>
    3ea2:	465b      	mov	r3, fp
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	d100      	bne.n	3eaa <__aeabi_dmul+0x10a>
    3ea8:	e189      	b.n	41be <__aeabi_dmul+0x41e>
    3eaa:	4658      	mov	r0, fp
    3eac:	f000 fd7a 	bl	49a4 <__clzsi2>
    3eb0:	0003      	movs	r3, r0
    3eb2:	3b0b      	subs	r3, #11
    3eb4:	2b1c      	cmp	r3, #28
    3eb6:	dd00      	ble.n	3eba <__aeabi_dmul+0x11a>
    3eb8:	e17a      	b.n	41b0 <__aeabi_dmul+0x410>
    3eba:	221d      	movs	r2, #29
    3ebc:	1ad3      	subs	r3, r2, r3
    3ebe:	003a      	movs	r2, r7
    3ec0:	0001      	movs	r1, r0
    3ec2:	465c      	mov	r4, fp
    3ec4:	40da      	lsrs	r2, r3
    3ec6:	3908      	subs	r1, #8
    3ec8:	408c      	lsls	r4, r1
    3eca:	0013      	movs	r3, r2
    3ecc:	408f      	lsls	r7, r1
    3ece:	4323      	orrs	r3, r4
    3ed0:	469b      	mov	fp, r3
    3ed2:	46b9      	mov	r9, r7
    3ed4:	2300      	movs	r3, #0
    3ed6:	4e2d      	ldr	r6, [pc, #180]	; (3f8c <__aeabi_dmul+0x1ec>)
    3ed8:	2700      	movs	r7, #0
    3eda:	1a36      	subs	r6, r6, r0
    3edc:	9302      	str	r3, [sp, #8]
    3ede:	e784      	b.n	3dea <__aeabi_dmul+0x4a>
    3ee0:	4653      	mov	r3, sl
    3ee2:	4323      	orrs	r3, r4
    3ee4:	d12a      	bne.n	3f3c <__aeabi_dmul+0x19c>
    3ee6:	2400      	movs	r4, #0
    3ee8:	2002      	movs	r0, #2
    3eea:	e796      	b.n	3e1a <__aeabi_dmul+0x7a>
    3eec:	4653      	mov	r3, sl
    3eee:	4323      	orrs	r3, r4
    3ef0:	d020      	beq.n	3f34 <__aeabi_dmul+0x194>
    3ef2:	2c00      	cmp	r4, #0
    3ef4:	d100      	bne.n	3ef8 <__aeabi_dmul+0x158>
    3ef6:	e157      	b.n	41a8 <__aeabi_dmul+0x408>
    3ef8:	0020      	movs	r0, r4
    3efa:	f000 fd53 	bl	49a4 <__clzsi2>
    3efe:	0003      	movs	r3, r0
    3f00:	3b0b      	subs	r3, #11
    3f02:	2b1c      	cmp	r3, #28
    3f04:	dd00      	ble.n	3f08 <__aeabi_dmul+0x168>
    3f06:	e149      	b.n	419c <__aeabi_dmul+0x3fc>
    3f08:	211d      	movs	r1, #29
    3f0a:	1acb      	subs	r3, r1, r3
    3f0c:	4651      	mov	r1, sl
    3f0e:	0002      	movs	r2, r0
    3f10:	40d9      	lsrs	r1, r3
    3f12:	4653      	mov	r3, sl
    3f14:	3a08      	subs	r2, #8
    3f16:	4094      	lsls	r4, r2
    3f18:	4093      	lsls	r3, r2
    3f1a:	430c      	orrs	r4, r1
    3f1c:	4a1b      	ldr	r2, [pc, #108]	; (3f8c <__aeabi_dmul+0x1ec>)
    3f1e:	1a12      	subs	r2, r2, r0
    3f20:	2000      	movs	r0, #0
    3f22:	e77a      	b.n	3e1a <__aeabi_dmul+0x7a>
    3f24:	2501      	movs	r5, #1
    3f26:	9b01      	ldr	r3, [sp, #4]
    3f28:	4c14      	ldr	r4, [pc, #80]	; (3f7c <__aeabi_dmul+0x1dc>)
    3f2a:	401d      	ands	r5, r3
    3f2c:	2300      	movs	r3, #0
    3f2e:	2200      	movs	r2, #0
    3f30:	4699      	mov	r9, r3
    3f32:	e79c      	b.n	3e6e <__aeabi_dmul+0xce>
    3f34:	2400      	movs	r4, #0
    3f36:	2200      	movs	r2, #0
    3f38:	2001      	movs	r0, #1
    3f3a:	e76e      	b.n	3e1a <__aeabi_dmul+0x7a>
    3f3c:	4653      	mov	r3, sl
    3f3e:	2003      	movs	r0, #3
    3f40:	e76b      	b.n	3e1a <__aeabi_dmul+0x7a>
    3f42:	2300      	movs	r3, #0
    3f44:	469b      	mov	fp, r3
    3f46:	3301      	adds	r3, #1
    3f48:	2704      	movs	r7, #4
    3f4a:	2600      	movs	r6, #0
    3f4c:	9302      	str	r3, [sp, #8]
    3f4e:	e74c      	b.n	3dea <__aeabi_dmul+0x4a>
    3f50:	2303      	movs	r3, #3
    3f52:	4681      	mov	r9, r0
    3f54:	270c      	movs	r7, #12
    3f56:	9302      	str	r3, [sp, #8]
    3f58:	e747      	b.n	3dea <__aeabi_dmul+0x4a>
    3f5a:	2280      	movs	r2, #128	; 0x80
    3f5c:	2300      	movs	r3, #0
    3f5e:	2500      	movs	r5, #0
    3f60:	0312      	lsls	r2, r2, #12
    3f62:	4699      	mov	r9, r3
    3f64:	4c05      	ldr	r4, [pc, #20]	; (3f7c <__aeabi_dmul+0x1dc>)
    3f66:	e782      	b.n	3e6e <__aeabi_dmul+0xce>
    3f68:	465c      	mov	r4, fp
    3f6a:	464b      	mov	r3, r9
    3f6c:	9802      	ldr	r0, [sp, #8]
    3f6e:	e76f      	b.n	3e50 <__aeabi_dmul+0xb0>
    3f70:	465c      	mov	r4, fp
    3f72:	464b      	mov	r3, r9
    3f74:	9501      	str	r5, [sp, #4]
    3f76:	9802      	ldr	r0, [sp, #8]
    3f78:	e76a      	b.n	3e50 <__aeabi_dmul+0xb0>
    3f7a:	46c0      	nop			; (mov r8, r8)
    3f7c:	000007ff 	.word	0x000007ff
    3f80:	fffffc01 	.word	0xfffffc01
    3f84:	0000650c 	.word	0x0000650c
    3f88:	800fffff 	.word	0x800fffff
    3f8c:	fffffc0d 	.word	0xfffffc0d
    3f90:	464a      	mov	r2, r9
    3f92:	4649      	mov	r1, r9
    3f94:	0c17      	lsrs	r7, r2, #16
    3f96:	0c1a      	lsrs	r2, r3, #16
    3f98:	041b      	lsls	r3, r3, #16
    3f9a:	0c1b      	lsrs	r3, r3, #16
    3f9c:	0408      	lsls	r0, r1, #16
    3f9e:	0019      	movs	r1, r3
    3fa0:	0c00      	lsrs	r0, r0, #16
    3fa2:	4341      	muls	r1, r0
    3fa4:	0015      	movs	r5, r2
    3fa6:	4688      	mov	r8, r1
    3fa8:	0019      	movs	r1, r3
    3faa:	437d      	muls	r5, r7
    3fac:	4379      	muls	r1, r7
    3fae:	9503      	str	r5, [sp, #12]
    3fb0:	4689      	mov	r9, r1
    3fb2:	0029      	movs	r1, r5
    3fb4:	0015      	movs	r5, r2
    3fb6:	4345      	muls	r5, r0
    3fb8:	444d      	add	r5, r9
    3fba:	9502      	str	r5, [sp, #8]
    3fbc:	4645      	mov	r5, r8
    3fbe:	0c2d      	lsrs	r5, r5, #16
    3fc0:	46aa      	mov	sl, r5
    3fc2:	9d02      	ldr	r5, [sp, #8]
    3fc4:	4455      	add	r5, sl
    3fc6:	45a9      	cmp	r9, r5
    3fc8:	d906      	bls.n	3fd8 <__aeabi_dmul+0x238>
    3fca:	468a      	mov	sl, r1
    3fcc:	2180      	movs	r1, #128	; 0x80
    3fce:	0249      	lsls	r1, r1, #9
    3fd0:	4689      	mov	r9, r1
    3fd2:	44ca      	add	sl, r9
    3fd4:	4651      	mov	r1, sl
    3fd6:	9103      	str	r1, [sp, #12]
    3fd8:	0c29      	lsrs	r1, r5, #16
    3fda:	9104      	str	r1, [sp, #16]
    3fdc:	4641      	mov	r1, r8
    3fde:	0409      	lsls	r1, r1, #16
    3fe0:	042d      	lsls	r5, r5, #16
    3fe2:	0c09      	lsrs	r1, r1, #16
    3fe4:	4688      	mov	r8, r1
    3fe6:	0029      	movs	r1, r5
    3fe8:	0c25      	lsrs	r5, r4, #16
    3fea:	0424      	lsls	r4, r4, #16
    3fec:	4441      	add	r1, r8
    3fee:	0c24      	lsrs	r4, r4, #16
    3ff0:	9105      	str	r1, [sp, #20]
    3ff2:	0021      	movs	r1, r4
    3ff4:	4341      	muls	r1, r0
    3ff6:	4688      	mov	r8, r1
    3ff8:	0021      	movs	r1, r4
    3ffa:	4379      	muls	r1, r7
    3ffc:	468a      	mov	sl, r1
    3ffe:	4368      	muls	r0, r5
    4000:	4641      	mov	r1, r8
    4002:	4450      	add	r0, sl
    4004:	4681      	mov	r9, r0
    4006:	0c08      	lsrs	r0, r1, #16
    4008:	4448      	add	r0, r9
    400a:	436f      	muls	r7, r5
    400c:	4582      	cmp	sl, r0
    400e:	d903      	bls.n	4018 <__aeabi_dmul+0x278>
    4010:	2180      	movs	r1, #128	; 0x80
    4012:	0249      	lsls	r1, r1, #9
    4014:	4689      	mov	r9, r1
    4016:	444f      	add	r7, r9
    4018:	0c01      	lsrs	r1, r0, #16
    401a:	4689      	mov	r9, r1
    401c:	0039      	movs	r1, r7
    401e:	4449      	add	r1, r9
    4020:	9102      	str	r1, [sp, #8]
    4022:	4641      	mov	r1, r8
    4024:	040f      	lsls	r7, r1, #16
    4026:	9904      	ldr	r1, [sp, #16]
    4028:	0c3f      	lsrs	r7, r7, #16
    402a:	4688      	mov	r8, r1
    402c:	0400      	lsls	r0, r0, #16
    402e:	19c0      	adds	r0, r0, r7
    4030:	4480      	add	r8, r0
    4032:	4641      	mov	r1, r8
    4034:	9104      	str	r1, [sp, #16]
    4036:	4659      	mov	r1, fp
    4038:	0c0f      	lsrs	r7, r1, #16
    403a:	0409      	lsls	r1, r1, #16
    403c:	0c09      	lsrs	r1, r1, #16
    403e:	4688      	mov	r8, r1
    4040:	4359      	muls	r1, r3
    4042:	468a      	mov	sl, r1
    4044:	0039      	movs	r1, r7
    4046:	4351      	muls	r1, r2
    4048:	4689      	mov	r9, r1
    404a:	4641      	mov	r1, r8
    404c:	434a      	muls	r2, r1
    404e:	4651      	mov	r1, sl
    4050:	0c09      	lsrs	r1, r1, #16
    4052:	468b      	mov	fp, r1
    4054:	437b      	muls	r3, r7
    4056:	18d2      	adds	r2, r2, r3
    4058:	445a      	add	r2, fp
    405a:	4293      	cmp	r3, r2
    405c:	d903      	bls.n	4066 <__aeabi_dmul+0x2c6>
    405e:	2380      	movs	r3, #128	; 0x80
    4060:	025b      	lsls	r3, r3, #9
    4062:	469b      	mov	fp, r3
    4064:	44d9      	add	r9, fp
    4066:	4651      	mov	r1, sl
    4068:	0409      	lsls	r1, r1, #16
    406a:	0c09      	lsrs	r1, r1, #16
    406c:	468a      	mov	sl, r1
    406e:	4641      	mov	r1, r8
    4070:	4361      	muls	r1, r4
    4072:	437c      	muls	r4, r7
    4074:	0c13      	lsrs	r3, r2, #16
    4076:	0412      	lsls	r2, r2, #16
    4078:	444b      	add	r3, r9
    407a:	4452      	add	r2, sl
    407c:	46a1      	mov	r9, r4
    407e:	468a      	mov	sl, r1
    4080:	003c      	movs	r4, r7
    4082:	4641      	mov	r1, r8
    4084:	436c      	muls	r4, r5
    4086:	434d      	muls	r5, r1
    4088:	4651      	mov	r1, sl
    408a:	444d      	add	r5, r9
    408c:	0c0f      	lsrs	r7, r1, #16
    408e:	197d      	adds	r5, r7, r5
    4090:	45a9      	cmp	r9, r5
    4092:	d903      	bls.n	409c <__aeabi_dmul+0x2fc>
    4094:	2180      	movs	r1, #128	; 0x80
    4096:	0249      	lsls	r1, r1, #9
    4098:	4688      	mov	r8, r1
    409a:	4444      	add	r4, r8
    409c:	9f04      	ldr	r7, [sp, #16]
    409e:	9903      	ldr	r1, [sp, #12]
    40a0:	46b8      	mov	r8, r7
    40a2:	4441      	add	r1, r8
    40a4:	468b      	mov	fp, r1
    40a6:	4583      	cmp	fp, r0
    40a8:	4180      	sbcs	r0, r0
    40aa:	4241      	negs	r1, r0
    40ac:	4688      	mov	r8, r1
    40ae:	4651      	mov	r1, sl
    40b0:	0408      	lsls	r0, r1, #16
    40b2:	042f      	lsls	r7, r5, #16
    40b4:	0c00      	lsrs	r0, r0, #16
    40b6:	183f      	adds	r7, r7, r0
    40b8:	4658      	mov	r0, fp
    40ba:	9902      	ldr	r1, [sp, #8]
    40bc:	1810      	adds	r0, r2, r0
    40be:	4689      	mov	r9, r1
    40c0:	4290      	cmp	r0, r2
    40c2:	4192      	sbcs	r2, r2
    40c4:	444f      	add	r7, r9
    40c6:	46ba      	mov	sl, r7
    40c8:	4252      	negs	r2, r2
    40ca:	4699      	mov	r9, r3
    40cc:	4693      	mov	fp, r2
    40ce:	44c2      	add	sl, r8
    40d0:	44d1      	add	r9, sl
    40d2:	44cb      	add	fp, r9
    40d4:	428f      	cmp	r7, r1
    40d6:	41bf      	sbcs	r7, r7
    40d8:	45c2      	cmp	sl, r8
    40da:	4189      	sbcs	r1, r1
    40dc:	4599      	cmp	r9, r3
    40de:	419b      	sbcs	r3, r3
    40e0:	4593      	cmp	fp, r2
    40e2:	4192      	sbcs	r2, r2
    40e4:	427f      	negs	r7, r7
    40e6:	4249      	negs	r1, r1
    40e8:	0c2d      	lsrs	r5, r5, #16
    40ea:	4252      	negs	r2, r2
    40ec:	430f      	orrs	r7, r1
    40ee:	425b      	negs	r3, r3
    40f0:	4313      	orrs	r3, r2
    40f2:	197f      	adds	r7, r7, r5
    40f4:	18ff      	adds	r7, r7, r3
    40f6:	465b      	mov	r3, fp
    40f8:	193c      	adds	r4, r7, r4
    40fa:	0ddb      	lsrs	r3, r3, #23
    40fc:	9a05      	ldr	r2, [sp, #20]
    40fe:	0264      	lsls	r4, r4, #9
    4100:	431c      	orrs	r4, r3
    4102:	0243      	lsls	r3, r0, #9
    4104:	4313      	orrs	r3, r2
    4106:	1e5d      	subs	r5, r3, #1
    4108:	41ab      	sbcs	r3, r5
    410a:	465a      	mov	r2, fp
    410c:	0dc0      	lsrs	r0, r0, #23
    410e:	4303      	orrs	r3, r0
    4110:	0252      	lsls	r2, r2, #9
    4112:	4313      	orrs	r3, r2
    4114:	01e2      	lsls	r2, r4, #7
    4116:	d556      	bpl.n	41c6 <__aeabi_dmul+0x426>
    4118:	2001      	movs	r0, #1
    411a:	085a      	lsrs	r2, r3, #1
    411c:	4003      	ands	r3, r0
    411e:	4313      	orrs	r3, r2
    4120:	07e2      	lsls	r2, r4, #31
    4122:	4313      	orrs	r3, r2
    4124:	0864      	lsrs	r4, r4, #1
    4126:	485a      	ldr	r0, [pc, #360]	; (4290 <__aeabi_dmul+0x4f0>)
    4128:	4460      	add	r0, ip
    412a:	2800      	cmp	r0, #0
    412c:	dd4d      	ble.n	41ca <__aeabi_dmul+0x42a>
    412e:	075a      	lsls	r2, r3, #29
    4130:	d009      	beq.n	4146 <__aeabi_dmul+0x3a6>
    4132:	220f      	movs	r2, #15
    4134:	401a      	ands	r2, r3
    4136:	2a04      	cmp	r2, #4
    4138:	d005      	beq.n	4146 <__aeabi_dmul+0x3a6>
    413a:	1d1a      	adds	r2, r3, #4
    413c:	429a      	cmp	r2, r3
    413e:	419b      	sbcs	r3, r3
    4140:	425b      	negs	r3, r3
    4142:	18e4      	adds	r4, r4, r3
    4144:	0013      	movs	r3, r2
    4146:	01e2      	lsls	r2, r4, #7
    4148:	d504      	bpl.n	4154 <__aeabi_dmul+0x3b4>
    414a:	2080      	movs	r0, #128	; 0x80
    414c:	4a51      	ldr	r2, [pc, #324]	; (4294 <__aeabi_dmul+0x4f4>)
    414e:	00c0      	lsls	r0, r0, #3
    4150:	4014      	ands	r4, r2
    4152:	4460      	add	r0, ip
    4154:	4a50      	ldr	r2, [pc, #320]	; (4298 <__aeabi_dmul+0x4f8>)
    4156:	4290      	cmp	r0, r2
    4158:	dd00      	ble.n	415c <__aeabi_dmul+0x3bc>
    415a:	e6e3      	b.n	3f24 <__aeabi_dmul+0x184>
    415c:	2501      	movs	r5, #1
    415e:	08db      	lsrs	r3, r3, #3
    4160:	0762      	lsls	r2, r4, #29
    4162:	431a      	orrs	r2, r3
    4164:	0264      	lsls	r4, r4, #9
    4166:	9b01      	ldr	r3, [sp, #4]
    4168:	4691      	mov	r9, r2
    416a:	0b22      	lsrs	r2, r4, #12
    416c:	0544      	lsls	r4, r0, #21
    416e:	0d64      	lsrs	r4, r4, #21
    4170:	401d      	ands	r5, r3
    4172:	e67c      	b.n	3e6e <__aeabi_dmul+0xce>
    4174:	2280      	movs	r2, #128	; 0x80
    4176:	4659      	mov	r1, fp
    4178:	0312      	lsls	r2, r2, #12
    417a:	4211      	tst	r1, r2
    417c:	d008      	beq.n	4190 <__aeabi_dmul+0x3f0>
    417e:	4214      	tst	r4, r2
    4180:	d106      	bne.n	4190 <__aeabi_dmul+0x3f0>
    4182:	4322      	orrs	r2, r4
    4184:	0312      	lsls	r2, r2, #12
    4186:	0b12      	lsrs	r2, r2, #12
    4188:	4645      	mov	r5, r8
    418a:	4699      	mov	r9, r3
    418c:	4c43      	ldr	r4, [pc, #268]	; (429c <__aeabi_dmul+0x4fc>)
    418e:	e66e      	b.n	3e6e <__aeabi_dmul+0xce>
    4190:	465b      	mov	r3, fp
    4192:	431a      	orrs	r2, r3
    4194:	0312      	lsls	r2, r2, #12
    4196:	0b12      	lsrs	r2, r2, #12
    4198:	4c40      	ldr	r4, [pc, #256]	; (429c <__aeabi_dmul+0x4fc>)
    419a:	e668      	b.n	3e6e <__aeabi_dmul+0xce>
    419c:	0003      	movs	r3, r0
    419e:	4654      	mov	r4, sl
    41a0:	3b28      	subs	r3, #40	; 0x28
    41a2:	409c      	lsls	r4, r3
    41a4:	2300      	movs	r3, #0
    41a6:	e6b9      	b.n	3f1c <__aeabi_dmul+0x17c>
    41a8:	f000 fbfc 	bl	49a4 <__clzsi2>
    41ac:	3020      	adds	r0, #32
    41ae:	e6a6      	b.n	3efe <__aeabi_dmul+0x15e>
    41b0:	0003      	movs	r3, r0
    41b2:	3b28      	subs	r3, #40	; 0x28
    41b4:	409f      	lsls	r7, r3
    41b6:	2300      	movs	r3, #0
    41b8:	46bb      	mov	fp, r7
    41ba:	4699      	mov	r9, r3
    41bc:	e68a      	b.n	3ed4 <__aeabi_dmul+0x134>
    41be:	f000 fbf1 	bl	49a4 <__clzsi2>
    41c2:	3020      	adds	r0, #32
    41c4:	e674      	b.n	3eb0 <__aeabi_dmul+0x110>
    41c6:	46b4      	mov	ip, r6
    41c8:	e7ad      	b.n	4126 <__aeabi_dmul+0x386>
    41ca:	2501      	movs	r5, #1
    41cc:	1a2a      	subs	r2, r5, r0
    41ce:	2a38      	cmp	r2, #56	; 0x38
    41d0:	dd06      	ble.n	41e0 <__aeabi_dmul+0x440>
    41d2:	9b01      	ldr	r3, [sp, #4]
    41d4:	2400      	movs	r4, #0
    41d6:	401d      	ands	r5, r3
    41d8:	2300      	movs	r3, #0
    41da:	2200      	movs	r2, #0
    41dc:	4699      	mov	r9, r3
    41de:	e646      	b.n	3e6e <__aeabi_dmul+0xce>
    41e0:	2a1f      	cmp	r2, #31
    41e2:	dc21      	bgt.n	4228 <__aeabi_dmul+0x488>
    41e4:	2520      	movs	r5, #32
    41e6:	0020      	movs	r0, r4
    41e8:	1aad      	subs	r5, r5, r2
    41ea:	001e      	movs	r6, r3
    41ec:	40ab      	lsls	r3, r5
    41ee:	40a8      	lsls	r0, r5
    41f0:	40d6      	lsrs	r6, r2
    41f2:	1e5d      	subs	r5, r3, #1
    41f4:	41ab      	sbcs	r3, r5
    41f6:	4330      	orrs	r0, r6
    41f8:	4318      	orrs	r0, r3
    41fa:	40d4      	lsrs	r4, r2
    41fc:	0743      	lsls	r3, r0, #29
    41fe:	d009      	beq.n	4214 <__aeabi_dmul+0x474>
    4200:	230f      	movs	r3, #15
    4202:	4003      	ands	r3, r0
    4204:	2b04      	cmp	r3, #4
    4206:	d005      	beq.n	4214 <__aeabi_dmul+0x474>
    4208:	0003      	movs	r3, r0
    420a:	1d18      	adds	r0, r3, #4
    420c:	4298      	cmp	r0, r3
    420e:	419b      	sbcs	r3, r3
    4210:	425b      	negs	r3, r3
    4212:	18e4      	adds	r4, r4, r3
    4214:	0223      	lsls	r3, r4, #8
    4216:	d521      	bpl.n	425c <__aeabi_dmul+0x4bc>
    4218:	2501      	movs	r5, #1
    421a:	9b01      	ldr	r3, [sp, #4]
    421c:	2401      	movs	r4, #1
    421e:	401d      	ands	r5, r3
    4220:	2300      	movs	r3, #0
    4222:	2200      	movs	r2, #0
    4224:	4699      	mov	r9, r3
    4226:	e622      	b.n	3e6e <__aeabi_dmul+0xce>
    4228:	251f      	movs	r5, #31
    422a:	0021      	movs	r1, r4
    422c:	426d      	negs	r5, r5
    422e:	1a28      	subs	r0, r5, r0
    4230:	40c1      	lsrs	r1, r0
    4232:	0008      	movs	r0, r1
    4234:	2a20      	cmp	r2, #32
    4236:	d01d      	beq.n	4274 <__aeabi_dmul+0x4d4>
    4238:	355f      	adds	r5, #95	; 0x5f
    423a:	1aaa      	subs	r2, r5, r2
    423c:	4094      	lsls	r4, r2
    423e:	4323      	orrs	r3, r4
    4240:	1e5c      	subs	r4, r3, #1
    4242:	41a3      	sbcs	r3, r4
    4244:	2507      	movs	r5, #7
    4246:	4303      	orrs	r3, r0
    4248:	401d      	ands	r5, r3
    424a:	2200      	movs	r2, #0
    424c:	2d00      	cmp	r5, #0
    424e:	d009      	beq.n	4264 <__aeabi_dmul+0x4c4>
    4250:	220f      	movs	r2, #15
    4252:	2400      	movs	r4, #0
    4254:	401a      	ands	r2, r3
    4256:	0018      	movs	r0, r3
    4258:	2a04      	cmp	r2, #4
    425a:	d1d6      	bne.n	420a <__aeabi_dmul+0x46a>
    425c:	0003      	movs	r3, r0
    425e:	0765      	lsls	r5, r4, #29
    4260:	0264      	lsls	r4, r4, #9
    4262:	0b22      	lsrs	r2, r4, #12
    4264:	08db      	lsrs	r3, r3, #3
    4266:	432b      	orrs	r3, r5
    4268:	2501      	movs	r5, #1
    426a:	4699      	mov	r9, r3
    426c:	9b01      	ldr	r3, [sp, #4]
    426e:	2400      	movs	r4, #0
    4270:	401d      	ands	r5, r3
    4272:	e5fc      	b.n	3e6e <__aeabi_dmul+0xce>
    4274:	2400      	movs	r4, #0
    4276:	e7e2      	b.n	423e <__aeabi_dmul+0x49e>
    4278:	2280      	movs	r2, #128	; 0x80
    427a:	2501      	movs	r5, #1
    427c:	0312      	lsls	r2, r2, #12
    427e:	4322      	orrs	r2, r4
    4280:	9901      	ldr	r1, [sp, #4]
    4282:	0312      	lsls	r2, r2, #12
    4284:	0b12      	lsrs	r2, r2, #12
    4286:	400d      	ands	r5, r1
    4288:	4699      	mov	r9, r3
    428a:	4c04      	ldr	r4, [pc, #16]	; (429c <__aeabi_dmul+0x4fc>)
    428c:	e5ef      	b.n	3e6e <__aeabi_dmul+0xce>
    428e:	46c0      	nop			; (mov r8, r8)
    4290:	000003ff 	.word	0x000003ff
    4294:	feffffff 	.word	0xfeffffff
    4298:	000007fe 	.word	0x000007fe
    429c:	000007ff 	.word	0x000007ff

000042a0 <__aeabi_dsub>:
    42a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42a2:	4646      	mov	r6, r8
    42a4:	46d6      	mov	lr, sl
    42a6:	464f      	mov	r7, r9
    42a8:	030c      	lsls	r4, r1, #12
    42aa:	b5c0      	push	{r6, r7, lr}
    42ac:	0fcd      	lsrs	r5, r1, #31
    42ae:	004e      	lsls	r6, r1, #1
    42b0:	0a61      	lsrs	r1, r4, #9
    42b2:	0f44      	lsrs	r4, r0, #29
    42b4:	430c      	orrs	r4, r1
    42b6:	00c1      	lsls	r1, r0, #3
    42b8:	0058      	lsls	r0, r3, #1
    42ba:	0d40      	lsrs	r0, r0, #21
    42bc:	4684      	mov	ip, r0
    42be:	468a      	mov	sl, r1
    42c0:	000f      	movs	r7, r1
    42c2:	0319      	lsls	r1, r3, #12
    42c4:	0f50      	lsrs	r0, r2, #29
    42c6:	0a49      	lsrs	r1, r1, #9
    42c8:	4301      	orrs	r1, r0
    42ca:	48c6      	ldr	r0, [pc, #792]	; (45e4 <__aeabi_dsub+0x344>)
    42cc:	0d76      	lsrs	r6, r6, #21
    42ce:	46a8      	mov	r8, r5
    42d0:	0fdb      	lsrs	r3, r3, #31
    42d2:	00d2      	lsls	r2, r2, #3
    42d4:	4584      	cmp	ip, r0
    42d6:	d100      	bne.n	42da <__aeabi_dsub+0x3a>
    42d8:	e0d8      	b.n	448c <__aeabi_dsub+0x1ec>
    42da:	2001      	movs	r0, #1
    42dc:	4043      	eors	r3, r0
    42de:	42ab      	cmp	r3, r5
    42e0:	d100      	bne.n	42e4 <__aeabi_dsub+0x44>
    42e2:	e0a6      	b.n	4432 <__aeabi_dsub+0x192>
    42e4:	4660      	mov	r0, ip
    42e6:	1a35      	subs	r5, r6, r0
    42e8:	2d00      	cmp	r5, #0
    42ea:	dc00      	bgt.n	42ee <__aeabi_dsub+0x4e>
    42ec:	e105      	b.n	44fa <__aeabi_dsub+0x25a>
    42ee:	2800      	cmp	r0, #0
    42f0:	d110      	bne.n	4314 <__aeabi_dsub+0x74>
    42f2:	000b      	movs	r3, r1
    42f4:	4313      	orrs	r3, r2
    42f6:	d100      	bne.n	42fa <__aeabi_dsub+0x5a>
    42f8:	e0d7      	b.n	44aa <__aeabi_dsub+0x20a>
    42fa:	1e6b      	subs	r3, r5, #1
    42fc:	2b00      	cmp	r3, #0
    42fe:	d000      	beq.n	4302 <__aeabi_dsub+0x62>
    4300:	e14b      	b.n	459a <__aeabi_dsub+0x2fa>
    4302:	4653      	mov	r3, sl
    4304:	1a9f      	subs	r7, r3, r2
    4306:	45ba      	cmp	sl, r7
    4308:	4180      	sbcs	r0, r0
    430a:	1a64      	subs	r4, r4, r1
    430c:	4240      	negs	r0, r0
    430e:	1a24      	subs	r4, r4, r0
    4310:	2601      	movs	r6, #1
    4312:	e01e      	b.n	4352 <__aeabi_dsub+0xb2>
    4314:	4bb3      	ldr	r3, [pc, #716]	; (45e4 <__aeabi_dsub+0x344>)
    4316:	429e      	cmp	r6, r3
    4318:	d048      	beq.n	43ac <__aeabi_dsub+0x10c>
    431a:	2380      	movs	r3, #128	; 0x80
    431c:	041b      	lsls	r3, r3, #16
    431e:	4319      	orrs	r1, r3
    4320:	2d38      	cmp	r5, #56	; 0x38
    4322:	dd00      	ble.n	4326 <__aeabi_dsub+0x86>
    4324:	e119      	b.n	455a <__aeabi_dsub+0x2ba>
    4326:	2d1f      	cmp	r5, #31
    4328:	dd00      	ble.n	432c <__aeabi_dsub+0x8c>
    432a:	e14c      	b.n	45c6 <__aeabi_dsub+0x326>
    432c:	2320      	movs	r3, #32
    432e:	000f      	movs	r7, r1
    4330:	1b5b      	subs	r3, r3, r5
    4332:	0010      	movs	r0, r2
    4334:	409a      	lsls	r2, r3
    4336:	409f      	lsls	r7, r3
    4338:	40e8      	lsrs	r0, r5
    433a:	1e53      	subs	r3, r2, #1
    433c:	419a      	sbcs	r2, r3
    433e:	40e9      	lsrs	r1, r5
    4340:	4307      	orrs	r7, r0
    4342:	4317      	orrs	r7, r2
    4344:	4653      	mov	r3, sl
    4346:	1bdf      	subs	r7, r3, r7
    4348:	1a61      	subs	r1, r4, r1
    434a:	45ba      	cmp	sl, r7
    434c:	41a4      	sbcs	r4, r4
    434e:	4264      	negs	r4, r4
    4350:	1b0c      	subs	r4, r1, r4
    4352:	0223      	lsls	r3, r4, #8
    4354:	d400      	bmi.n	4358 <__aeabi_dsub+0xb8>
    4356:	e0c5      	b.n	44e4 <__aeabi_dsub+0x244>
    4358:	0264      	lsls	r4, r4, #9
    435a:	0a65      	lsrs	r5, r4, #9
    435c:	2d00      	cmp	r5, #0
    435e:	d100      	bne.n	4362 <__aeabi_dsub+0xc2>
    4360:	e0f6      	b.n	4550 <__aeabi_dsub+0x2b0>
    4362:	0028      	movs	r0, r5
    4364:	f000 fb1e 	bl	49a4 <__clzsi2>
    4368:	0003      	movs	r3, r0
    436a:	3b08      	subs	r3, #8
    436c:	2b1f      	cmp	r3, #31
    436e:	dd00      	ble.n	4372 <__aeabi_dsub+0xd2>
    4370:	e0e9      	b.n	4546 <__aeabi_dsub+0x2a6>
    4372:	2220      	movs	r2, #32
    4374:	003c      	movs	r4, r7
    4376:	1ad2      	subs	r2, r2, r3
    4378:	409d      	lsls	r5, r3
    437a:	40d4      	lsrs	r4, r2
    437c:	409f      	lsls	r7, r3
    437e:	4325      	orrs	r5, r4
    4380:	429e      	cmp	r6, r3
    4382:	dd00      	ble.n	4386 <__aeabi_dsub+0xe6>
    4384:	e0db      	b.n	453e <__aeabi_dsub+0x29e>
    4386:	1b9e      	subs	r6, r3, r6
    4388:	1c73      	adds	r3, r6, #1
    438a:	2b1f      	cmp	r3, #31
    438c:	dd00      	ble.n	4390 <__aeabi_dsub+0xf0>
    438e:	e10a      	b.n	45a6 <__aeabi_dsub+0x306>
    4390:	2220      	movs	r2, #32
    4392:	0038      	movs	r0, r7
    4394:	1ad2      	subs	r2, r2, r3
    4396:	0029      	movs	r1, r5
    4398:	4097      	lsls	r7, r2
    439a:	002c      	movs	r4, r5
    439c:	4091      	lsls	r1, r2
    439e:	40d8      	lsrs	r0, r3
    43a0:	1e7a      	subs	r2, r7, #1
    43a2:	4197      	sbcs	r7, r2
    43a4:	40dc      	lsrs	r4, r3
    43a6:	2600      	movs	r6, #0
    43a8:	4301      	orrs	r1, r0
    43aa:	430f      	orrs	r7, r1
    43ac:	077b      	lsls	r3, r7, #29
    43ae:	d009      	beq.n	43c4 <__aeabi_dsub+0x124>
    43b0:	230f      	movs	r3, #15
    43b2:	403b      	ands	r3, r7
    43b4:	2b04      	cmp	r3, #4
    43b6:	d005      	beq.n	43c4 <__aeabi_dsub+0x124>
    43b8:	1d3b      	adds	r3, r7, #4
    43ba:	42bb      	cmp	r3, r7
    43bc:	41bf      	sbcs	r7, r7
    43be:	427f      	negs	r7, r7
    43c0:	19e4      	adds	r4, r4, r7
    43c2:	001f      	movs	r7, r3
    43c4:	0223      	lsls	r3, r4, #8
    43c6:	d525      	bpl.n	4414 <__aeabi_dsub+0x174>
    43c8:	4b86      	ldr	r3, [pc, #536]	; (45e4 <__aeabi_dsub+0x344>)
    43ca:	3601      	adds	r6, #1
    43cc:	429e      	cmp	r6, r3
    43ce:	d100      	bne.n	43d2 <__aeabi_dsub+0x132>
    43d0:	e0af      	b.n	4532 <__aeabi_dsub+0x292>
    43d2:	4b85      	ldr	r3, [pc, #532]	; (45e8 <__aeabi_dsub+0x348>)
    43d4:	2501      	movs	r5, #1
    43d6:	401c      	ands	r4, r3
    43d8:	4643      	mov	r3, r8
    43da:	0762      	lsls	r2, r4, #29
    43dc:	08ff      	lsrs	r7, r7, #3
    43de:	0264      	lsls	r4, r4, #9
    43e0:	0576      	lsls	r6, r6, #21
    43e2:	4317      	orrs	r7, r2
    43e4:	0b24      	lsrs	r4, r4, #12
    43e6:	0d76      	lsrs	r6, r6, #21
    43e8:	401d      	ands	r5, r3
    43ea:	2100      	movs	r1, #0
    43ec:	0324      	lsls	r4, r4, #12
    43ee:	0b23      	lsrs	r3, r4, #12
    43f0:	0d0c      	lsrs	r4, r1, #20
    43f2:	4a7e      	ldr	r2, [pc, #504]	; (45ec <__aeabi_dsub+0x34c>)
    43f4:	0524      	lsls	r4, r4, #20
    43f6:	431c      	orrs	r4, r3
    43f8:	4014      	ands	r4, r2
    43fa:	0533      	lsls	r3, r6, #20
    43fc:	4323      	orrs	r3, r4
    43fe:	005b      	lsls	r3, r3, #1
    4400:	07ed      	lsls	r5, r5, #31
    4402:	085b      	lsrs	r3, r3, #1
    4404:	432b      	orrs	r3, r5
    4406:	0038      	movs	r0, r7
    4408:	0019      	movs	r1, r3
    440a:	bc1c      	pop	{r2, r3, r4}
    440c:	4690      	mov	r8, r2
    440e:	4699      	mov	r9, r3
    4410:	46a2      	mov	sl, r4
    4412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4414:	2501      	movs	r5, #1
    4416:	4643      	mov	r3, r8
    4418:	0762      	lsls	r2, r4, #29
    441a:	08ff      	lsrs	r7, r7, #3
    441c:	4317      	orrs	r7, r2
    441e:	08e4      	lsrs	r4, r4, #3
    4420:	401d      	ands	r5, r3
    4422:	4b70      	ldr	r3, [pc, #448]	; (45e4 <__aeabi_dsub+0x344>)
    4424:	429e      	cmp	r6, r3
    4426:	d036      	beq.n	4496 <__aeabi_dsub+0x1f6>
    4428:	0324      	lsls	r4, r4, #12
    442a:	0576      	lsls	r6, r6, #21
    442c:	0b24      	lsrs	r4, r4, #12
    442e:	0d76      	lsrs	r6, r6, #21
    4430:	e7db      	b.n	43ea <__aeabi_dsub+0x14a>
    4432:	4663      	mov	r3, ip
    4434:	1af3      	subs	r3, r6, r3
    4436:	2b00      	cmp	r3, #0
    4438:	dc00      	bgt.n	443c <__aeabi_dsub+0x19c>
    443a:	e094      	b.n	4566 <__aeabi_dsub+0x2c6>
    443c:	4660      	mov	r0, ip
    443e:	2800      	cmp	r0, #0
    4440:	d035      	beq.n	44ae <__aeabi_dsub+0x20e>
    4442:	4868      	ldr	r0, [pc, #416]	; (45e4 <__aeabi_dsub+0x344>)
    4444:	4286      	cmp	r6, r0
    4446:	d0b1      	beq.n	43ac <__aeabi_dsub+0x10c>
    4448:	2780      	movs	r7, #128	; 0x80
    444a:	043f      	lsls	r7, r7, #16
    444c:	4339      	orrs	r1, r7
    444e:	2b38      	cmp	r3, #56	; 0x38
    4450:	dc00      	bgt.n	4454 <__aeabi_dsub+0x1b4>
    4452:	e0fd      	b.n	4650 <__aeabi_dsub+0x3b0>
    4454:	430a      	orrs	r2, r1
    4456:	0017      	movs	r7, r2
    4458:	2100      	movs	r1, #0
    445a:	1e7a      	subs	r2, r7, #1
    445c:	4197      	sbcs	r7, r2
    445e:	4457      	add	r7, sl
    4460:	4557      	cmp	r7, sl
    4462:	4180      	sbcs	r0, r0
    4464:	1909      	adds	r1, r1, r4
    4466:	4244      	negs	r4, r0
    4468:	190c      	adds	r4, r1, r4
    446a:	0223      	lsls	r3, r4, #8
    446c:	d53a      	bpl.n	44e4 <__aeabi_dsub+0x244>
    446e:	4b5d      	ldr	r3, [pc, #372]	; (45e4 <__aeabi_dsub+0x344>)
    4470:	3601      	adds	r6, #1
    4472:	429e      	cmp	r6, r3
    4474:	d100      	bne.n	4478 <__aeabi_dsub+0x1d8>
    4476:	e14b      	b.n	4710 <__aeabi_dsub+0x470>
    4478:	2201      	movs	r2, #1
    447a:	4b5b      	ldr	r3, [pc, #364]	; (45e8 <__aeabi_dsub+0x348>)
    447c:	401c      	ands	r4, r3
    447e:	087b      	lsrs	r3, r7, #1
    4480:	4017      	ands	r7, r2
    4482:	431f      	orrs	r7, r3
    4484:	07e2      	lsls	r2, r4, #31
    4486:	4317      	orrs	r7, r2
    4488:	0864      	lsrs	r4, r4, #1
    448a:	e78f      	b.n	43ac <__aeabi_dsub+0x10c>
    448c:	0008      	movs	r0, r1
    448e:	4310      	orrs	r0, r2
    4490:	d000      	beq.n	4494 <__aeabi_dsub+0x1f4>
    4492:	e724      	b.n	42de <__aeabi_dsub+0x3e>
    4494:	e721      	b.n	42da <__aeabi_dsub+0x3a>
    4496:	0023      	movs	r3, r4
    4498:	433b      	orrs	r3, r7
    449a:	d100      	bne.n	449e <__aeabi_dsub+0x1fe>
    449c:	e1b9      	b.n	4812 <__aeabi_dsub+0x572>
    449e:	2280      	movs	r2, #128	; 0x80
    44a0:	0312      	lsls	r2, r2, #12
    44a2:	4314      	orrs	r4, r2
    44a4:	0324      	lsls	r4, r4, #12
    44a6:	0b24      	lsrs	r4, r4, #12
    44a8:	e79f      	b.n	43ea <__aeabi_dsub+0x14a>
    44aa:	002e      	movs	r6, r5
    44ac:	e77e      	b.n	43ac <__aeabi_dsub+0x10c>
    44ae:	0008      	movs	r0, r1
    44b0:	4310      	orrs	r0, r2
    44b2:	d100      	bne.n	44b6 <__aeabi_dsub+0x216>
    44b4:	e0ca      	b.n	464c <__aeabi_dsub+0x3ac>
    44b6:	1e58      	subs	r0, r3, #1
    44b8:	4684      	mov	ip, r0
    44ba:	2800      	cmp	r0, #0
    44bc:	d000      	beq.n	44c0 <__aeabi_dsub+0x220>
    44be:	e0e7      	b.n	4690 <__aeabi_dsub+0x3f0>
    44c0:	4452      	add	r2, sl
    44c2:	4552      	cmp	r2, sl
    44c4:	4180      	sbcs	r0, r0
    44c6:	1864      	adds	r4, r4, r1
    44c8:	4240      	negs	r0, r0
    44ca:	1824      	adds	r4, r4, r0
    44cc:	0017      	movs	r7, r2
    44ce:	2601      	movs	r6, #1
    44d0:	0223      	lsls	r3, r4, #8
    44d2:	d507      	bpl.n	44e4 <__aeabi_dsub+0x244>
    44d4:	2602      	movs	r6, #2
    44d6:	e7cf      	b.n	4478 <__aeabi_dsub+0x1d8>
    44d8:	4664      	mov	r4, ip
    44da:	432c      	orrs	r4, r5
    44dc:	d100      	bne.n	44e0 <__aeabi_dsub+0x240>
    44de:	e1b3      	b.n	4848 <__aeabi_dsub+0x5a8>
    44e0:	002c      	movs	r4, r5
    44e2:	4667      	mov	r7, ip
    44e4:	077b      	lsls	r3, r7, #29
    44e6:	d000      	beq.n	44ea <__aeabi_dsub+0x24a>
    44e8:	e762      	b.n	43b0 <__aeabi_dsub+0x110>
    44ea:	0763      	lsls	r3, r4, #29
    44ec:	08ff      	lsrs	r7, r7, #3
    44ee:	431f      	orrs	r7, r3
    44f0:	2501      	movs	r5, #1
    44f2:	4643      	mov	r3, r8
    44f4:	08e4      	lsrs	r4, r4, #3
    44f6:	401d      	ands	r5, r3
    44f8:	e793      	b.n	4422 <__aeabi_dsub+0x182>
    44fa:	2d00      	cmp	r5, #0
    44fc:	d178      	bne.n	45f0 <__aeabi_dsub+0x350>
    44fe:	1c75      	adds	r5, r6, #1
    4500:	056d      	lsls	r5, r5, #21
    4502:	0d6d      	lsrs	r5, r5, #21
    4504:	2d01      	cmp	r5, #1
    4506:	dc00      	bgt.n	450a <__aeabi_dsub+0x26a>
    4508:	e0f2      	b.n	46f0 <__aeabi_dsub+0x450>
    450a:	4650      	mov	r0, sl
    450c:	1a80      	subs	r0, r0, r2
    450e:	4582      	cmp	sl, r0
    4510:	41bf      	sbcs	r7, r7
    4512:	1a65      	subs	r5, r4, r1
    4514:	427f      	negs	r7, r7
    4516:	1bed      	subs	r5, r5, r7
    4518:	4684      	mov	ip, r0
    451a:	0228      	lsls	r0, r5, #8
    451c:	d400      	bmi.n	4520 <__aeabi_dsub+0x280>
    451e:	e08c      	b.n	463a <__aeabi_dsub+0x39a>
    4520:	4650      	mov	r0, sl
    4522:	1a17      	subs	r7, r2, r0
    4524:	42ba      	cmp	r2, r7
    4526:	4192      	sbcs	r2, r2
    4528:	1b0c      	subs	r4, r1, r4
    452a:	4255      	negs	r5, r2
    452c:	1b65      	subs	r5, r4, r5
    452e:	4698      	mov	r8, r3
    4530:	e714      	b.n	435c <__aeabi_dsub+0xbc>
    4532:	2501      	movs	r5, #1
    4534:	4643      	mov	r3, r8
    4536:	2400      	movs	r4, #0
    4538:	401d      	ands	r5, r3
    453a:	2700      	movs	r7, #0
    453c:	e755      	b.n	43ea <__aeabi_dsub+0x14a>
    453e:	4c2a      	ldr	r4, [pc, #168]	; (45e8 <__aeabi_dsub+0x348>)
    4540:	1af6      	subs	r6, r6, r3
    4542:	402c      	ands	r4, r5
    4544:	e732      	b.n	43ac <__aeabi_dsub+0x10c>
    4546:	003d      	movs	r5, r7
    4548:	3828      	subs	r0, #40	; 0x28
    454a:	4085      	lsls	r5, r0
    454c:	2700      	movs	r7, #0
    454e:	e717      	b.n	4380 <__aeabi_dsub+0xe0>
    4550:	0038      	movs	r0, r7
    4552:	f000 fa27 	bl	49a4 <__clzsi2>
    4556:	3020      	adds	r0, #32
    4558:	e706      	b.n	4368 <__aeabi_dsub+0xc8>
    455a:	430a      	orrs	r2, r1
    455c:	0017      	movs	r7, r2
    455e:	2100      	movs	r1, #0
    4560:	1e7a      	subs	r2, r7, #1
    4562:	4197      	sbcs	r7, r2
    4564:	e6ee      	b.n	4344 <__aeabi_dsub+0xa4>
    4566:	2b00      	cmp	r3, #0
    4568:	d000      	beq.n	456c <__aeabi_dsub+0x2cc>
    456a:	e0e5      	b.n	4738 <__aeabi_dsub+0x498>
    456c:	1c73      	adds	r3, r6, #1
    456e:	469c      	mov	ip, r3
    4570:	055b      	lsls	r3, r3, #21
    4572:	0d5b      	lsrs	r3, r3, #21
    4574:	2b01      	cmp	r3, #1
    4576:	dc00      	bgt.n	457a <__aeabi_dsub+0x2da>
    4578:	e09f      	b.n	46ba <__aeabi_dsub+0x41a>
    457a:	4b1a      	ldr	r3, [pc, #104]	; (45e4 <__aeabi_dsub+0x344>)
    457c:	459c      	cmp	ip, r3
    457e:	d100      	bne.n	4582 <__aeabi_dsub+0x2e2>
    4580:	e0c5      	b.n	470e <__aeabi_dsub+0x46e>
    4582:	4452      	add	r2, sl
    4584:	4552      	cmp	r2, sl
    4586:	4180      	sbcs	r0, r0
    4588:	1864      	adds	r4, r4, r1
    458a:	4240      	negs	r0, r0
    458c:	1824      	adds	r4, r4, r0
    458e:	07e7      	lsls	r7, r4, #31
    4590:	0852      	lsrs	r2, r2, #1
    4592:	4317      	orrs	r7, r2
    4594:	0864      	lsrs	r4, r4, #1
    4596:	4666      	mov	r6, ip
    4598:	e708      	b.n	43ac <__aeabi_dsub+0x10c>
    459a:	4812      	ldr	r0, [pc, #72]	; (45e4 <__aeabi_dsub+0x344>)
    459c:	4285      	cmp	r5, r0
    459e:	d100      	bne.n	45a2 <__aeabi_dsub+0x302>
    45a0:	e085      	b.n	46ae <__aeabi_dsub+0x40e>
    45a2:	001d      	movs	r5, r3
    45a4:	e6bc      	b.n	4320 <__aeabi_dsub+0x80>
    45a6:	0029      	movs	r1, r5
    45a8:	3e1f      	subs	r6, #31
    45aa:	40f1      	lsrs	r1, r6
    45ac:	2b20      	cmp	r3, #32
    45ae:	d100      	bne.n	45b2 <__aeabi_dsub+0x312>
    45b0:	e07f      	b.n	46b2 <__aeabi_dsub+0x412>
    45b2:	2240      	movs	r2, #64	; 0x40
    45b4:	1ad3      	subs	r3, r2, r3
    45b6:	409d      	lsls	r5, r3
    45b8:	432f      	orrs	r7, r5
    45ba:	1e7d      	subs	r5, r7, #1
    45bc:	41af      	sbcs	r7, r5
    45be:	2400      	movs	r4, #0
    45c0:	430f      	orrs	r7, r1
    45c2:	2600      	movs	r6, #0
    45c4:	e78e      	b.n	44e4 <__aeabi_dsub+0x244>
    45c6:	002b      	movs	r3, r5
    45c8:	000f      	movs	r7, r1
    45ca:	3b20      	subs	r3, #32
    45cc:	40df      	lsrs	r7, r3
    45ce:	2d20      	cmp	r5, #32
    45d0:	d071      	beq.n	46b6 <__aeabi_dsub+0x416>
    45d2:	2340      	movs	r3, #64	; 0x40
    45d4:	1b5d      	subs	r5, r3, r5
    45d6:	40a9      	lsls	r1, r5
    45d8:	430a      	orrs	r2, r1
    45da:	1e51      	subs	r1, r2, #1
    45dc:	418a      	sbcs	r2, r1
    45de:	2100      	movs	r1, #0
    45e0:	4317      	orrs	r7, r2
    45e2:	e6af      	b.n	4344 <__aeabi_dsub+0xa4>
    45e4:	000007ff 	.word	0x000007ff
    45e8:	ff7fffff 	.word	0xff7fffff
    45ec:	800fffff 	.word	0x800fffff
    45f0:	2e00      	cmp	r6, #0
    45f2:	d03e      	beq.n	4672 <__aeabi_dsub+0x3d2>
    45f4:	4eb3      	ldr	r6, [pc, #716]	; (48c4 <__aeabi_dsub+0x624>)
    45f6:	45b4      	cmp	ip, r6
    45f8:	d045      	beq.n	4686 <__aeabi_dsub+0x3e6>
    45fa:	2680      	movs	r6, #128	; 0x80
    45fc:	0436      	lsls	r6, r6, #16
    45fe:	426d      	negs	r5, r5
    4600:	4334      	orrs	r4, r6
    4602:	2d38      	cmp	r5, #56	; 0x38
    4604:	dd00      	ble.n	4608 <__aeabi_dsub+0x368>
    4606:	e0a8      	b.n	475a <__aeabi_dsub+0x4ba>
    4608:	2d1f      	cmp	r5, #31
    460a:	dd00      	ble.n	460e <__aeabi_dsub+0x36e>
    460c:	e11f      	b.n	484e <__aeabi_dsub+0x5ae>
    460e:	2620      	movs	r6, #32
    4610:	0027      	movs	r7, r4
    4612:	4650      	mov	r0, sl
    4614:	1b76      	subs	r6, r6, r5
    4616:	40b7      	lsls	r7, r6
    4618:	40e8      	lsrs	r0, r5
    461a:	4307      	orrs	r7, r0
    461c:	4650      	mov	r0, sl
    461e:	40b0      	lsls	r0, r6
    4620:	1e46      	subs	r6, r0, #1
    4622:	41b0      	sbcs	r0, r6
    4624:	40ec      	lsrs	r4, r5
    4626:	4338      	orrs	r0, r7
    4628:	1a17      	subs	r7, r2, r0
    462a:	42ba      	cmp	r2, r7
    462c:	4192      	sbcs	r2, r2
    462e:	1b0c      	subs	r4, r1, r4
    4630:	4252      	negs	r2, r2
    4632:	1aa4      	subs	r4, r4, r2
    4634:	4666      	mov	r6, ip
    4636:	4698      	mov	r8, r3
    4638:	e68b      	b.n	4352 <__aeabi_dsub+0xb2>
    463a:	4664      	mov	r4, ip
    463c:	4667      	mov	r7, ip
    463e:	432c      	orrs	r4, r5
    4640:	d000      	beq.n	4644 <__aeabi_dsub+0x3a4>
    4642:	e68b      	b.n	435c <__aeabi_dsub+0xbc>
    4644:	2500      	movs	r5, #0
    4646:	2600      	movs	r6, #0
    4648:	2700      	movs	r7, #0
    464a:	e6ea      	b.n	4422 <__aeabi_dsub+0x182>
    464c:	001e      	movs	r6, r3
    464e:	e6ad      	b.n	43ac <__aeabi_dsub+0x10c>
    4650:	2b1f      	cmp	r3, #31
    4652:	dc60      	bgt.n	4716 <__aeabi_dsub+0x476>
    4654:	2720      	movs	r7, #32
    4656:	1af8      	subs	r0, r7, r3
    4658:	000f      	movs	r7, r1
    465a:	4684      	mov	ip, r0
    465c:	4087      	lsls	r7, r0
    465e:	0010      	movs	r0, r2
    4660:	40d8      	lsrs	r0, r3
    4662:	4307      	orrs	r7, r0
    4664:	4660      	mov	r0, ip
    4666:	4082      	lsls	r2, r0
    4668:	1e50      	subs	r0, r2, #1
    466a:	4182      	sbcs	r2, r0
    466c:	40d9      	lsrs	r1, r3
    466e:	4317      	orrs	r7, r2
    4670:	e6f5      	b.n	445e <__aeabi_dsub+0x1be>
    4672:	0026      	movs	r6, r4
    4674:	4650      	mov	r0, sl
    4676:	4306      	orrs	r6, r0
    4678:	d005      	beq.n	4686 <__aeabi_dsub+0x3e6>
    467a:	43ed      	mvns	r5, r5
    467c:	2d00      	cmp	r5, #0
    467e:	d0d3      	beq.n	4628 <__aeabi_dsub+0x388>
    4680:	4e90      	ldr	r6, [pc, #576]	; (48c4 <__aeabi_dsub+0x624>)
    4682:	45b4      	cmp	ip, r6
    4684:	d1bd      	bne.n	4602 <__aeabi_dsub+0x362>
    4686:	000c      	movs	r4, r1
    4688:	0017      	movs	r7, r2
    468a:	4666      	mov	r6, ip
    468c:	4698      	mov	r8, r3
    468e:	e68d      	b.n	43ac <__aeabi_dsub+0x10c>
    4690:	488c      	ldr	r0, [pc, #560]	; (48c4 <__aeabi_dsub+0x624>)
    4692:	4283      	cmp	r3, r0
    4694:	d00b      	beq.n	46ae <__aeabi_dsub+0x40e>
    4696:	4663      	mov	r3, ip
    4698:	e6d9      	b.n	444e <__aeabi_dsub+0x1ae>
    469a:	2d00      	cmp	r5, #0
    469c:	d000      	beq.n	46a0 <__aeabi_dsub+0x400>
    469e:	e096      	b.n	47ce <__aeabi_dsub+0x52e>
    46a0:	0008      	movs	r0, r1
    46a2:	4310      	orrs	r0, r2
    46a4:	d100      	bne.n	46a8 <__aeabi_dsub+0x408>
    46a6:	e0e2      	b.n	486e <__aeabi_dsub+0x5ce>
    46a8:	000c      	movs	r4, r1
    46aa:	0017      	movs	r7, r2
    46ac:	4698      	mov	r8, r3
    46ae:	4e85      	ldr	r6, [pc, #532]	; (48c4 <__aeabi_dsub+0x624>)
    46b0:	e67c      	b.n	43ac <__aeabi_dsub+0x10c>
    46b2:	2500      	movs	r5, #0
    46b4:	e780      	b.n	45b8 <__aeabi_dsub+0x318>
    46b6:	2100      	movs	r1, #0
    46b8:	e78e      	b.n	45d8 <__aeabi_dsub+0x338>
    46ba:	0023      	movs	r3, r4
    46bc:	4650      	mov	r0, sl
    46be:	4303      	orrs	r3, r0
    46c0:	2e00      	cmp	r6, #0
    46c2:	d000      	beq.n	46c6 <__aeabi_dsub+0x426>
    46c4:	e0a8      	b.n	4818 <__aeabi_dsub+0x578>
    46c6:	2b00      	cmp	r3, #0
    46c8:	d100      	bne.n	46cc <__aeabi_dsub+0x42c>
    46ca:	e0de      	b.n	488a <__aeabi_dsub+0x5ea>
    46cc:	000b      	movs	r3, r1
    46ce:	4313      	orrs	r3, r2
    46d0:	d100      	bne.n	46d4 <__aeabi_dsub+0x434>
    46d2:	e66b      	b.n	43ac <__aeabi_dsub+0x10c>
    46d4:	4452      	add	r2, sl
    46d6:	4552      	cmp	r2, sl
    46d8:	4180      	sbcs	r0, r0
    46da:	1864      	adds	r4, r4, r1
    46dc:	4240      	negs	r0, r0
    46de:	1824      	adds	r4, r4, r0
    46e0:	0017      	movs	r7, r2
    46e2:	0223      	lsls	r3, r4, #8
    46e4:	d400      	bmi.n	46e8 <__aeabi_dsub+0x448>
    46e6:	e6fd      	b.n	44e4 <__aeabi_dsub+0x244>
    46e8:	4b77      	ldr	r3, [pc, #476]	; (48c8 <__aeabi_dsub+0x628>)
    46ea:	4666      	mov	r6, ip
    46ec:	401c      	ands	r4, r3
    46ee:	e65d      	b.n	43ac <__aeabi_dsub+0x10c>
    46f0:	0025      	movs	r5, r4
    46f2:	4650      	mov	r0, sl
    46f4:	4305      	orrs	r5, r0
    46f6:	2e00      	cmp	r6, #0
    46f8:	d1cf      	bne.n	469a <__aeabi_dsub+0x3fa>
    46fa:	2d00      	cmp	r5, #0
    46fc:	d14f      	bne.n	479e <__aeabi_dsub+0x4fe>
    46fe:	000c      	movs	r4, r1
    4700:	4314      	orrs	r4, r2
    4702:	d100      	bne.n	4706 <__aeabi_dsub+0x466>
    4704:	e0a0      	b.n	4848 <__aeabi_dsub+0x5a8>
    4706:	000c      	movs	r4, r1
    4708:	0017      	movs	r7, r2
    470a:	4698      	mov	r8, r3
    470c:	e64e      	b.n	43ac <__aeabi_dsub+0x10c>
    470e:	4666      	mov	r6, ip
    4710:	2400      	movs	r4, #0
    4712:	2700      	movs	r7, #0
    4714:	e685      	b.n	4422 <__aeabi_dsub+0x182>
    4716:	001f      	movs	r7, r3
    4718:	0008      	movs	r0, r1
    471a:	3f20      	subs	r7, #32
    471c:	40f8      	lsrs	r0, r7
    471e:	0007      	movs	r7, r0
    4720:	2b20      	cmp	r3, #32
    4722:	d100      	bne.n	4726 <__aeabi_dsub+0x486>
    4724:	e08e      	b.n	4844 <__aeabi_dsub+0x5a4>
    4726:	2040      	movs	r0, #64	; 0x40
    4728:	1ac3      	subs	r3, r0, r3
    472a:	4099      	lsls	r1, r3
    472c:	430a      	orrs	r2, r1
    472e:	1e51      	subs	r1, r2, #1
    4730:	418a      	sbcs	r2, r1
    4732:	2100      	movs	r1, #0
    4734:	4317      	orrs	r7, r2
    4736:	e692      	b.n	445e <__aeabi_dsub+0x1be>
    4738:	2e00      	cmp	r6, #0
    473a:	d114      	bne.n	4766 <__aeabi_dsub+0x4c6>
    473c:	0026      	movs	r6, r4
    473e:	4650      	mov	r0, sl
    4740:	4306      	orrs	r6, r0
    4742:	d062      	beq.n	480a <__aeabi_dsub+0x56a>
    4744:	43db      	mvns	r3, r3
    4746:	2b00      	cmp	r3, #0
    4748:	d15c      	bne.n	4804 <__aeabi_dsub+0x564>
    474a:	1887      	adds	r7, r0, r2
    474c:	4297      	cmp	r7, r2
    474e:	4192      	sbcs	r2, r2
    4750:	1864      	adds	r4, r4, r1
    4752:	4252      	negs	r2, r2
    4754:	18a4      	adds	r4, r4, r2
    4756:	4666      	mov	r6, ip
    4758:	e687      	b.n	446a <__aeabi_dsub+0x1ca>
    475a:	4650      	mov	r0, sl
    475c:	4320      	orrs	r0, r4
    475e:	1e44      	subs	r4, r0, #1
    4760:	41a0      	sbcs	r0, r4
    4762:	2400      	movs	r4, #0
    4764:	e760      	b.n	4628 <__aeabi_dsub+0x388>
    4766:	4e57      	ldr	r6, [pc, #348]	; (48c4 <__aeabi_dsub+0x624>)
    4768:	45b4      	cmp	ip, r6
    476a:	d04e      	beq.n	480a <__aeabi_dsub+0x56a>
    476c:	2680      	movs	r6, #128	; 0x80
    476e:	0436      	lsls	r6, r6, #16
    4770:	425b      	negs	r3, r3
    4772:	4334      	orrs	r4, r6
    4774:	2b38      	cmp	r3, #56	; 0x38
    4776:	dd00      	ble.n	477a <__aeabi_dsub+0x4da>
    4778:	e07f      	b.n	487a <__aeabi_dsub+0x5da>
    477a:	2b1f      	cmp	r3, #31
    477c:	dd00      	ble.n	4780 <__aeabi_dsub+0x4e0>
    477e:	e08b      	b.n	4898 <__aeabi_dsub+0x5f8>
    4780:	2620      	movs	r6, #32
    4782:	0027      	movs	r7, r4
    4784:	4650      	mov	r0, sl
    4786:	1af6      	subs	r6, r6, r3
    4788:	40b7      	lsls	r7, r6
    478a:	40d8      	lsrs	r0, r3
    478c:	4307      	orrs	r7, r0
    478e:	4650      	mov	r0, sl
    4790:	40b0      	lsls	r0, r6
    4792:	1e46      	subs	r6, r0, #1
    4794:	41b0      	sbcs	r0, r6
    4796:	4307      	orrs	r7, r0
    4798:	40dc      	lsrs	r4, r3
    479a:	18bf      	adds	r7, r7, r2
    479c:	e7d6      	b.n	474c <__aeabi_dsub+0x4ac>
    479e:	000d      	movs	r5, r1
    47a0:	4315      	orrs	r5, r2
    47a2:	d100      	bne.n	47a6 <__aeabi_dsub+0x506>
    47a4:	e602      	b.n	43ac <__aeabi_dsub+0x10c>
    47a6:	4650      	mov	r0, sl
    47a8:	1a80      	subs	r0, r0, r2
    47aa:	4582      	cmp	sl, r0
    47ac:	41bf      	sbcs	r7, r7
    47ae:	1a65      	subs	r5, r4, r1
    47b0:	427f      	negs	r7, r7
    47b2:	1bed      	subs	r5, r5, r7
    47b4:	4684      	mov	ip, r0
    47b6:	0228      	lsls	r0, r5, #8
    47b8:	d400      	bmi.n	47bc <__aeabi_dsub+0x51c>
    47ba:	e68d      	b.n	44d8 <__aeabi_dsub+0x238>
    47bc:	4650      	mov	r0, sl
    47be:	1a17      	subs	r7, r2, r0
    47c0:	42ba      	cmp	r2, r7
    47c2:	4192      	sbcs	r2, r2
    47c4:	1b0c      	subs	r4, r1, r4
    47c6:	4252      	negs	r2, r2
    47c8:	1aa4      	subs	r4, r4, r2
    47ca:	4698      	mov	r8, r3
    47cc:	e5ee      	b.n	43ac <__aeabi_dsub+0x10c>
    47ce:	000d      	movs	r5, r1
    47d0:	4315      	orrs	r5, r2
    47d2:	d100      	bne.n	47d6 <__aeabi_dsub+0x536>
    47d4:	e76b      	b.n	46ae <__aeabi_dsub+0x40e>
    47d6:	4650      	mov	r0, sl
    47d8:	0767      	lsls	r7, r4, #29
    47da:	08c0      	lsrs	r0, r0, #3
    47dc:	4307      	orrs	r7, r0
    47de:	2080      	movs	r0, #128	; 0x80
    47e0:	08e4      	lsrs	r4, r4, #3
    47e2:	0300      	lsls	r0, r0, #12
    47e4:	4204      	tst	r4, r0
    47e6:	d007      	beq.n	47f8 <__aeabi_dsub+0x558>
    47e8:	08cd      	lsrs	r5, r1, #3
    47ea:	4205      	tst	r5, r0
    47ec:	d104      	bne.n	47f8 <__aeabi_dsub+0x558>
    47ee:	002c      	movs	r4, r5
    47f0:	4698      	mov	r8, r3
    47f2:	08d7      	lsrs	r7, r2, #3
    47f4:	0749      	lsls	r1, r1, #29
    47f6:	430f      	orrs	r7, r1
    47f8:	0f7b      	lsrs	r3, r7, #29
    47fa:	00e4      	lsls	r4, r4, #3
    47fc:	431c      	orrs	r4, r3
    47fe:	00ff      	lsls	r7, r7, #3
    4800:	4e30      	ldr	r6, [pc, #192]	; (48c4 <__aeabi_dsub+0x624>)
    4802:	e5d3      	b.n	43ac <__aeabi_dsub+0x10c>
    4804:	4e2f      	ldr	r6, [pc, #188]	; (48c4 <__aeabi_dsub+0x624>)
    4806:	45b4      	cmp	ip, r6
    4808:	d1b4      	bne.n	4774 <__aeabi_dsub+0x4d4>
    480a:	000c      	movs	r4, r1
    480c:	0017      	movs	r7, r2
    480e:	4666      	mov	r6, ip
    4810:	e5cc      	b.n	43ac <__aeabi_dsub+0x10c>
    4812:	2700      	movs	r7, #0
    4814:	2400      	movs	r4, #0
    4816:	e5e8      	b.n	43ea <__aeabi_dsub+0x14a>
    4818:	2b00      	cmp	r3, #0
    481a:	d039      	beq.n	4890 <__aeabi_dsub+0x5f0>
    481c:	000b      	movs	r3, r1
    481e:	4313      	orrs	r3, r2
    4820:	d100      	bne.n	4824 <__aeabi_dsub+0x584>
    4822:	e744      	b.n	46ae <__aeabi_dsub+0x40e>
    4824:	08c0      	lsrs	r0, r0, #3
    4826:	0767      	lsls	r7, r4, #29
    4828:	4307      	orrs	r7, r0
    482a:	2080      	movs	r0, #128	; 0x80
    482c:	08e4      	lsrs	r4, r4, #3
    482e:	0300      	lsls	r0, r0, #12
    4830:	4204      	tst	r4, r0
    4832:	d0e1      	beq.n	47f8 <__aeabi_dsub+0x558>
    4834:	08cb      	lsrs	r3, r1, #3
    4836:	4203      	tst	r3, r0
    4838:	d1de      	bne.n	47f8 <__aeabi_dsub+0x558>
    483a:	08d7      	lsrs	r7, r2, #3
    483c:	0749      	lsls	r1, r1, #29
    483e:	430f      	orrs	r7, r1
    4840:	001c      	movs	r4, r3
    4842:	e7d9      	b.n	47f8 <__aeabi_dsub+0x558>
    4844:	2100      	movs	r1, #0
    4846:	e771      	b.n	472c <__aeabi_dsub+0x48c>
    4848:	2500      	movs	r5, #0
    484a:	2700      	movs	r7, #0
    484c:	e5e9      	b.n	4422 <__aeabi_dsub+0x182>
    484e:	002e      	movs	r6, r5
    4850:	0027      	movs	r7, r4
    4852:	3e20      	subs	r6, #32
    4854:	40f7      	lsrs	r7, r6
    4856:	2d20      	cmp	r5, #32
    4858:	d02f      	beq.n	48ba <__aeabi_dsub+0x61a>
    485a:	2640      	movs	r6, #64	; 0x40
    485c:	1b75      	subs	r5, r6, r5
    485e:	40ac      	lsls	r4, r5
    4860:	4650      	mov	r0, sl
    4862:	4320      	orrs	r0, r4
    4864:	1e44      	subs	r4, r0, #1
    4866:	41a0      	sbcs	r0, r4
    4868:	2400      	movs	r4, #0
    486a:	4338      	orrs	r0, r7
    486c:	e6dc      	b.n	4628 <__aeabi_dsub+0x388>
    486e:	2480      	movs	r4, #128	; 0x80
    4870:	2500      	movs	r5, #0
    4872:	0324      	lsls	r4, r4, #12
    4874:	4e13      	ldr	r6, [pc, #76]	; (48c4 <__aeabi_dsub+0x624>)
    4876:	2700      	movs	r7, #0
    4878:	e5d3      	b.n	4422 <__aeabi_dsub+0x182>
    487a:	4650      	mov	r0, sl
    487c:	4320      	orrs	r0, r4
    487e:	0007      	movs	r7, r0
    4880:	1e78      	subs	r0, r7, #1
    4882:	4187      	sbcs	r7, r0
    4884:	2400      	movs	r4, #0
    4886:	18bf      	adds	r7, r7, r2
    4888:	e760      	b.n	474c <__aeabi_dsub+0x4ac>
    488a:	000c      	movs	r4, r1
    488c:	0017      	movs	r7, r2
    488e:	e58d      	b.n	43ac <__aeabi_dsub+0x10c>
    4890:	000c      	movs	r4, r1
    4892:	0017      	movs	r7, r2
    4894:	4e0b      	ldr	r6, [pc, #44]	; (48c4 <__aeabi_dsub+0x624>)
    4896:	e589      	b.n	43ac <__aeabi_dsub+0x10c>
    4898:	001e      	movs	r6, r3
    489a:	0027      	movs	r7, r4
    489c:	3e20      	subs	r6, #32
    489e:	40f7      	lsrs	r7, r6
    48a0:	2b20      	cmp	r3, #32
    48a2:	d00c      	beq.n	48be <__aeabi_dsub+0x61e>
    48a4:	2640      	movs	r6, #64	; 0x40
    48a6:	1af3      	subs	r3, r6, r3
    48a8:	409c      	lsls	r4, r3
    48aa:	4650      	mov	r0, sl
    48ac:	4320      	orrs	r0, r4
    48ae:	1e44      	subs	r4, r0, #1
    48b0:	41a0      	sbcs	r0, r4
    48b2:	4307      	orrs	r7, r0
    48b4:	2400      	movs	r4, #0
    48b6:	18bf      	adds	r7, r7, r2
    48b8:	e748      	b.n	474c <__aeabi_dsub+0x4ac>
    48ba:	2400      	movs	r4, #0
    48bc:	e7d0      	b.n	4860 <__aeabi_dsub+0x5c0>
    48be:	2400      	movs	r4, #0
    48c0:	e7f3      	b.n	48aa <__aeabi_dsub+0x60a>
    48c2:	46c0      	nop			; (mov r8, r8)
    48c4:	000007ff 	.word	0x000007ff
    48c8:	ff7fffff 	.word	0xff7fffff

000048cc <__aeabi_d2iz>:
    48cc:	b530      	push	{r4, r5, lr}
    48ce:	4d13      	ldr	r5, [pc, #76]	; (491c <__aeabi_d2iz+0x50>)
    48d0:	030a      	lsls	r2, r1, #12
    48d2:	004b      	lsls	r3, r1, #1
    48d4:	0b12      	lsrs	r2, r2, #12
    48d6:	0d5b      	lsrs	r3, r3, #21
    48d8:	0fc9      	lsrs	r1, r1, #31
    48da:	2400      	movs	r4, #0
    48dc:	42ab      	cmp	r3, r5
    48de:	dd10      	ble.n	4902 <__aeabi_d2iz+0x36>
    48e0:	4c0f      	ldr	r4, [pc, #60]	; (4920 <__aeabi_d2iz+0x54>)
    48e2:	42a3      	cmp	r3, r4
    48e4:	dc0f      	bgt.n	4906 <__aeabi_d2iz+0x3a>
    48e6:	2480      	movs	r4, #128	; 0x80
    48e8:	4d0e      	ldr	r5, [pc, #56]	; (4924 <__aeabi_d2iz+0x58>)
    48ea:	0364      	lsls	r4, r4, #13
    48ec:	4322      	orrs	r2, r4
    48ee:	1aed      	subs	r5, r5, r3
    48f0:	2d1f      	cmp	r5, #31
    48f2:	dd0b      	ble.n	490c <__aeabi_d2iz+0x40>
    48f4:	480c      	ldr	r0, [pc, #48]	; (4928 <__aeabi_d2iz+0x5c>)
    48f6:	1ac3      	subs	r3, r0, r3
    48f8:	40da      	lsrs	r2, r3
    48fa:	4254      	negs	r4, r2
    48fc:	2900      	cmp	r1, #0
    48fe:	d100      	bne.n	4902 <__aeabi_d2iz+0x36>
    4900:	0014      	movs	r4, r2
    4902:	0020      	movs	r0, r4
    4904:	bd30      	pop	{r4, r5, pc}
    4906:	4b09      	ldr	r3, [pc, #36]	; (492c <__aeabi_d2iz+0x60>)
    4908:	18cc      	adds	r4, r1, r3
    490a:	e7fa      	b.n	4902 <__aeabi_d2iz+0x36>
    490c:	4c08      	ldr	r4, [pc, #32]	; (4930 <__aeabi_d2iz+0x64>)
    490e:	40e8      	lsrs	r0, r5
    4910:	46a4      	mov	ip, r4
    4912:	4463      	add	r3, ip
    4914:	409a      	lsls	r2, r3
    4916:	4302      	orrs	r2, r0
    4918:	e7ef      	b.n	48fa <__aeabi_d2iz+0x2e>
    491a:	46c0      	nop			; (mov r8, r8)
    491c:	000003fe 	.word	0x000003fe
    4920:	0000041d 	.word	0x0000041d
    4924:	00000433 	.word	0x00000433
    4928:	00000413 	.word	0x00000413
    492c:	7fffffff 	.word	0x7fffffff
    4930:	fffffbed 	.word	0xfffffbed

00004934 <__aeabi_ui2d>:
    4934:	b510      	push	{r4, lr}
    4936:	1e04      	subs	r4, r0, #0
    4938:	d028      	beq.n	498c <__aeabi_ui2d+0x58>
    493a:	f000 f833 	bl	49a4 <__clzsi2>
    493e:	4b15      	ldr	r3, [pc, #84]	; (4994 <__aeabi_ui2d+0x60>)
    4940:	4a15      	ldr	r2, [pc, #84]	; (4998 <__aeabi_ui2d+0x64>)
    4942:	1a1b      	subs	r3, r3, r0
    4944:	1ad2      	subs	r2, r2, r3
    4946:	2a1f      	cmp	r2, #31
    4948:	dd15      	ble.n	4976 <__aeabi_ui2d+0x42>
    494a:	4a14      	ldr	r2, [pc, #80]	; (499c <__aeabi_ui2d+0x68>)
    494c:	1ad2      	subs	r2, r2, r3
    494e:	4094      	lsls	r4, r2
    4950:	2200      	movs	r2, #0
    4952:	0324      	lsls	r4, r4, #12
    4954:	055b      	lsls	r3, r3, #21
    4956:	0b24      	lsrs	r4, r4, #12
    4958:	0d5b      	lsrs	r3, r3, #21
    495a:	2100      	movs	r1, #0
    495c:	0010      	movs	r0, r2
    495e:	0324      	lsls	r4, r4, #12
    4960:	0d0a      	lsrs	r2, r1, #20
    4962:	0b24      	lsrs	r4, r4, #12
    4964:	0512      	lsls	r2, r2, #20
    4966:	4322      	orrs	r2, r4
    4968:	4c0d      	ldr	r4, [pc, #52]	; (49a0 <__aeabi_ui2d+0x6c>)
    496a:	051b      	lsls	r3, r3, #20
    496c:	4022      	ands	r2, r4
    496e:	4313      	orrs	r3, r2
    4970:	005b      	lsls	r3, r3, #1
    4972:	0859      	lsrs	r1, r3, #1
    4974:	bd10      	pop	{r4, pc}
    4976:	0021      	movs	r1, r4
    4978:	4091      	lsls	r1, r2
    497a:	000a      	movs	r2, r1
    497c:	210b      	movs	r1, #11
    497e:	1a08      	subs	r0, r1, r0
    4980:	40c4      	lsrs	r4, r0
    4982:	055b      	lsls	r3, r3, #21
    4984:	0324      	lsls	r4, r4, #12
    4986:	0b24      	lsrs	r4, r4, #12
    4988:	0d5b      	lsrs	r3, r3, #21
    498a:	e7e6      	b.n	495a <__aeabi_ui2d+0x26>
    498c:	2300      	movs	r3, #0
    498e:	2400      	movs	r4, #0
    4990:	2200      	movs	r2, #0
    4992:	e7e2      	b.n	495a <__aeabi_ui2d+0x26>
    4994:	0000041e 	.word	0x0000041e
    4998:	00000433 	.word	0x00000433
    499c:	00000413 	.word	0x00000413
    49a0:	800fffff 	.word	0x800fffff

000049a4 <__clzsi2>:
    49a4:	211c      	movs	r1, #28
    49a6:	2301      	movs	r3, #1
    49a8:	041b      	lsls	r3, r3, #16
    49aa:	4298      	cmp	r0, r3
    49ac:	d301      	bcc.n	49b2 <__clzsi2+0xe>
    49ae:	0c00      	lsrs	r0, r0, #16
    49b0:	3910      	subs	r1, #16
    49b2:	0a1b      	lsrs	r3, r3, #8
    49b4:	4298      	cmp	r0, r3
    49b6:	d301      	bcc.n	49bc <__clzsi2+0x18>
    49b8:	0a00      	lsrs	r0, r0, #8
    49ba:	3908      	subs	r1, #8
    49bc:	091b      	lsrs	r3, r3, #4
    49be:	4298      	cmp	r0, r3
    49c0:	d301      	bcc.n	49c6 <__clzsi2+0x22>
    49c2:	0900      	lsrs	r0, r0, #4
    49c4:	3904      	subs	r1, #4
    49c6:	a202      	add	r2, pc, #8	; (adr r2, 49d0 <__clzsi2+0x2c>)
    49c8:	5c10      	ldrb	r0, [r2, r0]
    49ca:	1840      	adds	r0, r0, r1
    49cc:	4770      	bx	lr
    49ce:	46c0      	nop			; (mov r8, r8)
    49d0:	02020304 	.word	0x02020304
    49d4:	01010101 	.word	0x01010101
	...

000049e0 <atoi>:
    49e0:	b510      	push	{r4, lr}
    49e2:	220a      	movs	r2, #10
    49e4:	2100      	movs	r1, #0
    49e6:	f000 fae9 	bl	4fbc <strtol>
    49ea:	bd10      	pop	{r4, pc}

000049ec <__libc_init_array>:
    49ec:	b570      	push	{r4, r5, r6, lr}
    49ee:	2600      	movs	r6, #0
    49f0:	4d0c      	ldr	r5, [pc, #48]	; (4a24 <__libc_init_array+0x38>)
    49f2:	4c0d      	ldr	r4, [pc, #52]	; (4a28 <__libc_init_array+0x3c>)
    49f4:	1b64      	subs	r4, r4, r5
    49f6:	10a4      	asrs	r4, r4, #2
    49f8:	42a6      	cmp	r6, r4
    49fa:	d109      	bne.n	4a10 <__libc_init_array+0x24>
    49fc:	2600      	movs	r6, #0
    49fe:	f001 fe77 	bl	66f0 <_init>
    4a02:	4d0a      	ldr	r5, [pc, #40]	; (4a2c <__libc_init_array+0x40>)
    4a04:	4c0a      	ldr	r4, [pc, #40]	; (4a30 <__libc_init_array+0x44>)
    4a06:	1b64      	subs	r4, r4, r5
    4a08:	10a4      	asrs	r4, r4, #2
    4a0a:	42a6      	cmp	r6, r4
    4a0c:	d105      	bne.n	4a1a <__libc_init_array+0x2e>
    4a0e:	bd70      	pop	{r4, r5, r6, pc}
    4a10:	00b3      	lsls	r3, r6, #2
    4a12:	58eb      	ldr	r3, [r5, r3]
    4a14:	4798      	blx	r3
    4a16:	3601      	adds	r6, #1
    4a18:	e7ee      	b.n	49f8 <__libc_init_array+0xc>
    4a1a:	00b3      	lsls	r3, r6, #2
    4a1c:	58eb      	ldr	r3, [r5, r3]
    4a1e:	4798      	blx	r3
    4a20:	3601      	adds	r6, #1
    4a22:	e7f2      	b.n	4a0a <__libc_init_array+0x1e>
    4a24:	000066fc 	.word	0x000066fc
    4a28:	000066fc 	.word	0x000066fc
    4a2c:	000066fc 	.word	0x000066fc
    4a30:	00006700 	.word	0x00006700

00004a34 <__locale_ctype_ptr_l>:
    4a34:	30ec      	adds	r0, #236	; 0xec
    4a36:	6800      	ldr	r0, [r0, #0]
    4a38:	4770      	bx	lr
	...

00004a3c <__locale_ctype_ptr>:
    4a3c:	4b04      	ldr	r3, [pc, #16]	; (4a50 <__locale_ctype_ptr+0x14>)
    4a3e:	681b      	ldr	r3, [r3, #0]
    4a40:	6a1b      	ldr	r3, [r3, #32]
    4a42:	2b00      	cmp	r3, #0
    4a44:	d100      	bne.n	4a48 <__locale_ctype_ptr+0xc>
    4a46:	4b03      	ldr	r3, [pc, #12]	; (4a54 <__locale_ctype_ptr+0x18>)
    4a48:	33ec      	adds	r3, #236	; 0xec
    4a4a:	6818      	ldr	r0, [r3, #0]
    4a4c:	4770      	bx	lr
    4a4e:	46c0      	nop			; (mov r8, r8)
    4a50:	2000002c 	.word	0x2000002c
    4a54:	20000090 	.word	0x20000090

00004a58 <malloc>:
    4a58:	b510      	push	{r4, lr}
    4a5a:	4b03      	ldr	r3, [pc, #12]	; (4a68 <malloc+0x10>)
    4a5c:	0001      	movs	r1, r0
    4a5e:	6818      	ldr	r0, [r3, #0]
    4a60:	f000 f872 	bl	4b48 <_malloc_r>
    4a64:	bd10      	pop	{r4, pc}
    4a66:	46c0      	nop			; (mov r8, r8)
    4a68:	2000002c 	.word	0x2000002c

00004a6c <__ascii_mbtowc>:
    4a6c:	b082      	sub	sp, #8
    4a6e:	2900      	cmp	r1, #0
    4a70:	d100      	bne.n	4a74 <__ascii_mbtowc+0x8>
    4a72:	a901      	add	r1, sp, #4
    4a74:	1e10      	subs	r0, r2, #0
    4a76:	d006      	beq.n	4a86 <__ascii_mbtowc+0x1a>
    4a78:	2b00      	cmp	r3, #0
    4a7a:	d006      	beq.n	4a8a <__ascii_mbtowc+0x1e>
    4a7c:	7813      	ldrb	r3, [r2, #0]
    4a7e:	600b      	str	r3, [r1, #0]
    4a80:	7810      	ldrb	r0, [r2, #0]
    4a82:	1e43      	subs	r3, r0, #1
    4a84:	4198      	sbcs	r0, r3
    4a86:	b002      	add	sp, #8
    4a88:	4770      	bx	lr
    4a8a:	2002      	movs	r0, #2
    4a8c:	4240      	negs	r0, r0
    4a8e:	e7fa      	b.n	4a86 <__ascii_mbtowc+0x1a>

00004a90 <memcpy>:
    4a90:	2300      	movs	r3, #0
    4a92:	b510      	push	{r4, lr}
    4a94:	429a      	cmp	r2, r3
    4a96:	d100      	bne.n	4a9a <memcpy+0xa>
    4a98:	bd10      	pop	{r4, pc}
    4a9a:	5ccc      	ldrb	r4, [r1, r3]
    4a9c:	54c4      	strb	r4, [r0, r3]
    4a9e:	3301      	adds	r3, #1
    4aa0:	e7f8      	b.n	4a94 <memcpy+0x4>

00004aa2 <memset>:
    4aa2:	0003      	movs	r3, r0
    4aa4:	1882      	adds	r2, r0, r2
    4aa6:	4293      	cmp	r3, r2
    4aa8:	d100      	bne.n	4aac <memset+0xa>
    4aaa:	4770      	bx	lr
    4aac:	7019      	strb	r1, [r3, #0]
    4aae:	3301      	adds	r3, #1
    4ab0:	e7f9      	b.n	4aa6 <memset+0x4>
	...

00004ab4 <_free_r>:
    4ab4:	b570      	push	{r4, r5, r6, lr}
    4ab6:	0005      	movs	r5, r0
    4ab8:	2900      	cmp	r1, #0
    4aba:	d010      	beq.n	4ade <_free_r+0x2a>
    4abc:	1f0c      	subs	r4, r1, #4
    4abe:	6823      	ldr	r3, [r4, #0]
    4ac0:	2b00      	cmp	r3, #0
    4ac2:	da00      	bge.n	4ac6 <_free_r+0x12>
    4ac4:	18e4      	adds	r4, r4, r3
    4ac6:	0028      	movs	r0, r5
    4ac8:	f000 fd5e 	bl	5588 <__malloc_lock>
    4acc:	4a1d      	ldr	r2, [pc, #116]	; (4b44 <_free_r+0x90>)
    4ace:	6813      	ldr	r3, [r2, #0]
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	d105      	bne.n	4ae0 <_free_r+0x2c>
    4ad4:	6063      	str	r3, [r4, #4]
    4ad6:	6014      	str	r4, [r2, #0]
    4ad8:	0028      	movs	r0, r5
    4ada:	f000 fd56 	bl	558a <__malloc_unlock>
    4ade:	bd70      	pop	{r4, r5, r6, pc}
    4ae0:	42a3      	cmp	r3, r4
    4ae2:	d909      	bls.n	4af8 <_free_r+0x44>
    4ae4:	6821      	ldr	r1, [r4, #0]
    4ae6:	1860      	adds	r0, r4, r1
    4ae8:	4283      	cmp	r3, r0
    4aea:	d1f3      	bne.n	4ad4 <_free_r+0x20>
    4aec:	6818      	ldr	r0, [r3, #0]
    4aee:	685b      	ldr	r3, [r3, #4]
    4af0:	1841      	adds	r1, r0, r1
    4af2:	6021      	str	r1, [r4, #0]
    4af4:	e7ee      	b.n	4ad4 <_free_r+0x20>
    4af6:	0013      	movs	r3, r2
    4af8:	685a      	ldr	r2, [r3, #4]
    4afa:	2a00      	cmp	r2, #0
    4afc:	d001      	beq.n	4b02 <_free_r+0x4e>
    4afe:	42a2      	cmp	r2, r4
    4b00:	d9f9      	bls.n	4af6 <_free_r+0x42>
    4b02:	6819      	ldr	r1, [r3, #0]
    4b04:	1858      	adds	r0, r3, r1
    4b06:	42a0      	cmp	r0, r4
    4b08:	d10b      	bne.n	4b22 <_free_r+0x6e>
    4b0a:	6820      	ldr	r0, [r4, #0]
    4b0c:	1809      	adds	r1, r1, r0
    4b0e:	1858      	adds	r0, r3, r1
    4b10:	6019      	str	r1, [r3, #0]
    4b12:	4282      	cmp	r2, r0
    4b14:	d1e0      	bne.n	4ad8 <_free_r+0x24>
    4b16:	6810      	ldr	r0, [r2, #0]
    4b18:	6852      	ldr	r2, [r2, #4]
    4b1a:	1841      	adds	r1, r0, r1
    4b1c:	6019      	str	r1, [r3, #0]
    4b1e:	605a      	str	r2, [r3, #4]
    4b20:	e7da      	b.n	4ad8 <_free_r+0x24>
    4b22:	42a0      	cmp	r0, r4
    4b24:	d902      	bls.n	4b2c <_free_r+0x78>
    4b26:	230c      	movs	r3, #12
    4b28:	602b      	str	r3, [r5, #0]
    4b2a:	e7d5      	b.n	4ad8 <_free_r+0x24>
    4b2c:	6821      	ldr	r1, [r4, #0]
    4b2e:	1860      	adds	r0, r4, r1
    4b30:	4282      	cmp	r2, r0
    4b32:	d103      	bne.n	4b3c <_free_r+0x88>
    4b34:	6810      	ldr	r0, [r2, #0]
    4b36:	6852      	ldr	r2, [r2, #4]
    4b38:	1841      	adds	r1, r0, r1
    4b3a:	6021      	str	r1, [r4, #0]
    4b3c:	6062      	str	r2, [r4, #4]
    4b3e:	605c      	str	r4, [r3, #4]
    4b40:	e7ca      	b.n	4ad8 <_free_r+0x24>
    4b42:	46c0      	nop			; (mov r8, r8)
    4b44:	20000260 	.word	0x20000260

00004b48 <_malloc_r>:
    4b48:	2303      	movs	r3, #3
    4b4a:	b570      	push	{r4, r5, r6, lr}
    4b4c:	1ccd      	adds	r5, r1, #3
    4b4e:	439d      	bics	r5, r3
    4b50:	3508      	adds	r5, #8
    4b52:	0006      	movs	r6, r0
    4b54:	2d0c      	cmp	r5, #12
    4b56:	d21e      	bcs.n	4b96 <_malloc_r+0x4e>
    4b58:	250c      	movs	r5, #12
    4b5a:	42a9      	cmp	r1, r5
    4b5c:	d81d      	bhi.n	4b9a <_malloc_r+0x52>
    4b5e:	0030      	movs	r0, r6
    4b60:	f000 fd12 	bl	5588 <__malloc_lock>
    4b64:	4a25      	ldr	r2, [pc, #148]	; (4bfc <_malloc_r+0xb4>)
    4b66:	6814      	ldr	r4, [r2, #0]
    4b68:	0021      	movs	r1, r4
    4b6a:	2900      	cmp	r1, #0
    4b6c:	d119      	bne.n	4ba2 <_malloc_r+0x5a>
    4b6e:	4c24      	ldr	r4, [pc, #144]	; (4c00 <_malloc_r+0xb8>)
    4b70:	6823      	ldr	r3, [r4, #0]
    4b72:	2b00      	cmp	r3, #0
    4b74:	d103      	bne.n	4b7e <_malloc_r+0x36>
    4b76:	0030      	movs	r0, r6
    4b78:	f000 f8c8 	bl	4d0c <_sbrk_r>
    4b7c:	6020      	str	r0, [r4, #0]
    4b7e:	0029      	movs	r1, r5
    4b80:	0030      	movs	r0, r6
    4b82:	f000 f8c3 	bl	4d0c <_sbrk_r>
    4b86:	1c43      	adds	r3, r0, #1
    4b88:	d12c      	bne.n	4be4 <_malloc_r+0x9c>
    4b8a:	230c      	movs	r3, #12
    4b8c:	0030      	movs	r0, r6
    4b8e:	6033      	str	r3, [r6, #0]
    4b90:	f000 fcfb 	bl	558a <__malloc_unlock>
    4b94:	e003      	b.n	4b9e <_malloc_r+0x56>
    4b96:	2d00      	cmp	r5, #0
    4b98:	dadf      	bge.n	4b5a <_malloc_r+0x12>
    4b9a:	230c      	movs	r3, #12
    4b9c:	6033      	str	r3, [r6, #0]
    4b9e:	2000      	movs	r0, #0
    4ba0:	bd70      	pop	{r4, r5, r6, pc}
    4ba2:	680b      	ldr	r3, [r1, #0]
    4ba4:	1b5b      	subs	r3, r3, r5
    4ba6:	d41a      	bmi.n	4bde <_malloc_r+0x96>
    4ba8:	2b0b      	cmp	r3, #11
    4baa:	d903      	bls.n	4bb4 <_malloc_r+0x6c>
    4bac:	600b      	str	r3, [r1, #0]
    4bae:	18cc      	adds	r4, r1, r3
    4bb0:	6025      	str	r5, [r4, #0]
    4bb2:	e003      	b.n	4bbc <_malloc_r+0x74>
    4bb4:	428c      	cmp	r4, r1
    4bb6:	d10e      	bne.n	4bd6 <_malloc_r+0x8e>
    4bb8:	6863      	ldr	r3, [r4, #4]
    4bba:	6013      	str	r3, [r2, #0]
    4bbc:	0030      	movs	r0, r6
    4bbe:	f000 fce4 	bl	558a <__malloc_unlock>
    4bc2:	0020      	movs	r0, r4
    4bc4:	2207      	movs	r2, #7
    4bc6:	300b      	adds	r0, #11
    4bc8:	1d23      	adds	r3, r4, #4
    4bca:	4390      	bics	r0, r2
    4bcc:	1ac3      	subs	r3, r0, r3
    4bce:	d0e7      	beq.n	4ba0 <_malloc_r+0x58>
    4bd0:	425a      	negs	r2, r3
    4bd2:	50e2      	str	r2, [r4, r3]
    4bd4:	e7e4      	b.n	4ba0 <_malloc_r+0x58>
    4bd6:	684b      	ldr	r3, [r1, #4]
    4bd8:	6063      	str	r3, [r4, #4]
    4bda:	000c      	movs	r4, r1
    4bdc:	e7ee      	b.n	4bbc <_malloc_r+0x74>
    4bde:	000c      	movs	r4, r1
    4be0:	6849      	ldr	r1, [r1, #4]
    4be2:	e7c2      	b.n	4b6a <_malloc_r+0x22>
    4be4:	2303      	movs	r3, #3
    4be6:	1cc4      	adds	r4, r0, #3
    4be8:	439c      	bics	r4, r3
    4bea:	42a0      	cmp	r0, r4
    4bec:	d0e0      	beq.n	4bb0 <_malloc_r+0x68>
    4bee:	1a21      	subs	r1, r4, r0
    4bf0:	0030      	movs	r0, r6
    4bf2:	f000 f88b 	bl	4d0c <_sbrk_r>
    4bf6:	1c43      	adds	r3, r0, #1
    4bf8:	d1da      	bne.n	4bb0 <_malloc_r+0x68>
    4bfa:	e7c6      	b.n	4b8a <_malloc_r+0x42>
    4bfc:	20000260 	.word	0x20000260
    4c00:	20000264 	.word	0x20000264

00004c04 <iprintf>:
    4c04:	b40f      	push	{r0, r1, r2, r3}
    4c06:	4b0b      	ldr	r3, [pc, #44]	; (4c34 <iprintf+0x30>)
    4c08:	b513      	push	{r0, r1, r4, lr}
    4c0a:	681c      	ldr	r4, [r3, #0]
    4c0c:	2c00      	cmp	r4, #0
    4c0e:	d005      	beq.n	4c1c <iprintf+0x18>
    4c10:	69a3      	ldr	r3, [r4, #24]
    4c12:	2b00      	cmp	r3, #0
    4c14:	d102      	bne.n	4c1c <iprintf+0x18>
    4c16:	0020      	movs	r0, r4
    4c18:	f000 fbb4 	bl	5384 <__sinit>
    4c1c:	ab05      	add	r3, sp, #20
    4c1e:	9a04      	ldr	r2, [sp, #16]
    4c20:	68a1      	ldr	r1, [r4, #8]
    4c22:	0020      	movs	r0, r4
    4c24:	9301      	str	r3, [sp, #4]
    4c26:	f000 fcd9 	bl	55dc <_vfiprintf_r>
    4c2a:	bc16      	pop	{r1, r2, r4}
    4c2c:	bc08      	pop	{r3}
    4c2e:	b004      	add	sp, #16
    4c30:	4718      	bx	r3
    4c32:	46c0      	nop			; (mov r8, r8)
    4c34:	2000002c 	.word	0x2000002c

00004c38 <_puts_r>:
    4c38:	b570      	push	{r4, r5, r6, lr}
    4c3a:	0005      	movs	r5, r0
    4c3c:	000e      	movs	r6, r1
    4c3e:	2800      	cmp	r0, #0
    4c40:	d004      	beq.n	4c4c <_puts_r+0x14>
    4c42:	6983      	ldr	r3, [r0, #24]
    4c44:	2b00      	cmp	r3, #0
    4c46:	d101      	bne.n	4c4c <_puts_r+0x14>
    4c48:	f000 fb9c 	bl	5384 <__sinit>
    4c4c:	69ab      	ldr	r3, [r5, #24]
    4c4e:	68ac      	ldr	r4, [r5, #8]
    4c50:	2b00      	cmp	r3, #0
    4c52:	d102      	bne.n	4c5a <_puts_r+0x22>
    4c54:	0028      	movs	r0, r5
    4c56:	f000 fb95 	bl	5384 <__sinit>
    4c5a:	4b24      	ldr	r3, [pc, #144]	; (4cec <_puts_r+0xb4>)
    4c5c:	429c      	cmp	r4, r3
    4c5e:	d10f      	bne.n	4c80 <_puts_r+0x48>
    4c60:	686c      	ldr	r4, [r5, #4]
    4c62:	89a3      	ldrh	r3, [r4, #12]
    4c64:	071b      	lsls	r3, r3, #28
    4c66:	d502      	bpl.n	4c6e <_puts_r+0x36>
    4c68:	6923      	ldr	r3, [r4, #16]
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	d120      	bne.n	4cb0 <_puts_r+0x78>
    4c6e:	0021      	movs	r1, r4
    4c70:	0028      	movs	r0, r5
    4c72:	f000 fa19 	bl	50a8 <__swsetup_r>
    4c76:	2800      	cmp	r0, #0
    4c78:	d01a      	beq.n	4cb0 <_puts_r+0x78>
    4c7a:	2001      	movs	r0, #1
    4c7c:	4240      	negs	r0, r0
    4c7e:	bd70      	pop	{r4, r5, r6, pc}
    4c80:	4b1b      	ldr	r3, [pc, #108]	; (4cf0 <_puts_r+0xb8>)
    4c82:	429c      	cmp	r4, r3
    4c84:	d101      	bne.n	4c8a <_puts_r+0x52>
    4c86:	68ac      	ldr	r4, [r5, #8]
    4c88:	e7eb      	b.n	4c62 <_puts_r+0x2a>
    4c8a:	4b1a      	ldr	r3, [pc, #104]	; (4cf4 <_puts_r+0xbc>)
    4c8c:	429c      	cmp	r4, r3
    4c8e:	d1e8      	bne.n	4c62 <_puts_r+0x2a>
    4c90:	68ec      	ldr	r4, [r5, #12]
    4c92:	e7e6      	b.n	4c62 <_puts_r+0x2a>
    4c94:	3b01      	subs	r3, #1
    4c96:	3601      	adds	r6, #1
    4c98:	60a3      	str	r3, [r4, #8]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	da04      	bge.n	4ca8 <_puts_r+0x70>
    4c9e:	69a2      	ldr	r2, [r4, #24]
    4ca0:	4293      	cmp	r3, r2
    4ca2:	db16      	blt.n	4cd2 <_puts_r+0x9a>
    4ca4:	290a      	cmp	r1, #10
    4ca6:	d014      	beq.n	4cd2 <_puts_r+0x9a>
    4ca8:	6823      	ldr	r3, [r4, #0]
    4caa:	1c5a      	adds	r2, r3, #1
    4cac:	6022      	str	r2, [r4, #0]
    4cae:	7019      	strb	r1, [r3, #0]
    4cb0:	7831      	ldrb	r1, [r6, #0]
    4cb2:	68a3      	ldr	r3, [r4, #8]
    4cb4:	2900      	cmp	r1, #0
    4cb6:	d1ed      	bne.n	4c94 <_puts_r+0x5c>
    4cb8:	3b01      	subs	r3, #1
    4cba:	60a3      	str	r3, [r4, #8]
    4cbc:	2b00      	cmp	r3, #0
    4cbe:	da0f      	bge.n	4ce0 <_puts_r+0xa8>
    4cc0:	0022      	movs	r2, r4
    4cc2:	310a      	adds	r1, #10
    4cc4:	0028      	movs	r0, r5
    4cc6:	f000 f98d 	bl	4fe4 <__swbuf_r>
    4cca:	1c43      	adds	r3, r0, #1
    4ccc:	d0d5      	beq.n	4c7a <_puts_r+0x42>
    4cce:	200a      	movs	r0, #10
    4cd0:	e7d5      	b.n	4c7e <_puts_r+0x46>
    4cd2:	0022      	movs	r2, r4
    4cd4:	0028      	movs	r0, r5
    4cd6:	f000 f985 	bl	4fe4 <__swbuf_r>
    4cda:	1c43      	adds	r3, r0, #1
    4cdc:	d1e8      	bne.n	4cb0 <_puts_r+0x78>
    4cde:	e7cc      	b.n	4c7a <_puts_r+0x42>
    4ce0:	200a      	movs	r0, #10
    4ce2:	6823      	ldr	r3, [r4, #0]
    4ce4:	1c5a      	adds	r2, r3, #1
    4ce6:	6022      	str	r2, [r4, #0]
    4ce8:	7018      	strb	r0, [r3, #0]
    4cea:	e7c8      	b.n	4c7e <_puts_r+0x46>
    4cec:	0000667c 	.word	0x0000667c
    4cf0:	0000669c 	.word	0x0000669c
    4cf4:	0000665c 	.word	0x0000665c

00004cf8 <puts>:
    4cf8:	b510      	push	{r4, lr}
    4cfa:	4b03      	ldr	r3, [pc, #12]	; (4d08 <puts+0x10>)
    4cfc:	0001      	movs	r1, r0
    4cfe:	6818      	ldr	r0, [r3, #0]
    4d00:	f7ff ff9a 	bl	4c38 <_puts_r>
    4d04:	bd10      	pop	{r4, pc}
    4d06:	46c0      	nop			; (mov r8, r8)
    4d08:	2000002c 	.word	0x2000002c

00004d0c <_sbrk_r>:
    4d0c:	2300      	movs	r3, #0
    4d0e:	b570      	push	{r4, r5, r6, lr}
    4d10:	4c06      	ldr	r4, [pc, #24]	; (4d2c <_sbrk_r+0x20>)
    4d12:	0005      	movs	r5, r0
    4d14:	0008      	movs	r0, r1
    4d16:	6023      	str	r3, [r4, #0]
    4d18:	f7fd fbcc 	bl	24b4 <_sbrk>
    4d1c:	1c43      	adds	r3, r0, #1
    4d1e:	d103      	bne.n	4d28 <_sbrk_r+0x1c>
    4d20:	6823      	ldr	r3, [r4, #0]
    4d22:	2b00      	cmp	r3, #0
    4d24:	d000      	beq.n	4d28 <_sbrk_r+0x1c>
    4d26:	602b      	str	r3, [r5, #0]
    4d28:	bd70      	pop	{r4, r5, r6, pc}
    4d2a:	46c0      	nop			; (mov r8, r8)
    4d2c:	2000036c 	.word	0x2000036c

00004d30 <setbuf>:
    4d30:	424a      	negs	r2, r1
    4d32:	414a      	adcs	r2, r1
    4d34:	2380      	movs	r3, #128	; 0x80
    4d36:	b510      	push	{r4, lr}
    4d38:	0052      	lsls	r2, r2, #1
    4d3a:	00db      	lsls	r3, r3, #3
    4d3c:	f000 f802 	bl	4d44 <setvbuf>
    4d40:	bd10      	pop	{r4, pc}
	...

00004d44 <setvbuf>:
    4d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d46:	001d      	movs	r5, r3
    4d48:	4b4f      	ldr	r3, [pc, #316]	; (4e88 <setvbuf+0x144>)
    4d4a:	b085      	sub	sp, #20
    4d4c:	681e      	ldr	r6, [r3, #0]
    4d4e:	0004      	movs	r4, r0
    4d50:	000f      	movs	r7, r1
    4d52:	9200      	str	r2, [sp, #0]
    4d54:	2e00      	cmp	r6, #0
    4d56:	d005      	beq.n	4d64 <setvbuf+0x20>
    4d58:	69b3      	ldr	r3, [r6, #24]
    4d5a:	2b00      	cmp	r3, #0
    4d5c:	d102      	bne.n	4d64 <setvbuf+0x20>
    4d5e:	0030      	movs	r0, r6
    4d60:	f000 fb10 	bl	5384 <__sinit>
    4d64:	4b49      	ldr	r3, [pc, #292]	; (4e8c <setvbuf+0x148>)
    4d66:	429c      	cmp	r4, r3
    4d68:	d150      	bne.n	4e0c <setvbuf+0xc8>
    4d6a:	6874      	ldr	r4, [r6, #4]
    4d6c:	9b00      	ldr	r3, [sp, #0]
    4d6e:	2b02      	cmp	r3, #2
    4d70:	d005      	beq.n	4d7e <setvbuf+0x3a>
    4d72:	2b01      	cmp	r3, #1
    4d74:	d900      	bls.n	4d78 <setvbuf+0x34>
    4d76:	e084      	b.n	4e82 <setvbuf+0x13e>
    4d78:	2d00      	cmp	r5, #0
    4d7a:	da00      	bge.n	4d7e <setvbuf+0x3a>
    4d7c:	e081      	b.n	4e82 <setvbuf+0x13e>
    4d7e:	0021      	movs	r1, r4
    4d80:	0030      	movs	r0, r6
    4d82:	f000 fa91 	bl	52a8 <_fflush_r>
    4d86:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4d88:	2900      	cmp	r1, #0
    4d8a:	d008      	beq.n	4d9e <setvbuf+0x5a>
    4d8c:	0023      	movs	r3, r4
    4d8e:	3344      	adds	r3, #68	; 0x44
    4d90:	4299      	cmp	r1, r3
    4d92:	d002      	beq.n	4d9a <setvbuf+0x56>
    4d94:	0030      	movs	r0, r6
    4d96:	f7ff fe8d 	bl	4ab4 <_free_r>
    4d9a:	2300      	movs	r3, #0
    4d9c:	6363      	str	r3, [r4, #52]	; 0x34
    4d9e:	2300      	movs	r3, #0
    4da0:	61a3      	str	r3, [r4, #24]
    4da2:	6063      	str	r3, [r4, #4]
    4da4:	89a3      	ldrh	r3, [r4, #12]
    4da6:	061b      	lsls	r3, r3, #24
    4da8:	d503      	bpl.n	4db2 <setvbuf+0x6e>
    4daa:	6921      	ldr	r1, [r4, #16]
    4dac:	0030      	movs	r0, r6
    4dae:	f7ff fe81 	bl	4ab4 <_free_r>
    4db2:	89a3      	ldrh	r3, [r4, #12]
    4db4:	4a36      	ldr	r2, [pc, #216]	; (4e90 <setvbuf+0x14c>)
    4db6:	4013      	ands	r3, r2
    4db8:	81a3      	strh	r3, [r4, #12]
    4dba:	9b00      	ldr	r3, [sp, #0]
    4dbc:	2b02      	cmp	r3, #2
    4dbe:	d05a      	beq.n	4e76 <setvbuf+0x132>
    4dc0:	ab03      	add	r3, sp, #12
    4dc2:	aa02      	add	r2, sp, #8
    4dc4:	0021      	movs	r1, r4
    4dc6:	0030      	movs	r0, r6
    4dc8:	f000 fb72 	bl	54b0 <__swhatbuf_r>
    4dcc:	89a3      	ldrh	r3, [r4, #12]
    4dce:	4318      	orrs	r0, r3
    4dd0:	81a0      	strh	r0, [r4, #12]
    4dd2:	2d00      	cmp	r5, #0
    4dd4:	d124      	bne.n	4e20 <setvbuf+0xdc>
    4dd6:	9d02      	ldr	r5, [sp, #8]
    4dd8:	0028      	movs	r0, r5
    4dda:	f7ff fe3d 	bl	4a58 <malloc>
    4dde:	9501      	str	r5, [sp, #4]
    4de0:	1e07      	subs	r7, r0, #0
    4de2:	d142      	bne.n	4e6a <setvbuf+0x126>
    4de4:	9b02      	ldr	r3, [sp, #8]
    4de6:	9301      	str	r3, [sp, #4]
    4de8:	42ab      	cmp	r3, r5
    4dea:	d139      	bne.n	4e60 <setvbuf+0x11c>
    4dec:	2001      	movs	r0, #1
    4dee:	4240      	negs	r0, r0
    4df0:	2302      	movs	r3, #2
    4df2:	89a2      	ldrh	r2, [r4, #12]
    4df4:	4313      	orrs	r3, r2
    4df6:	81a3      	strh	r3, [r4, #12]
    4df8:	2300      	movs	r3, #0
    4dfa:	60a3      	str	r3, [r4, #8]
    4dfc:	0023      	movs	r3, r4
    4dfe:	3347      	adds	r3, #71	; 0x47
    4e00:	6023      	str	r3, [r4, #0]
    4e02:	6123      	str	r3, [r4, #16]
    4e04:	2301      	movs	r3, #1
    4e06:	6163      	str	r3, [r4, #20]
    4e08:	b005      	add	sp, #20
    4e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e0c:	4b21      	ldr	r3, [pc, #132]	; (4e94 <setvbuf+0x150>)
    4e0e:	429c      	cmp	r4, r3
    4e10:	d101      	bne.n	4e16 <setvbuf+0xd2>
    4e12:	68b4      	ldr	r4, [r6, #8]
    4e14:	e7aa      	b.n	4d6c <setvbuf+0x28>
    4e16:	4b20      	ldr	r3, [pc, #128]	; (4e98 <setvbuf+0x154>)
    4e18:	429c      	cmp	r4, r3
    4e1a:	d1a7      	bne.n	4d6c <setvbuf+0x28>
    4e1c:	68f4      	ldr	r4, [r6, #12]
    4e1e:	e7a5      	b.n	4d6c <setvbuf+0x28>
    4e20:	2f00      	cmp	r7, #0
    4e22:	d0d9      	beq.n	4dd8 <setvbuf+0x94>
    4e24:	69b3      	ldr	r3, [r6, #24]
    4e26:	2b00      	cmp	r3, #0
    4e28:	d102      	bne.n	4e30 <setvbuf+0xec>
    4e2a:	0030      	movs	r0, r6
    4e2c:	f000 faaa 	bl	5384 <__sinit>
    4e30:	9b00      	ldr	r3, [sp, #0]
    4e32:	2b01      	cmp	r3, #1
    4e34:	d103      	bne.n	4e3e <setvbuf+0xfa>
    4e36:	89a3      	ldrh	r3, [r4, #12]
    4e38:	9a00      	ldr	r2, [sp, #0]
    4e3a:	431a      	orrs	r2, r3
    4e3c:	81a2      	strh	r2, [r4, #12]
    4e3e:	2008      	movs	r0, #8
    4e40:	89a3      	ldrh	r3, [r4, #12]
    4e42:	6027      	str	r7, [r4, #0]
    4e44:	6127      	str	r7, [r4, #16]
    4e46:	6165      	str	r5, [r4, #20]
    4e48:	4018      	ands	r0, r3
    4e4a:	d018      	beq.n	4e7e <setvbuf+0x13a>
    4e4c:	2001      	movs	r0, #1
    4e4e:	4018      	ands	r0, r3
    4e50:	2300      	movs	r3, #0
    4e52:	4298      	cmp	r0, r3
    4e54:	d011      	beq.n	4e7a <setvbuf+0x136>
    4e56:	426d      	negs	r5, r5
    4e58:	60a3      	str	r3, [r4, #8]
    4e5a:	61a5      	str	r5, [r4, #24]
    4e5c:	0018      	movs	r0, r3
    4e5e:	e7d3      	b.n	4e08 <setvbuf+0xc4>
    4e60:	9801      	ldr	r0, [sp, #4]
    4e62:	f7ff fdf9 	bl	4a58 <malloc>
    4e66:	1e07      	subs	r7, r0, #0
    4e68:	d0c0      	beq.n	4dec <setvbuf+0xa8>
    4e6a:	2380      	movs	r3, #128	; 0x80
    4e6c:	89a2      	ldrh	r2, [r4, #12]
    4e6e:	9d01      	ldr	r5, [sp, #4]
    4e70:	4313      	orrs	r3, r2
    4e72:	81a3      	strh	r3, [r4, #12]
    4e74:	e7d6      	b.n	4e24 <setvbuf+0xe0>
    4e76:	2000      	movs	r0, #0
    4e78:	e7ba      	b.n	4df0 <setvbuf+0xac>
    4e7a:	60a5      	str	r5, [r4, #8]
    4e7c:	e7c4      	b.n	4e08 <setvbuf+0xc4>
    4e7e:	60a0      	str	r0, [r4, #8]
    4e80:	e7c2      	b.n	4e08 <setvbuf+0xc4>
    4e82:	2001      	movs	r0, #1
    4e84:	4240      	negs	r0, r0
    4e86:	e7bf      	b.n	4e08 <setvbuf+0xc4>
    4e88:	2000002c 	.word	0x2000002c
    4e8c:	0000667c 	.word	0x0000667c
    4e90:	fffff35c 	.word	0xfffff35c
    4e94:	0000669c 	.word	0x0000669c
    4e98:	0000665c 	.word	0x0000665c

00004e9c <strcmp>:
    4e9c:	7802      	ldrb	r2, [r0, #0]
    4e9e:	780b      	ldrb	r3, [r1, #0]
    4ea0:	2a00      	cmp	r2, #0
    4ea2:	d003      	beq.n	4eac <strcmp+0x10>
    4ea4:	3001      	adds	r0, #1
    4ea6:	3101      	adds	r1, #1
    4ea8:	429a      	cmp	r2, r3
    4eaa:	d0f7      	beq.n	4e9c <strcmp>
    4eac:	1ad0      	subs	r0, r2, r3
    4eae:	4770      	bx	lr

00004eb0 <_strtol_l.isra.0>:
    4eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eb2:	001f      	movs	r7, r3
    4eb4:	000e      	movs	r6, r1
    4eb6:	b087      	sub	sp, #28
    4eb8:	9005      	str	r0, [sp, #20]
    4eba:	9103      	str	r1, [sp, #12]
    4ebc:	9202      	str	r2, [sp, #8]
    4ebe:	980c      	ldr	r0, [sp, #48]	; 0x30
    4ec0:	7834      	ldrb	r4, [r6, #0]
    4ec2:	f7ff fdb7 	bl	4a34 <__locale_ctype_ptr_l>
    4ec6:	2208      	movs	r2, #8
    4ec8:	1900      	adds	r0, r0, r4
    4eca:	7843      	ldrb	r3, [r0, #1]
    4ecc:	1c75      	adds	r5, r6, #1
    4ece:	4013      	ands	r3, r2
    4ed0:	d10c      	bne.n	4eec <_strtol_l.isra.0+0x3c>
    4ed2:	2c2d      	cmp	r4, #45	; 0x2d
    4ed4:	d10c      	bne.n	4ef0 <_strtol_l.isra.0+0x40>
    4ed6:	3301      	adds	r3, #1
    4ed8:	782c      	ldrb	r4, [r5, #0]
    4eda:	9301      	str	r3, [sp, #4]
    4edc:	1cb5      	adds	r5, r6, #2
    4ede:	2f00      	cmp	r7, #0
    4ee0:	d00c      	beq.n	4efc <_strtol_l.isra.0+0x4c>
    4ee2:	2f10      	cmp	r7, #16
    4ee4:	d114      	bne.n	4f10 <_strtol_l.isra.0+0x60>
    4ee6:	2c30      	cmp	r4, #48	; 0x30
    4ee8:	d00a      	beq.n	4f00 <_strtol_l.isra.0+0x50>
    4eea:	e011      	b.n	4f10 <_strtol_l.isra.0+0x60>
    4eec:	002e      	movs	r6, r5
    4eee:	e7e6      	b.n	4ebe <_strtol_l.isra.0+0xe>
    4ef0:	9301      	str	r3, [sp, #4]
    4ef2:	2c2b      	cmp	r4, #43	; 0x2b
    4ef4:	d1f3      	bne.n	4ede <_strtol_l.isra.0+0x2e>
    4ef6:	782c      	ldrb	r4, [r5, #0]
    4ef8:	1cb5      	adds	r5, r6, #2
    4efa:	e7f0      	b.n	4ede <_strtol_l.isra.0+0x2e>
    4efc:	2c30      	cmp	r4, #48	; 0x30
    4efe:	d12f      	bne.n	4f60 <_strtol_l.isra.0+0xb0>
    4f00:	2220      	movs	r2, #32
    4f02:	782b      	ldrb	r3, [r5, #0]
    4f04:	4393      	bics	r3, r2
    4f06:	2b58      	cmp	r3, #88	; 0x58
    4f08:	d151      	bne.n	4fae <_strtol_l.isra.0+0xfe>
    4f0a:	2710      	movs	r7, #16
    4f0c:	786c      	ldrb	r4, [r5, #1]
    4f0e:	3502      	adds	r5, #2
    4f10:	9b01      	ldr	r3, [sp, #4]
    4f12:	4a29      	ldr	r2, [pc, #164]	; (4fb8 <_strtol_l.isra.0+0x108>)
    4f14:	0039      	movs	r1, r7
    4f16:	189e      	adds	r6, r3, r2
    4f18:	0030      	movs	r0, r6
    4f1a:	f7fe f8cd 	bl	30b8 <__aeabi_uidivmod>
    4f1e:	0030      	movs	r0, r6
    4f20:	9104      	str	r1, [sp, #16]
    4f22:	0039      	movs	r1, r7
    4f24:	f7fe f842 	bl	2fac <__udivsi3>
    4f28:	2101      	movs	r1, #1
    4f2a:	2300      	movs	r3, #0
    4f2c:	4249      	negs	r1, r1
    4f2e:	0002      	movs	r2, r0
    4f30:	468c      	mov	ip, r1
    4f32:	0018      	movs	r0, r3
    4f34:	0021      	movs	r1, r4
    4f36:	3930      	subs	r1, #48	; 0x30
    4f38:	2909      	cmp	r1, #9
    4f3a:	d813      	bhi.n	4f64 <_strtol_l.isra.0+0xb4>
    4f3c:	000c      	movs	r4, r1
    4f3e:	42a7      	cmp	r7, r4
    4f40:	dd1c      	ble.n	4f7c <_strtol_l.isra.0+0xcc>
    4f42:	1c59      	adds	r1, r3, #1
    4f44:	d009      	beq.n	4f5a <_strtol_l.isra.0+0xaa>
    4f46:	4663      	mov	r3, ip
    4f48:	4282      	cmp	r2, r0
    4f4a:	d306      	bcc.n	4f5a <_strtol_l.isra.0+0xaa>
    4f4c:	d102      	bne.n	4f54 <_strtol_l.isra.0+0xa4>
    4f4e:	9904      	ldr	r1, [sp, #16]
    4f50:	42a1      	cmp	r1, r4
    4f52:	db02      	blt.n	4f5a <_strtol_l.isra.0+0xaa>
    4f54:	2301      	movs	r3, #1
    4f56:	4378      	muls	r0, r7
    4f58:	1820      	adds	r0, r4, r0
    4f5a:	782c      	ldrb	r4, [r5, #0]
    4f5c:	3501      	adds	r5, #1
    4f5e:	e7e9      	b.n	4f34 <_strtol_l.isra.0+0x84>
    4f60:	270a      	movs	r7, #10
    4f62:	e7d5      	b.n	4f10 <_strtol_l.isra.0+0x60>
    4f64:	0021      	movs	r1, r4
    4f66:	3941      	subs	r1, #65	; 0x41
    4f68:	2919      	cmp	r1, #25
    4f6a:	d801      	bhi.n	4f70 <_strtol_l.isra.0+0xc0>
    4f6c:	3c37      	subs	r4, #55	; 0x37
    4f6e:	e7e6      	b.n	4f3e <_strtol_l.isra.0+0x8e>
    4f70:	0021      	movs	r1, r4
    4f72:	3961      	subs	r1, #97	; 0x61
    4f74:	2919      	cmp	r1, #25
    4f76:	d801      	bhi.n	4f7c <_strtol_l.isra.0+0xcc>
    4f78:	3c57      	subs	r4, #87	; 0x57
    4f7a:	e7e0      	b.n	4f3e <_strtol_l.isra.0+0x8e>
    4f7c:	1c5a      	adds	r2, r3, #1
    4f7e:	d108      	bne.n	4f92 <_strtol_l.isra.0+0xe2>
    4f80:	9a05      	ldr	r2, [sp, #20]
    4f82:	3323      	adds	r3, #35	; 0x23
    4f84:	6013      	str	r3, [r2, #0]
    4f86:	9b02      	ldr	r3, [sp, #8]
    4f88:	0030      	movs	r0, r6
    4f8a:	2b00      	cmp	r3, #0
    4f8c:	d10b      	bne.n	4fa6 <_strtol_l.isra.0+0xf6>
    4f8e:	b007      	add	sp, #28
    4f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f92:	9a01      	ldr	r2, [sp, #4]
    4f94:	2a00      	cmp	r2, #0
    4f96:	d000      	beq.n	4f9a <_strtol_l.isra.0+0xea>
    4f98:	4240      	negs	r0, r0
    4f9a:	9a02      	ldr	r2, [sp, #8]
    4f9c:	2a00      	cmp	r2, #0
    4f9e:	d0f6      	beq.n	4f8e <_strtol_l.isra.0+0xde>
    4fa0:	9a03      	ldr	r2, [sp, #12]
    4fa2:	2b00      	cmp	r3, #0
    4fa4:	d000      	beq.n	4fa8 <_strtol_l.isra.0+0xf8>
    4fa6:	1e6a      	subs	r2, r5, #1
    4fa8:	9b02      	ldr	r3, [sp, #8]
    4faa:	601a      	str	r2, [r3, #0]
    4fac:	e7ef      	b.n	4f8e <_strtol_l.isra.0+0xde>
    4fae:	2430      	movs	r4, #48	; 0x30
    4fb0:	2f00      	cmp	r7, #0
    4fb2:	d1ad      	bne.n	4f10 <_strtol_l.isra.0+0x60>
    4fb4:	3708      	adds	r7, #8
    4fb6:	e7ab      	b.n	4f10 <_strtol_l.isra.0+0x60>
    4fb8:	7fffffff 	.word	0x7fffffff

00004fbc <strtol>:
    4fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4fbe:	0013      	movs	r3, r2
    4fc0:	4a06      	ldr	r2, [pc, #24]	; (4fdc <strtol+0x20>)
    4fc2:	0005      	movs	r5, r0
    4fc4:	6810      	ldr	r0, [r2, #0]
    4fc6:	6a04      	ldr	r4, [r0, #32]
    4fc8:	2c00      	cmp	r4, #0
    4fca:	d100      	bne.n	4fce <strtol+0x12>
    4fcc:	4c04      	ldr	r4, [pc, #16]	; (4fe0 <strtol+0x24>)
    4fce:	000a      	movs	r2, r1
    4fd0:	9400      	str	r4, [sp, #0]
    4fd2:	0029      	movs	r1, r5
    4fd4:	f7ff ff6c 	bl	4eb0 <_strtol_l.isra.0>
    4fd8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    4fda:	46c0      	nop			; (mov r8, r8)
    4fdc:	2000002c 	.word	0x2000002c
    4fe0:	20000090 	.word	0x20000090

00004fe4 <__swbuf_r>:
    4fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fe6:	0005      	movs	r5, r0
    4fe8:	000e      	movs	r6, r1
    4fea:	0014      	movs	r4, r2
    4fec:	2800      	cmp	r0, #0
    4fee:	d004      	beq.n	4ffa <__swbuf_r+0x16>
    4ff0:	6983      	ldr	r3, [r0, #24]
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	d101      	bne.n	4ffa <__swbuf_r+0x16>
    4ff6:	f000 f9c5 	bl	5384 <__sinit>
    4ffa:	4b22      	ldr	r3, [pc, #136]	; (5084 <__swbuf_r+0xa0>)
    4ffc:	429c      	cmp	r4, r3
    4ffe:	d12d      	bne.n	505c <__swbuf_r+0x78>
    5000:	686c      	ldr	r4, [r5, #4]
    5002:	69a3      	ldr	r3, [r4, #24]
    5004:	60a3      	str	r3, [r4, #8]
    5006:	89a3      	ldrh	r3, [r4, #12]
    5008:	071b      	lsls	r3, r3, #28
    500a:	d531      	bpl.n	5070 <__swbuf_r+0x8c>
    500c:	6923      	ldr	r3, [r4, #16]
    500e:	2b00      	cmp	r3, #0
    5010:	d02e      	beq.n	5070 <__swbuf_r+0x8c>
    5012:	6823      	ldr	r3, [r4, #0]
    5014:	6922      	ldr	r2, [r4, #16]
    5016:	b2f7      	uxtb	r7, r6
    5018:	1a98      	subs	r0, r3, r2
    501a:	6963      	ldr	r3, [r4, #20]
    501c:	b2f6      	uxtb	r6, r6
    501e:	4298      	cmp	r0, r3
    5020:	db05      	blt.n	502e <__swbuf_r+0x4a>
    5022:	0021      	movs	r1, r4
    5024:	0028      	movs	r0, r5
    5026:	f000 f93f 	bl	52a8 <_fflush_r>
    502a:	2800      	cmp	r0, #0
    502c:	d126      	bne.n	507c <__swbuf_r+0x98>
    502e:	68a3      	ldr	r3, [r4, #8]
    5030:	3001      	adds	r0, #1
    5032:	3b01      	subs	r3, #1
    5034:	60a3      	str	r3, [r4, #8]
    5036:	6823      	ldr	r3, [r4, #0]
    5038:	1c5a      	adds	r2, r3, #1
    503a:	6022      	str	r2, [r4, #0]
    503c:	701f      	strb	r7, [r3, #0]
    503e:	6963      	ldr	r3, [r4, #20]
    5040:	4298      	cmp	r0, r3
    5042:	d004      	beq.n	504e <__swbuf_r+0x6a>
    5044:	89a3      	ldrh	r3, [r4, #12]
    5046:	07db      	lsls	r3, r3, #31
    5048:	d51a      	bpl.n	5080 <__swbuf_r+0x9c>
    504a:	2e0a      	cmp	r6, #10
    504c:	d118      	bne.n	5080 <__swbuf_r+0x9c>
    504e:	0021      	movs	r1, r4
    5050:	0028      	movs	r0, r5
    5052:	f000 f929 	bl	52a8 <_fflush_r>
    5056:	2800      	cmp	r0, #0
    5058:	d012      	beq.n	5080 <__swbuf_r+0x9c>
    505a:	e00f      	b.n	507c <__swbuf_r+0x98>
    505c:	4b0a      	ldr	r3, [pc, #40]	; (5088 <__swbuf_r+0xa4>)
    505e:	429c      	cmp	r4, r3
    5060:	d101      	bne.n	5066 <__swbuf_r+0x82>
    5062:	68ac      	ldr	r4, [r5, #8]
    5064:	e7cd      	b.n	5002 <__swbuf_r+0x1e>
    5066:	4b09      	ldr	r3, [pc, #36]	; (508c <__swbuf_r+0xa8>)
    5068:	429c      	cmp	r4, r3
    506a:	d1ca      	bne.n	5002 <__swbuf_r+0x1e>
    506c:	68ec      	ldr	r4, [r5, #12]
    506e:	e7c8      	b.n	5002 <__swbuf_r+0x1e>
    5070:	0021      	movs	r1, r4
    5072:	0028      	movs	r0, r5
    5074:	f000 f818 	bl	50a8 <__swsetup_r>
    5078:	2800      	cmp	r0, #0
    507a:	d0ca      	beq.n	5012 <__swbuf_r+0x2e>
    507c:	2601      	movs	r6, #1
    507e:	4276      	negs	r6, r6
    5080:	0030      	movs	r0, r6
    5082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5084:	0000667c 	.word	0x0000667c
    5088:	0000669c 	.word	0x0000669c
    508c:	0000665c 	.word	0x0000665c

00005090 <__ascii_wctomb>:
    5090:	1e0b      	subs	r3, r1, #0
    5092:	d004      	beq.n	509e <__ascii_wctomb+0xe>
    5094:	2aff      	cmp	r2, #255	; 0xff
    5096:	d904      	bls.n	50a2 <__ascii_wctomb+0x12>
    5098:	238a      	movs	r3, #138	; 0x8a
    509a:	6003      	str	r3, [r0, #0]
    509c:	3b8b      	subs	r3, #139	; 0x8b
    509e:	0018      	movs	r0, r3
    50a0:	4770      	bx	lr
    50a2:	700a      	strb	r2, [r1, #0]
    50a4:	2301      	movs	r3, #1
    50a6:	e7fa      	b.n	509e <__ascii_wctomb+0xe>

000050a8 <__swsetup_r>:
    50a8:	4b36      	ldr	r3, [pc, #216]	; (5184 <__swsetup_r+0xdc>)
    50aa:	b570      	push	{r4, r5, r6, lr}
    50ac:	681d      	ldr	r5, [r3, #0]
    50ae:	0006      	movs	r6, r0
    50b0:	000c      	movs	r4, r1
    50b2:	2d00      	cmp	r5, #0
    50b4:	d005      	beq.n	50c2 <__swsetup_r+0x1a>
    50b6:	69ab      	ldr	r3, [r5, #24]
    50b8:	2b00      	cmp	r3, #0
    50ba:	d102      	bne.n	50c2 <__swsetup_r+0x1a>
    50bc:	0028      	movs	r0, r5
    50be:	f000 f961 	bl	5384 <__sinit>
    50c2:	4b31      	ldr	r3, [pc, #196]	; (5188 <__swsetup_r+0xe0>)
    50c4:	429c      	cmp	r4, r3
    50c6:	d10f      	bne.n	50e8 <__swsetup_r+0x40>
    50c8:	686c      	ldr	r4, [r5, #4]
    50ca:	230c      	movs	r3, #12
    50cc:	5ee2      	ldrsh	r2, [r4, r3]
    50ce:	b293      	uxth	r3, r2
    50d0:	0719      	lsls	r1, r3, #28
    50d2:	d42d      	bmi.n	5130 <__swsetup_r+0x88>
    50d4:	06d9      	lsls	r1, r3, #27
    50d6:	d411      	bmi.n	50fc <__swsetup_r+0x54>
    50d8:	2309      	movs	r3, #9
    50da:	2001      	movs	r0, #1
    50dc:	6033      	str	r3, [r6, #0]
    50de:	3337      	adds	r3, #55	; 0x37
    50e0:	4313      	orrs	r3, r2
    50e2:	81a3      	strh	r3, [r4, #12]
    50e4:	4240      	negs	r0, r0
    50e6:	bd70      	pop	{r4, r5, r6, pc}
    50e8:	4b28      	ldr	r3, [pc, #160]	; (518c <__swsetup_r+0xe4>)
    50ea:	429c      	cmp	r4, r3
    50ec:	d101      	bne.n	50f2 <__swsetup_r+0x4a>
    50ee:	68ac      	ldr	r4, [r5, #8]
    50f0:	e7eb      	b.n	50ca <__swsetup_r+0x22>
    50f2:	4b27      	ldr	r3, [pc, #156]	; (5190 <__swsetup_r+0xe8>)
    50f4:	429c      	cmp	r4, r3
    50f6:	d1e8      	bne.n	50ca <__swsetup_r+0x22>
    50f8:	68ec      	ldr	r4, [r5, #12]
    50fa:	e7e6      	b.n	50ca <__swsetup_r+0x22>
    50fc:	075b      	lsls	r3, r3, #29
    50fe:	d513      	bpl.n	5128 <__swsetup_r+0x80>
    5100:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5102:	2900      	cmp	r1, #0
    5104:	d008      	beq.n	5118 <__swsetup_r+0x70>
    5106:	0023      	movs	r3, r4
    5108:	3344      	adds	r3, #68	; 0x44
    510a:	4299      	cmp	r1, r3
    510c:	d002      	beq.n	5114 <__swsetup_r+0x6c>
    510e:	0030      	movs	r0, r6
    5110:	f7ff fcd0 	bl	4ab4 <_free_r>
    5114:	2300      	movs	r3, #0
    5116:	6363      	str	r3, [r4, #52]	; 0x34
    5118:	2224      	movs	r2, #36	; 0x24
    511a:	89a3      	ldrh	r3, [r4, #12]
    511c:	4393      	bics	r3, r2
    511e:	81a3      	strh	r3, [r4, #12]
    5120:	2300      	movs	r3, #0
    5122:	6063      	str	r3, [r4, #4]
    5124:	6923      	ldr	r3, [r4, #16]
    5126:	6023      	str	r3, [r4, #0]
    5128:	2308      	movs	r3, #8
    512a:	89a2      	ldrh	r2, [r4, #12]
    512c:	4313      	orrs	r3, r2
    512e:	81a3      	strh	r3, [r4, #12]
    5130:	6923      	ldr	r3, [r4, #16]
    5132:	2b00      	cmp	r3, #0
    5134:	d10b      	bne.n	514e <__swsetup_r+0xa6>
    5136:	21a0      	movs	r1, #160	; 0xa0
    5138:	2280      	movs	r2, #128	; 0x80
    513a:	89a3      	ldrh	r3, [r4, #12]
    513c:	0089      	lsls	r1, r1, #2
    513e:	0092      	lsls	r2, r2, #2
    5140:	400b      	ands	r3, r1
    5142:	4293      	cmp	r3, r2
    5144:	d003      	beq.n	514e <__swsetup_r+0xa6>
    5146:	0021      	movs	r1, r4
    5148:	0030      	movs	r0, r6
    514a:	f000 f9d9 	bl	5500 <__smakebuf_r>
    514e:	2301      	movs	r3, #1
    5150:	89a2      	ldrh	r2, [r4, #12]
    5152:	4013      	ands	r3, r2
    5154:	d011      	beq.n	517a <__swsetup_r+0xd2>
    5156:	2300      	movs	r3, #0
    5158:	60a3      	str	r3, [r4, #8]
    515a:	6963      	ldr	r3, [r4, #20]
    515c:	425b      	negs	r3, r3
    515e:	61a3      	str	r3, [r4, #24]
    5160:	2000      	movs	r0, #0
    5162:	6923      	ldr	r3, [r4, #16]
    5164:	4283      	cmp	r3, r0
    5166:	d1be      	bne.n	50e6 <__swsetup_r+0x3e>
    5168:	230c      	movs	r3, #12
    516a:	5ee2      	ldrsh	r2, [r4, r3]
    516c:	0613      	lsls	r3, r2, #24
    516e:	d5ba      	bpl.n	50e6 <__swsetup_r+0x3e>
    5170:	2340      	movs	r3, #64	; 0x40
    5172:	4313      	orrs	r3, r2
    5174:	81a3      	strh	r3, [r4, #12]
    5176:	3801      	subs	r0, #1
    5178:	e7b5      	b.n	50e6 <__swsetup_r+0x3e>
    517a:	0792      	lsls	r2, r2, #30
    517c:	d400      	bmi.n	5180 <__swsetup_r+0xd8>
    517e:	6963      	ldr	r3, [r4, #20]
    5180:	60a3      	str	r3, [r4, #8]
    5182:	e7ed      	b.n	5160 <__swsetup_r+0xb8>
    5184:	2000002c 	.word	0x2000002c
    5188:	0000667c 	.word	0x0000667c
    518c:	0000669c 	.word	0x0000669c
    5190:	0000665c 	.word	0x0000665c

00005194 <__sflush_r>:
    5194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5196:	898a      	ldrh	r2, [r1, #12]
    5198:	0005      	movs	r5, r0
    519a:	000c      	movs	r4, r1
    519c:	0713      	lsls	r3, r2, #28
    519e:	d460      	bmi.n	5262 <__sflush_r+0xce>
    51a0:	684b      	ldr	r3, [r1, #4]
    51a2:	2b00      	cmp	r3, #0
    51a4:	dc04      	bgt.n	51b0 <__sflush_r+0x1c>
    51a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    51a8:	2b00      	cmp	r3, #0
    51aa:	dc01      	bgt.n	51b0 <__sflush_r+0x1c>
    51ac:	2000      	movs	r0, #0
    51ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    51b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    51b2:	2f00      	cmp	r7, #0
    51b4:	d0fa      	beq.n	51ac <__sflush_r+0x18>
    51b6:	2300      	movs	r3, #0
    51b8:	682e      	ldr	r6, [r5, #0]
    51ba:	602b      	str	r3, [r5, #0]
    51bc:	2380      	movs	r3, #128	; 0x80
    51be:	015b      	lsls	r3, r3, #5
    51c0:	401a      	ands	r2, r3
    51c2:	d034      	beq.n	522e <__sflush_r+0x9a>
    51c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    51c6:	89a3      	ldrh	r3, [r4, #12]
    51c8:	075b      	lsls	r3, r3, #29
    51ca:	d506      	bpl.n	51da <__sflush_r+0x46>
    51cc:	6863      	ldr	r3, [r4, #4]
    51ce:	1ac0      	subs	r0, r0, r3
    51d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    51d2:	2b00      	cmp	r3, #0
    51d4:	d001      	beq.n	51da <__sflush_r+0x46>
    51d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    51d8:	1ac0      	subs	r0, r0, r3
    51da:	0002      	movs	r2, r0
    51dc:	6a21      	ldr	r1, [r4, #32]
    51de:	2300      	movs	r3, #0
    51e0:	0028      	movs	r0, r5
    51e2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    51e4:	47b8      	blx	r7
    51e6:	89a1      	ldrh	r1, [r4, #12]
    51e8:	1c43      	adds	r3, r0, #1
    51ea:	d106      	bne.n	51fa <__sflush_r+0x66>
    51ec:	682b      	ldr	r3, [r5, #0]
    51ee:	2b1d      	cmp	r3, #29
    51f0:	d831      	bhi.n	5256 <__sflush_r+0xc2>
    51f2:	4a2c      	ldr	r2, [pc, #176]	; (52a4 <__sflush_r+0x110>)
    51f4:	40da      	lsrs	r2, r3
    51f6:	07d3      	lsls	r3, r2, #31
    51f8:	d52d      	bpl.n	5256 <__sflush_r+0xc2>
    51fa:	2300      	movs	r3, #0
    51fc:	6063      	str	r3, [r4, #4]
    51fe:	6923      	ldr	r3, [r4, #16]
    5200:	6023      	str	r3, [r4, #0]
    5202:	04cb      	lsls	r3, r1, #19
    5204:	d505      	bpl.n	5212 <__sflush_r+0x7e>
    5206:	1c43      	adds	r3, r0, #1
    5208:	d102      	bne.n	5210 <__sflush_r+0x7c>
    520a:	682b      	ldr	r3, [r5, #0]
    520c:	2b00      	cmp	r3, #0
    520e:	d100      	bne.n	5212 <__sflush_r+0x7e>
    5210:	6560      	str	r0, [r4, #84]	; 0x54
    5212:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5214:	602e      	str	r6, [r5, #0]
    5216:	2900      	cmp	r1, #0
    5218:	d0c8      	beq.n	51ac <__sflush_r+0x18>
    521a:	0023      	movs	r3, r4
    521c:	3344      	adds	r3, #68	; 0x44
    521e:	4299      	cmp	r1, r3
    5220:	d002      	beq.n	5228 <__sflush_r+0x94>
    5222:	0028      	movs	r0, r5
    5224:	f7ff fc46 	bl	4ab4 <_free_r>
    5228:	2000      	movs	r0, #0
    522a:	6360      	str	r0, [r4, #52]	; 0x34
    522c:	e7bf      	b.n	51ae <__sflush_r+0x1a>
    522e:	2301      	movs	r3, #1
    5230:	6a21      	ldr	r1, [r4, #32]
    5232:	0028      	movs	r0, r5
    5234:	47b8      	blx	r7
    5236:	1c43      	adds	r3, r0, #1
    5238:	d1c5      	bne.n	51c6 <__sflush_r+0x32>
    523a:	682b      	ldr	r3, [r5, #0]
    523c:	2b00      	cmp	r3, #0
    523e:	d0c2      	beq.n	51c6 <__sflush_r+0x32>
    5240:	2b1d      	cmp	r3, #29
    5242:	d001      	beq.n	5248 <__sflush_r+0xb4>
    5244:	2b16      	cmp	r3, #22
    5246:	d101      	bne.n	524c <__sflush_r+0xb8>
    5248:	602e      	str	r6, [r5, #0]
    524a:	e7af      	b.n	51ac <__sflush_r+0x18>
    524c:	2340      	movs	r3, #64	; 0x40
    524e:	89a2      	ldrh	r2, [r4, #12]
    5250:	4313      	orrs	r3, r2
    5252:	81a3      	strh	r3, [r4, #12]
    5254:	e7ab      	b.n	51ae <__sflush_r+0x1a>
    5256:	2340      	movs	r3, #64	; 0x40
    5258:	430b      	orrs	r3, r1
    525a:	2001      	movs	r0, #1
    525c:	81a3      	strh	r3, [r4, #12]
    525e:	4240      	negs	r0, r0
    5260:	e7a5      	b.n	51ae <__sflush_r+0x1a>
    5262:	690f      	ldr	r7, [r1, #16]
    5264:	2f00      	cmp	r7, #0
    5266:	d0a1      	beq.n	51ac <__sflush_r+0x18>
    5268:	680b      	ldr	r3, [r1, #0]
    526a:	600f      	str	r7, [r1, #0]
    526c:	1bdb      	subs	r3, r3, r7
    526e:	9301      	str	r3, [sp, #4]
    5270:	2300      	movs	r3, #0
    5272:	0792      	lsls	r2, r2, #30
    5274:	d100      	bne.n	5278 <__sflush_r+0xe4>
    5276:	694b      	ldr	r3, [r1, #20]
    5278:	60a3      	str	r3, [r4, #8]
    527a:	9b01      	ldr	r3, [sp, #4]
    527c:	2b00      	cmp	r3, #0
    527e:	dc00      	bgt.n	5282 <__sflush_r+0xee>
    5280:	e794      	b.n	51ac <__sflush_r+0x18>
    5282:	9b01      	ldr	r3, [sp, #4]
    5284:	003a      	movs	r2, r7
    5286:	6a21      	ldr	r1, [r4, #32]
    5288:	0028      	movs	r0, r5
    528a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    528c:	47b0      	blx	r6
    528e:	2800      	cmp	r0, #0
    5290:	dc03      	bgt.n	529a <__sflush_r+0x106>
    5292:	2340      	movs	r3, #64	; 0x40
    5294:	89a2      	ldrh	r2, [r4, #12]
    5296:	4313      	orrs	r3, r2
    5298:	e7df      	b.n	525a <__sflush_r+0xc6>
    529a:	9b01      	ldr	r3, [sp, #4]
    529c:	183f      	adds	r7, r7, r0
    529e:	1a1b      	subs	r3, r3, r0
    52a0:	9301      	str	r3, [sp, #4]
    52a2:	e7ea      	b.n	527a <__sflush_r+0xe6>
    52a4:	20400001 	.word	0x20400001

000052a8 <_fflush_r>:
    52a8:	690b      	ldr	r3, [r1, #16]
    52aa:	b570      	push	{r4, r5, r6, lr}
    52ac:	0005      	movs	r5, r0
    52ae:	000c      	movs	r4, r1
    52b0:	2b00      	cmp	r3, #0
    52b2:	d101      	bne.n	52b8 <_fflush_r+0x10>
    52b4:	2000      	movs	r0, #0
    52b6:	bd70      	pop	{r4, r5, r6, pc}
    52b8:	2800      	cmp	r0, #0
    52ba:	d004      	beq.n	52c6 <_fflush_r+0x1e>
    52bc:	6983      	ldr	r3, [r0, #24]
    52be:	2b00      	cmp	r3, #0
    52c0:	d101      	bne.n	52c6 <_fflush_r+0x1e>
    52c2:	f000 f85f 	bl	5384 <__sinit>
    52c6:	4b0b      	ldr	r3, [pc, #44]	; (52f4 <_fflush_r+0x4c>)
    52c8:	429c      	cmp	r4, r3
    52ca:	d109      	bne.n	52e0 <_fflush_r+0x38>
    52cc:	686c      	ldr	r4, [r5, #4]
    52ce:	220c      	movs	r2, #12
    52d0:	5ea3      	ldrsh	r3, [r4, r2]
    52d2:	2b00      	cmp	r3, #0
    52d4:	d0ee      	beq.n	52b4 <_fflush_r+0xc>
    52d6:	0021      	movs	r1, r4
    52d8:	0028      	movs	r0, r5
    52da:	f7ff ff5b 	bl	5194 <__sflush_r>
    52de:	e7ea      	b.n	52b6 <_fflush_r+0xe>
    52e0:	4b05      	ldr	r3, [pc, #20]	; (52f8 <_fflush_r+0x50>)
    52e2:	429c      	cmp	r4, r3
    52e4:	d101      	bne.n	52ea <_fflush_r+0x42>
    52e6:	68ac      	ldr	r4, [r5, #8]
    52e8:	e7f1      	b.n	52ce <_fflush_r+0x26>
    52ea:	4b04      	ldr	r3, [pc, #16]	; (52fc <_fflush_r+0x54>)
    52ec:	429c      	cmp	r4, r3
    52ee:	d1ee      	bne.n	52ce <_fflush_r+0x26>
    52f0:	68ec      	ldr	r4, [r5, #12]
    52f2:	e7ec      	b.n	52ce <_fflush_r+0x26>
    52f4:	0000667c 	.word	0x0000667c
    52f8:	0000669c 	.word	0x0000669c
    52fc:	0000665c 	.word	0x0000665c

00005300 <_cleanup_r>:
    5300:	b510      	push	{r4, lr}
    5302:	4902      	ldr	r1, [pc, #8]	; (530c <_cleanup_r+0xc>)
    5304:	f000 f8b2 	bl	546c <_fwalk_reent>
    5308:	bd10      	pop	{r4, pc}
    530a:	46c0      	nop			; (mov r8, r8)
    530c:	000052a9 	.word	0x000052a9

00005310 <std.isra.0>:
    5310:	2300      	movs	r3, #0
    5312:	b510      	push	{r4, lr}
    5314:	0004      	movs	r4, r0
    5316:	6003      	str	r3, [r0, #0]
    5318:	6043      	str	r3, [r0, #4]
    531a:	6083      	str	r3, [r0, #8]
    531c:	8181      	strh	r1, [r0, #12]
    531e:	6643      	str	r3, [r0, #100]	; 0x64
    5320:	81c2      	strh	r2, [r0, #14]
    5322:	6103      	str	r3, [r0, #16]
    5324:	6143      	str	r3, [r0, #20]
    5326:	6183      	str	r3, [r0, #24]
    5328:	0019      	movs	r1, r3
    532a:	2208      	movs	r2, #8
    532c:	305c      	adds	r0, #92	; 0x5c
    532e:	f7ff fbb8 	bl	4aa2 <memset>
    5332:	4b05      	ldr	r3, [pc, #20]	; (5348 <std.isra.0+0x38>)
    5334:	6224      	str	r4, [r4, #32]
    5336:	6263      	str	r3, [r4, #36]	; 0x24
    5338:	4b04      	ldr	r3, [pc, #16]	; (534c <std.isra.0+0x3c>)
    533a:	62a3      	str	r3, [r4, #40]	; 0x28
    533c:	4b04      	ldr	r3, [pc, #16]	; (5350 <std.isra.0+0x40>)
    533e:	62e3      	str	r3, [r4, #44]	; 0x2c
    5340:	4b04      	ldr	r3, [pc, #16]	; (5354 <std.isra.0+0x44>)
    5342:	6323      	str	r3, [r4, #48]	; 0x30
    5344:	bd10      	pop	{r4, pc}
    5346:	46c0      	nop			; (mov r8, r8)
    5348:	00005b25 	.word	0x00005b25
    534c:	00005b4d 	.word	0x00005b4d
    5350:	00005b85 	.word	0x00005b85
    5354:	00005bb1 	.word	0x00005bb1

00005358 <__sfmoreglue>:
    5358:	b570      	push	{r4, r5, r6, lr}
    535a:	2568      	movs	r5, #104	; 0x68
    535c:	1e4a      	subs	r2, r1, #1
    535e:	4355      	muls	r5, r2
    5360:	000e      	movs	r6, r1
    5362:	0029      	movs	r1, r5
    5364:	3174      	adds	r1, #116	; 0x74
    5366:	f7ff fbef 	bl	4b48 <_malloc_r>
    536a:	1e04      	subs	r4, r0, #0
    536c:	d008      	beq.n	5380 <__sfmoreglue+0x28>
    536e:	2100      	movs	r1, #0
    5370:	002a      	movs	r2, r5
    5372:	6001      	str	r1, [r0, #0]
    5374:	6046      	str	r6, [r0, #4]
    5376:	300c      	adds	r0, #12
    5378:	60a0      	str	r0, [r4, #8]
    537a:	3268      	adds	r2, #104	; 0x68
    537c:	f7ff fb91 	bl	4aa2 <memset>
    5380:	0020      	movs	r0, r4
    5382:	bd70      	pop	{r4, r5, r6, pc}

00005384 <__sinit>:
    5384:	6983      	ldr	r3, [r0, #24]
    5386:	b513      	push	{r0, r1, r4, lr}
    5388:	0004      	movs	r4, r0
    538a:	2b00      	cmp	r3, #0
    538c:	d128      	bne.n	53e0 <__sinit+0x5c>
    538e:	6483      	str	r3, [r0, #72]	; 0x48
    5390:	64c3      	str	r3, [r0, #76]	; 0x4c
    5392:	6503      	str	r3, [r0, #80]	; 0x50
    5394:	4b13      	ldr	r3, [pc, #76]	; (53e4 <__sinit+0x60>)
    5396:	4a14      	ldr	r2, [pc, #80]	; (53e8 <__sinit+0x64>)
    5398:	681b      	ldr	r3, [r3, #0]
    539a:	6282      	str	r2, [r0, #40]	; 0x28
    539c:	9301      	str	r3, [sp, #4]
    539e:	4298      	cmp	r0, r3
    53a0:	d101      	bne.n	53a6 <__sinit+0x22>
    53a2:	2301      	movs	r3, #1
    53a4:	6183      	str	r3, [r0, #24]
    53a6:	0020      	movs	r0, r4
    53a8:	f000 f820 	bl	53ec <__sfp>
    53ac:	6060      	str	r0, [r4, #4]
    53ae:	0020      	movs	r0, r4
    53b0:	f000 f81c 	bl	53ec <__sfp>
    53b4:	60a0      	str	r0, [r4, #8]
    53b6:	0020      	movs	r0, r4
    53b8:	f000 f818 	bl	53ec <__sfp>
    53bc:	2200      	movs	r2, #0
    53be:	60e0      	str	r0, [r4, #12]
    53c0:	2104      	movs	r1, #4
    53c2:	6860      	ldr	r0, [r4, #4]
    53c4:	f7ff ffa4 	bl	5310 <std.isra.0>
    53c8:	2201      	movs	r2, #1
    53ca:	2109      	movs	r1, #9
    53cc:	68a0      	ldr	r0, [r4, #8]
    53ce:	f7ff ff9f 	bl	5310 <std.isra.0>
    53d2:	2202      	movs	r2, #2
    53d4:	2112      	movs	r1, #18
    53d6:	68e0      	ldr	r0, [r4, #12]
    53d8:	f7ff ff9a 	bl	5310 <std.isra.0>
    53dc:	2301      	movs	r3, #1
    53de:	61a3      	str	r3, [r4, #24]
    53e0:	bd13      	pop	{r0, r1, r4, pc}
    53e2:	46c0      	nop			; (mov r8, r8)
    53e4:	0000654c 	.word	0x0000654c
    53e8:	00005301 	.word	0x00005301

000053ec <__sfp>:
    53ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53ee:	4b1e      	ldr	r3, [pc, #120]	; (5468 <__sfp+0x7c>)
    53f0:	0007      	movs	r7, r0
    53f2:	681e      	ldr	r6, [r3, #0]
    53f4:	69b3      	ldr	r3, [r6, #24]
    53f6:	2b00      	cmp	r3, #0
    53f8:	d102      	bne.n	5400 <__sfp+0x14>
    53fa:	0030      	movs	r0, r6
    53fc:	f7ff ffc2 	bl	5384 <__sinit>
    5400:	3648      	adds	r6, #72	; 0x48
    5402:	68b4      	ldr	r4, [r6, #8]
    5404:	6873      	ldr	r3, [r6, #4]
    5406:	3b01      	subs	r3, #1
    5408:	d504      	bpl.n	5414 <__sfp+0x28>
    540a:	6833      	ldr	r3, [r6, #0]
    540c:	2b00      	cmp	r3, #0
    540e:	d007      	beq.n	5420 <__sfp+0x34>
    5410:	6836      	ldr	r6, [r6, #0]
    5412:	e7f6      	b.n	5402 <__sfp+0x16>
    5414:	220c      	movs	r2, #12
    5416:	5ea5      	ldrsh	r5, [r4, r2]
    5418:	2d00      	cmp	r5, #0
    541a:	d00d      	beq.n	5438 <__sfp+0x4c>
    541c:	3468      	adds	r4, #104	; 0x68
    541e:	e7f2      	b.n	5406 <__sfp+0x1a>
    5420:	2104      	movs	r1, #4
    5422:	0038      	movs	r0, r7
    5424:	f7ff ff98 	bl	5358 <__sfmoreglue>
    5428:	6030      	str	r0, [r6, #0]
    542a:	2800      	cmp	r0, #0
    542c:	d1f0      	bne.n	5410 <__sfp+0x24>
    542e:	230c      	movs	r3, #12
    5430:	0004      	movs	r4, r0
    5432:	603b      	str	r3, [r7, #0]
    5434:	0020      	movs	r0, r4
    5436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5438:	2301      	movs	r3, #1
    543a:	0020      	movs	r0, r4
    543c:	425b      	negs	r3, r3
    543e:	81e3      	strh	r3, [r4, #14]
    5440:	3302      	adds	r3, #2
    5442:	81a3      	strh	r3, [r4, #12]
    5444:	6665      	str	r5, [r4, #100]	; 0x64
    5446:	6025      	str	r5, [r4, #0]
    5448:	60a5      	str	r5, [r4, #8]
    544a:	6065      	str	r5, [r4, #4]
    544c:	6125      	str	r5, [r4, #16]
    544e:	6165      	str	r5, [r4, #20]
    5450:	61a5      	str	r5, [r4, #24]
    5452:	2208      	movs	r2, #8
    5454:	0029      	movs	r1, r5
    5456:	305c      	adds	r0, #92	; 0x5c
    5458:	f7ff fb23 	bl	4aa2 <memset>
    545c:	6365      	str	r5, [r4, #52]	; 0x34
    545e:	63a5      	str	r5, [r4, #56]	; 0x38
    5460:	64a5      	str	r5, [r4, #72]	; 0x48
    5462:	64e5      	str	r5, [r4, #76]	; 0x4c
    5464:	e7e6      	b.n	5434 <__sfp+0x48>
    5466:	46c0      	nop			; (mov r8, r8)
    5468:	0000654c 	.word	0x0000654c

0000546c <_fwalk_reent>:
    546c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    546e:	0004      	movs	r4, r0
    5470:	0007      	movs	r7, r0
    5472:	2600      	movs	r6, #0
    5474:	9101      	str	r1, [sp, #4]
    5476:	3448      	adds	r4, #72	; 0x48
    5478:	2c00      	cmp	r4, #0
    547a:	d101      	bne.n	5480 <_fwalk_reent+0x14>
    547c:	0030      	movs	r0, r6
    547e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5480:	6863      	ldr	r3, [r4, #4]
    5482:	68a5      	ldr	r5, [r4, #8]
    5484:	9300      	str	r3, [sp, #0]
    5486:	9b00      	ldr	r3, [sp, #0]
    5488:	3b01      	subs	r3, #1
    548a:	9300      	str	r3, [sp, #0]
    548c:	d501      	bpl.n	5492 <_fwalk_reent+0x26>
    548e:	6824      	ldr	r4, [r4, #0]
    5490:	e7f2      	b.n	5478 <_fwalk_reent+0xc>
    5492:	89ab      	ldrh	r3, [r5, #12]
    5494:	2b01      	cmp	r3, #1
    5496:	d908      	bls.n	54aa <_fwalk_reent+0x3e>
    5498:	220e      	movs	r2, #14
    549a:	5eab      	ldrsh	r3, [r5, r2]
    549c:	3301      	adds	r3, #1
    549e:	d004      	beq.n	54aa <_fwalk_reent+0x3e>
    54a0:	0029      	movs	r1, r5
    54a2:	0038      	movs	r0, r7
    54a4:	9b01      	ldr	r3, [sp, #4]
    54a6:	4798      	blx	r3
    54a8:	4306      	orrs	r6, r0
    54aa:	3568      	adds	r5, #104	; 0x68
    54ac:	e7eb      	b.n	5486 <_fwalk_reent+0x1a>
	...

000054b0 <__swhatbuf_r>:
    54b0:	b570      	push	{r4, r5, r6, lr}
    54b2:	000e      	movs	r6, r1
    54b4:	001d      	movs	r5, r3
    54b6:	230e      	movs	r3, #14
    54b8:	5ec9      	ldrsh	r1, [r1, r3]
    54ba:	b090      	sub	sp, #64	; 0x40
    54bc:	0014      	movs	r4, r2
    54be:	2900      	cmp	r1, #0
    54c0:	da07      	bge.n	54d2 <__swhatbuf_r+0x22>
    54c2:	2300      	movs	r3, #0
    54c4:	602b      	str	r3, [r5, #0]
    54c6:	89b3      	ldrh	r3, [r6, #12]
    54c8:	061b      	lsls	r3, r3, #24
    54ca:	d411      	bmi.n	54f0 <__swhatbuf_r+0x40>
    54cc:	2380      	movs	r3, #128	; 0x80
    54ce:	00db      	lsls	r3, r3, #3
    54d0:	e00f      	b.n	54f2 <__swhatbuf_r+0x42>
    54d2:	aa01      	add	r2, sp, #4
    54d4:	f000 fb98 	bl	5c08 <_fstat_r>
    54d8:	2800      	cmp	r0, #0
    54da:	dbf2      	blt.n	54c2 <__swhatbuf_r+0x12>
    54dc:	22f0      	movs	r2, #240	; 0xf0
    54de:	9b02      	ldr	r3, [sp, #8]
    54e0:	0212      	lsls	r2, r2, #8
    54e2:	4013      	ands	r3, r2
    54e4:	4a05      	ldr	r2, [pc, #20]	; (54fc <__swhatbuf_r+0x4c>)
    54e6:	189b      	adds	r3, r3, r2
    54e8:	425a      	negs	r2, r3
    54ea:	4153      	adcs	r3, r2
    54ec:	602b      	str	r3, [r5, #0]
    54ee:	e7ed      	b.n	54cc <__swhatbuf_r+0x1c>
    54f0:	2340      	movs	r3, #64	; 0x40
    54f2:	2000      	movs	r0, #0
    54f4:	6023      	str	r3, [r4, #0]
    54f6:	b010      	add	sp, #64	; 0x40
    54f8:	bd70      	pop	{r4, r5, r6, pc}
    54fa:	46c0      	nop			; (mov r8, r8)
    54fc:	ffffe000 	.word	0xffffe000

00005500 <__smakebuf_r>:
    5500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5502:	2602      	movs	r6, #2
    5504:	898b      	ldrh	r3, [r1, #12]
    5506:	0005      	movs	r5, r0
    5508:	000c      	movs	r4, r1
    550a:	4233      	tst	r3, r6
    550c:	d006      	beq.n	551c <__smakebuf_r+0x1c>
    550e:	0023      	movs	r3, r4
    5510:	3347      	adds	r3, #71	; 0x47
    5512:	6023      	str	r3, [r4, #0]
    5514:	6123      	str	r3, [r4, #16]
    5516:	2301      	movs	r3, #1
    5518:	6163      	str	r3, [r4, #20]
    551a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    551c:	ab01      	add	r3, sp, #4
    551e:	466a      	mov	r2, sp
    5520:	f7ff ffc6 	bl	54b0 <__swhatbuf_r>
    5524:	9900      	ldr	r1, [sp, #0]
    5526:	0007      	movs	r7, r0
    5528:	0028      	movs	r0, r5
    552a:	f7ff fb0d 	bl	4b48 <_malloc_r>
    552e:	2800      	cmp	r0, #0
    5530:	d108      	bne.n	5544 <__smakebuf_r+0x44>
    5532:	220c      	movs	r2, #12
    5534:	5ea3      	ldrsh	r3, [r4, r2]
    5536:	059a      	lsls	r2, r3, #22
    5538:	d4ef      	bmi.n	551a <__smakebuf_r+0x1a>
    553a:	2203      	movs	r2, #3
    553c:	4393      	bics	r3, r2
    553e:	431e      	orrs	r6, r3
    5540:	81a6      	strh	r6, [r4, #12]
    5542:	e7e4      	b.n	550e <__smakebuf_r+0xe>
    5544:	4b0f      	ldr	r3, [pc, #60]	; (5584 <__smakebuf_r+0x84>)
    5546:	62ab      	str	r3, [r5, #40]	; 0x28
    5548:	2380      	movs	r3, #128	; 0x80
    554a:	89a2      	ldrh	r2, [r4, #12]
    554c:	6020      	str	r0, [r4, #0]
    554e:	4313      	orrs	r3, r2
    5550:	81a3      	strh	r3, [r4, #12]
    5552:	9b00      	ldr	r3, [sp, #0]
    5554:	6120      	str	r0, [r4, #16]
    5556:	6163      	str	r3, [r4, #20]
    5558:	9b01      	ldr	r3, [sp, #4]
    555a:	2b00      	cmp	r3, #0
    555c:	d00d      	beq.n	557a <__smakebuf_r+0x7a>
    555e:	230e      	movs	r3, #14
    5560:	5ee1      	ldrsh	r1, [r4, r3]
    5562:	0028      	movs	r0, r5
    5564:	f000 fb62 	bl	5c2c <_isatty_r>
    5568:	2800      	cmp	r0, #0
    556a:	d006      	beq.n	557a <__smakebuf_r+0x7a>
    556c:	2203      	movs	r2, #3
    556e:	89a3      	ldrh	r3, [r4, #12]
    5570:	4393      	bics	r3, r2
    5572:	001a      	movs	r2, r3
    5574:	2301      	movs	r3, #1
    5576:	4313      	orrs	r3, r2
    5578:	81a3      	strh	r3, [r4, #12]
    557a:	89a0      	ldrh	r0, [r4, #12]
    557c:	4338      	orrs	r0, r7
    557e:	81a0      	strh	r0, [r4, #12]
    5580:	e7cb      	b.n	551a <__smakebuf_r+0x1a>
    5582:	46c0      	nop			; (mov r8, r8)
    5584:	00005301 	.word	0x00005301

00005588 <__malloc_lock>:
    5588:	4770      	bx	lr

0000558a <__malloc_unlock>:
    558a:	4770      	bx	lr

0000558c <__sfputc_r>:
    558c:	6893      	ldr	r3, [r2, #8]
    558e:	b510      	push	{r4, lr}
    5590:	3b01      	subs	r3, #1
    5592:	6093      	str	r3, [r2, #8]
    5594:	2b00      	cmp	r3, #0
    5596:	da05      	bge.n	55a4 <__sfputc_r+0x18>
    5598:	6994      	ldr	r4, [r2, #24]
    559a:	42a3      	cmp	r3, r4
    559c:	db08      	blt.n	55b0 <__sfputc_r+0x24>
    559e:	b2cb      	uxtb	r3, r1
    55a0:	2b0a      	cmp	r3, #10
    55a2:	d005      	beq.n	55b0 <__sfputc_r+0x24>
    55a4:	6813      	ldr	r3, [r2, #0]
    55a6:	1c58      	adds	r0, r3, #1
    55a8:	6010      	str	r0, [r2, #0]
    55aa:	7019      	strb	r1, [r3, #0]
    55ac:	b2c8      	uxtb	r0, r1
    55ae:	bd10      	pop	{r4, pc}
    55b0:	f7ff fd18 	bl	4fe4 <__swbuf_r>
    55b4:	e7fb      	b.n	55ae <__sfputc_r+0x22>

000055b6 <__sfputs_r>:
    55b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55b8:	0006      	movs	r6, r0
    55ba:	000f      	movs	r7, r1
    55bc:	0014      	movs	r4, r2
    55be:	18d5      	adds	r5, r2, r3
    55c0:	42ac      	cmp	r4, r5
    55c2:	d101      	bne.n	55c8 <__sfputs_r+0x12>
    55c4:	2000      	movs	r0, #0
    55c6:	e007      	b.n	55d8 <__sfputs_r+0x22>
    55c8:	7821      	ldrb	r1, [r4, #0]
    55ca:	003a      	movs	r2, r7
    55cc:	0030      	movs	r0, r6
    55ce:	f7ff ffdd 	bl	558c <__sfputc_r>
    55d2:	3401      	adds	r4, #1
    55d4:	1c43      	adds	r3, r0, #1
    55d6:	d1f3      	bne.n	55c0 <__sfputs_r+0xa>
    55d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000055dc <_vfiprintf_r>:
    55dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    55de:	b09f      	sub	sp, #124	; 0x7c
    55e0:	0006      	movs	r6, r0
    55e2:	000f      	movs	r7, r1
    55e4:	0014      	movs	r4, r2
    55e6:	9305      	str	r3, [sp, #20]
    55e8:	2800      	cmp	r0, #0
    55ea:	d004      	beq.n	55f6 <_vfiprintf_r+0x1a>
    55ec:	6983      	ldr	r3, [r0, #24]
    55ee:	2b00      	cmp	r3, #0
    55f0:	d101      	bne.n	55f6 <_vfiprintf_r+0x1a>
    55f2:	f7ff fec7 	bl	5384 <__sinit>
    55f6:	4b7f      	ldr	r3, [pc, #508]	; (57f4 <_vfiprintf_r+0x218>)
    55f8:	429f      	cmp	r7, r3
    55fa:	d15c      	bne.n	56b6 <_vfiprintf_r+0xda>
    55fc:	6877      	ldr	r7, [r6, #4]
    55fe:	89bb      	ldrh	r3, [r7, #12]
    5600:	071b      	lsls	r3, r3, #28
    5602:	d562      	bpl.n	56ca <_vfiprintf_r+0xee>
    5604:	693b      	ldr	r3, [r7, #16]
    5606:	2b00      	cmp	r3, #0
    5608:	d05f      	beq.n	56ca <_vfiprintf_r+0xee>
    560a:	2300      	movs	r3, #0
    560c:	ad06      	add	r5, sp, #24
    560e:	616b      	str	r3, [r5, #20]
    5610:	3320      	adds	r3, #32
    5612:	766b      	strb	r3, [r5, #25]
    5614:	3310      	adds	r3, #16
    5616:	76ab      	strb	r3, [r5, #26]
    5618:	9402      	str	r4, [sp, #8]
    561a:	9c02      	ldr	r4, [sp, #8]
    561c:	7823      	ldrb	r3, [r4, #0]
    561e:	2b00      	cmp	r3, #0
    5620:	d15d      	bne.n	56de <_vfiprintf_r+0x102>
    5622:	9b02      	ldr	r3, [sp, #8]
    5624:	1ae3      	subs	r3, r4, r3
    5626:	9304      	str	r3, [sp, #16]
    5628:	d00d      	beq.n	5646 <_vfiprintf_r+0x6a>
    562a:	9b04      	ldr	r3, [sp, #16]
    562c:	9a02      	ldr	r2, [sp, #8]
    562e:	0039      	movs	r1, r7
    5630:	0030      	movs	r0, r6
    5632:	f7ff ffc0 	bl	55b6 <__sfputs_r>
    5636:	1c43      	adds	r3, r0, #1
    5638:	d100      	bne.n	563c <_vfiprintf_r+0x60>
    563a:	e0cc      	b.n	57d6 <_vfiprintf_r+0x1fa>
    563c:	696a      	ldr	r2, [r5, #20]
    563e:	9b04      	ldr	r3, [sp, #16]
    5640:	4694      	mov	ip, r2
    5642:	4463      	add	r3, ip
    5644:	616b      	str	r3, [r5, #20]
    5646:	7823      	ldrb	r3, [r4, #0]
    5648:	2b00      	cmp	r3, #0
    564a:	d100      	bne.n	564e <_vfiprintf_r+0x72>
    564c:	e0c3      	b.n	57d6 <_vfiprintf_r+0x1fa>
    564e:	2201      	movs	r2, #1
    5650:	2300      	movs	r3, #0
    5652:	4252      	negs	r2, r2
    5654:	606a      	str	r2, [r5, #4]
    5656:	a902      	add	r1, sp, #8
    5658:	3254      	adds	r2, #84	; 0x54
    565a:	1852      	adds	r2, r2, r1
    565c:	3401      	adds	r4, #1
    565e:	602b      	str	r3, [r5, #0]
    5660:	60eb      	str	r3, [r5, #12]
    5662:	60ab      	str	r3, [r5, #8]
    5664:	7013      	strb	r3, [r2, #0]
    5666:	65ab      	str	r3, [r5, #88]	; 0x58
    5668:	7821      	ldrb	r1, [r4, #0]
    566a:	2205      	movs	r2, #5
    566c:	4862      	ldr	r0, [pc, #392]	; (57f8 <_vfiprintf_r+0x21c>)
    566e:	f000 fb03 	bl	5c78 <memchr>
    5672:	1c63      	adds	r3, r4, #1
    5674:	469c      	mov	ip, r3
    5676:	2800      	cmp	r0, #0
    5678:	d135      	bne.n	56e6 <_vfiprintf_r+0x10a>
    567a:	6829      	ldr	r1, [r5, #0]
    567c:	06cb      	lsls	r3, r1, #27
    567e:	d504      	bpl.n	568a <_vfiprintf_r+0xae>
    5680:	2353      	movs	r3, #83	; 0x53
    5682:	aa02      	add	r2, sp, #8
    5684:	3020      	adds	r0, #32
    5686:	189b      	adds	r3, r3, r2
    5688:	7018      	strb	r0, [r3, #0]
    568a:	070b      	lsls	r3, r1, #28
    568c:	d504      	bpl.n	5698 <_vfiprintf_r+0xbc>
    568e:	2353      	movs	r3, #83	; 0x53
    5690:	202b      	movs	r0, #43	; 0x2b
    5692:	aa02      	add	r2, sp, #8
    5694:	189b      	adds	r3, r3, r2
    5696:	7018      	strb	r0, [r3, #0]
    5698:	7823      	ldrb	r3, [r4, #0]
    569a:	2b2a      	cmp	r3, #42	; 0x2a
    569c:	d02c      	beq.n	56f8 <_vfiprintf_r+0x11c>
    569e:	2000      	movs	r0, #0
    56a0:	210a      	movs	r1, #10
    56a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    56a4:	7822      	ldrb	r2, [r4, #0]
    56a6:	3a30      	subs	r2, #48	; 0x30
    56a8:	2a09      	cmp	r2, #9
    56aa:	d800      	bhi.n	56ae <_vfiprintf_r+0xd2>
    56ac:	e06b      	b.n	5786 <_vfiprintf_r+0x1aa>
    56ae:	2800      	cmp	r0, #0
    56b0:	d02a      	beq.n	5708 <_vfiprintf_r+0x12c>
    56b2:	9309      	str	r3, [sp, #36]	; 0x24
    56b4:	e028      	b.n	5708 <_vfiprintf_r+0x12c>
    56b6:	4b51      	ldr	r3, [pc, #324]	; (57fc <_vfiprintf_r+0x220>)
    56b8:	429f      	cmp	r7, r3
    56ba:	d101      	bne.n	56c0 <_vfiprintf_r+0xe4>
    56bc:	68b7      	ldr	r7, [r6, #8]
    56be:	e79e      	b.n	55fe <_vfiprintf_r+0x22>
    56c0:	4b4f      	ldr	r3, [pc, #316]	; (5800 <_vfiprintf_r+0x224>)
    56c2:	429f      	cmp	r7, r3
    56c4:	d19b      	bne.n	55fe <_vfiprintf_r+0x22>
    56c6:	68f7      	ldr	r7, [r6, #12]
    56c8:	e799      	b.n	55fe <_vfiprintf_r+0x22>
    56ca:	0039      	movs	r1, r7
    56cc:	0030      	movs	r0, r6
    56ce:	f7ff fceb 	bl	50a8 <__swsetup_r>
    56d2:	2800      	cmp	r0, #0
    56d4:	d099      	beq.n	560a <_vfiprintf_r+0x2e>
    56d6:	2001      	movs	r0, #1
    56d8:	4240      	negs	r0, r0
    56da:	b01f      	add	sp, #124	; 0x7c
    56dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56de:	2b25      	cmp	r3, #37	; 0x25
    56e0:	d09f      	beq.n	5622 <_vfiprintf_r+0x46>
    56e2:	3401      	adds	r4, #1
    56e4:	e79a      	b.n	561c <_vfiprintf_r+0x40>
    56e6:	4b44      	ldr	r3, [pc, #272]	; (57f8 <_vfiprintf_r+0x21c>)
    56e8:	6829      	ldr	r1, [r5, #0]
    56ea:	1ac0      	subs	r0, r0, r3
    56ec:	2301      	movs	r3, #1
    56ee:	4083      	lsls	r3, r0
    56f0:	430b      	orrs	r3, r1
    56f2:	602b      	str	r3, [r5, #0]
    56f4:	4664      	mov	r4, ip
    56f6:	e7b7      	b.n	5668 <_vfiprintf_r+0x8c>
    56f8:	9b05      	ldr	r3, [sp, #20]
    56fa:	1d18      	adds	r0, r3, #4
    56fc:	681b      	ldr	r3, [r3, #0]
    56fe:	9005      	str	r0, [sp, #20]
    5700:	2b00      	cmp	r3, #0
    5702:	db3a      	blt.n	577a <_vfiprintf_r+0x19e>
    5704:	9309      	str	r3, [sp, #36]	; 0x24
    5706:	4664      	mov	r4, ip
    5708:	7823      	ldrb	r3, [r4, #0]
    570a:	2b2e      	cmp	r3, #46	; 0x2e
    570c:	d10b      	bne.n	5726 <_vfiprintf_r+0x14a>
    570e:	7863      	ldrb	r3, [r4, #1]
    5710:	1c62      	adds	r2, r4, #1
    5712:	2b2a      	cmp	r3, #42	; 0x2a
    5714:	d13f      	bne.n	5796 <_vfiprintf_r+0x1ba>
    5716:	9b05      	ldr	r3, [sp, #20]
    5718:	3402      	adds	r4, #2
    571a:	1d1a      	adds	r2, r3, #4
    571c:	681b      	ldr	r3, [r3, #0]
    571e:	9205      	str	r2, [sp, #20]
    5720:	2b00      	cmp	r3, #0
    5722:	db35      	blt.n	5790 <_vfiprintf_r+0x1b4>
    5724:	9307      	str	r3, [sp, #28]
    5726:	7821      	ldrb	r1, [r4, #0]
    5728:	2203      	movs	r2, #3
    572a:	4836      	ldr	r0, [pc, #216]	; (5804 <_vfiprintf_r+0x228>)
    572c:	f000 faa4 	bl	5c78 <memchr>
    5730:	2800      	cmp	r0, #0
    5732:	d007      	beq.n	5744 <_vfiprintf_r+0x168>
    5734:	4b33      	ldr	r3, [pc, #204]	; (5804 <_vfiprintf_r+0x228>)
    5736:	682a      	ldr	r2, [r5, #0]
    5738:	1ac0      	subs	r0, r0, r3
    573a:	2340      	movs	r3, #64	; 0x40
    573c:	4083      	lsls	r3, r0
    573e:	4313      	orrs	r3, r2
    5740:	602b      	str	r3, [r5, #0]
    5742:	3401      	adds	r4, #1
    5744:	7821      	ldrb	r1, [r4, #0]
    5746:	1c63      	adds	r3, r4, #1
    5748:	2206      	movs	r2, #6
    574a:	482f      	ldr	r0, [pc, #188]	; (5808 <_vfiprintf_r+0x22c>)
    574c:	9302      	str	r3, [sp, #8]
    574e:	7629      	strb	r1, [r5, #24]
    5750:	f000 fa92 	bl	5c78 <memchr>
    5754:	2800      	cmp	r0, #0
    5756:	d044      	beq.n	57e2 <_vfiprintf_r+0x206>
    5758:	4b2c      	ldr	r3, [pc, #176]	; (580c <_vfiprintf_r+0x230>)
    575a:	2b00      	cmp	r3, #0
    575c:	d12f      	bne.n	57be <_vfiprintf_r+0x1e2>
    575e:	6829      	ldr	r1, [r5, #0]
    5760:	9b05      	ldr	r3, [sp, #20]
    5762:	2207      	movs	r2, #7
    5764:	05c9      	lsls	r1, r1, #23
    5766:	d528      	bpl.n	57ba <_vfiprintf_r+0x1de>
    5768:	189b      	adds	r3, r3, r2
    576a:	4393      	bics	r3, r2
    576c:	3308      	adds	r3, #8
    576e:	9305      	str	r3, [sp, #20]
    5770:	696b      	ldr	r3, [r5, #20]
    5772:	9a03      	ldr	r2, [sp, #12]
    5774:	189b      	adds	r3, r3, r2
    5776:	616b      	str	r3, [r5, #20]
    5778:	e74f      	b.n	561a <_vfiprintf_r+0x3e>
    577a:	425b      	negs	r3, r3
    577c:	60eb      	str	r3, [r5, #12]
    577e:	2302      	movs	r3, #2
    5780:	430b      	orrs	r3, r1
    5782:	602b      	str	r3, [r5, #0]
    5784:	e7bf      	b.n	5706 <_vfiprintf_r+0x12a>
    5786:	434b      	muls	r3, r1
    5788:	3401      	adds	r4, #1
    578a:	189b      	adds	r3, r3, r2
    578c:	2001      	movs	r0, #1
    578e:	e789      	b.n	56a4 <_vfiprintf_r+0xc8>
    5790:	2301      	movs	r3, #1
    5792:	425b      	negs	r3, r3
    5794:	e7c6      	b.n	5724 <_vfiprintf_r+0x148>
    5796:	2300      	movs	r3, #0
    5798:	0014      	movs	r4, r2
    579a:	200a      	movs	r0, #10
    579c:	001a      	movs	r2, r3
    579e:	606b      	str	r3, [r5, #4]
    57a0:	7821      	ldrb	r1, [r4, #0]
    57a2:	3930      	subs	r1, #48	; 0x30
    57a4:	2909      	cmp	r1, #9
    57a6:	d903      	bls.n	57b0 <_vfiprintf_r+0x1d4>
    57a8:	2b00      	cmp	r3, #0
    57aa:	d0bc      	beq.n	5726 <_vfiprintf_r+0x14a>
    57ac:	9207      	str	r2, [sp, #28]
    57ae:	e7ba      	b.n	5726 <_vfiprintf_r+0x14a>
    57b0:	4342      	muls	r2, r0
    57b2:	3401      	adds	r4, #1
    57b4:	1852      	adds	r2, r2, r1
    57b6:	2301      	movs	r3, #1
    57b8:	e7f2      	b.n	57a0 <_vfiprintf_r+0x1c4>
    57ba:	3307      	adds	r3, #7
    57bc:	e7d5      	b.n	576a <_vfiprintf_r+0x18e>
    57be:	ab05      	add	r3, sp, #20
    57c0:	9300      	str	r3, [sp, #0]
    57c2:	003a      	movs	r2, r7
    57c4:	4b12      	ldr	r3, [pc, #72]	; (5810 <_vfiprintf_r+0x234>)
    57c6:	0029      	movs	r1, r5
    57c8:	0030      	movs	r0, r6
    57ca:	e000      	b.n	57ce <_vfiprintf_r+0x1f2>
    57cc:	bf00      	nop
    57ce:	9003      	str	r0, [sp, #12]
    57d0:	9b03      	ldr	r3, [sp, #12]
    57d2:	3301      	adds	r3, #1
    57d4:	d1cc      	bne.n	5770 <_vfiprintf_r+0x194>
    57d6:	89bb      	ldrh	r3, [r7, #12]
    57d8:	065b      	lsls	r3, r3, #25
    57da:	d500      	bpl.n	57de <_vfiprintf_r+0x202>
    57dc:	e77b      	b.n	56d6 <_vfiprintf_r+0xfa>
    57de:	980b      	ldr	r0, [sp, #44]	; 0x2c
    57e0:	e77b      	b.n	56da <_vfiprintf_r+0xfe>
    57e2:	ab05      	add	r3, sp, #20
    57e4:	9300      	str	r3, [sp, #0]
    57e6:	003a      	movs	r2, r7
    57e8:	4b09      	ldr	r3, [pc, #36]	; (5810 <_vfiprintf_r+0x234>)
    57ea:	0029      	movs	r1, r5
    57ec:	0030      	movs	r0, r6
    57ee:	f000 f87f 	bl	58f0 <_printf_i>
    57f2:	e7ec      	b.n	57ce <_vfiprintf_r+0x1f2>
    57f4:	0000667c 	.word	0x0000667c
    57f8:	000066bc 	.word	0x000066bc
    57fc:	0000669c 	.word	0x0000669c
    5800:	0000665c 	.word	0x0000665c
    5804:	000066c2 	.word	0x000066c2
    5808:	000066c6 	.word	0x000066c6
    580c:	00000000 	.word	0x00000000
    5810:	000055b7 	.word	0x000055b7

00005814 <_printf_common>:
    5814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5816:	0015      	movs	r5, r2
    5818:	9301      	str	r3, [sp, #4]
    581a:	688a      	ldr	r2, [r1, #8]
    581c:	690b      	ldr	r3, [r1, #16]
    581e:	9000      	str	r0, [sp, #0]
    5820:	000c      	movs	r4, r1
    5822:	4293      	cmp	r3, r2
    5824:	da00      	bge.n	5828 <_printf_common+0x14>
    5826:	0013      	movs	r3, r2
    5828:	0022      	movs	r2, r4
    582a:	602b      	str	r3, [r5, #0]
    582c:	3243      	adds	r2, #67	; 0x43
    582e:	7812      	ldrb	r2, [r2, #0]
    5830:	2a00      	cmp	r2, #0
    5832:	d001      	beq.n	5838 <_printf_common+0x24>
    5834:	3301      	adds	r3, #1
    5836:	602b      	str	r3, [r5, #0]
    5838:	6823      	ldr	r3, [r4, #0]
    583a:	069b      	lsls	r3, r3, #26
    583c:	d502      	bpl.n	5844 <_printf_common+0x30>
    583e:	682b      	ldr	r3, [r5, #0]
    5840:	3302      	adds	r3, #2
    5842:	602b      	str	r3, [r5, #0]
    5844:	2706      	movs	r7, #6
    5846:	6823      	ldr	r3, [r4, #0]
    5848:	401f      	ands	r7, r3
    584a:	d027      	beq.n	589c <_printf_common+0x88>
    584c:	0023      	movs	r3, r4
    584e:	3343      	adds	r3, #67	; 0x43
    5850:	781b      	ldrb	r3, [r3, #0]
    5852:	1e5a      	subs	r2, r3, #1
    5854:	4193      	sbcs	r3, r2
    5856:	6822      	ldr	r2, [r4, #0]
    5858:	0692      	lsls	r2, r2, #26
    585a:	d430      	bmi.n	58be <_printf_common+0xaa>
    585c:	0022      	movs	r2, r4
    585e:	9901      	ldr	r1, [sp, #4]
    5860:	3243      	adds	r2, #67	; 0x43
    5862:	9800      	ldr	r0, [sp, #0]
    5864:	9e08      	ldr	r6, [sp, #32]
    5866:	47b0      	blx	r6
    5868:	1c43      	adds	r3, r0, #1
    586a:	d025      	beq.n	58b8 <_printf_common+0xa4>
    586c:	2306      	movs	r3, #6
    586e:	6820      	ldr	r0, [r4, #0]
    5870:	682a      	ldr	r2, [r5, #0]
    5872:	68e1      	ldr	r1, [r4, #12]
    5874:	4003      	ands	r3, r0
    5876:	2500      	movs	r5, #0
    5878:	2b04      	cmp	r3, #4
    587a:	d103      	bne.n	5884 <_printf_common+0x70>
    587c:	1a8d      	subs	r5, r1, r2
    587e:	43eb      	mvns	r3, r5
    5880:	17db      	asrs	r3, r3, #31
    5882:	401d      	ands	r5, r3
    5884:	68a3      	ldr	r3, [r4, #8]
    5886:	6922      	ldr	r2, [r4, #16]
    5888:	4293      	cmp	r3, r2
    588a:	dd01      	ble.n	5890 <_printf_common+0x7c>
    588c:	1a9b      	subs	r3, r3, r2
    588e:	18ed      	adds	r5, r5, r3
    5890:	2700      	movs	r7, #0
    5892:	42bd      	cmp	r5, r7
    5894:	d120      	bne.n	58d8 <_printf_common+0xc4>
    5896:	2000      	movs	r0, #0
    5898:	e010      	b.n	58bc <_printf_common+0xa8>
    589a:	3701      	adds	r7, #1
    589c:	68e3      	ldr	r3, [r4, #12]
    589e:	682a      	ldr	r2, [r5, #0]
    58a0:	1a9b      	subs	r3, r3, r2
    58a2:	429f      	cmp	r7, r3
    58a4:	dad2      	bge.n	584c <_printf_common+0x38>
    58a6:	0022      	movs	r2, r4
    58a8:	2301      	movs	r3, #1
    58aa:	3219      	adds	r2, #25
    58ac:	9901      	ldr	r1, [sp, #4]
    58ae:	9800      	ldr	r0, [sp, #0]
    58b0:	9e08      	ldr	r6, [sp, #32]
    58b2:	47b0      	blx	r6
    58b4:	1c43      	adds	r3, r0, #1
    58b6:	d1f0      	bne.n	589a <_printf_common+0x86>
    58b8:	2001      	movs	r0, #1
    58ba:	4240      	negs	r0, r0
    58bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    58be:	2030      	movs	r0, #48	; 0x30
    58c0:	18e1      	adds	r1, r4, r3
    58c2:	3143      	adds	r1, #67	; 0x43
    58c4:	7008      	strb	r0, [r1, #0]
    58c6:	0021      	movs	r1, r4
    58c8:	1c5a      	adds	r2, r3, #1
    58ca:	3145      	adds	r1, #69	; 0x45
    58cc:	7809      	ldrb	r1, [r1, #0]
    58ce:	18a2      	adds	r2, r4, r2
    58d0:	3243      	adds	r2, #67	; 0x43
    58d2:	3302      	adds	r3, #2
    58d4:	7011      	strb	r1, [r2, #0]
    58d6:	e7c1      	b.n	585c <_printf_common+0x48>
    58d8:	0022      	movs	r2, r4
    58da:	2301      	movs	r3, #1
    58dc:	321a      	adds	r2, #26
    58de:	9901      	ldr	r1, [sp, #4]
    58e0:	9800      	ldr	r0, [sp, #0]
    58e2:	9e08      	ldr	r6, [sp, #32]
    58e4:	47b0      	blx	r6
    58e6:	1c43      	adds	r3, r0, #1
    58e8:	d0e6      	beq.n	58b8 <_printf_common+0xa4>
    58ea:	3701      	adds	r7, #1
    58ec:	e7d1      	b.n	5892 <_printf_common+0x7e>
	...

000058f0 <_printf_i>:
    58f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58f2:	b08b      	sub	sp, #44	; 0x2c
    58f4:	9206      	str	r2, [sp, #24]
    58f6:	000a      	movs	r2, r1
    58f8:	3243      	adds	r2, #67	; 0x43
    58fa:	9307      	str	r3, [sp, #28]
    58fc:	9005      	str	r0, [sp, #20]
    58fe:	9204      	str	r2, [sp, #16]
    5900:	7e0a      	ldrb	r2, [r1, #24]
    5902:	000c      	movs	r4, r1
    5904:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5906:	2a6e      	cmp	r2, #110	; 0x6e
    5908:	d100      	bne.n	590c <_printf_i+0x1c>
    590a:	e08f      	b.n	5a2c <_printf_i+0x13c>
    590c:	d817      	bhi.n	593e <_printf_i+0x4e>
    590e:	2a63      	cmp	r2, #99	; 0x63
    5910:	d02c      	beq.n	596c <_printf_i+0x7c>
    5912:	d808      	bhi.n	5926 <_printf_i+0x36>
    5914:	2a00      	cmp	r2, #0
    5916:	d100      	bne.n	591a <_printf_i+0x2a>
    5918:	e099      	b.n	5a4e <_printf_i+0x15e>
    591a:	2a58      	cmp	r2, #88	; 0x58
    591c:	d054      	beq.n	59c8 <_printf_i+0xd8>
    591e:	0026      	movs	r6, r4
    5920:	3642      	adds	r6, #66	; 0x42
    5922:	7032      	strb	r2, [r6, #0]
    5924:	e029      	b.n	597a <_printf_i+0x8a>
    5926:	2a64      	cmp	r2, #100	; 0x64
    5928:	d001      	beq.n	592e <_printf_i+0x3e>
    592a:	2a69      	cmp	r2, #105	; 0x69
    592c:	d1f7      	bne.n	591e <_printf_i+0x2e>
    592e:	6821      	ldr	r1, [r4, #0]
    5930:	681a      	ldr	r2, [r3, #0]
    5932:	0608      	lsls	r0, r1, #24
    5934:	d523      	bpl.n	597e <_printf_i+0x8e>
    5936:	1d11      	adds	r1, r2, #4
    5938:	6019      	str	r1, [r3, #0]
    593a:	6815      	ldr	r5, [r2, #0]
    593c:	e025      	b.n	598a <_printf_i+0x9a>
    593e:	2a73      	cmp	r2, #115	; 0x73
    5940:	d100      	bne.n	5944 <_printf_i+0x54>
    5942:	e088      	b.n	5a56 <_printf_i+0x166>
    5944:	d808      	bhi.n	5958 <_printf_i+0x68>
    5946:	2a6f      	cmp	r2, #111	; 0x6f
    5948:	d029      	beq.n	599e <_printf_i+0xae>
    594a:	2a70      	cmp	r2, #112	; 0x70
    594c:	d1e7      	bne.n	591e <_printf_i+0x2e>
    594e:	2220      	movs	r2, #32
    5950:	6809      	ldr	r1, [r1, #0]
    5952:	430a      	orrs	r2, r1
    5954:	6022      	str	r2, [r4, #0]
    5956:	e003      	b.n	5960 <_printf_i+0x70>
    5958:	2a75      	cmp	r2, #117	; 0x75
    595a:	d020      	beq.n	599e <_printf_i+0xae>
    595c:	2a78      	cmp	r2, #120	; 0x78
    595e:	d1de      	bne.n	591e <_printf_i+0x2e>
    5960:	0022      	movs	r2, r4
    5962:	2178      	movs	r1, #120	; 0x78
    5964:	3245      	adds	r2, #69	; 0x45
    5966:	7011      	strb	r1, [r2, #0]
    5968:	4a6c      	ldr	r2, [pc, #432]	; (5b1c <_printf_i+0x22c>)
    596a:	e030      	b.n	59ce <_printf_i+0xde>
    596c:	000e      	movs	r6, r1
    596e:	681a      	ldr	r2, [r3, #0]
    5970:	3642      	adds	r6, #66	; 0x42
    5972:	1d11      	adds	r1, r2, #4
    5974:	6019      	str	r1, [r3, #0]
    5976:	6813      	ldr	r3, [r2, #0]
    5978:	7033      	strb	r3, [r6, #0]
    597a:	2301      	movs	r3, #1
    597c:	e079      	b.n	5a72 <_printf_i+0x182>
    597e:	0649      	lsls	r1, r1, #25
    5980:	d5d9      	bpl.n	5936 <_printf_i+0x46>
    5982:	1d11      	adds	r1, r2, #4
    5984:	6019      	str	r1, [r3, #0]
    5986:	2300      	movs	r3, #0
    5988:	5ed5      	ldrsh	r5, [r2, r3]
    598a:	2d00      	cmp	r5, #0
    598c:	da03      	bge.n	5996 <_printf_i+0xa6>
    598e:	232d      	movs	r3, #45	; 0x2d
    5990:	9a04      	ldr	r2, [sp, #16]
    5992:	426d      	negs	r5, r5
    5994:	7013      	strb	r3, [r2, #0]
    5996:	4b62      	ldr	r3, [pc, #392]	; (5b20 <_printf_i+0x230>)
    5998:	270a      	movs	r7, #10
    599a:	9303      	str	r3, [sp, #12]
    599c:	e02f      	b.n	59fe <_printf_i+0x10e>
    599e:	6820      	ldr	r0, [r4, #0]
    59a0:	6819      	ldr	r1, [r3, #0]
    59a2:	0605      	lsls	r5, r0, #24
    59a4:	d503      	bpl.n	59ae <_printf_i+0xbe>
    59a6:	1d08      	adds	r0, r1, #4
    59a8:	6018      	str	r0, [r3, #0]
    59aa:	680d      	ldr	r5, [r1, #0]
    59ac:	e005      	b.n	59ba <_printf_i+0xca>
    59ae:	0640      	lsls	r0, r0, #25
    59b0:	d5f9      	bpl.n	59a6 <_printf_i+0xb6>
    59b2:	680d      	ldr	r5, [r1, #0]
    59b4:	1d08      	adds	r0, r1, #4
    59b6:	6018      	str	r0, [r3, #0]
    59b8:	b2ad      	uxth	r5, r5
    59ba:	4b59      	ldr	r3, [pc, #356]	; (5b20 <_printf_i+0x230>)
    59bc:	2708      	movs	r7, #8
    59be:	9303      	str	r3, [sp, #12]
    59c0:	2a6f      	cmp	r2, #111	; 0x6f
    59c2:	d018      	beq.n	59f6 <_printf_i+0x106>
    59c4:	270a      	movs	r7, #10
    59c6:	e016      	b.n	59f6 <_printf_i+0x106>
    59c8:	3145      	adds	r1, #69	; 0x45
    59ca:	700a      	strb	r2, [r1, #0]
    59cc:	4a54      	ldr	r2, [pc, #336]	; (5b20 <_printf_i+0x230>)
    59ce:	9203      	str	r2, [sp, #12]
    59d0:	681a      	ldr	r2, [r3, #0]
    59d2:	6821      	ldr	r1, [r4, #0]
    59d4:	1d10      	adds	r0, r2, #4
    59d6:	6018      	str	r0, [r3, #0]
    59d8:	6815      	ldr	r5, [r2, #0]
    59da:	0608      	lsls	r0, r1, #24
    59dc:	d522      	bpl.n	5a24 <_printf_i+0x134>
    59de:	07cb      	lsls	r3, r1, #31
    59e0:	d502      	bpl.n	59e8 <_printf_i+0xf8>
    59e2:	2320      	movs	r3, #32
    59e4:	4319      	orrs	r1, r3
    59e6:	6021      	str	r1, [r4, #0]
    59e8:	2710      	movs	r7, #16
    59ea:	2d00      	cmp	r5, #0
    59ec:	d103      	bne.n	59f6 <_printf_i+0x106>
    59ee:	2320      	movs	r3, #32
    59f0:	6822      	ldr	r2, [r4, #0]
    59f2:	439a      	bics	r2, r3
    59f4:	6022      	str	r2, [r4, #0]
    59f6:	0023      	movs	r3, r4
    59f8:	2200      	movs	r2, #0
    59fa:	3343      	adds	r3, #67	; 0x43
    59fc:	701a      	strb	r2, [r3, #0]
    59fe:	6863      	ldr	r3, [r4, #4]
    5a00:	60a3      	str	r3, [r4, #8]
    5a02:	2b00      	cmp	r3, #0
    5a04:	db5c      	blt.n	5ac0 <_printf_i+0x1d0>
    5a06:	2204      	movs	r2, #4
    5a08:	6821      	ldr	r1, [r4, #0]
    5a0a:	4391      	bics	r1, r2
    5a0c:	6021      	str	r1, [r4, #0]
    5a0e:	2d00      	cmp	r5, #0
    5a10:	d158      	bne.n	5ac4 <_printf_i+0x1d4>
    5a12:	9e04      	ldr	r6, [sp, #16]
    5a14:	2b00      	cmp	r3, #0
    5a16:	d064      	beq.n	5ae2 <_printf_i+0x1f2>
    5a18:	0026      	movs	r6, r4
    5a1a:	9b03      	ldr	r3, [sp, #12]
    5a1c:	3642      	adds	r6, #66	; 0x42
    5a1e:	781b      	ldrb	r3, [r3, #0]
    5a20:	7033      	strb	r3, [r6, #0]
    5a22:	e05e      	b.n	5ae2 <_printf_i+0x1f2>
    5a24:	0648      	lsls	r0, r1, #25
    5a26:	d5da      	bpl.n	59de <_printf_i+0xee>
    5a28:	b2ad      	uxth	r5, r5
    5a2a:	e7d8      	b.n	59de <_printf_i+0xee>
    5a2c:	6809      	ldr	r1, [r1, #0]
    5a2e:	681a      	ldr	r2, [r3, #0]
    5a30:	0608      	lsls	r0, r1, #24
    5a32:	d505      	bpl.n	5a40 <_printf_i+0x150>
    5a34:	1d11      	adds	r1, r2, #4
    5a36:	6019      	str	r1, [r3, #0]
    5a38:	6813      	ldr	r3, [r2, #0]
    5a3a:	6962      	ldr	r2, [r4, #20]
    5a3c:	601a      	str	r2, [r3, #0]
    5a3e:	e006      	b.n	5a4e <_printf_i+0x15e>
    5a40:	0649      	lsls	r1, r1, #25
    5a42:	d5f7      	bpl.n	5a34 <_printf_i+0x144>
    5a44:	1d11      	adds	r1, r2, #4
    5a46:	6019      	str	r1, [r3, #0]
    5a48:	6813      	ldr	r3, [r2, #0]
    5a4a:	8aa2      	ldrh	r2, [r4, #20]
    5a4c:	801a      	strh	r2, [r3, #0]
    5a4e:	2300      	movs	r3, #0
    5a50:	9e04      	ldr	r6, [sp, #16]
    5a52:	6123      	str	r3, [r4, #16]
    5a54:	e054      	b.n	5b00 <_printf_i+0x210>
    5a56:	681a      	ldr	r2, [r3, #0]
    5a58:	1d11      	adds	r1, r2, #4
    5a5a:	6019      	str	r1, [r3, #0]
    5a5c:	6816      	ldr	r6, [r2, #0]
    5a5e:	2100      	movs	r1, #0
    5a60:	6862      	ldr	r2, [r4, #4]
    5a62:	0030      	movs	r0, r6
    5a64:	f000 f908 	bl	5c78 <memchr>
    5a68:	2800      	cmp	r0, #0
    5a6a:	d001      	beq.n	5a70 <_printf_i+0x180>
    5a6c:	1b80      	subs	r0, r0, r6
    5a6e:	6060      	str	r0, [r4, #4]
    5a70:	6863      	ldr	r3, [r4, #4]
    5a72:	6123      	str	r3, [r4, #16]
    5a74:	2300      	movs	r3, #0
    5a76:	9a04      	ldr	r2, [sp, #16]
    5a78:	7013      	strb	r3, [r2, #0]
    5a7a:	e041      	b.n	5b00 <_printf_i+0x210>
    5a7c:	6923      	ldr	r3, [r4, #16]
    5a7e:	0032      	movs	r2, r6
    5a80:	9906      	ldr	r1, [sp, #24]
    5a82:	9805      	ldr	r0, [sp, #20]
    5a84:	9d07      	ldr	r5, [sp, #28]
    5a86:	47a8      	blx	r5
    5a88:	1c43      	adds	r3, r0, #1
    5a8a:	d043      	beq.n	5b14 <_printf_i+0x224>
    5a8c:	6823      	ldr	r3, [r4, #0]
    5a8e:	2500      	movs	r5, #0
    5a90:	079b      	lsls	r3, r3, #30
    5a92:	d40f      	bmi.n	5ab4 <_printf_i+0x1c4>
    5a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a96:	68e0      	ldr	r0, [r4, #12]
    5a98:	4298      	cmp	r0, r3
    5a9a:	da3d      	bge.n	5b18 <_printf_i+0x228>
    5a9c:	0018      	movs	r0, r3
    5a9e:	e03b      	b.n	5b18 <_printf_i+0x228>
    5aa0:	0022      	movs	r2, r4
    5aa2:	2301      	movs	r3, #1
    5aa4:	3219      	adds	r2, #25
    5aa6:	9906      	ldr	r1, [sp, #24]
    5aa8:	9805      	ldr	r0, [sp, #20]
    5aaa:	9e07      	ldr	r6, [sp, #28]
    5aac:	47b0      	blx	r6
    5aae:	1c43      	adds	r3, r0, #1
    5ab0:	d030      	beq.n	5b14 <_printf_i+0x224>
    5ab2:	3501      	adds	r5, #1
    5ab4:	68e3      	ldr	r3, [r4, #12]
    5ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5ab8:	1a9b      	subs	r3, r3, r2
    5aba:	429d      	cmp	r5, r3
    5abc:	dbf0      	blt.n	5aa0 <_printf_i+0x1b0>
    5abe:	e7e9      	b.n	5a94 <_printf_i+0x1a4>
    5ac0:	2d00      	cmp	r5, #0
    5ac2:	d0a9      	beq.n	5a18 <_printf_i+0x128>
    5ac4:	9e04      	ldr	r6, [sp, #16]
    5ac6:	0028      	movs	r0, r5
    5ac8:	0039      	movs	r1, r7
    5aca:	f7fd faf5 	bl	30b8 <__aeabi_uidivmod>
    5ace:	9b03      	ldr	r3, [sp, #12]
    5ad0:	3e01      	subs	r6, #1
    5ad2:	5c5b      	ldrb	r3, [r3, r1]
    5ad4:	0028      	movs	r0, r5
    5ad6:	7033      	strb	r3, [r6, #0]
    5ad8:	0039      	movs	r1, r7
    5ada:	f7fd fa67 	bl	2fac <__udivsi3>
    5ade:	1e05      	subs	r5, r0, #0
    5ae0:	d1f1      	bne.n	5ac6 <_printf_i+0x1d6>
    5ae2:	2f08      	cmp	r7, #8
    5ae4:	d109      	bne.n	5afa <_printf_i+0x20a>
    5ae6:	6823      	ldr	r3, [r4, #0]
    5ae8:	07db      	lsls	r3, r3, #31
    5aea:	d506      	bpl.n	5afa <_printf_i+0x20a>
    5aec:	6863      	ldr	r3, [r4, #4]
    5aee:	6922      	ldr	r2, [r4, #16]
    5af0:	4293      	cmp	r3, r2
    5af2:	dc02      	bgt.n	5afa <_printf_i+0x20a>
    5af4:	2330      	movs	r3, #48	; 0x30
    5af6:	3e01      	subs	r6, #1
    5af8:	7033      	strb	r3, [r6, #0]
    5afa:	9b04      	ldr	r3, [sp, #16]
    5afc:	1b9b      	subs	r3, r3, r6
    5afe:	6123      	str	r3, [r4, #16]
    5b00:	9b07      	ldr	r3, [sp, #28]
    5b02:	aa09      	add	r2, sp, #36	; 0x24
    5b04:	9300      	str	r3, [sp, #0]
    5b06:	0021      	movs	r1, r4
    5b08:	9b06      	ldr	r3, [sp, #24]
    5b0a:	9805      	ldr	r0, [sp, #20]
    5b0c:	f7ff fe82 	bl	5814 <_printf_common>
    5b10:	1c43      	adds	r3, r0, #1
    5b12:	d1b3      	bne.n	5a7c <_printf_i+0x18c>
    5b14:	2001      	movs	r0, #1
    5b16:	4240      	negs	r0, r0
    5b18:	b00b      	add	sp, #44	; 0x2c
    5b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b1c:	000066de 	.word	0x000066de
    5b20:	000066cd 	.word	0x000066cd

00005b24 <__sread>:
    5b24:	b570      	push	{r4, r5, r6, lr}
    5b26:	000c      	movs	r4, r1
    5b28:	250e      	movs	r5, #14
    5b2a:	5f49      	ldrsh	r1, [r1, r5]
    5b2c:	f000 f8b0 	bl	5c90 <_read_r>
    5b30:	2800      	cmp	r0, #0
    5b32:	db03      	blt.n	5b3c <__sread+0x18>
    5b34:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5b36:	181b      	adds	r3, r3, r0
    5b38:	6563      	str	r3, [r4, #84]	; 0x54
    5b3a:	bd70      	pop	{r4, r5, r6, pc}
    5b3c:	89a3      	ldrh	r3, [r4, #12]
    5b3e:	4a02      	ldr	r2, [pc, #8]	; (5b48 <__sread+0x24>)
    5b40:	4013      	ands	r3, r2
    5b42:	81a3      	strh	r3, [r4, #12]
    5b44:	e7f9      	b.n	5b3a <__sread+0x16>
    5b46:	46c0      	nop			; (mov r8, r8)
    5b48:	ffffefff 	.word	0xffffefff

00005b4c <__swrite>:
    5b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b4e:	001f      	movs	r7, r3
    5b50:	898b      	ldrh	r3, [r1, #12]
    5b52:	0005      	movs	r5, r0
    5b54:	000c      	movs	r4, r1
    5b56:	0016      	movs	r6, r2
    5b58:	05db      	lsls	r3, r3, #23
    5b5a:	d505      	bpl.n	5b68 <__swrite+0x1c>
    5b5c:	230e      	movs	r3, #14
    5b5e:	5ec9      	ldrsh	r1, [r1, r3]
    5b60:	2200      	movs	r2, #0
    5b62:	2302      	movs	r3, #2
    5b64:	f000 f874 	bl	5c50 <_lseek_r>
    5b68:	89a3      	ldrh	r3, [r4, #12]
    5b6a:	4a05      	ldr	r2, [pc, #20]	; (5b80 <__swrite+0x34>)
    5b6c:	0028      	movs	r0, r5
    5b6e:	4013      	ands	r3, r2
    5b70:	81a3      	strh	r3, [r4, #12]
    5b72:	0032      	movs	r2, r6
    5b74:	230e      	movs	r3, #14
    5b76:	5ee1      	ldrsh	r1, [r4, r3]
    5b78:	003b      	movs	r3, r7
    5b7a:	f000 f81f 	bl	5bbc <_write_r>
    5b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b80:	ffffefff 	.word	0xffffefff

00005b84 <__sseek>:
    5b84:	b570      	push	{r4, r5, r6, lr}
    5b86:	000c      	movs	r4, r1
    5b88:	250e      	movs	r5, #14
    5b8a:	5f49      	ldrsh	r1, [r1, r5]
    5b8c:	f000 f860 	bl	5c50 <_lseek_r>
    5b90:	89a3      	ldrh	r3, [r4, #12]
    5b92:	1c42      	adds	r2, r0, #1
    5b94:	d103      	bne.n	5b9e <__sseek+0x1a>
    5b96:	4a05      	ldr	r2, [pc, #20]	; (5bac <__sseek+0x28>)
    5b98:	4013      	ands	r3, r2
    5b9a:	81a3      	strh	r3, [r4, #12]
    5b9c:	bd70      	pop	{r4, r5, r6, pc}
    5b9e:	2280      	movs	r2, #128	; 0x80
    5ba0:	0152      	lsls	r2, r2, #5
    5ba2:	4313      	orrs	r3, r2
    5ba4:	81a3      	strh	r3, [r4, #12]
    5ba6:	6560      	str	r0, [r4, #84]	; 0x54
    5ba8:	e7f8      	b.n	5b9c <__sseek+0x18>
    5baa:	46c0      	nop			; (mov r8, r8)
    5bac:	ffffefff 	.word	0xffffefff

00005bb0 <__sclose>:
    5bb0:	b510      	push	{r4, lr}
    5bb2:	230e      	movs	r3, #14
    5bb4:	5ec9      	ldrsh	r1, [r1, r3]
    5bb6:	f000 f815 	bl	5be4 <_close_r>
    5bba:	bd10      	pop	{r4, pc}

00005bbc <_write_r>:
    5bbc:	b570      	push	{r4, r5, r6, lr}
    5bbe:	0005      	movs	r5, r0
    5bc0:	0008      	movs	r0, r1
    5bc2:	0011      	movs	r1, r2
    5bc4:	2200      	movs	r2, #0
    5bc6:	4c06      	ldr	r4, [pc, #24]	; (5be0 <_write_r+0x24>)
    5bc8:	6022      	str	r2, [r4, #0]
    5bca:	001a      	movs	r2, r3
    5bcc:	f7fb fbd4 	bl	1378 <_write>
    5bd0:	1c43      	adds	r3, r0, #1
    5bd2:	d103      	bne.n	5bdc <_write_r+0x20>
    5bd4:	6823      	ldr	r3, [r4, #0]
    5bd6:	2b00      	cmp	r3, #0
    5bd8:	d000      	beq.n	5bdc <_write_r+0x20>
    5bda:	602b      	str	r3, [r5, #0]
    5bdc:	bd70      	pop	{r4, r5, r6, pc}
    5bde:	46c0      	nop			; (mov r8, r8)
    5be0:	2000036c 	.word	0x2000036c

00005be4 <_close_r>:
    5be4:	2300      	movs	r3, #0
    5be6:	b570      	push	{r4, r5, r6, lr}
    5be8:	4c06      	ldr	r4, [pc, #24]	; (5c04 <_close_r+0x20>)
    5bea:	0005      	movs	r5, r0
    5bec:	0008      	movs	r0, r1
    5bee:	6023      	str	r3, [r4, #0]
    5bf0:	f7fc fc72 	bl	24d8 <_close>
    5bf4:	1c43      	adds	r3, r0, #1
    5bf6:	d103      	bne.n	5c00 <_close_r+0x1c>
    5bf8:	6823      	ldr	r3, [r4, #0]
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	d000      	beq.n	5c00 <_close_r+0x1c>
    5bfe:	602b      	str	r3, [r5, #0]
    5c00:	bd70      	pop	{r4, r5, r6, pc}
    5c02:	46c0      	nop			; (mov r8, r8)
    5c04:	2000036c 	.word	0x2000036c

00005c08 <_fstat_r>:
    5c08:	2300      	movs	r3, #0
    5c0a:	b570      	push	{r4, r5, r6, lr}
    5c0c:	4c06      	ldr	r4, [pc, #24]	; (5c28 <_fstat_r+0x20>)
    5c0e:	0005      	movs	r5, r0
    5c10:	0008      	movs	r0, r1
    5c12:	0011      	movs	r1, r2
    5c14:	6023      	str	r3, [r4, #0]
    5c16:	f7fc fc62 	bl	24de <_fstat>
    5c1a:	1c43      	adds	r3, r0, #1
    5c1c:	d103      	bne.n	5c26 <_fstat_r+0x1e>
    5c1e:	6823      	ldr	r3, [r4, #0]
    5c20:	2b00      	cmp	r3, #0
    5c22:	d000      	beq.n	5c26 <_fstat_r+0x1e>
    5c24:	602b      	str	r3, [r5, #0]
    5c26:	bd70      	pop	{r4, r5, r6, pc}
    5c28:	2000036c 	.word	0x2000036c

00005c2c <_isatty_r>:
    5c2c:	2300      	movs	r3, #0
    5c2e:	b570      	push	{r4, r5, r6, lr}
    5c30:	4c06      	ldr	r4, [pc, #24]	; (5c4c <_isatty_r+0x20>)
    5c32:	0005      	movs	r5, r0
    5c34:	0008      	movs	r0, r1
    5c36:	6023      	str	r3, [r4, #0]
    5c38:	f7fc fc56 	bl	24e8 <_isatty>
    5c3c:	1c43      	adds	r3, r0, #1
    5c3e:	d103      	bne.n	5c48 <_isatty_r+0x1c>
    5c40:	6823      	ldr	r3, [r4, #0]
    5c42:	2b00      	cmp	r3, #0
    5c44:	d000      	beq.n	5c48 <_isatty_r+0x1c>
    5c46:	602b      	str	r3, [r5, #0]
    5c48:	bd70      	pop	{r4, r5, r6, pc}
    5c4a:	46c0      	nop			; (mov r8, r8)
    5c4c:	2000036c 	.word	0x2000036c

00005c50 <_lseek_r>:
    5c50:	b570      	push	{r4, r5, r6, lr}
    5c52:	0005      	movs	r5, r0
    5c54:	0008      	movs	r0, r1
    5c56:	0011      	movs	r1, r2
    5c58:	2200      	movs	r2, #0
    5c5a:	4c06      	ldr	r4, [pc, #24]	; (5c74 <_lseek_r+0x24>)
    5c5c:	6022      	str	r2, [r4, #0]
    5c5e:	001a      	movs	r2, r3
    5c60:	f7fc fc44 	bl	24ec <_lseek>
    5c64:	1c43      	adds	r3, r0, #1
    5c66:	d103      	bne.n	5c70 <_lseek_r+0x20>
    5c68:	6823      	ldr	r3, [r4, #0]
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d000      	beq.n	5c70 <_lseek_r+0x20>
    5c6e:	602b      	str	r3, [r5, #0]
    5c70:	bd70      	pop	{r4, r5, r6, pc}
    5c72:	46c0      	nop			; (mov r8, r8)
    5c74:	2000036c 	.word	0x2000036c

00005c78 <memchr>:
    5c78:	b2c9      	uxtb	r1, r1
    5c7a:	1882      	adds	r2, r0, r2
    5c7c:	4290      	cmp	r0, r2
    5c7e:	d101      	bne.n	5c84 <memchr+0xc>
    5c80:	2000      	movs	r0, #0
    5c82:	4770      	bx	lr
    5c84:	7803      	ldrb	r3, [r0, #0]
    5c86:	428b      	cmp	r3, r1
    5c88:	d0fb      	beq.n	5c82 <memchr+0xa>
    5c8a:	3001      	adds	r0, #1
    5c8c:	e7f6      	b.n	5c7c <memchr+0x4>
	...

00005c90 <_read_r>:
    5c90:	b570      	push	{r4, r5, r6, lr}
    5c92:	0005      	movs	r5, r0
    5c94:	0008      	movs	r0, r1
    5c96:	0011      	movs	r1, r2
    5c98:	2200      	movs	r2, #0
    5c9a:	4c06      	ldr	r4, [pc, #24]	; (5cb4 <_read_r+0x24>)
    5c9c:	6022      	str	r2, [r4, #0]
    5c9e:	001a      	movs	r2, r3
    5ca0:	f7fb fb48 	bl	1334 <_read>
    5ca4:	1c43      	adds	r3, r0, #1
    5ca6:	d103      	bne.n	5cb0 <_read_r+0x20>
    5ca8:	6823      	ldr	r3, [r4, #0]
    5caa:	2b00      	cmp	r3, #0
    5cac:	d000      	beq.n	5cb0 <_read_r+0x20>
    5cae:	602b      	str	r3, [r5, #0]
    5cb0:	bd70      	pop	{r4, r5, r6, pc}
    5cb2:	46c0      	nop			; (mov r8, r8)
    5cb4:	2000036c 	.word	0x2000036c
    5cb8:	0000033a 	.word	0x0000033a
    5cbc:	00000580 	.word	0x00000580
    5cc0:	00000580 	.word	0x00000580
    5cc4:	00000580 	.word	0x00000580
    5cc8:	00000580 	.word	0x00000580
    5ccc:	00000580 	.word	0x00000580
    5cd0:	00000580 	.word	0x00000580
    5cd4:	00000580 	.word	0x00000580
    5cd8:	00000580 	.word	0x00000580
    5cdc:	00000580 	.word	0x00000580
    5ce0:	00000580 	.word	0x00000580
    5ce4:	00000580 	.word	0x00000580
    5ce8:	00000580 	.word	0x00000580
    5cec:	00000580 	.word	0x00000580
    5cf0:	00000580 	.word	0x00000580
    5cf4:	00000580 	.word	0x00000580
    5cf8:	00000322 	.word	0x00000322
    5cfc:	00000580 	.word	0x00000580
    5d00:	00000580 	.word	0x00000580
    5d04:	00000580 	.word	0x00000580
    5d08:	00000580 	.word	0x00000580
    5d0c:	00000580 	.word	0x00000580
    5d10:	00000580 	.word	0x00000580
    5d14:	00000580 	.word	0x00000580
    5d18:	00000580 	.word	0x00000580
    5d1c:	00000580 	.word	0x00000580
    5d20:	00000580 	.word	0x00000580
    5d24:	00000580 	.word	0x00000580
    5d28:	00000580 	.word	0x00000580
    5d2c:	00000580 	.word	0x00000580
    5d30:	00000580 	.word	0x00000580
    5d34:	00000580 	.word	0x00000580
    5d38:	00000332 	.word	0x00000332
    5d3c:	00000580 	.word	0x00000580
    5d40:	00000580 	.word	0x00000580
    5d44:	00000580 	.word	0x00000580
    5d48:	00000580 	.word	0x00000580
    5d4c:	00000580 	.word	0x00000580
    5d50:	00000580 	.word	0x00000580
    5d54:	00000580 	.word	0x00000580
    5d58:	00000580 	.word	0x00000580
    5d5c:	00000580 	.word	0x00000580
    5d60:	00000580 	.word	0x00000580
    5d64:	00000580 	.word	0x00000580
    5d68:	00000580 	.word	0x00000580
    5d6c:	00000580 	.word	0x00000580
    5d70:	00000580 	.word	0x00000580
    5d74:	00000580 	.word	0x00000580
    5d78:	0000032a 	.word	0x0000032a
    5d7c:	00000342 	.word	0x00000342
    5d80:	0000030a 	.word	0x0000030a
    5d84:	0000031a 	.word	0x0000031a
    5d88:	00000312 	.word	0x00000312
    5d8c:	00000002 	.word	0x00000002
    5d90:	00000003 	.word	0x00000003
    5d94:	00000028 	.word	0x00000028
    5d98:	00000029 	.word	0x00000029
    5d9c:	00000004 	.word	0x00000004
    5da0:	00000005 	.word	0x00000005
    5da4:	00000006 	.word	0x00000006
    5da8:	00000007 	.word	0x00000007
    5dac:	0000ffff 	.word	0x0000ffff
    5db0:	0000ffff 	.word	0x0000ffff
    5db4:	00000022 	.word	0x00000022
    5db8:	00000023 	.word	0x00000023
    5dbc:	0000ffff 	.word	0x0000ffff
    5dc0:	0000ffff 	.word	0x0000ffff
    5dc4:	0000ffff 	.word	0x0000ffff
    5dc8:	0000ffff 	.word	0x0000ffff
    5dcc:	00000008 	.word	0x00000008
    5dd0:	00000009 	.word	0x00000009
    5dd4:	0000000a 	.word	0x0000000a
    5dd8:	0000000b 	.word	0x0000000b
    5ddc:	42000800 	.word	0x42000800
    5de0:	42000c00 	.word	0x42000c00
    5de4:	42001000 	.word	0x42001000
    5de8:	42001400 	.word	0x42001400
    5dec:	42001800 	.word	0x42001800
    5df0:	42001c00 	.word	0x42001c00
    5df4:	00001c42 	.word	0x00001c42
    5df8:	00001c3e 	.word	0x00001c3e
    5dfc:	00001c3e 	.word	0x00001c3e
    5e00:	00001ca0 	.word	0x00001ca0
    5e04:	00001ca0 	.word	0x00001ca0
    5e08:	00001c56 	.word	0x00001c56
    5e0c:	00001c48 	.word	0x00001c48
    5e10:	00001c5c 	.word	0x00001c5c
    5e14:	00001c8e 	.word	0x00001c8e
    5e18:	00001e60 	.word	0x00001e60
    5e1c:	00001e40 	.word	0x00001e40
    5e20:	00001e40 	.word	0x00001e40
    5e24:	00001ecc 	.word	0x00001ecc
    5e28:	00001e52 	.word	0x00001e52
    5e2c:	00001e6e 	.word	0x00001e6e
    5e30:	00001e44 	.word	0x00001e44
    5e34:	00001e7c 	.word	0x00001e7c
    5e38:	00001ebc 	.word	0x00001ebc
    5e3c:	20434441 	.word	0x20434441
    5e40:	206e6163 	.word	0x206e6163
    5e44:	72727563 	.word	0x72727563
    5e48:	6c746e65 	.word	0x6c746e65
    5e4c:	6e6f2079 	.word	0x6e6f2079
    5e50:	6220796c 	.word	0x6220796c
    5e54:	6f632065 	.word	0x6f632065
    5e58:	6769666e 	.word	0x6769666e
    5e5c:	64657275 	.word	0x64657275
    5e60:	206e6f20 	.word	0x206e6f20
    5e64:	25632550 	.word	0x25632550
    5e68:	50202e64 	.word	0x50202e64
    5e6c:	7361656c 	.word	0x7361656c
    5e70:	72742065 	.word	0x72742065
    5e74:	67612079 	.word	0x67612079
    5e78:	2e6e6961 	.word	0x2e6e6961
    5e7c:	00000a0d 	.word	0x00000a0d
    5e80:	20434441 	.word	0x20434441
    5e84:	206e6163 	.word	0x206e6163
    5e88:	72727563 	.word	0x72727563
    5e8c:	6c746e65 	.word	0x6c746e65
    5e90:	6e6f2079 	.word	0x6e6f2079
    5e94:	6220796c 	.word	0x6220796c
    5e98:	6f632065 	.word	0x6f632065
    5e9c:	6769666e 	.word	0x6769666e
    5ea0:	64657275 	.word	0x64657275
    5ea4:	206e6f20 	.word	0x206e6f20
    5ea8:	64256325 	.word	0x64256325
    5eac:	6c50202e 	.word	0x6c50202e
    5eb0:	65736165 	.word	0x65736165
    5eb4:	79727420 	.word	0x79727420
    5eb8:	61676120 	.word	0x61676120
    5ebc:	0d2e6e69 	.word	0x0d2e6e69
    5ec0:	0000000a 	.word	0x0000000a
    5ec4:	206e6950 	.word	0x206e6950
    5ec8:	41206425 	.word	0x41206425
    5ecc:	76204344 	.word	0x76204344
    5ed0:	65756c61 	.word	0x65756c61
    5ed4:	6425203a 	.word	0x6425203a
    5ed8:	00000a0d 	.word	0x00000a0d
    5edc:	796c6e4f 	.word	0x796c6e4f
    5ee0:	25415020 	.word	0x25415020
    5ee4:	50202c64 	.word	0x50202c64
    5ee8:	2c642541 	.word	0x2c642541
    5eec:	25425020 	.word	0x25425020
    5ef0:	50202c64 	.word	0x50202c64
    5ef4:	2c642542 	.word	0x2c642542
    5ef8:	206e6163 	.word	0x206e6163
    5efc:	73206562 	.word	0x73206562
    5f00:	0a0d7465 	.word	0x0a0d7465
    5f04:	00000000 	.word	0x00000000
    5f08:	206e6950 	.word	0x206e6950
    5f0c:	63206425 	.word	0x63206425
    5f10:	7261656c 	.word	0x7261656c
    5f14:	0a0d6465 	.word	0x0a0d6465
    5f18:	00000000 	.word	0x00000000
    5f1c:	206e6970 	.word	0x206e6970
    5f20:	76206425 	.word	0x76206425
    5f24:	65756c61 	.word	0x65756c61
    5f28:	6425203a 	.word	0x6425203a
    5f2c:	00000a0d 	.word	0x00000a0d
    5f30:	206e6950 	.word	0x206e6950
    5f34:	73206425 	.word	0x73206425
    5f38:	68207465 	.word	0x68207465
    5f3c:	0d686769 	.word	0x0d686769
    5f40:	0000000a 	.word	0x0000000a
    5f44:	706c6568 	.word	0x706c6568
    5f48:	09090909 	.word	0x09090909
    5f4c:	09090909 	.word	0x09090909
    5f50:	09090909 	.word	0x09090909
    5f54:	09090909 	.word	0x09090909
    5f58:	7250202d 	.word	0x7250202d
    5f5c:	73746e69 	.word	0x73746e69
    5f60:	6c6c6120 	.word	0x6c6c6120
    5f64:	65687420 	.word	0x65687420
    5f68:	61766120 	.word	0x61766120
    5f6c:	62616c69 	.word	0x62616c69
    5f70:	6320656c 	.word	0x6320656c
    5f74:	616d6d6f 	.word	0x616d6d6f
    5f78:	2073646e 	.word	0x2073646e
    5f7c:	20646e61 	.word	0x20646e61
    5f80:	68732061 	.word	0x68732061
    5f84:	2074726f 	.word	0x2074726f
    5f88:	6f6e7973 	.word	0x6f6e7973
    5f8c:	73697370 	.word	0x73697370
    5f90:	65760a0d 	.word	0x65760a0d
    5f94:	6c625f72 	.word	0x6c625f72
    5f98:	09090909 	.word	0x09090909
    5f9c:	09090909 	.word	0x09090909
    5fa0:	09090909 	.word	0x09090909
    5fa4:	2d090909 	.word	0x2d090909
    5fa8:	69725020 	.word	0x69725020
    5fac:	2073746e 	.word	0x2073746e
    5fb0:	20656874 	.word	0x20656874
    5fb4:	746f6f62 	.word	0x746f6f62
    5fb8:	64616f6c 	.word	0x64616f6c
    5fbc:	66207265 	.word	0x66207265
    5fc0:	776d7269 	.word	0x776d7269
    5fc4:	20657261 	.word	0x20657261
    5fc8:	73726576 	.word	0x73726576
    5fcc:	0d6e6f69 	.word	0x0d6e6f69
    5fd0:	7265760a 	.word	0x7265760a
    5fd4:	7070615f 	.word	0x7070615f
    5fd8:	09090909 	.word	0x09090909
    5fdc:	09090909 	.word	0x09090909
    5fe0:	09090909 	.word	0x09090909
    5fe4:	2d090909 	.word	0x2d090909
    5fe8:	69725020 	.word	0x69725020
    5fec:	2073746e 	.word	0x2073746e
    5ff0:	20656874 	.word	0x20656874
    5ff4:	6c707061 	.word	0x6c707061
    5ff8:	74616369 	.word	0x74616369
    5ffc:	206e6f69 	.word	0x206e6f69
    6000:	65646f63 	.word	0x65646f63
    6004:	72696620 	.word	0x72696620
    6008:	7261776d 	.word	0x7261776d
    600c:	65762065 	.word	0x65762065
    6010:	6f697372 	.word	0x6f697372
    6014:	670a0d6e 	.word	0x670a0d6e
    6018:	5f6f6970 	.word	0x5f6f6970
    601c:	20746573 	.word	0x20746573
    6020:	726f705b 	.word	0x726f705b
    6024:	5b205d74 	.word	0x5b205d74
    6028:	5d6e6970 	.word	0x5d6e6970
    602c:	09090909 	.word	0x09090909
    6030:	09090909 	.word	0x09090909
    6034:	6553202d 	.word	0x6553202d
    6038:	20612074 	.word	0x20612074
    603c:	4f495047 	.word	0x4f495047
    6040:	6e697020 	.word	0x6e697020
    6044:	206f7420 	.word	0x206f7420
    6048:	68676968 	.word	0x68676968
    604c:	31202f20 	.word	0x31202f20
    6050:	70670a0d 	.word	0x70670a0d
    6054:	635f6f69 	.word	0x635f6f69
    6058:	7261656c 	.word	0x7261656c
    605c:	6f705b20 	.word	0x6f705b20
    6060:	205d7472 	.word	0x205d7472
    6064:	6e69705b 	.word	0x6e69705b
    6068:	0909095d 	.word	0x0909095d
    606c:	09090909 	.word	0x09090909
    6070:	6553202d 	.word	0x6553202d
    6074:	20612074 	.word	0x20612074
    6078:	4f495047 	.word	0x4f495047
    607c:	6e697020 	.word	0x6e697020
    6080:	206f7420 	.word	0x206f7420
    6084:	20776f6c 	.word	0x20776f6c
    6088:	0d30202f 	.word	0x0d30202f
    608c:	6970670a 	.word	0x6970670a
    6090:	65675f6f 	.word	0x65675f6f
    6094:	705b2074 	.word	0x705b2074
    6098:	5d74726f 	.word	0x5d74726f
    609c:	69705b20 	.word	0x69705b20
    60a0:	09095d6e 	.word	0x09095d6e
    60a4:	09090909 	.word	0x09090909
    60a8:	202d0909 	.word	0x202d0909
    60ac:	20746547 	.word	0x20746547
    60b0:	74617473 	.word	0x74617473
    60b4:	666f2065 	.word	0x666f2065
    60b8:	65707320 	.word	0x65707320
    60bc:	69666963 	.word	0x69666963
    60c0:	47206465 	.word	0x47206465
    60c4:	204f4950 	.word	0x204f4950
    60c8:	0d6e6970 	.word	0x0d6e6970
    60cc:	63616d0a 	.word	0x63616d0a
    60d0:	09090909 	.word	0x09090909
    60d4:	09090909 	.word	0x09090909
    60d8:	09090909 	.word	0x09090909
    60dc:	09090909 	.word	0x09090909
    60e0:	72202d09 	.word	0x72202d09
    60e4:	72757465 	.word	0x72757465
    60e8:	7420736e 	.word	0x7420736e
    60ec:	6d206568 	.word	0x6d206568
    60f0:	61206361 	.word	0x61206361
    60f4:	65726464 	.word	0x65726464
    60f8:	6f207373 	.word	0x6f207373
    60fc:	68742066 	.word	0x68742066
    6100:	65642065 	.word	0x65642065
    6104:	65636976 	.word	0x65636976
    6108:	70690a0d 	.word	0x70690a0d
    610c:	09090909 	.word	0x09090909
    6110:	09090909 	.word	0x09090909
    6114:	20202009 	.word	0x20202009
    6118:	20202020 	.word	0x20202020
    611c:	20202020 	.word	0x20202020
    6120:	20202020 	.word	0x20202020
    6124:	72202d20 	.word	0x72202d20
    6128:	72757465 	.word	0x72757465
    612c:	7420736e 	.word	0x7420736e
    6130:	69206568 	.word	0x69206568
    6134:	64612070 	.word	0x64612070
    6138:	73657264 	.word	0x73657264
    613c:	666f2073 	.word	0x666f2073
    6140:	65687420 	.word	0x65687420
    6144:	76656420 	.word	0x76656420
    6148:	20656369 	.word	0x20656369
    614c:	74206e69 	.word	0x74206e69
    6150:	73206568 	.word	0x73206568
    6154:	646e6174 	.word	0x646e6174
    6158:	20647261 	.word	0x20647261
    615c:	6d726f66 	.word	0x6d726f66
    6160:	203a7461 	.word	0x203a7461
    6164:	202e7865 	.word	0x202e7865
    6168:	2e353532 	.word	0x2e353532
    616c:	2e353532 	.word	0x2e353532
    6170:	2e353532 	.word	0x2e353532
    6174:	0d353532 	.word	0x0d353532
    6178:	6165720a 	.word	0x6165720a
    617c:	733c5f64 	.word	0x733c5f64
    6180:	6f736e65 	.word	0x6f736e65
    6184:	5b203e72 	.word	0x5b203e72
    6188:	64616572 	.word	0x64616572
    618c:	73676e69 	.word	0x73676e69
    6190:	695b205d 	.word	0x695b205d
    6194:	7265746e 	.word	0x7265746e
    6198:	5d6c6176 	.word	0x5d6c6176
    619c:	50202d09 	.word	0x50202d09
    61a0:	746e6972 	.word	0x746e6972
    61a4:	20612073 	.word	0x20612073
    61a8:	626d756e 	.word	0x626d756e
    61ac:	6f207265 	.word	0x6f207265
    61b0:	65722066 	.word	0x65722066
    61b4:	6e696461 	.word	0x6e696461
    61b8:	61207367 	.word	0x61207367
    61bc:	68742074 	.word	0x68742074
    61c0:	69672065 	.word	0x69672065
    61c4:	206e6576 	.word	0x206e6576
    61c8:	65746e69 	.word	0x65746e69
    61cc:	6c617672 	.word	0x6c617672
    61d0:	64610a0d 	.word	0x64610a0d
    61d4:	65675f63 	.word	0x65675f63
    61d8:	705b2074 	.word	0x705b2074
    61dc:	5d74726f 	.word	0x5d74726f
    61e0:	69705b20 	.word	0x69705b20
    61e4:	09095d6e 	.word	0x09095d6e
    61e8:	09090909 	.word	0x09090909
    61ec:	202d0909 	.word	0x202d0909
    61f0:	20746547 	.word	0x20746547
    61f4:	20656874 	.word	0x20656874
    61f8:	20434441 	.word	0x20434441
    61fc:	756c6176 	.word	0x756c6176
    6200:	666f2065 	.word	0x666f2065
    6204:	65687420 	.word	0x65687420
    6208:	76696720 	.word	0x76696720
    620c:	70206e65 	.word	0x70206e65
    6210:	0d2e6e69 	.word	0x0d2e6e69
    6214:	75636d0a 	.word	0x75636d0a
    6218:	6d65745f 	.word	0x6d65745f
    621c:	09090970 	.word	0x09090970
    6220:	09090909 	.word	0x09090909
    6224:	09090909 	.word	0x09090909
    6228:	2d090909 	.word	0x2d090909
    622c:	69725020 	.word	0x69725020
    6230:	2073746e 	.word	0x2073746e
    6234:	20656874 	.word	0x20656874
    6238:	706d6574 	.word	0x706d6574
    623c:	74617265 	.word	0x74617265
    6240:	20657275 	.word	0x20657275
    6244:	7420666f 	.word	0x7420666f
    6248:	6d206568 	.word	0x6d206568
    624c:	66207563 	.word	0x66207563
    6250:	206d6f72 	.word	0x206d6f72
    6254:	20656874 	.word	0x20656874
    6258:	622d6e6f 	.word	0x622d6e6f
    625c:	6472616f 	.word	0x6472616f
    6260:	6d657420 	.word	0x6d657420
    6264:	65732070 	.word	0x65732070
    6268:	726f736e 	.word	0x726f736e
    626c:	206e6920 	.word	0x206e6920
    6270:	736c6563 	.word	0x736c6563
    6274:	2e737569 	.word	0x2e737569
    6278:	32690a0d 	.word	0x32690a0d
    627c:	63735f63 	.word	0x63735f63
    6280:	09096e61 	.word	0x09096e61
    6284:	09090909 	.word	0x09090909
    6288:	09090909 	.word	0x09090909
    628c:	09090909 	.word	0x09090909
    6290:	7250202d 	.word	0x7250202d
    6294:	73746e69 	.word	0x73746e69
    6298:	74756f20 	.word	0x74756f20
    629c:	6c206120 	.word	0x6c206120
    62a0:	20747369 	.word	0x20747369
    62a4:	6120666f 	.word	0x6120666f
    62a8:	65726464 	.word	0x65726464
    62ac:	73657373 	.word	0x73657373
    62b0:	726f6620 	.word	0x726f6620
    62b4:	76656420 	.word	0x76656420
    62b8:	73656369 	.word	0x73656369
    62bc:	206e6f20 	.word	0x206e6f20
    62c0:	20656874 	.word	0x20656874
    62c4:	20433249 	.word	0x20433249
    62c8:	20737562 	.word	0x20737562
    62cc:	65746661 	.word	0x65746661
    62d0:	63732072 	.word	0x63732072
    62d4:	696e6e61 	.word	0x696e6e61
    62d8:	7420676e 	.word	0x7420676e
    62dc:	756f7268 	.word	0x756f7268
    62e0:	61206867 	.word	0x61206867
    62e4:	70206c6c 	.word	0x70206c6c
    62e8:	6973736f 	.word	0x6973736f
    62ec:	20656c62 	.word	0x20656c62
    62f0:	69622d37 	.word	0x69622d37
    62f4:	6f632074 	.word	0x6f632074
    62f8:	6e69626d 	.word	0x6e69626d
    62fc:	6f697461 	.word	0x6f697461
    6300:	0d2e736e 	.word	0x0d2e736e
    6304:	00000000 	.word	0x00000000
    6308:	72646441 	.word	0x72646441
    630c:	20737365 	.word	0x20737365
    6310:	6e756f66 	.word	0x6e756f66
    6314:	74612064 	.word	0x74612064
    6318:	58232520 	.word	0x58232520
    631c:	00000a0d 	.word	0x00000a0d
    6320:	706c6568 	.word	0x706c6568
    6324:	00000000 	.word	0x00000000
    6328:	5f726576 	.word	0x5f726576
    632c:	00006c62 	.word	0x00006c62
    6330:	5f726576 	.word	0x5f726576
    6334:	00707061 	.word	0x00707061
    6338:	6f697067 	.word	0x6f697067
    633c:	7465735f 	.word	0x7465735f
    6340:	00000000 	.word	0x00000000
    6344:	6f697067 	.word	0x6f697067
    6348:	656c635f 	.word	0x656c635f
    634c:	00007261 	.word	0x00007261
    6350:	6f697067 	.word	0x6f697067
    6354:	7465675f 	.word	0x7465675f
    6358:	00000000 	.word	0x00000000
    635c:	0063616d 	.word	0x0063616d
    6360:	00007069 	.word	0x00007069
    6364:	64616572 	.word	0x64616572
    6368:	00000000 	.word	0x00000000
    636c:	5f636461 	.word	0x5f636461
    6370:	00746567 	.word	0x00746567
    6374:	5f75636d 	.word	0x5f75636d
    6378:	706d6574 	.word	0x706d6574
    637c:	00000000 	.word	0x00000000
    6380:	5f633269 	.word	0x5f633269
    6384:	6e616373 	.word	0x6e616373
    6388:	00000000 	.word	0x00000000
    638c:	61766e49 	.word	0x61766e49
    6390:	2064696c 	.word	0x2064696c
    6394:	75706e69 	.word	0x75706e69
    6398:	53202e74 	.word	0x53202e74
    639c:	68206565 	.word	0x68206565
    63a0:	20706c65 	.word	0x20706c65
    63a4:	20726f66 	.word	0x20726f66
    63a8:	72726f63 	.word	0x72726f63
    63ac:	20746365 	.word	0x20746365
    63b0:	67617375 	.word	0x67617375
    63b4:	000d2e65 	.word	0x000d2e65
    63b8:	2e353532 	.word	0x2e353532
    63bc:	2e353532 	.word	0x2e353532
    63c0:	2e353532 	.word	0x2e353532
    63c4:	00353532 	.word	0x00353532
    63c8:	302e3030 	.word	0x302e3030
    63cc:	30302e30 	.word	0x30302e30
    63d0:	0d30302e 	.word	0x0d30302e
    63d4:	00000000 	.word	0x00000000
    63d8:	2055434d 	.word	0x2055434d
    63dc:	706d6574 	.word	0x706d6574
    63e0:	74617265 	.word	0x74617265
    63e4:	3a657275 	.word	0x3a657275
    63e8:	0d642520 	.word	0x0d642520
    63ec:	0000000a 	.word	0x0000000a
    63f0:	61766e49 	.word	0x61766e49
    63f4:	2064696c 	.word	0x2064696c
    63f8:	626d756e 	.word	0x626d756e
    63fc:	6f207265 	.word	0x6f207265
    6400:	72612066 	.word	0x72612066
    6404:	203a7367 	.word	0x203a7367
    6408:	72207325 	.word	0x72207325
    640c:	69757165 	.word	0x69757165
    6410:	20736572 	.word	0x20736572
    6414:	61206425 	.word	0x61206425
    6418:	6d756772 	.word	0x6d756772
    641c:	73746e65 	.word	0x73746e65
    6420:	646e6120 	.word	0x646e6120
    6424:	756f7920 	.word	0x756f7920
    6428:	6f727020 	.word	0x6f727020
    642c:	65646976 	.word	0x65646976
    6430:	64252064 	.word	0x64252064
    6434:	2e0a0d20 	.word	0x2e0a0d20
    6438:	20656553 	.word	0x20656553
    643c:	706c6568 	.word	0x706c6568
    6440:	726f6620 	.word	0x726f6620
    6444:	726f6d20 	.word	0x726f6d20
    6448:	6e692065 	.word	0x6e692065
    644c:	6d726f66 	.word	0x6d726f66
    6450:	6f697461 	.word	0x6f697461
    6454:	0d202e6e 	.word	0x0d202e6e
    6458:	0000000a 	.word	0x0000000a
    645c:	72656874 	.word	0x72656874
    6460:	61772065 	.word	0x61772065
    6464:	6e612073 	.word	0x6e612073
    6468:	72726520 	.word	0x72726520
    646c:	7020726f 	.word	0x7020726f
    6470:	69737261 	.word	0x69737261
    6474:	7920676e 	.word	0x7920676e
    6478:	2072756f 	.word	0x2072756f
    647c:	73677261 	.word	0x73677261
    6480:	726f6620 	.word	0x726f6620
    6484:	2e732520 	.word	0x2e732520
    6488:	65655320 	.word	0x65655320
    648c:	6c656820 	.word	0x6c656820
    6490:	6f662070 	.word	0x6f662070
    6494:	6f632072 	.word	0x6f632072
    6498:	63657272 	.word	0x63657272
    649c:	73752074 	.word	0x73752074
    64a0:	2e656761 	.word	0x2e656761
    64a4:	00000a0d 	.word	0x00000a0d
    64a8:	6d6d7544 	.word	0x6d6d7544
    64ac:	6e692079 	.word	0x6e692079
    64b0:	00006f66 	.word	0x00006f66
    64b4:	2e302e30 	.word	0x2e302e30
    64b8:	00000030 	.word	0x00000030
    64bc:	73726556 	.word	0x73726556
    64c0:	3a6e6f69 	.word	0x3a6e6f69
    64c4:	20732520 	.word	0x20732520
    64c8:	00000a0d 	.word	0x00000a0d
    64cc:	00003930 	.word	0x00003930
    64d0:	00003912 	.word	0x00003912
    64d4:	000038cc 	.word	0x000038cc
    64d8:	000037ea 	.word	0x000037ea
    64dc:	000038cc 	.word	0x000038cc
    64e0:	00003904 	.word	0x00003904
    64e4:	000038cc 	.word	0x000038cc
    64e8:	000037ea 	.word	0x000037ea
    64ec:	00003912 	.word	0x00003912
    64f0:	00003912 	.word	0x00003912
    64f4:	00003904 	.word	0x00003904
    64f8:	000037ea 	.word	0x000037ea
    64fc:	000037e2 	.word	0x000037e2
    6500:	000037e2 	.word	0x000037e2
    6504:	000037e2 	.word	0x000037e2
    6508:	00003b48 	.word	0x00003b48
    650c:	00003f90 	.word	0x00003f90
    6510:	00003e50 	.word	0x00003e50
    6514:	00003e50 	.word	0x00003e50
    6518:	00003e4c 	.word	0x00003e4c
    651c:	00003f68 	.word	0x00003f68
    6520:	00003f68 	.word	0x00003f68
    6524:	00003f5a 	.word	0x00003f5a
    6528:	00003e4c 	.word	0x00003e4c
    652c:	00003f68 	.word	0x00003f68
    6530:	00003f5a 	.word	0x00003f5a
    6534:	00003f68 	.word	0x00003f68
    6538:	00003e4c 	.word	0x00003e4c
    653c:	00003f70 	.word	0x00003f70
    6540:	00003f70 	.word	0x00003f70
    6544:	00003f70 	.word	0x00003f70
    6548:	00004174 	.word	0x00004174

0000654c <_global_impure_ptr>:
    654c:	20000030 4f500043 00584953 2000002e              0.. C.POSIX...

0000655a <_ctype_>:
    655a:	20202000 20202020 28282020 20282828     .         ((((( 
    656a:	20202020 20202020 20202020 20202020                     
    657a:	10108820 10101010 10101010 10101010      ...............
    658a:	04040410 04040404 10040404 10101010     ................
    659a:	41411010 41414141 01010101 01010101     ..AAAAAA........
    65aa:	01010101 01010101 01010101 10101010     ................
    65ba:	42421010 42424242 02020202 02020202     ..BBBBBB........
    65ca:	02020202 02020202 02020202 10101010     ................
    65da:	00000020 00000000 00000000 00000000      ...............
	...

0000665c <__sf_fake_stderr>:
	...

0000667c <__sf_fake_stdin>:
	...

0000669c <__sf_fake_stdout>:
	...
    66bc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    66cc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    66dc:	31300046 35343332 39383736 64636261     F.0123456789abcd
    66ec:	00006665                                ef..

000066f0 <_init>:
    66f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66f2:	46c0      	nop			; (mov r8, r8)
    66f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    66f6:	bc08      	pop	{r3}
    66f8:	469e      	mov	lr, r3
    66fa:	4770      	bx	lr

000066fc <__init_array_start>:
    66fc:	000000dd 	.word	0x000000dd

00006700 <_fini>:
    6700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6702:	46c0      	nop			; (mov r8, r8)
    6704:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6706:	bc08      	pop	{r3}
    6708:	469e      	mov	lr, r3
    670a:	4770      	bx	lr

0000670c <__fini_array_start>:
    670c:	000000b5 	.word	0x000000b5
