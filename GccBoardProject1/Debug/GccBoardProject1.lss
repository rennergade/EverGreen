
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005710  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000088  20000000  00005710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000100  20000088  00005798  00020088  2**2
                  ALLOC
  3 .stack        00002000  20000188  00005898  00020088  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002f551  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f92  00000000  00000000  0004f65a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006785  00000000  00000000  000535ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005d8  00000000  00000000  00059d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006c0  00000000  00000000  0005a349  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a9a0  00000000  00000000  0005aa09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cd33  00000000  00000000  000753a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008aabb  00000000  00000000  000820dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000017cc  00000000  00000000  0010cb98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 21 00 20 ad 22 00 00 a9 22 00 00 a9 22 00 00     .!. ."..."..."..
	...
      2c:	a9 22 00 00 00 00 00 00 00 00 00 00 a9 22 00 00     ."..........."..
      3c:	a9 22 00 00 a9 22 00 00 a9 22 00 00 a9 22 00 00     ."..."..."..."..
      4c:	a9 22 00 00 a9 22 00 00 a9 22 00 00 a9 22 00 00     ."..."..."..."..
      5c:	a9 22 00 00 a9 22 00 00 e1 19 00 00 f1 19 00 00     ."..."..........
      6c:	01 1a 00 00 11 1a 00 00 21 1a 00 00 31 1a 00 00     ........!...1...
      7c:	a9 22 00 00 a9 22 00 00 a9 22 00 00 a9 22 00 00     ."..."..."..."..
      8c:	a9 22 00 00 a9 22 00 00 00 00 00 00 00 00 00 00     ."..."..........
      9c:	a9 22 00 00 a9 22 00 00 a9 22 00 00 a9 22 00 00     ."..."..."..."..
      ac:	a9 22 00 00 00 00 00 00                             ."......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000088 	.word	0x20000088
      d4:	00000000 	.word	0x00000000
      d8:	00005710 	.word	0x00005710

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000008c 	.word	0x2000008c
     108:	00005710 	.word	0x00005710
     10c:	00005710 	.word	0x00005710
     110:	00000000 	.word	0x00000000

00000114 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     114:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     116:	2200      	movs	r2, #0
     118:	2300      	movs	r3, #0
     11a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     11c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     11e:	2100      	movs	r1, #0
     120:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     122:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     124:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     126:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     128:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     12a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     12c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     12e:	24c0      	movs	r4, #192	; 0xc0
     130:	0164      	lsls	r4, r4, #5
     132:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     134:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     136:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     138:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     13a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     13c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     13e:	242a      	movs	r4, #42	; 0x2a
     140:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     142:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     144:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     146:	3c06      	subs	r4, #6
     148:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     14a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     14c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     14e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     150:	232b      	movs	r3, #43	; 0x2b
     152:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     154:	3301      	adds	r3, #1
     156:	54c1      	strb	r1, [r0, r3]
}
     158:	bd10      	pop	{r4, pc}
	...

0000015c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	46d6      	mov	lr, sl
     160:	464f      	mov	r7, r9
     162:	4646      	mov	r6, r8
     164:	b5c0      	push	{r6, r7, lr}
     166:	b096      	sub	sp, #88	; 0x58
     168:	0007      	movs	r7, r0
     16a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     16c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     16e:	4acb      	ldr	r2, [pc, #812]	; (49c <adc_init+0x340>)
     170:	6a10      	ldr	r0, [r2, #32]
     172:	2380      	movs	r3, #128	; 0x80
     174:	025b      	lsls	r3, r3, #9
     176:	4303      	orrs	r3, r0
     178:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     17c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17e:	07db      	lsls	r3, r3, #31
     180:	d505      	bpl.n	18e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     182:	b016      	add	sp, #88	; 0x58
     184:	bc1c      	pop	{r2, r3, r4}
     186:	4690      	mov	r8, r2
     188:	4699      	mov	r9, r3
     18a:	46a2      	mov	sl, r4
     18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     190:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     192:	079b      	lsls	r3, r3, #30
     194:	d4f5      	bmi.n	182 <adc_init+0x26>
	module_inst->reference = config->reference;
     196:	7873      	ldrb	r3, [r6, #1]
     198:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     19a:	2b00      	cmp	r3, #0
     19c:	d104      	bne.n	1a8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     19e:	4ac0      	ldr	r2, [pc, #768]	; (4a0 <adc_init+0x344>)
     1a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     1a2:	2104      	movs	r1, #4
     1a4:	430b      	orrs	r3, r1
     1a6:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
     1a8:	683b      	ldr	r3, [r7, #0]
     1aa:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     1ac:	7833      	ldrb	r3, [r6, #0]
     1ae:	466a      	mov	r2, sp
     1b0:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     1b2:	4669      	mov	r1, sp
     1b4:	201e      	movs	r0, #30
     1b6:	4bbb      	ldr	r3, [pc, #748]	; (4a4 <adc_init+0x348>)
     1b8:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     1ba:	201e      	movs	r0, #30
     1bc:	4bba      	ldr	r3, [pc, #744]	; (4a8 <adc_init+0x34c>)
     1be:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     1c0:	232c      	movs	r3, #44	; 0x2c
     1c2:	5cf2      	ldrb	r2, [r6, r3]
     1c4:	2a00      	cmp	r2, #0
     1c6:	d054      	beq.n	272 <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
     1c8:	3b01      	subs	r3, #1
     1ca:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     1cc:	7b33      	ldrb	r3, [r6, #12]
     1ce:	18eb      	adds	r3, r5, r3
     1d0:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     1d2:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     1d4:	b2c9      	uxtb	r1, r1
     1d6:	428b      	cmp	r3, r1
     1d8:	d221      	bcs.n	21e <adc_init+0xc2>
     1da:	1952      	adds	r2, r2, r5
     1dc:	b2d3      	uxtb	r3, r2
     1de:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     1e0:	4bb2      	ldr	r3, [pc, #712]	; (4ac <adc_init+0x350>)
     1e2:	469a      	mov	sl, r3
     1e4:	e003      	b.n	1ee <adc_init+0x92>
			offset++;
     1e6:	3501      	adds	r5, #1
     1e8:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     1ea:	45a9      	cmp	r9, r5
     1ec:	d017      	beq.n	21e <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     1ee:	240f      	movs	r4, #15
     1f0:	402c      	ands	r4, r5
     1f2:	7b33      	ldrb	r3, [r6, #12]
     1f4:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     1f6:	2250      	movs	r2, #80	; 0x50
     1f8:	49ad      	ldr	r1, [pc, #692]	; (4b0 <adc_init+0x354>)
     1fa:	a802      	add	r0, sp, #8
     1fc:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     1fe:	2c13      	cmp	r4, #19
     200:	d8f1      	bhi.n	1e6 <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     202:	00a4      	lsls	r4, r4, #2
     204:	ab02      	add	r3, sp, #8
     206:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     208:	a901      	add	r1, sp, #4
     20a:	2300      	movs	r3, #0
     20c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     20e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     210:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     212:	3301      	adds	r3, #1
     214:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     216:	b2c0      	uxtb	r0, r0
     218:	4ba6      	ldr	r3, [pc, #664]	; (4b4 <adc_init+0x358>)
     21a:	4798      	blx	r3
     21c:	e7e3      	b.n	1e6 <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
     21e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     220:	2250      	movs	r2, #80	; 0x50
     222:	49a3      	ldr	r1, [pc, #652]	; (4b0 <adc_init+0x354>)
     224:	a802      	add	r0, sp, #8
     226:	4ba1      	ldr	r3, [pc, #644]	; (4ac <adc_init+0x350>)
     228:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     22a:	2c13      	cmp	r4, #19
     22c:	d913      	bls.n	256 <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     22e:	7d73      	ldrb	r3, [r6, #21]
     230:	009b      	lsls	r3, r3, #2
     232:	b2db      	uxtb	r3, r3
     234:	4642      	mov	r2, r8
     236:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     238:	7db3      	ldrb	r3, [r6, #22]
     23a:	01db      	lsls	r3, r3, #7
     23c:	7872      	ldrb	r2, [r6, #1]
     23e:	4313      	orrs	r3, r2
     240:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     242:	4642      	mov	r2, r8
     244:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     246:	7933      	ldrb	r3, [r6, #4]
     248:	2b34      	cmp	r3, #52	; 0x34
     24a:	d900      	bls.n	24e <adc_init+0xf2>
     24c:	e178      	b.n	540 <adc_init+0x3e4>
     24e:	009b      	lsls	r3, r3, #2
     250:	4a99      	ldr	r2, [pc, #612]	; (4b8 <adc_init+0x35c>)
     252:	58d3      	ldr	r3, [r2, r3]
     254:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     256:	00a4      	lsls	r4, r4, #2
     258:	ab02      	add	r3, sp, #8
     25a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     25c:	a901      	add	r1, sp, #4
     25e:	2300      	movs	r3, #0
     260:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     262:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     264:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     266:	3301      	adds	r3, #1
     268:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     26a:	b2c0      	uxtb	r0, r0
     26c:	4b91      	ldr	r3, [pc, #580]	; (4b4 <adc_init+0x358>)
     26e:	4798      	blx	r3
     270:	e7dd      	b.n	22e <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
     272:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     274:	2250      	movs	r2, #80	; 0x50
     276:	498e      	ldr	r1, [pc, #568]	; (4b0 <adc_init+0x354>)
     278:	a802      	add	r0, sp, #8
     27a:	4b8c      	ldr	r3, [pc, #560]	; (4ac <adc_init+0x350>)
     27c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     27e:	2c13      	cmp	r4, #19
     280:	d915      	bls.n	2ae <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
     282:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     284:	2250      	movs	r2, #80	; 0x50
     286:	498a      	ldr	r1, [pc, #552]	; (4b0 <adc_init+0x354>)
     288:	a802      	add	r0, sp, #8
     28a:	4b88      	ldr	r3, [pc, #544]	; (4ac <adc_init+0x350>)
     28c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     28e:	2c13      	cmp	r4, #19
     290:	d8cd      	bhi.n	22e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     292:	00a4      	lsls	r4, r4, #2
     294:	ab02      	add	r3, sp, #8
     296:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     298:	a901      	add	r1, sp, #4
     29a:	2300      	movs	r3, #0
     29c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     29e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2a0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2a2:	3301      	adds	r3, #1
     2a4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2a6:	b2c0      	uxtb	r0, r0
     2a8:	4b82      	ldr	r3, [pc, #520]	; (4b4 <adc_init+0x358>)
     2aa:	4798      	blx	r3
     2ac:	e7bf      	b.n	22e <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2ae:	00a4      	lsls	r4, r4, #2
     2b0:	ab02      	add	r3, sp, #8
     2b2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2b4:	a901      	add	r1, sp, #4
     2b6:	2300      	movs	r3, #0
     2b8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2ba:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2bc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2be:	3301      	adds	r3, #1
     2c0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2c2:	b2c0      	uxtb	r0, r0
     2c4:	4b7b      	ldr	r3, [pc, #492]	; (4b4 <adc_init+0x358>)
     2c6:	4798      	blx	r3
     2c8:	e7db      	b.n	282 <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     2ca:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     2cc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     2ce:	2102      	movs	r1, #2
     2d0:	e01a      	b.n	308 <adc_init+0x1ac>
		adjres = config->divide_result;
     2d2:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     2d4:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     2d6:	2410      	movs	r4, #16
     2d8:	e016      	b.n	308 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     2da:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     2dc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     2de:	2101      	movs	r1, #1
     2e0:	e012      	b.n	308 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     2e2:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     2e4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     2e6:	2100      	movs	r1, #0
     2e8:	e00e      	b.n	308 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2ea:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     2ec:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     2ee:	2100      	movs	r1, #0
     2f0:	e00a      	b.n	308 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2f2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     2f4:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     2f6:	2100      	movs	r1, #0
     2f8:	e006      	b.n	308 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2fa:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     2fc:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     2fe:	2100      	movs	r1, #0
     300:	e002      	b.n	308 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     302:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     304:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     306:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     308:	0109      	lsls	r1, r1, #4
     30a:	2270      	movs	r2, #112	; 0x70
     30c:	400a      	ands	r2, r1
     30e:	4313      	orrs	r3, r2
     310:	4642      	mov	r2, r8
     312:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     314:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     316:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     318:	2b3f      	cmp	r3, #63	; 0x3f
     31a:	d900      	bls.n	31e <adc_init+0x1c2>
     31c:	e731      	b.n	182 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     31e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     320:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     322:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     324:	b25b      	sxtb	r3, r3
     326:	2b00      	cmp	r3, #0
     328:	dbfb      	blt.n	322 <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     32a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     32c:	8872      	ldrh	r2, [r6, #2]
     32e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     330:	2224      	movs	r2, #36	; 0x24
     332:	5cb2      	ldrb	r2, [r6, r2]
     334:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     336:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     338:	7d32      	ldrb	r2, [r6, #20]
     33a:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     33c:	4313      	orrs	r3, r2
     33e:	7cb2      	ldrb	r2, [r6, #18]
     340:	0052      	lsls	r2, r2, #1
     342:	4313      	orrs	r3, r2
     344:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     346:	4642      	mov	r2, r8
     348:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     34a:	7e33      	ldrb	r3, [r6, #24]
     34c:	2b00      	cmp	r3, #0
     34e:	d020      	beq.n	392 <adc_init+0x236>
		switch (resolution) {
     350:	2c10      	cmp	r4, #16
     352:	d100      	bne.n	356 <adc_init+0x1fa>
     354:	e0d6      	b.n	504 <adc_init+0x3a8>
     356:	d800      	bhi.n	35a <adc_init+0x1fe>
     358:	e080      	b.n	45c <adc_init+0x300>
     35a:	2c20      	cmp	r4, #32
     35c:	d100      	bne.n	360 <adc_init+0x204>
     35e:	e0b3      	b.n	4c8 <adc_init+0x36c>
     360:	2c30      	cmp	r4, #48	; 0x30
     362:	d116      	bne.n	392 <adc_init+0x236>
			if (config->differential_mode &&
     364:	7cf2      	ldrb	r2, [r6, #19]
     366:	2a00      	cmp	r2, #0
     368:	d00a      	beq.n	380 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
     36a:	69f2      	ldr	r2, [r6, #28]
     36c:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     36e:	2017      	movs	r0, #23
			if (config->differential_mode &&
     370:	2aff      	cmp	r2, #255	; 0xff
     372:	d900      	bls.n	376 <adc_init+0x21a>
     374:	e705      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     376:	6a32      	ldr	r2, [r6, #32]
     378:	3280      	adds	r2, #128	; 0x80
     37a:	2aff      	cmp	r2, #255	; 0xff
     37c:	d900      	bls.n	380 <adc_init+0x224>
     37e:	e700      	b.n	182 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     380:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     382:	69f2      	ldr	r2, [r6, #28]
     384:	2aff      	cmp	r2, #255	; 0xff
     386:	dd00      	ble.n	38a <adc_init+0x22e>
     388:	e6fb      	b.n	182 <adc_init+0x26>
     38a:	6a32      	ldr	r2, [r6, #32]
     38c:	2aff      	cmp	r2, #255	; 0xff
     38e:	dd00      	ble.n	392 <adc_init+0x236>
     390:	e6f7      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     392:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     394:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     396:	b252      	sxtb	r2, r2
     398:	2a00      	cmp	r2, #0
     39a:	dbfb      	blt.n	394 <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
     39c:	4642      	mov	r2, r8
     39e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     3a0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3a2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3a4:	b25b      	sxtb	r3, r3
     3a6:	2b00      	cmp	r3, #0
     3a8:	dbfb      	blt.n	3a2 <adc_init+0x246>
	adc_module->WINLT.reg =
     3aa:	8bb3      	ldrh	r3, [r6, #28]
     3ac:	4642      	mov	r2, r8
     3ae:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     3b0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3b2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3b4:	b25b      	sxtb	r3, r3
     3b6:	2b00      	cmp	r3, #0
     3b8:	dbfb      	blt.n	3b2 <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     3ba:	8c33      	ldrh	r3, [r6, #32]
     3bc:	4642      	mov	r2, r8
     3be:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     3c0:	232c      	movs	r3, #44	; 0x2c
     3c2:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     3c4:	2b00      	cmp	r3, #0
     3c6:	d005      	beq.n	3d4 <adc_init+0x278>
		inputs_to_scan--;
     3c8:	3b01      	subs	r3, #1
     3ca:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     3cc:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     3ce:	2b0f      	cmp	r3, #15
     3d0:	d900      	bls.n	3d4 <adc_init+0x278>
     3d2:	e6d6      	b.n	182 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     3d4:	222b      	movs	r2, #43	; 0x2b
     3d6:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     3d8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     3da:	290f      	cmp	r1, #15
     3dc:	d900      	bls.n	3e0 <adc_init+0x284>
     3de:	e6d0      	b.n	182 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     3e0:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3e2:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     3e4:	b252      	sxtb	r2, r2
     3e6:	2a00      	cmp	r2, #0
     3e8:	dbfb      	blt.n	3e2 <adc_init+0x286>
			config->negative_input |
     3ea:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     3ec:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     3ee:	4302      	orrs	r2, r0
     3f0:	68b0      	ldr	r0, [r6, #8]
     3f2:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     3f4:	0509      	lsls	r1, r1, #20
			config->negative_input |
     3f6:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     3f8:	041b      	lsls	r3, r3, #16
			config->negative_input |
     3fa:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     3fc:	4642      	mov	r2, r8
     3fe:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     400:	232a      	movs	r3, #42	; 0x2a
     402:	5cf3      	ldrb	r3, [r6, r3]
     404:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     406:	230f      	movs	r3, #15
     408:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     40a:	3315      	adds	r3, #21
     40c:	5cf3      	ldrb	r3, [r6, r3]
     40e:	2b00      	cmp	r3, #0
     410:	d012      	beq.n	438 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     412:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     414:	4a29      	ldr	r2, [pc, #164]	; (4bc <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
     416:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     418:	4293      	cmp	r3, r2
     41a:	d900      	bls.n	41e <adc_init+0x2c2>
     41c:	e6b1      	b.n	182 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     41e:	4642      	mov	r2, r8
     420:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     422:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     424:	2380      	movs	r3, #128	; 0x80
     426:	011b      	lsls	r3, r3, #4
     428:	18d3      	adds	r3, r2, r3
     42a:	4924      	ldr	r1, [pc, #144]	; (4bc <adc_init+0x360>)
     42c:	b29b      	uxth	r3, r3
     42e:	428b      	cmp	r3, r1
     430:	d900      	bls.n	434 <adc_init+0x2d8>
     432:	e6a6      	b.n	182 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     434:	4643      	mov	r3, r8
     436:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     438:	4b21      	ldr	r3, [pc, #132]	; (4c0 <adc_init+0x364>)
     43a:	681b      	ldr	r3, [r3, #0]
     43c:	015b      	lsls	r3, r3, #5
     43e:	22e0      	movs	r2, #224	; 0xe0
     440:	00d2      	lsls	r2, r2, #3
     442:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     444:	4a1f      	ldr	r2, [pc, #124]	; (4c4 <adc_init+0x368>)
     446:	6851      	ldr	r1, [r2, #4]
     448:	0149      	lsls	r1, r1, #5
     44a:	6812      	ldr	r2, [r2, #0]
     44c:	0ed2      	lsrs	r2, r2, #27
     44e:	430a      	orrs	r2, r1
     450:	b2d2      	uxtb	r2, r2
			) |
     452:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     454:	4642      	mov	r2, r8
     456:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     458:	2000      	movs	r0, #0
     45a:	e692      	b.n	182 <adc_init+0x26>
		switch (resolution) {
     45c:	2c00      	cmp	r4, #0
     45e:	d198      	bne.n	392 <adc_init+0x236>
			if (config->differential_mode &&
     460:	7cf2      	ldrb	r2, [r6, #19]
     462:	2a00      	cmp	r2, #0
     464:	d00f      	beq.n	486 <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
     466:	69f2      	ldr	r2, [r6, #28]
     468:	2180      	movs	r1, #128	; 0x80
     46a:	0109      	lsls	r1, r1, #4
     46c:	468c      	mov	ip, r1
     46e:	4462      	add	r2, ip
			if (config->differential_mode &&
     470:	4912      	ldr	r1, [pc, #72]	; (4bc <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     472:	2017      	movs	r0, #23
			if (config->differential_mode &&
     474:	428a      	cmp	r2, r1
     476:	d900      	bls.n	47a <adc_init+0x31e>
     478:	e683      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     47a:	6a32      	ldr	r2, [r6, #32]
     47c:	4462      	add	r2, ip
     47e:	490f      	ldr	r1, [pc, #60]	; (4bc <adc_init+0x360>)
     480:	428a      	cmp	r2, r1
     482:	d900      	bls.n	486 <adc_init+0x32a>
     484:	e67d      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     486:	4a0d      	ldr	r2, [pc, #52]	; (4bc <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
     488:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     48a:	69f1      	ldr	r1, [r6, #28]
     48c:	4291      	cmp	r1, r2
     48e:	dd00      	ble.n	492 <adc_init+0x336>
     490:	e677      	b.n	182 <adc_init+0x26>
     492:	6a31      	ldr	r1, [r6, #32]
     494:	4291      	cmp	r1, r2
     496:	dd00      	ble.n	49a <adc_init+0x33e>
     498:	e673      	b.n	182 <adc_init+0x26>
     49a:	e77a      	b.n	392 <adc_init+0x236>
     49c:	40000400 	.word	0x40000400
     4a0:	40000800 	.word	0x40000800
     4a4:	00002151 	.word	0x00002151
     4a8:	000020c5 	.word	0x000020c5
     4ac:	0000430d 	.word	0x0000430d
     4b0:	000054bc 	.word	0x000054bc
     4b4:	00002249 	.word	0x00002249
     4b8:	000053e8 	.word	0x000053e8
     4bc:	00000fff 	.word	0x00000fff
     4c0:	00806024 	.word	0x00806024
     4c4:	00806020 	.word	0x00806020
			if (config->differential_mode &&
     4c8:	7cf2      	ldrb	r2, [r6, #19]
     4ca:	2a00      	cmp	r2, #0
     4cc:	d00f      	beq.n	4ee <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
     4ce:	69f2      	ldr	r2, [r6, #28]
     4d0:	2180      	movs	r1, #128	; 0x80
     4d2:	0089      	lsls	r1, r1, #2
     4d4:	468c      	mov	ip, r1
     4d6:	4462      	add	r2, ip
			if (config->differential_mode &&
     4d8:	491a      	ldr	r1, [pc, #104]	; (544 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     4da:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4dc:	428a      	cmp	r2, r1
     4de:	d900      	bls.n	4e2 <adc_init+0x386>
     4e0:	e64f      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     4e2:	6a32      	ldr	r2, [r6, #32]
     4e4:	4462      	add	r2, ip
     4e6:	4917      	ldr	r1, [pc, #92]	; (544 <adc_init+0x3e8>)
     4e8:	428a      	cmp	r2, r1
     4ea:	d900      	bls.n	4ee <adc_init+0x392>
     4ec:	e649      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     4ee:	4a15      	ldr	r2, [pc, #84]	; (544 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
     4f0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     4f2:	69f1      	ldr	r1, [r6, #28]
     4f4:	4291      	cmp	r1, r2
     4f6:	dd00      	ble.n	4fa <adc_init+0x39e>
     4f8:	e643      	b.n	182 <adc_init+0x26>
     4fa:	6a31      	ldr	r1, [r6, #32]
     4fc:	4291      	cmp	r1, r2
     4fe:	dd00      	ble.n	502 <adc_init+0x3a6>
     500:	e63f      	b.n	182 <adc_init+0x26>
     502:	e746      	b.n	392 <adc_init+0x236>
			if (config->differential_mode &&
     504:	7cf2      	ldrb	r2, [r6, #19]
     506:	2a00      	cmp	r2, #0
     508:	d00f      	beq.n	52a <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
     50a:	69f2      	ldr	r2, [r6, #28]
     50c:	2180      	movs	r1, #128	; 0x80
     50e:	0209      	lsls	r1, r1, #8
     510:	468c      	mov	ip, r1
     512:	4462      	add	r2, ip
			if (config->differential_mode &&
     514:	490c      	ldr	r1, [pc, #48]	; (548 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     516:	2017      	movs	r0, #23
			if (config->differential_mode &&
     518:	428a      	cmp	r2, r1
     51a:	d900      	bls.n	51e <adc_init+0x3c2>
     51c:	e631      	b.n	182 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     51e:	6a32      	ldr	r2, [r6, #32]
     520:	4462      	add	r2, ip
     522:	4909      	ldr	r1, [pc, #36]	; (548 <adc_init+0x3ec>)
     524:	428a      	cmp	r2, r1
     526:	d900      	bls.n	52a <adc_init+0x3ce>
     528:	e62b      	b.n	182 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     52a:	4a07      	ldr	r2, [pc, #28]	; (548 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
     52c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     52e:	69f1      	ldr	r1, [r6, #28]
     530:	4291      	cmp	r1, r2
     532:	dd00      	ble.n	536 <adc_init+0x3da>
     534:	e625      	b.n	182 <adc_init+0x26>
     536:	6a31      	ldr	r1, [r6, #32]
     538:	4291      	cmp	r1, r2
     53a:	dd00      	ble.n	53e <adc_init+0x3e2>
     53c:	e621      	b.n	182 <adc_init+0x26>
     53e:	e728      	b.n	392 <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
     540:	2017      	movs	r0, #23
     542:	e61e      	b.n	182 <adc_init+0x26>
     544:	000003ff 	.word	0x000003ff
     548:	0000ffff 	.word	0x0000ffff

0000054c <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     54c:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     54e:	2207      	movs	r2, #7
     550:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     552:	421a      	tst	r2, r3
     554:	d1fc      	bne.n	550 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     556:	4770      	bx	lr

00000558 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     558:	b5f0      	push	{r4, r5, r6, r7, lr}
     55a:	46d6      	mov	lr, sl
     55c:	464f      	mov	r7, r9
     55e:	4646      	mov	r6, r8
     560:	b5c0      	push	{r6, r7, lr}
     562:	b08a      	sub	sp, #40	; 0x28
     564:	0006      	movs	r6, r0
     566:	000f      	movs	r7, r1
     568:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     56a:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     56c:	0008      	movs	r0, r1
     56e:	4ba0      	ldr	r3, [pc, #640]	; (7f0 <i2c_master_init+0x298>)
     570:	4798      	blx	r3
     572:	4aa0      	ldr	r2, [pc, #640]	; (7f4 <i2c_master_init+0x29c>)
     574:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     576:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     578:	2301      	movs	r3, #1
     57a:	40ab      	lsls	r3, r5
     57c:	430b      	orrs	r3, r1
     57e:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     580:	a909      	add	r1, sp, #36	; 0x24
     582:	7b23      	ldrb	r3, [r4, #12]
     584:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     586:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     588:	b2c5      	uxtb	r5, r0
     58a:	0028      	movs	r0, r5
     58c:	4b9a      	ldr	r3, [pc, #616]	; (7f8 <i2c_master_init+0x2a0>)
     58e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     590:	0028      	movs	r0, r5
     592:	4b9a      	ldr	r3, [pc, #616]	; (7fc <i2c_master_init+0x2a4>)
     594:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     596:	7b20      	ldrb	r0, [r4, #12]
     598:	2100      	movs	r1, #0
     59a:	4b99      	ldr	r3, [pc, #612]	; (800 <i2c_master_init+0x2a8>)
     59c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     59e:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     5a0:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     5a2:	079b      	lsls	r3, r3, #30
     5a4:	d505      	bpl.n	5b2 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     5a6:	b00a      	add	sp, #40	; 0x28
     5a8:	bc1c      	pop	{r2, r3, r4}
     5aa:	4690      	mov	r8, r2
     5ac:	4699      	mov	r9, r3
     5ae:	46a2      	mov	sl, r4
     5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     5b2:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     5b4:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     5b6:	07db      	lsls	r3, r3, #31
     5b8:	d4f5      	bmi.n	5a6 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     5ba:	6830      	ldr	r0, [r6, #0]
     5bc:	4b8c      	ldr	r3, [pc, #560]	; (7f0 <i2c_master_init+0x298>)
     5be:	4699      	mov	r9, r3
     5c0:	4798      	blx	r3
     5c2:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     5c4:	498f      	ldr	r1, [pc, #572]	; (804 <i2c_master_init+0x2ac>)
     5c6:	4b90      	ldr	r3, [pc, #576]	; (808 <i2c_master_init+0x2b0>)
     5c8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     5ca:	00ad      	lsls	r5, r5, #2
     5cc:	4b8f      	ldr	r3, [pc, #572]	; (80c <i2c_master_init+0x2b4>)
     5ce:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     5d0:	2300      	movs	r3, #0
     5d2:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     5d4:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     5d6:	2500      	movs	r5, #0
     5d8:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     5da:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     5dc:	2225      	movs	r2, #37	; 0x25
     5de:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     5e0:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     5e2:	3314      	adds	r3, #20
     5e4:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5e6:	6833      	ldr	r3, [r6, #0]
     5e8:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     5ea:	0018      	movs	r0, r3
     5ec:	47c8      	blx	r9
     5ee:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
     5f0:	2380      	movs	r3, #128	; 0x80
     5f2:	aa08      	add	r2, sp, #32
     5f4:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     5f6:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     5f8:	2301      	movs	r3, #1
     5fa:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     5fc:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     5fe:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     600:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     602:	2800      	cmp	r0, #0
     604:	d100      	bne.n	608 <i2c_master_init+0xb0>
     606:	e0af      	b.n	768 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     608:	ab08      	add	r3, sp, #32
     60a:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     60c:	2302      	movs	r3, #2
     60e:	aa08      	add	r2, sp, #32
     610:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     612:	0c00      	lsrs	r0, r0, #16
     614:	b2c0      	uxtb	r0, r0
     616:	0011      	movs	r1, r2
     618:	4b7d      	ldr	r3, [pc, #500]	; (810 <i2c_master_init+0x2b8>)
     61a:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     61c:	2f00      	cmp	r7, #0
     61e:	d100      	bne.n	622 <i2c_master_init+0xca>
     620:	e0a7      	b.n	772 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     622:	ab08      	add	r3, sp, #32
     624:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     626:	2302      	movs	r3, #2
     628:	aa08      	add	r2, sp, #32
     62a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     62c:	0c3f      	lsrs	r7, r7, #16
     62e:	b2f8      	uxtb	r0, r7
     630:	0011      	movs	r1, r2
     632:	4b77      	ldr	r3, [pc, #476]	; (810 <i2c_master_init+0x2b8>)
     634:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     636:	8aa3      	ldrh	r3, [r4, #20]
     638:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     63a:	8ae3      	ldrh	r3, [r4, #22]
     63c:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     63e:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     640:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     642:	2b00      	cmp	r3, #0
     644:	d104      	bne.n	650 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     646:	4b73      	ldr	r3, [pc, #460]	; (814 <i2c_master_init+0x2bc>)
     648:	789b      	ldrb	r3, [r3, #2]
     64a:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     64c:	0fdb      	lsrs	r3, r3, #31
     64e:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     650:	68a1      	ldr	r1, [r4, #8]
     652:	6923      	ldr	r3, [r4, #16]
     654:	430b      	orrs	r3, r1
     656:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     658:	2224      	movs	r2, #36	; 0x24
     65a:	5ca2      	ldrb	r2, [r4, r2]
     65c:	2a00      	cmp	r2, #0
     65e:	d002      	beq.n	666 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     660:	2280      	movs	r2, #128	; 0x80
     662:	05d2      	lsls	r2, r2, #23
     664:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     666:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     668:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     66a:	222c      	movs	r2, #44	; 0x2c
     66c:	5ca2      	ldrb	r2, [r4, r2]
     66e:	2a00      	cmp	r2, #0
     670:	d103      	bne.n	67a <i2c_master_init+0x122>
     672:	2280      	movs	r2, #128	; 0x80
     674:	0492      	lsls	r2, r2, #18
     676:	4291      	cmp	r1, r2
     678:	d102      	bne.n	680 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     67a:	2280      	movs	r2, #128	; 0x80
     67c:	0512      	lsls	r2, r2, #20
     67e:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     680:	222d      	movs	r2, #45	; 0x2d
     682:	5ca2      	ldrb	r2, [r4, r2]
     684:	2a00      	cmp	r2, #0
     686:	d002      	beq.n	68e <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     688:	2280      	movs	r2, #128	; 0x80
     68a:	0412      	lsls	r2, r2, #16
     68c:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     68e:	222e      	movs	r2, #46	; 0x2e
     690:	5ca2      	ldrb	r2, [r4, r2]
     692:	2a00      	cmp	r2, #0
     694:	d002      	beq.n	69c <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     696:	2280      	movs	r2, #128	; 0x80
     698:	03d2      	lsls	r2, r2, #15
     69a:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     69c:	4642      	mov	r2, r8
     69e:	6812      	ldr	r2, [r2, #0]
     6a0:	4313      	orrs	r3, r2
     6a2:	4642      	mov	r2, r8
     6a4:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     6a6:	2380      	movs	r3, #128	; 0x80
     6a8:	005b      	lsls	r3, r3, #1
     6aa:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     6ac:	4648      	mov	r0, r9
     6ae:	3014      	adds	r0, #20
     6b0:	b2c0      	uxtb	r0, r0
     6b2:	4b59      	ldr	r3, [pc, #356]	; (818 <i2c_master_init+0x2c0>)
     6b4:	4798      	blx	r3
     6b6:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     6b8:	23fa      	movs	r3, #250	; 0xfa
     6ba:	009b      	lsls	r3, r3, #2
     6bc:	6822      	ldr	r2, [r4, #0]
     6be:	435a      	muls	r2, r3
     6c0:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     6c2:	6863      	ldr	r3, [r4, #4]
     6c4:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     6c6:	4d55      	ldr	r5, [pc, #340]	; (81c <i2c_master_init+0x2c4>)
     6c8:	47a8      	blx	r5
     6ca:	9000      	str	r0, [sp, #0]
     6cc:	9101      	str	r1, [sp, #4]
     6ce:	464b      	mov	r3, r9
     6d0:	0058      	lsls	r0, r3, #1
     6d2:	47a8      	blx	r5
     6d4:	9002      	str	r0, [sp, #8]
     6d6:	9103      	str	r1, [sp, #12]
     6d8:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     6da:	47a8      	blx	r5
     6dc:	9004      	str	r0, [sp, #16]
     6de:	9105      	str	r1, [sp, #20]
     6e0:	4f4f      	ldr	r7, [pc, #316]	; (820 <i2c_master_init+0x2c8>)
     6e2:	4a50      	ldr	r2, [pc, #320]	; (824 <i2c_master_init+0x2cc>)
     6e4:	4b50      	ldr	r3, [pc, #320]	; (828 <i2c_master_init+0x2d0>)
     6e6:	9800      	ldr	r0, [sp, #0]
     6e8:	9901      	ldr	r1, [sp, #4]
     6ea:	47b8      	blx	r7
     6ec:	0002      	movs	r2, r0
     6ee:	000b      	movs	r3, r1
     6f0:	9804      	ldr	r0, [sp, #16]
     6f2:	9905      	ldr	r1, [sp, #20]
     6f4:	47b8      	blx	r7
     6f6:	4e4d      	ldr	r6, [pc, #308]	; (82c <i2c_master_init+0x2d4>)
     6f8:	2200      	movs	r2, #0
     6fa:	4b4d      	ldr	r3, [pc, #308]	; (830 <i2c_master_init+0x2d8>)
     6fc:	47b0      	blx	r6
     6fe:	9004      	str	r0, [sp, #16]
     700:	9105      	str	r1, [sp, #20]
     702:	4648      	mov	r0, r9
     704:	47a8      	blx	r5
     706:	0002      	movs	r2, r0
     708:	000b      	movs	r3, r1
     70a:	9804      	ldr	r0, [sp, #16]
     70c:	9905      	ldr	r1, [sp, #20]
     70e:	47b8      	blx	r7
     710:	0002      	movs	r2, r0
     712:	000b      	movs	r3, r1
     714:	4d47      	ldr	r5, [pc, #284]	; (834 <i2c_master_init+0x2dc>)
     716:	9800      	ldr	r0, [sp, #0]
     718:	9901      	ldr	r1, [sp, #4]
     71a:	47a8      	blx	r5
     71c:	9a02      	ldr	r2, [sp, #8]
     71e:	9b03      	ldr	r3, [sp, #12]
     720:	47b0      	blx	r6
     722:	2200      	movs	r2, #0
     724:	4b44      	ldr	r3, [pc, #272]	; (838 <i2c_master_init+0x2e0>)
     726:	47a8      	blx	r5
     728:	9a02      	ldr	r2, [sp, #8]
     72a:	9b03      	ldr	r3, [sp, #12]
     72c:	4d43      	ldr	r5, [pc, #268]	; (83c <i2c_master_init+0x2e4>)
     72e:	47a8      	blx	r5
     730:	4b43      	ldr	r3, [pc, #268]	; (840 <i2c_master_init+0x2e8>)
     732:	4798      	blx	r3
     734:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     736:	2380      	movs	r3, #128	; 0x80
     738:	049b      	lsls	r3, r3, #18
     73a:	68a2      	ldr	r2, [r4, #8]
     73c:	429a      	cmp	r2, r3
     73e:	d01e      	beq.n	77e <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     740:	0003      	movs	r3, r0
     742:	2040      	movs	r0, #64	; 0x40
     744:	2dff      	cmp	r5, #255	; 0xff
     746:	d900      	bls.n	74a <i2c_master_init+0x1f2>
     748:	e72d      	b.n	5a6 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     74a:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     74c:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     74e:	25ff      	movs	r5, #255	; 0xff
     750:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     752:	0624      	lsls	r4, r4, #24
     754:	4325      	orrs	r5, r4
     756:	0400      	lsls	r0, r0, #16
     758:	23ff      	movs	r3, #255	; 0xff
     75a:	041b      	lsls	r3, r3, #16
     75c:	4018      	ands	r0, r3
     75e:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     760:	4643      	mov	r3, r8
     762:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     764:	2000      	movs	r0, #0
     766:	e71e      	b.n	5a6 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     768:	2100      	movs	r1, #0
     76a:	4640      	mov	r0, r8
     76c:	4b35      	ldr	r3, [pc, #212]	; (844 <i2c_master_init+0x2ec>)
     76e:	4798      	blx	r3
     770:	e74a      	b.n	608 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     772:	2101      	movs	r1, #1
     774:	4640      	mov	r0, r8
     776:	4b33      	ldr	r3, [pc, #204]	; (844 <i2c_master_init+0x2ec>)
     778:	4798      	blx	r3
     77a:	0007      	movs	r7, r0
     77c:	e751      	b.n	622 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     77e:	26fa      	movs	r6, #250	; 0xfa
     780:	00b6      	lsls	r6, r6, #2
     782:	4653      	mov	r3, sl
     784:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     786:	9800      	ldr	r0, [sp, #0]
     788:	9901      	ldr	r1, [sp, #4]
     78a:	0002      	movs	r2, r0
     78c:	000b      	movs	r3, r1
     78e:	4c27      	ldr	r4, [pc, #156]	; (82c <i2c_master_init+0x2d4>)
     790:	47a0      	blx	r4
     792:	9000      	str	r0, [sp, #0]
     794:	9101      	str	r1, [sp, #4]
     796:	0030      	movs	r0, r6
     798:	4b20      	ldr	r3, [pc, #128]	; (81c <i2c_master_init+0x2c4>)
     79a:	4798      	blx	r3
     79c:	2200      	movs	r2, #0
     79e:	4b2a      	ldr	r3, [pc, #168]	; (848 <i2c_master_init+0x2f0>)
     7a0:	47b8      	blx	r7
     7a2:	0002      	movs	r2, r0
     7a4:	000b      	movs	r3, r1
     7a6:	9800      	ldr	r0, [sp, #0]
     7a8:	9901      	ldr	r1, [sp, #4]
     7aa:	4c24      	ldr	r4, [pc, #144]	; (83c <i2c_master_init+0x2e4>)
     7ac:	47a0      	blx	r4
     7ae:	2200      	movs	r2, #0
     7b0:	4b21      	ldr	r3, [pc, #132]	; (838 <i2c_master_init+0x2e0>)
     7b2:	4c20      	ldr	r4, [pc, #128]	; (834 <i2c_master_init+0x2dc>)
     7b4:	47a0      	blx	r4
     7b6:	4b22      	ldr	r3, [pc, #136]	; (840 <i2c_master_init+0x2e8>)
     7b8:	4798      	blx	r3
     7ba:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     7bc:	d00c      	beq.n	7d8 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     7be:	0031      	movs	r1, r6
     7c0:	9807      	ldr	r0, [sp, #28]
     7c2:	4b22      	ldr	r3, [pc, #136]	; (84c <i2c_master_init+0x2f4>)
     7c4:	4798      	blx	r3
     7c6:	3802      	subs	r0, #2
     7c8:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     7ca:	002b      	movs	r3, r5
     7cc:	2dff      	cmp	r5, #255	; 0xff
     7ce:	d80c      	bhi.n	7ea <i2c_master_init+0x292>
     7d0:	28ff      	cmp	r0, #255	; 0xff
     7d2:	d9bc      	bls.n	74e <i2c_master_init+0x1f6>
     7d4:	2040      	movs	r0, #64	; 0x40
     7d6:	e6e6      	b.n	5a6 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     7d8:	0071      	lsls	r1, r6, #1
     7da:	1e48      	subs	r0, r1, #1
     7dc:	9b07      	ldr	r3, [sp, #28]
     7de:	469c      	mov	ip, r3
     7e0:	4460      	add	r0, ip
     7e2:	4b1a      	ldr	r3, [pc, #104]	; (84c <i2c_master_init+0x2f4>)
     7e4:	4798      	blx	r3
     7e6:	3801      	subs	r0, #1
     7e8:	e7ef      	b.n	7ca <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     7ea:	2040      	movs	r0, #64	; 0x40
     7ec:	e6db      	b.n	5a6 <i2c_master_init+0x4e>
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	000012bd 	.word	0x000012bd
     7f4:	40000400 	.word	0x40000400
     7f8:	00002151 	.word	0x00002151
     7fc:	000020c5 	.word	0x000020c5
     800:	000010f9 	.word	0x000010f9
     804:	00000d95 	.word	0x00000d95
     808:	00001975 	.word	0x00001975
     80c:	20000100 	.word	0x20000100
     810:	00002249 	.word	0x00002249
     814:	41002000 	.word	0x41002000
     818:	0000216d 	.word	0x0000216d
     81c:	00004219 	.word	0x00004219
     820:	00003685 	.word	0x00003685
     824:	e826d695 	.word	0xe826d695
     828:	3e112e0b 	.word	0x3e112e0b
     82c:	000029fd 	.word	0x000029fd
     830:	40240000 	.word	0x40240000
     834:	00003b85 	.word	0x00003b85
     838:	3ff00000 	.word	0x3ff00000
     83c:	0000301d 	.word	0x0000301d
     840:	000041b1 	.word	0x000041b1
     844:	00001145 	.word	0x00001145
     848:	40080000 	.word	0x40080000
     84c:	00002891 	.word	0x00002891

00000850 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     850:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     852:	7e1a      	ldrb	r2, [r3, #24]
     854:	0792      	lsls	r2, r2, #30
     856:	d507      	bpl.n	868 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     858:	2202      	movs	r2, #2
     85a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     85c:	8b5b      	ldrh	r3, [r3, #26]
     85e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     860:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     862:	17db      	asrs	r3, r3, #31
     864:	4018      	ands	r0, r3
}
     866:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     868:	8b5a      	ldrh	r2, [r3, #26]
     86a:	0752      	lsls	r2, r2, #29
     86c:	d506      	bpl.n	87c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     86e:	6859      	ldr	r1, [r3, #4]
     870:	22c0      	movs	r2, #192	; 0xc0
     872:	0292      	lsls	r2, r2, #10
     874:	430a      	orrs	r2, r1
     876:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     878:	2018      	movs	r0, #24
     87a:	e7f4      	b.n	866 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     87c:	2000      	movs	r0, #0
     87e:	e7f2      	b.n	866 <_i2c_master_address_response+0x16>

00000880 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     880:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     882:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     884:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     886:	2401      	movs	r4, #1
     888:	2502      	movs	r5, #2
     88a:	7e11      	ldrb	r1, [r2, #24]
     88c:	4221      	tst	r1, r4
     88e:	d10b      	bne.n	8a8 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     890:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     892:	4229      	tst	r1, r5
     894:	d106      	bne.n	8a4 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     896:	3301      	adds	r3, #1
     898:	b29b      	uxth	r3, r3
     89a:	8901      	ldrh	r1, [r0, #8]
     89c:	4299      	cmp	r1, r3
     89e:	d8f4      	bhi.n	88a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     8a0:	2012      	movs	r0, #18
     8a2:	e002      	b.n	8aa <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     8a4:	2000      	movs	r0, #0
     8a6:	e000      	b.n	8aa <_i2c_master_wait_for_bus+0x2a>
     8a8:	2000      	movs	r0, #0
}
     8aa:	bd30      	pop	{r4, r5, pc}

000008ac <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     8ac:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8ae:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     8b0:	6862      	ldr	r2, [r4, #4]
     8b2:	2380      	movs	r3, #128	; 0x80
     8b4:	02db      	lsls	r3, r3, #11
     8b6:	4313      	orrs	r3, r2
     8b8:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     8ba:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     8bc:	4b02      	ldr	r3, [pc, #8]	; (8c8 <_i2c_master_send_hs_master_code+0x1c>)
     8be:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     8c0:	2301      	movs	r3, #1
     8c2:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     8c4:	bd10      	pop	{r4, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	00000881 	.word	0x00000881

000008cc <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ce:	46de      	mov	lr, fp
     8d0:	4657      	mov	r7, sl
     8d2:	464e      	mov	r6, r9
     8d4:	4645      	mov	r5, r8
     8d6:	b5e0      	push	{r5, r6, r7, lr}
     8d8:	b083      	sub	sp, #12
     8da:	0006      	movs	r6, r0
     8dc:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8de:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     8e0:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     8e2:	682b      	ldr	r3, [r5, #0]
     8e4:	011b      	lsls	r3, r3, #4
     8e6:	0fdb      	lsrs	r3, r3, #31
     8e8:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     8ea:	7a4b      	ldrb	r3, [r1, #9]
     8ec:	2b00      	cmp	r3, #0
     8ee:	d12b      	bne.n	948 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     8f0:	686b      	ldr	r3, [r5, #4]
     8f2:	4a58      	ldr	r2, [pc, #352]	; (a54 <_i2c_master_read_packet+0x188>)
     8f4:	4013      	ands	r3, r2
     8f6:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     8f8:	464b      	mov	r3, r9
     8fa:	7a1b      	ldrb	r3, [r3, #8]
     8fc:	2b00      	cmp	r3, #0
     8fe:	d127      	bne.n	950 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     900:	464b      	mov	r3, r9
     902:	881b      	ldrh	r3, [r3, #0]
     904:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     906:	464a      	mov	r2, r9
     908:	7a52      	ldrb	r2, [r2, #9]
     90a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     90c:	4313      	orrs	r3, r2
     90e:	2201      	movs	r2, #1
     910:	4313      	orrs	r3, r2
     912:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     914:	0030      	movs	r0, r6
     916:	4b50      	ldr	r3, [pc, #320]	; (a58 <_i2c_master_read_packet+0x18c>)
     918:	4798      	blx	r3
     91a:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     91c:	4653      	mov	r3, sl
     91e:	2b00      	cmp	r3, #0
     920:	d003      	beq.n	92a <_i2c_master_read_packet+0x5e>
     922:	464b      	mov	r3, r9
     924:	885b      	ldrh	r3, [r3, #2]
     926:	2b01      	cmp	r3, #1
     928:	d03b      	beq.n	9a2 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     92a:	686b      	ldr	r3, [r5, #4]
     92c:	4a49      	ldr	r2, [pc, #292]	; (a54 <_i2c_master_read_packet+0x188>)
     92e:	4013      	ands	r3, r2
     930:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     932:	9b01      	ldr	r3, [sp, #4]
     934:	2b00      	cmp	r3, #0
     936:	d03a      	beq.n	9ae <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     938:	9801      	ldr	r0, [sp, #4]
     93a:	b003      	add	sp, #12
     93c:	bc3c      	pop	{r2, r3, r4, r5}
     93e:	4690      	mov	r8, r2
     940:	4699      	mov	r9, r3
     942:	46a2      	mov	sl, r4
     944:	46ab      	mov	fp, r5
     946:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     948:	7a89      	ldrb	r1, [r1, #10]
     94a:	4b44      	ldr	r3, [pc, #272]	; (a5c <_i2c_master_read_packet+0x190>)
     94c:	4798      	blx	r3
     94e:	e7cf      	b.n	8f0 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     950:	464b      	mov	r3, r9
     952:	881b      	ldrh	r3, [r3, #0]
     954:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     956:	464a      	mov	r2, r9
     958:	7a52      	ldrb	r2, [r2, #9]
     95a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     95c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     95e:	2280      	movs	r2, #128	; 0x80
     960:	0212      	lsls	r2, r2, #8
     962:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     964:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     966:	0030      	movs	r0, r6
     968:	4b3b      	ldr	r3, [pc, #236]	; (a58 <_i2c_master_read_packet+0x18c>)
     96a:	4798      	blx	r3
     96c:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     96e:	686b      	ldr	r3, [r5, #4]
     970:	4a38      	ldr	r2, [pc, #224]	; (a54 <_i2c_master_read_packet+0x188>)
     972:	4013      	ands	r3, r2
     974:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     976:	2800      	cmp	r0, #0
     978:	d1de      	bne.n	938 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     97a:	0030      	movs	r0, r6
     97c:	4b38      	ldr	r3, [pc, #224]	; (a60 <_i2c_master_read_packet+0x194>)
     97e:	4798      	blx	r3
     980:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     982:	2800      	cmp	r0, #0
     984:	d1d8      	bne.n	938 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     986:	464b      	mov	r3, r9
     988:	881b      	ldrh	r3, [r3, #0]
     98a:	0a1b      	lsrs	r3, r3, #8
     98c:	2278      	movs	r2, #120	; 0x78
     98e:	4313      	orrs	r3, r2
     990:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     992:	464a      	mov	r2, r9
     994:	7a52      	ldrb	r2, [r2, #9]
     996:	0392      	lsls	r2, r2, #14
     998:	2101      	movs	r1, #1
     99a:	430a      	orrs	r2, r1
     99c:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     99e:	626b      	str	r3, [r5, #36]	; 0x24
     9a0:	e7b8      	b.n	914 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     9a2:	686a      	ldr	r2, [r5, #4]
     9a4:	2380      	movs	r3, #128	; 0x80
     9a6:	02db      	lsls	r3, r3, #11
     9a8:	4313      	orrs	r3, r2
     9aa:	606b      	str	r3, [r5, #4]
     9ac:	e7c1      	b.n	932 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     9ae:	0030      	movs	r0, r6
     9b0:	4b2b      	ldr	r3, [pc, #172]	; (a60 <_i2c_master_read_packet+0x194>)
     9b2:	4798      	blx	r3
     9b4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     9b6:	2800      	cmp	r0, #0
     9b8:	d1be      	bne.n	938 <_i2c_master_read_packet+0x6c>
     9ba:	3c01      	subs	r4, #1
     9bc:	b2a4      	uxth	r4, r4
     9be:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     9c0:	4b28      	ldr	r3, [pc, #160]	; (a64 <_i2c_master_read_packet+0x198>)
     9c2:	469b      	mov	fp, r3
     9c4:	e015      	b.n	9f2 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     9c6:	2c01      	cmp	r4, #1
     9c8:	d020      	beq.n	a0c <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     9ca:	0030      	movs	r0, r6
     9cc:	4b26      	ldr	r3, [pc, #152]	; (a68 <_i2c_master_read_packet+0x19c>)
     9ce:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     9d0:	4643      	mov	r3, r8
     9d2:	1c5f      	adds	r7, r3, #1
     9d4:	b2bf      	uxth	r7, r7
     9d6:	2328      	movs	r3, #40	; 0x28
     9d8:	5ceb      	ldrb	r3, [r5, r3]
     9da:	464a      	mov	r2, r9
     9dc:	6852      	ldr	r2, [r2, #4]
     9de:	4641      	mov	r1, r8
     9e0:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     9e2:	0030      	movs	r0, r6
     9e4:	4b1c      	ldr	r3, [pc, #112]	; (a58 <_i2c_master_read_packet+0x18c>)
     9e6:	4798      	blx	r3
     9e8:	3c01      	subs	r4, #1
     9ea:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     9ec:	2800      	cmp	r0, #0
     9ee:	d115      	bne.n	a1c <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     9f0:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     9f2:	455c      	cmp	r4, fp
     9f4:	d014      	beq.n	a20 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     9f6:	8b6b      	ldrh	r3, [r5, #26]
     9f8:	069b      	lsls	r3, r3, #26
     9fa:	d527      	bpl.n	a4c <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     9fc:	7af3      	ldrb	r3, [r6, #11]
     9fe:	2b00      	cmp	r3, #0
     a00:	d0e3      	beq.n	9ca <_i2c_master_read_packet+0xfe>
     a02:	4653      	mov	r3, sl
     a04:	2b00      	cmp	r3, #0
     a06:	d1de      	bne.n	9c6 <_i2c_master_read_packet+0xfa>
     a08:	2c00      	cmp	r4, #0
     a0a:	d1de      	bne.n	9ca <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     a0c:	686a      	ldr	r2, [r5, #4]
     a0e:	2380      	movs	r3, #128	; 0x80
     a10:	02db      	lsls	r3, r3, #11
     a12:	4313      	orrs	r3, r2
     a14:	606b      	str	r3, [r5, #4]
     a16:	3c01      	subs	r4, #1
     a18:	b2a4      	uxth	r4, r4
     a1a:	e7ea      	b.n	9f2 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     a1c:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     a1e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     a20:	7ab3      	ldrb	r3, [r6, #10]
     a22:	2b00      	cmp	r3, #0
     a24:	d109      	bne.n	a3a <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     a26:	0030      	movs	r0, r6
     a28:	4b0f      	ldr	r3, [pc, #60]	; (a68 <_i2c_master_read_packet+0x19c>)
     a2a:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     a2c:	2328      	movs	r3, #40	; 0x28
     a2e:	5cea      	ldrb	r2, [r5, r3]
     a30:	464b      	mov	r3, r9
     a32:	685b      	ldr	r3, [r3, #4]
     a34:	4641      	mov	r1, r8
     a36:	545a      	strb	r2, [r3, r1]
     a38:	e77e      	b.n	938 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     a3a:	0030      	movs	r0, r6
     a3c:	4b0a      	ldr	r3, [pc, #40]	; (a68 <_i2c_master_read_packet+0x19c>)
     a3e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a40:	686a      	ldr	r2, [r5, #4]
     a42:	23c0      	movs	r3, #192	; 0xc0
     a44:	029b      	lsls	r3, r3, #10
     a46:	4313      	orrs	r3, r2
     a48:	606b      	str	r3, [r5, #4]
     a4a:	e7ec      	b.n	a26 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     a4c:	2341      	movs	r3, #65	; 0x41
     a4e:	9301      	str	r3, [sp, #4]
     a50:	e772      	b.n	938 <_i2c_master_read_packet+0x6c>
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	fffbffff 	.word	0xfffbffff
     a58:	00000881 	.word	0x00000881
     a5c:	000008ad 	.word	0x000008ad
     a60:	00000851 	.word	0x00000851
     a64:	0000ffff 	.word	0x0000ffff
     a68:	0000054d 	.word	0x0000054d

00000a6c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a6e:	46de      	mov	lr, fp
     a70:	4657      	mov	r7, sl
     a72:	464e      	mov	r6, r9
     a74:	4645      	mov	r5, r8
     a76:	b5e0      	push	{r5, r6, r7, lr}
     a78:	b083      	sub	sp, #12
     a7a:	0006      	movs	r6, r0
     a7c:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a7e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     a80:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     a82:	4b32      	ldr	r3, [pc, #200]	; (b4c <_i2c_master_write_packet+0xe0>)
     a84:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     a86:	7a7b      	ldrb	r3, [r7, #9]
     a88:	2b00      	cmp	r3, #0
     a8a:	d11d      	bne.n	ac8 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a8c:	686b      	ldr	r3, [r5, #4]
     a8e:	4a30      	ldr	r2, [pc, #192]	; (b50 <_i2c_master_write_packet+0xe4>)
     a90:	4013      	ands	r3, r2
     a92:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     a94:	7a3b      	ldrb	r3, [r7, #8]
     a96:	2b00      	cmp	r3, #0
     a98:	d01b      	beq.n	ad2 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     a9a:	883b      	ldrh	r3, [r7, #0]
     a9c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a9e:	7a7a      	ldrb	r2, [r7, #9]
     aa0:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     aa2:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     aa4:	2280      	movs	r2, #128	; 0x80
     aa6:	0212      	lsls	r2, r2, #8
     aa8:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     aaa:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     aac:	0030      	movs	r0, r6
     aae:	4b29      	ldr	r3, [pc, #164]	; (b54 <_i2c_master_write_packet+0xe8>)
     ab0:	4798      	blx	r3
     ab2:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     ab4:	2800      	cmp	r0, #0
     ab6:	d013      	beq.n	ae0 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     ab8:	9801      	ldr	r0, [sp, #4]
     aba:	b003      	add	sp, #12
     abc:	bc3c      	pop	{r2, r3, r4, r5}
     abe:	4690      	mov	r8, r2
     ac0:	4699      	mov	r9, r3
     ac2:	46a2      	mov	sl, r4
     ac4:	46ab      	mov	fp, r5
     ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     ac8:	7ab9      	ldrb	r1, [r7, #10]
     aca:	0030      	movs	r0, r6
     acc:	4b22      	ldr	r3, [pc, #136]	; (b58 <_i2c_master_write_packet+0xec>)
     ace:	4798      	blx	r3
     ad0:	e7dc      	b.n	a8c <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     ad2:	883b      	ldrh	r3, [r7, #0]
     ad4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     ad6:	7a7a      	ldrb	r2, [r7, #9]
     ad8:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     ada:	4313      	orrs	r3, r2
     adc:	626b      	str	r3, [r5, #36]	; 0x24
     ade:	e7e5      	b.n	aac <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     ae0:	0030      	movs	r0, r6
     ae2:	4b1e      	ldr	r3, [pc, #120]	; (b5c <_i2c_master_write_packet+0xf0>)
     ae4:	4798      	blx	r3
     ae6:	1e03      	subs	r3, r0, #0
     ae8:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     aea:	d1e5      	bne.n	ab8 <_i2c_master_write_packet+0x4c>
     aec:	46a0      	mov	r8, r4
     aee:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     af0:	3320      	adds	r3, #32
     af2:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     af4:	4b15      	ldr	r3, [pc, #84]	; (b4c <_i2c_master_write_packet+0xe0>)
     af6:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     af8:	4b16      	ldr	r3, [pc, #88]	; (b54 <_i2c_master_write_packet+0xe8>)
     afa:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     afc:	4544      	cmp	r4, r8
     afe:	d015      	beq.n	b2c <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     b00:	8b6b      	ldrh	r3, [r5, #26]
     b02:	464a      	mov	r2, r9
     b04:	4213      	tst	r3, r2
     b06:	d01d      	beq.n	b44 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     b08:	0030      	movs	r0, r6
     b0a:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     b0c:	687b      	ldr	r3, [r7, #4]
     b0e:	5d1a      	ldrb	r2, [r3, r4]
     b10:	2328      	movs	r3, #40	; 0x28
     b12:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     b14:	0030      	movs	r0, r6
     b16:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     b18:	2800      	cmp	r0, #0
     b1a:	d106      	bne.n	b2a <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     b1c:	8b6b      	ldrh	r3, [r5, #26]
     b1e:	3401      	adds	r4, #1
     b20:	075b      	lsls	r3, r3, #29
     b22:	d5eb      	bpl.n	afc <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     b24:	231e      	movs	r3, #30
     b26:	9301      	str	r3, [sp, #4]
     b28:	e000      	b.n	b2c <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     b2a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     b2c:	7ab3      	ldrb	r3, [r6, #10]
     b2e:	2b00      	cmp	r3, #0
     b30:	d0c2      	beq.n	ab8 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     b32:	0030      	movs	r0, r6
     b34:	4b05      	ldr	r3, [pc, #20]	; (b4c <_i2c_master_write_packet+0xe0>)
     b36:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b38:	686a      	ldr	r2, [r5, #4]
     b3a:	23c0      	movs	r3, #192	; 0xc0
     b3c:	029b      	lsls	r3, r3, #10
     b3e:	4313      	orrs	r3, r2
     b40:	606b      	str	r3, [r5, #4]
     b42:	e7b9      	b.n	ab8 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     b44:	2341      	movs	r3, #65	; 0x41
     b46:	9301      	str	r3, [sp, #4]
     b48:	e7b6      	b.n	ab8 <_i2c_master_write_packet+0x4c>
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	0000054d 	.word	0x0000054d
     b50:	fffbffff 	.word	0xfffbffff
     b54:	00000881 	.word	0x00000881
     b58:	000008ad 	.word	0x000008ad
     b5c:	00000851 	.word	0x00000851

00000b60 <i2c_master_read_packet_wait>:
{
     b60:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     b62:	8b83      	ldrh	r3, [r0, #28]
     b64:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     b66:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     b68:	2b00      	cmp	r3, #0
     b6a:	d001      	beq.n	b70 <i2c_master_read_packet_wait+0x10>
}
     b6c:	0010      	movs	r0, r2
     b6e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     b70:	3301      	adds	r3, #1
     b72:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     b74:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     b76:	4b02      	ldr	r3, [pc, #8]	; (b80 <i2c_master_read_packet_wait+0x20>)
     b78:	4798      	blx	r3
     b7a:	0002      	movs	r2, r0
     b7c:	e7f6      	b.n	b6c <i2c_master_read_packet_wait+0xc>
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	000008cd 	.word	0x000008cd

00000b84 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     b84:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     b86:	8b83      	ldrh	r3, [r0, #28]
     b88:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     b8a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     b8c:	2b00      	cmp	r3, #0
     b8e:	d001      	beq.n	b94 <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     b90:	0010      	movs	r0, r2
     b92:	bd10      	pop	{r4, pc}
	module->send_stop = false;
     b94:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     b96:	3301      	adds	r3, #1
     b98:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     b9a:	4b02      	ldr	r3, [pc, #8]	; (ba4 <i2c_master_write_packet_wait_no_stop+0x20>)
     b9c:	4798      	blx	r3
     b9e:	0002      	movs	r2, r0
     ba0:	e7f6      	b.n	b90 <i2c_master_write_packet_wait_no_stop+0xc>
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	00000a6d 	.word	0x00000a6d

00000ba8 <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
     ba8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     baa:	6804      	ldr	r4, [r0, #0]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
     bac:	4b03      	ldr	r3, [pc, #12]	; (bbc <i2c_master_send_stop+0x14>)
     bae:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     bb0:	6862      	ldr	r2, [r4, #4]
     bb2:	23c0      	movs	r3, #192	; 0xc0
     bb4:	029b      	lsls	r3, r3, #10
     bb6:	4313      	orrs	r3, r2
     bb8:	6063      	str	r3, [r4, #4]
}
     bba:	bd10      	pop	{r4, pc}
     bbc:	0000054d 	.word	0x0000054d

00000bc0 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     bc0:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     bc2:	2207      	movs	r2, #7
     bc4:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     bc6:	421a      	tst	r2, r3
     bc8:	d1fc      	bne.n	bc4 <_i2c_master_wait_for_sync+0x4>
}
     bca:	4770      	bx	lr

00000bcc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     bcc:	b570      	push	{r4, r5, r6, lr}
     bce:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     bd0:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     bd2:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     bd4:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     bd6:	8b83      	ldrh	r3, [r0, #28]
     bd8:	1aed      	subs	r5, r5, r3
     bda:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     bdc:	8b83      	ldrh	r3, [r0, #28]
     bde:	3b01      	subs	r3, #1
     be0:	b29b      	uxth	r3, r3
     be2:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     be4:	0113      	lsls	r3, r2, #4
     be6:	d51d      	bpl.n	c24 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     be8:	7ac3      	ldrb	r3, [r0, #11]
     bea:	2b00      	cmp	r3, #0
     bec:	d003      	beq.n	bf6 <_i2c_master_read+0x2a>
     bee:	8b83      	ldrh	r3, [r0, #28]
     bf0:	b29b      	uxth	r3, r3
     bf2:	2b01      	cmp	r3, #1
     bf4:	d010      	beq.n	c18 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     bf6:	8ba3      	ldrh	r3, [r4, #28]
     bf8:	b29b      	uxth	r3, r3
     bfa:	2b00      	cmp	r3, #0
     bfc:	d102      	bne.n	c04 <_i2c_master_read+0x38>
		if (module->send_stop) {
     bfe:	7aa3      	ldrb	r3, [r4, #10]
     c00:	2b00      	cmp	r3, #0
     c02:	d11c      	bne.n	c3e <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     c04:	0020      	movs	r0, r4
     c06:	4b12      	ldr	r3, [pc, #72]	; (c50 <_i2c_master_read+0x84>)
     c08:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     c0a:	6a23      	ldr	r3, [r4, #32]
     c0c:	195d      	adds	r5, r3, r5
     c0e:	2328      	movs	r3, #40	; 0x28
     c10:	5cf3      	ldrb	r3, [r6, r3]
     c12:	b2db      	uxtb	r3, r3
     c14:	702b      	strb	r3, [r5, #0]
}
     c16:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c18:	6872      	ldr	r2, [r6, #4]
     c1a:	2380      	movs	r3, #128	; 0x80
     c1c:	02db      	lsls	r3, r3, #11
     c1e:	4313      	orrs	r3, r2
     c20:	6073      	str	r3, [r6, #4]
     c22:	e7e8      	b.n	bf6 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     c24:	7ac3      	ldrb	r3, [r0, #11]
     c26:	2b00      	cmp	r3, #0
     c28:	d0e5      	beq.n	bf6 <_i2c_master_read+0x2a>
     c2a:	8b83      	ldrh	r3, [r0, #28]
     c2c:	b29b      	uxth	r3, r3
     c2e:	2b00      	cmp	r3, #0
     c30:	d1e1      	bne.n	bf6 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c32:	6872      	ldr	r2, [r6, #4]
     c34:	2380      	movs	r3, #128	; 0x80
     c36:	02db      	lsls	r3, r3, #11
     c38:	4313      	orrs	r3, r2
     c3a:	6073      	str	r3, [r6, #4]
     c3c:	e7db      	b.n	bf6 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     c3e:	0020      	movs	r0, r4
     c40:	4b03      	ldr	r3, [pc, #12]	; (c50 <_i2c_master_read+0x84>)
     c42:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c44:	6872      	ldr	r2, [r6, #4]
     c46:	23c0      	movs	r3, #192	; 0xc0
     c48:	029b      	lsls	r3, r3, #10
     c4a:	4313      	orrs	r3, r2
     c4c:	6073      	str	r3, [r6, #4]
     c4e:	e7d9      	b.n	c04 <_i2c_master_read+0x38>
     c50:	00000bc1 	.word	0x00000bc1

00000c54 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     c54:	b570      	push	{r4, r5, r6, lr}
     c56:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c58:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     c5a:	8b6b      	ldrh	r3, [r5, #26]
     c5c:	075b      	lsls	r3, r3, #29
     c5e:	d503      	bpl.n	c68 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     c60:	221e      	movs	r2, #30
     c62:	2325      	movs	r3, #37	; 0x25
     c64:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     c66:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     c68:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     c6a:	8b83      	ldrh	r3, [r0, #28]
     c6c:	1af6      	subs	r6, r6, r3
     c6e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     c70:	8b83      	ldrh	r3, [r0, #28]
     c72:	3b01      	subs	r3, #1
     c74:	b29b      	uxth	r3, r3
     c76:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     c78:	4b04      	ldr	r3, [pc, #16]	; (c8c <_i2c_master_write+0x38>)
     c7a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     c7c:	6a23      	ldr	r3, [r4, #32]
     c7e:	199e      	adds	r6, r3, r6
     c80:	7833      	ldrb	r3, [r6, #0]
     c82:	b2db      	uxtb	r3, r3
     c84:	2228      	movs	r2, #40	; 0x28
     c86:	54ab      	strb	r3, [r5, r2]
     c88:	e7ed      	b.n	c66 <_i2c_master_write+0x12>
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	00000bc1 	.word	0x00000bc1

00000c90 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c92:	0005      	movs	r5, r0
     c94:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c96:	6806      	ldr	r6, [r0, #0]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
     c98:	684b      	ldr	r3, [r1, #4]
     c9a:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     c9c:	884b      	ldrh	r3, [r1, #2]
     c9e:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     ca0:	2201      	movs	r2, #1
     ca2:	2324      	movs	r3, #36	; 0x24
     ca4:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     ca6:	3204      	adds	r2, #4
     ca8:	3301      	adds	r3, #1
     caa:	54c2      	strb	r2, [r0, r3]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     cac:	6837      	ldr	r7, [r6, #0]
     cae:	013f      	lsls	r7, r7, #4
     cb0:	0fff      	lsrs	r7, r7, #31

	/* Switch to high speed mode */
	if (packet->high_speed) {
     cb2:	7a4b      	ldrb	r3, [r1, #9]
     cb4:	2b00      	cmp	r3, #0
     cb6:	d117      	bne.n	ce8 <_i2c_master_read_packet+0x58>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     cb8:	2f00      	cmp	r7, #0
     cba:	d002      	beq.n	cc2 <_i2c_master_read_packet+0x32>
     cbc:	8863      	ldrh	r3, [r4, #2]
     cbe:	2b01      	cmp	r3, #1
     cc0:	d016      	beq.n	cf0 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     cc2:	6873      	ldr	r3, [r6, #4]
     cc4:	4a20      	ldr	r2, [pc, #128]	; (d48 <_i2c_master_read_packet+0xb8>)
     cc6:	4013      	ands	r3, r2
     cc8:	6073      	str	r3, [r6, #4]
	}

	if (packet->ten_bit_address) {
     cca:	7a23      	ldrb	r3, [r4, #8]
     ccc:	2b00      	cmp	r3, #0
     cce:	d115      	bne.n	cfc <_i2c_master_read_packet+0x6c>
		} else {
			return tmp_status;
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
     cd0:	2303      	movs	r3, #3
     cd2:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     cd4:	8823      	ldrh	r3, [r4, #0]
     cd6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     cd8:	7a62      	ldrb	r2, [r4, #9]
     cda:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     cdc:	4313      	orrs	r3, r2
     cde:	2201      	movs	r2, #1
     ce0:	4313      	orrs	r3, r2
     ce2:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
     ce4:	2000      	movs	r0, #0
}
     ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     ce8:	7a89      	ldrb	r1, [r1, #10]
     cea:	4b18      	ldr	r3, [pc, #96]	; (d4c <_i2c_master_read_packet+0xbc>)
     cec:	4798      	blx	r3
     cee:	e7e3      	b.n	cb8 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     cf0:	6872      	ldr	r2, [r6, #4]
     cf2:	2380      	movs	r3, #128	; 0x80
     cf4:	02db      	lsls	r3, r3, #11
     cf6:	4313      	orrs	r3, r2
     cf8:	6073      	str	r3, [r6, #4]
     cfa:	e7e6      	b.n	cca <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     cfc:	8823      	ldrh	r3, [r4, #0]
     cfe:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d00:	7a62      	ldrb	r2, [r4, #9]
     d02:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     d04:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d06:	2280      	movs	r2, #128	; 0x80
     d08:	0212      	lsls	r2, r2, #8
     d0a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     d0c:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     d0e:	0028      	movs	r0, r5
     d10:	4b0f      	ldr	r3, [pc, #60]	; (d50 <_i2c_master_read_packet+0xc0>)
     d12:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     d14:	6873      	ldr	r3, [r6, #4]
     d16:	4a0c      	ldr	r2, [pc, #48]	; (d48 <_i2c_master_read_packet+0xb8>)
     d18:	4013      	ands	r3, r2
     d1a:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     d1c:	2800      	cmp	r0, #0
     d1e:	d1e2      	bne.n	ce6 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     d20:	0028      	movs	r0, r5
     d22:	4b0c      	ldr	r3, [pc, #48]	; (d54 <_i2c_master_read_packet+0xc4>)
     d24:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     d26:	2800      	cmp	r0, #0
     d28:	d1dd      	bne.n	ce6 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     d2a:	2303      	movs	r3, #3
     d2c:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     d2e:	8823      	ldrh	r3, [r4, #0]
     d30:	0a1b      	lsrs	r3, r3, #8
     d32:	2278      	movs	r2, #120	; 0x78
     d34:	4313      	orrs	r3, r2
     d36:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d38:	7a62      	ldrb	r2, [r4, #9]
     d3a:	0392      	lsls	r2, r2, #14
     d3c:	2101      	movs	r1, #1
     d3e:	430a      	orrs	r2, r1
     d40:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     d42:	6273      	str	r3, [r6, #36]	; 0x24
     d44:	e7cf      	b.n	ce6 <_i2c_master_read_packet+0x56>
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	fffbffff 	.word	0xfffbffff
     d4c:	000008ad 	.word	0x000008ad
     d50:	00000881 	.word	0x00000881
     d54:	00000851 	.word	0x00000851

00000d58 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     d58:	1c93      	adds	r3, r2, #2
     d5a:	009b      	lsls	r3, r3, #2
     d5c:	18c3      	adds	r3, r0, r3
     d5e:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     d60:	7e03      	ldrb	r3, [r0, #24]
     d62:	2101      	movs	r1, #1
     d64:	4091      	lsls	r1, r2
     d66:	430b      	orrs	r3, r1
     d68:	b2db      	uxtb	r3, r3
     d6a:	7603      	strb	r3, [r0, #24]
}
     d6c:	4770      	bx	lr
	...

00000d70 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     d70:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     d72:	8b83      	ldrh	r3, [r0, #28]
     d74:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     d76:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     d78:	2b00      	cmp	r3, #0
     d7a:	d001      	beq.n	d80 <i2c_master_read_packet_job+0x10>
	/* Make sure we send STOP */
	module->send_stop = true;
	module->send_nack = true;
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
}
     d7c:	0010      	movs	r0, r2
     d7e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     d80:	3301      	adds	r3, #1
     d82:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     d84:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     d86:	4b02      	ldr	r3, [pc, #8]	; (d90 <i2c_master_read_packet_job+0x20>)
     d88:	4798      	blx	r3
     d8a:	0002      	movs	r2, r0
     d8c:	e7f6      	b.n	d7c <i2c_master_read_packet_job+0xc>
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	00000c91 	.word	0x00000c91

00000d94 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     d94:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     d96:	0080      	lsls	r0, r0, #2
     d98:	4b75      	ldr	r3, [pc, #468]	; (f70 <_i2c_master_interrupt_handler+0x1dc>)
     d9a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d9c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     d9e:	682b      	ldr	r3, [r5, #0]
     da0:	011b      	lsls	r3, r3, #4
     da2:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     da4:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     da6:	7e26      	ldrb	r6, [r4, #24]
     da8:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     daa:	8b63      	ldrh	r3, [r4, #26]
     dac:	b29b      	uxth	r3, r3
     dae:	2b00      	cmp	r3, #0
     db0:	d103      	bne.n	dba <_i2c_master_interrupt_handler+0x26>
     db2:	8ba3      	ldrh	r3, [r4, #28]
     db4:	b29b      	uxth	r3, r3
     db6:	2b00      	cmp	r3, #0
     db8:	d123      	bne.n	e02 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     dba:	8b63      	ldrh	r3, [r4, #26]
     dbc:	b29b      	uxth	r3, r3
     dbe:	2b00      	cmp	r3, #0
     dc0:	d008      	beq.n	dd4 <_i2c_master_interrupt_handler+0x40>
     dc2:	8ba3      	ldrh	r3, [r4, #28]
     dc4:	b29b      	uxth	r3, r3
     dc6:	2b00      	cmp	r3, #0
     dc8:	d104      	bne.n	dd4 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     dca:	3325      	adds	r3, #37	; 0x25
     dcc:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     dce:	2b05      	cmp	r3, #5
     dd0:	d100      	bne.n	dd4 <_i2c_master_interrupt_handler+0x40>
     dd2:	e06d      	b.n	eb0 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     dd4:	8b63      	ldrh	r3, [r4, #26]
     dd6:	b29b      	uxth	r3, r3
     dd8:	2b00      	cmp	r3, #0
     dda:	d024      	beq.n	e26 <_i2c_master_interrupt_handler+0x92>
     ddc:	8ba3      	ldrh	r3, [r4, #28]
     dde:	b29b      	uxth	r3, r3
     de0:	2b00      	cmp	r3, #0
     de2:	d020      	beq.n	e26 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     de4:	8b6b      	ldrh	r3, [r5, #26]
     de6:	069b      	lsls	r3, r3, #26
     de8:	d500      	bpl.n	dec <_i2c_master_interrupt_handler+0x58>
     dea:	e081      	b.n	ef0 <_i2c_master_interrupt_handler+0x15c>
     dec:	2a00      	cmp	r2, #0
     dee:	d004      	beq.n	dfa <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     df0:	8ba3      	ldrh	r3, [r4, #28]
     df2:	b29b      	uxth	r3, r3
     df4:	2b01      	cmp	r3, #1
     df6:	d100      	bne.n	dfa <_i2c_master_interrupt_handler+0x66>
     df8:	e07a      	b.n	ef0 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     dfa:	2241      	movs	r2, #65	; 0x41
     dfc:	2325      	movs	r3, #37	; 0x25
     dfe:	54e2      	strb	r2, [r4, r3]
     e00:	e011      	b.n	e26 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     e02:	7e2b      	ldrb	r3, [r5, #24]
     e04:	07db      	lsls	r3, r3, #31
     e06:	d507      	bpl.n	e18 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     e08:	2301      	movs	r3, #1
     e0a:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     e0c:	8b6b      	ldrh	r3, [r5, #26]
     e0e:	079b      	lsls	r3, r3, #30
     e10:	d52e      	bpl.n	e70 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     e12:	2241      	movs	r2, #65	; 0x41
     e14:	2325      	movs	r3, #37	; 0x25
     e16:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     e18:	8ba3      	ldrh	r3, [r4, #28]
     e1a:	b29b      	uxth	r3, r3
     e1c:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     e1e:	2325      	movs	r3, #37	; 0x25
     e20:	5ce3      	ldrb	r3, [r4, r3]
     e22:	2b05      	cmp	r3, #5
     e24:	d038      	beq.n	e98 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     e26:	8b63      	ldrh	r3, [r4, #26]
     e28:	b29b      	uxth	r3, r3
     e2a:	2b00      	cmp	r3, #0
     e2c:	d007      	beq.n	e3e <_i2c_master_interrupt_handler+0xaa>
     e2e:	8ba3      	ldrh	r3, [r4, #28]
     e30:	b29b      	uxth	r3, r3
     e32:	2b00      	cmp	r3, #0
     e34:	d103      	bne.n	e3e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     e36:	3325      	adds	r3, #37	; 0x25
     e38:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     e3a:	2b05      	cmp	r3, #5
     e3c:	d064      	beq.n	f08 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     e3e:	2325      	movs	r3, #37	; 0x25
     e40:	5ce3      	ldrb	r3, [r4, r3]
     e42:	2b05      	cmp	r3, #5
     e44:	d013      	beq.n	e6e <_i2c_master_interrupt_handler+0xda>
     e46:	2325      	movs	r3, #37	; 0x25
     e48:	5ce3      	ldrb	r3, [r4, r3]
     e4a:	2b00      	cmp	r3, #0
     e4c:	d00f      	beq.n	e6e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     e4e:	2303      	movs	r3, #3
     e50:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     e52:	2300      	movs	r3, #0
     e54:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     e56:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     e58:	3325      	adds	r3, #37	; 0x25
     e5a:	5ce3      	ldrb	r3, [r4, r3]
     e5c:	2b41      	cmp	r3, #65	; 0x41
     e5e:	d003      	beq.n	e68 <_i2c_master_interrupt_handler+0xd4>
     e60:	7aa3      	ldrb	r3, [r4, #10]
     e62:	2b00      	cmp	r3, #0
     e64:	d000      	beq.n	e68 <_i2c_master_interrupt_handler+0xd4>
     e66:	e075      	b.n	f54 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     e68:	0773      	lsls	r3, r6, #29
     e6a:	d500      	bpl.n	e6e <_i2c_master_interrupt_handler+0xda>
     e6c:	e07b      	b.n	f66 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     e6e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     e70:	8b6b      	ldrh	r3, [r5, #26]
     e72:	075b      	lsls	r3, r3, #29
     e74:	d5d0      	bpl.n	e18 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     e76:	2218      	movs	r2, #24
     e78:	2325      	movs	r3, #37	; 0x25
     e7a:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     e7c:	2300      	movs	r3, #0
     e7e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     e80:	7aa3      	ldrb	r3, [r4, #10]
     e82:	2b00      	cmp	r3, #0
     e84:	d0c8      	beq.n	e18 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     e86:	0020      	movs	r0, r4
     e88:	4b3a      	ldr	r3, [pc, #232]	; (f74 <_i2c_master_interrupt_handler+0x1e0>)
     e8a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e8c:	686a      	ldr	r2, [r5, #4]
     e8e:	23c0      	movs	r3, #192	; 0xc0
     e90:	029b      	lsls	r3, r3, #10
     e92:	4313      	orrs	r3, r2
     e94:	606b      	str	r3, [r5, #4]
     e96:	e7bf      	b.n	e18 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e98:	331f      	adds	r3, #31
     e9a:	5ce3      	ldrb	r3, [r4, r3]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d003      	beq.n	ea8 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     ea0:	0020      	movs	r0, r4
     ea2:	4b35      	ldr	r3, [pc, #212]	; (f78 <_i2c_master_interrupt_handler+0x1e4>)
     ea4:	4798      	blx	r3
     ea6:	e7be      	b.n	e26 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     ea8:	0020      	movs	r0, r4
     eaa:	4b34      	ldr	r3, [pc, #208]	; (f7c <_i2c_master_interrupt_handler+0x1e8>)
     eac:	4798      	blx	r3
     eae:	e7ba      	b.n	e26 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     eb0:	331f      	adds	r3, #31
     eb2:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     eb4:	2b00      	cmp	r3, #0
     eb6:	d000      	beq.n	eba <_i2c_master_interrupt_handler+0x126>
     eb8:	e78c      	b.n	dd4 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     eba:	3303      	adds	r3, #3
     ebc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     ebe:	2300      	movs	r3, #0
     ec0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     ec2:	3325      	adds	r3, #37	; 0x25
     ec4:	2200      	movs	r2, #0
     ec6:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     ec8:	7aa3      	ldrb	r3, [r4, #10]
     eca:	2b00      	cmp	r3, #0
     ecc:	d107      	bne.n	ede <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     ece:	2301      	movs	r3, #1
     ed0:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     ed2:	07f3      	lsls	r3, r6, #31
     ed4:	d5a7      	bpl.n	e26 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     ed6:	68e3      	ldr	r3, [r4, #12]
     ed8:	0020      	movs	r0, r4
     eda:	4798      	blx	r3
     edc:	e7a3      	b.n	e26 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     ede:	0020      	movs	r0, r4
     ee0:	4b24      	ldr	r3, [pc, #144]	; (f74 <_i2c_master_interrupt_handler+0x1e0>)
     ee2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ee4:	686a      	ldr	r2, [r5, #4]
     ee6:	23c0      	movs	r3, #192	; 0xc0
     ee8:	029b      	lsls	r3, r3, #10
     eea:	4313      	orrs	r3, r2
     eec:	606b      	str	r3, [r5, #4]
     eee:	e7f0      	b.n	ed2 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     ef0:	2324      	movs	r3, #36	; 0x24
     ef2:	5ce3      	ldrb	r3, [r4, r3]
     ef4:	2b00      	cmp	r3, #0
     ef6:	d103      	bne.n	f00 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     ef8:	0020      	movs	r0, r4
     efa:	4b20      	ldr	r3, [pc, #128]	; (f7c <_i2c_master_interrupt_handler+0x1e8>)
     efc:	4798      	blx	r3
     efe:	e792      	b.n	e26 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     f00:	0020      	movs	r0, r4
     f02:	4b1d      	ldr	r3, [pc, #116]	; (f78 <_i2c_master_interrupt_handler+0x1e4>)
     f04:	4798      	blx	r3
     f06:	e78e      	b.n	e26 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     f08:	331f      	adds	r3, #31
     f0a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     f0c:	2b01      	cmp	r3, #1
     f0e:	d196      	bne.n	e3e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     f10:	7e2b      	ldrb	r3, [r5, #24]
     f12:	079b      	lsls	r3, r3, #30
     f14:	d501      	bpl.n	f1a <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     f16:	2302      	movs	r3, #2
     f18:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     f1a:	2303      	movs	r3, #3
     f1c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     f1e:	2300      	movs	r3, #0
     f20:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     f22:	3325      	adds	r3, #37	; 0x25
     f24:	2200      	movs	r2, #0
     f26:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     f28:	07b3      	lsls	r3, r6, #30
     f2a:	d503      	bpl.n	f34 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     f2c:	2324      	movs	r3, #36	; 0x24
     f2e:	5ce3      	ldrb	r3, [r4, r3]
     f30:	2b01      	cmp	r3, #1
     f32:	d00b      	beq.n	f4c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     f34:	07f3      	lsls	r3, r6, #31
     f36:	d400      	bmi.n	f3a <_i2c_master_interrupt_handler+0x1a6>
     f38:	e781      	b.n	e3e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     f3a:	2324      	movs	r3, #36	; 0x24
     f3c:	5ce3      	ldrb	r3, [r4, r3]
     f3e:	2b00      	cmp	r3, #0
     f40:	d000      	beq.n	f44 <_i2c_master_interrupt_handler+0x1b0>
     f42:	e77c      	b.n	e3e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     f44:	68e3      	ldr	r3, [r4, #12]
     f46:	0020      	movs	r0, r4
     f48:	4798      	blx	r3
     f4a:	e778      	b.n	e3e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     f4c:	6923      	ldr	r3, [r4, #16]
     f4e:	0020      	movs	r0, r4
     f50:	4798      	blx	r3
     f52:	e774      	b.n	e3e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     f54:	0020      	movs	r0, r4
     f56:	4b07      	ldr	r3, [pc, #28]	; (f74 <_i2c_master_interrupt_handler+0x1e0>)
     f58:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     f5a:	686a      	ldr	r2, [r5, #4]
     f5c:	23e0      	movs	r3, #224	; 0xe0
     f5e:	02db      	lsls	r3, r3, #11
     f60:	4313      	orrs	r3, r2
     f62:	606b      	str	r3, [r5, #4]
     f64:	e780      	b.n	e68 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     f66:	6963      	ldr	r3, [r4, #20]
     f68:	0020      	movs	r0, r4
     f6a:	4798      	blx	r3
}
     f6c:	e77f      	b.n	e6e <_i2c_master_interrupt_handler+0xda>
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	20000100 	.word	0x20000100
     f74:	00000bc1 	.word	0x00000bc1
     f78:	00000bcd 	.word	0x00000bcd
     f7c:	00000c55 	.word	0x00000c55

00000f80 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     f80:	b5f0      	push	{r4, r5, r6, r7, lr}
     f82:	46de      	mov	lr, fp
     f84:	4657      	mov	r7, sl
     f86:	464e      	mov	r6, r9
     f88:	4645      	mov	r5, r8
     f8a:	b5e0      	push	{r5, r6, r7, lr}
     f8c:	b087      	sub	sp, #28
     f8e:	4680      	mov	r8, r0
     f90:	9104      	str	r1, [sp, #16]
     f92:	0016      	movs	r6, r2
     f94:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     f96:	2200      	movs	r2, #0
     f98:	2300      	movs	r3, #0
     f9a:	2100      	movs	r1, #0
     f9c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     f9e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     fa0:	2001      	movs	r0, #1
     fa2:	0021      	movs	r1, r4
     fa4:	9600      	str	r6, [sp, #0]
     fa6:	9701      	str	r7, [sp, #4]
     fa8:	465c      	mov	r4, fp
     faa:	9403      	str	r4, [sp, #12]
     fac:	4644      	mov	r4, r8
     fae:	9405      	str	r4, [sp, #20]
     fb0:	e013      	b.n	fda <long_division+0x5a>
     fb2:	2420      	movs	r4, #32
     fb4:	1a64      	subs	r4, r4, r1
     fb6:	0005      	movs	r5, r0
     fb8:	40e5      	lsrs	r5, r4
     fba:	46a8      	mov	r8, r5
     fbc:	e014      	b.n	fe8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     fbe:	9c00      	ldr	r4, [sp, #0]
     fc0:	9d01      	ldr	r5, [sp, #4]
     fc2:	1b12      	subs	r2, r2, r4
     fc4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     fc6:	465c      	mov	r4, fp
     fc8:	464d      	mov	r5, r9
     fca:	432c      	orrs	r4, r5
     fcc:	46a3      	mov	fp, r4
     fce:	9c03      	ldr	r4, [sp, #12]
     fd0:	4645      	mov	r5, r8
     fd2:	432c      	orrs	r4, r5
     fd4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     fd6:	3901      	subs	r1, #1
     fd8:	d325      	bcc.n	1026 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     fda:	2420      	movs	r4, #32
     fdc:	4264      	negs	r4, r4
     fde:	190c      	adds	r4, r1, r4
     fe0:	d4e7      	bmi.n	fb2 <long_division+0x32>
     fe2:	0005      	movs	r5, r0
     fe4:	40a5      	lsls	r5, r4
     fe6:	46a8      	mov	r8, r5
     fe8:	0004      	movs	r4, r0
     fea:	408c      	lsls	r4, r1
     fec:	46a1      	mov	r9, r4
		r = r << 1;
     fee:	1892      	adds	r2, r2, r2
     ff0:	415b      	adcs	r3, r3
     ff2:	0014      	movs	r4, r2
     ff4:	001d      	movs	r5, r3
		if (n & bit_shift) {
     ff6:	9e05      	ldr	r6, [sp, #20]
     ff8:	464f      	mov	r7, r9
     ffa:	403e      	ands	r6, r7
     ffc:	46b4      	mov	ip, r6
     ffe:	9e04      	ldr	r6, [sp, #16]
    1000:	4647      	mov	r7, r8
    1002:	403e      	ands	r6, r7
    1004:	46b2      	mov	sl, r6
    1006:	4666      	mov	r6, ip
    1008:	4657      	mov	r7, sl
    100a:	433e      	orrs	r6, r7
    100c:	d003      	beq.n	1016 <long_division+0x96>
			r |= 0x01;
    100e:	0006      	movs	r6, r0
    1010:	4326      	orrs	r6, r4
    1012:	0032      	movs	r2, r6
    1014:	002b      	movs	r3, r5
		if (r >= d) {
    1016:	9c00      	ldr	r4, [sp, #0]
    1018:	9d01      	ldr	r5, [sp, #4]
    101a:	429d      	cmp	r5, r3
    101c:	d8db      	bhi.n	fd6 <long_division+0x56>
    101e:	d1ce      	bne.n	fbe <long_division+0x3e>
    1020:	4294      	cmp	r4, r2
    1022:	d8d8      	bhi.n	fd6 <long_division+0x56>
    1024:	e7cb      	b.n	fbe <long_division+0x3e>
    1026:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1028:	4658      	mov	r0, fp
    102a:	0019      	movs	r1, r3
    102c:	b007      	add	sp, #28
    102e:	bc3c      	pop	{r2, r3, r4, r5}
    1030:	4690      	mov	r8, r2
    1032:	4699      	mov	r9, r3
    1034:	46a2      	mov	sl, r4
    1036:	46ab      	mov	fp, r5
    1038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000103a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    103a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    103c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    103e:	2340      	movs	r3, #64	; 0x40
    1040:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1042:	4281      	cmp	r1, r0
    1044:	d202      	bcs.n	104c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1046:	0018      	movs	r0, r3
    1048:	bd10      	pop	{r4, pc}
		baud_calculated++;
    104a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    104c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    104e:	1c63      	adds	r3, r4, #1
    1050:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1052:	4288      	cmp	r0, r1
    1054:	d9f9      	bls.n	104a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1056:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1058:	2cff      	cmp	r4, #255	; 0xff
    105a:	d8f4      	bhi.n	1046 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    105c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    105e:	2300      	movs	r3, #0
    1060:	e7f1      	b.n	1046 <_sercom_get_sync_baud_val+0xc>
	...

00001064 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1064:	b5f0      	push	{r4, r5, r6, r7, lr}
    1066:	b083      	sub	sp, #12
    1068:	000f      	movs	r7, r1
    106a:	0016      	movs	r6, r2
    106c:	aa08      	add	r2, sp, #32
    106e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1070:	0004      	movs	r4, r0
    1072:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1074:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1076:	42bc      	cmp	r4, r7
    1078:	d902      	bls.n	1080 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    107a:	0010      	movs	r0, r2
    107c:	b003      	add	sp, #12
    107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1080:	2b00      	cmp	r3, #0
    1082:	d114      	bne.n	10ae <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1084:	0002      	movs	r2, r0
    1086:	0008      	movs	r0, r1
    1088:	2100      	movs	r1, #0
    108a:	4c19      	ldr	r4, [pc, #100]	; (10f0 <_sercom_get_async_baud_val+0x8c>)
    108c:	47a0      	blx	r4
    108e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1090:	003a      	movs	r2, r7
    1092:	2300      	movs	r3, #0
    1094:	2000      	movs	r0, #0
    1096:	4c17      	ldr	r4, [pc, #92]	; (10f4 <_sercom_get_async_baud_val+0x90>)
    1098:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    109a:	2200      	movs	r2, #0
    109c:	2301      	movs	r3, #1
    109e:	1a12      	subs	r2, r2, r0
    10a0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    10a2:	0c12      	lsrs	r2, r2, #16
    10a4:	041b      	lsls	r3, r3, #16
    10a6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    10a8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    10aa:	2200      	movs	r2, #0
    10ac:	e7e5      	b.n	107a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    10ae:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    10b0:	2b01      	cmp	r3, #1
    10b2:	d1f9      	bne.n	10a8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    10b4:	000a      	movs	r2, r1
    10b6:	2300      	movs	r3, #0
    10b8:	2100      	movs	r1, #0
    10ba:	4c0d      	ldr	r4, [pc, #52]	; (10f0 <_sercom_get_async_baud_val+0x8c>)
    10bc:	47a0      	blx	r4
    10be:	0002      	movs	r2, r0
    10c0:	000b      	movs	r3, r1
    10c2:	9200      	str	r2, [sp, #0]
    10c4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    10c6:	0038      	movs	r0, r7
    10c8:	2100      	movs	r1, #0
    10ca:	4c0a      	ldr	r4, [pc, #40]	; (10f4 <_sercom_get_async_baud_val+0x90>)
    10cc:	47a0      	blx	r4
    10ce:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    10d0:	2380      	movs	r3, #128	; 0x80
    10d2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    10d4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    10d6:	4298      	cmp	r0, r3
    10d8:	d8cf      	bhi.n	107a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    10da:	0f79      	lsrs	r1, r7, #29
    10dc:	00f8      	lsls	r0, r7, #3
    10de:	9a00      	ldr	r2, [sp, #0]
    10e0:	9b01      	ldr	r3, [sp, #4]
    10e2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    10e4:	00ea      	lsls	r2, r5, #3
    10e6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    10e8:	b2d2      	uxtb	r2, r2
    10ea:	0352      	lsls	r2, r2, #13
    10ec:	432a      	orrs	r2, r5
    10ee:	e7db      	b.n	10a8 <_sercom_get_async_baud_val+0x44>
    10f0:	000029a9 	.word	0x000029a9
    10f4:	00000f81 	.word	0x00000f81

000010f8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    10f8:	b510      	push	{r4, lr}
    10fa:	b082      	sub	sp, #8
    10fc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    10fe:	4b0e      	ldr	r3, [pc, #56]	; (1138 <sercom_set_gclk_generator+0x40>)
    1100:	781b      	ldrb	r3, [r3, #0]
    1102:	2b00      	cmp	r3, #0
    1104:	d007      	beq.n	1116 <sercom_set_gclk_generator+0x1e>
    1106:	2900      	cmp	r1, #0
    1108:	d105      	bne.n	1116 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    110a:	4b0b      	ldr	r3, [pc, #44]	; (1138 <sercom_set_gclk_generator+0x40>)
    110c:	785b      	ldrb	r3, [r3, #1]
    110e:	4283      	cmp	r3, r0
    1110:	d010      	beq.n	1134 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1112:	201d      	movs	r0, #29
    1114:	e00c      	b.n	1130 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1116:	a901      	add	r1, sp, #4
    1118:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    111a:	2013      	movs	r0, #19
    111c:	4b07      	ldr	r3, [pc, #28]	; (113c <sercom_set_gclk_generator+0x44>)
    111e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1120:	2013      	movs	r0, #19
    1122:	4b07      	ldr	r3, [pc, #28]	; (1140 <sercom_set_gclk_generator+0x48>)
    1124:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1126:	4b04      	ldr	r3, [pc, #16]	; (1138 <sercom_set_gclk_generator+0x40>)
    1128:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    112a:	2201      	movs	r2, #1
    112c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    112e:	2000      	movs	r0, #0
}
    1130:	b002      	add	sp, #8
    1132:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1134:	2000      	movs	r0, #0
    1136:	e7fb      	b.n	1130 <sercom_set_gclk_generator+0x38>
    1138:	200000a4 	.word	0x200000a4
    113c:	00002151 	.word	0x00002151
    1140:	000020c5 	.word	0x000020c5

00001144 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1144:	4b40      	ldr	r3, [pc, #256]	; (1248 <_sercom_get_default_pad+0x104>)
    1146:	4298      	cmp	r0, r3
    1148:	d031      	beq.n	11ae <_sercom_get_default_pad+0x6a>
    114a:	d90a      	bls.n	1162 <_sercom_get_default_pad+0x1e>
    114c:	4b3f      	ldr	r3, [pc, #252]	; (124c <_sercom_get_default_pad+0x108>)
    114e:	4298      	cmp	r0, r3
    1150:	d04d      	beq.n	11ee <_sercom_get_default_pad+0xaa>
    1152:	4b3f      	ldr	r3, [pc, #252]	; (1250 <_sercom_get_default_pad+0x10c>)
    1154:	4298      	cmp	r0, r3
    1156:	d05a      	beq.n	120e <_sercom_get_default_pad+0xca>
    1158:	4b3e      	ldr	r3, [pc, #248]	; (1254 <_sercom_get_default_pad+0x110>)
    115a:	4298      	cmp	r0, r3
    115c:	d037      	beq.n	11ce <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    115e:	2000      	movs	r0, #0
}
    1160:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1162:	4b3d      	ldr	r3, [pc, #244]	; (1258 <_sercom_get_default_pad+0x114>)
    1164:	4298      	cmp	r0, r3
    1166:	d00c      	beq.n	1182 <_sercom_get_default_pad+0x3e>
    1168:	4b3c      	ldr	r3, [pc, #240]	; (125c <_sercom_get_default_pad+0x118>)
    116a:	4298      	cmp	r0, r3
    116c:	d1f7      	bne.n	115e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    116e:	2901      	cmp	r1, #1
    1170:	d017      	beq.n	11a2 <_sercom_get_default_pad+0x5e>
    1172:	2900      	cmp	r1, #0
    1174:	d05d      	beq.n	1232 <_sercom_get_default_pad+0xee>
    1176:	2902      	cmp	r1, #2
    1178:	d015      	beq.n	11a6 <_sercom_get_default_pad+0x62>
    117a:	2903      	cmp	r1, #3
    117c:	d015      	beq.n	11aa <_sercom_get_default_pad+0x66>
	return 0;
    117e:	2000      	movs	r0, #0
    1180:	e7ee      	b.n	1160 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1182:	2901      	cmp	r1, #1
    1184:	d007      	beq.n	1196 <_sercom_get_default_pad+0x52>
    1186:	2900      	cmp	r1, #0
    1188:	d051      	beq.n	122e <_sercom_get_default_pad+0xea>
    118a:	2902      	cmp	r1, #2
    118c:	d005      	beq.n	119a <_sercom_get_default_pad+0x56>
    118e:	2903      	cmp	r1, #3
    1190:	d005      	beq.n	119e <_sercom_get_default_pad+0x5a>
	return 0;
    1192:	2000      	movs	r0, #0
    1194:	e7e4      	b.n	1160 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1196:	4832      	ldr	r0, [pc, #200]	; (1260 <_sercom_get_default_pad+0x11c>)
    1198:	e7e2      	b.n	1160 <_sercom_get_default_pad+0x1c>
    119a:	4832      	ldr	r0, [pc, #200]	; (1264 <_sercom_get_default_pad+0x120>)
    119c:	e7e0      	b.n	1160 <_sercom_get_default_pad+0x1c>
    119e:	4832      	ldr	r0, [pc, #200]	; (1268 <_sercom_get_default_pad+0x124>)
    11a0:	e7de      	b.n	1160 <_sercom_get_default_pad+0x1c>
    11a2:	4832      	ldr	r0, [pc, #200]	; (126c <_sercom_get_default_pad+0x128>)
    11a4:	e7dc      	b.n	1160 <_sercom_get_default_pad+0x1c>
    11a6:	4832      	ldr	r0, [pc, #200]	; (1270 <_sercom_get_default_pad+0x12c>)
    11a8:	e7da      	b.n	1160 <_sercom_get_default_pad+0x1c>
    11aa:	4832      	ldr	r0, [pc, #200]	; (1274 <_sercom_get_default_pad+0x130>)
    11ac:	e7d8      	b.n	1160 <_sercom_get_default_pad+0x1c>
    11ae:	2901      	cmp	r1, #1
    11b0:	d007      	beq.n	11c2 <_sercom_get_default_pad+0x7e>
    11b2:	2900      	cmp	r1, #0
    11b4:	d03f      	beq.n	1236 <_sercom_get_default_pad+0xf2>
    11b6:	2902      	cmp	r1, #2
    11b8:	d005      	beq.n	11c6 <_sercom_get_default_pad+0x82>
    11ba:	2903      	cmp	r1, #3
    11bc:	d005      	beq.n	11ca <_sercom_get_default_pad+0x86>
	return 0;
    11be:	2000      	movs	r0, #0
    11c0:	e7ce      	b.n	1160 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11c2:	482d      	ldr	r0, [pc, #180]	; (1278 <_sercom_get_default_pad+0x134>)
    11c4:	e7cc      	b.n	1160 <_sercom_get_default_pad+0x1c>
    11c6:	482d      	ldr	r0, [pc, #180]	; (127c <_sercom_get_default_pad+0x138>)
    11c8:	e7ca      	b.n	1160 <_sercom_get_default_pad+0x1c>
    11ca:	482d      	ldr	r0, [pc, #180]	; (1280 <_sercom_get_default_pad+0x13c>)
    11cc:	e7c8      	b.n	1160 <_sercom_get_default_pad+0x1c>
    11ce:	2901      	cmp	r1, #1
    11d0:	d007      	beq.n	11e2 <_sercom_get_default_pad+0x9e>
    11d2:	2900      	cmp	r1, #0
    11d4:	d031      	beq.n	123a <_sercom_get_default_pad+0xf6>
    11d6:	2902      	cmp	r1, #2
    11d8:	d005      	beq.n	11e6 <_sercom_get_default_pad+0xa2>
    11da:	2903      	cmp	r1, #3
    11dc:	d005      	beq.n	11ea <_sercom_get_default_pad+0xa6>
	return 0;
    11de:	2000      	movs	r0, #0
    11e0:	e7be      	b.n	1160 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11e2:	4828      	ldr	r0, [pc, #160]	; (1284 <_sercom_get_default_pad+0x140>)
    11e4:	e7bc      	b.n	1160 <_sercom_get_default_pad+0x1c>
    11e6:	4828      	ldr	r0, [pc, #160]	; (1288 <_sercom_get_default_pad+0x144>)
    11e8:	e7ba      	b.n	1160 <_sercom_get_default_pad+0x1c>
    11ea:	4828      	ldr	r0, [pc, #160]	; (128c <_sercom_get_default_pad+0x148>)
    11ec:	e7b8      	b.n	1160 <_sercom_get_default_pad+0x1c>
    11ee:	2901      	cmp	r1, #1
    11f0:	d007      	beq.n	1202 <_sercom_get_default_pad+0xbe>
    11f2:	2900      	cmp	r1, #0
    11f4:	d023      	beq.n	123e <_sercom_get_default_pad+0xfa>
    11f6:	2902      	cmp	r1, #2
    11f8:	d005      	beq.n	1206 <_sercom_get_default_pad+0xc2>
    11fa:	2903      	cmp	r1, #3
    11fc:	d005      	beq.n	120a <_sercom_get_default_pad+0xc6>
	return 0;
    11fe:	2000      	movs	r0, #0
    1200:	e7ae      	b.n	1160 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1202:	4823      	ldr	r0, [pc, #140]	; (1290 <_sercom_get_default_pad+0x14c>)
    1204:	e7ac      	b.n	1160 <_sercom_get_default_pad+0x1c>
    1206:	4823      	ldr	r0, [pc, #140]	; (1294 <_sercom_get_default_pad+0x150>)
    1208:	e7aa      	b.n	1160 <_sercom_get_default_pad+0x1c>
    120a:	4823      	ldr	r0, [pc, #140]	; (1298 <_sercom_get_default_pad+0x154>)
    120c:	e7a8      	b.n	1160 <_sercom_get_default_pad+0x1c>
    120e:	2901      	cmp	r1, #1
    1210:	d007      	beq.n	1222 <_sercom_get_default_pad+0xde>
    1212:	2900      	cmp	r1, #0
    1214:	d015      	beq.n	1242 <_sercom_get_default_pad+0xfe>
    1216:	2902      	cmp	r1, #2
    1218:	d005      	beq.n	1226 <_sercom_get_default_pad+0xe2>
    121a:	2903      	cmp	r1, #3
    121c:	d005      	beq.n	122a <_sercom_get_default_pad+0xe6>
	return 0;
    121e:	2000      	movs	r0, #0
    1220:	e79e      	b.n	1160 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1222:	481e      	ldr	r0, [pc, #120]	; (129c <_sercom_get_default_pad+0x158>)
    1224:	e79c      	b.n	1160 <_sercom_get_default_pad+0x1c>
    1226:	481e      	ldr	r0, [pc, #120]	; (12a0 <_sercom_get_default_pad+0x15c>)
    1228:	e79a      	b.n	1160 <_sercom_get_default_pad+0x1c>
    122a:	481e      	ldr	r0, [pc, #120]	; (12a4 <_sercom_get_default_pad+0x160>)
    122c:	e798      	b.n	1160 <_sercom_get_default_pad+0x1c>
    122e:	481e      	ldr	r0, [pc, #120]	; (12a8 <_sercom_get_default_pad+0x164>)
    1230:	e796      	b.n	1160 <_sercom_get_default_pad+0x1c>
    1232:	2003      	movs	r0, #3
    1234:	e794      	b.n	1160 <_sercom_get_default_pad+0x1c>
    1236:	481d      	ldr	r0, [pc, #116]	; (12ac <_sercom_get_default_pad+0x168>)
    1238:	e792      	b.n	1160 <_sercom_get_default_pad+0x1c>
    123a:	481d      	ldr	r0, [pc, #116]	; (12b0 <_sercom_get_default_pad+0x16c>)
    123c:	e790      	b.n	1160 <_sercom_get_default_pad+0x1c>
    123e:	481d      	ldr	r0, [pc, #116]	; (12b4 <_sercom_get_default_pad+0x170>)
    1240:	e78e      	b.n	1160 <_sercom_get_default_pad+0x1c>
    1242:	481d      	ldr	r0, [pc, #116]	; (12b8 <_sercom_get_default_pad+0x174>)
    1244:	e78c      	b.n	1160 <_sercom_get_default_pad+0x1c>
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	42001000 	.word	0x42001000
    124c:	42001800 	.word	0x42001800
    1250:	42001c00 	.word	0x42001c00
    1254:	42001400 	.word	0x42001400
    1258:	42000800 	.word	0x42000800
    125c:	42000c00 	.word	0x42000c00
    1260:	00050003 	.word	0x00050003
    1264:	00060003 	.word	0x00060003
    1268:	00070003 	.word	0x00070003
    126c:	00010003 	.word	0x00010003
    1270:	001e0003 	.word	0x001e0003
    1274:	001f0003 	.word	0x001f0003
    1278:	00090003 	.word	0x00090003
    127c:	000a0003 	.word	0x000a0003
    1280:	000b0003 	.word	0x000b0003
    1284:	00110003 	.word	0x00110003
    1288:	00120003 	.word	0x00120003
    128c:	00130003 	.word	0x00130003
    1290:	000d0003 	.word	0x000d0003
    1294:	000e0003 	.word	0x000e0003
    1298:	000f0003 	.word	0x000f0003
    129c:	00170003 	.word	0x00170003
    12a0:	00180003 	.word	0x00180003
    12a4:	00190003 	.word	0x00190003
    12a8:	00040003 	.word	0x00040003
    12ac:	00080003 	.word	0x00080003
    12b0:	00100003 	.word	0x00100003
    12b4:	000c0003 	.word	0x000c0003
    12b8:	00160003 	.word	0x00160003

000012bc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    12bc:	b530      	push	{r4, r5, lr}
    12be:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    12c0:	4b0b      	ldr	r3, [pc, #44]	; (12f0 <_sercom_get_sercom_inst_index+0x34>)
    12c2:	466a      	mov	r2, sp
    12c4:	cb32      	ldmia	r3!, {r1, r4, r5}
    12c6:	c232      	stmia	r2!, {r1, r4, r5}
    12c8:	cb32      	ldmia	r3!, {r1, r4, r5}
    12ca:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    12cc:	9b00      	ldr	r3, [sp, #0]
    12ce:	4283      	cmp	r3, r0
    12d0:	d00b      	beq.n	12ea <_sercom_get_sercom_inst_index+0x2e>
    12d2:	2301      	movs	r3, #1
    12d4:	009a      	lsls	r2, r3, #2
    12d6:	4669      	mov	r1, sp
    12d8:	5852      	ldr	r2, [r2, r1]
    12da:	4282      	cmp	r2, r0
    12dc:	d006      	beq.n	12ec <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12de:	3301      	adds	r3, #1
    12e0:	2b06      	cmp	r3, #6
    12e2:	d1f7      	bne.n	12d4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    12e4:	2000      	movs	r0, #0
}
    12e6:	b007      	add	sp, #28
    12e8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12ea:	2300      	movs	r3, #0
			return i;
    12ec:	b2d8      	uxtb	r0, r3
    12ee:	e7fa      	b.n	12e6 <_sercom_get_sercom_inst_index+0x2a>
    12f0:	0000550c 	.word	0x0000550c

000012f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    12f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12f6:	46c6      	mov	lr, r8
    12f8:	b500      	push	{lr}
    12fa:	000c      	movs	r4, r1
    12fc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    12fe:	2800      	cmp	r0, #0
    1300:	d10f      	bne.n	1322 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1302:	2a00      	cmp	r2, #0
    1304:	dd11      	ble.n	132a <_read+0x36>
    1306:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1308:	4e09      	ldr	r6, [pc, #36]	; (1330 <_read+0x3c>)
    130a:	4d0a      	ldr	r5, [pc, #40]	; (1334 <_read+0x40>)
    130c:	6830      	ldr	r0, [r6, #0]
    130e:	0021      	movs	r1, r4
    1310:	682b      	ldr	r3, [r5, #0]
    1312:	4798      	blx	r3
		ptr++;
    1314:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1316:	42bc      	cmp	r4, r7
    1318:	d1f8      	bne.n	130c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    131a:	4640      	mov	r0, r8
    131c:	bc04      	pop	{r2}
    131e:	4690      	mov	r8, r2
    1320:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1322:	2301      	movs	r3, #1
    1324:	425b      	negs	r3, r3
    1326:	4698      	mov	r8, r3
    1328:	e7f7      	b.n	131a <_read+0x26>
	for (; len > 0; --len) {
    132a:	4680      	mov	r8, r0
    132c:	e7f5      	b.n	131a <_read+0x26>
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	200000fc 	.word	0x200000fc
    1334:	200000f4 	.word	0x200000f4

00001338 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1338:	b5f0      	push	{r4, r5, r6, r7, lr}
    133a:	46c6      	mov	lr, r8
    133c:	b500      	push	{lr}
    133e:	000e      	movs	r6, r1
    1340:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1342:	3801      	subs	r0, #1
    1344:	2802      	cmp	r0, #2
    1346:	d810      	bhi.n	136a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1348:	2a00      	cmp	r2, #0
    134a:	d011      	beq.n	1370 <_write+0x38>
    134c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    134e:	4b0c      	ldr	r3, [pc, #48]	; (1380 <_write+0x48>)
    1350:	4698      	mov	r8, r3
    1352:	4f0c      	ldr	r7, [pc, #48]	; (1384 <_write+0x4c>)
    1354:	4643      	mov	r3, r8
    1356:	6818      	ldr	r0, [r3, #0]
    1358:	5d31      	ldrb	r1, [r6, r4]
    135a:	683b      	ldr	r3, [r7, #0]
    135c:	4798      	blx	r3
    135e:	2800      	cmp	r0, #0
    1360:	db08      	blt.n	1374 <_write+0x3c>
			return -1;
		}
		++nChars;
    1362:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1364:	42a5      	cmp	r5, r4
    1366:	d1f5      	bne.n	1354 <_write+0x1c>
    1368:	e006      	b.n	1378 <_write+0x40>
		return -1;
    136a:	2401      	movs	r4, #1
    136c:	4264      	negs	r4, r4
    136e:	e003      	b.n	1378 <_write+0x40>
	for (; len != 0; --len) {
    1370:	0014      	movs	r4, r2
    1372:	e001      	b.n	1378 <_write+0x40>
			return -1;
    1374:	2401      	movs	r4, #1
    1376:	4264      	negs	r4, r4
	}
	return nChars;
}
    1378:	0020      	movs	r0, r4
    137a:	bc04      	pop	{r2}
    137c:	4690      	mov	r8, r2
    137e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1380:	200000fc 	.word	0x200000fc
    1384:	200000f8 	.word	0x200000f8

00001388 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1388:	b5f0      	push	{r4, r5, r6, r7, lr}
    138a:	46de      	mov	lr, fp
    138c:	4657      	mov	r7, sl
    138e:	464e      	mov	r6, r9
    1390:	4645      	mov	r5, r8
    1392:	b5e0      	push	{r5, r6, r7, lr}
    1394:	b091      	sub	sp, #68	; 0x44
    1396:	0005      	movs	r5, r0
    1398:	000c      	movs	r4, r1
    139a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    139c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    139e:	0008      	movs	r0, r1
    13a0:	4bbc      	ldr	r3, [pc, #752]	; (1694 <usart_init+0x30c>)
    13a2:	4798      	blx	r3
    13a4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    13a6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    13a8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    13aa:	07db      	lsls	r3, r3, #31
    13ac:	d506      	bpl.n	13bc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    13ae:	b011      	add	sp, #68	; 0x44
    13b0:	bc3c      	pop	{r2, r3, r4, r5}
    13b2:	4690      	mov	r8, r2
    13b4:	4699      	mov	r9, r3
    13b6:	46a2      	mov	sl, r4
    13b8:	46ab      	mov	fp, r5
    13ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    13bc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    13be:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    13c0:	079b      	lsls	r3, r3, #30
    13c2:	d4f4      	bmi.n	13ae <usart_init+0x26>
    13c4:	49b4      	ldr	r1, [pc, #720]	; (1698 <usart_init+0x310>)
    13c6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    13c8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    13ca:	2301      	movs	r3, #1
    13cc:	40bb      	lsls	r3, r7
    13ce:	4303      	orrs	r3, r0
    13d0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    13d2:	a90f      	add	r1, sp, #60	; 0x3c
    13d4:	272d      	movs	r7, #45	; 0x2d
    13d6:	5df3      	ldrb	r3, [r6, r7]
    13d8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13da:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    13dc:	b2d3      	uxtb	r3, r2
    13de:	9302      	str	r3, [sp, #8]
    13e0:	0018      	movs	r0, r3
    13e2:	4bae      	ldr	r3, [pc, #696]	; (169c <usart_init+0x314>)
    13e4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    13e6:	9802      	ldr	r0, [sp, #8]
    13e8:	4bad      	ldr	r3, [pc, #692]	; (16a0 <usart_init+0x318>)
    13ea:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    13ec:	5df0      	ldrb	r0, [r6, r7]
    13ee:	2100      	movs	r1, #0
    13f0:	4bac      	ldr	r3, [pc, #688]	; (16a4 <usart_init+0x31c>)
    13f2:	4798      	blx	r3
	module->character_size = config->character_size;
    13f4:	7af3      	ldrb	r3, [r6, #11]
    13f6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    13f8:	2324      	movs	r3, #36	; 0x24
    13fa:	5cf3      	ldrb	r3, [r6, r3]
    13fc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    13fe:	2325      	movs	r3, #37	; 0x25
    1400:	5cf3      	ldrb	r3, [r6, r3]
    1402:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1404:	7ef3      	ldrb	r3, [r6, #27]
    1406:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1408:	7f33      	ldrb	r3, [r6, #28]
    140a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    140c:	682b      	ldr	r3, [r5, #0]
    140e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1410:	0018      	movs	r0, r3
    1412:	4ba0      	ldr	r3, [pc, #640]	; (1694 <usart_init+0x30c>)
    1414:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1416:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1418:	2200      	movs	r2, #0
    141a:	230e      	movs	r3, #14
    141c:	a906      	add	r1, sp, #24
    141e:	468c      	mov	ip, r1
    1420:	4463      	add	r3, ip
    1422:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1424:	8a32      	ldrh	r2, [r6, #16]
    1426:	9202      	str	r2, [sp, #8]
    1428:	2380      	movs	r3, #128	; 0x80
    142a:	01db      	lsls	r3, r3, #7
    142c:	429a      	cmp	r2, r3
    142e:	d100      	bne.n	1432 <usart_init+0xaa>
    1430:	e09e      	b.n	1570 <usart_init+0x1e8>
    1432:	d90f      	bls.n	1454 <usart_init+0xcc>
    1434:	23c0      	movs	r3, #192	; 0xc0
    1436:	01db      	lsls	r3, r3, #7
    1438:	9a02      	ldr	r2, [sp, #8]
    143a:	429a      	cmp	r2, r3
    143c:	d100      	bne.n	1440 <usart_init+0xb8>
    143e:	e092      	b.n	1566 <usart_init+0x1de>
    1440:	2380      	movs	r3, #128	; 0x80
    1442:	021b      	lsls	r3, r3, #8
    1444:	429a      	cmp	r2, r3
    1446:	d000      	beq.n	144a <usart_init+0xc2>
    1448:	e11f      	b.n	168a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    144a:	2303      	movs	r3, #3
    144c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    144e:	2300      	movs	r3, #0
    1450:	9307      	str	r3, [sp, #28]
    1452:	e008      	b.n	1466 <usart_init+0xde>
	switch (config->sample_rate) {
    1454:	2380      	movs	r3, #128	; 0x80
    1456:	019b      	lsls	r3, r3, #6
    1458:	429a      	cmp	r2, r3
    145a:	d000      	beq.n	145e <usart_init+0xd6>
    145c:	e115      	b.n	168a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    145e:	2310      	movs	r3, #16
    1460:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1462:	3b0f      	subs	r3, #15
    1464:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1466:	6833      	ldr	r3, [r6, #0]
    1468:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    146a:	68f3      	ldr	r3, [r6, #12]
    146c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    146e:	6973      	ldr	r3, [r6, #20]
    1470:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1472:	7e33      	ldrb	r3, [r6, #24]
    1474:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1476:	2326      	movs	r3, #38	; 0x26
    1478:	5cf3      	ldrb	r3, [r6, r3]
    147a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    147c:	6873      	ldr	r3, [r6, #4]
    147e:	4699      	mov	r9, r3
	switch (transfer_mode)
    1480:	2b00      	cmp	r3, #0
    1482:	d100      	bne.n	1486 <usart_init+0xfe>
    1484:	e0a0      	b.n	15c8 <usart_init+0x240>
    1486:	2380      	movs	r3, #128	; 0x80
    1488:	055b      	lsls	r3, r3, #21
    148a:	4599      	cmp	r9, r3
    148c:	d100      	bne.n	1490 <usart_init+0x108>
    148e:	e084      	b.n	159a <usart_init+0x212>
	if(config->encoding_format_enable) {
    1490:	7e73      	ldrb	r3, [r6, #25]
    1492:	2b00      	cmp	r3, #0
    1494:	d002      	beq.n	149c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1496:	7eb3      	ldrb	r3, [r6, #26]
    1498:	4642      	mov	r2, r8
    149a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    149c:	682a      	ldr	r2, [r5, #0]
    149e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    14a0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    14a2:	2b00      	cmp	r3, #0
    14a4:	d1fc      	bne.n	14a0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    14a6:	330e      	adds	r3, #14
    14a8:	aa06      	add	r2, sp, #24
    14aa:	4694      	mov	ip, r2
    14ac:	4463      	add	r3, ip
    14ae:	881b      	ldrh	r3, [r3, #0]
    14b0:	4642      	mov	r2, r8
    14b2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    14b4:	9b05      	ldr	r3, [sp, #20]
    14b6:	9a03      	ldr	r2, [sp, #12]
    14b8:	4313      	orrs	r3, r2
    14ba:	9a04      	ldr	r2, [sp, #16]
    14bc:	4313      	orrs	r3, r2
    14be:	464a      	mov	r2, r9
    14c0:	4313      	orrs	r3, r2
    14c2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    14c4:	465b      	mov	r3, fp
    14c6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    14c8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    14ca:	4653      	mov	r3, sl
    14cc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    14ce:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    14d0:	2327      	movs	r3, #39	; 0x27
    14d2:	5cf3      	ldrb	r3, [r6, r3]
    14d4:	2b00      	cmp	r3, #0
    14d6:	d101      	bne.n	14dc <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    14d8:	3304      	adds	r3, #4
    14da:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    14dc:	7e73      	ldrb	r3, [r6, #25]
    14de:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    14e0:	7f32      	ldrb	r2, [r6, #28]
    14e2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    14e4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    14e6:	7f72      	ldrb	r2, [r6, #29]
    14e8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    14ea:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    14ec:	2224      	movs	r2, #36	; 0x24
    14ee:	5cb2      	ldrb	r2, [r6, r2]
    14f0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    14f2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    14f4:	2225      	movs	r2, #37	; 0x25
    14f6:	5cb2      	ldrb	r2, [r6, r2]
    14f8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    14fa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    14fc:	7ab1      	ldrb	r1, [r6, #10]
    14fe:	7af2      	ldrb	r2, [r6, #11]
    1500:	4311      	orrs	r1, r2
    1502:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1504:	8933      	ldrh	r3, [r6, #8]
    1506:	2bff      	cmp	r3, #255	; 0xff
    1508:	d100      	bne.n	150c <usart_init+0x184>
    150a:	e081      	b.n	1610 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    150c:	2280      	movs	r2, #128	; 0x80
    150e:	0452      	lsls	r2, r2, #17
    1510:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1512:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1514:	232c      	movs	r3, #44	; 0x2c
    1516:	5cf3      	ldrb	r3, [r6, r3]
    1518:	2b00      	cmp	r3, #0
    151a:	d103      	bne.n	1524 <usart_init+0x19c>
    151c:	4b62      	ldr	r3, [pc, #392]	; (16a8 <usart_init+0x320>)
    151e:	789b      	ldrb	r3, [r3, #2]
    1520:	079b      	lsls	r3, r3, #30
    1522:	d501      	bpl.n	1528 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1524:	2380      	movs	r3, #128	; 0x80
    1526:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1528:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    152a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    152c:	2b00      	cmp	r3, #0
    152e:	d1fc      	bne.n	152a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1530:	4643      	mov	r3, r8
    1532:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1534:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1536:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1538:	2b00      	cmp	r3, #0
    153a:	d1fc      	bne.n	1536 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    153c:	4643      	mov	r3, r8
    153e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1540:	ab0e      	add	r3, sp, #56	; 0x38
    1542:	2280      	movs	r2, #128	; 0x80
    1544:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1546:	2200      	movs	r2, #0
    1548:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    154a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    154c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    154e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1550:	930a      	str	r3, [sp, #40]	; 0x28
    1552:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1554:	930b      	str	r3, [sp, #44]	; 0x2c
    1556:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1558:	930c      	str	r3, [sp, #48]	; 0x30
    155a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    155c:	9302      	str	r3, [sp, #8]
    155e:	930d      	str	r3, [sp, #52]	; 0x34
    1560:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1562:	ae0a      	add	r6, sp, #40	; 0x28
    1564:	e063      	b.n	162e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1566:	2308      	movs	r3, #8
    1568:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    156a:	3b07      	subs	r3, #7
    156c:	9307      	str	r3, [sp, #28]
    156e:	e77a      	b.n	1466 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1570:	6833      	ldr	r3, [r6, #0]
    1572:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1574:	68f3      	ldr	r3, [r6, #12]
    1576:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1578:	6973      	ldr	r3, [r6, #20]
    157a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    157c:	7e33      	ldrb	r3, [r6, #24]
    157e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1580:	2326      	movs	r3, #38	; 0x26
    1582:	5cf3      	ldrb	r3, [r6, r3]
    1584:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1586:	6873      	ldr	r3, [r6, #4]
    1588:	4699      	mov	r9, r3
	switch (transfer_mode)
    158a:	2b00      	cmp	r3, #0
    158c:	d018      	beq.n	15c0 <usart_init+0x238>
    158e:	2380      	movs	r3, #128	; 0x80
    1590:	055b      	lsls	r3, r3, #21
    1592:	4599      	cmp	r9, r3
    1594:	d001      	beq.n	159a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1596:	2000      	movs	r0, #0
    1598:	e025      	b.n	15e6 <usart_init+0x25e>
			if (!config->use_external_clock) {
    159a:	2327      	movs	r3, #39	; 0x27
    159c:	5cf3      	ldrb	r3, [r6, r3]
    159e:	2b00      	cmp	r3, #0
    15a0:	d000      	beq.n	15a4 <usart_init+0x21c>
    15a2:	e775      	b.n	1490 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    15a4:	6a33      	ldr	r3, [r6, #32]
    15a6:	001f      	movs	r7, r3
    15a8:	b2c0      	uxtb	r0, r0
    15aa:	4b40      	ldr	r3, [pc, #256]	; (16ac <usart_init+0x324>)
    15ac:	4798      	blx	r3
    15ae:	0001      	movs	r1, r0
    15b0:	220e      	movs	r2, #14
    15b2:	ab06      	add	r3, sp, #24
    15b4:	469c      	mov	ip, r3
    15b6:	4462      	add	r2, ip
    15b8:	0038      	movs	r0, r7
    15ba:	4b3d      	ldr	r3, [pc, #244]	; (16b0 <usart_init+0x328>)
    15bc:	4798      	blx	r3
    15be:	e012      	b.n	15e6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    15c0:	2308      	movs	r3, #8
    15c2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    15c4:	2300      	movs	r3, #0
    15c6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    15c8:	2327      	movs	r3, #39	; 0x27
    15ca:	5cf3      	ldrb	r3, [r6, r3]
    15cc:	2b00      	cmp	r3, #0
    15ce:	d00e      	beq.n	15ee <usart_init+0x266>
				status_code =
    15d0:	9b06      	ldr	r3, [sp, #24]
    15d2:	9300      	str	r3, [sp, #0]
    15d4:	9b07      	ldr	r3, [sp, #28]
    15d6:	220e      	movs	r2, #14
    15d8:	a906      	add	r1, sp, #24
    15da:	468c      	mov	ip, r1
    15dc:	4462      	add	r2, ip
    15de:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    15e0:	6a30      	ldr	r0, [r6, #32]
    15e2:	4f34      	ldr	r7, [pc, #208]	; (16b4 <usart_init+0x32c>)
    15e4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    15e6:	2800      	cmp	r0, #0
    15e8:	d000      	beq.n	15ec <usart_init+0x264>
    15ea:	e6e0      	b.n	13ae <usart_init+0x26>
    15ec:	e750      	b.n	1490 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    15ee:	6a33      	ldr	r3, [r6, #32]
    15f0:	001f      	movs	r7, r3
    15f2:	b2c0      	uxtb	r0, r0
    15f4:	4b2d      	ldr	r3, [pc, #180]	; (16ac <usart_init+0x324>)
    15f6:	4798      	blx	r3
    15f8:	0001      	movs	r1, r0
				status_code =
    15fa:	9b06      	ldr	r3, [sp, #24]
    15fc:	9300      	str	r3, [sp, #0]
    15fe:	9b07      	ldr	r3, [sp, #28]
    1600:	220e      	movs	r2, #14
    1602:	a806      	add	r0, sp, #24
    1604:	4684      	mov	ip, r0
    1606:	4462      	add	r2, ip
    1608:	0038      	movs	r0, r7
    160a:	4f2a      	ldr	r7, [pc, #168]	; (16b4 <usart_init+0x32c>)
    160c:	47b8      	blx	r7
    160e:	e7ea      	b.n	15e6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1610:	7ef3      	ldrb	r3, [r6, #27]
    1612:	2b00      	cmp	r3, #0
    1614:	d100      	bne.n	1618 <usart_init+0x290>
    1616:	e77d      	b.n	1514 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1618:	2380      	movs	r3, #128	; 0x80
    161a:	04db      	lsls	r3, r3, #19
    161c:	431f      	orrs	r7, r3
    161e:	e779      	b.n	1514 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1620:	0020      	movs	r0, r4
    1622:	4b25      	ldr	r3, [pc, #148]	; (16b8 <usart_init+0x330>)
    1624:	4798      	blx	r3
    1626:	e007      	b.n	1638 <usart_init+0x2b0>
    1628:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    162a:	2f04      	cmp	r7, #4
    162c:	d00d      	beq.n	164a <usart_init+0x2c2>
    162e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1630:	00bb      	lsls	r3, r7, #2
    1632:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1634:	2800      	cmp	r0, #0
    1636:	d0f3      	beq.n	1620 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1638:	1c43      	adds	r3, r0, #1
    163a:	d0f5      	beq.n	1628 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    163c:	a90e      	add	r1, sp, #56	; 0x38
    163e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1640:	0c00      	lsrs	r0, r0, #16
    1642:	b2c0      	uxtb	r0, r0
    1644:	4b1d      	ldr	r3, [pc, #116]	; (16bc <usart_init+0x334>)
    1646:	4798      	blx	r3
    1648:	e7ee      	b.n	1628 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    164a:	2300      	movs	r3, #0
    164c:	60eb      	str	r3, [r5, #12]
    164e:	612b      	str	r3, [r5, #16]
    1650:	616b      	str	r3, [r5, #20]
    1652:	61ab      	str	r3, [r5, #24]
    1654:	61eb      	str	r3, [r5, #28]
    1656:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1658:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    165a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    165c:	2200      	movs	r2, #0
    165e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1660:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1662:	3330      	adds	r3, #48	; 0x30
    1664:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1666:	3301      	adds	r3, #1
    1668:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    166a:	3301      	adds	r3, #1
    166c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    166e:	3301      	adds	r3, #1
    1670:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1672:	6828      	ldr	r0, [r5, #0]
    1674:	4b07      	ldr	r3, [pc, #28]	; (1694 <usart_init+0x30c>)
    1676:	4798      	blx	r3
    1678:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    167a:	4911      	ldr	r1, [pc, #68]	; (16c0 <usart_init+0x338>)
    167c:	4b11      	ldr	r3, [pc, #68]	; (16c4 <usart_init+0x33c>)
    167e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1680:	00a4      	lsls	r4, r4, #2
    1682:	4b11      	ldr	r3, [pc, #68]	; (16c8 <usart_init+0x340>)
    1684:	50e5      	str	r5, [r4, r3]
	return status_code;
    1686:	2000      	movs	r0, #0
    1688:	e691      	b.n	13ae <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    168a:	2310      	movs	r3, #16
    168c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    168e:	2300      	movs	r3, #0
    1690:	9307      	str	r3, [sp, #28]
    1692:	e6e8      	b.n	1466 <usart_init+0xde>
    1694:	000012bd 	.word	0x000012bd
    1698:	40000400 	.word	0x40000400
    169c:	00002151 	.word	0x00002151
    16a0:	000020c5 	.word	0x000020c5
    16a4:	000010f9 	.word	0x000010f9
    16a8:	41002000 	.word	0x41002000
    16ac:	0000216d 	.word	0x0000216d
    16b0:	0000103b 	.word	0x0000103b
    16b4:	00001065 	.word	0x00001065
    16b8:	00001145 	.word	0x00001145
    16bc:	00002249 	.word	0x00002249
    16c0:	000017dd 	.word	0x000017dd
    16c4:	00001975 	.word	0x00001975
    16c8:	20000100 	.word	0x20000100

000016cc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    16cc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    16ce:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    16d0:	2a00      	cmp	r2, #0
    16d2:	d101      	bne.n	16d8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    16d4:	0018      	movs	r0, r3
    16d6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    16d8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    16da:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    16dc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    16de:	2a00      	cmp	r2, #0
    16e0:	d1f8      	bne.n	16d4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    16e2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    16e4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    16e6:	2a00      	cmp	r2, #0
    16e8:	d1fc      	bne.n	16e4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    16ea:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    16ec:	2102      	movs	r1, #2
    16ee:	7e1a      	ldrb	r2, [r3, #24]
    16f0:	420a      	tst	r2, r1
    16f2:	d0fc      	beq.n	16ee <usart_write_wait+0x22>
	return STATUS_OK;
    16f4:	2300      	movs	r3, #0
    16f6:	e7ed      	b.n	16d4 <usart_write_wait+0x8>

000016f8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    16f8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    16fa:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    16fc:	2a00      	cmp	r2, #0
    16fe:	d101      	bne.n	1704 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1700:	0018      	movs	r0, r3
    1702:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1704:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1706:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1708:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    170a:	2a00      	cmp	r2, #0
    170c:	d1f8      	bne.n	1700 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    170e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1710:	7e10      	ldrb	r0, [r2, #24]
    1712:	0740      	lsls	r0, r0, #29
    1714:	d5f4      	bpl.n	1700 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1716:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1718:	2b00      	cmp	r3, #0
    171a:	d1fc      	bne.n	1716 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    171c:	8b53      	ldrh	r3, [r2, #26]
    171e:	b2db      	uxtb	r3, r3
	if (error_code) {
    1720:	0698      	lsls	r0, r3, #26
    1722:	d01d      	beq.n	1760 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1724:	0798      	lsls	r0, r3, #30
    1726:	d503      	bpl.n	1730 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1728:	2302      	movs	r3, #2
    172a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    172c:	3318      	adds	r3, #24
    172e:	e7e7      	b.n	1700 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1730:	0758      	lsls	r0, r3, #29
    1732:	d503      	bpl.n	173c <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1734:	2304      	movs	r3, #4
    1736:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1738:	331a      	adds	r3, #26
    173a:	e7e1      	b.n	1700 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    173c:	07d8      	lsls	r0, r3, #31
    173e:	d503      	bpl.n	1748 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1740:	2301      	movs	r3, #1
    1742:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1744:	3312      	adds	r3, #18
    1746:	e7db      	b.n	1700 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1748:	06d8      	lsls	r0, r3, #27
    174a:	d503      	bpl.n	1754 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    174c:	2310      	movs	r3, #16
    174e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1750:	3332      	adds	r3, #50	; 0x32
    1752:	e7d5      	b.n	1700 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1754:	069b      	lsls	r3, r3, #26
    1756:	d503      	bpl.n	1760 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1758:	2320      	movs	r3, #32
    175a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    175c:	3321      	adds	r3, #33	; 0x21
    175e:	e7cf      	b.n	1700 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1760:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1762:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1764:	2300      	movs	r3, #0
    1766:	e7cb      	b.n	1700 <usart_read_wait+0x8>

00001768 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    176a:	0006      	movs	r6, r0
    176c:	000c      	movs	r4, r1
    176e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1770:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1772:	4b0a      	ldr	r3, [pc, #40]	; (179c <_usart_write_buffer+0x34>)
    1774:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1776:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    1778:	b29b      	uxth	r3, r3
    177a:	2b00      	cmp	r3, #0
    177c:	d003      	beq.n	1786 <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    177e:	4b08      	ldr	r3, [pc, #32]	; (17a0 <_usart_write_buffer+0x38>)
    1780:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1782:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    1784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    1786:	85f5      	strh	r5, [r6, #46]	; 0x2e
    1788:	4b05      	ldr	r3, [pc, #20]	; (17a0 <_usart_write_buffer+0x38>)
    178a:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    178c:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    178e:	2205      	movs	r2, #5
    1790:	2333      	movs	r3, #51	; 0x33
    1792:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1794:	3b32      	subs	r3, #50	; 0x32
    1796:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    1798:	2000      	movs	r0, #0
    179a:	e7f3      	b.n	1784 <_usart_write_buffer+0x1c>
    179c:	00001a41 	.word	0x00001a41
    17a0:	00001a81 	.word	0x00001a81

000017a4 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    17a4:	1c93      	adds	r3, r2, #2
    17a6:	009b      	lsls	r3, r3, #2
    17a8:	18c3      	adds	r3, r0, r3
    17aa:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    17ac:	2130      	movs	r1, #48	; 0x30
    17ae:	2301      	movs	r3, #1
    17b0:	4093      	lsls	r3, r2
    17b2:	001a      	movs	r2, r3
    17b4:	5c43      	ldrb	r3, [r0, r1]
    17b6:	4313      	orrs	r3, r2
    17b8:	5443      	strb	r3, [r0, r1]
}
    17ba:	4770      	bx	lr

000017bc <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    17bc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    17be:	2317      	movs	r3, #23
	if (length == 0) {
    17c0:	2a00      	cmp	r2, #0
    17c2:	d101      	bne.n	17c8 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    17c4:	0018      	movs	r0, r3
    17c6:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    17c8:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    17ca:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    17cc:	2c00      	cmp	r4, #0
    17ce:	d0f9      	beq.n	17c4 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    17d0:	4b01      	ldr	r3, [pc, #4]	; (17d8 <usart_write_buffer_job+0x1c>)
    17d2:	4798      	blx	r3
    17d4:	0003      	movs	r3, r0
    17d6:	e7f5      	b.n	17c4 <usart_write_buffer_job+0x8>
    17d8:	00001769 	.word	0x00001769

000017dc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    17dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    17de:	0080      	lsls	r0, r0, #2
    17e0:	4b62      	ldr	r3, [pc, #392]	; (196c <_usart_interrupt_handler+0x190>)
    17e2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    17e4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    17e6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    17e8:	2b00      	cmp	r3, #0
    17ea:	d1fc      	bne.n	17e6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    17ec:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    17ee:	7da6      	ldrb	r6, [r4, #22]
    17f0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    17f2:	2330      	movs	r3, #48	; 0x30
    17f4:	5ceb      	ldrb	r3, [r5, r3]
    17f6:	2231      	movs	r2, #49	; 0x31
    17f8:	5caf      	ldrb	r7, [r5, r2]
    17fa:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    17fc:	07f3      	lsls	r3, r6, #31
    17fe:	d522      	bpl.n	1846 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1800:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1802:	b29b      	uxth	r3, r3
    1804:	2b00      	cmp	r3, #0
    1806:	d01c      	beq.n	1842 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1808:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    180a:	7813      	ldrb	r3, [r2, #0]
    180c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    180e:	1c51      	adds	r1, r2, #1
    1810:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1812:	7969      	ldrb	r1, [r5, #5]
    1814:	2901      	cmp	r1, #1
    1816:	d00e      	beq.n	1836 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1818:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    181a:	05db      	lsls	r3, r3, #23
    181c:	0ddb      	lsrs	r3, r3, #23
    181e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1820:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1822:	3b01      	subs	r3, #1
    1824:	b29b      	uxth	r3, r3
    1826:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1828:	2b00      	cmp	r3, #0
    182a:	d10c      	bne.n	1846 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    182c:	3301      	adds	r3, #1
    182e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1830:	3301      	adds	r3, #1
    1832:	75a3      	strb	r3, [r4, #22]
    1834:	e007      	b.n	1846 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1836:	7851      	ldrb	r1, [r2, #1]
    1838:	0209      	lsls	r1, r1, #8
    183a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    183c:	3202      	adds	r2, #2
    183e:	62aa      	str	r2, [r5, #40]	; 0x28
    1840:	e7eb      	b.n	181a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1842:	2301      	movs	r3, #1
    1844:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1846:	07b3      	lsls	r3, r6, #30
    1848:	d506      	bpl.n	1858 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    184a:	2302      	movs	r3, #2
    184c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    184e:	2200      	movs	r2, #0
    1850:	3331      	adds	r3, #49	; 0x31
    1852:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1854:	07fb      	lsls	r3, r7, #31
    1856:	d41a      	bmi.n	188e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1858:	0773      	lsls	r3, r6, #29
    185a:	d565      	bpl.n	1928 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    185c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    185e:	b29b      	uxth	r3, r3
    1860:	2b00      	cmp	r3, #0
    1862:	d05f      	beq.n	1924 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1864:	8b63      	ldrh	r3, [r4, #26]
    1866:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1868:	071a      	lsls	r2, r3, #28
    186a:	d414      	bmi.n	1896 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    186c:	223f      	movs	r2, #63	; 0x3f
    186e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1870:	2b00      	cmp	r3, #0
    1872:	d034      	beq.n	18de <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1874:	079a      	lsls	r2, r3, #30
    1876:	d511      	bpl.n	189c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1878:	221a      	movs	r2, #26
    187a:	2332      	movs	r3, #50	; 0x32
    187c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    187e:	3b30      	subs	r3, #48	; 0x30
    1880:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1882:	077b      	lsls	r3, r7, #29
    1884:	d550      	bpl.n	1928 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1886:	0028      	movs	r0, r5
    1888:	696b      	ldr	r3, [r5, #20]
    188a:	4798      	blx	r3
    188c:	e04c      	b.n	1928 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    188e:	0028      	movs	r0, r5
    1890:	68eb      	ldr	r3, [r5, #12]
    1892:	4798      	blx	r3
    1894:	e7e0      	b.n	1858 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1896:	2237      	movs	r2, #55	; 0x37
    1898:	4013      	ands	r3, r2
    189a:	e7e9      	b.n	1870 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    189c:	075a      	lsls	r2, r3, #29
    189e:	d505      	bpl.n	18ac <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    18a0:	221e      	movs	r2, #30
    18a2:	2332      	movs	r3, #50	; 0x32
    18a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    18a6:	3b2e      	subs	r3, #46	; 0x2e
    18a8:	8363      	strh	r3, [r4, #26]
    18aa:	e7ea      	b.n	1882 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    18ac:	07da      	lsls	r2, r3, #31
    18ae:	d505      	bpl.n	18bc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    18b0:	2213      	movs	r2, #19
    18b2:	2332      	movs	r3, #50	; 0x32
    18b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    18b6:	3b31      	subs	r3, #49	; 0x31
    18b8:	8363      	strh	r3, [r4, #26]
    18ba:	e7e2      	b.n	1882 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    18bc:	06da      	lsls	r2, r3, #27
    18be:	d505      	bpl.n	18cc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    18c0:	2242      	movs	r2, #66	; 0x42
    18c2:	2332      	movs	r3, #50	; 0x32
    18c4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    18c6:	3b22      	subs	r3, #34	; 0x22
    18c8:	8363      	strh	r3, [r4, #26]
    18ca:	e7da      	b.n	1882 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    18cc:	2220      	movs	r2, #32
    18ce:	421a      	tst	r2, r3
    18d0:	d0d7      	beq.n	1882 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    18d2:	3221      	adds	r2, #33	; 0x21
    18d4:	2332      	movs	r3, #50	; 0x32
    18d6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    18d8:	3b12      	subs	r3, #18
    18da:	8363      	strh	r3, [r4, #26]
    18dc:	e7d1      	b.n	1882 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    18de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    18e0:	05db      	lsls	r3, r3, #23
    18e2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    18e4:	b2da      	uxtb	r2, r3
    18e6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    18e8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    18ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    18ec:	1c51      	adds	r1, r2, #1
    18ee:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18f0:	7969      	ldrb	r1, [r5, #5]
    18f2:	2901      	cmp	r1, #1
    18f4:	d010      	beq.n	1918 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    18f6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    18f8:	3b01      	subs	r3, #1
    18fa:	b29b      	uxth	r3, r3
    18fc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    18fe:	2b00      	cmp	r3, #0
    1900:	d112      	bne.n	1928 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1902:	3304      	adds	r3, #4
    1904:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1906:	2200      	movs	r2, #0
    1908:	332e      	adds	r3, #46	; 0x2e
    190a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    190c:	07bb      	lsls	r3, r7, #30
    190e:	d50b      	bpl.n	1928 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1910:	0028      	movs	r0, r5
    1912:	692b      	ldr	r3, [r5, #16]
    1914:	4798      	blx	r3
    1916:	e007      	b.n	1928 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1918:	0a1b      	lsrs	r3, r3, #8
    191a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    191c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    191e:	3301      	adds	r3, #1
    1920:	626b      	str	r3, [r5, #36]	; 0x24
    1922:	e7e8      	b.n	18f6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1924:	2304      	movs	r3, #4
    1926:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1928:	06f3      	lsls	r3, r6, #27
    192a:	d504      	bpl.n	1936 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    192c:	2310      	movs	r3, #16
    192e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1930:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1932:	06fb      	lsls	r3, r7, #27
    1934:	d40e      	bmi.n	1954 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1936:	06b3      	lsls	r3, r6, #26
    1938:	d504      	bpl.n	1944 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    193a:	2320      	movs	r3, #32
    193c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    193e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1940:	073b      	lsls	r3, r7, #28
    1942:	d40b      	bmi.n	195c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1944:	0733      	lsls	r3, r6, #28
    1946:	d504      	bpl.n	1952 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1948:	2308      	movs	r3, #8
    194a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    194c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    194e:	06bb      	lsls	r3, r7, #26
    1950:	d408      	bmi.n	1964 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1954:	0028      	movs	r0, r5
    1956:	69eb      	ldr	r3, [r5, #28]
    1958:	4798      	blx	r3
    195a:	e7ec      	b.n	1936 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    195c:	0028      	movs	r0, r5
    195e:	69ab      	ldr	r3, [r5, #24]
    1960:	4798      	blx	r3
    1962:	e7ef      	b.n	1944 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1964:	6a2b      	ldr	r3, [r5, #32]
    1966:	0028      	movs	r0, r5
    1968:	4798      	blx	r3
}
    196a:	e7f2      	b.n	1952 <_usart_interrupt_handler+0x176>
    196c:	20000100 	.word	0x20000100

00001970 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1970:	4770      	bx	lr
	...

00001974 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1974:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1976:	4b0a      	ldr	r3, [pc, #40]	; (19a0 <_sercom_set_handler+0x2c>)
    1978:	781b      	ldrb	r3, [r3, #0]
    197a:	2b00      	cmp	r3, #0
    197c:	d10c      	bne.n	1998 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    197e:	4f09      	ldr	r7, [pc, #36]	; (19a4 <_sercom_set_handler+0x30>)
    1980:	4e09      	ldr	r6, [pc, #36]	; (19a8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1982:	4d0a      	ldr	r5, [pc, #40]	; (19ac <_sercom_set_handler+0x38>)
    1984:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1986:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1988:	195a      	adds	r2, r3, r5
    198a:	6014      	str	r4, [r2, #0]
    198c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    198e:	2b18      	cmp	r3, #24
    1990:	d1f9      	bne.n	1986 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1992:	2201      	movs	r2, #1
    1994:	4b02      	ldr	r3, [pc, #8]	; (19a0 <_sercom_set_handler+0x2c>)
    1996:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1998:	0080      	lsls	r0, r0, #2
    199a:	4b02      	ldr	r3, [pc, #8]	; (19a4 <_sercom_set_handler+0x30>)
    199c:	50c1      	str	r1, [r0, r3]
}
    199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19a0:	200000a6 	.word	0x200000a6
    19a4:	200000a8 	.word	0x200000a8
    19a8:	00001971 	.word	0x00001971
    19ac:	20000100 	.word	0x20000100

000019b0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    19b0:	b500      	push	{lr}
    19b2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    19b4:	2309      	movs	r3, #9
    19b6:	466a      	mov	r2, sp
    19b8:	7013      	strb	r3, [r2, #0]
    19ba:	3301      	adds	r3, #1
    19bc:	7053      	strb	r3, [r2, #1]
    19be:	3301      	adds	r3, #1
    19c0:	7093      	strb	r3, [r2, #2]
    19c2:	3301      	adds	r3, #1
    19c4:	70d3      	strb	r3, [r2, #3]
    19c6:	3301      	adds	r3, #1
    19c8:	7113      	strb	r3, [r2, #4]
    19ca:	3301      	adds	r3, #1
    19cc:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    19ce:	4b03      	ldr	r3, [pc, #12]	; (19dc <_sercom_get_interrupt_vector+0x2c>)
    19d0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    19d2:	466b      	mov	r3, sp
    19d4:	5618      	ldrsb	r0, [r3, r0]
}
    19d6:	b003      	add	sp, #12
    19d8:	bd00      	pop	{pc}
    19da:	46c0      	nop			; (mov r8, r8)
    19dc:	000012bd 	.word	0x000012bd

000019e0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    19e0:	b510      	push	{r4, lr}
    19e2:	4b02      	ldr	r3, [pc, #8]	; (19ec <SERCOM0_Handler+0xc>)
    19e4:	681b      	ldr	r3, [r3, #0]
    19e6:	2000      	movs	r0, #0
    19e8:	4798      	blx	r3
    19ea:	bd10      	pop	{r4, pc}
    19ec:	200000a8 	.word	0x200000a8

000019f0 <SERCOM1_Handler>:
    19f0:	b510      	push	{r4, lr}
    19f2:	4b02      	ldr	r3, [pc, #8]	; (19fc <SERCOM1_Handler+0xc>)
    19f4:	685b      	ldr	r3, [r3, #4]
    19f6:	2001      	movs	r0, #1
    19f8:	4798      	blx	r3
    19fa:	bd10      	pop	{r4, pc}
    19fc:	200000a8 	.word	0x200000a8

00001a00 <SERCOM2_Handler>:
    1a00:	b510      	push	{r4, lr}
    1a02:	4b02      	ldr	r3, [pc, #8]	; (1a0c <SERCOM2_Handler+0xc>)
    1a04:	689b      	ldr	r3, [r3, #8]
    1a06:	2002      	movs	r0, #2
    1a08:	4798      	blx	r3
    1a0a:	bd10      	pop	{r4, pc}
    1a0c:	200000a8 	.word	0x200000a8

00001a10 <SERCOM3_Handler>:
    1a10:	b510      	push	{r4, lr}
    1a12:	4b02      	ldr	r3, [pc, #8]	; (1a1c <SERCOM3_Handler+0xc>)
    1a14:	68db      	ldr	r3, [r3, #12]
    1a16:	2003      	movs	r0, #3
    1a18:	4798      	blx	r3
    1a1a:	bd10      	pop	{r4, pc}
    1a1c:	200000a8 	.word	0x200000a8

00001a20 <SERCOM4_Handler>:
    1a20:	b510      	push	{r4, lr}
    1a22:	4b02      	ldr	r3, [pc, #8]	; (1a2c <SERCOM4_Handler+0xc>)
    1a24:	691b      	ldr	r3, [r3, #16]
    1a26:	2004      	movs	r0, #4
    1a28:	4798      	blx	r3
    1a2a:	bd10      	pop	{r4, pc}
    1a2c:	200000a8 	.word	0x200000a8

00001a30 <SERCOM5_Handler>:
    1a30:	b510      	push	{r4, lr}
    1a32:	4b02      	ldr	r3, [pc, #8]	; (1a3c <SERCOM5_Handler+0xc>)
    1a34:	695b      	ldr	r3, [r3, #20]
    1a36:	2005      	movs	r0, #5
    1a38:	4798      	blx	r3
    1a3a:	bd10      	pop	{r4, pc}
    1a3c:	200000a8 	.word	0x200000a8

00001a40 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1a40:	4b0c      	ldr	r3, [pc, #48]	; (1a74 <cpu_irq_enter_critical+0x34>)
    1a42:	681b      	ldr	r3, [r3, #0]
    1a44:	2b00      	cmp	r3, #0
    1a46:	d106      	bne.n	1a56 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a48:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d007      	beq.n	1a60 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1a50:	2200      	movs	r2, #0
    1a52:	4b09      	ldr	r3, [pc, #36]	; (1a78 <cpu_irq_enter_critical+0x38>)
    1a54:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1a56:	4a07      	ldr	r2, [pc, #28]	; (1a74 <cpu_irq_enter_critical+0x34>)
    1a58:	6813      	ldr	r3, [r2, #0]
    1a5a:	3301      	adds	r3, #1
    1a5c:	6013      	str	r3, [r2, #0]
}
    1a5e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1a60:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1a62:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1a66:	2200      	movs	r2, #0
    1a68:	4b04      	ldr	r3, [pc, #16]	; (1a7c <cpu_irq_enter_critical+0x3c>)
    1a6a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1a6c:	3201      	adds	r2, #1
    1a6e:	4b02      	ldr	r3, [pc, #8]	; (1a78 <cpu_irq_enter_critical+0x38>)
    1a70:	701a      	strb	r2, [r3, #0]
    1a72:	e7f0      	b.n	1a56 <cpu_irq_enter_critical+0x16>
    1a74:	200000c0 	.word	0x200000c0
    1a78:	200000c4 	.word	0x200000c4
    1a7c:	20000000 	.word	0x20000000

00001a80 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1a80:	4b08      	ldr	r3, [pc, #32]	; (1aa4 <cpu_irq_leave_critical+0x24>)
    1a82:	681a      	ldr	r2, [r3, #0]
    1a84:	3a01      	subs	r2, #1
    1a86:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1a88:	681b      	ldr	r3, [r3, #0]
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d109      	bne.n	1aa2 <cpu_irq_leave_critical+0x22>
    1a8e:	4b06      	ldr	r3, [pc, #24]	; (1aa8 <cpu_irq_leave_critical+0x28>)
    1a90:	781b      	ldrb	r3, [r3, #0]
    1a92:	2b00      	cmp	r3, #0
    1a94:	d005      	beq.n	1aa2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1a96:	2201      	movs	r2, #1
    1a98:	4b04      	ldr	r3, [pc, #16]	; (1aac <cpu_irq_leave_critical+0x2c>)
    1a9a:	701a      	strb	r2, [r3, #0]
    1a9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1aa0:	b662      	cpsie	i
	}
}
    1aa2:	4770      	bx	lr
    1aa4:	200000c0 	.word	0x200000c0
    1aa8:	200000c4 	.word	0x200000c4
    1aac:	20000000 	.word	0x20000000

00001ab0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ab2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1ab4:	ac01      	add	r4, sp, #4
    1ab6:	2501      	movs	r5, #1
    1ab8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1aba:	2700      	movs	r7, #0
    1abc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1abe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1ac0:	0021      	movs	r1, r4
    1ac2:	2017      	movs	r0, #23
    1ac4:	4e06      	ldr	r6, [pc, #24]	; (1ae0 <system_board_init+0x30>)
    1ac6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1ac8:	2280      	movs	r2, #128	; 0x80
    1aca:	0412      	lsls	r2, r2, #16
    1acc:	4b05      	ldr	r3, [pc, #20]	; (1ae4 <system_board_init+0x34>)
    1ace:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1ad0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1ad2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1ad4:	0021      	movs	r1, r4
    1ad6:	2037      	movs	r0, #55	; 0x37
    1ad8:	47b0      	blx	r6
}
    1ada:	b003      	add	sp, #12
    1adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	00001ae9 	.word	0x00001ae9
    1ae4:	41004400 	.word	0x41004400

00001ae8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1ae8:	b500      	push	{lr}
    1aea:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1aec:	ab01      	add	r3, sp, #4
    1aee:	2280      	movs	r2, #128	; 0x80
    1af0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1af2:	780a      	ldrb	r2, [r1, #0]
    1af4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1af6:	784a      	ldrb	r2, [r1, #1]
    1af8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1afa:	788a      	ldrb	r2, [r1, #2]
    1afc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1afe:	0019      	movs	r1, r3
    1b00:	4b01      	ldr	r3, [pc, #4]	; (1b08 <port_pin_set_config+0x20>)
    1b02:	4798      	blx	r3
}
    1b04:	b003      	add	sp, #12
    1b06:	bd00      	pop	{pc}
    1b08:	00002249 	.word	0x00002249

00001b0c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1b0c:	b510      	push	{r4, lr}
	switch (clock_source) {
    1b0e:	2808      	cmp	r0, #8
    1b10:	d803      	bhi.n	1b1a <system_clock_source_get_hz+0xe>
    1b12:	0080      	lsls	r0, r0, #2
    1b14:	4b1b      	ldr	r3, [pc, #108]	; (1b84 <system_clock_source_get_hz+0x78>)
    1b16:	581b      	ldr	r3, [r3, r0]
    1b18:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1b1a:	2000      	movs	r0, #0
    1b1c:	e030      	b.n	1b80 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1b1e:	4b1a      	ldr	r3, [pc, #104]	; (1b88 <system_clock_source_get_hz+0x7c>)
    1b20:	6918      	ldr	r0, [r3, #16]
    1b22:	e02d      	b.n	1b80 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1b24:	4b19      	ldr	r3, [pc, #100]	; (1b8c <system_clock_source_get_hz+0x80>)
    1b26:	6a1b      	ldr	r3, [r3, #32]
    1b28:	059b      	lsls	r3, r3, #22
    1b2a:	0f9b      	lsrs	r3, r3, #30
    1b2c:	4818      	ldr	r0, [pc, #96]	; (1b90 <system_clock_source_get_hz+0x84>)
    1b2e:	40d8      	lsrs	r0, r3
    1b30:	e026      	b.n	1b80 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1b32:	4b15      	ldr	r3, [pc, #84]	; (1b88 <system_clock_source_get_hz+0x7c>)
    1b34:	6958      	ldr	r0, [r3, #20]
    1b36:	e023      	b.n	1b80 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1b38:	4b13      	ldr	r3, [pc, #76]	; (1b88 <system_clock_source_get_hz+0x7c>)
    1b3a:	681b      	ldr	r3, [r3, #0]
			return 0;
    1b3c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1b3e:	079b      	lsls	r3, r3, #30
    1b40:	d51e      	bpl.n	1b80 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b42:	4912      	ldr	r1, [pc, #72]	; (1b8c <system_clock_source_get_hz+0x80>)
    1b44:	2210      	movs	r2, #16
    1b46:	68cb      	ldr	r3, [r1, #12]
    1b48:	421a      	tst	r2, r3
    1b4a:	d0fc      	beq.n	1b46 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1b4c:	4b0e      	ldr	r3, [pc, #56]	; (1b88 <system_clock_source_get_hz+0x7c>)
    1b4e:	681b      	ldr	r3, [r3, #0]
    1b50:	075b      	lsls	r3, r3, #29
    1b52:	d401      	bmi.n	1b58 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1b54:	480f      	ldr	r0, [pc, #60]	; (1b94 <system_clock_source_get_hz+0x88>)
    1b56:	e013      	b.n	1b80 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1b58:	2000      	movs	r0, #0
    1b5a:	4b0f      	ldr	r3, [pc, #60]	; (1b98 <system_clock_source_get_hz+0x8c>)
    1b5c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1b5e:	4b0a      	ldr	r3, [pc, #40]	; (1b88 <system_clock_source_get_hz+0x7c>)
    1b60:	689b      	ldr	r3, [r3, #8]
    1b62:	041b      	lsls	r3, r3, #16
    1b64:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1b66:	4358      	muls	r0, r3
    1b68:	e00a      	b.n	1b80 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1b6a:	2350      	movs	r3, #80	; 0x50
    1b6c:	4a07      	ldr	r2, [pc, #28]	; (1b8c <system_clock_source_get_hz+0x80>)
    1b6e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1b70:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1b72:	075b      	lsls	r3, r3, #29
    1b74:	d504      	bpl.n	1b80 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1b76:	4b04      	ldr	r3, [pc, #16]	; (1b88 <system_clock_source_get_hz+0x7c>)
    1b78:	68d8      	ldr	r0, [r3, #12]
    1b7a:	e001      	b.n	1b80 <system_clock_source_get_hz+0x74>
		return 32768UL;
    1b7c:	2080      	movs	r0, #128	; 0x80
    1b7e:	0200      	lsls	r0, r0, #8
	}
}
    1b80:	bd10      	pop	{r4, pc}
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	00005524 	.word	0x00005524
    1b88:	200000c8 	.word	0x200000c8
    1b8c:	40000800 	.word	0x40000800
    1b90:	007a1200 	.word	0x007a1200
    1b94:	02dc6c00 	.word	0x02dc6c00
    1b98:	0000216d 	.word	0x0000216d

00001b9c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1b9c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1b9e:	490c      	ldr	r1, [pc, #48]	; (1bd0 <system_clock_source_osc8m_set_config+0x34>)
    1ba0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1ba2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1ba4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1ba6:	7840      	ldrb	r0, [r0, #1]
    1ba8:	2201      	movs	r2, #1
    1baa:	4010      	ands	r0, r2
    1bac:	0180      	lsls	r0, r0, #6
    1bae:	2640      	movs	r6, #64	; 0x40
    1bb0:	43b3      	bics	r3, r6
    1bb2:	4303      	orrs	r3, r0
    1bb4:	402a      	ands	r2, r5
    1bb6:	01d2      	lsls	r2, r2, #7
    1bb8:	2080      	movs	r0, #128	; 0x80
    1bba:	4383      	bics	r3, r0
    1bbc:	4313      	orrs	r3, r2
    1bbe:	2203      	movs	r2, #3
    1bc0:	4022      	ands	r2, r4
    1bc2:	0212      	lsls	r2, r2, #8
    1bc4:	4803      	ldr	r0, [pc, #12]	; (1bd4 <system_clock_source_osc8m_set_config+0x38>)
    1bc6:	4003      	ands	r3, r0
    1bc8:	4313      	orrs	r3, r2
    1bca:	620b      	str	r3, [r1, #32]
}
    1bcc:	bd70      	pop	{r4, r5, r6, pc}
    1bce:	46c0      	nop			; (mov r8, r8)
    1bd0:	40000800 	.word	0x40000800
    1bd4:	fffffcff 	.word	0xfffffcff

00001bd8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bda:	46de      	mov	lr, fp
    1bdc:	4657      	mov	r7, sl
    1bde:	464e      	mov	r6, r9
    1be0:	4645      	mov	r5, r8
    1be2:	b5e0      	push	{r5, r6, r7, lr}
    1be4:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1be6:	4b26      	ldr	r3, [pc, #152]	; (1c80 <system_clock_source_xosc32k_set_config+0xa8>)
    1be8:	469b      	mov	fp, r3
    1bea:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1bec:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1bee:	7800      	ldrb	r0, [r0, #0]
    1bf0:	4242      	negs	r2, r0
    1bf2:	4142      	adcs	r2, r0
    1bf4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1bf6:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1bf8:	78ca      	ldrb	r2, [r1, #3]
    1bfa:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1bfc:	790a      	ldrb	r2, [r1, #4]
    1bfe:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1c00:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1c02:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1c04:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1c06:	688a      	ldr	r2, [r1, #8]
    1c08:	491e      	ldr	r1, [pc, #120]	; (1c84 <system_clock_source_xosc32k_set_config+0xac>)
    1c0a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1c0c:	2101      	movs	r1, #1
    1c0e:	464a      	mov	r2, r9
    1c10:	0092      	lsls	r2, r2, #2
    1c12:	4691      	mov	r9, r2
    1c14:	2204      	movs	r2, #4
    1c16:	4393      	bics	r3, r2
    1c18:	464a      	mov	r2, r9
    1c1a:	4313      	orrs	r3, r2
    1c1c:	4642      	mov	r2, r8
    1c1e:	400a      	ands	r2, r1
    1c20:	00d2      	lsls	r2, r2, #3
    1c22:	4690      	mov	r8, r2
    1c24:	2208      	movs	r2, #8
    1c26:	4393      	bics	r3, r2
    1c28:	4642      	mov	r2, r8
    1c2a:	4313      	orrs	r3, r2
    1c2c:	4662      	mov	r2, ip
    1c2e:	400a      	ands	r2, r1
    1c30:	0112      	lsls	r2, r2, #4
    1c32:	4694      	mov	ip, r2
    1c34:	2210      	movs	r2, #16
    1c36:	4393      	bics	r3, r2
    1c38:	4662      	mov	r2, ip
    1c3a:	4313      	orrs	r3, r2
    1c3c:	4008      	ands	r0, r1
    1c3e:	0140      	lsls	r0, r0, #5
    1c40:	2220      	movs	r2, #32
    1c42:	4393      	bics	r3, r2
    1c44:	4303      	orrs	r3, r0
    1c46:	400f      	ands	r7, r1
    1c48:	01bf      	lsls	r7, r7, #6
    1c4a:	2040      	movs	r0, #64	; 0x40
    1c4c:	4383      	bics	r3, r0
    1c4e:	433b      	orrs	r3, r7
    1c50:	400e      	ands	r6, r1
    1c52:	01f6      	lsls	r6, r6, #7
    1c54:	3040      	adds	r0, #64	; 0x40
    1c56:	4383      	bics	r3, r0
    1c58:	4333      	orrs	r3, r6
    1c5a:	3879      	subs	r0, #121	; 0x79
    1c5c:	4005      	ands	r5, r0
    1c5e:	022d      	lsls	r5, r5, #8
    1c60:	4809      	ldr	r0, [pc, #36]	; (1c88 <system_clock_source_xosc32k_set_config+0xb0>)
    1c62:	4003      	ands	r3, r0
    1c64:	432b      	orrs	r3, r5
    1c66:	4021      	ands	r1, r4
    1c68:	0309      	lsls	r1, r1, #12
    1c6a:	4808      	ldr	r0, [pc, #32]	; (1c8c <system_clock_source_xosc32k_set_config+0xb4>)
    1c6c:	4003      	ands	r3, r0
    1c6e:	430b      	orrs	r3, r1
    1c70:	465a      	mov	r2, fp
    1c72:	8293      	strh	r3, [r2, #20]
}
    1c74:	bc3c      	pop	{r2, r3, r4, r5}
    1c76:	4690      	mov	r8, r2
    1c78:	4699      	mov	r9, r3
    1c7a:	46a2      	mov	sl, r4
    1c7c:	46ab      	mov	fp, r5
    1c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c80:	40000800 	.word	0x40000800
    1c84:	200000c8 	.word	0x200000c8
    1c88:	fffff8ff 	.word	0xfffff8ff
    1c8c:	ffffefff 	.word	0xffffefff

00001c90 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1c90:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c92:	7a03      	ldrb	r3, [r0, #8]
    1c94:	069b      	lsls	r3, r3, #26
    1c96:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1c98:	8942      	ldrh	r2, [r0, #10]
    1c9a:	0592      	lsls	r2, r2, #22
    1c9c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c9e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1ca0:	4918      	ldr	r1, [pc, #96]	; (1d04 <system_clock_source_dfll_set_config+0x74>)
    1ca2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1ca4:	7983      	ldrb	r3, [r0, #6]
    1ca6:	79c2      	ldrb	r2, [r0, #7]
    1ca8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1caa:	8842      	ldrh	r2, [r0, #2]
    1cac:	8884      	ldrh	r4, [r0, #4]
    1cae:	4322      	orrs	r2, r4
    1cb0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1cb2:	7842      	ldrb	r2, [r0, #1]
    1cb4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1cb6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1cb8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1cba:	7803      	ldrb	r3, [r0, #0]
    1cbc:	2b04      	cmp	r3, #4
    1cbe:	d011      	beq.n	1ce4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1cc0:	2b20      	cmp	r3, #32
    1cc2:	d10e      	bne.n	1ce2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1cc4:	7b03      	ldrb	r3, [r0, #12]
    1cc6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1cc8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1cca:	4313      	orrs	r3, r2
    1ccc:	89c2      	ldrh	r2, [r0, #14]
    1cce:	0412      	lsls	r2, r2, #16
    1cd0:	490d      	ldr	r1, [pc, #52]	; (1d08 <system_clock_source_dfll_set_config+0x78>)
    1cd2:	400a      	ands	r2, r1
    1cd4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1cd6:	4a0b      	ldr	r2, [pc, #44]	; (1d04 <system_clock_source_dfll_set_config+0x74>)
    1cd8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1cda:	6811      	ldr	r1, [r2, #0]
    1cdc:	4b0b      	ldr	r3, [pc, #44]	; (1d0c <system_clock_source_dfll_set_config+0x7c>)
    1cde:	430b      	orrs	r3, r1
    1ce0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1ce2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1ce4:	7b03      	ldrb	r3, [r0, #12]
    1ce6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1ce8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1cea:	4313      	orrs	r3, r2
    1cec:	89c2      	ldrh	r2, [r0, #14]
    1cee:	0412      	lsls	r2, r2, #16
    1cf0:	4905      	ldr	r1, [pc, #20]	; (1d08 <system_clock_source_dfll_set_config+0x78>)
    1cf2:	400a      	ands	r2, r1
    1cf4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1cf6:	4a03      	ldr	r2, [pc, #12]	; (1d04 <system_clock_source_dfll_set_config+0x74>)
    1cf8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1cfa:	6813      	ldr	r3, [r2, #0]
    1cfc:	2104      	movs	r1, #4
    1cfe:	430b      	orrs	r3, r1
    1d00:	6013      	str	r3, [r2, #0]
    1d02:	e7ee      	b.n	1ce2 <system_clock_source_dfll_set_config+0x52>
    1d04:	200000c8 	.word	0x200000c8
    1d08:	03ff0000 	.word	0x03ff0000
    1d0c:	00000424 	.word	0x00000424

00001d10 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1d10:	2808      	cmp	r0, #8
    1d12:	d803      	bhi.n	1d1c <system_clock_source_enable+0xc>
    1d14:	0080      	lsls	r0, r0, #2
    1d16:	4b25      	ldr	r3, [pc, #148]	; (1dac <system_clock_source_enable+0x9c>)
    1d18:	581b      	ldr	r3, [r3, r0]
    1d1a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d1c:	2017      	movs	r0, #23
    1d1e:	e044      	b.n	1daa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1d20:	4a23      	ldr	r2, [pc, #140]	; (1db0 <system_clock_source_enable+0xa0>)
    1d22:	6a13      	ldr	r3, [r2, #32]
    1d24:	2102      	movs	r1, #2
    1d26:	430b      	orrs	r3, r1
    1d28:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1d2a:	2000      	movs	r0, #0
    1d2c:	e03d      	b.n	1daa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1d2e:	4a20      	ldr	r2, [pc, #128]	; (1db0 <system_clock_source_enable+0xa0>)
    1d30:	6993      	ldr	r3, [r2, #24]
    1d32:	2102      	movs	r1, #2
    1d34:	430b      	orrs	r3, r1
    1d36:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1d38:	2000      	movs	r0, #0
		break;
    1d3a:	e036      	b.n	1daa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1d3c:	4a1c      	ldr	r2, [pc, #112]	; (1db0 <system_clock_source_enable+0xa0>)
    1d3e:	8a13      	ldrh	r3, [r2, #16]
    1d40:	2102      	movs	r1, #2
    1d42:	430b      	orrs	r3, r1
    1d44:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1d46:	2000      	movs	r0, #0
		break;
    1d48:	e02f      	b.n	1daa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1d4a:	4a19      	ldr	r2, [pc, #100]	; (1db0 <system_clock_source_enable+0xa0>)
    1d4c:	8a93      	ldrh	r3, [r2, #20]
    1d4e:	2102      	movs	r1, #2
    1d50:	430b      	orrs	r3, r1
    1d52:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1d54:	2000      	movs	r0, #0
		break;
    1d56:	e028      	b.n	1daa <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1d58:	4916      	ldr	r1, [pc, #88]	; (1db4 <system_clock_source_enable+0xa4>)
    1d5a:	680b      	ldr	r3, [r1, #0]
    1d5c:	2202      	movs	r2, #2
    1d5e:	4313      	orrs	r3, r2
    1d60:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1d62:	4b13      	ldr	r3, [pc, #76]	; (1db0 <system_clock_source_enable+0xa0>)
    1d64:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d66:	0019      	movs	r1, r3
    1d68:	320e      	adds	r2, #14
    1d6a:	68cb      	ldr	r3, [r1, #12]
    1d6c:	421a      	tst	r2, r3
    1d6e:	d0fc      	beq.n	1d6a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1d70:	4a10      	ldr	r2, [pc, #64]	; (1db4 <system_clock_source_enable+0xa4>)
    1d72:	6891      	ldr	r1, [r2, #8]
    1d74:	4b0e      	ldr	r3, [pc, #56]	; (1db0 <system_clock_source_enable+0xa0>)
    1d76:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1d78:	6852      	ldr	r2, [r2, #4]
    1d7a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1d7c:	2200      	movs	r2, #0
    1d7e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d80:	0019      	movs	r1, r3
    1d82:	3210      	adds	r2, #16
    1d84:	68cb      	ldr	r3, [r1, #12]
    1d86:	421a      	tst	r2, r3
    1d88:	d0fc      	beq.n	1d84 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d8a:	4b0a      	ldr	r3, [pc, #40]	; (1db4 <system_clock_source_enable+0xa4>)
    1d8c:	681b      	ldr	r3, [r3, #0]
    1d8e:	b29b      	uxth	r3, r3
    1d90:	4a07      	ldr	r2, [pc, #28]	; (1db0 <system_clock_source_enable+0xa0>)
    1d92:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1d94:	2000      	movs	r0, #0
    1d96:	e008      	b.n	1daa <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1d98:	4905      	ldr	r1, [pc, #20]	; (1db0 <system_clock_source_enable+0xa0>)
    1d9a:	2244      	movs	r2, #68	; 0x44
    1d9c:	5c8b      	ldrb	r3, [r1, r2]
    1d9e:	2002      	movs	r0, #2
    1da0:	4303      	orrs	r3, r0
    1da2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1da4:	2000      	movs	r0, #0
		break;
    1da6:	e000      	b.n	1daa <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1da8:	2000      	movs	r0, #0
}
    1daa:	4770      	bx	lr
    1dac:	00005548 	.word	0x00005548
    1db0:	40000800 	.word	0x40000800
    1db4:	200000c8 	.word	0x200000c8

00001db8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dba:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1dbc:	22c2      	movs	r2, #194	; 0xc2
    1dbe:	00d2      	lsls	r2, r2, #3
    1dc0:	4b47      	ldr	r3, [pc, #284]	; (1ee0 <system_clock_init+0x128>)
    1dc2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1dc4:	4a47      	ldr	r2, [pc, #284]	; (1ee4 <system_clock_init+0x12c>)
    1dc6:	6853      	ldr	r3, [r2, #4]
    1dc8:	211e      	movs	r1, #30
    1dca:	438b      	bics	r3, r1
    1dcc:	391a      	subs	r1, #26
    1dce:	430b      	orrs	r3, r1
    1dd0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1dd2:	2202      	movs	r2, #2
    1dd4:	ab01      	add	r3, sp, #4
    1dd6:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1dd8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1dda:	4d43      	ldr	r5, [pc, #268]	; (1ee8 <system_clock_init+0x130>)
    1ddc:	b2e0      	uxtb	r0, r4
    1dde:	a901      	add	r1, sp, #4
    1de0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1de2:	3401      	adds	r4, #1
    1de4:	2c25      	cmp	r4, #37	; 0x25
    1de6:	d1f9      	bne.n	1ddc <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1de8:	a80a      	add	r0, sp, #40	; 0x28
    1dea:	2300      	movs	r3, #0
    1dec:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1dee:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1df0:	2280      	movs	r2, #128	; 0x80
    1df2:	0212      	lsls	r2, r2, #8
    1df4:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1df6:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1df8:	2201      	movs	r2, #1
    1dfa:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1dfc:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1dfe:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1e00:	3202      	adds	r2, #2
    1e02:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1e04:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1e06:	4b39      	ldr	r3, [pc, #228]	; (1eec <system_clock_init+0x134>)
    1e08:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1e0a:	2005      	movs	r0, #5
    1e0c:	4b38      	ldr	r3, [pc, #224]	; (1ef0 <system_clock_init+0x138>)
    1e0e:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1e10:	4933      	ldr	r1, [pc, #204]	; (1ee0 <system_clock_init+0x128>)
    1e12:	2202      	movs	r2, #2
    1e14:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1e16:	421a      	tst	r2, r3
    1e18:	d0fc      	beq.n	1e14 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1e1a:	4a31      	ldr	r2, [pc, #196]	; (1ee0 <system_clock_init+0x128>)
    1e1c:	8a93      	ldrh	r3, [r2, #20]
    1e1e:	2180      	movs	r1, #128	; 0x80
    1e20:	430b      	orrs	r3, r1
    1e22:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1e24:	ab05      	add	r3, sp, #20
    1e26:	2100      	movs	r1, #0
    1e28:	2200      	movs	r2, #0
    1e2a:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1e2c:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1e2e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1e30:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1e32:	313f      	adds	r1, #63	; 0x3f
    1e34:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1e36:	393b      	subs	r1, #59	; 0x3b
    1e38:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1e3a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1e3c:	4b2d      	ldr	r3, [pc, #180]	; (1ef4 <system_clock_init+0x13c>)
    1e3e:	681b      	ldr	r3, [r3, #0]
    1e40:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1e42:	2b3f      	cmp	r3, #63	; 0x3f
    1e44:	d04a      	beq.n	1edc <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1e46:	a805      	add	r0, sp, #20
    1e48:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1e4a:	4b2b      	ldr	r3, [pc, #172]	; (1ef8 <system_clock_init+0x140>)
    1e4c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1e4e:	2307      	movs	r3, #7
    1e50:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1e52:	3338      	adds	r3, #56	; 0x38
    1e54:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1e56:	4b29      	ldr	r3, [pc, #164]	; (1efc <system_clock_init+0x144>)
    1e58:	4798      	blx	r3
	config->run_in_standby  = false;
    1e5a:	a804      	add	r0, sp, #16
    1e5c:	2500      	movs	r5, #0
    1e5e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1e60:	2601      	movs	r6, #1
    1e62:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1e64:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1e66:	4b26      	ldr	r3, [pc, #152]	; (1f00 <system_clock_init+0x148>)
    1e68:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1e6a:	2006      	movs	r0, #6
    1e6c:	4f20      	ldr	r7, [pc, #128]	; (1ef0 <system_clock_init+0x138>)
    1e6e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1e70:	4b24      	ldr	r3, [pc, #144]	; (1f04 <system_clock_init+0x14c>)
    1e72:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1e74:	ac01      	add	r4, sp, #4
    1e76:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1e78:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1e7a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1e7c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1e7e:	2305      	movs	r3, #5
    1e80:	7023      	strb	r3, [r4, #0]
    1e82:	0021      	movs	r1, r4
    1e84:	2001      	movs	r0, #1
    1e86:	4b20      	ldr	r3, [pc, #128]	; (1f08 <system_clock_init+0x150>)
    1e88:	4798      	blx	r3
    1e8a:	2001      	movs	r0, #1
    1e8c:	4b1f      	ldr	r3, [pc, #124]	; (1f0c <system_clock_init+0x154>)
    1e8e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1e90:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1e92:	0021      	movs	r1, r4
    1e94:	2000      	movs	r0, #0
    1e96:	4b14      	ldr	r3, [pc, #80]	; (1ee8 <system_clock_init+0x130>)
    1e98:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1e9a:	2000      	movs	r0, #0
    1e9c:	4b1c      	ldr	r3, [pc, #112]	; (1f10 <system_clock_init+0x158>)
    1e9e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1ea0:	2007      	movs	r0, #7
    1ea2:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1ea4:	490e      	ldr	r1, [pc, #56]	; (1ee0 <system_clock_init+0x128>)
    1ea6:	22d0      	movs	r2, #208	; 0xd0
    1ea8:	68cb      	ldr	r3, [r1, #12]
    1eaa:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1eac:	2bd0      	cmp	r3, #208	; 0xd0
    1eae:	d1fb      	bne.n	1ea8 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1eb0:	4a18      	ldr	r2, [pc, #96]	; (1f14 <system_clock_init+0x15c>)
    1eb2:	2300      	movs	r3, #0
    1eb4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1eb6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1eb8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1eba:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1ebc:	a901      	add	r1, sp, #4
    1ebe:	2201      	movs	r2, #1
    1ec0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1ec2:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1ec4:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1ec6:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1ec8:	3307      	adds	r3, #7
    1eca:	700b      	strb	r3, [r1, #0]
    1ecc:	2000      	movs	r0, #0
    1ece:	4b0e      	ldr	r3, [pc, #56]	; (1f08 <system_clock_init+0x150>)
    1ed0:	4798      	blx	r3
    1ed2:	2000      	movs	r0, #0
    1ed4:	4b0d      	ldr	r3, [pc, #52]	; (1f0c <system_clock_init+0x154>)
    1ed6:	4798      	blx	r3
#endif
}
    1ed8:	b00f      	add	sp, #60	; 0x3c
    1eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1edc:	3b20      	subs	r3, #32
    1ede:	e7b2      	b.n	1e46 <system_clock_init+0x8e>
    1ee0:	40000800 	.word	0x40000800
    1ee4:	41004000 	.word	0x41004000
    1ee8:	00002151 	.word	0x00002151
    1eec:	00001bd9 	.word	0x00001bd9
    1ef0:	00001d11 	.word	0x00001d11
    1ef4:	00806024 	.word	0x00806024
    1ef8:	000005b9 	.word	0x000005b9
    1efc:	00001c91 	.word	0x00001c91
    1f00:	00001b9d 	.word	0x00001b9d
    1f04:	00001f19 	.word	0x00001f19
    1f08:	00001f3d 	.word	0x00001f3d
    1f0c:	00001ff5 	.word	0x00001ff5
    1f10:	000020c5 	.word	0x000020c5
    1f14:	40000400 	.word	0x40000400

00001f18 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1f18:	4a06      	ldr	r2, [pc, #24]	; (1f34 <system_gclk_init+0x1c>)
    1f1a:	6993      	ldr	r3, [r2, #24]
    1f1c:	2108      	movs	r1, #8
    1f1e:	430b      	orrs	r3, r1
    1f20:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1f22:	2201      	movs	r2, #1
    1f24:	4b04      	ldr	r3, [pc, #16]	; (1f38 <system_gclk_init+0x20>)
    1f26:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1f28:	0019      	movs	r1, r3
    1f2a:	780b      	ldrb	r3, [r1, #0]
    1f2c:	4213      	tst	r3, r2
    1f2e:	d1fc      	bne.n	1f2a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1f30:	4770      	bx	lr
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	40000400 	.word	0x40000400
    1f38:	40000c00 	.word	0x40000c00

00001f3c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1f3c:	b570      	push	{r4, r5, r6, lr}
    1f3e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1f40:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1f42:	780d      	ldrb	r5, [r1, #0]
    1f44:	022d      	lsls	r5, r5, #8
    1f46:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1f48:	784b      	ldrb	r3, [r1, #1]
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d002      	beq.n	1f54 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1f4e:	2380      	movs	r3, #128	; 0x80
    1f50:	02db      	lsls	r3, r3, #11
    1f52:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1f54:	7a4b      	ldrb	r3, [r1, #9]
    1f56:	2b00      	cmp	r3, #0
    1f58:	d002      	beq.n	1f60 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1f5a:	2380      	movs	r3, #128	; 0x80
    1f5c:	031b      	lsls	r3, r3, #12
    1f5e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1f60:	6848      	ldr	r0, [r1, #4]
    1f62:	2801      	cmp	r0, #1
    1f64:	d910      	bls.n	1f88 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1f66:	1e43      	subs	r3, r0, #1
    1f68:	4218      	tst	r0, r3
    1f6a:	d134      	bne.n	1fd6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1f6c:	2802      	cmp	r0, #2
    1f6e:	d930      	bls.n	1fd2 <system_gclk_gen_set_config+0x96>
    1f70:	2302      	movs	r3, #2
    1f72:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1f74:	3201      	adds	r2, #1
						mask <<= 1) {
    1f76:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1f78:	4298      	cmp	r0, r3
    1f7a:	d8fb      	bhi.n	1f74 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1f7c:	0212      	lsls	r2, r2, #8
    1f7e:	4332      	orrs	r2, r6
    1f80:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1f82:	2380      	movs	r3, #128	; 0x80
    1f84:	035b      	lsls	r3, r3, #13
    1f86:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1f88:	7a0b      	ldrb	r3, [r1, #8]
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d002      	beq.n	1f94 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1f8e:	2380      	movs	r3, #128	; 0x80
    1f90:	039b      	lsls	r3, r3, #14
    1f92:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f94:	4a13      	ldr	r2, [pc, #76]	; (1fe4 <system_gclk_gen_set_config+0xa8>)
    1f96:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1f98:	b25b      	sxtb	r3, r3
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	dbfb      	blt.n	1f96 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1f9e:	4b12      	ldr	r3, [pc, #72]	; (1fe8 <system_gclk_gen_set_config+0xac>)
    1fa0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1fa2:	4b12      	ldr	r3, [pc, #72]	; (1fec <system_gclk_gen_set_config+0xb0>)
    1fa4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fa6:	4a0f      	ldr	r2, [pc, #60]	; (1fe4 <system_gclk_gen_set_config+0xa8>)
    1fa8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1faa:	b25b      	sxtb	r3, r3
    1fac:	2b00      	cmp	r3, #0
    1fae:	dbfb      	blt.n	1fa8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1fb0:	4b0c      	ldr	r3, [pc, #48]	; (1fe4 <system_gclk_gen_set_config+0xa8>)
    1fb2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fb4:	001a      	movs	r2, r3
    1fb6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1fb8:	b25b      	sxtb	r3, r3
    1fba:	2b00      	cmp	r3, #0
    1fbc:	dbfb      	blt.n	1fb6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1fbe:	4a09      	ldr	r2, [pc, #36]	; (1fe4 <system_gclk_gen_set_config+0xa8>)
    1fc0:	6853      	ldr	r3, [r2, #4]
    1fc2:	2180      	movs	r1, #128	; 0x80
    1fc4:	0249      	lsls	r1, r1, #9
    1fc6:	400b      	ands	r3, r1
    1fc8:	431d      	orrs	r5, r3
    1fca:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1fcc:	4b08      	ldr	r3, [pc, #32]	; (1ff0 <system_gclk_gen_set_config+0xb4>)
    1fce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1fd0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1fd2:	2200      	movs	r2, #0
    1fd4:	e7d2      	b.n	1f7c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1fd6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1fd8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1fda:	2380      	movs	r3, #128	; 0x80
    1fdc:	029b      	lsls	r3, r3, #10
    1fde:	431d      	orrs	r5, r3
    1fe0:	e7d2      	b.n	1f88 <system_gclk_gen_set_config+0x4c>
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	40000c00 	.word	0x40000c00
    1fe8:	00001a41 	.word	0x00001a41
    1fec:	40000c08 	.word	0x40000c08
    1ff0:	00001a81 	.word	0x00001a81

00001ff4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1ff4:	b510      	push	{r4, lr}
    1ff6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ff8:	4a0b      	ldr	r2, [pc, #44]	; (2028 <STACK_SIZE+0x28>)
    1ffa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ffc:	b25b      	sxtb	r3, r3
    1ffe:	2b00      	cmp	r3, #0
    2000:	dbfb      	blt.n	1ffa <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2002:	4b0a      	ldr	r3, [pc, #40]	; (202c <STACK_SIZE+0x2c>)
    2004:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2006:	4b0a      	ldr	r3, [pc, #40]	; (2030 <STACK_SIZE+0x30>)
    2008:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    200a:	4a07      	ldr	r2, [pc, #28]	; (2028 <STACK_SIZE+0x28>)
    200c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    200e:	b25b      	sxtb	r3, r3
    2010:	2b00      	cmp	r3, #0
    2012:	dbfb      	blt.n	200c <STACK_SIZE+0xc>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2014:	4a04      	ldr	r2, [pc, #16]	; (2028 <STACK_SIZE+0x28>)
    2016:	6851      	ldr	r1, [r2, #4]
    2018:	2380      	movs	r3, #128	; 0x80
    201a:	025b      	lsls	r3, r3, #9
    201c:	430b      	orrs	r3, r1
    201e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2020:	4b04      	ldr	r3, [pc, #16]	; (2034 <STACK_SIZE+0x34>)
    2022:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2024:	bd10      	pop	{r4, pc}
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	40000c00 	.word	0x40000c00
    202c:	00001a41 	.word	0x00001a41
    2030:	40000c04 	.word	0x40000c04
    2034:	00001a81 	.word	0x00001a81

00002038 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2038:	b570      	push	{r4, r5, r6, lr}
    203a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    203c:	4a1a      	ldr	r2, [pc, #104]	; (20a8 <system_gclk_gen_get_hz+0x70>)
    203e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2040:	b25b      	sxtb	r3, r3
    2042:	2b00      	cmp	r3, #0
    2044:	dbfb      	blt.n	203e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2046:	4b19      	ldr	r3, [pc, #100]	; (20ac <system_gclk_gen_get_hz+0x74>)
    2048:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    204a:	4b19      	ldr	r3, [pc, #100]	; (20b0 <system_gclk_gen_get_hz+0x78>)
    204c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    204e:	4a16      	ldr	r2, [pc, #88]	; (20a8 <system_gclk_gen_get_hz+0x70>)
    2050:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2052:	b25b      	sxtb	r3, r3
    2054:	2b00      	cmp	r3, #0
    2056:	dbfb      	blt.n	2050 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2058:	4e13      	ldr	r6, [pc, #76]	; (20a8 <system_gclk_gen_get_hz+0x70>)
    205a:	6870      	ldr	r0, [r6, #4]
    205c:	04c0      	lsls	r0, r0, #19
    205e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2060:	4b14      	ldr	r3, [pc, #80]	; (20b4 <system_gclk_gen_get_hz+0x7c>)
    2062:	4798      	blx	r3
    2064:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2066:	4b12      	ldr	r3, [pc, #72]	; (20b0 <system_gclk_gen_get_hz+0x78>)
    2068:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    206a:	6876      	ldr	r6, [r6, #4]
    206c:	02f6      	lsls	r6, r6, #11
    206e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2070:	4b11      	ldr	r3, [pc, #68]	; (20b8 <system_gclk_gen_get_hz+0x80>)
    2072:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2074:	4a0c      	ldr	r2, [pc, #48]	; (20a8 <system_gclk_gen_get_hz+0x70>)
    2076:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2078:	b25b      	sxtb	r3, r3
    207a:	2b00      	cmp	r3, #0
    207c:	dbfb      	blt.n	2076 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    207e:	4b0a      	ldr	r3, [pc, #40]	; (20a8 <system_gclk_gen_get_hz+0x70>)
    2080:	689c      	ldr	r4, [r3, #8]
    2082:	0224      	lsls	r4, r4, #8
    2084:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2086:	4b0d      	ldr	r3, [pc, #52]	; (20bc <system_gclk_gen_get_hz+0x84>)
    2088:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    208a:	2e00      	cmp	r6, #0
    208c:	d107      	bne.n	209e <system_gclk_gen_get_hz+0x66>
    208e:	2c01      	cmp	r4, #1
    2090:	d907      	bls.n	20a2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2092:	0021      	movs	r1, r4
    2094:	0028      	movs	r0, r5
    2096:	4b0a      	ldr	r3, [pc, #40]	; (20c0 <system_gclk_gen_get_hz+0x88>)
    2098:	4798      	blx	r3
    209a:	0005      	movs	r5, r0
    209c:	e001      	b.n	20a2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    209e:	3401      	adds	r4, #1
    20a0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    20a2:	0028      	movs	r0, r5
    20a4:	bd70      	pop	{r4, r5, r6, pc}
    20a6:	46c0      	nop			; (mov r8, r8)
    20a8:	40000c00 	.word	0x40000c00
    20ac:	00001a41 	.word	0x00001a41
    20b0:	40000c04 	.word	0x40000c04
    20b4:	00001b0d 	.word	0x00001b0d
    20b8:	40000c08 	.word	0x40000c08
    20bc:	00001a81 	.word	0x00001a81
    20c0:	00002891 	.word	0x00002891

000020c4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    20c4:	b510      	push	{r4, lr}
    20c6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    20c8:	4b06      	ldr	r3, [pc, #24]	; (20e4 <system_gclk_chan_enable+0x20>)
    20ca:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    20cc:	4b06      	ldr	r3, [pc, #24]	; (20e8 <system_gclk_chan_enable+0x24>)
    20ce:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    20d0:	4a06      	ldr	r2, [pc, #24]	; (20ec <system_gclk_chan_enable+0x28>)
    20d2:	8853      	ldrh	r3, [r2, #2]
    20d4:	2180      	movs	r1, #128	; 0x80
    20d6:	01c9      	lsls	r1, r1, #7
    20d8:	430b      	orrs	r3, r1
    20da:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    20dc:	4b04      	ldr	r3, [pc, #16]	; (20f0 <system_gclk_chan_enable+0x2c>)
    20de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20e0:	bd10      	pop	{r4, pc}
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	00001a41 	.word	0x00001a41
    20e8:	40000c02 	.word	0x40000c02
    20ec:	40000c00 	.word	0x40000c00
    20f0:	00001a81 	.word	0x00001a81

000020f4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    20f4:	b510      	push	{r4, lr}
    20f6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    20f8:	4b0f      	ldr	r3, [pc, #60]	; (2138 <system_gclk_chan_disable+0x44>)
    20fa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    20fc:	4b0f      	ldr	r3, [pc, #60]	; (213c <system_gclk_chan_disable+0x48>)
    20fe:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2100:	4a0f      	ldr	r2, [pc, #60]	; (2140 <system_gclk_chan_disable+0x4c>)
    2102:	8853      	ldrh	r3, [r2, #2]
    2104:	051b      	lsls	r3, r3, #20
    2106:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2108:	8853      	ldrh	r3, [r2, #2]
    210a:	490e      	ldr	r1, [pc, #56]	; (2144 <system_gclk_chan_disable+0x50>)
    210c:	400b      	ands	r3, r1
    210e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2110:	8853      	ldrh	r3, [r2, #2]
    2112:	490d      	ldr	r1, [pc, #52]	; (2148 <system_gclk_chan_disable+0x54>)
    2114:	400b      	ands	r3, r1
    2116:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2118:	0011      	movs	r1, r2
    211a:	2280      	movs	r2, #128	; 0x80
    211c:	01d2      	lsls	r2, r2, #7
    211e:	884b      	ldrh	r3, [r1, #2]
    2120:	4213      	tst	r3, r2
    2122:	d1fc      	bne.n	211e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2124:	4906      	ldr	r1, [pc, #24]	; (2140 <system_gclk_chan_disable+0x4c>)
    2126:	884a      	ldrh	r2, [r1, #2]
    2128:	0203      	lsls	r3, r0, #8
    212a:	4806      	ldr	r0, [pc, #24]	; (2144 <system_gclk_chan_disable+0x50>)
    212c:	4002      	ands	r2, r0
    212e:	4313      	orrs	r3, r2
    2130:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2132:	4b06      	ldr	r3, [pc, #24]	; (214c <system_gclk_chan_disable+0x58>)
    2134:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2136:	bd10      	pop	{r4, pc}
    2138:	00001a41 	.word	0x00001a41
    213c:	40000c02 	.word	0x40000c02
    2140:	40000c00 	.word	0x40000c00
    2144:	fffff0ff 	.word	0xfffff0ff
    2148:	ffffbfff 	.word	0xffffbfff
    214c:	00001a81 	.word	0x00001a81

00002150 <system_gclk_chan_set_config>:
{
    2150:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2152:	780c      	ldrb	r4, [r1, #0]
    2154:	0224      	lsls	r4, r4, #8
    2156:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2158:	4b02      	ldr	r3, [pc, #8]	; (2164 <system_gclk_chan_set_config+0x14>)
    215a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    215c:	b2a4      	uxth	r4, r4
    215e:	4b02      	ldr	r3, [pc, #8]	; (2168 <system_gclk_chan_set_config+0x18>)
    2160:	805c      	strh	r4, [r3, #2]
}
    2162:	bd10      	pop	{r4, pc}
    2164:	000020f5 	.word	0x000020f5
    2168:	40000c00 	.word	0x40000c00

0000216c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    216c:	b510      	push	{r4, lr}
    216e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2170:	4b06      	ldr	r3, [pc, #24]	; (218c <system_gclk_chan_get_hz+0x20>)
    2172:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2174:	4b06      	ldr	r3, [pc, #24]	; (2190 <system_gclk_chan_get_hz+0x24>)
    2176:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2178:	4b06      	ldr	r3, [pc, #24]	; (2194 <system_gclk_chan_get_hz+0x28>)
    217a:	885c      	ldrh	r4, [r3, #2]
    217c:	0524      	lsls	r4, r4, #20
    217e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2180:	4b05      	ldr	r3, [pc, #20]	; (2198 <system_gclk_chan_get_hz+0x2c>)
    2182:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2184:	0020      	movs	r0, r4
    2186:	4b05      	ldr	r3, [pc, #20]	; (219c <system_gclk_chan_get_hz+0x30>)
    2188:	4798      	blx	r3
}
    218a:	bd10      	pop	{r4, pc}
    218c:	00001a41 	.word	0x00001a41
    2190:	40000c02 	.word	0x40000c02
    2194:	40000c00 	.word	0x40000c00
    2198:	00001a81 	.word	0x00001a81
    219c:	00002039 	.word	0x00002039

000021a0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    21a0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    21a2:	78d3      	ldrb	r3, [r2, #3]
    21a4:	2b00      	cmp	r3, #0
    21a6:	d135      	bne.n	2214 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    21a8:	7813      	ldrb	r3, [r2, #0]
    21aa:	2b80      	cmp	r3, #128	; 0x80
    21ac:	d029      	beq.n	2202 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    21ae:	061b      	lsls	r3, r3, #24
    21b0:	2480      	movs	r4, #128	; 0x80
    21b2:	0264      	lsls	r4, r4, #9
    21b4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    21b6:	7854      	ldrb	r4, [r2, #1]
    21b8:	2502      	movs	r5, #2
    21ba:	43ac      	bics	r4, r5
    21bc:	d106      	bne.n	21cc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    21be:	7894      	ldrb	r4, [r2, #2]
    21c0:	2c00      	cmp	r4, #0
    21c2:	d120      	bne.n	2206 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    21c4:	2480      	movs	r4, #128	; 0x80
    21c6:	02a4      	lsls	r4, r4, #10
    21c8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    21ca:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    21cc:	7854      	ldrb	r4, [r2, #1]
    21ce:	3c01      	subs	r4, #1
    21d0:	2c01      	cmp	r4, #1
    21d2:	d91c      	bls.n	220e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    21d4:	040d      	lsls	r5, r1, #16
    21d6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    21d8:	24a0      	movs	r4, #160	; 0xa0
    21da:	05e4      	lsls	r4, r4, #23
    21dc:	432c      	orrs	r4, r5
    21de:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21e0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    21e2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    21e4:	24d0      	movs	r4, #208	; 0xd0
    21e6:	0624      	lsls	r4, r4, #24
    21e8:	432c      	orrs	r4, r5
    21ea:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21ec:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    21ee:	78d4      	ldrb	r4, [r2, #3]
    21f0:	2c00      	cmp	r4, #0
    21f2:	d122      	bne.n	223a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    21f4:	035b      	lsls	r3, r3, #13
    21f6:	d51c      	bpl.n	2232 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    21f8:	7893      	ldrb	r3, [r2, #2]
    21fa:	2b01      	cmp	r3, #1
    21fc:	d01e      	beq.n	223c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    21fe:	6141      	str	r1, [r0, #20]
    2200:	e017      	b.n	2232 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2202:	2300      	movs	r3, #0
    2204:	e7d7      	b.n	21b6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2206:	24c0      	movs	r4, #192	; 0xc0
    2208:	02e4      	lsls	r4, r4, #11
    220a:	4323      	orrs	r3, r4
    220c:	e7dd      	b.n	21ca <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    220e:	4c0d      	ldr	r4, [pc, #52]	; (2244 <_system_pinmux_config+0xa4>)
    2210:	4023      	ands	r3, r4
    2212:	e7df      	b.n	21d4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2214:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2216:	040c      	lsls	r4, r1, #16
    2218:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    221a:	23a0      	movs	r3, #160	; 0xa0
    221c:	05db      	lsls	r3, r3, #23
    221e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2220:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2222:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2224:	23d0      	movs	r3, #208	; 0xd0
    2226:	061b      	lsls	r3, r3, #24
    2228:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    222a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    222c:	78d3      	ldrb	r3, [r2, #3]
    222e:	2b00      	cmp	r3, #0
    2230:	d103      	bne.n	223a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2232:	7853      	ldrb	r3, [r2, #1]
    2234:	3b01      	subs	r3, #1
    2236:	2b01      	cmp	r3, #1
    2238:	d902      	bls.n	2240 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    223a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    223c:	6181      	str	r1, [r0, #24]
    223e:	e7f8      	b.n	2232 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2240:	6081      	str	r1, [r0, #8]
}
    2242:	e7fa      	b.n	223a <_system_pinmux_config+0x9a>
    2244:	fffbffff 	.word	0xfffbffff

00002248 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2248:	b510      	push	{r4, lr}
    224a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    224c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    224e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2250:	2900      	cmp	r1, #0
    2252:	d104      	bne.n	225e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2254:	0943      	lsrs	r3, r0, #5
    2256:	01db      	lsls	r3, r3, #7
    2258:	4905      	ldr	r1, [pc, #20]	; (2270 <system_pinmux_pin_set_config+0x28>)
    225a:	468c      	mov	ip, r1
    225c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    225e:	241f      	movs	r4, #31
    2260:	4020      	ands	r0, r4
    2262:	2101      	movs	r1, #1
    2264:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2266:	0018      	movs	r0, r3
    2268:	4b02      	ldr	r3, [pc, #8]	; (2274 <system_pinmux_pin_set_config+0x2c>)
    226a:	4798      	blx	r3
}
    226c:	bd10      	pop	{r4, pc}
    226e:	46c0      	nop			; (mov r8, r8)
    2270:	41004400 	.word	0x41004400
    2274:	000021a1 	.word	0x000021a1

00002278 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2278:	4770      	bx	lr
	...

0000227c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    227c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    227e:	4b05      	ldr	r3, [pc, #20]	; (2294 <system_init+0x18>)
    2280:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2282:	4b05      	ldr	r3, [pc, #20]	; (2298 <system_init+0x1c>)
    2284:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2286:	4b05      	ldr	r3, [pc, #20]	; (229c <system_init+0x20>)
    2288:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    228a:	4b05      	ldr	r3, [pc, #20]	; (22a0 <system_init+0x24>)
    228c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    228e:	4b05      	ldr	r3, [pc, #20]	; (22a4 <system_init+0x28>)
    2290:	4798      	blx	r3
}
    2292:	bd10      	pop	{r4, pc}
    2294:	00001db9 	.word	0x00001db9
    2298:	00001ab1 	.word	0x00001ab1
    229c:	00002279 	.word	0x00002279
    22a0:	00002279 	.word	0x00002279
    22a4:	00002279 	.word	0x00002279

000022a8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    22a8:	e7fe      	b.n	22a8 <Dummy_Handler>
	...

000022ac <Reset_Handler>:
{
    22ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    22ae:	4a2a      	ldr	r2, [pc, #168]	; (2358 <Reset_Handler+0xac>)
    22b0:	4b2a      	ldr	r3, [pc, #168]	; (235c <Reset_Handler+0xb0>)
    22b2:	429a      	cmp	r2, r3
    22b4:	d011      	beq.n	22da <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    22b6:	001a      	movs	r2, r3
    22b8:	4b29      	ldr	r3, [pc, #164]	; (2360 <Reset_Handler+0xb4>)
    22ba:	429a      	cmp	r2, r3
    22bc:	d20d      	bcs.n	22da <Reset_Handler+0x2e>
    22be:	4a29      	ldr	r2, [pc, #164]	; (2364 <Reset_Handler+0xb8>)
    22c0:	3303      	adds	r3, #3
    22c2:	1a9b      	subs	r3, r3, r2
    22c4:	089b      	lsrs	r3, r3, #2
    22c6:	3301      	adds	r3, #1
    22c8:	009b      	lsls	r3, r3, #2
    22ca:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    22cc:	4823      	ldr	r0, [pc, #140]	; (235c <Reset_Handler+0xb0>)
    22ce:	4922      	ldr	r1, [pc, #136]	; (2358 <Reset_Handler+0xac>)
    22d0:	588c      	ldr	r4, [r1, r2]
    22d2:	5084      	str	r4, [r0, r2]
    22d4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    22d6:	429a      	cmp	r2, r3
    22d8:	d1fa      	bne.n	22d0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    22da:	4a23      	ldr	r2, [pc, #140]	; (2368 <Reset_Handler+0xbc>)
    22dc:	4b23      	ldr	r3, [pc, #140]	; (236c <Reset_Handler+0xc0>)
    22de:	429a      	cmp	r2, r3
    22e0:	d20a      	bcs.n	22f8 <Reset_Handler+0x4c>
    22e2:	43d3      	mvns	r3, r2
    22e4:	4921      	ldr	r1, [pc, #132]	; (236c <Reset_Handler+0xc0>)
    22e6:	185b      	adds	r3, r3, r1
    22e8:	2103      	movs	r1, #3
    22ea:	438b      	bics	r3, r1
    22ec:	3304      	adds	r3, #4
    22ee:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    22f0:	2100      	movs	r1, #0
    22f2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    22f4:	4293      	cmp	r3, r2
    22f6:	d1fc      	bne.n	22f2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    22f8:	4a1d      	ldr	r2, [pc, #116]	; (2370 <Reset_Handler+0xc4>)
    22fa:	21ff      	movs	r1, #255	; 0xff
    22fc:	4b1d      	ldr	r3, [pc, #116]	; (2374 <Reset_Handler+0xc8>)
    22fe:	438b      	bics	r3, r1
    2300:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2302:	39fd      	subs	r1, #253	; 0xfd
    2304:	2390      	movs	r3, #144	; 0x90
    2306:	005b      	lsls	r3, r3, #1
    2308:	4a1b      	ldr	r2, [pc, #108]	; (2378 <Reset_Handler+0xcc>)
    230a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    230c:	4a1b      	ldr	r2, [pc, #108]	; (237c <Reset_Handler+0xd0>)
    230e:	78d3      	ldrb	r3, [r2, #3]
    2310:	2503      	movs	r5, #3
    2312:	43ab      	bics	r3, r5
    2314:	2402      	movs	r4, #2
    2316:	4323      	orrs	r3, r4
    2318:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    231a:	78d3      	ldrb	r3, [r2, #3]
    231c:	270c      	movs	r7, #12
    231e:	43bb      	bics	r3, r7
    2320:	2608      	movs	r6, #8
    2322:	4333      	orrs	r3, r6
    2324:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2326:	4b16      	ldr	r3, [pc, #88]	; (2380 <Reset_Handler+0xd4>)
    2328:	7b98      	ldrb	r0, [r3, #14]
    232a:	2230      	movs	r2, #48	; 0x30
    232c:	4390      	bics	r0, r2
    232e:	2220      	movs	r2, #32
    2330:	4310      	orrs	r0, r2
    2332:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2334:	7b99      	ldrb	r1, [r3, #14]
    2336:	43b9      	bics	r1, r7
    2338:	4331      	orrs	r1, r6
    233a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    233c:	7b9a      	ldrb	r2, [r3, #14]
    233e:	43aa      	bics	r2, r5
    2340:	4322      	orrs	r2, r4
    2342:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2344:	4a0f      	ldr	r2, [pc, #60]	; (2384 <Reset_Handler+0xd8>)
    2346:	6853      	ldr	r3, [r2, #4]
    2348:	2180      	movs	r1, #128	; 0x80
    234a:	430b      	orrs	r3, r1
    234c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    234e:	4b0e      	ldr	r3, [pc, #56]	; (2388 <Reset_Handler+0xdc>)
    2350:	4798      	blx	r3
        main();
    2352:	4b0e      	ldr	r3, [pc, #56]	; (238c <Reset_Handler+0xe0>)
    2354:	4798      	blx	r3
    2356:	e7fe      	b.n	2356 <Reset_Handler+0xaa>
    2358:	00005710 	.word	0x00005710
    235c:	20000000 	.word	0x20000000
    2360:	20000088 	.word	0x20000088
    2364:	20000004 	.word	0x20000004
    2368:	20000088 	.word	0x20000088
    236c:	20000188 	.word	0x20000188
    2370:	e000ed00 	.word	0xe000ed00
    2374:	00000000 	.word	0x00000000
    2378:	41007000 	.word	0x41007000
    237c:	41005000 	.word	0x41005000
    2380:	41004800 	.word	0x41004800
    2384:	41004000 	.word	0x41004000
    2388:	000042c5 	.word	0x000042c5
    238c:	000026d1 	.word	0x000026d1

00002390 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2390:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2392:	4a06      	ldr	r2, [pc, #24]	; (23ac <_sbrk+0x1c>)
    2394:	6812      	ldr	r2, [r2, #0]
    2396:	2a00      	cmp	r2, #0
    2398:	d004      	beq.n	23a4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    239a:	4a04      	ldr	r2, [pc, #16]	; (23ac <_sbrk+0x1c>)
    239c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    239e:	18c3      	adds	r3, r0, r3
    23a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    23a2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    23a4:	4902      	ldr	r1, [pc, #8]	; (23b0 <_sbrk+0x20>)
    23a6:	4a01      	ldr	r2, [pc, #4]	; (23ac <_sbrk+0x1c>)
    23a8:	6011      	str	r1, [r2, #0]
    23aa:	e7f6      	b.n	239a <_sbrk+0xa>
    23ac:	200000e0 	.word	0x200000e0
    23b0:	20002188 	.word	0x20002188

000023b4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    23b4:	2001      	movs	r0, #1
    23b6:	4240      	negs	r0, r0
    23b8:	4770      	bx	lr

000023ba <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    23ba:	2380      	movs	r3, #128	; 0x80
    23bc:	019b      	lsls	r3, r3, #6
    23be:	604b      	str	r3, [r1, #4]

	return 0;
}
    23c0:	2000      	movs	r0, #0
    23c2:	4770      	bx	lr

000023c4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    23c4:	2001      	movs	r0, #1
    23c6:	4770      	bx	lr

000023c8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    23c8:	2000      	movs	r0, #0
    23ca:	4770      	bx	lr

000023cc <usart_write_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    23cc:	2280      	movs	r2, #128	; 0x80
    23ce:	0412      	lsls	r2, r2, #16
    23d0:	4b01      	ldr	r3, [pc, #4]	; (23d8 <usart_write_callback+0xc>)
    23d2:	61da      	str	r2, [r3, #28]
}

void usart_write_callback(const struct usart_module *const usart_module)
{
	port_pin_toggle_output_level(LED_0_PIN);
}
    23d4:	4770      	bx	lr
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	41004400 	.word	0x41004400

000023dc <i2c_write_complete_callback>:
{
    23dc:	b510      	push	{r4, lr}
	i2c_master_read_packet_job(&i2c_master_instance,&rd_packet);
    23de:	4902      	ldr	r1, [pc, #8]	; (23e8 <i2c_write_complete_callback+0xc>)
    23e0:	4802      	ldr	r0, [pc, #8]	; (23ec <i2c_write_complete_callback+0x10>)
    23e2:	4b03      	ldr	r3, [pc, #12]	; (23f0 <i2c_write_complete_callback+0x14>)
    23e4:	4798      	blx	r3
}
    23e6:	bd10      	pop	{r4, pc}
    23e8:	20000004 	.word	0x20000004
    23ec:	20000154 	.word	0x20000154
    23f0:	00000d71 	.word	0x00000d71

000023f4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    23f4:	b570      	push	{r4, r5, r6, lr}
    23f6:	b082      	sub	sp, #8
    23f8:	0005      	movs	r5, r0
    23fa:	000e      	movs	r6, r1
	uint16_t temp = 0;
    23fc:	2200      	movs	r2, #0
    23fe:	466b      	mov	r3, sp
    2400:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2402:	4c06      	ldr	r4, [pc, #24]	; (241c <usart_serial_getchar+0x28>)
    2404:	466b      	mov	r3, sp
    2406:	1d99      	adds	r1, r3, #6
    2408:	0028      	movs	r0, r5
    240a:	47a0      	blx	r4
    240c:	2800      	cmp	r0, #0
    240e:	d1f9      	bne.n	2404 <usart_serial_getchar+0x10>

	*c = temp;
    2410:	466b      	mov	r3, sp
    2412:	3306      	adds	r3, #6
    2414:	881b      	ldrh	r3, [r3, #0]
    2416:	7033      	strb	r3, [r6, #0]
}
    2418:	b002      	add	sp, #8
    241a:	bd70      	pop	{r4, r5, r6, pc}
    241c:	000016f9 	.word	0x000016f9

00002420 <usart_serial_putchar>:
{
    2420:	b570      	push	{r4, r5, r6, lr}
    2422:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2424:	b28c      	uxth	r4, r1
    2426:	4e03      	ldr	r6, [pc, #12]	; (2434 <usart_serial_putchar+0x14>)
    2428:	0021      	movs	r1, r4
    242a:	0028      	movs	r0, r5
    242c:	47b0      	blx	r6
    242e:	2800      	cmp	r0, #0
    2430:	d1fa      	bne.n	2428 <usart_serial_putchar+0x8>
}
    2432:	bd70      	pop	{r4, r5, r6, pc}
    2434:	000016cd 	.word	0x000016cd

00002438 <usart_read_callback>:
{
    2438:	b510      	push	{r4, lr}
	usart_write_buffer_job(&usart_instance,
    243a:	2205      	movs	r2, #5
    243c:	4902      	ldr	r1, [pc, #8]	; (2448 <usart_read_callback+0x10>)
    243e:	4803      	ldr	r0, [pc, #12]	; (244c <usart_read_callback+0x14>)
    2440:	4b03      	ldr	r3, [pc, #12]	; (2450 <usart_read_callback+0x18>)
    2442:	4798      	blx	r3
}
    2444:	bd10      	pop	{r4, pc}
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	2000014c 	.word	0x2000014c
    244c:	20000118 	.word	0x20000118
    2450:	000017bd 	.word	0x000017bd

00002454 <configure_i2c>:
{
    2454:	b530      	push	{r4, r5, lr}
    2456:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2458:	ab01      	add	r3, sp, #4
    245a:	2264      	movs	r2, #100	; 0x64
    245c:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    245e:	4a22      	ldr	r2, [pc, #136]	; (24e8 <configure_i2c+0x94>)
    2460:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2462:	2200      	movs	r2, #0
    2464:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2466:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    2468:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    246a:	2180      	movs	r1, #128	; 0x80
    246c:	0389      	lsls	r1, r1, #14
    246e:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    2470:	2101      	movs	r1, #1
    2472:	4249      	negs	r1, r1
    2474:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    2476:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2478:	3125      	adds	r1, #37	; 0x25
    247a:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    247c:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    247e:	3108      	adds	r1, #8
    2480:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2482:	3101      	adds	r1, #1
    2484:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    2486:	3101      	adds	r1, #1
    2488:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    248a:	32d7      	adds	r2, #215	; 0xd7
    248c:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0       = PINMUX_PA08D_SERCOM2_PAD0;
    248e:	4a17      	ldr	r2, [pc, #92]	; (24ec <configure_i2c+0x98>)
    2490:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1       = PINMUX_PA09D_SERCOM2_PAD1;
    2492:	4a17      	ldr	r2, [pc, #92]	; (24f0 <configure_i2c+0x9c>)
    2494:	9209      	str	r2, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master) != STATUS_OK);
    2496:	4d17      	ldr	r5, [pc, #92]	; (24f4 <configure_i2c+0xa0>)
    2498:	4c17      	ldr	r4, [pc, #92]	; (24f8 <configure_i2c+0xa4>)
    249a:	aa01      	add	r2, sp, #4
    249c:	4917      	ldr	r1, [pc, #92]	; (24fc <configure_i2c+0xa8>)
    249e:	0028      	movs	r0, r5
    24a0:	47a0      	blx	r4
    24a2:	2800      	cmp	r0, #0
    24a4:	d1f9      	bne.n	249a <configure_i2c+0x46>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    24a6:	4b13      	ldr	r3, [pc, #76]	; (24f4 <configure_i2c+0xa0>)
    24a8:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    24aa:	2207      	movs	r2, #7
    24ac:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    24ae:	421a      	tst	r2, r3
    24b0:	d1fc      	bne.n	24ac <configure_i2c+0x58>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    24b2:	6823      	ldr	r3, [r4, #0]
    24b4:	2202      	movs	r2, #2
    24b6:	4313      	orrs	r3, r2
    24b8:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    24ba:	4d0e      	ldr	r5, [pc, #56]	; (24f4 <configure_i2c+0xa0>)
    24bc:	6828      	ldr	r0, [r5, #0]
    24be:	4b10      	ldr	r3, [pc, #64]	; (2500 <configure_i2c+0xac>)
    24c0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    24c2:	231f      	movs	r3, #31
    24c4:	4018      	ands	r0, r3
    24c6:	3b1e      	subs	r3, #30
    24c8:	4083      	lsls	r3, r0
    24ca:	4a0e      	ldr	r2, [pc, #56]	; (2504 <configure_i2c+0xb0>)
    24cc:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    24ce:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    24d0:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    24d2:	2110      	movs	r1, #16
    24d4:	8b62      	ldrh	r2, [r4, #26]
    24d6:	420a      	tst	r2, r1
    24d8:	d104      	bne.n	24e4 <configure_i2c+0x90>
		timeout_counter++;
    24da:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    24dc:	4283      	cmp	r3, r0
    24de:	d3f9      	bcc.n	24d4 <configure_i2c+0x80>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    24e0:	2310      	movs	r3, #16
    24e2:	8363      	strh	r3, [r4, #26]
}
    24e4:	b00f      	add	sp, #60	; 0x3c
    24e6:	bd30      	pop	{r4, r5, pc}
    24e8:	00000d48 	.word	0x00000d48
    24ec:	00080003 	.word	0x00080003
    24f0:	00090003 	.word	0x00090003
    24f4:	20000154 	.word	0x20000154
    24f8:	00000559 	.word	0x00000559
    24fc:	42001000 	.word	0x42001000
    2500:	000019b1 	.word	0x000019b1
    2504:	e000e100 	.word	0xe000e100

00002508 <configure_i2c_callbacks>:
{
    2508:	b510      	push	{r4, lr}
	i2c_master_register_callback(&i2c_master_instance, i2c_write_complete_callback,
    250a:	4c05      	ldr	r4, [pc, #20]	; (2520 <configure_i2c_callbacks+0x18>)
    250c:	2200      	movs	r2, #0
    250e:	4905      	ldr	r1, [pc, #20]	; (2524 <configure_i2c_callbacks+0x1c>)
    2510:	0020      	movs	r0, r4
    2512:	4b05      	ldr	r3, [pc, #20]	; (2528 <configure_i2c_callbacks+0x20>)
    2514:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    2516:	7e63      	ldrb	r3, [r4, #25]
    2518:	2201      	movs	r2, #1
    251a:	4313      	orrs	r3, r2
    251c:	7663      	strb	r3, [r4, #25]
}
    251e:	bd10      	pop	{r4, pc}
    2520:	20000154 	.word	0x20000154
    2524:	000023dd 	.word	0x000023dd
    2528:	00000d59 	.word	0x00000d59

0000252c <configure_usart>:
{
    252c:	b5f0      	push	{r4, r5, r6, r7, lr}
    252e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2530:	2380      	movs	r3, #128	; 0x80
    2532:	05db      	lsls	r3, r3, #23
    2534:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2536:	2300      	movs	r3, #0
    2538:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    253a:	22ff      	movs	r2, #255	; 0xff
    253c:	4669      	mov	r1, sp
    253e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2540:	2200      	movs	r2, #0
    2542:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2544:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2546:	2401      	movs	r4, #1
    2548:	2124      	movs	r1, #36	; 0x24
    254a:	4668      	mov	r0, sp
    254c:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    254e:	3101      	adds	r1, #1
    2550:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2552:	3101      	adds	r1, #1
    2554:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    2556:	3101      	adds	r1, #1
    2558:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    255a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    255c:	3105      	adds	r1, #5
    255e:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2560:	3101      	adds	r1, #1
    2562:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2564:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2566:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2568:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    256a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    256c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    256e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    2570:	2313      	movs	r3, #19
    2572:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2574:	7742      	strb	r2, [r0, #29]
	config_usart.baudrate    = 115200;
    2576:	23e1      	movs	r3, #225	; 0xe1
    2578:	025b      	lsls	r3, r3, #9
    257a:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    257c:	23c4      	movs	r3, #196	; 0xc4
    257e:	039b      	lsls	r3, r3, #14
    2580:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    2582:	2301      	movs	r3, #1
    2584:	425b      	negs	r3, r3
    2586:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    2588:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA20D_SERCOM3_PAD2;
    258a:	4b17      	ldr	r3, [pc, #92]	; (25e8 <configure_usart+0xbc>)
    258c:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA21D_SERCOM3_PAD3;
    258e:	4b17      	ldr	r3, [pc, #92]	; (25ec <configure_usart+0xc0>)
    2590:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2592:	4d17      	ldr	r5, [pc, #92]	; (25f0 <configure_usart+0xc4>)
    2594:	4b17      	ldr	r3, [pc, #92]	; (25f4 <configure_usart+0xc8>)
    2596:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2598:	4a17      	ldr	r2, [pc, #92]	; (25f8 <configure_usart+0xcc>)
    259a:	4b18      	ldr	r3, [pc, #96]	; (25fc <configure_usart+0xd0>)
    259c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    259e:	4a18      	ldr	r2, [pc, #96]	; (2600 <configure_usart+0xd4>)
    25a0:	4b18      	ldr	r3, [pc, #96]	; (2604 <configure_usart+0xd8>)
    25a2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    25a4:	466a      	mov	r2, sp
    25a6:	4918      	ldr	r1, [pc, #96]	; (2608 <configure_usart+0xdc>)
    25a8:	0028      	movs	r0, r5
    25aa:	4b18      	ldr	r3, [pc, #96]	; (260c <configure_usart+0xe0>)
    25ac:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    25ae:	4f18      	ldr	r7, [pc, #96]	; (2610 <configure_usart+0xe4>)
    25b0:	683b      	ldr	r3, [r7, #0]
    25b2:	6898      	ldr	r0, [r3, #8]
    25b4:	2100      	movs	r1, #0
    25b6:	4e17      	ldr	r6, [pc, #92]	; (2614 <configure_usart+0xe8>)
    25b8:	47b0      	blx	r6
	setbuf(stdin, NULL);
    25ba:	683b      	ldr	r3, [r7, #0]
    25bc:	6858      	ldr	r0, [r3, #4]
    25be:	2100      	movs	r1, #0
    25c0:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    25c2:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    25c4:	0030      	movs	r0, r6
    25c6:	4b14      	ldr	r3, [pc, #80]	; (2618 <configure_usart+0xec>)
    25c8:	4798      	blx	r3
    25ca:	231f      	movs	r3, #31
    25cc:	4018      	ands	r0, r3
    25ce:	4084      	lsls	r4, r0
    25d0:	4b12      	ldr	r3, [pc, #72]	; (261c <configure_usart+0xf0>)
    25d2:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    25d4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    25d6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    25d8:	2b00      	cmp	r3, #0
    25da:	d1fc      	bne.n	25d6 <configure_usart+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    25dc:	6833      	ldr	r3, [r6, #0]
    25de:	2202      	movs	r2, #2
    25e0:	4313      	orrs	r3, r2
    25e2:	6033      	str	r3, [r6, #0]
}
    25e4:	b011      	add	sp, #68	; 0x44
    25e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25e8:	00140003 	.word	0x00140003
    25ec:	00150003 	.word	0x00150003
    25f0:	20000118 	.word	0x20000118
    25f4:	200000fc 	.word	0x200000fc
    25f8:	00002421 	.word	0x00002421
    25fc:	200000f8 	.word	0x200000f8
    2600:	000023f5 	.word	0x000023f5
    2604:	200000f4 	.word	0x200000f4
    2608:	42001400 	.word	0x42001400
    260c:	00001389 	.word	0x00001389
    2610:	20000024 	.word	0x20000024
    2614:	00004439 	.word	0x00004439
    2618:	000019b1 	.word	0x000019b1
    261c:	e000e100 	.word	0xe000e100

00002620 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    2620:	b570      	push	{r4, r5, r6, lr}
	usart_register_callback(&usart_instance,
    2622:	4c08      	ldr	r4, [pc, #32]	; (2644 <configure_usart_callbacks+0x24>)
    2624:	2200      	movs	r2, #0
    2626:	4908      	ldr	r1, [pc, #32]	; (2648 <configure_usart_callbacks+0x28>)
    2628:	0020      	movs	r0, r4
    262a:	4d08      	ldr	r5, [pc, #32]	; (264c <configure_usart_callbacks+0x2c>)
    262c:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    262e:	2201      	movs	r2, #1
    2630:	4907      	ldr	r1, [pc, #28]	; (2650 <configure_usart_callbacks+0x30>)
    2632:	0020      	movs	r0, r4
    2634:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    2636:	2231      	movs	r2, #49	; 0x31
    2638:	5ca3      	ldrb	r3, [r4, r2]
    263a:	2103      	movs	r1, #3
    263c:	430b      	orrs	r3, r1
    263e:	54a3      	strb	r3, [r4, r2]
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    2640:	bd70      	pop	{r4, r5, r6, pc}
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	20000118 	.word	0x20000118
    2648:	000023cd 	.word	0x000023cd
    264c:	000017a5 	.word	0x000017a5
    2650:	00002439 	.word	0x00002439

00002654 <configure_adc>:

//! [module_inst]
struct adc_module adc_instance;

void configure_adc(void)
{
    2654:	b510      	push	{r4, lr}
    2656:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    2658:	4668      	mov	r0, sp
    265a:	4b0f      	ldr	r3, [pc, #60]	; (2698 <configure_adc+0x44>)
    265c:	4798      	blx	r3
	config_adc.reference = ADC_REFERENCE_INTVCC0;
    265e:	2301      	movs	r3, #1
    2660:	466a      	mov	r2, sp
    2662:	7053      	strb	r3, [r2, #1]
	adc_init(&adc_instance, ADC, &config_adc);
    2664:	4c0d      	ldr	r4, [pc, #52]	; (269c <configure_adc+0x48>)
    2666:	490e      	ldr	r1, [pc, #56]	; (26a0 <configure_adc+0x4c>)
    2668:	0020      	movs	r0, r4
    266a:	4b0e      	ldr	r3, [pc, #56]	; (26a4 <configure_adc+0x50>)
    266c:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    266e:	6822      	ldr	r2, [r4, #0]
    2670:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    2672:	b25b      	sxtb	r3, r3
    2674:	2b00      	cmp	r3, #0
    2676:	dbfb      	blt.n	2670 <configure_adc+0x1c>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2678:	230f      	movs	r3, #15
    267a:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    267c:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    267e:	7813      	ldrb	r3, [r2, #0]
    2680:	2102      	movs	r1, #2
    2682:	430b      	orrs	r3, r1
    2684:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    2686:	4b05      	ldr	r3, [pc, #20]	; (269c <configure_adc+0x48>)
    2688:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    268a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    268c:	b25b      	sxtb	r3, r3
    268e:	2b00      	cmp	r3, #0
    2690:	dbfb      	blt.n	268a <configure_adc+0x36>
	adc_enable(&adc_instance);
}
    2692:	b00c      	add	sp, #48	; 0x30
    2694:	bd10      	pop	{r4, pc}
    2696:	46c0      	nop			; (mov r8, r8)
    2698:	00000115 	.word	0x00000115
    269c:	2000017c 	.word	0x2000017c
    26a0:	42004000 	.word	0x42004000
    26a4:	0000015d 	.word	0x0000015d

000026a8 <configure_port_pins_set>:

void configure_port_pins_set(void)
{
    26a8:	b570      	push	{r4, r5, r6, lr}
    26aa:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    26ac:	ac01      	add	r4, sp, #4
    26ae:	2501      	movs	r5, #1
    26b0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    26b2:	2300      	movs	r3, #0
    26b4:	70a3      	strb	r3, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    26b6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(PIN_PB02, &config_port_pin);
    26b8:	0021      	movs	r1, r4
    26ba:	2022      	movs	r0, #34	; 0x22
    26bc:	4e03      	ldr	r6, [pc, #12]	; (26cc <configure_port_pins_set+0x24>)
    26be:	47b0      	blx	r6
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    26c0:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(PIN_PB03, &config_port_pin);
    26c2:	0021      	movs	r1, r4
    26c4:	2023      	movs	r0, #35	; 0x23
    26c6:	47b0      	blx	r6
}
    26c8:	b002      	add	sp, #8
    26ca:	bd70      	pop	{r4, r5, r6, pc}
    26cc:	00001ae9 	.word	0x00001ae9

000026d0 <main>:
}



int main (void)
{
    26d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26d2:	46c6      	mov	lr, r8
    26d4:	b500      	push	{lr}
    26d6:	b084      	sub	sp, #16
	
	system_init();
    26d8:	4b50      	ldr	r3, [pc, #320]	; (281c <main+0x14c>)
    26da:	4798      	blx	r3
	cpu_irq_enable();
    26dc:	2201      	movs	r2, #1
    26de:	4b50      	ldr	r3, [pc, #320]	; (2820 <main+0x150>)
    26e0:	701a      	strb	r2, [r3, #0]
    26e2:	f3bf 8f5f 	dmb	sy
    26e6:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	configure_usart();
    26e8:	4b4e      	ldr	r3, [pc, #312]	; (2824 <main+0x154>)
    26ea:	4798      	blx	r3
	configure_usart_callbacks();
    26ec:	4b4e      	ldr	r3, [pc, #312]	; (2828 <main+0x158>)
    26ee:	4798      	blx	r3
	
	
	configure_adc();
    26f0:	4b4e      	ldr	r3, [pc, #312]	; (282c <main+0x15c>)
    26f2:	4798      	blx	r3
	
	configure_i2c();
    26f4:	4b4e      	ldr	r3, [pc, #312]	; (2830 <main+0x160>)
    26f6:	4798      	blx	r3
	configure_i2c_callbacks();
    26f8:	4b4e      	ldr	r3, [pc, #312]	; (2834 <main+0x164>)
    26fa:	4798      	blx	r3
	
	uint8_t string[] = "Hello World!\r\n";
    26fc:	4668      	mov	r0, sp
    26fe:	4b4e      	ldr	r3, [pc, #312]	; (2838 <main+0x168>)
    2700:	466a      	mov	r2, sp
    2702:	cb32      	ldmia	r3!, {r1, r4, r5}
    2704:	c232      	stmia	r2!, {r1, r4, r5}
    2706:	8819      	ldrh	r1, [r3, #0]
    2708:	8011      	strh	r1, [r2, #0]
    270a:	789b      	ldrb	r3, [r3, #2]
    270c:	7093      	strb	r3, [r2, #2]
	printf(string);
    270e:	4b4b      	ldr	r3, [pc, #300]	; (283c <main+0x16c>)
    2710:	4798      	blx	r3
	
	printf("ADC: \r\n");
    2712:	484b      	ldr	r0, [pc, #300]	; (2840 <main+0x170>)
    2714:	4b4b      	ldr	r3, [pc, #300]	; (2844 <main+0x174>)
    2716:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2718:	4b4b      	ldr	r3, [pc, #300]	; (2848 <main+0x178>)
    271a:	681b      	ldr	r3, [r3, #0]
    271c:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    271e:	b252      	sxtb	r2, r2
    2720:	2a00      	cmp	r2, #0
    2722:	dbfb      	blt.n	271c <main+0x4c>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2724:	7b1a      	ldrb	r2, [r3, #12]
    2726:	2102      	movs	r1, #2
    2728:	430a      	orrs	r2, r1
    272a:	731a      	strb	r2, [r3, #12]
    272c:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    272e:	b252      	sxtb	r2, r2
    2730:	2a00      	cmp	r2, #0
    2732:	dbfb      	blt.n	272c <main+0x5c>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2734:	2501      	movs	r5, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2736:	2404      	movs	r4, #4
		status_flags |= ADC_STATUS_WINDOW;
    2738:	2002      	movs	r0, #2
    273a:	e001      	b.n	2740 <main+0x70>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    273c:	4215      	tst	r5, r2
    273e:	d10a      	bne.n	2756 <main+0x86>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2740:	7e19      	ldrb	r1, [r3, #24]
    2742:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2744:	002a      	movs	r2, r5
    2746:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2748:	420c      	tst	r4, r1
    274a:	d000      	beq.n	274e <main+0x7e>
		status_flags |= ADC_STATUS_WINDOW;
    274c:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    274e:	4208      	tst	r0, r1
    2750:	d0f4      	beq.n	273c <main+0x6c>
		status_flags |= ADC_STATUS_OVERRUN;
    2752:	4322      	orrs	r2, r4
    2754:	e7f2      	b.n	273c <main+0x6c>
    2756:	7e5a      	ldrb	r2, [r3, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    2758:	b252      	sxtb	r2, r2
    275a:	2a00      	cmp	r2, #0
    275c:	dbfb      	blt.n	2756 <main+0x86>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    275e:	8b59      	ldrh	r1, [r3, #26]
    2760:	b289      	uxth	r1, r1
	adc_module->INTFLAG.reg = int_flags;
    2762:	2201      	movs	r2, #1
    2764:	761a      	strb	r2, [r3, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2766:	7e18      	ldrb	r0, [r3, #24]
    2768:	b2c0      	uxtb	r0, r0
	if (int_flags & ADC_INTFLAG_RESRDY) {
    276a:	4002      	ands	r2, r0
	if (int_flags & ADC_INTFLAG_WINMON) {
    276c:	0744      	lsls	r4, r0, #29
    276e:	d501      	bpl.n	2774 <main+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    2770:	2402      	movs	r4, #2
    2772:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2774:	0780      	lsls	r0, r0, #30
    2776:	d501      	bpl.n	277c <main+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    2778:	2004      	movs	r0, #4
    277a:	4302      	orrs	r2, r0

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    277c:	0752      	lsls	r2, r2, #29
    277e:	d501      	bpl.n	2784 <main+0xb4>
	adc_module->INTFLAG.reg = int_flags;
    2780:	2202      	movs	r2, #2
    2782:	761a      	strb	r2, [r3, #24]

	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
	
	printf("ADC value: %d\r\n",result);
    2784:	4831      	ldr	r0, [pc, #196]	; (284c <main+0x17c>)
    2786:	4b2d      	ldr	r3, [pc, #180]	; (283c <main+0x16c>)
    2788:	4798      	blx	r3
	
	printf("I2C: \r\n");
    278a:	4831      	ldr	r0, [pc, #196]	; (2850 <main+0x180>)
    278c:	4b2d      	ldr	r3, [pc, #180]	; (2844 <main+0x174>)
    278e:	4798      	blx	r3
	
	for (int slave_address = 0; slave_address < 128; slave_address++){
    2790:	2400      	movs	r4, #0
		enum status_code i2c_status;
		wr_packet.address     = slave_address;
    2792:	4d30      	ldr	r5, [pc, #192]	; (2854 <main+0x184>)
		rd_packet.address	  = slave_address;
		wr_packet.data_length = 1;
		wr_buffer[0]          = 0x05;
    2794:	4e30      	ldr	r6, [pc, #192]	; (2858 <main+0x188>)
		wr_packet.data        = wr_buffer;
    2796:	0037      	movs	r7, r6
    2798:	e005      	b.n	27a6 <main+0xd6>
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
		if( i2c_status == STATUS_OK ){ i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet); 
		printf("Address found at %#X\r\n", slave_address);
		}
		i2c_master_send_stop(&i2c_master_instance);
    279a:	4830      	ldr	r0, [pc, #192]	; (285c <main+0x18c>)
    279c:	4b30      	ldr	r3, [pc, #192]	; (2860 <main+0x190>)
    279e:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++){
    27a0:	3401      	adds	r4, #1
    27a2:	2c80      	cmp	r4, #128	; 0x80
    27a4:	d017      	beq.n	27d6 <main+0x106>
		wr_packet.address     = slave_address;
    27a6:	b2a3      	uxth	r3, r4
    27a8:	802b      	strh	r3, [r5, #0]
		rd_packet.address	  = slave_address;
    27aa:	4a2e      	ldr	r2, [pc, #184]	; (2864 <main+0x194>)
    27ac:	8013      	strh	r3, [r2, #0]
		wr_packet.data_length = 1;
    27ae:	2301      	movs	r3, #1
    27b0:	806b      	strh	r3, [r5, #2]
		wr_buffer[0]          = 0x05;
    27b2:	3304      	adds	r3, #4
    27b4:	7033      	strb	r3, [r6, #0]
		wr_packet.data        = wr_buffer;
    27b6:	606f      	str	r7, [r5, #4]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    27b8:	0029      	movs	r1, r5
    27ba:	4828      	ldr	r0, [pc, #160]	; (285c <main+0x18c>)
    27bc:	4b2a      	ldr	r3, [pc, #168]	; (2868 <main+0x198>)
    27be:	4798      	blx	r3
		if( i2c_status == STATUS_OK ){ i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet); 
    27c0:	2800      	cmp	r0, #0
    27c2:	d1ea      	bne.n	279a <main+0xca>
    27c4:	4927      	ldr	r1, [pc, #156]	; (2864 <main+0x194>)
    27c6:	4825      	ldr	r0, [pc, #148]	; (285c <main+0x18c>)
    27c8:	4b28      	ldr	r3, [pc, #160]	; (286c <main+0x19c>)
    27ca:	4798      	blx	r3
		printf("Address found at %#X\r\n", slave_address);
    27cc:	0021      	movs	r1, r4
    27ce:	4828      	ldr	r0, [pc, #160]	; (2870 <main+0x1a0>)
    27d0:	4b1a      	ldr	r3, [pc, #104]	; (283c <main+0x16c>)
    27d2:	4798      	blx	r3
    27d4:	e7e1      	b.n	279a <main+0xca>
	}
	
	printf("GPIO: \r\n");
    27d6:	4827      	ldr	r0, [pc, #156]	; (2874 <main+0x1a4>)
    27d8:	4d1a      	ldr	r5, [pc, #104]	; (2844 <main+0x174>)
    27da:	47a8      	blx	r5
	
	bool pin_state;
	
	printf("Get: \r\n");
    27dc:	4826      	ldr	r0, [pc, #152]	; (2878 <main+0x1a8>)
    27de:	47a8      	blx	r5
	configure_port_pins_set();
    27e0:	4b26      	ldr	r3, [pc, #152]	; (287c <main+0x1ac>)
    27e2:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    27e4:	4c26      	ldr	r4, [pc, #152]	; (2880 <main+0x1b0>)
    27e6:	6a23      	ldr	r3, [r4, #32]
    27e8:	6a23      	ldr	r3, [r4, #32]
    27ea:	4698      	mov	r8, r3
	pin_state = port_pin_get_input_level(PIN_PB02);
	pin_state = port_pin_get_input_level(PIN_PB03);
	
	printf("Set: \r\n");
    27ec:	4825      	ldr	r0, [pc, #148]	; (2884 <main+0x1b4>)
    27ee:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    27f0:	2704      	movs	r7, #4
    27f2:	6167      	str	r7, [r4, #20]
    27f4:	2608      	movs	r6, #8
    27f6:	6166      	str	r6, [r4, #20]
	port_pin_set_output_level(PIN_PB02, 0);
	port_pin_set_output_level(PIN_PB03, 0);



	printf("Clear: \r\n");
    27f8:	4823      	ldr	r0, [pc, #140]	; (2888 <main+0x1b8>)
    27fa:	47a8      	blx	r5
    27fc:	6167      	str	r7, [r4, #20]
		port_base->OUTSET.reg = pin_mask;
    27fe:	61a6      	str	r6, [r4, #24]
	if (level) {
    2800:	4643      	mov	r3, r8
    2802:	421e      	tst	r6, r3
    2804:	d104      	bne.n	2810 <main+0x140>
		port_base->OUTSET.reg = pin_mask;
    2806:	2280      	movs	r2, #128	; 0x80
    2808:	0412      	lsls	r2, r2, #16
    280a:	4b20      	ldr	r3, [pc, #128]	; (288c <main+0x1bc>)
    280c:	619a      	str	r2, [r3, #24]
    280e:	e7fe      	b.n	280e <main+0x13e>
		port_base->OUTCLR.reg = pin_mask;
    2810:	2280      	movs	r2, #128	; 0x80
    2812:	0412      	lsls	r2, r2, #16
    2814:	4b1d      	ldr	r3, [pc, #116]	; (288c <main+0x1bc>)
    2816:	615a      	str	r2, [r3, #20]
    2818:	e7f9      	b.n	280e <main+0x13e>
    281a:	46c0      	nop			; (mov r8, r8)
    281c:	0000227d 	.word	0x0000227d
    2820:	20000000 	.word	0x20000000
    2824:	0000252d 	.word	0x0000252d
    2828:	00002621 	.word	0x00002621
    282c:	00002655 	.word	0x00002655
    2830:	00002455 	.word	0x00002455
    2834:	00002509 	.word	0x00002509
    2838:	000055c8 	.word	0x000055c8
    283c:	00004331 	.word	0x00004331
    2840:	0000556c 	.word	0x0000556c
    2844:	00004425 	.word	0x00004425
    2848:	2000017c 	.word	0x2000017c
    284c:	000055b0 	.word	0x000055b0
    2850:	000055c0 	.word	0x000055c0
    2854:	20000018 	.word	0x20000018
    2858:	20000010 	.word	0x20000010
    285c:	20000154 	.word	0x20000154
    2860:	00000ba9 	.word	0x00000ba9
    2864:	20000004 	.word	0x20000004
    2868:	00000b85 	.word	0x00000b85
    286c:	00000b61 	.word	0x00000b61
    2870:	00005574 	.word	0x00005574
    2874:	0000558c 	.word	0x0000558c
    2878:	00005594 	.word	0x00005594
    287c:	000026a9 	.word	0x000026a9
    2880:	41004480 	.word	0x41004480
    2884:	0000559c 	.word	0x0000559c
    2888:	000055a4 	.word	0x000055a4
    288c:	41004400 	.word	0x41004400

00002890 <__udivsi3>:
    2890:	2200      	movs	r2, #0
    2892:	0843      	lsrs	r3, r0, #1
    2894:	428b      	cmp	r3, r1
    2896:	d374      	bcc.n	2982 <__udivsi3+0xf2>
    2898:	0903      	lsrs	r3, r0, #4
    289a:	428b      	cmp	r3, r1
    289c:	d35f      	bcc.n	295e <__udivsi3+0xce>
    289e:	0a03      	lsrs	r3, r0, #8
    28a0:	428b      	cmp	r3, r1
    28a2:	d344      	bcc.n	292e <__udivsi3+0x9e>
    28a4:	0b03      	lsrs	r3, r0, #12
    28a6:	428b      	cmp	r3, r1
    28a8:	d328      	bcc.n	28fc <__udivsi3+0x6c>
    28aa:	0c03      	lsrs	r3, r0, #16
    28ac:	428b      	cmp	r3, r1
    28ae:	d30d      	bcc.n	28cc <__udivsi3+0x3c>
    28b0:	22ff      	movs	r2, #255	; 0xff
    28b2:	0209      	lsls	r1, r1, #8
    28b4:	ba12      	rev	r2, r2
    28b6:	0c03      	lsrs	r3, r0, #16
    28b8:	428b      	cmp	r3, r1
    28ba:	d302      	bcc.n	28c2 <__udivsi3+0x32>
    28bc:	1212      	asrs	r2, r2, #8
    28be:	0209      	lsls	r1, r1, #8
    28c0:	d065      	beq.n	298e <__udivsi3+0xfe>
    28c2:	0b03      	lsrs	r3, r0, #12
    28c4:	428b      	cmp	r3, r1
    28c6:	d319      	bcc.n	28fc <__udivsi3+0x6c>
    28c8:	e000      	b.n	28cc <__udivsi3+0x3c>
    28ca:	0a09      	lsrs	r1, r1, #8
    28cc:	0bc3      	lsrs	r3, r0, #15
    28ce:	428b      	cmp	r3, r1
    28d0:	d301      	bcc.n	28d6 <__udivsi3+0x46>
    28d2:	03cb      	lsls	r3, r1, #15
    28d4:	1ac0      	subs	r0, r0, r3
    28d6:	4152      	adcs	r2, r2
    28d8:	0b83      	lsrs	r3, r0, #14
    28da:	428b      	cmp	r3, r1
    28dc:	d301      	bcc.n	28e2 <__udivsi3+0x52>
    28de:	038b      	lsls	r3, r1, #14
    28e0:	1ac0      	subs	r0, r0, r3
    28e2:	4152      	adcs	r2, r2
    28e4:	0b43      	lsrs	r3, r0, #13
    28e6:	428b      	cmp	r3, r1
    28e8:	d301      	bcc.n	28ee <__udivsi3+0x5e>
    28ea:	034b      	lsls	r3, r1, #13
    28ec:	1ac0      	subs	r0, r0, r3
    28ee:	4152      	adcs	r2, r2
    28f0:	0b03      	lsrs	r3, r0, #12
    28f2:	428b      	cmp	r3, r1
    28f4:	d301      	bcc.n	28fa <__udivsi3+0x6a>
    28f6:	030b      	lsls	r3, r1, #12
    28f8:	1ac0      	subs	r0, r0, r3
    28fa:	4152      	adcs	r2, r2
    28fc:	0ac3      	lsrs	r3, r0, #11
    28fe:	428b      	cmp	r3, r1
    2900:	d301      	bcc.n	2906 <__udivsi3+0x76>
    2902:	02cb      	lsls	r3, r1, #11
    2904:	1ac0      	subs	r0, r0, r3
    2906:	4152      	adcs	r2, r2
    2908:	0a83      	lsrs	r3, r0, #10
    290a:	428b      	cmp	r3, r1
    290c:	d301      	bcc.n	2912 <__udivsi3+0x82>
    290e:	028b      	lsls	r3, r1, #10
    2910:	1ac0      	subs	r0, r0, r3
    2912:	4152      	adcs	r2, r2
    2914:	0a43      	lsrs	r3, r0, #9
    2916:	428b      	cmp	r3, r1
    2918:	d301      	bcc.n	291e <__udivsi3+0x8e>
    291a:	024b      	lsls	r3, r1, #9
    291c:	1ac0      	subs	r0, r0, r3
    291e:	4152      	adcs	r2, r2
    2920:	0a03      	lsrs	r3, r0, #8
    2922:	428b      	cmp	r3, r1
    2924:	d301      	bcc.n	292a <__udivsi3+0x9a>
    2926:	020b      	lsls	r3, r1, #8
    2928:	1ac0      	subs	r0, r0, r3
    292a:	4152      	adcs	r2, r2
    292c:	d2cd      	bcs.n	28ca <__udivsi3+0x3a>
    292e:	09c3      	lsrs	r3, r0, #7
    2930:	428b      	cmp	r3, r1
    2932:	d301      	bcc.n	2938 <__udivsi3+0xa8>
    2934:	01cb      	lsls	r3, r1, #7
    2936:	1ac0      	subs	r0, r0, r3
    2938:	4152      	adcs	r2, r2
    293a:	0983      	lsrs	r3, r0, #6
    293c:	428b      	cmp	r3, r1
    293e:	d301      	bcc.n	2944 <__udivsi3+0xb4>
    2940:	018b      	lsls	r3, r1, #6
    2942:	1ac0      	subs	r0, r0, r3
    2944:	4152      	adcs	r2, r2
    2946:	0943      	lsrs	r3, r0, #5
    2948:	428b      	cmp	r3, r1
    294a:	d301      	bcc.n	2950 <__udivsi3+0xc0>
    294c:	014b      	lsls	r3, r1, #5
    294e:	1ac0      	subs	r0, r0, r3
    2950:	4152      	adcs	r2, r2
    2952:	0903      	lsrs	r3, r0, #4
    2954:	428b      	cmp	r3, r1
    2956:	d301      	bcc.n	295c <__udivsi3+0xcc>
    2958:	010b      	lsls	r3, r1, #4
    295a:	1ac0      	subs	r0, r0, r3
    295c:	4152      	adcs	r2, r2
    295e:	08c3      	lsrs	r3, r0, #3
    2960:	428b      	cmp	r3, r1
    2962:	d301      	bcc.n	2968 <__udivsi3+0xd8>
    2964:	00cb      	lsls	r3, r1, #3
    2966:	1ac0      	subs	r0, r0, r3
    2968:	4152      	adcs	r2, r2
    296a:	0883      	lsrs	r3, r0, #2
    296c:	428b      	cmp	r3, r1
    296e:	d301      	bcc.n	2974 <__udivsi3+0xe4>
    2970:	008b      	lsls	r3, r1, #2
    2972:	1ac0      	subs	r0, r0, r3
    2974:	4152      	adcs	r2, r2
    2976:	0843      	lsrs	r3, r0, #1
    2978:	428b      	cmp	r3, r1
    297a:	d301      	bcc.n	2980 <__udivsi3+0xf0>
    297c:	004b      	lsls	r3, r1, #1
    297e:	1ac0      	subs	r0, r0, r3
    2980:	4152      	adcs	r2, r2
    2982:	1a41      	subs	r1, r0, r1
    2984:	d200      	bcs.n	2988 <__udivsi3+0xf8>
    2986:	4601      	mov	r1, r0
    2988:	4152      	adcs	r2, r2
    298a:	4610      	mov	r0, r2
    298c:	4770      	bx	lr
    298e:	e7ff      	b.n	2990 <__udivsi3+0x100>
    2990:	b501      	push	{r0, lr}
    2992:	2000      	movs	r0, #0
    2994:	f000 f806 	bl	29a4 <__aeabi_idiv0>
    2998:	bd02      	pop	{r1, pc}
    299a:	46c0      	nop			; (mov r8, r8)

0000299c <__aeabi_uidivmod>:
    299c:	2900      	cmp	r1, #0
    299e:	d0f7      	beq.n	2990 <__udivsi3+0x100>
    29a0:	e776      	b.n	2890 <__udivsi3>
    29a2:	4770      	bx	lr

000029a4 <__aeabi_idiv0>:
    29a4:	4770      	bx	lr
    29a6:	46c0      	nop			; (mov r8, r8)

000029a8 <__aeabi_lmul>:
    29a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29aa:	46ce      	mov	lr, r9
    29ac:	4647      	mov	r7, r8
    29ae:	0415      	lsls	r5, r2, #16
    29b0:	0c2d      	lsrs	r5, r5, #16
    29b2:	002e      	movs	r6, r5
    29b4:	b580      	push	{r7, lr}
    29b6:	0407      	lsls	r7, r0, #16
    29b8:	0c14      	lsrs	r4, r2, #16
    29ba:	0c3f      	lsrs	r7, r7, #16
    29bc:	4699      	mov	r9, r3
    29be:	0c03      	lsrs	r3, r0, #16
    29c0:	437e      	muls	r6, r7
    29c2:	435d      	muls	r5, r3
    29c4:	4367      	muls	r7, r4
    29c6:	4363      	muls	r3, r4
    29c8:	197f      	adds	r7, r7, r5
    29ca:	0c34      	lsrs	r4, r6, #16
    29cc:	19e4      	adds	r4, r4, r7
    29ce:	469c      	mov	ip, r3
    29d0:	42a5      	cmp	r5, r4
    29d2:	d903      	bls.n	29dc <__aeabi_lmul+0x34>
    29d4:	2380      	movs	r3, #128	; 0x80
    29d6:	025b      	lsls	r3, r3, #9
    29d8:	4698      	mov	r8, r3
    29da:	44c4      	add	ip, r8
    29dc:	464b      	mov	r3, r9
    29de:	4351      	muls	r1, r2
    29e0:	4343      	muls	r3, r0
    29e2:	0436      	lsls	r6, r6, #16
    29e4:	0c36      	lsrs	r6, r6, #16
    29e6:	0c25      	lsrs	r5, r4, #16
    29e8:	0424      	lsls	r4, r4, #16
    29ea:	4465      	add	r5, ip
    29ec:	19a4      	adds	r4, r4, r6
    29ee:	1859      	adds	r1, r3, r1
    29f0:	1949      	adds	r1, r1, r5
    29f2:	0020      	movs	r0, r4
    29f4:	bc0c      	pop	{r2, r3}
    29f6:	4690      	mov	r8, r2
    29f8:	4699      	mov	r9, r3
    29fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000029fc <__aeabi_dadd>:
    29fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29fe:	4645      	mov	r5, r8
    2a00:	46de      	mov	lr, fp
    2a02:	4657      	mov	r7, sl
    2a04:	464e      	mov	r6, r9
    2a06:	030c      	lsls	r4, r1, #12
    2a08:	b5e0      	push	{r5, r6, r7, lr}
    2a0a:	004e      	lsls	r6, r1, #1
    2a0c:	0fc9      	lsrs	r1, r1, #31
    2a0e:	4688      	mov	r8, r1
    2a10:	000d      	movs	r5, r1
    2a12:	0a61      	lsrs	r1, r4, #9
    2a14:	0f44      	lsrs	r4, r0, #29
    2a16:	430c      	orrs	r4, r1
    2a18:	00c7      	lsls	r7, r0, #3
    2a1a:	0319      	lsls	r1, r3, #12
    2a1c:	0058      	lsls	r0, r3, #1
    2a1e:	0fdb      	lsrs	r3, r3, #31
    2a20:	469b      	mov	fp, r3
    2a22:	0a4b      	lsrs	r3, r1, #9
    2a24:	0f51      	lsrs	r1, r2, #29
    2a26:	430b      	orrs	r3, r1
    2a28:	0d76      	lsrs	r6, r6, #21
    2a2a:	0d40      	lsrs	r0, r0, #21
    2a2c:	0019      	movs	r1, r3
    2a2e:	00d2      	lsls	r2, r2, #3
    2a30:	45d8      	cmp	r8, fp
    2a32:	d100      	bne.n	2a36 <__aeabi_dadd+0x3a>
    2a34:	e0ae      	b.n	2b94 <__aeabi_dadd+0x198>
    2a36:	1a35      	subs	r5, r6, r0
    2a38:	2d00      	cmp	r5, #0
    2a3a:	dc00      	bgt.n	2a3e <__aeabi_dadd+0x42>
    2a3c:	e0f6      	b.n	2c2c <__aeabi_dadd+0x230>
    2a3e:	2800      	cmp	r0, #0
    2a40:	d10f      	bne.n	2a62 <__aeabi_dadd+0x66>
    2a42:	4313      	orrs	r3, r2
    2a44:	d100      	bne.n	2a48 <__aeabi_dadd+0x4c>
    2a46:	e0db      	b.n	2c00 <__aeabi_dadd+0x204>
    2a48:	1e6b      	subs	r3, r5, #1
    2a4a:	2b00      	cmp	r3, #0
    2a4c:	d000      	beq.n	2a50 <__aeabi_dadd+0x54>
    2a4e:	e137      	b.n	2cc0 <__aeabi_dadd+0x2c4>
    2a50:	1aba      	subs	r2, r7, r2
    2a52:	4297      	cmp	r7, r2
    2a54:	41bf      	sbcs	r7, r7
    2a56:	1a64      	subs	r4, r4, r1
    2a58:	427f      	negs	r7, r7
    2a5a:	1be4      	subs	r4, r4, r7
    2a5c:	2601      	movs	r6, #1
    2a5e:	0017      	movs	r7, r2
    2a60:	e024      	b.n	2aac <__aeabi_dadd+0xb0>
    2a62:	4bc6      	ldr	r3, [pc, #792]	; (2d7c <__aeabi_dadd+0x380>)
    2a64:	429e      	cmp	r6, r3
    2a66:	d04d      	beq.n	2b04 <__aeabi_dadd+0x108>
    2a68:	2380      	movs	r3, #128	; 0x80
    2a6a:	041b      	lsls	r3, r3, #16
    2a6c:	4319      	orrs	r1, r3
    2a6e:	2d38      	cmp	r5, #56	; 0x38
    2a70:	dd00      	ble.n	2a74 <__aeabi_dadd+0x78>
    2a72:	e107      	b.n	2c84 <__aeabi_dadd+0x288>
    2a74:	2d1f      	cmp	r5, #31
    2a76:	dd00      	ble.n	2a7a <__aeabi_dadd+0x7e>
    2a78:	e138      	b.n	2cec <__aeabi_dadd+0x2f0>
    2a7a:	2020      	movs	r0, #32
    2a7c:	1b43      	subs	r3, r0, r5
    2a7e:	469a      	mov	sl, r3
    2a80:	000b      	movs	r3, r1
    2a82:	4650      	mov	r0, sl
    2a84:	4083      	lsls	r3, r0
    2a86:	4699      	mov	r9, r3
    2a88:	0013      	movs	r3, r2
    2a8a:	4648      	mov	r0, r9
    2a8c:	40eb      	lsrs	r3, r5
    2a8e:	4318      	orrs	r0, r3
    2a90:	0003      	movs	r3, r0
    2a92:	4650      	mov	r0, sl
    2a94:	4082      	lsls	r2, r0
    2a96:	1e50      	subs	r0, r2, #1
    2a98:	4182      	sbcs	r2, r0
    2a9a:	40e9      	lsrs	r1, r5
    2a9c:	431a      	orrs	r2, r3
    2a9e:	1aba      	subs	r2, r7, r2
    2aa0:	1a61      	subs	r1, r4, r1
    2aa2:	4297      	cmp	r7, r2
    2aa4:	41a4      	sbcs	r4, r4
    2aa6:	0017      	movs	r7, r2
    2aa8:	4264      	negs	r4, r4
    2aaa:	1b0c      	subs	r4, r1, r4
    2aac:	0223      	lsls	r3, r4, #8
    2aae:	d562      	bpl.n	2b76 <__aeabi_dadd+0x17a>
    2ab0:	0264      	lsls	r4, r4, #9
    2ab2:	0a65      	lsrs	r5, r4, #9
    2ab4:	2d00      	cmp	r5, #0
    2ab6:	d100      	bne.n	2aba <__aeabi_dadd+0xbe>
    2ab8:	e0df      	b.n	2c7a <__aeabi_dadd+0x27e>
    2aba:	0028      	movs	r0, r5
    2abc:	f001 fbe4 	bl	4288 <__clzsi2>
    2ac0:	0003      	movs	r3, r0
    2ac2:	3b08      	subs	r3, #8
    2ac4:	2b1f      	cmp	r3, #31
    2ac6:	dd00      	ble.n	2aca <__aeabi_dadd+0xce>
    2ac8:	e0d2      	b.n	2c70 <__aeabi_dadd+0x274>
    2aca:	2220      	movs	r2, #32
    2acc:	003c      	movs	r4, r7
    2ace:	1ad2      	subs	r2, r2, r3
    2ad0:	409d      	lsls	r5, r3
    2ad2:	40d4      	lsrs	r4, r2
    2ad4:	409f      	lsls	r7, r3
    2ad6:	4325      	orrs	r5, r4
    2ad8:	429e      	cmp	r6, r3
    2ada:	dd00      	ble.n	2ade <__aeabi_dadd+0xe2>
    2adc:	e0c4      	b.n	2c68 <__aeabi_dadd+0x26c>
    2ade:	1b9e      	subs	r6, r3, r6
    2ae0:	1c73      	adds	r3, r6, #1
    2ae2:	2b1f      	cmp	r3, #31
    2ae4:	dd00      	ble.n	2ae8 <__aeabi_dadd+0xec>
    2ae6:	e0f1      	b.n	2ccc <__aeabi_dadd+0x2d0>
    2ae8:	2220      	movs	r2, #32
    2aea:	0038      	movs	r0, r7
    2aec:	0029      	movs	r1, r5
    2aee:	1ad2      	subs	r2, r2, r3
    2af0:	40d8      	lsrs	r0, r3
    2af2:	4091      	lsls	r1, r2
    2af4:	4097      	lsls	r7, r2
    2af6:	002c      	movs	r4, r5
    2af8:	4301      	orrs	r1, r0
    2afa:	1e78      	subs	r0, r7, #1
    2afc:	4187      	sbcs	r7, r0
    2afe:	40dc      	lsrs	r4, r3
    2b00:	2600      	movs	r6, #0
    2b02:	430f      	orrs	r7, r1
    2b04:	077b      	lsls	r3, r7, #29
    2b06:	d009      	beq.n	2b1c <__aeabi_dadd+0x120>
    2b08:	230f      	movs	r3, #15
    2b0a:	403b      	ands	r3, r7
    2b0c:	2b04      	cmp	r3, #4
    2b0e:	d005      	beq.n	2b1c <__aeabi_dadd+0x120>
    2b10:	1d3b      	adds	r3, r7, #4
    2b12:	42bb      	cmp	r3, r7
    2b14:	41bf      	sbcs	r7, r7
    2b16:	427f      	negs	r7, r7
    2b18:	19e4      	adds	r4, r4, r7
    2b1a:	001f      	movs	r7, r3
    2b1c:	0223      	lsls	r3, r4, #8
    2b1e:	d52c      	bpl.n	2b7a <__aeabi_dadd+0x17e>
    2b20:	4b96      	ldr	r3, [pc, #600]	; (2d7c <__aeabi_dadd+0x380>)
    2b22:	3601      	adds	r6, #1
    2b24:	429e      	cmp	r6, r3
    2b26:	d100      	bne.n	2b2a <__aeabi_dadd+0x12e>
    2b28:	e09a      	b.n	2c60 <__aeabi_dadd+0x264>
    2b2a:	4645      	mov	r5, r8
    2b2c:	4b94      	ldr	r3, [pc, #592]	; (2d80 <__aeabi_dadd+0x384>)
    2b2e:	08ff      	lsrs	r7, r7, #3
    2b30:	401c      	ands	r4, r3
    2b32:	0760      	lsls	r0, r4, #29
    2b34:	0576      	lsls	r6, r6, #21
    2b36:	0264      	lsls	r4, r4, #9
    2b38:	4307      	orrs	r7, r0
    2b3a:	0b24      	lsrs	r4, r4, #12
    2b3c:	0d76      	lsrs	r6, r6, #21
    2b3e:	2100      	movs	r1, #0
    2b40:	0324      	lsls	r4, r4, #12
    2b42:	0b23      	lsrs	r3, r4, #12
    2b44:	0d0c      	lsrs	r4, r1, #20
    2b46:	4a8f      	ldr	r2, [pc, #572]	; (2d84 <__aeabi_dadd+0x388>)
    2b48:	0524      	lsls	r4, r4, #20
    2b4a:	431c      	orrs	r4, r3
    2b4c:	4014      	ands	r4, r2
    2b4e:	0533      	lsls	r3, r6, #20
    2b50:	4323      	orrs	r3, r4
    2b52:	005b      	lsls	r3, r3, #1
    2b54:	07ed      	lsls	r5, r5, #31
    2b56:	085b      	lsrs	r3, r3, #1
    2b58:	432b      	orrs	r3, r5
    2b5a:	0038      	movs	r0, r7
    2b5c:	0019      	movs	r1, r3
    2b5e:	bc3c      	pop	{r2, r3, r4, r5}
    2b60:	4690      	mov	r8, r2
    2b62:	4699      	mov	r9, r3
    2b64:	46a2      	mov	sl, r4
    2b66:	46ab      	mov	fp, r5
    2b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b6a:	4664      	mov	r4, ip
    2b6c:	4304      	orrs	r4, r0
    2b6e:	d100      	bne.n	2b72 <__aeabi_dadd+0x176>
    2b70:	e211      	b.n	2f96 <__aeabi_dadd+0x59a>
    2b72:	0004      	movs	r4, r0
    2b74:	4667      	mov	r7, ip
    2b76:	077b      	lsls	r3, r7, #29
    2b78:	d1c6      	bne.n	2b08 <__aeabi_dadd+0x10c>
    2b7a:	4645      	mov	r5, r8
    2b7c:	0760      	lsls	r0, r4, #29
    2b7e:	08ff      	lsrs	r7, r7, #3
    2b80:	4307      	orrs	r7, r0
    2b82:	08e4      	lsrs	r4, r4, #3
    2b84:	4b7d      	ldr	r3, [pc, #500]	; (2d7c <__aeabi_dadd+0x380>)
    2b86:	429e      	cmp	r6, r3
    2b88:	d030      	beq.n	2bec <__aeabi_dadd+0x1f0>
    2b8a:	0324      	lsls	r4, r4, #12
    2b8c:	0576      	lsls	r6, r6, #21
    2b8e:	0b24      	lsrs	r4, r4, #12
    2b90:	0d76      	lsrs	r6, r6, #21
    2b92:	e7d4      	b.n	2b3e <__aeabi_dadd+0x142>
    2b94:	1a33      	subs	r3, r6, r0
    2b96:	469a      	mov	sl, r3
    2b98:	2b00      	cmp	r3, #0
    2b9a:	dd78      	ble.n	2c8e <__aeabi_dadd+0x292>
    2b9c:	2800      	cmp	r0, #0
    2b9e:	d031      	beq.n	2c04 <__aeabi_dadd+0x208>
    2ba0:	4876      	ldr	r0, [pc, #472]	; (2d7c <__aeabi_dadd+0x380>)
    2ba2:	4286      	cmp	r6, r0
    2ba4:	d0ae      	beq.n	2b04 <__aeabi_dadd+0x108>
    2ba6:	2080      	movs	r0, #128	; 0x80
    2ba8:	0400      	lsls	r0, r0, #16
    2baa:	4301      	orrs	r1, r0
    2bac:	4653      	mov	r3, sl
    2bae:	2b38      	cmp	r3, #56	; 0x38
    2bb0:	dc00      	bgt.n	2bb4 <__aeabi_dadd+0x1b8>
    2bb2:	e0e9      	b.n	2d88 <__aeabi_dadd+0x38c>
    2bb4:	430a      	orrs	r2, r1
    2bb6:	1e51      	subs	r1, r2, #1
    2bb8:	418a      	sbcs	r2, r1
    2bba:	2100      	movs	r1, #0
    2bbc:	19d2      	adds	r2, r2, r7
    2bbe:	42ba      	cmp	r2, r7
    2bc0:	41bf      	sbcs	r7, r7
    2bc2:	1909      	adds	r1, r1, r4
    2bc4:	427c      	negs	r4, r7
    2bc6:	0017      	movs	r7, r2
    2bc8:	190c      	adds	r4, r1, r4
    2bca:	0223      	lsls	r3, r4, #8
    2bcc:	d5d3      	bpl.n	2b76 <__aeabi_dadd+0x17a>
    2bce:	4b6b      	ldr	r3, [pc, #428]	; (2d7c <__aeabi_dadd+0x380>)
    2bd0:	3601      	adds	r6, #1
    2bd2:	429e      	cmp	r6, r3
    2bd4:	d100      	bne.n	2bd8 <__aeabi_dadd+0x1dc>
    2bd6:	e13a      	b.n	2e4e <__aeabi_dadd+0x452>
    2bd8:	2001      	movs	r0, #1
    2bda:	4b69      	ldr	r3, [pc, #420]	; (2d80 <__aeabi_dadd+0x384>)
    2bdc:	401c      	ands	r4, r3
    2bde:	087b      	lsrs	r3, r7, #1
    2be0:	4007      	ands	r7, r0
    2be2:	431f      	orrs	r7, r3
    2be4:	07e0      	lsls	r0, r4, #31
    2be6:	4307      	orrs	r7, r0
    2be8:	0864      	lsrs	r4, r4, #1
    2bea:	e78b      	b.n	2b04 <__aeabi_dadd+0x108>
    2bec:	0023      	movs	r3, r4
    2bee:	433b      	orrs	r3, r7
    2bf0:	d100      	bne.n	2bf4 <__aeabi_dadd+0x1f8>
    2bf2:	e1cb      	b.n	2f8c <__aeabi_dadd+0x590>
    2bf4:	2280      	movs	r2, #128	; 0x80
    2bf6:	0312      	lsls	r2, r2, #12
    2bf8:	4314      	orrs	r4, r2
    2bfa:	0324      	lsls	r4, r4, #12
    2bfc:	0b24      	lsrs	r4, r4, #12
    2bfe:	e79e      	b.n	2b3e <__aeabi_dadd+0x142>
    2c00:	002e      	movs	r6, r5
    2c02:	e77f      	b.n	2b04 <__aeabi_dadd+0x108>
    2c04:	0008      	movs	r0, r1
    2c06:	4310      	orrs	r0, r2
    2c08:	d100      	bne.n	2c0c <__aeabi_dadd+0x210>
    2c0a:	e0b4      	b.n	2d76 <__aeabi_dadd+0x37a>
    2c0c:	1e58      	subs	r0, r3, #1
    2c0e:	2800      	cmp	r0, #0
    2c10:	d000      	beq.n	2c14 <__aeabi_dadd+0x218>
    2c12:	e0de      	b.n	2dd2 <__aeabi_dadd+0x3d6>
    2c14:	18ba      	adds	r2, r7, r2
    2c16:	42ba      	cmp	r2, r7
    2c18:	419b      	sbcs	r3, r3
    2c1a:	1864      	adds	r4, r4, r1
    2c1c:	425b      	negs	r3, r3
    2c1e:	18e4      	adds	r4, r4, r3
    2c20:	0017      	movs	r7, r2
    2c22:	2601      	movs	r6, #1
    2c24:	0223      	lsls	r3, r4, #8
    2c26:	d5a6      	bpl.n	2b76 <__aeabi_dadd+0x17a>
    2c28:	2602      	movs	r6, #2
    2c2a:	e7d5      	b.n	2bd8 <__aeabi_dadd+0x1dc>
    2c2c:	2d00      	cmp	r5, #0
    2c2e:	d16e      	bne.n	2d0e <__aeabi_dadd+0x312>
    2c30:	1c70      	adds	r0, r6, #1
    2c32:	0540      	lsls	r0, r0, #21
    2c34:	0d40      	lsrs	r0, r0, #21
    2c36:	2801      	cmp	r0, #1
    2c38:	dc00      	bgt.n	2c3c <__aeabi_dadd+0x240>
    2c3a:	e0f9      	b.n	2e30 <__aeabi_dadd+0x434>
    2c3c:	1ab8      	subs	r0, r7, r2
    2c3e:	4684      	mov	ip, r0
    2c40:	4287      	cmp	r7, r0
    2c42:	4180      	sbcs	r0, r0
    2c44:	1ae5      	subs	r5, r4, r3
    2c46:	4240      	negs	r0, r0
    2c48:	1a2d      	subs	r5, r5, r0
    2c4a:	0228      	lsls	r0, r5, #8
    2c4c:	d400      	bmi.n	2c50 <__aeabi_dadd+0x254>
    2c4e:	e089      	b.n	2d64 <__aeabi_dadd+0x368>
    2c50:	1bd7      	subs	r7, r2, r7
    2c52:	42ba      	cmp	r2, r7
    2c54:	4192      	sbcs	r2, r2
    2c56:	1b1c      	subs	r4, r3, r4
    2c58:	4252      	negs	r2, r2
    2c5a:	1aa5      	subs	r5, r4, r2
    2c5c:	46d8      	mov	r8, fp
    2c5e:	e729      	b.n	2ab4 <__aeabi_dadd+0xb8>
    2c60:	4645      	mov	r5, r8
    2c62:	2400      	movs	r4, #0
    2c64:	2700      	movs	r7, #0
    2c66:	e76a      	b.n	2b3e <__aeabi_dadd+0x142>
    2c68:	4c45      	ldr	r4, [pc, #276]	; (2d80 <__aeabi_dadd+0x384>)
    2c6a:	1af6      	subs	r6, r6, r3
    2c6c:	402c      	ands	r4, r5
    2c6e:	e749      	b.n	2b04 <__aeabi_dadd+0x108>
    2c70:	003d      	movs	r5, r7
    2c72:	3828      	subs	r0, #40	; 0x28
    2c74:	4085      	lsls	r5, r0
    2c76:	2700      	movs	r7, #0
    2c78:	e72e      	b.n	2ad8 <__aeabi_dadd+0xdc>
    2c7a:	0038      	movs	r0, r7
    2c7c:	f001 fb04 	bl	4288 <__clzsi2>
    2c80:	3020      	adds	r0, #32
    2c82:	e71d      	b.n	2ac0 <__aeabi_dadd+0xc4>
    2c84:	430a      	orrs	r2, r1
    2c86:	1e51      	subs	r1, r2, #1
    2c88:	418a      	sbcs	r2, r1
    2c8a:	2100      	movs	r1, #0
    2c8c:	e707      	b.n	2a9e <__aeabi_dadd+0xa2>
    2c8e:	2b00      	cmp	r3, #0
    2c90:	d000      	beq.n	2c94 <__aeabi_dadd+0x298>
    2c92:	e0f3      	b.n	2e7c <__aeabi_dadd+0x480>
    2c94:	1c70      	adds	r0, r6, #1
    2c96:	0543      	lsls	r3, r0, #21
    2c98:	0d5b      	lsrs	r3, r3, #21
    2c9a:	2b01      	cmp	r3, #1
    2c9c:	dc00      	bgt.n	2ca0 <__aeabi_dadd+0x2a4>
    2c9e:	e0ad      	b.n	2dfc <__aeabi_dadd+0x400>
    2ca0:	4b36      	ldr	r3, [pc, #216]	; (2d7c <__aeabi_dadd+0x380>)
    2ca2:	4298      	cmp	r0, r3
    2ca4:	d100      	bne.n	2ca8 <__aeabi_dadd+0x2ac>
    2ca6:	e0d1      	b.n	2e4c <__aeabi_dadd+0x450>
    2ca8:	18ba      	adds	r2, r7, r2
    2caa:	42ba      	cmp	r2, r7
    2cac:	41bf      	sbcs	r7, r7
    2cae:	1864      	adds	r4, r4, r1
    2cb0:	427f      	negs	r7, r7
    2cb2:	19e4      	adds	r4, r4, r7
    2cb4:	07e7      	lsls	r7, r4, #31
    2cb6:	0852      	lsrs	r2, r2, #1
    2cb8:	4317      	orrs	r7, r2
    2cba:	0864      	lsrs	r4, r4, #1
    2cbc:	0006      	movs	r6, r0
    2cbe:	e721      	b.n	2b04 <__aeabi_dadd+0x108>
    2cc0:	482e      	ldr	r0, [pc, #184]	; (2d7c <__aeabi_dadd+0x380>)
    2cc2:	4285      	cmp	r5, r0
    2cc4:	d100      	bne.n	2cc8 <__aeabi_dadd+0x2cc>
    2cc6:	e093      	b.n	2df0 <__aeabi_dadd+0x3f4>
    2cc8:	001d      	movs	r5, r3
    2cca:	e6d0      	b.n	2a6e <__aeabi_dadd+0x72>
    2ccc:	0029      	movs	r1, r5
    2cce:	3e1f      	subs	r6, #31
    2cd0:	40f1      	lsrs	r1, r6
    2cd2:	2b20      	cmp	r3, #32
    2cd4:	d100      	bne.n	2cd8 <__aeabi_dadd+0x2dc>
    2cd6:	e08d      	b.n	2df4 <__aeabi_dadd+0x3f8>
    2cd8:	2240      	movs	r2, #64	; 0x40
    2cda:	1ad3      	subs	r3, r2, r3
    2cdc:	409d      	lsls	r5, r3
    2cde:	432f      	orrs	r7, r5
    2ce0:	1e7d      	subs	r5, r7, #1
    2ce2:	41af      	sbcs	r7, r5
    2ce4:	2400      	movs	r4, #0
    2ce6:	430f      	orrs	r7, r1
    2ce8:	2600      	movs	r6, #0
    2cea:	e744      	b.n	2b76 <__aeabi_dadd+0x17a>
    2cec:	002b      	movs	r3, r5
    2cee:	0008      	movs	r0, r1
    2cf0:	3b20      	subs	r3, #32
    2cf2:	40d8      	lsrs	r0, r3
    2cf4:	0003      	movs	r3, r0
    2cf6:	2d20      	cmp	r5, #32
    2cf8:	d100      	bne.n	2cfc <__aeabi_dadd+0x300>
    2cfa:	e07d      	b.n	2df8 <__aeabi_dadd+0x3fc>
    2cfc:	2040      	movs	r0, #64	; 0x40
    2cfe:	1b45      	subs	r5, r0, r5
    2d00:	40a9      	lsls	r1, r5
    2d02:	430a      	orrs	r2, r1
    2d04:	1e51      	subs	r1, r2, #1
    2d06:	418a      	sbcs	r2, r1
    2d08:	2100      	movs	r1, #0
    2d0a:	431a      	orrs	r2, r3
    2d0c:	e6c7      	b.n	2a9e <__aeabi_dadd+0xa2>
    2d0e:	2e00      	cmp	r6, #0
    2d10:	d050      	beq.n	2db4 <__aeabi_dadd+0x3b8>
    2d12:	4e1a      	ldr	r6, [pc, #104]	; (2d7c <__aeabi_dadd+0x380>)
    2d14:	42b0      	cmp	r0, r6
    2d16:	d057      	beq.n	2dc8 <__aeabi_dadd+0x3cc>
    2d18:	2680      	movs	r6, #128	; 0x80
    2d1a:	426b      	negs	r3, r5
    2d1c:	4699      	mov	r9, r3
    2d1e:	0436      	lsls	r6, r6, #16
    2d20:	4334      	orrs	r4, r6
    2d22:	464b      	mov	r3, r9
    2d24:	2b38      	cmp	r3, #56	; 0x38
    2d26:	dd00      	ble.n	2d2a <__aeabi_dadd+0x32e>
    2d28:	e0d6      	b.n	2ed8 <__aeabi_dadd+0x4dc>
    2d2a:	2b1f      	cmp	r3, #31
    2d2c:	dd00      	ble.n	2d30 <__aeabi_dadd+0x334>
    2d2e:	e135      	b.n	2f9c <__aeabi_dadd+0x5a0>
    2d30:	2620      	movs	r6, #32
    2d32:	1af5      	subs	r5, r6, r3
    2d34:	0026      	movs	r6, r4
    2d36:	40ae      	lsls	r6, r5
    2d38:	46b2      	mov	sl, r6
    2d3a:	003e      	movs	r6, r7
    2d3c:	40de      	lsrs	r6, r3
    2d3e:	46ac      	mov	ip, r5
    2d40:	0035      	movs	r5, r6
    2d42:	4656      	mov	r6, sl
    2d44:	432e      	orrs	r6, r5
    2d46:	4665      	mov	r5, ip
    2d48:	40af      	lsls	r7, r5
    2d4a:	1e7d      	subs	r5, r7, #1
    2d4c:	41af      	sbcs	r7, r5
    2d4e:	40dc      	lsrs	r4, r3
    2d50:	4337      	orrs	r7, r6
    2d52:	1bd7      	subs	r7, r2, r7
    2d54:	42ba      	cmp	r2, r7
    2d56:	4192      	sbcs	r2, r2
    2d58:	1b0c      	subs	r4, r1, r4
    2d5a:	4252      	negs	r2, r2
    2d5c:	1aa4      	subs	r4, r4, r2
    2d5e:	0006      	movs	r6, r0
    2d60:	46d8      	mov	r8, fp
    2d62:	e6a3      	b.n	2aac <__aeabi_dadd+0xb0>
    2d64:	4664      	mov	r4, ip
    2d66:	4667      	mov	r7, ip
    2d68:	432c      	orrs	r4, r5
    2d6a:	d000      	beq.n	2d6e <__aeabi_dadd+0x372>
    2d6c:	e6a2      	b.n	2ab4 <__aeabi_dadd+0xb8>
    2d6e:	2500      	movs	r5, #0
    2d70:	2600      	movs	r6, #0
    2d72:	2700      	movs	r7, #0
    2d74:	e706      	b.n	2b84 <__aeabi_dadd+0x188>
    2d76:	001e      	movs	r6, r3
    2d78:	e6c4      	b.n	2b04 <__aeabi_dadd+0x108>
    2d7a:	46c0      	nop			; (mov r8, r8)
    2d7c:	000007ff 	.word	0x000007ff
    2d80:	ff7fffff 	.word	0xff7fffff
    2d84:	800fffff 	.word	0x800fffff
    2d88:	2b1f      	cmp	r3, #31
    2d8a:	dc63      	bgt.n	2e54 <__aeabi_dadd+0x458>
    2d8c:	2020      	movs	r0, #32
    2d8e:	1ac3      	subs	r3, r0, r3
    2d90:	0008      	movs	r0, r1
    2d92:	4098      	lsls	r0, r3
    2d94:	469c      	mov	ip, r3
    2d96:	4683      	mov	fp, r0
    2d98:	4653      	mov	r3, sl
    2d9a:	0010      	movs	r0, r2
    2d9c:	40d8      	lsrs	r0, r3
    2d9e:	0003      	movs	r3, r0
    2da0:	4658      	mov	r0, fp
    2da2:	4318      	orrs	r0, r3
    2da4:	4663      	mov	r3, ip
    2da6:	409a      	lsls	r2, r3
    2da8:	1e53      	subs	r3, r2, #1
    2daa:	419a      	sbcs	r2, r3
    2dac:	4653      	mov	r3, sl
    2dae:	4302      	orrs	r2, r0
    2db0:	40d9      	lsrs	r1, r3
    2db2:	e703      	b.n	2bbc <__aeabi_dadd+0x1c0>
    2db4:	0026      	movs	r6, r4
    2db6:	433e      	orrs	r6, r7
    2db8:	d006      	beq.n	2dc8 <__aeabi_dadd+0x3cc>
    2dba:	43eb      	mvns	r3, r5
    2dbc:	4699      	mov	r9, r3
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d0c7      	beq.n	2d52 <__aeabi_dadd+0x356>
    2dc2:	4e94      	ldr	r6, [pc, #592]	; (3014 <__aeabi_dadd+0x618>)
    2dc4:	42b0      	cmp	r0, r6
    2dc6:	d1ac      	bne.n	2d22 <__aeabi_dadd+0x326>
    2dc8:	000c      	movs	r4, r1
    2dca:	0017      	movs	r7, r2
    2dcc:	0006      	movs	r6, r0
    2dce:	46d8      	mov	r8, fp
    2dd0:	e698      	b.n	2b04 <__aeabi_dadd+0x108>
    2dd2:	4b90      	ldr	r3, [pc, #576]	; (3014 <__aeabi_dadd+0x618>)
    2dd4:	459a      	cmp	sl, r3
    2dd6:	d00b      	beq.n	2df0 <__aeabi_dadd+0x3f4>
    2dd8:	4682      	mov	sl, r0
    2dda:	e6e7      	b.n	2bac <__aeabi_dadd+0x1b0>
    2ddc:	2800      	cmp	r0, #0
    2dde:	d000      	beq.n	2de2 <__aeabi_dadd+0x3e6>
    2de0:	e09e      	b.n	2f20 <__aeabi_dadd+0x524>
    2de2:	0018      	movs	r0, r3
    2de4:	4310      	orrs	r0, r2
    2de6:	d100      	bne.n	2dea <__aeabi_dadd+0x3ee>
    2de8:	e0e9      	b.n	2fbe <__aeabi_dadd+0x5c2>
    2dea:	001c      	movs	r4, r3
    2dec:	0017      	movs	r7, r2
    2dee:	46d8      	mov	r8, fp
    2df0:	4e88      	ldr	r6, [pc, #544]	; (3014 <__aeabi_dadd+0x618>)
    2df2:	e687      	b.n	2b04 <__aeabi_dadd+0x108>
    2df4:	2500      	movs	r5, #0
    2df6:	e772      	b.n	2cde <__aeabi_dadd+0x2e2>
    2df8:	2100      	movs	r1, #0
    2dfa:	e782      	b.n	2d02 <__aeabi_dadd+0x306>
    2dfc:	0023      	movs	r3, r4
    2dfe:	433b      	orrs	r3, r7
    2e00:	2e00      	cmp	r6, #0
    2e02:	d000      	beq.n	2e06 <__aeabi_dadd+0x40a>
    2e04:	e0ab      	b.n	2f5e <__aeabi_dadd+0x562>
    2e06:	2b00      	cmp	r3, #0
    2e08:	d100      	bne.n	2e0c <__aeabi_dadd+0x410>
    2e0a:	e0e7      	b.n	2fdc <__aeabi_dadd+0x5e0>
    2e0c:	000b      	movs	r3, r1
    2e0e:	4313      	orrs	r3, r2
    2e10:	d100      	bne.n	2e14 <__aeabi_dadd+0x418>
    2e12:	e677      	b.n	2b04 <__aeabi_dadd+0x108>
    2e14:	18ba      	adds	r2, r7, r2
    2e16:	42ba      	cmp	r2, r7
    2e18:	41bf      	sbcs	r7, r7
    2e1a:	1864      	adds	r4, r4, r1
    2e1c:	427f      	negs	r7, r7
    2e1e:	19e4      	adds	r4, r4, r7
    2e20:	0223      	lsls	r3, r4, #8
    2e22:	d400      	bmi.n	2e26 <__aeabi_dadd+0x42a>
    2e24:	e0f2      	b.n	300c <__aeabi_dadd+0x610>
    2e26:	4b7c      	ldr	r3, [pc, #496]	; (3018 <__aeabi_dadd+0x61c>)
    2e28:	0017      	movs	r7, r2
    2e2a:	401c      	ands	r4, r3
    2e2c:	0006      	movs	r6, r0
    2e2e:	e669      	b.n	2b04 <__aeabi_dadd+0x108>
    2e30:	0020      	movs	r0, r4
    2e32:	4338      	orrs	r0, r7
    2e34:	2e00      	cmp	r6, #0
    2e36:	d1d1      	bne.n	2ddc <__aeabi_dadd+0x3e0>
    2e38:	2800      	cmp	r0, #0
    2e3a:	d15b      	bne.n	2ef4 <__aeabi_dadd+0x4f8>
    2e3c:	001c      	movs	r4, r3
    2e3e:	4314      	orrs	r4, r2
    2e40:	d100      	bne.n	2e44 <__aeabi_dadd+0x448>
    2e42:	e0a8      	b.n	2f96 <__aeabi_dadd+0x59a>
    2e44:	001c      	movs	r4, r3
    2e46:	0017      	movs	r7, r2
    2e48:	46d8      	mov	r8, fp
    2e4a:	e65b      	b.n	2b04 <__aeabi_dadd+0x108>
    2e4c:	0006      	movs	r6, r0
    2e4e:	2400      	movs	r4, #0
    2e50:	2700      	movs	r7, #0
    2e52:	e697      	b.n	2b84 <__aeabi_dadd+0x188>
    2e54:	4650      	mov	r0, sl
    2e56:	000b      	movs	r3, r1
    2e58:	3820      	subs	r0, #32
    2e5a:	40c3      	lsrs	r3, r0
    2e5c:	4699      	mov	r9, r3
    2e5e:	4653      	mov	r3, sl
    2e60:	2b20      	cmp	r3, #32
    2e62:	d100      	bne.n	2e66 <__aeabi_dadd+0x46a>
    2e64:	e095      	b.n	2f92 <__aeabi_dadd+0x596>
    2e66:	2340      	movs	r3, #64	; 0x40
    2e68:	4650      	mov	r0, sl
    2e6a:	1a1b      	subs	r3, r3, r0
    2e6c:	4099      	lsls	r1, r3
    2e6e:	430a      	orrs	r2, r1
    2e70:	1e51      	subs	r1, r2, #1
    2e72:	418a      	sbcs	r2, r1
    2e74:	464b      	mov	r3, r9
    2e76:	2100      	movs	r1, #0
    2e78:	431a      	orrs	r2, r3
    2e7a:	e69f      	b.n	2bbc <__aeabi_dadd+0x1c0>
    2e7c:	2e00      	cmp	r6, #0
    2e7e:	d130      	bne.n	2ee2 <__aeabi_dadd+0x4e6>
    2e80:	0026      	movs	r6, r4
    2e82:	433e      	orrs	r6, r7
    2e84:	d067      	beq.n	2f56 <__aeabi_dadd+0x55a>
    2e86:	43db      	mvns	r3, r3
    2e88:	469a      	mov	sl, r3
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d01c      	beq.n	2ec8 <__aeabi_dadd+0x4cc>
    2e8e:	4e61      	ldr	r6, [pc, #388]	; (3014 <__aeabi_dadd+0x618>)
    2e90:	42b0      	cmp	r0, r6
    2e92:	d060      	beq.n	2f56 <__aeabi_dadd+0x55a>
    2e94:	4653      	mov	r3, sl
    2e96:	2b38      	cmp	r3, #56	; 0x38
    2e98:	dd00      	ble.n	2e9c <__aeabi_dadd+0x4a0>
    2e9a:	e096      	b.n	2fca <__aeabi_dadd+0x5ce>
    2e9c:	2b1f      	cmp	r3, #31
    2e9e:	dd00      	ble.n	2ea2 <__aeabi_dadd+0x4a6>
    2ea0:	e09f      	b.n	2fe2 <__aeabi_dadd+0x5e6>
    2ea2:	2620      	movs	r6, #32
    2ea4:	1af3      	subs	r3, r6, r3
    2ea6:	0026      	movs	r6, r4
    2ea8:	409e      	lsls	r6, r3
    2eaa:	469c      	mov	ip, r3
    2eac:	46b3      	mov	fp, r6
    2eae:	4653      	mov	r3, sl
    2eb0:	003e      	movs	r6, r7
    2eb2:	40de      	lsrs	r6, r3
    2eb4:	0033      	movs	r3, r6
    2eb6:	465e      	mov	r6, fp
    2eb8:	431e      	orrs	r6, r3
    2eba:	4663      	mov	r3, ip
    2ebc:	409f      	lsls	r7, r3
    2ebe:	1e7b      	subs	r3, r7, #1
    2ec0:	419f      	sbcs	r7, r3
    2ec2:	4653      	mov	r3, sl
    2ec4:	40dc      	lsrs	r4, r3
    2ec6:	4337      	orrs	r7, r6
    2ec8:	18bf      	adds	r7, r7, r2
    2eca:	4297      	cmp	r7, r2
    2ecc:	4192      	sbcs	r2, r2
    2ece:	1864      	adds	r4, r4, r1
    2ed0:	4252      	negs	r2, r2
    2ed2:	18a4      	adds	r4, r4, r2
    2ed4:	0006      	movs	r6, r0
    2ed6:	e678      	b.n	2bca <__aeabi_dadd+0x1ce>
    2ed8:	4327      	orrs	r7, r4
    2eda:	1e7c      	subs	r4, r7, #1
    2edc:	41a7      	sbcs	r7, r4
    2ede:	2400      	movs	r4, #0
    2ee0:	e737      	b.n	2d52 <__aeabi_dadd+0x356>
    2ee2:	4e4c      	ldr	r6, [pc, #304]	; (3014 <__aeabi_dadd+0x618>)
    2ee4:	42b0      	cmp	r0, r6
    2ee6:	d036      	beq.n	2f56 <__aeabi_dadd+0x55a>
    2ee8:	2680      	movs	r6, #128	; 0x80
    2eea:	425b      	negs	r3, r3
    2eec:	0436      	lsls	r6, r6, #16
    2eee:	469a      	mov	sl, r3
    2ef0:	4334      	orrs	r4, r6
    2ef2:	e7cf      	b.n	2e94 <__aeabi_dadd+0x498>
    2ef4:	0018      	movs	r0, r3
    2ef6:	4310      	orrs	r0, r2
    2ef8:	d100      	bne.n	2efc <__aeabi_dadd+0x500>
    2efa:	e603      	b.n	2b04 <__aeabi_dadd+0x108>
    2efc:	1ab8      	subs	r0, r7, r2
    2efe:	4684      	mov	ip, r0
    2f00:	4567      	cmp	r7, ip
    2f02:	41ad      	sbcs	r5, r5
    2f04:	1ae0      	subs	r0, r4, r3
    2f06:	426d      	negs	r5, r5
    2f08:	1b40      	subs	r0, r0, r5
    2f0a:	0205      	lsls	r5, r0, #8
    2f0c:	d400      	bmi.n	2f10 <__aeabi_dadd+0x514>
    2f0e:	e62c      	b.n	2b6a <__aeabi_dadd+0x16e>
    2f10:	1bd7      	subs	r7, r2, r7
    2f12:	42ba      	cmp	r2, r7
    2f14:	4192      	sbcs	r2, r2
    2f16:	1b1c      	subs	r4, r3, r4
    2f18:	4252      	negs	r2, r2
    2f1a:	1aa4      	subs	r4, r4, r2
    2f1c:	46d8      	mov	r8, fp
    2f1e:	e5f1      	b.n	2b04 <__aeabi_dadd+0x108>
    2f20:	0018      	movs	r0, r3
    2f22:	4310      	orrs	r0, r2
    2f24:	d100      	bne.n	2f28 <__aeabi_dadd+0x52c>
    2f26:	e763      	b.n	2df0 <__aeabi_dadd+0x3f4>
    2f28:	08f8      	lsrs	r0, r7, #3
    2f2a:	0767      	lsls	r7, r4, #29
    2f2c:	4307      	orrs	r7, r0
    2f2e:	2080      	movs	r0, #128	; 0x80
    2f30:	08e4      	lsrs	r4, r4, #3
    2f32:	0300      	lsls	r0, r0, #12
    2f34:	4204      	tst	r4, r0
    2f36:	d008      	beq.n	2f4a <__aeabi_dadd+0x54e>
    2f38:	08dd      	lsrs	r5, r3, #3
    2f3a:	4205      	tst	r5, r0
    2f3c:	d105      	bne.n	2f4a <__aeabi_dadd+0x54e>
    2f3e:	08d2      	lsrs	r2, r2, #3
    2f40:	0759      	lsls	r1, r3, #29
    2f42:	4311      	orrs	r1, r2
    2f44:	000f      	movs	r7, r1
    2f46:	002c      	movs	r4, r5
    2f48:	46d8      	mov	r8, fp
    2f4a:	0f7b      	lsrs	r3, r7, #29
    2f4c:	00e4      	lsls	r4, r4, #3
    2f4e:	431c      	orrs	r4, r3
    2f50:	00ff      	lsls	r7, r7, #3
    2f52:	4e30      	ldr	r6, [pc, #192]	; (3014 <__aeabi_dadd+0x618>)
    2f54:	e5d6      	b.n	2b04 <__aeabi_dadd+0x108>
    2f56:	000c      	movs	r4, r1
    2f58:	0017      	movs	r7, r2
    2f5a:	0006      	movs	r6, r0
    2f5c:	e5d2      	b.n	2b04 <__aeabi_dadd+0x108>
    2f5e:	2b00      	cmp	r3, #0
    2f60:	d038      	beq.n	2fd4 <__aeabi_dadd+0x5d8>
    2f62:	000b      	movs	r3, r1
    2f64:	4313      	orrs	r3, r2
    2f66:	d100      	bne.n	2f6a <__aeabi_dadd+0x56e>
    2f68:	e742      	b.n	2df0 <__aeabi_dadd+0x3f4>
    2f6a:	08f8      	lsrs	r0, r7, #3
    2f6c:	0767      	lsls	r7, r4, #29
    2f6e:	4307      	orrs	r7, r0
    2f70:	2080      	movs	r0, #128	; 0x80
    2f72:	08e4      	lsrs	r4, r4, #3
    2f74:	0300      	lsls	r0, r0, #12
    2f76:	4204      	tst	r4, r0
    2f78:	d0e7      	beq.n	2f4a <__aeabi_dadd+0x54e>
    2f7a:	08cb      	lsrs	r3, r1, #3
    2f7c:	4203      	tst	r3, r0
    2f7e:	d1e4      	bne.n	2f4a <__aeabi_dadd+0x54e>
    2f80:	08d2      	lsrs	r2, r2, #3
    2f82:	0749      	lsls	r1, r1, #29
    2f84:	4311      	orrs	r1, r2
    2f86:	000f      	movs	r7, r1
    2f88:	001c      	movs	r4, r3
    2f8a:	e7de      	b.n	2f4a <__aeabi_dadd+0x54e>
    2f8c:	2700      	movs	r7, #0
    2f8e:	2400      	movs	r4, #0
    2f90:	e5d5      	b.n	2b3e <__aeabi_dadd+0x142>
    2f92:	2100      	movs	r1, #0
    2f94:	e76b      	b.n	2e6e <__aeabi_dadd+0x472>
    2f96:	2500      	movs	r5, #0
    2f98:	2700      	movs	r7, #0
    2f9a:	e5f3      	b.n	2b84 <__aeabi_dadd+0x188>
    2f9c:	464e      	mov	r6, r9
    2f9e:	0025      	movs	r5, r4
    2fa0:	3e20      	subs	r6, #32
    2fa2:	40f5      	lsrs	r5, r6
    2fa4:	464b      	mov	r3, r9
    2fa6:	002e      	movs	r6, r5
    2fa8:	2b20      	cmp	r3, #32
    2faa:	d02d      	beq.n	3008 <__aeabi_dadd+0x60c>
    2fac:	2540      	movs	r5, #64	; 0x40
    2fae:	1aed      	subs	r5, r5, r3
    2fb0:	40ac      	lsls	r4, r5
    2fb2:	4327      	orrs	r7, r4
    2fb4:	1e7c      	subs	r4, r7, #1
    2fb6:	41a7      	sbcs	r7, r4
    2fb8:	2400      	movs	r4, #0
    2fba:	4337      	orrs	r7, r6
    2fbc:	e6c9      	b.n	2d52 <__aeabi_dadd+0x356>
    2fbe:	2480      	movs	r4, #128	; 0x80
    2fc0:	2500      	movs	r5, #0
    2fc2:	0324      	lsls	r4, r4, #12
    2fc4:	4e13      	ldr	r6, [pc, #76]	; (3014 <__aeabi_dadd+0x618>)
    2fc6:	2700      	movs	r7, #0
    2fc8:	e5dc      	b.n	2b84 <__aeabi_dadd+0x188>
    2fca:	4327      	orrs	r7, r4
    2fcc:	1e7c      	subs	r4, r7, #1
    2fce:	41a7      	sbcs	r7, r4
    2fd0:	2400      	movs	r4, #0
    2fd2:	e779      	b.n	2ec8 <__aeabi_dadd+0x4cc>
    2fd4:	000c      	movs	r4, r1
    2fd6:	0017      	movs	r7, r2
    2fd8:	4e0e      	ldr	r6, [pc, #56]	; (3014 <__aeabi_dadd+0x618>)
    2fda:	e593      	b.n	2b04 <__aeabi_dadd+0x108>
    2fdc:	000c      	movs	r4, r1
    2fde:	0017      	movs	r7, r2
    2fe0:	e590      	b.n	2b04 <__aeabi_dadd+0x108>
    2fe2:	4656      	mov	r6, sl
    2fe4:	0023      	movs	r3, r4
    2fe6:	3e20      	subs	r6, #32
    2fe8:	40f3      	lsrs	r3, r6
    2fea:	4699      	mov	r9, r3
    2fec:	4653      	mov	r3, sl
    2fee:	2b20      	cmp	r3, #32
    2ff0:	d00e      	beq.n	3010 <__aeabi_dadd+0x614>
    2ff2:	2340      	movs	r3, #64	; 0x40
    2ff4:	4656      	mov	r6, sl
    2ff6:	1b9b      	subs	r3, r3, r6
    2ff8:	409c      	lsls	r4, r3
    2ffa:	4327      	orrs	r7, r4
    2ffc:	1e7c      	subs	r4, r7, #1
    2ffe:	41a7      	sbcs	r7, r4
    3000:	464b      	mov	r3, r9
    3002:	2400      	movs	r4, #0
    3004:	431f      	orrs	r7, r3
    3006:	e75f      	b.n	2ec8 <__aeabi_dadd+0x4cc>
    3008:	2400      	movs	r4, #0
    300a:	e7d2      	b.n	2fb2 <__aeabi_dadd+0x5b6>
    300c:	0017      	movs	r7, r2
    300e:	e5b2      	b.n	2b76 <__aeabi_dadd+0x17a>
    3010:	2400      	movs	r4, #0
    3012:	e7f2      	b.n	2ffa <__aeabi_dadd+0x5fe>
    3014:	000007ff 	.word	0x000007ff
    3018:	ff7fffff 	.word	0xff7fffff

0000301c <__aeabi_ddiv>:
    301c:	b5f0      	push	{r4, r5, r6, r7, lr}
    301e:	4657      	mov	r7, sl
    3020:	4645      	mov	r5, r8
    3022:	46de      	mov	lr, fp
    3024:	464e      	mov	r6, r9
    3026:	b5e0      	push	{r5, r6, r7, lr}
    3028:	004c      	lsls	r4, r1, #1
    302a:	030e      	lsls	r6, r1, #12
    302c:	b087      	sub	sp, #28
    302e:	4683      	mov	fp, r0
    3030:	4692      	mov	sl, r2
    3032:	001d      	movs	r5, r3
    3034:	4680      	mov	r8, r0
    3036:	0b36      	lsrs	r6, r6, #12
    3038:	0d64      	lsrs	r4, r4, #21
    303a:	0fcf      	lsrs	r7, r1, #31
    303c:	2c00      	cmp	r4, #0
    303e:	d04f      	beq.n	30e0 <__aeabi_ddiv+0xc4>
    3040:	4b6f      	ldr	r3, [pc, #444]	; (3200 <__aeabi_ddiv+0x1e4>)
    3042:	429c      	cmp	r4, r3
    3044:	d035      	beq.n	30b2 <__aeabi_ddiv+0x96>
    3046:	2380      	movs	r3, #128	; 0x80
    3048:	0f42      	lsrs	r2, r0, #29
    304a:	041b      	lsls	r3, r3, #16
    304c:	00f6      	lsls	r6, r6, #3
    304e:	4313      	orrs	r3, r2
    3050:	4333      	orrs	r3, r6
    3052:	4699      	mov	r9, r3
    3054:	00c3      	lsls	r3, r0, #3
    3056:	4698      	mov	r8, r3
    3058:	4b6a      	ldr	r3, [pc, #424]	; (3204 <__aeabi_ddiv+0x1e8>)
    305a:	2600      	movs	r6, #0
    305c:	469c      	mov	ip, r3
    305e:	2300      	movs	r3, #0
    3060:	4464      	add	r4, ip
    3062:	9303      	str	r3, [sp, #12]
    3064:	032b      	lsls	r3, r5, #12
    3066:	0b1b      	lsrs	r3, r3, #12
    3068:	469b      	mov	fp, r3
    306a:	006b      	lsls	r3, r5, #1
    306c:	0fed      	lsrs	r5, r5, #31
    306e:	4650      	mov	r0, sl
    3070:	0d5b      	lsrs	r3, r3, #21
    3072:	9501      	str	r5, [sp, #4]
    3074:	d05e      	beq.n	3134 <__aeabi_ddiv+0x118>
    3076:	4a62      	ldr	r2, [pc, #392]	; (3200 <__aeabi_ddiv+0x1e4>)
    3078:	4293      	cmp	r3, r2
    307a:	d053      	beq.n	3124 <__aeabi_ddiv+0x108>
    307c:	465a      	mov	r2, fp
    307e:	00d1      	lsls	r1, r2, #3
    3080:	2280      	movs	r2, #128	; 0x80
    3082:	0f40      	lsrs	r0, r0, #29
    3084:	0412      	lsls	r2, r2, #16
    3086:	4302      	orrs	r2, r0
    3088:	430a      	orrs	r2, r1
    308a:	4693      	mov	fp, r2
    308c:	4652      	mov	r2, sl
    308e:	00d1      	lsls	r1, r2, #3
    3090:	4a5c      	ldr	r2, [pc, #368]	; (3204 <__aeabi_ddiv+0x1e8>)
    3092:	4694      	mov	ip, r2
    3094:	2200      	movs	r2, #0
    3096:	4463      	add	r3, ip
    3098:	0038      	movs	r0, r7
    309a:	4068      	eors	r0, r5
    309c:	4684      	mov	ip, r0
    309e:	9002      	str	r0, [sp, #8]
    30a0:	1ae4      	subs	r4, r4, r3
    30a2:	4316      	orrs	r6, r2
    30a4:	2e0f      	cmp	r6, #15
    30a6:	d900      	bls.n	30aa <__aeabi_ddiv+0x8e>
    30a8:	e0b4      	b.n	3214 <__aeabi_ddiv+0x1f8>
    30aa:	4b57      	ldr	r3, [pc, #348]	; (3208 <__aeabi_ddiv+0x1ec>)
    30ac:	00b6      	lsls	r6, r6, #2
    30ae:	599b      	ldr	r3, [r3, r6]
    30b0:	469f      	mov	pc, r3
    30b2:	0003      	movs	r3, r0
    30b4:	4333      	orrs	r3, r6
    30b6:	4699      	mov	r9, r3
    30b8:	d16c      	bne.n	3194 <__aeabi_ddiv+0x178>
    30ba:	2300      	movs	r3, #0
    30bc:	4698      	mov	r8, r3
    30be:	3302      	adds	r3, #2
    30c0:	2608      	movs	r6, #8
    30c2:	9303      	str	r3, [sp, #12]
    30c4:	e7ce      	b.n	3064 <__aeabi_ddiv+0x48>
    30c6:	46cb      	mov	fp, r9
    30c8:	4641      	mov	r1, r8
    30ca:	9a03      	ldr	r2, [sp, #12]
    30cc:	9701      	str	r7, [sp, #4]
    30ce:	2a02      	cmp	r2, #2
    30d0:	d165      	bne.n	319e <__aeabi_ddiv+0x182>
    30d2:	9b01      	ldr	r3, [sp, #4]
    30d4:	4c4a      	ldr	r4, [pc, #296]	; (3200 <__aeabi_ddiv+0x1e4>)
    30d6:	469c      	mov	ip, r3
    30d8:	2300      	movs	r3, #0
    30da:	2200      	movs	r2, #0
    30dc:	4698      	mov	r8, r3
    30de:	e06b      	b.n	31b8 <__aeabi_ddiv+0x19c>
    30e0:	0003      	movs	r3, r0
    30e2:	4333      	orrs	r3, r6
    30e4:	4699      	mov	r9, r3
    30e6:	d04e      	beq.n	3186 <__aeabi_ddiv+0x16a>
    30e8:	2e00      	cmp	r6, #0
    30ea:	d100      	bne.n	30ee <__aeabi_ddiv+0xd2>
    30ec:	e1bc      	b.n	3468 <__aeabi_ddiv+0x44c>
    30ee:	0030      	movs	r0, r6
    30f0:	f001 f8ca 	bl	4288 <__clzsi2>
    30f4:	0003      	movs	r3, r0
    30f6:	3b0b      	subs	r3, #11
    30f8:	2b1c      	cmp	r3, #28
    30fa:	dd00      	ble.n	30fe <__aeabi_ddiv+0xe2>
    30fc:	e1ac      	b.n	3458 <__aeabi_ddiv+0x43c>
    30fe:	221d      	movs	r2, #29
    3100:	1ad3      	subs	r3, r2, r3
    3102:	465a      	mov	r2, fp
    3104:	0001      	movs	r1, r0
    3106:	40da      	lsrs	r2, r3
    3108:	3908      	subs	r1, #8
    310a:	408e      	lsls	r6, r1
    310c:	0013      	movs	r3, r2
    310e:	4333      	orrs	r3, r6
    3110:	4699      	mov	r9, r3
    3112:	465b      	mov	r3, fp
    3114:	408b      	lsls	r3, r1
    3116:	4698      	mov	r8, r3
    3118:	2300      	movs	r3, #0
    311a:	4c3c      	ldr	r4, [pc, #240]	; (320c <__aeabi_ddiv+0x1f0>)
    311c:	2600      	movs	r6, #0
    311e:	1a24      	subs	r4, r4, r0
    3120:	9303      	str	r3, [sp, #12]
    3122:	e79f      	b.n	3064 <__aeabi_ddiv+0x48>
    3124:	4651      	mov	r1, sl
    3126:	465a      	mov	r2, fp
    3128:	4311      	orrs	r1, r2
    312a:	d129      	bne.n	3180 <__aeabi_ddiv+0x164>
    312c:	2200      	movs	r2, #0
    312e:	4693      	mov	fp, r2
    3130:	3202      	adds	r2, #2
    3132:	e7b1      	b.n	3098 <__aeabi_ddiv+0x7c>
    3134:	4659      	mov	r1, fp
    3136:	4301      	orrs	r1, r0
    3138:	d01e      	beq.n	3178 <__aeabi_ddiv+0x15c>
    313a:	465b      	mov	r3, fp
    313c:	2b00      	cmp	r3, #0
    313e:	d100      	bne.n	3142 <__aeabi_ddiv+0x126>
    3140:	e19e      	b.n	3480 <__aeabi_ddiv+0x464>
    3142:	4658      	mov	r0, fp
    3144:	f001 f8a0 	bl	4288 <__clzsi2>
    3148:	0003      	movs	r3, r0
    314a:	3b0b      	subs	r3, #11
    314c:	2b1c      	cmp	r3, #28
    314e:	dd00      	ble.n	3152 <__aeabi_ddiv+0x136>
    3150:	e18f      	b.n	3472 <__aeabi_ddiv+0x456>
    3152:	0002      	movs	r2, r0
    3154:	4659      	mov	r1, fp
    3156:	3a08      	subs	r2, #8
    3158:	4091      	lsls	r1, r2
    315a:	468b      	mov	fp, r1
    315c:	211d      	movs	r1, #29
    315e:	1acb      	subs	r3, r1, r3
    3160:	4651      	mov	r1, sl
    3162:	40d9      	lsrs	r1, r3
    3164:	000b      	movs	r3, r1
    3166:	4659      	mov	r1, fp
    3168:	430b      	orrs	r3, r1
    316a:	4651      	mov	r1, sl
    316c:	469b      	mov	fp, r3
    316e:	4091      	lsls	r1, r2
    3170:	4b26      	ldr	r3, [pc, #152]	; (320c <__aeabi_ddiv+0x1f0>)
    3172:	2200      	movs	r2, #0
    3174:	1a1b      	subs	r3, r3, r0
    3176:	e78f      	b.n	3098 <__aeabi_ddiv+0x7c>
    3178:	2300      	movs	r3, #0
    317a:	2201      	movs	r2, #1
    317c:	469b      	mov	fp, r3
    317e:	e78b      	b.n	3098 <__aeabi_ddiv+0x7c>
    3180:	4651      	mov	r1, sl
    3182:	2203      	movs	r2, #3
    3184:	e788      	b.n	3098 <__aeabi_ddiv+0x7c>
    3186:	2300      	movs	r3, #0
    3188:	4698      	mov	r8, r3
    318a:	3301      	adds	r3, #1
    318c:	2604      	movs	r6, #4
    318e:	2400      	movs	r4, #0
    3190:	9303      	str	r3, [sp, #12]
    3192:	e767      	b.n	3064 <__aeabi_ddiv+0x48>
    3194:	2303      	movs	r3, #3
    3196:	46b1      	mov	r9, r6
    3198:	9303      	str	r3, [sp, #12]
    319a:	260c      	movs	r6, #12
    319c:	e762      	b.n	3064 <__aeabi_ddiv+0x48>
    319e:	2a03      	cmp	r2, #3
    31a0:	d100      	bne.n	31a4 <__aeabi_ddiv+0x188>
    31a2:	e25c      	b.n	365e <__aeabi_ddiv+0x642>
    31a4:	9b01      	ldr	r3, [sp, #4]
    31a6:	2a01      	cmp	r2, #1
    31a8:	d000      	beq.n	31ac <__aeabi_ddiv+0x190>
    31aa:	e1e4      	b.n	3576 <__aeabi_ddiv+0x55a>
    31ac:	4013      	ands	r3, r2
    31ae:	469c      	mov	ip, r3
    31b0:	2300      	movs	r3, #0
    31b2:	2400      	movs	r4, #0
    31b4:	2200      	movs	r2, #0
    31b6:	4698      	mov	r8, r3
    31b8:	2100      	movs	r1, #0
    31ba:	0312      	lsls	r2, r2, #12
    31bc:	0b13      	lsrs	r3, r2, #12
    31be:	0d0a      	lsrs	r2, r1, #20
    31c0:	0512      	lsls	r2, r2, #20
    31c2:	431a      	orrs	r2, r3
    31c4:	0523      	lsls	r3, r4, #20
    31c6:	4c12      	ldr	r4, [pc, #72]	; (3210 <__aeabi_ddiv+0x1f4>)
    31c8:	4640      	mov	r0, r8
    31ca:	4022      	ands	r2, r4
    31cc:	4313      	orrs	r3, r2
    31ce:	4662      	mov	r2, ip
    31d0:	005b      	lsls	r3, r3, #1
    31d2:	07d2      	lsls	r2, r2, #31
    31d4:	085b      	lsrs	r3, r3, #1
    31d6:	4313      	orrs	r3, r2
    31d8:	0019      	movs	r1, r3
    31da:	b007      	add	sp, #28
    31dc:	bc3c      	pop	{r2, r3, r4, r5}
    31de:	4690      	mov	r8, r2
    31e0:	4699      	mov	r9, r3
    31e2:	46a2      	mov	sl, r4
    31e4:	46ab      	mov	fp, r5
    31e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31e8:	2300      	movs	r3, #0
    31ea:	2280      	movs	r2, #128	; 0x80
    31ec:	469c      	mov	ip, r3
    31ee:	0312      	lsls	r2, r2, #12
    31f0:	4698      	mov	r8, r3
    31f2:	4c03      	ldr	r4, [pc, #12]	; (3200 <__aeabi_ddiv+0x1e4>)
    31f4:	e7e0      	b.n	31b8 <__aeabi_ddiv+0x19c>
    31f6:	2300      	movs	r3, #0
    31f8:	4c01      	ldr	r4, [pc, #4]	; (3200 <__aeabi_ddiv+0x1e4>)
    31fa:	2200      	movs	r2, #0
    31fc:	4698      	mov	r8, r3
    31fe:	e7db      	b.n	31b8 <__aeabi_ddiv+0x19c>
    3200:	000007ff 	.word	0x000007ff
    3204:	fffffc01 	.word	0xfffffc01
    3208:	000055d8 	.word	0x000055d8
    320c:	fffffc0d 	.word	0xfffffc0d
    3210:	800fffff 	.word	0x800fffff
    3214:	45d9      	cmp	r9, fp
    3216:	d900      	bls.n	321a <__aeabi_ddiv+0x1fe>
    3218:	e139      	b.n	348e <__aeabi_ddiv+0x472>
    321a:	d100      	bne.n	321e <__aeabi_ddiv+0x202>
    321c:	e134      	b.n	3488 <__aeabi_ddiv+0x46c>
    321e:	2300      	movs	r3, #0
    3220:	4646      	mov	r6, r8
    3222:	464d      	mov	r5, r9
    3224:	469a      	mov	sl, r3
    3226:	3c01      	subs	r4, #1
    3228:	465b      	mov	r3, fp
    322a:	0e0a      	lsrs	r2, r1, #24
    322c:	021b      	lsls	r3, r3, #8
    322e:	431a      	orrs	r2, r3
    3230:	020b      	lsls	r3, r1, #8
    3232:	0c17      	lsrs	r7, r2, #16
    3234:	9303      	str	r3, [sp, #12]
    3236:	0413      	lsls	r3, r2, #16
    3238:	0c1b      	lsrs	r3, r3, #16
    323a:	0039      	movs	r1, r7
    323c:	0028      	movs	r0, r5
    323e:	4690      	mov	r8, r2
    3240:	9301      	str	r3, [sp, #4]
    3242:	f7ff fb25 	bl	2890 <__udivsi3>
    3246:	0002      	movs	r2, r0
    3248:	9b01      	ldr	r3, [sp, #4]
    324a:	4683      	mov	fp, r0
    324c:	435a      	muls	r2, r3
    324e:	0028      	movs	r0, r5
    3250:	0039      	movs	r1, r7
    3252:	4691      	mov	r9, r2
    3254:	f7ff fba2 	bl	299c <__aeabi_uidivmod>
    3258:	0c35      	lsrs	r5, r6, #16
    325a:	0409      	lsls	r1, r1, #16
    325c:	430d      	orrs	r5, r1
    325e:	45a9      	cmp	r9, r5
    3260:	d90d      	bls.n	327e <__aeabi_ddiv+0x262>
    3262:	465b      	mov	r3, fp
    3264:	4445      	add	r5, r8
    3266:	3b01      	subs	r3, #1
    3268:	45a8      	cmp	r8, r5
    326a:	d900      	bls.n	326e <__aeabi_ddiv+0x252>
    326c:	e13a      	b.n	34e4 <__aeabi_ddiv+0x4c8>
    326e:	45a9      	cmp	r9, r5
    3270:	d800      	bhi.n	3274 <__aeabi_ddiv+0x258>
    3272:	e137      	b.n	34e4 <__aeabi_ddiv+0x4c8>
    3274:	2302      	movs	r3, #2
    3276:	425b      	negs	r3, r3
    3278:	469c      	mov	ip, r3
    327a:	4445      	add	r5, r8
    327c:	44e3      	add	fp, ip
    327e:	464b      	mov	r3, r9
    3280:	1aeb      	subs	r3, r5, r3
    3282:	0039      	movs	r1, r7
    3284:	0018      	movs	r0, r3
    3286:	9304      	str	r3, [sp, #16]
    3288:	f7ff fb02 	bl	2890 <__udivsi3>
    328c:	9b01      	ldr	r3, [sp, #4]
    328e:	0005      	movs	r5, r0
    3290:	4343      	muls	r3, r0
    3292:	0039      	movs	r1, r7
    3294:	9804      	ldr	r0, [sp, #16]
    3296:	4699      	mov	r9, r3
    3298:	f7ff fb80 	bl	299c <__aeabi_uidivmod>
    329c:	0433      	lsls	r3, r6, #16
    329e:	0409      	lsls	r1, r1, #16
    32a0:	0c1b      	lsrs	r3, r3, #16
    32a2:	430b      	orrs	r3, r1
    32a4:	4599      	cmp	r9, r3
    32a6:	d909      	bls.n	32bc <__aeabi_ddiv+0x2a0>
    32a8:	4443      	add	r3, r8
    32aa:	1e6a      	subs	r2, r5, #1
    32ac:	4598      	cmp	r8, r3
    32ae:	d900      	bls.n	32b2 <__aeabi_ddiv+0x296>
    32b0:	e11a      	b.n	34e8 <__aeabi_ddiv+0x4cc>
    32b2:	4599      	cmp	r9, r3
    32b4:	d800      	bhi.n	32b8 <__aeabi_ddiv+0x29c>
    32b6:	e117      	b.n	34e8 <__aeabi_ddiv+0x4cc>
    32b8:	3d02      	subs	r5, #2
    32ba:	4443      	add	r3, r8
    32bc:	464a      	mov	r2, r9
    32be:	1a9b      	subs	r3, r3, r2
    32c0:	465a      	mov	r2, fp
    32c2:	0412      	lsls	r2, r2, #16
    32c4:	432a      	orrs	r2, r5
    32c6:	9903      	ldr	r1, [sp, #12]
    32c8:	4693      	mov	fp, r2
    32ca:	0c10      	lsrs	r0, r2, #16
    32cc:	0c0a      	lsrs	r2, r1, #16
    32ce:	4691      	mov	r9, r2
    32d0:	0409      	lsls	r1, r1, #16
    32d2:	465a      	mov	r2, fp
    32d4:	0c09      	lsrs	r1, r1, #16
    32d6:	464e      	mov	r6, r9
    32d8:	000d      	movs	r5, r1
    32da:	0412      	lsls	r2, r2, #16
    32dc:	0c12      	lsrs	r2, r2, #16
    32de:	4345      	muls	r5, r0
    32e0:	9105      	str	r1, [sp, #20]
    32e2:	4351      	muls	r1, r2
    32e4:	4372      	muls	r2, r6
    32e6:	4370      	muls	r0, r6
    32e8:	1952      	adds	r2, r2, r5
    32ea:	0c0e      	lsrs	r6, r1, #16
    32ec:	18b2      	adds	r2, r6, r2
    32ee:	4295      	cmp	r5, r2
    32f0:	d903      	bls.n	32fa <__aeabi_ddiv+0x2de>
    32f2:	2580      	movs	r5, #128	; 0x80
    32f4:	026d      	lsls	r5, r5, #9
    32f6:	46ac      	mov	ip, r5
    32f8:	4460      	add	r0, ip
    32fa:	0c15      	lsrs	r5, r2, #16
    32fc:	0409      	lsls	r1, r1, #16
    32fe:	0412      	lsls	r2, r2, #16
    3300:	0c09      	lsrs	r1, r1, #16
    3302:	1828      	adds	r0, r5, r0
    3304:	1852      	adds	r2, r2, r1
    3306:	4283      	cmp	r3, r0
    3308:	d200      	bcs.n	330c <__aeabi_ddiv+0x2f0>
    330a:	e0ce      	b.n	34aa <__aeabi_ddiv+0x48e>
    330c:	d100      	bne.n	3310 <__aeabi_ddiv+0x2f4>
    330e:	e0c8      	b.n	34a2 <__aeabi_ddiv+0x486>
    3310:	1a1d      	subs	r5, r3, r0
    3312:	4653      	mov	r3, sl
    3314:	1a9e      	subs	r6, r3, r2
    3316:	45b2      	cmp	sl, r6
    3318:	4192      	sbcs	r2, r2
    331a:	4252      	negs	r2, r2
    331c:	1aab      	subs	r3, r5, r2
    331e:	469a      	mov	sl, r3
    3320:	4598      	cmp	r8, r3
    3322:	d100      	bne.n	3326 <__aeabi_ddiv+0x30a>
    3324:	e117      	b.n	3556 <__aeabi_ddiv+0x53a>
    3326:	0039      	movs	r1, r7
    3328:	0018      	movs	r0, r3
    332a:	f7ff fab1 	bl	2890 <__udivsi3>
    332e:	9b01      	ldr	r3, [sp, #4]
    3330:	0005      	movs	r5, r0
    3332:	4343      	muls	r3, r0
    3334:	0039      	movs	r1, r7
    3336:	4650      	mov	r0, sl
    3338:	9304      	str	r3, [sp, #16]
    333a:	f7ff fb2f 	bl	299c <__aeabi_uidivmod>
    333e:	9804      	ldr	r0, [sp, #16]
    3340:	040b      	lsls	r3, r1, #16
    3342:	0c31      	lsrs	r1, r6, #16
    3344:	4319      	orrs	r1, r3
    3346:	4288      	cmp	r0, r1
    3348:	d909      	bls.n	335e <__aeabi_ddiv+0x342>
    334a:	4441      	add	r1, r8
    334c:	1e6b      	subs	r3, r5, #1
    334e:	4588      	cmp	r8, r1
    3350:	d900      	bls.n	3354 <__aeabi_ddiv+0x338>
    3352:	e107      	b.n	3564 <__aeabi_ddiv+0x548>
    3354:	4288      	cmp	r0, r1
    3356:	d800      	bhi.n	335a <__aeabi_ddiv+0x33e>
    3358:	e104      	b.n	3564 <__aeabi_ddiv+0x548>
    335a:	3d02      	subs	r5, #2
    335c:	4441      	add	r1, r8
    335e:	9b04      	ldr	r3, [sp, #16]
    3360:	1acb      	subs	r3, r1, r3
    3362:	0018      	movs	r0, r3
    3364:	0039      	movs	r1, r7
    3366:	9304      	str	r3, [sp, #16]
    3368:	f7ff fa92 	bl	2890 <__udivsi3>
    336c:	9b01      	ldr	r3, [sp, #4]
    336e:	4682      	mov	sl, r0
    3370:	4343      	muls	r3, r0
    3372:	0039      	movs	r1, r7
    3374:	9804      	ldr	r0, [sp, #16]
    3376:	9301      	str	r3, [sp, #4]
    3378:	f7ff fb10 	bl	299c <__aeabi_uidivmod>
    337c:	9801      	ldr	r0, [sp, #4]
    337e:	040b      	lsls	r3, r1, #16
    3380:	0431      	lsls	r1, r6, #16
    3382:	0c09      	lsrs	r1, r1, #16
    3384:	4319      	orrs	r1, r3
    3386:	4288      	cmp	r0, r1
    3388:	d90d      	bls.n	33a6 <__aeabi_ddiv+0x38a>
    338a:	4653      	mov	r3, sl
    338c:	4441      	add	r1, r8
    338e:	3b01      	subs	r3, #1
    3390:	4588      	cmp	r8, r1
    3392:	d900      	bls.n	3396 <__aeabi_ddiv+0x37a>
    3394:	e0e8      	b.n	3568 <__aeabi_ddiv+0x54c>
    3396:	4288      	cmp	r0, r1
    3398:	d800      	bhi.n	339c <__aeabi_ddiv+0x380>
    339a:	e0e5      	b.n	3568 <__aeabi_ddiv+0x54c>
    339c:	2302      	movs	r3, #2
    339e:	425b      	negs	r3, r3
    33a0:	469c      	mov	ip, r3
    33a2:	4441      	add	r1, r8
    33a4:	44e2      	add	sl, ip
    33a6:	9b01      	ldr	r3, [sp, #4]
    33a8:	042d      	lsls	r5, r5, #16
    33aa:	1ace      	subs	r6, r1, r3
    33ac:	4651      	mov	r1, sl
    33ae:	4329      	orrs	r1, r5
    33b0:	9d05      	ldr	r5, [sp, #20]
    33b2:	464f      	mov	r7, r9
    33b4:	002a      	movs	r2, r5
    33b6:	040b      	lsls	r3, r1, #16
    33b8:	0c08      	lsrs	r0, r1, #16
    33ba:	0c1b      	lsrs	r3, r3, #16
    33bc:	435a      	muls	r2, r3
    33be:	4345      	muls	r5, r0
    33c0:	437b      	muls	r3, r7
    33c2:	4378      	muls	r0, r7
    33c4:	195b      	adds	r3, r3, r5
    33c6:	0c17      	lsrs	r7, r2, #16
    33c8:	18fb      	adds	r3, r7, r3
    33ca:	429d      	cmp	r5, r3
    33cc:	d903      	bls.n	33d6 <__aeabi_ddiv+0x3ba>
    33ce:	2580      	movs	r5, #128	; 0x80
    33d0:	026d      	lsls	r5, r5, #9
    33d2:	46ac      	mov	ip, r5
    33d4:	4460      	add	r0, ip
    33d6:	0c1d      	lsrs	r5, r3, #16
    33d8:	0412      	lsls	r2, r2, #16
    33da:	041b      	lsls	r3, r3, #16
    33dc:	0c12      	lsrs	r2, r2, #16
    33de:	1828      	adds	r0, r5, r0
    33e0:	189b      	adds	r3, r3, r2
    33e2:	4286      	cmp	r6, r0
    33e4:	d200      	bcs.n	33e8 <__aeabi_ddiv+0x3cc>
    33e6:	e093      	b.n	3510 <__aeabi_ddiv+0x4f4>
    33e8:	d100      	bne.n	33ec <__aeabi_ddiv+0x3d0>
    33ea:	e08e      	b.n	350a <__aeabi_ddiv+0x4ee>
    33ec:	2301      	movs	r3, #1
    33ee:	4319      	orrs	r1, r3
    33f0:	4ba0      	ldr	r3, [pc, #640]	; (3674 <__aeabi_ddiv+0x658>)
    33f2:	18e3      	adds	r3, r4, r3
    33f4:	2b00      	cmp	r3, #0
    33f6:	dc00      	bgt.n	33fa <__aeabi_ddiv+0x3de>
    33f8:	e099      	b.n	352e <__aeabi_ddiv+0x512>
    33fa:	074a      	lsls	r2, r1, #29
    33fc:	d000      	beq.n	3400 <__aeabi_ddiv+0x3e4>
    33fe:	e09e      	b.n	353e <__aeabi_ddiv+0x522>
    3400:	465a      	mov	r2, fp
    3402:	01d2      	lsls	r2, r2, #7
    3404:	d506      	bpl.n	3414 <__aeabi_ddiv+0x3f8>
    3406:	465a      	mov	r2, fp
    3408:	4b9b      	ldr	r3, [pc, #620]	; (3678 <__aeabi_ddiv+0x65c>)
    340a:	401a      	ands	r2, r3
    340c:	2380      	movs	r3, #128	; 0x80
    340e:	4693      	mov	fp, r2
    3410:	00db      	lsls	r3, r3, #3
    3412:	18e3      	adds	r3, r4, r3
    3414:	4a99      	ldr	r2, [pc, #612]	; (367c <__aeabi_ddiv+0x660>)
    3416:	4293      	cmp	r3, r2
    3418:	dd68      	ble.n	34ec <__aeabi_ddiv+0x4d0>
    341a:	2301      	movs	r3, #1
    341c:	9a02      	ldr	r2, [sp, #8]
    341e:	4c98      	ldr	r4, [pc, #608]	; (3680 <__aeabi_ddiv+0x664>)
    3420:	401a      	ands	r2, r3
    3422:	2300      	movs	r3, #0
    3424:	4694      	mov	ip, r2
    3426:	4698      	mov	r8, r3
    3428:	2200      	movs	r2, #0
    342a:	e6c5      	b.n	31b8 <__aeabi_ddiv+0x19c>
    342c:	2280      	movs	r2, #128	; 0x80
    342e:	464b      	mov	r3, r9
    3430:	0312      	lsls	r2, r2, #12
    3432:	4213      	tst	r3, r2
    3434:	d00a      	beq.n	344c <__aeabi_ddiv+0x430>
    3436:	465b      	mov	r3, fp
    3438:	4213      	tst	r3, r2
    343a:	d106      	bne.n	344a <__aeabi_ddiv+0x42e>
    343c:	431a      	orrs	r2, r3
    343e:	0312      	lsls	r2, r2, #12
    3440:	0b12      	lsrs	r2, r2, #12
    3442:	46ac      	mov	ip, r5
    3444:	4688      	mov	r8, r1
    3446:	4c8e      	ldr	r4, [pc, #568]	; (3680 <__aeabi_ddiv+0x664>)
    3448:	e6b6      	b.n	31b8 <__aeabi_ddiv+0x19c>
    344a:	464b      	mov	r3, r9
    344c:	431a      	orrs	r2, r3
    344e:	0312      	lsls	r2, r2, #12
    3450:	0b12      	lsrs	r2, r2, #12
    3452:	46bc      	mov	ip, r7
    3454:	4c8a      	ldr	r4, [pc, #552]	; (3680 <__aeabi_ddiv+0x664>)
    3456:	e6af      	b.n	31b8 <__aeabi_ddiv+0x19c>
    3458:	0003      	movs	r3, r0
    345a:	465a      	mov	r2, fp
    345c:	3b28      	subs	r3, #40	; 0x28
    345e:	409a      	lsls	r2, r3
    3460:	2300      	movs	r3, #0
    3462:	4691      	mov	r9, r2
    3464:	4698      	mov	r8, r3
    3466:	e657      	b.n	3118 <__aeabi_ddiv+0xfc>
    3468:	4658      	mov	r0, fp
    346a:	f000 ff0d 	bl	4288 <__clzsi2>
    346e:	3020      	adds	r0, #32
    3470:	e640      	b.n	30f4 <__aeabi_ddiv+0xd8>
    3472:	0003      	movs	r3, r0
    3474:	4652      	mov	r2, sl
    3476:	3b28      	subs	r3, #40	; 0x28
    3478:	409a      	lsls	r2, r3
    347a:	2100      	movs	r1, #0
    347c:	4693      	mov	fp, r2
    347e:	e677      	b.n	3170 <__aeabi_ddiv+0x154>
    3480:	f000 ff02 	bl	4288 <__clzsi2>
    3484:	3020      	adds	r0, #32
    3486:	e65f      	b.n	3148 <__aeabi_ddiv+0x12c>
    3488:	4588      	cmp	r8, r1
    348a:	d200      	bcs.n	348e <__aeabi_ddiv+0x472>
    348c:	e6c7      	b.n	321e <__aeabi_ddiv+0x202>
    348e:	464b      	mov	r3, r9
    3490:	07de      	lsls	r6, r3, #31
    3492:	085d      	lsrs	r5, r3, #1
    3494:	4643      	mov	r3, r8
    3496:	085b      	lsrs	r3, r3, #1
    3498:	431e      	orrs	r6, r3
    349a:	4643      	mov	r3, r8
    349c:	07db      	lsls	r3, r3, #31
    349e:	469a      	mov	sl, r3
    34a0:	e6c2      	b.n	3228 <__aeabi_ddiv+0x20c>
    34a2:	2500      	movs	r5, #0
    34a4:	4592      	cmp	sl, r2
    34a6:	d300      	bcc.n	34aa <__aeabi_ddiv+0x48e>
    34a8:	e733      	b.n	3312 <__aeabi_ddiv+0x2f6>
    34aa:	9e03      	ldr	r6, [sp, #12]
    34ac:	4659      	mov	r1, fp
    34ae:	46b4      	mov	ip, r6
    34b0:	44e2      	add	sl, ip
    34b2:	45b2      	cmp	sl, r6
    34b4:	41ad      	sbcs	r5, r5
    34b6:	426d      	negs	r5, r5
    34b8:	4445      	add	r5, r8
    34ba:	18eb      	adds	r3, r5, r3
    34bc:	3901      	subs	r1, #1
    34be:	4598      	cmp	r8, r3
    34c0:	d207      	bcs.n	34d2 <__aeabi_ddiv+0x4b6>
    34c2:	4298      	cmp	r0, r3
    34c4:	d900      	bls.n	34c8 <__aeabi_ddiv+0x4ac>
    34c6:	e07f      	b.n	35c8 <__aeabi_ddiv+0x5ac>
    34c8:	d100      	bne.n	34cc <__aeabi_ddiv+0x4b0>
    34ca:	e0bc      	b.n	3646 <__aeabi_ddiv+0x62a>
    34cc:	1a1d      	subs	r5, r3, r0
    34ce:	468b      	mov	fp, r1
    34d0:	e71f      	b.n	3312 <__aeabi_ddiv+0x2f6>
    34d2:	4598      	cmp	r8, r3
    34d4:	d1fa      	bne.n	34cc <__aeabi_ddiv+0x4b0>
    34d6:	9d03      	ldr	r5, [sp, #12]
    34d8:	4555      	cmp	r5, sl
    34da:	d9f2      	bls.n	34c2 <__aeabi_ddiv+0x4a6>
    34dc:	4643      	mov	r3, r8
    34de:	468b      	mov	fp, r1
    34e0:	1a1d      	subs	r5, r3, r0
    34e2:	e716      	b.n	3312 <__aeabi_ddiv+0x2f6>
    34e4:	469b      	mov	fp, r3
    34e6:	e6ca      	b.n	327e <__aeabi_ddiv+0x262>
    34e8:	0015      	movs	r5, r2
    34ea:	e6e7      	b.n	32bc <__aeabi_ddiv+0x2a0>
    34ec:	465a      	mov	r2, fp
    34ee:	08c9      	lsrs	r1, r1, #3
    34f0:	0752      	lsls	r2, r2, #29
    34f2:	430a      	orrs	r2, r1
    34f4:	055b      	lsls	r3, r3, #21
    34f6:	4690      	mov	r8, r2
    34f8:	0d5c      	lsrs	r4, r3, #21
    34fa:	465a      	mov	r2, fp
    34fc:	2301      	movs	r3, #1
    34fe:	9902      	ldr	r1, [sp, #8]
    3500:	0252      	lsls	r2, r2, #9
    3502:	4019      	ands	r1, r3
    3504:	0b12      	lsrs	r2, r2, #12
    3506:	468c      	mov	ip, r1
    3508:	e656      	b.n	31b8 <__aeabi_ddiv+0x19c>
    350a:	2b00      	cmp	r3, #0
    350c:	d100      	bne.n	3510 <__aeabi_ddiv+0x4f4>
    350e:	e76f      	b.n	33f0 <__aeabi_ddiv+0x3d4>
    3510:	4446      	add	r6, r8
    3512:	1e4a      	subs	r2, r1, #1
    3514:	45b0      	cmp	r8, r6
    3516:	d929      	bls.n	356c <__aeabi_ddiv+0x550>
    3518:	0011      	movs	r1, r2
    351a:	4286      	cmp	r6, r0
    351c:	d000      	beq.n	3520 <__aeabi_ddiv+0x504>
    351e:	e765      	b.n	33ec <__aeabi_ddiv+0x3d0>
    3520:	9a03      	ldr	r2, [sp, #12]
    3522:	4293      	cmp	r3, r2
    3524:	d000      	beq.n	3528 <__aeabi_ddiv+0x50c>
    3526:	e761      	b.n	33ec <__aeabi_ddiv+0x3d0>
    3528:	e762      	b.n	33f0 <__aeabi_ddiv+0x3d4>
    352a:	2101      	movs	r1, #1
    352c:	4249      	negs	r1, r1
    352e:	2001      	movs	r0, #1
    3530:	1ac2      	subs	r2, r0, r3
    3532:	2a38      	cmp	r2, #56	; 0x38
    3534:	dd21      	ble.n	357a <__aeabi_ddiv+0x55e>
    3536:	9b02      	ldr	r3, [sp, #8]
    3538:	4003      	ands	r3, r0
    353a:	469c      	mov	ip, r3
    353c:	e638      	b.n	31b0 <__aeabi_ddiv+0x194>
    353e:	220f      	movs	r2, #15
    3540:	400a      	ands	r2, r1
    3542:	2a04      	cmp	r2, #4
    3544:	d100      	bne.n	3548 <__aeabi_ddiv+0x52c>
    3546:	e75b      	b.n	3400 <__aeabi_ddiv+0x3e4>
    3548:	000a      	movs	r2, r1
    354a:	1d11      	adds	r1, r2, #4
    354c:	4291      	cmp	r1, r2
    354e:	4192      	sbcs	r2, r2
    3550:	4252      	negs	r2, r2
    3552:	4493      	add	fp, r2
    3554:	e754      	b.n	3400 <__aeabi_ddiv+0x3e4>
    3556:	4b47      	ldr	r3, [pc, #284]	; (3674 <__aeabi_ddiv+0x658>)
    3558:	18e3      	adds	r3, r4, r3
    355a:	2b00      	cmp	r3, #0
    355c:	dde5      	ble.n	352a <__aeabi_ddiv+0x50e>
    355e:	2201      	movs	r2, #1
    3560:	4252      	negs	r2, r2
    3562:	e7f2      	b.n	354a <__aeabi_ddiv+0x52e>
    3564:	001d      	movs	r5, r3
    3566:	e6fa      	b.n	335e <__aeabi_ddiv+0x342>
    3568:	469a      	mov	sl, r3
    356a:	e71c      	b.n	33a6 <__aeabi_ddiv+0x38a>
    356c:	42b0      	cmp	r0, r6
    356e:	d839      	bhi.n	35e4 <__aeabi_ddiv+0x5c8>
    3570:	d06e      	beq.n	3650 <__aeabi_ddiv+0x634>
    3572:	0011      	movs	r1, r2
    3574:	e73a      	b.n	33ec <__aeabi_ddiv+0x3d0>
    3576:	9302      	str	r3, [sp, #8]
    3578:	e73a      	b.n	33f0 <__aeabi_ddiv+0x3d4>
    357a:	2a1f      	cmp	r2, #31
    357c:	dc3c      	bgt.n	35f8 <__aeabi_ddiv+0x5dc>
    357e:	2320      	movs	r3, #32
    3580:	1a9b      	subs	r3, r3, r2
    3582:	000c      	movs	r4, r1
    3584:	4658      	mov	r0, fp
    3586:	4099      	lsls	r1, r3
    3588:	4098      	lsls	r0, r3
    358a:	1e4b      	subs	r3, r1, #1
    358c:	4199      	sbcs	r1, r3
    358e:	465b      	mov	r3, fp
    3590:	40d4      	lsrs	r4, r2
    3592:	40d3      	lsrs	r3, r2
    3594:	4320      	orrs	r0, r4
    3596:	4308      	orrs	r0, r1
    3598:	001a      	movs	r2, r3
    359a:	0743      	lsls	r3, r0, #29
    359c:	d009      	beq.n	35b2 <__aeabi_ddiv+0x596>
    359e:	230f      	movs	r3, #15
    35a0:	4003      	ands	r3, r0
    35a2:	2b04      	cmp	r3, #4
    35a4:	d005      	beq.n	35b2 <__aeabi_ddiv+0x596>
    35a6:	0001      	movs	r1, r0
    35a8:	1d08      	adds	r0, r1, #4
    35aa:	4288      	cmp	r0, r1
    35ac:	419b      	sbcs	r3, r3
    35ae:	425b      	negs	r3, r3
    35b0:	18d2      	adds	r2, r2, r3
    35b2:	0213      	lsls	r3, r2, #8
    35b4:	d53a      	bpl.n	362c <__aeabi_ddiv+0x610>
    35b6:	2301      	movs	r3, #1
    35b8:	9a02      	ldr	r2, [sp, #8]
    35ba:	2401      	movs	r4, #1
    35bc:	401a      	ands	r2, r3
    35be:	2300      	movs	r3, #0
    35c0:	4694      	mov	ip, r2
    35c2:	4698      	mov	r8, r3
    35c4:	2200      	movs	r2, #0
    35c6:	e5f7      	b.n	31b8 <__aeabi_ddiv+0x19c>
    35c8:	2102      	movs	r1, #2
    35ca:	4249      	negs	r1, r1
    35cc:	468c      	mov	ip, r1
    35ce:	9d03      	ldr	r5, [sp, #12]
    35d0:	44e3      	add	fp, ip
    35d2:	46ac      	mov	ip, r5
    35d4:	44e2      	add	sl, ip
    35d6:	45aa      	cmp	sl, r5
    35d8:	41ad      	sbcs	r5, r5
    35da:	426d      	negs	r5, r5
    35dc:	4445      	add	r5, r8
    35de:	18ed      	adds	r5, r5, r3
    35e0:	1a2d      	subs	r5, r5, r0
    35e2:	e696      	b.n	3312 <__aeabi_ddiv+0x2f6>
    35e4:	1e8a      	subs	r2, r1, #2
    35e6:	9903      	ldr	r1, [sp, #12]
    35e8:	004d      	lsls	r5, r1, #1
    35ea:	428d      	cmp	r5, r1
    35ec:	4189      	sbcs	r1, r1
    35ee:	4249      	negs	r1, r1
    35f0:	4441      	add	r1, r8
    35f2:	1876      	adds	r6, r6, r1
    35f4:	9503      	str	r5, [sp, #12]
    35f6:	e78f      	b.n	3518 <__aeabi_ddiv+0x4fc>
    35f8:	201f      	movs	r0, #31
    35fa:	4240      	negs	r0, r0
    35fc:	1ac3      	subs	r3, r0, r3
    35fe:	4658      	mov	r0, fp
    3600:	40d8      	lsrs	r0, r3
    3602:	0003      	movs	r3, r0
    3604:	2a20      	cmp	r2, #32
    3606:	d028      	beq.n	365a <__aeabi_ddiv+0x63e>
    3608:	2040      	movs	r0, #64	; 0x40
    360a:	465d      	mov	r5, fp
    360c:	1a82      	subs	r2, r0, r2
    360e:	4095      	lsls	r5, r2
    3610:	4329      	orrs	r1, r5
    3612:	1e4a      	subs	r2, r1, #1
    3614:	4191      	sbcs	r1, r2
    3616:	4319      	orrs	r1, r3
    3618:	2307      	movs	r3, #7
    361a:	2200      	movs	r2, #0
    361c:	400b      	ands	r3, r1
    361e:	d009      	beq.n	3634 <__aeabi_ddiv+0x618>
    3620:	230f      	movs	r3, #15
    3622:	2200      	movs	r2, #0
    3624:	400b      	ands	r3, r1
    3626:	0008      	movs	r0, r1
    3628:	2b04      	cmp	r3, #4
    362a:	d1bd      	bne.n	35a8 <__aeabi_ddiv+0x58c>
    362c:	0001      	movs	r1, r0
    362e:	0753      	lsls	r3, r2, #29
    3630:	0252      	lsls	r2, r2, #9
    3632:	0b12      	lsrs	r2, r2, #12
    3634:	08c9      	lsrs	r1, r1, #3
    3636:	4319      	orrs	r1, r3
    3638:	2301      	movs	r3, #1
    363a:	4688      	mov	r8, r1
    363c:	9902      	ldr	r1, [sp, #8]
    363e:	2400      	movs	r4, #0
    3640:	4019      	ands	r1, r3
    3642:	468c      	mov	ip, r1
    3644:	e5b8      	b.n	31b8 <__aeabi_ddiv+0x19c>
    3646:	4552      	cmp	r2, sl
    3648:	d8be      	bhi.n	35c8 <__aeabi_ddiv+0x5ac>
    364a:	468b      	mov	fp, r1
    364c:	2500      	movs	r5, #0
    364e:	e660      	b.n	3312 <__aeabi_ddiv+0x2f6>
    3650:	9d03      	ldr	r5, [sp, #12]
    3652:	429d      	cmp	r5, r3
    3654:	d3c6      	bcc.n	35e4 <__aeabi_ddiv+0x5c8>
    3656:	0011      	movs	r1, r2
    3658:	e762      	b.n	3520 <__aeabi_ddiv+0x504>
    365a:	2500      	movs	r5, #0
    365c:	e7d8      	b.n	3610 <__aeabi_ddiv+0x5f4>
    365e:	2280      	movs	r2, #128	; 0x80
    3660:	465b      	mov	r3, fp
    3662:	0312      	lsls	r2, r2, #12
    3664:	431a      	orrs	r2, r3
    3666:	9b01      	ldr	r3, [sp, #4]
    3668:	0312      	lsls	r2, r2, #12
    366a:	0b12      	lsrs	r2, r2, #12
    366c:	469c      	mov	ip, r3
    366e:	4688      	mov	r8, r1
    3670:	4c03      	ldr	r4, [pc, #12]	; (3680 <__aeabi_ddiv+0x664>)
    3672:	e5a1      	b.n	31b8 <__aeabi_ddiv+0x19c>
    3674:	000003ff 	.word	0x000003ff
    3678:	feffffff 	.word	0xfeffffff
    367c:	000007fe 	.word	0x000007fe
    3680:	000007ff 	.word	0x000007ff

00003684 <__aeabi_dmul>:
    3684:	b5f0      	push	{r4, r5, r6, r7, lr}
    3686:	4657      	mov	r7, sl
    3688:	4645      	mov	r5, r8
    368a:	46de      	mov	lr, fp
    368c:	464e      	mov	r6, r9
    368e:	b5e0      	push	{r5, r6, r7, lr}
    3690:	030c      	lsls	r4, r1, #12
    3692:	4698      	mov	r8, r3
    3694:	004e      	lsls	r6, r1, #1
    3696:	0b23      	lsrs	r3, r4, #12
    3698:	b087      	sub	sp, #28
    369a:	0007      	movs	r7, r0
    369c:	4692      	mov	sl, r2
    369e:	469b      	mov	fp, r3
    36a0:	0d76      	lsrs	r6, r6, #21
    36a2:	0fcd      	lsrs	r5, r1, #31
    36a4:	2e00      	cmp	r6, #0
    36a6:	d06b      	beq.n	3780 <__aeabi_dmul+0xfc>
    36a8:	4b6d      	ldr	r3, [pc, #436]	; (3860 <__aeabi_dmul+0x1dc>)
    36aa:	429e      	cmp	r6, r3
    36ac:	d035      	beq.n	371a <__aeabi_dmul+0x96>
    36ae:	2480      	movs	r4, #128	; 0x80
    36b0:	465b      	mov	r3, fp
    36b2:	0f42      	lsrs	r2, r0, #29
    36b4:	0424      	lsls	r4, r4, #16
    36b6:	00db      	lsls	r3, r3, #3
    36b8:	4314      	orrs	r4, r2
    36ba:	431c      	orrs	r4, r3
    36bc:	00c3      	lsls	r3, r0, #3
    36be:	4699      	mov	r9, r3
    36c0:	4b68      	ldr	r3, [pc, #416]	; (3864 <__aeabi_dmul+0x1e0>)
    36c2:	46a3      	mov	fp, r4
    36c4:	469c      	mov	ip, r3
    36c6:	2300      	movs	r3, #0
    36c8:	2700      	movs	r7, #0
    36ca:	4466      	add	r6, ip
    36cc:	9302      	str	r3, [sp, #8]
    36ce:	4643      	mov	r3, r8
    36d0:	031c      	lsls	r4, r3, #12
    36d2:	005a      	lsls	r2, r3, #1
    36d4:	0fdb      	lsrs	r3, r3, #31
    36d6:	4650      	mov	r0, sl
    36d8:	0b24      	lsrs	r4, r4, #12
    36da:	0d52      	lsrs	r2, r2, #21
    36dc:	4698      	mov	r8, r3
    36de:	d100      	bne.n	36e2 <__aeabi_dmul+0x5e>
    36e0:	e076      	b.n	37d0 <__aeabi_dmul+0x14c>
    36e2:	4b5f      	ldr	r3, [pc, #380]	; (3860 <__aeabi_dmul+0x1dc>)
    36e4:	429a      	cmp	r2, r3
    36e6:	d06d      	beq.n	37c4 <__aeabi_dmul+0x140>
    36e8:	2380      	movs	r3, #128	; 0x80
    36ea:	0f41      	lsrs	r1, r0, #29
    36ec:	041b      	lsls	r3, r3, #16
    36ee:	430b      	orrs	r3, r1
    36f0:	495c      	ldr	r1, [pc, #368]	; (3864 <__aeabi_dmul+0x1e0>)
    36f2:	00e4      	lsls	r4, r4, #3
    36f4:	468c      	mov	ip, r1
    36f6:	431c      	orrs	r4, r3
    36f8:	00c3      	lsls	r3, r0, #3
    36fa:	2000      	movs	r0, #0
    36fc:	4462      	add	r2, ip
    36fe:	4641      	mov	r1, r8
    3700:	18b6      	adds	r6, r6, r2
    3702:	4069      	eors	r1, r5
    3704:	1c72      	adds	r2, r6, #1
    3706:	9101      	str	r1, [sp, #4]
    3708:	4694      	mov	ip, r2
    370a:	4307      	orrs	r7, r0
    370c:	2f0f      	cmp	r7, #15
    370e:	d900      	bls.n	3712 <__aeabi_dmul+0x8e>
    3710:	e0b0      	b.n	3874 <__aeabi_dmul+0x1f0>
    3712:	4a55      	ldr	r2, [pc, #340]	; (3868 <__aeabi_dmul+0x1e4>)
    3714:	00bf      	lsls	r7, r7, #2
    3716:	59d2      	ldr	r2, [r2, r7]
    3718:	4697      	mov	pc, r2
    371a:	465b      	mov	r3, fp
    371c:	4303      	orrs	r3, r0
    371e:	4699      	mov	r9, r3
    3720:	d000      	beq.n	3724 <__aeabi_dmul+0xa0>
    3722:	e087      	b.n	3834 <__aeabi_dmul+0x1b0>
    3724:	2300      	movs	r3, #0
    3726:	469b      	mov	fp, r3
    3728:	3302      	adds	r3, #2
    372a:	2708      	movs	r7, #8
    372c:	9302      	str	r3, [sp, #8]
    372e:	e7ce      	b.n	36ce <__aeabi_dmul+0x4a>
    3730:	4642      	mov	r2, r8
    3732:	9201      	str	r2, [sp, #4]
    3734:	2802      	cmp	r0, #2
    3736:	d067      	beq.n	3808 <__aeabi_dmul+0x184>
    3738:	2803      	cmp	r0, #3
    373a:	d100      	bne.n	373e <__aeabi_dmul+0xba>
    373c:	e20e      	b.n	3b5c <__aeabi_dmul+0x4d8>
    373e:	2801      	cmp	r0, #1
    3740:	d000      	beq.n	3744 <__aeabi_dmul+0xc0>
    3742:	e162      	b.n	3a0a <__aeabi_dmul+0x386>
    3744:	2300      	movs	r3, #0
    3746:	2400      	movs	r4, #0
    3748:	2200      	movs	r2, #0
    374a:	4699      	mov	r9, r3
    374c:	9901      	ldr	r1, [sp, #4]
    374e:	4001      	ands	r1, r0
    3750:	b2cd      	uxtb	r5, r1
    3752:	2100      	movs	r1, #0
    3754:	0312      	lsls	r2, r2, #12
    3756:	0d0b      	lsrs	r3, r1, #20
    3758:	0b12      	lsrs	r2, r2, #12
    375a:	051b      	lsls	r3, r3, #20
    375c:	4313      	orrs	r3, r2
    375e:	4a43      	ldr	r2, [pc, #268]	; (386c <__aeabi_dmul+0x1e8>)
    3760:	0524      	lsls	r4, r4, #20
    3762:	4013      	ands	r3, r2
    3764:	431c      	orrs	r4, r3
    3766:	0064      	lsls	r4, r4, #1
    3768:	07ed      	lsls	r5, r5, #31
    376a:	0864      	lsrs	r4, r4, #1
    376c:	432c      	orrs	r4, r5
    376e:	4648      	mov	r0, r9
    3770:	0021      	movs	r1, r4
    3772:	b007      	add	sp, #28
    3774:	bc3c      	pop	{r2, r3, r4, r5}
    3776:	4690      	mov	r8, r2
    3778:	4699      	mov	r9, r3
    377a:	46a2      	mov	sl, r4
    377c:	46ab      	mov	fp, r5
    377e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3780:	4303      	orrs	r3, r0
    3782:	4699      	mov	r9, r3
    3784:	d04f      	beq.n	3826 <__aeabi_dmul+0x1a2>
    3786:	465b      	mov	r3, fp
    3788:	2b00      	cmp	r3, #0
    378a:	d100      	bne.n	378e <__aeabi_dmul+0x10a>
    378c:	e189      	b.n	3aa2 <__aeabi_dmul+0x41e>
    378e:	4658      	mov	r0, fp
    3790:	f000 fd7a 	bl	4288 <__clzsi2>
    3794:	0003      	movs	r3, r0
    3796:	3b0b      	subs	r3, #11
    3798:	2b1c      	cmp	r3, #28
    379a:	dd00      	ble.n	379e <__aeabi_dmul+0x11a>
    379c:	e17a      	b.n	3a94 <__aeabi_dmul+0x410>
    379e:	221d      	movs	r2, #29
    37a0:	1ad3      	subs	r3, r2, r3
    37a2:	003a      	movs	r2, r7
    37a4:	0001      	movs	r1, r0
    37a6:	465c      	mov	r4, fp
    37a8:	40da      	lsrs	r2, r3
    37aa:	3908      	subs	r1, #8
    37ac:	408c      	lsls	r4, r1
    37ae:	0013      	movs	r3, r2
    37b0:	408f      	lsls	r7, r1
    37b2:	4323      	orrs	r3, r4
    37b4:	469b      	mov	fp, r3
    37b6:	46b9      	mov	r9, r7
    37b8:	2300      	movs	r3, #0
    37ba:	4e2d      	ldr	r6, [pc, #180]	; (3870 <__aeabi_dmul+0x1ec>)
    37bc:	2700      	movs	r7, #0
    37be:	1a36      	subs	r6, r6, r0
    37c0:	9302      	str	r3, [sp, #8]
    37c2:	e784      	b.n	36ce <__aeabi_dmul+0x4a>
    37c4:	4653      	mov	r3, sl
    37c6:	4323      	orrs	r3, r4
    37c8:	d12a      	bne.n	3820 <__aeabi_dmul+0x19c>
    37ca:	2400      	movs	r4, #0
    37cc:	2002      	movs	r0, #2
    37ce:	e796      	b.n	36fe <__aeabi_dmul+0x7a>
    37d0:	4653      	mov	r3, sl
    37d2:	4323      	orrs	r3, r4
    37d4:	d020      	beq.n	3818 <__aeabi_dmul+0x194>
    37d6:	2c00      	cmp	r4, #0
    37d8:	d100      	bne.n	37dc <__aeabi_dmul+0x158>
    37da:	e157      	b.n	3a8c <__aeabi_dmul+0x408>
    37dc:	0020      	movs	r0, r4
    37de:	f000 fd53 	bl	4288 <__clzsi2>
    37e2:	0003      	movs	r3, r0
    37e4:	3b0b      	subs	r3, #11
    37e6:	2b1c      	cmp	r3, #28
    37e8:	dd00      	ble.n	37ec <__aeabi_dmul+0x168>
    37ea:	e149      	b.n	3a80 <__aeabi_dmul+0x3fc>
    37ec:	211d      	movs	r1, #29
    37ee:	1acb      	subs	r3, r1, r3
    37f0:	4651      	mov	r1, sl
    37f2:	0002      	movs	r2, r0
    37f4:	40d9      	lsrs	r1, r3
    37f6:	4653      	mov	r3, sl
    37f8:	3a08      	subs	r2, #8
    37fa:	4094      	lsls	r4, r2
    37fc:	4093      	lsls	r3, r2
    37fe:	430c      	orrs	r4, r1
    3800:	4a1b      	ldr	r2, [pc, #108]	; (3870 <__aeabi_dmul+0x1ec>)
    3802:	1a12      	subs	r2, r2, r0
    3804:	2000      	movs	r0, #0
    3806:	e77a      	b.n	36fe <__aeabi_dmul+0x7a>
    3808:	2501      	movs	r5, #1
    380a:	9b01      	ldr	r3, [sp, #4]
    380c:	4c14      	ldr	r4, [pc, #80]	; (3860 <__aeabi_dmul+0x1dc>)
    380e:	401d      	ands	r5, r3
    3810:	2300      	movs	r3, #0
    3812:	2200      	movs	r2, #0
    3814:	4699      	mov	r9, r3
    3816:	e79c      	b.n	3752 <__aeabi_dmul+0xce>
    3818:	2400      	movs	r4, #0
    381a:	2200      	movs	r2, #0
    381c:	2001      	movs	r0, #1
    381e:	e76e      	b.n	36fe <__aeabi_dmul+0x7a>
    3820:	4653      	mov	r3, sl
    3822:	2003      	movs	r0, #3
    3824:	e76b      	b.n	36fe <__aeabi_dmul+0x7a>
    3826:	2300      	movs	r3, #0
    3828:	469b      	mov	fp, r3
    382a:	3301      	adds	r3, #1
    382c:	2704      	movs	r7, #4
    382e:	2600      	movs	r6, #0
    3830:	9302      	str	r3, [sp, #8]
    3832:	e74c      	b.n	36ce <__aeabi_dmul+0x4a>
    3834:	2303      	movs	r3, #3
    3836:	4681      	mov	r9, r0
    3838:	270c      	movs	r7, #12
    383a:	9302      	str	r3, [sp, #8]
    383c:	e747      	b.n	36ce <__aeabi_dmul+0x4a>
    383e:	2280      	movs	r2, #128	; 0x80
    3840:	2300      	movs	r3, #0
    3842:	2500      	movs	r5, #0
    3844:	0312      	lsls	r2, r2, #12
    3846:	4699      	mov	r9, r3
    3848:	4c05      	ldr	r4, [pc, #20]	; (3860 <__aeabi_dmul+0x1dc>)
    384a:	e782      	b.n	3752 <__aeabi_dmul+0xce>
    384c:	465c      	mov	r4, fp
    384e:	464b      	mov	r3, r9
    3850:	9802      	ldr	r0, [sp, #8]
    3852:	e76f      	b.n	3734 <__aeabi_dmul+0xb0>
    3854:	465c      	mov	r4, fp
    3856:	464b      	mov	r3, r9
    3858:	9501      	str	r5, [sp, #4]
    385a:	9802      	ldr	r0, [sp, #8]
    385c:	e76a      	b.n	3734 <__aeabi_dmul+0xb0>
    385e:	46c0      	nop			; (mov r8, r8)
    3860:	000007ff 	.word	0x000007ff
    3864:	fffffc01 	.word	0xfffffc01
    3868:	00005618 	.word	0x00005618
    386c:	800fffff 	.word	0x800fffff
    3870:	fffffc0d 	.word	0xfffffc0d
    3874:	464a      	mov	r2, r9
    3876:	4649      	mov	r1, r9
    3878:	0c17      	lsrs	r7, r2, #16
    387a:	0c1a      	lsrs	r2, r3, #16
    387c:	041b      	lsls	r3, r3, #16
    387e:	0c1b      	lsrs	r3, r3, #16
    3880:	0408      	lsls	r0, r1, #16
    3882:	0019      	movs	r1, r3
    3884:	0c00      	lsrs	r0, r0, #16
    3886:	4341      	muls	r1, r0
    3888:	0015      	movs	r5, r2
    388a:	4688      	mov	r8, r1
    388c:	0019      	movs	r1, r3
    388e:	437d      	muls	r5, r7
    3890:	4379      	muls	r1, r7
    3892:	9503      	str	r5, [sp, #12]
    3894:	4689      	mov	r9, r1
    3896:	0029      	movs	r1, r5
    3898:	0015      	movs	r5, r2
    389a:	4345      	muls	r5, r0
    389c:	444d      	add	r5, r9
    389e:	9502      	str	r5, [sp, #8]
    38a0:	4645      	mov	r5, r8
    38a2:	0c2d      	lsrs	r5, r5, #16
    38a4:	46aa      	mov	sl, r5
    38a6:	9d02      	ldr	r5, [sp, #8]
    38a8:	4455      	add	r5, sl
    38aa:	45a9      	cmp	r9, r5
    38ac:	d906      	bls.n	38bc <__aeabi_dmul+0x238>
    38ae:	468a      	mov	sl, r1
    38b0:	2180      	movs	r1, #128	; 0x80
    38b2:	0249      	lsls	r1, r1, #9
    38b4:	4689      	mov	r9, r1
    38b6:	44ca      	add	sl, r9
    38b8:	4651      	mov	r1, sl
    38ba:	9103      	str	r1, [sp, #12]
    38bc:	0c29      	lsrs	r1, r5, #16
    38be:	9104      	str	r1, [sp, #16]
    38c0:	4641      	mov	r1, r8
    38c2:	0409      	lsls	r1, r1, #16
    38c4:	042d      	lsls	r5, r5, #16
    38c6:	0c09      	lsrs	r1, r1, #16
    38c8:	4688      	mov	r8, r1
    38ca:	0029      	movs	r1, r5
    38cc:	0c25      	lsrs	r5, r4, #16
    38ce:	0424      	lsls	r4, r4, #16
    38d0:	4441      	add	r1, r8
    38d2:	0c24      	lsrs	r4, r4, #16
    38d4:	9105      	str	r1, [sp, #20]
    38d6:	0021      	movs	r1, r4
    38d8:	4341      	muls	r1, r0
    38da:	4688      	mov	r8, r1
    38dc:	0021      	movs	r1, r4
    38de:	4379      	muls	r1, r7
    38e0:	468a      	mov	sl, r1
    38e2:	4368      	muls	r0, r5
    38e4:	4641      	mov	r1, r8
    38e6:	4450      	add	r0, sl
    38e8:	4681      	mov	r9, r0
    38ea:	0c08      	lsrs	r0, r1, #16
    38ec:	4448      	add	r0, r9
    38ee:	436f      	muls	r7, r5
    38f0:	4582      	cmp	sl, r0
    38f2:	d903      	bls.n	38fc <__aeabi_dmul+0x278>
    38f4:	2180      	movs	r1, #128	; 0x80
    38f6:	0249      	lsls	r1, r1, #9
    38f8:	4689      	mov	r9, r1
    38fa:	444f      	add	r7, r9
    38fc:	0c01      	lsrs	r1, r0, #16
    38fe:	4689      	mov	r9, r1
    3900:	0039      	movs	r1, r7
    3902:	4449      	add	r1, r9
    3904:	9102      	str	r1, [sp, #8]
    3906:	4641      	mov	r1, r8
    3908:	040f      	lsls	r7, r1, #16
    390a:	9904      	ldr	r1, [sp, #16]
    390c:	0c3f      	lsrs	r7, r7, #16
    390e:	4688      	mov	r8, r1
    3910:	0400      	lsls	r0, r0, #16
    3912:	19c0      	adds	r0, r0, r7
    3914:	4480      	add	r8, r0
    3916:	4641      	mov	r1, r8
    3918:	9104      	str	r1, [sp, #16]
    391a:	4659      	mov	r1, fp
    391c:	0c0f      	lsrs	r7, r1, #16
    391e:	0409      	lsls	r1, r1, #16
    3920:	0c09      	lsrs	r1, r1, #16
    3922:	4688      	mov	r8, r1
    3924:	4359      	muls	r1, r3
    3926:	468a      	mov	sl, r1
    3928:	0039      	movs	r1, r7
    392a:	4351      	muls	r1, r2
    392c:	4689      	mov	r9, r1
    392e:	4641      	mov	r1, r8
    3930:	434a      	muls	r2, r1
    3932:	4651      	mov	r1, sl
    3934:	0c09      	lsrs	r1, r1, #16
    3936:	468b      	mov	fp, r1
    3938:	437b      	muls	r3, r7
    393a:	18d2      	adds	r2, r2, r3
    393c:	445a      	add	r2, fp
    393e:	4293      	cmp	r3, r2
    3940:	d903      	bls.n	394a <__aeabi_dmul+0x2c6>
    3942:	2380      	movs	r3, #128	; 0x80
    3944:	025b      	lsls	r3, r3, #9
    3946:	469b      	mov	fp, r3
    3948:	44d9      	add	r9, fp
    394a:	4651      	mov	r1, sl
    394c:	0409      	lsls	r1, r1, #16
    394e:	0c09      	lsrs	r1, r1, #16
    3950:	468a      	mov	sl, r1
    3952:	4641      	mov	r1, r8
    3954:	4361      	muls	r1, r4
    3956:	437c      	muls	r4, r7
    3958:	0c13      	lsrs	r3, r2, #16
    395a:	0412      	lsls	r2, r2, #16
    395c:	444b      	add	r3, r9
    395e:	4452      	add	r2, sl
    3960:	46a1      	mov	r9, r4
    3962:	468a      	mov	sl, r1
    3964:	003c      	movs	r4, r7
    3966:	4641      	mov	r1, r8
    3968:	436c      	muls	r4, r5
    396a:	434d      	muls	r5, r1
    396c:	4651      	mov	r1, sl
    396e:	444d      	add	r5, r9
    3970:	0c0f      	lsrs	r7, r1, #16
    3972:	197d      	adds	r5, r7, r5
    3974:	45a9      	cmp	r9, r5
    3976:	d903      	bls.n	3980 <__aeabi_dmul+0x2fc>
    3978:	2180      	movs	r1, #128	; 0x80
    397a:	0249      	lsls	r1, r1, #9
    397c:	4688      	mov	r8, r1
    397e:	4444      	add	r4, r8
    3980:	9f04      	ldr	r7, [sp, #16]
    3982:	9903      	ldr	r1, [sp, #12]
    3984:	46b8      	mov	r8, r7
    3986:	4441      	add	r1, r8
    3988:	468b      	mov	fp, r1
    398a:	4583      	cmp	fp, r0
    398c:	4180      	sbcs	r0, r0
    398e:	4241      	negs	r1, r0
    3990:	4688      	mov	r8, r1
    3992:	4651      	mov	r1, sl
    3994:	0408      	lsls	r0, r1, #16
    3996:	042f      	lsls	r7, r5, #16
    3998:	0c00      	lsrs	r0, r0, #16
    399a:	183f      	adds	r7, r7, r0
    399c:	4658      	mov	r0, fp
    399e:	9902      	ldr	r1, [sp, #8]
    39a0:	1810      	adds	r0, r2, r0
    39a2:	4689      	mov	r9, r1
    39a4:	4290      	cmp	r0, r2
    39a6:	4192      	sbcs	r2, r2
    39a8:	444f      	add	r7, r9
    39aa:	46ba      	mov	sl, r7
    39ac:	4252      	negs	r2, r2
    39ae:	4699      	mov	r9, r3
    39b0:	4693      	mov	fp, r2
    39b2:	44c2      	add	sl, r8
    39b4:	44d1      	add	r9, sl
    39b6:	44cb      	add	fp, r9
    39b8:	428f      	cmp	r7, r1
    39ba:	41bf      	sbcs	r7, r7
    39bc:	45c2      	cmp	sl, r8
    39be:	4189      	sbcs	r1, r1
    39c0:	4599      	cmp	r9, r3
    39c2:	419b      	sbcs	r3, r3
    39c4:	4593      	cmp	fp, r2
    39c6:	4192      	sbcs	r2, r2
    39c8:	427f      	negs	r7, r7
    39ca:	4249      	negs	r1, r1
    39cc:	0c2d      	lsrs	r5, r5, #16
    39ce:	4252      	negs	r2, r2
    39d0:	430f      	orrs	r7, r1
    39d2:	425b      	negs	r3, r3
    39d4:	4313      	orrs	r3, r2
    39d6:	197f      	adds	r7, r7, r5
    39d8:	18ff      	adds	r7, r7, r3
    39da:	465b      	mov	r3, fp
    39dc:	193c      	adds	r4, r7, r4
    39de:	0ddb      	lsrs	r3, r3, #23
    39e0:	9a05      	ldr	r2, [sp, #20]
    39e2:	0264      	lsls	r4, r4, #9
    39e4:	431c      	orrs	r4, r3
    39e6:	0243      	lsls	r3, r0, #9
    39e8:	4313      	orrs	r3, r2
    39ea:	1e5d      	subs	r5, r3, #1
    39ec:	41ab      	sbcs	r3, r5
    39ee:	465a      	mov	r2, fp
    39f0:	0dc0      	lsrs	r0, r0, #23
    39f2:	4303      	orrs	r3, r0
    39f4:	0252      	lsls	r2, r2, #9
    39f6:	4313      	orrs	r3, r2
    39f8:	01e2      	lsls	r2, r4, #7
    39fa:	d556      	bpl.n	3aaa <__aeabi_dmul+0x426>
    39fc:	2001      	movs	r0, #1
    39fe:	085a      	lsrs	r2, r3, #1
    3a00:	4003      	ands	r3, r0
    3a02:	4313      	orrs	r3, r2
    3a04:	07e2      	lsls	r2, r4, #31
    3a06:	4313      	orrs	r3, r2
    3a08:	0864      	lsrs	r4, r4, #1
    3a0a:	485a      	ldr	r0, [pc, #360]	; (3b74 <__aeabi_dmul+0x4f0>)
    3a0c:	4460      	add	r0, ip
    3a0e:	2800      	cmp	r0, #0
    3a10:	dd4d      	ble.n	3aae <__aeabi_dmul+0x42a>
    3a12:	075a      	lsls	r2, r3, #29
    3a14:	d009      	beq.n	3a2a <__aeabi_dmul+0x3a6>
    3a16:	220f      	movs	r2, #15
    3a18:	401a      	ands	r2, r3
    3a1a:	2a04      	cmp	r2, #4
    3a1c:	d005      	beq.n	3a2a <__aeabi_dmul+0x3a6>
    3a1e:	1d1a      	adds	r2, r3, #4
    3a20:	429a      	cmp	r2, r3
    3a22:	419b      	sbcs	r3, r3
    3a24:	425b      	negs	r3, r3
    3a26:	18e4      	adds	r4, r4, r3
    3a28:	0013      	movs	r3, r2
    3a2a:	01e2      	lsls	r2, r4, #7
    3a2c:	d504      	bpl.n	3a38 <__aeabi_dmul+0x3b4>
    3a2e:	2080      	movs	r0, #128	; 0x80
    3a30:	4a51      	ldr	r2, [pc, #324]	; (3b78 <__aeabi_dmul+0x4f4>)
    3a32:	00c0      	lsls	r0, r0, #3
    3a34:	4014      	ands	r4, r2
    3a36:	4460      	add	r0, ip
    3a38:	4a50      	ldr	r2, [pc, #320]	; (3b7c <__aeabi_dmul+0x4f8>)
    3a3a:	4290      	cmp	r0, r2
    3a3c:	dd00      	ble.n	3a40 <__aeabi_dmul+0x3bc>
    3a3e:	e6e3      	b.n	3808 <__aeabi_dmul+0x184>
    3a40:	2501      	movs	r5, #1
    3a42:	08db      	lsrs	r3, r3, #3
    3a44:	0762      	lsls	r2, r4, #29
    3a46:	431a      	orrs	r2, r3
    3a48:	0264      	lsls	r4, r4, #9
    3a4a:	9b01      	ldr	r3, [sp, #4]
    3a4c:	4691      	mov	r9, r2
    3a4e:	0b22      	lsrs	r2, r4, #12
    3a50:	0544      	lsls	r4, r0, #21
    3a52:	0d64      	lsrs	r4, r4, #21
    3a54:	401d      	ands	r5, r3
    3a56:	e67c      	b.n	3752 <__aeabi_dmul+0xce>
    3a58:	2280      	movs	r2, #128	; 0x80
    3a5a:	4659      	mov	r1, fp
    3a5c:	0312      	lsls	r2, r2, #12
    3a5e:	4211      	tst	r1, r2
    3a60:	d008      	beq.n	3a74 <__aeabi_dmul+0x3f0>
    3a62:	4214      	tst	r4, r2
    3a64:	d106      	bne.n	3a74 <__aeabi_dmul+0x3f0>
    3a66:	4322      	orrs	r2, r4
    3a68:	0312      	lsls	r2, r2, #12
    3a6a:	0b12      	lsrs	r2, r2, #12
    3a6c:	4645      	mov	r5, r8
    3a6e:	4699      	mov	r9, r3
    3a70:	4c43      	ldr	r4, [pc, #268]	; (3b80 <__aeabi_dmul+0x4fc>)
    3a72:	e66e      	b.n	3752 <__aeabi_dmul+0xce>
    3a74:	465b      	mov	r3, fp
    3a76:	431a      	orrs	r2, r3
    3a78:	0312      	lsls	r2, r2, #12
    3a7a:	0b12      	lsrs	r2, r2, #12
    3a7c:	4c40      	ldr	r4, [pc, #256]	; (3b80 <__aeabi_dmul+0x4fc>)
    3a7e:	e668      	b.n	3752 <__aeabi_dmul+0xce>
    3a80:	0003      	movs	r3, r0
    3a82:	4654      	mov	r4, sl
    3a84:	3b28      	subs	r3, #40	; 0x28
    3a86:	409c      	lsls	r4, r3
    3a88:	2300      	movs	r3, #0
    3a8a:	e6b9      	b.n	3800 <__aeabi_dmul+0x17c>
    3a8c:	f000 fbfc 	bl	4288 <__clzsi2>
    3a90:	3020      	adds	r0, #32
    3a92:	e6a6      	b.n	37e2 <__aeabi_dmul+0x15e>
    3a94:	0003      	movs	r3, r0
    3a96:	3b28      	subs	r3, #40	; 0x28
    3a98:	409f      	lsls	r7, r3
    3a9a:	2300      	movs	r3, #0
    3a9c:	46bb      	mov	fp, r7
    3a9e:	4699      	mov	r9, r3
    3aa0:	e68a      	b.n	37b8 <__aeabi_dmul+0x134>
    3aa2:	f000 fbf1 	bl	4288 <__clzsi2>
    3aa6:	3020      	adds	r0, #32
    3aa8:	e674      	b.n	3794 <__aeabi_dmul+0x110>
    3aaa:	46b4      	mov	ip, r6
    3aac:	e7ad      	b.n	3a0a <__aeabi_dmul+0x386>
    3aae:	2501      	movs	r5, #1
    3ab0:	1a2a      	subs	r2, r5, r0
    3ab2:	2a38      	cmp	r2, #56	; 0x38
    3ab4:	dd06      	ble.n	3ac4 <__aeabi_dmul+0x440>
    3ab6:	9b01      	ldr	r3, [sp, #4]
    3ab8:	2400      	movs	r4, #0
    3aba:	401d      	ands	r5, r3
    3abc:	2300      	movs	r3, #0
    3abe:	2200      	movs	r2, #0
    3ac0:	4699      	mov	r9, r3
    3ac2:	e646      	b.n	3752 <__aeabi_dmul+0xce>
    3ac4:	2a1f      	cmp	r2, #31
    3ac6:	dc21      	bgt.n	3b0c <__aeabi_dmul+0x488>
    3ac8:	2520      	movs	r5, #32
    3aca:	0020      	movs	r0, r4
    3acc:	1aad      	subs	r5, r5, r2
    3ace:	001e      	movs	r6, r3
    3ad0:	40ab      	lsls	r3, r5
    3ad2:	40a8      	lsls	r0, r5
    3ad4:	40d6      	lsrs	r6, r2
    3ad6:	1e5d      	subs	r5, r3, #1
    3ad8:	41ab      	sbcs	r3, r5
    3ada:	4330      	orrs	r0, r6
    3adc:	4318      	orrs	r0, r3
    3ade:	40d4      	lsrs	r4, r2
    3ae0:	0743      	lsls	r3, r0, #29
    3ae2:	d009      	beq.n	3af8 <__aeabi_dmul+0x474>
    3ae4:	230f      	movs	r3, #15
    3ae6:	4003      	ands	r3, r0
    3ae8:	2b04      	cmp	r3, #4
    3aea:	d005      	beq.n	3af8 <__aeabi_dmul+0x474>
    3aec:	0003      	movs	r3, r0
    3aee:	1d18      	adds	r0, r3, #4
    3af0:	4298      	cmp	r0, r3
    3af2:	419b      	sbcs	r3, r3
    3af4:	425b      	negs	r3, r3
    3af6:	18e4      	adds	r4, r4, r3
    3af8:	0223      	lsls	r3, r4, #8
    3afa:	d521      	bpl.n	3b40 <__aeabi_dmul+0x4bc>
    3afc:	2501      	movs	r5, #1
    3afe:	9b01      	ldr	r3, [sp, #4]
    3b00:	2401      	movs	r4, #1
    3b02:	401d      	ands	r5, r3
    3b04:	2300      	movs	r3, #0
    3b06:	2200      	movs	r2, #0
    3b08:	4699      	mov	r9, r3
    3b0a:	e622      	b.n	3752 <__aeabi_dmul+0xce>
    3b0c:	251f      	movs	r5, #31
    3b0e:	0021      	movs	r1, r4
    3b10:	426d      	negs	r5, r5
    3b12:	1a28      	subs	r0, r5, r0
    3b14:	40c1      	lsrs	r1, r0
    3b16:	0008      	movs	r0, r1
    3b18:	2a20      	cmp	r2, #32
    3b1a:	d01d      	beq.n	3b58 <__aeabi_dmul+0x4d4>
    3b1c:	355f      	adds	r5, #95	; 0x5f
    3b1e:	1aaa      	subs	r2, r5, r2
    3b20:	4094      	lsls	r4, r2
    3b22:	4323      	orrs	r3, r4
    3b24:	1e5c      	subs	r4, r3, #1
    3b26:	41a3      	sbcs	r3, r4
    3b28:	2507      	movs	r5, #7
    3b2a:	4303      	orrs	r3, r0
    3b2c:	401d      	ands	r5, r3
    3b2e:	2200      	movs	r2, #0
    3b30:	2d00      	cmp	r5, #0
    3b32:	d009      	beq.n	3b48 <__aeabi_dmul+0x4c4>
    3b34:	220f      	movs	r2, #15
    3b36:	2400      	movs	r4, #0
    3b38:	401a      	ands	r2, r3
    3b3a:	0018      	movs	r0, r3
    3b3c:	2a04      	cmp	r2, #4
    3b3e:	d1d6      	bne.n	3aee <__aeabi_dmul+0x46a>
    3b40:	0003      	movs	r3, r0
    3b42:	0765      	lsls	r5, r4, #29
    3b44:	0264      	lsls	r4, r4, #9
    3b46:	0b22      	lsrs	r2, r4, #12
    3b48:	08db      	lsrs	r3, r3, #3
    3b4a:	432b      	orrs	r3, r5
    3b4c:	2501      	movs	r5, #1
    3b4e:	4699      	mov	r9, r3
    3b50:	9b01      	ldr	r3, [sp, #4]
    3b52:	2400      	movs	r4, #0
    3b54:	401d      	ands	r5, r3
    3b56:	e5fc      	b.n	3752 <__aeabi_dmul+0xce>
    3b58:	2400      	movs	r4, #0
    3b5a:	e7e2      	b.n	3b22 <__aeabi_dmul+0x49e>
    3b5c:	2280      	movs	r2, #128	; 0x80
    3b5e:	2501      	movs	r5, #1
    3b60:	0312      	lsls	r2, r2, #12
    3b62:	4322      	orrs	r2, r4
    3b64:	9901      	ldr	r1, [sp, #4]
    3b66:	0312      	lsls	r2, r2, #12
    3b68:	0b12      	lsrs	r2, r2, #12
    3b6a:	400d      	ands	r5, r1
    3b6c:	4699      	mov	r9, r3
    3b6e:	4c04      	ldr	r4, [pc, #16]	; (3b80 <__aeabi_dmul+0x4fc>)
    3b70:	e5ef      	b.n	3752 <__aeabi_dmul+0xce>
    3b72:	46c0      	nop			; (mov r8, r8)
    3b74:	000003ff 	.word	0x000003ff
    3b78:	feffffff 	.word	0xfeffffff
    3b7c:	000007fe 	.word	0x000007fe
    3b80:	000007ff 	.word	0x000007ff

00003b84 <__aeabi_dsub>:
    3b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b86:	4646      	mov	r6, r8
    3b88:	46d6      	mov	lr, sl
    3b8a:	464f      	mov	r7, r9
    3b8c:	030c      	lsls	r4, r1, #12
    3b8e:	b5c0      	push	{r6, r7, lr}
    3b90:	0fcd      	lsrs	r5, r1, #31
    3b92:	004e      	lsls	r6, r1, #1
    3b94:	0a61      	lsrs	r1, r4, #9
    3b96:	0f44      	lsrs	r4, r0, #29
    3b98:	430c      	orrs	r4, r1
    3b9a:	00c1      	lsls	r1, r0, #3
    3b9c:	0058      	lsls	r0, r3, #1
    3b9e:	0d40      	lsrs	r0, r0, #21
    3ba0:	4684      	mov	ip, r0
    3ba2:	468a      	mov	sl, r1
    3ba4:	000f      	movs	r7, r1
    3ba6:	0319      	lsls	r1, r3, #12
    3ba8:	0f50      	lsrs	r0, r2, #29
    3baa:	0a49      	lsrs	r1, r1, #9
    3bac:	4301      	orrs	r1, r0
    3bae:	48c6      	ldr	r0, [pc, #792]	; (3ec8 <__aeabi_dsub+0x344>)
    3bb0:	0d76      	lsrs	r6, r6, #21
    3bb2:	46a8      	mov	r8, r5
    3bb4:	0fdb      	lsrs	r3, r3, #31
    3bb6:	00d2      	lsls	r2, r2, #3
    3bb8:	4584      	cmp	ip, r0
    3bba:	d100      	bne.n	3bbe <__aeabi_dsub+0x3a>
    3bbc:	e0d8      	b.n	3d70 <__aeabi_dsub+0x1ec>
    3bbe:	2001      	movs	r0, #1
    3bc0:	4043      	eors	r3, r0
    3bc2:	42ab      	cmp	r3, r5
    3bc4:	d100      	bne.n	3bc8 <__aeabi_dsub+0x44>
    3bc6:	e0a6      	b.n	3d16 <__aeabi_dsub+0x192>
    3bc8:	4660      	mov	r0, ip
    3bca:	1a35      	subs	r5, r6, r0
    3bcc:	2d00      	cmp	r5, #0
    3bce:	dc00      	bgt.n	3bd2 <__aeabi_dsub+0x4e>
    3bd0:	e105      	b.n	3dde <__aeabi_dsub+0x25a>
    3bd2:	2800      	cmp	r0, #0
    3bd4:	d110      	bne.n	3bf8 <__aeabi_dsub+0x74>
    3bd6:	000b      	movs	r3, r1
    3bd8:	4313      	orrs	r3, r2
    3bda:	d100      	bne.n	3bde <__aeabi_dsub+0x5a>
    3bdc:	e0d7      	b.n	3d8e <__aeabi_dsub+0x20a>
    3bde:	1e6b      	subs	r3, r5, #1
    3be0:	2b00      	cmp	r3, #0
    3be2:	d000      	beq.n	3be6 <__aeabi_dsub+0x62>
    3be4:	e14b      	b.n	3e7e <__aeabi_dsub+0x2fa>
    3be6:	4653      	mov	r3, sl
    3be8:	1a9f      	subs	r7, r3, r2
    3bea:	45ba      	cmp	sl, r7
    3bec:	4180      	sbcs	r0, r0
    3bee:	1a64      	subs	r4, r4, r1
    3bf0:	4240      	negs	r0, r0
    3bf2:	1a24      	subs	r4, r4, r0
    3bf4:	2601      	movs	r6, #1
    3bf6:	e01e      	b.n	3c36 <__aeabi_dsub+0xb2>
    3bf8:	4bb3      	ldr	r3, [pc, #716]	; (3ec8 <__aeabi_dsub+0x344>)
    3bfa:	429e      	cmp	r6, r3
    3bfc:	d048      	beq.n	3c90 <__aeabi_dsub+0x10c>
    3bfe:	2380      	movs	r3, #128	; 0x80
    3c00:	041b      	lsls	r3, r3, #16
    3c02:	4319      	orrs	r1, r3
    3c04:	2d38      	cmp	r5, #56	; 0x38
    3c06:	dd00      	ble.n	3c0a <__aeabi_dsub+0x86>
    3c08:	e119      	b.n	3e3e <__aeabi_dsub+0x2ba>
    3c0a:	2d1f      	cmp	r5, #31
    3c0c:	dd00      	ble.n	3c10 <__aeabi_dsub+0x8c>
    3c0e:	e14c      	b.n	3eaa <__aeabi_dsub+0x326>
    3c10:	2320      	movs	r3, #32
    3c12:	000f      	movs	r7, r1
    3c14:	1b5b      	subs	r3, r3, r5
    3c16:	0010      	movs	r0, r2
    3c18:	409a      	lsls	r2, r3
    3c1a:	409f      	lsls	r7, r3
    3c1c:	40e8      	lsrs	r0, r5
    3c1e:	1e53      	subs	r3, r2, #1
    3c20:	419a      	sbcs	r2, r3
    3c22:	40e9      	lsrs	r1, r5
    3c24:	4307      	orrs	r7, r0
    3c26:	4317      	orrs	r7, r2
    3c28:	4653      	mov	r3, sl
    3c2a:	1bdf      	subs	r7, r3, r7
    3c2c:	1a61      	subs	r1, r4, r1
    3c2e:	45ba      	cmp	sl, r7
    3c30:	41a4      	sbcs	r4, r4
    3c32:	4264      	negs	r4, r4
    3c34:	1b0c      	subs	r4, r1, r4
    3c36:	0223      	lsls	r3, r4, #8
    3c38:	d400      	bmi.n	3c3c <__aeabi_dsub+0xb8>
    3c3a:	e0c5      	b.n	3dc8 <__aeabi_dsub+0x244>
    3c3c:	0264      	lsls	r4, r4, #9
    3c3e:	0a65      	lsrs	r5, r4, #9
    3c40:	2d00      	cmp	r5, #0
    3c42:	d100      	bne.n	3c46 <__aeabi_dsub+0xc2>
    3c44:	e0f6      	b.n	3e34 <__aeabi_dsub+0x2b0>
    3c46:	0028      	movs	r0, r5
    3c48:	f000 fb1e 	bl	4288 <__clzsi2>
    3c4c:	0003      	movs	r3, r0
    3c4e:	3b08      	subs	r3, #8
    3c50:	2b1f      	cmp	r3, #31
    3c52:	dd00      	ble.n	3c56 <__aeabi_dsub+0xd2>
    3c54:	e0e9      	b.n	3e2a <__aeabi_dsub+0x2a6>
    3c56:	2220      	movs	r2, #32
    3c58:	003c      	movs	r4, r7
    3c5a:	1ad2      	subs	r2, r2, r3
    3c5c:	409d      	lsls	r5, r3
    3c5e:	40d4      	lsrs	r4, r2
    3c60:	409f      	lsls	r7, r3
    3c62:	4325      	orrs	r5, r4
    3c64:	429e      	cmp	r6, r3
    3c66:	dd00      	ble.n	3c6a <__aeabi_dsub+0xe6>
    3c68:	e0db      	b.n	3e22 <__aeabi_dsub+0x29e>
    3c6a:	1b9e      	subs	r6, r3, r6
    3c6c:	1c73      	adds	r3, r6, #1
    3c6e:	2b1f      	cmp	r3, #31
    3c70:	dd00      	ble.n	3c74 <__aeabi_dsub+0xf0>
    3c72:	e10a      	b.n	3e8a <__aeabi_dsub+0x306>
    3c74:	2220      	movs	r2, #32
    3c76:	0038      	movs	r0, r7
    3c78:	1ad2      	subs	r2, r2, r3
    3c7a:	0029      	movs	r1, r5
    3c7c:	4097      	lsls	r7, r2
    3c7e:	002c      	movs	r4, r5
    3c80:	4091      	lsls	r1, r2
    3c82:	40d8      	lsrs	r0, r3
    3c84:	1e7a      	subs	r2, r7, #1
    3c86:	4197      	sbcs	r7, r2
    3c88:	40dc      	lsrs	r4, r3
    3c8a:	2600      	movs	r6, #0
    3c8c:	4301      	orrs	r1, r0
    3c8e:	430f      	orrs	r7, r1
    3c90:	077b      	lsls	r3, r7, #29
    3c92:	d009      	beq.n	3ca8 <__aeabi_dsub+0x124>
    3c94:	230f      	movs	r3, #15
    3c96:	403b      	ands	r3, r7
    3c98:	2b04      	cmp	r3, #4
    3c9a:	d005      	beq.n	3ca8 <__aeabi_dsub+0x124>
    3c9c:	1d3b      	adds	r3, r7, #4
    3c9e:	42bb      	cmp	r3, r7
    3ca0:	41bf      	sbcs	r7, r7
    3ca2:	427f      	negs	r7, r7
    3ca4:	19e4      	adds	r4, r4, r7
    3ca6:	001f      	movs	r7, r3
    3ca8:	0223      	lsls	r3, r4, #8
    3caa:	d525      	bpl.n	3cf8 <__aeabi_dsub+0x174>
    3cac:	4b86      	ldr	r3, [pc, #536]	; (3ec8 <__aeabi_dsub+0x344>)
    3cae:	3601      	adds	r6, #1
    3cb0:	429e      	cmp	r6, r3
    3cb2:	d100      	bne.n	3cb6 <__aeabi_dsub+0x132>
    3cb4:	e0af      	b.n	3e16 <__aeabi_dsub+0x292>
    3cb6:	4b85      	ldr	r3, [pc, #532]	; (3ecc <__aeabi_dsub+0x348>)
    3cb8:	2501      	movs	r5, #1
    3cba:	401c      	ands	r4, r3
    3cbc:	4643      	mov	r3, r8
    3cbe:	0762      	lsls	r2, r4, #29
    3cc0:	08ff      	lsrs	r7, r7, #3
    3cc2:	0264      	lsls	r4, r4, #9
    3cc4:	0576      	lsls	r6, r6, #21
    3cc6:	4317      	orrs	r7, r2
    3cc8:	0b24      	lsrs	r4, r4, #12
    3cca:	0d76      	lsrs	r6, r6, #21
    3ccc:	401d      	ands	r5, r3
    3cce:	2100      	movs	r1, #0
    3cd0:	0324      	lsls	r4, r4, #12
    3cd2:	0b23      	lsrs	r3, r4, #12
    3cd4:	0d0c      	lsrs	r4, r1, #20
    3cd6:	4a7e      	ldr	r2, [pc, #504]	; (3ed0 <__aeabi_dsub+0x34c>)
    3cd8:	0524      	lsls	r4, r4, #20
    3cda:	431c      	orrs	r4, r3
    3cdc:	4014      	ands	r4, r2
    3cde:	0533      	lsls	r3, r6, #20
    3ce0:	4323      	orrs	r3, r4
    3ce2:	005b      	lsls	r3, r3, #1
    3ce4:	07ed      	lsls	r5, r5, #31
    3ce6:	085b      	lsrs	r3, r3, #1
    3ce8:	432b      	orrs	r3, r5
    3cea:	0038      	movs	r0, r7
    3cec:	0019      	movs	r1, r3
    3cee:	bc1c      	pop	{r2, r3, r4}
    3cf0:	4690      	mov	r8, r2
    3cf2:	4699      	mov	r9, r3
    3cf4:	46a2      	mov	sl, r4
    3cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cf8:	2501      	movs	r5, #1
    3cfa:	4643      	mov	r3, r8
    3cfc:	0762      	lsls	r2, r4, #29
    3cfe:	08ff      	lsrs	r7, r7, #3
    3d00:	4317      	orrs	r7, r2
    3d02:	08e4      	lsrs	r4, r4, #3
    3d04:	401d      	ands	r5, r3
    3d06:	4b70      	ldr	r3, [pc, #448]	; (3ec8 <__aeabi_dsub+0x344>)
    3d08:	429e      	cmp	r6, r3
    3d0a:	d036      	beq.n	3d7a <__aeabi_dsub+0x1f6>
    3d0c:	0324      	lsls	r4, r4, #12
    3d0e:	0576      	lsls	r6, r6, #21
    3d10:	0b24      	lsrs	r4, r4, #12
    3d12:	0d76      	lsrs	r6, r6, #21
    3d14:	e7db      	b.n	3cce <__aeabi_dsub+0x14a>
    3d16:	4663      	mov	r3, ip
    3d18:	1af3      	subs	r3, r6, r3
    3d1a:	2b00      	cmp	r3, #0
    3d1c:	dc00      	bgt.n	3d20 <__aeabi_dsub+0x19c>
    3d1e:	e094      	b.n	3e4a <__aeabi_dsub+0x2c6>
    3d20:	4660      	mov	r0, ip
    3d22:	2800      	cmp	r0, #0
    3d24:	d035      	beq.n	3d92 <__aeabi_dsub+0x20e>
    3d26:	4868      	ldr	r0, [pc, #416]	; (3ec8 <__aeabi_dsub+0x344>)
    3d28:	4286      	cmp	r6, r0
    3d2a:	d0b1      	beq.n	3c90 <__aeabi_dsub+0x10c>
    3d2c:	2780      	movs	r7, #128	; 0x80
    3d2e:	043f      	lsls	r7, r7, #16
    3d30:	4339      	orrs	r1, r7
    3d32:	2b38      	cmp	r3, #56	; 0x38
    3d34:	dc00      	bgt.n	3d38 <__aeabi_dsub+0x1b4>
    3d36:	e0fd      	b.n	3f34 <__aeabi_dsub+0x3b0>
    3d38:	430a      	orrs	r2, r1
    3d3a:	0017      	movs	r7, r2
    3d3c:	2100      	movs	r1, #0
    3d3e:	1e7a      	subs	r2, r7, #1
    3d40:	4197      	sbcs	r7, r2
    3d42:	4457      	add	r7, sl
    3d44:	4557      	cmp	r7, sl
    3d46:	4180      	sbcs	r0, r0
    3d48:	1909      	adds	r1, r1, r4
    3d4a:	4244      	negs	r4, r0
    3d4c:	190c      	adds	r4, r1, r4
    3d4e:	0223      	lsls	r3, r4, #8
    3d50:	d53a      	bpl.n	3dc8 <__aeabi_dsub+0x244>
    3d52:	4b5d      	ldr	r3, [pc, #372]	; (3ec8 <__aeabi_dsub+0x344>)
    3d54:	3601      	adds	r6, #1
    3d56:	429e      	cmp	r6, r3
    3d58:	d100      	bne.n	3d5c <__aeabi_dsub+0x1d8>
    3d5a:	e14b      	b.n	3ff4 <__aeabi_dsub+0x470>
    3d5c:	2201      	movs	r2, #1
    3d5e:	4b5b      	ldr	r3, [pc, #364]	; (3ecc <__aeabi_dsub+0x348>)
    3d60:	401c      	ands	r4, r3
    3d62:	087b      	lsrs	r3, r7, #1
    3d64:	4017      	ands	r7, r2
    3d66:	431f      	orrs	r7, r3
    3d68:	07e2      	lsls	r2, r4, #31
    3d6a:	4317      	orrs	r7, r2
    3d6c:	0864      	lsrs	r4, r4, #1
    3d6e:	e78f      	b.n	3c90 <__aeabi_dsub+0x10c>
    3d70:	0008      	movs	r0, r1
    3d72:	4310      	orrs	r0, r2
    3d74:	d000      	beq.n	3d78 <__aeabi_dsub+0x1f4>
    3d76:	e724      	b.n	3bc2 <__aeabi_dsub+0x3e>
    3d78:	e721      	b.n	3bbe <__aeabi_dsub+0x3a>
    3d7a:	0023      	movs	r3, r4
    3d7c:	433b      	orrs	r3, r7
    3d7e:	d100      	bne.n	3d82 <__aeabi_dsub+0x1fe>
    3d80:	e1b9      	b.n	40f6 <__aeabi_dsub+0x572>
    3d82:	2280      	movs	r2, #128	; 0x80
    3d84:	0312      	lsls	r2, r2, #12
    3d86:	4314      	orrs	r4, r2
    3d88:	0324      	lsls	r4, r4, #12
    3d8a:	0b24      	lsrs	r4, r4, #12
    3d8c:	e79f      	b.n	3cce <__aeabi_dsub+0x14a>
    3d8e:	002e      	movs	r6, r5
    3d90:	e77e      	b.n	3c90 <__aeabi_dsub+0x10c>
    3d92:	0008      	movs	r0, r1
    3d94:	4310      	orrs	r0, r2
    3d96:	d100      	bne.n	3d9a <__aeabi_dsub+0x216>
    3d98:	e0ca      	b.n	3f30 <__aeabi_dsub+0x3ac>
    3d9a:	1e58      	subs	r0, r3, #1
    3d9c:	4684      	mov	ip, r0
    3d9e:	2800      	cmp	r0, #0
    3da0:	d000      	beq.n	3da4 <__aeabi_dsub+0x220>
    3da2:	e0e7      	b.n	3f74 <__aeabi_dsub+0x3f0>
    3da4:	4452      	add	r2, sl
    3da6:	4552      	cmp	r2, sl
    3da8:	4180      	sbcs	r0, r0
    3daa:	1864      	adds	r4, r4, r1
    3dac:	4240      	negs	r0, r0
    3dae:	1824      	adds	r4, r4, r0
    3db0:	0017      	movs	r7, r2
    3db2:	2601      	movs	r6, #1
    3db4:	0223      	lsls	r3, r4, #8
    3db6:	d507      	bpl.n	3dc8 <__aeabi_dsub+0x244>
    3db8:	2602      	movs	r6, #2
    3dba:	e7cf      	b.n	3d5c <__aeabi_dsub+0x1d8>
    3dbc:	4664      	mov	r4, ip
    3dbe:	432c      	orrs	r4, r5
    3dc0:	d100      	bne.n	3dc4 <__aeabi_dsub+0x240>
    3dc2:	e1b3      	b.n	412c <__aeabi_dsub+0x5a8>
    3dc4:	002c      	movs	r4, r5
    3dc6:	4667      	mov	r7, ip
    3dc8:	077b      	lsls	r3, r7, #29
    3dca:	d000      	beq.n	3dce <__aeabi_dsub+0x24a>
    3dcc:	e762      	b.n	3c94 <__aeabi_dsub+0x110>
    3dce:	0763      	lsls	r3, r4, #29
    3dd0:	08ff      	lsrs	r7, r7, #3
    3dd2:	431f      	orrs	r7, r3
    3dd4:	2501      	movs	r5, #1
    3dd6:	4643      	mov	r3, r8
    3dd8:	08e4      	lsrs	r4, r4, #3
    3dda:	401d      	ands	r5, r3
    3ddc:	e793      	b.n	3d06 <__aeabi_dsub+0x182>
    3dde:	2d00      	cmp	r5, #0
    3de0:	d178      	bne.n	3ed4 <__aeabi_dsub+0x350>
    3de2:	1c75      	adds	r5, r6, #1
    3de4:	056d      	lsls	r5, r5, #21
    3de6:	0d6d      	lsrs	r5, r5, #21
    3de8:	2d01      	cmp	r5, #1
    3dea:	dc00      	bgt.n	3dee <__aeabi_dsub+0x26a>
    3dec:	e0f2      	b.n	3fd4 <__aeabi_dsub+0x450>
    3dee:	4650      	mov	r0, sl
    3df0:	1a80      	subs	r0, r0, r2
    3df2:	4582      	cmp	sl, r0
    3df4:	41bf      	sbcs	r7, r7
    3df6:	1a65      	subs	r5, r4, r1
    3df8:	427f      	negs	r7, r7
    3dfa:	1bed      	subs	r5, r5, r7
    3dfc:	4684      	mov	ip, r0
    3dfe:	0228      	lsls	r0, r5, #8
    3e00:	d400      	bmi.n	3e04 <__aeabi_dsub+0x280>
    3e02:	e08c      	b.n	3f1e <__aeabi_dsub+0x39a>
    3e04:	4650      	mov	r0, sl
    3e06:	1a17      	subs	r7, r2, r0
    3e08:	42ba      	cmp	r2, r7
    3e0a:	4192      	sbcs	r2, r2
    3e0c:	1b0c      	subs	r4, r1, r4
    3e0e:	4255      	negs	r5, r2
    3e10:	1b65      	subs	r5, r4, r5
    3e12:	4698      	mov	r8, r3
    3e14:	e714      	b.n	3c40 <__aeabi_dsub+0xbc>
    3e16:	2501      	movs	r5, #1
    3e18:	4643      	mov	r3, r8
    3e1a:	2400      	movs	r4, #0
    3e1c:	401d      	ands	r5, r3
    3e1e:	2700      	movs	r7, #0
    3e20:	e755      	b.n	3cce <__aeabi_dsub+0x14a>
    3e22:	4c2a      	ldr	r4, [pc, #168]	; (3ecc <__aeabi_dsub+0x348>)
    3e24:	1af6      	subs	r6, r6, r3
    3e26:	402c      	ands	r4, r5
    3e28:	e732      	b.n	3c90 <__aeabi_dsub+0x10c>
    3e2a:	003d      	movs	r5, r7
    3e2c:	3828      	subs	r0, #40	; 0x28
    3e2e:	4085      	lsls	r5, r0
    3e30:	2700      	movs	r7, #0
    3e32:	e717      	b.n	3c64 <__aeabi_dsub+0xe0>
    3e34:	0038      	movs	r0, r7
    3e36:	f000 fa27 	bl	4288 <__clzsi2>
    3e3a:	3020      	adds	r0, #32
    3e3c:	e706      	b.n	3c4c <__aeabi_dsub+0xc8>
    3e3e:	430a      	orrs	r2, r1
    3e40:	0017      	movs	r7, r2
    3e42:	2100      	movs	r1, #0
    3e44:	1e7a      	subs	r2, r7, #1
    3e46:	4197      	sbcs	r7, r2
    3e48:	e6ee      	b.n	3c28 <__aeabi_dsub+0xa4>
    3e4a:	2b00      	cmp	r3, #0
    3e4c:	d000      	beq.n	3e50 <__aeabi_dsub+0x2cc>
    3e4e:	e0e5      	b.n	401c <__aeabi_dsub+0x498>
    3e50:	1c73      	adds	r3, r6, #1
    3e52:	469c      	mov	ip, r3
    3e54:	055b      	lsls	r3, r3, #21
    3e56:	0d5b      	lsrs	r3, r3, #21
    3e58:	2b01      	cmp	r3, #1
    3e5a:	dc00      	bgt.n	3e5e <__aeabi_dsub+0x2da>
    3e5c:	e09f      	b.n	3f9e <__aeabi_dsub+0x41a>
    3e5e:	4b1a      	ldr	r3, [pc, #104]	; (3ec8 <__aeabi_dsub+0x344>)
    3e60:	459c      	cmp	ip, r3
    3e62:	d100      	bne.n	3e66 <__aeabi_dsub+0x2e2>
    3e64:	e0c5      	b.n	3ff2 <__aeabi_dsub+0x46e>
    3e66:	4452      	add	r2, sl
    3e68:	4552      	cmp	r2, sl
    3e6a:	4180      	sbcs	r0, r0
    3e6c:	1864      	adds	r4, r4, r1
    3e6e:	4240      	negs	r0, r0
    3e70:	1824      	adds	r4, r4, r0
    3e72:	07e7      	lsls	r7, r4, #31
    3e74:	0852      	lsrs	r2, r2, #1
    3e76:	4317      	orrs	r7, r2
    3e78:	0864      	lsrs	r4, r4, #1
    3e7a:	4666      	mov	r6, ip
    3e7c:	e708      	b.n	3c90 <__aeabi_dsub+0x10c>
    3e7e:	4812      	ldr	r0, [pc, #72]	; (3ec8 <__aeabi_dsub+0x344>)
    3e80:	4285      	cmp	r5, r0
    3e82:	d100      	bne.n	3e86 <__aeabi_dsub+0x302>
    3e84:	e085      	b.n	3f92 <__aeabi_dsub+0x40e>
    3e86:	001d      	movs	r5, r3
    3e88:	e6bc      	b.n	3c04 <__aeabi_dsub+0x80>
    3e8a:	0029      	movs	r1, r5
    3e8c:	3e1f      	subs	r6, #31
    3e8e:	40f1      	lsrs	r1, r6
    3e90:	2b20      	cmp	r3, #32
    3e92:	d100      	bne.n	3e96 <__aeabi_dsub+0x312>
    3e94:	e07f      	b.n	3f96 <__aeabi_dsub+0x412>
    3e96:	2240      	movs	r2, #64	; 0x40
    3e98:	1ad3      	subs	r3, r2, r3
    3e9a:	409d      	lsls	r5, r3
    3e9c:	432f      	orrs	r7, r5
    3e9e:	1e7d      	subs	r5, r7, #1
    3ea0:	41af      	sbcs	r7, r5
    3ea2:	2400      	movs	r4, #0
    3ea4:	430f      	orrs	r7, r1
    3ea6:	2600      	movs	r6, #0
    3ea8:	e78e      	b.n	3dc8 <__aeabi_dsub+0x244>
    3eaa:	002b      	movs	r3, r5
    3eac:	000f      	movs	r7, r1
    3eae:	3b20      	subs	r3, #32
    3eb0:	40df      	lsrs	r7, r3
    3eb2:	2d20      	cmp	r5, #32
    3eb4:	d071      	beq.n	3f9a <__aeabi_dsub+0x416>
    3eb6:	2340      	movs	r3, #64	; 0x40
    3eb8:	1b5d      	subs	r5, r3, r5
    3eba:	40a9      	lsls	r1, r5
    3ebc:	430a      	orrs	r2, r1
    3ebe:	1e51      	subs	r1, r2, #1
    3ec0:	418a      	sbcs	r2, r1
    3ec2:	2100      	movs	r1, #0
    3ec4:	4317      	orrs	r7, r2
    3ec6:	e6af      	b.n	3c28 <__aeabi_dsub+0xa4>
    3ec8:	000007ff 	.word	0x000007ff
    3ecc:	ff7fffff 	.word	0xff7fffff
    3ed0:	800fffff 	.word	0x800fffff
    3ed4:	2e00      	cmp	r6, #0
    3ed6:	d03e      	beq.n	3f56 <__aeabi_dsub+0x3d2>
    3ed8:	4eb3      	ldr	r6, [pc, #716]	; (41a8 <__aeabi_dsub+0x624>)
    3eda:	45b4      	cmp	ip, r6
    3edc:	d045      	beq.n	3f6a <__aeabi_dsub+0x3e6>
    3ede:	2680      	movs	r6, #128	; 0x80
    3ee0:	0436      	lsls	r6, r6, #16
    3ee2:	426d      	negs	r5, r5
    3ee4:	4334      	orrs	r4, r6
    3ee6:	2d38      	cmp	r5, #56	; 0x38
    3ee8:	dd00      	ble.n	3eec <__aeabi_dsub+0x368>
    3eea:	e0a8      	b.n	403e <__aeabi_dsub+0x4ba>
    3eec:	2d1f      	cmp	r5, #31
    3eee:	dd00      	ble.n	3ef2 <__aeabi_dsub+0x36e>
    3ef0:	e11f      	b.n	4132 <__aeabi_dsub+0x5ae>
    3ef2:	2620      	movs	r6, #32
    3ef4:	0027      	movs	r7, r4
    3ef6:	4650      	mov	r0, sl
    3ef8:	1b76      	subs	r6, r6, r5
    3efa:	40b7      	lsls	r7, r6
    3efc:	40e8      	lsrs	r0, r5
    3efe:	4307      	orrs	r7, r0
    3f00:	4650      	mov	r0, sl
    3f02:	40b0      	lsls	r0, r6
    3f04:	1e46      	subs	r6, r0, #1
    3f06:	41b0      	sbcs	r0, r6
    3f08:	40ec      	lsrs	r4, r5
    3f0a:	4338      	orrs	r0, r7
    3f0c:	1a17      	subs	r7, r2, r0
    3f0e:	42ba      	cmp	r2, r7
    3f10:	4192      	sbcs	r2, r2
    3f12:	1b0c      	subs	r4, r1, r4
    3f14:	4252      	negs	r2, r2
    3f16:	1aa4      	subs	r4, r4, r2
    3f18:	4666      	mov	r6, ip
    3f1a:	4698      	mov	r8, r3
    3f1c:	e68b      	b.n	3c36 <__aeabi_dsub+0xb2>
    3f1e:	4664      	mov	r4, ip
    3f20:	4667      	mov	r7, ip
    3f22:	432c      	orrs	r4, r5
    3f24:	d000      	beq.n	3f28 <__aeabi_dsub+0x3a4>
    3f26:	e68b      	b.n	3c40 <__aeabi_dsub+0xbc>
    3f28:	2500      	movs	r5, #0
    3f2a:	2600      	movs	r6, #0
    3f2c:	2700      	movs	r7, #0
    3f2e:	e6ea      	b.n	3d06 <__aeabi_dsub+0x182>
    3f30:	001e      	movs	r6, r3
    3f32:	e6ad      	b.n	3c90 <__aeabi_dsub+0x10c>
    3f34:	2b1f      	cmp	r3, #31
    3f36:	dc60      	bgt.n	3ffa <__aeabi_dsub+0x476>
    3f38:	2720      	movs	r7, #32
    3f3a:	1af8      	subs	r0, r7, r3
    3f3c:	000f      	movs	r7, r1
    3f3e:	4684      	mov	ip, r0
    3f40:	4087      	lsls	r7, r0
    3f42:	0010      	movs	r0, r2
    3f44:	40d8      	lsrs	r0, r3
    3f46:	4307      	orrs	r7, r0
    3f48:	4660      	mov	r0, ip
    3f4a:	4082      	lsls	r2, r0
    3f4c:	1e50      	subs	r0, r2, #1
    3f4e:	4182      	sbcs	r2, r0
    3f50:	40d9      	lsrs	r1, r3
    3f52:	4317      	orrs	r7, r2
    3f54:	e6f5      	b.n	3d42 <__aeabi_dsub+0x1be>
    3f56:	0026      	movs	r6, r4
    3f58:	4650      	mov	r0, sl
    3f5a:	4306      	orrs	r6, r0
    3f5c:	d005      	beq.n	3f6a <__aeabi_dsub+0x3e6>
    3f5e:	43ed      	mvns	r5, r5
    3f60:	2d00      	cmp	r5, #0
    3f62:	d0d3      	beq.n	3f0c <__aeabi_dsub+0x388>
    3f64:	4e90      	ldr	r6, [pc, #576]	; (41a8 <__aeabi_dsub+0x624>)
    3f66:	45b4      	cmp	ip, r6
    3f68:	d1bd      	bne.n	3ee6 <__aeabi_dsub+0x362>
    3f6a:	000c      	movs	r4, r1
    3f6c:	0017      	movs	r7, r2
    3f6e:	4666      	mov	r6, ip
    3f70:	4698      	mov	r8, r3
    3f72:	e68d      	b.n	3c90 <__aeabi_dsub+0x10c>
    3f74:	488c      	ldr	r0, [pc, #560]	; (41a8 <__aeabi_dsub+0x624>)
    3f76:	4283      	cmp	r3, r0
    3f78:	d00b      	beq.n	3f92 <__aeabi_dsub+0x40e>
    3f7a:	4663      	mov	r3, ip
    3f7c:	e6d9      	b.n	3d32 <__aeabi_dsub+0x1ae>
    3f7e:	2d00      	cmp	r5, #0
    3f80:	d000      	beq.n	3f84 <__aeabi_dsub+0x400>
    3f82:	e096      	b.n	40b2 <__aeabi_dsub+0x52e>
    3f84:	0008      	movs	r0, r1
    3f86:	4310      	orrs	r0, r2
    3f88:	d100      	bne.n	3f8c <__aeabi_dsub+0x408>
    3f8a:	e0e2      	b.n	4152 <__aeabi_dsub+0x5ce>
    3f8c:	000c      	movs	r4, r1
    3f8e:	0017      	movs	r7, r2
    3f90:	4698      	mov	r8, r3
    3f92:	4e85      	ldr	r6, [pc, #532]	; (41a8 <__aeabi_dsub+0x624>)
    3f94:	e67c      	b.n	3c90 <__aeabi_dsub+0x10c>
    3f96:	2500      	movs	r5, #0
    3f98:	e780      	b.n	3e9c <__aeabi_dsub+0x318>
    3f9a:	2100      	movs	r1, #0
    3f9c:	e78e      	b.n	3ebc <__aeabi_dsub+0x338>
    3f9e:	0023      	movs	r3, r4
    3fa0:	4650      	mov	r0, sl
    3fa2:	4303      	orrs	r3, r0
    3fa4:	2e00      	cmp	r6, #0
    3fa6:	d000      	beq.n	3faa <__aeabi_dsub+0x426>
    3fa8:	e0a8      	b.n	40fc <__aeabi_dsub+0x578>
    3faa:	2b00      	cmp	r3, #0
    3fac:	d100      	bne.n	3fb0 <__aeabi_dsub+0x42c>
    3fae:	e0de      	b.n	416e <__aeabi_dsub+0x5ea>
    3fb0:	000b      	movs	r3, r1
    3fb2:	4313      	orrs	r3, r2
    3fb4:	d100      	bne.n	3fb8 <__aeabi_dsub+0x434>
    3fb6:	e66b      	b.n	3c90 <__aeabi_dsub+0x10c>
    3fb8:	4452      	add	r2, sl
    3fba:	4552      	cmp	r2, sl
    3fbc:	4180      	sbcs	r0, r0
    3fbe:	1864      	adds	r4, r4, r1
    3fc0:	4240      	negs	r0, r0
    3fc2:	1824      	adds	r4, r4, r0
    3fc4:	0017      	movs	r7, r2
    3fc6:	0223      	lsls	r3, r4, #8
    3fc8:	d400      	bmi.n	3fcc <__aeabi_dsub+0x448>
    3fca:	e6fd      	b.n	3dc8 <__aeabi_dsub+0x244>
    3fcc:	4b77      	ldr	r3, [pc, #476]	; (41ac <__aeabi_dsub+0x628>)
    3fce:	4666      	mov	r6, ip
    3fd0:	401c      	ands	r4, r3
    3fd2:	e65d      	b.n	3c90 <__aeabi_dsub+0x10c>
    3fd4:	0025      	movs	r5, r4
    3fd6:	4650      	mov	r0, sl
    3fd8:	4305      	orrs	r5, r0
    3fda:	2e00      	cmp	r6, #0
    3fdc:	d1cf      	bne.n	3f7e <__aeabi_dsub+0x3fa>
    3fde:	2d00      	cmp	r5, #0
    3fe0:	d14f      	bne.n	4082 <__aeabi_dsub+0x4fe>
    3fe2:	000c      	movs	r4, r1
    3fe4:	4314      	orrs	r4, r2
    3fe6:	d100      	bne.n	3fea <__aeabi_dsub+0x466>
    3fe8:	e0a0      	b.n	412c <__aeabi_dsub+0x5a8>
    3fea:	000c      	movs	r4, r1
    3fec:	0017      	movs	r7, r2
    3fee:	4698      	mov	r8, r3
    3ff0:	e64e      	b.n	3c90 <__aeabi_dsub+0x10c>
    3ff2:	4666      	mov	r6, ip
    3ff4:	2400      	movs	r4, #0
    3ff6:	2700      	movs	r7, #0
    3ff8:	e685      	b.n	3d06 <__aeabi_dsub+0x182>
    3ffa:	001f      	movs	r7, r3
    3ffc:	0008      	movs	r0, r1
    3ffe:	3f20      	subs	r7, #32
    4000:	40f8      	lsrs	r0, r7
    4002:	0007      	movs	r7, r0
    4004:	2b20      	cmp	r3, #32
    4006:	d100      	bne.n	400a <__aeabi_dsub+0x486>
    4008:	e08e      	b.n	4128 <__aeabi_dsub+0x5a4>
    400a:	2040      	movs	r0, #64	; 0x40
    400c:	1ac3      	subs	r3, r0, r3
    400e:	4099      	lsls	r1, r3
    4010:	430a      	orrs	r2, r1
    4012:	1e51      	subs	r1, r2, #1
    4014:	418a      	sbcs	r2, r1
    4016:	2100      	movs	r1, #0
    4018:	4317      	orrs	r7, r2
    401a:	e692      	b.n	3d42 <__aeabi_dsub+0x1be>
    401c:	2e00      	cmp	r6, #0
    401e:	d114      	bne.n	404a <__aeabi_dsub+0x4c6>
    4020:	0026      	movs	r6, r4
    4022:	4650      	mov	r0, sl
    4024:	4306      	orrs	r6, r0
    4026:	d062      	beq.n	40ee <__aeabi_dsub+0x56a>
    4028:	43db      	mvns	r3, r3
    402a:	2b00      	cmp	r3, #0
    402c:	d15c      	bne.n	40e8 <__aeabi_dsub+0x564>
    402e:	1887      	adds	r7, r0, r2
    4030:	4297      	cmp	r7, r2
    4032:	4192      	sbcs	r2, r2
    4034:	1864      	adds	r4, r4, r1
    4036:	4252      	negs	r2, r2
    4038:	18a4      	adds	r4, r4, r2
    403a:	4666      	mov	r6, ip
    403c:	e687      	b.n	3d4e <__aeabi_dsub+0x1ca>
    403e:	4650      	mov	r0, sl
    4040:	4320      	orrs	r0, r4
    4042:	1e44      	subs	r4, r0, #1
    4044:	41a0      	sbcs	r0, r4
    4046:	2400      	movs	r4, #0
    4048:	e760      	b.n	3f0c <__aeabi_dsub+0x388>
    404a:	4e57      	ldr	r6, [pc, #348]	; (41a8 <__aeabi_dsub+0x624>)
    404c:	45b4      	cmp	ip, r6
    404e:	d04e      	beq.n	40ee <__aeabi_dsub+0x56a>
    4050:	2680      	movs	r6, #128	; 0x80
    4052:	0436      	lsls	r6, r6, #16
    4054:	425b      	negs	r3, r3
    4056:	4334      	orrs	r4, r6
    4058:	2b38      	cmp	r3, #56	; 0x38
    405a:	dd00      	ble.n	405e <__aeabi_dsub+0x4da>
    405c:	e07f      	b.n	415e <__aeabi_dsub+0x5da>
    405e:	2b1f      	cmp	r3, #31
    4060:	dd00      	ble.n	4064 <__aeabi_dsub+0x4e0>
    4062:	e08b      	b.n	417c <__aeabi_dsub+0x5f8>
    4064:	2620      	movs	r6, #32
    4066:	0027      	movs	r7, r4
    4068:	4650      	mov	r0, sl
    406a:	1af6      	subs	r6, r6, r3
    406c:	40b7      	lsls	r7, r6
    406e:	40d8      	lsrs	r0, r3
    4070:	4307      	orrs	r7, r0
    4072:	4650      	mov	r0, sl
    4074:	40b0      	lsls	r0, r6
    4076:	1e46      	subs	r6, r0, #1
    4078:	41b0      	sbcs	r0, r6
    407a:	4307      	orrs	r7, r0
    407c:	40dc      	lsrs	r4, r3
    407e:	18bf      	adds	r7, r7, r2
    4080:	e7d6      	b.n	4030 <__aeabi_dsub+0x4ac>
    4082:	000d      	movs	r5, r1
    4084:	4315      	orrs	r5, r2
    4086:	d100      	bne.n	408a <__aeabi_dsub+0x506>
    4088:	e602      	b.n	3c90 <__aeabi_dsub+0x10c>
    408a:	4650      	mov	r0, sl
    408c:	1a80      	subs	r0, r0, r2
    408e:	4582      	cmp	sl, r0
    4090:	41bf      	sbcs	r7, r7
    4092:	1a65      	subs	r5, r4, r1
    4094:	427f      	negs	r7, r7
    4096:	1bed      	subs	r5, r5, r7
    4098:	4684      	mov	ip, r0
    409a:	0228      	lsls	r0, r5, #8
    409c:	d400      	bmi.n	40a0 <__aeabi_dsub+0x51c>
    409e:	e68d      	b.n	3dbc <__aeabi_dsub+0x238>
    40a0:	4650      	mov	r0, sl
    40a2:	1a17      	subs	r7, r2, r0
    40a4:	42ba      	cmp	r2, r7
    40a6:	4192      	sbcs	r2, r2
    40a8:	1b0c      	subs	r4, r1, r4
    40aa:	4252      	negs	r2, r2
    40ac:	1aa4      	subs	r4, r4, r2
    40ae:	4698      	mov	r8, r3
    40b0:	e5ee      	b.n	3c90 <__aeabi_dsub+0x10c>
    40b2:	000d      	movs	r5, r1
    40b4:	4315      	orrs	r5, r2
    40b6:	d100      	bne.n	40ba <__aeabi_dsub+0x536>
    40b8:	e76b      	b.n	3f92 <__aeabi_dsub+0x40e>
    40ba:	4650      	mov	r0, sl
    40bc:	0767      	lsls	r7, r4, #29
    40be:	08c0      	lsrs	r0, r0, #3
    40c0:	4307      	orrs	r7, r0
    40c2:	2080      	movs	r0, #128	; 0x80
    40c4:	08e4      	lsrs	r4, r4, #3
    40c6:	0300      	lsls	r0, r0, #12
    40c8:	4204      	tst	r4, r0
    40ca:	d007      	beq.n	40dc <__aeabi_dsub+0x558>
    40cc:	08cd      	lsrs	r5, r1, #3
    40ce:	4205      	tst	r5, r0
    40d0:	d104      	bne.n	40dc <__aeabi_dsub+0x558>
    40d2:	002c      	movs	r4, r5
    40d4:	4698      	mov	r8, r3
    40d6:	08d7      	lsrs	r7, r2, #3
    40d8:	0749      	lsls	r1, r1, #29
    40da:	430f      	orrs	r7, r1
    40dc:	0f7b      	lsrs	r3, r7, #29
    40de:	00e4      	lsls	r4, r4, #3
    40e0:	431c      	orrs	r4, r3
    40e2:	00ff      	lsls	r7, r7, #3
    40e4:	4e30      	ldr	r6, [pc, #192]	; (41a8 <__aeabi_dsub+0x624>)
    40e6:	e5d3      	b.n	3c90 <__aeabi_dsub+0x10c>
    40e8:	4e2f      	ldr	r6, [pc, #188]	; (41a8 <__aeabi_dsub+0x624>)
    40ea:	45b4      	cmp	ip, r6
    40ec:	d1b4      	bne.n	4058 <__aeabi_dsub+0x4d4>
    40ee:	000c      	movs	r4, r1
    40f0:	0017      	movs	r7, r2
    40f2:	4666      	mov	r6, ip
    40f4:	e5cc      	b.n	3c90 <__aeabi_dsub+0x10c>
    40f6:	2700      	movs	r7, #0
    40f8:	2400      	movs	r4, #0
    40fa:	e5e8      	b.n	3cce <__aeabi_dsub+0x14a>
    40fc:	2b00      	cmp	r3, #0
    40fe:	d039      	beq.n	4174 <__aeabi_dsub+0x5f0>
    4100:	000b      	movs	r3, r1
    4102:	4313      	orrs	r3, r2
    4104:	d100      	bne.n	4108 <__aeabi_dsub+0x584>
    4106:	e744      	b.n	3f92 <__aeabi_dsub+0x40e>
    4108:	08c0      	lsrs	r0, r0, #3
    410a:	0767      	lsls	r7, r4, #29
    410c:	4307      	orrs	r7, r0
    410e:	2080      	movs	r0, #128	; 0x80
    4110:	08e4      	lsrs	r4, r4, #3
    4112:	0300      	lsls	r0, r0, #12
    4114:	4204      	tst	r4, r0
    4116:	d0e1      	beq.n	40dc <__aeabi_dsub+0x558>
    4118:	08cb      	lsrs	r3, r1, #3
    411a:	4203      	tst	r3, r0
    411c:	d1de      	bne.n	40dc <__aeabi_dsub+0x558>
    411e:	08d7      	lsrs	r7, r2, #3
    4120:	0749      	lsls	r1, r1, #29
    4122:	430f      	orrs	r7, r1
    4124:	001c      	movs	r4, r3
    4126:	e7d9      	b.n	40dc <__aeabi_dsub+0x558>
    4128:	2100      	movs	r1, #0
    412a:	e771      	b.n	4010 <__aeabi_dsub+0x48c>
    412c:	2500      	movs	r5, #0
    412e:	2700      	movs	r7, #0
    4130:	e5e9      	b.n	3d06 <__aeabi_dsub+0x182>
    4132:	002e      	movs	r6, r5
    4134:	0027      	movs	r7, r4
    4136:	3e20      	subs	r6, #32
    4138:	40f7      	lsrs	r7, r6
    413a:	2d20      	cmp	r5, #32
    413c:	d02f      	beq.n	419e <__aeabi_dsub+0x61a>
    413e:	2640      	movs	r6, #64	; 0x40
    4140:	1b75      	subs	r5, r6, r5
    4142:	40ac      	lsls	r4, r5
    4144:	4650      	mov	r0, sl
    4146:	4320      	orrs	r0, r4
    4148:	1e44      	subs	r4, r0, #1
    414a:	41a0      	sbcs	r0, r4
    414c:	2400      	movs	r4, #0
    414e:	4338      	orrs	r0, r7
    4150:	e6dc      	b.n	3f0c <__aeabi_dsub+0x388>
    4152:	2480      	movs	r4, #128	; 0x80
    4154:	2500      	movs	r5, #0
    4156:	0324      	lsls	r4, r4, #12
    4158:	4e13      	ldr	r6, [pc, #76]	; (41a8 <__aeabi_dsub+0x624>)
    415a:	2700      	movs	r7, #0
    415c:	e5d3      	b.n	3d06 <__aeabi_dsub+0x182>
    415e:	4650      	mov	r0, sl
    4160:	4320      	orrs	r0, r4
    4162:	0007      	movs	r7, r0
    4164:	1e78      	subs	r0, r7, #1
    4166:	4187      	sbcs	r7, r0
    4168:	2400      	movs	r4, #0
    416a:	18bf      	adds	r7, r7, r2
    416c:	e760      	b.n	4030 <__aeabi_dsub+0x4ac>
    416e:	000c      	movs	r4, r1
    4170:	0017      	movs	r7, r2
    4172:	e58d      	b.n	3c90 <__aeabi_dsub+0x10c>
    4174:	000c      	movs	r4, r1
    4176:	0017      	movs	r7, r2
    4178:	4e0b      	ldr	r6, [pc, #44]	; (41a8 <__aeabi_dsub+0x624>)
    417a:	e589      	b.n	3c90 <__aeabi_dsub+0x10c>
    417c:	001e      	movs	r6, r3
    417e:	0027      	movs	r7, r4
    4180:	3e20      	subs	r6, #32
    4182:	40f7      	lsrs	r7, r6
    4184:	2b20      	cmp	r3, #32
    4186:	d00c      	beq.n	41a2 <__aeabi_dsub+0x61e>
    4188:	2640      	movs	r6, #64	; 0x40
    418a:	1af3      	subs	r3, r6, r3
    418c:	409c      	lsls	r4, r3
    418e:	4650      	mov	r0, sl
    4190:	4320      	orrs	r0, r4
    4192:	1e44      	subs	r4, r0, #1
    4194:	41a0      	sbcs	r0, r4
    4196:	4307      	orrs	r7, r0
    4198:	2400      	movs	r4, #0
    419a:	18bf      	adds	r7, r7, r2
    419c:	e748      	b.n	4030 <__aeabi_dsub+0x4ac>
    419e:	2400      	movs	r4, #0
    41a0:	e7d0      	b.n	4144 <__aeabi_dsub+0x5c0>
    41a2:	2400      	movs	r4, #0
    41a4:	e7f3      	b.n	418e <__aeabi_dsub+0x60a>
    41a6:	46c0      	nop			; (mov r8, r8)
    41a8:	000007ff 	.word	0x000007ff
    41ac:	ff7fffff 	.word	0xff7fffff

000041b0 <__aeabi_d2iz>:
    41b0:	b530      	push	{r4, r5, lr}
    41b2:	4d13      	ldr	r5, [pc, #76]	; (4200 <__aeabi_d2iz+0x50>)
    41b4:	030a      	lsls	r2, r1, #12
    41b6:	004b      	lsls	r3, r1, #1
    41b8:	0b12      	lsrs	r2, r2, #12
    41ba:	0d5b      	lsrs	r3, r3, #21
    41bc:	0fc9      	lsrs	r1, r1, #31
    41be:	2400      	movs	r4, #0
    41c0:	42ab      	cmp	r3, r5
    41c2:	dd10      	ble.n	41e6 <__aeabi_d2iz+0x36>
    41c4:	4c0f      	ldr	r4, [pc, #60]	; (4204 <__aeabi_d2iz+0x54>)
    41c6:	42a3      	cmp	r3, r4
    41c8:	dc0f      	bgt.n	41ea <__aeabi_d2iz+0x3a>
    41ca:	2480      	movs	r4, #128	; 0x80
    41cc:	4d0e      	ldr	r5, [pc, #56]	; (4208 <__aeabi_d2iz+0x58>)
    41ce:	0364      	lsls	r4, r4, #13
    41d0:	4322      	orrs	r2, r4
    41d2:	1aed      	subs	r5, r5, r3
    41d4:	2d1f      	cmp	r5, #31
    41d6:	dd0b      	ble.n	41f0 <__aeabi_d2iz+0x40>
    41d8:	480c      	ldr	r0, [pc, #48]	; (420c <__aeabi_d2iz+0x5c>)
    41da:	1ac3      	subs	r3, r0, r3
    41dc:	40da      	lsrs	r2, r3
    41de:	4254      	negs	r4, r2
    41e0:	2900      	cmp	r1, #0
    41e2:	d100      	bne.n	41e6 <__aeabi_d2iz+0x36>
    41e4:	0014      	movs	r4, r2
    41e6:	0020      	movs	r0, r4
    41e8:	bd30      	pop	{r4, r5, pc}
    41ea:	4b09      	ldr	r3, [pc, #36]	; (4210 <__aeabi_d2iz+0x60>)
    41ec:	18cc      	adds	r4, r1, r3
    41ee:	e7fa      	b.n	41e6 <__aeabi_d2iz+0x36>
    41f0:	4c08      	ldr	r4, [pc, #32]	; (4214 <__aeabi_d2iz+0x64>)
    41f2:	40e8      	lsrs	r0, r5
    41f4:	46a4      	mov	ip, r4
    41f6:	4463      	add	r3, ip
    41f8:	409a      	lsls	r2, r3
    41fa:	4302      	orrs	r2, r0
    41fc:	e7ef      	b.n	41de <__aeabi_d2iz+0x2e>
    41fe:	46c0      	nop			; (mov r8, r8)
    4200:	000003fe 	.word	0x000003fe
    4204:	0000041d 	.word	0x0000041d
    4208:	00000433 	.word	0x00000433
    420c:	00000413 	.word	0x00000413
    4210:	7fffffff 	.word	0x7fffffff
    4214:	fffffbed 	.word	0xfffffbed

00004218 <__aeabi_ui2d>:
    4218:	b510      	push	{r4, lr}
    421a:	1e04      	subs	r4, r0, #0
    421c:	d028      	beq.n	4270 <__aeabi_ui2d+0x58>
    421e:	f000 f833 	bl	4288 <__clzsi2>
    4222:	4b15      	ldr	r3, [pc, #84]	; (4278 <__aeabi_ui2d+0x60>)
    4224:	4a15      	ldr	r2, [pc, #84]	; (427c <__aeabi_ui2d+0x64>)
    4226:	1a1b      	subs	r3, r3, r0
    4228:	1ad2      	subs	r2, r2, r3
    422a:	2a1f      	cmp	r2, #31
    422c:	dd15      	ble.n	425a <__aeabi_ui2d+0x42>
    422e:	4a14      	ldr	r2, [pc, #80]	; (4280 <__aeabi_ui2d+0x68>)
    4230:	1ad2      	subs	r2, r2, r3
    4232:	4094      	lsls	r4, r2
    4234:	2200      	movs	r2, #0
    4236:	0324      	lsls	r4, r4, #12
    4238:	055b      	lsls	r3, r3, #21
    423a:	0b24      	lsrs	r4, r4, #12
    423c:	0d5b      	lsrs	r3, r3, #21
    423e:	2100      	movs	r1, #0
    4240:	0010      	movs	r0, r2
    4242:	0324      	lsls	r4, r4, #12
    4244:	0d0a      	lsrs	r2, r1, #20
    4246:	0b24      	lsrs	r4, r4, #12
    4248:	0512      	lsls	r2, r2, #20
    424a:	4322      	orrs	r2, r4
    424c:	4c0d      	ldr	r4, [pc, #52]	; (4284 <__aeabi_ui2d+0x6c>)
    424e:	051b      	lsls	r3, r3, #20
    4250:	4022      	ands	r2, r4
    4252:	4313      	orrs	r3, r2
    4254:	005b      	lsls	r3, r3, #1
    4256:	0859      	lsrs	r1, r3, #1
    4258:	bd10      	pop	{r4, pc}
    425a:	0021      	movs	r1, r4
    425c:	4091      	lsls	r1, r2
    425e:	000a      	movs	r2, r1
    4260:	210b      	movs	r1, #11
    4262:	1a08      	subs	r0, r1, r0
    4264:	40c4      	lsrs	r4, r0
    4266:	055b      	lsls	r3, r3, #21
    4268:	0324      	lsls	r4, r4, #12
    426a:	0b24      	lsrs	r4, r4, #12
    426c:	0d5b      	lsrs	r3, r3, #21
    426e:	e7e6      	b.n	423e <__aeabi_ui2d+0x26>
    4270:	2300      	movs	r3, #0
    4272:	2400      	movs	r4, #0
    4274:	2200      	movs	r2, #0
    4276:	e7e2      	b.n	423e <__aeabi_ui2d+0x26>
    4278:	0000041e 	.word	0x0000041e
    427c:	00000433 	.word	0x00000433
    4280:	00000413 	.word	0x00000413
    4284:	800fffff 	.word	0x800fffff

00004288 <__clzsi2>:
    4288:	211c      	movs	r1, #28
    428a:	2301      	movs	r3, #1
    428c:	041b      	lsls	r3, r3, #16
    428e:	4298      	cmp	r0, r3
    4290:	d301      	bcc.n	4296 <__clzsi2+0xe>
    4292:	0c00      	lsrs	r0, r0, #16
    4294:	3910      	subs	r1, #16
    4296:	0a1b      	lsrs	r3, r3, #8
    4298:	4298      	cmp	r0, r3
    429a:	d301      	bcc.n	42a0 <__clzsi2+0x18>
    429c:	0a00      	lsrs	r0, r0, #8
    429e:	3908      	subs	r1, #8
    42a0:	091b      	lsrs	r3, r3, #4
    42a2:	4298      	cmp	r0, r3
    42a4:	d301      	bcc.n	42aa <__clzsi2+0x22>
    42a6:	0900      	lsrs	r0, r0, #4
    42a8:	3904      	subs	r1, #4
    42aa:	a202      	add	r2, pc, #8	; (adr r2, 42b4 <__clzsi2+0x2c>)
    42ac:	5c10      	ldrb	r0, [r2, r0]
    42ae:	1840      	adds	r0, r0, r1
    42b0:	4770      	bx	lr
    42b2:	46c0      	nop			; (mov r8, r8)
    42b4:	02020304 	.word	0x02020304
    42b8:	01010101 	.word	0x01010101
	...

000042c4 <__libc_init_array>:
    42c4:	b570      	push	{r4, r5, r6, lr}
    42c6:	2600      	movs	r6, #0
    42c8:	4d0c      	ldr	r5, [pc, #48]	; (42fc <__libc_init_array+0x38>)
    42ca:	4c0d      	ldr	r4, [pc, #52]	; (4300 <__libc_init_array+0x3c>)
    42cc:	1b64      	subs	r4, r4, r5
    42ce:	10a4      	asrs	r4, r4, #2
    42d0:	42a6      	cmp	r6, r4
    42d2:	d109      	bne.n	42e8 <__libc_init_array+0x24>
    42d4:	2600      	movs	r6, #0
    42d6:	f001 fa0b 	bl	56f0 <_init>
    42da:	4d0a      	ldr	r5, [pc, #40]	; (4304 <__libc_init_array+0x40>)
    42dc:	4c0a      	ldr	r4, [pc, #40]	; (4308 <__libc_init_array+0x44>)
    42de:	1b64      	subs	r4, r4, r5
    42e0:	10a4      	asrs	r4, r4, #2
    42e2:	42a6      	cmp	r6, r4
    42e4:	d105      	bne.n	42f2 <__libc_init_array+0x2e>
    42e6:	bd70      	pop	{r4, r5, r6, pc}
    42e8:	00b3      	lsls	r3, r6, #2
    42ea:	58eb      	ldr	r3, [r5, r3]
    42ec:	4798      	blx	r3
    42ee:	3601      	adds	r6, #1
    42f0:	e7ee      	b.n	42d0 <__libc_init_array+0xc>
    42f2:	00b3      	lsls	r3, r6, #2
    42f4:	58eb      	ldr	r3, [r5, r3]
    42f6:	4798      	blx	r3
    42f8:	3601      	adds	r6, #1
    42fa:	e7f2      	b.n	42e2 <__libc_init_array+0x1e>
    42fc:	000056fc 	.word	0x000056fc
    4300:	000056fc 	.word	0x000056fc
    4304:	000056fc 	.word	0x000056fc
    4308:	00005700 	.word	0x00005700

0000430c <memcpy>:
    430c:	2300      	movs	r3, #0
    430e:	b510      	push	{r4, lr}
    4310:	429a      	cmp	r2, r3
    4312:	d100      	bne.n	4316 <memcpy+0xa>
    4314:	bd10      	pop	{r4, pc}
    4316:	5ccc      	ldrb	r4, [r1, r3]
    4318:	54c4      	strb	r4, [r0, r3]
    431a:	3301      	adds	r3, #1
    431c:	e7f8      	b.n	4310 <memcpy+0x4>

0000431e <memset>:
    431e:	0003      	movs	r3, r0
    4320:	1882      	adds	r2, r0, r2
    4322:	4293      	cmp	r3, r2
    4324:	d100      	bne.n	4328 <memset+0xa>
    4326:	4770      	bx	lr
    4328:	7019      	strb	r1, [r3, #0]
    432a:	3301      	adds	r3, #1
    432c:	e7f9      	b.n	4322 <memset+0x4>
	...

00004330 <iprintf>:
    4330:	b40f      	push	{r0, r1, r2, r3}
    4332:	4b0b      	ldr	r3, [pc, #44]	; (4360 <iprintf+0x30>)
    4334:	b513      	push	{r0, r1, r4, lr}
    4336:	681c      	ldr	r4, [r3, #0]
    4338:	2c00      	cmp	r4, #0
    433a:	d005      	beq.n	4348 <iprintf+0x18>
    433c:	69a3      	ldr	r3, [r4, #24]
    433e:	2b00      	cmp	r3, #0
    4340:	d102      	bne.n	4348 <iprintf+0x18>
    4342:	0020      	movs	r0, r4
    4344:	f000 faf2 	bl	492c <__sinit>
    4348:	ab05      	add	r3, sp, #20
    434a:	9a04      	ldr	r2, [sp, #16]
    434c:	68a1      	ldr	r1, [r4, #8]
    434e:	0020      	movs	r0, r4
    4350:	9301      	str	r3, [sp, #4]
    4352:	f000 fcc7 	bl	4ce4 <_vfiprintf_r>
    4356:	bc16      	pop	{r1, r2, r4}
    4358:	bc08      	pop	{r3}
    435a:	b004      	add	sp, #16
    435c:	4718      	bx	r3
    435e:	46c0      	nop			; (mov r8, r8)
    4360:	20000024 	.word	0x20000024

00004364 <_puts_r>:
    4364:	b570      	push	{r4, r5, r6, lr}
    4366:	0005      	movs	r5, r0
    4368:	000e      	movs	r6, r1
    436a:	2800      	cmp	r0, #0
    436c:	d004      	beq.n	4378 <_puts_r+0x14>
    436e:	6983      	ldr	r3, [r0, #24]
    4370:	2b00      	cmp	r3, #0
    4372:	d101      	bne.n	4378 <_puts_r+0x14>
    4374:	f000 fada 	bl	492c <__sinit>
    4378:	69ab      	ldr	r3, [r5, #24]
    437a:	68ac      	ldr	r4, [r5, #8]
    437c:	2b00      	cmp	r3, #0
    437e:	d102      	bne.n	4386 <_puts_r+0x22>
    4380:	0028      	movs	r0, r5
    4382:	f000 fad3 	bl	492c <__sinit>
    4386:	4b24      	ldr	r3, [pc, #144]	; (4418 <_puts_r+0xb4>)
    4388:	429c      	cmp	r4, r3
    438a:	d10f      	bne.n	43ac <_puts_r+0x48>
    438c:	686c      	ldr	r4, [r5, #4]
    438e:	89a3      	ldrh	r3, [r4, #12]
    4390:	071b      	lsls	r3, r3, #28
    4392:	d502      	bpl.n	439a <_puts_r+0x36>
    4394:	6923      	ldr	r3, [r4, #16]
    4396:	2b00      	cmp	r3, #0
    4398:	d120      	bne.n	43dc <_puts_r+0x78>
    439a:	0021      	movs	r1, r4
    439c:	0028      	movs	r0, r5
    439e:	f000 f957 	bl	4650 <__swsetup_r>
    43a2:	2800      	cmp	r0, #0
    43a4:	d01a      	beq.n	43dc <_puts_r+0x78>
    43a6:	2001      	movs	r0, #1
    43a8:	4240      	negs	r0, r0
    43aa:	bd70      	pop	{r4, r5, r6, pc}
    43ac:	4b1b      	ldr	r3, [pc, #108]	; (441c <_puts_r+0xb8>)
    43ae:	429c      	cmp	r4, r3
    43b0:	d101      	bne.n	43b6 <_puts_r+0x52>
    43b2:	68ac      	ldr	r4, [r5, #8]
    43b4:	e7eb      	b.n	438e <_puts_r+0x2a>
    43b6:	4b1a      	ldr	r3, [pc, #104]	; (4420 <_puts_r+0xbc>)
    43b8:	429c      	cmp	r4, r3
    43ba:	d1e8      	bne.n	438e <_puts_r+0x2a>
    43bc:	68ec      	ldr	r4, [r5, #12]
    43be:	e7e6      	b.n	438e <_puts_r+0x2a>
    43c0:	3b01      	subs	r3, #1
    43c2:	3601      	adds	r6, #1
    43c4:	60a3      	str	r3, [r4, #8]
    43c6:	2b00      	cmp	r3, #0
    43c8:	da04      	bge.n	43d4 <_puts_r+0x70>
    43ca:	69a2      	ldr	r2, [r4, #24]
    43cc:	4293      	cmp	r3, r2
    43ce:	db16      	blt.n	43fe <_puts_r+0x9a>
    43d0:	290a      	cmp	r1, #10
    43d2:	d014      	beq.n	43fe <_puts_r+0x9a>
    43d4:	6823      	ldr	r3, [r4, #0]
    43d6:	1c5a      	adds	r2, r3, #1
    43d8:	6022      	str	r2, [r4, #0]
    43da:	7019      	strb	r1, [r3, #0]
    43dc:	7831      	ldrb	r1, [r6, #0]
    43de:	68a3      	ldr	r3, [r4, #8]
    43e0:	2900      	cmp	r1, #0
    43e2:	d1ed      	bne.n	43c0 <_puts_r+0x5c>
    43e4:	3b01      	subs	r3, #1
    43e6:	60a3      	str	r3, [r4, #8]
    43e8:	2b00      	cmp	r3, #0
    43ea:	da0f      	bge.n	440c <_puts_r+0xa8>
    43ec:	0022      	movs	r2, r4
    43ee:	310a      	adds	r1, #10
    43f0:	0028      	movs	r0, r5
    43f2:	f000 f8d7 	bl	45a4 <__swbuf_r>
    43f6:	1c43      	adds	r3, r0, #1
    43f8:	d0d5      	beq.n	43a6 <_puts_r+0x42>
    43fa:	200a      	movs	r0, #10
    43fc:	e7d5      	b.n	43aa <_puts_r+0x46>
    43fe:	0022      	movs	r2, r4
    4400:	0028      	movs	r0, r5
    4402:	f000 f8cf 	bl	45a4 <__swbuf_r>
    4406:	1c43      	adds	r3, r0, #1
    4408:	d1e8      	bne.n	43dc <_puts_r+0x78>
    440a:	e7cc      	b.n	43a6 <_puts_r+0x42>
    440c:	200a      	movs	r0, #10
    440e:	6823      	ldr	r3, [r4, #0]
    4410:	1c5a      	adds	r2, r3, #1
    4412:	6022      	str	r2, [r4, #0]
    4414:	7018      	strb	r0, [r3, #0]
    4416:	e7c8      	b.n	43aa <_puts_r+0x46>
    4418:	0000567c 	.word	0x0000567c
    441c:	0000569c 	.word	0x0000569c
    4420:	0000565c 	.word	0x0000565c

00004424 <puts>:
    4424:	b510      	push	{r4, lr}
    4426:	4b03      	ldr	r3, [pc, #12]	; (4434 <puts+0x10>)
    4428:	0001      	movs	r1, r0
    442a:	6818      	ldr	r0, [r3, #0]
    442c:	f7ff ff9a 	bl	4364 <_puts_r>
    4430:	bd10      	pop	{r4, pc}
    4432:	46c0      	nop			; (mov r8, r8)
    4434:	20000024 	.word	0x20000024

00004438 <setbuf>:
    4438:	424a      	negs	r2, r1
    443a:	414a      	adcs	r2, r1
    443c:	2380      	movs	r3, #128	; 0x80
    443e:	b510      	push	{r4, lr}
    4440:	0052      	lsls	r2, r2, #1
    4442:	00db      	lsls	r3, r3, #3
    4444:	f000 f802 	bl	444c <setvbuf>
    4448:	bd10      	pop	{r4, pc}
	...

0000444c <setvbuf>:
    444c:	b5f0      	push	{r4, r5, r6, r7, lr}
    444e:	001d      	movs	r5, r3
    4450:	4b4f      	ldr	r3, [pc, #316]	; (4590 <setvbuf+0x144>)
    4452:	b085      	sub	sp, #20
    4454:	681e      	ldr	r6, [r3, #0]
    4456:	0004      	movs	r4, r0
    4458:	000f      	movs	r7, r1
    445a:	9200      	str	r2, [sp, #0]
    445c:	2e00      	cmp	r6, #0
    445e:	d005      	beq.n	446c <setvbuf+0x20>
    4460:	69b3      	ldr	r3, [r6, #24]
    4462:	2b00      	cmp	r3, #0
    4464:	d102      	bne.n	446c <setvbuf+0x20>
    4466:	0030      	movs	r0, r6
    4468:	f000 fa60 	bl	492c <__sinit>
    446c:	4b49      	ldr	r3, [pc, #292]	; (4594 <setvbuf+0x148>)
    446e:	429c      	cmp	r4, r3
    4470:	d150      	bne.n	4514 <setvbuf+0xc8>
    4472:	6874      	ldr	r4, [r6, #4]
    4474:	9b00      	ldr	r3, [sp, #0]
    4476:	2b02      	cmp	r3, #2
    4478:	d005      	beq.n	4486 <setvbuf+0x3a>
    447a:	2b01      	cmp	r3, #1
    447c:	d900      	bls.n	4480 <setvbuf+0x34>
    447e:	e084      	b.n	458a <setvbuf+0x13e>
    4480:	2d00      	cmp	r5, #0
    4482:	da00      	bge.n	4486 <setvbuf+0x3a>
    4484:	e081      	b.n	458a <setvbuf+0x13e>
    4486:	0021      	movs	r1, r4
    4488:	0030      	movs	r0, r6
    448a:	f000 f9e1 	bl	4850 <_fflush_r>
    448e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4490:	2900      	cmp	r1, #0
    4492:	d008      	beq.n	44a6 <setvbuf+0x5a>
    4494:	0023      	movs	r3, r4
    4496:	3344      	adds	r3, #68	; 0x44
    4498:	4299      	cmp	r1, r3
    449a:	d002      	beq.n	44a2 <setvbuf+0x56>
    449c:	0030      	movs	r0, r6
    449e:	f000 fb51 	bl	4b44 <_free_r>
    44a2:	2300      	movs	r3, #0
    44a4:	6363      	str	r3, [r4, #52]	; 0x34
    44a6:	2300      	movs	r3, #0
    44a8:	61a3      	str	r3, [r4, #24]
    44aa:	6063      	str	r3, [r4, #4]
    44ac:	89a3      	ldrh	r3, [r4, #12]
    44ae:	061b      	lsls	r3, r3, #24
    44b0:	d503      	bpl.n	44ba <setvbuf+0x6e>
    44b2:	6921      	ldr	r1, [r4, #16]
    44b4:	0030      	movs	r0, r6
    44b6:	f000 fb45 	bl	4b44 <_free_r>
    44ba:	89a3      	ldrh	r3, [r4, #12]
    44bc:	4a36      	ldr	r2, [pc, #216]	; (4598 <setvbuf+0x14c>)
    44be:	4013      	ands	r3, r2
    44c0:	81a3      	strh	r3, [r4, #12]
    44c2:	9b00      	ldr	r3, [sp, #0]
    44c4:	2b02      	cmp	r3, #2
    44c6:	d05a      	beq.n	457e <setvbuf+0x132>
    44c8:	ab03      	add	r3, sp, #12
    44ca:	aa02      	add	r2, sp, #8
    44cc:	0021      	movs	r1, r4
    44ce:	0030      	movs	r0, r6
    44d0:	f000 fac2 	bl	4a58 <__swhatbuf_r>
    44d4:	89a3      	ldrh	r3, [r4, #12]
    44d6:	4318      	orrs	r0, r3
    44d8:	81a0      	strh	r0, [r4, #12]
    44da:	2d00      	cmp	r5, #0
    44dc:	d124      	bne.n	4528 <setvbuf+0xdc>
    44de:	9d02      	ldr	r5, [sp, #8]
    44e0:	0028      	movs	r0, r5
    44e2:	f000 fb25 	bl	4b30 <malloc>
    44e6:	9501      	str	r5, [sp, #4]
    44e8:	1e07      	subs	r7, r0, #0
    44ea:	d142      	bne.n	4572 <setvbuf+0x126>
    44ec:	9b02      	ldr	r3, [sp, #8]
    44ee:	9301      	str	r3, [sp, #4]
    44f0:	42ab      	cmp	r3, r5
    44f2:	d139      	bne.n	4568 <setvbuf+0x11c>
    44f4:	2001      	movs	r0, #1
    44f6:	4240      	negs	r0, r0
    44f8:	2302      	movs	r3, #2
    44fa:	89a2      	ldrh	r2, [r4, #12]
    44fc:	4313      	orrs	r3, r2
    44fe:	81a3      	strh	r3, [r4, #12]
    4500:	2300      	movs	r3, #0
    4502:	60a3      	str	r3, [r4, #8]
    4504:	0023      	movs	r3, r4
    4506:	3347      	adds	r3, #71	; 0x47
    4508:	6023      	str	r3, [r4, #0]
    450a:	6123      	str	r3, [r4, #16]
    450c:	2301      	movs	r3, #1
    450e:	6163      	str	r3, [r4, #20]
    4510:	b005      	add	sp, #20
    4512:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4514:	4b21      	ldr	r3, [pc, #132]	; (459c <setvbuf+0x150>)
    4516:	429c      	cmp	r4, r3
    4518:	d101      	bne.n	451e <setvbuf+0xd2>
    451a:	68b4      	ldr	r4, [r6, #8]
    451c:	e7aa      	b.n	4474 <setvbuf+0x28>
    451e:	4b20      	ldr	r3, [pc, #128]	; (45a0 <setvbuf+0x154>)
    4520:	429c      	cmp	r4, r3
    4522:	d1a7      	bne.n	4474 <setvbuf+0x28>
    4524:	68f4      	ldr	r4, [r6, #12]
    4526:	e7a5      	b.n	4474 <setvbuf+0x28>
    4528:	2f00      	cmp	r7, #0
    452a:	d0d9      	beq.n	44e0 <setvbuf+0x94>
    452c:	69b3      	ldr	r3, [r6, #24]
    452e:	2b00      	cmp	r3, #0
    4530:	d102      	bne.n	4538 <setvbuf+0xec>
    4532:	0030      	movs	r0, r6
    4534:	f000 f9fa 	bl	492c <__sinit>
    4538:	9b00      	ldr	r3, [sp, #0]
    453a:	2b01      	cmp	r3, #1
    453c:	d103      	bne.n	4546 <setvbuf+0xfa>
    453e:	89a3      	ldrh	r3, [r4, #12]
    4540:	9a00      	ldr	r2, [sp, #0]
    4542:	431a      	orrs	r2, r3
    4544:	81a2      	strh	r2, [r4, #12]
    4546:	2008      	movs	r0, #8
    4548:	89a3      	ldrh	r3, [r4, #12]
    454a:	6027      	str	r7, [r4, #0]
    454c:	6127      	str	r7, [r4, #16]
    454e:	6165      	str	r5, [r4, #20]
    4550:	4018      	ands	r0, r3
    4552:	d018      	beq.n	4586 <setvbuf+0x13a>
    4554:	2001      	movs	r0, #1
    4556:	4018      	ands	r0, r3
    4558:	2300      	movs	r3, #0
    455a:	4298      	cmp	r0, r3
    455c:	d011      	beq.n	4582 <setvbuf+0x136>
    455e:	426d      	negs	r5, r5
    4560:	60a3      	str	r3, [r4, #8]
    4562:	61a5      	str	r5, [r4, #24]
    4564:	0018      	movs	r0, r3
    4566:	e7d3      	b.n	4510 <setvbuf+0xc4>
    4568:	9801      	ldr	r0, [sp, #4]
    456a:	f000 fae1 	bl	4b30 <malloc>
    456e:	1e07      	subs	r7, r0, #0
    4570:	d0c0      	beq.n	44f4 <setvbuf+0xa8>
    4572:	2380      	movs	r3, #128	; 0x80
    4574:	89a2      	ldrh	r2, [r4, #12]
    4576:	9d01      	ldr	r5, [sp, #4]
    4578:	4313      	orrs	r3, r2
    457a:	81a3      	strh	r3, [r4, #12]
    457c:	e7d6      	b.n	452c <setvbuf+0xe0>
    457e:	2000      	movs	r0, #0
    4580:	e7ba      	b.n	44f8 <setvbuf+0xac>
    4582:	60a5      	str	r5, [r4, #8]
    4584:	e7c4      	b.n	4510 <setvbuf+0xc4>
    4586:	60a0      	str	r0, [r4, #8]
    4588:	e7c2      	b.n	4510 <setvbuf+0xc4>
    458a:	2001      	movs	r0, #1
    458c:	4240      	negs	r0, r0
    458e:	e7bf      	b.n	4510 <setvbuf+0xc4>
    4590:	20000024 	.word	0x20000024
    4594:	0000567c 	.word	0x0000567c
    4598:	fffff35c 	.word	0xfffff35c
    459c:	0000569c 	.word	0x0000569c
    45a0:	0000565c 	.word	0x0000565c

000045a4 <__swbuf_r>:
    45a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45a6:	0005      	movs	r5, r0
    45a8:	000e      	movs	r6, r1
    45aa:	0014      	movs	r4, r2
    45ac:	2800      	cmp	r0, #0
    45ae:	d004      	beq.n	45ba <__swbuf_r+0x16>
    45b0:	6983      	ldr	r3, [r0, #24]
    45b2:	2b00      	cmp	r3, #0
    45b4:	d101      	bne.n	45ba <__swbuf_r+0x16>
    45b6:	f000 f9b9 	bl	492c <__sinit>
    45ba:	4b22      	ldr	r3, [pc, #136]	; (4644 <__swbuf_r+0xa0>)
    45bc:	429c      	cmp	r4, r3
    45be:	d12d      	bne.n	461c <__swbuf_r+0x78>
    45c0:	686c      	ldr	r4, [r5, #4]
    45c2:	69a3      	ldr	r3, [r4, #24]
    45c4:	60a3      	str	r3, [r4, #8]
    45c6:	89a3      	ldrh	r3, [r4, #12]
    45c8:	071b      	lsls	r3, r3, #28
    45ca:	d531      	bpl.n	4630 <__swbuf_r+0x8c>
    45cc:	6923      	ldr	r3, [r4, #16]
    45ce:	2b00      	cmp	r3, #0
    45d0:	d02e      	beq.n	4630 <__swbuf_r+0x8c>
    45d2:	6823      	ldr	r3, [r4, #0]
    45d4:	6922      	ldr	r2, [r4, #16]
    45d6:	b2f7      	uxtb	r7, r6
    45d8:	1a98      	subs	r0, r3, r2
    45da:	6963      	ldr	r3, [r4, #20]
    45dc:	b2f6      	uxtb	r6, r6
    45de:	4298      	cmp	r0, r3
    45e0:	db05      	blt.n	45ee <__swbuf_r+0x4a>
    45e2:	0021      	movs	r1, r4
    45e4:	0028      	movs	r0, r5
    45e6:	f000 f933 	bl	4850 <_fflush_r>
    45ea:	2800      	cmp	r0, #0
    45ec:	d126      	bne.n	463c <__swbuf_r+0x98>
    45ee:	68a3      	ldr	r3, [r4, #8]
    45f0:	3001      	adds	r0, #1
    45f2:	3b01      	subs	r3, #1
    45f4:	60a3      	str	r3, [r4, #8]
    45f6:	6823      	ldr	r3, [r4, #0]
    45f8:	1c5a      	adds	r2, r3, #1
    45fa:	6022      	str	r2, [r4, #0]
    45fc:	701f      	strb	r7, [r3, #0]
    45fe:	6963      	ldr	r3, [r4, #20]
    4600:	4298      	cmp	r0, r3
    4602:	d004      	beq.n	460e <__swbuf_r+0x6a>
    4604:	89a3      	ldrh	r3, [r4, #12]
    4606:	07db      	lsls	r3, r3, #31
    4608:	d51a      	bpl.n	4640 <__swbuf_r+0x9c>
    460a:	2e0a      	cmp	r6, #10
    460c:	d118      	bne.n	4640 <__swbuf_r+0x9c>
    460e:	0021      	movs	r1, r4
    4610:	0028      	movs	r0, r5
    4612:	f000 f91d 	bl	4850 <_fflush_r>
    4616:	2800      	cmp	r0, #0
    4618:	d012      	beq.n	4640 <__swbuf_r+0x9c>
    461a:	e00f      	b.n	463c <__swbuf_r+0x98>
    461c:	4b0a      	ldr	r3, [pc, #40]	; (4648 <__swbuf_r+0xa4>)
    461e:	429c      	cmp	r4, r3
    4620:	d101      	bne.n	4626 <__swbuf_r+0x82>
    4622:	68ac      	ldr	r4, [r5, #8]
    4624:	e7cd      	b.n	45c2 <__swbuf_r+0x1e>
    4626:	4b09      	ldr	r3, [pc, #36]	; (464c <__swbuf_r+0xa8>)
    4628:	429c      	cmp	r4, r3
    462a:	d1ca      	bne.n	45c2 <__swbuf_r+0x1e>
    462c:	68ec      	ldr	r4, [r5, #12]
    462e:	e7c8      	b.n	45c2 <__swbuf_r+0x1e>
    4630:	0021      	movs	r1, r4
    4632:	0028      	movs	r0, r5
    4634:	f000 f80c 	bl	4650 <__swsetup_r>
    4638:	2800      	cmp	r0, #0
    463a:	d0ca      	beq.n	45d2 <__swbuf_r+0x2e>
    463c:	2601      	movs	r6, #1
    463e:	4276      	negs	r6, r6
    4640:	0030      	movs	r0, r6
    4642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4644:	0000567c 	.word	0x0000567c
    4648:	0000569c 	.word	0x0000569c
    464c:	0000565c 	.word	0x0000565c

00004650 <__swsetup_r>:
    4650:	4b36      	ldr	r3, [pc, #216]	; (472c <__swsetup_r+0xdc>)
    4652:	b570      	push	{r4, r5, r6, lr}
    4654:	681d      	ldr	r5, [r3, #0]
    4656:	0006      	movs	r6, r0
    4658:	000c      	movs	r4, r1
    465a:	2d00      	cmp	r5, #0
    465c:	d005      	beq.n	466a <__swsetup_r+0x1a>
    465e:	69ab      	ldr	r3, [r5, #24]
    4660:	2b00      	cmp	r3, #0
    4662:	d102      	bne.n	466a <__swsetup_r+0x1a>
    4664:	0028      	movs	r0, r5
    4666:	f000 f961 	bl	492c <__sinit>
    466a:	4b31      	ldr	r3, [pc, #196]	; (4730 <__swsetup_r+0xe0>)
    466c:	429c      	cmp	r4, r3
    466e:	d10f      	bne.n	4690 <__swsetup_r+0x40>
    4670:	686c      	ldr	r4, [r5, #4]
    4672:	230c      	movs	r3, #12
    4674:	5ee2      	ldrsh	r2, [r4, r3]
    4676:	b293      	uxth	r3, r2
    4678:	0719      	lsls	r1, r3, #28
    467a:	d42d      	bmi.n	46d8 <__swsetup_r+0x88>
    467c:	06d9      	lsls	r1, r3, #27
    467e:	d411      	bmi.n	46a4 <__swsetup_r+0x54>
    4680:	2309      	movs	r3, #9
    4682:	2001      	movs	r0, #1
    4684:	6033      	str	r3, [r6, #0]
    4686:	3337      	adds	r3, #55	; 0x37
    4688:	4313      	orrs	r3, r2
    468a:	81a3      	strh	r3, [r4, #12]
    468c:	4240      	negs	r0, r0
    468e:	bd70      	pop	{r4, r5, r6, pc}
    4690:	4b28      	ldr	r3, [pc, #160]	; (4734 <__swsetup_r+0xe4>)
    4692:	429c      	cmp	r4, r3
    4694:	d101      	bne.n	469a <__swsetup_r+0x4a>
    4696:	68ac      	ldr	r4, [r5, #8]
    4698:	e7eb      	b.n	4672 <__swsetup_r+0x22>
    469a:	4b27      	ldr	r3, [pc, #156]	; (4738 <__swsetup_r+0xe8>)
    469c:	429c      	cmp	r4, r3
    469e:	d1e8      	bne.n	4672 <__swsetup_r+0x22>
    46a0:	68ec      	ldr	r4, [r5, #12]
    46a2:	e7e6      	b.n	4672 <__swsetup_r+0x22>
    46a4:	075b      	lsls	r3, r3, #29
    46a6:	d513      	bpl.n	46d0 <__swsetup_r+0x80>
    46a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    46aa:	2900      	cmp	r1, #0
    46ac:	d008      	beq.n	46c0 <__swsetup_r+0x70>
    46ae:	0023      	movs	r3, r4
    46b0:	3344      	adds	r3, #68	; 0x44
    46b2:	4299      	cmp	r1, r3
    46b4:	d002      	beq.n	46bc <__swsetup_r+0x6c>
    46b6:	0030      	movs	r0, r6
    46b8:	f000 fa44 	bl	4b44 <_free_r>
    46bc:	2300      	movs	r3, #0
    46be:	6363      	str	r3, [r4, #52]	; 0x34
    46c0:	2224      	movs	r2, #36	; 0x24
    46c2:	89a3      	ldrh	r3, [r4, #12]
    46c4:	4393      	bics	r3, r2
    46c6:	81a3      	strh	r3, [r4, #12]
    46c8:	2300      	movs	r3, #0
    46ca:	6063      	str	r3, [r4, #4]
    46cc:	6923      	ldr	r3, [r4, #16]
    46ce:	6023      	str	r3, [r4, #0]
    46d0:	2308      	movs	r3, #8
    46d2:	89a2      	ldrh	r2, [r4, #12]
    46d4:	4313      	orrs	r3, r2
    46d6:	81a3      	strh	r3, [r4, #12]
    46d8:	6923      	ldr	r3, [r4, #16]
    46da:	2b00      	cmp	r3, #0
    46dc:	d10b      	bne.n	46f6 <__swsetup_r+0xa6>
    46de:	21a0      	movs	r1, #160	; 0xa0
    46e0:	2280      	movs	r2, #128	; 0x80
    46e2:	89a3      	ldrh	r3, [r4, #12]
    46e4:	0089      	lsls	r1, r1, #2
    46e6:	0092      	lsls	r2, r2, #2
    46e8:	400b      	ands	r3, r1
    46ea:	4293      	cmp	r3, r2
    46ec:	d003      	beq.n	46f6 <__swsetup_r+0xa6>
    46ee:	0021      	movs	r1, r4
    46f0:	0030      	movs	r0, r6
    46f2:	f000 f9d9 	bl	4aa8 <__smakebuf_r>
    46f6:	2301      	movs	r3, #1
    46f8:	89a2      	ldrh	r2, [r4, #12]
    46fa:	4013      	ands	r3, r2
    46fc:	d011      	beq.n	4722 <__swsetup_r+0xd2>
    46fe:	2300      	movs	r3, #0
    4700:	60a3      	str	r3, [r4, #8]
    4702:	6963      	ldr	r3, [r4, #20]
    4704:	425b      	negs	r3, r3
    4706:	61a3      	str	r3, [r4, #24]
    4708:	2000      	movs	r0, #0
    470a:	6923      	ldr	r3, [r4, #16]
    470c:	4283      	cmp	r3, r0
    470e:	d1be      	bne.n	468e <__swsetup_r+0x3e>
    4710:	230c      	movs	r3, #12
    4712:	5ee2      	ldrsh	r2, [r4, r3]
    4714:	0613      	lsls	r3, r2, #24
    4716:	d5ba      	bpl.n	468e <__swsetup_r+0x3e>
    4718:	2340      	movs	r3, #64	; 0x40
    471a:	4313      	orrs	r3, r2
    471c:	81a3      	strh	r3, [r4, #12]
    471e:	3801      	subs	r0, #1
    4720:	e7b5      	b.n	468e <__swsetup_r+0x3e>
    4722:	0792      	lsls	r2, r2, #30
    4724:	d400      	bmi.n	4728 <__swsetup_r+0xd8>
    4726:	6963      	ldr	r3, [r4, #20]
    4728:	60a3      	str	r3, [r4, #8]
    472a:	e7ed      	b.n	4708 <__swsetup_r+0xb8>
    472c:	20000024 	.word	0x20000024
    4730:	0000567c 	.word	0x0000567c
    4734:	0000569c 	.word	0x0000569c
    4738:	0000565c 	.word	0x0000565c

0000473c <__sflush_r>:
    473c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    473e:	898a      	ldrh	r2, [r1, #12]
    4740:	0005      	movs	r5, r0
    4742:	000c      	movs	r4, r1
    4744:	0713      	lsls	r3, r2, #28
    4746:	d460      	bmi.n	480a <__sflush_r+0xce>
    4748:	684b      	ldr	r3, [r1, #4]
    474a:	2b00      	cmp	r3, #0
    474c:	dc04      	bgt.n	4758 <__sflush_r+0x1c>
    474e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4750:	2b00      	cmp	r3, #0
    4752:	dc01      	bgt.n	4758 <__sflush_r+0x1c>
    4754:	2000      	movs	r0, #0
    4756:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4758:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    475a:	2f00      	cmp	r7, #0
    475c:	d0fa      	beq.n	4754 <__sflush_r+0x18>
    475e:	2300      	movs	r3, #0
    4760:	682e      	ldr	r6, [r5, #0]
    4762:	602b      	str	r3, [r5, #0]
    4764:	2380      	movs	r3, #128	; 0x80
    4766:	015b      	lsls	r3, r3, #5
    4768:	401a      	ands	r2, r3
    476a:	d034      	beq.n	47d6 <__sflush_r+0x9a>
    476c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    476e:	89a3      	ldrh	r3, [r4, #12]
    4770:	075b      	lsls	r3, r3, #29
    4772:	d506      	bpl.n	4782 <__sflush_r+0x46>
    4774:	6863      	ldr	r3, [r4, #4]
    4776:	1ac0      	subs	r0, r0, r3
    4778:	6b63      	ldr	r3, [r4, #52]	; 0x34
    477a:	2b00      	cmp	r3, #0
    477c:	d001      	beq.n	4782 <__sflush_r+0x46>
    477e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4780:	1ac0      	subs	r0, r0, r3
    4782:	0002      	movs	r2, r0
    4784:	6a21      	ldr	r1, [r4, #32]
    4786:	2300      	movs	r3, #0
    4788:	0028      	movs	r0, r5
    478a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    478c:	47b8      	blx	r7
    478e:	89a1      	ldrh	r1, [r4, #12]
    4790:	1c43      	adds	r3, r0, #1
    4792:	d106      	bne.n	47a2 <__sflush_r+0x66>
    4794:	682b      	ldr	r3, [r5, #0]
    4796:	2b1d      	cmp	r3, #29
    4798:	d831      	bhi.n	47fe <__sflush_r+0xc2>
    479a:	4a2c      	ldr	r2, [pc, #176]	; (484c <__sflush_r+0x110>)
    479c:	40da      	lsrs	r2, r3
    479e:	07d3      	lsls	r3, r2, #31
    47a0:	d52d      	bpl.n	47fe <__sflush_r+0xc2>
    47a2:	2300      	movs	r3, #0
    47a4:	6063      	str	r3, [r4, #4]
    47a6:	6923      	ldr	r3, [r4, #16]
    47a8:	6023      	str	r3, [r4, #0]
    47aa:	04cb      	lsls	r3, r1, #19
    47ac:	d505      	bpl.n	47ba <__sflush_r+0x7e>
    47ae:	1c43      	adds	r3, r0, #1
    47b0:	d102      	bne.n	47b8 <__sflush_r+0x7c>
    47b2:	682b      	ldr	r3, [r5, #0]
    47b4:	2b00      	cmp	r3, #0
    47b6:	d100      	bne.n	47ba <__sflush_r+0x7e>
    47b8:	6560      	str	r0, [r4, #84]	; 0x54
    47ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    47bc:	602e      	str	r6, [r5, #0]
    47be:	2900      	cmp	r1, #0
    47c0:	d0c8      	beq.n	4754 <__sflush_r+0x18>
    47c2:	0023      	movs	r3, r4
    47c4:	3344      	adds	r3, #68	; 0x44
    47c6:	4299      	cmp	r1, r3
    47c8:	d002      	beq.n	47d0 <__sflush_r+0x94>
    47ca:	0028      	movs	r0, r5
    47cc:	f000 f9ba 	bl	4b44 <_free_r>
    47d0:	2000      	movs	r0, #0
    47d2:	6360      	str	r0, [r4, #52]	; 0x34
    47d4:	e7bf      	b.n	4756 <__sflush_r+0x1a>
    47d6:	2301      	movs	r3, #1
    47d8:	6a21      	ldr	r1, [r4, #32]
    47da:	0028      	movs	r0, r5
    47dc:	47b8      	blx	r7
    47de:	1c43      	adds	r3, r0, #1
    47e0:	d1c5      	bne.n	476e <__sflush_r+0x32>
    47e2:	682b      	ldr	r3, [r5, #0]
    47e4:	2b00      	cmp	r3, #0
    47e6:	d0c2      	beq.n	476e <__sflush_r+0x32>
    47e8:	2b1d      	cmp	r3, #29
    47ea:	d001      	beq.n	47f0 <__sflush_r+0xb4>
    47ec:	2b16      	cmp	r3, #22
    47ee:	d101      	bne.n	47f4 <__sflush_r+0xb8>
    47f0:	602e      	str	r6, [r5, #0]
    47f2:	e7af      	b.n	4754 <__sflush_r+0x18>
    47f4:	2340      	movs	r3, #64	; 0x40
    47f6:	89a2      	ldrh	r2, [r4, #12]
    47f8:	4313      	orrs	r3, r2
    47fa:	81a3      	strh	r3, [r4, #12]
    47fc:	e7ab      	b.n	4756 <__sflush_r+0x1a>
    47fe:	2340      	movs	r3, #64	; 0x40
    4800:	430b      	orrs	r3, r1
    4802:	2001      	movs	r0, #1
    4804:	81a3      	strh	r3, [r4, #12]
    4806:	4240      	negs	r0, r0
    4808:	e7a5      	b.n	4756 <__sflush_r+0x1a>
    480a:	690f      	ldr	r7, [r1, #16]
    480c:	2f00      	cmp	r7, #0
    480e:	d0a1      	beq.n	4754 <__sflush_r+0x18>
    4810:	680b      	ldr	r3, [r1, #0]
    4812:	600f      	str	r7, [r1, #0]
    4814:	1bdb      	subs	r3, r3, r7
    4816:	9301      	str	r3, [sp, #4]
    4818:	2300      	movs	r3, #0
    481a:	0792      	lsls	r2, r2, #30
    481c:	d100      	bne.n	4820 <__sflush_r+0xe4>
    481e:	694b      	ldr	r3, [r1, #20]
    4820:	60a3      	str	r3, [r4, #8]
    4822:	9b01      	ldr	r3, [sp, #4]
    4824:	2b00      	cmp	r3, #0
    4826:	dc00      	bgt.n	482a <__sflush_r+0xee>
    4828:	e794      	b.n	4754 <__sflush_r+0x18>
    482a:	9b01      	ldr	r3, [sp, #4]
    482c:	003a      	movs	r2, r7
    482e:	6a21      	ldr	r1, [r4, #32]
    4830:	0028      	movs	r0, r5
    4832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4834:	47b0      	blx	r6
    4836:	2800      	cmp	r0, #0
    4838:	dc03      	bgt.n	4842 <__sflush_r+0x106>
    483a:	2340      	movs	r3, #64	; 0x40
    483c:	89a2      	ldrh	r2, [r4, #12]
    483e:	4313      	orrs	r3, r2
    4840:	e7df      	b.n	4802 <__sflush_r+0xc6>
    4842:	9b01      	ldr	r3, [sp, #4]
    4844:	183f      	adds	r7, r7, r0
    4846:	1a1b      	subs	r3, r3, r0
    4848:	9301      	str	r3, [sp, #4]
    484a:	e7ea      	b.n	4822 <__sflush_r+0xe6>
    484c:	20400001 	.word	0x20400001

00004850 <_fflush_r>:
    4850:	690b      	ldr	r3, [r1, #16]
    4852:	b570      	push	{r4, r5, r6, lr}
    4854:	0005      	movs	r5, r0
    4856:	000c      	movs	r4, r1
    4858:	2b00      	cmp	r3, #0
    485a:	d101      	bne.n	4860 <_fflush_r+0x10>
    485c:	2000      	movs	r0, #0
    485e:	bd70      	pop	{r4, r5, r6, pc}
    4860:	2800      	cmp	r0, #0
    4862:	d004      	beq.n	486e <_fflush_r+0x1e>
    4864:	6983      	ldr	r3, [r0, #24]
    4866:	2b00      	cmp	r3, #0
    4868:	d101      	bne.n	486e <_fflush_r+0x1e>
    486a:	f000 f85f 	bl	492c <__sinit>
    486e:	4b0b      	ldr	r3, [pc, #44]	; (489c <_fflush_r+0x4c>)
    4870:	429c      	cmp	r4, r3
    4872:	d109      	bne.n	4888 <_fflush_r+0x38>
    4874:	686c      	ldr	r4, [r5, #4]
    4876:	220c      	movs	r2, #12
    4878:	5ea3      	ldrsh	r3, [r4, r2]
    487a:	2b00      	cmp	r3, #0
    487c:	d0ee      	beq.n	485c <_fflush_r+0xc>
    487e:	0021      	movs	r1, r4
    4880:	0028      	movs	r0, r5
    4882:	f7ff ff5b 	bl	473c <__sflush_r>
    4886:	e7ea      	b.n	485e <_fflush_r+0xe>
    4888:	4b05      	ldr	r3, [pc, #20]	; (48a0 <_fflush_r+0x50>)
    488a:	429c      	cmp	r4, r3
    488c:	d101      	bne.n	4892 <_fflush_r+0x42>
    488e:	68ac      	ldr	r4, [r5, #8]
    4890:	e7f1      	b.n	4876 <_fflush_r+0x26>
    4892:	4b04      	ldr	r3, [pc, #16]	; (48a4 <_fflush_r+0x54>)
    4894:	429c      	cmp	r4, r3
    4896:	d1ee      	bne.n	4876 <_fflush_r+0x26>
    4898:	68ec      	ldr	r4, [r5, #12]
    489a:	e7ec      	b.n	4876 <_fflush_r+0x26>
    489c:	0000567c 	.word	0x0000567c
    48a0:	0000569c 	.word	0x0000569c
    48a4:	0000565c 	.word	0x0000565c

000048a8 <_cleanup_r>:
    48a8:	b510      	push	{r4, lr}
    48aa:	4902      	ldr	r1, [pc, #8]	; (48b4 <_cleanup_r+0xc>)
    48ac:	f000 f8b2 	bl	4a14 <_fwalk_reent>
    48b0:	bd10      	pop	{r4, pc}
    48b2:	46c0      	nop			; (mov r8, r8)
    48b4:	00004851 	.word	0x00004851

000048b8 <std.isra.0>:
    48b8:	2300      	movs	r3, #0
    48ba:	b510      	push	{r4, lr}
    48bc:	0004      	movs	r4, r0
    48be:	6003      	str	r3, [r0, #0]
    48c0:	6043      	str	r3, [r0, #4]
    48c2:	6083      	str	r3, [r0, #8]
    48c4:	8181      	strh	r1, [r0, #12]
    48c6:	6643      	str	r3, [r0, #100]	; 0x64
    48c8:	81c2      	strh	r2, [r0, #14]
    48ca:	6103      	str	r3, [r0, #16]
    48cc:	6143      	str	r3, [r0, #20]
    48ce:	6183      	str	r3, [r0, #24]
    48d0:	0019      	movs	r1, r3
    48d2:	2208      	movs	r2, #8
    48d4:	305c      	adds	r0, #92	; 0x5c
    48d6:	f7ff fd22 	bl	431e <memset>
    48da:	4b05      	ldr	r3, [pc, #20]	; (48f0 <std.isra.0+0x38>)
    48dc:	6224      	str	r4, [r4, #32]
    48de:	6263      	str	r3, [r4, #36]	; 0x24
    48e0:	4b04      	ldr	r3, [pc, #16]	; (48f4 <std.isra.0+0x3c>)
    48e2:	62a3      	str	r3, [r4, #40]	; 0x28
    48e4:	4b04      	ldr	r3, [pc, #16]	; (48f8 <std.isra.0+0x40>)
    48e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    48e8:	4b04      	ldr	r3, [pc, #16]	; (48fc <std.isra.0+0x44>)
    48ea:	6323      	str	r3, [r4, #48]	; 0x30
    48ec:	bd10      	pop	{r4, pc}
    48ee:	46c0      	nop			; (mov r8, r8)
    48f0:	00005251 	.word	0x00005251
    48f4:	00005279 	.word	0x00005279
    48f8:	000052b1 	.word	0x000052b1
    48fc:	000052dd 	.word	0x000052dd

00004900 <__sfmoreglue>:
    4900:	b570      	push	{r4, r5, r6, lr}
    4902:	2568      	movs	r5, #104	; 0x68
    4904:	1e4a      	subs	r2, r1, #1
    4906:	4355      	muls	r5, r2
    4908:	000e      	movs	r6, r1
    490a:	0029      	movs	r1, r5
    490c:	3174      	adds	r1, #116	; 0x74
    490e:	f000 f963 	bl	4bd8 <_malloc_r>
    4912:	1e04      	subs	r4, r0, #0
    4914:	d008      	beq.n	4928 <__sfmoreglue+0x28>
    4916:	2100      	movs	r1, #0
    4918:	002a      	movs	r2, r5
    491a:	6001      	str	r1, [r0, #0]
    491c:	6046      	str	r6, [r0, #4]
    491e:	300c      	adds	r0, #12
    4920:	60a0      	str	r0, [r4, #8]
    4922:	3268      	adds	r2, #104	; 0x68
    4924:	f7ff fcfb 	bl	431e <memset>
    4928:	0020      	movs	r0, r4
    492a:	bd70      	pop	{r4, r5, r6, pc}

0000492c <__sinit>:
    492c:	6983      	ldr	r3, [r0, #24]
    492e:	b513      	push	{r0, r1, r4, lr}
    4930:	0004      	movs	r4, r0
    4932:	2b00      	cmp	r3, #0
    4934:	d128      	bne.n	4988 <__sinit+0x5c>
    4936:	6483      	str	r3, [r0, #72]	; 0x48
    4938:	64c3      	str	r3, [r0, #76]	; 0x4c
    493a:	6503      	str	r3, [r0, #80]	; 0x50
    493c:	4b13      	ldr	r3, [pc, #76]	; (498c <__sinit+0x60>)
    493e:	4a14      	ldr	r2, [pc, #80]	; (4990 <__sinit+0x64>)
    4940:	681b      	ldr	r3, [r3, #0]
    4942:	6282      	str	r2, [r0, #40]	; 0x28
    4944:	9301      	str	r3, [sp, #4]
    4946:	4298      	cmp	r0, r3
    4948:	d101      	bne.n	494e <__sinit+0x22>
    494a:	2301      	movs	r3, #1
    494c:	6183      	str	r3, [r0, #24]
    494e:	0020      	movs	r0, r4
    4950:	f000 f820 	bl	4994 <__sfp>
    4954:	6060      	str	r0, [r4, #4]
    4956:	0020      	movs	r0, r4
    4958:	f000 f81c 	bl	4994 <__sfp>
    495c:	60a0      	str	r0, [r4, #8]
    495e:	0020      	movs	r0, r4
    4960:	f000 f818 	bl	4994 <__sfp>
    4964:	2200      	movs	r2, #0
    4966:	60e0      	str	r0, [r4, #12]
    4968:	2104      	movs	r1, #4
    496a:	6860      	ldr	r0, [r4, #4]
    496c:	f7ff ffa4 	bl	48b8 <std.isra.0>
    4970:	2201      	movs	r2, #1
    4972:	2109      	movs	r1, #9
    4974:	68a0      	ldr	r0, [r4, #8]
    4976:	f7ff ff9f 	bl	48b8 <std.isra.0>
    497a:	2202      	movs	r2, #2
    497c:	2112      	movs	r1, #18
    497e:	68e0      	ldr	r0, [r4, #12]
    4980:	f7ff ff9a 	bl	48b8 <std.isra.0>
    4984:	2301      	movs	r3, #1
    4986:	61a3      	str	r3, [r4, #24]
    4988:	bd13      	pop	{r0, r1, r4, pc}
    498a:	46c0      	nop			; (mov r8, r8)
    498c:	00005658 	.word	0x00005658
    4990:	000048a9 	.word	0x000048a9

00004994 <__sfp>:
    4994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4996:	4b1e      	ldr	r3, [pc, #120]	; (4a10 <__sfp+0x7c>)
    4998:	0007      	movs	r7, r0
    499a:	681e      	ldr	r6, [r3, #0]
    499c:	69b3      	ldr	r3, [r6, #24]
    499e:	2b00      	cmp	r3, #0
    49a0:	d102      	bne.n	49a8 <__sfp+0x14>
    49a2:	0030      	movs	r0, r6
    49a4:	f7ff ffc2 	bl	492c <__sinit>
    49a8:	3648      	adds	r6, #72	; 0x48
    49aa:	68b4      	ldr	r4, [r6, #8]
    49ac:	6873      	ldr	r3, [r6, #4]
    49ae:	3b01      	subs	r3, #1
    49b0:	d504      	bpl.n	49bc <__sfp+0x28>
    49b2:	6833      	ldr	r3, [r6, #0]
    49b4:	2b00      	cmp	r3, #0
    49b6:	d007      	beq.n	49c8 <__sfp+0x34>
    49b8:	6836      	ldr	r6, [r6, #0]
    49ba:	e7f6      	b.n	49aa <__sfp+0x16>
    49bc:	220c      	movs	r2, #12
    49be:	5ea5      	ldrsh	r5, [r4, r2]
    49c0:	2d00      	cmp	r5, #0
    49c2:	d00d      	beq.n	49e0 <__sfp+0x4c>
    49c4:	3468      	adds	r4, #104	; 0x68
    49c6:	e7f2      	b.n	49ae <__sfp+0x1a>
    49c8:	2104      	movs	r1, #4
    49ca:	0038      	movs	r0, r7
    49cc:	f7ff ff98 	bl	4900 <__sfmoreglue>
    49d0:	6030      	str	r0, [r6, #0]
    49d2:	2800      	cmp	r0, #0
    49d4:	d1f0      	bne.n	49b8 <__sfp+0x24>
    49d6:	230c      	movs	r3, #12
    49d8:	0004      	movs	r4, r0
    49da:	603b      	str	r3, [r7, #0]
    49dc:	0020      	movs	r0, r4
    49de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49e0:	2301      	movs	r3, #1
    49e2:	0020      	movs	r0, r4
    49e4:	425b      	negs	r3, r3
    49e6:	81e3      	strh	r3, [r4, #14]
    49e8:	3302      	adds	r3, #2
    49ea:	81a3      	strh	r3, [r4, #12]
    49ec:	6665      	str	r5, [r4, #100]	; 0x64
    49ee:	6025      	str	r5, [r4, #0]
    49f0:	60a5      	str	r5, [r4, #8]
    49f2:	6065      	str	r5, [r4, #4]
    49f4:	6125      	str	r5, [r4, #16]
    49f6:	6165      	str	r5, [r4, #20]
    49f8:	61a5      	str	r5, [r4, #24]
    49fa:	2208      	movs	r2, #8
    49fc:	0029      	movs	r1, r5
    49fe:	305c      	adds	r0, #92	; 0x5c
    4a00:	f7ff fc8d 	bl	431e <memset>
    4a04:	6365      	str	r5, [r4, #52]	; 0x34
    4a06:	63a5      	str	r5, [r4, #56]	; 0x38
    4a08:	64a5      	str	r5, [r4, #72]	; 0x48
    4a0a:	64e5      	str	r5, [r4, #76]	; 0x4c
    4a0c:	e7e6      	b.n	49dc <__sfp+0x48>
    4a0e:	46c0      	nop			; (mov r8, r8)
    4a10:	00005658 	.word	0x00005658

00004a14 <_fwalk_reent>:
    4a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4a16:	0004      	movs	r4, r0
    4a18:	0007      	movs	r7, r0
    4a1a:	2600      	movs	r6, #0
    4a1c:	9101      	str	r1, [sp, #4]
    4a1e:	3448      	adds	r4, #72	; 0x48
    4a20:	2c00      	cmp	r4, #0
    4a22:	d101      	bne.n	4a28 <_fwalk_reent+0x14>
    4a24:	0030      	movs	r0, r6
    4a26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4a28:	6863      	ldr	r3, [r4, #4]
    4a2a:	68a5      	ldr	r5, [r4, #8]
    4a2c:	9300      	str	r3, [sp, #0]
    4a2e:	9b00      	ldr	r3, [sp, #0]
    4a30:	3b01      	subs	r3, #1
    4a32:	9300      	str	r3, [sp, #0]
    4a34:	d501      	bpl.n	4a3a <_fwalk_reent+0x26>
    4a36:	6824      	ldr	r4, [r4, #0]
    4a38:	e7f2      	b.n	4a20 <_fwalk_reent+0xc>
    4a3a:	89ab      	ldrh	r3, [r5, #12]
    4a3c:	2b01      	cmp	r3, #1
    4a3e:	d908      	bls.n	4a52 <_fwalk_reent+0x3e>
    4a40:	220e      	movs	r2, #14
    4a42:	5eab      	ldrsh	r3, [r5, r2]
    4a44:	3301      	adds	r3, #1
    4a46:	d004      	beq.n	4a52 <_fwalk_reent+0x3e>
    4a48:	0029      	movs	r1, r5
    4a4a:	0038      	movs	r0, r7
    4a4c:	9b01      	ldr	r3, [sp, #4]
    4a4e:	4798      	blx	r3
    4a50:	4306      	orrs	r6, r0
    4a52:	3568      	adds	r5, #104	; 0x68
    4a54:	e7eb      	b.n	4a2e <_fwalk_reent+0x1a>
	...

00004a58 <__swhatbuf_r>:
    4a58:	b570      	push	{r4, r5, r6, lr}
    4a5a:	000e      	movs	r6, r1
    4a5c:	001d      	movs	r5, r3
    4a5e:	230e      	movs	r3, #14
    4a60:	5ec9      	ldrsh	r1, [r1, r3]
    4a62:	b090      	sub	sp, #64	; 0x40
    4a64:	0014      	movs	r4, r2
    4a66:	2900      	cmp	r1, #0
    4a68:	da07      	bge.n	4a7a <__swhatbuf_r+0x22>
    4a6a:	2300      	movs	r3, #0
    4a6c:	602b      	str	r3, [r5, #0]
    4a6e:	89b3      	ldrh	r3, [r6, #12]
    4a70:	061b      	lsls	r3, r3, #24
    4a72:	d411      	bmi.n	4a98 <__swhatbuf_r+0x40>
    4a74:	2380      	movs	r3, #128	; 0x80
    4a76:	00db      	lsls	r3, r3, #3
    4a78:	e00f      	b.n	4a9a <__swhatbuf_r+0x42>
    4a7a:	aa01      	add	r2, sp, #4
    4a7c:	f000 fc5a 	bl	5334 <_fstat_r>
    4a80:	2800      	cmp	r0, #0
    4a82:	dbf2      	blt.n	4a6a <__swhatbuf_r+0x12>
    4a84:	22f0      	movs	r2, #240	; 0xf0
    4a86:	9b02      	ldr	r3, [sp, #8]
    4a88:	0212      	lsls	r2, r2, #8
    4a8a:	4013      	ands	r3, r2
    4a8c:	4a05      	ldr	r2, [pc, #20]	; (4aa4 <__swhatbuf_r+0x4c>)
    4a8e:	189b      	adds	r3, r3, r2
    4a90:	425a      	negs	r2, r3
    4a92:	4153      	adcs	r3, r2
    4a94:	602b      	str	r3, [r5, #0]
    4a96:	e7ed      	b.n	4a74 <__swhatbuf_r+0x1c>
    4a98:	2340      	movs	r3, #64	; 0x40
    4a9a:	2000      	movs	r0, #0
    4a9c:	6023      	str	r3, [r4, #0]
    4a9e:	b010      	add	sp, #64	; 0x40
    4aa0:	bd70      	pop	{r4, r5, r6, pc}
    4aa2:	46c0      	nop			; (mov r8, r8)
    4aa4:	ffffe000 	.word	0xffffe000

00004aa8 <__smakebuf_r>:
    4aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4aaa:	2602      	movs	r6, #2
    4aac:	898b      	ldrh	r3, [r1, #12]
    4aae:	0005      	movs	r5, r0
    4ab0:	000c      	movs	r4, r1
    4ab2:	4233      	tst	r3, r6
    4ab4:	d006      	beq.n	4ac4 <__smakebuf_r+0x1c>
    4ab6:	0023      	movs	r3, r4
    4ab8:	3347      	adds	r3, #71	; 0x47
    4aba:	6023      	str	r3, [r4, #0]
    4abc:	6123      	str	r3, [r4, #16]
    4abe:	2301      	movs	r3, #1
    4ac0:	6163      	str	r3, [r4, #20]
    4ac2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4ac4:	ab01      	add	r3, sp, #4
    4ac6:	466a      	mov	r2, sp
    4ac8:	f7ff ffc6 	bl	4a58 <__swhatbuf_r>
    4acc:	9900      	ldr	r1, [sp, #0]
    4ace:	0007      	movs	r7, r0
    4ad0:	0028      	movs	r0, r5
    4ad2:	f000 f881 	bl	4bd8 <_malloc_r>
    4ad6:	2800      	cmp	r0, #0
    4ad8:	d108      	bne.n	4aec <__smakebuf_r+0x44>
    4ada:	220c      	movs	r2, #12
    4adc:	5ea3      	ldrsh	r3, [r4, r2]
    4ade:	059a      	lsls	r2, r3, #22
    4ae0:	d4ef      	bmi.n	4ac2 <__smakebuf_r+0x1a>
    4ae2:	2203      	movs	r2, #3
    4ae4:	4393      	bics	r3, r2
    4ae6:	431e      	orrs	r6, r3
    4ae8:	81a6      	strh	r6, [r4, #12]
    4aea:	e7e4      	b.n	4ab6 <__smakebuf_r+0xe>
    4aec:	4b0f      	ldr	r3, [pc, #60]	; (4b2c <__smakebuf_r+0x84>)
    4aee:	62ab      	str	r3, [r5, #40]	; 0x28
    4af0:	2380      	movs	r3, #128	; 0x80
    4af2:	89a2      	ldrh	r2, [r4, #12]
    4af4:	6020      	str	r0, [r4, #0]
    4af6:	4313      	orrs	r3, r2
    4af8:	81a3      	strh	r3, [r4, #12]
    4afa:	9b00      	ldr	r3, [sp, #0]
    4afc:	6120      	str	r0, [r4, #16]
    4afe:	6163      	str	r3, [r4, #20]
    4b00:	9b01      	ldr	r3, [sp, #4]
    4b02:	2b00      	cmp	r3, #0
    4b04:	d00d      	beq.n	4b22 <__smakebuf_r+0x7a>
    4b06:	230e      	movs	r3, #14
    4b08:	5ee1      	ldrsh	r1, [r4, r3]
    4b0a:	0028      	movs	r0, r5
    4b0c:	f000 fc24 	bl	5358 <_isatty_r>
    4b10:	2800      	cmp	r0, #0
    4b12:	d006      	beq.n	4b22 <__smakebuf_r+0x7a>
    4b14:	2203      	movs	r2, #3
    4b16:	89a3      	ldrh	r3, [r4, #12]
    4b18:	4393      	bics	r3, r2
    4b1a:	001a      	movs	r2, r3
    4b1c:	2301      	movs	r3, #1
    4b1e:	4313      	orrs	r3, r2
    4b20:	81a3      	strh	r3, [r4, #12]
    4b22:	89a0      	ldrh	r0, [r4, #12]
    4b24:	4338      	orrs	r0, r7
    4b26:	81a0      	strh	r0, [r4, #12]
    4b28:	e7cb      	b.n	4ac2 <__smakebuf_r+0x1a>
    4b2a:	46c0      	nop			; (mov r8, r8)
    4b2c:	000048a9 	.word	0x000048a9

00004b30 <malloc>:
    4b30:	b510      	push	{r4, lr}
    4b32:	4b03      	ldr	r3, [pc, #12]	; (4b40 <malloc+0x10>)
    4b34:	0001      	movs	r1, r0
    4b36:	6818      	ldr	r0, [r3, #0]
    4b38:	f000 f84e 	bl	4bd8 <_malloc_r>
    4b3c:	bd10      	pop	{r4, pc}
    4b3e:	46c0      	nop			; (mov r8, r8)
    4b40:	20000024 	.word	0x20000024

00004b44 <_free_r>:
    4b44:	b570      	push	{r4, r5, r6, lr}
    4b46:	0005      	movs	r5, r0
    4b48:	2900      	cmp	r1, #0
    4b4a:	d010      	beq.n	4b6e <_free_r+0x2a>
    4b4c:	1f0c      	subs	r4, r1, #4
    4b4e:	6823      	ldr	r3, [r4, #0]
    4b50:	2b00      	cmp	r3, #0
    4b52:	da00      	bge.n	4b56 <_free_r+0x12>
    4b54:	18e4      	adds	r4, r4, r3
    4b56:	0028      	movs	r0, r5
    4b58:	f000 fc2f 	bl	53ba <__malloc_lock>
    4b5c:	4a1d      	ldr	r2, [pc, #116]	; (4bd4 <_free_r+0x90>)
    4b5e:	6813      	ldr	r3, [r2, #0]
    4b60:	2b00      	cmp	r3, #0
    4b62:	d105      	bne.n	4b70 <_free_r+0x2c>
    4b64:	6063      	str	r3, [r4, #4]
    4b66:	6014      	str	r4, [r2, #0]
    4b68:	0028      	movs	r0, r5
    4b6a:	f000 fc27 	bl	53bc <__malloc_unlock>
    4b6e:	bd70      	pop	{r4, r5, r6, pc}
    4b70:	42a3      	cmp	r3, r4
    4b72:	d909      	bls.n	4b88 <_free_r+0x44>
    4b74:	6821      	ldr	r1, [r4, #0]
    4b76:	1860      	adds	r0, r4, r1
    4b78:	4283      	cmp	r3, r0
    4b7a:	d1f3      	bne.n	4b64 <_free_r+0x20>
    4b7c:	6818      	ldr	r0, [r3, #0]
    4b7e:	685b      	ldr	r3, [r3, #4]
    4b80:	1841      	adds	r1, r0, r1
    4b82:	6021      	str	r1, [r4, #0]
    4b84:	e7ee      	b.n	4b64 <_free_r+0x20>
    4b86:	0013      	movs	r3, r2
    4b88:	685a      	ldr	r2, [r3, #4]
    4b8a:	2a00      	cmp	r2, #0
    4b8c:	d001      	beq.n	4b92 <_free_r+0x4e>
    4b8e:	42a2      	cmp	r2, r4
    4b90:	d9f9      	bls.n	4b86 <_free_r+0x42>
    4b92:	6819      	ldr	r1, [r3, #0]
    4b94:	1858      	adds	r0, r3, r1
    4b96:	42a0      	cmp	r0, r4
    4b98:	d10b      	bne.n	4bb2 <_free_r+0x6e>
    4b9a:	6820      	ldr	r0, [r4, #0]
    4b9c:	1809      	adds	r1, r1, r0
    4b9e:	1858      	adds	r0, r3, r1
    4ba0:	6019      	str	r1, [r3, #0]
    4ba2:	4282      	cmp	r2, r0
    4ba4:	d1e0      	bne.n	4b68 <_free_r+0x24>
    4ba6:	6810      	ldr	r0, [r2, #0]
    4ba8:	6852      	ldr	r2, [r2, #4]
    4baa:	1841      	adds	r1, r0, r1
    4bac:	6019      	str	r1, [r3, #0]
    4bae:	605a      	str	r2, [r3, #4]
    4bb0:	e7da      	b.n	4b68 <_free_r+0x24>
    4bb2:	42a0      	cmp	r0, r4
    4bb4:	d902      	bls.n	4bbc <_free_r+0x78>
    4bb6:	230c      	movs	r3, #12
    4bb8:	602b      	str	r3, [r5, #0]
    4bba:	e7d5      	b.n	4b68 <_free_r+0x24>
    4bbc:	6821      	ldr	r1, [r4, #0]
    4bbe:	1860      	adds	r0, r4, r1
    4bc0:	4282      	cmp	r2, r0
    4bc2:	d103      	bne.n	4bcc <_free_r+0x88>
    4bc4:	6810      	ldr	r0, [r2, #0]
    4bc6:	6852      	ldr	r2, [r2, #4]
    4bc8:	1841      	adds	r1, r0, r1
    4bca:	6021      	str	r1, [r4, #0]
    4bcc:	6062      	str	r2, [r4, #4]
    4bce:	605c      	str	r4, [r3, #4]
    4bd0:	e7ca      	b.n	4b68 <_free_r+0x24>
    4bd2:	46c0      	nop			; (mov r8, r8)
    4bd4:	200000ec 	.word	0x200000ec

00004bd8 <_malloc_r>:
    4bd8:	2303      	movs	r3, #3
    4bda:	b570      	push	{r4, r5, r6, lr}
    4bdc:	1ccd      	adds	r5, r1, #3
    4bde:	439d      	bics	r5, r3
    4be0:	3508      	adds	r5, #8
    4be2:	0006      	movs	r6, r0
    4be4:	2d0c      	cmp	r5, #12
    4be6:	d21e      	bcs.n	4c26 <_malloc_r+0x4e>
    4be8:	250c      	movs	r5, #12
    4bea:	42a9      	cmp	r1, r5
    4bec:	d81d      	bhi.n	4c2a <_malloc_r+0x52>
    4bee:	0030      	movs	r0, r6
    4bf0:	f000 fbe3 	bl	53ba <__malloc_lock>
    4bf4:	4a25      	ldr	r2, [pc, #148]	; (4c8c <_malloc_r+0xb4>)
    4bf6:	6814      	ldr	r4, [r2, #0]
    4bf8:	0021      	movs	r1, r4
    4bfa:	2900      	cmp	r1, #0
    4bfc:	d119      	bne.n	4c32 <_malloc_r+0x5a>
    4bfe:	4c24      	ldr	r4, [pc, #144]	; (4c90 <_malloc_r+0xb8>)
    4c00:	6823      	ldr	r3, [r4, #0]
    4c02:	2b00      	cmp	r3, #0
    4c04:	d103      	bne.n	4c0e <_malloc_r+0x36>
    4c06:	0030      	movs	r0, r6
    4c08:	f000 fb10 	bl	522c <_sbrk_r>
    4c0c:	6020      	str	r0, [r4, #0]
    4c0e:	0029      	movs	r1, r5
    4c10:	0030      	movs	r0, r6
    4c12:	f000 fb0b 	bl	522c <_sbrk_r>
    4c16:	1c43      	adds	r3, r0, #1
    4c18:	d12c      	bne.n	4c74 <_malloc_r+0x9c>
    4c1a:	230c      	movs	r3, #12
    4c1c:	0030      	movs	r0, r6
    4c1e:	6033      	str	r3, [r6, #0]
    4c20:	f000 fbcc 	bl	53bc <__malloc_unlock>
    4c24:	e003      	b.n	4c2e <_malloc_r+0x56>
    4c26:	2d00      	cmp	r5, #0
    4c28:	dadf      	bge.n	4bea <_malloc_r+0x12>
    4c2a:	230c      	movs	r3, #12
    4c2c:	6033      	str	r3, [r6, #0]
    4c2e:	2000      	movs	r0, #0
    4c30:	bd70      	pop	{r4, r5, r6, pc}
    4c32:	680b      	ldr	r3, [r1, #0]
    4c34:	1b5b      	subs	r3, r3, r5
    4c36:	d41a      	bmi.n	4c6e <_malloc_r+0x96>
    4c38:	2b0b      	cmp	r3, #11
    4c3a:	d903      	bls.n	4c44 <_malloc_r+0x6c>
    4c3c:	600b      	str	r3, [r1, #0]
    4c3e:	18cc      	adds	r4, r1, r3
    4c40:	6025      	str	r5, [r4, #0]
    4c42:	e003      	b.n	4c4c <_malloc_r+0x74>
    4c44:	428c      	cmp	r4, r1
    4c46:	d10e      	bne.n	4c66 <_malloc_r+0x8e>
    4c48:	6863      	ldr	r3, [r4, #4]
    4c4a:	6013      	str	r3, [r2, #0]
    4c4c:	0030      	movs	r0, r6
    4c4e:	f000 fbb5 	bl	53bc <__malloc_unlock>
    4c52:	0020      	movs	r0, r4
    4c54:	2207      	movs	r2, #7
    4c56:	300b      	adds	r0, #11
    4c58:	1d23      	adds	r3, r4, #4
    4c5a:	4390      	bics	r0, r2
    4c5c:	1ac3      	subs	r3, r0, r3
    4c5e:	d0e7      	beq.n	4c30 <_malloc_r+0x58>
    4c60:	425a      	negs	r2, r3
    4c62:	50e2      	str	r2, [r4, r3]
    4c64:	e7e4      	b.n	4c30 <_malloc_r+0x58>
    4c66:	684b      	ldr	r3, [r1, #4]
    4c68:	6063      	str	r3, [r4, #4]
    4c6a:	000c      	movs	r4, r1
    4c6c:	e7ee      	b.n	4c4c <_malloc_r+0x74>
    4c6e:	000c      	movs	r4, r1
    4c70:	6849      	ldr	r1, [r1, #4]
    4c72:	e7c2      	b.n	4bfa <_malloc_r+0x22>
    4c74:	2303      	movs	r3, #3
    4c76:	1cc4      	adds	r4, r0, #3
    4c78:	439c      	bics	r4, r3
    4c7a:	42a0      	cmp	r0, r4
    4c7c:	d0e0      	beq.n	4c40 <_malloc_r+0x68>
    4c7e:	1a21      	subs	r1, r4, r0
    4c80:	0030      	movs	r0, r6
    4c82:	f000 fad3 	bl	522c <_sbrk_r>
    4c86:	1c43      	adds	r3, r0, #1
    4c88:	d1da      	bne.n	4c40 <_malloc_r+0x68>
    4c8a:	e7c6      	b.n	4c1a <_malloc_r+0x42>
    4c8c:	200000ec 	.word	0x200000ec
    4c90:	200000f0 	.word	0x200000f0

00004c94 <__sfputc_r>:
    4c94:	6893      	ldr	r3, [r2, #8]
    4c96:	b510      	push	{r4, lr}
    4c98:	3b01      	subs	r3, #1
    4c9a:	6093      	str	r3, [r2, #8]
    4c9c:	2b00      	cmp	r3, #0
    4c9e:	da05      	bge.n	4cac <__sfputc_r+0x18>
    4ca0:	6994      	ldr	r4, [r2, #24]
    4ca2:	42a3      	cmp	r3, r4
    4ca4:	db08      	blt.n	4cb8 <__sfputc_r+0x24>
    4ca6:	b2cb      	uxtb	r3, r1
    4ca8:	2b0a      	cmp	r3, #10
    4caa:	d005      	beq.n	4cb8 <__sfputc_r+0x24>
    4cac:	6813      	ldr	r3, [r2, #0]
    4cae:	1c58      	adds	r0, r3, #1
    4cb0:	6010      	str	r0, [r2, #0]
    4cb2:	7019      	strb	r1, [r3, #0]
    4cb4:	b2c8      	uxtb	r0, r1
    4cb6:	bd10      	pop	{r4, pc}
    4cb8:	f7ff fc74 	bl	45a4 <__swbuf_r>
    4cbc:	e7fb      	b.n	4cb6 <__sfputc_r+0x22>

00004cbe <__sfputs_r>:
    4cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cc0:	0006      	movs	r6, r0
    4cc2:	000f      	movs	r7, r1
    4cc4:	0014      	movs	r4, r2
    4cc6:	18d5      	adds	r5, r2, r3
    4cc8:	42ac      	cmp	r4, r5
    4cca:	d101      	bne.n	4cd0 <__sfputs_r+0x12>
    4ccc:	2000      	movs	r0, #0
    4cce:	e007      	b.n	4ce0 <__sfputs_r+0x22>
    4cd0:	7821      	ldrb	r1, [r4, #0]
    4cd2:	003a      	movs	r2, r7
    4cd4:	0030      	movs	r0, r6
    4cd6:	f7ff ffdd 	bl	4c94 <__sfputc_r>
    4cda:	3401      	adds	r4, #1
    4cdc:	1c43      	adds	r3, r0, #1
    4cde:	d1f3      	bne.n	4cc8 <__sfputs_r+0xa>
    4ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004ce4 <_vfiprintf_r>:
    4ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ce6:	b09f      	sub	sp, #124	; 0x7c
    4ce8:	0006      	movs	r6, r0
    4cea:	000f      	movs	r7, r1
    4cec:	0014      	movs	r4, r2
    4cee:	9305      	str	r3, [sp, #20]
    4cf0:	2800      	cmp	r0, #0
    4cf2:	d004      	beq.n	4cfe <_vfiprintf_r+0x1a>
    4cf4:	6983      	ldr	r3, [r0, #24]
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	d101      	bne.n	4cfe <_vfiprintf_r+0x1a>
    4cfa:	f7ff fe17 	bl	492c <__sinit>
    4cfe:	4b7f      	ldr	r3, [pc, #508]	; (4efc <_vfiprintf_r+0x218>)
    4d00:	429f      	cmp	r7, r3
    4d02:	d15c      	bne.n	4dbe <_vfiprintf_r+0xda>
    4d04:	6877      	ldr	r7, [r6, #4]
    4d06:	89bb      	ldrh	r3, [r7, #12]
    4d08:	071b      	lsls	r3, r3, #28
    4d0a:	d562      	bpl.n	4dd2 <_vfiprintf_r+0xee>
    4d0c:	693b      	ldr	r3, [r7, #16]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d05f      	beq.n	4dd2 <_vfiprintf_r+0xee>
    4d12:	2300      	movs	r3, #0
    4d14:	ad06      	add	r5, sp, #24
    4d16:	616b      	str	r3, [r5, #20]
    4d18:	3320      	adds	r3, #32
    4d1a:	766b      	strb	r3, [r5, #25]
    4d1c:	3310      	adds	r3, #16
    4d1e:	76ab      	strb	r3, [r5, #26]
    4d20:	9402      	str	r4, [sp, #8]
    4d22:	9c02      	ldr	r4, [sp, #8]
    4d24:	7823      	ldrb	r3, [r4, #0]
    4d26:	2b00      	cmp	r3, #0
    4d28:	d15d      	bne.n	4de6 <_vfiprintf_r+0x102>
    4d2a:	9b02      	ldr	r3, [sp, #8]
    4d2c:	1ae3      	subs	r3, r4, r3
    4d2e:	9304      	str	r3, [sp, #16]
    4d30:	d00d      	beq.n	4d4e <_vfiprintf_r+0x6a>
    4d32:	9b04      	ldr	r3, [sp, #16]
    4d34:	9a02      	ldr	r2, [sp, #8]
    4d36:	0039      	movs	r1, r7
    4d38:	0030      	movs	r0, r6
    4d3a:	f7ff ffc0 	bl	4cbe <__sfputs_r>
    4d3e:	1c43      	adds	r3, r0, #1
    4d40:	d100      	bne.n	4d44 <_vfiprintf_r+0x60>
    4d42:	e0cc      	b.n	4ede <_vfiprintf_r+0x1fa>
    4d44:	696a      	ldr	r2, [r5, #20]
    4d46:	9b04      	ldr	r3, [sp, #16]
    4d48:	4694      	mov	ip, r2
    4d4a:	4463      	add	r3, ip
    4d4c:	616b      	str	r3, [r5, #20]
    4d4e:	7823      	ldrb	r3, [r4, #0]
    4d50:	2b00      	cmp	r3, #0
    4d52:	d100      	bne.n	4d56 <_vfiprintf_r+0x72>
    4d54:	e0c3      	b.n	4ede <_vfiprintf_r+0x1fa>
    4d56:	2201      	movs	r2, #1
    4d58:	2300      	movs	r3, #0
    4d5a:	4252      	negs	r2, r2
    4d5c:	606a      	str	r2, [r5, #4]
    4d5e:	a902      	add	r1, sp, #8
    4d60:	3254      	adds	r2, #84	; 0x54
    4d62:	1852      	adds	r2, r2, r1
    4d64:	3401      	adds	r4, #1
    4d66:	602b      	str	r3, [r5, #0]
    4d68:	60eb      	str	r3, [r5, #12]
    4d6a:	60ab      	str	r3, [r5, #8]
    4d6c:	7013      	strb	r3, [r2, #0]
    4d6e:	65ab      	str	r3, [r5, #88]	; 0x58
    4d70:	7821      	ldrb	r1, [r4, #0]
    4d72:	2205      	movs	r2, #5
    4d74:	4862      	ldr	r0, [pc, #392]	; (4f00 <_vfiprintf_r+0x21c>)
    4d76:	f000 fb15 	bl	53a4 <memchr>
    4d7a:	1c63      	adds	r3, r4, #1
    4d7c:	469c      	mov	ip, r3
    4d7e:	2800      	cmp	r0, #0
    4d80:	d135      	bne.n	4dee <_vfiprintf_r+0x10a>
    4d82:	6829      	ldr	r1, [r5, #0]
    4d84:	06cb      	lsls	r3, r1, #27
    4d86:	d504      	bpl.n	4d92 <_vfiprintf_r+0xae>
    4d88:	2353      	movs	r3, #83	; 0x53
    4d8a:	aa02      	add	r2, sp, #8
    4d8c:	3020      	adds	r0, #32
    4d8e:	189b      	adds	r3, r3, r2
    4d90:	7018      	strb	r0, [r3, #0]
    4d92:	070b      	lsls	r3, r1, #28
    4d94:	d504      	bpl.n	4da0 <_vfiprintf_r+0xbc>
    4d96:	2353      	movs	r3, #83	; 0x53
    4d98:	202b      	movs	r0, #43	; 0x2b
    4d9a:	aa02      	add	r2, sp, #8
    4d9c:	189b      	adds	r3, r3, r2
    4d9e:	7018      	strb	r0, [r3, #0]
    4da0:	7823      	ldrb	r3, [r4, #0]
    4da2:	2b2a      	cmp	r3, #42	; 0x2a
    4da4:	d02c      	beq.n	4e00 <_vfiprintf_r+0x11c>
    4da6:	2000      	movs	r0, #0
    4da8:	210a      	movs	r1, #10
    4daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4dac:	7822      	ldrb	r2, [r4, #0]
    4dae:	3a30      	subs	r2, #48	; 0x30
    4db0:	2a09      	cmp	r2, #9
    4db2:	d800      	bhi.n	4db6 <_vfiprintf_r+0xd2>
    4db4:	e06b      	b.n	4e8e <_vfiprintf_r+0x1aa>
    4db6:	2800      	cmp	r0, #0
    4db8:	d02a      	beq.n	4e10 <_vfiprintf_r+0x12c>
    4dba:	9309      	str	r3, [sp, #36]	; 0x24
    4dbc:	e028      	b.n	4e10 <_vfiprintf_r+0x12c>
    4dbe:	4b51      	ldr	r3, [pc, #324]	; (4f04 <_vfiprintf_r+0x220>)
    4dc0:	429f      	cmp	r7, r3
    4dc2:	d101      	bne.n	4dc8 <_vfiprintf_r+0xe4>
    4dc4:	68b7      	ldr	r7, [r6, #8]
    4dc6:	e79e      	b.n	4d06 <_vfiprintf_r+0x22>
    4dc8:	4b4f      	ldr	r3, [pc, #316]	; (4f08 <_vfiprintf_r+0x224>)
    4dca:	429f      	cmp	r7, r3
    4dcc:	d19b      	bne.n	4d06 <_vfiprintf_r+0x22>
    4dce:	68f7      	ldr	r7, [r6, #12]
    4dd0:	e799      	b.n	4d06 <_vfiprintf_r+0x22>
    4dd2:	0039      	movs	r1, r7
    4dd4:	0030      	movs	r0, r6
    4dd6:	f7ff fc3b 	bl	4650 <__swsetup_r>
    4dda:	2800      	cmp	r0, #0
    4ddc:	d099      	beq.n	4d12 <_vfiprintf_r+0x2e>
    4dde:	2001      	movs	r0, #1
    4de0:	4240      	negs	r0, r0
    4de2:	b01f      	add	sp, #124	; 0x7c
    4de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4de6:	2b25      	cmp	r3, #37	; 0x25
    4de8:	d09f      	beq.n	4d2a <_vfiprintf_r+0x46>
    4dea:	3401      	adds	r4, #1
    4dec:	e79a      	b.n	4d24 <_vfiprintf_r+0x40>
    4dee:	4b44      	ldr	r3, [pc, #272]	; (4f00 <_vfiprintf_r+0x21c>)
    4df0:	6829      	ldr	r1, [r5, #0]
    4df2:	1ac0      	subs	r0, r0, r3
    4df4:	2301      	movs	r3, #1
    4df6:	4083      	lsls	r3, r0
    4df8:	430b      	orrs	r3, r1
    4dfa:	602b      	str	r3, [r5, #0]
    4dfc:	4664      	mov	r4, ip
    4dfe:	e7b7      	b.n	4d70 <_vfiprintf_r+0x8c>
    4e00:	9b05      	ldr	r3, [sp, #20]
    4e02:	1d18      	adds	r0, r3, #4
    4e04:	681b      	ldr	r3, [r3, #0]
    4e06:	9005      	str	r0, [sp, #20]
    4e08:	2b00      	cmp	r3, #0
    4e0a:	db3a      	blt.n	4e82 <_vfiprintf_r+0x19e>
    4e0c:	9309      	str	r3, [sp, #36]	; 0x24
    4e0e:	4664      	mov	r4, ip
    4e10:	7823      	ldrb	r3, [r4, #0]
    4e12:	2b2e      	cmp	r3, #46	; 0x2e
    4e14:	d10b      	bne.n	4e2e <_vfiprintf_r+0x14a>
    4e16:	7863      	ldrb	r3, [r4, #1]
    4e18:	1c62      	adds	r2, r4, #1
    4e1a:	2b2a      	cmp	r3, #42	; 0x2a
    4e1c:	d13f      	bne.n	4e9e <_vfiprintf_r+0x1ba>
    4e1e:	9b05      	ldr	r3, [sp, #20]
    4e20:	3402      	adds	r4, #2
    4e22:	1d1a      	adds	r2, r3, #4
    4e24:	681b      	ldr	r3, [r3, #0]
    4e26:	9205      	str	r2, [sp, #20]
    4e28:	2b00      	cmp	r3, #0
    4e2a:	db35      	blt.n	4e98 <_vfiprintf_r+0x1b4>
    4e2c:	9307      	str	r3, [sp, #28]
    4e2e:	7821      	ldrb	r1, [r4, #0]
    4e30:	2203      	movs	r2, #3
    4e32:	4836      	ldr	r0, [pc, #216]	; (4f0c <_vfiprintf_r+0x228>)
    4e34:	f000 fab6 	bl	53a4 <memchr>
    4e38:	2800      	cmp	r0, #0
    4e3a:	d007      	beq.n	4e4c <_vfiprintf_r+0x168>
    4e3c:	4b33      	ldr	r3, [pc, #204]	; (4f0c <_vfiprintf_r+0x228>)
    4e3e:	682a      	ldr	r2, [r5, #0]
    4e40:	1ac0      	subs	r0, r0, r3
    4e42:	2340      	movs	r3, #64	; 0x40
    4e44:	4083      	lsls	r3, r0
    4e46:	4313      	orrs	r3, r2
    4e48:	602b      	str	r3, [r5, #0]
    4e4a:	3401      	adds	r4, #1
    4e4c:	7821      	ldrb	r1, [r4, #0]
    4e4e:	1c63      	adds	r3, r4, #1
    4e50:	2206      	movs	r2, #6
    4e52:	482f      	ldr	r0, [pc, #188]	; (4f10 <_vfiprintf_r+0x22c>)
    4e54:	9302      	str	r3, [sp, #8]
    4e56:	7629      	strb	r1, [r5, #24]
    4e58:	f000 faa4 	bl	53a4 <memchr>
    4e5c:	2800      	cmp	r0, #0
    4e5e:	d044      	beq.n	4eea <_vfiprintf_r+0x206>
    4e60:	4b2c      	ldr	r3, [pc, #176]	; (4f14 <_vfiprintf_r+0x230>)
    4e62:	2b00      	cmp	r3, #0
    4e64:	d12f      	bne.n	4ec6 <_vfiprintf_r+0x1e2>
    4e66:	6829      	ldr	r1, [r5, #0]
    4e68:	9b05      	ldr	r3, [sp, #20]
    4e6a:	2207      	movs	r2, #7
    4e6c:	05c9      	lsls	r1, r1, #23
    4e6e:	d528      	bpl.n	4ec2 <_vfiprintf_r+0x1de>
    4e70:	189b      	adds	r3, r3, r2
    4e72:	4393      	bics	r3, r2
    4e74:	3308      	adds	r3, #8
    4e76:	9305      	str	r3, [sp, #20]
    4e78:	696b      	ldr	r3, [r5, #20]
    4e7a:	9a03      	ldr	r2, [sp, #12]
    4e7c:	189b      	adds	r3, r3, r2
    4e7e:	616b      	str	r3, [r5, #20]
    4e80:	e74f      	b.n	4d22 <_vfiprintf_r+0x3e>
    4e82:	425b      	negs	r3, r3
    4e84:	60eb      	str	r3, [r5, #12]
    4e86:	2302      	movs	r3, #2
    4e88:	430b      	orrs	r3, r1
    4e8a:	602b      	str	r3, [r5, #0]
    4e8c:	e7bf      	b.n	4e0e <_vfiprintf_r+0x12a>
    4e8e:	434b      	muls	r3, r1
    4e90:	3401      	adds	r4, #1
    4e92:	189b      	adds	r3, r3, r2
    4e94:	2001      	movs	r0, #1
    4e96:	e789      	b.n	4dac <_vfiprintf_r+0xc8>
    4e98:	2301      	movs	r3, #1
    4e9a:	425b      	negs	r3, r3
    4e9c:	e7c6      	b.n	4e2c <_vfiprintf_r+0x148>
    4e9e:	2300      	movs	r3, #0
    4ea0:	0014      	movs	r4, r2
    4ea2:	200a      	movs	r0, #10
    4ea4:	001a      	movs	r2, r3
    4ea6:	606b      	str	r3, [r5, #4]
    4ea8:	7821      	ldrb	r1, [r4, #0]
    4eaa:	3930      	subs	r1, #48	; 0x30
    4eac:	2909      	cmp	r1, #9
    4eae:	d903      	bls.n	4eb8 <_vfiprintf_r+0x1d4>
    4eb0:	2b00      	cmp	r3, #0
    4eb2:	d0bc      	beq.n	4e2e <_vfiprintf_r+0x14a>
    4eb4:	9207      	str	r2, [sp, #28]
    4eb6:	e7ba      	b.n	4e2e <_vfiprintf_r+0x14a>
    4eb8:	4342      	muls	r2, r0
    4eba:	3401      	adds	r4, #1
    4ebc:	1852      	adds	r2, r2, r1
    4ebe:	2301      	movs	r3, #1
    4ec0:	e7f2      	b.n	4ea8 <_vfiprintf_r+0x1c4>
    4ec2:	3307      	adds	r3, #7
    4ec4:	e7d5      	b.n	4e72 <_vfiprintf_r+0x18e>
    4ec6:	ab05      	add	r3, sp, #20
    4ec8:	9300      	str	r3, [sp, #0]
    4eca:	003a      	movs	r2, r7
    4ecc:	4b12      	ldr	r3, [pc, #72]	; (4f18 <_vfiprintf_r+0x234>)
    4ece:	0029      	movs	r1, r5
    4ed0:	0030      	movs	r0, r6
    4ed2:	e000      	b.n	4ed6 <_vfiprintf_r+0x1f2>
    4ed4:	bf00      	nop
    4ed6:	9003      	str	r0, [sp, #12]
    4ed8:	9b03      	ldr	r3, [sp, #12]
    4eda:	3301      	adds	r3, #1
    4edc:	d1cc      	bne.n	4e78 <_vfiprintf_r+0x194>
    4ede:	89bb      	ldrh	r3, [r7, #12]
    4ee0:	065b      	lsls	r3, r3, #25
    4ee2:	d500      	bpl.n	4ee6 <_vfiprintf_r+0x202>
    4ee4:	e77b      	b.n	4dde <_vfiprintf_r+0xfa>
    4ee6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4ee8:	e77b      	b.n	4de2 <_vfiprintf_r+0xfe>
    4eea:	ab05      	add	r3, sp, #20
    4eec:	9300      	str	r3, [sp, #0]
    4eee:	003a      	movs	r2, r7
    4ef0:	4b09      	ldr	r3, [pc, #36]	; (4f18 <_vfiprintf_r+0x234>)
    4ef2:	0029      	movs	r1, r5
    4ef4:	0030      	movs	r0, r6
    4ef6:	f000 f87f 	bl	4ff8 <_printf_i>
    4efa:	e7ec      	b.n	4ed6 <_vfiprintf_r+0x1f2>
    4efc:	0000567c 	.word	0x0000567c
    4f00:	000056bc 	.word	0x000056bc
    4f04:	0000569c 	.word	0x0000569c
    4f08:	0000565c 	.word	0x0000565c
    4f0c:	000056c2 	.word	0x000056c2
    4f10:	000056c6 	.word	0x000056c6
    4f14:	00000000 	.word	0x00000000
    4f18:	00004cbf 	.word	0x00004cbf

00004f1c <_printf_common>:
    4f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4f1e:	0015      	movs	r5, r2
    4f20:	9301      	str	r3, [sp, #4]
    4f22:	688a      	ldr	r2, [r1, #8]
    4f24:	690b      	ldr	r3, [r1, #16]
    4f26:	9000      	str	r0, [sp, #0]
    4f28:	000c      	movs	r4, r1
    4f2a:	4293      	cmp	r3, r2
    4f2c:	da00      	bge.n	4f30 <_printf_common+0x14>
    4f2e:	0013      	movs	r3, r2
    4f30:	0022      	movs	r2, r4
    4f32:	602b      	str	r3, [r5, #0]
    4f34:	3243      	adds	r2, #67	; 0x43
    4f36:	7812      	ldrb	r2, [r2, #0]
    4f38:	2a00      	cmp	r2, #0
    4f3a:	d001      	beq.n	4f40 <_printf_common+0x24>
    4f3c:	3301      	adds	r3, #1
    4f3e:	602b      	str	r3, [r5, #0]
    4f40:	6823      	ldr	r3, [r4, #0]
    4f42:	069b      	lsls	r3, r3, #26
    4f44:	d502      	bpl.n	4f4c <_printf_common+0x30>
    4f46:	682b      	ldr	r3, [r5, #0]
    4f48:	3302      	adds	r3, #2
    4f4a:	602b      	str	r3, [r5, #0]
    4f4c:	2706      	movs	r7, #6
    4f4e:	6823      	ldr	r3, [r4, #0]
    4f50:	401f      	ands	r7, r3
    4f52:	d027      	beq.n	4fa4 <_printf_common+0x88>
    4f54:	0023      	movs	r3, r4
    4f56:	3343      	adds	r3, #67	; 0x43
    4f58:	781b      	ldrb	r3, [r3, #0]
    4f5a:	1e5a      	subs	r2, r3, #1
    4f5c:	4193      	sbcs	r3, r2
    4f5e:	6822      	ldr	r2, [r4, #0]
    4f60:	0692      	lsls	r2, r2, #26
    4f62:	d430      	bmi.n	4fc6 <_printf_common+0xaa>
    4f64:	0022      	movs	r2, r4
    4f66:	9901      	ldr	r1, [sp, #4]
    4f68:	3243      	adds	r2, #67	; 0x43
    4f6a:	9800      	ldr	r0, [sp, #0]
    4f6c:	9e08      	ldr	r6, [sp, #32]
    4f6e:	47b0      	blx	r6
    4f70:	1c43      	adds	r3, r0, #1
    4f72:	d025      	beq.n	4fc0 <_printf_common+0xa4>
    4f74:	2306      	movs	r3, #6
    4f76:	6820      	ldr	r0, [r4, #0]
    4f78:	682a      	ldr	r2, [r5, #0]
    4f7a:	68e1      	ldr	r1, [r4, #12]
    4f7c:	4003      	ands	r3, r0
    4f7e:	2500      	movs	r5, #0
    4f80:	2b04      	cmp	r3, #4
    4f82:	d103      	bne.n	4f8c <_printf_common+0x70>
    4f84:	1a8d      	subs	r5, r1, r2
    4f86:	43eb      	mvns	r3, r5
    4f88:	17db      	asrs	r3, r3, #31
    4f8a:	401d      	ands	r5, r3
    4f8c:	68a3      	ldr	r3, [r4, #8]
    4f8e:	6922      	ldr	r2, [r4, #16]
    4f90:	4293      	cmp	r3, r2
    4f92:	dd01      	ble.n	4f98 <_printf_common+0x7c>
    4f94:	1a9b      	subs	r3, r3, r2
    4f96:	18ed      	adds	r5, r5, r3
    4f98:	2700      	movs	r7, #0
    4f9a:	42bd      	cmp	r5, r7
    4f9c:	d120      	bne.n	4fe0 <_printf_common+0xc4>
    4f9e:	2000      	movs	r0, #0
    4fa0:	e010      	b.n	4fc4 <_printf_common+0xa8>
    4fa2:	3701      	adds	r7, #1
    4fa4:	68e3      	ldr	r3, [r4, #12]
    4fa6:	682a      	ldr	r2, [r5, #0]
    4fa8:	1a9b      	subs	r3, r3, r2
    4faa:	429f      	cmp	r7, r3
    4fac:	dad2      	bge.n	4f54 <_printf_common+0x38>
    4fae:	0022      	movs	r2, r4
    4fb0:	2301      	movs	r3, #1
    4fb2:	3219      	adds	r2, #25
    4fb4:	9901      	ldr	r1, [sp, #4]
    4fb6:	9800      	ldr	r0, [sp, #0]
    4fb8:	9e08      	ldr	r6, [sp, #32]
    4fba:	47b0      	blx	r6
    4fbc:	1c43      	adds	r3, r0, #1
    4fbe:	d1f0      	bne.n	4fa2 <_printf_common+0x86>
    4fc0:	2001      	movs	r0, #1
    4fc2:	4240      	negs	r0, r0
    4fc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4fc6:	2030      	movs	r0, #48	; 0x30
    4fc8:	18e1      	adds	r1, r4, r3
    4fca:	3143      	adds	r1, #67	; 0x43
    4fcc:	7008      	strb	r0, [r1, #0]
    4fce:	0021      	movs	r1, r4
    4fd0:	1c5a      	adds	r2, r3, #1
    4fd2:	3145      	adds	r1, #69	; 0x45
    4fd4:	7809      	ldrb	r1, [r1, #0]
    4fd6:	18a2      	adds	r2, r4, r2
    4fd8:	3243      	adds	r2, #67	; 0x43
    4fda:	3302      	adds	r3, #2
    4fdc:	7011      	strb	r1, [r2, #0]
    4fde:	e7c1      	b.n	4f64 <_printf_common+0x48>
    4fe0:	0022      	movs	r2, r4
    4fe2:	2301      	movs	r3, #1
    4fe4:	321a      	adds	r2, #26
    4fe6:	9901      	ldr	r1, [sp, #4]
    4fe8:	9800      	ldr	r0, [sp, #0]
    4fea:	9e08      	ldr	r6, [sp, #32]
    4fec:	47b0      	blx	r6
    4fee:	1c43      	adds	r3, r0, #1
    4ff0:	d0e6      	beq.n	4fc0 <_printf_common+0xa4>
    4ff2:	3701      	adds	r7, #1
    4ff4:	e7d1      	b.n	4f9a <_printf_common+0x7e>
	...

00004ff8 <_printf_i>:
    4ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ffa:	b08b      	sub	sp, #44	; 0x2c
    4ffc:	9206      	str	r2, [sp, #24]
    4ffe:	000a      	movs	r2, r1
    5000:	3243      	adds	r2, #67	; 0x43
    5002:	9307      	str	r3, [sp, #28]
    5004:	9005      	str	r0, [sp, #20]
    5006:	9204      	str	r2, [sp, #16]
    5008:	7e0a      	ldrb	r2, [r1, #24]
    500a:	000c      	movs	r4, r1
    500c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    500e:	2a6e      	cmp	r2, #110	; 0x6e
    5010:	d100      	bne.n	5014 <_printf_i+0x1c>
    5012:	e08f      	b.n	5134 <_printf_i+0x13c>
    5014:	d817      	bhi.n	5046 <_printf_i+0x4e>
    5016:	2a63      	cmp	r2, #99	; 0x63
    5018:	d02c      	beq.n	5074 <_printf_i+0x7c>
    501a:	d808      	bhi.n	502e <_printf_i+0x36>
    501c:	2a00      	cmp	r2, #0
    501e:	d100      	bne.n	5022 <_printf_i+0x2a>
    5020:	e099      	b.n	5156 <_printf_i+0x15e>
    5022:	2a58      	cmp	r2, #88	; 0x58
    5024:	d054      	beq.n	50d0 <_printf_i+0xd8>
    5026:	0026      	movs	r6, r4
    5028:	3642      	adds	r6, #66	; 0x42
    502a:	7032      	strb	r2, [r6, #0]
    502c:	e029      	b.n	5082 <_printf_i+0x8a>
    502e:	2a64      	cmp	r2, #100	; 0x64
    5030:	d001      	beq.n	5036 <_printf_i+0x3e>
    5032:	2a69      	cmp	r2, #105	; 0x69
    5034:	d1f7      	bne.n	5026 <_printf_i+0x2e>
    5036:	6821      	ldr	r1, [r4, #0]
    5038:	681a      	ldr	r2, [r3, #0]
    503a:	0608      	lsls	r0, r1, #24
    503c:	d523      	bpl.n	5086 <_printf_i+0x8e>
    503e:	1d11      	adds	r1, r2, #4
    5040:	6019      	str	r1, [r3, #0]
    5042:	6815      	ldr	r5, [r2, #0]
    5044:	e025      	b.n	5092 <_printf_i+0x9a>
    5046:	2a73      	cmp	r2, #115	; 0x73
    5048:	d100      	bne.n	504c <_printf_i+0x54>
    504a:	e088      	b.n	515e <_printf_i+0x166>
    504c:	d808      	bhi.n	5060 <_printf_i+0x68>
    504e:	2a6f      	cmp	r2, #111	; 0x6f
    5050:	d029      	beq.n	50a6 <_printf_i+0xae>
    5052:	2a70      	cmp	r2, #112	; 0x70
    5054:	d1e7      	bne.n	5026 <_printf_i+0x2e>
    5056:	2220      	movs	r2, #32
    5058:	6809      	ldr	r1, [r1, #0]
    505a:	430a      	orrs	r2, r1
    505c:	6022      	str	r2, [r4, #0]
    505e:	e003      	b.n	5068 <_printf_i+0x70>
    5060:	2a75      	cmp	r2, #117	; 0x75
    5062:	d020      	beq.n	50a6 <_printf_i+0xae>
    5064:	2a78      	cmp	r2, #120	; 0x78
    5066:	d1de      	bne.n	5026 <_printf_i+0x2e>
    5068:	0022      	movs	r2, r4
    506a:	2178      	movs	r1, #120	; 0x78
    506c:	3245      	adds	r2, #69	; 0x45
    506e:	7011      	strb	r1, [r2, #0]
    5070:	4a6c      	ldr	r2, [pc, #432]	; (5224 <_printf_i+0x22c>)
    5072:	e030      	b.n	50d6 <_printf_i+0xde>
    5074:	000e      	movs	r6, r1
    5076:	681a      	ldr	r2, [r3, #0]
    5078:	3642      	adds	r6, #66	; 0x42
    507a:	1d11      	adds	r1, r2, #4
    507c:	6019      	str	r1, [r3, #0]
    507e:	6813      	ldr	r3, [r2, #0]
    5080:	7033      	strb	r3, [r6, #0]
    5082:	2301      	movs	r3, #1
    5084:	e079      	b.n	517a <_printf_i+0x182>
    5086:	0649      	lsls	r1, r1, #25
    5088:	d5d9      	bpl.n	503e <_printf_i+0x46>
    508a:	1d11      	adds	r1, r2, #4
    508c:	6019      	str	r1, [r3, #0]
    508e:	2300      	movs	r3, #0
    5090:	5ed5      	ldrsh	r5, [r2, r3]
    5092:	2d00      	cmp	r5, #0
    5094:	da03      	bge.n	509e <_printf_i+0xa6>
    5096:	232d      	movs	r3, #45	; 0x2d
    5098:	9a04      	ldr	r2, [sp, #16]
    509a:	426d      	negs	r5, r5
    509c:	7013      	strb	r3, [r2, #0]
    509e:	4b62      	ldr	r3, [pc, #392]	; (5228 <_printf_i+0x230>)
    50a0:	270a      	movs	r7, #10
    50a2:	9303      	str	r3, [sp, #12]
    50a4:	e02f      	b.n	5106 <_printf_i+0x10e>
    50a6:	6820      	ldr	r0, [r4, #0]
    50a8:	6819      	ldr	r1, [r3, #0]
    50aa:	0605      	lsls	r5, r0, #24
    50ac:	d503      	bpl.n	50b6 <_printf_i+0xbe>
    50ae:	1d08      	adds	r0, r1, #4
    50b0:	6018      	str	r0, [r3, #0]
    50b2:	680d      	ldr	r5, [r1, #0]
    50b4:	e005      	b.n	50c2 <_printf_i+0xca>
    50b6:	0640      	lsls	r0, r0, #25
    50b8:	d5f9      	bpl.n	50ae <_printf_i+0xb6>
    50ba:	680d      	ldr	r5, [r1, #0]
    50bc:	1d08      	adds	r0, r1, #4
    50be:	6018      	str	r0, [r3, #0]
    50c0:	b2ad      	uxth	r5, r5
    50c2:	4b59      	ldr	r3, [pc, #356]	; (5228 <_printf_i+0x230>)
    50c4:	2708      	movs	r7, #8
    50c6:	9303      	str	r3, [sp, #12]
    50c8:	2a6f      	cmp	r2, #111	; 0x6f
    50ca:	d018      	beq.n	50fe <_printf_i+0x106>
    50cc:	270a      	movs	r7, #10
    50ce:	e016      	b.n	50fe <_printf_i+0x106>
    50d0:	3145      	adds	r1, #69	; 0x45
    50d2:	700a      	strb	r2, [r1, #0]
    50d4:	4a54      	ldr	r2, [pc, #336]	; (5228 <_printf_i+0x230>)
    50d6:	9203      	str	r2, [sp, #12]
    50d8:	681a      	ldr	r2, [r3, #0]
    50da:	6821      	ldr	r1, [r4, #0]
    50dc:	1d10      	adds	r0, r2, #4
    50de:	6018      	str	r0, [r3, #0]
    50e0:	6815      	ldr	r5, [r2, #0]
    50e2:	0608      	lsls	r0, r1, #24
    50e4:	d522      	bpl.n	512c <_printf_i+0x134>
    50e6:	07cb      	lsls	r3, r1, #31
    50e8:	d502      	bpl.n	50f0 <_printf_i+0xf8>
    50ea:	2320      	movs	r3, #32
    50ec:	4319      	orrs	r1, r3
    50ee:	6021      	str	r1, [r4, #0]
    50f0:	2710      	movs	r7, #16
    50f2:	2d00      	cmp	r5, #0
    50f4:	d103      	bne.n	50fe <_printf_i+0x106>
    50f6:	2320      	movs	r3, #32
    50f8:	6822      	ldr	r2, [r4, #0]
    50fa:	439a      	bics	r2, r3
    50fc:	6022      	str	r2, [r4, #0]
    50fe:	0023      	movs	r3, r4
    5100:	2200      	movs	r2, #0
    5102:	3343      	adds	r3, #67	; 0x43
    5104:	701a      	strb	r2, [r3, #0]
    5106:	6863      	ldr	r3, [r4, #4]
    5108:	60a3      	str	r3, [r4, #8]
    510a:	2b00      	cmp	r3, #0
    510c:	db5c      	blt.n	51c8 <_printf_i+0x1d0>
    510e:	2204      	movs	r2, #4
    5110:	6821      	ldr	r1, [r4, #0]
    5112:	4391      	bics	r1, r2
    5114:	6021      	str	r1, [r4, #0]
    5116:	2d00      	cmp	r5, #0
    5118:	d158      	bne.n	51cc <_printf_i+0x1d4>
    511a:	9e04      	ldr	r6, [sp, #16]
    511c:	2b00      	cmp	r3, #0
    511e:	d064      	beq.n	51ea <_printf_i+0x1f2>
    5120:	0026      	movs	r6, r4
    5122:	9b03      	ldr	r3, [sp, #12]
    5124:	3642      	adds	r6, #66	; 0x42
    5126:	781b      	ldrb	r3, [r3, #0]
    5128:	7033      	strb	r3, [r6, #0]
    512a:	e05e      	b.n	51ea <_printf_i+0x1f2>
    512c:	0648      	lsls	r0, r1, #25
    512e:	d5da      	bpl.n	50e6 <_printf_i+0xee>
    5130:	b2ad      	uxth	r5, r5
    5132:	e7d8      	b.n	50e6 <_printf_i+0xee>
    5134:	6809      	ldr	r1, [r1, #0]
    5136:	681a      	ldr	r2, [r3, #0]
    5138:	0608      	lsls	r0, r1, #24
    513a:	d505      	bpl.n	5148 <_printf_i+0x150>
    513c:	1d11      	adds	r1, r2, #4
    513e:	6019      	str	r1, [r3, #0]
    5140:	6813      	ldr	r3, [r2, #0]
    5142:	6962      	ldr	r2, [r4, #20]
    5144:	601a      	str	r2, [r3, #0]
    5146:	e006      	b.n	5156 <_printf_i+0x15e>
    5148:	0649      	lsls	r1, r1, #25
    514a:	d5f7      	bpl.n	513c <_printf_i+0x144>
    514c:	1d11      	adds	r1, r2, #4
    514e:	6019      	str	r1, [r3, #0]
    5150:	6813      	ldr	r3, [r2, #0]
    5152:	8aa2      	ldrh	r2, [r4, #20]
    5154:	801a      	strh	r2, [r3, #0]
    5156:	2300      	movs	r3, #0
    5158:	9e04      	ldr	r6, [sp, #16]
    515a:	6123      	str	r3, [r4, #16]
    515c:	e054      	b.n	5208 <_printf_i+0x210>
    515e:	681a      	ldr	r2, [r3, #0]
    5160:	1d11      	adds	r1, r2, #4
    5162:	6019      	str	r1, [r3, #0]
    5164:	6816      	ldr	r6, [r2, #0]
    5166:	2100      	movs	r1, #0
    5168:	6862      	ldr	r2, [r4, #4]
    516a:	0030      	movs	r0, r6
    516c:	f000 f91a 	bl	53a4 <memchr>
    5170:	2800      	cmp	r0, #0
    5172:	d001      	beq.n	5178 <_printf_i+0x180>
    5174:	1b80      	subs	r0, r0, r6
    5176:	6060      	str	r0, [r4, #4]
    5178:	6863      	ldr	r3, [r4, #4]
    517a:	6123      	str	r3, [r4, #16]
    517c:	2300      	movs	r3, #0
    517e:	9a04      	ldr	r2, [sp, #16]
    5180:	7013      	strb	r3, [r2, #0]
    5182:	e041      	b.n	5208 <_printf_i+0x210>
    5184:	6923      	ldr	r3, [r4, #16]
    5186:	0032      	movs	r2, r6
    5188:	9906      	ldr	r1, [sp, #24]
    518a:	9805      	ldr	r0, [sp, #20]
    518c:	9d07      	ldr	r5, [sp, #28]
    518e:	47a8      	blx	r5
    5190:	1c43      	adds	r3, r0, #1
    5192:	d043      	beq.n	521c <_printf_i+0x224>
    5194:	6823      	ldr	r3, [r4, #0]
    5196:	2500      	movs	r5, #0
    5198:	079b      	lsls	r3, r3, #30
    519a:	d40f      	bmi.n	51bc <_printf_i+0x1c4>
    519c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    519e:	68e0      	ldr	r0, [r4, #12]
    51a0:	4298      	cmp	r0, r3
    51a2:	da3d      	bge.n	5220 <_printf_i+0x228>
    51a4:	0018      	movs	r0, r3
    51a6:	e03b      	b.n	5220 <_printf_i+0x228>
    51a8:	0022      	movs	r2, r4
    51aa:	2301      	movs	r3, #1
    51ac:	3219      	adds	r2, #25
    51ae:	9906      	ldr	r1, [sp, #24]
    51b0:	9805      	ldr	r0, [sp, #20]
    51b2:	9e07      	ldr	r6, [sp, #28]
    51b4:	47b0      	blx	r6
    51b6:	1c43      	adds	r3, r0, #1
    51b8:	d030      	beq.n	521c <_printf_i+0x224>
    51ba:	3501      	adds	r5, #1
    51bc:	68e3      	ldr	r3, [r4, #12]
    51be:	9a09      	ldr	r2, [sp, #36]	; 0x24
    51c0:	1a9b      	subs	r3, r3, r2
    51c2:	429d      	cmp	r5, r3
    51c4:	dbf0      	blt.n	51a8 <_printf_i+0x1b0>
    51c6:	e7e9      	b.n	519c <_printf_i+0x1a4>
    51c8:	2d00      	cmp	r5, #0
    51ca:	d0a9      	beq.n	5120 <_printf_i+0x128>
    51cc:	9e04      	ldr	r6, [sp, #16]
    51ce:	0028      	movs	r0, r5
    51d0:	0039      	movs	r1, r7
    51d2:	f7fd fbe3 	bl	299c <__aeabi_uidivmod>
    51d6:	9b03      	ldr	r3, [sp, #12]
    51d8:	3e01      	subs	r6, #1
    51da:	5c5b      	ldrb	r3, [r3, r1]
    51dc:	0028      	movs	r0, r5
    51de:	7033      	strb	r3, [r6, #0]
    51e0:	0039      	movs	r1, r7
    51e2:	f7fd fb55 	bl	2890 <__udivsi3>
    51e6:	1e05      	subs	r5, r0, #0
    51e8:	d1f1      	bne.n	51ce <_printf_i+0x1d6>
    51ea:	2f08      	cmp	r7, #8
    51ec:	d109      	bne.n	5202 <_printf_i+0x20a>
    51ee:	6823      	ldr	r3, [r4, #0]
    51f0:	07db      	lsls	r3, r3, #31
    51f2:	d506      	bpl.n	5202 <_printf_i+0x20a>
    51f4:	6863      	ldr	r3, [r4, #4]
    51f6:	6922      	ldr	r2, [r4, #16]
    51f8:	4293      	cmp	r3, r2
    51fa:	dc02      	bgt.n	5202 <_printf_i+0x20a>
    51fc:	2330      	movs	r3, #48	; 0x30
    51fe:	3e01      	subs	r6, #1
    5200:	7033      	strb	r3, [r6, #0]
    5202:	9b04      	ldr	r3, [sp, #16]
    5204:	1b9b      	subs	r3, r3, r6
    5206:	6123      	str	r3, [r4, #16]
    5208:	9b07      	ldr	r3, [sp, #28]
    520a:	aa09      	add	r2, sp, #36	; 0x24
    520c:	9300      	str	r3, [sp, #0]
    520e:	0021      	movs	r1, r4
    5210:	9b06      	ldr	r3, [sp, #24]
    5212:	9805      	ldr	r0, [sp, #20]
    5214:	f7ff fe82 	bl	4f1c <_printf_common>
    5218:	1c43      	adds	r3, r0, #1
    521a:	d1b3      	bne.n	5184 <_printf_i+0x18c>
    521c:	2001      	movs	r0, #1
    521e:	4240      	negs	r0, r0
    5220:	b00b      	add	sp, #44	; 0x2c
    5222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5224:	000056de 	.word	0x000056de
    5228:	000056cd 	.word	0x000056cd

0000522c <_sbrk_r>:
    522c:	2300      	movs	r3, #0
    522e:	b570      	push	{r4, r5, r6, lr}
    5230:	4c06      	ldr	r4, [pc, #24]	; (524c <_sbrk_r+0x20>)
    5232:	0005      	movs	r5, r0
    5234:	0008      	movs	r0, r1
    5236:	6023      	str	r3, [r4, #0]
    5238:	f7fd f8aa 	bl	2390 <_sbrk>
    523c:	1c43      	adds	r3, r0, #1
    523e:	d103      	bne.n	5248 <_sbrk_r+0x1c>
    5240:	6823      	ldr	r3, [r4, #0]
    5242:	2b00      	cmp	r3, #0
    5244:	d000      	beq.n	5248 <_sbrk_r+0x1c>
    5246:	602b      	str	r3, [r5, #0]
    5248:	bd70      	pop	{r4, r5, r6, pc}
    524a:	46c0      	nop			; (mov r8, r8)
    524c:	20000184 	.word	0x20000184

00005250 <__sread>:
    5250:	b570      	push	{r4, r5, r6, lr}
    5252:	000c      	movs	r4, r1
    5254:	250e      	movs	r5, #14
    5256:	5f49      	ldrsh	r1, [r1, r5]
    5258:	f000 f8b2 	bl	53c0 <_read_r>
    525c:	2800      	cmp	r0, #0
    525e:	db03      	blt.n	5268 <__sread+0x18>
    5260:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5262:	181b      	adds	r3, r3, r0
    5264:	6563      	str	r3, [r4, #84]	; 0x54
    5266:	bd70      	pop	{r4, r5, r6, pc}
    5268:	89a3      	ldrh	r3, [r4, #12]
    526a:	4a02      	ldr	r2, [pc, #8]	; (5274 <__sread+0x24>)
    526c:	4013      	ands	r3, r2
    526e:	81a3      	strh	r3, [r4, #12]
    5270:	e7f9      	b.n	5266 <__sread+0x16>
    5272:	46c0      	nop			; (mov r8, r8)
    5274:	ffffefff 	.word	0xffffefff

00005278 <__swrite>:
    5278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    527a:	001f      	movs	r7, r3
    527c:	898b      	ldrh	r3, [r1, #12]
    527e:	0005      	movs	r5, r0
    5280:	000c      	movs	r4, r1
    5282:	0016      	movs	r6, r2
    5284:	05db      	lsls	r3, r3, #23
    5286:	d505      	bpl.n	5294 <__swrite+0x1c>
    5288:	230e      	movs	r3, #14
    528a:	5ec9      	ldrsh	r1, [r1, r3]
    528c:	2200      	movs	r2, #0
    528e:	2302      	movs	r3, #2
    5290:	f000 f874 	bl	537c <_lseek_r>
    5294:	89a3      	ldrh	r3, [r4, #12]
    5296:	4a05      	ldr	r2, [pc, #20]	; (52ac <__swrite+0x34>)
    5298:	0028      	movs	r0, r5
    529a:	4013      	ands	r3, r2
    529c:	81a3      	strh	r3, [r4, #12]
    529e:	0032      	movs	r2, r6
    52a0:	230e      	movs	r3, #14
    52a2:	5ee1      	ldrsh	r1, [r4, r3]
    52a4:	003b      	movs	r3, r7
    52a6:	f000 f81f 	bl	52e8 <_write_r>
    52aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52ac:	ffffefff 	.word	0xffffefff

000052b0 <__sseek>:
    52b0:	b570      	push	{r4, r5, r6, lr}
    52b2:	000c      	movs	r4, r1
    52b4:	250e      	movs	r5, #14
    52b6:	5f49      	ldrsh	r1, [r1, r5]
    52b8:	f000 f860 	bl	537c <_lseek_r>
    52bc:	89a3      	ldrh	r3, [r4, #12]
    52be:	1c42      	adds	r2, r0, #1
    52c0:	d103      	bne.n	52ca <__sseek+0x1a>
    52c2:	4a05      	ldr	r2, [pc, #20]	; (52d8 <__sseek+0x28>)
    52c4:	4013      	ands	r3, r2
    52c6:	81a3      	strh	r3, [r4, #12]
    52c8:	bd70      	pop	{r4, r5, r6, pc}
    52ca:	2280      	movs	r2, #128	; 0x80
    52cc:	0152      	lsls	r2, r2, #5
    52ce:	4313      	orrs	r3, r2
    52d0:	81a3      	strh	r3, [r4, #12]
    52d2:	6560      	str	r0, [r4, #84]	; 0x54
    52d4:	e7f8      	b.n	52c8 <__sseek+0x18>
    52d6:	46c0      	nop			; (mov r8, r8)
    52d8:	ffffefff 	.word	0xffffefff

000052dc <__sclose>:
    52dc:	b510      	push	{r4, lr}
    52de:	230e      	movs	r3, #14
    52e0:	5ec9      	ldrsh	r1, [r1, r3]
    52e2:	f000 f815 	bl	5310 <_close_r>
    52e6:	bd10      	pop	{r4, pc}

000052e8 <_write_r>:
    52e8:	b570      	push	{r4, r5, r6, lr}
    52ea:	0005      	movs	r5, r0
    52ec:	0008      	movs	r0, r1
    52ee:	0011      	movs	r1, r2
    52f0:	2200      	movs	r2, #0
    52f2:	4c06      	ldr	r4, [pc, #24]	; (530c <_write_r+0x24>)
    52f4:	6022      	str	r2, [r4, #0]
    52f6:	001a      	movs	r2, r3
    52f8:	f7fc f81e 	bl	1338 <_write>
    52fc:	1c43      	adds	r3, r0, #1
    52fe:	d103      	bne.n	5308 <_write_r+0x20>
    5300:	6823      	ldr	r3, [r4, #0]
    5302:	2b00      	cmp	r3, #0
    5304:	d000      	beq.n	5308 <_write_r+0x20>
    5306:	602b      	str	r3, [r5, #0]
    5308:	bd70      	pop	{r4, r5, r6, pc}
    530a:	46c0      	nop			; (mov r8, r8)
    530c:	20000184 	.word	0x20000184

00005310 <_close_r>:
    5310:	2300      	movs	r3, #0
    5312:	b570      	push	{r4, r5, r6, lr}
    5314:	4c06      	ldr	r4, [pc, #24]	; (5330 <_close_r+0x20>)
    5316:	0005      	movs	r5, r0
    5318:	0008      	movs	r0, r1
    531a:	6023      	str	r3, [r4, #0]
    531c:	f7fd f84a 	bl	23b4 <_close>
    5320:	1c43      	adds	r3, r0, #1
    5322:	d103      	bne.n	532c <_close_r+0x1c>
    5324:	6823      	ldr	r3, [r4, #0]
    5326:	2b00      	cmp	r3, #0
    5328:	d000      	beq.n	532c <_close_r+0x1c>
    532a:	602b      	str	r3, [r5, #0]
    532c:	bd70      	pop	{r4, r5, r6, pc}
    532e:	46c0      	nop			; (mov r8, r8)
    5330:	20000184 	.word	0x20000184

00005334 <_fstat_r>:
    5334:	2300      	movs	r3, #0
    5336:	b570      	push	{r4, r5, r6, lr}
    5338:	4c06      	ldr	r4, [pc, #24]	; (5354 <_fstat_r+0x20>)
    533a:	0005      	movs	r5, r0
    533c:	0008      	movs	r0, r1
    533e:	0011      	movs	r1, r2
    5340:	6023      	str	r3, [r4, #0]
    5342:	f7fd f83a 	bl	23ba <_fstat>
    5346:	1c43      	adds	r3, r0, #1
    5348:	d103      	bne.n	5352 <_fstat_r+0x1e>
    534a:	6823      	ldr	r3, [r4, #0]
    534c:	2b00      	cmp	r3, #0
    534e:	d000      	beq.n	5352 <_fstat_r+0x1e>
    5350:	602b      	str	r3, [r5, #0]
    5352:	bd70      	pop	{r4, r5, r6, pc}
    5354:	20000184 	.word	0x20000184

00005358 <_isatty_r>:
    5358:	2300      	movs	r3, #0
    535a:	b570      	push	{r4, r5, r6, lr}
    535c:	4c06      	ldr	r4, [pc, #24]	; (5378 <_isatty_r+0x20>)
    535e:	0005      	movs	r5, r0
    5360:	0008      	movs	r0, r1
    5362:	6023      	str	r3, [r4, #0]
    5364:	f7fd f82e 	bl	23c4 <_isatty>
    5368:	1c43      	adds	r3, r0, #1
    536a:	d103      	bne.n	5374 <_isatty_r+0x1c>
    536c:	6823      	ldr	r3, [r4, #0]
    536e:	2b00      	cmp	r3, #0
    5370:	d000      	beq.n	5374 <_isatty_r+0x1c>
    5372:	602b      	str	r3, [r5, #0]
    5374:	bd70      	pop	{r4, r5, r6, pc}
    5376:	46c0      	nop			; (mov r8, r8)
    5378:	20000184 	.word	0x20000184

0000537c <_lseek_r>:
    537c:	b570      	push	{r4, r5, r6, lr}
    537e:	0005      	movs	r5, r0
    5380:	0008      	movs	r0, r1
    5382:	0011      	movs	r1, r2
    5384:	2200      	movs	r2, #0
    5386:	4c06      	ldr	r4, [pc, #24]	; (53a0 <_lseek_r+0x24>)
    5388:	6022      	str	r2, [r4, #0]
    538a:	001a      	movs	r2, r3
    538c:	f7fd f81c 	bl	23c8 <_lseek>
    5390:	1c43      	adds	r3, r0, #1
    5392:	d103      	bne.n	539c <_lseek_r+0x20>
    5394:	6823      	ldr	r3, [r4, #0]
    5396:	2b00      	cmp	r3, #0
    5398:	d000      	beq.n	539c <_lseek_r+0x20>
    539a:	602b      	str	r3, [r5, #0]
    539c:	bd70      	pop	{r4, r5, r6, pc}
    539e:	46c0      	nop			; (mov r8, r8)
    53a0:	20000184 	.word	0x20000184

000053a4 <memchr>:
    53a4:	b2c9      	uxtb	r1, r1
    53a6:	1882      	adds	r2, r0, r2
    53a8:	4290      	cmp	r0, r2
    53aa:	d101      	bne.n	53b0 <memchr+0xc>
    53ac:	2000      	movs	r0, #0
    53ae:	4770      	bx	lr
    53b0:	7803      	ldrb	r3, [r0, #0]
    53b2:	428b      	cmp	r3, r1
    53b4:	d0fb      	beq.n	53ae <memchr+0xa>
    53b6:	3001      	adds	r0, #1
    53b8:	e7f6      	b.n	53a8 <memchr+0x4>

000053ba <__malloc_lock>:
    53ba:	4770      	bx	lr

000053bc <__malloc_unlock>:
    53bc:	4770      	bx	lr
	...

000053c0 <_read_r>:
    53c0:	b570      	push	{r4, r5, r6, lr}
    53c2:	0005      	movs	r5, r0
    53c4:	0008      	movs	r0, r1
    53c6:	0011      	movs	r1, r2
    53c8:	2200      	movs	r2, #0
    53ca:	4c06      	ldr	r4, [pc, #24]	; (53e4 <_read_r+0x24>)
    53cc:	6022      	str	r2, [r4, #0]
    53ce:	001a      	movs	r2, r3
    53d0:	f7fb ff90 	bl	12f4 <_read>
    53d4:	1c43      	adds	r3, r0, #1
    53d6:	d103      	bne.n	53e0 <_read_r+0x20>
    53d8:	6823      	ldr	r3, [r4, #0]
    53da:	2b00      	cmp	r3, #0
    53dc:	d000      	beq.n	53e0 <_read_r+0x20>
    53de:	602b      	str	r3, [r5, #0]
    53e0:	bd70      	pop	{r4, r5, r6, pc}
    53e2:	46c0      	nop			; (mov r8, r8)
    53e4:	20000184 	.word	0x20000184
    53e8:	000002fa 	.word	0x000002fa
    53ec:	00000540 	.word	0x00000540
    53f0:	00000540 	.word	0x00000540
    53f4:	00000540 	.word	0x00000540
    53f8:	00000540 	.word	0x00000540
    53fc:	00000540 	.word	0x00000540
    5400:	00000540 	.word	0x00000540
    5404:	00000540 	.word	0x00000540
    5408:	00000540 	.word	0x00000540
    540c:	00000540 	.word	0x00000540
    5410:	00000540 	.word	0x00000540
    5414:	00000540 	.word	0x00000540
    5418:	00000540 	.word	0x00000540
    541c:	00000540 	.word	0x00000540
    5420:	00000540 	.word	0x00000540
    5424:	00000540 	.word	0x00000540
    5428:	000002e2 	.word	0x000002e2
    542c:	00000540 	.word	0x00000540
    5430:	00000540 	.word	0x00000540
    5434:	00000540 	.word	0x00000540
    5438:	00000540 	.word	0x00000540
    543c:	00000540 	.word	0x00000540
    5440:	00000540 	.word	0x00000540
    5444:	00000540 	.word	0x00000540
    5448:	00000540 	.word	0x00000540
    544c:	00000540 	.word	0x00000540
    5450:	00000540 	.word	0x00000540
    5454:	00000540 	.word	0x00000540
    5458:	00000540 	.word	0x00000540
    545c:	00000540 	.word	0x00000540
    5460:	00000540 	.word	0x00000540
    5464:	00000540 	.word	0x00000540
    5468:	000002f2 	.word	0x000002f2
    546c:	00000540 	.word	0x00000540
    5470:	00000540 	.word	0x00000540
    5474:	00000540 	.word	0x00000540
    5478:	00000540 	.word	0x00000540
    547c:	00000540 	.word	0x00000540
    5480:	00000540 	.word	0x00000540
    5484:	00000540 	.word	0x00000540
    5488:	00000540 	.word	0x00000540
    548c:	00000540 	.word	0x00000540
    5490:	00000540 	.word	0x00000540
    5494:	00000540 	.word	0x00000540
    5498:	00000540 	.word	0x00000540
    549c:	00000540 	.word	0x00000540
    54a0:	00000540 	.word	0x00000540
    54a4:	00000540 	.word	0x00000540
    54a8:	000002ea 	.word	0x000002ea
    54ac:	00000302 	.word	0x00000302
    54b0:	000002ca 	.word	0x000002ca
    54b4:	000002da 	.word	0x000002da
    54b8:	000002d2 	.word	0x000002d2
    54bc:	00000002 	.word	0x00000002
    54c0:	00000003 	.word	0x00000003
    54c4:	00000028 	.word	0x00000028
    54c8:	00000029 	.word	0x00000029
    54cc:	00000004 	.word	0x00000004
    54d0:	00000005 	.word	0x00000005
    54d4:	00000006 	.word	0x00000006
    54d8:	00000007 	.word	0x00000007
    54dc:	0000ffff 	.word	0x0000ffff
    54e0:	0000ffff 	.word	0x0000ffff
    54e4:	00000022 	.word	0x00000022
    54e8:	00000023 	.word	0x00000023
    54ec:	0000ffff 	.word	0x0000ffff
    54f0:	0000ffff 	.word	0x0000ffff
    54f4:	0000ffff 	.word	0x0000ffff
    54f8:	0000ffff 	.word	0x0000ffff
    54fc:	00000008 	.word	0x00000008
    5500:	00000009 	.word	0x00000009
    5504:	0000000a 	.word	0x0000000a
    5508:	0000000b 	.word	0x0000000b
    550c:	42000800 	.word	0x42000800
    5510:	42000c00 	.word	0x42000c00
    5514:	42001000 	.word	0x42001000
    5518:	42001400 	.word	0x42001400
    551c:	42001800 	.word	0x42001800
    5520:	42001c00 	.word	0x42001c00
    5524:	00001b1e 	.word	0x00001b1e
    5528:	00001b1a 	.word	0x00001b1a
    552c:	00001b1a 	.word	0x00001b1a
    5530:	00001b7c 	.word	0x00001b7c
    5534:	00001b7c 	.word	0x00001b7c
    5538:	00001b32 	.word	0x00001b32
    553c:	00001b24 	.word	0x00001b24
    5540:	00001b38 	.word	0x00001b38
    5544:	00001b6a 	.word	0x00001b6a
    5548:	00001d3c 	.word	0x00001d3c
    554c:	00001d1c 	.word	0x00001d1c
    5550:	00001d1c 	.word	0x00001d1c
    5554:	00001da8 	.word	0x00001da8
    5558:	00001d2e 	.word	0x00001d2e
    555c:	00001d4a 	.word	0x00001d4a
    5560:	00001d20 	.word	0x00001d20
    5564:	00001d58 	.word	0x00001d58
    5568:	00001d98 	.word	0x00001d98
    556c:	3a434441 	.word	0x3a434441
    5570:	00000d20 	.word	0x00000d20
    5574:	72646441 	.word	0x72646441
    5578:	20737365 	.word	0x20737365
    557c:	6e756f66 	.word	0x6e756f66
    5580:	74612064 	.word	0x74612064
    5584:	58232520 	.word	0x58232520
    5588:	00000a0d 	.word	0x00000a0d
    558c:	4f495047 	.word	0x4f495047
    5590:	000d203a 	.word	0x000d203a
    5594:	3a746547 	.word	0x3a746547
    5598:	00000d20 	.word	0x00000d20
    559c:	3a746553 	.word	0x3a746553
    55a0:	00000d20 	.word	0x00000d20
    55a4:	61656c43 	.word	0x61656c43
    55a8:	0d203a72 	.word	0x0d203a72
    55ac:	00000000 	.word	0x00000000
    55b0:	20434441 	.word	0x20434441
    55b4:	756c6176 	.word	0x756c6176
    55b8:	25203a65 	.word	0x25203a65
    55bc:	000a0d64 	.word	0x000a0d64
    55c0:	3a433249 	.word	0x3a433249
    55c4:	00000d20 	.word	0x00000d20
    55c8:	6c6c6548 	.word	0x6c6c6548
    55cc:	6f57206f 	.word	0x6f57206f
    55d0:	21646c72 	.word	0x21646c72
    55d4:	00000a0d 	.word	0x00000a0d
    55d8:	00003214 	.word	0x00003214
    55dc:	000031f6 	.word	0x000031f6
    55e0:	000031b0 	.word	0x000031b0
    55e4:	000030ce 	.word	0x000030ce
    55e8:	000031b0 	.word	0x000031b0
    55ec:	000031e8 	.word	0x000031e8
    55f0:	000031b0 	.word	0x000031b0
    55f4:	000030ce 	.word	0x000030ce
    55f8:	000031f6 	.word	0x000031f6
    55fc:	000031f6 	.word	0x000031f6
    5600:	000031e8 	.word	0x000031e8
    5604:	000030ce 	.word	0x000030ce
    5608:	000030c6 	.word	0x000030c6
    560c:	000030c6 	.word	0x000030c6
    5610:	000030c6 	.word	0x000030c6
    5614:	0000342c 	.word	0x0000342c
    5618:	00003874 	.word	0x00003874
    561c:	00003734 	.word	0x00003734
    5620:	00003734 	.word	0x00003734
    5624:	00003730 	.word	0x00003730
    5628:	0000384c 	.word	0x0000384c
    562c:	0000384c 	.word	0x0000384c
    5630:	0000383e 	.word	0x0000383e
    5634:	00003730 	.word	0x00003730
    5638:	0000384c 	.word	0x0000384c
    563c:	0000383e 	.word	0x0000383e
    5640:	0000384c 	.word	0x0000384c
    5644:	00003730 	.word	0x00003730
    5648:	00003854 	.word	0x00003854
    564c:	00003854 	.word	0x00003854
    5650:	00003854 	.word	0x00003854
    5654:	00003a58 	.word	0x00003a58

00005658 <_global_impure_ptr>:
    5658:	20000028                                (.. 

0000565c <__sf_fake_stderr>:
	...

0000567c <__sf_fake_stdin>:
	...

0000569c <__sf_fake_stdout>:
	...
    56bc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    56cc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    56dc:	31300046 35343332 39383736 64636261     F.0123456789abcd
    56ec:	00006665                                ef..

000056f0 <_init>:
    56f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56f2:	46c0      	nop			; (mov r8, r8)
    56f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    56f6:	bc08      	pop	{r3}
    56f8:	469e      	mov	lr, r3
    56fa:	4770      	bx	lr

000056fc <__init_array_start>:
    56fc:	000000dd 	.word	0x000000dd

00005700 <_fini>:
    5700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5702:	46c0      	nop			; (mov r8, r8)
    5704:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5706:	bc08      	pop	{r3}
    5708:	469e      	mov	lr, r3
    570a:	4770      	bx	lr

0000570c <__fini_array_start>:
    570c:	000000b5 	.word	0x000000b5
