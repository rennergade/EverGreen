
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f0f8  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000248  20000000  0000f0f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000020c  20000248  0000f340  00020248  2**2
                  ALLOC
  3 .stack        00002004  20000454  0000f54c  00020248  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
  6 .debug_info   00049bbf  00000000  00000000  000202c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004f9a  00000000  00000000  00069e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000049ac  00000000  00000000  0006ee22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d58  00000000  00000000  000737ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bc0  00000000  00000000  00074526  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e241  00000000  00000000  000750e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001494d  00000000  00000000  00093327  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008de78  00000000  00000000  000a7c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003e14  00000000  00000000  00135aec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 24 00 20 e9 6a 00 00 e1 6b 00 00 e1 6b 00 00     X$. .j...k...k..
	...
      2c:	e1 6b 00 00 00 00 00 00 00 00 00 00 e1 6b 00 00     .k...........k..
      3c:	e1 6b 00 00 e1 6b 00 00 e1 6b 00 00 e1 6b 00 00     .k...k...k...k..
      4c:	e1 6b 00 00 e1 6b 00 00 e1 6b 00 00 e1 6b 00 00     .k...k...k...k..
      5c:	e1 6b 00 00 e1 6b 00 00 41 58 00 00 59 58 00 00     .k...k..AX..YX..
      6c:	71 58 00 00 89 58 00 00 a1 58 00 00 b9 58 00 00     qX...X...X...X..
      7c:	e1 6b 00 00 e1 6b 00 00 e1 6b 00 00 e1 6b 00 00     .k...k...k...k..
      8c:	e1 6b 00 00 e1 6b 00 00 00 00 00 00 00 00 00 00     .k...k..........
      9c:	e1 6b 00 00 e1 6b 00 00 e1 6b 00 00 e1 6b 00 00     .k...k...k...k..
      ac:	e1 6b 00 00 00 00 00 00                             .k......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000248 	.word	0x20000248
      d4:	00000000 	.word	0x00000000
      d8:	0000f0f8 	.word	0x0000f0f8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000024c 	.word	0x2000024c
     108:	0000f0f8 	.word	0x0000f0f8
     10c:	0000f0f8 	.word	0x0000f0f8
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     12c:	230e      	movs	r3, #14
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     166:	2300      	movs	r3, #0
	}
}
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	41004400 	.word	0x41004400

00000174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     174:	b580      	push	{r7, lr}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	0002      	movs	r2, r0
     17c:	1dfb      	adds	r3, r7, #7
     17e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     180:	1dfb      	adds	r3, r7, #7
     182:	781b      	ldrb	r3, [r3, #0]
     184:	0018      	movs	r0, r3
     186:	4b03      	ldr	r3, [pc, #12]	; (194 <port_get_group_from_gpio_pin+0x20>)
     188:	4798      	blx	r3
     18a:	0003      	movs	r3, r0
}
     18c:	0018      	movs	r0, r3
     18e:	46bd      	mov	sp, r7
     190:	b002      	add	sp, #8
     192:	bd80      	pop	{r7, pc}
     194:	00000115 	.word	0x00000115

00000198 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     198:	b580      	push	{r7, lr}
     19a:	b084      	sub	sp, #16
     19c:	af00      	add	r7, sp, #0
     19e:	0002      	movs	r2, r0
     1a0:	1dfb      	adds	r3, r7, #7
     1a2:	701a      	strb	r2, [r3, #0]
     1a4:	1dbb      	adds	r3, r7, #6
     1a6:	1c0a      	adds	r2, r1, #0
     1a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1aa:	1dfb      	adds	r3, r7, #7
     1ac:	781b      	ldrb	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b0d      	ldr	r3, [pc, #52]	; (1e8 <port_pin_set_output_level+0x50>)
     1b2:	4798      	blx	r3
     1b4:	0003      	movs	r3, r0
     1b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1b8:	1dfb      	adds	r3, r7, #7
     1ba:	781b      	ldrb	r3, [r3, #0]
     1bc:	221f      	movs	r2, #31
     1be:	4013      	ands	r3, r2
     1c0:	2201      	movs	r2, #1
     1c2:	409a      	lsls	r2, r3
     1c4:	0013      	movs	r3, r2
     1c6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1c8:	1dbb      	adds	r3, r7, #6
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	2b00      	cmp	r3, #0
     1ce:	d003      	beq.n	1d8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1d0:	68fb      	ldr	r3, [r7, #12]
     1d2:	68ba      	ldr	r2, [r7, #8]
     1d4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     1d6:	e002      	b.n	1de <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     1d8:	68fb      	ldr	r3, [r7, #12]
     1da:	68ba      	ldr	r2, [r7, #8]
     1dc:	615a      	str	r2, [r3, #20]
}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	46bd      	mov	sp, r7
     1e2:	b004      	add	sp, #16
     1e4:	bd80      	pop	{r7, pc}
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	00000175 	.word	0x00000175

000001ec <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     1ec:	b580      	push	{r7, lr}
     1ee:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     1f0:	4b02      	ldr	r3, [pc, #8]	; (1fc <system_interrupt_enter_critical_section+0x10>)
     1f2:	4798      	blx	r3
}
     1f4:	46c0      	nop			; (mov r8, r8)
     1f6:	46bd      	mov	sp, r7
     1f8:	bd80      	pop	{r7, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	000058d1 	.word	0x000058d1

00000200 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     200:	b580      	push	{r7, lr}
     202:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     204:	4b02      	ldr	r3, [pc, #8]	; (210 <system_interrupt_leave_critical_section+0x10>)
     206:	4798      	blx	r3
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	bd80      	pop	{r7, pc}
     20e:	46c0      	nop			; (mov r8, r8)
     210:	00005925 	.word	0x00005925

00000214 <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
     214:	b580      	push	{r7, lr}
     216:	b084      	sub	sp, #16
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
     21c:	4b0d      	ldr	r3, [pc, #52]	; (254 <spi_lock+0x40>)
     21e:	4798      	blx	r3

	if (module->locked) {
     220:	687b      	ldr	r3, [r7, #4]
     222:	791b      	ldrb	r3, [r3, #4]
     224:	b2db      	uxtb	r3, r3
     226:	2b00      	cmp	r3, #0
     228:	d004      	beq.n	234 <spi_lock+0x20>
		status = STATUS_BUSY;
     22a:	230f      	movs	r3, #15
     22c:	18fb      	adds	r3, r7, r3
     22e:	2205      	movs	r2, #5
     230:	701a      	strb	r2, [r3, #0]
     232:	e006      	b.n	242 <spi_lock+0x2e>
	} else {
		module->locked = true;
     234:	687b      	ldr	r3, [r7, #4]
     236:	2201      	movs	r2, #1
     238:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
     23a:	230f      	movs	r3, #15
     23c:	18fb      	adds	r3, r7, r3
     23e:	2200      	movs	r2, #0
     240:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
     242:	4b05      	ldr	r3, [pc, #20]	; (258 <spi_lock+0x44>)
     244:	4798      	blx	r3

	return status;
     246:	230f      	movs	r3, #15
     248:	18fb      	adds	r3, r7, r3
     24a:	781b      	ldrb	r3, [r3, #0]
}
     24c:	0018      	movs	r0, r3
     24e:	46bd      	mov	sp, r7
     250:	b004      	add	sp, #16
     252:	bd80      	pop	{r7, pc}
     254:	000001ed 	.word	0x000001ed
     258:	00000201 	.word	0x00000201

0000025c <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	6078      	str	r0, [r7, #4]
	module->locked = false;
     264:	687b      	ldr	r3, [r7, #4]
     266:	2200      	movs	r2, #0
     268:	711a      	strb	r2, [r3, #4]
}
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	46bd      	mov	sp, r7
     26e:	b002      	add	sp, #8
     270:	bd80      	pop	{r7, pc}

00000272 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     272:	b580      	push	{r7, lr}
     274:	b084      	sub	sp, #16
     276:	af00      	add	r7, sp, #0
     278:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	681b      	ldr	r3, [r3, #0]
     27e:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     280:	68fb      	ldr	r3, [r7, #12]
     282:	7e1b      	ldrb	r3, [r3, #24]
     284:	b2db      	uxtb	r3, r3
     286:	001a      	movs	r2, r3
     288:	2301      	movs	r3, #1
     28a:	4013      	ands	r3, r2
     28c:	1e5a      	subs	r2, r3, #1
     28e:	4193      	sbcs	r3, r2
     290:	b2db      	uxtb	r3, r3
}
     292:	0018      	movs	r0, r3
     294:	46bd      	mov	sp, r7
     296:	b004      	add	sp, #16
     298:	bd80      	pop	{r7, pc}

0000029a <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     29a:	b580      	push	{r7, lr}
     29c:	b084      	sub	sp, #16
     29e:	af00      	add	r7, sp, #0
     2a0:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     2a8:	68fb      	ldr	r3, [r7, #12]
     2aa:	7e1b      	ldrb	r3, [r3, #24]
     2ac:	b2db      	uxtb	r3, r3
     2ae:	001a      	movs	r2, r3
     2b0:	2304      	movs	r3, #4
     2b2:	4013      	ands	r3, r2
     2b4:	1e5a      	subs	r2, r3, #1
     2b6:	4193      	sbcs	r3, r2
     2b8:	b2db      	uxtb	r3, r3
}
     2ba:	0018      	movs	r0, r3
     2bc:	46bd      	mov	sp, r7
     2be:	b004      	add	sp, #16
     2c0:	bd80      	pop	{r7, pc}
	...

000002c4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b084      	sub	sp, #16
     2c8:	af00      	add	r7, sp, #0
     2ca:	6078      	str	r0, [r7, #4]
     2cc:	000a      	movs	r2, r1
     2ce:	1cbb      	adds	r3, r7, #2
     2d0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	681b      	ldr	r3, [r3, #0]
     2d6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	0018      	movs	r0, r3
     2dc:	4b0a      	ldr	r3, [pc, #40]	; (308 <spi_write+0x44>)
     2de:	4798      	blx	r3
     2e0:	0003      	movs	r3, r0
     2e2:	001a      	movs	r2, r3
     2e4:	2301      	movs	r3, #1
     2e6:	4053      	eors	r3, r2
     2e8:	b2db      	uxtb	r3, r3
     2ea:	2b00      	cmp	r3, #0
     2ec:	d001      	beq.n	2f2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     2ee:	2305      	movs	r3, #5
     2f0:	e006      	b.n	300 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     2f2:	1cbb      	adds	r3, r7, #2
     2f4:	881b      	ldrh	r3, [r3, #0]
     2f6:	05db      	lsls	r3, r3, #23
     2f8:	0dda      	lsrs	r2, r3, #23
     2fa:	68fb      	ldr	r3, [r7, #12]
     2fc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     2fe:	2300      	movs	r3, #0
}
     300:	0018      	movs	r0, r3
     302:	46bd      	mov	sp, r7
     304:	b004      	add	sp, #16
     306:	bd80      	pop	{r7, pc}
     308:	00000273 	.word	0x00000273

0000030c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     30c:	b580      	push	{r7, lr}
     30e:	b084      	sub	sp, #16
     310:	af00      	add	r7, sp, #0
     312:	6078      	str	r0, [r7, #4]
     314:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     316:	687b      	ldr	r3, [r7, #4]
     318:	681b      	ldr	r3, [r3, #0]
     31a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	0018      	movs	r0, r3
     320:	4b1b      	ldr	r3, [pc, #108]	; (390 <spi_read+0x84>)
     322:	4798      	blx	r3
     324:	0003      	movs	r3, r0
     326:	001a      	movs	r2, r3
     328:	2301      	movs	r3, #1
     32a:	4053      	eors	r3, r2
     32c:	b2db      	uxtb	r3, r3
     32e:	2b00      	cmp	r3, #0
     330:	d001      	beq.n	336 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     332:	2310      	movs	r3, #16
     334:	e027      	b.n	386 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     336:	230f      	movs	r3, #15
     338:	18fb      	adds	r3, r7, r3
     33a:	2200      	movs	r2, #0
     33c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     33e:	68bb      	ldr	r3, [r7, #8]
     340:	8b5b      	ldrh	r3, [r3, #26]
     342:	b29b      	uxth	r3, r3
     344:	001a      	movs	r2, r3
     346:	2304      	movs	r3, #4
     348:	4013      	ands	r3, r2
     34a:	d006      	beq.n	35a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     34c:	230f      	movs	r3, #15
     34e:	18fb      	adds	r3, r7, r3
     350:	221e      	movs	r2, #30
     352:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     354:	68bb      	ldr	r3, [r7, #8]
     356:	2204      	movs	r2, #4
     358:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	799b      	ldrb	r3, [r3, #6]
     35e:	2b01      	cmp	r3, #1
     360:	d108      	bne.n	374 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     362:	68bb      	ldr	r3, [r7, #8]
     364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     366:	b29b      	uxth	r3, r3
     368:	05db      	lsls	r3, r3, #23
     36a:	0ddb      	lsrs	r3, r3, #23
     36c:	b29a      	uxth	r2, r3
     36e:	683b      	ldr	r3, [r7, #0]
     370:	801a      	strh	r2, [r3, #0]
     372:	e005      	b.n	380 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     374:	68bb      	ldr	r3, [r7, #8]
     376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     378:	b2db      	uxtb	r3, r3
     37a:	b29a      	uxth	r2, r3
     37c:	683b      	ldr	r3, [r7, #0]
     37e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     380:	230f      	movs	r3, #15
     382:	18fb      	adds	r3, r7, r3
     384:	781b      	ldrb	r3, [r3, #0]
}
     386:	0018      	movs	r0, r3
     388:	46bd      	mov	sp, r7
     38a:	b004      	add	sp, #16
     38c:	bd80      	pop	{r7, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	0000029b 	.word	0x0000029b

00000394 <_at25dfx_get_device_id>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
     394:	b580      	push	{r7, lr}
     396:	b082      	sub	sp, #8
     398:	af00      	add	r7, sp, #0
     39a:	0002      	movs	r2, r0
     39c:	1dfb      	adds	r3, r7, #7
     39e:	701a      	strb	r2, [r3, #0]
	switch (type) {
     3a0:	1dfb      	adds	r3, r7, #7
     3a2:	781b      	ldrb	r3, [r3, #0]
     3a4:	2b09      	cmp	r3, #9
     3a6:	d818      	bhi.n	3da <_at25dfx_get_device_id+0x46>
     3a8:	009a      	lsls	r2, r3, #2
     3aa:	4b0e      	ldr	r3, [pc, #56]	; (3e4 <_at25dfx_get_device_id+0x50>)
     3ac:	18d3      	adds	r3, r2, r3
     3ae:	681b      	ldr	r3, [r3, #0]
     3b0:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;
     3b2:	4b0d      	ldr	r3, [pc, #52]	; (3e8 <_at25dfx_get_device_id+0x54>)
     3b4:	e012      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_021:
		return 0x00431f;
     3b6:	4b0d      	ldr	r3, [pc, #52]	; (3ec <_at25dfx_get_device_id+0x58>)
     3b8:	e010      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_041A:
		return 0x01441f;
     3ba:	4b0d      	ldr	r3, [pc, #52]	; (3f0 <_at25dfx_get_device_id+0x5c>)
     3bc:	e00e      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_081:
		return 0x02451f;
     3be:	4b0d      	ldr	r3, [pc, #52]	; (3f4 <_at25dfx_get_device_id+0x60>)
     3c0:	e00c      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_081A:
		return 0x01451f;
     3c2:	4b0d      	ldr	r3, [pc, #52]	; (3f8 <_at25dfx_get_device_id+0x64>)
     3c4:	e00a      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_161:
		return 0x02461f;
     3c6:	4b0d      	ldr	r3, [pc, #52]	; (3fc <_at25dfx_get_device_id+0x68>)
     3c8:	e008      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_L161:
		return 0x03461f;
     3ca:	4b0d      	ldr	r3, [pc, #52]	; (400 <_at25dfx_get_device_id+0x6c>)
     3cc:	e006      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_Q161:
		return 0x00861f;
     3ce:	4b0d      	ldr	r3, [pc, #52]	; (404 <_at25dfx_get_device_id+0x70>)
     3d0:	e004      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_321A:
		return 0x01471f;
     3d2:	4b0d      	ldr	r3, [pc, #52]	; (408 <_at25dfx_get_device_id+0x74>)
     3d4:	e002      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_641:
		return 0x00481f;
     3d6:	4b0d      	ldr	r3, [pc, #52]	; (40c <_at25dfx_get_device_id+0x78>)
     3d8:	e000      	b.n	3dc <_at25dfx_get_device_id+0x48>

	default:
		Assert(false);
		return 0;
     3da:	2300      	movs	r3, #0
	}
}
     3dc:	0018      	movs	r0, r3
     3de:	46bd      	mov	sp, r7
     3e0:	b002      	add	sp, #8
     3e2:	bd80      	pop	{r7, pc}
     3e4:	0000e1b0 	.word	0x0000e1b0
     3e8:	0000651f 	.word	0x0000651f
     3ec:	0000431f 	.word	0x0000431f
     3f0:	0001441f 	.word	0x0001441f
     3f4:	0002451f 	.word	0x0002451f
     3f8:	0001451f 	.word	0x0001451f
     3fc:	0002461f 	.word	0x0002461f
     400:	0003461f 	.word	0x0003461f
     404:	0000861f 	.word	0x0000861f
     408:	0001471f 	.word	0x0001471f
     40c:	0000481f 	.word	0x0000481f

00000410 <_at25dfx_get_device_size>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	0002      	movs	r2, r0
     418:	1dfb      	adds	r3, r7, #7
     41a:	701a      	strb	r2, [r3, #0]
	switch (type) {
     41c:	1dfb      	adds	r3, r7, #7
     41e:	781b      	ldrb	r3, [r3, #0]
     420:	2b09      	cmp	r3, #9
     422:	d819      	bhi.n	458 <_at25dfx_get_device_size+0x48>
     424:	009a      	lsls	r2, r3, #2
     426:	4b0f      	ldr	r3, [pc, #60]	; (464 <_at25dfx_get_device_size+0x54>)
     428:	18d3      	adds	r3, r2, r3
     42a:	681b      	ldr	r3, [r3, #0]
     42c:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;
     42e:	2380      	movs	r3, #128	; 0x80
     430:	025b      	lsls	r3, r3, #9
     432:	e012      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_021:
		return 256 * 1024UL;
     434:	2380      	movs	r3, #128	; 0x80
     436:	02db      	lsls	r3, r3, #11
     438:	e00f      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_041A:
		return 512 * 1024UL;
     43a:	2380      	movs	r3, #128	; 0x80
     43c:	031b      	lsls	r3, r3, #12
     43e:	e00c      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
     440:	2380      	movs	r3, #128	; 0x80
     442:	035b      	lsls	r3, r3, #13
     444:	e009      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
     446:	2380      	movs	r3, #128	; 0x80
     448:	039b      	lsls	r3, r3, #14
     44a:	e006      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_321A:
		return 4096 * 1024UL;
     44c:	2380      	movs	r3, #128	; 0x80
     44e:	03db      	lsls	r3, r3, #15
     450:	e003      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_641:
		return 8192 * 1024UL;
     452:	2380      	movs	r3, #128	; 0x80
     454:	041b      	lsls	r3, r3, #16
     456:	e000      	b.n	45a <_at25dfx_get_device_size+0x4a>

	default:
		Assert(false);
		return 0;
     458:	2300      	movs	r3, #0
	}
}
     45a:	0018      	movs	r0, r3
     45c:	46bd      	mov	sp, r7
     45e:	b002      	add	sp, #8
     460:	bd80      	pop	{r7, pc}
     462:	46c0      	nop			; (mov r8, r8)
     464:	0000e1d8 	.word	0x0000e1d8

00000468 <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
     468:	b580      	push	{r7, lr}
     46a:	b082      	sub	sp, #8
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
     470:	687b      	ldr	r3, [r7, #4]
     472:	795b      	ldrb	r3, [r3, #5]
     474:	2100      	movs	r1, #0
     476:	0018      	movs	r0, r3
     478:	4b02      	ldr	r3, [pc, #8]	; (484 <_at25dfx_chip_select+0x1c>)
     47a:	4798      	blx	r3
}
     47c:	46c0      	nop			; (mov r8, r8)
     47e:	46bd      	mov	sp, r7
     480:	b002      	add	sp, #8
     482:	bd80      	pop	{r7, pc}
     484:	00000199 	.word	0x00000199

00000488 <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
     488:	b580      	push	{r7, lr}
     48a:	b082      	sub	sp, #8
     48c:	af00      	add	r7, sp, #0
     48e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
     490:	687b      	ldr	r3, [r7, #4]
     492:	795b      	ldrb	r3, [r3, #5]
     494:	2101      	movs	r1, #1
     496:	0018      	movs	r0, r3
     498:	4b02      	ldr	r3, [pc, #8]	; (4a4 <_at25dfx_chip_deselect+0x1c>)
     49a:	4798      	blx	r3
}
     49c:	46c0      	nop			; (mov r8, r8)
     49e:	46bd      	mov	sp, r7
     4a0:	b002      	add	sp, #8
     4a2:	bd80      	pop	{r7, pc}
     4a4:	00000199 	.word	0x00000199

000004a8 <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     4a8:	b084      	sub	sp, #16
     4aa:	b5b0      	push	{r4, r5, r7, lr}
     4ac:	b084      	sub	sp, #16
     4ae:	af00      	add	r7, sp, #0
     4b0:	6078      	str	r0, [r7, #4]
     4b2:	2004      	movs	r0, #4
     4b4:	2420      	movs	r4, #32
     4b6:	46a4      	mov	ip, r4
     4b8:	44bc      	add	ip, r7
     4ba:	4460      	add	r0, ip
     4bc:	6001      	str	r1, [r0, #0]
     4be:	6042      	str	r2, [r0, #4]
     4c0:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
     4c2:	2304      	movs	r3, #4
     4c4:	2220      	movs	r2, #32
     4c6:	4694      	mov	ip, r2
     4c8:	44bc      	add	ip, r7
     4ca:	4463      	add	r3, ip
     4cc:	781a      	ldrb	r2, [r3, #0]
     4ce:	2308      	movs	r3, #8
     4d0:	18fb      	adds	r3, r7, r3
     4d2:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     4d4:	2304      	movs	r3, #4
     4d6:	2220      	movs	r2, #32
     4d8:	4694      	mov	ip, r2
     4da:	44bc      	add	ip, r7
     4dc:	4463      	add	r3, ip
     4de:	785b      	ldrb	r3, [r3, #1]
     4e0:	2b01      	cmp	r3, #1
     4e2:	d91f      	bls.n	524 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     4e4:	2304      	movs	r3, #4
     4e6:	2220      	movs	r2, #32
     4e8:	4694      	mov	ip, r2
     4ea:	44bc      	add	ip, r7
     4ec:	4463      	add	r3, ip
     4ee:	685b      	ldr	r3, [r3, #4]
     4f0:	b2da      	uxtb	r2, r3
     4f2:	2308      	movs	r3, #8
     4f4:	18fb      	adds	r3, r7, r3
     4f6:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     4f8:	2304      	movs	r3, #4
     4fa:	2220      	movs	r2, #32
     4fc:	4694      	mov	ip, r2
     4fe:	44bc      	add	ip, r7
     500:	4463      	add	r3, ip
     502:	685b      	ldr	r3, [r3, #4]
     504:	0a1b      	lsrs	r3, r3, #8
     506:	b2da      	uxtb	r2, r3
     508:	2308      	movs	r3, #8
     50a:	18fb      	adds	r3, r7, r3
     50c:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     50e:	2304      	movs	r3, #4
     510:	2220      	movs	r2, #32
     512:	4694      	mov	ip, r2
     514:	44bc      	add	ip, r7
     516:	4463      	add	r3, ip
     518:	685b      	ldr	r3, [r3, #4]
     51a:	0c1b      	lsrs	r3, r3, #16
     51c:	b2da      	uxtb	r2, r3
     51e:	2308      	movs	r3, #8
     520:	18fb      	adds	r3, r7, r3
     522:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
     524:	687b      	ldr	r3, [r7, #4]
     526:	0018      	movs	r0, r3
     528:	4b1d      	ldr	r3, [pc, #116]	; (5a0 <_at25dfx_chip_issue_read_command_wait+0xf8>)
     52a:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	6818      	ldr	r0, [r3, #0]
     530:	2304      	movs	r3, #4
     532:	2220      	movs	r2, #32
     534:	4694      	mov	ip, r2
     536:	44bc      	add	ip, r7
     538:	4463      	add	r3, ip
     53a:	785b      	ldrb	r3, [r3, #1]
     53c:	b29a      	uxth	r2, r3
     53e:	230f      	movs	r3, #15
     540:	18fc      	adds	r4, r7, r3
     542:	2308      	movs	r3, #8
     544:	18fb      	adds	r3, r7, r3
     546:	0019      	movs	r1, r3
     548:	4b16      	ldr	r3, [pc, #88]	; (5a4 <_at25dfx_chip_issue_read_command_wait+0xfc>)
     54a:	4798      	blx	r3
     54c:	0003      	movs	r3, r0
     54e:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     550:	2304      	movs	r3, #4
     552:	2220      	movs	r2, #32
     554:	4694      	mov	ip, r2
     556:	44bc      	add	ip, r7
     558:	4463      	add	r3, ip
     55a:	899b      	ldrh	r3, [r3, #12]
     55c:	2b00      	cmp	r3, #0
     55e:	d014      	beq.n	58a <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
     560:	687b      	ldr	r3, [r7, #4]
     562:	6818      	ldr	r0, [r3, #0]
     564:	2304      	movs	r3, #4
     566:	2220      	movs	r2, #32
     568:	4694      	mov	ip, r2
     56a:	44bc      	add	ip, r7
     56c:	4463      	add	r3, ip
     56e:	6899      	ldr	r1, [r3, #8]
     570:	2304      	movs	r3, #4
     572:	2220      	movs	r2, #32
     574:	4694      	mov	ip, r2
     576:	44bc      	add	ip, r7
     578:	4463      	add	r3, ip
     57a:	899a      	ldrh	r2, [r3, #12]
     57c:	230f      	movs	r3, #15
     57e:	18fc      	adds	r4, r7, r3
     580:	2300      	movs	r3, #0
     582:	4d09      	ldr	r5, [pc, #36]	; (5a8 <_at25dfx_chip_issue_read_command_wait+0x100>)
     584:	47a8      	blx	r5
     586:	0003      	movs	r3, r0
     588:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	0018      	movs	r0, r3
     58e:	4b07      	ldr	r3, [pc, #28]	; (5ac <_at25dfx_chip_issue_read_command_wait+0x104>)
     590:	4798      	blx	r3
}
     592:	46c0      	nop			; (mov r8, r8)
     594:	46bd      	mov	sp, r7
     596:	b004      	add	sp, #16
     598:	bcb0      	pop	{r4, r5, r7}
     59a:	bc08      	pop	{r3}
     59c:	b004      	add	sp, #16
     59e:	4718      	bx	r3
     5a0:	00000469 	.word	0x00000469
     5a4:	000017e1 	.word	0x000017e1
     5a8:	00001625 	.word	0x00001625
     5ac:	00000489 	.word	0x00000489

000005b0 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     5b0:	b084      	sub	sp, #16
     5b2:	b590      	push	{r4, r7, lr}
     5b4:	b085      	sub	sp, #20
     5b6:	af00      	add	r7, sp, #0
     5b8:	6078      	str	r0, [r7, #4]
     5ba:	2004      	movs	r0, #4
     5bc:	2420      	movs	r4, #32
     5be:	46a4      	mov	ip, r4
     5c0:	44bc      	add	ip, r7
     5c2:	4460      	add	r0, ip
     5c4:	6001      	str	r1, [r0, #0]
     5c6:	6042      	str	r2, [r0, #4]
     5c8:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     5ca:	2304      	movs	r3, #4
     5cc:	2220      	movs	r2, #32
     5ce:	4694      	mov	ip, r2
     5d0:	44bc      	add	ip, r7
     5d2:	4463      	add	r3, ip
     5d4:	781a      	ldrb	r2, [r3, #0]
     5d6:	2308      	movs	r3, #8
     5d8:	18fb      	adds	r3, r7, r3
     5da:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     5dc:	2304      	movs	r3, #4
     5de:	2220      	movs	r2, #32
     5e0:	4694      	mov	ip, r2
     5e2:	44bc      	add	ip, r7
     5e4:	4463      	add	r3, ip
     5e6:	785b      	ldrb	r3, [r3, #1]
     5e8:	2b01      	cmp	r3, #1
     5ea:	d91f      	bls.n	62c <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     5ec:	2304      	movs	r3, #4
     5ee:	2220      	movs	r2, #32
     5f0:	4694      	mov	ip, r2
     5f2:	44bc      	add	ip, r7
     5f4:	4463      	add	r3, ip
     5f6:	685b      	ldr	r3, [r3, #4]
     5f8:	b2da      	uxtb	r2, r3
     5fa:	2308      	movs	r3, #8
     5fc:	18fb      	adds	r3, r7, r3
     5fe:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     600:	2304      	movs	r3, #4
     602:	2220      	movs	r2, #32
     604:	4694      	mov	ip, r2
     606:	44bc      	add	ip, r7
     608:	4463      	add	r3, ip
     60a:	685b      	ldr	r3, [r3, #4]
     60c:	0a1b      	lsrs	r3, r3, #8
     60e:	b2da      	uxtb	r2, r3
     610:	2308      	movs	r3, #8
     612:	18fb      	adds	r3, r7, r3
     614:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     616:	2304      	movs	r3, #4
     618:	2220      	movs	r2, #32
     61a:	4694      	mov	ip, r2
     61c:	44bc      	add	ip, r7
     61e:	4463      	add	r3, ip
     620:	685b      	ldr	r3, [r3, #4]
     622:	0c1b      	lsrs	r3, r3, #16
     624:	b2da      	uxtb	r2, r3
     626:	2308      	movs	r3, #8
     628:	18fb      	adds	r3, r7, r3
     62a:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	0018      	movs	r0, r3
     630:	4b1d      	ldr	r3, [pc, #116]	; (6a8 <_at25dfx_chip_issue_write_command_wait+0xf8>)
     632:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     634:	687b      	ldr	r3, [r7, #4]
     636:	6818      	ldr	r0, [r3, #0]
     638:	2304      	movs	r3, #4
     63a:	2220      	movs	r2, #32
     63c:	4694      	mov	ip, r2
     63e:	44bc      	add	ip, r7
     640:	4463      	add	r3, ip
     642:	785b      	ldrb	r3, [r3, #1]
     644:	b29a      	uxth	r2, r3
     646:	230f      	movs	r3, #15
     648:	18fc      	adds	r4, r7, r3
     64a:	2308      	movs	r3, #8
     64c:	18fb      	adds	r3, r7, r3
     64e:	0019      	movs	r1, r3
     650:	4b16      	ldr	r3, [pc, #88]	; (6ac <_at25dfx_chip_issue_write_command_wait+0xfc>)
     652:	4798      	blx	r3
     654:	0003      	movs	r3, r0
     656:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     658:	2304      	movs	r3, #4
     65a:	2220      	movs	r2, #32
     65c:	4694      	mov	ip, r2
     65e:	44bc      	add	ip, r7
     660:	4463      	add	r3, ip
     662:	899b      	ldrh	r3, [r3, #12]
     664:	2b00      	cmp	r3, #0
     666:	d014      	beq.n	692 <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     668:	687b      	ldr	r3, [r7, #4]
     66a:	6818      	ldr	r0, [r3, #0]
     66c:	2304      	movs	r3, #4
     66e:	2220      	movs	r2, #32
     670:	4694      	mov	ip, r2
     672:	44bc      	add	ip, r7
     674:	4463      	add	r3, ip
     676:	6899      	ldr	r1, [r3, #8]
     678:	2304      	movs	r3, #4
     67a:	2220      	movs	r2, #32
     67c:	4694      	mov	ip, r2
     67e:	44bc      	add	ip, r7
     680:	4463      	add	r3, ip
     682:	899b      	ldrh	r3, [r3, #12]
     684:	220f      	movs	r2, #15
     686:	18bc      	adds	r4, r7, r2
     688:	001a      	movs	r2, r3
     68a:	4b08      	ldr	r3, [pc, #32]	; (6ac <_at25dfx_chip_issue_write_command_wait+0xfc>)
     68c:	4798      	blx	r3
     68e:	0003      	movs	r3, r0
     690:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     692:	687b      	ldr	r3, [r7, #4]
     694:	0018      	movs	r0, r3
     696:	4b06      	ldr	r3, [pc, #24]	; (6b0 <_at25dfx_chip_issue_write_command_wait+0x100>)
     698:	4798      	blx	r3
}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	46bd      	mov	sp, r7
     69e:	b005      	add	sp, #20
     6a0:	bc90      	pop	{r4, r7}
     6a2:	bc08      	pop	{r3}
     6a4:	b004      	add	sp, #16
     6a6:	4718      	bx	r3
     6a8:	00000469 	.word	0x00000469
     6ac:	000017e1 	.word	0x000017e1
     6b0:	00000489 	.word	0x00000489

000006b4 <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
     6b4:	b590      	push	{r4, r7, lr}
     6b6:	b085      	sub	sp, #20
     6b8:	af00      	add	r7, sp, #0
     6ba:	6078      	str	r0, [r7, #4]
	enum status_code status;
	uint16_t status_reg = 0;
     6bc:	230c      	movs	r3, #12
     6be:	18fb      	adds	r3, r7, r3
     6c0:	2200      	movs	r2, #0
     6c2:	801a      	strh	r2, [r3, #0]

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
     6c4:	46c0      	nop			; (mov r8, r8)
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	681b      	ldr	r3, [r3, #0]
     6ca:	0018      	movs	r0, r3
     6cc:	4b3c      	ldr	r3, [pc, #240]	; (7c0 <_at25dfx_chip_get_nonbusy_status+0x10c>)
     6ce:	4798      	blx	r3
     6d0:	0003      	movs	r3, r0
     6d2:	001a      	movs	r2, r3
     6d4:	2301      	movs	r3, #1
     6d6:	4053      	eors	r3, r2
     6d8:	b2db      	uxtb	r3, r3
     6da:	2b00      	cmp	r3, #0
     6dc:	d1f3      	bne.n	6c6 <_at25dfx_chip_get_nonbusy_status+0x12>
	}

	_at25dfx_chip_select(chip);
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	0018      	movs	r0, r3
     6e2:	4b38      	ldr	r3, [pc, #224]	; (7c4 <_at25dfx_chip_get_nonbusy_status+0x110>)
     6e4:	4798      	blx	r3
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	681b      	ldr	r3, [r3, #0]
     6ea:	220f      	movs	r2, #15
     6ec:	18bc      	adds	r4, r7, r2
     6ee:	2105      	movs	r1, #5
     6f0:	0018      	movs	r0, r3
     6f2:	4b35      	ldr	r3, [pc, #212]	; (7c8 <_at25dfx_chip_get_nonbusy_status+0x114>)
     6f4:	4798      	blx	r3
     6f6:	0003      	movs	r3, r0
     6f8:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	0018      	movs	r0, r3
     702:	4b32      	ldr	r3, [pc, #200]	; (7cc <_at25dfx_chip_get_nonbusy_status+0x118>)
     704:	4798      	blx	r3
     706:	0003      	movs	r3, r0
     708:	001a      	movs	r2, r3
     70a:	2301      	movs	r3, #1
     70c:	4053      	eors	r3, r2
     70e:	b2db      	uxtb	r3, r3
     710:	2b00      	cmp	r3, #0
     712:	d1f3      	bne.n	6fc <_at25dfx_chip_get_nonbusy_status+0x48>
	}
	status = spi_read(chip->spi, &status_reg);
     714:	687b      	ldr	r3, [r7, #4]
     716:	681b      	ldr	r3, [r3, #0]
     718:	220f      	movs	r2, #15
     71a:	18bc      	adds	r4, r7, r2
     71c:	220c      	movs	r2, #12
     71e:	18ba      	adds	r2, r7, r2
     720:	0011      	movs	r1, r2
     722:	0018      	movs	r0, r3
     724:	4b2a      	ldr	r3, [pc, #168]	; (7d0 <_at25dfx_chip_get_nonbusy_status+0x11c>)
     726:	4798      	blx	r3
     728:	0003      	movs	r3, r0
     72a:	7023      	strb	r3, [r4, #0]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     72c:	46c0      	nop			; (mov r8, r8)
     72e:	687b      	ldr	r3, [r7, #4]
     730:	681b      	ldr	r3, [r3, #0]
     732:	0018      	movs	r0, r3
     734:	4b22      	ldr	r3, [pc, #136]	; (7c0 <_at25dfx_chip_get_nonbusy_status+0x10c>)
     736:	4798      	blx	r3
     738:	0003      	movs	r3, r0
     73a:	001a      	movs	r2, r3
     73c:	2301      	movs	r3, #1
     73e:	4053      	eors	r3, r2
     740:	b2db      	uxtb	r3, r3
     742:	2b00      	cmp	r3, #0
     744:	d1f3      	bne.n	72e <_at25dfx_chip_get_nonbusy_status+0x7a>
		}
		status = spi_write(chip->spi, 0);
     746:	687b      	ldr	r3, [r7, #4]
     748:	681b      	ldr	r3, [r3, #0]
     74a:	220f      	movs	r2, #15
     74c:	18bc      	adds	r4, r7, r2
     74e:	2100      	movs	r1, #0
     750:	0018      	movs	r0, r3
     752:	4b1d      	ldr	r3, [pc, #116]	; (7c8 <_at25dfx_chip_get_nonbusy_status+0x114>)
     754:	4798      	blx	r3
     756:	0003      	movs	r3, r0
     758:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	681b      	ldr	r3, [r3, #0]
     760:	0018      	movs	r0, r3
     762:	4b1a      	ldr	r3, [pc, #104]	; (7cc <_at25dfx_chip_get_nonbusy_status+0x118>)
     764:	4798      	blx	r3
     766:	0003      	movs	r3, r0
     768:	001a      	movs	r2, r3
     76a:	2301      	movs	r3, #1
     76c:	4053      	eors	r3, r2
     76e:	b2db      	uxtb	r3, r3
     770:	2b00      	cmp	r3, #0
     772:	d1f3      	bne.n	75c <_at25dfx_chip_get_nonbusy_status+0xa8>
		}
		status = spi_read(chip->spi, &status_reg);
     774:	687b      	ldr	r3, [r7, #4]
     776:	681b      	ldr	r3, [r3, #0]
     778:	220f      	movs	r2, #15
     77a:	18bc      	adds	r4, r7, r2
     77c:	220c      	movs	r2, #12
     77e:	18ba      	adds	r2, r7, r2
     780:	0011      	movs	r1, r2
     782:	0018      	movs	r0, r3
     784:	4b12      	ldr	r3, [pc, #72]	; (7d0 <_at25dfx_chip_get_nonbusy_status+0x11c>)
     786:	4798      	blx	r3
     788:	0003      	movs	r3, r0
     78a:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     78c:	230c      	movs	r3, #12
     78e:	18fb      	adds	r3, r7, r3
     790:	881b      	ldrh	r3, [r3, #0]
     792:	001a      	movs	r2, r3
     794:	2301      	movs	r3, #1
     796:	4013      	ands	r3, r2
     798:	d1c8      	bne.n	72c <_at25dfx_chip_get_nonbusy_status+0x78>

	_at25dfx_chip_deselect(chip);
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	0018      	movs	r0, r3
     79e:	4b0d      	ldr	r3, [pc, #52]	; (7d4 <_at25dfx_chip_get_nonbusy_status+0x120>)
     7a0:	4798      	blx	r3

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     7a2:	230c      	movs	r3, #12
     7a4:	18fb      	adds	r3, r7, r3
     7a6:	881b      	ldrh	r3, [r3, #0]
     7a8:	001a      	movs	r2, r3
     7aa:	2320      	movs	r3, #32
     7ac:	4013      	ands	r3, r2
     7ae:	d001      	beq.n	7b4 <_at25dfx_chip_get_nonbusy_status+0x100>
		return STATUS_ERR_IO;
     7b0:	2310      	movs	r3, #16
     7b2:	e000      	b.n	7b6 <_at25dfx_chip_get_nonbusy_status+0x102>
	}
	return STATUS_OK;
     7b4:	2300      	movs	r3, #0
}
     7b6:	0018      	movs	r0, r3
     7b8:	46bd      	mov	sp, r7
     7ba:	b005      	add	sp, #20
     7bc:	bd90      	pop	{r4, r7, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	00000273 	.word	0x00000273
     7c4:	00000469 	.word	0x00000469
     7c8:	000002c5 	.word	0x000002c5
     7cc:	0000029b 	.word	0x0000029b
     7d0:	0000030d 	.word	0x0000030d
     7d4:	00000489 	.word	0x00000489

000007d8 <_at25dfx_chip_enable_write>:
 * or unprotecting sectors.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_enable_write(struct at25dfx_chip_module *chip)
{
     7d8:	b590      	push	{r4, r7, lr}
     7da:	b089      	sub	sp, #36	; 0x24
     7dc:	af02      	add	r7, sp, #8
     7de:	6078      	str	r0, [r7, #4]
	struct at25dfx_command cmd;

	cmd.opcode = AT25DFX_COMMAND_WRITE_ENABLE;
     7e0:	2308      	movs	r3, #8
     7e2:	18fb      	adds	r3, r7, r3
     7e4:	2206      	movs	r2, #6
     7e6:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     7e8:	2308      	movs	r3, #8
     7ea:	18fb      	adds	r3, r7, r3
     7ec:	2201      	movs	r2, #1
     7ee:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     7f0:	2308      	movs	r3, #8
     7f2:	18fb      	adds	r3, r7, r3
     7f4:	2200      	movs	r2, #0
     7f6:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     7f8:	2308      	movs	r3, #8
     7fa:	18fb      	adds	r3, r7, r3
     7fc:	2200      	movs	r2, #0
     7fe:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     800:	2308      	movs	r3, #8
     802:	18fb      	adds	r3, r7, r3
     804:	2200      	movs	r2, #0
     806:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     808:	2308      	movs	r3, #8
     80a:	18fb      	adds	r3, r7, r3
     80c:	6878      	ldr	r0, [r7, #4]
     80e:	466a      	mov	r2, sp
     810:	68d9      	ldr	r1, [r3, #12]
     812:	6011      	str	r1, [r2, #0]
     814:	6819      	ldr	r1, [r3, #0]
     816:	685a      	ldr	r2, [r3, #4]
     818:	689b      	ldr	r3, [r3, #8]
     81a:	4c03      	ldr	r4, [pc, #12]	; (828 <_at25dfx_chip_enable_write+0x50>)
     81c:	47a0      	blx	r4
}
     81e:	46c0      	nop			; (mov r8, r8)
     820:	46bd      	mov	sp, r7
     822:	b007      	add	sp, #28
     824:	bd90      	pop	{r4, r7, pc}
     826:	46c0      	nop			; (mov r8, r8)
     828:	000005b1 	.word	0x000005b1

0000082c <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
     82c:	b590      	push	{r4, r7, lr}
     82e:	b08b      	sub	sp, #44	; 0x2c
     830:	af02      	add	r7, sp, #8
     832:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
     834:	2300      	movs	r3, #0
     836:	60bb      	str	r3, [r7, #8]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
     838:	687b      	ldr	r3, [r7, #4]
     83a:	681b      	ldr	r3, [r3, #0]
     83c:	221f      	movs	r2, #31
     83e:	18bc      	adds	r4, r7, r2
     840:	0018      	movs	r0, r3
     842:	4b21      	ldr	r3, [pc, #132]	; (8c8 <at25dfx_chip_check_presence+0x9c>)
     844:	4798      	blx	r3
     846:	0003      	movs	r3, r0
     848:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     84a:	231f      	movs	r3, #31
     84c:	18fb      	adds	r3, r7, r3
     84e:	781b      	ldrb	r3, [r3, #0]
     850:	2b05      	cmp	r3, #5
     852:	d103      	bne.n	85c <at25dfx_chip_check_presence+0x30>
		return status;
     854:	231f      	movs	r3, #31
     856:	18fb      	adds	r3, r7, r3
     858:	781b      	ldrb	r3, [r3, #0]
     85a:	e030      	b.n	8be <at25dfx_chip_check_presence+0x92>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
     85c:	230c      	movs	r3, #12
     85e:	18fb      	adds	r3, r7, r3
     860:	229f      	movs	r2, #159	; 0x9f
     862:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     864:	230c      	movs	r3, #12
     866:	18fb      	adds	r3, r7, r3
     868:	2201      	movs	r2, #1
     86a:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
     86c:	230c      	movs	r3, #12
     86e:	18fb      	adds	r3, r7, r3
     870:	2208      	movs	r2, #8
     872:	18ba      	adds	r2, r7, r2
     874:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
     876:	230c      	movs	r3, #12
     878:	18fb      	adds	r3, r7, r3
     87a:	2203      	movs	r2, #3
     87c:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     87e:	230c      	movs	r3, #12
     880:	18fb      	adds	r3, r7, r3
     882:	2200      	movs	r2, #0
     884:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     886:	230c      	movs	r3, #12
     888:	18fb      	adds	r3, r7, r3
     88a:	6878      	ldr	r0, [r7, #4]
     88c:	466a      	mov	r2, sp
     88e:	68d9      	ldr	r1, [r3, #12]
     890:	6011      	str	r1, [r2, #0]
     892:	6819      	ldr	r1, [r3, #0]
     894:	685a      	ldr	r2, [r3, #4]
     896:	689b      	ldr	r3, [r3, #8]
     898:	4c0c      	ldr	r4, [pc, #48]	; (8cc <at25dfx_chip_check_presence+0xa0>)
     89a:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	681b      	ldr	r3, [r3, #0]
     8a0:	0018      	movs	r0, r3
     8a2:	4b0b      	ldr	r3, [pc, #44]	; (8d0 <at25dfx_chip_check_presence+0xa4>)
     8a4:	4798      	blx	r3

	if (id == _at25dfx_get_device_id(chip->type)) {
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	791b      	ldrb	r3, [r3, #4]
     8aa:	0018      	movs	r0, r3
     8ac:	4b09      	ldr	r3, [pc, #36]	; (8d4 <at25dfx_chip_check_presence+0xa8>)
     8ae:	4798      	blx	r3
     8b0:	0002      	movs	r2, r0
     8b2:	68bb      	ldr	r3, [r7, #8]
     8b4:	429a      	cmp	r2, r3
     8b6:	d101      	bne.n	8bc <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
     8b8:	2300      	movs	r3, #0
     8ba:	e000      	b.n	8be <at25dfx_chip_check_presence+0x92>
	} else {
		return STATUS_ERR_NOT_FOUND;
     8bc:	2314      	movs	r3, #20
	}
}
     8be:	0018      	movs	r0, r3
     8c0:	46bd      	mov	sp, r7
     8c2:	b009      	add	sp, #36	; 0x24
     8c4:	bd90      	pop	{r4, r7, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	00000215 	.word	0x00000215
     8cc:	000004a9 	.word	0x000004a9
     8d0:	0000025d 	.word	0x0000025d
     8d4:	00000395 	.word	0x00000395

000008d8 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
     8d8:	b590      	push	{r4, r7, lr}
     8da:	b08d      	sub	sp, #52	; 0x34
     8dc:	af02      	add	r7, sp, #8
     8de:	60f8      	str	r0, [r7, #12]
     8e0:	60b9      	str	r1, [r7, #8]
     8e2:	607a      	str	r2, [r7, #4]
     8e4:	001a      	movs	r2, r3
     8e6:	1cbb      	adds	r3, r7, #2
     8e8:	801a      	strh	r2, [r3, #0]
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     8ea:	1cbb      	adds	r3, r7, #2
     8ec:	881a      	ldrh	r2, [r3, #0]
     8ee:	68bb      	ldr	r3, [r7, #8]
     8f0:	18d4      	adds	r4, r2, r3
     8f2:	68fb      	ldr	r3, [r7, #12]
     8f4:	791b      	ldrb	r3, [r3, #4]
     8f6:	0018      	movs	r0, r3
     8f8:	4b21      	ldr	r3, [pc, #132]	; (980 <at25dfx_chip_read_buffer+0xa8>)
     8fa:	4798      	blx	r3
     8fc:	0003      	movs	r3, r0
     8fe:	429c      	cmp	r4, r3
     900:	d901      	bls.n	906 <at25dfx_chip_read_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
     902:	2317      	movs	r3, #23
     904:	e037      	b.n	976 <at25dfx_chip_read_buffer+0x9e>
	}

	status = _at25dfx_spi_lock(chip->spi);
     906:	68fb      	ldr	r3, [r7, #12]
     908:	681b      	ldr	r3, [r3, #0]
     90a:	2227      	movs	r2, #39	; 0x27
     90c:	18bc      	adds	r4, r7, r2
     90e:	0018      	movs	r0, r3
     910:	4b1c      	ldr	r3, [pc, #112]	; (984 <at25dfx_chip_read_buffer+0xac>)
     912:	4798      	blx	r3
     914:	0003      	movs	r3, r0
     916:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     918:	2327      	movs	r3, #39	; 0x27
     91a:	18fb      	adds	r3, r7, r3
     91c:	781b      	ldrb	r3, [r3, #0]
     91e:	2b05      	cmp	r3, #5
     920:	d103      	bne.n	92a <at25dfx_chip_read_buffer+0x52>
		return status;
     922:	2327      	movs	r3, #39	; 0x27
     924:	18fb      	adds	r3, r7, r3
     926:	781b      	ldrb	r3, [r3, #0]
     928:	e025      	b.n	976 <at25dfx_chip_read_buffer+0x9e>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
     92a:	2314      	movs	r3, #20
     92c:	18fb      	adds	r3, r7, r3
     92e:	220b      	movs	r2, #11
     930:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 5;
     932:	2314      	movs	r3, #20
     934:	18fb      	adds	r3, r7, r3
     936:	2205      	movs	r2, #5
     938:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     93a:	2314      	movs	r3, #20
     93c:	18fb      	adds	r3, r7, r3
     93e:	68ba      	ldr	r2, [r7, #8]
     940:	605a      	str	r2, [r3, #4]
	cmd.data.rx = (uint8_t *)data;
     942:	2314      	movs	r3, #20
     944:	18fb      	adds	r3, r7, r3
     946:	687a      	ldr	r2, [r7, #4]
     948:	609a      	str	r2, [r3, #8]
	cmd.length = length;
     94a:	2314      	movs	r3, #20
     94c:	18fb      	adds	r3, r7, r3
     94e:	1cba      	adds	r2, r7, #2
     950:	8812      	ldrh	r2, [r2, #0]
     952:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     954:	2314      	movs	r3, #20
     956:	18fb      	adds	r3, r7, r3
     958:	68f8      	ldr	r0, [r7, #12]
     95a:	466a      	mov	r2, sp
     95c:	68d9      	ldr	r1, [r3, #12]
     95e:	6011      	str	r1, [r2, #0]
     960:	6819      	ldr	r1, [r3, #0]
     962:	685a      	ldr	r2, [r3, #4]
     964:	689b      	ldr	r3, [r3, #8]
     966:	4c08      	ldr	r4, [pc, #32]	; (988 <at25dfx_chip_read_buffer+0xb0>)
     968:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     96a:	68fb      	ldr	r3, [r7, #12]
     96c:	681b      	ldr	r3, [r3, #0]
     96e:	0018      	movs	r0, r3
     970:	4b06      	ldr	r3, [pc, #24]	; (98c <at25dfx_chip_read_buffer+0xb4>)
     972:	4798      	blx	r3

	return STATUS_OK;
     974:	2300      	movs	r3, #0
}
     976:	0018      	movs	r0, r3
     978:	46bd      	mov	sp, r7
     97a:	b00b      	add	sp, #44	; 0x2c
     97c:	bd90      	pop	{r4, r7, pc}
     97e:	46c0      	nop			; (mov r8, r8)
     980:	00000411 	.word	0x00000411
     984:	00000215 	.word	0x00000215
     988:	000004a9 	.word	0x000004a9
     98c:	0000025d 	.word	0x0000025d

00000990 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
     990:	b590      	push	{r4, r7, lr}
     992:	b08d      	sub	sp, #52	; 0x34
     994:	af02      	add	r7, sp, #8
     996:	60f8      	str	r0, [r7, #12]
     998:	60b9      	str	r1, [r7, #8]
     99a:	607a      	str	r2, [r7, #4]
     99c:	001a      	movs	r2, r3
     99e:	1cbb      	adds	r3, r7, #2
     9a0:	801a      	strh	r2, [r3, #0]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     9a2:	1cbb      	adds	r3, r7, #2
     9a4:	881a      	ldrh	r2, [r3, #0]
     9a6:	68bb      	ldr	r3, [r7, #8]
     9a8:	18d4      	adds	r4, r2, r3
     9aa:	68fb      	ldr	r3, [r7, #12]
     9ac:	791b      	ldrb	r3, [r3, #4]
     9ae:	0018      	movs	r0, r3
     9b0:	4b5b      	ldr	r3, [pc, #364]	; (b20 <at25dfx_chip_write_buffer+0x190>)
     9b2:	4798      	blx	r3
     9b4:	0003      	movs	r3, r0
     9b6:	429c      	cmp	r4, r3
     9b8:	d901      	bls.n	9be <at25dfx_chip_write_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
     9ba:	2317      	movs	r3, #23
     9bc:	e0ab      	b.n	b16 <at25dfx_chip_write_buffer+0x186>
	}

	status = _at25dfx_spi_lock(chip->spi);
     9be:	68fb      	ldr	r3, [r7, #12]
     9c0:	681b      	ldr	r3, [r3, #0]
     9c2:	2227      	movs	r2, #39	; 0x27
     9c4:	18bc      	adds	r4, r7, r2
     9c6:	0018      	movs	r0, r3
     9c8:	4b56      	ldr	r3, [pc, #344]	; (b24 <at25dfx_chip_write_buffer+0x194>)
     9ca:	4798      	blx	r3
     9cc:	0003      	movs	r3, r0
     9ce:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     9d0:	2327      	movs	r3, #39	; 0x27
     9d2:	18fb      	adds	r3, r7, r3
     9d4:	781b      	ldrb	r3, [r3, #0]
     9d6:	2b05      	cmp	r3, #5
     9d8:	d103      	bne.n	9e2 <at25dfx_chip_write_buffer+0x52>
		return status;
     9da:	2327      	movs	r3, #39	; 0x27
     9dc:	18fb      	adds	r3, r7, r3
     9de:	781b      	ldrb	r3, [r3, #0]
     9e0:	e099      	b.n	b16 <at25dfx_chip_write_buffer+0x186>
	}

	_at25dfx_chip_enable_write(chip);
     9e2:	68fb      	ldr	r3, [r7, #12]
     9e4:	0018      	movs	r0, r3
     9e6:	4b50      	ldr	r3, [pc, #320]	; (b28 <at25dfx_chip_write_buffer+0x198>)
     9e8:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
     9ea:	2314      	movs	r3, #20
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	2202      	movs	r2, #2
     9f0:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
     9f2:	2314      	movs	r3, #20
     9f4:	18fb      	adds	r3, r7, r3
     9f6:	2204      	movs	r2, #4
     9f8:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     9fa:	2314      	movs	r3, #20
     9fc:	18fb      	adds	r3, r7, r3
     9fe:	68ba      	ldr	r2, [r7, #8]
     a00:	605a      	str	r2, [r3, #4]
	cmd.data.tx = (uint8_t *)data;
     a02:	2314      	movs	r3, #20
     a04:	18fb      	adds	r3, r7, r3
     a06:	687a      	ldr	r2, [r7, #4]
     a08:	609a      	str	r2, [r3, #8]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
     a0a:	68bb      	ldr	r3, [r7, #8]
     a0c:	b29b      	uxth	r3, r3
     a0e:	22ff      	movs	r2, #255	; 0xff
     a10:	4013      	ands	r3, r2
     a12:	b29a      	uxth	r2, r3
     a14:	2324      	movs	r3, #36	; 0x24
     a16:	18fb      	adds	r3, r7, r3
     a18:	2180      	movs	r1, #128	; 0x80
     a1a:	0049      	lsls	r1, r1, #1
     a1c:	1a8a      	subs	r2, r1, r2
     a1e:	801a      	strh	r2, [r3, #0]
	cmd.length = min(page_bytes, length);
     a20:	1cbb      	adds	r3, r7, #2
     a22:	2224      	movs	r2, #36	; 0x24
     a24:	18ba      	adds	r2, r7, r2
     a26:	8810      	ldrh	r0, [r2, #0]
     a28:	881b      	ldrh	r3, [r3, #0]
     a2a:	b299      	uxth	r1, r3
     a2c:	b282      	uxth	r2, r0
     a2e:	4291      	cmp	r1, r2
     a30:	d900      	bls.n	a34 <at25dfx_chip_write_buffer+0xa4>
     a32:	1c03      	adds	r3, r0, #0
     a34:	b29a      	uxth	r2, r3
     a36:	2314      	movs	r3, #20
     a38:	18fb      	adds	r3, r7, r3
     a3a:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     a3c:	2314      	movs	r3, #20
     a3e:	18fb      	adds	r3, r7, r3
     a40:	68f8      	ldr	r0, [r7, #12]
     a42:	466a      	mov	r2, sp
     a44:	68d9      	ldr	r1, [r3, #12]
     a46:	6011      	str	r1, [r2, #0]
     a48:	6819      	ldr	r1, [r3, #0]
     a4a:	685a      	ldr	r2, [r3, #4]
     a4c:	689b      	ldr	r3, [r3, #8]
     a4e:	4c37      	ldr	r4, [pc, #220]	; (b2c <at25dfx_chip_write_buffer+0x19c>)
     a50:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
     a52:	2327      	movs	r3, #39	; 0x27
     a54:	18fc      	adds	r4, r7, r3
     a56:	68fb      	ldr	r3, [r7, #12]
     a58:	0018      	movs	r0, r3
     a5a:	4b35      	ldr	r3, [pc, #212]	; (b30 <at25dfx_chip_write_buffer+0x1a0>)
     a5c:	4798      	blx	r3
     a5e:	0003      	movs	r3, r0
     a60:	7023      	strb	r3, [r4, #0]

	length -= cmd.length;
     a62:	2314      	movs	r3, #20
     a64:	18fb      	adds	r3, r7, r3
     a66:	899a      	ldrh	r2, [r3, #12]
     a68:	1cbb      	adds	r3, r7, #2
     a6a:	1cb9      	adds	r1, r7, #2
     a6c:	8809      	ldrh	r1, [r1, #0]
     a6e:	1a8a      	subs	r2, r1, r2
     a70:	801a      	strh	r2, [r3, #0]

	while (length && (status == STATUS_OK)) {
     a72:	e03f      	b.n	af4 <at25dfx_chip_write_buffer+0x164>
		_at25dfx_chip_enable_write(chip);
     a74:	68fb      	ldr	r3, [r7, #12]
     a76:	0018      	movs	r0, r3
     a78:	4b2b      	ldr	r3, [pc, #172]	; (b28 <at25dfx_chip_write_buffer+0x198>)
     a7a:	4798      	blx	r3

		cmd.address += cmd.length;
     a7c:	2314      	movs	r3, #20
     a7e:	18fb      	adds	r3, r7, r3
     a80:	685b      	ldr	r3, [r3, #4]
     a82:	2214      	movs	r2, #20
     a84:	18ba      	adds	r2, r7, r2
     a86:	8992      	ldrh	r2, [r2, #12]
     a88:	189a      	adds	r2, r3, r2
     a8a:	2314      	movs	r3, #20
     a8c:	18fb      	adds	r3, r7, r3
     a8e:	605a      	str	r2, [r3, #4]
		cmd.data.tx += cmd.length;
     a90:	2314      	movs	r3, #20
     a92:	18fb      	adds	r3, r7, r3
     a94:	689b      	ldr	r3, [r3, #8]
     a96:	2214      	movs	r2, #20
     a98:	18ba      	adds	r2, r7, r2
     a9a:	8992      	ldrh	r2, [r2, #12]
     a9c:	189a      	adds	r2, r3, r2
     a9e:	2314      	movs	r3, #20
     aa0:	18fb      	adds	r3, r7, r3
     aa2:	609a      	str	r2, [r3, #8]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     aa4:	1cbb      	adds	r3, r7, #2
     aa6:	881b      	ldrh	r3, [r3, #0]
     aa8:	b299      	uxth	r1, r3
     aaa:	2280      	movs	r2, #128	; 0x80
     aac:	0052      	lsls	r2, r2, #1
     aae:	4291      	cmp	r1, r2
     ab0:	d901      	bls.n	ab6 <at25dfx_chip_write_buffer+0x126>
     ab2:	2380      	movs	r3, #128	; 0x80
     ab4:	005b      	lsls	r3, r3, #1
     ab6:	b29a      	uxth	r2, r3
     ab8:	2314      	movs	r3, #20
     aba:	18fb      	adds	r3, r7, r3
     abc:	819a      	strh	r2, [r3, #12]

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
     abe:	2314      	movs	r3, #20
     ac0:	18fb      	adds	r3, r7, r3
     ac2:	68f8      	ldr	r0, [r7, #12]
     ac4:	466a      	mov	r2, sp
     ac6:	68d9      	ldr	r1, [r3, #12]
     ac8:	6011      	str	r1, [r2, #0]
     aca:	6819      	ldr	r1, [r3, #0]
     acc:	685a      	ldr	r2, [r3, #4]
     ace:	689b      	ldr	r3, [r3, #8]
     ad0:	4c16      	ldr	r4, [pc, #88]	; (b2c <at25dfx_chip_write_buffer+0x19c>)
     ad2:	47a0      	blx	r4

		status = _at25dfx_chip_get_nonbusy_status(chip);
     ad4:	2327      	movs	r3, #39	; 0x27
     ad6:	18fc      	adds	r4, r7, r3
     ad8:	68fb      	ldr	r3, [r7, #12]
     ada:	0018      	movs	r0, r3
     adc:	4b14      	ldr	r3, [pc, #80]	; (b30 <at25dfx_chip_write_buffer+0x1a0>)
     ade:	4798      	blx	r3
     ae0:	0003      	movs	r3, r0
     ae2:	7023      	strb	r3, [r4, #0]

		length -= cmd.length;
     ae4:	2314      	movs	r3, #20
     ae6:	18fb      	adds	r3, r7, r3
     ae8:	899a      	ldrh	r2, [r3, #12]
     aea:	1cbb      	adds	r3, r7, #2
     aec:	1cb9      	adds	r1, r7, #2
     aee:	8809      	ldrh	r1, [r1, #0]
     af0:	1a8a      	subs	r2, r1, r2
     af2:	801a      	strh	r2, [r3, #0]
	while (length && (status == STATUS_OK)) {
     af4:	1cbb      	adds	r3, r7, #2
     af6:	881b      	ldrh	r3, [r3, #0]
     af8:	2b00      	cmp	r3, #0
     afa:	d004      	beq.n	b06 <at25dfx_chip_write_buffer+0x176>
     afc:	2327      	movs	r3, #39	; 0x27
     afe:	18fb      	adds	r3, r7, r3
     b00:	781b      	ldrb	r3, [r3, #0]
     b02:	2b00      	cmp	r3, #0
     b04:	d0b6      	beq.n	a74 <at25dfx_chip_write_buffer+0xe4>
	}

	_at25dfx_spi_unlock(chip->spi);
     b06:	68fb      	ldr	r3, [r7, #12]
     b08:	681b      	ldr	r3, [r3, #0]
     b0a:	0018      	movs	r0, r3
     b0c:	4b09      	ldr	r3, [pc, #36]	; (b34 <at25dfx_chip_write_buffer+0x1a4>)
     b0e:	4798      	blx	r3

	return status;
     b10:	2327      	movs	r3, #39	; 0x27
     b12:	18fb      	adds	r3, r7, r3
     b14:	781b      	ldrb	r3, [r3, #0]
}
     b16:	0018      	movs	r0, r3
     b18:	46bd      	mov	sp, r7
     b1a:	b00b      	add	sp, #44	; 0x2c
     b1c:	bd90      	pop	{r4, r7, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	00000411 	.word	0x00000411
     b24:	00000215 	.word	0x00000215
     b28:	000007d9 	.word	0x000007d9
     b2c:	000005b1 	.word	0x000005b1
     b30:	000006b5 	.word	0x000006b5
     b34:	0000025d 	.word	0x0000025d

00000b38 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
     b38:	b590      	push	{r4, r7, lr}
     b3a:	b08d      	sub	sp, #52	; 0x34
     b3c:	af02      	add	r7, sp, #8
     b3e:	60f8      	str	r0, [r7, #12]
     b40:	60b9      	str	r1, [r7, #8]
     b42:	1dfb      	adds	r3, r7, #7
     b44:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
     b46:	68fb      	ldr	r3, [r7, #12]
     b48:	791b      	ldrb	r3, [r3, #4]
     b4a:	0018      	movs	r0, r3
     b4c:	4b33      	ldr	r3, [pc, #204]	; (c1c <at25dfx_chip_erase_block+0xe4>)
     b4e:	4798      	blx	r3
     b50:	0002      	movs	r2, r0
     b52:	68bb      	ldr	r3, [r7, #8]
     b54:	429a      	cmp	r2, r3
     b56:	d801      	bhi.n	b5c <at25dfx_chip_erase_block+0x24>
		return STATUS_ERR_INVALID_ARG;
     b58:	2317      	movs	r3, #23
     b5a:	e05b      	b.n	c14 <at25dfx_chip_erase_block+0xdc>
	}

	status = _at25dfx_spi_lock(chip->spi);
     b5c:	68fb      	ldr	r3, [r7, #12]
     b5e:	681b      	ldr	r3, [r3, #0]
     b60:	2227      	movs	r2, #39	; 0x27
     b62:	18bc      	adds	r4, r7, r2
     b64:	0018      	movs	r0, r3
     b66:	4b2e      	ldr	r3, [pc, #184]	; (c20 <at25dfx_chip_erase_block+0xe8>)
     b68:	4798      	blx	r3
     b6a:	0003      	movs	r3, r0
     b6c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     b6e:	2327      	movs	r3, #39	; 0x27
     b70:	18fb      	adds	r3, r7, r3
     b72:	781b      	ldrb	r3, [r3, #0]
     b74:	2b05      	cmp	r3, #5
     b76:	d103      	bne.n	b80 <at25dfx_chip_erase_block+0x48>
		return status;
     b78:	2327      	movs	r3, #39	; 0x27
     b7a:	18fb      	adds	r3, r7, r3
     b7c:	781b      	ldrb	r3, [r3, #0]
     b7e:	e049      	b.n	c14 <at25dfx_chip_erase_block+0xdc>
	}

	_at25dfx_chip_enable_write(chip);
     b80:	68fb      	ldr	r3, [r7, #12]
     b82:	0018      	movs	r0, r3
     b84:	4b27      	ldr	r3, [pc, #156]	; (c24 <at25dfx_chip_erase_block+0xec>)
     b86:	4798      	blx	r3

	switch (block_size) {
     b88:	1dfb      	adds	r3, r7, #7
     b8a:	781b      	ldrb	r3, [r3, #0]
     b8c:	2b01      	cmp	r3, #1
     b8e:	d008      	beq.n	ba2 <at25dfx_chip_erase_block+0x6a>
     b90:	2b02      	cmp	r3, #2
     b92:	d00b      	beq.n	bac <at25dfx_chip_erase_block+0x74>
     b94:	2b00      	cmp	r3, #0
     b96:	d10e      	bne.n	bb6 <at25dfx_chip_erase_block+0x7e>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
     b98:	2314      	movs	r3, #20
     b9a:	18fb      	adds	r3, r7, r3
     b9c:	2220      	movs	r2, #32
     b9e:	701a      	strb	r2, [r3, #0]
		break;
     ba0:	e00d      	b.n	bbe <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
     ba2:	2314      	movs	r3, #20
     ba4:	18fb      	adds	r3, r7, r3
     ba6:	2252      	movs	r2, #82	; 0x52
     ba8:	701a      	strb	r2, [r3, #0]
		break;
     baa:	e008      	b.n	bbe <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
     bac:	2314      	movs	r3, #20
     bae:	18fb      	adds	r3, r7, r3
     bb0:	22d8      	movs	r2, #216	; 0xd8
     bb2:	701a      	strb	r2, [r3, #0]
		break;
     bb4:	e003      	b.n	bbe <at25dfx_chip_erase_block+0x86>

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
     bb6:	2314      	movs	r3, #20
     bb8:	18fb      	adds	r3, r7, r3
     bba:	2200      	movs	r2, #0
     bbc:	701a      	strb	r2, [r3, #0]
	}
	cmd.command_size = 4;
     bbe:	2314      	movs	r3, #20
     bc0:	18fb      	adds	r3, r7, r3
     bc2:	2204      	movs	r2, #4
     bc4:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     bc6:	2314      	movs	r3, #20
     bc8:	18fb      	adds	r3, r7, r3
     bca:	68ba      	ldr	r2, [r7, #8]
     bcc:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
     bce:	2314      	movs	r3, #20
     bd0:	18fb      	adds	r3, r7, r3
     bd2:	2200      	movs	r2, #0
     bd4:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
     bd6:	2314      	movs	r3, #20
     bd8:	18fb      	adds	r3, r7, r3
     bda:	2200      	movs	r2, #0
     bdc:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     bde:	2314      	movs	r3, #20
     be0:	18fb      	adds	r3, r7, r3
     be2:	68f8      	ldr	r0, [r7, #12]
     be4:	466a      	mov	r2, sp
     be6:	68d9      	ldr	r1, [r3, #12]
     be8:	6011      	str	r1, [r2, #0]
     bea:	6819      	ldr	r1, [r3, #0]
     bec:	685a      	ldr	r2, [r3, #4]
     bee:	689b      	ldr	r3, [r3, #8]
     bf0:	4c0d      	ldr	r4, [pc, #52]	; (c28 <at25dfx_chip_erase_block+0xf0>)
     bf2:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
     bf4:	2327      	movs	r3, #39	; 0x27
     bf6:	18fc      	adds	r4, r7, r3
     bf8:	68fb      	ldr	r3, [r7, #12]
     bfa:	0018      	movs	r0, r3
     bfc:	4b0b      	ldr	r3, [pc, #44]	; (c2c <at25dfx_chip_erase_block+0xf4>)
     bfe:	4798      	blx	r3
     c00:	0003      	movs	r3, r0
     c02:	7023      	strb	r3, [r4, #0]

	_at25dfx_spi_unlock(chip->spi);
     c04:	68fb      	ldr	r3, [r7, #12]
     c06:	681b      	ldr	r3, [r3, #0]
     c08:	0018      	movs	r0, r3
     c0a:	4b09      	ldr	r3, [pc, #36]	; (c30 <at25dfx_chip_erase_block+0xf8>)
     c0c:	4798      	blx	r3

	return status;
     c0e:	2327      	movs	r3, #39	; 0x27
     c10:	18fb      	adds	r3, r7, r3
     c12:	781b      	ldrb	r3, [r3, #0]
}
     c14:	0018      	movs	r0, r3
     c16:	46bd      	mov	sp, r7
     c18:	b00b      	add	sp, #44	; 0x2c
     c1a:	bd90      	pop	{r4, r7, pc}
     c1c:	00000411 	.word	0x00000411
     c20:	00000215 	.word	0x00000215
     c24:	000007d9 	.word	0x000007d9
     c28:	000005b1 	.word	0x000005b1
     c2c:	000006b5 	.word	0x000006b5
     c30:	0000025d 	.word	0x0000025d

00000c34 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
     c34:	b590      	push	{r4, r7, lr}
     c36:	b08b      	sub	sp, #44	; 0x2c
     c38:	af02      	add	r7, sp, #8
     c3a:	6078      	str	r0, [r7, #4]
     c3c:	000a      	movs	r2, r1
     c3e:	1cfb      	adds	r3, r7, #3
     c40:	701a      	strb	r2, [r3, #0]
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	681b      	ldr	r3, [r3, #0]
     c46:	221f      	movs	r2, #31
     c48:	18bc      	adds	r4, r7, r2
     c4a:	0018      	movs	r0, r3
     c4c:	4b22      	ldr	r3, [pc, #136]	; (cd8 <at25dfx_chip_set_global_sector_protect+0xa4>)
     c4e:	4798      	blx	r3
     c50:	0003      	movs	r3, r0
     c52:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     c54:	231f      	movs	r3, #31
     c56:	18fb      	adds	r3, r7, r3
     c58:	781b      	ldrb	r3, [r3, #0]
     c5a:	2b05      	cmp	r3, #5
     c5c:	d103      	bne.n	c66 <at25dfx_chip_set_global_sector_protect+0x32>
		return status;
     c5e:	231f      	movs	r3, #31
     c60:	18fb      	adds	r3, r7, r3
     c62:	781b      	ldrb	r3, [r3, #0]
     c64:	e033      	b.n	cce <at25dfx_chip_set_global_sector_protect+0x9a>
	}

	_at25dfx_chip_enable_write(chip);
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	0018      	movs	r0, r3
     c6a:	4b1c      	ldr	r3, [pc, #112]	; (cdc <at25dfx_chip_set_global_sector_protect+0xa8>)
     c6c:	4798      	blx	r3

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
     c6e:	1cfb      	adds	r3, r7, #3
     c70:	781b      	ldrb	r3, [r3, #0]
     c72:	2b00      	cmp	r3, #0
     c74:	d001      	beq.n	c7a <at25dfx_chip_set_global_sector_protect+0x46>
     c76:	223c      	movs	r2, #60	; 0x3c
     c78:	e000      	b.n	c7c <at25dfx_chip_set_global_sector_protect+0x48>
     c7a:	2200      	movs	r2, #0
     c7c:	230b      	movs	r3, #11
     c7e:	18fb      	adds	r3, r7, r3
     c80:	701a      	strb	r2, [r3, #0]
	cmd.opcode = AT25DFX_COMMAND_WRITE_STATUS;
     c82:	230c      	movs	r3, #12
     c84:	18fb      	adds	r3, r7, r3
     c86:	2201      	movs	r2, #1
     c88:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     c8a:	230c      	movs	r3, #12
     c8c:	18fb      	adds	r3, r7, r3
     c8e:	2201      	movs	r2, #1
     c90:	705a      	strb	r2, [r3, #1]
	cmd.length = 1;
     c92:	230c      	movs	r3, #12
     c94:	18fb      	adds	r3, r7, r3
     c96:	2201      	movs	r2, #1
     c98:	819a      	strh	r2, [r3, #12]
	cmd.data.tx = &temp_data;
     c9a:	230c      	movs	r3, #12
     c9c:	18fb      	adds	r3, r7, r3
     c9e:	220b      	movs	r2, #11
     ca0:	18ba      	adds	r2, r7, r2
     ca2:	609a      	str	r2, [r3, #8]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     ca4:	230c      	movs	r3, #12
     ca6:	18fb      	adds	r3, r7, r3
     ca8:	2200      	movs	r2, #0
     caa:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     cac:	230c      	movs	r3, #12
     cae:	18fb      	adds	r3, r7, r3
     cb0:	6878      	ldr	r0, [r7, #4]
     cb2:	466a      	mov	r2, sp
     cb4:	68d9      	ldr	r1, [r3, #12]
     cb6:	6011      	str	r1, [r2, #0]
     cb8:	6819      	ldr	r1, [r3, #0]
     cba:	685a      	ldr	r2, [r3, #4]
     cbc:	689b      	ldr	r3, [r3, #8]
     cbe:	4c08      	ldr	r4, [pc, #32]	; (ce0 <at25dfx_chip_set_global_sector_protect+0xac>)
     cc0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	681b      	ldr	r3, [r3, #0]
     cc6:	0018      	movs	r0, r3
     cc8:	4b06      	ldr	r3, [pc, #24]	; (ce4 <at25dfx_chip_set_global_sector_protect+0xb0>)
     cca:	4798      	blx	r3

	return STATUS_OK;
     ccc:	2300      	movs	r3, #0
}
     cce:	0018      	movs	r0, r3
     cd0:	46bd      	mov	sp, r7
     cd2:	b009      	add	sp, #36	; 0x24
     cd4:	bd90      	pop	{r4, r7, pc}
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	00000215 	.word	0x00000215
     cdc:	000007d9 	.word	0x000007d9
     ce0:	000005b1 	.word	0x000005b1
     ce4:	0000025d 	.word	0x0000025d

00000ce8 <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
     ce8:	b590      	push	{r4, r7, lr}
     cea:	b08d      	sub	sp, #52	; 0x34
     cec:	af02      	add	r7, sp, #8
     cee:	60f8      	str	r0, [r7, #12]
     cf0:	60b9      	str	r1, [r7, #8]
     cf2:	1dfb      	adds	r3, r7, #7
     cf4:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
     cf6:	68fb      	ldr	r3, [r7, #12]
     cf8:	791b      	ldrb	r3, [r3, #4]
     cfa:	0018      	movs	r0, r3
     cfc:	4b26      	ldr	r3, [pc, #152]	; (d98 <at25dfx_chip_set_sector_protect+0xb0>)
     cfe:	4798      	blx	r3
     d00:	0002      	movs	r2, r0
     d02:	68bb      	ldr	r3, [r7, #8]
     d04:	429a      	cmp	r2, r3
     d06:	d801      	bhi.n	d0c <at25dfx_chip_set_sector_protect+0x24>
		return STATUS_ERR_INVALID_ARG;
     d08:	2317      	movs	r3, #23
     d0a:	e040      	b.n	d8e <at25dfx_chip_set_sector_protect+0xa6>
	}

	status = _at25dfx_spi_lock(chip->spi);
     d0c:	68fb      	ldr	r3, [r7, #12]
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	2227      	movs	r2, #39	; 0x27
     d12:	18bc      	adds	r4, r7, r2
     d14:	0018      	movs	r0, r3
     d16:	4b21      	ldr	r3, [pc, #132]	; (d9c <at25dfx_chip_set_sector_protect+0xb4>)
     d18:	4798      	blx	r3
     d1a:	0003      	movs	r3, r0
     d1c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     d1e:	2327      	movs	r3, #39	; 0x27
     d20:	18fb      	adds	r3, r7, r3
     d22:	781b      	ldrb	r3, [r3, #0]
     d24:	2b05      	cmp	r3, #5
     d26:	d103      	bne.n	d30 <at25dfx_chip_set_sector_protect+0x48>
		return status;
     d28:	2327      	movs	r3, #39	; 0x27
     d2a:	18fb      	adds	r3, r7, r3
     d2c:	781b      	ldrb	r3, [r3, #0]
     d2e:	e02e      	b.n	d8e <at25dfx_chip_set_sector_protect+0xa6>
	}

	_at25dfx_chip_enable_write(chip);
     d30:	68fb      	ldr	r3, [r7, #12]
     d32:	0018      	movs	r0, r3
     d34:	4b1a      	ldr	r3, [pc, #104]	; (da0 <at25dfx_chip_set_sector_protect+0xb8>)
     d36:	4798      	blx	r3

	cmd.opcode = protect ?
			AT25DFX_COMMAND_PROTECT_SECTOR : AT25DFX_COMMAND_UNPROTECT_SECTOR;
     d38:	1dfb      	adds	r3, r7, #7
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	2b00      	cmp	r3, #0
     d3e:	d001      	beq.n	d44 <at25dfx_chip_set_sector_protect+0x5c>
     d40:	2236      	movs	r2, #54	; 0x36
     d42:	e000      	b.n	d46 <at25dfx_chip_set_sector_protect+0x5e>
     d44:	2239      	movs	r2, #57	; 0x39
	cmd.opcode = protect ?
     d46:	2314      	movs	r3, #20
     d48:	18fb      	adds	r3, r7, r3
     d4a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
     d4c:	2314      	movs	r3, #20
     d4e:	18fb      	adds	r3, r7, r3
     d50:	2204      	movs	r2, #4
     d52:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     d54:	2314      	movs	r3, #20
     d56:	18fb      	adds	r3, r7, r3
     d58:	68ba      	ldr	r2, [r7, #8]
     d5a:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
     d5c:	2314      	movs	r3, #20
     d5e:	18fb      	adds	r3, r7, r3
     d60:	2200      	movs	r2, #0
     d62:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
     d64:	2314      	movs	r3, #20
     d66:	18fb      	adds	r3, r7, r3
     d68:	2200      	movs	r2, #0
     d6a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     d6c:	2314      	movs	r3, #20
     d6e:	18fb      	adds	r3, r7, r3
     d70:	68f8      	ldr	r0, [r7, #12]
     d72:	466a      	mov	r2, sp
     d74:	68d9      	ldr	r1, [r3, #12]
     d76:	6011      	str	r1, [r2, #0]
     d78:	6819      	ldr	r1, [r3, #0]
     d7a:	685a      	ldr	r2, [r3, #4]
     d7c:	689b      	ldr	r3, [r3, #8]
     d7e:	4c09      	ldr	r4, [pc, #36]	; (da4 <at25dfx_chip_set_sector_protect+0xbc>)
     d80:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     d82:	68fb      	ldr	r3, [r7, #12]
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	0018      	movs	r0, r3
     d88:	4b07      	ldr	r3, [pc, #28]	; (da8 <at25dfx_chip_set_sector_protect+0xc0>)
     d8a:	4798      	blx	r3

	return STATUS_OK;
     d8c:	2300      	movs	r3, #0
}
     d8e:	0018      	movs	r0, r3
     d90:	46bd      	mov	sp, r7
     d92:	b00b      	add	sp, #44	; 0x2c
     d94:	bd90      	pop	{r4, r7, pc}
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	00000411 	.word	0x00000411
     d9c:	00000215 	.word	0x00000215
     da0:	000007d9 	.word	0x000007d9
     da4:	000005b1 	.word	0x000005b1
     da8:	0000025d 	.word	0x0000025d

00000dac <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
     dac:	b590      	push	{r4, r7, lr}
     dae:	b08b      	sub	sp, #44	; 0x2c
     db0:	af02      	add	r7, sp, #8
     db2:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	221f      	movs	r2, #31
     dba:	18bc      	adds	r4, r7, r2
     dbc:	0018      	movs	r0, r3
     dbe:	4b1b      	ldr	r3, [pc, #108]	; (e2c <at25dfx_chip_sleep+0x80>)
     dc0:	4798      	blx	r3
     dc2:	0003      	movs	r3, r0
     dc4:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     dc6:	231f      	movs	r3, #31
     dc8:	18fb      	adds	r3, r7, r3
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	2b05      	cmp	r3, #5
     dce:	d103      	bne.n	dd8 <at25dfx_chip_sleep+0x2c>
		return status;
     dd0:	231f      	movs	r3, #31
     dd2:	18fb      	adds	r3, r7, r3
     dd4:	781b      	ldrb	r3, [r3, #0]
     dd6:	e024      	b.n	e22 <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
     dd8:	230c      	movs	r3, #12
     dda:	18fb      	adds	r3, r7, r3
     ddc:	22b9      	movs	r2, #185	; 0xb9
     dde:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     de0:	230c      	movs	r3, #12
     de2:	18fb      	adds	r3, r7, r3
     de4:	2201      	movs	r2, #1
     de6:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     de8:	230c      	movs	r3, #12
     dea:	18fb      	adds	r3, r7, r3
     dec:	2200      	movs	r2, #0
     dee:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     df0:	230c      	movs	r3, #12
     df2:	18fb      	adds	r3, r7, r3
     df4:	2200      	movs	r2, #0
     df6:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     df8:	230c      	movs	r3, #12
     dfa:	18fb      	adds	r3, r7, r3
     dfc:	2200      	movs	r2, #0
     dfe:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     e00:	230c      	movs	r3, #12
     e02:	18fb      	adds	r3, r7, r3
     e04:	6878      	ldr	r0, [r7, #4]
     e06:	466a      	mov	r2, sp
     e08:	68d9      	ldr	r1, [r3, #12]
     e0a:	6011      	str	r1, [r2, #0]
     e0c:	6819      	ldr	r1, [r3, #0]
     e0e:	685a      	ldr	r2, [r3, #4]
     e10:	689b      	ldr	r3, [r3, #8]
     e12:	4c07      	ldr	r4, [pc, #28]	; (e30 <at25dfx_chip_sleep+0x84>)
     e14:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	681b      	ldr	r3, [r3, #0]
     e1a:	0018      	movs	r0, r3
     e1c:	4b05      	ldr	r3, [pc, #20]	; (e34 <at25dfx_chip_sleep+0x88>)
     e1e:	4798      	blx	r3

	return STATUS_OK;
     e20:	2300      	movs	r3, #0
}
     e22:	0018      	movs	r0, r3
     e24:	46bd      	mov	sp, r7
     e26:	b009      	add	sp, #36	; 0x24
     e28:	bd90      	pop	{r4, r7, pc}
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	00000215 	.word	0x00000215
     e30:	000005b1 	.word	0x000005b1
     e34:	0000025d 	.word	0x0000025d

00000e38 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     e38:	b590      	push	{r4, r7, lr}
     e3a:	b08b      	sub	sp, #44	; 0x2c
     e3c:	af02      	add	r7, sp, #8
     e3e:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	681b      	ldr	r3, [r3, #0]
     e44:	221f      	movs	r2, #31
     e46:	18bc      	adds	r4, r7, r2
     e48:	0018      	movs	r0, r3
     e4a:	4b1b      	ldr	r3, [pc, #108]	; (eb8 <at25dfx_chip_wake+0x80>)
     e4c:	4798      	blx	r3
     e4e:	0003      	movs	r3, r0
     e50:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     e52:	231f      	movs	r3, #31
     e54:	18fb      	adds	r3, r7, r3
     e56:	781b      	ldrb	r3, [r3, #0]
     e58:	2b05      	cmp	r3, #5
     e5a:	d103      	bne.n	e64 <at25dfx_chip_wake+0x2c>
		return status;
     e5c:	231f      	movs	r3, #31
     e5e:	18fb      	adds	r3, r7, r3
     e60:	781b      	ldrb	r3, [r3, #0]
     e62:	e024      	b.n	eae <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
     e64:	230c      	movs	r3, #12
     e66:	18fb      	adds	r3, r7, r3
     e68:	22ab      	movs	r2, #171	; 0xab
     e6a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     e6c:	230c      	movs	r3, #12
     e6e:	18fb      	adds	r3, r7, r3
     e70:	2201      	movs	r2, #1
     e72:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     e74:	230c      	movs	r3, #12
     e76:	18fb      	adds	r3, r7, r3
     e78:	2200      	movs	r2, #0
     e7a:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     e7c:	230c      	movs	r3, #12
     e7e:	18fb      	adds	r3, r7, r3
     e80:	2200      	movs	r2, #0
     e82:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     e84:	230c      	movs	r3, #12
     e86:	18fb      	adds	r3, r7, r3
     e88:	2200      	movs	r2, #0
     e8a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     e8c:	230c      	movs	r3, #12
     e8e:	18fb      	adds	r3, r7, r3
     e90:	6878      	ldr	r0, [r7, #4]
     e92:	466a      	mov	r2, sp
     e94:	68d9      	ldr	r1, [r3, #12]
     e96:	6011      	str	r1, [r2, #0]
     e98:	6819      	ldr	r1, [r3, #0]
     e9a:	685a      	ldr	r2, [r3, #4]
     e9c:	689b      	ldr	r3, [r3, #8]
     e9e:	4c07      	ldr	r4, [pc, #28]	; (ebc <at25dfx_chip_wake+0x84>)
     ea0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	681b      	ldr	r3, [r3, #0]
     ea6:	0018      	movs	r0, r3
     ea8:	4b05      	ldr	r3, [pc, #20]	; (ec0 <at25dfx_chip_wake+0x88>)
     eaa:	4798      	blx	r3

	return STATUS_OK;
     eac:	2300      	movs	r3, #0
     eae:	0018      	movs	r0, r3
     eb0:	46bd      	mov	sp, r7
     eb2:	b009      	add	sp, #36	; 0x24
     eb4:	bd90      	pop	{r4, r7, pc}
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	00000215 	.word	0x00000215
     ebc:	000005b1 	.word	0x000005b1
     ec0:	0000025d 	.word	0x0000025d

00000ec4 <_crc32_recalculate_bytes_helper>:
 *
 * \attention This implementation assumes a little-endian architecture.
 */
static inline crc32_t _crc32_recalculate_bytes_helper(word_t data,
		crc32_t crc, uint_fast8_t bytes)
{
     ec4:	b580      	push	{r7, lr}
     ec6:	b086      	sub	sp, #24
     ec8:	af00      	add	r7, sp, #0
     eca:	60f8      	str	r0, [r7, #12]
     ecc:	60b9      	str	r1, [r7, #8]
     ece:	607a      	str	r2, [r7, #4]
	uint_fast8_t bit;

	crc ^= data;
     ed0:	68ba      	ldr	r2, [r7, #8]
     ed2:	68fb      	ldr	r3, [r7, #12]
     ed4:	4053      	eors	r3, r2
     ed6:	60bb      	str	r3, [r7, #8]

	for (bit = 8 * bytes; bit > 0; bit--) {
     ed8:	687b      	ldr	r3, [r7, #4]
     eda:	00db      	lsls	r3, r3, #3
     edc:	617b      	str	r3, [r7, #20]
     ede:	e00f      	b.n	f00 <_crc32_recalculate_bytes_helper+0x3c>
		if (crc & 1) {
     ee0:	68bb      	ldr	r3, [r7, #8]
     ee2:	2201      	movs	r2, #1
     ee4:	4013      	ands	r3, r2
     ee6:	d005      	beq.n	ef4 <_crc32_recalculate_bytes_helper+0x30>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     ee8:	68bb      	ldr	r3, [r7, #8]
     eea:	085b      	lsrs	r3, r3, #1
     eec:	4a08      	ldr	r2, [pc, #32]	; (f10 <_crc32_recalculate_bytes_helper+0x4c>)
     eee:	4053      	eors	r3, r2
     ef0:	60bb      	str	r3, [r7, #8]
     ef2:	e002      	b.n	efa <_crc32_recalculate_bytes_helper+0x36>
		} else {
			crc >>= 1;
     ef4:	68bb      	ldr	r3, [r7, #8]
     ef6:	085b      	lsrs	r3, r3, #1
     ef8:	60bb      	str	r3, [r7, #8]
	for (bit = 8 * bytes; bit > 0; bit--) {
     efa:	697b      	ldr	r3, [r7, #20]
     efc:	3b01      	subs	r3, #1
     efe:	617b      	str	r3, [r7, #20]
     f00:	697b      	ldr	r3, [r7, #20]
     f02:	2b00      	cmp	r3, #0
     f04:	d1ec      	bne.n	ee0 <_crc32_recalculate_bytes_helper+0x1c>
		}
	}

	return crc;
     f06:	68bb      	ldr	r3, [r7, #8]
}
     f08:	0018      	movs	r0, r3
     f0a:	46bd      	mov	sp, r7
     f0c:	b006      	add	sp, #24
     f0e:	bd80      	pop	{r7, pc}
     f10:	edb88320 	.word	0xedb88320

00000f14 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
     f14:	b580      	push	{r7, lr}
     f16:	b088      	sub	sp, #32
     f18:	af00      	add	r7, sp, #0
     f1a:	60f8      	str	r0, [r7, #12]
     f1c:	60b9      	str	r1, [r7, #8]
     f1e:	607a      	str	r2, [r7, #4]
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
     f20:	68fb      	ldr	r3, [r7, #12]
     f22:	2203      	movs	r2, #3
     f24:	4393      	bics	r3, r2
	const word_t *word_ptr =
     f26:	61fb      	str	r3, [r7, #28]
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
     f28:	687b      	ldr	r3, [r7, #4]
     f2a:	681b      	ldr	r3, [r3, #0]
     f2c:	43db      	mvns	r3, r3
     f2e:	617b      	str	r3, [r7, #20]
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
     f30:	68bb      	ldr	r3, [r7, #8]
     f32:	2b03      	cmp	r3, #3
     f34:	d802      	bhi.n	f3c <crc32_recalculate+0x28>
		temp_length = length;
     f36:	68bb      	ldr	r3, [r7, #8]
     f38:	61bb      	str	r3, [r7, #24]
     f3a:	e004      	b.n	f46 <crc32_recalculate+0x32>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
     f3c:	68fb      	ldr	r3, [r7, #12]
     f3e:	425b      	negs	r3, r3
     f40:	2203      	movs	r2, #3
     f42:	4013      	ands	r3, r2
     f44:	61bb      	str	r3, [r7, #24]
	}

	if (temp_length) {
     f46:	69bb      	ldr	r3, [r7, #24]
     f48:	2b00      	cmp	r3, #0
     f4a:	d01a      	beq.n	f82 <crc32_recalculate+0x6e>
		length -= temp_length;
     f4c:	68ba      	ldr	r2, [r7, #8]
     f4e:	69bb      	ldr	r3, [r7, #24]
     f50:	1ad3      	subs	r3, r2, r3
     f52:	60bb      	str	r3, [r7, #8]

		word = *(word_ptr++);
     f54:	69fb      	ldr	r3, [r7, #28]
     f56:	1d1a      	adds	r2, r3, #4
     f58:	61fa      	str	r2, [r7, #28]
     f5a:	681b      	ldr	r3, [r3, #0]
     f5c:	613b      	str	r3, [r7, #16]
		word >>= 8 * (WORD_SIZE - temp_length);
     f5e:	69ba      	ldr	r2, [r7, #24]
     f60:	0013      	movs	r3, r2
     f62:	075b      	lsls	r3, r3, #29
     f64:	1a9b      	subs	r3, r3, r2
     f66:	00db      	lsls	r3, r3, #3
     f68:	3320      	adds	r3, #32
     f6a:	693a      	ldr	r2, [r7, #16]
     f6c:	40da      	lsrs	r2, r3
     f6e:	0013      	movs	r3, r2
     f70:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
     f72:	69ba      	ldr	r2, [r7, #24]
     f74:	6979      	ldr	r1, [r7, #20]
     f76:	693b      	ldr	r3, [r7, #16]
     f78:	0018      	movs	r0, r3
     f7a:	4b24      	ldr	r3, [pc, #144]	; (100c <crc32_recalculate+0xf8>)
     f7c:	4798      	blx	r3
     f7e:	0003      	movs	r3, r0
     f80:	617b      	str	r3, [r7, #20]
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
     f82:	68bb      	ldr	r3, [r7, #8]
     f84:	2203      	movs	r2, #3
     f86:	4393      	bics	r3, r2
     f88:	61bb      	str	r3, [r7, #24]

	if (temp_length) {
     f8a:	69bb      	ldr	r3, [r7, #24]
     f8c:	2b00      	cmp	r3, #0
     f8e:	d019      	beq.n	fc4 <crc32_recalculate+0xb0>
		length -= temp_length;
     f90:	68ba      	ldr	r2, [r7, #8]
     f92:	69bb      	ldr	r3, [r7, #24]
     f94:	1ad3      	subs	r3, r2, r3
     f96:	60bb      	str	r3, [r7, #8]
		temp_length /= WORD_SIZE;
     f98:	69bb      	ldr	r3, [r7, #24]
     f9a:	089b      	lsrs	r3, r3, #2
     f9c:	61bb      	str	r3, [r7, #24]

		while (temp_length--) {
     f9e:	e00c      	b.n	fba <crc32_recalculate+0xa6>
			word = *(word_ptr++);
     fa0:	69fb      	ldr	r3, [r7, #28]
     fa2:	1d1a      	adds	r2, r3, #4
     fa4:	61fa      	str	r2, [r7, #28]
     fa6:	681b      	ldr	r3, [r3, #0]
     fa8:	613b      	str	r3, [r7, #16]
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
     faa:	6979      	ldr	r1, [r7, #20]
     fac:	693b      	ldr	r3, [r7, #16]
     fae:	2204      	movs	r2, #4
     fb0:	0018      	movs	r0, r3
     fb2:	4b16      	ldr	r3, [pc, #88]	; (100c <crc32_recalculate+0xf8>)
     fb4:	4798      	blx	r3
     fb6:	0003      	movs	r3, r0
     fb8:	617b      	str	r3, [r7, #20]
		while (temp_length--) {
     fba:	69bb      	ldr	r3, [r7, #24]
     fbc:	1e5a      	subs	r2, r3, #1
     fbe:	61ba      	str	r2, [r7, #24]
     fc0:	2b00      	cmp	r3, #0
     fc2:	d1ed      	bne.n	fa0 <crc32_recalculate+0x8c>
		}
	}

	// Calculate for tailing bytes
	if (length) {
     fc4:	68bb      	ldr	r3, [r7, #8]
     fc6:	2b00      	cmp	r3, #0
     fc8:	d016      	beq.n	ff8 <crc32_recalculate+0xe4>
		word = *word_ptr;
     fca:	69fb      	ldr	r3, [r7, #28]
     fcc:	681b      	ldr	r3, [r3, #0]
     fce:	613b      	str	r3, [r7, #16]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
     fd0:	68ba      	ldr	r2, [r7, #8]
     fd2:	0013      	movs	r3, r2
     fd4:	075b      	lsls	r3, r3, #29
     fd6:	1a9b      	subs	r3, r3, r2
     fd8:	00db      	lsls	r3, r3, #3
     fda:	3320      	adds	r3, #32
     fdc:	2201      	movs	r2, #1
     fde:	4252      	negs	r2, r2
     fe0:	40da      	lsrs	r2, r3
     fe2:	693b      	ldr	r3, [r7, #16]
     fe4:	4013      	ands	r3, r2
     fe6:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
     fe8:	68ba      	ldr	r2, [r7, #8]
     fea:	6979      	ldr	r1, [r7, #20]
     fec:	693b      	ldr	r3, [r7, #16]
     fee:	0018      	movs	r0, r3
     ff0:	4b06      	ldr	r3, [pc, #24]	; (100c <crc32_recalculate+0xf8>)
     ff2:	4798      	blx	r3
     ff4:	0003      	movs	r3, r0
     ff6:	617b      	str	r3, [r7, #20]
	}

	*crc = COMPLEMENT_CRC(temp_crc);
     ff8:	697b      	ldr	r3, [r7, #20]
     ffa:	43da      	mvns	r2, r3
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    1000:	2300      	movs	r3, #0
    1002:	0018      	movs	r0, r3
    1004:	46bd      	mov	sp, r7
    1006:	b008      	add	sp, #32
    1008:	bd80      	pop	{r7, pc}
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	00000ec5 	.word	0x00000ec5

00001010 <system_pinmux_get_config_defaults>:
{
    1010:	b580      	push	{r7, lr}
    1012:	b082      	sub	sp, #8
    1014:	af00      	add	r7, sp, #0
    1016:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1018:	687b      	ldr	r3, [r7, #4]
    101a:	2280      	movs	r2, #128	; 0x80
    101c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	2200      	movs	r2, #0
    1022:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1024:	687b      	ldr	r3, [r7, #4]
    1026:	2201      	movs	r2, #1
    1028:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    102a:	687b      	ldr	r3, [r7, #4]
    102c:	2200      	movs	r2, #0
    102e:	70da      	strb	r2, [r3, #3]
}
    1030:	46c0      	nop			; (mov r8, r8)
    1032:	46bd      	mov	sp, r7
    1034:	b002      	add	sp, #8
    1036:	bd80      	pop	{r7, pc}

00001038 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1038:	b580      	push	{r7, lr}
    103a:	b082      	sub	sp, #8
    103c:	af00      	add	r7, sp, #0
    103e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1040:	687b      	ldr	r3, [r7, #4]
    1042:	2200      	movs	r2, #0
    1044:	701a      	strb	r2, [r3, #0]
}
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	46bd      	mov	sp, r7
    104a:	b002      	add	sp, #8
    104c:	bd80      	pop	{r7, pc}
	...

00001050 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1050:	b580      	push	{r7, lr}
    1052:	b082      	sub	sp, #8
    1054:	af00      	add	r7, sp, #0
    1056:	0002      	movs	r2, r0
    1058:	6039      	str	r1, [r7, #0]
    105a:	1dfb      	adds	r3, r7, #7
    105c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    105e:	1dfb      	adds	r3, r7, #7
    1060:	781b      	ldrb	r3, [r3, #0]
    1062:	2b01      	cmp	r3, #1
    1064:	d00a      	beq.n	107c <system_apb_clock_set_mask+0x2c>
    1066:	2b02      	cmp	r3, #2
    1068:	d00f      	beq.n	108a <system_apb_clock_set_mask+0x3a>
    106a:	2b00      	cmp	r3, #0
    106c:	d114      	bne.n	1098 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    106e:	4b0e      	ldr	r3, [pc, #56]	; (10a8 <system_apb_clock_set_mask+0x58>)
    1070:	4a0d      	ldr	r2, [pc, #52]	; (10a8 <system_apb_clock_set_mask+0x58>)
    1072:	6991      	ldr	r1, [r2, #24]
    1074:	683a      	ldr	r2, [r7, #0]
    1076:	430a      	orrs	r2, r1
    1078:	619a      	str	r2, [r3, #24]
			break;
    107a:	e00f      	b.n	109c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    107c:	4b0a      	ldr	r3, [pc, #40]	; (10a8 <system_apb_clock_set_mask+0x58>)
    107e:	4a0a      	ldr	r2, [pc, #40]	; (10a8 <system_apb_clock_set_mask+0x58>)
    1080:	69d1      	ldr	r1, [r2, #28]
    1082:	683a      	ldr	r2, [r7, #0]
    1084:	430a      	orrs	r2, r1
    1086:	61da      	str	r2, [r3, #28]
			break;
    1088:	e008      	b.n	109c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    108a:	4b07      	ldr	r3, [pc, #28]	; (10a8 <system_apb_clock_set_mask+0x58>)
    108c:	4a06      	ldr	r2, [pc, #24]	; (10a8 <system_apb_clock_set_mask+0x58>)
    108e:	6a11      	ldr	r1, [r2, #32]
    1090:	683a      	ldr	r2, [r7, #0]
    1092:	430a      	orrs	r2, r1
    1094:	621a      	str	r2, [r3, #32]
			break;
    1096:	e001      	b.n	109c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1098:	2317      	movs	r3, #23
    109a:	e000      	b.n	109e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    109c:	2300      	movs	r3, #0
}
    109e:	0018      	movs	r0, r3
    10a0:	46bd      	mov	sp, r7
    10a2:	b002      	add	sp, #8
    10a4:	bd80      	pop	{r7, pc}
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	40000400 	.word	0x40000400

000010ac <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    10ac:	b580      	push	{r7, lr}
    10ae:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    10b0:	4b05      	ldr	r3, [pc, #20]	; (10c8 <system_is_debugger_present+0x1c>)
    10b2:	789b      	ldrb	r3, [r3, #2]
    10b4:	b2db      	uxtb	r3, r3
    10b6:	001a      	movs	r2, r3
    10b8:	2302      	movs	r3, #2
    10ba:	4013      	ands	r3, r2
    10bc:	1e5a      	subs	r2, r3, #1
    10be:	4193      	sbcs	r3, r2
    10c0:	b2db      	uxtb	r3, r3
}
    10c2:	0018      	movs	r0, r3
    10c4:	46bd      	mov	sp, r7
    10c6:	bd80      	pop	{r7, pc}
    10c8:	41002000 	.word	0x41002000

000010cc <spi_is_write_complete>:
{
    10cc:	b580      	push	{r7, lr}
    10ce:	b084      	sub	sp, #16
    10d0:	af00      	add	r7, sp, #0
    10d2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    10d4:	687b      	ldr	r3, [r7, #4]
    10d6:	681b      	ldr	r3, [r3, #0]
    10d8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    10da:	68fb      	ldr	r3, [r7, #12]
    10dc:	7e1b      	ldrb	r3, [r3, #24]
    10de:	b2db      	uxtb	r3, r3
    10e0:	001a      	movs	r2, r3
    10e2:	2302      	movs	r3, #2
    10e4:	4013      	ands	r3, r2
    10e6:	1e5a      	subs	r2, r3, #1
    10e8:	4193      	sbcs	r3, r2
    10ea:	b2db      	uxtb	r3, r3
}
    10ec:	0018      	movs	r0, r3
    10ee:	46bd      	mov	sp, r7
    10f0:	b004      	add	sp, #16
    10f2:	bd80      	pop	{r7, pc}

000010f4 <spi_is_ready_to_write>:
{
    10f4:	b580      	push	{r7, lr}
    10f6:	b084      	sub	sp, #16
    10f8:	af00      	add	r7, sp, #0
    10fa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    10fc:	687b      	ldr	r3, [r7, #4]
    10fe:	681b      	ldr	r3, [r3, #0]
    1100:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1102:	68fb      	ldr	r3, [r7, #12]
    1104:	7e1b      	ldrb	r3, [r3, #24]
    1106:	b2db      	uxtb	r3, r3
    1108:	001a      	movs	r2, r3
    110a:	2301      	movs	r3, #1
    110c:	4013      	ands	r3, r2
    110e:	1e5a      	subs	r2, r3, #1
    1110:	4193      	sbcs	r3, r2
    1112:	b2db      	uxtb	r3, r3
}
    1114:	0018      	movs	r0, r3
    1116:	46bd      	mov	sp, r7
    1118:	b004      	add	sp, #16
    111a:	bd80      	pop	{r7, pc}

0000111c <spi_is_ready_to_read>:
{
    111c:	b580      	push	{r7, lr}
    111e:	b084      	sub	sp, #16
    1120:	af00      	add	r7, sp, #0
    1122:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1124:	687b      	ldr	r3, [r7, #4]
    1126:	681b      	ldr	r3, [r3, #0]
    1128:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    112a:	68fb      	ldr	r3, [r7, #12]
    112c:	7e1b      	ldrb	r3, [r3, #24]
    112e:	b2db      	uxtb	r3, r3
    1130:	001a      	movs	r2, r3
    1132:	2304      	movs	r3, #4
    1134:	4013      	ands	r3, r2
    1136:	1e5a      	subs	r2, r3, #1
    1138:	4193      	sbcs	r3, r2
    113a:	b2db      	uxtb	r3, r3
}
    113c:	0018      	movs	r0, r3
    113e:	46bd      	mov	sp, r7
    1140:	b004      	add	sp, #16
    1142:	bd80      	pop	{r7, pc}

00001144 <spi_write>:
{
    1144:	b580      	push	{r7, lr}
    1146:	b084      	sub	sp, #16
    1148:	af00      	add	r7, sp, #0
    114a:	6078      	str	r0, [r7, #4]
    114c:	000a      	movs	r2, r1
    114e:	1cbb      	adds	r3, r7, #2
    1150:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1152:	687b      	ldr	r3, [r7, #4]
    1154:	681b      	ldr	r3, [r3, #0]
    1156:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    1158:	687b      	ldr	r3, [r7, #4]
    115a:	0018      	movs	r0, r3
    115c:	4b0a      	ldr	r3, [pc, #40]	; (1188 <spi_write+0x44>)
    115e:	4798      	blx	r3
    1160:	0003      	movs	r3, r0
    1162:	001a      	movs	r2, r3
    1164:	2301      	movs	r3, #1
    1166:	4053      	eors	r3, r2
    1168:	b2db      	uxtb	r3, r3
    116a:	2b00      	cmp	r3, #0
    116c:	d001      	beq.n	1172 <spi_write+0x2e>
		return STATUS_BUSY;
    116e:	2305      	movs	r3, #5
    1170:	e006      	b.n	1180 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1172:	1cbb      	adds	r3, r7, #2
    1174:	881b      	ldrh	r3, [r3, #0]
    1176:	05db      	lsls	r3, r3, #23
    1178:	0dda      	lsrs	r2, r3, #23
    117a:	68fb      	ldr	r3, [r7, #12]
    117c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    117e:	2300      	movs	r3, #0
}
    1180:	0018      	movs	r0, r3
    1182:	46bd      	mov	sp, r7
    1184:	b004      	add	sp, #16
    1186:	bd80      	pop	{r7, pc}
    1188:	000010f5 	.word	0x000010f5

0000118c <spi_read>:
{
    118c:	b580      	push	{r7, lr}
    118e:	b084      	sub	sp, #16
    1190:	af00      	add	r7, sp, #0
    1192:	6078      	str	r0, [r7, #4]
    1194:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1196:	687b      	ldr	r3, [r7, #4]
    1198:	681b      	ldr	r3, [r3, #0]
    119a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    119c:	687b      	ldr	r3, [r7, #4]
    119e:	0018      	movs	r0, r3
    11a0:	4b1b      	ldr	r3, [pc, #108]	; (1210 <spi_read+0x84>)
    11a2:	4798      	blx	r3
    11a4:	0003      	movs	r3, r0
    11a6:	001a      	movs	r2, r3
    11a8:	2301      	movs	r3, #1
    11aa:	4053      	eors	r3, r2
    11ac:	b2db      	uxtb	r3, r3
    11ae:	2b00      	cmp	r3, #0
    11b0:	d001      	beq.n	11b6 <spi_read+0x2a>
		return STATUS_ERR_IO;
    11b2:	2310      	movs	r3, #16
    11b4:	e027      	b.n	1206 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    11b6:	230f      	movs	r3, #15
    11b8:	18fb      	adds	r3, r7, r3
    11ba:	2200      	movs	r2, #0
    11bc:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    11be:	68bb      	ldr	r3, [r7, #8]
    11c0:	8b5b      	ldrh	r3, [r3, #26]
    11c2:	b29b      	uxth	r3, r3
    11c4:	001a      	movs	r2, r3
    11c6:	2304      	movs	r3, #4
    11c8:	4013      	ands	r3, r2
    11ca:	d006      	beq.n	11da <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    11cc:	230f      	movs	r3, #15
    11ce:	18fb      	adds	r3, r7, r3
    11d0:	221e      	movs	r2, #30
    11d2:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    11d4:	68bb      	ldr	r3, [r7, #8]
    11d6:	2204      	movs	r2, #4
    11d8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11da:	687b      	ldr	r3, [r7, #4]
    11dc:	799b      	ldrb	r3, [r3, #6]
    11de:	2b01      	cmp	r3, #1
    11e0:	d108      	bne.n	11f4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    11e2:	68bb      	ldr	r3, [r7, #8]
    11e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    11e6:	b29b      	uxth	r3, r3
    11e8:	05db      	lsls	r3, r3, #23
    11ea:	0ddb      	lsrs	r3, r3, #23
    11ec:	b29a      	uxth	r2, r3
    11ee:	683b      	ldr	r3, [r7, #0]
    11f0:	801a      	strh	r2, [r3, #0]
    11f2:	e005      	b.n	1200 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    11f4:	68bb      	ldr	r3, [r7, #8]
    11f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    11f8:	b2db      	uxtb	r3, r3
    11fa:	b29a      	uxth	r2, r3
    11fc:	683b      	ldr	r3, [r7, #0]
    11fe:	801a      	strh	r2, [r3, #0]
	return retval;
    1200:	230f      	movs	r3, #15
    1202:	18fb      	adds	r3, r7, r3
    1204:	781b      	ldrb	r3, [r3, #0]
}
    1206:	0018      	movs	r0, r3
    1208:	46bd      	mov	sp, r7
    120a:	b004      	add	sp, #16
    120c:	bd80      	pop	{r7, pc}
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	0000111d 	.word	0x0000111d

00001214 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
    1214:	b580      	push	{r7, lr}
    1216:	b084      	sub	sp, #16
    1218:	af00      	add	r7, sp, #0
    121a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    121c:	687b      	ldr	r3, [r7, #4]
    121e:	681b      	ldr	r3, [r3, #0]
    1220:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1222:	68fb      	ldr	r3, [r7, #12]
    1224:	2202      	movs	r2, #2
    1226:	761a      	strb	r2, [r3, #24]
}
    1228:	46c0      	nop			; (mov r8, r8)
    122a:	46bd      	mov	sp, r7
    122c:	b004      	add	sp, #16
    122e:	bd80      	pop	{r7, pc}

00001230 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    1230:	b590      	push	{r4, r7, lr}
    1232:	b093      	sub	sp, #76	; 0x4c
    1234:	af00      	add	r7, sp, #0
    1236:	6078      	str	r0, [r7, #4]
    1238:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    123a:	687b      	ldr	r3, [r7, #4]
    123c:	681b      	ldr	r3, [r3, #0]
    123e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    1240:	687b      	ldr	r3, [r7, #4]
    1242:	681b      	ldr	r3, [r3, #0]
    1244:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1246:	231c      	movs	r3, #28
    1248:	18fb      	adds	r3, r7, r3
    124a:	0018      	movs	r0, r3
    124c:	4b85      	ldr	r3, [pc, #532]	; (1464 <_spi_set_config+0x234>)
    124e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1250:	231c      	movs	r3, #28
    1252:	18fb      	adds	r3, r7, r3
    1254:	2200      	movs	r2, #0
    1256:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    1258:	683b      	ldr	r3, [r7, #0]
    125a:	781b      	ldrb	r3, [r3, #0]
    125c:	2b00      	cmp	r3, #0
    125e:	d103      	bne.n	1268 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1260:	231c      	movs	r3, #28
    1262:	18fb      	adds	r3, r7, r3
    1264:	2200      	movs	r2, #0
    1266:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1268:	683b      	ldr	r3, [r7, #0]
    126a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    126c:	230c      	movs	r3, #12
    126e:	18fb      	adds	r3, r7, r3
    1270:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    1272:	683b      	ldr	r3, [r7, #0]
    1274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    1276:	230c      	movs	r3, #12
    1278:	18fb      	adds	r3, r7, r3
    127a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    127c:	683b      	ldr	r3, [r7, #0]
    127e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    1280:	230c      	movs	r3, #12
    1282:	18fb      	adds	r3, r7, r3
    1284:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    1286:	683b      	ldr	r3, [r7, #0]
    1288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    128a:	230c      	movs	r3, #12
    128c:	18fb      	adds	r3, r7, r3
    128e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1290:	2347      	movs	r3, #71	; 0x47
    1292:	18fb      	adds	r3, r7, r3
    1294:	2200      	movs	r2, #0
    1296:	701a      	strb	r2, [r3, #0]
    1298:	e02c      	b.n	12f4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    129a:	2347      	movs	r3, #71	; 0x47
    129c:	18fb      	adds	r3, r7, r3
    129e:	781a      	ldrb	r2, [r3, #0]
    12a0:	230c      	movs	r3, #12
    12a2:	18fb      	adds	r3, r7, r3
    12a4:	0092      	lsls	r2, r2, #2
    12a6:	58d3      	ldr	r3, [r2, r3]
    12a8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    12aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12ac:	2b00      	cmp	r3, #0
    12ae:	d109      	bne.n	12c4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    12b0:	2347      	movs	r3, #71	; 0x47
    12b2:	18fb      	adds	r3, r7, r3
    12b4:	781a      	ldrb	r2, [r3, #0]
    12b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    12b8:	0011      	movs	r1, r2
    12ba:	0018      	movs	r0, r3
    12bc:	4b6a      	ldr	r3, [pc, #424]	; (1468 <_spi_set_config+0x238>)
    12be:	4798      	blx	r3
    12c0:	0003      	movs	r3, r0
    12c2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    12c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12c6:	3301      	adds	r3, #1
    12c8:	d00d      	beq.n	12e6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    12ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12cc:	b2da      	uxtb	r2, r3
    12ce:	231c      	movs	r3, #28
    12d0:	18fb      	adds	r3, r7, r3
    12d2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    12d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12d6:	0c1b      	lsrs	r3, r3, #16
    12d8:	b2db      	uxtb	r3, r3
    12da:	221c      	movs	r2, #28
    12dc:	18ba      	adds	r2, r7, r2
    12de:	0011      	movs	r1, r2
    12e0:	0018      	movs	r0, r3
    12e2:	4b62      	ldr	r3, [pc, #392]	; (146c <_spi_set_config+0x23c>)
    12e4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    12e6:	2347      	movs	r3, #71	; 0x47
    12e8:	18fb      	adds	r3, r7, r3
    12ea:	781a      	ldrb	r2, [r3, #0]
    12ec:	2347      	movs	r3, #71	; 0x47
    12ee:	18fb      	adds	r3, r7, r3
    12f0:	3201      	adds	r2, #1
    12f2:	701a      	strb	r2, [r3, #0]
    12f4:	2347      	movs	r3, #71	; 0x47
    12f6:	18fb      	adds	r3, r7, r3
    12f8:	781b      	ldrb	r3, [r3, #0]
    12fa:	2b03      	cmp	r3, #3
    12fc:	d9cd      	bls.n	129a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    12fe:	683b      	ldr	r3, [r7, #0]
    1300:	781a      	ldrb	r2, [r3, #0]
    1302:	687b      	ldr	r3, [r7, #4]
    1304:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    1306:	683b      	ldr	r3, [r7, #0]
    1308:	7c1a      	ldrb	r2, [r3, #16]
    130a:	687b      	ldr	r3, [r7, #4]
    130c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    130e:	683b      	ldr	r3, [r7, #0]
    1310:	7c9a      	ldrb	r2, [r3, #18]
    1312:	687b      	ldr	r3, [r7, #4]
    1314:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    1316:	683b      	ldr	r3, [r7, #0]
    1318:	7d1a      	ldrb	r2, [r3, #20]
    131a:	687b      	ldr	r3, [r7, #4]
    131c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    131e:	230a      	movs	r3, #10
    1320:	18fb      	adds	r3, r7, r3
    1322:	2200      	movs	r2, #0
    1324:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    1326:	2300      	movs	r3, #0
    1328:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    132a:	2300      	movs	r3, #0
    132c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    132e:	683b      	ldr	r3, [r7, #0]
    1330:	781b      	ldrb	r3, [r3, #0]
    1332:	2b01      	cmp	r3, #1
    1334:	d129      	bne.n	138a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1336:	687b      	ldr	r3, [r7, #4]
    1338:	681b      	ldr	r3, [r3, #0]
    133a:	0018      	movs	r0, r3
    133c:	4b4c      	ldr	r3, [pc, #304]	; (1470 <_spi_set_config+0x240>)
    133e:	4798      	blx	r3
    1340:	0003      	movs	r3, r0
    1342:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1346:	3314      	adds	r3, #20
    1348:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    134c:	b2db      	uxtb	r3, r3
    134e:	0018      	movs	r0, r3
    1350:	4b48      	ldr	r3, [pc, #288]	; (1474 <_spi_set_config+0x244>)
    1352:	4798      	blx	r3
    1354:	0003      	movs	r3, r0
    1356:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    1358:	683b      	ldr	r3, [r7, #0]
    135a:	699b      	ldr	r3, [r3, #24]
    135c:	2223      	movs	r2, #35	; 0x23
    135e:	18bc      	adds	r4, r7, r2
    1360:	220a      	movs	r2, #10
    1362:	18ba      	adds	r2, r7, r2
    1364:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1366:	0018      	movs	r0, r3
    1368:	4b43      	ldr	r3, [pc, #268]	; (1478 <_spi_set_config+0x248>)
    136a:	4798      	blx	r3
    136c:	0003      	movs	r3, r0
    136e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    1370:	2323      	movs	r3, #35	; 0x23
    1372:	18fb      	adds	r3, r7, r3
    1374:	781b      	ldrb	r3, [r3, #0]
    1376:	2b00      	cmp	r3, #0
    1378:	d001      	beq.n	137e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    137a:	2317      	movs	r3, #23
    137c:	e06d      	b.n	145a <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    137e:	230a      	movs	r3, #10
    1380:	18fb      	adds	r3, r7, r3
    1382:	881b      	ldrh	r3, [r3, #0]
    1384:	b2da      	uxtb	r2, r3
    1386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1388:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    138a:	683b      	ldr	r3, [r7, #0]
    138c:	781b      	ldrb	r3, [r3, #0]
    138e:	2b00      	cmp	r3, #0
    1390:	d11a      	bne.n	13c8 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    1392:	683b      	ldr	r3, [r7, #0]
    1394:	699b      	ldr	r3, [r3, #24]
    1396:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    1398:	683b      	ldr	r3, [r7, #0]
    139a:	8b9b      	ldrh	r3, [r3, #28]
    139c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    139e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    13a2:	683a      	ldr	r2, [r7, #0]
    13a4:	7f92      	ldrb	r2, [r2, #30]
    13a6:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    13a8:	683a      	ldr	r2, [r7, #0]
    13aa:	7fd2      	ldrb	r2, [r2, #31]
    13ac:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    13ae:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    13b0:	431a      	orrs	r2, r3
    13b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13b4:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    13b6:	683b      	ldr	r3, [r7, #0]
    13b8:	2220      	movs	r2, #32
    13ba:	5c9b      	ldrb	r3, [r3, r2]
    13bc:	2b00      	cmp	r3, #0
    13be:	d003      	beq.n	13c8 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    13c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13c2:	2240      	movs	r2, #64	; 0x40
    13c4:	4313      	orrs	r3, r2
    13c6:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    13c8:	683b      	ldr	r3, [r7, #0]
    13ca:	685b      	ldr	r3, [r3, #4]
    13cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13ce:	4313      	orrs	r3, r2
    13d0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    13d2:	683b      	ldr	r3, [r7, #0]
    13d4:	689b      	ldr	r3, [r3, #8]
    13d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13d8:	4313      	orrs	r3, r2
    13da:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    13dc:	683b      	ldr	r3, [r7, #0]
    13de:	68db      	ldr	r3, [r3, #12]
    13e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    13e2:	4313      	orrs	r3, r2
    13e4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    13e6:	683b      	ldr	r3, [r7, #0]
    13e8:	7c1b      	ldrb	r3, [r3, #16]
    13ea:	001a      	movs	r2, r3
    13ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13ee:	4313      	orrs	r3, r2
    13f0:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    13f2:	683b      	ldr	r3, [r7, #0]
    13f4:	7c5b      	ldrb	r3, [r3, #17]
    13f6:	2b00      	cmp	r3, #0
    13f8:	d103      	bne.n	1402 <_spi_set_config+0x1d2>
    13fa:	4b20      	ldr	r3, [pc, #128]	; (147c <_spi_set_config+0x24c>)
    13fc:	4798      	blx	r3
    13fe:	1e03      	subs	r3, r0, #0
    1400:	d003      	beq.n	140a <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1404:	2280      	movs	r2, #128	; 0x80
    1406:	4313      	orrs	r3, r2
    1408:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    140a:	683b      	ldr	r3, [r7, #0]
    140c:	7c9b      	ldrb	r3, [r3, #18]
    140e:	2b00      	cmp	r3, #0
    1410:	d004      	beq.n	141c <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1414:	2280      	movs	r2, #128	; 0x80
    1416:	0292      	lsls	r2, r2, #10
    1418:	4313      	orrs	r3, r2
    141a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    141c:	683b      	ldr	r3, [r7, #0]
    141e:	7cdb      	ldrb	r3, [r3, #19]
    1420:	2b00      	cmp	r3, #0
    1422:	d004      	beq.n	142e <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1426:	2280      	movs	r2, #128	; 0x80
    1428:	0092      	lsls	r2, r2, #2
    142a:	4313      	orrs	r3, r2
    142c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    142e:	683b      	ldr	r3, [r7, #0]
    1430:	7d1b      	ldrb	r3, [r3, #20]
    1432:	2b00      	cmp	r3, #0
    1434:	d004      	beq.n	1440 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1438:	2280      	movs	r2, #128	; 0x80
    143a:	0192      	lsls	r2, r2, #6
    143c:	4313      	orrs	r3, r2
    143e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1442:	681a      	ldr	r2, [r3, #0]
    1444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1446:	431a      	orrs	r2, r3
    1448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    144a:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    144c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    144e:	685a      	ldr	r2, [r3, #4]
    1450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1452:	431a      	orrs	r2, r3
    1454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1456:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    1458:	2300      	movs	r3, #0
}
    145a:	0018      	movs	r0, r3
    145c:	46bd      	mov	sp, r7
    145e:	b013      	add	sp, #76	; 0x4c
    1460:	bd90      	pop	{r4, r7, pc}
    1462:	46c0      	nop			; (mov r8, r8)
    1464:	00001011 	.word	0x00001011
    1468:	00004759 	.word	0x00004759
    146c:	00006a61 	.word	0x00006a61
    1470:	00004915 	.word	0x00004915
    1474:	00006899 	.word	0x00006899
    1478:	0000448f 	.word	0x0000448f
    147c:	000010ad 	.word	0x000010ad

00001480 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1480:	b590      	push	{r4, r7, lr}
    1482:	b08b      	sub	sp, #44	; 0x2c
    1484:	af00      	add	r7, sp, #0
    1486:	60f8      	str	r0, [r7, #12]
    1488:	60b9      	str	r1, [r7, #8]
    148a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    148c:	68fb      	ldr	r3, [r7, #12]
    148e:	68ba      	ldr	r2, [r7, #8]
    1490:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1492:	68fb      	ldr	r3, [r7, #12]
    1494:	681b      	ldr	r3, [r3, #0]
    1496:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1498:	6a3b      	ldr	r3, [r7, #32]
    149a:	681b      	ldr	r3, [r3, #0]
    149c:	2202      	movs	r2, #2
    149e:	4013      	ands	r3, r2
    14a0:	d001      	beq.n	14a6 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    14a2:	231c      	movs	r3, #28
    14a4:	e0a6      	b.n	15f4 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    14a6:	6a3b      	ldr	r3, [r7, #32]
    14a8:	681b      	ldr	r3, [r3, #0]
    14aa:	2201      	movs	r2, #1
    14ac:	4013      	ands	r3, r2
    14ae:	d001      	beq.n	14b4 <spi_init+0x34>
		return STATUS_BUSY;
    14b0:	2305      	movs	r3, #5
    14b2:	e09f      	b.n	15f4 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14b4:	68fb      	ldr	r3, [r7, #12]
    14b6:	681b      	ldr	r3, [r3, #0]
    14b8:	0018      	movs	r0, r3
    14ba:	4b50      	ldr	r3, [pc, #320]	; (15fc <spi_init+0x17c>)
    14bc:	4798      	blx	r3
    14be:	0003      	movs	r3, r0
    14c0:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    14c2:	69fb      	ldr	r3, [r7, #28]
    14c4:	3302      	adds	r3, #2
    14c6:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14c8:	69fb      	ldr	r3, [r7, #28]
    14ca:	3314      	adds	r3, #20
    14cc:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    14ce:	2201      	movs	r2, #1
    14d0:	69bb      	ldr	r3, [r7, #24]
    14d2:	409a      	lsls	r2, r3
    14d4:	0013      	movs	r3, r2
    14d6:	0019      	movs	r1, r3
    14d8:	2002      	movs	r0, #2
    14da:	4b49      	ldr	r3, [pc, #292]	; (1600 <spi_init+0x180>)
    14dc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    14de:	2310      	movs	r3, #16
    14e0:	18fb      	adds	r3, r7, r3
    14e2:	0018      	movs	r0, r3
    14e4:	4b47      	ldr	r3, [pc, #284]	; (1604 <spi_init+0x184>)
    14e6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    14e8:	687b      	ldr	r3, [r7, #4]
    14ea:	2224      	movs	r2, #36	; 0x24
    14ec:	5c9a      	ldrb	r2, [r3, r2]
    14ee:	2310      	movs	r3, #16
    14f0:	18fb      	adds	r3, r7, r3
    14f2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    14f4:	697b      	ldr	r3, [r7, #20]
    14f6:	b2db      	uxtb	r3, r3
    14f8:	2210      	movs	r2, #16
    14fa:	18ba      	adds	r2, r7, r2
    14fc:	0011      	movs	r1, r2
    14fe:	0018      	movs	r0, r3
    1500:	4b41      	ldr	r3, [pc, #260]	; (1608 <spi_init+0x188>)
    1502:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1504:	697b      	ldr	r3, [r7, #20]
    1506:	b2db      	uxtb	r3, r3
    1508:	0018      	movs	r0, r3
    150a:	4b40      	ldr	r3, [pc, #256]	; (160c <spi_init+0x18c>)
    150c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    150e:	687b      	ldr	r3, [r7, #4]
    1510:	2224      	movs	r2, #36	; 0x24
    1512:	5c9b      	ldrb	r3, [r3, r2]
    1514:	2100      	movs	r1, #0
    1516:	0018      	movs	r0, r3
    1518:	4b3d      	ldr	r3, [pc, #244]	; (1610 <spi_init+0x190>)
    151a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    151c:	687b      	ldr	r3, [r7, #4]
    151e:	781b      	ldrb	r3, [r3, #0]
    1520:	2b01      	cmp	r3, #1
    1522:	d105      	bne.n	1530 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1524:	6a3b      	ldr	r3, [r7, #32]
    1526:	681b      	ldr	r3, [r3, #0]
    1528:	220c      	movs	r2, #12
    152a:	431a      	orrs	r2, r3
    152c:	6a3b      	ldr	r3, [r7, #32]
    152e:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1530:	687b      	ldr	r3, [r7, #4]
    1532:	781b      	ldrb	r3, [r3, #0]
    1534:	2b00      	cmp	r3, #0
    1536:	d105      	bne.n	1544 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1538:	6a3b      	ldr	r3, [r7, #32]
    153a:	681b      	ldr	r3, [r3, #0]
    153c:	2208      	movs	r2, #8
    153e:	431a      	orrs	r2, r3
    1540:	6a3b      	ldr	r3, [r7, #32]
    1542:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1544:	2327      	movs	r3, #39	; 0x27
    1546:	18fb      	adds	r3, r7, r3
    1548:	2200      	movs	r2, #0
    154a:	701a      	strb	r2, [r3, #0]
    154c:	e010      	b.n	1570 <spi_init+0xf0>
		module->callback[i]        = NULL;
    154e:	2327      	movs	r3, #39	; 0x27
    1550:	18fb      	adds	r3, r7, r3
    1552:	781b      	ldrb	r3, [r3, #0]
    1554:	68fa      	ldr	r2, [r7, #12]
    1556:	3302      	adds	r3, #2
    1558:	009b      	lsls	r3, r3, #2
    155a:	18d3      	adds	r3, r2, r3
    155c:	3304      	adds	r3, #4
    155e:	2200      	movs	r2, #0
    1560:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1562:	2327      	movs	r3, #39	; 0x27
    1564:	18fb      	adds	r3, r7, r3
    1566:	781a      	ldrb	r2, [r3, #0]
    1568:	2327      	movs	r3, #39	; 0x27
    156a:	18fb      	adds	r3, r7, r3
    156c:	3201      	adds	r2, #1
    156e:	701a      	strb	r2, [r3, #0]
    1570:	2327      	movs	r3, #39	; 0x27
    1572:	18fb      	adds	r3, r7, r3
    1574:	781b      	ldrb	r3, [r3, #0]
    1576:	2b06      	cmp	r3, #6
    1578:	d9e9      	bls.n	154e <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
    157a:	68fb      	ldr	r3, [r7, #12]
    157c:	2200      	movs	r2, #0
    157e:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1580:	68fb      	ldr	r3, [r7, #12]
    1582:	2200      	movs	r2, #0
    1584:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1586:	68fb      	ldr	r3, [r7, #12]
    1588:	2200      	movs	r2, #0
    158a:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    158c:	68fb      	ldr	r3, [r7, #12]
    158e:	2200      	movs	r2, #0
    1590:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    1592:	68fb      	ldr	r3, [r7, #12]
    1594:	2236      	movs	r2, #54	; 0x36
    1596:	2100      	movs	r1, #0
    1598:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    159a:	68fb      	ldr	r3, [r7, #12]
    159c:	2237      	movs	r2, #55	; 0x37
    159e:	2100      	movs	r1, #0
    15a0:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    15a2:	68fb      	ldr	r3, [r7, #12]
    15a4:	2238      	movs	r2, #56	; 0x38
    15a6:	2100      	movs	r1, #0
    15a8:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    15aa:	68fb      	ldr	r3, [r7, #12]
    15ac:	2203      	movs	r2, #3
    15ae:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    15b0:	68fb      	ldr	r3, [r7, #12]
    15b2:	2200      	movs	r2, #0
    15b4:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    15b6:	68fb      	ldr	r3, [r7, #12]
    15b8:	681b      	ldr	r3, [r3, #0]
    15ba:	2213      	movs	r2, #19
    15bc:	18bc      	adds	r4, r7, r2
    15be:	0018      	movs	r0, r3
    15c0:	4b0e      	ldr	r3, [pc, #56]	; (15fc <spi_init+0x17c>)
    15c2:	4798      	blx	r3
    15c4:	0003      	movs	r3, r0
    15c6:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    15c8:	4a12      	ldr	r2, [pc, #72]	; (1614 <spi_init+0x194>)
    15ca:	2313      	movs	r3, #19
    15cc:	18fb      	adds	r3, r7, r3
    15ce:	781b      	ldrb	r3, [r3, #0]
    15d0:	0011      	movs	r1, r2
    15d2:	0018      	movs	r0, r3
    15d4:	4b10      	ldr	r3, [pc, #64]	; (1618 <spi_init+0x198>)
    15d6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    15d8:	2313      	movs	r3, #19
    15da:	18fb      	adds	r3, r7, r3
    15dc:	781a      	ldrb	r2, [r3, #0]
    15de:	4b0f      	ldr	r3, [pc, #60]	; (161c <spi_init+0x19c>)
    15e0:	0092      	lsls	r2, r2, #2
    15e2:	68f9      	ldr	r1, [r7, #12]
    15e4:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    15e6:	687a      	ldr	r2, [r7, #4]
    15e8:	68fb      	ldr	r3, [r7, #12]
    15ea:	0011      	movs	r1, r2
    15ec:	0018      	movs	r0, r3
    15ee:	4b0c      	ldr	r3, [pc, #48]	; (1620 <spi_init+0x1a0>)
    15f0:	4798      	blx	r3
    15f2:	0003      	movs	r3, r0
}
    15f4:	0018      	movs	r0, r3
    15f6:	46bd      	mov	sp, r7
    15f8:	b00b      	add	sp, #44	; 0x2c
    15fa:	bd90      	pop	{r4, r7, pc}
    15fc:	00004915 	.word	0x00004915
    1600:	00001051 	.word	0x00001051
    1604:	00001039 	.word	0x00001039
    1608:	00006775 	.word	0x00006775
    160c:	000067b9 	.word	0x000067b9
    1610:	000046cd 	.word	0x000046cd
    1614:	00001c5d 	.word	0x00001c5d
    1618:	00005791 	.word	0x00005791
    161c:	200003bc 	.word	0x200003bc
    1620:	00001231 	.word	0x00001231

00001624 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1624:	b590      	push	{r4, r7, lr}
    1626:	b089      	sub	sp, #36	; 0x24
    1628:	af00      	add	r7, sp, #0
    162a:	60f8      	str	r0, [r7, #12]
    162c:	60b9      	str	r1, [r7, #8]
    162e:	0019      	movs	r1, r3
    1630:	1dbb      	adds	r3, r7, #6
    1632:	801a      	strh	r2, [r3, #0]
    1634:	1d3b      	adds	r3, r7, #4
    1636:	1c0a      	adds	r2, r1, #0
    1638:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    163a:	68fb      	ldr	r3, [r7, #12]
    163c:	2238      	movs	r2, #56	; 0x38
    163e:	5c9b      	ldrb	r3, [r3, r2]
    1640:	b2db      	uxtb	r3, r3
    1642:	2b05      	cmp	r3, #5
    1644:	d101      	bne.n	164a <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1646:	2305      	movs	r3, #5
    1648:	e0b8      	b.n	17bc <spi_read_buffer_wait+0x198>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    164a:	1dbb      	adds	r3, r7, #6
    164c:	881b      	ldrh	r3, [r3, #0]
    164e:	2b00      	cmp	r3, #0
    1650:	d101      	bne.n	1656 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    1652:	2317      	movs	r3, #23
    1654:	e0b2      	b.n	17bc <spi_read_buffer_wait+0x198>
	}

	if (!(module->receiver_enabled)) {
    1656:	68fb      	ldr	r3, [r7, #12]
    1658:	79db      	ldrb	r3, [r3, #7]
    165a:	2201      	movs	r2, #1
    165c:	4053      	eors	r3, r2
    165e:	b2db      	uxtb	r3, r3
    1660:	2b00      	cmp	r3, #0
    1662:	d001      	beq.n	1668 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    1664:	231c      	movs	r3, #28
    1666:	e0a9      	b.n	17bc <spi_read_buffer_wait+0x198>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1668:	68fb      	ldr	r3, [r7, #12]
    166a:	795b      	ldrb	r3, [r3, #5]
    166c:	2b00      	cmp	r3, #0
    166e:	d109      	bne.n	1684 <spi_read_buffer_wait+0x60>
    1670:	68fb      	ldr	r3, [r7, #12]
    1672:	0018      	movs	r0, r3
    1674:	4b53      	ldr	r3, [pc, #332]	; (17c4 <spi_read_buffer_wait+0x1a0>)
    1676:	4798      	blx	r3
    1678:	1e03      	subs	r3, r0, #0
    167a:	d003      	beq.n	1684 <spi_read_buffer_wait+0x60>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    167c:	68fb      	ldr	r3, [r7, #12]
    167e:	0018      	movs	r0, r3
    1680:	4b51      	ldr	r3, [pc, #324]	; (17c8 <spi_read_buffer_wait+0x1a4>)
    1682:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
    1684:	231e      	movs	r3, #30
    1686:	18fb      	adds	r3, r7, r3
    1688:	2200      	movs	r2, #0
    168a:	801a      	strh	r2, [r3, #0]

	while (length--) {
    168c:	e08d      	b.n	17aa <spi_read_buffer_wait+0x186>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    168e:	68fb      	ldr	r3, [r7, #12]
    1690:	795b      	ldrb	r3, [r3, #5]
    1692:	2b01      	cmp	r3, #1
    1694:	d112      	bne.n	16bc <spi_read_buffer_wait+0x98>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    1696:	46c0      	nop			; (mov r8, r8)
    1698:	68fb      	ldr	r3, [r7, #12]
    169a:	0018      	movs	r0, r3
    169c:	4b4b      	ldr	r3, [pc, #300]	; (17cc <spi_read_buffer_wait+0x1a8>)
    169e:	4798      	blx	r3
    16a0:	0003      	movs	r3, r0
    16a2:	001a      	movs	r2, r3
    16a4:	2301      	movs	r3, #1
    16a6:	4053      	eors	r3, r2
    16a8:	b2db      	uxtb	r3, r3
    16aa:	2b00      	cmp	r3, #0
    16ac:	d1f4      	bne.n	1698 <spi_read_buffer_wait+0x74>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    16ae:	1d3b      	adds	r3, r7, #4
    16b0:	881a      	ldrh	r2, [r3, #0]
    16b2:	68fb      	ldr	r3, [r7, #12]
    16b4:	0011      	movs	r1, r2
    16b6:	0018      	movs	r0, r3
    16b8:	4b45      	ldr	r3, [pc, #276]	; (17d0 <spi_read_buffer_wait+0x1ac>)
    16ba:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    16bc:	68fb      	ldr	r3, [r7, #12]
    16be:	795b      	ldrb	r3, [r3, #5]
    16c0:	2b00      	cmp	r3, #0
    16c2:	d12a      	bne.n	171a <spi_read_buffer_wait+0xf6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    16c4:	2300      	movs	r3, #0
    16c6:	61bb      	str	r3, [r7, #24]
    16c8:	e008      	b.n	16dc <spi_read_buffer_wait+0xb8>
				if (spi_is_ready_to_read(module)) {
    16ca:	68fb      	ldr	r3, [r7, #12]
    16cc:	0018      	movs	r0, r3
    16ce:	4b41      	ldr	r3, [pc, #260]	; (17d4 <spi_read_buffer_wait+0x1b0>)
    16d0:	4798      	blx	r3
    16d2:	1e03      	subs	r3, r0, #0
    16d4:	d107      	bne.n	16e6 <spi_read_buffer_wait+0xc2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    16d6:	69bb      	ldr	r3, [r7, #24]
    16d8:	3301      	adds	r3, #1
    16da:	61bb      	str	r3, [r7, #24]
    16dc:	69bb      	ldr	r3, [r7, #24]
    16de:	4a3e      	ldr	r2, [pc, #248]	; (17d8 <spi_read_buffer_wait+0x1b4>)
    16e0:	4293      	cmp	r3, r2
    16e2:	d9f2      	bls.n	16ca <spi_read_buffer_wait+0xa6>
    16e4:	e000      	b.n	16e8 <spi_read_buffer_wait+0xc4>
					break;
    16e6:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    16e8:	68fb      	ldr	r3, [r7, #12]
    16ea:	0018      	movs	r0, r3
    16ec:	4b35      	ldr	r3, [pc, #212]	; (17c4 <spi_read_buffer_wait+0x1a0>)
    16ee:	4798      	blx	r3
    16f0:	1e03      	subs	r3, r0, #0
    16f2:	d005      	beq.n	1700 <spi_read_buffer_wait+0xdc>
				_spi_clear_tx_complete_flag(module);
    16f4:	68fb      	ldr	r3, [r7, #12]
    16f6:	0018      	movs	r0, r3
    16f8:	4b33      	ldr	r3, [pc, #204]	; (17c8 <spi_read_buffer_wait+0x1a4>)
    16fa:	4798      	blx	r3
				return STATUS_ABORTED;
    16fc:	2304      	movs	r3, #4
    16fe:	e05d      	b.n	17bc <spi_read_buffer_wait+0x198>
			}

			if (!spi_is_ready_to_read(module)) {
    1700:	68fb      	ldr	r3, [r7, #12]
    1702:	0018      	movs	r0, r3
    1704:	4b33      	ldr	r3, [pc, #204]	; (17d4 <spi_read_buffer_wait+0x1b0>)
    1706:	4798      	blx	r3
    1708:	0003      	movs	r3, r0
    170a:	001a      	movs	r2, r3
    170c:	2301      	movs	r3, #1
    170e:	4053      	eors	r3, r2
    1710:	b2db      	uxtb	r3, r3
    1712:	2b00      	cmp	r3, #0
    1714:	d001      	beq.n	171a <spi_read_buffer_wait+0xf6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1716:	2312      	movs	r3, #18
    1718:	e050      	b.n	17bc <spi_read_buffer_wait+0x198>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	68fb      	ldr	r3, [r7, #12]
    171e:	0018      	movs	r0, r3
    1720:	4b2c      	ldr	r3, [pc, #176]	; (17d4 <spi_read_buffer_wait+0x1b0>)
    1722:	4798      	blx	r3
    1724:	0003      	movs	r3, r0
    1726:	001a      	movs	r2, r3
    1728:	2301      	movs	r3, #1
    172a:	4053      	eors	r3, r2
    172c:	b2db      	uxtb	r3, r3
    172e:	2b00      	cmp	r3, #0
    1730:	d1f4      	bne.n	171c <spi_read_buffer_wait+0xf8>
		}

		uint16_t received_data = 0;
    1732:	2314      	movs	r3, #20
    1734:	18fb      	adds	r3, r7, r3
    1736:	2200      	movs	r2, #0
    1738:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    173a:	2317      	movs	r3, #23
    173c:	18fc      	adds	r4, r7, r3
    173e:	2314      	movs	r3, #20
    1740:	18fa      	adds	r2, r7, r3
    1742:	68fb      	ldr	r3, [r7, #12]
    1744:	0011      	movs	r1, r2
    1746:	0018      	movs	r0, r3
    1748:	4b24      	ldr	r3, [pc, #144]	; (17dc <spi_read_buffer_wait+0x1b8>)
    174a:	4798      	blx	r3
    174c:	0003      	movs	r3, r0
    174e:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    1750:	2317      	movs	r3, #23
    1752:	18fb      	adds	r3, r7, r3
    1754:	781b      	ldrb	r3, [r3, #0]
    1756:	2b00      	cmp	r3, #0
    1758:	d003      	beq.n	1762 <spi_read_buffer_wait+0x13e>
			/* Overflow, abort */
			return retval;
    175a:	2317      	movs	r3, #23
    175c:	18fb      	adds	r3, r7, r3
    175e:	781b      	ldrb	r3, [r3, #0]
    1760:	e02c      	b.n	17bc <spi_read_buffer_wait+0x198>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1762:	231e      	movs	r3, #30
    1764:	18fb      	adds	r3, r7, r3
    1766:	881b      	ldrh	r3, [r3, #0]
    1768:	221e      	movs	r2, #30
    176a:	18ba      	adds	r2, r7, r2
    176c:	1c59      	adds	r1, r3, #1
    176e:	8011      	strh	r1, [r2, #0]
    1770:	001a      	movs	r2, r3
    1772:	68bb      	ldr	r3, [r7, #8]
    1774:	189b      	adds	r3, r3, r2
    1776:	2214      	movs	r2, #20
    1778:	18ba      	adds	r2, r7, r2
    177a:	8812      	ldrh	r2, [r2, #0]
    177c:	b2d2      	uxtb	r2, r2
    177e:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1780:	68fb      	ldr	r3, [r7, #12]
    1782:	799b      	ldrb	r3, [r3, #6]
    1784:	2b01      	cmp	r3, #1
    1786:	d110      	bne.n	17aa <spi_read_buffer_wait+0x186>
			rx_data[rx_pos++] = (received_data >> 8);
    1788:	231e      	movs	r3, #30
    178a:	18fb      	adds	r3, r7, r3
    178c:	881b      	ldrh	r3, [r3, #0]
    178e:	221e      	movs	r2, #30
    1790:	18ba      	adds	r2, r7, r2
    1792:	1c59      	adds	r1, r3, #1
    1794:	8011      	strh	r1, [r2, #0]
    1796:	001a      	movs	r2, r3
    1798:	68bb      	ldr	r3, [r7, #8]
    179a:	189b      	adds	r3, r3, r2
    179c:	2214      	movs	r2, #20
    179e:	18ba      	adds	r2, r7, r2
    17a0:	8812      	ldrh	r2, [r2, #0]
    17a2:	0a12      	lsrs	r2, r2, #8
    17a4:	b292      	uxth	r2, r2
    17a6:	b2d2      	uxtb	r2, r2
    17a8:	701a      	strb	r2, [r3, #0]
	while (length--) {
    17aa:	1dbb      	adds	r3, r7, #6
    17ac:	881b      	ldrh	r3, [r3, #0]
    17ae:	1dba      	adds	r2, r7, #6
    17b0:	1e59      	subs	r1, r3, #1
    17b2:	8011      	strh	r1, [r2, #0]
    17b4:	2b00      	cmp	r3, #0
    17b6:	d000      	beq.n	17ba <spi_read_buffer_wait+0x196>
    17b8:	e769      	b.n	168e <spi_read_buffer_wait+0x6a>
		}
	}

	return STATUS_OK;
    17ba:	2300      	movs	r3, #0
}
    17bc:	0018      	movs	r0, r3
    17be:	46bd      	mov	sp, r7
    17c0:	b009      	add	sp, #36	; 0x24
    17c2:	bd90      	pop	{r4, r7, pc}
    17c4:	000010cd 	.word	0x000010cd
    17c8:	00001215 	.word	0x00001215
    17cc:	000010f5 	.word	0x000010f5
    17d0:	00001145 	.word	0x00001145
    17d4:	0000111d 	.word	0x0000111d
    17d8:	00002710 	.word	0x00002710
    17dc:	0000118d 	.word	0x0000118d

000017e0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    17e0:	b580      	push	{r7, lr}
    17e2:	b08a      	sub	sp, #40	; 0x28
    17e4:	af00      	add	r7, sp, #0
    17e6:	60f8      	str	r0, [r7, #12]
    17e8:	60b9      	str	r1, [r7, #8]
    17ea:	1dbb      	adds	r3, r7, #6
    17ec:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    17ee:	68fb      	ldr	r3, [r7, #12]
    17f0:	2238      	movs	r2, #56	; 0x38
    17f2:	5c9b      	ldrb	r3, [r3, r2]
    17f4:	b2db      	uxtb	r3, r3
    17f6:	2b05      	cmp	r3, #5
    17f8:	d101      	bne.n	17fe <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    17fa:	2305      	movs	r3, #5
    17fc:	e170      	b.n	1ae0 <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
    17fe:	1dbb      	adds	r3, r7, #6
    1800:	881b      	ldrh	r3, [r3, #0]
    1802:	2b00      	cmp	r3, #0
    1804:	d101      	bne.n	180a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    1806:	2317      	movs	r3, #23
    1808:	e16a      	b.n	1ae0 <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    180a:	68fb      	ldr	r3, [r7, #12]
    180c:	795b      	ldrb	r3, [r3, #5]
    180e:	2b00      	cmp	r3, #0
    1810:	d109      	bne.n	1826 <spi_write_buffer_wait+0x46>
    1812:	68fb      	ldr	r3, [r7, #12]
    1814:	0018      	movs	r0, r3
    1816:	4bb4      	ldr	r3, [pc, #720]	; (1ae8 <spi_write_buffer_wait+0x308>)
    1818:	4798      	blx	r3
    181a:	1e03      	subs	r3, r0, #0
    181c:	d003      	beq.n	1826 <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    181e:	68fb      	ldr	r3, [r7, #12]
    1820:	0018      	movs	r0, r3
    1822:	4bb2      	ldr	r3, [pc, #712]	; (1aec <spi_write_buffer_wait+0x30c>)
    1824:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    1826:	2326      	movs	r3, #38	; 0x26
    1828:	18fb      	adds	r3, r7, r3
    182a:	2200      	movs	r2, #0
    182c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    182e:	2324      	movs	r3, #36	; 0x24
    1830:	18fb      	adds	r3, r7, r3
    1832:	1dba      	adds	r2, r7, #6
    1834:	8812      	ldrh	r2, [r2, #0]
    1836:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    1838:	e0fe      	b.n	1a38 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    183a:	68fb      	ldr	r3, [r7, #12]
    183c:	795b      	ldrb	r3, [r3, #5]
    183e:	2b00      	cmp	r3, #0
    1840:	d12a      	bne.n	1898 <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1842:	2300      	movs	r3, #0
    1844:	623b      	str	r3, [r7, #32]
    1846:	e008      	b.n	185a <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
    1848:	68fb      	ldr	r3, [r7, #12]
    184a:	0018      	movs	r0, r3
    184c:	4ba8      	ldr	r3, [pc, #672]	; (1af0 <spi_write_buffer_wait+0x310>)
    184e:	4798      	blx	r3
    1850:	1e03      	subs	r3, r0, #0
    1852:	d107      	bne.n	1864 <spi_write_buffer_wait+0x84>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1854:	6a3b      	ldr	r3, [r7, #32]
    1856:	3301      	adds	r3, #1
    1858:	623b      	str	r3, [r7, #32]
    185a:	6a3b      	ldr	r3, [r7, #32]
    185c:	4aa5      	ldr	r2, [pc, #660]	; (1af4 <spi_write_buffer_wait+0x314>)
    185e:	4293      	cmp	r3, r2
    1860:	d9f2      	bls.n	1848 <spi_write_buffer_wait+0x68>
    1862:	e000      	b.n	1866 <spi_write_buffer_wait+0x86>
					break;
    1864:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    1866:	68fb      	ldr	r3, [r7, #12]
    1868:	0018      	movs	r0, r3
    186a:	4b9f      	ldr	r3, [pc, #636]	; (1ae8 <spi_write_buffer_wait+0x308>)
    186c:	4798      	blx	r3
    186e:	1e03      	subs	r3, r0, #0
    1870:	d005      	beq.n	187e <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
    1872:	68fb      	ldr	r3, [r7, #12]
    1874:	0018      	movs	r0, r3
    1876:	4b9d      	ldr	r3, [pc, #628]	; (1aec <spi_write_buffer_wait+0x30c>)
    1878:	4798      	blx	r3
				return STATUS_ABORTED;
    187a:	2304      	movs	r3, #4
    187c:	e130      	b.n	1ae0 <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
    187e:	68fb      	ldr	r3, [r7, #12]
    1880:	0018      	movs	r0, r3
    1882:	4b9b      	ldr	r3, [pc, #620]	; (1af0 <spi_write_buffer_wait+0x310>)
    1884:	4798      	blx	r3
    1886:	0003      	movs	r3, r0
    1888:	001a      	movs	r2, r3
    188a:	2301      	movs	r3, #1
    188c:	4053      	eors	r3, r2
    188e:	b2db      	uxtb	r3, r3
    1890:	2b00      	cmp	r3, #0
    1892:	d001      	beq.n	1898 <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1894:	2312      	movs	r3, #18
    1896:	e123      	b.n	1ae0 <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    1898:	46c0      	nop			; (mov r8, r8)
    189a:	68fb      	ldr	r3, [r7, #12]
    189c:	0018      	movs	r0, r3
    189e:	4b94      	ldr	r3, [pc, #592]	; (1af0 <spi_write_buffer_wait+0x310>)
    18a0:	4798      	blx	r3
    18a2:	0003      	movs	r3, r0
    18a4:	001a      	movs	r2, r3
    18a6:	2301      	movs	r3, #1
    18a8:	4053      	eors	r3, r2
    18aa:	b2db      	uxtb	r3, r3
    18ac:	2b00      	cmp	r3, #0
    18ae:	d1f4      	bne.n	189a <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    18b0:	2326      	movs	r3, #38	; 0x26
    18b2:	18fb      	adds	r3, r7, r3
    18b4:	881b      	ldrh	r3, [r3, #0]
    18b6:	2226      	movs	r2, #38	; 0x26
    18b8:	18ba      	adds	r2, r7, r2
    18ba:	1c59      	adds	r1, r3, #1
    18bc:	8011      	strh	r1, [r2, #0]
    18be:	001a      	movs	r2, r3
    18c0:	68bb      	ldr	r3, [r7, #8]
    18c2:	189b      	adds	r3, r3, r2
    18c4:	781a      	ldrb	r2, [r3, #0]
    18c6:	231e      	movs	r3, #30
    18c8:	18fb      	adds	r3, r7, r3
    18ca:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    18cc:	68fb      	ldr	r3, [r7, #12]
    18ce:	799b      	ldrb	r3, [r3, #6]
    18d0:	2b01      	cmp	r3, #1
    18d2:	d115      	bne.n	1900 <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
    18d4:	2326      	movs	r3, #38	; 0x26
    18d6:	18fb      	adds	r3, r7, r3
    18d8:	881b      	ldrh	r3, [r3, #0]
    18da:	2226      	movs	r2, #38	; 0x26
    18dc:	18ba      	adds	r2, r7, r2
    18de:	1c59      	adds	r1, r3, #1
    18e0:	8011      	strh	r1, [r2, #0]
    18e2:	001a      	movs	r2, r3
    18e4:	68bb      	ldr	r3, [r7, #8]
    18e6:	189b      	adds	r3, r3, r2
    18e8:	781b      	ldrb	r3, [r3, #0]
    18ea:	021b      	lsls	r3, r3, #8
    18ec:	b21a      	sxth	r2, r3
    18ee:	231e      	movs	r3, #30
    18f0:	18fb      	adds	r3, r7, r3
    18f2:	2100      	movs	r1, #0
    18f4:	5e5b      	ldrsh	r3, [r3, r1]
    18f6:	4313      	orrs	r3, r2
    18f8:	b21a      	sxth	r2, r3
    18fa:	231e      	movs	r3, #30
    18fc:	18fb      	adds	r3, r7, r3
    18fe:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    1900:	231e      	movs	r3, #30
    1902:	18fb      	adds	r3, r7, r3
    1904:	881a      	ldrh	r2, [r3, #0]
    1906:	68fb      	ldr	r3, [r7, #12]
    1908:	0011      	movs	r1, r2
    190a:	0018      	movs	r0, r3
    190c:	4b7a      	ldr	r3, [pc, #488]	; (1af8 <spi_write_buffer_wait+0x318>)
    190e:	4798      	blx	r3

		if (module->receiver_enabled) {
    1910:	68fb      	ldr	r3, [r7, #12]
    1912:	79db      	ldrb	r3, [r3, #7]
    1914:	2224      	movs	r2, #36	; 0x24
    1916:	18ba      	adds	r2, r7, r2
    1918:	2124      	movs	r1, #36	; 0x24
    191a:	1879      	adds	r1, r7, r1
    191c:	8809      	ldrh	r1, [r1, #0]
    191e:	8011      	strh	r1, [r2, #0]
    1920:	2b00      	cmp	r3, #0
    1922:	d100      	bne.n	1926 <spi_write_buffer_wait+0x146>
    1924:	e088      	b.n	1a38 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    1926:	68fb      	ldr	r3, [r7, #12]
    1928:	795b      	ldrb	r3, [r3, #5]
    192a:	2b00      	cmp	r3, #0
    192c:	d000      	beq.n	1930 <spi_write_buffer_wait+0x150>
    192e:	e069      	b.n	1a04 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1930:	2300      	movs	r3, #0
    1932:	61bb      	str	r3, [r7, #24]
    1934:	e047      	b.n	19c6 <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
    1936:	1dbb      	adds	r3, r7, #6
    1938:	881b      	ldrh	r3, [r3, #0]
    193a:	2b00      	cmp	r3, #0
    193c:	d03a      	beq.n	19b4 <spi_write_buffer_wait+0x1d4>
    193e:	68fb      	ldr	r3, [r7, #12]
    1940:	0018      	movs	r0, r3
    1942:	4b6b      	ldr	r3, [pc, #428]	; (1af0 <spi_write_buffer_wait+0x310>)
    1944:	4798      	blx	r3
    1946:	1e03      	subs	r3, r0, #0
    1948:	d034      	beq.n	19b4 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
    194a:	2326      	movs	r3, #38	; 0x26
    194c:	18fb      	adds	r3, r7, r3
    194e:	881b      	ldrh	r3, [r3, #0]
    1950:	2226      	movs	r2, #38	; 0x26
    1952:	18ba      	adds	r2, r7, r2
    1954:	1c59      	adds	r1, r3, #1
    1956:	8011      	strh	r1, [r2, #0]
    1958:	001a      	movs	r2, r3
    195a:	68bb      	ldr	r3, [r7, #8]
    195c:	189b      	adds	r3, r3, r2
    195e:	781a      	ldrb	r2, [r3, #0]
    1960:	231e      	movs	r3, #30
    1962:	18fb      	adds	r3, r7, r3
    1964:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1966:	68fb      	ldr	r3, [r7, #12]
    1968:	799b      	ldrb	r3, [r3, #6]
    196a:	2b01      	cmp	r3, #1
    196c:	d115      	bne.n	199a <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
    196e:	2326      	movs	r3, #38	; 0x26
    1970:	18fb      	adds	r3, r7, r3
    1972:	881b      	ldrh	r3, [r3, #0]
    1974:	2226      	movs	r2, #38	; 0x26
    1976:	18ba      	adds	r2, r7, r2
    1978:	1c59      	adds	r1, r3, #1
    197a:	8011      	strh	r1, [r2, #0]
    197c:	001a      	movs	r2, r3
    197e:	68bb      	ldr	r3, [r7, #8]
    1980:	189b      	adds	r3, r3, r2
    1982:	781b      	ldrb	r3, [r3, #0]
    1984:	021b      	lsls	r3, r3, #8
    1986:	b21a      	sxth	r2, r3
    1988:	231e      	movs	r3, #30
    198a:	18fb      	adds	r3, r7, r3
    198c:	2100      	movs	r1, #0
    198e:	5e5b      	ldrsh	r3, [r3, r1]
    1990:	4313      	orrs	r3, r2
    1992:	b21a      	sxth	r2, r3
    1994:	231e      	movs	r3, #30
    1996:	18fb      	adds	r3, r7, r3
    1998:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    199a:	231e      	movs	r3, #30
    199c:	18fb      	adds	r3, r7, r3
    199e:	881a      	ldrh	r2, [r3, #0]
    19a0:	68fb      	ldr	r3, [r7, #12]
    19a2:	0011      	movs	r1, r2
    19a4:	0018      	movs	r0, r3
    19a6:	4b54      	ldr	r3, [pc, #336]	; (1af8 <spi_write_buffer_wait+0x318>)
    19a8:	4798      	blx	r3
						length--;
    19aa:	1dbb      	adds	r3, r7, #6
    19ac:	881a      	ldrh	r2, [r3, #0]
    19ae:	1dbb      	adds	r3, r7, #6
    19b0:	3a01      	subs	r2, #1
    19b2:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    19b4:	68fb      	ldr	r3, [r7, #12]
    19b6:	0018      	movs	r0, r3
    19b8:	4b50      	ldr	r3, [pc, #320]	; (1afc <spi_write_buffer_wait+0x31c>)
    19ba:	4798      	blx	r3
    19bc:	1e03      	subs	r3, r0, #0
    19be:	d107      	bne.n	19d0 <spi_write_buffer_wait+0x1f0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    19c0:	69bb      	ldr	r3, [r7, #24]
    19c2:	3301      	adds	r3, #1
    19c4:	61bb      	str	r3, [r7, #24]
    19c6:	69bb      	ldr	r3, [r7, #24]
    19c8:	4a4a      	ldr	r2, [pc, #296]	; (1af4 <spi_write_buffer_wait+0x314>)
    19ca:	4293      	cmp	r3, r2
    19cc:	d9b3      	bls.n	1936 <spi_write_buffer_wait+0x156>
    19ce:	e000      	b.n	19d2 <spi_write_buffer_wait+0x1f2>
						break;
    19d0:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    19d2:	68fb      	ldr	r3, [r7, #12]
    19d4:	0018      	movs	r0, r3
    19d6:	4b44      	ldr	r3, [pc, #272]	; (1ae8 <spi_write_buffer_wait+0x308>)
    19d8:	4798      	blx	r3
    19da:	1e03      	subs	r3, r0, #0
    19dc:	d005      	beq.n	19ea <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
    19de:	68fb      	ldr	r3, [r7, #12]
    19e0:	0018      	movs	r0, r3
    19e2:	4b42      	ldr	r3, [pc, #264]	; (1aec <spi_write_buffer_wait+0x30c>)
    19e4:	4798      	blx	r3
					return STATUS_ABORTED;
    19e6:	2304      	movs	r3, #4
    19e8:	e07a      	b.n	1ae0 <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	0018      	movs	r0, r3
    19ee:	4b43      	ldr	r3, [pc, #268]	; (1afc <spi_write_buffer_wait+0x31c>)
    19f0:	4798      	blx	r3
    19f2:	0003      	movs	r3, r0
    19f4:	001a      	movs	r2, r3
    19f6:	2301      	movs	r3, #1
    19f8:	4053      	eors	r3, r2
    19fa:	b2db      	uxtb	r3, r3
    19fc:	2b00      	cmp	r3, #0
    19fe:	d001      	beq.n	1a04 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    1a00:	2312      	movs	r3, #18
    1a02:	e06d      	b.n	1ae0 <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    1a04:	46c0      	nop			; (mov r8, r8)
    1a06:	68fb      	ldr	r3, [r7, #12]
    1a08:	0018      	movs	r0, r3
    1a0a:	4b3c      	ldr	r3, [pc, #240]	; (1afc <spi_write_buffer_wait+0x31c>)
    1a0c:	4798      	blx	r3
    1a0e:	0003      	movs	r3, r0
    1a10:	001a      	movs	r2, r3
    1a12:	2301      	movs	r3, #1
    1a14:	4053      	eors	r3, r2
    1a16:	b2db      	uxtb	r3, r3
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d1f4      	bne.n	1a06 <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    1a1c:	2312      	movs	r3, #18
    1a1e:	18fa      	adds	r2, r7, r3
    1a20:	68fb      	ldr	r3, [r7, #12]
    1a22:	0011      	movs	r1, r2
    1a24:	0018      	movs	r0, r3
    1a26:	4b36      	ldr	r3, [pc, #216]	; (1b00 <spi_write_buffer_wait+0x320>)
    1a28:	4798      	blx	r3
			flush_length--;
    1a2a:	2324      	movs	r3, #36	; 0x24
    1a2c:	18fb      	adds	r3, r7, r3
    1a2e:	881a      	ldrh	r2, [r3, #0]
    1a30:	2324      	movs	r3, #36	; 0x24
    1a32:	18fb      	adds	r3, r7, r3
    1a34:	3a01      	subs	r2, #1
    1a36:	801a      	strh	r2, [r3, #0]
	while (length--) {
    1a38:	1dbb      	adds	r3, r7, #6
    1a3a:	881b      	ldrh	r3, [r3, #0]
    1a3c:	1dba      	adds	r2, r7, #6
    1a3e:	1e59      	subs	r1, r3, #1
    1a40:	8011      	strh	r1, [r2, #0]
    1a42:	2b00      	cmp	r3, #0
    1a44:	d000      	beq.n	1a48 <spi_write_buffer_wait+0x268>
    1a46:	e6f8      	b.n	183a <spi_write_buffer_wait+0x5a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1a48:	68fb      	ldr	r3, [r7, #12]
    1a4a:	795b      	ldrb	r3, [r3, #5]
    1a4c:	2b01      	cmp	r3, #1
    1a4e:	d10b      	bne.n	1a68 <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    1a50:	46c0      	nop			; (mov r8, r8)
    1a52:	68fb      	ldr	r3, [r7, #12]
    1a54:	0018      	movs	r0, r3
    1a56:	4b24      	ldr	r3, [pc, #144]	; (1ae8 <spi_write_buffer_wait+0x308>)
    1a58:	4798      	blx	r3
    1a5a:	0003      	movs	r3, r0
    1a5c:	001a      	movs	r2, r3
    1a5e:	2301      	movs	r3, #1
    1a60:	4053      	eors	r3, r2
    1a62:	b2db      	uxtb	r3, r3
    1a64:	2b00      	cmp	r3, #0
    1a66:	d1f4      	bne.n	1a52 <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1a68:	68fb      	ldr	r3, [r7, #12]
    1a6a:	795b      	ldrb	r3, [r3, #5]
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	d136      	bne.n	1ade <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
    1a70:	68fb      	ldr	r3, [r7, #12]
    1a72:	79db      	ldrb	r3, [r3, #7]
    1a74:	2b00      	cmp	r3, #0
    1a76:	d032      	beq.n	1ade <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
    1a78:	e02c      	b.n	1ad4 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1a7a:	2300      	movs	r3, #0
    1a7c:	617b      	str	r3, [r7, #20]
    1a7e:	e008      	b.n	1a92 <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
    1a80:	68fb      	ldr	r3, [r7, #12]
    1a82:	0018      	movs	r0, r3
    1a84:	4b1d      	ldr	r3, [pc, #116]	; (1afc <spi_write_buffer_wait+0x31c>)
    1a86:	4798      	blx	r3
    1a88:	1e03      	subs	r3, r0, #0
    1a8a:	d107      	bne.n	1a9c <spi_write_buffer_wait+0x2bc>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1a8c:	697b      	ldr	r3, [r7, #20]
    1a8e:	3301      	adds	r3, #1
    1a90:	617b      	str	r3, [r7, #20]
    1a92:	697b      	ldr	r3, [r7, #20]
    1a94:	4a17      	ldr	r2, [pc, #92]	; (1af4 <spi_write_buffer_wait+0x314>)
    1a96:	4293      	cmp	r3, r2
    1a98:	d9f2      	bls.n	1a80 <spi_write_buffer_wait+0x2a0>
    1a9a:	e000      	b.n	1a9e <spi_write_buffer_wait+0x2be>
						break;
    1a9c:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    1a9e:	68fb      	ldr	r3, [r7, #12]
    1aa0:	0018      	movs	r0, r3
    1aa2:	4b16      	ldr	r3, [pc, #88]	; (1afc <spi_write_buffer_wait+0x31c>)
    1aa4:	4798      	blx	r3
    1aa6:	0003      	movs	r3, r0
    1aa8:	001a      	movs	r2, r3
    1aaa:	2301      	movs	r3, #1
    1aac:	4053      	eors	r3, r2
    1aae:	b2db      	uxtb	r3, r3
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d001      	beq.n	1ab8 <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    1ab4:	2312      	movs	r3, #18
    1ab6:	e013      	b.n	1ae0 <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    1ab8:	2310      	movs	r3, #16
    1aba:	18fa      	adds	r2, r7, r3
    1abc:	68fb      	ldr	r3, [r7, #12]
    1abe:	0011      	movs	r1, r2
    1ac0:	0018      	movs	r0, r3
    1ac2:	4b0f      	ldr	r3, [pc, #60]	; (1b00 <spi_write_buffer_wait+0x320>)
    1ac4:	4798      	blx	r3
				flush_length--;
    1ac6:	2324      	movs	r3, #36	; 0x24
    1ac8:	18fb      	adds	r3, r7, r3
    1aca:	881a      	ldrh	r2, [r3, #0]
    1acc:	2324      	movs	r3, #36	; 0x24
    1ace:	18fb      	adds	r3, r7, r3
    1ad0:	3a01      	subs	r2, #1
    1ad2:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    1ad4:	2324      	movs	r3, #36	; 0x24
    1ad6:	18fb      	adds	r3, r7, r3
    1ad8:	881b      	ldrh	r3, [r3, #0]
    1ada:	2b00      	cmp	r3, #0
    1adc:	d1cd      	bne.n	1a7a <spi_write_buffer_wait+0x29a>
			}
		}
	}
#  endif
	return STATUS_OK;
    1ade:	2300      	movs	r3, #0
}
    1ae0:	0018      	movs	r0, r3
    1ae2:	46bd      	mov	sp, r7
    1ae4:	b00a      	add	sp, #40	; 0x28
    1ae6:	bd80      	pop	{r7, pc}
    1ae8:	000010cd 	.word	0x000010cd
    1aec:	00001215 	.word	0x00001215
    1af0:	000010f5 	.word	0x000010f5
    1af4:	00002710 	.word	0x00002710
    1af8:	00001145 	.word	0x00001145
    1afc:	0000111d 	.word	0x0000111d
    1b00:	0000118d 	.word	0x0000118d

00001b04 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    1b04:	b580      	push	{r7, lr}
    1b06:	b084      	sub	sp, #16
    1b08:	af00      	add	r7, sp, #0
    1b0a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1b0c:	687b      	ldr	r3, [r7, #4]
    1b0e:	681b      	ldr	r3, [r3, #0]
    1b10:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1b12:	687b      	ldr	r3, [r7, #4]
    1b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b16:	781b      	ldrb	r3, [r3, #0]
    1b18:	b2da      	uxtb	r2, r3
    1b1a:	230e      	movs	r3, #14
    1b1c:	18fb      	adds	r3, r7, r3
    1b1e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b24:	1c5a      	adds	r2, r3, #1
    1b26:	687b      	ldr	r3, [r7, #4]
    1b28:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	799b      	ldrb	r3, [r3, #6]
    1b2e:	2b01      	cmp	r3, #1
    1b30:	d113      	bne.n	1b5a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1b32:	687b      	ldr	r3, [r7, #4]
    1b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b36:	781b      	ldrb	r3, [r3, #0]
    1b38:	b2db      	uxtb	r3, r3
    1b3a:	021b      	lsls	r3, r3, #8
    1b3c:	b21a      	sxth	r2, r3
    1b3e:	230e      	movs	r3, #14
    1b40:	18fb      	adds	r3, r7, r3
    1b42:	2100      	movs	r1, #0
    1b44:	5e5b      	ldrsh	r3, [r3, r1]
    1b46:	4313      	orrs	r3, r2
    1b48:	b21a      	sxth	r2, r3
    1b4a:	230e      	movs	r3, #14
    1b4c:	18fb      	adds	r3, r7, r3
    1b4e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    1b50:	687b      	ldr	r3, [r7, #4]
    1b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b54:	1c5a      	adds	r2, r3, #1
    1b56:	687b      	ldr	r3, [r7, #4]
    1b58:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1b5a:	230e      	movs	r3, #14
    1b5c:	18fb      	adds	r3, r7, r3
    1b5e:	881b      	ldrh	r3, [r3, #0]
    1b60:	05db      	lsls	r3, r3, #23
    1b62:	0dda      	lsrs	r2, r3, #23
    1b64:	68bb      	ldr	r3, [r7, #8]
    1b66:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1b68:	687b      	ldr	r3, [r7, #4]
    1b6a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    1b6c:	b29b      	uxth	r3, r3
    1b6e:	3b01      	subs	r3, #1
    1b70:	b29a      	uxth	r2, r3
    1b72:	687b      	ldr	r3, [r7, #4]
    1b74:	869a      	strh	r2, [r3, #52]	; 0x34
}
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	46bd      	mov	sp, r7
    1b7a:	b004      	add	sp, #16
    1b7c:	bd80      	pop	{r7, pc}
	...

00001b80 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    1b80:	b580      	push	{r7, lr}
    1b82:	b084      	sub	sp, #16
    1b84:	af00      	add	r7, sp, #0
    1b86:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	681b      	ldr	r3, [r3, #0]
    1b8c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    1b8e:	4b08      	ldr	r3, [pc, #32]	; (1bb0 <_spi_write_dummy+0x30>)
    1b90:	881b      	ldrh	r3, [r3, #0]
    1b92:	001a      	movs	r2, r3
    1b94:	68fb      	ldr	r3, [r7, #12]
    1b96:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	3b01      	subs	r3, #1
    1ba0:	b29a      	uxth	r2, r3
    1ba2:	687b      	ldr	r3, [r7, #4]
    1ba4:	865a      	strh	r2, [r3, #50]	; 0x32
}
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	46bd      	mov	sp, r7
    1baa:	b004      	add	sp, #16
    1bac:	bd80      	pop	{r7, pc}
    1bae:	46c0      	nop			; (mov r8, r8)
    1bb0:	200002d4 	.word	0x200002d4

00001bb4 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    1bb4:	b580      	push	{r7, lr}
    1bb6:	b084      	sub	sp, #16
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	681b      	ldr	r3, [r3, #0]
    1bc0:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    1bc2:	230a      	movs	r3, #10
    1bc4:	18fb      	adds	r3, r7, r3
    1bc6:	2200      	movs	r2, #0
    1bc8:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    1bca:	68fb      	ldr	r3, [r7, #12]
    1bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bce:	230a      	movs	r3, #10
    1bd0:	18fb      	adds	r3, r7, r3
    1bd2:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1bd4:	687b      	ldr	r3, [r7, #4]
    1bd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1bd8:	b29b      	uxth	r3, r3
    1bda:	3b01      	subs	r3, #1
    1bdc:	b29a      	uxth	r2, r3
    1bde:	687b      	ldr	r3, [r7, #4]
    1be0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    1be2:	46c0      	nop			; (mov r8, r8)
    1be4:	46bd      	mov	sp, r7
    1be6:	b004      	add	sp, #16
    1be8:	bd80      	pop	{r7, pc}

00001bea <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    1bea:	b580      	push	{r7, lr}
    1bec:	b084      	sub	sp, #16
    1bee:	af00      	add	r7, sp, #0
    1bf0:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1bf2:	687b      	ldr	r3, [r7, #4]
    1bf4:	681b      	ldr	r3, [r3, #0]
    1bf6:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1bf8:	68fb      	ldr	r3, [r7, #12]
    1bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1bfc:	b29a      	uxth	r2, r3
    1bfe:	230a      	movs	r3, #10
    1c00:	18fb      	adds	r3, r7, r3
    1c02:	05d2      	lsls	r2, r2, #23
    1c04:	0dd2      	lsrs	r2, r2, #23
    1c06:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c0c:	220a      	movs	r2, #10
    1c0e:	18ba      	adds	r2, r7, r2
    1c10:	8812      	ldrh	r2, [r2, #0]
    1c12:	b2d2      	uxtb	r2, r2
    1c14:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1c16:	687b      	ldr	r3, [r7, #4]
    1c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c1a:	1c5a      	adds	r2, r3, #1
    1c1c:	687b      	ldr	r3, [r7, #4]
    1c1e:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1c20:	687b      	ldr	r3, [r7, #4]
    1c22:	799b      	ldrb	r3, [r3, #6]
    1c24:	2b01      	cmp	r3, #1
    1c26:	d10d      	bne.n	1c44 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c2c:	220a      	movs	r2, #10
    1c2e:	18ba      	adds	r2, r7, r2
    1c30:	8812      	ldrh	r2, [r2, #0]
    1c32:	0a12      	lsrs	r2, r2, #8
    1c34:	b292      	uxth	r2, r2
    1c36:	b2d2      	uxtb	r2, r2
    1c38:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    1c3a:	687b      	ldr	r3, [r7, #4]
    1c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c3e:	1c5a      	adds	r2, r3, #1
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    1c48:	b29b      	uxth	r3, r3
    1c4a:	3b01      	subs	r3, #1
    1c4c:	b29a      	uxth	r2, r3
    1c4e:	687b      	ldr	r3, [r7, #4]
    1c50:	861a      	strh	r2, [r3, #48]	; 0x30
}
    1c52:	46c0      	nop			; (mov r8, r8)
    1c54:	46bd      	mov	sp, r7
    1c56:	b004      	add	sp, #16
    1c58:	bd80      	pop	{r7, pc}
	...

00001c5c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1c5c:	b580      	push	{r7, lr}
    1c5e:	b086      	sub	sp, #24
    1c60:	af00      	add	r7, sp, #0
    1c62:	0002      	movs	r2, r0
    1c64:	1dfb      	adds	r3, r7, #7
    1c66:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    1c68:	1dfb      	adds	r3, r7, #7
    1c6a:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    1c6c:	4bb9      	ldr	r3, [pc, #740]	; (1f54 <_spi_interrupt_handler+0x2f8>)
    1c6e:	0092      	lsls	r2, r2, #2
    1c70:	58d3      	ldr	r3, [r2, r3]
    1c72:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1c74:	697b      	ldr	r3, [r7, #20]
    1c76:	681b      	ldr	r3, [r3, #0]
    1c78:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1c7a:	697b      	ldr	r3, [r7, #20]
    1c7c:	2237      	movs	r2, #55	; 0x37
    1c7e:	5c9a      	ldrb	r2, [r3, r2]
    1c80:	697b      	ldr	r3, [r7, #20]
    1c82:	2136      	movs	r1, #54	; 0x36
    1c84:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    1c86:	230f      	movs	r3, #15
    1c88:	18fb      	adds	r3, r7, r3
    1c8a:	400a      	ands	r2, r1
    1c8c:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1c8e:	693b      	ldr	r3, [r7, #16]
    1c90:	7e1b      	ldrb	r3, [r3, #24]
    1c92:	b2da      	uxtb	r2, r3
    1c94:	230c      	movs	r3, #12
    1c96:	18fb      	adds	r3, r7, r3
    1c98:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    1c9a:	693b      	ldr	r3, [r7, #16]
    1c9c:	7d9b      	ldrb	r3, [r3, #22]
    1c9e:	b2db      	uxtb	r3, r3
    1ca0:	b29a      	uxth	r2, r3
    1ca2:	230c      	movs	r3, #12
    1ca4:	18fb      	adds	r3, r7, r3
    1ca6:	210c      	movs	r1, #12
    1ca8:	1879      	adds	r1, r7, r1
    1caa:	8809      	ldrh	r1, [r1, #0]
    1cac:	400a      	ands	r2, r1
    1cae:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1cb0:	230c      	movs	r3, #12
    1cb2:	18fb      	adds	r3, r7, r3
    1cb4:	881b      	ldrh	r3, [r3, #0]
    1cb6:	2201      	movs	r2, #1
    1cb8:	4013      	ands	r3, r2
    1cba:	d041      	beq.n	1d40 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1cbc:	697b      	ldr	r3, [r7, #20]
    1cbe:	795b      	ldrb	r3, [r3, #5]
    1cc0:	2b01      	cmp	r3, #1
    1cc2:	d110      	bne.n	1ce6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    1cc4:	697b      	ldr	r3, [r7, #20]
    1cc6:	7a5b      	ldrb	r3, [r3, #9]
    1cc8:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    1cca:	2b00      	cmp	r3, #0
    1ccc:	d10b      	bne.n	1ce6 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    1cce:	697b      	ldr	r3, [r7, #20]
    1cd0:	0018      	movs	r0, r3
    1cd2:	4ba1      	ldr	r3, [pc, #644]	; (1f58 <_spi_interrupt_handler+0x2fc>)
    1cd4:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    1cd6:	697b      	ldr	r3, [r7, #20]
    1cd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1cda:	b29b      	uxth	r3, r3
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d102      	bne.n	1ce6 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1ce0:	693b      	ldr	r3, [r7, #16]
    1ce2:	2201      	movs	r2, #1
    1ce4:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1ce6:	697b      	ldr	r3, [r7, #20]
    1ce8:	795b      	ldrb	r3, [r3, #5]
		if (0
    1cea:	2b01      	cmp	r3, #1
    1cec:	d104      	bne.n	1cf8 <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    1cee:	697b      	ldr	r3, [r7, #20]
    1cf0:	7a5b      	ldrb	r3, [r3, #9]
    1cf2:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d108      	bne.n	1d0a <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1cf8:	697b      	ldr	r3, [r7, #20]
    1cfa:	795b      	ldrb	r3, [r3, #5]
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d11f      	bne.n	1d40 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    1d00:	697b      	ldr	r3, [r7, #20]
    1d02:	7a5b      	ldrb	r3, [r3, #9]
    1d04:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1d06:	2b00      	cmp	r3, #0
    1d08:	d01a      	beq.n	1d40 <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    1d0a:	697b      	ldr	r3, [r7, #20]
    1d0c:	0018      	movs	r0, r3
    1d0e:	4b93      	ldr	r3, [pc, #588]	; (1f5c <_spi_interrupt_handler+0x300>)
    1d10:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    1d12:	697b      	ldr	r3, [r7, #20]
    1d14:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    1d16:	b29b      	uxth	r3, r3
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d111      	bne.n	1d40 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1d1c:	693b      	ldr	r3, [r7, #16]
    1d1e:	2201      	movs	r2, #1
    1d20:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    1d22:	697b      	ldr	r3, [r7, #20]
    1d24:	7a5b      	ldrb	r3, [r3, #9]
    1d26:	b2db      	uxtb	r3, r3
    1d28:	2b01      	cmp	r3, #1
    1d2a:	d109      	bne.n	1d40 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    1d2c:	697b      	ldr	r3, [r7, #20]
    1d2e:	79db      	ldrb	r3, [r3, #7]
    1d30:	2201      	movs	r2, #1
    1d32:	4053      	eors	r3, r2
    1d34:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    1d36:	2b00      	cmp	r3, #0
    1d38:	d002      	beq.n	1d40 <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1d3a:	693b      	ldr	r3, [r7, #16]
    1d3c:	2202      	movs	r2, #2
    1d3e:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1d40:	230c      	movs	r3, #12
    1d42:	18fb      	adds	r3, r7, r3
    1d44:	881b      	ldrh	r3, [r3, #0]
    1d46:	2204      	movs	r2, #4
    1d48:	4013      	ands	r3, r2
    1d4a:	d100      	bne.n	1d4e <_spi_interrupt_handler+0xf2>
    1d4c:	e07e      	b.n	1e4c <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1d4e:	693b      	ldr	r3, [r7, #16]
    1d50:	8b5b      	ldrh	r3, [r3, #26]
    1d52:	b29b      	uxth	r3, r3
    1d54:	001a      	movs	r2, r3
    1d56:	2304      	movs	r3, #4
    1d58:	4013      	ands	r3, r2
    1d5a:	d022      	beq.n	1da2 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1d5c:	697b      	ldr	r3, [r7, #20]
    1d5e:	7a5b      	ldrb	r3, [r3, #9]
    1d60:	b2db      	uxtb	r3, r3
    1d62:	2b01      	cmp	r3, #1
    1d64:	d014      	beq.n	1d90 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1d66:	697b      	ldr	r3, [r7, #20]
    1d68:	2238      	movs	r2, #56	; 0x38
    1d6a:	211e      	movs	r1, #30
    1d6c:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1d6e:	697b      	ldr	r3, [r7, #20]
    1d70:	2203      	movs	r2, #3
    1d72:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1d74:	693b      	ldr	r3, [r7, #16]
    1d76:	2205      	movs	r2, #5
    1d78:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1d7a:	230f      	movs	r3, #15
    1d7c:	18fb      	adds	r3, r7, r3
    1d7e:	781b      	ldrb	r3, [r3, #0]
    1d80:	2208      	movs	r2, #8
    1d82:	4013      	ands	r3, r2
    1d84:	d004      	beq.n	1d90 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1d86:	697b      	ldr	r3, [r7, #20]
    1d88:	699b      	ldr	r3, [r3, #24]
    1d8a:	697a      	ldr	r2, [r7, #20]
    1d8c:	0010      	movs	r0, r2
    1d8e:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1d90:	693b      	ldr	r3, [r7, #16]
    1d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d94:	230a      	movs	r3, #10
    1d96:	18fb      	adds	r3, r7, r3
    1d98:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1d9a:	693b      	ldr	r3, [r7, #16]
    1d9c:	2204      	movs	r2, #4
    1d9e:	835a      	strh	r2, [r3, #26]
    1da0:	e054      	b.n	1e4c <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    1da2:	697b      	ldr	r3, [r7, #20]
    1da4:	7a5b      	ldrb	r3, [r3, #9]
    1da6:	b2db      	uxtb	r3, r3
    1da8:	2b01      	cmp	r3, #1
    1daa:	d11e      	bne.n	1dea <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    1dac:	697b      	ldr	r3, [r7, #20]
    1dae:	0018      	movs	r0, r3
    1db0:	4b6b      	ldr	r3, [pc, #428]	; (1f60 <_spi_interrupt_handler+0x304>)
    1db2:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    1db4:	697b      	ldr	r3, [r7, #20]
    1db6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1db8:	b29b      	uxth	r3, r3
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d146      	bne.n	1e4c <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1dbe:	693b      	ldr	r3, [r7, #16]
    1dc0:	2204      	movs	r2, #4
    1dc2:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    1dc4:	697b      	ldr	r3, [r7, #20]
    1dc6:	2238      	movs	r2, #56	; 0x38
    1dc8:	2100      	movs	r1, #0
    1dca:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    1dcc:	697b      	ldr	r3, [r7, #20]
    1dce:	2203      	movs	r2, #3
    1dd0:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    1dd2:	230f      	movs	r3, #15
    1dd4:	18fb      	adds	r3, r7, r3
    1dd6:	781b      	ldrb	r3, [r3, #0]
    1dd8:	2201      	movs	r2, #1
    1dda:	4013      	ands	r3, r2
    1ddc:	d036      	beq.n	1e4c <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1dde:	697b      	ldr	r3, [r7, #20]
    1de0:	68db      	ldr	r3, [r3, #12]
    1de2:	697a      	ldr	r2, [r7, #20]
    1de4:	0010      	movs	r0, r2
    1de6:	4798      	blx	r3
    1de8:	e030      	b.n	1e4c <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    1dea:	697b      	ldr	r3, [r7, #20]
    1dec:	0018      	movs	r0, r3
    1dee:	4b5d      	ldr	r3, [pc, #372]	; (1f64 <_spi_interrupt_handler+0x308>)
    1df0:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    1df2:	697b      	ldr	r3, [r7, #20]
    1df4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    1df6:	b29b      	uxth	r3, r3
    1df8:	2b00      	cmp	r3, #0
    1dfa:	d127      	bne.n	1e4c <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    1dfc:	697b      	ldr	r3, [r7, #20]
    1dfe:	2238      	movs	r2, #56	; 0x38
    1e00:	2100      	movs	r1, #0
    1e02:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1e04:	693b      	ldr	r3, [r7, #16]
    1e06:	2204      	movs	r2, #4
    1e08:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1e0a:	697b      	ldr	r3, [r7, #20]
    1e0c:	7a5b      	ldrb	r3, [r3, #9]
    1e0e:	b2db      	uxtb	r3, r3
    1e10:	2b02      	cmp	r3, #2
    1e12:	d10b      	bne.n	1e2c <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1e14:	230f      	movs	r3, #15
    1e16:	18fb      	adds	r3, r7, r3
    1e18:	781b      	ldrb	r3, [r3, #0]
    1e1a:	2204      	movs	r2, #4
    1e1c:	4013      	ands	r3, r2
    1e1e:	d015      	beq.n	1e4c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1e20:	697b      	ldr	r3, [r7, #20]
    1e22:	695b      	ldr	r3, [r3, #20]
    1e24:	697a      	ldr	r2, [r7, #20]
    1e26:	0010      	movs	r0, r2
    1e28:	4798      	blx	r3
    1e2a:	e00f      	b.n	1e4c <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    1e2c:	697b      	ldr	r3, [r7, #20]
    1e2e:	7a5b      	ldrb	r3, [r3, #9]
    1e30:	b2db      	uxtb	r3, r3
    1e32:	2b00      	cmp	r3, #0
    1e34:	d10a      	bne.n	1e4c <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1e36:	230f      	movs	r3, #15
    1e38:	18fb      	adds	r3, r7, r3
    1e3a:	781b      	ldrb	r3, [r3, #0]
    1e3c:	2202      	movs	r2, #2
    1e3e:	4013      	ands	r3, r2
    1e40:	d004      	beq.n	1e4c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1e42:	697b      	ldr	r3, [r7, #20]
    1e44:	691b      	ldr	r3, [r3, #16]
    1e46:	697a      	ldr	r2, [r7, #20]
    1e48:	0010      	movs	r0, r2
    1e4a:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1e4c:	230c      	movs	r3, #12
    1e4e:	18fb      	adds	r3, r7, r3
    1e50:	881b      	ldrh	r3, [r3, #0]
    1e52:	2202      	movs	r2, #2
    1e54:	4013      	ands	r3, r2
    1e56:	d046      	beq.n	1ee6 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1e58:	697b      	ldr	r3, [r7, #20]
    1e5a:	795b      	ldrb	r3, [r3, #5]
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d11d      	bne.n	1e9c <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1e60:	693b      	ldr	r3, [r7, #16]
    1e62:	2207      	movs	r2, #7
    1e64:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1e66:	693b      	ldr	r3, [r7, #16]
    1e68:	2202      	movs	r2, #2
    1e6a:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1e6c:	697b      	ldr	r3, [r7, #20]
    1e6e:	2203      	movs	r2, #3
    1e70:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    1e72:	697b      	ldr	r3, [r7, #20]
    1e74:	2200      	movs	r2, #0
    1e76:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1e78:	697b      	ldr	r3, [r7, #20]
    1e7a:	2200      	movs	r2, #0
    1e7c:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    1e7e:	697b      	ldr	r3, [r7, #20]
    1e80:	2238      	movs	r2, #56	; 0x38
    1e82:	2100      	movs	r1, #0
    1e84:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    1e86:	230f      	movs	r3, #15
    1e88:	18fb      	adds	r3, r7, r3
    1e8a:	781b      	ldrb	r3, [r3, #0]
    1e8c:	2210      	movs	r2, #16
    1e8e:	4013      	ands	r3, r2
    1e90:	d004      	beq.n	1e9c <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1e92:	697b      	ldr	r3, [r7, #20]
    1e94:	69db      	ldr	r3, [r3, #28]
    1e96:	697a      	ldr	r2, [r7, #20]
    1e98:	0010      	movs	r0, r2
    1e9a:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1e9c:	697b      	ldr	r3, [r7, #20]
    1e9e:	795b      	ldrb	r3, [r3, #5]
    1ea0:	2b01      	cmp	r3, #1
    1ea2:	d120      	bne.n	1ee6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1ea4:	697b      	ldr	r3, [r7, #20]
    1ea6:	7a5b      	ldrb	r3, [r3, #9]
    1ea8:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    1eaa:	2b01      	cmp	r3, #1
    1eac:	d11b      	bne.n	1ee6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1eae:	697b      	ldr	r3, [r7, #20]
    1eb0:	79db      	ldrb	r3, [r3, #7]
    1eb2:	2201      	movs	r2, #1
    1eb4:	4053      	eors	r3, r2
    1eb6:	b2db      	uxtb	r3, r3
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d014      	beq.n	1ee6 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1ebc:	693b      	ldr	r3, [r7, #16]
    1ebe:	2202      	movs	r2, #2
    1ec0:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    1ec2:	697b      	ldr	r3, [r7, #20]
    1ec4:	2203      	movs	r2, #3
    1ec6:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    1ec8:	697b      	ldr	r3, [r7, #20]
    1eca:	2238      	movs	r2, #56	; 0x38
    1ecc:	2100      	movs	r1, #0
    1ece:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1ed0:	230f      	movs	r3, #15
    1ed2:	18fb      	adds	r3, r7, r3
    1ed4:	781b      	ldrb	r3, [r3, #0]
    1ed6:	2201      	movs	r2, #1
    1ed8:	4013      	ands	r3, r2
    1eda:	d004      	beq.n	1ee6 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1edc:	697b      	ldr	r3, [r7, #20]
    1ede:	68db      	ldr	r3, [r3, #12]
    1ee0:	697a      	ldr	r2, [r7, #20]
    1ee2:	0010      	movs	r0, r2
    1ee4:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1ee6:	230c      	movs	r3, #12
    1ee8:	18fb      	adds	r3, r7, r3
    1eea:	881b      	ldrh	r3, [r3, #0]
    1eec:	2208      	movs	r2, #8
    1eee:	4013      	ands	r3, r2
    1ef0:	d014      	beq.n	1f1c <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    1ef2:	697b      	ldr	r3, [r7, #20]
    1ef4:	795b      	ldrb	r3, [r3, #5]
    1ef6:	2b00      	cmp	r3, #0
    1ef8:	d110      	bne.n	1f1c <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1efa:	693b      	ldr	r3, [r7, #16]
    1efc:	2208      	movs	r2, #8
    1efe:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1f00:	693b      	ldr	r3, [r7, #16]
    1f02:	2208      	movs	r2, #8
    1f04:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1f06:	230f      	movs	r3, #15
    1f08:	18fb      	adds	r3, r7, r3
    1f0a:	781b      	ldrb	r3, [r3, #0]
    1f0c:	2220      	movs	r2, #32
    1f0e:	4013      	ands	r3, r2
    1f10:	d004      	beq.n	1f1c <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1f12:	697b      	ldr	r3, [r7, #20]
    1f14:	6a1b      	ldr	r3, [r3, #32]
    1f16:	697a      	ldr	r2, [r7, #20]
    1f18:	0010      	movs	r0, r2
    1f1a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1f1c:	230c      	movs	r3, #12
    1f1e:	18fb      	adds	r3, r7, r3
    1f20:	881b      	ldrh	r3, [r3, #0]
    1f22:	2280      	movs	r2, #128	; 0x80
    1f24:	4013      	ands	r3, r2
    1f26:	d010      	beq.n	1f4a <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1f28:	693b      	ldr	r3, [r7, #16]
    1f2a:	2280      	movs	r2, #128	; 0x80
    1f2c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1f2e:	693b      	ldr	r3, [r7, #16]
    1f30:	2280      	movs	r2, #128	; 0x80
    1f32:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1f34:	230f      	movs	r3, #15
    1f36:	18fb      	adds	r3, r7, r3
    1f38:	781b      	ldrb	r3, [r3, #0]
    1f3a:	2240      	movs	r2, #64	; 0x40
    1f3c:	4013      	ands	r3, r2
    1f3e:	d004      	beq.n	1f4a <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1f40:	697b      	ldr	r3, [r7, #20]
    1f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1f44:	697a      	ldr	r2, [r7, #20]
    1f46:	0010      	movs	r0, r2
    1f48:	4798      	blx	r3
		}
	}
#  endif
}
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	46bd      	mov	sp, r7
    1f4e:	b006      	add	sp, #24
    1f50:	bd80      	pop	{r7, pc}
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	200003bc 	.word	0x200003bc
    1f58:	00001b81 	.word	0x00001b81
    1f5c:	00001b05 	.word	0x00001b05
    1f60:	00001bb5 	.word	0x00001bb5
    1f64:	00001beb 	.word	0x00001beb

00001f68 <hdc1080_read_reg>:
 * @reg: Register address
 * @val: 16-bit register value from the hdc1080
 * Returns status or error for invalid parameters.
 */
int hdc1080_read_reg(uint16_t delay, uint8_t reg, uint16_t *val)
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	b088      	sub	sp, #32
    1f6c:	af00      	add	r7, sp, #0
    1f6e:	603a      	str	r2, [r7, #0]
    1f70:	1dbb      	adds	r3, r7, #6
    1f72:	1c02      	adds	r2, r0, #0
    1f74:	801a      	strh	r2, [r3, #0]
    1f76:	1d7b      	adds	r3, r7, #5
    1f78:	1c0a      	adds	r2, r1, #0
    1f7a:	701a      	strb	r2, [r3, #0]
	
	int error = STAT_OK;
    1f7c:	2300      	movs	r3, #0
    1f7e:	61fb      	str	r3, [r7, #28]
	uint8_t write_buffer[2];

	// Check argument
	if ((reg != HDC1080_TEMPERATURE) &
    1f80:	1d7b      	adds	r3, r7, #5
    1f82:	781b      	ldrb	r3, [r3, #0]
    1f84:	1e5a      	subs	r2, r3, #1
    1f86:	4193      	sbcs	r3, r2
    1f88:	b2db      	uxtb	r3, r3
    1f8a:	1d7a      	adds	r2, r7, #5
    1f8c:	7812      	ldrb	r2, [r2, #0]
    1f8e:	3a01      	subs	r2, #1
    1f90:	1e51      	subs	r1, r2, #1
    1f92:	418a      	sbcs	r2, r1
    1f94:	b2d2      	uxtb	r2, r2
    1f96:	4013      	ands	r3, r2
    1f98:	b2db      	uxtb	r3, r3
    1f9a:	001a      	movs	r2, r3
		  (reg != HDC1080_HUMIDITY) &
		  (reg != HDC1080_CONFIG)){
    1f9c:	1d7b      	adds	r3, r7, #5
    1f9e:	781b      	ldrb	r3, [r3, #0]
    1fa0:	3b02      	subs	r3, #2
    1fa2:	1e59      	subs	r1, r3, #1
    1fa4:	418b      	sbcs	r3, r1
    1fa6:	b2db      	uxtb	r3, r3
		  (reg != HDC1080_HUMIDITY) &
    1fa8:	4013      	ands	r3, r2
	if ((reg != HDC1080_TEMPERATURE) &
    1faa:	d001      	beq.n	1fb0 <hdc1080_read_reg+0x48>
		return STAT_ERR;
    1fac:	2301      	movs	r3, #1
    1fae:	e079      	b.n	20a4 <STACK_SIZE+0xa4>
		printf("HDC ERROR Invalid register\r\n");
		}
	
	write_buffer[0] = reg;
    1fb0:	2310      	movs	r3, #16
    1fb2:	18fb      	adds	r3, r7, r3
    1fb4:	1d7a      	adds	r2, r7, #5
    1fb6:	7812      	ldrb	r2, [r2, #0]
    1fb8:	701a      	strb	r2, [r3, #0]
	/* Read register */
	/* Send the read followed by address */
	
	wr_packet.address = HDC1080_ADDR;
    1fba:	4b3c      	ldr	r3, [pc, #240]	; (20ac <STACK_SIZE+0xac>)
    1fbc:	2240      	movs	r2, #64	; 0x40
    1fbe:	801a      	strh	r2, [r3, #0]
	wr_packet.data_length = 2;
    1fc0:	4b3a      	ldr	r3, [pc, #232]	; (20ac <STACK_SIZE+0xac>)
    1fc2:	2202      	movs	r2, #2
    1fc4:	805a      	strh	r2, [r3, #2]
	wr_packet.data = write_buffer;
    1fc6:	4b39      	ldr	r3, [pc, #228]	; (20ac <STACK_SIZE+0xac>)
    1fc8:	2210      	movs	r2, #16
    1fca:	18ba      	adds	r2, r7, r2
    1fcc:	605a      	str	r2, [r3, #4]
	int timeout = 0;
    1fce:	2300      	movs	r3, #0
    1fd0:	61bb      	str	r3, [r7, #24]
	int max_timeout = 1000;
    1fd2:	23fa      	movs	r3, #250	; 0xfa
    1fd4:	009b      	lsls	r3, r3, #2
    1fd6:	617b      	str	r3, [r7, #20]

	while (i2c_master_write_packet_wait(&i2c_hdc_instance, &wr_packet) !=
    1fd8:	e00c      	b.n	1ff4 <hdc1080_read_reg+0x8c>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == max_timeout) {
    1fda:	69bb      	ldr	r3, [r7, #24]
    1fdc:	1c5a      	adds	r2, r3, #1
    1fde:	61ba      	str	r2, [r7, #24]
    1fe0:	697a      	ldr	r2, [r7, #20]
    1fe2:	4293      	cmp	r3, r2
    1fe4:	d106      	bne.n	1ff4 <hdc1080_read_reg+0x8c>
			error = STAT_ERR;
    1fe6:	2301      	movs	r3, #1
    1fe8:	61fb      	str	r3, [r7, #28]
			printf("HDC WRITE TIMEOUT\r\n");
    1fea:	4b31      	ldr	r3, [pc, #196]	; (20b0 <STACK_SIZE+0xb0>)
    1fec:	0018      	movs	r0, r3
    1fee:	4b31      	ldr	r3, [pc, #196]	; (20b4 <STACK_SIZE+0xb4>)
    1ff0:	4798      	blx	r3
			break;
    1ff2:	e007      	b.n	2004 <STACK_SIZE+0x4>
	while (i2c_master_write_packet_wait(&i2c_hdc_instance, &wr_packet) !=
    1ff4:	4a2d      	ldr	r2, [pc, #180]	; (20ac <STACK_SIZE+0xac>)
    1ff6:	4b30      	ldr	r3, [pc, #192]	; (20b8 <STACK_SIZE+0xb8>)
    1ff8:	0011      	movs	r1, r2
    1ffa:	0018      	movs	r0, r3
    1ffc:	4b2f      	ldr	r3, [pc, #188]	; (20bc <STACK_SIZE+0xbc>)
    1ffe:	4798      	blx	r3
    2000:	1e03      	subs	r3, r0, #0
    2002:	d1ea      	bne.n	1fda <hdc1080_read_reg+0x72>
		}
	}
	if (error != STAT_OK)
    2004:	69fb      	ldr	r3, [r7, #28]
    2006:	2b00      	cmp	r3, #0
    2008:	d001      	beq.n	200e <STACK_SIZE+0xe>
		return error;
    200a:	69fb      	ldr	r3, [r7, #28]
    200c:	e04a      	b.n	20a4 <STACK_SIZE+0xa4>

	delay_ms(delay); 
    200e:	1dbb      	adds	r3, r7, #6
    2010:	881b      	ldrh	r3, [r3, #0]
    2012:	2b00      	cmp	r3, #0
    2014:	d005      	beq.n	2022 <STACK_SIZE+0x22>
    2016:	1dbb      	adds	r3, r7, #6
    2018:	881b      	ldrh	r3, [r3, #0]
    201a:	0018      	movs	r0, r3
    201c:	4b28      	ldr	r3, [pc, #160]	; (20c0 <STACK_SIZE+0xc0>)
    201e:	4798      	blx	r3
    2020:	e002      	b.n	2028 <STACK_SIZE+0x28>
    2022:	2001      	movs	r0, #1
    2024:	4b27      	ldr	r3, [pc, #156]	; (20c4 <STACK_SIZE+0xc4>)
    2026:	4798      	blx	r3
	
	/* Receive a 2-byte result */
	
	uint8_t read_buffer[3];
	read_buffer[0] = reg;
    2028:	230c      	movs	r3, #12
    202a:	18fb      	adds	r3, r7, r3
    202c:	1d7a      	adds	r2, r7, #5
    202e:	7812      	ldrb	r2, [r2, #0]
    2030:	701a      	strb	r2, [r3, #0]
	rd_packet.address = HDC1080_ADDR;
    2032:	4b25      	ldr	r3, [pc, #148]	; (20c8 <STACK_SIZE+0xc8>)
    2034:	2240      	movs	r2, #64	; 0x40
    2036:	801a      	strh	r2, [r3, #0]
	rd_packet.data_length = 3;
    2038:	4b23      	ldr	r3, [pc, #140]	; (20c8 <STACK_SIZE+0xc8>)
    203a:	2203      	movs	r2, #3
    203c:	805a      	strh	r2, [r3, #2]
	rd_packet.data = read_buffer;
    203e:	4b22      	ldr	r3, [pc, #136]	; (20c8 <STACK_SIZE+0xc8>)
    2040:	220c      	movs	r2, #12
    2042:	18ba      	adds	r2, r7, r2
    2044:	605a      	str	r2, [r3, #4]
	timeout = 0;
    2046:	2300      	movs	r3, #0
    2048:	61bb      	str	r3, [r7, #24]
	max_timeout = 1000;
    204a:	23fa      	movs	r3, #250	; 0xfa
    204c:	009b      	lsls	r3, r3, #2
    204e:	617b      	str	r3, [r7, #20]
	while (i2c_master_read_packet_wait(&i2c_hdc_instance, &rd_packet) !=
    2050:	e00c      	b.n	206c <STACK_SIZE+0x6c>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == max_timeout) {
    2052:	69bb      	ldr	r3, [r7, #24]
    2054:	1c5a      	adds	r2, r3, #1
    2056:	61ba      	str	r2, [r7, #24]
    2058:	697a      	ldr	r2, [r7, #20]
    205a:	4293      	cmp	r3, r2
    205c:	d106      	bne.n	206c <STACK_SIZE+0x6c>
			printf("HDC READ TIMEOUT\r\n");
    205e:	4b1b      	ldr	r3, [pc, #108]	; (20cc <STACK_SIZE+0xcc>)
    2060:	0018      	movs	r0, r3
    2062:	4b14      	ldr	r3, [pc, #80]	; (20b4 <STACK_SIZE+0xb4>)
    2064:	4798      	blx	r3
			error = STAT_ERR;
    2066:	2301      	movs	r3, #1
    2068:	61fb      	str	r3, [r7, #28]
			break;
    206a:	e007      	b.n	207c <STACK_SIZE+0x7c>
	while (i2c_master_read_packet_wait(&i2c_hdc_instance, &rd_packet) !=
    206c:	4a16      	ldr	r2, [pc, #88]	; (20c8 <STACK_SIZE+0xc8>)
    206e:	4b12      	ldr	r3, [pc, #72]	; (20b8 <STACK_SIZE+0xb8>)
    2070:	0011      	movs	r1, r2
    2072:	0018      	movs	r0, r3
    2074:	4b16      	ldr	r3, [pc, #88]	; (20d0 <STACK_SIZE+0xd0>)
    2076:	4798      	blx	r3
    2078:	1e03      	subs	r3, r0, #0
    207a:	d1ea      	bne.n	2052 <STACK_SIZE+0x52>
		}
	}
	
	
	if (error != STAT_OK)
    207c:	69fb      	ldr	r3, [r7, #28]
    207e:	2b00      	cmp	r3, #0
    2080:	d001      	beq.n	2086 <STACK_SIZE+0x86>
		return error;
    2082:	69fb      	ldr	r3, [r7, #28]
    2084:	e00e      	b.n	20a4 <STACK_SIZE+0xa4>
	
	/* Result */
	*val = read_buffer[0]*256+read_buffer[1]; 
    2086:	230c      	movs	r3, #12
    2088:	18fb      	adds	r3, r7, r3
    208a:	781b      	ldrb	r3, [r3, #0]
    208c:	b29b      	uxth	r3, r3
    208e:	021b      	lsls	r3, r3, #8
    2090:	b29a      	uxth	r2, r3
    2092:	230c      	movs	r3, #12
    2094:	18fb      	adds	r3, r7, r3
    2096:	785b      	ldrb	r3, [r3, #1]
    2098:	b29b      	uxth	r3, r3
    209a:	18d3      	adds	r3, r2, r3
    209c:	b29a      	uxth	r2, r3
    209e:	683b      	ldr	r3, [r7, #0]
    20a0:	801a      	strh	r2, [r3, #0]

	return STAT_OK;  /* Success */
    20a2:	2300      	movs	r3, #0
	
}
    20a4:	0018      	movs	r0, r3
    20a6:	46bd      	mov	sp, r7
    20a8:	b008      	add	sp, #32
    20aa:	bd80      	pop	{r7, pc}
    20ac:	20000008 	.word	0x20000008
    20b0:	0000e200 	.word	0x0000e200
    20b4:	00009a55 	.word	0x00009a55
    20b8:	20000340 	.word	0x20000340
    20bc:	00003c25 	.word	0x00003c25
    20c0:	000028a1 	.word	0x000028a1
    20c4:	00002871 	.word	0x00002871
    20c8:	20000014 	.word	0x20000014
    20cc:	0000e214 	.word	0x0000e214
    20d0:	00003a6d 	.word	0x00003a6d

000020d4 <hdc1080_write_reg>:
 * @reg: Register address
 * @val: 8-bit register value from the Si7013
 * Returns  status or error for invalid arguments.
 */
int hdc1080_write_reg(uint8_t reg, uint16_t val)
{
    20d4:	b580      	push	{r7, lr}
    20d6:	b086      	sub	sp, #24
    20d8:	af00      	add	r7, sp, #0
    20da:	0002      	movs	r2, r0
    20dc:	1dfb      	adds	r3, r7, #7
    20de:	701a      	strb	r2, [r3, #0]
    20e0:	1d3b      	adds	r3, r7, #4
    20e2:	1c0a      	adds	r2, r1, #0
    20e4:	801a      	strh	r2, [r3, #0]
	uint8_t write_buffer[3];
	int error = STAT_OK;
    20e6:	2300      	movs	r3, #0
    20e8:	617b      	str	r3, [r7, #20]
	
		// Check argument
	if ((reg != HDC1080_TEMPERATURE) &  // dummy write to adr 0 ... trigger measurement
    20ea:	1dfb      	adds	r3, r7, #7
    20ec:	781b      	ldrb	r3, [r3, #0]
    20ee:	1e5a      	subs	r2, r3, #1
    20f0:	4193      	sbcs	r3, r2
    20f2:	b2db      	uxtb	r3, r3
    20f4:	1dfa      	adds	r2, r7, #7
    20f6:	7812      	ldrb	r2, [r2, #0]
    20f8:	3a02      	subs	r2, #2
    20fa:	1e51      	subs	r1, r2, #1
    20fc:	418a      	sbcs	r2, r1
    20fe:	b2d2      	uxtb	r2, r2
    2100:	4013      	ands	r3, r2
    2102:	b2db      	uxtb	r3, r3
    2104:	2b00      	cmp	r3, #0
    2106:	d001      	beq.n	210c <hdc1080_write_reg+0x38>
		  (reg != HDC1080_CONFIG) )       // config is "writable"
		return STAT_ERR;
    2108:	2301      	movs	r3, #1
    210a:	e03d      	b.n	2188 <hdc1080_write_reg+0xb4>

	write_buffer[0] = reg;
    210c:	2308      	movs	r3, #8
    210e:	18fb      	adds	r3, r7, r3
    2110:	1dfa      	adds	r2, r7, #7
    2112:	7812      	ldrb	r2, [r2, #0]
    2114:	701a      	strb	r2, [r3, #0]
	write_buffer[1] = (uint8_t)((val >> 8) & 0xff);  // msb
    2116:	1d3b      	adds	r3, r7, #4
    2118:	881b      	ldrh	r3, [r3, #0]
    211a:	0a1b      	lsrs	r3, r3, #8
    211c:	b29b      	uxth	r3, r3
    211e:	b2da      	uxtb	r2, r3
    2120:	2308      	movs	r3, #8
    2122:	18fb      	adds	r3, r7, r3
    2124:	705a      	strb	r2, [r3, #1]
	write_buffer[2] = (uint8_t)(val & 0xff); 				// lsb
    2126:	1d3b      	adds	r3, r7, #4
    2128:	881b      	ldrh	r3, [r3, #0]
    212a:	b2da      	uxtb	r2, r3
    212c:	2308      	movs	r3, #8
    212e:	18fb      	adds	r3, r7, r3
    2130:	709a      	strb	r2, [r3, #2]
	/* Write the register */
	/* Send the command and data */
	
	wr_packet.address = HDC1080_ADDR;
    2132:	4b17      	ldr	r3, [pc, #92]	; (2190 <hdc1080_write_reg+0xbc>)
    2134:	2240      	movs	r2, #64	; 0x40
    2136:	801a      	strh	r2, [r3, #0]
	wr_packet.data_length = 2;
    2138:	4b15      	ldr	r3, [pc, #84]	; (2190 <hdc1080_write_reg+0xbc>)
    213a:	2202      	movs	r2, #2
    213c:	805a      	strh	r2, [r3, #2]
	wr_packet.data = write_buffer;
    213e:	4b14      	ldr	r3, [pc, #80]	; (2190 <hdc1080_write_reg+0xbc>)
    2140:	2208      	movs	r2, #8
    2142:	18ba      	adds	r2, r7, r2
    2144:	605a      	str	r2, [r3, #4]
	int timeout = 0;
    2146:	2300      	movs	r3, #0
    2148:	613b      	str	r3, [r7, #16]
	int max_timeout = 1000;
    214a:	23fa      	movs	r3, #250	; 0xfa
    214c:	009b      	lsls	r3, r3, #2
    214e:	60fb      	str	r3, [r7, #12]
	
	while (i2c_master_write_packet_wait(&i2c_hdc_instance, &wr_packet) !=
    2150:	e00c      	b.n	216c <hdc1080_write_reg+0x98>
	STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == max_timeout) {
    2152:	693b      	ldr	r3, [r7, #16]
    2154:	1c5a      	adds	r2, r3, #1
    2156:	613a      	str	r2, [r7, #16]
    2158:	68fa      	ldr	r2, [r7, #12]
    215a:	4293      	cmp	r3, r2
    215c:	d106      	bne.n	216c <hdc1080_write_reg+0x98>
			printf("HDC WRITE TIMEOUT\r\n");
    215e:	4b0d      	ldr	r3, [pc, #52]	; (2194 <hdc1080_write_reg+0xc0>)
    2160:	0018      	movs	r0, r3
    2162:	4b0d      	ldr	r3, [pc, #52]	; (2198 <hdc1080_write_reg+0xc4>)
    2164:	4798      	blx	r3
			error = STAT_ERR;
    2166:	2301      	movs	r3, #1
    2168:	617b      	str	r3, [r7, #20]
			break;
    216a:	e007      	b.n	217c <hdc1080_write_reg+0xa8>
	while (i2c_master_write_packet_wait(&i2c_hdc_instance, &wr_packet) !=
    216c:	4a08      	ldr	r2, [pc, #32]	; (2190 <hdc1080_write_reg+0xbc>)
    216e:	4b0b      	ldr	r3, [pc, #44]	; (219c <hdc1080_write_reg+0xc8>)
    2170:	0011      	movs	r1, r2
    2172:	0018      	movs	r0, r3
    2174:	4b0a      	ldr	r3, [pc, #40]	; (21a0 <hdc1080_write_reg+0xcc>)
    2176:	4798      	blx	r3
    2178:	1e03      	subs	r3, r0, #0
    217a:	d1ea      	bne.n	2152 <hdc1080_write_reg+0x7e>
		}
	}
	if (error != STAT_OK)
    217c:	697b      	ldr	r3, [r7, #20]
    217e:	2b00      	cmp	r3, #0
    2180:	d001      	beq.n	2186 <hdc1080_write_reg+0xb2>
		return error;
    2182:	697b      	ldr	r3, [r7, #20]
    2184:	e000      	b.n	2188 <hdc1080_write_reg+0xb4>
  else 
	  return STAT_OK;  /* Success */
    2186:	2300      	movs	r3, #0
}
    2188:	0018      	movs	r0, r3
    218a:	46bd      	mov	sp, r7
    218c:	b006      	add	sp, #24
    218e:	bd80      	pop	{r7, pc}
    2190:	20000008 	.word	0x20000008
    2194:	0000e200 	.word	0x0000e200
    2198:	00009a55 	.word	0x00009a55
    219c:	20000340 	.word	0x20000340
    21a0:	00003c25 	.word	0x00003c25

000021a4 <hdc1080_measure>:
 * @temperature :  floating point temperature result, unit is ?C
 * @humidity    :  floating point humidity result, unit is RH%
 * Returns status.
 */
int hdc1080_measure(double *temperature, double *humidity)
{
    21a4:	b590      	push	{r4, r7, lr}
    21a6:	b089      	sub	sp, #36	; 0x24
    21a8:	af00      	add	r7, sp, #0
    21aa:	6078      	str	r0, [r7, #4]
    21ac:	6039      	str	r1, [r7, #0]

	int error = STAT_OK;
    21ae:	2300      	movs	r3, #0
    21b0:	617b      	str	r3, [r7, #20]
	
	uint16_t r;
	double tmp;
	
	uint8_t temp_res = HDC1080_T_RES_14;
    21b2:	2313      	movs	r3, #19
    21b4:	18fb      	adds	r3, r7, r3
    21b6:	2200      	movs	r2, #0
    21b8:	701a      	strb	r2, [r3, #0]
	uint8_t humidres = HDC1080_RH_RES_14;
    21ba:	2312      	movs	r3, #18
    21bc:	18fb      	adds	r3, r7, r3
    21be:	2200      	movs	r2, #0
    21c0:	701a      	strb	r2, [r3, #0]
	uint8_t heater = 0; //heater off
    21c2:	2311      	movs	r3, #17
    21c4:	18fb      	adds	r3, r7, r3
    21c6:	2200      	movs	r2, #0
    21c8:	701a      	strb	r2, [r3, #0]
	
	
	error = hdc1080_read_reg(10, HDC1080_CONFIG, &r);
    21ca:	230e      	movs	r3, #14
    21cc:	18fb      	adds	r3, r7, r3
    21ce:	001a      	movs	r2, r3
    21d0:	2102      	movs	r1, #2
    21d2:	200a      	movs	r0, #10
    21d4:	4b77      	ldr	r3, [pc, #476]	; (23b4 <hdc1080_measure+0x210>)
    21d6:	4798      	blx	r3
    21d8:	0003      	movs	r3, r0
    21da:	617b      	str	r3, [r7, #20]
	if (error != STAT_OK) {
    21dc:	697b      	ldr	r3, [r7, #20]
    21de:	2b00      	cmp	r3, #0
    21e0:	d005      	beq.n	21ee <hdc1080_measure+0x4a>
		printf("HDC Read Config Error\r\n");
    21e2:	4b75      	ldr	r3, [pc, #468]	; (23b8 <hdc1080_measure+0x214>)
    21e4:	0018      	movs	r0, r3
    21e6:	4b75      	ldr	r3, [pc, #468]	; (23bc <hdc1080_measure+0x218>)
    21e8:	4798      	blx	r3
		return error;
    21ea:	697b      	ldr	r3, [r7, #20]
    21ec:	e0de      	b.n	23ac <hdc1080_measure+0x208>
	}

	r |= temp_res<<10;
    21ee:	2313      	movs	r3, #19
    21f0:	18fb      	adds	r3, r7, r3
    21f2:	781b      	ldrb	r3, [r3, #0]
    21f4:	029b      	lsls	r3, r3, #10
    21f6:	b21a      	sxth	r2, r3
    21f8:	230e      	movs	r3, #14
    21fa:	18fb      	adds	r3, r7, r3
    21fc:	881b      	ldrh	r3, [r3, #0]
    21fe:	b21b      	sxth	r3, r3
    2200:	4313      	orrs	r3, r2
    2202:	b21b      	sxth	r3, r3
    2204:	b29a      	uxth	r2, r3
    2206:	230e      	movs	r3, #14
    2208:	18fb      	adds	r3, r7, r3
    220a:	801a      	strh	r2, [r3, #0]
	r |= humidres<<8;
    220c:	2312      	movs	r3, #18
    220e:	18fb      	adds	r3, r7, r3
    2210:	781b      	ldrb	r3, [r3, #0]
    2212:	021b      	lsls	r3, r3, #8
    2214:	b21a      	sxth	r2, r3
    2216:	230e      	movs	r3, #14
    2218:	18fb      	adds	r3, r7, r3
    221a:	881b      	ldrh	r3, [r3, #0]
    221c:	b21b      	sxth	r3, r3
    221e:	4313      	orrs	r3, r2
    2220:	b21b      	sxth	r3, r3
    2222:	b29a      	uxth	r2, r3
    2224:	230e      	movs	r3, #14
    2226:	18fb      	adds	r3, r7, r3
    2228:	801a      	strh	r2, [r3, #0]
	r |= 1<<12;     // mode = 1;
    222a:	230e      	movs	r3, #14
    222c:	18fb      	adds	r3, r7, r3
    222e:	881b      	ldrh	r3, [r3, #0]
    2230:	2280      	movs	r2, #128	; 0x80
    2232:	0152      	lsls	r2, r2, #5
    2234:	4313      	orrs	r3, r2
    2236:	b29a      	uxth	r2, r3
    2238:	230e      	movs	r3, #14
    223a:	18fb      	adds	r3, r7, r3
    223c:	801a      	strh	r2, [r3, #0]
	r |= heater<<13;
    223e:	2311      	movs	r3, #17
    2240:	18fb      	adds	r3, r7, r3
    2242:	781b      	ldrb	r3, [r3, #0]
    2244:	035b      	lsls	r3, r3, #13
    2246:	b21a      	sxth	r2, r3
    2248:	230e      	movs	r3, #14
    224a:	18fb      	adds	r3, r7, r3
    224c:	881b      	ldrh	r3, [r3, #0]
    224e:	b21b      	sxth	r3, r3
    2250:	4313      	orrs	r3, r2
    2252:	b21b      	sxth	r3, r3
    2254:	b29a      	uxth	r2, r3
    2256:	230e      	movs	r3, #14
    2258:	18fb      	adds	r3, r7, r3
    225a:	801a      	strh	r2, [r3, #0]
	
	
	// write config
	error = hdc1080_write_reg(HDC1080_CONFIG, r);
    225c:	230e      	movs	r3, #14
    225e:	18fb      	adds	r3, r7, r3
    2260:	881b      	ldrh	r3, [r3, #0]
    2262:	0019      	movs	r1, r3
    2264:	2002      	movs	r0, #2
    2266:	4b56      	ldr	r3, [pc, #344]	; (23c0 <hdc1080_measure+0x21c>)
    2268:	4798      	blx	r3
    226a:	0003      	movs	r3, r0
    226c:	617b      	str	r3, [r7, #20]
	if (error != STAT_OK) {
    226e:	697b      	ldr	r3, [r7, #20]
    2270:	2b00      	cmp	r3, #0
    2272:	d005      	beq.n	2280 <hdc1080_measure+0xdc>
		printf("HDC Write Config Error\r\n");
    2274:	4b53      	ldr	r3, [pc, #332]	; (23c4 <hdc1080_measure+0x220>)
    2276:	0018      	movs	r0, r3
    2278:	4b50      	ldr	r3, [pc, #320]	; (23bc <hdc1080_measure+0x218>)
    227a:	4798      	blx	r3
		return error;
    227c:	697b      	ldr	r3, [r7, #20]
    227e:	e095      	b.n	23ac <hdc1080_measure+0x208>
	}
	

	error = hdc1080_read_reg(150, HDC1080_TEMPERATURE, &r);
    2280:	230e      	movs	r3, #14
    2282:	18fb      	adds	r3, r7, r3
    2284:	001a      	movs	r2, r3
    2286:	2100      	movs	r1, #0
    2288:	2096      	movs	r0, #150	; 0x96
    228a:	4b4a      	ldr	r3, [pc, #296]	; (23b4 <hdc1080_measure+0x210>)
    228c:	4798      	blx	r3
    228e:	0003      	movs	r3, r0
    2290:	617b      	str	r3, [r7, #20]
	if (error != STAT_OK) {
    2292:	697b      	ldr	r3, [r7, #20]
    2294:	2b00      	cmp	r3, #0
    2296:	d005      	beq.n	22a4 <hdc1080_measure+0x100>
		printf("HDC Read Temp Error\r\n");
    2298:	4b4b      	ldr	r3, [pc, #300]	; (23c8 <hdc1080_measure+0x224>)
    229a:	0018      	movs	r0, r3
    229c:	4b47      	ldr	r3, [pc, #284]	; (23bc <hdc1080_measure+0x218>)
    229e:	4798      	blx	r3
		return error;
    22a0:	697b      	ldr	r3, [r7, #20]
    22a2:	e083      	b.n	23ac <hdc1080_measure+0x208>
	}
	tmp = (double)r;
    22a4:	230e      	movs	r3, #14
    22a6:	18fb      	adds	r3, r7, r3
    22a8:	881a      	ldrh	r2, [r3, #0]
    22aa:	4b48      	ldr	r3, [pc, #288]	; (23cc <hdc1080_measure+0x228>)
    22ac:	0010      	movs	r0, r2
    22ae:	4798      	blx	r3
    22b0:	0003      	movs	r3, r0
    22b2:	000c      	movs	r4, r1
    22b4:	61bb      	str	r3, [r7, #24]
    22b6:	61fc      	str	r4, [r7, #28]
	tmp = (tmp / 65536.0f) * 165.0f - 40.0f;
    22b8:	4c45      	ldr	r4, [pc, #276]	; (23d0 <hdc1080_measure+0x22c>)
    22ba:	2200      	movs	r2, #0
    22bc:	4b45      	ldr	r3, [pc, #276]	; (23d4 <hdc1080_measure+0x230>)
    22be:	69b8      	ldr	r0, [r7, #24]
    22c0:	69f9      	ldr	r1, [r7, #28]
    22c2:	47a0      	blx	r4
    22c4:	0003      	movs	r3, r0
    22c6:	000c      	movs	r4, r1
    22c8:	0018      	movs	r0, r3
    22ca:	0021      	movs	r1, r4
    22cc:	4c42      	ldr	r4, [pc, #264]	; (23d8 <hdc1080_measure+0x234>)
    22ce:	2200      	movs	r2, #0
    22d0:	4b42      	ldr	r3, [pc, #264]	; (23dc <hdc1080_measure+0x238>)
    22d2:	47a0      	blx	r4
    22d4:	0003      	movs	r3, r0
    22d6:	000c      	movs	r4, r1
    22d8:	0018      	movs	r0, r3
    22da:	0021      	movs	r1, r4
    22dc:	4c40      	ldr	r4, [pc, #256]	; (23e0 <hdc1080_measure+0x23c>)
    22de:	2200      	movs	r2, #0
    22e0:	4b40      	ldr	r3, [pc, #256]	; (23e4 <hdc1080_measure+0x240>)
    22e2:	47a0      	blx	r4
    22e4:	0003      	movs	r3, r0
    22e6:	000c      	movs	r4, r1
    22e8:	61bb      	str	r3, [r7, #24]
    22ea:	61fc      	str	r4, [r7, #28]
	*temperature = tmp;  // C
    22ec:	687a      	ldr	r2, [r7, #4]
    22ee:	69bb      	ldr	r3, [r7, #24]
    22f0:	69fc      	ldr	r4, [r7, #28]
    22f2:	6013      	str	r3, [r2, #0]
    22f4:	6054      	str	r4, [r2, #4]
	
	error = hdc1080_read_reg(150, HDC1080_HUMIDITY, &r);
    22f6:	230e      	movs	r3, #14
    22f8:	18fb      	adds	r3, r7, r3
    22fa:	001a      	movs	r2, r3
    22fc:	2101      	movs	r1, #1
    22fe:	2096      	movs	r0, #150	; 0x96
    2300:	4b2c      	ldr	r3, [pc, #176]	; (23b4 <hdc1080_measure+0x210>)
    2302:	4798      	blx	r3
    2304:	0003      	movs	r3, r0
    2306:	617b      	str	r3, [r7, #20]
	tmp = (int32_t)r;
    2308:	230e      	movs	r3, #14
    230a:	18fb      	adds	r3, r7, r3
    230c:	881b      	ldrh	r3, [r3, #0]
    230e:	001a      	movs	r2, r3
    2310:	4b35      	ldr	r3, [pc, #212]	; (23e8 <hdc1080_measure+0x244>)
    2312:	0010      	movs	r0, r2
    2314:	4798      	blx	r3
    2316:	0003      	movs	r3, r0
    2318:	000c      	movs	r4, r1
    231a:	61bb      	str	r3, [r7, #24]
    231c:	61fc      	str	r4, [r7, #28]
	
	if (error != STAT_OK){
    231e:	697b      	ldr	r3, [r7, #20]
    2320:	2b00      	cmp	r3, #0
    2322:	d005      	beq.n	2330 <hdc1080_measure+0x18c>
		printf("HDC Read Humidity Error\r\n");
    2324:	4b31      	ldr	r3, [pc, #196]	; (23ec <hdc1080_measure+0x248>)
    2326:	0018      	movs	r0, r3
    2328:	4b24      	ldr	r3, [pc, #144]	; (23bc <hdc1080_measure+0x218>)
    232a:	4798      	blx	r3
		 return error;
    232c:	697b      	ldr	r3, [r7, #20]
    232e:	e03d      	b.n	23ac <hdc1080_measure+0x208>
	}
	tmp = (float)r;
    2330:	230e      	movs	r3, #14
    2332:	18fb      	adds	r3, r7, r3
    2334:	881a      	ldrh	r2, [r3, #0]
    2336:	4b2e      	ldr	r3, [pc, #184]	; (23f0 <hdc1080_measure+0x24c>)
    2338:	0010      	movs	r0, r2
    233a:	4798      	blx	r3
    233c:	1c02      	adds	r2, r0, #0
    233e:	4b2d      	ldr	r3, [pc, #180]	; (23f4 <hdc1080_measure+0x250>)
    2340:	1c10      	adds	r0, r2, #0
    2342:	4798      	blx	r3
    2344:	0003      	movs	r3, r0
    2346:	000c      	movs	r4, r1
    2348:	61bb      	str	r3, [r7, #24]
    234a:	61fc      	str	r4, [r7, #28]
	tmp = (tmp / 65536.0f) * 100.0f;
    234c:	4c20      	ldr	r4, [pc, #128]	; (23d0 <hdc1080_measure+0x22c>)
    234e:	2200      	movs	r2, #0
    2350:	4b20      	ldr	r3, [pc, #128]	; (23d4 <hdc1080_measure+0x230>)
    2352:	69b8      	ldr	r0, [r7, #24]
    2354:	69f9      	ldr	r1, [r7, #28]
    2356:	47a0      	blx	r4
    2358:	0003      	movs	r3, r0
    235a:	000c      	movs	r4, r1
    235c:	0018      	movs	r0, r3
    235e:	0021      	movs	r1, r4
    2360:	4c1d      	ldr	r4, [pc, #116]	; (23d8 <hdc1080_measure+0x234>)
    2362:	2200      	movs	r2, #0
    2364:	4b24      	ldr	r3, [pc, #144]	; (23f8 <hdc1080_measure+0x254>)
    2366:	47a0      	blx	r4
    2368:	0003      	movs	r3, r0
    236a:	000c      	movs	r4, r1
    236c:	61bb      	str	r3, [r7, #24]
    236e:	61fc      	str	r4, [r7, #28]
	if (tmp>100.0) tmp = 100.0f;
    2370:	4c22      	ldr	r4, [pc, #136]	; (23fc <hdc1080_measure+0x258>)
    2372:	2200      	movs	r2, #0
    2374:	4b20      	ldr	r3, [pc, #128]	; (23f8 <hdc1080_measure+0x254>)
    2376:	69b8      	ldr	r0, [r7, #24]
    2378:	69f9      	ldr	r1, [r7, #28]
    237a:	47a0      	blx	r4
    237c:	1e03      	subs	r3, r0, #0
    237e:	d003      	beq.n	2388 <hdc1080_measure+0x1e4>
    2380:	2300      	movs	r3, #0
    2382:	4c1d      	ldr	r4, [pc, #116]	; (23f8 <hdc1080_measure+0x254>)
    2384:	61bb      	str	r3, [r7, #24]
    2386:	61fc      	str	r4, [r7, #28]
	if (tmp<0) tmp = 0.0f;
    2388:	4c1d      	ldr	r4, [pc, #116]	; (2400 <hdc1080_measure+0x25c>)
    238a:	2200      	movs	r2, #0
    238c:	2300      	movs	r3, #0
    238e:	69b8      	ldr	r0, [r7, #24]
    2390:	69f9      	ldr	r1, [r7, #28]
    2392:	47a0      	blx	r4
    2394:	1e03      	subs	r3, r0, #0
    2396:	d003      	beq.n	23a0 <hdc1080_measure+0x1fc>
    2398:	2300      	movs	r3, #0
    239a:	2400      	movs	r4, #0
    239c:	61bb      	str	r3, [r7, #24]
    239e:	61fc      	str	r4, [r7, #28]
	*humidity = tmp;
    23a0:	683a      	ldr	r2, [r7, #0]
    23a2:	69bb      	ldr	r3, [r7, #24]
    23a4:	69fc      	ldr	r4, [r7, #28]
    23a6:	6013      	str	r3, [r2, #0]
    23a8:	6054      	str	r4, [r2, #4]
	
	return STAT_OK;
    23aa:	2300      	movs	r3, #0
}
    23ac:	0018      	movs	r0, r3
    23ae:	46bd      	mov	sp, r7
    23b0:	b009      	add	sp, #36	; 0x24
    23b2:	bd90      	pop	{r4, r7, pc}
    23b4:	00001f69 	.word	0x00001f69
    23b8:	0000e228 	.word	0x0000e228
    23bc:	00009a55 	.word	0x00009a55
    23c0:	000020d5 	.word	0x000020d5
    23c4:	0000e240 	.word	0x0000e240
    23c8:	0000e258 	.word	0x0000e258
    23cc:	0000df4d 	.word	0x0000df4d
    23d0:	0000ca8d 	.word	0x0000ca8d
    23d4:	40f00000 	.word	0x40f00000
    23d8:	0000d2f5 	.word	0x0000d2f5
    23dc:	4064a000 	.word	0x4064a000
    23e0:	0000d7f5 	.word	0x0000d7f5
    23e4:	40440000 	.word	0x40440000
    23e8:	0000dec9 	.word	0x0000dec9
    23ec:	0000e270 	.word	0x0000e270
    23f0:	0000c3e1 	.word	0x0000c3e1
    23f4:	0000dfbd 	.word	0x0000dfbd
    23f8:	40590000 	.word	0x40590000
    23fc:	0000bdf5 	.word	0x0000bdf5
    2400:	0000bdcd 	.word	0x0000bdcd

00002404 <write8>:

int is_init = false;


void write8(uint8_t reg, uint8_t value)
{
    2404:	b580      	push	{r7, lr}
    2406:	b086      	sub	sp, #24
    2408:	af00      	add	r7, sp, #0
    240a:	0002      	movs	r2, r0
    240c:	1dfb      	adds	r3, r7, #7
    240e:	701a      	strb	r2, [r3, #0]
    2410:	1dbb      	adds	r3, r7, #6
    2412:	1c0a      	adds	r2, r1, #0
    2414:	701a      	strb	r2, [r3, #0]
	if(is_init) {
    2416:	4b19      	ldr	r3, [pc, #100]	; (247c <write8+0x78>)
    2418:	681b      	ldr	r3, [r3, #0]
    241a:	2b00      	cmp	r3, #0
    241c:	d029      	beq.n	2472 <write8+0x6e>
		uint8_t write_buffer[2] = {reg, value};
    241e:	230c      	movs	r3, #12
    2420:	18fb      	adds	r3, r7, r3
    2422:	1dfa      	adds	r2, r7, #7
    2424:	7812      	ldrb	r2, [r2, #0]
    2426:	701a      	strb	r2, [r3, #0]
    2428:	230c      	movs	r3, #12
    242a:	18fb      	adds	r3, r7, r3
    242c:	1dba      	adds	r2, r7, #6
    242e:	7812      	ldrb	r2, [r2, #0]
    2430:	705a      	strb	r2, [r3, #1]
		wr_packet.address = TSL2561_ADDR_FLOAT;
    2432:	4b13      	ldr	r3, [pc, #76]	; (2480 <write8+0x7c>)
    2434:	2239      	movs	r2, #57	; 0x39
    2436:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 2;
    2438:	4b11      	ldr	r3, [pc, #68]	; (2480 <write8+0x7c>)
    243a:	2202      	movs	r2, #2
    243c:	805a      	strh	r2, [r3, #2]
		wr_packet.data = write_buffer;
    243e:	4b10      	ldr	r3, [pc, #64]	; (2480 <write8+0x7c>)
    2440:	220c      	movs	r2, #12
    2442:	18ba      	adds	r2, r7, r2
    2444:	605a      	str	r2, [r3, #4]
		int timeout = 0;
    2446:	2300      	movs	r3, #0
    2448:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
    244a:	23fa      	movs	r3, #250	; 0xfa
    244c:	009b      	lsls	r3, r3, #2
    244e:	613b      	str	r3, [r7, #16]
		
		while (i2c_master_write_packet_wait(&i2c_tsl_instance, &wr_packet) !=
    2450:	e005      	b.n	245e <write8+0x5a>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
    2452:	697b      	ldr	r3, [r7, #20]
    2454:	1c5a      	adds	r2, r3, #1
    2456:	617a      	str	r2, [r7, #20]
    2458:	693a      	ldr	r2, [r7, #16]
    245a:	4293      	cmp	r3, r2
    245c:	d008      	beq.n	2470 <write8+0x6c>
		while (i2c_master_write_packet_wait(&i2c_tsl_instance, &wr_packet) !=
    245e:	4a08      	ldr	r2, [pc, #32]	; (2480 <write8+0x7c>)
    2460:	4b08      	ldr	r3, [pc, #32]	; (2484 <write8+0x80>)
    2462:	0011      	movs	r1, r2
    2464:	0018      	movs	r0, r3
    2466:	4b08      	ldr	r3, [pc, #32]	; (2488 <write8+0x84>)
    2468:	4798      	blx	r3
    246a:	1e03      	subs	r3, r0, #0
    246c:	d1f1      	bne.n	2452 <write8+0x4e>
				break;
			}
		}
		
	}
}
    246e:	e000      	b.n	2472 <write8+0x6e>
				break;
    2470:	46c0      	nop			; (mov r8, r8)
}
    2472:	46c0      	nop			; (mov r8, r8)
    2474:	46bd      	mov	sp, r7
    2476:	b006      	add	sp, #24
    2478:	bd80      	pop	{r7, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	20000274 	.word	0x20000274
    2480:	20000028 	.word	0x20000028
    2484:	2000030c 	.word	0x2000030c
    2488:	00003c25 	.word	0x00003c25

0000248c <enable>:

void enable(void)
{
    248c:	b580      	push	{r7, lr}
    248e:	af00      	add	r7, sp, #0
	/* Enable the device by setting the control bit to 0x03 */
	write8((TSL2561_COMMAND_BIT | TSL2561_REGISTER_CONTROL), TSL2561_CONTROL_POWERON);
    2490:	2103      	movs	r1, #3
    2492:	2080      	movs	r0, #128	; 0x80
    2494:	4b02      	ldr	r3, [pc, #8]	; (24a0 <enable+0x14>)
    2496:	4798      	blx	r3
}
    2498:	46c0      	nop			; (mov r8, r8)
    249a:	46bd      	mov	sp, r7
    249c:	bd80      	pop	{r7, pc}
    249e:	46c0      	nop			; (mov r8, r8)
    24a0:	00002405 	.word	0x00002405

000024a4 <disable>:

void disable(void)
{
    24a4:	b580      	push	{r7, lr}
    24a6:	af00      	add	r7, sp, #0
	/* Turn the device off to save power */
	write8(TSL2561_COMMAND_BIT | TSL2561_REGISTER_CONTROL, TSL2561_CONTROL_POWEROFF);
    24a8:	2100      	movs	r1, #0
    24aa:	2080      	movs	r0, #128	; 0x80
    24ac:	4b02      	ldr	r3, [pc, #8]	; (24b8 <disable+0x14>)
    24ae:	4798      	blx	r3
}
    24b0:	46c0      	nop			; (mov r8, r8)
    24b2:	46bd      	mov	sp, r7
    24b4:	bd80      	pop	{r7, pc}
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	00002405 	.word	0x00002405

000024bc <read8_reg>:

uint8_t read8_reg(uint8_t reg) {
    24bc:	b580      	push	{r7, lr}
    24be:	b086      	sub	sp, #24
    24c0:	af00      	add	r7, sp, #0
    24c2:	0002      	movs	r2, r0
    24c4:	1dfb      	adds	r3, r7, #7
    24c6:	701a      	strb	r2, [r3, #0]
	if(is_init) {
    24c8:	4b1a      	ldr	r3, [pc, #104]	; (2534 <read8_reg+0x78>)
    24ca:	681b      	ldr	r3, [r3, #0]
    24cc:	2b00      	cmp	r3, #0
    24ce:	d02c      	beq.n	252a <read8_reg+0x6e>
		enable();
    24d0:	4b19      	ldr	r3, [pc, #100]	; (2538 <read8_reg+0x7c>)
    24d2:	4798      	blx	r3
		uint8_t read_buffer[2];
		read_buffer[0] = reg;
    24d4:	230c      	movs	r3, #12
    24d6:	18fb      	adds	r3, r7, r3
    24d8:	1dfa      	adds	r2, r7, #7
    24da:	7812      	ldrb	r2, [r2, #0]
    24dc:	701a      	strb	r2, [r3, #0]
		rd_packet.address = TSL2561_ADDR_FLOAT;
    24de:	4b17      	ldr	r3, [pc, #92]	; (253c <read8_reg+0x80>)
    24e0:	2239      	movs	r2, #57	; 0x39
    24e2:	801a      	strh	r2, [r3, #0]
		rd_packet.data_length = 2;
    24e4:	4b15      	ldr	r3, [pc, #84]	; (253c <read8_reg+0x80>)
    24e6:	2202      	movs	r2, #2
    24e8:	805a      	strh	r2, [r3, #2]
		rd_packet.data = read_buffer;
    24ea:	4b14      	ldr	r3, [pc, #80]	; (253c <read8_reg+0x80>)
    24ec:	220c      	movs	r2, #12
    24ee:	18ba      	adds	r2, r7, r2
    24f0:	605a      	str	r2, [r3, #4]
		int timeout = 0;
    24f2:	2300      	movs	r3, #0
    24f4:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
    24f6:	23fa      	movs	r3, #250	; 0xfa
    24f8:	009b      	lsls	r3, r3, #2
    24fa:	613b      	str	r3, [r7, #16]
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    24fc:	e005      	b.n	250a <read8_reg+0x4e>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
    24fe:	697b      	ldr	r3, [r7, #20]
    2500:	1c5a      	adds	r2, r3, #1
    2502:	617a      	str	r2, [r7, #20]
    2504:	693a      	ldr	r2, [r7, #16]
    2506:	4293      	cmp	r3, r2
    2508:	d008      	beq.n	251c <read8_reg+0x60>
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    250a:	4a0c      	ldr	r2, [pc, #48]	; (253c <read8_reg+0x80>)
    250c:	4b0c      	ldr	r3, [pc, #48]	; (2540 <read8_reg+0x84>)
    250e:	0011      	movs	r1, r2
    2510:	0018      	movs	r0, r3
    2512:	4b0c      	ldr	r3, [pc, #48]	; (2544 <read8_reg+0x88>)
    2514:	4798      	blx	r3
    2516:	1e03      	subs	r3, r0, #0
    2518:	d1f1      	bne.n	24fe <read8_reg+0x42>
    251a:	e000      	b.n	251e <read8_reg+0x62>
				break;
    251c:	46c0      	nop			; (mov r8, r8)
			}
		}
		
		disable();
    251e:	4b0a      	ldr	r3, [pc, #40]	; (2548 <read8_reg+0x8c>)
    2520:	4798      	blx	r3
		return read_buffer[1];
    2522:	230c      	movs	r3, #12
    2524:	18fb      	adds	r3, r7, r3
    2526:	785b      	ldrb	r3, [r3, #1]
    2528:	e000      	b.n	252c <read8_reg+0x70>
	}
	return 0;
    252a:	2300      	movs	r3, #0
}
    252c:	0018      	movs	r0, r3
    252e:	46bd      	mov	sp, r7
    2530:	b006      	add	sp, #24
    2532:	bd80      	pop	{r7, pc}
    2534:	20000274 	.word	0x20000274
    2538:	0000248d 	.word	0x0000248d
    253c:	20000034 	.word	0x20000034
    2540:	2000030c 	.word	0x2000030c
    2544:	00003a6d 	.word	0x00003a6d
    2548:	000024a5 	.word	0x000024a5

0000254c <read16_reg>:

uint16_t read16_reg(uint8_t reg) {
    254c:	b580      	push	{r7, lr}
    254e:	b086      	sub	sp, #24
    2550:	af00      	add	r7, sp, #0
    2552:	0002      	movs	r2, r0
    2554:	1dfb      	adds	r3, r7, #7
    2556:	701a      	strb	r2, [r3, #0]
	if(is_init) {
    2558:	4b28      	ldr	r3, [pc, #160]	; (25fc <read16_reg+0xb0>)
    255a:	681b      	ldr	r3, [r3, #0]
    255c:	2b00      	cmp	r3, #0
    255e:	d047      	beq.n	25f0 <read16_reg+0xa4>
		enable();
    2560:	4b27      	ldr	r3, [pc, #156]	; (2600 <read16_reg+0xb4>)
    2562:	4798      	blx	r3
		uint8_t read_buffer[3];
		read_buffer[0] = reg;
    2564:	2308      	movs	r3, #8
    2566:	18fb      	adds	r3, r7, r3
    2568:	1dfa      	adds	r2, r7, #7
    256a:	7812      	ldrb	r2, [r2, #0]
    256c:	701a      	strb	r2, [r3, #0]
		rd_packet.address = TSL2561_ADDR_FLOAT;
    256e:	4b25      	ldr	r3, [pc, #148]	; (2604 <read16_reg+0xb8>)
    2570:	2239      	movs	r2, #57	; 0x39
    2572:	801a      	strh	r2, [r3, #0]
		rd_packet.data_length = 3;
    2574:	4b23      	ldr	r3, [pc, #140]	; (2604 <read16_reg+0xb8>)
    2576:	2203      	movs	r2, #3
    2578:	805a      	strh	r2, [r3, #2]
		rd_packet.data = read_buffer;
    257a:	4b22      	ldr	r3, [pc, #136]	; (2604 <read16_reg+0xb8>)
    257c:	2208      	movs	r2, #8
    257e:	18ba      	adds	r2, r7, r2
    2580:	605a      	str	r2, [r3, #4]
		int timeout = 0;
    2582:	2300      	movs	r3, #0
    2584:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
    2586:	23fa      	movs	r3, #250	; 0xfa
    2588:	009b      	lsls	r3, r3, #2
    258a:	613b      	str	r3, [r7, #16]
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    258c:	e005      	b.n	259a <read16_reg+0x4e>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
    258e:	697b      	ldr	r3, [r7, #20]
    2590:	1c5a      	adds	r2, r3, #1
    2592:	617a      	str	r2, [r7, #20]
    2594:	693a      	ldr	r2, [r7, #16]
    2596:	4293      	cmp	r3, r2
    2598:	d008      	beq.n	25ac <read16_reg+0x60>
		while (i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet) !=
    259a:	4a1a      	ldr	r2, [pc, #104]	; (2604 <read16_reg+0xb8>)
    259c:	4b1a      	ldr	r3, [pc, #104]	; (2608 <read16_reg+0xbc>)
    259e:	0011      	movs	r1, r2
    25a0:	0018      	movs	r0, r3
    25a2:	4b1a      	ldr	r3, [pc, #104]	; (260c <read16_reg+0xc0>)
    25a4:	4798      	blx	r3
    25a6:	1e03      	subs	r3, r0, #0
    25a8:	d1f1      	bne.n	258e <read16_reg+0x42>
    25aa:	e000      	b.n	25ae <read16_reg+0x62>
				break;
    25ac:	46c0      	nop			; (mov r8, r8)
			}
		}
		uint8_t t = read_buffer[1];
    25ae:	230f      	movs	r3, #15
    25b0:	18fb      	adds	r3, r7, r3
    25b2:	2208      	movs	r2, #8
    25b4:	18ba      	adds	r2, r7, r2
    25b6:	7852      	ldrb	r2, [r2, #1]
    25b8:	701a      	strb	r2, [r3, #0]
		uint8_t x = read_buffer[2];
    25ba:	230e      	movs	r3, #14
    25bc:	18fb      	adds	r3, r7, r3
    25be:	2208      	movs	r2, #8
    25c0:	18ba      	adds	r2, r7, r2
    25c2:	7892      	ldrb	r2, [r2, #2]
    25c4:	701a      	strb	r2, [r3, #0]
		x <<= 8;
    25c6:	230e      	movs	r3, #14
    25c8:	18fb      	adds	r3, r7, r3
    25ca:	2200      	movs	r2, #0
    25cc:	701a      	strb	r2, [r3, #0]
		x |= t;
    25ce:	230e      	movs	r3, #14
    25d0:	18fb      	adds	r3, r7, r3
    25d2:	220e      	movs	r2, #14
    25d4:	18b9      	adds	r1, r7, r2
    25d6:	220f      	movs	r2, #15
    25d8:	18ba      	adds	r2, r7, r2
    25da:	7809      	ldrb	r1, [r1, #0]
    25dc:	7812      	ldrb	r2, [r2, #0]
    25de:	430a      	orrs	r2, r1
    25e0:	701a      	strb	r2, [r3, #0]
		disable();
    25e2:	4b0b      	ldr	r3, [pc, #44]	; (2610 <read16_reg+0xc4>)
    25e4:	4798      	blx	r3
		return x;
    25e6:	230e      	movs	r3, #14
    25e8:	18fb      	adds	r3, r7, r3
    25ea:	781b      	ldrb	r3, [r3, #0]
    25ec:	b29b      	uxth	r3, r3
    25ee:	e000      	b.n	25f2 <read16_reg+0xa6>
	}
	return 0;
    25f0:	2300      	movs	r3, #0
}
    25f2:	0018      	movs	r0, r3
    25f4:	46bd      	mov	sp, r7
    25f6:	b006      	add	sp, #24
    25f8:	bd80      	pop	{r7, pc}
    25fa:	46c0      	nop			; (mov r8, r8)
    25fc:	20000274 	.word	0x20000274
    2600:	0000248d 	.word	0x0000248d
    2604:	20000034 	.word	0x20000034
    2608:	2000030c 	.word	0x2000030c
    260c:	00003a6d 	.word	0x00003a6d
    2610:	000024a5 	.word	0x000024a5

00002614 <tsl2561_init>:

int tsl2561_init() {
    2614:	b590      	push	{r4, r7, lr}
    2616:	b083      	sub	sp, #12
    2618:	af00      	add	r7, sp, #0
	if(is_init) {
    261a:	4b0d      	ldr	r3, [pc, #52]	; (2650 <tsl2561_init+0x3c>)
    261c:	681b      	ldr	r3, [r3, #0]
    261e:	2b00      	cmp	r3, #0
    2620:	d001      	beq.n	2626 <tsl2561_init+0x12>
		return 1;
    2622:	2301      	movs	r3, #1
    2624:	e010      	b.n	2648 <tsl2561_init+0x34>
	}
	is_init = true;
    2626:	4b0a      	ldr	r3, [pc, #40]	; (2650 <tsl2561_init+0x3c>)
    2628:	2201      	movs	r2, #1
    262a:	601a      	str	r2, [r3, #0]
	  uint8_t x = read8_reg(TSL2561_REGISTER_ID);
    262c:	1dfc      	adds	r4, r7, #7
    262e:	200a      	movs	r0, #10
    2630:	4b08      	ldr	r3, [pc, #32]	; (2654 <tsl2561_init+0x40>)
    2632:	4798      	blx	r3
    2634:	0003      	movs	r3, r0
    2636:	7023      	strb	r3, [r4, #0]
	  if (x & 0xF0 != 0x10) { // ID code for TSL2561
    2638:	1dfb      	adds	r3, r7, #7
    263a:	781b      	ldrb	r3, [r3, #0]
    263c:	2201      	movs	r2, #1
    263e:	4013      	ands	r3, r2
    2640:	d001      	beq.n	2646 <tsl2561_init+0x32>
		  return 0;
    2642:	2300      	movs	r3, #0
    2644:	e000      	b.n	2648 <tsl2561_init+0x34>
	  }
	  return 1;
    2646:	2301      	movs	r3, #1
	
}
    2648:	0018      	movs	r0, r3
    264a:	46bd      	mov	sp, r7
    264c:	b003      	add	sp, #12
    264e:	bd90      	pop	{r4, r7, pc}
    2650:	20000274 	.word	0x20000274
    2654:	000024bd 	.word	0x000024bd

00002658 <calculateLux>:

int calculateLux(uint16_t broadband, uint16_t ir) {
    2658:	b580      	push	{r7, lr}
    265a:	b08c      	sub	sp, #48	; 0x30
    265c:	af00      	add	r7, sp, #0
    265e:	0002      	movs	r2, r0
    2660:	1dbb      	adds	r3, r7, #6
    2662:	801a      	strh	r2, [r3, #0]
    2664:	1d3b      	adds	r3, r7, #4
    2666:	1c0a      	adds	r2, r1, #0
    2668:	801a      	strh	r2, [r3, #0]

	/* Make sure the sensor isn't saturated! */
	uint16_t clipThreshold;

	/* Return 65536 lux if the sensor is saturated */
	if ((broadband > clipThreshold) || (ir > clipThreshold))
    266a:	1dba      	adds	r2, r7, #6
    266c:	2322      	movs	r3, #34	; 0x22
    266e:	18fb      	adds	r3, r7, r3
    2670:	8812      	ldrh	r2, [r2, #0]
    2672:	881b      	ldrh	r3, [r3, #0]
    2674:	429a      	cmp	r2, r3
    2676:	d806      	bhi.n	2686 <calculateLux+0x2e>
    2678:	1d3a      	adds	r2, r7, #4
    267a:	2322      	movs	r3, #34	; 0x22
    267c:	18fb      	adds	r3, r7, r3
    267e:	8812      	ldrh	r2, [r2, #0]
    2680:	881b      	ldrh	r3, [r3, #0]
    2682:	429a      	cmp	r2, r3
    2684:	d902      	bls.n	268c <calculateLux+0x34>
	{
		return 65536;
    2686:	2380      	movs	r3, #128	; 0x80
    2688:	025b      	lsls	r3, r3, #9
    268a:	e07b      	b.n	2784 <calculateLux+0x12c>
	}

	/* Scale the channel values */
	channel0 = (broadband * chScale) >> TSL2561_LUX_CHSCALE;
    268c:	1dbb      	adds	r3, r7, #6
    268e:	881b      	ldrh	r3, [r3, #0]
    2690:	69fa      	ldr	r2, [r7, #28]
    2692:	4353      	muls	r3, r2
    2694:	0a9b      	lsrs	r3, r3, #10
    2696:	61bb      	str	r3, [r7, #24]
	channel1 = (ir * chScale) >> TSL2561_LUX_CHSCALE;
    2698:	1d3b      	adds	r3, r7, #4
    269a:	881b      	ldrh	r3, [r3, #0]
    269c:	69fa      	ldr	r2, [r7, #28]
    269e:	4353      	muls	r3, r2
    26a0:	0a9b      	lsrs	r3, r3, #10
    26a2:	617b      	str	r3, [r7, #20]

	/* Find the ratio of the channel values (Channel1/Channel0) */
	unsigned long ratio1 = 0;
    26a4:	2300      	movs	r3, #0
    26a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (channel0 != 0) ratio1 = (channel1 << (TSL2561_LUX_RATIOSCALE+1)) / channel0;
    26a8:	69bb      	ldr	r3, [r7, #24]
    26aa:	2b00      	cmp	r3, #0
    26ac:	d007      	beq.n	26be <calculateLux+0x66>
    26ae:	697b      	ldr	r3, [r7, #20]
    26b0:	029a      	lsls	r2, r3, #10
    26b2:	4b36      	ldr	r3, [pc, #216]	; (278c <calculateLux+0x134>)
    26b4:	69b9      	ldr	r1, [r7, #24]
    26b6:	0010      	movs	r0, r2
    26b8:	4798      	blx	r3
    26ba:	0003      	movs	r3, r0
    26bc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* round the ratio value */
	unsigned long ratio = (ratio1 + 1) >> 1;
    26be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    26c0:	3301      	adds	r3, #1
    26c2:	085b      	lsrs	r3, r3, #1
    26c4:	613b      	str	r3, [r7, #16]
	else if (ratio <= TSL2561_LUX_K7C)
	{b=TSL2561_LUX_B7C; m=TSL2561_LUX_M7C;}
	else if (ratio > TSL2561_LUX_K8C)
	{b=TSL2561_LUX_B8C; m=TSL2561_LUX_M8C;}
	#else
	if ((ratio >= 0) && (ratio <= TSL2561_LUX_K1T))
    26c6:	693b      	ldr	r3, [r7, #16]
    26c8:	2b40      	cmp	r3, #64	; 0x40
    26ca:	d806      	bhi.n	26da <calculateLux+0x82>
	{b=TSL2561_LUX_B1T; m=TSL2561_LUX_M1T;}
    26cc:	23f9      	movs	r3, #249	; 0xf9
    26ce:	005b      	lsls	r3, r3, #1
    26d0:	62bb      	str	r3, [r7, #40]	; 0x28
    26d2:	23df      	movs	r3, #223	; 0xdf
    26d4:	005b      	lsls	r3, r3, #1
    26d6:	627b      	str	r3, [r7, #36]	; 0x24
    26d8:	e042      	b.n	2760 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K2T)
    26da:	693b      	ldr	r3, [r7, #16]
    26dc:	2b80      	cmp	r3, #128	; 0x80
    26de:	d805      	bhi.n	26ec <calculateLux+0x94>
	{b=TSL2561_LUX_B2T; m=TSL2561_LUX_M2T;}
    26e0:	2385      	movs	r3, #133	; 0x85
    26e2:	009b      	lsls	r3, r3, #2
    26e4:	62bb      	str	r3, [r7, #40]	; 0x28
    26e6:	4b2a      	ldr	r3, [pc, #168]	; (2790 <calculateLux+0x138>)
    26e8:	627b      	str	r3, [r7, #36]	; 0x24
    26ea:	e039      	b.n	2760 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K3T)
    26ec:	693b      	ldr	r3, [r7, #16]
    26ee:	2bc0      	cmp	r3, #192	; 0xc0
    26f0:	d804      	bhi.n	26fc <calculateLux+0xa4>
	{b=TSL2561_LUX_B3T; m=TSL2561_LUX_M3T;}
    26f2:	4b28      	ldr	r3, [pc, #160]	; (2794 <calculateLux+0x13c>)
    26f4:	62bb      	str	r3, [r7, #40]	; 0x28
    26f6:	4b28      	ldr	r3, [pc, #160]	; (2798 <calculateLux+0x140>)
    26f8:	627b      	str	r3, [r7, #36]	; 0x24
    26fa:	e031      	b.n	2760 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K4T)
    26fc:	693a      	ldr	r2, [r7, #16]
    26fe:	2380      	movs	r3, #128	; 0x80
    2700:	005b      	lsls	r3, r3, #1
    2702:	429a      	cmp	r2, r3
    2704:	d805      	bhi.n	2712 <calculateLux+0xba>
	{b=TSL2561_LUX_B4T; m=TSL2561_LUX_M4T;}
    2706:	239c      	movs	r3, #156	; 0x9c
    2708:	009b      	lsls	r3, r3, #2
    270a:	62bb      	str	r3, [r7, #40]	; 0x28
    270c:	4b23      	ldr	r3, [pc, #140]	; (279c <calculateLux+0x144>)
    270e:	627b      	str	r3, [r7, #36]	; 0x24
    2710:	e026      	b.n	2760 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K5T)
    2712:	693a      	ldr	r2, [r7, #16]
    2714:	239c      	movs	r3, #156	; 0x9c
    2716:	005b      	lsls	r3, r3, #1
    2718:	429a      	cmp	r2, r3
    271a:	d806      	bhi.n	272a <calculateLux+0xd2>
	{b=TSL2561_LUX_B5T; m=TSL2561_LUX_M5T;}
    271c:	2370      	movs	r3, #112	; 0x70
    271e:	33ff      	adds	r3, #255	; 0xff
    2720:	62bb      	str	r3, [r7, #40]	; 0x28
    2722:	23fe      	movs	r3, #254	; 0xfe
    2724:	005b      	lsls	r3, r3, #1
    2726:	627b      	str	r3, [r7, #36]	; 0x24
    2728:	e01a      	b.n	2760 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K6T)
    272a:	693a      	ldr	r2, [r7, #16]
    272c:	23cd      	movs	r3, #205	; 0xcd
    272e:	005b      	lsls	r3, r3, #1
    2730:	429a      	cmp	r2, r3
    2732:	d804      	bhi.n	273e <calculateLux+0xe6>
	{b=TSL2561_LUX_B6T; m=TSL2561_LUX_M6T;}
    2734:	23d2      	movs	r3, #210	; 0xd2
    2736:	62bb      	str	r3, [r7, #40]	; 0x28
    2738:	23fb      	movs	r3, #251	; 0xfb
    273a:	627b      	str	r3, [r7, #36]	; 0x24
    273c:	e010      	b.n	2760 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K7T)
    273e:	693b      	ldr	r3, [r7, #16]
    2740:	4a17      	ldr	r2, [pc, #92]	; (27a0 <calculateLux+0x148>)
    2742:	4293      	cmp	r3, r2
    2744:	d804      	bhi.n	2750 <calculateLux+0xf8>
	{b=TSL2561_LUX_B7T; m=TSL2561_LUX_M7T;}
    2746:	2318      	movs	r3, #24
    2748:	62bb      	str	r3, [r7, #40]	; 0x28
    274a:	2312      	movs	r3, #18
    274c:	627b      	str	r3, [r7, #36]	; 0x24
    274e:	e007      	b.n	2760 <calculateLux+0x108>
	else if (ratio > TSL2561_LUX_K8T)
    2750:	693b      	ldr	r3, [r7, #16]
    2752:	4a13      	ldr	r2, [pc, #76]	; (27a0 <calculateLux+0x148>)
    2754:	4293      	cmp	r3, r2
    2756:	d903      	bls.n	2760 <calculateLux+0x108>
	{b=TSL2561_LUX_B8T; m=TSL2561_LUX_M8T;}
    2758:	2300      	movs	r3, #0
    275a:	62bb      	str	r3, [r7, #40]	; 0x28
    275c:	2300      	movs	r3, #0
    275e:	627b      	str	r3, [r7, #36]	; 0x24
	#endif

	unsigned long temp;
	temp = ((channel0 * b) - (channel1 * m));
    2760:	69bb      	ldr	r3, [r7, #24]
    2762:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2764:	435a      	muls	r2, r3
    2766:	697b      	ldr	r3, [r7, #20]
    2768:	6a79      	ldr	r1, [r7, #36]	; 0x24
    276a:	434b      	muls	r3, r1
    276c:	1ad3      	subs	r3, r2, r3
    276e:	60fb      	str	r3, [r7, #12]

	/* Do not allow negative lux value */
	if (temp < 0) temp = 0;

	/* Round lsb (2^(LUX_SCALE-1)) */
	temp += (1 << (TSL2561_LUX_LUXSCALE-1));
    2770:	68fb      	ldr	r3, [r7, #12]
    2772:	2280      	movs	r2, #128	; 0x80
    2774:	0192      	lsls	r2, r2, #6
    2776:	4694      	mov	ip, r2
    2778:	4463      	add	r3, ip
    277a:	60fb      	str	r3, [r7, #12]

	/* Strip off fractional portion */
	uint32_t lux = temp >> TSL2561_LUX_LUXSCALE;
    277c:	68fb      	ldr	r3, [r7, #12]
    277e:	0b9b      	lsrs	r3, r3, #14
    2780:	60bb      	str	r3, [r7, #8]

	/* Signal I2C had no errors */
	return lux;
    2782:	68bb      	ldr	r3, [r7, #8]
}
    2784:	0018      	movs	r0, r3
    2786:	46bd      	mov	sp, r7
    2788:	b00c      	add	sp, #48	; 0x30
    278a:	bd80      	pop	{r7, pc}
    278c:	0000bab5 	.word	0x0000bab5
    2790:	000002d1 	.word	0x000002d1
    2794:	0000023f 	.word	0x0000023f
    2798:	0000037b 	.word	0x0000037b
    279c:	000003fe 	.word	0x000003fe
    27a0:	0000029a 	.word	0x0000029a

000027a4 <getLuminosity>:

int getLuminosity() {
    27a4:	b590      	push	{r4, r7, lr}
    27a6:	b083      	sub	sp, #12
    27a8:	af00      	add	r7, sp, #0
	/* Reads a two byte value from channel 0 (visible + infrared) */
	uint16_t broadband = read16_reg((TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN0_LOW));
    27aa:	1dbc      	adds	r4, r7, #6
    27ac:	20ac      	movs	r0, #172	; 0xac
    27ae:	4b0b      	ldr	r3, [pc, #44]	; (27dc <getLuminosity+0x38>)
    27b0:	4798      	blx	r3
    27b2:	0003      	movs	r3, r0
    27b4:	8023      	strh	r3, [r4, #0]

	/* Reads a two byte value from channel 1 (infrared) */
	uint16_t ir = read16_reg((TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN1_LOW));
    27b6:	1d3c      	adds	r4, r7, #4
    27b8:	20ae      	movs	r0, #174	; 0xae
    27ba:	4b08      	ldr	r3, [pc, #32]	; (27dc <getLuminosity+0x38>)
    27bc:	4798      	blx	r3
    27be:	0003      	movs	r3, r0
    27c0:	8023      	strh	r3, [r4, #0]
	
	return calculateLux(broadband, ir);
    27c2:	1d3b      	adds	r3, r7, #4
    27c4:	881a      	ldrh	r2, [r3, #0]
    27c6:	1dbb      	adds	r3, r7, #6
    27c8:	881b      	ldrh	r3, [r3, #0]
    27ca:	0011      	movs	r1, r2
    27cc:	0018      	movs	r0, r3
    27ce:	4b04      	ldr	r3, [pc, #16]	; (27e0 <getLuminosity+0x3c>)
    27d0:	4798      	blx	r3
    27d2:	0003      	movs	r3, r0
}
    27d4:	0018      	movs	r0, r3
    27d6:	46bd      	mov	sp, r7
    27d8:	b003      	add	sp, #12
    27da:	bd90      	pop	{r4, r7, pc}
    27dc:	0000254d 	.word	0x0000254d
    27e0:	00002659 	.word	0x00002659

000027e4 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    27e4:	b580      	push	{r7, lr}
    27e6:	b082      	sub	sp, #8
    27e8:	af00      	add	r7, sp, #0
    27ea:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    27ec:	687b      	ldr	r3, [r7, #4]
    27ee:	2b00      	cmp	r3, #0
    27f0:	d00c      	beq.n	280c <delay_cycles+0x28>
		SysTick->LOAD = n;
    27f2:	4b08      	ldr	r3, [pc, #32]	; (2814 <delay_cycles+0x30>)
    27f4:	687a      	ldr	r2, [r7, #4]
    27f6:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    27f8:	4b06      	ldr	r3, [pc, #24]	; (2814 <delay_cycles+0x30>)
    27fa:	2200      	movs	r2, #0
    27fc:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	4b04      	ldr	r3, [pc, #16]	; (2814 <delay_cycles+0x30>)
    2802:	681a      	ldr	r2, [r3, #0]
    2804:	2380      	movs	r3, #128	; 0x80
    2806:	025b      	lsls	r3, r3, #9
    2808:	4013      	ands	r3, r2
    280a:	d0f9      	beq.n	2800 <delay_cycles+0x1c>
		};
	}
}
    280c:	46c0      	nop			; (mov r8, r8)
    280e:	46bd      	mov	sp, r7
    2810:	b002      	add	sp, #8
    2812:	bd80      	pop	{r7, pc}
    2814:	e000e010 	.word	0xe000e010

00002818 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    2818:	b580      	push	{r7, lr}
    281a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    281c:	2000      	movs	r0, #0
    281e:	4b0f      	ldr	r3, [pc, #60]	; (285c <delay_init+0x44>)
    2820:	4798      	blx	r3
    2822:	0002      	movs	r2, r0
    2824:	4b0e      	ldr	r3, [pc, #56]	; (2860 <delay_init+0x48>)
    2826:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    2828:	4b0d      	ldr	r3, [pc, #52]	; (2860 <delay_init+0x48>)
    282a:	6818      	ldr	r0, [r3, #0]
    282c:	4b0d      	ldr	r3, [pc, #52]	; (2864 <delay_init+0x4c>)
    282e:	22fa      	movs	r2, #250	; 0xfa
    2830:	0091      	lsls	r1, r2, #2
    2832:	4798      	blx	r3
    2834:	0003      	movs	r3, r0
    2836:	001a      	movs	r2, r3
    2838:	4b09      	ldr	r3, [pc, #36]	; (2860 <delay_init+0x48>)
    283a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    283c:	4b08      	ldr	r3, [pc, #32]	; (2860 <delay_init+0x48>)
    283e:	6818      	ldr	r0, [r3, #0]
    2840:	4b08      	ldr	r3, [pc, #32]	; (2864 <delay_init+0x4c>)
    2842:	22fa      	movs	r2, #250	; 0xfa
    2844:	0091      	lsls	r1, r2, #2
    2846:	4798      	blx	r3
    2848:	0003      	movs	r3, r0
    284a:	001a      	movs	r2, r3
    284c:	4b06      	ldr	r3, [pc, #24]	; (2868 <delay_init+0x50>)
    284e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2850:	4b06      	ldr	r3, [pc, #24]	; (286c <delay_init+0x54>)
    2852:	2205      	movs	r2, #5
    2854:	601a      	str	r2, [r3, #0]
}
    2856:	46c0      	nop			; (mov r8, r8)
    2858:	46bd      	mov	sp, r7
    285a:	bd80      	pop	{r7, pc}
    285c:	0000669d 	.word	0x0000669d
    2860:	20000040 	.word	0x20000040
    2864:	0000bab5 	.word	0x0000bab5
    2868:	20000044 	.word	0x20000044
    286c:	e000e010 	.word	0xe000e010

00002870 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    2870:	b580      	push	{r7, lr}
    2872:	b082      	sub	sp, #8
    2874:	af00      	add	r7, sp, #0
    2876:	6078      	str	r0, [r7, #4]
	while (n--) {
    2878:	e004      	b.n	2884 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    287a:	4b07      	ldr	r3, [pc, #28]	; (2898 <delay_cycles_us+0x28>)
    287c:	681b      	ldr	r3, [r3, #0]
    287e:	0018      	movs	r0, r3
    2880:	4b06      	ldr	r3, [pc, #24]	; (289c <delay_cycles_us+0x2c>)
    2882:	4798      	blx	r3
	while (n--) {
    2884:	687b      	ldr	r3, [r7, #4]
    2886:	1e5a      	subs	r2, r3, #1
    2888:	607a      	str	r2, [r7, #4]
    288a:	2b00      	cmp	r3, #0
    288c:	d1f5      	bne.n	287a <delay_cycles_us+0xa>
	}
}
    288e:	46c0      	nop			; (mov r8, r8)
    2890:	46bd      	mov	sp, r7
    2892:	b002      	add	sp, #8
    2894:	bd80      	pop	{r7, pc}
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	20000044 	.word	0x20000044
    289c:	000027e5 	.word	0x000027e5

000028a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    28a0:	b580      	push	{r7, lr}
    28a2:	b082      	sub	sp, #8
    28a4:	af00      	add	r7, sp, #0
    28a6:	6078      	str	r0, [r7, #4]
	while (n--) {
    28a8:	e004      	b.n	28b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    28aa:	4b07      	ldr	r3, [pc, #28]	; (28c8 <delay_cycles_ms+0x28>)
    28ac:	681b      	ldr	r3, [r3, #0]
    28ae:	0018      	movs	r0, r3
    28b0:	4b06      	ldr	r3, [pc, #24]	; (28cc <delay_cycles_ms+0x2c>)
    28b2:	4798      	blx	r3
	while (n--) {
    28b4:	687b      	ldr	r3, [r7, #4]
    28b6:	1e5a      	subs	r2, r3, #1
    28b8:	607a      	str	r2, [r7, #4]
    28ba:	2b00      	cmp	r3, #0
    28bc:	d1f5      	bne.n	28aa <delay_cycles_ms+0xa>
	}
}
    28be:	46c0      	nop			; (mov r8, r8)
    28c0:	46bd      	mov	sp, r7
    28c2:	b002      	add	sp, #8
    28c4:	bd80      	pop	{r7, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	20000040 	.word	0x20000040
    28cc:	000027e5 	.word	0x000027e5

000028d0 <system_gclk_chan_get_config_defaults>:
{
    28d0:	b580      	push	{r7, lr}
    28d2:	b082      	sub	sp, #8
    28d4:	af00      	add	r7, sp, #0
    28d6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    28d8:	687b      	ldr	r3, [r7, #4]
    28da:	2200      	movs	r2, #0
    28dc:	701a      	strb	r2, [r3, #0]
}
    28de:	46c0      	nop			; (mov r8, r8)
    28e0:	46bd      	mov	sp, r7
    28e2:	b002      	add	sp, #8
    28e4:	bd80      	pop	{r7, pc}
	...

000028e8 <system_apb_clock_set_mask>:
{
    28e8:	b580      	push	{r7, lr}
    28ea:	b082      	sub	sp, #8
    28ec:	af00      	add	r7, sp, #0
    28ee:	0002      	movs	r2, r0
    28f0:	6039      	str	r1, [r7, #0]
    28f2:	1dfb      	adds	r3, r7, #7
    28f4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    28f6:	1dfb      	adds	r3, r7, #7
    28f8:	781b      	ldrb	r3, [r3, #0]
    28fa:	2b01      	cmp	r3, #1
    28fc:	d00a      	beq.n	2914 <system_apb_clock_set_mask+0x2c>
    28fe:	2b02      	cmp	r3, #2
    2900:	d00f      	beq.n	2922 <system_apb_clock_set_mask+0x3a>
    2902:	2b00      	cmp	r3, #0
    2904:	d114      	bne.n	2930 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2906:	4b0e      	ldr	r3, [pc, #56]	; (2940 <system_apb_clock_set_mask+0x58>)
    2908:	4a0d      	ldr	r2, [pc, #52]	; (2940 <system_apb_clock_set_mask+0x58>)
    290a:	6991      	ldr	r1, [r2, #24]
    290c:	683a      	ldr	r2, [r7, #0]
    290e:	430a      	orrs	r2, r1
    2910:	619a      	str	r2, [r3, #24]
			break;
    2912:	e00f      	b.n	2934 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2914:	4b0a      	ldr	r3, [pc, #40]	; (2940 <system_apb_clock_set_mask+0x58>)
    2916:	4a0a      	ldr	r2, [pc, #40]	; (2940 <system_apb_clock_set_mask+0x58>)
    2918:	69d1      	ldr	r1, [r2, #28]
    291a:	683a      	ldr	r2, [r7, #0]
    291c:	430a      	orrs	r2, r1
    291e:	61da      	str	r2, [r3, #28]
			break;
    2920:	e008      	b.n	2934 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2922:	4b07      	ldr	r3, [pc, #28]	; (2940 <system_apb_clock_set_mask+0x58>)
    2924:	4a06      	ldr	r2, [pc, #24]	; (2940 <system_apb_clock_set_mask+0x58>)
    2926:	6a11      	ldr	r1, [r2, #32]
    2928:	683a      	ldr	r2, [r7, #0]
    292a:	430a      	orrs	r2, r1
    292c:	621a      	str	r2, [r3, #32]
			break;
    292e:	e001      	b.n	2934 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2930:	2317      	movs	r3, #23
    2932:	e000      	b.n	2936 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2934:	2300      	movs	r3, #0
}
    2936:	0018      	movs	r0, r3
    2938:	46bd      	mov	sp, r7
    293a:	b002      	add	sp, #8
    293c:	bd80      	pop	{r7, pc}
    293e:	46c0      	nop			; (mov r8, r8)
    2940:	40000400 	.word	0x40000400

00002944 <system_pinmux_get_config_defaults>:
{
    2944:	b580      	push	{r7, lr}
    2946:	b082      	sub	sp, #8
    2948:	af00      	add	r7, sp, #0
    294a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    294c:	687b      	ldr	r3, [r7, #4]
    294e:	2280      	movs	r2, #128	; 0x80
    2950:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2952:	687b      	ldr	r3, [r7, #4]
    2954:	2200      	movs	r2, #0
    2956:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	2201      	movs	r2, #1
    295c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    295e:	687b      	ldr	r3, [r7, #4]
    2960:	2200      	movs	r2, #0
    2962:	70da      	strb	r2, [r3, #3]
}
    2964:	46c0      	nop			; (mov r8, r8)
    2966:	46bd      	mov	sp, r7
    2968:	b002      	add	sp, #8
    296a:	bd80      	pop	{r7, pc}

0000296c <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    296c:	b580      	push	{r7, lr}
    296e:	b082      	sub	sp, #8
    2970:	af00      	add	r7, sp, #0
    2972:	0002      	movs	r2, r0
    2974:	1dfb      	adds	r3, r7, #7
    2976:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    2978:	1dfb      	adds	r3, r7, #7
    297a:	781b      	ldrb	r3, [r3, #0]
    297c:	2b00      	cmp	r3, #0
    297e:	d002      	beq.n	2986 <system_voltage_reference_enable+0x1a>
    2980:	2b01      	cmp	r3, #1
    2982:	d007      	beq.n	2994 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    2984:	e00d      	b.n	29a2 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    2986:	4b08      	ldr	r3, [pc, #32]	; (29a8 <system_voltage_reference_enable+0x3c>)
    2988:	4a07      	ldr	r2, [pc, #28]	; (29a8 <system_voltage_reference_enable+0x3c>)
    298a:	6c12      	ldr	r2, [r2, #64]	; 0x40
    298c:	2102      	movs	r1, #2
    298e:	430a      	orrs	r2, r1
    2990:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    2992:	e006      	b.n	29a2 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    2994:	4b04      	ldr	r3, [pc, #16]	; (29a8 <system_voltage_reference_enable+0x3c>)
    2996:	4a04      	ldr	r2, [pc, #16]	; (29a8 <system_voltage_reference_enable+0x3c>)
    2998:	6c12      	ldr	r2, [r2, #64]	; 0x40
    299a:	2104      	movs	r1, #4
    299c:	430a      	orrs	r2, r1
    299e:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    29a0:	46c0      	nop			; (mov r8, r8)
	}
}
    29a2:	46bd      	mov	sp, r7
    29a4:	b002      	add	sp, #8
    29a6:	bd80      	pop	{r7, pc}
    29a8:	40000800 	.word	0x40000800

000029ac <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    29ac:	b580      	push	{r7, lr}
    29ae:	b084      	sub	sp, #16
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	681b      	ldr	r3, [r3, #0]
    29b8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    29ba:	68fb      	ldr	r3, [r7, #12]
    29bc:	7e5b      	ldrb	r3, [r3, #25]
    29be:	b2db      	uxtb	r3, r3
    29c0:	b25b      	sxtb	r3, r3
    29c2:	2b00      	cmp	r3, #0
    29c4:	da01      	bge.n	29ca <adc_is_syncing+0x1e>
		return true;
    29c6:	2301      	movs	r3, #1
    29c8:	e000      	b.n	29cc <adc_is_syncing+0x20>
	}

	return false;
    29ca:	2300      	movs	r3, #0
}
    29cc:	0018      	movs	r0, r3
    29ce:	46bd      	mov	sp, r7
    29d0:	b004      	add	sp, #16
    29d2:	bd80      	pop	{r7, pc}

000029d4 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    29d4:	b580      	push	{r7, lr}
    29d6:	b082      	sub	sp, #8
    29d8:	af00      	add	r7, sp, #0
    29da:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    29dc:	687b      	ldr	r3, [r7, #4]
    29de:	2200      	movs	r2, #0
    29e0:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    29e2:	687b      	ldr	r3, [r7, #4]
    29e4:	2200      	movs	r2, #0
    29e6:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	2200      	movs	r2, #0
    29ec:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    29ee:	687b      	ldr	r3, [r7, #4]
    29f0:	2200      	movs	r2, #0
    29f2:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	2200      	movs	r2, #0
    29f8:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	2200      	movs	r2, #0
    29fe:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    2a00:	687b      	ldr	r3, [r7, #4]
    2a02:	2200      	movs	r2, #0
    2a04:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    2a06:	687b      	ldr	r3, [r7, #4]
    2a08:	2200      	movs	r2, #0
    2a0a:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	2200      	movs	r2, #0
    2a10:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	22c0      	movs	r2, #192	; 0xc0
    2a16:	0152      	lsls	r2, r2, #5
    2a18:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    2a1a:	687b      	ldr	r3, [r7, #4]
    2a1c:	2200      	movs	r2, #0
    2a1e:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	2200      	movs	r2, #0
    2a24:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    2a26:	687b      	ldr	r3, [r7, #4]
    2a28:	2200      	movs	r2, #0
    2a2a:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    2a2c:	687b      	ldr	r3, [r7, #4]
    2a2e:	2200      	movs	r2, #0
    2a30:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	2200      	movs	r2, #0
    2a36:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    2a38:	687b      	ldr	r3, [r7, #4]
    2a3a:	222a      	movs	r2, #42	; 0x2a
    2a3c:	2100      	movs	r1, #0
    2a3e:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    2a40:	687b      	ldr	r3, [r7, #4]
    2a42:	2200      	movs	r2, #0
    2a44:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	2200      	movs	r2, #0
    2a4a:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	2224      	movs	r2, #36	; 0x24
    2a50:	2100      	movs	r1, #0
    2a52:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	2200      	movs	r2, #0
    2a58:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	2200      	movs	r2, #0
    2a5e:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    2a60:	687b      	ldr	r3, [r7, #4]
    2a62:	2200      	movs	r2, #0
    2a64:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    2a66:	687b      	ldr	r3, [r7, #4]
    2a68:	222b      	movs	r2, #43	; 0x2b
    2a6a:	2100      	movs	r1, #0
    2a6c:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    2a6e:	687b      	ldr	r3, [r7, #4]
    2a70:	222c      	movs	r2, #44	; 0x2c
    2a72:	2100      	movs	r1, #0
    2a74:	5499      	strb	r1, [r3, r2]
}
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	46bd      	mov	sp, r7
    2a7a:	b002      	add	sp, #8
    2a7c:	bd80      	pop	{r7, pc}
	...

00002a80 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    2a80:	b580      	push	{r7, lr}
    2a82:	b098      	sub	sp, #96	; 0x60
    2a84:	af00      	add	r7, sp, #0
    2a86:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    2a88:	230c      	movs	r3, #12
    2a8a:	18fa      	adds	r2, r7, r3
    2a8c:	4b15      	ldr	r3, [pc, #84]	; (2ae4 <_adc_configure_ain_pin+0x64>)
    2a8e:	0010      	movs	r0, r2
    2a90:	0019      	movs	r1, r3
    2a92:	2350      	movs	r3, #80	; 0x50
    2a94:	001a      	movs	r2, r3
    2a96:	4b14      	ldr	r3, [pc, #80]	; (2ae8 <_adc_configure_ain_pin+0x68>)
    2a98:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    2a9a:	4b14      	ldr	r3, [pc, #80]	; (2aec <_adc_configure_ain_pin+0x6c>)
    2a9c:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    2a9e:	687b      	ldr	r3, [r7, #4]
    2aa0:	2b13      	cmp	r3, #19
    2aa2:	d81a      	bhi.n	2ada <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2aa4:	230c      	movs	r3, #12
    2aa6:	18fb      	adds	r3, r7, r3
    2aa8:	687a      	ldr	r2, [r7, #4]
    2aaa:	0092      	lsls	r2, r2, #2
    2aac:	58d3      	ldr	r3, [r2, r3]
    2aae:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    2ab0:	2308      	movs	r3, #8
    2ab2:	18fb      	adds	r3, r7, r3
    2ab4:	0018      	movs	r0, r3
    2ab6:	4b0e      	ldr	r3, [pc, #56]	; (2af0 <_adc_configure_ain_pin+0x70>)
    2ab8:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2aba:	2308      	movs	r3, #8
    2abc:	18fb      	adds	r3, r7, r3
    2abe:	2200      	movs	r2, #0
    2ac0:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    2ac2:	2308      	movs	r3, #8
    2ac4:	18fb      	adds	r3, r7, r3
    2ac6:	2201      	movs	r2, #1
    2ac8:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    2aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2acc:	b2db      	uxtb	r3, r3
    2ace:	2208      	movs	r2, #8
    2ad0:	18ba      	adds	r2, r7, r2
    2ad2:	0011      	movs	r1, r2
    2ad4:	0018      	movs	r0, r3
    2ad6:	4b07      	ldr	r3, [pc, #28]	; (2af4 <_adc_configure_ain_pin+0x74>)
    2ad8:	4798      	blx	r3
	}
}
    2ada:	46c0      	nop			; (mov r8, r8)
    2adc:	46bd      	mov	sp, r7
    2ade:	b018      	add	sp, #96	; 0x60
    2ae0:	bd80      	pop	{r7, pc}
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	0000e28c 	.word	0x0000e28c
    2ae8:	00008f0d 	.word	0x00008f0d
    2aec:	0000ffff 	.word	0x0000ffff
    2af0:	00002945 	.word	0x00002945
    2af4:	00006a61 	.word	0x00006a61

00002af8 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    2af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2afa:	b089      	sub	sp, #36	; 0x24
    2afc:	af00      	add	r7, sp, #0
    2afe:	6078      	str	r0, [r7, #4]
    2b00:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    2b02:	231f      	movs	r3, #31
    2b04:	18fb      	adds	r3, r7, r3
    2b06:	2200      	movs	r2, #0
    2b08:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    2b0a:	2310      	movs	r3, #16
    2b0c:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2b0e:	2317      	movs	r3, #23
    2b10:	18fb      	adds	r3, r7, r3
    2b12:	2200      	movs	r2, #0
    2b14:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	681b      	ldr	r3, [r3, #0]
    2b1a:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2b1c:	230c      	movs	r3, #12
    2b1e:	18fb      	adds	r3, r7, r3
    2b20:	0018      	movs	r0, r3
    2b22:	4bce      	ldr	r3, [pc, #824]	; (2e5c <_adc_set_config+0x364>)
    2b24:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    2b26:	683b      	ldr	r3, [r7, #0]
    2b28:	781a      	ldrb	r2, [r3, #0]
    2b2a:	230c      	movs	r3, #12
    2b2c:	18fb      	adds	r3, r7, r3
    2b2e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    2b30:	230c      	movs	r3, #12
    2b32:	18fb      	adds	r3, r7, r3
    2b34:	0019      	movs	r1, r3
    2b36:	201e      	movs	r0, #30
    2b38:	4bc9      	ldr	r3, [pc, #804]	; (2e60 <_adc_set_config+0x368>)
    2b3a:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    2b3c:	201e      	movs	r0, #30
    2b3e:	4bc9      	ldr	r3, [pc, #804]	; (2e64 <_adc_set_config+0x36c>)
    2b40:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    2b42:	683b      	ldr	r3, [r7, #0]
    2b44:	222c      	movs	r2, #44	; 0x2c
    2b46:	5c9b      	ldrb	r3, [r3, r2]
    2b48:	2b00      	cmp	r3, #0
    2b4a:	d040      	beq.n	2bce <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    2b4c:	2316      	movs	r3, #22
    2b4e:	18fb      	adds	r3, r7, r3
    2b50:	683a      	ldr	r2, [r7, #0]
    2b52:	212b      	movs	r1, #43	; 0x2b
    2b54:	5c52      	ldrb	r2, [r2, r1]
    2b56:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    2b58:	683b      	ldr	r3, [r7, #0]
    2b5a:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    2b5c:	2315      	movs	r3, #21
    2b5e:	18fb      	adds	r3, r7, r3
    2b60:	2216      	movs	r2, #22
    2b62:	18ba      	adds	r2, r7, r2
    2b64:	7812      	ldrb	r2, [r2, #0]
    2b66:	188a      	adds	r2, r1, r2
    2b68:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    2b6a:	683b      	ldr	r3, [r7, #0]
    2b6c:	222c      	movs	r2, #44	; 0x2c
    2b6e:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    2b70:	230f      	movs	r3, #15
    2b72:	18fb      	adds	r3, r7, r3
    2b74:	2215      	movs	r2, #21
    2b76:	18ba      	adds	r2, r7, r2
    2b78:	7812      	ldrb	r2, [r2, #0]
    2b7a:	188a      	adds	r2, r1, r2
    2b7c:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    2b7e:	e018      	b.n	2bb2 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    2b80:	2316      	movs	r3, #22
    2b82:	18fb      	adds	r3, r7, r3
    2b84:	781b      	ldrb	r3, [r3, #0]
    2b86:	220f      	movs	r2, #15
    2b88:	4013      	ands	r3, r2
    2b8a:	683a      	ldr	r2, [r7, #0]
    2b8c:	7b12      	ldrb	r2, [r2, #12]
    2b8e:	189b      	adds	r3, r3, r2
    2b90:	0018      	movs	r0, r3
    2b92:	4bb5      	ldr	r3, [pc, #724]	; (2e68 <_adc_set_config+0x370>)
    2b94:	4798      	blx	r3
			start_pin++;
    2b96:	2315      	movs	r3, #21
    2b98:	18fb      	adds	r3, r7, r3
    2b9a:	781a      	ldrb	r2, [r3, #0]
    2b9c:	2315      	movs	r3, #21
    2b9e:	18fb      	adds	r3, r7, r3
    2ba0:	3201      	adds	r2, #1
    2ba2:	701a      	strb	r2, [r3, #0]
			offset++;
    2ba4:	2316      	movs	r3, #22
    2ba6:	18fb      	adds	r3, r7, r3
    2ba8:	781a      	ldrb	r2, [r3, #0]
    2baa:	2316      	movs	r3, #22
    2bac:	18fb      	adds	r3, r7, r3
    2bae:	3201      	adds	r2, #1
    2bb0:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    2bb2:	2315      	movs	r3, #21
    2bb4:	18fa      	adds	r2, r7, r3
    2bb6:	230f      	movs	r3, #15
    2bb8:	18fb      	adds	r3, r7, r3
    2bba:	7812      	ldrb	r2, [r2, #0]
    2bbc:	781b      	ldrb	r3, [r3, #0]
    2bbe:	429a      	cmp	r2, r3
    2bc0:	d3de      	bcc.n	2b80 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    2bc2:	683b      	ldr	r3, [r7, #0]
    2bc4:	89db      	ldrh	r3, [r3, #14]
    2bc6:	0018      	movs	r0, r3
    2bc8:	4ba7      	ldr	r3, [pc, #668]	; (2e68 <_adc_set_config+0x370>)
    2bca:	4798      	blx	r3
    2bcc:	e009      	b.n	2be2 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    2bce:	683b      	ldr	r3, [r7, #0]
    2bd0:	7b1b      	ldrb	r3, [r3, #12]
    2bd2:	0018      	movs	r0, r3
    2bd4:	4ba4      	ldr	r3, [pc, #656]	; (2e68 <_adc_set_config+0x370>)
    2bd6:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    2bd8:	683b      	ldr	r3, [r7, #0]
    2bda:	89db      	ldrh	r3, [r3, #14]
    2bdc:	0018      	movs	r0, r3
    2bde:	4ba2      	ldr	r3, [pc, #648]	; (2e68 <_adc_set_config+0x370>)
    2be0:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    2be2:	683b      	ldr	r3, [r7, #0]
    2be4:	7d5b      	ldrb	r3, [r3, #21]
    2be6:	009b      	lsls	r3, r3, #2
    2be8:	b2da      	uxtb	r2, r3
    2bea:	693b      	ldr	r3, [r7, #16]
    2bec:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2bee:	683b      	ldr	r3, [r7, #0]
    2bf0:	7d9b      	ldrb	r3, [r3, #22]
    2bf2:	01db      	lsls	r3, r3, #7
    2bf4:	b25a      	sxtb	r2, r3
			(config->reference);
    2bf6:	683b      	ldr	r3, [r7, #0]
    2bf8:	785b      	ldrb	r3, [r3, #1]
    2bfa:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2bfc:	4313      	orrs	r3, r2
    2bfe:	b25b      	sxtb	r3, r3
    2c00:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    2c02:	693b      	ldr	r3, [r7, #16]
    2c04:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    2c06:	683b      	ldr	r3, [r7, #0]
    2c08:	791b      	ldrb	r3, [r3, #4]
    2c0a:	2b34      	cmp	r3, #52	; 0x34
    2c0c:	d846      	bhi.n	2c9c <_adc_set_config+0x1a4>
    2c0e:	009a      	lsls	r2, r3, #2
    2c10:	4b96      	ldr	r3, [pc, #600]	; (2e6c <_adc_set_config+0x374>)
    2c12:	18d3      	adds	r3, r2, r3
    2c14:	681b      	ldr	r3, [r3, #0]
    2c16:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    2c18:	231f      	movs	r3, #31
    2c1a:	18fb      	adds	r3, r7, r3
    2c1c:	683a      	ldr	r2, [r7, #0]
    2c1e:	7c52      	ldrb	r2, [r2, #17]
    2c20:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    2c22:	2317      	movs	r3, #23
    2c24:	18fb      	adds	r3, r7, r3
    2c26:	683a      	ldr	r2, [r7, #0]
    2c28:	7c12      	ldrb	r2, [r2, #16]
    2c2a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2c2c:	2310      	movs	r3, #16
    2c2e:	61bb      	str	r3, [r7, #24]
		break;
    2c30:	e036      	b.n	2ca0 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2c32:	231f      	movs	r3, #31
    2c34:	18fb      	adds	r3, r7, r3
    2c36:	2201      	movs	r2, #1
    2c38:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    2c3a:	2317      	movs	r3, #23
    2c3c:	18fb      	adds	r3, r7, r3
    2c3e:	2202      	movs	r2, #2
    2c40:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2c42:	2310      	movs	r3, #16
    2c44:	61bb      	str	r3, [r7, #24]
		break;
    2c46:	e02b      	b.n	2ca0 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    2c48:	231f      	movs	r3, #31
    2c4a:	18fb      	adds	r3, r7, r3
    2c4c:	2202      	movs	r2, #2
    2c4e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2c50:	2317      	movs	r3, #23
    2c52:	18fb      	adds	r3, r7, r3
    2c54:	2204      	movs	r2, #4
    2c56:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2c58:	2310      	movs	r3, #16
    2c5a:	61bb      	str	r3, [r7, #24]
		break;
    2c5c:	e020      	b.n	2ca0 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2c5e:	231f      	movs	r3, #31
    2c60:	18fb      	adds	r3, r7, r3
    2c62:	2201      	movs	r2, #1
    2c64:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    2c66:	2317      	movs	r3, #23
    2c68:	18fb      	adds	r3, r7, r3
    2c6a:	2206      	movs	r2, #6
    2c6c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2c6e:	2310      	movs	r3, #16
    2c70:	61bb      	str	r3, [r7, #24]
		break;
    2c72:	e015      	b.n	2ca0 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    2c74:	231f      	movs	r3, #31
    2c76:	18fb      	adds	r3, r7, r3
    2c78:	2200      	movs	r2, #0
    2c7a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    2c7c:	2317      	movs	r3, #23
    2c7e:	18fb      	adds	r3, r7, r3
    2c80:	2208      	movs	r2, #8
    2c82:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2c84:	2310      	movs	r3, #16
    2c86:	61bb      	str	r3, [r7, #24]
		break;
    2c88:	e00a      	b.n	2ca0 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    2c8a:	2330      	movs	r3, #48	; 0x30
    2c8c:	61bb      	str	r3, [r7, #24]
		break;
    2c8e:	e007      	b.n	2ca0 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    2c90:	2320      	movs	r3, #32
    2c92:	61bb      	str	r3, [r7, #24]
		break;
    2c94:	e004      	b.n	2ca0 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    2c96:	2300      	movs	r3, #0
    2c98:	61bb      	str	r3, [r7, #24]
		break;
    2c9a:	e001      	b.n	2ca0 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    2c9c:	2317      	movs	r3, #23
    2c9e:	e1ae      	b.n	2ffe <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    2ca0:	231f      	movs	r3, #31
    2ca2:	18fb      	adds	r3, r7, r3
    2ca4:	781b      	ldrb	r3, [r3, #0]
    2ca6:	011b      	lsls	r3, r3, #4
    2ca8:	b2db      	uxtb	r3, r3
    2caa:	2270      	movs	r2, #112	; 0x70
    2cac:	4013      	ands	r3, r2
    2cae:	b2da      	uxtb	r2, r3
    2cb0:	2317      	movs	r3, #23
    2cb2:	18fb      	adds	r3, r7, r3
    2cb4:	781b      	ldrb	r3, [r3, #0]
    2cb6:	4313      	orrs	r3, r2
    2cb8:	b2da      	uxtb	r2, r3
    2cba:	693b      	ldr	r3, [r7, #16]
    2cbc:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    2cbe:	683b      	ldr	r3, [r7, #0]
    2cc0:	7ddb      	ldrb	r3, [r3, #23]
    2cc2:	2b3f      	cmp	r3, #63	; 0x3f
    2cc4:	d901      	bls.n	2cca <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    2cc6:	2317      	movs	r3, #23
    2cc8:	e199      	b.n	2ffe <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    2cca:	683b      	ldr	r3, [r7, #0]
    2ccc:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    2cce:	693b      	ldr	r3, [r7, #16]
    2cd0:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    2cd2:	46c0      	nop			; (mov r8, r8)
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	0018      	movs	r0, r3
    2cd8:	4b65      	ldr	r3, [pc, #404]	; (2e70 <_adc_set_config+0x378>)
    2cda:	4798      	blx	r3
    2cdc:	1e03      	subs	r3, r0, #0
    2cde:	d1f9      	bne.n	2cd4 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    2ce0:	683b      	ldr	r3, [r7, #0]
    2ce2:	885a      	ldrh	r2, [r3, #2]
    2ce4:	69bb      	ldr	r3, [r7, #24]
    2ce6:	b29b      	uxth	r3, r3
    2ce8:	4313      	orrs	r3, r2
    2cea:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    2cec:	683b      	ldr	r3, [r7, #0]
    2cee:	2124      	movs	r1, #36	; 0x24
    2cf0:	5c5b      	ldrb	r3, [r3, r1]
    2cf2:	b29b      	uxth	r3, r3
    2cf4:	00db      	lsls	r3, r3, #3
    2cf6:	b29b      	uxth	r3, r3
			resolution |
    2cf8:	4313      	orrs	r3, r2
    2cfa:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2cfc:	683b      	ldr	r3, [r7, #0]
    2cfe:	7d1b      	ldrb	r3, [r3, #20]
    2d00:	b29b      	uxth	r3, r3
    2d02:	009b      	lsls	r3, r3, #2
    2d04:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    2d06:	4313      	orrs	r3, r2
    2d08:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2d0a:	683b      	ldr	r3, [r7, #0]
    2d0c:	7c9b      	ldrb	r3, [r3, #18]
    2d0e:	b29b      	uxth	r3, r3
    2d10:	18db      	adds	r3, r3, r3
    2d12:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2d14:	4313      	orrs	r3, r2
    2d16:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    2d18:	683b      	ldr	r3, [r7, #0]
    2d1a:	7cdb      	ldrb	r3, [r3, #19]
    2d1c:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2d1e:	4313      	orrs	r3, r2
    2d20:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    2d22:	693b      	ldr	r3, [r7, #16]
    2d24:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    2d26:	683b      	ldr	r3, [r7, #0]
    2d28:	7e1b      	ldrb	r3, [r3, #24]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d100      	bne.n	2d30 <_adc_set_config+0x238>
    2d2e:	e0c4      	b.n	2eba <_adc_set_config+0x3c2>
		switch (resolution) {
    2d30:	69bb      	ldr	r3, [r7, #24]
    2d32:	2b10      	cmp	r3, #16
    2d34:	d100      	bne.n	2d38 <_adc_set_config+0x240>
    2d36:	e076      	b.n	2e26 <_adc_set_config+0x32e>
    2d38:	d802      	bhi.n	2d40 <_adc_set_config+0x248>
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d04d      	beq.n	2dda <_adc_set_config+0x2e2>
    2d3e:	e0bc      	b.n	2eba <_adc_set_config+0x3c2>
    2d40:	2b20      	cmp	r3, #32
    2d42:	d023      	beq.n	2d8c <_adc_set_config+0x294>
    2d44:	2b30      	cmp	r3, #48	; 0x30
    2d46:	d000      	beq.n	2d4a <_adc_set_config+0x252>
    2d48:	e0b7      	b.n	2eba <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    2d4a:	683b      	ldr	r3, [r7, #0]
    2d4c:	7cdb      	ldrb	r3, [r3, #19]
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d011      	beq.n	2d76 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    2d52:	683b      	ldr	r3, [r7, #0]
    2d54:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    2d56:	2b7f      	cmp	r3, #127	; 0x7f
    2d58:	dc0b      	bgt.n	2d72 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    2d5a:	683b      	ldr	r3, [r7, #0]
    2d5c:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    2d5e:	3380      	adds	r3, #128	; 0x80
    2d60:	db07      	blt.n	2d72 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    2d62:	683b      	ldr	r3, [r7, #0]
    2d64:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    2d66:	2b7f      	cmp	r3, #127	; 0x7f
    2d68:	dc03      	bgt.n	2d72 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    2d6a:	683b      	ldr	r3, [r7, #0]
    2d6c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    2d6e:	3380      	adds	r3, #128	; 0x80
    2d70:	da01      	bge.n	2d76 <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2d72:	2317      	movs	r3, #23
    2d74:	e143      	b.n	2ffe <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    2d76:	683b      	ldr	r3, [r7, #0]
    2d78:	69db      	ldr	r3, [r3, #28]
    2d7a:	2bff      	cmp	r3, #255	; 0xff
    2d7c:	dc04      	bgt.n	2d88 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    2d7e:	683b      	ldr	r3, [r7, #0]
    2d80:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    2d82:	2bff      	cmp	r3, #255	; 0xff
    2d84:	dc00      	bgt.n	2d88 <_adc_set_config+0x290>
    2d86:	e091      	b.n	2eac <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2d88:	2317      	movs	r3, #23
    2d8a:	e138      	b.n	2ffe <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    2d8c:	683b      	ldr	r3, [r7, #0]
    2d8e:	7cdb      	ldrb	r3, [r3, #19]
    2d90:	2b00      	cmp	r3, #0
    2d92:	d015      	beq.n	2dc0 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    2d94:	683b      	ldr	r3, [r7, #0]
    2d96:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    2d98:	4a36      	ldr	r2, [pc, #216]	; (2e74 <_adc_set_config+0x37c>)
    2d9a:	4293      	cmp	r3, r2
    2d9c:	dc0e      	bgt.n	2dbc <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    2d9e:	683b      	ldr	r3, [r7, #0]
    2da0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    2da2:	4a35      	ldr	r2, [pc, #212]	; (2e78 <_adc_set_config+0x380>)
    2da4:	4293      	cmp	r3, r2
    2da6:	db09      	blt.n	2dbc <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    2da8:	683b      	ldr	r3, [r7, #0]
    2daa:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    2dac:	4a31      	ldr	r2, [pc, #196]	; (2e74 <_adc_set_config+0x37c>)
    2dae:	4293      	cmp	r3, r2
    2db0:	dc04      	bgt.n	2dbc <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    2db2:	683b      	ldr	r3, [r7, #0]
    2db4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    2db6:	4a30      	ldr	r2, [pc, #192]	; (2e78 <_adc_set_config+0x380>)
    2db8:	4293      	cmp	r3, r2
    2dba:	da01      	bge.n	2dc0 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2dbc:	2317      	movs	r3, #23
    2dbe:	e11e      	b.n	2ffe <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    2dc0:	683b      	ldr	r3, [r7, #0]
    2dc2:	69db      	ldr	r3, [r3, #28]
    2dc4:	4a2d      	ldr	r2, [pc, #180]	; (2e7c <_adc_set_config+0x384>)
    2dc6:	4293      	cmp	r3, r2
    2dc8:	dc05      	bgt.n	2dd6 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    2dca:	683b      	ldr	r3, [r7, #0]
    2dcc:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    2dce:	4a2b      	ldr	r2, [pc, #172]	; (2e7c <_adc_set_config+0x384>)
    2dd0:	4293      	cmp	r3, r2
    2dd2:	dc00      	bgt.n	2dd6 <_adc_set_config+0x2de>
    2dd4:	e06c      	b.n	2eb0 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2dd6:	2317      	movs	r3, #23
    2dd8:	e111      	b.n	2ffe <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    2dda:	683b      	ldr	r3, [r7, #0]
    2ddc:	7cdb      	ldrb	r3, [r3, #19]
    2dde:	2b00      	cmp	r3, #0
    2de0:	d015      	beq.n	2e0e <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    2de2:	683b      	ldr	r3, [r7, #0]
    2de4:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    2de6:	4a26      	ldr	r2, [pc, #152]	; (2e80 <_adc_set_config+0x388>)
    2de8:	4293      	cmp	r3, r2
    2dea:	dc0e      	bgt.n	2e0a <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    2dec:	683b      	ldr	r3, [r7, #0]
    2dee:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    2df0:	4a24      	ldr	r2, [pc, #144]	; (2e84 <_adc_set_config+0x38c>)
    2df2:	4293      	cmp	r3, r2
    2df4:	db09      	blt.n	2e0a <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    2df6:	683b      	ldr	r3, [r7, #0]
    2df8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    2dfa:	4a21      	ldr	r2, [pc, #132]	; (2e80 <_adc_set_config+0x388>)
    2dfc:	4293      	cmp	r3, r2
    2dfe:	dc04      	bgt.n	2e0a <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    2e00:	683b      	ldr	r3, [r7, #0]
    2e02:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    2e04:	4a1f      	ldr	r2, [pc, #124]	; (2e84 <_adc_set_config+0x38c>)
    2e06:	4293      	cmp	r3, r2
    2e08:	da01      	bge.n	2e0e <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2e0a:	2317      	movs	r3, #23
    2e0c:	e0f7      	b.n	2ffe <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    2e0e:	683b      	ldr	r3, [r7, #0]
    2e10:	69db      	ldr	r3, [r3, #28]
    2e12:	4a1d      	ldr	r2, [pc, #116]	; (2e88 <_adc_set_config+0x390>)
    2e14:	4293      	cmp	r3, r2
    2e16:	dc04      	bgt.n	2e22 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    2e18:	683b      	ldr	r3, [r7, #0]
    2e1a:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    2e1c:	4a1a      	ldr	r2, [pc, #104]	; (2e88 <_adc_set_config+0x390>)
    2e1e:	4293      	cmp	r3, r2
    2e20:	dd48      	ble.n	2eb4 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2e22:	2317      	movs	r3, #23
    2e24:	e0eb      	b.n	2ffe <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    2e26:	683b      	ldr	r3, [r7, #0]
    2e28:	7cdb      	ldrb	r3, [r3, #19]
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d032      	beq.n	2e94 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    2e2e:	683b      	ldr	r3, [r7, #0]
    2e30:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    2e32:	4a16      	ldr	r2, [pc, #88]	; (2e8c <_adc_set_config+0x394>)
    2e34:	4293      	cmp	r3, r2
    2e36:	dc0e      	bgt.n	2e56 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    2e38:	683b      	ldr	r3, [r7, #0]
    2e3a:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    2e3c:	4a14      	ldr	r2, [pc, #80]	; (2e90 <_adc_set_config+0x398>)
    2e3e:	4293      	cmp	r3, r2
    2e40:	db09      	blt.n	2e56 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    2e42:	683b      	ldr	r3, [r7, #0]
    2e44:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    2e46:	4a11      	ldr	r2, [pc, #68]	; (2e8c <_adc_set_config+0x394>)
    2e48:	4293      	cmp	r3, r2
    2e4a:	dc04      	bgt.n	2e56 <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    2e4c:	683b      	ldr	r3, [r7, #0]
    2e4e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    2e50:	4a0f      	ldr	r2, [pc, #60]	; (2e90 <_adc_set_config+0x398>)
    2e52:	4293      	cmp	r3, r2
    2e54:	da1e      	bge.n	2e94 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2e56:	2317      	movs	r3, #23
    2e58:	e0d1      	b.n	2ffe <_adc_set_config+0x506>
    2e5a:	46c0      	nop			; (mov r8, r8)
    2e5c:	000028d1 	.word	0x000028d1
    2e60:	00006775 	.word	0x00006775
    2e64:	000067b9 	.word	0x000067b9
    2e68:	00002a81 	.word	0x00002a81
    2e6c:	0000e2dc 	.word	0x0000e2dc
    2e70:	000029ad 	.word	0x000029ad
    2e74:	000001ff 	.word	0x000001ff
    2e78:	fffffe00 	.word	0xfffffe00
    2e7c:	000003ff 	.word	0x000003ff
    2e80:	000007ff 	.word	0x000007ff
    2e84:	fffff800 	.word	0xfffff800
    2e88:	00000fff 	.word	0x00000fff
    2e8c:	00007fff 	.word	0x00007fff
    2e90:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    2e94:	683b      	ldr	r3, [r7, #0]
    2e96:	69db      	ldr	r3, [r3, #28]
    2e98:	4a5b      	ldr	r2, [pc, #364]	; (3008 <_adc_set_config+0x510>)
    2e9a:	4293      	cmp	r3, r2
    2e9c:	dc04      	bgt.n	2ea8 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    2e9e:	683b      	ldr	r3, [r7, #0]
    2ea0:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    2ea2:	4a59      	ldr	r2, [pc, #356]	; (3008 <_adc_set_config+0x510>)
    2ea4:	4293      	cmp	r3, r2
    2ea6:	dd07      	ble.n	2eb8 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2ea8:	2317      	movs	r3, #23
    2eaa:	e0a8      	b.n	2ffe <_adc_set_config+0x506>
			break;
    2eac:	46c0      	nop			; (mov r8, r8)
    2eae:	e004      	b.n	2eba <_adc_set_config+0x3c2>
			break;
    2eb0:	46c0      	nop			; (mov r8, r8)
    2eb2:	e002      	b.n	2eba <_adc_set_config+0x3c2>
			break;
    2eb4:	46c0      	nop			; (mov r8, r8)
    2eb6:	e000      	b.n	2eba <_adc_set_config+0x3c2>
			}
			break;
    2eb8:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    2eba:	46c0      	nop			; (mov r8, r8)
    2ebc:	687b      	ldr	r3, [r7, #4]
    2ebe:	0018      	movs	r0, r3
    2ec0:	4b52      	ldr	r3, [pc, #328]	; (300c <_adc_set_config+0x514>)
    2ec2:	4798      	blx	r3
    2ec4:	1e03      	subs	r3, r0, #0
    2ec6:	d1f9      	bne.n	2ebc <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    2ec8:	683b      	ldr	r3, [r7, #0]
    2eca:	7e1a      	ldrb	r2, [r3, #24]
    2ecc:	693b      	ldr	r3, [r7, #16]
    2ece:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    2ed0:	46c0      	nop			; (mov r8, r8)
    2ed2:	687b      	ldr	r3, [r7, #4]
    2ed4:	0018      	movs	r0, r3
    2ed6:	4b4d      	ldr	r3, [pc, #308]	; (300c <_adc_set_config+0x514>)
    2ed8:	4798      	blx	r3
    2eda:	1e03      	subs	r3, r0, #0
    2edc:	d1f9      	bne.n	2ed2 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    2ede:	683b      	ldr	r3, [r7, #0]
    2ee0:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    2ee2:	b29a      	uxth	r2, r3
    2ee4:	693b      	ldr	r3, [r7, #16]
    2ee6:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    2ee8:	46c0      	nop			; (mov r8, r8)
    2eea:	687b      	ldr	r3, [r7, #4]
    2eec:	0018      	movs	r0, r3
    2eee:	4b47      	ldr	r3, [pc, #284]	; (300c <_adc_set_config+0x514>)
    2ef0:	4798      	blx	r3
    2ef2:	1e03      	subs	r3, r0, #0
    2ef4:	d1f9      	bne.n	2eea <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    2ef6:	683b      	ldr	r3, [r7, #0]
    2ef8:	6a1b      	ldr	r3, [r3, #32]
    2efa:	b29a      	uxth	r2, r3
    2efc:	693b      	ldr	r3, [r7, #16]
    2efe:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    2f00:	2314      	movs	r3, #20
    2f02:	18fb      	adds	r3, r7, r3
    2f04:	683a      	ldr	r2, [r7, #0]
    2f06:	212c      	movs	r1, #44	; 0x2c
    2f08:	5c52      	ldrb	r2, [r2, r1]
    2f0a:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    2f0c:	2314      	movs	r3, #20
    2f0e:	18fb      	adds	r3, r7, r3
    2f10:	781b      	ldrb	r3, [r3, #0]
    2f12:	2b00      	cmp	r3, #0
    2f14:	d006      	beq.n	2f24 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    2f16:	2314      	movs	r3, #20
    2f18:	18fb      	adds	r3, r7, r3
    2f1a:	781a      	ldrb	r2, [r3, #0]
    2f1c:	2314      	movs	r3, #20
    2f1e:	18fb      	adds	r3, r7, r3
    2f20:	3a01      	subs	r2, #1
    2f22:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2f24:	2314      	movs	r3, #20
    2f26:	18fb      	adds	r3, r7, r3
    2f28:	781b      	ldrb	r3, [r3, #0]
    2f2a:	2b0f      	cmp	r3, #15
    2f2c:	d804      	bhi.n	2f38 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    2f2e:	683b      	ldr	r3, [r7, #0]
    2f30:	222b      	movs	r2, #43	; 0x2b
    2f32:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2f34:	2b0f      	cmp	r3, #15
    2f36:	d901      	bls.n	2f3c <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    2f38:	2317      	movs	r3, #23
    2f3a:	e060      	b.n	2ffe <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    2f3c:	46c0      	nop			; (mov r8, r8)
    2f3e:	687b      	ldr	r3, [r7, #4]
    2f40:	0018      	movs	r0, r3
    2f42:	4b32      	ldr	r3, [pc, #200]	; (300c <_adc_set_config+0x514>)
    2f44:	4798      	blx	r3
    2f46:	1e03      	subs	r3, r0, #0
    2f48:	d1f9      	bne.n	2f3e <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    2f4a:	683b      	ldr	r3, [r7, #0]
    2f4c:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    2f4e:	683a      	ldr	r2, [r7, #0]
    2f50:	212b      	movs	r1, #43	; 0x2b
    2f52:	5c52      	ldrb	r2, [r2, r1]
    2f54:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    2f56:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    2f58:	2214      	movs	r2, #20
    2f5a:	18ba      	adds	r2, r7, r2
    2f5c:	7812      	ldrb	r2, [r2, #0]
    2f5e:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    2f60:	4313      	orrs	r3, r2
			config->negative_input |
    2f62:	683a      	ldr	r2, [r7, #0]
    2f64:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    2f66:	4313      	orrs	r3, r2
			config->positive_input;
    2f68:	683a      	ldr	r2, [r7, #0]
    2f6a:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    2f6c:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    2f6e:	693b      	ldr	r3, [r7, #16]
    2f70:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    2f72:	683b      	ldr	r3, [r7, #0]
    2f74:	222a      	movs	r2, #42	; 0x2a
    2f76:	5c9a      	ldrb	r2, [r3, r2]
    2f78:	693b      	ldr	r3, [r7, #16]
    2f7a:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    2f7c:	693b      	ldr	r3, [r7, #16]
    2f7e:	220f      	movs	r2, #15
    2f80:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    2f82:	683b      	ldr	r3, [r7, #0]
    2f84:	2224      	movs	r2, #36	; 0x24
    2f86:	5c9b      	ldrb	r3, [r3, r2]
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d01e      	beq.n	2fca <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2f8c:	683b      	ldr	r3, [r7, #0]
    2f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    2f90:	4a1f      	ldr	r2, [pc, #124]	; (3010 <_adc_set_config+0x518>)
    2f92:	4293      	cmp	r3, r2
    2f94:	d901      	bls.n	2f9a <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    2f96:	2317      	movs	r3, #23
    2f98:	e031      	b.n	2ffe <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    2f9a:	683b      	ldr	r3, [r7, #0]
    2f9c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    2f9e:	693b      	ldr	r3, [r7, #16]
    2fa0:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    2fa2:	683b      	ldr	r3, [r7, #0]
    2fa4:	2228      	movs	r2, #40	; 0x28
    2fa6:	5e9b      	ldrsh	r3, [r3, r2]
    2fa8:	4a1a      	ldr	r2, [pc, #104]	; (3014 <_adc_set_config+0x51c>)
    2faa:	4293      	cmp	r3, r2
    2fac:	dc05      	bgt.n	2fba <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    2fae:	683b      	ldr	r3, [r7, #0]
    2fb0:	2228      	movs	r2, #40	; 0x28
    2fb2:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    2fb4:	4a18      	ldr	r2, [pc, #96]	; (3018 <_adc_set_config+0x520>)
    2fb6:	4293      	cmp	r3, r2
    2fb8:	da01      	bge.n	2fbe <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    2fba:	2317      	movs	r3, #23
    2fbc:	e01f      	b.n	2ffe <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2fbe:	683b      	ldr	r3, [r7, #0]
    2fc0:	2228      	movs	r2, #40	; 0x28
    2fc2:	5e9b      	ldrsh	r3, [r3, r2]
    2fc4:	b29a      	uxth	r2, r3
    2fc6:	693b      	ldr	r3, [r7, #16]
    2fc8:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    2fca:	4b14      	ldr	r3, [pc, #80]	; (301c <_adc_set_config+0x524>)
    2fcc:	681b      	ldr	r3, [r3, #0]
    2fce:	08db      	lsrs	r3, r3, #3
    2fd0:	b29b      	uxth	r3, r3
    2fd2:	021b      	lsls	r3, r3, #8
    2fd4:	b29a      	uxth	r2, r3
    2fd6:	23e0      	movs	r3, #224	; 0xe0
    2fd8:	00db      	lsls	r3, r3, #3
    2fda:	4013      	ands	r3, r2
    2fdc:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    2fde:	4b10      	ldr	r3, [pc, #64]	; (3020 <_adc_set_config+0x528>)
    2fe0:	685c      	ldr	r4, [r3, #4]
    2fe2:	681b      	ldr	r3, [r3, #0]
    2fe4:	0161      	lsls	r1, r4, #5
    2fe6:	0edd      	lsrs	r5, r3, #27
    2fe8:	430d      	orrs	r5, r1
    2fea:	0ee6      	lsrs	r6, r4, #27
    2fec:	b2ab      	uxth	r3, r5
    2fee:	21ff      	movs	r1, #255	; 0xff
    2ff0:	400b      	ands	r3, r1
    2ff2:	b29b      	uxth	r3, r3
			) |
    2ff4:	4313      	orrs	r3, r2
    2ff6:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    2ff8:	693b      	ldr	r3, [r7, #16]
    2ffa:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    2ffc:	2300      	movs	r3, #0
}
    2ffe:	0018      	movs	r0, r3
    3000:	46bd      	mov	sp, r7
    3002:	b009      	add	sp, #36	; 0x24
    3004:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3006:	46c0      	nop			; (mov r8, r8)
    3008:	0000ffff 	.word	0x0000ffff
    300c:	000029ad 	.word	0x000029ad
    3010:	00000fff 	.word	0x00000fff
    3014:	000007ff 	.word	0x000007ff
    3018:	fffff800 	.word	0xfffff800
    301c:	00806024 	.word	0x00806024
    3020:	00806020 	.word	0x00806020

00003024 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    3024:	b580      	push	{r7, lr}
    3026:	b084      	sub	sp, #16
    3028:	af00      	add	r7, sp, #0
    302a:	60f8      	str	r0, [r7, #12]
    302c:	60b9      	str	r1, [r7, #8]
    302e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    3030:	68fb      	ldr	r3, [r7, #12]
    3032:	68ba      	ldr	r2, [r7, #8]
    3034:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    3036:	2380      	movs	r3, #128	; 0x80
    3038:	025b      	lsls	r3, r3, #9
    303a:	0019      	movs	r1, r3
    303c:	2002      	movs	r0, #2
    303e:	4b15      	ldr	r3, [pc, #84]	; (3094 <adc_init+0x70>)
    3040:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    3042:	68bb      	ldr	r3, [r7, #8]
    3044:	781b      	ldrb	r3, [r3, #0]
    3046:	b2db      	uxtb	r3, r3
    3048:	001a      	movs	r2, r3
    304a:	2301      	movs	r3, #1
    304c:	4013      	ands	r3, r2
    304e:	d001      	beq.n	3054 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    3050:	2305      	movs	r3, #5
    3052:	e01a      	b.n	308a <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    3054:	68bb      	ldr	r3, [r7, #8]
    3056:	781b      	ldrb	r3, [r3, #0]
    3058:	b2db      	uxtb	r3, r3
    305a:	001a      	movs	r2, r3
    305c:	2302      	movs	r3, #2
    305e:	4013      	ands	r3, r2
    3060:	d001      	beq.n	3066 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    3062:	231c      	movs	r3, #28
    3064:	e011      	b.n	308a <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    3066:	687b      	ldr	r3, [r7, #4]
    3068:	785a      	ldrb	r2, [r3, #1]
    306a:	68fb      	ldr	r3, [r7, #12]
    306c:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    306e:	68fb      	ldr	r3, [r7, #12]
    3070:	791b      	ldrb	r3, [r3, #4]
    3072:	2b00      	cmp	r3, #0
    3074:	d102      	bne.n	307c <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    3076:	2001      	movs	r0, #1
    3078:	4b07      	ldr	r3, [pc, #28]	; (3098 <adc_init+0x74>)
    307a:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    307c:	687a      	ldr	r2, [r7, #4]
    307e:	68fb      	ldr	r3, [r7, #12]
    3080:	0011      	movs	r1, r2
    3082:	0018      	movs	r0, r3
    3084:	4b05      	ldr	r3, [pc, #20]	; (309c <adc_init+0x78>)
    3086:	4798      	blx	r3
    3088:	0003      	movs	r3, r0
}
    308a:	0018      	movs	r0, r3
    308c:	46bd      	mov	sp, r7
    308e:	b004      	add	sp, #16
    3090:	bd80      	pop	{r7, pc}
    3092:	46c0      	nop			; (mov r8, r8)
    3094:	000028e9 	.word	0x000028e9
    3098:	0000296d 	.word	0x0000296d
    309c:	00002af9 	.word	0x00002af9

000030a0 <system_gclk_chan_get_config_defaults>:
{
    30a0:	b580      	push	{r7, lr}
    30a2:	b082      	sub	sp, #8
    30a4:	af00      	add	r7, sp, #0
    30a6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    30a8:	687b      	ldr	r3, [r7, #4]
    30aa:	2200      	movs	r2, #0
    30ac:	701a      	strb	r2, [r3, #0]
}
    30ae:	46c0      	nop			; (mov r8, r8)
    30b0:	46bd      	mov	sp, r7
    30b2:	b002      	add	sp, #8
    30b4:	bd80      	pop	{r7, pc}
	...

000030b8 <system_apb_clock_set_mask>:
{
    30b8:	b580      	push	{r7, lr}
    30ba:	b082      	sub	sp, #8
    30bc:	af00      	add	r7, sp, #0
    30be:	0002      	movs	r2, r0
    30c0:	6039      	str	r1, [r7, #0]
    30c2:	1dfb      	adds	r3, r7, #7
    30c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    30c6:	1dfb      	adds	r3, r7, #7
    30c8:	781b      	ldrb	r3, [r3, #0]
    30ca:	2b01      	cmp	r3, #1
    30cc:	d00a      	beq.n	30e4 <system_apb_clock_set_mask+0x2c>
    30ce:	2b02      	cmp	r3, #2
    30d0:	d00f      	beq.n	30f2 <system_apb_clock_set_mask+0x3a>
    30d2:	2b00      	cmp	r3, #0
    30d4:	d114      	bne.n	3100 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    30d6:	4b0e      	ldr	r3, [pc, #56]	; (3110 <system_apb_clock_set_mask+0x58>)
    30d8:	4a0d      	ldr	r2, [pc, #52]	; (3110 <system_apb_clock_set_mask+0x58>)
    30da:	6991      	ldr	r1, [r2, #24]
    30dc:	683a      	ldr	r2, [r7, #0]
    30de:	430a      	orrs	r2, r1
    30e0:	619a      	str	r2, [r3, #24]
			break;
    30e2:	e00f      	b.n	3104 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    30e4:	4b0a      	ldr	r3, [pc, #40]	; (3110 <system_apb_clock_set_mask+0x58>)
    30e6:	4a0a      	ldr	r2, [pc, #40]	; (3110 <system_apb_clock_set_mask+0x58>)
    30e8:	69d1      	ldr	r1, [r2, #28]
    30ea:	683a      	ldr	r2, [r7, #0]
    30ec:	430a      	orrs	r2, r1
    30ee:	61da      	str	r2, [r3, #28]
			break;
    30f0:	e008      	b.n	3104 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    30f2:	4b07      	ldr	r3, [pc, #28]	; (3110 <system_apb_clock_set_mask+0x58>)
    30f4:	4a06      	ldr	r2, [pc, #24]	; (3110 <system_apb_clock_set_mask+0x58>)
    30f6:	6a11      	ldr	r1, [r2, #32]
    30f8:	683a      	ldr	r2, [r7, #0]
    30fa:	430a      	orrs	r2, r1
    30fc:	621a      	str	r2, [r3, #32]
			break;
    30fe:	e001      	b.n	3104 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3100:	2317      	movs	r3, #23
    3102:	e000      	b.n	3106 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3104:	2300      	movs	r3, #0
}
    3106:	0018      	movs	r0, r3
    3108:	46bd      	mov	sp, r7
    310a:	b002      	add	sp, #8
    310c:	bd80      	pop	{r7, pc}
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	40000400 	.word	0x40000400

00003114 <system_pinmux_get_config_defaults>:
{
    3114:	b580      	push	{r7, lr}
    3116:	b082      	sub	sp, #8
    3118:	af00      	add	r7, sp, #0
    311a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    311c:	687b      	ldr	r3, [r7, #4]
    311e:	2280      	movs	r2, #128	; 0x80
    3120:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3122:	687b      	ldr	r3, [r7, #4]
    3124:	2200      	movs	r2, #0
    3126:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3128:	687b      	ldr	r3, [r7, #4]
    312a:	2201      	movs	r2, #1
    312c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    312e:	687b      	ldr	r3, [r7, #4]
    3130:	2200      	movs	r2, #0
    3132:	70da      	strb	r2, [r3, #3]
}
    3134:	46c0      	nop			; (mov r8, r8)
    3136:	46bd      	mov	sp, r7
    3138:	b002      	add	sp, #8
    313a:	bd80      	pop	{r7, pc}

0000313c <system_is_debugger_present>:
{
    313c:	b580      	push	{r7, lr}
    313e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3140:	4b05      	ldr	r3, [pc, #20]	; (3158 <system_is_debugger_present+0x1c>)
    3142:	789b      	ldrb	r3, [r3, #2]
    3144:	b2db      	uxtb	r3, r3
    3146:	001a      	movs	r2, r3
    3148:	2302      	movs	r3, #2
    314a:	4013      	ands	r3, r2
    314c:	1e5a      	subs	r2, r3, #1
    314e:	4193      	sbcs	r3, r2
    3150:	b2db      	uxtb	r3, r3
}
    3152:	0018      	movs	r0, r3
    3154:	46bd      	mov	sp, r7
    3156:	bd80      	pop	{r7, pc}
    3158:	41002000 	.word	0x41002000

0000315c <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    315c:	b580      	push	{r7, lr}
    315e:	b084      	sub	sp, #16
    3160:	af00      	add	r7, sp, #0
    3162:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	681b      	ldr	r3, [r3, #0]
    3168:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    316a:	68fb      	ldr	r3, [r7, #12]
    316c:	69db      	ldr	r3, [r3, #28]
    316e:	2207      	movs	r2, #7
    3170:	4013      	ands	r3, r2
    3172:	1e5a      	subs	r2, r3, #1
    3174:	4193      	sbcs	r3, r2
    3176:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    3178:	0018      	movs	r0, r3
    317a:	46bd      	mov	sp, r7
    317c:	b004      	add	sp, #16
    317e:	bd80      	pop	{r7, pc}

00003180 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    3180:	b580      	push	{r7, lr}
    3182:	b082      	sub	sp, #8
    3184:	af00      	add	r7, sp, #0
    3186:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    3188:	46c0      	nop			; (mov r8, r8)
    318a:	687b      	ldr	r3, [r7, #4]
    318c:	0018      	movs	r0, r3
    318e:	4b04      	ldr	r3, [pc, #16]	; (31a0 <_i2c_master_wait_for_sync+0x20>)
    3190:	4798      	blx	r3
    3192:	1e03      	subs	r3, r0, #0
    3194:	d1f9      	bne.n	318a <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    3196:	46c0      	nop			; (mov r8, r8)
    3198:	46bd      	mov	sp, r7
    319a:	b002      	add	sp, #8
    319c:	bd80      	pop	{r7, pc}
    319e:	46c0      	nop			; (mov r8, r8)
    31a0:	0000315d 	.word	0x0000315d

000031a4 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    31a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31a6:	b097      	sub	sp, #92	; 0x5c
    31a8:	af00      	add	r7, sp, #0
    31aa:	6178      	str	r0, [r7, #20]
    31ac:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    31ae:	2300      	movs	r3, #0
    31b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    31b2:	2300      	movs	r3, #0
    31b4:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    31b6:	2300      	movs	r3, #0
    31b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    31ba:	233b      	movs	r3, #59	; 0x3b
    31bc:	2210      	movs	r2, #16
    31be:	4694      	mov	ip, r2
    31c0:	44bc      	add	ip, r7
    31c2:	4463      	add	r3, ip
    31c4:	2200      	movs	r2, #0
    31c6:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    31c8:	697b      	ldr	r3, [r7, #20]
    31ca:	681b      	ldr	r3, [r3, #0]
    31cc:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    31ce:	697b      	ldr	r3, [r7, #20]
    31d0:	681b      	ldr	r3, [r3, #0]
    31d2:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    31d4:	2323      	movs	r3, #35	; 0x23
    31d6:	2210      	movs	r2, #16
    31d8:	18ba      	adds	r2, r7, r2
    31da:	18d4      	adds	r4, r2, r3
    31dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    31de:	0018      	movs	r0, r3
    31e0:	4bc0      	ldr	r3, [pc, #768]	; (34e4 <_i2c_master_set_config+0x340>)
    31e2:	4798      	blx	r3
    31e4:	0003      	movs	r3, r0
    31e6:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    31e8:	230c      	movs	r3, #12
    31ea:	2210      	movs	r2, #16
    31ec:	4694      	mov	ip, r2
    31ee:	44bc      	add	ip, r7
    31f0:	4463      	add	r3, ip
    31f2:	0018      	movs	r0, r3
    31f4:	4bbc      	ldr	r3, [pc, #752]	; (34e8 <_i2c_master_set_config+0x344>)
    31f6:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    31f8:	693b      	ldr	r3, [r7, #16]
    31fa:	69db      	ldr	r3, [r3, #28]
    31fc:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    31fe:	693b      	ldr	r3, [r7, #16]
    3200:	6a1b      	ldr	r3, [r3, #32]
    3202:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    3204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3206:	2b00      	cmp	r3, #0
    3208:	d106      	bne.n	3218 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    320c:	2100      	movs	r1, #0
    320e:	0018      	movs	r0, r3
    3210:	4bb6      	ldr	r3, [pc, #728]	; (34ec <_i2c_master_set_config+0x348>)
    3212:	4798      	blx	r3
    3214:	0003      	movs	r3, r0
    3216:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    3218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    321a:	b2da      	uxtb	r2, r3
    321c:	230c      	movs	r3, #12
    321e:	2110      	movs	r1, #16
    3220:	468c      	mov	ip, r1
    3222:	44bc      	add	ip, r7
    3224:	4463      	add	r3, ip
    3226:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3228:	230c      	movs	r3, #12
    322a:	2210      	movs	r2, #16
    322c:	4694      	mov	ip, r2
    322e:	44bc      	add	ip, r7
    3230:	4463      	add	r3, ip
    3232:	2202      	movs	r2, #2
    3234:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    3236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3238:	0c1b      	lsrs	r3, r3, #16
    323a:	b2db      	uxtb	r3, r3
    323c:	220c      	movs	r2, #12
    323e:	2110      	movs	r1, #16
    3240:	468c      	mov	ip, r1
    3242:	44bc      	add	ip, r7
    3244:	4462      	add	r2, ip
    3246:	0011      	movs	r1, r2
    3248:	0018      	movs	r0, r3
    324a:	4ba9      	ldr	r3, [pc, #676]	; (34f0 <_i2c_master_set_config+0x34c>)
    324c:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    324e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3250:	2b00      	cmp	r3, #0
    3252:	d106      	bne.n	3262 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    3254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3256:	2101      	movs	r1, #1
    3258:	0018      	movs	r0, r3
    325a:	4ba4      	ldr	r3, [pc, #656]	; (34ec <_i2c_master_set_config+0x348>)
    325c:	4798      	blx	r3
    325e:	0003      	movs	r3, r0
    3260:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    3262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3264:	b2da      	uxtb	r2, r3
    3266:	230c      	movs	r3, #12
    3268:	2110      	movs	r1, #16
    326a:	468c      	mov	ip, r1
    326c:	44bc      	add	ip, r7
    326e:	4463      	add	r3, ip
    3270:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3272:	230c      	movs	r3, #12
    3274:	2210      	movs	r2, #16
    3276:	4694      	mov	ip, r2
    3278:	44bc      	add	ip, r7
    327a:	4463      	add	r3, ip
    327c:	2202      	movs	r2, #2
    327e:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    3280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3282:	0c1b      	lsrs	r3, r3, #16
    3284:	b2db      	uxtb	r3, r3
    3286:	220c      	movs	r2, #12
    3288:	2110      	movs	r1, #16
    328a:	468c      	mov	ip, r1
    328c:	44bc      	add	ip, r7
    328e:	4462      	add	r2, ip
    3290:	0011      	movs	r1, r2
    3292:	0018      	movs	r0, r3
    3294:	4b96      	ldr	r3, [pc, #600]	; (34f0 <_i2c_master_set_config+0x34c>)
    3296:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3298:	693b      	ldr	r3, [r7, #16]
    329a:	8a9a      	ldrh	r2, [r3, #20]
    329c:	697b      	ldr	r3, [r7, #20]
    329e:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    32a0:	693b      	ldr	r3, [r7, #16]
    32a2:	8ada      	ldrh	r2, [r3, #22]
    32a4:	697b      	ldr	r3, [r7, #20]
    32a6:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    32a8:	693b      	ldr	r3, [r7, #16]
    32aa:	7e1b      	ldrb	r3, [r3, #24]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d103      	bne.n	32b8 <_i2c_master_set_config+0x114>
    32b0:	4b90      	ldr	r3, [pc, #576]	; (34f4 <_i2c_master_set_config+0x350>)
    32b2:	4798      	blx	r3
    32b4:	1e03      	subs	r3, r0, #0
    32b6:	d002      	beq.n	32be <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    32b8:	2380      	movs	r3, #128	; 0x80
    32ba:	657b      	str	r3, [r7, #84]	; 0x54
    32bc:	e001      	b.n	32c2 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    32be:	2300      	movs	r3, #0
    32c0:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    32c2:	693b      	ldr	r3, [r7, #16]
    32c4:	691b      	ldr	r3, [r3, #16]
    32c6:	2b00      	cmp	r3, #0
    32c8:	d004      	beq.n	32d4 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    32ca:	693b      	ldr	r3, [r7, #16]
    32cc:	691b      	ldr	r3, [r3, #16]
    32ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    32d0:	4313      	orrs	r3, r2
    32d2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    32d4:	693b      	ldr	r3, [r7, #16]
    32d6:	689b      	ldr	r3, [r3, #8]
    32d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    32da:	4313      	orrs	r3, r2
    32dc:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    32de:	693b      	ldr	r3, [r7, #16]
    32e0:	2224      	movs	r2, #36	; 0x24
    32e2:	5c9b      	ldrb	r3, [r3, r2]
    32e4:	2b00      	cmp	r3, #0
    32e6:	d004      	beq.n	32f2 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    32e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    32ea:	2280      	movs	r2, #128	; 0x80
    32ec:	05d2      	lsls	r2, r2, #23
    32ee:	4313      	orrs	r3, r2
    32f0:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    32f2:	693b      	ldr	r3, [r7, #16]
    32f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    32f6:	2b00      	cmp	r3, #0
    32f8:	d004      	beq.n	3304 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    32fa:	693b      	ldr	r3, [r7, #16]
    32fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    32fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3300:	4313      	orrs	r3, r2
    3302:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    3304:	693b      	ldr	r3, [r7, #16]
    3306:	222c      	movs	r2, #44	; 0x2c
    3308:	5c9b      	ldrb	r3, [r3, r2]
    330a:	2b00      	cmp	r3, #0
    330c:	d105      	bne.n	331a <_i2c_master_set_config+0x176>
    330e:	693b      	ldr	r3, [r7, #16]
    3310:	689a      	ldr	r2, [r3, #8]
    3312:	2380      	movs	r3, #128	; 0x80
    3314:	049b      	lsls	r3, r3, #18
    3316:	429a      	cmp	r2, r3
    3318:	d104      	bne.n	3324 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    331a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    331c:	2280      	movs	r2, #128	; 0x80
    331e:	0512      	lsls	r2, r2, #20
    3320:	4313      	orrs	r3, r2
    3322:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    3324:	693b      	ldr	r3, [r7, #16]
    3326:	222d      	movs	r2, #45	; 0x2d
    3328:	5c9b      	ldrb	r3, [r3, r2]
    332a:	2b00      	cmp	r3, #0
    332c:	d004      	beq.n	3338 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    332e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3330:	2280      	movs	r2, #128	; 0x80
    3332:	0412      	lsls	r2, r2, #16
    3334:	4313      	orrs	r3, r2
    3336:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    3338:	693b      	ldr	r3, [r7, #16]
    333a:	222e      	movs	r2, #46	; 0x2e
    333c:	5c9b      	ldrb	r3, [r3, r2]
    333e:	2b00      	cmp	r3, #0
    3340:	d004      	beq.n	334c <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    3342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3344:	2280      	movs	r2, #128	; 0x80
    3346:	03d2      	lsls	r2, r2, #15
    3348:	4313      	orrs	r3, r2
    334a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    334e:	681a      	ldr	r2, [r3, #0]
    3350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3352:	431a      	orrs	r2, r3
    3354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3356:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    3358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    335a:	2280      	movs	r2, #128	; 0x80
    335c:	0052      	lsls	r2, r2, #1
    335e:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    3360:	2323      	movs	r3, #35	; 0x23
    3362:	2210      	movs	r2, #16
    3364:	4694      	mov	ip, r2
    3366:	44bc      	add	ip, r7
    3368:	4463      	add	r3, ip
    336a:	781b      	ldrb	r3, [r3, #0]
    336c:	3314      	adds	r3, #20
    336e:	b2db      	uxtb	r3, r3
    3370:	0018      	movs	r0, r3
    3372:	4b61      	ldr	r3, [pc, #388]	; (34f8 <_i2c_master_set_config+0x354>)
    3374:	4798      	blx	r3
    3376:	0003      	movs	r3, r0
    3378:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    337a:	693b      	ldr	r3, [r7, #16]
    337c:	681b      	ldr	r3, [r3, #0]
    337e:	22fa      	movs	r2, #250	; 0xfa
    3380:	0092      	lsls	r2, r2, #2
    3382:	4353      	muls	r3, r2
    3384:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    3386:	693b      	ldr	r3, [r7, #16]
    3388:	685b      	ldr	r3, [r3, #4]
    338a:	22fa      	movs	r2, #250	; 0xfa
    338c:	0092      	lsls	r2, r2, #2
    338e:	4353      	muls	r3, r2
    3390:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    3392:	693b      	ldr	r3, [r7, #16]
    3394:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3396:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    3398:	4b58      	ldr	r3, [pc, #352]	; (34fc <_i2c_master_set_config+0x358>)
    339a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    339c:	4798      	blx	r3
    339e:	0005      	movs	r5, r0
    33a0:	000e      	movs	r6, r1
    33a2:	4b56      	ldr	r3, [pc, #344]	; (34fc <_i2c_master_set_config+0x358>)
    33a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    33a6:	4798      	blx	r3
    33a8:	60b8      	str	r0, [r7, #8]
    33aa:	60f9      	str	r1, [r7, #12]
    33ac:	4b53      	ldr	r3, [pc, #332]	; (34fc <_i2c_master_set_config+0x358>)
    33ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    33b0:	4798      	blx	r3
    33b2:	4c53      	ldr	r4, [pc, #332]	; (3500 <_i2c_master_set_config+0x35c>)
    33b4:	4a53      	ldr	r2, [pc, #332]	; (3504 <_i2c_master_set_config+0x360>)
    33b6:	4b54      	ldr	r3, [pc, #336]	; (3508 <_i2c_master_set_config+0x364>)
    33b8:	47a0      	blx	r4
    33ba:	0003      	movs	r3, r0
    33bc:	000c      	movs	r4, r1
    33be:	603b      	str	r3, [r7, #0]
    33c0:	607c      	str	r4, [r7, #4]
    33c2:	4b4e      	ldr	r3, [pc, #312]	; (34fc <_i2c_master_set_config+0x358>)
    33c4:	6a38      	ldr	r0, [r7, #32]
    33c6:	4798      	blx	r3
    33c8:	0002      	movs	r2, r0
    33ca:	000b      	movs	r3, r1
    33cc:	4c4c      	ldr	r4, [pc, #304]	; (3500 <_i2c_master_set_config+0x35c>)
    33ce:	6838      	ldr	r0, [r7, #0]
    33d0:	6879      	ldr	r1, [r7, #4]
    33d2:	47a0      	blx	r4
    33d4:	0003      	movs	r3, r0
    33d6:	000c      	movs	r4, r1
    33d8:	0018      	movs	r0, r3
    33da:	0021      	movs	r1, r4
    33dc:	4c4b      	ldr	r4, [pc, #300]	; (350c <_i2c_master_set_config+0x368>)
    33de:	2200      	movs	r2, #0
    33e0:	4b4b      	ldr	r3, [pc, #300]	; (3510 <_i2c_master_set_config+0x36c>)
    33e2:	47a0      	blx	r4
    33e4:	0003      	movs	r3, r0
    33e6:	000c      	movs	r4, r1
    33e8:	001a      	movs	r2, r3
    33ea:	0023      	movs	r3, r4
    33ec:	4c44      	ldr	r4, [pc, #272]	; (3500 <_i2c_master_set_config+0x35c>)
    33ee:	68b8      	ldr	r0, [r7, #8]
    33f0:	68f9      	ldr	r1, [r7, #12]
    33f2:	47a0      	blx	r4
    33f4:	0003      	movs	r3, r0
    33f6:	000c      	movs	r4, r1
    33f8:	001a      	movs	r2, r3
    33fa:	0023      	movs	r3, r4
    33fc:	4c45      	ldr	r4, [pc, #276]	; (3514 <_i2c_master_set_config+0x370>)
    33fe:	0028      	movs	r0, r5
    3400:	0031      	movs	r1, r6
    3402:	47a0      	blx	r4
    3404:	0003      	movs	r3, r0
    3406:	000c      	movs	r4, r1
    3408:	001d      	movs	r5, r3
    340a:	0026      	movs	r6, r4
    340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    340e:	005a      	lsls	r2, r3, #1
    3410:	4b3a      	ldr	r3, [pc, #232]	; (34fc <_i2c_master_set_config+0x358>)
    3412:	0010      	movs	r0, r2
    3414:	4798      	blx	r3
    3416:	0002      	movs	r2, r0
    3418:	000b      	movs	r3, r1
    341a:	4c3c      	ldr	r4, [pc, #240]	; (350c <_i2c_master_set_config+0x368>)
    341c:	0028      	movs	r0, r5
    341e:	0031      	movs	r1, r6
    3420:	47a0      	blx	r4
    3422:	0003      	movs	r3, r0
    3424:	000c      	movs	r4, r1
    3426:	0018      	movs	r0, r3
    3428:	0021      	movs	r1, r4
    342a:	4c3a      	ldr	r4, [pc, #232]	; (3514 <_i2c_master_set_config+0x370>)
    342c:	2200      	movs	r2, #0
    342e:	4b3a      	ldr	r3, [pc, #232]	; (3518 <_i2c_master_set_config+0x374>)
    3430:	47a0      	blx	r4
    3432:	0003      	movs	r3, r0
    3434:	000c      	movs	r4, r1
    3436:	001d      	movs	r5, r3
    3438:	0026      	movs	r6, r4
    343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    343c:	005a      	lsls	r2, r3, #1
    343e:	4b2f      	ldr	r3, [pc, #188]	; (34fc <_i2c_master_set_config+0x358>)
    3440:	0010      	movs	r0, r2
    3442:	4798      	blx	r3
    3444:	0002      	movs	r2, r0
    3446:	000b      	movs	r3, r1
    3448:	4c34      	ldr	r4, [pc, #208]	; (351c <_i2c_master_set_config+0x378>)
    344a:	0028      	movs	r0, r5
    344c:	0031      	movs	r1, r6
    344e:	47a0      	blx	r4
    3450:	0003      	movs	r3, r0
    3452:	000c      	movs	r4, r1
    3454:	0019      	movs	r1, r3
    3456:	0022      	movs	r2, r4
    3458:	4b31      	ldr	r3, [pc, #196]	; (3520 <_i2c_master_set_config+0x37c>)
    345a:	0008      	movs	r0, r1
    345c:	0011      	movs	r1, r2
    345e:	4798      	blx	r3
    3460:	0003      	movs	r3, r0
    3462:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    3464:	693b      	ldr	r3, [r7, #16]
    3466:	689a      	ldr	r2, [r3, #8]
    3468:	2380      	movs	r3, #128	; 0x80
    346a:	049b      	lsls	r3, r3, #18
    346c:	429a      	cmp	r2, r3
    346e:	d16a      	bne.n	3546 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    3470:	4b22      	ldr	r3, [pc, #136]	; (34fc <_i2c_master_set_config+0x358>)
    3472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3474:	4798      	blx	r3
    3476:	4c25      	ldr	r4, [pc, #148]	; (350c <_i2c_master_set_config+0x368>)
    3478:	0002      	movs	r2, r0
    347a:	000b      	movs	r3, r1
    347c:	47a0      	blx	r4
    347e:	0003      	movs	r3, r0
    3480:	000c      	movs	r4, r1
    3482:	001d      	movs	r5, r3
    3484:	0026      	movs	r6, r4
    3486:	4b1d      	ldr	r3, [pc, #116]	; (34fc <_i2c_master_set_config+0x358>)
    3488:	6a78      	ldr	r0, [r7, #36]	; 0x24
    348a:	4798      	blx	r3
    348c:	4c1c      	ldr	r4, [pc, #112]	; (3500 <_i2c_master_set_config+0x35c>)
    348e:	2200      	movs	r2, #0
    3490:	4b24      	ldr	r3, [pc, #144]	; (3524 <_i2c_master_set_config+0x380>)
    3492:	47a0      	blx	r4
    3494:	0003      	movs	r3, r0
    3496:	000c      	movs	r4, r1
    3498:	001a      	movs	r2, r3
    349a:	0023      	movs	r3, r4
    349c:	4c1f      	ldr	r4, [pc, #124]	; (351c <_i2c_master_set_config+0x378>)
    349e:	0028      	movs	r0, r5
    34a0:	0031      	movs	r1, r6
    34a2:	47a0      	blx	r4
    34a4:	0003      	movs	r3, r0
    34a6:	000c      	movs	r4, r1
    34a8:	0018      	movs	r0, r3
    34aa:	0021      	movs	r1, r4
    34ac:	4c19      	ldr	r4, [pc, #100]	; (3514 <_i2c_master_set_config+0x370>)
    34ae:	2200      	movs	r2, #0
    34b0:	4b19      	ldr	r3, [pc, #100]	; (3518 <_i2c_master_set_config+0x374>)
    34b2:	47a0      	blx	r4
    34b4:	0003      	movs	r3, r0
    34b6:	000c      	movs	r4, r1
    34b8:	0019      	movs	r1, r3
    34ba:	0022      	movs	r2, r4
    34bc:	4b18      	ldr	r3, [pc, #96]	; (3520 <_i2c_master_set_config+0x37c>)
    34be:	0008      	movs	r0, r1
    34c0:	0011      	movs	r1, r2
    34c2:	4798      	blx	r3
    34c4:	0003      	movs	r3, r0
    34c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    34c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34ca:	2b00      	cmp	r3, #0
    34cc:	d02e      	beq.n	352c <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    34ce:	4b16      	ldr	r3, [pc, #88]	; (3528 <_i2c_master_set_config+0x384>)
    34d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    34d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    34d4:	4798      	blx	r3
    34d6:	0003      	movs	r3, r0
    34d8:	1e9a      	subs	r2, r3, #2
    34da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34dc:	1ad3      	subs	r3, r2, r3
    34de:	653b      	str	r3, [r7, #80]	; 0x50
    34e0:	e031      	b.n	3546 <_i2c_master_set_config+0x3a2>
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	00004915 	.word	0x00004915
    34e8:	00003115 	.word	0x00003115
    34ec:	00004759 	.word	0x00004759
    34f0:	00006a61 	.word	0x00006a61
    34f4:	0000313d 	.word	0x0000313d
    34f8:	00006899 	.word	0x00006899
    34fc:	0000df4d 	.word	0x0000df4d
    3500:	0000d2f5 	.word	0x0000d2f5
    3504:	e826d695 	.word	0xe826d695
    3508:	3e112e0b 	.word	0x3e112e0b
    350c:	0000c46d 	.word	0x0000c46d
    3510:	40240000 	.word	0x40240000
    3514:	0000d7f5 	.word	0x0000d7f5
    3518:	3ff00000 	.word	0x3ff00000
    351c:	0000ca8d 	.word	0x0000ca8d
    3520:	0000de61 	.word	0x0000de61
    3524:	40080000 	.word	0x40080000
    3528:	0000bab5 	.word	0x0000bab5
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    352e:	005a      	lsls	r2, r3, #1
    3530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3532:	18d3      	adds	r3, r2, r3
    3534:	1e5a      	subs	r2, r3, #1
    3536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3538:	0059      	lsls	r1, r3, #1
    353a:	4b1d      	ldr	r3, [pc, #116]	; (35b0 <_i2c_master_set_config+0x40c>)
    353c:	0010      	movs	r0, r2
    353e:	4798      	blx	r3
    3540:	0003      	movs	r3, r0
    3542:	3b01      	subs	r3, #1
    3544:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3548:	2bff      	cmp	r3, #255	; 0xff
    354a:	dc08      	bgt.n	355e <_i2c_master_set_config+0x3ba>
    354c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    354e:	2b00      	cmp	r3, #0
    3550:	db05      	blt.n	355e <_i2c_master_set_config+0x3ba>
    3552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3554:	2bff      	cmp	r3, #255	; 0xff
    3556:	dc02      	bgt.n	355e <_i2c_master_set_config+0x3ba>
    3558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    355a:	2b00      	cmp	r3, #0
    355c:	da06      	bge.n	356c <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    355e:	233b      	movs	r3, #59	; 0x3b
    3560:	2210      	movs	r2, #16
    3562:	4694      	mov	ip, r2
    3564:	44bc      	add	ip, r7
    3566:	4463      	add	r3, ip
    3568:	2240      	movs	r2, #64	; 0x40
    356a:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    356c:	233b      	movs	r3, #59	; 0x3b
    356e:	2210      	movs	r2, #16
    3570:	4694      	mov	ip, r2
    3572:	44bc      	add	ip, r7
    3574:	4463      	add	r3, ip
    3576:	781b      	ldrb	r3, [r3, #0]
    3578:	2b40      	cmp	r3, #64	; 0x40
    357a:	d00e      	beq.n	359a <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    357e:	22ff      	movs	r2, #255	; 0xff
    3580:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    3582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3584:	041b      	lsls	r3, r3, #16
    3586:	0019      	movs	r1, r3
    3588:	23ff      	movs	r3, #255	; 0xff
    358a:	041b      	lsls	r3, r3, #16
    358c:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    358e:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    3590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3592:	0612      	lsls	r2, r2, #24
    3594:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3598:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    359a:	233b      	movs	r3, #59	; 0x3b
    359c:	2210      	movs	r2, #16
    359e:	4694      	mov	ip, r2
    35a0:	44bc      	add	ip, r7
    35a2:	4463      	add	r3, ip
    35a4:	781b      	ldrb	r3, [r3, #0]
}
    35a6:	0018      	movs	r0, r3
    35a8:	46bd      	mov	sp, r7
    35aa:	b017      	add	sp, #92	; 0x5c
    35ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35ae:	46c0      	nop			; (mov r8, r8)
    35b0:	0000bab5 	.word	0x0000bab5

000035b4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    35b4:	b590      	push	{r4, r7, lr}
    35b6:	b08b      	sub	sp, #44	; 0x2c
    35b8:	af00      	add	r7, sp, #0
    35ba:	60f8      	str	r0, [r7, #12]
    35bc:	60b9      	str	r1, [r7, #8]
    35be:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    35c0:	68fb      	ldr	r3, [r7, #12]
    35c2:	68ba      	ldr	r2, [r7, #8]
    35c4:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    35c6:	68fb      	ldr	r3, [r7, #12]
    35c8:	681b      	ldr	r3, [r3, #0]
    35ca:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    35cc:	68fb      	ldr	r3, [r7, #12]
    35ce:	681b      	ldr	r3, [r3, #0]
    35d0:	0018      	movs	r0, r3
    35d2:	4b3b      	ldr	r3, [pc, #236]	; (36c0 <i2c_master_init+0x10c>)
    35d4:	4798      	blx	r3
    35d6:	0003      	movs	r3, r0
    35d8:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    35da:	6a3b      	ldr	r3, [r7, #32]
    35dc:	3302      	adds	r3, #2
    35de:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    35e0:	6a3b      	ldr	r3, [r7, #32]
    35e2:	3314      	adds	r3, #20
    35e4:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    35e6:	2201      	movs	r2, #1
    35e8:	69fb      	ldr	r3, [r7, #28]
    35ea:	409a      	lsls	r2, r3
    35ec:	0013      	movs	r3, r2
    35ee:	0019      	movs	r1, r3
    35f0:	2002      	movs	r0, #2
    35f2:	4b34      	ldr	r3, [pc, #208]	; (36c4 <i2c_master_init+0x110>)
    35f4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    35f6:	2314      	movs	r3, #20
    35f8:	18fb      	adds	r3, r7, r3
    35fa:	0018      	movs	r0, r3
    35fc:	4b32      	ldr	r3, [pc, #200]	; (36c8 <i2c_master_init+0x114>)
    35fe:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    3600:	687b      	ldr	r3, [r7, #4]
    3602:	7b1a      	ldrb	r2, [r3, #12]
    3604:	2314      	movs	r3, #20
    3606:	18fb      	adds	r3, r7, r3
    3608:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    360a:	69bb      	ldr	r3, [r7, #24]
    360c:	b2db      	uxtb	r3, r3
    360e:	2214      	movs	r2, #20
    3610:	18ba      	adds	r2, r7, r2
    3612:	0011      	movs	r1, r2
    3614:	0018      	movs	r0, r3
    3616:	4b2d      	ldr	r3, [pc, #180]	; (36cc <i2c_master_init+0x118>)
    3618:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    361a:	69bb      	ldr	r3, [r7, #24]
    361c:	b2db      	uxtb	r3, r3
    361e:	0018      	movs	r0, r3
    3620:	4b2b      	ldr	r3, [pc, #172]	; (36d0 <i2c_master_init+0x11c>)
    3622:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	7b1b      	ldrb	r3, [r3, #12]
    3628:	2100      	movs	r1, #0
    362a:	0018      	movs	r0, r3
    362c:	4b29      	ldr	r3, [pc, #164]	; (36d4 <i2c_master_init+0x120>)
    362e:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3632:	681b      	ldr	r3, [r3, #0]
    3634:	2202      	movs	r2, #2
    3636:	4013      	ands	r3, r2
    3638:	d001      	beq.n	363e <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    363a:	231c      	movs	r3, #28
    363c:	e03b      	b.n	36b6 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3640:	681b      	ldr	r3, [r3, #0]
    3642:	2201      	movs	r2, #1
    3644:	4013      	ands	r3, r2
    3646:	d001      	beq.n	364c <i2c_master_init+0x98>
		return STATUS_BUSY;
    3648:	2305      	movs	r3, #5
    364a:	e034      	b.n	36b6 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    364c:	68fb      	ldr	r3, [r7, #12]
    364e:	681b      	ldr	r3, [r3, #0]
    3650:	2217      	movs	r2, #23
    3652:	18bc      	adds	r4, r7, r2
    3654:	0018      	movs	r0, r3
    3656:	4b1a      	ldr	r3, [pc, #104]	; (36c0 <i2c_master_init+0x10c>)
    3658:	4798      	blx	r3
    365a:	0003      	movs	r3, r0
    365c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    365e:	4a1e      	ldr	r2, [pc, #120]	; (36d8 <i2c_master_init+0x124>)
    3660:	2317      	movs	r3, #23
    3662:	18fb      	adds	r3, r7, r3
    3664:	781b      	ldrb	r3, [r3, #0]
    3666:	0011      	movs	r1, r2
    3668:	0018      	movs	r0, r3
    366a:	4b1c      	ldr	r3, [pc, #112]	; (36dc <i2c_master_init+0x128>)
    366c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    366e:	2317      	movs	r3, #23
    3670:	18fb      	adds	r3, r7, r3
    3672:	781a      	ldrb	r2, [r3, #0]
    3674:	4b1a      	ldr	r3, [pc, #104]	; (36e0 <i2c_master_init+0x12c>)
    3676:	0092      	lsls	r2, r2, #2
    3678:	68f9      	ldr	r1, [r7, #12]
    367a:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    367c:	68fb      	ldr	r3, [r7, #12]
    367e:	2200      	movs	r2, #0
    3680:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    3682:	68fb      	ldr	r3, [r7, #12]
    3684:	2200      	movs	r2, #0
    3686:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    3688:	68fb      	ldr	r3, [r7, #12]
    368a:	2200      	movs	r2, #0
    368c:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    368e:	68fb      	ldr	r3, [r7, #12]
    3690:	2200      	movs	r2, #0
    3692:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    3694:	68fb      	ldr	r3, [r7, #12]
    3696:	2225      	movs	r2, #37	; 0x25
    3698:	2100      	movs	r1, #0
    369a:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    369c:	68fb      	ldr	r3, [r7, #12]
    369e:	2200      	movs	r2, #0
    36a0:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    36a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36a4:	2214      	movs	r2, #20
    36a6:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    36a8:	687a      	ldr	r2, [r7, #4]
    36aa:	68fb      	ldr	r3, [r7, #12]
    36ac:	0011      	movs	r1, r2
    36ae:	0018      	movs	r0, r3
    36b0:	4b0c      	ldr	r3, [pc, #48]	; (36e4 <i2c_master_init+0x130>)
    36b2:	4798      	blx	r3
    36b4:	0003      	movs	r3, r0
}
    36b6:	0018      	movs	r0, r3
    36b8:	46bd      	mov	sp, r7
    36ba:	b00b      	add	sp, #44	; 0x2c
    36bc:	bd90      	pop	{r4, r7, pc}
    36be:	46c0      	nop			; (mov r8, r8)
    36c0:	00004915 	.word	0x00004915
    36c4:	000030b9 	.word	0x000030b9
    36c8:	000030a1 	.word	0x000030a1
    36cc:	00006775 	.word	0x00006775
    36d0:	000067b9 	.word	0x000067b9
    36d4:	000046cd 	.word	0x000046cd
    36d8:	00004125 	.word	0x00004125
    36dc:	00005791 	.word	0x00005791
    36e0:	200003bc 	.word	0x200003bc
    36e4:	000031a5 	.word	0x000031a5

000036e8 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    36e8:	b580      	push	{r7, lr}
    36ea:	b084      	sub	sp, #16
    36ec:	af00      	add	r7, sp, #0
    36ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    36f0:	687b      	ldr	r3, [r7, #4]
    36f2:	681b      	ldr	r3, [r3, #0]
    36f4:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    36f6:	68fb      	ldr	r3, [r7, #12]
    36f8:	7e1b      	ldrb	r3, [r3, #24]
    36fa:	b2db      	uxtb	r3, r3
    36fc:	001a      	movs	r2, r3
    36fe:	2302      	movs	r3, #2
    3700:	4013      	ands	r3, r2
    3702:	d00b      	beq.n	371c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3704:	68fb      	ldr	r3, [r7, #12]
    3706:	2202      	movs	r2, #2
    3708:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    370a:	68fb      	ldr	r3, [r7, #12]
    370c:	8b5b      	ldrh	r3, [r3, #26]
    370e:	b29b      	uxth	r3, r3
    3710:	001a      	movs	r2, r3
    3712:	2302      	movs	r3, #2
    3714:	4013      	ands	r3, r2
    3716:	d011      	beq.n	373c <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    3718:	2341      	movs	r3, #65	; 0x41
    371a:	e010      	b.n	373e <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    371c:	68fb      	ldr	r3, [r7, #12]
    371e:	8b5b      	ldrh	r3, [r3, #26]
    3720:	b29b      	uxth	r3, r3
    3722:	001a      	movs	r2, r3
    3724:	2304      	movs	r3, #4
    3726:	4013      	ands	r3, r2
    3728:	d008      	beq.n	373c <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    372a:	68fb      	ldr	r3, [r7, #12]
    372c:	685b      	ldr	r3, [r3, #4]
    372e:	22c0      	movs	r2, #192	; 0xc0
    3730:	0292      	lsls	r2, r2, #10
    3732:	431a      	orrs	r2, r3
    3734:	68fb      	ldr	r3, [r7, #12]
    3736:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    3738:	2318      	movs	r3, #24
    373a:	e000      	b.n	373e <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    373c:	2300      	movs	r3, #0
}
    373e:	0018      	movs	r0, r3
    3740:	46bd      	mov	sp, r7
    3742:	b004      	add	sp, #16
    3744:	bd80      	pop	{r7, pc}

00003746 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3746:	b580      	push	{r7, lr}
    3748:	b084      	sub	sp, #16
    374a:	af00      	add	r7, sp, #0
    374c:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    374e:	687b      	ldr	r3, [r7, #4]
    3750:	681b      	ldr	r3, [r3, #0]
    3752:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    3754:	230e      	movs	r3, #14
    3756:	18fb      	adds	r3, r7, r3
    3758:	2200      	movs	r2, #0
    375a:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    375c:	e00f      	b.n	377e <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    375e:	230e      	movs	r3, #14
    3760:	18fb      	adds	r3, r7, r3
    3762:	220e      	movs	r2, #14
    3764:	18ba      	adds	r2, r7, r2
    3766:	8812      	ldrh	r2, [r2, #0]
    3768:	3201      	adds	r2, #1
    376a:	801a      	strh	r2, [r3, #0]
    376c:	687b      	ldr	r3, [r7, #4]
    376e:	891b      	ldrh	r3, [r3, #8]
    3770:	220e      	movs	r2, #14
    3772:	18ba      	adds	r2, r7, r2
    3774:	8812      	ldrh	r2, [r2, #0]
    3776:	429a      	cmp	r2, r3
    3778:	d301      	bcc.n	377e <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    377a:	2312      	movs	r3, #18
    377c:	e00e      	b.n	379c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    377e:	68bb      	ldr	r3, [r7, #8]
    3780:	7e1b      	ldrb	r3, [r3, #24]
    3782:	b2db      	uxtb	r3, r3
    3784:	001a      	movs	r2, r3
    3786:	2301      	movs	r3, #1
    3788:	4013      	ands	r3, r2
    378a:	d106      	bne.n	379a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    378c:	68bb      	ldr	r3, [r7, #8]
    378e:	7e1b      	ldrb	r3, [r3, #24]
    3790:	b2db      	uxtb	r3, r3
    3792:	001a      	movs	r2, r3
    3794:	2302      	movs	r3, #2
    3796:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3798:	d0e1      	beq.n	375e <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    379a:	2300      	movs	r3, #0
}
    379c:	0018      	movs	r0, r3
    379e:	46bd      	mov	sp, r7
    37a0:	b004      	add	sp, #16
    37a2:	bd80      	pop	{r7, pc}

000037a4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    37a4:	b590      	push	{r4, r7, lr}
    37a6:	b085      	sub	sp, #20
    37a8:	af00      	add	r7, sp, #0
    37aa:	6078      	str	r0, [r7, #4]
    37ac:	000a      	movs	r2, r1
    37ae:	1cfb      	adds	r3, r7, #3
    37b0:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    37b2:	687b      	ldr	r3, [r7, #4]
    37b4:	681b      	ldr	r3, [r3, #0]
    37b6:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    37b8:	68fb      	ldr	r3, [r7, #12]
    37ba:	685b      	ldr	r3, [r3, #4]
    37bc:	2280      	movs	r2, #128	; 0x80
    37be:	02d2      	lsls	r2, r2, #11
    37c0:	431a      	orrs	r2, r3
    37c2:	68fb      	ldr	r3, [r7, #12]
    37c4:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    37c6:	1cfb      	adds	r3, r7, #3
    37c8:	781a      	ldrb	r2, [r3, #0]
    37ca:	68fb      	ldr	r3, [r7, #12]
    37cc:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    37ce:	230b      	movs	r3, #11
    37d0:	18fc      	adds	r4, r7, r3
    37d2:	687b      	ldr	r3, [r7, #4]
    37d4:	0018      	movs	r0, r3
    37d6:	4b07      	ldr	r3, [pc, #28]	; (37f4 <_i2c_master_send_hs_master_code+0x50>)
    37d8:	4798      	blx	r3
    37da:	0003      	movs	r3, r0
    37dc:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    37de:	68fb      	ldr	r3, [r7, #12]
    37e0:	2201      	movs	r2, #1
    37e2:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    37e4:	230b      	movs	r3, #11
    37e6:	18fb      	adds	r3, r7, r3
    37e8:	781b      	ldrb	r3, [r3, #0]
}
    37ea:	0018      	movs	r0, r3
    37ec:	46bd      	mov	sp, r7
    37ee:	b005      	add	sp, #20
    37f0:	bd90      	pop	{r4, r7, pc}
    37f2:	46c0      	nop			; (mov r8, r8)
    37f4:	00003747 	.word	0x00003747

000037f8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    37f8:	b590      	push	{r4, r7, lr}
    37fa:	b087      	sub	sp, #28
    37fc:	af00      	add	r7, sp, #0
    37fe:	6078      	str	r0, [r7, #4]
    3800:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3802:	687b      	ldr	r3, [r7, #4]
    3804:	681b      	ldr	r3, [r3, #0]
    3806:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3808:	2314      	movs	r3, #20
    380a:	18fb      	adds	r3, r7, r3
    380c:	683a      	ldr	r2, [r7, #0]
    380e:	8852      	ldrh	r2, [r2, #2]
    3810:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    3812:	2312      	movs	r3, #18
    3814:	18fb      	adds	r3, r7, r3
    3816:	2200      	movs	r2, #0
    3818:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    381a:	68fb      	ldr	r3, [r7, #12]
    381c:	681b      	ldr	r3, [r3, #0]
    381e:	011b      	lsls	r3, r3, #4
    3820:	0fdb      	lsrs	r3, r3, #31
    3822:	b2db      	uxtb	r3, r3
    3824:	001a      	movs	r2, r3
    3826:	230b      	movs	r3, #11
    3828:	18fb      	adds	r3, r7, r3
    382a:	1e51      	subs	r1, r2, #1
    382c:	418a      	sbcs	r2, r1
    382e:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3830:	683b      	ldr	r3, [r7, #0]
    3832:	7a5b      	ldrb	r3, [r3, #9]
    3834:	2b00      	cmp	r3, #0
    3836:	d006      	beq.n	3846 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3838:	683b      	ldr	r3, [r7, #0]
    383a:	7a9a      	ldrb	r2, [r3, #10]
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	0011      	movs	r1, r2
    3840:	0018      	movs	r0, r3
    3842:	4b85      	ldr	r3, [pc, #532]	; (3a58 <_i2c_master_read_packet+0x260>)
    3844:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3846:	68fb      	ldr	r3, [r7, #12]
    3848:	685b      	ldr	r3, [r3, #4]
    384a:	4a84      	ldr	r2, [pc, #528]	; (3a5c <_i2c_master_read_packet+0x264>)
    384c:	401a      	ands	r2, r3
    384e:	68fb      	ldr	r3, [r7, #12]
    3850:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3852:	683b      	ldr	r3, [r7, #0]
    3854:	7a1b      	ldrb	r3, [r3, #8]
    3856:	2b00      	cmp	r3, #0
    3858:	d042      	beq.n	38e0 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    385a:	683b      	ldr	r3, [r7, #0]
    385c:	881b      	ldrh	r3, [r3, #0]
    385e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3860:	683b      	ldr	r3, [r7, #0]
    3862:	7a5b      	ldrb	r3, [r3, #9]
    3864:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    3866:	4313      	orrs	r3, r2
    3868:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    386a:	2380      	movs	r3, #128	; 0x80
    386c:	021b      	lsls	r3, r3, #8
    386e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    3870:	68fb      	ldr	r3, [r7, #12]
    3872:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    3874:	2317      	movs	r3, #23
    3876:	18fc      	adds	r4, r7, r3
    3878:	687b      	ldr	r3, [r7, #4]
    387a:	0018      	movs	r0, r3
    387c:	4b78      	ldr	r3, [pc, #480]	; (3a60 <_i2c_master_read_packet+0x268>)
    387e:	4798      	blx	r3
    3880:	0003      	movs	r3, r0
    3882:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3884:	68fb      	ldr	r3, [r7, #12]
    3886:	685b      	ldr	r3, [r3, #4]
    3888:	4a74      	ldr	r2, [pc, #464]	; (3a5c <_i2c_master_read_packet+0x264>)
    388a:	401a      	ands	r2, r3
    388c:	68fb      	ldr	r3, [r7, #12]
    388e:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    3890:	2317      	movs	r3, #23
    3892:	18fb      	adds	r3, r7, r3
    3894:	781b      	ldrb	r3, [r3, #0]
    3896:	2b00      	cmp	r3, #0
    3898:	d107      	bne.n	38aa <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    389a:	2317      	movs	r3, #23
    389c:	18fc      	adds	r4, r7, r3
    389e:	687b      	ldr	r3, [r7, #4]
    38a0:	0018      	movs	r0, r3
    38a2:	4b70      	ldr	r3, [pc, #448]	; (3a64 <_i2c_master_read_packet+0x26c>)
    38a4:	4798      	blx	r3
    38a6:	0003      	movs	r3, r0
    38a8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    38aa:	2317      	movs	r3, #23
    38ac:	18fb      	adds	r3, r7, r3
    38ae:	781b      	ldrb	r3, [r3, #0]
    38b0:	2b00      	cmp	r3, #0
    38b2:	d111      	bne.n	38d8 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    38b4:	683b      	ldr	r3, [r7, #0]
    38b6:	881b      	ldrh	r3, [r3, #0]
    38b8:	0a1b      	lsrs	r3, r3, #8
    38ba:	b29b      	uxth	r3, r3
    38bc:	2278      	movs	r2, #120	; 0x78
    38be:	4313      	orrs	r3, r2
    38c0:	b29b      	uxth	r3, r3
    38c2:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    38c4:	683b      	ldr	r3, [r7, #0]
    38c6:	7a5b      	ldrb	r3, [r3, #9]
    38c8:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    38ca:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    38cc:	2201      	movs	r2, #1
    38ce:	4313      	orrs	r3, r2
    38d0:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    38d2:	68fb      	ldr	r3, [r7, #12]
    38d4:	625a      	str	r2, [r3, #36]	; 0x24
    38d6:	e00f      	b.n	38f8 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    38d8:	2317      	movs	r3, #23
    38da:	18fb      	adds	r3, r7, r3
    38dc:	781b      	ldrb	r3, [r3, #0]
    38de:	e0b6      	b.n	3a4e <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    38e0:	683b      	ldr	r3, [r7, #0]
    38e2:	881b      	ldrh	r3, [r3, #0]
    38e4:	005b      	lsls	r3, r3, #1
    38e6:	2201      	movs	r2, #1
    38e8:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    38ea:	683b      	ldr	r3, [r7, #0]
    38ec:	7a5b      	ldrb	r3, [r3, #9]
    38ee:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    38f0:	4313      	orrs	r3, r2
    38f2:	001a      	movs	r2, r3
    38f4:	68fb      	ldr	r3, [r7, #12]
    38f6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    38f8:	2317      	movs	r3, #23
    38fa:	18fc      	adds	r4, r7, r3
    38fc:	687b      	ldr	r3, [r7, #4]
    38fe:	0018      	movs	r0, r3
    3900:	4b57      	ldr	r3, [pc, #348]	; (3a60 <_i2c_master_read_packet+0x268>)
    3902:	4798      	blx	r3
    3904:	0003      	movs	r3, r0
    3906:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    3908:	230b      	movs	r3, #11
    390a:	18fb      	adds	r3, r7, r3
    390c:	781b      	ldrb	r3, [r3, #0]
    390e:	2b00      	cmp	r3, #0
    3910:	d00b      	beq.n	392a <_i2c_master_read_packet+0x132>
    3912:	683b      	ldr	r3, [r7, #0]
    3914:	885b      	ldrh	r3, [r3, #2]
    3916:	2b01      	cmp	r3, #1
    3918:	d107      	bne.n	392a <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    391a:	68fb      	ldr	r3, [r7, #12]
    391c:	685b      	ldr	r3, [r3, #4]
    391e:	2280      	movs	r2, #128	; 0x80
    3920:	02d2      	lsls	r2, r2, #11
    3922:	431a      	orrs	r2, r3
    3924:	68fb      	ldr	r3, [r7, #12]
    3926:	605a      	str	r2, [r3, #4]
    3928:	e005      	b.n	3936 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    392a:	68fb      	ldr	r3, [r7, #12]
    392c:	685b      	ldr	r3, [r3, #4]
    392e:	4a4b      	ldr	r2, [pc, #300]	; (3a5c <_i2c_master_read_packet+0x264>)
    3930:	401a      	ands	r2, r3
    3932:	68fb      	ldr	r3, [r7, #12]
    3934:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3936:	2317      	movs	r3, #23
    3938:	18fb      	adds	r3, r7, r3
    393a:	781b      	ldrb	r3, [r3, #0]
    393c:	2b00      	cmp	r3, #0
    393e:	d107      	bne.n	3950 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    3940:	2317      	movs	r3, #23
    3942:	18fc      	adds	r4, r7, r3
    3944:	687b      	ldr	r3, [r7, #4]
    3946:	0018      	movs	r0, r3
    3948:	4b46      	ldr	r3, [pc, #280]	; (3a64 <_i2c_master_read_packet+0x26c>)
    394a:	4798      	blx	r3
    394c:	0003      	movs	r3, r0
    394e:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3950:	2317      	movs	r3, #23
    3952:	18fb      	adds	r3, r7, r3
    3954:	781b      	ldrb	r3, [r3, #0]
    3956:	2b00      	cmp	r3, #0
    3958:	d000      	beq.n	395c <_i2c_master_read_packet+0x164>
    395a:	e075      	b.n	3a48 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    395c:	e04b      	b.n	39f6 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    395e:	68fb      	ldr	r3, [r7, #12]
    3960:	8b5b      	ldrh	r3, [r3, #26]
    3962:	b29b      	uxth	r3, r3
    3964:	001a      	movs	r2, r3
    3966:	2320      	movs	r3, #32
    3968:	4013      	ands	r3, r2
    396a:	d101      	bne.n	3970 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    396c:	2341      	movs	r3, #65	; 0x41
    396e:	e06e      	b.n	3a4e <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    3970:	687b      	ldr	r3, [r7, #4]
    3972:	7adb      	ldrb	r3, [r3, #11]
    3974:	2b00      	cmp	r3, #0
    3976:	d01e      	beq.n	39b6 <_i2c_master_read_packet+0x1be>
    3978:	230b      	movs	r3, #11
    397a:	18fb      	adds	r3, r7, r3
    397c:	781b      	ldrb	r3, [r3, #0]
    397e:	2201      	movs	r2, #1
    3980:	4053      	eors	r3, r2
    3982:	b2db      	uxtb	r3, r3
    3984:	2b00      	cmp	r3, #0
    3986:	d004      	beq.n	3992 <_i2c_master_read_packet+0x19a>
    3988:	2314      	movs	r3, #20
    398a:	18fb      	adds	r3, r7, r3
    398c:	881b      	ldrh	r3, [r3, #0]
    398e:	2b00      	cmp	r3, #0
    3990:	d009      	beq.n	39a6 <_i2c_master_read_packet+0x1ae>
    3992:	230b      	movs	r3, #11
    3994:	18fb      	adds	r3, r7, r3
    3996:	781b      	ldrb	r3, [r3, #0]
    3998:	2b00      	cmp	r3, #0
    399a:	d00c      	beq.n	39b6 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    399c:	2314      	movs	r3, #20
    399e:	18fb      	adds	r3, r7, r3
    39a0:	881b      	ldrh	r3, [r3, #0]
    39a2:	2b01      	cmp	r3, #1
    39a4:	d107      	bne.n	39b6 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    39a6:	68fb      	ldr	r3, [r7, #12]
    39a8:	685b      	ldr	r3, [r3, #4]
    39aa:	2280      	movs	r2, #128	; 0x80
    39ac:	02d2      	lsls	r2, r2, #11
    39ae:	431a      	orrs	r2, r3
    39b0:	68fb      	ldr	r3, [r7, #12]
    39b2:	605a      	str	r2, [r3, #4]
    39b4:	e01a      	b.n	39ec <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    39b6:	687b      	ldr	r3, [r7, #4]
    39b8:	0018      	movs	r0, r3
    39ba:	4b2b      	ldr	r3, [pc, #172]	; (3a68 <_i2c_master_read_packet+0x270>)
    39bc:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    39be:	683b      	ldr	r3, [r7, #0]
    39c0:	685a      	ldr	r2, [r3, #4]
    39c2:	2312      	movs	r3, #18
    39c4:	18fb      	adds	r3, r7, r3
    39c6:	881b      	ldrh	r3, [r3, #0]
    39c8:	2112      	movs	r1, #18
    39ca:	1879      	adds	r1, r7, r1
    39cc:	1c58      	adds	r0, r3, #1
    39ce:	8008      	strh	r0, [r1, #0]
    39d0:	18d3      	adds	r3, r2, r3
    39d2:	68fa      	ldr	r2, [r7, #12]
    39d4:	2128      	movs	r1, #40	; 0x28
    39d6:	5c52      	ldrb	r2, [r2, r1]
    39d8:	b2d2      	uxtb	r2, r2
    39da:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    39dc:	2317      	movs	r3, #23
    39de:	18fc      	adds	r4, r7, r3
    39e0:	687b      	ldr	r3, [r7, #4]
    39e2:	0018      	movs	r0, r3
    39e4:	4b1e      	ldr	r3, [pc, #120]	; (3a60 <_i2c_master_read_packet+0x268>)
    39e6:	4798      	blx	r3
    39e8:	0003      	movs	r3, r0
    39ea:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    39ec:	2317      	movs	r3, #23
    39ee:	18fb      	adds	r3, r7, r3
    39f0:	781b      	ldrb	r3, [r3, #0]
    39f2:	2b00      	cmp	r3, #0
    39f4:	d109      	bne.n	3a0a <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    39f6:	2314      	movs	r3, #20
    39f8:	18fb      	adds	r3, r7, r3
    39fa:	881b      	ldrh	r3, [r3, #0]
    39fc:	2214      	movs	r2, #20
    39fe:	18ba      	adds	r2, r7, r2
    3a00:	1e59      	subs	r1, r3, #1
    3a02:	8011      	strh	r1, [r2, #0]
    3a04:	2b00      	cmp	r3, #0
    3a06:	d1aa      	bne.n	395e <_i2c_master_read_packet+0x166>
    3a08:	e000      	b.n	3a0c <_i2c_master_read_packet+0x214>
				break;
    3a0a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3a0c:	687b      	ldr	r3, [r7, #4]
    3a0e:	7a9b      	ldrb	r3, [r3, #10]
    3a10:	2b00      	cmp	r3, #0
    3a12:	d00a      	beq.n	3a2a <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    3a14:	687b      	ldr	r3, [r7, #4]
    3a16:	0018      	movs	r0, r3
    3a18:	4b13      	ldr	r3, [pc, #76]	; (3a68 <_i2c_master_read_packet+0x270>)
    3a1a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3a1c:	68fb      	ldr	r3, [r7, #12]
    3a1e:	685b      	ldr	r3, [r3, #4]
    3a20:	22c0      	movs	r2, #192	; 0xc0
    3a22:	0292      	lsls	r2, r2, #10
    3a24:	431a      	orrs	r2, r3
    3a26:	68fb      	ldr	r3, [r7, #12]
    3a28:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	0018      	movs	r0, r3
    3a2e:	4b0e      	ldr	r3, [pc, #56]	; (3a68 <_i2c_master_read_packet+0x270>)
    3a30:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    3a32:	683b      	ldr	r3, [r7, #0]
    3a34:	685a      	ldr	r2, [r3, #4]
    3a36:	2312      	movs	r3, #18
    3a38:	18fb      	adds	r3, r7, r3
    3a3a:	881b      	ldrh	r3, [r3, #0]
    3a3c:	18d3      	adds	r3, r2, r3
    3a3e:	68fa      	ldr	r2, [r7, #12]
    3a40:	2128      	movs	r1, #40	; 0x28
    3a42:	5c52      	ldrb	r2, [r2, r1]
    3a44:	b2d2      	uxtb	r2, r2
    3a46:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    3a48:	2317      	movs	r3, #23
    3a4a:	18fb      	adds	r3, r7, r3
    3a4c:	781b      	ldrb	r3, [r3, #0]
}
    3a4e:	0018      	movs	r0, r3
    3a50:	46bd      	mov	sp, r7
    3a52:	b007      	add	sp, #28
    3a54:	bd90      	pop	{r4, r7, pc}
    3a56:	46c0      	nop			; (mov r8, r8)
    3a58:	000037a5 	.word	0x000037a5
    3a5c:	fffbffff 	.word	0xfffbffff
    3a60:	00003747 	.word	0x00003747
    3a64:	000036e9 	.word	0x000036e9
    3a68:	00003181 	.word	0x00003181

00003a6c <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3a6c:	b580      	push	{r7, lr}
    3a6e:	b082      	sub	sp, #8
    3a70:	af00      	add	r7, sp, #0
    3a72:	6078      	str	r0, [r7, #4]
    3a74:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    3a76:	687b      	ldr	r3, [r7, #4]
    3a78:	8b9b      	ldrh	r3, [r3, #28]
    3a7a:	b29b      	uxth	r3, r3
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d001      	beq.n	3a84 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    3a80:	2305      	movs	r3, #5
    3a82:	e00c      	b.n	3a9e <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3a84:	687b      	ldr	r3, [r7, #4]
    3a86:	2201      	movs	r2, #1
    3a88:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	2201      	movs	r2, #1
    3a8e:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    3a90:	683a      	ldr	r2, [r7, #0]
    3a92:	687b      	ldr	r3, [r7, #4]
    3a94:	0011      	movs	r1, r2
    3a96:	0018      	movs	r0, r3
    3a98:	4b03      	ldr	r3, [pc, #12]	; (3aa8 <i2c_master_read_packet_wait+0x3c>)
    3a9a:	4798      	blx	r3
    3a9c:	0003      	movs	r3, r0
}
    3a9e:	0018      	movs	r0, r3
    3aa0:	46bd      	mov	sp, r7
    3aa2:	b002      	add	sp, #8
    3aa4:	bd80      	pop	{r7, pc}
    3aa6:	46c0      	nop			; (mov r8, r8)
    3aa8:	000037f9 	.word	0x000037f9

00003aac <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3aac:	b590      	push	{r4, r7, lr}
    3aae:	b087      	sub	sp, #28
    3ab0:	af00      	add	r7, sp, #0
    3ab2:	6078      	str	r0, [r7, #4]
    3ab4:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3ab6:	687b      	ldr	r3, [r7, #4]
    3ab8:	681b      	ldr	r3, [r3, #0]
    3aba:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3abc:	2314      	movs	r3, #20
    3abe:	18fb      	adds	r3, r7, r3
    3ac0:	683a      	ldr	r2, [r7, #0]
    3ac2:	8852      	ldrh	r2, [r2, #2]
    3ac4:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    3ac6:	687b      	ldr	r3, [r7, #4]
    3ac8:	0018      	movs	r0, r3
    3aca:	4b51      	ldr	r3, [pc, #324]	; (3c10 <_i2c_master_write_packet+0x164>)
    3acc:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3ace:	683b      	ldr	r3, [r7, #0]
    3ad0:	7a5b      	ldrb	r3, [r3, #9]
    3ad2:	2b00      	cmp	r3, #0
    3ad4:	d006      	beq.n	3ae4 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3ad6:	683b      	ldr	r3, [r7, #0]
    3ad8:	7a9a      	ldrb	r2, [r3, #10]
    3ada:	687b      	ldr	r3, [r7, #4]
    3adc:	0011      	movs	r1, r2
    3ade:	0018      	movs	r0, r3
    3ae0:	4b4c      	ldr	r3, [pc, #304]	; (3c14 <_i2c_master_write_packet+0x168>)
    3ae2:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3ae4:	68fb      	ldr	r3, [r7, #12]
    3ae6:	685b      	ldr	r3, [r3, #4]
    3ae8:	4a4b      	ldr	r2, [pc, #300]	; (3c18 <_i2c_master_write_packet+0x16c>)
    3aea:	401a      	ands	r2, r3
    3aec:	68fb      	ldr	r3, [r7, #12]
    3aee:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3af0:	683b      	ldr	r3, [r7, #0]
    3af2:	7a1b      	ldrb	r3, [r3, #8]
    3af4:	2b00      	cmp	r3, #0
    3af6:	d00d      	beq.n	3b14 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3af8:	683b      	ldr	r3, [r7, #0]
    3afa:	881b      	ldrh	r3, [r3, #0]
    3afc:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3afe:	683b      	ldr	r3, [r7, #0]
    3b00:	7a5b      	ldrb	r3, [r3, #9]
    3b02:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3b04:	4313      	orrs	r3, r2
    3b06:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3b08:	2380      	movs	r3, #128	; 0x80
    3b0a:	021b      	lsls	r3, r3, #8
    3b0c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3b0e:	68fb      	ldr	r3, [r7, #12]
    3b10:	625a      	str	r2, [r3, #36]	; 0x24
    3b12:	e009      	b.n	3b28 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3b14:	683b      	ldr	r3, [r7, #0]
    3b16:	881b      	ldrh	r3, [r3, #0]
    3b18:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3b1a:	683b      	ldr	r3, [r7, #0]
    3b1c:	7a5b      	ldrb	r3, [r3, #9]
    3b1e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3b20:	4313      	orrs	r3, r2
    3b22:	001a      	movs	r2, r3
    3b24:	68fb      	ldr	r3, [r7, #12]
    3b26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3b28:	2317      	movs	r3, #23
    3b2a:	18fc      	adds	r4, r7, r3
    3b2c:	687b      	ldr	r3, [r7, #4]
    3b2e:	0018      	movs	r0, r3
    3b30:	4b3a      	ldr	r3, [pc, #232]	; (3c1c <_i2c_master_write_packet+0x170>)
    3b32:	4798      	blx	r3
    3b34:	0003      	movs	r3, r0
    3b36:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3b38:	2317      	movs	r3, #23
    3b3a:	18fb      	adds	r3, r7, r3
    3b3c:	781b      	ldrb	r3, [r3, #0]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d107      	bne.n	3b52 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    3b42:	2317      	movs	r3, #23
    3b44:	18fc      	adds	r4, r7, r3
    3b46:	687b      	ldr	r3, [r7, #4]
    3b48:	0018      	movs	r0, r3
    3b4a:	4b35      	ldr	r3, [pc, #212]	; (3c20 <_i2c_master_write_packet+0x174>)
    3b4c:	4798      	blx	r3
    3b4e:	0003      	movs	r3, r0
    3b50:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3b52:	2317      	movs	r3, #23
    3b54:	18fb      	adds	r3, r7, r3
    3b56:	781b      	ldrb	r3, [r3, #0]
    3b58:	2b00      	cmp	r3, #0
    3b5a:	d152      	bne.n	3c02 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    3b5c:	2312      	movs	r3, #18
    3b5e:	18fb      	adds	r3, r7, r3
    3b60:	2200      	movs	r2, #0
    3b62:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    3b64:	e033      	b.n	3bce <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3b66:	68fb      	ldr	r3, [r7, #12]
    3b68:	8b5b      	ldrh	r3, [r3, #26]
    3b6a:	b29b      	uxth	r3, r3
    3b6c:	001a      	movs	r2, r3
    3b6e:	2320      	movs	r3, #32
    3b70:	4013      	ands	r3, r2
    3b72:	d101      	bne.n	3b78 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    3b74:	2341      	movs	r3, #65	; 0x41
    3b76:	e047      	b.n	3c08 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    3b78:	687b      	ldr	r3, [r7, #4]
    3b7a:	0018      	movs	r0, r3
    3b7c:	4b24      	ldr	r3, [pc, #144]	; (3c10 <_i2c_master_write_packet+0x164>)
    3b7e:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    3b80:	683b      	ldr	r3, [r7, #0]
    3b82:	685a      	ldr	r2, [r3, #4]
    3b84:	2312      	movs	r3, #18
    3b86:	18fb      	adds	r3, r7, r3
    3b88:	881b      	ldrh	r3, [r3, #0]
    3b8a:	2112      	movs	r1, #18
    3b8c:	1879      	adds	r1, r7, r1
    3b8e:	1c58      	adds	r0, r3, #1
    3b90:	8008      	strh	r0, [r1, #0]
    3b92:	18d3      	adds	r3, r2, r3
    3b94:	7819      	ldrb	r1, [r3, #0]
    3b96:	68fb      	ldr	r3, [r7, #12]
    3b98:	2228      	movs	r2, #40	; 0x28
    3b9a:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    3b9c:	2317      	movs	r3, #23
    3b9e:	18fc      	adds	r4, r7, r3
    3ba0:	687b      	ldr	r3, [r7, #4]
    3ba2:	0018      	movs	r0, r3
    3ba4:	4b1d      	ldr	r3, [pc, #116]	; (3c1c <_i2c_master_write_packet+0x170>)
    3ba6:	4798      	blx	r3
    3ba8:	0003      	movs	r3, r0
    3baa:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3bac:	2317      	movs	r3, #23
    3bae:	18fb      	adds	r3, r7, r3
    3bb0:	781b      	ldrb	r3, [r3, #0]
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	d115      	bne.n	3be2 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3bb6:	68fb      	ldr	r3, [r7, #12]
    3bb8:	8b5b      	ldrh	r3, [r3, #26]
    3bba:	b29b      	uxth	r3, r3
    3bbc:	001a      	movs	r2, r3
    3bbe:	2304      	movs	r3, #4
    3bc0:	4013      	ands	r3, r2
    3bc2:	d004      	beq.n	3bce <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    3bc4:	2317      	movs	r3, #23
    3bc6:	18fb      	adds	r3, r7, r3
    3bc8:	221e      	movs	r2, #30
    3bca:	701a      	strb	r2, [r3, #0]
				break;
    3bcc:	e00a      	b.n	3be4 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    3bce:	2314      	movs	r3, #20
    3bd0:	18fb      	adds	r3, r7, r3
    3bd2:	881b      	ldrh	r3, [r3, #0]
    3bd4:	2214      	movs	r2, #20
    3bd6:	18ba      	adds	r2, r7, r2
    3bd8:	1e59      	subs	r1, r3, #1
    3bda:	8011      	strh	r1, [r2, #0]
    3bdc:	2b00      	cmp	r3, #0
    3bde:	d1c2      	bne.n	3b66 <_i2c_master_write_packet+0xba>
    3be0:	e000      	b.n	3be4 <_i2c_master_write_packet+0x138>
				break;
    3be2:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    3be4:	687b      	ldr	r3, [r7, #4]
    3be6:	7a9b      	ldrb	r3, [r3, #10]
    3be8:	2b00      	cmp	r3, #0
    3bea:	d00a      	beq.n	3c02 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	0018      	movs	r0, r3
    3bf0:	4b07      	ldr	r3, [pc, #28]	; (3c10 <_i2c_master_write_packet+0x164>)
    3bf2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3bf4:	68fb      	ldr	r3, [r7, #12]
    3bf6:	685b      	ldr	r3, [r3, #4]
    3bf8:	22c0      	movs	r2, #192	; 0xc0
    3bfa:	0292      	lsls	r2, r2, #10
    3bfc:	431a      	orrs	r2, r3
    3bfe:	68fb      	ldr	r3, [r7, #12]
    3c00:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    3c02:	2317      	movs	r3, #23
    3c04:	18fb      	adds	r3, r7, r3
    3c06:	781b      	ldrb	r3, [r3, #0]
}
    3c08:	0018      	movs	r0, r3
    3c0a:	46bd      	mov	sp, r7
    3c0c:	b007      	add	sp, #28
    3c0e:	bd90      	pop	{r4, r7, pc}
    3c10:	00003181 	.word	0x00003181
    3c14:	000037a5 	.word	0x000037a5
    3c18:	fffbffff 	.word	0xfffbffff
    3c1c:	00003747 	.word	0x00003747
    3c20:	000036e9 	.word	0x000036e9

00003c24 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3c24:	b580      	push	{r7, lr}
    3c26:	b082      	sub	sp, #8
    3c28:	af00      	add	r7, sp, #0
    3c2a:	6078      	str	r0, [r7, #4]
    3c2c:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3c2e:	687b      	ldr	r3, [r7, #4]
    3c30:	8b9b      	ldrh	r3, [r3, #28]
    3c32:	b29b      	uxth	r3, r3
    3c34:	2b00      	cmp	r3, #0
    3c36:	d001      	beq.n	3c3c <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    3c38:	2305      	movs	r3, #5
    3c3a:	e00c      	b.n	3c56 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    3c3c:	687b      	ldr	r3, [r7, #4]
    3c3e:	2201      	movs	r2, #1
    3c40:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3c42:	687b      	ldr	r3, [r7, #4]
    3c44:	2201      	movs	r2, #1
    3c46:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    3c48:	683a      	ldr	r2, [r7, #0]
    3c4a:	687b      	ldr	r3, [r7, #4]
    3c4c:	0011      	movs	r1, r2
    3c4e:	0018      	movs	r0, r3
    3c50:	4b03      	ldr	r3, [pc, #12]	; (3c60 <i2c_master_write_packet_wait+0x3c>)
    3c52:	4798      	blx	r3
    3c54:	0003      	movs	r3, r0
}
    3c56:	0018      	movs	r0, r3
    3c58:	46bd      	mov	sp, r7
    3c5a:	b002      	add	sp, #8
    3c5c:	bd80      	pop	{r7, pc}
    3c5e:	46c0      	nop			; (mov r8, r8)
    3c60:	00003aad 	.word	0x00003aad

00003c64 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3c64:	b580      	push	{r7, lr}
    3c66:	b082      	sub	sp, #8
    3c68:	af00      	add	r7, sp, #0
    3c6a:	6078      	str	r0, [r7, #4]
    3c6c:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3c6e:	687b      	ldr	r3, [r7, #4]
    3c70:	8b9b      	ldrh	r3, [r3, #28]
    3c72:	b29b      	uxth	r3, r3
    3c74:	2b00      	cmp	r3, #0
    3c76:	d001      	beq.n	3c7c <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
    3c78:	2305      	movs	r3, #5
    3c7a:	e00c      	b.n	3c96 <i2c_master_write_packet_wait_no_stop+0x32>
	}
#endif

	module->send_stop = false;
    3c7c:	687b      	ldr	r3, [r7, #4]
    3c7e:	2200      	movs	r2, #0
    3c80:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    3c82:	687b      	ldr	r3, [r7, #4]
    3c84:	2201      	movs	r2, #1
    3c86:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    3c88:	683a      	ldr	r2, [r7, #0]
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	0011      	movs	r1, r2
    3c8e:	0018      	movs	r0, r3
    3c90:	4b03      	ldr	r3, [pc, #12]	; (3ca0 <i2c_master_write_packet_wait_no_stop+0x3c>)
    3c92:	4798      	blx	r3
    3c94:	0003      	movs	r3, r0
}
    3c96:	0018      	movs	r0, r3
    3c98:	46bd      	mov	sp, r7
    3c9a:	b002      	add	sp, #8
    3c9c:	bd80      	pop	{r7, pc}
    3c9e:	46c0      	nop			; (mov r8, r8)
    3ca0:	00003aad 	.word	0x00003aad

00003ca4 <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
    3ca4:	b580      	push	{r7, lr}
    3ca6:	b084      	sub	sp, #16
    3ca8:	af00      	add	r7, sp, #0
    3caa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3cac:	687b      	ldr	r3, [r7, #4]
    3cae:	681b      	ldr	r3, [r3, #0]
    3cb0:	60fb      	str	r3, [r7, #12]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
    3cb2:	687b      	ldr	r3, [r7, #4]
    3cb4:	0018      	movs	r0, r3
    3cb6:	4b06      	ldr	r3, [pc, #24]	; (3cd0 <i2c_master_send_stop+0x2c>)
    3cb8:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3cba:	68fb      	ldr	r3, [r7, #12]
    3cbc:	685b      	ldr	r3, [r3, #4]
    3cbe:	22c0      	movs	r2, #192	; 0xc0
    3cc0:	0292      	lsls	r2, r2, #10
    3cc2:	431a      	orrs	r2, r3
    3cc4:	68fb      	ldr	r3, [r7, #12]
    3cc6:	605a      	str	r2, [r3, #4]
}
    3cc8:	46c0      	nop			; (mov r8, r8)
    3cca:	46bd      	mov	sp, r7
    3ccc:	b004      	add	sp, #16
    3cce:	bd80      	pop	{r7, pc}
    3cd0:	00003181 	.word	0x00003181

00003cd4 <i2c_master_is_syncing>:
{
    3cd4:	b580      	push	{r7, lr}
    3cd6:	b084      	sub	sp, #16
    3cd8:	af00      	add	r7, sp, #0
    3cda:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3cdc:	687b      	ldr	r3, [r7, #4]
    3cde:	681b      	ldr	r3, [r3, #0]
    3ce0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3ce2:	68fb      	ldr	r3, [r7, #12]
    3ce4:	69db      	ldr	r3, [r3, #28]
    3ce6:	2207      	movs	r2, #7
    3ce8:	4013      	ands	r3, r2
    3cea:	1e5a      	subs	r2, r3, #1
    3cec:	4193      	sbcs	r3, r2
    3cee:	b2db      	uxtb	r3, r3
}
    3cf0:	0018      	movs	r0, r3
    3cf2:	46bd      	mov	sp, r7
    3cf4:	b004      	add	sp, #16
    3cf6:	bd80      	pop	{r7, pc}

00003cf8 <_i2c_master_wait_for_sync>:
{
    3cf8:	b580      	push	{r7, lr}
    3cfa:	b082      	sub	sp, #8
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    3d00:	46c0      	nop			; (mov r8, r8)
    3d02:	687b      	ldr	r3, [r7, #4]
    3d04:	0018      	movs	r0, r3
    3d06:	4b04      	ldr	r3, [pc, #16]	; (3d18 <_i2c_master_wait_for_sync+0x20>)
    3d08:	4798      	blx	r3
    3d0a:	1e03      	subs	r3, r0, #0
    3d0c:	d1f9      	bne.n	3d02 <_i2c_master_wait_for_sync+0xa>
}
    3d0e:	46c0      	nop			; (mov r8, r8)
    3d10:	46bd      	mov	sp, r7
    3d12:	b002      	add	sp, #8
    3d14:	bd80      	pop	{r7, pc}
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	00003cd5 	.word	0x00003cd5

00003d1c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    3d1c:	b580      	push	{r7, lr}
    3d1e:	b084      	sub	sp, #16
    3d20:	af00      	add	r7, sp, #0
    3d22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3d24:	687b      	ldr	r3, [r7, #4]
    3d26:	681b      	ldr	r3, [r3, #0]
    3d28:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3d2a:	68fb      	ldr	r3, [r7, #12]
    3d2c:	681b      	ldr	r3, [r3, #0]
    3d2e:	011b      	lsls	r3, r3, #4
    3d30:	0fdb      	lsrs	r3, r3, #31
    3d32:	b2db      	uxtb	r3, r3
    3d34:	001a      	movs	r2, r3
    3d36:	230b      	movs	r3, #11
    3d38:	18fb      	adds	r3, r7, r3
    3d3a:	1e51      	subs	r1, r2, #1
    3d3c:	418a      	sbcs	r2, r1
    3d3e:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    3d40:	2308      	movs	r3, #8
    3d42:	18fb      	adds	r3, r7, r3
    3d44:	687a      	ldr	r2, [r7, #4]
    3d46:	8b52      	ldrh	r2, [r2, #26]
    3d48:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3d4a:	687b      	ldr	r3, [r7, #4]
    3d4c:	8b9b      	ldrh	r3, [r3, #28]
    3d4e:	b29a      	uxth	r2, r3
    3d50:	2308      	movs	r3, #8
    3d52:	18fb      	adds	r3, r7, r3
    3d54:	2108      	movs	r1, #8
    3d56:	1879      	adds	r1, r7, r1
    3d58:	8809      	ldrh	r1, [r1, #0]
    3d5a:	1a8a      	subs	r2, r1, r2
    3d5c:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3d5e:	687b      	ldr	r3, [r7, #4]
    3d60:	8b9b      	ldrh	r3, [r3, #28]
    3d62:	b29b      	uxth	r3, r3
    3d64:	3b01      	subs	r3, #1
    3d66:	b29a      	uxth	r2, r3
    3d68:	687b      	ldr	r3, [r7, #4]
    3d6a:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    3d6c:	230b      	movs	r3, #11
    3d6e:	18fb      	adds	r3, r7, r3
    3d70:	781b      	ldrb	r3, [r3, #0]
    3d72:	2b00      	cmp	r3, #0
    3d74:	d010      	beq.n	3d98 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    3d76:	687b      	ldr	r3, [r7, #4]
    3d78:	7adb      	ldrb	r3, [r3, #11]
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d01c      	beq.n	3db8 <_i2c_master_read+0x9c>
    3d7e:	687b      	ldr	r3, [r7, #4]
    3d80:	8b9b      	ldrh	r3, [r3, #28]
    3d82:	b29b      	uxth	r3, r3
    3d84:	2b01      	cmp	r3, #1
    3d86:	d117      	bne.n	3db8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3d88:	68fb      	ldr	r3, [r7, #12]
    3d8a:	685b      	ldr	r3, [r3, #4]
    3d8c:	2280      	movs	r2, #128	; 0x80
    3d8e:	02d2      	lsls	r2, r2, #11
    3d90:	431a      	orrs	r2, r3
    3d92:	68fb      	ldr	r3, [r7, #12]
    3d94:	605a      	str	r2, [r3, #4]
    3d96:	e00f      	b.n	3db8 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    3d98:	687b      	ldr	r3, [r7, #4]
    3d9a:	7adb      	ldrb	r3, [r3, #11]
    3d9c:	2b00      	cmp	r3, #0
    3d9e:	d00b      	beq.n	3db8 <_i2c_master_read+0x9c>
    3da0:	687b      	ldr	r3, [r7, #4]
    3da2:	8b9b      	ldrh	r3, [r3, #28]
    3da4:	b29b      	uxth	r3, r3
    3da6:	2b00      	cmp	r3, #0
    3da8:	d106      	bne.n	3db8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3daa:	68fb      	ldr	r3, [r7, #12]
    3dac:	685b      	ldr	r3, [r3, #4]
    3dae:	2280      	movs	r2, #128	; 0x80
    3db0:	02d2      	lsls	r2, r2, #11
    3db2:	431a      	orrs	r2, r3
    3db4:	68fb      	ldr	r3, [r7, #12]
    3db6:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    3db8:	687b      	ldr	r3, [r7, #4]
    3dba:	8b9b      	ldrh	r3, [r3, #28]
    3dbc:	b29b      	uxth	r3, r3
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d10e      	bne.n	3de0 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    3dc2:	687b      	ldr	r3, [r7, #4]
    3dc4:	7a9b      	ldrb	r3, [r3, #10]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d00a      	beq.n	3de0 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    3dca:	687b      	ldr	r3, [r7, #4]
    3dcc:	0018      	movs	r0, r3
    3dce:	4b0e      	ldr	r3, [pc, #56]	; (3e08 <_i2c_master_read+0xec>)
    3dd0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3dd2:	68fb      	ldr	r3, [r7, #12]
    3dd4:	685b      	ldr	r3, [r3, #4]
    3dd6:	22c0      	movs	r2, #192	; 0xc0
    3dd8:	0292      	lsls	r2, r2, #10
    3dda:	431a      	orrs	r2, r3
    3ddc:	68fb      	ldr	r3, [r7, #12]
    3dde:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    3de0:	687b      	ldr	r3, [r7, #4]
    3de2:	0018      	movs	r0, r3
    3de4:	4b08      	ldr	r3, [pc, #32]	; (3e08 <_i2c_master_read+0xec>)
    3de6:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    3de8:	687b      	ldr	r3, [r7, #4]
    3dea:	6a1a      	ldr	r2, [r3, #32]
    3dec:	2308      	movs	r3, #8
    3dee:	18fb      	adds	r3, r7, r3
    3df0:	881b      	ldrh	r3, [r3, #0]
    3df2:	18d3      	adds	r3, r2, r3
    3df4:	68fa      	ldr	r2, [r7, #12]
    3df6:	2128      	movs	r1, #40	; 0x28
    3df8:	5c52      	ldrb	r2, [r2, r1]
    3dfa:	b2d2      	uxtb	r2, r2
    3dfc:	701a      	strb	r2, [r3, #0]
}
    3dfe:	46c0      	nop			; (mov r8, r8)
    3e00:	46bd      	mov	sp, r7
    3e02:	b004      	add	sp, #16
    3e04:	bd80      	pop	{r7, pc}
    3e06:	46c0      	nop			; (mov r8, r8)
    3e08:	00003cf9 	.word	0x00003cf9

00003e0c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    3e0c:	b580      	push	{r7, lr}
    3e0e:	b084      	sub	sp, #16
    3e10:	af00      	add	r7, sp, #0
    3e12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3e14:	687b      	ldr	r3, [r7, #4]
    3e16:	681b      	ldr	r3, [r3, #0]
    3e18:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3e1a:	68fb      	ldr	r3, [r7, #12]
    3e1c:	8b5b      	ldrh	r3, [r3, #26]
    3e1e:	b29b      	uxth	r3, r3
    3e20:	001a      	movs	r2, r3
    3e22:	2304      	movs	r3, #4
    3e24:	4013      	ands	r3, r2
    3e26:	d004      	beq.n	3e32 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    3e28:	687b      	ldr	r3, [r7, #4]
    3e2a:	2225      	movs	r2, #37	; 0x25
    3e2c:	211e      	movs	r1, #30
    3e2e:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    3e30:	e024      	b.n	3e7c <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    3e32:	230a      	movs	r3, #10
    3e34:	18fb      	adds	r3, r7, r3
    3e36:	687a      	ldr	r2, [r7, #4]
    3e38:	8b52      	ldrh	r2, [r2, #26]
    3e3a:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    3e3c:	687b      	ldr	r3, [r7, #4]
    3e3e:	8b9b      	ldrh	r3, [r3, #28]
    3e40:	b29a      	uxth	r2, r3
    3e42:	230a      	movs	r3, #10
    3e44:	18fb      	adds	r3, r7, r3
    3e46:	210a      	movs	r1, #10
    3e48:	1879      	adds	r1, r7, r1
    3e4a:	8809      	ldrh	r1, [r1, #0]
    3e4c:	1a8a      	subs	r2, r1, r2
    3e4e:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    3e50:	687b      	ldr	r3, [r7, #4]
    3e52:	8b9b      	ldrh	r3, [r3, #28]
    3e54:	b29b      	uxth	r3, r3
    3e56:	3b01      	subs	r3, #1
    3e58:	b29a      	uxth	r2, r3
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    3e5e:	687b      	ldr	r3, [r7, #4]
    3e60:	0018      	movs	r0, r3
    3e62:	4b08      	ldr	r3, [pc, #32]	; (3e84 <_i2c_master_write+0x78>)
    3e64:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    3e66:	687b      	ldr	r3, [r7, #4]
    3e68:	6a1a      	ldr	r2, [r3, #32]
    3e6a:	230a      	movs	r3, #10
    3e6c:	18fb      	adds	r3, r7, r3
    3e6e:	881b      	ldrh	r3, [r3, #0]
    3e70:	18d3      	adds	r3, r2, r3
    3e72:	781b      	ldrb	r3, [r3, #0]
    3e74:	b2d9      	uxtb	r1, r3
    3e76:	68fb      	ldr	r3, [r7, #12]
    3e78:	2228      	movs	r2, #40	; 0x28
    3e7a:	5499      	strb	r1, [r3, r2]
}
    3e7c:	46bd      	mov	sp, r7
    3e7e:	b004      	add	sp, #16
    3e80:	bd80      	pop	{r7, pc}
    3e82:	46c0      	nop			; (mov r8, r8)
    3e84:	00003cf9 	.word	0x00003cf9

00003e88 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    3e88:	b580      	push	{r7, lr}
    3e8a:	b084      	sub	sp, #16
    3e8c:	af00      	add	r7, sp, #0
    3e8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3e90:	687b      	ldr	r3, [r7, #4]
    3e92:	681b      	ldr	r3, [r3, #0]
    3e94:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    3e96:	68fb      	ldr	r3, [r7, #12]
    3e98:	7e1b      	ldrb	r3, [r3, #24]
    3e9a:	b2db      	uxtb	r3, r3
    3e9c:	001a      	movs	r2, r3
    3e9e:	2301      	movs	r3, #1
    3ea0:	4013      	ands	r3, r2
    3ea2:	d02b      	beq.n	3efc <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3ea4:	68fb      	ldr	r3, [r7, #12]
    3ea6:	2201      	movs	r2, #1
    3ea8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3eaa:	68fb      	ldr	r3, [r7, #12]
    3eac:	8b5b      	ldrh	r3, [r3, #26]
    3eae:	b29b      	uxth	r3, r3
    3eb0:	001a      	movs	r2, r3
    3eb2:	2302      	movs	r3, #2
    3eb4:	4013      	ands	r3, r2
    3eb6:	d004      	beq.n	3ec2 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    3eb8:	687b      	ldr	r3, [r7, #4]
    3eba:	2225      	movs	r2, #37	; 0x25
    3ebc:	2141      	movs	r1, #65	; 0x41
    3ebe:	5499      	strb	r1, [r3, r2]
    3ec0:	e01c      	b.n	3efc <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3ec2:	68fb      	ldr	r3, [r7, #12]
    3ec4:	8b5b      	ldrh	r3, [r3, #26]
    3ec6:	b29b      	uxth	r3, r3
    3ec8:	001a      	movs	r2, r3
    3eca:	2304      	movs	r3, #4
    3ecc:	4013      	ands	r3, r2
    3ece:	d015      	beq.n	3efc <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    3ed0:	687b      	ldr	r3, [r7, #4]
    3ed2:	2225      	movs	r2, #37	; 0x25
    3ed4:	2118      	movs	r1, #24
    3ed6:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    3ed8:	687b      	ldr	r3, [r7, #4]
    3eda:	2200      	movs	r2, #0
    3edc:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    3ede:	687b      	ldr	r3, [r7, #4]
    3ee0:	7a9b      	ldrb	r3, [r3, #10]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d00a      	beq.n	3efc <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    3ee6:	687b      	ldr	r3, [r7, #4]
    3ee8:	0018      	movs	r0, r3
    3eea:	4b13      	ldr	r3, [pc, #76]	; (3f38 <_i2c_master_async_address_response+0xb0>)
    3eec:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3eee:	68fb      	ldr	r3, [r7, #12]
    3ef0:	685b      	ldr	r3, [r3, #4]
    3ef2:	22c0      	movs	r2, #192	; 0xc0
    3ef4:	0292      	lsls	r2, r2, #10
    3ef6:	431a      	orrs	r2, r3
    3ef8:	68fb      	ldr	r3, [r7, #12]
    3efa:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    3efc:	687b      	ldr	r3, [r7, #4]
    3efe:	8b9b      	ldrh	r3, [r3, #28]
    3f00:	b29a      	uxth	r2, r3
    3f02:	687b      	ldr	r3, [r7, #4]
    3f04:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	2225      	movs	r2, #37	; 0x25
    3f0a:	5c9b      	ldrb	r3, [r3, r2]
    3f0c:	b2db      	uxtb	r3, r3
    3f0e:	2b05      	cmp	r3, #5
    3f10:	d10e      	bne.n	3f30 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	2224      	movs	r2, #36	; 0x24
    3f16:	5c9b      	ldrb	r3, [r3, r2]
    3f18:	b2db      	uxtb	r3, r3
    3f1a:	2b00      	cmp	r3, #0
    3f1c:	d104      	bne.n	3f28 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    3f1e:	687b      	ldr	r3, [r7, #4]
    3f20:	0018      	movs	r0, r3
    3f22:	4b06      	ldr	r3, [pc, #24]	; (3f3c <_i2c_master_async_address_response+0xb4>)
    3f24:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    3f26:	e003      	b.n	3f30 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    3f28:	687b      	ldr	r3, [r7, #4]
    3f2a:	0018      	movs	r0, r3
    3f2c:	4b04      	ldr	r3, [pc, #16]	; (3f40 <_i2c_master_async_address_response+0xb8>)
    3f2e:	4798      	blx	r3
}
    3f30:	46c0      	nop			; (mov r8, r8)
    3f32:	46bd      	mov	sp, r7
    3f34:	b004      	add	sp, #16
    3f36:	bd80      	pop	{r7, pc}
    3f38:	00003cf9 	.word	0x00003cf9
    3f3c:	00003e0d 	.word	0x00003e0d
    3f40:	00003d1d 	.word	0x00003d1d

00003f44 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
    3f44:	b580      	push	{r7, lr}
    3f46:	b084      	sub	sp, #16
    3f48:	af00      	add	r7, sp, #0
    3f4a:	60f8      	str	r0, [r7, #12]
    3f4c:	60b9      	str	r1, [r7, #8]
    3f4e:	1dfb      	adds	r3, r7, #7
    3f50:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
    3f52:	1dfb      	adds	r3, r7, #7
    3f54:	781b      	ldrb	r3, [r3, #0]
    3f56:	68fa      	ldr	r2, [r7, #12]
    3f58:	3302      	adds	r3, #2
    3f5a:	009b      	lsls	r3, r3, #2
    3f5c:	18d3      	adds	r3, r2, r3
    3f5e:	3304      	adds	r3, #4
    3f60:	68ba      	ldr	r2, [r7, #8]
    3f62:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
    3f64:	68fb      	ldr	r3, [r7, #12]
    3f66:	7e1b      	ldrb	r3, [r3, #24]
    3f68:	b2db      	uxtb	r3, r3
    3f6a:	b25a      	sxtb	r2, r3
    3f6c:	1dfb      	adds	r3, r7, #7
    3f6e:	781b      	ldrb	r3, [r3, #0]
    3f70:	2101      	movs	r1, #1
    3f72:	4099      	lsls	r1, r3
    3f74:	000b      	movs	r3, r1
    3f76:	b25b      	sxtb	r3, r3
    3f78:	4313      	orrs	r3, r2
    3f7a:	b25b      	sxtb	r3, r3
    3f7c:	b2da      	uxtb	r2, r3
    3f7e:	68fb      	ldr	r3, [r7, #12]
    3f80:	761a      	strb	r2, [r3, #24]
}
    3f82:	46c0      	nop			; (mov r8, r8)
    3f84:	46bd      	mov	sp, r7
    3f86:	b004      	add	sp, #16
    3f88:	bd80      	pop	{r7, pc}
	...

00003f8c <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3f8c:	b590      	push	{r4, r7, lr}
    3f8e:	b087      	sub	sp, #28
    3f90:	af00      	add	r7, sp, #0
    3f92:	6078      	str	r0, [r7, #4]
    3f94:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3f96:	687b      	ldr	r3, [r7, #4]
    3f98:	681b      	ldr	r3, [r3, #0]
    3f9a:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
    3f9c:	683b      	ldr	r3, [r7, #0]
    3f9e:	685a      	ldr	r2, [r3, #4]
    3fa0:	687b      	ldr	r3, [r7, #4]
    3fa2:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    3fa4:	683b      	ldr	r3, [r7, #0]
    3fa6:	885a      	ldrh	r2, [r3, #2]
    3fa8:	687b      	ldr	r3, [r7, #4]
    3faa:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	2224      	movs	r2, #36	; 0x24
    3fb0:	2101      	movs	r1, #1
    3fb2:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	2225      	movs	r2, #37	; 0x25
    3fb8:	2105      	movs	r1, #5
    3fba:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3fbc:	693b      	ldr	r3, [r7, #16]
    3fbe:	681b      	ldr	r3, [r3, #0]
    3fc0:	011b      	lsls	r3, r3, #4
    3fc2:	0fdb      	lsrs	r3, r3, #31
    3fc4:	b2db      	uxtb	r3, r3
    3fc6:	001a      	movs	r2, r3
    3fc8:	230f      	movs	r3, #15
    3fca:	18fb      	adds	r3, r7, r3
    3fcc:	1e51      	subs	r1, r2, #1
    3fce:	418a      	sbcs	r2, r1
    3fd0:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3fd2:	683b      	ldr	r3, [r7, #0]
    3fd4:	7a5b      	ldrb	r3, [r3, #9]
    3fd6:	2b00      	cmp	r3, #0
    3fd8:	d006      	beq.n	3fe8 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3fda:	683b      	ldr	r3, [r7, #0]
    3fdc:	7a9a      	ldrb	r2, [r3, #10]
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	0011      	movs	r1, r2
    3fe2:	0018      	movs	r0, r3
    3fe4:	4b3b      	ldr	r3, [pc, #236]	; (40d4 <_i2c_master_read_packet+0x148>)
    3fe6:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    3fe8:	230f      	movs	r3, #15
    3fea:	18fb      	adds	r3, r7, r3
    3fec:	781b      	ldrb	r3, [r3, #0]
    3fee:	2b00      	cmp	r3, #0
    3ff0:	d00b      	beq.n	400a <_i2c_master_read_packet+0x7e>
    3ff2:	683b      	ldr	r3, [r7, #0]
    3ff4:	885b      	ldrh	r3, [r3, #2]
    3ff6:	2b01      	cmp	r3, #1
    3ff8:	d107      	bne.n	400a <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3ffa:	693b      	ldr	r3, [r7, #16]
    3ffc:	685b      	ldr	r3, [r3, #4]
    3ffe:	2280      	movs	r2, #128	; 0x80
    4000:	02d2      	lsls	r2, r2, #11
    4002:	431a      	orrs	r2, r3
    4004:	693b      	ldr	r3, [r7, #16]
    4006:	605a      	str	r2, [r3, #4]
    4008:	e005      	b.n	4016 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    400a:	693b      	ldr	r3, [r7, #16]
    400c:	685b      	ldr	r3, [r3, #4]
    400e:	4a32      	ldr	r2, [pc, #200]	; (40d8 <_i2c_master_read_packet+0x14c>)
    4010:	401a      	ands	r2, r3
    4012:	693b      	ldr	r3, [r7, #16]
    4014:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
    4016:	683b      	ldr	r3, [r7, #0]
    4018:	7a1b      	ldrb	r3, [r3, #8]
    401a:	2b00      	cmp	r3, #0
    401c:	d045      	beq.n	40aa <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    401e:	683b      	ldr	r3, [r7, #0]
    4020:	881b      	ldrh	r3, [r3, #0]
    4022:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    4024:	683b      	ldr	r3, [r7, #0]
    4026:	7a5b      	ldrb	r3, [r3, #9]
    4028:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    402a:	4313      	orrs	r3, r2
    402c:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    402e:	2380      	movs	r3, #128	; 0x80
    4030:	021b      	lsls	r3, r3, #8
    4032:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    4034:	693b      	ldr	r3, [r7, #16]
    4036:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    4038:	2317      	movs	r3, #23
    403a:	18fc      	adds	r4, r7, r3
    403c:	687b      	ldr	r3, [r7, #4]
    403e:	0018      	movs	r0, r3
    4040:	4b26      	ldr	r3, [pc, #152]	; (40dc <_i2c_master_read_packet+0x150>)
    4042:	4798      	blx	r3
    4044:	0003      	movs	r3, r0
    4046:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    4048:	693b      	ldr	r3, [r7, #16]
    404a:	685b      	ldr	r3, [r3, #4]
    404c:	4a22      	ldr	r2, [pc, #136]	; (40d8 <_i2c_master_read_packet+0x14c>)
    404e:	401a      	ands	r2, r3
    4050:	693b      	ldr	r3, [r7, #16]
    4052:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    4054:	2317      	movs	r3, #23
    4056:	18fb      	adds	r3, r7, r3
    4058:	781b      	ldrb	r3, [r3, #0]
    405a:	2b00      	cmp	r3, #0
    405c:	d107      	bne.n	406e <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
    405e:	2317      	movs	r3, #23
    4060:	18fc      	adds	r4, r7, r3
    4062:	687b      	ldr	r3, [r7, #4]
    4064:	0018      	movs	r0, r3
    4066:	4b1e      	ldr	r3, [pc, #120]	; (40e0 <_i2c_master_read_packet+0x154>)
    4068:	4798      	blx	r3
    406a:	0003      	movs	r3, r0
    406c:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    406e:	2317      	movs	r3, #23
    4070:	18fb      	adds	r3, r7, r3
    4072:	781b      	ldrb	r3, [r3, #0]
    4074:	2b00      	cmp	r3, #0
    4076:	d114      	bne.n	40a2 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
    4078:	693b      	ldr	r3, [r7, #16]
    407a:	2203      	movs	r2, #3
    407c:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    407e:	683b      	ldr	r3, [r7, #0]
    4080:	881b      	ldrh	r3, [r3, #0]
    4082:	0a1b      	lsrs	r3, r3, #8
    4084:	b29b      	uxth	r3, r3
    4086:	2278      	movs	r2, #120	; 0x78
    4088:	4313      	orrs	r3, r2
    408a:	b29b      	uxth	r3, r3
    408c:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    408e:	683b      	ldr	r3, [r7, #0]
    4090:	7a5b      	ldrb	r3, [r3, #9]
    4092:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    4094:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    4096:	2201      	movs	r2, #1
    4098:	4313      	orrs	r3, r2
    409a:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    409c:	693b      	ldr	r3, [r7, #16]
    409e:	625a      	str	r2, [r3, #36]	; 0x24
    40a0:	e012      	b.n	40c8 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    40a2:	2317      	movs	r3, #23
    40a4:	18fb      	adds	r3, r7, r3
    40a6:	781b      	ldrb	r3, [r3, #0]
    40a8:	e00f      	b.n	40ca <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
    40aa:	693b      	ldr	r3, [r7, #16]
    40ac:	2203      	movs	r2, #3
    40ae:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    40b0:	683b      	ldr	r3, [r7, #0]
    40b2:	881b      	ldrh	r3, [r3, #0]
    40b4:	005b      	lsls	r3, r3, #1
    40b6:	2201      	movs	r2, #1
    40b8:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    40ba:	683b      	ldr	r3, [r7, #0]
    40bc:	7a5b      	ldrb	r3, [r3, #9]
    40be:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    40c0:	4313      	orrs	r3, r2
    40c2:	001a      	movs	r2, r3
    40c4:	693b      	ldr	r3, [r7, #16]
    40c6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    40c8:	2300      	movs	r3, #0
}
    40ca:	0018      	movs	r0, r3
    40cc:	46bd      	mov	sp, r7
    40ce:	b007      	add	sp, #28
    40d0:	bd90      	pop	{r4, r7, pc}
    40d2:	46c0      	nop			; (mov r8, r8)
    40d4:	000037a5 	.word	0x000037a5
    40d8:	fffbffff 	.word	0xfffbffff
    40dc:	00003747 	.word	0x00003747
    40e0:	000036e9 	.word	0x000036e9

000040e4 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    40e4:	b580      	push	{r7, lr}
    40e6:	b082      	sub	sp, #8
    40e8:	af00      	add	r7, sp, #0
    40ea:	6078      	str	r0, [r7, #4]
    40ec:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    40ee:	687b      	ldr	r3, [r7, #4]
    40f0:	8b9b      	ldrh	r3, [r3, #28]
    40f2:	b29b      	uxth	r3, r3
    40f4:	2b00      	cmp	r3, #0
    40f6:	d001      	beq.n	40fc <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
    40f8:	2305      	movs	r3, #5
    40fa:	e00c      	b.n	4116 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	2201      	movs	r2, #1
    4100:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    4102:	687b      	ldr	r3, [r7, #4]
    4104:	2201      	movs	r2, #1
    4106:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
    4108:	683a      	ldr	r2, [r7, #0]
    410a:	687b      	ldr	r3, [r7, #4]
    410c:	0011      	movs	r1, r2
    410e:	0018      	movs	r0, r3
    4110:	4b03      	ldr	r3, [pc, #12]	; (4120 <i2c_master_read_packet_job+0x3c>)
    4112:	4798      	blx	r3
    4114:	0003      	movs	r3, r0
}
    4116:	0018      	movs	r0, r3
    4118:	46bd      	mov	sp, r7
    411a:	b002      	add	sp, #8
    411c:	bd80      	pop	{r7, pc}
    411e:	46c0      	nop			; (mov r8, r8)
    4120:	00003f8d 	.word	0x00003f8d

00004124 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    4124:	b580      	push	{r7, lr}
    4126:	b086      	sub	sp, #24
    4128:	af00      	add	r7, sp, #0
    412a:	0002      	movs	r2, r0
    412c:	1dfb      	adds	r3, r7, #7
    412e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    4130:	1dfb      	adds	r3, r7, #7
    4132:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    4134:	4b93      	ldr	r3, [pc, #588]	; (4384 <_i2c_master_interrupt_handler+0x260>)
    4136:	0092      	lsls	r2, r2, #2
    4138:	58d3      	ldr	r3, [r2, r3]
    413a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    413c:	697b      	ldr	r3, [r7, #20]
    413e:	681b      	ldr	r3, [r3, #0]
    4140:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    4142:	693b      	ldr	r3, [r7, #16]
    4144:	681b      	ldr	r3, [r3, #0]
    4146:	011b      	lsls	r3, r3, #4
    4148:	0fdb      	lsrs	r3, r3, #31
    414a:	b2db      	uxtb	r3, r3
    414c:	001a      	movs	r2, r3
    414e:	230f      	movs	r3, #15
    4150:	18fb      	adds	r3, r7, r3
    4152:	1e51      	subs	r1, r2, #1
    4154:	418a      	sbcs	r2, r1
    4156:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    4158:	230e      	movs	r3, #14
    415a:	18fb      	adds	r3, r7, r3
    415c:	697a      	ldr	r2, [r7, #20]
    415e:	7e52      	ldrb	r2, [r2, #25]
    4160:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    4162:	697b      	ldr	r3, [r7, #20]
    4164:	7e1b      	ldrb	r3, [r3, #24]
    4166:	b2da      	uxtb	r2, r3
    4168:	230e      	movs	r3, #14
    416a:	18fb      	adds	r3, r7, r3
    416c:	210e      	movs	r1, #14
    416e:	1879      	adds	r1, r7, r1
    4170:	7809      	ldrb	r1, [r1, #0]
    4172:	400a      	ands	r2, r1
    4174:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    4176:	697b      	ldr	r3, [r7, #20]
    4178:	8b5b      	ldrh	r3, [r3, #26]
    417a:	b29b      	uxth	r3, r3
    417c:	2b00      	cmp	r3, #0
    417e:	d109      	bne.n	4194 <_i2c_master_interrupt_handler+0x70>
    4180:	697b      	ldr	r3, [r7, #20]
    4182:	8b9b      	ldrh	r3, [r3, #28]
    4184:	b29b      	uxth	r3, r3
    4186:	2b00      	cmp	r3, #0
    4188:	d004      	beq.n	4194 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    418a:	697b      	ldr	r3, [r7, #20]
    418c:	0018      	movs	r0, r3
    418e:	4b7e      	ldr	r3, [pc, #504]	; (4388 <_i2c_master_interrupt_handler+0x264>)
    4190:	4798      	blx	r3
    4192:	e070      	b.n	4276 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4194:	697b      	ldr	r3, [r7, #20]
    4196:	8b5b      	ldrh	r3, [r3, #26]
    4198:	b29b      	uxth	r3, r3
    419a:	2b00      	cmp	r3, #0
    419c:	d039      	beq.n	4212 <_i2c_master_interrupt_handler+0xee>
    419e:	697b      	ldr	r3, [r7, #20]
    41a0:	8b9b      	ldrh	r3, [r3, #28]
    41a2:	b29b      	uxth	r3, r3
    41a4:	2b00      	cmp	r3, #0
    41a6:	d134      	bne.n	4212 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    41a8:	697b      	ldr	r3, [r7, #20]
    41aa:	2225      	movs	r2, #37	; 0x25
    41ac:	5c9b      	ldrb	r3, [r3, r2]
    41ae:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    41b0:	2b05      	cmp	r3, #5
    41b2:	d12e      	bne.n	4212 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    41b4:	697b      	ldr	r3, [r7, #20]
    41b6:	2224      	movs	r2, #36	; 0x24
    41b8:	5c9b      	ldrb	r3, [r3, r2]
    41ba:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    41bc:	2b00      	cmp	r3, #0
    41be:	d128      	bne.n	4212 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    41c0:	693b      	ldr	r3, [r7, #16]
    41c2:	2203      	movs	r2, #3
    41c4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    41c6:	697b      	ldr	r3, [r7, #20]
    41c8:	2200      	movs	r2, #0
    41ca:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    41cc:	697b      	ldr	r3, [r7, #20]
    41ce:	2225      	movs	r2, #37	; 0x25
    41d0:	2100      	movs	r1, #0
    41d2:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    41d4:	697b      	ldr	r3, [r7, #20]
    41d6:	7a9b      	ldrb	r3, [r3, #10]
    41d8:	2b00      	cmp	r3, #0
    41da:	d00b      	beq.n	41f4 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    41dc:	697b      	ldr	r3, [r7, #20]
    41de:	0018      	movs	r0, r3
    41e0:	4b6a      	ldr	r3, [pc, #424]	; (438c <_i2c_master_interrupt_handler+0x268>)
    41e2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    41e4:	693b      	ldr	r3, [r7, #16]
    41e6:	685b      	ldr	r3, [r3, #4]
    41e8:	22c0      	movs	r2, #192	; 0xc0
    41ea:	0292      	lsls	r2, r2, #10
    41ec:	431a      	orrs	r2, r3
    41ee:	693b      	ldr	r3, [r7, #16]
    41f0:	605a      	str	r2, [r3, #4]
    41f2:	e002      	b.n	41fa <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    41f4:	693b      	ldr	r3, [r7, #16]
    41f6:	2201      	movs	r2, #1
    41f8:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    41fa:	230e      	movs	r3, #14
    41fc:	18fb      	adds	r3, r7, r3
    41fe:	781b      	ldrb	r3, [r3, #0]
    4200:	2201      	movs	r2, #1
    4202:	4013      	ands	r3, r2
    4204:	d037      	beq.n	4276 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4206:	697b      	ldr	r3, [r7, #20]
    4208:	68db      	ldr	r3, [r3, #12]
    420a:	697a      	ldr	r2, [r7, #20]
    420c:	0010      	movs	r0, r2
    420e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    4210:	e031      	b.n	4276 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    4212:	697b      	ldr	r3, [r7, #20]
    4214:	8b5b      	ldrh	r3, [r3, #26]
    4216:	b29b      	uxth	r3, r3
    4218:	2b00      	cmp	r3, #0
    421a:	d02c      	beq.n	4276 <_i2c_master_interrupt_handler+0x152>
    421c:	697b      	ldr	r3, [r7, #20]
    421e:	8b9b      	ldrh	r3, [r3, #28]
    4220:	b29b      	uxth	r3, r3
    4222:	2b00      	cmp	r3, #0
    4224:	d027      	beq.n	4276 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    4226:	693b      	ldr	r3, [r7, #16]
    4228:	8b5b      	ldrh	r3, [r3, #26]
    422a:	b29b      	uxth	r3, r3
    422c:	001a      	movs	r2, r3
    422e:	2320      	movs	r3, #32
    4230:	4013      	ands	r3, r2
    4232:	d111      	bne.n	4258 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4234:	230f      	movs	r3, #15
    4236:	18fb      	adds	r3, r7, r3
    4238:	781b      	ldrb	r3, [r3, #0]
    423a:	2201      	movs	r2, #1
    423c:	4053      	eors	r3, r2
    423e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    4240:	2b00      	cmp	r3, #0
    4242:	d104      	bne.n	424e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4244:	697b      	ldr	r3, [r7, #20]
    4246:	8b9b      	ldrh	r3, [r3, #28]
    4248:	b29b      	uxth	r3, r3
    424a:	2b01      	cmp	r3, #1
    424c:	d004      	beq.n	4258 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    424e:	697b      	ldr	r3, [r7, #20]
    4250:	2225      	movs	r2, #37	; 0x25
    4252:	2141      	movs	r1, #65	; 0x41
    4254:	5499      	strb	r1, [r3, r2]
    4256:	e00e      	b.n	4276 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4258:	697b      	ldr	r3, [r7, #20]
    425a:	2224      	movs	r2, #36	; 0x24
    425c:	5c9b      	ldrb	r3, [r3, r2]
    425e:	b2db      	uxtb	r3, r3
    4260:	2b00      	cmp	r3, #0
    4262:	d104      	bne.n	426e <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    4264:	697b      	ldr	r3, [r7, #20]
    4266:	0018      	movs	r0, r3
    4268:	4b49      	ldr	r3, [pc, #292]	; (4390 <_i2c_master_interrupt_handler+0x26c>)
    426a:	4798      	blx	r3
    426c:	e003      	b.n	4276 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    426e:	697b      	ldr	r3, [r7, #20]
    4270:	0018      	movs	r0, r3
    4272:	4b48      	ldr	r3, [pc, #288]	; (4394 <_i2c_master_interrupt_handler+0x270>)
    4274:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4276:	697b      	ldr	r3, [r7, #20]
    4278:	8b5b      	ldrh	r3, [r3, #26]
    427a:	b29b      	uxth	r3, r3
    427c:	2b00      	cmp	r3, #0
    427e:	d047      	beq.n	4310 <_i2c_master_interrupt_handler+0x1ec>
    4280:	697b      	ldr	r3, [r7, #20]
    4282:	8b9b      	ldrh	r3, [r3, #28]
    4284:	b29b      	uxth	r3, r3
    4286:	2b00      	cmp	r3, #0
    4288:	d142      	bne.n	4310 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    428a:	697b      	ldr	r3, [r7, #20]
    428c:	2225      	movs	r2, #37	; 0x25
    428e:	5c9b      	ldrb	r3, [r3, r2]
    4290:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4292:	2b05      	cmp	r3, #5
    4294:	d13c      	bne.n	4310 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    4296:	697b      	ldr	r3, [r7, #20]
    4298:	2224      	movs	r2, #36	; 0x24
    429a:	5c9b      	ldrb	r3, [r3, r2]
    429c:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    429e:	2b01      	cmp	r3, #1
    42a0:	d136      	bne.n	4310 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    42a2:	693b      	ldr	r3, [r7, #16]
    42a4:	7e1b      	ldrb	r3, [r3, #24]
    42a6:	b2db      	uxtb	r3, r3
    42a8:	001a      	movs	r2, r3
    42aa:	2302      	movs	r3, #2
    42ac:	4013      	ands	r3, r2
    42ae:	d002      	beq.n	42b6 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    42b0:	693b      	ldr	r3, [r7, #16]
    42b2:	2202      	movs	r2, #2
    42b4:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    42b6:	693b      	ldr	r3, [r7, #16]
    42b8:	2203      	movs	r2, #3
    42ba:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    42bc:	697b      	ldr	r3, [r7, #20]
    42be:	2200      	movs	r2, #0
    42c0:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    42c2:	697b      	ldr	r3, [r7, #20]
    42c4:	2225      	movs	r2, #37	; 0x25
    42c6:	2100      	movs	r1, #0
    42c8:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    42ca:	230e      	movs	r3, #14
    42cc:	18fb      	adds	r3, r7, r3
    42ce:	781b      	ldrb	r3, [r3, #0]
    42d0:	2202      	movs	r2, #2
    42d2:	4013      	ands	r3, r2
    42d4:	d00b      	beq.n	42ee <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    42d6:	697b      	ldr	r3, [r7, #20]
    42d8:	2224      	movs	r2, #36	; 0x24
    42da:	5c9b      	ldrb	r3, [r3, r2]
    42dc:	b2db      	uxtb	r3, r3
    42de:	2b01      	cmp	r3, #1
    42e0:	d105      	bne.n	42ee <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    42e2:	697b      	ldr	r3, [r7, #20]
    42e4:	691b      	ldr	r3, [r3, #16]
    42e6:	697a      	ldr	r2, [r7, #20]
    42e8:	0010      	movs	r0, r2
    42ea:	4798      	blx	r3
    42ec:	e010      	b.n	4310 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    42ee:	230e      	movs	r3, #14
    42f0:	18fb      	adds	r3, r7, r3
    42f2:	781b      	ldrb	r3, [r3, #0]
    42f4:	2201      	movs	r2, #1
    42f6:	4013      	ands	r3, r2
    42f8:	d00a      	beq.n	4310 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    42fa:	697b      	ldr	r3, [r7, #20]
    42fc:	2224      	movs	r2, #36	; 0x24
    42fe:	5c9b      	ldrb	r3, [r3, r2]
    4300:	b2db      	uxtb	r3, r3
    4302:	2b00      	cmp	r3, #0
    4304:	d104      	bne.n	4310 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4306:	697b      	ldr	r3, [r7, #20]
    4308:	68db      	ldr	r3, [r3, #12]
    430a:	697a      	ldr	r2, [r7, #20]
    430c:	0010      	movs	r0, r2
    430e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    4310:	697b      	ldr	r3, [r7, #20]
    4312:	2225      	movs	r2, #37	; 0x25
    4314:	5c9b      	ldrb	r3, [r3, r2]
    4316:	b2db      	uxtb	r3, r3
    4318:	2b05      	cmp	r3, #5
    431a:	d02e      	beq.n	437a <_i2c_master_interrupt_handler+0x256>
    431c:	697b      	ldr	r3, [r7, #20]
    431e:	2225      	movs	r2, #37	; 0x25
    4320:	5c9b      	ldrb	r3, [r3, r2]
    4322:	b2db      	uxtb	r3, r3
    4324:	2b00      	cmp	r3, #0
    4326:	d028      	beq.n	437a <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    4328:	693b      	ldr	r3, [r7, #16]
    432a:	2203      	movs	r2, #3
    432c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    432e:	697b      	ldr	r3, [r7, #20]
    4330:	2200      	movs	r2, #0
    4332:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    4334:	697b      	ldr	r3, [r7, #20]
    4336:	2200      	movs	r2, #0
    4338:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    433a:	697b      	ldr	r3, [r7, #20]
    433c:	2225      	movs	r2, #37	; 0x25
    433e:	5c9b      	ldrb	r3, [r3, r2]
    4340:	b2db      	uxtb	r3, r3
    4342:	2b41      	cmp	r3, #65	; 0x41
    4344:	d00e      	beq.n	4364 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    4346:	697b      	ldr	r3, [r7, #20]
    4348:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    434a:	2b00      	cmp	r3, #0
    434c:	d00a      	beq.n	4364 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    434e:	697b      	ldr	r3, [r7, #20]
    4350:	0018      	movs	r0, r3
    4352:	4b0e      	ldr	r3, [pc, #56]	; (438c <_i2c_master_interrupt_handler+0x268>)
    4354:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    4356:	693b      	ldr	r3, [r7, #16]
    4358:	685b      	ldr	r3, [r3, #4]
    435a:	22e0      	movs	r2, #224	; 0xe0
    435c:	02d2      	lsls	r2, r2, #11
    435e:	431a      	orrs	r2, r3
    4360:	693b      	ldr	r3, [r7, #16]
    4362:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    4364:	230e      	movs	r3, #14
    4366:	18fb      	adds	r3, r7, r3
    4368:	781b      	ldrb	r3, [r3, #0]
    436a:	2204      	movs	r2, #4
    436c:	4013      	ands	r3, r2
    436e:	d004      	beq.n	437a <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    4370:	697b      	ldr	r3, [r7, #20]
    4372:	695b      	ldr	r3, [r3, #20]
    4374:	697a      	ldr	r2, [r7, #20]
    4376:	0010      	movs	r0, r2
    4378:	4798      	blx	r3
		}
	}
}
    437a:	46c0      	nop			; (mov r8, r8)
    437c:	46bd      	mov	sp, r7
    437e:	b006      	add	sp, #24
    4380:	bd80      	pop	{r7, pc}
    4382:	46c0      	nop			; (mov r8, r8)
    4384:	200003bc 	.word	0x200003bc
    4388:	00003e89 	.word	0x00003e89
    438c:	00003cf9 	.word	0x00003cf9
    4390:	00003e0d 	.word	0x00003e0d
    4394:	00003d1d 	.word	0x00003d1d

00004398 <system_gclk_chan_get_config_defaults>:
{
    4398:	b580      	push	{r7, lr}
    439a:	b082      	sub	sp, #8
    439c:	af00      	add	r7, sp, #0
    439e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    43a0:	687b      	ldr	r3, [r7, #4]
    43a2:	2200      	movs	r2, #0
    43a4:	701a      	strb	r2, [r3, #0]
}
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	46bd      	mov	sp, r7
    43aa:	b002      	add	sp, #8
    43ac:	bd80      	pop	{r7, pc}

000043ae <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    43ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    43b0:	b08d      	sub	sp, #52	; 0x34
    43b2:	af00      	add	r7, sp, #0
    43b4:	60b8      	str	r0, [r7, #8]
    43b6:	60f9      	str	r1, [r7, #12]
    43b8:	603a      	str	r2, [r7, #0]
    43ba:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    43bc:	2300      	movs	r3, #0
    43be:	2400      	movs	r4, #0
    43c0:	623b      	str	r3, [r7, #32]
    43c2:	627c      	str	r4, [r7, #36]	; 0x24
    43c4:	2300      	movs	r3, #0
    43c6:	2400      	movs	r4, #0
    43c8:	61bb      	str	r3, [r7, #24]
    43ca:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    43cc:	233f      	movs	r3, #63	; 0x3f
    43ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    43d0:	e053      	b.n	447a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    43d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    43d4:	3b20      	subs	r3, #32
    43d6:	2b00      	cmp	r3, #0
    43d8:	db04      	blt.n	43e4 <long_division+0x36>
    43da:	2201      	movs	r2, #1
    43dc:	409a      	lsls	r2, r3
    43de:	0013      	movs	r3, r2
    43e0:	617b      	str	r3, [r7, #20]
    43e2:	e00b      	b.n	43fc <long_division+0x4e>
    43e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    43e6:	2220      	movs	r2, #32
    43e8:	1ad3      	subs	r3, r2, r3
    43ea:	2201      	movs	r2, #1
    43ec:	40da      	lsrs	r2, r3
    43ee:	0013      	movs	r3, r2
    43f0:	2100      	movs	r1, #0
    43f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    43f4:	4091      	lsls	r1, r2
    43f6:	000a      	movs	r2, r1
    43f8:	4313      	orrs	r3, r2
    43fa:	617b      	str	r3, [r7, #20]
    43fc:	2201      	movs	r2, #1
    43fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4400:	409a      	lsls	r2, r3
    4402:	0013      	movs	r3, r2
    4404:	613b      	str	r3, [r7, #16]

		r = r << 1;
    4406:	69bb      	ldr	r3, [r7, #24]
    4408:	69fc      	ldr	r4, [r7, #28]
    440a:	18db      	adds	r3, r3, r3
    440c:	4164      	adcs	r4, r4
    440e:	61bb      	str	r3, [r7, #24]
    4410:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    4412:	68bb      	ldr	r3, [r7, #8]
    4414:	693a      	ldr	r2, [r7, #16]
    4416:	401a      	ands	r2, r3
    4418:	0015      	movs	r5, r2
    441a:	68fb      	ldr	r3, [r7, #12]
    441c:	697a      	ldr	r2, [r7, #20]
    441e:	401a      	ands	r2, r3
    4420:	0016      	movs	r6, r2
    4422:	002b      	movs	r3, r5
    4424:	4333      	orrs	r3, r6
    4426:	d007      	beq.n	4438 <long_division+0x8a>
			r |= 0x01;
    4428:	69bb      	ldr	r3, [r7, #24]
    442a:	2201      	movs	r2, #1
    442c:	4313      	orrs	r3, r2
    442e:	61bb      	str	r3, [r7, #24]
    4430:	69fb      	ldr	r3, [r7, #28]
    4432:	2200      	movs	r2, #0
    4434:	4313      	orrs	r3, r2
    4436:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    4438:	687a      	ldr	r2, [r7, #4]
    443a:	69fb      	ldr	r3, [r7, #28]
    443c:	429a      	cmp	r2, r3
    443e:	d819      	bhi.n	4474 <long_division+0xc6>
    4440:	687a      	ldr	r2, [r7, #4]
    4442:	69fb      	ldr	r3, [r7, #28]
    4444:	429a      	cmp	r2, r3
    4446:	d103      	bne.n	4450 <long_division+0xa2>
    4448:	683a      	ldr	r2, [r7, #0]
    444a:	69bb      	ldr	r3, [r7, #24]
    444c:	429a      	cmp	r2, r3
    444e:	d811      	bhi.n	4474 <long_division+0xc6>
			r = r - d;
    4450:	69b9      	ldr	r1, [r7, #24]
    4452:	69fa      	ldr	r2, [r7, #28]
    4454:	683b      	ldr	r3, [r7, #0]
    4456:	687c      	ldr	r4, [r7, #4]
    4458:	1ac9      	subs	r1, r1, r3
    445a:	41a2      	sbcs	r2, r4
    445c:	000b      	movs	r3, r1
    445e:	0014      	movs	r4, r2
    4460:	61bb      	str	r3, [r7, #24]
    4462:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    4464:	6a3a      	ldr	r2, [r7, #32]
    4466:	693b      	ldr	r3, [r7, #16]
    4468:	4313      	orrs	r3, r2
    446a:	623b      	str	r3, [r7, #32]
    446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    446e:	697b      	ldr	r3, [r7, #20]
    4470:	4313      	orrs	r3, r2
    4472:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    4474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4476:	3b01      	subs	r3, #1
    4478:	62fb      	str	r3, [r7, #44]	; 0x2c
    447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    447c:	2b00      	cmp	r3, #0
    447e:	daa8      	bge.n	43d2 <long_division+0x24>
		}
	}

	return q;
    4480:	6a3b      	ldr	r3, [r7, #32]
    4482:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    4484:	0018      	movs	r0, r3
    4486:	0021      	movs	r1, r4
    4488:	46bd      	mov	sp, r7
    448a:	b00d      	add	sp, #52	; 0x34
    448c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000448e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    448e:	b580      	push	{r7, lr}
    4490:	b086      	sub	sp, #24
    4492:	af00      	add	r7, sp, #0
    4494:	60f8      	str	r0, [r7, #12]
    4496:	60b9      	str	r1, [r7, #8]
    4498:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    449a:	2316      	movs	r3, #22
    449c:	18fb      	adds	r3, r7, r3
    449e:	2200      	movs	r2, #0
    44a0:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    44a2:	68bb      	ldr	r3, [r7, #8]
    44a4:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    44a6:	68bb      	ldr	r3, [r7, #8]
    44a8:	085a      	lsrs	r2, r3, #1
    44aa:	68fb      	ldr	r3, [r7, #12]
    44ac:	429a      	cmp	r2, r3
    44ae:	d201      	bcs.n	44b4 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    44b0:	2340      	movs	r3, #64	; 0x40
    44b2:	e026      	b.n	4502 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    44b4:	68bb      	ldr	r3, [r7, #8]
    44b6:	085b      	lsrs	r3, r3, #1
    44b8:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    44ba:	e00a      	b.n	44d2 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    44bc:	693a      	ldr	r2, [r7, #16]
    44be:	68fb      	ldr	r3, [r7, #12]
    44c0:	1ad3      	subs	r3, r2, r3
    44c2:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    44c4:	2316      	movs	r3, #22
    44c6:	18fb      	adds	r3, r7, r3
    44c8:	881a      	ldrh	r2, [r3, #0]
    44ca:	2316      	movs	r3, #22
    44cc:	18fb      	adds	r3, r7, r3
    44ce:	3201      	adds	r2, #1
    44d0:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    44d2:	693a      	ldr	r2, [r7, #16]
    44d4:	68fb      	ldr	r3, [r7, #12]
    44d6:	429a      	cmp	r2, r3
    44d8:	d2f0      	bcs.n	44bc <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    44da:	2316      	movs	r3, #22
    44dc:	18fb      	adds	r3, r7, r3
    44de:	2216      	movs	r2, #22
    44e0:	18ba      	adds	r2, r7, r2
    44e2:	8812      	ldrh	r2, [r2, #0]
    44e4:	3a01      	subs	r2, #1
    44e6:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    44e8:	2316      	movs	r3, #22
    44ea:	18fb      	adds	r3, r7, r3
    44ec:	881b      	ldrh	r3, [r3, #0]
    44ee:	2bff      	cmp	r3, #255	; 0xff
    44f0:	d901      	bls.n	44f6 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    44f2:	2340      	movs	r3, #64	; 0x40
    44f4:	e005      	b.n	4502 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    44f6:	687b      	ldr	r3, [r7, #4]
    44f8:	2216      	movs	r2, #22
    44fa:	18ba      	adds	r2, r7, r2
    44fc:	8812      	ldrh	r2, [r2, #0]
    44fe:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    4500:	2300      	movs	r3, #0
	}
}
    4502:	0018      	movs	r0, r3
    4504:	46bd      	mov	sp, r7
    4506:	b006      	add	sp, #24
    4508:	bd80      	pop	{r7, pc}
	...

0000450c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    450c:	b5f0      	push	{r4, r5, r6, r7, lr}
    450e:	b0a1      	sub	sp, #132	; 0x84
    4510:	af00      	add	r7, sp, #0
    4512:	64f8      	str	r0, [r7, #76]	; 0x4c
    4514:	64b9      	str	r1, [r7, #72]	; 0x48
    4516:	647a      	str	r2, [r7, #68]	; 0x44
    4518:	2243      	movs	r2, #67	; 0x43
    451a:	18ba      	adds	r2, r7, r2
    451c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    451e:	2300      	movs	r3, #0
    4520:	2400      	movs	r4, #0
    4522:	673b      	str	r3, [r7, #112]	; 0x70
    4524:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    4526:	2300      	movs	r3, #0
    4528:	2400      	movs	r4, #0
    452a:	66bb      	str	r3, [r7, #104]	; 0x68
    452c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    452e:	2300      	movs	r3, #0
    4530:	2400      	movs	r4, #0
    4532:	67bb      	str	r3, [r7, #120]	; 0x78
    4534:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    4536:	2300      	movs	r3, #0
    4538:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    453a:	2358      	movs	r3, #88	; 0x58
    453c:	2240      	movs	r2, #64	; 0x40
    453e:	4694      	mov	ip, r2
    4540:	44bc      	add	ip, r7
    4542:	4463      	add	r3, ip
    4544:	781a      	ldrb	r2, [r3, #0]
    4546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4548:	435a      	muls	r2, r3
    454a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    454c:	429a      	cmp	r2, r3
    454e:	d901      	bls.n	4554 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4550:	2340      	movs	r3, #64	; 0x40
    4552:	e0b3      	b.n	46bc <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4554:	2343      	movs	r3, #67	; 0x43
    4556:	18fb      	adds	r3, r7, r3
    4558:	781b      	ldrb	r3, [r3, #0]
    455a:	2b00      	cmp	r3, #0
    455c:	d13d      	bne.n	45da <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    455e:	2358      	movs	r3, #88	; 0x58
    4560:	2240      	movs	r2, #64	; 0x40
    4562:	4694      	mov	ip, r2
    4564:	44bc      	add	ip, r7
    4566:	4463      	add	r3, ip
    4568:	781b      	ldrb	r3, [r3, #0]
    456a:	b2db      	uxtb	r3, r3
    456c:	613b      	str	r3, [r7, #16]
    456e:	2300      	movs	r3, #0
    4570:	617b      	str	r3, [r7, #20]
    4572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4574:	60bb      	str	r3, [r7, #8]
    4576:	2300      	movs	r3, #0
    4578:	60fb      	str	r3, [r7, #12]
    457a:	4c52      	ldr	r4, [pc, #328]	; (46c4 <_sercom_get_async_baud_val+0x1b8>)
    457c:	68ba      	ldr	r2, [r7, #8]
    457e:	68fb      	ldr	r3, [r7, #12]
    4580:	6938      	ldr	r0, [r7, #16]
    4582:	6979      	ldr	r1, [r7, #20]
    4584:	47a0      	blx	r4
    4586:	0003      	movs	r3, r0
    4588:	000c      	movs	r4, r1
    458a:	001b      	movs	r3, r3
    458c:	65fb      	str	r3, [r7, #92]	; 0x5c
    458e:	2300      	movs	r3, #0
    4590:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    4592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4594:	603b      	str	r3, [r7, #0]
    4596:	2300      	movs	r3, #0
    4598:	607b      	str	r3, [r7, #4]
    459a:	6db8      	ldr	r0, [r7, #88]	; 0x58
    459c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    459e:	683a      	ldr	r2, [r7, #0]
    45a0:	687b      	ldr	r3, [r7, #4]
    45a2:	4c49      	ldr	r4, [pc, #292]	; (46c8 <_sercom_get_async_baud_val+0x1bc>)
    45a4:	47a0      	blx	r4
    45a6:	0003      	movs	r3, r0
    45a8:	000c      	movs	r4, r1
    45aa:	673b      	str	r3, [r7, #112]	; 0x70
    45ac:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    45ae:	2100      	movs	r1, #0
    45b0:	2201      	movs	r2, #1
    45b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    45b4:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    45b6:	1ac9      	subs	r1, r1, r3
    45b8:	41a2      	sbcs	r2, r4
    45ba:	000b      	movs	r3, r1
    45bc:	0014      	movs	r4, r2
    45be:	66bb      	str	r3, [r7, #104]	; 0x68
    45c0:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    45c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    45c4:	0c1b      	lsrs	r3, r3, #16
    45c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    45c8:	0416      	lsls	r6, r2, #16
    45ca:	431e      	orrs	r6, r3
    45cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    45ce:	041d      	lsls	r5, r3, #16
    45d0:	0033      	movs	r3, r6
    45d2:	67bb      	str	r3, [r7, #120]	; 0x78
    45d4:	2300      	movs	r3, #0
    45d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    45d8:	e06a      	b.n	46b0 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    45da:	2343      	movs	r3, #67	; 0x43
    45dc:	18fb      	adds	r3, r7, r3
    45de:	781b      	ldrb	r3, [r3, #0]
    45e0:	2b01      	cmp	r3, #1
    45e2:	d165      	bne.n	46b0 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    45e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    45e6:	633b      	str	r3, [r7, #48]	; 0x30
    45e8:	2300      	movs	r3, #0
    45ea:	637b      	str	r3, [r7, #52]	; 0x34
    45ec:	2358      	movs	r3, #88	; 0x58
    45ee:	2240      	movs	r2, #64	; 0x40
    45f0:	4694      	mov	ip, r2
    45f2:	44bc      	add	ip, r7
    45f4:	4463      	add	r3, ip
    45f6:	781b      	ldrb	r3, [r3, #0]
    45f8:	b2db      	uxtb	r3, r3
    45fa:	62bb      	str	r3, [r7, #40]	; 0x28
    45fc:	2300      	movs	r3, #0
    45fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    4600:	4c30      	ldr	r4, [pc, #192]	; (46c4 <_sercom_get_async_baud_val+0x1b8>)
    4602:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4606:	6b38      	ldr	r0, [r7, #48]	; 0x30
    4608:	6b79      	ldr	r1, [r7, #52]	; 0x34
    460a:	47a0      	blx	r4
    460c:	0003      	movs	r3, r0
    460e:	000c      	movs	r4, r1
    4610:	65bb      	str	r3, [r7, #88]	; 0x58
    4612:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    4614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4616:	623b      	str	r3, [r7, #32]
    4618:	2300      	movs	r3, #0
    461a:	627b      	str	r3, [r7, #36]	; 0x24
    461c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    461e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    4620:	001a      	movs	r2, r3
    4622:	0023      	movs	r3, r4
    4624:	6a38      	ldr	r0, [r7, #32]
    4626:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4628:	4c27      	ldr	r4, [pc, #156]	; (46c8 <_sercom_get_async_baud_val+0x1bc>)
    462a:	47a0      	blx	r4
    462c:	0003      	movs	r3, r0
    462e:	000c      	movs	r4, r1
    4630:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    4632:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    4634:	2380      	movs	r3, #128	; 0x80
    4636:	019b      	lsls	r3, r3, #6
    4638:	429a      	cmp	r2, r3
    463a:	d901      	bls.n	4640 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    463c:	2340      	movs	r3, #64	; 0x40
    463e:	e03d      	b.n	46bc <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4642:	61bb      	str	r3, [r7, #24]
    4644:	2300      	movs	r3, #0
    4646:	61fb      	str	r3, [r7, #28]
    4648:	69b9      	ldr	r1, [r7, #24]
    464a:	69fa      	ldr	r2, [r7, #28]
    464c:	000b      	movs	r3, r1
    464e:	0f5b      	lsrs	r3, r3, #29
    4650:	0010      	movs	r0, r2
    4652:	00c0      	lsls	r0, r0, #3
    4654:	63f8      	str	r0, [r7, #60]	; 0x3c
    4656:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    4658:	4318      	orrs	r0, r3
    465a:	63f8      	str	r0, [r7, #60]	; 0x3c
    465c:	000b      	movs	r3, r1
    465e:	00db      	lsls	r3, r3, #3
    4660:	63bb      	str	r3, [r7, #56]	; 0x38
    4662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4664:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    4666:	001a      	movs	r2, r3
    4668:	0023      	movs	r3, r4
    466a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    466c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    466e:	4c16      	ldr	r4, [pc, #88]	; (46c8 <_sercom_get_async_baud_val+0x1bc>)
    4670:	47a0      	blx	r4
    4672:	0003      	movs	r3, r0
    4674:	000c      	movs	r4, r1
    4676:	65bb      	str	r3, [r7, #88]	; 0x58
    4678:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    467a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    467c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    467e:	b2d9      	uxtb	r1, r3
    4680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4682:	b2db      	uxtb	r3, r3
    4684:	00db      	lsls	r3, r3, #3
    4686:	b2da      	uxtb	r2, r3
    4688:	2317      	movs	r3, #23
    468a:	2040      	movs	r0, #64	; 0x40
    468c:	4684      	mov	ip, r0
    468e:	44bc      	add	ip, r7
    4690:	4463      	add	r3, ip
    4692:	1a8a      	subs	r2, r1, r2
    4694:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    4696:	2317      	movs	r3, #23
    4698:	2240      	movs	r2, #64	; 0x40
    469a:	4694      	mov	ip, r2
    469c:	44bc      	add	ip, r7
    469e:	4463      	add	r3, ip
    46a0:	781b      	ldrb	r3, [r3, #0]
    46a2:	035b      	lsls	r3, r3, #13
    46a4:	001a      	movs	r2, r3
    46a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    46a8:	4313      	orrs	r3, r2
    46aa:	67bb      	str	r3, [r7, #120]	; 0x78
    46ac:	2300      	movs	r3, #0
    46ae:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    46b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    46b2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    46b4:	b29a      	uxth	r2, r3
    46b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    46b8:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    46ba:	2300      	movs	r3, #0
}
    46bc:	0018      	movs	r0, r3
    46be:	46bd      	mov	sp, r7
    46c0:	b021      	add	sp, #132	; 0x84
    46c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46c4:	0000be1d 	.word	0x0000be1d
    46c8:	000043af 	.word	0x000043af

000046cc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    46cc:	b580      	push	{r7, lr}
    46ce:	b084      	sub	sp, #16
    46d0:	af00      	add	r7, sp, #0
    46d2:	0002      	movs	r2, r0
    46d4:	1dfb      	adds	r3, r7, #7
    46d6:	701a      	strb	r2, [r3, #0]
    46d8:	1dbb      	adds	r3, r7, #6
    46da:	1c0a      	adds	r2, r1, #0
    46dc:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    46de:	4b1a      	ldr	r3, [pc, #104]	; (4748 <sercom_set_gclk_generator+0x7c>)
    46e0:	781b      	ldrb	r3, [r3, #0]
    46e2:	2201      	movs	r2, #1
    46e4:	4053      	eors	r3, r2
    46e6:	b2db      	uxtb	r3, r3
    46e8:	2b00      	cmp	r3, #0
    46ea:	d103      	bne.n	46f4 <sercom_set_gclk_generator+0x28>
    46ec:	1dbb      	adds	r3, r7, #6
    46ee:	781b      	ldrb	r3, [r3, #0]
    46f0:	2b00      	cmp	r3, #0
    46f2:	d01b      	beq.n	472c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    46f4:	230c      	movs	r3, #12
    46f6:	18fb      	adds	r3, r7, r3
    46f8:	0018      	movs	r0, r3
    46fa:	4b14      	ldr	r3, [pc, #80]	; (474c <sercom_set_gclk_generator+0x80>)
    46fc:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    46fe:	230c      	movs	r3, #12
    4700:	18fb      	adds	r3, r7, r3
    4702:	1dfa      	adds	r2, r7, #7
    4704:	7812      	ldrb	r2, [r2, #0]
    4706:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4708:	230c      	movs	r3, #12
    470a:	18fb      	adds	r3, r7, r3
    470c:	0019      	movs	r1, r3
    470e:	2013      	movs	r0, #19
    4710:	4b0f      	ldr	r3, [pc, #60]	; (4750 <sercom_set_gclk_generator+0x84>)
    4712:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4714:	2013      	movs	r0, #19
    4716:	4b0f      	ldr	r3, [pc, #60]	; (4754 <sercom_set_gclk_generator+0x88>)
    4718:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    471a:	4b0b      	ldr	r3, [pc, #44]	; (4748 <sercom_set_gclk_generator+0x7c>)
    471c:	1dfa      	adds	r2, r7, #7
    471e:	7812      	ldrb	r2, [r2, #0]
    4720:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    4722:	4b09      	ldr	r3, [pc, #36]	; (4748 <sercom_set_gclk_generator+0x7c>)
    4724:	2201      	movs	r2, #1
    4726:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    4728:	2300      	movs	r3, #0
    472a:	e008      	b.n	473e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    472c:	4b06      	ldr	r3, [pc, #24]	; (4748 <sercom_set_gclk_generator+0x7c>)
    472e:	785b      	ldrb	r3, [r3, #1]
    4730:	1dfa      	adds	r2, r7, #7
    4732:	7812      	ldrb	r2, [r2, #0]
    4734:	429a      	cmp	r2, r3
    4736:	d101      	bne.n	473c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    4738:	2300      	movs	r3, #0
    473a:	e000      	b.n	473e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    473c:	231d      	movs	r3, #29
}
    473e:	0018      	movs	r0, r3
    4740:	46bd      	mov	sp, r7
    4742:	b004      	add	sp, #16
    4744:	bd80      	pop	{r7, pc}
    4746:	46c0      	nop			; (mov r8, r8)
    4748:	20000278 	.word	0x20000278
    474c:	00004399 	.word	0x00004399
    4750:	00006775 	.word	0x00006775
    4754:	000067b9 	.word	0x000067b9

00004758 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    4758:	b580      	push	{r7, lr}
    475a:	b082      	sub	sp, #8
    475c:	af00      	add	r7, sp, #0
    475e:	6078      	str	r0, [r7, #4]
    4760:	000a      	movs	r2, r1
    4762:	1cfb      	adds	r3, r7, #3
    4764:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    4766:	687b      	ldr	r3, [r7, #4]
    4768:	4a4d      	ldr	r2, [pc, #308]	; (48a0 <_sercom_get_default_pad+0x148>)
    476a:	4293      	cmp	r3, r2
    476c:	d03f      	beq.n	47ee <_sercom_get_default_pad+0x96>
    476e:	4a4c      	ldr	r2, [pc, #304]	; (48a0 <_sercom_get_default_pad+0x148>)
    4770:	4293      	cmp	r3, r2
    4772:	d806      	bhi.n	4782 <_sercom_get_default_pad+0x2a>
    4774:	4a4b      	ldr	r2, [pc, #300]	; (48a4 <_sercom_get_default_pad+0x14c>)
    4776:	4293      	cmp	r3, r2
    4778:	d00f      	beq.n	479a <_sercom_get_default_pad+0x42>
    477a:	4a4b      	ldr	r2, [pc, #300]	; (48a8 <_sercom_get_default_pad+0x150>)
    477c:	4293      	cmp	r3, r2
    477e:	d021      	beq.n	47c4 <_sercom_get_default_pad+0x6c>
    4780:	e089      	b.n	4896 <_sercom_get_default_pad+0x13e>
    4782:	4a4a      	ldr	r2, [pc, #296]	; (48ac <_sercom_get_default_pad+0x154>)
    4784:	4293      	cmp	r3, r2
    4786:	d100      	bne.n	478a <_sercom_get_default_pad+0x32>
    4788:	e05b      	b.n	4842 <_sercom_get_default_pad+0xea>
    478a:	4a49      	ldr	r2, [pc, #292]	; (48b0 <_sercom_get_default_pad+0x158>)
    478c:	4293      	cmp	r3, r2
    478e:	d100      	bne.n	4792 <_sercom_get_default_pad+0x3a>
    4790:	e06c      	b.n	486c <_sercom_get_default_pad+0x114>
    4792:	4a48      	ldr	r2, [pc, #288]	; (48b4 <_sercom_get_default_pad+0x15c>)
    4794:	4293      	cmp	r3, r2
    4796:	d03f      	beq.n	4818 <_sercom_get_default_pad+0xc0>
    4798:	e07d      	b.n	4896 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    479a:	1cfb      	adds	r3, r7, #3
    479c:	781b      	ldrb	r3, [r3, #0]
    479e:	2b01      	cmp	r3, #1
    47a0:	d00a      	beq.n	47b8 <_sercom_get_default_pad+0x60>
    47a2:	dc02      	bgt.n	47aa <_sercom_get_default_pad+0x52>
    47a4:	2b00      	cmp	r3, #0
    47a6:	d005      	beq.n	47b4 <_sercom_get_default_pad+0x5c>
    47a8:	e075      	b.n	4896 <_sercom_get_default_pad+0x13e>
    47aa:	2b02      	cmp	r3, #2
    47ac:	d006      	beq.n	47bc <_sercom_get_default_pad+0x64>
    47ae:	2b03      	cmp	r3, #3
    47b0:	d006      	beq.n	47c0 <_sercom_get_default_pad+0x68>
    47b2:	e070      	b.n	4896 <_sercom_get_default_pad+0x13e>
    47b4:	4b40      	ldr	r3, [pc, #256]	; (48b8 <_sercom_get_default_pad+0x160>)
    47b6:	e06f      	b.n	4898 <_sercom_get_default_pad+0x140>
    47b8:	4b40      	ldr	r3, [pc, #256]	; (48bc <_sercom_get_default_pad+0x164>)
    47ba:	e06d      	b.n	4898 <_sercom_get_default_pad+0x140>
    47bc:	4b40      	ldr	r3, [pc, #256]	; (48c0 <_sercom_get_default_pad+0x168>)
    47be:	e06b      	b.n	4898 <_sercom_get_default_pad+0x140>
    47c0:	4b40      	ldr	r3, [pc, #256]	; (48c4 <_sercom_get_default_pad+0x16c>)
    47c2:	e069      	b.n	4898 <_sercom_get_default_pad+0x140>
    47c4:	1cfb      	adds	r3, r7, #3
    47c6:	781b      	ldrb	r3, [r3, #0]
    47c8:	2b01      	cmp	r3, #1
    47ca:	d00a      	beq.n	47e2 <_sercom_get_default_pad+0x8a>
    47cc:	dc02      	bgt.n	47d4 <_sercom_get_default_pad+0x7c>
    47ce:	2b00      	cmp	r3, #0
    47d0:	d005      	beq.n	47de <_sercom_get_default_pad+0x86>
    47d2:	e060      	b.n	4896 <_sercom_get_default_pad+0x13e>
    47d4:	2b02      	cmp	r3, #2
    47d6:	d006      	beq.n	47e6 <_sercom_get_default_pad+0x8e>
    47d8:	2b03      	cmp	r3, #3
    47da:	d006      	beq.n	47ea <_sercom_get_default_pad+0x92>
    47dc:	e05b      	b.n	4896 <_sercom_get_default_pad+0x13e>
    47de:	2303      	movs	r3, #3
    47e0:	e05a      	b.n	4898 <_sercom_get_default_pad+0x140>
    47e2:	4b39      	ldr	r3, [pc, #228]	; (48c8 <_sercom_get_default_pad+0x170>)
    47e4:	e058      	b.n	4898 <_sercom_get_default_pad+0x140>
    47e6:	4b39      	ldr	r3, [pc, #228]	; (48cc <_sercom_get_default_pad+0x174>)
    47e8:	e056      	b.n	4898 <_sercom_get_default_pad+0x140>
    47ea:	4b39      	ldr	r3, [pc, #228]	; (48d0 <_sercom_get_default_pad+0x178>)
    47ec:	e054      	b.n	4898 <_sercom_get_default_pad+0x140>
    47ee:	1cfb      	adds	r3, r7, #3
    47f0:	781b      	ldrb	r3, [r3, #0]
    47f2:	2b01      	cmp	r3, #1
    47f4:	d00a      	beq.n	480c <_sercom_get_default_pad+0xb4>
    47f6:	dc02      	bgt.n	47fe <_sercom_get_default_pad+0xa6>
    47f8:	2b00      	cmp	r3, #0
    47fa:	d005      	beq.n	4808 <_sercom_get_default_pad+0xb0>
    47fc:	e04b      	b.n	4896 <_sercom_get_default_pad+0x13e>
    47fe:	2b02      	cmp	r3, #2
    4800:	d006      	beq.n	4810 <_sercom_get_default_pad+0xb8>
    4802:	2b03      	cmp	r3, #3
    4804:	d006      	beq.n	4814 <_sercom_get_default_pad+0xbc>
    4806:	e046      	b.n	4896 <_sercom_get_default_pad+0x13e>
    4808:	4b32      	ldr	r3, [pc, #200]	; (48d4 <_sercom_get_default_pad+0x17c>)
    480a:	e045      	b.n	4898 <_sercom_get_default_pad+0x140>
    480c:	4b32      	ldr	r3, [pc, #200]	; (48d8 <_sercom_get_default_pad+0x180>)
    480e:	e043      	b.n	4898 <_sercom_get_default_pad+0x140>
    4810:	4b32      	ldr	r3, [pc, #200]	; (48dc <_sercom_get_default_pad+0x184>)
    4812:	e041      	b.n	4898 <_sercom_get_default_pad+0x140>
    4814:	4b32      	ldr	r3, [pc, #200]	; (48e0 <_sercom_get_default_pad+0x188>)
    4816:	e03f      	b.n	4898 <_sercom_get_default_pad+0x140>
    4818:	1cfb      	adds	r3, r7, #3
    481a:	781b      	ldrb	r3, [r3, #0]
    481c:	2b01      	cmp	r3, #1
    481e:	d00a      	beq.n	4836 <_sercom_get_default_pad+0xde>
    4820:	dc02      	bgt.n	4828 <_sercom_get_default_pad+0xd0>
    4822:	2b00      	cmp	r3, #0
    4824:	d005      	beq.n	4832 <_sercom_get_default_pad+0xda>
    4826:	e036      	b.n	4896 <_sercom_get_default_pad+0x13e>
    4828:	2b02      	cmp	r3, #2
    482a:	d006      	beq.n	483a <_sercom_get_default_pad+0xe2>
    482c:	2b03      	cmp	r3, #3
    482e:	d006      	beq.n	483e <_sercom_get_default_pad+0xe6>
    4830:	e031      	b.n	4896 <_sercom_get_default_pad+0x13e>
    4832:	4b2c      	ldr	r3, [pc, #176]	; (48e4 <_sercom_get_default_pad+0x18c>)
    4834:	e030      	b.n	4898 <_sercom_get_default_pad+0x140>
    4836:	4b2c      	ldr	r3, [pc, #176]	; (48e8 <_sercom_get_default_pad+0x190>)
    4838:	e02e      	b.n	4898 <_sercom_get_default_pad+0x140>
    483a:	4b2c      	ldr	r3, [pc, #176]	; (48ec <_sercom_get_default_pad+0x194>)
    483c:	e02c      	b.n	4898 <_sercom_get_default_pad+0x140>
    483e:	4b2c      	ldr	r3, [pc, #176]	; (48f0 <_sercom_get_default_pad+0x198>)
    4840:	e02a      	b.n	4898 <_sercom_get_default_pad+0x140>
    4842:	1cfb      	adds	r3, r7, #3
    4844:	781b      	ldrb	r3, [r3, #0]
    4846:	2b01      	cmp	r3, #1
    4848:	d00a      	beq.n	4860 <_sercom_get_default_pad+0x108>
    484a:	dc02      	bgt.n	4852 <_sercom_get_default_pad+0xfa>
    484c:	2b00      	cmp	r3, #0
    484e:	d005      	beq.n	485c <_sercom_get_default_pad+0x104>
    4850:	e021      	b.n	4896 <_sercom_get_default_pad+0x13e>
    4852:	2b02      	cmp	r3, #2
    4854:	d006      	beq.n	4864 <_sercom_get_default_pad+0x10c>
    4856:	2b03      	cmp	r3, #3
    4858:	d006      	beq.n	4868 <_sercom_get_default_pad+0x110>
    485a:	e01c      	b.n	4896 <_sercom_get_default_pad+0x13e>
    485c:	4b25      	ldr	r3, [pc, #148]	; (48f4 <_sercom_get_default_pad+0x19c>)
    485e:	e01b      	b.n	4898 <_sercom_get_default_pad+0x140>
    4860:	4b25      	ldr	r3, [pc, #148]	; (48f8 <_sercom_get_default_pad+0x1a0>)
    4862:	e019      	b.n	4898 <_sercom_get_default_pad+0x140>
    4864:	4b25      	ldr	r3, [pc, #148]	; (48fc <_sercom_get_default_pad+0x1a4>)
    4866:	e017      	b.n	4898 <_sercom_get_default_pad+0x140>
    4868:	4b25      	ldr	r3, [pc, #148]	; (4900 <_sercom_get_default_pad+0x1a8>)
    486a:	e015      	b.n	4898 <_sercom_get_default_pad+0x140>
    486c:	1cfb      	adds	r3, r7, #3
    486e:	781b      	ldrb	r3, [r3, #0]
    4870:	2b01      	cmp	r3, #1
    4872:	d00a      	beq.n	488a <_sercom_get_default_pad+0x132>
    4874:	dc02      	bgt.n	487c <_sercom_get_default_pad+0x124>
    4876:	2b00      	cmp	r3, #0
    4878:	d005      	beq.n	4886 <_sercom_get_default_pad+0x12e>
    487a:	e00c      	b.n	4896 <_sercom_get_default_pad+0x13e>
    487c:	2b02      	cmp	r3, #2
    487e:	d006      	beq.n	488e <_sercom_get_default_pad+0x136>
    4880:	2b03      	cmp	r3, #3
    4882:	d006      	beq.n	4892 <_sercom_get_default_pad+0x13a>
    4884:	e007      	b.n	4896 <_sercom_get_default_pad+0x13e>
    4886:	4b1f      	ldr	r3, [pc, #124]	; (4904 <_sercom_get_default_pad+0x1ac>)
    4888:	e006      	b.n	4898 <_sercom_get_default_pad+0x140>
    488a:	4b1f      	ldr	r3, [pc, #124]	; (4908 <_sercom_get_default_pad+0x1b0>)
    488c:	e004      	b.n	4898 <_sercom_get_default_pad+0x140>
    488e:	4b1f      	ldr	r3, [pc, #124]	; (490c <_sercom_get_default_pad+0x1b4>)
    4890:	e002      	b.n	4898 <_sercom_get_default_pad+0x140>
    4892:	4b1f      	ldr	r3, [pc, #124]	; (4910 <_sercom_get_default_pad+0x1b8>)
    4894:	e000      	b.n	4898 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    4896:	2300      	movs	r3, #0
}
    4898:	0018      	movs	r0, r3
    489a:	46bd      	mov	sp, r7
    489c:	b002      	add	sp, #8
    489e:	bd80      	pop	{r7, pc}
    48a0:	42001000 	.word	0x42001000
    48a4:	42000800 	.word	0x42000800
    48a8:	42000c00 	.word	0x42000c00
    48ac:	42001800 	.word	0x42001800
    48b0:	42001c00 	.word	0x42001c00
    48b4:	42001400 	.word	0x42001400
    48b8:	00040003 	.word	0x00040003
    48bc:	00050003 	.word	0x00050003
    48c0:	00060003 	.word	0x00060003
    48c4:	00070003 	.word	0x00070003
    48c8:	00010003 	.word	0x00010003
    48cc:	001e0003 	.word	0x001e0003
    48d0:	001f0003 	.word	0x001f0003
    48d4:	00080003 	.word	0x00080003
    48d8:	00090003 	.word	0x00090003
    48dc:	000a0003 	.word	0x000a0003
    48e0:	000b0003 	.word	0x000b0003
    48e4:	00100003 	.word	0x00100003
    48e8:	00110003 	.word	0x00110003
    48ec:	00120003 	.word	0x00120003
    48f0:	00130003 	.word	0x00130003
    48f4:	000c0003 	.word	0x000c0003
    48f8:	000d0003 	.word	0x000d0003
    48fc:	000e0003 	.word	0x000e0003
    4900:	000f0003 	.word	0x000f0003
    4904:	00160003 	.word	0x00160003
    4908:	00170003 	.word	0x00170003
    490c:	00180003 	.word	0x00180003
    4910:	00190003 	.word	0x00190003

00004914 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4914:	b590      	push	{r4, r7, lr}
    4916:	b08b      	sub	sp, #44	; 0x2c
    4918:	af00      	add	r7, sp, #0
    491a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    491c:	230c      	movs	r3, #12
    491e:	18fb      	adds	r3, r7, r3
    4920:	4a0f      	ldr	r2, [pc, #60]	; (4960 <_sercom_get_sercom_inst_index+0x4c>)
    4922:	ca13      	ldmia	r2!, {r0, r1, r4}
    4924:	c313      	stmia	r3!, {r0, r1, r4}
    4926:	ca13      	ldmia	r2!, {r0, r1, r4}
    4928:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    492a:	2300      	movs	r3, #0
    492c:	627b      	str	r3, [r7, #36]	; 0x24
    492e:	e00e      	b.n	494e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4930:	230c      	movs	r3, #12
    4932:	18fb      	adds	r3, r7, r3
    4934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4936:	0092      	lsls	r2, r2, #2
    4938:	58d3      	ldr	r3, [r2, r3]
    493a:	001a      	movs	r2, r3
    493c:	687b      	ldr	r3, [r7, #4]
    493e:	429a      	cmp	r2, r3
    4940:	d102      	bne.n	4948 <_sercom_get_sercom_inst_index+0x34>
			return i;
    4942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4944:	b2db      	uxtb	r3, r3
    4946:	e006      	b.n	4956 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    494a:	3301      	adds	r3, #1
    494c:	627b      	str	r3, [r7, #36]	; 0x24
    494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4950:	2b05      	cmp	r3, #5
    4952:	d9ed      	bls.n	4930 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4954:	2300      	movs	r3, #0
}
    4956:	0018      	movs	r0, r3
    4958:	46bd      	mov	sp, r7
    495a:	b00b      	add	sp, #44	; 0x2c
    495c:	bd90      	pop	{r4, r7, pc}
    495e:	46c0      	nop			; (mov r8, r8)
    4960:	0000e3b0 	.word	0x0000e3b0

00004964 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    4964:	b580      	push	{r7, lr}
    4966:	b086      	sub	sp, #24
    4968:	af00      	add	r7, sp, #0
    496a:	60f8      	str	r0, [r7, #12]
    496c:	60b9      	str	r1, [r7, #8]
    496e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    4970:	2300      	movs	r3, #0
    4972:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    4974:	68fb      	ldr	r3, [r7, #12]
    4976:	2b00      	cmp	r3, #0
    4978:	d012      	beq.n	49a0 <_read+0x3c>
		return -1;
    497a:	2301      	movs	r3, #1
    497c:	425b      	negs	r3, r3
    497e:	e013      	b.n	49a8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    4980:	4b0b      	ldr	r3, [pc, #44]	; (49b0 <_read+0x4c>)
    4982:	681a      	ldr	r2, [r3, #0]
    4984:	4b0b      	ldr	r3, [pc, #44]	; (49b4 <_read+0x50>)
    4986:	681b      	ldr	r3, [r3, #0]
    4988:	68b9      	ldr	r1, [r7, #8]
    498a:	0018      	movs	r0, r3
    498c:	4790      	blx	r2
		ptr++;
    498e:	68bb      	ldr	r3, [r7, #8]
    4990:	3301      	adds	r3, #1
    4992:	60bb      	str	r3, [r7, #8]
		nChars++;
    4994:	697b      	ldr	r3, [r7, #20]
    4996:	3301      	adds	r3, #1
    4998:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    499a:	687b      	ldr	r3, [r7, #4]
    499c:	3b01      	subs	r3, #1
    499e:	607b      	str	r3, [r7, #4]
    49a0:	687b      	ldr	r3, [r7, #4]
    49a2:	2b00      	cmp	r3, #0
    49a4:	dcec      	bgt.n	4980 <_read+0x1c>
	}
	return nChars;
    49a6:	697b      	ldr	r3, [r7, #20]
}
    49a8:	0018      	movs	r0, r3
    49aa:	46bd      	mov	sp, r7
    49ac:	b006      	add	sp, #24
    49ae:	bd80      	pop	{r7, pc}
    49b0:	200003b0 	.word	0x200003b0
    49b4:	200003b8 	.word	0x200003b8

000049b8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    49b8:	b580      	push	{r7, lr}
    49ba:	b086      	sub	sp, #24
    49bc:	af00      	add	r7, sp, #0
    49be:	60f8      	str	r0, [r7, #12]
    49c0:	60b9      	str	r1, [r7, #8]
    49c2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    49c4:	2300      	movs	r3, #0
    49c6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    49c8:	68fb      	ldr	r3, [r7, #12]
    49ca:	2b01      	cmp	r3, #1
    49cc:	d01d      	beq.n	4a0a <_write+0x52>
    49ce:	68fb      	ldr	r3, [r7, #12]
    49d0:	2b02      	cmp	r3, #2
    49d2:	d01a      	beq.n	4a0a <_write+0x52>
    49d4:	68fb      	ldr	r3, [r7, #12]
    49d6:	2b03      	cmp	r3, #3
    49d8:	d017      	beq.n	4a0a <_write+0x52>
		return -1;
    49da:	2301      	movs	r3, #1
    49dc:	425b      	negs	r3, r3
    49de:	e018      	b.n	4a12 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    49e0:	4b0e      	ldr	r3, [pc, #56]	; (4a1c <_write+0x64>)
    49e2:	681a      	ldr	r2, [r3, #0]
    49e4:	4b0e      	ldr	r3, [pc, #56]	; (4a20 <_write+0x68>)
    49e6:	6818      	ldr	r0, [r3, #0]
    49e8:	68bb      	ldr	r3, [r7, #8]
    49ea:	1c59      	adds	r1, r3, #1
    49ec:	60b9      	str	r1, [r7, #8]
    49ee:	781b      	ldrb	r3, [r3, #0]
    49f0:	0019      	movs	r1, r3
    49f2:	4790      	blx	r2
    49f4:	1e03      	subs	r3, r0, #0
    49f6:	da02      	bge.n	49fe <_write+0x46>
			return -1;
    49f8:	2301      	movs	r3, #1
    49fa:	425b      	negs	r3, r3
    49fc:	e009      	b.n	4a12 <_write+0x5a>
		}
		++nChars;
    49fe:	697b      	ldr	r3, [r7, #20]
    4a00:	3301      	adds	r3, #1
    4a02:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    4a04:	687b      	ldr	r3, [r7, #4]
    4a06:	3b01      	subs	r3, #1
    4a08:	607b      	str	r3, [r7, #4]
    4a0a:	687b      	ldr	r3, [r7, #4]
    4a0c:	2b00      	cmp	r3, #0
    4a0e:	d1e7      	bne.n	49e0 <_write+0x28>
	}
	return nChars;
    4a10:	697b      	ldr	r3, [r7, #20]
}
    4a12:	0018      	movs	r0, r3
    4a14:	46bd      	mov	sp, r7
    4a16:	b006      	add	sp, #24
    4a18:	bd80      	pop	{r7, pc}
    4a1a:	46c0      	nop			; (mov r8, r8)
    4a1c:	200003b4 	.word	0x200003b4
    4a20:	200003b8 	.word	0x200003b8

00004a24 <system_gclk_chan_get_config_defaults>:
{
    4a24:	b580      	push	{r7, lr}
    4a26:	b082      	sub	sp, #8
    4a28:	af00      	add	r7, sp, #0
    4a2a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	2200      	movs	r2, #0
    4a30:	701a      	strb	r2, [r3, #0]
}
    4a32:	46c0      	nop			; (mov r8, r8)
    4a34:	46bd      	mov	sp, r7
    4a36:	b002      	add	sp, #8
    4a38:	bd80      	pop	{r7, pc}
	...

00004a3c <system_apb_clock_set_mask>:
{
    4a3c:	b580      	push	{r7, lr}
    4a3e:	b082      	sub	sp, #8
    4a40:	af00      	add	r7, sp, #0
    4a42:	0002      	movs	r2, r0
    4a44:	6039      	str	r1, [r7, #0]
    4a46:	1dfb      	adds	r3, r7, #7
    4a48:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4a4a:	1dfb      	adds	r3, r7, #7
    4a4c:	781b      	ldrb	r3, [r3, #0]
    4a4e:	2b01      	cmp	r3, #1
    4a50:	d00a      	beq.n	4a68 <system_apb_clock_set_mask+0x2c>
    4a52:	2b02      	cmp	r3, #2
    4a54:	d00f      	beq.n	4a76 <system_apb_clock_set_mask+0x3a>
    4a56:	2b00      	cmp	r3, #0
    4a58:	d114      	bne.n	4a84 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4a5a:	4b0e      	ldr	r3, [pc, #56]	; (4a94 <system_apb_clock_set_mask+0x58>)
    4a5c:	4a0d      	ldr	r2, [pc, #52]	; (4a94 <system_apb_clock_set_mask+0x58>)
    4a5e:	6991      	ldr	r1, [r2, #24]
    4a60:	683a      	ldr	r2, [r7, #0]
    4a62:	430a      	orrs	r2, r1
    4a64:	619a      	str	r2, [r3, #24]
			break;
    4a66:	e00f      	b.n	4a88 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4a68:	4b0a      	ldr	r3, [pc, #40]	; (4a94 <system_apb_clock_set_mask+0x58>)
    4a6a:	4a0a      	ldr	r2, [pc, #40]	; (4a94 <system_apb_clock_set_mask+0x58>)
    4a6c:	69d1      	ldr	r1, [r2, #28]
    4a6e:	683a      	ldr	r2, [r7, #0]
    4a70:	430a      	orrs	r2, r1
    4a72:	61da      	str	r2, [r3, #28]
			break;
    4a74:	e008      	b.n	4a88 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4a76:	4b07      	ldr	r3, [pc, #28]	; (4a94 <system_apb_clock_set_mask+0x58>)
    4a78:	4a06      	ldr	r2, [pc, #24]	; (4a94 <system_apb_clock_set_mask+0x58>)
    4a7a:	6a11      	ldr	r1, [r2, #32]
    4a7c:	683a      	ldr	r2, [r7, #0]
    4a7e:	430a      	orrs	r2, r1
    4a80:	621a      	str	r2, [r3, #32]
			break;
    4a82:	e001      	b.n	4a88 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4a84:	2317      	movs	r3, #23
    4a86:	e000      	b.n	4a8a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4a88:	2300      	movs	r3, #0
}
    4a8a:	0018      	movs	r0, r3
    4a8c:	46bd      	mov	sp, r7
    4a8e:	b002      	add	sp, #8
    4a90:	bd80      	pop	{r7, pc}
    4a92:	46c0      	nop			; (mov r8, r8)
    4a94:	40000400 	.word	0x40000400

00004a98 <system_pinmux_get_config_defaults>:
{
    4a98:	b580      	push	{r7, lr}
    4a9a:	b082      	sub	sp, #8
    4a9c:	af00      	add	r7, sp, #0
    4a9e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4aa0:	687b      	ldr	r3, [r7, #4]
    4aa2:	2280      	movs	r2, #128	; 0x80
    4aa4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4aa6:	687b      	ldr	r3, [r7, #4]
    4aa8:	2200      	movs	r2, #0
    4aaa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4aac:	687b      	ldr	r3, [r7, #4]
    4aae:	2201      	movs	r2, #1
    4ab0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4ab2:	687b      	ldr	r3, [r7, #4]
    4ab4:	2200      	movs	r2, #0
    4ab6:	70da      	strb	r2, [r3, #3]
}
    4ab8:	46c0      	nop			; (mov r8, r8)
    4aba:	46bd      	mov	sp, r7
    4abc:	b002      	add	sp, #8
    4abe:	bd80      	pop	{r7, pc}

00004ac0 <system_is_debugger_present>:
{
    4ac0:	b580      	push	{r7, lr}
    4ac2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4ac4:	4b05      	ldr	r3, [pc, #20]	; (4adc <system_is_debugger_present+0x1c>)
    4ac6:	789b      	ldrb	r3, [r3, #2]
    4ac8:	b2db      	uxtb	r3, r3
    4aca:	001a      	movs	r2, r3
    4acc:	2302      	movs	r3, #2
    4ace:	4013      	ands	r3, r2
    4ad0:	1e5a      	subs	r2, r3, #1
    4ad2:	4193      	sbcs	r3, r2
    4ad4:	b2db      	uxtb	r3, r3
}
    4ad6:	0018      	movs	r0, r3
    4ad8:	46bd      	mov	sp, r7
    4ada:	bd80      	pop	{r7, pc}
    4adc:	41002000 	.word	0x41002000

00004ae0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4ae0:	b580      	push	{r7, lr}
    4ae2:	b084      	sub	sp, #16
    4ae4:	af00      	add	r7, sp, #0
    4ae6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4ae8:	687b      	ldr	r3, [r7, #4]
    4aea:	681b      	ldr	r3, [r3, #0]
    4aec:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4aee:	68fb      	ldr	r3, [r7, #12]
    4af0:	69db      	ldr	r3, [r3, #28]
    4af2:	1e5a      	subs	r2, r3, #1
    4af4:	4193      	sbcs	r3, r2
    4af6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    4af8:	0018      	movs	r0, r3
    4afa:	46bd      	mov	sp, r7
    4afc:	b004      	add	sp, #16
    4afe:	bd80      	pop	{r7, pc}

00004b00 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4b00:	b580      	push	{r7, lr}
    4b02:	b082      	sub	sp, #8
    4b04:	af00      	add	r7, sp, #0
    4b06:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4b08:	46c0      	nop			; (mov r8, r8)
    4b0a:	687b      	ldr	r3, [r7, #4]
    4b0c:	0018      	movs	r0, r3
    4b0e:	4b04      	ldr	r3, [pc, #16]	; (4b20 <_usart_wait_for_sync+0x20>)
    4b10:	4798      	blx	r3
    4b12:	1e03      	subs	r3, r0, #0
    4b14:	d1f9      	bne.n	4b0a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4b16:	46c0      	nop			; (mov r8, r8)
    4b18:	46bd      	mov	sp, r7
    4b1a:	b002      	add	sp, #8
    4b1c:	bd80      	pop	{r7, pc}
    4b1e:	46c0      	nop			; (mov r8, r8)
    4b20:	00004ae1 	.word	0x00004ae1

00004b24 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    4b24:	b5b0      	push	{r4, r5, r7, lr}
    4b26:	b08c      	sub	sp, #48	; 0x30
    4b28:	af02      	add	r7, sp, #8
    4b2a:	6078      	str	r0, [r7, #4]
    4b2c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4b2e:	687b      	ldr	r3, [r7, #4]
    4b30:	681b      	ldr	r3, [r3, #0]
    4b32:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4b34:	687b      	ldr	r3, [r7, #4]
    4b36:	681b      	ldr	r3, [r3, #0]
    4b38:	0018      	movs	r0, r3
    4b3a:	4bab      	ldr	r3, [pc, #684]	; (4de8 <_usart_set_config+0x2c4>)
    4b3c:	4798      	blx	r3
    4b3e:	0003      	movs	r3, r0
    4b40:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4b42:	697b      	ldr	r3, [r7, #20]
    4b44:	3314      	adds	r3, #20
    4b46:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    4b48:	2300      	movs	r3, #0
    4b4a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    4b4c:	2300      	movs	r3, #0
    4b4e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    4b50:	230a      	movs	r3, #10
    4b52:	18fb      	adds	r3, r7, r3
    4b54:	2200      	movs	r2, #0
    4b56:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4b58:	231f      	movs	r3, #31
    4b5a:	18fb      	adds	r3, r7, r3
    4b5c:	2200      	movs	r2, #0
    4b5e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4b60:	231e      	movs	r3, #30
    4b62:	18fb      	adds	r3, r7, r3
    4b64:	2210      	movs	r2, #16
    4b66:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    4b68:	683b      	ldr	r3, [r7, #0]
    4b6a:	8a1b      	ldrh	r3, [r3, #16]
    4b6c:	2280      	movs	r2, #128	; 0x80
    4b6e:	01d2      	lsls	r2, r2, #7
    4b70:	4293      	cmp	r3, r2
    4b72:	d01c      	beq.n	4bae <_usart_set_config+0x8a>
    4b74:	2280      	movs	r2, #128	; 0x80
    4b76:	01d2      	lsls	r2, r2, #7
    4b78:	4293      	cmp	r3, r2
    4b7a:	dc06      	bgt.n	4b8a <_usart_set_config+0x66>
    4b7c:	2b00      	cmp	r3, #0
    4b7e:	d00d      	beq.n	4b9c <_usart_set_config+0x78>
    4b80:	2280      	movs	r2, #128	; 0x80
    4b82:	0192      	lsls	r2, r2, #6
    4b84:	4293      	cmp	r3, r2
    4b86:	d024      	beq.n	4bd2 <_usart_set_config+0xae>
    4b88:	e035      	b.n	4bf6 <_usart_set_config+0xd2>
    4b8a:	22c0      	movs	r2, #192	; 0xc0
    4b8c:	01d2      	lsls	r2, r2, #7
    4b8e:	4293      	cmp	r3, r2
    4b90:	d028      	beq.n	4be4 <_usart_set_config+0xc0>
    4b92:	2280      	movs	r2, #128	; 0x80
    4b94:	0212      	lsls	r2, r2, #8
    4b96:	4293      	cmp	r3, r2
    4b98:	d012      	beq.n	4bc0 <_usart_set_config+0x9c>
    4b9a:	e02c      	b.n	4bf6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4b9c:	231f      	movs	r3, #31
    4b9e:	18fb      	adds	r3, r7, r3
    4ba0:	2200      	movs	r2, #0
    4ba2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4ba4:	231e      	movs	r3, #30
    4ba6:	18fb      	adds	r3, r7, r3
    4ba8:	2210      	movs	r2, #16
    4baa:	701a      	strb	r2, [r3, #0]
			break;
    4bac:	e023      	b.n	4bf6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4bae:	231f      	movs	r3, #31
    4bb0:	18fb      	adds	r3, r7, r3
    4bb2:	2200      	movs	r2, #0
    4bb4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4bb6:	231e      	movs	r3, #30
    4bb8:	18fb      	adds	r3, r7, r3
    4bba:	2208      	movs	r2, #8
    4bbc:	701a      	strb	r2, [r3, #0]
			break;
    4bbe:	e01a      	b.n	4bf6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4bc0:	231f      	movs	r3, #31
    4bc2:	18fb      	adds	r3, r7, r3
    4bc4:	2200      	movs	r2, #0
    4bc6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4bc8:	231e      	movs	r3, #30
    4bca:	18fb      	adds	r3, r7, r3
    4bcc:	2203      	movs	r2, #3
    4bce:	701a      	strb	r2, [r3, #0]
			break;
    4bd0:	e011      	b.n	4bf6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4bd2:	231f      	movs	r3, #31
    4bd4:	18fb      	adds	r3, r7, r3
    4bd6:	2201      	movs	r2, #1
    4bd8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4bda:	231e      	movs	r3, #30
    4bdc:	18fb      	adds	r3, r7, r3
    4bde:	2210      	movs	r2, #16
    4be0:	701a      	strb	r2, [r3, #0]
			break;
    4be2:	e008      	b.n	4bf6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4be4:	231f      	movs	r3, #31
    4be6:	18fb      	adds	r3, r7, r3
    4be8:	2201      	movs	r2, #1
    4bea:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4bec:	231e      	movs	r3, #30
    4bee:	18fb      	adds	r3, r7, r3
    4bf0:	2208      	movs	r2, #8
    4bf2:	701a      	strb	r2, [r3, #0]
			break;
    4bf4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4bf6:	683b      	ldr	r3, [r7, #0]
    4bf8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    4bfa:	683b      	ldr	r3, [r7, #0]
    4bfc:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    4bfe:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4c00:	683b      	ldr	r3, [r7, #0]
    4c02:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    4c04:	4313      	orrs	r3, r2
		config->sample_rate |
    4c06:	683a      	ldr	r2, [r7, #0]
    4c08:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    4c0a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4c0c:	683a      	ldr	r2, [r7, #0]
    4c0e:	7e12      	ldrb	r2, [r2, #24]
    4c10:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    4c12:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4c14:	683a      	ldr	r2, [r7, #0]
    4c16:	2126      	movs	r1, #38	; 0x26
    4c18:	5c52      	ldrb	r2, [r2, r1]
    4c1a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    4c1c:	4313      	orrs	r3, r2
    4c1e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    4c20:	231d      	movs	r3, #29
    4c22:	18fb      	adds	r3, r7, r3
    4c24:	2200      	movs	r2, #0
    4c26:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    4c28:	683b      	ldr	r3, [r7, #0]
    4c2a:	685b      	ldr	r3, [r3, #4]
    4c2c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    4c2e:	68fb      	ldr	r3, [r7, #12]
    4c30:	2b00      	cmp	r3, #0
    4c32:	d01e      	beq.n	4c72 <_usart_set_config+0x14e>
    4c34:	2280      	movs	r2, #128	; 0x80
    4c36:	0552      	lsls	r2, r2, #21
    4c38:	4293      	cmp	r3, r2
    4c3a:	d14f      	bne.n	4cdc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    4c3c:	683b      	ldr	r3, [r7, #0]
    4c3e:	2227      	movs	r2, #39	; 0x27
    4c40:	5c9b      	ldrb	r3, [r3, r2]
    4c42:	2201      	movs	r2, #1
    4c44:	4053      	eors	r3, r2
    4c46:	b2db      	uxtb	r3, r3
    4c48:	2b00      	cmp	r3, #0
    4c4a:	d046      	beq.n	4cda <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4c4c:	683b      	ldr	r3, [r7, #0]
    4c4e:	6a1d      	ldr	r5, [r3, #32]
    4c50:	693b      	ldr	r3, [r7, #16]
    4c52:	b2db      	uxtb	r3, r3
    4c54:	0018      	movs	r0, r3
    4c56:	4b65      	ldr	r3, [pc, #404]	; (4dec <_usart_set_config+0x2c8>)
    4c58:	4798      	blx	r3
    4c5a:	0001      	movs	r1, r0
    4c5c:	231d      	movs	r3, #29
    4c5e:	18fc      	adds	r4, r7, r3
    4c60:	230a      	movs	r3, #10
    4c62:	18fb      	adds	r3, r7, r3
    4c64:	001a      	movs	r2, r3
    4c66:	0028      	movs	r0, r5
    4c68:	4b61      	ldr	r3, [pc, #388]	; (4df0 <_usart_set_config+0x2cc>)
    4c6a:	4798      	blx	r3
    4c6c:	0003      	movs	r3, r0
    4c6e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    4c70:	e033      	b.n	4cda <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    4c72:	683b      	ldr	r3, [r7, #0]
    4c74:	2227      	movs	r2, #39	; 0x27
    4c76:	5c9b      	ldrb	r3, [r3, r2]
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d014      	beq.n	4ca6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4c7c:	683b      	ldr	r3, [r7, #0]
    4c7e:	6a18      	ldr	r0, [r3, #32]
    4c80:	683b      	ldr	r3, [r7, #0]
    4c82:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    4c84:	231d      	movs	r3, #29
    4c86:	18fc      	adds	r4, r7, r3
    4c88:	231f      	movs	r3, #31
    4c8a:	18fb      	adds	r3, r7, r3
    4c8c:	781d      	ldrb	r5, [r3, #0]
    4c8e:	230a      	movs	r3, #10
    4c90:	18fa      	adds	r2, r7, r3
    4c92:	231e      	movs	r3, #30
    4c94:	18fb      	adds	r3, r7, r3
    4c96:	781b      	ldrb	r3, [r3, #0]
    4c98:	9300      	str	r3, [sp, #0]
    4c9a:	002b      	movs	r3, r5
    4c9c:	4d55      	ldr	r5, [pc, #340]	; (4df4 <_usart_set_config+0x2d0>)
    4c9e:	47a8      	blx	r5
    4ca0:	0003      	movs	r3, r0
    4ca2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4ca4:	e01a      	b.n	4cdc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    4ca6:	683b      	ldr	r3, [r7, #0]
    4ca8:	6a1d      	ldr	r5, [r3, #32]
    4caa:	693b      	ldr	r3, [r7, #16]
    4cac:	b2db      	uxtb	r3, r3
    4cae:	0018      	movs	r0, r3
    4cb0:	4b4e      	ldr	r3, [pc, #312]	; (4dec <_usart_set_config+0x2c8>)
    4cb2:	4798      	blx	r3
				status_code =
    4cb4:	231d      	movs	r3, #29
    4cb6:	18fc      	adds	r4, r7, r3
    4cb8:	231f      	movs	r3, #31
    4cba:	18fb      	adds	r3, r7, r3
    4cbc:	7819      	ldrb	r1, [r3, #0]
    4cbe:	230a      	movs	r3, #10
    4cc0:	18fa      	adds	r2, r7, r3
    4cc2:	231e      	movs	r3, #30
    4cc4:	18fb      	adds	r3, r7, r3
    4cc6:	781b      	ldrb	r3, [r3, #0]
    4cc8:	9300      	str	r3, [sp, #0]
    4cca:	000b      	movs	r3, r1
    4ccc:	0001      	movs	r1, r0
    4cce:	0028      	movs	r0, r5
    4cd0:	4d48      	ldr	r5, [pc, #288]	; (4df4 <_usart_set_config+0x2d0>)
    4cd2:	47a8      	blx	r5
    4cd4:	0003      	movs	r3, r0
    4cd6:	7023      	strb	r3, [r4, #0]
			break;
    4cd8:	e000      	b.n	4cdc <_usart_set_config+0x1b8>
			break;
    4cda:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    4cdc:	231d      	movs	r3, #29
    4cde:	18fb      	adds	r3, r7, r3
    4ce0:	781b      	ldrb	r3, [r3, #0]
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d003      	beq.n	4cee <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    4ce6:	231d      	movs	r3, #29
    4ce8:	18fb      	adds	r3, r7, r3
    4cea:	781b      	ldrb	r3, [r3, #0]
    4cec:	e077      	b.n	4dde <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    4cee:	683b      	ldr	r3, [r7, #0]
    4cf0:	7e5b      	ldrb	r3, [r3, #25]
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	d003      	beq.n	4cfe <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4cf6:	683b      	ldr	r3, [r7, #0]
    4cf8:	7e9a      	ldrb	r2, [r3, #26]
    4cfa:	69bb      	ldr	r3, [r7, #24]
    4cfc:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4cfe:	687b      	ldr	r3, [r7, #4]
    4d00:	0018      	movs	r0, r3
    4d02:	4b3d      	ldr	r3, [pc, #244]	; (4df8 <_usart_set_config+0x2d4>)
    4d04:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4d06:	230a      	movs	r3, #10
    4d08:	18fb      	adds	r3, r7, r3
    4d0a:	881a      	ldrh	r2, [r3, #0]
    4d0c:	69bb      	ldr	r3, [r7, #24]
    4d0e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    4d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4d12:	68fb      	ldr	r3, [r7, #12]
    4d14:	4313      	orrs	r3, r2
    4d16:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    4d18:	683b      	ldr	r3, [r7, #0]
    4d1a:	2227      	movs	r2, #39	; 0x27
    4d1c:	5c9b      	ldrb	r3, [r3, r2]
    4d1e:	2201      	movs	r2, #1
    4d20:	4053      	eors	r3, r2
    4d22:	b2db      	uxtb	r3, r3
    4d24:	2b00      	cmp	r3, #0
    4d26:	d003      	beq.n	4d30 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d2a:	2204      	movs	r2, #4
    4d2c:	4313      	orrs	r3, r2
    4d2e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4d30:	683b      	ldr	r3, [r7, #0]
    4d32:	7e5b      	ldrb	r3, [r3, #25]
    4d34:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4d36:	683b      	ldr	r3, [r7, #0]
    4d38:	7f1b      	ldrb	r3, [r3, #28]
    4d3a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4d3c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4d3e:	683b      	ldr	r3, [r7, #0]
    4d40:	7f5b      	ldrb	r3, [r3, #29]
    4d42:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4d44:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4d46:	683b      	ldr	r3, [r7, #0]
    4d48:	2124      	movs	r1, #36	; 0x24
    4d4a:	5c5b      	ldrb	r3, [r3, r1]
    4d4c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4d4e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4d50:	683b      	ldr	r3, [r7, #0]
    4d52:	2125      	movs	r1, #37	; 0x25
    4d54:	5c5b      	ldrb	r3, [r3, r1]
    4d56:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4d58:	4313      	orrs	r3, r2
	ctrlb =  
    4d5a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    4d5c:	683b      	ldr	r3, [r7, #0]
    4d5e:	7a9b      	ldrb	r3, [r3, #10]
    4d60:	001a      	movs	r2, r3
    4d62:	6a3b      	ldr	r3, [r7, #32]
    4d64:	4313      	orrs	r3, r2
    4d66:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    4d68:	683b      	ldr	r3, [r7, #0]
    4d6a:	7adb      	ldrb	r3, [r3, #11]
    4d6c:	001a      	movs	r2, r3
    4d6e:	6a3b      	ldr	r3, [r7, #32]
    4d70:	4313      	orrs	r3, r2
    4d72:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    4d74:	683b      	ldr	r3, [r7, #0]
    4d76:	891b      	ldrh	r3, [r3, #8]
    4d78:	2bff      	cmp	r3, #255	; 0xff
    4d7a:	d00b      	beq.n	4d94 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d7e:	2280      	movs	r2, #128	; 0x80
    4d80:	0452      	lsls	r2, r2, #17
    4d82:	4313      	orrs	r3, r2
    4d84:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    4d86:	683b      	ldr	r3, [r7, #0]
    4d88:	891b      	ldrh	r3, [r3, #8]
    4d8a:	001a      	movs	r2, r3
    4d8c:	6a3b      	ldr	r3, [r7, #32]
    4d8e:	4313      	orrs	r3, r2
    4d90:	623b      	str	r3, [r7, #32]
    4d92:	e008      	b.n	4da6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4d94:	683b      	ldr	r3, [r7, #0]
    4d96:	7edb      	ldrb	r3, [r3, #27]
    4d98:	2b00      	cmp	r3, #0
    4d9a:	d004      	beq.n	4da6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d9e:	2280      	movs	r2, #128	; 0x80
    4da0:	04d2      	lsls	r2, r2, #19
    4da2:	4313      	orrs	r3, r2
    4da4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4da6:	683b      	ldr	r3, [r7, #0]
    4da8:	222c      	movs	r2, #44	; 0x2c
    4daa:	5c9b      	ldrb	r3, [r3, r2]
    4dac:	2b00      	cmp	r3, #0
    4dae:	d103      	bne.n	4db8 <_usart_set_config+0x294>
    4db0:	4b12      	ldr	r3, [pc, #72]	; (4dfc <_usart_set_config+0x2d8>)
    4db2:	4798      	blx	r3
    4db4:	1e03      	subs	r3, r0, #0
    4db6:	d003      	beq.n	4dc0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4dba:	2280      	movs	r2, #128	; 0x80
    4dbc:	4313      	orrs	r3, r2
    4dbe:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4dc0:	687b      	ldr	r3, [r7, #4]
    4dc2:	0018      	movs	r0, r3
    4dc4:	4b0c      	ldr	r3, [pc, #48]	; (4df8 <_usart_set_config+0x2d4>)
    4dc6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    4dc8:	69bb      	ldr	r3, [r7, #24]
    4dca:	6a3a      	ldr	r2, [r7, #32]
    4dcc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	0018      	movs	r0, r3
    4dd2:	4b09      	ldr	r3, [pc, #36]	; (4df8 <_usart_set_config+0x2d4>)
    4dd4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    4dd6:	69bb      	ldr	r3, [r7, #24]
    4dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4dda:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    4ddc:	2300      	movs	r3, #0
}
    4dde:	0018      	movs	r0, r3
    4de0:	46bd      	mov	sp, r7
    4de2:	b00a      	add	sp, #40	; 0x28
    4de4:	bdb0      	pop	{r4, r5, r7, pc}
    4de6:	46c0      	nop			; (mov r8, r8)
    4de8:	00004915 	.word	0x00004915
    4dec:	00006899 	.word	0x00006899
    4df0:	0000448f 	.word	0x0000448f
    4df4:	0000450d 	.word	0x0000450d
    4df8:	00004b01 	.word	0x00004b01
    4dfc:	00004ac1 	.word	0x00004ac1

00004e00 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4e00:	b590      	push	{r4, r7, lr}
    4e02:	b093      	sub	sp, #76	; 0x4c
    4e04:	af00      	add	r7, sp, #0
    4e06:	60f8      	str	r0, [r7, #12]
    4e08:	60b9      	str	r1, [r7, #8]
    4e0a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    4e0c:	233b      	movs	r3, #59	; 0x3b
    4e0e:	18fb      	adds	r3, r7, r3
    4e10:	2200      	movs	r2, #0
    4e12:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4e14:	68fb      	ldr	r3, [r7, #12]
    4e16:	68ba      	ldr	r2, [r7, #8]
    4e18:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4e1a:	68fb      	ldr	r3, [r7, #12]
    4e1c:	681b      	ldr	r3, [r3, #0]
    4e1e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4e20:	68fb      	ldr	r3, [r7, #12]
    4e22:	681b      	ldr	r3, [r3, #0]
    4e24:	0018      	movs	r0, r3
    4e26:	4b86      	ldr	r3, [pc, #536]	; (5040 <usart_init+0x240>)
    4e28:	4798      	blx	r3
    4e2a:	0003      	movs	r3, r0
    4e2c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4e30:	3302      	adds	r3, #2
    4e32:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4e36:	3314      	adds	r3, #20
    4e38:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4e3c:	681b      	ldr	r3, [r3, #0]
    4e3e:	2201      	movs	r2, #1
    4e40:	4013      	ands	r3, r2
    4e42:	d001      	beq.n	4e48 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4e44:	2305      	movs	r3, #5
    4e46:	e0f6      	b.n	5036 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4e4a:	681b      	ldr	r3, [r3, #0]
    4e4c:	2202      	movs	r2, #2
    4e4e:	4013      	ands	r3, r2
    4e50:	d001      	beq.n	4e56 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    4e52:	231c      	movs	r3, #28
    4e54:	e0ef      	b.n	5036 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4e56:	2201      	movs	r2, #1
    4e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4e5a:	409a      	lsls	r2, r3
    4e5c:	0013      	movs	r3, r2
    4e5e:	0019      	movs	r1, r3
    4e60:	2002      	movs	r0, #2
    4e62:	4b78      	ldr	r3, [pc, #480]	; (5044 <usart_init+0x244>)
    4e64:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4e66:	2324      	movs	r3, #36	; 0x24
    4e68:	18fb      	adds	r3, r7, r3
    4e6a:	0018      	movs	r0, r3
    4e6c:	4b76      	ldr	r3, [pc, #472]	; (5048 <usart_init+0x248>)
    4e6e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	222d      	movs	r2, #45	; 0x2d
    4e74:	5c9a      	ldrb	r2, [r3, r2]
    4e76:	2324      	movs	r3, #36	; 0x24
    4e78:	18fb      	adds	r3, r7, r3
    4e7a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4e7e:	b2db      	uxtb	r3, r3
    4e80:	2224      	movs	r2, #36	; 0x24
    4e82:	18ba      	adds	r2, r7, r2
    4e84:	0011      	movs	r1, r2
    4e86:	0018      	movs	r0, r3
    4e88:	4b70      	ldr	r3, [pc, #448]	; (504c <usart_init+0x24c>)
    4e8a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4e8e:	b2db      	uxtb	r3, r3
    4e90:	0018      	movs	r0, r3
    4e92:	4b6f      	ldr	r3, [pc, #444]	; (5050 <usart_init+0x250>)
    4e94:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4e96:	687b      	ldr	r3, [r7, #4]
    4e98:	222d      	movs	r2, #45	; 0x2d
    4e9a:	5c9b      	ldrb	r3, [r3, r2]
    4e9c:	2100      	movs	r1, #0
    4e9e:	0018      	movs	r0, r3
    4ea0:	4b6c      	ldr	r3, [pc, #432]	; (5054 <usart_init+0x254>)
    4ea2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	7ada      	ldrb	r2, [r3, #11]
    4ea8:	68fb      	ldr	r3, [r7, #12]
    4eaa:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    4eac:	687b      	ldr	r3, [r7, #4]
    4eae:	2224      	movs	r2, #36	; 0x24
    4eb0:	5c9a      	ldrb	r2, [r3, r2]
    4eb2:	68fb      	ldr	r3, [r7, #12]
    4eb4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4eb6:	687b      	ldr	r3, [r7, #4]
    4eb8:	2225      	movs	r2, #37	; 0x25
    4eba:	5c9a      	ldrb	r2, [r3, r2]
    4ebc:	68fb      	ldr	r3, [r7, #12]
    4ebe:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	7eda      	ldrb	r2, [r3, #27]
    4ec4:	68fb      	ldr	r3, [r7, #12]
    4ec6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	7f1a      	ldrb	r2, [r3, #28]
    4ecc:	68fb      	ldr	r3, [r7, #12]
    4ece:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    4ed0:	233b      	movs	r3, #59	; 0x3b
    4ed2:	18fc      	adds	r4, r7, r3
    4ed4:	687a      	ldr	r2, [r7, #4]
    4ed6:	68fb      	ldr	r3, [r7, #12]
    4ed8:	0011      	movs	r1, r2
    4eda:	0018      	movs	r0, r3
    4edc:	4b5e      	ldr	r3, [pc, #376]	; (5058 <usart_init+0x258>)
    4ede:	4798      	blx	r3
    4ee0:	0003      	movs	r3, r0
    4ee2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    4ee4:	233b      	movs	r3, #59	; 0x3b
    4ee6:	18fb      	adds	r3, r7, r3
    4ee8:	781b      	ldrb	r3, [r3, #0]
    4eea:	2b00      	cmp	r3, #0
    4eec:	d003      	beq.n	4ef6 <usart_init+0xf6>
		return status_code;
    4eee:	233b      	movs	r3, #59	; 0x3b
    4ef0:	18fb      	adds	r3, r7, r3
    4ef2:	781b      	ldrb	r3, [r3, #0]
    4ef4:	e09f      	b.n	5036 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4ef6:	2320      	movs	r3, #32
    4ef8:	18fb      	adds	r3, r7, r3
    4efa:	0018      	movs	r0, r3
    4efc:	4b57      	ldr	r3, [pc, #348]	; (505c <usart_init+0x25c>)
    4efe:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4f00:	2320      	movs	r3, #32
    4f02:	18fb      	adds	r3, r7, r3
    4f04:	2200      	movs	r2, #0
    4f06:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4f08:	2320      	movs	r3, #32
    4f0a:	18fb      	adds	r3, r7, r3
    4f0c:	2200      	movs	r2, #0
    4f0e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4f10:	687b      	ldr	r3, [r7, #4]
    4f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    4f14:	2310      	movs	r3, #16
    4f16:	18fb      	adds	r3, r7, r3
    4f18:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    4f1a:	687b      	ldr	r3, [r7, #4]
    4f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    4f1e:	2310      	movs	r3, #16
    4f20:	18fb      	adds	r3, r7, r3
    4f22:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    4f28:	2310      	movs	r3, #16
    4f2a:	18fb      	adds	r3, r7, r3
    4f2c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    4f2e:	687b      	ldr	r3, [r7, #4]
    4f30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    4f32:	2310      	movs	r3, #16
    4f34:	18fb      	adds	r3, r7, r3
    4f36:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4f38:	2347      	movs	r3, #71	; 0x47
    4f3a:	18fb      	adds	r3, r7, r3
    4f3c:	2200      	movs	r2, #0
    4f3e:	701a      	strb	r2, [r3, #0]
    4f40:	e02c      	b.n	4f9c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4f42:	2347      	movs	r3, #71	; 0x47
    4f44:	18fb      	adds	r3, r7, r3
    4f46:	781a      	ldrb	r2, [r3, #0]
    4f48:	2310      	movs	r3, #16
    4f4a:	18fb      	adds	r3, r7, r3
    4f4c:	0092      	lsls	r2, r2, #2
    4f4e:	58d3      	ldr	r3, [r2, r3]
    4f50:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4f54:	2b00      	cmp	r3, #0
    4f56:	d109      	bne.n	4f6c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4f58:	2347      	movs	r3, #71	; 0x47
    4f5a:	18fb      	adds	r3, r7, r3
    4f5c:	781a      	ldrb	r2, [r3, #0]
    4f5e:	68bb      	ldr	r3, [r7, #8]
    4f60:	0011      	movs	r1, r2
    4f62:	0018      	movs	r0, r3
    4f64:	4b3e      	ldr	r3, [pc, #248]	; (5060 <usart_init+0x260>)
    4f66:	4798      	blx	r3
    4f68:	0003      	movs	r3, r0
    4f6a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4f6e:	3301      	adds	r3, #1
    4f70:	d00d      	beq.n	4f8e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4f74:	b2da      	uxtb	r2, r3
    4f76:	2320      	movs	r3, #32
    4f78:	18fb      	adds	r3, r7, r3
    4f7a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4f7e:	0c1b      	lsrs	r3, r3, #16
    4f80:	b2db      	uxtb	r3, r3
    4f82:	2220      	movs	r2, #32
    4f84:	18ba      	adds	r2, r7, r2
    4f86:	0011      	movs	r1, r2
    4f88:	0018      	movs	r0, r3
    4f8a:	4b36      	ldr	r3, [pc, #216]	; (5064 <usart_init+0x264>)
    4f8c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    4f8e:	2347      	movs	r3, #71	; 0x47
    4f90:	18fb      	adds	r3, r7, r3
    4f92:	781a      	ldrb	r2, [r3, #0]
    4f94:	2347      	movs	r3, #71	; 0x47
    4f96:	18fb      	adds	r3, r7, r3
    4f98:	3201      	adds	r2, #1
    4f9a:	701a      	strb	r2, [r3, #0]
    4f9c:	2347      	movs	r3, #71	; 0x47
    4f9e:	18fb      	adds	r3, r7, r3
    4fa0:	781b      	ldrb	r3, [r3, #0]
    4fa2:	2b03      	cmp	r3, #3
    4fa4:	d9cd      	bls.n	4f42 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4fa6:	2300      	movs	r3, #0
    4fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    4faa:	e00a      	b.n	4fc2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    4fac:	68fa      	ldr	r2, [r7, #12]
    4fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4fb0:	3302      	adds	r3, #2
    4fb2:	009b      	lsls	r3, r3, #2
    4fb4:	18d3      	adds	r3, r2, r3
    4fb6:	3304      	adds	r3, #4
    4fb8:	2200      	movs	r2, #0
    4fba:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4fbe:	3301      	adds	r3, #1
    4fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    4fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4fc4:	2b05      	cmp	r3, #5
    4fc6:	d9f1      	bls.n	4fac <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    4fc8:	68fb      	ldr	r3, [r7, #12]
    4fca:	2200      	movs	r2, #0
    4fcc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4fce:	68fb      	ldr	r3, [r7, #12]
    4fd0:	2200      	movs	r2, #0
    4fd2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4fd4:	68fb      	ldr	r3, [r7, #12]
    4fd6:	2200      	movs	r2, #0
    4fd8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4fda:	68fb      	ldr	r3, [r7, #12]
    4fdc:	2200      	movs	r2, #0
    4fde:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4fe0:	68fb      	ldr	r3, [r7, #12]
    4fe2:	2230      	movs	r2, #48	; 0x30
    4fe4:	2100      	movs	r1, #0
    4fe6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    4fe8:	68fb      	ldr	r3, [r7, #12]
    4fea:	2231      	movs	r2, #49	; 0x31
    4fec:	2100      	movs	r1, #0
    4fee:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    4ff0:	68fb      	ldr	r3, [r7, #12]
    4ff2:	2232      	movs	r2, #50	; 0x32
    4ff4:	2100      	movs	r1, #0
    4ff6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    4ff8:	68fb      	ldr	r3, [r7, #12]
    4ffa:	2233      	movs	r2, #51	; 0x33
    4ffc:	2100      	movs	r1, #0
    4ffe:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5000:	68fb      	ldr	r3, [r7, #12]
    5002:	681b      	ldr	r3, [r3, #0]
    5004:	2227      	movs	r2, #39	; 0x27
    5006:	18bc      	adds	r4, r7, r2
    5008:	0018      	movs	r0, r3
    500a:	4b0d      	ldr	r3, [pc, #52]	; (5040 <usart_init+0x240>)
    500c:	4798      	blx	r3
    500e:	0003      	movs	r3, r0
    5010:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5012:	4a15      	ldr	r2, [pc, #84]	; (5068 <usart_init+0x268>)
    5014:	2327      	movs	r3, #39	; 0x27
    5016:	18fb      	adds	r3, r7, r3
    5018:	781b      	ldrb	r3, [r3, #0]
    501a:	0011      	movs	r1, r2
    501c:	0018      	movs	r0, r3
    501e:	4b13      	ldr	r3, [pc, #76]	; (506c <usart_init+0x26c>)
    5020:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5022:	2327      	movs	r3, #39	; 0x27
    5024:	18fb      	adds	r3, r7, r3
    5026:	781a      	ldrb	r2, [r3, #0]
    5028:	4b11      	ldr	r3, [pc, #68]	; (5070 <usart_init+0x270>)
    502a:	0092      	lsls	r2, r2, #2
    502c:	68f9      	ldr	r1, [r7, #12]
    502e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    5030:	233b      	movs	r3, #59	; 0x3b
    5032:	18fb      	adds	r3, r7, r3
    5034:	781b      	ldrb	r3, [r3, #0]
}
    5036:	0018      	movs	r0, r3
    5038:	46bd      	mov	sp, r7
    503a:	b013      	add	sp, #76	; 0x4c
    503c:	bd90      	pop	{r4, r7, pc}
    503e:	46c0      	nop			; (mov r8, r8)
    5040:	00004915 	.word	0x00004915
    5044:	00004a3d 	.word	0x00004a3d
    5048:	00004a25 	.word	0x00004a25
    504c:	00006775 	.word	0x00006775
    5050:	000067b9 	.word	0x000067b9
    5054:	000046cd 	.word	0x000046cd
    5058:	00004b25 	.word	0x00004b25
    505c:	00004a99 	.word	0x00004a99
    5060:	00004759 	.word	0x00004759
    5064:	00006a61 	.word	0x00006a61
    5068:	0000543d 	.word	0x0000543d
    506c:	00005791 	.word	0x00005791
    5070:	200003bc 	.word	0x200003bc

00005074 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    5074:	b580      	push	{r7, lr}
    5076:	b084      	sub	sp, #16
    5078:	af00      	add	r7, sp, #0
    507a:	6078      	str	r0, [r7, #4]
    507c:	000a      	movs	r2, r1
    507e:	1cbb      	adds	r3, r7, #2
    5080:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5082:	687b      	ldr	r3, [r7, #4]
    5084:	681b      	ldr	r3, [r3, #0]
    5086:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5088:	687b      	ldr	r3, [r7, #4]
    508a:	79db      	ldrb	r3, [r3, #7]
    508c:	2201      	movs	r2, #1
    508e:	4053      	eors	r3, r2
    5090:	b2db      	uxtb	r3, r3
    5092:	2b00      	cmp	r3, #0
    5094:	d001      	beq.n	509a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    5096:	231c      	movs	r3, #28
    5098:	e017      	b.n	50ca <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    509a:	687b      	ldr	r3, [r7, #4]
    509c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    509e:	b29b      	uxth	r3, r3
    50a0:	2b00      	cmp	r3, #0
    50a2:	d001      	beq.n	50a8 <usart_write_wait+0x34>
		return STATUS_BUSY;
    50a4:	2305      	movs	r3, #5
    50a6:	e010      	b.n	50ca <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	0018      	movs	r0, r3
    50ac:	4b09      	ldr	r3, [pc, #36]	; (50d4 <usart_write_wait+0x60>)
    50ae:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    50b0:	68fb      	ldr	r3, [r7, #12]
    50b2:	1cba      	adds	r2, r7, #2
    50b4:	8812      	ldrh	r2, [r2, #0]
    50b6:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    50b8:	46c0      	nop			; (mov r8, r8)
    50ba:	68fb      	ldr	r3, [r7, #12]
    50bc:	7e1b      	ldrb	r3, [r3, #24]
    50be:	b2db      	uxtb	r3, r3
    50c0:	001a      	movs	r2, r3
    50c2:	2302      	movs	r3, #2
    50c4:	4013      	ands	r3, r2
    50c6:	d0f8      	beq.n	50ba <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    50c8:	2300      	movs	r3, #0
}
    50ca:	0018      	movs	r0, r3
    50cc:	46bd      	mov	sp, r7
    50ce:	b004      	add	sp, #16
    50d0:	bd80      	pop	{r7, pc}
    50d2:	46c0      	nop			; (mov r8, r8)
    50d4:	00004b01 	.word	0x00004b01

000050d8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    50d8:	b580      	push	{r7, lr}
    50da:	b084      	sub	sp, #16
    50dc:	af00      	add	r7, sp, #0
    50de:	6078      	str	r0, [r7, #4]
    50e0:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    50e2:	687b      	ldr	r3, [r7, #4]
    50e4:	681b      	ldr	r3, [r3, #0]
    50e6:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    50e8:	687b      	ldr	r3, [r7, #4]
    50ea:	799b      	ldrb	r3, [r3, #6]
    50ec:	2201      	movs	r2, #1
    50ee:	4053      	eors	r3, r2
    50f0:	b2db      	uxtb	r3, r3
    50f2:	2b00      	cmp	r3, #0
    50f4:	d001      	beq.n	50fa <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    50f6:	231c      	movs	r3, #28
    50f8:	e05e      	b.n	51b8 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    50fa:	687b      	ldr	r3, [r7, #4]
    50fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    50fe:	b29b      	uxth	r3, r3
    5100:	2b00      	cmp	r3, #0
    5102:	d001      	beq.n	5108 <usart_read_wait+0x30>
		return STATUS_BUSY;
    5104:	2305      	movs	r3, #5
    5106:	e057      	b.n	51b8 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    5108:	68fb      	ldr	r3, [r7, #12]
    510a:	7e1b      	ldrb	r3, [r3, #24]
    510c:	b2db      	uxtb	r3, r3
    510e:	001a      	movs	r2, r3
    5110:	2304      	movs	r3, #4
    5112:	4013      	ands	r3, r2
    5114:	d101      	bne.n	511a <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    5116:	2305      	movs	r3, #5
    5118:	e04e      	b.n	51b8 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    511a:	687b      	ldr	r3, [r7, #4]
    511c:	0018      	movs	r0, r3
    511e:	4b28      	ldr	r3, [pc, #160]	; (51c0 <usart_read_wait+0xe8>)
    5120:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5122:	68fb      	ldr	r3, [r7, #12]
    5124:	8b5b      	ldrh	r3, [r3, #26]
    5126:	b29b      	uxth	r3, r3
    5128:	b2da      	uxtb	r2, r3
    512a:	230b      	movs	r3, #11
    512c:	18fb      	adds	r3, r7, r3
    512e:	213f      	movs	r1, #63	; 0x3f
    5130:	400a      	ands	r2, r1
    5132:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    5134:	230b      	movs	r3, #11
    5136:	18fb      	adds	r3, r7, r3
    5138:	781b      	ldrb	r3, [r3, #0]
    513a:	2b00      	cmp	r3, #0
    513c:	d036      	beq.n	51ac <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    513e:	230b      	movs	r3, #11
    5140:	18fb      	adds	r3, r7, r3
    5142:	781b      	ldrb	r3, [r3, #0]
    5144:	2202      	movs	r2, #2
    5146:	4013      	ands	r3, r2
    5148:	d004      	beq.n	5154 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    514a:	68fb      	ldr	r3, [r7, #12]
    514c:	2202      	movs	r2, #2
    514e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    5150:	231a      	movs	r3, #26
    5152:	e031      	b.n	51b8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5154:	230b      	movs	r3, #11
    5156:	18fb      	adds	r3, r7, r3
    5158:	781b      	ldrb	r3, [r3, #0]
    515a:	2204      	movs	r2, #4
    515c:	4013      	ands	r3, r2
    515e:	d004      	beq.n	516a <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5160:	68fb      	ldr	r3, [r7, #12]
    5162:	2204      	movs	r2, #4
    5164:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    5166:	231e      	movs	r3, #30
    5168:	e026      	b.n	51b8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    516a:	230b      	movs	r3, #11
    516c:	18fb      	adds	r3, r7, r3
    516e:	781b      	ldrb	r3, [r3, #0]
    5170:	2201      	movs	r2, #1
    5172:	4013      	ands	r3, r2
    5174:	d004      	beq.n	5180 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5176:	68fb      	ldr	r3, [r7, #12]
    5178:	2201      	movs	r2, #1
    517a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    517c:	2313      	movs	r3, #19
    517e:	e01b      	b.n	51b8 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    5180:	230b      	movs	r3, #11
    5182:	18fb      	adds	r3, r7, r3
    5184:	781b      	ldrb	r3, [r3, #0]
    5186:	2210      	movs	r2, #16
    5188:	4013      	ands	r3, r2
    518a:	d004      	beq.n	5196 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    518c:	68fb      	ldr	r3, [r7, #12]
    518e:	2210      	movs	r2, #16
    5190:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    5192:	2342      	movs	r3, #66	; 0x42
    5194:	e010      	b.n	51b8 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5196:	230b      	movs	r3, #11
    5198:	18fb      	adds	r3, r7, r3
    519a:	781b      	ldrb	r3, [r3, #0]
    519c:	2220      	movs	r2, #32
    519e:	4013      	ands	r3, r2
    51a0:	d004      	beq.n	51ac <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    51a2:	68fb      	ldr	r3, [r7, #12]
    51a4:	2220      	movs	r2, #32
    51a6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    51a8:	2341      	movs	r3, #65	; 0x41
    51aa:	e005      	b.n	51b8 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    51ac:	68fb      	ldr	r3, [r7, #12]
    51ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    51b0:	b29a      	uxth	r2, r3
    51b2:	683b      	ldr	r3, [r7, #0]
    51b4:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    51b6:	2300      	movs	r3, #0
}
    51b8:	0018      	movs	r0, r3
    51ba:	46bd      	mov	sp, r7
    51bc:	b004      	add	sp, #16
    51be:	bd80      	pop	{r7, pc}
    51c0:	00004b01 	.word	0x00004b01

000051c4 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    51c4:	b580      	push	{r7, lr}
    51c6:	b08a      	sub	sp, #40	; 0x28
    51c8:	af00      	add	r7, sp, #0
    51ca:	60f8      	str	r0, [r7, #12]
    51cc:	60b9      	str	r1, [r7, #8]
    51ce:	1dbb      	adds	r3, r7, #6
    51d0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    51d2:	1dbb      	adds	r3, r7, #6
    51d4:	881b      	ldrh	r3, [r3, #0]
    51d6:	2b00      	cmp	r3, #0
    51d8:	d101      	bne.n	51de <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    51da:	2317      	movs	r3, #23
    51dc:	e07e      	b.n	52dc <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    51de:	68fb      	ldr	r3, [r7, #12]
    51e0:	79db      	ldrb	r3, [r3, #7]
    51e2:	2201      	movs	r2, #1
    51e4:	4053      	eors	r3, r2
    51e6:	b2db      	uxtb	r3, r3
    51e8:	2b00      	cmp	r3, #0
    51ea:	d001      	beq.n	51f0 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    51ec:	231c      	movs	r3, #28
    51ee:	e075      	b.n	52dc <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    51f0:	68fb      	ldr	r3, [r7, #12]
    51f2:	681b      	ldr	r3, [r3, #0]
    51f4:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    51f6:	68fb      	ldr	r3, [r7, #12]
    51f8:	0018      	movs	r0, r3
    51fa:	4b3a      	ldr	r3, [pc, #232]	; (52e4 <usart_write_buffer_wait+0x120>)
    51fc:	4798      	blx	r3

	uint16_t tx_pos = 0;
    51fe:	2326      	movs	r3, #38	; 0x26
    5200:	18fb      	adds	r3, r7, r3
    5202:	2200      	movs	r2, #0
    5204:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    5206:	e048      	b.n	529a <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    5208:	2300      	movs	r3, #0
    520a:	623b      	str	r3, [r7, #32]
    520c:	e00f      	b.n	522e <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    520e:	697b      	ldr	r3, [r7, #20]
    5210:	7e1b      	ldrb	r3, [r3, #24]
    5212:	b2db      	uxtb	r3, r3
    5214:	001a      	movs	r2, r3
    5216:	2301      	movs	r3, #1
    5218:	4013      	ands	r3, r2
    521a:	d10d      	bne.n	5238 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    521c:	6a3b      	ldr	r3, [r7, #32]
    521e:	4a32      	ldr	r2, [pc, #200]	; (52e8 <usart_write_buffer_wait+0x124>)
    5220:	4293      	cmp	r3, r2
    5222:	d101      	bne.n	5228 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    5224:	2312      	movs	r3, #18
    5226:	e059      	b.n	52dc <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    5228:	6a3b      	ldr	r3, [r7, #32]
    522a:	3301      	adds	r3, #1
    522c:	623b      	str	r3, [r7, #32]
    522e:	6a3b      	ldr	r3, [r7, #32]
    5230:	4a2d      	ldr	r2, [pc, #180]	; (52e8 <usart_write_buffer_wait+0x124>)
    5232:	4293      	cmp	r3, r2
    5234:	d9eb      	bls.n	520e <usart_write_buffer_wait+0x4a>
    5236:	e000      	b.n	523a <usart_write_buffer_wait+0x76>
				break;
    5238:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    523a:	2326      	movs	r3, #38	; 0x26
    523c:	18fb      	adds	r3, r7, r3
    523e:	881b      	ldrh	r3, [r3, #0]
    5240:	2226      	movs	r2, #38	; 0x26
    5242:	18ba      	adds	r2, r7, r2
    5244:	1c59      	adds	r1, r3, #1
    5246:	8011      	strh	r1, [r2, #0]
    5248:	001a      	movs	r2, r3
    524a:	68bb      	ldr	r3, [r7, #8]
    524c:	189b      	adds	r3, r3, r2
    524e:	781a      	ldrb	r2, [r3, #0]
    5250:	231e      	movs	r3, #30
    5252:	18fb      	adds	r3, r7, r3
    5254:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5256:	68fb      	ldr	r3, [r7, #12]
    5258:	795b      	ldrb	r3, [r3, #5]
    525a:	2b01      	cmp	r3, #1
    525c:	d115      	bne.n	528a <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    525e:	2326      	movs	r3, #38	; 0x26
    5260:	18fb      	adds	r3, r7, r3
    5262:	881b      	ldrh	r3, [r3, #0]
    5264:	2226      	movs	r2, #38	; 0x26
    5266:	18ba      	adds	r2, r7, r2
    5268:	1c59      	adds	r1, r3, #1
    526a:	8011      	strh	r1, [r2, #0]
    526c:	001a      	movs	r2, r3
    526e:	68bb      	ldr	r3, [r7, #8]
    5270:	189b      	adds	r3, r3, r2
    5272:	781b      	ldrb	r3, [r3, #0]
    5274:	021b      	lsls	r3, r3, #8
    5276:	b21a      	sxth	r2, r3
    5278:	231e      	movs	r3, #30
    527a:	18fb      	adds	r3, r7, r3
    527c:	2100      	movs	r1, #0
    527e:	5e5b      	ldrsh	r3, [r3, r1]
    5280:	4313      	orrs	r3, r2
    5282:	b21a      	sxth	r2, r3
    5284:	231e      	movs	r3, #30
    5286:	18fb      	adds	r3, r7, r3
    5288:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    528a:	231e      	movs	r3, #30
    528c:	18fb      	adds	r3, r7, r3
    528e:	881a      	ldrh	r2, [r3, #0]
    5290:	68fb      	ldr	r3, [r7, #12]
    5292:	0011      	movs	r1, r2
    5294:	0018      	movs	r0, r3
    5296:	4b15      	ldr	r3, [pc, #84]	; (52ec <usart_write_buffer_wait+0x128>)
    5298:	4798      	blx	r3
	while (length--) {
    529a:	1dbb      	adds	r3, r7, #6
    529c:	881b      	ldrh	r3, [r3, #0]
    529e:	1dba      	adds	r2, r7, #6
    52a0:	1e59      	subs	r1, r3, #1
    52a2:	8011      	strh	r1, [r2, #0]
    52a4:	2b00      	cmp	r3, #0
    52a6:	d1af      	bne.n	5208 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    52a8:	2300      	movs	r3, #0
    52aa:	61bb      	str	r3, [r7, #24]
    52ac:	e00f      	b.n	52ce <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    52ae:	697b      	ldr	r3, [r7, #20]
    52b0:	7e1b      	ldrb	r3, [r3, #24]
    52b2:	b2db      	uxtb	r3, r3
    52b4:	001a      	movs	r2, r3
    52b6:	2302      	movs	r3, #2
    52b8:	4013      	ands	r3, r2
    52ba:	d10d      	bne.n	52d8 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    52bc:	69bb      	ldr	r3, [r7, #24]
    52be:	4a0a      	ldr	r2, [pc, #40]	; (52e8 <usart_write_buffer_wait+0x124>)
    52c0:	4293      	cmp	r3, r2
    52c2:	d101      	bne.n	52c8 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    52c4:	2312      	movs	r3, #18
    52c6:	e009      	b.n	52dc <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    52c8:	69bb      	ldr	r3, [r7, #24]
    52ca:	3301      	adds	r3, #1
    52cc:	61bb      	str	r3, [r7, #24]
    52ce:	69bb      	ldr	r3, [r7, #24]
    52d0:	4a05      	ldr	r2, [pc, #20]	; (52e8 <usart_write_buffer_wait+0x124>)
    52d2:	4293      	cmp	r3, r2
    52d4:	d9eb      	bls.n	52ae <usart_write_buffer_wait+0xea>
    52d6:	e000      	b.n	52da <usart_write_buffer_wait+0x116>
			break;
    52d8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    52da:	2300      	movs	r3, #0
}
    52dc:	0018      	movs	r0, r3
    52de:	46bd      	mov	sp, r7
    52e0:	b00a      	add	sp, #40	; 0x28
    52e2:	bd80      	pop	{r7, pc}
    52e4:	00004b01 	.word	0x00004b01
    52e8:	0000ffff 	.word	0x0000ffff
    52ec:	00005075 	.word	0x00005075

000052f0 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    52f0:	b590      	push	{r4, r7, lr}
    52f2:	b089      	sub	sp, #36	; 0x24
    52f4:	af00      	add	r7, sp, #0
    52f6:	60f8      	str	r0, [r7, #12]
    52f8:	60b9      	str	r1, [r7, #8]
    52fa:	1dbb      	adds	r3, r7, #6
    52fc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    52fe:	1dbb      	adds	r3, r7, #6
    5300:	881b      	ldrh	r3, [r3, #0]
    5302:	2b00      	cmp	r3, #0
    5304:	d101      	bne.n	530a <usart_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5306:	2317      	movs	r3, #23
    5308:	e06d      	b.n	53e6 <usart_read_buffer_wait+0xf6>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    530a:	68fb      	ldr	r3, [r7, #12]
    530c:	799b      	ldrb	r3, [r3, #6]
    530e:	2201      	movs	r2, #1
    5310:	4053      	eors	r3, r2
    5312:	b2db      	uxtb	r3, r3
    5314:	2b00      	cmp	r3, #0
    5316:	d001      	beq.n	531c <usart_read_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    5318:	231c      	movs	r3, #28
    531a:	e064      	b.n	53e6 <usart_read_buffer_wait+0xf6>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    531c:	68fb      	ldr	r3, [r7, #12]
    531e:	681b      	ldr	r3, [r3, #0]
    5320:	617b      	str	r3, [r7, #20]

	uint16_t rx_pos = 0;
    5322:	231e      	movs	r3, #30
    5324:	18fb      	adds	r3, r7, r3
    5326:	2200      	movs	r2, #0
    5328:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being received */
	while (length--) {
    532a:	e054      	b.n	53d6 <usart_read_buffer_wait+0xe6>
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    532c:	2300      	movs	r3, #0
    532e:	61bb      	str	r3, [r7, #24]
    5330:	e00f      	b.n	5352 <usart_read_buffer_wait+0x62>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    5332:	697b      	ldr	r3, [r7, #20]
    5334:	7e1b      	ldrb	r3, [r3, #24]
    5336:	b2db      	uxtb	r3, r3
    5338:	001a      	movs	r2, r3
    533a:	2304      	movs	r3, #4
    533c:	4013      	ands	r3, r2
    533e:	d10d      	bne.n	535c <usart_read_buffer_wait+0x6c>
				break;
			} else if (i == USART_TIMEOUT) {
    5340:	69bb      	ldr	r3, [r7, #24]
    5342:	4a2b      	ldr	r2, [pc, #172]	; (53f0 <usart_read_buffer_wait+0x100>)
    5344:	4293      	cmp	r3, r2
    5346:	d101      	bne.n	534c <usart_read_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
    5348:	2312      	movs	r3, #18
    534a:	e04c      	b.n	53e6 <usart_read_buffer_wait+0xf6>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    534c:	69bb      	ldr	r3, [r7, #24]
    534e:	3301      	adds	r3, #1
    5350:	61bb      	str	r3, [r7, #24]
    5352:	69bb      	ldr	r3, [r7, #24]
    5354:	4a26      	ldr	r2, [pc, #152]	; (53f0 <usart_read_buffer_wait+0x100>)
    5356:	4293      	cmp	r3, r2
    5358:	d9eb      	bls.n	5332 <usart_read_buffer_wait+0x42>
    535a:	e000      	b.n	535e <usart_read_buffer_wait+0x6e>
				break;
    535c:	46c0      	nop			; (mov r8, r8)
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    535e:	2310      	movs	r3, #16
    5360:	18fb      	adds	r3, r7, r3
    5362:	2200      	movs	r2, #0
    5364:	801a      	strh	r2, [r3, #0]

		retval = usart_read_wait(module, &received_data);
    5366:	2313      	movs	r3, #19
    5368:	18fc      	adds	r4, r7, r3
    536a:	2310      	movs	r3, #16
    536c:	18fa      	adds	r2, r7, r3
    536e:	68fb      	ldr	r3, [r7, #12]
    5370:	0011      	movs	r1, r2
    5372:	0018      	movs	r0, r3
    5374:	4b1f      	ldr	r3, [pc, #124]	; (53f4 <usart_read_buffer_wait+0x104>)
    5376:	4798      	blx	r3
    5378:	0003      	movs	r3, r0
    537a:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    537c:	2313      	movs	r3, #19
    537e:	18fb      	adds	r3, r7, r3
    5380:	781b      	ldrb	r3, [r3, #0]
    5382:	2b00      	cmp	r3, #0
    5384:	d003      	beq.n	538e <usart_read_buffer_wait+0x9e>
			/* Overflow, abort */
			return retval;
    5386:	2313      	movs	r3, #19
    5388:	18fb      	adds	r3, r7, r3
    538a:	781b      	ldrb	r3, [r3, #0]
    538c:	e02b      	b.n	53e6 <usart_read_buffer_wait+0xf6>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    538e:	231e      	movs	r3, #30
    5390:	18fb      	adds	r3, r7, r3
    5392:	881b      	ldrh	r3, [r3, #0]
    5394:	221e      	movs	r2, #30
    5396:	18ba      	adds	r2, r7, r2
    5398:	1c59      	adds	r1, r3, #1
    539a:	8011      	strh	r1, [r2, #0]
    539c:	001a      	movs	r2, r3
    539e:	68bb      	ldr	r3, [r7, #8]
    53a0:	189b      	adds	r3, r3, r2
    53a2:	2210      	movs	r2, #16
    53a4:	18ba      	adds	r2, r7, r2
    53a6:	8812      	ldrh	r2, [r2, #0]
    53a8:	b2d2      	uxtb	r2, r2
    53aa:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    53ac:	68fb      	ldr	r3, [r7, #12]
    53ae:	795b      	ldrb	r3, [r3, #5]
    53b0:	2b01      	cmp	r3, #1
    53b2:	d110      	bne.n	53d6 <usart_read_buffer_wait+0xe6>
			rx_data[rx_pos++] = (received_data >> 8);
    53b4:	231e      	movs	r3, #30
    53b6:	18fb      	adds	r3, r7, r3
    53b8:	881b      	ldrh	r3, [r3, #0]
    53ba:	221e      	movs	r2, #30
    53bc:	18ba      	adds	r2, r7, r2
    53be:	1c59      	adds	r1, r3, #1
    53c0:	8011      	strh	r1, [r2, #0]
    53c2:	001a      	movs	r2, r3
    53c4:	68bb      	ldr	r3, [r7, #8]
    53c6:	189b      	adds	r3, r3, r2
    53c8:	2210      	movs	r2, #16
    53ca:	18ba      	adds	r2, r7, r2
    53cc:	8812      	ldrh	r2, [r2, #0]
    53ce:	0a12      	lsrs	r2, r2, #8
    53d0:	b292      	uxth	r2, r2
    53d2:	b2d2      	uxtb	r2, r2
    53d4:	701a      	strb	r2, [r3, #0]
	while (length--) {
    53d6:	1dbb      	adds	r3, r7, #6
    53d8:	881b      	ldrh	r3, [r3, #0]
    53da:	1dba      	adds	r2, r7, #6
    53dc:	1e59      	subs	r1, r3, #1
    53de:	8011      	strh	r1, [r2, #0]
    53e0:	2b00      	cmp	r3, #0
    53e2:	d1a3      	bne.n	532c <usart_read_buffer_wait+0x3c>
		}
	}

	return STATUS_OK;
    53e4:	2300      	movs	r3, #0
}
    53e6:	0018      	movs	r0, r3
    53e8:	46bd      	mov	sp, r7
    53ea:	b009      	add	sp, #36	; 0x24
    53ec:	bd90      	pop	{r4, r7, pc}
    53ee:	46c0      	nop			; (mov r8, r8)
    53f0:	0000ffff 	.word	0x0000ffff
    53f4:	000050d9 	.word	0x000050d9

000053f8 <usart_is_syncing>:
{
    53f8:	b580      	push	{r7, lr}
    53fa:	b084      	sub	sp, #16
    53fc:	af00      	add	r7, sp, #0
    53fe:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5400:	687b      	ldr	r3, [r7, #4]
    5402:	681b      	ldr	r3, [r3, #0]
    5404:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    5406:	68fb      	ldr	r3, [r7, #12]
    5408:	69db      	ldr	r3, [r3, #28]
    540a:	1e5a      	subs	r2, r3, #1
    540c:	4193      	sbcs	r3, r2
    540e:	b2db      	uxtb	r3, r3
}
    5410:	0018      	movs	r0, r3
    5412:	46bd      	mov	sp, r7
    5414:	b004      	add	sp, #16
    5416:	bd80      	pop	{r7, pc}

00005418 <_usart_wait_for_sync>:
{
    5418:	b580      	push	{r7, lr}
    541a:	b082      	sub	sp, #8
    541c:	af00      	add	r7, sp, #0
    541e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    5420:	46c0      	nop			; (mov r8, r8)
    5422:	687b      	ldr	r3, [r7, #4]
    5424:	0018      	movs	r0, r3
    5426:	4b04      	ldr	r3, [pc, #16]	; (5438 <_usart_wait_for_sync+0x20>)
    5428:	4798      	blx	r3
    542a:	1e03      	subs	r3, r0, #0
    542c:	d1f9      	bne.n	5422 <_usart_wait_for_sync+0xa>
}
    542e:	46c0      	nop			; (mov r8, r8)
    5430:	46bd      	mov	sp, r7
    5432:	b002      	add	sp, #8
    5434:	bd80      	pop	{r7, pc}
    5436:	46c0      	nop			; (mov r8, r8)
    5438:	000053f9 	.word	0x000053f9

0000543c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    543c:	b580      	push	{r7, lr}
    543e:	b088      	sub	sp, #32
    5440:	af00      	add	r7, sp, #0
    5442:	0002      	movs	r2, r0
    5444:	1dfb      	adds	r3, r7, #7
    5446:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    5448:	1dfb      	adds	r3, r7, #7
    544a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    544c:	4ba3      	ldr	r3, [pc, #652]	; (56dc <_usart_interrupt_handler+0x2a0>)
    544e:	0092      	lsls	r2, r2, #2
    5450:	58d3      	ldr	r3, [r2, r3]
    5452:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5454:	69bb      	ldr	r3, [r7, #24]
    5456:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    5458:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    545a:	69bb      	ldr	r3, [r7, #24]
    545c:	0018      	movs	r0, r3
    545e:	4ba0      	ldr	r3, [pc, #640]	; (56e0 <_usart_interrupt_handler+0x2a4>)
    5460:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5462:	697b      	ldr	r3, [r7, #20]
    5464:	7e1b      	ldrb	r3, [r3, #24]
    5466:	b2da      	uxtb	r2, r3
    5468:	2312      	movs	r3, #18
    546a:	18fb      	adds	r3, r7, r3
    546c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    546e:	697b      	ldr	r3, [r7, #20]
    5470:	7d9b      	ldrb	r3, [r3, #22]
    5472:	b2db      	uxtb	r3, r3
    5474:	b29a      	uxth	r2, r3
    5476:	2312      	movs	r3, #18
    5478:	18fb      	adds	r3, r7, r3
    547a:	2112      	movs	r1, #18
    547c:	1879      	adds	r1, r7, r1
    547e:	8809      	ldrh	r1, [r1, #0]
    5480:	400a      	ands	r2, r1
    5482:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    5484:	69bb      	ldr	r3, [r7, #24]
    5486:	2230      	movs	r2, #48	; 0x30
    5488:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    548a:	69ba      	ldr	r2, [r7, #24]
    548c:	2131      	movs	r1, #49	; 0x31
    548e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    5490:	4013      	ands	r3, r2
    5492:	b2da      	uxtb	r2, r3
    5494:	2310      	movs	r3, #16
    5496:	18fb      	adds	r3, r7, r3
    5498:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    549a:	2312      	movs	r3, #18
    549c:	18fb      	adds	r3, r7, r3
    549e:	881b      	ldrh	r3, [r3, #0]
    54a0:	2201      	movs	r2, #1
    54a2:	4013      	ands	r3, r2
    54a4:	d044      	beq.n	5530 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    54a6:	69bb      	ldr	r3, [r7, #24]
    54a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    54aa:	b29b      	uxth	r3, r3
    54ac:	2b00      	cmp	r3, #0
    54ae:	d03c      	beq.n	552a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    54b0:	69bb      	ldr	r3, [r7, #24]
    54b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    54b4:	781b      	ldrb	r3, [r3, #0]
    54b6:	b2da      	uxtb	r2, r3
    54b8:	231c      	movs	r3, #28
    54ba:	18fb      	adds	r3, r7, r3
    54bc:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    54be:	69bb      	ldr	r3, [r7, #24]
    54c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    54c2:	1c5a      	adds	r2, r3, #1
    54c4:	69bb      	ldr	r3, [r7, #24]
    54c6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    54c8:	69bb      	ldr	r3, [r7, #24]
    54ca:	795b      	ldrb	r3, [r3, #5]
    54cc:	2b01      	cmp	r3, #1
    54ce:	d113      	bne.n	54f8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    54d0:	69bb      	ldr	r3, [r7, #24]
    54d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    54d4:	781b      	ldrb	r3, [r3, #0]
    54d6:	b2db      	uxtb	r3, r3
    54d8:	021b      	lsls	r3, r3, #8
    54da:	b21a      	sxth	r2, r3
    54dc:	231c      	movs	r3, #28
    54de:	18fb      	adds	r3, r7, r3
    54e0:	2100      	movs	r1, #0
    54e2:	5e5b      	ldrsh	r3, [r3, r1]
    54e4:	4313      	orrs	r3, r2
    54e6:	b21a      	sxth	r2, r3
    54e8:	231c      	movs	r3, #28
    54ea:	18fb      	adds	r3, r7, r3
    54ec:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    54ee:	69bb      	ldr	r3, [r7, #24]
    54f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    54f2:	1c5a      	adds	r2, r3, #1
    54f4:	69bb      	ldr	r3, [r7, #24]
    54f6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    54f8:	231c      	movs	r3, #28
    54fa:	18fb      	adds	r3, r7, r3
    54fc:	881b      	ldrh	r3, [r3, #0]
    54fe:	05db      	lsls	r3, r3, #23
    5500:	0ddb      	lsrs	r3, r3, #23
    5502:	b29a      	uxth	r2, r3
    5504:	697b      	ldr	r3, [r7, #20]
    5506:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5508:	69bb      	ldr	r3, [r7, #24]
    550a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    550c:	b29b      	uxth	r3, r3
    550e:	3b01      	subs	r3, #1
    5510:	b29b      	uxth	r3, r3
    5512:	69ba      	ldr	r2, [r7, #24]
    5514:	1c19      	adds	r1, r3, #0
    5516:	85d1      	strh	r1, [r2, #46]	; 0x2e
    5518:	2b00      	cmp	r3, #0
    551a:	d109      	bne.n	5530 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    551c:	697b      	ldr	r3, [r7, #20]
    551e:	2201      	movs	r2, #1
    5520:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5522:	697b      	ldr	r3, [r7, #20]
    5524:	2202      	movs	r2, #2
    5526:	759a      	strb	r2, [r3, #22]
    5528:	e002      	b.n	5530 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    552a:	697b      	ldr	r3, [r7, #20]
    552c:	2201      	movs	r2, #1
    552e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5530:	2312      	movs	r3, #18
    5532:	18fb      	adds	r3, r7, r3
    5534:	881b      	ldrh	r3, [r3, #0]
    5536:	2202      	movs	r2, #2
    5538:	4013      	ands	r3, r2
    553a:	d011      	beq.n	5560 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    553c:	697b      	ldr	r3, [r7, #20]
    553e:	2202      	movs	r2, #2
    5540:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5542:	69bb      	ldr	r3, [r7, #24]
    5544:	2233      	movs	r2, #51	; 0x33
    5546:	2100      	movs	r1, #0
    5548:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    554a:	2310      	movs	r3, #16
    554c:	18fb      	adds	r3, r7, r3
    554e:	881b      	ldrh	r3, [r3, #0]
    5550:	2201      	movs	r2, #1
    5552:	4013      	ands	r3, r2
    5554:	d004      	beq.n	5560 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5556:	69bb      	ldr	r3, [r7, #24]
    5558:	68db      	ldr	r3, [r3, #12]
    555a:	69ba      	ldr	r2, [r7, #24]
    555c:	0010      	movs	r0, r2
    555e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5560:	2312      	movs	r3, #18
    5562:	18fb      	adds	r3, r7, r3
    5564:	881b      	ldrh	r3, [r3, #0]
    5566:	2204      	movs	r2, #4
    5568:	4013      	ands	r3, r2
    556a:	d100      	bne.n	556e <_usart_interrupt_handler+0x132>
    556c:	e0bd      	b.n	56ea <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    556e:	69bb      	ldr	r3, [r7, #24]
    5570:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5572:	b29b      	uxth	r3, r3
    5574:	2b00      	cmp	r3, #0
    5576:	d100      	bne.n	557a <_usart_interrupt_handler+0x13e>
    5578:	e0b4      	b.n	56e4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    557a:	697b      	ldr	r3, [r7, #20]
    557c:	8b5b      	ldrh	r3, [r3, #26]
    557e:	b29b      	uxth	r3, r3
    5580:	b2da      	uxtb	r2, r3
    5582:	231f      	movs	r3, #31
    5584:	18fb      	adds	r3, r7, r3
    5586:	213f      	movs	r1, #63	; 0x3f
    5588:	400a      	ands	r2, r1
    558a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    558c:	231f      	movs	r3, #31
    558e:	18fb      	adds	r3, r7, r3
    5590:	781b      	ldrb	r3, [r3, #0]
    5592:	2208      	movs	r2, #8
    5594:	4013      	ands	r3, r2
    5596:	d007      	beq.n	55a8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5598:	231f      	movs	r3, #31
    559a:	18fb      	adds	r3, r7, r3
    559c:	221f      	movs	r2, #31
    559e:	18ba      	adds	r2, r7, r2
    55a0:	7812      	ldrb	r2, [r2, #0]
    55a2:	2108      	movs	r1, #8
    55a4:	438a      	bics	r2, r1
    55a6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    55a8:	231f      	movs	r3, #31
    55aa:	18fb      	adds	r3, r7, r3
    55ac:	781b      	ldrb	r3, [r3, #0]
    55ae:	2b00      	cmp	r3, #0
    55b0:	d050      	beq.n	5654 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    55b2:	231f      	movs	r3, #31
    55b4:	18fb      	adds	r3, r7, r3
    55b6:	781b      	ldrb	r3, [r3, #0]
    55b8:	2202      	movs	r2, #2
    55ba:	4013      	ands	r3, r2
    55bc:	d007      	beq.n	55ce <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    55be:	69bb      	ldr	r3, [r7, #24]
    55c0:	2232      	movs	r2, #50	; 0x32
    55c2:	211a      	movs	r1, #26
    55c4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    55c6:	697b      	ldr	r3, [r7, #20]
    55c8:	2202      	movs	r2, #2
    55ca:	835a      	strh	r2, [r3, #26]
    55cc:	e036      	b.n	563c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    55ce:	231f      	movs	r3, #31
    55d0:	18fb      	adds	r3, r7, r3
    55d2:	781b      	ldrb	r3, [r3, #0]
    55d4:	2204      	movs	r2, #4
    55d6:	4013      	ands	r3, r2
    55d8:	d007      	beq.n	55ea <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    55da:	69bb      	ldr	r3, [r7, #24]
    55dc:	2232      	movs	r2, #50	; 0x32
    55de:	211e      	movs	r1, #30
    55e0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    55e2:	697b      	ldr	r3, [r7, #20]
    55e4:	2204      	movs	r2, #4
    55e6:	835a      	strh	r2, [r3, #26]
    55e8:	e028      	b.n	563c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    55ea:	231f      	movs	r3, #31
    55ec:	18fb      	adds	r3, r7, r3
    55ee:	781b      	ldrb	r3, [r3, #0]
    55f0:	2201      	movs	r2, #1
    55f2:	4013      	ands	r3, r2
    55f4:	d007      	beq.n	5606 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    55f6:	69bb      	ldr	r3, [r7, #24]
    55f8:	2232      	movs	r2, #50	; 0x32
    55fa:	2113      	movs	r1, #19
    55fc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    55fe:	697b      	ldr	r3, [r7, #20]
    5600:	2201      	movs	r2, #1
    5602:	835a      	strh	r2, [r3, #26]
    5604:	e01a      	b.n	563c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5606:	231f      	movs	r3, #31
    5608:	18fb      	adds	r3, r7, r3
    560a:	781b      	ldrb	r3, [r3, #0]
    560c:	2210      	movs	r2, #16
    560e:	4013      	ands	r3, r2
    5610:	d007      	beq.n	5622 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5612:	69bb      	ldr	r3, [r7, #24]
    5614:	2232      	movs	r2, #50	; 0x32
    5616:	2142      	movs	r1, #66	; 0x42
    5618:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    561a:	697b      	ldr	r3, [r7, #20]
    561c:	2210      	movs	r2, #16
    561e:	835a      	strh	r2, [r3, #26]
    5620:	e00c      	b.n	563c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5622:	231f      	movs	r3, #31
    5624:	18fb      	adds	r3, r7, r3
    5626:	781b      	ldrb	r3, [r3, #0]
    5628:	2220      	movs	r2, #32
    562a:	4013      	ands	r3, r2
    562c:	d006      	beq.n	563c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    562e:	69bb      	ldr	r3, [r7, #24]
    5630:	2232      	movs	r2, #50	; 0x32
    5632:	2141      	movs	r1, #65	; 0x41
    5634:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5636:	697b      	ldr	r3, [r7, #20]
    5638:	2220      	movs	r2, #32
    563a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    563c:	2310      	movs	r3, #16
    563e:	18fb      	adds	r3, r7, r3
    5640:	881b      	ldrh	r3, [r3, #0]
    5642:	2204      	movs	r2, #4
    5644:	4013      	ands	r3, r2
				if (callback_status
    5646:	d050      	beq.n	56ea <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5648:	69bb      	ldr	r3, [r7, #24]
    564a:	695b      	ldr	r3, [r3, #20]
    564c:	69ba      	ldr	r2, [r7, #24]
    564e:	0010      	movs	r0, r2
    5650:	4798      	blx	r3
    5652:	e04a      	b.n	56ea <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5654:	697b      	ldr	r3, [r7, #20]
    5656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5658:	b29a      	uxth	r2, r3
    565a:	230e      	movs	r3, #14
    565c:	18fb      	adds	r3, r7, r3
    565e:	05d2      	lsls	r2, r2, #23
    5660:	0dd2      	lsrs	r2, r2, #23
    5662:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5664:	69bb      	ldr	r3, [r7, #24]
    5666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5668:	220e      	movs	r2, #14
    566a:	18ba      	adds	r2, r7, r2
    566c:	8812      	ldrh	r2, [r2, #0]
    566e:	b2d2      	uxtb	r2, r2
    5670:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5672:	69bb      	ldr	r3, [r7, #24]
    5674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5676:	1c5a      	adds	r2, r3, #1
    5678:	69bb      	ldr	r3, [r7, #24]
    567a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    567c:	69bb      	ldr	r3, [r7, #24]
    567e:	795b      	ldrb	r3, [r3, #5]
    5680:	2b01      	cmp	r3, #1
    5682:	d10d      	bne.n	56a0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5684:	69bb      	ldr	r3, [r7, #24]
    5686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5688:	220e      	movs	r2, #14
    568a:	18ba      	adds	r2, r7, r2
    568c:	8812      	ldrh	r2, [r2, #0]
    568e:	0a12      	lsrs	r2, r2, #8
    5690:	b292      	uxth	r2, r2
    5692:	b2d2      	uxtb	r2, r2
    5694:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    5696:	69bb      	ldr	r3, [r7, #24]
    5698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    569a:	1c5a      	adds	r2, r3, #1
    569c:	69bb      	ldr	r3, [r7, #24]
    569e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    56a0:	69bb      	ldr	r3, [r7, #24]
    56a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    56a4:	b29b      	uxth	r3, r3
    56a6:	3b01      	subs	r3, #1
    56a8:	b29b      	uxth	r3, r3
    56aa:	69ba      	ldr	r2, [r7, #24]
    56ac:	1c19      	adds	r1, r3, #0
    56ae:	8591      	strh	r1, [r2, #44]	; 0x2c
    56b0:	2b00      	cmp	r3, #0
    56b2:	d11a      	bne.n	56ea <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    56b4:	697b      	ldr	r3, [r7, #20]
    56b6:	2204      	movs	r2, #4
    56b8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    56ba:	69bb      	ldr	r3, [r7, #24]
    56bc:	2232      	movs	r2, #50	; 0x32
    56be:	2100      	movs	r1, #0
    56c0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    56c2:	2310      	movs	r3, #16
    56c4:	18fb      	adds	r3, r7, r3
    56c6:	881b      	ldrh	r3, [r3, #0]
    56c8:	2202      	movs	r2, #2
    56ca:	4013      	ands	r3, r2
					if (callback_status
    56cc:	d00d      	beq.n	56ea <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    56ce:	69bb      	ldr	r3, [r7, #24]
    56d0:	691b      	ldr	r3, [r3, #16]
    56d2:	69ba      	ldr	r2, [r7, #24]
    56d4:	0010      	movs	r0, r2
    56d6:	4798      	blx	r3
    56d8:	e007      	b.n	56ea <_usart_interrupt_handler+0x2ae>
    56da:	46c0      	nop			; (mov r8, r8)
    56dc:	200003bc 	.word	0x200003bc
    56e0:	00005419 	.word	0x00005419
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    56e4:	697b      	ldr	r3, [r7, #20]
    56e6:	2204      	movs	r2, #4
    56e8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    56ea:	2312      	movs	r3, #18
    56ec:	18fb      	adds	r3, r7, r3
    56ee:	881b      	ldrh	r3, [r3, #0]
    56f0:	2210      	movs	r2, #16
    56f2:	4013      	ands	r3, r2
    56f4:	d010      	beq.n	5718 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    56f6:	697b      	ldr	r3, [r7, #20]
    56f8:	2210      	movs	r2, #16
    56fa:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    56fc:	697b      	ldr	r3, [r7, #20]
    56fe:	2210      	movs	r2, #16
    5700:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5702:	2310      	movs	r3, #16
    5704:	18fb      	adds	r3, r7, r3
    5706:	881b      	ldrh	r3, [r3, #0]
    5708:	2210      	movs	r2, #16
    570a:	4013      	ands	r3, r2
    570c:	d004      	beq.n	5718 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    570e:	69bb      	ldr	r3, [r7, #24]
    5710:	69db      	ldr	r3, [r3, #28]
    5712:	69ba      	ldr	r2, [r7, #24]
    5714:	0010      	movs	r0, r2
    5716:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5718:	2312      	movs	r3, #18
    571a:	18fb      	adds	r3, r7, r3
    571c:	881b      	ldrh	r3, [r3, #0]
    571e:	2220      	movs	r2, #32
    5720:	4013      	ands	r3, r2
    5722:	d010      	beq.n	5746 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5724:	697b      	ldr	r3, [r7, #20]
    5726:	2220      	movs	r2, #32
    5728:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    572a:	697b      	ldr	r3, [r7, #20]
    572c:	2220      	movs	r2, #32
    572e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5730:	2310      	movs	r3, #16
    5732:	18fb      	adds	r3, r7, r3
    5734:	881b      	ldrh	r3, [r3, #0]
    5736:	2208      	movs	r2, #8
    5738:	4013      	ands	r3, r2
    573a:	d004      	beq.n	5746 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    573c:	69bb      	ldr	r3, [r7, #24]
    573e:	699b      	ldr	r3, [r3, #24]
    5740:	69ba      	ldr	r2, [r7, #24]
    5742:	0010      	movs	r0, r2
    5744:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5746:	2312      	movs	r3, #18
    5748:	18fb      	adds	r3, r7, r3
    574a:	881b      	ldrh	r3, [r3, #0]
    574c:	2208      	movs	r2, #8
    574e:	4013      	ands	r3, r2
    5750:	d010      	beq.n	5774 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5752:	697b      	ldr	r3, [r7, #20]
    5754:	2208      	movs	r2, #8
    5756:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5758:	697b      	ldr	r3, [r7, #20]
    575a:	2208      	movs	r2, #8
    575c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    575e:	2310      	movs	r3, #16
    5760:	18fb      	adds	r3, r7, r3
    5762:	881b      	ldrh	r3, [r3, #0]
    5764:	2220      	movs	r2, #32
    5766:	4013      	ands	r3, r2
    5768:	d004      	beq.n	5774 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    576a:	69bb      	ldr	r3, [r7, #24]
    576c:	6a1b      	ldr	r3, [r3, #32]
    576e:	69ba      	ldr	r2, [r7, #24]
    5770:	0010      	movs	r0, r2
    5772:	4798      	blx	r3
		}
	}
#endif
}
    5774:	46c0      	nop			; (mov r8, r8)
    5776:	46bd      	mov	sp, r7
    5778:	b008      	add	sp, #32
    577a:	bd80      	pop	{r7, pc}

0000577c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    577c:	b580      	push	{r7, lr}
    577e:	b082      	sub	sp, #8
    5780:	af00      	add	r7, sp, #0
    5782:	0002      	movs	r2, r0
    5784:	1dfb      	adds	r3, r7, #7
    5786:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    5788:	46c0      	nop			; (mov r8, r8)
    578a:	46bd      	mov	sp, r7
    578c:	b002      	add	sp, #8
    578e:	bd80      	pop	{r7, pc}

00005790 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5790:	b580      	push	{r7, lr}
    5792:	b084      	sub	sp, #16
    5794:	af00      	add	r7, sp, #0
    5796:	0002      	movs	r2, r0
    5798:	6039      	str	r1, [r7, #0]
    579a:	1dfb      	adds	r3, r7, #7
    579c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    579e:	4b13      	ldr	r3, [pc, #76]	; (57ec <_sercom_set_handler+0x5c>)
    57a0:	781b      	ldrb	r3, [r3, #0]
    57a2:	2201      	movs	r2, #1
    57a4:	4053      	eors	r3, r2
    57a6:	b2db      	uxtb	r3, r3
    57a8:	2b00      	cmp	r3, #0
    57aa:	d015      	beq.n	57d8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    57ac:	2300      	movs	r3, #0
    57ae:	60fb      	str	r3, [r7, #12]
    57b0:	e00c      	b.n	57cc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    57b2:	4b0f      	ldr	r3, [pc, #60]	; (57f0 <_sercom_set_handler+0x60>)
    57b4:	68fa      	ldr	r2, [r7, #12]
    57b6:	0092      	lsls	r2, r2, #2
    57b8:	490e      	ldr	r1, [pc, #56]	; (57f4 <_sercom_set_handler+0x64>)
    57ba:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    57bc:	4b0e      	ldr	r3, [pc, #56]	; (57f8 <_sercom_set_handler+0x68>)
    57be:	68fa      	ldr	r2, [r7, #12]
    57c0:	0092      	lsls	r2, r2, #2
    57c2:	2100      	movs	r1, #0
    57c4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    57c6:	68fb      	ldr	r3, [r7, #12]
    57c8:	3301      	adds	r3, #1
    57ca:	60fb      	str	r3, [r7, #12]
    57cc:	68fb      	ldr	r3, [r7, #12]
    57ce:	2b05      	cmp	r3, #5
    57d0:	d9ef      	bls.n	57b2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    57d2:	4b06      	ldr	r3, [pc, #24]	; (57ec <_sercom_set_handler+0x5c>)
    57d4:	2201      	movs	r2, #1
    57d6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    57d8:	1dfb      	adds	r3, r7, #7
    57da:	781a      	ldrb	r2, [r3, #0]
    57dc:	4b04      	ldr	r3, [pc, #16]	; (57f0 <_sercom_set_handler+0x60>)
    57de:	0092      	lsls	r2, r2, #2
    57e0:	6839      	ldr	r1, [r7, #0]
    57e2:	50d1      	str	r1, [r2, r3]
}
    57e4:	46c0      	nop			; (mov r8, r8)
    57e6:	46bd      	mov	sp, r7
    57e8:	b004      	add	sp, #16
    57ea:	bd80      	pop	{r7, pc}
    57ec:	2000027a 	.word	0x2000027a
    57f0:	2000027c 	.word	0x2000027c
    57f4:	0000577d 	.word	0x0000577d
    57f8:	200003bc 	.word	0x200003bc

000057fc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    57fc:	b590      	push	{r4, r7, lr}
    57fe:	b085      	sub	sp, #20
    5800:	af00      	add	r7, sp, #0
    5802:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5804:	2308      	movs	r3, #8
    5806:	18fb      	adds	r3, r7, r3
    5808:	4a0b      	ldr	r2, [pc, #44]	; (5838 <_sercom_get_interrupt_vector+0x3c>)
    580a:	6811      	ldr	r1, [r2, #0]
    580c:	6019      	str	r1, [r3, #0]
    580e:	8892      	ldrh	r2, [r2, #4]
    5810:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5812:	230f      	movs	r3, #15
    5814:	18fc      	adds	r4, r7, r3
    5816:	687b      	ldr	r3, [r7, #4]
    5818:	0018      	movs	r0, r3
    581a:	4b08      	ldr	r3, [pc, #32]	; (583c <_sercom_get_interrupt_vector+0x40>)
    581c:	4798      	blx	r3
    581e:	0003      	movs	r3, r0
    5820:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5822:	230f      	movs	r3, #15
    5824:	18fb      	adds	r3, r7, r3
    5826:	781b      	ldrb	r3, [r3, #0]
    5828:	2208      	movs	r2, #8
    582a:	18ba      	adds	r2, r7, r2
    582c:	5cd3      	ldrb	r3, [r2, r3]
    582e:	b25b      	sxtb	r3, r3
}
    5830:	0018      	movs	r0, r3
    5832:	46bd      	mov	sp, r7
    5834:	b005      	add	sp, #20
    5836:	bd90      	pop	{r4, r7, pc}
    5838:	0000e3c8 	.word	0x0000e3c8
    583c:	00004915 	.word	0x00004915

00005840 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5840:	b580      	push	{r7, lr}
    5842:	af00      	add	r7, sp, #0
    5844:	4b03      	ldr	r3, [pc, #12]	; (5854 <SERCOM0_Handler+0x14>)
    5846:	681b      	ldr	r3, [r3, #0]
    5848:	2000      	movs	r0, #0
    584a:	4798      	blx	r3
    584c:	46c0      	nop			; (mov r8, r8)
    584e:	46bd      	mov	sp, r7
    5850:	bd80      	pop	{r7, pc}
    5852:	46c0      	nop			; (mov r8, r8)
    5854:	2000027c 	.word	0x2000027c

00005858 <SERCOM1_Handler>:
    5858:	b580      	push	{r7, lr}
    585a:	af00      	add	r7, sp, #0
    585c:	4b03      	ldr	r3, [pc, #12]	; (586c <SERCOM1_Handler+0x14>)
    585e:	685b      	ldr	r3, [r3, #4]
    5860:	2001      	movs	r0, #1
    5862:	4798      	blx	r3
    5864:	46c0      	nop			; (mov r8, r8)
    5866:	46bd      	mov	sp, r7
    5868:	bd80      	pop	{r7, pc}
    586a:	46c0      	nop			; (mov r8, r8)
    586c:	2000027c 	.word	0x2000027c

00005870 <SERCOM2_Handler>:
    5870:	b580      	push	{r7, lr}
    5872:	af00      	add	r7, sp, #0
    5874:	4b03      	ldr	r3, [pc, #12]	; (5884 <SERCOM2_Handler+0x14>)
    5876:	689b      	ldr	r3, [r3, #8]
    5878:	2002      	movs	r0, #2
    587a:	4798      	blx	r3
    587c:	46c0      	nop			; (mov r8, r8)
    587e:	46bd      	mov	sp, r7
    5880:	bd80      	pop	{r7, pc}
    5882:	46c0      	nop			; (mov r8, r8)
    5884:	2000027c 	.word	0x2000027c

00005888 <SERCOM3_Handler>:
    5888:	b580      	push	{r7, lr}
    588a:	af00      	add	r7, sp, #0
    588c:	4b03      	ldr	r3, [pc, #12]	; (589c <SERCOM3_Handler+0x14>)
    588e:	68db      	ldr	r3, [r3, #12]
    5890:	2003      	movs	r0, #3
    5892:	4798      	blx	r3
    5894:	46c0      	nop			; (mov r8, r8)
    5896:	46bd      	mov	sp, r7
    5898:	bd80      	pop	{r7, pc}
    589a:	46c0      	nop			; (mov r8, r8)
    589c:	2000027c 	.word	0x2000027c

000058a0 <SERCOM4_Handler>:
    58a0:	b580      	push	{r7, lr}
    58a2:	af00      	add	r7, sp, #0
    58a4:	4b03      	ldr	r3, [pc, #12]	; (58b4 <SERCOM4_Handler+0x14>)
    58a6:	691b      	ldr	r3, [r3, #16]
    58a8:	2004      	movs	r0, #4
    58aa:	4798      	blx	r3
    58ac:	46c0      	nop			; (mov r8, r8)
    58ae:	46bd      	mov	sp, r7
    58b0:	bd80      	pop	{r7, pc}
    58b2:	46c0      	nop			; (mov r8, r8)
    58b4:	2000027c 	.word	0x2000027c

000058b8 <SERCOM5_Handler>:
    58b8:	b580      	push	{r7, lr}
    58ba:	af00      	add	r7, sp, #0
    58bc:	4b03      	ldr	r3, [pc, #12]	; (58cc <SERCOM5_Handler+0x14>)
    58be:	695b      	ldr	r3, [r3, #20]
    58c0:	2005      	movs	r0, #5
    58c2:	4798      	blx	r3
    58c4:	46c0      	nop			; (mov r8, r8)
    58c6:	46bd      	mov	sp, r7
    58c8:	bd80      	pop	{r7, pc}
    58ca:	46c0      	nop			; (mov r8, r8)
    58cc:	2000027c 	.word	0x2000027c

000058d0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    58d0:	b580      	push	{r7, lr}
    58d2:	b082      	sub	sp, #8
    58d4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    58d6:	4b10      	ldr	r3, [pc, #64]	; (5918 <cpu_irq_enter_critical+0x48>)
    58d8:	681b      	ldr	r3, [r3, #0]
    58da:	2b00      	cmp	r3, #0
    58dc:	d112      	bne.n	5904 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    58de:	f3ef 8310 	mrs	r3, PRIMASK
    58e2:	607b      	str	r3, [r7, #4]
  return(result);
    58e4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    58e6:	2b00      	cmp	r3, #0
    58e8:	d109      	bne.n	58fe <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    58ea:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    58ec:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    58f0:	4b0a      	ldr	r3, [pc, #40]	; (591c <cpu_irq_enter_critical+0x4c>)
    58f2:	2200      	movs	r2, #0
    58f4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    58f6:	4b0a      	ldr	r3, [pc, #40]	; (5920 <cpu_irq_enter_critical+0x50>)
    58f8:	2201      	movs	r2, #1
    58fa:	701a      	strb	r2, [r3, #0]
    58fc:	e002      	b.n	5904 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    58fe:	4b08      	ldr	r3, [pc, #32]	; (5920 <cpu_irq_enter_critical+0x50>)
    5900:	2200      	movs	r2, #0
    5902:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5904:	4b04      	ldr	r3, [pc, #16]	; (5918 <cpu_irq_enter_critical+0x48>)
    5906:	681b      	ldr	r3, [r3, #0]
    5908:	1c5a      	adds	r2, r3, #1
    590a:	4b03      	ldr	r3, [pc, #12]	; (5918 <cpu_irq_enter_critical+0x48>)
    590c:	601a      	str	r2, [r3, #0]
}
    590e:	46c0      	nop			; (mov r8, r8)
    5910:	46bd      	mov	sp, r7
    5912:	b002      	add	sp, #8
    5914:	bd80      	pop	{r7, pc}
    5916:	46c0      	nop			; (mov r8, r8)
    5918:	20000294 	.word	0x20000294
    591c:	20000048 	.word	0x20000048
    5920:	20000298 	.word	0x20000298

00005924 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    5924:	b580      	push	{r7, lr}
    5926:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5928:	4b0b      	ldr	r3, [pc, #44]	; (5958 <cpu_irq_leave_critical+0x34>)
    592a:	681b      	ldr	r3, [r3, #0]
    592c:	1e5a      	subs	r2, r3, #1
    592e:	4b0a      	ldr	r3, [pc, #40]	; (5958 <cpu_irq_leave_critical+0x34>)
    5930:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5932:	4b09      	ldr	r3, [pc, #36]	; (5958 <cpu_irq_leave_critical+0x34>)
    5934:	681b      	ldr	r3, [r3, #0]
    5936:	2b00      	cmp	r3, #0
    5938:	d10a      	bne.n	5950 <cpu_irq_leave_critical+0x2c>
    593a:	4b08      	ldr	r3, [pc, #32]	; (595c <cpu_irq_leave_critical+0x38>)
    593c:	781b      	ldrb	r3, [r3, #0]
    593e:	b2db      	uxtb	r3, r3
    5940:	2b00      	cmp	r3, #0
    5942:	d005      	beq.n	5950 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    5944:	4b06      	ldr	r3, [pc, #24]	; (5960 <cpu_irq_leave_critical+0x3c>)
    5946:	2201      	movs	r2, #1
    5948:	701a      	strb	r2, [r3, #0]
    594a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    594e:	b662      	cpsie	i
	}
}
    5950:	46c0      	nop			; (mov r8, r8)
    5952:	46bd      	mov	sp, r7
    5954:	bd80      	pop	{r7, pc}
    5956:	46c0      	nop			; (mov r8, r8)
    5958:	20000294 	.word	0x20000294
    595c:	20000298 	.word	0x20000298
    5960:	20000048 	.word	0x20000048

00005964 <system_pinmux_get_group_from_gpio_pin>:
{
    5964:	b580      	push	{r7, lr}
    5966:	b084      	sub	sp, #16
    5968:	af00      	add	r7, sp, #0
    596a:	0002      	movs	r2, r0
    596c:	1dfb      	adds	r3, r7, #7
    596e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5970:	230f      	movs	r3, #15
    5972:	18fb      	adds	r3, r7, r3
    5974:	1dfa      	adds	r2, r7, #7
    5976:	7812      	ldrb	r2, [r2, #0]
    5978:	09d2      	lsrs	r2, r2, #7
    597a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    597c:	230e      	movs	r3, #14
    597e:	18fb      	adds	r3, r7, r3
    5980:	1dfa      	adds	r2, r7, #7
    5982:	7812      	ldrb	r2, [r2, #0]
    5984:	0952      	lsrs	r2, r2, #5
    5986:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5988:	4b0d      	ldr	r3, [pc, #52]	; (59c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    598a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    598c:	230f      	movs	r3, #15
    598e:	18fb      	adds	r3, r7, r3
    5990:	781b      	ldrb	r3, [r3, #0]
    5992:	2b00      	cmp	r3, #0
    5994:	d10f      	bne.n	59b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5996:	230f      	movs	r3, #15
    5998:	18fb      	adds	r3, r7, r3
    599a:	781b      	ldrb	r3, [r3, #0]
    599c:	009b      	lsls	r3, r3, #2
    599e:	2210      	movs	r2, #16
    59a0:	4694      	mov	ip, r2
    59a2:	44bc      	add	ip, r7
    59a4:	4463      	add	r3, ip
    59a6:	3b08      	subs	r3, #8
    59a8:	681a      	ldr	r2, [r3, #0]
    59aa:	230e      	movs	r3, #14
    59ac:	18fb      	adds	r3, r7, r3
    59ae:	781b      	ldrb	r3, [r3, #0]
    59b0:	01db      	lsls	r3, r3, #7
    59b2:	18d3      	adds	r3, r2, r3
    59b4:	e000      	b.n	59b8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    59b6:	2300      	movs	r3, #0
}
    59b8:	0018      	movs	r0, r3
    59ba:	46bd      	mov	sp, r7
    59bc:	b004      	add	sp, #16
    59be:	bd80      	pop	{r7, pc}
    59c0:	41004400 	.word	0x41004400

000059c4 <port_get_group_from_gpio_pin>:
{
    59c4:	b580      	push	{r7, lr}
    59c6:	b082      	sub	sp, #8
    59c8:	af00      	add	r7, sp, #0
    59ca:	0002      	movs	r2, r0
    59cc:	1dfb      	adds	r3, r7, #7
    59ce:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    59d0:	1dfb      	adds	r3, r7, #7
    59d2:	781b      	ldrb	r3, [r3, #0]
    59d4:	0018      	movs	r0, r3
    59d6:	4b03      	ldr	r3, [pc, #12]	; (59e4 <port_get_group_from_gpio_pin+0x20>)
    59d8:	4798      	blx	r3
    59da:	0003      	movs	r3, r0
}
    59dc:	0018      	movs	r0, r3
    59de:	46bd      	mov	sp, r7
    59e0:	b002      	add	sp, #8
    59e2:	bd80      	pop	{r7, pc}
    59e4:	00005965 	.word	0x00005965

000059e8 <port_get_config_defaults>:
{
    59e8:	b580      	push	{r7, lr}
    59ea:	b082      	sub	sp, #8
    59ec:	af00      	add	r7, sp, #0
    59ee:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	2200      	movs	r2, #0
    59f4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    59f6:	687b      	ldr	r3, [r7, #4]
    59f8:	2201      	movs	r2, #1
    59fa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    59fc:	687b      	ldr	r3, [r7, #4]
    59fe:	2200      	movs	r2, #0
    5a00:	709a      	strb	r2, [r3, #2]
}
    5a02:	46c0      	nop			; (mov r8, r8)
    5a04:	46bd      	mov	sp, r7
    5a06:	b002      	add	sp, #8
    5a08:	bd80      	pop	{r7, pc}
	...

00005a0c <port_pin_set_output_level>:
{
    5a0c:	b580      	push	{r7, lr}
    5a0e:	b084      	sub	sp, #16
    5a10:	af00      	add	r7, sp, #0
    5a12:	0002      	movs	r2, r0
    5a14:	1dfb      	adds	r3, r7, #7
    5a16:	701a      	strb	r2, [r3, #0]
    5a18:	1dbb      	adds	r3, r7, #6
    5a1a:	1c0a      	adds	r2, r1, #0
    5a1c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    5a1e:	1dfb      	adds	r3, r7, #7
    5a20:	781b      	ldrb	r3, [r3, #0]
    5a22:	0018      	movs	r0, r3
    5a24:	4b0d      	ldr	r3, [pc, #52]	; (5a5c <port_pin_set_output_level+0x50>)
    5a26:	4798      	blx	r3
    5a28:	0003      	movs	r3, r0
    5a2a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5a2c:	1dfb      	adds	r3, r7, #7
    5a2e:	781b      	ldrb	r3, [r3, #0]
    5a30:	221f      	movs	r2, #31
    5a32:	4013      	ands	r3, r2
    5a34:	2201      	movs	r2, #1
    5a36:	409a      	lsls	r2, r3
    5a38:	0013      	movs	r3, r2
    5a3a:	60bb      	str	r3, [r7, #8]
	if (level) {
    5a3c:	1dbb      	adds	r3, r7, #6
    5a3e:	781b      	ldrb	r3, [r3, #0]
    5a40:	2b00      	cmp	r3, #0
    5a42:	d003      	beq.n	5a4c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    5a44:	68fb      	ldr	r3, [r7, #12]
    5a46:	68ba      	ldr	r2, [r7, #8]
    5a48:	619a      	str	r2, [r3, #24]
}
    5a4a:	e002      	b.n	5a52 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    5a4c:	68fb      	ldr	r3, [r7, #12]
    5a4e:	68ba      	ldr	r2, [r7, #8]
    5a50:	615a      	str	r2, [r3, #20]
}
    5a52:	46c0      	nop			; (mov r8, r8)
    5a54:	46bd      	mov	sp, r7
    5a56:	b004      	add	sp, #16
    5a58:	bd80      	pop	{r7, pc}
    5a5a:	46c0      	nop			; (mov r8, r8)
    5a5c:	000059c5 	.word	0x000059c5

00005a60 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    5a60:	b580      	push	{r7, lr}
    5a62:	b082      	sub	sp, #8
    5a64:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    5a66:	1d3b      	adds	r3, r7, #4
    5a68:	0018      	movs	r0, r3
    5a6a:	4b0e      	ldr	r3, [pc, #56]	; (5aa4 <system_board_init+0x44>)
    5a6c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    5a6e:	1d3b      	adds	r3, r7, #4
    5a70:	2201      	movs	r2, #1
    5a72:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    5a74:	1d3b      	adds	r3, r7, #4
    5a76:	0019      	movs	r1, r3
    5a78:	2017      	movs	r0, #23
    5a7a:	4b0b      	ldr	r3, [pc, #44]	; (5aa8 <system_board_init+0x48>)
    5a7c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    5a7e:	2101      	movs	r1, #1
    5a80:	2017      	movs	r0, #23
    5a82:	4b0a      	ldr	r3, [pc, #40]	; (5aac <system_board_init+0x4c>)
    5a84:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    5a86:	1d3b      	adds	r3, r7, #4
    5a88:	2200      	movs	r2, #0
    5a8a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    5a8c:	1d3b      	adds	r3, r7, #4
    5a8e:	2201      	movs	r2, #1
    5a90:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    5a92:	1d3b      	adds	r3, r7, #4
    5a94:	0019      	movs	r1, r3
    5a96:	2037      	movs	r0, #55	; 0x37
    5a98:	4b03      	ldr	r3, [pc, #12]	; (5aa8 <system_board_init+0x48>)
    5a9a:	4798      	blx	r3
}
    5a9c:	46c0      	nop			; (mov r8, r8)
    5a9e:	46bd      	mov	sp, r7
    5aa0:	b002      	add	sp, #8
    5aa2:	bd80      	pop	{r7, pc}
    5aa4:	000059e9 	.word	0x000059e9
    5aa8:	00005ad9 	.word	0x00005ad9
    5aac:	00005a0d 	.word	0x00005a0d

00005ab0 <system_pinmux_get_config_defaults>:
{
    5ab0:	b580      	push	{r7, lr}
    5ab2:	b082      	sub	sp, #8
    5ab4:	af00      	add	r7, sp, #0
    5ab6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	2280      	movs	r2, #128	; 0x80
    5abc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5abe:	687b      	ldr	r3, [r7, #4]
    5ac0:	2200      	movs	r2, #0
    5ac2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5ac4:	687b      	ldr	r3, [r7, #4]
    5ac6:	2201      	movs	r2, #1
    5ac8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5aca:	687b      	ldr	r3, [r7, #4]
    5acc:	2200      	movs	r2, #0
    5ace:	70da      	strb	r2, [r3, #3]
}
    5ad0:	46c0      	nop			; (mov r8, r8)
    5ad2:	46bd      	mov	sp, r7
    5ad4:	b002      	add	sp, #8
    5ad6:	bd80      	pop	{r7, pc}

00005ad8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    5ad8:	b580      	push	{r7, lr}
    5ada:	b084      	sub	sp, #16
    5adc:	af00      	add	r7, sp, #0
    5ade:	0002      	movs	r2, r0
    5ae0:	6039      	str	r1, [r7, #0]
    5ae2:	1dfb      	adds	r3, r7, #7
    5ae4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    5ae6:	230c      	movs	r3, #12
    5ae8:	18fb      	adds	r3, r7, r3
    5aea:	0018      	movs	r0, r3
    5aec:	4b10      	ldr	r3, [pc, #64]	; (5b30 <port_pin_set_config+0x58>)
    5aee:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    5af0:	230c      	movs	r3, #12
    5af2:	18fb      	adds	r3, r7, r3
    5af4:	2280      	movs	r2, #128	; 0x80
    5af6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    5af8:	683b      	ldr	r3, [r7, #0]
    5afa:	781a      	ldrb	r2, [r3, #0]
    5afc:	230c      	movs	r3, #12
    5afe:	18fb      	adds	r3, r7, r3
    5b00:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    5b02:	683b      	ldr	r3, [r7, #0]
    5b04:	785a      	ldrb	r2, [r3, #1]
    5b06:	230c      	movs	r3, #12
    5b08:	18fb      	adds	r3, r7, r3
    5b0a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    5b0c:	683b      	ldr	r3, [r7, #0]
    5b0e:	789a      	ldrb	r2, [r3, #2]
    5b10:	230c      	movs	r3, #12
    5b12:	18fb      	adds	r3, r7, r3
    5b14:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    5b16:	230c      	movs	r3, #12
    5b18:	18fa      	adds	r2, r7, r3
    5b1a:	1dfb      	adds	r3, r7, #7
    5b1c:	781b      	ldrb	r3, [r3, #0]
    5b1e:	0011      	movs	r1, r2
    5b20:	0018      	movs	r0, r3
    5b22:	4b04      	ldr	r3, [pc, #16]	; (5b34 <port_pin_set_config+0x5c>)
    5b24:	4798      	blx	r3
}
    5b26:	46c0      	nop			; (mov r8, r8)
    5b28:	46bd      	mov	sp, r7
    5b2a:	b004      	add	sp, #16
    5b2c:	bd80      	pop	{r7, pc}
    5b2e:	46c0      	nop			; (mov r8, r8)
    5b30:	00005ab1 	.word	0x00005ab1
    5b34:	00006a61 	.word	0x00006a61

00005b38 <system_gclk_gen_get_config_defaults>:
{
    5b38:	b580      	push	{r7, lr}
    5b3a:	b082      	sub	sp, #8
    5b3c:	af00      	add	r7, sp, #0
    5b3e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    5b40:	687b      	ldr	r3, [r7, #4]
    5b42:	2201      	movs	r2, #1
    5b44:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5b46:	687b      	ldr	r3, [r7, #4]
    5b48:	2200      	movs	r2, #0
    5b4a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5b4c:	687b      	ldr	r3, [r7, #4]
    5b4e:	2206      	movs	r2, #6
    5b50:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    5b52:	687b      	ldr	r3, [r7, #4]
    5b54:	2200      	movs	r2, #0
    5b56:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5b58:	687b      	ldr	r3, [r7, #4]
    5b5a:	2200      	movs	r2, #0
    5b5c:	725a      	strb	r2, [r3, #9]
}
    5b5e:	46c0      	nop			; (mov r8, r8)
    5b60:	46bd      	mov	sp, r7
    5b62:	b002      	add	sp, #8
    5b64:	bd80      	pop	{r7, pc}

00005b66 <system_gclk_chan_get_config_defaults>:
{
    5b66:	b580      	push	{r7, lr}
    5b68:	b082      	sub	sp, #8
    5b6a:	af00      	add	r7, sp, #0
    5b6c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5b6e:	687b      	ldr	r3, [r7, #4]
    5b70:	2200      	movs	r2, #0
    5b72:	701a      	strb	r2, [r3, #0]
}
    5b74:	46c0      	nop			; (mov r8, r8)
    5b76:	46bd      	mov	sp, r7
    5b78:	b002      	add	sp, #8
    5b7a:	bd80      	pop	{r7, pc}

00005b7c <system_clock_source_xosc32k_get_config_defaults>:
{
    5b7c:	b580      	push	{r7, lr}
    5b7e:	b082      	sub	sp, #8
    5b80:	af00      	add	r7, sp, #0
    5b82:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5b84:	687b      	ldr	r3, [r7, #4]
    5b86:	2200      	movs	r2, #0
    5b88:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5b8a:	687b      	ldr	r3, [r7, #4]
    5b8c:	2204      	movs	r2, #4
    5b8e:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    5b90:	687b      	ldr	r3, [r7, #4]
    5b92:	2200      	movs	r2, #0
    5b94:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5b96:	687b      	ldr	r3, [r7, #4]
    5b98:	2280      	movs	r2, #128	; 0x80
    5b9a:	0212      	lsls	r2, r2, #8
    5b9c:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    5b9e:	687b      	ldr	r3, [r7, #4]
    5ba0:	2200      	movs	r2, #0
    5ba2:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5ba4:	687b      	ldr	r3, [r7, #4]
    5ba6:	2201      	movs	r2, #1
    5ba8:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5baa:	687b      	ldr	r3, [r7, #4]
    5bac:	2200      	movs	r2, #0
    5bae:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    5bb0:	687b      	ldr	r3, [r7, #4]
    5bb2:	2201      	movs	r2, #1
    5bb4:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5bb6:	687b      	ldr	r3, [r7, #4]
    5bb8:	2200      	movs	r2, #0
    5bba:	739a      	strb	r2, [r3, #14]
}
    5bbc:	46c0      	nop			; (mov r8, r8)
    5bbe:	46bd      	mov	sp, r7
    5bc0:	b002      	add	sp, #8
    5bc2:	bd80      	pop	{r7, pc}

00005bc4 <system_clock_source_osc8m_get_config_defaults>:
{
    5bc4:	b580      	push	{r7, lr}
    5bc6:	b082      	sub	sp, #8
    5bc8:	af00      	add	r7, sp, #0
    5bca:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5bcc:	687b      	ldr	r3, [r7, #4]
    5bce:	2203      	movs	r2, #3
    5bd0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5bd2:	687b      	ldr	r3, [r7, #4]
    5bd4:	2200      	movs	r2, #0
    5bd6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5bd8:	687b      	ldr	r3, [r7, #4]
    5bda:	2201      	movs	r2, #1
    5bdc:	709a      	strb	r2, [r3, #2]
}
    5bde:	46c0      	nop			; (mov r8, r8)
    5be0:	46bd      	mov	sp, r7
    5be2:	b002      	add	sp, #8
    5be4:	bd80      	pop	{r7, pc}

00005be6 <system_clock_source_dfll_get_config_defaults>:
{
    5be6:	b580      	push	{r7, lr}
    5be8:	b082      	sub	sp, #8
    5bea:	af00      	add	r7, sp, #0
    5bec:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5bee:	687b      	ldr	r3, [r7, #4]
    5bf0:	2200      	movs	r2, #0
    5bf2:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5bf4:	687b      	ldr	r3, [r7, #4]
    5bf6:	2200      	movs	r2, #0
    5bf8:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5bfa:	687b      	ldr	r3, [r7, #4]
    5bfc:	2200      	movs	r2, #0
    5bfe:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5c00:	687b      	ldr	r3, [r7, #4]
    5c02:	2200      	movs	r2, #0
    5c04:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5c06:	687b      	ldr	r3, [r7, #4]
    5c08:	2200      	movs	r2, #0
    5c0a:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5c0c:	687b      	ldr	r3, [r7, #4]
    5c0e:	2201      	movs	r2, #1
    5c10:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5c12:	687b      	ldr	r3, [r7, #4]
    5c14:	2207      	movs	r2, #7
    5c16:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5c18:	687b      	ldr	r3, [r7, #4]
    5c1a:	223f      	movs	r2, #63	; 0x3f
    5c1c:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    5c1e:	687b      	ldr	r3, [r7, #4]
    5c20:	2201      	movs	r2, #1
    5c22:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5c24:	687b      	ldr	r3, [r7, #4]
    5c26:	2201      	movs	r2, #1
    5c28:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5c2a:	687b      	ldr	r3, [r7, #4]
    5c2c:	2206      	movs	r2, #6
    5c2e:	821a      	strh	r2, [r3, #16]
}
    5c30:	46c0      	nop			; (mov r8, r8)
    5c32:	46bd      	mov	sp, r7
    5c34:	b002      	add	sp, #8
    5c36:	bd80      	pop	{r7, pc}

00005c38 <system_cpu_clock_set_divider>:
{
    5c38:	b580      	push	{r7, lr}
    5c3a:	b082      	sub	sp, #8
    5c3c:	af00      	add	r7, sp, #0
    5c3e:	0002      	movs	r2, r0
    5c40:	1dfb      	adds	r3, r7, #7
    5c42:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    5c44:	4a03      	ldr	r2, [pc, #12]	; (5c54 <system_cpu_clock_set_divider+0x1c>)
    5c46:	1dfb      	adds	r3, r7, #7
    5c48:	781b      	ldrb	r3, [r3, #0]
    5c4a:	7213      	strb	r3, [r2, #8]
}
    5c4c:	46c0      	nop			; (mov r8, r8)
    5c4e:	46bd      	mov	sp, r7
    5c50:	b002      	add	sp, #8
    5c52:	bd80      	pop	{r7, pc}
    5c54:	40000400 	.word	0x40000400

00005c58 <system_apb_clock_set_divider>:
{
    5c58:	b580      	push	{r7, lr}
    5c5a:	b082      	sub	sp, #8
    5c5c:	af00      	add	r7, sp, #0
    5c5e:	0002      	movs	r2, r0
    5c60:	1dfb      	adds	r3, r7, #7
    5c62:	701a      	strb	r2, [r3, #0]
    5c64:	1dbb      	adds	r3, r7, #6
    5c66:	1c0a      	adds	r2, r1, #0
    5c68:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5c6a:	1dfb      	adds	r3, r7, #7
    5c6c:	781b      	ldrb	r3, [r3, #0]
    5c6e:	2b01      	cmp	r3, #1
    5c70:	d008      	beq.n	5c84 <system_apb_clock_set_divider+0x2c>
    5c72:	2b02      	cmp	r3, #2
    5c74:	d00b      	beq.n	5c8e <system_apb_clock_set_divider+0x36>
    5c76:	2b00      	cmp	r3, #0
    5c78:	d10e      	bne.n	5c98 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    5c7a:	4a0b      	ldr	r2, [pc, #44]	; (5ca8 <system_apb_clock_set_divider+0x50>)
    5c7c:	1dbb      	adds	r3, r7, #6
    5c7e:	781b      	ldrb	r3, [r3, #0]
    5c80:	7253      	strb	r3, [r2, #9]
			break;
    5c82:	e00b      	b.n	5c9c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    5c84:	4a08      	ldr	r2, [pc, #32]	; (5ca8 <system_apb_clock_set_divider+0x50>)
    5c86:	1dbb      	adds	r3, r7, #6
    5c88:	781b      	ldrb	r3, [r3, #0]
    5c8a:	7293      	strb	r3, [r2, #10]
			break;
    5c8c:	e006      	b.n	5c9c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    5c8e:	4a06      	ldr	r2, [pc, #24]	; (5ca8 <system_apb_clock_set_divider+0x50>)
    5c90:	1dbb      	adds	r3, r7, #6
    5c92:	781b      	ldrb	r3, [r3, #0]
    5c94:	72d3      	strb	r3, [r2, #11]
			break;
    5c96:	e001      	b.n	5c9c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    5c98:	2317      	movs	r3, #23
    5c9a:	e000      	b.n	5c9e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    5c9c:	2300      	movs	r3, #0
}
    5c9e:	0018      	movs	r0, r3
    5ca0:	46bd      	mov	sp, r7
    5ca2:	b002      	add	sp, #8
    5ca4:	bd80      	pop	{r7, pc}
    5ca6:	46c0      	nop			; (mov r8, r8)
    5ca8:	40000400 	.word	0x40000400

00005cac <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5cac:	b580      	push	{r7, lr}
    5cae:	b082      	sub	sp, #8
    5cb0:	af00      	add	r7, sp, #0
    5cb2:	0002      	movs	r2, r0
    5cb4:	1dfb      	adds	r3, r7, #7
    5cb6:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5cb8:	4a08      	ldr	r2, [pc, #32]	; (5cdc <system_flash_set_waitstates+0x30>)
    5cba:	1dfb      	adds	r3, r7, #7
    5cbc:	781b      	ldrb	r3, [r3, #0]
    5cbe:	210f      	movs	r1, #15
    5cc0:	400b      	ands	r3, r1
    5cc2:	b2d9      	uxtb	r1, r3
    5cc4:	6853      	ldr	r3, [r2, #4]
    5cc6:	200f      	movs	r0, #15
    5cc8:	4001      	ands	r1, r0
    5cca:	0049      	lsls	r1, r1, #1
    5ccc:	201e      	movs	r0, #30
    5cce:	4383      	bics	r3, r0
    5cd0:	430b      	orrs	r3, r1
    5cd2:	6053      	str	r3, [r2, #4]
}
    5cd4:	46c0      	nop			; (mov r8, r8)
    5cd6:	46bd      	mov	sp, r7
    5cd8:	b002      	add	sp, #8
    5cda:	bd80      	pop	{r7, pc}
    5cdc:	41004000 	.word	0x41004000

00005ce0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5ce0:	b580      	push	{r7, lr}
    5ce2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5ce4:	46c0      	nop			; (mov r8, r8)
    5ce6:	4b04      	ldr	r3, [pc, #16]	; (5cf8 <_system_dfll_wait_for_sync+0x18>)
    5ce8:	68db      	ldr	r3, [r3, #12]
    5cea:	2210      	movs	r2, #16
    5cec:	4013      	ands	r3, r2
    5cee:	d0fa      	beq.n	5ce6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5cf0:	46c0      	nop			; (mov r8, r8)
    5cf2:	46bd      	mov	sp, r7
    5cf4:	bd80      	pop	{r7, pc}
    5cf6:	46c0      	nop			; (mov r8, r8)
    5cf8:	40000800 	.word	0x40000800

00005cfc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    5cfc:	b580      	push	{r7, lr}
    5cfe:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5d00:	4b0c      	ldr	r3, [pc, #48]	; (5d34 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5d02:	2202      	movs	r2, #2
    5d04:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5d06:	4b0c      	ldr	r3, [pc, #48]	; (5d38 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5d08:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5d0a:	4a0a      	ldr	r2, [pc, #40]	; (5d34 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5d0c:	4b0b      	ldr	r3, [pc, #44]	; (5d3c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5d0e:	689b      	ldr	r3, [r3, #8]
    5d10:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5d12:	4a08      	ldr	r2, [pc, #32]	; (5d34 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5d14:	4b09      	ldr	r3, [pc, #36]	; (5d3c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5d16:	685b      	ldr	r3, [r3, #4]
    5d18:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    5d1a:	4b06      	ldr	r3, [pc, #24]	; (5d34 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5d1c:	2200      	movs	r2, #0
    5d1e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5d20:	4b05      	ldr	r3, [pc, #20]	; (5d38 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5d22:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5d24:	4a03      	ldr	r2, [pc, #12]	; (5d34 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5d26:	4b05      	ldr	r3, [pc, #20]	; (5d3c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5d28:	681b      	ldr	r3, [r3, #0]
    5d2a:	b29b      	uxth	r3, r3
    5d2c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    5d2e:	46c0      	nop			; (mov r8, r8)
    5d30:	46bd      	mov	sp, r7
    5d32:	bd80      	pop	{r7, pc}
    5d34:	40000800 	.word	0x40000800
    5d38:	00005ce1 	.word	0x00005ce1
    5d3c:	2000029c 	.word	0x2000029c

00005d40 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5d40:	b580      	push	{r7, lr}
    5d42:	b082      	sub	sp, #8
    5d44:	af00      	add	r7, sp, #0
    5d46:	0002      	movs	r2, r0
    5d48:	1dfb      	adds	r3, r7, #7
    5d4a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5d4c:	1dfb      	adds	r3, r7, #7
    5d4e:	781b      	ldrb	r3, [r3, #0]
    5d50:	2b08      	cmp	r3, #8
    5d52:	d840      	bhi.n	5dd6 <system_clock_source_get_hz+0x96>
    5d54:	009a      	lsls	r2, r3, #2
    5d56:	4b22      	ldr	r3, [pc, #136]	; (5de0 <system_clock_source_get_hz+0xa0>)
    5d58:	18d3      	adds	r3, r2, r3
    5d5a:	681b      	ldr	r3, [r3, #0]
    5d5c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5d5e:	4b21      	ldr	r3, [pc, #132]	; (5de4 <system_clock_source_get_hz+0xa4>)
    5d60:	691b      	ldr	r3, [r3, #16]
    5d62:	e039      	b.n	5dd8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5d64:	4b20      	ldr	r3, [pc, #128]	; (5de8 <system_clock_source_get_hz+0xa8>)
    5d66:	6a1b      	ldr	r3, [r3, #32]
    5d68:	059b      	lsls	r3, r3, #22
    5d6a:	0f9b      	lsrs	r3, r3, #30
    5d6c:	b2db      	uxtb	r3, r3
    5d6e:	001a      	movs	r2, r3
    5d70:	4b1e      	ldr	r3, [pc, #120]	; (5dec <system_clock_source_get_hz+0xac>)
    5d72:	40d3      	lsrs	r3, r2
    5d74:	e030      	b.n	5dd8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5d76:	2380      	movs	r3, #128	; 0x80
    5d78:	021b      	lsls	r3, r3, #8
    5d7a:	e02d      	b.n	5dd8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5d7c:	2380      	movs	r3, #128	; 0x80
    5d7e:	021b      	lsls	r3, r3, #8
    5d80:	e02a      	b.n	5dd8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5d82:	4b18      	ldr	r3, [pc, #96]	; (5de4 <system_clock_source_get_hz+0xa4>)
    5d84:	695b      	ldr	r3, [r3, #20]
    5d86:	e027      	b.n	5dd8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5d88:	4b16      	ldr	r3, [pc, #88]	; (5de4 <system_clock_source_get_hz+0xa4>)
    5d8a:	681b      	ldr	r3, [r3, #0]
    5d8c:	2202      	movs	r2, #2
    5d8e:	4013      	ands	r3, r2
    5d90:	d101      	bne.n	5d96 <system_clock_source_get_hz+0x56>
			return 0;
    5d92:	2300      	movs	r3, #0
    5d94:	e020      	b.n	5dd8 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5d96:	4b16      	ldr	r3, [pc, #88]	; (5df0 <system_clock_source_get_hz+0xb0>)
    5d98:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    5d9a:	4b12      	ldr	r3, [pc, #72]	; (5de4 <system_clock_source_get_hz+0xa4>)
    5d9c:	681b      	ldr	r3, [r3, #0]
    5d9e:	2204      	movs	r2, #4
    5da0:	4013      	ands	r3, r2
    5da2:	d009      	beq.n	5db8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5da4:	2000      	movs	r0, #0
    5da6:	4b13      	ldr	r3, [pc, #76]	; (5df4 <system_clock_source_get_hz+0xb4>)
    5da8:	4798      	blx	r3
    5daa:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5dac:	4b0d      	ldr	r3, [pc, #52]	; (5de4 <system_clock_source_get_hz+0xa4>)
    5dae:	689b      	ldr	r3, [r3, #8]
    5db0:	041b      	lsls	r3, r3, #16
    5db2:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5db4:	4353      	muls	r3, r2
    5db6:	e00f      	b.n	5dd8 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    5db8:	4b0f      	ldr	r3, [pc, #60]	; (5df8 <system_clock_source_get_hz+0xb8>)
    5dba:	e00d      	b.n	5dd8 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5dbc:	4a0a      	ldr	r2, [pc, #40]	; (5de8 <system_clock_source_get_hz+0xa8>)
    5dbe:	2350      	movs	r3, #80	; 0x50
    5dc0:	5cd3      	ldrb	r3, [r2, r3]
    5dc2:	b2db      	uxtb	r3, r3
    5dc4:	001a      	movs	r2, r3
    5dc6:	2304      	movs	r3, #4
    5dc8:	4013      	ands	r3, r2
    5dca:	d101      	bne.n	5dd0 <system_clock_source_get_hz+0x90>
			return 0;
    5dcc:	2300      	movs	r3, #0
    5dce:	e003      	b.n	5dd8 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    5dd0:	4b04      	ldr	r3, [pc, #16]	; (5de4 <system_clock_source_get_hz+0xa4>)
    5dd2:	68db      	ldr	r3, [r3, #12]
    5dd4:	e000      	b.n	5dd8 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    5dd6:	2300      	movs	r3, #0
	}
}
    5dd8:	0018      	movs	r0, r3
    5dda:	46bd      	mov	sp, r7
    5ddc:	b002      	add	sp, #8
    5dde:	bd80      	pop	{r7, pc}
    5de0:	0000e3d0 	.word	0x0000e3d0
    5de4:	2000029c 	.word	0x2000029c
    5de8:	40000800 	.word	0x40000800
    5dec:	007a1200 	.word	0x007a1200
    5df0:	00005ce1 	.word	0x00005ce1
    5df4:	00006899 	.word	0x00006899
    5df8:	02dc6c00 	.word	0x02dc6c00

00005dfc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5dfc:	b580      	push	{r7, lr}
    5dfe:	b084      	sub	sp, #16
    5e00:	af00      	add	r7, sp, #0
    5e02:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5e04:	4b1a      	ldr	r3, [pc, #104]	; (5e70 <system_clock_source_osc8m_set_config+0x74>)
    5e06:	6a1b      	ldr	r3, [r3, #32]
    5e08:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5e0a:	687b      	ldr	r3, [r7, #4]
    5e0c:	781b      	ldrb	r3, [r3, #0]
    5e0e:	1c1a      	adds	r2, r3, #0
    5e10:	2303      	movs	r3, #3
    5e12:	4013      	ands	r3, r2
    5e14:	b2da      	uxtb	r2, r3
    5e16:	230d      	movs	r3, #13
    5e18:	18fb      	adds	r3, r7, r3
    5e1a:	2103      	movs	r1, #3
    5e1c:	400a      	ands	r2, r1
    5e1e:	0010      	movs	r0, r2
    5e20:	781a      	ldrb	r2, [r3, #0]
    5e22:	2103      	movs	r1, #3
    5e24:	438a      	bics	r2, r1
    5e26:	1c11      	adds	r1, r2, #0
    5e28:	1c02      	adds	r2, r0, #0
    5e2a:	430a      	orrs	r2, r1
    5e2c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5e2e:	687b      	ldr	r3, [r7, #4]
    5e30:	789a      	ldrb	r2, [r3, #2]
    5e32:	230c      	movs	r3, #12
    5e34:	18fb      	adds	r3, r7, r3
    5e36:	01d0      	lsls	r0, r2, #7
    5e38:	781a      	ldrb	r2, [r3, #0]
    5e3a:	217f      	movs	r1, #127	; 0x7f
    5e3c:	400a      	ands	r2, r1
    5e3e:	1c11      	adds	r1, r2, #0
    5e40:	1c02      	adds	r2, r0, #0
    5e42:	430a      	orrs	r2, r1
    5e44:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5e46:	687b      	ldr	r3, [r7, #4]
    5e48:	785a      	ldrb	r2, [r3, #1]
    5e4a:	230c      	movs	r3, #12
    5e4c:	18fb      	adds	r3, r7, r3
    5e4e:	2101      	movs	r1, #1
    5e50:	400a      	ands	r2, r1
    5e52:	0190      	lsls	r0, r2, #6
    5e54:	781a      	ldrb	r2, [r3, #0]
    5e56:	2140      	movs	r1, #64	; 0x40
    5e58:	438a      	bics	r2, r1
    5e5a:	1c11      	adds	r1, r2, #0
    5e5c:	1c02      	adds	r2, r0, #0
    5e5e:	430a      	orrs	r2, r1
    5e60:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    5e62:	4b03      	ldr	r3, [pc, #12]	; (5e70 <system_clock_source_osc8m_set_config+0x74>)
    5e64:	68fa      	ldr	r2, [r7, #12]
    5e66:	621a      	str	r2, [r3, #32]
}
    5e68:	46c0      	nop			; (mov r8, r8)
    5e6a:	46bd      	mov	sp, r7
    5e6c:	b004      	add	sp, #16
    5e6e:	bd80      	pop	{r7, pc}
    5e70:	40000800 	.word	0x40000800

00005e74 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5e74:	b580      	push	{r7, lr}
    5e76:	b084      	sub	sp, #16
    5e78:	af00      	add	r7, sp, #0
    5e7a:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5e7c:	4a43      	ldr	r2, [pc, #268]	; (5f8c <system_clock_source_xosc32k_set_config+0x118>)
    5e7e:	230c      	movs	r3, #12
    5e80:	18fb      	adds	r3, r7, r3
    5e82:	8a92      	ldrh	r2, [r2, #20]
    5e84:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    5e86:	687b      	ldr	r3, [r7, #4]
    5e88:	785b      	ldrb	r3, [r3, #1]
    5e8a:	1c1a      	adds	r2, r3, #0
    5e8c:	2307      	movs	r3, #7
    5e8e:	4013      	ands	r3, r2
    5e90:	b2da      	uxtb	r2, r3
    5e92:	230c      	movs	r3, #12
    5e94:	18fb      	adds	r3, r7, r3
    5e96:	2107      	movs	r1, #7
    5e98:	400a      	ands	r2, r1
    5e9a:	0010      	movs	r0, r2
    5e9c:	785a      	ldrb	r2, [r3, #1]
    5e9e:	2107      	movs	r1, #7
    5ea0:	438a      	bics	r2, r1
    5ea2:	1c11      	adds	r1, r2, #0
    5ea4:	1c02      	adds	r2, r0, #0
    5ea6:	430a      	orrs	r2, r1
    5ea8:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5eaa:	687b      	ldr	r3, [r7, #4]
    5eac:	781b      	ldrb	r3, [r3, #0]
    5eae:	2b00      	cmp	r3, #0
    5eb0:	d106      	bne.n	5ec0 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    5eb2:	230c      	movs	r3, #12
    5eb4:	18fb      	adds	r3, r7, r3
    5eb6:	781a      	ldrb	r2, [r3, #0]
    5eb8:	2104      	movs	r1, #4
    5eba:	430a      	orrs	r2, r1
    5ebc:	701a      	strb	r2, [r3, #0]
    5ebe:	e005      	b.n	5ecc <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    5ec0:	230c      	movs	r3, #12
    5ec2:	18fb      	adds	r3, r7, r3
    5ec4:	781a      	ldrb	r2, [r3, #0]
    5ec6:	2104      	movs	r1, #4
    5ec8:	438a      	bics	r2, r1
    5eca:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5ecc:	687b      	ldr	r3, [r7, #4]
    5ece:	789a      	ldrb	r2, [r3, #2]
    5ed0:	230c      	movs	r3, #12
    5ed2:	18fb      	adds	r3, r7, r3
    5ed4:	2101      	movs	r1, #1
    5ed6:	400a      	ands	r2, r1
    5ed8:	0150      	lsls	r0, r2, #5
    5eda:	781a      	ldrb	r2, [r3, #0]
    5edc:	2120      	movs	r1, #32
    5ede:	438a      	bics	r2, r1
    5ee0:	1c11      	adds	r1, r2, #0
    5ee2:	1c02      	adds	r2, r0, #0
    5ee4:	430a      	orrs	r2, r1
    5ee6:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    5ee8:	687b      	ldr	r3, [r7, #4]
    5eea:	78da      	ldrb	r2, [r3, #3]
    5eec:	230c      	movs	r3, #12
    5eee:	18fb      	adds	r3, r7, r3
    5ef0:	2101      	movs	r1, #1
    5ef2:	400a      	ands	r2, r1
    5ef4:	0110      	lsls	r0, r2, #4
    5ef6:	781a      	ldrb	r2, [r3, #0]
    5ef8:	2110      	movs	r1, #16
    5efa:	438a      	bics	r2, r1
    5efc:	1c11      	adds	r1, r2, #0
    5efe:	1c02      	adds	r2, r0, #0
    5f00:	430a      	orrs	r2, r1
    5f02:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    5f04:	687b      	ldr	r3, [r7, #4]
    5f06:	791a      	ldrb	r2, [r3, #4]
    5f08:	230c      	movs	r3, #12
    5f0a:	18fb      	adds	r3, r7, r3
    5f0c:	2101      	movs	r1, #1
    5f0e:	400a      	ands	r2, r1
    5f10:	00d0      	lsls	r0, r2, #3
    5f12:	781a      	ldrb	r2, [r3, #0]
    5f14:	2108      	movs	r1, #8
    5f16:	438a      	bics	r2, r1
    5f18:	1c11      	adds	r1, r2, #0
    5f1a:	1c02      	adds	r2, r0, #0
    5f1c:	430a      	orrs	r2, r1
    5f1e:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	7b5a      	ldrb	r2, [r3, #13]
    5f24:	230c      	movs	r3, #12
    5f26:	18fb      	adds	r3, r7, r3
    5f28:	01d0      	lsls	r0, r2, #7
    5f2a:	781a      	ldrb	r2, [r3, #0]
    5f2c:	217f      	movs	r1, #127	; 0x7f
    5f2e:	400a      	ands	r2, r1
    5f30:	1c11      	adds	r1, r2, #0
    5f32:	1c02      	adds	r2, r0, #0
    5f34:	430a      	orrs	r2, r1
    5f36:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	7b1a      	ldrb	r2, [r3, #12]
    5f3c:	230c      	movs	r3, #12
    5f3e:	18fb      	adds	r3, r7, r3
    5f40:	2101      	movs	r1, #1
    5f42:	400a      	ands	r2, r1
    5f44:	0190      	lsls	r0, r2, #6
    5f46:	781a      	ldrb	r2, [r3, #0]
    5f48:	2140      	movs	r1, #64	; 0x40
    5f4a:	438a      	bics	r2, r1
    5f4c:	1c11      	adds	r1, r2, #0
    5f4e:	1c02      	adds	r2, r0, #0
    5f50:	430a      	orrs	r2, r1
    5f52:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    5f54:	687b      	ldr	r3, [r7, #4]
    5f56:	7b9a      	ldrb	r2, [r3, #14]
    5f58:	230c      	movs	r3, #12
    5f5a:	18fb      	adds	r3, r7, r3
    5f5c:	2101      	movs	r1, #1
    5f5e:	400a      	ands	r2, r1
    5f60:	0110      	lsls	r0, r2, #4
    5f62:	785a      	ldrb	r2, [r3, #1]
    5f64:	2110      	movs	r1, #16
    5f66:	438a      	bics	r2, r1
    5f68:	1c11      	adds	r1, r2, #0
    5f6a:	1c02      	adds	r2, r0, #0
    5f6c:	430a      	orrs	r2, r1
    5f6e:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	689a      	ldr	r2, [r3, #8]
    5f74:	4b06      	ldr	r3, [pc, #24]	; (5f90 <system_clock_source_xosc32k_set_config+0x11c>)
    5f76:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    5f78:	4a04      	ldr	r2, [pc, #16]	; (5f8c <system_clock_source_xosc32k_set_config+0x118>)
    5f7a:	230c      	movs	r3, #12
    5f7c:	18fb      	adds	r3, r7, r3
    5f7e:	881b      	ldrh	r3, [r3, #0]
    5f80:	8293      	strh	r3, [r2, #20]
}
    5f82:	46c0      	nop			; (mov r8, r8)
    5f84:	46bd      	mov	sp, r7
    5f86:	b004      	add	sp, #16
    5f88:	bd80      	pop	{r7, pc}
    5f8a:	46c0      	nop			; (mov r8, r8)
    5f8c:	40000800 	.word	0x40000800
    5f90:	2000029c 	.word	0x2000029c

00005f94 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5f94:	b580      	push	{r7, lr}
    5f96:	b082      	sub	sp, #8
    5f98:	af00      	add	r7, sp, #0
    5f9a:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5f9c:	687b      	ldr	r3, [r7, #4]
    5f9e:	7a1b      	ldrb	r3, [r3, #8]
    5fa0:	029b      	lsls	r3, r3, #10
    5fa2:	041b      	lsls	r3, r3, #16
    5fa4:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5fa6:	687b      	ldr	r3, [r7, #4]
    5fa8:	895b      	ldrh	r3, [r3, #10]
    5faa:	059b      	lsls	r3, r3, #22
    5fac:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5fae:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    5fb0:	4b2a      	ldr	r3, [pc, #168]	; (605c <system_clock_source_dfll_set_config+0xc8>)
    5fb2:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5fb4:	687b      	ldr	r3, [r7, #4]
    5fb6:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    5fb8:	687b      	ldr	r3, [r7, #4]
    5fba:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    5fbc:	4313      	orrs	r3, r2
    5fbe:	b2db      	uxtb	r3, r3
    5fc0:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    5fc2:	687b      	ldr	r3, [r7, #4]
    5fc4:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    5fc6:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    5fc8:	687a      	ldr	r2, [r7, #4]
    5fca:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    5fcc:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5fce:	687b      	ldr	r3, [r7, #4]
    5fd0:	785b      	ldrb	r3, [r3, #1]
    5fd2:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    5fd4:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    5fd6:	4b21      	ldr	r3, [pc, #132]	; (605c <system_clock_source_dfll_set_config+0xc8>)
    5fd8:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5fda:	687b      	ldr	r3, [r7, #4]
    5fdc:	781b      	ldrb	r3, [r3, #0]
    5fde:	2b04      	cmp	r3, #4
    5fe0:	d116      	bne.n	6010 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5fe2:	687b      	ldr	r3, [r7, #4]
    5fe4:	7b1b      	ldrb	r3, [r3, #12]
    5fe6:	069b      	lsls	r3, r3, #26
    5fe8:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5fea:	687b      	ldr	r3, [r7, #4]
    5fec:	89db      	ldrh	r3, [r3, #14]
    5fee:	041b      	lsls	r3, r3, #16
    5ff0:	0019      	movs	r1, r3
    5ff2:	4b1b      	ldr	r3, [pc, #108]	; (6060 <system_clock_source_dfll_set_config+0xcc>)
    5ff4:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5ff6:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5ff8:	687a      	ldr	r2, [r7, #4]
    5ffa:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5ffc:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    5ffe:	4b17      	ldr	r3, [pc, #92]	; (605c <system_clock_source_dfll_set_config+0xc8>)
    6000:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    6002:	4b16      	ldr	r3, [pc, #88]	; (605c <system_clock_source_dfll_set_config+0xc8>)
    6004:	681b      	ldr	r3, [r3, #0]
    6006:	687a      	ldr	r2, [r7, #4]
    6008:	7812      	ldrb	r2, [r2, #0]
    600a:	431a      	orrs	r2, r3
    600c:	4b13      	ldr	r3, [pc, #76]	; (605c <system_clock_source_dfll_set_config+0xc8>)
    600e:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	781b      	ldrb	r3, [r3, #0]
    6014:	2b20      	cmp	r3, #32
    6016:	d11c      	bne.n	6052 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	7b1b      	ldrb	r3, [r3, #12]
    601c:	069b      	lsls	r3, r3, #26
    601e:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	89db      	ldrh	r3, [r3, #14]
    6024:	041b      	lsls	r3, r3, #16
    6026:	0019      	movs	r1, r3
    6028:	4b0d      	ldr	r3, [pc, #52]	; (6060 <system_clock_source_dfll_set_config+0xcc>)
    602a:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    602c:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    602e:	687a      	ldr	r2, [r7, #4]
    6030:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6032:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    6034:	4b09      	ldr	r3, [pc, #36]	; (605c <system_clock_source_dfll_set_config+0xc8>)
    6036:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    6038:	4b08      	ldr	r3, [pc, #32]	; (605c <system_clock_source_dfll_set_config+0xc8>)
    603a:	681b      	ldr	r3, [r3, #0]
    603c:	687a      	ldr	r2, [r7, #4]
    603e:	7812      	ldrb	r2, [r2, #0]
    6040:	2104      	movs	r1, #4
    6042:	430a      	orrs	r2, r1
    6044:	b2d2      	uxtb	r2, r2
    6046:	4313      	orrs	r3, r2
    6048:	2280      	movs	r2, #128	; 0x80
    604a:	00d2      	lsls	r2, r2, #3
    604c:	431a      	orrs	r2, r3
    604e:	4b03      	ldr	r3, [pc, #12]	; (605c <system_clock_source_dfll_set_config+0xc8>)
    6050:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    6052:	46c0      	nop			; (mov r8, r8)
    6054:	46bd      	mov	sp, r7
    6056:	b002      	add	sp, #8
    6058:	bd80      	pop	{r7, pc}
    605a:	46c0      	nop			; (mov r8, r8)
    605c:	2000029c 	.word	0x2000029c
    6060:	03ff0000 	.word	0x03ff0000

00006064 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    6064:	b580      	push	{r7, lr}
    6066:	b082      	sub	sp, #8
    6068:	af00      	add	r7, sp, #0
    606a:	0002      	movs	r2, r0
    606c:	1dfb      	adds	r3, r7, #7
    606e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6070:	1dfb      	adds	r3, r7, #7
    6072:	781b      	ldrb	r3, [r3, #0]
    6074:	2b08      	cmp	r3, #8
    6076:	d83b      	bhi.n	60f0 <system_clock_source_enable+0x8c>
    6078:	009a      	lsls	r2, r3, #2
    607a:	4b21      	ldr	r3, [pc, #132]	; (6100 <system_clock_source_enable+0x9c>)
    607c:	18d3      	adds	r3, r2, r3
    607e:	681b      	ldr	r3, [r3, #0]
    6080:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    6082:	4b20      	ldr	r3, [pc, #128]	; (6104 <system_clock_source_enable+0xa0>)
    6084:	4a1f      	ldr	r2, [pc, #124]	; (6104 <system_clock_source_enable+0xa0>)
    6086:	6a12      	ldr	r2, [r2, #32]
    6088:	2102      	movs	r1, #2
    608a:	430a      	orrs	r2, r1
    608c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    608e:	2300      	movs	r3, #0
    6090:	e031      	b.n	60f6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    6092:	4b1c      	ldr	r3, [pc, #112]	; (6104 <system_clock_source_enable+0xa0>)
    6094:	4a1b      	ldr	r2, [pc, #108]	; (6104 <system_clock_source_enable+0xa0>)
    6096:	6992      	ldr	r2, [r2, #24]
    6098:	2102      	movs	r1, #2
    609a:	430a      	orrs	r2, r1
    609c:	619a      	str	r2, [r3, #24]
		break;
    609e:	e029      	b.n	60f4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    60a0:	4a18      	ldr	r2, [pc, #96]	; (6104 <system_clock_source_enable+0xa0>)
    60a2:	4b18      	ldr	r3, [pc, #96]	; (6104 <system_clock_source_enable+0xa0>)
    60a4:	8a1b      	ldrh	r3, [r3, #16]
    60a6:	b29b      	uxth	r3, r3
    60a8:	2102      	movs	r1, #2
    60aa:	430b      	orrs	r3, r1
    60ac:	b29b      	uxth	r3, r3
    60ae:	8213      	strh	r3, [r2, #16]
		break;
    60b0:	e020      	b.n	60f4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    60b2:	4a14      	ldr	r2, [pc, #80]	; (6104 <system_clock_source_enable+0xa0>)
    60b4:	4b13      	ldr	r3, [pc, #76]	; (6104 <system_clock_source_enable+0xa0>)
    60b6:	8a9b      	ldrh	r3, [r3, #20]
    60b8:	b29b      	uxth	r3, r3
    60ba:	2102      	movs	r1, #2
    60bc:	430b      	orrs	r3, r1
    60be:	b29b      	uxth	r3, r3
    60c0:	8293      	strh	r3, [r2, #20]
		break;
    60c2:	e017      	b.n	60f4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    60c4:	4b10      	ldr	r3, [pc, #64]	; (6108 <system_clock_source_enable+0xa4>)
    60c6:	681b      	ldr	r3, [r3, #0]
    60c8:	2202      	movs	r2, #2
    60ca:	431a      	orrs	r2, r3
    60cc:	4b0e      	ldr	r3, [pc, #56]	; (6108 <system_clock_source_enable+0xa4>)
    60ce:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    60d0:	4b0e      	ldr	r3, [pc, #56]	; (610c <system_clock_source_enable+0xa8>)
    60d2:	4798      	blx	r3
		break;
    60d4:	e00e      	b.n	60f4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    60d6:	4a0b      	ldr	r2, [pc, #44]	; (6104 <system_clock_source_enable+0xa0>)
    60d8:	490a      	ldr	r1, [pc, #40]	; (6104 <system_clock_source_enable+0xa0>)
    60da:	2344      	movs	r3, #68	; 0x44
    60dc:	5ccb      	ldrb	r3, [r1, r3]
    60de:	b2db      	uxtb	r3, r3
    60e0:	2102      	movs	r1, #2
    60e2:	430b      	orrs	r3, r1
    60e4:	b2d9      	uxtb	r1, r3
    60e6:	2344      	movs	r3, #68	; 0x44
    60e8:	54d1      	strb	r1, [r2, r3]
		break;
    60ea:	e003      	b.n	60f4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    60ec:	2300      	movs	r3, #0
    60ee:	e002      	b.n	60f6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    60f0:	2317      	movs	r3, #23
    60f2:	e000      	b.n	60f6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    60f4:	2300      	movs	r3, #0
}
    60f6:	0018      	movs	r0, r3
    60f8:	46bd      	mov	sp, r7
    60fa:	b002      	add	sp, #8
    60fc:	bd80      	pop	{r7, pc}
    60fe:	46c0      	nop			; (mov r8, r8)
    6100:	0000e3f4 	.word	0x0000e3f4
    6104:	40000800 	.word	0x40000800
    6108:	2000029c 	.word	0x2000029c
    610c:	00005cfd 	.word	0x00005cfd

00006110 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    6110:	b580      	push	{r7, lr}
    6112:	b084      	sub	sp, #16
    6114:	af00      	add	r7, sp, #0
    6116:	0002      	movs	r2, r0
    6118:	1dfb      	adds	r3, r7, #7
    611a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    611c:	2300      	movs	r3, #0
    611e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    6120:	1dfb      	adds	r3, r7, #7
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	2b08      	cmp	r3, #8
    6126:	d821      	bhi.n	616c <system_clock_source_is_ready+0x5c>
    6128:	009a      	lsls	r2, r3, #2
    612a:	4b18      	ldr	r3, [pc, #96]	; (618c <system_clock_source_is_ready+0x7c>)
    612c:	18d3      	adds	r3, r2, r3
    612e:	681b      	ldr	r3, [r3, #0]
    6130:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    6132:	2308      	movs	r3, #8
    6134:	60fb      	str	r3, [r7, #12]
		break;
    6136:	e01b      	b.n	6170 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    6138:	2304      	movs	r3, #4
    613a:	60fb      	str	r3, [r7, #12]
		break;
    613c:	e018      	b.n	6170 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    613e:	2301      	movs	r3, #1
    6140:	60fb      	str	r3, [r7, #12]
		break;
    6142:	e015      	b.n	6170 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    6144:	2302      	movs	r3, #2
    6146:	60fb      	str	r3, [r7, #12]
		break;
    6148:	e012      	b.n	6170 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    614a:	23d0      	movs	r3, #208	; 0xd0
    614c:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    614e:	e00f      	b.n	6170 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    6150:	4a0f      	ldr	r2, [pc, #60]	; (6190 <system_clock_source_is_ready+0x80>)
    6152:	2350      	movs	r3, #80	; 0x50
    6154:	5cd3      	ldrb	r3, [r2, r3]
    6156:	b2db      	uxtb	r3, r3
    6158:	001a      	movs	r2, r3
    615a:	2303      	movs	r3, #3
    615c:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    615e:	3b03      	subs	r3, #3
    6160:	425a      	negs	r2, r3
    6162:	4153      	adcs	r3, r2
    6164:	b2db      	uxtb	r3, r3
    6166:	e00c      	b.n	6182 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    6168:	2301      	movs	r3, #1
    616a:	e00a      	b.n	6182 <system_clock_source_is_ready+0x72>

	default:
		return false;
    616c:	2300      	movs	r3, #0
    616e:	e008      	b.n	6182 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    6170:	4b07      	ldr	r3, [pc, #28]	; (6190 <system_clock_source_is_ready+0x80>)
    6172:	68db      	ldr	r3, [r3, #12]
    6174:	68fa      	ldr	r2, [r7, #12]
    6176:	401a      	ands	r2, r3
    6178:	68fb      	ldr	r3, [r7, #12]
    617a:	1ad3      	subs	r3, r2, r3
    617c:	425a      	negs	r2, r3
    617e:	4153      	adcs	r3, r2
    6180:	b2db      	uxtb	r3, r3
}
    6182:	0018      	movs	r0, r3
    6184:	46bd      	mov	sp, r7
    6186:	b004      	add	sp, #16
    6188:	bd80      	pop	{r7, pc}
    618a:	46c0      	nop			; (mov r8, r8)
    618c:	0000e418 	.word	0x0000e418
    6190:	40000800 	.word	0x40000800

00006194 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    6194:	b580      	push	{r7, lr}
    6196:	b082      	sub	sp, #8
    6198:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    619a:	003b      	movs	r3, r7
    619c:	2202      	movs	r2, #2
    619e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    61a0:	2300      	movs	r3, #0
    61a2:	607b      	str	r3, [r7, #4]
    61a4:	e009      	b.n	61ba <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    61a6:	687b      	ldr	r3, [r7, #4]
    61a8:	b2db      	uxtb	r3, r3
    61aa:	003a      	movs	r2, r7
    61ac:	0011      	movs	r1, r2
    61ae:	0018      	movs	r0, r3
    61b0:	4b05      	ldr	r3, [pc, #20]	; (61c8 <_switch_peripheral_gclk+0x34>)
    61b2:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    61b4:	687b      	ldr	r3, [r7, #4]
    61b6:	3301      	adds	r3, #1
    61b8:	607b      	str	r3, [r7, #4]
    61ba:	687b      	ldr	r3, [r7, #4]
    61bc:	2b24      	cmp	r3, #36	; 0x24
    61be:	d9f2      	bls.n	61a6 <_switch_peripheral_gclk+0x12>
	}
}
    61c0:	46c0      	nop			; (mov r8, r8)
    61c2:	46bd      	mov	sp, r7
    61c4:	b002      	add	sp, #8
    61c6:	bd80      	pop	{r7, pc}
    61c8:	00006775 	.word	0x00006775

000061cc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    61cc:	b580      	push	{r7, lr}
    61ce:	b0aa      	sub	sp, #168	; 0xa8
    61d0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    61d2:	4b87      	ldr	r3, [pc, #540]	; (63f0 <system_clock_init+0x224>)
    61d4:	22c2      	movs	r2, #194	; 0xc2
    61d6:	00d2      	lsls	r2, r2, #3
    61d8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    61da:	2002      	movs	r0, #2
    61dc:	4b85      	ldr	r3, [pc, #532]	; (63f4 <system_clock_init+0x228>)
    61de:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    61e0:	4b85      	ldr	r3, [pc, #532]	; (63f8 <system_clock_init+0x22c>)
    61e2:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    61e4:	2394      	movs	r3, #148	; 0x94
    61e6:	18fb      	adds	r3, r7, r3
    61e8:	0018      	movs	r0, r3
    61ea:	4b84      	ldr	r3, [pc, #528]	; (63fc <system_clock_init+0x230>)
    61ec:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    61ee:	2394      	movs	r3, #148	; 0x94
    61f0:	18fb      	adds	r3, r7, r3
    61f2:	2280      	movs	r2, #128	; 0x80
    61f4:	0212      	lsls	r2, r2, #8
    61f6:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    61f8:	2394      	movs	r3, #148	; 0x94
    61fa:	18fb      	adds	r3, r7, r3
    61fc:	2200      	movs	r2, #0
    61fe:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6200:	2394      	movs	r3, #148	; 0x94
    6202:	18fb      	adds	r3, r7, r3
    6204:	2203      	movs	r2, #3
    6206:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    6208:	2394      	movs	r3, #148	; 0x94
    620a:	18fb      	adds	r3, r7, r3
    620c:	2200      	movs	r2, #0
    620e:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    6210:	2394      	movs	r3, #148	; 0x94
    6212:	18fb      	adds	r3, r7, r3
    6214:	2200      	movs	r2, #0
    6216:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    6218:	2394      	movs	r3, #148	; 0x94
    621a:	18fb      	adds	r3, r7, r3
    621c:	2201      	movs	r2, #1
    621e:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    6220:	2394      	movs	r3, #148	; 0x94
    6222:	18fb      	adds	r3, r7, r3
    6224:	2200      	movs	r2, #0
    6226:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    6228:	2394      	movs	r3, #148	; 0x94
    622a:	18fb      	adds	r3, r7, r3
    622c:	2200      	movs	r2, #0
    622e:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6230:	2394      	movs	r3, #148	; 0x94
    6232:	18fb      	adds	r3, r7, r3
    6234:	0018      	movs	r0, r3
    6236:	4b72      	ldr	r3, [pc, #456]	; (6400 <system_clock_init+0x234>)
    6238:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    623a:	2005      	movs	r0, #5
    623c:	4b71      	ldr	r3, [pc, #452]	; (6404 <system_clock_init+0x238>)
    623e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6240:	46c0      	nop			; (mov r8, r8)
    6242:	2005      	movs	r0, #5
    6244:	4b70      	ldr	r3, [pc, #448]	; (6408 <system_clock_init+0x23c>)
    6246:	4798      	blx	r3
    6248:	0003      	movs	r3, r0
    624a:	001a      	movs	r2, r3
    624c:	2301      	movs	r3, #1
    624e:	4053      	eors	r3, r2
    6250:	b2db      	uxtb	r3, r3
    6252:	2b00      	cmp	r3, #0
    6254:	d1f5      	bne.n	6242 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    6256:	4a66      	ldr	r2, [pc, #408]	; (63f0 <system_clock_init+0x224>)
    6258:	8a93      	ldrh	r3, [r2, #20]
    625a:	2180      	movs	r1, #128	; 0x80
    625c:	430b      	orrs	r3, r1
    625e:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    6260:	2380      	movs	r3, #128	; 0x80
    6262:	18fb      	adds	r3, r7, r3
    6264:	0018      	movs	r0, r3
    6266:	4b69      	ldr	r3, [pc, #420]	; (640c <system_clock_init+0x240>)
    6268:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    626a:	2380      	movs	r3, #128	; 0x80
    626c:	18fb      	adds	r3, r7, r3
    626e:	2204      	movs	r2, #4
    6270:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6272:	2380      	movs	r3, #128	; 0x80
    6274:	18fb      	adds	r3, r7, r3
    6276:	2200      	movs	r2, #0
    6278:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    627a:	4b65      	ldr	r3, [pc, #404]	; (6410 <system_clock_init+0x244>)
    627c:	681b      	ldr	r3, [r3, #0]
    627e:	0e9b      	lsrs	r3, r3, #26
    6280:	22a4      	movs	r2, #164	; 0xa4
    6282:	18ba      	adds	r2, r7, r2
    6284:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    6286:	23a4      	movs	r3, #164	; 0xa4
    6288:	18fb      	adds	r3, r7, r3
    628a:	681b      	ldr	r3, [r3, #0]
    628c:	2b3f      	cmp	r3, #63	; 0x3f
    628e:	d103      	bne.n	6298 <system_clock_init+0xcc>
		coarse = 0x1f;
    6290:	231f      	movs	r3, #31
    6292:	22a4      	movs	r2, #164	; 0xa4
    6294:	18ba      	adds	r2, r7, r2
    6296:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    6298:	23a4      	movs	r3, #164	; 0xa4
    629a:	18fb      	adds	r3, r7, r3
    629c:	681b      	ldr	r3, [r3, #0]
    629e:	b2da      	uxtb	r2, r3
    62a0:	2380      	movs	r3, #128	; 0x80
    62a2:	18fb      	adds	r3, r7, r3
    62a4:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    62a6:	2380      	movs	r3, #128	; 0x80
    62a8:	18fb      	adds	r3, r7, r3
    62aa:	2200      	movs	r2, #0
    62ac:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    62ae:	2380      	movs	r3, #128	; 0x80
    62b0:	18fb      	adds	r3, r7, r3
    62b2:	2200      	movs	r2, #0
    62b4:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    62b6:	2380      	movs	r3, #128	; 0x80
    62b8:	18fb      	adds	r3, r7, r3
    62ba:	2200      	movs	r2, #0
    62bc:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    62be:	2380      	movs	r3, #128	; 0x80
    62c0:	18fb      	adds	r3, r7, r3
    62c2:	2200      	movs	r2, #0
    62c4:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    62c6:	2380      	movs	r3, #128	; 0x80
    62c8:	18fb      	adds	r3, r7, r3
    62ca:	4a52      	ldr	r2, [pc, #328]	; (6414 <system_clock_init+0x248>)
    62cc:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    62ce:	2380      	movs	r3, #128	; 0x80
    62d0:	18fb      	adds	r3, r7, r3
    62d2:	2207      	movs	r2, #7
    62d4:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    62d6:	2380      	movs	r3, #128	; 0x80
    62d8:	18fb      	adds	r3, r7, r3
    62da:	223f      	movs	r2, #63	; 0x3f
    62dc:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    62de:	2380      	movs	r3, #128	; 0x80
    62e0:	18fb      	adds	r3, r7, r3
    62e2:	0018      	movs	r0, r3
    62e4:	4b4c      	ldr	r3, [pc, #304]	; (6418 <system_clock_init+0x24c>)
    62e6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    62e8:	237c      	movs	r3, #124	; 0x7c
    62ea:	18fb      	adds	r3, r7, r3
    62ec:	0018      	movs	r0, r3
    62ee:	4b4b      	ldr	r3, [pc, #300]	; (641c <system_clock_init+0x250>)
    62f0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    62f2:	237c      	movs	r3, #124	; 0x7c
    62f4:	18fb      	adds	r3, r7, r3
    62f6:	2200      	movs	r2, #0
    62f8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    62fa:	237c      	movs	r3, #124	; 0x7c
    62fc:	18fb      	adds	r3, r7, r3
    62fe:	2201      	movs	r2, #1
    6300:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    6302:	237c      	movs	r3, #124	; 0x7c
    6304:	18fb      	adds	r3, r7, r3
    6306:	2200      	movs	r2, #0
    6308:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    630a:	237c      	movs	r3, #124	; 0x7c
    630c:	18fb      	adds	r3, r7, r3
    630e:	0018      	movs	r0, r3
    6310:	4b43      	ldr	r3, [pc, #268]	; (6420 <system_clock_init+0x254>)
    6312:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6314:	2006      	movs	r0, #6
    6316:	4b3b      	ldr	r3, [pc, #236]	; (6404 <system_clock_init+0x238>)
    6318:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    631a:	4b42      	ldr	r3, [pc, #264]	; (6424 <system_clock_init+0x258>)
    631c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    631e:	2364      	movs	r3, #100	; 0x64
    6320:	18fb      	adds	r3, r7, r3
    6322:	0018      	movs	r0, r3
    6324:	4b40      	ldr	r3, [pc, #256]	; (6428 <system_clock_init+0x25c>)
    6326:	4798      	blx	r3
    6328:	2364      	movs	r3, #100	; 0x64
    632a:	18fb      	adds	r3, r7, r3
    632c:	2205      	movs	r2, #5
    632e:	701a      	strb	r2, [r3, #0]
    6330:	2364      	movs	r3, #100	; 0x64
    6332:	18fb      	adds	r3, r7, r3
    6334:	2201      	movs	r2, #1
    6336:	605a      	str	r2, [r3, #4]
    6338:	2364      	movs	r3, #100	; 0x64
    633a:	18fb      	adds	r3, r7, r3
    633c:	2200      	movs	r2, #0
    633e:	721a      	strb	r2, [r3, #8]
    6340:	2364      	movs	r3, #100	; 0x64
    6342:	18fb      	adds	r3, r7, r3
    6344:	2200      	movs	r2, #0
    6346:	725a      	strb	r2, [r3, #9]
    6348:	2364      	movs	r3, #100	; 0x64
    634a:	18fb      	adds	r3, r7, r3
    634c:	0019      	movs	r1, r3
    634e:	2001      	movs	r0, #1
    6350:	4b36      	ldr	r3, [pc, #216]	; (642c <system_clock_init+0x260>)
    6352:	4798      	blx	r3
    6354:	2001      	movs	r0, #1
    6356:	4b36      	ldr	r3, [pc, #216]	; (6430 <system_clock_init+0x264>)
    6358:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    635a:	230c      	movs	r3, #12
    635c:	18fb      	adds	r3, r7, r3
    635e:	0018      	movs	r0, r3
    6360:	4b34      	ldr	r3, [pc, #208]	; (6434 <system_clock_init+0x268>)
    6362:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6364:	230c      	movs	r3, #12
    6366:	18fb      	adds	r3, r7, r3
    6368:	2201      	movs	r2, #1
    636a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    636c:	230c      	movs	r3, #12
    636e:	18fb      	adds	r3, r7, r3
    6370:	0019      	movs	r1, r3
    6372:	2000      	movs	r0, #0
    6374:	4b30      	ldr	r3, [pc, #192]	; (6438 <system_clock_init+0x26c>)
    6376:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    6378:	2000      	movs	r0, #0
    637a:	4b30      	ldr	r3, [pc, #192]	; (643c <system_clock_init+0x270>)
    637c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    637e:	2007      	movs	r0, #7
    6380:	4b20      	ldr	r3, [pc, #128]	; (6404 <system_clock_init+0x238>)
    6382:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6384:	46c0      	nop			; (mov r8, r8)
    6386:	2007      	movs	r0, #7
    6388:	4b1f      	ldr	r3, [pc, #124]	; (6408 <system_clock_init+0x23c>)
    638a:	4798      	blx	r3
    638c:	0003      	movs	r3, r0
    638e:	001a      	movs	r2, r3
    6390:	2301      	movs	r3, #1
    6392:	4053      	eors	r3, r2
    6394:	b2db      	uxtb	r3, r3
    6396:	2b00      	cmp	r3, #0
    6398:	d1f5      	bne.n	6386 <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    639a:	2000      	movs	r0, #0
    639c:	4b28      	ldr	r3, [pc, #160]	; (6440 <system_clock_init+0x274>)
    639e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    63a0:	2100      	movs	r1, #0
    63a2:	2000      	movs	r0, #0
    63a4:	4b27      	ldr	r3, [pc, #156]	; (6444 <system_clock_init+0x278>)
    63a6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    63a8:	2100      	movs	r1, #0
    63aa:	2001      	movs	r0, #1
    63ac:	4b25      	ldr	r3, [pc, #148]	; (6444 <system_clock_init+0x278>)
    63ae:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    63b0:	2100      	movs	r1, #0
    63b2:	2002      	movs	r0, #2
    63b4:	4b23      	ldr	r3, [pc, #140]	; (6444 <system_clock_init+0x278>)
    63b6:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    63b8:	003b      	movs	r3, r7
    63ba:	0018      	movs	r0, r3
    63bc:	4b1a      	ldr	r3, [pc, #104]	; (6428 <system_clock_init+0x25c>)
    63be:	4798      	blx	r3
    63c0:	003b      	movs	r3, r7
    63c2:	2207      	movs	r2, #7
    63c4:	701a      	strb	r2, [r3, #0]
    63c6:	003b      	movs	r3, r7
    63c8:	2201      	movs	r2, #1
    63ca:	605a      	str	r2, [r3, #4]
    63cc:	003b      	movs	r3, r7
    63ce:	2200      	movs	r2, #0
    63d0:	721a      	strb	r2, [r3, #8]
    63d2:	003b      	movs	r3, r7
    63d4:	2200      	movs	r2, #0
    63d6:	725a      	strb	r2, [r3, #9]
    63d8:	003b      	movs	r3, r7
    63da:	0019      	movs	r1, r3
    63dc:	2000      	movs	r0, #0
    63de:	4b13      	ldr	r3, [pc, #76]	; (642c <system_clock_init+0x260>)
    63e0:	4798      	blx	r3
    63e2:	2000      	movs	r0, #0
    63e4:	4b12      	ldr	r3, [pc, #72]	; (6430 <system_clock_init+0x264>)
    63e6:	4798      	blx	r3
#endif
}
    63e8:	46c0      	nop			; (mov r8, r8)
    63ea:	46bd      	mov	sp, r7
    63ec:	b02a      	add	sp, #168	; 0xa8
    63ee:	bd80      	pop	{r7, pc}
    63f0:	40000800 	.word	0x40000800
    63f4:	00005cad 	.word	0x00005cad
    63f8:	00006195 	.word	0x00006195
    63fc:	00005b7d 	.word	0x00005b7d
    6400:	00005e75 	.word	0x00005e75
    6404:	00006065 	.word	0x00006065
    6408:	00006111 	.word	0x00006111
    640c:	00005be7 	.word	0x00005be7
    6410:	00806024 	.word	0x00806024
    6414:	000005b9 	.word	0x000005b9
    6418:	00005f95 	.word	0x00005f95
    641c:	00005bc5 	.word	0x00005bc5
    6420:	00005dfd 	.word	0x00005dfd
    6424:	000064ed 	.word	0x000064ed
    6428:	00005b39 	.word	0x00005b39
    642c:	0000651d 	.word	0x0000651d
    6430:	00006641 	.word	0x00006641
    6434:	00005b67 	.word	0x00005b67
    6438:	00006775 	.word	0x00006775
    643c:	000067b9 	.word	0x000067b9
    6440:	00005c39 	.word	0x00005c39
    6444:	00005c59 	.word	0x00005c59

00006448 <system_apb_clock_set_mask>:
{
    6448:	b580      	push	{r7, lr}
    644a:	b082      	sub	sp, #8
    644c:	af00      	add	r7, sp, #0
    644e:	0002      	movs	r2, r0
    6450:	6039      	str	r1, [r7, #0]
    6452:	1dfb      	adds	r3, r7, #7
    6454:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6456:	1dfb      	adds	r3, r7, #7
    6458:	781b      	ldrb	r3, [r3, #0]
    645a:	2b01      	cmp	r3, #1
    645c:	d00a      	beq.n	6474 <system_apb_clock_set_mask+0x2c>
    645e:	2b02      	cmp	r3, #2
    6460:	d00f      	beq.n	6482 <system_apb_clock_set_mask+0x3a>
    6462:	2b00      	cmp	r3, #0
    6464:	d114      	bne.n	6490 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6466:	4b0e      	ldr	r3, [pc, #56]	; (64a0 <system_apb_clock_set_mask+0x58>)
    6468:	4a0d      	ldr	r2, [pc, #52]	; (64a0 <system_apb_clock_set_mask+0x58>)
    646a:	6991      	ldr	r1, [r2, #24]
    646c:	683a      	ldr	r2, [r7, #0]
    646e:	430a      	orrs	r2, r1
    6470:	619a      	str	r2, [r3, #24]
			break;
    6472:	e00f      	b.n	6494 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6474:	4b0a      	ldr	r3, [pc, #40]	; (64a0 <system_apb_clock_set_mask+0x58>)
    6476:	4a0a      	ldr	r2, [pc, #40]	; (64a0 <system_apb_clock_set_mask+0x58>)
    6478:	69d1      	ldr	r1, [r2, #28]
    647a:	683a      	ldr	r2, [r7, #0]
    647c:	430a      	orrs	r2, r1
    647e:	61da      	str	r2, [r3, #28]
			break;
    6480:	e008      	b.n	6494 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6482:	4b07      	ldr	r3, [pc, #28]	; (64a0 <system_apb_clock_set_mask+0x58>)
    6484:	4a06      	ldr	r2, [pc, #24]	; (64a0 <system_apb_clock_set_mask+0x58>)
    6486:	6a11      	ldr	r1, [r2, #32]
    6488:	683a      	ldr	r2, [r7, #0]
    648a:	430a      	orrs	r2, r1
    648c:	621a      	str	r2, [r3, #32]
			break;
    648e:	e001      	b.n	6494 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6490:	2317      	movs	r3, #23
    6492:	e000      	b.n	6496 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6494:	2300      	movs	r3, #0
}
    6496:	0018      	movs	r0, r3
    6498:	46bd      	mov	sp, r7
    649a:	b002      	add	sp, #8
    649c:	bd80      	pop	{r7, pc}
    649e:	46c0      	nop			; (mov r8, r8)
    64a0:	40000400 	.word	0x40000400

000064a4 <system_interrupt_enter_critical_section>:
{
    64a4:	b580      	push	{r7, lr}
    64a6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    64a8:	4b02      	ldr	r3, [pc, #8]	; (64b4 <system_interrupt_enter_critical_section+0x10>)
    64aa:	4798      	blx	r3
}
    64ac:	46c0      	nop			; (mov r8, r8)
    64ae:	46bd      	mov	sp, r7
    64b0:	bd80      	pop	{r7, pc}
    64b2:	46c0      	nop			; (mov r8, r8)
    64b4:	000058d1 	.word	0x000058d1

000064b8 <system_interrupt_leave_critical_section>:
{
    64b8:	b580      	push	{r7, lr}
    64ba:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    64bc:	4b02      	ldr	r3, [pc, #8]	; (64c8 <system_interrupt_leave_critical_section+0x10>)
    64be:	4798      	blx	r3
}
    64c0:	46c0      	nop			; (mov r8, r8)
    64c2:	46bd      	mov	sp, r7
    64c4:	bd80      	pop	{r7, pc}
    64c6:	46c0      	nop			; (mov r8, r8)
    64c8:	00005925 	.word	0x00005925

000064cc <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    64cc:	b580      	push	{r7, lr}
    64ce:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    64d0:	4b05      	ldr	r3, [pc, #20]	; (64e8 <system_gclk_is_syncing+0x1c>)
    64d2:	785b      	ldrb	r3, [r3, #1]
    64d4:	b2db      	uxtb	r3, r3
    64d6:	b25b      	sxtb	r3, r3
    64d8:	2b00      	cmp	r3, #0
    64da:	da01      	bge.n	64e0 <system_gclk_is_syncing+0x14>
		return true;
    64dc:	2301      	movs	r3, #1
    64de:	e000      	b.n	64e2 <system_gclk_is_syncing+0x16>
	}

	return false;
    64e0:	2300      	movs	r3, #0
}
    64e2:	0018      	movs	r0, r3
    64e4:	46bd      	mov	sp, r7
    64e6:	bd80      	pop	{r7, pc}
    64e8:	40000c00 	.word	0x40000c00

000064ec <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    64ec:	b580      	push	{r7, lr}
    64ee:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    64f0:	2108      	movs	r1, #8
    64f2:	2000      	movs	r0, #0
    64f4:	4b07      	ldr	r3, [pc, #28]	; (6514 <system_gclk_init+0x28>)
    64f6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    64f8:	4b07      	ldr	r3, [pc, #28]	; (6518 <system_gclk_init+0x2c>)
    64fa:	2201      	movs	r2, #1
    64fc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    64fe:	46c0      	nop			; (mov r8, r8)
    6500:	4b05      	ldr	r3, [pc, #20]	; (6518 <system_gclk_init+0x2c>)
    6502:	781b      	ldrb	r3, [r3, #0]
    6504:	b2db      	uxtb	r3, r3
    6506:	001a      	movs	r2, r3
    6508:	2301      	movs	r3, #1
    650a:	4013      	ands	r3, r2
    650c:	d1f8      	bne.n	6500 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    650e:	46c0      	nop			; (mov r8, r8)
    6510:	46bd      	mov	sp, r7
    6512:	bd80      	pop	{r7, pc}
    6514:	00006449 	.word	0x00006449
    6518:	40000c00 	.word	0x40000c00

0000651c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    651c:	b580      	push	{r7, lr}
    651e:	b086      	sub	sp, #24
    6520:	af00      	add	r7, sp, #0
    6522:	0002      	movs	r2, r0
    6524:	6039      	str	r1, [r7, #0]
    6526:	1dfb      	adds	r3, r7, #7
    6528:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    652a:	1dfb      	adds	r3, r7, #7
    652c:	781b      	ldrb	r3, [r3, #0]
    652e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    6530:	1dfb      	adds	r3, r7, #7
    6532:	781b      	ldrb	r3, [r3, #0]
    6534:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6536:	683b      	ldr	r3, [r7, #0]
    6538:	781b      	ldrb	r3, [r3, #0]
    653a:	021b      	lsls	r3, r3, #8
    653c:	001a      	movs	r2, r3
    653e:	697b      	ldr	r3, [r7, #20]
    6540:	4313      	orrs	r3, r2
    6542:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6544:	683b      	ldr	r3, [r7, #0]
    6546:	785b      	ldrb	r3, [r3, #1]
    6548:	2b00      	cmp	r3, #0
    654a:	d004      	beq.n	6556 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    654c:	697b      	ldr	r3, [r7, #20]
    654e:	2280      	movs	r2, #128	; 0x80
    6550:	02d2      	lsls	r2, r2, #11
    6552:	4313      	orrs	r3, r2
    6554:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6556:	683b      	ldr	r3, [r7, #0]
    6558:	7a5b      	ldrb	r3, [r3, #9]
    655a:	2b00      	cmp	r3, #0
    655c:	d004      	beq.n	6568 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    655e:	697b      	ldr	r3, [r7, #20]
    6560:	2280      	movs	r2, #128	; 0x80
    6562:	0312      	lsls	r2, r2, #12
    6564:	4313      	orrs	r3, r2
    6566:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6568:	683b      	ldr	r3, [r7, #0]
    656a:	685b      	ldr	r3, [r3, #4]
    656c:	2b01      	cmp	r3, #1
    656e:	d92c      	bls.n	65ca <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6570:	683b      	ldr	r3, [r7, #0]
    6572:	685a      	ldr	r2, [r3, #4]
    6574:	683b      	ldr	r3, [r7, #0]
    6576:	685b      	ldr	r3, [r3, #4]
    6578:	3b01      	subs	r3, #1
    657a:	4013      	ands	r3, r2
    657c:	d11a      	bne.n	65b4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    657e:	2300      	movs	r3, #0
    6580:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6582:	2302      	movs	r3, #2
    6584:	60bb      	str	r3, [r7, #8]
    6586:	e005      	b.n	6594 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6588:	68fb      	ldr	r3, [r7, #12]
    658a:	3301      	adds	r3, #1
    658c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    658e:	68bb      	ldr	r3, [r7, #8]
    6590:	005b      	lsls	r3, r3, #1
    6592:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    6594:	683b      	ldr	r3, [r7, #0]
    6596:	685a      	ldr	r2, [r3, #4]
    6598:	68bb      	ldr	r3, [r7, #8]
    659a:	429a      	cmp	r2, r3
    659c:	d8f4      	bhi.n	6588 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    659e:	68fb      	ldr	r3, [r7, #12]
    65a0:	021b      	lsls	r3, r3, #8
    65a2:	693a      	ldr	r2, [r7, #16]
    65a4:	4313      	orrs	r3, r2
    65a6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    65a8:	697b      	ldr	r3, [r7, #20]
    65aa:	2280      	movs	r2, #128	; 0x80
    65ac:	0352      	lsls	r2, r2, #13
    65ae:	4313      	orrs	r3, r2
    65b0:	617b      	str	r3, [r7, #20]
    65b2:	e00a      	b.n	65ca <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    65b4:	683b      	ldr	r3, [r7, #0]
    65b6:	685b      	ldr	r3, [r3, #4]
    65b8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    65ba:	693a      	ldr	r2, [r7, #16]
    65bc:	4313      	orrs	r3, r2
    65be:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    65c0:	697b      	ldr	r3, [r7, #20]
    65c2:	2280      	movs	r2, #128	; 0x80
    65c4:	0292      	lsls	r2, r2, #10
    65c6:	4313      	orrs	r3, r2
    65c8:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    65ca:	683b      	ldr	r3, [r7, #0]
    65cc:	7a1b      	ldrb	r3, [r3, #8]
    65ce:	2b00      	cmp	r3, #0
    65d0:	d004      	beq.n	65dc <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    65d2:	697b      	ldr	r3, [r7, #20]
    65d4:	2280      	movs	r2, #128	; 0x80
    65d6:	0392      	lsls	r2, r2, #14
    65d8:	4313      	orrs	r3, r2
    65da:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    65dc:	46c0      	nop			; (mov r8, r8)
    65de:	4b13      	ldr	r3, [pc, #76]	; (662c <system_gclk_gen_set_config+0x110>)
    65e0:	4798      	blx	r3
    65e2:	1e03      	subs	r3, r0, #0
    65e4:	d1fb      	bne.n	65de <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    65e6:	4b12      	ldr	r3, [pc, #72]	; (6630 <system_gclk_gen_set_config+0x114>)
    65e8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    65ea:	4a12      	ldr	r2, [pc, #72]	; (6634 <system_gclk_gen_set_config+0x118>)
    65ec:	1dfb      	adds	r3, r7, #7
    65ee:	781b      	ldrb	r3, [r3, #0]
    65f0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    65f2:	46c0      	nop			; (mov r8, r8)
    65f4:	4b0d      	ldr	r3, [pc, #52]	; (662c <system_gclk_gen_set_config+0x110>)
    65f6:	4798      	blx	r3
    65f8:	1e03      	subs	r3, r0, #0
    65fa:	d1fb      	bne.n	65f4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    65fc:	4b0e      	ldr	r3, [pc, #56]	; (6638 <system_gclk_gen_set_config+0x11c>)
    65fe:	693a      	ldr	r2, [r7, #16]
    6600:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    6602:	46c0      	nop			; (mov r8, r8)
    6604:	4b09      	ldr	r3, [pc, #36]	; (662c <system_gclk_gen_set_config+0x110>)
    6606:	4798      	blx	r3
    6608:	1e03      	subs	r3, r0, #0
    660a:	d1fb      	bne.n	6604 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    660c:	4b0a      	ldr	r3, [pc, #40]	; (6638 <system_gclk_gen_set_config+0x11c>)
    660e:	4a0a      	ldr	r2, [pc, #40]	; (6638 <system_gclk_gen_set_config+0x11c>)
    6610:	6851      	ldr	r1, [r2, #4]
    6612:	2280      	movs	r2, #128	; 0x80
    6614:	0252      	lsls	r2, r2, #9
    6616:	4011      	ands	r1, r2
    6618:	697a      	ldr	r2, [r7, #20]
    661a:	430a      	orrs	r2, r1
    661c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    661e:	4b07      	ldr	r3, [pc, #28]	; (663c <system_gclk_gen_set_config+0x120>)
    6620:	4798      	blx	r3
}
    6622:	46c0      	nop			; (mov r8, r8)
    6624:	46bd      	mov	sp, r7
    6626:	b006      	add	sp, #24
    6628:	bd80      	pop	{r7, pc}
    662a:	46c0      	nop			; (mov r8, r8)
    662c:	000064cd 	.word	0x000064cd
    6630:	000064a5 	.word	0x000064a5
    6634:	40000c08 	.word	0x40000c08
    6638:	40000c00 	.word	0x40000c00
    663c:	000064b9 	.word	0x000064b9

00006640 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6640:	b580      	push	{r7, lr}
    6642:	b082      	sub	sp, #8
    6644:	af00      	add	r7, sp, #0
    6646:	0002      	movs	r2, r0
    6648:	1dfb      	adds	r3, r7, #7
    664a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    664c:	46c0      	nop			; (mov r8, r8)
    664e:	4b0e      	ldr	r3, [pc, #56]	; (6688 <system_gclk_gen_enable+0x48>)
    6650:	4798      	blx	r3
    6652:	1e03      	subs	r3, r0, #0
    6654:	d1fb      	bne.n	664e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6656:	4b0d      	ldr	r3, [pc, #52]	; (668c <system_gclk_gen_enable+0x4c>)
    6658:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    665a:	4a0d      	ldr	r2, [pc, #52]	; (6690 <system_gclk_gen_enable+0x50>)
    665c:	1dfb      	adds	r3, r7, #7
    665e:	781b      	ldrb	r3, [r3, #0]
    6660:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6662:	46c0      	nop			; (mov r8, r8)
    6664:	4b08      	ldr	r3, [pc, #32]	; (6688 <system_gclk_gen_enable+0x48>)
    6666:	4798      	blx	r3
    6668:	1e03      	subs	r3, r0, #0
    666a:	d1fb      	bne.n	6664 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    666c:	4b09      	ldr	r3, [pc, #36]	; (6694 <system_gclk_gen_enable+0x54>)
    666e:	4a09      	ldr	r2, [pc, #36]	; (6694 <system_gclk_gen_enable+0x54>)
    6670:	6852      	ldr	r2, [r2, #4]
    6672:	2180      	movs	r1, #128	; 0x80
    6674:	0249      	lsls	r1, r1, #9
    6676:	430a      	orrs	r2, r1
    6678:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    667a:	4b07      	ldr	r3, [pc, #28]	; (6698 <system_gclk_gen_enable+0x58>)
    667c:	4798      	blx	r3
}
    667e:	46c0      	nop			; (mov r8, r8)
    6680:	46bd      	mov	sp, r7
    6682:	b002      	add	sp, #8
    6684:	bd80      	pop	{r7, pc}
    6686:	46c0      	nop			; (mov r8, r8)
    6688:	000064cd 	.word	0x000064cd
    668c:	000064a5 	.word	0x000064a5
    6690:	40000c04 	.word	0x40000c04
    6694:	40000c00 	.word	0x40000c00
    6698:	000064b9 	.word	0x000064b9

0000669c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    669c:	b580      	push	{r7, lr}
    669e:	b086      	sub	sp, #24
    66a0:	af00      	add	r7, sp, #0
    66a2:	0002      	movs	r2, r0
    66a4:	1dfb      	adds	r3, r7, #7
    66a6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    66a8:	46c0      	nop			; (mov r8, r8)
    66aa:	4b2a      	ldr	r3, [pc, #168]	; (6754 <system_gclk_gen_get_hz+0xb8>)
    66ac:	4798      	blx	r3
    66ae:	1e03      	subs	r3, r0, #0
    66b0:	d1fb      	bne.n	66aa <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    66b2:	4b29      	ldr	r3, [pc, #164]	; (6758 <system_gclk_gen_get_hz+0xbc>)
    66b4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    66b6:	4a29      	ldr	r2, [pc, #164]	; (675c <system_gclk_gen_get_hz+0xc0>)
    66b8:	1dfb      	adds	r3, r7, #7
    66ba:	781b      	ldrb	r3, [r3, #0]
    66bc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    66be:	46c0      	nop			; (mov r8, r8)
    66c0:	4b24      	ldr	r3, [pc, #144]	; (6754 <system_gclk_gen_get_hz+0xb8>)
    66c2:	4798      	blx	r3
    66c4:	1e03      	subs	r3, r0, #0
    66c6:	d1fb      	bne.n	66c0 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    66c8:	4b25      	ldr	r3, [pc, #148]	; (6760 <system_gclk_gen_get_hz+0xc4>)
    66ca:	685b      	ldr	r3, [r3, #4]
    66cc:	04db      	lsls	r3, r3, #19
    66ce:	0edb      	lsrs	r3, r3, #27
    66d0:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    66d2:	0018      	movs	r0, r3
    66d4:	4b23      	ldr	r3, [pc, #140]	; (6764 <system_gclk_gen_get_hz+0xc8>)
    66d6:	4798      	blx	r3
    66d8:	0003      	movs	r3, r0
    66da:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    66dc:	4a1f      	ldr	r2, [pc, #124]	; (675c <system_gclk_gen_get_hz+0xc0>)
    66de:	1dfb      	adds	r3, r7, #7
    66e0:	781b      	ldrb	r3, [r3, #0]
    66e2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    66e4:	4b1e      	ldr	r3, [pc, #120]	; (6760 <system_gclk_gen_get_hz+0xc4>)
    66e6:	685b      	ldr	r3, [r3, #4]
    66e8:	02db      	lsls	r3, r3, #11
    66ea:	0fdb      	lsrs	r3, r3, #31
    66ec:	b2da      	uxtb	r2, r3
    66ee:	2313      	movs	r3, #19
    66f0:	18fb      	adds	r3, r7, r3
    66f2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    66f4:	4a1c      	ldr	r2, [pc, #112]	; (6768 <system_gclk_gen_get_hz+0xcc>)
    66f6:	1dfb      	adds	r3, r7, #7
    66f8:	781b      	ldrb	r3, [r3, #0]
    66fa:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    66fc:	46c0      	nop			; (mov r8, r8)
    66fe:	4b15      	ldr	r3, [pc, #84]	; (6754 <system_gclk_gen_get_hz+0xb8>)
    6700:	4798      	blx	r3
    6702:	1e03      	subs	r3, r0, #0
    6704:	d1fb      	bne.n	66fe <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6706:	4b16      	ldr	r3, [pc, #88]	; (6760 <system_gclk_gen_get_hz+0xc4>)
    6708:	689b      	ldr	r3, [r3, #8]
    670a:	021b      	lsls	r3, r3, #8
    670c:	0c1b      	lsrs	r3, r3, #16
    670e:	b29b      	uxth	r3, r3
    6710:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    6712:	4b16      	ldr	r3, [pc, #88]	; (676c <system_gclk_gen_get_hz+0xd0>)
    6714:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6716:	2313      	movs	r3, #19
    6718:	18fb      	adds	r3, r7, r3
    671a:	781b      	ldrb	r3, [r3, #0]
    671c:	2b00      	cmp	r3, #0
    671e:	d109      	bne.n	6734 <system_gclk_gen_get_hz+0x98>
    6720:	68fb      	ldr	r3, [r7, #12]
    6722:	2b01      	cmp	r3, #1
    6724:	d906      	bls.n	6734 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    6726:	4b12      	ldr	r3, [pc, #72]	; (6770 <system_gclk_gen_get_hz+0xd4>)
    6728:	68f9      	ldr	r1, [r7, #12]
    672a:	6978      	ldr	r0, [r7, #20]
    672c:	4798      	blx	r3
    672e:	0003      	movs	r3, r0
    6730:	617b      	str	r3, [r7, #20]
    6732:	e00a      	b.n	674a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    6734:	2313      	movs	r3, #19
    6736:	18fb      	adds	r3, r7, r3
    6738:	781b      	ldrb	r3, [r3, #0]
    673a:	2b00      	cmp	r3, #0
    673c:	d005      	beq.n	674a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    673e:	68fb      	ldr	r3, [r7, #12]
    6740:	3301      	adds	r3, #1
    6742:	697a      	ldr	r2, [r7, #20]
    6744:	40da      	lsrs	r2, r3
    6746:	0013      	movs	r3, r2
    6748:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    674a:	697b      	ldr	r3, [r7, #20]
}
    674c:	0018      	movs	r0, r3
    674e:	46bd      	mov	sp, r7
    6750:	b006      	add	sp, #24
    6752:	bd80      	pop	{r7, pc}
    6754:	000064cd 	.word	0x000064cd
    6758:	000064a5 	.word	0x000064a5
    675c:	40000c04 	.word	0x40000c04
    6760:	40000c00 	.word	0x40000c00
    6764:	00005d41 	.word	0x00005d41
    6768:	40000c08 	.word	0x40000c08
    676c:	000064b9 	.word	0x000064b9
    6770:	0000bab5 	.word	0x0000bab5

00006774 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6774:	b580      	push	{r7, lr}
    6776:	b084      	sub	sp, #16
    6778:	af00      	add	r7, sp, #0
    677a:	0002      	movs	r2, r0
    677c:	6039      	str	r1, [r7, #0]
    677e:	1dfb      	adds	r3, r7, #7
    6780:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6782:	1dfb      	adds	r3, r7, #7
    6784:	781b      	ldrb	r3, [r3, #0]
    6786:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6788:	683b      	ldr	r3, [r7, #0]
    678a:	781b      	ldrb	r3, [r3, #0]
    678c:	021b      	lsls	r3, r3, #8
    678e:	001a      	movs	r2, r3
    6790:	68fb      	ldr	r3, [r7, #12]
    6792:	4313      	orrs	r3, r2
    6794:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6796:	1dfb      	adds	r3, r7, #7
    6798:	781b      	ldrb	r3, [r3, #0]
    679a:	0018      	movs	r0, r3
    679c:	4b04      	ldr	r3, [pc, #16]	; (67b0 <system_gclk_chan_set_config+0x3c>)
    679e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    67a0:	4b04      	ldr	r3, [pc, #16]	; (67b4 <system_gclk_chan_set_config+0x40>)
    67a2:	68fa      	ldr	r2, [r7, #12]
    67a4:	b292      	uxth	r2, r2
    67a6:	805a      	strh	r2, [r3, #2]
}
    67a8:	46c0      	nop			; (mov r8, r8)
    67aa:	46bd      	mov	sp, r7
    67ac:	b004      	add	sp, #16
    67ae:	bd80      	pop	{r7, pc}
    67b0:	00006801 	.word	0x00006801
    67b4:	40000c00 	.word	0x40000c00

000067b8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    67b8:	b580      	push	{r7, lr}
    67ba:	b082      	sub	sp, #8
    67bc:	af00      	add	r7, sp, #0
    67be:	0002      	movs	r2, r0
    67c0:	1dfb      	adds	r3, r7, #7
    67c2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    67c4:	4b0a      	ldr	r3, [pc, #40]	; (67f0 <system_gclk_chan_enable+0x38>)
    67c6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    67c8:	4a0a      	ldr	r2, [pc, #40]	; (67f4 <system_gclk_chan_enable+0x3c>)
    67ca:	1dfb      	adds	r3, r7, #7
    67cc:	781b      	ldrb	r3, [r3, #0]
    67ce:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    67d0:	4909      	ldr	r1, [pc, #36]	; (67f8 <system_gclk_chan_enable+0x40>)
    67d2:	4b09      	ldr	r3, [pc, #36]	; (67f8 <system_gclk_chan_enable+0x40>)
    67d4:	885b      	ldrh	r3, [r3, #2]
    67d6:	b29b      	uxth	r3, r3
    67d8:	2280      	movs	r2, #128	; 0x80
    67da:	01d2      	lsls	r2, r2, #7
    67dc:	4313      	orrs	r3, r2
    67de:	b29b      	uxth	r3, r3
    67e0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    67e2:	4b06      	ldr	r3, [pc, #24]	; (67fc <system_gclk_chan_enable+0x44>)
    67e4:	4798      	blx	r3
}
    67e6:	46c0      	nop			; (mov r8, r8)
    67e8:	46bd      	mov	sp, r7
    67ea:	b002      	add	sp, #8
    67ec:	bd80      	pop	{r7, pc}
    67ee:	46c0      	nop			; (mov r8, r8)
    67f0:	000064a5 	.word	0x000064a5
    67f4:	40000c02 	.word	0x40000c02
    67f8:	40000c00 	.word	0x40000c00
    67fc:	000064b9 	.word	0x000064b9

00006800 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6800:	b580      	push	{r7, lr}
    6802:	b084      	sub	sp, #16
    6804:	af00      	add	r7, sp, #0
    6806:	0002      	movs	r2, r0
    6808:	1dfb      	adds	r3, r7, #7
    680a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    680c:	4b1c      	ldr	r3, [pc, #112]	; (6880 <system_gclk_chan_disable+0x80>)
    680e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6810:	4a1c      	ldr	r2, [pc, #112]	; (6884 <system_gclk_chan_disable+0x84>)
    6812:	1dfb      	adds	r3, r7, #7
    6814:	781b      	ldrb	r3, [r3, #0]
    6816:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6818:	4b1b      	ldr	r3, [pc, #108]	; (6888 <system_gclk_chan_disable+0x88>)
    681a:	885b      	ldrh	r3, [r3, #2]
    681c:	051b      	lsls	r3, r3, #20
    681e:	0f1b      	lsrs	r3, r3, #28
    6820:	b2db      	uxtb	r3, r3
    6822:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    6824:	4a18      	ldr	r2, [pc, #96]	; (6888 <system_gclk_chan_disable+0x88>)
    6826:	8853      	ldrh	r3, [r2, #2]
    6828:	4918      	ldr	r1, [pc, #96]	; (688c <system_gclk_chan_disable+0x8c>)
    682a:	400b      	ands	r3, r1
    682c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    682e:	4a16      	ldr	r2, [pc, #88]	; (6888 <system_gclk_chan_disable+0x88>)
    6830:	4b15      	ldr	r3, [pc, #84]	; (6888 <system_gclk_chan_disable+0x88>)
    6832:	885b      	ldrh	r3, [r3, #2]
    6834:	b29b      	uxth	r3, r3
    6836:	4916      	ldr	r1, [pc, #88]	; (6890 <system_gclk_chan_disable+0x90>)
    6838:	400b      	ands	r3, r1
    683a:	b29b      	uxth	r3, r3
    683c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    683e:	46c0      	nop			; (mov r8, r8)
    6840:	4b11      	ldr	r3, [pc, #68]	; (6888 <system_gclk_chan_disable+0x88>)
    6842:	885b      	ldrh	r3, [r3, #2]
    6844:	b29b      	uxth	r3, r3
    6846:	001a      	movs	r2, r3
    6848:	2380      	movs	r3, #128	; 0x80
    684a:	01db      	lsls	r3, r3, #7
    684c:	4013      	ands	r3, r2
    684e:	d1f7      	bne.n	6840 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6850:	4a0d      	ldr	r2, [pc, #52]	; (6888 <system_gclk_chan_disable+0x88>)
    6852:	68fb      	ldr	r3, [r7, #12]
    6854:	b2db      	uxtb	r3, r3
    6856:	1c19      	adds	r1, r3, #0
    6858:	230f      	movs	r3, #15
    685a:	400b      	ands	r3, r1
    685c:	b2d9      	uxtb	r1, r3
    685e:	8853      	ldrh	r3, [r2, #2]
    6860:	1c08      	adds	r0, r1, #0
    6862:	210f      	movs	r1, #15
    6864:	4001      	ands	r1, r0
    6866:	0208      	lsls	r0, r1, #8
    6868:	4908      	ldr	r1, [pc, #32]	; (688c <system_gclk_chan_disable+0x8c>)
    686a:	400b      	ands	r3, r1
    686c:	1c19      	adds	r1, r3, #0
    686e:	1c03      	adds	r3, r0, #0
    6870:	430b      	orrs	r3, r1
    6872:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6874:	4b07      	ldr	r3, [pc, #28]	; (6894 <system_gclk_chan_disable+0x94>)
    6876:	4798      	blx	r3
}
    6878:	46c0      	nop			; (mov r8, r8)
    687a:	46bd      	mov	sp, r7
    687c:	b004      	add	sp, #16
    687e:	bd80      	pop	{r7, pc}
    6880:	000064a5 	.word	0x000064a5
    6884:	40000c02 	.word	0x40000c02
    6888:	40000c00 	.word	0x40000c00
    688c:	fffff0ff 	.word	0xfffff0ff
    6890:	ffffbfff 	.word	0xffffbfff
    6894:	000064b9 	.word	0x000064b9

00006898 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6898:	b580      	push	{r7, lr}
    689a:	b084      	sub	sp, #16
    689c:	af00      	add	r7, sp, #0
    689e:	0002      	movs	r2, r0
    68a0:	1dfb      	adds	r3, r7, #7
    68a2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    68a4:	4b0d      	ldr	r3, [pc, #52]	; (68dc <system_gclk_chan_get_hz+0x44>)
    68a6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    68a8:	4a0d      	ldr	r2, [pc, #52]	; (68e0 <system_gclk_chan_get_hz+0x48>)
    68aa:	1dfb      	adds	r3, r7, #7
    68ac:	781b      	ldrb	r3, [r3, #0]
    68ae:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    68b0:	4b0c      	ldr	r3, [pc, #48]	; (68e4 <system_gclk_chan_get_hz+0x4c>)
    68b2:	885b      	ldrh	r3, [r3, #2]
    68b4:	051b      	lsls	r3, r3, #20
    68b6:	0f1b      	lsrs	r3, r3, #28
    68b8:	b2da      	uxtb	r2, r3
    68ba:	230f      	movs	r3, #15
    68bc:	18fb      	adds	r3, r7, r3
    68be:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    68c0:	4b09      	ldr	r3, [pc, #36]	; (68e8 <system_gclk_chan_get_hz+0x50>)
    68c2:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    68c4:	230f      	movs	r3, #15
    68c6:	18fb      	adds	r3, r7, r3
    68c8:	781b      	ldrb	r3, [r3, #0]
    68ca:	0018      	movs	r0, r3
    68cc:	4b07      	ldr	r3, [pc, #28]	; (68ec <system_gclk_chan_get_hz+0x54>)
    68ce:	4798      	blx	r3
    68d0:	0003      	movs	r3, r0
}
    68d2:	0018      	movs	r0, r3
    68d4:	46bd      	mov	sp, r7
    68d6:	b004      	add	sp, #16
    68d8:	bd80      	pop	{r7, pc}
    68da:	46c0      	nop			; (mov r8, r8)
    68dc:	000064a5 	.word	0x000064a5
    68e0:	40000c02 	.word	0x40000c02
    68e4:	40000c00 	.word	0x40000c00
    68e8:	000064b9 	.word	0x000064b9
    68ec:	0000669d 	.word	0x0000669d

000068f0 <system_pinmux_get_group_from_gpio_pin>:
{
    68f0:	b580      	push	{r7, lr}
    68f2:	b084      	sub	sp, #16
    68f4:	af00      	add	r7, sp, #0
    68f6:	0002      	movs	r2, r0
    68f8:	1dfb      	adds	r3, r7, #7
    68fa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    68fc:	230f      	movs	r3, #15
    68fe:	18fb      	adds	r3, r7, r3
    6900:	1dfa      	adds	r2, r7, #7
    6902:	7812      	ldrb	r2, [r2, #0]
    6904:	09d2      	lsrs	r2, r2, #7
    6906:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6908:	230e      	movs	r3, #14
    690a:	18fb      	adds	r3, r7, r3
    690c:	1dfa      	adds	r2, r7, #7
    690e:	7812      	ldrb	r2, [r2, #0]
    6910:	0952      	lsrs	r2, r2, #5
    6912:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6914:	4b0d      	ldr	r3, [pc, #52]	; (694c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6916:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6918:	230f      	movs	r3, #15
    691a:	18fb      	adds	r3, r7, r3
    691c:	781b      	ldrb	r3, [r3, #0]
    691e:	2b00      	cmp	r3, #0
    6920:	d10f      	bne.n	6942 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6922:	230f      	movs	r3, #15
    6924:	18fb      	adds	r3, r7, r3
    6926:	781b      	ldrb	r3, [r3, #0]
    6928:	009b      	lsls	r3, r3, #2
    692a:	2210      	movs	r2, #16
    692c:	4694      	mov	ip, r2
    692e:	44bc      	add	ip, r7
    6930:	4463      	add	r3, ip
    6932:	3b08      	subs	r3, #8
    6934:	681a      	ldr	r2, [r3, #0]
    6936:	230e      	movs	r3, #14
    6938:	18fb      	adds	r3, r7, r3
    693a:	781b      	ldrb	r3, [r3, #0]
    693c:	01db      	lsls	r3, r3, #7
    693e:	18d3      	adds	r3, r2, r3
    6940:	e000      	b.n	6944 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6942:	2300      	movs	r3, #0
}
    6944:	0018      	movs	r0, r3
    6946:	46bd      	mov	sp, r7
    6948:	b004      	add	sp, #16
    694a:	bd80      	pop	{r7, pc}
    694c:	41004400 	.word	0x41004400

00006950 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6950:	b580      	push	{r7, lr}
    6952:	b088      	sub	sp, #32
    6954:	af00      	add	r7, sp, #0
    6956:	60f8      	str	r0, [r7, #12]
    6958:	60b9      	str	r1, [r7, #8]
    695a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    695c:	2300      	movs	r3, #0
    695e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6960:	687b      	ldr	r3, [r7, #4]
    6962:	78db      	ldrb	r3, [r3, #3]
    6964:	2201      	movs	r2, #1
    6966:	4053      	eors	r3, r2
    6968:	b2db      	uxtb	r3, r3
    696a:	2b00      	cmp	r3, #0
    696c:	d035      	beq.n	69da <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    696e:	687b      	ldr	r3, [r7, #4]
    6970:	781b      	ldrb	r3, [r3, #0]
    6972:	2b80      	cmp	r3, #128	; 0x80
    6974:	d00b      	beq.n	698e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6976:	69fb      	ldr	r3, [r7, #28]
    6978:	2280      	movs	r2, #128	; 0x80
    697a:	0252      	lsls	r2, r2, #9
    697c:	4313      	orrs	r3, r2
    697e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6980:	687b      	ldr	r3, [r7, #4]
    6982:	781b      	ldrb	r3, [r3, #0]
    6984:	061b      	lsls	r3, r3, #24
    6986:	001a      	movs	r2, r3
    6988:	69fb      	ldr	r3, [r7, #28]
    698a:	4313      	orrs	r3, r2
    698c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    698e:	687b      	ldr	r3, [r7, #4]
    6990:	785b      	ldrb	r3, [r3, #1]
    6992:	2b00      	cmp	r3, #0
    6994:	d003      	beq.n	699e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6996:	687b      	ldr	r3, [r7, #4]
    6998:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    699a:	2b02      	cmp	r3, #2
    699c:	d110      	bne.n	69c0 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    699e:	69fb      	ldr	r3, [r7, #28]
    69a0:	2280      	movs	r2, #128	; 0x80
    69a2:	0292      	lsls	r2, r2, #10
    69a4:	4313      	orrs	r3, r2
    69a6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    69a8:	687b      	ldr	r3, [r7, #4]
    69aa:	789b      	ldrb	r3, [r3, #2]
    69ac:	2b00      	cmp	r3, #0
    69ae:	d004      	beq.n	69ba <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    69b0:	69fb      	ldr	r3, [r7, #28]
    69b2:	2280      	movs	r2, #128	; 0x80
    69b4:	02d2      	lsls	r2, r2, #11
    69b6:	4313      	orrs	r3, r2
    69b8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    69ba:	68fb      	ldr	r3, [r7, #12]
    69bc:	68ba      	ldr	r2, [r7, #8]
    69be:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    69c0:	687b      	ldr	r3, [r7, #4]
    69c2:	785b      	ldrb	r3, [r3, #1]
    69c4:	2b01      	cmp	r3, #1
    69c6:	d003      	beq.n	69d0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    69c8:	687b      	ldr	r3, [r7, #4]
    69ca:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    69cc:	2b02      	cmp	r3, #2
    69ce:	d107      	bne.n	69e0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    69d0:	69fb      	ldr	r3, [r7, #28]
    69d2:	4a22      	ldr	r2, [pc, #136]	; (6a5c <_system_pinmux_config+0x10c>)
    69d4:	4013      	ands	r3, r2
    69d6:	61fb      	str	r3, [r7, #28]
    69d8:	e002      	b.n	69e0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    69da:	68fb      	ldr	r3, [r7, #12]
    69dc:	68ba      	ldr	r2, [r7, #8]
    69de:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    69e0:	68bb      	ldr	r3, [r7, #8]
    69e2:	041b      	lsls	r3, r3, #16
    69e4:	0c1b      	lsrs	r3, r3, #16
    69e6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    69e8:	68bb      	ldr	r3, [r7, #8]
    69ea:	0c1b      	lsrs	r3, r3, #16
    69ec:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    69ee:	69ba      	ldr	r2, [r7, #24]
    69f0:	69fb      	ldr	r3, [r7, #28]
    69f2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    69f4:	22a0      	movs	r2, #160	; 0xa0
    69f6:	05d2      	lsls	r2, r2, #23
    69f8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    69fa:	68fb      	ldr	r3, [r7, #12]
    69fc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    69fe:	697a      	ldr	r2, [r7, #20]
    6a00:	69fb      	ldr	r3, [r7, #28]
    6a02:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6a04:	22d0      	movs	r2, #208	; 0xd0
    6a06:	0612      	lsls	r2, r2, #24
    6a08:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6a0a:	68fb      	ldr	r3, [r7, #12]
    6a0c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6a0e:	687b      	ldr	r3, [r7, #4]
    6a10:	78db      	ldrb	r3, [r3, #3]
    6a12:	2201      	movs	r2, #1
    6a14:	4053      	eors	r3, r2
    6a16:	b2db      	uxtb	r3, r3
    6a18:	2b00      	cmp	r3, #0
    6a1a:	d01a      	beq.n	6a52 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6a1c:	69fa      	ldr	r2, [r7, #28]
    6a1e:	2380      	movs	r3, #128	; 0x80
    6a20:	02db      	lsls	r3, r3, #11
    6a22:	4013      	ands	r3, r2
    6a24:	d00a      	beq.n	6a3c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6a26:	687b      	ldr	r3, [r7, #4]
    6a28:	789b      	ldrb	r3, [r3, #2]
    6a2a:	2b01      	cmp	r3, #1
    6a2c:	d103      	bne.n	6a36 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    6a2e:	68fb      	ldr	r3, [r7, #12]
    6a30:	68ba      	ldr	r2, [r7, #8]
    6a32:	619a      	str	r2, [r3, #24]
    6a34:	e002      	b.n	6a3c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    6a36:	68fb      	ldr	r3, [r7, #12]
    6a38:	68ba      	ldr	r2, [r7, #8]
    6a3a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6a3c:	687b      	ldr	r3, [r7, #4]
    6a3e:	785b      	ldrb	r3, [r3, #1]
    6a40:	2b01      	cmp	r3, #1
    6a42:	d003      	beq.n	6a4c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6a44:	687b      	ldr	r3, [r7, #4]
    6a46:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6a48:	2b02      	cmp	r3, #2
    6a4a:	d102      	bne.n	6a52 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6a4c:	68fb      	ldr	r3, [r7, #12]
    6a4e:	68ba      	ldr	r2, [r7, #8]
    6a50:	609a      	str	r2, [r3, #8]
		}
	}
}
    6a52:	46c0      	nop			; (mov r8, r8)
    6a54:	46bd      	mov	sp, r7
    6a56:	b008      	add	sp, #32
    6a58:	bd80      	pop	{r7, pc}
    6a5a:	46c0      	nop			; (mov r8, r8)
    6a5c:	fffbffff 	.word	0xfffbffff

00006a60 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6a60:	b580      	push	{r7, lr}
    6a62:	b084      	sub	sp, #16
    6a64:	af00      	add	r7, sp, #0
    6a66:	0002      	movs	r2, r0
    6a68:	6039      	str	r1, [r7, #0]
    6a6a:	1dfb      	adds	r3, r7, #7
    6a6c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6a6e:	1dfb      	adds	r3, r7, #7
    6a70:	781b      	ldrb	r3, [r3, #0]
    6a72:	0018      	movs	r0, r3
    6a74:	4b0a      	ldr	r3, [pc, #40]	; (6aa0 <system_pinmux_pin_set_config+0x40>)
    6a76:	4798      	blx	r3
    6a78:	0003      	movs	r3, r0
    6a7a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6a7c:	1dfb      	adds	r3, r7, #7
    6a7e:	781b      	ldrb	r3, [r3, #0]
    6a80:	221f      	movs	r2, #31
    6a82:	4013      	ands	r3, r2
    6a84:	2201      	movs	r2, #1
    6a86:	409a      	lsls	r2, r3
    6a88:	0013      	movs	r3, r2
    6a8a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6a8c:	683a      	ldr	r2, [r7, #0]
    6a8e:	68b9      	ldr	r1, [r7, #8]
    6a90:	68fb      	ldr	r3, [r7, #12]
    6a92:	0018      	movs	r0, r3
    6a94:	4b03      	ldr	r3, [pc, #12]	; (6aa4 <system_pinmux_pin_set_config+0x44>)
    6a96:	4798      	blx	r3
}
    6a98:	46c0      	nop			; (mov r8, r8)
    6a9a:	46bd      	mov	sp, r7
    6a9c:	b004      	add	sp, #16
    6a9e:	bd80      	pop	{r7, pc}
    6aa0:	000068f1 	.word	0x000068f1
    6aa4:	00006951 	.word	0x00006951

00006aa8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6aa8:	b580      	push	{r7, lr}
    6aaa:	af00      	add	r7, sp, #0
	return;
    6aac:	46c0      	nop			; (mov r8, r8)
}
    6aae:	46bd      	mov	sp, r7
    6ab0:	bd80      	pop	{r7, pc}
	...

00006ab4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6ab4:	b580      	push	{r7, lr}
    6ab6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6ab8:	4b06      	ldr	r3, [pc, #24]	; (6ad4 <system_init+0x20>)
    6aba:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6abc:	4b06      	ldr	r3, [pc, #24]	; (6ad8 <system_init+0x24>)
    6abe:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6ac0:	4b06      	ldr	r3, [pc, #24]	; (6adc <system_init+0x28>)
    6ac2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6ac4:	4b06      	ldr	r3, [pc, #24]	; (6ae0 <system_init+0x2c>)
    6ac6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6ac8:	4b06      	ldr	r3, [pc, #24]	; (6ae4 <system_init+0x30>)
    6aca:	4798      	blx	r3
}
    6acc:	46c0      	nop			; (mov r8, r8)
    6ace:	46bd      	mov	sp, r7
    6ad0:	bd80      	pop	{r7, pc}
    6ad2:	46c0      	nop			; (mov r8, r8)
    6ad4:	000061cd 	.word	0x000061cd
    6ad8:	00005a61 	.word	0x00005a61
    6adc:	00006aa9 	.word	0x00006aa9
    6ae0:	00006aa9 	.word	0x00006aa9
    6ae4:	00006aa9 	.word	0x00006aa9

00006ae8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6ae8:	b580      	push	{r7, lr}
    6aea:	b082      	sub	sp, #8
    6aec:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6aee:	4b2f      	ldr	r3, [pc, #188]	; (6bac <Reset_Handler+0xc4>)
    6af0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6af2:	4b2f      	ldr	r3, [pc, #188]	; (6bb0 <Reset_Handler+0xc8>)
    6af4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6af6:	687a      	ldr	r2, [r7, #4]
    6af8:	683b      	ldr	r3, [r7, #0]
    6afa:	429a      	cmp	r2, r3
    6afc:	d00c      	beq.n	6b18 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6afe:	e007      	b.n	6b10 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6b00:	683b      	ldr	r3, [r7, #0]
    6b02:	1d1a      	adds	r2, r3, #4
    6b04:	603a      	str	r2, [r7, #0]
    6b06:	687a      	ldr	r2, [r7, #4]
    6b08:	1d11      	adds	r1, r2, #4
    6b0a:	6079      	str	r1, [r7, #4]
    6b0c:	6812      	ldr	r2, [r2, #0]
    6b0e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    6b10:	683a      	ldr	r2, [r7, #0]
    6b12:	4b28      	ldr	r3, [pc, #160]	; (6bb4 <Reset_Handler+0xcc>)
    6b14:	429a      	cmp	r2, r3
    6b16:	d3f3      	bcc.n	6b00 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6b18:	4b27      	ldr	r3, [pc, #156]	; (6bb8 <Reset_Handler+0xd0>)
    6b1a:	603b      	str	r3, [r7, #0]
    6b1c:	e004      	b.n	6b28 <Reset_Handler+0x40>
                *pDest++ = 0;
    6b1e:	683b      	ldr	r3, [r7, #0]
    6b20:	1d1a      	adds	r2, r3, #4
    6b22:	603a      	str	r2, [r7, #0]
    6b24:	2200      	movs	r2, #0
    6b26:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    6b28:	683a      	ldr	r2, [r7, #0]
    6b2a:	4b24      	ldr	r3, [pc, #144]	; (6bbc <Reset_Handler+0xd4>)
    6b2c:	429a      	cmp	r2, r3
    6b2e:	d3f6      	bcc.n	6b1e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6b30:	4b23      	ldr	r3, [pc, #140]	; (6bc0 <Reset_Handler+0xd8>)
    6b32:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6b34:	4b23      	ldr	r3, [pc, #140]	; (6bc4 <Reset_Handler+0xdc>)
    6b36:	687a      	ldr	r2, [r7, #4]
    6b38:	21ff      	movs	r1, #255	; 0xff
    6b3a:	438a      	bics	r2, r1
    6b3c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6b3e:	4a22      	ldr	r2, [pc, #136]	; (6bc8 <Reset_Handler+0xe0>)
    6b40:	2390      	movs	r3, #144	; 0x90
    6b42:	005b      	lsls	r3, r3, #1
    6b44:	2102      	movs	r1, #2
    6b46:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6b48:	4a20      	ldr	r2, [pc, #128]	; (6bcc <Reset_Handler+0xe4>)
    6b4a:	78d3      	ldrb	r3, [r2, #3]
    6b4c:	2103      	movs	r1, #3
    6b4e:	438b      	bics	r3, r1
    6b50:	1c19      	adds	r1, r3, #0
    6b52:	2302      	movs	r3, #2
    6b54:	430b      	orrs	r3, r1
    6b56:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6b58:	4a1c      	ldr	r2, [pc, #112]	; (6bcc <Reset_Handler+0xe4>)
    6b5a:	78d3      	ldrb	r3, [r2, #3]
    6b5c:	210c      	movs	r1, #12
    6b5e:	438b      	bics	r3, r1
    6b60:	1c19      	adds	r1, r3, #0
    6b62:	2308      	movs	r3, #8
    6b64:	430b      	orrs	r3, r1
    6b66:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    6b68:	4a19      	ldr	r2, [pc, #100]	; (6bd0 <Reset_Handler+0xe8>)
    6b6a:	7b93      	ldrb	r3, [r2, #14]
    6b6c:	2130      	movs	r1, #48	; 0x30
    6b6e:	438b      	bics	r3, r1
    6b70:	1c19      	adds	r1, r3, #0
    6b72:	2320      	movs	r3, #32
    6b74:	430b      	orrs	r3, r1
    6b76:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6b78:	4a15      	ldr	r2, [pc, #84]	; (6bd0 <Reset_Handler+0xe8>)
    6b7a:	7b93      	ldrb	r3, [r2, #14]
    6b7c:	210c      	movs	r1, #12
    6b7e:	438b      	bics	r3, r1
    6b80:	1c19      	adds	r1, r3, #0
    6b82:	2308      	movs	r3, #8
    6b84:	430b      	orrs	r3, r1
    6b86:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6b88:	4a11      	ldr	r2, [pc, #68]	; (6bd0 <Reset_Handler+0xe8>)
    6b8a:	7b93      	ldrb	r3, [r2, #14]
    6b8c:	2103      	movs	r1, #3
    6b8e:	438b      	bics	r3, r1
    6b90:	1c19      	adds	r1, r3, #0
    6b92:	2302      	movs	r3, #2
    6b94:	430b      	orrs	r3, r1
    6b96:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6b98:	4a0e      	ldr	r2, [pc, #56]	; (6bd4 <Reset_Handler+0xec>)
    6b9a:	6853      	ldr	r3, [r2, #4]
    6b9c:	2180      	movs	r1, #128	; 0x80
    6b9e:	430b      	orrs	r3, r1
    6ba0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6ba2:	4b0d      	ldr	r3, [pc, #52]	; (6bd8 <Reset_Handler+0xf0>)
    6ba4:	4798      	blx	r3

        /* Branch to main function */
        main();
    6ba6:	4b0d      	ldr	r3, [pc, #52]	; (6bdc <Reset_Handler+0xf4>)
    6ba8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6baa:	e7fe      	b.n	6baa <Reset_Handler+0xc2>
    6bac:	0000f0f8 	.word	0x0000f0f8
    6bb0:	20000000 	.word	0x20000000
    6bb4:	20000248 	.word	0x20000248
    6bb8:	20000248 	.word	0x20000248
    6bbc:	20000454 	.word	0x20000454
    6bc0:	00000000 	.word	0x00000000
    6bc4:	e000ed00 	.word	0xe000ed00
    6bc8:	41007000 	.word	0x41007000
    6bcc:	41005000 	.word	0x41005000
    6bd0:	41004800 	.word	0x41004800
    6bd4:	41004000 	.word	0x41004000
    6bd8:	00008e69 	.word	0x00008e69
    6bdc:	00008d79 	.word	0x00008d79

00006be0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6be0:	b580      	push	{r7, lr}
    6be2:	af00      	add	r7, sp, #0
        while (1) {
    6be4:	e7fe      	b.n	6be4 <Dummy_Handler+0x4>
	...

00006be8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6be8:	b580      	push	{r7, lr}
    6bea:	b084      	sub	sp, #16
    6bec:	af00      	add	r7, sp, #0
    6bee:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6bf0:	4b0a      	ldr	r3, [pc, #40]	; (6c1c <_sbrk+0x34>)
    6bf2:	681b      	ldr	r3, [r3, #0]
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	d102      	bne.n	6bfe <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6bf8:	4b08      	ldr	r3, [pc, #32]	; (6c1c <_sbrk+0x34>)
    6bfa:	4a09      	ldr	r2, [pc, #36]	; (6c20 <_sbrk+0x38>)
    6bfc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6bfe:	4b07      	ldr	r3, [pc, #28]	; (6c1c <_sbrk+0x34>)
    6c00:	681b      	ldr	r3, [r3, #0]
    6c02:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6c04:	4b05      	ldr	r3, [pc, #20]	; (6c1c <_sbrk+0x34>)
    6c06:	681a      	ldr	r2, [r3, #0]
    6c08:	687b      	ldr	r3, [r7, #4]
    6c0a:	18d2      	adds	r2, r2, r3
    6c0c:	4b03      	ldr	r3, [pc, #12]	; (6c1c <_sbrk+0x34>)
    6c0e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6c10:	68fb      	ldr	r3, [r7, #12]
}
    6c12:	0018      	movs	r0, r3
    6c14:	46bd      	mov	sp, r7
    6c16:	b004      	add	sp, #16
    6c18:	bd80      	pop	{r7, pc}
    6c1a:	46c0      	nop			; (mov r8, r8)
    6c1c:	200002b4 	.word	0x200002b4
    6c20:	20002458 	.word	0x20002458

00006c24 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6c24:	b580      	push	{r7, lr}
    6c26:	b082      	sub	sp, #8
    6c28:	af00      	add	r7, sp, #0
    6c2a:	6078      	str	r0, [r7, #4]
	return -1;
    6c2c:	2301      	movs	r3, #1
    6c2e:	425b      	negs	r3, r3
}
    6c30:	0018      	movs	r0, r3
    6c32:	46bd      	mov	sp, r7
    6c34:	b002      	add	sp, #8
    6c36:	bd80      	pop	{r7, pc}

00006c38 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    6c38:	b580      	push	{r7, lr}
    6c3a:	b082      	sub	sp, #8
    6c3c:	af00      	add	r7, sp, #0
    6c3e:	6078      	str	r0, [r7, #4]
    6c40:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6c42:	683b      	ldr	r3, [r7, #0]
    6c44:	2280      	movs	r2, #128	; 0x80
    6c46:	0192      	lsls	r2, r2, #6
    6c48:	605a      	str	r2, [r3, #4]

	return 0;
    6c4a:	2300      	movs	r3, #0
}
    6c4c:	0018      	movs	r0, r3
    6c4e:	46bd      	mov	sp, r7
    6c50:	b002      	add	sp, #8
    6c52:	bd80      	pop	{r7, pc}

00006c54 <_isatty>:

extern int _isatty(int file)
{
    6c54:	b580      	push	{r7, lr}
    6c56:	b082      	sub	sp, #8
    6c58:	af00      	add	r7, sp, #0
    6c5a:	6078      	str	r0, [r7, #4]
	return 1;
    6c5c:	2301      	movs	r3, #1
}
    6c5e:	0018      	movs	r0, r3
    6c60:	46bd      	mov	sp, r7
    6c62:	b002      	add	sp, #8
    6c64:	bd80      	pop	{r7, pc}

00006c66 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    6c66:	b580      	push	{r7, lr}
    6c68:	b084      	sub	sp, #16
    6c6a:	af00      	add	r7, sp, #0
    6c6c:	60f8      	str	r0, [r7, #12]
    6c6e:	60b9      	str	r1, [r7, #8]
    6c70:	607a      	str	r2, [r7, #4]
	return 0;
    6c72:	2300      	movs	r3, #0
}
    6c74:	0018      	movs	r0, r3
    6c76:	46bd      	mov	sp, r7
    6c78:	b004      	add	sp, #16
    6c7a:	bd80      	pop	{r7, pc}

00006c7c <system_pinmux_get_group_from_gpio_pin>:
{
    6c7c:	b580      	push	{r7, lr}
    6c7e:	b084      	sub	sp, #16
    6c80:	af00      	add	r7, sp, #0
    6c82:	0002      	movs	r2, r0
    6c84:	1dfb      	adds	r3, r7, #7
    6c86:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6c88:	230f      	movs	r3, #15
    6c8a:	18fb      	adds	r3, r7, r3
    6c8c:	1dfa      	adds	r2, r7, #7
    6c8e:	7812      	ldrb	r2, [r2, #0]
    6c90:	09d2      	lsrs	r2, r2, #7
    6c92:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6c94:	230e      	movs	r3, #14
    6c96:	18fb      	adds	r3, r7, r3
    6c98:	1dfa      	adds	r2, r7, #7
    6c9a:	7812      	ldrb	r2, [r2, #0]
    6c9c:	0952      	lsrs	r2, r2, #5
    6c9e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6ca0:	4b0d      	ldr	r3, [pc, #52]	; (6cd8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6ca2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6ca4:	230f      	movs	r3, #15
    6ca6:	18fb      	adds	r3, r7, r3
    6ca8:	781b      	ldrb	r3, [r3, #0]
    6caa:	2b00      	cmp	r3, #0
    6cac:	d10f      	bne.n	6cce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6cae:	230f      	movs	r3, #15
    6cb0:	18fb      	adds	r3, r7, r3
    6cb2:	781b      	ldrb	r3, [r3, #0]
    6cb4:	009b      	lsls	r3, r3, #2
    6cb6:	2210      	movs	r2, #16
    6cb8:	4694      	mov	ip, r2
    6cba:	44bc      	add	ip, r7
    6cbc:	4463      	add	r3, ip
    6cbe:	3b08      	subs	r3, #8
    6cc0:	681a      	ldr	r2, [r3, #0]
    6cc2:	230e      	movs	r3, #14
    6cc4:	18fb      	adds	r3, r7, r3
    6cc6:	781b      	ldrb	r3, [r3, #0]
    6cc8:	01db      	lsls	r3, r3, #7
    6cca:	18d3      	adds	r3, r2, r3
    6ccc:	e000      	b.n	6cd0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6cce:	2300      	movs	r3, #0
}
    6cd0:	0018      	movs	r0, r3
    6cd2:	46bd      	mov	sp, r7
    6cd4:	b004      	add	sp, #16
    6cd6:	bd80      	pop	{r7, pc}
    6cd8:	41004400 	.word	0x41004400

00006cdc <adc_is_syncing>:
{
    6cdc:	b580      	push	{r7, lr}
    6cde:	b084      	sub	sp, #16
    6ce0:	af00      	add	r7, sp, #0
    6ce2:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    6ce4:	687b      	ldr	r3, [r7, #4]
    6ce6:	681b      	ldr	r3, [r3, #0]
    6ce8:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    6cea:	68fb      	ldr	r3, [r7, #12]
    6cec:	7e5b      	ldrb	r3, [r3, #25]
    6cee:	b2db      	uxtb	r3, r3
    6cf0:	b25b      	sxtb	r3, r3
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	da01      	bge.n	6cfa <adc_is_syncing+0x1e>
		return true;
    6cf6:	2301      	movs	r3, #1
    6cf8:	e000      	b.n	6cfc <adc_is_syncing+0x20>
	return false;
    6cfa:	2300      	movs	r3, #0
}
    6cfc:	0018      	movs	r0, r3
    6cfe:	46bd      	mov	sp, r7
    6d00:	b004      	add	sp, #16
    6d02:	bd80      	pop	{r7, pc}

00006d04 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    6d04:	b580      	push	{r7, lr}
    6d06:	b086      	sub	sp, #24
    6d08:	af00      	add	r7, sp, #0
    6d0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6d0c:	687b      	ldr	r3, [r7, #4]
    6d0e:	681b      	ldr	r3, [r3, #0]
    6d10:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    6d12:	693b      	ldr	r3, [r7, #16]
    6d14:	7e1b      	ldrb	r3, [r3, #24]
    6d16:	b2db      	uxtb	r3, r3
    6d18:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    6d1a:	2300      	movs	r3, #0
    6d1c:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6d1e:	68fb      	ldr	r3, [r7, #12]
    6d20:	2201      	movs	r2, #1
    6d22:	4013      	ands	r3, r2
    6d24:	d003      	beq.n	6d2e <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    6d26:	697b      	ldr	r3, [r7, #20]
    6d28:	2201      	movs	r2, #1
    6d2a:	4313      	orrs	r3, r2
    6d2c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    6d2e:	68fb      	ldr	r3, [r7, #12]
    6d30:	2204      	movs	r2, #4
    6d32:	4013      	ands	r3, r2
    6d34:	d003      	beq.n	6d3e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    6d36:	697b      	ldr	r3, [r7, #20]
    6d38:	2202      	movs	r2, #2
    6d3a:	4313      	orrs	r3, r2
    6d3c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6d3e:	68fb      	ldr	r3, [r7, #12]
    6d40:	2202      	movs	r2, #2
    6d42:	4013      	ands	r3, r2
    6d44:	d003      	beq.n	6d4e <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    6d46:	697b      	ldr	r3, [r7, #20]
    6d48:	2204      	movs	r2, #4
    6d4a:	4313      	orrs	r3, r2
    6d4c:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    6d4e:	697b      	ldr	r3, [r7, #20]
}
    6d50:	0018      	movs	r0, r3
    6d52:	46bd      	mov	sp, r7
    6d54:	b006      	add	sp, #24
    6d56:	bd80      	pop	{r7, pc}

00006d58 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    6d58:	b580      	push	{r7, lr}
    6d5a:	b084      	sub	sp, #16
    6d5c:	af00      	add	r7, sp, #0
    6d5e:	6078      	str	r0, [r7, #4]
    6d60:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6d62:	687b      	ldr	r3, [r7, #4]
    6d64:	681b      	ldr	r3, [r3, #0]
    6d66:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    6d68:	2300      	movs	r3, #0
    6d6a:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    6d6c:	683b      	ldr	r3, [r7, #0]
    6d6e:	2201      	movs	r2, #1
    6d70:	4013      	ands	r3, r2
    6d72:	d003      	beq.n	6d7c <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    6d74:	68fb      	ldr	r3, [r7, #12]
    6d76:	2201      	movs	r2, #1
    6d78:	4313      	orrs	r3, r2
    6d7a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    6d7c:	683b      	ldr	r3, [r7, #0]
    6d7e:	2202      	movs	r2, #2
    6d80:	4013      	ands	r3, r2
    6d82:	d003      	beq.n	6d8c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    6d84:	68fb      	ldr	r3, [r7, #12]
    6d86:	2204      	movs	r2, #4
    6d88:	4313      	orrs	r3, r2
    6d8a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    6d8c:	683b      	ldr	r3, [r7, #0]
    6d8e:	2204      	movs	r2, #4
    6d90:	4013      	ands	r3, r2
    6d92:	d003      	beq.n	6d9c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    6d94:	68fb      	ldr	r3, [r7, #12]
    6d96:	2202      	movs	r2, #2
    6d98:	4313      	orrs	r3, r2
    6d9a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    6d9c:	68fb      	ldr	r3, [r7, #12]
    6d9e:	b2da      	uxtb	r2, r3
    6da0:	68bb      	ldr	r3, [r7, #8]
    6da2:	761a      	strb	r2, [r3, #24]
}
    6da4:	46c0      	nop			; (mov r8, r8)
    6da6:	46bd      	mov	sp, r7
    6da8:	b004      	add	sp, #16
    6daa:	bd80      	pop	{r7, pc}

00006dac <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    6dac:	b580      	push	{r7, lr}
    6dae:	b084      	sub	sp, #16
    6db0:	af00      	add	r7, sp, #0
    6db2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6db4:	687b      	ldr	r3, [r7, #4]
    6db6:	681b      	ldr	r3, [r3, #0]
    6db8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    6dba:	46c0      	nop			; (mov r8, r8)
    6dbc:	687b      	ldr	r3, [r7, #4]
    6dbe:	0018      	movs	r0, r3
    6dc0:	4b0e      	ldr	r3, [pc, #56]	; (6dfc <adc_enable+0x50>)
    6dc2:	4798      	blx	r3
    6dc4:	1e03      	subs	r3, r0, #0
    6dc6:	d1f9      	bne.n	6dbc <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    6dc8:	68fb      	ldr	r3, [r7, #12]
    6dca:	220f      	movs	r2, #15
    6dcc:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    6dce:	68fb      	ldr	r3, [r7, #12]
    6dd0:	220f      	movs	r2, #15
    6dd2:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6dd4:	68fb      	ldr	r3, [r7, #12]
    6dd6:	781b      	ldrb	r3, [r3, #0]
    6dd8:	b2db      	uxtb	r3, r3
    6dda:	2202      	movs	r2, #2
    6ddc:	4313      	orrs	r3, r2
    6dde:	b2da      	uxtb	r2, r3
    6de0:	68fb      	ldr	r3, [r7, #12]
    6de2:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    6de4:	46c0      	nop			; (mov r8, r8)
    6de6:	687b      	ldr	r3, [r7, #4]
    6de8:	0018      	movs	r0, r3
    6dea:	4b04      	ldr	r3, [pc, #16]	; (6dfc <adc_enable+0x50>)
    6dec:	4798      	blx	r3
    6dee:	1e03      	subs	r3, r0, #0
    6df0:	d1f9      	bne.n	6de6 <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    6df2:	2300      	movs	r3, #0
}
    6df4:	0018      	movs	r0, r3
    6df6:	46bd      	mov	sp, r7
    6df8:	b004      	add	sp, #16
    6dfa:	bd80      	pop	{r7, pc}
    6dfc:	00006cdd 	.word	0x00006cdd

00006e00 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    6e00:	b580      	push	{r7, lr}
    6e02:	b084      	sub	sp, #16
    6e04:	af00      	add	r7, sp, #0
    6e06:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6e08:	687b      	ldr	r3, [r7, #4]
    6e0a:	681b      	ldr	r3, [r3, #0]
    6e0c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    6e0e:	46c0      	nop			; (mov r8, r8)
    6e10:	687b      	ldr	r3, [r7, #4]
    6e12:	0018      	movs	r0, r3
    6e14:	4b0b      	ldr	r3, [pc, #44]	; (6e44 <adc_start_conversion+0x44>)
    6e16:	4798      	blx	r3
    6e18:	1e03      	subs	r3, r0, #0
    6e1a:	d1f9      	bne.n	6e10 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    6e1c:	68fb      	ldr	r3, [r7, #12]
    6e1e:	7b1b      	ldrb	r3, [r3, #12]
    6e20:	b2db      	uxtb	r3, r3
    6e22:	2202      	movs	r2, #2
    6e24:	4313      	orrs	r3, r2
    6e26:	b2da      	uxtb	r2, r3
    6e28:	68fb      	ldr	r3, [r7, #12]
    6e2a:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    6e2c:	46c0      	nop			; (mov r8, r8)
    6e2e:	687b      	ldr	r3, [r7, #4]
    6e30:	0018      	movs	r0, r3
    6e32:	4b04      	ldr	r3, [pc, #16]	; (6e44 <adc_start_conversion+0x44>)
    6e34:	4798      	blx	r3
    6e36:	1e03      	subs	r3, r0, #0
    6e38:	d1f9      	bne.n	6e2e <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    6e3a:	46c0      	nop			; (mov r8, r8)
    6e3c:	46bd      	mov	sp, r7
    6e3e:	b004      	add	sp, #16
    6e40:	bd80      	pop	{r7, pc}
    6e42:	46c0      	nop			; (mov r8, r8)
    6e44:	00006cdd 	.word	0x00006cdd

00006e48 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    6e48:	b580      	push	{r7, lr}
    6e4a:	b084      	sub	sp, #16
    6e4c:	af00      	add	r7, sp, #0
    6e4e:	6078      	str	r0, [r7, #4]
    6e50:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    6e52:	687b      	ldr	r3, [r7, #4]
    6e54:	0018      	movs	r0, r3
    6e56:	4b18      	ldr	r3, [pc, #96]	; (6eb8 <adc_read+0x70>)
    6e58:	4798      	blx	r3
    6e5a:	0002      	movs	r2, r0
    6e5c:	2301      	movs	r3, #1
    6e5e:	4013      	ands	r3, r2
    6e60:	d101      	bne.n	6e66 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    6e62:	2305      	movs	r3, #5
    6e64:	e023      	b.n	6eae <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    6e66:	687b      	ldr	r3, [r7, #4]
    6e68:	681b      	ldr	r3, [r3, #0]
    6e6a:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    6e6c:	46c0      	nop			; (mov r8, r8)
    6e6e:	687b      	ldr	r3, [r7, #4]
    6e70:	0018      	movs	r0, r3
    6e72:	4b12      	ldr	r3, [pc, #72]	; (6ebc <adc_read+0x74>)
    6e74:	4798      	blx	r3
    6e76:	1e03      	subs	r3, r0, #0
    6e78:	d1f9      	bne.n	6e6e <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    6e7a:	68fb      	ldr	r3, [r7, #12]
    6e7c:	8b5b      	ldrh	r3, [r3, #26]
    6e7e:	b29a      	uxth	r2, r3
    6e80:	683b      	ldr	r3, [r7, #0]
    6e82:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    6e84:	687b      	ldr	r3, [r7, #4]
    6e86:	2101      	movs	r1, #1
    6e88:	0018      	movs	r0, r3
    6e8a:	4b0d      	ldr	r3, [pc, #52]	; (6ec0 <adc_read+0x78>)
    6e8c:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    6e8e:	687b      	ldr	r3, [r7, #4]
    6e90:	0018      	movs	r0, r3
    6e92:	4b09      	ldr	r3, [pc, #36]	; (6eb8 <adc_read+0x70>)
    6e94:	4798      	blx	r3
    6e96:	0002      	movs	r2, r0
    6e98:	2304      	movs	r3, #4
    6e9a:	4013      	ands	r3, r2
    6e9c:	d006      	beq.n	6eac <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    6e9e:	687b      	ldr	r3, [r7, #4]
    6ea0:	2104      	movs	r1, #4
    6ea2:	0018      	movs	r0, r3
    6ea4:	4b06      	ldr	r3, [pc, #24]	; (6ec0 <adc_read+0x78>)
    6ea6:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    6ea8:	231e      	movs	r3, #30
    6eaa:	e000      	b.n	6eae <adc_read+0x66>
	}

	return STATUS_OK;
    6eac:	2300      	movs	r3, #0
}
    6eae:	0018      	movs	r0, r3
    6eb0:	46bd      	mov	sp, r7
    6eb2:	b004      	add	sp, #16
    6eb4:	bd80      	pop	{r7, pc}
    6eb6:	46c0      	nop			; (mov r8, r8)
    6eb8:	00006d05 	.word	0x00006d05
    6ebc:	00006cdd 	.word	0x00006cdd
    6ec0:	00006d59 	.word	0x00006d59

00006ec4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    6ec4:	b580      	push	{r7, lr}
    6ec6:	b082      	sub	sp, #8
    6ec8:	af00      	add	r7, sp, #0
    6eca:	0002      	movs	r2, r0
    6ecc:	1dfb      	adds	r3, r7, #7
    6ece:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6ed0:	4b06      	ldr	r3, [pc, #24]	; (6eec <system_interrupt_enable+0x28>)
    6ed2:	1dfa      	adds	r2, r7, #7
    6ed4:	7812      	ldrb	r2, [r2, #0]
    6ed6:	0011      	movs	r1, r2
    6ed8:	221f      	movs	r2, #31
    6eda:	400a      	ands	r2, r1
    6edc:	2101      	movs	r1, #1
    6ede:	4091      	lsls	r1, r2
    6ee0:	000a      	movs	r2, r1
    6ee2:	601a      	str	r2, [r3, #0]
}
    6ee4:	46c0      	nop			; (mov r8, r8)
    6ee6:	46bd      	mov	sp, r7
    6ee8:	b002      	add	sp, #8
    6eea:	bd80      	pop	{r7, pc}
    6eec:	e000e100 	.word	0xe000e100

00006ef0 <i2c_master_is_syncing>:
{
    6ef0:	b580      	push	{r7, lr}
    6ef2:	b084      	sub	sp, #16
    6ef4:	af00      	add	r7, sp, #0
    6ef6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    6ef8:	687b      	ldr	r3, [r7, #4]
    6efa:	681b      	ldr	r3, [r3, #0]
    6efc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    6efe:	68fb      	ldr	r3, [r7, #12]
    6f00:	69db      	ldr	r3, [r3, #28]
    6f02:	2207      	movs	r2, #7
    6f04:	4013      	ands	r3, r2
    6f06:	1e5a      	subs	r2, r3, #1
    6f08:	4193      	sbcs	r3, r2
    6f0a:	b2db      	uxtb	r3, r3
}
    6f0c:	0018      	movs	r0, r3
    6f0e:	46bd      	mov	sp, r7
    6f10:	b004      	add	sp, #16
    6f12:	bd80      	pop	{r7, pc}

00006f14 <_i2c_master_wait_for_sync>:
{
    6f14:	b580      	push	{r7, lr}
    6f16:	b082      	sub	sp, #8
    6f18:	af00      	add	r7, sp, #0
    6f1a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    6f1c:	46c0      	nop			; (mov r8, r8)
    6f1e:	687b      	ldr	r3, [r7, #4]
    6f20:	0018      	movs	r0, r3
    6f22:	4b04      	ldr	r3, [pc, #16]	; (6f34 <_i2c_master_wait_for_sync+0x20>)
    6f24:	4798      	blx	r3
    6f26:	1e03      	subs	r3, r0, #0
    6f28:	d1f9      	bne.n	6f1e <_i2c_master_wait_for_sync+0xa>
}
    6f2a:	46c0      	nop			; (mov r8, r8)
    6f2c:	46bd      	mov	sp, r7
    6f2e:	b002      	add	sp, #8
    6f30:	bd80      	pop	{r7, pc}
    6f32:	46c0      	nop			; (mov r8, r8)
    6f34:	00006ef1 	.word	0x00006ef1

00006f38 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    6f38:	b580      	push	{r7, lr}
    6f3a:	b082      	sub	sp, #8
    6f3c:	af00      	add	r7, sp, #0
    6f3e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    6f40:	687b      	ldr	r3, [r7, #4]
    6f42:	2264      	movs	r2, #100	; 0x64
    6f44:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    6f46:	687b      	ldr	r3, [r7, #4]
    6f48:	4a1b      	ldr	r2, [pc, #108]	; (6fb8 <i2c_master_get_config_defaults+0x80>)
    6f4a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    6f4c:	687b      	ldr	r3, [r7, #4]
    6f4e:	2200      	movs	r2, #0
    6f50:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    6f52:	687b      	ldr	r3, [r7, #4]
    6f54:	2200      	movs	r2, #0
    6f56:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    6f58:	687b      	ldr	r3, [r7, #4]
    6f5a:	2200      	movs	r2, #0
    6f5c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    6f5e:	687b      	ldr	r3, [r7, #4]
    6f60:	2280      	movs	r2, #128	; 0x80
    6f62:	0392      	lsls	r2, r2, #14
    6f64:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    6f66:	687b      	ldr	r3, [r7, #4]
    6f68:	2201      	movs	r2, #1
    6f6a:	4252      	negs	r2, r2
    6f6c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    6f6e:	687b      	ldr	r3, [r7, #4]
    6f70:	2201      	movs	r2, #1
    6f72:	4252      	negs	r2, r2
    6f74:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    6f76:	687b      	ldr	r3, [r7, #4]
    6f78:	2200      	movs	r2, #0
    6f7a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    6f7c:	687b      	ldr	r3, [r7, #4]
    6f7e:	2200      	movs	r2, #0
    6f80:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    6f82:	687b      	ldr	r3, [r7, #4]
    6f84:	2224      	movs	r2, #36	; 0x24
    6f86:	2100      	movs	r1, #0
    6f88:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    6f8a:	687b      	ldr	r3, [r7, #4]
    6f8c:	2200      	movs	r2, #0
    6f8e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    6f90:	687b      	ldr	r3, [r7, #4]
    6f92:	222c      	movs	r2, #44	; 0x2c
    6f94:	2100      	movs	r1, #0
    6f96:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    6f98:	687b      	ldr	r3, [r7, #4]
    6f9a:	222d      	movs	r2, #45	; 0x2d
    6f9c:	2100      	movs	r1, #0
    6f9e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    6fa0:	687b      	ldr	r3, [r7, #4]
    6fa2:	222e      	movs	r2, #46	; 0x2e
    6fa4:	2100      	movs	r1, #0
    6fa6:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    6fa8:	687b      	ldr	r3, [r7, #4]
    6faa:	22d7      	movs	r2, #215	; 0xd7
    6fac:	861a      	strh	r2, [r3, #48]	; 0x30
}
    6fae:	46c0      	nop			; (mov r8, r8)
    6fb0:	46bd      	mov	sp, r7
    6fb2:	b002      	add	sp, #8
    6fb4:	bd80      	pop	{r7, pc}
    6fb6:	46c0      	nop			; (mov r8, r8)
    6fb8:	00000d48 	.word	0x00000d48

00006fbc <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    6fbc:	b580      	push	{r7, lr}
    6fbe:	b084      	sub	sp, #16
    6fc0:	af00      	add	r7, sp, #0
    6fc2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6fc4:	687b      	ldr	r3, [r7, #4]
    6fc6:	681b      	ldr	r3, [r3, #0]
    6fc8:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    6fca:	2300      	movs	r3, #0
    6fcc:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    6fce:	687b      	ldr	r3, [r7, #4]
    6fd0:	0018      	movs	r0, r3
    6fd2:	4b14      	ldr	r3, [pc, #80]	; (7024 <i2c_master_enable+0x68>)
    6fd4:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6fd6:	68bb      	ldr	r3, [r7, #8]
    6fd8:	681b      	ldr	r3, [r3, #0]
    6fda:	2202      	movs	r2, #2
    6fdc:	431a      	orrs	r2, r3
    6fde:	68bb      	ldr	r3, [r7, #8]
    6fe0:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6fe2:	687b      	ldr	r3, [r7, #4]
    6fe4:	681b      	ldr	r3, [r3, #0]
    6fe6:	0018      	movs	r0, r3
    6fe8:	4b0f      	ldr	r3, [pc, #60]	; (7028 <i2c_master_enable+0x6c>)
    6fea:	4798      	blx	r3
    6fec:	0003      	movs	r3, r0
    6fee:	0018      	movs	r0, r3
    6ff0:	4b0e      	ldr	r3, [pc, #56]	; (702c <i2c_master_enable+0x70>)
    6ff2:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    6ff4:	e00c      	b.n	7010 <i2c_master_enable+0x54>
		timeout_counter++;
    6ff6:	68fb      	ldr	r3, [r7, #12]
    6ff8:	3301      	adds	r3, #1
    6ffa:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    6ffc:	687b      	ldr	r3, [r7, #4]
    6ffe:	88db      	ldrh	r3, [r3, #6]
    7000:	001a      	movs	r2, r3
    7002:	68fb      	ldr	r3, [r7, #12]
    7004:	429a      	cmp	r2, r3
    7006:	d803      	bhi.n	7010 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    7008:	68bb      	ldr	r3, [r7, #8]
    700a:	2210      	movs	r2, #16
    700c:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    700e:	e006      	b.n	701e <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    7010:	68bb      	ldr	r3, [r7, #8]
    7012:	8b5b      	ldrh	r3, [r3, #26]
    7014:	b29b      	uxth	r3, r3
    7016:	001a      	movs	r2, r3
    7018:	2310      	movs	r3, #16
    701a:	4013      	ands	r3, r2
    701c:	d0eb      	beq.n	6ff6 <i2c_master_enable+0x3a>
		}
	}
}
    701e:	46bd      	mov	sp, r7
    7020:	b004      	add	sp, #16
    7022:	bd80      	pop	{r7, pc}
    7024:	00006f15 	.word	0x00006f15
    7028:	000057fd 	.word	0x000057fd
    702c:	00006ec5 	.word	0x00006ec5

00007030 <crc32_calculate>:
 * \note To calculate the CRC of multiple blocks, use this function first, then
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
    7030:	b580      	push	{r7, lr}
    7032:	b084      	sub	sp, #16
    7034:	af00      	add	r7, sp, #0
    7036:	60f8      	str	r0, [r7, #12]
    7038:	60b9      	str	r1, [r7, #8]
    703a:	607a      	str	r2, [r7, #4]
	*crc = 0;
    703c:	687b      	ldr	r3, [r7, #4]
    703e:	2200      	movs	r2, #0
    7040:	601a      	str	r2, [r3, #0]

	return crc32_recalculate(data, length, crc);
    7042:	687a      	ldr	r2, [r7, #4]
    7044:	68b9      	ldr	r1, [r7, #8]
    7046:	68fb      	ldr	r3, [r7, #12]
    7048:	0018      	movs	r0, r3
    704a:	4b03      	ldr	r3, [pc, #12]	; (7058 <crc32_calculate+0x28>)
    704c:	4798      	blx	r3
    704e:	0003      	movs	r3, r0
}
    7050:	0018      	movs	r0, r3
    7052:	46bd      	mov	sp, r7
    7054:	b004      	add	sp, #16
    7056:	bd80      	pop	{r7, pc}
    7058:	00000f15 	.word	0x00000f15

0000705c <port_get_group_from_gpio_pin>:
{
    705c:	b580      	push	{r7, lr}
    705e:	b082      	sub	sp, #8
    7060:	af00      	add	r7, sp, #0
    7062:	0002      	movs	r2, r0
    7064:	1dfb      	adds	r3, r7, #7
    7066:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7068:	1dfb      	adds	r3, r7, #7
    706a:	781b      	ldrb	r3, [r3, #0]
    706c:	0018      	movs	r0, r3
    706e:	4b03      	ldr	r3, [pc, #12]	; (707c <port_get_group_from_gpio_pin+0x20>)
    7070:	4798      	blx	r3
    7072:	0003      	movs	r3, r0
}
    7074:	0018      	movs	r0, r3
    7076:	46bd      	mov	sp, r7
    7078:	b002      	add	sp, #8
    707a:	bd80      	pop	{r7, pc}
    707c:	00006c7d 	.word	0x00006c7d

00007080 <port_get_config_defaults>:
{
    7080:	b580      	push	{r7, lr}
    7082:	b082      	sub	sp, #8
    7084:	af00      	add	r7, sp, #0
    7086:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    7088:	687b      	ldr	r3, [r7, #4]
    708a:	2200      	movs	r2, #0
    708c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    708e:	687b      	ldr	r3, [r7, #4]
    7090:	2201      	movs	r2, #1
    7092:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    7094:	687b      	ldr	r3, [r7, #4]
    7096:	2200      	movs	r2, #0
    7098:	709a      	strb	r2, [r3, #2]
}
    709a:	46c0      	nop			; (mov r8, r8)
    709c:	46bd      	mov	sp, r7
    709e:	b002      	add	sp, #8
    70a0:	bd80      	pop	{r7, pc}
	...

000070a4 <port_pin_get_input_level>:
{
    70a4:	b580      	push	{r7, lr}
    70a6:	b084      	sub	sp, #16
    70a8:	af00      	add	r7, sp, #0
    70aa:	0002      	movs	r2, r0
    70ac:	1dfb      	adds	r3, r7, #7
    70ae:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    70b0:	1dfb      	adds	r3, r7, #7
    70b2:	781b      	ldrb	r3, [r3, #0]
    70b4:	0018      	movs	r0, r3
    70b6:	4b0b      	ldr	r3, [pc, #44]	; (70e4 <port_pin_get_input_level+0x40>)
    70b8:	4798      	blx	r3
    70ba:	0003      	movs	r3, r0
    70bc:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    70be:	1dfb      	adds	r3, r7, #7
    70c0:	781b      	ldrb	r3, [r3, #0]
    70c2:	221f      	movs	r2, #31
    70c4:	4013      	ands	r3, r2
    70c6:	2201      	movs	r2, #1
    70c8:	409a      	lsls	r2, r3
    70ca:	0013      	movs	r3, r2
    70cc:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    70ce:	68fb      	ldr	r3, [r7, #12]
    70d0:	6a1b      	ldr	r3, [r3, #32]
    70d2:	68ba      	ldr	r2, [r7, #8]
    70d4:	4013      	ands	r3, r2
    70d6:	1e5a      	subs	r2, r3, #1
    70d8:	4193      	sbcs	r3, r2
    70da:	b2db      	uxtb	r3, r3
}
    70dc:	0018      	movs	r0, r3
    70de:	46bd      	mov	sp, r7
    70e0:	b004      	add	sp, #16
    70e2:	bd80      	pop	{r7, pc}
    70e4:	0000705d 	.word	0x0000705d

000070e8 <port_pin_set_output_level>:
{
    70e8:	b580      	push	{r7, lr}
    70ea:	b084      	sub	sp, #16
    70ec:	af00      	add	r7, sp, #0
    70ee:	0002      	movs	r2, r0
    70f0:	1dfb      	adds	r3, r7, #7
    70f2:	701a      	strb	r2, [r3, #0]
    70f4:	1dbb      	adds	r3, r7, #6
    70f6:	1c0a      	adds	r2, r1, #0
    70f8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    70fa:	1dfb      	adds	r3, r7, #7
    70fc:	781b      	ldrb	r3, [r3, #0]
    70fe:	0018      	movs	r0, r3
    7100:	4b0d      	ldr	r3, [pc, #52]	; (7138 <port_pin_set_output_level+0x50>)
    7102:	4798      	blx	r3
    7104:	0003      	movs	r3, r0
    7106:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7108:	1dfb      	adds	r3, r7, #7
    710a:	781b      	ldrb	r3, [r3, #0]
    710c:	221f      	movs	r2, #31
    710e:	4013      	ands	r3, r2
    7110:	2201      	movs	r2, #1
    7112:	409a      	lsls	r2, r3
    7114:	0013      	movs	r3, r2
    7116:	60bb      	str	r3, [r7, #8]
	if (level) {
    7118:	1dbb      	adds	r3, r7, #6
    711a:	781b      	ldrb	r3, [r3, #0]
    711c:	2b00      	cmp	r3, #0
    711e:	d003      	beq.n	7128 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    7120:	68fb      	ldr	r3, [r7, #12]
    7122:	68ba      	ldr	r2, [r7, #8]
    7124:	619a      	str	r2, [r3, #24]
}
    7126:	e002      	b.n	712e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    7128:	68fb      	ldr	r3, [r7, #12]
    712a:	68ba      	ldr	r2, [r7, #8]
    712c:	615a      	str	r2, [r3, #20]
}
    712e:	46c0      	nop			; (mov r8, r8)
    7130:	46bd      	mov	sp, r7
    7132:	b004      	add	sp, #16
    7134:	bd80      	pop	{r7, pc}
    7136:	46c0      	nop			; (mov r8, r8)
    7138:	0000705d 	.word	0x0000705d

0000713c <spi_is_syncing>:
{
    713c:	b580      	push	{r7, lr}
    713e:	b084      	sub	sp, #16
    7140:	af00      	add	r7, sp, #0
    7142:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7144:	687b      	ldr	r3, [r7, #4]
    7146:	681b      	ldr	r3, [r3, #0]
    7148:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    714a:	68fb      	ldr	r3, [r7, #12]
    714c:	69db      	ldr	r3, [r3, #28]
    714e:	1e5a      	subs	r2, r3, #1
    7150:	4193      	sbcs	r3, r2
    7152:	b2db      	uxtb	r3, r3
}
    7154:	0018      	movs	r0, r3
    7156:	46bd      	mov	sp, r7
    7158:	b004      	add	sp, #16
    715a:	bd80      	pop	{r7, pc}

0000715c <spi_get_config_defaults>:
{
    715c:	b580      	push	{r7, lr}
    715e:	b082      	sub	sp, #8
    7160:	af00      	add	r7, sp, #0
    7162:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    7164:	687b      	ldr	r3, [r7, #4]
    7166:	2201      	movs	r2, #1
    7168:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    716a:	687b      	ldr	r3, [r7, #4]
    716c:	2200      	movs	r2, #0
    716e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    7170:	687b      	ldr	r3, [r7, #4]
    7172:	2200      	movs	r2, #0
    7174:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    7176:	687b      	ldr	r3, [r7, #4]
    7178:	22c0      	movs	r2, #192	; 0xc0
    717a:	0392      	lsls	r2, r2, #14
    717c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    717e:	687b      	ldr	r3, [r7, #4]
    7180:	2200      	movs	r2, #0
    7182:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    7184:	687b      	ldr	r3, [r7, #4]
    7186:	2200      	movs	r2, #0
    7188:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    718a:	687b      	ldr	r3, [r7, #4]
    718c:	2201      	movs	r2, #1
    718e:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    7190:	687b      	ldr	r3, [r7, #4]
    7192:	2201      	movs	r2, #1
    7194:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    7196:	687b      	ldr	r3, [r7, #4]
    7198:	2200      	movs	r2, #0
    719a:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    719c:	687b      	ldr	r3, [r7, #4]
    719e:	2224      	movs	r2, #36	; 0x24
    71a0:	2100      	movs	r1, #0
    71a2:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    71a4:	687b      	ldr	r3, [r7, #4]
    71a6:	3318      	adds	r3, #24
    71a8:	220c      	movs	r2, #12
    71aa:	2100      	movs	r1, #0
    71ac:	0018      	movs	r0, r3
    71ae:	4b0a      	ldr	r3, [pc, #40]	; (71d8 <spi_get_config_defaults+0x7c>)
    71b0:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    71b2:	687b      	ldr	r3, [r7, #4]
    71b4:	4a09      	ldr	r2, [pc, #36]	; (71dc <spi_get_config_defaults+0x80>)
    71b6:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    71b8:	687b      	ldr	r3, [r7, #4]
    71ba:	2200      	movs	r2, #0
    71bc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    71be:	687b      	ldr	r3, [r7, #4]
    71c0:	2200      	movs	r2, #0
    71c2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    71c4:	687b      	ldr	r3, [r7, #4]
    71c6:	2200      	movs	r2, #0
    71c8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    71ca:	687b      	ldr	r3, [r7, #4]
    71cc:	2200      	movs	r2, #0
    71ce:	635a      	str	r2, [r3, #52]	; 0x34
};
    71d0:	46c0      	nop			; (mov r8, r8)
    71d2:	46bd      	mov	sp, r7
    71d4:	b002      	add	sp, #8
    71d6:	bd80      	pop	{r7, pc}
    71d8:	00008f1f 	.word	0x00008f1f
    71dc:	000186a0 	.word	0x000186a0

000071e0 <spi_enable>:
{
    71e0:	b580      	push	{r7, lr}
    71e2:	b084      	sub	sp, #16
    71e4:	af00      	add	r7, sp, #0
    71e6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    71e8:	687b      	ldr	r3, [r7, #4]
    71ea:	681b      	ldr	r3, [r3, #0]
    71ec:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    71ee:	687b      	ldr	r3, [r7, #4]
    71f0:	681b      	ldr	r3, [r3, #0]
    71f2:	0018      	movs	r0, r3
    71f4:	4b0b      	ldr	r3, [pc, #44]	; (7224 <spi_enable+0x44>)
    71f6:	4798      	blx	r3
    71f8:	0003      	movs	r3, r0
    71fa:	0018      	movs	r0, r3
    71fc:	4b0a      	ldr	r3, [pc, #40]	; (7228 <spi_enable+0x48>)
    71fe:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    7200:	46c0      	nop			; (mov r8, r8)
    7202:	687b      	ldr	r3, [r7, #4]
    7204:	0018      	movs	r0, r3
    7206:	4b09      	ldr	r3, [pc, #36]	; (722c <spi_enable+0x4c>)
    7208:	4798      	blx	r3
    720a:	1e03      	subs	r3, r0, #0
    720c:	d1f9      	bne.n	7202 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    720e:	68fb      	ldr	r3, [r7, #12]
    7210:	681b      	ldr	r3, [r3, #0]
    7212:	2202      	movs	r2, #2
    7214:	431a      	orrs	r2, r3
    7216:	68fb      	ldr	r3, [r7, #12]
    7218:	601a      	str	r2, [r3, #0]
}
    721a:	46c0      	nop			; (mov r8, r8)
    721c:	46bd      	mov	sp, r7
    721e:	b004      	add	sp, #16
    7220:	bd80      	pop	{r7, pc}
    7222:	46c0      	nop			; (mov r8, r8)
    7224:	000057fd 	.word	0x000057fd
    7228:	00006ec5 	.word	0x00006ec5
    722c:	0000713d 	.word	0x0000713d

00007230 <at25dfx_spi_get_config_defaults>:
 *
 * \param[out] config Address of config struct to initialize.
 */
static inline void at25dfx_spi_get_config_defaults(
		struct spi_config *const config)
{
    7230:	b580      	push	{r7, lr}
    7232:	b082      	sub	sp, #8
    7234:	af00      	add	r7, sp, #0
    7236:	6078      	str	r0, [r7, #4]
	spi_get_config_defaults(config);
    7238:	687b      	ldr	r3, [r7, #4]
    723a:	0018      	movs	r0, r3
    723c:	4b02      	ldr	r3, [pc, #8]	; (7248 <at25dfx_spi_get_config_defaults+0x18>)
    723e:	4798      	blx	r3
}
    7240:	46c0      	nop			; (mov r8, r8)
    7242:	46bd      	mov	sp, r7
    7244:	b002      	add	sp, #8
    7246:	bd80      	pop	{r7, pc}
    7248:	0000715d 	.word	0x0000715d

0000724c <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    724c:	b580      	push	{r7, lr}
    724e:	b086      	sub	sp, #24
    7250:	af00      	add	r7, sp, #0
    7252:	60f8      	str	r0, [r7, #12]
    7254:	60b9      	str	r1, [r7, #8]
    7256:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    7258:	687b      	ldr	r3, [r7, #4]
    725a:	781a      	ldrb	r2, [r3, #0]
    725c:	68fb      	ldr	r3, [r7, #12]
    725e:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    7260:	687b      	ldr	r3, [r7, #4]
    7262:	785a      	ldrb	r2, [r3, #1]
    7264:	68fb      	ldr	r3, [r7, #12]
    7266:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    7268:	68fb      	ldr	r3, [r7, #12]
    726a:	68ba      	ldr	r2, [r7, #8]
    726c:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    726e:	2314      	movs	r3, #20
    7270:	18fb      	adds	r3, r7, r3
    7272:	0018      	movs	r0, r3
    7274:	4b0c      	ldr	r3, [pc, #48]	; (72a8 <at25dfx_chip_init+0x5c>)
    7276:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    7278:	2314      	movs	r3, #20
    727a:	18fb      	adds	r3, r7, r3
    727c:	2201      	movs	r2, #1
    727e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    7280:	68fb      	ldr	r3, [r7, #12]
    7282:	795b      	ldrb	r3, [r3, #5]
    7284:	2214      	movs	r2, #20
    7286:	18ba      	adds	r2, r7, r2
    7288:	0011      	movs	r1, r2
    728a:	0018      	movs	r0, r3
    728c:	4b07      	ldr	r3, [pc, #28]	; (72ac <at25dfx_chip_init+0x60>)
    728e:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    7290:	68fb      	ldr	r3, [r7, #12]
    7292:	795b      	ldrb	r3, [r3, #5]
    7294:	2101      	movs	r1, #1
    7296:	0018      	movs	r0, r3
    7298:	4b05      	ldr	r3, [pc, #20]	; (72b0 <at25dfx_chip_init+0x64>)
    729a:	4798      	blx	r3

	return STATUS_OK;
    729c:	2300      	movs	r3, #0
}
    729e:	0018      	movs	r0, r3
    72a0:	46bd      	mov	sp, r7
    72a2:	b006      	add	sp, #24
    72a4:	bd80      	pop	{r7, pc}
    72a6:	46c0      	nop			; (mov r8, r8)
    72a8:	00007081 	.word	0x00007081
    72ac:	00005ad9 	.word	0x00005ad9
    72b0:	000070e9 	.word	0x000070e9

000072b4 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    72b4:	b580      	push	{r7, lr}
    72b6:	b082      	sub	sp, #8
    72b8:	af00      	add	r7, sp, #0
    72ba:	6078      	str	r0, [r7, #4]
    72bc:	000a      	movs	r2, r1
    72be:	1cfb      	adds	r3, r7, #3
    72c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    72c2:	687b      	ldr	r3, [r7, #4]
    72c4:	7e5b      	ldrb	r3, [r3, #25]
    72c6:	b2db      	uxtb	r3, r3
    72c8:	b25a      	sxtb	r2, r3
    72ca:	1cfb      	adds	r3, r7, #3
    72cc:	781b      	ldrb	r3, [r3, #0]
    72ce:	2101      	movs	r1, #1
    72d0:	4099      	lsls	r1, r3
    72d2:	000b      	movs	r3, r1
    72d4:	b25b      	sxtb	r3, r3
    72d6:	4313      	orrs	r3, r2
    72d8:	b25b      	sxtb	r3, r3
    72da:	b2da      	uxtb	r2, r3
    72dc:	687b      	ldr	r3, [r7, #4]
    72de:	765a      	strb	r2, [r3, #25]
}
    72e0:	46c0      	nop			; (mov r8, r8)
    72e2:	46bd      	mov	sp, r7
    72e4:	b002      	add	sp, #8
    72e6:	bd80      	pop	{r7, pc}

000072e8 <usart_is_syncing>:
{
    72e8:	b580      	push	{r7, lr}
    72ea:	b084      	sub	sp, #16
    72ec:	af00      	add	r7, sp, #0
    72ee:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    72f0:	687b      	ldr	r3, [r7, #4]
    72f2:	681b      	ldr	r3, [r3, #0]
    72f4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    72f6:	68fb      	ldr	r3, [r7, #12]
    72f8:	69db      	ldr	r3, [r3, #28]
    72fa:	1e5a      	subs	r2, r3, #1
    72fc:	4193      	sbcs	r3, r2
    72fe:	b2db      	uxtb	r3, r3
}
    7300:	0018      	movs	r0, r3
    7302:	46bd      	mov	sp, r7
    7304:	b004      	add	sp, #16
    7306:	bd80      	pop	{r7, pc}

00007308 <_usart_wait_for_sync>:
{
    7308:	b580      	push	{r7, lr}
    730a:	b082      	sub	sp, #8
    730c:	af00      	add	r7, sp, #0
    730e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    7310:	46c0      	nop			; (mov r8, r8)
    7312:	687b      	ldr	r3, [r7, #4]
    7314:	0018      	movs	r0, r3
    7316:	4b04      	ldr	r3, [pc, #16]	; (7328 <_usart_wait_for_sync+0x20>)
    7318:	4798      	blx	r3
    731a:	1e03      	subs	r3, r0, #0
    731c:	d1f9      	bne.n	7312 <_usart_wait_for_sync+0xa>
}
    731e:	46c0      	nop			; (mov r8, r8)
    7320:	46bd      	mov	sp, r7
    7322:	b002      	add	sp, #8
    7324:	bd80      	pop	{r7, pc}
    7326:	46c0      	nop			; (mov r8, r8)
    7328:	000072e9 	.word	0x000072e9

0000732c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    732c:	b580      	push	{r7, lr}
    732e:	b082      	sub	sp, #8
    7330:	af00      	add	r7, sp, #0
    7332:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    7334:	687b      	ldr	r3, [r7, #4]
    7336:	2280      	movs	r2, #128	; 0x80
    7338:	05d2      	lsls	r2, r2, #23
    733a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    733c:	687b      	ldr	r3, [r7, #4]
    733e:	2200      	movs	r2, #0
    7340:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    7342:	687b      	ldr	r3, [r7, #4]
    7344:	22ff      	movs	r2, #255	; 0xff
    7346:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    7348:	687b      	ldr	r3, [r7, #4]
    734a:	2200      	movs	r2, #0
    734c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    734e:	687b      	ldr	r3, [r7, #4]
    7350:	2200      	movs	r2, #0
    7352:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    7354:	687b      	ldr	r3, [r7, #4]
    7356:	2296      	movs	r2, #150	; 0x96
    7358:	0192      	lsls	r2, r2, #6
    735a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    735c:	687b      	ldr	r3, [r7, #4]
    735e:	2224      	movs	r2, #36	; 0x24
    7360:	2101      	movs	r1, #1
    7362:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    7364:	687b      	ldr	r3, [r7, #4]
    7366:	2225      	movs	r2, #37	; 0x25
    7368:	2101      	movs	r1, #1
    736a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    736c:	687b      	ldr	r3, [r7, #4]
    736e:	2226      	movs	r2, #38	; 0x26
    7370:	2100      	movs	r1, #0
    7372:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    7374:	687b      	ldr	r3, [r7, #4]
    7376:	2227      	movs	r2, #39	; 0x27
    7378:	2100      	movs	r1, #0
    737a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    737c:	687b      	ldr	r3, [r7, #4]
    737e:	2200      	movs	r2, #0
    7380:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    7382:	687b      	ldr	r3, [r7, #4]
    7384:	2288      	movs	r2, #136	; 0x88
    7386:	0352      	lsls	r2, r2, #13
    7388:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    738a:	687b      	ldr	r3, [r7, #4]
    738c:	222c      	movs	r2, #44	; 0x2c
    738e:	2100      	movs	r1, #0
    7390:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    7392:	687b      	ldr	r3, [r7, #4]
    7394:	222d      	movs	r2, #45	; 0x2d
    7396:	2100      	movs	r1, #0
    7398:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    739a:	687b      	ldr	r3, [r7, #4]
    739c:	2200      	movs	r2, #0
    739e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    73a0:	687b      	ldr	r3, [r7, #4]
    73a2:	2200      	movs	r2, #0
    73a4:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    73a6:	687b      	ldr	r3, [r7, #4]
    73a8:	2200      	movs	r2, #0
    73aa:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    73ac:	687b      	ldr	r3, [r7, #4]
    73ae:	2200      	movs	r2, #0
    73b0:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    73b2:	687b      	ldr	r3, [r7, #4]
    73b4:	2200      	movs	r2, #0
    73b6:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    73b8:	687b      	ldr	r3, [r7, #4]
    73ba:	2200      	movs	r2, #0
    73bc:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    73be:	687b      	ldr	r3, [r7, #4]
    73c0:	2200      	movs	r2, #0
    73c2:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    73c4:	687b      	ldr	r3, [r7, #4]
    73c6:	2200      	movs	r2, #0
    73c8:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    73ca:	687b      	ldr	r3, [r7, #4]
    73cc:	2200      	movs	r2, #0
    73ce:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    73d0:	687b      	ldr	r3, [r7, #4]
    73d2:	2200      	movs	r2, #0
    73d4:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    73d6:	687b      	ldr	r3, [r7, #4]
    73d8:	2213      	movs	r2, #19
    73da:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    73dc:	687b      	ldr	r3, [r7, #4]
    73de:	2200      	movs	r2, #0
    73e0:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    73e2:	46c0      	nop			; (mov r8, r8)
    73e4:	46bd      	mov	sp, r7
    73e6:	b002      	add	sp, #8
    73e8:	bd80      	pop	{r7, pc}
	...

000073ec <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    73ec:	b580      	push	{r7, lr}
    73ee:	b084      	sub	sp, #16
    73f0:	af00      	add	r7, sp, #0
    73f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    73f4:	687b      	ldr	r3, [r7, #4]
    73f6:	681b      	ldr	r3, [r3, #0]
    73f8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    73fa:	687b      	ldr	r3, [r7, #4]
    73fc:	681b      	ldr	r3, [r3, #0]
    73fe:	0018      	movs	r0, r3
    7400:	4b09      	ldr	r3, [pc, #36]	; (7428 <usart_enable+0x3c>)
    7402:	4798      	blx	r3
    7404:	0003      	movs	r3, r0
    7406:	0018      	movs	r0, r3
    7408:	4b08      	ldr	r3, [pc, #32]	; (742c <usart_enable+0x40>)
    740a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    740c:	687b      	ldr	r3, [r7, #4]
    740e:	0018      	movs	r0, r3
    7410:	4b07      	ldr	r3, [pc, #28]	; (7430 <usart_enable+0x44>)
    7412:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7414:	68fb      	ldr	r3, [r7, #12]
    7416:	681b      	ldr	r3, [r3, #0]
    7418:	2202      	movs	r2, #2
    741a:	431a      	orrs	r2, r3
    741c:	68fb      	ldr	r3, [r7, #12]
    741e:	601a      	str	r2, [r3, #0]
}
    7420:	46c0      	nop			; (mov r8, r8)
    7422:	46bd      	mov	sp, r7
    7424:	b004      	add	sp, #16
    7426:	bd80      	pop	{r7, pc}
    7428:	000057fd 	.word	0x000057fd
    742c:	00006ec5 	.word	0x00006ec5
    7430:	00007309 	.word	0x00007309

00007434 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    7434:	b580      	push	{r7, lr}
    7436:	b084      	sub	sp, #16
    7438:	af00      	add	r7, sp, #0
    743a:	60f8      	str	r0, [r7, #12]
    743c:	60b9      	str	r1, [r7, #8]
    743e:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    7440:	687a      	ldr	r2, [r7, #4]
    7442:	68b9      	ldr	r1, [r7, #8]
    7444:	68fb      	ldr	r3, [r7, #12]
    7446:	0018      	movs	r0, r3
    7448:	4b05      	ldr	r3, [pc, #20]	; (7460 <usart_serial_init+0x2c>)
    744a:	4798      	blx	r3
    744c:	1e03      	subs	r3, r0, #0
    744e:	d101      	bne.n	7454 <usart_serial_init+0x20>
		return true;
    7450:	2301      	movs	r3, #1
    7452:	e000      	b.n	7456 <usart_serial_init+0x22>
	}
	else {
		return false;
    7454:	2300      	movs	r3, #0
	}
}
    7456:	0018      	movs	r0, r3
    7458:	46bd      	mov	sp, r7
    745a:	b004      	add	sp, #16
    745c:	bd80      	pop	{r7, pc}
    745e:	46c0      	nop			; (mov r8, r8)
    7460:	00004e01 	.word	0x00004e01

00007464 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    7464:	b580      	push	{r7, lr}
    7466:	b082      	sub	sp, #8
    7468:	af00      	add	r7, sp, #0
    746a:	6078      	str	r0, [r7, #4]
    746c:	000a      	movs	r2, r1
    746e:	1cfb      	adds	r3, r7, #3
    7470:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    7472:	46c0      	nop			; (mov r8, r8)
    7474:	1cfb      	adds	r3, r7, #3
    7476:	781b      	ldrb	r3, [r3, #0]
    7478:	b29a      	uxth	r2, r3
    747a:	687b      	ldr	r3, [r7, #4]
    747c:	0011      	movs	r1, r2
    747e:	0018      	movs	r0, r3
    7480:	4b04      	ldr	r3, [pc, #16]	; (7494 <usart_serial_putchar+0x30>)
    7482:	4798      	blx	r3
    7484:	1e03      	subs	r3, r0, #0
    7486:	d1f5      	bne.n	7474 <usart_serial_putchar+0x10>

	return STATUS_OK;
    7488:	2300      	movs	r3, #0
}
    748a:	0018      	movs	r0, r3
    748c:	46bd      	mov	sp, r7
    748e:	b002      	add	sp, #8
    7490:	bd80      	pop	{r7, pc}
    7492:	46c0      	nop			; (mov r8, r8)
    7494:	00005075 	.word	0x00005075

00007498 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    7498:	b580      	push	{r7, lr}
    749a:	b084      	sub	sp, #16
    749c:	af00      	add	r7, sp, #0
    749e:	6078      	str	r0, [r7, #4]
    74a0:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    74a2:	230e      	movs	r3, #14
    74a4:	18fb      	adds	r3, r7, r3
    74a6:	2200      	movs	r2, #0
    74a8:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    74aa:	46c0      	nop			; (mov r8, r8)
    74ac:	230e      	movs	r3, #14
    74ae:	18fa      	adds	r2, r7, r3
    74b0:	687b      	ldr	r3, [r7, #4]
    74b2:	0011      	movs	r1, r2
    74b4:	0018      	movs	r0, r3
    74b6:	4b07      	ldr	r3, [pc, #28]	; (74d4 <usart_serial_getchar+0x3c>)
    74b8:	4798      	blx	r3
    74ba:	1e03      	subs	r3, r0, #0
    74bc:	d1f6      	bne.n	74ac <usart_serial_getchar+0x14>

	*c = temp;
    74be:	230e      	movs	r3, #14
    74c0:	18fb      	adds	r3, r7, r3
    74c2:	881b      	ldrh	r3, [r3, #0]
    74c4:	b2da      	uxtb	r2, r3
    74c6:	683b      	ldr	r3, [r7, #0]
    74c8:	701a      	strb	r2, [r3, #0]
}
    74ca:	46c0      	nop			; (mov r8, r8)
    74cc:	46bd      	mov	sp, r7
    74ce:	b004      	add	sp, #16
    74d0:	bd80      	pop	{r7, pc}
    74d2:	46c0      	nop			; (mov r8, r8)
    74d4:	000050d9 	.word	0x000050d9

000074d8 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    74d8:	b580      	push	{r7, lr}
    74da:	b084      	sub	sp, #16
    74dc:	af00      	add	r7, sp, #0
    74de:	60f8      	str	r0, [r7, #12]
    74e0:	60b9      	str	r1, [r7, #8]
    74e2:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    74e4:	4b10      	ldr	r3, [pc, #64]	; (7528 <stdio_serial_init+0x50>)
    74e6:	68fa      	ldr	r2, [r7, #12]
    74e8:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    74ea:	4b10      	ldr	r3, [pc, #64]	; (752c <stdio_serial_init+0x54>)
    74ec:	4a10      	ldr	r2, [pc, #64]	; (7530 <stdio_serial_init+0x58>)
    74ee:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    74f0:	4b10      	ldr	r3, [pc, #64]	; (7534 <stdio_serial_init+0x5c>)
    74f2:	4a11      	ldr	r2, [pc, #68]	; (7538 <stdio_serial_init+0x60>)
    74f4:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    74f6:	687a      	ldr	r2, [r7, #4]
    74f8:	68b9      	ldr	r1, [r7, #8]
    74fa:	68fb      	ldr	r3, [r7, #12]
    74fc:	0018      	movs	r0, r3
    74fe:	4b0f      	ldr	r3, [pc, #60]	; (753c <stdio_serial_init+0x64>)
    7500:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    7502:	4b0f      	ldr	r3, [pc, #60]	; (7540 <stdio_serial_init+0x68>)
    7504:	681b      	ldr	r3, [r3, #0]
    7506:	689b      	ldr	r3, [r3, #8]
    7508:	2100      	movs	r1, #0
    750a:	0018      	movs	r0, r3
    750c:	4b0d      	ldr	r3, [pc, #52]	; (7544 <stdio_serial_init+0x6c>)
    750e:	4798      	blx	r3
	setbuf(stdin, NULL);
    7510:	4b0b      	ldr	r3, [pc, #44]	; (7540 <stdio_serial_init+0x68>)
    7512:	681b      	ldr	r3, [r3, #0]
    7514:	685b      	ldr	r3, [r3, #4]
    7516:	2100      	movs	r1, #0
    7518:	0018      	movs	r0, r3
    751a:	4b0a      	ldr	r3, [pc, #40]	; (7544 <stdio_serial_init+0x6c>)
    751c:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    751e:	46c0      	nop			; (mov r8, r8)
    7520:	46bd      	mov	sp, r7
    7522:	b004      	add	sp, #16
    7524:	bd80      	pop	{r7, pc}
    7526:	46c0      	nop			; (mov r8, r8)
    7528:	200003b8 	.word	0x200003b8
    752c:	200003b4 	.word	0x200003b4
    7530:	00007465 	.word	0x00007465
    7534:	200003b0 	.word	0x200003b0
    7538:	00007499 	.word	0x00007499
    753c:	00007435 	.word	0x00007435
    7540:	20000078 	.word	0x20000078
    7544:	00009a8d 	.word	0x00009a8d

00007548 <get_gpio_pin>:
 * @param  port port to use. Either A or B
 * @param  pin  pin that's being selected. Depends on port
 * @return      value of the pin that was selected.
 */
int get_gpio_pin(char port, int pin)
{
    7548:	b590      	push	{r4, r7, lr}
    754a:	b087      	sub	sp, #28
    754c:	af02      	add	r7, sp, #8
    754e:	0002      	movs	r2, r0
    7550:	6039      	str	r1, [r7, #0]
    7552:	1dfb      	adds	r3, r7, #7
    7554:	701a      	strb	r2, [r3, #0]
	int pin_val = -1;
    7556:	2301      	movs	r3, #1
    7558:	425b      	negs	r3, r3
    755a:	60fb      	str	r3, [r7, #12]

	switch (port) {
    755c:	1dfb      	adds	r3, r7, #7
    755e:	781b      	ldrb	r3, [r3, #0]
    7560:	2b61      	cmp	r3, #97	; 0x61
    7562:	d002      	beq.n	756a <get_gpio_pin+0x22>
    7564:	2b62      	cmp	r3, #98	; 0x62
    7566:	d015      	beq.n	7594 <get_gpio_pin+0x4c>
    7568:	e028      	b.n	75bc <get_gpio_pin+0x74>
	case 'a':
		switch (pin) {
    756a:	683b      	ldr	r3, [r7, #0]
    756c:	2b08      	cmp	r3, #8
    756e:	d002      	beq.n	7576 <get_gpio_pin+0x2e>
    7570:	2b09      	cmp	r3, #9
    7572:	d003      	beq.n	757c <get_gpio_pin+0x34>
    7574:	e005      	b.n	7582 <get_gpio_pin+0x3a>
		//TODO: decide which pins can be set in port A 08, 09
		case GPIO_PIN_A_1:
			pin_val = PIN_PA08;
    7576:	2308      	movs	r3, #8
    7578:	60fb      	str	r3, [r7, #12]
			break;
    757a:	e00b      	b.n	7594 <get_gpio_pin+0x4c>
		case GPIO_PIN_A_2:
			pin_val = PIN_PA09;
    757c:	2309      	movs	r3, #9
    757e:	60fb      	str	r3, [r7, #12]
			break;
    7580:	e008      	b.n	7594 <get_gpio_pin+0x4c>
		default:
			//TODO: Error codes
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    7582:	4811      	ldr	r0, [pc, #68]	; (75c8 <get_gpio_pin+0x80>)
    7584:	2303      	movs	r3, #3
    7586:	9300      	str	r3, [sp, #0]
    7588:	2302      	movs	r3, #2
    758a:	2209      	movs	r2, #9
    758c:	2108      	movs	r1, #8
    758e:	4c0f      	ldr	r4, [pc, #60]	; (75cc <get_gpio_pin+0x84>)
    7590:	47a0      	blx	r4
			break;
    7592:	46c0      	nop			; (mov r8, r8)
		}
	case 'b':
		switch (pin) {
    7594:	683b      	ldr	r3, [r7, #0]
    7596:	2b02      	cmp	r3, #2
    7598:	d002      	beq.n	75a0 <get_gpio_pin+0x58>
    759a:	2b03      	cmp	r3, #3
    759c:	d003      	beq.n	75a6 <get_gpio_pin+0x5e>
    759e:	e005      	b.n	75ac <get_gpio_pin+0x64>
		case GPIO_PIN_B_1:
			pin_val = PIN_PB02;
    75a0:	2322      	movs	r3, #34	; 0x22
    75a2:	60fb      	str	r3, [r7, #12]
			break;
    75a4:	e00a      	b.n	75bc <get_gpio_pin+0x74>
		case GPIO_PIN_B_2:
			pin_val = PIN_PB03;
    75a6:	2323      	movs	r3, #35	; 0x23
    75a8:	60fb      	str	r3, [r7, #12]
			break;
    75aa:	e007      	b.n	75bc <get_gpio_pin+0x74>
		default:
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    75ac:	4806      	ldr	r0, [pc, #24]	; (75c8 <get_gpio_pin+0x80>)
    75ae:	2303      	movs	r3, #3
    75b0:	9300      	str	r3, [sp, #0]
    75b2:	2302      	movs	r3, #2
    75b4:	2209      	movs	r2, #9
    75b6:	2108      	movs	r1, #8
    75b8:	4c04      	ldr	r4, [pc, #16]	; (75cc <get_gpio_pin+0x84>)
    75ba:	47a0      	blx	r4
			//TODO: error codes
		}
	}
	return pin_val;
    75bc:	68fb      	ldr	r3, [r7, #12]
}
    75be:	0018      	movs	r0, r3
    75c0:	46bd      	mov	sp, r7
    75c2:	b005      	add	sp, #20
    75c4:	bd90      	pop	{r4, r7, pc}
    75c6:	46c0      	nop			; (mov r8, r8)
    75c8:	0000e43c 	.word	0x0000e43c
    75cc:	00009961 	.word	0x00009961

000075d0 <help>:

/**
 * Prints out information about the available cli commands.
 */
void help()
{
    75d0:	b580      	push	{r7, lr}
    75d2:	af00      	add	r7, sp, #0
	printf("help - Prints all the available commands and a short synopsis \r\n"
    75d4:	4b03      	ldr	r3, [pc, #12]	; (75e4 <help+0x14>)
    75d6:	0018      	movs	r0, r3
    75d8:	4b03      	ldr	r3, [pc, #12]	; (75e8 <help+0x18>)
    75da:	4798      	blx	r3
	       "adc_get [port] [pin] - Get the ADC value of the given pin. \r\n"
	       "mcu_temp - Reports the temperature of the mcu in Celsius. \r\n"
	       "i2c_scan - Prints out a list connected I2C slave addresses \r\n"
		   "relay_set - turns on relay \r\n"
		   "relay_clear - turns off relay \r\n");
}
    75dc:	46c0      	nop			; (mov r8, r8)
    75de:	46bd      	mov	sp, r7
    75e0:	bd80      	pop	{r7, pc}
    75e2:	46c0      	nop			; (mov r8, r8)
    75e4:	0000e468 	.word	0x0000e468
    75e8:	00009a55 	.word	0x00009a55

000075ec <ver_bl>:
 *
 * Version follows correct Semantic Versioning guidelines. <br>
 * <b>See</b> <a href="https://semver.org/">SemVer</a> for more information.
 */
void ver_bl()
{
    75ec:	b580      	push	{r7, lr}
    75ee:	af00      	add	r7, sp, #0
	printf("Version: %s \r\n", BL_VERSION);
    75f0:	4a04      	ldr	r2, [pc, #16]	; (7604 <ver_bl+0x18>)
    75f2:	4b05      	ldr	r3, [pc, #20]	; (7608 <ver_bl+0x1c>)
    75f4:	0011      	movs	r1, r2
    75f6:	0018      	movs	r0, r3
    75f8:	4b04      	ldr	r3, [pc, #16]	; (760c <ver_bl+0x20>)
    75fa:	4798      	blx	r3
}
    75fc:	46c0      	nop			; (mov r8, r8)
    75fe:	46bd      	mov	sp, r7
    7600:	bd80      	pop	{r7, pc}
    7602:	46c0      	nop			; (mov r8, r8)
    7604:	0000e754 	.word	0x0000e754
    7608:	0000e75c 	.word	0x0000e75c
    760c:	00009961 	.word	0x00009961

00007610 <ver_app>:
 *
 * Version follows correct Semantic Versioning guidelines. <br>
 * <b>See</b> <a href="https://semver.org/">SemVer</a> for more information.
 */
void ver_app()
{
    7610:	b580      	push	{r7, lr}
    7612:	af00      	add	r7, sp, #0
	printf("Version: %s \r\n", APP_VERSION);
    7614:	4a04      	ldr	r2, [pc, #16]	; (7628 <ver_app+0x18>)
    7616:	4b05      	ldr	r3, [pc, #20]	; (762c <ver_app+0x1c>)
    7618:	0011      	movs	r1, r2
    761a:	0018      	movs	r0, r3
    761c:	4b04      	ldr	r3, [pc, #16]	; (7630 <ver_app+0x20>)
    761e:	4798      	blx	r3
}
    7620:	46c0      	nop			; (mov r8, r8)
    7622:	46bd      	mov	sp, r7
    7624:	bd80      	pop	{r7, pc}
    7626:	46c0      	nop			; (mov r8, r8)
    7628:	0000e754 	.word	0x0000e754
    762c:	0000e75c 	.word	0x0000e75c
    7630:	00009961 	.word	0x00009961

00007634 <gpio_set>:
 * Setting a pin pulls the voltage to a logical 1 or HIGH.
 * @param port port specificed. Either A or B
 * @param pin  pin to use.
 */
void gpio_set(char port, int pin)
{
    7634:	b580      	push	{r7, lr}
    7636:	b084      	sub	sp, #16
    7638:	af00      	add	r7, sp, #0
    763a:	0002      	movs	r2, r0
    763c:	6039      	str	r1, [r7, #0]
    763e:	1dfb      	adds	r3, r7, #7
    7640:	701a      	strb	r2, [r3, #0]
	int pin_val = get_gpio_pin(port, pin);
    7642:	683a      	ldr	r2, [r7, #0]
    7644:	1dfb      	adds	r3, r7, #7
    7646:	781b      	ldrb	r3, [r3, #0]
    7648:	0011      	movs	r1, r2
    764a:	0018      	movs	r0, r3
    764c:	4b0d      	ldr	r3, [pc, #52]	; (7684 <gpio_set+0x50>)
    764e:	4798      	blx	r3
    7650:	0003      	movs	r3, r0
    7652:	60fb      	str	r3, [r7, #12]

	if (pin_val != -1) {
    7654:	68fb      	ldr	r3, [r7, #12]
    7656:	3301      	adds	r3, #1
    7658:	d00f      	beq.n	767a <gpio_set+0x46>
		configure_port_pins_set(pin_val); //TODO: decide if this is necessary
    765a:	68fb      	ldr	r3, [r7, #12]
    765c:	0018      	movs	r0, r3
    765e:	4b0a      	ldr	r3, [pc, #40]	; (7688 <gpio_set+0x54>)
    7660:	4798      	blx	r3
		port_pin_set_output_level(pin_val, true);
    7662:	68fb      	ldr	r3, [r7, #12]
    7664:	b2db      	uxtb	r3, r3
    7666:	2101      	movs	r1, #1
    7668:	0018      	movs	r0, r3
    766a:	4b08      	ldr	r3, [pc, #32]	; (768c <gpio_set+0x58>)
    766c:	4798      	blx	r3

		printf("Pin %d set high\r\n", pin_val);
    766e:	68fa      	ldr	r2, [r7, #12]
    7670:	4b07      	ldr	r3, [pc, #28]	; (7690 <gpio_set+0x5c>)
    7672:	0011      	movs	r1, r2
    7674:	0018      	movs	r0, r3
    7676:	4b07      	ldr	r3, [pc, #28]	; (7694 <gpio_set+0x60>)
    7678:	4798      	blx	r3
	}
}
    767a:	46c0      	nop			; (mov r8, r8)
    767c:	46bd      	mov	sp, r7
    767e:	b004      	add	sp, #16
    7680:	bd80      	pop	{r7, pc}
    7682:	46c0      	nop			; (mov r8, r8)
    7684:	00007549 	.word	0x00007549
    7688:	000087bd 	.word	0x000087bd
    768c:	000070e9 	.word	0x000070e9
    7690:	0000e76c 	.word	0x0000e76c
    7694:	00009961 	.word	0x00009961

00007698 <gpio_clear>:
 * Setting a pin pulls the voltage to a logical 0 or LOW.
 * @param port port specificed. Either A or B
 * @param pin  pin to use.
 */
void gpio_clear(char port, int pin)
{
    7698:	b580      	push	{r7, lr}
    769a:	b084      	sub	sp, #16
    769c:	af00      	add	r7, sp, #0
    769e:	0002      	movs	r2, r0
    76a0:	6039      	str	r1, [r7, #0]
    76a2:	1dfb      	adds	r3, r7, #7
    76a4:	701a      	strb	r2, [r3, #0]
	int pin_val = get_gpio_pin(port, pin);
    76a6:	683a      	ldr	r2, [r7, #0]
    76a8:	1dfb      	adds	r3, r7, #7
    76aa:	781b      	ldrb	r3, [r3, #0]
    76ac:	0011      	movs	r1, r2
    76ae:	0018      	movs	r0, r3
    76b0:	4b0d      	ldr	r3, [pc, #52]	; (76e8 <gpio_clear+0x50>)
    76b2:	4798      	blx	r3
    76b4:	0003      	movs	r3, r0
    76b6:	60fb      	str	r3, [r7, #12]

	if (pin_val != -1) {
    76b8:	68fb      	ldr	r3, [r7, #12]
    76ba:	3301      	adds	r3, #1
    76bc:	d00f      	beq.n	76de <gpio_clear+0x46>
		configure_port_pins_set(pin_val); //TODO: decide if this is necessary
    76be:	68fb      	ldr	r3, [r7, #12]
    76c0:	0018      	movs	r0, r3
    76c2:	4b0a      	ldr	r3, [pc, #40]	; (76ec <gpio_clear+0x54>)
    76c4:	4798      	blx	r3
		port_pin_set_output_level(pin_val, 0);
    76c6:	68fb      	ldr	r3, [r7, #12]
    76c8:	b2db      	uxtb	r3, r3
    76ca:	2100      	movs	r1, #0
    76cc:	0018      	movs	r0, r3
    76ce:	4b08      	ldr	r3, [pc, #32]	; (76f0 <gpio_clear+0x58>)
    76d0:	4798      	blx	r3

		printf("Pin %d cleared\r\n", pin_val);
    76d2:	68fa      	ldr	r2, [r7, #12]
    76d4:	4b07      	ldr	r3, [pc, #28]	; (76f4 <gpio_clear+0x5c>)
    76d6:	0011      	movs	r1, r2
    76d8:	0018      	movs	r0, r3
    76da:	4b07      	ldr	r3, [pc, #28]	; (76f8 <gpio_clear+0x60>)
    76dc:	4798      	blx	r3
	}
}
    76de:	46c0      	nop			; (mov r8, r8)
    76e0:	46bd      	mov	sp, r7
    76e2:	b004      	add	sp, #16
    76e4:	bd80      	pop	{r7, pc}
    76e6:	46c0      	nop			; (mov r8, r8)
    76e8:	00007549 	.word	0x00007549
    76ec:	000087bd 	.word	0x000087bd
    76f0:	000070e9 	.word	0x000070e9
    76f4:	0000e780 	.word	0x0000e780
    76f8:	00009961 	.word	0x00009961

000076fc <gpio_get>:
 * Will either be logical 0 or 1.
 * @param port port specificed. Either A or B
 * @param pin  pin to use.
 */
void gpio_get(char port, int pin)
{
    76fc:	b580      	push	{r7, lr}
    76fe:	b084      	sub	sp, #16
    7700:	af00      	add	r7, sp, #0
    7702:	0002      	movs	r2, r0
    7704:	6039      	str	r1, [r7, #0]
    7706:	1dfb      	adds	r3, r7, #7
    7708:	701a      	strb	r2, [r3, #0]
	int pin_val = get_gpio_pin(port, pin);
    770a:	683a      	ldr	r2, [r7, #0]
    770c:	1dfb      	adds	r3, r7, #7
    770e:	781b      	ldrb	r3, [r3, #0]
    7710:	0011      	movs	r1, r2
    7712:	0018      	movs	r0, r3
    7714:	4b0c      	ldr	r3, [pc, #48]	; (7748 <gpio_get+0x4c>)
    7716:	4798      	blx	r3
    7718:	0003      	movs	r3, r0
    771a:	60fb      	str	r3, [r7, #12]

	configure_port_pins_get(pin_val); //TODO: decide if this is necessary
    771c:	68fb      	ldr	r3, [r7, #12]
    771e:	0018      	movs	r0, r3
    7720:	4b0a      	ldr	r3, [pc, #40]	; (774c <gpio_get+0x50>)
    7722:	4798      	blx	r3
	int state = port_pin_get_input_level(pin_val);
    7724:	68fb      	ldr	r3, [r7, #12]
    7726:	b2db      	uxtb	r3, r3
    7728:	0018      	movs	r0, r3
    772a:	4b09      	ldr	r3, [pc, #36]	; (7750 <gpio_get+0x54>)
    772c:	4798      	blx	r3
    772e:	0003      	movs	r3, r0
    7730:	60bb      	str	r3, [r7, #8]
	printf("pin %d value: %d\r\n", pin_val, state);
    7732:	68ba      	ldr	r2, [r7, #8]
    7734:	68f9      	ldr	r1, [r7, #12]
    7736:	4b07      	ldr	r3, [pc, #28]	; (7754 <gpio_get+0x58>)
    7738:	0018      	movs	r0, r3
    773a:	4b07      	ldr	r3, [pc, #28]	; (7758 <gpio_get+0x5c>)
    773c:	4798      	blx	r3
}
    773e:	46c0      	nop			; (mov r8, r8)
    7740:	46bd      	mov	sp, r7
    7742:	b004      	add	sp, #16
    7744:	bd80      	pop	{r7, pc}
    7746:	46c0      	nop			; (mov r8, r8)
    7748:	00007549 	.word	0x00007549
    774c:	000087f9 	.word	0x000087f9
    7750:	000070a5 	.word	0x000070a5
    7754:	0000e794 	.word	0x0000e794
    7758:	00009961 	.word	0x00009961

0000775c <mac>:
 * Prints the MAC address of the Wi-Fi chip.
 *
 * For more information on MAC addresses, see <a href="https://en.wikipedia.org/wiki/MAC_address">Wikipedia</a>
 */
void mac()
{
    775c:	b580      	push	{r7, lr}
    775e:	af00      	add	r7, sp, #0
	printf("00.00.00.00\r\n");
    7760:	4b03      	ldr	r3, [pc, #12]	; (7770 <mac+0x14>)
    7762:	0018      	movs	r0, r3
    7764:	4b03      	ldr	r3, [pc, #12]	; (7774 <mac+0x18>)
    7766:	4798      	blx	r3
}
    7768:	46c0      	nop			; (mov r8, r8)
    776a:	46bd      	mov	sp, r7
    776c:	bd80      	pop	{r7, pc}
    776e:	46c0      	nop			; (mov r8, r8)
    7770:	0000e7a8 	.word	0x0000e7a8
    7774:	00009a55 	.word	0x00009a55

00007778 <ip>:
 * Prints the IP address of the Wi-Fi chip.
 *
 * @note Currently this only returns a dummy IP address and will need to be updated.
 */
void ip()
{
    7778:	b580      	push	{r7, lr}
    777a:	af00      	add	r7, sp, #0
	printf("255.255.255.255 \r\n");
    777c:	4b03      	ldr	r3, [pc, #12]	; (778c <ip+0x14>)
    777e:	0018      	movs	r0, r3
    7780:	4b03      	ldr	r3, [pc, #12]	; (7790 <ip+0x18>)
    7782:	4798      	blx	r3
}
    7784:	46c0      	nop			; (mov r8, r8)
    7786:	46bd      	mov	sp, r7
    7788:	bd80      	pop	{r7, pc}
    778a:	46c0      	nop			; (mov r8, r8)
    778c:	0000e7b8 	.word	0x0000e7b8
    7790:	00009a55 	.word	0x00009a55

00007794 <read_sensor>:
 * @param sensor_name name of the sensor to read from
 * @param readings    number of readings to do
 * @param interval_ms how many milliseconds to wait between readings
 */
void read_sensor(char *sensor_name, int readings, int interval_ms)
{
    7794:	b590      	push	{r4, r7, lr}
    7796:	b08f      	sub	sp, #60	; 0x3c
    7798:	af02      	add	r7, sp, #8
    779a:	60f8      	str	r0, [r7, #12]
    779c:	60b9      	str	r1, [r7, #8]
    779e:	607a      	str	r2, [r7, #4]
	//TODO: check for values greater than 0 for readings and interval_ms
	static uint8_t read_buffer[10];
	
	if(!strcmp("lux", sensor_name)) {
    77a0:	68fa      	ldr	r2, [r7, #12]
    77a2:	4b2d      	ldr	r3, [pc, #180]	; (7858 <read_sensor+0xc4>)
    77a4:	0011      	movs	r1, r2
    77a6:	0018      	movs	r0, r3
    77a8:	4b2c      	ldr	r3, [pc, #176]	; (785c <read_sensor+0xc8>)
    77aa:	4798      	blx	r3
    77ac:	1e03      	subs	r3, r0, #0
    77ae:	d10b      	bne.n	77c8 <read_sensor+0x34>
		tsl2561_init();
    77b0:	4b2b      	ldr	r3, [pc, #172]	; (7860 <read_sensor+0xcc>)
    77b2:	4798      	blx	r3
		uint32_t lux_value = getLuminosity();
    77b4:	4b2b      	ldr	r3, [pc, #172]	; (7864 <read_sensor+0xd0>)
    77b6:	4798      	blx	r3
    77b8:	0003      	movs	r3, r0
    77ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		printf("Current lux: %d\r\n", lux_value);
    77bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    77be:	4b2a      	ldr	r3, [pc, #168]	; (7868 <read_sensor+0xd4>)
    77c0:	0011      	movs	r1, r2
    77c2:	0018      	movs	r0, r3
    77c4:	4b29      	ldr	r3, [pc, #164]	; (786c <read_sensor+0xd8>)
    77c6:	4798      	blx	r3
	}
	
	if(!strcmp("temp", sensor_name)) {
    77c8:	68fa      	ldr	r2, [r7, #12]
    77ca:	4b29      	ldr	r3, [pc, #164]	; (7870 <read_sensor+0xdc>)
    77cc:	0011      	movs	r1, r2
    77ce:	0018      	movs	r0, r3
    77d0:	4b22      	ldr	r3, [pc, #136]	; (785c <read_sensor+0xc8>)
    77d2:	4798      	blx	r3
    77d4:	1e03      	subs	r3, r0, #0
    77d6:	d124      	bne.n	7822 <read_sensor+0x8e>
		double temperature = 0;
    77d8:	2300      	movs	r3, #0
    77da:	2400      	movs	r4, #0
    77dc:	61bb      	str	r3, [r7, #24]
    77de:	61fc      	str	r4, [r7, #28]
		double humidity = 0;
    77e0:	2300      	movs	r3, #0
    77e2:	2400      	movs	r4, #0
    77e4:	613b      	str	r3, [r7, #16]
    77e6:	617c      	str	r4, [r7, #20]
		int errorcode = hdc1080_measure(&temperature, &humidity);
    77e8:	2310      	movs	r3, #16
    77ea:	18fa      	adds	r2, r7, r3
    77ec:	2318      	movs	r3, #24
    77ee:	18fb      	adds	r3, r7, r3
    77f0:	0011      	movs	r1, r2
    77f2:	0018      	movs	r0, r3
    77f4:	4b1f      	ldr	r3, [pc, #124]	; (7874 <read_sensor+0xe0>)
    77f6:	4798      	blx	r3
    77f8:	0003      	movs	r3, r0
    77fa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (errorcode) printf("Error reading HDC1080\r\n");
    77fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    77fe:	2b00      	cmp	r3, #0
    7800:	d004      	beq.n	780c <read_sensor+0x78>
    7802:	4b1d      	ldr	r3, [pc, #116]	; (7878 <read_sensor+0xe4>)
    7804:	0018      	movs	r0, r3
    7806:	4b1d      	ldr	r3, [pc, #116]	; (787c <read_sensor+0xe8>)
    7808:	4798      	blx	r3
    780a:	e00a      	b.n	7822 <read_sensor+0x8e>
		else printf("Current temperature: %d\r\n Current humidity: %d\r\n", temperature, humidity);
    780c:	69b9      	ldr	r1, [r7, #24]
    780e:	69fa      	ldr	r2, [r7, #28]
    7810:	693b      	ldr	r3, [r7, #16]
    7812:	697c      	ldr	r4, [r7, #20]
    7814:	481a      	ldr	r0, [pc, #104]	; (7880 <read_sensor+0xec>)
    7816:	9300      	str	r3, [sp, #0]
    7818:	9401      	str	r4, [sp, #4]
    781a:	0013      	movs	r3, r2
    781c:	000a      	movs	r2, r1
    781e:	4913      	ldr	r1, [pc, #76]	; (786c <read_sensor+0xd8>)
    7820:	4788      	blx	r1
	}
	
		
	
	if(!strcmp("moisture", sensor_name)) {
    7822:	68fa      	ldr	r2, [r7, #12]
    7824:	4b17      	ldr	r3, [pc, #92]	; (7884 <read_sensor+0xf0>)
    7826:	0011      	movs	r1, r2
    7828:	0018      	movs	r0, r3
    782a:	4b0c      	ldr	r3, [pc, #48]	; (785c <read_sensor+0xc8>)
    782c:	4798      	blx	r3
    782e:	1e03      	subs	r3, r0, #0
    7830:	d10e      	bne.n	7850 <read_sensor+0xbc>
		
		float m_value = get_moisture();
    7832:	4b15      	ldr	r3, [pc, #84]	; (7888 <read_sensor+0xf4>)
    7834:	4798      	blx	r3
    7836:	1c03      	adds	r3, r0, #0
    7838:	627b      	str	r3, [r7, #36]	; 0x24
		
		printf("Current moisture: %.02f %% \r\n", m_value);
    783a:	4b14      	ldr	r3, [pc, #80]	; (788c <read_sensor+0xf8>)
    783c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    783e:	4798      	blx	r3
    7840:	0003      	movs	r3, r0
    7842:	000c      	movs	r4, r1
    7844:	4912      	ldr	r1, [pc, #72]	; (7890 <read_sensor+0xfc>)
    7846:	001a      	movs	r2, r3
    7848:	0023      	movs	r3, r4
    784a:	0008      	movs	r0, r1
    784c:	4907      	ldr	r1, [pc, #28]	; (786c <read_sensor+0xd8>)
    784e:	4788      	blx	r1
	}
}
    7850:	46c0      	nop			; (mov r8, r8)
    7852:	46bd      	mov	sp, r7
    7854:	b00d      	add	sp, #52	; 0x34
    7856:	bd90      	pop	{r4, r7, pc}
    7858:	0000e7cc 	.word	0x0000e7cc
    785c:	00009bf9 	.word	0x00009bf9
    7860:	00002615 	.word	0x00002615
    7864:	000027a5 	.word	0x000027a5
    7868:	0000e7d0 	.word	0x0000e7d0
    786c:	00009961 	.word	0x00009961
    7870:	0000e7e4 	.word	0x0000e7e4
    7874:	000021a5 	.word	0x000021a5
    7878:	0000e7ec 	.word	0x0000e7ec
    787c:	00009a55 	.word	0x00009a55
    7880:	0000e804 	.word	0x0000e804
    7884:	0000e838 	.word	0x0000e838
    7888:	00007a21 	.word	0x00007a21
    788c:	0000dfbd 	.word	0x0000dfbd
    7890:	0000e844 	.word	0x0000e844

00007894 <adc_get>:
 *
 * @param port port to read from. Only accepts a currently.
 * @param pin  pin to read from. Only accepts 02 currently.
 */
void adc_get(char port, int pin)
{
    7894:	b5b0      	push	{r4, r5, r7, lr}
    7896:	b08a      	sub	sp, #40	; 0x28
    7898:	af02      	add	r7, sp, #8
    789a:	0002      	movs	r2, r0
    789c:	6039      	str	r1, [r7, #0]
    789e:	1dfb      	adds	r3, r7, #7
    78a0:	701a      	strb	r2, [r3, #0]
	int pin_val = -1;
    78a2:	2301      	movs	r3, #1
    78a4:	425b      	negs	r3, r3
    78a6:	61fb      	str	r3, [r7, #28]

	switch (port) {
    78a8:	1dfb      	adds	r3, r7, #7
    78aa:	781b      	ldrb	r3, [r3, #0]
    78ac:	2b61      	cmp	r3, #97	; 0x61
    78ae:	d11e      	bne.n	78ee <adc_get+0x5a>
		case ADC_PORT:
			switch (pin) {
    78b0:	683b      	ldr	r3, [r7, #0]
    78b2:	2b02      	cmp	r3, #2
    78b4:	d102      	bne.n	78bc <adc_get+0x28>
				case ADC_PIN:
					pin_val = ADC_POSITIVE_INPUT_PIN0;
    78b6:	2300      	movs	r3, #0
    78b8:	61fb      	str	r3, [r7, #28]
					break;
    78ba:	e017      	b.n	78ec <adc_get+0x58>
				default:
					printf("fail on pin ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    78bc:	2361      	movs	r3, #97	; 0x61
    78be:	61bb      	str	r3, [r7, #24]
    78c0:	4b46      	ldr	r3, [pc, #280]	; (79dc <adc_get+0x148>)
    78c2:	4798      	blx	r3
    78c4:	0002      	movs	r2, r0
    78c6:	69bb      	ldr	r3, [r7, #24]
    78c8:	3301      	adds	r3, #1
    78ca:	18d3      	adds	r3, r2, r3
    78cc:	781b      	ldrb	r3, [r3, #0]
    78ce:	001a      	movs	r2, r3
    78d0:	2303      	movs	r3, #3
    78d2:	4013      	ands	r3, r2
    78d4:	2b02      	cmp	r3, #2
    78d6:	d102      	bne.n	78de <adc_get+0x4a>
    78d8:	69bb      	ldr	r3, [r7, #24]
    78da:	3b20      	subs	r3, #32
    78dc:	e000      	b.n	78e0 <adc_get+0x4c>
    78de:	69bb      	ldr	r3, [r7, #24]
    78e0:	483f      	ldr	r0, [pc, #252]	; (79e0 <adc_get+0x14c>)
    78e2:	2202      	movs	r2, #2
    78e4:	0019      	movs	r1, r3
    78e6:	4b3f      	ldr	r3, [pc, #252]	; (79e4 <adc_get+0x150>)
    78e8:	4798      	blx	r3
					break;
    78ea:	46c0      	nop			; (mov r8, r8)
			}
			break;
    78ec:	e017      	b.n	791e <adc_get+0x8a>
		default:
			printf("fail on port ADC can currently only be configured on %c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    78ee:	2361      	movs	r3, #97	; 0x61
    78f0:	617b      	str	r3, [r7, #20]
    78f2:	4b3a      	ldr	r3, [pc, #232]	; (79dc <adc_get+0x148>)
    78f4:	4798      	blx	r3
    78f6:	0002      	movs	r2, r0
    78f8:	697b      	ldr	r3, [r7, #20]
    78fa:	3301      	adds	r3, #1
    78fc:	18d3      	adds	r3, r2, r3
    78fe:	781b      	ldrb	r3, [r3, #0]
    7900:	001a      	movs	r2, r3
    7902:	2303      	movs	r3, #3
    7904:	4013      	ands	r3, r2
    7906:	2b02      	cmp	r3, #2
    7908:	d102      	bne.n	7910 <adc_get+0x7c>
    790a:	697b      	ldr	r3, [r7, #20]
    790c:	3b20      	subs	r3, #32
    790e:	e000      	b.n	7912 <adc_get+0x7e>
    7910:	697b      	ldr	r3, [r7, #20]
    7912:	4835      	ldr	r0, [pc, #212]	; (79e8 <adc_get+0x154>)
    7914:	2202      	movs	r2, #2
    7916:	0019      	movs	r1, r3
    7918:	4b32      	ldr	r3, [pc, #200]	; (79e4 <adc_get+0x150>)
    791a:	4798      	blx	r3
			break;
    791c:	46c0      	nop			; (mov r8, r8)
	}
	
	if (pin_val != -1) {
    791e:	69fb      	ldr	r3, [r7, #28]
    7920:	3301      	adds	r3, #1
    7922:	d056      	beq.n	79d2 <adc_get+0x13e>
		configure_adc(pin_val);
    7924:	69fb      	ldr	r3, [r7, #28]
    7926:	0018      	movs	r0, r3
    7928:	4b30      	ldr	r3, [pc, #192]	; (79ec <adc_get+0x158>)
    792a:	4798      	blx	r3
		uint16_t adc_result;
		adc_start_conversion(&adc_instance);
    792c:	4b30      	ldr	r3, [pc, #192]	; (79f0 <adc_get+0x15c>)
    792e:	0018      	movs	r0, r3
    7930:	4b30      	ldr	r3, [pc, #192]	; (79f4 <adc_get+0x160>)
    7932:	4798      	blx	r3
		/* Wait for conversion to be done and read out result */
		do {
		} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
    7934:	230c      	movs	r3, #12
    7936:	18fa      	adds	r2, r7, r3
    7938:	4b2d      	ldr	r3, [pc, #180]	; (79f0 <adc_get+0x15c>)
    793a:	0011      	movs	r1, r2
    793c:	0018      	movs	r0, r3
    793e:	4b2e      	ldr	r3, [pc, #184]	; (79f8 <adc_get+0x164>)
    7940:	4798      	blx	r3
    7942:	0003      	movs	r3, r0
    7944:	2b05      	cmp	r3, #5
    7946:	d0f5      	beq.n	7934 <adc_get+0xa0>
		float voltage = (adc_result/4095.0)*1.65; //TODO: set values, NO MAGIC NUMBERS
    7948:	230c      	movs	r3, #12
    794a:	18fb      	adds	r3, r7, r3
    794c:	881b      	ldrh	r3, [r3, #0]
    794e:	001a      	movs	r2, r3
    7950:	4b2a      	ldr	r3, [pc, #168]	; (79fc <adc_get+0x168>)
    7952:	0010      	movs	r0, r2
    7954:	4798      	blx	r3
    7956:	4c2a      	ldr	r4, [pc, #168]	; (7a00 <adc_get+0x16c>)
    7958:	2200      	movs	r2, #0
    795a:	4b2a      	ldr	r3, [pc, #168]	; (7a04 <adc_get+0x170>)
    795c:	47a0      	blx	r4
    795e:	0003      	movs	r3, r0
    7960:	000c      	movs	r4, r1
    7962:	0018      	movs	r0, r3
    7964:	0021      	movs	r1, r4
    7966:	4c28      	ldr	r4, [pc, #160]	; (7a08 <adc_get+0x174>)
    7968:	4a28      	ldr	r2, [pc, #160]	; (7a0c <adc_get+0x178>)
    796a:	4b29      	ldr	r3, [pc, #164]	; (7a10 <adc_get+0x17c>)
    796c:	47a0      	blx	r4
    796e:	0003      	movs	r3, r0
    7970:	000c      	movs	r4, r1
    7972:	0019      	movs	r1, r3
    7974:	0022      	movs	r2, r4
    7976:	4b27      	ldr	r3, [pc, #156]	; (7a14 <adc_get+0x180>)
    7978:	0008      	movs	r0, r1
    797a:	0011      	movs	r1, r2
    797c:	4798      	blx	r3
    797e:	1c03      	adds	r3, r0, #0
    7980:	613b      	str	r3, [r7, #16]
		printf("Voltage at P%c%d: %f\r\n", toupper(port), pin_val, voltage);
    7982:	230f      	movs	r3, #15
    7984:	18fb      	adds	r3, r7, r3
    7986:	1dfa      	adds	r2, r7, #7
    7988:	7812      	ldrb	r2, [r2, #0]
    798a:	701a      	strb	r2, [r3, #0]
    798c:	4b13      	ldr	r3, [pc, #76]	; (79dc <adc_get+0x148>)
    798e:	4798      	blx	r3
    7990:	0002      	movs	r2, r0
    7992:	230f      	movs	r3, #15
    7994:	18fb      	adds	r3, r7, r3
    7996:	781b      	ldrb	r3, [r3, #0]
    7998:	3301      	adds	r3, #1
    799a:	18d3      	adds	r3, r2, r3
    799c:	781b      	ldrb	r3, [r3, #0]
    799e:	001a      	movs	r2, r3
    79a0:	2303      	movs	r3, #3
    79a2:	4013      	ands	r3, r2
    79a4:	2b02      	cmp	r3, #2
    79a6:	d105      	bne.n	79b4 <adc_get+0x120>
    79a8:	230f      	movs	r3, #15
    79aa:	18fb      	adds	r3, r7, r3
    79ac:	781b      	ldrb	r3, [r3, #0]
    79ae:	3b20      	subs	r3, #32
    79b0:	001d      	movs	r5, r3
    79b2:	e002      	b.n	79ba <adc_get+0x126>
    79b4:	230f      	movs	r3, #15
    79b6:	18fb      	adds	r3, r7, r3
    79b8:	781d      	ldrb	r5, [r3, #0]
    79ba:	4b17      	ldr	r3, [pc, #92]	; (7a18 <adc_get+0x184>)
    79bc:	6938      	ldr	r0, [r7, #16]
    79be:	4798      	blx	r3
    79c0:	0003      	movs	r3, r0
    79c2:	000c      	movs	r4, r1
    79c4:	69fa      	ldr	r2, [r7, #28]
    79c6:	4815      	ldr	r0, [pc, #84]	; (7a1c <adc_get+0x188>)
    79c8:	9300      	str	r3, [sp, #0]
    79ca:	9401      	str	r4, [sp, #4]
    79cc:	0029      	movs	r1, r5
    79ce:	4b05      	ldr	r3, [pc, #20]	; (79e4 <adc_get+0x150>)
    79d0:	4798      	blx	r3
	}
}
    79d2:	46c0      	nop			; (mov r8, r8)
    79d4:	46bd      	mov	sp, r7
    79d6:	b008      	add	sp, #32
    79d8:	bdb0      	pop	{r4, r5, r7, pc}
    79da:	46c0      	nop			; (mov r8, r8)
    79dc:	00008eb9 	.word	0x00008eb9
    79e0:	0000e864 	.word	0x0000e864
    79e4:	00009961 	.word	0x00009961
    79e8:	0000e8b4 	.word	0x0000e8b4
    79ec:	0000875d 	.word	0x0000875d
    79f0:	200003a8 	.word	0x200003a8
    79f4:	00006e01 	.word	0x00006e01
    79f8:	00006e49 	.word	0x00006e49
    79fc:	0000dec9 	.word	0x0000dec9
    7a00:	0000ca8d 	.word	0x0000ca8d
    7a04:	40affe00 	.word	0x40affe00
    7a08:	0000d2f5 	.word	0x0000d2f5
    7a0c:	66666666 	.word	0x66666666
    7a10:	3ffa6666 	.word	0x3ffa6666
    7a14:	0000e061 	.word	0x0000e061
    7a18:	0000dfbd 	.word	0x0000dfbd
    7a1c:	0000e904 	.word	0x0000e904

00007a20 <get_moisture>:
/* Gets the moisture value from SEN13322
*
*/
//TODO Set reference value
float get_moisture(void)
{
    7a20:	b580      	push	{r7, lr}
    7a22:	b082      	sub	sp, #8
    7a24:	af00      	add	r7, sp, #0
	// turn on sensor
	configure_port_pins_set(PIN_PA17);
    7a26:	2011      	movs	r0, #17
    7a28:	4b19      	ldr	r3, [pc, #100]	; (7a90 <get_moisture+0x70>)
    7a2a:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA17, true);
    7a2c:	2101      	movs	r1, #1
    7a2e:	2011      	movs	r0, #17
    7a30:	4b18      	ldr	r3, [pc, #96]	; (7a94 <get_moisture+0x74>)
    7a32:	4798      	blx	r3
	
	delay_ms(500);
    7a34:	23fa      	movs	r3, #250	; 0xfa
    7a36:	005b      	lsls	r3, r3, #1
    7a38:	0018      	movs	r0, r3
    7a3a:	4b17      	ldr	r3, [pc, #92]	; (7a98 <get_moisture+0x78>)
    7a3c:	4798      	blx	r3
	
	// read ADC
	uint16_t adc_result;
	adc_start_conversion(&adc_instance);
    7a3e:	4b17      	ldr	r3, [pc, #92]	; (7a9c <get_moisture+0x7c>)
    7a40:	0018      	movs	r0, r3
    7a42:	4b17      	ldr	r3, [pc, #92]	; (7aa0 <get_moisture+0x80>)
    7a44:	4798      	blx	r3
	/* Wait for conversion to be done and read out result */
	do {
	} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
    7a46:	1cba      	adds	r2, r7, #2
    7a48:	4b14      	ldr	r3, [pc, #80]	; (7a9c <get_moisture+0x7c>)
    7a4a:	0011      	movs	r1, r2
    7a4c:	0018      	movs	r0, r3
    7a4e:	4b15      	ldr	r3, [pc, #84]	; (7aa4 <get_moisture+0x84>)
    7a50:	4798      	blx	r3
    7a52:	0003      	movs	r3, r0
    7a54:	2b05      	cmp	r3, #5
    7a56:	d0f6      	beq.n	7a46 <get_moisture+0x26>
	float moisture = (adc_result/4095.0f)*(100.0f); //TODO: set values, NO MAGIC NUMBERS
    7a58:	1cbb      	adds	r3, r7, #2
    7a5a:	881b      	ldrh	r3, [r3, #0]
    7a5c:	001a      	movs	r2, r3
    7a5e:	4b12      	ldr	r3, [pc, #72]	; (7aa8 <get_moisture+0x88>)
    7a60:	0010      	movs	r0, r2
    7a62:	4798      	blx	r3
    7a64:	1c02      	adds	r2, r0, #0
    7a66:	4b11      	ldr	r3, [pc, #68]	; (7aac <get_moisture+0x8c>)
    7a68:	4911      	ldr	r1, [pc, #68]	; (7ab0 <get_moisture+0x90>)
    7a6a:	1c10      	adds	r0, r2, #0
    7a6c:	4798      	blx	r3
    7a6e:	1c03      	adds	r3, r0, #0
    7a70:	1c1a      	adds	r2, r3, #0
    7a72:	4b10      	ldr	r3, [pc, #64]	; (7ab4 <get_moisture+0x94>)
    7a74:	4910      	ldr	r1, [pc, #64]	; (7ab8 <get_moisture+0x98>)
    7a76:	1c10      	adds	r0, r2, #0
    7a78:	4798      	blx	r3
    7a7a:	1c03      	adds	r3, r0, #0
    7a7c:	607b      	str	r3, [r7, #4]
	
	//turn off sensor
	port_pin_set_output_level(PIN_PA17, false);
    7a7e:	2100      	movs	r1, #0
    7a80:	2011      	movs	r0, #17
    7a82:	4b04      	ldr	r3, [pc, #16]	; (7a94 <get_moisture+0x74>)
    7a84:	4798      	blx	r3
	

	return moisture;
    7a86:	687b      	ldr	r3, [r7, #4]

	
}
    7a88:	1c18      	adds	r0, r3, #0
    7a8a:	46bd      	mov	sp, r7
    7a8c:	b002      	add	sp, #8
    7a8e:	bd80      	pop	{r7, pc}
    7a90:	000087bd 	.word	0x000087bd
    7a94:	000070e9 	.word	0x000070e9
    7a98:	000028a1 	.word	0x000028a1
    7a9c:	200003a8 	.word	0x200003a8
    7aa0:	00006e01 	.word	0x00006e01
    7aa4:	00006e49 	.word	0x00006e49
    7aa8:	0000c341 	.word	0x0000c341
    7aac:	0000be71 	.word	0x0000be71
    7ab0:	457ff000 	.word	0x457ff000
    7ab4:	0000c101 	.word	0x0000c101
    7ab8:	42c80000 	.word	0x42c80000

00007abc <mcu_temp>:
 *
 * See the <a href="http://asf.atmel.com/docs/3.21.0/samd21/html/group__asfdoc__sam0__at30tse75x__group.html">board documentation</a> for more information.
 */
//TODO: Use the ASF temp sensor library instead.
void mcu_temp()
{
    7abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7abe:	b085      	sub	sp, #20
    7ac0:	af00      	add	r7, sp, #0
	int pin = ADC_POSITIVE_INPUT_TEMP;
    7ac2:	2318      	movs	r3, #24
    7ac4:	607b      	str	r3, [r7, #4]
	uint16_t adc_result;
	configure_adc(pin);
    7ac6:	687b      	ldr	r3, [r7, #4]
    7ac8:	0018      	movs	r0, r3
    7aca:	4b36      	ldr	r3, [pc, #216]	; (7ba4 <mcu_temp+0xe8>)
    7acc:	4798      	blx	r3

	adc_start_conversion(&adc_instance);
    7ace:	4b36      	ldr	r3, [pc, #216]	; (7ba8 <mcu_temp+0xec>)
    7ad0:	0018      	movs	r0, r3
    7ad2:	4b36      	ldr	r3, [pc, #216]	; (7bac <mcu_temp+0xf0>)
    7ad4:	4798      	blx	r3
	/* Wait for conversion to be done and read out result */
	do {
	} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
    7ad6:	003a      	movs	r2, r7
    7ad8:	4b33      	ldr	r3, [pc, #204]	; (7ba8 <mcu_temp+0xec>)
    7ada:	0011      	movs	r1, r2
    7adc:	0018      	movs	r0, r3
    7ade:	4b34      	ldr	r3, [pc, #208]	; (7bb0 <mcu_temp+0xf4>)
    7ae0:	4798      	blx	r3
    7ae2:	0003      	movs	r3, r0
    7ae4:	2b05      	cmp	r3, #5
    7ae6:	d0f6      	beq.n	7ad6 <mcu_temp+0x1a>
	
	//Equation found here: https://github.com/jrowberg/i2cdevlib/pull/59/files
	double temperature;
	if((adc_result & 0x8000) == 0) {
    7ae8:	003b      	movs	r3, r7
    7aea:	881b      	ldrh	r3, [r3, #0]
    7aec:	b21b      	sxth	r3, r3
    7aee:	2b00      	cmp	r3, #0
    7af0:	db22      	blt.n	7b38 <mcu_temp+0x7c>
      temperature = (adc_result >> 8) + ((adc_result & 0x00F0)>>4)*0.5;
    7af2:	003b      	movs	r3, r7
    7af4:	881b      	ldrh	r3, [r3, #0]
    7af6:	0a1b      	lsrs	r3, r3, #8
    7af8:	b29b      	uxth	r3, r3
    7afa:	001a      	movs	r2, r3
    7afc:	4b2d      	ldr	r3, [pc, #180]	; (7bb4 <mcu_temp+0xf8>)
    7afe:	0010      	movs	r0, r2
    7b00:	4798      	blx	r3
    7b02:	0005      	movs	r5, r0
    7b04:	000e      	movs	r6, r1
    7b06:	003b      	movs	r3, r7
    7b08:	881b      	ldrh	r3, [r3, #0]
    7b0a:	111b      	asrs	r3, r3, #4
    7b0c:	220f      	movs	r2, #15
    7b0e:	401a      	ands	r2, r3
    7b10:	4b28      	ldr	r3, [pc, #160]	; (7bb4 <mcu_temp+0xf8>)
    7b12:	0010      	movs	r0, r2
    7b14:	4798      	blx	r3
    7b16:	4c28      	ldr	r4, [pc, #160]	; (7bb8 <mcu_temp+0xfc>)
    7b18:	2200      	movs	r2, #0
    7b1a:	4b28      	ldr	r3, [pc, #160]	; (7bbc <mcu_temp+0x100>)
    7b1c:	47a0      	blx	r4
    7b1e:	0003      	movs	r3, r0
    7b20:	000c      	movs	r4, r1
    7b22:	001a      	movs	r2, r3
    7b24:	0023      	movs	r3, r4
    7b26:	4c26      	ldr	r4, [pc, #152]	; (7bc0 <mcu_temp+0x104>)
    7b28:	0028      	movs	r0, r5
    7b2a:	0031      	movs	r1, r6
    7b2c:	47a0      	blx	r4
    7b2e:	0003      	movs	r3, r0
    7b30:	000c      	movs	r4, r1
    7b32:	60bb      	str	r3, [r7, #8]
    7b34:	60fc      	str	r4, [r7, #12]
    7b36:	e026      	b.n	7b86 <mcu_temp+0xca>
    }
    else {
      uint16_t twosComplement = (~adc_result) + 1;
    7b38:	003b      	movs	r3, r7
    7b3a:	881a      	ldrh	r2, [r3, #0]
    7b3c:	1cbb      	adds	r3, r7, #2
    7b3e:	4252      	negs	r2, r2
    7b40:	801a      	strh	r2, [r3, #0]
      temperature = - (twosComplement >> 8) - ((twosComplement & 0x00F0)>>4)*0.5;
    7b42:	1cbb      	adds	r3, r7, #2
    7b44:	881b      	ldrh	r3, [r3, #0]
    7b46:	0a1b      	lsrs	r3, r3, #8
    7b48:	b29b      	uxth	r3, r3
    7b4a:	425a      	negs	r2, r3
    7b4c:	4b19      	ldr	r3, [pc, #100]	; (7bb4 <mcu_temp+0xf8>)
    7b4e:	0010      	movs	r0, r2
    7b50:	4798      	blx	r3
    7b52:	0005      	movs	r5, r0
    7b54:	000e      	movs	r6, r1
    7b56:	1cbb      	adds	r3, r7, #2
    7b58:	881b      	ldrh	r3, [r3, #0]
    7b5a:	111b      	asrs	r3, r3, #4
    7b5c:	220f      	movs	r2, #15
    7b5e:	401a      	ands	r2, r3
    7b60:	4b14      	ldr	r3, [pc, #80]	; (7bb4 <mcu_temp+0xf8>)
    7b62:	0010      	movs	r0, r2
    7b64:	4798      	blx	r3
    7b66:	4c14      	ldr	r4, [pc, #80]	; (7bb8 <mcu_temp+0xfc>)
    7b68:	2200      	movs	r2, #0
    7b6a:	4b14      	ldr	r3, [pc, #80]	; (7bbc <mcu_temp+0x100>)
    7b6c:	47a0      	blx	r4
    7b6e:	0003      	movs	r3, r0
    7b70:	000c      	movs	r4, r1
    7b72:	001a      	movs	r2, r3
    7b74:	0023      	movs	r3, r4
    7b76:	4c13      	ldr	r4, [pc, #76]	; (7bc4 <mcu_temp+0x108>)
    7b78:	0028      	movs	r0, r5
    7b7a:	0031      	movs	r1, r6
    7b7c:	47a0      	blx	r4
    7b7e:	0003      	movs	r3, r0
    7b80:	000c      	movs	r4, r1
    7b82:	60bb      	str	r3, [r7, #8]
    7b84:	60fc      	str	r4, [r7, #12]
    }
	printf("MCU temperature: %dC \r\n", (int) temperature);
    7b86:	4b10      	ldr	r3, [pc, #64]	; (7bc8 <mcu_temp+0x10c>)
    7b88:	68b8      	ldr	r0, [r7, #8]
    7b8a:	68f9      	ldr	r1, [r7, #12]
    7b8c:	4798      	blx	r3
    7b8e:	0002      	movs	r2, r0
    7b90:	4b0e      	ldr	r3, [pc, #56]	; (7bcc <mcu_temp+0x110>)
    7b92:	0011      	movs	r1, r2
    7b94:	0018      	movs	r0, r3
    7b96:	4b0e      	ldr	r3, [pc, #56]	; (7bd0 <mcu_temp+0x114>)
    7b98:	4798      	blx	r3
}
    7b9a:	46c0      	nop			; (mov r8, r8)
    7b9c:	46bd      	mov	sp, r7
    7b9e:	b005      	add	sp, #20
    7ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ba2:	46c0      	nop			; (mov r8, r8)
    7ba4:	0000875d 	.word	0x0000875d
    7ba8:	200003a8 	.word	0x200003a8
    7bac:	00006e01 	.word	0x00006e01
    7bb0:	00006e49 	.word	0x00006e49
    7bb4:	0000dec9 	.word	0x0000dec9
    7bb8:	0000d2f5 	.word	0x0000d2f5
    7bbc:	3fe00000 	.word	0x3fe00000
    7bc0:	0000c46d 	.word	0x0000c46d
    7bc4:	0000d7f5 	.word	0x0000d7f5
    7bc8:	0000de61 	.word	0x0000de61
    7bcc:	0000e91c 	.word	0x0000e91c
    7bd0:	00009961 	.word	0x00009961

00007bd4 <i2c_scan>:
/**
 * Reports all connected I2C slave devices over a 7 bit (128) address space.
 *
 */
void i2c_scan()
{
    7bd4:	b590      	push	{r4, r7, lr}
    7bd6:	b085      	sub	sp, #20
    7bd8:	af00      	add	r7, sp, #0
	printf("Scanning lux bus\r\n");
    7bda:	4b42      	ldr	r3, [pc, #264]	; (7ce4 <i2c_scan+0x110>)
    7bdc:	0018      	movs	r0, r3
    7bde:	4b42      	ldr	r3, [pc, #264]	; (7ce8 <i2c_scan+0x114>)
    7be0:	4798      	blx	r3
	
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    7be2:	2300      	movs	r3, #0
    7be4:	60fb      	str	r3, [r7, #12]
    7be6:	e033      	b.n	7c50 <i2c_scan+0x7c>
		enum status_code i2c_status;
		wr_packet.address = slave_address;
    7be8:	68fb      	ldr	r3, [r7, #12]
    7bea:	b29a      	uxth	r2, r3
    7bec:	4b3f      	ldr	r3, [pc, #252]	; (7cec <i2c_scan+0x118>)
    7bee:	801a      	strh	r2, [r3, #0]
		rd_packet.address = slave_address;
    7bf0:	68fb      	ldr	r3, [r7, #12]
    7bf2:	b29a      	uxth	r2, r3
    7bf4:	4b3e      	ldr	r3, [pc, #248]	; (7cf0 <i2c_scan+0x11c>)
    7bf6:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 0;
    7bf8:	4b3c      	ldr	r3, [pc, #240]	; (7cec <i2c_scan+0x118>)
    7bfa:	2200      	movs	r2, #0
    7bfc:	805a      	strh	r2, [r3, #2]
		wr_buffer[0] = 0x05;
    7bfe:	4b3d      	ldr	r3, [pc, #244]	; (7cf4 <i2c_scan+0x120>)
    7c00:	2205      	movs	r2, #5
    7c02:	701a      	strb	r2, [r3, #0]
		wr_packet.data = wr_buffer;
    7c04:	4b39      	ldr	r3, [pc, #228]	; (7cec <i2c_scan+0x118>)
    7c06:	4a3b      	ldr	r2, [pc, #236]	; (7cf4 <i2c_scan+0x120>)
    7c08:	605a      	str	r2, [r3, #4]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_tsl_instance, &wr_packet);
    7c0a:	1dfc      	adds	r4, r7, #7
    7c0c:	4a37      	ldr	r2, [pc, #220]	; (7cec <i2c_scan+0x118>)
    7c0e:	4b3a      	ldr	r3, [pc, #232]	; (7cf8 <i2c_scan+0x124>)
    7c10:	0011      	movs	r1, r2
    7c12:	0018      	movs	r0, r3
    7c14:	4b39      	ldr	r3, [pc, #228]	; (7cfc <i2c_scan+0x128>)
    7c16:	4798      	blx	r3
    7c18:	0003      	movs	r3, r0
    7c1a:	7023      	strb	r3, [r4, #0]
		if (i2c_status == STATUS_OK) {
    7c1c:	1dfb      	adds	r3, r7, #7
    7c1e:	781b      	ldrb	r3, [r3, #0]
    7c20:	2b00      	cmp	r3, #0
    7c22:	d10e      	bne.n	7c42 <i2c_scan+0x6e>
			i2c_status = i2c_master_read_packet_wait(&i2c_tsl_instance, &rd_packet);
    7c24:	1dfc      	adds	r4, r7, #7
    7c26:	4a32      	ldr	r2, [pc, #200]	; (7cf0 <i2c_scan+0x11c>)
    7c28:	4b33      	ldr	r3, [pc, #204]	; (7cf8 <i2c_scan+0x124>)
    7c2a:	0011      	movs	r1, r2
    7c2c:	0018      	movs	r0, r3
    7c2e:	4b34      	ldr	r3, [pc, #208]	; (7d00 <i2c_scan+0x12c>)
    7c30:	4798      	blx	r3
    7c32:	0003      	movs	r3, r0
    7c34:	7023      	strb	r3, [r4, #0]
			printf("Address found at %#X\r\n", slave_address);
    7c36:	68fa      	ldr	r2, [r7, #12]
    7c38:	4b32      	ldr	r3, [pc, #200]	; (7d04 <i2c_scan+0x130>)
    7c3a:	0011      	movs	r1, r2
    7c3c:	0018      	movs	r0, r3
    7c3e:	4b32      	ldr	r3, [pc, #200]	; (7d08 <i2c_scan+0x134>)
    7c40:	4798      	blx	r3
		}
		i2c_master_send_stop(&i2c_tsl_instance);
    7c42:	4b2d      	ldr	r3, [pc, #180]	; (7cf8 <i2c_scan+0x124>)
    7c44:	0018      	movs	r0, r3
    7c46:	4b31      	ldr	r3, [pc, #196]	; (7d0c <i2c_scan+0x138>)
    7c48:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    7c4a:	68fb      	ldr	r3, [r7, #12]
    7c4c:	3301      	adds	r3, #1
    7c4e:	60fb      	str	r3, [r7, #12]
    7c50:	68fb      	ldr	r3, [r7, #12]
    7c52:	2b7f      	cmp	r3, #127	; 0x7f
    7c54:	ddc8      	ble.n	7be8 <i2c_scan+0x14>
	}
	
	printf("Scanning temp bus\r\n");
    7c56:	4b2e      	ldr	r3, [pc, #184]	; (7d10 <i2c_scan+0x13c>)
    7c58:	0018      	movs	r0, r3
    7c5a:	4b23      	ldr	r3, [pc, #140]	; (7ce8 <i2c_scan+0x114>)
    7c5c:	4798      	blx	r3
	

	for (int slave_address = 0; slave_address < 128; slave_address++) {
    7c5e:	2300      	movs	r3, #0
    7c60:	60bb      	str	r3, [r7, #8]
    7c62:	e033      	b.n	7ccc <i2c_scan+0xf8>
		//int slave_address = 64;
		enum status_code i2c_status;
		wr_packet.address = slave_address;
    7c64:	68bb      	ldr	r3, [r7, #8]
    7c66:	b29a      	uxth	r2, r3
    7c68:	4b20      	ldr	r3, [pc, #128]	; (7cec <i2c_scan+0x118>)
    7c6a:	801a      	strh	r2, [r3, #0]
		rd_packet.address = slave_address;
    7c6c:	68bb      	ldr	r3, [r7, #8]
    7c6e:	b29a      	uxth	r2, r3
    7c70:	4b1f      	ldr	r3, [pc, #124]	; (7cf0 <i2c_scan+0x11c>)
    7c72:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 0;
    7c74:	4b1d      	ldr	r3, [pc, #116]	; (7cec <i2c_scan+0x118>)
    7c76:	2200      	movs	r2, #0
    7c78:	805a      	strh	r2, [r3, #2]
		wr_buffer[0] = 0x05;
    7c7a:	4b1e      	ldr	r3, [pc, #120]	; (7cf4 <i2c_scan+0x120>)
    7c7c:	2205      	movs	r2, #5
    7c7e:	701a      	strb	r2, [r3, #0]
		wr_packet.data = wr_buffer;
    7c80:	4b1a      	ldr	r3, [pc, #104]	; (7cec <i2c_scan+0x118>)
    7c82:	4a1c      	ldr	r2, [pc, #112]	; (7cf4 <i2c_scan+0x120>)
    7c84:	605a      	str	r2, [r3, #4]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_hdc_instance, &wr_packet);
    7c86:	1dbc      	adds	r4, r7, #6
    7c88:	4a18      	ldr	r2, [pc, #96]	; (7cec <i2c_scan+0x118>)
    7c8a:	4b22      	ldr	r3, [pc, #136]	; (7d14 <i2c_scan+0x140>)
    7c8c:	0011      	movs	r1, r2
    7c8e:	0018      	movs	r0, r3
    7c90:	4b1a      	ldr	r3, [pc, #104]	; (7cfc <i2c_scan+0x128>)
    7c92:	4798      	blx	r3
    7c94:	0003      	movs	r3, r0
    7c96:	7023      	strb	r3, [r4, #0]
		if (i2c_status == STATUS_OK) {
    7c98:	1dbb      	adds	r3, r7, #6
    7c9a:	781b      	ldrb	r3, [r3, #0]
    7c9c:	2b00      	cmp	r3, #0
    7c9e:	d10e      	bne.n	7cbe <i2c_scan+0xea>
			i2c_status = i2c_master_read_packet_wait(&i2c_hdc_instance, &rd_packet);
    7ca0:	1dbc      	adds	r4, r7, #6
    7ca2:	4a13      	ldr	r2, [pc, #76]	; (7cf0 <i2c_scan+0x11c>)
    7ca4:	4b1b      	ldr	r3, [pc, #108]	; (7d14 <i2c_scan+0x140>)
    7ca6:	0011      	movs	r1, r2
    7ca8:	0018      	movs	r0, r3
    7caa:	4b15      	ldr	r3, [pc, #84]	; (7d00 <i2c_scan+0x12c>)
    7cac:	4798      	blx	r3
    7cae:	0003      	movs	r3, r0
    7cb0:	7023      	strb	r3, [r4, #0]
			printf("Address found at %#X\r\n", slave_address);
    7cb2:	68ba      	ldr	r2, [r7, #8]
    7cb4:	4b13      	ldr	r3, [pc, #76]	; (7d04 <i2c_scan+0x130>)
    7cb6:	0011      	movs	r1, r2
    7cb8:	0018      	movs	r0, r3
    7cba:	4b13      	ldr	r3, [pc, #76]	; (7d08 <i2c_scan+0x134>)
    7cbc:	4798      	blx	r3
		}
		i2c_master_send_stop(&i2c_hdc_instance);
    7cbe:	4b15      	ldr	r3, [pc, #84]	; (7d14 <i2c_scan+0x140>)
    7cc0:	0018      	movs	r0, r3
    7cc2:	4b12      	ldr	r3, [pc, #72]	; (7d0c <i2c_scan+0x138>)
    7cc4:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    7cc6:	68bb      	ldr	r3, [r7, #8]
    7cc8:	3301      	adds	r3, #1
    7cca:	60bb      	str	r3, [r7, #8]
    7ccc:	68bb      	ldr	r3, [r7, #8]
    7cce:	2b7f      	cmp	r3, #127	; 0x7f
    7cd0:	ddc8      	ble.n	7c64 <i2c_scan+0x90>
	}
	
	printf("Scans complete.\r\n");
    7cd2:	4b11      	ldr	r3, [pc, #68]	; (7d18 <i2c_scan+0x144>)
    7cd4:	0018      	movs	r0, r3
    7cd6:	4b04      	ldr	r3, [pc, #16]	; (7ce8 <i2c_scan+0x114>)
    7cd8:	4798      	blx	r3
}
    7cda:	46c0      	nop			; (mov r8, r8)
    7cdc:	46bd      	mov	sp, r7
    7cde:	b005      	add	sp, #20
    7ce0:	bd90      	pop	{r4, r7, pc}
    7ce2:	46c0      	nop			; (mov r8, r8)
    7ce4:	0000e934 	.word	0x0000e934
    7ce8:	00009a55 	.word	0x00009a55
    7cec:	20000060 	.word	0x20000060
    7cf0:	2000006c 	.word	0x2000006c
    7cf4:	20000058 	.word	0x20000058
    7cf8:	2000030c 	.word	0x2000030c
    7cfc:	00003c65 	.word	0x00003c65
    7d00:	00003a6d 	.word	0x00003a6d
    7d04:	0000e948 	.word	0x0000e948
    7d08:	00009961 	.word	0x00009961
    7d0c:	00003ca5 	.word	0x00003ca5
    7d10:	0000e960 	.word	0x0000e960
    7d14:	20000340 	.word	0x20000340
    7d18:	0000e974 	.word	0x0000e974

00007d1c <print_general_error>:
 * Prints a general error message.
 *
 * @param func_name function where error occured.
 */
void print_general_error(char *func_name)
{
    7d1c:	b580      	push	{r7, lr}
    7d1e:	b082      	sub	sp, #8
    7d20:	af00      	add	r7, sp, #0
    7d22:	6078      	str	r0, [r7, #4]
	printf("there was an error parsing your args for %s. See help for correct usage.\r\n", func_name);
    7d24:	687a      	ldr	r2, [r7, #4]
    7d26:	4b04      	ldr	r3, [pc, #16]	; (7d38 <print_general_error+0x1c>)
    7d28:	0011      	movs	r1, r2
    7d2a:	0018      	movs	r0, r3
    7d2c:	4b03      	ldr	r3, [pc, #12]	; (7d3c <print_general_error+0x20>)
    7d2e:	4798      	blx	r3
}
    7d30:	46c0      	nop			; (mov r8, r8)
    7d32:	46bd      	mov	sp, r7
    7d34:	b002      	add	sp, #8
    7d36:	bd80      	pop	{r7, pc}
    7d38:	0000e988 	.word	0x0000e988
    7d3c:	00009961 	.word	0x00009961

00007d40 <print_args_error>:
 * @param func_name     name of the function where error occured
 * @param required_args number of arguments required for the function
 * @param num_args      number of arguments given to the function
 */
void print_args_error(char *func_name, int required_args, int num_args)
{
    7d40:	b590      	push	{r4, r7, lr}
    7d42:	b085      	sub	sp, #20
    7d44:	af00      	add	r7, sp, #0
    7d46:	60f8      	str	r0, [r7, #12]
    7d48:	60b9      	str	r1, [r7, #8]
    7d4a:	607a      	str	r2, [r7, #4]
	printf("Invalid number of args: %s requires %d arguments and you provided %d \r\n."
    7d4c:	687b      	ldr	r3, [r7, #4]
    7d4e:	68ba      	ldr	r2, [r7, #8]
    7d50:	68f9      	ldr	r1, [r7, #12]
    7d52:	4803      	ldr	r0, [pc, #12]	; (7d60 <print_args_error+0x20>)
    7d54:	4c03      	ldr	r4, [pc, #12]	; (7d64 <print_args_error+0x24>)
    7d56:	47a0      	blx	r4
	       "See help for more information. \r\n", func_name, required_args, num_args);
}
    7d58:	46c0      	nop			; (mov r8, r8)
    7d5a:	46bd      	mov	sp, r7
    7d5c:	b005      	add	sp, #20
    7d5e:	bd90      	pop	{r4, r7, pc}
    7d60:	0000e9d4 	.word	0x0000e9d4
    7d64:	00009961 	.word	0x00009961

00007d68 <input_handle>:
 *
 * @param argc argument count, number of arguments given.
 * @param argv buffer holding all arguments
 */
void input_handle(int argc, char **argv)
{
    7d68:	b580      	push	{r7, lr}
    7d6a:	b0a4      	sub	sp, #144	; 0x90
    7d6c:	af00      	add	r7, sp, #0
    7d6e:	6078      	str	r0, [r7, #4]
    7d70:	6039      	str	r1, [r7, #0]
	if (!(strcmp("help", argv[0]))) {
    7d72:	683b      	ldr	r3, [r7, #0]
    7d74:	681a      	ldr	r2, [r3, #0]
    7d76:	4bd7      	ldr	r3, [pc, #860]	; (80d4 <input_handle+0x36c>)
    7d78:	0011      	movs	r1, r2
    7d7a:	0018      	movs	r0, r3
    7d7c:	4bd6      	ldr	r3, [pc, #856]	; (80d8 <input_handle+0x370>)
    7d7e:	4798      	blx	r3
    7d80:	1e03      	subs	r3, r0, #0
    7d82:	d117      	bne.n	7db4 <input_handle+0x4c>
		int required_args = 1;
    7d84:	2301      	movs	r3, #1
    7d86:	228c      	movs	r2, #140	; 0x8c
    7d88:	18ba      	adds	r2, r7, r2
    7d8a:	6013      	str	r3, [r2, #0]
		if (argc != required_args) {
    7d8c:	687a      	ldr	r2, [r7, #4]
    7d8e:	238c      	movs	r3, #140	; 0x8c
    7d90:	18fb      	adds	r3, r7, r3
    7d92:	681b      	ldr	r3, [r3, #0]
    7d94:	429a      	cmp	r2, r3
    7d96:	d009      	beq.n	7dac <input_handle+0x44>
			print_args_error("help", required_args, argc);
    7d98:	687a      	ldr	r2, [r7, #4]
    7d9a:	238c      	movs	r3, #140	; 0x8c
    7d9c:	18fb      	adds	r3, r7, r3
    7d9e:	6819      	ldr	r1, [r3, #0]
    7da0:	4bcc      	ldr	r3, [pc, #816]	; (80d4 <input_handle+0x36c>)
    7da2:	0018      	movs	r0, r3
    7da4:	4bcd      	ldr	r3, [pc, #820]	; (80dc <input_handle+0x374>)
    7da6:	4798      	blx	r3
			return;
    7da8:	f000 fbcd 	bl	8546 <input_handle+0x7de>
		}
		help();
    7dac:	4bcc      	ldr	r3, [pc, #816]	; (80e0 <input_handle+0x378>)
    7dae:	4798      	blx	r3
    7db0:	f000 fbc9 	bl	8546 <input_handle+0x7de>
	} else if (!(strcmp("ver_bl", argv[0]))) {
    7db4:	683b      	ldr	r3, [r7, #0]
    7db6:	681a      	ldr	r2, [r3, #0]
    7db8:	4bca      	ldr	r3, [pc, #808]	; (80e4 <input_handle+0x37c>)
    7dba:	0011      	movs	r1, r2
    7dbc:	0018      	movs	r0, r3
    7dbe:	4bc6      	ldr	r3, [pc, #792]	; (80d8 <input_handle+0x370>)
    7dc0:	4798      	blx	r3
    7dc2:	1e03      	subs	r3, r0, #0
    7dc4:	d117      	bne.n	7df6 <input_handle+0x8e>
		int required_args = 1;
    7dc6:	2301      	movs	r3, #1
    7dc8:	2288      	movs	r2, #136	; 0x88
    7dca:	18ba      	adds	r2, r7, r2
    7dcc:	6013      	str	r3, [r2, #0]
		if (argc != required_args) {
    7dce:	687a      	ldr	r2, [r7, #4]
    7dd0:	2388      	movs	r3, #136	; 0x88
    7dd2:	18fb      	adds	r3, r7, r3
    7dd4:	681b      	ldr	r3, [r3, #0]
    7dd6:	429a      	cmp	r2, r3
    7dd8:	d009      	beq.n	7dee <input_handle+0x86>
			print_args_error("ver_bl", required_args, argc);
    7dda:	687a      	ldr	r2, [r7, #4]
    7ddc:	2388      	movs	r3, #136	; 0x88
    7dde:	18fb      	adds	r3, r7, r3
    7de0:	6819      	ldr	r1, [r3, #0]
    7de2:	4bc0      	ldr	r3, [pc, #768]	; (80e4 <input_handle+0x37c>)
    7de4:	0018      	movs	r0, r3
    7de6:	4bbd      	ldr	r3, [pc, #756]	; (80dc <input_handle+0x374>)
    7de8:	4798      	blx	r3
			return;
    7dea:	f000 fbac 	bl	8546 <input_handle+0x7de>
		}
		ver_bl();
    7dee:	4bbe      	ldr	r3, [pc, #760]	; (80e8 <input_handle+0x380>)
    7df0:	4798      	blx	r3
    7df2:	f000 fba8 	bl	8546 <input_handle+0x7de>
	} else if (!(strcmp("ver_app", argv[0]))) {
    7df6:	683b      	ldr	r3, [r7, #0]
    7df8:	681a      	ldr	r2, [r3, #0]
    7dfa:	4bbc      	ldr	r3, [pc, #752]	; (80ec <input_handle+0x384>)
    7dfc:	0011      	movs	r1, r2
    7dfe:	0018      	movs	r0, r3
    7e00:	4bb5      	ldr	r3, [pc, #724]	; (80d8 <input_handle+0x370>)
    7e02:	4798      	blx	r3
    7e04:	1e03      	subs	r3, r0, #0
    7e06:	d117      	bne.n	7e38 <input_handle+0xd0>
		int required_args = 1;
    7e08:	2301      	movs	r3, #1
    7e0a:	2284      	movs	r2, #132	; 0x84
    7e0c:	18ba      	adds	r2, r7, r2
    7e0e:	6013      	str	r3, [r2, #0]
		if (argc != required_args) {
    7e10:	687a      	ldr	r2, [r7, #4]
    7e12:	2384      	movs	r3, #132	; 0x84
    7e14:	18fb      	adds	r3, r7, r3
    7e16:	681b      	ldr	r3, [r3, #0]
    7e18:	429a      	cmp	r2, r3
    7e1a:	d009      	beq.n	7e30 <input_handle+0xc8>
			print_args_error("ver_app", required_args, argc);
    7e1c:	687a      	ldr	r2, [r7, #4]
    7e1e:	2384      	movs	r3, #132	; 0x84
    7e20:	18fb      	adds	r3, r7, r3
    7e22:	6819      	ldr	r1, [r3, #0]
    7e24:	4bb1      	ldr	r3, [pc, #708]	; (80ec <input_handle+0x384>)
    7e26:	0018      	movs	r0, r3
    7e28:	4bac      	ldr	r3, [pc, #688]	; (80dc <input_handle+0x374>)
    7e2a:	4798      	blx	r3
			return;
    7e2c:	f000 fb8b 	bl	8546 <input_handle+0x7de>
		}
		ver_app();
    7e30:	4baf      	ldr	r3, [pc, #700]	; (80f0 <input_handle+0x388>)
    7e32:	4798      	blx	r3
    7e34:	f000 fb87 	bl	8546 <input_handle+0x7de>
	} else if (!(strcmp("gpio_set", argv[0]))) {
    7e38:	683b      	ldr	r3, [r7, #0]
    7e3a:	681a      	ldr	r2, [r3, #0]
    7e3c:	4bad      	ldr	r3, [pc, #692]	; (80f4 <input_handle+0x38c>)
    7e3e:	0011      	movs	r1, r2
    7e40:	0018      	movs	r0, r3
    7e42:	4ba5      	ldr	r3, [pc, #660]	; (80d8 <input_handle+0x370>)
    7e44:	4798      	blx	r3
    7e46:	1e03      	subs	r3, r0, #0
    7e48:	d13e      	bne.n	7ec8 <input_handle+0x160>
		int required_args = 3;
    7e4a:	2303      	movs	r3, #3
    7e4c:	2280      	movs	r2, #128	; 0x80
    7e4e:	18ba      	adds	r2, r7, r2
    7e50:	6013      	str	r3, [r2, #0]
		if (argc != required_args) {
    7e52:	687a      	ldr	r2, [r7, #4]
    7e54:	2380      	movs	r3, #128	; 0x80
    7e56:	18fb      	adds	r3, r7, r3
    7e58:	681b      	ldr	r3, [r3, #0]
    7e5a:	429a      	cmp	r2, r3
    7e5c:	d009      	beq.n	7e72 <input_handle+0x10a>
			print_args_error("gpio_set", required_args, argc);
    7e5e:	687a      	ldr	r2, [r7, #4]
    7e60:	2380      	movs	r3, #128	; 0x80
    7e62:	18fb      	adds	r3, r7, r3
    7e64:	6819      	ldr	r1, [r3, #0]
    7e66:	4ba3      	ldr	r3, [pc, #652]	; (80f4 <input_handle+0x38c>)
    7e68:	0018      	movs	r0, r3
    7e6a:	4b9c      	ldr	r3, [pc, #624]	; (80dc <input_handle+0x374>)
    7e6c:	4798      	blx	r3
			return;
    7e6e:	f000 fb6a 	bl	8546 <input_handle+0x7de>
		}
		char port = argv[1][0];
    7e72:	683b      	ldr	r3, [r7, #0]
    7e74:	3304      	adds	r3, #4
    7e76:	681a      	ldr	r2, [r3, #0]
    7e78:	237f      	movs	r3, #127	; 0x7f
    7e7a:	18fb      	adds	r3, r7, r3
    7e7c:	7812      	ldrb	r2, [r2, #0]
    7e7e:	701a      	strb	r2, [r3, #0]
		int pin = atoi(argv[2]);
    7e80:	683b      	ldr	r3, [r7, #0]
    7e82:	3308      	adds	r3, #8
    7e84:	681b      	ldr	r3, [r3, #0]
    7e86:	0018      	movs	r0, r3
    7e88:	4b9b      	ldr	r3, [pc, #620]	; (80f8 <input_handle+0x390>)
    7e8a:	4798      	blx	r3
    7e8c:	0003      	movs	r3, r0
    7e8e:	67bb      	str	r3, [r7, #120]	; 0x78
		if (isdigit(argv[2][0]))
    7e90:	4b9a      	ldr	r3, [pc, #616]	; (80fc <input_handle+0x394>)
    7e92:	4798      	blx	r3
    7e94:	0002      	movs	r2, r0
    7e96:	683b      	ldr	r3, [r7, #0]
    7e98:	3308      	adds	r3, #8
    7e9a:	681b      	ldr	r3, [r3, #0]
    7e9c:	781b      	ldrb	r3, [r3, #0]
    7e9e:	3301      	adds	r3, #1
    7ea0:	18d3      	adds	r3, r2, r3
    7ea2:	781b      	ldrb	r3, [r3, #0]
    7ea4:	001a      	movs	r2, r3
    7ea6:	2304      	movs	r3, #4
    7ea8:	4013      	ands	r3, r2
    7eaa:	d008      	beq.n	7ebe <input_handle+0x156>
			gpio_set(port, pin);
    7eac:	6fba      	ldr	r2, [r7, #120]	; 0x78
    7eae:	237f      	movs	r3, #127	; 0x7f
    7eb0:	18fb      	adds	r3, r7, r3
    7eb2:	781b      	ldrb	r3, [r3, #0]
    7eb4:	0011      	movs	r1, r2
    7eb6:	0018      	movs	r0, r3
    7eb8:	4b91      	ldr	r3, [pc, #580]	; (8100 <input_handle+0x398>)
    7eba:	4798      	blx	r3
    7ebc:	e343      	b.n	8546 <input_handle+0x7de>
		else
			print_general_error("gpio_set");
    7ebe:	4b8d      	ldr	r3, [pc, #564]	; (80f4 <input_handle+0x38c>)
    7ec0:	0018      	movs	r0, r3
    7ec2:	4b90      	ldr	r3, [pc, #576]	; (8104 <input_handle+0x39c>)
    7ec4:	4798      	blx	r3
    7ec6:	e33e      	b.n	8546 <input_handle+0x7de>
	} else if (!(strcmp("gpio_clear", argv[0]))) {
    7ec8:	683b      	ldr	r3, [r7, #0]
    7eca:	681a      	ldr	r2, [r3, #0]
    7ecc:	4b8e      	ldr	r3, [pc, #568]	; (8108 <input_handle+0x3a0>)
    7ece:	0011      	movs	r1, r2
    7ed0:	0018      	movs	r0, r3
    7ed2:	4b81      	ldr	r3, [pc, #516]	; (80d8 <input_handle+0x370>)
    7ed4:	4798      	blx	r3
    7ed6:	1e03      	subs	r3, r0, #0
    7ed8:	d137      	bne.n	7f4a <input_handle+0x1e2>
		int required_args = 3;
    7eda:	2303      	movs	r3, #3
    7edc:	677b      	str	r3, [r7, #116]	; 0x74
		if (argc != required_args) {
    7ede:	687a      	ldr	r2, [r7, #4]
    7ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7ee2:	429a      	cmp	r2, r3
    7ee4:	d006      	beq.n	7ef4 <input_handle+0x18c>
			print_args_error("gpio_clear", required_args, argc);
    7ee6:	687a      	ldr	r2, [r7, #4]
    7ee8:	6f79      	ldr	r1, [r7, #116]	; 0x74
    7eea:	4b87      	ldr	r3, [pc, #540]	; (8108 <input_handle+0x3a0>)
    7eec:	0018      	movs	r0, r3
    7eee:	4b7b      	ldr	r3, [pc, #492]	; (80dc <input_handle+0x374>)
    7ef0:	4798      	blx	r3
			return;
    7ef2:	e328      	b.n	8546 <input_handle+0x7de>
		}
		char port = argv[1][0];
    7ef4:	683b      	ldr	r3, [r7, #0]
    7ef6:	3304      	adds	r3, #4
    7ef8:	681a      	ldr	r2, [r3, #0]
    7efa:	2373      	movs	r3, #115	; 0x73
    7efc:	18fb      	adds	r3, r7, r3
    7efe:	7812      	ldrb	r2, [r2, #0]
    7f00:	701a      	strb	r2, [r3, #0]
		int pin = atoi(argv[2]);
    7f02:	683b      	ldr	r3, [r7, #0]
    7f04:	3308      	adds	r3, #8
    7f06:	681b      	ldr	r3, [r3, #0]
    7f08:	0018      	movs	r0, r3
    7f0a:	4b7b      	ldr	r3, [pc, #492]	; (80f8 <input_handle+0x390>)
    7f0c:	4798      	blx	r3
    7f0e:	0003      	movs	r3, r0
    7f10:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (isdigit(argv[2][0]))
    7f12:	4b7a      	ldr	r3, [pc, #488]	; (80fc <input_handle+0x394>)
    7f14:	4798      	blx	r3
    7f16:	0002      	movs	r2, r0
    7f18:	683b      	ldr	r3, [r7, #0]
    7f1a:	3308      	adds	r3, #8
    7f1c:	681b      	ldr	r3, [r3, #0]
    7f1e:	781b      	ldrb	r3, [r3, #0]
    7f20:	3301      	adds	r3, #1
    7f22:	18d3      	adds	r3, r2, r3
    7f24:	781b      	ldrb	r3, [r3, #0]
    7f26:	001a      	movs	r2, r3
    7f28:	2304      	movs	r3, #4
    7f2a:	4013      	ands	r3, r2
    7f2c:	d008      	beq.n	7f40 <input_handle+0x1d8>
			gpio_clear(port, pin);
    7f2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    7f30:	2373      	movs	r3, #115	; 0x73
    7f32:	18fb      	adds	r3, r7, r3
    7f34:	781b      	ldrb	r3, [r3, #0]
    7f36:	0011      	movs	r1, r2
    7f38:	0018      	movs	r0, r3
    7f3a:	4b74      	ldr	r3, [pc, #464]	; (810c <input_handle+0x3a4>)
    7f3c:	4798      	blx	r3
    7f3e:	e302      	b.n	8546 <input_handle+0x7de>
		else
			print_general_error("gpio_clear");
    7f40:	4b71      	ldr	r3, [pc, #452]	; (8108 <input_handle+0x3a0>)
    7f42:	0018      	movs	r0, r3
    7f44:	4b6f      	ldr	r3, [pc, #444]	; (8104 <input_handle+0x39c>)
    7f46:	4798      	blx	r3
    7f48:	e2fd      	b.n	8546 <input_handle+0x7de>
	} else if (!(strcmp("gpio_get", argv[0]))) {
    7f4a:	683b      	ldr	r3, [r7, #0]
    7f4c:	681a      	ldr	r2, [r3, #0]
    7f4e:	4b70      	ldr	r3, [pc, #448]	; (8110 <input_handle+0x3a8>)
    7f50:	0011      	movs	r1, r2
    7f52:	0018      	movs	r0, r3
    7f54:	4b60      	ldr	r3, [pc, #384]	; (80d8 <input_handle+0x370>)
    7f56:	4798      	blx	r3
    7f58:	1e03      	subs	r3, r0, #0
    7f5a:	d137      	bne.n	7fcc <input_handle+0x264>
		int required_args = 3;
    7f5c:	2303      	movs	r3, #3
    7f5e:	66bb      	str	r3, [r7, #104]	; 0x68
		if (argc != required_args) {
    7f60:	687a      	ldr	r2, [r7, #4]
    7f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7f64:	429a      	cmp	r2, r3
    7f66:	d006      	beq.n	7f76 <input_handle+0x20e>
			print_args_error("gpio_get", required_args, argc);
    7f68:	687a      	ldr	r2, [r7, #4]
    7f6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    7f6c:	4b68      	ldr	r3, [pc, #416]	; (8110 <input_handle+0x3a8>)
    7f6e:	0018      	movs	r0, r3
    7f70:	4b5a      	ldr	r3, [pc, #360]	; (80dc <input_handle+0x374>)
    7f72:	4798      	blx	r3
			return;
    7f74:	e2e7      	b.n	8546 <input_handle+0x7de>
		}
		char port = argv[1][0];
    7f76:	683b      	ldr	r3, [r7, #0]
    7f78:	3304      	adds	r3, #4
    7f7a:	681a      	ldr	r2, [r3, #0]
    7f7c:	2367      	movs	r3, #103	; 0x67
    7f7e:	18fb      	adds	r3, r7, r3
    7f80:	7812      	ldrb	r2, [r2, #0]
    7f82:	701a      	strb	r2, [r3, #0]
		int pin = atoi(argv[2]);
    7f84:	683b      	ldr	r3, [r7, #0]
    7f86:	3308      	adds	r3, #8
    7f88:	681b      	ldr	r3, [r3, #0]
    7f8a:	0018      	movs	r0, r3
    7f8c:	4b5a      	ldr	r3, [pc, #360]	; (80f8 <input_handle+0x390>)
    7f8e:	4798      	blx	r3
    7f90:	0003      	movs	r3, r0
    7f92:	663b      	str	r3, [r7, #96]	; 0x60
		if (isdigit(argv[2][0]))
    7f94:	4b59      	ldr	r3, [pc, #356]	; (80fc <input_handle+0x394>)
    7f96:	4798      	blx	r3
    7f98:	0002      	movs	r2, r0
    7f9a:	683b      	ldr	r3, [r7, #0]
    7f9c:	3308      	adds	r3, #8
    7f9e:	681b      	ldr	r3, [r3, #0]
    7fa0:	781b      	ldrb	r3, [r3, #0]
    7fa2:	3301      	adds	r3, #1
    7fa4:	18d3      	adds	r3, r2, r3
    7fa6:	781b      	ldrb	r3, [r3, #0]
    7fa8:	001a      	movs	r2, r3
    7faa:	2304      	movs	r3, #4
    7fac:	4013      	ands	r3, r2
    7fae:	d008      	beq.n	7fc2 <input_handle+0x25a>
			gpio_get(port, pin);
    7fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    7fb2:	2367      	movs	r3, #103	; 0x67
    7fb4:	18fb      	adds	r3, r7, r3
    7fb6:	781b      	ldrb	r3, [r3, #0]
    7fb8:	0011      	movs	r1, r2
    7fba:	0018      	movs	r0, r3
    7fbc:	4b55      	ldr	r3, [pc, #340]	; (8114 <input_handle+0x3ac>)
    7fbe:	4798      	blx	r3
    7fc0:	e2c1      	b.n	8546 <input_handle+0x7de>
		else
			print_general_error("gpio_get");
    7fc2:	4b53      	ldr	r3, [pc, #332]	; (8110 <input_handle+0x3a8>)
    7fc4:	0018      	movs	r0, r3
    7fc6:	4b4f      	ldr	r3, [pc, #316]	; (8104 <input_handle+0x39c>)
    7fc8:	4798      	blx	r3
    7fca:	e2bc      	b.n	8546 <input_handle+0x7de>
	} else if (!(strcmp("mac", argv[0]))) {
    7fcc:	683b      	ldr	r3, [r7, #0]
    7fce:	681a      	ldr	r2, [r3, #0]
    7fd0:	4b51      	ldr	r3, [pc, #324]	; (8118 <input_handle+0x3b0>)
    7fd2:	0011      	movs	r1, r2
    7fd4:	0018      	movs	r0, r3
    7fd6:	4b40      	ldr	r3, [pc, #256]	; (80d8 <input_handle+0x370>)
    7fd8:	4798      	blx	r3
    7fda:	1e03      	subs	r3, r0, #0
    7fdc:	d10f      	bne.n	7ffe <input_handle+0x296>
		int required_args = 1;
    7fde:	2301      	movs	r3, #1
    7fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (argc != required_args) {
    7fe2:	687a      	ldr	r2, [r7, #4]
    7fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    7fe6:	429a      	cmp	r2, r3
    7fe8:	d006      	beq.n	7ff8 <input_handle+0x290>
			print_args_error("mac", required_args, argc);
    7fea:	687a      	ldr	r2, [r7, #4]
    7fec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    7fee:	4b4a      	ldr	r3, [pc, #296]	; (8118 <input_handle+0x3b0>)
    7ff0:	0018      	movs	r0, r3
    7ff2:	4b3a      	ldr	r3, [pc, #232]	; (80dc <input_handle+0x374>)
    7ff4:	4798      	blx	r3
			return;
    7ff6:	e2a6      	b.n	8546 <input_handle+0x7de>
		}
		mac();
    7ff8:	4b48      	ldr	r3, [pc, #288]	; (811c <input_handle+0x3b4>)
    7ffa:	4798      	blx	r3
    7ffc:	e2a3      	b.n	8546 <input_handle+0x7de>
	} else if (!(strcmp("ip", argv[0]))) {
    7ffe:	683b      	ldr	r3, [r7, #0]
    8000:	681a      	ldr	r2, [r3, #0]
    8002:	4b47      	ldr	r3, [pc, #284]	; (8120 <input_handle+0x3b8>)
    8004:	0011      	movs	r1, r2
    8006:	0018      	movs	r0, r3
    8008:	4b33      	ldr	r3, [pc, #204]	; (80d8 <input_handle+0x370>)
    800a:	4798      	blx	r3
    800c:	1e03      	subs	r3, r0, #0
    800e:	d10f      	bne.n	8030 <input_handle+0x2c8>
		int required_args = 1;
    8010:	2301      	movs	r3, #1
    8012:	65bb      	str	r3, [r7, #88]	; 0x58
		if (argc != required_args) {
    8014:	687a      	ldr	r2, [r7, #4]
    8016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    8018:	429a      	cmp	r2, r3
    801a:	d006      	beq.n	802a <input_handle+0x2c2>
			print_args_error("ip", required_args, argc);
    801c:	687a      	ldr	r2, [r7, #4]
    801e:	6db9      	ldr	r1, [r7, #88]	; 0x58
    8020:	4b3f      	ldr	r3, [pc, #252]	; (8120 <input_handle+0x3b8>)
    8022:	0018      	movs	r0, r3
    8024:	4b2d      	ldr	r3, [pc, #180]	; (80dc <input_handle+0x374>)
    8026:	4798      	blx	r3
			return;
    8028:	e28d      	b.n	8546 <input_handle+0x7de>
		}
		ip();
    802a:	4b3e      	ldr	r3, [pc, #248]	; (8124 <input_handle+0x3bc>)
    802c:	4798      	blx	r3
    802e:	e28a      	b.n	8546 <input_handle+0x7de>
	} else if (!(strcmp("read", argv[0]))) {
    8030:	683b      	ldr	r3, [r7, #0]
    8032:	681a      	ldr	r2, [r3, #0]
    8034:	4b3c      	ldr	r3, [pc, #240]	; (8128 <input_handle+0x3c0>)
    8036:	0011      	movs	r1, r2
    8038:	0018      	movs	r0, r3
    803a:	4b27      	ldr	r3, [pc, #156]	; (80d8 <input_handle+0x370>)
    803c:	4798      	blx	r3
    803e:	1e03      	subs	r3, r0, #0
    8040:	d000      	beq.n	8044 <input_handle+0x2dc>
    8042:	e075      	b.n	8130 <input_handle+0x3c8>
		int required_args = 4;
    8044:	2304      	movs	r3, #4
    8046:	657b      	str	r3, [r7, #84]	; 0x54
		if (argc != required_args) {
    8048:	687a      	ldr	r2, [r7, #4]
    804a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    804c:	429a      	cmp	r2, r3
    804e:	d006      	beq.n	805e <input_handle+0x2f6>
			print_args_error("read", required_args, argc);
    8050:	687a      	ldr	r2, [r7, #4]
    8052:	6d79      	ldr	r1, [r7, #84]	; 0x54
    8054:	4b34      	ldr	r3, [pc, #208]	; (8128 <input_handle+0x3c0>)
    8056:	0018      	movs	r0, r3
    8058:	4b20      	ldr	r3, [pc, #128]	; (80dc <input_handle+0x374>)
    805a:	4798      	blx	r3
			return;
    805c:	e273      	b.n	8546 <input_handle+0x7de>
		}
		int reading = atoi(argv[2]);
    805e:	683b      	ldr	r3, [r7, #0]
    8060:	3308      	adds	r3, #8
    8062:	681b      	ldr	r3, [r3, #0]
    8064:	0018      	movs	r0, r3
    8066:	4b24      	ldr	r3, [pc, #144]	; (80f8 <input_handle+0x390>)
    8068:	4798      	blx	r3
    806a:	0003      	movs	r3, r0
    806c:	653b      	str	r3, [r7, #80]	; 0x50
		int interval_ms = atoi(argv[3]);
    806e:	683b      	ldr	r3, [r7, #0]
    8070:	330c      	adds	r3, #12
    8072:	681b      	ldr	r3, [r3, #0]
    8074:	0018      	movs	r0, r3
    8076:	4b20      	ldr	r3, [pc, #128]	; (80f8 <input_handle+0x390>)
    8078:	4798      	blx	r3
    807a:	0003      	movs	r3, r0
    807c:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (isdigit(argv[2][0]) && isdigit(argv[3][0]))
    807e:	4b1f      	ldr	r3, [pc, #124]	; (80fc <input_handle+0x394>)
    8080:	4798      	blx	r3
    8082:	0002      	movs	r2, r0
    8084:	683b      	ldr	r3, [r7, #0]
    8086:	3308      	adds	r3, #8
    8088:	681b      	ldr	r3, [r3, #0]
    808a:	781b      	ldrb	r3, [r3, #0]
    808c:	3301      	adds	r3, #1
    808e:	18d3      	adds	r3, r2, r3
    8090:	781b      	ldrb	r3, [r3, #0]
    8092:	001a      	movs	r2, r3
    8094:	2304      	movs	r3, #4
    8096:	4013      	ands	r3, r2
    8098:	d016      	beq.n	80c8 <input_handle+0x360>
    809a:	4b18      	ldr	r3, [pc, #96]	; (80fc <input_handle+0x394>)
    809c:	4798      	blx	r3
    809e:	0002      	movs	r2, r0
    80a0:	683b      	ldr	r3, [r7, #0]
    80a2:	330c      	adds	r3, #12
    80a4:	681b      	ldr	r3, [r3, #0]
    80a6:	781b      	ldrb	r3, [r3, #0]
    80a8:	3301      	adds	r3, #1
    80aa:	18d3      	adds	r3, r2, r3
    80ac:	781b      	ldrb	r3, [r3, #0]
    80ae:	001a      	movs	r2, r3
    80b0:	2304      	movs	r3, #4
    80b2:	4013      	ands	r3, r2
    80b4:	d008      	beq.n	80c8 <input_handle+0x360>
			read_sensor(argv[1], reading, interval_ms);
    80b6:	683b      	ldr	r3, [r7, #0]
    80b8:	3304      	adds	r3, #4
    80ba:	681b      	ldr	r3, [r3, #0]
    80bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    80be:	6d39      	ldr	r1, [r7, #80]	; 0x50
    80c0:	0018      	movs	r0, r3
    80c2:	4b1a      	ldr	r3, [pc, #104]	; (812c <input_handle+0x3c4>)
    80c4:	4798      	blx	r3
    80c6:	e23e      	b.n	8546 <input_handle+0x7de>
		else
			print_general_error("read");
    80c8:	4b17      	ldr	r3, [pc, #92]	; (8128 <input_handle+0x3c0>)
    80ca:	0018      	movs	r0, r3
    80cc:	4b0d      	ldr	r3, [pc, #52]	; (8104 <input_handle+0x39c>)
    80ce:	4798      	blx	r3
    80d0:	e239      	b.n	8546 <input_handle+0x7de>
    80d2:	46c0      	nop			; (mov r8, r8)
    80d4:	0000ea40 	.word	0x0000ea40
    80d8:	00009bf9 	.word	0x00009bf9
    80dc:	00007d41 	.word	0x00007d41
    80e0:	000075d1 	.word	0x000075d1
    80e4:	0000ea48 	.word	0x0000ea48
    80e8:	000075ed 	.word	0x000075ed
    80ec:	0000ea50 	.word	0x0000ea50
    80f0:	00007611 	.word	0x00007611
    80f4:	0000ea58 	.word	0x0000ea58
    80f8:	00008e5d 	.word	0x00008e5d
    80fc:	00008eb9 	.word	0x00008eb9
    8100:	00007635 	.word	0x00007635
    8104:	00007d1d 	.word	0x00007d1d
    8108:	0000ea64 	.word	0x0000ea64
    810c:	00007699 	.word	0x00007699
    8110:	0000ea70 	.word	0x0000ea70
    8114:	000076fd 	.word	0x000076fd
    8118:	0000ea7c 	.word	0x0000ea7c
    811c:	0000775d 	.word	0x0000775d
    8120:	0000ea80 	.word	0x0000ea80
    8124:	00007779 	.word	0x00007779
    8128:	0000ea84 	.word	0x0000ea84
    812c:	00007795 	.word	0x00007795
	} else if (!(strcmp("adc_get", argv[0]))) {
    8130:	683b      	ldr	r3, [r7, #0]
    8132:	681a      	ldr	r2, [r3, #0]
    8134:	4bc9      	ldr	r3, [pc, #804]	; (845c <input_handle+0x6f4>)
    8136:	0011      	movs	r1, r2
    8138:	0018      	movs	r0, r3
    813a:	4bc9      	ldr	r3, [pc, #804]	; (8460 <input_handle+0x6f8>)
    813c:	4798      	blx	r3
    813e:	1e03      	subs	r3, r0, #0
    8140:	d137      	bne.n	81b2 <input_handle+0x44a>
		int required_args = 3;
    8142:	2303      	movs	r3, #3
    8144:	64bb      	str	r3, [r7, #72]	; 0x48
		if (argc != required_args) {
    8146:	687a      	ldr	r2, [r7, #4]
    8148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    814a:	429a      	cmp	r2, r3
    814c:	d006      	beq.n	815c <input_handle+0x3f4>
			print_args_error("adc_get", required_args, argc);
    814e:	687a      	ldr	r2, [r7, #4]
    8150:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    8152:	4bc2      	ldr	r3, [pc, #776]	; (845c <input_handle+0x6f4>)
    8154:	0018      	movs	r0, r3
    8156:	4bc3      	ldr	r3, [pc, #780]	; (8464 <input_handle+0x6fc>)
    8158:	4798      	blx	r3
			return;
    815a:	e1f4      	b.n	8546 <input_handle+0x7de>
		}
		char port = argv[1][0];
    815c:	683b      	ldr	r3, [r7, #0]
    815e:	3304      	adds	r3, #4
    8160:	681a      	ldr	r2, [r3, #0]
    8162:	2347      	movs	r3, #71	; 0x47
    8164:	18fb      	adds	r3, r7, r3
    8166:	7812      	ldrb	r2, [r2, #0]
    8168:	701a      	strb	r2, [r3, #0]
		int pin = atoi(argv[2]);
    816a:	683b      	ldr	r3, [r7, #0]
    816c:	3308      	adds	r3, #8
    816e:	681b      	ldr	r3, [r3, #0]
    8170:	0018      	movs	r0, r3
    8172:	4bbd      	ldr	r3, [pc, #756]	; (8468 <input_handle+0x700>)
    8174:	4798      	blx	r3
    8176:	0003      	movs	r3, r0
    8178:	643b      	str	r3, [r7, #64]	; 0x40
		//TODO: isdigit should check [2][0] for all isdigit calls
		if (isdigit(argv[2][0])) {
    817a:	4bbc      	ldr	r3, [pc, #752]	; (846c <input_handle+0x704>)
    817c:	4798      	blx	r3
    817e:	0002      	movs	r2, r0
    8180:	683b      	ldr	r3, [r7, #0]
    8182:	3308      	adds	r3, #8
    8184:	681b      	ldr	r3, [r3, #0]
    8186:	781b      	ldrb	r3, [r3, #0]
    8188:	3301      	adds	r3, #1
    818a:	18d3      	adds	r3, r2, r3
    818c:	781b      	ldrb	r3, [r3, #0]
    818e:	001a      	movs	r2, r3
    8190:	2304      	movs	r3, #4
    8192:	4013      	ands	r3, r2
    8194:	d008      	beq.n	81a8 <input_handle+0x440>
			adc_get(port, pin);
    8196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    8198:	2347      	movs	r3, #71	; 0x47
    819a:	18fb      	adds	r3, r7, r3
    819c:	781b      	ldrb	r3, [r3, #0]
    819e:	0011      	movs	r1, r2
    81a0:	0018      	movs	r0, r3
    81a2:	4bb3      	ldr	r3, [pc, #716]	; (8470 <input_handle+0x708>)
    81a4:	4798      	blx	r3
    81a6:	e1ce      	b.n	8546 <input_handle+0x7de>
		} else {
			print_general_error("adc_get");
    81a8:	4bac      	ldr	r3, [pc, #688]	; (845c <input_handle+0x6f4>)
    81aa:	0018      	movs	r0, r3
    81ac:	4bb1      	ldr	r3, [pc, #708]	; (8474 <input_handle+0x70c>)
    81ae:	4798      	blx	r3
    81b0:	e1c9      	b.n	8546 <input_handle+0x7de>
		}
	} else if (!(strcmp("mcu_temp", argv[0]))) {
    81b2:	683b      	ldr	r3, [r7, #0]
    81b4:	681a      	ldr	r2, [r3, #0]
    81b6:	4bb0      	ldr	r3, [pc, #704]	; (8478 <input_handle+0x710>)
    81b8:	0011      	movs	r1, r2
    81ba:	0018      	movs	r0, r3
    81bc:	4ba8      	ldr	r3, [pc, #672]	; (8460 <input_handle+0x6f8>)
    81be:	4798      	blx	r3
    81c0:	1e03      	subs	r3, r0, #0
    81c2:	d10f      	bne.n	81e4 <input_handle+0x47c>
		int required_args = 1;
    81c4:	2301      	movs	r3, #1
    81c6:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (argc != required_args) {
    81c8:	687a      	ldr	r2, [r7, #4]
    81ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    81cc:	429a      	cmp	r2, r3
    81ce:	d006      	beq.n	81de <input_handle+0x476>
			print_args_error("mcu_temp", required_args, argc);
    81d0:	687a      	ldr	r2, [r7, #4]
    81d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    81d4:	4ba8      	ldr	r3, [pc, #672]	; (8478 <input_handle+0x710>)
    81d6:	0018      	movs	r0, r3
    81d8:	4ba2      	ldr	r3, [pc, #648]	; (8464 <input_handle+0x6fc>)
    81da:	4798      	blx	r3
			return;
    81dc:	e1b3      	b.n	8546 <input_handle+0x7de>
		}
		mcu_temp();
    81de:	4ba7      	ldr	r3, [pc, #668]	; (847c <input_handle+0x714>)
    81e0:	4798      	blx	r3
    81e2:	e1b0      	b.n	8546 <input_handle+0x7de>
	} else if (!(strcmp("i2c_scan", argv[0]))) {
    81e4:	683b      	ldr	r3, [r7, #0]
    81e6:	681a      	ldr	r2, [r3, #0]
    81e8:	4ba5      	ldr	r3, [pc, #660]	; (8480 <input_handle+0x718>)
    81ea:	0011      	movs	r1, r2
    81ec:	0018      	movs	r0, r3
    81ee:	4b9c      	ldr	r3, [pc, #624]	; (8460 <input_handle+0x6f8>)
    81f0:	4798      	blx	r3
    81f2:	1e03      	subs	r3, r0, #0
    81f4:	d113      	bne.n	821e <input_handle+0x4b6>
		int required_args = 1;
    81f6:	2301      	movs	r3, #1
    81f8:	63bb      	str	r3, [r7, #56]	; 0x38
		if (argc != required_args) {
    81fa:	687a      	ldr	r2, [r7, #4]
    81fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    81fe:	429a      	cmp	r2, r3
    8200:	d006      	beq.n	8210 <input_handle+0x4a8>
			print_args_error("i2c_scan", required_args, argc);
    8202:	687a      	ldr	r2, [r7, #4]
    8204:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    8206:	4b9e      	ldr	r3, [pc, #632]	; (8480 <input_handle+0x718>)
    8208:	0018      	movs	r0, r3
    820a:	4b96      	ldr	r3, [pc, #600]	; (8464 <input_handle+0x6fc>)
    820c:	4798      	blx	r3
			return;
    820e:	e19a      	b.n	8546 <input_handle+0x7de>
		}
		printf("running i2c_scan\r\n");
    8210:	4b9c      	ldr	r3, [pc, #624]	; (8484 <input_handle+0x71c>)
    8212:	0018      	movs	r0, r3
    8214:	4b9c      	ldr	r3, [pc, #624]	; (8488 <input_handle+0x720>)
    8216:	4798      	blx	r3
		i2c_scan();
    8218:	4b9c      	ldr	r3, [pc, #624]	; (848c <input_handle+0x724>)
    821a:	4798      	blx	r3
    821c:	e193      	b.n	8546 <input_handle+0x7de>
	} else if (!(strcmp("relay1_on", argv[0]))) {
    821e:	683b      	ldr	r3, [r7, #0]
    8220:	681a      	ldr	r2, [r3, #0]
    8222:	4b9b      	ldr	r3, [pc, #620]	; (8490 <input_handle+0x728>)
    8224:	0011      	movs	r1, r2
    8226:	0018      	movs	r0, r3
    8228:	4b8d      	ldr	r3, [pc, #564]	; (8460 <input_handle+0x6f8>)
    822a:	4798      	blx	r3
    822c:	1e03      	subs	r3, r0, #0
    822e:	d113      	bne.n	8258 <input_handle+0x4f0>
		int required_args = 1;
    8230:	2301      	movs	r3, #1
    8232:	637b      	str	r3, [r7, #52]	; 0x34
		if (argc != required_args) {
    8234:	687a      	ldr	r2, [r7, #4]
    8236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8238:	429a      	cmp	r2, r3
    823a:	d006      	beq.n	824a <input_handle+0x4e2>
			print_args_error("relay1_on", required_args, argc);
    823c:	687a      	ldr	r2, [r7, #4]
    823e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    8240:	4b93      	ldr	r3, [pc, #588]	; (8490 <input_handle+0x728>)
    8242:	0018      	movs	r0, r3
    8244:	4b87      	ldr	r3, [pc, #540]	; (8464 <input_handle+0x6fc>)
    8246:	4798      	blx	r3
			return;
    8248:	e17d      	b.n	8546 <input_handle+0x7de>
		}
	printf("Relay 1 turning on.\r\n");
    824a:	4b92      	ldr	r3, [pc, #584]	; (8494 <input_handle+0x72c>)
    824c:	0018      	movs	r0, r3
    824e:	4b8e      	ldr	r3, [pc, #568]	; (8488 <input_handle+0x720>)
    8250:	4798      	blx	r3
	relay1_enable();
    8252:	4b91      	ldr	r3, [pc, #580]	; (8498 <input_handle+0x730>)
    8254:	4798      	blx	r3
    8256:	e176      	b.n	8546 <input_handle+0x7de>
	}  else if (!(strcmp("relay1_off", argv[0]))) {
    8258:	683b      	ldr	r3, [r7, #0]
    825a:	681a      	ldr	r2, [r3, #0]
    825c:	4b8f      	ldr	r3, [pc, #572]	; (849c <input_handle+0x734>)
    825e:	0011      	movs	r1, r2
    8260:	0018      	movs	r0, r3
    8262:	4b7f      	ldr	r3, [pc, #508]	; (8460 <input_handle+0x6f8>)
    8264:	4798      	blx	r3
    8266:	1e03      	subs	r3, r0, #0
    8268:	d113      	bne.n	8292 <input_handle+0x52a>
		int required_args = 1;
    826a:	2301      	movs	r3, #1
    826c:	633b      	str	r3, [r7, #48]	; 0x30
		if (argc != required_args) {
    826e:	687a      	ldr	r2, [r7, #4]
    8270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8272:	429a      	cmp	r2, r3
    8274:	d006      	beq.n	8284 <input_handle+0x51c>
			print_args_error("relay1_off", required_args, argc);
    8276:	687a      	ldr	r2, [r7, #4]
    8278:	6b39      	ldr	r1, [r7, #48]	; 0x30
    827a:	4b88      	ldr	r3, [pc, #544]	; (849c <input_handle+0x734>)
    827c:	0018      	movs	r0, r3
    827e:	4b79      	ldr	r3, [pc, #484]	; (8464 <input_handle+0x6fc>)
    8280:	4798      	blx	r3
			return;
    8282:	e160      	b.n	8546 <input_handle+0x7de>
		}
	printf("Relay 1 turning off.\r\n");
    8284:	4b86      	ldr	r3, [pc, #536]	; (84a0 <input_handle+0x738>)
    8286:	0018      	movs	r0, r3
    8288:	4b7f      	ldr	r3, [pc, #508]	; (8488 <input_handle+0x720>)
    828a:	4798      	blx	r3
	relay1_disable();
    828c:	4b85      	ldr	r3, [pc, #532]	; (84a4 <input_handle+0x73c>)
    828e:	4798      	blx	r3
    8290:	e159      	b.n	8546 <input_handle+0x7de>
	}  else if (!(strcmp("relay2_on", argv[0]))) {
    8292:	683b      	ldr	r3, [r7, #0]
    8294:	681a      	ldr	r2, [r3, #0]
    8296:	4b84      	ldr	r3, [pc, #528]	; (84a8 <input_handle+0x740>)
    8298:	0011      	movs	r1, r2
    829a:	0018      	movs	r0, r3
    829c:	4b70      	ldr	r3, [pc, #448]	; (8460 <input_handle+0x6f8>)
    829e:	4798      	blx	r3
    82a0:	1e03      	subs	r3, r0, #0
    82a2:	d113      	bne.n	82cc <input_handle+0x564>
	int required_args = 1;
    82a4:	2301      	movs	r3, #1
    82a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (argc != required_args) {
    82a8:	687a      	ldr	r2, [r7, #4]
    82aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82ac:	429a      	cmp	r2, r3
    82ae:	d006      	beq.n	82be <input_handle+0x556>
		print_args_error("relay2_on", required_args, argc);
    82b0:	687a      	ldr	r2, [r7, #4]
    82b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    82b4:	4b7c      	ldr	r3, [pc, #496]	; (84a8 <input_handle+0x740>)
    82b6:	0018      	movs	r0, r3
    82b8:	4b6a      	ldr	r3, [pc, #424]	; (8464 <input_handle+0x6fc>)
    82ba:	4798      	blx	r3
		return;
    82bc:	e143      	b.n	8546 <input_handle+0x7de>
	}
	printf("Relay 2 turning on.\r\n");
    82be:	4b7b      	ldr	r3, [pc, #492]	; (84ac <input_handle+0x744>)
    82c0:	0018      	movs	r0, r3
    82c2:	4b71      	ldr	r3, [pc, #452]	; (8488 <input_handle+0x720>)
    82c4:	4798      	blx	r3
	relay2_enable();
    82c6:	4b7a      	ldr	r3, [pc, #488]	; (84b0 <input_handle+0x748>)
    82c8:	4798      	blx	r3
    82ca:	e13c      	b.n	8546 <input_handle+0x7de>
	}  else if (!(strcmp("relay2_off", argv[0]))) {
    82cc:	683b      	ldr	r3, [r7, #0]
    82ce:	681a      	ldr	r2, [r3, #0]
    82d0:	4b78      	ldr	r3, [pc, #480]	; (84b4 <input_handle+0x74c>)
    82d2:	0011      	movs	r1, r2
    82d4:	0018      	movs	r0, r3
    82d6:	4b62      	ldr	r3, [pc, #392]	; (8460 <input_handle+0x6f8>)
    82d8:	4798      	blx	r3
    82da:	1e03      	subs	r3, r0, #0
    82dc:	d113      	bne.n	8306 <input_handle+0x59e>
	int required_args = 1;
    82de:	2301      	movs	r3, #1
    82e0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (argc != required_args) {
    82e2:	687a      	ldr	r2, [r7, #4]
    82e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    82e6:	429a      	cmp	r2, r3
    82e8:	d006      	beq.n	82f8 <input_handle+0x590>
		print_args_error("relay2_off", required_args, argc);
    82ea:	687a      	ldr	r2, [r7, #4]
    82ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    82ee:	4b71      	ldr	r3, [pc, #452]	; (84b4 <input_handle+0x74c>)
    82f0:	0018      	movs	r0, r3
    82f2:	4b5c      	ldr	r3, [pc, #368]	; (8464 <input_handle+0x6fc>)
    82f4:	4798      	blx	r3
		return;
    82f6:	e126      	b.n	8546 <input_handle+0x7de>
	}
	printf("Relay 2 turning off.\r\n");
    82f8:	4b6f      	ldr	r3, [pc, #444]	; (84b8 <input_handle+0x750>)
    82fa:	0018      	movs	r0, r3
    82fc:	4b62      	ldr	r3, [pc, #392]	; (8488 <input_handle+0x720>)
    82fe:	4798      	blx	r3
	relay2_disable();
    8300:	4b6e      	ldr	r3, [pc, #440]	; (84bc <input_handle+0x754>)
    8302:	4798      	blx	r3
    8304:	e11f      	b.n	8546 <input_handle+0x7de>
	} else if (!(strcmp("boost_on", argv[0]))) {
    8306:	683b      	ldr	r3, [r7, #0]
    8308:	681a      	ldr	r2, [r3, #0]
    830a:	4b6d      	ldr	r3, [pc, #436]	; (84c0 <input_handle+0x758>)
    830c:	0011      	movs	r1, r2
    830e:	0018      	movs	r0, r3
    8310:	4b53      	ldr	r3, [pc, #332]	; (8460 <input_handle+0x6f8>)
    8312:	4798      	blx	r3
    8314:	1e03      	subs	r3, r0, #0
    8316:	d113      	bne.n	8340 <input_handle+0x5d8>
	int required_args = 1;
    8318:	2301      	movs	r3, #1
    831a:	627b      	str	r3, [r7, #36]	; 0x24
	if (argc != required_args) {
    831c:	687a      	ldr	r2, [r7, #4]
    831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8320:	429a      	cmp	r2, r3
    8322:	d006      	beq.n	8332 <input_handle+0x5ca>
		print_args_error("boost_on", required_args, argc);
    8324:	687a      	ldr	r2, [r7, #4]
    8326:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8328:	4b65      	ldr	r3, [pc, #404]	; (84c0 <input_handle+0x758>)
    832a:	0018      	movs	r0, r3
    832c:	4b4d      	ldr	r3, [pc, #308]	; (8464 <input_handle+0x6fc>)
    832e:	4798      	blx	r3
		return;
    8330:	e109      	b.n	8546 <input_handle+0x7de>
	}
	printf("Boost converter enabled.\r\n");
    8332:	4b64      	ldr	r3, [pc, #400]	; (84c4 <input_handle+0x75c>)
    8334:	0018      	movs	r0, r3
    8336:	4b54      	ldr	r3, [pc, #336]	; (8488 <input_handle+0x720>)
    8338:	4798      	blx	r3
	boost_enable();
    833a:	4b63      	ldr	r3, [pc, #396]	; (84c8 <input_handle+0x760>)
    833c:	4798      	blx	r3
    833e:	e102      	b.n	8546 <input_handle+0x7de>
	}  else if (!(strcmp("boost_off", argv[0]))) {
    8340:	683b      	ldr	r3, [r7, #0]
    8342:	681a      	ldr	r2, [r3, #0]
    8344:	4b61      	ldr	r3, [pc, #388]	; (84cc <input_handle+0x764>)
    8346:	0011      	movs	r1, r2
    8348:	0018      	movs	r0, r3
    834a:	4b45      	ldr	r3, [pc, #276]	; (8460 <input_handle+0x6f8>)
    834c:	4798      	blx	r3
    834e:	1e03      	subs	r3, r0, #0
    8350:	d113      	bne.n	837a <input_handle+0x612>
	int required_args = 1;
    8352:	2301      	movs	r3, #1
    8354:	623b      	str	r3, [r7, #32]
	if (argc != required_args) {
    8356:	687a      	ldr	r2, [r7, #4]
    8358:	6a3b      	ldr	r3, [r7, #32]
    835a:	429a      	cmp	r2, r3
    835c:	d006      	beq.n	836c <input_handle+0x604>
		print_args_error("boost_off", required_args, argc);
    835e:	687a      	ldr	r2, [r7, #4]
    8360:	6a39      	ldr	r1, [r7, #32]
    8362:	4b5a      	ldr	r3, [pc, #360]	; (84cc <input_handle+0x764>)
    8364:	0018      	movs	r0, r3
    8366:	4b3f      	ldr	r3, [pc, #252]	; (8464 <input_handle+0x6fc>)
    8368:	4798      	blx	r3
		return;
    836a:	e0ec      	b.n	8546 <input_handle+0x7de>
	}
	printf("Boost converter disabled.\r\n");
    836c:	4b58      	ldr	r3, [pc, #352]	; (84d0 <input_handle+0x768>)
    836e:	0018      	movs	r0, r3
    8370:	4b45      	ldr	r3, [pc, #276]	; (8488 <input_handle+0x720>)
    8372:	4798      	blx	r3
	boost_disable();
    8374:	4b57      	ldr	r3, [pc, #348]	; (84d4 <input_handle+0x76c>)
    8376:	4798      	blx	r3
    8378:	e0e5      	b.n	8546 <input_handle+0x7de>
	} else if (!(strcmp("flash", argv[0]))) {
    837a:	683b      	ldr	r3, [r7, #0]
    837c:	681a      	ldr	r2, [r3, #0]
    837e:	4b56      	ldr	r3, [pc, #344]	; (84d8 <input_handle+0x770>)
    8380:	0011      	movs	r1, r2
    8382:	0018      	movs	r0, r3
    8384:	4b36      	ldr	r3, [pc, #216]	; (8460 <input_handle+0x6f8>)
    8386:	4798      	blx	r3
    8388:	1e03      	subs	r3, r0, #0
    838a:	d10f      	bne.n	83ac <input_handle+0x644>
		int required_args = 1;
    838c:	2301      	movs	r3, #1
    838e:	61fb      	str	r3, [r7, #28]
		if (argc != required_args) {
    8390:	687a      	ldr	r2, [r7, #4]
    8392:	69fb      	ldr	r3, [r7, #28]
    8394:	429a      	cmp	r2, r3
    8396:	d006      	beq.n	83a6 <input_handle+0x63e>
			print_args_error("flash", required_args, argc);
    8398:	687a      	ldr	r2, [r7, #4]
    839a:	69f9      	ldr	r1, [r7, #28]
    839c:	4b4e      	ldr	r3, [pc, #312]	; (84d8 <input_handle+0x770>)
    839e:	0018      	movs	r0, r3
    83a0:	4b30      	ldr	r3, [pc, #192]	; (8464 <input_handle+0x6fc>)
    83a2:	4798      	blx	r3
			return;
    83a4:	e0cf      	b.n	8546 <input_handle+0x7de>
		}
	flash_test();
    83a6:	4b4d      	ldr	r3, [pc, #308]	; (84dc <input_handle+0x774>)
    83a8:	4798      	blx	r3
    83aa:	e0cc      	b.n	8546 <input_handle+0x7de>
	} else if (!(strcmp("led1_on", argv[0]))) {
    83ac:	683b      	ldr	r3, [r7, #0]
    83ae:	681a      	ldr	r2, [r3, #0]
    83b0:	4b4b      	ldr	r3, [pc, #300]	; (84e0 <input_handle+0x778>)
    83b2:	0011      	movs	r1, r2
    83b4:	0018      	movs	r0, r3
    83b6:	4b2a      	ldr	r3, [pc, #168]	; (8460 <input_handle+0x6f8>)
    83b8:	4798      	blx	r3
    83ba:	1e03      	subs	r3, r0, #0
    83bc:	d113      	bne.n	83e6 <input_handle+0x67e>
		int required_args = 1;
    83be:	2301      	movs	r3, #1
    83c0:	61bb      	str	r3, [r7, #24]
		if (argc != required_args) {
    83c2:	687a      	ldr	r2, [r7, #4]
    83c4:	69bb      	ldr	r3, [r7, #24]
    83c6:	429a      	cmp	r2, r3
    83c8:	d006      	beq.n	83d8 <input_handle+0x670>
			print_args_error("led1_on", required_args, argc);
    83ca:	687a      	ldr	r2, [r7, #4]
    83cc:	69b9      	ldr	r1, [r7, #24]
    83ce:	4b44      	ldr	r3, [pc, #272]	; (84e0 <input_handle+0x778>)
    83d0:	0018      	movs	r0, r3
    83d2:	4b24      	ldr	r3, [pc, #144]	; (8464 <input_handle+0x6fc>)
    83d4:	4798      	blx	r3
			return;
    83d6:	e0b6      	b.n	8546 <input_handle+0x7de>
		}
	printf("LED1 turning on.\r\n");
    83d8:	4b42      	ldr	r3, [pc, #264]	; (84e4 <input_handle+0x77c>)
    83da:	0018      	movs	r0, r3
    83dc:	4b2a      	ldr	r3, [pc, #168]	; (8488 <input_handle+0x720>)
    83de:	4798      	blx	r3
	led1_on();
    83e0:	4b41      	ldr	r3, [pc, #260]	; (84e8 <input_handle+0x780>)
    83e2:	4798      	blx	r3
    83e4:	e0af      	b.n	8546 <input_handle+0x7de>
	} else if (!(strcmp("led1_off", argv[0]))) {
    83e6:	683b      	ldr	r3, [r7, #0]
    83e8:	681a      	ldr	r2, [r3, #0]
    83ea:	4b40      	ldr	r3, [pc, #256]	; (84ec <input_handle+0x784>)
    83ec:	0011      	movs	r1, r2
    83ee:	0018      	movs	r0, r3
    83f0:	4b1b      	ldr	r3, [pc, #108]	; (8460 <input_handle+0x6f8>)
    83f2:	4798      	blx	r3
    83f4:	1e03      	subs	r3, r0, #0
    83f6:	d113      	bne.n	8420 <input_handle+0x6b8>
		int required_args = 1;
    83f8:	2301      	movs	r3, #1
    83fa:	617b      	str	r3, [r7, #20]
		if (argc != required_args) {
    83fc:	687a      	ldr	r2, [r7, #4]
    83fe:	697b      	ldr	r3, [r7, #20]
    8400:	429a      	cmp	r2, r3
    8402:	d006      	beq.n	8412 <input_handle+0x6aa>
		print_args_error("led1_off", required_args, argc);
    8404:	687a      	ldr	r2, [r7, #4]
    8406:	6979      	ldr	r1, [r7, #20]
    8408:	4b38      	ldr	r3, [pc, #224]	; (84ec <input_handle+0x784>)
    840a:	0018      	movs	r0, r3
    840c:	4b15      	ldr	r3, [pc, #84]	; (8464 <input_handle+0x6fc>)
    840e:	4798      	blx	r3
		return;
    8410:	e099      	b.n	8546 <input_handle+0x7de>
		}
	printf("LED1 turning off.\r\n");
    8412:	4b37      	ldr	r3, [pc, #220]	; (84f0 <input_handle+0x788>)
    8414:	0018      	movs	r0, r3
    8416:	4b1c      	ldr	r3, [pc, #112]	; (8488 <input_handle+0x720>)
    8418:	4798      	blx	r3
	led1_off();
    841a:	4b36      	ldr	r3, [pc, #216]	; (84f4 <input_handle+0x78c>)
    841c:	4798      	blx	r3
    841e:	e092      	b.n	8546 <input_handle+0x7de>
	} else if (!(strcmp("led2_on", argv[0]))) {
    8420:	683b      	ldr	r3, [r7, #0]
    8422:	681a      	ldr	r2, [r3, #0]
    8424:	4b34      	ldr	r3, [pc, #208]	; (84f8 <input_handle+0x790>)
    8426:	0011      	movs	r1, r2
    8428:	0018      	movs	r0, r3
    842a:	4b0d      	ldr	r3, [pc, #52]	; (8460 <input_handle+0x6f8>)
    842c:	4798      	blx	r3
    842e:	1e03      	subs	r3, r0, #0
    8430:	d168      	bne.n	8504 <input_handle+0x79c>
		int required_args = 1;
    8432:	2301      	movs	r3, #1
    8434:	613b      	str	r3, [r7, #16]
		if (argc != required_args) {
    8436:	687a      	ldr	r2, [r7, #4]
    8438:	693b      	ldr	r3, [r7, #16]
    843a:	429a      	cmp	r2, r3
    843c:	d006      	beq.n	844c <input_handle+0x6e4>
			print_args_error("led2_on", required_args, argc);
    843e:	687a      	ldr	r2, [r7, #4]
    8440:	6939      	ldr	r1, [r7, #16]
    8442:	4b2d      	ldr	r3, [pc, #180]	; (84f8 <input_handle+0x790>)
    8444:	0018      	movs	r0, r3
    8446:	4b07      	ldr	r3, [pc, #28]	; (8464 <input_handle+0x6fc>)
    8448:	4798      	blx	r3
			return;
    844a:	e07c      	b.n	8546 <input_handle+0x7de>
		}
	printf("LED2 turning on.\r\n");
    844c:	4b2b      	ldr	r3, [pc, #172]	; (84fc <input_handle+0x794>)
    844e:	0018      	movs	r0, r3
    8450:	4b0d      	ldr	r3, [pc, #52]	; (8488 <input_handle+0x720>)
    8452:	4798      	blx	r3
	led2_on();
    8454:	4b2a      	ldr	r3, [pc, #168]	; (8500 <input_handle+0x798>)
    8456:	4798      	blx	r3
    8458:	e075      	b.n	8546 <input_handle+0x7de>
    845a:	46c0      	nop			; (mov r8, r8)
    845c:	0000ea8c 	.word	0x0000ea8c
    8460:	00009bf9 	.word	0x00009bf9
    8464:	00007d41 	.word	0x00007d41
    8468:	00008e5d 	.word	0x00008e5d
    846c:	00008eb9 	.word	0x00008eb9
    8470:	00007895 	.word	0x00007895
    8474:	00007d1d 	.word	0x00007d1d
    8478:	0000ea94 	.word	0x0000ea94
    847c:	00007abd 	.word	0x00007abd
    8480:	0000eaa0 	.word	0x0000eaa0
    8484:	0000eaac 	.word	0x0000eaac
    8488:	00009a55 	.word	0x00009a55
    848c:	00007bd5 	.word	0x00007bd5
    8490:	0000eac0 	.word	0x0000eac0
    8494:	0000eacc 	.word	0x0000eacc
    8498:	000088fd 	.word	0x000088fd
    849c:	0000eae4 	.word	0x0000eae4
    84a0:	0000eaf0 	.word	0x0000eaf0
    84a4:	0000891d 	.word	0x0000891d
    84a8:	0000eb08 	.word	0x0000eb08
    84ac:	0000eb14 	.word	0x0000eb14
    84b0:	0000893d 	.word	0x0000893d
    84b4:	0000eb2c 	.word	0x0000eb2c
    84b8:	0000eb38 	.word	0x0000eb38
    84bc:	0000895d 	.word	0x0000895d
    84c0:	0000eb50 	.word	0x0000eb50
    84c4:	0000eb5c 	.word	0x0000eb5c
    84c8:	000088bd 	.word	0x000088bd
    84cc:	0000eb78 	.word	0x0000eb78
    84d0:	0000eb84 	.word	0x0000eb84
    84d4:	000088dd 	.word	0x000088dd
    84d8:	0000eba0 	.word	0x0000eba0
    84dc:	00008a19 	.word	0x00008a19
    84e0:	0000eba8 	.word	0x0000eba8
    84e4:	0000ebb0 	.word	0x0000ebb0
    84e8:	0000883d 	.word	0x0000883d
    84ec:	0000ebc4 	.word	0x0000ebc4
    84f0:	0000ebd0 	.word	0x0000ebd0
    84f4:	0000885d 	.word	0x0000885d
    84f8:	0000ebe4 	.word	0x0000ebe4
    84fc:	0000ebec 	.word	0x0000ebec
    8500:	0000887d 	.word	0x0000887d
	} else if (!(strcmp("led2_off", argv[0]))) {
    8504:	683b      	ldr	r3, [r7, #0]
    8506:	681a      	ldr	r2, [r3, #0]
    8508:	4b10      	ldr	r3, [pc, #64]	; (854c <input_handle+0x7e4>)
    850a:	0011      	movs	r1, r2
    850c:	0018      	movs	r0, r3
    850e:	4b10      	ldr	r3, [pc, #64]	; (8550 <input_handle+0x7e8>)
    8510:	4798      	blx	r3
    8512:	1e03      	subs	r3, r0, #0
    8514:	d113      	bne.n	853e <input_handle+0x7d6>
		int required_args = 1;
    8516:	2301      	movs	r3, #1
    8518:	60fb      	str	r3, [r7, #12]
		if (argc != required_args) {
    851a:	687a      	ldr	r2, [r7, #4]
    851c:	68fb      	ldr	r3, [r7, #12]
    851e:	429a      	cmp	r2, r3
    8520:	d006      	beq.n	8530 <input_handle+0x7c8>
			print_args_error("led2_off", required_args, argc);
    8522:	687a      	ldr	r2, [r7, #4]
    8524:	68f9      	ldr	r1, [r7, #12]
    8526:	4b09      	ldr	r3, [pc, #36]	; (854c <input_handle+0x7e4>)
    8528:	0018      	movs	r0, r3
    852a:	4b0a      	ldr	r3, [pc, #40]	; (8554 <input_handle+0x7ec>)
    852c:	4798      	blx	r3
			return;
    852e:	e00a      	b.n	8546 <input_handle+0x7de>
		}
	printf("LED2 turning off.\r\n");
    8530:	4b09      	ldr	r3, [pc, #36]	; (8558 <input_handle+0x7f0>)
    8532:	0018      	movs	r0, r3
    8534:	4b09      	ldr	r3, [pc, #36]	; (855c <input_handle+0x7f4>)
    8536:	4798      	blx	r3
	led2_off();
    8538:	4b09      	ldr	r3, [pc, #36]	; (8560 <input_handle+0x7f8>)
    853a:	4798      	blx	r3
    853c:	e003      	b.n	8546 <input_handle+0x7de>
	} else {
		printf("Invalid input. See help for correct usage.\r\n");
    853e:	4b09      	ldr	r3, [pc, #36]	; (8564 <input_handle+0x7fc>)
    8540:	0018      	movs	r0, r3
    8542:	4b06      	ldr	r3, [pc, #24]	; (855c <input_handle+0x7f4>)
    8544:	4798      	blx	r3
	}
}
    8546:	46bd      	mov	sp, r7
    8548:	b024      	add	sp, #144	; 0x90
    854a:	bd80      	pop	{r7, pc}
    854c:	0000ec00 	.word	0x0000ec00
    8550:	00009bf9 	.word	0x00009bf9
    8554:	00007d41 	.word	0x00007d41
    8558:	0000ec0c 	.word	0x0000ec0c
    855c:	00009a55 	.word	0x00009a55
    8560:	0000889d 	.word	0x0000889d
    8564:	0000ec20 	.word	0x0000ec20

00008568 <configure_i2c_temp>:
 *      @li Pin SDA: PA08 //TODO: CONFIRM
 *      @li Pin SCL: PA09 //TODO: CONFIRM
 *      @li Clock Generator: @ref GCLK_GENERATOR_0
 */
void configure_i2c_temp(void)
{
    8568:	b580      	push	{r7, lr}
    856a:	b08e      	sub	sp, #56	; 0x38
    856c:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
    856e:	1d3b      	adds	r3, r7, #4
    8570:	0018      	movs	r0, r3
    8572:	4b10      	ldr	r3, [pc, #64]	; (85b4 <configure_i2c_temp+0x4c>)
    8574:	4798      	blx	r3
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 65535;
    8576:	1d3b      	adds	r3, r7, #4
    8578:	2201      	movs	r2, #1
    857a:	4252      	negs	r2, r2
    857c:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
    857e:	1d3b      	adds	r3, r7, #4
    8580:	4a0d      	ldr	r2, [pc, #52]	; (85b8 <configure_i2c_temp+0x50>)
    8582:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
    8584:	1d3b      	adds	r3, r7, #4
    8586:	4a0d      	ldr	r2, [pc, #52]	; (85bc <configure_i2c_temp+0x54>)
    8588:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
    858a:	1d3b      	adds	r3, r7, #4
    858c:	2200      	movs	r2, #0
    858e:	731a      	strb	r2, [r3, #12]
	/* Initialize and enable device with config */
	while (i2c_master_init(&i2c_hdc_instance, CONF_I2C_MASTER_MODULE_TEMP, &config_i2c_master) != STATUS_OK);
    8590:	46c0      	nop			; (mov r8, r8)
    8592:	1d3a      	adds	r2, r7, #4
    8594:	490a      	ldr	r1, [pc, #40]	; (85c0 <configure_i2c_temp+0x58>)
    8596:	4b0b      	ldr	r3, [pc, #44]	; (85c4 <configure_i2c_temp+0x5c>)
    8598:	0018      	movs	r0, r3
    859a:	4b0b      	ldr	r3, [pc, #44]	; (85c8 <configure_i2c_temp+0x60>)
    859c:	4798      	blx	r3
    859e:	1e03      	subs	r3, r0, #0
    85a0:	d1f7      	bne.n	8592 <configure_i2c_temp+0x2a>
	i2c_master_enable(&i2c_hdc_instance);
    85a2:	4b08      	ldr	r3, [pc, #32]	; (85c4 <configure_i2c_temp+0x5c>)
    85a4:	0018      	movs	r0, r3
    85a6:	4b09      	ldr	r3, [pc, #36]	; (85cc <configure_i2c_temp+0x64>)
    85a8:	4798      	blx	r3
}
    85aa:	46c0      	nop			; (mov r8, r8)
    85ac:	46bd      	mov	sp, r7
    85ae:	b00e      	add	sp, #56	; 0x38
    85b0:	bd80      	pop	{r7, pc}
    85b2:	46c0      	nop			; (mov r8, r8)
    85b4:	00006f39 	.word	0x00006f39
    85b8:	00160002 	.word	0x00160002
    85bc:	00170002 	.word	0x00170002
    85c0:	42001400 	.word	0x42001400
    85c4:	20000340 	.word	0x20000340
    85c8:	000035b5 	.word	0x000035b5
    85cc:	00006fbd 	.word	0x00006fbd

000085d0 <configure_i2c_lux>:

void configure_i2c_lux(void)
{
    85d0:	b580      	push	{r7, lr}
    85d2:	b08e      	sub	sp, #56	; 0x38
    85d4:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
    85d6:	1d3b      	adds	r3, r7, #4
    85d8:	0018      	movs	r0, r3
    85da:	4b10      	ldr	r3, [pc, #64]	; (861c <configure_i2c_lux+0x4c>)
    85dc:	4798      	blx	r3
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 65535;
    85de:	1d3b      	adds	r3, r7, #4
    85e0:	2201      	movs	r2, #1
    85e2:	4252      	negs	r2, r2
    85e4:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    85e6:	1d3b      	adds	r3, r7, #4
    85e8:	4a0d      	ldr	r2, [pc, #52]	; (8620 <configure_i2c_lux+0x50>)
    85ea:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    85ec:	1d3b      	adds	r3, r7, #4
    85ee:	4a0d      	ldr	r2, [pc, #52]	; (8624 <configure_i2c_lux+0x54>)
    85f0:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
    85f2:	1d3b      	adds	r3, r7, #4
    85f4:	2200      	movs	r2, #0
    85f6:	731a      	strb	r2, [r3, #12]
	/* Initialize and enable device with config */
	while (i2c_master_init(&i2c_tsl_instance, CONF_I2C_MASTER_MODULE_LUX, &config_i2c_master) != STATUS_OK);
    85f8:	46c0      	nop			; (mov r8, r8)
    85fa:	1d3a      	adds	r2, r7, #4
    85fc:	490a      	ldr	r1, [pc, #40]	; (8628 <configure_i2c_lux+0x58>)
    85fe:	4b0b      	ldr	r3, [pc, #44]	; (862c <configure_i2c_lux+0x5c>)
    8600:	0018      	movs	r0, r3
    8602:	4b0b      	ldr	r3, [pc, #44]	; (8630 <configure_i2c_lux+0x60>)
    8604:	4798      	blx	r3
    8606:	1e03      	subs	r3, r0, #0
    8608:	d1f7      	bne.n	85fa <configure_i2c_lux+0x2a>
	i2c_master_enable(&i2c_tsl_instance);
    860a:	4b08      	ldr	r3, [pc, #32]	; (862c <configure_i2c_lux+0x5c>)
    860c:	0018      	movs	r0, r3
    860e:	4b09      	ldr	r3, [pc, #36]	; (8634 <configure_i2c_lux+0x64>)
    8610:	4798      	blx	r3
}
    8612:	46c0      	nop			; (mov r8, r8)
    8614:	46bd      	mov	sp, r7
    8616:	b00e      	add	sp, #56	; 0x38
    8618:	bd80      	pop	{r7, pc}
    861a:	46c0      	nop			; (mov r8, r8)
    861c:	00006f39 	.word	0x00006f39
    8620:	00080003 	.word	0x00080003
    8624:	00090003 	.word	0x00090003
    8628:	42001000 	.word	0x42001000
    862c:	2000030c 	.word	0x2000030c
    8630:	000035b5 	.word	0x000035b5
    8634:	00006fbd 	.word	0x00006fbd

00008638 <i2c_write_complete_callback_hdc>:
/**
 * Callback after a successful I2C write.
 * @param module i2c module to bind to
 */
void i2c_write_complete_callback_hdc(struct i2c_master_module *const module)
{
    8638:	b580      	push	{r7, lr}
    863a:	b082      	sub	sp, #8
    863c:	af00      	add	r7, sp, #0
    863e:	6078      	str	r0, [r7, #4]
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_hdc_instance, &rd_packet);
    8640:	4a04      	ldr	r2, [pc, #16]	; (8654 <i2c_write_complete_callback_hdc+0x1c>)
    8642:	4b05      	ldr	r3, [pc, #20]	; (8658 <i2c_write_complete_callback_hdc+0x20>)
    8644:	0011      	movs	r1, r2
    8646:	0018      	movs	r0, r3
    8648:	4b04      	ldr	r3, [pc, #16]	; (865c <i2c_write_complete_callback_hdc+0x24>)
    864a:	4798      	blx	r3
}
    864c:	46c0      	nop			; (mov r8, r8)
    864e:	46bd      	mov	sp, r7
    8650:	b002      	add	sp, #8
    8652:	bd80      	pop	{r7, pc}
    8654:	2000006c 	.word	0x2000006c
    8658:	20000340 	.word	0x20000340
    865c:	000040e5 	.word	0x000040e5

00008660 <i2c_write_complete_callback_tsl>:
/**
 * Callback after a successful I2C write.
 * @param module i2c module to bind to
 */
void i2c_write_complete_callback_tsl(struct i2c_master_module *const module)
{
    8660:	b580      	push	{r7, lr}
    8662:	b082      	sub	sp, #8
    8664:	af00      	add	r7, sp, #0
    8666:	6078      	str	r0, [r7, #4]
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_tsl_instance, &rd_packet);
    8668:	4a04      	ldr	r2, [pc, #16]	; (867c <i2c_write_complete_callback_tsl+0x1c>)
    866a:	4b05      	ldr	r3, [pc, #20]	; (8680 <i2c_write_complete_callback_tsl+0x20>)
    866c:	0011      	movs	r1, r2
    866e:	0018      	movs	r0, r3
    8670:	4b04      	ldr	r3, [pc, #16]	; (8684 <i2c_write_complete_callback_tsl+0x24>)
    8672:	4798      	blx	r3
}
    8674:	46c0      	nop			; (mov r8, r8)
    8676:	46bd      	mov	sp, r7
    8678:	b002      	add	sp, #8
    867a:	bd80      	pop	{r7, pc}
    867c:	2000006c 	.word	0x2000006c
    8680:	2000030c 	.word	0x2000030c
    8684:	000040e5 	.word	0x000040e5

00008688 <configure_i2c_callbacks_hdc>:

/**
 * Configures callbacks for I2C
 */
void configure_i2c_callbacks_hdc(void)
{
    8688:	b580      	push	{r7, lr}
    868a:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2c_hdc_instance, i2c_write_complete_callback_hdc,
    868c:	4906      	ldr	r1, [pc, #24]	; (86a8 <configure_i2c_callbacks_hdc+0x20>)
    868e:	4b07      	ldr	r3, [pc, #28]	; (86ac <configure_i2c_callbacks_hdc+0x24>)
    8690:	2200      	movs	r2, #0
    8692:	0018      	movs	r0, r3
    8694:	4b06      	ldr	r3, [pc, #24]	; (86b0 <configure_i2c_callbacks_hdc+0x28>)
    8696:	4798      	blx	r3
				     I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	i2c_master_enable_callback(&i2c_hdc_instance,
    8698:	4b04      	ldr	r3, [pc, #16]	; (86ac <configure_i2c_callbacks_hdc+0x24>)
    869a:	2100      	movs	r1, #0
    869c:	0018      	movs	r0, r3
    869e:	4b05      	ldr	r3, [pc, #20]	; (86b4 <configure_i2c_callbacks_hdc+0x2c>)
    86a0:	4798      	blx	r3
				   I2C_MASTER_CALLBACK_WRITE_COMPLETE);
}
    86a2:	46c0      	nop			; (mov r8, r8)
    86a4:	46bd      	mov	sp, r7
    86a6:	bd80      	pop	{r7, pc}
    86a8:	00008639 	.word	0x00008639
    86ac:	20000340 	.word	0x20000340
    86b0:	00003f45 	.word	0x00003f45
    86b4:	000072b5 	.word	0x000072b5

000086b8 <configure_i2c_callbacks_tsl>:

/**
 * Configures callbacks for I2C
 */
void configure_i2c_callbacks_tsl(void)
{
    86b8:	b580      	push	{r7, lr}
    86ba:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2c_tsl_instance, i2c_write_complete_callback_tsl,
    86bc:	4906      	ldr	r1, [pc, #24]	; (86d8 <configure_i2c_callbacks_tsl+0x20>)
    86be:	4b07      	ldr	r3, [pc, #28]	; (86dc <configure_i2c_callbacks_tsl+0x24>)
    86c0:	2200      	movs	r2, #0
    86c2:	0018      	movs	r0, r3
    86c4:	4b06      	ldr	r3, [pc, #24]	; (86e0 <configure_i2c_callbacks_tsl+0x28>)
    86c6:	4798      	blx	r3
				     I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	i2c_master_enable_callback(&i2c_tsl_instance,
    86c8:	4b04      	ldr	r3, [pc, #16]	; (86dc <configure_i2c_callbacks_tsl+0x24>)
    86ca:	2100      	movs	r1, #0
    86cc:	0018      	movs	r0, r3
    86ce:	4b05      	ldr	r3, [pc, #20]	; (86e4 <configure_i2c_callbacks_tsl+0x2c>)
    86d0:	4798      	blx	r3
				   I2C_MASTER_CALLBACK_WRITE_COMPLETE);
}
    86d2:	46c0      	nop			; (mov r8, r8)
    86d4:	46bd      	mov	sp, r7
    86d6:	bd80      	pop	{r7, pc}
    86d8:	00008661 	.word	0x00008661
    86dc:	2000030c 	.word	0x2000030c
    86e0:	00003f45 	.word	0x00003f45
    86e4:	000072b5 	.word	0x000072b5

000086e8 <configure_usart>:
 *      @li RX Pin: PA20
 *      @li TX Pin: PA21
 *      @li SERCOM: SERCOM3
 */
void configure_usart(void)
{
    86e8:	b580      	push	{r7, lr}
    86ea:	b090      	sub	sp, #64	; 0x40
    86ec:	af00      	add	r7, sp, #0
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
    86ee:	003b      	movs	r3, r7
    86f0:	0018      	movs	r0, r3
    86f2:	4b13      	ldr	r3, [pc, #76]	; (8740 <configure_usart+0x58>)
    86f4:	4798      	blx	r3
	config_usart.baudrate = 9600;
    86f6:	003b      	movs	r3, r7
    86f8:	2296      	movs	r2, #150	; 0x96
    86fa:	0192      	lsls	r2, r2, #6
    86fc:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    86fe:	003b      	movs	r3, r7
    8700:	22c4      	movs	r2, #196	; 0xc4
    8702:	0392      	lsls	r2, r2, #14
    8704:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    8706:	003b      	movs	r3, r7
    8708:	2201      	movs	r2, #1
    870a:	4252      	negs	r2, r2
    870c:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    870e:	003b      	movs	r3, r7
    8710:	2201      	movs	r2, #1
    8712:	4252      	negs	r2, r2
    8714:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    8716:	003b      	movs	r3, r7
    8718:	4a0a      	ldr	r2, [pc, #40]	; (8744 <configure_usart+0x5c>)
    871a:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    871c:	003b      	movs	r3, r7
    871e:	4a0a      	ldr	r2, [pc, #40]	; (8748 <configure_usart+0x60>)
    8720:	63da      	str	r2, [r3, #60]	; 0x3c
	//config_usart.pinmux_pad0 = PINMUX_UNUSED;
	//config_usart.pinmux_pad1 = PINMUX_UNUSED;
	//config_usart.pinmux_pad2 = PINMUX_PA20D_SERCOM3_PAD2;
	//config_usart.pinmux_pad3 = PINMUX_PA21D_SERCOM3_PAD3;

	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
    8722:	003a      	movs	r2, r7
    8724:	4909      	ldr	r1, [pc, #36]	; (874c <configure_usart+0x64>)
    8726:	4b0a      	ldr	r3, [pc, #40]	; (8750 <configure_usart+0x68>)
    8728:	0018      	movs	r0, r3
    872a:	4b0a      	ldr	r3, [pc, #40]	; (8754 <configure_usart+0x6c>)
    872c:	4798      	blx	r3

	usart_enable(&usart_instance);
    872e:	4b08      	ldr	r3, [pc, #32]	; (8750 <configure_usart+0x68>)
    8730:	0018      	movs	r0, r3
    8732:	4b09      	ldr	r3, [pc, #36]	; (8758 <configure_usart+0x70>)
    8734:	4798      	blx	r3
}
    8736:	46c0      	nop			; (mov r8, r8)
    8738:	46bd      	mov	sp, r7
    873a:	b010      	add	sp, #64	; 0x40
    873c:	bd80      	pop	{r7, pc}
    873e:	46c0      	nop			; (mov r8, r8)
    8740:	0000732d 	.word	0x0000732d
    8744:	002a0003 	.word	0x002a0003
    8748:	002b0003 	.word	0x002b0003
    874c:	42001800 	.word	0x42001800
    8750:	200002d8 	.word	0x200002d8
    8754:	000074d9 	.word	0x000074d9
    8758:	000073ed 	.word	0x000073ed

0000875c <configure_adc>:
 *      @li Reference voltage: 1/2* VCC (1.65V)
 *      @li clock prescale: 16x
 * @param pin pin to read value from
 */
void configure_adc(int pin)
{
    875c:	b580      	push	{r7, lr}
    875e:	b08e      	sub	sp, #56	; 0x38
    8760:	af00      	add	r7, sp, #0
    8762:	6078      	str	r0, [r7, #4]
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    8764:	2308      	movs	r3, #8
    8766:	18fb      	adds	r3, r7, r3
    8768:	0018      	movs	r0, r3
    876a:	4b0f      	ldr	r3, [pc, #60]	; (87a8 <configure_adc+0x4c>)
    876c:	4798      	blx	r3
	config_adc.positive_input = pin;
    876e:	687b      	ldr	r3, [r7, #4]
    8770:	b2da      	uxtb	r2, r3
    8772:	2308      	movs	r3, #8
    8774:	18fb      	adds	r3, r7, r3
    8776:	731a      	strb	r2, [r3, #12]
	config_adc.reference = ADC_REFERENCE_INTVCC1;
    8778:	2308      	movs	r3, #8
    877a:	18fb      	adds	r3, r7, r3
    877c:	2202      	movs	r2, #2
    877e:	705a      	strb	r2, [r3, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    8780:	2308      	movs	r3, #8
    8782:	18fb      	adds	r3, r7, r3
    8784:	2280      	movs	r2, #128	; 0x80
    8786:	0092      	lsls	r2, r2, #2
    8788:	805a      	strh	r2, [r3, #2]
	adc_init(&adc_instance, ADC, &config_adc);
    878a:	2308      	movs	r3, #8
    878c:	18fa      	adds	r2, r7, r3
    878e:	4907      	ldr	r1, [pc, #28]	; (87ac <configure_adc+0x50>)
    8790:	4b07      	ldr	r3, [pc, #28]	; (87b0 <configure_adc+0x54>)
    8792:	0018      	movs	r0, r3
    8794:	4b07      	ldr	r3, [pc, #28]	; (87b4 <configure_adc+0x58>)
    8796:	4798      	blx	r3
	adc_enable(&adc_instance);
    8798:	4b05      	ldr	r3, [pc, #20]	; (87b0 <configure_adc+0x54>)
    879a:	0018      	movs	r0, r3
    879c:	4b06      	ldr	r3, [pc, #24]	; (87b8 <configure_adc+0x5c>)
    879e:	4798      	blx	r3
}
    87a0:	46c0      	nop			; (mov r8, r8)
    87a2:	46bd      	mov	sp, r7
    87a4:	b00e      	add	sp, #56	; 0x38
    87a6:	bd80      	pop	{r7, pc}
    87a8:	000029d5 	.word	0x000029d5
    87ac:	42004000 	.word	0x42004000
    87b0:	200003a8 	.word	0x200003a8
    87b4:	00003025 	.word	0x00003025
    87b8:	00006dad 	.word	0x00006dad

000087bc <configure_port_pins_set>:
/**
 * Sets a given port to output.
 * @param pin pin of the port to set
 */
void configure_port_pins_set(int pin)
{
    87bc:	b580      	push	{r7, lr}
    87be:	b084      	sub	sp, #16
    87c0:	af00      	add	r7, sp, #0
    87c2:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
    87c4:	230c      	movs	r3, #12
    87c6:	18fb      	adds	r3, r7, r3
    87c8:	0018      	movs	r0, r3
    87ca:	4b09      	ldr	r3, [pc, #36]	; (87f0 <configure_port_pins_set+0x34>)
    87cc:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    87ce:	230c      	movs	r3, #12
    87d0:	18fb      	adds	r3, r7, r3
    87d2:	2201      	movs	r2, #1
    87d4:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(pin, &config_port_pin);
    87d6:	687b      	ldr	r3, [r7, #4]
    87d8:	b2db      	uxtb	r3, r3
    87da:	220c      	movs	r2, #12
    87dc:	18ba      	adds	r2, r7, r2
    87de:	0011      	movs	r1, r2
    87e0:	0018      	movs	r0, r3
    87e2:	4b04      	ldr	r3, [pc, #16]	; (87f4 <configure_port_pins_set+0x38>)
    87e4:	4798      	blx	r3
}
    87e6:	46c0      	nop			; (mov r8, r8)
    87e8:	46bd      	mov	sp, r7
    87ea:	b004      	add	sp, #16
    87ec:	bd80      	pop	{r7, pc}
    87ee:	46c0      	nop			; (mov r8, r8)
    87f0:	00007081 	.word	0x00007081
    87f4:	00005ad9 	.word	0x00005ad9

000087f8 <configure_port_pins_get>:
/**
 * Sets a given port to input
 * @param pin pin to set as input
 */
void configure_port_pins_get(int pin)
{
    87f8:	b580      	push	{r7, lr}
    87fa:	b084      	sub	sp, #16
    87fc:	af00      	add	r7, sp, #0
    87fe:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
    8800:	230c      	movs	r3, #12
    8802:	18fb      	adds	r3, r7, r3
    8804:	0018      	movs	r0, r3
    8806:	4b0b      	ldr	r3, [pc, #44]	; (8834 <configure_port_pins_get+0x3c>)
    8808:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    880a:	230c      	movs	r3, #12
    880c:	18fb      	adds	r3, r7, r3
    880e:	2200      	movs	r2, #0
    8810:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    8812:	230c      	movs	r3, #12
    8814:	18fb      	adds	r3, r7, r3
    8816:	2201      	movs	r2, #1
    8818:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(pin, &config_port_pin);
    881a:	687b      	ldr	r3, [r7, #4]
    881c:	b2db      	uxtb	r3, r3
    881e:	220c      	movs	r2, #12
    8820:	18ba      	adds	r2, r7, r2
    8822:	0011      	movs	r1, r2
    8824:	0018      	movs	r0, r3
    8826:	4b04      	ldr	r3, [pc, #16]	; (8838 <configure_port_pins_get+0x40>)
    8828:	4798      	blx	r3
}
    882a:	46c0      	nop			; (mov r8, r8)
    882c:	46bd      	mov	sp, r7
    882e:	b004      	add	sp, #16
    8830:	bd80      	pop	{r7, pc}
    8832:	46c0      	nop			; (mov r8, r8)
    8834:	00007081 	.word	0x00007081
    8838:	00005ad9 	.word	0x00005ad9

0000883c <led1_on>:

/**
 * Functions to toggle LEDs
 */
void led1_on(void)
{
    883c:	b580      	push	{r7, lr}
    883e:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA21);
    8840:	2015      	movs	r0, #21
    8842:	4b04      	ldr	r3, [pc, #16]	; (8854 <led1_on+0x18>)
    8844:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA21, true);	
    8846:	2101      	movs	r1, #1
    8848:	2015      	movs	r0, #21
    884a:	4b03      	ldr	r3, [pc, #12]	; (8858 <led1_on+0x1c>)
    884c:	4798      	blx	r3
}
    884e:	46c0      	nop			; (mov r8, r8)
    8850:	46bd      	mov	sp, r7
    8852:	bd80      	pop	{r7, pc}
    8854:	000087bd 	.word	0x000087bd
    8858:	000070e9 	.word	0x000070e9

0000885c <led1_off>:

void led1_off(void)
{
    885c:	b580      	push	{r7, lr}
    885e:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA21);
    8860:	2015      	movs	r0, #21
    8862:	4b04      	ldr	r3, [pc, #16]	; (8874 <led1_off+0x18>)
    8864:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA21, false);
    8866:	2100      	movs	r1, #0
    8868:	2015      	movs	r0, #21
    886a:	4b03      	ldr	r3, [pc, #12]	; (8878 <led1_off+0x1c>)
    886c:	4798      	blx	r3
}
    886e:	46c0      	nop			; (mov r8, r8)
    8870:	46bd      	mov	sp, r7
    8872:	bd80      	pop	{r7, pc}
    8874:	000087bd 	.word	0x000087bd
    8878:	000070e9 	.word	0x000070e9

0000887c <led2_on>:

void led2_on(void)
{
    887c:	b580      	push	{r7, lr}
    887e:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA03);
    8880:	2003      	movs	r0, #3
    8882:	4b04      	ldr	r3, [pc, #16]	; (8894 <led2_on+0x18>)
    8884:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA03, true);
    8886:	2101      	movs	r1, #1
    8888:	2003      	movs	r0, #3
    888a:	4b03      	ldr	r3, [pc, #12]	; (8898 <led2_on+0x1c>)
    888c:	4798      	blx	r3
}
    888e:	46c0      	nop			; (mov r8, r8)
    8890:	46bd      	mov	sp, r7
    8892:	bd80      	pop	{r7, pc}
    8894:	000087bd 	.word	0x000087bd
    8898:	000070e9 	.word	0x000070e9

0000889c <led2_off>:

void led2_off(void)
{
    889c:	b580      	push	{r7, lr}
    889e:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA03);
    88a0:	2003      	movs	r0, #3
    88a2:	4b04      	ldr	r3, [pc, #16]	; (88b4 <led2_off+0x18>)
    88a4:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA03, false);
    88a6:	2100      	movs	r1, #0
    88a8:	2003      	movs	r0, #3
    88aa:	4b03      	ldr	r3, [pc, #12]	; (88b8 <led2_off+0x1c>)
    88ac:	4798      	blx	r3
}
    88ae:	46c0      	nop			; (mov r8, r8)
    88b0:	46bd      	mov	sp, r7
    88b2:	bd80      	pop	{r7, pc}
    88b4:	000087bd 	.word	0x000087bd
    88b8:	000070e9 	.word	0x000070e9

000088bc <boost_enable>:

void boost_enable(void)
{
    88bc:	b580      	push	{r7, lr}
    88be:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA20);
    88c0:	2014      	movs	r0, #20
    88c2:	4b04      	ldr	r3, [pc, #16]	; (88d4 <boost_enable+0x18>)
    88c4:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA20, true);
    88c6:	2101      	movs	r1, #1
    88c8:	2014      	movs	r0, #20
    88ca:	4b03      	ldr	r3, [pc, #12]	; (88d8 <boost_enable+0x1c>)
    88cc:	4798      	blx	r3
}
    88ce:	46c0      	nop			; (mov r8, r8)
    88d0:	46bd      	mov	sp, r7
    88d2:	bd80      	pop	{r7, pc}
    88d4:	000087bd 	.word	0x000087bd
    88d8:	000070e9 	.word	0x000070e9

000088dc <boost_disable>:

void boost_disable(void)
{
    88dc:	b580      	push	{r7, lr}
    88de:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA20);
    88e0:	2014      	movs	r0, #20
    88e2:	4b04      	ldr	r3, [pc, #16]	; (88f4 <boost_disable+0x18>)
    88e4:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA20, false);
    88e6:	2100      	movs	r1, #0
    88e8:	2014      	movs	r0, #20
    88ea:	4b03      	ldr	r3, [pc, #12]	; (88f8 <boost_disable+0x1c>)
    88ec:	4798      	blx	r3
}
    88ee:	46c0      	nop			; (mov r8, r8)
    88f0:	46bd      	mov	sp, r7
    88f2:	bd80      	pop	{r7, pc}
    88f4:	000087bd 	.word	0x000087bd
    88f8:	000070e9 	.word	0x000070e9

000088fc <relay1_enable>:

void relay1_enable(void)
{
    88fc:	b580      	push	{r7, lr}
    88fe:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB02);
    8900:	2022      	movs	r0, #34	; 0x22
    8902:	4b04      	ldr	r3, [pc, #16]	; (8914 <relay1_enable+0x18>)
    8904:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB02, true);
    8906:	2101      	movs	r1, #1
    8908:	2022      	movs	r0, #34	; 0x22
    890a:	4b03      	ldr	r3, [pc, #12]	; (8918 <relay1_enable+0x1c>)
    890c:	4798      	blx	r3
}
    890e:	46c0      	nop			; (mov r8, r8)
    8910:	46bd      	mov	sp, r7
    8912:	bd80      	pop	{r7, pc}
    8914:	000087bd 	.word	0x000087bd
    8918:	000070e9 	.word	0x000070e9

0000891c <relay1_disable>:

void relay1_disable(void)
{
    891c:	b580      	push	{r7, lr}
    891e:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB02);
    8920:	2022      	movs	r0, #34	; 0x22
    8922:	4b04      	ldr	r3, [pc, #16]	; (8934 <relay1_disable+0x18>)
    8924:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB02, false);
    8926:	2100      	movs	r1, #0
    8928:	2022      	movs	r0, #34	; 0x22
    892a:	4b03      	ldr	r3, [pc, #12]	; (8938 <relay1_disable+0x1c>)
    892c:	4798      	blx	r3
}
    892e:	46c0      	nop			; (mov r8, r8)
    8930:	46bd      	mov	sp, r7
    8932:	bd80      	pop	{r7, pc}
    8934:	000087bd 	.word	0x000087bd
    8938:	000070e9 	.word	0x000070e9

0000893c <relay2_enable>:

void relay2_enable(void)
{
    893c:	b580      	push	{r7, lr}
    893e:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB03);
    8940:	2023      	movs	r0, #35	; 0x23
    8942:	4b04      	ldr	r3, [pc, #16]	; (8954 <relay2_enable+0x18>)
    8944:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB03, true);
    8946:	2101      	movs	r1, #1
    8948:	2023      	movs	r0, #35	; 0x23
    894a:	4b03      	ldr	r3, [pc, #12]	; (8958 <relay2_enable+0x1c>)
    894c:	4798      	blx	r3
}
    894e:	46c0      	nop			; (mov r8, r8)
    8950:	46bd      	mov	sp, r7
    8952:	bd80      	pop	{r7, pc}
    8954:	000087bd 	.word	0x000087bd
    8958:	000070e9 	.word	0x000070e9

0000895c <relay2_disable>:

void relay2_disable(void)
{
    895c:	b580      	push	{r7, lr}
    895e:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB03);
    8960:	2023      	movs	r0, #35	; 0x23
    8962:	4b04      	ldr	r3, [pc, #16]	; (8974 <relay2_disable+0x18>)
    8964:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB03, false);
    8966:	2100      	movs	r1, #0
    8968:	2023      	movs	r0, #35	; 0x23
    896a:	4b03      	ldr	r3, [pc, #12]	; (8978 <relay2_disable+0x1c>)
    896c:	4798      	blx	r3
}
    896e:	46c0      	nop			; (mov r8, r8)
    8970:	46bd      	mov	sp, r7
    8972:	bd80      	pop	{r7, pc}
    8974:	000087bd 	.word	0x000087bd
    8978:	000070e9 	.word	0x000070e9

0000897c <at25dfx_init>:

/**
 * Initializes at25dfx flash
 */
static void at25dfx_init(void)
{
    897c:	b580      	push	{r7, lr}
    897e:	b090      	sub	sp, #64	; 0x40
    8980:	af00      	add	r7, sp, #0
	struct at25dfx_chip_config at_chip_config;
	struct spi_config at25dfx_spi_config;
	at25dfx_spi_get_config_defaults(&at25dfx_spi_config);
    8982:	1d3b      	adds	r3, r7, #4
    8984:	0018      	movs	r0, r3
    8986:	4b19      	ldr	r3, [pc, #100]	; (89ec <at25dfx_init+0x70>)
    8988:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    898a:	1d3b      	adds	r3, r7, #4
    898c:	4a18      	ldr	r2, [pc, #96]	; (89f0 <at25dfx_init+0x74>)
    898e:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    8990:	1d3b      	adds	r3, r7, #4
    8992:	2280      	movs	r2, #128	; 0x80
    8994:	0252      	lsls	r2, r2, #9
    8996:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    8998:	1d3b      	adds	r3, r7, #4
    899a:	4a16      	ldr	r2, [pc, #88]	; (89f4 <at25dfx_init+0x78>)
    899c:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    899e:	1d3b      	adds	r3, r7, #4
    89a0:	2201      	movs	r2, #1
    89a2:	4252      	negs	r2, r2
    89a4:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    89a6:	1d3b      	adds	r3, r7, #4
    89a8:	4a13      	ldr	r2, [pc, #76]	; (89f8 <at25dfx_init+0x7c>)
    89aa:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    89ac:	1d3b      	adds	r3, r7, #4
    89ae:	4a13      	ldr	r2, [pc, #76]	; (89fc <at25dfx_init+0x80>)
    89b0:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    89b2:	1d3a      	adds	r2, r7, #4
    89b4:	4912      	ldr	r1, [pc, #72]	; (8a00 <at25dfx_init+0x84>)
    89b6:	4b13      	ldr	r3, [pc, #76]	; (8a04 <at25dfx_init+0x88>)
    89b8:	0018      	movs	r0, r3
    89ba:	4b13      	ldr	r3, [pc, #76]	; (8a08 <at25dfx_init+0x8c>)
    89bc:	4798      	blx	r3
	spi_enable(&at25dfx_spi);
    89be:	4b11      	ldr	r3, [pc, #68]	; (8a04 <at25dfx_init+0x88>)
    89c0:	0018      	movs	r0, r3
    89c2:	4b12      	ldr	r3, [pc, #72]	; (8a0c <at25dfx_init+0x90>)
    89c4:	4798      	blx	r3
	
	at_chip_config.type = AT25DFX_MEM_TYPE;
    89c6:	233c      	movs	r3, #60	; 0x3c
    89c8:	18fb      	adds	r3, r7, r3
    89ca:	2204      	movs	r2, #4
    89cc:	701a      	strb	r2, [r3, #0]
	at_chip_config.cs_pin = AT25DFX_CS;
    89ce:	233c      	movs	r3, #60	; 0x3c
    89d0:	18fb      	adds	r3, r7, r3
    89d2:	2207      	movs	r2, #7
    89d4:	705a      	strb	r2, [r3, #1]
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at_chip_config);
    89d6:	233c      	movs	r3, #60	; 0x3c
    89d8:	18fa      	adds	r2, r7, r3
    89da:	490a      	ldr	r1, [pc, #40]	; (8a04 <at25dfx_init+0x88>)
    89dc:	4b0c      	ldr	r3, [pc, #48]	; (8a10 <at25dfx_init+0x94>)
    89de:	0018      	movs	r0, r3
    89e0:	4b0c      	ldr	r3, [pc, #48]	; (8a14 <at25dfx_init+0x98>)
    89e2:	4798      	blx	r3
}
    89e4:	46c0      	nop			; (mov r8, r8)
    89e6:	46bd      	mov	sp, r7
    89e8:	b010      	add	sp, #64	; 0x40
    89ea:	bd80      	pop	{r7, pc}
    89ec:	00007231 	.word	0x00007231
    89f0:	000f4240 	.word	0x000f4240
    89f4:	00100002 	.word	0x00100002
    89f8:	00120002 	.word	0x00120002
    89fc:	00130002 	.word	0x00130002
    8a00:	42000c00 	.word	0x42000c00
    8a04:	20000368 	.word	0x20000368
    8a08:	00001481 	.word	0x00001481
    8a0c:	000071e1 	.word	0x000071e1
    8a10:	20000338 	.word	0x20000338
    8a14:	0000724d 	.word	0x0000724d

00008a18 <flash_test>:
/**
 * Tests at25dfx flash
 Writes buffer to address and reads, checks CRCs to match
 */
void flash_test(void)
{
    8a18:	b590      	push	{r4, r7, lr}
    8a1a:	b083      	sub	sp, #12
    8a1c:	af00      	add	r7, sp, #0
	at25dfx_init();
    8a1e:	4b3f      	ldr	r3, [pc, #252]	; (8b1c <flash_test+0x104>)
    8a20:	4798      	blx	r3
	
	
	

	printf("flash initialized\r\n");
    8a22:	4b3f      	ldr	r3, [pc, #252]	; (8b20 <flash_test+0x108>)
    8a24:	0018      	movs	r0, r3
    8a26:	4b3f      	ldr	r3, [pc, #252]	; (8b24 <flash_test+0x10c>)
    8a28:	4798      	blx	r3
	
	//calculate initial checksum of write
	crc32_calculate(write_buffer, sizeof(write_buffer), &crc1);
    8a2a:	4a3f      	ldr	r2, [pc, #252]	; (8b28 <flash_test+0x110>)
    8a2c:	4b3f      	ldr	r3, [pc, #252]	; (8b2c <flash_test+0x114>)
    8a2e:	210a      	movs	r1, #10
    8a30:	0018      	movs	r0, r3
    8a32:	4b3f      	ldr	r3, [pc, #252]	; (8b30 <flash_test+0x118>)
    8a34:	4798      	blx	r3

	at25dfx_chip_wake(&at25dfx_chip);
    8a36:	4b3f      	ldr	r3, [pc, #252]	; (8b34 <flash_test+0x11c>)
    8a38:	0018      	movs	r0, r3
    8a3a:	4b3f      	ldr	r3, [pc, #252]	; (8b38 <flash_test+0x120>)
    8a3c:	4798      	blx	r3
	
	//check if chip is there
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    8a3e:	4b3d      	ldr	r3, [pc, #244]	; (8b34 <flash_test+0x11c>)
    8a40:	0018      	movs	r0, r3
    8a42:	4b3e      	ldr	r3, [pc, #248]	; (8b3c <flash_test+0x124>)
    8a44:	4798      	blx	r3
    8a46:	1e03      	subs	r3, r0, #0
    8a48:	d003      	beq.n	8a52 <flash_test+0x3a>
		printf("No chip.\r\n");
    8a4a:	4b3d      	ldr	r3, [pc, #244]	; (8b40 <flash_test+0x128>)
    8a4c:	0018      	movs	r0, r3
    8a4e:	4b35      	ldr	r3, [pc, #212]	; (8b24 <flash_test+0x10c>)
    8a50:	4798      	blx	r3
	}
	
	//read beginning of memory
	at25dfx_chip_read_buffer(&at25dfx_chip, 0x0000, read_buffer, AT25DFX_BUFFER_SIZE);
    8a52:	4a3c      	ldr	r2, [pc, #240]	; (8b44 <flash_test+0x12c>)
    8a54:	4837      	ldr	r0, [pc, #220]	; (8b34 <flash_test+0x11c>)
    8a56:	230a      	movs	r3, #10
    8a58:	2100      	movs	r1, #0
    8a5a:	4c3b      	ldr	r4, [pc, #236]	; (8b48 <flash_test+0x130>)
    8a5c:	47a0      	blx	r4
	//disable protection
	at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);
    8a5e:	2380      	movs	r3, #128	; 0x80
    8a60:	0259      	lsls	r1, r3, #9
    8a62:	4b34      	ldr	r3, [pc, #208]	; (8b34 <flash_test+0x11c>)
    8a64:	2200      	movs	r2, #0
    8a66:	0018      	movs	r0, r3
    8a68:	4b38      	ldr	r3, [pc, #224]	; (8b4c <flash_test+0x134>)
    8a6a:	4798      	blx	r3
	//erase block (sets to FF's)
	at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);
    8a6c:	2380      	movs	r3, #128	; 0x80
    8a6e:	0259      	lsls	r1, r3, #9
    8a70:	4b30      	ldr	r3, [pc, #192]	; (8b34 <flash_test+0x11c>)
    8a72:	2200      	movs	r2, #0
    8a74:	0018      	movs	r0, r3
    8a76:	4b36      	ldr	r3, [pc, #216]	; (8b50 <flash_test+0x138>)
    8a78:	4798      	blx	r3
	//write write buffer at 0x10000
	at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, write_buffer, AT25DFX_BUFFER_SIZE);
    8a7a:	4a2c      	ldr	r2, [pc, #176]	; (8b2c <flash_test+0x114>)
    8a7c:	2380      	movs	r3, #128	; 0x80
    8a7e:	0259      	lsls	r1, r3, #9
    8a80:	482c      	ldr	r0, [pc, #176]	; (8b34 <flash_test+0x11c>)
    8a82:	230a      	movs	r3, #10
    8a84:	4c33      	ldr	r4, [pc, #204]	; (8b54 <flash_test+0x13c>)
    8a86:	47a0      	blx	r4
	//re-enable protection
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
    8a88:	4b2a      	ldr	r3, [pc, #168]	; (8b34 <flash_test+0x11c>)
    8a8a:	2101      	movs	r1, #1
    8a8c:	0018      	movs	r0, r3
    8a8e:	4b32      	ldr	r3, [pc, #200]	; (8b58 <flash_test+0x140>)
    8a90:	4798      	blx	r3
	
	//read at 0x10000 if read doesn't return OK, there is an error
	if (at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, read_buffer, AT25DFX_BUFFER_SIZE) != STATUS_OK) {
    8a92:	4a2c      	ldr	r2, [pc, #176]	; (8b44 <flash_test+0x12c>)
    8a94:	2380      	movs	r3, #128	; 0x80
    8a96:	0259      	lsls	r1, r3, #9
    8a98:	4826      	ldr	r0, [pc, #152]	; (8b34 <flash_test+0x11c>)
    8a9a:	230a      	movs	r3, #10
    8a9c:	4c2a      	ldr	r4, [pc, #168]	; (8b48 <flash_test+0x130>)
    8a9e:	47a0      	blx	r4
    8aa0:	1e03      	subs	r3, r0, #0
    8aa2:	d003      	beq.n	8aac <flash_test+0x94>
		printf("Read error\r\n");
    8aa4:	4b2d      	ldr	r3, [pc, #180]	; (8b5c <flash_test+0x144>)
    8aa6:	0018      	movs	r0, r3
    8aa8:	4b1e      	ldr	r3, [pc, #120]	; (8b24 <flash_test+0x10c>)
    8aaa:	4798      	blx	r3
	}
	//print read buffer
	for (int i = 0; i < AT25DFX_BUFFER_SIZE; i++) {
    8aac:	2300      	movs	r3, #0
    8aae:	607b      	str	r3, [r7, #4]
    8ab0:	e00c      	b.n	8acc <flash_test+0xb4>
		printf("%d", read_buffer[i]);
    8ab2:	4a24      	ldr	r2, [pc, #144]	; (8b44 <flash_test+0x12c>)
    8ab4:	687b      	ldr	r3, [r7, #4]
    8ab6:	18d3      	adds	r3, r2, r3
    8ab8:	781b      	ldrb	r3, [r3, #0]
    8aba:	001a      	movs	r2, r3
    8abc:	4b28      	ldr	r3, [pc, #160]	; (8b60 <flash_test+0x148>)
    8abe:	0011      	movs	r1, r2
    8ac0:	0018      	movs	r0, r3
    8ac2:	4b28      	ldr	r3, [pc, #160]	; (8b64 <flash_test+0x14c>)
    8ac4:	4798      	blx	r3
	for (int i = 0; i < AT25DFX_BUFFER_SIZE; i++) {
    8ac6:	687b      	ldr	r3, [r7, #4]
    8ac8:	3301      	adds	r3, #1
    8aca:	607b      	str	r3, [r7, #4]
    8acc:	687b      	ldr	r3, [r7, #4]
    8ace:	2b09      	cmp	r3, #9
    8ad0:	ddef      	ble.n	8ab2 <flash_test+0x9a>
	}
	printf("\r\n");
    8ad2:	4b25      	ldr	r3, [pc, #148]	; (8b68 <flash_test+0x150>)
    8ad4:	0018      	movs	r0, r3
    8ad6:	4b13      	ldr	r3, [pc, #76]	; (8b24 <flash_test+0x10c>)
    8ad8:	4798      	blx	r3
	
	//calculate crc for read
	crc32_recalculate(read_buffer, sizeof(read_buffer), &crc2);
    8ada:	4a24      	ldr	r2, [pc, #144]	; (8b6c <flash_test+0x154>)
    8adc:	4b19      	ldr	r3, [pc, #100]	; (8b44 <flash_test+0x12c>)
    8ade:	210a      	movs	r1, #10
    8ae0:	0018      	movs	r0, r3
    8ae2:	4b23      	ldr	r3, [pc, #140]	; (8b70 <flash_test+0x158>)
    8ae4:	4798      	blx	r3
	//if they don't match, its an error
	if (crc2 != crc1) {
    8ae6:	4b21      	ldr	r3, [pc, #132]	; (8b6c <flash_test+0x154>)
    8ae8:	681a      	ldr	r2, [r3, #0]
    8aea:	4b0f      	ldr	r3, [pc, #60]	; (8b28 <flash_test+0x110>)
    8aec:	681b      	ldr	r3, [r3, #0]
    8aee:	429a      	cmp	r2, r3
    8af0:	d004      	beq.n	8afc <flash_test+0xe4>
		printf("CRC error!\r\n");
    8af2:	4b20      	ldr	r3, [pc, #128]	; (8b74 <flash_test+0x15c>)
    8af4:	0018      	movs	r0, r3
    8af6:	4b0b      	ldr	r3, [pc, #44]	; (8b24 <flash_test+0x10c>)
    8af8:	4798      	blx	r3
    8afa:	e003      	b.n	8b04 <flash_test+0xec>

		} else {
		printf("CRC matched!\r\n");
    8afc:	4b1e      	ldr	r3, [pc, #120]	; (8b78 <flash_test+0x160>)
    8afe:	0018      	movs	r0, r3
    8b00:	4b08      	ldr	r3, [pc, #32]	; (8b24 <flash_test+0x10c>)
    8b02:	4798      	blx	r3
	}
	
	printf("Flash sleeping\r\n");
    8b04:	4b1d      	ldr	r3, [pc, #116]	; (8b7c <flash_test+0x164>)
    8b06:	0018      	movs	r0, r3
    8b08:	4b06      	ldr	r3, [pc, #24]	; (8b24 <flash_test+0x10c>)
    8b0a:	4798      	blx	r3
	
	at25dfx_chip_sleep(&at25dfx_chip);	
    8b0c:	4b09      	ldr	r3, [pc, #36]	; (8b34 <flash_test+0x11c>)
    8b0e:	0018      	movs	r0, r3
    8b10:	4b1b      	ldr	r3, [pc, #108]	; (8b80 <flash_test+0x168>)
    8b12:	4798      	blx	r3
    8b14:	46c0      	nop			; (mov r8, r8)
    8b16:	46bd      	mov	sp, r7
    8b18:	b003      	add	sp, #12
    8b1a:	bd90      	pop	{r4, r7, pc}
    8b1c:	0000897d 	.word	0x0000897d
    8b20:	0000ec4c 	.word	0x0000ec4c
    8b24:	00009a55 	.word	0x00009a55
    8b28:	20000334 	.word	0x20000334
    8b2c:	2000004c 	.word	0x2000004c
    8b30:	00007031 	.word	0x00007031
    8b34:	20000338 	.word	0x20000338
    8b38:	00000e39 	.word	0x00000e39
    8b3c:	0000082d 	.word	0x0000082d
    8b40:	0000ec60 	.word	0x0000ec60
    8b44:	200002b8 	.word	0x200002b8
    8b48:	000008d9 	.word	0x000008d9
    8b4c:	00000ce9 	.word	0x00000ce9
    8b50:	00000b39 	.word	0x00000b39
    8b54:	00000991 	.word	0x00000991
    8b58:	00000c35 	.word	0x00000c35
    8b5c:	0000ec6c 	.word	0x0000ec6c
    8b60:	0000ec78 	.word	0x0000ec78
    8b64:	00009961 	.word	0x00009961
    8b68:	0000ec7c 	.word	0x0000ec7c
    8b6c:	200003a4 	.word	0x200003a4
    8b70:	00000f15 	.word	0x00000f15
    8b74:	0000ec80 	.word	0x0000ec80
    8b78:	0000ec8c 	.word	0x0000ec8c
    8b7c:	0000ec9c 	.word	0x0000ec9c
    8b80:	00000dad 	.word	0x00000dad

00008b84 <system_interrupt_enable_global>:
{
    8b84:	b580      	push	{r7, lr}
    8b86:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    8b88:	4b04      	ldr	r3, [pc, #16]	; (8b9c <system_interrupt_enable_global+0x18>)
    8b8a:	2201      	movs	r2, #1
    8b8c:	701a      	strb	r2, [r3, #0]
    8b8e:	f3bf 8f5f 	dmb	sy
    8b92:	b662      	cpsie	i
}
    8b94:	46c0      	nop			; (mov r8, r8)
    8b96:	46bd      	mov	sp, r7
    8b98:	bd80      	pop	{r7, pc}
    8b9a:	46c0      	nop			; (mov r8, r8)
    8b9c:	20000048 	.word	0x20000048

00008ba0 <processUserInput>:
 * stores user input in rx buffer read from serial
 *
 * @return  true if successful, false if error
 */
bool processUserInput(void)
{
    8ba0:	b580      	push	{r7, lr}
    8ba2:	b082      	sub	sp, #8
    8ba4:	af00      	add	r7, sp, #0
	char singleCharInput;
	volatile enum status_code uartReadCode = usart_read_buffer_wait(&usart_instance, &singleCharInput, 1);
    8ba6:	1df9      	adds	r1, r7, #7
    8ba8:	4b32      	ldr	r3, [pc, #200]	; (8c74 <processUserInput+0xd4>)
    8baa:	2201      	movs	r2, #1
    8bac:	0018      	movs	r0, r3
    8bae:	4b32      	ldr	r3, [pc, #200]	; (8c78 <processUserInput+0xd8>)
    8bb0:	4798      	blx	r3
    8bb2:	0003      	movs	r3, r0
    8bb4:	001a      	movs	r2, r3
    8bb6:	1dbb      	adds	r3, r7, #6
    8bb8:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != uartReadCode) {
    8bba:	1dbb      	adds	r3, r7, #6
    8bbc:	781b      	ldrb	r3, [r3, #0]
    8bbe:	b2db      	uxtb	r3, r3
    8bc0:	2b00      	cmp	r3, #0
    8bc2:	d001      	beq.n	8bc8 <processUserInput+0x28>
		return false;
    8bc4:	2300      	movs	r3, #0
    8bc6:	e051      	b.n	8c6c <processUserInput+0xcc>
	}
	if (STATUS_OK == uartReadCode) {
    8bc8:	1dbb      	adds	r3, r7, #6
    8bca:	781b      	ldrb	r3, [r3, #0]
    8bcc:	b2db      	uxtb	r3, r3
    8bce:	2b00      	cmp	r3, #0
    8bd0:	d109      	bne.n	8be6 <processUserInput+0x46>
		volatile enum status_code uartWriteCode = usart_write_buffer_wait(&usart_instance, &singleCharInput, 1);
    8bd2:	1df9      	adds	r1, r7, #7
    8bd4:	4b27      	ldr	r3, [pc, #156]	; (8c74 <processUserInput+0xd4>)
    8bd6:	2201      	movs	r2, #1
    8bd8:	0018      	movs	r0, r3
    8bda:	4b28      	ldr	r3, [pc, #160]	; (8c7c <processUserInput+0xdc>)
    8bdc:	4798      	blx	r3
    8bde:	0003      	movs	r3, r0
    8be0:	001a      	movs	r2, r3
    8be2:	1d7b      	adds	r3, r7, #5
    8be4:	701a      	strb	r2, [r3, #0]
	}

	switch (singleCharInput) {
    8be6:	1dfb      	adds	r3, r7, #7
    8be8:	781b      	ldrb	r3, [r3, #0]
    8bea:	2b0a      	cmp	r3, #10
    8bec:	d004      	beq.n	8bf8 <processUserInput+0x58>
    8bee:	2b0d      	cmp	r3, #13
    8bf0:	d002      	beq.n	8bf8 <processUserInput+0x58>
    8bf2:	2b08      	cmp	r3, #8
    8bf4:	d00f      	beq.n	8c16 <processUserInput+0x76>
    8bf6:	e01f      	b.n	8c38 <processUserInput+0x98>
	case CR:
	case LF:
		/// On carriage return (CR) or line feed (LF), the user has hit enter and it's time to process their command.
		/// Remember to null terminate your strings!  Otherwise, you could keep reading throughout memory.
		rx_buffer[numberCharsRead] = NULLCHAR;
    8bf8:	4b21      	ldr	r3, [pc, #132]	; (8c80 <processUserInput+0xe0>)
    8bfa:	781b      	ldrb	r3, [r3, #0]
    8bfc:	001a      	movs	r2, r3
    8bfe:	4b21      	ldr	r3, [pc, #132]	; (8c84 <processUserInput+0xe4>)
    8c00:	2100      	movs	r1, #0
    8c02:	5499      	strb	r1, [r3, r2]
		if (numberCharsRead > 0) {
    8c04:	4b1e      	ldr	r3, [pc, #120]	; (8c80 <processUserInput+0xe0>)
    8c06:	781b      	ldrb	r3, [r3, #0]
    8c08:	2b00      	cmp	r3, #0
    8c0a:	d02b      	beq.n	8c64 <processUserInput+0xc4>
			numberCharsRead = 0;
    8c0c:	4b1c      	ldr	r3, [pc, #112]	; (8c80 <processUserInput+0xe0>)
    8c0e:	2200      	movs	r2, #0
    8c10:	701a      	strb	r2, [r3, #0]
			return true;
    8c12:	2301      	movs	r3, #1
    8c14:	e02a      	b.n	8c6c <processUserInput+0xcc>
		}
		break;

	case BS:
		/// User input a backspace -- remove the character
		if(!numberCharsRead) //no characters written
    8c16:	4b1a      	ldr	r3, [pc, #104]	; (8c80 <processUserInput+0xe0>)
    8c18:	781b      	ldrb	r3, [r3, #0]
    8c1a:	2b00      	cmp	r3, #0
    8c1c:	d024      	beq.n	8c68 <processUserInput+0xc8>
			break;
		numberCharsRead--;
    8c1e:	4b18      	ldr	r3, [pc, #96]	; (8c80 <processUserInput+0xe0>)
    8c20:	781b      	ldrb	r3, [r3, #0]
    8c22:	3b01      	subs	r3, #1
    8c24:	b2da      	uxtb	r2, r3
    8c26:	4b16      	ldr	r3, [pc, #88]	; (8c80 <processUserInput+0xe0>)
    8c28:	701a      	strb	r2, [r3, #0]
		rx_buffer[numberCharsRead] = NULLCHAR;
    8c2a:	4b15      	ldr	r3, [pc, #84]	; (8c80 <processUserInput+0xe0>)
    8c2c:	781b      	ldrb	r3, [r3, #0]
    8c2e:	001a      	movs	r2, r3
    8c30:	4b14      	ldr	r3, [pc, #80]	; (8c84 <processUserInput+0xe4>)
    8c32:	2100      	movs	r1, #0
    8c34:	5499      	strb	r1, [r3, r2]

		/// Feeling cheeky?  Do it all in one line
		// rx_buffer[--numberCharsRead] = NULLCHAR;
		break;
    8c36:	e018      	b.n	8c6a <processUserInput+0xca>

	default:
		/// All other cases
		if (numberCharsRead < MAX_RX_BUFFER_LENGTH)
    8c38:	4b11      	ldr	r3, [pc, #68]	; (8c80 <processUserInput+0xe0>)
    8c3a:	781b      	ldrb	r3, [r3, #0]
    8c3c:	2b63      	cmp	r3, #99	; 0x63
    8c3e:	d80a      	bhi.n	8c56 <processUserInput+0xb6>
			rx_buffer[numberCharsRead++] = singleCharInput;
    8c40:	4b0f      	ldr	r3, [pc, #60]	; (8c80 <processUserInput+0xe0>)
    8c42:	781b      	ldrb	r3, [r3, #0]
    8c44:	1c5a      	adds	r2, r3, #1
    8c46:	b2d1      	uxtb	r1, r2
    8c48:	4a0d      	ldr	r2, [pc, #52]	; (8c80 <processUserInput+0xe0>)
    8c4a:	7011      	strb	r1, [r2, #0]
    8c4c:	001a      	movs	r2, r3
    8c4e:	1dfb      	adds	r3, r7, #7
    8c50:	7819      	ldrb	r1, [r3, #0]
    8c52:	4b0c      	ldr	r3, [pc, #48]	; (8c84 <processUserInput+0xe4>)
    8c54:	5499      	strb	r1, [r3, r2]
		rx_buffer[numberCharsRead] = NULLCHAR;  ///< String read protection
    8c56:	4b0a      	ldr	r3, [pc, #40]	; (8c80 <processUserInput+0xe0>)
    8c58:	781b      	ldrb	r3, [r3, #0]
    8c5a:	001a      	movs	r2, r3
    8c5c:	4b09      	ldr	r3, [pc, #36]	; (8c84 <processUserInput+0xe4>)
    8c5e:	2100      	movs	r1, #0
    8c60:	5499      	strb	r1, [r3, r2]
		break;
    8c62:	e002      	b.n	8c6a <processUserInput+0xca>
		break;
    8c64:	46c0      	nop			; (mov r8, r8)
    8c66:	e000      	b.n	8c6a <processUserInput+0xca>
			break;
    8c68:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    8c6a:	2300      	movs	r3, #0
}
    8c6c:	0018      	movs	r0, r3
    8c6e:	46bd      	mov	sp, r7
    8c70:	b002      	add	sp, #8
    8c72:	bd80      	pop	{r7, pc}
    8c74:	200002d8 	.word	0x200002d8
    8c78:	000052f1 	.word	0x000052f1
    8c7c:	000051c5 	.word	0x000051c5
    8c80:	2000044c 	.word	0x2000044c
    8c84:	200003e8 	.word	0x200003e8

00008c88 <make_lowercase>:
/**
 * helper function to set string to all lowercase
 * @param str string to make all lowercase
 */
void make_lowercase(char **str)
{
    8c88:	b590      	push	{r4, r7, lr}
    8c8a:	b085      	sub	sp, #20
    8c8c:	af00      	add	r7, sp, #0
    8c8e:	6078      	str	r0, [r7, #4]
	int i = 0;
    8c90:	2300      	movs	r3, #0
    8c92:	60fb      	str	r3, [r7, #12]

	while (*(*(str) + i) != 0) {
    8c94:	e026      	b.n	8ce4 <make_lowercase+0x5c>
		*(*(str) + i) = tolower(*(*str + i));
    8c96:	687b      	ldr	r3, [r7, #4]
    8c98:	681a      	ldr	r2, [r3, #0]
    8c9a:	68fb      	ldr	r3, [r7, #12]
    8c9c:	18d4      	adds	r4, r2, r3
    8c9e:	687b      	ldr	r3, [r7, #4]
    8ca0:	681a      	ldr	r2, [r3, #0]
    8ca2:	68fb      	ldr	r3, [r7, #12]
    8ca4:	18d2      	adds	r2, r2, r3
    8ca6:	230b      	movs	r3, #11
    8ca8:	18fb      	adds	r3, r7, r3
    8caa:	7812      	ldrb	r2, [r2, #0]
    8cac:	701a      	strb	r2, [r3, #0]
    8cae:	4b13      	ldr	r3, [pc, #76]	; (8cfc <make_lowercase+0x74>)
    8cb0:	4798      	blx	r3
    8cb2:	0002      	movs	r2, r0
    8cb4:	230b      	movs	r3, #11
    8cb6:	18fb      	adds	r3, r7, r3
    8cb8:	781b      	ldrb	r3, [r3, #0]
    8cba:	3301      	adds	r3, #1
    8cbc:	18d3      	adds	r3, r2, r3
    8cbe:	781b      	ldrb	r3, [r3, #0]
    8cc0:	001a      	movs	r2, r3
    8cc2:	2303      	movs	r3, #3
    8cc4:	4013      	ands	r3, r2
    8cc6:	2b01      	cmp	r3, #1
    8cc8:	d104      	bne.n	8cd4 <make_lowercase+0x4c>
    8cca:	230b      	movs	r3, #11
    8ccc:	18fb      	adds	r3, r7, r3
    8cce:	781b      	ldrb	r3, [r3, #0]
    8cd0:	3320      	adds	r3, #32
    8cd2:	e002      	b.n	8cda <make_lowercase+0x52>
    8cd4:	230b      	movs	r3, #11
    8cd6:	18fb      	adds	r3, r7, r3
    8cd8:	781b      	ldrb	r3, [r3, #0]
    8cda:	b2db      	uxtb	r3, r3
    8cdc:	7023      	strb	r3, [r4, #0]
		i++;
    8cde:	68fb      	ldr	r3, [r7, #12]
    8ce0:	3301      	adds	r3, #1
    8ce2:	60fb      	str	r3, [r7, #12]
	while (*(*(str) + i) != 0) {
    8ce4:	687b      	ldr	r3, [r7, #4]
    8ce6:	681a      	ldr	r2, [r3, #0]
    8ce8:	68fb      	ldr	r3, [r7, #12]
    8cea:	18d3      	adds	r3, r2, r3
    8cec:	781b      	ldrb	r3, [r3, #0]
    8cee:	2b00      	cmp	r3, #0
    8cf0:	d1d1      	bne.n	8c96 <make_lowercase+0xe>
	}
}
    8cf2:	46c0      	nop			; (mov r8, r8)
    8cf4:	46bd      	mov	sp, r7
    8cf6:	b005      	add	sp, #20
    8cf8:	bd90      	pop	{r4, r7, pc}
    8cfa:	46c0      	nop			; (mov r8, r8)
    8cfc:	00008eb9 	.word	0x00008eb9

00008d00 <fix_args>:

/**
 * fixes arguments and adds them to the argv buffer
 */
void fix_args()
{
    8d00:	b580      	push	{r7, lr}
    8d02:	b082      	sub	sp, #8
    8d04:	af00      	add	r7, sp, #0
	char *p = strtok(rx_buffer, " "); /// NOTE: strtok destroys the input string
    8d06:	4a15      	ldr	r2, [pc, #84]	; (8d5c <fix_args+0x5c>)
    8d08:	4b15      	ldr	r3, [pc, #84]	; (8d60 <fix_args+0x60>)
    8d0a:	0011      	movs	r1, r2
    8d0c:	0018      	movs	r0, r3
    8d0e:	4b15      	ldr	r3, [pc, #84]	; (8d64 <fix_args+0x64>)
    8d10:	4798      	blx	r3
    8d12:	0003      	movs	r3, r0
    8d14:	607b      	str	r3, [r7, #4]

	while (p != NULL) {
    8d16:	e019      	b.n	8d4c <fix_args+0x4c>
		make_lowercase(&p);
    8d18:	1d3b      	adds	r3, r7, #4
    8d1a:	0018      	movs	r0, r3
    8d1c:	4b12      	ldr	r3, [pc, #72]	; (8d68 <fix_args+0x68>)
    8d1e:	4798      	blx	r3
		strcpy(argv[argc++], p);
    8d20:	4b12      	ldr	r3, [pc, #72]	; (8d6c <fix_args+0x6c>)
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	1c5a      	adds	r2, r3, #1
    8d26:	b2d1      	uxtb	r1, r2
    8d28:	4a10      	ldr	r2, [pc, #64]	; (8d6c <fix_args+0x6c>)
    8d2a:	7011      	strb	r1, [r2, #0]
    8d2c:	001a      	movs	r2, r3
    8d2e:	4b10      	ldr	r3, [pc, #64]	; (8d70 <fix_args+0x70>)
    8d30:	0092      	lsls	r2, r2, #2
    8d32:	58d3      	ldr	r3, [r2, r3]
    8d34:	687a      	ldr	r2, [r7, #4]
    8d36:	0011      	movs	r1, r2
    8d38:	0018      	movs	r0, r3
    8d3a:	4b0e      	ldr	r3, [pc, #56]	; (8d74 <fix_args+0x74>)
    8d3c:	4798      	blx	r3
		p = strtok(NULL, " ");
    8d3e:	4b07      	ldr	r3, [pc, #28]	; (8d5c <fix_args+0x5c>)
    8d40:	0019      	movs	r1, r3
    8d42:	2000      	movs	r0, #0
    8d44:	4b07      	ldr	r3, [pc, #28]	; (8d64 <fix_args+0x64>)
    8d46:	4798      	blx	r3
    8d48:	0003      	movs	r3, r0
    8d4a:	607b      	str	r3, [r7, #4]
	while (p != NULL) {
    8d4c:	687b      	ldr	r3, [r7, #4]
    8d4e:	2b00      	cmp	r3, #0
    8d50:	d1e2      	bne.n	8d18 <fix_args+0x18>
	}
}
    8d52:	46c0      	nop			; (mov r8, r8)
    8d54:	46bd      	mov	sp, r7
    8d56:	b002      	add	sp, #8
    8d58:	bd80      	pop	{r7, pc}
    8d5a:	46c0      	nop			; (mov r8, r8)
    8d5c:	0000ecac 	.word	0x0000ecac
    8d60:	200003e8 	.word	0x200003e8
    8d64:	00009c2d 	.word	0x00009c2d
    8d68:	00008c89 	.word	0x00008c89
    8d6c:	200003e4 	.word	0x200003e4
    8d70:	200003d4 	.word	0x200003d4
    8d74:	00009c0d 	.word	0x00009c0d

00008d78 <main>:


int main(void)
{
    8d78:	b590      	push	{r4, r7, lr}
    8d7a:	b083      	sub	sp, #12
    8d7c:	af00      	add	r7, sp, #0
	system_init();
    8d7e:	4b24      	ldr	r3, [pc, #144]	; (8e10 <main+0x98>)
    8d80:	4798      	blx	r3
	system_interrupt_enable_global();
    8d82:	4b24      	ldr	r3, [pc, #144]	; (8e14 <main+0x9c>)
    8d84:	4798      	blx	r3
	delay_init();
    8d86:	4b24      	ldr	r3, [pc, #144]	; (8e18 <main+0xa0>)
    8d88:	4798      	blx	r3

	configure_usart();
    8d8a:	4b24      	ldr	r3, [pc, #144]	; (8e1c <main+0xa4>)
    8d8c:	4798      	blx	r3
	
	configure_adc(PIN_PA02); //configure moisture sensor analog
    8d8e:	2002      	movs	r0, #2
    8d90:	4b23      	ldr	r3, [pc, #140]	; (8e20 <main+0xa8>)
    8d92:	4798      	blx	r3
	configure_i2c_temp(); //config i2c
    8d94:	4b23      	ldr	r3, [pc, #140]	; (8e24 <main+0xac>)
    8d96:	4798      	blx	r3
	configure_i2c_lux();
    8d98:	4b23      	ldr	r3, [pc, #140]	; (8e28 <main+0xb0>)
    8d9a:	4798      	blx	r3
	configure_i2c_callbacks_hdc();
    8d9c:	4b23      	ldr	r3, [pc, #140]	; (8e2c <main+0xb4>)
    8d9e:	4798      	blx	r3
	configure_i2c_callbacks_tsl();
    8da0:	4b23      	ldr	r3, [pc, #140]	; (8e30 <main+0xb8>)
    8da2:	4798      	blx	r3

	
	for (int i = 0; i < MAX_ARGS; i++)
    8da4:	2300      	movs	r3, #0
    8da6:	607b      	str	r3, [r7, #4]
    8da8:	e00b      	b.n	8dc2 <main+0x4a>
		argv[i] = malloc(sizeof(char) * MAX_ARG_LENGTH);
    8daa:	2019      	movs	r0, #25
    8dac:	4b21      	ldr	r3, [pc, #132]	; (8e34 <main+0xbc>)
    8dae:	4798      	blx	r3
    8db0:	0003      	movs	r3, r0
    8db2:	0019      	movs	r1, r3
    8db4:	4b20      	ldr	r3, [pc, #128]	; (8e38 <main+0xc0>)
    8db6:	687a      	ldr	r2, [r7, #4]
    8db8:	0092      	lsls	r2, r2, #2
    8dba:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < MAX_ARGS; i++)
    8dbc:	687b      	ldr	r3, [r7, #4]
    8dbe:	3301      	adds	r3, #1
    8dc0:	607b      	str	r3, [r7, #4]
    8dc2:	687b      	ldr	r3, [r7, #4]
    8dc4:	2b03      	cmp	r3, #3
    8dc6:	ddf0      	ble.n	8daa <main+0x32>

	//TODO: print version information
	printf("Welcome to the Evergreen CLI.\r\n");
    8dc8:	4b1c      	ldr	r3, [pc, #112]	; (8e3c <main+0xc4>)
    8dca:	0018      	movs	r0, r3
    8dcc:	4b1c      	ldr	r3, [pc, #112]	; (8e40 <main+0xc8>)
    8dce:	4798      	blx	r3
	printf("> ");
    8dd0:	4b1c      	ldr	r3, [pc, #112]	; (8e44 <main+0xcc>)
    8dd2:	0018      	movs	r0, r3
    8dd4:	4b1c      	ldr	r3, [pc, #112]	; (8e48 <main+0xd0>)
    8dd6:	4798      	blx	r3
	while (1) {
		bool commandEntered = processUserInput();
    8dd8:	1cfc      	adds	r4, r7, #3
    8dda:	4b1c      	ldr	r3, [pc, #112]	; (8e4c <main+0xd4>)
    8ddc:	4798      	blx	r3
    8dde:	0003      	movs	r3, r0
    8de0:	7023      	strb	r3, [r4, #0]
		if (commandEntered) {
    8de2:	1cfb      	adds	r3, r7, #3
    8de4:	781b      	ldrb	r3, [r3, #0]
    8de6:	2b00      	cmp	r3, #0
    8de8:	d0f6      	beq.n	8dd8 <main+0x60>
			fix_args();
    8dea:	4b19      	ldr	r3, [pc, #100]	; (8e50 <main+0xd8>)
    8dec:	4798      	blx	r3
			input_handle(argc, argv); //fix
    8dee:	4b19      	ldr	r3, [pc, #100]	; (8e54 <main+0xdc>)
    8df0:	781b      	ldrb	r3, [r3, #0]
    8df2:	001a      	movs	r2, r3
    8df4:	4b10      	ldr	r3, [pc, #64]	; (8e38 <main+0xc0>)
    8df6:	0019      	movs	r1, r3
    8df8:	0010      	movs	r0, r2
    8dfa:	4b17      	ldr	r3, [pc, #92]	; (8e58 <main+0xe0>)
    8dfc:	4798      	blx	r3
			argc = 0;
    8dfe:	4b15      	ldr	r3, [pc, #84]	; (8e54 <main+0xdc>)
    8e00:	2200      	movs	r2, #0
    8e02:	701a      	strb	r2, [r3, #0]
			printf("> ");
    8e04:	4b0f      	ldr	r3, [pc, #60]	; (8e44 <main+0xcc>)
    8e06:	0018      	movs	r0, r3
    8e08:	4b0f      	ldr	r3, [pc, #60]	; (8e48 <main+0xd0>)
    8e0a:	4798      	blx	r3
	while (1) {
    8e0c:	e7e4      	b.n	8dd8 <main+0x60>
    8e0e:	46c0      	nop			; (mov r8, r8)
    8e10:	00006ab5 	.word	0x00006ab5
    8e14:	00008b85 	.word	0x00008b85
    8e18:	00002819 	.word	0x00002819
    8e1c:	000086e9 	.word	0x000086e9
    8e20:	0000875d 	.word	0x0000875d
    8e24:	00008569 	.word	0x00008569
    8e28:	000085d1 	.word	0x000085d1
    8e2c:	00008689 	.word	0x00008689
    8e30:	000086b9 	.word	0x000086b9
    8e34:	00008ed5 	.word	0x00008ed5
    8e38:	200003d4 	.word	0x200003d4
    8e3c:	0000ecb0 	.word	0x0000ecb0
    8e40:	00009a55 	.word	0x00009a55
    8e44:	0000ecd0 	.word	0x0000ecd0
    8e48:	00009961 	.word	0x00009961
    8e4c:	00008ba1 	.word	0x00008ba1
    8e50:	00008d01 	.word	0x00008d01
    8e54:	200003e4 	.word	0x200003e4
    8e58:	00007d69 	.word	0x00007d69

00008e5c <atoi>:
    8e5c:	b510      	push	{r4, lr}
    8e5e:	220a      	movs	r2, #10
    8e60:	2100      	movs	r1, #0
    8e62:	f000 ffbf 	bl	9de4 <strtol>
    8e66:	bd10      	pop	{r4, pc}

00008e68 <__libc_init_array>:
    8e68:	b570      	push	{r4, r5, r6, lr}
    8e6a:	2600      	movs	r6, #0
    8e6c:	4d0c      	ldr	r5, [pc, #48]	; (8ea0 <__libc_init_array+0x38>)
    8e6e:	4c0d      	ldr	r4, [pc, #52]	; (8ea4 <__libc_init_array+0x3c>)
    8e70:	1b64      	subs	r4, r4, r5
    8e72:	10a4      	asrs	r4, r4, #2
    8e74:	42a6      	cmp	r6, r4
    8e76:	d109      	bne.n	8e8c <__libc_init_array+0x24>
    8e78:	2600      	movs	r6, #0
    8e7a:	f006 f92d 	bl	f0d8 <_init>
    8e7e:	4d0a      	ldr	r5, [pc, #40]	; (8ea8 <__libc_init_array+0x40>)
    8e80:	4c0a      	ldr	r4, [pc, #40]	; (8eac <__libc_init_array+0x44>)
    8e82:	1b64      	subs	r4, r4, r5
    8e84:	10a4      	asrs	r4, r4, #2
    8e86:	42a6      	cmp	r6, r4
    8e88:	d105      	bne.n	8e96 <__libc_init_array+0x2e>
    8e8a:	bd70      	pop	{r4, r5, r6, pc}
    8e8c:	00b3      	lsls	r3, r6, #2
    8e8e:	58eb      	ldr	r3, [r5, r3]
    8e90:	4798      	blx	r3
    8e92:	3601      	adds	r6, #1
    8e94:	e7ee      	b.n	8e74 <__libc_init_array+0xc>
    8e96:	00b3      	lsls	r3, r6, #2
    8e98:	58eb      	ldr	r3, [r5, r3]
    8e9a:	4798      	blx	r3
    8e9c:	3601      	adds	r6, #1
    8e9e:	e7f2      	b.n	8e86 <__libc_init_array+0x1e>
    8ea0:	0000f0e4 	.word	0x0000f0e4
    8ea4:	0000f0e4 	.word	0x0000f0e4
    8ea8:	0000f0e4 	.word	0x0000f0e4
    8eac:	0000f0e8 	.word	0x0000f0e8

00008eb0 <__locale_ctype_ptr_l>:
    8eb0:	30ec      	adds	r0, #236	; 0xec
    8eb2:	6800      	ldr	r0, [r0, #0]
    8eb4:	4770      	bx	lr
	...

00008eb8 <__locale_ctype_ptr>:
    8eb8:	4b04      	ldr	r3, [pc, #16]	; (8ecc <__locale_ctype_ptr+0x14>)
    8eba:	681b      	ldr	r3, [r3, #0]
    8ebc:	6a1b      	ldr	r3, [r3, #32]
    8ebe:	2b00      	cmp	r3, #0
    8ec0:	d100      	bne.n	8ec4 <__locale_ctype_ptr+0xc>
    8ec2:	4b03      	ldr	r3, [pc, #12]	; (8ed0 <__locale_ctype_ptr+0x18>)
    8ec4:	33ec      	adds	r3, #236	; 0xec
    8ec6:	6818      	ldr	r0, [r3, #0]
    8ec8:	4770      	bx	lr
    8eca:	46c0      	nop			; (mov r8, r8)
    8ecc:	20000078 	.word	0x20000078
    8ed0:	200000dc 	.word	0x200000dc

00008ed4 <malloc>:
    8ed4:	b510      	push	{r4, lr}
    8ed6:	4b03      	ldr	r3, [pc, #12]	; (8ee4 <malloc+0x10>)
    8ed8:	0001      	movs	r1, r0
    8eda:	6818      	ldr	r0, [r3, #0]
    8edc:	f000 f872 	bl	8fc4 <_malloc_r>
    8ee0:	bd10      	pop	{r4, pc}
    8ee2:	46c0      	nop			; (mov r8, r8)
    8ee4:	20000078 	.word	0x20000078

00008ee8 <__ascii_mbtowc>:
    8ee8:	b082      	sub	sp, #8
    8eea:	2900      	cmp	r1, #0
    8eec:	d100      	bne.n	8ef0 <__ascii_mbtowc+0x8>
    8eee:	a901      	add	r1, sp, #4
    8ef0:	1e10      	subs	r0, r2, #0
    8ef2:	d006      	beq.n	8f02 <__ascii_mbtowc+0x1a>
    8ef4:	2b00      	cmp	r3, #0
    8ef6:	d006      	beq.n	8f06 <__ascii_mbtowc+0x1e>
    8ef8:	7813      	ldrb	r3, [r2, #0]
    8efa:	600b      	str	r3, [r1, #0]
    8efc:	7810      	ldrb	r0, [r2, #0]
    8efe:	1e43      	subs	r3, r0, #1
    8f00:	4198      	sbcs	r0, r3
    8f02:	b002      	add	sp, #8
    8f04:	4770      	bx	lr
    8f06:	2002      	movs	r0, #2
    8f08:	4240      	negs	r0, r0
    8f0a:	e7fa      	b.n	8f02 <__ascii_mbtowc+0x1a>

00008f0c <memcpy>:
    8f0c:	2300      	movs	r3, #0
    8f0e:	b510      	push	{r4, lr}
    8f10:	429a      	cmp	r2, r3
    8f12:	d100      	bne.n	8f16 <memcpy+0xa>
    8f14:	bd10      	pop	{r4, pc}
    8f16:	5ccc      	ldrb	r4, [r1, r3]
    8f18:	54c4      	strb	r4, [r0, r3]
    8f1a:	3301      	adds	r3, #1
    8f1c:	e7f8      	b.n	8f10 <memcpy+0x4>

00008f1e <memset>:
    8f1e:	0003      	movs	r3, r0
    8f20:	1882      	adds	r2, r0, r2
    8f22:	4293      	cmp	r3, r2
    8f24:	d100      	bne.n	8f28 <memset+0xa>
    8f26:	4770      	bx	lr
    8f28:	7019      	strb	r1, [r3, #0]
    8f2a:	3301      	adds	r3, #1
    8f2c:	e7f9      	b.n	8f22 <memset+0x4>
	...

00008f30 <_free_r>:
    8f30:	b570      	push	{r4, r5, r6, lr}
    8f32:	0005      	movs	r5, r0
    8f34:	2900      	cmp	r1, #0
    8f36:	d010      	beq.n	8f5a <_free_r+0x2a>
    8f38:	1f0c      	subs	r4, r1, #4
    8f3a:	6823      	ldr	r3, [r4, #0]
    8f3c:	2b00      	cmp	r3, #0
    8f3e:	da00      	bge.n	8f42 <_free_r+0x12>
    8f40:	18e4      	adds	r4, r4, r3
    8f42:	0028      	movs	r0, r5
    8f44:	f002 f8b7 	bl	b0b6 <__malloc_lock>
    8f48:	4a1d      	ldr	r2, [pc, #116]	; (8fc0 <_free_r+0x90>)
    8f4a:	6813      	ldr	r3, [r2, #0]
    8f4c:	2b00      	cmp	r3, #0
    8f4e:	d105      	bne.n	8f5c <_free_r+0x2c>
    8f50:	6063      	str	r3, [r4, #4]
    8f52:	6014      	str	r4, [r2, #0]
    8f54:	0028      	movs	r0, r5
    8f56:	f002 f8af 	bl	b0b8 <__malloc_unlock>
    8f5a:	bd70      	pop	{r4, r5, r6, pc}
    8f5c:	42a3      	cmp	r3, r4
    8f5e:	d909      	bls.n	8f74 <_free_r+0x44>
    8f60:	6821      	ldr	r1, [r4, #0]
    8f62:	1860      	adds	r0, r4, r1
    8f64:	4283      	cmp	r3, r0
    8f66:	d1f3      	bne.n	8f50 <_free_r+0x20>
    8f68:	6818      	ldr	r0, [r3, #0]
    8f6a:	685b      	ldr	r3, [r3, #4]
    8f6c:	1841      	adds	r1, r0, r1
    8f6e:	6021      	str	r1, [r4, #0]
    8f70:	e7ee      	b.n	8f50 <_free_r+0x20>
    8f72:	0013      	movs	r3, r2
    8f74:	685a      	ldr	r2, [r3, #4]
    8f76:	2a00      	cmp	r2, #0
    8f78:	d001      	beq.n	8f7e <_free_r+0x4e>
    8f7a:	42a2      	cmp	r2, r4
    8f7c:	d9f9      	bls.n	8f72 <_free_r+0x42>
    8f7e:	6819      	ldr	r1, [r3, #0]
    8f80:	1858      	adds	r0, r3, r1
    8f82:	42a0      	cmp	r0, r4
    8f84:	d10b      	bne.n	8f9e <_free_r+0x6e>
    8f86:	6820      	ldr	r0, [r4, #0]
    8f88:	1809      	adds	r1, r1, r0
    8f8a:	1858      	adds	r0, r3, r1
    8f8c:	6019      	str	r1, [r3, #0]
    8f8e:	4282      	cmp	r2, r0
    8f90:	d1e0      	bne.n	8f54 <_free_r+0x24>
    8f92:	6810      	ldr	r0, [r2, #0]
    8f94:	6852      	ldr	r2, [r2, #4]
    8f96:	1841      	adds	r1, r0, r1
    8f98:	6019      	str	r1, [r3, #0]
    8f9a:	605a      	str	r2, [r3, #4]
    8f9c:	e7da      	b.n	8f54 <_free_r+0x24>
    8f9e:	42a0      	cmp	r0, r4
    8fa0:	d902      	bls.n	8fa8 <_free_r+0x78>
    8fa2:	230c      	movs	r3, #12
    8fa4:	602b      	str	r3, [r5, #0]
    8fa6:	e7d5      	b.n	8f54 <_free_r+0x24>
    8fa8:	6821      	ldr	r1, [r4, #0]
    8faa:	1860      	adds	r0, r4, r1
    8fac:	4282      	cmp	r2, r0
    8fae:	d103      	bne.n	8fb8 <_free_r+0x88>
    8fb0:	6810      	ldr	r0, [r2, #0]
    8fb2:	6852      	ldr	r2, [r2, #4]
    8fb4:	1841      	adds	r1, r0, r1
    8fb6:	6021      	str	r1, [r4, #0]
    8fb8:	6062      	str	r2, [r4, #4]
    8fba:	605c      	str	r4, [r3, #4]
    8fbc:	e7ca      	b.n	8f54 <_free_r+0x24>
    8fbe:	46c0      	nop			; (mov r8, r8)
    8fc0:	200002cc 	.word	0x200002cc

00008fc4 <_malloc_r>:
    8fc4:	2303      	movs	r3, #3
    8fc6:	b570      	push	{r4, r5, r6, lr}
    8fc8:	1ccd      	adds	r5, r1, #3
    8fca:	439d      	bics	r5, r3
    8fcc:	3508      	adds	r5, #8
    8fce:	0006      	movs	r6, r0
    8fd0:	2d0c      	cmp	r5, #12
    8fd2:	d21e      	bcs.n	9012 <_malloc_r+0x4e>
    8fd4:	250c      	movs	r5, #12
    8fd6:	42a9      	cmp	r1, r5
    8fd8:	d81d      	bhi.n	9016 <_malloc_r+0x52>
    8fda:	0030      	movs	r0, r6
    8fdc:	f002 f86b 	bl	b0b6 <__malloc_lock>
    8fe0:	4a25      	ldr	r2, [pc, #148]	; (9078 <_malloc_r+0xb4>)
    8fe2:	6814      	ldr	r4, [r2, #0]
    8fe4:	0021      	movs	r1, r4
    8fe6:	2900      	cmp	r1, #0
    8fe8:	d119      	bne.n	901e <_malloc_r+0x5a>
    8fea:	4c24      	ldr	r4, [pc, #144]	; (907c <_malloc_r+0xb8>)
    8fec:	6823      	ldr	r3, [r4, #0]
    8fee:	2b00      	cmp	r3, #0
    8ff0:	d103      	bne.n	8ffa <_malloc_r+0x36>
    8ff2:	0030      	movs	r0, r6
    8ff4:	f000 fd38 	bl	9a68 <_sbrk_r>
    8ff8:	6020      	str	r0, [r4, #0]
    8ffa:	0029      	movs	r1, r5
    8ffc:	0030      	movs	r0, r6
    8ffe:	f000 fd33 	bl	9a68 <_sbrk_r>
    9002:	1c43      	adds	r3, r0, #1
    9004:	d12c      	bne.n	9060 <_malloc_r+0x9c>
    9006:	230c      	movs	r3, #12
    9008:	0030      	movs	r0, r6
    900a:	6033      	str	r3, [r6, #0]
    900c:	f002 f854 	bl	b0b8 <__malloc_unlock>
    9010:	e003      	b.n	901a <_malloc_r+0x56>
    9012:	2d00      	cmp	r5, #0
    9014:	dadf      	bge.n	8fd6 <_malloc_r+0x12>
    9016:	230c      	movs	r3, #12
    9018:	6033      	str	r3, [r6, #0]
    901a:	2000      	movs	r0, #0
    901c:	bd70      	pop	{r4, r5, r6, pc}
    901e:	680b      	ldr	r3, [r1, #0]
    9020:	1b5b      	subs	r3, r3, r5
    9022:	d41a      	bmi.n	905a <_malloc_r+0x96>
    9024:	2b0b      	cmp	r3, #11
    9026:	d903      	bls.n	9030 <_malloc_r+0x6c>
    9028:	600b      	str	r3, [r1, #0]
    902a:	18cc      	adds	r4, r1, r3
    902c:	6025      	str	r5, [r4, #0]
    902e:	e003      	b.n	9038 <_malloc_r+0x74>
    9030:	428c      	cmp	r4, r1
    9032:	d10e      	bne.n	9052 <_malloc_r+0x8e>
    9034:	6863      	ldr	r3, [r4, #4]
    9036:	6013      	str	r3, [r2, #0]
    9038:	0030      	movs	r0, r6
    903a:	f002 f83d 	bl	b0b8 <__malloc_unlock>
    903e:	0020      	movs	r0, r4
    9040:	2207      	movs	r2, #7
    9042:	300b      	adds	r0, #11
    9044:	1d23      	adds	r3, r4, #4
    9046:	4390      	bics	r0, r2
    9048:	1ac3      	subs	r3, r0, r3
    904a:	d0e7      	beq.n	901c <_malloc_r+0x58>
    904c:	425a      	negs	r2, r3
    904e:	50e2      	str	r2, [r4, r3]
    9050:	e7e4      	b.n	901c <_malloc_r+0x58>
    9052:	684b      	ldr	r3, [r1, #4]
    9054:	6063      	str	r3, [r4, #4]
    9056:	000c      	movs	r4, r1
    9058:	e7ee      	b.n	9038 <_malloc_r+0x74>
    905a:	000c      	movs	r4, r1
    905c:	6849      	ldr	r1, [r1, #4]
    905e:	e7c2      	b.n	8fe6 <_malloc_r+0x22>
    9060:	2303      	movs	r3, #3
    9062:	1cc4      	adds	r4, r0, #3
    9064:	439c      	bics	r4, r3
    9066:	42a0      	cmp	r0, r4
    9068:	d0e0      	beq.n	902c <_malloc_r+0x68>
    906a:	1a21      	subs	r1, r4, r0
    906c:	0030      	movs	r0, r6
    906e:	f000 fcfb 	bl	9a68 <_sbrk_r>
    9072:	1c43      	adds	r3, r0, #1
    9074:	d1da      	bne.n	902c <_malloc_r+0x68>
    9076:	e7c6      	b.n	9006 <_malloc_r+0x42>
    9078:	200002cc 	.word	0x200002cc
    907c:	200002d0 	.word	0x200002d0

00009080 <__cvt>:
    9080:	b5f0      	push	{r4, r5, r6, r7, lr}
    9082:	b08b      	sub	sp, #44	; 0x2c
    9084:	0014      	movs	r4, r2
    9086:	1e1d      	subs	r5, r3, #0
    9088:	9912      	ldr	r1, [sp, #72]	; 0x48
    908a:	da53      	bge.n	9134 <__cvt+0xb4>
    908c:	2480      	movs	r4, #128	; 0x80
    908e:	0624      	lsls	r4, r4, #24
    9090:	191b      	adds	r3, r3, r4
    9092:	001d      	movs	r5, r3
    9094:	0014      	movs	r4, r2
    9096:	232d      	movs	r3, #45	; 0x2d
    9098:	700b      	strb	r3, [r1, #0]
    909a:	2320      	movs	r3, #32
    909c:	9e14      	ldr	r6, [sp, #80]	; 0x50
    909e:	2203      	movs	r2, #3
    90a0:	439e      	bics	r6, r3
    90a2:	2e46      	cmp	r6, #70	; 0x46
    90a4:	d007      	beq.n	90b6 <__cvt+0x36>
    90a6:	0033      	movs	r3, r6
    90a8:	3b45      	subs	r3, #69	; 0x45
    90aa:	4259      	negs	r1, r3
    90ac:	414b      	adcs	r3, r1
    90ae:	9910      	ldr	r1, [sp, #64]	; 0x40
    90b0:	3a01      	subs	r2, #1
    90b2:	18cb      	adds	r3, r1, r3
    90b4:	9310      	str	r3, [sp, #64]	; 0x40
    90b6:	ab09      	add	r3, sp, #36	; 0x24
    90b8:	9304      	str	r3, [sp, #16]
    90ba:	ab08      	add	r3, sp, #32
    90bc:	9303      	str	r3, [sp, #12]
    90be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    90c0:	9200      	str	r2, [sp, #0]
    90c2:	9302      	str	r3, [sp, #8]
    90c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    90c6:	0022      	movs	r2, r4
    90c8:	9301      	str	r3, [sp, #4]
    90ca:	002b      	movs	r3, r5
    90cc:	f000 fffa 	bl	a0c4 <_dtoa_r>
    90d0:	0007      	movs	r7, r0
    90d2:	2e47      	cmp	r6, #71	; 0x47
    90d4:	d102      	bne.n	90dc <__cvt+0x5c>
    90d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    90d8:	07db      	lsls	r3, r3, #31
    90da:	d524      	bpl.n	9126 <__cvt+0xa6>
    90dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    90de:	18fb      	adds	r3, r7, r3
    90e0:	9307      	str	r3, [sp, #28]
    90e2:	2e46      	cmp	r6, #70	; 0x46
    90e4:	d114      	bne.n	9110 <__cvt+0x90>
    90e6:	783b      	ldrb	r3, [r7, #0]
    90e8:	2b30      	cmp	r3, #48	; 0x30
    90ea:	d10c      	bne.n	9106 <__cvt+0x86>
    90ec:	2200      	movs	r2, #0
    90ee:	2300      	movs	r3, #0
    90f0:	0020      	movs	r0, r4
    90f2:	0029      	movs	r1, r5
    90f4:	f002 fe64 	bl	bdc0 <__aeabi_dcmpeq>
    90f8:	2800      	cmp	r0, #0
    90fa:	d104      	bne.n	9106 <__cvt+0x86>
    90fc:	2301      	movs	r3, #1
    90fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9100:	1a9b      	subs	r3, r3, r2
    9102:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9104:	6013      	str	r3, [r2, #0]
    9106:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9108:	9a07      	ldr	r2, [sp, #28]
    910a:	681b      	ldr	r3, [r3, #0]
    910c:	18d3      	adds	r3, r2, r3
    910e:	9307      	str	r3, [sp, #28]
    9110:	2200      	movs	r2, #0
    9112:	2300      	movs	r3, #0
    9114:	0020      	movs	r0, r4
    9116:	0029      	movs	r1, r5
    9118:	f002 fe52 	bl	bdc0 <__aeabi_dcmpeq>
    911c:	2230      	movs	r2, #48	; 0x30
    911e:	2800      	cmp	r0, #0
    9120:	d00d      	beq.n	913e <__cvt+0xbe>
    9122:	9b07      	ldr	r3, [sp, #28]
    9124:	9309      	str	r3, [sp, #36]	; 0x24
    9126:	0038      	movs	r0, r7
    9128:	9b09      	ldr	r3, [sp, #36]	; 0x24
    912a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    912c:	1bdb      	subs	r3, r3, r7
    912e:	6013      	str	r3, [r2, #0]
    9130:	b00b      	add	sp, #44	; 0x2c
    9132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9134:	2300      	movs	r3, #0
    9136:	e7af      	b.n	9098 <__cvt+0x18>
    9138:	1c59      	adds	r1, r3, #1
    913a:	9109      	str	r1, [sp, #36]	; 0x24
    913c:	701a      	strb	r2, [r3, #0]
    913e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9140:	9907      	ldr	r1, [sp, #28]
    9142:	4299      	cmp	r1, r3
    9144:	d8f8      	bhi.n	9138 <__cvt+0xb8>
    9146:	e7ee      	b.n	9126 <__cvt+0xa6>

00009148 <__exponent>:
    9148:	b5f0      	push	{r4, r5, r6, r7, lr}
    914a:	232b      	movs	r3, #43	; 0x2b
    914c:	b085      	sub	sp, #20
    914e:	0007      	movs	r7, r0
    9150:	000c      	movs	r4, r1
    9152:	7002      	strb	r2, [r0, #0]
    9154:	1c86      	adds	r6, r0, #2
    9156:	2900      	cmp	r1, #0
    9158:	da01      	bge.n	915e <__exponent+0x16>
    915a:	232d      	movs	r3, #45	; 0x2d
    915c:	424c      	negs	r4, r1
    915e:	707b      	strb	r3, [r7, #1]
    9160:	2c09      	cmp	r4, #9
    9162:	dd23      	ble.n	91ac <__exponent+0x64>
    9164:	ab02      	add	r3, sp, #8
    9166:	1ddd      	adds	r5, r3, #7
    9168:	1e6b      	subs	r3, r5, #1
    916a:	0020      	movs	r0, r4
    916c:	210a      	movs	r1, #10
    916e:	9301      	str	r3, [sp, #4]
    9170:	f002 fe10 	bl	bd94 <__aeabi_idivmod>
    9174:	1e6b      	subs	r3, r5, #1
    9176:	3130      	adds	r1, #48	; 0x30
    9178:	7019      	strb	r1, [r3, #0]
    917a:	0020      	movs	r0, r4
    917c:	210a      	movs	r1, #10
    917e:	f002 fd23 	bl	bbc8 <__divsi3>
    9182:	0004      	movs	r4, r0
    9184:	2809      	cmp	r0, #9
    9186:	dc0a      	bgt.n	919e <__exponent+0x56>
    9188:	3d02      	subs	r5, #2
    918a:	3430      	adds	r4, #48	; 0x30
    918c:	702c      	strb	r4, [r5, #0]
    918e:	ab02      	add	r3, sp, #8
    9190:	3307      	adds	r3, #7
    9192:	0030      	movs	r0, r6
    9194:	42ab      	cmp	r3, r5
    9196:	d804      	bhi.n	91a2 <__exponent+0x5a>
    9198:	1bc0      	subs	r0, r0, r7
    919a:	b005      	add	sp, #20
    919c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    919e:	9d01      	ldr	r5, [sp, #4]
    91a0:	e7e2      	b.n	9168 <__exponent+0x20>
    91a2:	782b      	ldrb	r3, [r5, #0]
    91a4:	3501      	adds	r5, #1
    91a6:	7033      	strb	r3, [r6, #0]
    91a8:	3601      	adds	r6, #1
    91aa:	e7f0      	b.n	918e <__exponent+0x46>
    91ac:	2330      	movs	r3, #48	; 0x30
    91ae:	18e4      	adds	r4, r4, r3
    91b0:	7033      	strb	r3, [r6, #0]
    91b2:	1cb0      	adds	r0, r6, #2
    91b4:	7074      	strb	r4, [r6, #1]
    91b6:	e7ef      	b.n	9198 <__exponent+0x50>

000091b8 <_printf_float>:
    91b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    91ba:	b095      	sub	sp, #84	; 0x54
    91bc:	000c      	movs	r4, r1
    91be:	920a      	str	r2, [sp, #40]	; 0x28
    91c0:	930b      	str	r3, [sp, #44]	; 0x2c
    91c2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    91c4:	9009      	str	r0, [sp, #36]	; 0x24
    91c6:	f001 fef3 	bl	afb0 <_localeconv_r>
    91ca:	6803      	ldr	r3, [r0, #0]
    91cc:	0018      	movs	r0, r3
    91ce:	930d      	str	r3, [sp, #52]	; 0x34
    91d0:	f000 fd24 	bl	9c1c <strlen>
    91d4:	2300      	movs	r3, #0
    91d6:	9312      	str	r3, [sp, #72]	; 0x48
    91d8:	6823      	ldr	r3, [r4, #0]
    91da:	900e      	str	r0, [sp, #56]	; 0x38
    91dc:	930c      	str	r3, [sp, #48]	; 0x30
    91de:	990c      	ldr	r1, [sp, #48]	; 0x30
    91e0:	7e27      	ldrb	r7, [r4, #24]
    91e2:	682b      	ldr	r3, [r5, #0]
    91e4:	2207      	movs	r2, #7
    91e6:	05c9      	lsls	r1, r1, #23
    91e8:	d547      	bpl.n	927a <_printf_float+0xc2>
    91ea:	189b      	adds	r3, r3, r2
    91ec:	4393      	bics	r3, r2
    91ee:	001a      	movs	r2, r3
    91f0:	3208      	adds	r2, #8
    91f2:	602a      	str	r2, [r5, #0]
    91f4:	681a      	ldr	r2, [r3, #0]
    91f6:	685b      	ldr	r3, [r3, #4]
    91f8:	64a2      	str	r2, [r4, #72]	; 0x48
    91fa:	64e3      	str	r3, [r4, #76]	; 0x4c
    91fc:	2201      	movs	r2, #1
    91fe:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    9200:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    9202:	006b      	lsls	r3, r5, #1
    9204:	085b      	lsrs	r3, r3, #1
    9206:	930f      	str	r3, [sp, #60]	; 0x3c
    9208:	4252      	negs	r2, r2
    920a:	4ba7      	ldr	r3, [pc, #668]	; (94a8 <_printf_float+0x2f0>)
    920c:	0030      	movs	r0, r6
    920e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9210:	f004 fe06 	bl	de20 <__aeabi_dcmpun>
    9214:	2800      	cmp	r0, #0
    9216:	d000      	beq.n	921a <_printf_float+0x62>
    9218:	e206      	b.n	9628 <_printf_float+0x470>
    921a:	2201      	movs	r2, #1
    921c:	4ba2      	ldr	r3, [pc, #648]	; (94a8 <_printf_float+0x2f0>)
    921e:	4252      	negs	r2, r2
    9220:	0030      	movs	r0, r6
    9222:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9224:	f002 fddc 	bl	bde0 <__aeabi_dcmple>
    9228:	2800      	cmp	r0, #0
    922a:	d000      	beq.n	922e <_printf_float+0x76>
    922c:	e1fc      	b.n	9628 <_printf_float+0x470>
    922e:	2200      	movs	r2, #0
    9230:	2300      	movs	r3, #0
    9232:	0030      	movs	r0, r6
    9234:	0029      	movs	r1, r5
    9236:	f002 fdc9 	bl	bdcc <__aeabi_dcmplt>
    923a:	2800      	cmp	r0, #0
    923c:	d003      	beq.n	9246 <_printf_float+0x8e>
    923e:	0023      	movs	r3, r4
    9240:	222d      	movs	r2, #45	; 0x2d
    9242:	3343      	adds	r3, #67	; 0x43
    9244:	701a      	strb	r2, [r3, #0]
    9246:	4d99      	ldr	r5, [pc, #612]	; (94ac <_printf_float+0x2f4>)
    9248:	2f47      	cmp	r7, #71	; 0x47
    924a:	d800      	bhi.n	924e <_printf_float+0x96>
    924c:	4d98      	ldr	r5, [pc, #608]	; (94b0 <_printf_float+0x2f8>)
    924e:	2303      	movs	r3, #3
    9250:	2600      	movs	r6, #0
    9252:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9254:	6123      	str	r3, [r4, #16]
    9256:	3301      	adds	r3, #1
    9258:	439a      	bics	r2, r3
    925a:	6022      	str	r2, [r4, #0]
    925c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    925e:	aa13      	add	r2, sp, #76	; 0x4c
    9260:	9300      	str	r3, [sp, #0]
    9262:	0021      	movs	r1, r4
    9264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9266:	9809      	ldr	r0, [sp, #36]	; 0x24
    9268:	f000 f9f2 	bl	9650 <_printf_common>
    926c:	1c43      	adds	r3, r0, #1
    926e:	d000      	beq.n	9272 <_printf_float+0xba>
    9270:	e09c      	b.n	93ac <_printf_float+0x1f4>
    9272:	2001      	movs	r0, #1
    9274:	4240      	negs	r0, r0
    9276:	b015      	add	sp, #84	; 0x54
    9278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    927a:	3307      	adds	r3, #7
    927c:	e7b6      	b.n	91ec <_printf_float+0x34>
    927e:	2380      	movs	r3, #128	; 0x80
    9280:	6862      	ldr	r2, [r4, #4]
    9282:	00db      	lsls	r3, r3, #3
    9284:	1c51      	adds	r1, r2, #1
    9286:	d145      	bne.n	9314 <_printf_float+0x15c>
    9288:	3207      	adds	r2, #7
    928a:	6062      	str	r2, [r4, #4]
    928c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    928e:	2100      	movs	r1, #0
    9290:	4313      	orrs	r3, r2
    9292:	aa12      	add	r2, sp, #72	; 0x48
    9294:	9205      	str	r2, [sp, #20]
    9296:	aa11      	add	r2, sp, #68	; 0x44
    9298:	9203      	str	r2, [sp, #12]
    929a:	2223      	movs	r2, #35	; 0x23
    929c:	6023      	str	r3, [r4, #0]
    929e:	9106      	str	r1, [sp, #24]
    92a0:	9301      	str	r3, [sp, #4]
    92a2:	a908      	add	r1, sp, #32
    92a4:	6863      	ldr	r3, [r4, #4]
    92a6:	1852      	adds	r2, r2, r1
    92a8:	9202      	str	r2, [sp, #8]
    92aa:	9300      	str	r3, [sp, #0]
    92ac:	0032      	movs	r2, r6
    92ae:	002b      	movs	r3, r5
    92b0:	9704      	str	r7, [sp, #16]
    92b2:	9809      	ldr	r0, [sp, #36]	; 0x24
    92b4:	f7ff fee4 	bl	9080 <__cvt>
    92b8:	2320      	movs	r3, #32
    92ba:	003a      	movs	r2, r7
    92bc:	0005      	movs	r5, r0
    92be:	439a      	bics	r2, r3
    92c0:	2a47      	cmp	r2, #71	; 0x47
    92c2:	d107      	bne.n	92d4 <_printf_float+0x11c>
    92c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    92c6:	1cda      	adds	r2, r3, #3
    92c8:	db02      	blt.n	92d0 <_printf_float+0x118>
    92ca:	6862      	ldr	r2, [r4, #4]
    92cc:	4293      	cmp	r3, r2
    92ce:	dd5b      	ble.n	9388 <_printf_float+0x1d0>
    92d0:	3f02      	subs	r7, #2
    92d2:	b2ff      	uxtb	r7, r7
    92d4:	9911      	ldr	r1, [sp, #68]	; 0x44
    92d6:	2f65      	cmp	r7, #101	; 0x65
    92d8:	d83b      	bhi.n	9352 <_printf_float+0x19a>
    92da:	0020      	movs	r0, r4
    92dc:	3901      	subs	r1, #1
    92de:	003a      	movs	r2, r7
    92e0:	3050      	adds	r0, #80	; 0x50
    92e2:	9111      	str	r1, [sp, #68]	; 0x44
    92e4:	f7ff ff30 	bl	9148 <__exponent>
    92e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    92ea:	0006      	movs	r6, r0
    92ec:	1883      	adds	r3, r0, r2
    92ee:	6123      	str	r3, [r4, #16]
    92f0:	2a01      	cmp	r2, #1
    92f2:	dc02      	bgt.n	92fa <_printf_float+0x142>
    92f4:	6822      	ldr	r2, [r4, #0]
    92f6:	07d2      	lsls	r2, r2, #31
    92f8:	d501      	bpl.n	92fe <_printf_float+0x146>
    92fa:	3301      	adds	r3, #1
    92fc:	6123      	str	r3, [r4, #16]
    92fe:	2323      	movs	r3, #35	; 0x23
    9300:	aa08      	add	r2, sp, #32
    9302:	189b      	adds	r3, r3, r2
    9304:	781b      	ldrb	r3, [r3, #0]
    9306:	2b00      	cmp	r3, #0
    9308:	d0a8      	beq.n	925c <_printf_float+0xa4>
    930a:	0023      	movs	r3, r4
    930c:	222d      	movs	r2, #45	; 0x2d
    930e:	3343      	adds	r3, #67	; 0x43
    9310:	701a      	strb	r2, [r3, #0]
    9312:	e7a3      	b.n	925c <_printf_float+0xa4>
    9314:	2f67      	cmp	r7, #103	; 0x67
    9316:	d001      	beq.n	931c <_printf_float+0x164>
    9318:	2f47      	cmp	r7, #71	; 0x47
    931a:	d1b7      	bne.n	928c <_printf_float+0xd4>
    931c:	2a00      	cmp	r2, #0
    931e:	d016      	beq.n	934e <_printf_float+0x196>
    9320:	990c      	ldr	r1, [sp, #48]	; 0x30
    9322:	a808      	add	r0, sp, #32
    9324:	430b      	orrs	r3, r1
    9326:	2100      	movs	r1, #0
    9328:	9106      	str	r1, [sp, #24]
    932a:	a912      	add	r1, sp, #72	; 0x48
    932c:	9105      	str	r1, [sp, #20]
    932e:	a911      	add	r1, sp, #68	; 0x44
    9330:	9103      	str	r1, [sp, #12]
    9332:	2123      	movs	r1, #35	; 0x23
    9334:	1809      	adds	r1, r1, r0
    9336:	6023      	str	r3, [r4, #0]
    9338:	9301      	str	r3, [sp, #4]
    933a:	9200      	str	r2, [sp, #0]
    933c:	002b      	movs	r3, r5
    933e:	9704      	str	r7, [sp, #16]
    9340:	9102      	str	r1, [sp, #8]
    9342:	0032      	movs	r2, r6
    9344:	9809      	ldr	r0, [sp, #36]	; 0x24
    9346:	f7ff fe9b 	bl	9080 <__cvt>
    934a:	0005      	movs	r5, r0
    934c:	e7ba      	b.n	92c4 <_printf_float+0x10c>
    934e:	2201      	movs	r2, #1
    9350:	e79b      	b.n	928a <_printf_float+0xd2>
    9352:	2f66      	cmp	r7, #102	; 0x66
    9354:	d119      	bne.n	938a <_printf_float+0x1d2>
    9356:	6863      	ldr	r3, [r4, #4]
    9358:	2900      	cmp	r1, #0
    935a:	dd0c      	ble.n	9376 <_printf_float+0x1be>
    935c:	6121      	str	r1, [r4, #16]
    935e:	2b00      	cmp	r3, #0
    9360:	d102      	bne.n	9368 <_printf_float+0x1b0>
    9362:	6822      	ldr	r2, [r4, #0]
    9364:	07d2      	lsls	r2, r2, #31
    9366:	d502      	bpl.n	936e <_printf_float+0x1b6>
    9368:	3301      	adds	r3, #1
    936a:	185b      	adds	r3, r3, r1
    936c:	6123      	str	r3, [r4, #16]
    936e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9370:	2600      	movs	r6, #0
    9372:	65a3      	str	r3, [r4, #88]	; 0x58
    9374:	e7c3      	b.n	92fe <_printf_float+0x146>
    9376:	2b00      	cmp	r3, #0
    9378:	d103      	bne.n	9382 <_printf_float+0x1ca>
    937a:	2201      	movs	r2, #1
    937c:	6821      	ldr	r1, [r4, #0]
    937e:	4211      	tst	r1, r2
    9380:	d000      	beq.n	9384 <_printf_float+0x1cc>
    9382:	1c9a      	adds	r2, r3, #2
    9384:	6122      	str	r2, [r4, #16]
    9386:	e7f2      	b.n	936e <_printf_float+0x1b6>
    9388:	2767      	movs	r7, #103	; 0x67
    938a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    938c:	9812      	ldr	r0, [sp, #72]	; 0x48
    938e:	4283      	cmp	r3, r0
    9390:	db05      	blt.n	939e <_printf_float+0x1e6>
    9392:	6822      	ldr	r2, [r4, #0]
    9394:	6123      	str	r3, [r4, #16]
    9396:	07d2      	lsls	r2, r2, #31
    9398:	d5e9      	bpl.n	936e <_printf_float+0x1b6>
    939a:	3301      	adds	r3, #1
    939c:	e7e6      	b.n	936c <_printf_float+0x1b4>
    939e:	2201      	movs	r2, #1
    93a0:	2b00      	cmp	r3, #0
    93a2:	dc01      	bgt.n	93a8 <_printf_float+0x1f0>
    93a4:	1892      	adds	r2, r2, r2
    93a6:	1ad2      	subs	r2, r2, r3
    93a8:	1812      	adds	r2, r2, r0
    93aa:	e7eb      	b.n	9384 <_printf_float+0x1cc>
    93ac:	6822      	ldr	r2, [r4, #0]
    93ae:	0553      	lsls	r3, r2, #21
    93b0:	d408      	bmi.n	93c4 <_printf_float+0x20c>
    93b2:	6923      	ldr	r3, [r4, #16]
    93b4:	002a      	movs	r2, r5
    93b6:	990a      	ldr	r1, [sp, #40]	; 0x28
    93b8:	9809      	ldr	r0, [sp, #36]	; 0x24
    93ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    93bc:	47a8      	blx	r5
    93be:	1c43      	adds	r3, r0, #1
    93c0:	d129      	bne.n	9416 <_printf_float+0x25e>
    93c2:	e756      	b.n	9272 <_printf_float+0xba>
    93c4:	2f65      	cmp	r7, #101	; 0x65
    93c6:	d800      	bhi.n	93ca <_printf_float+0x212>
    93c8:	e0dc      	b.n	9584 <_printf_float+0x3cc>
    93ca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    93cc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    93ce:	2200      	movs	r2, #0
    93d0:	2300      	movs	r3, #0
    93d2:	f002 fcf5 	bl	bdc0 <__aeabi_dcmpeq>
    93d6:	2800      	cmp	r0, #0
    93d8:	d035      	beq.n	9446 <_printf_float+0x28e>
    93da:	2301      	movs	r3, #1
    93dc:	4a35      	ldr	r2, [pc, #212]	; (94b4 <_printf_float+0x2fc>)
    93de:	990a      	ldr	r1, [sp, #40]	; 0x28
    93e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    93e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    93e4:	47a8      	blx	r5
    93e6:	1c43      	adds	r3, r0, #1
    93e8:	d100      	bne.n	93ec <_printf_float+0x234>
    93ea:	e742      	b.n	9272 <_printf_float+0xba>
    93ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
    93ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
    93f0:	4293      	cmp	r3, r2
    93f2:	db02      	blt.n	93fa <_printf_float+0x242>
    93f4:	6823      	ldr	r3, [r4, #0]
    93f6:	07db      	lsls	r3, r3, #31
    93f8:	d50d      	bpl.n	9416 <_printf_float+0x25e>
    93fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    93fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9400:	990a      	ldr	r1, [sp, #40]	; 0x28
    9402:	9809      	ldr	r0, [sp, #36]	; 0x24
    9404:	47a8      	blx	r5
    9406:	2500      	movs	r5, #0
    9408:	1c43      	adds	r3, r0, #1
    940a:	d100      	bne.n	940e <_printf_float+0x256>
    940c:	e731      	b.n	9272 <_printf_float+0xba>
    940e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9410:	3b01      	subs	r3, #1
    9412:	429d      	cmp	r5, r3
    9414:	db0b      	blt.n	942e <_printf_float+0x276>
    9416:	6823      	ldr	r3, [r4, #0]
    9418:	2500      	movs	r5, #0
    941a:	079b      	lsls	r3, r3, #30
    941c:	d500      	bpl.n	9420 <_printf_float+0x268>
    941e:	e0fd      	b.n	961c <_printf_float+0x464>
    9420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9422:	68e0      	ldr	r0, [r4, #12]
    9424:	4298      	cmp	r0, r3
    9426:	db00      	blt.n	942a <_printf_float+0x272>
    9428:	e725      	b.n	9276 <_printf_float+0xbe>
    942a:	0018      	movs	r0, r3
    942c:	e723      	b.n	9276 <_printf_float+0xbe>
    942e:	0022      	movs	r2, r4
    9430:	2301      	movs	r3, #1
    9432:	321a      	adds	r2, #26
    9434:	990a      	ldr	r1, [sp, #40]	; 0x28
    9436:	9809      	ldr	r0, [sp, #36]	; 0x24
    9438:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    943a:	47b0      	blx	r6
    943c:	1c43      	adds	r3, r0, #1
    943e:	d100      	bne.n	9442 <_printf_float+0x28a>
    9440:	e717      	b.n	9272 <_printf_float+0xba>
    9442:	3501      	adds	r5, #1
    9444:	e7e3      	b.n	940e <_printf_float+0x256>
    9446:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9448:	2b00      	cmp	r3, #0
    944a:	dc35      	bgt.n	94b8 <_printf_float+0x300>
    944c:	2301      	movs	r3, #1
    944e:	4a19      	ldr	r2, [pc, #100]	; (94b4 <_printf_float+0x2fc>)
    9450:	990a      	ldr	r1, [sp, #40]	; 0x28
    9452:	9809      	ldr	r0, [sp, #36]	; 0x24
    9454:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9456:	47b0      	blx	r6
    9458:	1c43      	adds	r3, r0, #1
    945a:	d100      	bne.n	945e <_printf_float+0x2a6>
    945c:	e709      	b.n	9272 <_printf_float+0xba>
    945e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9460:	2b00      	cmp	r3, #0
    9462:	d105      	bne.n	9470 <_printf_float+0x2b8>
    9464:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9466:	2b00      	cmp	r3, #0
    9468:	d102      	bne.n	9470 <_printf_float+0x2b8>
    946a:	6823      	ldr	r3, [r4, #0]
    946c:	07db      	lsls	r3, r3, #31
    946e:	d5d2      	bpl.n	9416 <_printf_float+0x25e>
    9470:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9474:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9476:	990a      	ldr	r1, [sp, #40]	; 0x28
    9478:	9809      	ldr	r0, [sp, #36]	; 0x24
    947a:	47b0      	blx	r6
    947c:	2600      	movs	r6, #0
    947e:	1c43      	adds	r3, r0, #1
    9480:	d100      	bne.n	9484 <_printf_float+0x2cc>
    9482:	e6f6      	b.n	9272 <_printf_float+0xba>
    9484:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9486:	425b      	negs	r3, r3
    9488:	429e      	cmp	r6, r3
    948a:	db01      	blt.n	9490 <_printf_float+0x2d8>
    948c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    948e:	e791      	b.n	93b4 <_printf_float+0x1fc>
    9490:	0022      	movs	r2, r4
    9492:	2301      	movs	r3, #1
    9494:	321a      	adds	r2, #26
    9496:	990a      	ldr	r1, [sp, #40]	; 0x28
    9498:	9809      	ldr	r0, [sp, #36]	; 0x24
    949a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    949c:	47b8      	blx	r7
    949e:	1c43      	adds	r3, r0, #1
    94a0:	d100      	bne.n	94a4 <_printf_float+0x2ec>
    94a2:	e6e6      	b.n	9272 <_printf_float+0xba>
    94a4:	3601      	adds	r6, #1
    94a6:	e7ed      	b.n	9484 <_printf_float+0x2cc>
    94a8:	7fefffff 	.word	0x7fefffff
    94ac:	0000ece6 	.word	0x0000ece6
    94b0:	0000ece2 	.word	0x0000ece2
    94b4:	0000ecf2 	.word	0x0000ecf2
    94b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
    94ba:	9e12      	ldr	r6, [sp, #72]	; 0x48
    94bc:	429e      	cmp	r6, r3
    94be:	dd00      	ble.n	94c2 <_printf_float+0x30a>
    94c0:	001e      	movs	r6, r3
    94c2:	2e00      	cmp	r6, #0
    94c4:	dc35      	bgt.n	9532 <_printf_float+0x37a>
    94c6:	2300      	movs	r3, #0
    94c8:	930c      	str	r3, [sp, #48]	; 0x30
    94ca:	43f3      	mvns	r3, r6
    94cc:	17db      	asrs	r3, r3, #31
    94ce:	930f      	str	r3, [sp, #60]	; 0x3c
    94d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    94d2:	6da7      	ldr	r7, [r4, #88]	; 0x58
    94d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    94d6:	4033      	ands	r3, r6
    94d8:	1afb      	subs	r3, r7, r3
    94da:	429a      	cmp	r2, r3
    94dc:	db32      	blt.n	9544 <_printf_float+0x38c>
    94de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    94e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    94e2:	4293      	cmp	r3, r2
    94e4:	db3c      	blt.n	9560 <_printf_float+0x3a8>
    94e6:	6823      	ldr	r3, [r4, #0]
    94e8:	07db      	lsls	r3, r3, #31
    94ea:	d439      	bmi.n	9560 <_printf_float+0x3a8>
    94ec:	9e12      	ldr	r6, [sp, #72]	; 0x48
    94ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
    94f0:	1bf3      	subs	r3, r6, r7
    94f2:	1ab6      	subs	r6, r6, r2
    94f4:	429e      	cmp	r6, r3
    94f6:	dd00      	ble.n	94fa <_printf_float+0x342>
    94f8:	001e      	movs	r6, r3
    94fa:	2e00      	cmp	r6, #0
    94fc:	dc39      	bgt.n	9572 <_printf_float+0x3ba>
    94fe:	43f7      	mvns	r7, r6
    9500:	2500      	movs	r5, #0
    9502:	17fb      	asrs	r3, r7, #31
    9504:	930c      	str	r3, [sp, #48]	; 0x30
    9506:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9508:	9b12      	ldr	r3, [sp, #72]	; 0x48
    950a:	990c      	ldr	r1, [sp, #48]	; 0x30
    950c:	1a9b      	subs	r3, r3, r2
    950e:	0032      	movs	r2, r6
    9510:	400a      	ands	r2, r1
    9512:	1a9b      	subs	r3, r3, r2
    9514:	429d      	cmp	r5, r3
    9516:	db00      	blt.n	951a <_printf_float+0x362>
    9518:	e77d      	b.n	9416 <_printf_float+0x25e>
    951a:	0022      	movs	r2, r4
    951c:	2301      	movs	r3, #1
    951e:	321a      	adds	r2, #26
    9520:	990a      	ldr	r1, [sp, #40]	; 0x28
    9522:	9809      	ldr	r0, [sp, #36]	; 0x24
    9524:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9526:	47b8      	blx	r7
    9528:	1c43      	adds	r3, r0, #1
    952a:	d100      	bne.n	952e <_printf_float+0x376>
    952c:	e6a1      	b.n	9272 <_printf_float+0xba>
    952e:	3501      	adds	r5, #1
    9530:	e7e9      	b.n	9506 <_printf_float+0x34e>
    9532:	0033      	movs	r3, r6
    9534:	002a      	movs	r2, r5
    9536:	990a      	ldr	r1, [sp, #40]	; 0x28
    9538:	9809      	ldr	r0, [sp, #36]	; 0x24
    953a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    953c:	47b8      	blx	r7
    953e:	1c43      	adds	r3, r0, #1
    9540:	d1c1      	bne.n	94c6 <_printf_float+0x30e>
    9542:	e696      	b.n	9272 <_printf_float+0xba>
    9544:	0022      	movs	r2, r4
    9546:	2301      	movs	r3, #1
    9548:	321a      	adds	r2, #26
    954a:	990a      	ldr	r1, [sp, #40]	; 0x28
    954c:	9809      	ldr	r0, [sp, #36]	; 0x24
    954e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9550:	47b8      	blx	r7
    9552:	1c43      	adds	r3, r0, #1
    9554:	d100      	bne.n	9558 <_printf_float+0x3a0>
    9556:	e68c      	b.n	9272 <_printf_float+0xba>
    9558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    955a:	3301      	adds	r3, #1
    955c:	930c      	str	r3, [sp, #48]	; 0x30
    955e:	e7b7      	b.n	94d0 <_printf_float+0x318>
    9560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9562:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9564:	990a      	ldr	r1, [sp, #40]	; 0x28
    9566:	9809      	ldr	r0, [sp, #36]	; 0x24
    9568:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    956a:	47b0      	blx	r6
    956c:	1c43      	adds	r3, r0, #1
    956e:	d1bd      	bne.n	94ec <_printf_float+0x334>
    9570:	e67f      	b.n	9272 <_printf_float+0xba>
    9572:	19ea      	adds	r2, r5, r7
    9574:	0033      	movs	r3, r6
    9576:	990a      	ldr	r1, [sp, #40]	; 0x28
    9578:	9809      	ldr	r0, [sp, #36]	; 0x24
    957a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    957c:	47a8      	blx	r5
    957e:	1c43      	adds	r3, r0, #1
    9580:	d1bd      	bne.n	94fe <_printf_float+0x346>
    9582:	e676      	b.n	9272 <_printf_float+0xba>
    9584:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9586:	2b01      	cmp	r3, #1
    9588:	dc02      	bgt.n	9590 <_printf_float+0x3d8>
    958a:	2301      	movs	r3, #1
    958c:	421a      	tst	r2, r3
    958e:	d038      	beq.n	9602 <_printf_float+0x44a>
    9590:	2301      	movs	r3, #1
    9592:	002a      	movs	r2, r5
    9594:	990a      	ldr	r1, [sp, #40]	; 0x28
    9596:	9809      	ldr	r0, [sp, #36]	; 0x24
    9598:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    959a:	47b8      	blx	r7
    959c:	1c43      	adds	r3, r0, #1
    959e:	d100      	bne.n	95a2 <_printf_float+0x3ea>
    95a0:	e667      	b.n	9272 <_printf_float+0xba>
    95a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    95a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    95a6:	990a      	ldr	r1, [sp, #40]	; 0x28
    95a8:	9809      	ldr	r0, [sp, #36]	; 0x24
    95aa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    95ac:	47b8      	blx	r7
    95ae:	1c43      	adds	r3, r0, #1
    95b0:	d100      	bne.n	95b4 <_printf_float+0x3fc>
    95b2:	e65e      	b.n	9272 <_printf_float+0xba>
    95b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    95b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    95b8:	2200      	movs	r2, #0
    95ba:	2300      	movs	r3, #0
    95bc:	f002 fc00 	bl	bdc0 <__aeabi_dcmpeq>
    95c0:	2800      	cmp	r0, #0
    95c2:	d008      	beq.n	95d6 <_printf_float+0x41e>
    95c4:	2500      	movs	r5, #0
    95c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    95c8:	3b01      	subs	r3, #1
    95ca:	429d      	cmp	r5, r3
    95cc:	db0d      	blt.n	95ea <_printf_float+0x432>
    95ce:	0022      	movs	r2, r4
    95d0:	0033      	movs	r3, r6
    95d2:	3250      	adds	r2, #80	; 0x50
    95d4:	e6ef      	b.n	93b6 <_printf_float+0x1fe>
    95d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    95d8:	1c6a      	adds	r2, r5, #1
    95da:	3b01      	subs	r3, #1
    95dc:	990a      	ldr	r1, [sp, #40]	; 0x28
    95de:	9809      	ldr	r0, [sp, #36]	; 0x24
    95e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    95e2:	47a8      	blx	r5
    95e4:	1c43      	adds	r3, r0, #1
    95e6:	d1f2      	bne.n	95ce <_printf_float+0x416>
    95e8:	e643      	b.n	9272 <_printf_float+0xba>
    95ea:	0022      	movs	r2, r4
    95ec:	2301      	movs	r3, #1
    95ee:	321a      	adds	r2, #26
    95f0:	990a      	ldr	r1, [sp, #40]	; 0x28
    95f2:	9809      	ldr	r0, [sp, #36]	; 0x24
    95f4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    95f6:	47b8      	blx	r7
    95f8:	1c43      	adds	r3, r0, #1
    95fa:	d100      	bne.n	95fe <_printf_float+0x446>
    95fc:	e639      	b.n	9272 <_printf_float+0xba>
    95fe:	3501      	adds	r5, #1
    9600:	e7e1      	b.n	95c6 <_printf_float+0x40e>
    9602:	002a      	movs	r2, r5
    9604:	e7ea      	b.n	95dc <_printf_float+0x424>
    9606:	0022      	movs	r2, r4
    9608:	2301      	movs	r3, #1
    960a:	3219      	adds	r2, #25
    960c:	990a      	ldr	r1, [sp, #40]	; 0x28
    960e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9610:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9612:	47b0      	blx	r6
    9614:	1c43      	adds	r3, r0, #1
    9616:	d100      	bne.n	961a <_printf_float+0x462>
    9618:	e62b      	b.n	9272 <_printf_float+0xba>
    961a:	3501      	adds	r5, #1
    961c:	68e3      	ldr	r3, [r4, #12]
    961e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9620:	1a9b      	subs	r3, r3, r2
    9622:	429d      	cmp	r5, r3
    9624:	dbef      	blt.n	9606 <_printf_float+0x44e>
    9626:	e6fb      	b.n	9420 <_printf_float+0x268>
    9628:	0032      	movs	r2, r6
    962a:	002b      	movs	r3, r5
    962c:	0030      	movs	r0, r6
    962e:	0029      	movs	r1, r5
    9630:	f004 fbf6 	bl	de20 <__aeabi_dcmpun>
    9634:	2800      	cmp	r0, #0
    9636:	d100      	bne.n	963a <_printf_float+0x482>
    9638:	e621      	b.n	927e <_printf_float+0xc6>
    963a:	4d03      	ldr	r5, [pc, #12]	; (9648 <_printf_float+0x490>)
    963c:	2f47      	cmp	r7, #71	; 0x47
    963e:	d900      	bls.n	9642 <_printf_float+0x48a>
    9640:	e605      	b.n	924e <_printf_float+0x96>
    9642:	4d02      	ldr	r5, [pc, #8]	; (964c <_printf_float+0x494>)
    9644:	e603      	b.n	924e <_printf_float+0x96>
    9646:	46c0      	nop			; (mov r8, r8)
    9648:	0000ecee 	.word	0x0000ecee
    964c:	0000ecea 	.word	0x0000ecea

00009650 <_printf_common>:
    9650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9652:	0015      	movs	r5, r2
    9654:	9301      	str	r3, [sp, #4]
    9656:	688a      	ldr	r2, [r1, #8]
    9658:	690b      	ldr	r3, [r1, #16]
    965a:	9000      	str	r0, [sp, #0]
    965c:	000c      	movs	r4, r1
    965e:	4293      	cmp	r3, r2
    9660:	da00      	bge.n	9664 <_printf_common+0x14>
    9662:	0013      	movs	r3, r2
    9664:	0022      	movs	r2, r4
    9666:	602b      	str	r3, [r5, #0]
    9668:	3243      	adds	r2, #67	; 0x43
    966a:	7812      	ldrb	r2, [r2, #0]
    966c:	2a00      	cmp	r2, #0
    966e:	d001      	beq.n	9674 <_printf_common+0x24>
    9670:	3301      	adds	r3, #1
    9672:	602b      	str	r3, [r5, #0]
    9674:	6823      	ldr	r3, [r4, #0]
    9676:	069b      	lsls	r3, r3, #26
    9678:	d502      	bpl.n	9680 <_printf_common+0x30>
    967a:	682b      	ldr	r3, [r5, #0]
    967c:	3302      	adds	r3, #2
    967e:	602b      	str	r3, [r5, #0]
    9680:	2706      	movs	r7, #6
    9682:	6823      	ldr	r3, [r4, #0]
    9684:	401f      	ands	r7, r3
    9686:	d027      	beq.n	96d8 <_printf_common+0x88>
    9688:	0023      	movs	r3, r4
    968a:	3343      	adds	r3, #67	; 0x43
    968c:	781b      	ldrb	r3, [r3, #0]
    968e:	1e5a      	subs	r2, r3, #1
    9690:	4193      	sbcs	r3, r2
    9692:	6822      	ldr	r2, [r4, #0]
    9694:	0692      	lsls	r2, r2, #26
    9696:	d430      	bmi.n	96fa <_printf_common+0xaa>
    9698:	0022      	movs	r2, r4
    969a:	9901      	ldr	r1, [sp, #4]
    969c:	3243      	adds	r2, #67	; 0x43
    969e:	9800      	ldr	r0, [sp, #0]
    96a0:	9e08      	ldr	r6, [sp, #32]
    96a2:	47b0      	blx	r6
    96a4:	1c43      	adds	r3, r0, #1
    96a6:	d025      	beq.n	96f4 <_printf_common+0xa4>
    96a8:	2306      	movs	r3, #6
    96aa:	6820      	ldr	r0, [r4, #0]
    96ac:	682a      	ldr	r2, [r5, #0]
    96ae:	68e1      	ldr	r1, [r4, #12]
    96b0:	4003      	ands	r3, r0
    96b2:	2500      	movs	r5, #0
    96b4:	2b04      	cmp	r3, #4
    96b6:	d103      	bne.n	96c0 <_printf_common+0x70>
    96b8:	1a8d      	subs	r5, r1, r2
    96ba:	43eb      	mvns	r3, r5
    96bc:	17db      	asrs	r3, r3, #31
    96be:	401d      	ands	r5, r3
    96c0:	68a3      	ldr	r3, [r4, #8]
    96c2:	6922      	ldr	r2, [r4, #16]
    96c4:	4293      	cmp	r3, r2
    96c6:	dd01      	ble.n	96cc <_printf_common+0x7c>
    96c8:	1a9b      	subs	r3, r3, r2
    96ca:	18ed      	adds	r5, r5, r3
    96cc:	2700      	movs	r7, #0
    96ce:	42bd      	cmp	r5, r7
    96d0:	d120      	bne.n	9714 <_printf_common+0xc4>
    96d2:	2000      	movs	r0, #0
    96d4:	e010      	b.n	96f8 <_printf_common+0xa8>
    96d6:	3701      	adds	r7, #1
    96d8:	68e3      	ldr	r3, [r4, #12]
    96da:	682a      	ldr	r2, [r5, #0]
    96dc:	1a9b      	subs	r3, r3, r2
    96de:	429f      	cmp	r7, r3
    96e0:	dad2      	bge.n	9688 <_printf_common+0x38>
    96e2:	0022      	movs	r2, r4
    96e4:	2301      	movs	r3, #1
    96e6:	3219      	adds	r2, #25
    96e8:	9901      	ldr	r1, [sp, #4]
    96ea:	9800      	ldr	r0, [sp, #0]
    96ec:	9e08      	ldr	r6, [sp, #32]
    96ee:	47b0      	blx	r6
    96f0:	1c43      	adds	r3, r0, #1
    96f2:	d1f0      	bne.n	96d6 <_printf_common+0x86>
    96f4:	2001      	movs	r0, #1
    96f6:	4240      	negs	r0, r0
    96f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    96fa:	2030      	movs	r0, #48	; 0x30
    96fc:	18e1      	adds	r1, r4, r3
    96fe:	3143      	adds	r1, #67	; 0x43
    9700:	7008      	strb	r0, [r1, #0]
    9702:	0021      	movs	r1, r4
    9704:	1c5a      	adds	r2, r3, #1
    9706:	3145      	adds	r1, #69	; 0x45
    9708:	7809      	ldrb	r1, [r1, #0]
    970a:	18a2      	adds	r2, r4, r2
    970c:	3243      	adds	r2, #67	; 0x43
    970e:	3302      	adds	r3, #2
    9710:	7011      	strb	r1, [r2, #0]
    9712:	e7c1      	b.n	9698 <_printf_common+0x48>
    9714:	0022      	movs	r2, r4
    9716:	2301      	movs	r3, #1
    9718:	321a      	adds	r2, #26
    971a:	9901      	ldr	r1, [sp, #4]
    971c:	9800      	ldr	r0, [sp, #0]
    971e:	9e08      	ldr	r6, [sp, #32]
    9720:	47b0      	blx	r6
    9722:	1c43      	adds	r3, r0, #1
    9724:	d0e6      	beq.n	96f4 <_printf_common+0xa4>
    9726:	3701      	adds	r7, #1
    9728:	e7d1      	b.n	96ce <_printf_common+0x7e>
	...

0000972c <_printf_i>:
    972c:	b5f0      	push	{r4, r5, r6, r7, lr}
    972e:	b08b      	sub	sp, #44	; 0x2c
    9730:	9206      	str	r2, [sp, #24]
    9732:	000a      	movs	r2, r1
    9734:	3243      	adds	r2, #67	; 0x43
    9736:	9307      	str	r3, [sp, #28]
    9738:	9005      	str	r0, [sp, #20]
    973a:	9204      	str	r2, [sp, #16]
    973c:	7e0a      	ldrb	r2, [r1, #24]
    973e:	000c      	movs	r4, r1
    9740:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9742:	2a6e      	cmp	r2, #110	; 0x6e
    9744:	d100      	bne.n	9748 <_printf_i+0x1c>
    9746:	e08f      	b.n	9868 <_printf_i+0x13c>
    9748:	d817      	bhi.n	977a <_printf_i+0x4e>
    974a:	2a63      	cmp	r2, #99	; 0x63
    974c:	d02c      	beq.n	97a8 <_printf_i+0x7c>
    974e:	d808      	bhi.n	9762 <_printf_i+0x36>
    9750:	2a00      	cmp	r2, #0
    9752:	d100      	bne.n	9756 <_printf_i+0x2a>
    9754:	e099      	b.n	988a <_printf_i+0x15e>
    9756:	2a58      	cmp	r2, #88	; 0x58
    9758:	d054      	beq.n	9804 <_printf_i+0xd8>
    975a:	0026      	movs	r6, r4
    975c:	3642      	adds	r6, #66	; 0x42
    975e:	7032      	strb	r2, [r6, #0]
    9760:	e029      	b.n	97b6 <_printf_i+0x8a>
    9762:	2a64      	cmp	r2, #100	; 0x64
    9764:	d001      	beq.n	976a <_printf_i+0x3e>
    9766:	2a69      	cmp	r2, #105	; 0x69
    9768:	d1f7      	bne.n	975a <_printf_i+0x2e>
    976a:	6821      	ldr	r1, [r4, #0]
    976c:	681a      	ldr	r2, [r3, #0]
    976e:	0608      	lsls	r0, r1, #24
    9770:	d523      	bpl.n	97ba <_printf_i+0x8e>
    9772:	1d11      	adds	r1, r2, #4
    9774:	6019      	str	r1, [r3, #0]
    9776:	6815      	ldr	r5, [r2, #0]
    9778:	e025      	b.n	97c6 <_printf_i+0x9a>
    977a:	2a73      	cmp	r2, #115	; 0x73
    977c:	d100      	bne.n	9780 <_printf_i+0x54>
    977e:	e088      	b.n	9892 <_printf_i+0x166>
    9780:	d808      	bhi.n	9794 <_printf_i+0x68>
    9782:	2a6f      	cmp	r2, #111	; 0x6f
    9784:	d029      	beq.n	97da <_printf_i+0xae>
    9786:	2a70      	cmp	r2, #112	; 0x70
    9788:	d1e7      	bne.n	975a <_printf_i+0x2e>
    978a:	2220      	movs	r2, #32
    978c:	6809      	ldr	r1, [r1, #0]
    978e:	430a      	orrs	r2, r1
    9790:	6022      	str	r2, [r4, #0]
    9792:	e003      	b.n	979c <_printf_i+0x70>
    9794:	2a75      	cmp	r2, #117	; 0x75
    9796:	d020      	beq.n	97da <_printf_i+0xae>
    9798:	2a78      	cmp	r2, #120	; 0x78
    979a:	d1de      	bne.n	975a <_printf_i+0x2e>
    979c:	0022      	movs	r2, r4
    979e:	2178      	movs	r1, #120	; 0x78
    97a0:	3245      	adds	r2, #69	; 0x45
    97a2:	7011      	strb	r1, [r2, #0]
    97a4:	4a6c      	ldr	r2, [pc, #432]	; (9958 <_printf_i+0x22c>)
    97a6:	e030      	b.n	980a <_printf_i+0xde>
    97a8:	000e      	movs	r6, r1
    97aa:	681a      	ldr	r2, [r3, #0]
    97ac:	3642      	adds	r6, #66	; 0x42
    97ae:	1d11      	adds	r1, r2, #4
    97b0:	6019      	str	r1, [r3, #0]
    97b2:	6813      	ldr	r3, [r2, #0]
    97b4:	7033      	strb	r3, [r6, #0]
    97b6:	2301      	movs	r3, #1
    97b8:	e079      	b.n	98ae <_printf_i+0x182>
    97ba:	0649      	lsls	r1, r1, #25
    97bc:	d5d9      	bpl.n	9772 <_printf_i+0x46>
    97be:	1d11      	adds	r1, r2, #4
    97c0:	6019      	str	r1, [r3, #0]
    97c2:	2300      	movs	r3, #0
    97c4:	5ed5      	ldrsh	r5, [r2, r3]
    97c6:	2d00      	cmp	r5, #0
    97c8:	da03      	bge.n	97d2 <_printf_i+0xa6>
    97ca:	232d      	movs	r3, #45	; 0x2d
    97cc:	9a04      	ldr	r2, [sp, #16]
    97ce:	426d      	negs	r5, r5
    97d0:	7013      	strb	r3, [r2, #0]
    97d2:	4b62      	ldr	r3, [pc, #392]	; (995c <_printf_i+0x230>)
    97d4:	270a      	movs	r7, #10
    97d6:	9303      	str	r3, [sp, #12]
    97d8:	e02f      	b.n	983a <_printf_i+0x10e>
    97da:	6820      	ldr	r0, [r4, #0]
    97dc:	6819      	ldr	r1, [r3, #0]
    97de:	0605      	lsls	r5, r0, #24
    97e0:	d503      	bpl.n	97ea <_printf_i+0xbe>
    97e2:	1d08      	adds	r0, r1, #4
    97e4:	6018      	str	r0, [r3, #0]
    97e6:	680d      	ldr	r5, [r1, #0]
    97e8:	e005      	b.n	97f6 <_printf_i+0xca>
    97ea:	0640      	lsls	r0, r0, #25
    97ec:	d5f9      	bpl.n	97e2 <_printf_i+0xb6>
    97ee:	680d      	ldr	r5, [r1, #0]
    97f0:	1d08      	adds	r0, r1, #4
    97f2:	6018      	str	r0, [r3, #0]
    97f4:	b2ad      	uxth	r5, r5
    97f6:	4b59      	ldr	r3, [pc, #356]	; (995c <_printf_i+0x230>)
    97f8:	2708      	movs	r7, #8
    97fa:	9303      	str	r3, [sp, #12]
    97fc:	2a6f      	cmp	r2, #111	; 0x6f
    97fe:	d018      	beq.n	9832 <_printf_i+0x106>
    9800:	270a      	movs	r7, #10
    9802:	e016      	b.n	9832 <_printf_i+0x106>
    9804:	3145      	adds	r1, #69	; 0x45
    9806:	700a      	strb	r2, [r1, #0]
    9808:	4a54      	ldr	r2, [pc, #336]	; (995c <_printf_i+0x230>)
    980a:	9203      	str	r2, [sp, #12]
    980c:	681a      	ldr	r2, [r3, #0]
    980e:	6821      	ldr	r1, [r4, #0]
    9810:	1d10      	adds	r0, r2, #4
    9812:	6018      	str	r0, [r3, #0]
    9814:	6815      	ldr	r5, [r2, #0]
    9816:	0608      	lsls	r0, r1, #24
    9818:	d522      	bpl.n	9860 <_printf_i+0x134>
    981a:	07cb      	lsls	r3, r1, #31
    981c:	d502      	bpl.n	9824 <_printf_i+0xf8>
    981e:	2320      	movs	r3, #32
    9820:	4319      	orrs	r1, r3
    9822:	6021      	str	r1, [r4, #0]
    9824:	2710      	movs	r7, #16
    9826:	2d00      	cmp	r5, #0
    9828:	d103      	bne.n	9832 <_printf_i+0x106>
    982a:	2320      	movs	r3, #32
    982c:	6822      	ldr	r2, [r4, #0]
    982e:	439a      	bics	r2, r3
    9830:	6022      	str	r2, [r4, #0]
    9832:	0023      	movs	r3, r4
    9834:	2200      	movs	r2, #0
    9836:	3343      	adds	r3, #67	; 0x43
    9838:	701a      	strb	r2, [r3, #0]
    983a:	6863      	ldr	r3, [r4, #4]
    983c:	60a3      	str	r3, [r4, #8]
    983e:	2b00      	cmp	r3, #0
    9840:	db5c      	blt.n	98fc <_printf_i+0x1d0>
    9842:	2204      	movs	r2, #4
    9844:	6821      	ldr	r1, [r4, #0]
    9846:	4391      	bics	r1, r2
    9848:	6021      	str	r1, [r4, #0]
    984a:	2d00      	cmp	r5, #0
    984c:	d158      	bne.n	9900 <_printf_i+0x1d4>
    984e:	9e04      	ldr	r6, [sp, #16]
    9850:	2b00      	cmp	r3, #0
    9852:	d064      	beq.n	991e <_printf_i+0x1f2>
    9854:	0026      	movs	r6, r4
    9856:	9b03      	ldr	r3, [sp, #12]
    9858:	3642      	adds	r6, #66	; 0x42
    985a:	781b      	ldrb	r3, [r3, #0]
    985c:	7033      	strb	r3, [r6, #0]
    985e:	e05e      	b.n	991e <_printf_i+0x1f2>
    9860:	0648      	lsls	r0, r1, #25
    9862:	d5da      	bpl.n	981a <_printf_i+0xee>
    9864:	b2ad      	uxth	r5, r5
    9866:	e7d8      	b.n	981a <_printf_i+0xee>
    9868:	6809      	ldr	r1, [r1, #0]
    986a:	681a      	ldr	r2, [r3, #0]
    986c:	0608      	lsls	r0, r1, #24
    986e:	d505      	bpl.n	987c <_printf_i+0x150>
    9870:	1d11      	adds	r1, r2, #4
    9872:	6019      	str	r1, [r3, #0]
    9874:	6813      	ldr	r3, [r2, #0]
    9876:	6962      	ldr	r2, [r4, #20]
    9878:	601a      	str	r2, [r3, #0]
    987a:	e006      	b.n	988a <_printf_i+0x15e>
    987c:	0649      	lsls	r1, r1, #25
    987e:	d5f7      	bpl.n	9870 <_printf_i+0x144>
    9880:	1d11      	adds	r1, r2, #4
    9882:	6019      	str	r1, [r3, #0]
    9884:	6813      	ldr	r3, [r2, #0]
    9886:	8aa2      	ldrh	r2, [r4, #20]
    9888:	801a      	strh	r2, [r3, #0]
    988a:	2300      	movs	r3, #0
    988c:	9e04      	ldr	r6, [sp, #16]
    988e:	6123      	str	r3, [r4, #16]
    9890:	e054      	b.n	993c <_printf_i+0x210>
    9892:	681a      	ldr	r2, [r3, #0]
    9894:	1d11      	adds	r1, r2, #4
    9896:	6019      	str	r1, [r3, #0]
    9898:	6816      	ldr	r6, [r2, #0]
    989a:	2100      	movs	r1, #0
    989c:	6862      	ldr	r2, [r4, #4]
    989e:	0030      	movs	r0, r6
    98a0:	f001 fbfe 	bl	b0a0 <memchr>
    98a4:	2800      	cmp	r0, #0
    98a6:	d001      	beq.n	98ac <_printf_i+0x180>
    98a8:	1b80      	subs	r0, r0, r6
    98aa:	6060      	str	r0, [r4, #4]
    98ac:	6863      	ldr	r3, [r4, #4]
    98ae:	6123      	str	r3, [r4, #16]
    98b0:	2300      	movs	r3, #0
    98b2:	9a04      	ldr	r2, [sp, #16]
    98b4:	7013      	strb	r3, [r2, #0]
    98b6:	e041      	b.n	993c <_printf_i+0x210>
    98b8:	6923      	ldr	r3, [r4, #16]
    98ba:	0032      	movs	r2, r6
    98bc:	9906      	ldr	r1, [sp, #24]
    98be:	9805      	ldr	r0, [sp, #20]
    98c0:	9d07      	ldr	r5, [sp, #28]
    98c2:	47a8      	blx	r5
    98c4:	1c43      	adds	r3, r0, #1
    98c6:	d043      	beq.n	9950 <_printf_i+0x224>
    98c8:	6823      	ldr	r3, [r4, #0]
    98ca:	2500      	movs	r5, #0
    98cc:	079b      	lsls	r3, r3, #30
    98ce:	d40f      	bmi.n	98f0 <_printf_i+0x1c4>
    98d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    98d2:	68e0      	ldr	r0, [r4, #12]
    98d4:	4298      	cmp	r0, r3
    98d6:	da3d      	bge.n	9954 <_printf_i+0x228>
    98d8:	0018      	movs	r0, r3
    98da:	e03b      	b.n	9954 <_printf_i+0x228>
    98dc:	0022      	movs	r2, r4
    98de:	2301      	movs	r3, #1
    98e0:	3219      	adds	r2, #25
    98e2:	9906      	ldr	r1, [sp, #24]
    98e4:	9805      	ldr	r0, [sp, #20]
    98e6:	9e07      	ldr	r6, [sp, #28]
    98e8:	47b0      	blx	r6
    98ea:	1c43      	adds	r3, r0, #1
    98ec:	d030      	beq.n	9950 <_printf_i+0x224>
    98ee:	3501      	adds	r5, #1
    98f0:	68e3      	ldr	r3, [r4, #12]
    98f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    98f4:	1a9b      	subs	r3, r3, r2
    98f6:	429d      	cmp	r5, r3
    98f8:	dbf0      	blt.n	98dc <_printf_i+0x1b0>
    98fa:	e7e9      	b.n	98d0 <_printf_i+0x1a4>
    98fc:	2d00      	cmp	r5, #0
    98fe:	d0a9      	beq.n	9854 <_printf_i+0x128>
    9900:	9e04      	ldr	r6, [sp, #16]
    9902:	0028      	movs	r0, r5
    9904:	0039      	movs	r1, r7
    9906:	f002 f95b 	bl	bbc0 <__aeabi_uidivmod>
    990a:	9b03      	ldr	r3, [sp, #12]
    990c:	3e01      	subs	r6, #1
    990e:	5c5b      	ldrb	r3, [r3, r1]
    9910:	0028      	movs	r0, r5
    9912:	7033      	strb	r3, [r6, #0]
    9914:	0039      	movs	r1, r7
    9916:	f002 f8cd 	bl	bab4 <__udivsi3>
    991a:	1e05      	subs	r5, r0, #0
    991c:	d1f1      	bne.n	9902 <_printf_i+0x1d6>
    991e:	2f08      	cmp	r7, #8
    9920:	d109      	bne.n	9936 <_printf_i+0x20a>
    9922:	6823      	ldr	r3, [r4, #0]
    9924:	07db      	lsls	r3, r3, #31
    9926:	d506      	bpl.n	9936 <_printf_i+0x20a>
    9928:	6863      	ldr	r3, [r4, #4]
    992a:	6922      	ldr	r2, [r4, #16]
    992c:	4293      	cmp	r3, r2
    992e:	dc02      	bgt.n	9936 <_printf_i+0x20a>
    9930:	2330      	movs	r3, #48	; 0x30
    9932:	3e01      	subs	r6, #1
    9934:	7033      	strb	r3, [r6, #0]
    9936:	9b04      	ldr	r3, [sp, #16]
    9938:	1b9b      	subs	r3, r3, r6
    993a:	6123      	str	r3, [r4, #16]
    993c:	9b07      	ldr	r3, [sp, #28]
    993e:	aa09      	add	r2, sp, #36	; 0x24
    9940:	9300      	str	r3, [sp, #0]
    9942:	0021      	movs	r1, r4
    9944:	9b06      	ldr	r3, [sp, #24]
    9946:	9805      	ldr	r0, [sp, #20]
    9948:	f7ff fe82 	bl	9650 <_printf_common>
    994c:	1c43      	adds	r3, r0, #1
    994e:	d1b3      	bne.n	98b8 <_printf_i+0x18c>
    9950:	2001      	movs	r0, #1
    9952:	4240      	negs	r0, r0
    9954:	b00b      	add	sp, #44	; 0x2c
    9956:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9958:	0000ed05 	.word	0x0000ed05
    995c:	0000ecf4 	.word	0x0000ecf4

00009960 <iprintf>:
    9960:	b40f      	push	{r0, r1, r2, r3}
    9962:	4b0b      	ldr	r3, [pc, #44]	; (9990 <iprintf+0x30>)
    9964:	b513      	push	{r0, r1, r4, lr}
    9966:	681c      	ldr	r4, [r3, #0]
    9968:	2c00      	cmp	r4, #0
    996a:	d005      	beq.n	9978 <iprintf+0x18>
    996c:	69a3      	ldr	r3, [r4, #24]
    996e:	2b00      	cmp	r3, #0
    9970:	d102      	bne.n	9978 <iprintf+0x18>
    9972:	0020      	movs	r0, r4
    9974:	f001 fa86 	bl	ae84 <__sinit>
    9978:	ab05      	add	r3, sp, #20
    997a:	9a04      	ldr	r2, [sp, #16]
    997c:	68a1      	ldr	r1, [r4, #8]
    997e:	0020      	movs	r0, r4
    9980:	9301      	str	r3, [sp, #4]
    9982:	f001 feb3 	bl	b6ec <_vfiprintf_r>
    9986:	bc16      	pop	{r1, r2, r4}
    9988:	bc08      	pop	{r3}
    998a:	b004      	add	sp, #16
    998c:	4718      	bx	r3
    998e:	46c0      	nop			; (mov r8, r8)
    9990:	20000078 	.word	0x20000078

00009994 <_puts_r>:
    9994:	b570      	push	{r4, r5, r6, lr}
    9996:	0005      	movs	r5, r0
    9998:	000e      	movs	r6, r1
    999a:	2800      	cmp	r0, #0
    999c:	d004      	beq.n	99a8 <_puts_r+0x14>
    999e:	6983      	ldr	r3, [r0, #24]
    99a0:	2b00      	cmp	r3, #0
    99a2:	d101      	bne.n	99a8 <_puts_r+0x14>
    99a4:	f001 fa6e 	bl	ae84 <__sinit>
    99a8:	69ab      	ldr	r3, [r5, #24]
    99aa:	68ac      	ldr	r4, [r5, #8]
    99ac:	2b00      	cmp	r3, #0
    99ae:	d102      	bne.n	99b6 <_puts_r+0x22>
    99b0:	0028      	movs	r0, r5
    99b2:	f001 fa67 	bl	ae84 <__sinit>
    99b6:	4b24      	ldr	r3, [pc, #144]	; (9a48 <_puts_r+0xb4>)
    99b8:	429c      	cmp	r4, r3
    99ba:	d10f      	bne.n	99dc <_puts_r+0x48>
    99bc:	686c      	ldr	r4, [r5, #4]
    99be:	89a3      	ldrh	r3, [r4, #12]
    99c0:	071b      	lsls	r3, r3, #28
    99c2:	d502      	bpl.n	99ca <_puts_r+0x36>
    99c4:	6923      	ldr	r3, [r4, #16]
    99c6:	2b00      	cmp	r3, #0
    99c8:	d120      	bne.n	9a0c <_puts_r+0x78>
    99ca:	0021      	movs	r1, r4
    99cc:	0028      	movs	r0, r5
    99ce:	f000 fa7f 	bl	9ed0 <__swsetup_r>
    99d2:	2800      	cmp	r0, #0
    99d4:	d01a      	beq.n	9a0c <_puts_r+0x78>
    99d6:	2001      	movs	r0, #1
    99d8:	4240      	negs	r0, r0
    99da:	bd70      	pop	{r4, r5, r6, pc}
    99dc:	4b1b      	ldr	r3, [pc, #108]	; (9a4c <_puts_r+0xb8>)
    99de:	429c      	cmp	r4, r3
    99e0:	d101      	bne.n	99e6 <_puts_r+0x52>
    99e2:	68ac      	ldr	r4, [r5, #8]
    99e4:	e7eb      	b.n	99be <_puts_r+0x2a>
    99e6:	4b1a      	ldr	r3, [pc, #104]	; (9a50 <_puts_r+0xbc>)
    99e8:	429c      	cmp	r4, r3
    99ea:	d1e8      	bne.n	99be <_puts_r+0x2a>
    99ec:	68ec      	ldr	r4, [r5, #12]
    99ee:	e7e6      	b.n	99be <_puts_r+0x2a>
    99f0:	3b01      	subs	r3, #1
    99f2:	3601      	adds	r6, #1
    99f4:	60a3      	str	r3, [r4, #8]
    99f6:	2b00      	cmp	r3, #0
    99f8:	da04      	bge.n	9a04 <_puts_r+0x70>
    99fa:	69a2      	ldr	r2, [r4, #24]
    99fc:	4293      	cmp	r3, r2
    99fe:	db16      	blt.n	9a2e <_puts_r+0x9a>
    9a00:	290a      	cmp	r1, #10
    9a02:	d014      	beq.n	9a2e <_puts_r+0x9a>
    9a04:	6823      	ldr	r3, [r4, #0]
    9a06:	1c5a      	adds	r2, r3, #1
    9a08:	6022      	str	r2, [r4, #0]
    9a0a:	7019      	strb	r1, [r3, #0]
    9a0c:	7831      	ldrb	r1, [r6, #0]
    9a0e:	68a3      	ldr	r3, [r4, #8]
    9a10:	2900      	cmp	r1, #0
    9a12:	d1ed      	bne.n	99f0 <_puts_r+0x5c>
    9a14:	3b01      	subs	r3, #1
    9a16:	60a3      	str	r3, [r4, #8]
    9a18:	2b00      	cmp	r3, #0
    9a1a:	da0f      	bge.n	9a3c <_puts_r+0xa8>
    9a1c:	0022      	movs	r2, r4
    9a1e:	310a      	adds	r1, #10
    9a20:	0028      	movs	r0, r5
    9a22:	f000 f9f3 	bl	9e0c <__swbuf_r>
    9a26:	1c43      	adds	r3, r0, #1
    9a28:	d0d5      	beq.n	99d6 <_puts_r+0x42>
    9a2a:	200a      	movs	r0, #10
    9a2c:	e7d5      	b.n	99da <_puts_r+0x46>
    9a2e:	0022      	movs	r2, r4
    9a30:	0028      	movs	r0, r5
    9a32:	f000 f9eb 	bl	9e0c <__swbuf_r>
    9a36:	1c43      	adds	r3, r0, #1
    9a38:	d1e8      	bne.n	9a0c <_puts_r+0x78>
    9a3a:	e7cc      	b.n	99d6 <_puts_r+0x42>
    9a3c:	200a      	movs	r0, #10
    9a3e:	6823      	ldr	r3, [r4, #0]
    9a40:	1c5a      	adds	r2, r3, #1
    9a42:	6022      	str	r2, [r4, #0]
    9a44:	7018      	strb	r0, [r3, #0]
    9a46:	e7c8      	b.n	99da <_puts_r+0x46>
    9a48:	0000ee44 	.word	0x0000ee44
    9a4c:	0000ee64 	.word	0x0000ee64
    9a50:	0000ee24 	.word	0x0000ee24

00009a54 <puts>:
    9a54:	b510      	push	{r4, lr}
    9a56:	4b03      	ldr	r3, [pc, #12]	; (9a64 <puts+0x10>)
    9a58:	0001      	movs	r1, r0
    9a5a:	6818      	ldr	r0, [r3, #0]
    9a5c:	f7ff ff9a 	bl	9994 <_puts_r>
    9a60:	bd10      	pop	{r4, pc}
    9a62:	46c0      	nop			; (mov r8, r8)
    9a64:	20000078 	.word	0x20000078

00009a68 <_sbrk_r>:
    9a68:	2300      	movs	r3, #0
    9a6a:	b570      	push	{r4, r5, r6, lr}
    9a6c:	4c06      	ldr	r4, [pc, #24]	; (9a88 <_sbrk_r+0x20>)
    9a6e:	0005      	movs	r5, r0
    9a70:	0008      	movs	r0, r1
    9a72:	6023      	str	r3, [r4, #0]
    9a74:	f7fd f8b8 	bl	6be8 <_sbrk>
    9a78:	1c43      	adds	r3, r0, #1
    9a7a:	d103      	bne.n	9a84 <_sbrk_r+0x1c>
    9a7c:	6823      	ldr	r3, [r4, #0]
    9a7e:	2b00      	cmp	r3, #0
    9a80:	d000      	beq.n	9a84 <_sbrk_r+0x1c>
    9a82:	602b      	str	r3, [r5, #0]
    9a84:	bd70      	pop	{r4, r5, r6, pc}
    9a86:	46c0      	nop			; (mov r8, r8)
    9a88:	20000450 	.word	0x20000450

00009a8c <setbuf>:
    9a8c:	424a      	negs	r2, r1
    9a8e:	414a      	adcs	r2, r1
    9a90:	2380      	movs	r3, #128	; 0x80
    9a92:	b510      	push	{r4, lr}
    9a94:	0052      	lsls	r2, r2, #1
    9a96:	00db      	lsls	r3, r3, #3
    9a98:	f000 f802 	bl	9aa0 <setvbuf>
    9a9c:	bd10      	pop	{r4, pc}
	...

00009aa0 <setvbuf>:
    9aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9aa2:	001d      	movs	r5, r3
    9aa4:	4b4f      	ldr	r3, [pc, #316]	; (9be4 <setvbuf+0x144>)
    9aa6:	b085      	sub	sp, #20
    9aa8:	681e      	ldr	r6, [r3, #0]
    9aaa:	0004      	movs	r4, r0
    9aac:	000f      	movs	r7, r1
    9aae:	9200      	str	r2, [sp, #0]
    9ab0:	2e00      	cmp	r6, #0
    9ab2:	d005      	beq.n	9ac0 <setvbuf+0x20>
    9ab4:	69b3      	ldr	r3, [r6, #24]
    9ab6:	2b00      	cmp	r3, #0
    9ab8:	d102      	bne.n	9ac0 <setvbuf+0x20>
    9aba:	0030      	movs	r0, r6
    9abc:	f001 f9e2 	bl	ae84 <__sinit>
    9ac0:	4b49      	ldr	r3, [pc, #292]	; (9be8 <setvbuf+0x148>)
    9ac2:	429c      	cmp	r4, r3
    9ac4:	d150      	bne.n	9b68 <setvbuf+0xc8>
    9ac6:	6874      	ldr	r4, [r6, #4]
    9ac8:	9b00      	ldr	r3, [sp, #0]
    9aca:	2b02      	cmp	r3, #2
    9acc:	d005      	beq.n	9ada <setvbuf+0x3a>
    9ace:	2b01      	cmp	r3, #1
    9ad0:	d900      	bls.n	9ad4 <setvbuf+0x34>
    9ad2:	e084      	b.n	9bde <setvbuf+0x13e>
    9ad4:	2d00      	cmp	r5, #0
    9ad6:	da00      	bge.n	9ada <setvbuf+0x3a>
    9ad8:	e081      	b.n	9bde <setvbuf+0x13e>
    9ada:	0021      	movs	r1, r4
    9adc:	0030      	movs	r0, r6
    9ade:	f001 f963 	bl	ada8 <_fflush_r>
    9ae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9ae4:	2900      	cmp	r1, #0
    9ae6:	d008      	beq.n	9afa <setvbuf+0x5a>
    9ae8:	0023      	movs	r3, r4
    9aea:	3344      	adds	r3, #68	; 0x44
    9aec:	4299      	cmp	r1, r3
    9aee:	d002      	beq.n	9af6 <setvbuf+0x56>
    9af0:	0030      	movs	r0, r6
    9af2:	f7ff fa1d 	bl	8f30 <_free_r>
    9af6:	2300      	movs	r3, #0
    9af8:	6363      	str	r3, [r4, #52]	; 0x34
    9afa:	2300      	movs	r3, #0
    9afc:	61a3      	str	r3, [r4, #24]
    9afe:	6063      	str	r3, [r4, #4]
    9b00:	89a3      	ldrh	r3, [r4, #12]
    9b02:	061b      	lsls	r3, r3, #24
    9b04:	d503      	bpl.n	9b0e <setvbuf+0x6e>
    9b06:	6921      	ldr	r1, [r4, #16]
    9b08:	0030      	movs	r0, r6
    9b0a:	f7ff fa11 	bl	8f30 <_free_r>
    9b0e:	89a3      	ldrh	r3, [r4, #12]
    9b10:	4a36      	ldr	r2, [pc, #216]	; (9bec <setvbuf+0x14c>)
    9b12:	4013      	ands	r3, r2
    9b14:	81a3      	strh	r3, [r4, #12]
    9b16:	9b00      	ldr	r3, [sp, #0]
    9b18:	2b02      	cmp	r3, #2
    9b1a:	d05a      	beq.n	9bd2 <setvbuf+0x132>
    9b1c:	ab03      	add	r3, sp, #12
    9b1e:	aa02      	add	r2, sp, #8
    9b20:	0021      	movs	r1, r4
    9b22:	0030      	movs	r0, r6
    9b24:	f001 fa50 	bl	afc8 <__swhatbuf_r>
    9b28:	89a3      	ldrh	r3, [r4, #12]
    9b2a:	4318      	orrs	r0, r3
    9b2c:	81a0      	strh	r0, [r4, #12]
    9b2e:	2d00      	cmp	r5, #0
    9b30:	d124      	bne.n	9b7c <setvbuf+0xdc>
    9b32:	9d02      	ldr	r5, [sp, #8]
    9b34:	0028      	movs	r0, r5
    9b36:	f7ff f9cd 	bl	8ed4 <malloc>
    9b3a:	9501      	str	r5, [sp, #4]
    9b3c:	1e07      	subs	r7, r0, #0
    9b3e:	d142      	bne.n	9bc6 <setvbuf+0x126>
    9b40:	9b02      	ldr	r3, [sp, #8]
    9b42:	9301      	str	r3, [sp, #4]
    9b44:	42ab      	cmp	r3, r5
    9b46:	d139      	bne.n	9bbc <setvbuf+0x11c>
    9b48:	2001      	movs	r0, #1
    9b4a:	4240      	negs	r0, r0
    9b4c:	2302      	movs	r3, #2
    9b4e:	89a2      	ldrh	r2, [r4, #12]
    9b50:	4313      	orrs	r3, r2
    9b52:	81a3      	strh	r3, [r4, #12]
    9b54:	2300      	movs	r3, #0
    9b56:	60a3      	str	r3, [r4, #8]
    9b58:	0023      	movs	r3, r4
    9b5a:	3347      	adds	r3, #71	; 0x47
    9b5c:	6023      	str	r3, [r4, #0]
    9b5e:	6123      	str	r3, [r4, #16]
    9b60:	2301      	movs	r3, #1
    9b62:	6163      	str	r3, [r4, #20]
    9b64:	b005      	add	sp, #20
    9b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b68:	4b21      	ldr	r3, [pc, #132]	; (9bf0 <setvbuf+0x150>)
    9b6a:	429c      	cmp	r4, r3
    9b6c:	d101      	bne.n	9b72 <setvbuf+0xd2>
    9b6e:	68b4      	ldr	r4, [r6, #8]
    9b70:	e7aa      	b.n	9ac8 <setvbuf+0x28>
    9b72:	4b20      	ldr	r3, [pc, #128]	; (9bf4 <setvbuf+0x154>)
    9b74:	429c      	cmp	r4, r3
    9b76:	d1a7      	bne.n	9ac8 <setvbuf+0x28>
    9b78:	68f4      	ldr	r4, [r6, #12]
    9b7a:	e7a5      	b.n	9ac8 <setvbuf+0x28>
    9b7c:	2f00      	cmp	r7, #0
    9b7e:	d0d9      	beq.n	9b34 <setvbuf+0x94>
    9b80:	69b3      	ldr	r3, [r6, #24]
    9b82:	2b00      	cmp	r3, #0
    9b84:	d102      	bne.n	9b8c <setvbuf+0xec>
    9b86:	0030      	movs	r0, r6
    9b88:	f001 f97c 	bl	ae84 <__sinit>
    9b8c:	9b00      	ldr	r3, [sp, #0]
    9b8e:	2b01      	cmp	r3, #1
    9b90:	d103      	bne.n	9b9a <setvbuf+0xfa>
    9b92:	89a3      	ldrh	r3, [r4, #12]
    9b94:	9a00      	ldr	r2, [sp, #0]
    9b96:	431a      	orrs	r2, r3
    9b98:	81a2      	strh	r2, [r4, #12]
    9b9a:	2008      	movs	r0, #8
    9b9c:	89a3      	ldrh	r3, [r4, #12]
    9b9e:	6027      	str	r7, [r4, #0]
    9ba0:	6127      	str	r7, [r4, #16]
    9ba2:	6165      	str	r5, [r4, #20]
    9ba4:	4018      	ands	r0, r3
    9ba6:	d018      	beq.n	9bda <setvbuf+0x13a>
    9ba8:	2001      	movs	r0, #1
    9baa:	4018      	ands	r0, r3
    9bac:	2300      	movs	r3, #0
    9bae:	4298      	cmp	r0, r3
    9bb0:	d011      	beq.n	9bd6 <setvbuf+0x136>
    9bb2:	426d      	negs	r5, r5
    9bb4:	60a3      	str	r3, [r4, #8]
    9bb6:	61a5      	str	r5, [r4, #24]
    9bb8:	0018      	movs	r0, r3
    9bba:	e7d3      	b.n	9b64 <setvbuf+0xc4>
    9bbc:	9801      	ldr	r0, [sp, #4]
    9bbe:	f7ff f989 	bl	8ed4 <malloc>
    9bc2:	1e07      	subs	r7, r0, #0
    9bc4:	d0c0      	beq.n	9b48 <setvbuf+0xa8>
    9bc6:	2380      	movs	r3, #128	; 0x80
    9bc8:	89a2      	ldrh	r2, [r4, #12]
    9bca:	9d01      	ldr	r5, [sp, #4]
    9bcc:	4313      	orrs	r3, r2
    9bce:	81a3      	strh	r3, [r4, #12]
    9bd0:	e7d6      	b.n	9b80 <setvbuf+0xe0>
    9bd2:	2000      	movs	r0, #0
    9bd4:	e7ba      	b.n	9b4c <setvbuf+0xac>
    9bd6:	60a5      	str	r5, [r4, #8]
    9bd8:	e7c4      	b.n	9b64 <setvbuf+0xc4>
    9bda:	60a0      	str	r0, [r4, #8]
    9bdc:	e7c2      	b.n	9b64 <setvbuf+0xc4>
    9bde:	2001      	movs	r0, #1
    9be0:	4240      	negs	r0, r0
    9be2:	e7bf      	b.n	9b64 <setvbuf+0xc4>
    9be4:	20000078 	.word	0x20000078
    9be8:	0000ee44 	.word	0x0000ee44
    9bec:	fffff35c 	.word	0xfffff35c
    9bf0:	0000ee64 	.word	0x0000ee64
    9bf4:	0000ee24 	.word	0x0000ee24

00009bf8 <strcmp>:
    9bf8:	7802      	ldrb	r2, [r0, #0]
    9bfa:	780b      	ldrb	r3, [r1, #0]
    9bfc:	2a00      	cmp	r2, #0
    9bfe:	d003      	beq.n	9c08 <strcmp+0x10>
    9c00:	3001      	adds	r0, #1
    9c02:	3101      	adds	r1, #1
    9c04:	429a      	cmp	r2, r3
    9c06:	d0f7      	beq.n	9bf8 <strcmp>
    9c08:	1ad0      	subs	r0, r2, r3
    9c0a:	4770      	bx	lr

00009c0c <strcpy>:
    9c0c:	1c03      	adds	r3, r0, #0
    9c0e:	780a      	ldrb	r2, [r1, #0]
    9c10:	3101      	adds	r1, #1
    9c12:	701a      	strb	r2, [r3, #0]
    9c14:	3301      	adds	r3, #1
    9c16:	2a00      	cmp	r2, #0
    9c18:	d1f9      	bne.n	9c0e <strcpy+0x2>
    9c1a:	4770      	bx	lr

00009c1c <strlen>:
    9c1c:	2300      	movs	r3, #0
    9c1e:	5cc2      	ldrb	r2, [r0, r3]
    9c20:	3301      	adds	r3, #1
    9c22:	2a00      	cmp	r2, #0
    9c24:	d1fb      	bne.n	9c1e <strlen+0x2>
    9c26:	1e58      	subs	r0, r3, #1
    9c28:	4770      	bx	lr
	...

00009c2c <strtok>:
    9c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c2e:	4b12      	ldr	r3, [pc, #72]	; (9c78 <strtok+0x4c>)
    9c30:	0006      	movs	r6, r0
    9c32:	681d      	ldr	r5, [r3, #0]
    9c34:	000f      	movs	r7, r1
    9c36:	6dac      	ldr	r4, [r5, #88]	; 0x58
    9c38:	2c00      	cmp	r4, #0
    9c3a:	d116      	bne.n	9c6a <strtok+0x3e>
    9c3c:	2050      	movs	r0, #80	; 0x50
    9c3e:	f7ff f949 	bl	8ed4 <malloc>
    9c42:	65a8      	str	r0, [r5, #88]	; 0x58
    9c44:	6004      	str	r4, [r0, #0]
    9c46:	6044      	str	r4, [r0, #4]
    9c48:	6084      	str	r4, [r0, #8]
    9c4a:	60c4      	str	r4, [r0, #12]
    9c4c:	6104      	str	r4, [r0, #16]
    9c4e:	6144      	str	r4, [r0, #20]
    9c50:	6184      	str	r4, [r0, #24]
    9c52:	6284      	str	r4, [r0, #40]	; 0x28
    9c54:	62c4      	str	r4, [r0, #44]	; 0x2c
    9c56:	6304      	str	r4, [r0, #48]	; 0x30
    9c58:	6344      	str	r4, [r0, #52]	; 0x34
    9c5a:	6384      	str	r4, [r0, #56]	; 0x38
    9c5c:	63c4      	str	r4, [r0, #60]	; 0x3c
    9c5e:	6404      	str	r4, [r0, #64]	; 0x40
    9c60:	6444      	str	r4, [r0, #68]	; 0x44
    9c62:	6484      	str	r4, [r0, #72]	; 0x48
    9c64:	64c4      	str	r4, [r0, #76]	; 0x4c
    9c66:	7704      	strb	r4, [r0, #28]
    9c68:	6244      	str	r4, [r0, #36]	; 0x24
    9c6a:	6daa      	ldr	r2, [r5, #88]	; 0x58
    9c6c:	0039      	movs	r1, r7
    9c6e:	0030      	movs	r0, r6
    9c70:	2301      	movs	r3, #1
    9c72:	f000 f803 	bl	9c7c <__strtok_r>
    9c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c78:	20000078 	.word	0x20000078

00009c7c <__strtok_r>:
    9c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c7e:	2800      	cmp	r0, #0
    9c80:	d104      	bne.n	9c8c <__strtok_r+0x10>
    9c82:	6810      	ldr	r0, [r2, #0]
    9c84:	2800      	cmp	r0, #0
    9c86:	d101      	bne.n	9c8c <__strtok_r+0x10>
    9c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c8a:	0020      	movs	r0, r4
    9c8c:	000e      	movs	r6, r1
    9c8e:	7805      	ldrb	r5, [r0, #0]
    9c90:	1c44      	adds	r4, r0, #1
    9c92:	7837      	ldrb	r7, [r6, #0]
    9c94:	2f00      	cmp	r7, #0
    9c96:	d104      	bne.n	9ca2 <__strtok_r+0x26>
    9c98:	2d00      	cmp	r5, #0
    9c9a:	d110      	bne.n	9cbe <__strtok_r+0x42>
    9c9c:	6015      	str	r5, [r2, #0]
    9c9e:	0028      	movs	r0, r5
    9ca0:	e7f2      	b.n	9c88 <__strtok_r+0xc>
    9ca2:	3601      	adds	r6, #1
    9ca4:	42bd      	cmp	r5, r7
    9ca6:	d1f4      	bne.n	9c92 <__strtok_r+0x16>
    9ca8:	2b00      	cmp	r3, #0
    9caa:	d1ee      	bne.n	9c8a <__strtok_r+0xe>
    9cac:	6014      	str	r4, [r2, #0]
    9cae:	7003      	strb	r3, [r0, #0]
    9cb0:	e7ea      	b.n	9c88 <__strtok_r+0xc>
    9cb2:	0033      	movs	r3, r6
    9cb4:	e00e      	b.n	9cd4 <__strtok_r+0x58>
    9cb6:	3501      	adds	r5, #1
    9cb8:	001c      	movs	r4, r3
    9cba:	2f00      	cmp	r7, #0
    9cbc:	d102      	bne.n	9cc4 <__strtok_r+0x48>
    9cbe:	000d      	movs	r5, r1
    9cc0:	7826      	ldrb	r6, [r4, #0]
    9cc2:	1c63      	adds	r3, r4, #1
    9cc4:	782f      	ldrb	r7, [r5, #0]
    9cc6:	42be      	cmp	r6, r7
    9cc8:	d1f5      	bne.n	9cb6 <__strtok_r+0x3a>
    9cca:	2e00      	cmp	r6, #0
    9ccc:	d0f1      	beq.n	9cb2 <__strtok_r+0x36>
    9cce:	2400      	movs	r4, #0
    9cd0:	1e59      	subs	r1, r3, #1
    9cd2:	700c      	strb	r4, [r1, #0]
    9cd4:	6013      	str	r3, [r2, #0]
    9cd6:	e7d7      	b.n	9c88 <__strtok_r+0xc>

00009cd8 <_strtol_l.isra.0>:
    9cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cda:	001f      	movs	r7, r3
    9cdc:	000e      	movs	r6, r1
    9cde:	b087      	sub	sp, #28
    9ce0:	9005      	str	r0, [sp, #20]
    9ce2:	9103      	str	r1, [sp, #12]
    9ce4:	9202      	str	r2, [sp, #8]
    9ce6:	980c      	ldr	r0, [sp, #48]	; 0x30
    9ce8:	7834      	ldrb	r4, [r6, #0]
    9cea:	f7ff f8e1 	bl	8eb0 <__locale_ctype_ptr_l>
    9cee:	2208      	movs	r2, #8
    9cf0:	1900      	adds	r0, r0, r4
    9cf2:	7843      	ldrb	r3, [r0, #1]
    9cf4:	1c75      	adds	r5, r6, #1
    9cf6:	4013      	ands	r3, r2
    9cf8:	d10c      	bne.n	9d14 <_strtol_l.isra.0+0x3c>
    9cfa:	2c2d      	cmp	r4, #45	; 0x2d
    9cfc:	d10c      	bne.n	9d18 <_strtol_l.isra.0+0x40>
    9cfe:	3301      	adds	r3, #1
    9d00:	782c      	ldrb	r4, [r5, #0]
    9d02:	9301      	str	r3, [sp, #4]
    9d04:	1cb5      	adds	r5, r6, #2
    9d06:	2f00      	cmp	r7, #0
    9d08:	d00c      	beq.n	9d24 <_strtol_l.isra.0+0x4c>
    9d0a:	2f10      	cmp	r7, #16
    9d0c:	d114      	bne.n	9d38 <_strtol_l.isra.0+0x60>
    9d0e:	2c30      	cmp	r4, #48	; 0x30
    9d10:	d00a      	beq.n	9d28 <_strtol_l.isra.0+0x50>
    9d12:	e011      	b.n	9d38 <_strtol_l.isra.0+0x60>
    9d14:	002e      	movs	r6, r5
    9d16:	e7e6      	b.n	9ce6 <_strtol_l.isra.0+0xe>
    9d18:	9301      	str	r3, [sp, #4]
    9d1a:	2c2b      	cmp	r4, #43	; 0x2b
    9d1c:	d1f3      	bne.n	9d06 <_strtol_l.isra.0+0x2e>
    9d1e:	782c      	ldrb	r4, [r5, #0]
    9d20:	1cb5      	adds	r5, r6, #2
    9d22:	e7f0      	b.n	9d06 <_strtol_l.isra.0+0x2e>
    9d24:	2c30      	cmp	r4, #48	; 0x30
    9d26:	d12f      	bne.n	9d88 <_strtol_l.isra.0+0xb0>
    9d28:	2220      	movs	r2, #32
    9d2a:	782b      	ldrb	r3, [r5, #0]
    9d2c:	4393      	bics	r3, r2
    9d2e:	2b58      	cmp	r3, #88	; 0x58
    9d30:	d151      	bne.n	9dd6 <_strtol_l.isra.0+0xfe>
    9d32:	2710      	movs	r7, #16
    9d34:	786c      	ldrb	r4, [r5, #1]
    9d36:	3502      	adds	r5, #2
    9d38:	9b01      	ldr	r3, [sp, #4]
    9d3a:	4a29      	ldr	r2, [pc, #164]	; (9de0 <_strtol_l.isra.0+0x108>)
    9d3c:	0039      	movs	r1, r7
    9d3e:	189e      	adds	r6, r3, r2
    9d40:	0030      	movs	r0, r6
    9d42:	f001 ff3d 	bl	bbc0 <__aeabi_uidivmod>
    9d46:	0030      	movs	r0, r6
    9d48:	9104      	str	r1, [sp, #16]
    9d4a:	0039      	movs	r1, r7
    9d4c:	f001 feb2 	bl	bab4 <__udivsi3>
    9d50:	2101      	movs	r1, #1
    9d52:	2300      	movs	r3, #0
    9d54:	4249      	negs	r1, r1
    9d56:	0002      	movs	r2, r0
    9d58:	468c      	mov	ip, r1
    9d5a:	0018      	movs	r0, r3
    9d5c:	0021      	movs	r1, r4
    9d5e:	3930      	subs	r1, #48	; 0x30
    9d60:	2909      	cmp	r1, #9
    9d62:	d813      	bhi.n	9d8c <_strtol_l.isra.0+0xb4>
    9d64:	000c      	movs	r4, r1
    9d66:	42a7      	cmp	r7, r4
    9d68:	dd1c      	ble.n	9da4 <_strtol_l.isra.0+0xcc>
    9d6a:	1c59      	adds	r1, r3, #1
    9d6c:	d009      	beq.n	9d82 <_strtol_l.isra.0+0xaa>
    9d6e:	4663      	mov	r3, ip
    9d70:	4282      	cmp	r2, r0
    9d72:	d306      	bcc.n	9d82 <_strtol_l.isra.0+0xaa>
    9d74:	d102      	bne.n	9d7c <_strtol_l.isra.0+0xa4>
    9d76:	9904      	ldr	r1, [sp, #16]
    9d78:	42a1      	cmp	r1, r4
    9d7a:	db02      	blt.n	9d82 <_strtol_l.isra.0+0xaa>
    9d7c:	2301      	movs	r3, #1
    9d7e:	4378      	muls	r0, r7
    9d80:	1820      	adds	r0, r4, r0
    9d82:	782c      	ldrb	r4, [r5, #0]
    9d84:	3501      	adds	r5, #1
    9d86:	e7e9      	b.n	9d5c <_strtol_l.isra.0+0x84>
    9d88:	270a      	movs	r7, #10
    9d8a:	e7d5      	b.n	9d38 <_strtol_l.isra.0+0x60>
    9d8c:	0021      	movs	r1, r4
    9d8e:	3941      	subs	r1, #65	; 0x41
    9d90:	2919      	cmp	r1, #25
    9d92:	d801      	bhi.n	9d98 <_strtol_l.isra.0+0xc0>
    9d94:	3c37      	subs	r4, #55	; 0x37
    9d96:	e7e6      	b.n	9d66 <_strtol_l.isra.0+0x8e>
    9d98:	0021      	movs	r1, r4
    9d9a:	3961      	subs	r1, #97	; 0x61
    9d9c:	2919      	cmp	r1, #25
    9d9e:	d801      	bhi.n	9da4 <_strtol_l.isra.0+0xcc>
    9da0:	3c57      	subs	r4, #87	; 0x57
    9da2:	e7e0      	b.n	9d66 <_strtol_l.isra.0+0x8e>
    9da4:	1c5a      	adds	r2, r3, #1
    9da6:	d108      	bne.n	9dba <_strtol_l.isra.0+0xe2>
    9da8:	9a05      	ldr	r2, [sp, #20]
    9daa:	3323      	adds	r3, #35	; 0x23
    9dac:	6013      	str	r3, [r2, #0]
    9dae:	9b02      	ldr	r3, [sp, #8]
    9db0:	0030      	movs	r0, r6
    9db2:	2b00      	cmp	r3, #0
    9db4:	d10b      	bne.n	9dce <_strtol_l.isra.0+0xf6>
    9db6:	b007      	add	sp, #28
    9db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9dba:	9a01      	ldr	r2, [sp, #4]
    9dbc:	2a00      	cmp	r2, #0
    9dbe:	d000      	beq.n	9dc2 <_strtol_l.isra.0+0xea>
    9dc0:	4240      	negs	r0, r0
    9dc2:	9a02      	ldr	r2, [sp, #8]
    9dc4:	2a00      	cmp	r2, #0
    9dc6:	d0f6      	beq.n	9db6 <_strtol_l.isra.0+0xde>
    9dc8:	9a03      	ldr	r2, [sp, #12]
    9dca:	2b00      	cmp	r3, #0
    9dcc:	d000      	beq.n	9dd0 <_strtol_l.isra.0+0xf8>
    9dce:	1e6a      	subs	r2, r5, #1
    9dd0:	9b02      	ldr	r3, [sp, #8]
    9dd2:	601a      	str	r2, [r3, #0]
    9dd4:	e7ef      	b.n	9db6 <_strtol_l.isra.0+0xde>
    9dd6:	2430      	movs	r4, #48	; 0x30
    9dd8:	2f00      	cmp	r7, #0
    9dda:	d1ad      	bne.n	9d38 <_strtol_l.isra.0+0x60>
    9ddc:	3708      	adds	r7, #8
    9dde:	e7ab      	b.n	9d38 <_strtol_l.isra.0+0x60>
    9de0:	7fffffff 	.word	0x7fffffff

00009de4 <strtol>:
    9de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9de6:	0013      	movs	r3, r2
    9de8:	4a06      	ldr	r2, [pc, #24]	; (9e04 <strtol+0x20>)
    9dea:	0005      	movs	r5, r0
    9dec:	6810      	ldr	r0, [r2, #0]
    9dee:	6a04      	ldr	r4, [r0, #32]
    9df0:	2c00      	cmp	r4, #0
    9df2:	d100      	bne.n	9df6 <strtol+0x12>
    9df4:	4c04      	ldr	r4, [pc, #16]	; (9e08 <strtol+0x24>)
    9df6:	000a      	movs	r2, r1
    9df8:	9400      	str	r4, [sp, #0]
    9dfa:	0029      	movs	r1, r5
    9dfc:	f7ff ff6c 	bl	9cd8 <_strtol_l.isra.0>
    9e00:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9e02:	46c0      	nop			; (mov r8, r8)
    9e04:	20000078 	.word	0x20000078
    9e08:	200000dc 	.word	0x200000dc

00009e0c <__swbuf_r>:
    9e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e0e:	0005      	movs	r5, r0
    9e10:	000e      	movs	r6, r1
    9e12:	0014      	movs	r4, r2
    9e14:	2800      	cmp	r0, #0
    9e16:	d004      	beq.n	9e22 <__swbuf_r+0x16>
    9e18:	6983      	ldr	r3, [r0, #24]
    9e1a:	2b00      	cmp	r3, #0
    9e1c:	d101      	bne.n	9e22 <__swbuf_r+0x16>
    9e1e:	f001 f831 	bl	ae84 <__sinit>
    9e22:	4b22      	ldr	r3, [pc, #136]	; (9eac <__swbuf_r+0xa0>)
    9e24:	429c      	cmp	r4, r3
    9e26:	d12d      	bne.n	9e84 <__swbuf_r+0x78>
    9e28:	686c      	ldr	r4, [r5, #4]
    9e2a:	69a3      	ldr	r3, [r4, #24]
    9e2c:	60a3      	str	r3, [r4, #8]
    9e2e:	89a3      	ldrh	r3, [r4, #12]
    9e30:	071b      	lsls	r3, r3, #28
    9e32:	d531      	bpl.n	9e98 <__swbuf_r+0x8c>
    9e34:	6923      	ldr	r3, [r4, #16]
    9e36:	2b00      	cmp	r3, #0
    9e38:	d02e      	beq.n	9e98 <__swbuf_r+0x8c>
    9e3a:	6823      	ldr	r3, [r4, #0]
    9e3c:	6922      	ldr	r2, [r4, #16]
    9e3e:	b2f7      	uxtb	r7, r6
    9e40:	1a98      	subs	r0, r3, r2
    9e42:	6963      	ldr	r3, [r4, #20]
    9e44:	b2f6      	uxtb	r6, r6
    9e46:	4298      	cmp	r0, r3
    9e48:	db05      	blt.n	9e56 <__swbuf_r+0x4a>
    9e4a:	0021      	movs	r1, r4
    9e4c:	0028      	movs	r0, r5
    9e4e:	f000 ffab 	bl	ada8 <_fflush_r>
    9e52:	2800      	cmp	r0, #0
    9e54:	d126      	bne.n	9ea4 <__swbuf_r+0x98>
    9e56:	68a3      	ldr	r3, [r4, #8]
    9e58:	3001      	adds	r0, #1
    9e5a:	3b01      	subs	r3, #1
    9e5c:	60a3      	str	r3, [r4, #8]
    9e5e:	6823      	ldr	r3, [r4, #0]
    9e60:	1c5a      	adds	r2, r3, #1
    9e62:	6022      	str	r2, [r4, #0]
    9e64:	701f      	strb	r7, [r3, #0]
    9e66:	6963      	ldr	r3, [r4, #20]
    9e68:	4298      	cmp	r0, r3
    9e6a:	d004      	beq.n	9e76 <__swbuf_r+0x6a>
    9e6c:	89a3      	ldrh	r3, [r4, #12]
    9e6e:	07db      	lsls	r3, r3, #31
    9e70:	d51a      	bpl.n	9ea8 <__swbuf_r+0x9c>
    9e72:	2e0a      	cmp	r6, #10
    9e74:	d118      	bne.n	9ea8 <__swbuf_r+0x9c>
    9e76:	0021      	movs	r1, r4
    9e78:	0028      	movs	r0, r5
    9e7a:	f000 ff95 	bl	ada8 <_fflush_r>
    9e7e:	2800      	cmp	r0, #0
    9e80:	d012      	beq.n	9ea8 <__swbuf_r+0x9c>
    9e82:	e00f      	b.n	9ea4 <__swbuf_r+0x98>
    9e84:	4b0a      	ldr	r3, [pc, #40]	; (9eb0 <__swbuf_r+0xa4>)
    9e86:	429c      	cmp	r4, r3
    9e88:	d101      	bne.n	9e8e <__swbuf_r+0x82>
    9e8a:	68ac      	ldr	r4, [r5, #8]
    9e8c:	e7cd      	b.n	9e2a <__swbuf_r+0x1e>
    9e8e:	4b09      	ldr	r3, [pc, #36]	; (9eb4 <__swbuf_r+0xa8>)
    9e90:	429c      	cmp	r4, r3
    9e92:	d1ca      	bne.n	9e2a <__swbuf_r+0x1e>
    9e94:	68ec      	ldr	r4, [r5, #12]
    9e96:	e7c8      	b.n	9e2a <__swbuf_r+0x1e>
    9e98:	0021      	movs	r1, r4
    9e9a:	0028      	movs	r0, r5
    9e9c:	f000 f818 	bl	9ed0 <__swsetup_r>
    9ea0:	2800      	cmp	r0, #0
    9ea2:	d0ca      	beq.n	9e3a <__swbuf_r+0x2e>
    9ea4:	2601      	movs	r6, #1
    9ea6:	4276      	negs	r6, r6
    9ea8:	0030      	movs	r0, r6
    9eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9eac:	0000ee44 	.word	0x0000ee44
    9eb0:	0000ee64 	.word	0x0000ee64
    9eb4:	0000ee24 	.word	0x0000ee24

00009eb8 <__ascii_wctomb>:
    9eb8:	1e0b      	subs	r3, r1, #0
    9eba:	d004      	beq.n	9ec6 <__ascii_wctomb+0xe>
    9ebc:	2aff      	cmp	r2, #255	; 0xff
    9ebe:	d904      	bls.n	9eca <__ascii_wctomb+0x12>
    9ec0:	238a      	movs	r3, #138	; 0x8a
    9ec2:	6003      	str	r3, [r0, #0]
    9ec4:	3b8b      	subs	r3, #139	; 0x8b
    9ec6:	0018      	movs	r0, r3
    9ec8:	4770      	bx	lr
    9eca:	700a      	strb	r2, [r1, #0]
    9ecc:	2301      	movs	r3, #1
    9ece:	e7fa      	b.n	9ec6 <__ascii_wctomb+0xe>

00009ed0 <__swsetup_r>:
    9ed0:	4b36      	ldr	r3, [pc, #216]	; (9fac <__swsetup_r+0xdc>)
    9ed2:	b570      	push	{r4, r5, r6, lr}
    9ed4:	681d      	ldr	r5, [r3, #0]
    9ed6:	0006      	movs	r6, r0
    9ed8:	000c      	movs	r4, r1
    9eda:	2d00      	cmp	r5, #0
    9edc:	d005      	beq.n	9eea <__swsetup_r+0x1a>
    9ede:	69ab      	ldr	r3, [r5, #24]
    9ee0:	2b00      	cmp	r3, #0
    9ee2:	d102      	bne.n	9eea <__swsetup_r+0x1a>
    9ee4:	0028      	movs	r0, r5
    9ee6:	f000 ffcd 	bl	ae84 <__sinit>
    9eea:	4b31      	ldr	r3, [pc, #196]	; (9fb0 <__swsetup_r+0xe0>)
    9eec:	429c      	cmp	r4, r3
    9eee:	d10f      	bne.n	9f10 <__swsetup_r+0x40>
    9ef0:	686c      	ldr	r4, [r5, #4]
    9ef2:	230c      	movs	r3, #12
    9ef4:	5ee2      	ldrsh	r2, [r4, r3]
    9ef6:	b293      	uxth	r3, r2
    9ef8:	0719      	lsls	r1, r3, #28
    9efa:	d42d      	bmi.n	9f58 <__swsetup_r+0x88>
    9efc:	06d9      	lsls	r1, r3, #27
    9efe:	d411      	bmi.n	9f24 <__swsetup_r+0x54>
    9f00:	2309      	movs	r3, #9
    9f02:	2001      	movs	r0, #1
    9f04:	6033      	str	r3, [r6, #0]
    9f06:	3337      	adds	r3, #55	; 0x37
    9f08:	4313      	orrs	r3, r2
    9f0a:	81a3      	strh	r3, [r4, #12]
    9f0c:	4240      	negs	r0, r0
    9f0e:	bd70      	pop	{r4, r5, r6, pc}
    9f10:	4b28      	ldr	r3, [pc, #160]	; (9fb4 <__swsetup_r+0xe4>)
    9f12:	429c      	cmp	r4, r3
    9f14:	d101      	bne.n	9f1a <__swsetup_r+0x4a>
    9f16:	68ac      	ldr	r4, [r5, #8]
    9f18:	e7eb      	b.n	9ef2 <__swsetup_r+0x22>
    9f1a:	4b27      	ldr	r3, [pc, #156]	; (9fb8 <__swsetup_r+0xe8>)
    9f1c:	429c      	cmp	r4, r3
    9f1e:	d1e8      	bne.n	9ef2 <__swsetup_r+0x22>
    9f20:	68ec      	ldr	r4, [r5, #12]
    9f22:	e7e6      	b.n	9ef2 <__swsetup_r+0x22>
    9f24:	075b      	lsls	r3, r3, #29
    9f26:	d513      	bpl.n	9f50 <__swsetup_r+0x80>
    9f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9f2a:	2900      	cmp	r1, #0
    9f2c:	d008      	beq.n	9f40 <__swsetup_r+0x70>
    9f2e:	0023      	movs	r3, r4
    9f30:	3344      	adds	r3, #68	; 0x44
    9f32:	4299      	cmp	r1, r3
    9f34:	d002      	beq.n	9f3c <__swsetup_r+0x6c>
    9f36:	0030      	movs	r0, r6
    9f38:	f7fe fffa 	bl	8f30 <_free_r>
    9f3c:	2300      	movs	r3, #0
    9f3e:	6363      	str	r3, [r4, #52]	; 0x34
    9f40:	2224      	movs	r2, #36	; 0x24
    9f42:	89a3      	ldrh	r3, [r4, #12]
    9f44:	4393      	bics	r3, r2
    9f46:	81a3      	strh	r3, [r4, #12]
    9f48:	2300      	movs	r3, #0
    9f4a:	6063      	str	r3, [r4, #4]
    9f4c:	6923      	ldr	r3, [r4, #16]
    9f4e:	6023      	str	r3, [r4, #0]
    9f50:	2308      	movs	r3, #8
    9f52:	89a2      	ldrh	r2, [r4, #12]
    9f54:	4313      	orrs	r3, r2
    9f56:	81a3      	strh	r3, [r4, #12]
    9f58:	6923      	ldr	r3, [r4, #16]
    9f5a:	2b00      	cmp	r3, #0
    9f5c:	d10b      	bne.n	9f76 <__swsetup_r+0xa6>
    9f5e:	21a0      	movs	r1, #160	; 0xa0
    9f60:	2280      	movs	r2, #128	; 0x80
    9f62:	89a3      	ldrh	r3, [r4, #12]
    9f64:	0089      	lsls	r1, r1, #2
    9f66:	0092      	lsls	r2, r2, #2
    9f68:	400b      	ands	r3, r1
    9f6a:	4293      	cmp	r3, r2
    9f6c:	d003      	beq.n	9f76 <__swsetup_r+0xa6>
    9f6e:	0021      	movs	r1, r4
    9f70:	0030      	movs	r0, r6
    9f72:	f001 f851 	bl	b018 <__smakebuf_r>
    9f76:	2301      	movs	r3, #1
    9f78:	89a2      	ldrh	r2, [r4, #12]
    9f7a:	4013      	ands	r3, r2
    9f7c:	d011      	beq.n	9fa2 <__swsetup_r+0xd2>
    9f7e:	2300      	movs	r3, #0
    9f80:	60a3      	str	r3, [r4, #8]
    9f82:	6963      	ldr	r3, [r4, #20]
    9f84:	425b      	negs	r3, r3
    9f86:	61a3      	str	r3, [r4, #24]
    9f88:	2000      	movs	r0, #0
    9f8a:	6923      	ldr	r3, [r4, #16]
    9f8c:	4283      	cmp	r3, r0
    9f8e:	d1be      	bne.n	9f0e <__swsetup_r+0x3e>
    9f90:	230c      	movs	r3, #12
    9f92:	5ee2      	ldrsh	r2, [r4, r3]
    9f94:	0613      	lsls	r3, r2, #24
    9f96:	d5ba      	bpl.n	9f0e <__swsetup_r+0x3e>
    9f98:	2340      	movs	r3, #64	; 0x40
    9f9a:	4313      	orrs	r3, r2
    9f9c:	81a3      	strh	r3, [r4, #12]
    9f9e:	3801      	subs	r0, #1
    9fa0:	e7b5      	b.n	9f0e <__swsetup_r+0x3e>
    9fa2:	0792      	lsls	r2, r2, #30
    9fa4:	d400      	bmi.n	9fa8 <__swsetup_r+0xd8>
    9fa6:	6963      	ldr	r3, [r4, #20]
    9fa8:	60a3      	str	r3, [r4, #8]
    9faa:	e7ed      	b.n	9f88 <__swsetup_r+0xb8>
    9fac:	20000078 	.word	0x20000078
    9fb0:	0000ee44 	.word	0x0000ee44
    9fb4:	0000ee64 	.word	0x0000ee64
    9fb8:	0000ee24 	.word	0x0000ee24

00009fbc <quorem>:
    9fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fbe:	6903      	ldr	r3, [r0, #16]
    9fc0:	690c      	ldr	r4, [r1, #16]
    9fc2:	b089      	sub	sp, #36	; 0x24
    9fc4:	0007      	movs	r7, r0
    9fc6:	9105      	str	r1, [sp, #20]
    9fc8:	2600      	movs	r6, #0
    9fca:	429c      	cmp	r4, r3
    9fcc:	dc6d      	bgt.n	a0aa <quorem+0xee>
    9fce:	000b      	movs	r3, r1
    9fd0:	3c01      	subs	r4, #1
    9fd2:	3314      	adds	r3, #20
    9fd4:	00a5      	lsls	r5, r4, #2
    9fd6:	9303      	str	r3, [sp, #12]
    9fd8:	195b      	adds	r3, r3, r5
    9fda:	9304      	str	r3, [sp, #16]
    9fdc:	0003      	movs	r3, r0
    9fde:	3314      	adds	r3, #20
    9fe0:	9302      	str	r3, [sp, #8]
    9fe2:	195d      	adds	r5, r3, r5
    9fe4:	9b04      	ldr	r3, [sp, #16]
    9fe6:	6828      	ldr	r0, [r5, #0]
    9fe8:	681b      	ldr	r3, [r3, #0]
    9fea:	1c59      	adds	r1, r3, #1
    9fec:	9301      	str	r3, [sp, #4]
    9fee:	f001 fd61 	bl	bab4 <__udivsi3>
    9ff2:	9001      	str	r0, [sp, #4]
    9ff4:	42b0      	cmp	r0, r6
    9ff6:	d02d      	beq.n	a054 <quorem+0x98>
    9ff8:	9b03      	ldr	r3, [sp, #12]
    9ffa:	9802      	ldr	r0, [sp, #8]
    9ffc:	469c      	mov	ip, r3
    9ffe:	9606      	str	r6, [sp, #24]
    a000:	4662      	mov	r2, ip
    a002:	ca08      	ldmia	r2!, {r3}
    a004:	4694      	mov	ip, r2
    a006:	9a01      	ldr	r2, [sp, #4]
    a008:	b299      	uxth	r1, r3
    a00a:	4351      	muls	r1, r2
    a00c:	0c1b      	lsrs	r3, r3, #16
    a00e:	4353      	muls	r3, r2
    a010:	1989      	adds	r1, r1, r6
    a012:	0c0a      	lsrs	r2, r1, #16
    a014:	189b      	adds	r3, r3, r2
    a016:	9307      	str	r3, [sp, #28]
    a018:	8802      	ldrh	r2, [r0, #0]
    a01a:	0c1e      	lsrs	r6, r3, #16
    a01c:	9b06      	ldr	r3, [sp, #24]
    a01e:	b289      	uxth	r1, r1
    a020:	18d2      	adds	r2, r2, r3
    a022:	6803      	ldr	r3, [r0, #0]
    a024:	1a52      	subs	r2, r2, r1
    a026:	0c19      	lsrs	r1, r3, #16
    a028:	466b      	mov	r3, sp
    a02a:	8b9b      	ldrh	r3, [r3, #28]
    a02c:	1acb      	subs	r3, r1, r3
    a02e:	1411      	asrs	r1, r2, #16
    a030:	185b      	adds	r3, r3, r1
    a032:	1419      	asrs	r1, r3, #16
    a034:	b292      	uxth	r2, r2
    a036:	041b      	lsls	r3, r3, #16
    a038:	431a      	orrs	r2, r3
    a03a:	9b04      	ldr	r3, [sp, #16]
    a03c:	9106      	str	r1, [sp, #24]
    a03e:	c004      	stmia	r0!, {r2}
    a040:	4563      	cmp	r3, ip
    a042:	d2dd      	bcs.n	a000 <quorem+0x44>
    a044:	682b      	ldr	r3, [r5, #0]
    a046:	2b00      	cmp	r3, #0
    a048:	d104      	bne.n	a054 <quorem+0x98>
    a04a:	9b02      	ldr	r3, [sp, #8]
    a04c:	3d04      	subs	r5, #4
    a04e:	42ab      	cmp	r3, r5
    a050:	d32e      	bcc.n	a0b0 <quorem+0xf4>
    a052:	613c      	str	r4, [r7, #16]
    a054:	9905      	ldr	r1, [sp, #20]
    a056:	0038      	movs	r0, r7
    a058:	f001 fa41 	bl	b4de <__mcmp>
    a05c:	2800      	cmp	r0, #0
    a05e:	db23      	blt.n	a0a8 <quorem+0xec>
    a060:	2500      	movs	r5, #0
    a062:	9b01      	ldr	r3, [sp, #4]
    a064:	9802      	ldr	r0, [sp, #8]
    a066:	3301      	adds	r3, #1
    a068:	9903      	ldr	r1, [sp, #12]
    a06a:	9301      	str	r3, [sp, #4]
    a06c:	c908      	ldmia	r1!, {r3}
    a06e:	8802      	ldrh	r2, [r0, #0]
    a070:	1955      	adds	r5, r2, r5
    a072:	b29a      	uxth	r2, r3
    a074:	1aaa      	subs	r2, r5, r2
    a076:	6805      	ldr	r5, [r0, #0]
    a078:	0c1b      	lsrs	r3, r3, #16
    a07a:	0c2d      	lsrs	r5, r5, #16
    a07c:	1aeb      	subs	r3, r5, r3
    a07e:	1415      	asrs	r5, r2, #16
    a080:	195b      	adds	r3, r3, r5
    a082:	141d      	asrs	r5, r3, #16
    a084:	b292      	uxth	r2, r2
    a086:	041b      	lsls	r3, r3, #16
    a088:	4313      	orrs	r3, r2
    a08a:	c008      	stmia	r0!, {r3}
    a08c:	9b04      	ldr	r3, [sp, #16]
    a08e:	428b      	cmp	r3, r1
    a090:	d2ec      	bcs.n	a06c <quorem+0xb0>
    a092:	9a02      	ldr	r2, [sp, #8]
    a094:	00a3      	lsls	r3, r4, #2
    a096:	18d3      	adds	r3, r2, r3
    a098:	681a      	ldr	r2, [r3, #0]
    a09a:	2a00      	cmp	r2, #0
    a09c:	d104      	bne.n	a0a8 <quorem+0xec>
    a09e:	9a02      	ldr	r2, [sp, #8]
    a0a0:	3b04      	subs	r3, #4
    a0a2:	429a      	cmp	r2, r3
    a0a4:	d309      	bcc.n	a0ba <quorem+0xfe>
    a0a6:	613c      	str	r4, [r7, #16]
    a0a8:	9e01      	ldr	r6, [sp, #4]
    a0aa:	0030      	movs	r0, r6
    a0ac:	b009      	add	sp, #36	; 0x24
    a0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0b0:	682b      	ldr	r3, [r5, #0]
    a0b2:	2b00      	cmp	r3, #0
    a0b4:	d1cd      	bne.n	a052 <quorem+0x96>
    a0b6:	3c01      	subs	r4, #1
    a0b8:	e7c7      	b.n	a04a <quorem+0x8e>
    a0ba:	681a      	ldr	r2, [r3, #0]
    a0bc:	2a00      	cmp	r2, #0
    a0be:	d1f2      	bne.n	a0a6 <quorem+0xea>
    a0c0:	3c01      	subs	r4, #1
    a0c2:	e7ec      	b.n	a09e <quorem+0xe2>

0000a0c4 <_dtoa_r>:
    a0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0c6:	0016      	movs	r6, r2
    a0c8:	001f      	movs	r7, r3
    a0ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
    a0cc:	b09d      	sub	sp, #116	; 0x74
    a0ce:	9004      	str	r0, [sp, #16]
    a0d0:	9d25      	ldr	r5, [sp, #148]	; 0x94
    a0d2:	9606      	str	r6, [sp, #24]
    a0d4:	9707      	str	r7, [sp, #28]
    a0d6:	2c00      	cmp	r4, #0
    a0d8:	d108      	bne.n	a0ec <_dtoa_r+0x28>
    a0da:	2010      	movs	r0, #16
    a0dc:	f7fe fefa 	bl	8ed4 <malloc>
    a0e0:	9b04      	ldr	r3, [sp, #16]
    a0e2:	6258      	str	r0, [r3, #36]	; 0x24
    a0e4:	6044      	str	r4, [r0, #4]
    a0e6:	6084      	str	r4, [r0, #8]
    a0e8:	6004      	str	r4, [r0, #0]
    a0ea:	60c4      	str	r4, [r0, #12]
    a0ec:	9b04      	ldr	r3, [sp, #16]
    a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a0f0:	6819      	ldr	r1, [r3, #0]
    a0f2:	2900      	cmp	r1, #0
    a0f4:	d00b      	beq.n	a10e <_dtoa_r+0x4a>
    a0f6:	685a      	ldr	r2, [r3, #4]
    a0f8:	2301      	movs	r3, #1
    a0fa:	4093      	lsls	r3, r2
    a0fc:	604a      	str	r2, [r1, #4]
    a0fe:	608b      	str	r3, [r1, #8]
    a100:	9804      	ldr	r0, [sp, #16]
    a102:	f001 f812 	bl	b12a <_Bfree>
    a106:	2200      	movs	r2, #0
    a108:	9b04      	ldr	r3, [sp, #16]
    a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a10c:	601a      	str	r2, [r3, #0]
    a10e:	9b07      	ldr	r3, [sp, #28]
    a110:	2b00      	cmp	r3, #0
    a112:	da1f      	bge.n	a154 <_dtoa_r+0x90>
    a114:	2301      	movs	r3, #1
    a116:	602b      	str	r3, [r5, #0]
    a118:	007b      	lsls	r3, r7, #1
    a11a:	085b      	lsrs	r3, r3, #1
    a11c:	9307      	str	r3, [sp, #28]
    a11e:	9c07      	ldr	r4, [sp, #28]
    a120:	4bb7      	ldr	r3, [pc, #732]	; (a400 <_dtoa_r+0x33c>)
    a122:	0022      	movs	r2, r4
    a124:	9319      	str	r3, [sp, #100]	; 0x64
    a126:	401a      	ands	r2, r3
    a128:	429a      	cmp	r2, r3
    a12a:	d116      	bne.n	a15a <_dtoa_r+0x96>
    a12c:	4bb5      	ldr	r3, [pc, #724]	; (a404 <_dtoa_r+0x340>)
    a12e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a130:	6013      	str	r3, [r2, #0]
    a132:	9b06      	ldr	r3, [sp, #24]
    a134:	2b00      	cmp	r3, #0
    a136:	d103      	bne.n	a140 <_dtoa_r+0x7c>
    a138:	0324      	lsls	r4, r4, #12
    a13a:	d101      	bne.n	a140 <_dtoa_r+0x7c>
    a13c:	f000 fd91 	bl	ac62 <_dtoa_r+0xb9e>
    a140:	4bb1      	ldr	r3, [pc, #708]	; (a408 <_dtoa_r+0x344>)
    a142:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a144:	930a      	str	r3, [sp, #40]	; 0x28
    a146:	4bb1      	ldr	r3, [pc, #708]	; (a40c <_dtoa_r+0x348>)
    a148:	2a00      	cmp	r2, #0
    a14a:	d001      	beq.n	a150 <_dtoa_r+0x8c>
    a14c:	f000 fd8f 	bl	ac6e <_dtoa_r+0xbaa>
    a150:	f000 fd8f 	bl	ac72 <_dtoa_r+0xbae>
    a154:	2300      	movs	r3, #0
    a156:	602b      	str	r3, [r5, #0]
    a158:	e7e1      	b.n	a11e <_dtoa_r+0x5a>
    a15a:	9e06      	ldr	r6, [sp, #24]
    a15c:	9f07      	ldr	r7, [sp, #28]
    a15e:	2200      	movs	r2, #0
    a160:	2300      	movs	r3, #0
    a162:	0030      	movs	r0, r6
    a164:	0039      	movs	r1, r7
    a166:	f001 fe2b 	bl	bdc0 <__aeabi_dcmpeq>
    a16a:	1e05      	subs	r5, r0, #0
    a16c:	d00e      	beq.n	a18c <_dtoa_r+0xc8>
    a16e:	2301      	movs	r3, #1
    a170:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a172:	6013      	str	r3, [r2, #0]
    a174:	4ba6      	ldr	r3, [pc, #664]	; (a410 <_dtoa_r+0x34c>)
    a176:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a178:	930a      	str	r3, [sp, #40]	; 0x28
    a17a:	2a00      	cmp	r2, #0
    a17c:	d101      	bne.n	a182 <_dtoa_r+0xbe>
    a17e:	f000 fd78 	bl	ac72 <_dtoa_r+0xbae>
    a182:	4aa4      	ldr	r2, [pc, #656]	; (a414 <_dtoa_r+0x350>)
    a184:	9926      	ldr	r1, [sp, #152]	; 0x98
    a186:	600a      	str	r2, [r1, #0]
    a188:	f000 fd73 	bl	ac72 <_dtoa_r+0xbae>
    a18c:	ab1a      	add	r3, sp, #104	; 0x68
    a18e:	9301      	str	r3, [sp, #4]
    a190:	ab1b      	add	r3, sp, #108	; 0x6c
    a192:	9300      	str	r3, [sp, #0]
    a194:	0032      	movs	r2, r6
    a196:	003b      	movs	r3, r7
    a198:	9804      	ldr	r0, [sp, #16]
    a19a:	f001 fa1d 	bl	b5d8 <__d2b>
    a19e:	0063      	lsls	r3, r4, #1
    a1a0:	9005      	str	r0, [sp, #20]
    a1a2:	0d5b      	lsrs	r3, r3, #21
    a1a4:	d100      	bne.n	a1a8 <_dtoa_r+0xe4>
    a1a6:	e07f      	b.n	a2a8 <_dtoa_r+0x1e4>
    a1a8:	033a      	lsls	r2, r7, #12
    a1aa:	4c9b      	ldr	r4, [pc, #620]	; (a418 <_dtoa_r+0x354>)
    a1ac:	0b12      	lsrs	r2, r2, #12
    a1ae:	4314      	orrs	r4, r2
    a1b0:	0021      	movs	r1, r4
    a1b2:	4a9a      	ldr	r2, [pc, #616]	; (a41c <_dtoa_r+0x358>)
    a1b4:	0030      	movs	r0, r6
    a1b6:	9518      	str	r5, [sp, #96]	; 0x60
    a1b8:	189e      	adds	r6, r3, r2
    a1ba:	2200      	movs	r2, #0
    a1bc:	4b98      	ldr	r3, [pc, #608]	; (a420 <_dtoa_r+0x35c>)
    a1be:	f003 fb19 	bl	d7f4 <__aeabi_dsub>
    a1c2:	4a98      	ldr	r2, [pc, #608]	; (a424 <_dtoa_r+0x360>)
    a1c4:	4b98      	ldr	r3, [pc, #608]	; (a428 <_dtoa_r+0x364>)
    a1c6:	f003 f895 	bl	d2f4 <__aeabi_dmul>
    a1ca:	4a98      	ldr	r2, [pc, #608]	; (a42c <_dtoa_r+0x368>)
    a1cc:	4b98      	ldr	r3, [pc, #608]	; (a430 <_dtoa_r+0x36c>)
    a1ce:	f002 f94d 	bl	c46c <__aeabi_dadd>
    a1d2:	0004      	movs	r4, r0
    a1d4:	0030      	movs	r0, r6
    a1d6:	000d      	movs	r5, r1
    a1d8:	f003 fe76 	bl	dec8 <__aeabi_i2d>
    a1dc:	4a95      	ldr	r2, [pc, #596]	; (a434 <_dtoa_r+0x370>)
    a1de:	4b96      	ldr	r3, [pc, #600]	; (a438 <_dtoa_r+0x374>)
    a1e0:	f003 f888 	bl	d2f4 <__aeabi_dmul>
    a1e4:	0002      	movs	r2, r0
    a1e6:	000b      	movs	r3, r1
    a1e8:	0020      	movs	r0, r4
    a1ea:	0029      	movs	r1, r5
    a1ec:	f002 f93e 	bl	c46c <__aeabi_dadd>
    a1f0:	0004      	movs	r4, r0
    a1f2:	000d      	movs	r5, r1
    a1f4:	f003 fe34 	bl	de60 <__aeabi_d2iz>
    a1f8:	2200      	movs	r2, #0
    a1fa:	9003      	str	r0, [sp, #12]
    a1fc:	2300      	movs	r3, #0
    a1fe:	0020      	movs	r0, r4
    a200:	0029      	movs	r1, r5
    a202:	f001 fde3 	bl	bdcc <__aeabi_dcmplt>
    a206:	2800      	cmp	r0, #0
    a208:	d00e      	beq.n	a228 <_dtoa_r+0x164>
    a20a:	9803      	ldr	r0, [sp, #12]
    a20c:	f003 fe5c 	bl	dec8 <__aeabi_i2d>
    a210:	000b      	movs	r3, r1
    a212:	0002      	movs	r2, r0
    a214:	0029      	movs	r1, r5
    a216:	0020      	movs	r0, r4
    a218:	f001 fdd2 	bl	bdc0 <__aeabi_dcmpeq>
    a21c:	0003      	movs	r3, r0
    a21e:	4258      	negs	r0, r3
    a220:	4158      	adcs	r0, r3
    a222:	9b03      	ldr	r3, [sp, #12]
    a224:	1a1b      	subs	r3, r3, r0
    a226:	9303      	str	r3, [sp, #12]
    a228:	2301      	movs	r3, #1
    a22a:	9316      	str	r3, [sp, #88]	; 0x58
    a22c:	9b03      	ldr	r3, [sp, #12]
    a22e:	2b16      	cmp	r3, #22
    a230:	d80f      	bhi.n	a252 <_dtoa_r+0x18e>
    a232:	4982      	ldr	r1, [pc, #520]	; (a43c <_dtoa_r+0x378>)
    a234:	00db      	lsls	r3, r3, #3
    a236:	18c9      	adds	r1, r1, r3
    a238:	6808      	ldr	r0, [r1, #0]
    a23a:	6849      	ldr	r1, [r1, #4]
    a23c:	9a06      	ldr	r2, [sp, #24]
    a23e:	9b07      	ldr	r3, [sp, #28]
    a240:	f001 fdd8 	bl	bdf4 <__aeabi_dcmpgt>
    a244:	2800      	cmp	r0, #0
    a246:	d04b      	beq.n	a2e0 <_dtoa_r+0x21c>
    a248:	9b03      	ldr	r3, [sp, #12]
    a24a:	3b01      	subs	r3, #1
    a24c:	9303      	str	r3, [sp, #12]
    a24e:	2300      	movs	r3, #0
    a250:	9316      	str	r3, [sp, #88]	; 0x58
    a252:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a254:	1b9e      	subs	r6, r3, r6
    a256:	2300      	movs	r3, #0
    a258:	930b      	str	r3, [sp, #44]	; 0x2c
    a25a:	0033      	movs	r3, r6
    a25c:	3b01      	subs	r3, #1
    a25e:	930c      	str	r3, [sp, #48]	; 0x30
    a260:	d504      	bpl.n	a26c <_dtoa_r+0x1a8>
    a262:	2301      	movs	r3, #1
    a264:	1b9b      	subs	r3, r3, r6
    a266:	930b      	str	r3, [sp, #44]	; 0x2c
    a268:	2300      	movs	r3, #0
    a26a:	930c      	str	r3, [sp, #48]	; 0x30
    a26c:	9b03      	ldr	r3, [sp, #12]
    a26e:	2b00      	cmp	r3, #0
    a270:	db38      	blt.n	a2e4 <_dtoa_r+0x220>
    a272:	9a03      	ldr	r2, [sp, #12]
    a274:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a276:	4694      	mov	ip, r2
    a278:	4463      	add	r3, ip
    a27a:	930c      	str	r3, [sp, #48]	; 0x30
    a27c:	2300      	movs	r3, #0
    a27e:	920f      	str	r2, [sp, #60]	; 0x3c
    a280:	9308      	str	r3, [sp, #32]
    a282:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a284:	2501      	movs	r5, #1
    a286:	2b09      	cmp	r3, #9
    a288:	d900      	bls.n	a28c <_dtoa_r+0x1c8>
    a28a:	e091      	b.n	a3b0 <_dtoa_r+0x2ec>
    a28c:	2b05      	cmp	r3, #5
    a28e:	dd02      	ble.n	a296 <_dtoa_r+0x1d2>
    a290:	2500      	movs	r5, #0
    a292:	3b04      	subs	r3, #4
    a294:	9322      	str	r3, [sp, #136]	; 0x88
    a296:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a298:	1e98      	subs	r0, r3, #2
    a29a:	2803      	cmp	r0, #3
    a29c:	d900      	bls.n	a2a0 <_dtoa_r+0x1dc>
    a29e:	e091      	b.n	a3c4 <_dtoa_r+0x300>
    a2a0:	f001 fbfe 	bl	baa0 <__gnu_thumb1_case_uqi>
    a2a4:	76298482 	.word	0x76298482
    a2a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a2aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    a2ac:	189e      	adds	r6, r3, r2
    a2ae:	4b64      	ldr	r3, [pc, #400]	; (a440 <_dtoa_r+0x37c>)
    a2b0:	18f2      	adds	r2, r6, r3
    a2b2:	2a20      	cmp	r2, #32
    a2b4:	dd0f      	ble.n	a2d6 <_dtoa_r+0x212>
    a2b6:	4b63      	ldr	r3, [pc, #396]	; (a444 <_dtoa_r+0x380>)
    a2b8:	9806      	ldr	r0, [sp, #24]
    a2ba:	18f3      	adds	r3, r6, r3
    a2bc:	40d8      	lsrs	r0, r3
    a2be:	2340      	movs	r3, #64	; 0x40
    a2c0:	1a9b      	subs	r3, r3, r2
    a2c2:	409c      	lsls	r4, r3
    a2c4:	4320      	orrs	r0, r4
    a2c6:	f003 fe41 	bl	df4c <__aeabi_ui2d>
    a2ca:	2301      	movs	r3, #1
    a2cc:	4c5e      	ldr	r4, [pc, #376]	; (a448 <_dtoa_r+0x384>)
    a2ce:	3e01      	subs	r6, #1
    a2d0:	1909      	adds	r1, r1, r4
    a2d2:	9318      	str	r3, [sp, #96]	; 0x60
    a2d4:	e771      	b.n	a1ba <_dtoa_r+0xf6>
    a2d6:	2320      	movs	r3, #32
    a2d8:	9806      	ldr	r0, [sp, #24]
    a2da:	1a9b      	subs	r3, r3, r2
    a2dc:	4098      	lsls	r0, r3
    a2de:	e7f2      	b.n	a2c6 <_dtoa_r+0x202>
    a2e0:	9016      	str	r0, [sp, #88]	; 0x58
    a2e2:	e7b6      	b.n	a252 <_dtoa_r+0x18e>
    a2e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a2e6:	9a03      	ldr	r2, [sp, #12]
    a2e8:	1a9b      	subs	r3, r3, r2
    a2ea:	930b      	str	r3, [sp, #44]	; 0x2c
    a2ec:	4253      	negs	r3, r2
    a2ee:	9308      	str	r3, [sp, #32]
    a2f0:	2300      	movs	r3, #0
    a2f2:	930f      	str	r3, [sp, #60]	; 0x3c
    a2f4:	e7c5      	b.n	a282 <_dtoa_r+0x1be>
    a2f6:	2301      	movs	r3, #1
    a2f8:	930e      	str	r3, [sp, #56]	; 0x38
    a2fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a2fc:	2b00      	cmp	r3, #0
    a2fe:	dd65      	ble.n	a3cc <_dtoa_r+0x308>
    a300:	001f      	movs	r7, r3
    a302:	930d      	str	r3, [sp, #52]	; 0x34
    a304:	9a04      	ldr	r2, [sp, #16]
    a306:	6a54      	ldr	r4, [r2, #36]	; 0x24
    a308:	2200      	movs	r2, #0
    a30a:	6062      	str	r2, [r4, #4]
    a30c:	3204      	adds	r2, #4
    a30e:	0011      	movs	r1, r2
    a310:	3114      	adds	r1, #20
    a312:	4299      	cmp	r1, r3
    a314:	d95f      	bls.n	a3d6 <_dtoa_r+0x312>
    a316:	6861      	ldr	r1, [r4, #4]
    a318:	9804      	ldr	r0, [sp, #16]
    a31a:	f000 fece 	bl	b0ba <_Balloc>
    a31e:	9b04      	ldr	r3, [sp, #16]
    a320:	6020      	str	r0, [r4, #0]
    a322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a324:	681b      	ldr	r3, [r3, #0]
    a326:	930a      	str	r3, [sp, #40]	; 0x28
    a328:	2f0e      	cmp	r7, #14
    a32a:	d900      	bls.n	a32e <_dtoa_r+0x26a>
    a32c:	e105      	b.n	a53a <_dtoa_r+0x476>
    a32e:	2d00      	cmp	r5, #0
    a330:	d100      	bne.n	a334 <_dtoa_r+0x270>
    a332:	e102      	b.n	a53a <_dtoa_r+0x476>
    a334:	9b06      	ldr	r3, [sp, #24]
    a336:	9c07      	ldr	r4, [sp, #28]
    a338:	9314      	str	r3, [sp, #80]	; 0x50
    a33a:	9415      	str	r4, [sp, #84]	; 0x54
    a33c:	9b03      	ldr	r3, [sp, #12]
    a33e:	2b00      	cmp	r3, #0
    a340:	dc00      	bgt.n	a344 <_dtoa_r+0x280>
    a342:	e085      	b.n	a450 <_dtoa_r+0x38c>
    a344:	001a      	movs	r2, r3
    a346:	210f      	movs	r1, #15
    a348:	4b3c      	ldr	r3, [pc, #240]	; (a43c <_dtoa_r+0x378>)
    a34a:	400a      	ands	r2, r1
    a34c:	00d2      	lsls	r2, r2, #3
    a34e:	189b      	adds	r3, r3, r2
    a350:	685c      	ldr	r4, [r3, #4]
    a352:	681b      	ldr	r3, [r3, #0]
    a354:	9310      	str	r3, [sp, #64]	; 0x40
    a356:	9411      	str	r4, [sp, #68]	; 0x44
    a358:	9b03      	ldr	r3, [sp, #12]
    a35a:	2402      	movs	r4, #2
    a35c:	111d      	asrs	r5, r3, #4
    a35e:	06eb      	lsls	r3, r5, #27
    a360:	d50a      	bpl.n	a378 <_dtoa_r+0x2b4>
    a362:	4b3a      	ldr	r3, [pc, #232]	; (a44c <_dtoa_r+0x388>)
    a364:	400d      	ands	r5, r1
    a366:	6a1a      	ldr	r2, [r3, #32]
    a368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a36a:	9814      	ldr	r0, [sp, #80]	; 0x50
    a36c:	9915      	ldr	r1, [sp, #84]	; 0x54
    a36e:	f002 fb8d 	bl	ca8c <__aeabi_ddiv>
    a372:	9006      	str	r0, [sp, #24]
    a374:	9107      	str	r1, [sp, #28]
    a376:	3401      	adds	r4, #1
    a378:	4e34      	ldr	r6, [pc, #208]	; (a44c <_dtoa_r+0x388>)
    a37a:	2d00      	cmp	r5, #0
    a37c:	d130      	bne.n	a3e0 <_dtoa_r+0x31c>
    a37e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a380:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a382:	9806      	ldr	r0, [sp, #24]
    a384:	9907      	ldr	r1, [sp, #28]
    a386:	f002 fb81 	bl	ca8c <__aeabi_ddiv>
    a38a:	9006      	str	r0, [sp, #24]
    a38c:	9107      	str	r1, [sp, #28]
    a38e:	e07a      	b.n	a486 <_dtoa_r+0x3c2>
    a390:	2301      	movs	r3, #1
    a392:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    a394:	930e      	str	r3, [sp, #56]	; 0x38
    a396:	4694      	mov	ip, r2
    a398:	9b03      	ldr	r3, [sp, #12]
    a39a:	4463      	add	r3, ip
    a39c:	1c5f      	adds	r7, r3, #1
    a39e:	930d      	str	r3, [sp, #52]	; 0x34
    a3a0:	1e3b      	subs	r3, r7, #0
    a3a2:	dcaf      	bgt.n	a304 <_dtoa_r+0x240>
    a3a4:	2301      	movs	r3, #1
    a3a6:	e7ad      	b.n	a304 <_dtoa_r+0x240>
    a3a8:	2300      	movs	r3, #0
    a3aa:	e7a5      	b.n	a2f8 <_dtoa_r+0x234>
    a3ac:	2300      	movs	r3, #0
    a3ae:	e7f0      	b.n	a392 <_dtoa_r+0x2ce>
    a3b0:	2300      	movs	r3, #0
    a3b2:	950e      	str	r5, [sp, #56]	; 0x38
    a3b4:	9322      	str	r3, [sp, #136]	; 0x88
    a3b6:	3b01      	subs	r3, #1
    a3b8:	2200      	movs	r2, #0
    a3ba:	930d      	str	r3, [sp, #52]	; 0x34
    a3bc:	001f      	movs	r7, r3
    a3be:	3313      	adds	r3, #19
    a3c0:	9223      	str	r2, [sp, #140]	; 0x8c
    a3c2:	e79f      	b.n	a304 <_dtoa_r+0x240>
    a3c4:	2301      	movs	r3, #1
    a3c6:	930e      	str	r3, [sp, #56]	; 0x38
    a3c8:	3b02      	subs	r3, #2
    a3ca:	e7f5      	b.n	a3b8 <_dtoa_r+0x2f4>
    a3cc:	2301      	movs	r3, #1
    a3ce:	930d      	str	r3, [sp, #52]	; 0x34
    a3d0:	001f      	movs	r7, r3
    a3d2:	001a      	movs	r2, r3
    a3d4:	e7f4      	b.n	a3c0 <_dtoa_r+0x2fc>
    a3d6:	6861      	ldr	r1, [r4, #4]
    a3d8:	0052      	lsls	r2, r2, #1
    a3da:	3101      	adds	r1, #1
    a3dc:	6061      	str	r1, [r4, #4]
    a3de:	e796      	b.n	a30e <_dtoa_r+0x24a>
    a3e0:	2301      	movs	r3, #1
    a3e2:	421d      	tst	r5, r3
    a3e4:	d008      	beq.n	a3f8 <_dtoa_r+0x334>
    a3e6:	9810      	ldr	r0, [sp, #64]	; 0x40
    a3e8:	9911      	ldr	r1, [sp, #68]	; 0x44
    a3ea:	18e4      	adds	r4, r4, r3
    a3ec:	6832      	ldr	r2, [r6, #0]
    a3ee:	6873      	ldr	r3, [r6, #4]
    a3f0:	f002 ff80 	bl	d2f4 <__aeabi_dmul>
    a3f4:	9010      	str	r0, [sp, #64]	; 0x40
    a3f6:	9111      	str	r1, [sp, #68]	; 0x44
    a3f8:	106d      	asrs	r5, r5, #1
    a3fa:	3608      	adds	r6, #8
    a3fc:	e7bd      	b.n	a37a <_dtoa_r+0x2b6>
    a3fe:	46c0      	nop			; (mov r8, r8)
    a400:	7ff00000 	.word	0x7ff00000
    a404:	0000270f 	.word	0x0000270f
    a408:	0000ee20 	.word	0x0000ee20
    a40c:	0000ee23 	.word	0x0000ee23
    a410:	0000ecf2 	.word	0x0000ecf2
    a414:	0000ecf3 	.word	0x0000ecf3
    a418:	3ff00000 	.word	0x3ff00000
    a41c:	fffffc01 	.word	0xfffffc01
    a420:	3ff80000 	.word	0x3ff80000
    a424:	636f4361 	.word	0x636f4361
    a428:	3fd287a7 	.word	0x3fd287a7
    a42c:	8b60c8b3 	.word	0x8b60c8b3
    a430:	3fc68a28 	.word	0x3fc68a28
    a434:	509f79fb 	.word	0x509f79fb
    a438:	3fd34413 	.word	0x3fd34413
    a43c:	0000eeb0 	.word	0x0000eeb0
    a440:	00000432 	.word	0x00000432
    a444:	00000412 	.word	0x00000412
    a448:	fe100000 	.word	0xfe100000
    a44c:	0000ee88 	.word	0x0000ee88
    a450:	9b03      	ldr	r3, [sp, #12]
    a452:	2402      	movs	r4, #2
    a454:	2b00      	cmp	r3, #0
    a456:	d016      	beq.n	a486 <_dtoa_r+0x3c2>
    a458:	9814      	ldr	r0, [sp, #80]	; 0x50
    a45a:	9915      	ldr	r1, [sp, #84]	; 0x54
    a45c:	425d      	negs	r5, r3
    a45e:	230f      	movs	r3, #15
    a460:	4aca      	ldr	r2, [pc, #808]	; (a78c <_dtoa_r+0x6c8>)
    a462:	402b      	ands	r3, r5
    a464:	00db      	lsls	r3, r3, #3
    a466:	18d3      	adds	r3, r2, r3
    a468:	681a      	ldr	r2, [r3, #0]
    a46a:	685b      	ldr	r3, [r3, #4]
    a46c:	f002 ff42 	bl	d2f4 <__aeabi_dmul>
    a470:	2300      	movs	r3, #0
    a472:	9006      	str	r0, [sp, #24]
    a474:	9107      	str	r1, [sp, #28]
    a476:	4ec6      	ldr	r6, [pc, #792]	; (a790 <_dtoa_r+0x6cc>)
    a478:	112d      	asrs	r5, r5, #4
    a47a:	2d00      	cmp	r5, #0
    a47c:	d000      	beq.n	a480 <_dtoa_r+0x3bc>
    a47e:	e08c      	b.n	a59a <_dtoa_r+0x4d6>
    a480:	2b00      	cmp	r3, #0
    a482:	d000      	beq.n	a486 <_dtoa_r+0x3c2>
    a484:	e781      	b.n	a38a <_dtoa_r+0x2c6>
    a486:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a488:	2b00      	cmp	r3, #0
    a48a:	d100      	bne.n	a48e <_dtoa_r+0x3ca>
    a48c:	e091      	b.n	a5b2 <_dtoa_r+0x4ee>
    a48e:	9a06      	ldr	r2, [sp, #24]
    a490:	9b07      	ldr	r3, [sp, #28]
    a492:	9210      	str	r2, [sp, #64]	; 0x40
    a494:	9311      	str	r3, [sp, #68]	; 0x44
    a496:	9810      	ldr	r0, [sp, #64]	; 0x40
    a498:	9911      	ldr	r1, [sp, #68]	; 0x44
    a49a:	2200      	movs	r2, #0
    a49c:	4bbd      	ldr	r3, [pc, #756]	; (a794 <_dtoa_r+0x6d0>)
    a49e:	f001 fc95 	bl	bdcc <__aeabi_dcmplt>
    a4a2:	2800      	cmp	r0, #0
    a4a4:	d100      	bne.n	a4a8 <_dtoa_r+0x3e4>
    a4a6:	e084      	b.n	a5b2 <_dtoa_r+0x4ee>
    a4a8:	2f00      	cmp	r7, #0
    a4aa:	d100      	bne.n	a4ae <_dtoa_r+0x3ea>
    a4ac:	e081      	b.n	a5b2 <_dtoa_r+0x4ee>
    a4ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a4b0:	2b00      	cmp	r3, #0
    a4b2:	dd3e      	ble.n	a532 <_dtoa_r+0x46e>
    a4b4:	9810      	ldr	r0, [sp, #64]	; 0x40
    a4b6:	9911      	ldr	r1, [sp, #68]	; 0x44
    a4b8:	9b03      	ldr	r3, [sp, #12]
    a4ba:	2200      	movs	r2, #0
    a4bc:	1e5e      	subs	r6, r3, #1
    a4be:	4bb6      	ldr	r3, [pc, #728]	; (a798 <_dtoa_r+0x6d4>)
    a4c0:	f002 ff18 	bl	d2f4 <__aeabi_dmul>
    a4c4:	9006      	str	r0, [sp, #24]
    a4c6:	9107      	str	r1, [sp, #28]
    a4c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a4ca:	3401      	adds	r4, #1
    a4cc:	0020      	movs	r0, r4
    a4ce:	f003 fcfb 	bl	dec8 <__aeabi_i2d>
    a4d2:	9a06      	ldr	r2, [sp, #24]
    a4d4:	9b07      	ldr	r3, [sp, #28]
    a4d6:	f002 ff0d 	bl	d2f4 <__aeabi_dmul>
    a4da:	2200      	movs	r2, #0
    a4dc:	4baf      	ldr	r3, [pc, #700]	; (a79c <_dtoa_r+0x6d8>)
    a4de:	f001 ffc5 	bl	c46c <__aeabi_dadd>
    a4e2:	9012      	str	r0, [sp, #72]	; 0x48
    a4e4:	9113      	str	r1, [sp, #76]	; 0x4c
    a4e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a4e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    a4ea:	4aad      	ldr	r2, [pc, #692]	; (a7a0 <_dtoa_r+0x6dc>)
    a4ec:	9310      	str	r3, [sp, #64]	; 0x40
    a4ee:	9411      	str	r4, [sp, #68]	; 0x44
    a4f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a4f2:	189c      	adds	r4, r3, r2
    a4f4:	9411      	str	r4, [sp, #68]	; 0x44
    a4f6:	2d00      	cmp	r5, #0
    a4f8:	d15e      	bne.n	a5b8 <_dtoa_r+0x4f4>
    a4fa:	9806      	ldr	r0, [sp, #24]
    a4fc:	9907      	ldr	r1, [sp, #28]
    a4fe:	2200      	movs	r2, #0
    a500:	4ba8      	ldr	r3, [pc, #672]	; (a7a4 <_dtoa_r+0x6e0>)
    a502:	f003 f977 	bl	d7f4 <__aeabi_dsub>
    a506:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a508:	0023      	movs	r3, r4
    a50a:	9006      	str	r0, [sp, #24]
    a50c:	9107      	str	r1, [sp, #28]
    a50e:	f001 fc71 	bl	bdf4 <__aeabi_dcmpgt>
    a512:	2800      	cmp	r0, #0
    a514:	d000      	beq.n	a518 <_dtoa_r+0x454>
    a516:	e301      	b.n	ab1c <_dtoa_r+0xa58>
    a518:	48a3      	ldr	r0, [pc, #652]	; (a7a8 <_dtoa_r+0x6e4>)
    a51a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a51c:	4684      	mov	ip, r0
    a51e:	4461      	add	r1, ip
    a520:	000b      	movs	r3, r1
    a522:	9806      	ldr	r0, [sp, #24]
    a524:	9907      	ldr	r1, [sp, #28]
    a526:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a528:	f001 fc50 	bl	bdcc <__aeabi_dcmplt>
    a52c:	2800      	cmp	r0, #0
    a52e:	d000      	beq.n	a532 <_dtoa_r+0x46e>
    a530:	e2e8      	b.n	ab04 <_dtoa_r+0xa40>
    a532:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a534:	9c15      	ldr	r4, [sp, #84]	; 0x54
    a536:	9306      	str	r3, [sp, #24]
    a538:	9407      	str	r4, [sp, #28]
    a53a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a53c:	2b00      	cmp	r3, #0
    a53e:	da00      	bge.n	a542 <_dtoa_r+0x47e>
    a540:	e157      	b.n	a7f2 <_dtoa_r+0x72e>
    a542:	9a03      	ldr	r2, [sp, #12]
    a544:	2a0e      	cmp	r2, #14
    a546:	dd00      	ble.n	a54a <_dtoa_r+0x486>
    a548:	e153      	b.n	a7f2 <_dtoa_r+0x72e>
    a54a:	4b90      	ldr	r3, [pc, #576]	; (a78c <_dtoa_r+0x6c8>)
    a54c:	00d2      	lsls	r2, r2, #3
    a54e:	189b      	adds	r3, r3, r2
    a550:	685c      	ldr	r4, [r3, #4]
    a552:	681b      	ldr	r3, [r3, #0]
    a554:	9308      	str	r3, [sp, #32]
    a556:	9409      	str	r4, [sp, #36]	; 0x24
    a558:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a55a:	2b00      	cmp	r3, #0
    a55c:	db00      	blt.n	a560 <_dtoa_r+0x49c>
    a55e:	e0ce      	b.n	a6fe <_dtoa_r+0x63a>
    a560:	2f00      	cmp	r7, #0
    a562:	dd00      	ble.n	a566 <_dtoa_r+0x4a2>
    a564:	e0cb      	b.n	a6fe <_dtoa_r+0x63a>
    a566:	d000      	beq.n	a56a <_dtoa_r+0x4a6>
    a568:	e2cf      	b.n	ab0a <_dtoa_r+0xa46>
    a56a:	9808      	ldr	r0, [sp, #32]
    a56c:	9909      	ldr	r1, [sp, #36]	; 0x24
    a56e:	2200      	movs	r2, #0
    a570:	4b8c      	ldr	r3, [pc, #560]	; (a7a4 <_dtoa_r+0x6e0>)
    a572:	f002 febf 	bl	d2f4 <__aeabi_dmul>
    a576:	9a06      	ldr	r2, [sp, #24]
    a578:	9b07      	ldr	r3, [sp, #28]
    a57a:	f001 fc45 	bl	be08 <__aeabi_dcmpge>
    a57e:	003e      	movs	r6, r7
    a580:	9708      	str	r7, [sp, #32]
    a582:	2800      	cmp	r0, #0
    a584:	d000      	beq.n	a588 <_dtoa_r+0x4c4>
    a586:	e2a4      	b.n	aad2 <_dtoa_r+0xa0e>
    a588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a58a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a58c:	1c5d      	adds	r5, r3, #1
    a58e:	2331      	movs	r3, #49	; 0x31
    a590:	7013      	strb	r3, [r2, #0]
    a592:	9b03      	ldr	r3, [sp, #12]
    a594:	3301      	adds	r3, #1
    a596:	9303      	str	r3, [sp, #12]
    a598:	e29f      	b.n	aada <_dtoa_r+0xa16>
    a59a:	2201      	movs	r2, #1
    a59c:	4215      	tst	r5, r2
    a59e:	d005      	beq.n	a5ac <_dtoa_r+0x4e8>
    a5a0:	18a4      	adds	r4, r4, r2
    a5a2:	6832      	ldr	r2, [r6, #0]
    a5a4:	6873      	ldr	r3, [r6, #4]
    a5a6:	f002 fea5 	bl	d2f4 <__aeabi_dmul>
    a5aa:	2301      	movs	r3, #1
    a5ac:	106d      	asrs	r5, r5, #1
    a5ae:	3608      	adds	r6, #8
    a5b0:	e763      	b.n	a47a <_dtoa_r+0x3b6>
    a5b2:	9e03      	ldr	r6, [sp, #12]
    a5b4:	003d      	movs	r5, r7
    a5b6:	e789      	b.n	a4cc <_dtoa_r+0x408>
    a5b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a5ba:	1e69      	subs	r1, r5, #1
    a5bc:	1952      	adds	r2, r2, r5
    a5be:	9217      	str	r2, [sp, #92]	; 0x5c
    a5c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a5c2:	4b72      	ldr	r3, [pc, #456]	; (a78c <_dtoa_r+0x6c8>)
    a5c4:	00c9      	lsls	r1, r1, #3
    a5c6:	2a00      	cmp	r2, #0
    a5c8:	d04a      	beq.n	a660 <_dtoa_r+0x59c>
    a5ca:	185b      	adds	r3, r3, r1
    a5cc:	681a      	ldr	r2, [r3, #0]
    a5ce:	685b      	ldr	r3, [r3, #4]
    a5d0:	2000      	movs	r0, #0
    a5d2:	4976      	ldr	r1, [pc, #472]	; (a7ac <_dtoa_r+0x6e8>)
    a5d4:	f002 fa5a 	bl	ca8c <__aeabi_ddiv>
    a5d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a5da:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a5dc:	f003 f90a 	bl	d7f4 <__aeabi_dsub>
    a5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a5e2:	9010      	str	r0, [sp, #64]	; 0x40
    a5e4:	9111      	str	r1, [sp, #68]	; 0x44
    a5e6:	9312      	str	r3, [sp, #72]	; 0x48
    a5e8:	9806      	ldr	r0, [sp, #24]
    a5ea:	9907      	ldr	r1, [sp, #28]
    a5ec:	f003 fc38 	bl	de60 <__aeabi_d2iz>
    a5f0:	0004      	movs	r4, r0
    a5f2:	f003 fc69 	bl	dec8 <__aeabi_i2d>
    a5f6:	0002      	movs	r2, r0
    a5f8:	000b      	movs	r3, r1
    a5fa:	9806      	ldr	r0, [sp, #24]
    a5fc:	9907      	ldr	r1, [sp, #28]
    a5fe:	f003 f8f9 	bl	d7f4 <__aeabi_dsub>
    a602:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a604:	3430      	adds	r4, #48	; 0x30
    a606:	1c5d      	adds	r5, r3, #1
    a608:	701c      	strb	r4, [r3, #0]
    a60a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a60c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a60e:	9006      	str	r0, [sp, #24]
    a610:	9107      	str	r1, [sp, #28]
    a612:	f001 fbdb 	bl	bdcc <__aeabi_dcmplt>
    a616:	2800      	cmp	r0, #0
    a618:	d165      	bne.n	a6e6 <_dtoa_r+0x622>
    a61a:	9a06      	ldr	r2, [sp, #24]
    a61c:	9b07      	ldr	r3, [sp, #28]
    a61e:	2000      	movs	r0, #0
    a620:	495c      	ldr	r1, [pc, #368]	; (a794 <_dtoa_r+0x6d0>)
    a622:	f003 f8e7 	bl	d7f4 <__aeabi_dsub>
    a626:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a628:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a62a:	f001 fbcf 	bl	bdcc <__aeabi_dcmplt>
    a62e:	2800      	cmp	r0, #0
    a630:	d000      	beq.n	a634 <_dtoa_r+0x570>
    a632:	e0be      	b.n	a7b2 <_dtoa_r+0x6ee>
    a634:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a636:	429d      	cmp	r5, r3
    a638:	d100      	bne.n	a63c <_dtoa_r+0x578>
    a63a:	e77a      	b.n	a532 <_dtoa_r+0x46e>
    a63c:	9810      	ldr	r0, [sp, #64]	; 0x40
    a63e:	9911      	ldr	r1, [sp, #68]	; 0x44
    a640:	2200      	movs	r2, #0
    a642:	4b55      	ldr	r3, [pc, #340]	; (a798 <_dtoa_r+0x6d4>)
    a644:	f002 fe56 	bl	d2f4 <__aeabi_dmul>
    a648:	2200      	movs	r2, #0
    a64a:	9010      	str	r0, [sp, #64]	; 0x40
    a64c:	9111      	str	r1, [sp, #68]	; 0x44
    a64e:	9806      	ldr	r0, [sp, #24]
    a650:	9907      	ldr	r1, [sp, #28]
    a652:	4b51      	ldr	r3, [pc, #324]	; (a798 <_dtoa_r+0x6d4>)
    a654:	f002 fe4e 	bl	d2f4 <__aeabi_dmul>
    a658:	9512      	str	r5, [sp, #72]	; 0x48
    a65a:	9006      	str	r0, [sp, #24]
    a65c:	9107      	str	r1, [sp, #28]
    a65e:	e7c3      	b.n	a5e8 <_dtoa_r+0x524>
    a660:	1859      	adds	r1, r3, r1
    a662:	6808      	ldr	r0, [r1, #0]
    a664:	6849      	ldr	r1, [r1, #4]
    a666:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a668:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a66a:	f002 fe43 	bl	d2f4 <__aeabi_dmul>
    a66e:	9010      	str	r0, [sp, #64]	; 0x40
    a670:	9111      	str	r1, [sp, #68]	; 0x44
    a672:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a674:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    a676:	9806      	ldr	r0, [sp, #24]
    a678:	9907      	ldr	r1, [sp, #28]
    a67a:	f003 fbf1 	bl	de60 <__aeabi_d2iz>
    a67e:	9012      	str	r0, [sp, #72]	; 0x48
    a680:	f003 fc22 	bl	dec8 <__aeabi_i2d>
    a684:	0002      	movs	r2, r0
    a686:	000b      	movs	r3, r1
    a688:	9806      	ldr	r0, [sp, #24]
    a68a:	9907      	ldr	r1, [sp, #28]
    a68c:	f003 f8b2 	bl	d7f4 <__aeabi_dsub>
    a690:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a692:	9006      	str	r0, [sp, #24]
    a694:	9107      	str	r1, [sp, #28]
    a696:	3330      	adds	r3, #48	; 0x30
    a698:	7023      	strb	r3, [r4, #0]
    a69a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a69c:	3401      	adds	r4, #1
    a69e:	2200      	movs	r2, #0
    a6a0:	42a3      	cmp	r3, r4
    a6a2:	d124      	bne.n	a6ee <_dtoa_r+0x62a>
    a6a4:	4b41      	ldr	r3, [pc, #260]	; (a7ac <_dtoa_r+0x6e8>)
    a6a6:	9810      	ldr	r0, [sp, #64]	; 0x40
    a6a8:	9911      	ldr	r1, [sp, #68]	; 0x44
    a6aa:	f001 fedf 	bl	c46c <__aeabi_dadd>
    a6ae:	0002      	movs	r2, r0
    a6b0:	000b      	movs	r3, r1
    a6b2:	9806      	ldr	r0, [sp, #24]
    a6b4:	9907      	ldr	r1, [sp, #28]
    a6b6:	f001 fb9d 	bl	bdf4 <__aeabi_dcmpgt>
    a6ba:	2800      	cmp	r0, #0
    a6bc:	d000      	beq.n	a6c0 <_dtoa_r+0x5fc>
    a6be:	e078      	b.n	a7b2 <_dtoa_r+0x6ee>
    a6c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a6c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a6c4:	2000      	movs	r0, #0
    a6c6:	4939      	ldr	r1, [pc, #228]	; (a7ac <_dtoa_r+0x6e8>)
    a6c8:	f003 f894 	bl	d7f4 <__aeabi_dsub>
    a6cc:	0002      	movs	r2, r0
    a6ce:	000b      	movs	r3, r1
    a6d0:	9806      	ldr	r0, [sp, #24]
    a6d2:	9907      	ldr	r1, [sp, #28]
    a6d4:	f001 fb7a 	bl	bdcc <__aeabi_dcmplt>
    a6d8:	2800      	cmp	r0, #0
    a6da:	d100      	bne.n	a6de <_dtoa_r+0x61a>
    a6dc:	e729      	b.n	a532 <_dtoa_r+0x46e>
    a6de:	1e6b      	subs	r3, r5, #1
    a6e0:	781a      	ldrb	r2, [r3, #0]
    a6e2:	2a30      	cmp	r2, #48	; 0x30
    a6e4:	d001      	beq.n	a6ea <_dtoa_r+0x626>
    a6e6:	9603      	str	r6, [sp, #12]
    a6e8:	e03f      	b.n	a76a <_dtoa_r+0x6a6>
    a6ea:	001d      	movs	r5, r3
    a6ec:	e7f7      	b.n	a6de <_dtoa_r+0x61a>
    a6ee:	9806      	ldr	r0, [sp, #24]
    a6f0:	9907      	ldr	r1, [sp, #28]
    a6f2:	4b29      	ldr	r3, [pc, #164]	; (a798 <_dtoa_r+0x6d4>)
    a6f4:	f002 fdfe 	bl	d2f4 <__aeabi_dmul>
    a6f8:	9006      	str	r0, [sp, #24]
    a6fa:	9107      	str	r1, [sp, #28]
    a6fc:	e7bb      	b.n	a676 <_dtoa_r+0x5b2>
    a6fe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    a700:	9a08      	ldr	r2, [sp, #32]
    a702:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a704:	9806      	ldr	r0, [sp, #24]
    a706:	9907      	ldr	r1, [sp, #28]
    a708:	f002 f9c0 	bl	ca8c <__aeabi_ddiv>
    a70c:	f003 fba8 	bl	de60 <__aeabi_d2iz>
    a710:	0004      	movs	r4, r0
    a712:	f003 fbd9 	bl	dec8 <__aeabi_i2d>
    a716:	9a08      	ldr	r2, [sp, #32]
    a718:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a71a:	f002 fdeb 	bl	d2f4 <__aeabi_dmul>
    a71e:	000b      	movs	r3, r1
    a720:	0002      	movs	r2, r0
    a722:	9806      	ldr	r0, [sp, #24]
    a724:	9907      	ldr	r1, [sp, #28]
    a726:	f003 f865 	bl	d7f4 <__aeabi_dsub>
    a72a:	0023      	movs	r3, r4
    a72c:	3330      	adds	r3, #48	; 0x30
    a72e:	7033      	strb	r3, [r6, #0]
    a730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a732:	1c75      	adds	r5, r6, #1
    a734:	1aeb      	subs	r3, r5, r3
    a736:	429f      	cmp	r7, r3
    a738:	d14c      	bne.n	a7d4 <_dtoa_r+0x710>
    a73a:	0002      	movs	r2, r0
    a73c:	000b      	movs	r3, r1
    a73e:	f001 fe95 	bl	c46c <__aeabi_dadd>
    a742:	0006      	movs	r6, r0
    a744:	000f      	movs	r7, r1
    a746:	0002      	movs	r2, r0
    a748:	000b      	movs	r3, r1
    a74a:	9808      	ldr	r0, [sp, #32]
    a74c:	9909      	ldr	r1, [sp, #36]	; 0x24
    a74e:	f001 fb3d 	bl	bdcc <__aeabi_dcmplt>
    a752:	2800      	cmp	r0, #0
    a754:	d12c      	bne.n	a7b0 <_dtoa_r+0x6ec>
    a756:	9808      	ldr	r0, [sp, #32]
    a758:	9909      	ldr	r1, [sp, #36]	; 0x24
    a75a:	0032      	movs	r2, r6
    a75c:	003b      	movs	r3, r7
    a75e:	f001 fb2f 	bl	bdc0 <__aeabi_dcmpeq>
    a762:	2800      	cmp	r0, #0
    a764:	d001      	beq.n	a76a <_dtoa_r+0x6a6>
    a766:	07e3      	lsls	r3, r4, #31
    a768:	d422      	bmi.n	a7b0 <_dtoa_r+0x6ec>
    a76a:	9905      	ldr	r1, [sp, #20]
    a76c:	9804      	ldr	r0, [sp, #16]
    a76e:	f000 fcdc 	bl	b12a <_Bfree>
    a772:	2300      	movs	r3, #0
    a774:	702b      	strb	r3, [r5, #0]
    a776:	9b03      	ldr	r3, [sp, #12]
    a778:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a77a:	3301      	adds	r3, #1
    a77c:	6013      	str	r3, [r2, #0]
    a77e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a780:	2b00      	cmp	r3, #0
    a782:	d100      	bne.n	a786 <_dtoa_r+0x6c2>
    a784:	e275      	b.n	ac72 <_dtoa_r+0xbae>
    a786:	601d      	str	r5, [r3, #0]
    a788:	e273      	b.n	ac72 <_dtoa_r+0xbae>
    a78a:	46c0      	nop			; (mov r8, r8)
    a78c:	0000eeb0 	.word	0x0000eeb0
    a790:	0000ee88 	.word	0x0000ee88
    a794:	3ff00000 	.word	0x3ff00000
    a798:	40240000 	.word	0x40240000
    a79c:	401c0000 	.word	0x401c0000
    a7a0:	fcc00000 	.word	0xfcc00000
    a7a4:	40140000 	.word	0x40140000
    a7a8:	7cc00000 	.word	0x7cc00000
    a7ac:	3fe00000 	.word	0x3fe00000
    a7b0:	9e03      	ldr	r6, [sp, #12]
    a7b2:	1e6b      	subs	r3, r5, #1
    a7b4:	781a      	ldrb	r2, [r3, #0]
    a7b6:	2a39      	cmp	r2, #57	; 0x39
    a7b8:	d106      	bne.n	a7c8 <_dtoa_r+0x704>
    a7ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a7bc:	429a      	cmp	r2, r3
    a7be:	d107      	bne.n	a7d0 <_dtoa_r+0x70c>
    a7c0:	2330      	movs	r3, #48	; 0x30
    a7c2:	7013      	strb	r3, [r2, #0]
    a7c4:	0013      	movs	r3, r2
    a7c6:	3601      	adds	r6, #1
    a7c8:	781a      	ldrb	r2, [r3, #0]
    a7ca:	3201      	adds	r2, #1
    a7cc:	701a      	strb	r2, [r3, #0]
    a7ce:	e78a      	b.n	a6e6 <_dtoa_r+0x622>
    a7d0:	001d      	movs	r5, r3
    a7d2:	e7ee      	b.n	a7b2 <_dtoa_r+0x6ee>
    a7d4:	2200      	movs	r2, #0
    a7d6:	4bcf      	ldr	r3, [pc, #828]	; (ab14 <_dtoa_r+0xa50>)
    a7d8:	f002 fd8c 	bl	d2f4 <__aeabi_dmul>
    a7dc:	2200      	movs	r2, #0
    a7de:	2300      	movs	r3, #0
    a7e0:	9006      	str	r0, [sp, #24]
    a7e2:	9107      	str	r1, [sp, #28]
    a7e4:	002e      	movs	r6, r5
    a7e6:	f001 faeb 	bl	bdc0 <__aeabi_dcmpeq>
    a7ea:	2800      	cmp	r0, #0
    a7ec:	d100      	bne.n	a7f0 <_dtoa_r+0x72c>
    a7ee:	e787      	b.n	a700 <_dtoa_r+0x63c>
    a7f0:	e7bb      	b.n	a76a <_dtoa_r+0x6a6>
    a7f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a7f4:	2a00      	cmp	r2, #0
    a7f6:	d100      	bne.n	a7fa <_dtoa_r+0x736>
    a7f8:	e087      	b.n	a90a <_dtoa_r+0x846>
    a7fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a7fc:	2a01      	cmp	r2, #1
    a7fe:	dc6e      	bgt.n	a8de <_dtoa_r+0x81a>
    a800:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a802:	2a00      	cmp	r2, #0
    a804:	d067      	beq.n	a8d6 <_dtoa_r+0x812>
    a806:	4ac4      	ldr	r2, [pc, #784]	; (ab18 <_dtoa_r+0xa54>)
    a808:	189b      	adds	r3, r3, r2
    a80a:	9d08      	ldr	r5, [sp, #32]
    a80c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a80e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a810:	2101      	movs	r1, #1
    a812:	18d2      	adds	r2, r2, r3
    a814:	920b      	str	r2, [sp, #44]	; 0x2c
    a816:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a818:	9804      	ldr	r0, [sp, #16]
    a81a:	18d3      	adds	r3, r2, r3
    a81c:	930c      	str	r3, [sp, #48]	; 0x30
    a81e:	f000 fd22 	bl	b266 <__i2b>
    a822:	0006      	movs	r6, r0
    a824:	2c00      	cmp	r4, #0
    a826:	dd0e      	ble.n	a846 <_dtoa_r+0x782>
    a828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a82a:	2b00      	cmp	r3, #0
    a82c:	dd0b      	ble.n	a846 <_dtoa_r+0x782>
    a82e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a830:	0023      	movs	r3, r4
    a832:	4294      	cmp	r4, r2
    a834:	dd00      	ble.n	a838 <_dtoa_r+0x774>
    a836:	0013      	movs	r3, r2
    a838:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a83a:	1ae4      	subs	r4, r4, r3
    a83c:	1ad2      	subs	r2, r2, r3
    a83e:	920b      	str	r2, [sp, #44]	; 0x2c
    a840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a842:	1ad3      	subs	r3, r2, r3
    a844:	930c      	str	r3, [sp, #48]	; 0x30
    a846:	9b08      	ldr	r3, [sp, #32]
    a848:	2b00      	cmp	r3, #0
    a84a:	d01e      	beq.n	a88a <_dtoa_r+0x7c6>
    a84c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a84e:	2b00      	cmp	r3, #0
    a850:	d05f      	beq.n	a912 <_dtoa_r+0x84e>
    a852:	2d00      	cmp	r5, #0
    a854:	dd11      	ble.n	a87a <_dtoa_r+0x7b6>
    a856:	0031      	movs	r1, r6
    a858:	002a      	movs	r2, r5
    a85a:	9804      	ldr	r0, [sp, #16]
    a85c:	f000 fd9c 	bl	b398 <__pow5mult>
    a860:	9a05      	ldr	r2, [sp, #20]
    a862:	0001      	movs	r1, r0
    a864:	0006      	movs	r6, r0
    a866:	9804      	ldr	r0, [sp, #16]
    a868:	f000 fd06 	bl	b278 <__multiply>
    a86c:	9905      	ldr	r1, [sp, #20]
    a86e:	9010      	str	r0, [sp, #64]	; 0x40
    a870:	9804      	ldr	r0, [sp, #16]
    a872:	f000 fc5a 	bl	b12a <_Bfree>
    a876:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a878:	9305      	str	r3, [sp, #20]
    a87a:	9b08      	ldr	r3, [sp, #32]
    a87c:	1b5a      	subs	r2, r3, r5
    a87e:	d004      	beq.n	a88a <_dtoa_r+0x7c6>
    a880:	9905      	ldr	r1, [sp, #20]
    a882:	9804      	ldr	r0, [sp, #16]
    a884:	f000 fd88 	bl	b398 <__pow5mult>
    a888:	9005      	str	r0, [sp, #20]
    a88a:	2101      	movs	r1, #1
    a88c:	9804      	ldr	r0, [sp, #16]
    a88e:	f000 fcea 	bl	b266 <__i2b>
    a892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a894:	9008      	str	r0, [sp, #32]
    a896:	2b00      	cmp	r3, #0
    a898:	dd3d      	ble.n	a916 <_dtoa_r+0x852>
    a89a:	001a      	movs	r2, r3
    a89c:	0001      	movs	r1, r0
    a89e:	9804      	ldr	r0, [sp, #16]
    a8a0:	f000 fd7a 	bl	b398 <__pow5mult>
    a8a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a8a6:	9008      	str	r0, [sp, #32]
    a8a8:	2500      	movs	r5, #0
    a8aa:	2b01      	cmp	r3, #1
    a8ac:	dc3b      	bgt.n	a926 <_dtoa_r+0x862>
    a8ae:	2500      	movs	r5, #0
    a8b0:	9b06      	ldr	r3, [sp, #24]
    a8b2:	42ab      	cmp	r3, r5
    a8b4:	d133      	bne.n	a91e <_dtoa_r+0x85a>
    a8b6:	9b07      	ldr	r3, [sp, #28]
    a8b8:	031b      	lsls	r3, r3, #12
    a8ba:	42ab      	cmp	r3, r5
    a8bc:	d12f      	bne.n	a91e <_dtoa_r+0x85a>
    a8be:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a8c0:	9a07      	ldr	r2, [sp, #28]
    a8c2:	4213      	tst	r3, r2
    a8c4:	d02b      	beq.n	a91e <_dtoa_r+0x85a>
    a8c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a8c8:	3501      	adds	r5, #1
    a8ca:	3301      	adds	r3, #1
    a8cc:	930b      	str	r3, [sp, #44]	; 0x2c
    a8ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a8d0:	3301      	adds	r3, #1
    a8d2:	930c      	str	r3, [sp, #48]	; 0x30
    a8d4:	e023      	b.n	a91e <_dtoa_r+0x85a>
    a8d6:	2336      	movs	r3, #54	; 0x36
    a8d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a8da:	1a9b      	subs	r3, r3, r2
    a8dc:	e795      	b.n	a80a <_dtoa_r+0x746>
    a8de:	9b08      	ldr	r3, [sp, #32]
    a8e0:	1e7d      	subs	r5, r7, #1
    a8e2:	42ab      	cmp	r3, r5
    a8e4:	db06      	blt.n	a8f4 <_dtoa_r+0x830>
    a8e6:	1b5d      	subs	r5, r3, r5
    a8e8:	2f00      	cmp	r7, #0
    a8ea:	da0b      	bge.n	a904 <_dtoa_r+0x840>
    a8ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a8ee:	1bdc      	subs	r4, r3, r7
    a8f0:	2300      	movs	r3, #0
    a8f2:	e78c      	b.n	a80e <_dtoa_r+0x74a>
    a8f4:	9b08      	ldr	r3, [sp, #32]
    a8f6:	9508      	str	r5, [sp, #32]
    a8f8:	1aea      	subs	r2, r5, r3
    a8fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a8fc:	2500      	movs	r5, #0
    a8fe:	189b      	adds	r3, r3, r2
    a900:	930f      	str	r3, [sp, #60]	; 0x3c
    a902:	e7f1      	b.n	a8e8 <_dtoa_r+0x824>
    a904:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a906:	003b      	movs	r3, r7
    a908:	e781      	b.n	a80e <_dtoa_r+0x74a>
    a90a:	9d08      	ldr	r5, [sp, #32]
    a90c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a90e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    a910:	e788      	b.n	a824 <_dtoa_r+0x760>
    a912:	9a08      	ldr	r2, [sp, #32]
    a914:	e7b4      	b.n	a880 <_dtoa_r+0x7bc>
    a916:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a918:	2500      	movs	r5, #0
    a91a:	2b01      	cmp	r3, #1
    a91c:	ddc7      	ble.n	a8ae <_dtoa_r+0x7ea>
    a91e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a920:	2001      	movs	r0, #1
    a922:	2b00      	cmp	r3, #0
    a924:	d00b      	beq.n	a93e <_dtoa_r+0x87a>
    a926:	9b08      	ldr	r3, [sp, #32]
    a928:	9a08      	ldr	r2, [sp, #32]
    a92a:	691b      	ldr	r3, [r3, #16]
    a92c:	930f      	str	r3, [sp, #60]	; 0x3c
    a92e:	3303      	adds	r3, #3
    a930:	009b      	lsls	r3, r3, #2
    a932:	18d3      	adds	r3, r2, r3
    a934:	6858      	ldr	r0, [r3, #4]
    a936:	f000 fc4d 	bl	b1d4 <__hi0bits>
    a93a:	2320      	movs	r3, #32
    a93c:	1a18      	subs	r0, r3, r0
    a93e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a940:	18c0      	adds	r0, r0, r3
    a942:	231f      	movs	r3, #31
    a944:	4018      	ands	r0, r3
    a946:	d100      	bne.n	a94a <_dtoa_r+0x886>
    a948:	e0ab      	b.n	aaa2 <_dtoa_r+0x9de>
    a94a:	3301      	adds	r3, #1
    a94c:	1a1b      	subs	r3, r3, r0
    a94e:	2b04      	cmp	r3, #4
    a950:	dc00      	bgt.n	a954 <_dtoa_r+0x890>
    a952:	e09b      	b.n	aa8c <_dtoa_r+0x9c8>
    a954:	231c      	movs	r3, #28
    a956:	1a18      	subs	r0, r3, r0
    a958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a95a:	1824      	adds	r4, r4, r0
    a95c:	181b      	adds	r3, r3, r0
    a95e:	930b      	str	r3, [sp, #44]	; 0x2c
    a960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a962:	181b      	adds	r3, r3, r0
    a964:	930c      	str	r3, [sp, #48]	; 0x30
    a966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a968:	2b00      	cmp	r3, #0
    a96a:	dd05      	ble.n	a978 <_dtoa_r+0x8b4>
    a96c:	001a      	movs	r2, r3
    a96e:	9905      	ldr	r1, [sp, #20]
    a970:	9804      	ldr	r0, [sp, #16]
    a972:	f000 fd63 	bl	b43c <__lshift>
    a976:	9005      	str	r0, [sp, #20]
    a978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a97a:	2b00      	cmp	r3, #0
    a97c:	dd05      	ble.n	a98a <_dtoa_r+0x8c6>
    a97e:	001a      	movs	r2, r3
    a980:	9908      	ldr	r1, [sp, #32]
    a982:	9804      	ldr	r0, [sp, #16]
    a984:	f000 fd5a 	bl	b43c <__lshift>
    a988:	9008      	str	r0, [sp, #32]
    a98a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a98c:	2b00      	cmp	r3, #0
    a98e:	d100      	bne.n	a992 <_dtoa_r+0x8ce>
    a990:	e089      	b.n	aaa6 <_dtoa_r+0x9e2>
    a992:	9908      	ldr	r1, [sp, #32]
    a994:	9805      	ldr	r0, [sp, #20]
    a996:	f000 fda2 	bl	b4de <__mcmp>
    a99a:	2800      	cmp	r0, #0
    a99c:	db00      	blt.n	a9a0 <_dtoa_r+0x8dc>
    a99e:	e082      	b.n	aaa6 <_dtoa_r+0x9e2>
    a9a0:	9b03      	ldr	r3, [sp, #12]
    a9a2:	220a      	movs	r2, #10
    a9a4:	3b01      	subs	r3, #1
    a9a6:	9303      	str	r3, [sp, #12]
    a9a8:	9905      	ldr	r1, [sp, #20]
    a9aa:	2300      	movs	r3, #0
    a9ac:	9804      	ldr	r0, [sp, #16]
    a9ae:	f000 fbd5 	bl	b15c <__multadd>
    a9b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a9b4:	9005      	str	r0, [sp, #20]
    a9b6:	2b00      	cmp	r3, #0
    a9b8:	d100      	bne.n	a9bc <_dtoa_r+0x8f8>
    a9ba:	e15d      	b.n	ac78 <_dtoa_r+0xbb4>
    a9bc:	2300      	movs	r3, #0
    a9be:	0031      	movs	r1, r6
    a9c0:	220a      	movs	r2, #10
    a9c2:	9804      	ldr	r0, [sp, #16]
    a9c4:	f000 fbca 	bl	b15c <__multadd>
    a9c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a9ca:	0006      	movs	r6, r0
    a9cc:	2b00      	cmp	r3, #0
    a9ce:	dc02      	bgt.n	a9d6 <_dtoa_r+0x912>
    a9d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a9d2:	2b02      	cmp	r3, #2
    a9d4:	dc6d      	bgt.n	aab2 <_dtoa_r+0x9ee>
    a9d6:	2c00      	cmp	r4, #0
    a9d8:	dd05      	ble.n	a9e6 <_dtoa_r+0x922>
    a9da:	0031      	movs	r1, r6
    a9dc:	0022      	movs	r2, r4
    a9de:	9804      	ldr	r0, [sp, #16]
    a9e0:	f000 fd2c 	bl	b43c <__lshift>
    a9e4:	0006      	movs	r6, r0
    a9e6:	0030      	movs	r0, r6
    a9e8:	2d00      	cmp	r5, #0
    a9ea:	d011      	beq.n	aa10 <_dtoa_r+0x94c>
    a9ec:	6871      	ldr	r1, [r6, #4]
    a9ee:	9804      	ldr	r0, [sp, #16]
    a9f0:	f000 fb63 	bl	b0ba <_Balloc>
    a9f4:	0031      	movs	r1, r6
    a9f6:	0004      	movs	r4, r0
    a9f8:	6933      	ldr	r3, [r6, #16]
    a9fa:	310c      	adds	r1, #12
    a9fc:	1c9a      	adds	r2, r3, #2
    a9fe:	0092      	lsls	r2, r2, #2
    aa00:	300c      	adds	r0, #12
    aa02:	f7fe fa83 	bl	8f0c <memcpy>
    aa06:	2201      	movs	r2, #1
    aa08:	0021      	movs	r1, r4
    aa0a:	9804      	ldr	r0, [sp, #16]
    aa0c:	f000 fd16 	bl	b43c <__lshift>
    aa10:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    aa12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aa14:	3f01      	subs	r7, #1
    aa16:	930b      	str	r3, [sp, #44]	; 0x2c
    aa18:	19db      	adds	r3, r3, r7
    aa1a:	0037      	movs	r7, r6
    aa1c:	0006      	movs	r6, r0
    aa1e:	930f      	str	r3, [sp, #60]	; 0x3c
    aa20:	9908      	ldr	r1, [sp, #32]
    aa22:	9805      	ldr	r0, [sp, #20]
    aa24:	f7ff faca 	bl	9fbc <quorem>
    aa28:	0039      	movs	r1, r7
    aa2a:	900d      	str	r0, [sp, #52]	; 0x34
    aa2c:	0004      	movs	r4, r0
    aa2e:	9805      	ldr	r0, [sp, #20]
    aa30:	f000 fd55 	bl	b4de <__mcmp>
    aa34:	0032      	movs	r2, r6
    aa36:	900e      	str	r0, [sp, #56]	; 0x38
    aa38:	9908      	ldr	r1, [sp, #32]
    aa3a:	9804      	ldr	r0, [sp, #16]
    aa3c:	f000 fd68 	bl	b510 <__mdiff>
    aa40:	2301      	movs	r3, #1
    aa42:	930c      	str	r3, [sp, #48]	; 0x30
    aa44:	68c3      	ldr	r3, [r0, #12]
    aa46:	3430      	adds	r4, #48	; 0x30
    aa48:	0005      	movs	r5, r0
    aa4a:	2b00      	cmp	r3, #0
    aa4c:	d104      	bne.n	aa58 <_dtoa_r+0x994>
    aa4e:	0001      	movs	r1, r0
    aa50:	9805      	ldr	r0, [sp, #20]
    aa52:	f000 fd44 	bl	b4de <__mcmp>
    aa56:	900c      	str	r0, [sp, #48]	; 0x30
    aa58:	0029      	movs	r1, r5
    aa5a:	9804      	ldr	r0, [sp, #16]
    aa5c:	f000 fb65 	bl	b12a <_Bfree>
    aa60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aa62:	9a22      	ldr	r2, [sp, #136]	; 0x88
    aa64:	4313      	orrs	r3, r2
    aa66:	d000      	beq.n	aa6a <_dtoa_r+0x9a6>
    aa68:	e089      	b.n	ab7e <_dtoa_r+0xaba>
    aa6a:	9a06      	ldr	r2, [sp, #24]
    aa6c:	3301      	adds	r3, #1
    aa6e:	4213      	tst	r3, r2
    aa70:	d000      	beq.n	aa74 <_dtoa_r+0x9b0>
    aa72:	e084      	b.n	ab7e <_dtoa_r+0xaba>
    aa74:	2c39      	cmp	r4, #57	; 0x39
    aa76:	d100      	bne.n	aa7a <_dtoa_r+0x9b6>
    aa78:	e0a3      	b.n	abc2 <_dtoa_r+0xafe>
    aa7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aa7c:	2b00      	cmp	r3, #0
    aa7e:	dd01      	ble.n	aa84 <_dtoa_r+0x9c0>
    aa80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    aa82:	3431      	adds	r4, #49	; 0x31
    aa84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aa86:	1c5d      	adds	r5, r3, #1
    aa88:	701c      	strb	r4, [r3, #0]
    aa8a:	e027      	b.n	aadc <_dtoa_r+0xa18>
    aa8c:	2b04      	cmp	r3, #4
    aa8e:	d100      	bne.n	aa92 <_dtoa_r+0x9ce>
    aa90:	e769      	b.n	a966 <_dtoa_r+0x8a2>
    aa92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    aa94:	331c      	adds	r3, #28
    aa96:	18d2      	adds	r2, r2, r3
    aa98:	920b      	str	r2, [sp, #44]	; 0x2c
    aa9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aa9c:	18e4      	adds	r4, r4, r3
    aa9e:	18d3      	adds	r3, r2, r3
    aaa0:	e760      	b.n	a964 <_dtoa_r+0x8a0>
    aaa2:	0003      	movs	r3, r0
    aaa4:	e7f5      	b.n	aa92 <_dtoa_r+0x9ce>
    aaa6:	2f00      	cmp	r7, #0
    aaa8:	dc3c      	bgt.n	ab24 <_dtoa_r+0xa60>
    aaaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    aaac:	2b02      	cmp	r3, #2
    aaae:	dd39      	ble.n	ab24 <_dtoa_r+0xa60>
    aab0:	970d      	str	r7, [sp, #52]	; 0x34
    aab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aab4:	2b00      	cmp	r3, #0
    aab6:	d10c      	bne.n	aad2 <_dtoa_r+0xa0e>
    aab8:	9908      	ldr	r1, [sp, #32]
    aaba:	2205      	movs	r2, #5
    aabc:	9804      	ldr	r0, [sp, #16]
    aabe:	f000 fb4d 	bl	b15c <__multadd>
    aac2:	9008      	str	r0, [sp, #32]
    aac4:	0001      	movs	r1, r0
    aac6:	9805      	ldr	r0, [sp, #20]
    aac8:	f000 fd09 	bl	b4de <__mcmp>
    aacc:	2800      	cmp	r0, #0
    aace:	dd00      	ble.n	aad2 <_dtoa_r+0xa0e>
    aad0:	e55a      	b.n	a588 <_dtoa_r+0x4c4>
    aad2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    aad4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    aad6:	43db      	mvns	r3, r3
    aad8:	9303      	str	r3, [sp, #12]
    aada:	2700      	movs	r7, #0
    aadc:	9908      	ldr	r1, [sp, #32]
    aade:	9804      	ldr	r0, [sp, #16]
    aae0:	f000 fb23 	bl	b12a <_Bfree>
    aae4:	2e00      	cmp	r6, #0
    aae6:	d100      	bne.n	aaea <_dtoa_r+0xa26>
    aae8:	e63f      	b.n	a76a <_dtoa_r+0x6a6>
    aaea:	2f00      	cmp	r7, #0
    aaec:	d005      	beq.n	aafa <_dtoa_r+0xa36>
    aaee:	42b7      	cmp	r7, r6
    aaf0:	d003      	beq.n	aafa <_dtoa_r+0xa36>
    aaf2:	0039      	movs	r1, r7
    aaf4:	9804      	ldr	r0, [sp, #16]
    aaf6:	f000 fb18 	bl	b12a <_Bfree>
    aafa:	0031      	movs	r1, r6
    aafc:	9804      	ldr	r0, [sp, #16]
    aafe:	f000 fb14 	bl	b12a <_Bfree>
    ab02:	e632      	b.n	a76a <_dtoa_r+0x6a6>
    ab04:	9508      	str	r5, [sp, #32]
    ab06:	002e      	movs	r6, r5
    ab08:	e7e3      	b.n	aad2 <_dtoa_r+0xa0e>
    ab0a:	2300      	movs	r3, #0
    ab0c:	9308      	str	r3, [sp, #32]
    ab0e:	001e      	movs	r6, r3
    ab10:	e7df      	b.n	aad2 <_dtoa_r+0xa0e>
    ab12:	46c0      	nop			; (mov r8, r8)
    ab14:	40240000 	.word	0x40240000
    ab18:	00000433 	.word	0x00000433
    ab1c:	9603      	str	r6, [sp, #12]
    ab1e:	9508      	str	r5, [sp, #32]
    ab20:	002e      	movs	r6, r5
    ab22:	e531      	b.n	a588 <_dtoa_r+0x4c4>
    ab24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ab26:	970d      	str	r7, [sp, #52]	; 0x34
    ab28:	2b00      	cmp	r3, #0
    ab2a:	d000      	beq.n	ab2e <_dtoa_r+0xa6a>
    ab2c:	e753      	b.n	a9d6 <_dtoa_r+0x912>
    ab2e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ab30:	9908      	ldr	r1, [sp, #32]
    ab32:	9805      	ldr	r0, [sp, #20]
    ab34:	f7ff fa42 	bl	9fbc <quorem>
    ab38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ab3a:	3030      	adds	r0, #48	; 0x30
    ab3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ab3e:	7028      	strb	r0, [r5, #0]
    ab40:	3501      	adds	r5, #1
    ab42:	0004      	movs	r4, r0
    ab44:	1aeb      	subs	r3, r5, r3
    ab46:	429a      	cmp	r2, r3
    ab48:	dc78      	bgt.n	ac3c <_dtoa_r+0xb78>
    ab4a:	1e15      	subs	r5, r2, #0
    ab4c:	dc00      	bgt.n	ab50 <_dtoa_r+0xa8c>
    ab4e:	2501      	movs	r5, #1
    ab50:	2700      	movs	r7, #0
    ab52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ab54:	195d      	adds	r5, r3, r5
    ab56:	9905      	ldr	r1, [sp, #20]
    ab58:	2201      	movs	r2, #1
    ab5a:	9804      	ldr	r0, [sp, #16]
    ab5c:	f000 fc6e 	bl	b43c <__lshift>
    ab60:	9908      	ldr	r1, [sp, #32]
    ab62:	9005      	str	r0, [sp, #20]
    ab64:	f000 fcbb 	bl	b4de <__mcmp>
    ab68:	2800      	cmp	r0, #0
    ab6a:	dc2f      	bgt.n	abcc <_dtoa_r+0xb08>
    ab6c:	d101      	bne.n	ab72 <_dtoa_r+0xaae>
    ab6e:	07e3      	lsls	r3, r4, #31
    ab70:	d42c      	bmi.n	abcc <_dtoa_r+0xb08>
    ab72:	1e6b      	subs	r3, r5, #1
    ab74:	781a      	ldrb	r2, [r3, #0]
    ab76:	2a30      	cmp	r2, #48	; 0x30
    ab78:	d1b0      	bne.n	aadc <_dtoa_r+0xa18>
    ab7a:	001d      	movs	r5, r3
    ab7c:	e7f9      	b.n	ab72 <_dtoa_r+0xaae>
    ab7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ab80:	2b00      	cmp	r3, #0
    ab82:	db07      	blt.n	ab94 <_dtoa_r+0xad0>
    ab84:	001d      	movs	r5, r3
    ab86:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ab88:	431d      	orrs	r5, r3
    ab8a:	d126      	bne.n	abda <_dtoa_r+0xb16>
    ab8c:	2301      	movs	r3, #1
    ab8e:	9a06      	ldr	r2, [sp, #24]
    ab90:	4213      	tst	r3, r2
    ab92:	d122      	bne.n	abda <_dtoa_r+0xb16>
    ab94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ab96:	2b00      	cmp	r3, #0
    ab98:	dc00      	bgt.n	ab9c <_dtoa_r+0xad8>
    ab9a:	e773      	b.n	aa84 <_dtoa_r+0x9c0>
    ab9c:	9905      	ldr	r1, [sp, #20]
    ab9e:	2201      	movs	r2, #1
    aba0:	9804      	ldr	r0, [sp, #16]
    aba2:	f000 fc4b 	bl	b43c <__lshift>
    aba6:	9908      	ldr	r1, [sp, #32]
    aba8:	9005      	str	r0, [sp, #20]
    abaa:	f000 fc98 	bl	b4de <__mcmp>
    abae:	2800      	cmp	r0, #0
    abb0:	dc04      	bgt.n	abbc <_dtoa_r+0xaf8>
    abb2:	d000      	beq.n	abb6 <_dtoa_r+0xaf2>
    abb4:	e766      	b.n	aa84 <_dtoa_r+0x9c0>
    abb6:	07e3      	lsls	r3, r4, #31
    abb8:	d400      	bmi.n	abbc <_dtoa_r+0xaf8>
    abba:	e763      	b.n	aa84 <_dtoa_r+0x9c0>
    abbc:	2c39      	cmp	r4, #57	; 0x39
    abbe:	d000      	beq.n	abc2 <_dtoa_r+0xafe>
    abc0:	e75e      	b.n	aa80 <_dtoa_r+0x9bc>
    abc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    abc6:	1c5d      	adds	r5, r3, #1
    abc8:	2339      	movs	r3, #57	; 0x39
    abca:	7013      	strb	r3, [r2, #0]
    abcc:	1e6b      	subs	r3, r5, #1
    abce:	781a      	ldrb	r2, [r3, #0]
    abd0:	2a39      	cmp	r2, #57	; 0x39
    abd2:	d03b      	beq.n	ac4c <_dtoa_r+0xb88>
    abd4:	3201      	adds	r2, #1
    abd6:	701a      	strb	r2, [r3, #0]
    abd8:	e780      	b.n	aadc <_dtoa_r+0xa18>
    abda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abdc:	3301      	adds	r3, #1
    abde:	930d      	str	r3, [sp, #52]	; 0x34
    abe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    abe2:	2b00      	cmp	r3, #0
    abe4:	dd05      	ble.n	abf2 <_dtoa_r+0xb2e>
    abe6:	2c39      	cmp	r4, #57	; 0x39
    abe8:	d0eb      	beq.n	abc2 <_dtoa_r+0xafe>
    abea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    abec:	3401      	adds	r4, #1
    abee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abf0:	e74a      	b.n	aa88 <_dtoa_r+0x9c4>
    abf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    abf6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    abf8:	701c      	strb	r4, [r3, #0]
    abfa:	4293      	cmp	r3, r2
    abfc:	d0ab      	beq.n	ab56 <_dtoa_r+0xa92>
    abfe:	2300      	movs	r3, #0
    ac00:	220a      	movs	r2, #10
    ac02:	9905      	ldr	r1, [sp, #20]
    ac04:	9804      	ldr	r0, [sp, #16]
    ac06:	f000 faa9 	bl	b15c <__multadd>
    ac0a:	2300      	movs	r3, #0
    ac0c:	9005      	str	r0, [sp, #20]
    ac0e:	220a      	movs	r2, #10
    ac10:	0039      	movs	r1, r7
    ac12:	9804      	ldr	r0, [sp, #16]
    ac14:	42b7      	cmp	r7, r6
    ac16:	d106      	bne.n	ac26 <_dtoa_r+0xb62>
    ac18:	f000 faa0 	bl	b15c <__multadd>
    ac1c:	0007      	movs	r7, r0
    ac1e:	0006      	movs	r6, r0
    ac20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ac22:	930b      	str	r3, [sp, #44]	; 0x2c
    ac24:	e6fc      	b.n	aa20 <_dtoa_r+0x95c>
    ac26:	f000 fa99 	bl	b15c <__multadd>
    ac2a:	0031      	movs	r1, r6
    ac2c:	0007      	movs	r7, r0
    ac2e:	2300      	movs	r3, #0
    ac30:	220a      	movs	r2, #10
    ac32:	9804      	ldr	r0, [sp, #16]
    ac34:	f000 fa92 	bl	b15c <__multadd>
    ac38:	0006      	movs	r6, r0
    ac3a:	e7f1      	b.n	ac20 <_dtoa_r+0xb5c>
    ac3c:	2300      	movs	r3, #0
    ac3e:	220a      	movs	r2, #10
    ac40:	9905      	ldr	r1, [sp, #20]
    ac42:	9804      	ldr	r0, [sp, #16]
    ac44:	f000 fa8a 	bl	b15c <__multadd>
    ac48:	9005      	str	r0, [sp, #20]
    ac4a:	e771      	b.n	ab30 <_dtoa_r+0xa6c>
    ac4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ac4e:	429a      	cmp	r2, r3
    ac50:	d105      	bne.n	ac5e <_dtoa_r+0xb9a>
    ac52:	9b03      	ldr	r3, [sp, #12]
    ac54:	3301      	adds	r3, #1
    ac56:	9303      	str	r3, [sp, #12]
    ac58:	2331      	movs	r3, #49	; 0x31
    ac5a:	7013      	strb	r3, [r2, #0]
    ac5c:	e73e      	b.n	aadc <_dtoa_r+0xa18>
    ac5e:	001d      	movs	r5, r3
    ac60:	e7b4      	b.n	abcc <_dtoa_r+0xb08>
    ac62:	4b0a      	ldr	r3, [pc, #40]	; (ac8c <_dtoa_r+0xbc8>)
    ac64:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ac66:	930a      	str	r3, [sp, #40]	; 0x28
    ac68:	4b09      	ldr	r3, [pc, #36]	; (ac90 <_dtoa_r+0xbcc>)
    ac6a:	2a00      	cmp	r2, #0
    ac6c:	d001      	beq.n	ac72 <_dtoa_r+0xbae>
    ac6e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ac70:	6013      	str	r3, [r2, #0]
    ac72:	980a      	ldr	r0, [sp, #40]	; 0x28
    ac74:	b01d      	add	sp, #116	; 0x74
    ac76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ac7a:	2b00      	cmp	r3, #0
    ac7c:	dd00      	ble.n	ac80 <_dtoa_r+0xbbc>
    ac7e:	e756      	b.n	ab2e <_dtoa_r+0xa6a>
    ac80:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ac82:	2b02      	cmp	r3, #2
    ac84:	dc00      	bgt.n	ac88 <_dtoa_r+0xbc4>
    ac86:	e752      	b.n	ab2e <_dtoa_r+0xa6a>
    ac88:	e713      	b.n	aab2 <_dtoa_r+0x9ee>
    ac8a:	46c0      	nop			; (mov r8, r8)
    ac8c:	0000ee17 	.word	0x0000ee17
    ac90:	0000ee1f 	.word	0x0000ee1f

0000ac94 <__sflush_r>:
    ac94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ac96:	898a      	ldrh	r2, [r1, #12]
    ac98:	0005      	movs	r5, r0
    ac9a:	000c      	movs	r4, r1
    ac9c:	0713      	lsls	r3, r2, #28
    ac9e:	d460      	bmi.n	ad62 <__sflush_r+0xce>
    aca0:	684b      	ldr	r3, [r1, #4]
    aca2:	2b00      	cmp	r3, #0
    aca4:	dc04      	bgt.n	acb0 <__sflush_r+0x1c>
    aca6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    aca8:	2b00      	cmp	r3, #0
    acaa:	dc01      	bgt.n	acb0 <__sflush_r+0x1c>
    acac:	2000      	movs	r0, #0
    acae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    acb0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    acb2:	2f00      	cmp	r7, #0
    acb4:	d0fa      	beq.n	acac <__sflush_r+0x18>
    acb6:	2300      	movs	r3, #0
    acb8:	682e      	ldr	r6, [r5, #0]
    acba:	602b      	str	r3, [r5, #0]
    acbc:	2380      	movs	r3, #128	; 0x80
    acbe:	015b      	lsls	r3, r3, #5
    acc0:	401a      	ands	r2, r3
    acc2:	d034      	beq.n	ad2e <__sflush_r+0x9a>
    acc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    acc6:	89a3      	ldrh	r3, [r4, #12]
    acc8:	075b      	lsls	r3, r3, #29
    acca:	d506      	bpl.n	acda <__sflush_r+0x46>
    accc:	6863      	ldr	r3, [r4, #4]
    acce:	1ac0      	subs	r0, r0, r3
    acd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    acd2:	2b00      	cmp	r3, #0
    acd4:	d001      	beq.n	acda <__sflush_r+0x46>
    acd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    acd8:	1ac0      	subs	r0, r0, r3
    acda:	0002      	movs	r2, r0
    acdc:	6a21      	ldr	r1, [r4, #32]
    acde:	2300      	movs	r3, #0
    ace0:	0028      	movs	r0, r5
    ace2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    ace4:	47b8      	blx	r7
    ace6:	89a1      	ldrh	r1, [r4, #12]
    ace8:	1c43      	adds	r3, r0, #1
    acea:	d106      	bne.n	acfa <__sflush_r+0x66>
    acec:	682b      	ldr	r3, [r5, #0]
    acee:	2b1d      	cmp	r3, #29
    acf0:	d831      	bhi.n	ad56 <__sflush_r+0xc2>
    acf2:	4a2c      	ldr	r2, [pc, #176]	; (ada4 <__sflush_r+0x110>)
    acf4:	40da      	lsrs	r2, r3
    acf6:	07d3      	lsls	r3, r2, #31
    acf8:	d52d      	bpl.n	ad56 <__sflush_r+0xc2>
    acfa:	2300      	movs	r3, #0
    acfc:	6063      	str	r3, [r4, #4]
    acfe:	6923      	ldr	r3, [r4, #16]
    ad00:	6023      	str	r3, [r4, #0]
    ad02:	04cb      	lsls	r3, r1, #19
    ad04:	d505      	bpl.n	ad12 <__sflush_r+0x7e>
    ad06:	1c43      	adds	r3, r0, #1
    ad08:	d102      	bne.n	ad10 <__sflush_r+0x7c>
    ad0a:	682b      	ldr	r3, [r5, #0]
    ad0c:	2b00      	cmp	r3, #0
    ad0e:	d100      	bne.n	ad12 <__sflush_r+0x7e>
    ad10:	6560      	str	r0, [r4, #84]	; 0x54
    ad12:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ad14:	602e      	str	r6, [r5, #0]
    ad16:	2900      	cmp	r1, #0
    ad18:	d0c8      	beq.n	acac <__sflush_r+0x18>
    ad1a:	0023      	movs	r3, r4
    ad1c:	3344      	adds	r3, #68	; 0x44
    ad1e:	4299      	cmp	r1, r3
    ad20:	d002      	beq.n	ad28 <__sflush_r+0x94>
    ad22:	0028      	movs	r0, r5
    ad24:	f7fe f904 	bl	8f30 <_free_r>
    ad28:	2000      	movs	r0, #0
    ad2a:	6360      	str	r0, [r4, #52]	; 0x34
    ad2c:	e7bf      	b.n	acae <__sflush_r+0x1a>
    ad2e:	2301      	movs	r3, #1
    ad30:	6a21      	ldr	r1, [r4, #32]
    ad32:	0028      	movs	r0, r5
    ad34:	47b8      	blx	r7
    ad36:	1c43      	adds	r3, r0, #1
    ad38:	d1c5      	bne.n	acc6 <__sflush_r+0x32>
    ad3a:	682b      	ldr	r3, [r5, #0]
    ad3c:	2b00      	cmp	r3, #0
    ad3e:	d0c2      	beq.n	acc6 <__sflush_r+0x32>
    ad40:	2b1d      	cmp	r3, #29
    ad42:	d001      	beq.n	ad48 <__sflush_r+0xb4>
    ad44:	2b16      	cmp	r3, #22
    ad46:	d101      	bne.n	ad4c <__sflush_r+0xb8>
    ad48:	602e      	str	r6, [r5, #0]
    ad4a:	e7af      	b.n	acac <__sflush_r+0x18>
    ad4c:	2340      	movs	r3, #64	; 0x40
    ad4e:	89a2      	ldrh	r2, [r4, #12]
    ad50:	4313      	orrs	r3, r2
    ad52:	81a3      	strh	r3, [r4, #12]
    ad54:	e7ab      	b.n	acae <__sflush_r+0x1a>
    ad56:	2340      	movs	r3, #64	; 0x40
    ad58:	430b      	orrs	r3, r1
    ad5a:	2001      	movs	r0, #1
    ad5c:	81a3      	strh	r3, [r4, #12]
    ad5e:	4240      	negs	r0, r0
    ad60:	e7a5      	b.n	acae <__sflush_r+0x1a>
    ad62:	690f      	ldr	r7, [r1, #16]
    ad64:	2f00      	cmp	r7, #0
    ad66:	d0a1      	beq.n	acac <__sflush_r+0x18>
    ad68:	680b      	ldr	r3, [r1, #0]
    ad6a:	600f      	str	r7, [r1, #0]
    ad6c:	1bdb      	subs	r3, r3, r7
    ad6e:	9301      	str	r3, [sp, #4]
    ad70:	2300      	movs	r3, #0
    ad72:	0792      	lsls	r2, r2, #30
    ad74:	d100      	bne.n	ad78 <__sflush_r+0xe4>
    ad76:	694b      	ldr	r3, [r1, #20]
    ad78:	60a3      	str	r3, [r4, #8]
    ad7a:	9b01      	ldr	r3, [sp, #4]
    ad7c:	2b00      	cmp	r3, #0
    ad7e:	dc00      	bgt.n	ad82 <__sflush_r+0xee>
    ad80:	e794      	b.n	acac <__sflush_r+0x18>
    ad82:	9b01      	ldr	r3, [sp, #4]
    ad84:	003a      	movs	r2, r7
    ad86:	6a21      	ldr	r1, [r4, #32]
    ad88:	0028      	movs	r0, r5
    ad8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    ad8c:	47b0      	blx	r6
    ad8e:	2800      	cmp	r0, #0
    ad90:	dc03      	bgt.n	ad9a <__sflush_r+0x106>
    ad92:	2340      	movs	r3, #64	; 0x40
    ad94:	89a2      	ldrh	r2, [r4, #12]
    ad96:	4313      	orrs	r3, r2
    ad98:	e7df      	b.n	ad5a <__sflush_r+0xc6>
    ad9a:	9b01      	ldr	r3, [sp, #4]
    ad9c:	183f      	adds	r7, r7, r0
    ad9e:	1a1b      	subs	r3, r3, r0
    ada0:	9301      	str	r3, [sp, #4]
    ada2:	e7ea      	b.n	ad7a <__sflush_r+0xe6>
    ada4:	20400001 	.word	0x20400001

0000ada8 <_fflush_r>:
    ada8:	690b      	ldr	r3, [r1, #16]
    adaa:	b570      	push	{r4, r5, r6, lr}
    adac:	0005      	movs	r5, r0
    adae:	000c      	movs	r4, r1
    adb0:	2b00      	cmp	r3, #0
    adb2:	d101      	bne.n	adb8 <_fflush_r+0x10>
    adb4:	2000      	movs	r0, #0
    adb6:	bd70      	pop	{r4, r5, r6, pc}
    adb8:	2800      	cmp	r0, #0
    adba:	d004      	beq.n	adc6 <_fflush_r+0x1e>
    adbc:	6983      	ldr	r3, [r0, #24]
    adbe:	2b00      	cmp	r3, #0
    adc0:	d101      	bne.n	adc6 <_fflush_r+0x1e>
    adc2:	f000 f85f 	bl	ae84 <__sinit>
    adc6:	4b0b      	ldr	r3, [pc, #44]	; (adf4 <_fflush_r+0x4c>)
    adc8:	429c      	cmp	r4, r3
    adca:	d109      	bne.n	ade0 <_fflush_r+0x38>
    adcc:	686c      	ldr	r4, [r5, #4]
    adce:	220c      	movs	r2, #12
    add0:	5ea3      	ldrsh	r3, [r4, r2]
    add2:	2b00      	cmp	r3, #0
    add4:	d0ee      	beq.n	adb4 <_fflush_r+0xc>
    add6:	0021      	movs	r1, r4
    add8:	0028      	movs	r0, r5
    adda:	f7ff ff5b 	bl	ac94 <__sflush_r>
    adde:	e7ea      	b.n	adb6 <_fflush_r+0xe>
    ade0:	4b05      	ldr	r3, [pc, #20]	; (adf8 <_fflush_r+0x50>)
    ade2:	429c      	cmp	r4, r3
    ade4:	d101      	bne.n	adea <_fflush_r+0x42>
    ade6:	68ac      	ldr	r4, [r5, #8]
    ade8:	e7f1      	b.n	adce <_fflush_r+0x26>
    adea:	4b04      	ldr	r3, [pc, #16]	; (adfc <_fflush_r+0x54>)
    adec:	429c      	cmp	r4, r3
    adee:	d1ee      	bne.n	adce <_fflush_r+0x26>
    adf0:	68ec      	ldr	r4, [r5, #12]
    adf2:	e7ec      	b.n	adce <_fflush_r+0x26>
    adf4:	0000ee44 	.word	0x0000ee44
    adf8:	0000ee64 	.word	0x0000ee64
    adfc:	0000ee24 	.word	0x0000ee24

0000ae00 <_cleanup_r>:
    ae00:	b510      	push	{r4, lr}
    ae02:	4902      	ldr	r1, [pc, #8]	; (ae0c <_cleanup_r+0xc>)
    ae04:	f000 f8b2 	bl	af6c <_fwalk_reent>
    ae08:	bd10      	pop	{r4, pc}
    ae0a:	46c0      	nop			; (mov r8, r8)
    ae0c:	0000ada9 	.word	0x0000ada9

0000ae10 <std.isra.0>:
    ae10:	2300      	movs	r3, #0
    ae12:	b510      	push	{r4, lr}
    ae14:	0004      	movs	r4, r0
    ae16:	6003      	str	r3, [r0, #0]
    ae18:	6043      	str	r3, [r0, #4]
    ae1a:	6083      	str	r3, [r0, #8]
    ae1c:	8181      	strh	r1, [r0, #12]
    ae1e:	6643      	str	r3, [r0, #100]	; 0x64
    ae20:	81c2      	strh	r2, [r0, #14]
    ae22:	6103      	str	r3, [r0, #16]
    ae24:	6143      	str	r3, [r0, #20]
    ae26:	6183      	str	r3, [r0, #24]
    ae28:	0019      	movs	r1, r3
    ae2a:	2208      	movs	r2, #8
    ae2c:	305c      	adds	r0, #92	; 0x5c
    ae2e:	f7fe f876 	bl	8f1e <memset>
    ae32:	4b05      	ldr	r3, [pc, #20]	; (ae48 <std.isra.0+0x38>)
    ae34:	6224      	str	r4, [r4, #32]
    ae36:	6263      	str	r3, [r4, #36]	; 0x24
    ae38:	4b04      	ldr	r3, [pc, #16]	; (ae4c <std.isra.0+0x3c>)
    ae3a:	62a3      	str	r3, [r4, #40]	; 0x28
    ae3c:	4b04      	ldr	r3, [pc, #16]	; (ae50 <std.isra.0+0x40>)
    ae3e:	62e3      	str	r3, [r4, #44]	; 0x2c
    ae40:	4b04      	ldr	r3, [pc, #16]	; (ae54 <std.isra.0+0x44>)
    ae42:	6323      	str	r3, [r4, #48]	; 0x30
    ae44:	bd10      	pop	{r4, pc}
    ae46:	46c0      	nop			; (mov r8, r8)
    ae48:	0000b925 	.word	0x0000b925
    ae4c:	0000b94d 	.word	0x0000b94d
    ae50:	0000b985 	.word	0x0000b985
    ae54:	0000b9b1 	.word	0x0000b9b1

0000ae58 <__sfmoreglue>:
    ae58:	b570      	push	{r4, r5, r6, lr}
    ae5a:	2568      	movs	r5, #104	; 0x68
    ae5c:	1e4a      	subs	r2, r1, #1
    ae5e:	4355      	muls	r5, r2
    ae60:	000e      	movs	r6, r1
    ae62:	0029      	movs	r1, r5
    ae64:	3174      	adds	r1, #116	; 0x74
    ae66:	f7fe f8ad 	bl	8fc4 <_malloc_r>
    ae6a:	1e04      	subs	r4, r0, #0
    ae6c:	d008      	beq.n	ae80 <__sfmoreglue+0x28>
    ae6e:	2100      	movs	r1, #0
    ae70:	002a      	movs	r2, r5
    ae72:	6001      	str	r1, [r0, #0]
    ae74:	6046      	str	r6, [r0, #4]
    ae76:	300c      	adds	r0, #12
    ae78:	60a0      	str	r0, [r4, #8]
    ae7a:	3268      	adds	r2, #104	; 0x68
    ae7c:	f7fe f84f 	bl	8f1e <memset>
    ae80:	0020      	movs	r0, r4
    ae82:	bd70      	pop	{r4, r5, r6, pc}

0000ae84 <__sinit>:
    ae84:	6983      	ldr	r3, [r0, #24]
    ae86:	b513      	push	{r0, r1, r4, lr}
    ae88:	0004      	movs	r4, r0
    ae8a:	2b00      	cmp	r3, #0
    ae8c:	d128      	bne.n	aee0 <__sinit+0x5c>
    ae8e:	6483      	str	r3, [r0, #72]	; 0x48
    ae90:	64c3      	str	r3, [r0, #76]	; 0x4c
    ae92:	6503      	str	r3, [r0, #80]	; 0x50
    ae94:	4b13      	ldr	r3, [pc, #76]	; (aee4 <__sinit+0x60>)
    ae96:	4a14      	ldr	r2, [pc, #80]	; (aee8 <__sinit+0x64>)
    ae98:	681b      	ldr	r3, [r3, #0]
    ae9a:	6282      	str	r2, [r0, #40]	; 0x28
    ae9c:	9301      	str	r3, [sp, #4]
    ae9e:	4298      	cmp	r0, r3
    aea0:	d101      	bne.n	aea6 <__sinit+0x22>
    aea2:	2301      	movs	r3, #1
    aea4:	6183      	str	r3, [r0, #24]
    aea6:	0020      	movs	r0, r4
    aea8:	f000 f820 	bl	aeec <__sfp>
    aeac:	6060      	str	r0, [r4, #4]
    aeae:	0020      	movs	r0, r4
    aeb0:	f000 f81c 	bl	aeec <__sfp>
    aeb4:	60a0      	str	r0, [r4, #8]
    aeb6:	0020      	movs	r0, r4
    aeb8:	f000 f818 	bl	aeec <__sfp>
    aebc:	2200      	movs	r2, #0
    aebe:	60e0      	str	r0, [r4, #12]
    aec0:	2104      	movs	r1, #4
    aec2:	6860      	ldr	r0, [r4, #4]
    aec4:	f7ff ffa4 	bl	ae10 <std.isra.0>
    aec8:	2201      	movs	r2, #1
    aeca:	2109      	movs	r1, #9
    aecc:	68a0      	ldr	r0, [r4, #8]
    aece:	f7ff ff9f 	bl	ae10 <std.isra.0>
    aed2:	2202      	movs	r2, #2
    aed4:	2112      	movs	r1, #18
    aed6:	68e0      	ldr	r0, [r4, #12]
    aed8:	f7ff ff9a 	bl	ae10 <std.isra.0>
    aedc:	2301      	movs	r3, #1
    aede:	61a3      	str	r3, [r4, #24]
    aee0:	bd13      	pop	{r0, r1, r4, pc}
    aee2:	46c0      	nop			; (mov r8, r8)
    aee4:	0000ecd4 	.word	0x0000ecd4
    aee8:	0000ae01 	.word	0x0000ae01

0000aeec <__sfp>:
    aeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aeee:	4b1e      	ldr	r3, [pc, #120]	; (af68 <__sfp+0x7c>)
    aef0:	0007      	movs	r7, r0
    aef2:	681e      	ldr	r6, [r3, #0]
    aef4:	69b3      	ldr	r3, [r6, #24]
    aef6:	2b00      	cmp	r3, #0
    aef8:	d102      	bne.n	af00 <__sfp+0x14>
    aefa:	0030      	movs	r0, r6
    aefc:	f7ff ffc2 	bl	ae84 <__sinit>
    af00:	3648      	adds	r6, #72	; 0x48
    af02:	68b4      	ldr	r4, [r6, #8]
    af04:	6873      	ldr	r3, [r6, #4]
    af06:	3b01      	subs	r3, #1
    af08:	d504      	bpl.n	af14 <__sfp+0x28>
    af0a:	6833      	ldr	r3, [r6, #0]
    af0c:	2b00      	cmp	r3, #0
    af0e:	d007      	beq.n	af20 <__sfp+0x34>
    af10:	6836      	ldr	r6, [r6, #0]
    af12:	e7f6      	b.n	af02 <__sfp+0x16>
    af14:	220c      	movs	r2, #12
    af16:	5ea5      	ldrsh	r5, [r4, r2]
    af18:	2d00      	cmp	r5, #0
    af1a:	d00d      	beq.n	af38 <__sfp+0x4c>
    af1c:	3468      	adds	r4, #104	; 0x68
    af1e:	e7f2      	b.n	af06 <__sfp+0x1a>
    af20:	2104      	movs	r1, #4
    af22:	0038      	movs	r0, r7
    af24:	f7ff ff98 	bl	ae58 <__sfmoreglue>
    af28:	6030      	str	r0, [r6, #0]
    af2a:	2800      	cmp	r0, #0
    af2c:	d1f0      	bne.n	af10 <__sfp+0x24>
    af2e:	230c      	movs	r3, #12
    af30:	0004      	movs	r4, r0
    af32:	603b      	str	r3, [r7, #0]
    af34:	0020      	movs	r0, r4
    af36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af38:	2301      	movs	r3, #1
    af3a:	0020      	movs	r0, r4
    af3c:	425b      	negs	r3, r3
    af3e:	81e3      	strh	r3, [r4, #14]
    af40:	3302      	adds	r3, #2
    af42:	81a3      	strh	r3, [r4, #12]
    af44:	6665      	str	r5, [r4, #100]	; 0x64
    af46:	6025      	str	r5, [r4, #0]
    af48:	60a5      	str	r5, [r4, #8]
    af4a:	6065      	str	r5, [r4, #4]
    af4c:	6125      	str	r5, [r4, #16]
    af4e:	6165      	str	r5, [r4, #20]
    af50:	61a5      	str	r5, [r4, #24]
    af52:	2208      	movs	r2, #8
    af54:	0029      	movs	r1, r5
    af56:	305c      	adds	r0, #92	; 0x5c
    af58:	f7fd ffe1 	bl	8f1e <memset>
    af5c:	6365      	str	r5, [r4, #52]	; 0x34
    af5e:	63a5      	str	r5, [r4, #56]	; 0x38
    af60:	64a5      	str	r5, [r4, #72]	; 0x48
    af62:	64e5      	str	r5, [r4, #76]	; 0x4c
    af64:	e7e6      	b.n	af34 <__sfp+0x48>
    af66:	46c0      	nop			; (mov r8, r8)
    af68:	0000ecd4 	.word	0x0000ecd4

0000af6c <_fwalk_reent>:
    af6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    af6e:	0004      	movs	r4, r0
    af70:	0007      	movs	r7, r0
    af72:	2600      	movs	r6, #0
    af74:	9101      	str	r1, [sp, #4]
    af76:	3448      	adds	r4, #72	; 0x48
    af78:	2c00      	cmp	r4, #0
    af7a:	d101      	bne.n	af80 <_fwalk_reent+0x14>
    af7c:	0030      	movs	r0, r6
    af7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    af80:	6863      	ldr	r3, [r4, #4]
    af82:	68a5      	ldr	r5, [r4, #8]
    af84:	9300      	str	r3, [sp, #0]
    af86:	9b00      	ldr	r3, [sp, #0]
    af88:	3b01      	subs	r3, #1
    af8a:	9300      	str	r3, [sp, #0]
    af8c:	d501      	bpl.n	af92 <_fwalk_reent+0x26>
    af8e:	6824      	ldr	r4, [r4, #0]
    af90:	e7f2      	b.n	af78 <_fwalk_reent+0xc>
    af92:	89ab      	ldrh	r3, [r5, #12]
    af94:	2b01      	cmp	r3, #1
    af96:	d908      	bls.n	afaa <_fwalk_reent+0x3e>
    af98:	220e      	movs	r2, #14
    af9a:	5eab      	ldrsh	r3, [r5, r2]
    af9c:	3301      	adds	r3, #1
    af9e:	d004      	beq.n	afaa <_fwalk_reent+0x3e>
    afa0:	0029      	movs	r1, r5
    afa2:	0038      	movs	r0, r7
    afa4:	9b01      	ldr	r3, [sp, #4]
    afa6:	4798      	blx	r3
    afa8:	4306      	orrs	r6, r0
    afaa:	3568      	adds	r5, #104	; 0x68
    afac:	e7eb      	b.n	af86 <_fwalk_reent+0x1a>
	...

0000afb0 <_localeconv_r>:
    afb0:	4b03      	ldr	r3, [pc, #12]	; (afc0 <_localeconv_r+0x10>)
    afb2:	681b      	ldr	r3, [r3, #0]
    afb4:	6a18      	ldr	r0, [r3, #32]
    afb6:	2800      	cmp	r0, #0
    afb8:	d100      	bne.n	afbc <_localeconv_r+0xc>
    afba:	4802      	ldr	r0, [pc, #8]	; (afc4 <_localeconv_r+0x14>)
    afbc:	30f0      	adds	r0, #240	; 0xf0
    afbe:	4770      	bx	lr
    afc0:	20000078 	.word	0x20000078
    afc4:	200000dc 	.word	0x200000dc

0000afc8 <__swhatbuf_r>:
    afc8:	b570      	push	{r4, r5, r6, lr}
    afca:	000e      	movs	r6, r1
    afcc:	001d      	movs	r5, r3
    afce:	230e      	movs	r3, #14
    afd0:	5ec9      	ldrsh	r1, [r1, r3]
    afd2:	b090      	sub	sp, #64	; 0x40
    afd4:	0014      	movs	r4, r2
    afd6:	2900      	cmp	r1, #0
    afd8:	da07      	bge.n	afea <__swhatbuf_r+0x22>
    afda:	2300      	movs	r3, #0
    afdc:	602b      	str	r3, [r5, #0]
    afde:	89b3      	ldrh	r3, [r6, #12]
    afe0:	061b      	lsls	r3, r3, #24
    afe2:	d411      	bmi.n	b008 <__swhatbuf_r+0x40>
    afe4:	2380      	movs	r3, #128	; 0x80
    afe6:	00db      	lsls	r3, r3, #3
    afe8:	e00f      	b.n	b00a <__swhatbuf_r+0x42>
    afea:	aa01      	add	r2, sp, #4
    afec:	f000 fd0c 	bl	ba08 <_fstat_r>
    aff0:	2800      	cmp	r0, #0
    aff2:	dbf2      	blt.n	afda <__swhatbuf_r+0x12>
    aff4:	22f0      	movs	r2, #240	; 0xf0
    aff6:	9b02      	ldr	r3, [sp, #8]
    aff8:	0212      	lsls	r2, r2, #8
    affa:	4013      	ands	r3, r2
    affc:	4a05      	ldr	r2, [pc, #20]	; (b014 <__swhatbuf_r+0x4c>)
    affe:	189b      	adds	r3, r3, r2
    b000:	425a      	negs	r2, r3
    b002:	4153      	adcs	r3, r2
    b004:	602b      	str	r3, [r5, #0]
    b006:	e7ed      	b.n	afe4 <__swhatbuf_r+0x1c>
    b008:	2340      	movs	r3, #64	; 0x40
    b00a:	2000      	movs	r0, #0
    b00c:	6023      	str	r3, [r4, #0]
    b00e:	b010      	add	sp, #64	; 0x40
    b010:	bd70      	pop	{r4, r5, r6, pc}
    b012:	46c0      	nop			; (mov r8, r8)
    b014:	ffffe000 	.word	0xffffe000

0000b018 <__smakebuf_r>:
    b018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b01a:	2602      	movs	r6, #2
    b01c:	898b      	ldrh	r3, [r1, #12]
    b01e:	0005      	movs	r5, r0
    b020:	000c      	movs	r4, r1
    b022:	4233      	tst	r3, r6
    b024:	d006      	beq.n	b034 <__smakebuf_r+0x1c>
    b026:	0023      	movs	r3, r4
    b028:	3347      	adds	r3, #71	; 0x47
    b02a:	6023      	str	r3, [r4, #0]
    b02c:	6123      	str	r3, [r4, #16]
    b02e:	2301      	movs	r3, #1
    b030:	6163      	str	r3, [r4, #20]
    b032:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    b034:	ab01      	add	r3, sp, #4
    b036:	466a      	mov	r2, sp
    b038:	f7ff ffc6 	bl	afc8 <__swhatbuf_r>
    b03c:	9900      	ldr	r1, [sp, #0]
    b03e:	0007      	movs	r7, r0
    b040:	0028      	movs	r0, r5
    b042:	f7fd ffbf 	bl	8fc4 <_malloc_r>
    b046:	2800      	cmp	r0, #0
    b048:	d108      	bne.n	b05c <__smakebuf_r+0x44>
    b04a:	220c      	movs	r2, #12
    b04c:	5ea3      	ldrsh	r3, [r4, r2]
    b04e:	059a      	lsls	r2, r3, #22
    b050:	d4ef      	bmi.n	b032 <__smakebuf_r+0x1a>
    b052:	2203      	movs	r2, #3
    b054:	4393      	bics	r3, r2
    b056:	431e      	orrs	r6, r3
    b058:	81a6      	strh	r6, [r4, #12]
    b05a:	e7e4      	b.n	b026 <__smakebuf_r+0xe>
    b05c:	4b0f      	ldr	r3, [pc, #60]	; (b09c <__smakebuf_r+0x84>)
    b05e:	62ab      	str	r3, [r5, #40]	; 0x28
    b060:	2380      	movs	r3, #128	; 0x80
    b062:	89a2      	ldrh	r2, [r4, #12]
    b064:	6020      	str	r0, [r4, #0]
    b066:	4313      	orrs	r3, r2
    b068:	81a3      	strh	r3, [r4, #12]
    b06a:	9b00      	ldr	r3, [sp, #0]
    b06c:	6120      	str	r0, [r4, #16]
    b06e:	6163      	str	r3, [r4, #20]
    b070:	9b01      	ldr	r3, [sp, #4]
    b072:	2b00      	cmp	r3, #0
    b074:	d00d      	beq.n	b092 <__smakebuf_r+0x7a>
    b076:	230e      	movs	r3, #14
    b078:	5ee1      	ldrsh	r1, [r4, r3]
    b07a:	0028      	movs	r0, r5
    b07c:	f000 fcd6 	bl	ba2c <_isatty_r>
    b080:	2800      	cmp	r0, #0
    b082:	d006      	beq.n	b092 <__smakebuf_r+0x7a>
    b084:	2203      	movs	r2, #3
    b086:	89a3      	ldrh	r3, [r4, #12]
    b088:	4393      	bics	r3, r2
    b08a:	001a      	movs	r2, r3
    b08c:	2301      	movs	r3, #1
    b08e:	4313      	orrs	r3, r2
    b090:	81a3      	strh	r3, [r4, #12]
    b092:	89a0      	ldrh	r0, [r4, #12]
    b094:	4338      	orrs	r0, r7
    b096:	81a0      	strh	r0, [r4, #12]
    b098:	e7cb      	b.n	b032 <__smakebuf_r+0x1a>
    b09a:	46c0      	nop			; (mov r8, r8)
    b09c:	0000ae01 	.word	0x0000ae01

0000b0a0 <memchr>:
    b0a0:	b2c9      	uxtb	r1, r1
    b0a2:	1882      	adds	r2, r0, r2
    b0a4:	4290      	cmp	r0, r2
    b0a6:	d101      	bne.n	b0ac <memchr+0xc>
    b0a8:	2000      	movs	r0, #0
    b0aa:	4770      	bx	lr
    b0ac:	7803      	ldrb	r3, [r0, #0]
    b0ae:	428b      	cmp	r3, r1
    b0b0:	d0fb      	beq.n	b0aa <memchr+0xa>
    b0b2:	3001      	adds	r0, #1
    b0b4:	e7f6      	b.n	b0a4 <memchr+0x4>

0000b0b6 <__malloc_lock>:
    b0b6:	4770      	bx	lr

0000b0b8 <__malloc_unlock>:
    b0b8:	4770      	bx	lr

0000b0ba <_Balloc>:
    b0ba:	b570      	push	{r4, r5, r6, lr}
    b0bc:	6a46      	ldr	r6, [r0, #36]	; 0x24
    b0be:	0004      	movs	r4, r0
    b0c0:	000d      	movs	r5, r1
    b0c2:	2e00      	cmp	r6, #0
    b0c4:	d107      	bne.n	b0d6 <_Balloc+0x1c>
    b0c6:	2010      	movs	r0, #16
    b0c8:	f7fd ff04 	bl	8ed4 <malloc>
    b0cc:	6260      	str	r0, [r4, #36]	; 0x24
    b0ce:	6046      	str	r6, [r0, #4]
    b0d0:	6086      	str	r6, [r0, #8]
    b0d2:	6006      	str	r6, [r0, #0]
    b0d4:	60c6      	str	r6, [r0, #12]
    b0d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    b0d8:	68f3      	ldr	r3, [r6, #12]
    b0da:	2b00      	cmp	r3, #0
    b0dc:	d013      	beq.n	b106 <_Balloc+0x4c>
    b0de:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b0e0:	00aa      	lsls	r2, r5, #2
    b0e2:	68db      	ldr	r3, [r3, #12]
    b0e4:	189b      	adds	r3, r3, r2
    b0e6:	6818      	ldr	r0, [r3, #0]
    b0e8:	2800      	cmp	r0, #0
    b0ea:	d118      	bne.n	b11e <_Balloc+0x64>
    b0ec:	2101      	movs	r1, #1
    b0ee:	000e      	movs	r6, r1
    b0f0:	40ae      	lsls	r6, r5
    b0f2:	1d72      	adds	r2, r6, #5
    b0f4:	0092      	lsls	r2, r2, #2
    b0f6:	0020      	movs	r0, r4
    b0f8:	f000 fac2 	bl	b680 <_calloc_r>
    b0fc:	2800      	cmp	r0, #0
    b0fe:	d00c      	beq.n	b11a <_Balloc+0x60>
    b100:	6045      	str	r5, [r0, #4]
    b102:	6086      	str	r6, [r0, #8]
    b104:	e00d      	b.n	b122 <_Balloc+0x68>
    b106:	2221      	movs	r2, #33	; 0x21
    b108:	2104      	movs	r1, #4
    b10a:	0020      	movs	r0, r4
    b10c:	f000 fab8 	bl	b680 <_calloc_r>
    b110:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b112:	60f0      	str	r0, [r6, #12]
    b114:	68db      	ldr	r3, [r3, #12]
    b116:	2b00      	cmp	r3, #0
    b118:	d1e1      	bne.n	b0de <_Balloc+0x24>
    b11a:	2000      	movs	r0, #0
    b11c:	bd70      	pop	{r4, r5, r6, pc}
    b11e:	6802      	ldr	r2, [r0, #0]
    b120:	601a      	str	r2, [r3, #0]
    b122:	2300      	movs	r3, #0
    b124:	6103      	str	r3, [r0, #16]
    b126:	60c3      	str	r3, [r0, #12]
    b128:	e7f8      	b.n	b11c <_Balloc+0x62>

0000b12a <_Bfree>:
    b12a:	b570      	push	{r4, r5, r6, lr}
    b12c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    b12e:	0006      	movs	r6, r0
    b130:	000d      	movs	r5, r1
    b132:	2c00      	cmp	r4, #0
    b134:	d107      	bne.n	b146 <_Bfree+0x1c>
    b136:	2010      	movs	r0, #16
    b138:	f7fd fecc 	bl	8ed4 <malloc>
    b13c:	6270      	str	r0, [r6, #36]	; 0x24
    b13e:	6044      	str	r4, [r0, #4]
    b140:	6084      	str	r4, [r0, #8]
    b142:	6004      	str	r4, [r0, #0]
    b144:	60c4      	str	r4, [r0, #12]
    b146:	2d00      	cmp	r5, #0
    b148:	d007      	beq.n	b15a <_Bfree+0x30>
    b14a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b14c:	686a      	ldr	r2, [r5, #4]
    b14e:	68db      	ldr	r3, [r3, #12]
    b150:	0092      	lsls	r2, r2, #2
    b152:	189b      	adds	r3, r3, r2
    b154:	681a      	ldr	r2, [r3, #0]
    b156:	602a      	str	r2, [r5, #0]
    b158:	601d      	str	r5, [r3, #0]
    b15a:	bd70      	pop	{r4, r5, r6, pc}

0000b15c <__multadd>:
    b15c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b15e:	001e      	movs	r6, r3
    b160:	2314      	movs	r3, #20
    b162:	469c      	mov	ip, r3
    b164:	0007      	movs	r7, r0
    b166:	000c      	movs	r4, r1
    b168:	2000      	movs	r0, #0
    b16a:	690d      	ldr	r5, [r1, #16]
    b16c:	448c      	add	ip, r1
    b16e:	4663      	mov	r3, ip
    b170:	8819      	ldrh	r1, [r3, #0]
    b172:	681b      	ldr	r3, [r3, #0]
    b174:	4351      	muls	r1, r2
    b176:	0c1b      	lsrs	r3, r3, #16
    b178:	4353      	muls	r3, r2
    b17a:	1989      	adds	r1, r1, r6
    b17c:	0c0e      	lsrs	r6, r1, #16
    b17e:	199b      	adds	r3, r3, r6
    b180:	b289      	uxth	r1, r1
    b182:	0c1e      	lsrs	r6, r3, #16
    b184:	041b      	lsls	r3, r3, #16
    b186:	185b      	adds	r3, r3, r1
    b188:	4661      	mov	r1, ip
    b18a:	3001      	adds	r0, #1
    b18c:	c108      	stmia	r1!, {r3}
    b18e:	468c      	mov	ip, r1
    b190:	4285      	cmp	r5, r0
    b192:	dcec      	bgt.n	b16e <__multadd+0x12>
    b194:	2e00      	cmp	r6, #0
    b196:	d01b      	beq.n	b1d0 <__multadd+0x74>
    b198:	68a3      	ldr	r3, [r4, #8]
    b19a:	429d      	cmp	r5, r3
    b19c:	db12      	blt.n	b1c4 <__multadd+0x68>
    b19e:	6863      	ldr	r3, [r4, #4]
    b1a0:	0038      	movs	r0, r7
    b1a2:	1c59      	adds	r1, r3, #1
    b1a4:	f7ff ff89 	bl	b0ba <_Balloc>
    b1a8:	0021      	movs	r1, r4
    b1aa:	6923      	ldr	r3, [r4, #16]
    b1ac:	9001      	str	r0, [sp, #4]
    b1ae:	1c9a      	adds	r2, r3, #2
    b1b0:	0092      	lsls	r2, r2, #2
    b1b2:	310c      	adds	r1, #12
    b1b4:	300c      	adds	r0, #12
    b1b6:	f7fd fea9 	bl	8f0c <memcpy>
    b1ba:	0021      	movs	r1, r4
    b1bc:	0038      	movs	r0, r7
    b1be:	f7ff ffb4 	bl	b12a <_Bfree>
    b1c2:	9c01      	ldr	r4, [sp, #4]
    b1c4:	1d2b      	adds	r3, r5, #4
    b1c6:	009b      	lsls	r3, r3, #2
    b1c8:	18e3      	adds	r3, r4, r3
    b1ca:	3501      	adds	r5, #1
    b1cc:	605e      	str	r6, [r3, #4]
    b1ce:	6125      	str	r5, [r4, #16]
    b1d0:	0020      	movs	r0, r4
    b1d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000b1d4 <__hi0bits>:
    b1d4:	0003      	movs	r3, r0
    b1d6:	0c02      	lsrs	r2, r0, #16
    b1d8:	2000      	movs	r0, #0
    b1da:	4282      	cmp	r2, r0
    b1dc:	d101      	bne.n	b1e2 <__hi0bits+0xe>
    b1de:	041b      	lsls	r3, r3, #16
    b1e0:	3010      	adds	r0, #16
    b1e2:	0e1a      	lsrs	r2, r3, #24
    b1e4:	d101      	bne.n	b1ea <__hi0bits+0x16>
    b1e6:	3008      	adds	r0, #8
    b1e8:	021b      	lsls	r3, r3, #8
    b1ea:	0f1a      	lsrs	r2, r3, #28
    b1ec:	d101      	bne.n	b1f2 <__hi0bits+0x1e>
    b1ee:	3004      	adds	r0, #4
    b1f0:	011b      	lsls	r3, r3, #4
    b1f2:	0f9a      	lsrs	r2, r3, #30
    b1f4:	d101      	bne.n	b1fa <__hi0bits+0x26>
    b1f6:	3002      	adds	r0, #2
    b1f8:	009b      	lsls	r3, r3, #2
    b1fa:	2b00      	cmp	r3, #0
    b1fc:	db03      	blt.n	b206 <__hi0bits+0x32>
    b1fe:	3001      	adds	r0, #1
    b200:	005b      	lsls	r3, r3, #1
    b202:	d400      	bmi.n	b206 <__hi0bits+0x32>
    b204:	2020      	movs	r0, #32
    b206:	4770      	bx	lr

0000b208 <__lo0bits>:
    b208:	2207      	movs	r2, #7
    b20a:	6803      	ldr	r3, [r0, #0]
    b20c:	b510      	push	{r4, lr}
    b20e:	0001      	movs	r1, r0
    b210:	401a      	ands	r2, r3
    b212:	d00d      	beq.n	b230 <__lo0bits+0x28>
    b214:	2401      	movs	r4, #1
    b216:	2000      	movs	r0, #0
    b218:	4223      	tst	r3, r4
    b21a:	d105      	bne.n	b228 <__lo0bits+0x20>
    b21c:	3002      	adds	r0, #2
    b21e:	4203      	tst	r3, r0
    b220:	d003      	beq.n	b22a <__lo0bits+0x22>
    b222:	40e3      	lsrs	r3, r4
    b224:	0020      	movs	r0, r4
    b226:	600b      	str	r3, [r1, #0]
    b228:	bd10      	pop	{r4, pc}
    b22a:	089b      	lsrs	r3, r3, #2
    b22c:	600b      	str	r3, [r1, #0]
    b22e:	e7fb      	b.n	b228 <__lo0bits+0x20>
    b230:	b29c      	uxth	r4, r3
    b232:	0010      	movs	r0, r2
    b234:	2c00      	cmp	r4, #0
    b236:	d101      	bne.n	b23c <__lo0bits+0x34>
    b238:	2010      	movs	r0, #16
    b23a:	0c1b      	lsrs	r3, r3, #16
    b23c:	b2da      	uxtb	r2, r3
    b23e:	2a00      	cmp	r2, #0
    b240:	d101      	bne.n	b246 <__lo0bits+0x3e>
    b242:	3008      	adds	r0, #8
    b244:	0a1b      	lsrs	r3, r3, #8
    b246:	071a      	lsls	r2, r3, #28
    b248:	d101      	bne.n	b24e <__lo0bits+0x46>
    b24a:	3004      	adds	r0, #4
    b24c:	091b      	lsrs	r3, r3, #4
    b24e:	079a      	lsls	r2, r3, #30
    b250:	d101      	bne.n	b256 <__lo0bits+0x4e>
    b252:	3002      	adds	r0, #2
    b254:	089b      	lsrs	r3, r3, #2
    b256:	07da      	lsls	r2, r3, #31
    b258:	d4e8      	bmi.n	b22c <__lo0bits+0x24>
    b25a:	085b      	lsrs	r3, r3, #1
    b25c:	d001      	beq.n	b262 <__lo0bits+0x5a>
    b25e:	3001      	adds	r0, #1
    b260:	e7e4      	b.n	b22c <__lo0bits+0x24>
    b262:	2020      	movs	r0, #32
    b264:	e7e0      	b.n	b228 <__lo0bits+0x20>

0000b266 <__i2b>:
    b266:	b510      	push	{r4, lr}
    b268:	000c      	movs	r4, r1
    b26a:	2101      	movs	r1, #1
    b26c:	f7ff ff25 	bl	b0ba <_Balloc>
    b270:	2301      	movs	r3, #1
    b272:	6144      	str	r4, [r0, #20]
    b274:	6103      	str	r3, [r0, #16]
    b276:	bd10      	pop	{r4, pc}

0000b278 <__multiply>:
    b278:	b5f0      	push	{r4, r5, r6, r7, lr}
    b27a:	690b      	ldr	r3, [r1, #16]
    b27c:	0015      	movs	r5, r2
    b27e:	6912      	ldr	r2, [r2, #16]
    b280:	b089      	sub	sp, #36	; 0x24
    b282:	000c      	movs	r4, r1
    b284:	4293      	cmp	r3, r2
    b286:	da01      	bge.n	b28c <__multiply+0x14>
    b288:	002c      	movs	r4, r5
    b28a:	000d      	movs	r5, r1
    b28c:	6927      	ldr	r7, [r4, #16]
    b28e:	692e      	ldr	r6, [r5, #16]
    b290:	68a2      	ldr	r2, [r4, #8]
    b292:	19bb      	adds	r3, r7, r6
    b294:	6861      	ldr	r1, [r4, #4]
    b296:	9301      	str	r3, [sp, #4]
    b298:	4293      	cmp	r3, r2
    b29a:	dd00      	ble.n	b29e <__multiply+0x26>
    b29c:	3101      	adds	r1, #1
    b29e:	f7ff ff0c 	bl	b0ba <_Balloc>
    b2a2:	0003      	movs	r3, r0
    b2a4:	3314      	adds	r3, #20
    b2a6:	9300      	str	r3, [sp, #0]
    b2a8:	9a00      	ldr	r2, [sp, #0]
    b2aa:	19bb      	adds	r3, r7, r6
    b2ac:	4694      	mov	ip, r2
    b2ae:	009b      	lsls	r3, r3, #2
    b2b0:	449c      	add	ip, r3
    b2b2:	0013      	movs	r3, r2
    b2b4:	2200      	movs	r2, #0
    b2b6:	9004      	str	r0, [sp, #16]
    b2b8:	4563      	cmp	r3, ip
    b2ba:	d31c      	bcc.n	b2f6 <__multiply+0x7e>
    b2bc:	002a      	movs	r2, r5
    b2be:	3414      	adds	r4, #20
    b2c0:	00bf      	lsls	r7, r7, #2
    b2c2:	19e3      	adds	r3, r4, r7
    b2c4:	3214      	adds	r2, #20
    b2c6:	00b6      	lsls	r6, r6, #2
    b2c8:	9305      	str	r3, [sp, #20]
    b2ca:	1993      	adds	r3, r2, r6
    b2cc:	9402      	str	r4, [sp, #8]
    b2ce:	9306      	str	r3, [sp, #24]
    b2d0:	9b06      	ldr	r3, [sp, #24]
    b2d2:	429a      	cmp	r2, r3
    b2d4:	d311      	bcc.n	b2fa <__multiply+0x82>
    b2d6:	9b01      	ldr	r3, [sp, #4]
    b2d8:	2b00      	cmp	r3, #0
    b2da:	dd06      	ble.n	b2ea <__multiply+0x72>
    b2dc:	2304      	movs	r3, #4
    b2de:	425b      	negs	r3, r3
    b2e0:	449c      	add	ip, r3
    b2e2:	4663      	mov	r3, ip
    b2e4:	681b      	ldr	r3, [r3, #0]
    b2e6:	2b00      	cmp	r3, #0
    b2e8:	d051      	beq.n	b38e <__multiply+0x116>
    b2ea:	9b04      	ldr	r3, [sp, #16]
    b2ec:	9a01      	ldr	r2, [sp, #4]
    b2ee:	0018      	movs	r0, r3
    b2f0:	611a      	str	r2, [r3, #16]
    b2f2:	b009      	add	sp, #36	; 0x24
    b2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b2f6:	c304      	stmia	r3!, {r2}
    b2f8:	e7de      	b.n	b2b8 <__multiply+0x40>
    b2fa:	8814      	ldrh	r4, [r2, #0]
    b2fc:	2c00      	cmp	r4, #0
    b2fe:	d01e      	beq.n	b33e <__multiply+0xc6>
    b300:	2600      	movs	r6, #0
    b302:	9d00      	ldr	r5, [sp, #0]
    b304:	9f02      	ldr	r7, [sp, #8]
    b306:	cf01      	ldmia	r7!, {r0}
    b308:	9507      	str	r5, [sp, #28]
    b30a:	cd08      	ldmia	r5!, {r3}
    b30c:	9303      	str	r3, [sp, #12]
    b30e:	b283      	uxth	r3, r0
    b310:	4363      	muls	r3, r4
    b312:	0019      	movs	r1, r3
    b314:	466b      	mov	r3, sp
    b316:	0c00      	lsrs	r0, r0, #16
    b318:	899b      	ldrh	r3, [r3, #12]
    b31a:	4360      	muls	r0, r4
    b31c:	18cb      	adds	r3, r1, r3
    b31e:	9903      	ldr	r1, [sp, #12]
    b320:	199b      	adds	r3, r3, r6
    b322:	0c09      	lsrs	r1, r1, #16
    b324:	1841      	adds	r1, r0, r1
    b326:	0c18      	lsrs	r0, r3, #16
    b328:	1809      	adds	r1, r1, r0
    b32a:	0c0e      	lsrs	r6, r1, #16
    b32c:	b29b      	uxth	r3, r3
    b32e:	0409      	lsls	r1, r1, #16
    b330:	430b      	orrs	r3, r1
    b332:	9907      	ldr	r1, [sp, #28]
    b334:	600b      	str	r3, [r1, #0]
    b336:	9b05      	ldr	r3, [sp, #20]
    b338:	42bb      	cmp	r3, r7
    b33a:	d8e4      	bhi.n	b306 <__multiply+0x8e>
    b33c:	602e      	str	r6, [r5, #0]
    b33e:	6813      	ldr	r3, [r2, #0]
    b340:	0c1b      	lsrs	r3, r3, #16
    b342:	9303      	str	r3, [sp, #12]
    b344:	d01e      	beq.n	b384 <__multiply+0x10c>
    b346:	2600      	movs	r6, #0
    b348:	9b00      	ldr	r3, [sp, #0]
    b34a:	9c02      	ldr	r4, [sp, #8]
    b34c:	681b      	ldr	r3, [r3, #0]
    b34e:	9800      	ldr	r0, [sp, #0]
    b350:	0007      	movs	r7, r0
    b352:	8821      	ldrh	r1, [r4, #0]
    b354:	9d03      	ldr	r5, [sp, #12]
    b356:	b29b      	uxth	r3, r3
    b358:	4369      	muls	r1, r5
    b35a:	c820      	ldmia	r0!, {r5}
    b35c:	0c2d      	lsrs	r5, r5, #16
    b35e:	1949      	adds	r1, r1, r5
    b360:	198e      	adds	r6, r1, r6
    b362:	0431      	lsls	r1, r6, #16
    b364:	430b      	orrs	r3, r1
    b366:	603b      	str	r3, [r7, #0]
    b368:	cc08      	ldmia	r4!, {r3}
    b36a:	9903      	ldr	r1, [sp, #12]
    b36c:	0c1b      	lsrs	r3, r3, #16
    b36e:	434b      	muls	r3, r1
    b370:	6879      	ldr	r1, [r7, #4]
    b372:	0c36      	lsrs	r6, r6, #16
    b374:	b289      	uxth	r1, r1
    b376:	185b      	adds	r3, r3, r1
    b378:	9905      	ldr	r1, [sp, #20]
    b37a:	199b      	adds	r3, r3, r6
    b37c:	0c1e      	lsrs	r6, r3, #16
    b37e:	42a1      	cmp	r1, r4
    b380:	d8e6      	bhi.n	b350 <__multiply+0xd8>
    b382:	6003      	str	r3, [r0, #0]
    b384:	9b00      	ldr	r3, [sp, #0]
    b386:	3204      	adds	r2, #4
    b388:	3304      	adds	r3, #4
    b38a:	9300      	str	r3, [sp, #0]
    b38c:	e7a0      	b.n	b2d0 <__multiply+0x58>
    b38e:	9b01      	ldr	r3, [sp, #4]
    b390:	3b01      	subs	r3, #1
    b392:	9301      	str	r3, [sp, #4]
    b394:	e79f      	b.n	b2d6 <__multiply+0x5e>
	...

0000b398 <__pow5mult>:
    b398:	2303      	movs	r3, #3
    b39a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b39c:	4013      	ands	r3, r2
    b39e:	0005      	movs	r5, r0
    b3a0:	000e      	movs	r6, r1
    b3a2:	0014      	movs	r4, r2
    b3a4:	2b00      	cmp	r3, #0
    b3a6:	d008      	beq.n	b3ba <__pow5mult+0x22>
    b3a8:	4922      	ldr	r1, [pc, #136]	; (b434 <__pow5mult+0x9c>)
    b3aa:	3b01      	subs	r3, #1
    b3ac:	009a      	lsls	r2, r3, #2
    b3ae:	5852      	ldr	r2, [r2, r1]
    b3b0:	2300      	movs	r3, #0
    b3b2:	0031      	movs	r1, r6
    b3b4:	f7ff fed2 	bl	b15c <__multadd>
    b3b8:	0006      	movs	r6, r0
    b3ba:	10a3      	asrs	r3, r4, #2
    b3bc:	9301      	str	r3, [sp, #4]
    b3be:	d036      	beq.n	b42e <__pow5mult+0x96>
    b3c0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    b3c2:	2c00      	cmp	r4, #0
    b3c4:	d107      	bne.n	b3d6 <__pow5mult+0x3e>
    b3c6:	2010      	movs	r0, #16
    b3c8:	f7fd fd84 	bl	8ed4 <malloc>
    b3cc:	6268      	str	r0, [r5, #36]	; 0x24
    b3ce:	6044      	str	r4, [r0, #4]
    b3d0:	6084      	str	r4, [r0, #8]
    b3d2:	6004      	str	r4, [r0, #0]
    b3d4:	60c4      	str	r4, [r0, #12]
    b3d6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    b3d8:	68bc      	ldr	r4, [r7, #8]
    b3da:	2c00      	cmp	r4, #0
    b3dc:	d107      	bne.n	b3ee <__pow5mult+0x56>
    b3de:	4916      	ldr	r1, [pc, #88]	; (b438 <__pow5mult+0xa0>)
    b3e0:	0028      	movs	r0, r5
    b3e2:	f7ff ff40 	bl	b266 <__i2b>
    b3e6:	2300      	movs	r3, #0
    b3e8:	0004      	movs	r4, r0
    b3ea:	60b8      	str	r0, [r7, #8]
    b3ec:	6003      	str	r3, [r0, #0]
    b3ee:	2201      	movs	r2, #1
    b3f0:	9b01      	ldr	r3, [sp, #4]
    b3f2:	4213      	tst	r3, r2
    b3f4:	d00a      	beq.n	b40c <__pow5mult+0x74>
    b3f6:	0031      	movs	r1, r6
    b3f8:	0022      	movs	r2, r4
    b3fa:	0028      	movs	r0, r5
    b3fc:	f7ff ff3c 	bl	b278 <__multiply>
    b400:	0007      	movs	r7, r0
    b402:	0031      	movs	r1, r6
    b404:	0028      	movs	r0, r5
    b406:	f7ff fe90 	bl	b12a <_Bfree>
    b40a:	003e      	movs	r6, r7
    b40c:	9b01      	ldr	r3, [sp, #4]
    b40e:	105b      	asrs	r3, r3, #1
    b410:	9301      	str	r3, [sp, #4]
    b412:	d00c      	beq.n	b42e <__pow5mult+0x96>
    b414:	6820      	ldr	r0, [r4, #0]
    b416:	2800      	cmp	r0, #0
    b418:	d107      	bne.n	b42a <__pow5mult+0x92>
    b41a:	0022      	movs	r2, r4
    b41c:	0021      	movs	r1, r4
    b41e:	0028      	movs	r0, r5
    b420:	f7ff ff2a 	bl	b278 <__multiply>
    b424:	2300      	movs	r3, #0
    b426:	6020      	str	r0, [r4, #0]
    b428:	6003      	str	r3, [r0, #0]
    b42a:	0004      	movs	r4, r0
    b42c:	e7df      	b.n	b3ee <__pow5mult+0x56>
    b42e:	0030      	movs	r0, r6
    b430:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b432:	46c0      	nop			; (mov r8, r8)
    b434:	0000ef78 	.word	0x0000ef78
    b438:	00000271 	.word	0x00000271

0000b43c <__lshift>:
    b43c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b43e:	000d      	movs	r5, r1
    b440:	0017      	movs	r7, r2
    b442:	692b      	ldr	r3, [r5, #16]
    b444:	1154      	asrs	r4, r2, #5
    b446:	b085      	sub	sp, #20
    b448:	18e3      	adds	r3, r4, r3
    b44a:	9302      	str	r3, [sp, #8]
    b44c:	3301      	adds	r3, #1
    b44e:	9301      	str	r3, [sp, #4]
    b450:	6849      	ldr	r1, [r1, #4]
    b452:	68ab      	ldr	r3, [r5, #8]
    b454:	9003      	str	r0, [sp, #12]
    b456:	9a01      	ldr	r2, [sp, #4]
    b458:	4293      	cmp	r3, r2
    b45a:	db34      	blt.n	b4c6 <__lshift+0x8a>
    b45c:	9803      	ldr	r0, [sp, #12]
    b45e:	f7ff fe2c 	bl	b0ba <_Balloc>
    b462:	2300      	movs	r3, #0
    b464:	0002      	movs	r2, r0
    b466:	0006      	movs	r6, r0
    b468:	0019      	movs	r1, r3
    b46a:	3214      	adds	r2, #20
    b46c:	42a3      	cmp	r3, r4
    b46e:	db2d      	blt.n	b4cc <__lshift+0x90>
    b470:	43e3      	mvns	r3, r4
    b472:	17db      	asrs	r3, r3, #31
    b474:	401c      	ands	r4, r3
    b476:	002b      	movs	r3, r5
    b478:	211f      	movs	r1, #31
    b47a:	00a4      	lsls	r4, r4, #2
    b47c:	1914      	adds	r4, r2, r4
    b47e:	692a      	ldr	r2, [r5, #16]
    b480:	3314      	adds	r3, #20
    b482:	0092      	lsls	r2, r2, #2
    b484:	189a      	adds	r2, r3, r2
    b486:	400f      	ands	r7, r1
    b488:	d024      	beq.n	b4d4 <__lshift+0x98>
    b48a:	3101      	adds	r1, #1
    b48c:	1bc9      	subs	r1, r1, r7
    b48e:	468c      	mov	ip, r1
    b490:	2100      	movs	r1, #0
    b492:	6818      	ldr	r0, [r3, #0]
    b494:	40b8      	lsls	r0, r7
    b496:	4301      	orrs	r1, r0
    b498:	4660      	mov	r0, ip
    b49a:	6021      	str	r1, [r4, #0]
    b49c:	cb02      	ldmia	r3!, {r1}
    b49e:	3404      	adds	r4, #4
    b4a0:	40c1      	lsrs	r1, r0
    b4a2:	429a      	cmp	r2, r3
    b4a4:	d8f5      	bhi.n	b492 <__lshift+0x56>
    b4a6:	6021      	str	r1, [r4, #0]
    b4a8:	2900      	cmp	r1, #0
    b4aa:	d002      	beq.n	b4b2 <__lshift+0x76>
    b4ac:	9b02      	ldr	r3, [sp, #8]
    b4ae:	3302      	adds	r3, #2
    b4b0:	9301      	str	r3, [sp, #4]
    b4b2:	9b01      	ldr	r3, [sp, #4]
    b4b4:	9803      	ldr	r0, [sp, #12]
    b4b6:	3b01      	subs	r3, #1
    b4b8:	6133      	str	r3, [r6, #16]
    b4ba:	0029      	movs	r1, r5
    b4bc:	f7ff fe35 	bl	b12a <_Bfree>
    b4c0:	0030      	movs	r0, r6
    b4c2:	b005      	add	sp, #20
    b4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b4c6:	3101      	adds	r1, #1
    b4c8:	005b      	lsls	r3, r3, #1
    b4ca:	e7c4      	b.n	b456 <__lshift+0x1a>
    b4cc:	0098      	lsls	r0, r3, #2
    b4ce:	5011      	str	r1, [r2, r0]
    b4d0:	3301      	adds	r3, #1
    b4d2:	e7cb      	b.n	b46c <__lshift+0x30>
    b4d4:	cb02      	ldmia	r3!, {r1}
    b4d6:	c402      	stmia	r4!, {r1}
    b4d8:	429a      	cmp	r2, r3
    b4da:	d8fb      	bhi.n	b4d4 <__lshift+0x98>
    b4dc:	e7e9      	b.n	b4b2 <__lshift+0x76>

0000b4de <__mcmp>:
    b4de:	690a      	ldr	r2, [r1, #16]
    b4e0:	6903      	ldr	r3, [r0, #16]
    b4e2:	b530      	push	{r4, r5, lr}
    b4e4:	1a9b      	subs	r3, r3, r2
    b4e6:	d10e      	bne.n	b506 <__mcmp+0x28>
    b4e8:	0092      	lsls	r2, r2, #2
    b4ea:	3014      	adds	r0, #20
    b4ec:	3114      	adds	r1, #20
    b4ee:	1884      	adds	r4, r0, r2
    b4f0:	1889      	adds	r1, r1, r2
    b4f2:	3c04      	subs	r4, #4
    b4f4:	3904      	subs	r1, #4
    b4f6:	6822      	ldr	r2, [r4, #0]
    b4f8:	680d      	ldr	r5, [r1, #0]
    b4fa:	42aa      	cmp	r2, r5
    b4fc:	d005      	beq.n	b50a <__mcmp+0x2c>
    b4fe:	42aa      	cmp	r2, r5
    b500:	4192      	sbcs	r2, r2
    b502:	2301      	movs	r3, #1
    b504:	4313      	orrs	r3, r2
    b506:	0018      	movs	r0, r3
    b508:	bd30      	pop	{r4, r5, pc}
    b50a:	42a0      	cmp	r0, r4
    b50c:	d3f1      	bcc.n	b4f2 <__mcmp+0x14>
    b50e:	e7fa      	b.n	b506 <__mcmp+0x28>

0000b510 <__mdiff>:
    b510:	b5f0      	push	{r4, r5, r6, r7, lr}
    b512:	000d      	movs	r5, r1
    b514:	b085      	sub	sp, #20
    b516:	0007      	movs	r7, r0
    b518:	0011      	movs	r1, r2
    b51a:	0028      	movs	r0, r5
    b51c:	0014      	movs	r4, r2
    b51e:	f7ff ffde 	bl	b4de <__mcmp>
    b522:	1e06      	subs	r6, r0, #0
    b524:	d108      	bne.n	b538 <__mdiff+0x28>
    b526:	0001      	movs	r1, r0
    b528:	0038      	movs	r0, r7
    b52a:	f7ff fdc6 	bl	b0ba <_Balloc>
    b52e:	2301      	movs	r3, #1
    b530:	6146      	str	r6, [r0, #20]
    b532:	6103      	str	r3, [r0, #16]
    b534:	b005      	add	sp, #20
    b536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b538:	2301      	movs	r3, #1
    b53a:	9301      	str	r3, [sp, #4]
    b53c:	2800      	cmp	r0, #0
    b53e:	db04      	blt.n	b54a <__mdiff+0x3a>
    b540:	0023      	movs	r3, r4
    b542:	002c      	movs	r4, r5
    b544:	001d      	movs	r5, r3
    b546:	2300      	movs	r3, #0
    b548:	9301      	str	r3, [sp, #4]
    b54a:	6861      	ldr	r1, [r4, #4]
    b54c:	0038      	movs	r0, r7
    b54e:	f7ff fdb4 	bl	b0ba <_Balloc>
    b552:	002f      	movs	r7, r5
    b554:	2200      	movs	r2, #0
    b556:	9b01      	ldr	r3, [sp, #4]
    b558:	6926      	ldr	r6, [r4, #16]
    b55a:	60c3      	str	r3, [r0, #12]
    b55c:	3414      	adds	r4, #20
    b55e:	00b3      	lsls	r3, r6, #2
    b560:	18e3      	adds	r3, r4, r3
    b562:	9302      	str	r3, [sp, #8]
    b564:	692b      	ldr	r3, [r5, #16]
    b566:	3714      	adds	r7, #20
    b568:	009b      	lsls	r3, r3, #2
    b56a:	18fb      	adds	r3, r7, r3
    b56c:	9303      	str	r3, [sp, #12]
    b56e:	0003      	movs	r3, r0
    b570:	4694      	mov	ip, r2
    b572:	3314      	adds	r3, #20
    b574:	cc20      	ldmia	r4!, {r5}
    b576:	cf04      	ldmia	r7!, {r2}
    b578:	9201      	str	r2, [sp, #4]
    b57a:	b2aa      	uxth	r2, r5
    b57c:	4494      	add	ip, r2
    b57e:	466a      	mov	r2, sp
    b580:	4661      	mov	r1, ip
    b582:	8892      	ldrh	r2, [r2, #4]
    b584:	0c2d      	lsrs	r5, r5, #16
    b586:	1a8a      	subs	r2, r1, r2
    b588:	9901      	ldr	r1, [sp, #4]
    b58a:	0c09      	lsrs	r1, r1, #16
    b58c:	1a69      	subs	r1, r5, r1
    b58e:	1415      	asrs	r5, r2, #16
    b590:	1949      	adds	r1, r1, r5
    b592:	140d      	asrs	r5, r1, #16
    b594:	b292      	uxth	r2, r2
    b596:	0409      	lsls	r1, r1, #16
    b598:	430a      	orrs	r2, r1
    b59a:	601a      	str	r2, [r3, #0]
    b59c:	9a03      	ldr	r2, [sp, #12]
    b59e:	46ac      	mov	ip, r5
    b5a0:	3304      	adds	r3, #4
    b5a2:	42ba      	cmp	r2, r7
    b5a4:	d8e6      	bhi.n	b574 <__mdiff+0x64>
    b5a6:	9902      	ldr	r1, [sp, #8]
    b5a8:	001a      	movs	r2, r3
    b5aa:	428c      	cmp	r4, r1
    b5ac:	d305      	bcc.n	b5ba <__mdiff+0xaa>
    b5ae:	3a04      	subs	r2, #4
    b5b0:	6813      	ldr	r3, [r2, #0]
    b5b2:	2b00      	cmp	r3, #0
    b5b4:	d00e      	beq.n	b5d4 <__mdiff+0xc4>
    b5b6:	6106      	str	r6, [r0, #16]
    b5b8:	e7bc      	b.n	b534 <__mdiff+0x24>
    b5ba:	cc04      	ldmia	r4!, {r2}
    b5bc:	b291      	uxth	r1, r2
    b5be:	4461      	add	r1, ip
    b5c0:	140d      	asrs	r5, r1, #16
    b5c2:	0c12      	lsrs	r2, r2, #16
    b5c4:	1952      	adds	r2, r2, r5
    b5c6:	1415      	asrs	r5, r2, #16
    b5c8:	b289      	uxth	r1, r1
    b5ca:	0412      	lsls	r2, r2, #16
    b5cc:	430a      	orrs	r2, r1
    b5ce:	46ac      	mov	ip, r5
    b5d0:	c304      	stmia	r3!, {r2}
    b5d2:	e7e8      	b.n	b5a6 <__mdiff+0x96>
    b5d4:	3e01      	subs	r6, #1
    b5d6:	e7ea      	b.n	b5ae <__mdiff+0x9e>

0000b5d8 <__d2b>:
    b5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b5da:	001d      	movs	r5, r3
    b5dc:	2101      	movs	r1, #1
    b5de:	9f08      	ldr	r7, [sp, #32]
    b5e0:	0014      	movs	r4, r2
    b5e2:	f7ff fd6a 	bl	b0ba <_Balloc>
    b5e6:	032b      	lsls	r3, r5, #12
    b5e8:	006d      	lsls	r5, r5, #1
    b5ea:	0006      	movs	r6, r0
    b5ec:	0b1b      	lsrs	r3, r3, #12
    b5ee:	0d6d      	lsrs	r5, r5, #21
    b5f0:	d124      	bne.n	b63c <__d2b+0x64>
    b5f2:	9301      	str	r3, [sp, #4]
    b5f4:	2c00      	cmp	r4, #0
    b5f6:	d027      	beq.n	b648 <__d2b+0x70>
    b5f8:	4668      	mov	r0, sp
    b5fa:	9400      	str	r4, [sp, #0]
    b5fc:	f7ff fe04 	bl	b208 <__lo0bits>
    b600:	9c00      	ldr	r4, [sp, #0]
    b602:	2800      	cmp	r0, #0
    b604:	d01e      	beq.n	b644 <__d2b+0x6c>
    b606:	9b01      	ldr	r3, [sp, #4]
    b608:	2120      	movs	r1, #32
    b60a:	001a      	movs	r2, r3
    b60c:	1a09      	subs	r1, r1, r0
    b60e:	408a      	lsls	r2, r1
    b610:	40c3      	lsrs	r3, r0
    b612:	4322      	orrs	r2, r4
    b614:	6172      	str	r2, [r6, #20]
    b616:	9301      	str	r3, [sp, #4]
    b618:	9c01      	ldr	r4, [sp, #4]
    b61a:	61b4      	str	r4, [r6, #24]
    b61c:	1e63      	subs	r3, r4, #1
    b61e:	419c      	sbcs	r4, r3
    b620:	3401      	adds	r4, #1
    b622:	6134      	str	r4, [r6, #16]
    b624:	2d00      	cmp	r5, #0
    b626:	d018      	beq.n	b65a <__d2b+0x82>
    b628:	4b12      	ldr	r3, [pc, #72]	; (b674 <__d2b+0x9c>)
    b62a:	18ed      	adds	r5, r5, r3
    b62c:	2335      	movs	r3, #53	; 0x35
    b62e:	182d      	adds	r5, r5, r0
    b630:	603d      	str	r5, [r7, #0]
    b632:	1a18      	subs	r0, r3, r0
    b634:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b636:	6018      	str	r0, [r3, #0]
    b638:	0030      	movs	r0, r6
    b63a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b63c:	2280      	movs	r2, #128	; 0x80
    b63e:	0352      	lsls	r2, r2, #13
    b640:	4313      	orrs	r3, r2
    b642:	e7d6      	b.n	b5f2 <__d2b+0x1a>
    b644:	6174      	str	r4, [r6, #20]
    b646:	e7e7      	b.n	b618 <__d2b+0x40>
    b648:	a801      	add	r0, sp, #4
    b64a:	f7ff fddd 	bl	b208 <__lo0bits>
    b64e:	2401      	movs	r4, #1
    b650:	9b01      	ldr	r3, [sp, #4]
    b652:	6134      	str	r4, [r6, #16]
    b654:	6173      	str	r3, [r6, #20]
    b656:	3020      	adds	r0, #32
    b658:	e7e4      	b.n	b624 <__d2b+0x4c>
    b65a:	4b07      	ldr	r3, [pc, #28]	; (b678 <__d2b+0xa0>)
    b65c:	18c0      	adds	r0, r0, r3
    b65e:	4b07      	ldr	r3, [pc, #28]	; (b67c <__d2b+0xa4>)
    b660:	6038      	str	r0, [r7, #0]
    b662:	18e3      	adds	r3, r4, r3
    b664:	009b      	lsls	r3, r3, #2
    b666:	18f3      	adds	r3, r6, r3
    b668:	6958      	ldr	r0, [r3, #20]
    b66a:	f7ff fdb3 	bl	b1d4 <__hi0bits>
    b66e:	0164      	lsls	r4, r4, #5
    b670:	1a20      	subs	r0, r4, r0
    b672:	e7df      	b.n	b634 <__d2b+0x5c>
    b674:	fffffbcd 	.word	0xfffffbcd
    b678:	fffffbce 	.word	0xfffffbce
    b67c:	3fffffff 	.word	0x3fffffff

0000b680 <_calloc_r>:
    b680:	434a      	muls	r2, r1
    b682:	b570      	push	{r4, r5, r6, lr}
    b684:	0011      	movs	r1, r2
    b686:	0014      	movs	r4, r2
    b688:	f7fd fc9c 	bl	8fc4 <_malloc_r>
    b68c:	1e05      	subs	r5, r0, #0
    b68e:	d003      	beq.n	b698 <_calloc_r+0x18>
    b690:	0022      	movs	r2, r4
    b692:	2100      	movs	r1, #0
    b694:	f7fd fc43 	bl	8f1e <memset>
    b698:	0028      	movs	r0, r5
    b69a:	bd70      	pop	{r4, r5, r6, pc}

0000b69c <__sfputc_r>:
    b69c:	6893      	ldr	r3, [r2, #8]
    b69e:	b510      	push	{r4, lr}
    b6a0:	3b01      	subs	r3, #1
    b6a2:	6093      	str	r3, [r2, #8]
    b6a4:	2b00      	cmp	r3, #0
    b6a6:	da05      	bge.n	b6b4 <__sfputc_r+0x18>
    b6a8:	6994      	ldr	r4, [r2, #24]
    b6aa:	42a3      	cmp	r3, r4
    b6ac:	db08      	blt.n	b6c0 <__sfputc_r+0x24>
    b6ae:	b2cb      	uxtb	r3, r1
    b6b0:	2b0a      	cmp	r3, #10
    b6b2:	d005      	beq.n	b6c0 <__sfputc_r+0x24>
    b6b4:	6813      	ldr	r3, [r2, #0]
    b6b6:	1c58      	adds	r0, r3, #1
    b6b8:	6010      	str	r0, [r2, #0]
    b6ba:	7019      	strb	r1, [r3, #0]
    b6bc:	b2c8      	uxtb	r0, r1
    b6be:	bd10      	pop	{r4, pc}
    b6c0:	f7fe fba4 	bl	9e0c <__swbuf_r>
    b6c4:	e7fb      	b.n	b6be <__sfputc_r+0x22>

0000b6c6 <__sfputs_r>:
    b6c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6c8:	0006      	movs	r6, r0
    b6ca:	000f      	movs	r7, r1
    b6cc:	0014      	movs	r4, r2
    b6ce:	18d5      	adds	r5, r2, r3
    b6d0:	42ac      	cmp	r4, r5
    b6d2:	d101      	bne.n	b6d8 <__sfputs_r+0x12>
    b6d4:	2000      	movs	r0, #0
    b6d6:	e007      	b.n	b6e8 <__sfputs_r+0x22>
    b6d8:	7821      	ldrb	r1, [r4, #0]
    b6da:	003a      	movs	r2, r7
    b6dc:	0030      	movs	r0, r6
    b6de:	f7ff ffdd 	bl	b69c <__sfputc_r>
    b6e2:	3401      	adds	r4, #1
    b6e4:	1c43      	adds	r3, r0, #1
    b6e6:	d1f3      	bne.n	b6d0 <__sfputs_r+0xa>
    b6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000b6ec <_vfiprintf_r>:
    b6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6ee:	b09f      	sub	sp, #124	; 0x7c
    b6f0:	0006      	movs	r6, r0
    b6f2:	000f      	movs	r7, r1
    b6f4:	0014      	movs	r4, r2
    b6f6:	9305      	str	r3, [sp, #20]
    b6f8:	2800      	cmp	r0, #0
    b6fa:	d004      	beq.n	b706 <_vfiprintf_r+0x1a>
    b6fc:	6983      	ldr	r3, [r0, #24]
    b6fe:	2b00      	cmp	r3, #0
    b700:	d101      	bne.n	b706 <_vfiprintf_r+0x1a>
    b702:	f7ff fbbf 	bl	ae84 <__sinit>
    b706:	4b7f      	ldr	r3, [pc, #508]	; (b904 <_vfiprintf_r+0x218>)
    b708:	429f      	cmp	r7, r3
    b70a:	d15c      	bne.n	b7c6 <_vfiprintf_r+0xda>
    b70c:	6877      	ldr	r7, [r6, #4]
    b70e:	89bb      	ldrh	r3, [r7, #12]
    b710:	071b      	lsls	r3, r3, #28
    b712:	d562      	bpl.n	b7da <_vfiprintf_r+0xee>
    b714:	693b      	ldr	r3, [r7, #16]
    b716:	2b00      	cmp	r3, #0
    b718:	d05f      	beq.n	b7da <_vfiprintf_r+0xee>
    b71a:	2300      	movs	r3, #0
    b71c:	ad06      	add	r5, sp, #24
    b71e:	616b      	str	r3, [r5, #20]
    b720:	3320      	adds	r3, #32
    b722:	766b      	strb	r3, [r5, #25]
    b724:	3310      	adds	r3, #16
    b726:	76ab      	strb	r3, [r5, #26]
    b728:	9402      	str	r4, [sp, #8]
    b72a:	9c02      	ldr	r4, [sp, #8]
    b72c:	7823      	ldrb	r3, [r4, #0]
    b72e:	2b00      	cmp	r3, #0
    b730:	d15d      	bne.n	b7ee <_vfiprintf_r+0x102>
    b732:	9b02      	ldr	r3, [sp, #8]
    b734:	1ae3      	subs	r3, r4, r3
    b736:	9304      	str	r3, [sp, #16]
    b738:	d00d      	beq.n	b756 <_vfiprintf_r+0x6a>
    b73a:	9b04      	ldr	r3, [sp, #16]
    b73c:	9a02      	ldr	r2, [sp, #8]
    b73e:	0039      	movs	r1, r7
    b740:	0030      	movs	r0, r6
    b742:	f7ff ffc0 	bl	b6c6 <__sfputs_r>
    b746:	1c43      	adds	r3, r0, #1
    b748:	d100      	bne.n	b74c <_vfiprintf_r+0x60>
    b74a:	e0cc      	b.n	b8e6 <_vfiprintf_r+0x1fa>
    b74c:	696a      	ldr	r2, [r5, #20]
    b74e:	9b04      	ldr	r3, [sp, #16]
    b750:	4694      	mov	ip, r2
    b752:	4463      	add	r3, ip
    b754:	616b      	str	r3, [r5, #20]
    b756:	7823      	ldrb	r3, [r4, #0]
    b758:	2b00      	cmp	r3, #0
    b75a:	d100      	bne.n	b75e <_vfiprintf_r+0x72>
    b75c:	e0c3      	b.n	b8e6 <_vfiprintf_r+0x1fa>
    b75e:	2201      	movs	r2, #1
    b760:	2300      	movs	r3, #0
    b762:	4252      	negs	r2, r2
    b764:	606a      	str	r2, [r5, #4]
    b766:	a902      	add	r1, sp, #8
    b768:	3254      	adds	r2, #84	; 0x54
    b76a:	1852      	adds	r2, r2, r1
    b76c:	3401      	adds	r4, #1
    b76e:	602b      	str	r3, [r5, #0]
    b770:	60eb      	str	r3, [r5, #12]
    b772:	60ab      	str	r3, [r5, #8]
    b774:	7013      	strb	r3, [r2, #0]
    b776:	65ab      	str	r3, [r5, #88]	; 0x58
    b778:	7821      	ldrb	r1, [r4, #0]
    b77a:	2205      	movs	r2, #5
    b77c:	4862      	ldr	r0, [pc, #392]	; (b908 <_vfiprintf_r+0x21c>)
    b77e:	f7ff fc8f 	bl	b0a0 <memchr>
    b782:	1c63      	adds	r3, r4, #1
    b784:	469c      	mov	ip, r3
    b786:	2800      	cmp	r0, #0
    b788:	d135      	bne.n	b7f6 <_vfiprintf_r+0x10a>
    b78a:	6829      	ldr	r1, [r5, #0]
    b78c:	06cb      	lsls	r3, r1, #27
    b78e:	d504      	bpl.n	b79a <_vfiprintf_r+0xae>
    b790:	2353      	movs	r3, #83	; 0x53
    b792:	aa02      	add	r2, sp, #8
    b794:	3020      	adds	r0, #32
    b796:	189b      	adds	r3, r3, r2
    b798:	7018      	strb	r0, [r3, #0]
    b79a:	070b      	lsls	r3, r1, #28
    b79c:	d504      	bpl.n	b7a8 <_vfiprintf_r+0xbc>
    b79e:	2353      	movs	r3, #83	; 0x53
    b7a0:	202b      	movs	r0, #43	; 0x2b
    b7a2:	aa02      	add	r2, sp, #8
    b7a4:	189b      	adds	r3, r3, r2
    b7a6:	7018      	strb	r0, [r3, #0]
    b7a8:	7823      	ldrb	r3, [r4, #0]
    b7aa:	2b2a      	cmp	r3, #42	; 0x2a
    b7ac:	d02c      	beq.n	b808 <_vfiprintf_r+0x11c>
    b7ae:	2000      	movs	r0, #0
    b7b0:	210a      	movs	r1, #10
    b7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b7b4:	7822      	ldrb	r2, [r4, #0]
    b7b6:	3a30      	subs	r2, #48	; 0x30
    b7b8:	2a09      	cmp	r2, #9
    b7ba:	d800      	bhi.n	b7be <_vfiprintf_r+0xd2>
    b7bc:	e06b      	b.n	b896 <_vfiprintf_r+0x1aa>
    b7be:	2800      	cmp	r0, #0
    b7c0:	d02a      	beq.n	b818 <_vfiprintf_r+0x12c>
    b7c2:	9309      	str	r3, [sp, #36]	; 0x24
    b7c4:	e028      	b.n	b818 <_vfiprintf_r+0x12c>
    b7c6:	4b51      	ldr	r3, [pc, #324]	; (b90c <_vfiprintf_r+0x220>)
    b7c8:	429f      	cmp	r7, r3
    b7ca:	d101      	bne.n	b7d0 <_vfiprintf_r+0xe4>
    b7cc:	68b7      	ldr	r7, [r6, #8]
    b7ce:	e79e      	b.n	b70e <_vfiprintf_r+0x22>
    b7d0:	4b4f      	ldr	r3, [pc, #316]	; (b910 <_vfiprintf_r+0x224>)
    b7d2:	429f      	cmp	r7, r3
    b7d4:	d19b      	bne.n	b70e <_vfiprintf_r+0x22>
    b7d6:	68f7      	ldr	r7, [r6, #12]
    b7d8:	e799      	b.n	b70e <_vfiprintf_r+0x22>
    b7da:	0039      	movs	r1, r7
    b7dc:	0030      	movs	r0, r6
    b7de:	f7fe fb77 	bl	9ed0 <__swsetup_r>
    b7e2:	2800      	cmp	r0, #0
    b7e4:	d099      	beq.n	b71a <_vfiprintf_r+0x2e>
    b7e6:	2001      	movs	r0, #1
    b7e8:	4240      	negs	r0, r0
    b7ea:	b01f      	add	sp, #124	; 0x7c
    b7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7ee:	2b25      	cmp	r3, #37	; 0x25
    b7f0:	d09f      	beq.n	b732 <_vfiprintf_r+0x46>
    b7f2:	3401      	adds	r4, #1
    b7f4:	e79a      	b.n	b72c <_vfiprintf_r+0x40>
    b7f6:	4b44      	ldr	r3, [pc, #272]	; (b908 <_vfiprintf_r+0x21c>)
    b7f8:	6829      	ldr	r1, [r5, #0]
    b7fa:	1ac0      	subs	r0, r0, r3
    b7fc:	2301      	movs	r3, #1
    b7fe:	4083      	lsls	r3, r0
    b800:	430b      	orrs	r3, r1
    b802:	602b      	str	r3, [r5, #0]
    b804:	4664      	mov	r4, ip
    b806:	e7b7      	b.n	b778 <_vfiprintf_r+0x8c>
    b808:	9b05      	ldr	r3, [sp, #20]
    b80a:	1d18      	adds	r0, r3, #4
    b80c:	681b      	ldr	r3, [r3, #0]
    b80e:	9005      	str	r0, [sp, #20]
    b810:	2b00      	cmp	r3, #0
    b812:	db3a      	blt.n	b88a <_vfiprintf_r+0x19e>
    b814:	9309      	str	r3, [sp, #36]	; 0x24
    b816:	4664      	mov	r4, ip
    b818:	7823      	ldrb	r3, [r4, #0]
    b81a:	2b2e      	cmp	r3, #46	; 0x2e
    b81c:	d10b      	bne.n	b836 <_vfiprintf_r+0x14a>
    b81e:	7863      	ldrb	r3, [r4, #1]
    b820:	1c62      	adds	r2, r4, #1
    b822:	2b2a      	cmp	r3, #42	; 0x2a
    b824:	d13f      	bne.n	b8a6 <_vfiprintf_r+0x1ba>
    b826:	9b05      	ldr	r3, [sp, #20]
    b828:	3402      	adds	r4, #2
    b82a:	1d1a      	adds	r2, r3, #4
    b82c:	681b      	ldr	r3, [r3, #0]
    b82e:	9205      	str	r2, [sp, #20]
    b830:	2b00      	cmp	r3, #0
    b832:	db35      	blt.n	b8a0 <_vfiprintf_r+0x1b4>
    b834:	9307      	str	r3, [sp, #28]
    b836:	7821      	ldrb	r1, [r4, #0]
    b838:	2203      	movs	r2, #3
    b83a:	4836      	ldr	r0, [pc, #216]	; (b914 <_vfiprintf_r+0x228>)
    b83c:	f7ff fc30 	bl	b0a0 <memchr>
    b840:	2800      	cmp	r0, #0
    b842:	d007      	beq.n	b854 <_vfiprintf_r+0x168>
    b844:	4b33      	ldr	r3, [pc, #204]	; (b914 <_vfiprintf_r+0x228>)
    b846:	682a      	ldr	r2, [r5, #0]
    b848:	1ac0      	subs	r0, r0, r3
    b84a:	2340      	movs	r3, #64	; 0x40
    b84c:	4083      	lsls	r3, r0
    b84e:	4313      	orrs	r3, r2
    b850:	602b      	str	r3, [r5, #0]
    b852:	3401      	adds	r4, #1
    b854:	7821      	ldrb	r1, [r4, #0]
    b856:	1c63      	adds	r3, r4, #1
    b858:	2206      	movs	r2, #6
    b85a:	482f      	ldr	r0, [pc, #188]	; (b918 <_vfiprintf_r+0x22c>)
    b85c:	9302      	str	r3, [sp, #8]
    b85e:	7629      	strb	r1, [r5, #24]
    b860:	f7ff fc1e 	bl	b0a0 <memchr>
    b864:	2800      	cmp	r0, #0
    b866:	d044      	beq.n	b8f2 <_vfiprintf_r+0x206>
    b868:	4b2c      	ldr	r3, [pc, #176]	; (b91c <_vfiprintf_r+0x230>)
    b86a:	2b00      	cmp	r3, #0
    b86c:	d12f      	bne.n	b8ce <_vfiprintf_r+0x1e2>
    b86e:	6829      	ldr	r1, [r5, #0]
    b870:	9b05      	ldr	r3, [sp, #20]
    b872:	2207      	movs	r2, #7
    b874:	05c9      	lsls	r1, r1, #23
    b876:	d528      	bpl.n	b8ca <_vfiprintf_r+0x1de>
    b878:	189b      	adds	r3, r3, r2
    b87a:	4393      	bics	r3, r2
    b87c:	3308      	adds	r3, #8
    b87e:	9305      	str	r3, [sp, #20]
    b880:	696b      	ldr	r3, [r5, #20]
    b882:	9a03      	ldr	r2, [sp, #12]
    b884:	189b      	adds	r3, r3, r2
    b886:	616b      	str	r3, [r5, #20]
    b888:	e74f      	b.n	b72a <_vfiprintf_r+0x3e>
    b88a:	425b      	negs	r3, r3
    b88c:	60eb      	str	r3, [r5, #12]
    b88e:	2302      	movs	r3, #2
    b890:	430b      	orrs	r3, r1
    b892:	602b      	str	r3, [r5, #0]
    b894:	e7bf      	b.n	b816 <_vfiprintf_r+0x12a>
    b896:	434b      	muls	r3, r1
    b898:	3401      	adds	r4, #1
    b89a:	189b      	adds	r3, r3, r2
    b89c:	2001      	movs	r0, #1
    b89e:	e789      	b.n	b7b4 <_vfiprintf_r+0xc8>
    b8a0:	2301      	movs	r3, #1
    b8a2:	425b      	negs	r3, r3
    b8a4:	e7c6      	b.n	b834 <_vfiprintf_r+0x148>
    b8a6:	2300      	movs	r3, #0
    b8a8:	0014      	movs	r4, r2
    b8aa:	200a      	movs	r0, #10
    b8ac:	001a      	movs	r2, r3
    b8ae:	606b      	str	r3, [r5, #4]
    b8b0:	7821      	ldrb	r1, [r4, #0]
    b8b2:	3930      	subs	r1, #48	; 0x30
    b8b4:	2909      	cmp	r1, #9
    b8b6:	d903      	bls.n	b8c0 <_vfiprintf_r+0x1d4>
    b8b8:	2b00      	cmp	r3, #0
    b8ba:	d0bc      	beq.n	b836 <_vfiprintf_r+0x14a>
    b8bc:	9207      	str	r2, [sp, #28]
    b8be:	e7ba      	b.n	b836 <_vfiprintf_r+0x14a>
    b8c0:	4342      	muls	r2, r0
    b8c2:	3401      	adds	r4, #1
    b8c4:	1852      	adds	r2, r2, r1
    b8c6:	2301      	movs	r3, #1
    b8c8:	e7f2      	b.n	b8b0 <_vfiprintf_r+0x1c4>
    b8ca:	3307      	adds	r3, #7
    b8cc:	e7d5      	b.n	b87a <_vfiprintf_r+0x18e>
    b8ce:	ab05      	add	r3, sp, #20
    b8d0:	9300      	str	r3, [sp, #0]
    b8d2:	003a      	movs	r2, r7
    b8d4:	4b12      	ldr	r3, [pc, #72]	; (b920 <_vfiprintf_r+0x234>)
    b8d6:	0029      	movs	r1, r5
    b8d8:	0030      	movs	r0, r6
    b8da:	f7fd fc6d 	bl	91b8 <_printf_float>
    b8de:	9003      	str	r0, [sp, #12]
    b8e0:	9b03      	ldr	r3, [sp, #12]
    b8e2:	3301      	adds	r3, #1
    b8e4:	d1cc      	bne.n	b880 <_vfiprintf_r+0x194>
    b8e6:	89bb      	ldrh	r3, [r7, #12]
    b8e8:	065b      	lsls	r3, r3, #25
    b8ea:	d500      	bpl.n	b8ee <_vfiprintf_r+0x202>
    b8ec:	e77b      	b.n	b7e6 <_vfiprintf_r+0xfa>
    b8ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b8f0:	e77b      	b.n	b7ea <_vfiprintf_r+0xfe>
    b8f2:	ab05      	add	r3, sp, #20
    b8f4:	9300      	str	r3, [sp, #0]
    b8f6:	003a      	movs	r2, r7
    b8f8:	4b09      	ldr	r3, [pc, #36]	; (b920 <_vfiprintf_r+0x234>)
    b8fa:	0029      	movs	r1, r5
    b8fc:	0030      	movs	r0, r6
    b8fe:	f7fd ff15 	bl	972c <_printf_i>
    b902:	e7ec      	b.n	b8de <_vfiprintf_r+0x1f2>
    b904:	0000ee44 	.word	0x0000ee44
    b908:	0000ef84 	.word	0x0000ef84
    b90c:	0000ee64 	.word	0x0000ee64
    b910:	0000ee24 	.word	0x0000ee24
    b914:	0000ef8a 	.word	0x0000ef8a
    b918:	0000ef8e 	.word	0x0000ef8e
    b91c:	000091b9 	.word	0x000091b9
    b920:	0000b6c7 	.word	0x0000b6c7

0000b924 <__sread>:
    b924:	b570      	push	{r4, r5, r6, lr}
    b926:	000c      	movs	r4, r1
    b928:	250e      	movs	r5, #14
    b92a:	5f49      	ldrsh	r1, [r1, r5]
    b92c:	f000 f8a4 	bl	ba78 <_read_r>
    b930:	2800      	cmp	r0, #0
    b932:	db03      	blt.n	b93c <__sread+0x18>
    b934:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b936:	181b      	adds	r3, r3, r0
    b938:	6563      	str	r3, [r4, #84]	; 0x54
    b93a:	bd70      	pop	{r4, r5, r6, pc}
    b93c:	89a3      	ldrh	r3, [r4, #12]
    b93e:	4a02      	ldr	r2, [pc, #8]	; (b948 <__sread+0x24>)
    b940:	4013      	ands	r3, r2
    b942:	81a3      	strh	r3, [r4, #12]
    b944:	e7f9      	b.n	b93a <__sread+0x16>
    b946:	46c0      	nop			; (mov r8, r8)
    b948:	ffffefff 	.word	0xffffefff

0000b94c <__swrite>:
    b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b94e:	001f      	movs	r7, r3
    b950:	898b      	ldrh	r3, [r1, #12]
    b952:	0005      	movs	r5, r0
    b954:	000c      	movs	r4, r1
    b956:	0016      	movs	r6, r2
    b958:	05db      	lsls	r3, r3, #23
    b95a:	d505      	bpl.n	b968 <__swrite+0x1c>
    b95c:	230e      	movs	r3, #14
    b95e:	5ec9      	ldrsh	r1, [r1, r3]
    b960:	2200      	movs	r2, #0
    b962:	2302      	movs	r3, #2
    b964:	f000 f874 	bl	ba50 <_lseek_r>
    b968:	89a3      	ldrh	r3, [r4, #12]
    b96a:	4a05      	ldr	r2, [pc, #20]	; (b980 <__swrite+0x34>)
    b96c:	0028      	movs	r0, r5
    b96e:	4013      	ands	r3, r2
    b970:	81a3      	strh	r3, [r4, #12]
    b972:	0032      	movs	r2, r6
    b974:	230e      	movs	r3, #14
    b976:	5ee1      	ldrsh	r1, [r4, r3]
    b978:	003b      	movs	r3, r7
    b97a:	f000 f81f 	bl	b9bc <_write_r>
    b97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b980:	ffffefff 	.word	0xffffefff

0000b984 <__sseek>:
    b984:	b570      	push	{r4, r5, r6, lr}
    b986:	000c      	movs	r4, r1
    b988:	250e      	movs	r5, #14
    b98a:	5f49      	ldrsh	r1, [r1, r5]
    b98c:	f000 f860 	bl	ba50 <_lseek_r>
    b990:	89a3      	ldrh	r3, [r4, #12]
    b992:	1c42      	adds	r2, r0, #1
    b994:	d103      	bne.n	b99e <__sseek+0x1a>
    b996:	4a05      	ldr	r2, [pc, #20]	; (b9ac <__sseek+0x28>)
    b998:	4013      	ands	r3, r2
    b99a:	81a3      	strh	r3, [r4, #12]
    b99c:	bd70      	pop	{r4, r5, r6, pc}
    b99e:	2280      	movs	r2, #128	; 0x80
    b9a0:	0152      	lsls	r2, r2, #5
    b9a2:	4313      	orrs	r3, r2
    b9a4:	81a3      	strh	r3, [r4, #12]
    b9a6:	6560      	str	r0, [r4, #84]	; 0x54
    b9a8:	e7f8      	b.n	b99c <__sseek+0x18>
    b9aa:	46c0      	nop			; (mov r8, r8)
    b9ac:	ffffefff 	.word	0xffffefff

0000b9b0 <__sclose>:
    b9b0:	b510      	push	{r4, lr}
    b9b2:	230e      	movs	r3, #14
    b9b4:	5ec9      	ldrsh	r1, [r1, r3]
    b9b6:	f000 f815 	bl	b9e4 <_close_r>
    b9ba:	bd10      	pop	{r4, pc}

0000b9bc <_write_r>:
    b9bc:	b570      	push	{r4, r5, r6, lr}
    b9be:	0005      	movs	r5, r0
    b9c0:	0008      	movs	r0, r1
    b9c2:	0011      	movs	r1, r2
    b9c4:	2200      	movs	r2, #0
    b9c6:	4c06      	ldr	r4, [pc, #24]	; (b9e0 <_write_r+0x24>)
    b9c8:	6022      	str	r2, [r4, #0]
    b9ca:	001a      	movs	r2, r3
    b9cc:	f7f8 fff4 	bl	49b8 <_write>
    b9d0:	1c43      	adds	r3, r0, #1
    b9d2:	d103      	bne.n	b9dc <_write_r+0x20>
    b9d4:	6823      	ldr	r3, [r4, #0]
    b9d6:	2b00      	cmp	r3, #0
    b9d8:	d000      	beq.n	b9dc <_write_r+0x20>
    b9da:	602b      	str	r3, [r5, #0]
    b9dc:	bd70      	pop	{r4, r5, r6, pc}
    b9de:	46c0      	nop			; (mov r8, r8)
    b9e0:	20000450 	.word	0x20000450

0000b9e4 <_close_r>:
    b9e4:	2300      	movs	r3, #0
    b9e6:	b570      	push	{r4, r5, r6, lr}
    b9e8:	4c06      	ldr	r4, [pc, #24]	; (ba04 <_close_r+0x20>)
    b9ea:	0005      	movs	r5, r0
    b9ec:	0008      	movs	r0, r1
    b9ee:	6023      	str	r3, [r4, #0]
    b9f0:	f7fb f918 	bl	6c24 <_close>
    b9f4:	1c43      	adds	r3, r0, #1
    b9f6:	d103      	bne.n	ba00 <_close_r+0x1c>
    b9f8:	6823      	ldr	r3, [r4, #0]
    b9fa:	2b00      	cmp	r3, #0
    b9fc:	d000      	beq.n	ba00 <_close_r+0x1c>
    b9fe:	602b      	str	r3, [r5, #0]
    ba00:	bd70      	pop	{r4, r5, r6, pc}
    ba02:	46c0      	nop			; (mov r8, r8)
    ba04:	20000450 	.word	0x20000450

0000ba08 <_fstat_r>:
    ba08:	2300      	movs	r3, #0
    ba0a:	b570      	push	{r4, r5, r6, lr}
    ba0c:	4c06      	ldr	r4, [pc, #24]	; (ba28 <_fstat_r+0x20>)
    ba0e:	0005      	movs	r5, r0
    ba10:	0008      	movs	r0, r1
    ba12:	0011      	movs	r1, r2
    ba14:	6023      	str	r3, [r4, #0]
    ba16:	f7fb f90f 	bl	6c38 <_fstat>
    ba1a:	1c43      	adds	r3, r0, #1
    ba1c:	d103      	bne.n	ba26 <_fstat_r+0x1e>
    ba1e:	6823      	ldr	r3, [r4, #0]
    ba20:	2b00      	cmp	r3, #0
    ba22:	d000      	beq.n	ba26 <_fstat_r+0x1e>
    ba24:	602b      	str	r3, [r5, #0]
    ba26:	bd70      	pop	{r4, r5, r6, pc}
    ba28:	20000450 	.word	0x20000450

0000ba2c <_isatty_r>:
    ba2c:	2300      	movs	r3, #0
    ba2e:	b570      	push	{r4, r5, r6, lr}
    ba30:	4c06      	ldr	r4, [pc, #24]	; (ba4c <_isatty_r+0x20>)
    ba32:	0005      	movs	r5, r0
    ba34:	0008      	movs	r0, r1
    ba36:	6023      	str	r3, [r4, #0]
    ba38:	f7fb f90c 	bl	6c54 <_isatty>
    ba3c:	1c43      	adds	r3, r0, #1
    ba3e:	d103      	bne.n	ba48 <_isatty_r+0x1c>
    ba40:	6823      	ldr	r3, [r4, #0]
    ba42:	2b00      	cmp	r3, #0
    ba44:	d000      	beq.n	ba48 <_isatty_r+0x1c>
    ba46:	602b      	str	r3, [r5, #0]
    ba48:	bd70      	pop	{r4, r5, r6, pc}
    ba4a:	46c0      	nop			; (mov r8, r8)
    ba4c:	20000450 	.word	0x20000450

0000ba50 <_lseek_r>:
    ba50:	b570      	push	{r4, r5, r6, lr}
    ba52:	0005      	movs	r5, r0
    ba54:	0008      	movs	r0, r1
    ba56:	0011      	movs	r1, r2
    ba58:	2200      	movs	r2, #0
    ba5a:	4c06      	ldr	r4, [pc, #24]	; (ba74 <_lseek_r+0x24>)
    ba5c:	6022      	str	r2, [r4, #0]
    ba5e:	001a      	movs	r2, r3
    ba60:	f7fb f901 	bl	6c66 <_lseek>
    ba64:	1c43      	adds	r3, r0, #1
    ba66:	d103      	bne.n	ba70 <_lseek_r+0x20>
    ba68:	6823      	ldr	r3, [r4, #0]
    ba6a:	2b00      	cmp	r3, #0
    ba6c:	d000      	beq.n	ba70 <_lseek_r+0x20>
    ba6e:	602b      	str	r3, [r5, #0]
    ba70:	bd70      	pop	{r4, r5, r6, pc}
    ba72:	46c0      	nop			; (mov r8, r8)
    ba74:	20000450 	.word	0x20000450

0000ba78 <_read_r>:
    ba78:	b570      	push	{r4, r5, r6, lr}
    ba7a:	0005      	movs	r5, r0
    ba7c:	0008      	movs	r0, r1
    ba7e:	0011      	movs	r1, r2
    ba80:	2200      	movs	r2, #0
    ba82:	4c06      	ldr	r4, [pc, #24]	; (ba9c <_read_r+0x24>)
    ba84:	6022      	str	r2, [r4, #0]
    ba86:	001a      	movs	r2, r3
    ba88:	f7f8 ff6c 	bl	4964 <_read>
    ba8c:	1c43      	adds	r3, r0, #1
    ba8e:	d103      	bne.n	ba98 <_read_r+0x20>
    ba90:	6823      	ldr	r3, [r4, #0]
    ba92:	2b00      	cmp	r3, #0
    ba94:	d000      	beq.n	ba98 <_read_r+0x20>
    ba96:	602b      	str	r3, [r5, #0]
    ba98:	bd70      	pop	{r4, r5, r6, pc}
    ba9a:	46c0      	nop			; (mov r8, r8)
    ba9c:	20000450 	.word	0x20000450

0000baa0 <__gnu_thumb1_case_uqi>:
    baa0:	b402      	push	{r1}
    baa2:	4671      	mov	r1, lr
    baa4:	0849      	lsrs	r1, r1, #1
    baa6:	0049      	lsls	r1, r1, #1
    baa8:	5c09      	ldrb	r1, [r1, r0]
    baaa:	0049      	lsls	r1, r1, #1
    baac:	448e      	add	lr, r1
    baae:	bc02      	pop	{r1}
    bab0:	4770      	bx	lr
    bab2:	46c0      	nop			; (mov r8, r8)

0000bab4 <__udivsi3>:
    bab4:	2200      	movs	r2, #0
    bab6:	0843      	lsrs	r3, r0, #1
    bab8:	428b      	cmp	r3, r1
    baba:	d374      	bcc.n	bba6 <__udivsi3+0xf2>
    babc:	0903      	lsrs	r3, r0, #4
    babe:	428b      	cmp	r3, r1
    bac0:	d35f      	bcc.n	bb82 <__udivsi3+0xce>
    bac2:	0a03      	lsrs	r3, r0, #8
    bac4:	428b      	cmp	r3, r1
    bac6:	d344      	bcc.n	bb52 <__udivsi3+0x9e>
    bac8:	0b03      	lsrs	r3, r0, #12
    baca:	428b      	cmp	r3, r1
    bacc:	d328      	bcc.n	bb20 <__udivsi3+0x6c>
    bace:	0c03      	lsrs	r3, r0, #16
    bad0:	428b      	cmp	r3, r1
    bad2:	d30d      	bcc.n	baf0 <__udivsi3+0x3c>
    bad4:	22ff      	movs	r2, #255	; 0xff
    bad6:	0209      	lsls	r1, r1, #8
    bad8:	ba12      	rev	r2, r2
    bada:	0c03      	lsrs	r3, r0, #16
    badc:	428b      	cmp	r3, r1
    bade:	d302      	bcc.n	bae6 <__udivsi3+0x32>
    bae0:	1212      	asrs	r2, r2, #8
    bae2:	0209      	lsls	r1, r1, #8
    bae4:	d065      	beq.n	bbb2 <__udivsi3+0xfe>
    bae6:	0b03      	lsrs	r3, r0, #12
    bae8:	428b      	cmp	r3, r1
    baea:	d319      	bcc.n	bb20 <__udivsi3+0x6c>
    baec:	e000      	b.n	baf0 <__udivsi3+0x3c>
    baee:	0a09      	lsrs	r1, r1, #8
    baf0:	0bc3      	lsrs	r3, r0, #15
    baf2:	428b      	cmp	r3, r1
    baf4:	d301      	bcc.n	bafa <__udivsi3+0x46>
    baf6:	03cb      	lsls	r3, r1, #15
    baf8:	1ac0      	subs	r0, r0, r3
    bafa:	4152      	adcs	r2, r2
    bafc:	0b83      	lsrs	r3, r0, #14
    bafe:	428b      	cmp	r3, r1
    bb00:	d301      	bcc.n	bb06 <__udivsi3+0x52>
    bb02:	038b      	lsls	r3, r1, #14
    bb04:	1ac0      	subs	r0, r0, r3
    bb06:	4152      	adcs	r2, r2
    bb08:	0b43      	lsrs	r3, r0, #13
    bb0a:	428b      	cmp	r3, r1
    bb0c:	d301      	bcc.n	bb12 <__udivsi3+0x5e>
    bb0e:	034b      	lsls	r3, r1, #13
    bb10:	1ac0      	subs	r0, r0, r3
    bb12:	4152      	adcs	r2, r2
    bb14:	0b03      	lsrs	r3, r0, #12
    bb16:	428b      	cmp	r3, r1
    bb18:	d301      	bcc.n	bb1e <__udivsi3+0x6a>
    bb1a:	030b      	lsls	r3, r1, #12
    bb1c:	1ac0      	subs	r0, r0, r3
    bb1e:	4152      	adcs	r2, r2
    bb20:	0ac3      	lsrs	r3, r0, #11
    bb22:	428b      	cmp	r3, r1
    bb24:	d301      	bcc.n	bb2a <__udivsi3+0x76>
    bb26:	02cb      	lsls	r3, r1, #11
    bb28:	1ac0      	subs	r0, r0, r3
    bb2a:	4152      	adcs	r2, r2
    bb2c:	0a83      	lsrs	r3, r0, #10
    bb2e:	428b      	cmp	r3, r1
    bb30:	d301      	bcc.n	bb36 <__udivsi3+0x82>
    bb32:	028b      	lsls	r3, r1, #10
    bb34:	1ac0      	subs	r0, r0, r3
    bb36:	4152      	adcs	r2, r2
    bb38:	0a43      	lsrs	r3, r0, #9
    bb3a:	428b      	cmp	r3, r1
    bb3c:	d301      	bcc.n	bb42 <__udivsi3+0x8e>
    bb3e:	024b      	lsls	r3, r1, #9
    bb40:	1ac0      	subs	r0, r0, r3
    bb42:	4152      	adcs	r2, r2
    bb44:	0a03      	lsrs	r3, r0, #8
    bb46:	428b      	cmp	r3, r1
    bb48:	d301      	bcc.n	bb4e <__udivsi3+0x9a>
    bb4a:	020b      	lsls	r3, r1, #8
    bb4c:	1ac0      	subs	r0, r0, r3
    bb4e:	4152      	adcs	r2, r2
    bb50:	d2cd      	bcs.n	baee <__udivsi3+0x3a>
    bb52:	09c3      	lsrs	r3, r0, #7
    bb54:	428b      	cmp	r3, r1
    bb56:	d301      	bcc.n	bb5c <__udivsi3+0xa8>
    bb58:	01cb      	lsls	r3, r1, #7
    bb5a:	1ac0      	subs	r0, r0, r3
    bb5c:	4152      	adcs	r2, r2
    bb5e:	0983      	lsrs	r3, r0, #6
    bb60:	428b      	cmp	r3, r1
    bb62:	d301      	bcc.n	bb68 <__udivsi3+0xb4>
    bb64:	018b      	lsls	r3, r1, #6
    bb66:	1ac0      	subs	r0, r0, r3
    bb68:	4152      	adcs	r2, r2
    bb6a:	0943      	lsrs	r3, r0, #5
    bb6c:	428b      	cmp	r3, r1
    bb6e:	d301      	bcc.n	bb74 <__udivsi3+0xc0>
    bb70:	014b      	lsls	r3, r1, #5
    bb72:	1ac0      	subs	r0, r0, r3
    bb74:	4152      	adcs	r2, r2
    bb76:	0903      	lsrs	r3, r0, #4
    bb78:	428b      	cmp	r3, r1
    bb7a:	d301      	bcc.n	bb80 <__udivsi3+0xcc>
    bb7c:	010b      	lsls	r3, r1, #4
    bb7e:	1ac0      	subs	r0, r0, r3
    bb80:	4152      	adcs	r2, r2
    bb82:	08c3      	lsrs	r3, r0, #3
    bb84:	428b      	cmp	r3, r1
    bb86:	d301      	bcc.n	bb8c <__udivsi3+0xd8>
    bb88:	00cb      	lsls	r3, r1, #3
    bb8a:	1ac0      	subs	r0, r0, r3
    bb8c:	4152      	adcs	r2, r2
    bb8e:	0883      	lsrs	r3, r0, #2
    bb90:	428b      	cmp	r3, r1
    bb92:	d301      	bcc.n	bb98 <__udivsi3+0xe4>
    bb94:	008b      	lsls	r3, r1, #2
    bb96:	1ac0      	subs	r0, r0, r3
    bb98:	4152      	adcs	r2, r2
    bb9a:	0843      	lsrs	r3, r0, #1
    bb9c:	428b      	cmp	r3, r1
    bb9e:	d301      	bcc.n	bba4 <__udivsi3+0xf0>
    bba0:	004b      	lsls	r3, r1, #1
    bba2:	1ac0      	subs	r0, r0, r3
    bba4:	4152      	adcs	r2, r2
    bba6:	1a41      	subs	r1, r0, r1
    bba8:	d200      	bcs.n	bbac <__udivsi3+0xf8>
    bbaa:	4601      	mov	r1, r0
    bbac:	4152      	adcs	r2, r2
    bbae:	4610      	mov	r0, r2
    bbb0:	4770      	bx	lr
    bbb2:	e7ff      	b.n	bbb4 <__udivsi3+0x100>
    bbb4:	b501      	push	{r0, lr}
    bbb6:	2000      	movs	r0, #0
    bbb8:	f000 f8f0 	bl	bd9c <__aeabi_idiv0>
    bbbc:	bd02      	pop	{r1, pc}
    bbbe:	46c0      	nop			; (mov r8, r8)

0000bbc0 <__aeabi_uidivmod>:
    bbc0:	2900      	cmp	r1, #0
    bbc2:	d0f7      	beq.n	bbb4 <__udivsi3+0x100>
    bbc4:	e776      	b.n	bab4 <__udivsi3>
    bbc6:	4770      	bx	lr

0000bbc8 <__divsi3>:
    bbc8:	4603      	mov	r3, r0
    bbca:	430b      	orrs	r3, r1
    bbcc:	d47f      	bmi.n	bcce <__divsi3+0x106>
    bbce:	2200      	movs	r2, #0
    bbd0:	0843      	lsrs	r3, r0, #1
    bbd2:	428b      	cmp	r3, r1
    bbd4:	d374      	bcc.n	bcc0 <__divsi3+0xf8>
    bbd6:	0903      	lsrs	r3, r0, #4
    bbd8:	428b      	cmp	r3, r1
    bbda:	d35f      	bcc.n	bc9c <__divsi3+0xd4>
    bbdc:	0a03      	lsrs	r3, r0, #8
    bbde:	428b      	cmp	r3, r1
    bbe0:	d344      	bcc.n	bc6c <__divsi3+0xa4>
    bbe2:	0b03      	lsrs	r3, r0, #12
    bbe4:	428b      	cmp	r3, r1
    bbe6:	d328      	bcc.n	bc3a <__divsi3+0x72>
    bbe8:	0c03      	lsrs	r3, r0, #16
    bbea:	428b      	cmp	r3, r1
    bbec:	d30d      	bcc.n	bc0a <__divsi3+0x42>
    bbee:	22ff      	movs	r2, #255	; 0xff
    bbf0:	0209      	lsls	r1, r1, #8
    bbf2:	ba12      	rev	r2, r2
    bbf4:	0c03      	lsrs	r3, r0, #16
    bbf6:	428b      	cmp	r3, r1
    bbf8:	d302      	bcc.n	bc00 <__divsi3+0x38>
    bbfa:	1212      	asrs	r2, r2, #8
    bbfc:	0209      	lsls	r1, r1, #8
    bbfe:	d065      	beq.n	bccc <__divsi3+0x104>
    bc00:	0b03      	lsrs	r3, r0, #12
    bc02:	428b      	cmp	r3, r1
    bc04:	d319      	bcc.n	bc3a <__divsi3+0x72>
    bc06:	e000      	b.n	bc0a <__divsi3+0x42>
    bc08:	0a09      	lsrs	r1, r1, #8
    bc0a:	0bc3      	lsrs	r3, r0, #15
    bc0c:	428b      	cmp	r3, r1
    bc0e:	d301      	bcc.n	bc14 <__divsi3+0x4c>
    bc10:	03cb      	lsls	r3, r1, #15
    bc12:	1ac0      	subs	r0, r0, r3
    bc14:	4152      	adcs	r2, r2
    bc16:	0b83      	lsrs	r3, r0, #14
    bc18:	428b      	cmp	r3, r1
    bc1a:	d301      	bcc.n	bc20 <__divsi3+0x58>
    bc1c:	038b      	lsls	r3, r1, #14
    bc1e:	1ac0      	subs	r0, r0, r3
    bc20:	4152      	adcs	r2, r2
    bc22:	0b43      	lsrs	r3, r0, #13
    bc24:	428b      	cmp	r3, r1
    bc26:	d301      	bcc.n	bc2c <__divsi3+0x64>
    bc28:	034b      	lsls	r3, r1, #13
    bc2a:	1ac0      	subs	r0, r0, r3
    bc2c:	4152      	adcs	r2, r2
    bc2e:	0b03      	lsrs	r3, r0, #12
    bc30:	428b      	cmp	r3, r1
    bc32:	d301      	bcc.n	bc38 <__divsi3+0x70>
    bc34:	030b      	lsls	r3, r1, #12
    bc36:	1ac0      	subs	r0, r0, r3
    bc38:	4152      	adcs	r2, r2
    bc3a:	0ac3      	lsrs	r3, r0, #11
    bc3c:	428b      	cmp	r3, r1
    bc3e:	d301      	bcc.n	bc44 <__divsi3+0x7c>
    bc40:	02cb      	lsls	r3, r1, #11
    bc42:	1ac0      	subs	r0, r0, r3
    bc44:	4152      	adcs	r2, r2
    bc46:	0a83      	lsrs	r3, r0, #10
    bc48:	428b      	cmp	r3, r1
    bc4a:	d301      	bcc.n	bc50 <__divsi3+0x88>
    bc4c:	028b      	lsls	r3, r1, #10
    bc4e:	1ac0      	subs	r0, r0, r3
    bc50:	4152      	adcs	r2, r2
    bc52:	0a43      	lsrs	r3, r0, #9
    bc54:	428b      	cmp	r3, r1
    bc56:	d301      	bcc.n	bc5c <__divsi3+0x94>
    bc58:	024b      	lsls	r3, r1, #9
    bc5a:	1ac0      	subs	r0, r0, r3
    bc5c:	4152      	adcs	r2, r2
    bc5e:	0a03      	lsrs	r3, r0, #8
    bc60:	428b      	cmp	r3, r1
    bc62:	d301      	bcc.n	bc68 <__divsi3+0xa0>
    bc64:	020b      	lsls	r3, r1, #8
    bc66:	1ac0      	subs	r0, r0, r3
    bc68:	4152      	adcs	r2, r2
    bc6a:	d2cd      	bcs.n	bc08 <__divsi3+0x40>
    bc6c:	09c3      	lsrs	r3, r0, #7
    bc6e:	428b      	cmp	r3, r1
    bc70:	d301      	bcc.n	bc76 <__divsi3+0xae>
    bc72:	01cb      	lsls	r3, r1, #7
    bc74:	1ac0      	subs	r0, r0, r3
    bc76:	4152      	adcs	r2, r2
    bc78:	0983      	lsrs	r3, r0, #6
    bc7a:	428b      	cmp	r3, r1
    bc7c:	d301      	bcc.n	bc82 <__divsi3+0xba>
    bc7e:	018b      	lsls	r3, r1, #6
    bc80:	1ac0      	subs	r0, r0, r3
    bc82:	4152      	adcs	r2, r2
    bc84:	0943      	lsrs	r3, r0, #5
    bc86:	428b      	cmp	r3, r1
    bc88:	d301      	bcc.n	bc8e <__divsi3+0xc6>
    bc8a:	014b      	lsls	r3, r1, #5
    bc8c:	1ac0      	subs	r0, r0, r3
    bc8e:	4152      	adcs	r2, r2
    bc90:	0903      	lsrs	r3, r0, #4
    bc92:	428b      	cmp	r3, r1
    bc94:	d301      	bcc.n	bc9a <__divsi3+0xd2>
    bc96:	010b      	lsls	r3, r1, #4
    bc98:	1ac0      	subs	r0, r0, r3
    bc9a:	4152      	adcs	r2, r2
    bc9c:	08c3      	lsrs	r3, r0, #3
    bc9e:	428b      	cmp	r3, r1
    bca0:	d301      	bcc.n	bca6 <__divsi3+0xde>
    bca2:	00cb      	lsls	r3, r1, #3
    bca4:	1ac0      	subs	r0, r0, r3
    bca6:	4152      	adcs	r2, r2
    bca8:	0883      	lsrs	r3, r0, #2
    bcaa:	428b      	cmp	r3, r1
    bcac:	d301      	bcc.n	bcb2 <__divsi3+0xea>
    bcae:	008b      	lsls	r3, r1, #2
    bcb0:	1ac0      	subs	r0, r0, r3
    bcb2:	4152      	adcs	r2, r2
    bcb4:	0843      	lsrs	r3, r0, #1
    bcb6:	428b      	cmp	r3, r1
    bcb8:	d301      	bcc.n	bcbe <__divsi3+0xf6>
    bcba:	004b      	lsls	r3, r1, #1
    bcbc:	1ac0      	subs	r0, r0, r3
    bcbe:	4152      	adcs	r2, r2
    bcc0:	1a41      	subs	r1, r0, r1
    bcc2:	d200      	bcs.n	bcc6 <__divsi3+0xfe>
    bcc4:	4601      	mov	r1, r0
    bcc6:	4152      	adcs	r2, r2
    bcc8:	4610      	mov	r0, r2
    bcca:	4770      	bx	lr
    bccc:	e05d      	b.n	bd8a <__divsi3+0x1c2>
    bcce:	0fca      	lsrs	r2, r1, #31
    bcd0:	d000      	beq.n	bcd4 <__divsi3+0x10c>
    bcd2:	4249      	negs	r1, r1
    bcd4:	1003      	asrs	r3, r0, #32
    bcd6:	d300      	bcc.n	bcda <__divsi3+0x112>
    bcd8:	4240      	negs	r0, r0
    bcda:	4053      	eors	r3, r2
    bcdc:	2200      	movs	r2, #0
    bcde:	469c      	mov	ip, r3
    bce0:	0903      	lsrs	r3, r0, #4
    bce2:	428b      	cmp	r3, r1
    bce4:	d32d      	bcc.n	bd42 <__divsi3+0x17a>
    bce6:	0a03      	lsrs	r3, r0, #8
    bce8:	428b      	cmp	r3, r1
    bcea:	d312      	bcc.n	bd12 <__divsi3+0x14a>
    bcec:	22fc      	movs	r2, #252	; 0xfc
    bcee:	0189      	lsls	r1, r1, #6
    bcf0:	ba12      	rev	r2, r2
    bcf2:	0a03      	lsrs	r3, r0, #8
    bcf4:	428b      	cmp	r3, r1
    bcf6:	d30c      	bcc.n	bd12 <__divsi3+0x14a>
    bcf8:	0189      	lsls	r1, r1, #6
    bcfa:	1192      	asrs	r2, r2, #6
    bcfc:	428b      	cmp	r3, r1
    bcfe:	d308      	bcc.n	bd12 <__divsi3+0x14a>
    bd00:	0189      	lsls	r1, r1, #6
    bd02:	1192      	asrs	r2, r2, #6
    bd04:	428b      	cmp	r3, r1
    bd06:	d304      	bcc.n	bd12 <__divsi3+0x14a>
    bd08:	0189      	lsls	r1, r1, #6
    bd0a:	d03a      	beq.n	bd82 <__divsi3+0x1ba>
    bd0c:	1192      	asrs	r2, r2, #6
    bd0e:	e000      	b.n	bd12 <__divsi3+0x14a>
    bd10:	0989      	lsrs	r1, r1, #6
    bd12:	09c3      	lsrs	r3, r0, #7
    bd14:	428b      	cmp	r3, r1
    bd16:	d301      	bcc.n	bd1c <__divsi3+0x154>
    bd18:	01cb      	lsls	r3, r1, #7
    bd1a:	1ac0      	subs	r0, r0, r3
    bd1c:	4152      	adcs	r2, r2
    bd1e:	0983      	lsrs	r3, r0, #6
    bd20:	428b      	cmp	r3, r1
    bd22:	d301      	bcc.n	bd28 <__divsi3+0x160>
    bd24:	018b      	lsls	r3, r1, #6
    bd26:	1ac0      	subs	r0, r0, r3
    bd28:	4152      	adcs	r2, r2
    bd2a:	0943      	lsrs	r3, r0, #5
    bd2c:	428b      	cmp	r3, r1
    bd2e:	d301      	bcc.n	bd34 <__divsi3+0x16c>
    bd30:	014b      	lsls	r3, r1, #5
    bd32:	1ac0      	subs	r0, r0, r3
    bd34:	4152      	adcs	r2, r2
    bd36:	0903      	lsrs	r3, r0, #4
    bd38:	428b      	cmp	r3, r1
    bd3a:	d301      	bcc.n	bd40 <__divsi3+0x178>
    bd3c:	010b      	lsls	r3, r1, #4
    bd3e:	1ac0      	subs	r0, r0, r3
    bd40:	4152      	adcs	r2, r2
    bd42:	08c3      	lsrs	r3, r0, #3
    bd44:	428b      	cmp	r3, r1
    bd46:	d301      	bcc.n	bd4c <__divsi3+0x184>
    bd48:	00cb      	lsls	r3, r1, #3
    bd4a:	1ac0      	subs	r0, r0, r3
    bd4c:	4152      	adcs	r2, r2
    bd4e:	0883      	lsrs	r3, r0, #2
    bd50:	428b      	cmp	r3, r1
    bd52:	d301      	bcc.n	bd58 <__divsi3+0x190>
    bd54:	008b      	lsls	r3, r1, #2
    bd56:	1ac0      	subs	r0, r0, r3
    bd58:	4152      	adcs	r2, r2
    bd5a:	d2d9      	bcs.n	bd10 <__divsi3+0x148>
    bd5c:	0843      	lsrs	r3, r0, #1
    bd5e:	428b      	cmp	r3, r1
    bd60:	d301      	bcc.n	bd66 <__divsi3+0x19e>
    bd62:	004b      	lsls	r3, r1, #1
    bd64:	1ac0      	subs	r0, r0, r3
    bd66:	4152      	adcs	r2, r2
    bd68:	1a41      	subs	r1, r0, r1
    bd6a:	d200      	bcs.n	bd6e <__divsi3+0x1a6>
    bd6c:	4601      	mov	r1, r0
    bd6e:	4663      	mov	r3, ip
    bd70:	4152      	adcs	r2, r2
    bd72:	105b      	asrs	r3, r3, #1
    bd74:	4610      	mov	r0, r2
    bd76:	d301      	bcc.n	bd7c <__divsi3+0x1b4>
    bd78:	4240      	negs	r0, r0
    bd7a:	2b00      	cmp	r3, #0
    bd7c:	d500      	bpl.n	bd80 <__divsi3+0x1b8>
    bd7e:	4249      	negs	r1, r1
    bd80:	4770      	bx	lr
    bd82:	4663      	mov	r3, ip
    bd84:	105b      	asrs	r3, r3, #1
    bd86:	d300      	bcc.n	bd8a <__divsi3+0x1c2>
    bd88:	4240      	negs	r0, r0
    bd8a:	b501      	push	{r0, lr}
    bd8c:	2000      	movs	r0, #0
    bd8e:	f000 f805 	bl	bd9c <__aeabi_idiv0>
    bd92:	bd02      	pop	{r1, pc}

0000bd94 <__aeabi_idivmod>:
    bd94:	2900      	cmp	r1, #0
    bd96:	d0f8      	beq.n	bd8a <__divsi3+0x1c2>
    bd98:	e716      	b.n	bbc8 <__divsi3>
    bd9a:	4770      	bx	lr

0000bd9c <__aeabi_idiv0>:
    bd9c:	4770      	bx	lr
    bd9e:	46c0      	nop			; (mov r8, r8)

0000bda0 <__aeabi_cdrcmple>:
    bda0:	4684      	mov	ip, r0
    bda2:	1c10      	adds	r0, r2, #0
    bda4:	4662      	mov	r2, ip
    bda6:	468c      	mov	ip, r1
    bda8:	1c19      	adds	r1, r3, #0
    bdaa:	4663      	mov	r3, ip
    bdac:	e000      	b.n	bdb0 <__aeabi_cdcmpeq>
    bdae:	46c0      	nop			; (mov r8, r8)

0000bdb0 <__aeabi_cdcmpeq>:
    bdb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bdb2:	f001 fa3d 	bl	d230 <__ledf2>
    bdb6:	2800      	cmp	r0, #0
    bdb8:	d401      	bmi.n	bdbe <__aeabi_cdcmpeq+0xe>
    bdba:	2100      	movs	r1, #0
    bdbc:	42c8      	cmn	r0, r1
    bdbe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000bdc0 <__aeabi_dcmpeq>:
    bdc0:	b510      	push	{r4, lr}
    bdc2:	f001 f997 	bl	d0f4 <__eqdf2>
    bdc6:	4240      	negs	r0, r0
    bdc8:	3001      	adds	r0, #1
    bdca:	bd10      	pop	{r4, pc}

0000bdcc <__aeabi_dcmplt>:
    bdcc:	b510      	push	{r4, lr}
    bdce:	f001 fa2f 	bl	d230 <__ledf2>
    bdd2:	2800      	cmp	r0, #0
    bdd4:	db01      	blt.n	bdda <__aeabi_dcmplt+0xe>
    bdd6:	2000      	movs	r0, #0
    bdd8:	bd10      	pop	{r4, pc}
    bdda:	2001      	movs	r0, #1
    bddc:	bd10      	pop	{r4, pc}
    bdde:	46c0      	nop			; (mov r8, r8)

0000bde0 <__aeabi_dcmple>:
    bde0:	b510      	push	{r4, lr}
    bde2:	f001 fa25 	bl	d230 <__ledf2>
    bde6:	2800      	cmp	r0, #0
    bde8:	dd01      	ble.n	bdee <__aeabi_dcmple+0xe>
    bdea:	2000      	movs	r0, #0
    bdec:	bd10      	pop	{r4, pc}
    bdee:	2001      	movs	r0, #1
    bdf0:	bd10      	pop	{r4, pc}
    bdf2:	46c0      	nop			; (mov r8, r8)

0000bdf4 <__aeabi_dcmpgt>:
    bdf4:	b510      	push	{r4, lr}
    bdf6:	f001 f9b7 	bl	d168 <__gedf2>
    bdfa:	2800      	cmp	r0, #0
    bdfc:	dc01      	bgt.n	be02 <__aeabi_dcmpgt+0xe>
    bdfe:	2000      	movs	r0, #0
    be00:	bd10      	pop	{r4, pc}
    be02:	2001      	movs	r0, #1
    be04:	bd10      	pop	{r4, pc}
    be06:	46c0      	nop			; (mov r8, r8)

0000be08 <__aeabi_dcmpge>:
    be08:	b510      	push	{r4, lr}
    be0a:	f001 f9ad 	bl	d168 <__gedf2>
    be0e:	2800      	cmp	r0, #0
    be10:	da01      	bge.n	be16 <__aeabi_dcmpge+0xe>
    be12:	2000      	movs	r0, #0
    be14:	bd10      	pop	{r4, pc}
    be16:	2001      	movs	r0, #1
    be18:	bd10      	pop	{r4, pc}
    be1a:	46c0      	nop			; (mov r8, r8)

0000be1c <__aeabi_lmul>:
    be1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    be1e:	46ce      	mov	lr, r9
    be20:	4647      	mov	r7, r8
    be22:	0415      	lsls	r5, r2, #16
    be24:	0c2d      	lsrs	r5, r5, #16
    be26:	002e      	movs	r6, r5
    be28:	b580      	push	{r7, lr}
    be2a:	0407      	lsls	r7, r0, #16
    be2c:	0c14      	lsrs	r4, r2, #16
    be2e:	0c3f      	lsrs	r7, r7, #16
    be30:	4699      	mov	r9, r3
    be32:	0c03      	lsrs	r3, r0, #16
    be34:	437e      	muls	r6, r7
    be36:	435d      	muls	r5, r3
    be38:	4367      	muls	r7, r4
    be3a:	4363      	muls	r3, r4
    be3c:	197f      	adds	r7, r7, r5
    be3e:	0c34      	lsrs	r4, r6, #16
    be40:	19e4      	adds	r4, r4, r7
    be42:	469c      	mov	ip, r3
    be44:	42a5      	cmp	r5, r4
    be46:	d903      	bls.n	be50 <__aeabi_lmul+0x34>
    be48:	2380      	movs	r3, #128	; 0x80
    be4a:	025b      	lsls	r3, r3, #9
    be4c:	4698      	mov	r8, r3
    be4e:	44c4      	add	ip, r8
    be50:	464b      	mov	r3, r9
    be52:	4351      	muls	r1, r2
    be54:	4343      	muls	r3, r0
    be56:	0436      	lsls	r6, r6, #16
    be58:	0c36      	lsrs	r6, r6, #16
    be5a:	0c25      	lsrs	r5, r4, #16
    be5c:	0424      	lsls	r4, r4, #16
    be5e:	4465      	add	r5, ip
    be60:	19a4      	adds	r4, r4, r6
    be62:	1859      	adds	r1, r3, r1
    be64:	1949      	adds	r1, r1, r5
    be66:	0020      	movs	r0, r4
    be68:	bc0c      	pop	{r2, r3}
    be6a:	4690      	mov	r8, r2
    be6c:	4699      	mov	r9, r3
    be6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000be70 <__aeabi_fdiv>:
    be70:	b5f0      	push	{r4, r5, r6, r7, lr}
    be72:	4657      	mov	r7, sl
    be74:	464e      	mov	r6, r9
    be76:	46de      	mov	lr, fp
    be78:	4645      	mov	r5, r8
    be7a:	b5e0      	push	{r5, r6, r7, lr}
    be7c:	0244      	lsls	r4, r0, #9
    be7e:	0043      	lsls	r3, r0, #1
    be80:	0fc6      	lsrs	r6, r0, #31
    be82:	b083      	sub	sp, #12
    be84:	1c0f      	adds	r7, r1, #0
    be86:	0a64      	lsrs	r4, r4, #9
    be88:	0e1b      	lsrs	r3, r3, #24
    be8a:	46b2      	mov	sl, r6
    be8c:	d053      	beq.n	bf36 <__aeabi_fdiv+0xc6>
    be8e:	2bff      	cmp	r3, #255	; 0xff
    be90:	d027      	beq.n	bee2 <__aeabi_fdiv+0x72>
    be92:	2280      	movs	r2, #128	; 0x80
    be94:	00e4      	lsls	r4, r4, #3
    be96:	04d2      	lsls	r2, r2, #19
    be98:	4314      	orrs	r4, r2
    be9a:	227f      	movs	r2, #127	; 0x7f
    be9c:	4252      	negs	r2, r2
    be9e:	4690      	mov	r8, r2
    bea0:	4498      	add	r8, r3
    bea2:	2300      	movs	r3, #0
    bea4:	4699      	mov	r9, r3
    bea6:	469b      	mov	fp, r3
    bea8:	027d      	lsls	r5, r7, #9
    beaa:	0078      	lsls	r0, r7, #1
    beac:	0ffb      	lsrs	r3, r7, #31
    beae:	0a6d      	lsrs	r5, r5, #9
    beb0:	0e00      	lsrs	r0, r0, #24
    beb2:	9300      	str	r3, [sp, #0]
    beb4:	d024      	beq.n	bf00 <__aeabi_fdiv+0x90>
    beb6:	28ff      	cmp	r0, #255	; 0xff
    beb8:	d046      	beq.n	bf48 <__aeabi_fdiv+0xd8>
    beba:	2380      	movs	r3, #128	; 0x80
    bebc:	2100      	movs	r1, #0
    bebe:	00ed      	lsls	r5, r5, #3
    bec0:	04db      	lsls	r3, r3, #19
    bec2:	431d      	orrs	r5, r3
    bec4:	387f      	subs	r0, #127	; 0x7f
    bec6:	4647      	mov	r7, r8
    bec8:	1a38      	subs	r0, r7, r0
    beca:	464f      	mov	r7, r9
    becc:	430f      	orrs	r7, r1
    bece:	00bf      	lsls	r7, r7, #2
    bed0:	46b9      	mov	r9, r7
    bed2:	0033      	movs	r3, r6
    bed4:	9a00      	ldr	r2, [sp, #0]
    bed6:	4f87      	ldr	r7, [pc, #540]	; (c0f4 <__aeabi_fdiv+0x284>)
    bed8:	4053      	eors	r3, r2
    beda:	464a      	mov	r2, r9
    bedc:	58ba      	ldr	r2, [r7, r2]
    bede:	9301      	str	r3, [sp, #4]
    bee0:	4697      	mov	pc, r2
    bee2:	2c00      	cmp	r4, #0
    bee4:	d14e      	bne.n	bf84 <__aeabi_fdiv+0x114>
    bee6:	2308      	movs	r3, #8
    bee8:	4699      	mov	r9, r3
    beea:	33f7      	adds	r3, #247	; 0xf7
    beec:	4698      	mov	r8, r3
    beee:	3bfd      	subs	r3, #253	; 0xfd
    bef0:	469b      	mov	fp, r3
    bef2:	027d      	lsls	r5, r7, #9
    bef4:	0078      	lsls	r0, r7, #1
    bef6:	0ffb      	lsrs	r3, r7, #31
    bef8:	0a6d      	lsrs	r5, r5, #9
    befa:	0e00      	lsrs	r0, r0, #24
    befc:	9300      	str	r3, [sp, #0]
    befe:	d1da      	bne.n	beb6 <__aeabi_fdiv+0x46>
    bf00:	2d00      	cmp	r5, #0
    bf02:	d126      	bne.n	bf52 <__aeabi_fdiv+0xe2>
    bf04:	2000      	movs	r0, #0
    bf06:	2101      	movs	r1, #1
    bf08:	0033      	movs	r3, r6
    bf0a:	9a00      	ldr	r2, [sp, #0]
    bf0c:	4f7a      	ldr	r7, [pc, #488]	; (c0f8 <__aeabi_fdiv+0x288>)
    bf0e:	4053      	eors	r3, r2
    bf10:	4642      	mov	r2, r8
    bf12:	1a10      	subs	r0, r2, r0
    bf14:	464a      	mov	r2, r9
    bf16:	430a      	orrs	r2, r1
    bf18:	0092      	lsls	r2, r2, #2
    bf1a:	58ba      	ldr	r2, [r7, r2]
    bf1c:	001d      	movs	r5, r3
    bf1e:	4697      	mov	pc, r2
    bf20:	9b00      	ldr	r3, [sp, #0]
    bf22:	002c      	movs	r4, r5
    bf24:	469a      	mov	sl, r3
    bf26:	468b      	mov	fp, r1
    bf28:	465b      	mov	r3, fp
    bf2a:	2b02      	cmp	r3, #2
    bf2c:	d131      	bne.n	bf92 <__aeabi_fdiv+0x122>
    bf2e:	4653      	mov	r3, sl
    bf30:	21ff      	movs	r1, #255	; 0xff
    bf32:	2400      	movs	r4, #0
    bf34:	e038      	b.n	bfa8 <__aeabi_fdiv+0x138>
    bf36:	2c00      	cmp	r4, #0
    bf38:	d117      	bne.n	bf6a <__aeabi_fdiv+0xfa>
    bf3a:	2304      	movs	r3, #4
    bf3c:	4699      	mov	r9, r3
    bf3e:	2300      	movs	r3, #0
    bf40:	4698      	mov	r8, r3
    bf42:	3301      	adds	r3, #1
    bf44:	469b      	mov	fp, r3
    bf46:	e7af      	b.n	bea8 <__aeabi_fdiv+0x38>
    bf48:	20ff      	movs	r0, #255	; 0xff
    bf4a:	2d00      	cmp	r5, #0
    bf4c:	d10b      	bne.n	bf66 <__aeabi_fdiv+0xf6>
    bf4e:	2102      	movs	r1, #2
    bf50:	e7da      	b.n	bf08 <__aeabi_fdiv+0x98>
    bf52:	0028      	movs	r0, r5
    bf54:	f002 f90e 	bl	e174 <__clzsi2>
    bf58:	1f43      	subs	r3, r0, #5
    bf5a:	409d      	lsls	r5, r3
    bf5c:	2376      	movs	r3, #118	; 0x76
    bf5e:	425b      	negs	r3, r3
    bf60:	1a18      	subs	r0, r3, r0
    bf62:	2100      	movs	r1, #0
    bf64:	e7af      	b.n	bec6 <__aeabi_fdiv+0x56>
    bf66:	2103      	movs	r1, #3
    bf68:	e7ad      	b.n	bec6 <__aeabi_fdiv+0x56>
    bf6a:	0020      	movs	r0, r4
    bf6c:	f002 f902 	bl	e174 <__clzsi2>
    bf70:	1f43      	subs	r3, r0, #5
    bf72:	409c      	lsls	r4, r3
    bf74:	2376      	movs	r3, #118	; 0x76
    bf76:	425b      	negs	r3, r3
    bf78:	1a1b      	subs	r3, r3, r0
    bf7a:	4698      	mov	r8, r3
    bf7c:	2300      	movs	r3, #0
    bf7e:	4699      	mov	r9, r3
    bf80:	469b      	mov	fp, r3
    bf82:	e791      	b.n	bea8 <__aeabi_fdiv+0x38>
    bf84:	230c      	movs	r3, #12
    bf86:	4699      	mov	r9, r3
    bf88:	33f3      	adds	r3, #243	; 0xf3
    bf8a:	4698      	mov	r8, r3
    bf8c:	3bfc      	subs	r3, #252	; 0xfc
    bf8e:	469b      	mov	fp, r3
    bf90:	e78a      	b.n	bea8 <__aeabi_fdiv+0x38>
    bf92:	2b03      	cmp	r3, #3
    bf94:	d100      	bne.n	bf98 <__aeabi_fdiv+0x128>
    bf96:	e0a5      	b.n	c0e4 <__aeabi_fdiv+0x274>
    bf98:	4655      	mov	r5, sl
    bf9a:	2b01      	cmp	r3, #1
    bf9c:	d000      	beq.n	bfa0 <__aeabi_fdiv+0x130>
    bf9e:	e081      	b.n	c0a4 <__aeabi_fdiv+0x234>
    bfa0:	2301      	movs	r3, #1
    bfa2:	2100      	movs	r1, #0
    bfa4:	2400      	movs	r4, #0
    bfa6:	402b      	ands	r3, r5
    bfa8:	0264      	lsls	r4, r4, #9
    bfaa:	05c9      	lsls	r1, r1, #23
    bfac:	0a60      	lsrs	r0, r4, #9
    bfae:	07db      	lsls	r3, r3, #31
    bfb0:	4308      	orrs	r0, r1
    bfb2:	4318      	orrs	r0, r3
    bfb4:	b003      	add	sp, #12
    bfb6:	bc3c      	pop	{r2, r3, r4, r5}
    bfb8:	4690      	mov	r8, r2
    bfba:	4699      	mov	r9, r3
    bfbc:	46a2      	mov	sl, r4
    bfbe:	46ab      	mov	fp, r5
    bfc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bfc2:	2480      	movs	r4, #128	; 0x80
    bfc4:	2300      	movs	r3, #0
    bfc6:	03e4      	lsls	r4, r4, #15
    bfc8:	21ff      	movs	r1, #255	; 0xff
    bfca:	e7ed      	b.n	bfa8 <__aeabi_fdiv+0x138>
    bfcc:	21ff      	movs	r1, #255	; 0xff
    bfce:	2400      	movs	r4, #0
    bfd0:	e7ea      	b.n	bfa8 <__aeabi_fdiv+0x138>
    bfd2:	2301      	movs	r3, #1
    bfd4:	1a59      	subs	r1, r3, r1
    bfd6:	291b      	cmp	r1, #27
    bfd8:	dd66      	ble.n	c0a8 <__aeabi_fdiv+0x238>
    bfda:	9a01      	ldr	r2, [sp, #4]
    bfdc:	4013      	ands	r3, r2
    bfde:	2100      	movs	r1, #0
    bfe0:	2400      	movs	r4, #0
    bfe2:	e7e1      	b.n	bfa8 <__aeabi_fdiv+0x138>
    bfe4:	2380      	movs	r3, #128	; 0x80
    bfe6:	03db      	lsls	r3, r3, #15
    bfe8:	421c      	tst	r4, r3
    bfea:	d038      	beq.n	c05e <__aeabi_fdiv+0x1ee>
    bfec:	421d      	tst	r5, r3
    bfee:	d051      	beq.n	c094 <__aeabi_fdiv+0x224>
    bff0:	431c      	orrs	r4, r3
    bff2:	0264      	lsls	r4, r4, #9
    bff4:	0a64      	lsrs	r4, r4, #9
    bff6:	0033      	movs	r3, r6
    bff8:	21ff      	movs	r1, #255	; 0xff
    bffa:	e7d5      	b.n	bfa8 <__aeabi_fdiv+0x138>
    bffc:	0163      	lsls	r3, r4, #5
    bffe:	016c      	lsls	r4, r5, #5
    c000:	42a3      	cmp	r3, r4
    c002:	d23b      	bcs.n	c07c <__aeabi_fdiv+0x20c>
    c004:	261b      	movs	r6, #27
    c006:	2100      	movs	r1, #0
    c008:	3801      	subs	r0, #1
    c00a:	2501      	movs	r5, #1
    c00c:	001f      	movs	r7, r3
    c00e:	0049      	lsls	r1, r1, #1
    c010:	005b      	lsls	r3, r3, #1
    c012:	2f00      	cmp	r7, #0
    c014:	db01      	blt.n	c01a <__aeabi_fdiv+0x1aa>
    c016:	429c      	cmp	r4, r3
    c018:	d801      	bhi.n	c01e <__aeabi_fdiv+0x1ae>
    c01a:	1b1b      	subs	r3, r3, r4
    c01c:	4329      	orrs	r1, r5
    c01e:	3e01      	subs	r6, #1
    c020:	2e00      	cmp	r6, #0
    c022:	d1f3      	bne.n	c00c <__aeabi_fdiv+0x19c>
    c024:	001c      	movs	r4, r3
    c026:	1e63      	subs	r3, r4, #1
    c028:	419c      	sbcs	r4, r3
    c02a:	430c      	orrs	r4, r1
    c02c:	0001      	movs	r1, r0
    c02e:	317f      	adds	r1, #127	; 0x7f
    c030:	2900      	cmp	r1, #0
    c032:	ddce      	ble.n	bfd2 <__aeabi_fdiv+0x162>
    c034:	0763      	lsls	r3, r4, #29
    c036:	d004      	beq.n	c042 <__aeabi_fdiv+0x1d2>
    c038:	230f      	movs	r3, #15
    c03a:	4023      	ands	r3, r4
    c03c:	2b04      	cmp	r3, #4
    c03e:	d000      	beq.n	c042 <__aeabi_fdiv+0x1d2>
    c040:	3404      	adds	r4, #4
    c042:	0123      	lsls	r3, r4, #4
    c044:	d503      	bpl.n	c04e <__aeabi_fdiv+0x1de>
    c046:	0001      	movs	r1, r0
    c048:	4b2c      	ldr	r3, [pc, #176]	; (c0fc <__aeabi_fdiv+0x28c>)
    c04a:	3180      	adds	r1, #128	; 0x80
    c04c:	401c      	ands	r4, r3
    c04e:	29fe      	cmp	r1, #254	; 0xfe
    c050:	dd0d      	ble.n	c06e <__aeabi_fdiv+0x1fe>
    c052:	2301      	movs	r3, #1
    c054:	9a01      	ldr	r2, [sp, #4]
    c056:	21ff      	movs	r1, #255	; 0xff
    c058:	4013      	ands	r3, r2
    c05a:	2400      	movs	r4, #0
    c05c:	e7a4      	b.n	bfa8 <__aeabi_fdiv+0x138>
    c05e:	2380      	movs	r3, #128	; 0x80
    c060:	03db      	lsls	r3, r3, #15
    c062:	431c      	orrs	r4, r3
    c064:	0264      	lsls	r4, r4, #9
    c066:	0a64      	lsrs	r4, r4, #9
    c068:	0033      	movs	r3, r6
    c06a:	21ff      	movs	r1, #255	; 0xff
    c06c:	e79c      	b.n	bfa8 <__aeabi_fdiv+0x138>
    c06e:	2301      	movs	r3, #1
    c070:	9a01      	ldr	r2, [sp, #4]
    c072:	01a4      	lsls	r4, r4, #6
    c074:	0a64      	lsrs	r4, r4, #9
    c076:	b2c9      	uxtb	r1, r1
    c078:	4013      	ands	r3, r2
    c07a:	e795      	b.n	bfa8 <__aeabi_fdiv+0x138>
    c07c:	1b1b      	subs	r3, r3, r4
    c07e:	261a      	movs	r6, #26
    c080:	2101      	movs	r1, #1
    c082:	e7c2      	b.n	c00a <__aeabi_fdiv+0x19a>
    c084:	9b00      	ldr	r3, [sp, #0]
    c086:	468b      	mov	fp, r1
    c088:	469a      	mov	sl, r3
    c08a:	2400      	movs	r4, #0
    c08c:	e74c      	b.n	bf28 <__aeabi_fdiv+0xb8>
    c08e:	0263      	lsls	r3, r4, #9
    c090:	d5e5      	bpl.n	c05e <__aeabi_fdiv+0x1ee>
    c092:	2500      	movs	r5, #0
    c094:	2480      	movs	r4, #128	; 0x80
    c096:	03e4      	lsls	r4, r4, #15
    c098:	432c      	orrs	r4, r5
    c09a:	0264      	lsls	r4, r4, #9
    c09c:	0a64      	lsrs	r4, r4, #9
    c09e:	9b00      	ldr	r3, [sp, #0]
    c0a0:	21ff      	movs	r1, #255	; 0xff
    c0a2:	e781      	b.n	bfa8 <__aeabi_fdiv+0x138>
    c0a4:	9501      	str	r5, [sp, #4]
    c0a6:	e7c1      	b.n	c02c <__aeabi_fdiv+0x1bc>
    c0a8:	0023      	movs	r3, r4
    c0aa:	2020      	movs	r0, #32
    c0ac:	40cb      	lsrs	r3, r1
    c0ae:	1a41      	subs	r1, r0, r1
    c0b0:	408c      	lsls	r4, r1
    c0b2:	1e61      	subs	r1, r4, #1
    c0b4:	418c      	sbcs	r4, r1
    c0b6:	431c      	orrs	r4, r3
    c0b8:	0763      	lsls	r3, r4, #29
    c0ba:	d004      	beq.n	c0c6 <__aeabi_fdiv+0x256>
    c0bc:	230f      	movs	r3, #15
    c0be:	4023      	ands	r3, r4
    c0c0:	2b04      	cmp	r3, #4
    c0c2:	d000      	beq.n	c0c6 <__aeabi_fdiv+0x256>
    c0c4:	3404      	adds	r4, #4
    c0c6:	0163      	lsls	r3, r4, #5
    c0c8:	d505      	bpl.n	c0d6 <__aeabi_fdiv+0x266>
    c0ca:	2301      	movs	r3, #1
    c0cc:	9a01      	ldr	r2, [sp, #4]
    c0ce:	2101      	movs	r1, #1
    c0d0:	4013      	ands	r3, r2
    c0d2:	2400      	movs	r4, #0
    c0d4:	e768      	b.n	bfa8 <__aeabi_fdiv+0x138>
    c0d6:	2301      	movs	r3, #1
    c0d8:	9a01      	ldr	r2, [sp, #4]
    c0da:	01a4      	lsls	r4, r4, #6
    c0dc:	0a64      	lsrs	r4, r4, #9
    c0de:	4013      	ands	r3, r2
    c0e0:	2100      	movs	r1, #0
    c0e2:	e761      	b.n	bfa8 <__aeabi_fdiv+0x138>
    c0e4:	2380      	movs	r3, #128	; 0x80
    c0e6:	03db      	lsls	r3, r3, #15
    c0e8:	431c      	orrs	r4, r3
    c0ea:	0264      	lsls	r4, r4, #9
    c0ec:	0a64      	lsrs	r4, r4, #9
    c0ee:	4653      	mov	r3, sl
    c0f0:	21ff      	movs	r1, #255	; 0xff
    c0f2:	e759      	b.n	bfa8 <__aeabi_fdiv+0x138>
    c0f4:	0000ef98 	.word	0x0000ef98
    c0f8:	0000efd8 	.word	0x0000efd8
    c0fc:	f7ffffff 	.word	0xf7ffffff

0000c100 <__aeabi_fmul>:
    c100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c102:	4657      	mov	r7, sl
    c104:	464e      	mov	r6, r9
    c106:	4645      	mov	r5, r8
    c108:	46de      	mov	lr, fp
    c10a:	b5e0      	push	{r5, r6, r7, lr}
    c10c:	0247      	lsls	r7, r0, #9
    c10e:	0046      	lsls	r6, r0, #1
    c110:	4688      	mov	r8, r1
    c112:	0a7f      	lsrs	r7, r7, #9
    c114:	0e36      	lsrs	r6, r6, #24
    c116:	0fc4      	lsrs	r4, r0, #31
    c118:	2e00      	cmp	r6, #0
    c11a:	d047      	beq.n	c1ac <__aeabi_fmul+0xac>
    c11c:	2eff      	cmp	r6, #255	; 0xff
    c11e:	d024      	beq.n	c16a <__aeabi_fmul+0x6a>
    c120:	00fb      	lsls	r3, r7, #3
    c122:	2780      	movs	r7, #128	; 0x80
    c124:	04ff      	lsls	r7, r7, #19
    c126:	431f      	orrs	r7, r3
    c128:	2300      	movs	r3, #0
    c12a:	4699      	mov	r9, r3
    c12c:	469a      	mov	sl, r3
    c12e:	3e7f      	subs	r6, #127	; 0x7f
    c130:	4643      	mov	r3, r8
    c132:	025d      	lsls	r5, r3, #9
    c134:	0058      	lsls	r0, r3, #1
    c136:	0fdb      	lsrs	r3, r3, #31
    c138:	0a6d      	lsrs	r5, r5, #9
    c13a:	0e00      	lsrs	r0, r0, #24
    c13c:	4698      	mov	r8, r3
    c13e:	d043      	beq.n	c1c8 <__aeabi_fmul+0xc8>
    c140:	28ff      	cmp	r0, #255	; 0xff
    c142:	d03b      	beq.n	c1bc <__aeabi_fmul+0xbc>
    c144:	00eb      	lsls	r3, r5, #3
    c146:	2580      	movs	r5, #128	; 0x80
    c148:	2200      	movs	r2, #0
    c14a:	04ed      	lsls	r5, r5, #19
    c14c:	431d      	orrs	r5, r3
    c14e:	387f      	subs	r0, #127	; 0x7f
    c150:	1836      	adds	r6, r6, r0
    c152:	1c73      	adds	r3, r6, #1
    c154:	4641      	mov	r1, r8
    c156:	469b      	mov	fp, r3
    c158:	464b      	mov	r3, r9
    c15a:	4061      	eors	r1, r4
    c15c:	4313      	orrs	r3, r2
    c15e:	2b0f      	cmp	r3, #15
    c160:	d864      	bhi.n	c22c <__aeabi_fmul+0x12c>
    c162:	4875      	ldr	r0, [pc, #468]	; (c338 <__aeabi_fmul+0x238>)
    c164:	009b      	lsls	r3, r3, #2
    c166:	58c3      	ldr	r3, [r0, r3]
    c168:	469f      	mov	pc, r3
    c16a:	2f00      	cmp	r7, #0
    c16c:	d142      	bne.n	c1f4 <__aeabi_fmul+0xf4>
    c16e:	2308      	movs	r3, #8
    c170:	4699      	mov	r9, r3
    c172:	3b06      	subs	r3, #6
    c174:	26ff      	movs	r6, #255	; 0xff
    c176:	469a      	mov	sl, r3
    c178:	e7da      	b.n	c130 <__aeabi_fmul+0x30>
    c17a:	4641      	mov	r1, r8
    c17c:	2a02      	cmp	r2, #2
    c17e:	d028      	beq.n	c1d2 <__aeabi_fmul+0xd2>
    c180:	2a03      	cmp	r2, #3
    c182:	d100      	bne.n	c186 <__aeabi_fmul+0x86>
    c184:	e0ce      	b.n	c324 <__aeabi_fmul+0x224>
    c186:	2a01      	cmp	r2, #1
    c188:	d000      	beq.n	c18c <__aeabi_fmul+0x8c>
    c18a:	e0ac      	b.n	c2e6 <__aeabi_fmul+0x1e6>
    c18c:	4011      	ands	r1, r2
    c18e:	2000      	movs	r0, #0
    c190:	2200      	movs	r2, #0
    c192:	b2cc      	uxtb	r4, r1
    c194:	0240      	lsls	r0, r0, #9
    c196:	05d2      	lsls	r2, r2, #23
    c198:	0a40      	lsrs	r0, r0, #9
    c19a:	07e4      	lsls	r4, r4, #31
    c19c:	4310      	orrs	r0, r2
    c19e:	4320      	orrs	r0, r4
    c1a0:	bc3c      	pop	{r2, r3, r4, r5}
    c1a2:	4690      	mov	r8, r2
    c1a4:	4699      	mov	r9, r3
    c1a6:	46a2      	mov	sl, r4
    c1a8:	46ab      	mov	fp, r5
    c1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1ac:	2f00      	cmp	r7, #0
    c1ae:	d115      	bne.n	c1dc <__aeabi_fmul+0xdc>
    c1b0:	2304      	movs	r3, #4
    c1b2:	4699      	mov	r9, r3
    c1b4:	3b03      	subs	r3, #3
    c1b6:	2600      	movs	r6, #0
    c1b8:	469a      	mov	sl, r3
    c1ba:	e7b9      	b.n	c130 <__aeabi_fmul+0x30>
    c1bc:	20ff      	movs	r0, #255	; 0xff
    c1be:	2202      	movs	r2, #2
    c1c0:	2d00      	cmp	r5, #0
    c1c2:	d0c5      	beq.n	c150 <__aeabi_fmul+0x50>
    c1c4:	2203      	movs	r2, #3
    c1c6:	e7c3      	b.n	c150 <__aeabi_fmul+0x50>
    c1c8:	2d00      	cmp	r5, #0
    c1ca:	d119      	bne.n	c200 <__aeabi_fmul+0x100>
    c1cc:	2000      	movs	r0, #0
    c1ce:	2201      	movs	r2, #1
    c1d0:	e7be      	b.n	c150 <__aeabi_fmul+0x50>
    c1d2:	2401      	movs	r4, #1
    c1d4:	22ff      	movs	r2, #255	; 0xff
    c1d6:	400c      	ands	r4, r1
    c1d8:	2000      	movs	r0, #0
    c1da:	e7db      	b.n	c194 <__aeabi_fmul+0x94>
    c1dc:	0038      	movs	r0, r7
    c1de:	f001 ffc9 	bl	e174 <__clzsi2>
    c1e2:	2676      	movs	r6, #118	; 0x76
    c1e4:	1f43      	subs	r3, r0, #5
    c1e6:	409f      	lsls	r7, r3
    c1e8:	2300      	movs	r3, #0
    c1ea:	4276      	negs	r6, r6
    c1ec:	1a36      	subs	r6, r6, r0
    c1ee:	4699      	mov	r9, r3
    c1f0:	469a      	mov	sl, r3
    c1f2:	e79d      	b.n	c130 <__aeabi_fmul+0x30>
    c1f4:	230c      	movs	r3, #12
    c1f6:	4699      	mov	r9, r3
    c1f8:	3b09      	subs	r3, #9
    c1fa:	26ff      	movs	r6, #255	; 0xff
    c1fc:	469a      	mov	sl, r3
    c1fe:	e797      	b.n	c130 <__aeabi_fmul+0x30>
    c200:	0028      	movs	r0, r5
    c202:	f001 ffb7 	bl	e174 <__clzsi2>
    c206:	1f43      	subs	r3, r0, #5
    c208:	409d      	lsls	r5, r3
    c20a:	2376      	movs	r3, #118	; 0x76
    c20c:	425b      	negs	r3, r3
    c20e:	1a18      	subs	r0, r3, r0
    c210:	2200      	movs	r2, #0
    c212:	e79d      	b.n	c150 <__aeabi_fmul+0x50>
    c214:	2080      	movs	r0, #128	; 0x80
    c216:	2400      	movs	r4, #0
    c218:	03c0      	lsls	r0, r0, #15
    c21a:	22ff      	movs	r2, #255	; 0xff
    c21c:	e7ba      	b.n	c194 <__aeabi_fmul+0x94>
    c21e:	003d      	movs	r5, r7
    c220:	4652      	mov	r2, sl
    c222:	e7ab      	b.n	c17c <__aeabi_fmul+0x7c>
    c224:	003d      	movs	r5, r7
    c226:	0021      	movs	r1, r4
    c228:	4652      	mov	r2, sl
    c22a:	e7a7      	b.n	c17c <__aeabi_fmul+0x7c>
    c22c:	0c3b      	lsrs	r3, r7, #16
    c22e:	469c      	mov	ip, r3
    c230:	042a      	lsls	r2, r5, #16
    c232:	0c12      	lsrs	r2, r2, #16
    c234:	0c2b      	lsrs	r3, r5, #16
    c236:	0014      	movs	r4, r2
    c238:	4660      	mov	r0, ip
    c23a:	4665      	mov	r5, ip
    c23c:	043f      	lsls	r7, r7, #16
    c23e:	0c3f      	lsrs	r7, r7, #16
    c240:	437c      	muls	r4, r7
    c242:	4342      	muls	r2, r0
    c244:	435d      	muls	r5, r3
    c246:	437b      	muls	r3, r7
    c248:	0c27      	lsrs	r7, r4, #16
    c24a:	189b      	adds	r3, r3, r2
    c24c:	18ff      	adds	r7, r7, r3
    c24e:	42ba      	cmp	r2, r7
    c250:	d903      	bls.n	c25a <__aeabi_fmul+0x15a>
    c252:	2380      	movs	r3, #128	; 0x80
    c254:	025b      	lsls	r3, r3, #9
    c256:	469c      	mov	ip, r3
    c258:	4465      	add	r5, ip
    c25a:	0424      	lsls	r4, r4, #16
    c25c:	043a      	lsls	r2, r7, #16
    c25e:	0c24      	lsrs	r4, r4, #16
    c260:	1912      	adds	r2, r2, r4
    c262:	0193      	lsls	r3, r2, #6
    c264:	1e5c      	subs	r4, r3, #1
    c266:	41a3      	sbcs	r3, r4
    c268:	0c3f      	lsrs	r7, r7, #16
    c26a:	0e92      	lsrs	r2, r2, #26
    c26c:	197d      	adds	r5, r7, r5
    c26e:	431a      	orrs	r2, r3
    c270:	01ad      	lsls	r5, r5, #6
    c272:	4315      	orrs	r5, r2
    c274:	012b      	lsls	r3, r5, #4
    c276:	d504      	bpl.n	c282 <__aeabi_fmul+0x182>
    c278:	2301      	movs	r3, #1
    c27a:	465e      	mov	r6, fp
    c27c:	086a      	lsrs	r2, r5, #1
    c27e:	401d      	ands	r5, r3
    c280:	4315      	orrs	r5, r2
    c282:	0032      	movs	r2, r6
    c284:	327f      	adds	r2, #127	; 0x7f
    c286:	2a00      	cmp	r2, #0
    c288:	dd25      	ble.n	c2d6 <__aeabi_fmul+0x1d6>
    c28a:	076b      	lsls	r3, r5, #29
    c28c:	d004      	beq.n	c298 <__aeabi_fmul+0x198>
    c28e:	230f      	movs	r3, #15
    c290:	402b      	ands	r3, r5
    c292:	2b04      	cmp	r3, #4
    c294:	d000      	beq.n	c298 <__aeabi_fmul+0x198>
    c296:	3504      	adds	r5, #4
    c298:	012b      	lsls	r3, r5, #4
    c29a:	d503      	bpl.n	c2a4 <__aeabi_fmul+0x1a4>
    c29c:	0032      	movs	r2, r6
    c29e:	4b27      	ldr	r3, [pc, #156]	; (c33c <__aeabi_fmul+0x23c>)
    c2a0:	3280      	adds	r2, #128	; 0x80
    c2a2:	401d      	ands	r5, r3
    c2a4:	2afe      	cmp	r2, #254	; 0xfe
    c2a6:	dc94      	bgt.n	c1d2 <__aeabi_fmul+0xd2>
    c2a8:	2401      	movs	r4, #1
    c2aa:	01a8      	lsls	r0, r5, #6
    c2ac:	0a40      	lsrs	r0, r0, #9
    c2ae:	b2d2      	uxtb	r2, r2
    c2b0:	400c      	ands	r4, r1
    c2b2:	e76f      	b.n	c194 <__aeabi_fmul+0x94>
    c2b4:	2080      	movs	r0, #128	; 0x80
    c2b6:	03c0      	lsls	r0, r0, #15
    c2b8:	4207      	tst	r7, r0
    c2ba:	d007      	beq.n	c2cc <__aeabi_fmul+0x1cc>
    c2bc:	4205      	tst	r5, r0
    c2be:	d105      	bne.n	c2cc <__aeabi_fmul+0x1cc>
    c2c0:	4328      	orrs	r0, r5
    c2c2:	0240      	lsls	r0, r0, #9
    c2c4:	0a40      	lsrs	r0, r0, #9
    c2c6:	4644      	mov	r4, r8
    c2c8:	22ff      	movs	r2, #255	; 0xff
    c2ca:	e763      	b.n	c194 <__aeabi_fmul+0x94>
    c2cc:	4338      	orrs	r0, r7
    c2ce:	0240      	lsls	r0, r0, #9
    c2d0:	0a40      	lsrs	r0, r0, #9
    c2d2:	22ff      	movs	r2, #255	; 0xff
    c2d4:	e75e      	b.n	c194 <__aeabi_fmul+0x94>
    c2d6:	2401      	movs	r4, #1
    c2d8:	1aa3      	subs	r3, r4, r2
    c2da:	2b1b      	cmp	r3, #27
    c2dc:	dd05      	ble.n	c2ea <__aeabi_fmul+0x1ea>
    c2de:	400c      	ands	r4, r1
    c2e0:	2200      	movs	r2, #0
    c2e2:	2000      	movs	r0, #0
    c2e4:	e756      	b.n	c194 <__aeabi_fmul+0x94>
    c2e6:	465e      	mov	r6, fp
    c2e8:	e7cb      	b.n	c282 <__aeabi_fmul+0x182>
    c2ea:	002a      	movs	r2, r5
    c2ec:	2020      	movs	r0, #32
    c2ee:	40da      	lsrs	r2, r3
    c2f0:	1ac3      	subs	r3, r0, r3
    c2f2:	409d      	lsls	r5, r3
    c2f4:	002b      	movs	r3, r5
    c2f6:	1e5d      	subs	r5, r3, #1
    c2f8:	41ab      	sbcs	r3, r5
    c2fa:	4313      	orrs	r3, r2
    c2fc:	075a      	lsls	r2, r3, #29
    c2fe:	d004      	beq.n	c30a <__aeabi_fmul+0x20a>
    c300:	220f      	movs	r2, #15
    c302:	401a      	ands	r2, r3
    c304:	2a04      	cmp	r2, #4
    c306:	d000      	beq.n	c30a <__aeabi_fmul+0x20a>
    c308:	3304      	adds	r3, #4
    c30a:	015a      	lsls	r2, r3, #5
    c30c:	d504      	bpl.n	c318 <__aeabi_fmul+0x218>
    c30e:	2401      	movs	r4, #1
    c310:	2201      	movs	r2, #1
    c312:	400c      	ands	r4, r1
    c314:	2000      	movs	r0, #0
    c316:	e73d      	b.n	c194 <__aeabi_fmul+0x94>
    c318:	2401      	movs	r4, #1
    c31a:	019b      	lsls	r3, r3, #6
    c31c:	0a58      	lsrs	r0, r3, #9
    c31e:	400c      	ands	r4, r1
    c320:	2200      	movs	r2, #0
    c322:	e737      	b.n	c194 <__aeabi_fmul+0x94>
    c324:	2080      	movs	r0, #128	; 0x80
    c326:	2401      	movs	r4, #1
    c328:	03c0      	lsls	r0, r0, #15
    c32a:	4328      	orrs	r0, r5
    c32c:	0240      	lsls	r0, r0, #9
    c32e:	0a40      	lsrs	r0, r0, #9
    c330:	400c      	ands	r4, r1
    c332:	22ff      	movs	r2, #255	; 0xff
    c334:	e72e      	b.n	c194 <__aeabi_fmul+0x94>
    c336:	46c0      	nop			; (mov r8, r8)
    c338:	0000f018 	.word	0x0000f018
    c33c:	f7ffffff 	.word	0xf7ffffff

0000c340 <__aeabi_i2f>:
    c340:	b570      	push	{r4, r5, r6, lr}
    c342:	2800      	cmp	r0, #0
    c344:	d030      	beq.n	c3a8 <__aeabi_i2f+0x68>
    c346:	17c3      	asrs	r3, r0, #31
    c348:	18c4      	adds	r4, r0, r3
    c34a:	405c      	eors	r4, r3
    c34c:	0fc5      	lsrs	r5, r0, #31
    c34e:	0020      	movs	r0, r4
    c350:	f001 ff10 	bl	e174 <__clzsi2>
    c354:	239e      	movs	r3, #158	; 0x9e
    c356:	1a1b      	subs	r3, r3, r0
    c358:	2b96      	cmp	r3, #150	; 0x96
    c35a:	dc0d      	bgt.n	c378 <__aeabi_i2f+0x38>
    c35c:	2296      	movs	r2, #150	; 0x96
    c35e:	1ad2      	subs	r2, r2, r3
    c360:	4094      	lsls	r4, r2
    c362:	002a      	movs	r2, r5
    c364:	0264      	lsls	r4, r4, #9
    c366:	0a64      	lsrs	r4, r4, #9
    c368:	b2db      	uxtb	r3, r3
    c36a:	0264      	lsls	r4, r4, #9
    c36c:	05db      	lsls	r3, r3, #23
    c36e:	0a60      	lsrs	r0, r4, #9
    c370:	07d2      	lsls	r2, r2, #31
    c372:	4318      	orrs	r0, r3
    c374:	4310      	orrs	r0, r2
    c376:	bd70      	pop	{r4, r5, r6, pc}
    c378:	2b99      	cmp	r3, #153	; 0x99
    c37a:	dc19      	bgt.n	c3b0 <__aeabi_i2f+0x70>
    c37c:	2299      	movs	r2, #153	; 0x99
    c37e:	1ad2      	subs	r2, r2, r3
    c380:	2a00      	cmp	r2, #0
    c382:	dd29      	ble.n	c3d8 <__aeabi_i2f+0x98>
    c384:	4094      	lsls	r4, r2
    c386:	0022      	movs	r2, r4
    c388:	4c14      	ldr	r4, [pc, #80]	; (c3dc <__aeabi_i2f+0x9c>)
    c38a:	4014      	ands	r4, r2
    c38c:	0751      	lsls	r1, r2, #29
    c38e:	d004      	beq.n	c39a <__aeabi_i2f+0x5a>
    c390:	210f      	movs	r1, #15
    c392:	400a      	ands	r2, r1
    c394:	2a04      	cmp	r2, #4
    c396:	d000      	beq.n	c39a <__aeabi_i2f+0x5a>
    c398:	3404      	adds	r4, #4
    c39a:	0162      	lsls	r2, r4, #5
    c39c:	d413      	bmi.n	c3c6 <__aeabi_i2f+0x86>
    c39e:	01a4      	lsls	r4, r4, #6
    c3a0:	0a64      	lsrs	r4, r4, #9
    c3a2:	b2db      	uxtb	r3, r3
    c3a4:	002a      	movs	r2, r5
    c3a6:	e7e0      	b.n	c36a <__aeabi_i2f+0x2a>
    c3a8:	2200      	movs	r2, #0
    c3aa:	2300      	movs	r3, #0
    c3ac:	2400      	movs	r4, #0
    c3ae:	e7dc      	b.n	c36a <__aeabi_i2f+0x2a>
    c3b0:	2205      	movs	r2, #5
    c3b2:	0021      	movs	r1, r4
    c3b4:	1a12      	subs	r2, r2, r0
    c3b6:	40d1      	lsrs	r1, r2
    c3b8:	22b9      	movs	r2, #185	; 0xb9
    c3ba:	1ad2      	subs	r2, r2, r3
    c3bc:	4094      	lsls	r4, r2
    c3be:	1e62      	subs	r2, r4, #1
    c3c0:	4194      	sbcs	r4, r2
    c3c2:	430c      	orrs	r4, r1
    c3c4:	e7da      	b.n	c37c <__aeabi_i2f+0x3c>
    c3c6:	4b05      	ldr	r3, [pc, #20]	; (c3dc <__aeabi_i2f+0x9c>)
    c3c8:	002a      	movs	r2, r5
    c3ca:	401c      	ands	r4, r3
    c3cc:	239f      	movs	r3, #159	; 0x9f
    c3ce:	01a4      	lsls	r4, r4, #6
    c3d0:	1a1b      	subs	r3, r3, r0
    c3d2:	0a64      	lsrs	r4, r4, #9
    c3d4:	b2db      	uxtb	r3, r3
    c3d6:	e7c8      	b.n	c36a <__aeabi_i2f+0x2a>
    c3d8:	0022      	movs	r2, r4
    c3da:	e7d5      	b.n	c388 <__aeabi_i2f+0x48>
    c3dc:	fbffffff 	.word	0xfbffffff

0000c3e0 <__aeabi_ui2f>:
    c3e0:	b510      	push	{r4, lr}
    c3e2:	1e04      	subs	r4, r0, #0
    c3e4:	d027      	beq.n	c436 <__aeabi_ui2f+0x56>
    c3e6:	f001 fec5 	bl	e174 <__clzsi2>
    c3ea:	239e      	movs	r3, #158	; 0x9e
    c3ec:	1a1b      	subs	r3, r3, r0
    c3ee:	2b96      	cmp	r3, #150	; 0x96
    c3f0:	dc0a      	bgt.n	c408 <__aeabi_ui2f+0x28>
    c3f2:	2296      	movs	r2, #150	; 0x96
    c3f4:	1ad2      	subs	r2, r2, r3
    c3f6:	4094      	lsls	r4, r2
    c3f8:	0264      	lsls	r4, r4, #9
    c3fa:	0a64      	lsrs	r4, r4, #9
    c3fc:	b2db      	uxtb	r3, r3
    c3fe:	0264      	lsls	r4, r4, #9
    c400:	05db      	lsls	r3, r3, #23
    c402:	0a60      	lsrs	r0, r4, #9
    c404:	4318      	orrs	r0, r3
    c406:	bd10      	pop	{r4, pc}
    c408:	2b99      	cmp	r3, #153	; 0x99
    c40a:	dc17      	bgt.n	c43c <__aeabi_ui2f+0x5c>
    c40c:	2299      	movs	r2, #153	; 0x99
    c40e:	1ad2      	subs	r2, r2, r3
    c410:	2a00      	cmp	r2, #0
    c412:	dd27      	ble.n	c464 <__aeabi_ui2f+0x84>
    c414:	4094      	lsls	r4, r2
    c416:	0022      	movs	r2, r4
    c418:	4c13      	ldr	r4, [pc, #76]	; (c468 <__aeabi_ui2f+0x88>)
    c41a:	4014      	ands	r4, r2
    c41c:	0751      	lsls	r1, r2, #29
    c41e:	d004      	beq.n	c42a <__aeabi_ui2f+0x4a>
    c420:	210f      	movs	r1, #15
    c422:	400a      	ands	r2, r1
    c424:	2a04      	cmp	r2, #4
    c426:	d000      	beq.n	c42a <__aeabi_ui2f+0x4a>
    c428:	3404      	adds	r4, #4
    c42a:	0162      	lsls	r2, r4, #5
    c42c:	d412      	bmi.n	c454 <__aeabi_ui2f+0x74>
    c42e:	01a4      	lsls	r4, r4, #6
    c430:	0a64      	lsrs	r4, r4, #9
    c432:	b2db      	uxtb	r3, r3
    c434:	e7e3      	b.n	c3fe <__aeabi_ui2f+0x1e>
    c436:	2300      	movs	r3, #0
    c438:	2400      	movs	r4, #0
    c43a:	e7e0      	b.n	c3fe <__aeabi_ui2f+0x1e>
    c43c:	22b9      	movs	r2, #185	; 0xb9
    c43e:	0021      	movs	r1, r4
    c440:	1ad2      	subs	r2, r2, r3
    c442:	4091      	lsls	r1, r2
    c444:	000a      	movs	r2, r1
    c446:	1e51      	subs	r1, r2, #1
    c448:	418a      	sbcs	r2, r1
    c44a:	2105      	movs	r1, #5
    c44c:	1a09      	subs	r1, r1, r0
    c44e:	40cc      	lsrs	r4, r1
    c450:	4314      	orrs	r4, r2
    c452:	e7db      	b.n	c40c <__aeabi_ui2f+0x2c>
    c454:	4b04      	ldr	r3, [pc, #16]	; (c468 <__aeabi_ui2f+0x88>)
    c456:	401c      	ands	r4, r3
    c458:	239f      	movs	r3, #159	; 0x9f
    c45a:	01a4      	lsls	r4, r4, #6
    c45c:	1a1b      	subs	r3, r3, r0
    c45e:	0a64      	lsrs	r4, r4, #9
    c460:	b2db      	uxtb	r3, r3
    c462:	e7cc      	b.n	c3fe <__aeabi_ui2f+0x1e>
    c464:	0022      	movs	r2, r4
    c466:	e7d7      	b.n	c418 <__aeabi_ui2f+0x38>
    c468:	fbffffff 	.word	0xfbffffff

0000c46c <__aeabi_dadd>:
    c46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c46e:	4645      	mov	r5, r8
    c470:	46de      	mov	lr, fp
    c472:	4657      	mov	r7, sl
    c474:	464e      	mov	r6, r9
    c476:	030c      	lsls	r4, r1, #12
    c478:	b5e0      	push	{r5, r6, r7, lr}
    c47a:	004e      	lsls	r6, r1, #1
    c47c:	0fc9      	lsrs	r1, r1, #31
    c47e:	4688      	mov	r8, r1
    c480:	000d      	movs	r5, r1
    c482:	0a61      	lsrs	r1, r4, #9
    c484:	0f44      	lsrs	r4, r0, #29
    c486:	430c      	orrs	r4, r1
    c488:	00c7      	lsls	r7, r0, #3
    c48a:	0319      	lsls	r1, r3, #12
    c48c:	0058      	lsls	r0, r3, #1
    c48e:	0fdb      	lsrs	r3, r3, #31
    c490:	469b      	mov	fp, r3
    c492:	0a4b      	lsrs	r3, r1, #9
    c494:	0f51      	lsrs	r1, r2, #29
    c496:	430b      	orrs	r3, r1
    c498:	0d76      	lsrs	r6, r6, #21
    c49a:	0d40      	lsrs	r0, r0, #21
    c49c:	0019      	movs	r1, r3
    c49e:	00d2      	lsls	r2, r2, #3
    c4a0:	45d8      	cmp	r8, fp
    c4a2:	d100      	bne.n	c4a6 <__aeabi_dadd+0x3a>
    c4a4:	e0ae      	b.n	c604 <__aeabi_dadd+0x198>
    c4a6:	1a35      	subs	r5, r6, r0
    c4a8:	2d00      	cmp	r5, #0
    c4aa:	dc00      	bgt.n	c4ae <__aeabi_dadd+0x42>
    c4ac:	e0f6      	b.n	c69c <__aeabi_dadd+0x230>
    c4ae:	2800      	cmp	r0, #0
    c4b0:	d10f      	bne.n	c4d2 <__aeabi_dadd+0x66>
    c4b2:	4313      	orrs	r3, r2
    c4b4:	d100      	bne.n	c4b8 <__aeabi_dadd+0x4c>
    c4b6:	e0db      	b.n	c670 <__aeabi_dadd+0x204>
    c4b8:	1e6b      	subs	r3, r5, #1
    c4ba:	2b00      	cmp	r3, #0
    c4bc:	d000      	beq.n	c4c0 <__aeabi_dadd+0x54>
    c4be:	e137      	b.n	c730 <__aeabi_dadd+0x2c4>
    c4c0:	1aba      	subs	r2, r7, r2
    c4c2:	4297      	cmp	r7, r2
    c4c4:	41bf      	sbcs	r7, r7
    c4c6:	1a64      	subs	r4, r4, r1
    c4c8:	427f      	negs	r7, r7
    c4ca:	1be4      	subs	r4, r4, r7
    c4cc:	2601      	movs	r6, #1
    c4ce:	0017      	movs	r7, r2
    c4d0:	e024      	b.n	c51c <__aeabi_dadd+0xb0>
    c4d2:	4bc6      	ldr	r3, [pc, #792]	; (c7ec <__aeabi_dadd+0x380>)
    c4d4:	429e      	cmp	r6, r3
    c4d6:	d04d      	beq.n	c574 <__aeabi_dadd+0x108>
    c4d8:	2380      	movs	r3, #128	; 0x80
    c4da:	041b      	lsls	r3, r3, #16
    c4dc:	4319      	orrs	r1, r3
    c4de:	2d38      	cmp	r5, #56	; 0x38
    c4e0:	dd00      	ble.n	c4e4 <__aeabi_dadd+0x78>
    c4e2:	e107      	b.n	c6f4 <__aeabi_dadd+0x288>
    c4e4:	2d1f      	cmp	r5, #31
    c4e6:	dd00      	ble.n	c4ea <__aeabi_dadd+0x7e>
    c4e8:	e138      	b.n	c75c <__aeabi_dadd+0x2f0>
    c4ea:	2020      	movs	r0, #32
    c4ec:	1b43      	subs	r3, r0, r5
    c4ee:	469a      	mov	sl, r3
    c4f0:	000b      	movs	r3, r1
    c4f2:	4650      	mov	r0, sl
    c4f4:	4083      	lsls	r3, r0
    c4f6:	4699      	mov	r9, r3
    c4f8:	0013      	movs	r3, r2
    c4fa:	4648      	mov	r0, r9
    c4fc:	40eb      	lsrs	r3, r5
    c4fe:	4318      	orrs	r0, r3
    c500:	0003      	movs	r3, r0
    c502:	4650      	mov	r0, sl
    c504:	4082      	lsls	r2, r0
    c506:	1e50      	subs	r0, r2, #1
    c508:	4182      	sbcs	r2, r0
    c50a:	40e9      	lsrs	r1, r5
    c50c:	431a      	orrs	r2, r3
    c50e:	1aba      	subs	r2, r7, r2
    c510:	1a61      	subs	r1, r4, r1
    c512:	4297      	cmp	r7, r2
    c514:	41a4      	sbcs	r4, r4
    c516:	0017      	movs	r7, r2
    c518:	4264      	negs	r4, r4
    c51a:	1b0c      	subs	r4, r1, r4
    c51c:	0223      	lsls	r3, r4, #8
    c51e:	d562      	bpl.n	c5e6 <__aeabi_dadd+0x17a>
    c520:	0264      	lsls	r4, r4, #9
    c522:	0a65      	lsrs	r5, r4, #9
    c524:	2d00      	cmp	r5, #0
    c526:	d100      	bne.n	c52a <__aeabi_dadd+0xbe>
    c528:	e0df      	b.n	c6ea <__aeabi_dadd+0x27e>
    c52a:	0028      	movs	r0, r5
    c52c:	f001 fe22 	bl	e174 <__clzsi2>
    c530:	0003      	movs	r3, r0
    c532:	3b08      	subs	r3, #8
    c534:	2b1f      	cmp	r3, #31
    c536:	dd00      	ble.n	c53a <__aeabi_dadd+0xce>
    c538:	e0d2      	b.n	c6e0 <__aeabi_dadd+0x274>
    c53a:	2220      	movs	r2, #32
    c53c:	003c      	movs	r4, r7
    c53e:	1ad2      	subs	r2, r2, r3
    c540:	409d      	lsls	r5, r3
    c542:	40d4      	lsrs	r4, r2
    c544:	409f      	lsls	r7, r3
    c546:	4325      	orrs	r5, r4
    c548:	429e      	cmp	r6, r3
    c54a:	dd00      	ble.n	c54e <__aeabi_dadd+0xe2>
    c54c:	e0c4      	b.n	c6d8 <__aeabi_dadd+0x26c>
    c54e:	1b9e      	subs	r6, r3, r6
    c550:	1c73      	adds	r3, r6, #1
    c552:	2b1f      	cmp	r3, #31
    c554:	dd00      	ble.n	c558 <__aeabi_dadd+0xec>
    c556:	e0f1      	b.n	c73c <__aeabi_dadd+0x2d0>
    c558:	2220      	movs	r2, #32
    c55a:	0038      	movs	r0, r7
    c55c:	0029      	movs	r1, r5
    c55e:	1ad2      	subs	r2, r2, r3
    c560:	40d8      	lsrs	r0, r3
    c562:	4091      	lsls	r1, r2
    c564:	4097      	lsls	r7, r2
    c566:	002c      	movs	r4, r5
    c568:	4301      	orrs	r1, r0
    c56a:	1e78      	subs	r0, r7, #1
    c56c:	4187      	sbcs	r7, r0
    c56e:	40dc      	lsrs	r4, r3
    c570:	2600      	movs	r6, #0
    c572:	430f      	orrs	r7, r1
    c574:	077b      	lsls	r3, r7, #29
    c576:	d009      	beq.n	c58c <__aeabi_dadd+0x120>
    c578:	230f      	movs	r3, #15
    c57a:	403b      	ands	r3, r7
    c57c:	2b04      	cmp	r3, #4
    c57e:	d005      	beq.n	c58c <__aeabi_dadd+0x120>
    c580:	1d3b      	adds	r3, r7, #4
    c582:	42bb      	cmp	r3, r7
    c584:	41bf      	sbcs	r7, r7
    c586:	427f      	negs	r7, r7
    c588:	19e4      	adds	r4, r4, r7
    c58a:	001f      	movs	r7, r3
    c58c:	0223      	lsls	r3, r4, #8
    c58e:	d52c      	bpl.n	c5ea <__aeabi_dadd+0x17e>
    c590:	4b96      	ldr	r3, [pc, #600]	; (c7ec <__aeabi_dadd+0x380>)
    c592:	3601      	adds	r6, #1
    c594:	429e      	cmp	r6, r3
    c596:	d100      	bne.n	c59a <__aeabi_dadd+0x12e>
    c598:	e09a      	b.n	c6d0 <__aeabi_dadd+0x264>
    c59a:	4645      	mov	r5, r8
    c59c:	4b94      	ldr	r3, [pc, #592]	; (c7f0 <__aeabi_dadd+0x384>)
    c59e:	08ff      	lsrs	r7, r7, #3
    c5a0:	401c      	ands	r4, r3
    c5a2:	0760      	lsls	r0, r4, #29
    c5a4:	0576      	lsls	r6, r6, #21
    c5a6:	0264      	lsls	r4, r4, #9
    c5a8:	4307      	orrs	r7, r0
    c5aa:	0b24      	lsrs	r4, r4, #12
    c5ac:	0d76      	lsrs	r6, r6, #21
    c5ae:	2100      	movs	r1, #0
    c5b0:	0324      	lsls	r4, r4, #12
    c5b2:	0b23      	lsrs	r3, r4, #12
    c5b4:	0d0c      	lsrs	r4, r1, #20
    c5b6:	4a8f      	ldr	r2, [pc, #572]	; (c7f4 <__aeabi_dadd+0x388>)
    c5b8:	0524      	lsls	r4, r4, #20
    c5ba:	431c      	orrs	r4, r3
    c5bc:	4014      	ands	r4, r2
    c5be:	0533      	lsls	r3, r6, #20
    c5c0:	4323      	orrs	r3, r4
    c5c2:	005b      	lsls	r3, r3, #1
    c5c4:	07ed      	lsls	r5, r5, #31
    c5c6:	085b      	lsrs	r3, r3, #1
    c5c8:	432b      	orrs	r3, r5
    c5ca:	0038      	movs	r0, r7
    c5cc:	0019      	movs	r1, r3
    c5ce:	bc3c      	pop	{r2, r3, r4, r5}
    c5d0:	4690      	mov	r8, r2
    c5d2:	4699      	mov	r9, r3
    c5d4:	46a2      	mov	sl, r4
    c5d6:	46ab      	mov	fp, r5
    c5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c5da:	4664      	mov	r4, ip
    c5dc:	4304      	orrs	r4, r0
    c5de:	d100      	bne.n	c5e2 <__aeabi_dadd+0x176>
    c5e0:	e211      	b.n	ca06 <__aeabi_dadd+0x59a>
    c5e2:	0004      	movs	r4, r0
    c5e4:	4667      	mov	r7, ip
    c5e6:	077b      	lsls	r3, r7, #29
    c5e8:	d1c6      	bne.n	c578 <__aeabi_dadd+0x10c>
    c5ea:	4645      	mov	r5, r8
    c5ec:	0760      	lsls	r0, r4, #29
    c5ee:	08ff      	lsrs	r7, r7, #3
    c5f0:	4307      	orrs	r7, r0
    c5f2:	08e4      	lsrs	r4, r4, #3
    c5f4:	4b7d      	ldr	r3, [pc, #500]	; (c7ec <__aeabi_dadd+0x380>)
    c5f6:	429e      	cmp	r6, r3
    c5f8:	d030      	beq.n	c65c <__aeabi_dadd+0x1f0>
    c5fa:	0324      	lsls	r4, r4, #12
    c5fc:	0576      	lsls	r6, r6, #21
    c5fe:	0b24      	lsrs	r4, r4, #12
    c600:	0d76      	lsrs	r6, r6, #21
    c602:	e7d4      	b.n	c5ae <__aeabi_dadd+0x142>
    c604:	1a33      	subs	r3, r6, r0
    c606:	469a      	mov	sl, r3
    c608:	2b00      	cmp	r3, #0
    c60a:	dd78      	ble.n	c6fe <__aeabi_dadd+0x292>
    c60c:	2800      	cmp	r0, #0
    c60e:	d031      	beq.n	c674 <__aeabi_dadd+0x208>
    c610:	4876      	ldr	r0, [pc, #472]	; (c7ec <__aeabi_dadd+0x380>)
    c612:	4286      	cmp	r6, r0
    c614:	d0ae      	beq.n	c574 <__aeabi_dadd+0x108>
    c616:	2080      	movs	r0, #128	; 0x80
    c618:	0400      	lsls	r0, r0, #16
    c61a:	4301      	orrs	r1, r0
    c61c:	4653      	mov	r3, sl
    c61e:	2b38      	cmp	r3, #56	; 0x38
    c620:	dc00      	bgt.n	c624 <__aeabi_dadd+0x1b8>
    c622:	e0e9      	b.n	c7f8 <__aeabi_dadd+0x38c>
    c624:	430a      	orrs	r2, r1
    c626:	1e51      	subs	r1, r2, #1
    c628:	418a      	sbcs	r2, r1
    c62a:	2100      	movs	r1, #0
    c62c:	19d2      	adds	r2, r2, r7
    c62e:	42ba      	cmp	r2, r7
    c630:	41bf      	sbcs	r7, r7
    c632:	1909      	adds	r1, r1, r4
    c634:	427c      	negs	r4, r7
    c636:	0017      	movs	r7, r2
    c638:	190c      	adds	r4, r1, r4
    c63a:	0223      	lsls	r3, r4, #8
    c63c:	d5d3      	bpl.n	c5e6 <__aeabi_dadd+0x17a>
    c63e:	4b6b      	ldr	r3, [pc, #428]	; (c7ec <__aeabi_dadd+0x380>)
    c640:	3601      	adds	r6, #1
    c642:	429e      	cmp	r6, r3
    c644:	d100      	bne.n	c648 <__aeabi_dadd+0x1dc>
    c646:	e13a      	b.n	c8be <__aeabi_dadd+0x452>
    c648:	2001      	movs	r0, #1
    c64a:	4b69      	ldr	r3, [pc, #420]	; (c7f0 <__aeabi_dadd+0x384>)
    c64c:	401c      	ands	r4, r3
    c64e:	087b      	lsrs	r3, r7, #1
    c650:	4007      	ands	r7, r0
    c652:	431f      	orrs	r7, r3
    c654:	07e0      	lsls	r0, r4, #31
    c656:	4307      	orrs	r7, r0
    c658:	0864      	lsrs	r4, r4, #1
    c65a:	e78b      	b.n	c574 <__aeabi_dadd+0x108>
    c65c:	0023      	movs	r3, r4
    c65e:	433b      	orrs	r3, r7
    c660:	d100      	bne.n	c664 <__aeabi_dadd+0x1f8>
    c662:	e1cb      	b.n	c9fc <__aeabi_dadd+0x590>
    c664:	2280      	movs	r2, #128	; 0x80
    c666:	0312      	lsls	r2, r2, #12
    c668:	4314      	orrs	r4, r2
    c66a:	0324      	lsls	r4, r4, #12
    c66c:	0b24      	lsrs	r4, r4, #12
    c66e:	e79e      	b.n	c5ae <__aeabi_dadd+0x142>
    c670:	002e      	movs	r6, r5
    c672:	e77f      	b.n	c574 <__aeabi_dadd+0x108>
    c674:	0008      	movs	r0, r1
    c676:	4310      	orrs	r0, r2
    c678:	d100      	bne.n	c67c <__aeabi_dadd+0x210>
    c67a:	e0b4      	b.n	c7e6 <__aeabi_dadd+0x37a>
    c67c:	1e58      	subs	r0, r3, #1
    c67e:	2800      	cmp	r0, #0
    c680:	d000      	beq.n	c684 <__aeabi_dadd+0x218>
    c682:	e0de      	b.n	c842 <__aeabi_dadd+0x3d6>
    c684:	18ba      	adds	r2, r7, r2
    c686:	42ba      	cmp	r2, r7
    c688:	419b      	sbcs	r3, r3
    c68a:	1864      	adds	r4, r4, r1
    c68c:	425b      	negs	r3, r3
    c68e:	18e4      	adds	r4, r4, r3
    c690:	0017      	movs	r7, r2
    c692:	2601      	movs	r6, #1
    c694:	0223      	lsls	r3, r4, #8
    c696:	d5a6      	bpl.n	c5e6 <__aeabi_dadd+0x17a>
    c698:	2602      	movs	r6, #2
    c69a:	e7d5      	b.n	c648 <__aeabi_dadd+0x1dc>
    c69c:	2d00      	cmp	r5, #0
    c69e:	d16e      	bne.n	c77e <__aeabi_dadd+0x312>
    c6a0:	1c70      	adds	r0, r6, #1
    c6a2:	0540      	lsls	r0, r0, #21
    c6a4:	0d40      	lsrs	r0, r0, #21
    c6a6:	2801      	cmp	r0, #1
    c6a8:	dc00      	bgt.n	c6ac <__aeabi_dadd+0x240>
    c6aa:	e0f9      	b.n	c8a0 <__aeabi_dadd+0x434>
    c6ac:	1ab8      	subs	r0, r7, r2
    c6ae:	4684      	mov	ip, r0
    c6b0:	4287      	cmp	r7, r0
    c6b2:	4180      	sbcs	r0, r0
    c6b4:	1ae5      	subs	r5, r4, r3
    c6b6:	4240      	negs	r0, r0
    c6b8:	1a2d      	subs	r5, r5, r0
    c6ba:	0228      	lsls	r0, r5, #8
    c6bc:	d400      	bmi.n	c6c0 <__aeabi_dadd+0x254>
    c6be:	e089      	b.n	c7d4 <__aeabi_dadd+0x368>
    c6c0:	1bd7      	subs	r7, r2, r7
    c6c2:	42ba      	cmp	r2, r7
    c6c4:	4192      	sbcs	r2, r2
    c6c6:	1b1c      	subs	r4, r3, r4
    c6c8:	4252      	negs	r2, r2
    c6ca:	1aa5      	subs	r5, r4, r2
    c6cc:	46d8      	mov	r8, fp
    c6ce:	e729      	b.n	c524 <__aeabi_dadd+0xb8>
    c6d0:	4645      	mov	r5, r8
    c6d2:	2400      	movs	r4, #0
    c6d4:	2700      	movs	r7, #0
    c6d6:	e76a      	b.n	c5ae <__aeabi_dadd+0x142>
    c6d8:	4c45      	ldr	r4, [pc, #276]	; (c7f0 <__aeabi_dadd+0x384>)
    c6da:	1af6      	subs	r6, r6, r3
    c6dc:	402c      	ands	r4, r5
    c6de:	e749      	b.n	c574 <__aeabi_dadd+0x108>
    c6e0:	003d      	movs	r5, r7
    c6e2:	3828      	subs	r0, #40	; 0x28
    c6e4:	4085      	lsls	r5, r0
    c6e6:	2700      	movs	r7, #0
    c6e8:	e72e      	b.n	c548 <__aeabi_dadd+0xdc>
    c6ea:	0038      	movs	r0, r7
    c6ec:	f001 fd42 	bl	e174 <__clzsi2>
    c6f0:	3020      	adds	r0, #32
    c6f2:	e71d      	b.n	c530 <__aeabi_dadd+0xc4>
    c6f4:	430a      	orrs	r2, r1
    c6f6:	1e51      	subs	r1, r2, #1
    c6f8:	418a      	sbcs	r2, r1
    c6fa:	2100      	movs	r1, #0
    c6fc:	e707      	b.n	c50e <__aeabi_dadd+0xa2>
    c6fe:	2b00      	cmp	r3, #0
    c700:	d000      	beq.n	c704 <__aeabi_dadd+0x298>
    c702:	e0f3      	b.n	c8ec <__aeabi_dadd+0x480>
    c704:	1c70      	adds	r0, r6, #1
    c706:	0543      	lsls	r3, r0, #21
    c708:	0d5b      	lsrs	r3, r3, #21
    c70a:	2b01      	cmp	r3, #1
    c70c:	dc00      	bgt.n	c710 <__aeabi_dadd+0x2a4>
    c70e:	e0ad      	b.n	c86c <__aeabi_dadd+0x400>
    c710:	4b36      	ldr	r3, [pc, #216]	; (c7ec <__aeabi_dadd+0x380>)
    c712:	4298      	cmp	r0, r3
    c714:	d100      	bne.n	c718 <__aeabi_dadd+0x2ac>
    c716:	e0d1      	b.n	c8bc <__aeabi_dadd+0x450>
    c718:	18ba      	adds	r2, r7, r2
    c71a:	42ba      	cmp	r2, r7
    c71c:	41bf      	sbcs	r7, r7
    c71e:	1864      	adds	r4, r4, r1
    c720:	427f      	negs	r7, r7
    c722:	19e4      	adds	r4, r4, r7
    c724:	07e7      	lsls	r7, r4, #31
    c726:	0852      	lsrs	r2, r2, #1
    c728:	4317      	orrs	r7, r2
    c72a:	0864      	lsrs	r4, r4, #1
    c72c:	0006      	movs	r6, r0
    c72e:	e721      	b.n	c574 <__aeabi_dadd+0x108>
    c730:	482e      	ldr	r0, [pc, #184]	; (c7ec <__aeabi_dadd+0x380>)
    c732:	4285      	cmp	r5, r0
    c734:	d100      	bne.n	c738 <__aeabi_dadd+0x2cc>
    c736:	e093      	b.n	c860 <__aeabi_dadd+0x3f4>
    c738:	001d      	movs	r5, r3
    c73a:	e6d0      	b.n	c4de <__aeabi_dadd+0x72>
    c73c:	0029      	movs	r1, r5
    c73e:	3e1f      	subs	r6, #31
    c740:	40f1      	lsrs	r1, r6
    c742:	2b20      	cmp	r3, #32
    c744:	d100      	bne.n	c748 <__aeabi_dadd+0x2dc>
    c746:	e08d      	b.n	c864 <__aeabi_dadd+0x3f8>
    c748:	2240      	movs	r2, #64	; 0x40
    c74a:	1ad3      	subs	r3, r2, r3
    c74c:	409d      	lsls	r5, r3
    c74e:	432f      	orrs	r7, r5
    c750:	1e7d      	subs	r5, r7, #1
    c752:	41af      	sbcs	r7, r5
    c754:	2400      	movs	r4, #0
    c756:	430f      	orrs	r7, r1
    c758:	2600      	movs	r6, #0
    c75a:	e744      	b.n	c5e6 <__aeabi_dadd+0x17a>
    c75c:	002b      	movs	r3, r5
    c75e:	0008      	movs	r0, r1
    c760:	3b20      	subs	r3, #32
    c762:	40d8      	lsrs	r0, r3
    c764:	0003      	movs	r3, r0
    c766:	2d20      	cmp	r5, #32
    c768:	d100      	bne.n	c76c <__aeabi_dadd+0x300>
    c76a:	e07d      	b.n	c868 <__aeabi_dadd+0x3fc>
    c76c:	2040      	movs	r0, #64	; 0x40
    c76e:	1b45      	subs	r5, r0, r5
    c770:	40a9      	lsls	r1, r5
    c772:	430a      	orrs	r2, r1
    c774:	1e51      	subs	r1, r2, #1
    c776:	418a      	sbcs	r2, r1
    c778:	2100      	movs	r1, #0
    c77a:	431a      	orrs	r2, r3
    c77c:	e6c7      	b.n	c50e <__aeabi_dadd+0xa2>
    c77e:	2e00      	cmp	r6, #0
    c780:	d050      	beq.n	c824 <__aeabi_dadd+0x3b8>
    c782:	4e1a      	ldr	r6, [pc, #104]	; (c7ec <__aeabi_dadd+0x380>)
    c784:	42b0      	cmp	r0, r6
    c786:	d057      	beq.n	c838 <__aeabi_dadd+0x3cc>
    c788:	2680      	movs	r6, #128	; 0x80
    c78a:	426b      	negs	r3, r5
    c78c:	4699      	mov	r9, r3
    c78e:	0436      	lsls	r6, r6, #16
    c790:	4334      	orrs	r4, r6
    c792:	464b      	mov	r3, r9
    c794:	2b38      	cmp	r3, #56	; 0x38
    c796:	dd00      	ble.n	c79a <__aeabi_dadd+0x32e>
    c798:	e0d6      	b.n	c948 <__aeabi_dadd+0x4dc>
    c79a:	2b1f      	cmp	r3, #31
    c79c:	dd00      	ble.n	c7a0 <__aeabi_dadd+0x334>
    c79e:	e135      	b.n	ca0c <__aeabi_dadd+0x5a0>
    c7a0:	2620      	movs	r6, #32
    c7a2:	1af5      	subs	r5, r6, r3
    c7a4:	0026      	movs	r6, r4
    c7a6:	40ae      	lsls	r6, r5
    c7a8:	46b2      	mov	sl, r6
    c7aa:	003e      	movs	r6, r7
    c7ac:	40de      	lsrs	r6, r3
    c7ae:	46ac      	mov	ip, r5
    c7b0:	0035      	movs	r5, r6
    c7b2:	4656      	mov	r6, sl
    c7b4:	432e      	orrs	r6, r5
    c7b6:	4665      	mov	r5, ip
    c7b8:	40af      	lsls	r7, r5
    c7ba:	1e7d      	subs	r5, r7, #1
    c7bc:	41af      	sbcs	r7, r5
    c7be:	40dc      	lsrs	r4, r3
    c7c0:	4337      	orrs	r7, r6
    c7c2:	1bd7      	subs	r7, r2, r7
    c7c4:	42ba      	cmp	r2, r7
    c7c6:	4192      	sbcs	r2, r2
    c7c8:	1b0c      	subs	r4, r1, r4
    c7ca:	4252      	negs	r2, r2
    c7cc:	1aa4      	subs	r4, r4, r2
    c7ce:	0006      	movs	r6, r0
    c7d0:	46d8      	mov	r8, fp
    c7d2:	e6a3      	b.n	c51c <__aeabi_dadd+0xb0>
    c7d4:	4664      	mov	r4, ip
    c7d6:	4667      	mov	r7, ip
    c7d8:	432c      	orrs	r4, r5
    c7da:	d000      	beq.n	c7de <__aeabi_dadd+0x372>
    c7dc:	e6a2      	b.n	c524 <__aeabi_dadd+0xb8>
    c7de:	2500      	movs	r5, #0
    c7e0:	2600      	movs	r6, #0
    c7e2:	2700      	movs	r7, #0
    c7e4:	e706      	b.n	c5f4 <__aeabi_dadd+0x188>
    c7e6:	001e      	movs	r6, r3
    c7e8:	e6c4      	b.n	c574 <__aeabi_dadd+0x108>
    c7ea:	46c0      	nop			; (mov r8, r8)
    c7ec:	000007ff 	.word	0x000007ff
    c7f0:	ff7fffff 	.word	0xff7fffff
    c7f4:	800fffff 	.word	0x800fffff
    c7f8:	2b1f      	cmp	r3, #31
    c7fa:	dc63      	bgt.n	c8c4 <__aeabi_dadd+0x458>
    c7fc:	2020      	movs	r0, #32
    c7fe:	1ac3      	subs	r3, r0, r3
    c800:	0008      	movs	r0, r1
    c802:	4098      	lsls	r0, r3
    c804:	469c      	mov	ip, r3
    c806:	4683      	mov	fp, r0
    c808:	4653      	mov	r3, sl
    c80a:	0010      	movs	r0, r2
    c80c:	40d8      	lsrs	r0, r3
    c80e:	0003      	movs	r3, r0
    c810:	4658      	mov	r0, fp
    c812:	4318      	orrs	r0, r3
    c814:	4663      	mov	r3, ip
    c816:	409a      	lsls	r2, r3
    c818:	1e53      	subs	r3, r2, #1
    c81a:	419a      	sbcs	r2, r3
    c81c:	4653      	mov	r3, sl
    c81e:	4302      	orrs	r2, r0
    c820:	40d9      	lsrs	r1, r3
    c822:	e703      	b.n	c62c <__aeabi_dadd+0x1c0>
    c824:	0026      	movs	r6, r4
    c826:	433e      	orrs	r6, r7
    c828:	d006      	beq.n	c838 <__aeabi_dadd+0x3cc>
    c82a:	43eb      	mvns	r3, r5
    c82c:	4699      	mov	r9, r3
    c82e:	2b00      	cmp	r3, #0
    c830:	d0c7      	beq.n	c7c2 <__aeabi_dadd+0x356>
    c832:	4e94      	ldr	r6, [pc, #592]	; (ca84 <__aeabi_dadd+0x618>)
    c834:	42b0      	cmp	r0, r6
    c836:	d1ac      	bne.n	c792 <__aeabi_dadd+0x326>
    c838:	000c      	movs	r4, r1
    c83a:	0017      	movs	r7, r2
    c83c:	0006      	movs	r6, r0
    c83e:	46d8      	mov	r8, fp
    c840:	e698      	b.n	c574 <__aeabi_dadd+0x108>
    c842:	4b90      	ldr	r3, [pc, #576]	; (ca84 <__aeabi_dadd+0x618>)
    c844:	459a      	cmp	sl, r3
    c846:	d00b      	beq.n	c860 <__aeabi_dadd+0x3f4>
    c848:	4682      	mov	sl, r0
    c84a:	e6e7      	b.n	c61c <__aeabi_dadd+0x1b0>
    c84c:	2800      	cmp	r0, #0
    c84e:	d000      	beq.n	c852 <__aeabi_dadd+0x3e6>
    c850:	e09e      	b.n	c990 <__aeabi_dadd+0x524>
    c852:	0018      	movs	r0, r3
    c854:	4310      	orrs	r0, r2
    c856:	d100      	bne.n	c85a <__aeabi_dadd+0x3ee>
    c858:	e0e9      	b.n	ca2e <__aeabi_dadd+0x5c2>
    c85a:	001c      	movs	r4, r3
    c85c:	0017      	movs	r7, r2
    c85e:	46d8      	mov	r8, fp
    c860:	4e88      	ldr	r6, [pc, #544]	; (ca84 <__aeabi_dadd+0x618>)
    c862:	e687      	b.n	c574 <__aeabi_dadd+0x108>
    c864:	2500      	movs	r5, #0
    c866:	e772      	b.n	c74e <__aeabi_dadd+0x2e2>
    c868:	2100      	movs	r1, #0
    c86a:	e782      	b.n	c772 <__aeabi_dadd+0x306>
    c86c:	0023      	movs	r3, r4
    c86e:	433b      	orrs	r3, r7
    c870:	2e00      	cmp	r6, #0
    c872:	d000      	beq.n	c876 <__aeabi_dadd+0x40a>
    c874:	e0ab      	b.n	c9ce <__aeabi_dadd+0x562>
    c876:	2b00      	cmp	r3, #0
    c878:	d100      	bne.n	c87c <__aeabi_dadd+0x410>
    c87a:	e0e7      	b.n	ca4c <__aeabi_dadd+0x5e0>
    c87c:	000b      	movs	r3, r1
    c87e:	4313      	orrs	r3, r2
    c880:	d100      	bne.n	c884 <__aeabi_dadd+0x418>
    c882:	e677      	b.n	c574 <__aeabi_dadd+0x108>
    c884:	18ba      	adds	r2, r7, r2
    c886:	42ba      	cmp	r2, r7
    c888:	41bf      	sbcs	r7, r7
    c88a:	1864      	adds	r4, r4, r1
    c88c:	427f      	negs	r7, r7
    c88e:	19e4      	adds	r4, r4, r7
    c890:	0223      	lsls	r3, r4, #8
    c892:	d400      	bmi.n	c896 <__aeabi_dadd+0x42a>
    c894:	e0f2      	b.n	ca7c <__aeabi_dadd+0x610>
    c896:	4b7c      	ldr	r3, [pc, #496]	; (ca88 <__aeabi_dadd+0x61c>)
    c898:	0017      	movs	r7, r2
    c89a:	401c      	ands	r4, r3
    c89c:	0006      	movs	r6, r0
    c89e:	e669      	b.n	c574 <__aeabi_dadd+0x108>
    c8a0:	0020      	movs	r0, r4
    c8a2:	4338      	orrs	r0, r7
    c8a4:	2e00      	cmp	r6, #0
    c8a6:	d1d1      	bne.n	c84c <__aeabi_dadd+0x3e0>
    c8a8:	2800      	cmp	r0, #0
    c8aa:	d15b      	bne.n	c964 <__aeabi_dadd+0x4f8>
    c8ac:	001c      	movs	r4, r3
    c8ae:	4314      	orrs	r4, r2
    c8b0:	d100      	bne.n	c8b4 <__aeabi_dadd+0x448>
    c8b2:	e0a8      	b.n	ca06 <__aeabi_dadd+0x59a>
    c8b4:	001c      	movs	r4, r3
    c8b6:	0017      	movs	r7, r2
    c8b8:	46d8      	mov	r8, fp
    c8ba:	e65b      	b.n	c574 <__aeabi_dadd+0x108>
    c8bc:	0006      	movs	r6, r0
    c8be:	2400      	movs	r4, #0
    c8c0:	2700      	movs	r7, #0
    c8c2:	e697      	b.n	c5f4 <__aeabi_dadd+0x188>
    c8c4:	4650      	mov	r0, sl
    c8c6:	000b      	movs	r3, r1
    c8c8:	3820      	subs	r0, #32
    c8ca:	40c3      	lsrs	r3, r0
    c8cc:	4699      	mov	r9, r3
    c8ce:	4653      	mov	r3, sl
    c8d0:	2b20      	cmp	r3, #32
    c8d2:	d100      	bne.n	c8d6 <__aeabi_dadd+0x46a>
    c8d4:	e095      	b.n	ca02 <__aeabi_dadd+0x596>
    c8d6:	2340      	movs	r3, #64	; 0x40
    c8d8:	4650      	mov	r0, sl
    c8da:	1a1b      	subs	r3, r3, r0
    c8dc:	4099      	lsls	r1, r3
    c8de:	430a      	orrs	r2, r1
    c8e0:	1e51      	subs	r1, r2, #1
    c8e2:	418a      	sbcs	r2, r1
    c8e4:	464b      	mov	r3, r9
    c8e6:	2100      	movs	r1, #0
    c8e8:	431a      	orrs	r2, r3
    c8ea:	e69f      	b.n	c62c <__aeabi_dadd+0x1c0>
    c8ec:	2e00      	cmp	r6, #0
    c8ee:	d130      	bne.n	c952 <__aeabi_dadd+0x4e6>
    c8f0:	0026      	movs	r6, r4
    c8f2:	433e      	orrs	r6, r7
    c8f4:	d067      	beq.n	c9c6 <__aeabi_dadd+0x55a>
    c8f6:	43db      	mvns	r3, r3
    c8f8:	469a      	mov	sl, r3
    c8fa:	2b00      	cmp	r3, #0
    c8fc:	d01c      	beq.n	c938 <__aeabi_dadd+0x4cc>
    c8fe:	4e61      	ldr	r6, [pc, #388]	; (ca84 <__aeabi_dadd+0x618>)
    c900:	42b0      	cmp	r0, r6
    c902:	d060      	beq.n	c9c6 <__aeabi_dadd+0x55a>
    c904:	4653      	mov	r3, sl
    c906:	2b38      	cmp	r3, #56	; 0x38
    c908:	dd00      	ble.n	c90c <__aeabi_dadd+0x4a0>
    c90a:	e096      	b.n	ca3a <__aeabi_dadd+0x5ce>
    c90c:	2b1f      	cmp	r3, #31
    c90e:	dd00      	ble.n	c912 <__aeabi_dadd+0x4a6>
    c910:	e09f      	b.n	ca52 <__aeabi_dadd+0x5e6>
    c912:	2620      	movs	r6, #32
    c914:	1af3      	subs	r3, r6, r3
    c916:	0026      	movs	r6, r4
    c918:	409e      	lsls	r6, r3
    c91a:	469c      	mov	ip, r3
    c91c:	46b3      	mov	fp, r6
    c91e:	4653      	mov	r3, sl
    c920:	003e      	movs	r6, r7
    c922:	40de      	lsrs	r6, r3
    c924:	0033      	movs	r3, r6
    c926:	465e      	mov	r6, fp
    c928:	431e      	orrs	r6, r3
    c92a:	4663      	mov	r3, ip
    c92c:	409f      	lsls	r7, r3
    c92e:	1e7b      	subs	r3, r7, #1
    c930:	419f      	sbcs	r7, r3
    c932:	4653      	mov	r3, sl
    c934:	40dc      	lsrs	r4, r3
    c936:	4337      	orrs	r7, r6
    c938:	18bf      	adds	r7, r7, r2
    c93a:	4297      	cmp	r7, r2
    c93c:	4192      	sbcs	r2, r2
    c93e:	1864      	adds	r4, r4, r1
    c940:	4252      	negs	r2, r2
    c942:	18a4      	adds	r4, r4, r2
    c944:	0006      	movs	r6, r0
    c946:	e678      	b.n	c63a <__aeabi_dadd+0x1ce>
    c948:	4327      	orrs	r7, r4
    c94a:	1e7c      	subs	r4, r7, #1
    c94c:	41a7      	sbcs	r7, r4
    c94e:	2400      	movs	r4, #0
    c950:	e737      	b.n	c7c2 <__aeabi_dadd+0x356>
    c952:	4e4c      	ldr	r6, [pc, #304]	; (ca84 <__aeabi_dadd+0x618>)
    c954:	42b0      	cmp	r0, r6
    c956:	d036      	beq.n	c9c6 <__aeabi_dadd+0x55a>
    c958:	2680      	movs	r6, #128	; 0x80
    c95a:	425b      	negs	r3, r3
    c95c:	0436      	lsls	r6, r6, #16
    c95e:	469a      	mov	sl, r3
    c960:	4334      	orrs	r4, r6
    c962:	e7cf      	b.n	c904 <__aeabi_dadd+0x498>
    c964:	0018      	movs	r0, r3
    c966:	4310      	orrs	r0, r2
    c968:	d100      	bne.n	c96c <__aeabi_dadd+0x500>
    c96a:	e603      	b.n	c574 <__aeabi_dadd+0x108>
    c96c:	1ab8      	subs	r0, r7, r2
    c96e:	4684      	mov	ip, r0
    c970:	4567      	cmp	r7, ip
    c972:	41ad      	sbcs	r5, r5
    c974:	1ae0      	subs	r0, r4, r3
    c976:	426d      	negs	r5, r5
    c978:	1b40      	subs	r0, r0, r5
    c97a:	0205      	lsls	r5, r0, #8
    c97c:	d400      	bmi.n	c980 <__aeabi_dadd+0x514>
    c97e:	e62c      	b.n	c5da <__aeabi_dadd+0x16e>
    c980:	1bd7      	subs	r7, r2, r7
    c982:	42ba      	cmp	r2, r7
    c984:	4192      	sbcs	r2, r2
    c986:	1b1c      	subs	r4, r3, r4
    c988:	4252      	negs	r2, r2
    c98a:	1aa4      	subs	r4, r4, r2
    c98c:	46d8      	mov	r8, fp
    c98e:	e5f1      	b.n	c574 <__aeabi_dadd+0x108>
    c990:	0018      	movs	r0, r3
    c992:	4310      	orrs	r0, r2
    c994:	d100      	bne.n	c998 <__aeabi_dadd+0x52c>
    c996:	e763      	b.n	c860 <__aeabi_dadd+0x3f4>
    c998:	08f8      	lsrs	r0, r7, #3
    c99a:	0767      	lsls	r7, r4, #29
    c99c:	4307      	orrs	r7, r0
    c99e:	2080      	movs	r0, #128	; 0x80
    c9a0:	08e4      	lsrs	r4, r4, #3
    c9a2:	0300      	lsls	r0, r0, #12
    c9a4:	4204      	tst	r4, r0
    c9a6:	d008      	beq.n	c9ba <__aeabi_dadd+0x54e>
    c9a8:	08dd      	lsrs	r5, r3, #3
    c9aa:	4205      	tst	r5, r0
    c9ac:	d105      	bne.n	c9ba <__aeabi_dadd+0x54e>
    c9ae:	08d2      	lsrs	r2, r2, #3
    c9b0:	0759      	lsls	r1, r3, #29
    c9b2:	4311      	orrs	r1, r2
    c9b4:	000f      	movs	r7, r1
    c9b6:	002c      	movs	r4, r5
    c9b8:	46d8      	mov	r8, fp
    c9ba:	0f7b      	lsrs	r3, r7, #29
    c9bc:	00e4      	lsls	r4, r4, #3
    c9be:	431c      	orrs	r4, r3
    c9c0:	00ff      	lsls	r7, r7, #3
    c9c2:	4e30      	ldr	r6, [pc, #192]	; (ca84 <__aeabi_dadd+0x618>)
    c9c4:	e5d6      	b.n	c574 <__aeabi_dadd+0x108>
    c9c6:	000c      	movs	r4, r1
    c9c8:	0017      	movs	r7, r2
    c9ca:	0006      	movs	r6, r0
    c9cc:	e5d2      	b.n	c574 <__aeabi_dadd+0x108>
    c9ce:	2b00      	cmp	r3, #0
    c9d0:	d038      	beq.n	ca44 <__aeabi_dadd+0x5d8>
    c9d2:	000b      	movs	r3, r1
    c9d4:	4313      	orrs	r3, r2
    c9d6:	d100      	bne.n	c9da <__aeabi_dadd+0x56e>
    c9d8:	e742      	b.n	c860 <__aeabi_dadd+0x3f4>
    c9da:	08f8      	lsrs	r0, r7, #3
    c9dc:	0767      	lsls	r7, r4, #29
    c9de:	4307      	orrs	r7, r0
    c9e0:	2080      	movs	r0, #128	; 0x80
    c9e2:	08e4      	lsrs	r4, r4, #3
    c9e4:	0300      	lsls	r0, r0, #12
    c9e6:	4204      	tst	r4, r0
    c9e8:	d0e7      	beq.n	c9ba <__aeabi_dadd+0x54e>
    c9ea:	08cb      	lsrs	r3, r1, #3
    c9ec:	4203      	tst	r3, r0
    c9ee:	d1e4      	bne.n	c9ba <__aeabi_dadd+0x54e>
    c9f0:	08d2      	lsrs	r2, r2, #3
    c9f2:	0749      	lsls	r1, r1, #29
    c9f4:	4311      	orrs	r1, r2
    c9f6:	000f      	movs	r7, r1
    c9f8:	001c      	movs	r4, r3
    c9fa:	e7de      	b.n	c9ba <__aeabi_dadd+0x54e>
    c9fc:	2700      	movs	r7, #0
    c9fe:	2400      	movs	r4, #0
    ca00:	e5d5      	b.n	c5ae <__aeabi_dadd+0x142>
    ca02:	2100      	movs	r1, #0
    ca04:	e76b      	b.n	c8de <__aeabi_dadd+0x472>
    ca06:	2500      	movs	r5, #0
    ca08:	2700      	movs	r7, #0
    ca0a:	e5f3      	b.n	c5f4 <__aeabi_dadd+0x188>
    ca0c:	464e      	mov	r6, r9
    ca0e:	0025      	movs	r5, r4
    ca10:	3e20      	subs	r6, #32
    ca12:	40f5      	lsrs	r5, r6
    ca14:	464b      	mov	r3, r9
    ca16:	002e      	movs	r6, r5
    ca18:	2b20      	cmp	r3, #32
    ca1a:	d02d      	beq.n	ca78 <__aeabi_dadd+0x60c>
    ca1c:	2540      	movs	r5, #64	; 0x40
    ca1e:	1aed      	subs	r5, r5, r3
    ca20:	40ac      	lsls	r4, r5
    ca22:	4327      	orrs	r7, r4
    ca24:	1e7c      	subs	r4, r7, #1
    ca26:	41a7      	sbcs	r7, r4
    ca28:	2400      	movs	r4, #0
    ca2a:	4337      	orrs	r7, r6
    ca2c:	e6c9      	b.n	c7c2 <__aeabi_dadd+0x356>
    ca2e:	2480      	movs	r4, #128	; 0x80
    ca30:	2500      	movs	r5, #0
    ca32:	0324      	lsls	r4, r4, #12
    ca34:	4e13      	ldr	r6, [pc, #76]	; (ca84 <__aeabi_dadd+0x618>)
    ca36:	2700      	movs	r7, #0
    ca38:	e5dc      	b.n	c5f4 <__aeabi_dadd+0x188>
    ca3a:	4327      	orrs	r7, r4
    ca3c:	1e7c      	subs	r4, r7, #1
    ca3e:	41a7      	sbcs	r7, r4
    ca40:	2400      	movs	r4, #0
    ca42:	e779      	b.n	c938 <__aeabi_dadd+0x4cc>
    ca44:	000c      	movs	r4, r1
    ca46:	0017      	movs	r7, r2
    ca48:	4e0e      	ldr	r6, [pc, #56]	; (ca84 <__aeabi_dadd+0x618>)
    ca4a:	e593      	b.n	c574 <__aeabi_dadd+0x108>
    ca4c:	000c      	movs	r4, r1
    ca4e:	0017      	movs	r7, r2
    ca50:	e590      	b.n	c574 <__aeabi_dadd+0x108>
    ca52:	4656      	mov	r6, sl
    ca54:	0023      	movs	r3, r4
    ca56:	3e20      	subs	r6, #32
    ca58:	40f3      	lsrs	r3, r6
    ca5a:	4699      	mov	r9, r3
    ca5c:	4653      	mov	r3, sl
    ca5e:	2b20      	cmp	r3, #32
    ca60:	d00e      	beq.n	ca80 <__aeabi_dadd+0x614>
    ca62:	2340      	movs	r3, #64	; 0x40
    ca64:	4656      	mov	r6, sl
    ca66:	1b9b      	subs	r3, r3, r6
    ca68:	409c      	lsls	r4, r3
    ca6a:	4327      	orrs	r7, r4
    ca6c:	1e7c      	subs	r4, r7, #1
    ca6e:	41a7      	sbcs	r7, r4
    ca70:	464b      	mov	r3, r9
    ca72:	2400      	movs	r4, #0
    ca74:	431f      	orrs	r7, r3
    ca76:	e75f      	b.n	c938 <__aeabi_dadd+0x4cc>
    ca78:	2400      	movs	r4, #0
    ca7a:	e7d2      	b.n	ca22 <__aeabi_dadd+0x5b6>
    ca7c:	0017      	movs	r7, r2
    ca7e:	e5b2      	b.n	c5e6 <__aeabi_dadd+0x17a>
    ca80:	2400      	movs	r4, #0
    ca82:	e7f2      	b.n	ca6a <__aeabi_dadd+0x5fe>
    ca84:	000007ff 	.word	0x000007ff
    ca88:	ff7fffff 	.word	0xff7fffff

0000ca8c <__aeabi_ddiv>:
    ca8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca8e:	4657      	mov	r7, sl
    ca90:	4645      	mov	r5, r8
    ca92:	46de      	mov	lr, fp
    ca94:	464e      	mov	r6, r9
    ca96:	b5e0      	push	{r5, r6, r7, lr}
    ca98:	004c      	lsls	r4, r1, #1
    ca9a:	030e      	lsls	r6, r1, #12
    ca9c:	b087      	sub	sp, #28
    ca9e:	4683      	mov	fp, r0
    caa0:	4692      	mov	sl, r2
    caa2:	001d      	movs	r5, r3
    caa4:	4680      	mov	r8, r0
    caa6:	0b36      	lsrs	r6, r6, #12
    caa8:	0d64      	lsrs	r4, r4, #21
    caaa:	0fcf      	lsrs	r7, r1, #31
    caac:	2c00      	cmp	r4, #0
    caae:	d04f      	beq.n	cb50 <__aeabi_ddiv+0xc4>
    cab0:	4b6f      	ldr	r3, [pc, #444]	; (cc70 <__aeabi_ddiv+0x1e4>)
    cab2:	429c      	cmp	r4, r3
    cab4:	d035      	beq.n	cb22 <__aeabi_ddiv+0x96>
    cab6:	2380      	movs	r3, #128	; 0x80
    cab8:	0f42      	lsrs	r2, r0, #29
    caba:	041b      	lsls	r3, r3, #16
    cabc:	00f6      	lsls	r6, r6, #3
    cabe:	4313      	orrs	r3, r2
    cac0:	4333      	orrs	r3, r6
    cac2:	4699      	mov	r9, r3
    cac4:	00c3      	lsls	r3, r0, #3
    cac6:	4698      	mov	r8, r3
    cac8:	4b6a      	ldr	r3, [pc, #424]	; (cc74 <__aeabi_ddiv+0x1e8>)
    caca:	2600      	movs	r6, #0
    cacc:	469c      	mov	ip, r3
    cace:	2300      	movs	r3, #0
    cad0:	4464      	add	r4, ip
    cad2:	9303      	str	r3, [sp, #12]
    cad4:	032b      	lsls	r3, r5, #12
    cad6:	0b1b      	lsrs	r3, r3, #12
    cad8:	469b      	mov	fp, r3
    cada:	006b      	lsls	r3, r5, #1
    cadc:	0fed      	lsrs	r5, r5, #31
    cade:	4650      	mov	r0, sl
    cae0:	0d5b      	lsrs	r3, r3, #21
    cae2:	9501      	str	r5, [sp, #4]
    cae4:	d05e      	beq.n	cba4 <__aeabi_ddiv+0x118>
    cae6:	4a62      	ldr	r2, [pc, #392]	; (cc70 <__aeabi_ddiv+0x1e4>)
    cae8:	4293      	cmp	r3, r2
    caea:	d053      	beq.n	cb94 <__aeabi_ddiv+0x108>
    caec:	465a      	mov	r2, fp
    caee:	00d1      	lsls	r1, r2, #3
    caf0:	2280      	movs	r2, #128	; 0x80
    caf2:	0f40      	lsrs	r0, r0, #29
    caf4:	0412      	lsls	r2, r2, #16
    caf6:	4302      	orrs	r2, r0
    caf8:	430a      	orrs	r2, r1
    cafa:	4693      	mov	fp, r2
    cafc:	4652      	mov	r2, sl
    cafe:	00d1      	lsls	r1, r2, #3
    cb00:	4a5c      	ldr	r2, [pc, #368]	; (cc74 <__aeabi_ddiv+0x1e8>)
    cb02:	4694      	mov	ip, r2
    cb04:	2200      	movs	r2, #0
    cb06:	4463      	add	r3, ip
    cb08:	0038      	movs	r0, r7
    cb0a:	4068      	eors	r0, r5
    cb0c:	4684      	mov	ip, r0
    cb0e:	9002      	str	r0, [sp, #8]
    cb10:	1ae4      	subs	r4, r4, r3
    cb12:	4316      	orrs	r6, r2
    cb14:	2e0f      	cmp	r6, #15
    cb16:	d900      	bls.n	cb1a <__aeabi_ddiv+0x8e>
    cb18:	e0b4      	b.n	cc84 <__aeabi_ddiv+0x1f8>
    cb1a:	4b57      	ldr	r3, [pc, #348]	; (cc78 <__aeabi_ddiv+0x1ec>)
    cb1c:	00b6      	lsls	r6, r6, #2
    cb1e:	599b      	ldr	r3, [r3, r6]
    cb20:	469f      	mov	pc, r3
    cb22:	0003      	movs	r3, r0
    cb24:	4333      	orrs	r3, r6
    cb26:	4699      	mov	r9, r3
    cb28:	d16c      	bne.n	cc04 <__aeabi_ddiv+0x178>
    cb2a:	2300      	movs	r3, #0
    cb2c:	4698      	mov	r8, r3
    cb2e:	3302      	adds	r3, #2
    cb30:	2608      	movs	r6, #8
    cb32:	9303      	str	r3, [sp, #12]
    cb34:	e7ce      	b.n	cad4 <__aeabi_ddiv+0x48>
    cb36:	46cb      	mov	fp, r9
    cb38:	4641      	mov	r1, r8
    cb3a:	9a03      	ldr	r2, [sp, #12]
    cb3c:	9701      	str	r7, [sp, #4]
    cb3e:	2a02      	cmp	r2, #2
    cb40:	d165      	bne.n	cc0e <__aeabi_ddiv+0x182>
    cb42:	9b01      	ldr	r3, [sp, #4]
    cb44:	4c4a      	ldr	r4, [pc, #296]	; (cc70 <__aeabi_ddiv+0x1e4>)
    cb46:	469c      	mov	ip, r3
    cb48:	2300      	movs	r3, #0
    cb4a:	2200      	movs	r2, #0
    cb4c:	4698      	mov	r8, r3
    cb4e:	e06b      	b.n	cc28 <__aeabi_ddiv+0x19c>
    cb50:	0003      	movs	r3, r0
    cb52:	4333      	orrs	r3, r6
    cb54:	4699      	mov	r9, r3
    cb56:	d04e      	beq.n	cbf6 <__aeabi_ddiv+0x16a>
    cb58:	2e00      	cmp	r6, #0
    cb5a:	d100      	bne.n	cb5e <__aeabi_ddiv+0xd2>
    cb5c:	e1bc      	b.n	ced8 <__aeabi_ddiv+0x44c>
    cb5e:	0030      	movs	r0, r6
    cb60:	f001 fb08 	bl	e174 <__clzsi2>
    cb64:	0003      	movs	r3, r0
    cb66:	3b0b      	subs	r3, #11
    cb68:	2b1c      	cmp	r3, #28
    cb6a:	dd00      	ble.n	cb6e <__aeabi_ddiv+0xe2>
    cb6c:	e1ac      	b.n	cec8 <__aeabi_ddiv+0x43c>
    cb6e:	221d      	movs	r2, #29
    cb70:	1ad3      	subs	r3, r2, r3
    cb72:	465a      	mov	r2, fp
    cb74:	0001      	movs	r1, r0
    cb76:	40da      	lsrs	r2, r3
    cb78:	3908      	subs	r1, #8
    cb7a:	408e      	lsls	r6, r1
    cb7c:	0013      	movs	r3, r2
    cb7e:	4333      	orrs	r3, r6
    cb80:	4699      	mov	r9, r3
    cb82:	465b      	mov	r3, fp
    cb84:	408b      	lsls	r3, r1
    cb86:	4698      	mov	r8, r3
    cb88:	2300      	movs	r3, #0
    cb8a:	4c3c      	ldr	r4, [pc, #240]	; (cc7c <__aeabi_ddiv+0x1f0>)
    cb8c:	2600      	movs	r6, #0
    cb8e:	1a24      	subs	r4, r4, r0
    cb90:	9303      	str	r3, [sp, #12]
    cb92:	e79f      	b.n	cad4 <__aeabi_ddiv+0x48>
    cb94:	4651      	mov	r1, sl
    cb96:	465a      	mov	r2, fp
    cb98:	4311      	orrs	r1, r2
    cb9a:	d129      	bne.n	cbf0 <__aeabi_ddiv+0x164>
    cb9c:	2200      	movs	r2, #0
    cb9e:	4693      	mov	fp, r2
    cba0:	3202      	adds	r2, #2
    cba2:	e7b1      	b.n	cb08 <__aeabi_ddiv+0x7c>
    cba4:	4659      	mov	r1, fp
    cba6:	4301      	orrs	r1, r0
    cba8:	d01e      	beq.n	cbe8 <__aeabi_ddiv+0x15c>
    cbaa:	465b      	mov	r3, fp
    cbac:	2b00      	cmp	r3, #0
    cbae:	d100      	bne.n	cbb2 <__aeabi_ddiv+0x126>
    cbb0:	e19e      	b.n	cef0 <__aeabi_ddiv+0x464>
    cbb2:	4658      	mov	r0, fp
    cbb4:	f001 fade 	bl	e174 <__clzsi2>
    cbb8:	0003      	movs	r3, r0
    cbba:	3b0b      	subs	r3, #11
    cbbc:	2b1c      	cmp	r3, #28
    cbbe:	dd00      	ble.n	cbc2 <__aeabi_ddiv+0x136>
    cbc0:	e18f      	b.n	cee2 <__aeabi_ddiv+0x456>
    cbc2:	0002      	movs	r2, r0
    cbc4:	4659      	mov	r1, fp
    cbc6:	3a08      	subs	r2, #8
    cbc8:	4091      	lsls	r1, r2
    cbca:	468b      	mov	fp, r1
    cbcc:	211d      	movs	r1, #29
    cbce:	1acb      	subs	r3, r1, r3
    cbd0:	4651      	mov	r1, sl
    cbd2:	40d9      	lsrs	r1, r3
    cbd4:	000b      	movs	r3, r1
    cbd6:	4659      	mov	r1, fp
    cbd8:	430b      	orrs	r3, r1
    cbda:	4651      	mov	r1, sl
    cbdc:	469b      	mov	fp, r3
    cbde:	4091      	lsls	r1, r2
    cbe0:	4b26      	ldr	r3, [pc, #152]	; (cc7c <__aeabi_ddiv+0x1f0>)
    cbe2:	2200      	movs	r2, #0
    cbe4:	1a1b      	subs	r3, r3, r0
    cbe6:	e78f      	b.n	cb08 <__aeabi_ddiv+0x7c>
    cbe8:	2300      	movs	r3, #0
    cbea:	2201      	movs	r2, #1
    cbec:	469b      	mov	fp, r3
    cbee:	e78b      	b.n	cb08 <__aeabi_ddiv+0x7c>
    cbf0:	4651      	mov	r1, sl
    cbf2:	2203      	movs	r2, #3
    cbf4:	e788      	b.n	cb08 <__aeabi_ddiv+0x7c>
    cbf6:	2300      	movs	r3, #0
    cbf8:	4698      	mov	r8, r3
    cbfa:	3301      	adds	r3, #1
    cbfc:	2604      	movs	r6, #4
    cbfe:	2400      	movs	r4, #0
    cc00:	9303      	str	r3, [sp, #12]
    cc02:	e767      	b.n	cad4 <__aeabi_ddiv+0x48>
    cc04:	2303      	movs	r3, #3
    cc06:	46b1      	mov	r9, r6
    cc08:	9303      	str	r3, [sp, #12]
    cc0a:	260c      	movs	r6, #12
    cc0c:	e762      	b.n	cad4 <__aeabi_ddiv+0x48>
    cc0e:	2a03      	cmp	r2, #3
    cc10:	d100      	bne.n	cc14 <__aeabi_ddiv+0x188>
    cc12:	e25c      	b.n	d0ce <__aeabi_ddiv+0x642>
    cc14:	9b01      	ldr	r3, [sp, #4]
    cc16:	2a01      	cmp	r2, #1
    cc18:	d000      	beq.n	cc1c <__aeabi_ddiv+0x190>
    cc1a:	e1e4      	b.n	cfe6 <__aeabi_ddiv+0x55a>
    cc1c:	4013      	ands	r3, r2
    cc1e:	469c      	mov	ip, r3
    cc20:	2300      	movs	r3, #0
    cc22:	2400      	movs	r4, #0
    cc24:	2200      	movs	r2, #0
    cc26:	4698      	mov	r8, r3
    cc28:	2100      	movs	r1, #0
    cc2a:	0312      	lsls	r2, r2, #12
    cc2c:	0b13      	lsrs	r3, r2, #12
    cc2e:	0d0a      	lsrs	r2, r1, #20
    cc30:	0512      	lsls	r2, r2, #20
    cc32:	431a      	orrs	r2, r3
    cc34:	0523      	lsls	r3, r4, #20
    cc36:	4c12      	ldr	r4, [pc, #72]	; (cc80 <__aeabi_ddiv+0x1f4>)
    cc38:	4640      	mov	r0, r8
    cc3a:	4022      	ands	r2, r4
    cc3c:	4313      	orrs	r3, r2
    cc3e:	4662      	mov	r2, ip
    cc40:	005b      	lsls	r3, r3, #1
    cc42:	07d2      	lsls	r2, r2, #31
    cc44:	085b      	lsrs	r3, r3, #1
    cc46:	4313      	orrs	r3, r2
    cc48:	0019      	movs	r1, r3
    cc4a:	b007      	add	sp, #28
    cc4c:	bc3c      	pop	{r2, r3, r4, r5}
    cc4e:	4690      	mov	r8, r2
    cc50:	4699      	mov	r9, r3
    cc52:	46a2      	mov	sl, r4
    cc54:	46ab      	mov	fp, r5
    cc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc58:	2300      	movs	r3, #0
    cc5a:	2280      	movs	r2, #128	; 0x80
    cc5c:	469c      	mov	ip, r3
    cc5e:	0312      	lsls	r2, r2, #12
    cc60:	4698      	mov	r8, r3
    cc62:	4c03      	ldr	r4, [pc, #12]	; (cc70 <__aeabi_ddiv+0x1e4>)
    cc64:	e7e0      	b.n	cc28 <__aeabi_ddiv+0x19c>
    cc66:	2300      	movs	r3, #0
    cc68:	4c01      	ldr	r4, [pc, #4]	; (cc70 <__aeabi_ddiv+0x1e4>)
    cc6a:	2200      	movs	r2, #0
    cc6c:	4698      	mov	r8, r3
    cc6e:	e7db      	b.n	cc28 <__aeabi_ddiv+0x19c>
    cc70:	000007ff 	.word	0x000007ff
    cc74:	fffffc01 	.word	0xfffffc01
    cc78:	0000f058 	.word	0x0000f058
    cc7c:	fffffc0d 	.word	0xfffffc0d
    cc80:	800fffff 	.word	0x800fffff
    cc84:	45d9      	cmp	r9, fp
    cc86:	d900      	bls.n	cc8a <__aeabi_ddiv+0x1fe>
    cc88:	e139      	b.n	cefe <__aeabi_ddiv+0x472>
    cc8a:	d100      	bne.n	cc8e <__aeabi_ddiv+0x202>
    cc8c:	e134      	b.n	cef8 <__aeabi_ddiv+0x46c>
    cc8e:	2300      	movs	r3, #0
    cc90:	4646      	mov	r6, r8
    cc92:	464d      	mov	r5, r9
    cc94:	469a      	mov	sl, r3
    cc96:	3c01      	subs	r4, #1
    cc98:	465b      	mov	r3, fp
    cc9a:	0e0a      	lsrs	r2, r1, #24
    cc9c:	021b      	lsls	r3, r3, #8
    cc9e:	431a      	orrs	r2, r3
    cca0:	020b      	lsls	r3, r1, #8
    cca2:	0c17      	lsrs	r7, r2, #16
    cca4:	9303      	str	r3, [sp, #12]
    cca6:	0413      	lsls	r3, r2, #16
    cca8:	0c1b      	lsrs	r3, r3, #16
    ccaa:	0039      	movs	r1, r7
    ccac:	0028      	movs	r0, r5
    ccae:	4690      	mov	r8, r2
    ccb0:	9301      	str	r3, [sp, #4]
    ccb2:	f7fe feff 	bl	bab4 <__udivsi3>
    ccb6:	0002      	movs	r2, r0
    ccb8:	9b01      	ldr	r3, [sp, #4]
    ccba:	4683      	mov	fp, r0
    ccbc:	435a      	muls	r2, r3
    ccbe:	0028      	movs	r0, r5
    ccc0:	0039      	movs	r1, r7
    ccc2:	4691      	mov	r9, r2
    ccc4:	f7fe ff7c 	bl	bbc0 <__aeabi_uidivmod>
    ccc8:	0c35      	lsrs	r5, r6, #16
    ccca:	0409      	lsls	r1, r1, #16
    cccc:	430d      	orrs	r5, r1
    ccce:	45a9      	cmp	r9, r5
    ccd0:	d90d      	bls.n	ccee <__aeabi_ddiv+0x262>
    ccd2:	465b      	mov	r3, fp
    ccd4:	4445      	add	r5, r8
    ccd6:	3b01      	subs	r3, #1
    ccd8:	45a8      	cmp	r8, r5
    ccda:	d900      	bls.n	ccde <__aeabi_ddiv+0x252>
    ccdc:	e13a      	b.n	cf54 <__aeabi_ddiv+0x4c8>
    ccde:	45a9      	cmp	r9, r5
    cce0:	d800      	bhi.n	cce4 <__aeabi_ddiv+0x258>
    cce2:	e137      	b.n	cf54 <__aeabi_ddiv+0x4c8>
    cce4:	2302      	movs	r3, #2
    cce6:	425b      	negs	r3, r3
    cce8:	469c      	mov	ip, r3
    ccea:	4445      	add	r5, r8
    ccec:	44e3      	add	fp, ip
    ccee:	464b      	mov	r3, r9
    ccf0:	1aeb      	subs	r3, r5, r3
    ccf2:	0039      	movs	r1, r7
    ccf4:	0018      	movs	r0, r3
    ccf6:	9304      	str	r3, [sp, #16]
    ccf8:	f7fe fedc 	bl	bab4 <__udivsi3>
    ccfc:	9b01      	ldr	r3, [sp, #4]
    ccfe:	0005      	movs	r5, r0
    cd00:	4343      	muls	r3, r0
    cd02:	0039      	movs	r1, r7
    cd04:	9804      	ldr	r0, [sp, #16]
    cd06:	4699      	mov	r9, r3
    cd08:	f7fe ff5a 	bl	bbc0 <__aeabi_uidivmod>
    cd0c:	0433      	lsls	r3, r6, #16
    cd0e:	0409      	lsls	r1, r1, #16
    cd10:	0c1b      	lsrs	r3, r3, #16
    cd12:	430b      	orrs	r3, r1
    cd14:	4599      	cmp	r9, r3
    cd16:	d909      	bls.n	cd2c <__aeabi_ddiv+0x2a0>
    cd18:	4443      	add	r3, r8
    cd1a:	1e6a      	subs	r2, r5, #1
    cd1c:	4598      	cmp	r8, r3
    cd1e:	d900      	bls.n	cd22 <__aeabi_ddiv+0x296>
    cd20:	e11a      	b.n	cf58 <__aeabi_ddiv+0x4cc>
    cd22:	4599      	cmp	r9, r3
    cd24:	d800      	bhi.n	cd28 <__aeabi_ddiv+0x29c>
    cd26:	e117      	b.n	cf58 <__aeabi_ddiv+0x4cc>
    cd28:	3d02      	subs	r5, #2
    cd2a:	4443      	add	r3, r8
    cd2c:	464a      	mov	r2, r9
    cd2e:	1a9b      	subs	r3, r3, r2
    cd30:	465a      	mov	r2, fp
    cd32:	0412      	lsls	r2, r2, #16
    cd34:	432a      	orrs	r2, r5
    cd36:	9903      	ldr	r1, [sp, #12]
    cd38:	4693      	mov	fp, r2
    cd3a:	0c10      	lsrs	r0, r2, #16
    cd3c:	0c0a      	lsrs	r2, r1, #16
    cd3e:	4691      	mov	r9, r2
    cd40:	0409      	lsls	r1, r1, #16
    cd42:	465a      	mov	r2, fp
    cd44:	0c09      	lsrs	r1, r1, #16
    cd46:	464e      	mov	r6, r9
    cd48:	000d      	movs	r5, r1
    cd4a:	0412      	lsls	r2, r2, #16
    cd4c:	0c12      	lsrs	r2, r2, #16
    cd4e:	4345      	muls	r5, r0
    cd50:	9105      	str	r1, [sp, #20]
    cd52:	4351      	muls	r1, r2
    cd54:	4372      	muls	r2, r6
    cd56:	4370      	muls	r0, r6
    cd58:	1952      	adds	r2, r2, r5
    cd5a:	0c0e      	lsrs	r6, r1, #16
    cd5c:	18b2      	adds	r2, r6, r2
    cd5e:	4295      	cmp	r5, r2
    cd60:	d903      	bls.n	cd6a <__aeabi_ddiv+0x2de>
    cd62:	2580      	movs	r5, #128	; 0x80
    cd64:	026d      	lsls	r5, r5, #9
    cd66:	46ac      	mov	ip, r5
    cd68:	4460      	add	r0, ip
    cd6a:	0c15      	lsrs	r5, r2, #16
    cd6c:	0409      	lsls	r1, r1, #16
    cd6e:	0412      	lsls	r2, r2, #16
    cd70:	0c09      	lsrs	r1, r1, #16
    cd72:	1828      	adds	r0, r5, r0
    cd74:	1852      	adds	r2, r2, r1
    cd76:	4283      	cmp	r3, r0
    cd78:	d200      	bcs.n	cd7c <__aeabi_ddiv+0x2f0>
    cd7a:	e0ce      	b.n	cf1a <__aeabi_ddiv+0x48e>
    cd7c:	d100      	bne.n	cd80 <__aeabi_ddiv+0x2f4>
    cd7e:	e0c8      	b.n	cf12 <__aeabi_ddiv+0x486>
    cd80:	1a1d      	subs	r5, r3, r0
    cd82:	4653      	mov	r3, sl
    cd84:	1a9e      	subs	r6, r3, r2
    cd86:	45b2      	cmp	sl, r6
    cd88:	4192      	sbcs	r2, r2
    cd8a:	4252      	negs	r2, r2
    cd8c:	1aab      	subs	r3, r5, r2
    cd8e:	469a      	mov	sl, r3
    cd90:	4598      	cmp	r8, r3
    cd92:	d100      	bne.n	cd96 <__aeabi_ddiv+0x30a>
    cd94:	e117      	b.n	cfc6 <__aeabi_ddiv+0x53a>
    cd96:	0039      	movs	r1, r7
    cd98:	0018      	movs	r0, r3
    cd9a:	f7fe fe8b 	bl	bab4 <__udivsi3>
    cd9e:	9b01      	ldr	r3, [sp, #4]
    cda0:	0005      	movs	r5, r0
    cda2:	4343      	muls	r3, r0
    cda4:	0039      	movs	r1, r7
    cda6:	4650      	mov	r0, sl
    cda8:	9304      	str	r3, [sp, #16]
    cdaa:	f7fe ff09 	bl	bbc0 <__aeabi_uidivmod>
    cdae:	9804      	ldr	r0, [sp, #16]
    cdb0:	040b      	lsls	r3, r1, #16
    cdb2:	0c31      	lsrs	r1, r6, #16
    cdb4:	4319      	orrs	r1, r3
    cdb6:	4288      	cmp	r0, r1
    cdb8:	d909      	bls.n	cdce <__aeabi_ddiv+0x342>
    cdba:	4441      	add	r1, r8
    cdbc:	1e6b      	subs	r3, r5, #1
    cdbe:	4588      	cmp	r8, r1
    cdc0:	d900      	bls.n	cdc4 <__aeabi_ddiv+0x338>
    cdc2:	e107      	b.n	cfd4 <__aeabi_ddiv+0x548>
    cdc4:	4288      	cmp	r0, r1
    cdc6:	d800      	bhi.n	cdca <__aeabi_ddiv+0x33e>
    cdc8:	e104      	b.n	cfd4 <__aeabi_ddiv+0x548>
    cdca:	3d02      	subs	r5, #2
    cdcc:	4441      	add	r1, r8
    cdce:	9b04      	ldr	r3, [sp, #16]
    cdd0:	1acb      	subs	r3, r1, r3
    cdd2:	0018      	movs	r0, r3
    cdd4:	0039      	movs	r1, r7
    cdd6:	9304      	str	r3, [sp, #16]
    cdd8:	f7fe fe6c 	bl	bab4 <__udivsi3>
    cddc:	9b01      	ldr	r3, [sp, #4]
    cdde:	4682      	mov	sl, r0
    cde0:	4343      	muls	r3, r0
    cde2:	0039      	movs	r1, r7
    cde4:	9804      	ldr	r0, [sp, #16]
    cde6:	9301      	str	r3, [sp, #4]
    cde8:	f7fe feea 	bl	bbc0 <__aeabi_uidivmod>
    cdec:	9801      	ldr	r0, [sp, #4]
    cdee:	040b      	lsls	r3, r1, #16
    cdf0:	0431      	lsls	r1, r6, #16
    cdf2:	0c09      	lsrs	r1, r1, #16
    cdf4:	4319      	orrs	r1, r3
    cdf6:	4288      	cmp	r0, r1
    cdf8:	d90d      	bls.n	ce16 <__aeabi_ddiv+0x38a>
    cdfa:	4653      	mov	r3, sl
    cdfc:	4441      	add	r1, r8
    cdfe:	3b01      	subs	r3, #1
    ce00:	4588      	cmp	r8, r1
    ce02:	d900      	bls.n	ce06 <__aeabi_ddiv+0x37a>
    ce04:	e0e8      	b.n	cfd8 <__aeabi_ddiv+0x54c>
    ce06:	4288      	cmp	r0, r1
    ce08:	d800      	bhi.n	ce0c <__aeabi_ddiv+0x380>
    ce0a:	e0e5      	b.n	cfd8 <__aeabi_ddiv+0x54c>
    ce0c:	2302      	movs	r3, #2
    ce0e:	425b      	negs	r3, r3
    ce10:	469c      	mov	ip, r3
    ce12:	4441      	add	r1, r8
    ce14:	44e2      	add	sl, ip
    ce16:	9b01      	ldr	r3, [sp, #4]
    ce18:	042d      	lsls	r5, r5, #16
    ce1a:	1ace      	subs	r6, r1, r3
    ce1c:	4651      	mov	r1, sl
    ce1e:	4329      	orrs	r1, r5
    ce20:	9d05      	ldr	r5, [sp, #20]
    ce22:	464f      	mov	r7, r9
    ce24:	002a      	movs	r2, r5
    ce26:	040b      	lsls	r3, r1, #16
    ce28:	0c08      	lsrs	r0, r1, #16
    ce2a:	0c1b      	lsrs	r3, r3, #16
    ce2c:	435a      	muls	r2, r3
    ce2e:	4345      	muls	r5, r0
    ce30:	437b      	muls	r3, r7
    ce32:	4378      	muls	r0, r7
    ce34:	195b      	adds	r3, r3, r5
    ce36:	0c17      	lsrs	r7, r2, #16
    ce38:	18fb      	adds	r3, r7, r3
    ce3a:	429d      	cmp	r5, r3
    ce3c:	d903      	bls.n	ce46 <__aeabi_ddiv+0x3ba>
    ce3e:	2580      	movs	r5, #128	; 0x80
    ce40:	026d      	lsls	r5, r5, #9
    ce42:	46ac      	mov	ip, r5
    ce44:	4460      	add	r0, ip
    ce46:	0c1d      	lsrs	r5, r3, #16
    ce48:	0412      	lsls	r2, r2, #16
    ce4a:	041b      	lsls	r3, r3, #16
    ce4c:	0c12      	lsrs	r2, r2, #16
    ce4e:	1828      	adds	r0, r5, r0
    ce50:	189b      	adds	r3, r3, r2
    ce52:	4286      	cmp	r6, r0
    ce54:	d200      	bcs.n	ce58 <__aeabi_ddiv+0x3cc>
    ce56:	e093      	b.n	cf80 <__aeabi_ddiv+0x4f4>
    ce58:	d100      	bne.n	ce5c <__aeabi_ddiv+0x3d0>
    ce5a:	e08e      	b.n	cf7a <__aeabi_ddiv+0x4ee>
    ce5c:	2301      	movs	r3, #1
    ce5e:	4319      	orrs	r1, r3
    ce60:	4ba0      	ldr	r3, [pc, #640]	; (d0e4 <__aeabi_ddiv+0x658>)
    ce62:	18e3      	adds	r3, r4, r3
    ce64:	2b00      	cmp	r3, #0
    ce66:	dc00      	bgt.n	ce6a <__aeabi_ddiv+0x3de>
    ce68:	e099      	b.n	cf9e <__aeabi_ddiv+0x512>
    ce6a:	074a      	lsls	r2, r1, #29
    ce6c:	d000      	beq.n	ce70 <__aeabi_ddiv+0x3e4>
    ce6e:	e09e      	b.n	cfae <__aeabi_ddiv+0x522>
    ce70:	465a      	mov	r2, fp
    ce72:	01d2      	lsls	r2, r2, #7
    ce74:	d506      	bpl.n	ce84 <__aeabi_ddiv+0x3f8>
    ce76:	465a      	mov	r2, fp
    ce78:	4b9b      	ldr	r3, [pc, #620]	; (d0e8 <__aeabi_ddiv+0x65c>)
    ce7a:	401a      	ands	r2, r3
    ce7c:	2380      	movs	r3, #128	; 0x80
    ce7e:	4693      	mov	fp, r2
    ce80:	00db      	lsls	r3, r3, #3
    ce82:	18e3      	adds	r3, r4, r3
    ce84:	4a99      	ldr	r2, [pc, #612]	; (d0ec <__aeabi_ddiv+0x660>)
    ce86:	4293      	cmp	r3, r2
    ce88:	dd68      	ble.n	cf5c <__aeabi_ddiv+0x4d0>
    ce8a:	2301      	movs	r3, #1
    ce8c:	9a02      	ldr	r2, [sp, #8]
    ce8e:	4c98      	ldr	r4, [pc, #608]	; (d0f0 <__aeabi_ddiv+0x664>)
    ce90:	401a      	ands	r2, r3
    ce92:	2300      	movs	r3, #0
    ce94:	4694      	mov	ip, r2
    ce96:	4698      	mov	r8, r3
    ce98:	2200      	movs	r2, #0
    ce9a:	e6c5      	b.n	cc28 <__aeabi_ddiv+0x19c>
    ce9c:	2280      	movs	r2, #128	; 0x80
    ce9e:	464b      	mov	r3, r9
    cea0:	0312      	lsls	r2, r2, #12
    cea2:	4213      	tst	r3, r2
    cea4:	d00a      	beq.n	cebc <__aeabi_ddiv+0x430>
    cea6:	465b      	mov	r3, fp
    cea8:	4213      	tst	r3, r2
    ceaa:	d106      	bne.n	ceba <__aeabi_ddiv+0x42e>
    ceac:	431a      	orrs	r2, r3
    ceae:	0312      	lsls	r2, r2, #12
    ceb0:	0b12      	lsrs	r2, r2, #12
    ceb2:	46ac      	mov	ip, r5
    ceb4:	4688      	mov	r8, r1
    ceb6:	4c8e      	ldr	r4, [pc, #568]	; (d0f0 <__aeabi_ddiv+0x664>)
    ceb8:	e6b6      	b.n	cc28 <__aeabi_ddiv+0x19c>
    ceba:	464b      	mov	r3, r9
    cebc:	431a      	orrs	r2, r3
    cebe:	0312      	lsls	r2, r2, #12
    cec0:	0b12      	lsrs	r2, r2, #12
    cec2:	46bc      	mov	ip, r7
    cec4:	4c8a      	ldr	r4, [pc, #552]	; (d0f0 <__aeabi_ddiv+0x664>)
    cec6:	e6af      	b.n	cc28 <__aeabi_ddiv+0x19c>
    cec8:	0003      	movs	r3, r0
    ceca:	465a      	mov	r2, fp
    cecc:	3b28      	subs	r3, #40	; 0x28
    cece:	409a      	lsls	r2, r3
    ced0:	2300      	movs	r3, #0
    ced2:	4691      	mov	r9, r2
    ced4:	4698      	mov	r8, r3
    ced6:	e657      	b.n	cb88 <__aeabi_ddiv+0xfc>
    ced8:	4658      	mov	r0, fp
    ceda:	f001 f94b 	bl	e174 <__clzsi2>
    cede:	3020      	adds	r0, #32
    cee0:	e640      	b.n	cb64 <__aeabi_ddiv+0xd8>
    cee2:	0003      	movs	r3, r0
    cee4:	4652      	mov	r2, sl
    cee6:	3b28      	subs	r3, #40	; 0x28
    cee8:	409a      	lsls	r2, r3
    ceea:	2100      	movs	r1, #0
    ceec:	4693      	mov	fp, r2
    ceee:	e677      	b.n	cbe0 <__aeabi_ddiv+0x154>
    cef0:	f001 f940 	bl	e174 <__clzsi2>
    cef4:	3020      	adds	r0, #32
    cef6:	e65f      	b.n	cbb8 <__aeabi_ddiv+0x12c>
    cef8:	4588      	cmp	r8, r1
    cefa:	d200      	bcs.n	cefe <__aeabi_ddiv+0x472>
    cefc:	e6c7      	b.n	cc8e <__aeabi_ddiv+0x202>
    cefe:	464b      	mov	r3, r9
    cf00:	07de      	lsls	r6, r3, #31
    cf02:	085d      	lsrs	r5, r3, #1
    cf04:	4643      	mov	r3, r8
    cf06:	085b      	lsrs	r3, r3, #1
    cf08:	431e      	orrs	r6, r3
    cf0a:	4643      	mov	r3, r8
    cf0c:	07db      	lsls	r3, r3, #31
    cf0e:	469a      	mov	sl, r3
    cf10:	e6c2      	b.n	cc98 <__aeabi_ddiv+0x20c>
    cf12:	2500      	movs	r5, #0
    cf14:	4592      	cmp	sl, r2
    cf16:	d300      	bcc.n	cf1a <__aeabi_ddiv+0x48e>
    cf18:	e733      	b.n	cd82 <__aeabi_ddiv+0x2f6>
    cf1a:	9e03      	ldr	r6, [sp, #12]
    cf1c:	4659      	mov	r1, fp
    cf1e:	46b4      	mov	ip, r6
    cf20:	44e2      	add	sl, ip
    cf22:	45b2      	cmp	sl, r6
    cf24:	41ad      	sbcs	r5, r5
    cf26:	426d      	negs	r5, r5
    cf28:	4445      	add	r5, r8
    cf2a:	18eb      	adds	r3, r5, r3
    cf2c:	3901      	subs	r1, #1
    cf2e:	4598      	cmp	r8, r3
    cf30:	d207      	bcs.n	cf42 <__aeabi_ddiv+0x4b6>
    cf32:	4298      	cmp	r0, r3
    cf34:	d900      	bls.n	cf38 <__aeabi_ddiv+0x4ac>
    cf36:	e07f      	b.n	d038 <__aeabi_ddiv+0x5ac>
    cf38:	d100      	bne.n	cf3c <__aeabi_ddiv+0x4b0>
    cf3a:	e0bc      	b.n	d0b6 <__aeabi_ddiv+0x62a>
    cf3c:	1a1d      	subs	r5, r3, r0
    cf3e:	468b      	mov	fp, r1
    cf40:	e71f      	b.n	cd82 <__aeabi_ddiv+0x2f6>
    cf42:	4598      	cmp	r8, r3
    cf44:	d1fa      	bne.n	cf3c <__aeabi_ddiv+0x4b0>
    cf46:	9d03      	ldr	r5, [sp, #12]
    cf48:	4555      	cmp	r5, sl
    cf4a:	d9f2      	bls.n	cf32 <__aeabi_ddiv+0x4a6>
    cf4c:	4643      	mov	r3, r8
    cf4e:	468b      	mov	fp, r1
    cf50:	1a1d      	subs	r5, r3, r0
    cf52:	e716      	b.n	cd82 <__aeabi_ddiv+0x2f6>
    cf54:	469b      	mov	fp, r3
    cf56:	e6ca      	b.n	ccee <__aeabi_ddiv+0x262>
    cf58:	0015      	movs	r5, r2
    cf5a:	e6e7      	b.n	cd2c <__aeabi_ddiv+0x2a0>
    cf5c:	465a      	mov	r2, fp
    cf5e:	08c9      	lsrs	r1, r1, #3
    cf60:	0752      	lsls	r2, r2, #29
    cf62:	430a      	orrs	r2, r1
    cf64:	055b      	lsls	r3, r3, #21
    cf66:	4690      	mov	r8, r2
    cf68:	0d5c      	lsrs	r4, r3, #21
    cf6a:	465a      	mov	r2, fp
    cf6c:	2301      	movs	r3, #1
    cf6e:	9902      	ldr	r1, [sp, #8]
    cf70:	0252      	lsls	r2, r2, #9
    cf72:	4019      	ands	r1, r3
    cf74:	0b12      	lsrs	r2, r2, #12
    cf76:	468c      	mov	ip, r1
    cf78:	e656      	b.n	cc28 <__aeabi_ddiv+0x19c>
    cf7a:	2b00      	cmp	r3, #0
    cf7c:	d100      	bne.n	cf80 <__aeabi_ddiv+0x4f4>
    cf7e:	e76f      	b.n	ce60 <__aeabi_ddiv+0x3d4>
    cf80:	4446      	add	r6, r8
    cf82:	1e4a      	subs	r2, r1, #1
    cf84:	45b0      	cmp	r8, r6
    cf86:	d929      	bls.n	cfdc <__aeabi_ddiv+0x550>
    cf88:	0011      	movs	r1, r2
    cf8a:	4286      	cmp	r6, r0
    cf8c:	d000      	beq.n	cf90 <__aeabi_ddiv+0x504>
    cf8e:	e765      	b.n	ce5c <__aeabi_ddiv+0x3d0>
    cf90:	9a03      	ldr	r2, [sp, #12]
    cf92:	4293      	cmp	r3, r2
    cf94:	d000      	beq.n	cf98 <__aeabi_ddiv+0x50c>
    cf96:	e761      	b.n	ce5c <__aeabi_ddiv+0x3d0>
    cf98:	e762      	b.n	ce60 <__aeabi_ddiv+0x3d4>
    cf9a:	2101      	movs	r1, #1
    cf9c:	4249      	negs	r1, r1
    cf9e:	2001      	movs	r0, #1
    cfa0:	1ac2      	subs	r2, r0, r3
    cfa2:	2a38      	cmp	r2, #56	; 0x38
    cfa4:	dd21      	ble.n	cfea <__aeabi_ddiv+0x55e>
    cfa6:	9b02      	ldr	r3, [sp, #8]
    cfa8:	4003      	ands	r3, r0
    cfaa:	469c      	mov	ip, r3
    cfac:	e638      	b.n	cc20 <__aeabi_ddiv+0x194>
    cfae:	220f      	movs	r2, #15
    cfb0:	400a      	ands	r2, r1
    cfb2:	2a04      	cmp	r2, #4
    cfb4:	d100      	bne.n	cfb8 <__aeabi_ddiv+0x52c>
    cfb6:	e75b      	b.n	ce70 <__aeabi_ddiv+0x3e4>
    cfb8:	000a      	movs	r2, r1
    cfba:	1d11      	adds	r1, r2, #4
    cfbc:	4291      	cmp	r1, r2
    cfbe:	4192      	sbcs	r2, r2
    cfc0:	4252      	negs	r2, r2
    cfc2:	4493      	add	fp, r2
    cfc4:	e754      	b.n	ce70 <__aeabi_ddiv+0x3e4>
    cfc6:	4b47      	ldr	r3, [pc, #284]	; (d0e4 <__aeabi_ddiv+0x658>)
    cfc8:	18e3      	adds	r3, r4, r3
    cfca:	2b00      	cmp	r3, #0
    cfcc:	dde5      	ble.n	cf9a <__aeabi_ddiv+0x50e>
    cfce:	2201      	movs	r2, #1
    cfd0:	4252      	negs	r2, r2
    cfd2:	e7f2      	b.n	cfba <__aeabi_ddiv+0x52e>
    cfd4:	001d      	movs	r5, r3
    cfd6:	e6fa      	b.n	cdce <__aeabi_ddiv+0x342>
    cfd8:	469a      	mov	sl, r3
    cfda:	e71c      	b.n	ce16 <__aeabi_ddiv+0x38a>
    cfdc:	42b0      	cmp	r0, r6
    cfde:	d839      	bhi.n	d054 <__aeabi_ddiv+0x5c8>
    cfe0:	d06e      	beq.n	d0c0 <__aeabi_ddiv+0x634>
    cfe2:	0011      	movs	r1, r2
    cfe4:	e73a      	b.n	ce5c <__aeabi_ddiv+0x3d0>
    cfe6:	9302      	str	r3, [sp, #8]
    cfe8:	e73a      	b.n	ce60 <__aeabi_ddiv+0x3d4>
    cfea:	2a1f      	cmp	r2, #31
    cfec:	dc3c      	bgt.n	d068 <__aeabi_ddiv+0x5dc>
    cfee:	2320      	movs	r3, #32
    cff0:	1a9b      	subs	r3, r3, r2
    cff2:	000c      	movs	r4, r1
    cff4:	4658      	mov	r0, fp
    cff6:	4099      	lsls	r1, r3
    cff8:	4098      	lsls	r0, r3
    cffa:	1e4b      	subs	r3, r1, #1
    cffc:	4199      	sbcs	r1, r3
    cffe:	465b      	mov	r3, fp
    d000:	40d4      	lsrs	r4, r2
    d002:	40d3      	lsrs	r3, r2
    d004:	4320      	orrs	r0, r4
    d006:	4308      	orrs	r0, r1
    d008:	001a      	movs	r2, r3
    d00a:	0743      	lsls	r3, r0, #29
    d00c:	d009      	beq.n	d022 <__aeabi_ddiv+0x596>
    d00e:	230f      	movs	r3, #15
    d010:	4003      	ands	r3, r0
    d012:	2b04      	cmp	r3, #4
    d014:	d005      	beq.n	d022 <__aeabi_ddiv+0x596>
    d016:	0001      	movs	r1, r0
    d018:	1d08      	adds	r0, r1, #4
    d01a:	4288      	cmp	r0, r1
    d01c:	419b      	sbcs	r3, r3
    d01e:	425b      	negs	r3, r3
    d020:	18d2      	adds	r2, r2, r3
    d022:	0213      	lsls	r3, r2, #8
    d024:	d53a      	bpl.n	d09c <__aeabi_ddiv+0x610>
    d026:	2301      	movs	r3, #1
    d028:	9a02      	ldr	r2, [sp, #8]
    d02a:	2401      	movs	r4, #1
    d02c:	401a      	ands	r2, r3
    d02e:	2300      	movs	r3, #0
    d030:	4694      	mov	ip, r2
    d032:	4698      	mov	r8, r3
    d034:	2200      	movs	r2, #0
    d036:	e5f7      	b.n	cc28 <__aeabi_ddiv+0x19c>
    d038:	2102      	movs	r1, #2
    d03a:	4249      	negs	r1, r1
    d03c:	468c      	mov	ip, r1
    d03e:	9d03      	ldr	r5, [sp, #12]
    d040:	44e3      	add	fp, ip
    d042:	46ac      	mov	ip, r5
    d044:	44e2      	add	sl, ip
    d046:	45aa      	cmp	sl, r5
    d048:	41ad      	sbcs	r5, r5
    d04a:	426d      	negs	r5, r5
    d04c:	4445      	add	r5, r8
    d04e:	18ed      	adds	r5, r5, r3
    d050:	1a2d      	subs	r5, r5, r0
    d052:	e696      	b.n	cd82 <__aeabi_ddiv+0x2f6>
    d054:	1e8a      	subs	r2, r1, #2
    d056:	9903      	ldr	r1, [sp, #12]
    d058:	004d      	lsls	r5, r1, #1
    d05a:	428d      	cmp	r5, r1
    d05c:	4189      	sbcs	r1, r1
    d05e:	4249      	negs	r1, r1
    d060:	4441      	add	r1, r8
    d062:	1876      	adds	r6, r6, r1
    d064:	9503      	str	r5, [sp, #12]
    d066:	e78f      	b.n	cf88 <__aeabi_ddiv+0x4fc>
    d068:	201f      	movs	r0, #31
    d06a:	4240      	negs	r0, r0
    d06c:	1ac3      	subs	r3, r0, r3
    d06e:	4658      	mov	r0, fp
    d070:	40d8      	lsrs	r0, r3
    d072:	0003      	movs	r3, r0
    d074:	2a20      	cmp	r2, #32
    d076:	d028      	beq.n	d0ca <__aeabi_ddiv+0x63e>
    d078:	2040      	movs	r0, #64	; 0x40
    d07a:	465d      	mov	r5, fp
    d07c:	1a82      	subs	r2, r0, r2
    d07e:	4095      	lsls	r5, r2
    d080:	4329      	orrs	r1, r5
    d082:	1e4a      	subs	r2, r1, #1
    d084:	4191      	sbcs	r1, r2
    d086:	4319      	orrs	r1, r3
    d088:	2307      	movs	r3, #7
    d08a:	2200      	movs	r2, #0
    d08c:	400b      	ands	r3, r1
    d08e:	d009      	beq.n	d0a4 <__aeabi_ddiv+0x618>
    d090:	230f      	movs	r3, #15
    d092:	2200      	movs	r2, #0
    d094:	400b      	ands	r3, r1
    d096:	0008      	movs	r0, r1
    d098:	2b04      	cmp	r3, #4
    d09a:	d1bd      	bne.n	d018 <__aeabi_ddiv+0x58c>
    d09c:	0001      	movs	r1, r0
    d09e:	0753      	lsls	r3, r2, #29
    d0a0:	0252      	lsls	r2, r2, #9
    d0a2:	0b12      	lsrs	r2, r2, #12
    d0a4:	08c9      	lsrs	r1, r1, #3
    d0a6:	4319      	orrs	r1, r3
    d0a8:	2301      	movs	r3, #1
    d0aa:	4688      	mov	r8, r1
    d0ac:	9902      	ldr	r1, [sp, #8]
    d0ae:	2400      	movs	r4, #0
    d0b0:	4019      	ands	r1, r3
    d0b2:	468c      	mov	ip, r1
    d0b4:	e5b8      	b.n	cc28 <__aeabi_ddiv+0x19c>
    d0b6:	4552      	cmp	r2, sl
    d0b8:	d8be      	bhi.n	d038 <__aeabi_ddiv+0x5ac>
    d0ba:	468b      	mov	fp, r1
    d0bc:	2500      	movs	r5, #0
    d0be:	e660      	b.n	cd82 <__aeabi_ddiv+0x2f6>
    d0c0:	9d03      	ldr	r5, [sp, #12]
    d0c2:	429d      	cmp	r5, r3
    d0c4:	d3c6      	bcc.n	d054 <__aeabi_ddiv+0x5c8>
    d0c6:	0011      	movs	r1, r2
    d0c8:	e762      	b.n	cf90 <__aeabi_ddiv+0x504>
    d0ca:	2500      	movs	r5, #0
    d0cc:	e7d8      	b.n	d080 <__aeabi_ddiv+0x5f4>
    d0ce:	2280      	movs	r2, #128	; 0x80
    d0d0:	465b      	mov	r3, fp
    d0d2:	0312      	lsls	r2, r2, #12
    d0d4:	431a      	orrs	r2, r3
    d0d6:	9b01      	ldr	r3, [sp, #4]
    d0d8:	0312      	lsls	r2, r2, #12
    d0da:	0b12      	lsrs	r2, r2, #12
    d0dc:	469c      	mov	ip, r3
    d0de:	4688      	mov	r8, r1
    d0e0:	4c03      	ldr	r4, [pc, #12]	; (d0f0 <__aeabi_ddiv+0x664>)
    d0e2:	e5a1      	b.n	cc28 <__aeabi_ddiv+0x19c>
    d0e4:	000003ff 	.word	0x000003ff
    d0e8:	feffffff 	.word	0xfeffffff
    d0ec:	000007fe 	.word	0x000007fe
    d0f0:	000007ff 	.word	0x000007ff

0000d0f4 <__eqdf2>:
    d0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0f6:	464f      	mov	r7, r9
    d0f8:	4646      	mov	r6, r8
    d0fa:	46d6      	mov	lr, sl
    d0fc:	005c      	lsls	r4, r3, #1
    d0fe:	b5c0      	push	{r6, r7, lr}
    d100:	031f      	lsls	r7, r3, #12
    d102:	0fdb      	lsrs	r3, r3, #31
    d104:	469a      	mov	sl, r3
    d106:	4b17      	ldr	r3, [pc, #92]	; (d164 <__eqdf2+0x70>)
    d108:	030e      	lsls	r6, r1, #12
    d10a:	004d      	lsls	r5, r1, #1
    d10c:	4684      	mov	ip, r0
    d10e:	4680      	mov	r8, r0
    d110:	0b36      	lsrs	r6, r6, #12
    d112:	0d6d      	lsrs	r5, r5, #21
    d114:	0fc9      	lsrs	r1, r1, #31
    d116:	4691      	mov	r9, r2
    d118:	0b3f      	lsrs	r7, r7, #12
    d11a:	0d64      	lsrs	r4, r4, #21
    d11c:	2001      	movs	r0, #1
    d11e:	429d      	cmp	r5, r3
    d120:	d008      	beq.n	d134 <__eqdf2+0x40>
    d122:	429c      	cmp	r4, r3
    d124:	d001      	beq.n	d12a <__eqdf2+0x36>
    d126:	42a5      	cmp	r5, r4
    d128:	d00b      	beq.n	d142 <__eqdf2+0x4e>
    d12a:	bc1c      	pop	{r2, r3, r4}
    d12c:	4690      	mov	r8, r2
    d12e:	4699      	mov	r9, r3
    d130:	46a2      	mov	sl, r4
    d132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d134:	4663      	mov	r3, ip
    d136:	4333      	orrs	r3, r6
    d138:	d1f7      	bne.n	d12a <__eqdf2+0x36>
    d13a:	42ac      	cmp	r4, r5
    d13c:	d1f5      	bne.n	d12a <__eqdf2+0x36>
    d13e:	433a      	orrs	r2, r7
    d140:	d1f3      	bne.n	d12a <__eqdf2+0x36>
    d142:	2001      	movs	r0, #1
    d144:	42be      	cmp	r6, r7
    d146:	d1f0      	bne.n	d12a <__eqdf2+0x36>
    d148:	45c8      	cmp	r8, r9
    d14a:	d1ee      	bne.n	d12a <__eqdf2+0x36>
    d14c:	4551      	cmp	r1, sl
    d14e:	d007      	beq.n	d160 <__eqdf2+0x6c>
    d150:	2d00      	cmp	r5, #0
    d152:	d1ea      	bne.n	d12a <__eqdf2+0x36>
    d154:	4663      	mov	r3, ip
    d156:	431e      	orrs	r6, r3
    d158:	0030      	movs	r0, r6
    d15a:	1e46      	subs	r6, r0, #1
    d15c:	41b0      	sbcs	r0, r6
    d15e:	e7e4      	b.n	d12a <__eqdf2+0x36>
    d160:	2000      	movs	r0, #0
    d162:	e7e2      	b.n	d12a <__eqdf2+0x36>
    d164:	000007ff 	.word	0x000007ff

0000d168 <__gedf2>:
    d168:	b5f0      	push	{r4, r5, r6, r7, lr}
    d16a:	4645      	mov	r5, r8
    d16c:	46de      	mov	lr, fp
    d16e:	4657      	mov	r7, sl
    d170:	464e      	mov	r6, r9
    d172:	b5e0      	push	{r5, r6, r7, lr}
    d174:	031f      	lsls	r7, r3, #12
    d176:	0b3d      	lsrs	r5, r7, #12
    d178:	4f2c      	ldr	r7, [pc, #176]	; (d22c <__gedf2+0xc4>)
    d17a:	030e      	lsls	r6, r1, #12
    d17c:	004c      	lsls	r4, r1, #1
    d17e:	46ab      	mov	fp, r5
    d180:	005d      	lsls	r5, r3, #1
    d182:	4684      	mov	ip, r0
    d184:	0b36      	lsrs	r6, r6, #12
    d186:	0d64      	lsrs	r4, r4, #21
    d188:	0fc9      	lsrs	r1, r1, #31
    d18a:	4690      	mov	r8, r2
    d18c:	0d6d      	lsrs	r5, r5, #21
    d18e:	0fdb      	lsrs	r3, r3, #31
    d190:	42bc      	cmp	r4, r7
    d192:	d02a      	beq.n	d1ea <__gedf2+0x82>
    d194:	4f25      	ldr	r7, [pc, #148]	; (d22c <__gedf2+0xc4>)
    d196:	42bd      	cmp	r5, r7
    d198:	d02d      	beq.n	d1f6 <__gedf2+0x8e>
    d19a:	2c00      	cmp	r4, #0
    d19c:	d10f      	bne.n	d1be <__gedf2+0x56>
    d19e:	4330      	orrs	r0, r6
    d1a0:	0007      	movs	r7, r0
    d1a2:	4681      	mov	r9, r0
    d1a4:	4278      	negs	r0, r7
    d1a6:	4178      	adcs	r0, r7
    d1a8:	b2c0      	uxtb	r0, r0
    d1aa:	2d00      	cmp	r5, #0
    d1ac:	d117      	bne.n	d1de <__gedf2+0x76>
    d1ae:	465f      	mov	r7, fp
    d1b0:	433a      	orrs	r2, r7
    d1b2:	d114      	bne.n	d1de <__gedf2+0x76>
    d1b4:	464b      	mov	r3, r9
    d1b6:	2000      	movs	r0, #0
    d1b8:	2b00      	cmp	r3, #0
    d1ba:	d00a      	beq.n	d1d2 <__gedf2+0x6a>
    d1bc:	e006      	b.n	d1cc <__gedf2+0x64>
    d1be:	2d00      	cmp	r5, #0
    d1c0:	d102      	bne.n	d1c8 <__gedf2+0x60>
    d1c2:	4658      	mov	r0, fp
    d1c4:	4302      	orrs	r2, r0
    d1c6:	d001      	beq.n	d1cc <__gedf2+0x64>
    d1c8:	4299      	cmp	r1, r3
    d1ca:	d018      	beq.n	d1fe <__gedf2+0x96>
    d1cc:	4248      	negs	r0, r1
    d1ce:	2101      	movs	r1, #1
    d1d0:	4308      	orrs	r0, r1
    d1d2:	bc3c      	pop	{r2, r3, r4, r5}
    d1d4:	4690      	mov	r8, r2
    d1d6:	4699      	mov	r9, r3
    d1d8:	46a2      	mov	sl, r4
    d1da:	46ab      	mov	fp, r5
    d1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1de:	2800      	cmp	r0, #0
    d1e0:	d0f2      	beq.n	d1c8 <__gedf2+0x60>
    d1e2:	2001      	movs	r0, #1
    d1e4:	3b01      	subs	r3, #1
    d1e6:	4318      	orrs	r0, r3
    d1e8:	e7f3      	b.n	d1d2 <__gedf2+0x6a>
    d1ea:	0037      	movs	r7, r6
    d1ec:	4307      	orrs	r7, r0
    d1ee:	d0d1      	beq.n	d194 <__gedf2+0x2c>
    d1f0:	2002      	movs	r0, #2
    d1f2:	4240      	negs	r0, r0
    d1f4:	e7ed      	b.n	d1d2 <__gedf2+0x6a>
    d1f6:	465f      	mov	r7, fp
    d1f8:	4317      	orrs	r7, r2
    d1fa:	d0ce      	beq.n	d19a <__gedf2+0x32>
    d1fc:	e7f8      	b.n	d1f0 <__gedf2+0x88>
    d1fe:	42ac      	cmp	r4, r5
    d200:	dce4      	bgt.n	d1cc <__gedf2+0x64>
    d202:	da03      	bge.n	d20c <__gedf2+0xa4>
    d204:	1e48      	subs	r0, r1, #1
    d206:	2101      	movs	r1, #1
    d208:	4308      	orrs	r0, r1
    d20a:	e7e2      	b.n	d1d2 <__gedf2+0x6a>
    d20c:	455e      	cmp	r6, fp
    d20e:	d8dd      	bhi.n	d1cc <__gedf2+0x64>
    d210:	d006      	beq.n	d220 <__gedf2+0xb8>
    d212:	2000      	movs	r0, #0
    d214:	455e      	cmp	r6, fp
    d216:	d2dc      	bcs.n	d1d2 <__gedf2+0x6a>
    d218:	2301      	movs	r3, #1
    d21a:	1e48      	subs	r0, r1, #1
    d21c:	4318      	orrs	r0, r3
    d21e:	e7d8      	b.n	d1d2 <__gedf2+0x6a>
    d220:	45c4      	cmp	ip, r8
    d222:	d8d3      	bhi.n	d1cc <__gedf2+0x64>
    d224:	2000      	movs	r0, #0
    d226:	45c4      	cmp	ip, r8
    d228:	d3f6      	bcc.n	d218 <__gedf2+0xb0>
    d22a:	e7d2      	b.n	d1d2 <__gedf2+0x6a>
    d22c:	000007ff 	.word	0x000007ff

0000d230 <__ledf2>:
    d230:	b5f0      	push	{r4, r5, r6, r7, lr}
    d232:	464e      	mov	r6, r9
    d234:	4645      	mov	r5, r8
    d236:	46de      	mov	lr, fp
    d238:	4657      	mov	r7, sl
    d23a:	005c      	lsls	r4, r3, #1
    d23c:	b5e0      	push	{r5, r6, r7, lr}
    d23e:	031f      	lsls	r7, r3, #12
    d240:	0fdb      	lsrs	r3, r3, #31
    d242:	4699      	mov	r9, r3
    d244:	4b2a      	ldr	r3, [pc, #168]	; (d2f0 <__ledf2+0xc0>)
    d246:	030e      	lsls	r6, r1, #12
    d248:	004d      	lsls	r5, r1, #1
    d24a:	0fc9      	lsrs	r1, r1, #31
    d24c:	4684      	mov	ip, r0
    d24e:	0b36      	lsrs	r6, r6, #12
    d250:	0d6d      	lsrs	r5, r5, #21
    d252:	468b      	mov	fp, r1
    d254:	4690      	mov	r8, r2
    d256:	0b3f      	lsrs	r7, r7, #12
    d258:	0d64      	lsrs	r4, r4, #21
    d25a:	429d      	cmp	r5, r3
    d25c:	d020      	beq.n	d2a0 <__ledf2+0x70>
    d25e:	4b24      	ldr	r3, [pc, #144]	; (d2f0 <__ledf2+0xc0>)
    d260:	429c      	cmp	r4, r3
    d262:	d022      	beq.n	d2aa <__ledf2+0x7a>
    d264:	2d00      	cmp	r5, #0
    d266:	d112      	bne.n	d28e <__ledf2+0x5e>
    d268:	4330      	orrs	r0, r6
    d26a:	4243      	negs	r3, r0
    d26c:	4143      	adcs	r3, r0
    d26e:	b2db      	uxtb	r3, r3
    d270:	2c00      	cmp	r4, #0
    d272:	d01f      	beq.n	d2b4 <__ledf2+0x84>
    d274:	2b00      	cmp	r3, #0
    d276:	d00c      	beq.n	d292 <__ledf2+0x62>
    d278:	464b      	mov	r3, r9
    d27a:	2001      	movs	r0, #1
    d27c:	3b01      	subs	r3, #1
    d27e:	4303      	orrs	r3, r0
    d280:	0018      	movs	r0, r3
    d282:	bc3c      	pop	{r2, r3, r4, r5}
    d284:	4690      	mov	r8, r2
    d286:	4699      	mov	r9, r3
    d288:	46a2      	mov	sl, r4
    d28a:	46ab      	mov	fp, r5
    d28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d28e:	2c00      	cmp	r4, #0
    d290:	d016      	beq.n	d2c0 <__ledf2+0x90>
    d292:	45cb      	cmp	fp, r9
    d294:	d017      	beq.n	d2c6 <__ledf2+0x96>
    d296:	465b      	mov	r3, fp
    d298:	4259      	negs	r1, r3
    d29a:	2301      	movs	r3, #1
    d29c:	430b      	orrs	r3, r1
    d29e:	e7ef      	b.n	d280 <__ledf2+0x50>
    d2a0:	0031      	movs	r1, r6
    d2a2:	2302      	movs	r3, #2
    d2a4:	4301      	orrs	r1, r0
    d2a6:	d1eb      	bne.n	d280 <__ledf2+0x50>
    d2a8:	e7d9      	b.n	d25e <__ledf2+0x2e>
    d2aa:	0039      	movs	r1, r7
    d2ac:	2302      	movs	r3, #2
    d2ae:	4311      	orrs	r1, r2
    d2b0:	d1e6      	bne.n	d280 <__ledf2+0x50>
    d2b2:	e7d7      	b.n	d264 <__ledf2+0x34>
    d2b4:	433a      	orrs	r2, r7
    d2b6:	d1dd      	bne.n	d274 <__ledf2+0x44>
    d2b8:	2300      	movs	r3, #0
    d2ba:	2800      	cmp	r0, #0
    d2bc:	d0e0      	beq.n	d280 <__ledf2+0x50>
    d2be:	e7ea      	b.n	d296 <__ledf2+0x66>
    d2c0:	433a      	orrs	r2, r7
    d2c2:	d1e6      	bne.n	d292 <__ledf2+0x62>
    d2c4:	e7e7      	b.n	d296 <__ledf2+0x66>
    d2c6:	42a5      	cmp	r5, r4
    d2c8:	dce5      	bgt.n	d296 <__ledf2+0x66>
    d2ca:	db05      	blt.n	d2d8 <__ledf2+0xa8>
    d2cc:	42be      	cmp	r6, r7
    d2ce:	d8e2      	bhi.n	d296 <__ledf2+0x66>
    d2d0:	d007      	beq.n	d2e2 <__ledf2+0xb2>
    d2d2:	2300      	movs	r3, #0
    d2d4:	42be      	cmp	r6, r7
    d2d6:	d2d3      	bcs.n	d280 <__ledf2+0x50>
    d2d8:	4659      	mov	r1, fp
    d2da:	2301      	movs	r3, #1
    d2dc:	3901      	subs	r1, #1
    d2de:	430b      	orrs	r3, r1
    d2e0:	e7ce      	b.n	d280 <__ledf2+0x50>
    d2e2:	45c4      	cmp	ip, r8
    d2e4:	d8d7      	bhi.n	d296 <__ledf2+0x66>
    d2e6:	2300      	movs	r3, #0
    d2e8:	45c4      	cmp	ip, r8
    d2ea:	d3f5      	bcc.n	d2d8 <__ledf2+0xa8>
    d2ec:	e7c8      	b.n	d280 <__ledf2+0x50>
    d2ee:	46c0      	nop			; (mov r8, r8)
    d2f0:	000007ff 	.word	0x000007ff

0000d2f4 <__aeabi_dmul>:
    d2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2f6:	4657      	mov	r7, sl
    d2f8:	4645      	mov	r5, r8
    d2fa:	46de      	mov	lr, fp
    d2fc:	464e      	mov	r6, r9
    d2fe:	b5e0      	push	{r5, r6, r7, lr}
    d300:	030c      	lsls	r4, r1, #12
    d302:	4698      	mov	r8, r3
    d304:	004e      	lsls	r6, r1, #1
    d306:	0b23      	lsrs	r3, r4, #12
    d308:	b087      	sub	sp, #28
    d30a:	0007      	movs	r7, r0
    d30c:	4692      	mov	sl, r2
    d30e:	469b      	mov	fp, r3
    d310:	0d76      	lsrs	r6, r6, #21
    d312:	0fcd      	lsrs	r5, r1, #31
    d314:	2e00      	cmp	r6, #0
    d316:	d06b      	beq.n	d3f0 <__aeabi_dmul+0xfc>
    d318:	4b6d      	ldr	r3, [pc, #436]	; (d4d0 <__aeabi_dmul+0x1dc>)
    d31a:	429e      	cmp	r6, r3
    d31c:	d035      	beq.n	d38a <__aeabi_dmul+0x96>
    d31e:	2480      	movs	r4, #128	; 0x80
    d320:	465b      	mov	r3, fp
    d322:	0f42      	lsrs	r2, r0, #29
    d324:	0424      	lsls	r4, r4, #16
    d326:	00db      	lsls	r3, r3, #3
    d328:	4314      	orrs	r4, r2
    d32a:	431c      	orrs	r4, r3
    d32c:	00c3      	lsls	r3, r0, #3
    d32e:	4699      	mov	r9, r3
    d330:	4b68      	ldr	r3, [pc, #416]	; (d4d4 <__aeabi_dmul+0x1e0>)
    d332:	46a3      	mov	fp, r4
    d334:	469c      	mov	ip, r3
    d336:	2300      	movs	r3, #0
    d338:	2700      	movs	r7, #0
    d33a:	4466      	add	r6, ip
    d33c:	9302      	str	r3, [sp, #8]
    d33e:	4643      	mov	r3, r8
    d340:	031c      	lsls	r4, r3, #12
    d342:	005a      	lsls	r2, r3, #1
    d344:	0fdb      	lsrs	r3, r3, #31
    d346:	4650      	mov	r0, sl
    d348:	0b24      	lsrs	r4, r4, #12
    d34a:	0d52      	lsrs	r2, r2, #21
    d34c:	4698      	mov	r8, r3
    d34e:	d100      	bne.n	d352 <__aeabi_dmul+0x5e>
    d350:	e076      	b.n	d440 <__aeabi_dmul+0x14c>
    d352:	4b5f      	ldr	r3, [pc, #380]	; (d4d0 <__aeabi_dmul+0x1dc>)
    d354:	429a      	cmp	r2, r3
    d356:	d06d      	beq.n	d434 <__aeabi_dmul+0x140>
    d358:	2380      	movs	r3, #128	; 0x80
    d35a:	0f41      	lsrs	r1, r0, #29
    d35c:	041b      	lsls	r3, r3, #16
    d35e:	430b      	orrs	r3, r1
    d360:	495c      	ldr	r1, [pc, #368]	; (d4d4 <__aeabi_dmul+0x1e0>)
    d362:	00e4      	lsls	r4, r4, #3
    d364:	468c      	mov	ip, r1
    d366:	431c      	orrs	r4, r3
    d368:	00c3      	lsls	r3, r0, #3
    d36a:	2000      	movs	r0, #0
    d36c:	4462      	add	r2, ip
    d36e:	4641      	mov	r1, r8
    d370:	18b6      	adds	r6, r6, r2
    d372:	4069      	eors	r1, r5
    d374:	1c72      	adds	r2, r6, #1
    d376:	9101      	str	r1, [sp, #4]
    d378:	4694      	mov	ip, r2
    d37a:	4307      	orrs	r7, r0
    d37c:	2f0f      	cmp	r7, #15
    d37e:	d900      	bls.n	d382 <__aeabi_dmul+0x8e>
    d380:	e0b0      	b.n	d4e4 <__aeabi_dmul+0x1f0>
    d382:	4a55      	ldr	r2, [pc, #340]	; (d4d8 <__aeabi_dmul+0x1e4>)
    d384:	00bf      	lsls	r7, r7, #2
    d386:	59d2      	ldr	r2, [r2, r7]
    d388:	4697      	mov	pc, r2
    d38a:	465b      	mov	r3, fp
    d38c:	4303      	orrs	r3, r0
    d38e:	4699      	mov	r9, r3
    d390:	d000      	beq.n	d394 <__aeabi_dmul+0xa0>
    d392:	e087      	b.n	d4a4 <__aeabi_dmul+0x1b0>
    d394:	2300      	movs	r3, #0
    d396:	469b      	mov	fp, r3
    d398:	3302      	adds	r3, #2
    d39a:	2708      	movs	r7, #8
    d39c:	9302      	str	r3, [sp, #8]
    d39e:	e7ce      	b.n	d33e <__aeabi_dmul+0x4a>
    d3a0:	4642      	mov	r2, r8
    d3a2:	9201      	str	r2, [sp, #4]
    d3a4:	2802      	cmp	r0, #2
    d3a6:	d067      	beq.n	d478 <__aeabi_dmul+0x184>
    d3a8:	2803      	cmp	r0, #3
    d3aa:	d100      	bne.n	d3ae <__aeabi_dmul+0xba>
    d3ac:	e20e      	b.n	d7cc <__aeabi_dmul+0x4d8>
    d3ae:	2801      	cmp	r0, #1
    d3b0:	d000      	beq.n	d3b4 <__aeabi_dmul+0xc0>
    d3b2:	e162      	b.n	d67a <__aeabi_dmul+0x386>
    d3b4:	2300      	movs	r3, #0
    d3b6:	2400      	movs	r4, #0
    d3b8:	2200      	movs	r2, #0
    d3ba:	4699      	mov	r9, r3
    d3bc:	9901      	ldr	r1, [sp, #4]
    d3be:	4001      	ands	r1, r0
    d3c0:	b2cd      	uxtb	r5, r1
    d3c2:	2100      	movs	r1, #0
    d3c4:	0312      	lsls	r2, r2, #12
    d3c6:	0d0b      	lsrs	r3, r1, #20
    d3c8:	0b12      	lsrs	r2, r2, #12
    d3ca:	051b      	lsls	r3, r3, #20
    d3cc:	4313      	orrs	r3, r2
    d3ce:	4a43      	ldr	r2, [pc, #268]	; (d4dc <__aeabi_dmul+0x1e8>)
    d3d0:	0524      	lsls	r4, r4, #20
    d3d2:	4013      	ands	r3, r2
    d3d4:	431c      	orrs	r4, r3
    d3d6:	0064      	lsls	r4, r4, #1
    d3d8:	07ed      	lsls	r5, r5, #31
    d3da:	0864      	lsrs	r4, r4, #1
    d3dc:	432c      	orrs	r4, r5
    d3de:	4648      	mov	r0, r9
    d3e0:	0021      	movs	r1, r4
    d3e2:	b007      	add	sp, #28
    d3e4:	bc3c      	pop	{r2, r3, r4, r5}
    d3e6:	4690      	mov	r8, r2
    d3e8:	4699      	mov	r9, r3
    d3ea:	46a2      	mov	sl, r4
    d3ec:	46ab      	mov	fp, r5
    d3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3f0:	4303      	orrs	r3, r0
    d3f2:	4699      	mov	r9, r3
    d3f4:	d04f      	beq.n	d496 <__aeabi_dmul+0x1a2>
    d3f6:	465b      	mov	r3, fp
    d3f8:	2b00      	cmp	r3, #0
    d3fa:	d100      	bne.n	d3fe <__aeabi_dmul+0x10a>
    d3fc:	e189      	b.n	d712 <__aeabi_dmul+0x41e>
    d3fe:	4658      	mov	r0, fp
    d400:	f000 feb8 	bl	e174 <__clzsi2>
    d404:	0003      	movs	r3, r0
    d406:	3b0b      	subs	r3, #11
    d408:	2b1c      	cmp	r3, #28
    d40a:	dd00      	ble.n	d40e <__aeabi_dmul+0x11a>
    d40c:	e17a      	b.n	d704 <__aeabi_dmul+0x410>
    d40e:	221d      	movs	r2, #29
    d410:	1ad3      	subs	r3, r2, r3
    d412:	003a      	movs	r2, r7
    d414:	0001      	movs	r1, r0
    d416:	465c      	mov	r4, fp
    d418:	40da      	lsrs	r2, r3
    d41a:	3908      	subs	r1, #8
    d41c:	408c      	lsls	r4, r1
    d41e:	0013      	movs	r3, r2
    d420:	408f      	lsls	r7, r1
    d422:	4323      	orrs	r3, r4
    d424:	469b      	mov	fp, r3
    d426:	46b9      	mov	r9, r7
    d428:	2300      	movs	r3, #0
    d42a:	4e2d      	ldr	r6, [pc, #180]	; (d4e0 <__aeabi_dmul+0x1ec>)
    d42c:	2700      	movs	r7, #0
    d42e:	1a36      	subs	r6, r6, r0
    d430:	9302      	str	r3, [sp, #8]
    d432:	e784      	b.n	d33e <__aeabi_dmul+0x4a>
    d434:	4653      	mov	r3, sl
    d436:	4323      	orrs	r3, r4
    d438:	d12a      	bne.n	d490 <__aeabi_dmul+0x19c>
    d43a:	2400      	movs	r4, #0
    d43c:	2002      	movs	r0, #2
    d43e:	e796      	b.n	d36e <__aeabi_dmul+0x7a>
    d440:	4653      	mov	r3, sl
    d442:	4323      	orrs	r3, r4
    d444:	d020      	beq.n	d488 <__aeabi_dmul+0x194>
    d446:	2c00      	cmp	r4, #0
    d448:	d100      	bne.n	d44c <__aeabi_dmul+0x158>
    d44a:	e157      	b.n	d6fc <__aeabi_dmul+0x408>
    d44c:	0020      	movs	r0, r4
    d44e:	f000 fe91 	bl	e174 <__clzsi2>
    d452:	0003      	movs	r3, r0
    d454:	3b0b      	subs	r3, #11
    d456:	2b1c      	cmp	r3, #28
    d458:	dd00      	ble.n	d45c <__aeabi_dmul+0x168>
    d45a:	e149      	b.n	d6f0 <__aeabi_dmul+0x3fc>
    d45c:	211d      	movs	r1, #29
    d45e:	1acb      	subs	r3, r1, r3
    d460:	4651      	mov	r1, sl
    d462:	0002      	movs	r2, r0
    d464:	40d9      	lsrs	r1, r3
    d466:	4653      	mov	r3, sl
    d468:	3a08      	subs	r2, #8
    d46a:	4094      	lsls	r4, r2
    d46c:	4093      	lsls	r3, r2
    d46e:	430c      	orrs	r4, r1
    d470:	4a1b      	ldr	r2, [pc, #108]	; (d4e0 <__aeabi_dmul+0x1ec>)
    d472:	1a12      	subs	r2, r2, r0
    d474:	2000      	movs	r0, #0
    d476:	e77a      	b.n	d36e <__aeabi_dmul+0x7a>
    d478:	2501      	movs	r5, #1
    d47a:	9b01      	ldr	r3, [sp, #4]
    d47c:	4c14      	ldr	r4, [pc, #80]	; (d4d0 <__aeabi_dmul+0x1dc>)
    d47e:	401d      	ands	r5, r3
    d480:	2300      	movs	r3, #0
    d482:	2200      	movs	r2, #0
    d484:	4699      	mov	r9, r3
    d486:	e79c      	b.n	d3c2 <__aeabi_dmul+0xce>
    d488:	2400      	movs	r4, #0
    d48a:	2200      	movs	r2, #0
    d48c:	2001      	movs	r0, #1
    d48e:	e76e      	b.n	d36e <__aeabi_dmul+0x7a>
    d490:	4653      	mov	r3, sl
    d492:	2003      	movs	r0, #3
    d494:	e76b      	b.n	d36e <__aeabi_dmul+0x7a>
    d496:	2300      	movs	r3, #0
    d498:	469b      	mov	fp, r3
    d49a:	3301      	adds	r3, #1
    d49c:	2704      	movs	r7, #4
    d49e:	2600      	movs	r6, #0
    d4a0:	9302      	str	r3, [sp, #8]
    d4a2:	e74c      	b.n	d33e <__aeabi_dmul+0x4a>
    d4a4:	2303      	movs	r3, #3
    d4a6:	4681      	mov	r9, r0
    d4a8:	270c      	movs	r7, #12
    d4aa:	9302      	str	r3, [sp, #8]
    d4ac:	e747      	b.n	d33e <__aeabi_dmul+0x4a>
    d4ae:	2280      	movs	r2, #128	; 0x80
    d4b0:	2300      	movs	r3, #0
    d4b2:	2500      	movs	r5, #0
    d4b4:	0312      	lsls	r2, r2, #12
    d4b6:	4699      	mov	r9, r3
    d4b8:	4c05      	ldr	r4, [pc, #20]	; (d4d0 <__aeabi_dmul+0x1dc>)
    d4ba:	e782      	b.n	d3c2 <__aeabi_dmul+0xce>
    d4bc:	465c      	mov	r4, fp
    d4be:	464b      	mov	r3, r9
    d4c0:	9802      	ldr	r0, [sp, #8]
    d4c2:	e76f      	b.n	d3a4 <__aeabi_dmul+0xb0>
    d4c4:	465c      	mov	r4, fp
    d4c6:	464b      	mov	r3, r9
    d4c8:	9501      	str	r5, [sp, #4]
    d4ca:	9802      	ldr	r0, [sp, #8]
    d4cc:	e76a      	b.n	d3a4 <__aeabi_dmul+0xb0>
    d4ce:	46c0      	nop			; (mov r8, r8)
    d4d0:	000007ff 	.word	0x000007ff
    d4d4:	fffffc01 	.word	0xfffffc01
    d4d8:	0000f098 	.word	0x0000f098
    d4dc:	800fffff 	.word	0x800fffff
    d4e0:	fffffc0d 	.word	0xfffffc0d
    d4e4:	464a      	mov	r2, r9
    d4e6:	4649      	mov	r1, r9
    d4e8:	0c17      	lsrs	r7, r2, #16
    d4ea:	0c1a      	lsrs	r2, r3, #16
    d4ec:	041b      	lsls	r3, r3, #16
    d4ee:	0c1b      	lsrs	r3, r3, #16
    d4f0:	0408      	lsls	r0, r1, #16
    d4f2:	0019      	movs	r1, r3
    d4f4:	0c00      	lsrs	r0, r0, #16
    d4f6:	4341      	muls	r1, r0
    d4f8:	0015      	movs	r5, r2
    d4fa:	4688      	mov	r8, r1
    d4fc:	0019      	movs	r1, r3
    d4fe:	437d      	muls	r5, r7
    d500:	4379      	muls	r1, r7
    d502:	9503      	str	r5, [sp, #12]
    d504:	4689      	mov	r9, r1
    d506:	0029      	movs	r1, r5
    d508:	0015      	movs	r5, r2
    d50a:	4345      	muls	r5, r0
    d50c:	444d      	add	r5, r9
    d50e:	9502      	str	r5, [sp, #8]
    d510:	4645      	mov	r5, r8
    d512:	0c2d      	lsrs	r5, r5, #16
    d514:	46aa      	mov	sl, r5
    d516:	9d02      	ldr	r5, [sp, #8]
    d518:	4455      	add	r5, sl
    d51a:	45a9      	cmp	r9, r5
    d51c:	d906      	bls.n	d52c <__aeabi_dmul+0x238>
    d51e:	468a      	mov	sl, r1
    d520:	2180      	movs	r1, #128	; 0x80
    d522:	0249      	lsls	r1, r1, #9
    d524:	4689      	mov	r9, r1
    d526:	44ca      	add	sl, r9
    d528:	4651      	mov	r1, sl
    d52a:	9103      	str	r1, [sp, #12]
    d52c:	0c29      	lsrs	r1, r5, #16
    d52e:	9104      	str	r1, [sp, #16]
    d530:	4641      	mov	r1, r8
    d532:	0409      	lsls	r1, r1, #16
    d534:	042d      	lsls	r5, r5, #16
    d536:	0c09      	lsrs	r1, r1, #16
    d538:	4688      	mov	r8, r1
    d53a:	0029      	movs	r1, r5
    d53c:	0c25      	lsrs	r5, r4, #16
    d53e:	0424      	lsls	r4, r4, #16
    d540:	4441      	add	r1, r8
    d542:	0c24      	lsrs	r4, r4, #16
    d544:	9105      	str	r1, [sp, #20]
    d546:	0021      	movs	r1, r4
    d548:	4341      	muls	r1, r0
    d54a:	4688      	mov	r8, r1
    d54c:	0021      	movs	r1, r4
    d54e:	4379      	muls	r1, r7
    d550:	468a      	mov	sl, r1
    d552:	4368      	muls	r0, r5
    d554:	4641      	mov	r1, r8
    d556:	4450      	add	r0, sl
    d558:	4681      	mov	r9, r0
    d55a:	0c08      	lsrs	r0, r1, #16
    d55c:	4448      	add	r0, r9
    d55e:	436f      	muls	r7, r5
    d560:	4582      	cmp	sl, r0
    d562:	d903      	bls.n	d56c <__aeabi_dmul+0x278>
    d564:	2180      	movs	r1, #128	; 0x80
    d566:	0249      	lsls	r1, r1, #9
    d568:	4689      	mov	r9, r1
    d56a:	444f      	add	r7, r9
    d56c:	0c01      	lsrs	r1, r0, #16
    d56e:	4689      	mov	r9, r1
    d570:	0039      	movs	r1, r7
    d572:	4449      	add	r1, r9
    d574:	9102      	str	r1, [sp, #8]
    d576:	4641      	mov	r1, r8
    d578:	040f      	lsls	r7, r1, #16
    d57a:	9904      	ldr	r1, [sp, #16]
    d57c:	0c3f      	lsrs	r7, r7, #16
    d57e:	4688      	mov	r8, r1
    d580:	0400      	lsls	r0, r0, #16
    d582:	19c0      	adds	r0, r0, r7
    d584:	4480      	add	r8, r0
    d586:	4641      	mov	r1, r8
    d588:	9104      	str	r1, [sp, #16]
    d58a:	4659      	mov	r1, fp
    d58c:	0c0f      	lsrs	r7, r1, #16
    d58e:	0409      	lsls	r1, r1, #16
    d590:	0c09      	lsrs	r1, r1, #16
    d592:	4688      	mov	r8, r1
    d594:	4359      	muls	r1, r3
    d596:	468a      	mov	sl, r1
    d598:	0039      	movs	r1, r7
    d59a:	4351      	muls	r1, r2
    d59c:	4689      	mov	r9, r1
    d59e:	4641      	mov	r1, r8
    d5a0:	434a      	muls	r2, r1
    d5a2:	4651      	mov	r1, sl
    d5a4:	0c09      	lsrs	r1, r1, #16
    d5a6:	468b      	mov	fp, r1
    d5a8:	437b      	muls	r3, r7
    d5aa:	18d2      	adds	r2, r2, r3
    d5ac:	445a      	add	r2, fp
    d5ae:	4293      	cmp	r3, r2
    d5b0:	d903      	bls.n	d5ba <__aeabi_dmul+0x2c6>
    d5b2:	2380      	movs	r3, #128	; 0x80
    d5b4:	025b      	lsls	r3, r3, #9
    d5b6:	469b      	mov	fp, r3
    d5b8:	44d9      	add	r9, fp
    d5ba:	4651      	mov	r1, sl
    d5bc:	0409      	lsls	r1, r1, #16
    d5be:	0c09      	lsrs	r1, r1, #16
    d5c0:	468a      	mov	sl, r1
    d5c2:	4641      	mov	r1, r8
    d5c4:	4361      	muls	r1, r4
    d5c6:	437c      	muls	r4, r7
    d5c8:	0c13      	lsrs	r3, r2, #16
    d5ca:	0412      	lsls	r2, r2, #16
    d5cc:	444b      	add	r3, r9
    d5ce:	4452      	add	r2, sl
    d5d0:	46a1      	mov	r9, r4
    d5d2:	468a      	mov	sl, r1
    d5d4:	003c      	movs	r4, r7
    d5d6:	4641      	mov	r1, r8
    d5d8:	436c      	muls	r4, r5
    d5da:	434d      	muls	r5, r1
    d5dc:	4651      	mov	r1, sl
    d5de:	444d      	add	r5, r9
    d5e0:	0c0f      	lsrs	r7, r1, #16
    d5e2:	197d      	adds	r5, r7, r5
    d5e4:	45a9      	cmp	r9, r5
    d5e6:	d903      	bls.n	d5f0 <__aeabi_dmul+0x2fc>
    d5e8:	2180      	movs	r1, #128	; 0x80
    d5ea:	0249      	lsls	r1, r1, #9
    d5ec:	4688      	mov	r8, r1
    d5ee:	4444      	add	r4, r8
    d5f0:	9f04      	ldr	r7, [sp, #16]
    d5f2:	9903      	ldr	r1, [sp, #12]
    d5f4:	46b8      	mov	r8, r7
    d5f6:	4441      	add	r1, r8
    d5f8:	468b      	mov	fp, r1
    d5fa:	4583      	cmp	fp, r0
    d5fc:	4180      	sbcs	r0, r0
    d5fe:	4241      	negs	r1, r0
    d600:	4688      	mov	r8, r1
    d602:	4651      	mov	r1, sl
    d604:	0408      	lsls	r0, r1, #16
    d606:	042f      	lsls	r7, r5, #16
    d608:	0c00      	lsrs	r0, r0, #16
    d60a:	183f      	adds	r7, r7, r0
    d60c:	4658      	mov	r0, fp
    d60e:	9902      	ldr	r1, [sp, #8]
    d610:	1810      	adds	r0, r2, r0
    d612:	4689      	mov	r9, r1
    d614:	4290      	cmp	r0, r2
    d616:	4192      	sbcs	r2, r2
    d618:	444f      	add	r7, r9
    d61a:	46ba      	mov	sl, r7
    d61c:	4252      	negs	r2, r2
    d61e:	4699      	mov	r9, r3
    d620:	4693      	mov	fp, r2
    d622:	44c2      	add	sl, r8
    d624:	44d1      	add	r9, sl
    d626:	44cb      	add	fp, r9
    d628:	428f      	cmp	r7, r1
    d62a:	41bf      	sbcs	r7, r7
    d62c:	45c2      	cmp	sl, r8
    d62e:	4189      	sbcs	r1, r1
    d630:	4599      	cmp	r9, r3
    d632:	419b      	sbcs	r3, r3
    d634:	4593      	cmp	fp, r2
    d636:	4192      	sbcs	r2, r2
    d638:	427f      	negs	r7, r7
    d63a:	4249      	negs	r1, r1
    d63c:	0c2d      	lsrs	r5, r5, #16
    d63e:	4252      	negs	r2, r2
    d640:	430f      	orrs	r7, r1
    d642:	425b      	negs	r3, r3
    d644:	4313      	orrs	r3, r2
    d646:	197f      	adds	r7, r7, r5
    d648:	18ff      	adds	r7, r7, r3
    d64a:	465b      	mov	r3, fp
    d64c:	193c      	adds	r4, r7, r4
    d64e:	0ddb      	lsrs	r3, r3, #23
    d650:	9a05      	ldr	r2, [sp, #20]
    d652:	0264      	lsls	r4, r4, #9
    d654:	431c      	orrs	r4, r3
    d656:	0243      	lsls	r3, r0, #9
    d658:	4313      	orrs	r3, r2
    d65a:	1e5d      	subs	r5, r3, #1
    d65c:	41ab      	sbcs	r3, r5
    d65e:	465a      	mov	r2, fp
    d660:	0dc0      	lsrs	r0, r0, #23
    d662:	4303      	orrs	r3, r0
    d664:	0252      	lsls	r2, r2, #9
    d666:	4313      	orrs	r3, r2
    d668:	01e2      	lsls	r2, r4, #7
    d66a:	d556      	bpl.n	d71a <__aeabi_dmul+0x426>
    d66c:	2001      	movs	r0, #1
    d66e:	085a      	lsrs	r2, r3, #1
    d670:	4003      	ands	r3, r0
    d672:	4313      	orrs	r3, r2
    d674:	07e2      	lsls	r2, r4, #31
    d676:	4313      	orrs	r3, r2
    d678:	0864      	lsrs	r4, r4, #1
    d67a:	485a      	ldr	r0, [pc, #360]	; (d7e4 <__aeabi_dmul+0x4f0>)
    d67c:	4460      	add	r0, ip
    d67e:	2800      	cmp	r0, #0
    d680:	dd4d      	ble.n	d71e <__aeabi_dmul+0x42a>
    d682:	075a      	lsls	r2, r3, #29
    d684:	d009      	beq.n	d69a <__aeabi_dmul+0x3a6>
    d686:	220f      	movs	r2, #15
    d688:	401a      	ands	r2, r3
    d68a:	2a04      	cmp	r2, #4
    d68c:	d005      	beq.n	d69a <__aeabi_dmul+0x3a6>
    d68e:	1d1a      	adds	r2, r3, #4
    d690:	429a      	cmp	r2, r3
    d692:	419b      	sbcs	r3, r3
    d694:	425b      	negs	r3, r3
    d696:	18e4      	adds	r4, r4, r3
    d698:	0013      	movs	r3, r2
    d69a:	01e2      	lsls	r2, r4, #7
    d69c:	d504      	bpl.n	d6a8 <__aeabi_dmul+0x3b4>
    d69e:	2080      	movs	r0, #128	; 0x80
    d6a0:	4a51      	ldr	r2, [pc, #324]	; (d7e8 <__aeabi_dmul+0x4f4>)
    d6a2:	00c0      	lsls	r0, r0, #3
    d6a4:	4014      	ands	r4, r2
    d6a6:	4460      	add	r0, ip
    d6a8:	4a50      	ldr	r2, [pc, #320]	; (d7ec <__aeabi_dmul+0x4f8>)
    d6aa:	4290      	cmp	r0, r2
    d6ac:	dd00      	ble.n	d6b0 <__aeabi_dmul+0x3bc>
    d6ae:	e6e3      	b.n	d478 <__aeabi_dmul+0x184>
    d6b0:	2501      	movs	r5, #1
    d6b2:	08db      	lsrs	r3, r3, #3
    d6b4:	0762      	lsls	r2, r4, #29
    d6b6:	431a      	orrs	r2, r3
    d6b8:	0264      	lsls	r4, r4, #9
    d6ba:	9b01      	ldr	r3, [sp, #4]
    d6bc:	4691      	mov	r9, r2
    d6be:	0b22      	lsrs	r2, r4, #12
    d6c0:	0544      	lsls	r4, r0, #21
    d6c2:	0d64      	lsrs	r4, r4, #21
    d6c4:	401d      	ands	r5, r3
    d6c6:	e67c      	b.n	d3c2 <__aeabi_dmul+0xce>
    d6c8:	2280      	movs	r2, #128	; 0x80
    d6ca:	4659      	mov	r1, fp
    d6cc:	0312      	lsls	r2, r2, #12
    d6ce:	4211      	tst	r1, r2
    d6d0:	d008      	beq.n	d6e4 <__aeabi_dmul+0x3f0>
    d6d2:	4214      	tst	r4, r2
    d6d4:	d106      	bne.n	d6e4 <__aeabi_dmul+0x3f0>
    d6d6:	4322      	orrs	r2, r4
    d6d8:	0312      	lsls	r2, r2, #12
    d6da:	0b12      	lsrs	r2, r2, #12
    d6dc:	4645      	mov	r5, r8
    d6de:	4699      	mov	r9, r3
    d6e0:	4c43      	ldr	r4, [pc, #268]	; (d7f0 <__aeabi_dmul+0x4fc>)
    d6e2:	e66e      	b.n	d3c2 <__aeabi_dmul+0xce>
    d6e4:	465b      	mov	r3, fp
    d6e6:	431a      	orrs	r2, r3
    d6e8:	0312      	lsls	r2, r2, #12
    d6ea:	0b12      	lsrs	r2, r2, #12
    d6ec:	4c40      	ldr	r4, [pc, #256]	; (d7f0 <__aeabi_dmul+0x4fc>)
    d6ee:	e668      	b.n	d3c2 <__aeabi_dmul+0xce>
    d6f0:	0003      	movs	r3, r0
    d6f2:	4654      	mov	r4, sl
    d6f4:	3b28      	subs	r3, #40	; 0x28
    d6f6:	409c      	lsls	r4, r3
    d6f8:	2300      	movs	r3, #0
    d6fa:	e6b9      	b.n	d470 <__aeabi_dmul+0x17c>
    d6fc:	f000 fd3a 	bl	e174 <__clzsi2>
    d700:	3020      	adds	r0, #32
    d702:	e6a6      	b.n	d452 <__aeabi_dmul+0x15e>
    d704:	0003      	movs	r3, r0
    d706:	3b28      	subs	r3, #40	; 0x28
    d708:	409f      	lsls	r7, r3
    d70a:	2300      	movs	r3, #0
    d70c:	46bb      	mov	fp, r7
    d70e:	4699      	mov	r9, r3
    d710:	e68a      	b.n	d428 <__aeabi_dmul+0x134>
    d712:	f000 fd2f 	bl	e174 <__clzsi2>
    d716:	3020      	adds	r0, #32
    d718:	e674      	b.n	d404 <__aeabi_dmul+0x110>
    d71a:	46b4      	mov	ip, r6
    d71c:	e7ad      	b.n	d67a <__aeabi_dmul+0x386>
    d71e:	2501      	movs	r5, #1
    d720:	1a2a      	subs	r2, r5, r0
    d722:	2a38      	cmp	r2, #56	; 0x38
    d724:	dd06      	ble.n	d734 <__aeabi_dmul+0x440>
    d726:	9b01      	ldr	r3, [sp, #4]
    d728:	2400      	movs	r4, #0
    d72a:	401d      	ands	r5, r3
    d72c:	2300      	movs	r3, #0
    d72e:	2200      	movs	r2, #0
    d730:	4699      	mov	r9, r3
    d732:	e646      	b.n	d3c2 <__aeabi_dmul+0xce>
    d734:	2a1f      	cmp	r2, #31
    d736:	dc21      	bgt.n	d77c <__aeabi_dmul+0x488>
    d738:	2520      	movs	r5, #32
    d73a:	0020      	movs	r0, r4
    d73c:	1aad      	subs	r5, r5, r2
    d73e:	001e      	movs	r6, r3
    d740:	40ab      	lsls	r3, r5
    d742:	40a8      	lsls	r0, r5
    d744:	40d6      	lsrs	r6, r2
    d746:	1e5d      	subs	r5, r3, #1
    d748:	41ab      	sbcs	r3, r5
    d74a:	4330      	orrs	r0, r6
    d74c:	4318      	orrs	r0, r3
    d74e:	40d4      	lsrs	r4, r2
    d750:	0743      	lsls	r3, r0, #29
    d752:	d009      	beq.n	d768 <__aeabi_dmul+0x474>
    d754:	230f      	movs	r3, #15
    d756:	4003      	ands	r3, r0
    d758:	2b04      	cmp	r3, #4
    d75a:	d005      	beq.n	d768 <__aeabi_dmul+0x474>
    d75c:	0003      	movs	r3, r0
    d75e:	1d18      	adds	r0, r3, #4
    d760:	4298      	cmp	r0, r3
    d762:	419b      	sbcs	r3, r3
    d764:	425b      	negs	r3, r3
    d766:	18e4      	adds	r4, r4, r3
    d768:	0223      	lsls	r3, r4, #8
    d76a:	d521      	bpl.n	d7b0 <__aeabi_dmul+0x4bc>
    d76c:	2501      	movs	r5, #1
    d76e:	9b01      	ldr	r3, [sp, #4]
    d770:	2401      	movs	r4, #1
    d772:	401d      	ands	r5, r3
    d774:	2300      	movs	r3, #0
    d776:	2200      	movs	r2, #0
    d778:	4699      	mov	r9, r3
    d77a:	e622      	b.n	d3c2 <__aeabi_dmul+0xce>
    d77c:	251f      	movs	r5, #31
    d77e:	0021      	movs	r1, r4
    d780:	426d      	negs	r5, r5
    d782:	1a28      	subs	r0, r5, r0
    d784:	40c1      	lsrs	r1, r0
    d786:	0008      	movs	r0, r1
    d788:	2a20      	cmp	r2, #32
    d78a:	d01d      	beq.n	d7c8 <__aeabi_dmul+0x4d4>
    d78c:	355f      	adds	r5, #95	; 0x5f
    d78e:	1aaa      	subs	r2, r5, r2
    d790:	4094      	lsls	r4, r2
    d792:	4323      	orrs	r3, r4
    d794:	1e5c      	subs	r4, r3, #1
    d796:	41a3      	sbcs	r3, r4
    d798:	2507      	movs	r5, #7
    d79a:	4303      	orrs	r3, r0
    d79c:	401d      	ands	r5, r3
    d79e:	2200      	movs	r2, #0
    d7a0:	2d00      	cmp	r5, #0
    d7a2:	d009      	beq.n	d7b8 <__aeabi_dmul+0x4c4>
    d7a4:	220f      	movs	r2, #15
    d7a6:	2400      	movs	r4, #0
    d7a8:	401a      	ands	r2, r3
    d7aa:	0018      	movs	r0, r3
    d7ac:	2a04      	cmp	r2, #4
    d7ae:	d1d6      	bne.n	d75e <__aeabi_dmul+0x46a>
    d7b0:	0003      	movs	r3, r0
    d7b2:	0765      	lsls	r5, r4, #29
    d7b4:	0264      	lsls	r4, r4, #9
    d7b6:	0b22      	lsrs	r2, r4, #12
    d7b8:	08db      	lsrs	r3, r3, #3
    d7ba:	432b      	orrs	r3, r5
    d7bc:	2501      	movs	r5, #1
    d7be:	4699      	mov	r9, r3
    d7c0:	9b01      	ldr	r3, [sp, #4]
    d7c2:	2400      	movs	r4, #0
    d7c4:	401d      	ands	r5, r3
    d7c6:	e5fc      	b.n	d3c2 <__aeabi_dmul+0xce>
    d7c8:	2400      	movs	r4, #0
    d7ca:	e7e2      	b.n	d792 <__aeabi_dmul+0x49e>
    d7cc:	2280      	movs	r2, #128	; 0x80
    d7ce:	2501      	movs	r5, #1
    d7d0:	0312      	lsls	r2, r2, #12
    d7d2:	4322      	orrs	r2, r4
    d7d4:	9901      	ldr	r1, [sp, #4]
    d7d6:	0312      	lsls	r2, r2, #12
    d7d8:	0b12      	lsrs	r2, r2, #12
    d7da:	400d      	ands	r5, r1
    d7dc:	4699      	mov	r9, r3
    d7de:	4c04      	ldr	r4, [pc, #16]	; (d7f0 <__aeabi_dmul+0x4fc>)
    d7e0:	e5ef      	b.n	d3c2 <__aeabi_dmul+0xce>
    d7e2:	46c0      	nop			; (mov r8, r8)
    d7e4:	000003ff 	.word	0x000003ff
    d7e8:	feffffff 	.word	0xfeffffff
    d7ec:	000007fe 	.word	0x000007fe
    d7f0:	000007ff 	.word	0x000007ff

0000d7f4 <__aeabi_dsub>:
    d7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7f6:	4646      	mov	r6, r8
    d7f8:	46d6      	mov	lr, sl
    d7fa:	464f      	mov	r7, r9
    d7fc:	030c      	lsls	r4, r1, #12
    d7fe:	b5c0      	push	{r6, r7, lr}
    d800:	0fcd      	lsrs	r5, r1, #31
    d802:	004e      	lsls	r6, r1, #1
    d804:	0a61      	lsrs	r1, r4, #9
    d806:	0f44      	lsrs	r4, r0, #29
    d808:	430c      	orrs	r4, r1
    d80a:	00c1      	lsls	r1, r0, #3
    d80c:	0058      	lsls	r0, r3, #1
    d80e:	0d40      	lsrs	r0, r0, #21
    d810:	4684      	mov	ip, r0
    d812:	468a      	mov	sl, r1
    d814:	000f      	movs	r7, r1
    d816:	0319      	lsls	r1, r3, #12
    d818:	0f50      	lsrs	r0, r2, #29
    d81a:	0a49      	lsrs	r1, r1, #9
    d81c:	4301      	orrs	r1, r0
    d81e:	48c6      	ldr	r0, [pc, #792]	; (db38 <__aeabi_dsub+0x344>)
    d820:	0d76      	lsrs	r6, r6, #21
    d822:	46a8      	mov	r8, r5
    d824:	0fdb      	lsrs	r3, r3, #31
    d826:	00d2      	lsls	r2, r2, #3
    d828:	4584      	cmp	ip, r0
    d82a:	d100      	bne.n	d82e <__aeabi_dsub+0x3a>
    d82c:	e0d8      	b.n	d9e0 <__aeabi_dsub+0x1ec>
    d82e:	2001      	movs	r0, #1
    d830:	4043      	eors	r3, r0
    d832:	42ab      	cmp	r3, r5
    d834:	d100      	bne.n	d838 <__aeabi_dsub+0x44>
    d836:	e0a6      	b.n	d986 <__aeabi_dsub+0x192>
    d838:	4660      	mov	r0, ip
    d83a:	1a35      	subs	r5, r6, r0
    d83c:	2d00      	cmp	r5, #0
    d83e:	dc00      	bgt.n	d842 <__aeabi_dsub+0x4e>
    d840:	e105      	b.n	da4e <__aeabi_dsub+0x25a>
    d842:	2800      	cmp	r0, #0
    d844:	d110      	bne.n	d868 <__aeabi_dsub+0x74>
    d846:	000b      	movs	r3, r1
    d848:	4313      	orrs	r3, r2
    d84a:	d100      	bne.n	d84e <__aeabi_dsub+0x5a>
    d84c:	e0d7      	b.n	d9fe <__aeabi_dsub+0x20a>
    d84e:	1e6b      	subs	r3, r5, #1
    d850:	2b00      	cmp	r3, #0
    d852:	d000      	beq.n	d856 <__aeabi_dsub+0x62>
    d854:	e14b      	b.n	daee <__aeabi_dsub+0x2fa>
    d856:	4653      	mov	r3, sl
    d858:	1a9f      	subs	r7, r3, r2
    d85a:	45ba      	cmp	sl, r7
    d85c:	4180      	sbcs	r0, r0
    d85e:	1a64      	subs	r4, r4, r1
    d860:	4240      	negs	r0, r0
    d862:	1a24      	subs	r4, r4, r0
    d864:	2601      	movs	r6, #1
    d866:	e01e      	b.n	d8a6 <__aeabi_dsub+0xb2>
    d868:	4bb3      	ldr	r3, [pc, #716]	; (db38 <__aeabi_dsub+0x344>)
    d86a:	429e      	cmp	r6, r3
    d86c:	d048      	beq.n	d900 <__aeabi_dsub+0x10c>
    d86e:	2380      	movs	r3, #128	; 0x80
    d870:	041b      	lsls	r3, r3, #16
    d872:	4319      	orrs	r1, r3
    d874:	2d38      	cmp	r5, #56	; 0x38
    d876:	dd00      	ble.n	d87a <__aeabi_dsub+0x86>
    d878:	e119      	b.n	daae <__aeabi_dsub+0x2ba>
    d87a:	2d1f      	cmp	r5, #31
    d87c:	dd00      	ble.n	d880 <__aeabi_dsub+0x8c>
    d87e:	e14c      	b.n	db1a <__aeabi_dsub+0x326>
    d880:	2320      	movs	r3, #32
    d882:	000f      	movs	r7, r1
    d884:	1b5b      	subs	r3, r3, r5
    d886:	0010      	movs	r0, r2
    d888:	409a      	lsls	r2, r3
    d88a:	409f      	lsls	r7, r3
    d88c:	40e8      	lsrs	r0, r5
    d88e:	1e53      	subs	r3, r2, #1
    d890:	419a      	sbcs	r2, r3
    d892:	40e9      	lsrs	r1, r5
    d894:	4307      	orrs	r7, r0
    d896:	4317      	orrs	r7, r2
    d898:	4653      	mov	r3, sl
    d89a:	1bdf      	subs	r7, r3, r7
    d89c:	1a61      	subs	r1, r4, r1
    d89e:	45ba      	cmp	sl, r7
    d8a0:	41a4      	sbcs	r4, r4
    d8a2:	4264      	negs	r4, r4
    d8a4:	1b0c      	subs	r4, r1, r4
    d8a6:	0223      	lsls	r3, r4, #8
    d8a8:	d400      	bmi.n	d8ac <__aeabi_dsub+0xb8>
    d8aa:	e0c5      	b.n	da38 <__aeabi_dsub+0x244>
    d8ac:	0264      	lsls	r4, r4, #9
    d8ae:	0a65      	lsrs	r5, r4, #9
    d8b0:	2d00      	cmp	r5, #0
    d8b2:	d100      	bne.n	d8b6 <__aeabi_dsub+0xc2>
    d8b4:	e0f6      	b.n	daa4 <__aeabi_dsub+0x2b0>
    d8b6:	0028      	movs	r0, r5
    d8b8:	f000 fc5c 	bl	e174 <__clzsi2>
    d8bc:	0003      	movs	r3, r0
    d8be:	3b08      	subs	r3, #8
    d8c0:	2b1f      	cmp	r3, #31
    d8c2:	dd00      	ble.n	d8c6 <__aeabi_dsub+0xd2>
    d8c4:	e0e9      	b.n	da9a <__aeabi_dsub+0x2a6>
    d8c6:	2220      	movs	r2, #32
    d8c8:	003c      	movs	r4, r7
    d8ca:	1ad2      	subs	r2, r2, r3
    d8cc:	409d      	lsls	r5, r3
    d8ce:	40d4      	lsrs	r4, r2
    d8d0:	409f      	lsls	r7, r3
    d8d2:	4325      	orrs	r5, r4
    d8d4:	429e      	cmp	r6, r3
    d8d6:	dd00      	ble.n	d8da <__aeabi_dsub+0xe6>
    d8d8:	e0db      	b.n	da92 <__aeabi_dsub+0x29e>
    d8da:	1b9e      	subs	r6, r3, r6
    d8dc:	1c73      	adds	r3, r6, #1
    d8de:	2b1f      	cmp	r3, #31
    d8e0:	dd00      	ble.n	d8e4 <__aeabi_dsub+0xf0>
    d8e2:	e10a      	b.n	dafa <__aeabi_dsub+0x306>
    d8e4:	2220      	movs	r2, #32
    d8e6:	0038      	movs	r0, r7
    d8e8:	1ad2      	subs	r2, r2, r3
    d8ea:	0029      	movs	r1, r5
    d8ec:	4097      	lsls	r7, r2
    d8ee:	002c      	movs	r4, r5
    d8f0:	4091      	lsls	r1, r2
    d8f2:	40d8      	lsrs	r0, r3
    d8f4:	1e7a      	subs	r2, r7, #1
    d8f6:	4197      	sbcs	r7, r2
    d8f8:	40dc      	lsrs	r4, r3
    d8fa:	2600      	movs	r6, #0
    d8fc:	4301      	orrs	r1, r0
    d8fe:	430f      	orrs	r7, r1
    d900:	077b      	lsls	r3, r7, #29
    d902:	d009      	beq.n	d918 <__aeabi_dsub+0x124>
    d904:	230f      	movs	r3, #15
    d906:	403b      	ands	r3, r7
    d908:	2b04      	cmp	r3, #4
    d90a:	d005      	beq.n	d918 <__aeabi_dsub+0x124>
    d90c:	1d3b      	adds	r3, r7, #4
    d90e:	42bb      	cmp	r3, r7
    d910:	41bf      	sbcs	r7, r7
    d912:	427f      	negs	r7, r7
    d914:	19e4      	adds	r4, r4, r7
    d916:	001f      	movs	r7, r3
    d918:	0223      	lsls	r3, r4, #8
    d91a:	d525      	bpl.n	d968 <__aeabi_dsub+0x174>
    d91c:	4b86      	ldr	r3, [pc, #536]	; (db38 <__aeabi_dsub+0x344>)
    d91e:	3601      	adds	r6, #1
    d920:	429e      	cmp	r6, r3
    d922:	d100      	bne.n	d926 <__aeabi_dsub+0x132>
    d924:	e0af      	b.n	da86 <__aeabi_dsub+0x292>
    d926:	4b85      	ldr	r3, [pc, #532]	; (db3c <__aeabi_dsub+0x348>)
    d928:	2501      	movs	r5, #1
    d92a:	401c      	ands	r4, r3
    d92c:	4643      	mov	r3, r8
    d92e:	0762      	lsls	r2, r4, #29
    d930:	08ff      	lsrs	r7, r7, #3
    d932:	0264      	lsls	r4, r4, #9
    d934:	0576      	lsls	r6, r6, #21
    d936:	4317      	orrs	r7, r2
    d938:	0b24      	lsrs	r4, r4, #12
    d93a:	0d76      	lsrs	r6, r6, #21
    d93c:	401d      	ands	r5, r3
    d93e:	2100      	movs	r1, #0
    d940:	0324      	lsls	r4, r4, #12
    d942:	0b23      	lsrs	r3, r4, #12
    d944:	0d0c      	lsrs	r4, r1, #20
    d946:	4a7e      	ldr	r2, [pc, #504]	; (db40 <__aeabi_dsub+0x34c>)
    d948:	0524      	lsls	r4, r4, #20
    d94a:	431c      	orrs	r4, r3
    d94c:	4014      	ands	r4, r2
    d94e:	0533      	lsls	r3, r6, #20
    d950:	4323      	orrs	r3, r4
    d952:	005b      	lsls	r3, r3, #1
    d954:	07ed      	lsls	r5, r5, #31
    d956:	085b      	lsrs	r3, r3, #1
    d958:	432b      	orrs	r3, r5
    d95a:	0038      	movs	r0, r7
    d95c:	0019      	movs	r1, r3
    d95e:	bc1c      	pop	{r2, r3, r4}
    d960:	4690      	mov	r8, r2
    d962:	4699      	mov	r9, r3
    d964:	46a2      	mov	sl, r4
    d966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d968:	2501      	movs	r5, #1
    d96a:	4643      	mov	r3, r8
    d96c:	0762      	lsls	r2, r4, #29
    d96e:	08ff      	lsrs	r7, r7, #3
    d970:	4317      	orrs	r7, r2
    d972:	08e4      	lsrs	r4, r4, #3
    d974:	401d      	ands	r5, r3
    d976:	4b70      	ldr	r3, [pc, #448]	; (db38 <__aeabi_dsub+0x344>)
    d978:	429e      	cmp	r6, r3
    d97a:	d036      	beq.n	d9ea <__aeabi_dsub+0x1f6>
    d97c:	0324      	lsls	r4, r4, #12
    d97e:	0576      	lsls	r6, r6, #21
    d980:	0b24      	lsrs	r4, r4, #12
    d982:	0d76      	lsrs	r6, r6, #21
    d984:	e7db      	b.n	d93e <__aeabi_dsub+0x14a>
    d986:	4663      	mov	r3, ip
    d988:	1af3      	subs	r3, r6, r3
    d98a:	2b00      	cmp	r3, #0
    d98c:	dc00      	bgt.n	d990 <__aeabi_dsub+0x19c>
    d98e:	e094      	b.n	daba <__aeabi_dsub+0x2c6>
    d990:	4660      	mov	r0, ip
    d992:	2800      	cmp	r0, #0
    d994:	d035      	beq.n	da02 <__aeabi_dsub+0x20e>
    d996:	4868      	ldr	r0, [pc, #416]	; (db38 <__aeabi_dsub+0x344>)
    d998:	4286      	cmp	r6, r0
    d99a:	d0b1      	beq.n	d900 <__aeabi_dsub+0x10c>
    d99c:	2780      	movs	r7, #128	; 0x80
    d99e:	043f      	lsls	r7, r7, #16
    d9a0:	4339      	orrs	r1, r7
    d9a2:	2b38      	cmp	r3, #56	; 0x38
    d9a4:	dc00      	bgt.n	d9a8 <__aeabi_dsub+0x1b4>
    d9a6:	e0fd      	b.n	dba4 <__aeabi_dsub+0x3b0>
    d9a8:	430a      	orrs	r2, r1
    d9aa:	0017      	movs	r7, r2
    d9ac:	2100      	movs	r1, #0
    d9ae:	1e7a      	subs	r2, r7, #1
    d9b0:	4197      	sbcs	r7, r2
    d9b2:	4457      	add	r7, sl
    d9b4:	4557      	cmp	r7, sl
    d9b6:	4180      	sbcs	r0, r0
    d9b8:	1909      	adds	r1, r1, r4
    d9ba:	4244      	negs	r4, r0
    d9bc:	190c      	adds	r4, r1, r4
    d9be:	0223      	lsls	r3, r4, #8
    d9c0:	d53a      	bpl.n	da38 <__aeabi_dsub+0x244>
    d9c2:	4b5d      	ldr	r3, [pc, #372]	; (db38 <__aeabi_dsub+0x344>)
    d9c4:	3601      	adds	r6, #1
    d9c6:	429e      	cmp	r6, r3
    d9c8:	d100      	bne.n	d9cc <__aeabi_dsub+0x1d8>
    d9ca:	e14b      	b.n	dc64 <__aeabi_dsub+0x470>
    d9cc:	2201      	movs	r2, #1
    d9ce:	4b5b      	ldr	r3, [pc, #364]	; (db3c <__aeabi_dsub+0x348>)
    d9d0:	401c      	ands	r4, r3
    d9d2:	087b      	lsrs	r3, r7, #1
    d9d4:	4017      	ands	r7, r2
    d9d6:	431f      	orrs	r7, r3
    d9d8:	07e2      	lsls	r2, r4, #31
    d9da:	4317      	orrs	r7, r2
    d9dc:	0864      	lsrs	r4, r4, #1
    d9de:	e78f      	b.n	d900 <__aeabi_dsub+0x10c>
    d9e0:	0008      	movs	r0, r1
    d9e2:	4310      	orrs	r0, r2
    d9e4:	d000      	beq.n	d9e8 <__aeabi_dsub+0x1f4>
    d9e6:	e724      	b.n	d832 <__aeabi_dsub+0x3e>
    d9e8:	e721      	b.n	d82e <__aeabi_dsub+0x3a>
    d9ea:	0023      	movs	r3, r4
    d9ec:	433b      	orrs	r3, r7
    d9ee:	d100      	bne.n	d9f2 <__aeabi_dsub+0x1fe>
    d9f0:	e1b9      	b.n	dd66 <__aeabi_dsub+0x572>
    d9f2:	2280      	movs	r2, #128	; 0x80
    d9f4:	0312      	lsls	r2, r2, #12
    d9f6:	4314      	orrs	r4, r2
    d9f8:	0324      	lsls	r4, r4, #12
    d9fa:	0b24      	lsrs	r4, r4, #12
    d9fc:	e79f      	b.n	d93e <__aeabi_dsub+0x14a>
    d9fe:	002e      	movs	r6, r5
    da00:	e77e      	b.n	d900 <__aeabi_dsub+0x10c>
    da02:	0008      	movs	r0, r1
    da04:	4310      	orrs	r0, r2
    da06:	d100      	bne.n	da0a <__aeabi_dsub+0x216>
    da08:	e0ca      	b.n	dba0 <__aeabi_dsub+0x3ac>
    da0a:	1e58      	subs	r0, r3, #1
    da0c:	4684      	mov	ip, r0
    da0e:	2800      	cmp	r0, #0
    da10:	d000      	beq.n	da14 <__aeabi_dsub+0x220>
    da12:	e0e7      	b.n	dbe4 <__aeabi_dsub+0x3f0>
    da14:	4452      	add	r2, sl
    da16:	4552      	cmp	r2, sl
    da18:	4180      	sbcs	r0, r0
    da1a:	1864      	adds	r4, r4, r1
    da1c:	4240      	negs	r0, r0
    da1e:	1824      	adds	r4, r4, r0
    da20:	0017      	movs	r7, r2
    da22:	2601      	movs	r6, #1
    da24:	0223      	lsls	r3, r4, #8
    da26:	d507      	bpl.n	da38 <__aeabi_dsub+0x244>
    da28:	2602      	movs	r6, #2
    da2a:	e7cf      	b.n	d9cc <__aeabi_dsub+0x1d8>
    da2c:	4664      	mov	r4, ip
    da2e:	432c      	orrs	r4, r5
    da30:	d100      	bne.n	da34 <__aeabi_dsub+0x240>
    da32:	e1b3      	b.n	dd9c <__aeabi_dsub+0x5a8>
    da34:	002c      	movs	r4, r5
    da36:	4667      	mov	r7, ip
    da38:	077b      	lsls	r3, r7, #29
    da3a:	d000      	beq.n	da3e <__aeabi_dsub+0x24a>
    da3c:	e762      	b.n	d904 <__aeabi_dsub+0x110>
    da3e:	0763      	lsls	r3, r4, #29
    da40:	08ff      	lsrs	r7, r7, #3
    da42:	431f      	orrs	r7, r3
    da44:	2501      	movs	r5, #1
    da46:	4643      	mov	r3, r8
    da48:	08e4      	lsrs	r4, r4, #3
    da4a:	401d      	ands	r5, r3
    da4c:	e793      	b.n	d976 <__aeabi_dsub+0x182>
    da4e:	2d00      	cmp	r5, #0
    da50:	d178      	bne.n	db44 <__aeabi_dsub+0x350>
    da52:	1c75      	adds	r5, r6, #1
    da54:	056d      	lsls	r5, r5, #21
    da56:	0d6d      	lsrs	r5, r5, #21
    da58:	2d01      	cmp	r5, #1
    da5a:	dc00      	bgt.n	da5e <__aeabi_dsub+0x26a>
    da5c:	e0f2      	b.n	dc44 <__aeabi_dsub+0x450>
    da5e:	4650      	mov	r0, sl
    da60:	1a80      	subs	r0, r0, r2
    da62:	4582      	cmp	sl, r0
    da64:	41bf      	sbcs	r7, r7
    da66:	1a65      	subs	r5, r4, r1
    da68:	427f      	negs	r7, r7
    da6a:	1bed      	subs	r5, r5, r7
    da6c:	4684      	mov	ip, r0
    da6e:	0228      	lsls	r0, r5, #8
    da70:	d400      	bmi.n	da74 <__aeabi_dsub+0x280>
    da72:	e08c      	b.n	db8e <__aeabi_dsub+0x39a>
    da74:	4650      	mov	r0, sl
    da76:	1a17      	subs	r7, r2, r0
    da78:	42ba      	cmp	r2, r7
    da7a:	4192      	sbcs	r2, r2
    da7c:	1b0c      	subs	r4, r1, r4
    da7e:	4255      	negs	r5, r2
    da80:	1b65      	subs	r5, r4, r5
    da82:	4698      	mov	r8, r3
    da84:	e714      	b.n	d8b0 <__aeabi_dsub+0xbc>
    da86:	2501      	movs	r5, #1
    da88:	4643      	mov	r3, r8
    da8a:	2400      	movs	r4, #0
    da8c:	401d      	ands	r5, r3
    da8e:	2700      	movs	r7, #0
    da90:	e755      	b.n	d93e <__aeabi_dsub+0x14a>
    da92:	4c2a      	ldr	r4, [pc, #168]	; (db3c <__aeabi_dsub+0x348>)
    da94:	1af6      	subs	r6, r6, r3
    da96:	402c      	ands	r4, r5
    da98:	e732      	b.n	d900 <__aeabi_dsub+0x10c>
    da9a:	003d      	movs	r5, r7
    da9c:	3828      	subs	r0, #40	; 0x28
    da9e:	4085      	lsls	r5, r0
    daa0:	2700      	movs	r7, #0
    daa2:	e717      	b.n	d8d4 <__aeabi_dsub+0xe0>
    daa4:	0038      	movs	r0, r7
    daa6:	f000 fb65 	bl	e174 <__clzsi2>
    daaa:	3020      	adds	r0, #32
    daac:	e706      	b.n	d8bc <__aeabi_dsub+0xc8>
    daae:	430a      	orrs	r2, r1
    dab0:	0017      	movs	r7, r2
    dab2:	2100      	movs	r1, #0
    dab4:	1e7a      	subs	r2, r7, #1
    dab6:	4197      	sbcs	r7, r2
    dab8:	e6ee      	b.n	d898 <__aeabi_dsub+0xa4>
    daba:	2b00      	cmp	r3, #0
    dabc:	d000      	beq.n	dac0 <__aeabi_dsub+0x2cc>
    dabe:	e0e5      	b.n	dc8c <__aeabi_dsub+0x498>
    dac0:	1c73      	adds	r3, r6, #1
    dac2:	469c      	mov	ip, r3
    dac4:	055b      	lsls	r3, r3, #21
    dac6:	0d5b      	lsrs	r3, r3, #21
    dac8:	2b01      	cmp	r3, #1
    daca:	dc00      	bgt.n	dace <__aeabi_dsub+0x2da>
    dacc:	e09f      	b.n	dc0e <__aeabi_dsub+0x41a>
    dace:	4b1a      	ldr	r3, [pc, #104]	; (db38 <__aeabi_dsub+0x344>)
    dad0:	459c      	cmp	ip, r3
    dad2:	d100      	bne.n	dad6 <__aeabi_dsub+0x2e2>
    dad4:	e0c5      	b.n	dc62 <__aeabi_dsub+0x46e>
    dad6:	4452      	add	r2, sl
    dad8:	4552      	cmp	r2, sl
    dada:	4180      	sbcs	r0, r0
    dadc:	1864      	adds	r4, r4, r1
    dade:	4240      	negs	r0, r0
    dae0:	1824      	adds	r4, r4, r0
    dae2:	07e7      	lsls	r7, r4, #31
    dae4:	0852      	lsrs	r2, r2, #1
    dae6:	4317      	orrs	r7, r2
    dae8:	0864      	lsrs	r4, r4, #1
    daea:	4666      	mov	r6, ip
    daec:	e708      	b.n	d900 <__aeabi_dsub+0x10c>
    daee:	4812      	ldr	r0, [pc, #72]	; (db38 <__aeabi_dsub+0x344>)
    daf0:	4285      	cmp	r5, r0
    daf2:	d100      	bne.n	daf6 <__aeabi_dsub+0x302>
    daf4:	e085      	b.n	dc02 <__aeabi_dsub+0x40e>
    daf6:	001d      	movs	r5, r3
    daf8:	e6bc      	b.n	d874 <__aeabi_dsub+0x80>
    dafa:	0029      	movs	r1, r5
    dafc:	3e1f      	subs	r6, #31
    dafe:	40f1      	lsrs	r1, r6
    db00:	2b20      	cmp	r3, #32
    db02:	d100      	bne.n	db06 <__aeabi_dsub+0x312>
    db04:	e07f      	b.n	dc06 <__aeabi_dsub+0x412>
    db06:	2240      	movs	r2, #64	; 0x40
    db08:	1ad3      	subs	r3, r2, r3
    db0a:	409d      	lsls	r5, r3
    db0c:	432f      	orrs	r7, r5
    db0e:	1e7d      	subs	r5, r7, #1
    db10:	41af      	sbcs	r7, r5
    db12:	2400      	movs	r4, #0
    db14:	430f      	orrs	r7, r1
    db16:	2600      	movs	r6, #0
    db18:	e78e      	b.n	da38 <__aeabi_dsub+0x244>
    db1a:	002b      	movs	r3, r5
    db1c:	000f      	movs	r7, r1
    db1e:	3b20      	subs	r3, #32
    db20:	40df      	lsrs	r7, r3
    db22:	2d20      	cmp	r5, #32
    db24:	d071      	beq.n	dc0a <__aeabi_dsub+0x416>
    db26:	2340      	movs	r3, #64	; 0x40
    db28:	1b5d      	subs	r5, r3, r5
    db2a:	40a9      	lsls	r1, r5
    db2c:	430a      	orrs	r2, r1
    db2e:	1e51      	subs	r1, r2, #1
    db30:	418a      	sbcs	r2, r1
    db32:	2100      	movs	r1, #0
    db34:	4317      	orrs	r7, r2
    db36:	e6af      	b.n	d898 <__aeabi_dsub+0xa4>
    db38:	000007ff 	.word	0x000007ff
    db3c:	ff7fffff 	.word	0xff7fffff
    db40:	800fffff 	.word	0x800fffff
    db44:	2e00      	cmp	r6, #0
    db46:	d03e      	beq.n	dbc6 <__aeabi_dsub+0x3d2>
    db48:	4eb3      	ldr	r6, [pc, #716]	; (de18 <__aeabi_dsub+0x624>)
    db4a:	45b4      	cmp	ip, r6
    db4c:	d045      	beq.n	dbda <__aeabi_dsub+0x3e6>
    db4e:	2680      	movs	r6, #128	; 0x80
    db50:	0436      	lsls	r6, r6, #16
    db52:	426d      	negs	r5, r5
    db54:	4334      	orrs	r4, r6
    db56:	2d38      	cmp	r5, #56	; 0x38
    db58:	dd00      	ble.n	db5c <__aeabi_dsub+0x368>
    db5a:	e0a8      	b.n	dcae <__aeabi_dsub+0x4ba>
    db5c:	2d1f      	cmp	r5, #31
    db5e:	dd00      	ble.n	db62 <__aeabi_dsub+0x36e>
    db60:	e11f      	b.n	dda2 <__aeabi_dsub+0x5ae>
    db62:	2620      	movs	r6, #32
    db64:	0027      	movs	r7, r4
    db66:	4650      	mov	r0, sl
    db68:	1b76      	subs	r6, r6, r5
    db6a:	40b7      	lsls	r7, r6
    db6c:	40e8      	lsrs	r0, r5
    db6e:	4307      	orrs	r7, r0
    db70:	4650      	mov	r0, sl
    db72:	40b0      	lsls	r0, r6
    db74:	1e46      	subs	r6, r0, #1
    db76:	41b0      	sbcs	r0, r6
    db78:	40ec      	lsrs	r4, r5
    db7a:	4338      	orrs	r0, r7
    db7c:	1a17      	subs	r7, r2, r0
    db7e:	42ba      	cmp	r2, r7
    db80:	4192      	sbcs	r2, r2
    db82:	1b0c      	subs	r4, r1, r4
    db84:	4252      	negs	r2, r2
    db86:	1aa4      	subs	r4, r4, r2
    db88:	4666      	mov	r6, ip
    db8a:	4698      	mov	r8, r3
    db8c:	e68b      	b.n	d8a6 <__aeabi_dsub+0xb2>
    db8e:	4664      	mov	r4, ip
    db90:	4667      	mov	r7, ip
    db92:	432c      	orrs	r4, r5
    db94:	d000      	beq.n	db98 <__aeabi_dsub+0x3a4>
    db96:	e68b      	b.n	d8b0 <__aeabi_dsub+0xbc>
    db98:	2500      	movs	r5, #0
    db9a:	2600      	movs	r6, #0
    db9c:	2700      	movs	r7, #0
    db9e:	e6ea      	b.n	d976 <__aeabi_dsub+0x182>
    dba0:	001e      	movs	r6, r3
    dba2:	e6ad      	b.n	d900 <__aeabi_dsub+0x10c>
    dba4:	2b1f      	cmp	r3, #31
    dba6:	dc60      	bgt.n	dc6a <__aeabi_dsub+0x476>
    dba8:	2720      	movs	r7, #32
    dbaa:	1af8      	subs	r0, r7, r3
    dbac:	000f      	movs	r7, r1
    dbae:	4684      	mov	ip, r0
    dbb0:	4087      	lsls	r7, r0
    dbb2:	0010      	movs	r0, r2
    dbb4:	40d8      	lsrs	r0, r3
    dbb6:	4307      	orrs	r7, r0
    dbb8:	4660      	mov	r0, ip
    dbba:	4082      	lsls	r2, r0
    dbbc:	1e50      	subs	r0, r2, #1
    dbbe:	4182      	sbcs	r2, r0
    dbc0:	40d9      	lsrs	r1, r3
    dbc2:	4317      	orrs	r7, r2
    dbc4:	e6f5      	b.n	d9b2 <__aeabi_dsub+0x1be>
    dbc6:	0026      	movs	r6, r4
    dbc8:	4650      	mov	r0, sl
    dbca:	4306      	orrs	r6, r0
    dbcc:	d005      	beq.n	dbda <__aeabi_dsub+0x3e6>
    dbce:	43ed      	mvns	r5, r5
    dbd0:	2d00      	cmp	r5, #0
    dbd2:	d0d3      	beq.n	db7c <__aeabi_dsub+0x388>
    dbd4:	4e90      	ldr	r6, [pc, #576]	; (de18 <__aeabi_dsub+0x624>)
    dbd6:	45b4      	cmp	ip, r6
    dbd8:	d1bd      	bne.n	db56 <__aeabi_dsub+0x362>
    dbda:	000c      	movs	r4, r1
    dbdc:	0017      	movs	r7, r2
    dbde:	4666      	mov	r6, ip
    dbe0:	4698      	mov	r8, r3
    dbe2:	e68d      	b.n	d900 <__aeabi_dsub+0x10c>
    dbe4:	488c      	ldr	r0, [pc, #560]	; (de18 <__aeabi_dsub+0x624>)
    dbe6:	4283      	cmp	r3, r0
    dbe8:	d00b      	beq.n	dc02 <__aeabi_dsub+0x40e>
    dbea:	4663      	mov	r3, ip
    dbec:	e6d9      	b.n	d9a2 <__aeabi_dsub+0x1ae>
    dbee:	2d00      	cmp	r5, #0
    dbf0:	d000      	beq.n	dbf4 <__aeabi_dsub+0x400>
    dbf2:	e096      	b.n	dd22 <__aeabi_dsub+0x52e>
    dbf4:	0008      	movs	r0, r1
    dbf6:	4310      	orrs	r0, r2
    dbf8:	d100      	bne.n	dbfc <__aeabi_dsub+0x408>
    dbfa:	e0e2      	b.n	ddc2 <__aeabi_dsub+0x5ce>
    dbfc:	000c      	movs	r4, r1
    dbfe:	0017      	movs	r7, r2
    dc00:	4698      	mov	r8, r3
    dc02:	4e85      	ldr	r6, [pc, #532]	; (de18 <__aeabi_dsub+0x624>)
    dc04:	e67c      	b.n	d900 <__aeabi_dsub+0x10c>
    dc06:	2500      	movs	r5, #0
    dc08:	e780      	b.n	db0c <__aeabi_dsub+0x318>
    dc0a:	2100      	movs	r1, #0
    dc0c:	e78e      	b.n	db2c <__aeabi_dsub+0x338>
    dc0e:	0023      	movs	r3, r4
    dc10:	4650      	mov	r0, sl
    dc12:	4303      	orrs	r3, r0
    dc14:	2e00      	cmp	r6, #0
    dc16:	d000      	beq.n	dc1a <__aeabi_dsub+0x426>
    dc18:	e0a8      	b.n	dd6c <__aeabi_dsub+0x578>
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	d100      	bne.n	dc20 <__aeabi_dsub+0x42c>
    dc1e:	e0de      	b.n	ddde <__aeabi_dsub+0x5ea>
    dc20:	000b      	movs	r3, r1
    dc22:	4313      	orrs	r3, r2
    dc24:	d100      	bne.n	dc28 <__aeabi_dsub+0x434>
    dc26:	e66b      	b.n	d900 <__aeabi_dsub+0x10c>
    dc28:	4452      	add	r2, sl
    dc2a:	4552      	cmp	r2, sl
    dc2c:	4180      	sbcs	r0, r0
    dc2e:	1864      	adds	r4, r4, r1
    dc30:	4240      	negs	r0, r0
    dc32:	1824      	adds	r4, r4, r0
    dc34:	0017      	movs	r7, r2
    dc36:	0223      	lsls	r3, r4, #8
    dc38:	d400      	bmi.n	dc3c <__aeabi_dsub+0x448>
    dc3a:	e6fd      	b.n	da38 <__aeabi_dsub+0x244>
    dc3c:	4b77      	ldr	r3, [pc, #476]	; (de1c <__aeabi_dsub+0x628>)
    dc3e:	4666      	mov	r6, ip
    dc40:	401c      	ands	r4, r3
    dc42:	e65d      	b.n	d900 <__aeabi_dsub+0x10c>
    dc44:	0025      	movs	r5, r4
    dc46:	4650      	mov	r0, sl
    dc48:	4305      	orrs	r5, r0
    dc4a:	2e00      	cmp	r6, #0
    dc4c:	d1cf      	bne.n	dbee <__aeabi_dsub+0x3fa>
    dc4e:	2d00      	cmp	r5, #0
    dc50:	d14f      	bne.n	dcf2 <__aeabi_dsub+0x4fe>
    dc52:	000c      	movs	r4, r1
    dc54:	4314      	orrs	r4, r2
    dc56:	d100      	bne.n	dc5a <__aeabi_dsub+0x466>
    dc58:	e0a0      	b.n	dd9c <__aeabi_dsub+0x5a8>
    dc5a:	000c      	movs	r4, r1
    dc5c:	0017      	movs	r7, r2
    dc5e:	4698      	mov	r8, r3
    dc60:	e64e      	b.n	d900 <__aeabi_dsub+0x10c>
    dc62:	4666      	mov	r6, ip
    dc64:	2400      	movs	r4, #0
    dc66:	2700      	movs	r7, #0
    dc68:	e685      	b.n	d976 <__aeabi_dsub+0x182>
    dc6a:	001f      	movs	r7, r3
    dc6c:	0008      	movs	r0, r1
    dc6e:	3f20      	subs	r7, #32
    dc70:	40f8      	lsrs	r0, r7
    dc72:	0007      	movs	r7, r0
    dc74:	2b20      	cmp	r3, #32
    dc76:	d100      	bne.n	dc7a <__aeabi_dsub+0x486>
    dc78:	e08e      	b.n	dd98 <__aeabi_dsub+0x5a4>
    dc7a:	2040      	movs	r0, #64	; 0x40
    dc7c:	1ac3      	subs	r3, r0, r3
    dc7e:	4099      	lsls	r1, r3
    dc80:	430a      	orrs	r2, r1
    dc82:	1e51      	subs	r1, r2, #1
    dc84:	418a      	sbcs	r2, r1
    dc86:	2100      	movs	r1, #0
    dc88:	4317      	orrs	r7, r2
    dc8a:	e692      	b.n	d9b2 <__aeabi_dsub+0x1be>
    dc8c:	2e00      	cmp	r6, #0
    dc8e:	d114      	bne.n	dcba <__aeabi_dsub+0x4c6>
    dc90:	0026      	movs	r6, r4
    dc92:	4650      	mov	r0, sl
    dc94:	4306      	orrs	r6, r0
    dc96:	d062      	beq.n	dd5e <__aeabi_dsub+0x56a>
    dc98:	43db      	mvns	r3, r3
    dc9a:	2b00      	cmp	r3, #0
    dc9c:	d15c      	bne.n	dd58 <__aeabi_dsub+0x564>
    dc9e:	1887      	adds	r7, r0, r2
    dca0:	4297      	cmp	r7, r2
    dca2:	4192      	sbcs	r2, r2
    dca4:	1864      	adds	r4, r4, r1
    dca6:	4252      	negs	r2, r2
    dca8:	18a4      	adds	r4, r4, r2
    dcaa:	4666      	mov	r6, ip
    dcac:	e687      	b.n	d9be <__aeabi_dsub+0x1ca>
    dcae:	4650      	mov	r0, sl
    dcb0:	4320      	orrs	r0, r4
    dcb2:	1e44      	subs	r4, r0, #1
    dcb4:	41a0      	sbcs	r0, r4
    dcb6:	2400      	movs	r4, #0
    dcb8:	e760      	b.n	db7c <__aeabi_dsub+0x388>
    dcba:	4e57      	ldr	r6, [pc, #348]	; (de18 <__aeabi_dsub+0x624>)
    dcbc:	45b4      	cmp	ip, r6
    dcbe:	d04e      	beq.n	dd5e <__aeabi_dsub+0x56a>
    dcc0:	2680      	movs	r6, #128	; 0x80
    dcc2:	0436      	lsls	r6, r6, #16
    dcc4:	425b      	negs	r3, r3
    dcc6:	4334      	orrs	r4, r6
    dcc8:	2b38      	cmp	r3, #56	; 0x38
    dcca:	dd00      	ble.n	dcce <__aeabi_dsub+0x4da>
    dccc:	e07f      	b.n	ddce <__aeabi_dsub+0x5da>
    dcce:	2b1f      	cmp	r3, #31
    dcd0:	dd00      	ble.n	dcd4 <__aeabi_dsub+0x4e0>
    dcd2:	e08b      	b.n	ddec <__aeabi_dsub+0x5f8>
    dcd4:	2620      	movs	r6, #32
    dcd6:	0027      	movs	r7, r4
    dcd8:	4650      	mov	r0, sl
    dcda:	1af6      	subs	r6, r6, r3
    dcdc:	40b7      	lsls	r7, r6
    dcde:	40d8      	lsrs	r0, r3
    dce0:	4307      	orrs	r7, r0
    dce2:	4650      	mov	r0, sl
    dce4:	40b0      	lsls	r0, r6
    dce6:	1e46      	subs	r6, r0, #1
    dce8:	41b0      	sbcs	r0, r6
    dcea:	4307      	orrs	r7, r0
    dcec:	40dc      	lsrs	r4, r3
    dcee:	18bf      	adds	r7, r7, r2
    dcf0:	e7d6      	b.n	dca0 <__aeabi_dsub+0x4ac>
    dcf2:	000d      	movs	r5, r1
    dcf4:	4315      	orrs	r5, r2
    dcf6:	d100      	bne.n	dcfa <__aeabi_dsub+0x506>
    dcf8:	e602      	b.n	d900 <__aeabi_dsub+0x10c>
    dcfa:	4650      	mov	r0, sl
    dcfc:	1a80      	subs	r0, r0, r2
    dcfe:	4582      	cmp	sl, r0
    dd00:	41bf      	sbcs	r7, r7
    dd02:	1a65      	subs	r5, r4, r1
    dd04:	427f      	negs	r7, r7
    dd06:	1bed      	subs	r5, r5, r7
    dd08:	4684      	mov	ip, r0
    dd0a:	0228      	lsls	r0, r5, #8
    dd0c:	d400      	bmi.n	dd10 <__aeabi_dsub+0x51c>
    dd0e:	e68d      	b.n	da2c <__aeabi_dsub+0x238>
    dd10:	4650      	mov	r0, sl
    dd12:	1a17      	subs	r7, r2, r0
    dd14:	42ba      	cmp	r2, r7
    dd16:	4192      	sbcs	r2, r2
    dd18:	1b0c      	subs	r4, r1, r4
    dd1a:	4252      	negs	r2, r2
    dd1c:	1aa4      	subs	r4, r4, r2
    dd1e:	4698      	mov	r8, r3
    dd20:	e5ee      	b.n	d900 <__aeabi_dsub+0x10c>
    dd22:	000d      	movs	r5, r1
    dd24:	4315      	orrs	r5, r2
    dd26:	d100      	bne.n	dd2a <__aeabi_dsub+0x536>
    dd28:	e76b      	b.n	dc02 <__aeabi_dsub+0x40e>
    dd2a:	4650      	mov	r0, sl
    dd2c:	0767      	lsls	r7, r4, #29
    dd2e:	08c0      	lsrs	r0, r0, #3
    dd30:	4307      	orrs	r7, r0
    dd32:	2080      	movs	r0, #128	; 0x80
    dd34:	08e4      	lsrs	r4, r4, #3
    dd36:	0300      	lsls	r0, r0, #12
    dd38:	4204      	tst	r4, r0
    dd3a:	d007      	beq.n	dd4c <__aeabi_dsub+0x558>
    dd3c:	08cd      	lsrs	r5, r1, #3
    dd3e:	4205      	tst	r5, r0
    dd40:	d104      	bne.n	dd4c <__aeabi_dsub+0x558>
    dd42:	002c      	movs	r4, r5
    dd44:	4698      	mov	r8, r3
    dd46:	08d7      	lsrs	r7, r2, #3
    dd48:	0749      	lsls	r1, r1, #29
    dd4a:	430f      	orrs	r7, r1
    dd4c:	0f7b      	lsrs	r3, r7, #29
    dd4e:	00e4      	lsls	r4, r4, #3
    dd50:	431c      	orrs	r4, r3
    dd52:	00ff      	lsls	r7, r7, #3
    dd54:	4e30      	ldr	r6, [pc, #192]	; (de18 <__aeabi_dsub+0x624>)
    dd56:	e5d3      	b.n	d900 <__aeabi_dsub+0x10c>
    dd58:	4e2f      	ldr	r6, [pc, #188]	; (de18 <__aeabi_dsub+0x624>)
    dd5a:	45b4      	cmp	ip, r6
    dd5c:	d1b4      	bne.n	dcc8 <__aeabi_dsub+0x4d4>
    dd5e:	000c      	movs	r4, r1
    dd60:	0017      	movs	r7, r2
    dd62:	4666      	mov	r6, ip
    dd64:	e5cc      	b.n	d900 <__aeabi_dsub+0x10c>
    dd66:	2700      	movs	r7, #0
    dd68:	2400      	movs	r4, #0
    dd6a:	e5e8      	b.n	d93e <__aeabi_dsub+0x14a>
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	d039      	beq.n	dde4 <__aeabi_dsub+0x5f0>
    dd70:	000b      	movs	r3, r1
    dd72:	4313      	orrs	r3, r2
    dd74:	d100      	bne.n	dd78 <__aeabi_dsub+0x584>
    dd76:	e744      	b.n	dc02 <__aeabi_dsub+0x40e>
    dd78:	08c0      	lsrs	r0, r0, #3
    dd7a:	0767      	lsls	r7, r4, #29
    dd7c:	4307      	orrs	r7, r0
    dd7e:	2080      	movs	r0, #128	; 0x80
    dd80:	08e4      	lsrs	r4, r4, #3
    dd82:	0300      	lsls	r0, r0, #12
    dd84:	4204      	tst	r4, r0
    dd86:	d0e1      	beq.n	dd4c <__aeabi_dsub+0x558>
    dd88:	08cb      	lsrs	r3, r1, #3
    dd8a:	4203      	tst	r3, r0
    dd8c:	d1de      	bne.n	dd4c <__aeabi_dsub+0x558>
    dd8e:	08d7      	lsrs	r7, r2, #3
    dd90:	0749      	lsls	r1, r1, #29
    dd92:	430f      	orrs	r7, r1
    dd94:	001c      	movs	r4, r3
    dd96:	e7d9      	b.n	dd4c <__aeabi_dsub+0x558>
    dd98:	2100      	movs	r1, #0
    dd9a:	e771      	b.n	dc80 <__aeabi_dsub+0x48c>
    dd9c:	2500      	movs	r5, #0
    dd9e:	2700      	movs	r7, #0
    dda0:	e5e9      	b.n	d976 <__aeabi_dsub+0x182>
    dda2:	002e      	movs	r6, r5
    dda4:	0027      	movs	r7, r4
    dda6:	3e20      	subs	r6, #32
    dda8:	40f7      	lsrs	r7, r6
    ddaa:	2d20      	cmp	r5, #32
    ddac:	d02f      	beq.n	de0e <__aeabi_dsub+0x61a>
    ddae:	2640      	movs	r6, #64	; 0x40
    ddb0:	1b75      	subs	r5, r6, r5
    ddb2:	40ac      	lsls	r4, r5
    ddb4:	4650      	mov	r0, sl
    ddb6:	4320      	orrs	r0, r4
    ddb8:	1e44      	subs	r4, r0, #1
    ddba:	41a0      	sbcs	r0, r4
    ddbc:	2400      	movs	r4, #0
    ddbe:	4338      	orrs	r0, r7
    ddc0:	e6dc      	b.n	db7c <__aeabi_dsub+0x388>
    ddc2:	2480      	movs	r4, #128	; 0x80
    ddc4:	2500      	movs	r5, #0
    ddc6:	0324      	lsls	r4, r4, #12
    ddc8:	4e13      	ldr	r6, [pc, #76]	; (de18 <__aeabi_dsub+0x624>)
    ddca:	2700      	movs	r7, #0
    ddcc:	e5d3      	b.n	d976 <__aeabi_dsub+0x182>
    ddce:	4650      	mov	r0, sl
    ddd0:	4320      	orrs	r0, r4
    ddd2:	0007      	movs	r7, r0
    ddd4:	1e78      	subs	r0, r7, #1
    ddd6:	4187      	sbcs	r7, r0
    ddd8:	2400      	movs	r4, #0
    ddda:	18bf      	adds	r7, r7, r2
    dddc:	e760      	b.n	dca0 <__aeabi_dsub+0x4ac>
    ddde:	000c      	movs	r4, r1
    dde0:	0017      	movs	r7, r2
    dde2:	e58d      	b.n	d900 <__aeabi_dsub+0x10c>
    dde4:	000c      	movs	r4, r1
    dde6:	0017      	movs	r7, r2
    dde8:	4e0b      	ldr	r6, [pc, #44]	; (de18 <__aeabi_dsub+0x624>)
    ddea:	e589      	b.n	d900 <__aeabi_dsub+0x10c>
    ddec:	001e      	movs	r6, r3
    ddee:	0027      	movs	r7, r4
    ddf0:	3e20      	subs	r6, #32
    ddf2:	40f7      	lsrs	r7, r6
    ddf4:	2b20      	cmp	r3, #32
    ddf6:	d00c      	beq.n	de12 <__aeabi_dsub+0x61e>
    ddf8:	2640      	movs	r6, #64	; 0x40
    ddfa:	1af3      	subs	r3, r6, r3
    ddfc:	409c      	lsls	r4, r3
    ddfe:	4650      	mov	r0, sl
    de00:	4320      	orrs	r0, r4
    de02:	1e44      	subs	r4, r0, #1
    de04:	41a0      	sbcs	r0, r4
    de06:	4307      	orrs	r7, r0
    de08:	2400      	movs	r4, #0
    de0a:	18bf      	adds	r7, r7, r2
    de0c:	e748      	b.n	dca0 <__aeabi_dsub+0x4ac>
    de0e:	2400      	movs	r4, #0
    de10:	e7d0      	b.n	ddb4 <__aeabi_dsub+0x5c0>
    de12:	2400      	movs	r4, #0
    de14:	e7f3      	b.n	ddfe <__aeabi_dsub+0x60a>
    de16:	46c0      	nop			; (mov r8, r8)
    de18:	000007ff 	.word	0x000007ff
    de1c:	ff7fffff 	.word	0xff7fffff

0000de20 <__aeabi_dcmpun>:
    de20:	b570      	push	{r4, r5, r6, lr}
    de22:	4e0e      	ldr	r6, [pc, #56]	; (de5c <__aeabi_dcmpun+0x3c>)
    de24:	030d      	lsls	r5, r1, #12
    de26:	031c      	lsls	r4, r3, #12
    de28:	0049      	lsls	r1, r1, #1
    de2a:	005b      	lsls	r3, r3, #1
    de2c:	0b2d      	lsrs	r5, r5, #12
    de2e:	0d49      	lsrs	r1, r1, #21
    de30:	0b24      	lsrs	r4, r4, #12
    de32:	0d5b      	lsrs	r3, r3, #21
    de34:	42b1      	cmp	r1, r6
    de36:	d004      	beq.n	de42 <__aeabi_dcmpun+0x22>
    de38:	4908      	ldr	r1, [pc, #32]	; (de5c <__aeabi_dcmpun+0x3c>)
    de3a:	2000      	movs	r0, #0
    de3c:	428b      	cmp	r3, r1
    de3e:	d008      	beq.n	de52 <__aeabi_dcmpun+0x32>
    de40:	bd70      	pop	{r4, r5, r6, pc}
    de42:	4305      	orrs	r5, r0
    de44:	2001      	movs	r0, #1
    de46:	2d00      	cmp	r5, #0
    de48:	d1fa      	bne.n	de40 <__aeabi_dcmpun+0x20>
    de4a:	4904      	ldr	r1, [pc, #16]	; (de5c <__aeabi_dcmpun+0x3c>)
    de4c:	2000      	movs	r0, #0
    de4e:	428b      	cmp	r3, r1
    de50:	d1f6      	bne.n	de40 <__aeabi_dcmpun+0x20>
    de52:	4314      	orrs	r4, r2
    de54:	0020      	movs	r0, r4
    de56:	1e44      	subs	r4, r0, #1
    de58:	41a0      	sbcs	r0, r4
    de5a:	e7f1      	b.n	de40 <__aeabi_dcmpun+0x20>
    de5c:	000007ff 	.word	0x000007ff

0000de60 <__aeabi_d2iz>:
    de60:	b530      	push	{r4, r5, lr}
    de62:	4d13      	ldr	r5, [pc, #76]	; (deb0 <__aeabi_d2iz+0x50>)
    de64:	030a      	lsls	r2, r1, #12
    de66:	004b      	lsls	r3, r1, #1
    de68:	0b12      	lsrs	r2, r2, #12
    de6a:	0d5b      	lsrs	r3, r3, #21
    de6c:	0fc9      	lsrs	r1, r1, #31
    de6e:	2400      	movs	r4, #0
    de70:	42ab      	cmp	r3, r5
    de72:	dd10      	ble.n	de96 <__aeabi_d2iz+0x36>
    de74:	4c0f      	ldr	r4, [pc, #60]	; (deb4 <__aeabi_d2iz+0x54>)
    de76:	42a3      	cmp	r3, r4
    de78:	dc0f      	bgt.n	de9a <__aeabi_d2iz+0x3a>
    de7a:	2480      	movs	r4, #128	; 0x80
    de7c:	4d0e      	ldr	r5, [pc, #56]	; (deb8 <__aeabi_d2iz+0x58>)
    de7e:	0364      	lsls	r4, r4, #13
    de80:	4322      	orrs	r2, r4
    de82:	1aed      	subs	r5, r5, r3
    de84:	2d1f      	cmp	r5, #31
    de86:	dd0b      	ble.n	dea0 <__aeabi_d2iz+0x40>
    de88:	480c      	ldr	r0, [pc, #48]	; (debc <__aeabi_d2iz+0x5c>)
    de8a:	1ac3      	subs	r3, r0, r3
    de8c:	40da      	lsrs	r2, r3
    de8e:	4254      	negs	r4, r2
    de90:	2900      	cmp	r1, #0
    de92:	d100      	bne.n	de96 <__aeabi_d2iz+0x36>
    de94:	0014      	movs	r4, r2
    de96:	0020      	movs	r0, r4
    de98:	bd30      	pop	{r4, r5, pc}
    de9a:	4b09      	ldr	r3, [pc, #36]	; (dec0 <__aeabi_d2iz+0x60>)
    de9c:	18cc      	adds	r4, r1, r3
    de9e:	e7fa      	b.n	de96 <__aeabi_d2iz+0x36>
    dea0:	4c08      	ldr	r4, [pc, #32]	; (dec4 <__aeabi_d2iz+0x64>)
    dea2:	40e8      	lsrs	r0, r5
    dea4:	46a4      	mov	ip, r4
    dea6:	4463      	add	r3, ip
    dea8:	409a      	lsls	r2, r3
    deaa:	4302      	orrs	r2, r0
    deac:	e7ef      	b.n	de8e <__aeabi_d2iz+0x2e>
    deae:	46c0      	nop			; (mov r8, r8)
    deb0:	000003fe 	.word	0x000003fe
    deb4:	0000041d 	.word	0x0000041d
    deb8:	00000433 	.word	0x00000433
    debc:	00000413 	.word	0x00000413
    dec0:	7fffffff 	.word	0x7fffffff
    dec4:	fffffbed 	.word	0xfffffbed

0000dec8 <__aeabi_i2d>:
    dec8:	b570      	push	{r4, r5, r6, lr}
    deca:	2800      	cmp	r0, #0
    decc:	d030      	beq.n	df30 <__aeabi_i2d+0x68>
    dece:	17c3      	asrs	r3, r0, #31
    ded0:	18c4      	adds	r4, r0, r3
    ded2:	405c      	eors	r4, r3
    ded4:	0fc5      	lsrs	r5, r0, #31
    ded6:	0020      	movs	r0, r4
    ded8:	f000 f94c 	bl	e174 <__clzsi2>
    dedc:	4b17      	ldr	r3, [pc, #92]	; (df3c <__aeabi_i2d+0x74>)
    dede:	4a18      	ldr	r2, [pc, #96]	; (df40 <__aeabi_i2d+0x78>)
    dee0:	1a1b      	subs	r3, r3, r0
    dee2:	1ad2      	subs	r2, r2, r3
    dee4:	2a1f      	cmp	r2, #31
    dee6:	dd18      	ble.n	df1a <__aeabi_i2d+0x52>
    dee8:	4a16      	ldr	r2, [pc, #88]	; (df44 <__aeabi_i2d+0x7c>)
    deea:	1ad2      	subs	r2, r2, r3
    deec:	4094      	lsls	r4, r2
    deee:	2200      	movs	r2, #0
    def0:	0324      	lsls	r4, r4, #12
    def2:	055b      	lsls	r3, r3, #21
    def4:	0b24      	lsrs	r4, r4, #12
    def6:	0d5b      	lsrs	r3, r3, #21
    def8:	2100      	movs	r1, #0
    defa:	0010      	movs	r0, r2
    defc:	0324      	lsls	r4, r4, #12
    defe:	0d0a      	lsrs	r2, r1, #20
    df00:	0b24      	lsrs	r4, r4, #12
    df02:	0512      	lsls	r2, r2, #20
    df04:	4322      	orrs	r2, r4
    df06:	4c10      	ldr	r4, [pc, #64]	; (df48 <__aeabi_i2d+0x80>)
    df08:	051b      	lsls	r3, r3, #20
    df0a:	4022      	ands	r2, r4
    df0c:	4313      	orrs	r3, r2
    df0e:	005b      	lsls	r3, r3, #1
    df10:	07ed      	lsls	r5, r5, #31
    df12:	085b      	lsrs	r3, r3, #1
    df14:	432b      	orrs	r3, r5
    df16:	0019      	movs	r1, r3
    df18:	bd70      	pop	{r4, r5, r6, pc}
    df1a:	0021      	movs	r1, r4
    df1c:	4091      	lsls	r1, r2
    df1e:	000a      	movs	r2, r1
    df20:	210b      	movs	r1, #11
    df22:	1a08      	subs	r0, r1, r0
    df24:	40c4      	lsrs	r4, r0
    df26:	055b      	lsls	r3, r3, #21
    df28:	0324      	lsls	r4, r4, #12
    df2a:	0b24      	lsrs	r4, r4, #12
    df2c:	0d5b      	lsrs	r3, r3, #21
    df2e:	e7e3      	b.n	def8 <__aeabi_i2d+0x30>
    df30:	2500      	movs	r5, #0
    df32:	2300      	movs	r3, #0
    df34:	2400      	movs	r4, #0
    df36:	2200      	movs	r2, #0
    df38:	e7de      	b.n	def8 <__aeabi_i2d+0x30>
    df3a:	46c0      	nop			; (mov r8, r8)
    df3c:	0000041e 	.word	0x0000041e
    df40:	00000433 	.word	0x00000433
    df44:	00000413 	.word	0x00000413
    df48:	800fffff 	.word	0x800fffff

0000df4c <__aeabi_ui2d>:
    df4c:	b510      	push	{r4, lr}
    df4e:	1e04      	subs	r4, r0, #0
    df50:	d028      	beq.n	dfa4 <__aeabi_ui2d+0x58>
    df52:	f000 f90f 	bl	e174 <__clzsi2>
    df56:	4b15      	ldr	r3, [pc, #84]	; (dfac <__aeabi_ui2d+0x60>)
    df58:	4a15      	ldr	r2, [pc, #84]	; (dfb0 <__aeabi_ui2d+0x64>)
    df5a:	1a1b      	subs	r3, r3, r0
    df5c:	1ad2      	subs	r2, r2, r3
    df5e:	2a1f      	cmp	r2, #31
    df60:	dd15      	ble.n	df8e <__aeabi_ui2d+0x42>
    df62:	4a14      	ldr	r2, [pc, #80]	; (dfb4 <__aeabi_ui2d+0x68>)
    df64:	1ad2      	subs	r2, r2, r3
    df66:	4094      	lsls	r4, r2
    df68:	2200      	movs	r2, #0
    df6a:	0324      	lsls	r4, r4, #12
    df6c:	055b      	lsls	r3, r3, #21
    df6e:	0b24      	lsrs	r4, r4, #12
    df70:	0d5b      	lsrs	r3, r3, #21
    df72:	2100      	movs	r1, #0
    df74:	0010      	movs	r0, r2
    df76:	0324      	lsls	r4, r4, #12
    df78:	0d0a      	lsrs	r2, r1, #20
    df7a:	0b24      	lsrs	r4, r4, #12
    df7c:	0512      	lsls	r2, r2, #20
    df7e:	4322      	orrs	r2, r4
    df80:	4c0d      	ldr	r4, [pc, #52]	; (dfb8 <__aeabi_ui2d+0x6c>)
    df82:	051b      	lsls	r3, r3, #20
    df84:	4022      	ands	r2, r4
    df86:	4313      	orrs	r3, r2
    df88:	005b      	lsls	r3, r3, #1
    df8a:	0859      	lsrs	r1, r3, #1
    df8c:	bd10      	pop	{r4, pc}
    df8e:	0021      	movs	r1, r4
    df90:	4091      	lsls	r1, r2
    df92:	000a      	movs	r2, r1
    df94:	210b      	movs	r1, #11
    df96:	1a08      	subs	r0, r1, r0
    df98:	40c4      	lsrs	r4, r0
    df9a:	055b      	lsls	r3, r3, #21
    df9c:	0324      	lsls	r4, r4, #12
    df9e:	0b24      	lsrs	r4, r4, #12
    dfa0:	0d5b      	lsrs	r3, r3, #21
    dfa2:	e7e6      	b.n	df72 <__aeabi_ui2d+0x26>
    dfa4:	2300      	movs	r3, #0
    dfa6:	2400      	movs	r4, #0
    dfa8:	2200      	movs	r2, #0
    dfaa:	e7e2      	b.n	df72 <__aeabi_ui2d+0x26>
    dfac:	0000041e 	.word	0x0000041e
    dfb0:	00000433 	.word	0x00000433
    dfb4:	00000413 	.word	0x00000413
    dfb8:	800fffff 	.word	0x800fffff

0000dfbc <__aeabi_f2d>:
    dfbc:	0041      	lsls	r1, r0, #1
    dfbe:	0e09      	lsrs	r1, r1, #24
    dfc0:	1c4b      	adds	r3, r1, #1
    dfc2:	b570      	push	{r4, r5, r6, lr}
    dfc4:	b2db      	uxtb	r3, r3
    dfc6:	0246      	lsls	r6, r0, #9
    dfc8:	0a75      	lsrs	r5, r6, #9
    dfca:	0fc4      	lsrs	r4, r0, #31
    dfcc:	2b01      	cmp	r3, #1
    dfce:	dd14      	ble.n	dffa <__aeabi_f2d+0x3e>
    dfd0:	23e0      	movs	r3, #224	; 0xe0
    dfd2:	009b      	lsls	r3, r3, #2
    dfd4:	076d      	lsls	r5, r5, #29
    dfd6:	0b36      	lsrs	r6, r6, #12
    dfd8:	18cb      	adds	r3, r1, r3
    dfda:	2100      	movs	r1, #0
    dfdc:	0d0a      	lsrs	r2, r1, #20
    dfde:	0028      	movs	r0, r5
    dfe0:	0512      	lsls	r2, r2, #20
    dfe2:	4d1c      	ldr	r5, [pc, #112]	; (e054 <__aeabi_f2d+0x98>)
    dfe4:	4332      	orrs	r2, r6
    dfe6:	055b      	lsls	r3, r3, #21
    dfe8:	402a      	ands	r2, r5
    dfea:	085b      	lsrs	r3, r3, #1
    dfec:	4313      	orrs	r3, r2
    dfee:	005b      	lsls	r3, r3, #1
    dff0:	07e4      	lsls	r4, r4, #31
    dff2:	085b      	lsrs	r3, r3, #1
    dff4:	4323      	orrs	r3, r4
    dff6:	0019      	movs	r1, r3
    dff8:	bd70      	pop	{r4, r5, r6, pc}
    dffa:	2900      	cmp	r1, #0
    dffc:	d114      	bne.n	e028 <__aeabi_f2d+0x6c>
    dffe:	2d00      	cmp	r5, #0
    e000:	d01e      	beq.n	e040 <__aeabi_f2d+0x84>
    e002:	0028      	movs	r0, r5
    e004:	f000 f8b6 	bl	e174 <__clzsi2>
    e008:	280a      	cmp	r0, #10
    e00a:	dc1c      	bgt.n	e046 <__aeabi_f2d+0x8a>
    e00c:	230b      	movs	r3, #11
    e00e:	002a      	movs	r2, r5
    e010:	1a1b      	subs	r3, r3, r0
    e012:	40da      	lsrs	r2, r3
    e014:	0003      	movs	r3, r0
    e016:	3315      	adds	r3, #21
    e018:	409d      	lsls	r5, r3
    e01a:	4b0f      	ldr	r3, [pc, #60]	; (e058 <__aeabi_f2d+0x9c>)
    e01c:	0312      	lsls	r2, r2, #12
    e01e:	1a1b      	subs	r3, r3, r0
    e020:	055b      	lsls	r3, r3, #21
    e022:	0b16      	lsrs	r6, r2, #12
    e024:	0d5b      	lsrs	r3, r3, #21
    e026:	e7d8      	b.n	dfda <__aeabi_f2d+0x1e>
    e028:	2d00      	cmp	r5, #0
    e02a:	d006      	beq.n	e03a <__aeabi_f2d+0x7e>
    e02c:	0b32      	lsrs	r2, r6, #12
    e02e:	2680      	movs	r6, #128	; 0x80
    e030:	0336      	lsls	r6, r6, #12
    e032:	076d      	lsls	r5, r5, #29
    e034:	4316      	orrs	r6, r2
    e036:	4b09      	ldr	r3, [pc, #36]	; (e05c <__aeabi_f2d+0xa0>)
    e038:	e7cf      	b.n	dfda <__aeabi_f2d+0x1e>
    e03a:	4b08      	ldr	r3, [pc, #32]	; (e05c <__aeabi_f2d+0xa0>)
    e03c:	2600      	movs	r6, #0
    e03e:	e7cc      	b.n	dfda <__aeabi_f2d+0x1e>
    e040:	2300      	movs	r3, #0
    e042:	2600      	movs	r6, #0
    e044:	e7c9      	b.n	dfda <__aeabi_f2d+0x1e>
    e046:	0003      	movs	r3, r0
    e048:	002a      	movs	r2, r5
    e04a:	3b0b      	subs	r3, #11
    e04c:	409a      	lsls	r2, r3
    e04e:	2500      	movs	r5, #0
    e050:	e7e3      	b.n	e01a <__aeabi_f2d+0x5e>
    e052:	46c0      	nop			; (mov r8, r8)
    e054:	800fffff 	.word	0x800fffff
    e058:	00000389 	.word	0x00000389
    e05c:	000007ff 	.word	0x000007ff

0000e060 <__aeabi_d2f>:
    e060:	b5f0      	push	{r4, r5, r6, r7, lr}
    e062:	004c      	lsls	r4, r1, #1
    e064:	0d64      	lsrs	r4, r4, #21
    e066:	030b      	lsls	r3, r1, #12
    e068:	1c62      	adds	r2, r4, #1
    e06a:	0f45      	lsrs	r5, r0, #29
    e06c:	0a5b      	lsrs	r3, r3, #9
    e06e:	0552      	lsls	r2, r2, #21
    e070:	432b      	orrs	r3, r5
    e072:	0fc9      	lsrs	r1, r1, #31
    e074:	00c5      	lsls	r5, r0, #3
    e076:	0d52      	lsrs	r2, r2, #21
    e078:	2a01      	cmp	r2, #1
    e07a:	dd28      	ble.n	e0ce <__aeabi_d2f+0x6e>
    e07c:	4a3a      	ldr	r2, [pc, #232]	; (e168 <__aeabi_d2f+0x108>)
    e07e:	18a6      	adds	r6, r4, r2
    e080:	2efe      	cmp	r6, #254	; 0xfe
    e082:	dc1b      	bgt.n	e0bc <__aeabi_d2f+0x5c>
    e084:	2e00      	cmp	r6, #0
    e086:	dd3e      	ble.n	e106 <__aeabi_d2f+0xa6>
    e088:	0180      	lsls	r0, r0, #6
    e08a:	0002      	movs	r2, r0
    e08c:	1e50      	subs	r0, r2, #1
    e08e:	4182      	sbcs	r2, r0
    e090:	0f6d      	lsrs	r5, r5, #29
    e092:	432a      	orrs	r2, r5
    e094:	00db      	lsls	r3, r3, #3
    e096:	4313      	orrs	r3, r2
    e098:	075a      	lsls	r2, r3, #29
    e09a:	d004      	beq.n	e0a6 <__aeabi_d2f+0x46>
    e09c:	220f      	movs	r2, #15
    e09e:	401a      	ands	r2, r3
    e0a0:	2a04      	cmp	r2, #4
    e0a2:	d000      	beq.n	e0a6 <__aeabi_d2f+0x46>
    e0a4:	3304      	adds	r3, #4
    e0a6:	2280      	movs	r2, #128	; 0x80
    e0a8:	04d2      	lsls	r2, r2, #19
    e0aa:	401a      	ands	r2, r3
    e0ac:	d05a      	beq.n	e164 <__aeabi_d2f+0x104>
    e0ae:	3601      	adds	r6, #1
    e0b0:	2eff      	cmp	r6, #255	; 0xff
    e0b2:	d003      	beq.n	e0bc <__aeabi_d2f+0x5c>
    e0b4:	019b      	lsls	r3, r3, #6
    e0b6:	0a5b      	lsrs	r3, r3, #9
    e0b8:	b2f4      	uxtb	r4, r6
    e0ba:	e001      	b.n	e0c0 <__aeabi_d2f+0x60>
    e0bc:	24ff      	movs	r4, #255	; 0xff
    e0be:	2300      	movs	r3, #0
    e0c0:	0258      	lsls	r0, r3, #9
    e0c2:	05e4      	lsls	r4, r4, #23
    e0c4:	0a40      	lsrs	r0, r0, #9
    e0c6:	07c9      	lsls	r1, r1, #31
    e0c8:	4320      	orrs	r0, r4
    e0ca:	4308      	orrs	r0, r1
    e0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0ce:	2c00      	cmp	r4, #0
    e0d0:	d007      	beq.n	e0e2 <__aeabi_d2f+0x82>
    e0d2:	431d      	orrs	r5, r3
    e0d4:	d0f2      	beq.n	e0bc <__aeabi_d2f+0x5c>
    e0d6:	2080      	movs	r0, #128	; 0x80
    e0d8:	00db      	lsls	r3, r3, #3
    e0da:	0480      	lsls	r0, r0, #18
    e0dc:	4303      	orrs	r3, r0
    e0de:	26ff      	movs	r6, #255	; 0xff
    e0e0:	e7da      	b.n	e098 <__aeabi_d2f+0x38>
    e0e2:	432b      	orrs	r3, r5
    e0e4:	d003      	beq.n	e0ee <__aeabi_d2f+0x8e>
    e0e6:	2305      	movs	r3, #5
    e0e8:	08db      	lsrs	r3, r3, #3
    e0ea:	2cff      	cmp	r4, #255	; 0xff
    e0ec:	d003      	beq.n	e0f6 <__aeabi_d2f+0x96>
    e0ee:	025b      	lsls	r3, r3, #9
    e0f0:	0a5b      	lsrs	r3, r3, #9
    e0f2:	b2e4      	uxtb	r4, r4
    e0f4:	e7e4      	b.n	e0c0 <__aeabi_d2f+0x60>
    e0f6:	2b00      	cmp	r3, #0
    e0f8:	d032      	beq.n	e160 <__aeabi_d2f+0x100>
    e0fa:	2080      	movs	r0, #128	; 0x80
    e0fc:	03c0      	lsls	r0, r0, #15
    e0fe:	4303      	orrs	r3, r0
    e100:	025b      	lsls	r3, r3, #9
    e102:	0a5b      	lsrs	r3, r3, #9
    e104:	e7dc      	b.n	e0c0 <__aeabi_d2f+0x60>
    e106:	0032      	movs	r2, r6
    e108:	3217      	adds	r2, #23
    e10a:	db14      	blt.n	e136 <__aeabi_d2f+0xd6>
    e10c:	2280      	movs	r2, #128	; 0x80
    e10e:	271e      	movs	r7, #30
    e110:	0412      	lsls	r2, r2, #16
    e112:	4313      	orrs	r3, r2
    e114:	1bbf      	subs	r7, r7, r6
    e116:	2f1f      	cmp	r7, #31
    e118:	dc0f      	bgt.n	e13a <__aeabi_d2f+0xda>
    e11a:	4a14      	ldr	r2, [pc, #80]	; (e16c <__aeabi_d2f+0x10c>)
    e11c:	4694      	mov	ip, r2
    e11e:	4464      	add	r4, ip
    e120:	002a      	movs	r2, r5
    e122:	40a5      	lsls	r5, r4
    e124:	002e      	movs	r6, r5
    e126:	40a3      	lsls	r3, r4
    e128:	1e75      	subs	r5, r6, #1
    e12a:	41ae      	sbcs	r6, r5
    e12c:	40fa      	lsrs	r2, r7
    e12e:	4333      	orrs	r3, r6
    e130:	4313      	orrs	r3, r2
    e132:	2600      	movs	r6, #0
    e134:	e7b0      	b.n	e098 <__aeabi_d2f+0x38>
    e136:	2400      	movs	r4, #0
    e138:	e7d5      	b.n	e0e6 <__aeabi_d2f+0x86>
    e13a:	2202      	movs	r2, #2
    e13c:	4252      	negs	r2, r2
    e13e:	1b96      	subs	r6, r2, r6
    e140:	001a      	movs	r2, r3
    e142:	40f2      	lsrs	r2, r6
    e144:	2f20      	cmp	r7, #32
    e146:	d009      	beq.n	e15c <__aeabi_d2f+0xfc>
    e148:	4809      	ldr	r0, [pc, #36]	; (e170 <__aeabi_d2f+0x110>)
    e14a:	4684      	mov	ip, r0
    e14c:	4464      	add	r4, ip
    e14e:	40a3      	lsls	r3, r4
    e150:	432b      	orrs	r3, r5
    e152:	1e5d      	subs	r5, r3, #1
    e154:	41ab      	sbcs	r3, r5
    e156:	2600      	movs	r6, #0
    e158:	4313      	orrs	r3, r2
    e15a:	e79d      	b.n	e098 <__aeabi_d2f+0x38>
    e15c:	2300      	movs	r3, #0
    e15e:	e7f7      	b.n	e150 <__aeabi_d2f+0xf0>
    e160:	2300      	movs	r3, #0
    e162:	e7ad      	b.n	e0c0 <__aeabi_d2f+0x60>
    e164:	0034      	movs	r4, r6
    e166:	e7bf      	b.n	e0e8 <__aeabi_d2f+0x88>
    e168:	fffffc80 	.word	0xfffffc80
    e16c:	fffffc82 	.word	0xfffffc82
    e170:	fffffca2 	.word	0xfffffca2

0000e174 <__clzsi2>:
    e174:	211c      	movs	r1, #28
    e176:	2301      	movs	r3, #1
    e178:	041b      	lsls	r3, r3, #16
    e17a:	4298      	cmp	r0, r3
    e17c:	d301      	bcc.n	e182 <__clzsi2+0xe>
    e17e:	0c00      	lsrs	r0, r0, #16
    e180:	3910      	subs	r1, #16
    e182:	0a1b      	lsrs	r3, r3, #8
    e184:	4298      	cmp	r0, r3
    e186:	d301      	bcc.n	e18c <__clzsi2+0x18>
    e188:	0a00      	lsrs	r0, r0, #8
    e18a:	3908      	subs	r1, #8
    e18c:	091b      	lsrs	r3, r3, #4
    e18e:	4298      	cmp	r0, r3
    e190:	d301      	bcc.n	e196 <__clzsi2+0x22>
    e192:	0900      	lsrs	r0, r0, #4
    e194:	3904      	subs	r1, #4
    e196:	a202      	add	r2, pc, #8	; (adr r2, e1a0 <__clzsi2+0x2c>)
    e198:	5c10      	ldrb	r0, [r2, r0]
    e19a:	1840      	adds	r0, r0, r1
    e19c:	4770      	bx	lr
    e19e:	46c0      	nop			; (mov r8, r8)
    e1a0:	02020304 	.word	0x02020304
    e1a4:	01010101 	.word	0x01010101
	...
    e1b0:	000003b2 	.word	0x000003b2
    e1b4:	000003b6 	.word	0x000003b6
    e1b8:	000003ba 	.word	0x000003ba
    e1bc:	000003be 	.word	0x000003be
    e1c0:	000003c2 	.word	0x000003c2
    e1c4:	000003c6 	.word	0x000003c6
    e1c8:	000003ca 	.word	0x000003ca
    e1cc:	000003ce 	.word	0x000003ce
    e1d0:	000003d2 	.word	0x000003d2
    e1d4:	000003d6 	.word	0x000003d6
    e1d8:	0000042e 	.word	0x0000042e
    e1dc:	00000434 	.word	0x00000434
    e1e0:	0000043a 	.word	0x0000043a
    e1e4:	00000440 	.word	0x00000440
    e1e8:	00000440 	.word	0x00000440
    e1ec:	00000446 	.word	0x00000446
    e1f0:	00000446 	.word	0x00000446
    e1f4:	00000446 	.word	0x00000446
    e1f8:	0000044c 	.word	0x0000044c
    e1fc:	00000452 	.word	0x00000452
    e200:	20434448 	.word	0x20434448
    e204:	54495257 	.word	0x54495257
    e208:	49542045 	.word	0x49542045
    e20c:	554f454d 	.word	0x554f454d
    e210:	00000d54 	.word	0x00000d54
    e214:	20434448 	.word	0x20434448
    e218:	44414552 	.word	0x44414552
    e21c:	4d495420 	.word	0x4d495420
    e220:	54554f45 	.word	0x54554f45
    e224:	0000000d 	.word	0x0000000d
    e228:	20434448 	.word	0x20434448
    e22c:	64616552 	.word	0x64616552
    e230:	6e6f4320 	.word	0x6e6f4320
    e234:	20676966 	.word	0x20676966
    e238:	6f727245 	.word	0x6f727245
    e23c:	00000d72 	.word	0x00000d72
    e240:	20434448 	.word	0x20434448
    e244:	74697257 	.word	0x74697257
    e248:	6f432065 	.word	0x6f432065
    e24c:	6769666e 	.word	0x6769666e
    e250:	72724520 	.word	0x72724520
    e254:	000d726f 	.word	0x000d726f
    e258:	20434448 	.word	0x20434448
    e25c:	64616552 	.word	0x64616552
    e260:	6d655420 	.word	0x6d655420
    e264:	72452070 	.word	0x72452070
    e268:	0d726f72 	.word	0x0d726f72
    e26c:	00000000 	.word	0x00000000
    e270:	20434448 	.word	0x20434448
    e274:	64616552 	.word	0x64616552
    e278:	6d754820 	.word	0x6d754820
    e27c:	74696469 	.word	0x74696469
    e280:	72452079 	.word	0x72452079
    e284:	0d726f72 	.word	0x0d726f72
    e288:	00000000 	.word	0x00000000
    e28c:	00000002 	.word	0x00000002
    e290:	00000003 	.word	0x00000003
    e294:	00000028 	.word	0x00000028
    e298:	00000029 	.word	0x00000029
    e29c:	00000004 	.word	0x00000004
    e2a0:	00000005 	.word	0x00000005
    e2a4:	00000006 	.word	0x00000006
    e2a8:	00000007 	.word	0x00000007
    e2ac:	0000ffff 	.word	0x0000ffff
    e2b0:	0000ffff 	.word	0x0000ffff
    e2b4:	00000022 	.word	0x00000022
    e2b8:	00000023 	.word	0x00000023
    e2bc:	0000ffff 	.word	0x0000ffff
    e2c0:	0000ffff 	.word	0x0000ffff
    e2c4:	0000ffff 	.word	0x0000ffff
    e2c8:	0000ffff 	.word	0x0000ffff
    e2cc:	00000008 	.word	0x00000008
    e2d0:	00000009 	.word	0x00000009
    e2d4:	0000000a 	.word	0x0000000a
    e2d8:	0000000b 	.word	0x0000000b
    e2dc:	00002c96 	.word	0x00002c96
    e2e0:	00002c9c 	.word	0x00002c9c
    e2e4:	00002c9c 	.word	0x00002c9c
    e2e8:	00002c9c 	.word	0x00002c9c
    e2ec:	00002c9c 	.word	0x00002c9c
    e2f0:	00002c9c 	.word	0x00002c9c
    e2f4:	00002c9c 	.word	0x00002c9c
    e2f8:	00002c9c 	.word	0x00002c9c
    e2fc:	00002c9c 	.word	0x00002c9c
    e300:	00002c9c 	.word	0x00002c9c
    e304:	00002c9c 	.word	0x00002c9c
    e308:	00002c9c 	.word	0x00002c9c
    e30c:	00002c9c 	.word	0x00002c9c
    e310:	00002c9c 	.word	0x00002c9c
    e314:	00002c9c 	.word	0x00002c9c
    e318:	00002c9c 	.word	0x00002c9c
    e31c:	00002c74 	.word	0x00002c74
    e320:	00002c9c 	.word	0x00002c9c
    e324:	00002c9c 	.word	0x00002c9c
    e328:	00002c9c 	.word	0x00002c9c
    e32c:	00002c9c 	.word	0x00002c9c
    e330:	00002c9c 	.word	0x00002c9c
    e334:	00002c9c 	.word	0x00002c9c
    e338:	00002c9c 	.word	0x00002c9c
    e33c:	00002c9c 	.word	0x00002c9c
    e340:	00002c9c 	.word	0x00002c9c
    e344:	00002c9c 	.word	0x00002c9c
    e348:	00002c9c 	.word	0x00002c9c
    e34c:	00002c9c 	.word	0x00002c9c
    e350:	00002c9c 	.word	0x00002c9c
    e354:	00002c9c 	.word	0x00002c9c
    e358:	00002c9c 	.word	0x00002c9c
    e35c:	00002c90 	.word	0x00002c90
    e360:	00002c9c 	.word	0x00002c9c
    e364:	00002c9c 	.word	0x00002c9c
    e368:	00002c9c 	.word	0x00002c9c
    e36c:	00002c9c 	.word	0x00002c9c
    e370:	00002c9c 	.word	0x00002c9c
    e374:	00002c9c 	.word	0x00002c9c
    e378:	00002c9c 	.word	0x00002c9c
    e37c:	00002c9c 	.word	0x00002c9c
    e380:	00002c9c 	.word	0x00002c9c
    e384:	00002c9c 	.word	0x00002c9c
    e388:	00002c9c 	.word	0x00002c9c
    e38c:	00002c9c 	.word	0x00002c9c
    e390:	00002c9c 	.word	0x00002c9c
    e394:	00002c9c 	.word	0x00002c9c
    e398:	00002c9c 	.word	0x00002c9c
    e39c:	00002c8a 	.word	0x00002c8a
    e3a0:	00002c32 	.word	0x00002c32
    e3a4:	00002c48 	.word	0x00002c48
    e3a8:	00002c5e 	.word	0x00002c5e
    e3ac:	00002c18 	.word	0x00002c18
    e3b0:	42000800 	.word	0x42000800
    e3b4:	42000c00 	.word	0x42000c00
    e3b8:	42001000 	.word	0x42001000
    e3bc:	42001400 	.word	0x42001400
    e3c0:	42001800 	.word	0x42001800
    e3c4:	42001c00 	.word	0x42001c00
    e3c8:	0c0b0a09 	.word	0x0c0b0a09
    e3cc:	00000e0d 	.word	0x00000e0d
    e3d0:	00005d5e 	.word	0x00005d5e
    e3d4:	00005dd6 	.word	0x00005dd6
    e3d8:	00005dd6 	.word	0x00005dd6
    e3dc:	00005d7c 	.word	0x00005d7c
    e3e0:	00005d76 	.word	0x00005d76
    e3e4:	00005d82 	.word	0x00005d82
    e3e8:	00005d64 	.word	0x00005d64
    e3ec:	00005d88 	.word	0x00005d88
    e3f0:	00005dbc 	.word	0x00005dbc
    e3f4:	000060a0 	.word	0x000060a0
    e3f8:	000060f0 	.word	0x000060f0
    e3fc:	000060f0 	.word	0x000060f0
    e400:	000060ec 	.word	0x000060ec
    e404:	00006092 	.word	0x00006092
    e408:	000060b2 	.word	0x000060b2
    e40c:	00006082 	.word	0x00006082
    e410:	000060c4 	.word	0x000060c4
    e414:	000060d6 	.word	0x000060d6
    e418:	0000613e 	.word	0x0000613e
    e41c:	0000616c 	.word	0x0000616c
    e420:	0000616c 	.word	0x0000616c
    e424:	00006168 	.word	0x00006168
    e428:	00006138 	.word	0x00006138
    e42c:	00006144 	.word	0x00006144
    e430:	00006132 	.word	0x00006132
    e434:	0000614a 	.word	0x0000614a
    e438:	00006150 	.word	0x00006150
    e43c:	796c6e4f 	.word	0x796c6e4f
    e440:	25415020 	.word	0x25415020
    e444:	50202c64 	.word	0x50202c64
    e448:	2c642541 	.word	0x2c642541
    e44c:	25425020 	.word	0x25425020
    e450:	50202c64 	.word	0x50202c64
    e454:	2c642542 	.word	0x2c642542
    e458:	206e6163 	.word	0x206e6163
    e45c:	73206562 	.word	0x73206562
    e460:	0a0d7465 	.word	0x0a0d7465
    e464:	00000000 	.word	0x00000000
    e468:	706c6568 	.word	0x706c6568
    e46c:	50202d20 	.word	0x50202d20
    e470:	746e6972 	.word	0x746e6972
    e474:	6c612073 	.word	0x6c612073
    e478:	6874206c 	.word	0x6874206c
    e47c:	76612065 	.word	0x76612065
    e480:	616c6961 	.word	0x616c6961
    e484:	20656c62 	.word	0x20656c62
    e488:	6d6d6f63 	.word	0x6d6d6f63
    e48c:	73646e61 	.word	0x73646e61
    e490:	646e6120 	.word	0x646e6120
    e494:	73206120 	.word	0x73206120
    e498:	74726f68 	.word	0x74726f68
    e49c:	6e797320 	.word	0x6e797320
    e4a0:	6973706f 	.word	0x6973706f
    e4a4:	0a0d2073 	.word	0x0a0d2073
    e4a8:	5f726576 	.word	0x5f726576
    e4ac:	2d206c62 	.word	0x2d206c62
    e4b0:	69725020 	.word	0x69725020
    e4b4:	2073746e 	.word	0x2073746e
    e4b8:	20656874 	.word	0x20656874
    e4bc:	746f6f62 	.word	0x746f6f62
    e4c0:	64616f6c 	.word	0x64616f6c
    e4c4:	66207265 	.word	0x66207265
    e4c8:	776d7269 	.word	0x776d7269
    e4cc:	20657261 	.word	0x20657261
    e4d0:	73726576 	.word	0x73726576
    e4d4:	206e6f69 	.word	0x206e6f69
    e4d8:	65760a0d 	.word	0x65760a0d
    e4dc:	70615f72 	.word	0x70615f72
    e4e0:	202d0970 	.word	0x202d0970
    e4e4:	6e697250 	.word	0x6e697250
    e4e8:	74207374 	.word	0x74207374
    e4ec:	61206568 	.word	0x61206568
    e4f0:	696c7070 	.word	0x696c7070
    e4f4:	69746163 	.word	0x69746163
    e4f8:	63206e6f 	.word	0x63206e6f
    e4fc:	2065646f 	.word	0x2065646f
    e500:	6d726966 	.word	0x6d726966
    e504:	65726177 	.word	0x65726177
    e508:	72657620 	.word	0x72657620
    e50c:	6e6f6973 	.word	0x6e6f6973
    e510:	670a0d20 	.word	0x670a0d20
    e514:	5f6f6970 	.word	0x5f6f6970
    e518:	20746573 	.word	0x20746573
    e51c:	726f705b 	.word	0x726f705b
    e520:	5b205d74 	.word	0x5b205d74
    e524:	5d6e6970 	.word	0x5d6e6970
    e528:	53202d20 	.word	0x53202d20
    e52c:	61207465 	.word	0x61207465
    e530:	49504720 	.word	0x49504720
    e534:	6970204f 	.word	0x6970204f
    e538:	6f74206e 	.word	0x6f74206e
    e53c:	67696820 	.word	0x67696820
    e540:	202f2068 	.word	0x202f2068
    e544:	0a0d2031 	.word	0x0a0d2031
    e548:	6f697067 	.word	0x6f697067
    e54c:	656c635f 	.word	0x656c635f
    e550:	5b207261 	.word	0x5b207261
    e554:	74726f70 	.word	0x74726f70
    e558:	705b205d 	.word	0x705b205d
    e55c:	095d6e69 	.word	0x095d6e69
    e560:	6553202d 	.word	0x6553202d
    e564:	20612074 	.word	0x20612074
    e568:	4f495047 	.word	0x4f495047
    e56c:	6e697020 	.word	0x6e697020
    e570:	206f7420 	.word	0x206f7420
    e574:	20776f6c 	.word	0x20776f6c
    e578:	2030202f 	.word	0x2030202f
    e57c:	70670a0d 	.word	0x70670a0d
    e580:	675f6f69 	.word	0x675f6f69
    e584:	5b207465 	.word	0x5b207465
    e588:	74726f70 	.word	0x74726f70
    e58c:	705b205d 	.word	0x705b205d
    e590:	205d6e69 	.word	0x205d6e69
    e594:	6547202d 	.word	0x6547202d
    e598:	74732074 	.word	0x74732074
    e59c:	20657461 	.word	0x20657461
    e5a0:	7320666f 	.word	0x7320666f
    e5a4:	69636570 	.word	0x69636570
    e5a8:	64656966 	.word	0x64656966
    e5ac:	49504720 	.word	0x49504720
    e5b0:	6970204f 	.word	0x6970204f
    e5b4:	0a0d206e 	.word	0x0a0d206e
    e5b8:	2063616d 	.word	0x2063616d
    e5bc:	6572202d 	.word	0x6572202d
    e5c0:	6e727574 	.word	0x6e727574
    e5c4:	68742073 	.word	0x68742073
    e5c8:	616d2065 	.word	0x616d2065
    e5cc:	64612063 	.word	0x64612063
    e5d0:	73657264 	.word	0x73657264
    e5d4:	666f2073 	.word	0x666f2073
    e5d8:	65687420 	.word	0x65687420
    e5dc:	76656420 	.word	0x76656420
    e5e0:	20656369 	.word	0x20656369
    e5e4:	70690a0d 	.word	0x70690a0d
    e5e8:	72202d20 	.word	0x72202d20
    e5ec:	72757465 	.word	0x72757465
    e5f0:	7420736e 	.word	0x7420736e
    e5f4:	49206568 	.word	0x49206568
    e5f8:	20347650 	.word	0x20347650
    e5fc:	72646461 	.word	0x72646461
    e600:	20737365 	.word	0x20737365
    e604:	65720a0d 	.word	0x65720a0d
    e608:	3c5f6461 	.word	0x3c5f6461
    e60c:	736e6573 	.word	0x736e6573
    e610:	203e726f 	.word	0x203e726f
    e614:	6165725b 	.word	0x6165725b
    e618:	676e6964 	.word	0x676e6964
    e61c:	5b205d73 	.word	0x5b205d73
    e620:	65746e69 	.word	0x65746e69
    e624:	6c617672 	.word	0x6c617672
    e628:	202d205d 	.word	0x202d205d
    e62c:	6e697250 	.word	0x6e697250
    e630:	61207374 	.word	0x61207374
    e634:	6d756e20 	.word	0x6d756e20
    e638:	20726562 	.word	0x20726562
    e63c:	7220666f 	.word	0x7220666f
    e640:	69646165 	.word	0x69646165
    e644:	2073676e 	.word	0x2073676e
    e648:	74207461 	.word	0x74207461
    e64c:	67206568 	.word	0x67206568
    e650:	6e657669 	.word	0x6e657669
    e654:	746e6920 	.word	0x746e6920
    e658:	61767265 	.word	0x61767265
    e65c:	0a0d206c 	.word	0x0a0d206c
    e660:	5f636461 	.word	0x5f636461
    e664:	20746567 	.word	0x20746567
    e668:	726f705b 	.word	0x726f705b
    e66c:	5b205d74 	.word	0x5b205d74
    e670:	5d6e6970 	.word	0x5d6e6970
    e674:	47202d20 	.word	0x47202d20
    e678:	74207465 	.word	0x74207465
    e67c:	41206568 	.word	0x41206568
    e680:	76204344 	.word	0x76204344
    e684:	65756c61 	.word	0x65756c61
    e688:	20666f20 	.word	0x20666f20
    e68c:	20656874 	.word	0x20656874
    e690:	65766967 	.word	0x65766967
    e694:	6970206e 	.word	0x6970206e
    e698:	0d202e6e 	.word	0x0d202e6e
    e69c:	75636d0a 	.word	0x75636d0a
    e6a0:	6d65745f 	.word	0x6d65745f
    e6a4:	202d2070 	.word	0x202d2070
    e6a8:	6f706552 	.word	0x6f706552
    e6ac:	20737472 	.word	0x20737472
    e6b0:	20656874 	.word	0x20656874
    e6b4:	706d6574 	.word	0x706d6574
    e6b8:	74617265 	.word	0x74617265
    e6bc:	20657275 	.word	0x20657275
    e6c0:	7420666f 	.word	0x7420666f
    e6c4:	6d206568 	.word	0x6d206568
    e6c8:	69207563 	.word	0x69207563
    e6cc:	6543206e 	.word	0x6543206e
    e6d0:	7569736c 	.word	0x7569736c
    e6d4:	0d202e73 	.word	0x0d202e73
    e6d8:	6332690a 	.word	0x6332690a
    e6dc:	6163735f 	.word	0x6163735f
    e6e0:	202d206e 	.word	0x202d206e
    e6e4:	6e697250 	.word	0x6e697250
    e6e8:	6f207374 	.word	0x6f207374
    e6ec:	61207475 	.word	0x61207475
    e6f0:	73696c20 	.word	0x73696c20
    e6f4:	6f632074 	.word	0x6f632074
    e6f8:	63656e6e 	.word	0x63656e6e
    e6fc:	20646574 	.word	0x20646574
    e700:	20433249 	.word	0x20433249
    e704:	76616c73 	.word	0x76616c73
    e708:	64612065 	.word	0x64612065
    e70c:	73657264 	.word	0x73657264
    e710:	20736573 	.word	0x20736573
    e714:	65720a0d 	.word	0x65720a0d
    e718:	5f79616c 	.word	0x5f79616c
    e71c:	20746573 	.word	0x20746573
    e720:	7574202d 	.word	0x7574202d
    e724:	20736e72 	.word	0x20736e72
    e728:	72206e6f 	.word	0x72206e6f
    e72c:	79616c65 	.word	0x79616c65
    e730:	720a0d20 	.word	0x720a0d20
    e734:	79616c65 	.word	0x79616c65
    e738:	656c635f 	.word	0x656c635f
    e73c:	2d207261 	.word	0x2d207261
    e740:	72757420 	.word	0x72757420
    e744:	6f20736e 	.word	0x6f20736e
    e748:	72206666 	.word	0x72206666
    e74c:	79616c65 	.word	0x79616c65
    e750:	00000d20 	.word	0x00000d20
    e754:	2e302e30 	.word	0x2e302e30
    e758:	00000030 	.word	0x00000030
    e75c:	73726556 	.word	0x73726556
    e760:	3a6e6f69 	.word	0x3a6e6f69
    e764:	20732520 	.word	0x20732520
    e768:	00000a0d 	.word	0x00000a0d
    e76c:	206e6950 	.word	0x206e6950
    e770:	73206425 	.word	0x73206425
    e774:	68207465 	.word	0x68207465
    e778:	0d686769 	.word	0x0d686769
    e77c:	0000000a 	.word	0x0000000a
    e780:	206e6950 	.word	0x206e6950
    e784:	63206425 	.word	0x63206425
    e788:	7261656c 	.word	0x7261656c
    e78c:	0a0d6465 	.word	0x0a0d6465
    e790:	00000000 	.word	0x00000000
    e794:	206e6970 	.word	0x206e6970
    e798:	76206425 	.word	0x76206425
    e79c:	65756c61 	.word	0x65756c61
    e7a0:	6425203a 	.word	0x6425203a
    e7a4:	00000a0d 	.word	0x00000a0d
    e7a8:	302e3030 	.word	0x302e3030
    e7ac:	30302e30 	.word	0x30302e30
    e7b0:	0d30302e 	.word	0x0d30302e
    e7b4:	00000000 	.word	0x00000000
    e7b8:	2e353532 	.word	0x2e353532
    e7bc:	2e353532 	.word	0x2e353532
    e7c0:	2e353532 	.word	0x2e353532
    e7c4:	20353532 	.word	0x20353532
    e7c8:	0000000d 	.word	0x0000000d
    e7cc:	0078756c 	.word	0x0078756c
    e7d0:	72727543 	.word	0x72727543
    e7d4:	20746e65 	.word	0x20746e65
    e7d8:	3a78756c 	.word	0x3a78756c
    e7dc:	0d642520 	.word	0x0d642520
    e7e0:	0000000a 	.word	0x0000000a
    e7e4:	706d6574 	.word	0x706d6574
    e7e8:	00000000 	.word	0x00000000
    e7ec:	6f727245 	.word	0x6f727245
    e7f0:	65722072 	.word	0x65722072
    e7f4:	6e696461 	.word	0x6e696461
    e7f8:	44482067 	.word	0x44482067
    e7fc:	38303143 	.word	0x38303143
    e800:	00000d30 	.word	0x00000d30
    e804:	72727543 	.word	0x72727543
    e808:	20746e65 	.word	0x20746e65
    e80c:	706d6574 	.word	0x706d6574
    e810:	74617265 	.word	0x74617265
    e814:	3a657275 	.word	0x3a657275
    e818:	0d642520 	.word	0x0d642520
    e81c:	7543200a 	.word	0x7543200a
    e820:	6e657272 	.word	0x6e657272
    e824:	75682074 	.word	0x75682074
    e828:	6964696d 	.word	0x6964696d
    e82c:	203a7974 	.word	0x203a7974
    e830:	0a0d6425 	.word	0x0a0d6425
    e834:	00000000 	.word	0x00000000
    e838:	73696f6d 	.word	0x73696f6d
    e83c:	65727574 	.word	0x65727574
    e840:	00000000 	.word	0x00000000
    e844:	72727543 	.word	0x72727543
    e848:	20746e65 	.word	0x20746e65
    e84c:	73696f6d 	.word	0x73696f6d
    e850:	65727574 	.word	0x65727574
    e854:	2e25203a 	.word	0x2e25203a
    e858:	20663230 	.word	0x20663230
    e85c:	0d202525 	.word	0x0d202525
    e860:	0000000a 	.word	0x0000000a
    e864:	6c696166 	.word	0x6c696166
    e868:	206e6f20 	.word	0x206e6f20
    e86c:	206e6970 	.word	0x206e6970
    e870:	20434441 	.word	0x20434441
    e874:	206e6163 	.word	0x206e6163
    e878:	72727563 	.word	0x72727563
    e87c:	6c746e65 	.word	0x6c746e65
    e880:	6e6f2079 	.word	0x6e6f2079
    e884:	6220796c 	.word	0x6220796c
    e888:	6f632065 	.word	0x6f632065
    e88c:	6769666e 	.word	0x6769666e
    e890:	64657275 	.word	0x64657275
    e894:	206e6f20 	.word	0x206e6f20
    e898:	25632550 	.word	0x25632550
    e89c:	50202e64 	.word	0x50202e64
    e8a0:	7361656c 	.word	0x7361656c
    e8a4:	72742065 	.word	0x72742065
    e8a8:	67612079 	.word	0x67612079
    e8ac:	2e6e6961 	.word	0x2e6e6961
    e8b0:	00000a0d 	.word	0x00000a0d
    e8b4:	6c696166 	.word	0x6c696166
    e8b8:	206e6f20 	.word	0x206e6f20
    e8bc:	74726f70 	.word	0x74726f70
    e8c0:	43444120 	.word	0x43444120
    e8c4:	6e616320 	.word	0x6e616320
    e8c8:	72756320 	.word	0x72756320
    e8cc:	746e6572 	.word	0x746e6572
    e8d0:	6f20796c 	.word	0x6f20796c
    e8d4:	20796c6e 	.word	0x20796c6e
    e8d8:	63206562 	.word	0x63206562
    e8dc:	69666e6f 	.word	0x69666e6f
    e8e0:	65727567 	.word	0x65727567
    e8e4:	6e6f2064 	.word	0x6e6f2064
    e8e8:	25632520 	.word	0x25632520
    e8ec:	50202e64 	.word	0x50202e64
    e8f0:	7361656c 	.word	0x7361656c
    e8f4:	72742065 	.word	0x72742065
    e8f8:	67612079 	.word	0x67612079
    e8fc:	2e6e6961 	.word	0x2e6e6961
    e900:	00000a0d 	.word	0x00000a0d
    e904:	746c6f56 	.word	0x746c6f56
    e908:	20656761 	.word	0x20656761
    e90c:	50207461 	.word	0x50207461
    e910:	64256325 	.word	0x64256325
    e914:	6625203a 	.word	0x6625203a
    e918:	00000a0d 	.word	0x00000a0d
    e91c:	2055434d 	.word	0x2055434d
    e920:	706d6574 	.word	0x706d6574
    e924:	74617265 	.word	0x74617265
    e928:	3a657275 	.word	0x3a657275
    e92c:	43642520 	.word	0x43642520
    e930:	000a0d20 	.word	0x000a0d20
    e934:	6e616353 	.word	0x6e616353
    e938:	676e696e 	.word	0x676e696e
    e93c:	78756c20 	.word	0x78756c20
    e940:	73756220 	.word	0x73756220
    e944:	0000000d 	.word	0x0000000d
    e948:	72646441 	.word	0x72646441
    e94c:	20737365 	.word	0x20737365
    e950:	6e756f66 	.word	0x6e756f66
    e954:	74612064 	.word	0x74612064
    e958:	58232520 	.word	0x58232520
    e95c:	00000a0d 	.word	0x00000a0d
    e960:	6e616353 	.word	0x6e616353
    e964:	676e696e 	.word	0x676e696e
    e968:	6d657420 	.word	0x6d657420
    e96c:	75622070 	.word	0x75622070
    e970:	00000d73 	.word	0x00000d73
    e974:	6e616353 	.word	0x6e616353
    e978:	6f632073 	.word	0x6f632073
    e97c:	656c706d 	.word	0x656c706d
    e980:	0d2e6574 	.word	0x0d2e6574
    e984:	00000000 	.word	0x00000000
    e988:	72656874 	.word	0x72656874
    e98c:	61772065 	.word	0x61772065
    e990:	6e612073 	.word	0x6e612073
    e994:	72726520 	.word	0x72726520
    e998:	7020726f 	.word	0x7020726f
    e99c:	69737261 	.word	0x69737261
    e9a0:	7920676e 	.word	0x7920676e
    e9a4:	2072756f 	.word	0x2072756f
    e9a8:	73677261 	.word	0x73677261
    e9ac:	726f6620 	.word	0x726f6620
    e9b0:	2e732520 	.word	0x2e732520
    e9b4:	65655320 	.word	0x65655320
    e9b8:	6c656820 	.word	0x6c656820
    e9bc:	6f662070 	.word	0x6f662070
    e9c0:	6f632072 	.word	0x6f632072
    e9c4:	63657272 	.word	0x63657272
    e9c8:	73752074 	.word	0x73752074
    e9cc:	2e656761 	.word	0x2e656761
    e9d0:	00000a0d 	.word	0x00000a0d
    e9d4:	61766e49 	.word	0x61766e49
    e9d8:	2064696c 	.word	0x2064696c
    e9dc:	626d756e 	.word	0x626d756e
    e9e0:	6f207265 	.word	0x6f207265
    e9e4:	72612066 	.word	0x72612066
    e9e8:	203a7367 	.word	0x203a7367
    e9ec:	72207325 	.word	0x72207325
    e9f0:	69757165 	.word	0x69757165
    e9f4:	20736572 	.word	0x20736572
    e9f8:	61206425 	.word	0x61206425
    e9fc:	6d756772 	.word	0x6d756772
    ea00:	73746e65 	.word	0x73746e65
    ea04:	646e6120 	.word	0x646e6120
    ea08:	756f7920 	.word	0x756f7920
    ea0c:	6f727020 	.word	0x6f727020
    ea10:	65646976 	.word	0x65646976
    ea14:	64252064 	.word	0x64252064
    ea18:	2e0a0d20 	.word	0x2e0a0d20
    ea1c:	20656553 	.word	0x20656553
    ea20:	706c6568 	.word	0x706c6568
    ea24:	726f6620 	.word	0x726f6620
    ea28:	726f6d20 	.word	0x726f6d20
    ea2c:	6e692065 	.word	0x6e692065
    ea30:	6d726f66 	.word	0x6d726f66
    ea34:	6f697461 	.word	0x6f697461
    ea38:	0d202e6e 	.word	0x0d202e6e
    ea3c:	0000000a 	.word	0x0000000a
    ea40:	706c6568 	.word	0x706c6568
    ea44:	00000000 	.word	0x00000000
    ea48:	5f726576 	.word	0x5f726576
    ea4c:	00006c62 	.word	0x00006c62
    ea50:	5f726576 	.word	0x5f726576
    ea54:	00707061 	.word	0x00707061
    ea58:	6f697067 	.word	0x6f697067
    ea5c:	7465735f 	.word	0x7465735f
    ea60:	00000000 	.word	0x00000000
    ea64:	6f697067 	.word	0x6f697067
    ea68:	656c635f 	.word	0x656c635f
    ea6c:	00007261 	.word	0x00007261
    ea70:	6f697067 	.word	0x6f697067
    ea74:	7465675f 	.word	0x7465675f
    ea78:	00000000 	.word	0x00000000
    ea7c:	0063616d 	.word	0x0063616d
    ea80:	00007069 	.word	0x00007069
    ea84:	64616572 	.word	0x64616572
    ea88:	00000000 	.word	0x00000000
    ea8c:	5f636461 	.word	0x5f636461
    ea90:	00746567 	.word	0x00746567
    ea94:	5f75636d 	.word	0x5f75636d
    ea98:	706d6574 	.word	0x706d6574
    ea9c:	00000000 	.word	0x00000000
    eaa0:	5f633269 	.word	0x5f633269
    eaa4:	6e616373 	.word	0x6e616373
    eaa8:	00000000 	.word	0x00000000
    eaac:	6e6e7572 	.word	0x6e6e7572
    eab0:	20676e69 	.word	0x20676e69
    eab4:	5f633269 	.word	0x5f633269
    eab8:	6e616373 	.word	0x6e616373
    eabc:	0000000d 	.word	0x0000000d
    eac0:	616c6572 	.word	0x616c6572
    eac4:	6f5f3179 	.word	0x6f5f3179
    eac8:	0000006e 	.word	0x0000006e
    eacc:	616c6552 	.word	0x616c6552
    ead0:	20312079 	.word	0x20312079
    ead4:	6e727574 	.word	0x6e727574
    ead8:	20676e69 	.word	0x20676e69
    eadc:	0d2e6e6f 	.word	0x0d2e6e6f
    eae0:	00000000 	.word	0x00000000
    eae4:	616c6572 	.word	0x616c6572
    eae8:	6f5f3179 	.word	0x6f5f3179
    eaec:	00006666 	.word	0x00006666
    eaf0:	616c6552 	.word	0x616c6552
    eaf4:	20312079 	.word	0x20312079
    eaf8:	6e727574 	.word	0x6e727574
    eafc:	20676e69 	.word	0x20676e69
    eb00:	2e66666f 	.word	0x2e66666f
    eb04:	0000000d 	.word	0x0000000d
    eb08:	616c6572 	.word	0x616c6572
    eb0c:	6f5f3279 	.word	0x6f5f3279
    eb10:	0000006e 	.word	0x0000006e
    eb14:	616c6552 	.word	0x616c6552
    eb18:	20322079 	.word	0x20322079
    eb1c:	6e727574 	.word	0x6e727574
    eb20:	20676e69 	.word	0x20676e69
    eb24:	0d2e6e6f 	.word	0x0d2e6e6f
    eb28:	00000000 	.word	0x00000000
    eb2c:	616c6572 	.word	0x616c6572
    eb30:	6f5f3279 	.word	0x6f5f3279
    eb34:	00006666 	.word	0x00006666
    eb38:	616c6552 	.word	0x616c6552
    eb3c:	20322079 	.word	0x20322079
    eb40:	6e727574 	.word	0x6e727574
    eb44:	20676e69 	.word	0x20676e69
    eb48:	2e66666f 	.word	0x2e66666f
    eb4c:	0000000d 	.word	0x0000000d
    eb50:	736f6f62 	.word	0x736f6f62
    eb54:	6e6f5f74 	.word	0x6e6f5f74
    eb58:	00000000 	.word	0x00000000
    eb5c:	736f6f42 	.word	0x736f6f42
    eb60:	6f632074 	.word	0x6f632074
    eb64:	7265766e 	.word	0x7265766e
    eb68:	20726574 	.word	0x20726574
    eb6c:	62616e65 	.word	0x62616e65
    eb70:	2e64656c 	.word	0x2e64656c
    eb74:	0000000d 	.word	0x0000000d
    eb78:	736f6f62 	.word	0x736f6f62
    eb7c:	666f5f74 	.word	0x666f5f74
    eb80:	00000066 	.word	0x00000066
    eb84:	736f6f42 	.word	0x736f6f42
    eb88:	6f632074 	.word	0x6f632074
    eb8c:	7265766e 	.word	0x7265766e
    eb90:	20726574 	.word	0x20726574
    eb94:	61736964 	.word	0x61736964
    eb98:	64656c62 	.word	0x64656c62
    eb9c:	00000d2e 	.word	0x00000d2e
    eba0:	73616c66 	.word	0x73616c66
    eba4:	00000068 	.word	0x00000068
    eba8:	3164656c 	.word	0x3164656c
    ebac:	006e6f5f 	.word	0x006e6f5f
    ebb0:	3144454c 	.word	0x3144454c
    ebb4:	72757420 	.word	0x72757420
    ebb8:	676e696e 	.word	0x676e696e
    ebbc:	2e6e6f20 	.word	0x2e6e6f20
    ebc0:	0000000d 	.word	0x0000000d
    ebc4:	3164656c 	.word	0x3164656c
    ebc8:	66666f5f 	.word	0x66666f5f
    ebcc:	00000000 	.word	0x00000000
    ebd0:	3144454c 	.word	0x3144454c
    ebd4:	72757420 	.word	0x72757420
    ebd8:	676e696e 	.word	0x676e696e
    ebdc:	66666f20 	.word	0x66666f20
    ebe0:	00000d2e 	.word	0x00000d2e
    ebe4:	3264656c 	.word	0x3264656c
    ebe8:	006e6f5f 	.word	0x006e6f5f
    ebec:	3244454c 	.word	0x3244454c
    ebf0:	72757420 	.word	0x72757420
    ebf4:	676e696e 	.word	0x676e696e
    ebf8:	2e6e6f20 	.word	0x2e6e6f20
    ebfc:	0000000d 	.word	0x0000000d
    ec00:	3264656c 	.word	0x3264656c
    ec04:	66666f5f 	.word	0x66666f5f
    ec08:	00000000 	.word	0x00000000
    ec0c:	3244454c 	.word	0x3244454c
    ec10:	72757420 	.word	0x72757420
    ec14:	676e696e 	.word	0x676e696e
    ec18:	66666f20 	.word	0x66666f20
    ec1c:	00000d2e 	.word	0x00000d2e
    ec20:	61766e49 	.word	0x61766e49
    ec24:	2064696c 	.word	0x2064696c
    ec28:	75706e69 	.word	0x75706e69
    ec2c:	53202e74 	.word	0x53202e74
    ec30:	68206565 	.word	0x68206565
    ec34:	20706c65 	.word	0x20706c65
    ec38:	20726f66 	.word	0x20726f66
    ec3c:	72726f63 	.word	0x72726f63
    ec40:	20746365 	.word	0x20746365
    ec44:	67617375 	.word	0x67617375
    ec48:	000d2e65 	.word	0x000d2e65
    ec4c:	73616c66 	.word	0x73616c66
    ec50:	6e692068 	.word	0x6e692068
    ec54:	61697469 	.word	0x61697469
    ec58:	657a696c 	.word	0x657a696c
    ec5c:	00000d64 	.word	0x00000d64
    ec60:	63206f4e 	.word	0x63206f4e
    ec64:	2e706968 	.word	0x2e706968
    ec68:	0000000d 	.word	0x0000000d
    ec6c:	64616552 	.word	0x64616552
    ec70:	72726520 	.word	0x72726520
    ec74:	000d726f 	.word	0x000d726f
    ec78:	00006425 	.word	0x00006425
    ec7c:	0000000d 	.word	0x0000000d
    ec80:	20435243 	.word	0x20435243
    ec84:	6f727265 	.word	0x6f727265
    ec88:	000d2172 	.word	0x000d2172
    ec8c:	20435243 	.word	0x20435243
    ec90:	6374616d 	.word	0x6374616d
    ec94:	21646568 	.word	0x21646568
    ec98:	0000000d 	.word	0x0000000d
    ec9c:	73616c46 	.word	0x73616c46
    eca0:	6c732068 	.word	0x6c732068
    eca4:	69706565 	.word	0x69706565
    eca8:	000d676e 	.word	0x000d676e
    ecac:	00000020 	.word	0x00000020
    ecb0:	636c6557 	.word	0x636c6557
    ecb4:	20656d6f 	.word	0x20656d6f
    ecb8:	74206f74 	.word	0x74206f74
    ecbc:	45206568 	.word	0x45206568
    ecc0:	67726576 	.word	0x67726576
    ecc4:	6e656572 	.word	0x6e656572
    ecc8:	494c4320 	.word	0x494c4320
    eccc:	00000d2e 	.word	0x00000d2e
    ecd0:	0000203e 	.word	0x0000203e

0000ecd4 <_global_impure_ptr>:
    ecd4:	2000007c 4f500043 00584953 4e49002e     |.. C.POSIX...IN
    ece4:	6e690046 414e0066 616e004e 0030006e     F.inf.NAN.nan.0.
    ecf4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    ed04:	32313000 36353433 61393837 65646362     .0123456789abcde
    ed14:	20000066                                         f.

0000ed16 <_ctype_>:
    ed16:	20202000 20202020 28282020 20282828     .         ((((( 
    ed26:	20202020 20202020 20202020 20202020                     
    ed36:	10108820 10101010 10101010 10101010      ...............
    ed46:	04040410 04040404 10040404 10101010     ................
    ed56:	41411010 41414141 01010101 01010101     ..AAAAAA........
    ed66:	01010101 01010101 01010101 10101010     ................
    ed76:	42421010 42424242 02020202 02020202     ..BBBBBB........
    ed86:	02020202 02020202 02020202 10101010     ................
    ed96:	00000020 00000000 00000000 00000000      ...............
	...
    ee16:	666e4900 74696e69 614e0079 0000004e              .Infinity.NaN.

0000ee24 <__sf_fake_stderr>:
	...

0000ee44 <__sf_fake_stdin>:
	...

0000ee64 <__sf_fake_stdout>:
	...

0000ee88 <__mprec_bigtens>:
    ee88:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    ee98:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    eea8:	7f73bf3c 75154fdd                       <.s..O.u

0000eeb0 <__mprec_tens>:
    eeb0:	00000000 3ff00000 00000000 40240000     .......?......$@
    eec0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    eed0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    eee0:	00000000 412e8480 00000000 416312d0     .......A......cA
    eef0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    ef00:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    ef10:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    ef20:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    ef30:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    ef40:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    ef50:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    ef60:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    ef70:	79d99db4 44ea7843                       ...yCx.D

0000ef78 <p05.6047>:
    ef78:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    ef88:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
    ef98:	0000bffc 0000bfcc 0000bfde 0000bf20     ............ ...
    efa8:	0000bfde 0000bfc2 0000bfde 0000bf20     ............ ...
    efb8:	0000bfcc 0000bfcc 0000bfc2 0000bf20     ............ ...
    efc8:	0000bf28 0000bf28 0000bf28 0000bfe4     (...(...(.......
    efd8:	0000bfcc 0000bfcc 0000bfa0 0000c084     ................
    efe8:	0000bfa0 0000bfc2 0000bfa0 0000c084     ................
    eff8:	0000bfcc 0000bfcc 0000bfc2 0000c084     ................
    f008:	0000bf28 0000bf28 0000bf28 0000c08e     (...(...(.......
    f018:	0000c22c 0000c17c 0000c17c 0000c17a     ,...|...|...z...
    f028:	0000c21e 0000c21e 0000c214 0000c17a     ............z...
    f038:	0000c21e 0000c214 0000c21e 0000c17a     ............z...
    f048:	0000c224 0000c224 0000c224 0000c2b4     $...$...$.......
    f058:	0000cc84 0000cc66 0000cc20 0000cb3e     ....f... ...>...
    f068:	0000cc20 0000cc58 0000cc20 0000cb3e      ...X... ...>...
    f078:	0000cc66 0000cc66 0000cc58 0000cb3e     f...f...X...>...
    f088:	0000cb36 0000cb36 0000cb36 0000ce9c     6...6...6.......
    f098:	0000d4e4 0000d3a4 0000d3a4 0000d3a0     ................
    f0a8:	0000d4bc 0000d4bc 0000d4ae 0000d3a0     ................
    f0b8:	0000d4bc 0000d4ae 0000d4bc 0000d3a0     ................
    f0c8:	0000d4c4 0000d4c4 0000d4c4 0000d6c8     ................

0000f0d8 <_init>:
    f0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0da:	46c0      	nop			; (mov r8, r8)
    f0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f0de:	bc08      	pop	{r3}
    f0e0:	469e      	mov	lr, r3
    f0e2:	4770      	bx	lr

0000f0e4 <__init_array_start>:
    f0e4:	000000dd 	.word	0x000000dd

0000f0e8 <_fini>:
    f0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0ea:	46c0      	nop			; (mov r8, r8)
    f0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f0ee:	bc08      	pop	{r3}
    f0f0:	469e      	mov	lr, r3
    f0f2:	4770      	bx	lr

0000f0f4 <__fini_array_start>:
    f0f4:	000000b5 	.word	0x000000b5
