
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b838  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000021c  20000000  0000b838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000180  2000021c  0000ba54  0002021c  2**2
                  ALLOC
  3 .stack        00002004  2000039c  0000bbd4  0002021c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
  6 .debug_info   000370bf  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003fc9  00000000  00000000  0005735c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003415  00000000  00000000  0005b325  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009b8  00000000  00000000  0005e73a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000870  00000000  00000000  0005f0f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c1f5  00000000  00000000  0005f962  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fb5d  00000000  00000000  0007bb57  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008c829  00000000  00000000  0008b6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003088  00000000  00000000  00117ee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 23 00 20 6d 47 00 00 65 48 00 00 65 48 00 00     .#. mG..eH..eH..
	...
      2c:	65 48 00 00 00 00 00 00 00 00 00 00 65 48 00 00     eH..........eH..
      3c:	65 48 00 00 65 48 00 00 65 48 00 00 65 48 00 00     eH..eH..eH..eH..
      4c:	65 48 00 00 65 48 00 00 65 48 00 00 65 48 00 00     eH..eH..eH..eH..
      5c:	65 48 00 00 65 48 00 00 c5 34 00 00 dd 34 00 00     eH..eH...4...4..
      6c:	f5 34 00 00 0d 35 00 00 25 35 00 00 3d 35 00 00     .4...5..%5..=5..
      7c:	65 48 00 00 65 48 00 00 65 48 00 00 65 48 00 00     eH..eH..eH..eH..
      8c:	65 48 00 00 65 48 00 00 00 00 00 00 00 00 00 00     eH..eH..........
      9c:	65 48 00 00 65 48 00 00 65 48 00 00 65 48 00 00     eH..eH..eH..eH..
      ac:	65 48 00 00 00 00 00 00                             eH......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000021c 	.word	0x2000021c
      d4:	00000000 	.word	0x00000000
      d8:	0000b838 	.word	0x0000b838

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000220 	.word	0x20000220
     108:	0000b838 	.word	0x0000b838
     10c:	0000b838 	.word	0x0000b838
     110:	00000000 	.word	0x00000000

00000114 <write8>:

int is_init = false;


void write8(uint8_t reg, uint8_t value)
{
     114:	b580      	push	{r7, lr}
     116:	b086      	sub	sp, #24
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
     120:	1dbb      	adds	r3, r7, #6
     122:	1c0a      	adds	r2, r1, #0
     124:	701a      	strb	r2, [r3, #0]
	if(is_init) {
     126:	4b19      	ldr	r3, [pc, #100]	; (18c <write8+0x78>)
     128:	681b      	ldr	r3, [r3, #0]
     12a:	2b00      	cmp	r3, #0
     12c:	d029      	beq.n	182 <write8+0x6e>
		uint8_t write_buffer[2] = {reg, value};
     12e:	230c      	movs	r3, #12
     130:	18fb      	adds	r3, r7, r3
     132:	1dfa      	adds	r2, r7, #7
     134:	7812      	ldrb	r2, [r2, #0]
     136:	701a      	strb	r2, [r3, #0]
     138:	230c      	movs	r3, #12
     13a:	18fb      	adds	r3, r7, r3
     13c:	1dba      	adds	r2, r7, #6
     13e:	7812      	ldrb	r2, [r2, #0]
     140:	705a      	strb	r2, [r3, #1]
		wr_packet.address = TSL2561_ADDR_FLOAT;
     142:	4b13      	ldr	r3, [pc, #76]	; (190 <write8+0x7c>)
     144:	2239      	movs	r2, #57	; 0x39
     146:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 2;
     148:	4b11      	ldr	r3, [pc, #68]	; (190 <write8+0x7c>)
     14a:	2202      	movs	r2, #2
     14c:	805a      	strh	r2, [r3, #2]
		wr_packet.data = write_buffer;
     14e:	4b10      	ldr	r3, [pc, #64]	; (190 <write8+0x7c>)
     150:	220c      	movs	r2, #12
     152:	18ba      	adds	r2, r7, r2
     154:	605a      	str	r2, [r3, #4]
		int timeout = 0;
     156:	2300      	movs	r3, #0
     158:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
     15a:	23fa      	movs	r3, #250	; 0xfa
     15c:	009b      	lsls	r3, r3, #2
     15e:	613b      	str	r3, [r7, #16]
		
		while (i2c_master_write_packet_wait(&i2c_master_instance, &wr_packet) !=
     160:	e005      	b.n	16e <write8+0x5a>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
     162:	697b      	ldr	r3, [r7, #20]
     164:	1c5a      	adds	r2, r3, #1
     166:	617a      	str	r2, [r7, #20]
     168:	693a      	ldr	r2, [r7, #16]
     16a:	4293      	cmp	r3, r2
     16c:	d008      	beq.n	180 <write8+0x6c>
		while (i2c_master_write_packet_wait(&i2c_master_instance, &wr_packet) !=
     16e:	4a08      	ldr	r2, [pc, #32]	; (190 <write8+0x7c>)
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <write8+0x80>)
     172:	0011      	movs	r1, r2
     174:	0018      	movs	r0, r3
     176:	4b08      	ldr	r3, [pc, #32]	; (198 <write8+0x84>)
     178:	4798      	blx	r3
     17a:	1e03      	subs	r3, r0, #0
     17c:	d1f1      	bne.n	162 <write8+0x4e>
				break;
			}
		}
		
	}
}
     17e:	e000      	b.n	182 <write8+0x6e>
				break;
     180:	46c0      	nop			; (mov r8, r8)
}
     182:	46c0      	nop			; (mov r8, r8)
     184:	46bd      	mov	sp, r7
     186:	b006      	add	sp, #24
     188:	bd80      	pop	{r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	20000240 	.word	0x20000240
     190:	20000008 	.word	0x20000008
     194:	200002c8 	.word	0x200002c8
     198:	000018a9 	.word	0x000018a9

0000019c <enable>:

void enable(void)
{
     19c:	b580      	push	{r7, lr}
     19e:	af00      	add	r7, sp, #0
	/* Enable the device by setting the control bit to 0x03 */
	write8((TSL2561_COMMAND_BIT | TSL2561_REGISTER_CONTROL), TSL2561_CONTROL_POWERON);
     1a0:	2103      	movs	r1, #3
     1a2:	2080      	movs	r0, #128	; 0x80
     1a4:	4b02      	ldr	r3, [pc, #8]	; (1b0 <enable+0x14>)
     1a6:	4798      	blx	r3
}
     1a8:	46c0      	nop			; (mov r8, r8)
     1aa:	46bd      	mov	sp, r7
     1ac:	bd80      	pop	{r7, pc}
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	00000115 	.word	0x00000115

000001b4 <disable>:

void disable(void)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	af00      	add	r7, sp, #0
	/* Turn the device off to save power */
	write8(TSL2561_COMMAND_BIT | TSL2561_REGISTER_CONTROL, TSL2561_CONTROL_POWEROFF);
     1b8:	2100      	movs	r1, #0
     1ba:	2080      	movs	r0, #128	; 0x80
     1bc:	4b02      	ldr	r3, [pc, #8]	; (1c8 <disable+0x14>)
     1be:	4798      	blx	r3
}
     1c0:	46c0      	nop			; (mov r8, r8)
     1c2:	46bd      	mov	sp, r7
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	00000115 	.word	0x00000115

000001cc <read8_reg>:

uint8_t read8_reg(uint8_t reg) {
     1cc:	b580      	push	{r7, lr}
     1ce:	b086      	sub	sp, #24
     1d0:	af00      	add	r7, sp, #0
     1d2:	0002      	movs	r2, r0
     1d4:	1dfb      	adds	r3, r7, #7
     1d6:	701a      	strb	r2, [r3, #0]
	if(is_init) {
     1d8:	4b1a      	ldr	r3, [pc, #104]	; (244 <read8_reg+0x78>)
     1da:	681b      	ldr	r3, [r3, #0]
     1dc:	2b00      	cmp	r3, #0
     1de:	d02c      	beq.n	23a <read8_reg+0x6e>
		enable();
     1e0:	4b19      	ldr	r3, [pc, #100]	; (248 <read8_reg+0x7c>)
     1e2:	4798      	blx	r3
		uint8_t read_buffer[2];
		read_buffer[0] = reg;
     1e4:	230c      	movs	r3, #12
     1e6:	18fb      	adds	r3, r7, r3
     1e8:	1dfa      	adds	r2, r7, #7
     1ea:	7812      	ldrb	r2, [r2, #0]
     1ec:	701a      	strb	r2, [r3, #0]
		rd_packet.address = TSL2561_ADDR_FLOAT;
     1ee:	4b17      	ldr	r3, [pc, #92]	; (24c <read8_reg+0x80>)
     1f0:	2239      	movs	r2, #57	; 0x39
     1f2:	801a      	strh	r2, [r3, #0]
		rd_packet.data_length = 2;
     1f4:	4b15      	ldr	r3, [pc, #84]	; (24c <read8_reg+0x80>)
     1f6:	2202      	movs	r2, #2
     1f8:	805a      	strh	r2, [r3, #2]
		rd_packet.data = read_buffer;
     1fa:	4b14      	ldr	r3, [pc, #80]	; (24c <read8_reg+0x80>)
     1fc:	220c      	movs	r2, #12
     1fe:	18ba      	adds	r2, r7, r2
     200:	605a      	str	r2, [r3, #4]
		int timeout = 0;
     202:	2300      	movs	r3, #0
     204:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
     206:	23fa      	movs	r3, #250	; 0xfa
     208:	009b      	lsls	r3, r3, #2
     20a:	613b      	str	r3, [r7, #16]
		while (i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet) !=
     20c:	e005      	b.n	21a <read8_reg+0x4e>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
     20e:	697b      	ldr	r3, [r7, #20]
     210:	1c5a      	adds	r2, r3, #1
     212:	617a      	str	r2, [r7, #20]
     214:	693a      	ldr	r2, [r7, #16]
     216:	4293      	cmp	r3, r2
     218:	d008      	beq.n	22c <read8_reg+0x60>
		while (i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet) !=
     21a:	4a0c      	ldr	r2, [pc, #48]	; (24c <read8_reg+0x80>)
     21c:	4b0c      	ldr	r3, [pc, #48]	; (250 <read8_reg+0x84>)
     21e:	0011      	movs	r1, r2
     220:	0018      	movs	r0, r3
     222:	4b0c      	ldr	r3, [pc, #48]	; (254 <read8_reg+0x88>)
     224:	4798      	blx	r3
     226:	1e03      	subs	r3, r0, #0
     228:	d1f1      	bne.n	20e <read8_reg+0x42>
     22a:	e000      	b.n	22e <read8_reg+0x62>
				break;
     22c:	46c0      	nop			; (mov r8, r8)
			}
		}
		
		disable();
     22e:	4b0a      	ldr	r3, [pc, #40]	; (258 <read8_reg+0x8c>)
     230:	4798      	blx	r3
		return read_buffer[1];
     232:	230c      	movs	r3, #12
     234:	18fb      	adds	r3, r7, r3
     236:	785b      	ldrb	r3, [r3, #1]
     238:	e000      	b.n	23c <read8_reg+0x70>
	}
	return 0;
     23a:	2300      	movs	r3, #0
}
     23c:	0018      	movs	r0, r3
     23e:	46bd      	mov	sp, r7
     240:	b006      	add	sp, #24
     242:	bd80      	pop	{r7, pc}
     244:	20000240 	.word	0x20000240
     248:	0000019d 	.word	0x0000019d
     24c:	20000014 	.word	0x20000014
     250:	200002c8 	.word	0x200002c8
     254:	000016f1 	.word	0x000016f1
     258:	000001b5 	.word	0x000001b5

0000025c <read16_reg>:

uint16_t read16_reg(uint8_t reg) {
     25c:	b580      	push	{r7, lr}
     25e:	b086      	sub	sp, #24
     260:	af00      	add	r7, sp, #0
     262:	0002      	movs	r2, r0
     264:	1dfb      	adds	r3, r7, #7
     266:	701a      	strb	r2, [r3, #0]
	if(is_init) {
     268:	4b28      	ldr	r3, [pc, #160]	; (30c <read16_reg+0xb0>)
     26a:	681b      	ldr	r3, [r3, #0]
     26c:	2b00      	cmp	r3, #0
     26e:	d047      	beq.n	300 <read16_reg+0xa4>
		enable();
     270:	4b27      	ldr	r3, [pc, #156]	; (310 <read16_reg+0xb4>)
     272:	4798      	blx	r3
		uint8_t read_buffer[3];
		read_buffer[0] = reg;
     274:	2308      	movs	r3, #8
     276:	18fb      	adds	r3, r7, r3
     278:	1dfa      	adds	r2, r7, #7
     27a:	7812      	ldrb	r2, [r2, #0]
     27c:	701a      	strb	r2, [r3, #0]
		rd_packet.address = TSL2561_ADDR_FLOAT;
     27e:	4b25      	ldr	r3, [pc, #148]	; (314 <read16_reg+0xb8>)
     280:	2239      	movs	r2, #57	; 0x39
     282:	801a      	strh	r2, [r3, #0]
		rd_packet.data_length = 3;
     284:	4b23      	ldr	r3, [pc, #140]	; (314 <read16_reg+0xb8>)
     286:	2203      	movs	r2, #3
     288:	805a      	strh	r2, [r3, #2]
		rd_packet.data = read_buffer;
     28a:	4b22      	ldr	r3, [pc, #136]	; (314 <read16_reg+0xb8>)
     28c:	2208      	movs	r2, #8
     28e:	18ba      	adds	r2, r7, r2
     290:	605a      	str	r2, [r3, #4]
		int timeout = 0;
     292:	2300      	movs	r3, #0
     294:	617b      	str	r3, [r7, #20]
		int max_timeout = 1000;
     296:	23fa      	movs	r3, #250	; 0xfa
     298:	009b      	lsls	r3, r3, #2
     29a:	613b      	str	r3, [r7, #16]
		while (i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet) !=
     29c:	e005      	b.n	2aa <read16_reg+0x4e>
		STATUS_OK) {
			/* Increment timeout counter and check if timed out. */
			if (timeout++ == max_timeout) {
     29e:	697b      	ldr	r3, [r7, #20]
     2a0:	1c5a      	adds	r2, r3, #1
     2a2:	617a      	str	r2, [r7, #20]
     2a4:	693a      	ldr	r2, [r7, #16]
     2a6:	4293      	cmp	r3, r2
     2a8:	d008      	beq.n	2bc <read16_reg+0x60>
		while (i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet) !=
     2aa:	4a1a      	ldr	r2, [pc, #104]	; (314 <read16_reg+0xb8>)
     2ac:	4b1a      	ldr	r3, [pc, #104]	; (318 <read16_reg+0xbc>)
     2ae:	0011      	movs	r1, r2
     2b0:	0018      	movs	r0, r3
     2b2:	4b1a      	ldr	r3, [pc, #104]	; (31c <read16_reg+0xc0>)
     2b4:	4798      	blx	r3
     2b6:	1e03      	subs	r3, r0, #0
     2b8:	d1f1      	bne.n	29e <read16_reg+0x42>
     2ba:	e000      	b.n	2be <read16_reg+0x62>
				break;
     2bc:	46c0      	nop			; (mov r8, r8)
			}
		}
		uint8_t t = read_buffer[1];
     2be:	230f      	movs	r3, #15
     2c0:	18fb      	adds	r3, r7, r3
     2c2:	2208      	movs	r2, #8
     2c4:	18ba      	adds	r2, r7, r2
     2c6:	7852      	ldrb	r2, [r2, #1]
     2c8:	701a      	strb	r2, [r3, #0]
		uint8_t x = read_buffer[2];
     2ca:	230e      	movs	r3, #14
     2cc:	18fb      	adds	r3, r7, r3
     2ce:	2208      	movs	r2, #8
     2d0:	18ba      	adds	r2, r7, r2
     2d2:	7892      	ldrb	r2, [r2, #2]
     2d4:	701a      	strb	r2, [r3, #0]
		x <<= 8;
     2d6:	230e      	movs	r3, #14
     2d8:	18fb      	adds	r3, r7, r3
     2da:	2200      	movs	r2, #0
     2dc:	701a      	strb	r2, [r3, #0]
		x |= t;
     2de:	230e      	movs	r3, #14
     2e0:	18fb      	adds	r3, r7, r3
     2e2:	220e      	movs	r2, #14
     2e4:	18b9      	adds	r1, r7, r2
     2e6:	220f      	movs	r2, #15
     2e8:	18ba      	adds	r2, r7, r2
     2ea:	7809      	ldrb	r1, [r1, #0]
     2ec:	7812      	ldrb	r2, [r2, #0]
     2ee:	430a      	orrs	r2, r1
     2f0:	701a      	strb	r2, [r3, #0]
		disable();
     2f2:	4b0b      	ldr	r3, [pc, #44]	; (320 <read16_reg+0xc4>)
     2f4:	4798      	blx	r3
		return x;
     2f6:	230e      	movs	r3, #14
     2f8:	18fb      	adds	r3, r7, r3
     2fa:	781b      	ldrb	r3, [r3, #0]
     2fc:	b29b      	uxth	r3, r3
     2fe:	e000      	b.n	302 <read16_reg+0xa6>
	}
	return 0;
     300:	2300      	movs	r3, #0
}
     302:	0018      	movs	r0, r3
     304:	46bd      	mov	sp, r7
     306:	b006      	add	sp, #24
     308:	bd80      	pop	{r7, pc}
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	20000240 	.word	0x20000240
     310:	0000019d 	.word	0x0000019d
     314:	20000014 	.word	0x20000014
     318:	200002c8 	.word	0x200002c8
     31c:	000016f1 	.word	0x000016f1
     320:	000001b5 	.word	0x000001b5

00000324 <tsl2561_init>:

int tsl2561_init() {
     324:	b590      	push	{r4, r7, lr}
     326:	b083      	sub	sp, #12
     328:	af00      	add	r7, sp, #0
	if(is_init) {
     32a:	4b0e      	ldr	r3, [pc, #56]	; (364 <tsl2561_init+0x40>)
     32c:	681b      	ldr	r3, [r3, #0]
     32e:	2b00      	cmp	r3, #0
     330:	d001      	beq.n	336 <tsl2561_init+0x12>
		return 1;
     332:	2301      	movs	r3, #1
     334:	e012      	b.n	35c <tsl2561_init+0x38>
	}
	configure_i2c();
     336:	4b0c      	ldr	r3, [pc, #48]	; (368 <tsl2561_init+0x44>)
     338:	4798      	blx	r3
	is_init = true;
     33a:	4b0a      	ldr	r3, [pc, #40]	; (364 <tsl2561_init+0x40>)
     33c:	2201      	movs	r2, #1
     33e:	601a      	str	r2, [r3, #0]
	  uint8_t x = read8_reg(TSL2561_REGISTER_ID);
     340:	1dfc      	adds	r4, r7, #7
     342:	200a      	movs	r0, #10
     344:	4b09      	ldr	r3, [pc, #36]	; (36c <tsl2561_init+0x48>)
     346:	4798      	blx	r3
     348:	0003      	movs	r3, r0
     34a:	7023      	strb	r3, [r4, #0]
	  if (x & 0xF0 != 0x10) { // ID code for TSL2561
     34c:	1dfb      	adds	r3, r7, #7
     34e:	781b      	ldrb	r3, [r3, #0]
     350:	2201      	movs	r2, #1
     352:	4013      	ands	r3, r2
     354:	d001      	beq.n	35a <tsl2561_init+0x36>
		  return 0;
     356:	2300      	movs	r3, #0
     358:	e000      	b.n	35c <tsl2561_init+0x38>
	  }
	  return 1;
     35a:	2301      	movs	r3, #1
	
}
     35c:	0018      	movs	r0, r3
     35e:	46bd      	mov	sp, r7
     360:	b003      	add	sp, #12
     362:	bd90      	pop	{r4, r7, pc}
     364:	20000240 	.word	0x20000240
     368:	00005b31 	.word	0x00005b31
     36c:	000001cd 	.word	0x000001cd

00000370 <calculateLux>:

int calculateLux(uint16_t broadband, uint16_t ir) {
     370:	b580      	push	{r7, lr}
     372:	b08c      	sub	sp, #48	; 0x30
     374:	af00      	add	r7, sp, #0
     376:	0002      	movs	r2, r0
     378:	1dbb      	adds	r3, r7, #6
     37a:	801a      	strh	r2, [r3, #0]
     37c:	1d3b      	adds	r3, r7, #4
     37e:	1c0a      	adds	r2, r1, #0
     380:	801a      	strh	r2, [r3, #0]

	/* Make sure the sensor isn't saturated! */
	uint16_t clipThreshold;

	/* Return 65536 lux if the sensor is saturated */
	if ((broadband > clipThreshold) || (ir > clipThreshold))
     382:	1dba      	adds	r2, r7, #6
     384:	2322      	movs	r3, #34	; 0x22
     386:	18fb      	adds	r3, r7, r3
     388:	8812      	ldrh	r2, [r2, #0]
     38a:	881b      	ldrh	r3, [r3, #0]
     38c:	429a      	cmp	r2, r3
     38e:	d806      	bhi.n	39e <calculateLux+0x2e>
     390:	1d3a      	adds	r2, r7, #4
     392:	2322      	movs	r3, #34	; 0x22
     394:	18fb      	adds	r3, r7, r3
     396:	8812      	ldrh	r2, [r2, #0]
     398:	881b      	ldrh	r3, [r3, #0]
     39a:	429a      	cmp	r2, r3
     39c:	d902      	bls.n	3a4 <calculateLux+0x34>
	{
		return 65536;
     39e:	2380      	movs	r3, #128	; 0x80
     3a0:	025b      	lsls	r3, r3, #9
     3a2:	e07b      	b.n	49c <calculateLux+0x12c>
	}

	/* Scale the channel values */
	channel0 = (broadband * chScale) >> TSL2561_LUX_CHSCALE;
     3a4:	1dbb      	adds	r3, r7, #6
     3a6:	881b      	ldrh	r3, [r3, #0]
     3a8:	69fa      	ldr	r2, [r7, #28]
     3aa:	4353      	muls	r3, r2
     3ac:	0a9b      	lsrs	r3, r3, #10
     3ae:	61bb      	str	r3, [r7, #24]
	channel1 = (ir * chScale) >> TSL2561_LUX_CHSCALE;
     3b0:	1d3b      	adds	r3, r7, #4
     3b2:	881b      	ldrh	r3, [r3, #0]
     3b4:	69fa      	ldr	r2, [r7, #28]
     3b6:	4353      	muls	r3, r2
     3b8:	0a9b      	lsrs	r3, r3, #10
     3ba:	617b      	str	r3, [r7, #20]

	/* Find the ratio of the channel values (Channel1/Channel0) */
	unsigned long ratio1 = 0;
     3bc:	2300      	movs	r3, #0
     3be:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (channel0 != 0) ratio1 = (channel1 << (TSL2561_LUX_RATIOSCALE+1)) / channel0;
     3c0:	69bb      	ldr	r3, [r7, #24]
     3c2:	2b00      	cmp	r3, #0
     3c4:	d007      	beq.n	3d6 <calculateLux+0x66>
     3c6:	697b      	ldr	r3, [r7, #20]
     3c8:	029a      	lsls	r2, r3, #10
     3ca:	4b36      	ldr	r3, [pc, #216]	; (4a4 <calculateLux+0x134>)
     3cc:	69b9      	ldr	r1, [r7, #24]
     3ce:	0010      	movs	r0, r2
     3d0:	4798      	blx	r3
     3d2:	0003      	movs	r3, r0
     3d4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* round the ratio value */
	unsigned long ratio = (ratio1 + 1) >> 1;
     3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3d8:	3301      	adds	r3, #1
     3da:	085b      	lsrs	r3, r3, #1
     3dc:	613b      	str	r3, [r7, #16]
	else if (ratio <= TSL2561_LUX_K7C)
	{b=TSL2561_LUX_B7C; m=TSL2561_LUX_M7C;}
	else if (ratio > TSL2561_LUX_K8C)
	{b=TSL2561_LUX_B8C; m=TSL2561_LUX_M8C;}
	#else
	if ((ratio >= 0) && (ratio <= TSL2561_LUX_K1T))
     3de:	693b      	ldr	r3, [r7, #16]
     3e0:	2b40      	cmp	r3, #64	; 0x40
     3e2:	d806      	bhi.n	3f2 <calculateLux+0x82>
	{b=TSL2561_LUX_B1T; m=TSL2561_LUX_M1T;}
     3e4:	23f9      	movs	r3, #249	; 0xf9
     3e6:	005b      	lsls	r3, r3, #1
     3e8:	62bb      	str	r3, [r7, #40]	; 0x28
     3ea:	23df      	movs	r3, #223	; 0xdf
     3ec:	005b      	lsls	r3, r3, #1
     3ee:	627b      	str	r3, [r7, #36]	; 0x24
     3f0:	e042      	b.n	478 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K2T)
     3f2:	693b      	ldr	r3, [r7, #16]
     3f4:	2b80      	cmp	r3, #128	; 0x80
     3f6:	d805      	bhi.n	404 <calculateLux+0x94>
	{b=TSL2561_LUX_B2T; m=TSL2561_LUX_M2T;}
     3f8:	2385      	movs	r3, #133	; 0x85
     3fa:	009b      	lsls	r3, r3, #2
     3fc:	62bb      	str	r3, [r7, #40]	; 0x28
     3fe:	4b2a      	ldr	r3, [pc, #168]	; (4a8 <calculateLux+0x138>)
     400:	627b      	str	r3, [r7, #36]	; 0x24
     402:	e039      	b.n	478 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K3T)
     404:	693b      	ldr	r3, [r7, #16]
     406:	2bc0      	cmp	r3, #192	; 0xc0
     408:	d804      	bhi.n	414 <calculateLux+0xa4>
	{b=TSL2561_LUX_B3T; m=TSL2561_LUX_M3T;}
     40a:	4b28      	ldr	r3, [pc, #160]	; (4ac <calculateLux+0x13c>)
     40c:	62bb      	str	r3, [r7, #40]	; 0x28
     40e:	4b28      	ldr	r3, [pc, #160]	; (4b0 <calculateLux+0x140>)
     410:	627b      	str	r3, [r7, #36]	; 0x24
     412:	e031      	b.n	478 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K4T)
     414:	693a      	ldr	r2, [r7, #16]
     416:	2380      	movs	r3, #128	; 0x80
     418:	005b      	lsls	r3, r3, #1
     41a:	429a      	cmp	r2, r3
     41c:	d805      	bhi.n	42a <calculateLux+0xba>
	{b=TSL2561_LUX_B4T; m=TSL2561_LUX_M4T;}
     41e:	239c      	movs	r3, #156	; 0x9c
     420:	009b      	lsls	r3, r3, #2
     422:	62bb      	str	r3, [r7, #40]	; 0x28
     424:	4b23      	ldr	r3, [pc, #140]	; (4b4 <calculateLux+0x144>)
     426:	627b      	str	r3, [r7, #36]	; 0x24
     428:	e026      	b.n	478 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K5T)
     42a:	693a      	ldr	r2, [r7, #16]
     42c:	239c      	movs	r3, #156	; 0x9c
     42e:	005b      	lsls	r3, r3, #1
     430:	429a      	cmp	r2, r3
     432:	d806      	bhi.n	442 <calculateLux+0xd2>
	{b=TSL2561_LUX_B5T; m=TSL2561_LUX_M5T;}
     434:	2370      	movs	r3, #112	; 0x70
     436:	33ff      	adds	r3, #255	; 0xff
     438:	62bb      	str	r3, [r7, #40]	; 0x28
     43a:	23fe      	movs	r3, #254	; 0xfe
     43c:	005b      	lsls	r3, r3, #1
     43e:	627b      	str	r3, [r7, #36]	; 0x24
     440:	e01a      	b.n	478 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K6T)
     442:	693a      	ldr	r2, [r7, #16]
     444:	23cd      	movs	r3, #205	; 0xcd
     446:	005b      	lsls	r3, r3, #1
     448:	429a      	cmp	r2, r3
     44a:	d804      	bhi.n	456 <calculateLux+0xe6>
	{b=TSL2561_LUX_B6T; m=TSL2561_LUX_M6T;}
     44c:	23d2      	movs	r3, #210	; 0xd2
     44e:	62bb      	str	r3, [r7, #40]	; 0x28
     450:	23fb      	movs	r3, #251	; 0xfb
     452:	627b      	str	r3, [r7, #36]	; 0x24
     454:	e010      	b.n	478 <calculateLux+0x108>
	else if (ratio <= TSL2561_LUX_K7T)
     456:	693b      	ldr	r3, [r7, #16]
     458:	4a17      	ldr	r2, [pc, #92]	; (4b8 <calculateLux+0x148>)
     45a:	4293      	cmp	r3, r2
     45c:	d804      	bhi.n	468 <calculateLux+0xf8>
	{b=TSL2561_LUX_B7T; m=TSL2561_LUX_M7T;}
     45e:	2318      	movs	r3, #24
     460:	62bb      	str	r3, [r7, #40]	; 0x28
     462:	2312      	movs	r3, #18
     464:	627b      	str	r3, [r7, #36]	; 0x24
     466:	e007      	b.n	478 <calculateLux+0x108>
	else if (ratio > TSL2561_LUX_K8T)
     468:	693b      	ldr	r3, [r7, #16]
     46a:	4a13      	ldr	r2, [pc, #76]	; (4b8 <calculateLux+0x148>)
     46c:	4293      	cmp	r3, r2
     46e:	d903      	bls.n	478 <calculateLux+0x108>
	{b=TSL2561_LUX_B8T; m=TSL2561_LUX_M8T;}
     470:	2300      	movs	r3, #0
     472:	62bb      	str	r3, [r7, #40]	; 0x28
     474:	2300      	movs	r3, #0
     476:	627b      	str	r3, [r7, #36]	; 0x24
	#endif

	unsigned long temp;
	temp = ((channel0 * b) - (channel1 * m));
     478:	69bb      	ldr	r3, [r7, #24]
     47a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     47c:	435a      	muls	r2, r3
     47e:	697b      	ldr	r3, [r7, #20]
     480:	6a79      	ldr	r1, [r7, #36]	; 0x24
     482:	434b      	muls	r3, r1
     484:	1ad3      	subs	r3, r2, r3
     486:	60fb      	str	r3, [r7, #12]

	/* Do not allow negative lux value */
	if (temp < 0) temp = 0;

	/* Round lsb (2^(LUX_SCALE-1)) */
	temp += (1 << (TSL2561_LUX_LUXSCALE-1));
     488:	68fb      	ldr	r3, [r7, #12]
     48a:	2280      	movs	r2, #128	; 0x80
     48c:	0192      	lsls	r2, r2, #6
     48e:	4694      	mov	ip, r2
     490:	4463      	add	r3, ip
     492:	60fb      	str	r3, [r7, #12]

	/* Strip off fractional portion */
	uint32_t lux = temp >> TSL2561_LUX_LUXSCALE;
     494:	68fb      	ldr	r3, [r7, #12]
     496:	0b9b      	lsrs	r3, r3, #14
     498:	60bb      	str	r3, [r7, #8]

	/* Signal I2C had no errors */
	return lux;
     49a:	68bb      	ldr	r3, [r7, #8]
}
     49c:	0018      	movs	r0, r3
     49e:	46bd      	mov	sp, r7
     4a0:	b00c      	add	sp, #48	; 0x30
     4a2:	bd80      	pop	{r7, pc}
     4a4:	00008c49 	.word	0x00008c49
     4a8:	000002d1 	.word	0x000002d1
     4ac:	0000023f 	.word	0x0000023f
     4b0:	0000037b 	.word	0x0000037b
     4b4:	000003fe 	.word	0x000003fe
     4b8:	0000029a 	.word	0x0000029a

000004bc <getLuminosity>:

int getLuminosity() {
     4bc:	b590      	push	{r4, r7, lr}
     4be:	b083      	sub	sp, #12
     4c0:	af00      	add	r7, sp, #0
	/* Reads a two byte value from channel 0 (visible + infrared) */
	uint16_t broadband = read16_reg((TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN0_LOW));
     4c2:	1dbc      	adds	r4, r7, #6
     4c4:	20ac      	movs	r0, #172	; 0xac
     4c6:	4b0b      	ldr	r3, [pc, #44]	; (4f4 <getLuminosity+0x38>)
     4c8:	4798      	blx	r3
     4ca:	0003      	movs	r3, r0
     4cc:	8023      	strh	r3, [r4, #0]

	/* Reads a two byte value from channel 1 (infrared) */
	uint16_t ir = read16_reg((TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN1_LOW));
     4ce:	1d3c      	adds	r4, r7, #4
     4d0:	20ae      	movs	r0, #174	; 0xae
     4d2:	4b08      	ldr	r3, [pc, #32]	; (4f4 <getLuminosity+0x38>)
     4d4:	4798      	blx	r3
     4d6:	0003      	movs	r3, r0
     4d8:	8023      	strh	r3, [r4, #0]
	
	return calculateLux(broadband, ir);
     4da:	1d3b      	adds	r3, r7, #4
     4dc:	881a      	ldrh	r2, [r3, #0]
     4de:	1dbb      	adds	r3, r7, #6
     4e0:	881b      	ldrh	r3, [r3, #0]
     4e2:	0011      	movs	r1, r2
     4e4:	0018      	movs	r0, r3
     4e6:	4b04      	ldr	r3, [pc, #16]	; (4f8 <getLuminosity+0x3c>)
     4e8:	4798      	blx	r3
     4ea:	0003      	movs	r3, r0
}
     4ec:	0018      	movs	r0, r3
     4ee:	46bd      	mov	sp, r7
     4f0:	b003      	add	sp, #12
     4f2:	bd90      	pop	{r4, r7, pc}
     4f4:	0000025d 	.word	0x0000025d
     4f8:	00000371 	.word	0x00000371

000004fc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     4fc:	b580      	push	{r7, lr}
     4fe:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     500:	2000      	movs	r0, #0
     502:	4b0f      	ldr	r3, [pc, #60]	; (540 <delay_init+0x44>)
     504:	4798      	blx	r3
     506:	0002      	movs	r2, r0
     508:	4b0e      	ldr	r3, [pc, #56]	; (544 <delay_init+0x48>)
     50a:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     50c:	4b0d      	ldr	r3, [pc, #52]	; (544 <delay_init+0x48>)
     50e:	6818      	ldr	r0, [r3, #0]
     510:	4b0d      	ldr	r3, [pc, #52]	; (548 <delay_init+0x4c>)
     512:	22fa      	movs	r2, #250	; 0xfa
     514:	0091      	lsls	r1, r2, #2
     516:	4798      	blx	r3
     518:	0003      	movs	r3, r0
     51a:	001a      	movs	r2, r3
     51c:	4b09      	ldr	r3, [pc, #36]	; (544 <delay_init+0x48>)
     51e:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     520:	4b08      	ldr	r3, [pc, #32]	; (544 <delay_init+0x48>)
     522:	6818      	ldr	r0, [r3, #0]
     524:	4b08      	ldr	r3, [pc, #32]	; (548 <delay_init+0x4c>)
     526:	22fa      	movs	r2, #250	; 0xfa
     528:	0091      	lsls	r1, r2, #2
     52a:	4798      	blx	r3
     52c:	0003      	movs	r3, r0
     52e:	001a      	movs	r2, r3
     530:	4b06      	ldr	r3, [pc, #24]	; (54c <delay_init+0x50>)
     532:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     534:	4b06      	ldr	r3, [pc, #24]	; (550 <delay_init+0x54>)
     536:	2205      	movs	r2, #5
     538:	601a      	str	r2, [r3, #0]
}
     53a:	46c0      	nop			; (mov r8, r8)
     53c:	46bd      	mov	sp, r7
     53e:	bd80      	pop	{r7, pc}
     540:	00004321 	.word	0x00004321
     544:	20000020 	.word	0x20000020
     548:	00008c49 	.word	0x00008c49
     54c:	20000024 	.word	0x20000024
     550:	e000e010 	.word	0xe000e010

00000554 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     554:	b580      	push	{r7, lr}
     556:	b082      	sub	sp, #8
     558:	af00      	add	r7, sp, #0
     55a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     55c:	687b      	ldr	r3, [r7, #4]
     55e:	2200      	movs	r2, #0
     560:	701a      	strb	r2, [r3, #0]
}
     562:	46c0      	nop			; (mov r8, r8)
     564:	46bd      	mov	sp, r7
     566:	b002      	add	sp, #8
     568:	bd80      	pop	{r7, pc}
	...

0000056c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     56c:	b580      	push	{r7, lr}
     56e:	b082      	sub	sp, #8
     570:	af00      	add	r7, sp, #0
     572:	0002      	movs	r2, r0
     574:	6039      	str	r1, [r7, #0]
     576:	1dfb      	adds	r3, r7, #7
     578:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     57a:	1dfb      	adds	r3, r7, #7
     57c:	781b      	ldrb	r3, [r3, #0]
     57e:	2b01      	cmp	r3, #1
     580:	d00a      	beq.n	598 <system_apb_clock_set_mask+0x2c>
     582:	2b02      	cmp	r3, #2
     584:	d00f      	beq.n	5a6 <system_apb_clock_set_mask+0x3a>
     586:	2b00      	cmp	r3, #0
     588:	d114      	bne.n	5b4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     58a:	4b0e      	ldr	r3, [pc, #56]	; (5c4 <system_apb_clock_set_mask+0x58>)
     58c:	4a0d      	ldr	r2, [pc, #52]	; (5c4 <system_apb_clock_set_mask+0x58>)
     58e:	6991      	ldr	r1, [r2, #24]
     590:	683a      	ldr	r2, [r7, #0]
     592:	430a      	orrs	r2, r1
     594:	619a      	str	r2, [r3, #24]
			break;
     596:	e00f      	b.n	5b8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     598:	4b0a      	ldr	r3, [pc, #40]	; (5c4 <system_apb_clock_set_mask+0x58>)
     59a:	4a0a      	ldr	r2, [pc, #40]	; (5c4 <system_apb_clock_set_mask+0x58>)
     59c:	69d1      	ldr	r1, [r2, #28]
     59e:	683a      	ldr	r2, [r7, #0]
     5a0:	430a      	orrs	r2, r1
     5a2:	61da      	str	r2, [r3, #28]
			break;
     5a4:	e008      	b.n	5b8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5a6:	4b07      	ldr	r3, [pc, #28]	; (5c4 <system_apb_clock_set_mask+0x58>)
     5a8:	4a06      	ldr	r2, [pc, #24]	; (5c4 <system_apb_clock_set_mask+0x58>)
     5aa:	6a11      	ldr	r1, [r2, #32]
     5ac:	683a      	ldr	r2, [r7, #0]
     5ae:	430a      	orrs	r2, r1
     5b0:	621a      	str	r2, [r3, #32]
			break;
     5b2:	e001      	b.n	5b8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     5b4:	2317      	movs	r3, #23
     5b6:	e000      	b.n	5ba <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     5b8:	2300      	movs	r3, #0
}
     5ba:	0018      	movs	r0, r3
     5bc:	46bd      	mov	sp, r7
     5be:	b002      	add	sp, #8
     5c0:	bd80      	pop	{r7, pc}
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	40000400 	.word	0x40000400

000005c8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     5c8:	b580      	push	{r7, lr}
     5ca:	b082      	sub	sp, #8
     5cc:	af00      	add	r7, sp, #0
     5ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     5d0:	687b      	ldr	r3, [r7, #4]
     5d2:	2280      	movs	r2, #128	; 0x80
     5d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	2200      	movs	r2, #0
     5da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	2201      	movs	r2, #1
     5e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	2200      	movs	r2, #0
     5e6:	70da      	strb	r2, [r3, #3]
}
     5e8:	46c0      	nop			; (mov r8, r8)
     5ea:	46bd      	mov	sp, r7
     5ec:	b002      	add	sp, #8
     5ee:	bd80      	pop	{r7, pc}

000005f0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     5f0:	b580      	push	{r7, lr}
     5f2:	b082      	sub	sp, #8
     5f4:	af00      	add	r7, sp, #0
     5f6:	0002      	movs	r2, r0
     5f8:	1dfb      	adds	r3, r7, #7
     5fa:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     5fc:	1dfb      	adds	r3, r7, #7
     5fe:	781b      	ldrb	r3, [r3, #0]
     600:	2b00      	cmp	r3, #0
     602:	d002      	beq.n	60a <system_voltage_reference_enable+0x1a>
     604:	2b01      	cmp	r3, #1
     606:	d007      	beq.n	618 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     608:	e00d      	b.n	626 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     60a:	4b08      	ldr	r3, [pc, #32]	; (62c <system_voltage_reference_enable+0x3c>)
     60c:	4a07      	ldr	r2, [pc, #28]	; (62c <system_voltage_reference_enable+0x3c>)
     60e:	6c12      	ldr	r2, [r2, #64]	; 0x40
     610:	2102      	movs	r1, #2
     612:	430a      	orrs	r2, r1
     614:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     616:	e006      	b.n	626 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     618:	4b04      	ldr	r3, [pc, #16]	; (62c <system_voltage_reference_enable+0x3c>)
     61a:	4a04      	ldr	r2, [pc, #16]	; (62c <system_voltage_reference_enable+0x3c>)
     61c:	6c12      	ldr	r2, [r2, #64]	; 0x40
     61e:	2104      	movs	r1, #4
     620:	430a      	orrs	r2, r1
     622:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     624:	46c0      	nop			; (mov r8, r8)
	}
}
     626:	46bd      	mov	sp, r7
     628:	b002      	add	sp, #8
     62a:	bd80      	pop	{r7, pc}
     62c:	40000800 	.word	0x40000800

00000630 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     630:	b580      	push	{r7, lr}
     632:	b084      	sub	sp, #16
     634:	af00      	add	r7, sp, #0
     636:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     638:	687b      	ldr	r3, [r7, #4]
     63a:	681b      	ldr	r3, [r3, #0]
     63c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     63e:	68fb      	ldr	r3, [r7, #12]
     640:	7e5b      	ldrb	r3, [r3, #25]
     642:	b2db      	uxtb	r3, r3
     644:	b25b      	sxtb	r3, r3
     646:	2b00      	cmp	r3, #0
     648:	da01      	bge.n	64e <adc_is_syncing+0x1e>
		return true;
     64a:	2301      	movs	r3, #1
     64c:	e000      	b.n	650 <adc_is_syncing+0x20>
	}

	return false;
     64e:	2300      	movs	r3, #0
}
     650:	0018      	movs	r0, r3
     652:	46bd      	mov	sp, r7
     654:	b004      	add	sp, #16
     656:	bd80      	pop	{r7, pc}

00000658 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     658:	b580      	push	{r7, lr}
     65a:	b082      	sub	sp, #8
     65c:	af00      	add	r7, sp, #0
     65e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     660:	687b      	ldr	r3, [r7, #4]
     662:	2200      	movs	r2, #0
     664:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     666:	687b      	ldr	r3, [r7, #4]
     668:	2200      	movs	r2, #0
     66a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	2200      	movs	r2, #0
     670:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     672:	687b      	ldr	r3, [r7, #4]
     674:	2200      	movs	r2, #0
     676:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     678:	687b      	ldr	r3, [r7, #4]
     67a:	2200      	movs	r2, #0
     67c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     67e:	687b      	ldr	r3, [r7, #4]
     680:	2200      	movs	r2, #0
     682:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     684:	687b      	ldr	r3, [r7, #4]
     686:	2200      	movs	r2, #0
     688:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	2200      	movs	r2, #0
     68e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     690:	687b      	ldr	r3, [r7, #4]
     692:	2200      	movs	r2, #0
     694:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     696:	687b      	ldr	r3, [r7, #4]
     698:	22c0      	movs	r2, #192	; 0xc0
     69a:	0152      	lsls	r2, r2, #5
     69c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	2200      	movs	r2, #0
     6a2:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	2200      	movs	r2, #0
     6a8:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	2200      	movs	r2, #0
     6ae:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     6b0:	687b      	ldr	r3, [r7, #4]
     6b2:	2200      	movs	r2, #0
     6b4:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     6b6:	687b      	ldr	r3, [r7, #4]
     6b8:	2200      	movs	r2, #0
     6ba:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     6bc:	687b      	ldr	r3, [r7, #4]
     6be:	222a      	movs	r2, #42	; 0x2a
     6c0:	2100      	movs	r1, #0
     6c2:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     6c4:	687b      	ldr	r3, [r7, #4]
     6c6:	2200      	movs	r2, #0
     6c8:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	2200      	movs	r2, #0
     6ce:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	2224      	movs	r2, #36	; 0x24
     6d4:	2100      	movs	r1, #0
     6d6:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	2200      	movs	r2, #0
     6dc:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	2200      	movs	r2, #0
     6e2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     6e4:	687b      	ldr	r3, [r7, #4]
     6e6:	2200      	movs	r2, #0
     6e8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	222b      	movs	r2, #43	; 0x2b
     6ee:	2100      	movs	r1, #0
     6f0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	222c      	movs	r2, #44	; 0x2c
     6f6:	2100      	movs	r1, #0
     6f8:	5499      	strb	r1, [r3, r2]
}
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	46bd      	mov	sp, r7
     6fe:	b002      	add	sp, #8
     700:	bd80      	pop	{r7, pc}
	...

00000704 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     704:	b580      	push	{r7, lr}
     706:	b098      	sub	sp, #96	; 0x60
     708:	af00      	add	r7, sp, #0
     70a:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     70c:	230c      	movs	r3, #12
     70e:	18fa      	adds	r2, r7, r3
     710:	4b15      	ldr	r3, [pc, #84]	; (768 <_adc_configure_ain_pin+0x64>)
     712:	0010      	movs	r0, r2
     714:	0019      	movs	r1, r3
     716:	2350      	movs	r3, #80	; 0x50
     718:	001a      	movs	r2, r3
     71a:	4b14      	ldr	r3, [pc, #80]	; (76c <_adc_configure_ain_pin+0x68>)
     71c:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     71e:	4b14      	ldr	r3, [pc, #80]	; (770 <_adc_configure_ain_pin+0x6c>)
     720:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     722:	687b      	ldr	r3, [r7, #4]
     724:	2b13      	cmp	r3, #19
     726:	d81a      	bhi.n	75e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     728:	230c      	movs	r3, #12
     72a:	18fb      	adds	r3, r7, r3
     72c:	687a      	ldr	r2, [r7, #4]
     72e:	0092      	lsls	r2, r2, #2
     730:	58d3      	ldr	r3, [r2, r3]
     732:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     734:	2308      	movs	r3, #8
     736:	18fb      	adds	r3, r7, r3
     738:	0018      	movs	r0, r3
     73a:	4b0e      	ldr	r3, [pc, #56]	; (774 <_adc_configure_ain_pin+0x70>)
     73c:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     73e:	2308      	movs	r3, #8
     740:	18fb      	adds	r3, r7, r3
     742:	2200      	movs	r2, #0
     744:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     746:	2308      	movs	r3, #8
     748:	18fb      	adds	r3, r7, r3
     74a:	2201      	movs	r2, #1
     74c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     74e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     750:	b2db      	uxtb	r3, r3
     752:	2208      	movs	r2, #8
     754:	18ba      	adds	r2, r7, r2
     756:	0011      	movs	r1, r2
     758:	0018      	movs	r0, r3
     75a:	4b07      	ldr	r3, [pc, #28]	; (778 <_adc_configure_ain_pin+0x74>)
     75c:	4798      	blx	r3
	}
}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	46bd      	mov	sp, r7
     762:	b018      	add	sp, #96	; 0x60
     764:	bd80      	pop	{r7, pc}
     766:	46c0      	nop			; (mov r8, r8)
     768:	0000ad48 	.word	0x0000ad48
     76c:	000060a1 	.word	0x000060a1
     770:	0000ffff 	.word	0x0000ffff
     774:	000005c9 	.word	0x000005c9
     778:	000046e5 	.word	0x000046e5

0000077c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     77c:	b5f0      	push	{r4, r5, r6, r7, lr}
     77e:	b089      	sub	sp, #36	; 0x24
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
     784:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     786:	231f      	movs	r3, #31
     788:	18fb      	adds	r3, r7, r3
     78a:	2200      	movs	r2, #0
     78c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     78e:	2310      	movs	r3, #16
     790:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     792:	2317      	movs	r3, #23
     794:	18fb      	adds	r3, r7, r3
     796:	2200      	movs	r2, #0
     798:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	681b      	ldr	r3, [r3, #0]
     79e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     7a0:	230c      	movs	r3, #12
     7a2:	18fb      	adds	r3, r7, r3
     7a4:	0018      	movs	r0, r3
     7a6:	4bce      	ldr	r3, [pc, #824]	; (ae0 <_adc_set_config+0x364>)
     7a8:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     7aa:	683b      	ldr	r3, [r7, #0]
     7ac:	781a      	ldrb	r2, [r3, #0]
     7ae:	230c      	movs	r3, #12
     7b0:	18fb      	adds	r3, r7, r3
     7b2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     7b4:	230c      	movs	r3, #12
     7b6:	18fb      	adds	r3, r7, r3
     7b8:	0019      	movs	r1, r3
     7ba:	201e      	movs	r0, #30
     7bc:	4bc9      	ldr	r3, [pc, #804]	; (ae4 <_adc_set_config+0x368>)
     7be:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     7c0:	201e      	movs	r0, #30
     7c2:	4bc9      	ldr	r3, [pc, #804]	; (ae8 <_adc_set_config+0x36c>)
     7c4:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     7c6:	683b      	ldr	r3, [r7, #0]
     7c8:	222c      	movs	r2, #44	; 0x2c
     7ca:	5c9b      	ldrb	r3, [r3, r2]
     7cc:	2b00      	cmp	r3, #0
     7ce:	d040      	beq.n	852 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     7d0:	2316      	movs	r3, #22
     7d2:	18fb      	adds	r3, r7, r3
     7d4:	683a      	ldr	r2, [r7, #0]
     7d6:	212b      	movs	r1, #43	; 0x2b
     7d8:	5c52      	ldrb	r2, [r2, r1]
     7da:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     7dc:	683b      	ldr	r3, [r7, #0]
     7de:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
     7e0:	2315      	movs	r3, #21
     7e2:	18fb      	adds	r3, r7, r3
     7e4:	2216      	movs	r2, #22
     7e6:	18ba      	adds	r2, r7, r2
     7e8:	7812      	ldrb	r2, [r2, #0]
     7ea:	188a      	adds	r2, r1, r2
     7ec:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     7ee:	683b      	ldr	r3, [r7, #0]
     7f0:	222c      	movs	r2, #44	; 0x2c
     7f2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
     7f4:	230f      	movs	r3, #15
     7f6:	18fb      	adds	r3, r7, r3
     7f8:	2215      	movs	r2, #21
     7fa:	18ba      	adds	r2, r7, r2
     7fc:	7812      	ldrb	r2, [r2, #0]
     7fe:	188a      	adds	r2, r1, r2
     800:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
     802:	e018      	b.n	836 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     804:	2316      	movs	r3, #22
     806:	18fb      	adds	r3, r7, r3
     808:	781b      	ldrb	r3, [r3, #0]
     80a:	220f      	movs	r2, #15
     80c:	4013      	ands	r3, r2
     80e:	683a      	ldr	r2, [r7, #0]
     810:	7b12      	ldrb	r2, [r2, #12]
     812:	189b      	adds	r3, r3, r2
     814:	0018      	movs	r0, r3
     816:	4bb5      	ldr	r3, [pc, #724]	; (aec <_adc_set_config+0x370>)
     818:	4798      	blx	r3
			start_pin++;
     81a:	2315      	movs	r3, #21
     81c:	18fb      	adds	r3, r7, r3
     81e:	781a      	ldrb	r2, [r3, #0]
     820:	2315      	movs	r3, #21
     822:	18fb      	adds	r3, r7, r3
     824:	3201      	adds	r2, #1
     826:	701a      	strb	r2, [r3, #0]
			offset++;
     828:	2316      	movs	r3, #22
     82a:	18fb      	adds	r3, r7, r3
     82c:	781a      	ldrb	r2, [r3, #0]
     82e:	2316      	movs	r3, #22
     830:	18fb      	adds	r3, r7, r3
     832:	3201      	adds	r2, #1
     834:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
     836:	2315      	movs	r3, #21
     838:	18fa      	adds	r2, r7, r3
     83a:	230f      	movs	r3, #15
     83c:	18fb      	adds	r3, r7, r3
     83e:	7812      	ldrb	r2, [r2, #0]
     840:	781b      	ldrb	r3, [r3, #0]
     842:	429a      	cmp	r2, r3
     844:	d3de      	bcc.n	804 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
     846:	683b      	ldr	r3, [r7, #0]
     848:	89db      	ldrh	r3, [r3, #14]
     84a:	0018      	movs	r0, r3
     84c:	4ba7      	ldr	r3, [pc, #668]	; (aec <_adc_set_config+0x370>)
     84e:	4798      	blx	r3
     850:	e009      	b.n	866 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     852:	683b      	ldr	r3, [r7, #0]
     854:	7b1b      	ldrb	r3, [r3, #12]
     856:	0018      	movs	r0, r3
     858:	4ba4      	ldr	r3, [pc, #656]	; (aec <_adc_set_config+0x370>)
     85a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     85c:	683b      	ldr	r3, [r7, #0]
     85e:	89db      	ldrh	r3, [r3, #14]
     860:	0018      	movs	r0, r3
     862:	4ba2      	ldr	r3, [pc, #648]	; (aec <_adc_set_config+0x370>)
     864:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     866:	683b      	ldr	r3, [r7, #0]
     868:	7d5b      	ldrb	r3, [r3, #21]
     86a:	009b      	lsls	r3, r3, #2
     86c:	b2da      	uxtb	r2, r3
     86e:	693b      	ldr	r3, [r7, #16]
     870:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     872:	683b      	ldr	r3, [r7, #0]
     874:	7d9b      	ldrb	r3, [r3, #22]
     876:	01db      	lsls	r3, r3, #7
     878:	b25a      	sxtb	r2, r3
			(config->reference);
     87a:	683b      	ldr	r3, [r7, #0]
     87c:	785b      	ldrb	r3, [r3, #1]
     87e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     880:	4313      	orrs	r3, r2
     882:	b25b      	sxtb	r3, r3
     884:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     886:	693b      	ldr	r3, [r7, #16]
     888:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     88a:	683b      	ldr	r3, [r7, #0]
     88c:	791b      	ldrb	r3, [r3, #4]
     88e:	2b34      	cmp	r3, #52	; 0x34
     890:	d846      	bhi.n	920 <_adc_set_config+0x1a4>
     892:	009a      	lsls	r2, r3, #2
     894:	4b96      	ldr	r3, [pc, #600]	; (af0 <_adc_set_config+0x374>)
     896:	18d3      	adds	r3, r2, r3
     898:	681b      	ldr	r3, [r3, #0]
     89a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     89c:	231f      	movs	r3, #31
     89e:	18fb      	adds	r3, r7, r3
     8a0:	683a      	ldr	r2, [r7, #0]
     8a2:	7c52      	ldrb	r2, [r2, #17]
     8a4:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     8a6:	2317      	movs	r3, #23
     8a8:	18fb      	adds	r3, r7, r3
     8aa:	683a      	ldr	r2, [r7, #0]
     8ac:	7c12      	ldrb	r2, [r2, #16]
     8ae:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     8b0:	2310      	movs	r3, #16
     8b2:	61bb      	str	r3, [r7, #24]
		break;
     8b4:	e036      	b.n	924 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     8b6:	231f      	movs	r3, #31
     8b8:	18fb      	adds	r3, r7, r3
     8ba:	2201      	movs	r2, #1
     8bc:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     8be:	2317      	movs	r3, #23
     8c0:	18fb      	adds	r3, r7, r3
     8c2:	2202      	movs	r2, #2
     8c4:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     8c6:	2310      	movs	r3, #16
     8c8:	61bb      	str	r3, [r7, #24]
		break;
     8ca:	e02b      	b.n	924 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     8cc:	231f      	movs	r3, #31
     8ce:	18fb      	adds	r3, r7, r3
     8d0:	2202      	movs	r2, #2
     8d2:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     8d4:	2317      	movs	r3, #23
     8d6:	18fb      	adds	r3, r7, r3
     8d8:	2204      	movs	r2, #4
     8da:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     8dc:	2310      	movs	r3, #16
     8de:	61bb      	str	r3, [r7, #24]
		break;
     8e0:	e020      	b.n	924 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     8e2:	231f      	movs	r3, #31
     8e4:	18fb      	adds	r3, r7, r3
     8e6:	2201      	movs	r2, #1
     8e8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     8ea:	2317      	movs	r3, #23
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	2206      	movs	r2, #6
     8f0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     8f2:	2310      	movs	r3, #16
     8f4:	61bb      	str	r3, [r7, #24]
		break;
     8f6:	e015      	b.n	924 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     8f8:	231f      	movs	r3, #31
     8fa:	18fb      	adds	r3, r7, r3
     8fc:	2200      	movs	r2, #0
     8fe:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     900:	2317      	movs	r3, #23
     902:	18fb      	adds	r3, r7, r3
     904:	2208      	movs	r2, #8
     906:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     908:	2310      	movs	r3, #16
     90a:	61bb      	str	r3, [r7, #24]
		break;
     90c:	e00a      	b.n	924 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     90e:	2330      	movs	r3, #48	; 0x30
     910:	61bb      	str	r3, [r7, #24]
		break;
     912:	e007      	b.n	924 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     914:	2320      	movs	r3, #32
     916:	61bb      	str	r3, [r7, #24]
		break;
     918:	e004      	b.n	924 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     91a:	2300      	movs	r3, #0
     91c:	61bb      	str	r3, [r7, #24]
		break;
     91e:	e001      	b.n	924 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     920:	2317      	movs	r3, #23
     922:	e1ae      	b.n	c82 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     924:	231f      	movs	r3, #31
     926:	18fb      	adds	r3, r7, r3
     928:	781b      	ldrb	r3, [r3, #0]
     92a:	011b      	lsls	r3, r3, #4
     92c:	b2db      	uxtb	r3, r3
     92e:	2270      	movs	r2, #112	; 0x70
     930:	4013      	ands	r3, r2
     932:	b2da      	uxtb	r2, r3
     934:	2317      	movs	r3, #23
     936:	18fb      	adds	r3, r7, r3
     938:	781b      	ldrb	r3, [r3, #0]
     93a:	4313      	orrs	r3, r2
     93c:	b2da      	uxtb	r2, r3
     93e:	693b      	ldr	r3, [r7, #16]
     940:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     942:	683b      	ldr	r3, [r7, #0]
     944:	7ddb      	ldrb	r3, [r3, #23]
     946:	2b3f      	cmp	r3, #63	; 0x3f
     948:	d901      	bls.n	94e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     94a:	2317      	movs	r3, #23
     94c:	e199      	b.n	c82 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     94e:	683b      	ldr	r3, [r7, #0]
     950:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
     952:	693b      	ldr	r3, [r7, #16]
     954:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
     956:	46c0      	nop			; (mov r8, r8)
     958:	687b      	ldr	r3, [r7, #4]
     95a:	0018      	movs	r0, r3
     95c:	4b65      	ldr	r3, [pc, #404]	; (af4 <_adc_set_config+0x378>)
     95e:	4798      	blx	r3
     960:	1e03      	subs	r3, r0, #0
     962:	d1f9      	bne.n	958 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     964:	683b      	ldr	r3, [r7, #0]
     966:	885a      	ldrh	r2, [r3, #2]
     968:	69bb      	ldr	r3, [r7, #24]
     96a:	b29b      	uxth	r3, r3
     96c:	4313      	orrs	r3, r2
     96e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     970:	683b      	ldr	r3, [r7, #0]
     972:	2124      	movs	r1, #36	; 0x24
     974:	5c5b      	ldrb	r3, [r3, r1]
     976:	b29b      	uxth	r3, r3
     978:	00db      	lsls	r3, r3, #3
     97a:	b29b      	uxth	r3, r3
			resolution |
     97c:	4313      	orrs	r3, r2
     97e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     980:	683b      	ldr	r3, [r7, #0]
     982:	7d1b      	ldrb	r3, [r3, #20]
     984:	b29b      	uxth	r3, r3
     986:	009b      	lsls	r3, r3, #2
     988:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     98a:	4313      	orrs	r3, r2
     98c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     98e:	683b      	ldr	r3, [r7, #0]
     990:	7c9b      	ldrb	r3, [r3, #18]
     992:	b29b      	uxth	r3, r3
     994:	18db      	adds	r3, r3, r3
     996:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     998:	4313      	orrs	r3, r2
     99a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     99c:	683b      	ldr	r3, [r7, #0]
     99e:	7cdb      	ldrb	r3, [r3, #19]
     9a0:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     9a2:	4313      	orrs	r3, r2
     9a4:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
     9a6:	693b      	ldr	r3, [r7, #16]
     9a8:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     9aa:	683b      	ldr	r3, [r7, #0]
     9ac:	7e1b      	ldrb	r3, [r3, #24]
     9ae:	2b00      	cmp	r3, #0
     9b0:	d100      	bne.n	9b4 <_adc_set_config+0x238>
     9b2:	e0c4      	b.n	b3e <_adc_set_config+0x3c2>
		switch (resolution) {
     9b4:	69bb      	ldr	r3, [r7, #24]
     9b6:	2b10      	cmp	r3, #16
     9b8:	d100      	bne.n	9bc <_adc_set_config+0x240>
     9ba:	e076      	b.n	aaa <_adc_set_config+0x32e>
     9bc:	d802      	bhi.n	9c4 <_adc_set_config+0x248>
     9be:	2b00      	cmp	r3, #0
     9c0:	d04d      	beq.n	a5e <_adc_set_config+0x2e2>
     9c2:	e0bc      	b.n	b3e <_adc_set_config+0x3c2>
     9c4:	2b20      	cmp	r3, #32
     9c6:	d023      	beq.n	a10 <_adc_set_config+0x294>
     9c8:	2b30      	cmp	r3, #48	; 0x30
     9ca:	d000      	beq.n	9ce <_adc_set_config+0x252>
     9cc:	e0b7      	b.n	b3e <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     9ce:	683b      	ldr	r3, [r7, #0]
     9d0:	7cdb      	ldrb	r3, [r3, #19]
     9d2:	2b00      	cmp	r3, #0
     9d4:	d011      	beq.n	9fa <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     9d6:	683b      	ldr	r3, [r7, #0]
     9d8:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     9da:	2b7f      	cmp	r3, #127	; 0x7f
     9dc:	dc0b      	bgt.n	9f6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
     9de:	683b      	ldr	r3, [r7, #0]
     9e0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     9e2:	3380      	adds	r3, #128	; 0x80
     9e4:	db07      	blt.n	9f6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
     9e6:	683b      	ldr	r3, [r7, #0]
     9e8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     9ea:	2b7f      	cmp	r3, #127	; 0x7f
     9ec:	dc03      	bgt.n	9f6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
     9ee:	683b      	ldr	r3, [r7, #0]
     9f0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     9f2:	3380      	adds	r3, #128	; 0x80
     9f4:	da01      	bge.n	9fa <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     9f6:	2317      	movs	r3, #23
     9f8:	e143      	b.n	c82 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
     9fa:	683b      	ldr	r3, [r7, #0]
     9fc:	69db      	ldr	r3, [r3, #28]
     9fe:	2bff      	cmp	r3, #255	; 0xff
     a00:	dc04      	bgt.n	a0c <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
     a02:	683b      	ldr	r3, [r7, #0]
     a04:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     a06:	2bff      	cmp	r3, #255	; 0xff
     a08:	dc00      	bgt.n	a0c <_adc_set_config+0x290>
     a0a:	e091      	b.n	b30 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a0c:	2317      	movs	r3, #23
     a0e:	e138      	b.n	c82 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     a10:	683b      	ldr	r3, [r7, #0]
     a12:	7cdb      	ldrb	r3, [r3, #19]
     a14:	2b00      	cmp	r3, #0
     a16:	d015      	beq.n	a44 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     a18:	683b      	ldr	r3, [r7, #0]
     a1a:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     a1c:	4a36      	ldr	r2, [pc, #216]	; (af8 <_adc_set_config+0x37c>)
     a1e:	4293      	cmp	r3, r2
     a20:	dc0e      	bgt.n	a40 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
     a22:	683b      	ldr	r3, [r7, #0]
     a24:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     a26:	4a35      	ldr	r2, [pc, #212]	; (afc <_adc_set_config+0x380>)
     a28:	4293      	cmp	r3, r2
     a2a:	db09      	blt.n	a40 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
     a2c:	683b      	ldr	r3, [r7, #0]
     a2e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     a30:	4a31      	ldr	r2, [pc, #196]	; (af8 <_adc_set_config+0x37c>)
     a32:	4293      	cmp	r3, r2
     a34:	dc04      	bgt.n	a40 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
     a36:	683b      	ldr	r3, [r7, #0]
     a38:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     a3a:	4a30      	ldr	r2, [pc, #192]	; (afc <_adc_set_config+0x380>)
     a3c:	4293      	cmp	r3, r2
     a3e:	da01      	bge.n	a44 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a40:	2317      	movs	r3, #23
     a42:	e11e      	b.n	c82 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
     a44:	683b      	ldr	r3, [r7, #0]
     a46:	69db      	ldr	r3, [r3, #28]
     a48:	4a2d      	ldr	r2, [pc, #180]	; (b00 <_adc_set_config+0x384>)
     a4a:	4293      	cmp	r3, r2
     a4c:	dc05      	bgt.n	a5a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
     a4e:	683b      	ldr	r3, [r7, #0]
     a50:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     a52:	4a2b      	ldr	r2, [pc, #172]	; (b00 <_adc_set_config+0x384>)
     a54:	4293      	cmp	r3, r2
     a56:	dc00      	bgt.n	a5a <_adc_set_config+0x2de>
     a58:	e06c      	b.n	b34 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a5a:	2317      	movs	r3, #23
     a5c:	e111      	b.n	c82 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     a5e:	683b      	ldr	r3, [r7, #0]
     a60:	7cdb      	ldrb	r3, [r3, #19]
     a62:	2b00      	cmp	r3, #0
     a64:	d015      	beq.n	a92 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     a66:	683b      	ldr	r3, [r7, #0]
     a68:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     a6a:	4a26      	ldr	r2, [pc, #152]	; (b04 <_adc_set_config+0x388>)
     a6c:	4293      	cmp	r3, r2
     a6e:	dc0e      	bgt.n	a8e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
     a70:	683b      	ldr	r3, [r7, #0]
     a72:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     a74:	4a24      	ldr	r2, [pc, #144]	; (b08 <_adc_set_config+0x38c>)
     a76:	4293      	cmp	r3, r2
     a78:	db09      	blt.n	a8e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
     a7a:	683b      	ldr	r3, [r7, #0]
     a7c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
     a7e:	4a21      	ldr	r2, [pc, #132]	; (b04 <_adc_set_config+0x388>)
     a80:	4293      	cmp	r3, r2
     a82:	dc04      	bgt.n	a8e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
     a84:	683b      	ldr	r3, [r7, #0]
     a86:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
     a88:	4a1f      	ldr	r2, [pc, #124]	; (b08 <_adc_set_config+0x38c>)
     a8a:	4293      	cmp	r3, r2
     a8c:	da01      	bge.n	a92 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a8e:	2317      	movs	r3, #23
     a90:	e0f7      	b.n	c82 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
     a92:	683b      	ldr	r3, [r7, #0]
     a94:	69db      	ldr	r3, [r3, #28]
     a96:	4a1d      	ldr	r2, [pc, #116]	; (b0c <_adc_set_config+0x390>)
     a98:	4293      	cmp	r3, r2
     a9a:	dc04      	bgt.n	aa6 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
     a9c:	683b      	ldr	r3, [r7, #0]
     a9e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
     aa0:	4a1a      	ldr	r2, [pc, #104]	; (b0c <_adc_set_config+0x390>)
     aa2:	4293      	cmp	r3, r2
     aa4:	dd48      	ble.n	b38 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     aa6:	2317      	movs	r3, #23
     aa8:	e0eb      	b.n	c82 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     aaa:	683b      	ldr	r3, [r7, #0]
     aac:	7cdb      	ldrb	r3, [r3, #19]
     aae:	2b00      	cmp	r3, #0
     ab0:	d032      	beq.n	b18 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
     ab2:	683b      	ldr	r3, [r7, #0]
     ab4:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     ab6:	4a16      	ldr	r2, [pc, #88]	; (b10 <_adc_set_config+0x394>)
     ab8:	4293      	cmp	r3, r2
     aba:	dc0e      	bgt.n	ada <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
     abc:	683b      	ldr	r3, [r7, #0]
     abe:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
     ac0:	4a14      	ldr	r2, [pc, #80]	; (b14 <_adc_set_config+0x398>)
     ac2:	4293      	cmp	r3, r2
     ac4:	db09      	blt.n	ada <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
     ac6:	683b      	ldr	r3, [r7, #0]
     ac8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
     aca:	4a11      	ldr	r2, [pc, #68]	; (b10 <_adc_set_config+0x394>)
     acc:	4293      	cmp	r3, r2
     ace:	dc04      	bgt.n	ada <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
     ad0:	683b      	ldr	r3, [r7, #0]
     ad2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
     ad4:	4a0f      	ldr	r2, [pc, #60]	; (b14 <_adc_set_config+0x398>)
     ad6:	4293      	cmp	r3, r2
     ad8:	da1e      	bge.n	b18 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     ada:	2317      	movs	r3, #23
     adc:	e0d1      	b.n	c82 <_adc_set_config+0x506>
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	00000555 	.word	0x00000555
     ae4:	000043f9 	.word	0x000043f9
     ae8:	0000443d 	.word	0x0000443d
     aec:	00000705 	.word	0x00000705
     af0:	0000ad98 	.word	0x0000ad98
     af4:	00000631 	.word	0x00000631
     af8:	000001ff 	.word	0x000001ff
     afc:	fffffe00 	.word	0xfffffe00
     b00:	000003ff 	.word	0x000003ff
     b04:	000007ff 	.word	0x000007ff
     b08:	fffff800 	.word	0xfffff800
     b0c:	00000fff 	.word	0x00000fff
     b10:	00007fff 	.word	0x00007fff
     b14:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
     b18:	683b      	ldr	r3, [r7, #0]
     b1a:	69db      	ldr	r3, [r3, #28]
     b1c:	4a5b      	ldr	r2, [pc, #364]	; (c8c <_adc_set_config+0x510>)
     b1e:	4293      	cmp	r3, r2
     b20:	dc04      	bgt.n	b2c <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
     b22:	683b      	ldr	r3, [r7, #0]
     b24:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
     b26:	4a59      	ldr	r2, [pc, #356]	; (c8c <_adc_set_config+0x510>)
     b28:	4293      	cmp	r3, r2
     b2a:	dd07      	ble.n	b3c <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     b2c:	2317      	movs	r3, #23
     b2e:	e0a8      	b.n	c82 <_adc_set_config+0x506>
			break;
     b30:	46c0      	nop			; (mov r8, r8)
     b32:	e004      	b.n	b3e <_adc_set_config+0x3c2>
			break;
     b34:	46c0      	nop			; (mov r8, r8)
     b36:	e002      	b.n	b3e <_adc_set_config+0x3c2>
			break;
     b38:	46c0      	nop			; (mov r8, r8)
     b3a:	e000      	b.n	b3e <_adc_set_config+0x3c2>
			}
			break;
     b3c:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	687b      	ldr	r3, [r7, #4]
     b42:	0018      	movs	r0, r3
     b44:	4b52      	ldr	r3, [pc, #328]	; (c90 <_adc_set_config+0x514>)
     b46:	4798      	blx	r3
     b48:	1e03      	subs	r3, r0, #0
     b4a:	d1f9      	bne.n	b40 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     b4c:	683b      	ldr	r3, [r7, #0]
     b4e:	7e1a      	ldrb	r2, [r3, #24]
     b50:	693b      	ldr	r3, [r7, #16]
     b52:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     b54:	46c0      	nop			; (mov r8, r8)
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	0018      	movs	r0, r3
     b5a:	4b4d      	ldr	r3, [pc, #308]	; (c90 <_adc_set_config+0x514>)
     b5c:	4798      	blx	r3
     b5e:	1e03      	subs	r3, r0, #0
     b60:	d1f9      	bne.n	b56 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     b62:	683b      	ldr	r3, [r7, #0]
     b64:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
     b66:	b29a      	uxth	r2, r3
     b68:	693b      	ldr	r3, [r7, #16]
     b6a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
     b6c:	46c0      	nop			; (mov r8, r8)
     b6e:	687b      	ldr	r3, [r7, #4]
     b70:	0018      	movs	r0, r3
     b72:	4b47      	ldr	r3, [pc, #284]	; (c90 <_adc_set_config+0x514>)
     b74:	4798      	blx	r3
     b76:	1e03      	subs	r3, r0, #0
     b78:	d1f9      	bne.n	b6e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     b7a:	683b      	ldr	r3, [r7, #0]
     b7c:	6a1b      	ldr	r3, [r3, #32]
     b7e:	b29a      	uxth	r2, r3
     b80:	693b      	ldr	r3, [r7, #16]
     b82:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     b84:	2314      	movs	r3, #20
     b86:	18fb      	adds	r3, r7, r3
     b88:	683a      	ldr	r2, [r7, #0]
     b8a:	212c      	movs	r1, #44	; 0x2c
     b8c:	5c52      	ldrb	r2, [r2, r1]
     b8e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     b90:	2314      	movs	r3, #20
     b92:	18fb      	adds	r3, r7, r3
     b94:	781b      	ldrb	r3, [r3, #0]
     b96:	2b00      	cmp	r3, #0
     b98:	d006      	beq.n	ba8 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     b9a:	2314      	movs	r3, #20
     b9c:	18fb      	adds	r3, r7, r3
     b9e:	781a      	ldrb	r2, [r3, #0]
     ba0:	2314      	movs	r3, #20
     ba2:	18fb      	adds	r3, r7, r3
     ba4:	3a01      	subs	r2, #1
     ba6:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     ba8:	2314      	movs	r3, #20
     baa:	18fb      	adds	r3, r7, r3
     bac:	781b      	ldrb	r3, [r3, #0]
     bae:	2b0f      	cmp	r3, #15
     bb0:	d804      	bhi.n	bbc <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     bb2:	683b      	ldr	r3, [r7, #0]
     bb4:	222b      	movs	r2, #43	; 0x2b
     bb6:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     bb8:	2b0f      	cmp	r3, #15
     bba:	d901      	bls.n	bc0 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     bbc:	2317      	movs	r3, #23
     bbe:	e060      	b.n	c82 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
     bc0:	46c0      	nop			; (mov r8, r8)
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	0018      	movs	r0, r3
     bc6:	4b32      	ldr	r3, [pc, #200]	; (c90 <_adc_set_config+0x514>)
     bc8:	4798      	blx	r3
     bca:	1e03      	subs	r3, r0, #0
     bcc:	d1f9      	bne.n	bc2 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     bce:	683b      	ldr	r3, [r7, #0]
     bd0:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     bd2:	683a      	ldr	r2, [r7, #0]
     bd4:	212b      	movs	r1, #43	; 0x2b
     bd6:	5c52      	ldrb	r2, [r2, r1]
     bd8:	0512      	lsls	r2, r2, #20
			config->gain_factor |
     bda:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     bdc:	2214      	movs	r2, #20
     bde:	18ba      	adds	r2, r7, r2
     be0:	7812      	ldrb	r2, [r2, #0]
     be2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     be4:	4313      	orrs	r3, r2
			config->negative_input |
     be6:	683a      	ldr	r2, [r7, #0]
     be8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     bea:	4313      	orrs	r3, r2
			config->positive_input;
     bec:	683a      	ldr	r2, [r7, #0]
     bee:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
     bf0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
     bf2:	693b      	ldr	r3, [r7, #16]
     bf4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     bf6:	683b      	ldr	r3, [r7, #0]
     bf8:	222a      	movs	r2, #42	; 0x2a
     bfa:	5c9a      	ldrb	r2, [r3, r2]
     bfc:	693b      	ldr	r3, [r7, #16]
     bfe:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     c00:	693b      	ldr	r3, [r7, #16]
     c02:	220f      	movs	r2, #15
     c04:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     c06:	683b      	ldr	r3, [r7, #0]
     c08:	2224      	movs	r2, #36	; 0x24
     c0a:	5c9b      	ldrb	r3, [r3, r2]
     c0c:	2b00      	cmp	r3, #0
     c0e:	d01e      	beq.n	c4e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     c10:	683b      	ldr	r3, [r7, #0]
     c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     c14:	4a1f      	ldr	r2, [pc, #124]	; (c94 <_adc_set_config+0x518>)
     c16:	4293      	cmp	r3, r2
     c18:	d901      	bls.n	c1e <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
     c1a:	2317      	movs	r3, #23
     c1c:	e031      	b.n	c82 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     c1e:	683b      	ldr	r3, [r7, #0]
     c20:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     c22:	693b      	ldr	r3, [r7, #16]
     c24:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     c26:	683b      	ldr	r3, [r7, #0]
     c28:	2228      	movs	r2, #40	; 0x28
     c2a:	5e9b      	ldrsh	r3, [r3, r2]
     c2c:	4a1a      	ldr	r2, [pc, #104]	; (c98 <_adc_set_config+0x51c>)
     c2e:	4293      	cmp	r3, r2
     c30:	dc05      	bgt.n	c3e <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
     c32:	683b      	ldr	r3, [r7, #0]
     c34:	2228      	movs	r2, #40	; 0x28
     c36:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
     c38:	4a18      	ldr	r2, [pc, #96]	; (c9c <_adc_set_config+0x520>)
     c3a:	4293      	cmp	r3, r2
     c3c:	da01      	bge.n	c42 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
     c3e:	2317      	movs	r3, #23
     c40:	e01f      	b.n	c82 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     c42:	683b      	ldr	r3, [r7, #0]
     c44:	2228      	movs	r2, #40	; 0x28
     c46:	5e9b      	ldrsh	r3, [r3, r2]
     c48:	b29a      	uxth	r2, r3
     c4a:	693b      	ldr	r3, [r7, #16]
     c4c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     c4e:	4b14      	ldr	r3, [pc, #80]	; (ca0 <_adc_set_config+0x524>)
     c50:	681b      	ldr	r3, [r3, #0]
     c52:	08db      	lsrs	r3, r3, #3
     c54:	b29b      	uxth	r3, r3
     c56:	021b      	lsls	r3, r3, #8
     c58:	b29a      	uxth	r2, r3
     c5a:	23e0      	movs	r3, #224	; 0xe0
     c5c:	00db      	lsls	r3, r3, #3
     c5e:	4013      	ands	r3, r2
     c60:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     c62:	4b10      	ldr	r3, [pc, #64]	; (ca4 <_adc_set_config+0x528>)
     c64:	685c      	ldr	r4, [r3, #4]
     c66:	681b      	ldr	r3, [r3, #0]
     c68:	0161      	lsls	r1, r4, #5
     c6a:	0edd      	lsrs	r5, r3, #27
     c6c:	430d      	orrs	r5, r1
     c6e:	0ee6      	lsrs	r6, r4, #27
     c70:	b2ab      	uxth	r3, r5
     c72:	21ff      	movs	r1, #255	; 0xff
     c74:	400b      	ands	r3, r1
     c76:	b29b      	uxth	r3, r3
			) |
     c78:	4313      	orrs	r3, r2
     c7a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
     c7c:	693b      	ldr	r3, [r7, #16]
     c7e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     c80:	2300      	movs	r3, #0
}
     c82:	0018      	movs	r0, r3
     c84:	46bd      	mov	sp, r7
     c86:	b009      	add	sp, #36	; 0x24
     c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	0000ffff 	.word	0x0000ffff
     c90:	00000631 	.word	0x00000631
     c94:	00000fff 	.word	0x00000fff
     c98:	000007ff 	.word	0x000007ff
     c9c:	fffff800 	.word	0xfffff800
     ca0:	00806024 	.word	0x00806024
     ca4:	00806020 	.word	0x00806020

00000ca8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     ca8:	b580      	push	{r7, lr}
     caa:	b084      	sub	sp, #16
     cac:	af00      	add	r7, sp, #0
     cae:	60f8      	str	r0, [r7, #12]
     cb0:	60b9      	str	r1, [r7, #8]
     cb2:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     cb4:	68fb      	ldr	r3, [r7, #12]
     cb6:	68ba      	ldr	r2, [r7, #8]
     cb8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     cba:	2380      	movs	r3, #128	; 0x80
     cbc:	025b      	lsls	r3, r3, #9
     cbe:	0019      	movs	r1, r3
     cc0:	2002      	movs	r0, #2
     cc2:	4b15      	ldr	r3, [pc, #84]	; (d18 <adc_init+0x70>)
     cc4:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     cc6:	68bb      	ldr	r3, [r7, #8]
     cc8:	781b      	ldrb	r3, [r3, #0]
     cca:	b2db      	uxtb	r3, r3
     ccc:	001a      	movs	r2, r3
     cce:	2301      	movs	r3, #1
     cd0:	4013      	ands	r3, r2
     cd2:	d001      	beq.n	cd8 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     cd4:	2305      	movs	r3, #5
     cd6:	e01a      	b.n	d0e <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     cd8:	68bb      	ldr	r3, [r7, #8]
     cda:	781b      	ldrb	r3, [r3, #0]
     cdc:	b2db      	uxtb	r3, r3
     cde:	001a      	movs	r2, r3
     ce0:	2302      	movs	r3, #2
     ce2:	4013      	ands	r3, r2
     ce4:	d001      	beq.n	cea <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     ce6:	231c      	movs	r3, #28
     ce8:	e011      	b.n	d0e <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	785a      	ldrb	r2, [r3, #1]
     cee:	68fb      	ldr	r3, [r7, #12]
     cf0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     cf2:	68fb      	ldr	r3, [r7, #12]
     cf4:	791b      	ldrb	r3, [r3, #4]
     cf6:	2b00      	cmp	r3, #0
     cf8:	d102      	bne.n	d00 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     cfa:	2001      	movs	r0, #1
     cfc:	4b07      	ldr	r3, [pc, #28]	; (d1c <adc_init+0x74>)
     cfe:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     d00:	687a      	ldr	r2, [r7, #4]
     d02:	68fb      	ldr	r3, [r7, #12]
     d04:	0011      	movs	r1, r2
     d06:	0018      	movs	r0, r3
     d08:	4b05      	ldr	r3, [pc, #20]	; (d20 <adc_init+0x78>)
     d0a:	4798      	blx	r3
     d0c:	0003      	movs	r3, r0
}
     d0e:	0018      	movs	r0, r3
     d10:	46bd      	mov	sp, r7
     d12:	b004      	add	sp, #16
     d14:	bd80      	pop	{r7, pc}
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	0000056d 	.word	0x0000056d
     d1c:	000005f1 	.word	0x000005f1
     d20:	0000077d 	.word	0x0000077d

00000d24 <system_gclk_chan_get_config_defaults>:
{
     d24:	b580      	push	{r7, lr}
     d26:	b082      	sub	sp, #8
     d28:	af00      	add	r7, sp, #0
     d2a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     d2c:	687b      	ldr	r3, [r7, #4]
     d2e:	2200      	movs	r2, #0
     d30:	701a      	strb	r2, [r3, #0]
}
     d32:	46c0      	nop			; (mov r8, r8)
     d34:	46bd      	mov	sp, r7
     d36:	b002      	add	sp, #8
     d38:	bd80      	pop	{r7, pc}
	...

00000d3c <system_apb_clock_set_mask>:
{
     d3c:	b580      	push	{r7, lr}
     d3e:	b082      	sub	sp, #8
     d40:	af00      	add	r7, sp, #0
     d42:	0002      	movs	r2, r0
     d44:	6039      	str	r1, [r7, #0]
     d46:	1dfb      	adds	r3, r7, #7
     d48:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     d4a:	1dfb      	adds	r3, r7, #7
     d4c:	781b      	ldrb	r3, [r3, #0]
     d4e:	2b01      	cmp	r3, #1
     d50:	d00a      	beq.n	d68 <system_apb_clock_set_mask+0x2c>
     d52:	2b02      	cmp	r3, #2
     d54:	d00f      	beq.n	d76 <system_apb_clock_set_mask+0x3a>
     d56:	2b00      	cmp	r3, #0
     d58:	d114      	bne.n	d84 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     d5a:	4b0e      	ldr	r3, [pc, #56]	; (d94 <system_apb_clock_set_mask+0x58>)
     d5c:	4a0d      	ldr	r2, [pc, #52]	; (d94 <system_apb_clock_set_mask+0x58>)
     d5e:	6991      	ldr	r1, [r2, #24]
     d60:	683a      	ldr	r2, [r7, #0]
     d62:	430a      	orrs	r2, r1
     d64:	619a      	str	r2, [r3, #24]
			break;
     d66:	e00f      	b.n	d88 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     d68:	4b0a      	ldr	r3, [pc, #40]	; (d94 <system_apb_clock_set_mask+0x58>)
     d6a:	4a0a      	ldr	r2, [pc, #40]	; (d94 <system_apb_clock_set_mask+0x58>)
     d6c:	69d1      	ldr	r1, [r2, #28]
     d6e:	683a      	ldr	r2, [r7, #0]
     d70:	430a      	orrs	r2, r1
     d72:	61da      	str	r2, [r3, #28]
			break;
     d74:	e008      	b.n	d88 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     d76:	4b07      	ldr	r3, [pc, #28]	; (d94 <system_apb_clock_set_mask+0x58>)
     d78:	4a06      	ldr	r2, [pc, #24]	; (d94 <system_apb_clock_set_mask+0x58>)
     d7a:	6a11      	ldr	r1, [r2, #32]
     d7c:	683a      	ldr	r2, [r7, #0]
     d7e:	430a      	orrs	r2, r1
     d80:	621a      	str	r2, [r3, #32]
			break;
     d82:	e001      	b.n	d88 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     d84:	2317      	movs	r3, #23
     d86:	e000      	b.n	d8a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     d88:	2300      	movs	r3, #0
}
     d8a:	0018      	movs	r0, r3
     d8c:	46bd      	mov	sp, r7
     d8e:	b002      	add	sp, #8
     d90:	bd80      	pop	{r7, pc}
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	40000400 	.word	0x40000400

00000d98 <system_pinmux_get_config_defaults>:
{
     d98:	b580      	push	{r7, lr}
     d9a:	b082      	sub	sp, #8
     d9c:	af00      	add	r7, sp, #0
     d9e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     da0:	687b      	ldr	r3, [r7, #4]
     da2:	2280      	movs	r2, #128	; 0x80
     da4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	2200      	movs	r2, #0
     daa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     dac:	687b      	ldr	r3, [r7, #4]
     dae:	2201      	movs	r2, #1
     db0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	2200      	movs	r2, #0
     db6:	70da      	strb	r2, [r3, #3]
}
     db8:	46c0      	nop			; (mov r8, r8)
     dba:	46bd      	mov	sp, r7
     dbc:	b002      	add	sp, #8
     dbe:	bd80      	pop	{r7, pc}

00000dc0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     dc0:	b580      	push	{r7, lr}
     dc2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     dc4:	4b05      	ldr	r3, [pc, #20]	; (ddc <system_is_debugger_present+0x1c>)
     dc6:	789b      	ldrb	r3, [r3, #2]
     dc8:	b2db      	uxtb	r3, r3
     dca:	001a      	movs	r2, r3
     dcc:	2302      	movs	r3, #2
     dce:	4013      	ands	r3, r2
     dd0:	1e5a      	subs	r2, r3, #1
     dd2:	4193      	sbcs	r3, r2
     dd4:	b2db      	uxtb	r3, r3
}
     dd6:	0018      	movs	r0, r3
     dd8:	46bd      	mov	sp, r7
     dda:	bd80      	pop	{r7, pc}
     ddc:	41002000 	.word	0x41002000

00000de0 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     de0:	b580      	push	{r7, lr}
     de2:	b084      	sub	sp, #16
     de4:	af00      	add	r7, sp, #0
     de6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	681b      	ldr	r3, [r3, #0]
     dec:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     dee:	68fb      	ldr	r3, [r7, #12]
     df0:	69db      	ldr	r3, [r3, #28]
     df2:	2207      	movs	r2, #7
     df4:	4013      	ands	r3, r2
     df6:	1e5a      	subs	r2, r3, #1
     df8:	4193      	sbcs	r3, r2
     dfa:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     dfc:	0018      	movs	r0, r3
     dfe:	46bd      	mov	sp, r7
     e00:	b004      	add	sp, #16
     e02:	bd80      	pop	{r7, pc}

00000e04 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     e04:	b580      	push	{r7, lr}
     e06:	b082      	sub	sp, #8
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     e0c:	46c0      	nop			; (mov r8, r8)
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	0018      	movs	r0, r3
     e12:	4b04      	ldr	r3, [pc, #16]	; (e24 <_i2c_master_wait_for_sync+0x20>)
     e14:	4798      	blx	r3
     e16:	1e03      	subs	r3, r0, #0
     e18:	d1f9      	bne.n	e0e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	46bd      	mov	sp, r7
     e1e:	b002      	add	sp, #8
     e20:	bd80      	pop	{r7, pc}
     e22:	46c0      	nop			; (mov r8, r8)
     e24:	00000de1 	.word	0x00000de1

00000e28 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     e28:	b5f0      	push	{r4, r5, r6, r7, lr}
     e2a:	b097      	sub	sp, #92	; 0x5c
     e2c:	af00      	add	r7, sp, #0
     e2e:	6178      	str	r0, [r7, #20]
     e30:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
     e32:	2300      	movs	r3, #0
     e34:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
     e36:	2300      	movs	r3, #0
     e38:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
     e3a:	2300      	movs	r3, #0
     e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
     e3e:	233b      	movs	r3, #59	; 0x3b
     e40:	2210      	movs	r2, #16
     e42:	4694      	mov	ip, r2
     e44:	44bc      	add	ip, r7
     e46:	4463      	add	r3, ip
     e48:	2200      	movs	r2, #0
     e4a:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     e4c:	697b      	ldr	r3, [r7, #20]
     e4e:	681b      	ldr	r3, [r3, #0]
     e50:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
     e52:	697b      	ldr	r3, [r7, #20]
     e54:	681b      	ldr	r3, [r3, #0]
     e56:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     e58:	2323      	movs	r3, #35	; 0x23
     e5a:	2210      	movs	r2, #16
     e5c:	18ba      	adds	r2, r7, r2
     e5e:	18d4      	adds	r4, r2, r3
     e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e62:	0018      	movs	r0, r3
     e64:	4bc0      	ldr	r3, [pc, #768]	; (1168 <_i2c_master_set_config+0x340>)
     e66:	4798      	blx	r3
     e68:	0003      	movs	r3, r0
     e6a:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     e6c:	230c      	movs	r3, #12
     e6e:	2210      	movs	r2, #16
     e70:	4694      	mov	ip, r2
     e72:	44bc      	add	ip, r7
     e74:	4463      	add	r3, ip
     e76:	0018      	movs	r0, r3
     e78:	4bbc      	ldr	r3, [pc, #752]	; (116c <_i2c_master_set_config+0x344>)
     e7a:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     e7c:	693b      	ldr	r3, [r7, #16]
     e7e:	69db      	ldr	r3, [r3, #28]
     e80:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
     e82:	693b      	ldr	r3, [r7, #16]
     e84:	6a1b      	ldr	r3, [r3, #32]
     e86:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e8a:	2b00      	cmp	r3, #0
     e8c:	d106      	bne.n	e9c <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e90:	2100      	movs	r1, #0
     e92:	0018      	movs	r0, r3
     e94:	4bb6      	ldr	r3, [pc, #728]	; (1170 <_i2c_master_set_config+0x348>)
     e96:	4798      	blx	r3
     e98:	0003      	movs	r3, r0
     e9a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e9e:	b2da      	uxtb	r2, r3
     ea0:	230c      	movs	r3, #12
     ea2:	2110      	movs	r1, #16
     ea4:	468c      	mov	ip, r1
     ea6:	44bc      	add	ip, r7
     ea8:	4463      	add	r3, ip
     eaa:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     eac:	230c      	movs	r3, #12
     eae:	2210      	movs	r2, #16
     eb0:	4694      	mov	ip, r2
     eb2:	44bc      	add	ip, r7
     eb4:	4463      	add	r3, ip
     eb6:	2202      	movs	r2, #2
     eb8:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     ebc:	0c1b      	lsrs	r3, r3, #16
     ebe:	b2db      	uxtb	r3, r3
     ec0:	220c      	movs	r2, #12
     ec2:	2110      	movs	r1, #16
     ec4:	468c      	mov	ip, r1
     ec6:	44bc      	add	ip, r7
     ec8:	4462      	add	r2, ip
     eca:	0011      	movs	r1, r2
     ecc:	0018      	movs	r0, r3
     ece:	4ba9      	ldr	r3, [pc, #676]	; (1174 <_i2c_master_set_config+0x34c>)
     ed0:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ed4:	2b00      	cmp	r3, #0
     ed6:	d106      	bne.n	ee6 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     eda:	2101      	movs	r1, #1
     edc:	0018      	movs	r0, r3
     ede:	4ba4      	ldr	r3, [pc, #656]	; (1170 <_i2c_master_set_config+0x348>)
     ee0:	4798      	blx	r3
     ee2:	0003      	movs	r3, r0
     ee4:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ee8:	b2da      	uxtb	r2, r3
     eea:	230c      	movs	r3, #12
     eec:	2110      	movs	r1, #16
     eee:	468c      	mov	ip, r1
     ef0:	44bc      	add	ip, r7
     ef2:	4463      	add	r3, ip
     ef4:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     ef6:	230c      	movs	r3, #12
     ef8:	2210      	movs	r2, #16
     efa:	4694      	mov	ip, r2
     efc:	44bc      	add	ip, r7
     efe:	4463      	add	r3, ip
     f00:	2202      	movs	r2, #2
     f02:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f06:	0c1b      	lsrs	r3, r3, #16
     f08:	b2db      	uxtb	r3, r3
     f0a:	220c      	movs	r2, #12
     f0c:	2110      	movs	r1, #16
     f0e:	468c      	mov	ip, r1
     f10:	44bc      	add	ip, r7
     f12:	4462      	add	r2, ip
     f14:	0011      	movs	r1, r2
     f16:	0018      	movs	r0, r3
     f18:	4b96      	ldr	r3, [pc, #600]	; (1174 <_i2c_master_set_config+0x34c>)
     f1a:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     f1c:	693b      	ldr	r3, [r7, #16]
     f1e:	8a9a      	ldrh	r2, [r3, #20]
     f20:	697b      	ldr	r3, [r7, #20]
     f22:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     f24:	693b      	ldr	r3, [r7, #16]
     f26:	8ada      	ldrh	r2, [r3, #22]
     f28:	697b      	ldr	r3, [r7, #20]
     f2a:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     f2c:	693b      	ldr	r3, [r7, #16]
     f2e:	7e1b      	ldrb	r3, [r3, #24]
     f30:	2b00      	cmp	r3, #0
     f32:	d103      	bne.n	f3c <_i2c_master_set_config+0x114>
     f34:	4b90      	ldr	r3, [pc, #576]	; (1178 <_i2c_master_set_config+0x350>)
     f36:	4798      	blx	r3
     f38:	1e03      	subs	r3, r0, #0
     f3a:	d002      	beq.n	f42 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     f3c:	2380      	movs	r3, #128	; 0x80
     f3e:	657b      	str	r3, [r7, #84]	; 0x54
     f40:	e001      	b.n	f46 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
     f42:	2300      	movs	r3, #0
     f44:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     f46:	693b      	ldr	r3, [r7, #16]
     f48:	691b      	ldr	r3, [r3, #16]
     f4a:	2b00      	cmp	r3, #0
     f4c:	d004      	beq.n	f58 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
     f4e:	693b      	ldr	r3, [r7, #16]
     f50:	691b      	ldr	r3, [r3, #16]
     f52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     f54:	4313      	orrs	r3, r2
     f56:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     f58:	693b      	ldr	r3, [r7, #16]
     f5a:	689b      	ldr	r3, [r3, #8]
     f5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     f5e:	4313      	orrs	r3, r2
     f60:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     f62:	693b      	ldr	r3, [r7, #16]
     f64:	2224      	movs	r2, #36	; 0x24
     f66:	5c9b      	ldrb	r3, [r3, r2]
     f68:	2b00      	cmp	r3, #0
     f6a:	d004      	beq.n	f76 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f6e:	2280      	movs	r2, #128	; 0x80
     f70:	05d2      	lsls	r2, r2, #23
     f72:	4313      	orrs	r3, r2
     f74:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     f76:	693b      	ldr	r3, [r7, #16]
     f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f7a:	2b00      	cmp	r3, #0
     f7c:	d004      	beq.n	f88 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
     f7e:	693b      	ldr	r3, [r7, #16]
     f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     f84:	4313      	orrs	r3, r2
     f86:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     f88:	693b      	ldr	r3, [r7, #16]
     f8a:	222c      	movs	r2, #44	; 0x2c
     f8c:	5c9b      	ldrb	r3, [r3, r2]
     f8e:	2b00      	cmp	r3, #0
     f90:	d105      	bne.n	f9e <_i2c_master_set_config+0x176>
     f92:	693b      	ldr	r3, [r7, #16]
     f94:	689a      	ldr	r2, [r3, #8]
     f96:	2380      	movs	r3, #128	; 0x80
     f98:	049b      	lsls	r3, r3, #18
     f9a:	429a      	cmp	r2, r3
     f9c:	d104      	bne.n	fa8 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     fa0:	2280      	movs	r2, #128	; 0x80
     fa2:	0512      	lsls	r2, r2, #20
     fa4:	4313      	orrs	r3, r2
     fa6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     fa8:	693b      	ldr	r3, [r7, #16]
     faa:	222d      	movs	r2, #45	; 0x2d
     fac:	5c9b      	ldrb	r3, [r3, r2]
     fae:	2b00      	cmp	r3, #0
     fb0:	d004      	beq.n	fbc <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     fb4:	2280      	movs	r2, #128	; 0x80
     fb6:	0412      	lsls	r2, r2, #16
     fb8:	4313      	orrs	r3, r2
     fba:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     fbc:	693b      	ldr	r3, [r7, #16]
     fbe:	222e      	movs	r2, #46	; 0x2e
     fc0:	5c9b      	ldrb	r3, [r3, r2]
     fc2:	2b00      	cmp	r3, #0
     fc4:	d004      	beq.n	fd0 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     fc8:	2280      	movs	r2, #128	; 0x80
     fca:	03d2      	lsls	r2, r2, #15
     fcc:	4313      	orrs	r3, r2
     fce:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fd2:	681a      	ldr	r2, [r3, #0]
     fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     fd6:	431a      	orrs	r2, r3
     fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fda:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fde:	2280      	movs	r2, #128	; 0x80
     fe0:	0052      	lsls	r2, r2, #1
     fe2:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     fe4:	2323      	movs	r3, #35	; 0x23
     fe6:	2210      	movs	r2, #16
     fe8:	4694      	mov	ip, r2
     fea:	44bc      	add	ip, r7
     fec:	4463      	add	r3, ip
     fee:	781b      	ldrb	r3, [r3, #0]
     ff0:	3314      	adds	r3, #20
     ff2:	b2db      	uxtb	r3, r3
     ff4:	0018      	movs	r0, r3
     ff6:	4b61      	ldr	r3, [pc, #388]	; (117c <_i2c_master_set_config+0x354>)
     ff8:	4798      	blx	r3
     ffa:	0003      	movs	r3, r0
     ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
     ffe:	693b      	ldr	r3, [r7, #16]
    1000:	681b      	ldr	r3, [r3, #0]
    1002:	22fa      	movs	r2, #250	; 0xfa
    1004:	0092      	lsls	r2, r2, #2
    1006:	4353      	muls	r3, r2
    1008:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    100a:	693b      	ldr	r3, [r7, #16]
    100c:	685b      	ldr	r3, [r3, #4]
    100e:	22fa      	movs	r2, #250	; 0xfa
    1010:	0092      	lsls	r2, r2, #2
    1012:	4353      	muls	r3, r2
    1014:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    1016:	693b      	ldr	r3, [r7, #16]
    1018:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    101a:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    101c:	4b58      	ldr	r3, [pc, #352]	; (1180 <_i2c_master_set_config+0x358>)
    101e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1020:	4798      	blx	r3
    1022:	0005      	movs	r5, r0
    1024:	000e      	movs	r6, r1
    1026:	4b56      	ldr	r3, [pc, #344]	; (1180 <_i2c_master_set_config+0x358>)
    1028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    102a:	4798      	blx	r3
    102c:	60b8      	str	r0, [r7, #8]
    102e:	60f9      	str	r1, [r7, #12]
    1030:	4b53      	ldr	r3, [pc, #332]	; (1180 <_i2c_master_set_config+0x358>)
    1032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1034:	4798      	blx	r3
    1036:	4c53      	ldr	r4, [pc, #332]	; (1184 <_i2c_master_set_config+0x35c>)
    1038:	4a53      	ldr	r2, [pc, #332]	; (1188 <_i2c_master_set_config+0x360>)
    103a:	4b54      	ldr	r3, [pc, #336]	; (118c <_i2c_master_set_config+0x364>)
    103c:	47a0      	blx	r4
    103e:	0003      	movs	r3, r0
    1040:	000c      	movs	r4, r1
    1042:	603b      	str	r3, [r7, #0]
    1044:	607c      	str	r4, [r7, #4]
    1046:	4b4e      	ldr	r3, [pc, #312]	; (1180 <_i2c_master_set_config+0x358>)
    1048:	6a38      	ldr	r0, [r7, #32]
    104a:	4798      	blx	r3
    104c:	0002      	movs	r2, r0
    104e:	000b      	movs	r3, r1
    1050:	4c4c      	ldr	r4, [pc, #304]	; (1184 <_i2c_master_set_config+0x35c>)
    1052:	6838      	ldr	r0, [r7, #0]
    1054:	6879      	ldr	r1, [r7, #4]
    1056:	47a0      	blx	r4
    1058:	0003      	movs	r3, r0
    105a:	000c      	movs	r4, r1
    105c:	0018      	movs	r0, r3
    105e:	0021      	movs	r1, r4
    1060:	4c4b      	ldr	r4, [pc, #300]	; (1190 <_i2c_master_set_config+0x368>)
    1062:	2200      	movs	r2, #0
    1064:	4b4b      	ldr	r3, [pc, #300]	; (1194 <_i2c_master_set_config+0x36c>)
    1066:	47a0      	blx	r4
    1068:	0003      	movs	r3, r0
    106a:	000c      	movs	r4, r1
    106c:	001a      	movs	r2, r3
    106e:	0023      	movs	r3, r4
    1070:	4c44      	ldr	r4, [pc, #272]	; (1184 <_i2c_master_set_config+0x35c>)
    1072:	68b8      	ldr	r0, [r7, #8]
    1074:	68f9      	ldr	r1, [r7, #12]
    1076:	47a0      	blx	r4
    1078:	0003      	movs	r3, r0
    107a:	000c      	movs	r4, r1
    107c:	001a      	movs	r2, r3
    107e:	0023      	movs	r3, r4
    1080:	4c45      	ldr	r4, [pc, #276]	; (1198 <_i2c_master_set_config+0x370>)
    1082:	0028      	movs	r0, r5
    1084:	0031      	movs	r1, r6
    1086:	47a0      	blx	r4
    1088:	0003      	movs	r3, r0
    108a:	000c      	movs	r4, r1
    108c:	001d      	movs	r5, r3
    108e:	0026      	movs	r6, r4
    1090:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1092:	005a      	lsls	r2, r3, #1
    1094:	4b3a      	ldr	r3, [pc, #232]	; (1180 <_i2c_master_set_config+0x358>)
    1096:	0010      	movs	r0, r2
    1098:	4798      	blx	r3
    109a:	0002      	movs	r2, r0
    109c:	000b      	movs	r3, r1
    109e:	4c3c      	ldr	r4, [pc, #240]	; (1190 <_i2c_master_set_config+0x368>)
    10a0:	0028      	movs	r0, r5
    10a2:	0031      	movs	r1, r6
    10a4:	47a0      	blx	r4
    10a6:	0003      	movs	r3, r0
    10a8:	000c      	movs	r4, r1
    10aa:	0018      	movs	r0, r3
    10ac:	0021      	movs	r1, r4
    10ae:	4c3a      	ldr	r4, [pc, #232]	; (1198 <_i2c_master_set_config+0x370>)
    10b0:	2200      	movs	r2, #0
    10b2:	4b3a      	ldr	r3, [pc, #232]	; (119c <_i2c_master_set_config+0x374>)
    10b4:	47a0      	blx	r4
    10b6:	0003      	movs	r3, r0
    10b8:	000c      	movs	r4, r1
    10ba:	001d      	movs	r5, r3
    10bc:	0026      	movs	r6, r4
    10be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10c0:	005a      	lsls	r2, r3, #1
    10c2:	4b2f      	ldr	r3, [pc, #188]	; (1180 <_i2c_master_set_config+0x358>)
    10c4:	0010      	movs	r0, r2
    10c6:	4798      	blx	r3
    10c8:	0002      	movs	r2, r0
    10ca:	000b      	movs	r3, r1
    10cc:	4c34      	ldr	r4, [pc, #208]	; (11a0 <_i2c_master_set_config+0x378>)
    10ce:	0028      	movs	r0, r5
    10d0:	0031      	movs	r1, r6
    10d2:	47a0      	blx	r4
    10d4:	0003      	movs	r3, r0
    10d6:	000c      	movs	r4, r1
    10d8:	0019      	movs	r1, r3
    10da:	0022      	movs	r2, r4
    10dc:	4b31      	ldr	r3, [pc, #196]	; (11a4 <_i2c_master_set_config+0x37c>)
    10de:	0008      	movs	r0, r1
    10e0:	0011      	movs	r1, r2
    10e2:	4798      	blx	r3
    10e4:	0003      	movs	r3, r0
    10e6:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    10e8:	693b      	ldr	r3, [r7, #16]
    10ea:	689a      	ldr	r2, [r3, #8]
    10ec:	2380      	movs	r3, #128	; 0x80
    10ee:	049b      	lsls	r3, r3, #18
    10f0:	429a      	cmp	r2, r3
    10f2:	d16a      	bne.n	11ca <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    10f4:	4b22      	ldr	r3, [pc, #136]	; (1180 <_i2c_master_set_config+0x358>)
    10f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    10f8:	4798      	blx	r3
    10fa:	4c25      	ldr	r4, [pc, #148]	; (1190 <_i2c_master_set_config+0x368>)
    10fc:	0002      	movs	r2, r0
    10fe:	000b      	movs	r3, r1
    1100:	47a0      	blx	r4
    1102:	0003      	movs	r3, r0
    1104:	000c      	movs	r4, r1
    1106:	001d      	movs	r5, r3
    1108:	0026      	movs	r6, r4
    110a:	4b1d      	ldr	r3, [pc, #116]	; (1180 <_i2c_master_set_config+0x358>)
    110c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    110e:	4798      	blx	r3
    1110:	4c1c      	ldr	r4, [pc, #112]	; (1184 <_i2c_master_set_config+0x35c>)
    1112:	2200      	movs	r2, #0
    1114:	4b24      	ldr	r3, [pc, #144]	; (11a8 <_i2c_master_set_config+0x380>)
    1116:	47a0      	blx	r4
    1118:	0003      	movs	r3, r0
    111a:	000c      	movs	r4, r1
    111c:	001a      	movs	r2, r3
    111e:	0023      	movs	r3, r4
    1120:	4c1f      	ldr	r4, [pc, #124]	; (11a0 <_i2c_master_set_config+0x378>)
    1122:	0028      	movs	r0, r5
    1124:	0031      	movs	r1, r6
    1126:	47a0      	blx	r4
    1128:	0003      	movs	r3, r0
    112a:	000c      	movs	r4, r1
    112c:	0018      	movs	r0, r3
    112e:	0021      	movs	r1, r4
    1130:	4c19      	ldr	r4, [pc, #100]	; (1198 <_i2c_master_set_config+0x370>)
    1132:	2200      	movs	r2, #0
    1134:	4b19      	ldr	r3, [pc, #100]	; (119c <_i2c_master_set_config+0x374>)
    1136:	47a0      	blx	r4
    1138:	0003      	movs	r3, r0
    113a:	000c      	movs	r4, r1
    113c:	0019      	movs	r1, r3
    113e:	0022      	movs	r2, r4
    1140:	4b18      	ldr	r3, [pc, #96]	; (11a4 <_i2c_master_set_config+0x37c>)
    1142:	0008      	movs	r0, r1
    1144:	0011      	movs	r1, r2
    1146:	4798      	blx	r3
    1148:	0003      	movs	r3, r0
    114a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    114c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    114e:	2b00      	cmp	r3, #0
    1150:	d02e      	beq.n	11b0 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1152:	4b16      	ldr	r3, [pc, #88]	; (11ac <_i2c_master_set_config+0x384>)
    1154:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1158:	4798      	blx	r3
    115a:	0003      	movs	r3, r0
    115c:	1e9a      	subs	r2, r3, #2
    115e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1160:	1ad3      	subs	r3, r2, r3
    1162:	653b      	str	r3, [r7, #80]	; 0x50
    1164:	e031      	b.n	11ca <_i2c_master_set_config+0x3a2>
    1166:	46c0      	nop			; (mov r8, r8)
    1168:	00002599 	.word	0x00002599
    116c:	00000d99 	.word	0x00000d99
    1170:	000023dd 	.word	0x000023dd
    1174:	000046e5 	.word	0x000046e5
    1178:	00000dc1 	.word	0x00000dc1
    117c:	0000451d 	.word	0x0000451d
    1180:	0000aae5 	.word	0x0000aae5
    1184:	00009e8d 	.word	0x00009e8d
    1188:	e826d695 	.word	0xe826d695
    118c:	3e112e0b 	.word	0x3e112e0b
    1190:	00009005 	.word	0x00009005
    1194:	40240000 	.word	0x40240000
    1198:	0000a38d 	.word	0x0000a38d
    119c:	3ff00000 	.word	0x3ff00000
    11a0:	00009625 	.word	0x00009625
    11a4:	0000a9f9 	.word	0x0000a9f9
    11a8:	40080000 	.word	0x40080000
    11ac:	00008c49 	.word	0x00008c49
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    11b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11b2:	005a      	lsls	r2, r3, #1
    11b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11b6:	18d3      	adds	r3, r2, r3
    11b8:	1e5a      	subs	r2, r3, #1
    11ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11bc:	0059      	lsls	r1, r3, #1
    11be:	4b1d      	ldr	r3, [pc, #116]	; (1234 <_i2c_master_set_config+0x40c>)
    11c0:	0010      	movs	r0, r2
    11c2:	4798      	blx	r3
    11c4:	0003      	movs	r3, r0
    11c6:	3b01      	subs	r3, #1
    11c8:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    11ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11cc:	2bff      	cmp	r3, #255	; 0xff
    11ce:	dc08      	bgt.n	11e2 <_i2c_master_set_config+0x3ba>
    11d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11d2:	2b00      	cmp	r3, #0
    11d4:	db05      	blt.n	11e2 <_i2c_master_set_config+0x3ba>
    11d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    11d8:	2bff      	cmp	r3, #255	; 0xff
    11da:	dc02      	bgt.n	11e2 <_i2c_master_set_config+0x3ba>
    11dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    11de:	2b00      	cmp	r3, #0
    11e0:	da06      	bge.n	11f0 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    11e2:	233b      	movs	r3, #59	; 0x3b
    11e4:	2210      	movs	r2, #16
    11e6:	4694      	mov	ip, r2
    11e8:	44bc      	add	ip, r7
    11ea:	4463      	add	r3, ip
    11ec:	2240      	movs	r2, #64	; 0x40
    11ee:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    11f0:	233b      	movs	r3, #59	; 0x3b
    11f2:	2210      	movs	r2, #16
    11f4:	4694      	mov	ip, r2
    11f6:	44bc      	add	ip, r7
    11f8:	4463      	add	r3, ip
    11fa:	781b      	ldrb	r3, [r3, #0]
    11fc:	2b40      	cmp	r3, #64	; 0x40
    11fe:	d00e      	beq.n	121e <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1202:	22ff      	movs	r2, #255	; 0xff
    1204:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1208:	041b      	lsls	r3, r3, #16
    120a:	0019      	movs	r1, r3
    120c:	23ff      	movs	r3, #255	; 0xff
    120e:	041b      	lsls	r3, r3, #16
    1210:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1212:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1214:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    1216:	0612      	lsls	r2, r2, #24
    1218:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    121a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    121c:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    121e:	233b      	movs	r3, #59	; 0x3b
    1220:	2210      	movs	r2, #16
    1222:	4694      	mov	ip, r2
    1224:	44bc      	add	ip, r7
    1226:	4463      	add	r3, ip
    1228:	781b      	ldrb	r3, [r3, #0]
}
    122a:	0018      	movs	r0, r3
    122c:	46bd      	mov	sp, r7
    122e:	b017      	add	sp, #92	; 0x5c
    1230:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	00008c49 	.word	0x00008c49

00001238 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1238:	b590      	push	{r4, r7, lr}
    123a:	b08b      	sub	sp, #44	; 0x2c
    123c:	af00      	add	r7, sp, #0
    123e:	60f8      	str	r0, [r7, #12]
    1240:	60b9      	str	r1, [r7, #8]
    1242:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1244:	68fb      	ldr	r3, [r7, #12]
    1246:	68ba      	ldr	r2, [r7, #8]
    1248:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    124a:	68fb      	ldr	r3, [r7, #12]
    124c:	681b      	ldr	r3, [r3, #0]
    124e:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1250:	68fb      	ldr	r3, [r7, #12]
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	0018      	movs	r0, r3
    1256:	4b3b      	ldr	r3, [pc, #236]	; (1344 <i2c_master_init+0x10c>)
    1258:	4798      	blx	r3
    125a:	0003      	movs	r3, r0
    125c:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    125e:	6a3b      	ldr	r3, [r7, #32]
    1260:	3302      	adds	r3, #2
    1262:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1264:	6a3b      	ldr	r3, [r7, #32]
    1266:	3314      	adds	r3, #20
    1268:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    126a:	2201      	movs	r2, #1
    126c:	69fb      	ldr	r3, [r7, #28]
    126e:	409a      	lsls	r2, r3
    1270:	0013      	movs	r3, r2
    1272:	0019      	movs	r1, r3
    1274:	2002      	movs	r0, #2
    1276:	4b34      	ldr	r3, [pc, #208]	; (1348 <i2c_master_init+0x110>)
    1278:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    127a:	2314      	movs	r3, #20
    127c:	18fb      	adds	r3, r7, r3
    127e:	0018      	movs	r0, r3
    1280:	4b32      	ldr	r3, [pc, #200]	; (134c <i2c_master_init+0x114>)
    1282:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1284:	687b      	ldr	r3, [r7, #4]
    1286:	7b1a      	ldrb	r2, [r3, #12]
    1288:	2314      	movs	r3, #20
    128a:	18fb      	adds	r3, r7, r3
    128c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    128e:	69bb      	ldr	r3, [r7, #24]
    1290:	b2db      	uxtb	r3, r3
    1292:	2214      	movs	r2, #20
    1294:	18ba      	adds	r2, r7, r2
    1296:	0011      	movs	r1, r2
    1298:	0018      	movs	r0, r3
    129a:	4b2d      	ldr	r3, [pc, #180]	; (1350 <i2c_master_init+0x118>)
    129c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    129e:	69bb      	ldr	r3, [r7, #24]
    12a0:	b2db      	uxtb	r3, r3
    12a2:	0018      	movs	r0, r3
    12a4:	4b2b      	ldr	r3, [pc, #172]	; (1354 <i2c_master_init+0x11c>)
    12a6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    12a8:	687b      	ldr	r3, [r7, #4]
    12aa:	7b1b      	ldrb	r3, [r3, #12]
    12ac:	2100      	movs	r1, #0
    12ae:	0018      	movs	r0, r3
    12b0:	4b29      	ldr	r3, [pc, #164]	; (1358 <i2c_master_init+0x120>)
    12b2:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    12b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12b6:	681b      	ldr	r3, [r3, #0]
    12b8:	2202      	movs	r2, #2
    12ba:	4013      	ands	r3, r2
    12bc:	d001      	beq.n	12c2 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    12be:	231c      	movs	r3, #28
    12c0:	e03b      	b.n	133a <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    12c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12c4:	681b      	ldr	r3, [r3, #0]
    12c6:	2201      	movs	r2, #1
    12c8:	4013      	ands	r3, r2
    12ca:	d001      	beq.n	12d0 <i2c_master_init+0x98>
		return STATUS_BUSY;
    12cc:	2305      	movs	r3, #5
    12ce:	e034      	b.n	133a <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    12d0:	68fb      	ldr	r3, [r7, #12]
    12d2:	681b      	ldr	r3, [r3, #0]
    12d4:	2217      	movs	r2, #23
    12d6:	18bc      	adds	r4, r7, r2
    12d8:	0018      	movs	r0, r3
    12da:	4b1a      	ldr	r3, [pc, #104]	; (1344 <i2c_master_init+0x10c>)
    12dc:	4798      	blx	r3
    12de:	0003      	movs	r3, r0
    12e0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    12e2:	4a1e      	ldr	r2, [pc, #120]	; (135c <i2c_master_init+0x124>)
    12e4:	2317      	movs	r3, #23
    12e6:	18fb      	adds	r3, r7, r3
    12e8:	781b      	ldrb	r3, [r3, #0]
    12ea:	0011      	movs	r1, r2
    12ec:	0018      	movs	r0, r3
    12ee:	4b1c      	ldr	r3, [pc, #112]	; (1360 <i2c_master_init+0x128>)
    12f0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    12f2:	2317      	movs	r3, #23
    12f4:	18fb      	adds	r3, r7, r3
    12f6:	781a      	ldrb	r2, [r3, #0]
    12f8:	4b1a      	ldr	r3, [pc, #104]	; (1364 <i2c_master_init+0x12c>)
    12fa:	0092      	lsls	r2, r2, #2
    12fc:	68f9      	ldr	r1, [r7, #12]
    12fe:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    1300:	68fb      	ldr	r3, [r7, #12]
    1302:	2200      	movs	r2, #0
    1304:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    1306:	68fb      	ldr	r3, [r7, #12]
    1308:	2200      	movs	r2, #0
    130a:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    130c:	68fb      	ldr	r3, [r7, #12]
    130e:	2200      	movs	r2, #0
    1310:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    1312:	68fb      	ldr	r3, [r7, #12]
    1314:	2200      	movs	r2, #0
    1316:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    1318:	68fb      	ldr	r3, [r7, #12]
    131a:	2225      	movs	r2, #37	; 0x25
    131c:	2100      	movs	r1, #0
    131e:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    1320:	68fb      	ldr	r3, [r7, #12]
    1322:	2200      	movs	r2, #0
    1324:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    1326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1328:	2214      	movs	r2, #20
    132a:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    132c:	687a      	ldr	r2, [r7, #4]
    132e:	68fb      	ldr	r3, [r7, #12]
    1330:	0011      	movs	r1, r2
    1332:	0018      	movs	r0, r3
    1334:	4b0c      	ldr	r3, [pc, #48]	; (1368 <i2c_master_init+0x130>)
    1336:	4798      	blx	r3
    1338:	0003      	movs	r3, r0
}
    133a:	0018      	movs	r0, r3
    133c:	46bd      	mov	sp, r7
    133e:	b00b      	add	sp, #44	; 0x2c
    1340:	bd90      	pop	{r4, r7, pc}
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	00002599 	.word	0x00002599
    1348:	00000d3d 	.word	0x00000d3d
    134c:	00000d25 	.word	0x00000d25
    1350:	000043f9 	.word	0x000043f9
    1354:	0000443d 	.word	0x0000443d
    1358:	00002351 	.word	0x00002351
    135c:	00001da9 	.word	0x00001da9
    1360:	00003415 	.word	0x00003415
    1364:	20000304 	.word	0x20000304
    1368:	00000e29 	.word	0x00000e29

0000136c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    136c:	b580      	push	{r7, lr}
    136e:	b084      	sub	sp, #16
    1370:	af00      	add	r7, sp, #0
    1372:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1374:	687b      	ldr	r3, [r7, #4]
    1376:	681b      	ldr	r3, [r3, #0]
    1378:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    137a:	68fb      	ldr	r3, [r7, #12]
    137c:	7e1b      	ldrb	r3, [r3, #24]
    137e:	b2db      	uxtb	r3, r3
    1380:	001a      	movs	r2, r3
    1382:	2302      	movs	r3, #2
    1384:	4013      	ands	r3, r2
    1386:	d00b      	beq.n	13a0 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1388:	68fb      	ldr	r3, [r7, #12]
    138a:	2202      	movs	r2, #2
    138c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    138e:	68fb      	ldr	r3, [r7, #12]
    1390:	8b5b      	ldrh	r3, [r3, #26]
    1392:	b29b      	uxth	r3, r3
    1394:	001a      	movs	r2, r3
    1396:	2302      	movs	r3, #2
    1398:	4013      	ands	r3, r2
    139a:	d011      	beq.n	13c0 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    139c:	2341      	movs	r3, #65	; 0x41
    139e:	e010      	b.n	13c2 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	8b5b      	ldrh	r3, [r3, #26]
    13a4:	b29b      	uxth	r3, r3
    13a6:	001a      	movs	r2, r3
    13a8:	2304      	movs	r3, #4
    13aa:	4013      	ands	r3, r2
    13ac:	d008      	beq.n	13c0 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    13ae:	68fb      	ldr	r3, [r7, #12]
    13b0:	685b      	ldr	r3, [r3, #4]
    13b2:	22c0      	movs	r2, #192	; 0xc0
    13b4:	0292      	lsls	r2, r2, #10
    13b6:	431a      	orrs	r2, r3
    13b8:	68fb      	ldr	r3, [r7, #12]
    13ba:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    13bc:	2318      	movs	r3, #24
    13be:	e000      	b.n	13c2 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    13c0:	2300      	movs	r3, #0
}
    13c2:	0018      	movs	r0, r3
    13c4:	46bd      	mov	sp, r7
    13c6:	b004      	add	sp, #16
    13c8:	bd80      	pop	{r7, pc}

000013ca <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    13ca:	b580      	push	{r7, lr}
    13cc:	b084      	sub	sp, #16
    13ce:	af00      	add	r7, sp, #0
    13d0:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    13d8:	230e      	movs	r3, #14
    13da:	18fb      	adds	r3, r7, r3
    13dc:	2200      	movs	r2, #0
    13de:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    13e0:	e00f      	b.n	1402 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    13e2:	230e      	movs	r3, #14
    13e4:	18fb      	adds	r3, r7, r3
    13e6:	220e      	movs	r2, #14
    13e8:	18ba      	adds	r2, r7, r2
    13ea:	8812      	ldrh	r2, [r2, #0]
    13ec:	3201      	adds	r2, #1
    13ee:	801a      	strh	r2, [r3, #0]
    13f0:	687b      	ldr	r3, [r7, #4]
    13f2:	891b      	ldrh	r3, [r3, #8]
    13f4:	220e      	movs	r2, #14
    13f6:	18ba      	adds	r2, r7, r2
    13f8:	8812      	ldrh	r2, [r2, #0]
    13fa:	429a      	cmp	r2, r3
    13fc:	d301      	bcc.n	1402 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    13fe:	2312      	movs	r3, #18
    1400:	e00e      	b.n	1420 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1402:	68bb      	ldr	r3, [r7, #8]
    1404:	7e1b      	ldrb	r3, [r3, #24]
    1406:	b2db      	uxtb	r3, r3
    1408:	001a      	movs	r2, r3
    140a:	2301      	movs	r3, #1
    140c:	4013      	ands	r3, r2
    140e:	d106      	bne.n	141e <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1410:	68bb      	ldr	r3, [r7, #8]
    1412:	7e1b      	ldrb	r3, [r3, #24]
    1414:	b2db      	uxtb	r3, r3
    1416:	001a      	movs	r2, r3
    1418:	2302      	movs	r3, #2
    141a:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    141c:	d0e1      	beq.n	13e2 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    141e:	2300      	movs	r3, #0
}
    1420:	0018      	movs	r0, r3
    1422:	46bd      	mov	sp, r7
    1424:	b004      	add	sp, #16
    1426:	bd80      	pop	{r7, pc}

00001428 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1428:	b590      	push	{r4, r7, lr}
    142a:	b085      	sub	sp, #20
    142c:	af00      	add	r7, sp, #0
    142e:	6078      	str	r0, [r7, #4]
    1430:	000a      	movs	r2, r1
    1432:	1cfb      	adds	r3, r7, #3
    1434:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1436:	687b      	ldr	r3, [r7, #4]
    1438:	681b      	ldr	r3, [r3, #0]
    143a:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    143c:	68fb      	ldr	r3, [r7, #12]
    143e:	685b      	ldr	r3, [r3, #4]
    1440:	2280      	movs	r2, #128	; 0x80
    1442:	02d2      	lsls	r2, r2, #11
    1444:	431a      	orrs	r2, r3
    1446:	68fb      	ldr	r3, [r7, #12]
    1448:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    144a:	1cfb      	adds	r3, r7, #3
    144c:	781a      	ldrb	r2, [r3, #0]
    144e:	68fb      	ldr	r3, [r7, #12]
    1450:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1452:	230b      	movs	r3, #11
    1454:	18fc      	adds	r4, r7, r3
    1456:	687b      	ldr	r3, [r7, #4]
    1458:	0018      	movs	r0, r3
    145a:	4b07      	ldr	r3, [pc, #28]	; (1478 <_i2c_master_send_hs_master_code+0x50>)
    145c:	4798      	blx	r3
    145e:	0003      	movs	r3, r0
    1460:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1462:	68fb      	ldr	r3, [r7, #12]
    1464:	2201      	movs	r2, #1
    1466:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    1468:	230b      	movs	r3, #11
    146a:	18fb      	adds	r3, r7, r3
    146c:	781b      	ldrb	r3, [r3, #0]
}
    146e:	0018      	movs	r0, r3
    1470:	46bd      	mov	sp, r7
    1472:	b005      	add	sp, #20
    1474:	bd90      	pop	{r4, r7, pc}
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	000013cb 	.word	0x000013cb

0000147c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    147c:	b590      	push	{r4, r7, lr}
    147e:	b087      	sub	sp, #28
    1480:	af00      	add	r7, sp, #0
    1482:	6078      	str	r0, [r7, #4]
    1484:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1486:	687b      	ldr	r3, [r7, #4]
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    148c:	2314      	movs	r3, #20
    148e:	18fb      	adds	r3, r7, r3
    1490:	683a      	ldr	r2, [r7, #0]
    1492:	8852      	ldrh	r2, [r2, #2]
    1494:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    1496:	2312      	movs	r3, #18
    1498:	18fb      	adds	r3, r7, r3
    149a:	2200      	movs	r2, #0
    149c:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    149e:	68fb      	ldr	r3, [r7, #12]
    14a0:	681b      	ldr	r3, [r3, #0]
    14a2:	011b      	lsls	r3, r3, #4
    14a4:	0fdb      	lsrs	r3, r3, #31
    14a6:	b2db      	uxtb	r3, r3
    14a8:	001a      	movs	r2, r3
    14aa:	230b      	movs	r3, #11
    14ac:	18fb      	adds	r3, r7, r3
    14ae:	1e51      	subs	r1, r2, #1
    14b0:	418a      	sbcs	r2, r1
    14b2:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    14b4:	683b      	ldr	r3, [r7, #0]
    14b6:	7a5b      	ldrb	r3, [r3, #9]
    14b8:	2b00      	cmp	r3, #0
    14ba:	d006      	beq.n	14ca <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    14bc:	683b      	ldr	r3, [r7, #0]
    14be:	7a9a      	ldrb	r2, [r3, #10]
    14c0:	687b      	ldr	r3, [r7, #4]
    14c2:	0011      	movs	r1, r2
    14c4:	0018      	movs	r0, r3
    14c6:	4b85      	ldr	r3, [pc, #532]	; (16dc <_i2c_master_read_packet+0x260>)
    14c8:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    14ca:	68fb      	ldr	r3, [r7, #12]
    14cc:	685b      	ldr	r3, [r3, #4]
    14ce:	4a84      	ldr	r2, [pc, #528]	; (16e0 <_i2c_master_read_packet+0x264>)
    14d0:	401a      	ands	r2, r3
    14d2:	68fb      	ldr	r3, [r7, #12]
    14d4:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    14d6:	683b      	ldr	r3, [r7, #0]
    14d8:	7a1b      	ldrb	r3, [r3, #8]
    14da:	2b00      	cmp	r3, #0
    14dc:	d042      	beq.n	1564 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    14de:	683b      	ldr	r3, [r7, #0]
    14e0:	881b      	ldrh	r3, [r3, #0]
    14e2:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    14e4:	683b      	ldr	r3, [r7, #0]
    14e6:	7a5b      	ldrb	r3, [r3, #9]
    14e8:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    14ea:	4313      	orrs	r3, r2
    14ec:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    14ee:	2380      	movs	r3, #128	; 0x80
    14f0:	021b      	lsls	r3, r3, #8
    14f2:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    14f4:	68fb      	ldr	r3, [r7, #12]
    14f6:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    14f8:	2317      	movs	r3, #23
    14fa:	18fc      	adds	r4, r7, r3
    14fc:	687b      	ldr	r3, [r7, #4]
    14fe:	0018      	movs	r0, r3
    1500:	4b78      	ldr	r3, [pc, #480]	; (16e4 <_i2c_master_read_packet+0x268>)
    1502:	4798      	blx	r3
    1504:	0003      	movs	r3, r0
    1506:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1508:	68fb      	ldr	r3, [r7, #12]
    150a:	685b      	ldr	r3, [r3, #4]
    150c:	4a74      	ldr	r2, [pc, #464]	; (16e0 <_i2c_master_read_packet+0x264>)
    150e:	401a      	ands	r2, r3
    1510:	68fb      	ldr	r3, [r7, #12]
    1512:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1514:	2317      	movs	r3, #23
    1516:	18fb      	adds	r3, r7, r3
    1518:	781b      	ldrb	r3, [r3, #0]
    151a:	2b00      	cmp	r3, #0
    151c:	d107      	bne.n	152e <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    151e:	2317      	movs	r3, #23
    1520:	18fc      	adds	r4, r7, r3
    1522:	687b      	ldr	r3, [r7, #4]
    1524:	0018      	movs	r0, r3
    1526:	4b70      	ldr	r3, [pc, #448]	; (16e8 <_i2c_master_read_packet+0x26c>)
    1528:	4798      	blx	r3
    152a:	0003      	movs	r3, r0
    152c:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    152e:	2317      	movs	r3, #23
    1530:	18fb      	adds	r3, r7, r3
    1532:	781b      	ldrb	r3, [r3, #0]
    1534:	2b00      	cmp	r3, #0
    1536:	d111      	bne.n	155c <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1538:	683b      	ldr	r3, [r7, #0]
    153a:	881b      	ldrh	r3, [r3, #0]
    153c:	0a1b      	lsrs	r3, r3, #8
    153e:	b29b      	uxth	r3, r3
    1540:	2278      	movs	r2, #120	; 0x78
    1542:	4313      	orrs	r3, r2
    1544:	b29b      	uxth	r3, r3
    1546:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1548:	683b      	ldr	r3, [r7, #0]
    154a:	7a5b      	ldrb	r3, [r3, #9]
    154c:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    154e:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1550:	2201      	movs	r2, #1
    1552:	4313      	orrs	r3, r2
    1554:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1556:	68fb      	ldr	r3, [r7, #12]
    1558:	625a      	str	r2, [r3, #36]	; 0x24
    155a:	e00f      	b.n	157c <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    155c:	2317      	movs	r3, #23
    155e:	18fb      	adds	r3, r7, r3
    1560:	781b      	ldrb	r3, [r3, #0]
    1562:	e0b6      	b.n	16d2 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1564:	683b      	ldr	r3, [r7, #0]
    1566:	881b      	ldrh	r3, [r3, #0]
    1568:	005b      	lsls	r3, r3, #1
    156a:	2201      	movs	r2, #1
    156c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    156e:	683b      	ldr	r3, [r7, #0]
    1570:	7a5b      	ldrb	r3, [r3, #9]
    1572:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1574:	4313      	orrs	r3, r2
    1576:	001a      	movs	r2, r3
    1578:	68fb      	ldr	r3, [r7, #12]
    157a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    157c:	2317      	movs	r3, #23
    157e:	18fc      	adds	r4, r7, r3
    1580:	687b      	ldr	r3, [r7, #4]
    1582:	0018      	movs	r0, r3
    1584:	4b57      	ldr	r3, [pc, #348]	; (16e4 <_i2c_master_read_packet+0x268>)
    1586:	4798      	blx	r3
    1588:	0003      	movs	r3, r0
    158a:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    158c:	230b      	movs	r3, #11
    158e:	18fb      	adds	r3, r7, r3
    1590:	781b      	ldrb	r3, [r3, #0]
    1592:	2b00      	cmp	r3, #0
    1594:	d00b      	beq.n	15ae <_i2c_master_read_packet+0x132>
    1596:	683b      	ldr	r3, [r7, #0]
    1598:	885b      	ldrh	r3, [r3, #2]
    159a:	2b01      	cmp	r3, #1
    159c:	d107      	bne.n	15ae <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    159e:	68fb      	ldr	r3, [r7, #12]
    15a0:	685b      	ldr	r3, [r3, #4]
    15a2:	2280      	movs	r2, #128	; 0x80
    15a4:	02d2      	lsls	r2, r2, #11
    15a6:	431a      	orrs	r2, r3
    15a8:	68fb      	ldr	r3, [r7, #12]
    15aa:	605a      	str	r2, [r3, #4]
    15ac:	e005      	b.n	15ba <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    15ae:	68fb      	ldr	r3, [r7, #12]
    15b0:	685b      	ldr	r3, [r3, #4]
    15b2:	4a4b      	ldr	r2, [pc, #300]	; (16e0 <_i2c_master_read_packet+0x264>)
    15b4:	401a      	ands	r2, r3
    15b6:	68fb      	ldr	r3, [r7, #12]
    15b8:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    15ba:	2317      	movs	r3, #23
    15bc:	18fb      	adds	r3, r7, r3
    15be:	781b      	ldrb	r3, [r3, #0]
    15c0:	2b00      	cmp	r3, #0
    15c2:	d107      	bne.n	15d4 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    15c4:	2317      	movs	r3, #23
    15c6:	18fc      	adds	r4, r7, r3
    15c8:	687b      	ldr	r3, [r7, #4]
    15ca:	0018      	movs	r0, r3
    15cc:	4b46      	ldr	r3, [pc, #280]	; (16e8 <_i2c_master_read_packet+0x26c>)
    15ce:	4798      	blx	r3
    15d0:	0003      	movs	r3, r0
    15d2:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    15d4:	2317      	movs	r3, #23
    15d6:	18fb      	adds	r3, r7, r3
    15d8:	781b      	ldrb	r3, [r3, #0]
    15da:	2b00      	cmp	r3, #0
    15dc:	d000      	beq.n	15e0 <_i2c_master_read_packet+0x164>
    15de:	e075      	b.n	16cc <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    15e0:	e04b      	b.n	167a <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    15e2:	68fb      	ldr	r3, [r7, #12]
    15e4:	8b5b      	ldrh	r3, [r3, #26]
    15e6:	b29b      	uxth	r3, r3
    15e8:	001a      	movs	r2, r3
    15ea:	2320      	movs	r3, #32
    15ec:	4013      	ands	r3, r2
    15ee:	d101      	bne.n	15f4 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    15f0:	2341      	movs	r3, #65	; 0x41
    15f2:	e06e      	b.n	16d2 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	7adb      	ldrb	r3, [r3, #11]
    15f8:	2b00      	cmp	r3, #0
    15fa:	d01e      	beq.n	163a <_i2c_master_read_packet+0x1be>
    15fc:	230b      	movs	r3, #11
    15fe:	18fb      	adds	r3, r7, r3
    1600:	781b      	ldrb	r3, [r3, #0]
    1602:	2201      	movs	r2, #1
    1604:	4053      	eors	r3, r2
    1606:	b2db      	uxtb	r3, r3
    1608:	2b00      	cmp	r3, #0
    160a:	d004      	beq.n	1616 <_i2c_master_read_packet+0x19a>
    160c:	2314      	movs	r3, #20
    160e:	18fb      	adds	r3, r7, r3
    1610:	881b      	ldrh	r3, [r3, #0]
    1612:	2b00      	cmp	r3, #0
    1614:	d009      	beq.n	162a <_i2c_master_read_packet+0x1ae>
    1616:	230b      	movs	r3, #11
    1618:	18fb      	adds	r3, r7, r3
    161a:	781b      	ldrb	r3, [r3, #0]
    161c:	2b00      	cmp	r3, #0
    161e:	d00c      	beq.n	163a <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    1620:	2314      	movs	r3, #20
    1622:	18fb      	adds	r3, r7, r3
    1624:	881b      	ldrh	r3, [r3, #0]
    1626:	2b01      	cmp	r3, #1
    1628:	d107      	bne.n	163a <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    162a:	68fb      	ldr	r3, [r7, #12]
    162c:	685b      	ldr	r3, [r3, #4]
    162e:	2280      	movs	r2, #128	; 0x80
    1630:	02d2      	lsls	r2, r2, #11
    1632:	431a      	orrs	r2, r3
    1634:	68fb      	ldr	r3, [r7, #12]
    1636:	605a      	str	r2, [r3, #4]
    1638:	e01a      	b.n	1670 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    163a:	687b      	ldr	r3, [r7, #4]
    163c:	0018      	movs	r0, r3
    163e:	4b2b      	ldr	r3, [pc, #172]	; (16ec <_i2c_master_read_packet+0x270>)
    1640:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    1642:	683b      	ldr	r3, [r7, #0]
    1644:	685a      	ldr	r2, [r3, #4]
    1646:	2312      	movs	r3, #18
    1648:	18fb      	adds	r3, r7, r3
    164a:	881b      	ldrh	r3, [r3, #0]
    164c:	2112      	movs	r1, #18
    164e:	1879      	adds	r1, r7, r1
    1650:	1c58      	adds	r0, r3, #1
    1652:	8008      	strh	r0, [r1, #0]
    1654:	18d3      	adds	r3, r2, r3
    1656:	68fa      	ldr	r2, [r7, #12]
    1658:	2128      	movs	r1, #40	; 0x28
    165a:	5c52      	ldrb	r2, [r2, r1]
    165c:	b2d2      	uxtb	r2, r2
    165e:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    1660:	2317      	movs	r3, #23
    1662:	18fc      	adds	r4, r7, r3
    1664:	687b      	ldr	r3, [r7, #4]
    1666:	0018      	movs	r0, r3
    1668:	4b1e      	ldr	r3, [pc, #120]	; (16e4 <_i2c_master_read_packet+0x268>)
    166a:	4798      	blx	r3
    166c:	0003      	movs	r3, r0
    166e:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1670:	2317      	movs	r3, #23
    1672:	18fb      	adds	r3, r7, r3
    1674:	781b      	ldrb	r3, [r3, #0]
    1676:	2b00      	cmp	r3, #0
    1678:	d109      	bne.n	168e <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    167a:	2314      	movs	r3, #20
    167c:	18fb      	adds	r3, r7, r3
    167e:	881b      	ldrh	r3, [r3, #0]
    1680:	2214      	movs	r2, #20
    1682:	18ba      	adds	r2, r7, r2
    1684:	1e59      	subs	r1, r3, #1
    1686:	8011      	strh	r1, [r2, #0]
    1688:	2b00      	cmp	r3, #0
    168a:	d1aa      	bne.n	15e2 <_i2c_master_read_packet+0x166>
    168c:	e000      	b.n	1690 <_i2c_master_read_packet+0x214>
				break;
    168e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1690:	687b      	ldr	r3, [r7, #4]
    1692:	7a9b      	ldrb	r3, [r3, #10]
    1694:	2b00      	cmp	r3, #0
    1696:	d00a      	beq.n	16ae <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    1698:	687b      	ldr	r3, [r7, #4]
    169a:	0018      	movs	r0, r3
    169c:	4b13      	ldr	r3, [pc, #76]	; (16ec <_i2c_master_read_packet+0x270>)
    169e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    16a0:	68fb      	ldr	r3, [r7, #12]
    16a2:	685b      	ldr	r3, [r3, #4]
    16a4:	22c0      	movs	r2, #192	; 0xc0
    16a6:	0292      	lsls	r2, r2, #10
    16a8:	431a      	orrs	r2, r3
    16aa:	68fb      	ldr	r3, [r7, #12]
    16ac:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	0018      	movs	r0, r3
    16b2:	4b0e      	ldr	r3, [pc, #56]	; (16ec <_i2c_master_read_packet+0x270>)
    16b4:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    16b6:	683b      	ldr	r3, [r7, #0]
    16b8:	685a      	ldr	r2, [r3, #4]
    16ba:	2312      	movs	r3, #18
    16bc:	18fb      	adds	r3, r7, r3
    16be:	881b      	ldrh	r3, [r3, #0]
    16c0:	18d3      	adds	r3, r2, r3
    16c2:	68fa      	ldr	r2, [r7, #12]
    16c4:	2128      	movs	r1, #40	; 0x28
    16c6:	5c52      	ldrb	r2, [r2, r1]
    16c8:	b2d2      	uxtb	r2, r2
    16ca:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    16cc:	2317      	movs	r3, #23
    16ce:	18fb      	adds	r3, r7, r3
    16d0:	781b      	ldrb	r3, [r3, #0]
}
    16d2:	0018      	movs	r0, r3
    16d4:	46bd      	mov	sp, r7
    16d6:	b007      	add	sp, #28
    16d8:	bd90      	pop	{r4, r7, pc}
    16da:	46c0      	nop			; (mov r8, r8)
    16dc:	00001429 	.word	0x00001429
    16e0:	fffbffff 	.word	0xfffbffff
    16e4:	000013cb 	.word	0x000013cb
    16e8:	0000136d 	.word	0x0000136d
    16ec:	00000e05 	.word	0x00000e05

000016f0 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    16f0:	b580      	push	{r7, lr}
    16f2:	b082      	sub	sp, #8
    16f4:	af00      	add	r7, sp, #0
    16f6:	6078      	str	r0, [r7, #4]
    16f8:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    16fa:	687b      	ldr	r3, [r7, #4]
    16fc:	8b9b      	ldrh	r3, [r3, #28]
    16fe:	b29b      	uxth	r3, r3
    1700:	2b00      	cmp	r3, #0
    1702:	d001      	beq.n	1708 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    1704:	2305      	movs	r3, #5
    1706:	e00c      	b.n	1722 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    1708:	687b      	ldr	r3, [r7, #4]
    170a:	2201      	movs	r2, #1
    170c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	2201      	movs	r2, #1
    1712:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    1714:	683a      	ldr	r2, [r7, #0]
    1716:	687b      	ldr	r3, [r7, #4]
    1718:	0011      	movs	r1, r2
    171a:	0018      	movs	r0, r3
    171c:	4b03      	ldr	r3, [pc, #12]	; (172c <i2c_master_read_packet_wait+0x3c>)
    171e:	4798      	blx	r3
    1720:	0003      	movs	r3, r0
}
    1722:	0018      	movs	r0, r3
    1724:	46bd      	mov	sp, r7
    1726:	b002      	add	sp, #8
    1728:	bd80      	pop	{r7, pc}
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	0000147d 	.word	0x0000147d

00001730 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1730:	b590      	push	{r4, r7, lr}
    1732:	b087      	sub	sp, #28
    1734:	af00      	add	r7, sp, #0
    1736:	6078      	str	r0, [r7, #4]
    1738:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    173a:	687b      	ldr	r3, [r7, #4]
    173c:	681b      	ldr	r3, [r3, #0]
    173e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1740:	2314      	movs	r3, #20
    1742:	18fb      	adds	r3, r7, r3
    1744:	683a      	ldr	r2, [r7, #0]
    1746:	8852      	ldrh	r2, [r2, #2]
    1748:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	0018      	movs	r0, r3
    174e:	4b51      	ldr	r3, [pc, #324]	; (1894 <_i2c_master_write_packet+0x164>)
    1750:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1752:	683b      	ldr	r3, [r7, #0]
    1754:	7a5b      	ldrb	r3, [r3, #9]
    1756:	2b00      	cmp	r3, #0
    1758:	d006      	beq.n	1768 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    175a:	683b      	ldr	r3, [r7, #0]
    175c:	7a9a      	ldrb	r2, [r3, #10]
    175e:	687b      	ldr	r3, [r7, #4]
    1760:	0011      	movs	r1, r2
    1762:	0018      	movs	r0, r3
    1764:	4b4c      	ldr	r3, [pc, #304]	; (1898 <_i2c_master_write_packet+0x168>)
    1766:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1768:	68fb      	ldr	r3, [r7, #12]
    176a:	685b      	ldr	r3, [r3, #4]
    176c:	4a4b      	ldr	r2, [pc, #300]	; (189c <_i2c_master_write_packet+0x16c>)
    176e:	401a      	ands	r2, r3
    1770:	68fb      	ldr	r3, [r7, #12]
    1772:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1774:	683b      	ldr	r3, [r7, #0]
    1776:	7a1b      	ldrb	r3, [r3, #8]
    1778:	2b00      	cmp	r3, #0
    177a:	d00d      	beq.n	1798 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    177c:	683b      	ldr	r3, [r7, #0]
    177e:	881b      	ldrh	r3, [r3, #0]
    1780:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1782:	683b      	ldr	r3, [r7, #0]
    1784:	7a5b      	ldrb	r3, [r3, #9]
    1786:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1788:	4313      	orrs	r3, r2
    178a:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    178c:	2380      	movs	r3, #128	; 0x80
    178e:	021b      	lsls	r3, r3, #8
    1790:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1792:	68fb      	ldr	r3, [r7, #12]
    1794:	625a      	str	r2, [r3, #36]	; 0x24
    1796:	e009      	b.n	17ac <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1798:	683b      	ldr	r3, [r7, #0]
    179a:	881b      	ldrh	r3, [r3, #0]
    179c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    179e:	683b      	ldr	r3, [r7, #0]
    17a0:	7a5b      	ldrb	r3, [r3, #9]
    17a2:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    17a4:	4313      	orrs	r3, r2
    17a6:	001a      	movs	r2, r3
    17a8:	68fb      	ldr	r3, [r7, #12]
    17aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    17ac:	2317      	movs	r3, #23
    17ae:	18fc      	adds	r4, r7, r3
    17b0:	687b      	ldr	r3, [r7, #4]
    17b2:	0018      	movs	r0, r3
    17b4:	4b3a      	ldr	r3, [pc, #232]	; (18a0 <_i2c_master_write_packet+0x170>)
    17b6:	4798      	blx	r3
    17b8:	0003      	movs	r3, r0
    17ba:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    17bc:	2317      	movs	r3, #23
    17be:	18fb      	adds	r3, r7, r3
    17c0:	781b      	ldrb	r3, [r3, #0]
    17c2:	2b00      	cmp	r3, #0
    17c4:	d107      	bne.n	17d6 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    17c6:	2317      	movs	r3, #23
    17c8:	18fc      	adds	r4, r7, r3
    17ca:	687b      	ldr	r3, [r7, #4]
    17cc:	0018      	movs	r0, r3
    17ce:	4b35      	ldr	r3, [pc, #212]	; (18a4 <_i2c_master_write_packet+0x174>)
    17d0:	4798      	blx	r3
    17d2:	0003      	movs	r3, r0
    17d4:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    17d6:	2317      	movs	r3, #23
    17d8:	18fb      	adds	r3, r7, r3
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	2b00      	cmp	r3, #0
    17de:	d152      	bne.n	1886 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    17e0:	2312      	movs	r3, #18
    17e2:	18fb      	adds	r3, r7, r3
    17e4:	2200      	movs	r2, #0
    17e6:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    17e8:	e033      	b.n	1852 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    17ea:	68fb      	ldr	r3, [r7, #12]
    17ec:	8b5b      	ldrh	r3, [r3, #26]
    17ee:	b29b      	uxth	r3, r3
    17f0:	001a      	movs	r2, r3
    17f2:	2320      	movs	r3, #32
    17f4:	4013      	ands	r3, r2
    17f6:	d101      	bne.n	17fc <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    17f8:	2341      	movs	r3, #65	; 0x41
    17fa:	e047      	b.n	188c <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    17fc:	687b      	ldr	r3, [r7, #4]
    17fe:	0018      	movs	r0, r3
    1800:	4b24      	ldr	r3, [pc, #144]	; (1894 <_i2c_master_write_packet+0x164>)
    1802:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1804:	683b      	ldr	r3, [r7, #0]
    1806:	685a      	ldr	r2, [r3, #4]
    1808:	2312      	movs	r3, #18
    180a:	18fb      	adds	r3, r7, r3
    180c:	881b      	ldrh	r3, [r3, #0]
    180e:	2112      	movs	r1, #18
    1810:	1879      	adds	r1, r7, r1
    1812:	1c58      	adds	r0, r3, #1
    1814:	8008      	strh	r0, [r1, #0]
    1816:	18d3      	adds	r3, r2, r3
    1818:	7819      	ldrb	r1, [r3, #0]
    181a:	68fb      	ldr	r3, [r7, #12]
    181c:	2228      	movs	r2, #40	; 0x28
    181e:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    1820:	2317      	movs	r3, #23
    1822:	18fc      	adds	r4, r7, r3
    1824:	687b      	ldr	r3, [r7, #4]
    1826:	0018      	movs	r0, r3
    1828:	4b1d      	ldr	r3, [pc, #116]	; (18a0 <_i2c_master_write_packet+0x170>)
    182a:	4798      	blx	r3
    182c:	0003      	movs	r3, r0
    182e:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1830:	2317      	movs	r3, #23
    1832:	18fb      	adds	r3, r7, r3
    1834:	781b      	ldrb	r3, [r3, #0]
    1836:	2b00      	cmp	r3, #0
    1838:	d115      	bne.n	1866 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    183a:	68fb      	ldr	r3, [r7, #12]
    183c:	8b5b      	ldrh	r3, [r3, #26]
    183e:	b29b      	uxth	r3, r3
    1840:	001a      	movs	r2, r3
    1842:	2304      	movs	r3, #4
    1844:	4013      	ands	r3, r2
    1846:	d004      	beq.n	1852 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1848:	2317      	movs	r3, #23
    184a:	18fb      	adds	r3, r7, r3
    184c:	221e      	movs	r2, #30
    184e:	701a      	strb	r2, [r3, #0]
				break;
    1850:	e00a      	b.n	1868 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    1852:	2314      	movs	r3, #20
    1854:	18fb      	adds	r3, r7, r3
    1856:	881b      	ldrh	r3, [r3, #0]
    1858:	2214      	movs	r2, #20
    185a:	18ba      	adds	r2, r7, r2
    185c:	1e59      	subs	r1, r3, #1
    185e:	8011      	strh	r1, [r2, #0]
    1860:	2b00      	cmp	r3, #0
    1862:	d1c2      	bne.n	17ea <_i2c_master_write_packet+0xba>
    1864:	e000      	b.n	1868 <_i2c_master_write_packet+0x138>
				break;
    1866:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    1868:	687b      	ldr	r3, [r7, #4]
    186a:	7a9b      	ldrb	r3, [r3, #10]
    186c:	2b00      	cmp	r3, #0
    186e:	d00a      	beq.n	1886 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    1870:	687b      	ldr	r3, [r7, #4]
    1872:	0018      	movs	r0, r3
    1874:	4b07      	ldr	r3, [pc, #28]	; (1894 <_i2c_master_write_packet+0x164>)
    1876:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1878:	68fb      	ldr	r3, [r7, #12]
    187a:	685b      	ldr	r3, [r3, #4]
    187c:	22c0      	movs	r2, #192	; 0xc0
    187e:	0292      	lsls	r2, r2, #10
    1880:	431a      	orrs	r2, r3
    1882:	68fb      	ldr	r3, [r7, #12]
    1884:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    1886:	2317      	movs	r3, #23
    1888:	18fb      	adds	r3, r7, r3
    188a:	781b      	ldrb	r3, [r3, #0]
}
    188c:	0018      	movs	r0, r3
    188e:	46bd      	mov	sp, r7
    1890:	b007      	add	sp, #28
    1892:	bd90      	pop	{r4, r7, pc}
    1894:	00000e05 	.word	0x00000e05
    1898:	00001429 	.word	0x00001429
    189c:	fffbffff 	.word	0xfffbffff
    18a0:	000013cb 	.word	0x000013cb
    18a4:	0000136d 	.word	0x0000136d

000018a8 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    18a8:	b580      	push	{r7, lr}
    18aa:	b082      	sub	sp, #8
    18ac:	af00      	add	r7, sp, #0
    18ae:	6078      	str	r0, [r7, #4]
    18b0:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    18b2:	687b      	ldr	r3, [r7, #4]
    18b4:	8b9b      	ldrh	r3, [r3, #28]
    18b6:	b29b      	uxth	r3, r3
    18b8:	2b00      	cmp	r3, #0
    18ba:	d001      	beq.n	18c0 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    18bc:	2305      	movs	r3, #5
    18be:	e00c      	b.n	18da <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    18c0:	687b      	ldr	r3, [r7, #4]
    18c2:	2201      	movs	r2, #1
    18c4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    18c6:	687b      	ldr	r3, [r7, #4]
    18c8:	2201      	movs	r2, #1
    18ca:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    18cc:	683a      	ldr	r2, [r7, #0]
    18ce:	687b      	ldr	r3, [r7, #4]
    18d0:	0011      	movs	r1, r2
    18d2:	0018      	movs	r0, r3
    18d4:	4b03      	ldr	r3, [pc, #12]	; (18e4 <i2c_master_write_packet_wait+0x3c>)
    18d6:	4798      	blx	r3
    18d8:	0003      	movs	r3, r0
}
    18da:	0018      	movs	r0, r3
    18dc:	46bd      	mov	sp, r7
    18de:	b002      	add	sp, #8
    18e0:	bd80      	pop	{r7, pc}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	00001731 	.word	0x00001731

000018e8 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    18e8:	b580      	push	{r7, lr}
    18ea:	b082      	sub	sp, #8
    18ec:	af00      	add	r7, sp, #0
    18ee:	6078      	str	r0, [r7, #4]
    18f0:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    18f2:	687b      	ldr	r3, [r7, #4]
    18f4:	8b9b      	ldrh	r3, [r3, #28]
    18f6:	b29b      	uxth	r3, r3
    18f8:	2b00      	cmp	r3, #0
    18fa:	d001      	beq.n	1900 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
    18fc:	2305      	movs	r3, #5
    18fe:	e00c      	b.n	191a <i2c_master_write_packet_wait_no_stop+0x32>
	}
#endif

	module->send_stop = false;
    1900:	687b      	ldr	r3, [r7, #4]
    1902:	2200      	movs	r2, #0
    1904:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1906:	687b      	ldr	r3, [r7, #4]
    1908:	2201      	movs	r2, #1
    190a:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    190c:	683a      	ldr	r2, [r7, #0]
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	0011      	movs	r1, r2
    1912:	0018      	movs	r0, r3
    1914:	4b03      	ldr	r3, [pc, #12]	; (1924 <i2c_master_write_packet_wait_no_stop+0x3c>)
    1916:	4798      	blx	r3
    1918:	0003      	movs	r3, r0
}
    191a:	0018      	movs	r0, r3
    191c:	46bd      	mov	sp, r7
    191e:	b002      	add	sp, #8
    1920:	bd80      	pop	{r7, pc}
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	00001731 	.word	0x00001731

00001928 <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
    1928:	b580      	push	{r7, lr}
    192a:	b084      	sub	sp, #16
    192c:	af00      	add	r7, sp, #0
    192e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1930:	687b      	ldr	r3, [r7, #4]
    1932:	681b      	ldr	r3, [r3, #0]
    1934:	60fb      	str	r3, [r7, #12]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
    1936:	687b      	ldr	r3, [r7, #4]
    1938:	0018      	movs	r0, r3
    193a:	4b06      	ldr	r3, [pc, #24]	; (1954 <i2c_master_send_stop+0x2c>)
    193c:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    193e:	68fb      	ldr	r3, [r7, #12]
    1940:	685b      	ldr	r3, [r3, #4]
    1942:	22c0      	movs	r2, #192	; 0xc0
    1944:	0292      	lsls	r2, r2, #10
    1946:	431a      	orrs	r2, r3
    1948:	68fb      	ldr	r3, [r7, #12]
    194a:	605a      	str	r2, [r3, #4]
}
    194c:	46c0      	nop			; (mov r8, r8)
    194e:	46bd      	mov	sp, r7
    1950:	b004      	add	sp, #16
    1952:	bd80      	pop	{r7, pc}
    1954:	00000e05 	.word	0x00000e05

00001958 <i2c_master_is_syncing>:
{
    1958:	b580      	push	{r7, lr}
    195a:	b084      	sub	sp, #16
    195c:	af00      	add	r7, sp, #0
    195e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1960:	687b      	ldr	r3, [r7, #4]
    1962:	681b      	ldr	r3, [r3, #0]
    1964:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1966:	68fb      	ldr	r3, [r7, #12]
    1968:	69db      	ldr	r3, [r3, #28]
    196a:	2207      	movs	r2, #7
    196c:	4013      	ands	r3, r2
    196e:	1e5a      	subs	r2, r3, #1
    1970:	4193      	sbcs	r3, r2
    1972:	b2db      	uxtb	r3, r3
}
    1974:	0018      	movs	r0, r3
    1976:	46bd      	mov	sp, r7
    1978:	b004      	add	sp, #16
    197a:	bd80      	pop	{r7, pc}

0000197c <_i2c_master_wait_for_sync>:
{
    197c:	b580      	push	{r7, lr}
    197e:	b082      	sub	sp, #8
    1980:	af00      	add	r7, sp, #0
    1982:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    1984:	46c0      	nop			; (mov r8, r8)
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	0018      	movs	r0, r3
    198a:	4b04      	ldr	r3, [pc, #16]	; (199c <_i2c_master_wait_for_sync+0x20>)
    198c:	4798      	blx	r3
    198e:	1e03      	subs	r3, r0, #0
    1990:	d1f9      	bne.n	1986 <_i2c_master_wait_for_sync+0xa>
}
    1992:	46c0      	nop			; (mov r8, r8)
    1994:	46bd      	mov	sp, r7
    1996:	b002      	add	sp, #8
    1998:	bd80      	pop	{r7, pc}
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	00001959 	.word	0x00001959

000019a0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    19a0:	b580      	push	{r7, lr}
    19a2:	b084      	sub	sp, #16
    19a4:	af00      	add	r7, sp, #0
    19a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    19a8:	687b      	ldr	r3, [r7, #4]
    19aa:	681b      	ldr	r3, [r3, #0]
    19ac:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    19ae:	68fb      	ldr	r3, [r7, #12]
    19b0:	681b      	ldr	r3, [r3, #0]
    19b2:	011b      	lsls	r3, r3, #4
    19b4:	0fdb      	lsrs	r3, r3, #31
    19b6:	b2db      	uxtb	r3, r3
    19b8:	001a      	movs	r2, r3
    19ba:	230b      	movs	r3, #11
    19bc:	18fb      	adds	r3, r7, r3
    19be:	1e51      	subs	r1, r2, #1
    19c0:	418a      	sbcs	r2, r1
    19c2:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    19c4:	2308      	movs	r3, #8
    19c6:	18fb      	adds	r3, r7, r3
    19c8:	687a      	ldr	r2, [r7, #4]
    19ca:	8b52      	ldrh	r2, [r2, #26]
    19cc:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	8b9b      	ldrh	r3, [r3, #28]
    19d2:	b29a      	uxth	r2, r3
    19d4:	2308      	movs	r3, #8
    19d6:	18fb      	adds	r3, r7, r3
    19d8:	2108      	movs	r1, #8
    19da:	1879      	adds	r1, r7, r1
    19dc:	8809      	ldrh	r1, [r1, #0]
    19de:	1a8a      	subs	r2, r1, r2
    19e0:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    19e2:	687b      	ldr	r3, [r7, #4]
    19e4:	8b9b      	ldrh	r3, [r3, #28]
    19e6:	b29b      	uxth	r3, r3
    19e8:	3b01      	subs	r3, #1
    19ea:	b29a      	uxth	r2, r3
    19ec:	687b      	ldr	r3, [r7, #4]
    19ee:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    19f0:	230b      	movs	r3, #11
    19f2:	18fb      	adds	r3, r7, r3
    19f4:	781b      	ldrb	r3, [r3, #0]
    19f6:	2b00      	cmp	r3, #0
    19f8:	d010      	beq.n	1a1c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	7adb      	ldrb	r3, [r3, #11]
    19fe:	2b00      	cmp	r3, #0
    1a00:	d01c      	beq.n	1a3c <_i2c_master_read+0x9c>
    1a02:	687b      	ldr	r3, [r7, #4]
    1a04:	8b9b      	ldrh	r3, [r3, #28]
    1a06:	b29b      	uxth	r3, r3
    1a08:	2b01      	cmp	r3, #1
    1a0a:	d117      	bne.n	1a3c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1a0c:	68fb      	ldr	r3, [r7, #12]
    1a0e:	685b      	ldr	r3, [r3, #4]
    1a10:	2280      	movs	r2, #128	; 0x80
    1a12:	02d2      	lsls	r2, r2, #11
    1a14:	431a      	orrs	r2, r3
    1a16:	68fb      	ldr	r3, [r7, #12]
    1a18:	605a      	str	r2, [r3, #4]
    1a1a:	e00f      	b.n	1a3c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    1a1c:	687b      	ldr	r3, [r7, #4]
    1a1e:	7adb      	ldrb	r3, [r3, #11]
    1a20:	2b00      	cmp	r3, #0
    1a22:	d00b      	beq.n	1a3c <_i2c_master_read+0x9c>
    1a24:	687b      	ldr	r3, [r7, #4]
    1a26:	8b9b      	ldrh	r3, [r3, #28]
    1a28:	b29b      	uxth	r3, r3
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d106      	bne.n	1a3c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1a2e:	68fb      	ldr	r3, [r7, #12]
    1a30:	685b      	ldr	r3, [r3, #4]
    1a32:	2280      	movs	r2, #128	; 0x80
    1a34:	02d2      	lsls	r2, r2, #11
    1a36:	431a      	orrs	r2, r3
    1a38:	68fb      	ldr	r3, [r7, #12]
    1a3a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    1a3c:	687b      	ldr	r3, [r7, #4]
    1a3e:	8b9b      	ldrh	r3, [r3, #28]
    1a40:	b29b      	uxth	r3, r3
    1a42:	2b00      	cmp	r3, #0
    1a44:	d10e      	bne.n	1a64 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    1a46:	687b      	ldr	r3, [r7, #4]
    1a48:	7a9b      	ldrb	r3, [r3, #10]
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d00a      	beq.n	1a64 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1a4e:	687b      	ldr	r3, [r7, #4]
    1a50:	0018      	movs	r0, r3
    1a52:	4b0e      	ldr	r3, [pc, #56]	; (1a8c <_i2c_master_read+0xec>)
    1a54:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a56:	68fb      	ldr	r3, [r7, #12]
    1a58:	685b      	ldr	r3, [r3, #4]
    1a5a:	22c0      	movs	r2, #192	; 0xc0
    1a5c:	0292      	lsls	r2, r2, #10
    1a5e:	431a      	orrs	r2, r3
    1a60:	68fb      	ldr	r3, [r7, #12]
    1a62:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1a64:	687b      	ldr	r3, [r7, #4]
    1a66:	0018      	movs	r0, r3
    1a68:	4b08      	ldr	r3, [pc, #32]	; (1a8c <_i2c_master_read+0xec>)
    1a6a:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	6a1a      	ldr	r2, [r3, #32]
    1a70:	2308      	movs	r3, #8
    1a72:	18fb      	adds	r3, r7, r3
    1a74:	881b      	ldrh	r3, [r3, #0]
    1a76:	18d3      	adds	r3, r2, r3
    1a78:	68fa      	ldr	r2, [r7, #12]
    1a7a:	2128      	movs	r1, #40	; 0x28
    1a7c:	5c52      	ldrb	r2, [r2, r1]
    1a7e:	b2d2      	uxtb	r2, r2
    1a80:	701a      	strb	r2, [r3, #0]
}
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	46bd      	mov	sp, r7
    1a86:	b004      	add	sp, #16
    1a88:	bd80      	pop	{r7, pc}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	0000197d 	.word	0x0000197d

00001a90 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1a90:	b580      	push	{r7, lr}
    1a92:	b084      	sub	sp, #16
    1a94:	af00      	add	r7, sp, #0
    1a96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	681b      	ldr	r3, [r3, #0]
    1a9c:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1a9e:	68fb      	ldr	r3, [r7, #12]
    1aa0:	8b5b      	ldrh	r3, [r3, #26]
    1aa2:	b29b      	uxth	r3, r3
    1aa4:	001a      	movs	r2, r3
    1aa6:	2304      	movs	r3, #4
    1aa8:	4013      	ands	r3, r2
    1aaa:	d004      	beq.n	1ab6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1aac:	687b      	ldr	r3, [r7, #4]
    1aae:	2225      	movs	r2, #37	; 0x25
    1ab0:	211e      	movs	r1, #30
    1ab2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    1ab4:	e024      	b.n	1b00 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    1ab6:	230a      	movs	r3, #10
    1ab8:	18fb      	adds	r3, r7, r3
    1aba:	687a      	ldr	r2, [r7, #4]
    1abc:	8b52      	ldrh	r2, [r2, #26]
    1abe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	8b9b      	ldrh	r3, [r3, #28]
    1ac4:	b29a      	uxth	r2, r3
    1ac6:	230a      	movs	r3, #10
    1ac8:	18fb      	adds	r3, r7, r3
    1aca:	210a      	movs	r1, #10
    1acc:	1879      	adds	r1, r7, r1
    1ace:	8809      	ldrh	r1, [r1, #0]
    1ad0:	1a8a      	subs	r2, r1, r2
    1ad2:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    1ad4:	687b      	ldr	r3, [r7, #4]
    1ad6:	8b9b      	ldrh	r3, [r3, #28]
    1ad8:	b29b      	uxth	r3, r3
    1ada:	3b01      	subs	r3, #1
    1adc:	b29a      	uxth	r2, r3
    1ade:	687b      	ldr	r3, [r7, #4]
    1ae0:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    1ae2:	687b      	ldr	r3, [r7, #4]
    1ae4:	0018      	movs	r0, r3
    1ae6:	4b08      	ldr	r3, [pc, #32]	; (1b08 <_i2c_master_write+0x78>)
    1ae8:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	6a1a      	ldr	r2, [r3, #32]
    1aee:	230a      	movs	r3, #10
    1af0:	18fb      	adds	r3, r7, r3
    1af2:	881b      	ldrh	r3, [r3, #0]
    1af4:	18d3      	adds	r3, r2, r3
    1af6:	781b      	ldrb	r3, [r3, #0]
    1af8:	b2d9      	uxtb	r1, r3
    1afa:	68fb      	ldr	r3, [r7, #12]
    1afc:	2228      	movs	r2, #40	; 0x28
    1afe:	5499      	strb	r1, [r3, r2]
}
    1b00:	46bd      	mov	sp, r7
    1b02:	b004      	add	sp, #16
    1b04:	bd80      	pop	{r7, pc}
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	0000197d 	.word	0x0000197d

00001b0c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    1b0c:	b580      	push	{r7, lr}
    1b0e:	b084      	sub	sp, #16
    1b10:	af00      	add	r7, sp, #0
    1b12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b14:	687b      	ldr	r3, [r7, #4]
    1b16:	681b      	ldr	r3, [r3, #0]
    1b18:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1b1a:	68fb      	ldr	r3, [r7, #12]
    1b1c:	7e1b      	ldrb	r3, [r3, #24]
    1b1e:	b2db      	uxtb	r3, r3
    1b20:	001a      	movs	r2, r3
    1b22:	2301      	movs	r3, #1
    1b24:	4013      	ands	r3, r2
    1b26:	d02b      	beq.n	1b80 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1b28:	68fb      	ldr	r3, [r7, #12]
    1b2a:	2201      	movs	r2, #1
    1b2c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1b2e:	68fb      	ldr	r3, [r7, #12]
    1b30:	8b5b      	ldrh	r3, [r3, #26]
    1b32:	b29b      	uxth	r3, r3
    1b34:	001a      	movs	r2, r3
    1b36:	2302      	movs	r3, #2
    1b38:	4013      	ands	r3, r2
    1b3a:	d004      	beq.n	1b46 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    1b3c:	687b      	ldr	r3, [r7, #4]
    1b3e:	2225      	movs	r2, #37	; 0x25
    1b40:	2141      	movs	r1, #65	; 0x41
    1b42:	5499      	strb	r1, [r3, r2]
    1b44:	e01c      	b.n	1b80 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1b46:	68fb      	ldr	r3, [r7, #12]
    1b48:	8b5b      	ldrh	r3, [r3, #26]
    1b4a:	b29b      	uxth	r3, r3
    1b4c:	001a      	movs	r2, r3
    1b4e:	2304      	movs	r3, #4
    1b50:	4013      	ands	r3, r2
    1b52:	d015      	beq.n	1b80 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	2225      	movs	r2, #37	; 0x25
    1b58:	2118      	movs	r1, #24
    1b5a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    1b5c:	687b      	ldr	r3, [r7, #4]
    1b5e:	2200      	movs	r2, #0
    1b60:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    1b62:	687b      	ldr	r3, [r7, #4]
    1b64:	7a9b      	ldrb	r3, [r3, #10]
    1b66:	2b00      	cmp	r3, #0
    1b68:	d00a      	beq.n	1b80 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	0018      	movs	r0, r3
    1b6e:	4b13      	ldr	r3, [pc, #76]	; (1bbc <_i2c_master_async_address_response+0xb0>)
    1b70:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1b72:	68fb      	ldr	r3, [r7, #12]
    1b74:	685b      	ldr	r3, [r3, #4]
    1b76:	22c0      	movs	r2, #192	; 0xc0
    1b78:	0292      	lsls	r2, r2, #10
    1b7a:	431a      	orrs	r2, r3
    1b7c:	68fb      	ldr	r3, [r7, #12]
    1b7e:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	8b9b      	ldrh	r3, [r3, #28]
    1b84:	b29a      	uxth	r2, r3
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    1b8a:	687b      	ldr	r3, [r7, #4]
    1b8c:	2225      	movs	r2, #37	; 0x25
    1b8e:	5c9b      	ldrb	r3, [r3, r2]
    1b90:	b2db      	uxtb	r3, r3
    1b92:	2b05      	cmp	r3, #5
    1b94:	d10e      	bne.n	1bb4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1b96:	687b      	ldr	r3, [r7, #4]
    1b98:	2224      	movs	r2, #36	; 0x24
    1b9a:	5c9b      	ldrb	r3, [r3, r2]
    1b9c:	b2db      	uxtb	r3, r3
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d104      	bne.n	1bac <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    1ba2:	687b      	ldr	r3, [r7, #4]
    1ba4:	0018      	movs	r0, r3
    1ba6:	4b06      	ldr	r3, [pc, #24]	; (1bc0 <_i2c_master_async_address_response+0xb4>)
    1ba8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    1baa:	e003      	b.n	1bb4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    1bac:	687b      	ldr	r3, [r7, #4]
    1bae:	0018      	movs	r0, r3
    1bb0:	4b04      	ldr	r3, [pc, #16]	; (1bc4 <_i2c_master_async_address_response+0xb8>)
    1bb2:	4798      	blx	r3
}
    1bb4:	46c0      	nop			; (mov r8, r8)
    1bb6:	46bd      	mov	sp, r7
    1bb8:	b004      	add	sp, #16
    1bba:	bd80      	pop	{r7, pc}
    1bbc:	0000197d 	.word	0x0000197d
    1bc0:	00001a91 	.word	0x00001a91
    1bc4:	000019a1 	.word	0x000019a1

00001bc8 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
    1bc8:	b580      	push	{r7, lr}
    1bca:	b084      	sub	sp, #16
    1bcc:	af00      	add	r7, sp, #0
    1bce:	60f8      	str	r0, [r7, #12]
    1bd0:	60b9      	str	r1, [r7, #8]
    1bd2:	1dfb      	adds	r3, r7, #7
    1bd4:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
    1bd6:	1dfb      	adds	r3, r7, #7
    1bd8:	781b      	ldrb	r3, [r3, #0]
    1bda:	68fa      	ldr	r2, [r7, #12]
    1bdc:	3302      	adds	r3, #2
    1bde:	009b      	lsls	r3, r3, #2
    1be0:	18d3      	adds	r3, r2, r3
    1be2:	3304      	adds	r3, #4
    1be4:	68ba      	ldr	r2, [r7, #8]
    1be6:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
    1be8:	68fb      	ldr	r3, [r7, #12]
    1bea:	7e1b      	ldrb	r3, [r3, #24]
    1bec:	b2db      	uxtb	r3, r3
    1bee:	b25a      	sxtb	r2, r3
    1bf0:	1dfb      	adds	r3, r7, #7
    1bf2:	781b      	ldrb	r3, [r3, #0]
    1bf4:	2101      	movs	r1, #1
    1bf6:	4099      	lsls	r1, r3
    1bf8:	000b      	movs	r3, r1
    1bfa:	b25b      	sxtb	r3, r3
    1bfc:	4313      	orrs	r3, r2
    1bfe:	b25b      	sxtb	r3, r3
    1c00:	b2da      	uxtb	r2, r3
    1c02:	68fb      	ldr	r3, [r7, #12]
    1c04:	761a      	strb	r2, [r3, #24]
}
    1c06:	46c0      	nop			; (mov r8, r8)
    1c08:	46bd      	mov	sp, r7
    1c0a:	b004      	add	sp, #16
    1c0c:	bd80      	pop	{r7, pc}
	...

00001c10 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1c10:	b590      	push	{r4, r7, lr}
    1c12:	b087      	sub	sp, #28
    1c14:	af00      	add	r7, sp, #0
    1c16:	6078      	str	r0, [r7, #4]
    1c18:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1c1a:	687b      	ldr	r3, [r7, #4]
    1c1c:	681b      	ldr	r3, [r3, #0]
    1c1e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
    1c20:	683b      	ldr	r3, [r7, #0]
    1c22:	685a      	ldr	r2, [r3, #4]
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    1c28:	683b      	ldr	r3, [r7, #0]
    1c2a:	885a      	ldrh	r2, [r3, #2]
    1c2c:	687b      	ldr	r3, [r7, #4]
    1c2e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	2224      	movs	r2, #36	; 0x24
    1c34:	2101      	movs	r1, #1
    1c36:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    1c38:	687b      	ldr	r3, [r7, #4]
    1c3a:	2225      	movs	r2, #37	; 0x25
    1c3c:	2105      	movs	r1, #5
    1c3e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1c40:	693b      	ldr	r3, [r7, #16]
    1c42:	681b      	ldr	r3, [r3, #0]
    1c44:	011b      	lsls	r3, r3, #4
    1c46:	0fdb      	lsrs	r3, r3, #31
    1c48:	b2db      	uxtb	r3, r3
    1c4a:	001a      	movs	r2, r3
    1c4c:	230f      	movs	r3, #15
    1c4e:	18fb      	adds	r3, r7, r3
    1c50:	1e51      	subs	r1, r2, #1
    1c52:	418a      	sbcs	r2, r1
    1c54:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1c56:	683b      	ldr	r3, [r7, #0]
    1c58:	7a5b      	ldrb	r3, [r3, #9]
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d006      	beq.n	1c6c <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1c5e:	683b      	ldr	r3, [r7, #0]
    1c60:	7a9a      	ldrb	r2, [r3, #10]
    1c62:	687b      	ldr	r3, [r7, #4]
    1c64:	0011      	movs	r1, r2
    1c66:	0018      	movs	r0, r3
    1c68:	4b3b      	ldr	r3, [pc, #236]	; (1d58 <_i2c_master_read_packet+0x148>)
    1c6a:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1c6c:	230f      	movs	r3, #15
    1c6e:	18fb      	adds	r3, r7, r3
    1c70:	781b      	ldrb	r3, [r3, #0]
    1c72:	2b00      	cmp	r3, #0
    1c74:	d00b      	beq.n	1c8e <_i2c_master_read_packet+0x7e>
    1c76:	683b      	ldr	r3, [r7, #0]
    1c78:	885b      	ldrh	r3, [r3, #2]
    1c7a:	2b01      	cmp	r3, #1
    1c7c:	d107      	bne.n	1c8e <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1c7e:	693b      	ldr	r3, [r7, #16]
    1c80:	685b      	ldr	r3, [r3, #4]
    1c82:	2280      	movs	r2, #128	; 0x80
    1c84:	02d2      	lsls	r2, r2, #11
    1c86:	431a      	orrs	r2, r3
    1c88:	693b      	ldr	r3, [r7, #16]
    1c8a:	605a      	str	r2, [r3, #4]
    1c8c:	e005      	b.n	1c9a <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1c8e:	693b      	ldr	r3, [r7, #16]
    1c90:	685b      	ldr	r3, [r3, #4]
    1c92:	4a32      	ldr	r2, [pc, #200]	; (1d5c <_i2c_master_read_packet+0x14c>)
    1c94:	401a      	ands	r2, r3
    1c96:	693b      	ldr	r3, [r7, #16]
    1c98:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
    1c9a:	683b      	ldr	r3, [r7, #0]
    1c9c:	7a1b      	ldrb	r3, [r3, #8]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d045      	beq.n	1d2e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1ca2:	683b      	ldr	r3, [r7, #0]
    1ca4:	881b      	ldrh	r3, [r3, #0]
    1ca6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1ca8:	683b      	ldr	r3, [r7, #0]
    1caa:	7a5b      	ldrb	r3, [r3, #9]
    1cac:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    1cae:	4313      	orrs	r3, r2
    1cb0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1cb2:	2380      	movs	r3, #128	; 0x80
    1cb4:	021b      	lsls	r3, r3, #8
    1cb6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    1cb8:	693b      	ldr	r3, [r7, #16]
    1cba:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1cbc:	2317      	movs	r3, #23
    1cbe:	18fc      	adds	r4, r7, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	0018      	movs	r0, r3
    1cc4:	4b26      	ldr	r3, [pc, #152]	; (1d60 <_i2c_master_read_packet+0x150>)
    1cc6:	4798      	blx	r3
    1cc8:	0003      	movs	r3, r0
    1cca:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1ccc:	693b      	ldr	r3, [r7, #16]
    1cce:	685b      	ldr	r3, [r3, #4]
    1cd0:	4a22      	ldr	r2, [pc, #136]	; (1d5c <_i2c_master_read_packet+0x14c>)
    1cd2:	401a      	ands	r2, r3
    1cd4:	693b      	ldr	r3, [r7, #16]
    1cd6:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1cd8:	2317      	movs	r3, #23
    1cda:	18fb      	adds	r3, r7, r3
    1cdc:	781b      	ldrb	r3, [r3, #0]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d107      	bne.n	1cf2 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
    1ce2:	2317      	movs	r3, #23
    1ce4:	18fc      	adds	r4, r7, r3
    1ce6:	687b      	ldr	r3, [r7, #4]
    1ce8:	0018      	movs	r0, r3
    1cea:	4b1e      	ldr	r3, [pc, #120]	; (1d64 <_i2c_master_read_packet+0x154>)
    1cec:	4798      	blx	r3
    1cee:	0003      	movs	r3, r0
    1cf0:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    1cf2:	2317      	movs	r3, #23
    1cf4:	18fb      	adds	r3, r7, r3
    1cf6:	781b      	ldrb	r3, [r3, #0]
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d114      	bne.n	1d26 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
    1cfc:	693b      	ldr	r3, [r7, #16]
    1cfe:	2203      	movs	r2, #3
    1d00:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1d02:	683b      	ldr	r3, [r7, #0]
    1d04:	881b      	ldrh	r3, [r3, #0]
    1d06:	0a1b      	lsrs	r3, r3, #8
    1d08:	b29b      	uxth	r3, r3
    1d0a:	2278      	movs	r2, #120	; 0x78
    1d0c:	4313      	orrs	r3, r2
    1d0e:	b29b      	uxth	r3, r3
    1d10:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1d12:	683b      	ldr	r3, [r7, #0]
    1d14:	7a5b      	ldrb	r3, [r3, #9]
    1d16:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1d18:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1d1a:	2201      	movs	r2, #1
    1d1c:	4313      	orrs	r3, r2
    1d1e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1d20:	693b      	ldr	r3, [r7, #16]
    1d22:	625a      	str	r2, [r3, #36]	; 0x24
    1d24:	e012      	b.n	1d4c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    1d26:	2317      	movs	r3, #23
    1d28:	18fb      	adds	r3, r7, r3
    1d2a:	781b      	ldrb	r3, [r3, #0]
    1d2c:	e00f      	b.n	1d4e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
    1d2e:	693b      	ldr	r3, [r7, #16]
    1d30:	2203      	movs	r2, #3
    1d32:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1d34:	683b      	ldr	r3, [r7, #0]
    1d36:	881b      	ldrh	r3, [r3, #0]
    1d38:	005b      	lsls	r3, r3, #1
    1d3a:	2201      	movs	r2, #1
    1d3c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1d3e:	683b      	ldr	r3, [r7, #0]
    1d40:	7a5b      	ldrb	r3, [r3, #9]
    1d42:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1d44:	4313      	orrs	r3, r2
    1d46:	001a      	movs	r2, r3
    1d48:	693b      	ldr	r3, [r7, #16]
    1d4a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    1d4c:	2300      	movs	r3, #0
}
    1d4e:	0018      	movs	r0, r3
    1d50:	46bd      	mov	sp, r7
    1d52:	b007      	add	sp, #28
    1d54:	bd90      	pop	{r4, r7, pc}
    1d56:	46c0      	nop			; (mov r8, r8)
    1d58:	00001429 	.word	0x00001429
    1d5c:	fffbffff 	.word	0xfffbffff
    1d60:	000013cb 	.word	0x000013cb
    1d64:	0000136d 	.word	0x0000136d

00001d68 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1d68:	b580      	push	{r7, lr}
    1d6a:	b082      	sub	sp, #8
    1d6c:	af00      	add	r7, sp, #0
    1d6e:	6078      	str	r0, [r7, #4]
    1d70:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	8b9b      	ldrh	r3, [r3, #28]
    1d76:	b29b      	uxth	r3, r3
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d001      	beq.n	1d80 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
    1d7c:	2305      	movs	r3, #5
    1d7e:	e00c      	b.n	1d9a <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
    1d80:	687b      	ldr	r3, [r7, #4]
    1d82:	2201      	movs	r2, #1
    1d84:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1d86:	687b      	ldr	r3, [r7, #4]
    1d88:	2201      	movs	r2, #1
    1d8a:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
    1d8c:	683a      	ldr	r2, [r7, #0]
    1d8e:	687b      	ldr	r3, [r7, #4]
    1d90:	0011      	movs	r1, r2
    1d92:	0018      	movs	r0, r3
    1d94:	4b03      	ldr	r3, [pc, #12]	; (1da4 <i2c_master_read_packet_job+0x3c>)
    1d96:	4798      	blx	r3
    1d98:	0003      	movs	r3, r0
}
    1d9a:	0018      	movs	r0, r3
    1d9c:	46bd      	mov	sp, r7
    1d9e:	b002      	add	sp, #8
    1da0:	bd80      	pop	{r7, pc}
    1da2:	46c0      	nop			; (mov r8, r8)
    1da4:	00001c11 	.word	0x00001c11

00001da8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1da8:	b580      	push	{r7, lr}
    1daa:	b086      	sub	sp, #24
    1dac:	af00      	add	r7, sp, #0
    1dae:	0002      	movs	r2, r0
    1db0:	1dfb      	adds	r3, r7, #7
    1db2:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    1db4:	1dfb      	adds	r3, r7, #7
    1db6:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    1db8:	4b93      	ldr	r3, [pc, #588]	; (2008 <STACK_SIZE+0x8>)
    1dba:	0092      	lsls	r2, r2, #2
    1dbc:	58d3      	ldr	r3, [r2, r3]
    1dbe:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1dc0:	697b      	ldr	r3, [r7, #20]
    1dc2:	681b      	ldr	r3, [r3, #0]
    1dc4:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1dc6:	693b      	ldr	r3, [r7, #16]
    1dc8:	681b      	ldr	r3, [r3, #0]
    1dca:	011b      	lsls	r3, r3, #4
    1dcc:	0fdb      	lsrs	r3, r3, #31
    1dce:	b2db      	uxtb	r3, r3
    1dd0:	001a      	movs	r2, r3
    1dd2:	230f      	movs	r3, #15
    1dd4:	18fb      	adds	r3, r7, r3
    1dd6:	1e51      	subs	r1, r2, #1
    1dd8:	418a      	sbcs	r2, r1
    1dda:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1ddc:	230e      	movs	r3, #14
    1dde:	18fb      	adds	r3, r7, r3
    1de0:	697a      	ldr	r2, [r7, #20]
    1de2:	7e52      	ldrb	r2, [r2, #25]
    1de4:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1de6:	697b      	ldr	r3, [r7, #20]
    1de8:	7e1b      	ldrb	r3, [r3, #24]
    1dea:	b2da      	uxtb	r2, r3
    1dec:	230e      	movs	r3, #14
    1dee:	18fb      	adds	r3, r7, r3
    1df0:	210e      	movs	r1, #14
    1df2:	1879      	adds	r1, r7, r1
    1df4:	7809      	ldrb	r1, [r1, #0]
    1df6:	400a      	ands	r2, r1
    1df8:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1dfa:	697b      	ldr	r3, [r7, #20]
    1dfc:	8b5b      	ldrh	r3, [r3, #26]
    1dfe:	b29b      	uxth	r3, r3
    1e00:	2b00      	cmp	r3, #0
    1e02:	d109      	bne.n	1e18 <_i2c_master_interrupt_handler+0x70>
    1e04:	697b      	ldr	r3, [r7, #20]
    1e06:	8b9b      	ldrh	r3, [r3, #28]
    1e08:	b29b      	uxth	r3, r3
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d004      	beq.n	1e18 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    1e0e:	697b      	ldr	r3, [r7, #20]
    1e10:	0018      	movs	r0, r3
    1e12:	4b7e      	ldr	r3, [pc, #504]	; (200c <STACK_SIZE+0xc>)
    1e14:	4798      	blx	r3
    1e16:	e070      	b.n	1efa <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1e18:	697b      	ldr	r3, [r7, #20]
    1e1a:	8b5b      	ldrh	r3, [r3, #26]
    1e1c:	b29b      	uxth	r3, r3
    1e1e:	2b00      	cmp	r3, #0
    1e20:	d039      	beq.n	1e96 <_i2c_master_interrupt_handler+0xee>
    1e22:	697b      	ldr	r3, [r7, #20]
    1e24:	8b9b      	ldrh	r3, [r3, #28]
    1e26:	b29b      	uxth	r3, r3
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d134      	bne.n	1e96 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    1e2c:	697b      	ldr	r3, [r7, #20]
    1e2e:	2225      	movs	r2, #37	; 0x25
    1e30:	5c9b      	ldrb	r3, [r3, r2]
    1e32:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1e34:	2b05      	cmp	r3, #5
    1e36:	d12e      	bne.n	1e96 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1e38:	697b      	ldr	r3, [r7, #20]
    1e3a:	2224      	movs	r2, #36	; 0x24
    1e3c:	5c9b      	ldrb	r3, [r3, r2]
    1e3e:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1e40:	2b00      	cmp	r3, #0
    1e42:	d128      	bne.n	1e96 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1e44:	693b      	ldr	r3, [r7, #16]
    1e46:	2203      	movs	r2, #3
    1e48:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1e4a:	697b      	ldr	r3, [r7, #20]
    1e4c:	2200      	movs	r2, #0
    1e4e:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1e50:	697b      	ldr	r3, [r7, #20]
    1e52:	2225      	movs	r2, #37	; 0x25
    1e54:	2100      	movs	r1, #0
    1e56:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    1e58:	697b      	ldr	r3, [r7, #20]
    1e5a:	7a9b      	ldrb	r3, [r3, #10]
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d00b      	beq.n	1e78 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1e60:	697b      	ldr	r3, [r7, #20]
    1e62:	0018      	movs	r0, r3
    1e64:	4b6a      	ldr	r3, [pc, #424]	; (2010 <STACK_SIZE+0x10>)
    1e66:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1e68:	693b      	ldr	r3, [r7, #16]
    1e6a:	685b      	ldr	r3, [r3, #4]
    1e6c:	22c0      	movs	r2, #192	; 0xc0
    1e6e:	0292      	lsls	r2, r2, #10
    1e70:	431a      	orrs	r2, r3
    1e72:	693b      	ldr	r3, [r7, #16]
    1e74:	605a      	str	r2, [r3, #4]
    1e76:	e002      	b.n	1e7e <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1e78:	693b      	ldr	r3, [r7, #16]
    1e7a:	2201      	movs	r2, #1
    1e7c:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1e7e:	230e      	movs	r3, #14
    1e80:	18fb      	adds	r3, r7, r3
    1e82:	781b      	ldrb	r3, [r3, #0]
    1e84:	2201      	movs	r2, #1
    1e86:	4013      	ands	r3, r2
    1e88:	d037      	beq.n	1efa <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1e8a:	697b      	ldr	r3, [r7, #20]
    1e8c:	68db      	ldr	r3, [r3, #12]
    1e8e:	697a      	ldr	r2, [r7, #20]
    1e90:	0010      	movs	r0, r2
    1e92:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1e94:	e031      	b.n	1efa <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1e96:	697b      	ldr	r3, [r7, #20]
    1e98:	8b5b      	ldrh	r3, [r3, #26]
    1e9a:	b29b      	uxth	r3, r3
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	d02c      	beq.n	1efa <_i2c_master_interrupt_handler+0x152>
    1ea0:	697b      	ldr	r3, [r7, #20]
    1ea2:	8b9b      	ldrh	r3, [r3, #28]
    1ea4:	b29b      	uxth	r3, r3
    1ea6:	2b00      	cmp	r3, #0
    1ea8:	d027      	beq.n	1efa <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1eaa:	693b      	ldr	r3, [r7, #16]
    1eac:	8b5b      	ldrh	r3, [r3, #26]
    1eae:	b29b      	uxth	r3, r3
    1eb0:	001a      	movs	r2, r3
    1eb2:	2320      	movs	r3, #32
    1eb4:	4013      	ands	r3, r2
    1eb6:	d111      	bne.n	1edc <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1eb8:	230f      	movs	r3, #15
    1eba:	18fb      	adds	r3, r7, r3
    1ebc:	781b      	ldrb	r3, [r3, #0]
    1ebe:	2201      	movs	r2, #1
    1ec0:	4053      	eors	r3, r2
    1ec2:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d104      	bne.n	1ed2 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1ec8:	697b      	ldr	r3, [r7, #20]
    1eca:	8b9b      	ldrh	r3, [r3, #28]
    1ecc:	b29b      	uxth	r3, r3
    1ece:	2b01      	cmp	r3, #1
    1ed0:	d004      	beq.n	1edc <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2225      	movs	r2, #37	; 0x25
    1ed6:	2141      	movs	r1, #65	; 0x41
    1ed8:	5499      	strb	r1, [r3, r2]
    1eda:	e00e      	b.n	1efa <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1edc:	697b      	ldr	r3, [r7, #20]
    1ede:	2224      	movs	r2, #36	; 0x24
    1ee0:	5c9b      	ldrb	r3, [r3, r2]
    1ee2:	b2db      	uxtb	r3, r3
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d104      	bne.n	1ef2 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    1ee8:	697b      	ldr	r3, [r7, #20]
    1eea:	0018      	movs	r0, r3
    1eec:	4b49      	ldr	r3, [pc, #292]	; (2014 <STACK_SIZE+0x14>)
    1eee:	4798      	blx	r3
    1ef0:	e003      	b.n	1efa <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    1ef2:	697b      	ldr	r3, [r7, #20]
    1ef4:	0018      	movs	r0, r3
    1ef6:	4b48      	ldr	r3, [pc, #288]	; (2018 <STACK_SIZE+0x18>)
    1ef8:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1efa:	697b      	ldr	r3, [r7, #20]
    1efc:	8b5b      	ldrh	r3, [r3, #26]
    1efe:	b29b      	uxth	r3, r3
    1f00:	2b00      	cmp	r3, #0
    1f02:	d047      	beq.n	1f94 <_i2c_master_interrupt_handler+0x1ec>
    1f04:	697b      	ldr	r3, [r7, #20]
    1f06:	8b9b      	ldrh	r3, [r3, #28]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d142      	bne.n	1f94 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    1f0e:	697b      	ldr	r3, [r7, #20]
    1f10:	2225      	movs	r2, #37	; 0x25
    1f12:	5c9b      	ldrb	r3, [r3, r2]
    1f14:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1f16:	2b05      	cmp	r3, #5
    1f18:	d13c      	bne.n	1f94 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1f1a:	697b      	ldr	r3, [r7, #20]
    1f1c:	2224      	movs	r2, #36	; 0x24
    1f1e:	5c9b      	ldrb	r3, [r3, r2]
    1f20:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    1f22:	2b01      	cmp	r3, #1
    1f24:	d136      	bne.n	1f94 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1f26:	693b      	ldr	r3, [r7, #16]
    1f28:	7e1b      	ldrb	r3, [r3, #24]
    1f2a:	b2db      	uxtb	r3, r3
    1f2c:	001a      	movs	r2, r3
    1f2e:	2302      	movs	r3, #2
    1f30:	4013      	ands	r3, r2
    1f32:	d002      	beq.n	1f3a <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1f34:	693b      	ldr	r3, [r7, #16]
    1f36:	2202      	movs	r2, #2
    1f38:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    1f3a:	693b      	ldr	r3, [r7, #16]
    1f3c:	2203      	movs	r2, #3
    1f3e:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1f40:	697b      	ldr	r3, [r7, #20]
    1f42:	2200      	movs	r2, #0
    1f44:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    1f46:	697b      	ldr	r3, [r7, #20]
    1f48:	2225      	movs	r2, #37	; 0x25
    1f4a:	2100      	movs	r1, #0
    1f4c:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1f4e:	230e      	movs	r3, #14
    1f50:	18fb      	adds	r3, r7, r3
    1f52:	781b      	ldrb	r3, [r3, #0]
    1f54:	2202      	movs	r2, #2
    1f56:	4013      	ands	r3, r2
    1f58:	d00b      	beq.n	1f72 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1f5a:	697b      	ldr	r3, [r7, #20]
    1f5c:	2224      	movs	r2, #36	; 0x24
    1f5e:	5c9b      	ldrb	r3, [r3, r2]
    1f60:	b2db      	uxtb	r3, r3
    1f62:	2b01      	cmp	r3, #1
    1f64:	d105      	bne.n	1f72 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1f66:	697b      	ldr	r3, [r7, #20]
    1f68:	691b      	ldr	r3, [r3, #16]
    1f6a:	697a      	ldr	r2, [r7, #20]
    1f6c:	0010      	movs	r0, r2
    1f6e:	4798      	blx	r3
    1f70:	e010      	b.n	1f94 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1f72:	230e      	movs	r3, #14
    1f74:	18fb      	adds	r3, r7, r3
    1f76:	781b      	ldrb	r3, [r3, #0]
    1f78:	2201      	movs	r2, #1
    1f7a:	4013      	ands	r3, r2
    1f7c:	d00a      	beq.n	1f94 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1f7e:	697b      	ldr	r3, [r7, #20]
    1f80:	2224      	movs	r2, #36	; 0x24
    1f82:	5c9b      	ldrb	r3, [r3, r2]
    1f84:	b2db      	uxtb	r3, r3
    1f86:	2b00      	cmp	r3, #0
    1f88:	d104      	bne.n	1f94 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1f8a:	697b      	ldr	r3, [r7, #20]
    1f8c:	68db      	ldr	r3, [r3, #12]
    1f8e:	697a      	ldr	r2, [r7, #20]
    1f90:	0010      	movs	r0, r2
    1f92:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1f94:	697b      	ldr	r3, [r7, #20]
    1f96:	2225      	movs	r2, #37	; 0x25
    1f98:	5c9b      	ldrb	r3, [r3, r2]
    1f9a:	b2db      	uxtb	r3, r3
    1f9c:	2b05      	cmp	r3, #5
    1f9e:	d02e      	beq.n	1ffe <_i2c_master_interrupt_handler+0x256>
    1fa0:	697b      	ldr	r3, [r7, #20]
    1fa2:	2225      	movs	r2, #37	; 0x25
    1fa4:	5c9b      	ldrb	r3, [r3, r2]
    1fa6:	b2db      	uxtb	r3, r3
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d028      	beq.n	1ffe <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1fac:	693b      	ldr	r3, [r7, #16]
    1fae:	2203      	movs	r2, #3
    1fb0:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1fb2:	697b      	ldr	r3, [r7, #20]
    1fb4:	2200      	movs	r2, #0
    1fb6:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    1fb8:	697b      	ldr	r3, [r7, #20]
    1fba:	2200      	movs	r2, #0
    1fbc:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1fbe:	697b      	ldr	r3, [r7, #20]
    1fc0:	2225      	movs	r2, #37	; 0x25
    1fc2:	5c9b      	ldrb	r3, [r3, r2]
    1fc4:	b2db      	uxtb	r3, r3
    1fc6:	2b41      	cmp	r3, #65	; 0x41
    1fc8:	d00e      	beq.n	1fe8 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    1fca:	697b      	ldr	r3, [r7, #20]
    1fcc:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1fce:	2b00      	cmp	r3, #0
    1fd0:	d00a      	beq.n	1fe8 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    1fd2:	697b      	ldr	r3, [r7, #20]
    1fd4:	0018      	movs	r0, r3
    1fd6:	4b0e      	ldr	r3, [pc, #56]	; (2010 <STACK_SIZE+0x10>)
    1fd8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1fda:	693b      	ldr	r3, [r7, #16]
    1fdc:	685b      	ldr	r3, [r3, #4]
    1fde:	22e0      	movs	r2, #224	; 0xe0
    1fe0:	02d2      	lsls	r2, r2, #11
    1fe2:	431a      	orrs	r2, r3
    1fe4:	693b      	ldr	r3, [r7, #16]
    1fe6:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1fe8:	230e      	movs	r3, #14
    1fea:	18fb      	adds	r3, r7, r3
    1fec:	781b      	ldrb	r3, [r3, #0]
    1fee:	2204      	movs	r2, #4
    1ff0:	4013      	ands	r3, r2
    1ff2:	d004      	beq.n	1ffe <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1ff4:	697b      	ldr	r3, [r7, #20]
    1ff6:	695b      	ldr	r3, [r3, #20]
    1ff8:	697a      	ldr	r2, [r7, #20]
    1ffa:	0010      	movs	r0, r2
    1ffc:	4798      	blx	r3
		}
	}
}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	46bd      	mov	sp, r7
    2002:	b006      	add	sp, #24
    2004:	bd80      	pop	{r7, pc}
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	20000304 	.word	0x20000304
    200c:	00001b0d 	.word	0x00001b0d
    2010:	0000197d 	.word	0x0000197d
    2014:	00001a91 	.word	0x00001a91
    2018:	000019a1 	.word	0x000019a1

0000201c <system_gclk_chan_get_config_defaults>:
{
    201c:	b580      	push	{r7, lr}
    201e:	b082      	sub	sp, #8
    2020:	af00      	add	r7, sp, #0
    2022:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    2024:	687b      	ldr	r3, [r7, #4]
    2026:	2200      	movs	r2, #0
    2028:	701a      	strb	r2, [r3, #0]
}
    202a:	46c0      	nop			; (mov r8, r8)
    202c:	46bd      	mov	sp, r7
    202e:	b002      	add	sp, #8
    2030:	bd80      	pop	{r7, pc}

00002032 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    2032:	b5f0      	push	{r4, r5, r6, r7, lr}
    2034:	b08d      	sub	sp, #52	; 0x34
    2036:	af00      	add	r7, sp, #0
    2038:	60b8      	str	r0, [r7, #8]
    203a:	60f9      	str	r1, [r7, #12]
    203c:	603a      	str	r2, [r7, #0]
    203e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    2040:	2300      	movs	r3, #0
    2042:	2400      	movs	r4, #0
    2044:	623b      	str	r3, [r7, #32]
    2046:	627c      	str	r4, [r7, #36]	; 0x24
    2048:	2300      	movs	r3, #0
    204a:	2400      	movs	r4, #0
    204c:	61bb      	str	r3, [r7, #24]
    204e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    2050:	233f      	movs	r3, #63	; 0x3f
    2052:	62fb      	str	r3, [r7, #44]	; 0x2c
    2054:	e053      	b.n	20fe <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    2056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2058:	3b20      	subs	r3, #32
    205a:	2b00      	cmp	r3, #0
    205c:	db04      	blt.n	2068 <long_division+0x36>
    205e:	2201      	movs	r2, #1
    2060:	409a      	lsls	r2, r3
    2062:	0013      	movs	r3, r2
    2064:	617b      	str	r3, [r7, #20]
    2066:	e00b      	b.n	2080 <long_division+0x4e>
    2068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    206a:	2220      	movs	r2, #32
    206c:	1ad3      	subs	r3, r2, r3
    206e:	2201      	movs	r2, #1
    2070:	40da      	lsrs	r2, r3
    2072:	0013      	movs	r3, r2
    2074:	2100      	movs	r1, #0
    2076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2078:	4091      	lsls	r1, r2
    207a:	000a      	movs	r2, r1
    207c:	4313      	orrs	r3, r2
    207e:	617b      	str	r3, [r7, #20]
    2080:	2201      	movs	r2, #1
    2082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2084:	409a      	lsls	r2, r3
    2086:	0013      	movs	r3, r2
    2088:	613b      	str	r3, [r7, #16]

		r = r << 1;
    208a:	69bb      	ldr	r3, [r7, #24]
    208c:	69fc      	ldr	r4, [r7, #28]
    208e:	18db      	adds	r3, r3, r3
    2090:	4164      	adcs	r4, r4
    2092:	61bb      	str	r3, [r7, #24]
    2094:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    2096:	68bb      	ldr	r3, [r7, #8]
    2098:	693a      	ldr	r2, [r7, #16]
    209a:	401a      	ands	r2, r3
    209c:	0015      	movs	r5, r2
    209e:	68fb      	ldr	r3, [r7, #12]
    20a0:	697a      	ldr	r2, [r7, #20]
    20a2:	401a      	ands	r2, r3
    20a4:	0016      	movs	r6, r2
    20a6:	002b      	movs	r3, r5
    20a8:	4333      	orrs	r3, r6
    20aa:	d007      	beq.n	20bc <long_division+0x8a>
			r |= 0x01;
    20ac:	69bb      	ldr	r3, [r7, #24]
    20ae:	2201      	movs	r2, #1
    20b0:	4313      	orrs	r3, r2
    20b2:	61bb      	str	r3, [r7, #24]
    20b4:	69fb      	ldr	r3, [r7, #28]
    20b6:	2200      	movs	r2, #0
    20b8:	4313      	orrs	r3, r2
    20ba:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    20bc:	687a      	ldr	r2, [r7, #4]
    20be:	69fb      	ldr	r3, [r7, #28]
    20c0:	429a      	cmp	r2, r3
    20c2:	d819      	bhi.n	20f8 <long_division+0xc6>
    20c4:	687a      	ldr	r2, [r7, #4]
    20c6:	69fb      	ldr	r3, [r7, #28]
    20c8:	429a      	cmp	r2, r3
    20ca:	d103      	bne.n	20d4 <long_division+0xa2>
    20cc:	683a      	ldr	r2, [r7, #0]
    20ce:	69bb      	ldr	r3, [r7, #24]
    20d0:	429a      	cmp	r2, r3
    20d2:	d811      	bhi.n	20f8 <long_division+0xc6>
			r = r - d;
    20d4:	69b9      	ldr	r1, [r7, #24]
    20d6:	69fa      	ldr	r2, [r7, #28]
    20d8:	683b      	ldr	r3, [r7, #0]
    20da:	687c      	ldr	r4, [r7, #4]
    20dc:	1ac9      	subs	r1, r1, r3
    20de:	41a2      	sbcs	r2, r4
    20e0:	000b      	movs	r3, r1
    20e2:	0014      	movs	r4, r2
    20e4:	61bb      	str	r3, [r7, #24]
    20e6:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    20e8:	6a3a      	ldr	r2, [r7, #32]
    20ea:	693b      	ldr	r3, [r7, #16]
    20ec:	4313      	orrs	r3, r2
    20ee:	623b      	str	r3, [r7, #32]
    20f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    20f2:	697b      	ldr	r3, [r7, #20]
    20f4:	4313      	orrs	r3, r2
    20f6:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    20f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    20fa:	3b01      	subs	r3, #1
    20fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    20fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2100:	2b00      	cmp	r3, #0
    2102:	daa8      	bge.n	2056 <long_division+0x24>
		}
	}

	return q;
    2104:	6a3b      	ldr	r3, [r7, #32]
    2106:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    2108:	0018      	movs	r0, r3
    210a:	0021      	movs	r1, r4
    210c:	46bd      	mov	sp, r7
    210e:	b00d      	add	sp, #52	; 0x34
    2110:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002112 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2112:	b580      	push	{r7, lr}
    2114:	b086      	sub	sp, #24
    2116:	af00      	add	r7, sp, #0
    2118:	60f8      	str	r0, [r7, #12]
    211a:	60b9      	str	r1, [r7, #8]
    211c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    211e:	2316      	movs	r3, #22
    2120:	18fb      	adds	r3, r7, r3
    2122:	2200      	movs	r2, #0
    2124:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    2126:	68bb      	ldr	r3, [r7, #8]
    2128:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    212a:	68bb      	ldr	r3, [r7, #8]
    212c:	085a      	lsrs	r2, r3, #1
    212e:	68fb      	ldr	r3, [r7, #12]
    2130:	429a      	cmp	r2, r3
    2132:	d201      	bcs.n	2138 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2134:	2340      	movs	r3, #64	; 0x40
    2136:	e026      	b.n	2186 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    2138:	68bb      	ldr	r3, [r7, #8]
    213a:	085b      	lsrs	r3, r3, #1
    213c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    213e:	e00a      	b.n	2156 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    2140:	693a      	ldr	r2, [r7, #16]
    2142:	68fb      	ldr	r3, [r7, #12]
    2144:	1ad3      	subs	r3, r2, r3
    2146:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    2148:	2316      	movs	r3, #22
    214a:	18fb      	adds	r3, r7, r3
    214c:	881a      	ldrh	r2, [r3, #0]
    214e:	2316      	movs	r3, #22
    2150:	18fb      	adds	r3, r7, r3
    2152:	3201      	adds	r2, #1
    2154:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    2156:	693a      	ldr	r2, [r7, #16]
    2158:	68fb      	ldr	r3, [r7, #12]
    215a:	429a      	cmp	r2, r3
    215c:	d2f0      	bcs.n	2140 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    215e:	2316      	movs	r3, #22
    2160:	18fb      	adds	r3, r7, r3
    2162:	2216      	movs	r2, #22
    2164:	18ba      	adds	r2, r7, r2
    2166:	8812      	ldrh	r2, [r2, #0]
    2168:	3a01      	subs	r2, #1
    216a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    216c:	2316      	movs	r3, #22
    216e:	18fb      	adds	r3, r7, r3
    2170:	881b      	ldrh	r3, [r3, #0]
    2172:	2bff      	cmp	r3, #255	; 0xff
    2174:	d901      	bls.n	217a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2176:	2340      	movs	r3, #64	; 0x40
    2178:	e005      	b.n	2186 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	2216      	movs	r2, #22
    217e:	18ba      	adds	r2, r7, r2
    2180:	8812      	ldrh	r2, [r2, #0]
    2182:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    2184:	2300      	movs	r3, #0
	}
}
    2186:	0018      	movs	r0, r3
    2188:	46bd      	mov	sp, r7
    218a:	b006      	add	sp, #24
    218c:	bd80      	pop	{r7, pc}
	...

00002190 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2190:	b5f0      	push	{r4, r5, r6, r7, lr}
    2192:	b0a1      	sub	sp, #132	; 0x84
    2194:	af00      	add	r7, sp, #0
    2196:	64f8      	str	r0, [r7, #76]	; 0x4c
    2198:	64b9      	str	r1, [r7, #72]	; 0x48
    219a:	647a      	str	r2, [r7, #68]	; 0x44
    219c:	2243      	movs	r2, #67	; 0x43
    219e:	18ba      	adds	r2, r7, r2
    21a0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    21a2:	2300      	movs	r3, #0
    21a4:	2400      	movs	r4, #0
    21a6:	673b      	str	r3, [r7, #112]	; 0x70
    21a8:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    21aa:	2300      	movs	r3, #0
    21ac:	2400      	movs	r4, #0
    21ae:	66bb      	str	r3, [r7, #104]	; 0x68
    21b0:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    21b2:	2300      	movs	r3, #0
    21b4:	2400      	movs	r4, #0
    21b6:	67bb      	str	r3, [r7, #120]	; 0x78
    21b8:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    21ba:	2300      	movs	r3, #0
    21bc:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    21be:	2358      	movs	r3, #88	; 0x58
    21c0:	2240      	movs	r2, #64	; 0x40
    21c2:	4694      	mov	ip, r2
    21c4:	44bc      	add	ip, r7
    21c6:	4463      	add	r3, ip
    21c8:	781a      	ldrb	r2, [r3, #0]
    21ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    21cc:	435a      	muls	r2, r3
    21ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    21d0:	429a      	cmp	r2, r3
    21d2:	d901      	bls.n	21d8 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    21d4:	2340      	movs	r3, #64	; 0x40
    21d6:	e0b3      	b.n	2340 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    21d8:	2343      	movs	r3, #67	; 0x43
    21da:	18fb      	adds	r3, r7, r3
    21dc:	781b      	ldrb	r3, [r3, #0]
    21de:	2b00      	cmp	r3, #0
    21e0:	d13d      	bne.n	225e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    21e2:	2358      	movs	r3, #88	; 0x58
    21e4:	2240      	movs	r2, #64	; 0x40
    21e6:	4694      	mov	ip, r2
    21e8:	44bc      	add	ip, r7
    21ea:	4463      	add	r3, ip
    21ec:	781b      	ldrb	r3, [r3, #0]
    21ee:	b2db      	uxtb	r3, r3
    21f0:	613b      	str	r3, [r7, #16]
    21f2:	2300      	movs	r3, #0
    21f4:	617b      	str	r3, [r7, #20]
    21f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    21f8:	60bb      	str	r3, [r7, #8]
    21fa:	2300      	movs	r3, #0
    21fc:	60fb      	str	r3, [r7, #12]
    21fe:	4c52      	ldr	r4, [pc, #328]	; (2348 <_sercom_get_async_baud_val+0x1b8>)
    2200:	68ba      	ldr	r2, [r7, #8]
    2202:	68fb      	ldr	r3, [r7, #12]
    2204:	6938      	ldr	r0, [r7, #16]
    2206:	6979      	ldr	r1, [r7, #20]
    2208:	47a0      	blx	r4
    220a:	0003      	movs	r3, r0
    220c:	000c      	movs	r4, r1
    220e:	001b      	movs	r3, r3
    2210:	65fb      	str	r3, [r7, #92]	; 0x5c
    2212:	2300      	movs	r3, #0
    2214:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    2216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2218:	603b      	str	r3, [r7, #0]
    221a:	2300      	movs	r3, #0
    221c:	607b      	str	r3, [r7, #4]
    221e:	6db8      	ldr	r0, [r7, #88]	; 0x58
    2220:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    2222:	683a      	ldr	r2, [r7, #0]
    2224:	687b      	ldr	r3, [r7, #4]
    2226:	4c49      	ldr	r4, [pc, #292]	; (234c <_sercom_get_async_baud_val+0x1bc>)
    2228:	47a0      	blx	r4
    222a:	0003      	movs	r3, r0
    222c:	000c      	movs	r4, r1
    222e:	673b      	str	r3, [r7, #112]	; 0x70
    2230:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    2232:	2100      	movs	r1, #0
    2234:	2201      	movs	r2, #1
    2236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    2238:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    223a:	1ac9      	subs	r1, r1, r3
    223c:	41a2      	sbcs	r2, r4
    223e:	000b      	movs	r3, r1
    2240:	0014      	movs	r4, r2
    2242:	66bb      	str	r3, [r7, #104]	; 0x68
    2244:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    2246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2248:	0c1b      	lsrs	r3, r3, #16
    224a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    224c:	0416      	lsls	r6, r2, #16
    224e:	431e      	orrs	r6, r3
    2250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2252:	041d      	lsls	r5, r3, #16
    2254:	0033      	movs	r3, r6
    2256:	67bb      	str	r3, [r7, #120]	; 0x78
    2258:	2300      	movs	r3, #0
    225a:	67fb      	str	r3, [r7, #124]	; 0x7c
    225c:	e06a      	b.n	2334 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    225e:	2343      	movs	r3, #67	; 0x43
    2260:	18fb      	adds	r3, r7, r3
    2262:	781b      	ldrb	r3, [r3, #0]
    2264:	2b01      	cmp	r3, #1
    2266:	d165      	bne.n	2334 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    2268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    226a:	633b      	str	r3, [r7, #48]	; 0x30
    226c:	2300      	movs	r3, #0
    226e:	637b      	str	r3, [r7, #52]	; 0x34
    2270:	2358      	movs	r3, #88	; 0x58
    2272:	2240      	movs	r2, #64	; 0x40
    2274:	4694      	mov	ip, r2
    2276:	44bc      	add	ip, r7
    2278:	4463      	add	r3, ip
    227a:	781b      	ldrb	r3, [r3, #0]
    227c:	b2db      	uxtb	r3, r3
    227e:	62bb      	str	r3, [r7, #40]	; 0x28
    2280:	2300      	movs	r3, #0
    2282:	62fb      	str	r3, [r7, #44]	; 0x2c
    2284:	4c30      	ldr	r4, [pc, #192]	; (2348 <_sercom_get_async_baud_val+0x1b8>)
    2286:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    228a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    228c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    228e:	47a0      	blx	r4
    2290:	0003      	movs	r3, r0
    2292:	000c      	movs	r4, r1
    2294:	65bb      	str	r3, [r7, #88]	; 0x58
    2296:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    2298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    229a:	623b      	str	r3, [r7, #32]
    229c:	2300      	movs	r3, #0
    229e:	627b      	str	r3, [r7, #36]	; 0x24
    22a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    22a2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    22a4:	001a      	movs	r2, r3
    22a6:	0023      	movs	r3, r4
    22a8:	6a38      	ldr	r0, [r7, #32]
    22aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
    22ac:	4c27      	ldr	r4, [pc, #156]	; (234c <_sercom_get_async_baud_val+0x1bc>)
    22ae:	47a0      	blx	r4
    22b0:	0003      	movs	r3, r0
    22b2:	000c      	movs	r4, r1
    22b4:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    22b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    22b8:	2380      	movs	r3, #128	; 0x80
    22ba:	019b      	lsls	r3, r3, #6
    22bc:	429a      	cmp	r2, r3
    22be:	d901      	bls.n	22c4 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    22c0:	2340      	movs	r3, #64	; 0x40
    22c2:	e03d      	b.n	2340 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    22c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    22c6:	61bb      	str	r3, [r7, #24]
    22c8:	2300      	movs	r3, #0
    22ca:	61fb      	str	r3, [r7, #28]
    22cc:	69b9      	ldr	r1, [r7, #24]
    22ce:	69fa      	ldr	r2, [r7, #28]
    22d0:	000b      	movs	r3, r1
    22d2:	0f5b      	lsrs	r3, r3, #29
    22d4:	0010      	movs	r0, r2
    22d6:	00c0      	lsls	r0, r0, #3
    22d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    22da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    22dc:	4318      	orrs	r0, r3
    22de:	63f8      	str	r0, [r7, #60]	; 0x3c
    22e0:	000b      	movs	r3, r1
    22e2:	00db      	lsls	r3, r3, #3
    22e4:	63bb      	str	r3, [r7, #56]	; 0x38
    22e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    22e8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    22ea:	001a      	movs	r2, r3
    22ec:	0023      	movs	r3, r4
    22ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    22f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    22f2:	4c16      	ldr	r4, [pc, #88]	; (234c <_sercom_get_async_baud_val+0x1bc>)
    22f4:	47a0      	blx	r4
    22f6:	0003      	movs	r3, r0
    22f8:	000c      	movs	r4, r1
    22fa:	65bb      	str	r3, [r7, #88]	; 0x58
    22fc:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    22fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2300:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    2302:	b2d9      	uxtb	r1, r3
    2304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2306:	b2db      	uxtb	r3, r3
    2308:	00db      	lsls	r3, r3, #3
    230a:	b2da      	uxtb	r2, r3
    230c:	2317      	movs	r3, #23
    230e:	2040      	movs	r0, #64	; 0x40
    2310:	4684      	mov	ip, r0
    2312:	44bc      	add	ip, r7
    2314:	4463      	add	r3, ip
    2316:	1a8a      	subs	r2, r1, r2
    2318:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    231a:	2317      	movs	r3, #23
    231c:	2240      	movs	r2, #64	; 0x40
    231e:	4694      	mov	ip, r2
    2320:	44bc      	add	ip, r7
    2322:	4463      	add	r3, ip
    2324:	781b      	ldrb	r3, [r3, #0]
    2326:	035b      	lsls	r3, r3, #13
    2328:	001a      	movs	r2, r3
    232a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    232c:	4313      	orrs	r3, r2
    232e:	67bb      	str	r3, [r7, #120]	; 0x78
    2330:	2300      	movs	r3, #0
    2332:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    2334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    2336:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    2338:	b29a      	uxth	r2, r3
    233a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    233c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    233e:	2300      	movs	r3, #0
}
    2340:	0018      	movs	r0, r3
    2342:	46bd      	mov	sp, r7
    2344:	b021      	add	sp, #132	; 0x84
    2346:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2348:	00008fb1 	.word	0x00008fb1
    234c:	00002033 	.word	0x00002033

00002350 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2350:	b580      	push	{r7, lr}
    2352:	b084      	sub	sp, #16
    2354:	af00      	add	r7, sp, #0
    2356:	0002      	movs	r2, r0
    2358:	1dfb      	adds	r3, r7, #7
    235a:	701a      	strb	r2, [r3, #0]
    235c:	1dbb      	adds	r3, r7, #6
    235e:	1c0a      	adds	r2, r1, #0
    2360:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2362:	4b1a      	ldr	r3, [pc, #104]	; (23cc <sercom_set_gclk_generator+0x7c>)
    2364:	781b      	ldrb	r3, [r3, #0]
    2366:	2201      	movs	r2, #1
    2368:	4053      	eors	r3, r2
    236a:	b2db      	uxtb	r3, r3
    236c:	2b00      	cmp	r3, #0
    236e:	d103      	bne.n	2378 <sercom_set_gclk_generator+0x28>
    2370:	1dbb      	adds	r3, r7, #6
    2372:	781b      	ldrb	r3, [r3, #0]
    2374:	2b00      	cmp	r3, #0
    2376:	d01b      	beq.n	23b0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2378:	230c      	movs	r3, #12
    237a:	18fb      	adds	r3, r7, r3
    237c:	0018      	movs	r0, r3
    237e:	4b14      	ldr	r3, [pc, #80]	; (23d0 <sercom_set_gclk_generator+0x80>)
    2380:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    2382:	230c      	movs	r3, #12
    2384:	18fb      	adds	r3, r7, r3
    2386:	1dfa      	adds	r2, r7, #7
    2388:	7812      	ldrb	r2, [r2, #0]
    238a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    238c:	230c      	movs	r3, #12
    238e:	18fb      	adds	r3, r7, r3
    2390:	0019      	movs	r1, r3
    2392:	2013      	movs	r0, #19
    2394:	4b0f      	ldr	r3, [pc, #60]	; (23d4 <sercom_set_gclk_generator+0x84>)
    2396:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2398:	2013      	movs	r0, #19
    239a:	4b0f      	ldr	r3, [pc, #60]	; (23d8 <sercom_set_gclk_generator+0x88>)
    239c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    239e:	4b0b      	ldr	r3, [pc, #44]	; (23cc <sercom_set_gclk_generator+0x7c>)
    23a0:	1dfa      	adds	r2, r7, #7
    23a2:	7812      	ldrb	r2, [r2, #0]
    23a4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    23a6:	4b09      	ldr	r3, [pc, #36]	; (23cc <sercom_set_gclk_generator+0x7c>)
    23a8:	2201      	movs	r2, #1
    23aa:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    23ac:	2300      	movs	r3, #0
    23ae:	e008      	b.n	23c2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    23b0:	4b06      	ldr	r3, [pc, #24]	; (23cc <sercom_set_gclk_generator+0x7c>)
    23b2:	785b      	ldrb	r3, [r3, #1]
    23b4:	1dfa      	adds	r2, r7, #7
    23b6:	7812      	ldrb	r2, [r2, #0]
    23b8:	429a      	cmp	r2, r3
    23ba:	d101      	bne.n	23c0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    23bc:	2300      	movs	r3, #0
    23be:	e000      	b.n	23c2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    23c0:	231d      	movs	r3, #29
}
    23c2:	0018      	movs	r0, r3
    23c4:	46bd      	mov	sp, r7
    23c6:	b004      	add	sp, #16
    23c8:	bd80      	pop	{r7, pc}
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	20000244 	.word	0x20000244
    23d0:	0000201d 	.word	0x0000201d
    23d4:	000043f9 	.word	0x000043f9
    23d8:	0000443d 	.word	0x0000443d

000023dc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    23dc:	b580      	push	{r7, lr}
    23de:	b082      	sub	sp, #8
    23e0:	af00      	add	r7, sp, #0
    23e2:	6078      	str	r0, [r7, #4]
    23e4:	000a      	movs	r2, r1
    23e6:	1cfb      	adds	r3, r7, #3
    23e8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    23ea:	687b      	ldr	r3, [r7, #4]
    23ec:	4a4d      	ldr	r2, [pc, #308]	; (2524 <_sercom_get_default_pad+0x148>)
    23ee:	4293      	cmp	r3, r2
    23f0:	d03f      	beq.n	2472 <_sercom_get_default_pad+0x96>
    23f2:	4a4c      	ldr	r2, [pc, #304]	; (2524 <_sercom_get_default_pad+0x148>)
    23f4:	4293      	cmp	r3, r2
    23f6:	d806      	bhi.n	2406 <_sercom_get_default_pad+0x2a>
    23f8:	4a4b      	ldr	r2, [pc, #300]	; (2528 <_sercom_get_default_pad+0x14c>)
    23fa:	4293      	cmp	r3, r2
    23fc:	d00f      	beq.n	241e <_sercom_get_default_pad+0x42>
    23fe:	4a4b      	ldr	r2, [pc, #300]	; (252c <_sercom_get_default_pad+0x150>)
    2400:	4293      	cmp	r3, r2
    2402:	d021      	beq.n	2448 <_sercom_get_default_pad+0x6c>
    2404:	e089      	b.n	251a <_sercom_get_default_pad+0x13e>
    2406:	4a4a      	ldr	r2, [pc, #296]	; (2530 <_sercom_get_default_pad+0x154>)
    2408:	4293      	cmp	r3, r2
    240a:	d100      	bne.n	240e <_sercom_get_default_pad+0x32>
    240c:	e05b      	b.n	24c6 <_sercom_get_default_pad+0xea>
    240e:	4a49      	ldr	r2, [pc, #292]	; (2534 <_sercom_get_default_pad+0x158>)
    2410:	4293      	cmp	r3, r2
    2412:	d100      	bne.n	2416 <_sercom_get_default_pad+0x3a>
    2414:	e06c      	b.n	24f0 <_sercom_get_default_pad+0x114>
    2416:	4a48      	ldr	r2, [pc, #288]	; (2538 <_sercom_get_default_pad+0x15c>)
    2418:	4293      	cmp	r3, r2
    241a:	d03f      	beq.n	249c <_sercom_get_default_pad+0xc0>
    241c:	e07d      	b.n	251a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    241e:	1cfb      	adds	r3, r7, #3
    2420:	781b      	ldrb	r3, [r3, #0]
    2422:	2b01      	cmp	r3, #1
    2424:	d00a      	beq.n	243c <_sercom_get_default_pad+0x60>
    2426:	dc02      	bgt.n	242e <_sercom_get_default_pad+0x52>
    2428:	2b00      	cmp	r3, #0
    242a:	d005      	beq.n	2438 <_sercom_get_default_pad+0x5c>
    242c:	e075      	b.n	251a <_sercom_get_default_pad+0x13e>
    242e:	2b02      	cmp	r3, #2
    2430:	d006      	beq.n	2440 <_sercom_get_default_pad+0x64>
    2432:	2b03      	cmp	r3, #3
    2434:	d006      	beq.n	2444 <_sercom_get_default_pad+0x68>
    2436:	e070      	b.n	251a <_sercom_get_default_pad+0x13e>
    2438:	4b40      	ldr	r3, [pc, #256]	; (253c <_sercom_get_default_pad+0x160>)
    243a:	e06f      	b.n	251c <_sercom_get_default_pad+0x140>
    243c:	4b40      	ldr	r3, [pc, #256]	; (2540 <_sercom_get_default_pad+0x164>)
    243e:	e06d      	b.n	251c <_sercom_get_default_pad+0x140>
    2440:	4b40      	ldr	r3, [pc, #256]	; (2544 <_sercom_get_default_pad+0x168>)
    2442:	e06b      	b.n	251c <_sercom_get_default_pad+0x140>
    2444:	4b40      	ldr	r3, [pc, #256]	; (2548 <_sercom_get_default_pad+0x16c>)
    2446:	e069      	b.n	251c <_sercom_get_default_pad+0x140>
    2448:	1cfb      	adds	r3, r7, #3
    244a:	781b      	ldrb	r3, [r3, #0]
    244c:	2b01      	cmp	r3, #1
    244e:	d00a      	beq.n	2466 <_sercom_get_default_pad+0x8a>
    2450:	dc02      	bgt.n	2458 <_sercom_get_default_pad+0x7c>
    2452:	2b00      	cmp	r3, #0
    2454:	d005      	beq.n	2462 <_sercom_get_default_pad+0x86>
    2456:	e060      	b.n	251a <_sercom_get_default_pad+0x13e>
    2458:	2b02      	cmp	r3, #2
    245a:	d006      	beq.n	246a <_sercom_get_default_pad+0x8e>
    245c:	2b03      	cmp	r3, #3
    245e:	d006      	beq.n	246e <_sercom_get_default_pad+0x92>
    2460:	e05b      	b.n	251a <_sercom_get_default_pad+0x13e>
    2462:	2303      	movs	r3, #3
    2464:	e05a      	b.n	251c <_sercom_get_default_pad+0x140>
    2466:	4b39      	ldr	r3, [pc, #228]	; (254c <_sercom_get_default_pad+0x170>)
    2468:	e058      	b.n	251c <_sercom_get_default_pad+0x140>
    246a:	4b39      	ldr	r3, [pc, #228]	; (2550 <_sercom_get_default_pad+0x174>)
    246c:	e056      	b.n	251c <_sercom_get_default_pad+0x140>
    246e:	4b39      	ldr	r3, [pc, #228]	; (2554 <_sercom_get_default_pad+0x178>)
    2470:	e054      	b.n	251c <_sercom_get_default_pad+0x140>
    2472:	1cfb      	adds	r3, r7, #3
    2474:	781b      	ldrb	r3, [r3, #0]
    2476:	2b01      	cmp	r3, #1
    2478:	d00a      	beq.n	2490 <_sercom_get_default_pad+0xb4>
    247a:	dc02      	bgt.n	2482 <_sercom_get_default_pad+0xa6>
    247c:	2b00      	cmp	r3, #0
    247e:	d005      	beq.n	248c <_sercom_get_default_pad+0xb0>
    2480:	e04b      	b.n	251a <_sercom_get_default_pad+0x13e>
    2482:	2b02      	cmp	r3, #2
    2484:	d006      	beq.n	2494 <_sercom_get_default_pad+0xb8>
    2486:	2b03      	cmp	r3, #3
    2488:	d006      	beq.n	2498 <_sercom_get_default_pad+0xbc>
    248a:	e046      	b.n	251a <_sercom_get_default_pad+0x13e>
    248c:	4b32      	ldr	r3, [pc, #200]	; (2558 <_sercom_get_default_pad+0x17c>)
    248e:	e045      	b.n	251c <_sercom_get_default_pad+0x140>
    2490:	4b32      	ldr	r3, [pc, #200]	; (255c <_sercom_get_default_pad+0x180>)
    2492:	e043      	b.n	251c <_sercom_get_default_pad+0x140>
    2494:	4b32      	ldr	r3, [pc, #200]	; (2560 <_sercom_get_default_pad+0x184>)
    2496:	e041      	b.n	251c <_sercom_get_default_pad+0x140>
    2498:	4b32      	ldr	r3, [pc, #200]	; (2564 <_sercom_get_default_pad+0x188>)
    249a:	e03f      	b.n	251c <_sercom_get_default_pad+0x140>
    249c:	1cfb      	adds	r3, r7, #3
    249e:	781b      	ldrb	r3, [r3, #0]
    24a0:	2b01      	cmp	r3, #1
    24a2:	d00a      	beq.n	24ba <_sercom_get_default_pad+0xde>
    24a4:	dc02      	bgt.n	24ac <_sercom_get_default_pad+0xd0>
    24a6:	2b00      	cmp	r3, #0
    24a8:	d005      	beq.n	24b6 <_sercom_get_default_pad+0xda>
    24aa:	e036      	b.n	251a <_sercom_get_default_pad+0x13e>
    24ac:	2b02      	cmp	r3, #2
    24ae:	d006      	beq.n	24be <_sercom_get_default_pad+0xe2>
    24b0:	2b03      	cmp	r3, #3
    24b2:	d006      	beq.n	24c2 <_sercom_get_default_pad+0xe6>
    24b4:	e031      	b.n	251a <_sercom_get_default_pad+0x13e>
    24b6:	4b2c      	ldr	r3, [pc, #176]	; (2568 <_sercom_get_default_pad+0x18c>)
    24b8:	e030      	b.n	251c <_sercom_get_default_pad+0x140>
    24ba:	4b2c      	ldr	r3, [pc, #176]	; (256c <_sercom_get_default_pad+0x190>)
    24bc:	e02e      	b.n	251c <_sercom_get_default_pad+0x140>
    24be:	4b2c      	ldr	r3, [pc, #176]	; (2570 <_sercom_get_default_pad+0x194>)
    24c0:	e02c      	b.n	251c <_sercom_get_default_pad+0x140>
    24c2:	4b2c      	ldr	r3, [pc, #176]	; (2574 <_sercom_get_default_pad+0x198>)
    24c4:	e02a      	b.n	251c <_sercom_get_default_pad+0x140>
    24c6:	1cfb      	adds	r3, r7, #3
    24c8:	781b      	ldrb	r3, [r3, #0]
    24ca:	2b01      	cmp	r3, #1
    24cc:	d00a      	beq.n	24e4 <_sercom_get_default_pad+0x108>
    24ce:	dc02      	bgt.n	24d6 <_sercom_get_default_pad+0xfa>
    24d0:	2b00      	cmp	r3, #0
    24d2:	d005      	beq.n	24e0 <_sercom_get_default_pad+0x104>
    24d4:	e021      	b.n	251a <_sercom_get_default_pad+0x13e>
    24d6:	2b02      	cmp	r3, #2
    24d8:	d006      	beq.n	24e8 <_sercom_get_default_pad+0x10c>
    24da:	2b03      	cmp	r3, #3
    24dc:	d006      	beq.n	24ec <_sercom_get_default_pad+0x110>
    24de:	e01c      	b.n	251a <_sercom_get_default_pad+0x13e>
    24e0:	4b25      	ldr	r3, [pc, #148]	; (2578 <_sercom_get_default_pad+0x19c>)
    24e2:	e01b      	b.n	251c <_sercom_get_default_pad+0x140>
    24e4:	4b25      	ldr	r3, [pc, #148]	; (257c <_sercom_get_default_pad+0x1a0>)
    24e6:	e019      	b.n	251c <_sercom_get_default_pad+0x140>
    24e8:	4b25      	ldr	r3, [pc, #148]	; (2580 <_sercom_get_default_pad+0x1a4>)
    24ea:	e017      	b.n	251c <_sercom_get_default_pad+0x140>
    24ec:	4b25      	ldr	r3, [pc, #148]	; (2584 <_sercom_get_default_pad+0x1a8>)
    24ee:	e015      	b.n	251c <_sercom_get_default_pad+0x140>
    24f0:	1cfb      	adds	r3, r7, #3
    24f2:	781b      	ldrb	r3, [r3, #0]
    24f4:	2b01      	cmp	r3, #1
    24f6:	d00a      	beq.n	250e <_sercom_get_default_pad+0x132>
    24f8:	dc02      	bgt.n	2500 <_sercom_get_default_pad+0x124>
    24fa:	2b00      	cmp	r3, #0
    24fc:	d005      	beq.n	250a <_sercom_get_default_pad+0x12e>
    24fe:	e00c      	b.n	251a <_sercom_get_default_pad+0x13e>
    2500:	2b02      	cmp	r3, #2
    2502:	d006      	beq.n	2512 <_sercom_get_default_pad+0x136>
    2504:	2b03      	cmp	r3, #3
    2506:	d006      	beq.n	2516 <_sercom_get_default_pad+0x13a>
    2508:	e007      	b.n	251a <_sercom_get_default_pad+0x13e>
    250a:	4b1f      	ldr	r3, [pc, #124]	; (2588 <_sercom_get_default_pad+0x1ac>)
    250c:	e006      	b.n	251c <_sercom_get_default_pad+0x140>
    250e:	4b1f      	ldr	r3, [pc, #124]	; (258c <_sercom_get_default_pad+0x1b0>)
    2510:	e004      	b.n	251c <_sercom_get_default_pad+0x140>
    2512:	4b1f      	ldr	r3, [pc, #124]	; (2590 <_sercom_get_default_pad+0x1b4>)
    2514:	e002      	b.n	251c <_sercom_get_default_pad+0x140>
    2516:	4b1f      	ldr	r3, [pc, #124]	; (2594 <_sercom_get_default_pad+0x1b8>)
    2518:	e000      	b.n	251c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    251a:	2300      	movs	r3, #0
}
    251c:	0018      	movs	r0, r3
    251e:	46bd      	mov	sp, r7
    2520:	b002      	add	sp, #8
    2522:	bd80      	pop	{r7, pc}
    2524:	42001000 	.word	0x42001000
    2528:	42000800 	.word	0x42000800
    252c:	42000c00 	.word	0x42000c00
    2530:	42001800 	.word	0x42001800
    2534:	42001c00 	.word	0x42001c00
    2538:	42001400 	.word	0x42001400
    253c:	00040003 	.word	0x00040003
    2540:	00050003 	.word	0x00050003
    2544:	00060003 	.word	0x00060003
    2548:	00070003 	.word	0x00070003
    254c:	00010003 	.word	0x00010003
    2550:	001e0003 	.word	0x001e0003
    2554:	001f0003 	.word	0x001f0003
    2558:	00080003 	.word	0x00080003
    255c:	00090003 	.word	0x00090003
    2560:	000a0003 	.word	0x000a0003
    2564:	000b0003 	.word	0x000b0003
    2568:	00100003 	.word	0x00100003
    256c:	00110003 	.word	0x00110003
    2570:	00120003 	.word	0x00120003
    2574:	00130003 	.word	0x00130003
    2578:	000c0003 	.word	0x000c0003
    257c:	000d0003 	.word	0x000d0003
    2580:	000e0003 	.word	0x000e0003
    2584:	000f0003 	.word	0x000f0003
    2588:	00160003 	.word	0x00160003
    258c:	00170003 	.word	0x00170003
    2590:	00180003 	.word	0x00180003
    2594:	00190003 	.word	0x00190003

00002598 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2598:	b590      	push	{r4, r7, lr}
    259a:	b08b      	sub	sp, #44	; 0x2c
    259c:	af00      	add	r7, sp, #0
    259e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    25a0:	230c      	movs	r3, #12
    25a2:	18fb      	adds	r3, r7, r3
    25a4:	4a0f      	ldr	r2, [pc, #60]	; (25e4 <_sercom_get_sercom_inst_index+0x4c>)
    25a6:	ca13      	ldmia	r2!, {r0, r1, r4}
    25a8:	c313      	stmia	r3!, {r0, r1, r4}
    25aa:	ca13      	ldmia	r2!, {r0, r1, r4}
    25ac:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    25ae:	2300      	movs	r3, #0
    25b0:	627b      	str	r3, [r7, #36]	; 0x24
    25b2:	e00e      	b.n	25d2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    25b4:	230c      	movs	r3, #12
    25b6:	18fb      	adds	r3, r7, r3
    25b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    25ba:	0092      	lsls	r2, r2, #2
    25bc:	58d3      	ldr	r3, [r2, r3]
    25be:	001a      	movs	r2, r3
    25c0:	687b      	ldr	r3, [r7, #4]
    25c2:	429a      	cmp	r2, r3
    25c4:	d102      	bne.n	25cc <_sercom_get_sercom_inst_index+0x34>
			return i;
    25c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25c8:	b2db      	uxtb	r3, r3
    25ca:	e006      	b.n	25da <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    25cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25ce:	3301      	adds	r3, #1
    25d0:	627b      	str	r3, [r7, #36]	; 0x24
    25d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25d4:	2b05      	cmp	r3, #5
    25d6:	d9ed      	bls.n	25b4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    25d8:	2300      	movs	r3, #0
}
    25da:	0018      	movs	r0, r3
    25dc:	46bd      	mov	sp, r7
    25de:	b00b      	add	sp, #44	; 0x2c
    25e0:	bd90      	pop	{r4, r7, pc}
    25e2:	46c0      	nop			; (mov r8, r8)
    25e4:	0000ae6c 	.word	0x0000ae6c

000025e8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    25e8:	b580      	push	{r7, lr}
    25ea:	b086      	sub	sp, #24
    25ec:	af00      	add	r7, sp, #0
    25ee:	60f8      	str	r0, [r7, #12]
    25f0:	60b9      	str	r1, [r7, #8]
    25f2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    25f4:	2300      	movs	r3, #0
    25f6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    25f8:	68fb      	ldr	r3, [r7, #12]
    25fa:	2b00      	cmp	r3, #0
    25fc:	d012      	beq.n	2624 <_read+0x3c>
		return -1;
    25fe:	2301      	movs	r3, #1
    2600:	425b      	negs	r3, r3
    2602:	e013      	b.n	262c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    2604:	4b0b      	ldr	r3, [pc, #44]	; (2634 <_read+0x4c>)
    2606:	681a      	ldr	r2, [r3, #0]
    2608:	4b0b      	ldr	r3, [pc, #44]	; (2638 <_read+0x50>)
    260a:	681b      	ldr	r3, [r3, #0]
    260c:	68b9      	ldr	r1, [r7, #8]
    260e:	0018      	movs	r0, r3
    2610:	4790      	blx	r2
		ptr++;
    2612:	68bb      	ldr	r3, [r7, #8]
    2614:	3301      	adds	r3, #1
    2616:	60bb      	str	r3, [r7, #8]
		nChars++;
    2618:	697b      	ldr	r3, [r7, #20]
    261a:	3301      	adds	r3, #1
    261c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    261e:	687b      	ldr	r3, [r7, #4]
    2620:	3b01      	subs	r3, #1
    2622:	607b      	str	r3, [r7, #4]
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	2b00      	cmp	r3, #0
    2628:	dcec      	bgt.n	2604 <_read+0x1c>
	}
	return nChars;
    262a:	697b      	ldr	r3, [r7, #20]
}
    262c:	0018      	movs	r0, r3
    262e:	46bd      	mov	sp, r7
    2630:	b006      	add	sp, #24
    2632:	bd80      	pop	{r7, pc}
    2634:	200002f8 	.word	0x200002f8
    2638:	20000300 	.word	0x20000300

0000263c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    263c:	b580      	push	{r7, lr}
    263e:	b086      	sub	sp, #24
    2640:	af00      	add	r7, sp, #0
    2642:	60f8      	str	r0, [r7, #12]
    2644:	60b9      	str	r1, [r7, #8]
    2646:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    2648:	2300      	movs	r3, #0
    264a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    264c:	68fb      	ldr	r3, [r7, #12]
    264e:	2b01      	cmp	r3, #1
    2650:	d01d      	beq.n	268e <_write+0x52>
    2652:	68fb      	ldr	r3, [r7, #12]
    2654:	2b02      	cmp	r3, #2
    2656:	d01a      	beq.n	268e <_write+0x52>
    2658:	68fb      	ldr	r3, [r7, #12]
    265a:	2b03      	cmp	r3, #3
    265c:	d017      	beq.n	268e <_write+0x52>
		return -1;
    265e:	2301      	movs	r3, #1
    2660:	425b      	negs	r3, r3
    2662:	e018      	b.n	2696 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2664:	4b0e      	ldr	r3, [pc, #56]	; (26a0 <_write+0x64>)
    2666:	681a      	ldr	r2, [r3, #0]
    2668:	4b0e      	ldr	r3, [pc, #56]	; (26a4 <_write+0x68>)
    266a:	6818      	ldr	r0, [r3, #0]
    266c:	68bb      	ldr	r3, [r7, #8]
    266e:	1c59      	adds	r1, r3, #1
    2670:	60b9      	str	r1, [r7, #8]
    2672:	781b      	ldrb	r3, [r3, #0]
    2674:	0019      	movs	r1, r3
    2676:	4790      	blx	r2
    2678:	1e03      	subs	r3, r0, #0
    267a:	da02      	bge.n	2682 <_write+0x46>
			return -1;
    267c:	2301      	movs	r3, #1
    267e:	425b      	negs	r3, r3
    2680:	e009      	b.n	2696 <_write+0x5a>
		}
		++nChars;
    2682:	697b      	ldr	r3, [r7, #20]
    2684:	3301      	adds	r3, #1
    2686:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    2688:	687b      	ldr	r3, [r7, #4]
    268a:	3b01      	subs	r3, #1
    268c:	607b      	str	r3, [r7, #4]
    268e:	687b      	ldr	r3, [r7, #4]
    2690:	2b00      	cmp	r3, #0
    2692:	d1e7      	bne.n	2664 <_write+0x28>
	}
	return nChars;
    2694:	697b      	ldr	r3, [r7, #20]
}
    2696:	0018      	movs	r0, r3
    2698:	46bd      	mov	sp, r7
    269a:	b006      	add	sp, #24
    269c:	bd80      	pop	{r7, pc}
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	200002fc 	.word	0x200002fc
    26a4:	20000300 	.word	0x20000300

000026a8 <system_gclk_chan_get_config_defaults>:
{
    26a8:	b580      	push	{r7, lr}
    26aa:	b082      	sub	sp, #8
    26ac:	af00      	add	r7, sp, #0
    26ae:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    26b0:	687b      	ldr	r3, [r7, #4]
    26b2:	2200      	movs	r2, #0
    26b4:	701a      	strb	r2, [r3, #0]
}
    26b6:	46c0      	nop			; (mov r8, r8)
    26b8:	46bd      	mov	sp, r7
    26ba:	b002      	add	sp, #8
    26bc:	bd80      	pop	{r7, pc}
	...

000026c0 <system_apb_clock_set_mask>:
{
    26c0:	b580      	push	{r7, lr}
    26c2:	b082      	sub	sp, #8
    26c4:	af00      	add	r7, sp, #0
    26c6:	0002      	movs	r2, r0
    26c8:	6039      	str	r1, [r7, #0]
    26ca:	1dfb      	adds	r3, r7, #7
    26cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    26ce:	1dfb      	adds	r3, r7, #7
    26d0:	781b      	ldrb	r3, [r3, #0]
    26d2:	2b01      	cmp	r3, #1
    26d4:	d00a      	beq.n	26ec <system_apb_clock_set_mask+0x2c>
    26d6:	2b02      	cmp	r3, #2
    26d8:	d00f      	beq.n	26fa <system_apb_clock_set_mask+0x3a>
    26da:	2b00      	cmp	r3, #0
    26dc:	d114      	bne.n	2708 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    26de:	4b0e      	ldr	r3, [pc, #56]	; (2718 <system_apb_clock_set_mask+0x58>)
    26e0:	4a0d      	ldr	r2, [pc, #52]	; (2718 <system_apb_clock_set_mask+0x58>)
    26e2:	6991      	ldr	r1, [r2, #24]
    26e4:	683a      	ldr	r2, [r7, #0]
    26e6:	430a      	orrs	r2, r1
    26e8:	619a      	str	r2, [r3, #24]
			break;
    26ea:	e00f      	b.n	270c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    26ec:	4b0a      	ldr	r3, [pc, #40]	; (2718 <system_apb_clock_set_mask+0x58>)
    26ee:	4a0a      	ldr	r2, [pc, #40]	; (2718 <system_apb_clock_set_mask+0x58>)
    26f0:	69d1      	ldr	r1, [r2, #28]
    26f2:	683a      	ldr	r2, [r7, #0]
    26f4:	430a      	orrs	r2, r1
    26f6:	61da      	str	r2, [r3, #28]
			break;
    26f8:	e008      	b.n	270c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    26fa:	4b07      	ldr	r3, [pc, #28]	; (2718 <system_apb_clock_set_mask+0x58>)
    26fc:	4a06      	ldr	r2, [pc, #24]	; (2718 <system_apb_clock_set_mask+0x58>)
    26fe:	6a11      	ldr	r1, [r2, #32]
    2700:	683a      	ldr	r2, [r7, #0]
    2702:	430a      	orrs	r2, r1
    2704:	621a      	str	r2, [r3, #32]
			break;
    2706:	e001      	b.n	270c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2708:	2317      	movs	r3, #23
    270a:	e000      	b.n	270e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    270c:	2300      	movs	r3, #0
}
    270e:	0018      	movs	r0, r3
    2710:	46bd      	mov	sp, r7
    2712:	b002      	add	sp, #8
    2714:	bd80      	pop	{r7, pc}
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	40000400 	.word	0x40000400

0000271c <system_pinmux_get_config_defaults>:
{
    271c:	b580      	push	{r7, lr}
    271e:	b082      	sub	sp, #8
    2720:	af00      	add	r7, sp, #0
    2722:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	2280      	movs	r2, #128	; 0x80
    2728:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    272a:	687b      	ldr	r3, [r7, #4]
    272c:	2200      	movs	r2, #0
    272e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2730:	687b      	ldr	r3, [r7, #4]
    2732:	2201      	movs	r2, #1
    2734:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2736:	687b      	ldr	r3, [r7, #4]
    2738:	2200      	movs	r2, #0
    273a:	70da      	strb	r2, [r3, #3]
}
    273c:	46c0      	nop			; (mov r8, r8)
    273e:	46bd      	mov	sp, r7
    2740:	b002      	add	sp, #8
    2742:	bd80      	pop	{r7, pc}

00002744 <system_is_debugger_present>:
{
    2744:	b580      	push	{r7, lr}
    2746:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2748:	4b05      	ldr	r3, [pc, #20]	; (2760 <system_is_debugger_present+0x1c>)
    274a:	789b      	ldrb	r3, [r3, #2]
    274c:	b2db      	uxtb	r3, r3
    274e:	001a      	movs	r2, r3
    2750:	2302      	movs	r3, #2
    2752:	4013      	ands	r3, r2
    2754:	1e5a      	subs	r2, r3, #1
    2756:	4193      	sbcs	r3, r2
    2758:	b2db      	uxtb	r3, r3
}
    275a:	0018      	movs	r0, r3
    275c:	46bd      	mov	sp, r7
    275e:	bd80      	pop	{r7, pc}
    2760:	41002000 	.word	0x41002000

00002764 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    2764:	b580      	push	{r7, lr}
    2766:	b084      	sub	sp, #16
    2768:	af00      	add	r7, sp, #0
    276a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    276c:	687b      	ldr	r3, [r7, #4]
    276e:	681b      	ldr	r3, [r3, #0]
    2770:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2772:	68fb      	ldr	r3, [r7, #12]
    2774:	69db      	ldr	r3, [r3, #28]
    2776:	1e5a      	subs	r2, r3, #1
    2778:	4193      	sbcs	r3, r2
    277a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    277c:	0018      	movs	r0, r3
    277e:	46bd      	mov	sp, r7
    2780:	b004      	add	sp, #16
    2782:	bd80      	pop	{r7, pc}

00002784 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    2784:	b580      	push	{r7, lr}
    2786:	b082      	sub	sp, #8
    2788:	af00      	add	r7, sp, #0
    278a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    278c:	46c0      	nop			; (mov r8, r8)
    278e:	687b      	ldr	r3, [r7, #4]
    2790:	0018      	movs	r0, r3
    2792:	4b04      	ldr	r3, [pc, #16]	; (27a4 <_usart_wait_for_sync+0x20>)
    2794:	4798      	blx	r3
    2796:	1e03      	subs	r3, r0, #0
    2798:	d1f9      	bne.n	278e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    279a:	46c0      	nop			; (mov r8, r8)
    279c:	46bd      	mov	sp, r7
    279e:	b002      	add	sp, #8
    27a0:	bd80      	pop	{r7, pc}
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	00002765 	.word	0x00002765

000027a8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    27a8:	b5b0      	push	{r4, r5, r7, lr}
    27aa:	b08c      	sub	sp, #48	; 0x30
    27ac:	af02      	add	r7, sp, #8
    27ae:	6078      	str	r0, [r7, #4]
    27b0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	681b      	ldr	r3, [r3, #0]
    27b6:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    27b8:	687b      	ldr	r3, [r7, #4]
    27ba:	681b      	ldr	r3, [r3, #0]
    27bc:	0018      	movs	r0, r3
    27be:	4bab      	ldr	r3, [pc, #684]	; (2a6c <_usart_set_config+0x2c4>)
    27c0:	4798      	blx	r3
    27c2:	0003      	movs	r3, r0
    27c4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    27c6:	697b      	ldr	r3, [r7, #20]
    27c8:	3314      	adds	r3, #20
    27ca:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    27cc:	2300      	movs	r3, #0
    27ce:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    27d0:	2300      	movs	r3, #0
    27d2:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    27d4:	230a      	movs	r3, #10
    27d6:	18fb      	adds	r3, r7, r3
    27d8:	2200      	movs	r2, #0
    27da:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    27dc:	231f      	movs	r3, #31
    27de:	18fb      	adds	r3, r7, r3
    27e0:	2200      	movs	r2, #0
    27e2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    27e4:	231e      	movs	r3, #30
    27e6:	18fb      	adds	r3, r7, r3
    27e8:	2210      	movs	r2, #16
    27ea:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    27ec:	683b      	ldr	r3, [r7, #0]
    27ee:	8a1b      	ldrh	r3, [r3, #16]
    27f0:	2280      	movs	r2, #128	; 0x80
    27f2:	01d2      	lsls	r2, r2, #7
    27f4:	4293      	cmp	r3, r2
    27f6:	d01c      	beq.n	2832 <_usart_set_config+0x8a>
    27f8:	2280      	movs	r2, #128	; 0x80
    27fa:	01d2      	lsls	r2, r2, #7
    27fc:	4293      	cmp	r3, r2
    27fe:	dc06      	bgt.n	280e <_usart_set_config+0x66>
    2800:	2b00      	cmp	r3, #0
    2802:	d00d      	beq.n	2820 <_usart_set_config+0x78>
    2804:	2280      	movs	r2, #128	; 0x80
    2806:	0192      	lsls	r2, r2, #6
    2808:	4293      	cmp	r3, r2
    280a:	d024      	beq.n	2856 <_usart_set_config+0xae>
    280c:	e035      	b.n	287a <_usart_set_config+0xd2>
    280e:	22c0      	movs	r2, #192	; 0xc0
    2810:	01d2      	lsls	r2, r2, #7
    2812:	4293      	cmp	r3, r2
    2814:	d028      	beq.n	2868 <_usart_set_config+0xc0>
    2816:	2280      	movs	r2, #128	; 0x80
    2818:	0212      	lsls	r2, r2, #8
    281a:	4293      	cmp	r3, r2
    281c:	d012      	beq.n	2844 <_usart_set_config+0x9c>
    281e:	e02c      	b.n	287a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2820:	231f      	movs	r3, #31
    2822:	18fb      	adds	r3, r7, r3
    2824:	2200      	movs	r2, #0
    2826:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2828:	231e      	movs	r3, #30
    282a:	18fb      	adds	r3, r7, r3
    282c:	2210      	movs	r2, #16
    282e:	701a      	strb	r2, [r3, #0]
			break;
    2830:	e023      	b.n	287a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2832:	231f      	movs	r3, #31
    2834:	18fb      	adds	r3, r7, r3
    2836:	2200      	movs	r2, #0
    2838:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    283a:	231e      	movs	r3, #30
    283c:	18fb      	adds	r3, r7, r3
    283e:	2208      	movs	r2, #8
    2840:	701a      	strb	r2, [r3, #0]
			break;
    2842:	e01a      	b.n	287a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2844:	231f      	movs	r3, #31
    2846:	18fb      	adds	r3, r7, r3
    2848:	2200      	movs	r2, #0
    284a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    284c:	231e      	movs	r3, #30
    284e:	18fb      	adds	r3, r7, r3
    2850:	2203      	movs	r2, #3
    2852:	701a      	strb	r2, [r3, #0]
			break;
    2854:	e011      	b.n	287a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2856:	231f      	movs	r3, #31
    2858:	18fb      	adds	r3, r7, r3
    285a:	2201      	movs	r2, #1
    285c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    285e:	231e      	movs	r3, #30
    2860:	18fb      	adds	r3, r7, r3
    2862:	2210      	movs	r2, #16
    2864:	701a      	strb	r2, [r3, #0]
			break;
    2866:	e008      	b.n	287a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2868:	231f      	movs	r3, #31
    286a:	18fb      	adds	r3, r7, r3
    286c:	2201      	movs	r2, #1
    286e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2870:	231e      	movs	r3, #30
    2872:	18fb      	adds	r3, r7, r3
    2874:	2208      	movs	r2, #8
    2876:	701a      	strb	r2, [r3, #0]
			break;
    2878:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    287a:	683b      	ldr	r3, [r7, #0]
    287c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    287e:	683b      	ldr	r3, [r7, #0]
    2880:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    2882:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    2884:	683b      	ldr	r3, [r7, #0]
    2886:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    2888:	4313      	orrs	r3, r2
		config->sample_rate |
    288a:	683a      	ldr	r2, [r7, #0]
    288c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    288e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2890:	683a      	ldr	r2, [r7, #0]
    2892:	7e12      	ldrb	r2, [r2, #24]
    2894:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    2896:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2898:	683a      	ldr	r2, [r7, #0]
    289a:	2126      	movs	r1, #38	; 0x26
    289c:	5c52      	ldrb	r2, [r2, r1]
    289e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    28a0:	4313      	orrs	r3, r2
    28a2:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    28a4:	231d      	movs	r3, #29
    28a6:	18fb      	adds	r3, r7, r3
    28a8:	2200      	movs	r2, #0
    28aa:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    28ac:	683b      	ldr	r3, [r7, #0]
    28ae:	685b      	ldr	r3, [r3, #4]
    28b0:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    28b2:	68fb      	ldr	r3, [r7, #12]
    28b4:	2b00      	cmp	r3, #0
    28b6:	d01e      	beq.n	28f6 <_usart_set_config+0x14e>
    28b8:	2280      	movs	r2, #128	; 0x80
    28ba:	0552      	lsls	r2, r2, #21
    28bc:	4293      	cmp	r3, r2
    28be:	d14f      	bne.n	2960 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    28c0:	683b      	ldr	r3, [r7, #0]
    28c2:	2227      	movs	r2, #39	; 0x27
    28c4:	5c9b      	ldrb	r3, [r3, r2]
    28c6:	2201      	movs	r2, #1
    28c8:	4053      	eors	r3, r2
    28ca:	b2db      	uxtb	r3, r3
    28cc:	2b00      	cmp	r3, #0
    28ce:	d046      	beq.n	295e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    28d0:	683b      	ldr	r3, [r7, #0]
    28d2:	6a1d      	ldr	r5, [r3, #32]
    28d4:	693b      	ldr	r3, [r7, #16]
    28d6:	b2db      	uxtb	r3, r3
    28d8:	0018      	movs	r0, r3
    28da:	4b65      	ldr	r3, [pc, #404]	; (2a70 <_usart_set_config+0x2c8>)
    28dc:	4798      	blx	r3
    28de:	0001      	movs	r1, r0
    28e0:	231d      	movs	r3, #29
    28e2:	18fc      	adds	r4, r7, r3
    28e4:	230a      	movs	r3, #10
    28e6:	18fb      	adds	r3, r7, r3
    28e8:	001a      	movs	r2, r3
    28ea:	0028      	movs	r0, r5
    28ec:	4b61      	ldr	r3, [pc, #388]	; (2a74 <_usart_set_config+0x2cc>)
    28ee:	4798      	blx	r3
    28f0:	0003      	movs	r3, r0
    28f2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    28f4:	e033      	b.n	295e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    28f6:	683b      	ldr	r3, [r7, #0]
    28f8:	2227      	movs	r2, #39	; 0x27
    28fa:	5c9b      	ldrb	r3, [r3, r2]
    28fc:	2b00      	cmp	r3, #0
    28fe:	d014      	beq.n	292a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    2900:	683b      	ldr	r3, [r7, #0]
    2902:	6a18      	ldr	r0, [r3, #32]
    2904:	683b      	ldr	r3, [r7, #0]
    2906:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    2908:	231d      	movs	r3, #29
    290a:	18fc      	adds	r4, r7, r3
    290c:	231f      	movs	r3, #31
    290e:	18fb      	adds	r3, r7, r3
    2910:	781d      	ldrb	r5, [r3, #0]
    2912:	230a      	movs	r3, #10
    2914:	18fa      	adds	r2, r7, r3
    2916:	231e      	movs	r3, #30
    2918:	18fb      	adds	r3, r7, r3
    291a:	781b      	ldrb	r3, [r3, #0]
    291c:	9300      	str	r3, [sp, #0]
    291e:	002b      	movs	r3, r5
    2920:	4d55      	ldr	r5, [pc, #340]	; (2a78 <_usart_set_config+0x2d0>)
    2922:	47a8      	blx	r5
    2924:	0003      	movs	r3, r0
    2926:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    2928:	e01a      	b.n	2960 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    292a:	683b      	ldr	r3, [r7, #0]
    292c:	6a1d      	ldr	r5, [r3, #32]
    292e:	693b      	ldr	r3, [r7, #16]
    2930:	b2db      	uxtb	r3, r3
    2932:	0018      	movs	r0, r3
    2934:	4b4e      	ldr	r3, [pc, #312]	; (2a70 <_usart_set_config+0x2c8>)
    2936:	4798      	blx	r3
				status_code =
    2938:	231d      	movs	r3, #29
    293a:	18fc      	adds	r4, r7, r3
    293c:	231f      	movs	r3, #31
    293e:	18fb      	adds	r3, r7, r3
    2940:	7819      	ldrb	r1, [r3, #0]
    2942:	230a      	movs	r3, #10
    2944:	18fa      	adds	r2, r7, r3
    2946:	231e      	movs	r3, #30
    2948:	18fb      	adds	r3, r7, r3
    294a:	781b      	ldrb	r3, [r3, #0]
    294c:	9300      	str	r3, [sp, #0]
    294e:	000b      	movs	r3, r1
    2950:	0001      	movs	r1, r0
    2952:	0028      	movs	r0, r5
    2954:	4d48      	ldr	r5, [pc, #288]	; (2a78 <_usart_set_config+0x2d0>)
    2956:	47a8      	blx	r5
    2958:	0003      	movs	r3, r0
    295a:	7023      	strb	r3, [r4, #0]
			break;
    295c:	e000      	b.n	2960 <_usart_set_config+0x1b8>
			break;
    295e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    2960:	231d      	movs	r3, #29
    2962:	18fb      	adds	r3, r7, r3
    2964:	781b      	ldrb	r3, [r3, #0]
    2966:	2b00      	cmp	r3, #0
    2968:	d003      	beq.n	2972 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    296a:	231d      	movs	r3, #29
    296c:	18fb      	adds	r3, r7, r3
    296e:	781b      	ldrb	r3, [r3, #0]
    2970:	e077      	b.n	2a62 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    2972:	683b      	ldr	r3, [r7, #0]
    2974:	7e5b      	ldrb	r3, [r3, #25]
    2976:	2b00      	cmp	r3, #0
    2978:	d003      	beq.n	2982 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    297a:	683b      	ldr	r3, [r7, #0]
    297c:	7e9a      	ldrb	r2, [r3, #26]
    297e:	69bb      	ldr	r3, [r7, #24]
    2980:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2982:	687b      	ldr	r3, [r7, #4]
    2984:	0018      	movs	r0, r3
    2986:	4b3d      	ldr	r3, [pc, #244]	; (2a7c <_usart_set_config+0x2d4>)
    2988:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    298a:	230a      	movs	r3, #10
    298c:	18fb      	adds	r3, r7, r3
    298e:	881a      	ldrh	r2, [r3, #0]
    2990:	69bb      	ldr	r3, [r7, #24]
    2992:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    2994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2996:	68fb      	ldr	r3, [r7, #12]
    2998:	4313      	orrs	r3, r2
    299a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    299c:	683b      	ldr	r3, [r7, #0]
    299e:	2227      	movs	r2, #39	; 0x27
    29a0:	5c9b      	ldrb	r3, [r3, r2]
    29a2:	2201      	movs	r2, #1
    29a4:	4053      	eors	r3, r2
    29a6:	b2db      	uxtb	r3, r3
    29a8:	2b00      	cmp	r3, #0
    29aa:	d003      	beq.n	29b4 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    29ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29ae:	2204      	movs	r2, #4
    29b0:	4313      	orrs	r3, r2
    29b2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    29b4:	683b      	ldr	r3, [r7, #0]
    29b6:	7e5b      	ldrb	r3, [r3, #25]
    29b8:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    29ba:	683b      	ldr	r3, [r7, #0]
    29bc:	7f1b      	ldrb	r3, [r3, #28]
    29be:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    29c0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    29c2:	683b      	ldr	r3, [r7, #0]
    29c4:	7f5b      	ldrb	r3, [r3, #29]
    29c6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    29c8:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    29ca:	683b      	ldr	r3, [r7, #0]
    29cc:	2124      	movs	r1, #36	; 0x24
    29ce:	5c5b      	ldrb	r3, [r3, r1]
    29d0:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    29d2:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    29d4:	683b      	ldr	r3, [r7, #0]
    29d6:	2125      	movs	r1, #37	; 0x25
    29d8:	5c5b      	ldrb	r3, [r3, r1]
    29da:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    29dc:	4313      	orrs	r3, r2
	ctrlb =  
    29de:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    29e0:	683b      	ldr	r3, [r7, #0]
    29e2:	7a9b      	ldrb	r3, [r3, #10]
    29e4:	001a      	movs	r2, r3
    29e6:	6a3b      	ldr	r3, [r7, #32]
    29e8:	4313      	orrs	r3, r2
    29ea:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    29ec:	683b      	ldr	r3, [r7, #0]
    29ee:	7adb      	ldrb	r3, [r3, #11]
    29f0:	001a      	movs	r2, r3
    29f2:	6a3b      	ldr	r3, [r7, #32]
    29f4:	4313      	orrs	r3, r2
    29f6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    29f8:	683b      	ldr	r3, [r7, #0]
    29fa:	891b      	ldrh	r3, [r3, #8]
    29fc:	2bff      	cmp	r3, #255	; 0xff
    29fe:	d00b      	beq.n	2a18 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a02:	2280      	movs	r2, #128	; 0x80
    2a04:	0452      	lsls	r2, r2, #17
    2a06:	4313      	orrs	r3, r2
    2a08:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    2a0a:	683b      	ldr	r3, [r7, #0]
    2a0c:	891b      	ldrh	r3, [r3, #8]
    2a0e:	001a      	movs	r2, r3
    2a10:	6a3b      	ldr	r3, [r7, #32]
    2a12:	4313      	orrs	r3, r2
    2a14:	623b      	str	r3, [r7, #32]
    2a16:	e008      	b.n	2a2a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    2a18:	683b      	ldr	r3, [r7, #0]
    2a1a:	7edb      	ldrb	r3, [r3, #27]
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d004      	beq.n	2a2a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a22:	2280      	movs	r2, #128	; 0x80
    2a24:	04d2      	lsls	r2, r2, #19
    2a26:	4313      	orrs	r3, r2
    2a28:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2a2a:	683b      	ldr	r3, [r7, #0]
    2a2c:	222c      	movs	r2, #44	; 0x2c
    2a2e:	5c9b      	ldrb	r3, [r3, r2]
    2a30:	2b00      	cmp	r3, #0
    2a32:	d103      	bne.n	2a3c <_usart_set_config+0x294>
    2a34:	4b12      	ldr	r3, [pc, #72]	; (2a80 <_usart_set_config+0x2d8>)
    2a36:	4798      	blx	r3
    2a38:	1e03      	subs	r3, r0, #0
    2a3a:	d003      	beq.n	2a44 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a3e:	2280      	movs	r2, #128	; 0x80
    2a40:	4313      	orrs	r3, r2
    2a42:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	0018      	movs	r0, r3
    2a48:	4b0c      	ldr	r3, [pc, #48]	; (2a7c <_usart_set_config+0x2d4>)
    2a4a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    2a4c:	69bb      	ldr	r3, [r7, #24]
    2a4e:	6a3a      	ldr	r2, [r7, #32]
    2a50:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	0018      	movs	r0, r3
    2a56:	4b09      	ldr	r3, [pc, #36]	; (2a7c <_usart_set_config+0x2d4>)
    2a58:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    2a5a:	69bb      	ldr	r3, [r7, #24]
    2a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2a5e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    2a60:	2300      	movs	r3, #0
}
    2a62:	0018      	movs	r0, r3
    2a64:	46bd      	mov	sp, r7
    2a66:	b00a      	add	sp, #40	; 0x28
    2a68:	bdb0      	pop	{r4, r5, r7, pc}
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	00002599 	.word	0x00002599
    2a70:	0000451d 	.word	0x0000451d
    2a74:	00002113 	.word	0x00002113
    2a78:	00002191 	.word	0x00002191
    2a7c:	00002785 	.word	0x00002785
    2a80:	00002745 	.word	0x00002745

00002a84 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2a84:	b590      	push	{r4, r7, lr}
    2a86:	b093      	sub	sp, #76	; 0x4c
    2a88:	af00      	add	r7, sp, #0
    2a8a:	60f8      	str	r0, [r7, #12]
    2a8c:	60b9      	str	r1, [r7, #8]
    2a8e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    2a90:	233b      	movs	r3, #59	; 0x3b
    2a92:	18fb      	adds	r3, r7, r3
    2a94:	2200      	movs	r2, #0
    2a96:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2a98:	68fb      	ldr	r3, [r7, #12]
    2a9a:	68ba      	ldr	r2, [r7, #8]
    2a9c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a9e:	68fb      	ldr	r3, [r7, #12]
    2aa0:	681b      	ldr	r3, [r3, #0]
    2aa2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2aa4:	68fb      	ldr	r3, [r7, #12]
    2aa6:	681b      	ldr	r3, [r3, #0]
    2aa8:	0018      	movs	r0, r3
    2aaa:	4b86      	ldr	r3, [pc, #536]	; (2cc4 <usart_init+0x240>)
    2aac:	4798      	blx	r3
    2aae:	0003      	movs	r3, r0
    2ab0:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2ab4:	3302      	adds	r3, #2
    2ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2aba:	3314      	adds	r3, #20
    2abc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ac0:	681b      	ldr	r3, [r3, #0]
    2ac2:	2201      	movs	r2, #1
    2ac4:	4013      	ands	r3, r2
    2ac6:	d001      	beq.n	2acc <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2ac8:	2305      	movs	r3, #5
    2aca:	e0f6      	b.n	2cba <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ace:	681b      	ldr	r3, [r3, #0]
    2ad0:	2202      	movs	r2, #2
    2ad2:	4013      	ands	r3, r2
    2ad4:	d001      	beq.n	2ada <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    2ad6:	231c      	movs	r3, #28
    2ad8:	e0ef      	b.n	2cba <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2ada:	2201      	movs	r2, #1
    2adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ade:	409a      	lsls	r2, r3
    2ae0:	0013      	movs	r3, r2
    2ae2:	0019      	movs	r1, r3
    2ae4:	2002      	movs	r0, #2
    2ae6:	4b78      	ldr	r3, [pc, #480]	; (2cc8 <usart_init+0x244>)
    2ae8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2aea:	2324      	movs	r3, #36	; 0x24
    2aec:	18fb      	adds	r3, r7, r3
    2aee:	0018      	movs	r0, r3
    2af0:	4b76      	ldr	r3, [pc, #472]	; (2ccc <usart_init+0x248>)
    2af2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	222d      	movs	r2, #45	; 0x2d
    2af8:	5c9a      	ldrb	r2, [r3, r2]
    2afa:	2324      	movs	r3, #36	; 0x24
    2afc:	18fb      	adds	r3, r7, r3
    2afe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b02:	b2db      	uxtb	r3, r3
    2b04:	2224      	movs	r2, #36	; 0x24
    2b06:	18ba      	adds	r2, r7, r2
    2b08:	0011      	movs	r1, r2
    2b0a:	0018      	movs	r0, r3
    2b0c:	4b70      	ldr	r3, [pc, #448]	; (2cd0 <usart_init+0x24c>)
    2b0e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2b12:	b2db      	uxtb	r3, r3
    2b14:	0018      	movs	r0, r3
    2b16:	4b6f      	ldr	r3, [pc, #444]	; (2cd4 <usart_init+0x250>)
    2b18:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	222d      	movs	r2, #45	; 0x2d
    2b1e:	5c9b      	ldrb	r3, [r3, r2]
    2b20:	2100      	movs	r1, #0
    2b22:	0018      	movs	r0, r3
    2b24:	4b6c      	ldr	r3, [pc, #432]	; (2cd8 <usart_init+0x254>)
    2b26:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    2b28:	687b      	ldr	r3, [r7, #4]
    2b2a:	7ada      	ldrb	r2, [r3, #11]
    2b2c:	68fb      	ldr	r3, [r7, #12]
    2b2e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    2b30:	687b      	ldr	r3, [r7, #4]
    2b32:	2224      	movs	r2, #36	; 0x24
    2b34:	5c9a      	ldrb	r2, [r3, r2]
    2b36:	68fb      	ldr	r3, [r7, #12]
    2b38:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2b3a:	687b      	ldr	r3, [r7, #4]
    2b3c:	2225      	movs	r2, #37	; 0x25
    2b3e:	5c9a      	ldrb	r2, [r3, r2]
    2b40:	68fb      	ldr	r3, [r7, #12]
    2b42:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    2b44:	687b      	ldr	r3, [r7, #4]
    2b46:	7eda      	ldrb	r2, [r3, #27]
    2b48:	68fb      	ldr	r3, [r7, #12]
    2b4a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2b4c:	687b      	ldr	r3, [r7, #4]
    2b4e:	7f1a      	ldrb	r2, [r3, #28]
    2b50:	68fb      	ldr	r3, [r7, #12]
    2b52:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    2b54:	233b      	movs	r3, #59	; 0x3b
    2b56:	18fc      	adds	r4, r7, r3
    2b58:	687a      	ldr	r2, [r7, #4]
    2b5a:	68fb      	ldr	r3, [r7, #12]
    2b5c:	0011      	movs	r1, r2
    2b5e:	0018      	movs	r0, r3
    2b60:	4b5e      	ldr	r3, [pc, #376]	; (2cdc <usart_init+0x258>)
    2b62:	4798      	blx	r3
    2b64:	0003      	movs	r3, r0
    2b66:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    2b68:	233b      	movs	r3, #59	; 0x3b
    2b6a:	18fb      	adds	r3, r7, r3
    2b6c:	781b      	ldrb	r3, [r3, #0]
    2b6e:	2b00      	cmp	r3, #0
    2b70:	d003      	beq.n	2b7a <usart_init+0xf6>
		return status_code;
    2b72:	233b      	movs	r3, #59	; 0x3b
    2b74:	18fb      	adds	r3, r7, r3
    2b76:	781b      	ldrb	r3, [r3, #0]
    2b78:	e09f      	b.n	2cba <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    2b7a:	2320      	movs	r3, #32
    2b7c:	18fb      	adds	r3, r7, r3
    2b7e:	0018      	movs	r0, r3
    2b80:	4b57      	ldr	r3, [pc, #348]	; (2ce0 <usart_init+0x25c>)
    2b82:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2b84:	2320      	movs	r3, #32
    2b86:	18fb      	adds	r3, r7, r3
    2b88:	2200      	movs	r2, #0
    2b8a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2b8c:	2320      	movs	r3, #32
    2b8e:	18fb      	adds	r3, r7, r3
    2b90:	2200      	movs	r2, #0
    2b92:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    2b94:	687b      	ldr	r3, [r7, #4]
    2b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    2b98:	2310      	movs	r3, #16
    2b9a:	18fb      	adds	r3, r7, r3
    2b9c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    2b9e:	687b      	ldr	r3, [r7, #4]
    2ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    2ba2:	2310      	movs	r3, #16
    2ba4:	18fb      	adds	r3, r7, r3
    2ba6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    2ba8:	687b      	ldr	r3, [r7, #4]
    2baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    2bac:	2310      	movs	r3, #16
    2bae:	18fb      	adds	r3, r7, r3
    2bb0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    2bb2:	687b      	ldr	r3, [r7, #4]
    2bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    2bb6:	2310      	movs	r3, #16
    2bb8:	18fb      	adds	r3, r7, r3
    2bba:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2bbc:	2347      	movs	r3, #71	; 0x47
    2bbe:	18fb      	adds	r3, r7, r3
    2bc0:	2200      	movs	r2, #0
    2bc2:	701a      	strb	r2, [r3, #0]
    2bc4:	e02c      	b.n	2c20 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2bc6:	2347      	movs	r3, #71	; 0x47
    2bc8:	18fb      	adds	r3, r7, r3
    2bca:	781a      	ldrb	r2, [r3, #0]
    2bcc:	2310      	movs	r3, #16
    2bce:	18fb      	adds	r3, r7, r3
    2bd0:	0092      	lsls	r2, r2, #2
    2bd2:	58d3      	ldr	r3, [r2, r3]
    2bd4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    2bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2bd8:	2b00      	cmp	r3, #0
    2bda:	d109      	bne.n	2bf0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2bdc:	2347      	movs	r3, #71	; 0x47
    2bde:	18fb      	adds	r3, r7, r3
    2be0:	781a      	ldrb	r2, [r3, #0]
    2be2:	68bb      	ldr	r3, [r7, #8]
    2be4:	0011      	movs	r1, r2
    2be6:	0018      	movs	r0, r3
    2be8:	4b3e      	ldr	r3, [pc, #248]	; (2ce4 <usart_init+0x260>)
    2bea:	4798      	blx	r3
    2bec:	0003      	movs	r3, r0
    2bee:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2bf2:	3301      	adds	r3, #1
    2bf4:	d00d      	beq.n	2c12 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2bf8:	b2da      	uxtb	r2, r3
    2bfa:	2320      	movs	r3, #32
    2bfc:	18fb      	adds	r3, r7, r3
    2bfe:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2c02:	0c1b      	lsrs	r3, r3, #16
    2c04:	b2db      	uxtb	r3, r3
    2c06:	2220      	movs	r2, #32
    2c08:	18ba      	adds	r2, r7, r2
    2c0a:	0011      	movs	r1, r2
    2c0c:	0018      	movs	r0, r3
    2c0e:	4b36      	ldr	r3, [pc, #216]	; (2ce8 <usart_init+0x264>)
    2c10:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    2c12:	2347      	movs	r3, #71	; 0x47
    2c14:	18fb      	adds	r3, r7, r3
    2c16:	781a      	ldrb	r2, [r3, #0]
    2c18:	2347      	movs	r3, #71	; 0x47
    2c1a:	18fb      	adds	r3, r7, r3
    2c1c:	3201      	adds	r2, #1
    2c1e:	701a      	strb	r2, [r3, #0]
    2c20:	2347      	movs	r3, #71	; 0x47
    2c22:	18fb      	adds	r3, r7, r3
    2c24:	781b      	ldrb	r3, [r3, #0]
    2c26:	2b03      	cmp	r3, #3
    2c28:	d9cd      	bls.n	2bc6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    2c2a:	2300      	movs	r3, #0
    2c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    2c2e:	e00a      	b.n	2c46 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    2c30:	68fa      	ldr	r2, [r7, #12]
    2c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2c34:	3302      	adds	r3, #2
    2c36:	009b      	lsls	r3, r3, #2
    2c38:	18d3      	adds	r3, r2, r3
    2c3a:	3304      	adds	r3, #4
    2c3c:	2200      	movs	r2, #0
    2c3e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    2c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2c42:	3301      	adds	r3, #1
    2c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    2c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2c48:	2b05      	cmp	r3, #5
    2c4a:	d9f1      	bls.n	2c30 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    2c4c:	68fb      	ldr	r3, [r7, #12]
    2c4e:	2200      	movs	r2, #0
    2c50:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2c52:	68fb      	ldr	r3, [r7, #12]
    2c54:	2200      	movs	r2, #0
    2c56:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2c58:	68fb      	ldr	r3, [r7, #12]
    2c5a:	2200      	movs	r2, #0
    2c5c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2c5e:	68fb      	ldr	r3, [r7, #12]
    2c60:	2200      	movs	r2, #0
    2c62:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2c64:	68fb      	ldr	r3, [r7, #12]
    2c66:	2230      	movs	r2, #48	; 0x30
    2c68:	2100      	movs	r1, #0
    2c6a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    2c6c:	68fb      	ldr	r3, [r7, #12]
    2c6e:	2231      	movs	r2, #49	; 0x31
    2c70:	2100      	movs	r1, #0
    2c72:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    2c74:	68fb      	ldr	r3, [r7, #12]
    2c76:	2232      	movs	r2, #50	; 0x32
    2c78:	2100      	movs	r1, #0
    2c7a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    2c7c:	68fb      	ldr	r3, [r7, #12]
    2c7e:	2233      	movs	r2, #51	; 0x33
    2c80:	2100      	movs	r1, #0
    2c82:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2c84:	68fb      	ldr	r3, [r7, #12]
    2c86:	681b      	ldr	r3, [r3, #0]
    2c88:	2227      	movs	r2, #39	; 0x27
    2c8a:	18bc      	adds	r4, r7, r2
    2c8c:	0018      	movs	r0, r3
    2c8e:	4b0d      	ldr	r3, [pc, #52]	; (2cc4 <usart_init+0x240>)
    2c90:	4798      	blx	r3
    2c92:	0003      	movs	r3, r0
    2c94:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2c96:	4a15      	ldr	r2, [pc, #84]	; (2cec <usart_init+0x268>)
    2c98:	2327      	movs	r3, #39	; 0x27
    2c9a:	18fb      	adds	r3, r7, r3
    2c9c:	781b      	ldrb	r3, [r3, #0]
    2c9e:	0011      	movs	r1, r2
    2ca0:	0018      	movs	r0, r3
    2ca2:	4b13      	ldr	r3, [pc, #76]	; (2cf0 <usart_init+0x26c>)
    2ca4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2ca6:	2327      	movs	r3, #39	; 0x27
    2ca8:	18fb      	adds	r3, r7, r3
    2caa:	781a      	ldrb	r2, [r3, #0]
    2cac:	4b11      	ldr	r3, [pc, #68]	; (2cf4 <usart_init+0x270>)
    2cae:	0092      	lsls	r2, r2, #2
    2cb0:	68f9      	ldr	r1, [r7, #12]
    2cb2:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    2cb4:	233b      	movs	r3, #59	; 0x3b
    2cb6:	18fb      	adds	r3, r7, r3
    2cb8:	781b      	ldrb	r3, [r3, #0]
}
    2cba:	0018      	movs	r0, r3
    2cbc:	46bd      	mov	sp, r7
    2cbe:	b013      	add	sp, #76	; 0x4c
    2cc0:	bd90      	pop	{r4, r7, pc}
    2cc2:	46c0      	nop			; (mov r8, r8)
    2cc4:	00002599 	.word	0x00002599
    2cc8:	000026c1 	.word	0x000026c1
    2ccc:	000026a9 	.word	0x000026a9
    2cd0:	000043f9 	.word	0x000043f9
    2cd4:	0000443d 	.word	0x0000443d
    2cd8:	00002351 	.word	0x00002351
    2cdc:	000027a9 	.word	0x000027a9
    2ce0:	0000271d 	.word	0x0000271d
    2ce4:	000023dd 	.word	0x000023dd
    2ce8:	000046e5 	.word	0x000046e5
    2cec:	000030c1 	.word	0x000030c1
    2cf0:	00003415 	.word	0x00003415
    2cf4:	20000304 	.word	0x20000304

00002cf8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    2cf8:	b580      	push	{r7, lr}
    2cfa:	b084      	sub	sp, #16
    2cfc:	af00      	add	r7, sp, #0
    2cfe:	6078      	str	r0, [r7, #4]
    2d00:	000a      	movs	r2, r1
    2d02:	1cbb      	adds	r3, r7, #2
    2d04:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d06:	687b      	ldr	r3, [r7, #4]
    2d08:	681b      	ldr	r3, [r3, #0]
    2d0a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2d0c:	687b      	ldr	r3, [r7, #4]
    2d0e:	79db      	ldrb	r3, [r3, #7]
    2d10:	2201      	movs	r2, #1
    2d12:	4053      	eors	r3, r2
    2d14:	b2db      	uxtb	r3, r3
    2d16:	2b00      	cmp	r3, #0
    2d18:	d001      	beq.n	2d1e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    2d1a:	231c      	movs	r3, #28
    2d1c:	e017      	b.n	2d4e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2d1e:	687b      	ldr	r3, [r7, #4]
    2d20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2d22:	b29b      	uxth	r3, r3
    2d24:	2b00      	cmp	r3, #0
    2d26:	d001      	beq.n	2d2c <usart_write_wait+0x34>
		return STATUS_BUSY;
    2d28:	2305      	movs	r3, #5
    2d2a:	e010      	b.n	2d4e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2d2c:	687b      	ldr	r3, [r7, #4]
    2d2e:	0018      	movs	r0, r3
    2d30:	4b09      	ldr	r3, [pc, #36]	; (2d58 <usart_write_wait+0x60>)
    2d32:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    2d34:	68fb      	ldr	r3, [r7, #12]
    2d36:	1cba      	adds	r2, r7, #2
    2d38:	8812      	ldrh	r2, [r2, #0]
    2d3a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2d3c:	46c0      	nop			; (mov r8, r8)
    2d3e:	68fb      	ldr	r3, [r7, #12]
    2d40:	7e1b      	ldrb	r3, [r3, #24]
    2d42:	b2db      	uxtb	r3, r3
    2d44:	001a      	movs	r2, r3
    2d46:	2302      	movs	r3, #2
    2d48:	4013      	ands	r3, r2
    2d4a:	d0f8      	beq.n	2d3e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    2d4c:	2300      	movs	r3, #0
}
    2d4e:	0018      	movs	r0, r3
    2d50:	46bd      	mov	sp, r7
    2d52:	b004      	add	sp, #16
    2d54:	bd80      	pop	{r7, pc}
    2d56:	46c0      	nop			; (mov r8, r8)
    2d58:	00002785 	.word	0x00002785

00002d5c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    2d5c:	b580      	push	{r7, lr}
    2d5e:	b084      	sub	sp, #16
    2d60:	af00      	add	r7, sp, #0
    2d62:	6078      	str	r0, [r7, #4]
    2d64:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d66:	687b      	ldr	r3, [r7, #4]
    2d68:	681b      	ldr	r3, [r3, #0]
    2d6a:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2d6c:	687b      	ldr	r3, [r7, #4]
    2d6e:	799b      	ldrb	r3, [r3, #6]
    2d70:	2201      	movs	r2, #1
    2d72:	4053      	eors	r3, r2
    2d74:	b2db      	uxtb	r3, r3
    2d76:	2b00      	cmp	r3, #0
    2d78:	d001      	beq.n	2d7e <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    2d7a:	231c      	movs	r3, #28
    2d7c:	e05e      	b.n	2e3c <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    2d7e:	687b      	ldr	r3, [r7, #4]
    2d80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2d82:	b29b      	uxth	r3, r3
    2d84:	2b00      	cmp	r3, #0
    2d86:	d001      	beq.n	2d8c <usart_read_wait+0x30>
		return STATUS_BUSY;
    2d88:	2305      	movs	r3, #5
    2d8a:	e057      	b.n	2e3c <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2d8c:	68fb      	ldr	r3, [r7, #12]
    2d8e:	7e1b      	ldrb	r3, [r3, #24]
    2d90:	b2db      	uxtb	r3, r3
    2d92:	001a      	movs	r2, r3
    2d94:	2304      	movs	r3, #4
    2d96:	4013      	ands	r3, r2
    2d98:	d101      	bne.n	2d9e <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    2d9a:	2305      	movs	r3, #5
    2d9c:	e04e      	b.n	2e3c <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2d9e:	687b      	ldr	r3, [r7, #4]
    2da0:	0018      	movs	r0, r3
    2da2:	4b28      	ldr	r3, [pc, #160]	; (2e44 <usart_read_wait+0xe8>)
    2da4:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2da6:	68fb      	ldr	r3, [r7, #12]
    2da8:	8b5b      	ldrh	r3, [r3, #26]
    2daa:	b29b      	uxth	r3, r3
    2dac:	b2da      	uxtb	r2, r3
    2dae:	230b      	movs	r3, #11
    2db0:	18fb      	adds	r3, r7, r3
    2db2:	213f      	movs	r1, #63	; 0x3f
    2db4:	400a      	ands	r2, r1
    2db6:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    2db8:	230b      	movs	r3, #11
    2dba:	18fb      	adds	r3, r7, r3
    2dbc:	781b      	ldrb	r3, [r3, #0]
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d036      	beq.n	2e30 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2dc2:	230b      	movs	r3, #11
    2dc4:	18fb      	adds	r3, r7, r3
    2dc6:	781b      	ldrb	r3, [r3, #0]
    2dc8:	2202      	movs	r2, #2
    2dca:	4013      	ands	r3, r2
    2dcc:	d004      	beq.n	2dd8 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2dce:	68fb      	ldr	r3, [r7, #12]
    2dd0:	2202      	movs	r2, #2
    2dd2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    2dd4:	231a      	movs	r3, #26
    2dd6:	e031      	b.n	2e3c <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2dd8:	230b      	movs	r3, #11
    2dda:	18fb      	adds	r3, r7, r3
    2ddc:	781b      	ldrb	r3, [r3, #0]
    2dde:	2204      	movs	r2, #4
    2de0:	4013      	ands	r3, r2
    2de2:	d004      	beq.n	2dee <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2de4:	68fb      	ldr	r3, [r7, #12]
    2de6:	2204      	movs	r2, #4
    2de8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    2dea:	231e      	movs	r3, #30
    2dec:	e026      	b.n	2e3c <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2dee:	230b      	movs	r3, #11
    2df0:	18fb      	adds	r3, r7, r3
    2df2:	781b      	ldrb	r3, [r3, #0]
    2df4:	2201      	movs	r2, #1
    2df6:	4013      	ands	r3, r2
    2df8:	d004      	beq.n	2e04 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2dfa:	68fb      	ldr	r3, [r7, #12]
    2dfc:	2201      	movs	r2, #1
    2dfe:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    2e00:	2313      	movs	r3, #19
    2e02:	e01b      	b.n	2e3c <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2e04:	230b      	movs	r3, #11
    2e06:	18fb      	adds	r3, r7, r3
    2e08:	781b      	ldrb	r3, [r3, #0]
    2e0a:	2210      	movs	r2, #16
    2e0c:	4013      	ands	r3, r2
    2e0e:	d004      	beq.n	2e1a <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2e10:	68fb      	ldr	r3, [r7, #12]
    2e12:	2210      	movs	r2, #16
    2e14:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    2e16:	2342      	movs	r3, #66	; 0x42
    2e18:	e010      	b.n	2e3c <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2e1a:	230b      	movs	r3, #11
    2e1c:	18fb      	adds	r3, r7, r3
    2e1e:	781b      	ldrb	r3, [r3, #0]
    2e20:	2220      	movs	r2, #32
    2e22:	4013      	ands	r3, r2
    2e24:	d004      	beq.n	2e30 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2e26:	68fb      	ldr	r3, [r7, #12]
    2e28:	2220      	movs	r2, #32
    2e2a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    2e2c:	2341      	movs	r3, #65	; 0x41
    2e2e:	e005      	b.n	2e3c <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    2e30:	68fb      	ldr	r3, [r7, #12]
    2e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2e34:	b29a      	uxth	r2, r3
    2e36:	683b      	ldr	r3, [r7, #0]
    2e38:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    2e3a:	2300      	movs	r3, #0
}
    2e3c:	0018      	movs	r0, r3
    2e3e:	46bd      	mov	sp, r7
    2e40:	b004      	add	sp, #16
    2e42:	bd80      	pop	{r7, pc}
    2e44:	00002785 	.word	0x00002785

00002e48 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2e48:	b580      	push	{r7, lr}
    2e4a:	b08a      	sub	sp, #40	; 0x28
    2e4c:	af00      	add	r7, sp, #0
    2e4e:	60f8      	str	r0, [r7, #12]
    2e50:	60b9      	str	r1, [r7, #8]
    2e52:	1dbb      	adds	r3, r7, #6
    2e54:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    2e56:	1dbb      	adds	r3, r7, #6
    2e58:	881b      	ldrh	r3, [r3, #0]
    2e5a:	2b00      	cmp	r3, #0
    2e5c:	d101      	bne.n	2e62 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    2e5e:	2317      	movs	r3, #23
    2e60:	e07e      	b.n	2f60 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2e62:	68fb      	ldr	r3, [r7, #12]
    2e64:	79db      	ldrb	r3, [r3, #7]
    2e66:	2201      	movs	r2, #1
    2e68:	4053      	eors	r3, r2
    2e6a:	b2db      	uxtb	r3, r3
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d001      	beq.n	2e74 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    2e70:	231c      	movs	r3, #28
    2e72:	e075      	b.n	2f60 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e74:	68fb      	ldr	r3, [r7, #12]
    2e76:	681b      	ldr	r3, [r3, #0]
    2e78:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2e7a:	68fb      	ldr	r3, [r7, #12]
    2e7c:	0018      	movs	r0, r3
    2e7e:	4b3a      	ldr	r3, [pc, #232]	; (2f68 <usart_write_buffer_wait+0x120>)
    2e80:	4798      	blx	r3

	uint16_t tx_pos = 0;
    2e82:	2326      	movs	r3, #38	; 0x26
    2e84:	18fb      	adds	r3, r7, r3
    2e86:	2200      	movs	r2, #0
    2e88:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    2e8a:	e048      	b.n	2f1e <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2e8c:	2300      	movs	r3, #0
    2e8e:	623b      	str	r3, [r7, #32]
    2e90:	e00f      	b.n	2eb2 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    2e92:	697b      	ldr	r3, [r7, #20]
    2e94:	7e1b      	ldrb	r3, [r3, #24]
    2e96:	b2db      	uxtb	r3, r3
    2e98:	001a      	movs	r2, r3
    2e9a:	2301      	movs	r3, #1
    2e9c:	4013      	ands	r3, r2
    2e9e:	d10d      	bne.n	2ebc <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    2ea0:	6a3b      	ldr	r3, [r7, #32]
    2ea2:	4a32      	ldr	r2, [pc, #200]	; (2f6c <usart_write_buffer_wait+0x124>)
    2ea4:	4293      	cmp	r3, r2
    2ea6:	d101      	bne.n	2eac <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    2ea8:	2312      	movs	r3, #18
    2eaa:	e059      	b.n	2f60 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2eac:	6a3b      	ldr	r3, [r7, #32]
    2eae:	3301      	adds	r3, #1
    2eb0:	623b      	str	r3, [r7, #32]
    2eb2:	6a3b      	ldr	r3, [r7, #32]
    2eb4:	4a2d      	ldr	r2, [pc, #180]	; (2f6c <usart_write_buffer_wait+0x124>)
    2eb6:	4293      	cmp	r3, r2
    2eb8:	d9eb      	bls.n	2e92 <usart_write_buffer_wait+0x4a>
    2eba:	e000      	b.n	2ebe <usart_write_buffer_wait+0x76>
				break;
    2ebc:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    2ebe:	2326      	movs	r3, #38	; 0x26
    2ec0:	18fb      	adds	r3, r7, r3
    2ec2:	881b      	ldrh	r3, [r3, #0]
    2ec4:	2226      	movs	r2, #38	; 0x26
    2ec6:	18ba      	adds	r2, r7, r2
    2ec8:	1c59      	adds	r1, r3, #1
    2eca:	8011      	strh	r1, [r2, #0]
    2ecc:	001a      	movs	r2, r3
    2ece:	68bb      	ldr	r3, [r7, #8]
    2ed0:	189b      	adds	r3, r3, r2
    2ed2:	781a      	ldrb	r2, [r3, #0]
    2ed4:	231e      	movs	r3, #30
    2ed6:	18fb      	adds	r3, r7, r3
    2ed8:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2eda:	68fb      	ldr	r3, [r7, #12]
    2edc:	795b      	ldrb	r3, [r3, #5]
    2ede:	2b01      	cmp	r3, #1
    2ee0:	d115      	bne.n	2f0e <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    2ee2:	2326      	movs	r3, #38	; 0x26
    2ee4:	18fb      	adds	r3, r7, r3
    2ee6:	881b      	ldrh	r3, [r3, #0]
    2ee8:	2226      	movs	r2, #38	; 0x26
    2eea:	18ba      	adds	r2, r7, r2
    2eec:	1c59      	adds	r1, r3, #1
    2eee:	8011      	strh	r1, [r2, #0]
    2ef0:	001a      	movs	r2, r3
    2ef2:	68bb      	ldr	r3, [r7, #8]
    2ef4:	189b      	adds	r3, r3, r2
    2ef6:	781b      	ldrb	r3, [r3, #0]
    2ef8:	021b      	lsls	r3, r3, #8
    2efa:	b21a      	sxth	r2, r3
    2efc:	231e      	movs	r3, #30
    2efe:	18fb      	adds	r3, r7, r3
    2f00:	2100      	movs	r1, #0
    2f02:	5e5b      	ldrsh	r3, [r3, r1]
    2f04:	4313      	orrs	r3, r2
    2f06:	b21a      	sxth	r2, r3
    2f08:	231e      	movs	r3, #30
    2f0a:	18fb      	adds	r3, r7, r3
    2f0c:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    2f0e:	231e      	movs	r3, #30
    2f10:	18fb      	adds	r3, r7, r3
    2f12:	881a      	ldrh	r2, [r3, #0]
    2f14:	68fb      	ldr	r3, [r7, #12]
    2f16:	0011      	movs	r1, r2
    2f18:	0018      	movs	r0, r3
    2f1a:	4b15      	ldr	r3, [pc, #84]	; (2f70 <usart_write_buffer_wait+0x128>)
    2f1c:	4798      	blx	r3
	while (length--) {
    2f1e:	1dbb      	adds	r3, r7, #6
    2f20:	881b      	ldrh	r3, [r3, #0]
    2f22:	1dba      	adds	r2, r7, #6
    2f24:	1e59      	subs	r1, r3, #1
    2f26:	8011      	strh	r1, [r2, #0]
    2f28:	2b00      	cmp	r3, #0
    2f2a:	d1af      	bne.n	2e8c <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2f2c:	2300      	movs	r3, #0
    2f2e:	61bb      	str	r3, [r7, #24]
    2f30:	e00f      	b.n	2f52 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    2f32:	697b      	ldr	r3, [r7, #20]
    2f34:	7e1b      	ldrb	r3, [r3, #24]
    2f36:	b2db      	uxtb	r3, r3
    2f38:	001a      	movs	r2, r3
    2f3a:	2302      	movs	r3, #2
    2f3c:	4013      	ands	r3, r2
    2f3e:	d10d      	bne.n	2f5c <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    2f40:	69bb      	ldr	r3, [r7, #24]
    2f42:	4a0a      	ldr	r2, [pc, #40]	; (2f6c <usart_write_buffer_wait+0x124>)
    2f44:	4293      	cmp	r3, r2
    2f46:	d101      	bne.n	2f4c <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    2f48:	2312      	movs	r3, #18
    2f4a:	e009      	b.n	2f60 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2f4c:	69bb      	ldr	r3, [r7, #24]
    2f4e:	3301      	adds	r3, #1
    2f50:	61bb      	str	r3, [r7, #24]
    2f52:	69bb      	ldr	r3, [r7, #24]
    2f54:	4a05      	ldr	r2, [pc, #20]	; (2f6c <usart_write_buffer_wait+0x124>)
    2f56:	4293      	cmp	r3, r2
    2f58:	d9eb      	bls.n	2f32 <usart_write_buffer_wait+0xea>
    2f5a:	e000      	b.n	2f5e <usart_write_buffer_wait+0x116>
			break;
    2f5c:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    2f5e:	2300      	movs	r3, #0
}
    2f60:	0018      	movs	r0, r3
    2f62:	46bd      	mov	sp, r7
    2f64:	b00a      	add	sp, #40	; 0x28
    2f66:	bd80      	pop	{r7, pc}
    2f68:	00002785 	.word	0x00002785
    2f6c:	0000ffff 	.word	0x0000ffff
    2f70:	00002cf9 	.word	0x00002cf9

00002f74 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2f74:	b590      	push	{r4, r7, lr}
    2f76:	b089      	sub	sp, #36	; 0x24
    2f78:	af00      	add	r7, sp, #0
    2f7a:	60f8      	str	r0, [r7, #12]
    2f7c:	60b9      	str	r1, [r7, #8]
    2f7e:	1dbb      	adds	r3, r7, #6
    2f80:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    2f82:	1dbb      	adds	r3, r7, #6
    2f84:	881b      	ldrh	r3, [r3, #0]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d101      	bne.n	2f8e <usart_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    2f8a:	2317      	movs	r3, #23
    2f8c:	e06d      	b.n	306a <usart_read_buffer_wait+0xf6>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2f8e:	68fb      	ldr	r3, [r7, #12]
    2f90:	799b      	ldrb	r3, [r3, #6]
    2f92:	2201      	movs	r2, #1
    2f94:	4053      	eors	r3, r2
    2f96:	b2db      	uxtb	r3, r3
    2f98:	2b00      	cmp	r3, #0
    2f9a:	d001      	beq.n	2fa0 <usart_read_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    2f9c:	231c      	movs	r3, #28
    2f9e:	e064      	b.n	306a <usart_read_buffer_wait+0xf6>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2fa0:	68fb      	ldr	r3, [r7, #12]
    2fa2:	681b      	ldr	r3, [r3, #0]
    2fa4:	617b      	str	r3, [r7, #20]

	uint16_t rx_pos = 0;
    2fa6:	231e      	movs	r3, #30
    2fa8:	18fb      	adds	r3, r7, r3
    2faa:	2200      	movs	r2, #0
    2fac:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being received */
	while (length--) {
    2fae:	e054      	b.n	305a <usart_read_buffer_wait+0xe6>
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2fb0:	2300      	movs	r3, #0
    2fb2:	61bb      	str	r3, [r7, #24]
    2fb4:	e00f      	b.n	2fd6 <usart_read_buffer_wait+0x62>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    2fb6:	697b      	ldr	r3, [r7, #20]
    2fb8:	7e1b      	ldrb	r3, [r3, #24]
    2fba:	b2db      	uxtb	r3, r3
    2fbc:	001a      	movs	r2, r3
    2fbe:	2304      	movs	r3, #4
    2fc0:	4013      	ands	r3, r2
    2fc2:	d10d      	bne.n	2fe0 <usart_read_buffer_wait+0x6c>
				break;
			} else if (i == USART_TIMEOUT) {
    2fc4:	69bb      	ldr	r3, [r7, #24]
    2fc6:	4a2b      	ldr	r2, [pc, #172]	; (3074 <usart_read_buffer_wait+0x100>)
    2fc8:	4293      	cmp	r3, r2
    2fca:	d101      	bne.n	2fd0 <usart_read_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
    2fcc:	2312      	movs	r3, #18
    2fce:	e04c      	b.n	306a <usart_read_buffer_wait+0xf6>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2fd0:	69bb      	ldr	r3, [r7, #24]
    2fd2:	3301      	adds	r3, #1
    2fd4:	61bb      	str	r3, [r7, #24]
    2fd6:	69bb      	ldr	r3, [r7, #24]
    2fd8:	4a26      	ldr	r2, [pc, #152]	; (3074 <usart_read_buffer_wait+0x100>)
    2fda:	4293      	cmp	r3, r2
    2fdc:	d9eb      	bls.n	2fb6 <usart_read_buffer_wait+0x42>
    2fde:	e000      	b.n	2fe2 <usart_read_buffer_wait+0x6e>
				break;
    2fe0:	46c0      	nop			; (mov r8, r8)
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    2fe2:	2310      	movs	r3, #16
    2fe4:	18fb      	adds	r3, r7, r3
    2fe6:	2200      	movs	r2, #0
    2fe8:	801a      	strh	r2, [r3, #0]

		retval = usart_read_wait(module, &received_data);
    2fea:	2313      	movs	r3, #19
    2fec:	18fc      	adds	r4, r7, r3
    2fee:	2310      	movs	r3, #16
    2ff0:	18fa      	adds	r2, r7, r3
    2ff2:	68fb      	ldr	r3, [r7, #12]
    2ff4:	0011      	movs	r1, r2
    2ff6:	0018      	movs	r0, r3
    2ff8:	4b1f      	ldr	r3, [pc, #124]	; (3078 <usart_read_buffer_wait+0x104>)
    2ffa:	4798      	blx	r3
    2ffc:	0003      	movs	r3, r0
    2ffe:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    3000:	2313      	movs	r3, #19
    3002:	18fb      	adds	r3, r7, r3
    3004:	781b      	ldrb	r3, [r3, #0]
    3006:	2b00      	cmp	r3, #0
    3008:	d003      	beq.n	3012 <usart_read_buffer_wait+0x9e>
			/* Overflow, abort */
			return retval;
    300a:	2313      	movs	r3, #19
    300c:	18fb      	adds	r3, r7, r3
    300e:	781b      	ldrb	r3, [r3, #0]
    3010:	e02b      	b.n	306a <usart_read_buffer_wait+0xf6>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    3012:	231e      	movs	r3, #30
    3014:	18fb      	adds	r3, r7, r3
    3016:	881b      	ldrh	r3, [r3, #0]
    3018:	221e      	movs	r2, #30
    301a:	18ba      	adds	r2, r7, r2
    301c:	1c59      	adds	r1, r3, #1
    301e:	8011      	strh	r1, [r2, #0]
    3020:	001a      	movs	r2, r3
    3022:	68bb      	ldr	r3, [r7, #8]
    3024:	189b      	adds	r3, r3, r2
    3026:	2210      	movs	r2, #16
    3028:	18ba      	adds	r2, r7, r2
    302a:	8812      	ldrh	r2, [r2, #0]
    302c:	b2d2      	uxtb	r2, r2
    302e:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3030:	68fb      	ldr	r3, [r7, #12]
    3032:	795b      	ldrb	r3, [r3, #5]
    3034:	2b01      	cmp	r3, #1
    3036:	d110      	bne.n	305a <usart_read_buffer_wait+0xe6>
			rx_data[rx_pos++] = (received_data >> 8);
    3038:	231e      	movs	r3, #30
    303a:	18fb      	adds	r3, r7, r3
    303c:	881b      	ldrh	r3, [r3, #0]
    303e:	221e      	movs	r2, #30
    3040:	18ba      	adds	r2, r7, r2
    3042:	1c59      	adds	r1, r3, #1
    3044:	8011      	strh	r1, [r2, #0]
    3046:	001a      	movs	r2, r3
    3048:	68bb      	ldr	r3, [r7, #8]
    304a:	189b      	adds	r3, r3, r2
    304c:	2210      	movs	r2, #16
    304e:	18ba      	adds	r2, r7, r2
    3050:	8812      	ldrh	r2, [r2, #0]
    3052:	0a12      	lsrs	r2, r2, #8
    3054:	b292      	uxth	r2, r2
    3056:	b2d2      	uxtb	r2, r2
    3058:	701a      	strb	r2, [r3, #0]
	while (length--) {
    305a:	1dbb      	adds	r3, r7, #6
    305c:	881b      	ldrh	r3, [r3, #0]
    305e:	1dba      	adds	r2, r7, #6
    3060:	1e59      	subs	r1, r3, #1
    3062:	8011      	strh	r1, [r2, #0]
    3064:	2b00      	cmp	r3, #0
    3066:	d1a3      	bne.n	2fb0 <usart_read_buffer_wait+0x3c>
		}
	}

	return STATUS_OK;
    3068:	2300      	movs	r3, #0
}
    306a:	0018      	movs	r0, r3
    306c:	46bd      	mov	sp, r7
    306e:	b009      	add	sp, #36	; 0x24
    3070:	bd90      	pop	{r4, r7, pc}
    3072:	46c0      	nop			; (mov r8, r8)
    3074:	0000ffff 	.word	0x0000ffff
    3078:	00002d5d 	.word	0x00002d5d

0000307c <usart_is_syncing>:
{
    307c:	b580      	push	{r7, lr}
    307e:	b084      	sub	sp, #16
    3080:	af00      	add	r7, sp, #0
    3082:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3084:	687b      	ldr	r3, [r7, #4]
    3086:	681b      	ldr	r3, [r3, #0]
    3088:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    308a:	68fb      	ldr	r3, [r7, #12]
    308c:	69db      	ldr	r3, [r3, #28]
    308e:	1e5a      	subs	r2, r3, #1
    3090:	4193      	sbcs	r3, r2
    3092:	b2db      	uxtb	r3, r3
}
    3094:	0018      	movs	r0, r3
    3096:	46bd      	mov	sp, r7
    3098:	b004      	add	sp, #16
    309a:	bd80      	pop	{r7, pc}

0000309c <_usart_wait_for_sync>:
{
    309c:	b580      	push	{r7, lr}
    309e:	b082      	sub	sp, #8
    30a0:	af00      	add	r7, sp, #0
    30a2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    30a4:	46c0      	nop			; (mov r8, r8)
    30a6:	687b      	ldr	r3, [r7, #4]
    30a8:	0018      	movs	r0, r3
    30aa:	4b04      	ldr	r3, [pc, #16]	; (30bc <_usart_wait_for_sync+0x20>)
    30ac:	4798      	blx	r3
    30ae:	1e03      	subs	r3, r0, #0
    30b0:	d1f9      	bne.n	30a6 <_usart_wait_for_sync+0xa>
}
    30b2:	46c0      	nop			; (mov r8, r8)
    30b4:	46bd      	mov	sp, r7
    30b6:	b002      	add	sp, #8
    30b8:	bd80      	pop	{r7, pc}
    30ba:	46c0      	nop			; (mov r8, r8)
    30bc:	0000307d 	.word	0x0000307d

000030c0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    30c0:	b580      	push	{r7, lr}
    30c2:	b088      	sub	sp, #32
    30c4:	af00      	add	r7, sp, #0
    30c6:	0002      	movs	r2, r0
    30c8:	1dfb      	adds	r3, r7, #7
    30ca:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    30cc:	1dfb      	adds	r3, r7, #7
    30ce:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    30d0:	4ba3      	ldr	r3, [pc, #652]	; (3360 <_usart_interrupt_handler+0x2a0>)
    30d2:	0092      	lsls	r2, r2, #2
    30d4:	58d3      	ldr	r3, [r2, r3]
    30d6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    30d8:	69bb      	ldr	r3, [r7, #24]
    30da:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    30dc:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    30de:	69bb      	ldr	r3, [r7, #24]
    30e0:	0018      	movs	r0, r3
    30e2:	4ba0      	ldr	r3, [pc, #640]	; (3364 <_usart_interrupt_handler+0x2a4>)
    30e4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    30e6:	697b      	ldr	r3, [r7, #20]
    30e8:	7e1b      	ldrb	r3, [r3, #24]
    30ea:	b2da      	uxtb	r2, r3
    30ec:	2312      	movs	r3, #18
    30ee:	18fb      	adds	r3, r7, r3
    30f0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    30f2:	697b      	ldr	r3, [r7, #20]
    30f4:	7d9b      	ldrb	r3, [r3, #22]
    30f6:	b2db      	uxtb	r3, r3
    30f8:	b29a      	uxth	r2, r3
    30fa:	2312      	movs	r3, #18
    30fc:	18fb      	adds	r3, r7, r3
    30fe:	2112      	movs	r1, #18
    3100:	1879      	adds	r1, r7, r1
    3102:	8809      	ldrh	r1, [r1, #0]
    3104:	400a      	ands	r2, r1
    3106:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    3108:	69bb      	ldr	r3, [r7, #24]
    310a:	2230      	movs	r2, #48	; 0x30
    310c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    310e:	69ba      	ldr	r2, [r7, #24]
    3110:	2131      	movs	r1, #49	; 0x31
    3112:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    3114:	4013      	ands	r3, r2
    3116:	b2da      	uxtb	r2, r3
    3118:	2310      	movs	r3, #16
    311a:	18fb      	adds	r3, r7, r3
    311c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    311e:	2312      	movs	r3, #18
    3120:	18fb      	adds	r3, r7, r3
    3122:	881b      	ldrh	r3, [r3, #0]
    3124:	2201      	movs	r2, #1
    3126:	4013      	ands	r3, r2
    3128:	d044      	beq.n	31b4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    312a:	69bb      	ldr	r3, [r7, #24]
    312c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    312e:	b29b      	uxth	r3, r3
    3130:	2b00      	cmp	r3, #0
    3132:	d03c      	beq.n	31ae <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    3134:	69bb      	ldr	r3, [r7, #24]
    3136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3138:	781b      	ldrb	r3, [r3, #0]
    313a:	b2da      	uxtb	r2, r3
    313c:	231c      	movs	r3, #28
    313e:	18fb      	adds	r3, r7, r3
    3140:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    3142:	69bb      	ldr	r3, [r7, #24]
    3144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3146:	1c5a      	adds	r2, r3, #1
    3148:	69bb      	ldr	r3, [r7, #24]
    314a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    314c:	69bb      	ldr	r3, [r7, #24]
    314e:	795b      	ldrb	r3, [r3, #5]
    3150:	2b01      	cmp	r3, #1
    3152:	d113      	bne.n	317c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    3154:	69bb      	ldr	r3, [r7, #24]
    3156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3158:	781b      	ldrb	r3, [r3, #0]
    315a:	b2db      	uxtb	r3, r3
    315c:	021b      	lsls	r3, r3, #8
    315e:	b21a      	sxth	r2, r3
    3160:	231c      	movs	r3, #28
    3162:	18fb      	adds	r3, r7, r3
    3164:	2100      	movs	r1, #0
    3166:	5e5b      	ldrsh	r3, [r3, r1]
    3168:	4313      	orrs	r3, r2
    316a:	b21a      	sxth	r2, r3
    316c:	231c      	movs	r3, #28
    316e:	18fb      	adds	r3, r7, r3
    3170:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    3172:	69bb      	ldr	r3, [r7, #24]
    3174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3176:	1c5a      	adds	r2, r3, #1
    3178:	69bb      	ldr	r3, [r7, #24]
    317a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    317c:	231c      	movs	r3, #28
    317e:	18fb      	adds	r3, r7, r3
    3180:	881b      	ldrh	r3, [r3, #0]
    3182:	05db      	lsls	r3, r3, #23
    3184:	0ddb      	lsrs	r3, r3, #23
    3186:	b29a      	uxth	r2, r3
    3188:	697b      	ldr	r3, [r7, #20]
    318a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    318c:	69bb      	ldr	r3, [r7, #24]
    318e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    3190:	b29b      	uxth	r3, r3
    3192:	3b01      	subs	r3, #1
    3194:	b29b      	uxth	r3, r3
    3196:	69ba      	ldr	r2, [r7, #24]
    3198:	1c19      	adds	r1, r3, #0
    319a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    319c:	2b00      	cmp	r3, #0
    319e:	d109      	bne.n	31b4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    31a0:	697b      	ldr	r3, [r7, #20]
    31a2:	2201      	movs	r2, #1
    31a4:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    31a6:	697b      	ldr	r3, [r7, #20]
    31a8:	2202      	movs	r2, #2
    31aa:	759a      	strb	r2, [r3, #22]
    31ac:	e002      	b.n	31b4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    31ae:	697b      	ldr	r3, [r7, #20]
    31b0:	2201      	movs	r2, #1
    31b2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    31b4:	2312      	movs	r3, #18
    31b6:	18fb      	adds	r3, r7, r3
    31b8:	881b      	ldrh	r3, [r3, #0]
    31ba:	2202      	movs	r2, #2
    31bc:	4013      	ands	r3, r2
    31be:	d011      	beq.n	31e4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    31c0:	697b      	ldr	r3, [r7, #20]
    31c2:	2202      	movs	r2, #2
    31c4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    31c6:	69bb      	ldr	r3, [r7, #24]
    31c8:	2233      	movs	r2, #51	; 0x33
    31ca:	2100      	movs	r1, #0
    31cc:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    31ce:	2310      	movs	r3, #16
    31d0:	18fb      	adds	r3, r7, r3
    31d2:	881b      	ldrh	r3, [r3, #0]
    31d4:	2201      	movs	r2, #1
    31d6:	4013      	ands	r3, r2
    31d8:	d004      	beq.n	31e4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    31da:	69bb      	ldr	r3, [r7, #24]
    31dc:	68db      	ldr	r3, [r3, #12]
    31de:	69ba      	ldr	r2, [r7, #24]
    31e0:	0010      	movs	r0, r2
    31e2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    31e4:	2312      	movs	r3, #18
    31e6:	18fb      	adds	r3, r7, r3
    31e8:	881b      	ldrh	r3, [r3, #0]
    31ea:	2204      	movs	r2, #4
    31ec:	4013      	ands	r3, r2
    31ee:	d100      	bne.n	31f2 <_usart_interrupt_handler+0x132>
    31f0:	e0bd      	b.n	336e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    31f2:	69bb      	ldr	r3, [r7, #24]
    31f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    31f6:	b29b      	uxth	r3, r3
    31f8:	2b00      	cmp	r3, #0
    31fa:	d100      	bne.n	31fe <_usart_interrupt_handler+0x13e>
    31fc:	e0b4      	b.n	3368 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    31fe:	697b      	ldr	r3, [r7, #20]
    3200:	8b5b      	ldrh	r3, [r3, #26]
    3202:	b29b      	uxth	r3, r3
    3204:	b2da      	uxtb	r2, r3
    3206:	231f      	movs	r3, #31
    3208:	18fb      	adds	r3, r7, r3
    320a:	213f      	movs	r1, #63	; 0x3f
    320c:	400a      	ands	r2, r1
    320e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    3210:	231f      	movs	r3, #31
    3212:	18fb      	adds	r3, r7, r3
    3214:	781b      	ldrb	r3, [r3, #0]
    3216:	2208      	movs	r2, #8
    3218:	4013      	ands	r3, r2
    321a:	d007      	beq.n	322c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    321c:	231f      	movs	r3, #31
    321e:	18fb      	adds	r3, r7, r3
    3220:	221f      	movs	r2, #31
    3222:	18ba      	adds	r2, r7, r2
    3224:	7812      	ldrb	r2, [r2, #0]
    3226:	2108      	movs	r1, #8
    3228:	438a      	bics	r2, r1
    322a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    322c:	231f      	movs	r3, #31
    322e:	18fb      	adds	r3, r7, r3
    3230:	781b      	ldrb	r3, [r3, #0]
    3232:	2b00      	cmp	r3, #0
    3234:	d050      	beq.n	32d8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    3236:	231f      	movs	r3, #31
    3238:	18fb      	adds	r3, r7, r3
    323a:	781b      	ldrb	r3, [r3, #0]
    323c:	2202      	movs	r2, #2
    323e:	4013      	ands	r3, r2
    3240:	d007      	beq.n	3252 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    3242:	69bb      	ldr	r3, [r7, #24]
    3244:	2232      	movs	r2, #50	; 0x32
    3246:	211a      	movs	r1, #26
    3248:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    324a:	697b      	ldr	r3, [r7, #20]
    324c:	2202      	movs	r2, #2
    324e:	835a      	strh	r2, [r3, #26]
    3250:	e036      	b.n	32c0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3252:	231f      	movs	r3, #31
    3254:	18fb      	adds	r3, r7, r3
    3256:	781b      	ldrb	r3, [r3, #0]
    3258:	2204      	movs	r2, #4
    325a:	4013      	ands	r3, r2
    325c:	d007      	beq.n	326e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    325e:	69bb      	ldr	r3, [r7, #24]
    3260:	2232      	movs	r2, #50	; 0x32
    3262:	211e      	movs	r1, #30
    3264:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    3266:	697b      	ldr	r3, [r7, #20]
    3268:	2204      	movs	r2, #4
    326a:	835a      	strh	r2, [r3, #26]
    326c:	e028      	b.n	32c0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    326e:	231f      	movs	r3, #31
    3270:	18fb      	adds	r3, r7, r3
    3272:	781b      	ldrb	r3, [r3, #0]
    3274:	2201      	movs	r2, #1
    3276:	4013      	ands	r3, r2
    3278:	d007      	beq.n	328a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    327a:	69bb      	ldr	r3, [r7, #24]
    327c:	2232      	movs	r2, #50	; 0x32
    327e:	2113      	movs	r1, #19
    3280:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    3282:	697b      	ldr	r3, [r7, #20]
    3284:	2201      	movs	r2, #1
    3286:	835a      	strh	r2, [r3, #26]
    3288:	e01a      	b.n	32c0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    328a:	231f      	movs	r3, #31
    328c:	18fb      	adds	r3, r7, r3
    328e:	781b      	ldrb	r3, [r3, #0]
    3290:	2210      	movs	r2, #16
    3292:	4013      	ands	r3, r2
    3294:	d007      	beq.n	32a6 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    3296:	69bb      	ldr	r3, [r7, #24]
    3298:	2232      	movs	r2, #50	; 0x32
    329a:	2142      	movs	r1, #66	; 0x42
    329c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    329e:	697b      	ldr	r3, [r7, #20]
    32a0:	2210      	movs	r2, #16
    32a2:	835a      	strh	r2, [r3, #26]
    32a4:	e00c      	b.n	32c0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    32a6:	231f      	movs	r3, #31
    32a8:	18fb      	adds	r3, r7, r3
    32aa:	781b      	ldrb	r3, [r3, #0]
    32ac:	2220      	movs	r2, #32
    32ae:	4013      	ands	r3, r2
    32b0:	d006      	beq.n	32c0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    32b2:	69bb      	ldr	r3, [r7, #24]
    32b4:	2232      	movs	r2, #50	; 0x32
    32b6:	2141      	movs	r1, #65	; 0x41
    32b8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    32ba:	697b      	ldr	r3, [r7, #20]
    32bc:	2220      	movs	r2, #32
    32be:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    32c0:	2310      	movs	r3, #16
    32c2:	18fb      	adds	r3, r7, r3
    32c4:	881b      	ldrh	r3, [r3, #0]
    32c6:	2204      	movs	r2, #4
    32c8:	4013      	ands	r3, r2
				if (callback_status
    32ca:	d050      	beq.n	336e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    32cc:	69bb      	ldr	r3, [r7, #24]
    32ce:	695b      	ldr	r3, [r3, #20]
    32d0:	69ba      	ldr	r2, [r7, #24]
    32d2:	0010      	movs	r0, r2
    32d4:	4798      	blx	r3
    32d6:	e04a      	b.n	336e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    32d8:	697b      	ldr	r3, [r7, #20]
    32da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    32dc:	b29a      	uxth	r2, r3
    32de:	230e      	movs	r3, #14
    32e0:	18fb      	adds	r3, r7, r3
    32e2:	05d2      	lsls	r2, r2, #23
    32e4:	0dd2      	lsrs	r2, r2, #23
    32e6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    32e8:	69bb      	ldr	r3, [r7, #24]
    32ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32ec:	220e      	movs	r2, #14
    32ee:	18ba      	adds	r2, r7, r2
    32f0:	8812      	ldrh	r2, [r2, #0]
    32f2:	b2d2      	uxtb	r2, r2
    32f4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    32f6:	69bb      	ldr	r3, [r7, #24]
    32f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32fa:	1c5a      	adds	r2, r3, #1
    32fc:	69bb      	ldr	r3, [r7, #24]
    32fe:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3300:	69bb      	ldr	r3, [r7, #24]
    3302:	795b      	ldrb	r3, [r3, #5]
    3304:	2b01      	cmp	r3, #1
    3306:	d10d      	bne.n	3324 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    3308:	69bb      	ldr	r3, [r7, #24]
    330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    330c:	220e      	movs	r2, #14
    330e:	18ba      	adds	r2, r7, r2
    3310:	8812      	ldrh	r2, [r2, #0]
    3312:	0a12      	lsrs	r2, r2, #8
    3314:	b292      	uxth	r2, r2
    3316:	b2d2      	uxtb	r2, r2
    3318:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    331a:	69bb      	ldr	r3, [r7, #24]
    331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    331e:	1c5a      	adds	r2, r3, #1
    3320:	69bb      	ldr	r3, [r7, #24]
    3322:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    3324:	69bb      	ldr	r3, [r7, #24]
    3326:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    3328:	b29b      	uxth	r3, r3
    332a:	3b01      	subs	r3, #1
    332c:	b29b      	uxth	r3, r3
    332e:	69ba      	ldr	r2, [r7, #24]
    3330:	1c19      	adds	r1, r3, #0
    3332:	8591      	strh	r1, [r2, #44]	; 0x2c
    3334:	2b00      	cmp	r3, #0
    3336:	d11a      	bne.n	336e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3338:	697b      	ldr	r3, [r7, #20]
    333a:	2204      	movs	r2, #4
    333c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    333e:	69bb      	ldr	r3, [r7, #24]
    3340:	2232      	movs	r2, #50	; 0x32
    3342:	2100      	movs	r1, #0
    3344:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    3346:	2310      	movs	r3, #16
    3348:	18fb      	adds	r3, r7, r3
    334a:	881b      	ldrh	r3, [r3, #0]
    334c:	2202      	movs	r2, #2
    334e:	4013      	ands	r3, r2
					if (callback_status
    3350:	d00d      	beq.n	336e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    3352:	69bb      	ldr	r3, [r7, #24]
    3354:	691b      	ldr	r3, [r3, #16]
    3356:	69ba      	ldr	r2, [r7, #24]
    3358:	0010      	movs	r0, r2
    335a:	4798      	blx	r3
    335c:	e007      	b.n	336e <_usart_interrupt_handler+0x2ae>
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	20000304 	.word	0x20000304
    3364:	0000309d 	.word	0x0000309d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    3368:	697b      	ldr	r3, [r7, #20]
    336a:	2204      	movs	r2, #4
    336c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    336e:	2312      	movs	r3, #18
    3370:	18fb      	adds	r3, r7, r3
    3372:	881b      	ldrh	r3, [r3, #0]
    3374:	2210      	movs	r2, #16
    3376:	4013      	ands	r3, r2
    3378:	d010      	beq.n	339c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    337a:	697b      	ldr	r3, [r7, #20]
    337c:	2210      	movs	r2, #16
    337e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    3380:	697b      	ldr	r3, [r7, #20]
    3382:	2210      	movs	r2, #16
    3384:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    3386:	2310      	movs	r3, #16
    3388:	18fb      	adds	r3, r7, r3
    338a:	881b      	ldrh	r3, [r3, #0]
    338c:	2210      	movs	r2, #16
    338e:	4013      	ands	r3, r2
    3390:	d004      	beq.n	339c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    3392:	69bb      	ldr	r3, [r7, #24]
    3394:	69db      	ldr	r3, [r3, #28]
    3396:	69ba      	ldr	r2, [r7, #24]
    3398:	0010      	movs	r0, r2
    339a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    339c:	2312      	movs	r3, #18
    339e:	18fb      	adds	r3, r7, r3
    33a0:	881b      	ldrh	r3, [r3, #0]
    33a2:	2220      	movs	r2, #32
    33a4:	4013      	ands	r3, r2
    33a6:	d010      	beq.n	33ca <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    33a8:	697b      	ldr	r3, [r7, #20]
    33aa:	2220      	movs	r2, #32
    33ac:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    33ae:	697b      	ldr	r3, [r7, #20]
    33b0:	2220      	movs	r2, #32
    33b2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    33b4:	2310      	movs	r3, #16
    33b6:	18fb      	adds	r3, r7, r3
    33b8:	881b      	ldrh	r3, [r3, #0]
    33ba:	2208      	movs	r2, #8
    33bc:	4013      	ands	r3, r2
    33be:	d004      	beq.n	33ca <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    33c0:	69bb      	ldr	r3, [r7, #24]
    33c2:	699b      	ldr	r3, [r3, #24]
    33c4:	69ba      	ldr	r2, [r7, #24]
    33c6:	0010      	movs	r0, r2
    33c8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    33ca:	2312      	movs	r3, #18
    33cc:	18fb      	adds	r3, r7, r3
    33ce:	881b      	ldrh	r3, [r3, #0]
    33d0:	2208      	movs	r2, #8
    33d2:	4013      	ands	r3, r2
    33d4:	d010      	beq.n	33f8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    33d6:	697b      	ldr	r3, [r7, #20]
    33d8:	2208      	movs	r2, #8
    33da:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    33dc:	697b      	ldr	r3, [r7, #20]
    33de:	2208      	movs	r2, #8
    33e0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    33e2:	2310      	movs	r3, #16
    33e4:	18fb      	adds	r3, r7, r3
    33e6:	881b      	ldrh	r3, [r3, #0]
    33e8:	2220      	movs	r2, #32
    33ea:	4013      	ands	r3, r2
    33ec:	d004      	beq.n	33f8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    33ee:	69bb      	ldr	r3, [r7, #24]
    33f0:	6a1b      	ldr	r3, [r3, #32]
    33f2:	69ba      	ldr	r2, [r7, #24]
    33f4:	0010      	movs	r0, r2
    33f6:	4798      	blx	r3
		}
	}
#endif
}
    33f8:	46c0      	nop			; (mov r8, r8)
    33fa:	46bd      	mov	sp, r7
    33fc:	b008      	add	sp, #32
    33fe:	bd80      	pop	{r7, pc}

00003400 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3400:	b580      	push	{r7, lr}
    3402:	b082      	sub	sp, #8
    3404:	af00      	add	r7, sp, #0
    3406:	0002      	movs	r2, r0
    3408:	1dfb      	adds	r3, r7, #7
    340a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    340c:	46c0      	nop			; (mov r8, r8)
    340e:	46bd      	mov	sp, r7
    3410:	b002      	add	sp, #8
    3412:	bd80      	pop	{r7, pc}

00003414 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3414:	b580      	push	{r7, lr}
    3416:	b084      	sub	sp, #16
    3418:	af00      	add	r7, sp, #0
    341a:	0002      	movs	r2, r0
    341c:	6039      	str	r1, [r7, #0]
    341e:	1dfb      	adds	r3, r7, #7
    3420:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3422:	4b13      	ldr	r3, [pc, #76]	; (3470 <_sercom_set_handler+0x5c>)
    3424:	781b      	ldrb	r3, [r3, #0]
    3426:	2201      	movs	r2, #1
    3428:	4053      	eors	r3, r2
    342a:	b2db      	uxtb	r3, r3
    342c:	2b00      	cmp	r3, #0
    342e:	d015      	beq.n	345c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3430:	2300      	movs	r3, #0
    3432:	60fb      	str	r3, [r7, #12]
    3434:	e00c      	b.n	3450 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3436:	4b0f      	ldr	r3, [pc, #60]	; (3474 <_sercom_set_handler+0x60>)
    3438:	68fa      	ldr	r2, [r7, #12]
    343a:	0092      	lsls	r2, r2, #2
    343c:	490e      	ldr	r1, [pc, #56]	; (3478 <_sercom_set_handler+0x64>)
    343e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3440:	4b0e      	ldr	r3, [pc, #56]	; (347c <_sercom_set_handler+0x68>)
    3442:	68fa      	ldr	r2, [r7, #12]
    3444:	0092      	lsls	r2, r2, #2
    3446:	2100      	movs	r1, #0
    3448:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    344a:	68fb      	ldr	r3, [r7, #12]
    344c:	3301      	adds	r3, #1
    344e:	60fb      	str	r3, [r7, #12]
    3450:	68fb      	ldr	r3, [r7, #12]
    3452:	2b05      	cmp	r3, #5
    3454:	d9ef      	bls.n	3436 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    3456:	4b06      	ldr	r3, [pc, #24]	; (3470 <_sercom_set_handler+0x5c>)
    3458:	2201      	movs	r2, #1
    345a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    345c:	1dfb      	adds	r3, r7, #7
    345e:	781a      	ldrb	r2, [r3, #0]
    3460:	4b04      	ldr	r3, [pc, #16]	; (3474 <_sercom_set_handler+0x60>)
    3462:	0092      	lsls	r2, r2, #2
    3464:	6839      	ldr	r1, [r7, #0]
    3466:	50d1      	str	r1, [r2, r3]
}
    3468:	46c0      	nop			; (mov r8, r8)
    346a:	46bd      	mov	sp, r7
    346c:	b004      	add	sp, #16
    346e:	bd80      	pop	{r7, pc}
    3470:	20000246 	.word	0x20000246
    3474:	20000248 	.word	0x20000248
    3478:	00003401 	.word	0x00003401
    347c:	20000304 	.word	0x20000304

00003480 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3480:	b590      	push	{r4, r7, lr}
    3482:	b085      	sub	sp, #20
    3484:	af00      	add	r7, sp, #0
    3486:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3488:	2308      	movs	r3, #8
    348a:	18fb      	adds	r3, r7, r3
    348c:	4a0b      	ldr	r2, [pc, #44]	; (34bc <_sercom_get_interrupt_vector+0x3c>)
    348e:	6811      	ldr	r1, [r2, #0]
    3490:	6019      	str	r1, [r3, #0]
    3492:	8892      	ldrh	r2, [r2, #4]
    3494:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3496:	230f      	movs	r3, #15
    3498:	18fc      	adds	r4, r7, r3
    349a:	687b      	ldr	r3, [r7, #4]
    349c:	0018      	movs	r0, r3
    349e:	4b08      	ldr	r3, [pc, #32]	; (34c0 <_sercom_get_interrupt_vector+0x40>)
    34a0:	4798      	blx	r3
    34a2:	0003      	movs	r3, r0
    34a4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    34a6:	230f      	movs	r3, #15
    34a8:	18fb      	adds	r3, r7, r3
    34aa:	781b      	ldrb	r3, [r3, #0]
    34ac:	2208      	movs	r2, #8
    34ae:	18ba      	adds	r2, r7, r2
    34b0:	5cd3      	ldrb	r3, [r2, r3]
    34b2:	b25b      	sxtb	r3, r3
}
    34b4:	0018      	movs	r0, r3
    34b6:	46bd      	mov	sp, r7
    34b8:	b005      	add	sp, #20
    34ba:	bd90      	pop	{r4, r7, pc}
    34bc:	0000ae84 	.word	0x0000ae84
    34c0:	00002599 	.word	0x00002599

000034c4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    34c4:	b580      	push	{r7, lr}
    34c6:	af00      	add	r7, sp, #0
    34c8:	4b03      	ldr	r3, [pc, #12]	; (34d8 <SERCOM0_Handler+0x14>)
    34ca:	681b      	ldr	r3, [r3, #0]
    34cc:	2000      	movs	r0, #0
    34ce:	4798      	blx	r3
    34d0:	46c0      	nop			; (mov r8, r8)
    34d2:	46bd      	mov	sp, r7
    34d4:	bd80      	pop	{r7, pc}
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	20000248 	.word	0x20000248

000034dc <SERCOM1_Handler>:
    34dc:	b580      	push	{r7, lr}
    34de:	af00      	add	r7, sp, #0
    34e0:	4b03      	ldr	r3, [pc, #12]	; (34f0 <SERCOM1_Handler+0x14>)
    34e2:	685b      	ldr	r3, [r3, #4]
    34e4:	2001      	movs	r0, #1
    34e6:	4798      	blx	r3
    34e8:	46c0      	nop			; (mov r8, r8)
    34ea:	46bd      	mov	sp, r7
    34ec:	bd80      	pop	{r7, pc}
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	20000248 	.word	0x20000248

000034f4 <SERCOM2_Handler>:
    34f4:	b580      	push	{r7, lr}
    34f6:	af00      	add	r7, sp, #0
    34f8:	4b03      	ldr	r3, [pc, #12]	; (3508 <SERCOM2_Handler+0x14>)
    34fa:	689b      	ldr	r3, [r3, #8]
    34fc:	2002      	movs	r0, #2
    34fe:	4798      	blx	r3
    3500:	46c0      	nop			; (mov r8, r8)
    3502:	46bd      	mov	sp, r7
    3504:	bd80      	pop	{r7, pc}
    3506:	46c0      	nop			; (mov r8, r8)
    3508:	20000248 	.word	0x20000248

0000350c <SERCOM3_Handler>:
    350c:	b580      	push	{r7, lr}
    350e:	af00      	add	r7, sp, #0
    3510:	4b03      	ldr	r3, [pc, #12]	; (3520 <SERCOM3_Handler+0x14>)
    3512:	68db      	ldr	r3, [r3, #12]
    3514:	2003      	movs	r0, #3
    3516:	4798      	blx	r3
    3518:	46c0      	nop			; (mov r8, r8)
    351a:	46bd      	mov	sp, r7
    351c:	bd80      	pop	{r7, pc}
    351e:	46c0      	nop			; (mov r8, r8)
    3520:	20000248 	.word	0x20000248

00003524 <SERCOM4_Handler>:
    3524:	b580      	push	{r7, lr}
    3526:	af00      	add	r7, sp, #0
    3528:	4b03      	ldr	r3, [pc, #12]	; (3538 <SERCOM4_Handler+0x14>)
    352a:	691b      	ldr	r3, [r3, #16]
    352c:	2004      	movs	r0, #4
    352e:	4798      	blx	r3
    3530:	46c0      	nop			; (mov r8, r8)
    3532:	46bd      	mov	sp, r7
    3534:	bd80      	pop	{r7, pc}
    3536:	46c0      	nop			; (mov r8, r8)
    3538:	20000248 	.word	0x20000248

0000353c <SERCOM5_Handler>:
    353c:	b580      	push	{r7, lr}
    353e:	af00      	add	r7, sp, #0
    3540:	4b03      	ldr	r3, [pc, #12]	; (3550 <SERCOM5_Handler+0x14>)
    3542:	695b      	ldr	r3, [r3, #20]
    3544:	2005      	movs	r0, #5
    3546:	4798      	blx	r3
    3548:	46c0      	nop			; (mov r8, r8)
    354a:	46bd      	mov	sp, r7
    354c:	bd80      	pop	{r7, pc}
    354e:	46c0      	nop			; (mov r8, r8)
    3550:	20000248 	.word	0x20000248

00003554 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3554:	b580      	push	{r7, lr}
    3556:	b082      	sub	sp, #8
    3558:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    355a:	4b10      	ldr	r3, [pc, #64]	; (359c <cpu_irq_enter_critical+0x48>)
    355c:	681b      	ldr	r3, [r3, #0]
    355e:	2b00      	cmp	r3, #0
    3560:	d112      	bne.n	3588 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3562:	f3ef 8310 	mrs	r3, PRIMASK
    3566:	607b      	str	r3, [r7, #4]
  return(result);
    3568:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    356a:	2b00      	cmp	r3, #0
    356c:	d109      	bne.n	3582 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    356e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3570:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3574:	4b0a      	ldr	r3, [pc, #40]	; (35a0 <cpu_irq_enter_critical+0x4c>)
    3576:	2200      	movs	r2, #0
    3578:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    357a:	4b0a      	ldr	r3, [pc, #40]	; (35a4 <cpu_irq_enter_critical+0x50>)
    357c:	2201      	movs	r2, #1
    357e:	701a      	strb	r2, [r3, #0]
    3580:	e002      	b.n	3588 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3582:	4b08      	ldr	r3, [pc, #32]	; (35a4 <cpu_irq_enter_critical+0x50>)
    3584:	2200      	movs	r2, #0
    3586:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3588:	4b04      	ldr	r3, [pc, #16]	; (359c <cpu_irq_enter_critical+0x48>)
    358a:	681b      	ldr	r3, [r3, #0]
    358c:	1c5a      	adds	r2, r3, #1
    358e:	4b03      	ldr	r3, [pc, #12]	; (359c <cpu_irq_enter_critical+0x48>)
    3590:	601a      	str	r2, [r3, #0]
}
    3592:	46c0      	nop			; (mov r8, r8)
    3594:	46bd      	mov	sp, r7
    3596:	b002      	add	sp, #8
    3598:	bd80      	pop	{r7, pc}
    359a:	46c0      	nop			; (mov r8, r8)
    359c:	20000260 	.word	0x20000260
    35a0:	20000028 	.word	0x20000028
    35a4:	20000264 	.word	0x20000264

000035a8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    35a8:	b580      	push	{r7, lr}
    35aa:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    35ac:	4b0b      	ldr	r3, [pc, #44]	; (35dc <cpu_irq_leave_critical+0x34>)
    35ae:	681b      	ldr	r3, [r3, #0]
    35b0:	1e5a      	subs	r2, r3, #1
    35b2:	4b0a      	ldr	r3, [pc, #40]	; (35dc <cpu_irq_leave_critical+0x34>)
    35b4:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    35b6:	4b09      	ldr	r3, [pc, #36]	; (35dc <cpu_irq_leave_critical+0x34>)
    35b8:	681b      	ldr	r3, [r3, #0]
    35ba:	2b00      	cmp	r3, #0
    35bc:	d10a      	bne.n	35d4 <cpu_irq_leave_critical+0x2c>
    35be:	4b08      	ldr	r3, [pc, #32]	; (35e0 <cpu_irq_leave_critical+0x38>)
    35c0:	781b      	ldrb	r3, [r3, #0]
    35c2:	b2db      	uxtb	r3, r3
    35c4:	2b00      	cmp	r3, #0
    35c6:	d005      	beq.n	35d4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    35c8:	4b06      	ldr	r3, [pc, #24]	; (35e4 <cpu_irq_leave_critical+0x3c>)
    35ca:	2201      	movs	r2, #1
    35cc:	701a      	strb	r2, [r3, #0]
    35ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    35d2:	b662      	cpsie	i
	}
}
    35d4:	46c0      	nop			; (mov r8, r8)
    35d6:	46bd      	mov	sp, r7
    35d8:	bd80      	pop	{r7, pc}
    35da:	46c0      	nop			; (mov r8, r8)
    35dc:	20000260 	.word	0x20000260
    35e0:	20000264 	.word	0x20000264
    35e4:	20000028 	.word	0x20000028

000035e8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    35e8:	b580      	push	{r7, lr}
    35ea:	b084      	sub	sp, #16
    35ec:	af00      	add	r7, sp, #0
    35ee:	0002      	movs	r2, r0
    35f0:	1dfb      	adds	r3, r7, #7
    35f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    35f4:	230f      	movs	r3, #15
    35f6:	18fb      	adds	r3, r7, r3
    35f8:	1dfa      	adds	r2, r7, #7
    35fa:	7812      	ldrb	r2, [r2, #0]
    35fc:	09d2      	lsrs	r2, r2, #7
    35fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3600:	230e      	movs	r3, #14
    3602:	18fb      	adds	r3, r7, r3
    3604:	1dfa      	adds	r2, r7, #7
    3606:	7812      	ldrb	r2, [r2, #0]
    3608:	0952      	lsrs	r2, r2, #5
    360a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    360c:	4b0d      	ldr	r3, [pc, #52]	; (3644 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    360e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3610:	230f      	movs	r3, #15
    3612:	18fb      	adds	r3, r7, r3
    3614:	781b      	ldrb	r3, [r3, #0]
    3616:	2b00      	cmp	r3, #0
    3618:	d10f      	bne.n	363a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    361a:	230f      	movs	r3, #15
    361c:	18fb      	adds	r3, r7, r3
    361e:	781b      	ldrb	r3, [r3, #0]
    3620:	009b      	lsls	r3, r3, #2
    3622:	2210      	movs	r2, #16
    3624:	4694      	mov	ip, r2
    3626:	44bc      	add	ip, r7
    3628:	4463      	add	r3, ip
    362a:	3b08      	subs	r3, #8
    362c:	681a      	ldr	r2, [r3, #0]
    362e:	230e      	movs	r3, #14
    3630:	18fb      	adds	r3, r7, r3
    3632:	781b      	ldrb	r3, [r3, #0]
    3634:	01db      	lsls	r3, r3, #7
    3636:	18d3      	adds	r3, r2, r3
    3638:	e000      	b.n	363c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    363a:	2300      	movs	r3, #0
	}
}
    363c:	0018      	movs	r0, r3
    363e:	46bd      	mov	sp, r7
    3640:	b004      	add	sp, #16
    3642:	bd80      	pop	{r7, pc}
    3644:	41004400 	.word	0x41004400

00003648 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3648:	b580      	push	{r7, lr}
    364a:	b082      	sub	sp, #8
    364c:	af00      	add	r7, sp, #0
    364e:	0002      	movs	r2, r0
    3650:	1dfb      	adds	r3, r7, #7
    3652:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3654:	1dfb      	adds	r3, r7, #7
    3656:	781b      	ldrb	r3, [r3, #0]
    3658:	0018      	movs	r0, r3
    365a:	4b03      	ldr	r3, [pc, #12]	; (3668 <port_get_group_from_gpio_pin+0x20>)
    365c:	4798      	blx	r3
    365e:	0003      	movs	r3, r0
}
    3660:	0018      	movs	r0, r3
    3662:	46bd      	mov	sp, r7
    3664:	b002      	add	sp, #8
    3666:	bd80      	pop	{r7, pc}
    3668:	000035e9 	.word	0x000035e9

0000366c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    366c:	b580      	push	{r7, lr}
    366e:	b082      	sub	sp, #8
    3670:	af00      	add	r7, sp, #0
    3672:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3674:	687b      	ldr	r3, [r7, #4]
    3676:	2200      	movs	r2, #0
    3678:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    367a:	687b      	ldr	r3, [r7, #4]
    367c:	2201      	movs	r2, #1
    367e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3680:	687b      	ldr	r3, [r7, #4]
    3682:	2200      	movs	r2, #0
    3684:	709a      	strb	r2, [r3, #2]
}
    3686:	46c0      	nop			; (mov r8, r8)
    3688:	46bd      	mov	sp, r7
    368a:	b002      	add	sp, #8
    368c:	bd80      	pop	{r7, pc}
	...

00003690 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3690:	b580      	push	{r7, lr}
    3692:	b084      	sub	sp, #16
    3694:	af00      	add	r7, sp, #0
    3696:	0002      	movs	r2, r0
    3698:	1dfb      	adds	r3, r7, #7
    369a:	701a      	strb	r2, [r3, #0]
    369c:	1dbb      	adds	r3, r7, #6
    369e:	1c0a      	adds	r2, r1, #0
    36a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    36a2:	1dfb      	adds	r3, r7, #7
    36a4:	781b      	ldrb	r3, [r3, #0]
    36a6:	0018      	movs	r0, r3
    36a8:	4b0d      	ldr	r3, [pc, #52]	; (36e0 <port_pin_set_output_level+0x50>)
    36aa:	4798      	blx	r3
    36ac:	0003      	movs	r3, r0
    36ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    36b0:	1dfb      	adds	r3, r7, #7
    36b2:	781b      	ldrb	r3, [r3, #0]
    36b4:	221f      	movs	r2, #31
    36b6:	4013      	ands	r3, r2
    36b8:	2201      	movs	r2, #1
    36ba:	409a      	lsls	r2, r3
    36bc:	0013      	movs	r3, r2
    36be:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    36c0:	1dbb      	adds	r3, r7, #6
    36c2:	781b      	ldrb	r3, [r3, #0]
    36c4:	2b00      	cmp	r3, #0
    36c6:	d003      	beq.n	36d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    36c8:	68fb      	ldr	r3, [r7, #12]
    36ca:	68ba      	ldr	r2, [r7, #8]
    36cc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    36ce:	e002      	b.n	36d6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    36d0:	68fb      	ldr	r3, [r7, #12]
    36d2:	68ba      	ldr	r2, [r7, #8]
    36d4:	615a      	str	r2, [r3, #20]
}
    36d6:	46c0      	nop			; (mov r8, r8)
    36d8:	46bd      	mov	sp, r7
    36da:	b004      	add	sp, #16
    36dc:	bd80      	pop	{r7, pc}
    36de:	46c0      	nop			; (mov r8, r8)
    36e0:	00003649 	.word	0x00003649

000036e4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    36e4:	b580      	push	{r7, lr}
    36e6:	b082      	sub	sp, #8
    36e8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    36ea:	1d3b      	adds	r3, r7, #4
    36ec:	0018      	movs	r0, r3
    36ee:	4b0e      	ldr	r3, [pc, #56]	; (3728 <system_board_init+0x44>)
    36f0:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    36f2:	1d3b      	adds	r3, r7, #4
    36f4:	2201      	movs	r2, #1
    36f6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    36f8:	1d3b      	adds	r3, r7, #4
    36fa:	0019      	movs	r1, r3
    36fc:	2017      	movs	r0, #23
    36fe:	4b0b      	ldr	r3, [pc, #44]	; (372c <system_board_init+0x48>)
    3700:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    3702:	2101      	movs	r1, #1
    3704:	2017      	movs	r0, #23
    3706:	4b0a      	ldr	r3, [pc, #40]	; (3730 <system_board_init+0x4c>)
    3708:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    370a:	1d3b      	adds	r3, r7, #4
    370c:	2200      	movs	r2, #0
    370e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3710:	1d3b      	adds	r3, r7, #4
    3712:	2201      	movs	r2, #1
    3714:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3716:	1d3b      	adds	r3, r7, #4
    3718:	0019      	movs	r1, r3
    371a:	2037      	movs	r0, #55	; 0x37
    371c:	4b03      	ldr	r3, [pc, #12]	; (372c <system_board_init+0x48>)
    371e:	4798      	blx	r3
}
    3720:	46c0      	nop			; (mov r8, r8)
    3722:	46bd      	mov	sp, r7
    3724:	b002      	add	sp, #8
    3726:	bd80      	pop	{r7, pc}
    3728:	0000366d 	.word	0x0000366d
    372c:	0000375d 	.word	0x0000375d
    3730:	00003691 	.word	0x00003691

00003734 <system_pinmux_get_config_defaults>:
{
    3734:	b580      	push	{r7, lr}
    3736:	b082      	sub	sp, #8
    3738:	af00      	add	r7, sp, #0
    373a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    373c:	687b      	ldr	r3, [r7, #4]
    373e:	2280      	movs	r2, #128	; 0x80
    3740:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3742:	687b      	ldr	r3, [r7, #4]
    3744:	2200      	movs	r2, #0
    3746:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3748:	687b      	ldr	r3, [r7, #4]
    374a:	2201      	movs	r2, #1
    374c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    374e:	687b      	ldr	r3, [r7, #4]
    3750:	2200      	movs	r2, #0
    3752:	70da      	strb	r2, [r3, #3]
}
    3754:	46c0      	nop			; (mov r8, r8)
    3756:	46bd      	mov	sp, r7
    3758:	b002      	add	sp, #8
    375a:	bd80      	pop	{r7, pc}

0000375c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    375c:	b580      	push	{r7, lr}
    375e:	b084      	sub	sp, #16
    3760:	af00      	add	r7, sp, #0
    3762:	0002      	movs	r2, r0
    3764:	6039      	str	r1, [r7, #0]
    3766:	1dfb      	adds	r3, r7, #7
    3768:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    376a:	230c      	movs	r3, #12
    376c:	18fb      	adds	r3, r7, r3
    376e:	0018      	movs	r0, r3
    3770:	4b10      	ldr	r3, [pc, #64]	; (37b4 <port_pin_set_config+0x58>)
    3772:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    3774:	230c      	movs	r3, #12
    3776:	18fb      	adds	r3, r7, r3
    3778:	2280      	movs	r2, #128	; 0x80
    377a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    377c:	683b      	ldr	r3, [r7, #0]
    377e:	781a      	ldrb	r2, [r3, #0]
    3780:	230c      	movs	r3, #12
    3782:	18fb      	adds	r3, r7, r3
    3784:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3786:	683b      	ldr	r3, [r7, #0]
    3788:	785a      	ldrb	r2, [r3, #1]
    378a:	230c      	movs	r3, #12
    378c:	18fb      	adds	r3, r7, r3
    378e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3790:	683b      	ldr	r3, [r7, #0]
    3792:	789a      	ldrb	r2, [r3, #2]
    3794:	230c      	movs	r3, #12
    3796:	18fb      	adds	r3, r7, r3
    3798:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    379a:	230c      	movs	r3, #12
    379c:	18fa      	adds	r2, r7, r3
    379e:	1dfb      	adds	r3, r7, #7
    37a0:	781b      	ldrb	r3, [r3, #0]
    37a2:	0011      	movs	r1, r2
    37a4:	0018      	movs	r0, r3
    37a6:	4b04      	ldr	r3, [pc, #16]	; (37b8 <port_pin_set_config+0x5c>)
    37a8:	4798      	blx	r3
}
    37aa:	46c0      	nop			; (mov r8, r8)
    37ac:	46bd      	mov	sp, r7
    37ae:	b004      	add	sp, #16
    37b0:	bd80      	pop	{r7, pc}
    37b2:	46c0      	nop			; (mov r8, r8)
    37b4:	00003735 	.word	0x00003735
    37b8:	000046e5 	.word	0x000046e5

000037bc <system_gclk_gen_get_config_defaults>:
{
    37bc:	b580      	push	{r7, lr}
    37be:	b082      	sub	sp, #8
    37c0:	af00      	add	r7, sp, #0
    37c2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    37c4:	687b      	ldr	r3, [r7, #4]
    37c6:	2201      	movs	r2, #1
    37c8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    37ca:	687b      	ldr	r3, [r7, #4]
    37cc:	2200      	movs	r2, #0
    37ce:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    37d0:	687b      	ldr	r3, [r7, #4]
    37d2:	2206      	movs	r2, #6
    37d4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    37d6:	687b      	ldr	r3, [r7, #4]
    37d8:	2200      	movs	r2, #0
    37da:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    37dc:	687b      	ldr	r3, [r7, #4]
    37de:	2200      	movs	r2, #0
    37e0:	725a      	strb	r2, [r3, #9]
}
    37e2:	46c0      	nop			; (mov r8, r8)
    37e4:	46bd      	mov	sp, r7
    37e6:	b002      	add	sp, #8
    37e8:	bd80      	pop	{r7, pc}

000037ea <system_gclk_chan_get_config_defaults>:
{
    37ea:	b580      	push	{r7, lr}
    37ec:	b082      	sub	sp, #8
    37ee:	af00      	add	r7, sp, #0
    37f0:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    37f2:	687b      	ldr	r3, [r7, #4]
    37f4:	2200      	movs	r2, #0
    37f6:	701a      	strb	r2, [r3, #0]
}
    37f8:	46c0      	nop			; (mov r8, r8)
    37fa:	46bd      	mov	sp, r7
    37fc:	b002      	add	sp, #8
    37fe:	bd80      	pop	{r7, pc}

00003800 <system_clock_source_xosc32k_get_config_defaults>:
{
    3800:	b580      	push	{r7, lr}
    3802:	b082      	sub	sp, #8
    3804:	af00      	add	r7, sp, #0
    3806:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    3808:	687b      	ldr	r3, [r7, #4]
    380a:	2200      	movs	r2, #0
    380c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    380e:	687b      	ldr	r3, [r7, #4]
    3810:	2204      	movs	r2, #4
    3812:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    3814:	687b      	ldr	r3, [r7, #4]
    3816:	2200      	movs	r2, #0
    3818:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    381a:	687b      	ldr	r3, [r7, #4]
    381c:	2280      	movs	r2, #128	; 0x80
    381e:	0212      	lsls	r2, r2, #8
    3820:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    3822:	687b      	ldr	r3, [r7, #4]
    3824:	2200      	movs	r2, #0
    3826:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    3828:	687b      	ldr	r3, [r7, #4]
    382a:	2201      	movs	r2, #1
    382c:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	2200      	movs	r2, #0
    3832:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    3834:	687b      	ldr	r3, [r7, #4]
    3836:	2201      	movs	r2, #1
    3838:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    383a:	687b      	ldr	r3, [r7, #4]
    383c:	2200      	movs	r2, #0
    383e:	739a      	strb	r2, [r3, #14]
}
    3840:	46c0      	nop			; (mov r8, r8)
    3842:	46bd      	mov	sp, r7
    3844:	b002      	add	sp, #8
    3846:	bd80      	pop	{r7, pc}

00003848 <system_clock_source_osc8m_get_config_defaults>:
{
    3848:	b580      	push	{r7, lr}
    384a:	b082      	sub	sp, #8
    384c:	af00      	add	r7, sp, #0
    384e:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    3850:	687b      	ldr	r3, [r7, #4]
    3852:	2203      	movs	r2, #3
    3854:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    3856:	687b      	ldr	r3, [r7, #4]
    3858:	2200      	movs	r2, #0
    385a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    385c:	687b      	ldr	r3, [r7, #4]
    385e:	2201      	movs	r2, #1
    3860:	709a      	strb	r2, [r3, #2]
}
    3862:	46c0      	nop			; (mov r8, r8)
    3864:	46bd      	mov	sp, r7
    3866:	b002      	add	sp, #8
    3868:	bd80      	pop	{r7, pc}

0000386a <system_clock_source_dfll_get_config_defaults>:
{
    386a:	b580      	push	{r7, lr}
    386c:	b082      	sub	sp, #8
    386e:	af00      	add	r7, sp, #0
    3870:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    3872:	687b      	ldr	r3, [r7, #4]
    3874:	2200      	movs	r2, #0
    3876:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3878:	687b      	ldr	r3, [r7, #4]
    387a:	2200      	movs	r2, #0
    387c:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    387e:	687b      	ldr	r3, [r7, #4]
    3880:	2200      	movs	r2, #0
    3882:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3884:	687b      	ldr	r3, [r7, #4]
    3886:	2200      	movs	r2, #0
    3888:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    388a:	687b      	ldr	r3, [r7, #4]
    388c:	2200      	movs	r2, #0
    388e:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	2201      	movs	r2, #1
    3894:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    3896:	687b      	ldr	r3, [r7, #4]
    3898:	2207      	movs	r2, #7
    389a:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    389c:	687b      	ldr	r3, [r7, #4]
    389e:	223f      	movs	r2, #63	; 0x3f
    38a0:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    38a2:	687b      	ldr	r3, [r7, #4]
    38a4:	2201      	movs	r2, #1
    38a6:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    38a8:	687b      	ldr	r3, [r7, #4]
    38aa:	2201      	movs	r2, #1
    38ac:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    38ae:	687b      	ldr	r3, [r7, #4]
    38b0:	2206      	movs	r2, #6
    38b2:	821a      	strh	r2, [r3, #16]
}
    38b4:	46c0      	nop			; (mov r8, r8)
    38b6:	46bd      	mov	sp, r7
    38b8:	b002      	add	sp, #8
    38ba:	bd80      	pop	{r7, pc}

000038bc <system_cpu_clock_set_divider>:
{
    38bc:	b580      	push	{r7, lr}
    38be:	b082      	sub	sp, #8
    38c0:	af00      	add	r7, sp, #0
    38c2:	0002      	movs	r2, r0
    38c4:	1dfb      	adds	r3, r7, #7
    38c6:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    38c8:	4a03      	ldr	r2, [pc, #12]	; (38d8 <system_cpu_clock_set_divider+0x1c>)
    38ca:	1dfb      	adds	r3, r7, #7
    38cc:	781b      	ldrb	r3, [r3, #0]
    38ce:	7213      	strb	r3, [r2, #8]
}
    38d0:	46c0      	nop			; (mov r8, r8)
    38d2:	46bd      	mov	sp, r7
    38d4:	b002      	add	sp, #8
    38d6:	bd80      	pop	{r7, pc}
    38d8:	40000400 	.word	0x40000400

000038dc <system_apb_clock_set_divider>:
{
    38dc:	b580      	push	{r7, lr}
    38de:	b082      	sub	sp, #8
    38e0:	af00      	add	r7, sp, #0
    38e2:	0002      	movs	r2, r0
    38e4:	1dfb      	adds	r3, r7, #7
    38e6:	701a      	strb	r2, [r3, #0]
    38e8:	1dbb      	adds	r3, r7, #6
    38ea:	1c0a      	adds	r2, r1, #0
    38ec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    38ee:	1dfb      	adds	r3, r7, #7
    38f0:	781b      	ldrb	r3, [r3, #0]
    38f2:	2b01      	cmp	r3, #1
    38f4:	d008      	beq.n	3908 <system_apb_clock_set_divider+0x2c>
    38f6:	2b02      	cmp	r3, #2
    38f8:	d00b      	beq.n	3912 <system_apb_clock_set_divider+0x36>
    38fa:	2b00      	cmp	r3, #0
    38fc:	d10e      	bne.n	391c <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    38fe:	4a0b      	ldr	r2, [pc, #44]	; (392c <system_apb_clock_set_divider+0x50>)
    3900:	1dbb      	adds	r3, r7, #6
    3902:	781b      	ldrb	r3, [r3, #0]
    3904:	7253      	strb	r3, [r2, #9]
			break;
    3906:	e00b      	b.n	3920 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    3908:	4a08      	ldr	r2, [pc, #32]	; (392c <system_apb_clock_set_divider+0x50>)
    390a:	1dbb      	adds	r3, r7, #6
    390c:	781b      	ldrb	r3, [r3, #0]
    390e:	7293      	strb	r3, [r2, #10]
			break;
    3910:	e006      	b.n	3920 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    3912:	4a06      	ldr	r2, [pc, #24]	; (392c <system_apb_clock_set_divider+0x50>)
    3914:	1dbb      	adds	r3, r7, #6
    3916:	781b      	ldrb	r3, [r3, #0]
    3918:	72d3      	strb	r3, [r2, #11]
			break;
    391a:	e001      	b.n	3920 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    391c:	2317      	movs	r3, #23
    391e:	e000      	b.n	3922 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    3920:	2300      	movs	r3, #0
}
    3922:	0018      	movs	r0, r3
    3924:	46bd      	mov	sp, r7
    3926:	b002      	add	sp, #8
    3928:	bd80      	pop	{r7, pc}
    392a:	46c0      	nop			; (mov r8, r8)
    392c:	40000400 	.word	0x40000400

00003930 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    3930:	b580      	push	{r7, lr}
    3932:	b082      	sub	sp, #8
    3934:	af00      	add	r7, sp, #0
    3936:	0002      	movs	r2, r0
    3938:	1dfb      	adds	r3, r7, #7
    393a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    393c:	4a08      	ldr	r2, [pc, #32]	; (3960 <system_flash_set_waitstates+0x30>)
    393e:	1dfb      	adds	r3, r7, #7
    3940:	781b      	ldrb	r3, [r3, #0]
    3942:	210f      	movs	r1, #15
    3944:	400b      	ands	r3, r1
    3946:	b2d9      	uxtb	r1, r3
    3948:	6853      	ldr	r3, [r2, #4]
    394a:	200f      	movs	r0, #15
    394c:	4001      	ands	r1, r0
    394e:	0049      	lsls	r1, r1, #1
    3950:	201e      	movs	r0, #30
    3952:	4383      	bics	r3, r0
    3954:	430b      	orrs	r3, r1
    3956:	6053      	str	r3, [r2, #4]
}
    3958:	46c0      	nop			; (mov r8, r8)
    395a:	46bd      	mov	sp, r7
    395c:	b002      	add	sp, #8
    395e:	bd80      	pop	{r7, pc}
    3960:	41004000 	.word	0x41004000

00003964 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    3964:	b580      	push	{r7, lr}
    3966:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3968:	46c0      	nop			; (mov r8, r8)
    396a:	4b04      	ldr	r3, [pc, #16]	; (397c <_system_dfll_wait_for_sync+0x18>)
    396c:	68db      	ldr	r3, [r3, #12]
    396e:	2210      	movs	r2, #16
    3970:	4013      	ands	r3, r2
    3972:	d0fa      	beq.n	396a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    3974:	46c0      	nop			; (mov r8, r8)
    3976:	46bd      	mov	sp, r7
    3978:	bd80      	pop	{r7, pc}
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	40000800 	.word	0x40000800

00003980 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    3980:	b580      	push	{r7, lr}
    3982:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3984:	4b0c      	ldr	r3, [pc, #48]	; (39b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3986:	2202      	movs	r2, #2
    3988:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    398a:	4b0c      	ldr	r3, [pc, #48]	; (39bc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    398c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    398e:	4a0a      	ldr	r2, [pc, #40]	; (39b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3990:	4b0b      	ldr	r3, [pc, #44]	; (39c0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3992:	689b      	ldr	r3, [r3, #8]
    3994:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3996:	4a08      	ldr	r2, [pc, #32]	; (39b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3998:	4b09      	ldr	r3, [pc, #36]	; (39c0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    399a:	685b      	ldr	r3, [r3, #4]
    399c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    399e:	4b06      	ldr	r3, [pc, #24]	; (39b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    39a0:	2200      	movs	r2, #0
    39a2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    39a4:	4b05      	ldr	r3, [pc, #20]	; (39bc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    39a6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    39a8:	4a03      	ldr	r2, [pc, #12]	; (39b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    39aa:	4b05      	ldr	r3, [pc, #20]	; (39c0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    39ac:	681b      	ldr	r3, [r3, #0]
    39ae:	b29b      	uxth	r3, r3
    39b0:	8493      	strh	r3, [r2, #36]	; 0x24
}
    39b2:	46c0      	nop			; (mov r8, r8)
    39b4:	46bd      	mov	sp, r7
    39b6:	bd80      	pop	{r7, pc}
    39b8:	40000800 	.word	0x40000800
    39bc:	00003965 	.word	0x00003965
    39c0:	20000268 	.word	0x20000268

000039c4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    39c4:	b580      	push	{r7, lr}
    39c6:	b082      	sub	sp, #8
    39c8:	af00      	add	r7, sp, #0
    39ca:	0002      	movs	r2, r0
    39cc:	1dfb      	adds	r3, r7, #7
    39ce:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    39d0:	1dfb      	adds	r3, r7, #7
    39d2:	781b      	ldrb	r3, [r3, #0]
    39d4:	2b08      	cmp	r3, #8
    39d6:	d840      	bhi.n	3a5a <system_clock_source_get_hz+0x96>
    39d8:	009a      	lsls	r2, r3, #2
    39da:	4b22      	ldr	r3, [pc, #136]	; (3a64 <system_clock_source_get_hz+0xa0>)
    39dc:	18d3      	adds	r3, r2, r3
    39de:	681b      	ldr	r3, [r3, #0]
    39e0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    39e2:	4b21      	ldr	r3, [pc, #132]	; (3a68 <system_clock_source_get_hz+0xa4>)
    39e4:	691b      	ldr	r3, [r3, #16]
    39e6:	e039      	b.n	3a5c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    39e8:	4b20      	ldr	r3, [pc, #128]	; (3a6c <system_clock_source_get_hz+0xa8>)
    39ea:	6a1b      	ldr	r3, [r3, #32]
    39ec:	059b      	lsls	r3, r3, #22
    39ee:	0f9b      	lsrs	r3, r3, #30
    39f0:	b2db      	uxtb	r3, r3
    39f2:	001a      	movs	r2, r3
    39f4:	4b1e      	ldr	r3, [pc, #120]	; (3a70 <system_clock_source_get_hz+0xac>)
    39f6:	40d3      	lsrs	r3, r2
    39f8:	e030      	b.n	3a5c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    39fa:	2380      	movs	r3, #128	; 0x80
    39fc:	021b      	lsls	r3, r3, #8
    39fe:	e02d      	b.n	3a5c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    3a00:	2380      	movs	r3, #128	; 0x80
    3a02:	021b      	lsls	r3, r3, #8
    3a04:	e02a      	b.n	3a5c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3a06:	4b18      	ldr	r3, [pc, #96]	; (3a68 <system_clock_source_get_hz+0xa4>)
    3a08:	695b      	ldr	r3, [r3, #20]
    3a0a:	e027      	b.n	3a5c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3a0c:	4b16      	ldr	r3, [pc, #88]	; (3a68 <system_clock_source_get_hz+0xa4>)
    3a0e:	681b      	ldr	r3, [r3, #0]
    3a10:	2202      	movs	r2, #2
    3a12:	4013      	ands	r3, r2
    3a14:	d101      	bne.n	3a1a <system_clock_source_get_hz+0x56>
			return 0;
    3a16:	2300      	movs	r3, #0
    3a18:	e020      	b.n	3a5c <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    3a1a:	4b16      	ldr	r3, [pc, #88]	; (3a74 <system_clock_source_get_hz+0xb0>)
    3a1c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3a1e:	4b12      	ldr	r3, [pc, #72]	; (3a68 <system_clock_source_get_hz+0xa4>)
    3a20:	681b      	ldr	r3, [r3, #0]
    3a22:	2204      	movs	r2, #4
    3a24:	4013      	ands	r3, r2
    3a26:	d009      	beq.n	3a3c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3a28:	2000      	movs	r0, #0
    3a2a:	4b13      	ldr	r3, [pc, #76]	; (3a78 <system_clock_source_get_hz+0xb4>)
    3a2c:	4798      	blx	r3
    3a2e:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    3a30:	4b0d      	ldr	r3, [pc, #52]	; (3a68 <system_clock_source_get_hz+0xa4>)
    3a32:	689b      	ldr	r3, [r3, #8]
    3a34:	041b      	lsls	r3, r3, #16
    3a36:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3a38:	4353      	muls	r3, r2
    3a3a:	e00f      	b.n	3a5c <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    3a3c:	4b0f      	ldr	r3, [pc, #60]	; (3a7c <system_clock_source_get_hz+0xb8>)
    3a3e:	e00d      	b.n	3a5c <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3a40:	4a0a      	ldr	r2, [pc, #40]	; (3a6c <system_clock_source_get_hz+0xa8>)
    3a42:	2350      	movs	r3, #80	; 0x50
    3a44:	5cd3      	ldrb	r3, [r2, r3]
    3a46:	b2db      	uxtb	r3, r3
    3a48:	001a      	movs	r2, r3
    3a4a:	2304      	movs	r3, #4
    3a4c:	4013      	ands	r3, r2
    3a4e:	d101      	bne.n	3a54 <system_clock_source_get_hz+0x90>
			return 0;
    3a50:	2300      	movs	r3, #0
    3a52:	e003      	b.n	3a5c <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    3a54:	4b04      	ldr	r3, [pc, #16]	; (3a68 <system_clock_source_get_hz+0xa4>)
    3a56:	68db      	ldr	r3, [r3, #12]
    3a58:	e000      	b.n	3a5c <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    3a5a:	2300      	movs	r3, #0
	}
}
    3a5c:	0018      	movs	r0, r3
    3a5e:	46bd      	mov	sp, r7
    3a60:	b002      	add	sp, #8
    3a62:	bd80      	pop	{r7, pc}
    3a64:	0000ae8c 	.word	0x0000ae8c
    3a68:	20000268 	.word	0x20000268
    3a6c:	40000800 	.word	0x40000800
    3a70:	007a1200 	.word	0x007a1200
    3a74:	00003965 	.word	0x00003965
    3a78:	0000451d 	.word	0x0000451d
    3a7c:	02dc6c00 	.word	0x02dc6c00

00003a80 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3a80:	b580      	push	{r7, lr}
    3a82:	b084      	sub	sp, #16
    3a84:	af00      	add	r7, sp, #0
    3a86:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3a88:	4b1a      	ldr	r3, [pc, #104]	; (3af4 <system_clock_source_osc8m_set_config+0x74>)
    3a8a:	6a1b      	ldr	r3, [r3, #32]
    3a8c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3a8e:	687b      	ldr	r3, [r7, #4]
    3a90:	781b      	ldrb	r3, [r3, #0]
    3a92:	1c1a      	adds	r2, r3, #0
    3a94:	2303      	movs	r3, #3
    3a96:	4013      	ands	r3, r2
    3a98:	b2da      	uxtb	r2, r3
    3a9a:	230d      	movs	r3, #13
    3a9c:	18fb      	adds	r3, r7, r3
    3a9e:	2103      	movs	r1, #3
    3aa0:	400a      	ands	r2, r1
    3aa2:	0010      	movs	r0, r2
    3aa4:	781a      	ldrb	r2, [r3, #0]
    3aa6:	2103      	movs	r1, #3
    3aa8:	438a      	bics	r2, r1
    3aaa:	1c11      	adds	r1, r2, #0
    3aac:	1c02      	adds	r2, r0, #0
    3aae:	430a      	orrs	r2, r1
    3ab0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	789a      	ldrb	r2, [r3, #2]
    3ab6:	230c      	movs	r3, #12
    3ab8:	18fb      	adds	r3, r7, r3
    3aba:	01d0      	lsls	r0, r2, #7
    3abc:	781a      	ldrb	r2, [r3, #0]
    3abe:	217f      	movs	r1, #127	; 0x7f
    3ac0:	400a      	ands	r2, r1
    3ac2:	1c11      	adds	r1, r2, #0
    3ac4:	1c02      	adds	r2, r0, #0
    3ac6:	430a      	orrs	r2, r1
    3ac8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	785a      	ldrb	r2, [r3, #1]
    3ace:	230c      	movs	r3, #12
    3ad0:	18fb      	adds	r3, r7, r3
    3ad2:	2101      	movs	r1, #1
    3ad4:	400a      	ands	r2, r1
    3ad6:	0190      	lsls	r0, r2, #6
    3ad8:	781a      	ldrb	r2, [r3, #0]
    3ada:	2140      	movs	r1, #64	; 0x40
    3adc:	438a      	bics	r2, r1
    3ade:	1c11      	adds	r1, r2, #0
    3ae0:	1c02      	adds	r2, r0, #0
    3ae2:	430a      	orrs	r2, r1
    3ae4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    3ae6:	4b03      	ldr	r3, [pc, #12]	; (3af4 <system_clock_source_osc8m_set_config+0x74>)
    3ae8:	68fa      	ldr	r2, [r7, #12]
    3aea:	621a      	str	r2, [r3, #32]
}
    3aec:	46c0      	nop			; (mov r8, r8)
    3aee:	46bd      	mov	sp, r7
    3af0:	b004      	add	sp, #16
    3af2:	bd80      	pop	{r7, pc}
    3af4:	40000800 	.word	0x40000800

00003af8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    3af8:	b580      	push	{r7, lr}
    3afa:	b084      	sub	sp, #16
    3afc:	af00      	add	r7, sp, #0
    3afe:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    3b00:	4a43      	ldr	r2, [pc, #268]	; (3c10 <system_clock_source_xosc32k_set_config+0x118>)
    3b02:	230c      	movs	r3, #12
    3b04:	18fb      	adds	r3, r7, r3
    3b06:	8a92      	ldrh	r2, [r2, #20]
    3b08:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    3b0a:	687b      	ldr	r3, [r7, #4]
    3b0c:	785b      	ldrb	r3, [r3, #1]
    3b0e:	1c1a      	adds	r2, r3, #0
    3b10:	2307      	movs	r3, #7
    3b12:	4013      	ands	r3, r2
    3b14:	b2da      	uxtb	r2, r3
    3b16:	230c      	movs	r3, #12
    3b18:	18fb      	adds	r3, r7, r3
    3b1a:	2107      	movs	r1, #7
    3b1c:	400a      	ands	r2, r1
    3b1e:	0010      	movs	r0, r2
    3b20:	785a      	ldrb	r2, [r3, #1]
    3b22:	2107      	movs	r1, #7
    3b24:	438a      	bics	r2, r1
    3b26:	1c11      	adds	r1, r2, #0
    3b28:	1c02      	adds	r2, r0, #0
    3b2a:	430a      	orrs	r2, r1
    3b2c:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    3b2e:	687b      	ldr	r3, [r7, #4]
    3b30:	781b      	ldrb	r3, [r3, #0]
    3b32:	2b00      	cmp	r3, #0
    3b34:	d106      	bne.n	3b44 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    3b36:	230c      	movs	r3, #12
    3b38:	18fb      	adds	r3, r7, r3
    3b3a:	781a      	ldrb	r2, [r3, #0]
    3b3c:	2104      	movs	r1, #4
    3b3e:	430a      	orrs	r2, r1
    3b40:	701a      	strb	r2, [r3, #0]
    3b42:	e005      	b.n	3b50 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    3b44:	230c      	movs	r3, #12
    3b46:	18fb      	adds	r3, r7, r3
    3b48:	781a      	ldrb	r2, [r3, #0]
    3b4a:	2104      	movs	r1, #4
    3b4c:	438a      	bics	r2, r1
    3b4e:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    3b50:	687b      	ldr	r3, [r7, #4]
    3b52:	789a      	ldrb	r2, [r3, #2]
    3b54:	230c      	movs	r3, #12
    3b56:	18fb      	adds	r3, r7, r3
    3b58:	2101      	movs	r1, #1
    3b5a:	400a      	ands	r2, r1
    3b5c:	0150      	lsls	r0, r2, #5
    3b5e:	781a      	ldrb	r2, [r3, #0]
    3b60:	2120      	movs	r1, #32
    3b62:	438a      	bics	r2, r1
    3b64:	1c11      	adds	r1, r2, #0
    3b66:	1c02      	adds	r2, r0, #0
    3b68:	430a      	orrs	r2, r1
    3b6a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    3b6c:	687b      	ldr	r3, [r7, #4]
    3b6e:	78da      	ldrb	r2, [r3, #3]
    3b70:	230c      	movs	r3, #12
    3b72:	18fb      	adds	r3, r7, r3
    3b74:	2101      	movs	r1, #1
    3b76:	400a      	ands	r2, r1
    3b78:	0110      	lsls	r0, r2, #4
    3b7a:	781a      	ldrb	r2, [r3, #0]
    3b7c:	2110      	movs	r1, #16
    3b7e:	438a      	bics	r2, r1
    3b80:	1c11      	adds	r1, r2, #0
    3b82:	1c02      	adds	r2, r0, #0
    3b84:	430a      	orrs	r2, r1
    3b86:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    3b88:	687b      	ldr	r3, [r7, #4]
    3b8a:	791a      	ldrb	r2, [r3, #4]
    3b8c:	230c      	movs	r3, #12
    3b8e:	18fb      	adds	r3, r7, r3
    3b90:	2101      	movs	r1, #1
    3b92:	400a      	ands	r2, r1
    3b94:	00d0      	lsls	r0, r2, #3
    3b96:	781a      	ldrb	r2, [r3, #0]
    3b98:	2108      	movs	r1, #8
    3b9a:	438a      	bics	r2, r1
    3b9c:	1c11      	adds	r1, r2, #0
    3b9e:	1c02      	adds	r2, r0, #0
    3ba0:	430a      	orrs	r2, r1
    3ba2:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    3ba4:	687b      	ldr	r3, [r7, #4]
    3ba6:	7b5a      	ldrb	r2, [r3, #13]
    3ba8:	230c      	movs	r3, #12
    3baa:	18fb      	adds	r3, r7, r3
    3bac:	01d0      	lsls	r0, r2, #7
    3bae:	781a      	ldrb	r2, [r3, #0]
    3bb0:	217f      	movs	r1, #127	; 0x7f
    3bb2:	400a      	ands	r2, r1
    3bb4:	1c11      	adds	r1, r2, #0
    3bb6:	1c02      	adds	r2, r0, #0
    3bb8:	430a      	orrs	r2, r1
    3bba:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3bbc:	687b      	ldr	r3, [r7, #4]
    3bbe:	7b1a      	ldrb	r2, [r3, #12]
    3bc0:	230c      	movs	r3, #12
    3bc2:	18fb      	adds	r3, r7, r3
    3bc4:	2101      	movs	r1, #1
    3bc6:	400a      	ands	r2, r1
    3bc8:	0190      	lsls	r0, r2, #6
    3bca:	781a      	ldrb	r2, [r3, #0]
    3bcc:	2140      	movs	r1, #64	; 0x40
    3bce:	438a      	bics	r2, r1
    3bd0:	1c11      	adds	r1, r2, #0
    3bd2:	1c02      	adds	r2, r0, #0
    3bd4:	430a      	orrs	r2, r1
    3bd6:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    3bd8:	687b      	ldr	r3, [r7, #4]
    3bda:	7b9a      	ldrb	r2, [r3, #14]
    3bdc:	230c      	movs	r3, #12
    3bde:	18fb      	adds	r3, r7, r3
    3be0:	2101      	movs	r1, #1
    3be2:	400a      	ands	r2, r1
    3be4:	0110      	lsls	r0, r2, #4
    3be6:	785a      	ldrb	r2, [r3, #1]
    3be8:	2110      	movs	r1, #16
    3bea:	438a      	bics	r2, r1
    3bec:	1c11      	adds	r1, r2, #0
    3bee:	1c02      	adds	r2, r0, #0
    3bf0:	430a      	orrs	r2, r1
    3bf2:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    3bf4:	687b      	ldr	r3, [r7, #4]
    3bf6:	689a      	ldr	r2, [r3, #8]
    3bf8:	4b06      	ldr	r3, [pc, #24]	; (3c14 <system_clock_source_xosc32k_set_config+0x11c>)
    3bfa:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    3bfc:	4a04      	ldr	r2, [pc, #16]	; (3c10 <system_clock_source_xosc32k_set_config+0x118>)
    3bfe:	230c      	movs	r3, #12
    3c00:	18fb      	adds	r3, r7, r3
    3c02:	881b      	ldrh	r3, [r3, #0]
    3c04:	8293      	strh	r3, [r2, #20]
}
    3c06:	46c0      	nop			; (mov r8, r8)
    3c08:	46bd      	mov	sp, r7
    3c0a:	b004      	add	sp, #16
    3c0c:	bd80      	pop	{r7, pc}
    3c0e:	46c0      	nop			; (mov r8, r8)
    3c10:	40000800 	.word	0x40000800
    3c14:	20000268 	.word	0x20000268

00003c18 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    3c18:	b580      	push	{r7, lr}
    3c1a:	b082      	sub	sp, #8
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3c20:	687b      	ldr	r3, [r7, #4]
    3c22:	7a1b      	ldrb	r3, [r3, #8]
    3c24:	029b      	lsls	r3, r3, #10
    3c26:	041b      	lsls	r3, r3, #16
    3c28:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    3c2a:	687b      	ldr	r3, [r7, #4]
    3c2c:	895b      	ldrh	r3, [r3, #10]
    3c2e:	059b      	lsls	r3, r3, #22
    3c30:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3c32:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    3c34:	4b2a      	ldr	r3, [pc, #168]	; (3ce0 <system_clock_source_dfll_set_config+0xc8>)
    3c36:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3c38:	687b      	ldr	r3, [r7, #4]
    3c3a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    3c3c:	687b      	ldr	r3, [r7, #4]
    3c3e:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    3c40:	4313      	orrs	r3, r2
    3c42:	b2db      	uxtb	r3, r3
    3c44:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    3c46:	687b      	ldr	r3, [r7, #4]
    3c48:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    3c4a:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    3c4c:	687a      	ldr	r2, [r7, #4]
    3c4e:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    3c50:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    3c52:	687b      	ldr	r3, [r7, #4]
    3c54:	785b      	ldrb	r3, [r3, #1]
    3c56:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    3c58:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    3c5a:	4b21      	ldr	r3, [pc, #132]	; (3ce0 <system_clock_source_dfll_set_config+0xc8>)
    3c5c:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    3c5e:	687b      	ldr	r3, [r7, #4]
    3c60:	781b      	ldrb	r3, [r3, #0]
    3c62:	2b04      	cmp	r3, #4
    3c64:	d116      	bne.n	3c94 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3c66:	687b      	ldr	r3, [r7, #4]
    3c68:	7b1b      	ldrb	r3, [r3, #12]
    3c6a:	069b      	lsls	r3, r3, #26
    3c6c:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3c6e:	687b      	ldr	r3, [r7, #4]
    3c70:	89db      	ldrh	r3, [r3, #14]
    3c72:	041b      	lsls	r3, r3, #16
    3c74:	0019      	movs	r1, r3
    3c76:	4b1b      	ldr	r3, [pc, #108]	; (3ce4 <system_clock_source_dfll_set_config+0xcc>)
    3c78:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3c7a:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3c7c:	687a      	ldr	r2, [r7, #4]
    3c7e:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3c80:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    3c82:	4b17      	ldr	r3, [pc, #92]	; (3ce0 <system_clock_source_dfll_set_config+0xc8>)
    3c84:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    3c86:	4b16      	ldr	r3, [pc, #88]	; (3ce0 <system_clock_source_dfll_set_config+0xc8>)
    3c88:	681b      	ldr	r3, [r3, #0]
    3c8a:	687a      	ldr	r2, [r7, #4]
    3c8c:	7812      	ldrb	r2, [r2, #0]
    3c8e:	431a      	orrs	r2, r3
    3c90:	4b13      	ldr	r3, [pc, #76]	; (3ce0 <system_clock_source_dfll_set_config+0xc8>)
    3c92:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3c94:	687b      	ldr	r3, [r7, #4]
    3c96:	781b      	ldrb	r3, [r3, #0]
    3c98:	2b20      	cmp	r3, #32
    3c9a:	d11c      	bne.n	3cd6 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3c9c:	687b      	ldr	r3, [r7, #4]
    3c9e:	7b1b      	ldrb	r3, [r3, #12]
    3ca0:	069b      	lsls	r3, r3, #26
    3ca2:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3ca4:	687b      	ldr	r3, [r7, #4]
    3ca6:	89db      	ldrh	r3, [r3, #14]
    3ca8:	041b      	lsls	r3, r3, #16
    3caa:	0019      	movs	r1, r3
    3cac:	4b0d      	ldr	r3, [pc, #52]	; (3ce4 <system_clock_source_dfll_set_config+0xcc>)
    3cae:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3cb0:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3cb2:	687a      	ldr	r2, [r7, #4]
    3cb4:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3cb6:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    3cb8:	4b09      	ldr	r3, [pc, #36]	; (3ce0 <system_clock_source_dfll_set_config+0xc8>)
    3cba:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    3cbc:	4b08      	ldr	r3, [pc, #32]	; (3ce0 <system_clock_source_dfll_set_config+0xc8>)
    3cbe:	681b      	ldr	r3, [r3, #0]
    3cc0:	687a      	ldr	r2, [r7, #4]
    3cc2:	7812      	ldrb	r2, [r2, #0]
    3cc4:	2104      	movs	r1, #4
    3cc6:	430a      	orrs	r2, r1
    3cc8:	b2d2      	uxtb	r2, r2
    3cca:	4313      	orrs	r3, r2
    3ccc:	2280      	movs	r2, #128	; 0x80
    3cce:	00d2      	lsls	r2, r2, #3
    3cd0:	431a      	orrs	r2, r3
    3cd2:	4b03      	ldr	r3, [pc, #12]	; (3ce0 <system_clock_source_dfll_set_config+0xc8>)
    3cd4:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    3cd6:	46c0      	nop			; (mov r8, r8)
    3cd8:	46bd      	mov	sp, r7
    3cda:	b002      	add	sp, #8
    3cdc:	bd80      	pop	{r7, pc}
    3cde:	46c0      	nop			; (mov r8, r8)
    3ce0:	20000268 	.word	0x20000268
    3ce4:	03ff0000 	.word	0x03ff0000

00003ce8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    3ce8:	b580      	push	{r7, lr}
    3cea:	b082      	sub	sp, #8
    3cec:	af00      	add	r7, sp, #0
    3cee:	0002      	movs	r2, r0
    3cf0:	1dfb      	adds	r3, r7, #7
    3cf2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3cf4:	1dfb      	adds	r3, r7, #7
    3cf6:	781b      	ldrb	r3, [r3, #0]
    3cf8:	2b08      	cmp	r3, #8
    3cfa:	d83b      	bhi.n	3d74 <system_clock_source_enable+0x8c>
    3cfc:	009a      	lsls	r2, r3, #2
    3cfe:	4b21      	ldr	r3, [pc, #132]	; (3d84 <system_clock_source_enable+0x9c>)
    3d00:	18d3      	adds	r3, r2, r3
    3d02:	681b      	ldr	r3, [r3, #0]
    3d04:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3d06:	4b20      	ldr	r3, [pc, #128]	; (3d88 <system_clock_source_enable+0xa0>)
    3d08:	4a1f      	ldr	r2, [pc, #124]	; (3d88 <system_clock_source_enable+0xa0>)
    3d0a:	6a12      	ldr	r2, [r2, #32]
    3d0c:	2102      	movs	r1, #2
    3d0e:	430a      	orrs	r2, r1
    3d10:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    3d12:	2300      	movs	r3, #0
    3d14:	e031      	b.n	3d7a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3d16:	4b1c      	ldr	r3, [pc, #112]	; (3d88 <system_clock_source_enable+0xa0>)
    3d18:	4a1b      	ldr	r2, [pc, #108]	; (3d88 <system_clock_source_enable+0xa0>)
    3d1a:	6992      	ldr	r2, [r2, #24]
    3d1c:	2102      	movs	r1, #2
    3d1e:	430a      	orrs	r2, r1
    3d20:	619a      	str	r2, [r3, #24]
		break;
    3d22:	e029      	b.n	3d78 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3d24:	4a18      	ldr	r2, [pc, #96]	; (3d88 <system_clock_source_enable+0xa0>)
    3d26:	4b18      	ldr	r3, [pc, #96]	; (3d88 <system_clock_source_enable+0xa0>)
    3d28:	8a1b      	ldrh	r3, [r3, #16]
    3d2a:	b29b      	uxth	r3, r3
    3d2c:	2102      	movs	r1, #2
    3d2e:	430b      	orrs	r3, r1
    3d30:	b29b      	uxth	r3, r3
    3d32:	8213      	strh	r3, [r2, #16]
		break;
    3d34:	e020      	b.n	3d78 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3d36:	4a14      	ldr	r2, [pc, #80]	; (3d88 <system_clock_source_enable+0xa0>)
    3d38:	4b13      	ldr	r3, [pc, #76]	; (3d88 <system_clock_source_enable+0xa0>)
    3d3a:	8a9b      	ldrh	r3, [r3, #20]
    3d3c:	b29b      	uxth	r3, r3
    3d3e:	2102      	movs	r1, #2
    3d40:	430b      	orrs	r3, r1
    3d42:	b29b      	uxth	r3, r3
    3d44:	8293      	strh	r3, [r2, #20]
		break;
    3d46:	e017      	b.n	3d78 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3d48:	4b10      	ldr	r3, [pc, #64]	; (3d8c <system_clock_source_enable+0xa4>)
    3d4a:	681b      	ldr	r3, [r3, #0]
    3d4c:	2202      	movs	r2, #2
    3d4e:	431a      	orrs	r2, r3
    3d50:	4b0e      	ldr	r3, [pc, #56]	; (3d8c <system_clock_source_enable+0xa4>)
    3d52:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    3d54:	4b0e      	ldr	r3, [pc, #56]	; (3d90 <system_clock_source_enable+0xa8>)
    3d56:	4798      	blx	r3
		break;
    3d58:	e00e      	b.n	3d78 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3d5a:	4a0b      	ldr	r2, [pc, #44]	; (3d88 <system_clock_source_enable+0xa0>)
    3d5c:	490a      	ldr	r1, [pc, #40]	; (3d88 <system_clock_source_enable+0xa0>)
    3d5e:	2344      	movs	r3, #68	; 0x44
    3d60:	5ccb      	ldrb	r3, [r1, r3]
    3d62:	b2db      	uxtb	r3, r3
    3d64:	2102      	movs	r1, #2
    3d66:	430b      	orrs	r3, r1
    3d68:	b2d9      	uxtb	r1, r3
    3d6a:	2344      	movs	r3, #68	; 0x44
    3d6c:	54d1      	strb	r1, [r2, r3]
		break;
    3d6e:	e003      	b.n	3d78 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3d70:	2300      	movs	r3, #0
    3d72:	e002      	b.n	3d7a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3d74:	2317      	movs	r3, #23
    3d76:	e000      	b.n	3d7a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    3d78:	2300      	movs	r3, #0
}
    3d7a:	0018      	movs	r0, r3
    3d7c:	46bd      	mov	sp, r7
    3d7e:	b002      	add	sp, #8
    3d80:	bd80      	pop	{r7, pc}
    3d82:	46c0      	nop			; (mov r8, r8)
    3d84:	0000aeb0 	.word	0x0000aeb0
    3d88:	40000800 	.word	0x40000800
    3d8c:	20000268 	.word	0x20000268
    3d90:	00003981 	.word	0x00003981

00003d94 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    3d94:	b580      	push	{r7, lr}
    3d96:	b084      	sub	sp, #16
    3d98:	af00      	add	r7, sp, #0
    3d9a:	0002      	movs	r2, r0
    3d9c:	1dfb      	adds	r3, r7, #7
    3d9e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    3da0:	2300      	movs	r3, #0
    3da2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    3da4:	1dfb      	adds	r3, r7, #7
    3da6:	781b      	ldrb	r3, [r3, #0]
    3da8:	2b08      	cmp	r3, #8
    3daa:	d821      	bhi.n	3df0 <system_clock_source_is_ready+0x5c>
    3dac:	009a      	lsls	r2, r3, #2
    3dae:	4b18      	ldr	r3, [pc, #96]	; (3e10 <system_clock_source_is_ready+0x7c>)
    3db0:	18d3      	adds	r3, r2, r3
    3db2:	681b      	ldr	r3, [r3, #0]
    3db4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    3db6:	2308      	movs	r3, #8
    3db8:	60fb      	str	r3, [r7, #12]
		break;
    3dba:	e01b      	b.n	3df4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    3dbc:	2304      	movs	r3, #4
    3dbe:	60fb      	str	r3, [r7, #12]
		break;
    3dc0:	e018      	b.n	3df4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    3dc2:	2301      	movs	r3, #1
    3dc4:	60fb      	str	r3, [r7, #12]
		break;
    3dc6:	e015      	b.n	3df4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    3dc8:	2302      	movs	r3, #2
    3dca:	60fb      	str	r3, [r7, #12]
		break;
    3dcc:	e012      	b.n	3df4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    3dce:	23d0      	movs	r3, #208	; 0xd0
    3dd0:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    3dd2:	e00f      	b.n	3df4 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    3dd4:	4a0f      	ldr	r2, [pc, #60]	; (3e14 <system_clock_source_is_ready+0x80>)
    3dd6:	2350      	movs	r3, #80	; 0x50
    3dd8:	5cd3      	ldrb	r3, [r2, r3]
    3dda:	b2db      	uxtb	r3, r3
    3ddc:	001a      	movs	r2, r3
    3dde:	2303      	movs	r3, #3
    3de0:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    3de2:	3b03      	subs	r3, #3
    3de4:	425a      	negs	r2, r3
    3de6:	4153      	adcs	r3, r2
    3de8:	b2db      	uxtb	r3, r3
    3dea:	e00c      	b.n	3e06 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    3dec:	2301      	movs	r3, #1
    3dee:	e00a      	b.n	3e06 <system_clock_source_is_ready+0x72>

	default:
		return false;
    3df0:	2300      	movs	r3, #0
    3df2:	e008      	b.n	3e06 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3df4:	4b07      	ldr	r3, [pc, #28]	; (3e14 <system_clock_source_is_ready+0x80>)
    3df6:	68db      	ldr	r3, [r3, #12]
    3df8:	68fa      	ldr	r2, [r7, #12]
    3dfa:	401a      	ands	r2, r3
    3dfc:	68fb      	ldr	r3, [r7, #12]
    3dfe:	1ad3      	subs	r3, r2, r3
    3e00:	425a      	negs	r2, r3
    3e02:	4153      	adcs	r3, r2
    3e04:	b2db      	uxtb	r3, r3
}
    3e06:	0018      	movs	r0, r3
    3e08:	46bd      	mov	sp, r7
    3e0a:	b004      	add	sp, #16
    3e0c:	bd80      	pop	{r7, pc}
    3e0e:	46c0      	nop			; (mov r8, r8)
    3e10:	0000aed4 	.word	0x0000aed4
    3e14:	40000800 	.word	0x40000800

00003e18 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    3e18:	b580      	push	{r7, lr}
    3e1a:	b082      	sub	sp, #8
    3e1c:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    3e1e:	003b      	movs	r3, r7
    3e20:	2202      	movs	r2, #2
    3e22:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3e24:	2300      	movs	r3, #0
    3e26:	607b      	str	r3, [r7, #4]
    3e28:	e009      	b.n	3e3e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3e2a:	687b      	ldr	r3, [r7, #4]
    3e2c:	b2db      	uxtb	r3, r3
    3e2e:	003a      	movs	r2, r7
    3e30:	0011      	movs	r1, r2
    3e32:	0018      	movs	r0, r3
    3e34:	4b05      	ldr	r3, [pc, #20]	; (3e4c <_switch_peripheral_gclk+0x34>)
    3e36:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	3301      	adds	r3, #1
    3e3c:	607b      	str	r3, [r7, #4]
    3e3e:	687b      	ldr	r3, [r7, #4]
    3e40:	2b24      	cmp	r3, #36	; 0x24
    3e42:	d9f2      	bls.n	3e2a <_switch_peripheral_gclk+0x12>
	}
}
    3e44:	46c0      	nop			; (mov r8, r8)
    3e46:	46bd      	mov	sp, r7
    3e48:	b002      	add	sp, #8
    3e4a:	bd80      	pop	{r7, pc}
    3e4c:	000043f9 	.word	0x000043f9

00003e50 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3e50:	b580      	push	{r7, lr}
    3e52:	b0aa      	sub	sp, #168	; 0xa8
    3e54:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3e56:	4b87      	ldr	r3, [pc, #540]	; (4074 <system_clock_init+0x224>)
    3e58:	22c2      	movs	r2, #194	; 0xc2
    3e5a:	00d2      	lsls	r2, r2, #3
    3e5c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    3e5e:	2002      	movs	r0, #2
    3e60:	4b85      	ldr	r3, [pc, #532]	; (4078 <system_clock_init+0x228>)
    3e62:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    3e64:	4b85      	ldr	r3, [pc, #532]	; (407c <system_clock_init+0x22c>)
    3e66:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    3e68:	2394      	movs	r3, #148	; 0x94
    3e6a:	18fb      	adds	r3, r7, r3
    3e6c:	0018      	movs	r0, r3
    3e6e:	4b84      	ldr	r3, [pc, #528]	; (4080 <system_clock_init+0x230>)
    3e70:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    3e72:	2394      	movs	r3, #148	; 0x94
    3e74:	18fb      	adds	r3, r7, r3
    3e76:	2280      	movs	r2, #128	; 0x80
    3e78:	0212      	lsls	r2, r2, #8
    3e7a:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    3e7c:	2394      	movs	r3, #148	; 0x94
    3e7e:	18fb      	adds	r3, r7, r3
    3e80:	2200      	movs	r2, #0
    3e82:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    3e84:	2394      	movs	r3, #148	; 0x94
    3e86:	18fb      	adds	r3, r7, r3
    3e88:	2203      	movs	r2, #3
    3e8a:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    3e8c:	2394      	movs	r3, #148	; 0x94
    3e8e:	18fb      	adds	r3, r7, r3
    3e90:	2200      	movs	r2, #0
    3e92:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    3e94:	2394      	movs	r3, #148	; 0x94
    3e96:	18fb      	adds	r3, r7, r3
    3e98:	2200      	movs	r2, #0
    3e9a:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    3e9c:	2394      	movs	r3, #148	; 0x94
    3e9e:	18fb      	adds	r3, r7, r3
    3ea0:	2201      	movs	r2, #1
    3ea2:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    3ea4:	2394      	movs	r3, #148	; 0x94
    3ea6:	18fb      	adds	r3, r7, r3
    3ea8:	2200      	movs	r2, #0
    3eaa:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    3eac:	2394      	movs	r3, #148	; 0x94
    3eae:	18fb      	adds	r3, r7, r3
    3eb0:	2200      	movs	r2, #0
    3eb2:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    3eb4:	2394      	movs	r3, #148	; 0x94
    3eb6:	18fb      	adds	r3, r7, r3
    3eb8:	0018      	movs	r0, r3
    3eba:	4b72      	ldr	r3, [pc, #456]	; (4084 <system_clock_init+0x234>)
    3ebc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3ebe:	2005      	movs	r0, #5
    3ec0:	4b71      	ldr	r3, [pc, #452]	; (4088 <system_clock_init+0x238>)
    3ec2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    3ec4:	46c0      	nop			; (mov r8, r8)
    3ec6:	2005      	movs	r0, #5
    3ec8:	4b70      	ldr	r3, [pc, #448]	; (408c <system_clock_init+0x23c>)
    3eca:	4798      	blx	r3
    3ecc:	0003      	movs	r3, r0
    3ece:	001a      	movs	r2, r3
    3ed0:	2301      	movs	r3, #1
    3ed2:	4053      	eors	r3, r2
    3ed4:	b2db      	uxtb	r3, r3
    3ed6:	2b00      	cmp	r3, #0
    3ed8:	d1f5      	bne.n	3ec6 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    3eda:	4a66      	ldr	r2, [pc, #408]	; (4074 <system_clock_init+0x224>)
    3edc:	8a93      	ldrh	r3, [r2, #20]
    3ede:	2180      	movs	r1, #128	; 0x80
    3ee0:	430b      	orrs	r3, r1
    3ee2:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    3ee4:	2380      	movs	r3, #128	; 0x80
    3ee6:	18fb      	adds	r3, r7, r3
    3ee8:	0018      	movs	r0, r3
    3eea:	4b69      	ldr	r3, [pc, #420]	; (4090 <system_clock_init+0x240>)
    3eec:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    3eee:	2380      	movs	r3, #128	; 0x80
    3ef0:	18fb      	adds	r3, r7, r3
    3ef2:	2204      	movs	r2, #4
    3ef4:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    3ef6:	2380      	movs	r3, #128	; 0x80
    3ef8:	18fb      	adds	r3, r7, r3
    3efa:	2200      	movs	r2, #0
    3efc:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    3efe:	4b65      	ldr	r3, [pc, #404]	; (4094 <system_clock_init+0x244>)
    3f00:	681b      	ldr	r3, [r3, #0]
    3f02:	0e9b      	lsrs	r3, r3, #26
    3f04:	22a4      	movs	r2, #164	; 0xa4
    3f06:	18ba      	adds	r2, r7, r2
    3f08:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    3f0a:	23a4      	movs	r3, #164	; 0xa4
    3f0c:	18fb      	adds	r3, r7, r3
    3f0e:	681b      	ldr	r3, [r3, #0]
    3f10:	2b3f      	cmp	r3, #63	; 0x3f
    3f12:	d103      	bne.n	3f1c <system_clock_init+0xcc>
		coarse = 0x1f;
    3f14:	231f      	movs	r3, #31
    3f16:	22a4      	movs	r2, #164	; 0xa4
    3f18:	18ba      	adds	r2, r7, r2
    3f1a:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    3f1c:	23a4      	movs	r3, #164	; 0xa4
    3f1e:	18fb      	adds	r3, r7, r3
    3f20:	681b      	ldr	r3, [r3, #0]
    3f22:	b2da      	uxtb	r2, r3
    3f24:	2380      	movs	r3, #128	; 0x80
    3f26:	18fb      	adds	r3, r7, r3
    3f28:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3f2a:	2380      	movs	r3, #128	; 0x80
    3f2c:	18fb      	adds	r3, r7, r3
    3f2e:	2200      	movs	r2, #0
    3f30:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    3f32:	2380      	movs	r3, #128	; 0x80
    3f34:	18fb      	adds	r3, r7, r3
    3f36:	2200      	movs	r2, #0
    3f38:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3f3a:	2380      	movs	r3, #128	; 0x80
    3f3c:	18fb      	adds	r3, r7, r3
    3f3e:	2200      	movs	r2, #0
    3f40:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    3f42:	2380      	movs	r3, #128	; 0x80
    3f44:	18fb      	adds	r3, r7, r3
    3f46:	2200      	movs	r2, #0
    3f48:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    3f4a:	2380      	movs	r3, #128	; 0x80
    3f4c:	18fb      	adds	r3, r7, r3
    3f4e:	4a52      	ldr	r2, [pc, #328]	; (4098 <system_clock_init+0x248>)
    3f50:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    3f52:	2380      	movs	r3, #128	; 0x80
    3f54:	18fb      	adds	r3, r7, r3
    3f56:	2207      	movs	r2, #7
    3f58:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    3f5a:	2380      	movs	r3, #128	; 0x80
    3f5c:	18fb      	adds	r3, r7, r3
    3f5e:	223f      	movs	r2, #63	; 0x3f
    3f60:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    3f62:	2380      	movs	r3, #128	; 0x80
    3f64:	18fb      	adds	r3, r7, r3
    3f66:	0018      	movs	r0, r3
    3f68:	4b4c      	ldr	r3, [pc, #304]	; (409c <system_clock_init+0x24c>)
    3f6a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    3f6c:	237c      	movs	r3, #124	; 0x7c
    3f6e:	18fb      	adds	r3, r7, r3
    3f70:	0018      	movs	r0, r3
    3f72:	4b4b      	ldr	r3, [pc, #300]	; (40a0 <system_clock_init+0x250>)
    3f74:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3f76:	237c      	movs	r3, #124	; 0x7c
    3f78:	18fb      	adds	r3, r7, r3
    3f7a:	2200      	movs	r2, #0
    3f7c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    3f7e:	237c      	movs	r3, #124	; 0x7c
    3f80:	18fb      	adds	r3, r7, r3
    3f82:	2201      	movs	r2, #1
    3f84:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3f86:	237c      	movs	r3, #124	; 0x7c
    3f88:	18fb      	adds	r3, r7, r3
    3f8a:	2200      	movs	r2, #0
    3f8c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3f8e:	237c      	movs	r3, #124	; 0x7c
    3f90:	18fb      	adds	r3, r7, r3
    3f92:	0018      	movs	r0, r3
    3f94:	4b43      	ldr	r3, [pc, #268]	; (40a4 <system_clock_init+0x254>)
    3f96:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3f98:	2006      	movs	r0, #6
    3f9a:	4b3b      	ldr	r3, [pc, #236]	; (4088 <system_clock_init+0x238>)
    3f9c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3f9e:	4b42      	ldr	r3, [pc, #264]	; (40a8 <system_clock_init+0x258>)
    3fa0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3fa2:	2364      	movs	r3, #100	; 0x64
    3fa4:	18fb      	adds	r3, r7, r3
    3fa6:	0018      	movs	r0, r3
    3fa8:	4b40      	ldr	r3, [pc, #256]	; (40ac <system_clock_init+0x25c>)
    3faa:	4798      	blx	r3
    3fac:	2364      	movs	r3, #100	; 0x64
    3fae:	18fb      	adds	r3, r7, r3
    3fb0:	2205      	movs	r2, #5
    3fb2:	701a      	strb	r2, [r3, #0]
    3fb4:	2364      	movs	r3, #100	; 0x64
    3fb6:	18fb      	adds	r3, r7, r3
    3fb8:	2201      	movs	r2, #1
    3fba:	605a      	str	r2, [r3, #4]
    3fbc:	2364      	movs	r3, #100	; 0x64
    3fbe:	18fb      	adds	r3, r7, r3
    3fc0:	2200      	movs	r2, #0
    3fc2:	721a      	strb	r2, [r3, #8]
    3fc4:	2364      	movs	r3, #100	; 0x64
    3fc6:	18fb      	adds	r3, r7, r3
    3fc8:	2200      	movs	r2, #0
    3fca:	725a      	strb	r2, [r3, #9]
    3fcc:	2364      	movs	r3, #100	; 0x64
    3fce:	18fb      	adds	r3, r7, r3
    3fd0:	0019      	movs	r1, r3
    3fd2:	2001      	movs	r0, #1
    3fd4:	4b36      	ldr	r3, [pc, #216]	; (40b0 <system_clock_init+0x260>)
    3fd6:	4798      	blx	r3
    3fd8:	2001      	movs	r0, #1
    3fda:	4b36      	ldr	r3, [pc, #216]	; (40b4 <system_clock_init+0x264>)
    3fdc:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    3fde:	230c      	movs	r3, #12
    3fe0:	18fb      	adds	r3, r7, r3
    3fe2:	0018      	movs	r0, r3
    3fe4:	4b34      	ldr	r3, [pc, #208]	; (40b8 <system_clock_init+0x268>)
    3fe6:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    3fe8:	230c      	movs	r3, #12
    3fea:	18fb      	adds	r3, r7, r3
    3fec:	2201      	movs	r2, #1
    3fee:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    3ff0:	230c      	movs	r3, #12
    3ff2:	18fb      	adds	r3, r7, r3
    3ff4:	0019      	movs	r1, r3
    3ff6:	2000      	movs	r0, #0
    3ff8:	4b30      	ldr	r3, [pc, #192]	; (40bc <system_clock_init+0x26c>)
    3ffa:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    3ffc:	2000      	movs	r0, #0
    3ffe:	4b30      	ldr	r3, [pc, #192]	; (40c0 <system_clock_init+0x270>)
    4000:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4002:	2007      	movs	r0, #7
    4004:	4b20      	ldr	r3, [pc, #128]	; (4088 <system_clock_init+0x238>)
    4006:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4008:	46c0      	nop			; (mov r8, r8)
    400a:	2007      	movs	r0, #7
    400c:	4b1f      	ldr	r3, [pc, #124]	; (408c <system_clock_init+0x23c>)
    400e:	4798      	blx	r3
    4010:	0003      	movs	r3, r0
    4012:	001a      	movs	r2, r3
    4014:	2301      	movs	r3, #1
    4016:	4053      	eors	r3, r2
    4018:	b2db      	uxtb	r3, r3
    401a:	2b00      	cmp	r3, #0
    401c:	d1f5      	bne.n	400a <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    401e:	2000      	movs	r0, #0
    4020:	4b28      	ldr	r3, [pc, #160]	; (40c4 <system_clock_init+0x274>)
    4022:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    4024:	2100      	movs	r1, #0
    4026:	2000      	movs	r0, #0
    4028:	4b27      	ldr	r3, [pc, #156]	; (40c8 <system_clock_init+0x278>)
    402a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    402c:	2100      	movs	r1, #0
    402e:	2001      	movs	r0, #1
    4030:	4b25      	ldr	r3, [pc, #148]	; (40c8 <system_clock_init+0x278>)
    4032:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    4034:	2100      	movs	r1, #0
    4036:	2002      	movs	r0, #2
    4038:	4b23      	ldr	r3, [pc, #140]	; (40c8 <system_clock_init+0x278>)
    403a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    403c:	003b      	movs	r3, r7
    403e:	0018      	movs	r0, r3
    4040:	4b1a      	ldr	r3, [pc, #104]	; (40ac <system_clock_init+0x25c>)
    4042:	4798      	blx	r3
    4044:	003b      	movs	r3, r7
    4046:	2207      	movs	r2, #7
    4048:	701a      	strb	r2, [r3, #0]
    404a:	003b      	movs	r3, r7
    404c:	2201      	movs	r2, #1
    404e:	605a      	str	r2, [r3, #4]
    4050:	003b      	movs	r3, r7
    4052:	2200      	movs	r2, #0
    4054:	721a      	strb	r2, [r3, #8]
    4056:	003b      	movs	r3, r7
    4058:	2200      	movs	r2, #0
    405a:	725a      	strb	r2, [r3, #9]
    405c:	003b      	movs	r3, r7
    405e:	0019      	movs	r1, r3
    4060:	2000      	movs	r0, #0
    4062:	4b13      	ldr	r3, [pc, #76]	; (40b0 <system_clock_init+0x260>)
    4064:	4798      	blx	r3
    4066:	2000      	movs	r0, #0
    4068:	4b12      	ldr	r3, [pc, #72]	; (40b4 <system_clock_init+0x264>)
    406a:	4798      	blx	r3
#endif
}
    406c:	46c0      	nop			; (mov r8, r8)
    406e:	46bd      	mov	sp, r7
    4070:	b02a      	add	sp, #168	; 0xa8
    4072:	bd80      	pop	{r7, pc}
    4074:	40000800 	.word	0x40000800
    4078:	00003931 	.word	0x00003931
    407c:	00003e19 	.word	0x00003e19
    4080:	00003801 	.word	0x00003801
    4084:	00003af9 	.word	0x00003af9
    4088:	00003ce9 	.word	0x00003ce9
    408c:	00003d95 	.word	0x00003d95
    4090:	0000386b 	.word	0x0000386b
    4094:	00806024 	.word	0x00806024
    4098:	000005b9 	.word	0x000005b9
    409c:	00003c19 	.word	0x00003c19
    40a0:	00003849 	.word	0x00003849
    40a4:	00003a81 	.word	0x00003a81
    40a8:	00004171 	.word	0x00004171
    40ac:	000037bd 	.word	0x000037bd
    40b0:	000041a1 	.word	0x000041a1
    40b4:	000042c5 	.word	0x000042c5
    40b8:	000037eb 	.word	0x000037eb
    40bc:	000043f9 	.word	0x000043f9
    40c0:	0000443d 	.word	0x0000443d
    40c4:	000038bd 	.word	0x000038bd
    40c8:	000038dd 	.word	0x000038dd

000040cc <system_apb_clock_set_mask>:
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b082      	sub	sp, #8
    40d0:	af00      	add	r7, sp, #0
    40d2:	0002      	movs	r2, r0
    40d4:	6039      	str	r1, [r7, #0]
    40d6:	1dfb      	adds	r3, r7, #7
    40d8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    40da:	1dfb      	adds	r3, r7, #7
    40dc:	781b      	ldrb	r3, [r3, #0]
    40de:	2b01      	cmp	r3, #1
    40e0:	d00a      	beq.n	40f8 <system_apb_clock_set_mask+0x2c>
    40e2:	2b02      	cmp	r3, #2
    40e4:	d00f      	beq.n	4106 <system_apb_clock_set_mask+0x3a>
    40e6:	2b00      	cmp	r3, #0
    40e8:	d114      	bne.n	4114 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    40ea:	4b0e      	ldr	r3, [pc, #56]	; (4124 <system_apb_clock_set_mask+0x58>)
    40ec:	4a0d      	ldr	r2, [pc, #52]	; (4124 <system_apb_clock_set_mask+0x58>)
    40ee:	6991      	ldr	r1, [r2, #24]
    40f0:	683a      	ldr	r2, [r7, #0]
    40f2:	430a      	orrs	r2, r1
    40f4:	619a      	str	r2, [r3, #24]
			break;
    40f6:	e00f      	b.n	4118 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    40f8:	4b0a      	ldr	r3, [pc, #40]	; (4124 <system_apb_clock_set_mask+0x58>)
    40fa:	4a0a      	ldr	r2, [pc, #40]	; (4124 <system_apb_clock_set_mask+0x58>)
    40fc:	69d1      	ldr	r1, [r2, #28]
    40fe:	683a      	ldr	r2, [r7, #0]
    4100:	430a      	orrs	r2, r1
    4102:	61da      	str	r2, [r3, #28]
			break;
    4104:	e008      	b.n	4118 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <system_apb_clock_set_mask+0x58>)
    4108:	4a06      	ldr	r2, [pc, #24]	; (4124 <system_apb_clock_set_mask+0x58>)
    410a:	6a11      	ldr	r1, [r2, #32]
    410c:	683a      	ldr	r2, [r7, #0]
    410e:	430a      	orrs	r2, r1
    4110:	621a      	str	r2, [r3, #32]
			break;
    4112:	e001      	b.n	4118 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4114:	2317      	movs	r3, #23
    4116:	e000      	b.n	411a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4118:	2300      	movs	r3, #0
}
    411a:	0018      	movs	r0, r3
    411c:	46bd      	mov	sp, r7
    411e:	b002      	add	sp, #8
    4120:	bd80      	pop	{r7, pc}
    4122:	46c0      	nop			; (mov r8, r8)
    4124:	40000400 	.word	0x40000400

00004128 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    4128:	b580      	push	{r7, lr}
    412a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    412c:	4b02      	ldr	r3, [pc, #8]	; (4138 <system_interrupt_enter_critical_section+0x10>)
    412e:	4798      	blx	r3
}
    4130:	46c0      	nop			; (mov r8, r8)
    4132:	46bd      	mov	sp, r7
    4134:	bd80      	pop	{r7, pc}
    4136:	46c0      	nop			; (mov r8, r8)
    4138:	00003555 	.word	0x00003555

0000413c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    413c:	b580      	push	{r7, lr}
    413e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    4140:	4b02      	ldr	r3, [pc, #8]	; (414c <system_interrupt_leave_critical_section+0x10>)
    4142:	4798      	blx	r3
}
    4144:	46c0      	nop			; (mov r8, r8)
    4146:	46bd      	mov	sp, r7
    4148:	bd80      	pop	{r7, pc}
    414a:	46c0      	nop			; (mov r8, r8)
    414c:	000035a9 	.word	0x000035a9

00004150 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    4150:	b580      	push	{r7, lr}
    4152:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4154:	4b05      	ldr	r3, [pc, #20]	; (416c <system_gclk_is_syncing+0x1c>)
    4156:	785b      	ldrb	r3, [r3, #1]
    4158:	b2db      	uxtb	r3, r3
    415a:	b25b      	sxtb	r3, r3
    415c:	2b00      	cmp	r3, #0
    415e:	da01      	bge.n	4164 <system_gclk_is_syncing+0x14>
		return true;
    4160:	2301      	movs	r3, #1
    4162:	e000      	b.n	4166 <system_gclk_is_syncing+0x16>
	}

	return false;
    4164:	2300      	movs	r3, #0
}
    4166:	0018      	movs	r0, r3
    4168:	46bd      	mov	sp, r7
    416a:	bd80      	pop	{r7, pc}
    416c:	40000c00 	.word	0x40000c00

00004170 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    4170:	b580      	push	{r7, lr}
    4172:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    4174:	2108      	movs	r1, #8
    4176:	2000      	movs	r0, #0
    4178:	4b07      	ldr	r3, [pc, #28]	; (4198 <system_gclk_init+0x28>)
    417a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    417c:	4b07      	ldr	r3, [pc, #28]	; (419c <system_gclk_init+0x2c>)
    417e:	2201      	movs	r2, #1
    4180:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	4b05      	ldr	r3, [pc, #20]	; (419c <system_gclk_init+0x2c>)
    4186:	781b      	ldrb	r3, [r3, #0]
    4188:	b2db      	uxtb	r3, r3
    418a:	001a      	movs	r2, r3
    418c:	2301      	movs	r3, #1
    418e:	4013      	ands	r3, r2
    4190:	d1f8      	bne.n	4184 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	46bd      	mov	sp, r7
    4196:	bd80      	pop	{r7, pc}
    4198:	000040cd 	.word	0x000040cd
    419c:	40000c00 	.word	0x40000c00

000041a0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    41a0:	b580      	push	{r7, lr}
    41a2:	b086      	sub	sp, #24
    41a4:	af00      	add	r7, sp, #0
    41a6:	0002      	movs	r2, r0
    41a8:	6039      	str	r1, [r7, #0]
    41aa:	1dfb      	adds	r3, r7, #7
    41ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    41ae:	1dfb      	adds	r3, r7, #7
    41b0:	781b      	ldrb	r3, [r3, #0]
    41b2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    41b4:	1dfb      	adds	r3, r7, #7
    41b6:	781b      	ldrb	r3, [r3, #0]
    41b8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    41ba:	683b      	ldr	r3, [r7, #0]
    41bc:	781b      	ldrb	r3, [r3, #0]
    41be:	021b      	lsls	r3, r3, #8
    41c0:	001a      	movs	r2, r3
    41c2:	697b      	ldr	r3, [r7, #20]
    41c4:	4313      	orrs	r3, r2
    41c6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    41c8:	683b      	ldr	r3, [r7, #0]
    41ca:	785b      	ldrb	r3, [r3, #1]
    41cc:	2b00      	cmp	r3, #0
    41ce:	d004      	beq.n	41da <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    41d0:	697b      	ldr	r3, [r7, #20]
    41d2:	2280      	movs	r2, #128	; 0x80
    41d4:	02d2      	lsls	r2, r2, #11
    41d6:	4313      	orrs	r3, r2
    41d8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    41da:	683b      	ldr	r3, [r7, #0]
    41dc:	7a5b      	ldrb	r3, [r3, #9]
    41de:	2b00      	cmp	r3, #0
    41e0:	d004      	beq.n	41ec <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    41e2:	697b      	ldr	r3, [r7, #20]
    41e4:	2280      	movs	r2, #128	; 0x80
    41e6:	0312      	lsls	r2, r2, #12
    41e8:	4313      	orrs	r3, r2
    41ea:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    41ec:	683b      	ldr	r3, [r7, #0]
    41ee:	685b      	ldr	r3, [r3, #4]
    41f0:	2b01      	cmp	r3, #1
    41f2:	d92c      	bls.n	424e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    41f4:	683b      	ldr	r3, [r7, #0]
    41f6:	685a      	ldr	r2, [r3, #4]
    41f8:	683b      	ldr	r3, [r7, #0]
    41fa:	685b      	ldr	r3, [r3, #4]
    41fc:	3b01      	subs	r3, #1
    41fe:	4013      	ands	r3, r2
    4200:	d11a      	bne.n	4238 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    4202:	2300      	movs	r3, #0
    4204:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4206:	2302      	movs	r3, #2
    4208:	60bb      	str	r3, [r7, #8]
    420a:	e005      	b.n	4218 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    420c:	68fb      	ldr	r3, [r7, #12]
    420e:	3301      	adds	r3, #1
    4210:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    4212:	68bb      	ldr	r3, [r7, #8]
    4214:	005b      	lsls	r3, r3, #1
    4216:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    4218:	683b      	ldr	r3, [r7, #0]
    421a:	685a      	ldr	r2, [r3, #4]
    421c:	68bb      	ldr	r3, [r7, #8]
    421e:	429a      	cmp	r2, r3
    4220:	d8f4      	bhi.n	420c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4222:	68fb      	ldr	r3, [r7, #12]
    4224:	021b      	lsls	r3, r3, #8
    4226:	693a      	ldr	r2, [r7, #16]
    4228:	4313      	orrs	r3, r2
    422a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    422c:	697b      	ldr	r3, [r7, #20]
    422e:	2280      	movs	r2, #128	; 0x80
    4230:	0352      	lsls	r2, r2, #13
    4232:	4313      	orrs	r3, r2
    4234:	617b      	str	r3, [r7, #20]
    4236:	e00a      	b.n	424e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4238:	683b      	ldr	r3, [r7, #0]
    423a:	685b      	ldr	r3, [r3, #4]
    423c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    423e:	693a      	ldr	r2, [r7, #16]
    4240:	4313      	orrs	r3, r2
    4242:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4244:	697b      	ldr	r3, [r7, #20]
    4246:	2280      	movs	r2, #128	; 0x80
    4248:	0292      	lsls	r2, r2, #10
    424a:	4313      	orrs	r3, r2
    424c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    424e:	683b      	ldr	r3, [r7, #0]
    4250:	7a1b      	ldrb	r3, [r3, #8]
    4252:	2b00      	cmp	r3, #0
    4254:	d004      	beq.n	4260 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4256:	697b      	ldr	r3, [r7, #20]
    4258:	2280      	movs	r2, #128	; 0x80
    425a:	0392      	lsls	r2, r2, #14
    425c:	4313      	orrs	r3, r2
    425e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    4260:	46c0      	nop			; (mov r8, r8)
    4262:	4b13      	ldr	r3, [pc, #76]	; (42b0 <system_gclk_gen_set_config+0x110>)
    4264:	4798      	blx	r3
    4266:	1e03      	subs	r3, r0, #0
    4268:	d1fb      	bne.n	4262 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    426a:	4b12      	ldr	r3, [pc, #72]	; (42b4 <system_gclk_gen_set_config+0x114>)
    426c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    426e:	4a12      	ldr	r2, [pc, #72]	; (42b8 <system_gclk_gen_set_config+0x118>)
    4270:	1dfb      	adds	r3, r7, #7
    4272:	781b      	ldrb	r3, [r3, #0]
    4274:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	4b0d      	ldr	r3, [pc, #52]	; (42b0 <system_gclk_gen_set_config+0x110>)
    427a:	4798      	blx	r3
    427c:	1e03      	subs	r3, r0, #0
    427e:	d1fb      	bne.n	4278 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4280:	4b0e      	ldr	r3, [pc, #56]	; (42bc <system_gclk_gen_set_config+0x11c>)
    4282:	693a      	ldr	r2, [r7, #16]
    4284:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    4286:	46c0      	nop			; (mov r8, r8)
    4288:	4b09      	ldr	r3, [pc, #36]	; (42b0 <system_gclk_gen_set_config+0x110>)
    428a:	4798      	blx	r3
    428c:	1e03      	subs	r3, r0, #0
    428e:	d1fb      	bne.n	4288 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4290:	4b0a      	ldr	r3, [pc, #40]	; (42bc <system_gclk_gen_set_config+0x11c>)
    4292:	4a0a      	ldr	r2, [pc, #40]	; (42bc <system_gclk_gen_set_config+0x11c>)
    4294:	6851      	ldr	r1, [r2, #4]
    4296:	2280      	movs	r2, #128	; 0x80
    4298:	0252      	lsls	r2, r2, #9
    429a:	4011      	ands	r1, r2
    429c:	697a      	ldr	r2, [r7, #20]
    429e:	430a      	orrs	r2, r1
    42a0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    42a2:	4b07      	ldr	r3, [pc, #28]	; (42c0 <system_gclk_gen_set_config+0x120>)
    42a4:	4798      	blx	r3
}
    42a6:	46c0      	nop			; (mov r8, r8)
    42a8:	46bd      	mov	sp, r7
    42aa:	b006      	add	sp, #24
    42ac:	bd80      	pop	{r7, pc}
    42ae:	46c0      	nop			; (mov r8, r8)
    42b0:	00004151 	.word	0x00004151
    42b4:	00004129 	.word	0x00004129
    42b8:	40000c08 	.word	0x40000c08
    42bc:	40000c00 	.word	0x40000c00
    42c0:	0000413d 	.word	0x0000413d

000042c4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    42c4:	b580      	push	{r7, lr}
    42c6:	b082      	sub	sp, #8
    42c8:	af00      	add	r7, sp, #0
    42ca:	0002      	movs	r2, r0
    42cc:	1dfb      	adds	r3, r7, #7
    42ce:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    42d0:	46c0      	nop			; (mov r8, r8)
    42d2:	4b0e      	ldr	r3, [pc, #56]	; (430c <system_gclk_gen_enable+0x48>)
    42d4:	4798      	blx	r3
    42d6:	1e03      	subs	r3, r0, #0
    42d8:	d1fb      	bne.n	42d2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    42da:	4b0d      	ldr	r3, [pc, #52]	; (4310 <system_gclk_gen_enable+0x4c>)
    42dc:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    42de:	4a0d      	ldr	r2, [pc, #52]	; (4314 <system_gclk_gen_enable+0x50>)
    42e0:	1dfb      	adds	r3, r7, #7
    42e2:	781b      	ldrb	r3, [r3, #0]
    42e4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    42e6:	46c0      	nop			; (mov r8, r8)
    42e8:	4b08      	ldr	r3, [pc, #32]	; (430c <system_gclk_gen_enable+0x48>)
    42ea:	4798      	blx	r3
    42ec:	1e03      	subs	r3, r0, #0
    42ee:	d1fb      	bne.n	42e8 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    42f0:	4b09      	ldr	r3, [pc, #36]	; (4318 <system_gclk_gen_enable+0x54>)
    42f2:	4a09      	ldr	r2, [pc, #36]	; (4318 <system_gclk_gen_enable+0x54>)
    42f4:	6852      	ldr	r2, [r2, #4]
    42f6:	2180      	movs	r1, #128	; 0x80
    42f8:	0249      	lsls	r1, r1, #9
    42fa:	430a      	orrs	r2, r1
    42fc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    42fe:	4b07      	ldr	r3, [pc, #28]	; (431c <system_gclk_gen_enable+0x58>)
    4300:	4798      	blx	r3
}
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	46bd      	mov	sp, r7
    4306:	b002      	add	sp, #8
    4308:	bd80      	pop	{r7, pc}
    430a:	46c0      	nop			; (mov r8, r8)
    430c:	00004151 	.word	0x00004151
    4310:	00004129 	.word	0x00004129
    4314:	40000c04 	.word	0x40000c04
    4318:	40000c00 	.word	0x40000c00
    431c:	0000413d 	.word	0x0000413d

00004320 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4320:	b580      	push	{r7, lr}
    4322:	b086      	sub	sp, #24
    4324:	af00      	add	r7, sp, #0
    4326:	0002      	movs	r2, r0
    4328:	1dfb      	adds	r3, r7, #7
    432a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    432c:	46c0      	nop			; (mov r8, r8)
    432e:	4b2a      	ldr	r3, [pc, #168]	; (43d8 <system_gclk_gen_get_hz+0xb8>)
    4330:	4798      	blx	r3
    4332:	1e03      	subs	r3, r0, #0
    4334:	d1fb      	bne.n	432e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4336:	4b29      	ldr	r3, [pc, #164]	; (43dc <system_gclk_gen_get_hz+0xbc>)
    4338:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    433a:	4a29      	ldr	r2, [pc, #164]	; (43e0 <system_gclk_gen_get_hz+0xc0>)
    433c:	1dfb      	adds	r3, r7, #7
    433e:	781b      	ldrb	r3, [r3, #0]
    4340:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	4b24      	ldr	r3, [pc, #144]	; (43d8 <system_gclk_gen_get_hz+0xb8>)
    4346:	4798      	blx	r3
    4348:	1e03      	subs	r3, r0, #0
    434a:	d1fb      	bne.n	4344 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    434c:	4b25      	ldr	r3, [pc, #148]	; (43e4 <system_gclk_gen_get_hz+0xc4>)
    434e:	685b      	ldr	r3, [r3, #4]
    4350:	04db      	lsls	r3, r3, #19
    4352:	0edb      	lsrs	r3, r3, #27
    4354:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4356:	0018      	movs	r0, r3
    4358:	4b23      	ldr	r3, [pc, #140]	; (43e8 <system_gclk_gen_get_hz+0xc8>)
    435a:	4798      	blx	r3
    435c:	0003      	movs	r3, r0
    435e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4360:	4a1f      	ldr	r2, [pc, #124]	; (43e0 <system_gclk_gen_get_hz+0xc0>)
    4362:	1dfb      	adds	r3, r7, #7
    4364:	781b      	ldrb	r3, [r3, #0]
    4366:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4368:	4b1e      	ldr	r3, [pc, #120]	; (43e4 <system_gclk_gen_get_hz+0xc4>)
    436a:	685b      	ldr	r3, [r3, #4]
    436c:	02db      	lsls	r3, r3, #11
    436e:	0fdb      	lsrs	r3, r3, #31
    4370:	b2da      	uxtb	r2, r3
    4372:	2313      	movs	r3, #19
    4374:	18fb      	adds	r3, r7, r3
    4376:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4378:	4a1c      	ldr	r2, [pc, #112]	; (43ec <system_gclk_gen_get_hz+0xcc>)
    437a:	1dfb      	adds	r3, r7, #7
    437c:	781b      	ldrb	r3, [r3, #0]
    437e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4380:	46c0      	nop			; (mov r8, r8)
    4382:	4b15      	ldr	r3, [pc, #84]	; (43d8 <system_gclk_gen_get_hz+0xb8>)
    4384:	4798      	blx	r3
    4386:	1e03      	subs	r3, r0, #0
    4388:	d1fb      	bne.n	4382 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    438a:	4b16      	ldr	r3, [pc, #88]	; (43e4 <system_gclk_gen_get_hz+0xc4>)
    438c:	689b      	ldr	r3, [r3, #8]
    438e:	021b      	lsls	r3, r3, #8
    4390:	0c1b      	lsrs	r3, r3, #16
    4392:	b29b      	uxth	r3, r3
    4394:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    4396:	4b16      	ldr	r3, [pc, #88]	; (43f0 <system_gclk_gen_get_hz+0xd0>)
    4398:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    439a:	2313      	movs	r3, #19
    439c:	18fb      	adds	r3, r7, r3
    439e:	781b      	ldrb	r3, [r3, #0]
    43a0:	2b00      	cmp	r3, #0
    43a2:	d109      	bne.n	43b8 <system_gclk_gen_get_hz+0x98>
    43a4:	68fb      	ldr	r3, [r7, #12]
    43a6:	2b01      	cmp	r3, #1
    43a8:	d906      	bls.n	43b8 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    43aa:	4b12      	ldr	r3, [pc, #72]	; (43f4 <system_gclk_gen_get_hz+0xd4>)
    43ac:	68f9      	ldr	r1, [r7, #12]
    43ae:	6978      	ldr	r0, [r7, #20]
    43b0:	4798      	blx	r3
    43b2:	0003      	movs	r3, r0
    43b4:	617b      	str	r3, [r7, #20]
    43b6:	e00a      	b.n	43ce <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    43b8:	2313      	movs	r3, #19
    43ba:	18fb      	adds	r3, r7, r3
    43bc:	781b      	ldrb	r3, [r3, #0]
    43be:	2b00      	cmp	r3, #0
    43c0:	d005      	beq.n	43ce <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    43c2:	68fb      	ldr	r3, [r7, #12]
    43c4:	3301      	adds	r3, #1
    43c6:	697a      	ldr	r2, [r7, #20]
    43c8:	40da      	lsrs	r2, r3
    43ca:	0013      	movs	r3, r2
    43cc:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    43ce:	697b      	ldr	r3, [r7, #20]
}
    43d0:	0018      	movs	r0, r3
    43d2:	46bd      	mov	sp, r7
    43d4:	b006      	add	sp, #24
    43d6:	bd80      	pop	{r7, pc}
    43d8:	00004151 	.word	0x00004151
    43dc:	00004129 	.word	0x00004129
    43e0:	40000c04 	.word	0x40000c04
    43e4:	40000c00 	.word	0x40000c00
    43e8:	000039c5 	.word	0x000039c5
    43ec:	40000c08 	.word	0x40000c08
    43f0:	0000413d 	.word	0x0000413d
    43f4:	00008c49 	.word	0x00008c49

000043f8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    43f8:	b580      	push	{r7, lr}
    43fa:	b084      	sub	sp, #16
    43fc:	af00      	add	r7, sp, #0
    43fe:	0002      	movs	r2, r0
    4400:	6039      	str	r1, [r7, #0]
    4402:	1dfb      	adds	r3, r7, #7
    4404:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4406:	1dfb      	adds	r3, r7, #7
    4408:	781b      	ldrb	r3, [r3, #0]
    440a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    440c:	683b      	ldr	r3, [r7, #0]
    440e:	781b      	ldrb	r3, [r3, #0]
    4410:	021b      	lsls	r3, r3, #8
    4412:	001a      	movs	r2, r3
    4414:	68fb      	ldr	r3, [r7, #12]
    4416:	4313      	orrs	r3, r2
    4418:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    441a:	1dfb      	adds	r3, r7, #7
    441c:	781b      	ldrb	r3, [r3, #0]
    441e:	0018      	movs	r0, r3
    4420:	4b04      	ldr	r3, [pc, #16]	; (4434 <system_gclk_chan_set_config+0x3c>)
    4422:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4424:	4b04      	ldr	r3, [pc, #16]	; (4438 <system_gclk_chan_set_config+0x40>)
    4426:	68fa      	ldr	r2, [r7, #12]
    4428:	b292      	uxth	r2, r2
    442a:	805a      	strh	r2, [r3, #2]
}
    442c:	46c0      	nop			; (mov r8, r8)
    442e:	46bd      	mov	sp, r7
    4430:	b004      	add	sp, #16
    4432:	bd80      	pop	{r7, pc}
    4434:	00004485 	.word	0x00004485
    4438:	40000c00 	.word	0x40000c00

0000443c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    443c:	b580      	push	{r7, lr}
    443e:	b082      	sub	sp, #8
    4440:	af00      	add	r7, sp, #0
    4442:	0002      	movs	r2, r0
    4444:	1dfb      	adds	r3, r7, #7
    4446:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4448:	4b0a      	ldr	r3, [pc, #40]	; (4474 <system_gclk_chan_enable+0x38>)
    444a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    444c:	4a0a      	ldr	r2, [pc, #40]	; (4478 <system_gclk_chan_enable+0x3c>)
    444e:	1dfb      	adds	r3, r7, #7
    4450:	781b      	ldrb	r3, [r3, #0]
    4452:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4454:	4909      	ldr	r1, [pc, #36]	; (447c <system_gclk_chan_enable+0x40>)
    4456:	4b09      	ldr	r3, [pc, #36]	; (447c <system_gclk_chan_enable+0x40>)
    4458:	885b      	ldrh	r3, [r3, #2]
    445a:	b29b      	uxth	r3, r3
    445c:	2280      	movs	r2, #128	; 0x80
    445e:	01d2      	lsls	r2, r2, #7
    4460:	4313      	orrs	r3, r2
    4462:	b29b      	uxth	r3, r3
    4464:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4466:	4b06      	ldr	r3, [pc, #24]	; (4480 <system_gclk_chan_enable+0x44>)
    4468:	4798      	blx	r3
}
    446a:	46c0      	nop			; (mov r8, r8)
    446c:	46bd      	mov	sp, r7
    446e:	b002      	add	sp, #8
    4470:	bd80      	pop	{r7, pc}
    4472:	46c0      	nop			; (mov r8, r8)
    4474:	00004129 	.word	0x00004129
    4478:	40000c02 	.word	0x40000c02
    447c:	40000c00 	.word	0x40000c00
    4480:	0000413d 	.word	0x0000413d

00004484 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4484:	b580      	push	{r7, lr}
    4486:	b084      	sub	sp, #16
    4488:	af00      	add	r7, sp, #0
    448a:	0002      	movs	r2, r0
    448c:	1dfb      	adds	r3, r7, #7
    448e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4490:	4b1c      	ldr	r3, [pc, #112]	; (4504 <system_gclk_chan_disable+0x80>)
    4492:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4494:	4a1c      	ldr	r2, [pc, #112]	; (4508 <system_gclk_chan_disable+0x84>)
    4496:	1dfb      	adds	r3, r7, #7
    4498:	781b      	ldrb	r3, [r3, #0]
    449a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    449c:	4b1b      	ldr	r3, [pc, #108]	; (450c <system_gclk_chan_disable+0x88>)
    449e:	885b      	ldrh	r3, [r3, #2]
    44a0:	051b      	lsls	r3, r3, #20
    44a2:	0f1b      	lsrs	r3, r3, #28
    44a4:	b2db      	uxtb	r3, r3
    44a6:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    44a8:	4a18      	ldr	r2, [pc, #96]	; (450c <system_gclk_chan_disable+0x88>)
    44aa:	8853      	ldrh	r3, [r2, #2]
    44ac:	4918      	ldr	r1, [pc, #96]	; (4510 <system_gclk_chan_disable+0x8c>)
    44ae:	400b      	ands	r3, r1
    44b0:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    44b2:	4a16      	ldr	r2, [pc, #88]	; (450c <system_gclk_chan_disable+0x88>)
    44b4:	4b15      	ldr	r3, [pc, #84]	; (450c <system_gclk_chan_disable+0x88>)
    44b6:	885b      	ldrh	r3, [r3, #2]
    44b8:	b29b      	uxth	r3, r3
    44ba:	4916      	ldr	r1, [pc, #88]	; (4514 <system_gclk_chan_disable+0x90>)
    44bc:	400b      	ands	r3, r1
    44be:	b29b      	uxth	r3, r3
    44c0:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    44c2:	46c0      	nop			; (mov r8, r8)
    44c4:	4b11      	ldr	r3, [pc, #68]	; (450c <system_gclk_chan_disable+0x88>)
    44c6:	885b      	ldrh	r3, [r3, #2]
    44c8:	b29b      	uxth	r3, r3
    44ca:	001a      	movs	r2, r3
    44cc:	2380      	movs	r3, #128	; 0x80
    44ce:	01db      	lsls	r3, r3, #7
    44d0:	4013      	ands	r3, r2
    44d2:	d1f7      	bne.n	44c4 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    44d4:	4a0d      	ldr	r2, [pc, #52]	; (450c <system_gclk_chan_disable+0x88>)
    44d6:	68fb      	ldr	r3, [r7, #12]
    44d8:	b2db      	uxtb	r3, r3
    44da:	1c19      	adds	r1, r3, #0
    44dc:	230f      	movs	r3, #15
    44de:	400b      	ands	r3, r1
    44e0:	b2d9      	uxtb	r1, r3
    44e2:	8853      	ldrh	r3, [r2, #2]
    44e4:	1c08      	adds	r0, r1, #0
    44e6:	210f      	movs	r1, #15
    44e8:	4001      	ands	r1, r0
    44ea:	0208      	lsls	r0, r1, #8
    44ec:	4908      	ldr	r1, [pc, #32]	; (4510 <system_gclk_chan_disable+0x8c>)
    44ee:	400b      	ands	r3, r1
    44f0:	1c19      	adds	r1, r3, #0
    44f2:	1c03      	adds	r3, r0, #0
    44f4:	430b      	orrs	r3, r1
    44f6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    44f8:	4b07      	ldr	r3, [pc, #28]	; (4518 <system_gclk_chan_disable+0x94>)
    44fa:	4798      	blx	r3
}
    44fc:	46c0      	nop			; (mov r8, r8)
    44fe:	46bd      	mov	sp, r7
    4500:	b004      	add	sp, #16
    4502:	bd80      	pop	{r7, pc}
    4504:	00004129 	.word	0x00004129
    4508:	40000c02 	.word	0x40000c02
    450c:	40000c00 	.word	0x40000c00
    4510:	fffff0ff 	.word	0xfffff0ff
    4514:	ffffbfff 	.word	0xffffbfff
    4518:	0000413d 	.word	0x0000413d

0000451c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    451c:	b580      	push	{r7, lr}
    451e:	b084      	sub	sp, #16
    4520:	af00      	add	r7, sp, #0
    4522:	0002      	movs	r2, r0
    4524:	1dfb      	adds	r3, r7, #7
    4526:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4528:	4b0d      	ldr	r3, [pc, #52]	; (4560 <system_gclk_chan_get_hz+0x44>)
    452a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    452c:	4a0d      	ldr	r2, [pc, #52]	; (4564 <system_gclk_chan_get_hz+0x48>)
    452e:	1dfb      	adds	r3, r7, #7
    4530:	781b      	ldrb	r3, [r3, #0]
    4532:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4534:	4b0c      	ldr	r3, [pc, #48]	; (4568 <system_gclk_chan_get_hz+0x4c>)
    4536:	885b      	ldrh	r3, [r3, #2]
    4538:	051b      	lsls	r3, r3, #20
    453a:	0f1b      	lsrs	r3, r3, #28
    453c:	b2da      	uxtb	r2, r3
    453e:	230f      	movs	r3, #15
    4540:	18fb      	adds	r3, r7, r3
    4542:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4544:	4b09      	ldr	r3, [pc, #36]	; (456c <system_gclk_chan_get_hz+0x50>)
    4546:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4548:	230f      	movs	r3, #15
    454a:	18fb      	adds	r3, r7, r3
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	0018      	movs	r0, r3
    4550:	4b07      	ldr	r3, [pc, #28]	; (4570 <system_gclk_chan_get_hz+0x54>)
    4552:	4798      	blx	r3
    4554:	0003      	movs	r3, r0
}
    4556:	0018      	movs	r0, r3
    4558:	46bd      	mov	sp, r7
    455a:	b004      	add	sp, #16
    455c:	bd80      	pop	{r7, pc}
    455e:	46c0      	nop			; (mov r8, r8)
    4560:	00004129 	.word	0x00004129
    4564:	40000c02 	.word	0x40000c02
    4568:	40000c00 	.word	0x40000c00
    456c:	0000413d 	.word	0x0000413d
    4570:	00004321 	.word	0x00004321

00004574 <system_pinmux_get_group_from_gpio_pin>:
{
    4574:	b580      	push	{r7, lr}
    4576:	b084      	sub	sp, #16
    4578:	af00      	add	r7, sp, #0
    457a:	0002      	movs	r2, r0
    457c:	1dfb      	adds	r3, r7, #7
    457e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4580:	230f      	movs	r3, #15
    4582:	18fb      	adds	r3, r7, r3
    4584:	1dfa      	adds	r2, r7, #7
    4586:	7812      	ldrb	r2, [r2, #0]
    4588:	09d2      	lsrs	r2, r2, #7
    458a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    458c:	230e      	movs	r3, #14
    458e:	18fb      	adds	r3, r7, r3
    4590:	1dfa      	adds	r2, r7, #7
    4592:	7812      	ldrb	r2, [r2, #0]
    4594:	0952      	lsrs	r2, r2, #5
    4596:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4598:	4b0d      	ldr	r3, [pc, #52]	; (45d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    459a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    459c:	230f      	movs	r3, #15
    459e:	18fb      	adds	r3, r7, r3
    45a0:	781b      	ldrb	r3, [r3, #0]
    45a2:	2b00      	cmp	r3, #0
    45a4:	d10f      	bne.n	45c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    45a6:	230f      	movs	r3, #15
    45a8:	18fb      	adds	r3, r7, r3
    45aa:	781b      	ldrb	r3, [r3, #0]
    45ac:	009b      	lsls	r3, r3, #2
    45ae:	2210      	movs	r2, #16
    45b0:	4694      	mov	ip, r2
    45b2:	44bc      	add	ip, r7
    45b4:	4463      	add	r3, ip
    45b6:	3b08      	subs	r3, #8
    45b8:	681a      	ldr	r2, [r3, #0]
    45ba:	230e      	movs	r3, #14
    45bc:	18fb      	adds	r3, r7, r3
    45be:	781b      	ldrb	r3, [r3, #0]
    45c0:	01db      	lsls	r3, r3, #7
    45c2:	18d3      	adds	r3, r2, r3
    45c4:	e000      	b.n	45c8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    45c6:	2300      	movs	r3, #0
}
    45c8:	0018      	movs	r0, r3
    45ca:	46bd      	mov	sp, r7
    45cc:	b004      	add	sp, #16
    45ce:	bd80      	pop	{r7, pc}
    45d0:	41004400 	.word	0x41004400

000045d4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    45d4:	b580      	push	{r7, lr}
    45d6:	b088      	sub	sp, #32
    45d8:	af00      	add	r7, sp, #0
    45da:	60f8      	str	r0, [r7, #12]
    45dc:	60b9      	str	r1, [r7, #8]
    45de:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    45e0:	2300      	movs	r3, #0
    45e2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    45e4:	687b      	ldr	r3, [r7, #4]
    45e6:	78db      	ldrb	r3, [r3, #3]
    45e8:	2201      	movs	r2, #1
    45ea:	4053      	eors	r3, r2
    45ec:	b2db      	uxtb	r3, r3
    45ee:	2b00      	cmp	r3, #0
    45f0:	d035      	beq.n	465e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    45f2:	687b      	ldr	r3, [r7, #4]
    45f4:	781b      	ldrb	r3, [r3, #0]
    45f6:	2b80      	cmp	r3, #128	; 0x80
    45f8:	d00b      	beq.n	4612 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    45fa:	69fb      	ldr	r3, [r7, #28]
    45fc:	2280      	movs	r2, #128	; 0x80
    45fe:	0252      	lsls	r2, r2, #9
    4600:	4313      	orrs	r3, r2
    4602:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4604:	687b      	ldr	r3, [r7, #4]
    4606:	781b      	ldrb	r3, [r3, #0]
    4608:	061b      	lsls	r3, r3, #24
    460a:	001a      	movs	r2, r3
    460c:	69fb      	ldr	r3, [r7, #28]
    460e:	4313      	orrs	r3, r2
    4610:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4612:	687b      	ldr	r3, [r7, #4]
    4614:	785b      	ldrb	r3, [r3, #1]
    4616:	2b00      	cmp	r3, #0
    4618:	d003      	beq.n	4622 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    461a:	687b      	ldr	r3, [r7, #4]
    461c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    461e:	2b02      	cmp	r3, #2
    4620:	d110      	bne.n	4644 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4622:	69fb      	ldr	r3, [r7, #28]
    4624:	2280      	movs	r2, #128	; 0x80
    4626:	0292      	lsls	r2, r2, #10
    4628:	4313      	orrs	r3, r2
    462a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    462c:	687b      	ldr	r3, [r7, #4]
    462e:	789b      	ldrb	r3, [r3, #2]
    4630:	2b00      	cmp	r3, #0
    4632:	d004      	beq.n	463e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4634:	69fb      	ldr	r3, [r7, #28]
    4636:	2280      	movs	r2, #128	; 0x80
    4638:	02d2      	lsls	r2, r2, #11
    463a:	4313      	orrs	r3, r2
    463c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    463e:	68fb      	ldr	r3, [r7, #12]
    4640:	68ba      	ldr	r2, [r7, #8]
    4642:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4644:	687b      	ldr	r3, [r7, #4]
    4646:	785b      	ldrb	r3, [r3, #1]
    4648:	2b01      	cmp	r3, #1
    464a:	d003      	beq.n	4654 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    464c:	687b      	ldr	r3, [r7, #4]
    464e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4650:	2b02      	cmp	r3, #2
    4652:	d107      	bne.n	4664 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4654:	69fb      	ldr	r3, [r7, #28]
    4656:	4a22      	ldr	r2, [pc, #136]	; (46e0 <_system_pinmux_config+0x10c>)
    4658:	4013      	ands	r3, r2
    465a:	61fb      	str	r3, [r7, #28]
    465c:	e002      	b.n	4664 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    465e:	68fb      	ldr	r3, [r7, #12]
    4660:	68ba      	ldr	r2, [r7, #8]
    4662:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4664:	68bb      	ldr	r3, [r7, #8]
    4666:	041b      	lsls	r3, r3, #16
    4668:	0c1b      	lsrs	r3, r3, #16
    466a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    466c:	68bb      	ldr	r3, [r7, #8]
    466e:	0c1b      	lsrs	r3, r3, #16
    4670:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4672:	69ba      	ldr	r2, [r7, #24]
    4674:	69fb      	ldr	r3, [r7, #28]
    4676:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4678:	22a0      	movs	r2, #160	; 0xa0
    467a:	05d2      	lsls	r2, r2, #23
    467c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    467e:	68fb      	ldr	r3, [r7, #12]
    4680:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4682:	697a      	ldr	r2, [r7, #20]
    4684:	69fb      	ldr	r3, [r7, #28]
    4686:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4688:	22d0      	movs	r2, #208	; 0xd0
    468a:	0612      	lsls	r2, r2, #24
    468c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    468e:	68fb      	ldr	r3, [r7, #12]
    4690:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	78db      	ldrb	r3, [r3, #3]
    4696:	2201      	movs	r2, #1
    4698:	4053      	eors	r3, r2
    469a:	b2db      	uxtb	r3, r3
    469c:	2b00      	cmp	r3, #0
    469e:	d01a      	beq.n	46d6 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    46a0:	69fa      	ldr	r2, [r7, #28]
    46a2:	2380      	movs	r3, #128	; 0x80
    46a4:	02db      	lsls	r3, r3, #11
    46a6:	4013      	ands	r3, r2
    46a8:	d00a      	beq.n	46c0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    46aa:	687b      	ldr	r3, [r7, #4]
    46ac:	789b      	ldrb	r3, [r3, #2]
    46ae:	2b01      	cmp	r3, #1
    46b0:	d103      	bne.n	46ba <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    46b2:	68fb      	ldr	r3, [r7, #12]
    46b4:	68ba      	ldr	r2, [r7, #8]
    46b6:	619a      	str	r2, [r3, #24]
    46b8:	e002      	b.n	46c0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    46ba:	68fb      	ldr	r3, [r7, #12]
    46bc:	68ba      	ldr	r2, [r7, #8]
    46be:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    46c0:	687b      	ldr	r3, [r7, #4]
    46c2:	785b      	ldrb	r3, [r3, #1]
    46c4:	2b01      	cmp	r3, #1
    46c6:	d003      	beq.n	46d0 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    46cc:	2b02      	cmp	r3, #2
    46ce:	d102      	bne.n	46d6 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    46d0:	68fb      	ldr	r3, [r7, #12]
    46d2:	68ba      	ldr	r2, [r7, #8]
    46d4:	609a      	str	r2, [r3, #8]
		}
	}
}
    46d6:	46c0      	nop			; (mov r8, r8)
    46d8:	46bd      	mov	sp, r7
    46da:	b008      	add	sp, #32
    46dc:	bd80      	pop	{r7, pc}
    46de:	46c0      	nop			; (mov r8, r8)
    46e0:	fffbffff 	.word	0xfffbffff

000046e4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    46e4:	b580      	push	{r7, lr}
    46e6:	b084      	sub	sp, #16
    46e8:	af00      	add	r7, sp, #0
    46ea:	0002      	movs	r2, r0
    46ec:	6039      	str	r1, [r7, #0]
    46ee:	1dfb      	adds	r3, r7, #7
    46f0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    46f2:	1dfb      	adds	r3, r7, #7
    46f4:	781b      	ldrb	r3, [r3, #0]
    46f6:	0018      	movs	r0, r3
    46f8:	4b0a      	ldr	r3, [pc, #40]	; (4724 <system_pinmux_pin_set_config+0x40>)
    46fa:	4798      	blx	r3
    46fc:	0003      	movs	r3, r0
    46fe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4700:	1dfb      	adds	r3, r7, #7
    4702:	781b      	ldrb	r3, [r3, #0]
    4704:	221f      	movs	r2, #31
    4706:	4013      	ands	r3, r2
    4708:	2201      	movs	r2, #1
    470a:	409a      	lsls	r2, r3
    470c:	0013      	movs	r3, r2
    470e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4710:	683a      	ldr	r2, [r7, #0]
    4712:	68b9      	ldr	r1, [r7, #8]
    4714:	68fb      	ldr	r3, [r7, #12]
    4716:	0018      	movs	r0, r3
    4718:	4b03      	ldr	r3, [pc, #12]	; (4728 <system_pinmux_pin_set_config+0x44>)
    471a:	4798      	blx	r3
}
    471c:	46c0      	nop			; (mov r8, r8)
    471e:	46bd      	mov	sp, r7
    4720:	b004      	add	sp, #16
    4722:	bd80      	pop	{r7, pc}
    4724:	00004575 	.word	0x00004575
    4728:	000045d5 	.word	0x000045d5

0000472c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    472c:	b580      	push	{r7, lr}
    472e:	af00      	add	r7, sp, #0
	return;
    4730:	46c0      	nop			; (mov r8, r8)
}
    4732:	46bd      	mov	sp, r7
    4734:	bd80      	pop	{r7, pc}
	...

00004738 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4738:	b580      	push	{r7, lr}
    473a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    473c:	4b06      	ldr	r3, [pc, #24]	; (4758 <system_init+0x20>)
    473e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4740:	4b06      	ldr	r3, [pc, #24]	; (475c <system_init+0x24>)
    4742:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4744:	4b06      	ldr	r3, [pc, #24]	; (4760 <system_init+0x28>)
    4746:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4748:	4b06      	ldr	r3, [pc, #24]	; (4764 <system_init+0x2c>)
    474a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    474c:	4b06      	ldr	r3, [pc, #24]	; (4768 <system_init+0x30>)
    474e:	4798      	blx	r3
}
    4750:	46c0      	nop			; (mov r8, r8)
    4752:	46bd      	mov	sp, r7
    4754:	bd80      	pop	{r7, pc}
    4756:	46c0      	nop			; (mov r8, r8)
    4758:	00003e51 	.word	0x00003e51
    475c:	000036e5 	.word	0x000036e5
    4760:	0000472d 	.word	0x0000472d
    4764:	0000472d 	.word	0x0000472d
    4768:	0000472d 	.word	0x0000472d

0000476c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    476c:	b580      	push	{r7, lr}
    476e:	b082      	sub	sp, #8
    4770:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4772:	4b2f      	ldr	r3, [pc, #188]	; (4830 <Reset_Handler+0xc4>)
    4774:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4776:	4b2f      	ldr	r3, [pc, #188]	; (4834 <Reset_Handler+0xc8>)
    4778:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    477a:	687a      	ldr	r2, [r7, #4]
    477c:	683b      	ldr	r3, [r7, #0]
    477e:	429a      	cmp	r2, r3
    4780:	d00c      	beq.n	479c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4782:	e007      	b.n	4794 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4784:	683b      	ldr	r3, [r7, #0]
    4786:	1d1a      	adds	r2, r3, #4
    4788:	603a      	str	r2, [r7, #0]
    478a:	687a      	ldr	r2, [r7, #4]
    478c:	1d11      	adds	r1, r2, #4
    478e:	6079      	str	r1, [r7, #4]
    4790:	6812      	ldr	r2, [r2, #0]
    4792:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    4794:	683a      	ldr	r2, [r7, #0]
    4796:	4b28      	ldr	r3, [pc, #160]	; (4838 <Reset_Handler+0xcc>)
    4798:	429a      	cmp	r2, r3
    479a:	d3f3      	bcc.n	4784 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    479c:	4b27      	ldr	r3, [pc, #156]	; (483c <Reset_Handler+0xd0>)
    479e:	603b      	str	r3, [r7, #0]
    47a0:	e004      	b.n	47ac <Reset_Handler+0x40>
                *pDest++ = 0;
    47a2:	683b      	ldr	r3, [r7, #0]
    47a4:	1d1a      	adds	r2, r3, #4
    47a6:	603a      	str	r2, [r7, #0]
    47a8:	2200      	movs	r2, #0
    47aa:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    47ac:	683a      	ldr	r2, [r7, #0]
    47ae:	4b24      	ldr	r3, [pc, #144]	; (4840 <Reset_Handler+0xd4>)
    47b0:	429a      	cmp	r2, r3
    47b2:	d3f6      	bcc.n	47a2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    47b4:	4b23      	ldr	r3, [pc, #140]	; (4844 <Reset_Handler+0xd8>)
    47b6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    47b8:	4b23      	ldr	r3, [pc, #140]	; (4848 <Reset_Handler+0xdc>)
    47ba:	687a      	ldr	r2, [r7, #4]
    47bc:	21ff      	movs	r1, #255	; 0xff
    47be:	438a      	bics	r2, r1
    47c0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    47c2:	4a22      	ldr	r2, [pc, #136]	; (484c <Reset_Handler+0xe0>)
    47c4:	2390      	movs	r3, #144	; 0x90
    47c6:	005b      	lsls	r3, r3, #1
    47c8:	2102      	movs	r1, #2
    47ca:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    47cc:	4a20      	ldr	r2, [pc, #128]	; (4850 <Reset_Handler+0xe4>)
    47ce:	78d3      	ldrb	r3, [r2, #3]
    47d0:	2103      	movs	r1, #3
    47d2:	438b      	bics	r3, r1
    47d4:	1c19      	adds	r1, r3, #0
    47d6:	2302      	movs	r3, #2
    47d8:	430b      	orrs	r3, r1
    47da:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    47dc:	4a1c      	ldr	r2, [pc, #112]	; (4850 <Reset_Handler+0xe4>)
    47de:	78d3      	ldrb	r3, [r2, #3]
    47e0:	210c      	movs	r1, #12
    47e2:	438b      	bics	r3, r1
    47e4:	1c19      	adds	r1, r3, #0
    47e6:	2308      	movs	r3, #8
    47e8:	430b      	orrs	r3, r1
    47ea:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    47ec:	4a19      	ldr	r2, [pc, #100]	; (4854 <Reset_Handler+0xe8>)
    47ee:	7b93      	ldrb	r3, [r2, #14]
    47f0:	2130      	movs	r1, #48	; 0x30
    47f2:	438b      	bics	r3, r1
    47f4:	1c19      	adds	r1, r3, #0
    47f6:	2320      	movs	r3, #32
    47f8:	430b      	orrs	r3, r1
    47fa:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    47fc:	4a15      	ldr	r2, [pc, #84]	; (4854 <Reset_Handler+0xe8>)
    47fe:	7b93      	ldrb	r3, [r2, #14]
    4800:	210c      	movs	r1, #12
    4802:	438b      	bics	r3, r1
    4804:	1c19      	adds	r1, r3, #0
    4806:	2308      	movs	r3, #8
    4808:	430b      	orrs	r3, r1
    480a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    480c:	4a11      	ldr	r2, [pc, #68]	; (4854 <Reset_Handler+0xe8>)
    480e:	7b93      	ldrb	r3, [r2, #14]
    4810:	2103      	movs	r1, #3
    4812:	438b      	bics	r3, r1
    4814:	1c19      	adds	r1, r3, #0
    4816:	2302      	movs	r3, #2
    4818:	430b      	orrs	r3, r1
    481a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    481c:	4a0e      	ldr	r2, [pc, #56]	; (4858 <Reset_Handler+0xec>)
    481e:	6853      	ldr	r3, [r2, #4]
    4820:	2180      	movs	r1, #128	; 0x80
    4822:	430b      	orrs	r3, r1
    4824:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4826:	4b0d      	ldr	r3, [pc, #52]	; (485c <Reset_Handler+0xf0>)
    4828:	4798      	blx	r3

        /* Branch to main function */
        main();
    482a:	4b0d      	ldr	r3, [pc, #52]	; (4860 <Reset_Handler+0xf4>)
    482c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    482e:	e7fe      	b.n	482e <Reset_Handler+0xc2>
    4830:	0000b838 	.word	0x0000b838
    4834:	20000000 	.word	0x20000000
    4838:	2000021c 	.word	0x2000021c
    483c:	2000021c 	.word	0x2000021c
    4840:	2000039c 	.word	0x2000039c
    4844:	00000000 	.word	0x00000000
    4848:	e000ed00 	.word	0xe000ed00
    484c:	41007000 	.word	0x41007000
    4850:	41005000 	.word	0x41005000
    4854:	41004800 	.word	0x41004800
    4858:	41004000 	.word	0x41004000
    485c:	00005ffd 	.word	0x00005ffd
    4860:	00005f39 	.word	0x00005f39

00004864 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4864:	b580      	push	{r7, lr}
    4866:	af00      	add	r7, sp, #0
        while (1) {
    4868:	e7fe      	b.n	4868 <Dummy_Handler+0x4>
	...

0000486c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    486c:	b580      	push	{r7, lr}
    486e:	b084      	sub	sp, #16
    4870:	af00      	add	r7, sp, #0
    4872:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4874:	4b0a      	ldr	r3, [pc, #40]	; (48a0 <_sbrk+0x34>)
    4876:	681b      	ldr	r3, [r3, #0]
    4878:	2b00      	cmp	r3, #0
    487a:	d102      	bne.n	4882 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    487c:	4b08      	ldr	r3, [pc, #32]	; (48a0 <_sbrk+0x34>)
    487e:	4a09      	ldr	r2, [pc, #36]	; (48a4 <_sbrk+0x38>)
    4880:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    4882:	4b07      	ldr	r3, [pc, #28]	; (48a0 <_sbrk+0x34>)
    4884:	681b      	ldr	r3, [r3, #0]
    4886:	60fb      	str	r3, [r7, #12]

	heap += incr;
    4888:	4b05      	ldr	r3, [pc, #20]	; (48a0 <_sbrk+0x34>)
    488a:	681a      	ldr	r2, [r3, #0]
    488c:	687b      	ldr	r3, [r7, #4]
    488e:	18d2      	adds	r2, r2, r3
    4890:	4b03      	ldr	r3, [pc, #12]	; (48a0 <_sbrk+0x34>)
    4892:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    4894:	68fb      	ldr	r3, [r7, #12]
}
    4896:	0018      	movs	r0, r3
    4898:	46bd      	mov	sp, r7
    489a:	b004      	add	sp, #16
    489c:	bd80      	pop	{r7, pc}
    489e:	46c0      	nop			; (mov r8, r8)
    48a0:	20000280 	.word	0x20000280
    48a4:	200023a0 	.word	0x200023a0

000048a8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    48a8:	b580      	push	{r7, lr}
    48aa:	b082      	sub	sp, #8
    48ac:	af00      	add	r7, sp, #0
    48ae:	6078      	str	r0, [r7, #4]
	return -1;
    48b0:	2301      	movs	r3, #1
    48b2:	425b      	negs	r3, r3
}
    48b4:	0018      	movs	r0, r3
    48b6:	46bd      	mov	sp, r7
    48b8:	b002      	add	sp, #8
    48ba:	bd80      	pop	{r7, pc}

000048bc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    48bc:	b580      	push	{r7, lr}
    48be:	b082      	sub	sp, #8
    48c0:	af00      	add	r7, sp, #0
    48c2:	6078      	str	r0, [r7, #4]
    48c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    48c6:	683b      	ldr	r3, [r7, #0]
    48c8:	2280      	movs	r2, #128	; 0x80
    48ca:	0192      	lsls	r2, r2, #6
    48cc:	605a      	str	r2, [r3, #4]

	return 0;
    48ce:	2300      	movs	r3, #0
}
    48d0:	0018      	movs	r0, r3
    48d2:	46bd      	mov	sp, r7
    48d4:	b002      	add	sp, #8
    48d6:	bd80      	pop	{r7, pc}

000048d8 <_isatty>:

extern int _isatty(int file)
{
    48d8:	b580      	push	{r7, lr}
    48da:	b082      	sub	sp, #8
    48dc:	af00      	add	r7, sp, #0
    48de:	6078      	str	r0, [r7, #4]
	return 1;
    48e0:	2301      	movs	r3, #1
}
    48e2:	0018      	movs	r0, r3
    48e4:	46bd      	mov	sp, r7
    48e6:	b002      	add	sp, #8
    48e8:	bd80      	pop	{r7, pc}

000048ea <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    48ea:	b580      	push	{r7, lr}
    48ec:	b084      	sub	sp, #16
    48ee:	af00      	add	r7, sp, #0
    48f0:	60f8      	str	r0, [r7, #12]
    48f2:	60b9      	str	r1, [r7, #8]
    48f4:	607a      	str	r2, [r7, #4]
	return 0;
    48f6:	2300      	movs	r3, #0
}
    48f8:	0018      	movs	r0, r3
    48fa:	46bd      	mov	sp, r7
    48fc:	b004      	add	sp, #16
    48fe:	bd80      	pop	{r7, pc}

00004900 <system_pinmux_get_group_from_gpio_pin>:
{
    4900:	b580      	push	{r7, lr}
    4902:	b084      	sub	sp, #16
    4904:	af00      	add	r7, sp, #0
    4906:	0002      	movs	r2, r0
    4908:	1dfb      	adds	r3, r7, #7
    490a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    490c:	230f      	movs	r3, #15
    490e:	18fb      	adds	r3, r7, r3
    4910:	1dfa      	adds	r2, r7, #7
    4912:	7812      	ldrb	r2, [r2, #0]
    4914:	09d2      	lsrs	r2, r2, #7
    4916:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4918:	230e      	movs	r3, #14
    491a:	18fb      	adds	r3, r7, r3
    491c:	1dfa      	adds	r2, r7, #7
    491e:	7812      	ldrb	r2, [r2, #0]
    4920:	0952      	lsrs	r2, r2, #5
    4922:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4924:	4b0d      	ldr	r3, [pc, #52]	; (495c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4926:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    4928:	230f      	movs	r3, #15
    492a:	18fb      	adds	r3, r7, r3
    492c:	781b      	ldrb	r3, [r3, #0]
    492e:	2b00      	cmp	r3, #0
    4930:	d10f      	bne.n	4952 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4932:	230f      	movs	r3, #15
    4934:	18fb      	adds	r3, r7, r3
    4936:	781b      	ldrb	r3, [r3, #0]
    4938:	009b      	lsls	r3, r3, #2
    493a:	2210      	movs	r2, #16
    493c:	4694      	mov	ip, r2
    493e:	44bc      	add	ip, r7
    4940:	4463      	add	r3, ip
    4942:	3b08      	subs	r3, #8
    4944:	681a      	ldr	r2, [r3, #0]
    4946:	230e      	movs	r3, #14
    4948:	18fb      	adds	r3, r7, r3
    494a:	781b      	ldrb	r3, [r3, #0]
    494c:	01db      	lsls	r3, r3, #7
    494e:	18d3      	adds	r3, r2, r3
    4950:	e000      	b.n	4954 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    4952:	2300      	movs	r3, #0
}
    4954:	0018      	movs	r0, r3
    4956:	46bd      	mov	sp, r7
    4958:	b004      	add	sp, #16
    495a:	bd80      	pop	{r7, pc}
    495c:	41004400 	.word	0x41004400

00004960 <adc_is_syncing>:
{
    4960:	b580      	push	{r7, lr}
    4962:	b084      	sub	sp, #16
    4964:	af00      	add	r7, sp, #0
    4966:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    4968:	687b      	ldr	r3, [r7, #4]
    496a:	681b      	ldr	r3, [r3, #0]
    496c:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    496e:	68fb      	ldr	r3, [r7, #12]
    4970:	7e5b      	ldrb	r3, [r3, #25]
    4972:	b2db      	uxtb	r3, r3
    4974:	b25b      	sxtb	r3, r3
    4976:	2b00      	cmp	r3, #0
    4978:	da01      	bge.n	497e <adc_is_syncing+0x1e>
		return true;
    497a:	2301      	movs	r3, #1
    497c:	e000      	b.n	4980 <adc_is_syncing+0x20>
	return false;
    497e:	2300      	movs	r3, #0
}
    4980:	0018      	movs	r0, r3
    4982:	46bd      	mov	sp, r7
    4984:	b004      	add	sp, #16
    4986:	bd80      	pop	{r7, pc}

00004988 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    4988:	b580      	push	{r7, lr}
    498a:	b086      	sub	sp, #24
    498c:	af00      	add	r7, sp, #0
    498e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4990:	687b      	ldr	r3, [r7, #4]
    4992:	681b      	ldr	r3, [r3, #0]
    4994:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    4996:	693b      	ldr	r3, [r7, #16]
    4998:	7e1b      	ldrb	r3, [r3, #24]
    499a:	b2db      	uxtb	r3, r3
    499c:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    499e:	2300      	movs	r3, #0
    49a0:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    49a2:	68fb      	ldr	r3, [r7, #12]
    49a4:	2201      	movs	r2, #1
    49a6:	4013      	ands	r3, r2
    49a8:	d003      	beq.n	49b2 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    49aa:	697b      	ldr	r3, [r7, #20]
    49ac:	2201      	movs	r2, #1
    49ae:	4313      	orrs	r3, r2
    49b0:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    49b2:	68fb      	ldr	r3, [r7, #12]
    49b4:	2204      	movs	r2, #4
    49b6:	4013      	ands	r3, r2
    49b8:	d003      	beq.n	49c2 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    49ba:	697b      	ldr	r3, [r7, #20]
    49bc:	2202      	movs	r2, #2
    49be:	4313      	orrs	r3, r2
    49c0:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    49c2:	68fb      	ldr	r3, [r7, #12]
    49c4:	2202      	movs	r2, #2
    49c6:	4013      	ands	r3, r2
    49c8:	d003      	beq.n	49d2 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    49ca:	697b      	ldr	r3, [r7, #20]
    49cc:	2204      	movs	r2, #4
    49ce:	4313      	orrs	r3, r2
    49d0:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    49d2:	697b      	ldr	r3, [r7, #20]
}
    49d4:	0018      	movs	r0, r3
    49d6:	46bd      	mov	sp, r7
    49d8:	b006      	add	sp, #24
    49da:	bd80      	pop	{r7, pc}

000049dc <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    49dc:	b580      	push	{r7, lr}
    49de:	b084      	sub	sp, #16
    49e0:	af00      	add	r7, sp, #0
    49e2:	6078      	str	r0, [r7, #4]
    49e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    49e6:	687b      	ldr	r3, [r7, #4]
    49e8:	681b      	ldr	r3, [r3, #0]
    49ea:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    49ec:	2300      	movs	r3, #0
    49ee:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    49f0:	683b      	ldr	r3, [r7, #0]
    49f2:	2201      	movs	r2, #1
    49f4:	4013      	ands	r3, r2
    49f6:	d003      	beq.n	4a00 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    49f8:	68fb      	ldr	r3, [r7, #12]
    49fa:	2201      	movs	r2, #1
    49fc:	4313      	orrs	r3, r2
    49fe:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    4a00:	683b      	ldr	r3, [r7, #0]
    4a02:	2202      	movs	r2, #2
    4a04:	4013      	ands	r3, r2
    4a06:	d003      	beq.n	4a10 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    4a08:	68fb      	ldr	r3, [r7, #12]
    4a0a:	2204      	movs	r2, #4
    4a0c:	4313      	orrs	r3, r2
    4a0e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    4a10:	683b      	ldr	r3, [r7, #0]
    4a12:	2204      	movs	r2, #4
    4a14:	4013      	ands	r3, r2
    4a16:	d003      	beq.n	4a20 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    4a18:	68fb      	ldr	r3, [r7, #12]
    4a1a:	2202      	movs	r2, #2
    4a1c:	4313      	orrs	r3, r2
    4a1e:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    4a20:	68fb      	ldr	r3, [r7, #12]
    4a22:	b2da      	uxtb	r2, r3
    4a24:	68bb      	ldr	r3, [r7, #8]
    4a26:	761a      	strb	r2, [r3, #24]
}
    4a28:	46c0      	nop			; (mov r8, r8)
    4a2a:	46bd      	mov	sp, r7
    4a2c:	b004      	add	sp, #16
    4a2e:	bd80      	pop	{r7, pc}

00004a30 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    4a30:	b580      	push	{r7, lr}
    4a32:	b084      	sub	sp, #16
    4a34:	af00      	add	r7, sp, #0
    4a36:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4a38:	687b      	ldr	r3, [r7, #4]
    4a3a:	681b      	ldr	r3, [r3, #0]
    4a3c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    4a3e:	46c0      	nop			; (mov r8, r8)
    4a40:	687b      	ldr	r3, [r7, #4]
    4a42:	0018      	movs	r0, r3
    4a44:	4b0e      	ldr	r3, [pc, #56]	; (4a80 <adc_enable+0x50>)
    4a46:	4798      	blx	r3
    4a48:	1e03      	subs	r3, r0, #0
    4a4a:	d1f9      	bne.n	4a40 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    4a4c:	68fb      	ldr	r3, [r7, #12]
    4a4e:	220f      	movs	r2, #15
    4a50:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4a52:	68fb      	ldr	r3, [r7, #12]
    4a54:	220f      	movs	r2, #15
    4a56:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    4a58:	68fb      	ldr	r3, [r7, #12]
    4a5a:	781b      	ldrb	r3, [r3, #0]
    4a5c:	b2db      	uxtb	r3, r3
    4a5e:	2202      	movs	r2, #2
    4a60:	4313      	orrs	r3, r2
    4a62:	b2da      	uxtb	r2, r3
    4a64:	68fb      	ldr	r3, [r7, #12]
    4a66:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    4a68:	46c0      	nop			; (mov r8, r8)
    4a6a:	687b      	ldr	r3, [r7, #4]
    4a6c:	0018      	movs	r0, r3
    4a6e:	4b04      	ldr	r3, [pc, #16]	; (4a80 <adc_enable+0x50>)
    4a70:	4798      	blx	r3
    4a72:	1e03      	subs	r3, r0, #0
    4a74:	d1f9      	bne.n	4a6a <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    4a76:	2300      	movs	r3, #0
}
    4a78:	0018      	movs	r0, r3
    4a7a:	46bd      	mov	sp, r7
    4a7c:	b004      	add	sp, #16
    4a7e:	bd80      	pop	{r7, pc}
    4a80:	00004961 	.word	0x00004961

00004a84 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    4a84:	b580      	push	{r7, lr}
    4a86:	b084      	sub	sp, #16
    4a88:	af00      	add	r7, sp, #0
    4a8a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4a8c:	687b      	ldr	r3, [r7, #4]
    4a8e:	681b      	ldr	r3, [r3, #0]
    4a90:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    4a92:	46c0      	nop			; (mov r8, r8)
    4a94:	687b      	ldr	r3, [r7, #4]
    4a96:	0018      	movs	r0, r3
    4a98:	4b0b      	ldr	r3, [pc, #44]	; (4ac8 <adc_start_conversion+0x44>)
    4a9a:	4798      	blx	r3
    4a9c:	1e03      	subs	r3, r0, #0
    4a9e:	d1f9      	bne.n	4a94 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4aa0:	68fb      	ldr	r3, [r7, #12]
    4aa2:	7b1b      	ldrb	r3, [r3, #12]
    4aa4:	b2db      	uxtb	r3, r3
    4aa6:	2202      	movs	r2, #2
    4aa8:	4313      	orrs	r3, r2
    4aaa:	b2da      	uxtb	r2, r3
    4aac:	68fb      	ldr	r3, [r7, #12]
    4aae:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    4ab0:	46c0      	nop			; (mov r8, r8)
    4ab2:	687b      	ldr	r3, [r7, #4]
    4ab4:	0018      	movs	r0, r3
    4ab6:	4b04      	ldr	r3, [pc, #16]	; (4ac8 <adc_start_conversion+0x44>)
    4ab8:	4798      	blx	r3
    4aba:	1e03      	subs	r3, r0, #0
    4abc:	d1f9      	bne.n	4ab2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    4abe:	46c0      	nop			; (mov r8, r8)
    4ac0:	46bd      	mov	sp, r7
    4ac2:	b004      	add	sp, #16
    4ac4:	bd80      	pop	{r7, pc}
    4ac6:	46c0      	nop			; (mov r8, r8)
    4ac8:	00004961 	.word	0x00004961

00004acc <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    4acc:	b580      	push	{r7, lr}
    4ace:	b084      	sub	sp, #16
    4ad0:	af00      	add	r7, sp, #0
    4ad2:	6078      	str	r0, [r7, #4]
    4ad4:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    4ad6:	687b      	ldr	r3, [r7, #4]
    4ad8:	0018      	movs	r0, r3
    4ada:	4b18      	ldr	r3, [pc, #96]	; (4b3c <adc_read+0x70>)
    4adc:	4798      	blx	r3
    4ade:	0002      	movs	r2, r0
    4ae0:	2301      	movs	r3, #1
    4ae2:	4013      	ands	r3, r2
    4ae4:	d101      	bne.n	4aea <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    4ae6:	2305      	movs	r3, #5
    4ae8:	e023      	b.n	4b32 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    4aea:	687b      	ldr	r3, [r7, #4]
    4aec:	681b      	ldr	r3, [r3, #0]
    4aee:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    4af0:	46c0      	nop			; (mov r8, r8)
    4af2:	687b      	ldr	r3, [r7, #4]
    4af4:	0018      	movs	r0, r3
    4af6:	4b12      	ldr	r3, [pc, #72]	; (4b40 <adc_read+0x74>)
    4af8:	4798      	blx	r3
    4afa:	1e03      	subs	r3, r0, #0
    4afc:	d1f9      	bne.n	4af2 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    4afe:	68fb      	ldr	r3, [r7, #12]
    4b00:	8b5b      	ldrh	r3, [r3, #26]
    4b02:	b29a      	uxth	r2, r3
    4b04:	683b      	ldr	r3, [r7, #0]
    4b06:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    4b08:	687b      	ldr	r3, [r7, #4]
    4b0a:	2101      	movs	r1, #1
    4b0c:	0018      	movs	r0, r3
    4b0e:	4b0d      	ldr	r3, [pc, #52]	; (4b44 <adc_read+0x78>)
    4b10:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    4b12:	687b      	ldr	r3, [r7, #4]
    4b14:	0018      	movs	r0, r3
    4b16:	4b09      	ldr	r3, [pc, #36]	; (4b3c <adc_read+0x70>)
    4b18:	4798      	blx	r3
    4b1a:	0002      	movs	r2, r0
    4b1c:	2304      	movs	r3, #4
    4b1e:	4013      	ands	r3, r2
    4b20:	d006      	beq.n	4b30 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    4b22:	687b      	ldr	r3, [r7, #4]
    4b24:	2104      	movs	r1, #4
    4b26:	0018      	movs	r0, r3
    4b28:	4b06      	ldr	r3, [pc, #24]	; (4b44 <adc_read+0x78>)
    4b2a:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    4b2c:	231e      	movs	r3, #30
    4b2e:	e000      	b.n	4b32 <adc_read+0x66>
	}

	return STATUS_OK;
    4b30:	2300      	movs	r3, #0
}
    4b32:	0018      	movs	r0, r3
    4b34:	46bd      	mov	sp, r7
    4b36:	b004      	add	sp, #16
    4b38:	bd80      	pop	{r7, pc}
    4b3a:	46c0      	nop			; (mov r8, r8)
    4b3c:	00004989 	.word	0x00004989
    4b40:	00004961 	.word	0x00004961
    4b44:	000049dd 	.word	0x000049dd

00004b48 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4b48:	b580      	push	{r7, lr}
    4b4a:	b082      	sub	sp, #8
    4b4c:	af00      	add	r7, sp, #0
    4b4e:	0002      	movs	r2, r0
    4b50:	1dfb      	adds	r3, r7, #7
    4b52:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4b54:	4b06      	ldr	r3, [pc, #24]	; (4b70 <system_interrupt_enable+0x28>)
    4b56:	1dfa      	adds	r2, r7, #7
    4b58:	7812      	ldrb	r2, [r2, #0]
    4b5a:	0011      	movs	r1, r2
    4b5c:	221f      	movs	r2, #31
    4b5e:	400a      	ands	r2, r1
    4b60:	2101      	movs	r1, #1
    4b62:	4091      	lsls	r1, r2
    4b64:	000a      	movs	r2, r1
    4b66:	601a      	str	r2, [r3, #0]
}
    4b68:	46c0      	nop			; (mov r8, r8)
    4b6a:	46bd      	mov	sp, r7
    4b6c:	b002      	add	sp, #8
    4b6e:	bd80      	pop	{r7, pc}
    4b70:	e000e100 	.word	0xe000e100

00004b74 <i2c_master_is_syncing>:
{
    4b74:	b580      	push	{r7, lr}
    4b76:	b084      	sub	sp, #16
    4b78:	af00      	add	r7, sp, #0
    4b7a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    4b7c:	687b      	ldr	r3, [r7, #4]
    4b7e:	681b      	ldr	r3, [r3, #0]
    4b80:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    4b82:	68fb      	ldr	r3, [r7, #12]
    4b84:	69db      	ldr	r3, [r3, #28]
    4b86:	2207      	movs	r2, #7
    4b88:	4013      	ands	r3, r2
    4b8a:	1e5a      	subs	r2, r3, #1
    4b8c:	4193      	sbcs	r3, r2
    4b8e:	b2db      	uxtb	r3, r3
}
    4b90:	0018      	movs	r0, r3
    4b92:	46bd      	mov	sp, r7
    4b94:	b004      	add	sp, #16
    4b96:	bd80      	pop	{r7, pc}

00004b98 <_i2c_master_wait_for_sync>:
{
    4b98:	b580      	push	{r7, lr}
    4b9a:	b082      	sub	sp, #8
    4b9c:	af00      	add	r7, sp, #0
    4b9e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    4ba0:	46c0      	nop			; (mov r8, r8)
    4ba2:	687b      	ldr	r3, [r7, #4]
    4ba4:	0018      	movs	r0, r3
    4ba6:	4b04      	ldr	r3, [pc, #16]	; (4bb8 <_i2c_master_wait_for_sync+0x20>)
    4ba8:	4798      	blx	r3
    4baa:	1e03      	subs	r3, r0, #0
    4bac:	d1f9      	bne.n	4ba2 <_i2c_master_wait_for_sync+0xa>
}
    4bae:	46c0      	nop			; (mov r8, r8)
    4bb0:	46bd      	mov	sp, r7
    4bb2:	b002      	add	sp, #8
    4bb4:	bd80      	pop	{r7, pc}
    4bb6:	46c0      	nop			; (mov r8, r8)
    4bb8:	00004b75 	.word	0x00004b75

00004bbc <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    4bbc:	b580      	push	{r7, lr}
    4bbe:	b082      	sub	sp, #8
    4bc0:	af00      	add	r7, sp, #0
    4bc2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    4bc4:	687b      	ldr	r3, [r7, #4]
    4bc6:	2264      	movs	r2, #100	; 0x64
    4bc8:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    4bca:	687b      	ldr	r3, [r7, #4]
    4bcc:	4a1b      	ldr	r2, [pc, #108]	; (4c3c <i2c_master_get_config_defaults+0x80>)
    4bce:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    4bd0:	687b      	ldr	r3, [r7, #4]
    4bd2:	2200      	movs	r2, #0
    4bd4:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    4bd6:	687b      	ldr	r3, [r7, #4]
    4bd8:	2200      	movs	r2, #0
    4bda:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    4bdc:	687b      	ldr	r3, [r7, #4]
    4bde:	2200      	movs	r2, #0
    4be0:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    4be2:	687b      	ldr	r3, [r7, #4]
    4be4:	2280      	movs	r2, #128	; 0x80
    4be6:	0392      	lsls	r2, r2, #14
    4be8:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    4bea:	687b      	ldr	r3, [r7, #4]
    4bec:	2201      	movs	r2, #1
    4bee:	4252      	negs	r2, r2
    4bf0:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    4bf2:	687b      	ldr	r3, [r7, #4]
    4bf4:	2201      	movs	r2, #1
    4bf6:	4252      	negs	r2, r2
    4bf8:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    4bfa:	687b      	ldr	r3, [r7, #4]
    4bfc:	2200      	movs	r2, #0
    4bfe:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4c00:	687b      	ldr	r3, [r7, #4]
    4c02:	2200      	movs	r2, #0
    4c04:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    4c06:	687b      	ldr	r3, [r7, #4]
    4c08:	2224      	movs	r2, #36	; 0x24
    4c0a:	2100      	movs	r1, #0
    4c0c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    4c0e:	687b      	ldr	r3, [r7, #4]
    4c10:	2200      	movs	r2, #0
    4c12:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    4c14:	687b      	ldr	r3, [r7, #4]
    4c16:	222c      	movs	r2, #44	; 0x2c
    4c18:	2100      	movs	r1, #0
    4c1a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    4c1c:	687b      	ldr	r3, [r7, #4]
    4c1e:	222d      	movs	r2, #45	; 0x2d
    4c20:	2100      	movs	r1, #0
    4c22:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    4c24:	687b      	ldr	r3, [r7, #4]
    4c26:	222e      	movs	r2, #46	; 0x2e
    4c28:	2100      	movs	r1, #0
    4c2a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    4c2c:	687b      	ldr	r3, [r7, #4]
    4c2e:	22d7      	movs	r2, #215	; 0xd7
    4c30:	861a      	strh	r2, [r3, #48]	; 0x30
}
    4c32:	46c0      	nop			; (mov r8, r8)
    4c34:	46bd      	mov	sp, r7
    4c36:	b002      	add	sp, #8
    4c38:	bd80      	pop	{r7, pc}
    4c3a:	46c0      	nop			; (mov r8, r8)
    4c3c:	00000d48 	.word	0x00000d48

00004c40 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    4c40:	b580      	push	{r7, lr}
    4c42:	b084      	sub	sp, #16
    4c44:	af00      	add	r7, sp, #0
    4c46:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4c48:	687b      	ldr	r3, [r7, #4]
    4c4a:	681b      	ldr	r3, [r3, #0]
    4c4c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    4c4e:	2300      	movs	r3, #0
    4c50:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    4c52:	687b      	ldr	r3, [r7, #4]
    4c54:	0018      	movs	r0, r3
    4c56:	4b14      	ldr	r3, [pc, #80]	; (4ca8 <i2c_master_enable+0x68>)
    4c58:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    4c5a:	68bb      	ldr	r3, [r7, #8]
    4c5c:	681b      	ldr	r3, [r3, #0]
    4c5e:	2202      	movs	r2, #2
    4c60:	431a      	orrs	r2, r3
    4c62:	68bb      	ldr	r3, [r7, #8]
    4c64:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4c66:	687b      	ldr	r3, [r7, #4]
    4c68:	681b      	ldr	r3, [r3, #0]
    4c6a:	0018      	movs	r0, r3
    4c6c:	4b0f      	ldr	r3, [pc, #60]	; (4cac <i2c_master_enable+0x6c>)
    4c6e:	4798      	blx	r3
    4c70:	0003      	movs	r3, r0
    4c72:	0018      	movs	r0, r3
    4c74:	4b0e      	ldr	r3, [pc, #56]	; (4cb0 <i2c_master_enable+0x70>)
    4c76:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    4c78:	e00c      	b.n	4c94 <i2c_master_enable+0x54>
		timeout_counter++;
    4c7a:	68fb      	ldr	r3, [r7, #12]
    4c7c:	3301      	adds	r3, #1
    4c7e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    4c80:	687b      	ldr	r3, [r7, #4]
    4c82:	88db      	ldrh	r3, [r3, #6]
    4c84:	001a      	movs	r2, r3
    4c86:	68fb      	ldr	r3, [r7, #12]
    4c88:	429a      	cmp	r2, r3
    4c8a:	d803      	bhi.n	4c94 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    4c8c:	68bb      	ldr	r3, [r7, #8]
    4c8e:	2210      	movs	r2, #16
    4c90:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    4c92:	e006      	b.n	4ca2 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    4c94:	68bb      	ldr	r3, [r7, #8]
    4c96:	8b5b      	ldrh	r3, [r3, #26]
    4c98:	b29b      	uxth	r3, r3
    4c9a:	001a      	movs	r2, r3
    4c9c:	2310      	movs	r3, #16
    4c9e:	4013      	ands	r3, r2
    4ca0:	d0eb      	beq.n	4c7a <i2c_master_enable+0x3a>
		}
	}
}
    4ca2:	46bd      	mov	sp, r7
    4ca4:	b004      	add	sp, #16
    4ca6:	bd80      	pop	{r7, pc}
    4ca8:	00004b99 	.word	0x00004b99
    4cac:	00003481 	.word	0x00003481
    4cb0:	00004b49 	.word	0x00004b49

00004cb4 <port_get_group_from_gpio_pin>:
{
    4cb4:	b580      	push	{r7, lr}
    4cb6:	b082      	sub	sp, #8
    4cb8:	af00      	add	r7, sp, #0
    4cba:	0002      	movs	r2, r0
    4cbc:	1dfb      	adds	r3, r7, #7
    4cbe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4cc0:	1dfb      	adds	r3, r7, #7
    4cc2:	781b      	ldrb	r3, [r3, #0]
    4cc4:	0018      	movs	r0, r3
    4cc6:	4b03      	ldr	r3, [pc, #12]	; (4cd4 <port_get_group_from_gpio_pin+0x20>)
    4cc8:	4798      	blx	r3
    4cca:	0003      	movs	r3, r0
}
    4ccc:	0018      	movs	r0, r3
    4cce:	46bd      	mov	sp, r7
    4cd0:	b002      	add	sp, #8
    4cd2:	bd80      	pop	{r7, pc}
    4cd4:	00004901 	.word	0x00004901

00004cd8 <port_get_config_defaults>:
{
    4cd8:	b580      	push	{r7, lr}
    4cda:	b082      	sub	sp, #8
    4cdc:	af00      	add	r7, sp, #0
    4cde:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    4ce0:	687b      	ldr	r3, [r7, #4]
    4ce2:	2200      	movs	r2, #0
    4ce4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4ce6:	687b      	ldr	r3, [r7, #4]
    4ce8:	2201      	movs	r2, #1
    4cea:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    4cec:	687b      	ldr	r3, [r7, #4]
    4cee:	2200      	movs	r2, #0
    4cf0:	709a      	strb	r2, [r3, #2]
}
    4cf2:	46c0      	nop			; (mov r8, r8)
    4cf4:	46bd      	mov	sp, r7
    4cf6:	b002      	add	sp, #8
    4cf8:	bd80      	pop	{r7, pc}
	...

00004cfc <port_pin_get_input_level>:
{
    4cfc:	b580      	push	{r7, lr}
    4cfe:	b084      	sub	sp, #16
    4d00:	af00      	add	r7, sp, #0
    4d02:	0002      	movs	r2, r0
    4d04:	1dfb      	adds	r3, r7, #7
    4d06:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4d08:	1dfb      	adds	r3, r7, #7
    4d0a:	781b      	ldrb	r3, [r3, #0]
    4d0c:	0018      	movs	r0, r3
    4d0e:	4b0b      	ldr	r3, [pc, #44]	; (4d3c <port_pin_get_input_level+0x40>)
    4d10:	4798      	blx	r3
    4d12:	0003      	movs	r3, r0
    4d14:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4d16:	1dfb      	adds	r3, r7, #7
    4d18:	781b      	ldrb	r3, [r3, #0]
    4d1a:	221f      	movs	r2, #31
    4d1c:	4013      	ands	r3, r2
    4d1e:	2201      	movs	r2, #1
    4d20:	409a      	lsls	r2, r3
    4d22:	0013      	movs	r3, r2
    4d24:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    4d26:	68fb      	ldr	r3, [r7, #12]
    4d28:	6a1b      	ldr	r3, [r3, #32]
    4d2a:	68ba      	ldr	r2, [r7, #8]
    4d2c:	4013      	ands	r3, r2
    4d2e:	1e5a      	subs	r2, r3, #1
    4d30:	4193      	sbcs	r3, r2
    4d32:	b2db      	uxtb	r3, r3
}
    4d34:	0018      	movs	r0, r3
    4d36:	46bd      	mov	sp, r7
    4d38:	b004      	add	sp, #16
    4d3a:	bd80      	pop	{r7, pc}
    4d3c:	00004cb5 	.word	0x00004cb5

00004d40 <port_pin_set_output_level>:
{
    4d40:	b580      	push	{r7, lr}
    4d42:	b084      	sub	sp, #16
    4d44:	af00      	add	r7, sp, #0
    4d46:	0002      	movs	r2, r0
    4d48:	1dfb      	adds	r3, r7, #7
    4d4a:	701a      	strb	r2, [r3, #0]
    4d4c:	1dbb      	adds	r3, r7, #6
    4d4e:	1c0a      	adds	r2, r1, #0
    4d50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4d52:	1dfb      	adds	r3, r7, #7
    4d54:	781b      	ldrb	r3, [r3, #0]
    4d56:	0018      	movs	r0, r3
    4d58:	4b0d      	ldr	r3, [pc, #52]	; (4d90 <port_pin_set_output_level+0x50>)
    4d5a:	4798      	blx	r3
    4d5c:	0003      	movs	r3, r0
    4d5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4d60:	1dfb      	adds	r3, r7, #7
    4d62:	781b      	ldrb	r3, [r3, #0]
    4d64:	221f      	movs	r2, #31
    4d66:	4013      	ands	r3, r2
    4d68:	2201      	movs	r2, #1
    4d6a:	409a      	lsls	r2, r3
    4d6c:	0013      	movs	r3, r2
    4d6e:	60bb      	str	r3, [r7, #8]
	if (level) {
    4d70:	1dbb      	adds	r3, r7, #6
    4d72:	781b      	ldrb	r3, [r3, #0]
    4d74:	2b00      	cmp	r3, #0
    4d76:	d003      	beq.n	4d80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4d78:	68fb      	ldr	r3, [r7, #12]
    4d7a:	68ba      	ldr	r2, [r7, #8]
    4d7c:	619a      	str	r2, [r3, #24]
}
    4d7e:	e002      	b.n	4d86 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    4d80:	68fb      	ldr	r3, [r7, #12]
    4d82:	68ba      	ldr	r2, [r7, #8]
    4d84:	615a      	str	r2, [r3, #20]
}
    4d86:	46c0      	nop			; (mov r8, r8)
    4d88:	46bd      	mov	sp, r7
    4d8a:	b004      	add	sp, #16
    4d8c:	bd80      	pop	{r7, pc}
    4d8e:	46c0      	nop			; (mov r8, r8)
    4d90:	00004cb5 	.word	0x00004cb5

00004d94 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    4d94:	b580      	push	{r7, lr}
    4d96:	b082      	sub	sp, #8
    4d98:	af00      	add	r7, sp, #0
    4d9a:	6078      	str	r0, [r7, #4]
    4d9c:	000a      	movs	r2, r1
    4d9e:	1cfb      	adds	r3, r7, #3
    4da0:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	7e5b      	ldrb	r3, [r3, #25]
    4da6:	b2db      	uxtb	r3, r3
    4da8:	b25a      	sxtb	r2, r3
    4daa:	1cfb      	adds	r3, r7, #3
    4dac:	781b      	ldrb	r3, [r3, #0]
    4dae:	2101      	movs	r1, #1
    4db0:	4099      	lsls	r1, r3
    4db2:	000b      	movs	r3, r1
    4db4:	b25b      	sxtb	r3, r3
    4db6:	4313      	orrs	r3, r2
    4db8:	b25b      	sxtb	r3, r3
    4dba:	b2da      	uxtb	r2, r3
    4dbc:	687b      	ldr	r3, [r7, #4]
    4dbe:	765a      	strb	r2, [r3, #25]
}
    4dc0:	46c0      	nop			; (mov r8, r8)
    4dc2:	46bd      	mov	sp, r7
    4dc4:	b002      	add	sp, #8
    4dc6:	bd80      	pop	{r7, pc}

00004dc8 <usart_is_syncing>:
{
    4dc8:	b580      	push	{r7, lr}
    4dca:	b084      	sub	sp, #16
    4dcc:	af00      	add	r7, sp, #0
    4dce:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4dd0:	687b      	ldr	r3, [r7, #4]
    4dd2:	681b      	ldr	r3, [r3, #0]
    4dd4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    4dd6:	68fb      	ldr	r3, [r7, #12]
    4dd8:	69db      	ldr	r3, [r3, #28]
    4dda:	1e5a      	subs	r2, r3, #1
    4ddc:	4193      	sbcs	r3, r2
    4dde:	b2db      	uxtb	r3, r3
}
    4de0:	0018      	movs	r0, r3
    4de2:	46bd      	mov	sp, r7
    4de4:	b004      	add	sp, #16
    4de6:	bd80      	pop	{r7, pc}

00004de8 <_usart_wait_for_sync>:
{
    4de8:	b580      	push	{r7, lr}
    4dea:	b082      	sub	sp, #8
    4dec:	af00      	add	r7, sp, #0
    4dee:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    4df0:	46c0      	nop			; (mov r8, r8)
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	0018      	movs	r0, r3
    4df6:	4b04      	ldr	r3, [pc, #16]	; (4e08 <_usart_wait_for_sync+0x20>)
    4df8:	4798      	blx	r3
    4dfa:	1e03      	subs	r3, r0, #0
    4dfc:	d1f9      	bne.n	4df2 <_usart_wait_for_sync+0xa>
}
    4dfe:	46c0      	nop			; (mov r8, r8)
    4e00:	46bd      	mov	sp, r7
    4e02:	b002      	add	sp, #8
    4e04:	bd80      	pop	{r7, pc}
    4e06:	46c0      	nop			; (mov r8, r8)
    4e08:	00004dc9 	.word	0x00004dc9

00004e0c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    4e0c:	b580      	push	{r7, lr}
    4e0e:	b082      	sub	sp, #8
    4e10:	af00      	add	r7, sp, #0
    4e12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4e14:	687b      	ldr	r3, [r7, #4]
    4e16:	2280      	movs	r2, #128	; 0x80
    4e18:	05d2      	lsls	r2, r2, #23
    4e1a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4e1c:	687b      	ldr	r3, [r7, #4]
    4e1e:	2200      	movs	r2, #0
    4e20:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    4e22:	687b      	ldr	r3, [r7, #4]
    4e24:	22ff      	movs	r2, #255	; 0xff
    4e26:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    4e28:	687b      	ldr	r3, [r7, #4]
    4e2a:	2200      	movs	r2, #0
    4e2c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4e2e:	687b      	ldr	r3, [r7, #4]
    4e30:	2200      	movs	r2, #0
    4e32:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    4e34:	687b      	ldr	r3, [r7, #4]
    4e36:	2296      	movs	r2, #150	; 0x96
    4e38:	0192      	lsls	r2, r2, #6
    4e3a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    4e3c:	687b      	ldr	r3, [r7, #4]
    4e3e:	2224      	movs	r2, #36	; 0x24
    4e40:	2101      	movs	r1, #1
    4e42:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    4e44:	687b      	ldr	r3, [r7, #4]
    4e46:	2225      	movs	r2, #37	; 0x25
    4e48:	2101      	movs	r1, #1
    4e4a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	2226      	movs	r2, #38	; 0x26
    4e50:	2100      	movs	r1, #0
    4e52:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    4e54:	687b      	ldr	r3, [r7, #4]
    4e56:	2227      	movs	r2, #39	; 0x27
    4e58:	2100      	movs	r1, #0
    4e5a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    4e5c:	687b      	ldr	r3, [r7, #4]
    4e5e:	2200      	movs	r2, #0
    4e60:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    4e62:	687b      	ldr	r3, [r7, #4]
    4e64:	2288      	movs	r2, #136	; 0x88
    4e66:	0352      	lsls	r2, r2, #13
    4e68:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	222c      	movs	r2, #44	; 0x2c
    4e6e:	2100      	movs	r1, #0
    4e70:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    4e72:	687b      	ldr	r3, [r7, #4]
    4e74:	222d      	movs	r2, #45	; 0x2d
    4e76:	2100      	movs	r1, #0
    4e78:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    4e7a:	687b      	ldr	r3, [r7, #4]
    4e7c:	2200      	movs	r2, #0
    4e7e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4e80:	687b      	ldr	r3, [r7, #4]
    4e82:	2200      	movs	r2, #0
    4e84:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	2200      	movs	r2, #0
    4e8a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	2200      	movs	r2, #0
    4e90:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4e92:	687b      	ldr	r3, [r7, #4]
    4e94:	2200      	movs	r2, #0
    4e96:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4e98:	687b      	ldr	r3, [r7, #4]
    4e9a:	2200      	movs	r2, #0
    4e9c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4e9e:	687b      	ldr	r3, [r7, #4]
    4ea0:	2200      	movs	r2, #0
    4ea2:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	2200      	movs	r2, #0
    4ea8:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4eaa:	687b      	ldr	r3, [r7, #4]
    4eac:	2200      	movs	r2, #0
    4eae:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    4eb0:	687b      	ldr	r3, [r7, #4]
    4eb2:	2200      	movs	r2, #0
    4eb4:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    4eb6:	687b      	ldr	r3, [r7, #4]
    4eb8:	2213      	movs	r2, #19
    4eba:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	2200      	movs	r2, #0
    4ec0:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    4ec2:	46c0      	nop			; (mov r8, r8)
    4ec4:	46bd      	mov	sp, r7
    4ec6:	b002      	add	sp, #8
    4ec8:	bd80      	pop	{r7, pc}
	...

00004ecc <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    4ecc:	b580      	push	{r7, lr}
    4ece:	b084      	sub	sp, #16
    4ed0:	af00      	add	r7, sp, #0
    4ed2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4ed4:	687b      	ldr	r3, [r7, #4]
    4ed6:	681b      	ldr	r3, [r3, #0]
    4ed8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4eda:	687b      	ldr	r3, [r7, #4]
    4edc:	681b      	ldr	r3, [r3, #0]
    4ede:	0018      	movs	r0, r3
    4ee0:	4b09      	ldr	r3, [pc, #36]	; (4f08 <usart_enable+0x3c>)
    4ee2:	4798      	blx	r3
    4ee4:	0003      	movs	r3, r0
    4ee6:	0018      	movs	r0, r3
    4ee8:	4b08      	ldr	r3, [pc, #32]	; (4f0c <usart_enable+0x40>)
    4eea:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4eec:	687b      	ldr	r3, [r7, #4]
    4eee:	0018      	movs	r0, r3
    4ef0:	4b07      	ldr	r3, [pc, #28]	; (4f10 <usart_enable+0x44>)
    4ef2:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4ef4:	68fb      	ldr	r3, [r7, #12]
    4ef6:	681b      	ldr	r3, [r3, #0]
    4ef8:	2202      	movs	r2, #2
    4efa:	431a      	orrs	r2, r3
    4efc:	68fb      	ldr	r3, [r7, #12]
    4efe:	601a      	str	r2, [r3, #0]
}
    4f00:	46c0      	nop			; (mov r8, r8)
    4f02:	46bd      	mov	sp, r7
    4f04:	b004      	add	sp, #16
    4f06:	bd80      	pop	{r7, pc}
    4f08:	00003481 	.word	0x00003481
    4f0c:	00004b49 	.word	0x00004b49
    4f10:	00004de9 	.word	0x00004de9

00004f14 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    4f14:	b580      	push	{r7, lr}
    4f16:	b084      	sub	sp, #16
    4f18:	af00      	add	r7, sp, #0
    4f1a:	60f8      	str	r0, [r7, #12]
    4f1c:	60b9      	str	r1, [r7, #8]
    4f1e:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4f20:	687a      	ldr	r2, [r7, #4]
    4f22:	68b9      	ldr	r1, [r7, #8]
    4f24:	68fb      	ldr	r3, [r7, #12]
    4f26:	0018      	movs	r0, r3
    4f28:	4b05      	ldr	r3, [pc, #20]	; (4f40 <usart_serial_init+0x2c>)
    4f2a:	4798      	blx	r3
    4f2c:	1e03      	subs	r3, r0, #0
    4f2e:	d101      	bne.n	4f34 <usart_serial_init+0x20>
		return true;
    4f30:	2301      	movs	r3, #1
    4f32:	e000      	b.n	4f36 <usart_serial_init+0x22>
	}
	else {
		return false;
    4f34:	2300      	movs	r3, #0
	}
}
    4f36:	0018      	movs	r0, r3
    4f38:	46bd      	mov	sp, r7
    4f3a:	b004      	add	sp, #16
    4f3c:	bd80      	pop	{r7, pc}
    4f3e:	46c0      	nop			; (mov r8, r8)
    4f40:	00002a85 	.word	0x00002a85

00004f44 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    4f44:	b580      	push	{r7, lr}
    4f46:	b082      	sub	sp, #8
    4f48:	af00      	add	r7, sp, #0
    4f4a:	6078      	str	r0, [r7, #4]
    4f4c:	000a      	movs	r2, r1
    4f4e:	1cfb      	adds	r3, r7, #3
    4f50:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    4f52:	46c0      	nop			; (mov r8, r8)
    4f54:	1cfb      	adds	r3, r7, #3
    4f56:	781b      	ldrb	r3, [r3, #0]
    4f58:	b29a      	uxth	r2, r3
    4f5a:	687b      	ldr	r3, [r7, #4]
    4f5c:	0011      	movs	r1, r2
    4f5e:	0018      	movs	r0, r3
    4f60:	4b04      	ldr	r3, [pc, #16]	; (4f74 <usart_serial_putchar+0x30>)
    4f62:	4798      	blx	r3
    4f64:	1e03      	subs	r3, r0, #0
    4f66:	d1f5      	bne.n	4f54 <usart_serial_putchar+0x10>

	return STATUS_OK;
    4f68:	2300      	movs	r3, #0
}
    4f6a:	0018      	movs	r0, r3
    4f6c:	46bd      	mov	sp, r7
    4f6e:	b002      	add	sp, #8
    4f70:	bd80      	pop	{r7, pc}
    4f72:	46c0      	nop			; (mov r8, r8)
    4f74:	00002cf9 	.word	0x00002cf9

00004f78 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4f78:	b580      	push	{r7, lr}
    4f7a:	b084      	sub	sp, #16
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	6078      	str	r0, [r7, #4]
    4f80:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    4f82:	230e      	movs	r3, #14
    4f84:	18fb      	adds	r3, r7, r3
    4f86:	2200      	movs	r2, #0
    4f88:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    4f8a:	46c0      	nop			; (mov r8, r8)
    4f8c:	230e      	movs	r3, #14
    4f8e:	18fa      	adds	r2, r7, r3
    4f90:	687b      	ldr	r3, [r7, #4]
    4f92:	0011      	movs	r1, r2
    4f94:	0018      	movs	r0, r3
    4f96:	4b07      	ldr	r3, [pc, #28]	; (4fb4 <usart_serial_getchar+0x3c>)
    4f98:	4798      	blx	r3
    4f9a:	1e03      	subs	r3, r0, #0
    4f9c:	d1f6      	bne.n	4f8c <usart_serial_getchar+0x14>

	*c = temp;
    4f9e:	230e      	movs	r3, #14
    4fa0:	18fb      	adds	r3, r7, r3
    4fa2:	881b      	ldrh	r3, [r3, #0]
    4fa4:	b2da      	uxtb	r2, r3
    4fa6:	683b      	ldr	r3, [r7, #0]
    4fa8:	701a      	strb	r2, [r3, #0]
}
    4faa:	46c0      	nop			; (mov r8, r8)
    4fac:	46bd      	mov	sp, r7
    4fae:	b004      	add	sp, #16
    4fb0:	bd80      	pop	{r7, pc}
    4fb2:	46c0      	nop			; (mov r8, r8)
    4fb4:	00002d5d 	.word	0x00002d5d

00004fb8 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    4fb8:	b580      	push	{r7, lr}
    4fba:	b084      	sub	sp, #16
    4fbc:	af00      	add	r7, sp, #0
    4fbe:	60f8      	str	r0, [r7, #12]
    4fc0:	60b9      	str	r1, [r7, #8]
    4fc2:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    4fc4:	4b10      	ldr	r3, [pc, #64]	; (5008 <stdio_serial_init+0x50>)
    4fc6:	68fa      	ldr	r2, [r7, #12]
    4fc8:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4fca:	4b10      	ldr	r3, [pc, #64]	; (500c <stdio_serial_init+0x54>)
    4fcc:	4a10      	ldr	r2, [pc, #64]	; (5010 <stdio_serial_init+0x58>)
    4fce:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4fd0:	4b10      	ldr	r3, [pc, #64]	; (5014 <stdio_serial_init+0x5c>)
    4fd2:	4a11      	ldr	r2, [pc, #68]	; (5018 <stdio_serial_init+0x60>)
    4fd4:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    4fd6:	687a      	ldr	r2, [r7, #4]
    4fd8:	68b9      	ldr	r1, [r7, #8]
    4fda:	68fb      	ldr	r3, [r7, #12]
    4fdc:	0018      	movs	r0, r3
    4fde:	4b0f      	ldr	r3, [pc, #60]	; (501c <stdio_serial_init+0x64>)
    4fe0:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    4fe2:	4b0f      	ldr	r3, [pc, #60]	; (5020 <stdio_serial_init+0x68>)
    4fe4:	681b      	ldr	r3, [r3, #0]
    4fe6:	689b      	ldr	r3, [r3, #8]
    4fe8:	2100      	movs	r1, #0
    4fea:	0018      	movs	r0, r3
    4fec:	4b0d      	ldr	r3, [pc, #52]	; (5024 <stdio_serial_init+0x6c>)
    4fee:	4798      	blx	r3
	setbuf(stdin, NULL);
    4ff0:	4b0b      	ldr	r3, [pc, #44]	; (5020 <stdio_serial_init+0x68>)
    4ff2:	681b      	ldr	r3, [r3, #0]
    4ff4:	685b      	ldr	r3, [r3, #4]
    4ff6:	2100      	movs	r1, #0
    4ff8:	0018      	movs	r0, r3
    4ffa:	4b0a      	ldr	r3, [pc, #40]	; (5024 <stdio_serial_init+0x6c>)
    4ffc:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    4ffe:	46c0      	nop			; (mov r8, r8)
    5000:	46bd      	mov	sp, r7
    5002:	b004      	add	sp, #16
    5004:	bd80      	pop	{r7, pc}
    5006:	46c0      	nop			; (mov r8, r8)
    5008:	20000300 	.word	0x20000300
    500c:	200002fc 	.word	0x200002fc
    5010:	00004f45 	.word	0x00004f45
    5014:	200002f8 	.word	0x200002f8
    5018:	00004f79 	.word	0x00004f79
    501c:	00004f15 	.word	0x00004f15
    5020:	2000004c 	.word	0x2000004c
    5024:	00006c21 	.word	0x00006c21

00005028 <get_gpio_pin>:
 * @param  port port to use. Either A or B
 * @param  pin  pin that's being selected. Depends on port
 * @return      value of the pin that was selected.
 */
int get_gpio_pin(char port, int pin)
{
    5028:	b590      	push	{r4, r7, lr}
    502a:	b087      	sub	sp, #28
    502c:	af02      	add	r7, sp, #8
    502e:	0002      	movs	r2, r0
    5030:	6039      	str	r1, [r7, #0]
    5032:	1dfb      	adds	r3, r7, #7
    5034:	701a      	strb	r2, [r3, #0]
	int pin_val = -1;
    5036:	2301      	movs	r3, #1
    5038:	425b      	negs	r3, r3
    503a:	60fb      	str	r3, [r7, #12]

	switch (port) {
    503c:	1dfb      	adds	r3, r7, #7
    503e:	781b      	ldrb	r3, [r3, #0]
    5040:	2b61      	cmp	r3, #97	; 0x61
    5042:	d002      	beq.n	504a <get_gpio_pin+0x22>
    5044:	2b62      	cmp	r3, #98	; 0x62
    5046:	d015      	beq.n	5074 <get_gpio_pin+0x4c>
    5048:	e028      	b.n	509c <get_gpio_pin+0x74>
	case 'a':
		switch (pin) {
    504a:	683b      	ldr	r3, [r7, #0]
    504c:	2b08      	cmp	r3, #8
    504e:	d002      	beq.n	5056 <get_gpio_pin+0x2e>
    5050:	2b09      	cmp	r3, #9
    5052:	d003      	beq.n	505c <get_gpio_pin+0x34>
    5054:	e005      	b.n	5062 <get_gpio_pin+0x3a>
		//TODO: decide which pins can be set in port A 08, 09
		case GPIO_PIN_A_1:
			pin_val = PIN_PA08;
    5056:	2308      	movs	r3, #8
    5058:	60fb      	str	r3, [r7, #12]
			break;
    505a:	e00b      	b.n	5074 <get_gpio_pin+0x4c>
		case GPIO_PIN_A_2:
			pin_val = PIN_PA09;
    505c:	2309      	movs	r3, #9
    505e:	60fb      	str	r3, [r7, #12]
			break;
    5060:	e008      	b.n	5074 <get_gpio_pin+0x4c>
		default:
			//TODO: Error codes
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    5062:	4811      	ldr	r0, [pc, #68]	; (50a8 <get_gpio_pin+0x80>)
    5064:	2303      	movs	r3, #3
    5066:	9300      	str	r3, [sp, #0]
    5068:	2302      	movs	r3, #2
    506a:	2209      	movs	r2, #9
    506c:	2108      	movs	r1, #8
    506e:	4c0f      	ldr	r4, [pc, #60]	; (50ac <get_gpio_pin+0x84>)
    5070:	47a0      	blx	r4
			break;
    5072:	46c0      	nop			; (mov r8, r8)
		}
	case 'b':
		switch (pin) {
    5074:	683b      	ldr	r3, [r7, #0]
    5076:	2b02      	cmp	r3, #2
    5078:	d002      	beq.n	5080 <get_gpio_pin+0x58>
    507a:	2b03      	cmp	r3, #3
    507c:	d003      	beq.n	5086 <get_gpio_pin+0x5e>
    507e:	e005      	b.n	508c <get_gpio_pin+0x64>
		case GPIO_PIN_B_1:
			pin_val = PIN_PB02;
    5080:	2322      	movs	r3, #34	; 0x22
    5082:	60fb      	str	r3, [r7, #12]
			break;
    5084:	e00a      	b.n	509c <get_gpio_pin+0x74>
		case GPIO_PIN_B_2:
			pin_val = PIN_PB03;
    5086:	2323      	movs	r3, #35	; 0x23
    5088:	60fb      	str	r3, [r7, #12]
			break;
    508a:	e007      	b.n	509c <get_gpio_pin+0x74>
		default:
			printf("Only PA%d, PA%d, PB%d, PB%d,can be set\r\n", GPIO_PIN_A_1, GPIO_PIN_A_2, GPIO_PIN_B_1, GPIO_PIN_B_2);
    508c:	4806      	ldr	r0, [pc, #24]	; (50a8 <get_gpio_pin+0x80>)
    508e:	2303      	movs	r3, #3
    5090:	9300      	str	r3, [sp, #0]
    5092:	2302      	movs	r3, #2
    5094:	2209      	movs	r2, #9
    5096:	2108      	movs	r1, #8
    5098:	4c04      	ldr	r4, [pc, #16]	; (50ac <get_gpio_pin+0x84>)
    509a:	47a0      	blx	r4
			//TODO: error codes
		}
	}
	return pin_val;
    509c:	68fb      	ldr	r3, [r7, #12]
}
    509e:	0018      	movs	r0, r3
    50a0:	46bd      	mov	sp, r7
    50a2:	b005      	add	sp, #20
    50a4:	bd90      	pop	{r4, r7, pc}
    50a6:	46c0      	nop			; (mov r8, r8)
    50a8:	0000aef8 	.word	0x0000aef8
    50ac:	00006af5 	.word	0x00006af5

000050b0 <help>:

/**
 * Prints out information about the available cli commands.
 */
void help()
{
    50b0:	b580      	push	{r7, lr}
    50b2:	af00      	add	r7, sp, #0
	printf("help - Prints all the available commands and a short synopsis \r\n"
    50b4:	4b03      	ldr	r3, [pc, #12]	; (50c4 <help+0x14>)
    50b6:	0018      	movs	r0, r3
    50b8:	4b03      	ldr	r3, [pc, #12]	; (50c8 <help+0x18>)
    50ba:	4798      	blx	r3
	       "ip - returns the IPv4 address \r\n"
	       "read_<sensor> [readings] [interval] - Prints a number of readings at the given interval \r\n"
	       "adc_get [port] [pin] - Get the ADC value of the given pin. \r\n"
	       "mcu_temp - Reports the temperature of the mcu in Celsius. \r\n"
	       "i2c_scan - Prints out a list connected I2C slave addresses \r\n");
}
    50bc:	46c0      	nop			; (mov r8, r8)
    50be:	46bd      	mov	sp, r7
    50c0:	bd80      	pop	{r7, pc}
    50c2:	46c0      	nop			; (mov r8, r8)
    50c4:	0000af24 	.word	0x0000af24
    50c8:	00006be9 	.word	0x00006be9

000050cc <ver_bl>:
 *
 * Version follows correct Semantic Versioning guidelines. <br>
 * <b>See</b> <a href="https://semver.org/">SemVer</a> for more information.
 */
void ver_bl()
{
    50cc:	b580      	push	{r7, lr}
    50ce:	af00      	add	r7, sp, #0
	printf("Version: %s \r\n", BL_VERSION);
    50d0:	4a04      	ldr	r2, [pc, #16]	; (50e4 <ver_bl+0x18>)
    50d2:	4b05      	ldr	r3, [pc, #20]	; (50e8 <ver_bl+0x1c>)
    50d4:	0011      	movs	r1, r2
    50d6:	0018      	movs	r0, r3
    50d8:	4b04      	ldr	r3, [pc, #16]	; (50ec <ver_bl+0x20>)
    50da:	4798      	blx	r3
}
    50dc:	46c0      	nop			; (mov r8, r8)
    50de:	46bd      	mov	sp, r7
    50e0:	bd80      	pop	{r7, pc}
    50e2:	46c0      	nop			; (mov r8, r8)
    50e4:	0000b1d4 	.word	0x0000b1d4
    50e8:	0000b1dc 	.word	0x0000b1dc
    50ec:	00006af5 	.word	0x00006af5

000050f0 <ver_app>:
 *
 * Version follows correct Semantic Versioning guidelines. <br>
 * <b>See</b> <a href="https://semver.org/">SemVer</a> for more information.
 */
void ver_app()
{
    50f0:	b580      	push	{r7, lr}
    50f2:	af00      	add	r7, sp, #0
	printf("Version: %s \r\n", APP_VERSION);
    50f4:	4a04      	ldr	r2, [pc, #16]	; (5108 <ver_app+0x18>)
    50f6:	4b05      	ldr	r3, [pc, #20]	; (510c <ver_app+0x1c>)
    50f8:	0011      	movs	r1, r2
    50fa:	0018      	movs	r0, r3
    50fc:	4b04      	ldr	r3, [pc, #16]	; (5110 <ver_app+0x20>)
    50fe:	4798      	blx	r3
}
    5100:	46c0      	nop			; (mov r8, r8)
    5102:	46bd      	mov	sp, r7
    5104:	bd80      	pop	{r7, pc}
    5106:	46c0      	nop			; (mov r8, r8)
    5108:	0000b1d4 	.word	0x0000b1d4
    510c:	0000b1dc 	.word	0x0000b1dc
    5110:	00006af5 	.word	0x00006af5

00005114 <gpio_set>:
 * Setting a pin pulls the voltage to a logical 1 or HIGH.
 * @param port port specificed. Either A or B
 * @param pin  pin to use.
 */
void gpio_set(char port, int pin)
{
    5114:	b580      	push	{r7, lr}
    5116:	b084      	sub	sp, #16
    5118:	af00      	add	r7, sp, #0
    511a:	0002      	movs	r2, r0
    511c:	6039      	str	r1, [r7, #0]
    511e:	1dfb      	adds	r3, r7, #7
    5120:	701a      	strb	r2, [r3, #0]
	int pin_val = get_gpio_pin(port, pin);
    5122:	683a      	ldr	r2, [r7, #0]
    5124:	1dfb      	adds	r3, r7, #7
    5126:	781b      	ldrb	r3, [r3, #0]
    5128:	0011      	movs	r1, r2
    512a:	0018      	movs	r0, r3
    512c:	4b0d      	ldr	r3, [pc, #52]	; (5164 <gpio_set+0x50>)
    512e:	4798      	blx	r3
    5130:	0003      	movs	r3, r0
    5132:	60fb      	str	r3, [r7, #12]

	if (pin_val != -1) {
    5134:	68fb      	ldr	r3, [r7, #12]
    5136:	3301      	adds	r3, #1
    5138:	d00f      	beq.n	515a <gpio_set+0x46>
		configure_port_pins_set(pin_val); //TODO: decide if this is necessary
    513a:	68fb      	ldr	r3, [r7, #12]
    513c:	0018      	movs	r0, r3
    513e:	4b0a      	ldr	r3, [pc, #40]	; (5168 <gpio_set+0x54>)
    5140:	4798      	blx	r3
		port_pin_set_output_level(pin_val, true);
    5142:	68fb      	ldr	r3, [r7, #12]
    5144:	b2db      	uxtb	r3, r3
    5146:	2101      	movs	r1, #1
    5148:	0018      	movs	r0, r3
    514a:	4b08      	ldr	r3, [pc, #32]	; (516c <gpio_set+0x58>)
    514c:	4798      	blx	r3

		printf("Pin %d set high\r\n", pin_val);
    514e:	68fa      	ldr	r2, [r7, #12]
    5150:	4b07      	ldr	r3, [pc, #28]	; (5170 <gpio_set+0x5c>)
    5152:	0011      	movs	r1, r2
    5154:	0018      	movs	r0, r3
    5156:	4b07      	ldr	r3, [pc, #28]	; (5174 <gpio_set+0x60>)
    5158:	4798      	blx	r3
	}
}
    515a:	46c0      	nop			; (mov r8, r8)
    515c:	46bd      	mov	sp, r7
    515e:	b004      	add	sp, #16
    5160:	bd80      	pop	{r7, pc}
    5162:	46c0      	nop			; (mov r8, r8)
    5164:	00005029 	.word	0x00005029
    5168:	00005cc5 	.word	0x00005cc5
    516c:	00004d41 	.word	0x00004d41
    5170:	0000b1ec 	.word	0x0000b1ec
    5174:	00006af5 	.word	0x00006af5

00005178 <gpio_clear>:
 * Setting a pin pulls the voltage to a logical 0 or LOW.
 * @param port port specificed. Either A or B
 * @param pin  pin to use.
 */
void gpio_clear(char port, int pin)
{
    5178:	b580      	push	{r7, lr}
    517a:	b084      	sub	sp, #16
    517c:	af00      	add	r7, sp, #0
    517e:	0002      	movs	r2, r0
    5180:	6039      	str	r1, [r7, #0]
    5182:	1dfb      	adds	r3, r7, #7
    5184:	701a      	strb	r2, [r3, #0]
	int pin_val = get_gpio_pin(port, pin);
    5186:	683a      	ldr	r2, [r7, #0]
    5188:	1dfb      	adds	r3, r7, #7
    518a:	781b      	ldrb	r3, [r3, #0]
    518c:	0011      	movs	r1, r2
    518e:	0018      	movs	r0, r3
    5190:	4b0d      	ldr	r3, [pc, #52]	; (51c8 <gpio_clear+0x50>)
    5192:	4798      	blx	r3
    5194:	0003      	movs	r3, r0
    5196:	60fb      	str	r3, [r7, #12]

	if (pin_val != -1) {
    5198:	68fb      	ldr	r3, [r7, #12]
    519a:	3301      	adds	r3, #1
    519c:	d00f      	beq.n	51be <gpio_clear+0x46>
		configure_port_pins_set(pin_val); //TODO: decide if this is necessary
    519e:	68fb      	ldr	r3, [r7, #12]
    51a0:	0018      	movs	r0, r3
    51a2:	4b0a      	ldr	r3, [pc, #40]	; (51cc <gpio_clear+0x54>)
    51a4:	4798      	blx	r3
		port_pin_set_output_level(pin_val, 0);
    51a6:	68fb      	ldr	r3, [r7, #12]
    51a8:	b2db      	uxtb	r3, r3
    51aa:	2100      	movs	r1, #0
    51ac:	0018      	movs	r0, r3
    51ae:	4b08      	ldr	r3, [pc, #32]	; (51d0 <gpio_clear+0x58>)
    51b0:	4798      	blx	r3

		printf("Pin %d cleared\r\n", pin_val);
    51b2:	68fa      	ldr	r2, [r7, #12]
    51b4:	4b07      	ldr	r3, [pc, #28]	; (51d4 <gpio_clear+0x5c>)
    51b6:	0011      	movs	r1, r2
    51b8:	0018      	movs	r0, r3
    51ba:	4b07      	ldr	r3, [pc, #28]	; (51d8 <gpio_clear+0x60>)
    51bc:	4798      	blx	r3
	}
}
    51be:	46c0      	nop			; (mov r8, r8)
    51c0:	46bd      	mov	sp, r7
    51c2:	b004      	add	sp, #16
    51c4:	bd80      	pop	{r7, pc}
    51c6:	46c0      	nop			; (mov r8, r8)
    51c8:	00005029 	.word	0x00005029
    51cc:	00005cc5 	.word	0x00005cc5
    51d0:	00004d41 	.word	0x00004d41
    51d4:	0000b200 	.word	0x0000b200
    51d8:	00006af5 	.word	0x00006af5

000051dc <gpio_get>:
 * Will either be logical 0 or 1.
 * @param port port specificed. Either A or B
 * @param pin  pin to use.
 */
void gpio_get(char port, int pin)
{
    51dc:	b580      	push	{r7, lr}
    51de:	b084      	sub	sp, #16
    51e0:	af00      	add	r7, sp, #0
    51e2:	0002      	movs	r2, r0
    51e4:	6039      	str	r1, [r7, #0]
    51e6:	1dfb      	adds	r3, r7, #7
    51e8:	701a      	strb	r2, [r3, #0]
	int pin_val = get_gpio_pin(port, pin);
    51ea:	683a      	ldr	r2, [r7, #0]
    51ec:	1dfb      	adds	r3, r7, #7
    51ee:	781b      	ldrb	r3, [r3, #0]
    51f0:	0011      	movs	r1, r2
    51f2:	0018      	movs	r0, r3
    51f4:	4b0c      	ldr	r3, [pc, #48]	; (5228 <gpio_get+0x4c>)
    51f6:	4798      	blx	r3
    51f8:	0003      	movs	r3, r0
    51fa:	60fb      	str	r3, [r7, #12]

	configure_port_pins_get(pin_val); //TODO: decide if this is necessary
    51fc:	68fb      	ldr	r3, [r7, #12]
    51fe:	0018      	movs	r0, r3
    5200:	4b0a      	ldr	r3, [pc, #40]	; (522c <gpio_get+0x50>)
    5202:	4798      	blx	r3
	int state = port_pin_get_input_level(pin_val);
    5204:	68fb      	ldr	r3, [r7, #12]
    5206:	b2db      	uxtb	r3, r3
    5208:	0018      	movs	r0, r3
    520a:	4b09      	ldr	r3, [pc, #36]	; (5230 <gpio_get+0x54>)
    520c:	4798      	blx	r3
    520e:	0003      	movs	r3, r0
    5210:	60bb      	str	r3, [r7, #8]
	printf("pin %d value: %d\r\n", pin_val, state);
    5212:	68ba      	ldr	r2, [r7, #8]
    5214:	68f9      	ldr	r1, [r7, #12]
    5216:	4b07      	ldr	r3, [pc, #28]	; (5234 <gpio_get+0x58>)
    5218:	0018      	movs	r0, r3
    521a:	4b07      	ldr	r3, [pc, #28]	; (5238 <gpio_get+0x5c>)
    521c:	4798      	blx	r3
}
    521e:	46c0      	nop			; (mov r8, r8)
    5220:	46bd      	mov	sp, r7
    5222:	b004      	add	sp, #16
    5224:	bd80      	pop	{r7, pc}
    5226:	46c0      	nop			; (mov r8, r8)
    5228:	00005029 	.word	0x00005029
    522c:	00005d01 	.word	0x00005d01
    5230:	00004cfd 	.word	0x00004cfd
    5234:	0000b214 	.word	0x0000b214
    5238:	00006af5 	.word	0x00006af5

0000523c <mac>:
 * Prints the MAC address of the Wi-Fi chip.
 *
 * For more information on MAC addresses, see <a href="https://en.wikipedia.org/wiki/MAC_address">Wikipedia</a>
 */
void mac()
{
    523c:	b580      	push	{r7, lr}
    523e:	af00      	add	r7, sp, #0
	printf("00.00.00.00\r\n");
    5240:	4b03      	ldr	r3, [pc, #12]	; (5250 <mac+0x14>)
    5242:	0018      	movs	r0, r3
    5244:	4b03      	ldr	r3, [pc, #12]	; (5254 <mac+0x18>)
    5246:	4798      	blx	r3
}
    5248:	46c0      	nop			; (mov r8, r8)
    524a:	46bd      	mov	sp, r7
    524c:	bd80      	pop	{r7, pc}
    524e:	46c0      	nop			; (mov r8, r8)
    5250:	0000b228 	.word	0x0000b228
    5254:	00006be9 	.word	0x00006be9

00005258 <ip>:
 * Prints the IP address of the Wi-Fi chip.
 *
 * @note Currently this only returns a dummy IP address and will need to be updated.
 */
void ip()
{
    5258:	b580      	push	{r7, lr}
    525a:	af00      	add	r7, sp, #0
	printf("255.255.255.255 \r\n");
    525c:	4b03      	ldr	r3, [pc, #12]	; (526c <ip+0x14>)
    525e:	0018      	movs	r0, r3
    5260:	4b03      	ldr	r3, [pc, #12]	; (5270 <ip+0x18>)
    5262:	4798      	blx	r3
}
    5264:	46c0      	nop			; (mov r8, r8)
    5266:	46bd      	mov	sp, r7
    5268:	bd80      	pop	{r7, pc}
    526a:	46c0      	nop			; (mov r8, r8)
    526c:	0000b238 	.word	0x0000b238
    5270:	00006be9 	.word	0x00006be9

00005274 <read_sensor>:
 * @param sensor_name name of the sensor to read from
 * @param readings    number of readings to do
 * @param interval_ms how many milliseconds to wait between readings
 */
void read_sensor(char *sensor_name, int readings, int interval_ms)
{
    5274:	b580      	push	{r7, lr}
    5276:	b086      	sub	sp, #24
    5278:	af00      	add	r7, sp, #0
    527a:	60f8      	str	r0, [r7, #12]
    527c:	60b9      	str	r1, [r7, #8]
    527e:	607a      	str	r2, [r7, #4]
	//TODO: check for values greater than 0 for readings and interval_ms
	static uint8_t read_buffer[10];
	
	if(!strcmp("lux", sensor_name)) {
    5280:	68fa      	ldr	r2, [r7, #12]
    5282:	4b0b      	ldr	r3, [pc, #44]	; (52b0 <read_sensor+0x3c>)
    5284:	0011      	movs	r1, r2
    5286:	0018      	movs	r0, r3
    5288:	4b0a      	ldr	r3, [pc, #40]	; (52b4 <read_sensor+0x40>)
    528a:	4798      	blx	r3
    528c:	1e03      	subs	r3, r0, #0
    528e:	d10b      	bne.n	52a8 <read_sensor+0x34>
		tsl2561_init();
    5290:	4b09      	ldr	r3, [pc, #36]	; (52b8 <read_sensor+0x44>)
    5292:	4798      	blx	r3
		uint32_t lux_value = getLuminosity();
    5294:	4b09      	ldr	r3, [pc, #36]	; (52bc <read_sensor+0x48>)
    5296:	4798      	blx	r3
    5298:	0003      	movs	r3, r0
    529a:	617b      	str	r3, [r7, #20]
		printf("Current lux: %d\r\n", lux_value);
    529c:	697a      	ldr	r2, [r7, #20]
    529e:	4b08      	ldr	r3, [pc, #32]	; (52c0 <read_sensor+0x4c>)
    52a0:	0011      	movs	r1, r2
    52a2:	0018      	movs	r0, r3
    52a4:	4b07      	ldr	r3, [pc, #28]	; (52c4 <read_sensor+0x50>)
    52a6:	4798      	blx	r3
	}
}
    52a8:	46c0      	nop			; (mov r8, r8)
    52aa:	46bd      	mov	sp, r7
    52ac:	b006      	add	sp, #24
    52ae:	bd80      	pop	{r7, pc}
    52b0:	0000b24c 	.word	0x0000b24c
    52b4:	00006d8d 	.word	0x00006d8d
    52b8:	00000325 	.word	0x00000325
    52bc:	000004bd 	.word	0x000004bd
    52c0:	0000b250 	.word	0x0000b250
    52c4:	00006af5 	.word	0x00006af5

000052c8 <adc_get>:
 *
 * @param port port to read from. Only accepts a currently.
 * @param pin  pin to read from. Only accepts 02 currently.
 */
void adc_get(char port, int pin)
{
    52c8:	b5b0      	push	{r4, r5, r7, lr}
    52ca:	b08a      	sub	sp, #40	; 0x28
    52cc:	af02      	add	r7, sp, #8
    52ce:	0002      	movs	r2, r0
    52d0:	6039      	str	r1, [r7, #0]
    52d2:	1dfb      	adds	r3, r7, #7
    52d4:	701a      	strb	r2, [r3, #0]
	int pin_val = -1;
    52d6:	2301      	movs	r3, #1
    52d8:	425b      	negs	r3, r3
    52da:	61fb      	str	r3, [r7, #28]

	switch (port) {
    52dc:	1dfb      	adds	r3, r7, #7
    52de:	781b      	ldrb	r3, [r3, #0]
    52e0:	2b61      	cmp	r3, #97	; 0x61
    52e2:	d11e      	bne.n	5322 <adc_get+0x5a>
		case ADC_PORT:
			switch (pin) {
    52e4:	683b      	ldr	r3, [r7, #0]
    52e6:	2b02      	cmp	r3, #2
    52e8:	d102      	bne.n	52f0 <adc_get+0x28>
				case ADC_PIN:
					pin_val = ADC_POSITIVE_INPUT_PIN0;
    52ea:	2300      	movs	r3, #0
    52ec:	61fb      	str	r3, [r7, #28]
					break;
    52ee:	e017      	b.n	5320 <adc_get+0x58>
				default:
					printf("fail on pin ADC can currently only be configured on P%c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    52f0:	2361      	movs	r3, #97	; 0x61
    52f2:	61bb      	str	r3, [r7, #24]
    52f4:	4b46      	ldr	r3, [pc, #280]	; (5410 <adc_get+0x148>)
    52f6:	4798      	blx	r3
    52f8:	0002      	movs	r2, r0
    52fa:	69bb      	ldr	r3, [r7, #24]
    52fc:	3301      	adds	r3, #1
    52fe:	18d3      	adds	r3, r2, r3
    5300:	781b      	ldrb	r3, [r3, #0]
    5302:	001a      	movs	r2, r3
    5304:	2303      	movs	r3, #3
    5306:	4013      	ands	r3, r2
    5308:	2b02      	cmp	r3, #2
    530a:	d102      	bne.n	5312 <adc_get+0x4a>
    530c:	69bb      	ldr	r3, [r7, #24]
    530e:	3b20      	subs	r3, #32
    5310:	e000      	b.n	5314 <adc_get+0x4c>
    5312:	69bb      	ldr	r3, [r7, #24]
    5314:	483f      	ldr	r0, [pc, #252]	; (5414 <adc_get+0x14c>)
    5316:	2202      	movs	r2, #2
    5318:	0019      	movs	r1, r3
    531a:	4b3f      	ldr	r3, [pc, #252]	; (5418 <adc_get+0x150>)
    531c:	4798      	blx	r3
					break;
    531e:	46c0      	nop			; (mov r8, r8)
			}
			break;
    5320:	e017      	b.n	5352 <adc_get+0x8a>
		default:
			printf("fail on port ADC can currently only be configured on %c%d. Please try again.\r\n", toupper(ADC_PORT), ADC_PIN);
    5322:	2361      	movs	r3, #97	; 0x61
    5324:	617b      	str	r3, [r7, #20]
    5326:	4b3a      	ldr	r3, [pc, #232]	; (5410 <adc_get+0x148>)
    5328:	4798      	blx	r3
    532a:	0002      	movs	r2, r0
    532c:	697b      	ldr	r3, [r7, #20]
    532e:	3301      	adds	r3, #1
    5330:	18d3      	adds	r3, r2, r3
    5332:	781b      	ldrb	r3, [r3, #0]
    5334:	001a      	movs	r2, r3
    5336:	2303      	movs	r3, #3
    5338:	4013      	ands	r3, r2
    533a:	2b02      	cmp	r3, #2
    533c:	d102      	bne.n	5344 <adc_get+0x7c>
    533e:	697b      	ldr	r3, [r7, #20]
    5340:	3b20      	subs	r3, #32
    5342:	e000      	b.n	5346 <adc_get+0x7e>
    5344:	697b      	ldr	r3, [r7, #20]
    5346:	4835      	ldr	r0, [pc, #212]	; (541c <adc_get+0x154>)
    5348:	2202      	movs	r2, #2
    534a:	0019      	movs	r1, r3
    534c:	4b32      	ldr	r3, [pc, #200]	; (5418 <adc_get+0x150>)
    534e:	4798      	blx	r3
			break;
    5350:	46c0      	nop			; (mov r8, r8)
	}
	
	if (pin_val != -1) {
    5352:	69fb      	ldr	r3, [r7, #28]
    5354:	3301      	adds	r3, #1
    5356:	d056      	beq.n	5406 <adc_get+0x13e>
		configure_adc(pin_val);
    5358:	69fb      	ldr	r3, [r7, #28]
    535a:	0018      	movs	r0, r3
    535c:	4b30      	ldr	r3, [pc, #192]	; (5420 <adc_get+0x158>)
    535e:	4798      	blx	r3
		uint16_t adc_result;
		adc_start_conversion(&adc_instance);
    5360:	4b30      	ldr	r3, [pc, #192]	; (5424 <adc_get+0x15c>)
    5362:	0018      	movs	r0, r3
    5364:	4b30      	ldr	r3, [pc, #192]	; (5428 <adc_get+0x160>)
    5366:	4798      	blx	r3
		/* Wait for conversion to be done and read out result */
		do {
		} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
    5368:	230c      	movs	r3, #12
    536a:	18fa      	adds	r2, r7, r3
    536c:	4b2d      	ldr	r3, [pc, #180]	; (5424 <adc_get+0x15c>)
    536e:	0011      	movs	r1, r2
    5370:	0018      	movs	r0, r3
    5372:	4b2e      	ldr	r3, [pc, #184]	; (542c <adc_get+0x164>)
    5374:	4798      	blx	r3
    5376:	0003      	movs	r3, r0
    5378:	2b05      	cmp	r3, #5
    537a:	d0f5      	beq.n	5368 <adc_get+0xa0>
		float voltage = (adc_result/4095.0)*1.65; //TODO: set values, NO MAGIC NUMBERS
    537c:	230c      	movs	r3, #12
    537e:	18fb      	adds	r3, r7, r3
    5380:	881b      	ldrh	r3, [r3, #0]
    5382:	001a      	movs	r2, r3
    5384:	4b2a      	ldr	r3, [pc, #168]	; (5430 <adc_get+0x168>)
    5386:	0010      	movs	r0, r2
    5388:	4798      	blx	r3
    538a:	4c2a      	ldr	r4, [pc, #168]	; (5434 <adc_get+0x16c>)
    538c:	2200      	movs	r2, #0
    538e:	4b2a      	ldr	r3, [pc, #168]	; (5438 <adc_get+0x170>)
    5390:	47a0      	blx	r4
    5392:	0003      	movs	r3, r0
    5394:	000c      	movs	r4, r1
    5396:	0018      	movs	r0, r3
    5398:	0021      	movs	r1, r4
    539a:	4c28      	ldr	r4, [pc, #160]	; (543c <adc_get+0x174>)
    539c:	4a28      	ldr	r2, [pc, #160]	; (5440 <adc_get+0x178>)
    539e:	4b29      	ldr	r3, [pc, #164]	; (5444 <adc_get+0x17c>)
    53a0:	47a0      	blx	r4
    53a2:	0003      	movs	r3, r0
    53a4:	000c      	movs	r4, r1
    53a6:	0019      	movs	r1, r3
    53a8:	0022      	movs	r2, r4
    53aa:	4b27      	ldr	r3, [pc, #156]	; (5448 <adc_get+0x180>)
    53ac:	0008      	movs	r0, r1
    53ae:	0011      	movs	r1, r2
    53b0:	4798      	blx	r3
    53b2:	1c03      	adds	r3, r0, #0
    53b4:	613b      	str	r3, [r7, #16]
		printf("Voltage at P%c%d: %f\r\n", toupper(port), pin_val, voltage);
    53b6:	230f      	movs	r3, #15
    53b8:	18fb      	adds	r3, r7, r3
    53ba:	1dfa      	adds	r2, r7, #7
    53bc:	7812      	ldrb	r2, [r2, #0]
    53be:	701a      	strb	r2, [r3, #0]
    53c0:	4b13      	ldr	r3, [pc, #76]	; (5410 <adc_get+0x148>)
    53c2:	4798      	blx	r3
    53c4:	0002      	movs	r2, r0
    53c6:	230f      	movs	r3, #15
    53c8:	18fb      	adds	r3, r7, r3
    53ca:	781b      	ldrb	r3, [r3, #0]
    53cc:	3301      	adds	r3, #1
    53ce:	18d3      	adds	r3, r2, r3
    53d0:	781b      	ldrb	r3, [r3, #0]
    53d2:	001a      	movs	r2, r3
    53d4:	2303      	movs	r3, #3
    53d6:	4013      	ands	r3, r2
    53d8:	2b02      	cmp	r3, #2
    53da:	d105      	bne.n	53e8 <adc_get+0x120>
    53dc:	230f      	movs	r3, #15
    53de:	18fb      	adds	r3, r7, r3
    53e0:	781b      	ldrb	r3, [r3, #0]
    53e2:	3b20      	subs	r3, #32
    53e4:	001d      	movs	r5, r3
    53e6:	e002      	b.n	53ee <adc_get+0x126>
    53e8:	230f      	movs	r3, #15
    53ea:	18fb      	adds	r3, r7, r3
    53ec:	781d      	ldrb	r5, [r3, #0]
    53ee:	4b17      	ldr	r3, [pc, #92]	; (544c <adc_get+0x184>)
    53f0:	6938      	ldr	r0, [r7, #16]
    53f2:	4798      	blx	r3
    53f4:	0003      	movs	r3, r0
    53f6:	000c      	movs	r4, r1
    53f8:	69fa      	ldr	r2, [r7, #28]
    53fa:	4815      	ldr	r0, [pc, #84]	; (5450 <adc_get+0x188>)
    53fc:	9300      	str	r3, [sp, #0]
    53fe:	9401      	str	r4, [sp, #4]
    5400:	0029      	movs	r1, r5
    5402:	4b05      	ldr	r3, [pc, #20]	; (5418 <adc_get+0x150>)
    5404:	4798      	blx	r3
	}
}
    5406:	46c0      	nop			; (mov r8, r8)
    5408:	46bd      	mov	sp, r7
    540a:	b008      	add	sp, #32
    540c:	bdb0      	pop	{r4, r5, r7, pc}
    540e:	46c0      	nop			; (mov r8, r8)
    5410:	0000604d 	.word	0x0000604d
    5414:	0000b264 	.word	0x0000b264
    5418:	00006af5 	.word	0x00006af5
    541c:	0000b2b4 	.word	0x0000b2b4
    5420:	00005c65 	.word	0x00005c65
    5424:	200002f0 	.word	0x200002f0
    5428:	00004a85 	.word	0x00004a85
    542c:	00004acd 	.word	0x00004acd
    5430:	0000aa61 	.word	0x0000aa61
    5434:	00009625 	.word	0x00009625
    5438:	40affe00 	.word	0x40affe00
    543c:	00009e8d 	.word	0x00009e8d
    5440:	66666666 	.word	0x66666666
    5444:	3ffa6666 	.word	0x3ffa6666
    5448:	0000abf9 	.word	0x0000abf9
    544c:	0000ab55 	.word	0x0000ab55
    5450:	0000b304 	.word	0x0000b304

00005454 <mcu_temp>:
 *
 * See the <a href="http://asf.atmel.com/docs/3.21.0/samd21/html/group__asfdoc__sam0__at30tse75x__group.html">board documentation</a> for more information.
 */
//TODO: Use the ASF temp sensor library instead.
void mcu_temp()
{
    5454:	b5f0      	push	{r4, r5, r6, r7, lr}
    5456:	b085      	sub	sp, #20
    5458:	af00      	add	r7, sp, #0
	int pin = ADC_POSITIVE_INPUT_TEMP;
    545a:	2318      	movs	r3, #24
    545c:	607b      	str	r3, [r7, #4]
	uint16_t adc_result;
	configure_adc(pin);
    545e:	687b      	ldr	r3, [r7, #4]
    5460:	0018      	movs	r0, r3
    5462:	4b36      	ldr	r3, [pc, #216]	; (553c <mcu_temp+0xe8>)
    5464:	4798      	blx	r3

	adc_start_conversion(&adc_instance);
    5466:	4b36      	ldr	r3, [pc, #216]	; (5540 <mcu_temp+0xec>)
    5468:	0018      	movs	r0, r3
    546a:	4b36      	ldr	r3, [pc, #216]	; (5544 <mcu_temp+0xf0>)
    546c:	4798      	blx	r3
	/* Wait for conversion to be done and read out result */
	do {
	} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
    546e:	003a      	movs	r2, r7
    5470:	4b33      	ldr	r3, [pc, #204]	; (5540 <mcu_temp+0xec>)
    5472:	0011      	movs	r1, r2
    5474:	0018      	movs	r0, r3
    5476:	4b34      	ldr	r3, [pc, #208]	; (5548 <mcu_temp+0xf4>)
    5478:	4798      	blx	r3
    547a:	0003      	movs	r3, r0
    547c:	2b05      	cmp	r3, #5
    547e:	d0f6      	beq.n	546e <mcu_temp+0x1a>
	
	//Equation found here: https://github.com/jrowberg/i2cdevlib/pull/59/files
	double temperature;
	if((adc_result & 0x8000) == 0) {
    5480:	003b      	movs	r3, r7
    5482:	881b      	ldrh	r3, [r3, #0]
    5484:	b21b      	sxth	r3, r3
    5486:	2b00      	cmp	r3, #0
    5488:	db22      	blt.n	54d0 <mcu_temp+0x7c>
      temperature = (adc_result >> 8) + ((adc_result & 0x00F0)>>4)*0.5;
    548a:	003b      	movs	r3, r7
    548c:	881b      	ldrh	r3, [r3, #0]
    548e:	0a1b      	lsrs	r3, r3, #8
    5490:	b29b      	uxth	r3, r3
    5492:	001a      	movs	r2, r3
    5494:	4b2d      	ldr	r3, [pc, #180]	; (554c <mcu_temp+0xf8>)
    5496:	0010      	movs	r0, r2
    5498:	4798      	blx	r3
    549a:	0005      	movs	r5, r0
    549c:	000e      	movs	r6, r1
    549e:	003b      	movs	r3, r7
    54a0:	881b      	ldrh	r3, [r3, #0]
    54a2:	111b      	asrs	r3, r3, #4
    54a4:	220f      	movs	r2, #15
    54a6:	401a      	ands	r2, r3
    54a8:	4b28      	ldr	r3, [pc, #160]	; (554c <mcu_temp+0xf8>)
    54aa:	0010      	movs	r0, r2
    54ac:	4798      	blx	r3
    54ae:	4c28      	ldr	r4, [pc, #160]	; (5550 <mcu_temp+0xfc>)
    54b0:	2200      	movs	r2, #0
    54b2:	4b28      	ldr	r3, [pc, #160]	; (5554 <mcu_temp+0x100>)
    54b4:	47a0      	blx	r4
    54b6:	0003      	movs	r3, r0
    54b8:	000c      	movs	r4, r1
    54ba:	001a      	movs	r2, r3
    54bc:	0023      	movs	r3, r4
    54be:	4c26      	ldr	r4, [pc, #152]	; (5558 <mcu_temp+0x104>)
    54c0:	0028      	movs	r0, r5
    54c2:	0031      	movs	r1, r6
    54c4:	47a0      	blx	r4
    54c6:	0003      	movs	r3, r0
    54c8:	000c      	movs	r4, r1
    54ca:	60bb      	str	r3, [r7, #8]
    54cc:	60fc      	str	r4, [r7, #12]
    54ce:	e026      	b.n	551e <mcu_temp+0xca>
    }
    else {
      uint16_t twosComplement = (~adc_result) + 1;
    54d0:	003b      	movs	r3, r7
    54d2:	881a      	ldrh	r2, [r3, #0]
    54d4:	1cbb      	adds	r3, r7, #2
    54d6:	4252      	negs	r2, r2
    54d8:	801a      	strh	r2, [r3, #0]
      temperature = - (twosComplement >> 8) - ((twosComplement & 0x00F0)>>4)*0.5;
    54da:	1cbb      	adds	r3, r7, #2
    54dc:	881b      	ldrh	r3, [r3, #0]
    54de:	0a1b      	lsrs	r3, r3, #8
    54e0:	b29b      	uxth	r3, r3
    54e2:	425a      	negs	r2, r3
    54e4:	4b19      	ldr	r3, [pc, #100]	; (554c <mcu_temp+0xf8>)
    54e6:	0010      	movs	r0, r2
    54e8:	4798      	blx	r3
    54ea:	0005      	movs	r5, r0
    54ec:	000e      	movs	r6, r1
    54ee:	1cbb      	adds	r3, r7, #2
    54f0:	881b      	ldrh	r3, [r3, #0]
    54f2:	111b      	asrs	r3, r3, #4
    54f4:	220f      	movs	r2, #15
    54f6:	401a      	ands	r2, r3
    54f8:	4b14      	ldr	r3, [pc, #80]	; (554c <mcu_temp+0xf8>)
    54fa:	0010      	movs	r0, r2
    54fc:	4798      	blx	r3
    54fe:	4c14      	ldr	r4, [pc, #80]	; (5550 <mcu_temp+0xfc>)
    5500:	2200      	movs	r2, #0
    5502:	4b14      	ldr	r3, [pc, #80]	; (5554 <mcu_temp+0x100>)
    5504:	47a0      	blx	r4
    5506:	0003      	movs	r3, r0
    5508:	000c      	movs	r4, r1
    550a:	001a      	movs	r2, r3
    550c:	0023      	movs	r3, r4
    550e:	4c13      	ldr	r4, [pc, #76]	; (555c <mcu_temp+0x108>)
    5510:	0028      	movs	r0, r5
    5512:	0031      	movs	r1, r6
    5514:	47a0      	blx	r4
    5516:	0003      	movs	r3, r0
    5518:	000c      	movs	r4, r1
    551a:	60bb      	str	r3, [r7, #8]
    551c:	60fc      	str	r4, [r7, #12]
    }
	printf("MCU temperature: %dC \r\n", (int) temperature);
    551e:	4b10      	ldr	r3, [pc, #64]	; (5560 <mcu_temp+0x10c>)
    5520:	68b8      	ldr	r0, [r7, #8]
    5522:	68f9      	ldr	r1, [r7, #12]
    5524:	4798      	blx	r3
    5526:	0002      	movs	r2, r0
    5528:	4b0e      	ldr	r3, [pc, #56]	; (5564 <mcu_temp+0x110>)
    552a:	0011      	movs	r1, r2
    552c:	0018      	movs	r0, r3
    552e:	4b0e      	ldr	r3, [pc, #56]	; (5568 <mcu_temp+0x114>)
    5530:	4798      	blx	r3
}
    5532:	46c0      	nop			; (mov r8, r8)
    5534:	46bd      	mov	sp, r7
    5536:	b005      	add	sp, #20
    5538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    553a:	46c0      	nop			; (mov r8, r8)
    553c:	00005c65 	.word	0x00005c65
    5540:	200002f0 	.word	0x200002f0
    5544:	00004a85 	.word	0x00004a85
    5548:	00004acd 	.word	0x00004acd
    554c:	0000aa61 	.word	0x0000aa61
    5550:	00009e8d 	.word	0x00009e8d
    5554:	3fe00000 	.word	0x3fe00000
    5558:	00009005 	.word	0x00009005
    555c:	0000a38d 	.word	0x0000a38d
    5560:	0000a9f9 	.word	0x0000a9f9
    5564:	0000b31c 	.word	0x0000b31c
    5568:	00006af5 	.word	0x00006af5

0000556c <i2c_scan>:
/**
 * Reports all connected I2C slave devices over a 7 bit (128) address space.
 *
 */
void i2c_scan()
{
    556c:	b590      	push	{r4, r7, lr}
    556e:	b083      	sub	sp, #12
    5570:	af00      	add	r7, sp, #0
	configure_i2c();
    5572:	4b21      	ldr	r3, [pc, #132]	; (55f8 <i2c_scan+0x8c>)
    5574:	4798      	blx	r3
	configure_i2c_callbacks();
    5576:	4b21      	ldr	r3, [pc, #132]	; (55fc <i2c_scan+0x90>)
    5578:	4798      	blx	r3

	for (int slave_address = 0; slave_address < 128; slave_address++) {
    557a:	2300      	movs	r3, #0
    557c:	607b      	str	r3, [r7, #4]
    557e:	e033      	b.n	55e8 <i2c_scan+0x7c>
		enum status_code i2c_status;
		wr_packet.address = slave_address;
    5580:	687b      	ldr	r3, [r7, #4]
    5582:	b29a      	uxth	r2, r3
    5584:	4b1e      	ldr	r3, [pc, #120]	; (5600 <i2c_scan+0x94>)
    5586:	801a      	strh	r2, [r3, #0]
		rd_packet.address = slave_address;
    5588:	687b      	ldr	r3, [r7, #4]
    558a:	b29a      	uxth	r2, r3
    558c:	4b1d      	ldr	r3, [pc, #116]	; (5604 <i2c_scan+0x98>)
    558e:	801a      	strh	r2, [r3, #0]
		wr_packet.data_length = 1;
    5590:	4b1b      	ldr	r3, [pc, #108]	; (5600 <i2c_scan+0x94>)
    5592:	2201      	movs	r2, #1
    5594:	805a      	strh	r2, [r3, #2]
		wr_buffer[0] = 0x05;
    5596:	4b1c      	ldr	r3, [pc, #112]	; (5608 <i2c_scan+0x9c>)
    5598:	2205      	movs	r2, #5
    559a:	701a      	strb	r2, [r3, #0]
		wr_packet.data = wr_buffer;
    559c:	4b18      	ldr	r3, [pc, #96]	; (5600 <i2c_scan+0x94>)
    559e:	4a1a      	ldr	r2, [pc, #104]	; (5608 <i2c_scan+0x9c>)
    55a0:	605a      	str	r2, [r3, #4]
		i2c_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &wr_packet);
    55a2:	1cfc      	adds	r4, r7, #3
    55a4:	4a16      	ldr	r2, [pc, #88]	; (5600 <i2c_scan+0x94>)
    55a6:	4b19      	ldr	r3, [pc, #100]	; (560c <i2c_scan+0xa0>)
    55a8:	0011      	movs	r1, r2
    55aa:	0018      	movs	r0, r3
    55ac:	4b18      	ldr	r3, [pc, #96]	; (5610 <i2c_scan+0xa4>)
    55ae:	4798      	blx	r3
    55b0:	0003      	movs	r3, r0
    55b2:	7023      	strb	r3, [r4, #0]
		if (i2c_status == STATUS_OK) {
    55b4:	1cfb      	adds	r3, r7, #3
    55b6:	781b      	ldrb	r3, [r3, #0]
    55b8:	2b00      	cmp	r3, #0
    55ba:	d10e      	bne.n	55da <i2c_scan+0x6e>
			i2c_status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
    55bc:	1cfc      	adds	r4, r7, #3
    55be:	4a11      	ldr	r2, [pc, #68]	; (5604 <i2c_scan+0x98>)
    55c0:	4b12      	ldr	r3, [pc, #72]	; (560c <i2c_scan+0xa0>)
    55c2:	0011      	movs	r1, r2
    55c4:	0018      	movs	r0, r3
    55c6:	4b13      	ldr	r3, [pc, #76]	; (5614 <i2c_scan+0xa8>)
    55c8:	4798      	blx	r3
    55ca:	0003      	movs	r3, r0
    55cc:	7023      	strb	r3, [r4, #0]
			printf("Address found at %#X\r\n", slave_address);
    55ce:	687a      	ldr	r2, [r7, #4]
    55d0:	4b11      	ldr	r3, [pc, #68]	; (5618 <i2c_scan+0xac>)
    55d2:	0011      	movs	r1, r2
    55d4:	0018      	movs	r0, r3
    55d6:	4b11      	ldr	r3, [pc, #68]	; (561c <i2c_scan+0xb0>)
    55d8:	4798      	blx	r3
		}
		i2c_master_send_stop(&i2c_master_instance);
    55da:	4b0c      	ldr	r3, [pc, #48]	; (560c <i2c_scan+0xa0>)
    55dc:	0018      	movs	r0, r3
    55de:	4b10      	ldr	r3, [pc, #64]	; (5620 <i2c_scan+0xb4>)
    55e0:	4798      	blx	r3
	for (int slave_address = 0; slave_address < 128; slave_address++) {
    55e2:	687b      	ldr	r3, [r7, #4]
    55e4:	3301      	adds	r3, #1
    55e6:	607b      	str	r3, [r7, #4]
    55e8:	687b      	ldr	r3, [r7, #4]
    55ea:	2b7f      	cmp	r3, #127	; 0x7f
    55ec:	ddc8      	ble.n	5580 <i2c_scan+0x14>
	}
}
    55ee:	46c0      	nop			; (mov r8, r8)
    55f0:	46bd      	mov	sp, r7
    55f2:	b003      	add	sp, #12
    55f4:	bd90      	pop	{r4, r7, pc}
    55f6:	46c0      	nop			; (mov r8, r8)
    55f8:	00005b31 	.word	0x00005b31
    55fc:	00005bc1 	.word	0x00005bc1
    5600:	20000034 	.word	0x20000034
    5604:	20000040 	.word	0x20000040
    5608:	2000002c 	.word	0x2000002c
    560c:	200002c8 	.word	0x200002c8
    5610:	000018e9 	.word	0x000018e9
    5614:	000016f1 	.word	0x000016f1
    5618:	0000b334 	.word	0x0000b334
    561c:	00006af5 	.word	0x00006af5
    5620:	00001929 	.word	0x00001929

00005624 <print_general_error>:
 * Prints a general error message.
 *
 * @param func_name function where error occured.
 */
void print_general_error(char *func_name)
{
    5624:	b580      	push	{r7, lr}
    5626:	b082      	sub	sp, #8
    5628:	af00      	add	r7, sp, #0
    562a:	6078      	str	r0, [r7, #4]
	printf("there was an error parsing your args for %s. See help for correct usage.\r\n", func_name);
    562c:	687a      	ldr	r2, [r7, #4]
    562e:	4b04      	ldr	r3, [pc, #16]	; (5640 <print_general_error+0x1c>)
    5630:	0011      	movs	r1, r2
    5632:	0018      	movs	r0, r3
    5634:	4b03      	ldr	r3, [pc, #12]	; (5644 <print_general_error+0x20>)
    5636:	4798      	blx	r3
}
    5638:	46c0      	nop			; (mov r8, r8)
    563a:	46bd      	mov	sp, r7
    563c:	b002      	add	sp, #8
    563e:	bd80      	pop	{r7, pc}
    5640:	0000b34c 	.word	0x0000b34c
    5644:	00006af5 	.word	0x00006af5

00005648 <print_args_error>:
 * @param func_name     name of the function where error occured
 * @param required_args number of arguments required for the function
 * @param num_args      number of arguments given to the function
 */
void print_args_error(char *func_name, int required_args, int num_args)
{
    5648:	b590      	push	{r4, r7, lr}
    564a:	b085      	sub	sp, #20
    564c:	af00      	add	r7, sp, #0
    564e:	60f8      	str	r0, [r7, #12]
    5650:	60b9      	str	r1, [r7, #8]
    5652:	607a      	str	r2, [r7, #4]
	printf("Invalid number of args: %s requires %d arguments and you provided %d \r\n."
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	68ba      	ldr	r2, [r7, #8]
    5658:	68f9      	ldr	r1, [r7, #12]
    565a:	4803      	ldr	r0, [pc, #12]	; (5668 <print_args_error+0x20>)
    565c:	4c03      	ldr	r4, [pc, #12]	; (566c <print_args_error+0x24>)
    565e:	47a0      	blx	r4
	       "See help for more information. \r\n", func_name, required_args, num_args);
}
    5660:	46c0      	nop			; (mov r8, r8)
    5662:	46bd      	mov	sp, r7
    5664:	b005      	add	sp, #20
    5666:	bd90      	pop	{r4, r7, pc}
    5668:	0000b398 	.word	0x0000b398
    566c:	00006af5 	.word	0x00006af5

00005670 <input_handle>:
 *
 * @param argc argument count, number of arguments given.
 * @param argv buffer holding all arguments
 */
void input_handle(int argc, char **argv)
{
    5670:	b580      	push	{r7, lr}
    5672:	b098      	sub	sp, #96	; 0x60
    5674:	af00      	add	r7, sp, #0
    5676:	6078      	str	r0, [r7, #4]
    5678:	6039      	str	r1, [r7, #0]
	if (!(strcmp("help", argv[0]))) {
    567a:	683b      	ldr	r3, [r7, #0]
    567c:	681a      	ldr	r2, [r3, #0]
    567e:	4bd2      	ldr	r3, [pc, #840]	; (59c8 <input_handle+0x358>)
    5680:	0011      	movs	r1, r2
    5682:	0018      	movs	r0, r3
    5684:	4bd1      	ldr	r3, [pc, #836]	; (59cc <input_handle+0x35c>)
    5686:	4798      	blx	r3
    5688:	1e03      	subs	r3, r0, #0
    568a:	d10f      	bne.n	56ac <input_handle+0x3c>
		int required_args = 1;
    568c:	2301      	movs	r3, #1
    568e:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (argc != required_args) {
    5690:	687a      	ldr	r2, [r7, #4]
    5692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    5694:	429a      	cmp	r2, r3
    5696:	d006      	beq.n	56a6 <input_handle+0x36>
			print_args_error("help", required_args, argc);
    5698:	687a      	ldr	r2, [r7, #4]
    569a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    569c:	4bca      	ldr	r3, [pc, #808]	; (59c8 <input_handle+0x358>)
    569e:	0018      	movs	r0, r3
    56a0:	4bcb      	ldr	r3, [pc, #812]	; (59d0 <input_handle+0x360>)
    56a2:	4798      	blx	r3
			return;
    56a4:	e225      	b.n	5af2 <input_handle+0x482>
		}
		help();
    56a6:	4bcb      	ldr	r3, [pc, #812]	; (59d4 <input_handle+0x364>)
    56a8:	4798      	blx	r3
    56aa:	e222      	b.n	5af2 <input_handle+0x482>
	} else if (!(strcmp("ver_bl", argv[0]))) {
    56ac:	683b      	ldr	r3, [r7, #0]
    56ae:	681a      	ldr	r2, [r3, #0]
    56b0:	4bc9      	ldr	r3, [pc, #804]	; (59d8 <input_handle+0x368>)
    56b2:	0011      	movs	r1, r2
    56b4:	0018      	movs	r0, r3
    56b6:	4bc5      	ldr	r3, [pc, #788]	; (59cc <input_handle+0x35c>)
    56b8:	4798      	blx	r3
    56ba:	1e03      	subs	r3, r0, #0
    56bc:	d10f      	bne.n	56de <input_handle+0x6e>
		int required_args = 1;
    56be:	2301      	movs	r3, #1
    56c0:	65bb      	str	r3, [r7, #88]	; 0x58
		if (argc != required_args) {
    56c2:	687a      	ldr	r2, [r7, #4]
    56c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    56c6:	429a      	cmp	r2, r3
    56c8:	d006      	beq.n	56d8 <input_handle+0x68>
			print_args_error("ver_bl", required_args, argc);
    56ca:	687a      	ldr	r2, [r7, #4]
    56cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
    56ce:	4bc2      	ldr	r3, [pc, #776]	; (59d8 <input_handle+0x368>)
    56d0:	0018      	movs	r0, r3
    56d2:	4bbf      	ldr	r3, [pc, #764]	; (59d0 <input_handle+0x360>)
    56d4:	4798      	blx	r3
			return;
    56d6:	e20c      	b.n	5af2 <input_handle+0x482>
		}
		ver_bl();
    56d8:	4bc0      	ldr	r3, [pc, #768]	; (59dc <input_handle+0x36c>)
    56da:	4798      	blx	r3
    56dc:	e209      	b.n	5af2 <input_handle+0x482>
	} else if (!(strcmp("ver_app", argv[0]))) {
    56de:	683b      	ldr	r3, [r7, #0]
    56e0:	681a      	ldr	r2, [r3, #0]
    56e2:	4bbf      	ldr	r3, [pc, #764]	; (59e0 <input_handle+0x370>)
    56e4:	0011      	movs	r1, r2
    56e6:	0018      	movs	r0, r3
    56e8:	4bb8      	ldr	r3, [pc, #736]	; (59cc <input_handle+0x35c>)
    56ea:	4798      	blx	r3
    56ec:	1e03      	subs	r3, r0, #0
    56ee:	d10f      	bne.n	5710 <input_handle+0xa0>
		int required_args = 1;
    56f0:	2301      	movs	r3, #1
    56f2:	657b      	str	r3, [r7, #84]	; 0x54
		if (argc != required_args) {
    56f4:	687a      	ldr	r2, [r7, #4]
    56f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    56f8:	429a      	cmp	r2, r3
    56fa:	d006      	beq.n	570a <input_handle+0x9a>
			print_args_error("ver_app", required_args, argc);
    56fc:	687a      	ldr	r2, [r7, #4]
    56fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
    5700:	4bb7      	ldr	r3, [pc, #732]	; (59e0 <input_handle+0x370>)
    5702:	0018      	movs	r0, r3
    5704:	4bb2      	ldr	r3, [pc, #712]	; (59d0 <input_handle+0x360>)
    5706:	4798      	blx	r3
			return;
    5708:	e1f3      	b.n	5af2 <input_handle+0x482>
		}
		ver_app();
    570a:	4bb6      	ldr	r3, [pc, #728]	; (59e4 <input_handle+0x374>)
    570c:	4798      	blx	r3
    570e:	e1f0      	b.n	5af2 <input_handle+0x482>
	} else if (!(strcmp("gpio_set", argv[0]))) {
    5710:	683b      	ldr	r3, [r7, #0]
    5712:	681a      	ldr	r2, [r3, #0]
    5714:	4bb4      	ldr	r3, [pc, #720]	; (59e8 <input_handle+0x378>)
    5716:	0011      	movs	r1, r2
    5718:	0018      	movs	r0, r3
    571a:	4bac      	ldr	r3, [pc, #688]	; (59cc <input_handle+0x35c>)
    571c:	4798      	blx	r3
    571e:	1e03      	subs	r3, r0, #0
    5720:	d137      	bne.n	5792 <input_handle+0x122>
		int required_args = 3;
    5722:	2303      	movs	r3, #3
    5724:	653b      	str	r3, [r7, #80]	; 0x50
		if (argc != required_args) {
    5726:	687a      	ldr	r2, [r7, #4]
    5728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    572a:	429a      	cmp	r2, r3
    572c:	d006      	beq.n	573c <input_handle+0xcc>
			print_args_error("gpio_set", required_args, argc);
    572e:	687a      	ldr	r2, [r7, #4]
    5730:	6d39      	ldr	r1, [r7, #80]	; 0x50
    5732:	4bad      	ldr	r3, [pc, #692]	; (59e8 <input_handle+0x378>)
    5734:	0018      	movs	r0, r3
    5736:	4ba6      	ldr	r3, [pc, #664]	; (59d0 <input_handle+0x360>)
    5738:	4798      	blx	r3
			return;
    573a:	e1da      	b.n	5af2 <input_handle+0x482>
		}
		char port = argv[1][0];
    573c:	683b      	ldr	r3, [r7, #0]
    573e:	3304      	adds	r3, #4
    5740:	681a      	ldr	r2, [r3, #0]
    5742:	234f      	movs	r3, #79	; 0x4f
    5744:	18fb      	adds	r3, r7, r3
    5746:	7812      	ldrb	r2, [r2, #0]
    5748:	701a      	strb	r2, [r3, #0]
		int pin = atoi(argv[2]);
    574a:	683b      	ldr	r3, [r7, #0]
    574c:	3308      	adds	r3, #8
    574e:	681b      	ldr	r3, [r3, #0]
    5750:	0018      	movs	r0, r3
    5752:	4ba6      	ldr	r3, [pc, #664]	; (59ec <input_handle+0x37c>)
    5754:	4798      	blx	r3
    5756:	0003      	movs	r3, r0
    5758:	64bb      	str	r3, [r7, #72]	; 0x48
		if (isdigit(argv[2][0]))
    575a:	4ba5      	ldr	r3, [pc, #660]	; (59f0 <input_handle+0x380>)
    575c:	4798      	blx	r3
    575e:	0002      	movs	r2, r0
    5760:	683b      	ldr	r3, [r7, #0]
    5762:	3308      	adds	r3, #8
    5764:	681b      	ldr	r3, [r3, #0]
    5766:	781b      	ldrb	r3, [r3, #0]
    5768:	3301      	adds	r3, #1
    576a:	18d3      	adds	r3, r2, r3
    576c:	781b      	ldrb	r3, [r3, #0]
    576e:	001a      	movs	r2, r3
    5770:	2304      	movs	r3, #4
    5772:	4013      	ands	r3, r2
    5774:	d008      	beq.n	5788 <input_handle+0x118>
			gpio_set(port, pin);
    5776:	6cba      	ldr	r2, [r7, #72]	; 0x48
    5778:	234f      	movs	r3, #79	; 0x4f
    577a:	18fb      	adds	r3, r7, r3
    577c:	781b      	ldrb	r3, [r3, #0]
    577e:	0011      	movs	r1, r2
    5780:	0018      	movs	r0, r3
    5782:	4b9c      	ldr	r3, [pc, #624]	; (59f4 <input_handle+0x384>)
    5784:	4798      	blx	r3
    5786:	e1b4      	b.n	5af2 <input_handle+0x482>
		else
			print_general_error("gpio_set");
    5788:	4b97      	ldr	r3, [pc, #604]	; (59e8 <input_handle+0x378>)
    578a:	0018      	movs	r0, r3
    578c:	4b9a      	ldr	r3, [pc, #616]	; (59f8 <input_handle+0x388>)
    578e:	4798      	blx	r3
    5790:	e1af      	b.n	5af2 <input_handle+0x482>
	} else if (!(strcmp("gpio_clear", argv[0]))) {
    5792:	683b      	ldr	r3, [r7, #0]
    5794:	681a      	ldr	r2, [r3, #0]
    5796:	4b99      	ldr	r3, [pc, #612]	; (59fc <input_handle+0x38c>)
    5798:	0011      	movs	r1, r2
    579a:	0018      	movs	r0, r3
    579c:	4b8b      	ldr	r3, [pc, #556]	; (59cc <input_handle+0x35c>)
    579e:	4798      	blx	r3
    57a0:	1e03      	subs	r3, r0, #0
    57a2:	d137      	bne.n	5814 <input_handle+0x1a4>
		int required_args = 3;
    57a4:	2303      	movs	r3, #3
    57a6:	647b      	str	r3, [r7, #68]	; 0x44
		if (argc != required_args) {
    57a8:	687a      	ldr	r2, [r7, #4]
    57aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    57ac:	429a      	cmp	r2, r3
    57ae:	d006      	beq.n	57be <input_handle+0x14e>
			print_args_error("gpio_clear", required_args, argc);
    57b0:	687a      	ldr	r2, [r7, #4]
    57b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
    57b4:	4b91      	ldr	r3, [pc, #580]	; (59fc <input_handle+0x38c>)
    57b6:	0018      	movs	r0, r3
    57b8:	4b85      	ldr	r3, [pc, #532]	; (59d0 <input_handle+0x360>)
    57ba:	4798      	blx	r3
			return;
    57bc:	e199      	b.n	5af2 <input_handle+0x482>
		}
		char port = argv[1][0];
    57be:	683b      	ldr	r3, [r7, #0]
    57c0:	3304      	adds	r3, #4
    57c2:	681a      	ldr	r2, [r3, #0]
    57c4:	2343      	movs	r3, #67	; 0x43
    57c6:	18fb      	adds	r3, r7, r3
    57c8:	7812      	ldrb	r2, [r2, #0]
    57ca:	701a      	strb	r2, [r3, #0]
		int pin = atoi(argv[2]);
    57cc:	683b      	ldr	r3, [r7, #0]
    57ce:	3308      	adds	r3, #8
    57d0:	681b      	ldr	r3, [r3, #0]
    57d2:	0018      	movs	r0, r3
    57d4:	4b85      	ldr	r3, [pc, #532]	; (59ec <input_handle+0x37c>)
    57d6:	4798      	blx	r3
    57d8:	0003      	movs	r3, r0
    57da:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (isdigit(argv[2][0]))
    57dc:	4b84      	ldr	r3, [pc, #528]	; (59f0 <input_handle+0x380>)
    57de:	4798      	blx	r3
    57e0:	0002      	movs	r2, r0
    57e2:	683b      	ldr	r3, [r7, #0]
    57e4:	3308      	adds	r3, #8
    57e6:	681b      	ldr	r3, [r3, #0]
    57e8:	781b      	ldrb	r3, [r3, #0]
    57ea:	3301      	adds	r3, #1
    57ec:	18d3      	adds	r3, r2, r3
    57ee:	781b      	ldrb	r3, [r3, #0]
    57f0:	001a      	movs	r2, r3
    57f2:	2304      	movs	r3, #4
    57f4:	4013      	ands	r3, r2
    57f6:	d008      	beq.n	580a <input_handle+0x19a>
			gpio_clear(port, pin);
    57f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    57fa:	2343      	movs	r3, #67	; 0x43
    57fc:	18fb      	adds	r3, r7, r3
    57fe:	781b      	ldrb	r3, [r3, #0]
    5800:	0011      	movs	r1, r2
    5802:	0018      	movs	r0, r3
    5804:	4b7e      	ldr	r3, [pc, #504]	; (5a00 <input_handle+0x390>)
    5806:	4798      	blx	r3
    5808:	e173      	b.n	5af2 <input_handle+0x482>
		else
			print_general_error("gpio_clear");
    580a:	4b7c      	ldr	r3, [pc, #496]	; (59fc <input_handle+0x38c>)
    580c:	0018      	movs	r0, r3
    580e:	4b7a      	ldr	r3, [pc, #488]	; (59f8 <input_handle+0x388>)
    5810:	4798      	blx	r3
    5812:	e16e      	b.n	5af2 <input_handle+0x482>
	} else if (!(strcmp("gpio_get", argv[0]))) {
    5814:	683b      	ldr	r3, [r7, #0]
    5816:	681a      	ldr	r2, [r3, #0]
    5818:	4b7a      	ldr	r3, [pc, #488]	; (5a04 <input_handle+0x394>)
    581a:	0011      	movs	r1, r2
    581c:	0018      	movs	r0, r3
    581e:	4b6b      	ldr	r3, [pc, #428]	; (59cc <input_handle+0x35c>)
    5820:	4798      	blx	r3
    5822:	1e03      	subs	r3, r0, #0
    5824:	d137      	bne.n	5896 <input_handle+0x226>
		int required_args = 3;
    5826:	2303      	movs	r3, #3
    5828:	63bb      	str	r3, [r7, #56]	; 0x38
		if (argc != required_args) {
    582a:	687a      	ldr	r2, [r7, #4]
    582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    582e:	429a      	cmp	r2, r3
    5830:	d006      	beq.n	5840 <input_handle+0x1d0>
			print_args_error("gpio_get", required_args, argc);
    5832:	687a      	ldr	r2, [r7, #4]
    5834:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    5836:	4b73      	ldr	r3, [pc, #460]	; (5a04 <input_handle+0x394>)
    5838:	0018      	movs	r0, r3
    583a:	4b65      	ldr	r3, [pc, #404]	; (59d0 <input_handle+0x360>)
    583c:	4798      	blx	r3
			return;
    583e:	e158      	b.n	5af2 <input_handle+0x482>
		}
		char port = argv[1][0];
    5840:	683b      	ldr	r3, [r7, #0]
    5842:	3304      	adds	r3, #4
    5844:	681a      	ldr	r2, [r3, #0]
    5846:	2337      	movs	r3, #55	; 0x37
    5848:	18fb      	adds	r3, r7, r3
    584a:	7812      	ldrb	r2, [r2, #0]
    584c:	701a      	strb	r2, [r3, #0]
		int pin = atoi(argv[2]);
    584e:	683b      	ldr	r3, [r7, #0]
    5850:	3308      	adds	r3, #8
    5852:	681b      	ldr	r3, [r3, #0]
    5854:	0018      	movs	r0, r3
    5856:	4b65      	ldr	r3, [pc, #404]	; (59ec <input_handle+0x37c>)
    5858:	4798      	blx	r3
    585a:	0003      	movs	r3, r0
    585c:	633b      	str	r3, [r7, #48]	; 0x30
		if (isdigit(argv[2][0]))
    585e:	4b64      	ldr	r3, [pc, #400]	; (59f0 <input_handle+0x380>)
    5860:	4798      	blx	r3
    5862:	0002      	movs	r2, r0
    5864:	683b      	ldr	r3, [r7, #0]
    5866:	3308      	adds	r3, #8
    5868:	681b      	ldr	r3, [r3, #0]
    586a:	781b      	ldrb	r3, [r3, #0]
    586c:	3301      	adds	r3, #1
    586e:	18d3      	adds	r3, r2, r3
    5870:	781b      	ldrb	r3, [r3, #0]
    5872:	001a      	movs	r2, r3
    5874:	2304      	movs	r3, #4
    5876:	4013      	ands	r3, r2
    5878:	d008      	beq.n	588c <input_handle+0x21c>
			gpio_get(port, pin);
    587a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    587c:	2337      	movs	r3, #55	; 0x37
    587e:	18fb      	adds	r3, r7, r3
    5880:	781b      	ldrb	r3, [r3, #0]
    5882:	0011      	movs	r1, r2
    5884:	0018      	movs	r0, r3
    5886:	4b60      	ldr	r3, [pc, #384]	; (5a08 <input_handle+0x398>)
    5888:	4798      	blx	r3
    588a:	e132      	b.n	5af2 <input_handle+0x482>
		else
			print_general_error("gpio_get");
    588c:	4b5d      	ldr	r3, [pc, #372]	; (5a04 <input_handle+0x394>)
    588e:	0018      	movs	r0, r3
    5890:	4b59      	ldr	r3, [pc, #356]	; (59f8 <input_handle+0x388>)
    5892:	4798      	blx	r3
    5894:	e12d      	b.n	5af2 <input_handle+0x482>
	} else if (!(strcmp("mac", argv[0]))) {
    5896:	683b      	ldr	r3, [r7, #0]
    5898:	681a      	ldr	r2, [r3, #0]
    589a:	4b5c      	ldr	r3, [pc, #368]	; (5a0c <input_handle+0x39c>)
    589c:	0011      	movs	r1, r2
    589e:	0018      	movs	r0, r3
    58a0:	4b4a      	ldr	r3, [pc, #296]	; (59cc <input_handle+0x35c>)
    58a2:	4798      	blx	r3
    58a4:	1e03      	subs	r3, r0, #0
    58a6:	d10f      	bne.n	58c8 <input_handle+0x258>
		int required_args = 1;
    58a8:	2301      	movs	r3, #1
    58aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (argc != required_args) {
    58ac:	687a      	ldr	r2, [r7, #4]
    58ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    58b0:	429a      	cmp	r2, r3
    58b2:	d006      	beq.n	58c2 <input_handle+0x252>
			print_args_error("mac", required_args, argc);
    58b4:	687a      	ldr	r2, [r7, #4]
    58b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    58b8:	4b54      	ldr	r3, [pc, #336]	; (5a0c <input_handle+0x39c>)
    58ba:	0018      	movs	r0, r3
    58bc:	4b44      	ldr	r3, [pc, #272]	; (59d0 <input_handle+0x360>)
    58be:	4798      	blx	r3
			return;
    58c0:	e117      	b.n	5af2 <input_handle+0x482>
		}
		mac();
    58c2:	4b53      	ldr	r3, [pc, #332]	; (5a10 <input_handle+0x3a0>)
    58c4:	4798      	blx	r3
    58c6:	e114      	b.n	5af2 <input_handle+0x482>
	} else if (!(strcmp("ip", argv[0]))) {
    58c8:	683b      	ldr	r3, [r7, #0]
    58ca:	681a      	ldr	r2, [r3, #0]
    58cc:	4b51      	ldr	r3, [pc, #324]	; (5a14 <input_handle+0x3a4>)
    58ce:	0011      	movs	r1, r2
    58d0:	0018      	movs	r0, r3
    58d2:	4b3e      	ldr	r3, [pc, #248]	; (59cc <input_handle+0x35c>)
    58d4:	4798      	blx	r3
    58d6:	1e03      	subs	r3, r0, #0
    58d8:	d10f      	bne.n	58fa <input_handle+0x28a>
		int required_args = 1;
    58da:	2301      	movs	r3, #1
    58dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (argc != required_args) {
    58de:	687a      	ldr	r2, [r7, #4]
    58e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    58e2:	429a      	cmp	r2, r3
    58e4:	d006      	beq.n	58f4 <input_handle+0x284>
			print_args_error("ip", required_args, argc);
    58e6:	687a      	ldr	r2, [r7, #4]
    58e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    58ea:	4b4a      	ldr	r3, [pc, #296]	; (5a14 <input_handle+0x3a4>)
    58ec:	0018      	movs	r0, r3
    58ee:	4b38      	ldr	r3, [pc, #224]	; (59d0 <input_handle+0x360>)
    58f0:	4798      	blx	r3
			return;
    58f2:	e0fe      	b.n	5af2 <input_handle+0x482>
		}
		ip();
    58f4:	4b48      	ldr	r3, [pc, #288]	; (5a18 <input_handle+0x3a8>)
    58f6:	4798      	blx	r3
    58f8:	e0fb      	b.n	5af2 <input_handle+0x482>
	} else if (!(strcmp("read", argv[0]))) {
    58fa:	683b      	ldr	r3, [r7, #0]
    58fc:	681a      	ldr	r2, [r3, #0]
    58fe:	4b47      	ldr	r3, [pc, #284]	; (5a1c <input_handle+0x3ac>)
    5900:	0011      	movs	r1, r2
    5902:	0018      	movs	r0, r3
    5904:	4b31      	ldr	r3, [pc, #196]	; (59cc <input_handle+0x35c>)
    5906:	4798      	blx	r3
    5908:	1e03      	subs	r3, r0, #0
    590a:	d146      	bne.n	599a <input_handle+0x32a>
		int required_args = 4;
    590c:	2304      	movs	r3, #4
    590e:	627b      	str	r3, [r7, #36]	; 0x24
		if (argc != required_args) {
    5910:	687a      	ldr	r2, [r7, #4]
    5912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5914:	429a      	cmp	r2, r3
    5916:	d006      	beq.n	5926 <input_handle+0x2b6>
			print_args_error("read", required_args, argc);
    5918:	687a      	ldr	r2, [r7, #4]
    591a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    591c:	4b3f      	ldr	r3, [pc, #252]	; (5a1c <input_handle+0x3ac>)
    591e:	0018      	movs	r0, r3
    5920:	4b2b      	ldr	r3, [pc, #172]	; (59d0 <input_handle+0x360>)
    5922:	4798      	blx	r3
			return;
    5924:	e0e5      	b.n	5af2 <input_handle+0x482>
		}
		int reading = atoi(argv[2]);
    5926:	683b      	ldr	r3, [r7, #0]
    5928:	3308      	adds	r3, #8
    592a:	681b      	ldr	r3, [r3, #0]
    592c:	0018      	movs	r0, r3
    592e:	4b2f      	ldr	r3, [pc, #188]	; (59ec <input_handle+0x37c>)
    5930:	4798      	blx	r3
    5932:	0003      	movs	r3, r0
    5934:	623b      	str	r3, [r7, #32]
		int interval_ms = atoi(argv[3]);
    5936:	683b      	ldr	r3, [r7, #0]
    5938:	330c      	adds	r3, #12
    593a:	681b      	ldr	r3, [r3, #0]
    593c:	0018      	movs	r0, r3
    593e:	4b2b      	ldr	r3, [pc, #172]	; (59ec <input_handle+0x37c>)
    5940:	4798      	blx	r3
    5942:	0003      	movs	r3, r0
    5944:	61fb      	str	r3, [r7, #28]
		if (isdigit(argv[2][0]) && isdigit(argv[3][0]))
    5946:	4b2a      	ldr	r3, [pc, #168]	; (59f0 <input_handle+0x380>)
    5948:	4798      	blx	r3
    594a:	0002      	movs	r2, r0
    594c:	683b      	ldr	r3, [r7, #0]
    594e:	3308      	adds	r3, #8
    5950:	681b      	ldr	r3, [r3, #0]
    5952:	781b      	ldrb	r3, [r3, #0]
    5954:	3301      	adds	r3, #1
    5956:	18d3      	adds	r3, r2, r3
    5958:	781b      	ldrb	r3, [r3, #0]
    595a:	001a      	movs	r2, r3
    595c:	2304      	movs	r3, #4
    595e:	4013      	ands	r3, r2
    5960:	d016      	beq.n	5990 <input_handle+0x320>
    5962:	4b23      	ldr	r3, [pc, #140]	; (59f0 <input_handle+0x380>)
    5964:	4798      	blx	r3
    5966:	0002      	movs	r2, r0
    5968:	683b      	ldr	r3, [r7, #0]
    596a:	330c      	adds	r3, #12
    596c:	681b      	ldr	r3, [r3, #0]
    596e:	781b      	ldrb	r3, [r3, #0]
    5970:	3301      	adds	r3, #1
    5972:	18d3      	adds	r3, r2, r3
    5974:	781b      	ldrb	r3, [r3, #0]
    5976:	001a      	movs	r2, r3
    5978:	2304      	movs	r3, #4
    597a:	4013      	ands	r3, r2
    597c:	d008      	beq.n	5990 <input_handle+0x320>
			read_sensor(argv[1], reading, interval_ms);
    597e:	683b      	ldr	r3, [r7, #0]
    5980:	3304      	adds	r3, #4
    5982:	681b      	ldr	r3, [r3, #0]
    5984:	69fa      	ldr	r2, [r7, #28]
    5986:	6a39      	ldr	r1, [r7, #32]
    5988:	0018      	movs	r0, r3
    598a:	4b25      	ldr	r3, [pc, #148]	; (5a20 <input_handle+0x3b0>)
    598c:	4798      	blx	r3
    598e:	e0b0      	b.n	5af2 <input_handle+0x482>
		else
			print_general_error("read");
    5990:	4b22      	ldr	r3, [pc, #136]	; (5a1c <input_handle+0x3ac>)
    5992:	0018      	movs	r0, r3
    5994:	4b18      	ldr	r3, [pc, #96]	; (59f8 <input_handle+0x388>)
    5996:	4798      	blx	r3
    5998:	e0ab      	b.n	5af2 <input_handle+0x482>
	} else if (!(strcmp("adc_get", argv[0]))) {
    599a:	683b      	ldr	r3, [r7, #0]
    599c:	681a      	ldr	r2, [r3, #0]
    599e:	4b21      	ldr	r3, [pc, #132]	; (5a24 <input_handle+0x3b4>)
    59a0:	0011      	movs	r1, r2
    59a2:	0018      	movs	r0, r3
    59a4:	4b09      	ldr	r3, [pc, #36]	; (59cc <input_handle+0x35c>)
    59a6:	4798      	blx	r3
    59a8:	1e03      	subs	r3, r0, #0
    59aa:	d168      	bne.n	5a7e <input_handle+0x40e>
		int required_args = 3;
    59ac:	2303      	movs	r3, #3
    59ae:	61bb      	str	r3, [r7, #24]
		if (argc != required_args) {
    59b0:	687a      	ldr	r2, [r7, #4]
    59b2:	69bb      	ldr	r3, [r7, #24]
    59b4:	429a      	cmp	r2, r3
    59b6:	d037      	beq.n	5a28 <input_handle+0x3b8>
			print_args_error("adc_get", required_args, argc);
    59b8:	687a      	ldr	r2, [r7, #4]
    59ba:	69b9      	ldr	r1, [r7, #24]
    59bc:	4b19      	ldr	r3, [pc, #100]	; (5a24 <input_handle+0x3b4>)
    59be:	0018      	movs	r0, r3
    59c0:	4b03      	ldr	r3, [pc, #12]	; (59d0 <input_handle+0x360>)
    59c2:	4798      	blx	r3
			return;
    59c4:	e095      	b.n	5af2 <input_handle+0x482>
    59c6:	46c0      	nop			; (mov r8, r8)
    59c8:	0000b404 	.word	0x0000b404
    59cc:	00006d8d 	.word	0x00006d8d
    59d0:	00005649 	.word	0x00005649
    59d4:	000050b1 	.word	0x000050b1
    59d8:	0000b40c 	.word	0x0000b40c
    59dc:	000050cd 	.word	0x000050cd
    59e0:	0000b414 	.word	0x0000b414
    59e4:	000050f1 	.word	0x000050f1
    59e8:	0000b41c 	.word	0x0000b41c
    59ec:	00005ff1 	.word	0x00005ff1
    59f0:	0000604d 	.word	0x0000604d
    59f4:	00005115 	.word	0x00005115
    59f8:	00005625 	.word	0x00005625
    59fc:	0000b428 	.word	0x0000b428
    5a00:	00005179 	.word	0x00005179
    5a04:	0000b434 	.word	0x0000b434
    5a08:	000051dd 	.word	0x000051dd
    5a0c:	0000b440 	.word	0x0000b440
    5a10:	0000523d 	.word	0x0000523d
    5a14:	0000b444 	.word	0x0000b444
    5a18:	00005259 	.word	0x00005259
    5a1c:	0000b448 	.word	0x0000b448
    5a20:	00005275 	.word	0x00005275
    5a24:	0000b450 	.word	0x0000b450
		}
		char port = argv[1][0];
    5a28:	683b      	ldr	r3, [r7, #0]
    5a2a:	3304      	adds	r3, #4
    5a2c:	681a      	ldr	r2, [r3, #0]
    5a2e:	2317      	movs	r3, #23
    5a30:	18fb      	adds	r3, r7, r3
    5a32:	7812      	ldrb	r2, [r2, #0]
    5a34:	701a      	strb	r2, [r3, #0]
		int pin = atoi(argv[2]);
    5a36:	683b      	ldr	r3, [r7, #0]
    5a38:	3308      	adds	r3, #8
    5a3a:	681b      	ldr	r3, [r3, #0]
    5a3c:	0018      	movs	r0, r3
    5a3e:	4b2e      	ldr	r3, [pc, #184]	; (5af8 <input_handle+0x488>)
    5a40:	4798      	blx	r3
    5a42:	0003      	movs	r3, r0
    5a44:	613b      	str	r3, [r7, #16]
		//TODO: isdigit should check [2][0] for all isdigit calls
		if (isdigit(argv[2][0])) {
    5a46:	4b2d      	ldr	r3, [pc, #180]	; (5afc <input_handle+0x48c>)
    5a48:	4798      	blx	r3
    5a4a:	0002      	movs	r2, r0
    5a4c:	683b      	ldr	r3, [r7, #0]
    5a4e:	3308      	adds	r3, #8
    5a50:	681b      	ldr	r3, [r3, #0]
    5a52:	781b      	ldrb	r3, [r3, #0]
    5a54:	3301      	adds	r3, #1
    5a56:	18d3      	adds	r3, r2, r3
    5a58:	781b      	ldrb	r3, [r3, #0]
    5a5a:	001a      	movs	r2, r3
    5a5c:	2304      	movs	r3, #4
    5a5e:	4013      	ands	r3, r2
    5a60:	d008      	beq.n	5a74 <input_handle+0x404>
			adc_get(port, pin);
    5a62:	693a      	ldr	r2, [r7, #16]
    5a64:	2317      	movs	r3, #23
    5a66:	18fb      	adds	r3, r7, r3
    5a68:	781b      	ldrb	r3, [r3, #0]
    5a6a:	0011      	movs	r1, r2
    5a6c:	0018      	movs	r0, r3
    5a6e:	4b24      	ldr	r3, [pc, #144]	; (5b00 <input_handle+0x490>)
    5a70:	4798      	blx	r3
    5a72:	e03e      	b.n	5af2 <input_handle+0x482>
		} else {
			print_general_error("adc_get");
    5a74:	4b23      	ldr	r3, [pc, #140]	; (5b04 <input_handle+0x494>)
    5a76:	0018      	movs	r0, r3
    5a78:	4b23      	ldr	r3, [pc, #140]	; (5b08 <input_handle+0x498>)
    5a7a:	4798      	blx	r3
    5a7c:	e039      	b.n	5af2 <input_handle+0x482>
		}
	} else if (!(strcmp("mcu_temp", argv[0]))) {
    5a7e:	683b      	ldr	r3, [r7, #0]
    5a80:	681a      	ldr	r2, [r3, #0]
    5a82:	4b22      	ldr	r3, [pc, #136]	; (5b0c <input_handle+0x49c>)
    5a84:	0011      	movs	r1, r2
    5a86:	0018      	movs	r0, r3
    5a88:	4b21      	ldr	r3, [pc, #132]	; (5b10 <input_handle+0x4a0>)
    5a8a:	4798      	blx	r3
    5a8c:	1e03      	subs	r3, r0, #0
    5a8e:	d10f      	bne.n	5ab0 <input_handle+0x440>
		int required_args = 1;
    5a90:	2301      	movs	r3, #1
    5a92:	60fb      	str	r3, [r7, #12]
		if (argc != required_args) {
    5a94:	687a      	ldr	r2, [r7, #4]
    5a96:	68fb      	ldr	r3, [r7, #12]
    5a98:	429a      	cmp	r2, r3
    5a9a:	d006      	beq.n	5aaa <input_handle+0x43a>
			print_args_error("mcu_temp", required_args, argc);
    5a9c:	687a      	ldr	r2, [r7, #4]
    5a9e:	68f9      	ldr	r1, [r7, #12]
    5aa0:	4b1a      	ldr	r3, [pc, #104]	; (5b0c <input_handle+0x49c>)
    5aa2:	0018      	movs	r0, r3
    5aa4:	4b1b      	ldr	r3, [pc, #108]	; (5b14 <input_handle+0x4a4>)
    5aa6:	4798      	blx	r3
			return;
    5aa8:	e023      	b.n	5af2 <input_handle+0x482>
		}
		mcu_temp();
    5aaa:	4b1b      	ldr	r3, [pc, #108]	; (5b18 <input_handle+0x4a8>)
    5aac:	4798      	blx	r3
    5aae:	e020      	b.n	5af2 <input_handle+0x482>
	} else if (!(strcmp("i2c_scan", argv[0]))) {
    5ab0:	683b      	ldr	r3, [r7, #0]
    5ab2:	681a      	ldr	r2, [r3, #0]
    5ab4:	4b19      	ldr	r3, [pc, #100]	; (5b1c <input_handle+0x4ac>)
    5ab6:	0011      	movs	r1, r2
    5ab8:	0018      	movs	r0, r3
    5aba:	4b15      	ldr	r3, [pc, #84]	; (5b10 <input_handle+0x4a0>)
    5abc:	4798      	blx	r3
    5abe:	1e03      	subs	r3, r0, #0
    5ac0:	d113      	bne.n	5aea <input_handle+0x47a>
		int required_args = 1;
    5ac2:	2301      	movs	r3, #1
    5ac4:	60bb      	str	r3, [r7, #8]
		if (argc != required_args) {
    5ac6:	687a      	ldr	r2, [r7, #4]
    5ac8:	68bb      	ldr	r3, [r7, #8]
    5aca:	429a      	cmp	r2, r3
    5acc:	d006      	beq.n	5adc <input_handle+0x46c>
			print_args_error("i2c_scan", required_args, argc);
    5ace:	687a      	ldr	r2, [r7, #4]
    5ad0:	68b9      	ldr	r1, [r7, #8]
    5ad2:	4b12      	ldr	r3, [pc, #72]	; (5b1c <input_handle+0x4ac>)
    5ad4:	0018      	movs	r0, r3
    5ad6:	4b0f      	ldr	r3, [pc, #60]	; (5b14 <input_handle+0x4a4>)
    5ad8:	4798      	blx	r3
			return;
    5ada:	e00a      	b.n	5af2 <input_handle+0x482>
		}
		printf("running i2c_scan\r\n");
    5adc:	4b10      	ldr	r3, [pc, #64]	; (5b20 <input_handle+0x4b0>)
    5ade:	0018      	movs	r0, r3
    5ae0:	4b10      	ldr	r3, [pc, #64]	; (5b24 <input_handle+0x4b4>)
    5ae2:	4798      	blx	r3
		i2c_scan();
    5ae4:	4b10      	ldr	r3, [pc, #64]	; (5b28 <input_handle+0x4b8>)
    5ae6:	4798      	blx	r3
    5ae8:	e003      	b.n	5af2 <input_handle+0x482>
	} else {
		printf("Invalid input. See help for correct usage.\r\n");
    5aea:	4b10      	ldr	r3, [pc, #64]	; (5b2c <input_handle+0x4bc>)
    5aec:	0018      	movs	r0, r3
    5aee:	4b0d      	ldr	r3, [pc, #52]	; (5b24 <input_handle+0x4b4>)
    5af0:	4798      	blx	r3
	}
}
    5af2:	46bd      	mov	sp, r7
    5af4:	b018      	add	sp, #96	; 0x60
    5af6:	bd80      	pop	{r7, pc}
    5af8:	00005ff1 	.word	0x00005ff1
    5afc:	0000604d 	.word	0x0000604d
    5b00:	000052c9 	.word	0x000052c9
    5b04:	0000b450 	.word	0x0000b450
    5b08:	00005625 	.word	0x00005625
    5b0c:	0000b458 	.word	0x0000b458
    5b10:	00006d8d 	.word	0x00006d8d
    5b14:	00005649 	.word	0x00005649
    5b18:	00005455 	.word	0x00005455
    5b1c:	0000b464 	.word	0x0000b464
    5b20:	0000b470 	.word	0x0000b470
    5b24:	00006be9 	.word	0x00006be9
    5b28:	0000556d 	.word	0x0000556d
    5b2c:	0000b484 	.word	0x0000b484

00005b30 <configure_i2c>:
 *      @li Pin SDA: PA08 //TODO: CONFIRM
 *      @li Pin SCL: PA09 //TODO: CONFIRM
 *      @li Clock Generator: @ref GCLK_GENERATOR_0
 */
void configure_i2c()
{
    5b30:	b580      	push	{r7, lr}
    5b32:	b08e      	sub	sp, #56	; 0x38
    5b34:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
    5b36:	1d3b      	adds	r3, r7, #4
    5b38:	0018      	movs	r0, r3
    5b3a:	4b10      	ldr	r3, [pc, #64]	; (5b7c <configure_i2c+0x4c>)
    5b3c:	4798      	blx	r3
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 65535;
    5b3e:	1d3b      	adds	r3, r7, #4
    5b40:	2201      	movs	r2, #1
    5b42:	4252      	negs	r2, r2
    5b44:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    5b46:	1d3b      	adds	r3, r7, #4
    5b48:	4a0d      	ldr	r2, [pc, #52]	; (5b80 <configure_i2c+0x50>)
    5b4a:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    5b4c:	1d3b      	adds	r3, r7, #4
    5b4e:	4a0d      	ldr	r2, [pc, #52]	; (5b84 <configure_i2c+0x54>)
    5b50:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
    5b52:	1d3b      	adds	r3, r7, #4
    5b54:	2200      	movs	r2, #0
    5b56:	731a      	strb	r2, [r3, #12]
	/* Initialize and enable device with config */
	while (i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master) != STATUS_OK);
    5b58:	46c0      	nop			; (mov r8, r8)
    5b5a:	1d3a      	adds	r2, r7, #4
    5b5c:	490a      	ldr	r1, [pc, #40]	; (5b88 <configure_i2c+0x58>)
    5b5e:	4b0b      	ldr	r3, [pc, #44]	; (5b8c <configure_i2c+0x5c>)
    5b60:	0018      	movs	r0, r3
    5b62:	4b0b      	ldr	r3, [pc, #44]	; (5b90 <configure_i2c+0x60>)
    5b64:	4798      	blx	r3
    5b66:	1e03      	subs	r3, r0, #0
    5b68:	d1f7      	bne.n	5b5a <configure_i2c+0x2a>
	i2c_master_enable(&i2c_master_instance);
    5b6a:	4b08      	ldr	r3, [pc, #32]	; (5b8c <configure_i2c+0x5c>)
    5b6c:	0018      	movs	r0, r3
    5b6e:	4b09      	ldr	r3, [pc, #36]	; (5b94 <configure_i2c+0x64>)
    5b70:	4798      	blx	r3
}
    5b72:	46c0      	nop			; (mov r8, r8)
    5b74:	46bd      	mov	sp, r7
    5b76:	b00e      	add	sp, #56	; 0x38
    5b78:	bd80      	pop	{r7, pc}
    5b7a:	46c0      	nop			; (mov r8, r8)
    5b7c:	00004bbd 	.word	0x00004bbd
    5b80:	00080003 	.word	0x00080003
    5b84:	00090003 	.word	0x00090003
    5b88:	42001000 	.word	0x42001000
    5b8c:	200002c8 	.word	0x200002c8
    5b90:	00001239 	.word	0x00001239
    5b94:	00004c41 	.word	0x00004c41

00005b98 <i2c_write_complete_callback>:
/**
 * Callback after a successful I2C write.
 * @param module i2c module to bind to
 */
void i2c_write_complete_callback(struct i2c_master_module *const module)
{
    5b98:	b580      	push	{r7, lr}
    5b9a:	b082      	sub	sp, #8
    5b9c:	af00      	add	r7, sp, #0
    5b9e:	6078      	str	r0, [r7, #4]
	/* Initiate new packet read */
	i2c_master_read_packet_job(&i2c_master_instance, &rd_packet);
    5ba0:	4a04      	ldr	r2, [pc, #16]	; (5bb4 <i2c_write_complete_callback+0x1c>)
    5ba2:	4b05      	ldr	r3, [pc, #20]	; (5bb8 <i2c_write_complete_callback+0x20>)
    5ba4:	0011      	movs	r1, r2
    5ba6:	0018      	movs	r0, r3
    5ba8:	4b04      	ldr	r3, [pc, #16]	; (5bbc <i2c_write_complete_callback+0x24>)
    5baa:	4798      	blx	r3
}
    5bac:	46c0      	nop			; (mov r8, r8)
    5bae:	46bd      	mov	sp, r7
    5bb0:	b002      	add	sp, #8
    5bb2:	bd80      	pop	{r7, pc}
    5bb4:	20000040 	.word	0x20000040
    5bb8:	200002c8 	.word	0x200002c8
    5bbc:	00001d69 	.word	0x00001d69

00005bc0 <configure_i2c_callbacks>:

/**
 * Configures callbacks for I2C
 */
void configure_i2c_callbacks(void)
{
    5bc0:	b580      	push	{r7, lr}
    5bc2:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2c_master_instance, i2c_write_complete_callback,
    5bc4:	4906      	ldr	r1, [pc, #24]	; (5be0 <configure_i2c_callbacks+0x20>)
    5bc6:	4b07      	ldr	r3, [pc, #28]	; (5be4 <configure_i2c_callbacks+0x24>)
    5bc8:	2200      	movs	r2, #0
    5bca:	0018      	movs	r0, r3
    5bcc:	4b06      	ldr	r3, [pc, #24]	; (5be8 <configure_i2c_callbacks+0x28>)
    5bce:	4798      	blx	r3
				     I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	i2c_master_enable_callback(&i2c_master_instance,
    5bd0:	4b04      	ldr	r3, [pc, #16]	; (5be4 <configure_i2c_callbacks+0x24>)
    5bd2:	2100      	movs	r1, #0
    5bd4:	0018      	movs	r0, r3
    5bd6:	4b05      	ldr	r3, [pc, #20]	; (5bec <configure_i2c_callbacks+0x2c>)
    5bd8:	4798      	blx	r3
				   I2C_MASTER_CALLBACK_WRITE_COMPLETE);
}
    5bda:	46c0      	nop			; (mov r8, r8)
    5bdc:	46bd      	mov	sp, r7
    5bde:	bd80      	pop	{r7, pc}
    5be0:	00005b99 	.word	0x00005b99
    5be4:	200002c8 	.word	0x200002c8
    5be8:	00001bc9 	.word	0x00001bc9
    5bec:	00004d95 	.word	0x00004d95

00005bf0 <configure_usart>:
 *      @li RX Pin: PA20
 *      @li TX Pin: PA21
 *      @li SERCOM: SERCOM3
 */
void configure_usart(void)
{
    5bf0:	b580      	push	{r7, lr}
    5bf2:	b090      	sub	sp, #64	; 0x40
    5bf4:	af00      	add	r7, sp, #0
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
    5bf6:	003b      	movs	r3, r7
    5bf8:	0018      	movs	r0, r3
    5bfa:	4b13      	ldr	r3, [pc, #76]	; (5c48 <configure_usart+0x58>)
    5bfc:	4798      	blx	r3
	config_usart.baudrate = 9600;
    5bfe:	003b      	movs	r3, r7
    5c00:	2296      	movs	r2, #150	; 0x96
    5c02:	0192      	lsls	r2, r2, #6
    5c04:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    5c06:	003b      	movs	r3, r7
    5c08:	22c4      	movs	r2, #196	; 0xc4
    5c0a:	0392      	lsls	r2, r2, #14
    5c0c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    5c0e:	003b      	movs	r3, r7
    5c10:	2201      	movs	r2, #1
    5c12:	4252      	negs	r2, r2
    5c14:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    5c16:	003b      	movs	r3, r7
    5c18:	2201      	movs	r2, #1
    5c1a:	4252      	negs	r2, r2
    5c1c:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    5c1e:	003b      	movs	r3, r7
    5c20:	4a0a      	ldr	r2, [pc, #40]	; (5c4c <configure_usart+0x5c>)
    5c22:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    5c24:	003b      	movs	r3, r7
    5c26:	4a0a      	ldr	r2, [pc, #40]	; (5c50 <configure_usart+0x60>)
    5c28:	63da      	str	r2, [r3, #60]	; 0x3c
	//config_usart.pinmux_pad0 = PINMUX_UNUSED;
	//config_usart.pinmux_pad1 = PINMUX_UNUSED;
	//config_usart.pinmux_pad2 = PINMUX_PA20D_SERCOM3_PAD2;
	//config_usart.pinmux_pad3 = PINMUX_PA21D_SERCOM3_PAD3;

	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
    5c2a:	003a      	movs	r2, r7
    5c2c:	4909      	ldr	r1, [pc, #36]	; (5c54 <configure_usart+0x64>)
    5c2e:	4b0a      	ldr	r3, [pc, #40]	; (5c58 <configure_usart+0x68>)
    5c30:	0018      	movs	r0, r3
    5c32:	4b0a      	ldr	r3, [pc, #40]	; (5c5c <configure_usart+0x6c>)
    5c34:	4798      	blx	r3

	usart_enable(&usart_instance);
    5c36:	4b08      	ldr	r3, [pc, #32]	; (5c58 <configure_usart+0x68>)
    5c38:	0018      	movs	r0, r3
    5c3a:	4b09      	ldr	r3, [pc, #36]	; (5c60 <configure_usart+0x70>)
    5c3c:	4798      	blx	r3
}
    5c3e:	46c0      	nop			; (mov r8, r8)
    5c40:	46bd      	mov	sp, r7
    5c42:	b010      	add	sp, #64	; 0x40
    5c44:	bd80      	pop	{r7, pc}
    5c46:	46c0      	nop			; (mov r8, r8)
    5c48:	00004e0d 	.word	0x00004e0d
    5c4c:	002a0003 	.word	0x002a0003
    5c50:	002b0003 	.word	0x002b0003
    5c54:	42001800 	.word	0x42001800
    5c58:	20000294 	.word	0x20000294
    5c5c:	00004fb9 	.word	0x00004fb9
    5c60:	00004ecd 	.word	0x00004ecd

00005c64 <configure_adc>:
 *      @li Reference voltage: 1/2* VCC (1.65V)
 *      @li clock prescale: 16x
 * @param pin pin to read value from
 */
void configure_adc(int pin)
{
    5c64:	b580      	push	{r7, lr}
    5c66:	b08e      	sub	sp, #56	; 0x38
    5c68:	af00      	add	r7, sp, #0
    5c6a:	6078      	str	r0, [r7, #4]
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    5c6c:	2308      	movs	r3, #8
    5c6e:	18fb      	adds	r3, r7, r3
    5c70:	0018      	movs	r0, r3
    5c72:	4b0f      	ldr	r3, [pc, #60]	; (5cb0 <configure_adc+0x4c>)
    5c74:	4798      	blx	r3
	config_adc.positive_input = pin;
    5c76:	687b      	ldr	r3, [r7, #4]
    5c78:	b2da      	uxtb	r2, r3
    5c7a:	2308      	movs	r3, #8
    5c7c:	18fb      	adds	r3, r7, r3
    5c7e:	731a      	strb	r2, [r3, #12]
	config_adc.reference = ADC_REFERENCE_INTVCC1;
    5c80:	2308      	movs	r3, #8
    5c82:	18fb      	adds	r3, r7, r3
    5c84:	2202      	movs	r2, #2
    5c86:	705a      	strb	r2, [r3, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    5c88:	2308      	movs	r3, #8
    5c8a:	18fb      	adds	r3, r7, r3
    5c8c:	2280      	movs	r2, #128	; 0x80
    5c8e:	0092      	lsls	r2, r2, #2
    5c90:	805a      	strh	r2, [r3, #2]
	adc_init(&adc_instance, ADC, &config_adc);
    5c92:	2308      	movs	r3, #8
    5c94:	18fa      	adds	r2, r7, r3
    5c96:	4907      	ldr	r1, [pc, #28]	; (5cb4 <configure_adc+0x50>)
    5c98:	4b07      	ldr	r3, [pc, #28]	; (5cb8 <configure_adc+0x54>)
    5c9a:	0018      	movs	r0, r3
    5c9c:	4b07      	ldr	r3, [pc, #28]	; (5cbc <configure_adc+0x58>)
    5c9e:	4798      	blx	r3
	adc_enable(&adc_instance);
    5ca0:	4b05      	ldr	r3, [pc, #20]	; (5cb8 <configure_adc+0x54>)
    5ca2:	0018      	movs	r0, r3
    5ca4:	4b06      	ldr	r3, [pc, #24]	; (5cc0 <configure_adc+0x5c>)
    5ca6:	4798      	blx	r3
}
    5ca8:	46c0      	nop			; (mov r8, r8)
    5caa:	46bd      	mov	sp, r7
    5cac:	b00e      	add	sp, #56	; 0x38
    5cae:	bd80      	pop	{r7, pc}
    5cb0:	00000659 	.word	0x00000659
    5cb4:	42004000 	.word	0x42004000
    5cb8:	200002f0 	.word	0x200002f0
    5cbc:	00000ca9 	.word	0x00000ca9
    5cc0:	00004a31 	.word	0x00004a31

00005cc4 <configure_port_pins_set>:
/**
 * Sets a given port to output.
 * @param pin pin of the port to set
 */
void configure_port_pins_set(int pin)
{
    5cc4:	b580      	push	{r7, lr}
    5cc6:	b084      	sub	sp, #16
    5cc8:	af00      	add	r7, sp, #0
    5cca:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
    5ccc:	230c      	movs	r3, #12
    5cce:	18fb      	adds	r3, r7, r3
    5cd0:	0018      	movs	r0, r3
    5cd2:	4b09      	ldr	r3, [pc, #36]	; (5cf8 <configure_port_pins_set+0x34>)
    5cd4:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    5cd6:	230c      	movs	r3, #12
    5cd8:	18fb      	adds	r3, r7, r3
    5cda:	2201      	movs	r2, #1
    5cdc:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(pin, &config_port_pin);
    5cde:	687b      	ldr	r3, [r7, #4]
    5ce0:	b2db      	uxtb	r3, r3
    5ce2:	220c      	movs	r2, #12
    5ce4:	18ba      	adds	r2, r7, r2
    5ce6:	0011      	movs	r1, r2
    5ce8:	0018      	movs	r0, r3
    5cea:	4b04      	ldr	r3, [pc, #16]	; (5cfc <configure_port_pins_set+0x38>)
    5cec:	4798      	blx	r3
}
    5cee:	46c0      	nop			; (mov r8, r8)
    5cf0:	46bd      	mov	sp, r7
    5cf2:	b004      	add	sp, #16
    5cf4:	bd80      	pop	{r7, pc}
    5cf6:	46c0      	nop			; (mov r8, r8)
    5cf8:	00004cd9 	.word	0x00004cd9
    5cfc:	0000375d 	.word	0x0000375d

00005d00 <configure_port_pins_get>:
/**
 * Sets a given port to input
 * @param pin pin to set as input
 */
void configure_port_pins_get(int pin)
{
    5d00:	b580      	push	{r7, lr}
    5d02:	b084      	sub	sp, #16
    5d04:	af00      	add	r7, sp, #0
    5d06:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
    5d08:	230c      	movs	r3, #12
    5d0a:	18fb      	adds	r3, r7, r3
    5d0c:	0018      	movs	r0, r3
    5d0e:	4b0b      	ldr	r3, [pc, #44]	; (5d3c <configure_port_pins_get+0x3c>)
    5d10:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    5d12:	230c      	movs	r3, #12
    5d14:	18fb      	adds	r3, r7, r3
    5d16:	2200      	movs	r2, #0
    5d18:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    5d1a:	230c      	movs	r3, #12
    5d1c:	18fb      	adds	r3, r7, r3
    5d1e:	2201      	movs	r2, #1
    5d20:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(pin, &config_port_pin);
    5d22:	687b      	ldr	r3, [r7, #4]
    5d24:	b2db      	uxtb	r3, r3
    5d26:	220c      	movs	r2, #12
    5d28:	18ba      	adds	r2, r7, r2
    5d2a:	0011      	movs	r1, r2
    5d2c:	0018      	movs	r0, r3
    5d2e:	4b04      	ldr	r3, [pc, #16]	; (5d40 <configure_port_pins_get+0x40>)
    5d30:	4798      	blx	r3
}
    5d32:	46c0      	nop			; (mov r8, r8)
    5d34:	46bd      	mov	sp, r7
    5d36:	b004      	add	sp, #16
    5d38:	bd80      	pop	{r7, pc}
    5d3a:	46c0      	nop			; (mov r8, r8)
    5d3c:	00004cd9 	.word	0x00004cd9
    5d40:	0000375d 	.word	0x0000375d

00005d44 <system_interrupt_enable_global>:
{
    5d44:	b580      	push	{r7, lr}
    5d46:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    5d48:	4b04      	ldr	r3, [pc, #16]	; (5d5c <system_interrupt_enable_global+0x18>)
    5d4a:	2201      	movs	r2, #1
    5d4c:	701a      	strb	r2, [r3, #0]
    5d4e:	f3bf 8f5f 	dmb	sy
    5d52:	b662      	cpsie	i
}
    5d54:	46c0      	nop			; (mov r8, r8)
    5d56:	46bd      	mov	sp, r7
    5d58:	bd80      	pop	{r7, pc}
    5d5a:	46c0      	nop			; (mov r8, r8)
    5d5c:	20000028 	.word	0x20000028

00005d60 <processUserInput>:
 * stores user input in rx buffer read from serial
 *
 * @return  true if successful, false if error
 */
bool processUserInput(void)
{
    5d60:	b580      	push	{r7, lr}
    5d62:	b082      	sub	sp, #8
    5d64:	af00      	add	r7, sp, #0
	char singleCharInput;
	volatile enum status_code uartReadCode = usart_read_buffer_wait(&usart_instance, &singleCharInput, 1);
    5d66:	1df9      	adds	r1, r7, #7
    5d68:	4b32      	ldr	r3, [pc, #200]	; (5e34 <processUserInput+0xd4>)
    5d6a:	2201      	movs	r2, #1
    5d6c:	0018      	movs	r0, r3
    5d6e:	4b32      	ldr	r3, [pc, #200]	; (5e38 <processUserInput+0xd8>)
    5d70:	4798      	blx	r3
    5d72:	0003      	movs	r3, r0
    5d74:	001a      	movs	r2, r3
    5d76:	1dbb      	adds	r3, r7, #6
    5d78:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != uartReadCode) {
    5d7a:	1dbb      	adds	r3, r7, #6
    5d7c:	781b      	ldrb	r3, [r3, #0]
    5d7e:	b2db      	uxtb	r3, r3
    5d80:	2b00      	cmp	r3, #0
    5d82:	d001      	beq.n	5d88 <processUserInput+0x28>
		return false;
    5d84:	2300      	movs	r3, #0
    5d86:	e051      	b.n	5e2c <processUserInput+0xcc>
	}
	if (STATUS_OK == uartReadCode) {
    5d88:	1dbb      	adds	r3, r7, #6
    5d8a:	781b      	ldrb	r3, [r3, #0]
    5d8c:	b2db      	uxtb	r3, r3
    5d8e:	2b00      	cmp	r3, #0
    5d90:	d109      	bne.n	5da6 <processUserInput+0x46>
		volatile enum status_code uartWriteCode = usart_write_buffer_wait(&usart_instance, &singleCharInput, 1);
    5d92:	1df9      	adds	r1, r7, #7
    5d94:	4b27      	ldr	r3, [pc, #156]	; (5e34 <processUserInput+0xd4>)
    5d96:	2201      	movs	r2, #1
    5d98:	0018      	movs	r0, r3
    5d9a:	4b28      	ldr	r3, [pc, #160]	; (5e3c <processUserInput+0xdc>)
    5d9c:	4798      	blx	r3
    5d9e:	0003      	movs	r3, r0
    5da0:	001a      	movs	r2, r3
    5da2:	1d7b      	adds	r3, r7, #5
    5da4:	701a      	strb	r2, [r3, #0]
	}

	switch (singleCharInput) {
    5da6:	1dfb      	adds	r3, r7, #7
    5da8:	781b      	ldrb	r3, [r3, #0]
    5daa:	2b0a      	cmp	r3, #10
    5dac:	d004      	beq.n	5db8 <processUserInput+0x58>
    5dae:	2b0d      	cmp	r3, #13
    5db0:	d002      	beq.n	5db8 <processUserInput+0x58>
    5db2:	2b08      	cmp	r3, #8
    5db4:	d00f      	beq.n	5dd6 <processUserInput+0x76>
    5db6:	e01f      	b.n	5df8 <processUserInput+0x98>
	case CR:
	case LF:
		/// On carriage return (CR) or line feed (LF), the user has hit enter and it's time to process their command.
		/// Remember to null terminate your strings!  Otherwise, you could keep reading throughout memory.
		rx_buffer[numberCharsRead] = NULLCHAR;
    5db8:	4b21      	ldr	r3, [pc, #132]	; (5e40 <processUserInput+0xe0>)
    5dba:	781b      	ldrb	r3, [r3, #0]
    5dbc:	001a      	movs	r2, r3
    5dbe:	4b21      	ldr	r3, [pc, #132]	; (5e44 <processUserInput+0xe4>)
    5dc0:	2100      	movs	r1, #0
    5dc2:	5499      	strb	r1, [r3, r2]
		if (numberCharsRead > 0) {
    5dc4:	4b1e      	ldr	r3, [pc, #120]	; (5e40 <processUserInput+0xe0>)
    5dc6:	781b      	ldrb	r3, [r3, #0]
    5dc8:	2b00      	cmp	r3, #0
    5dca:	d02b      	beq.n	5e24 <processUserInput+0xc4>
			numberCharsRead = 0;
    5dcc:	4b1c      	ldr	r3, [pc, #112]	; (5e40 <processUserInput+0xe0>)
    5dce:	2200      	movs	r2, #0
    5dd0:	701a      	strb	r2, [r3, #0]
			return true;
    5dd2:	2301      	movs	r3, #1
    5dd4:	e02a      	b.n	5e2c <processUserInput+0xcc>
		}
		break;

	case BS:
		/// User input a backspace -- remove the character
		if(!numberCharsRead) //no characters written
    5dd6:	4b1a      	ldr	r3, [pc, #104]	; (5e40 <processUserInput+0xe0>)
    5dd8:	781b      	ldrb	r3, [r3, #0]
    5dda:	2b00      	cmp	r3, #0
    5ddc:	d024      	beq.n	5e28 <processUserInput+0xc8>
			break;
		numberCharsRead--;
    5dde:	4b18      	ldr	r3, [pc, #96]	; (5e40 <processUserInput+0xe0>)
    5de0:	781b      	ldrb	r3, [r3, #0]
    5de2:	3b01      	subs	r3, #1
    5de4:	b2da      	uxtb	r2, r3
    5de6:	4b16      	ldr	r3, [pc, #88]	; (5e40 <processUserInput+0xe0>)
    5de8:	701a      	strb	r2, [r3, #0]
		rx_buffer[numberCharsRead] = NULLCHAR;
    5dea:	4b15      	ldr	r3, [pc, #84]	; (5e40 <processUserInput+0xe0>)
    5dec:	781b      	ldrb	r3, [r3, #0]
    5dee:	001a      	movs	r2, r3
    5df0:	4b14      	ldr	r3, [pc, #80]	; (5e44 <processUserInput+0xe4>)
    5df2:	2100      	movs	r1, #0
    5df4:	5499      	strb	r1, [r3, r2]

		/// Feeling cheeky?  Do it all in one line
		// rx_buffer[--numberCharsRead] = NULLCHAR;
		break;
    5df6:	e018      	b.n	5e2a <processUserInput+0xca>

	default:
		/// All other cases
		if (numberCharsRead < MAX_RX_BUFFER_LENGTH)
    5df8:	4b11      	ldr	r3, [pc, #68]	; (5e40 <processUserInput+0xe0>)
    5dfa:	781b      	ldrb	r3, [r3, #0]
    5dfc:	2b63      	cmp	r3, #99	; 0x63
    5dfe:	d80a      	bhi.n	5e16 <processUserInput+0xb6>
			rx_buffer[numberCharsRead++] = singleCharInput;
    5e00:	4b0f      	ldr	r3, [pc, #60]	; (5e40 <processUserInput+0xe0>)
    5e02:	781b      	ldrb	r3, [r3, #0]
    5e04:	1c5a      	adds	r2, r3, #1
    5e06:	b2d1      	uxtb	r1, r2
    5e08:	4a0d      	ldr	r2, [pc, #52]	; (5e40 <processUserInput+0xe0>)
    5e0a:	7011      	strb	r1, [r2, #0]
    5e0c:	001a      	movs	r2, r3
    5e0e:	1dfb      	adds	r3, r7, #7
    5e10:	7819      	ldrb	r1, [r3, #0]
    5e12:	4b0c      	ldr	r3, [pc, #48]	; (5e44 <processUserInput+0xe4>)
    5e14:	5499      	strb	r1, [r3, r2]
		rx_buffer[numberCharsRead] = NULLCHAR;  ///< String read protection
    5e16:	4b0a      	ldr	r3, [pc, #40]	; (5e40 <processUserInput+0xe0>)
    5e18:	781b      	ldrb	r3, [r3, #0]
    5e1a:	001a      	movs	r2, r3
    5e1c:	4b09      	ldr	r3, [pc, #36]	; (5e44 <processUserInput+0xe4>)
    5e1e:	2100      	movs	r1, #0
    5e20:	5499      	strb	r1, [r3, r2]
		break;
    5e22:	e002      	b.n	5e2a <processUserInput+0xca>
		break;
    5e24:	46c0      	nop			; (mov r8, r8)
    5e26:	e000      	b.n	5e2a <processUserInput+0xca>
			break;
    5e28:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    5e2a:	2300      	movs	r3, #0
}
    5e2c:	0018      	movs	r0, r3
    5e2e:	46bd      	mov	sp, r7
    5e30:	b002      	add	sp, #8
    5e32:	bd80      	pop	{r7, pc}
    5e34:	20000294 	.word	0x20000294
    5e38:	00002f75 	.word	0x00002f75
    5e3c:	00002e49 	.word	0x00002e49
    5e40:	20000394 	.word	0x20000394
    5e44:	20000330 	.word	0x20000330

00005e48 <make_lowercase>:
/**
 * helper function to set string to all lowercase
 * @param str string to make all lowercase
 */
void make_lowercase(char **str)
{
    5e48:	b590      	push	{r4, r7, lr}
    5e4a:	b085      	sub	sp, #20
    5e4c:	af00      	add	r7, sp, #0
    5e4e:	6078      	str	r0, [r7, #4]
	int i = 0;
    5e50:	2300      	movs	r3, #0
    5e52:	60fb      	str	r3, [r7, #12]

	while (*(*(str) + i) != 0) {
    5e54:	e026      	b.n	5ea4 <make_lowercase+0x5c>
		*(*(str) + i) = tolower(*(*str + i));
    5e56:	687b      	ldr	r3, [r7, #4]
    5e58:	681a      	ldr	r2, [r3, #0]
    5e5a:	68fb      	ldr	r3, [r7, #12]
    5e5c:	18d4      	adds	r4, r2, r3
    5e5e:	687b      	ldr	r3, [r7, #4]
    5e60:	681a      	ldr	r2, [r3, #0]
    5e62:	68fb      	ldr	r3, [r7, #12]
    5e64:	18d2      	adds	r2, r2, r3
    5e66:	230b      	movs	r3, #11
    5e68:	18fb      	adds	r3, r7, r3
    5e6a:	7812      	ldrb	r2, [r2, #0]
    5e6c:	701a      	strb	r2, [r3, #0]
    5e6e:	4b13      	ldr	r3, [pc, #76]	; (5ebc <make_lowercase+0x74>)
    5e70:	4798      	blx	r3
    5e72:	0002      	movs	r2, r0
    5e74:	230b      	movs	r3, #11
    5e76:	18fb      	adds	r3, r7, r3
    5e78:	781b      	ldrb	r3, [r3, #0]
    5e7a:	3301      	adds	r3, #1
    5e7c:	18d3      	adds	r3, r2, r3
    5e7e:	781b      	ldrb	r3, [r3, #0]
    5e80:	001a      	movs	r2, r3
    5e82:	2303      	movs	r3, #3
    5e84:	4013      	ands	r3, r2
    5e86:	2b01      	cmp	r3, #1
    5e88:	d104      	bne.n	5e94 <make_lowercase+0x4c>
    5e8a:	230b      	movs	r3, #11
    5e8c:	18fb      	adds	r3, r7, r3
    5e8e:	781b      	ldrb	r3, [r3, #0]
    5e90:	3320      	adds	r3, #32
    5e92:	e002      	b.n	5e9a <make_lowercase+0x52>
    5e94:	230b      	movs	r3, #11
    5e96:	18fb      	adds	r3, r7, r3
    5e98:	781b      	ldrb	r3, [r3, #0]
    5e9a:	b2db      	uxtb	r3, r3
    5e9c:	7023      	strb	r3, [r4, #0]
		i++;
    5e9e:	68fb      	ldr	r3, [r7, #12]
    5ea0:	3301      	adds	r3, #1
    5ea2:	60fb      	str	r3, [r7, #12]
	while (*(*(str) + i) != 0) {
    5ea4:	687b      	ldr	r3, [r7, #4]
    5ea6:	681a      	ldr	r2, [r3, #0]
    5ea8:	68fb      	ldr	r3, [r7, #12]
    5eaa:	18d3      	adds	r3, r2, r3
    5eac:	781b      	ldrb	r3, [r3, #0]
    5eae:	2b00      	cmp	r3, #0
    5eb0:	d1d1      	bne.n	5e56 <make_lowercase+0xe>
	}
}
    5eb2:	46c0      	nop			; (mov r8, r8)
    5eb4:	46bd      	mov	sp, r7
    5eb6:	b005      	add	sp, #20
    5eb8:	bd90      	pop	{r4, r7, pc}
    5eba:	46c0      	nop			; (mov r8, r8)
    5ebc:	0000604d 	.word	0x0000604d

00005ec0 <fix_args>:

/**
 * fixes arguments and adds them to the argv buffer
 */
void fix_args()
{
    5ec0:	b580      	push	{r7, lr}
    5ec2:	b082      	sub	sp, #8
    5ec4:	af00      	add	r7, sp, #0
	char *p = strtok(rx_buffer, " "); /// NOTE: strtok destroys the input string
    5ec6:	4a15      	ldr	r2, [pc, #84]	; (5f1c <fix_args+0x5c>)
    5ec8:	4b15      	ldr	r3, [pc, #84]	; (5f20 <fix_args+0x60>)
    5eca:	0011      	movs	r1, r2
    5ecc:	0018      	movs	r0, r3
    5ece:	4b15      	ldr	r3, [pc, #84]	; (5f24 <fix_args+0x64>)
    5ed0:	4798      	blx	r3
    5ed2:	0003      	movs	r3, r0
    5ed4:	607b      	str	r3, [r7, #4]

	while (p != NULL) {
    5ed6:	e019      	b.n	5f0c <fix_args+0x4c>
		make_lowercase(&p);
    5ed8:	1d3b      	adds	r3, r7, #4
    5eda:	0018      	movs	r0, r3
    5edc:	4b12      	ldr	r3, [pc, #72]	; (5f28 <fix_args+0x68>)
    5ede:	4798      	blx	r3
		strcpy(argv[argc++], p);
    5ee0:	4b12      	ldr	r3, [pc, #72]	; (5f2c <fix_args+0x6c>)
    5ee2:	781b      	ldrb	r3, [r3, #0]
    5ee4:	1c5a      	adds	r2, r3, #1
    5ee6:	b2d1      	uxtb	r1, r2
    5ee8:	4a10      	ldr	r2, [pc, #64]	; (5f2c <fix_args+0x6c>)
    5eea:	7011      	strb	r1, [r2, #0]
    5eec:	001a      	movs	r2, r3
    5eee:	4b10      	ldr	r3, [pc, #64]	; (5f30 <fix_args+0x70>)
    5ef0:	0092      	lsls	r2, r2, #2
    5ef2:	58d3      	ldr	r3, [r2, r3]
    5ef4:	687a      	ldr	r2, [r7, #4]
    5ef6:	0011      	movs	r1, r2
    5ef8:	0018      	movs	r0, r3
    5efa:	4b0e      	ldr	r3, [pc, #56]	; (5f34 <fix_args+0x74>)
    5efc:	4798      	blx	r3
		p = strtok(NULL, " ");
    5efe:	4b07      	ldr	r3, [pc, #28]	; (5f1c <fix_args+0x5c>)
    5f00:	0019      	movs	r1, r3
    5f02:	2000      	movs	r0, #0
    5f04:	4b07      	ldr	r3, [pc, #28]	; (5f24 <fix_args+0x64>)
    5f06:	4798      	blx	r3
    5f08:	0003      	movs	r3, r0
    5f0a:	607b      	str	r3, [r7, #4]
	while (p != NULL) {
    5f0c:	687b      	ldr	r3, [r7, #4]
    5f0e:	2b00      	cmp	r3, #0
    5f10:	d1e2      	bne.n	5ed8 <fix_args+0x18>
	}
}
    5f12:	46c0      	nop			; (mov r8, r8)
    5f14:	46bd      	mov	sp, r7
    5f16:	b002      	add	sp, #8
    5f18:	bd80      	pop	{r7, pc}
    5f1a:	46c0      	nop			; (mov r8, r8)
    5f1c:	0000b4b0 	.word	0x0000b4b0
    5f20:	20000330 	.word	0x20000330
    5f24:	00006dc1 	.word	0x00006dc1
    5f28:	00005e49 	.word	0x00005e49
    5f2c:	2000032c 	.word	0x2000032c
    5f30:	2000031c 	.word	0x2000031c
    5f34:	00006da1 	.word	0x00006da1

00005f38 <main>:


int main(void)
{
    5f38:	b590      	push	{r4, r7, lr}
    5f3a:	b083      	sub	sp, #12
    5f3c:	af00      	add	r7, sp, #0
	system_init();
    5f3e:	4b1e      	ldr	r3, [pc, #120]	; (5fb8 <main+0x80>)
    5f40:	4798      	blx	r3
	system_interrupt_enable_global();
    5f42:	4b1e      	ldr	r3, [pc, #120]	; (5fbc <main+0x84>)
    5f44:	4798      	blx	r3
	delay_init();
    5f46:	4b1e      	ldr	r3, [pc, #120]	; (5fc0 <main+0x88>)
    5f48:	4798      	blx	r3

	configure_usart();
    5f4a:	4b1e      	ldr	r3, [pc, #120]	; (5fc4 <main+0x8c>)
    5f4c:	4798      	blx	r3
	
	for (int i = 0; i < MAX_ARGS; i++)
    5f4e:	2300      	movs	r3, #0
    5f50:	607b      	str	r3, [r7, #4]
    5f52:	e00b      	b.n	5f6c <main+0x34>
		argv[i] = malloc(sizeof(char) * MAX_ARG_LENGTH);
    5f54:	2019      	movs	r0, #25
    5f56:	4b1c      	ldr	r3, [pc, #112]	; (5fc8 <main+0x90>)
    5f58:	4798      	blx	r3
    5f5a:	0003      	movs	r3, r0
    5f5c:	0019      	movs	r1, r3
    5f5e:	4b1b      	ldr	r3, [pc, #108]	; (5fcc <main+0x94>)
    5f60:	687a      	ldr	r2, [r7, #4]
    5f62:	0092      	lsls	r2, r2, #2
    5f64:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < MAX_ARGS; i++)
    5f66:	687b      	ldr	r3, [r7, #4]
    5f68:	3301      	adds	r3, #1
    5f6a:	607b      	str	r3, [r7, #4]
    5f6c:	687b      	ldr	r3, [r7, #4]
    5f6e:	2b03      	cmp	r3, #3
    5f70:	ddf0      	ble.n	5f54 <main+0x1c>

	//TODO: print version information
	printf("Welcome to the Evergreen CLI.\r\n");
    5f72:	4b17      	ldr	r3, [pc, #92]	; (5fd0 <main+0x98>)
    5f74:	0018      	movs	r0, r3
    5f76:	4b17      	ldr	r3, [pc, #92]	; (5fd4 <main+0x9c>)
    5f78:	4798      	blx	r3
	printf("> ");
    5f7a:	4b17      	ldr	r3, [pc, #92]	; (5fd8 <main+0xa0>)
    5f7c:	0018      	movs	r0, r3
    5f7e:	4b17      	ldr	r3, [pc, #92]	; (5fdc <main+0xa4>)
    5f80:	4798      	blx	r3
	while (1) {
		bool commandEntered = processUserInput();
    5f82:	1cfc      	adds	r4, r7, #3
    5f84:	4b16      	ldr	r3, [pc, #88]	; (5fe0 <main+0xa8>)
    5f86:	4798      	blx	r3
    5f88:	0003      	movs	r3, r0
    5f8a:	7023      	strb	r3, [r4, #0]
		if (commandEntered) {
    5f8c:	1cfb      	adds	r3, r7, #3
    5f8e:	781b      	ldrb	r3, [r3, #0]
    5f90:	2b00      	cmp	r3, #0
    5f92:	d0f6      	beq.n	5f82 <main+0x4a>
			fix_args();
    5f94:	4b13      	ldr	r3, [pc, #76]	; (5fe4 <main+0xac>)
    5f96:	4798      	blx	r3
			input_handle(argc, argv); //fix
    5f98:	4b13      	ldr	r3, [pc, #76]	; (5fe8 <main+0xb0>)
    5f9a:	781b      	ldrb	r3, [r3, #0]
    5f9c:	001a      	movs	r2, r3
    5f9e:	4b0b      	ldr	r3, [pc, #44]	; (5fcc <main+0x94>)
    5fa0:	0019      	movs	r1, r3
    5fa2:	0010      	movs	r0, r2
    5fa4:	4b11      	ldr	r3, [pc, #68]	; (5fec <main+0xb4>)
    5fa6:	4798      	blx	r3
			argc = 0;
    5fa8:	4b0f      	ldr	r3, [pc, #60]	; (5fe8 <main+0xb0>)
    5faa:	2200      	movs	r2, #0
    5fac:	701a      	strb	r2, [r3, #0]
			printf("> ");
    5fae:	4b0a      	ldr	r3, [pc, #40]	; (5fd8 <main+0xa0>)
    5fb0:	0018      	movs	r0, r3
    5fb2:	4b0a      	ldr	r3, [pc, #40]	; (5fdc <main+0xa4>)
    5fb4:	4798      	blx	r3
	while (1) {
    5fb6:	e7e4      	b.n	5f82 <main+0x4a>
    5fb8:	00004739 	.word	0x00004739
    5fbc:	00005d45 	.word	0x00005d45
    5fc0:	000004fd 	.word	0x000004fd
    5fc4:	00005bf1 	.word	0x00005bf1
    5fc8:	00006069 	.word	0x00006069
    5fcc:	2000031c 	.word	0x2000031c
    5fd0:	0000b4b4 	.word	0x0000b4b4
    5fd4:	00006be9 	.word	0x00006be9
    5fd8:	0000b4d4 	.word	0x0000b4d4
    5fdc:	00006af5 	.word	0x00006af5
    5fe0:	00005d61 	.word	0x00005d61
    5fe4:	00005ec1 	.word	0x00005ec1
    5fe8:	2000032c 	.word	0x2000032c
    5fec:	00005671 	.word	0x00005671

00005ff0 <atoi>:
    5ff0:	b510      	push	{r4, lr}
    5ff2:	220a      	movs	r2, #10
    5ff4:	2100      	movs	r1, #0
    5ff6:	f000 ffbf 	bl	6f78 <strtol>
    5ffa:	bd10      	pop	{r4, pc}

00005ffc <__libc_init_array>:
    5ffc:	b570      	push	{r4, r5, r6, lr}
    5ffe:	2600      	movs	r6, #0
    6000:	4d0c      	ldr	r5, [pc, #48]	; (6034 <__libc_init_array+0x38>)
    6002:	4c0d      	ldr	r4, [pc, #52]	; (6038 <__libc_init_array+0x3c>)
    6004:	1b64      	subs	r4, r4, r5
    6006:	10a4      	asrs	r4, r4, #2
    6008:	42a6      	cmp	r6, r4
    600a:	d109      	bne.n	6020 <__libc_init_array+0x24>
    600c:	2600      	movs	r6, #0
    600e:	f005 fc03 	bl	b818 <_init>
    6012:	4d0a      	ldr	r5, [pc, #40]	; (603c <__libc_init_array+0x40>)
    6014:	4c0a      	ldr	r4, [pc, #40]	; (6040 <__libc_init_array+0x44>)
    6016:	1b64      	subs	r4, r4, r5
    6018:	10a4      	asrs	r4, r4, #2
    601a:	42a6      	cmp	r6, r4
    601c:	d105      	bne.n	602a <__libc_init_array+0x2e>
    601e:	bd70      	pop	{r4, r5, r6, pc}
    6020:	00b3      	lsls	r3, r6, #2
    6022:	58eb      	ldr	r3, [r5, r3]
    6024:	4798      	blx	r3
    6026:	3601      	adds	r6, #1
    6028:	e7ee      	b.n	6008 <__libc_init_array+0xc>
    602a:	00b3      	lsls	r3, r6, #2
    602c:	58eb      	ldr	r3, [r5, r3]
    602e:	4798      	blx	r3
    6030:	3601      	adds	r6, #1
    6032:	e7f2      	b.n	601a <__libc_init_array+0x1e>
    6034:	0000b824 	.word	0x0000b824
    6038:	0000b824 	.word	0x0000b824
    603c:	0000b824 	.word	0x0000b824
    6040:	0000b828 	.word	0x0000b828

00006044 <__locale_ctype_ptr_l>:
    6044:	30ec      	adds	r0, #236	; 0xec
    6046:	6800      	ldr	r0, [r0, #0]
    6048:	4770      	bx	lr
	...

0000604c <__locale_ctype_ptr>:
    604c:	4b04      	ldr	r3, [pc, #16]	; (6060 <__locale_ctype_ptr+0x14>)
    604e:	681b      	ldr	r3, [r3, #0]
    6050:	6a1b      	ldr	r3, [r3, #32]
    6052:	2b00      	cmp	r3, #0
    6054:	d100      	bne.n	6058 <__locale_ctype_ptr+0xc>
    6056:	4b03      	ldr	r3, [pc, #12]	; (6064 <__locale_ctype_ptr+0x18>)
    6058:	33ec      	adds	r3, #236	; 0xec
    605a:	6818      	ldr	r0, [r3, #0]
    605c:	4770      	bx	lr
    605e:	46c0      	nop			; (mov r8, r8)
    6060:	2000004c 	.word	0x2000004c
    6064:	200000b0 	.word	0x200000b0

00006068 <malloc>:
    6068:	b510      	push	{r4, lr}
    606a:	4b03      	ldr	r3, [pc, #12]	; (6078 <malloc+0x10>)
    606c:	0001      	movs	r1, r0
    606e:	6818      	ldr	r0, [r3, #0]
    6070:	f000 f872 	bl	6158 <_malloc_r>
    6074:	bd10      	pop	{r4, pc}
    6076:	46c0      	nop			; (mov r8, r8)
    6078:	2000004c 	.word	0x2000004c

0000607c <__ascii_mbtowc>:
    607c:	b082      	sub	sp, #8
    607e:	2900      	cmp	r1, #0
    6080:	d100      	bne.n	6084 <__ascii_mbtowc+0x8>
    6082:	a901      	add	r1, sp, #4
    6084:	1e10      	subs	r0, r2, #0
    6086:	d006      	beq.n	6096 <__ascii_mbtowc+0x1a>
    6088:	2b00      	cmp	r3, #0
    608a:	d006      	beq.n	609a <__ascii_mbtowc+0x1e>
    608c:	7813      	ldrb	r3, [r2, #0]
    608e:	600b      	str	r3, [r1, #0]
    6090:	7810      	ldrb	r0, [r2, #0]
    6092:	1e43      	subs	r3, r0, #1
    6094:	4198      	sbcs	r0, r3
    6096:	b002      	add	sp, #8
    6098:	4770      	bx	lr
    609a:	2002      	movs	r0, #2
    609c:	4240      	negs	r0, r0
    609e:	e7fa      	b.n	6096 <__ascii_mbtowc+0x1a>

000060a0 <memcpy>:
    60a0:	2300      	movs	r3, #0
    60a2:	b510      	push	{r4, lr}
    60a4:	429a      	cmp	r2, r3
    60a6:	d100      	bne.n	60aa <memcpy+0xa>
    60a8:	bd10      	pop	{r4, pc}
    60aa:	5ccc      	ldrb	r4, [r1, r3]
    60ac:	54c4      	strb	r4, [r0, r3]
    60ae:	3301      	adds	r3, #1
    60b0:	e7f8      	b.n	60a4 <memcpy+0x4>

000060b2 <memset>:
    60b2:	0003      	movs	r3, r0
    60b4:	1882      	adds	r2, r0, r2
    60b6:	4293      	cmp	r3, r2
    60b8:	d100      	bne.n	60bc <memset+0xa>
    60ba:	4770      	bx	lr
    60bc:	7019      	strb	r1, [r3, #0]
    60be:	3301      	adds	r3, #1
    60c0:	e7f9      	b.n	60b6 <memset+0x4>
	...

000060c4 <_free_r>:
    60c4:	b570      	push	{r4, r5, r6, lr}
    60c6:	0005      	movs	r5, r0
    60c8:	2900      	cmp	r1, #0
    60ca:	d010      	beq.n	60ee <_free_r+0x2a>
    60cc:	1f0c      	subs	r4, r1, #4
    60ce:	6823      	ldr	r3, [r4, #0]
    60d0:	2b00      	cmp	r3, #0
    60d2:	da00      	bge.n	60d6 <_free_r+0x12>
    60d4:	18e4      	adds	r4, r4, r3
    60d6:	0028      	movs	r0, r5
    60d8:	f002 f8b7 	bl	824a <__malloc_lock>
    60dc:	4a1d      	ldr	r2, [pc, #116]	; (6154 <_free_r+0x90>)
    60de:	6813      	ldr	r3, [r2, #0]
    60e0:	2b00      	cmp	r3, #0
    60e2:	d105      	bne.n	60f0 <_free_r+0x2c>
    60e4:	6063      	str	r3, [r4, #4]
    60e6:	6014      	str	r4, [r2, #0]
    60e8:	0028      	movs	r0, r5
    60ea:	f002 f8af 	bl	824c <__malloc_unlock>
    60ee:	bd70      	pop	{r4, r5, r6, pc}
    60f0:	42a3      	cmp	r3, r4
    60f2:	d909      	bls.n	6108 <_free_r+0x44>
    60f4:	6821      	ldr	r1, [r4, #0]
    60f6:	1860      	adds	r0, r4, r1
    60f8:	4283      	cmp	r3, r0
    60fa:	d1f3      	bne.n	60e4 <_free_r+0x20>
    60fc:	6818      	ldr	r0, [r3, #0]
    60fe:	685b      	ldr	r3, [r3, #4]
    6100:	1841      	adds	r1, r0, r1
    6102:	6021      	str	r1, [r4, #0]
    6104:	e7ee      	b.n	60e4 <_free_r+0x20>
    6106:	0013      	movs	r3, r2
    6108:	685a      	ldr	r2, [r3, #4]
    610a:	2a00      	cmp	r2, #0
    610c:	d001      	beq.n	6112 <_free_r+0x4e>
    610e:	42a2      	cmp	r2, r4
    6110:	d9f9      	bls.n	6106 <_free_r+0x42>
    6112:	6819      	ldr	r1, [r3, #0]
    6114:	1858      	adds	r0, r3, r1
    6116:	42a0      	cmp	r0, r4
    6118:	d10b      	bne.n	6132 <_free_r+0x6e>
    611a:	6820      	ldr	r0, [r4, #0]
    611c:	1809      	adds	r1, r1, r0
    611e:	1858      	adds	r0, r3, r1
    6120:	6019      	str	r1, [r3, #0]
    6122:	4282      	cmp	r2, r0
    6124:	d1e0      	bne.n	60e8 <_free_r+0x24>
    6126:	6810      	ldr	r0, [r2, #0]
    6128:	6852      	ldr	r2, [r2, #4]
    612a:	1841      	adds	r1, r0, r1
    612c:	6019      	str	r1, [r3, #0]
    612e:	605a      	str	r2, [r3, #4]
    6130:	e7da      	b.n	60e8 <_free_r+0x24>
    6132:	42a0      	cmp	r0, r4
    6134:	d902      	bls.n	613c <_free_r+0x78>
    6136:	230c      	movs	r3, #12
    6138:	602b      	str	r3, [r5, #0]
    613a:	e7d5      	b.n	60e8 <_free_r+0x24>
    613c:	6821      	ldr	r1, [r4, #0]
    613e:	1860      	adds	r0, r4, r1
    6140:	4282      	cmp	r2, r0
    6142:	d103      	bne.n	614c <_free_r+0x88>
    6144:	6810      	ldr	r0, [r2, #0]
    6146:	6852      	ldr	r2, [r2, #4]
    6148:	1841      	adds	r1, r0, r1
    614a:	6021      	str	r1, [r4, #0]
    614c:	6062      	str	r2, [r4, #4]
    614e:	605c      	str	r4, [r3, #4]
    6150:	e7ca      	b.n	60e8 <_free_r+0x24>
    6152:	46c0      	nop			; (mov r8, r8)
    6154:	2000028c 	.word	0x2000028c

00006158 <_malloc_r>:
    6158:	2303      	movs	r3, #3
    615a:	b570      	push	{r4, r5, r6, lr}
    615c:	1ccd      	adds	r5, r1, #3
    615e:	439d      	bics	r5, r3
    6160:	3508      	adds	r5, #8
    6162:	0006      	movs	r6, r0
    6164:	2d0c      	cmp	r5, #12
    6166:	d21e      	bcs.n	61a6 <_malloc_r+0x4e>
    6168:	250c      	movs	r5, #12
    616a:	42a9      	cmp	r1, r5
    616c:	d81d      	bhi.n	61aa <_malloc_r+0x52>
    616e:	0030      	movs	r0, r6
    6170:	f002 f86b 	bl	824a <__malloc_lock>
    6174:	4a25      	ldr	r2, [pc, #148]	; (620c <_malloc_r+0xb4>)
    6176:	6814      	ldr	r4, [r2, #0]
    6178:	0021      	movs	r1, r4
    617a:	2900      	cmp	r1, #0
    617c:	d119      	bne.n	61b2 <_malloc_r+0x5a>
    617e:	4c24      	ldr	r4, [pc, #144]	; (6210 <_malloc_r+0xb8>)
    6180:	6823      	ldr	r3, [r4, #0]
    6182:	2b00      	cmp	r3, #0
    6184:	d103      	bne.n	618e <_malloc_r+0x36>
    6186:	0030      	movs	r0, r6
    6188:	f000 fd38 	bl	6bfc <_sbrk_r>
    618c:	6020      	str	r0, [r4, #0]
    618e:	0029      	movs	r1, r5
    6190:	0030      	movs	r0, r6
    6192:	f000 fd33 	bl	6bfc <_sbrk_r>
    6196:	1c43      	adds	r3, r0, #1
    6198:	d12c      	bne.n	61f4 <_malloc_r+0x9c>
    619a:	230c      	movs	r3, #12
    619c:	0030      	movs	r0, r6
    619e:	6033      	str	r3, [r6, #0]
    61a0:	f002 f854 	bl	824c <__malloc_unlock>
    61a4:	e003      	b.n	61ae <_malloc_r+0x56>
    61a6:	2d00      	cmp	r5, #0
    61a8:	dadf      	bge.n	616a <_malloc_r+0x12>
    61aa:	230c      	movs	r3, #12
    61ac:	6033      	str	r3, [r6, #0]
    61ae:	2000      	movs	r0, #0
    61b0:	bd70      	pop	{r4, r5, r6, pc}
    61b2:	680b      	ldr	r3, [r1, #0]
    61b4:	1b5b      	subs	r3, r3, r5
    61b6:	d41a      	bmi.n	61ee <_malloc_r+0x96>
    61b8:	2b0b      	cmp	r3, #11
    61ba:	d903      	bls.n	61c4 <_malloc_r+0x6c>
    61bc:	600b      	str	r3, [r1, #0]
    61be:	18cc      	adds	r4, r1, r3
    61c0:	6025      	str	r5, [r4, #0]
    61c2:	e003      	b.n	61cc <_malloc_r+0x74>
    61c4:	428c      	cmp	r4, r1
    61c6:	d10e      	bne.n	61e6 <_malloc_r+0x8e>
    61c8:	6863      	ldr	r3, [r4, #4]
    61ca:	6013      	str	r3, [r2, #0]
    61cc:	0030      	movs	r0, r6
    61ce:	f002 f83d 	bl	824c <__malloc_unlock>
    61d2:	0020      	movs	r0, r4
    61d4:	2207      	movs	r2, #7
    61d6:	300b      	adds	r0, #11
    61d8:	1d23      	adds	r3, r4, #4
    61da:	4390      	bics	r0, r2
    61dc:	1ac3      	subs	r3, r0, r3
    61de:	d0e7      	beq.n	61b0 <_malloc_r+0x58>
    61e0:	425a      	negs	r2, r3
    61e2:	50e2      	str	r2, [r4, r3]
    61e4:	e7e4      	b.n	61b0 <_malloc_r+0x58>
    61e6:	684b      	ldr	r3, [r1, #4]
    61e8:	6063      	str	r3, [r4, #4]
    61ea:	000c      	movs	r4, r1
    61ec:	e7ee      	b.n	61cc <_malloc_r+0x74>
    61ee:	000c      	movs	r4, r1
    61f0:	6849      	ldr	r1, [r1, #4]
    61f2:	e7c2      	b.n	617a <_malloc_r+0x22>
    61f4:	2303      	movs	r3, #3
    61f6:	1cc4      	adds	r4, r0, #3
    61f8:	439c      	bics	r4, r3
    61fa:	42a0      	cmp	r0, r4
    61fc:	d0e0      	beq.n	61c0 <_malloc_r+0x68>
    61fe:	1a21      	subs	r1, r4, r0
    6200:	0030      	movs	r0, r6
    6202:	f000 fcfb 	bl	6bfc <_sbrk_r>
    6206:	1c43      	adds	r3, r0, #1
    6208:	d1da      	bne.n	61c0 <_malloc_r+0x68>
    620a:	e7c6      	b.n	619a <_malloc_r+0x42>
    620c:	2000028c 	.word	0x2000028c
    6210:	20000290 	.word	0x20000290

00006214 <__cvt>:
    6214:	b5f0      	push	{r4, r5, r6, r7, lr}
    6216:	b08b      	sub	sp, #44	; 0x2c
    6218:	0014      	movs	r4, r2
    621a:	1e1d      	subs	r5, r3, #0
    621c:	9912      	ldr	r1, [sp, #72]	; 0x48
    621e:	da53      	bge.n	62c8 <__cvt+0xb4>
    6220:	2480      	movs	r4, #128	; 0x80
    6222:	0624      	lsls	r4, r4, #24
    6224:	191b      	adds	r3, r3, r4
    6226:	001d      	movs	r5, r3
    6228:	0014      	movs	r4, r2
    622a:	232d      	movs	r3, #45	; 0x2d
    622c:	700b      	strb	r3, [r1, #0]
    622e:	2320      	movs	r3, #32
    6230:	9e14      	ldr	r6, [sp, #80]	; 0x50
    6232:	2203      	movs	r2, #3
    6234:	439e      	bics	r6, r3
    6236:	2e46      	cmp	r6, #70	; 0x46
    6238:	d007      	beq.n	624a <__cvt+0x36>
    623a:	0033      	movs	r3, r6
    623c:	3b45      	subs	r3, #69	; 0x45
    623e:	4259      	negs	r1, r3
    6240:	414b      	adcs	r3, r1
    6242:	9910      	ldr	r1, [sp, #64]	; 0x40
    6244:	3a01      	subs	r2, #1
    6246:	18cb      	adds	r3, r1, r3
    6248:	9310      	str	r3, [sp, #64]	; 0x40
    624a:	ab09      	add	r3, sp, #36	; 0x24
    624c:	9304      	str	r3, [sp, #16]
    624e:	ab08      	add	r3, sp, #32
    6250:	9303      	str	r3, [sp, #12]
    6252:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6254:	9200      	str	r2, [sp, #0]
    6256:	9302      	str	r3, [sp, #8]
    6258:	9b10      	ldr	r3, [sp, #64]	; 0x40
    625a:	0022      	movs	r2, r4
    625c:	9301      	str	r3, [sp, #4]
    625e:	002b      	movs	r3, r5
    6260:	f000 fffa 	bl	7258 <_dtoa_r>
    6264:	0007      	movs	r7, r0
    6266:	2e47      	cmp	r6, #71	; 0x47
    6268:	d102      	bne.n	6270 <__cvt+0x5c>
    626a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    626c:	07db      	lsls	r3, r3, #31
    626e:	d524      	bpl.n	62ba <__cvt+0xa6>
    6270:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6272:	18fb      	adds	r3, r7, r3
    6274:	9307      	str	r3, [sp, #28]
    6276:	2e46      	cmp	r6, #70	; 0x46
    6278:	d114      	bne.n	62a4 <__cvt+0x90>
    627a:	783b      	ldrb	r3, [r7, #0]
    627c:	2b30      	cmp	r3, #48	; 0x30
    627e:	d10c      	bne.n	629a <__cvt+0x86>
    6280:	2200      	movs	r2, #0
    6282:	2300      	movs	r3, #0
    6284:	0020      	movs	r0, r4
    6286:	0029      	movs	r1, r5
    6288:	f002 fe64 	bl	8f54 <__aeabi_dcmpeq>
    628c:	2800      	cmp	r0, #0
    628e:	d104      	bne.n	629a <__cvt+0x86>
    6290:	2301      	movs	r3, #1
    6292:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6294:	1a9b      	subs	r3, r3, r2
    6296:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6298:	6013      	str	r3, [r2, #0]
    629a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    629c:	9a07      	ldr	r2, [sp, #28]
    629e:	681b      	ldr	r3, [r3, #0]
    62a0:	18d3      	adds	r3, r2, r3
    62a2:	9307      	str	r3, [sp, #28]
    62a4:	2200      	movs	r2, #0
    62a6:	2300      	movs	r3, #0
    62a8:	0020      	movs	r0, r4
    62aa:	0029      	movs	r1, r5
    62ac:	f002 fe52 	bl	8f54 <__aeabi_dcmpeq>
    62b0:	2230      	movs	r2, #48	; 0x30
    62b2:	2800      	cmp	r0, #0
    62b4:	d00d      	beq.n	62d2 <__cvt+0xbe>
    62b6:	9b07      	ldr	r3, [sp, #28]
    62b8:	9309      	str	r3, [sp, #36]	; 0x24
    62ba:	0038      	movs	r0, r7
    62bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    62be:	9a15      	ldr	r2, [sp, #84]	; 0x54
    62c0:	1bdb      	subs	r3, r3, r7
    62c2:	6013      	str	r3, [r2, #0]
    62c4:	b00b      	add	sp, #44	; 0x2c
    62c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62c8:	2300      	movs	r3, #0
    62ca:	e7af      	b.n	622c <__cvt+0x18>
    62cc:	1c59      	adds	r1, r3, #1
    62ce:	9109      	str	r1, [sp, #36]	; 0x24
    62d0:	701a      	strb	r2, [r3, #0]
    62d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    62d4:	9907      	ldr	r1, [sp, #28]
    62d6:	4299      	cmp	r1, r3
    62d8:	d8f8      	bhi.n	62cc <__cvt+0xb8>
    62da:	e7ee      	b.n	62ba <__cvt+0xa6>

000062dc <__exponent>:
    62dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    62de:	232b      	movs	r3, #43	; 0x2b
    62e0:	b085      	sub	sp, #20
    62e2:	0007      	movs	r7, r0
    62e4:	000c      	movs	r4, r1
    62e6:	7002      	strb	r2, [r0, #0]
    62e8:	1c86      	adds	r6, r0, #2
    62ea:	2900      	cmp	r1, #0
    62ec:	da01      	bge.n	62f2 <__exponent+0x16>
    62ee:	232d      	movs	r3, #45	; 0x2d
    62f0:	424c      	negs	r4, r1
    62f2:	707b      	strb	r3, [r7, #1]
    62f4:	2c09      	cmp	r4, #9
    62f6:	dd23      	ble.n	6340 <__exponent+0x64>
    62f8:	ab02      	add	r3, sp, #8
    62fa:	1ddd      	adds	r5, r3, #7
    62fc:	1e6b      	subs	r3, r5, #1
    62fe:	0020      	movs	r0, r4
    6300:	210a      	movs	r1, #10
    6302:	9301      	str	r3, [sp, #4]
    6304:	f002 fe10 	bl	8f28 <__aeabi_idivmod>
    6308:	1e6b      	subs	r3, r5, #1
    630a:	3130      	adds	r1, #48	; 0x30
    630c:	7019      	strb	r1, [r3, #0]
    630e:	0020      	movs	r0, r4
    6310:	210a      	movs	r1, #10
    6312:	f002 fd23 	bl	8d5c <__divsi3>
    6316:	0004      	movs	r4, r0
    6318:	2809      	cmp	r0, #9
    631a:	dc0a      	bgt.n	6332 <__exponent+0x56>
    631c:	3d02      	subs	r5, #2
    631e:	3430      	adds	r4, #48	; 0x30
    6320:	702c      	strb	r4, [r5, #0]
    6322:	ab02      	add	r3, sp, #8
    6324:	3307      	adds	r3, #7
    6326:	0030      	movs	r0, r6
    6328:	42ab      	cmp	r3, r5
    632a:	d804      	bhi.n	6336 <__exponent+0x5a>
    632c:	1bc0      	subs	r0, r0, r7
    632e:	b005      	add	sp, #20
    6330:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6332:	9d01      	ldr	r5, [sp, #4]
    6334:	e7e2      	b.n	62fc <__exponent+0x20>
    6336:	782b      	ldrb	r3, [r5, #0]
    6338:	3501      	adds	r5, #1
    633a:	7033      	strb	r3, [r6, #0]
    633c:	3601      	adds	r6, #1
    633e:	e7f0      	b.n	6322 <__exponent+0x46>
    6340:	2330      	movs	r3, #48	; 0x30
    6342:	18e4      	adds	r4, r4, r3
    6344:	7033      	strb	r3, [r6, #0]
    6346:	1cb0      	adds	r0, r6, #2
    6348:	7074      	strb	r4, [r6, #1]
    634a:	e7ef      	b.n	632c <__exponent+0x50>

0000634c <_printf_float>:
    634c:	b5f0      	push	{r4, r5, r6, r7, lr}
    634e:	b095      	sub	sp, #84	; 0x54
    6350:	000c      	movs	r4, r1
    6352:	920a      	str	r2, [sp, #40]	; 0x28
    6354:	930b      	str	r3, [sp, #44]	; 0x2c
    6356:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    6358:	9009      	str	r0, [sp, #36]	; 0x24
    635a:	f001 fef3 	bl	8144 <_localeconv_r>
    635e:	6803      	ldr	r3, [r0, #0]
    6360:	0018      	movs	r0, r3
    6362:	930d      	str	r3, [sp, #52]	; 0x34
    6364:	f000 fd24 	bl	6db0 <strlen>
    6368:	2300      	movs	r3, #0
    636a:	9312      	str	r3, [sp, #72]	; 0x48
    636c:	6823      	ldr	r3, [r4, #0]
    636e:	900e      	str	r0, [sp, #56]	; 0x38
    6370:	930c      	str	r3, [sp, #48]	; 0x30
    6372:	990c      	ldr	r1, [sp, #48]	; 0x30
    6374:	7e27      	ldrb	r7, [r4, #24]
    6376:	682b      	ldr	r3, [r5, #0]
    6378:	2207      	movs	r2, #7
    637a:	05c9      	lsls	r1, r1, #23
    637c:	d547      	bpl.n	640e <_printf_float+0xc2>
    637e:	189b      	adds	r3, r3, r2
    6380:	4393      	bics	r3, r2
    6382:	001a      	movs	r2, r3
    6384:	3208      	adds	r2, #8
    6386:	602a      	str	r2, [r5, #0]
    6388:	681a      	ldr	r2, [r3, #0]
    638a:	685b      	ldr	r3, [r3, #4]
    638c:	64a2      	str	r2, [r4, #72]	; 0x48
    638e:	64e3      	str	r3, [r4, #76]	; 0x4c
    6390:	2201      	movs	r2, #1
    6392:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    6394:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    6396:	006b      	lsls	r3, r5, #1
    6398:	085b      	lsrs	r3, r3, #1
    639a:	930f      	str	r3, [sp, #60]	; 0x3c
    639c:	4252      	negs	r2, r2
    639e:	4ba7      	ldr	r3, [pc, #668]	; (663c <_printf_float+0x2f0>)
    63a0:	0030      	movs	r0, r6
    63a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    63a4:	f004 fb08 	bl	a9b8 <__aeabi_dcmpun>
    63a8:	2800      	cmp	r0, #0
    63aa:	d000      	beq.n	63ae <_printf_float+0x62>
    63ac:	e206      	b.n	67bc <_printf_float+0x470>
    63ae:	2201      	movs	r2, #1
    63b0:	4ba2      	ldr	r3, [pc, #648]	; (663c <_printf_float+0x2f0>)
    63b2:	4252      	negs	r2, r2
    63b4:	0030      	movs	r0, r6
    63b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    63b8:	f002 fddc 	bl	8f74 <__aeabi_dcmple>
    63bc:	2800      	cmp	r0, #0
    63be:	d000      	beq.n	63c2 <_printf_float+0x76>
    63c0:	e1fc      	b.n	67bc <_printf_float+0x470>
    63c2:	2200      	movs	r2, #0
    63c4:	2300      	movs	r3, #0
    63c6:	0030      	movs	r0, r6
    63c8:	0029      	movs	r1, r5
    63ca:	f002 fdc9 	bl	8f60 <__aeabi_dcmplt>
    63ce:	2800      	cmp	r0, #0
    63d0:	d003      	beq.n	63da <_printf_float+0x8e>
    63d2:	0023      	movs	r3, r4
    63d4:	222d      	movs	r2, #45	; 0x2d
    63d6:	3343      	adds	r3, #67	; 0x43
    63d8:	701a      	strb	r2, [r3, #0]
    63da:	4d99      	ldr	r5, [pc, #612]	; (6640 <_printf_float+0x2f4>)
    63dc:	2f47      	cmp	r7, #71	; 0x47
    63de:	d800      	bhi.n	63e2 <_printf_float+0x96>
    63e0:	4d98      	ldr	r5, [pc, #608]	; (6644 <_printf_float+0x2f8>)
    63e2:	2303      	movs	r3, #3
    63e4:	2600      	movs	r6, #0
    63e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    63e8:	6123      	str	r3, [r4, #16]
    63ea:	3301      	adds	r3, #1
    63ec:	439a      	bics	r2, r3
    63ee:	6022      	str	r2, [r4, #0]
    63f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    63f2:	aa13      	add	r2, sp, #76	; 0x4c
    63f4:	9300      	str	r3, [sp, #0]
    63f6:	0021      	movs	r1, r4
    63f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    63fa:	9809      	ldr	r0, [sp, #36]	; 0x24
    63fc:	f000 f9f2 	bl	67e4 <_printf_common>
    6400:	1c43      	adds	r3, r0, #1
    6402:	d000      	beq.n	6406 <_printf_float+0xba>
    6404:	e09c      	b.n	6540 <_printf_float+0x1f4>
    6406:	2001      	movs	r0, #1
    6408:	4240      	negs	r0, r0
    640a:	b015      	add	sp, #84	; 0x54
    640c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    640e:	3307      	adds	r3, #7
    6410:	e7b6      	b.n	6380 <_printf_float+0x34>
    6412:	2380      	movs	r3, #128	; 0x80
    6414:	6862      	ldr	r2, [r4, #4]
    6416:	00db      	lsls	r3, r3, #3
    6418:	1c51      	adds	r1, r2, #1
    641a:	d145      	bne.n	64a8 <_printf_float+0x15c>
    641c:	3207      	adds	r2, #7
    641e:	6062      	str	r2, [r4, #4]
    6420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6422:	2100      	movs	r1, #0
    6424:	4313      	orrs	r3, r2
    6426:	aa12      	add	r2, sp, #72	; 0x48
    6428:	9205      	str	r2, [sp, #20]
    642a:	aa11      	add	r2, sp, #68	; 0x44
    642c:	9203      	str	r2, [sp, #12]
    642e:	2223      	movs	r2, #35	; 0x23
    6430:	6023      	str	r3, [r4, #0]
    6432:	9106      	str	r1, [sp, #24]
    6434:	9301      	str	r3, [sp, #4]
    6436:	a908      	add	r1, sp, #32
    6438:	6863      	ldr	r3, [r4, #4]
    643a:	1852      	adds	r2, r2, r1
    643c:	9202      	str	r2, [sp, #8]
    643e:	9300      	str	r3, [sp, #0]
    6440:	0032      	movs	r2, r6
    6442:	002b      	movs	r3, r5
    6444:	9704      	str	r7, [sp, #16]
    6446:	9809      	ldr	r0, [sp, #36]	; 0x24
    6448:	f7ff fee4 	bl	6214 <__cvt>
    644c:	2320      	movs	r3, #32
    644e:	003a      	movs	r2, r7
    6450:	0005      	movs	r5, r0
    6452:	439a      	bics	r2, r3
    6454:	2a47      	cmp	r2, #71	; 0x47
    6456:	d107      	bne.n	6468 <_printf_float+0x11c>
    6458:	9b11      	ldr	r3, [sp, #68]	; 0x44
    645a:	1cda      	adds	r2, r3, #3
    645c:	db02      	blt.n	6464 <_printf_float+0x118>
    645e:	6862      	ldr	r2, [r4, #4]
    6460:	4293      	cmp	r3, r2
    6462:	dd5b      	ble.n	651c <_printf_float+0x1d0>
    6464:	3f02      	subs	r7, #2
    6466:	b2ff      	uxtb	r7, r7
    6468:	9911      	ldr	r1, [sp, #68]	; 0x44
    646a:	2f65      	cmp	r7, #101	; 0x65
    646c:	d83b      	bhi.n	64e6 <_printf_float+0x19a>
    646e:	0020      	movs	r0, r4
    6470:	3901      	subs	r1, #1
    6472:	003a      	movs	r2, r7
    6474:	3050      	adds	r0, #80	; 0x50
    6476:	9111      	str	r1, [sp, #68]	; 0x44
    6478:	f7ff ff30 	bl	62dc <__exponent>
    647c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    647e:	0006      	movs	r6, r0
    6480:	1883      	adds	r3, r0, r2
    6482:	6123      	str	r3, [r4, #16]
    6484:	2a01      	cmp	r2, #1
    6486:	dc02      	bgt.n	648e <_printf_float+0x142>
    6488:	6822      	ldr	r2, [r4, #0]
    648a:	07d2      	lsls	r2, r2, #31
    648c:	d501      	bpl.n	6492 <_printf_float+0x146>
    648e:	3301      	adds	r3, #1
    6490:	6123      	str	r3, [r4, #16]
    6492:	2323      	movs	r3, #35	; 0x23
    6494:	aa08      	add	r2, sp, #32
    6496:	189b      	adds	r3, r3, r2
    6498:	781b      	ldrb	r3, [r3, #0]
    649a:	2b00      	cmp	r3, #0
    649c:	d0a8      	beq.n	63f0 <_printf_float+0xa4>
    649e:	0023      	movs	r3, r4
    64a0:	222d      	movs	r2, #45	; 0x2d
    64a2:	3343      	adds	r3, #67	; 0x43
    64a4:	701a      	strb	r2, [r3, #0]
    64a6:	e7a3      	b.n	63f0 <_printf_float+0xa4>
    64a8:	2f67      	cmp	r7, #103	; 0x67
    64aa:	d001      	beq.n	64b0 <_printf_float+0x164>
    64ac:	2f47      	cmp	r7, #71	; 0x47
    64ae:	d1b7      	bne.n	6420 <_printf_float+0xd4>
    64b0:	2a00      	cmp	r2, #0
    64b2:	d016      	beq.n	64e2 <_printf_float+0x196>
    64b4:	990c      	ldr	r1, [sp, #48]	; 0x30
    64b6:	a808      	add	r0, sp, #32
    64b8:	430b      	orrs	r3, r1
    64ba:	2100      	movs	r1, #0
    64bc:	9106      	str	r1, [sp, #24]
    64be:	a912      	add	r1, sp, #72	; 0x48
    64c0:	9105      	str	r1, [sp, #20]
    64c2:	a911      	add	r1, sp, #68	; 0x44
    64c4:	9103      	str	r1, [sp, #12]
    64c6:	2123      	movs	r1, #35	; 0x23
    64c8:	1809      	adds	r1, r1, r0
    64ca:	6023      	str	r3, [r4, #0]
    64cc:	9301      	str	r3, [sp, #4]
    64ce:	9200      	str	r2, [sp, #0]
    64d0:	002b      	movs	r3, r5
    64d2:	9704      	str	r7, [sp, #16]
    64d4:	9102      	str	r1, [sp, #8]
    64d6:	0032      	movs	r2, r6
    64d8:	9809      	ldr	r0, [sp, #36]	; 0x24
    64da:	f7ff fe9b 	bl	6214 <__cvt>
    64de:	0005      	movs	r5, r0
    64e0:	e7ba      	b.n	6458 <_printf_float+0x10c>
    64e2:	2201      	movs	r2, #1
    64e4:	e79b      	b.n	641e <_printf_float+0xd2>
    64e6:	2f66      	cmp	r7, #102	; 0x66
    64e8:	d119      	bne.n	651e <_printf_float+0x1d2>
    64ea:	6863      	ldr	r3, [r4, #4]
    64ec:	2900      	cmp	r1, #0
    64ee:	dd0c      	ble.n	650a <_printf_float+0x1be>
    64f0:	6121      	str	r1, [r4, #16]
    64f2:	2b00      	cmp	r3, #0
    64f4:	d102      	bne.n	64fc <_printf_float+0x1b0>
    64f6:	6822      	ldr	r2, [r4, #0]
    64f8:	07d2      	lsls	r2, r2, #31
    64fa:	d502      	bpl.n	6502 <_printf_float+0x1b6>
    64fc:	3301      	adds	r3, #1
    64fe:	185b      	adds	r3, r3, r1
    6500:	6123      	str	r3, [r4, #16]
    6502:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6504:	2600      	movs	r6, #0
    6506:	65a3      	str	r3, [r4, #88]	; 0x58
    6508:	e7c3      	b.n	6492 <_printf_float+0x146>
    650a:	2b00      	cmp	r3, #0
    650c:	d103      	bne.n	6516 <_printf_float+0x1ca>
    650e:	2201      	movs	r2, #1
    6510:	6821      	ldr	r1, [r4, #0]
    6512:	4211      	tst	r1, r2
    6514:	d000      	beq.n	6518 <_printf_float+0x1cc>
    6516:	1c9a      	adds	r2, r3, #2
    6518:	6122      	str	r2, [r4, #16]
    651a:	e7f2      	b.n	6502 <_printf_float+0x1b6>
    651c:	2767      	movs	r7, #103	; 0x67
    651e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6520:	9812      	ldr	r0, [sp, #72]	; 0x48
    6522:	4283      	cmp	r3, r0
    6524:	db05      	blt.n	6532 <_printf_float+0x1e6>
    6526:	6822      	ldr	r2, [r4, #0]
    6528:	6123      	str	r3, [r4, #16]
    652a:	07d2      	lsls	r2, r2, #31
    652c:	d5e9      	bpl.n	6502 <_printf_float+0x1b6>
    652e:	3301      	adds	r3, #1
    6530:	e7e6      	b.n	6500 <_printf_float+0x1b4>
    6532:	2201      	movs	r2, #1
    6534:	2b00      	cmp	r3, #0
    6536:	dc01      	bgt.n	653c <_printf_float+0x1f0>
    6538:	1892      	adds	r2, r2, r2
    653a:	1ad2      	subs	r2, r2, r3
    653c:	1812      	adds	r2, r2, r0
    653e:	e7eb      	b.n	6518 <_printf_float+0x1cc>
    6540:	6822      	ldr	r2, [r4, #0]
    6542:	0553      	lsls	r3, r2, #21
    6544:	d408      	bmi.n	6558 <_printf_float+0x20c>
    6546:	6923      	ldr	r3, [r4, #16]
    6548:	002a      	movs	r2, r5
    654a:	990a      	ldr	r1, [sp, #40]	; 0x28
    654c:	9809      	ldr	r0, [sp, #36]	; 0x24
    654e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    6550:	47a8      	blx	r5
    6552:	1c43      	adds	r3, r0, #1
    6554:	d129      	bne.n	65aa <_printf_float+0x25e>
    6556:	e756      	b.n	6406 <_printf_float+0xba>
    6558:	2f65      	cmp	r7, #101	; 0x65
    655a:	d800      	bhi.n	655e <_printf_float+0x212>
    655c:	e0dc      	b.n	6718 <_printf_float+0x3cc>
    655e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    6560:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    6562:	2200      	movs	r2, #0
    6564:	2300      	movs	r3, #0
    6566:	f002 fcf5 	bl	8f54 <__aeabi_dcmpeq>
    656a:	2800      	cmp	r0, #0
    656c:	d035      	beq.n	65da <_printf_float+0x28e>
    656e:	2301      	movs	r3, #1
    6570:	4a35      	ldr	r2, [pc, #212]	; (6648 <_printf_float+0x2fc>)
    6572:	990a      	ldr	r1, [sp, #40]	; 0x28
    6574:	9809      	ldr	r0, [sp, #36]	; 0x24
    6576:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    6578:	47a8      	blx	r5
    657a:	1c43      	adds	r3, r0, #1
    657c:	d100      	bne.n	6580 <_printf_float+0x234>
    657e:	e742      	b.n	6406 <_printf_float+0xba>
    6580:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6582:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6584:	4293      	cmp	r3, r2
    6586:	db02      	blt.n	658e <_printf_float+0x242>
    6588:	6823      	ldr	r3, [r4, #0]
    658a:	07db      	lsls	r3, r3, #31
    658c:	d50d      	bpl.n	65aa <_printf_float+0x25e>
    658e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    6590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6594:	990a      	ldr	r1, [sp, #40]	; 0x28
    6596:	9809      	ldr	r0, [sp, #36]	; 0x24
    6598:	47a8      	blx	r5
    659a:	2500      	movs	r5, #0
    659c:	1c43      	adds	r3, r0, #1
    659e:	d100      	bne.n	65a2 <_printf_float+0x256>
    65a0:	e731      	b.n	6406 <_printf_float+0xba>
    65a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    65a4:	3b01      	subs	r3, #1
    65a6:	429d      	cmp	r5, r3
    65a8:	db0b      	blt.n	65c2 <_printf_float+0x276>
    65aa:	6823      	ldr	r3, [r4, #0]
    65ac:	2500      	movs	r5, #0
    65ae:	079b      	lsls	r3, r3, #30
    65b0:	d500      	bpl.n	65b4 <_printf_float+0x268>
    65b2:	e0fd      	b.n	67b0 <_printf_float+0x464>
    65b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    65b6:	68e0      	ldr	r0, [r4, #12]
    65b8:	4298      	cmp	r0, r3
    65ba:	db00      	blt.n	65be <_printf_float+0x272>
    65bc:	e725      	b.n	640a <_printf_float+0xbe>
    65be:	0018      	movs	r0, r3
    65c0:	e723      	b.n	640a <_printf_float+0xbe>
    65c2:	0022      	movs	r2, r4
    65c4:	2301      	movs	r3, #1
    65c6:	321a      	adds	r2, #26
    65c8:	990a      	ldr	r1, [sp, #40]	; 0x28
    65ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    65cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    65ce:	47b0      	blx	r6
    65d0:	1c43      	adds	r3, r0, #1
    65d2:	d100      	bne.n	65d6 <_printf_float+0x28a>
    65d4:	e717      	b.n	6406 <_printf_float+0xba>
    65d6:	3501      	adds	r5, #1
    65d8:	e7e3      	b.n	65a2 <_printf_float+0x256>
    65da:	9b11      	ldr	r3, [sp, #68]	; 0x44
    65dc:	2b00      	cmp	r3, #0
    65de:	dc35      	bgt.n	664c <_printf_float+0x300>
    65e0:	2301      	movs	r3, #1
    65e2:	4a19      	ldr	r2, [pc, #100]	; (6648 <_printf_float+0x2fc>)
    65e4:	990a      	ldr	r1, [sp, #40]	; 0x28
    65e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    65e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    65ea:	47b0      	blx	r6
    65ec:	1c43      	adds	r3, r0, #1
    65ee:	d100      	bne.n	65f2 <_printf_float+0x2a6>
    65f0:	e709      	b.n	6406 <_printf_float+0xba>
    65f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    65f4:	2b00      	cmp	r3, #0
    65f6:	d105      	bne.n	6604 <_printf_float+0x2b8>
    65f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    65fa:	2b00      	cmp	r3, #0
    65fc:	d102      	bne.n	6604 <_printf_float+0x2b8>
    65fe:	6823      	ldr	r3, [r4, #0]
    6600:	07db      	lsls	r3, r3, #31
    6602:	d5d2      	bpl.n	65aa <_printf_float+0x25e>
    6604:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    6606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6608:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    660a:	990a      	ldr	r1, [sp, #40]	; 0x28
    660c:	9809      	ldr	r0, [sp, #36]	; 0x24
    660e:	47b0      	blx	r6
    6610:	2600      	movs	r6, #0
    6612:	1c43      	adds	r3, r0, #1
    6614:	d100      	bne.n	6618 <_printf_float+0x2cc>
    6616:	e6f6      	b.n	6406 <_printf_float+0xba>
    6618:	9b11      	ldr	r3, [sp, #68]	; 0x44
    661a:	425b      	negs	r3, r3
    661c:	429e      	cmp	r6, r3
    661e:	db01      	blt.n	6624 <_printf_float+0x2d8>
    6620:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6622:	e791      	b.n	6548 <_printf_float+0x1fc>
    6624:	0022      	movs	r2, r4
    6626:	2301      	movs	r3, #1
    6628:	321a      	adds	r2, #26
    662a:	990a      	ldr	r1, [sp, #40]	; 0x28
    662c:	9809      	ldr	r0, [sp, #36]	; 0x24
    662e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    6630:	47b8      	blx	r7
    6632:	1c43      	adds	r3, r0, #1
    6634:	d100      	bne.n	6638 <_printf_float+0x2ec>
    6636:	e6e6      	b.n	6406 <_printf_float+0xba>
    6638:	3601      	adds	r6, #1
    663a:	e7ed      	b.n	6618 <_printf_float+0x2cc>
    663c:	7fefffff 	.word	0x7fefffff
    6640:	0000b4ea 	.word	0x0000b4ea
    6644:	0000b4e6 	.word	0x0000b4e6
    6648:	0000b4f6 	.word	0x0000b4f6
    664c:	6da3      	ldr	r3, [r4, #88]	; 0x58
    664e:	9e12      	ldr	r6, [sp, #72]	; 0x48
    6650:	429e      	cmp	r6, r3
    6652:	dd00      	ble.n	6656 <_printf_float+0x30a>
    6654:	001e      	movs	r6, r3
    6656:	2e00      	cmp	r6, #0
    6658:	dc35      	bgt.n	66c6 <_printf_float+0x37a>
    665a:	2300      	movs	r3, #0
    665c:	930c      	str	r3, [sp, #48]	; 0x30
    665e:	43f3      	mvns	r3, r6
    6660:	17db      	asrs	r3, r3, #31
    6662:	930f      	str	r3, [sp, #60]	; 0x3c
    6664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6666:	6da7      	ldr	r7, [r4, #88]	; 0x58
    6668:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    666a:	4033      	ands	r3, r6
    666c:	1afb      	subs	r3, r7, r3
    666e:	429a      	cmp	r2, r3
    6670:	db32      	blt.n	66d8 <_printf_float+0x38c>
    6672:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6674:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6676:	4293      	cmp	r3, r2
    6678:	db3c      	blt.n	66f4 <_printf_float+0x3a8>
    667a:	6823      	ldr	r3, [r4, #0]
    667c:	07db      	lsls	r3, r3, #31
    667e:	d439      	bmi.n	66f4 <_printf_float+0x3a8>
    6680:	9e12      	ldr	r6, [sp, #72]	; 0x48
    6682:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6684:	1bf3      	subs	r3, r6, r7
    6686:	1ab6      	subs	r6, r6, r2
    6688:	429e      	cmp	r6, r3
    668a:	dd00      	ble.n	668e <_printf_float+0x342>
    668c:	001e      	movs	r6, r3
    668e:	2e00      	cmp	r6, #0
    6690:	dc39      	bgt.n	6706 <_printf_float+0x3ba>
    6692:	43f7      	mvns	r7, r6
    6694:	2500      	movs	r5, #0
    6696:	17fb      	asrs	r3, r7, #31
    6698:	930c      	str	r3, [sp, #48]	; 0x30
    669a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    669c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    669e:	990c      	ldr	r1, [sp, #48]	; 0x30
    66a0:	1a9b      	subs	r3, r3, r2
    66a2:	0032      	movs	r2, r6
    66a4:	400a      	ands	r2, r1
    66a6:	1a9b      	subs	r3, r3, r2
    66a8:	429d      	cmp	r5, r3
    66aa:	db00      	blt.n	66ae <_printf_float+0x362>
    66ac:	e77d      	b.n	65aa <_printf_float+0x25e>
    66ae:	0022      	movs	r2, r4
    66b0:	2301      	movs	r3, #1
    66b2:	321a      	adds	r2, #26
    66b4:	990a      	ldr	r1, [sp, #40]	; 0x28
    66b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    66b8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    66ba:	47b8      	blx	r7
    66bc:	1c43      	adds	r3, r0, #1
    66be:	d100      	bne.n	66c2 <_printf_float+0x376>
    66c0:	e6a1      	b.n	6406 <_printf_float+0xba>
    66c2:	3501      	adds	r5, #1
    66c4:	e7e9      	b.n	669a <_printf_float+0x34e>
    66c6:	0033      	movs	r3, r6
    66c8:	002a      	movs	r2, r5
    66ca:	990a      	ldr	r1, [sp, #40]	; 0x28
    66cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    66ce:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    66d0:	47b8      	blx	r7
    66d2:	1c43      	adds	r3, r0, #1
    66d4:	d1c1      	bne.n	665a <_printf_float+0x30e>
    66d6:	e696      	b.n	6406 <_printf_float+0xba>
    66d8:	0022      	movs	r2, r4
    66da:	2301      	movs	r3, #1
    66dc:	321a      	adds	r2, #26
    66de:	990a      	ldr	r1, [sp, #40]	; 0x28
    66e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    66e2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    66e4:	47b8      	blx	r7
    66e6:	1c43      	adds	r3, r0, #1
    66e8:	d100      	bne.n	66ec <_printf_float+0x3a0>
    66ea:	e68c      	b.n	6406 <_printf_float+0xba>
    66ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    66ee:	3301      	adds	r3, #1
    66f0:	930c      	str	r3, [sp, #48]	; 0x30
    66f2:	e7b7      	b.n	6664 <_printf_float+0x318>
    66f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    66f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    66f8:	990a      	ldr	r1, [sp, #40]	; 0x28
    66fa:	9809      	ldr	r0, [sp, #36]	; 0x24
    66fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    66fe:	47b0      	blx	r6
    6700:	1c43      	adds	r3, r0, #1
    6702:	d1bd      	bne.n	6680 <_printf_float+0x334>
    6704:	e67f      	b.n	6406 <_printf_float+0xba>
    6706:	19ea      	adds	r2, r5, r7
    6708:	0033      	movs	r3, r6
    670a:	990a      	ldr	r1, [sp, #40]	; 0x28
    670c:	9809      	ldr	r0, [sp, #36]	; 0x24
    670e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    6710:	47a8      	blx	r5
    6712:	1c43      	adds	r3, r0, #1
    6714:	d1bd      	bne.n	6692 <_printf_float+0x346>
    6716:	e676      	b.n	6406 <_printf_float+0xba>
    6718:	9b12      	ldr	r3, [sp, #72]	; 0x48
    671a:	2b01      	cmp	r3, #1
    671c:	dc02      	bgt.n	6724 <_printf_float+0x3d8>
    671e:	2301      	movs	r3, #1
    6720:	421a      	tst	r2, r3
    6722:	d038      	beq.n	6796 <_printf_float+0x44a>
    6724:	2301      	movs	r3, #1
    6726:	002a      	movs	r2, r5
    6728:	990a      	ldr	r1, [sp, #40]	; 0x28
    672a:	9809      	ldr	r0, [sp, #36]	; 0x24
    672c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    672e:	47b8      	blx	r7
    6730:	1c43      	adds	r3, r0, #1
    6732:	d100      	bne.n	6736 <_printf_float+0x3ea>
    6734:	e667      	b.n	6406 <_printf_float+0xba>
    6736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6738:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    673a:	990a      	ldr	r1, [sp, #40]	; 0x28
    673c:	9809      	ldr	r0, [sp, #36]	; 0x24
    673e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    6740:	47b8      	blx	r7
    6742:	1c43      	adds	r3, r0, #1
    6744:	d100      	bne.n	6748 <_printf_float+0x3fc>
    6746:	e65e      	b.n	6406 <_printf_float+0xba>
    6748:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    674a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    674c:	2200      	movs	r2, #0
    674e:	2300      	movs	r3, #0
    6750:	f002 fc00 	bl	8f54 <__aeabi_dcmpeq>
    6754:	2800      	cmp	r0, #0
    6756:	d008      	beq.n	676a <_printf_float+0x41e>
    6758:	2500      	movs	r5, #0
    675a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    675c:	3b01      	subs	r3, #1
    675e:	429d      	cmp	r5, r3
    6760:	db0d      	blt.n	677e <_printf_float+0x432>
    6762:	0022      	movs	r2, r4
    6764:	0033      	movs	r3, r6
    6766:	3250      	adds	r2, #80	; 0x50
    6768:	e6ef      	b.n	654a <_printf_float+0x1fe>
    676a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    676c:	1c6a      	adds	r2, r5, #1
    676e:	3b01      	subs	r3, #1
    6770:	990a      	ldr	r1, [sp, #40]	; 0x28
    6772:	9809      	ldr	r0, [sp, #36]	; 0x24
    6774:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    6776:	47a8      	blx	r5
    6778:	1c43      	adds	r3, r0, #1
    677a:	d1f2      	bne.n	6762 <_printf_float+0x416>
    677c:	e643      	b.n	6406 <_printf_float+0xba>
    677e:	0022      	movs	r2, r4
    6780:	2301      	movs	r3, #1
    6782:	321a      	adds	r2, #26
    6784:	990a      	ldr	r1, [sp, #40]	; 0x28
    6786:	9809      	ldr	r0, [sp, #36]	; 0x24
    6788:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    678a:	47b8      	blx	r7
    678c:	1c43      	adds	r3, r0, #1
    678e:	d100      	bne.n	6792 <_printf_float+0x446>
    6790:	e639      	b.n	6406 <_printf_float+0xba>
    6792:	3501      	adds	r5, #1
    6794:	e7e1      	b.n	675a <_printf_float+0x40e>
    6796:	002a      	movs	r2, r5
    6798:	e7ea      	b.n	6770 <_printf_float+0x424>
    679a:	0022      	movs	r2, r4
    679c:	2301      	movs	r3, #1
    679e:	3219      	adds	r2, #25
    67a0:	990a      	ldr	r1, [sp, #40]	; 0x28
    67a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    67a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    67a6:	47b0      	blx	r6
    67a8:	1c43      	adds	r3, r0, #1
    67aa:	d100      	bne.n	67ae <_printf_float+0x462>
    67ac:	e62b      	b.n	6406 <_printf_float+0xba>
    67ae:	3501      	adds	r5, #1
    67b0:	68e3      	ldr	r3, [r4, #12]
    67b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    67b4:	1a9b      	subs	r3, r3, r2
    67b6:	429d      	cmp	r5, r3
    67b8:	dbef      	blt.n	679a <_printf_float+0x44e>
    67ba:	e6fb      	b.n	65b4 <_printf_float+0x268>
    67bc:	0032      	movs	r2, r6
    67be:	002b      	movs	r3, r5
    67c0:	0030      	movs	r0, r6
    67c2:	0029      	movs	r1, r5
    67c4:	f004 f8f8 	bl	a9b8 <__aeabi_dcmpun>
    67c8:	2800      	cmp	r0, #0
    67ca:	d100      	bne.n	67ce <_printf_float+0x482>
    67cc:	e621      	b.n	6412 <_printf_float+0xc6>
    67ce:	4d03      	ldr	r5, [pc, #12]	; (67dc <_printf_float+0x490>)
    67d0:	2f47      	cmp	r7, #71	; 0x47
    67d2:	d900      	bls.n	67d6 <_printf_float+0x48a>
    67d4:	e605      	b.n	63e2 <_printf_float+0x96>
    67d6:	4d02      	ldr	r5, [pc, #8]	; (67e0 <_printf_float+0x494>)
    67d8:	e603      	b.n	63e2 <_printf_float+0x96>
    67da:	46c0      	nop			; (mov r8, r8)
    67dc:	0000b4f2 	.word	0x0000b4f2
    67e0:	0000b4ee 	.word	0x0000b4ee

000067e4 <_printf_common>:
    67e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    67e6:	0015      	movs	r5, r2
    67e8:	9301      	str	r3, [sp, #4]
    67ea:	688a      	ldr	r2, [r1, #8]
    67ec:	690b      	ldr	r3, [r1, #16]
    67ee:	9000      	str	r0, [sp, #0]
    67f0:	000c      	movs	r4, r1
    67f2:	4293      	cmp	r3, r2
    67f4:	da00      	bge.n	67f8 <_printf_common+0x14>
    67f6:	0013      	movs	r3, r2
    67f8:	0022      	movs	r2, r4
    67fa:	602b      	str	r3, [r5, #0]
    67fc:	3243      	adds	r2, #67	; 0x43
    67fe:	7812      	ldrb	r2, [r2, #0]
    6800:	2a00      	cmp	r2, #0
    6802:	d001      	beq.n	6808 <_printf_common+0x24>
    6804:	3301      	adds	r3, #1
    6806:	602b      	str	r3, [r5, #0]
    6808:	6823      	ldr	r3, [r4, #0]
    680a:	069b      	lsls	r3, r3, #26
    680c:	d502      	bpl.n	6814 <_printf_common+0x30>
    680e:	682b      	ldr	r3, [r5, #0]
    6810:	3302      	adds	r3, #2
    6812:	602b      	str	r3, [r5, #0]
    6814:	2706      	movs	r7, #6
    6816:	6823      	ldr	r3, [r4, #0]
    6818:	401f      	ands	r7, r3
    681a:	d027      	beq.n	686c <_printf_common+0x88>
    681c:	0023      	movs	r3, r4
    681e:	3343      	adds	r3, #67	; 0x43
    6820:	781b      	ldrb	r3, [r3, #0]
    6822:	1e5a      	subs	r2, r3, #1
    6824:	4193      	sbcs	r3, r2
    6826:	6822      	ldr	r2, [r4, #0]
    6828:	0692      	lsls	r2, r2, #26
    682a:	d430      	bmi.n	688e <_printf_common+0xaa>
    682c:	0022      	movs	r2, r4
    682e:	9901      	ldr	r1, [sp, #4]
    6830:	3243      	adds	r2, #67	; 0x43
    6832:	9800      	ldr	r0, [sp, #0]
    6834:	9e08      	ldr	r6, [sp, #32]
    6836:	47b0      	blx	r6
    6838:	1c43      	adds	r3, r0, #1
    683a:	d025      	beq.n	6888 <_printf_common+0xa4>
    683c:	2306      	movs	r3, #6
    683e:	6820      	ldr	r0, [r4, #0]
    6840:	682a      	ldr	r2, [r5, #0]
    6842:	68e1      	ldr	r1, [r4, #12]
    6844:	4003      	ands	r3, r0
    6846:	2500      	movs	r5, #0
    6848:	2b04      	cmp	r3, #4
    684a:	d103      	bne.n	6854 <_printf_common+0x70>
    684c:	1a8d      	subs	r5, r1, r2
    684e:	43eb      	mvns	r3, r5
    6850:	17db      	asrs	r3, r3, #31
    6852:	401d      	ands	r5, r3
    6854:	68a3      	ldr	r3, [r4, #8]
    6856:	6922      	ldr	r2, [r4, #16]
    6858:	4293      	cmp	r3, r2
    685a:	dd01      	ble.n	6860 <_printf_common+0x7c>
    685c:	1a9b      	subs	r3, r3, r2
    685e:	18ed      	adds	r5, r5, r3
    6860:	2700      	movs	r7, #0
    6862:	42bd      	cmp	r5, r7
    6864:	d120      	bne.n	68a8 <_printf_common+0xc4>
    6866:	2000      	movs	r0, #0
    6868:	e010      	b.n	688c <_printf_common+0xa8>
    686a:	3701      	adds	r7, #1
    686c:	68e3      	ldr	r3, [r4, #12]
    686e:	682a      	ldr	r2, [r5, #0]
    6870:	1a9b      	subs	r3, r3, r2
    6872:	429f      	cmp	r7, r3
    6874:	dad2      	bge.n	681c <_printf_common+0x38>
    6876:	0022      	movs	r2, r4
    6878:	2301      	movs	r3, #1
    687a:	3219      	adds	r2, #25
    687c:	9901      	ldr	r1, [sp, #4]
    687e:	9800      	ldr	r0, [sp, #0]
    6880:	9e08      	ldr	r6, [sp, #32]
    6882:	47b0      	blx	r6
    6884:	1c43      	adds	r3, r0, #1
    6886:	d1f0      	bne.n	686a <_printf_common+0x86>
    6888:	2001      	movs	r0, #1
    688a:	4240      	negs	r0, r0
    688c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    688e:	2030      	movs	r0, #48	; 0x30
    6890:	18e1      	adds	r1, r4, r3
    6892:	3143      	adds	r1, #67	; 0x43
    6894:	7008      	strb	r0, [r1, #0]
    6896:	0021      	movs	r1, r4
    6898:	1c5a      	adds	r2, r3, #1
    689a:	3145      	adds	r1, #69	; 0x45
    689c:	7809      	ldrb	r1, [r1, #0]
    689e:	18a2      	adds	r2, r4, r2
    68a0:	3243      	adds	r2, #67	; 0x43
    68a2:	3302      	adds	r3, #2
    68a4:	7011      	strb	r1, [r2, #0]
    68a6:	e7c1      	b.n	682c <_printf_common+0x48>
    68a8:	0022      	movs	r2, r4
    68aa:	2301      	movs	r3, #1
    68ac:	321a      	adds	r2, #26
    68ae:	9901      	ldr	r1, [sp, #4]
    68b0:	9800      	ldr	r0, [sp, #0]
    68b2:	9e08      	ldr	r6, [sp, #32]
    68b4:	47b0      	blx	r6
    68b6:	1c43      	adds	r3, r0, #1
    68b8:	d0e6      	beq.n	6888 <_printf_common+0xa4>
    68ba:	3701      	adds	r7, #1
    68bc:	e7d1      	b.n	6862 <_printf_common+0x7e>
	...

000068c0 <_printf_i>:
    68c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68c2:	b08b      	sub	sp, #44	; 0x2c
    68c4:	9206      	str	r2, [sp, #24]
    68c6:	000a      	movs	r2, r1
    68c8:	3243      	adds	r2, #67	; 0x43
    68ca:	9307      	str	r3, [sp, #28]
    68cc:	9005      	str	r0, [sp, #20]
    68ce:	9204      	str	r2, [sp, #16]
    68d0:	7e0a      	ldrb	r2, [r1, #24]
    68d2:	000c      	movs	r4, r1
    68d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    68d6:	2a6e      	cmp	r2, #110	; 0x6e
    68d8:	d100      	bne.n	68dc <_printf_i+0x1c>
    68da:	e08f      	b.n	69fc <_printf_i+0x13c>
    68dc:	d817      	bhi.n	690e <_printf_i+0x4e>
    68de:	2a63      	cmp	r2, #99	; 0x63
    68e0:	d02c      	beq.n	693c <_printf_i+0x7c>
    68e2:	d808      	bhi.n	68f6 <_printf_i+0x36>
    68e4:	2a00      	cmp	r2, #0
    68e6:	d100      	bne.n	68ea <_printf_i+0x2a>
    68e8:	e099      	b.n	6a1e <_printf_i+0x15e>
    68ea:	2a58      	cmp	r2, #88	; 0x58
    68ec:	d054      	beq.n	6998 <_printf_i+0xd8>
    68ee:	0026      	movs	r6, r4
    68f0:	3642      	adds	r6, #66	; 0x42
    68f2:	7032      	strb	r2, [r6, #0]
    68f4:	e029      	b.n	694a <_printf_i+0x8a>
    68f6:	2a64      	cmp	r2, #100	; 0x64
    68f8:	d001      	beq.n	68fe <_printf_i+0x3e>
    68fa:	2a69      	cmp	r2, #105	; 0x69
    68fc:	d1f7      	bne.n	68ee <_printf_i+0x2e>
    68fe:	6821      	ldr	r1, [r4, #0]
    6900:	681a      	ldr	r2, [r3, #0]
    6902:	0608      	lsls	r0, r1, #24
    6904:	d523      	bpl.n	694e <_printf_i+0x8e>
    6906:	1d11      	adds	r1, r2, #4
    6908:	6019      	str	r1, [r3, #0]
    690a:	6815      	ldr	r5, [r2, #0]
    690c:	e025      	b.n	695a <_printf_i+0x9a>
    690e:	2a73      	cmp	r2, #115	; 0x73
    6910:	d100      	bne.n	6914 <_printf_i+0x54>
    6912:	e088      	b.n	6a26 <_printf_i+0x166>
    6914:	d808      	bhi.n	6928 <_printf_i+0x68>
    6916:	2a6f      	cmp	r2, #111	; 0x6f
    6918:	d029      	beq.n	696e <_printf_i+0xae>
    691a:	2a70      	cmp	r2, #112	; 0x70
    691c:	d1e7      	bne.n	68ee <_printf_i+0x2e>
    691e:	2220      	movs	r2, #32
    6920:	6809      	ldr	r1, [r1, #0]
    6922:	430a      	orrs	r2, r1
    6924:	6022      	str	r2, [r4, #0]
    6926:	e003      	b.n	6930 <_printf_i+0x70>
    6928:	2a75      	cmp	r2, #117	; 0x75
    692a:	d020      	beq.n	696e <_printf_i+0xae>
    692c:	2a78      	cmp	r2, #120	; 0x78
    692e:	d1de      	bne.n	68ee <_printf_i+0x2e>
    6930:	0022      	movs	r2, r4
    6932:	2178      	movs	r1, #120	; 0x78
    6934:	3245      	adds	r2, #69	; 0x45
    6936:	7011      	strb	r1, [r2, #0]
    6938:	4a6c      	ldr	r2, [pc, #432]	; (6aec <_printf_i+0x22c>)
    693a:	e030      	b.n	699e <_printf_i+0xde>
    693c:	000e      	movs	r6, r1
    693e:	681a      	ldr	r2, [r3, #0]
    6940:	3642      	adds	r6, #66	; 0x42
    6942:	1d11      	adds	r1, r2, #4
    6944:	6019      	str	r1, [r3, #0]
    6946:	6813      	ldr	r3, [r2, #0]
    6948:	7033      	strb	r3, [r6, #0]
    694a:	2301      	movs	r3, #1
    694c:	e079      	b.n	6a42 <_printf_i+0x182>
    694e:	0649      	lsls	r1, r1, #25
    6950:	d5d9      	bpl.n	6906 <_printf_i+0x46>
    6952:	1d11      	adds	r1, r2, #4
    6954:	6019      	str	r1, [r3, #0]
    6956:	2300      	movs	r3, #0
    6958:	5ed5      	ldrsh	r5, [r2, r3]
    695a:	2d00      	cmp	r5, #0
    695c:	da03      	bge.n	6966 <_printf_i+0xa6>
    695e:	232d      	movs	r3, #45	; 0x2d
    6960:	9a04      	ldr	r2, [sp, #16]
    6962:	426d      	negs	r5, r5
    6964:	7013      	strb	r3, [r2, #0]
    6966:	4b62      	ldr	r3, [pc, #392]	; (6af0 <_printf_i+0x230>)
    6968:	270a      	movs	r7, #10
    696a:	9303      	str	r3, [sp, #12]
    696c:	e02f      	b.n	69ce <_printf_i+0x10e>
    696e:	6820      	ldr	r0, [r4, #0]
    6970:	6819      	ldr	r1, [r3, #0]
    6972:	0605      	lsls	r5, r0, #24
    6974:	d503      	bpl.n	697e <_printf_i+0xbe>
    6976:	1d08      	adds	r0, r1, #4
    6978:	6018      	str	r0, [r3, #0]
    697a:	680d      	ldr	r5, [r1, #0]
    697c:	e005      	b.n	698a <_printf_i+0xca>
    697e:	0640      	lsls	r0, r0, #25
    6980:	d5f9      	bpl.n	6976 <_printf_i+0xb6>
    6982:	680d      	ldr	r5, [r1, #0]
    6984:	1d08      	adds	r0, r1, #4
    6986:	6018      	str	r0, [r3, #0]
    6988:	b2ad      	uxth	r5, r5
    698a:	4b59      	ldr	r3, [pc, #356]	; (6af0 <_printf_i+0x230>)
    698c:	2708      	movs	r7, #8
    698e:	9303      	str	r3, [sp, #12]
    6990:	2a6f      	cmp	r2, #111	; 0x6f
    6992:	d018      	beq.n	69c6 <_printf_i+0x106>
    6994:	270a      	movs	r7, #10
    6996:	e016      	b.n	69c6 <_printf_i+0x106>
    6998:	3145      	adds	r1, #69	; 0x45
    699a:	700a      	strb	r2, [r1, #0]
    699c:	4a54      	ldr	r2, [pc, #336]	; (6af0 <_printf_i+0x230>)
    699e:	9203      	str	r2, [sp, #12]
    69a0:	681a      	ldr	r2, [r3, #0]
    69a2:	6821      	ldr	r1, [r4, #0]
    69a4:	1d10      	adds	r0, r2, #4
    69a6:	6018      	str	r0, [r3, #0]
    69a8:	6815      	ldr	r5, [r2, #0]
    69aa:	0608      	lsls	r0, r1, #24
    69ac:	d522      	bpl.n	69f4 <_printf_i+0x134>
    69ae:	07cb      	lsls	r3, r1, #31
    69b0:	d502      	bpl.n	69b8 <_printf_i+0xf8>
    69b2:	2320      	movs	r3, #32
    69b4:	4319      	orrs	r1, r3
    69b6:	6021      	str	r1, [r4, #0]
    69b8:	2710      	movs	r7, #16
    69ba:	2d00      	cmp	r5, #0
    69bc:	d103      	bne.n	69c6 <_printf_i+0x106>
    69be:	2320      	movs	r3, #32
    69c0:	6822      	ldr	r2, [r4, #0]
    69c2:	439a      	bics	r2, r3
    69c4:	6022      	str	r2, [r4, #0]
    69c6:	0023      	movs	r3, r4
    69c8:	2200      	movs	r2, #0
    69ca:	3343      	adds	r3, #67	; 0x43
    69cc:	701a      	strb	r2, [r3, #0]
    69ce:	6863      	ldr	r3, [r4, #4]
    69d0:	60a3      	str	r3, [r4, #8]
    69d2:	2b00      	cmp	r3, #0
    69d4:	db5c      	blt.n	6a90 <_printf_i+0x1d0>
    69d6:	2204      	movs	r2, #4
    69d8:	6821      	ldr	r1, [r4, #0]
    69da:	4391      	bics	r1, r2
    69dc:	6021      	str	r1, [r4, #0]
    69de:	2d00      	cmp	r5, #0
    69e0:	d158      	bne.n	6a94 <_printf_i+0x1d4>
    69e2:	9e04      	ldr	r6, [sp, #16]
    69e4:	2b00      	cmp	r3, #0
    69e6:	d064      	beq.n	6ab2 <_printf_i+0x1f2>
    69e8:	0026      	movs	r6, r4
    69ea:	9b03      	ldr	r3, [sp, #12]
    69ec:	3642      	adds	r6, #66	; 0x42
    69ee:	781b      	ldrb	r3, [r3, #0]
    69f0:	7033      	strb	r3, [r6, #0]
    69f2:	e05e      	b.n	6ab2 <_printf_i+0x1f2>
    69f4:	0648      	lsls	r0, r1, #25
    69f6:	d5da      	bpl.n	69ae <_printf_i+0xee>
    69f8:	b2ad      	uxth	r5, r5
    69fa:	e7d8      	b.n	69ae <_printf_i+0xee>
    69fc:	6809      	ldr	r1, [r1, #0]
    69fe:	681a      	ldr	r2, [r3, #0]
    6a00:	0608      	lsls	r0, r1, #24
    6a02:	d505      	bpl.n	6a10 <_printf_i+0x150>
    6a04:	1d11      	adds	r1, r2, #4
    6a06:	6019      	str	r1, [r3, #0]
    6a08:	6813      	ldr	r3, [r2, #0]
    6a0a:	6962      	ldr	r2, [r4, #20]
    6a0c:	601a      	str	r2, [r3, #0]
    6a0e:	e006      	b.n	6a1e <_printf_i+0x15e>
    6a10:	0649      	lsls	r1, r1, #25
    6a12:	d5f7      	bpl.n	6a04 <_printf_i+0x144>
    6a14:	1d11      	adds	r1, r2, #4
    6a16:	6019      	str	r1, [r3, #0]
    6a18:	6813      	ldr	r3, [r2, #0]
    6a1a:	8aa2      	ldrh	r2, [r4, #20]
    6a1c:	801a      	strh	r2, [r3, #0]
    6a1e:	2300      	movs	r3, #0
    6a20:	9e04      	ldr	r6, [sp, #16]
    6a22:	6123      	str	r3, [r4, #16]
    6a24:	e054      	b.n	6ad0 <_printf_i+0x210>
    6a26:	681a      	ldr	r2, [r3, #0]
    6a28:	1d11      	adds	r1, r2, #4
    6a2a:	6019      	str	r1, [r3, #0]
    6a2c:	6816      	ldr	r6, [r2, #0]
    6a2e:	2100      	movs	r1, #0
    6a30:	6862      	ldr	r2, [r4, #4]
    6a32:	0030      	movs	r0, r6
    6a34:	f001 fbfe 	bl	8234 <memchr>
    6a38:	2800      	cmp	r0, #0
    6a3a:	d001      	beq.n	6a40 <_printf_i+0x180>
    6a3c:	1b80      	subs	r0, r0, r6
    6a3e:	6060      	str	r0, [r4, #4]
    6a40:	6863      	ldr	r3, [r4, #4]
    6a42:	6123      	str	r3, [r4, #16]
    6a44:	2300      	movs	r3, #0
    6a46:	9a04      	ldr	r2, [sp, #16]
    6a48:	7013      	strb	r3, [r2, #0]
    6a4a:	e041      	b.n	6ad0 <_printf_i+0x210>
    6a4c:	6923      	ldr	r3, [r4, #16]
    6a4e:	0032      	movs	r2, r6
    6a50:	9906      	ldr	r1, [sp, #24]
    6a52:	9805      	ldr	r0, [sp, #20]
    6a54:	9d07      	ldr	r5, [sp, #28]
    6a56:	47a8      	blx	r5
    6a58:	1c43      	adds	r3, r0, #1
    6a5a:	d043      	beq.n	6ae4 <_printf_i+0x224>
    6a5c:	6823      	ldr	r3, [r4, #0]
    6a5e:	2500      	movs	r5, #0
    6a60:	079b      	lsls	r3, r3, #30
    6a62:	d40f      	bmi.n	6a84 <_printf_i+0x1c4>
    6a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a66:	68e0      	ldr	r0, [r4, #12]
    6a68:	4298      	cmp	r0, r3
    6a6a:	da3d      	bge.n	6ae8 <_printf_i+0x228>
    6a6c:	0018      	movs	r0, r3
    6a6e:	e03b      	b.n	6ae8 <_printf_i+0x228>
    6a70:	0022      	movs	r2, r4
    6a72:	2301      	movs	r3, #1
    6a74:	3219      	adds	r2, #25
    6a76:	9906      	ldr	r1, [sp, #24]
    6a78:	9805      	ldr	r0, [sp, #20]
    6a7a:	9e07      	ldr	r6, [sp, #28]
    6a7c:	47b0      	blx	r6
    6a7e:	1c43      	adds	r3, r0, #1
    6a80:	d030      	beq.n	6ae4 <_printf_i+0x224>
    6a82:	3501      	adds	r5, #1
    6a84:	68e3      	ldr	r3, [r4, #12]
    6a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6a88:	1a9b      	subs	r3, r3, r2
    6a8a:	429d      	cmp	r5, r3
    6a8c:	dbf0      	blt.n	6a70 <_printf_i+0x1b0>
    6a8e:	e7e9      	b.n	6a64 <_printf_i+0x1a4>
    6a90:	2d00      	cmp	r5, #0
    6a92:	d0a9      	beq.n	69e8 <_printf_i+0x128>
    6a94:	9e04      	ldr	r6, [sp, #16]
    6a96:	0028      	movs	r0, r5
    6a98:	0039      	movs	r1, r7
    6a9a:	f002 f95b 	bl	8d54 <__aeabi_uidivmod>
    6a9e:	9b03      	ldr	r3, [sp, #12]
    6aa0:	3e01      	subs	r6, #1
    6aa2:	5c5b      	ldrb	r3, [r3, r1]
    6aa4:	0028      	movs	r0, r5
    6aa6:	7033      	strb	r3, [r6, #0]
    6aa8:	0039      	movs	r1, r7
    6aaa:	f002 f8cd 	bl	8c48 <__udivsi3>
    6aae:	1e05      	subs	r5, r0, #0
    6ab0:	d1f1      	bne.n	6a96 <_printf_i+0x1d6>
    6ab2:	2f08      	cmp	r7, #8
    6ab4:	d109      	bne.n	6aca <_printf_i+0x20a>
    6ab6:	6823      	ldr	r3, [r4, #0]
    6ab8:	07db      	lsls	r3, r3, #31
    6aba:	d506      	bpl.n	6aca <_printf_i+0x20a>
    6abc:	6863      	ldr	r3, [r4, #4]
    6abe:	6922      	ldr	r2, [r4, #16]
    6ac0:	4293      	cmp	r3, r2
    6ac2:	dc02      	bgt.n	6aca <_printf_i+0x20a>
    6ac4:	2330      	movs	r3, #48	; 0x30
    6ac6:	3e01      	subs	r6, #1
    6ac8:	7033      	strb	r3, [r6, #0]
    6aca:	9b04      	ldr	r3, [sp, #16]
    6acc:	1b9b      	subs	r3, r3, r6
    6ace:	6123      	str	r3, [r4, #16]
    6ad0:	9b07      	ldr	r3, [sp, #28]
    6ad2:	aa09      	add	r2, sp, #36	; 0x24
    6ad4:	9300      	str	r3, [sp, #0]
    6ad6:	0021      	movs	r1, r4
    6ad8:	9b06      	ldr	r3, [sp, #24]
    6ada:	9805      	ldr	r0, [sp, #20]
    6adc:	f7ff fe82 	bl	67e4 <_printf_common>
    6ae0:	1c43      	adds	r3, r0, #1
    6ae2:	d1b3      	bne.n	6a4c <_printf_i+0x18c>
    6ae4:	2001      	movs	r0, #1
    6ae6:	4240      	negs	r0, r0
    6ae8:	b00b      	add	sp, #44	; 0x2c
    6aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6aec:	0000b509 	.word	0x0000b509
    6af0:	0000b4f8 	.word	0x0000b4f8

00006af4 <iprintf>:
    6af4:	b40f      	push	{r0, r1, r2, r3}
    6af6:	4b0b      	ldr	r3, [pc, #44]	; (6b24 <iprintf+0x30>)
    6af8:	b513      	push	{r0, r1, r4, lr}
    6afa:	681c      	ldr	r4, [r3, #0]
    6afc:	2c00      	cmp	r4, #0
    6afe:	d005      	beq.n	6b0c <iprintf+0x18>
    6b00:	69a3      	ldr	r3, [r4, #24]
    6b02:	2b00      	cmp	r3, #0
    6b04:	d102      	bne.n	6b0c <iprintf+0x18>
    6b06:	0020      	movs	r0, r4
    6b08:	f001 fa86 	bl	8018 <__sinit>
    6b0c:	ab05      	add	r3, sp, #20
    6b0e:	9a04      	ldr	r2, [sp, #16]
    6b10:	68a1      	ldr	r1, [r4, #8]
    6b12:	0020      	movs	r0, r4
    6b14:	9301      	str	r3, [sp, #4]
    6b16:	f001 feb3 	bl	8880 <_vfiprintf_r>
    6b1a:	bc16      	pop	{r1, r2, r4}
    6b1c:	bc08      	pop	{r3}
    6b1e:	b004      	add	sp, #16
    6b20:	4718      	bx	r3
    6b22:	46c0      	nop			; (mov r8, r8)
    6b24:	2000004c 	.word	0x2000004c

00006b28 <_puts_r>:
    6b28:	b570      	push	{r4, r5, r6, lr}
    6b2a:	0005      	movs	r5, r0
    6b2c:	000e      	movs	r6, r1
    6b2e:	2800      	cmp	r0, #0
    6b30:	d004      	beq.n	6b3c <_puts_r+0x14>
    6b32:	6983      	ldr	r3, [r0, #24]
    6b34:	2b00      	cmp	r3, #0
    6b36:	d101      	bne.n	6b3c <_puts_r+0x14>
    6b38:	f001 fa6e 	bl	8018 <__sinit>
    6b3c:	69ab      	ldr	r3, [r5, #24]
    6b3e:	68ac      	ldr	r4, [r5, #8]
    6b40:	2b00      	cmp	r3, #0
    6b42:	d102      	bne.n	6b4a <_puts_r+0x22>
    6b44:	0028      	movs	r0, r5
    6b46:	f001 fa67 	bl	8018 <__sinit>
    6b4a:	4b24      	ldr	r3, [pc, #144]	; (6bdc <_puts_r+0xb4>)
    6b4c:	429c      	cmp	r4, r3
    6b4e:	d10f      	bne.n	6b70 <_puts_r+0x48>
    6b50:	686c      	ldr	r4, [r5, #4]
    6b52:	89a3      	ldrh	r3, [r4, #12]
    6b54:	071b      	lsls	r3, r3, #28
    6b56:	d502      	bpl.n	6b5e <_puts_r+0x36>
    6b58:	6923      	ldr	r3, [r4, #16]
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d120      	bne.n	6ba0 <_puts_r+0x78>
    6b5e:	0021      	movs	r1, r4
    6b60:	0028      	movs	r0, r5
    6b62:	f000 fa7f 	bl	7064 <__swsetup_r>
    6b66:	2800      	cmp	r0, #0
    6b68:	d01a      	beq.n	6ba0 <_puts_r+0x78>
    6b6a:	2001      	movs	r0, #1
    6b6c:	4240      	negs	r0, r0
    6b6e:	bd70      	pop	{r4, r5, r6, pc}
    6b70:	4b1b      	ldr	r3, [pc, #108]	; (6be0 <_puts_r+0xb8>)
    6b72:	429c      	cmp	r4, r3
    6b74:	d101      	bne.n	6b7a <_puts_r+0x52>
    6b76:	68ac      	ldr	r4, [r5, #8]
    6b78:	e7eb      	b.n	6b52 <_puts_r+0x2a>
    6b7a:	4b1a      	ldr	r3, [pc, #104]	; (6be4 <_puts_r+0xbc>)
    6b7c:	429c      	cmp	r4, r3
    6b7e:	d1e8      	bne.n	6b52 <_puts_r+0x2a>
    6b80:	68ec      	ldr	r4, [r5, #12]
    6b82:	e7e6      	b.n	6b52 <_puts_r+0x2a>
    6b84:	3b01      	subs	r3, #1
    6b86:	3601      	adds	r6, #1
    6b88:	60a3      	str	r3, [r4, #8]
    6b8a:	2b00      	cmp	r3, #0
    6b8c:	da04      	bge.n	6b98 <_puts_r+0x70>
    6b8e:	69a2      	ldr	r2, [r4, #24]
    6b90:	4293      	cmp	r3, r2
    6b92:	db16      	blt.n	6bc2 <_puts_r+0x9a>
    6b94:	290a      	cmp	r1, #10
    6b96:	d014      	beq.n	6bc2 <_puts_r+0x9a>
    6b98:	6823      	ldr	r3, [r4, #0]
    6b9a:	1c5a      	adds	r2, r3, #1
    6b9c:	6022      	str	r2, [r4, #0]
    6b9e:	7019      	strb	r1, [r3, #0]
    6ba0:	7831      	ldrb	r1, [r6, #0]
    6ba2:	68a3      	ldr	r3, [r4, #8]
    6ba4:	2900      	cmp	r1, #0
    6ba6:	d1ed      	bne.n	6b84 <_puts_r+0x5c>
    6ba8:	3b01      	subs	r3, #1
    6baa:	60a3      	str	r3, [r4, #8]
    6bac:	2b00      	cmp	r3, #0
    6bae:	da0f      	bge.n	6bd0 <_puts_r+0xa8>
    6bb0:	0022      	movs	r2, r4
    6bb2:	310a      	adds	r1, #10
    6bb4:	0028      	movs	r0, r5
    6bb6:	f000 f9f3 	bl	6fa0 <__swbuf_r>
    6bba:	1c43      	adds	r3, r0, #1
    6bbc:	d0d5      	beq.n	6b6a <_puts_r+0x42>
    6bbe:	200a      	movs	r0, #10
    6bc0:	e7d5      	b.n	6b6e <_puts_r+0x46>
    6bc2:	0022      	movs	r2, r4
    6bc4:	0028      	movs	r0, r5
    6bc6:	f000 f9eb 	bl	6fa0 <__swbuf_r>
    6bca:	1c43      	adds	r3, r0, #1
    6bcc:	d1e8      	bne.n	6ba0 <_puts_r+0x78>
    6bce:	e7cc      	b.n	6b6a <_puts_r+0x42>
    6bd0:	200a      	movs	r0, #10
    6bd2:	6823      	ldr	r3, [r4, #0]
    6bd4:	1c5a      	adds	r2, r3, #1
    6bd6:	6022      	str	r2, [r4, #0]
    6bd8:	7018      	strb	r0, [r3, #0]
    6bda:	e7c8      	b.n	6b6e <_puts_r+0x46>
    6bdc:	0000b648 	.word	0x0000b648
    6be0:	0000b668 	.word	0x0000b668
    6be4:	0000b628 	.word	0x0000b628

00006be8 <puts>:
    6be8:	b510      	push	{r4, lr}
    6bea:	4b03      	ldr	r3, [pc, #12]	; (6bf8 <puts+0x10>)
    6bec:	0001      	movs	r1, r0
    6bee:	6818      	ldr	r0, [r3, #0]
    6bf0:	f7ff ff9a 	bl	6b28 <_puts_r>
    6bf4:	bd10      	pop	{r4, pc}
    6bf6:	46c0      	nop			; (mov r8, r8)
    6bf8:	2000004c 	.word	0x2000004c

00006bfc <_sbrk_r>:
    6bfc:	2300      	movs	r3, #0
    6bfe:	b570      	push	{r4, r5, r6, lr}
    6c00:	4c06      	ldr	r4, [pc, #24]	; (6c1c <_sbrk_r+0x20>)
    6c02:	0005      	movs	r5, r0
    6c04:	0008      	movs	r0, r1
    6c06:	6023      	str	r3, [r4, #0]
    6c08:	f7fd fe30 	bl	486c <_sbrk>
    6c0c:	1c43      	adds	r3, r0, #1
    6c0e:	d103      	bne.n	6c18 <_sbrk_r+0x1c>
    6c10:	6823      	ldr	r3, [r4, #0]
    6c12:	2b00      	cmp	r3, #0
    6c14:	d000      	beq.n	6c18 <_sbrk_r+0x1c>
    6c16:	602b      	str	r3, [r5, #0]
    6c18:	bd70      	pop	{r4, r5, r6, pc}
    6c1a:	46c0      	nop			; (mov r8, r8)
    6c1c:	20000398 	.word	0x20000398

00006c20 <setbuf>:
    6c20:	424a      	negs	r2, r1
    6c22:	414a      	adcs	r2, r1
    6c24:	2380      	movs	r3, #128	; 0x80
    6c26:	b510      	push	{r4, lr}
    6c28:	0052      	lsls	r2, r2, #1
    6c2a:	00db      	lsls	r3, r3, #3
    6c2c:	f000 f802 	bl	6c34 <setvbuf>
    6c30:	bd10      	pop	{r4, pc}
	...

00006c34 <setvbuf>:
    6c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c36:	001d      	movs	r5, r3
    6c38:	4b4f      	ldr	r3, [pc, #316]	; (6d78 <setvbuf+0x144>)
    6c3a:	b085      	sub	sp, #20
    6c3c:	681e      	ldr	r6, [r3, #0]
    6c3e:	0004      	movs	r4, r0
    6c40:	000f      	movs	r7, r1
    6c42:	9200      	str	r2, [sp, #0]
    6c44:	2e00      	cmp	r6, #0
    6c46:	d005      	beq.n	6c54 <setvbuf+0x20>
    6c48:	69b3      	ldr	r3, [r6, #24]
    6c4a:	2b00      	cmp	r3, #0
    6c4c:	d102      	bne.n	6c54 <setvbuf+0x20>
    6c4e:	0030      	movs	r0, r6
    6c50:	f001 f9e2 	bl	8018 <__sinit>
    6c54:	4b49      	ldr	r3, [pc, #292]	; (6d7c <setvbuf+0x148>)
    6c56:	429c      	cmp	r4, r3
    6c58:	d150      	bne.n	6cfc <setvbuf+0xc8>
    6c5a:	6874      	ldr	r4, [r6, #4]
    6c5c:	9b00      	ldr	r3, [sp, #0]
    6c5e:	2b02      	cmp	r3, #2
    6c60:	d005      	beq.n	6c6e <setvbuf+0x3a>
    6c62:	2b01      	cmp	r3, #1
    6c64:	d900      	bls.n	6c68 <setvbuf+0x34>
    6c66:	e084      	b.n	6d72 <setvbuf+0x13e>
    6c68:	2d00      	cmp	r5, #0
    6c6a:	da00      	bge.n	6c6e <setvbuf+0x3a>
    6c6c:	e081      	b.n	6d72 <setvbuf+0x13e>
    6c6e:	0021      	movs	r1, r4
    6c70:	0030      	movs	r0, r6
    6c72:	f001 f963 	bl	7f3c <_fflush_r>
    6c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6c78:	2900      	cmp	r1, #0
    6c7a:	d008      	beq.n	6c8e <setvbuf+0x5a>
    6c7c:	0023      	movs	r3, r4
    6c7e:	3344      	adds	r3, #68	; 0x44
    6c80:	4299      	cmp	r1, r3
    6c82:	d002      	beq.n	6c8a <setvbuf+0x56>
    6c84:	0030      	movs	r0, r6
    6c86:	f7ff fa1d 	bl	60c4 <_free_r>
    6c8a:	2300      	movs	r3, #0
    6c8c:	6363      	str	r3, [r4, #52]	; 0x34
    6c8e:	2300      	movs	r3, #0
    6c90:	61a3      	str	r3, [r4, #24]
    6c92:	6063      	str	r3, [r4, #4]
    6c94:	89a3      	ldrh	r3, [r4, #12]
    6c96:	061b      	lsls	r3, r3, #24
    6c98:	d503      	bpl.n	6ca2 <setvbuf+0x6e>
    6c9a:	6921      	ldr	r1, [r4, #16]
    6c9c:	0030      	movs	r0, r6
    6c9e:	f7ff fa11 	bl	60c4 <_free_r>
    6ca2:	89a3      	ldrh	r3, [r4, #12]
    6ca4:	4a36      	ldr	r2, [pc, #216]	; (6d80 <setvbuf+0x14c>)
    6ca6:	4013      	ands	r3, r2
    6ca8:	81a3      	strh	r3, [r4, #12]
    6caa:	9b00      	ldr	r3, [sp, #0]
    6cac:	2b02      	cmp	r3, #2
    6cae:	d05a      	beq.n	6d66 <setvbuf+0x132>
    6cb0:	ab03      	add	r3, sp, #12
    6cb2:	aa02      	add	r2, sp, #8
    6cb4:	0021      	movs	r1, r4
    6cb6:	0030      	movs	r0, r6
    6cb8:	f001 fa50 	bl	815c <__swhatbuf_r>
    6cbc:	89a3      	ldrh	r3, [r4, #12]
    6cbe:	4318      	orrs	r0, r3
    6cc0:	81a0      	strh	r0, [r4, #12]
    6cc2:	2d00      	cmp	r5, #0
    6cc4:	d124      	bne.n	6d10 <setvbuf+0xdc>
    6cc6:	9d02      	ldr	r5, [sp, #8]
    6cc8:	0028      	movs	r0, r5
    6cca:	f7ff f9cd 	bl	6068 <malloc>
    6cce:	9501      	str	r5, [sp, #4]
    6cd0:	1e07      	subs	r7, r0, #0
    6cd2:	d142      	bne.n	6d5a <setvbuf+0x126>
    6cd4:	9b02      	ldr	r3, [sp, #8]
    6cd6:	9301      	str	r3, [sp, #4]
    6cd8:	42ab      	cmp	r3, r5
    6cda:	d139      	bne.n	6d50 <setvbuf+0x11c>
    6cdc:	2001      	movs	r0, #1
    6cde:	4240      	negs	r0, r0
    6ce0:	2302      	movs	r3, #2
    6ce2:	89a2      	ldrh	r2, [r4, #12]
    6ce4:	4313      	orrs	r3, r2
    6ce6:	81a3      	strh	r3, [r4, #12]
    6ce8:	2300      	movs	r3, #0
    6cea:	60a3      	str	r3, [r4, #8]
    6cec:	0023      	movs	r3, r4
    6cee:	3347      	adds	r3, #71	; 0x47
    6cf0:	6023      	str	r3, [r4, #0]
    6cf2:	6123      	str	r3, [r4, #16]
    6cf4:	2301      	movs	r3, #1
    6cf6:	6163      	str	r3, [r4, #20]
    6cf8:	b005      	add	sp, #20
    6cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cfc:	4b21      	ldr	r3, [pc, #132]	; (6d84 <setvbuf+0x150>)
    6cfe:	429c      	cmp	r4, r3
    6d00:	d101      	bne.n	6d06 <setvbuf+0xd2>
    6d02:	68b4      	ldr	r4, [r6, #8]
    6d04:	e7aa      	b.n	6c5c <setvbuf+0x28>
    6d06:	4b20      	ldr	r3, [pc, #128]	; (6d88 <setvbuf+0x154>)
    6d08:	429c      	cmp	r4, r3
    6d0a:	d1a7      	bne.n	6c5c <setvbuf+0x28>
    6d0c:	68f4      	ldr	r4, [r6, #12]
    6d0e:	e7a5      	b.n	6c5c <setvbuf+0x28>
    6d10:	2f00      	cmp	r7, #0
    6d12:	d0d9      	beq.n	6cc8 <setvbuf+0x94>
    6d14:	69b3      	ldr	r3, [r6, #24]
    6d16:	2b00      	cmp	r3, #0
    6d18:	d102      	bne.n	6d20 <setvbuf+0xec>
    6d1a:	0030      	movs	r0, r6
    6d1c:	f001 f97c 	bl	8018 <__sinit>
    6d20:	9b00      	ldr	r3, [sp, #0]
    6d22:	2b01      	cmp	r3, #1
    6d24:	d103      	bne.n	6d2e <setvbuf+0xfa>
    6d26:	89a3      	ldrh	r3, [r4, #12]
    6d28:	9a00      	ldr	r2, [sp, #0]
    6d2a:	431a      	orrs	r2, r3
    6d2c:	81a2      	strh	r2, [r4, #12]
    6d2e:	2008      	movs	r0, #8
    6d30:	89a3      	ldrh	r3, [r4, #12]
    6d32:	6027      	str	r7, [r4, #0]
    6d34:	6127      	str	r7, [r4, #16]
    6d36:	6165      	str	r5, [r4, #20]
    6d38:	4018      	ands	r0, r3
    6d3a:	d018      	beq.n	6d6e <setvbuf+0x13a>
    6d3c:	2001      	movs	r0, #1
    6d3e:	4018      	ands	r0, r3
    6d40:	2300      	movs	r3, #0
    6d42:	4298      	cmp	r0, r3
    6d44:	d011      	beq.n	6d6a <setvbuf+0x136>
    6d46:	426d      	negs	r5, r5
    6d48:	60a3      	str	r3, [r4, #8]
    6d4a:	61a5      	str	r5, [r4, #24]
    6d4c:	0018      	movs	r0, r3
    6d4e:	e7d3      	b.n	6cf8 <setvbuf+0xc4>
    6d50:	9801      	ldr	r0, [sp, #4]
    6d52:	f7ff f989 	bl	6068 <malloc>
    6d56:	1e07      	subs	r7, r0, #0
    6d58:	d0c0      	beq.n	6cdc <setvbuf+0xa8>
    6d5a:	2380      	movs	r3, #128	; 0x80
    6d5c:	89a2      	ldrh	r2, [r4, #12]
    6d5e:	9d01      	ldr	r5, [sp, #4]
    6d60:	4313      	orrs	r3, r2
    6d62:	81a3      	strh	r3, [r4, #12]
    6d64:	e7d6      	b.n	6d14 <setvbuf+0xe0>
    6d66:	2000      	movs	r0, #0
    6d68:	e7ba      	b.n	6ce0 <setvbuf+0xac>
    6d6a:	60a5      	str	r5, [r4, #8]
    6d6c:	e7c4      	b.n	6cf8 <setvbuf+0xc4>
    6d6e:	60a0      	str	r0, [r4, #8]
    6d70:	e7c2      	b.n	6cf8 <setvbuf+0xc4>
    6d72:	2001      	movs	r0, #1
    6d74:	4240      	negs	r0, r0
    6d76:	e7bf      	b.n	6cf8 <setvbuf+0xc4>
    6d78:	2000004c 	.word	0x2000004c
    6d7c:	0000b648 	.word	0x0000b648
    6d80:	fffff35c 	.word	0xfffff35c
    6d84:	0000b668 	.word	0x0000b668
    6d88:	0000b628 	.word	0x0000b628

00006d8c <strcmp>:
    6d8c:	7802      	ldrb	r2, [r0, #0]
    6d8e:	780b      	ldrb	r3, [r1, #0]
    6d90:	2a00      	cmp	r2, #0
    6d92:	d003      	beq.n	6d9c <strcmp+0x10>
    6d94:	3001      	adds	r0, #1
    6d96:	3101      	adds	r1, #1
    6d98:	429a      	cmp	r2, r3
    6d9a:	d0f7      	beq.n	6d8c <strcmp>
    6d9c:	1ad0      	subs	r0, r2, r3
    6d9e:	4770      	bx	lr

00006da0 <strcpy>:
    6da0:	1c03      	adds	r3, r0, #0
    6da2:	780a      	ldrb	r2, [r1, #0]
    6da4:	3101      	adds	r1, #1
    6da6:	701a      	strb	r2, [r3, #0]
    6da8:	3301      	adds	r3, #1
    6daa:	2a00      	cmp	r2, #0
    6dac:	d1f9      	bne.n	6da2 <strcpy+0x2>
    6dae:	4770      	bx	lr

00006db0 <strlen>:
    6db0:	2300      	movs	r3, #0
    6db2:	5cc2      	ldrb	r2, [r0, r3]
    6db4:	3301      	adds	r3, #1
    6db6:	2a00      	cmp	r2, #0
    6db8:	d1fb      	bne.n	6db2 <strlen+0x2>
    6dba:	1e58      	subs	r0, r3, #1
    6dbc:	4770      	bx	lr
	...

00006dc0 <strtok>:
    6dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6dc2:	4b12      	ldr	r3, [pc, #72]	; (6e0c <strtok+0x4c>)
    6dc4:	0006      	movs	r6, r0
    6dc6:	681d      	ldr	r5, [r3, #0]
    6dc8:	000f      	movs	r7, r1
    6dca:	6dac      	ldr	r4, [r5, #88]	; 0x58
    6dcc:	2c00      	cmp	r4, #0
    6dce:	d116      	bne.n	6dfe <strtok+0x3e>
    6dd0:	2050      	movs	r0, #80	; 0x50
    6dd2:	f7ff f949 	bl	6068 <malloc>
    6dd6:	65a8      	str	r0, [r5, #88]	; 0x58
    6dd8:	6004      	str	r4, [r0, #0]
    6dda:	6044      	str	r4, [r0, #4]
    6ddc:	6084      	str	r4, [r0, #8]
    6dde:	60c4      	str	r4, [r0, #12]
    6de0:	6104      	str	r4, [r0, #16]
    6de2:	6144      	str	r4, [r0, #20]
    6de4:	6184      	str	r4, [r0, #24]
    6de6:	6284      	str	r4, [r0, #40]	; 0x28
    6de8:	62c4      	str	r4, [r0, #44]	; 0x2c
    6dea:	6304      	str	r4, [r0, #48]	; 0x30
    6dec:	6344      	str	r4, [r0, #52]	; 0x34
    6dee:	6384      	str	r4, [r0, #56]	; 0x38
    6df0:	63c4      	str	r4, [r0, #60]	; 0x3c
    6df2:	6404      	str	r4, [r0, #64]	; 0x40
    6df4:	6444      	str	r4, [r0, #68]	; 0x44
    6df6:	6484      	str	r4, [r0, #72]	; 0x48
    6df8:	64c4      	str	r4, [r0, #76]	; 0x4c
    6dfa:	7704      	strb	r4, [r0, #28]
    6dfc:	6244      	str	r4, [r0, #36]	; 0x24
    6dfe:	6daa      	ldr	r2, [r5, #88]	; 0x58
    6e00:	0039      	movs	r1, r7
    6e02:	0030      	movs	r0, r6
    6e04:	2301      	movs	r3, #1
    6e06:	f000 f803 	bl	6e10 <__strtok_r>
    6e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e0c:	2000004c 	.word	0x2000004c

00006e10 <__strtok_r>:
    6e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e12:	2800      	cmp	r0, #0
    6e14:	d104      	bne.n	6e20 <__strtok_r+0x10>
    6e16:	6810      	ldr	r0, [r2, #0]
    6e18:	2800      	cmp	r0, #0
    6e1a:	d101      	bne.n	6e20 <__strtok_r+0x10>
    6e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e1e:	0020      	movs	r0, r4
    6e20:	000e      	movs	r6, r1
    6e22:	7805      	ldrb	r5, [r0, #0]
    6e24:	1c44      	adds	r4, r0, #1
    6e26:	7837      	ldrb	r7, [r6, #0]
    6e28:	2f00      	cmp	r7, #0
    6e2a:	d104      	bne.n	6e36 <__strtok_r+0x26>
    6e2c:	2d00      	cmp	r5, #0
    6e2e:	d110      	bne.n	6e52 <__strtok_r+0x42>
    6e30:	6015      	str	r5, [r2, #0]
    6e32:	0028      	movs	r0, r5
    6e34:	e7f2      	b.n	6e1c <__strtok_r+0xc>
    6e36:	3601      	adds	r6, #1
    6e38:	42bd      	cmp	r5, r7
    6e3a:	d1f4      	bne.n	6e26 <__strtok_r+0x16>
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	d1ee      	bne.n	6e1e <__strtok_r+0xe>
    6e40:	6014      	str	r4, [r2, #0]
    6e42:	7003      	strb	r3, [r0, #0]
    6e44:	e7ea      	b.n	6e1c <__strtok_r+0xc>
    6e46:	0033      	movs	r3, r6
    6e48:	e00e      	b.n	6e68 <__strtok_r+0x58>
    6e4a:	3501      	adds	r5, #1
    6e4c:	001c      	movs	r4, r3
    6e4e:	2f00      	cmp	r7, #0
    6e50:	d102      	bne.n	6e58 <__strtok_r+0x48>
    6e52:	000d      	movs	r5, r1
    6e54:	7826      	ldrb	r6, [r4, #0]
    6e56:	1c63      	adds	r3, r4, #1
    6e58:	782f      	ldrb	r7, [r5, #0]
    6e5a:	42be      	cmp	r6, r7
    6e5c:	d1f5      	bne.n	6e4a <__strtok_r+0x3a>
    6e5e:	2e00      	cmp	r6, #0
    6e60:	d0f1      	beq.n	6e46 <__strtok_r+0x36>
    6e62:	2400      	movs	r4, #0
    6e64:	1e59      	subs	r1, r3, #1
    6e66:	700c      	strb	r4, [r1, #0]
    6e68:	6013      	str	r3, [r2, #0]
    6e6a:	e7d7      	b.n	6e1c <__strtok_r+0xc>

00006e6c <_strtol_l.isra.0>:
    6e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e6e:	001f      	movs	r7, r3
    6e70:	000e      	movs	r6, r1
    6e72:	b087      	sub	sp, #28
    6e74:	9005      	str	r0, [sp, #20]
    6e76:	9103      	str	r1, [sp, #12]
    6e78:	9202      	str	r2, [sp, #8]
    6e7a:	980c      	ldr	r0, [sp, #48]	; 0x30
    6e7c:	7834      	ldrb	r4, [r6, #0]
    6e7e:	f7ff f8e1 	bl	6044 <__locale_ctype_ptr_l>
    6e82:	2208      	movs	r2, #8
    6e84:	1900      	adds	r0, r0, r4
    6e86:	7843      	ldrb	r3, [r0, #1]
    6e88:	1c75      	adds	r5, r6, #1
    6e8a:	4013      	ands	r3, r2
    6e8c:	d10c      	bne.n	6ea8 <_strtol_l.isra.0+0x3c>
    6e8e:	2c2d      	cmp	r4, #45	; 0x2d
    6e90:	d10c      	bne.n	6eac <_strtol_l.isra.0+0x40>
    6e92:	3301      	adds	r3, #1
    6e94:	782c      	ldrb	r4, [r5, #0]
    6e96:	9301      	str	r3, [sp, #4]
    6e98:	1cb5      	adds	r5, r6, #2
    6e9a:	2f00      	cmp	r7, #0
    6e9c:	d00c      	beq.n	6eb8 <_strtol_l.isra.0+0x4c>
    6e9e:	2f10      	cmp	r7, #16
    6ea0:	d114      	bne.n	6ecc <_strtol_l.isra.0+0x60>
    6ea2:	2c30      	cmp	r4, #48	; 0x30
    6ea4:	d00a      	beq.n	6ebc <_strtol_l.isra.0+0x50>
    6ea6:	e011      	b.n	6ecc <_strtol_l.isra.0+0x60>
    6ea8:	002e      	movs	r6, r5
    6eaa:	e7e6      	b.n	6e7a <_strtol_l.isra.0+0xe>
    6eac:	9301      	str	r3, [sp, #4]
    6eae:	2c2b      	cmp	r4, #43	; 0x2b
    6eb0:	d1f3      	bne.n	6e9a <_strtol_l.isra.0+0x2e>
    6eb2:	782c      	ldrb	r4, [r5, #0]
    6eb4:	1cb5      	adds	r5, r6, #2
    6eb6:	e7f0      	b.n	6e9a <_strtol_l.isra.0+0x2e>
    6eb8:	2c30      	cmp	r4, #48	; 0x30
    6eba:	d12f      	bne.n	6f1c <_strtol_l.isra.0+0xb0>
    6ebc:	2220      	movs	r2, #32
    6ebe:	782b      	ldrb	r3, [r5, #0]
    6ec0:	4393      	bics	r3, r2
    6ec2:	2b58      	cmp	r3, #88	; 0x58
    6ec4:	d151      	bne.n	6f6a <_strtol_l.isra.0+0xfe>
    6ec6:	2710      	movs	r7, #16
    6ec8:	786c      	ldrb	r4, [r5, #1]
    6eca:	3502      	adds	r5, #2
    6ecc:	9b01      	ldr	r3, [sp, #4]
    6ece:	4a29      	ldr	r2, [pc, #164]	; (6f74 <_strtol_l.isra.0+0x108>)
    6ed0:	0039      	movs	r1, r7
    6ed2:	189e      	adds	r6, r3, r2
    6ed4:	0030      	movs	r0, r6
    6ed6:	f001 ff3d 	bl	8d54 <__aeabi_uidivmod>
    6eda:	0030      	movs	r0, r6
    6edc:	9104      	str	r1, [sp, #16]
    6ede:	0039      	movs	r1, r7
    6ee0:	f001 feb2 	bl	8c48 <__udivsi3>
    6ee4:	2101      	movs	r1, #1
    6ee6:	2300      	movs	r3, #0
    6ee8:	4249      	negs	r1, r1
    6eea:	0002      	movs	r2, r0
    6eec:	468c      	mov	ip, r1
    6eee:	0018      	movs	r0, r3
    6ef0:	0021      	movs	r1, r4
    6ef2:	3930      	subs	r1, #48	; 0x30
    6ef4:	2909      	cmp	r1, #9
    6ef6:	d813      	bhi.n	6f20 <_strtol_l.isra.0+0xb4>
    6ef8:	000c      	movs	r4, r1
    6efa:	42a7      	cmp	r7, r4
    6efc:	dd1c      	ble.n	6f38 <_strtol_l.isra.0+0xcc>
    6efe:	1c59      	adds	r1, r3, #1
    6f00:	d009      	beq.n	6f16 <_strtol_l.isra.0+0xaa>
    6f02:	4663      	mov	r3, ip
    6f04:	4282      	cmp	r2, r0
    6f06:	d306      	bcc.n	6f16 <_strtol_l.isra.0+0xaa>
    6f08:	d102      	bne.n	6f10 <_strtol_l.isra.0+0xa4>
    6f0a:	9904      	ldr	r1, [sp, #16]
    6f0c:	42a1      	cmp	r1, r4
    6f0e:	db02      	blt.n	6f16 <_strtol_l.isra.0+0xaa>
    6f10:	2301      	movs	r3, #1
    6f12:	4378      	muls	r0, r7
    6f14:	1820      	adds	r0, r4, r0
    6f16:	782c      	ldrb	r4, [r5, #0]
    6f18:	3501      	adds	r5, #1
    6f1a:	e7e9      	b.n	6ef0 <_strtol_l.isra.0+0x84>
    6f1c:	270a      	movs	r7, #10
    6f1e:	e7d5      	b.n	6ecc <_strtol_l.isra.0+0x60>
    6f20:	0021      	movs	r1, r4
    6f22:	3941      	subs	r1, #65	; 0x41
    6f24:	2919      	cmp	r1, #25
    6f26:	d801      	bhi.n	6f2c <_strtol_l.isra.0+0xc0>
    6f28:	3c37      	subs	r4, #55	; 0x37
    6f2a:	e7e6      	b.n	6efa <_strtol_l.isra.0+0x8e>
    6f2c:	0021      	movs	r1, r4
    6f2e:	3961      	subs	r1, #97	; 0x61
    6f30:	2919      	cmp	r1, #25
    6f32:	d801      	bhi.n	6f38 <_strtol_l.isra.0+0xcc>
    6f34:	3c57      	subs	r4, #87	; 0x57
    6f36:	e7e0      	b.n	6efa <_strtol_l.isra.0+0x8e>
    6f38:	1c5a      	adds	r2, r3, #1
    6f3a:	d108      	bne.n	6f4e <_strtol_l.isra.0+0xe2>
    6f3c:	9a05      	ldr	r2, [sp, #20]
    6f3e:	3323      	adds	r3, #35	; 0x23
    6f40:	6013      	str	r3, [r2, #0]
    6f42:	9b02      	ldr	r3, [sp, #8]
    6f44:	0030      	movs	r0, r6
    6f46:	2b00      	cmp	r3, #0
    6f48:	d10b      	bne.n	6f62 <_strtol_l.isra.0+0xf6>
    6f4a:	b007      	add	sp, #28
    6f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f4e:	9a01      	ldr	r2, [sp, #4]
    6f50:	2a00      	cmp	r2, #0
    6f52:	d000      	beq.n	6f56 <_strtol_l.isra.0+0xea>
    6f54:	4240      	negs	r0, r0
    6f56:	9a02      	ldr	r2, [sp, #8]
    6f58:	2a00      	cmp	r2, #0
    6f5a:	d0f6      	beq.n	6f4a <_strtol_l.isra.0+0xde>
    6f5c:	9a03      	ldr	r2, [sp, #12]
    6f5e:	2b00      	cmp	r3, #0
    6f60:	d000      	beq.n	6f64 <_strtol_l.isra.0+0xf8>
    6f62:	1e6a      	subs	r2, r5, #1
    6f64:	9b02      	ldr	r3, [sp, #8]
    6f66:	601a      	str	r2, [r3, #0]
    6f68:	e7ef      	b.n	6f4a <_strtol_l.isra.0+0xde>
    6f6a:	2430      	movs	r4, #48	; 0x30
    6f6c:	2f00      	cmp	r7, #0
    6f6e:	d1ad      	bne.n	6ecc <_strtol_l.isra.0+0x60>
    6f70:	3708      	adds	r7, #8
    6f72:	e7ab      	b.n	6ecc <_strtol_l.isra.0+0x60>
    6f74:	7fffffff 	.word	0x7fffffff

00006f78 <strtol>:
    6f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6f7a:	0013      	movs	r3, r2
    6f7c:	4a06      	ldr	r2, [pc, #24]	; (6f98 <strtol+0x20>)
    6f7e:	0005      	movs	r5, r0
    6f80:	6810      	ldr	r0, [r2, #0]
    6f82:	6a04      	ldr	r4, [r0, #32]
    6f84:	2c00      	cmp	r4, #0
    6f86:	d100      	bne.n	6f8a <strtol+0x12>
    6f88:	4c04      	ldr	r4, [pc, #16]	; (6f9c <strtol+0x24>)
    6f8a:	000a      	movs	r2, r1
    6f8c:	9400      	str	r4, [sp, #0]
    6f8e:	0029      	movs	r1, r5
    6f90:	f7ff ff6c 	bl	6e6c <_strtol_l.isra.0>
    6f94:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6f96:	46c0      	nop			; (mov r8, r8)
    6f98:	2000004c 	.word	0x2000004c
    6f9c:	200000b0 	.word	0x200000b0

00006fa0 <__swbuf_r>:
    6fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fa2:	0005      	movs	r5, r0
    6fa4:	000e      	movs	r6, r1
    6fa6:	0014      	movs	r4, r2
    6fa8:	2800      	cmp	r0, #0
    6faa:	d004      	beq.n	6fb6 <__swbuf_r+0x16>
    6fac:	6983      	ldr	r3, [r0, #24]
    6fae:	2b00      	cmp	r3, #0
    6fb0:	d101      	bne.n	6fb6 <__swbuf_r+0x16>
    6fb2:	f001 f831 	bl	8018 <__sinit>
    6fb6:	4b22      	ldr	r3, [pc, #136]	; (7040 <__swbuf_r+0xa0>)
    6fb8:	429c      	cmp	r4, r3
    6fba:	d12d      	bne.n	7018 <__swbuf_r+0x78>
    6fbc:	686c      	ldr	r4, [r5, #4]
    6fbe:	69a3      	ldr	r3, [r4, #24]
    6fc0:	60a3      	str	r3, [r4, #8]
    6fc2:	89a3      	ldrh	r3, [r4, #12]
    6fc4:	071b      	lsls	r3, r3, #28
    6fc6:	d531      	bpl.n	702c <__swbuf_r+0x8c>
    6fc8:	6923      	ldr	r3, [r4, #16]
    6fca:	2b00      	cmp	r3, #0
    6fcc:	d02e      	beq.n	702c <__swbuf_r+0x8c>
    6fce:	6823      	ldr	r3, [r4, #0]
    6fd0:	6922      	ldr	r2, [r4, #16]
    6fd2:	b2f7      	uxtb	r7, r6
    6fd4:	1a98      	subs	r0, r3, r2
    6fd6:	6963      	ldr	r3, [r4, #20]
    6fd8:	b2f6      	uxtb	r6, r6
    6fda:	4298      	cmp	r0, r3
    6fdc:	db05      	blt.n	6fea <__swbuf_r+0x4a>
    6fde:	0021      	movs	r1, r4
    6fe0:	0028      	movs	r0, r5
    6fe2:	f000 ffab 	bl	7f3c <_fflush_r>
    6fe6:	2800      	cmp	r0, #0
    6fe8:	d126      	bne.n	7038 <__swbuf_r+0x98>
    6fea:	68a3      	ldr	r3, [r4, #8]
    6fec:	3001      	adds	r0, #1
    6fee:	3b01      	subs	r3, #1
    6ff0:	60a3      	str	r3, [r4, #8]
    6ff2:	6823      	ldr	r3, [r4, #0]
    6ff4:	1c5a      	adds	r2, r3, #1
    6ff6:	6022      	str	r2, [r4, #0]
    6ff8:	701f      	strb	r7, [r3, #0]
    6ffa:	6963      	ldr	r3, [r4, #20]
    6ffc:	4298      	cmp	r0, r3
    6ffe:	d004      	beq.n	700a <__swbuf_r+0x6a>
    7000:	89a3      	ldrh	r3, [r4, #12]
    7002:	07db      	lsls	r3, r3, #31
    7004:	d51a      	bpl.n	703c <__swbuf_r+0x9c>
    7006:	2e0a      	cmp	r6, #10
    7008:	d118      	bne.n	703c <__swbuf_r+0x9c>
    700a:	0021      	movs	r1, r4
    700c:	0028      	movs	r0, r5
    700e:	f000 ff95 	bl	7f3c <_fflush_r>
    7012:	2800      	cmp	r0, #0
    7014:	d012      	beq.n	703c <__swbuf_r+0x9c>
    7016:	e00f      	b.n	7038 <__swbuf_r+0x98>
    7018:	4b0a      	ldr	r3, [pc, #40]	; (7044 <__swbuf_r+0xa4>)
    701a:	429c      	cmp	r4, r3
    701c:	d101      	bne.n	7022 <__swbuf_r+0x82>
    701e:	68ac      	ldr	r4, [r5, #8]
    7020:	e7cd      	b.n	6fbe <__swbuf_r+0x1e>
    7022:	4b09      	ldr	r3, [pc, #36]	; (7048 <__swbuf_r+0xa8>)
    7024:	429c      	cmp	r4, r3
    7026:	d1ca      	bne.n	6fbe <__swbuf_r+0x1e>
    7028:	68ec      	ldr	r4, [r5, #12]
    702a:	e7c8      	b.n	6fbe <__swbuf_r+0x1e>
    702c:	0021      	movs	r1, r4
    702e:	0028      	movs	r0, r5
    7030:	f000 f818 	bl	7064 <__swsetup_r>
    7034:	2800      	cmp	r0, #0
    7036:	d0ca      	beq.n	6fce <__swbuf_r+0x2e>
    7038:	2601      	movs	r6, #1
    703a:	4276      	negs	r6, r6
    703c:	0030      	movs	r0, r6
    703e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7040:	0000b648 	.word	0x0000b648
    7044:	0000b668 	.word	0x0000b668
    7048:	0000b628 	.word	0x0000b628

0000704c <__ascii_wctomb>:
    704c:	1e0b      	subs	r3, r1, #0
    704e:	d004      	beq.n	705a <__ascii_wctomb+0xe>
    7050:	2aff      	cmp	r2, #255	; 0xff
    7052:	d904      	bls.n	705e <__ascii_wctomb+0x12>
    7054:	238a      	movs	r3, #138	; 0x8a
    7056:	6003      	str	r3, [r0, #0]
    7058:	3b8b      	subs	r3, #139	; 0x8b
    705a:	0018      	movs	r0, r3
    705c:	4770      	bx	lr
    705e:	700a      	strb	r2, [r1, #0]
    7060:	2301      	movs	r3, #1
    7062:	e7fa      	b.n	705a <__ascii_wctomb+0xe>

00007064 <__swsetup_r>:
    7064:	4b36      	ldr	r3, [pc, #216]	; (7140 <__swsetup_r+0xdc>)
    7066:	b570      	push	{r4, r5, r6, lr}
    7068:	681d      	ldr	r5, [r3, #0]
    706a:	0006      	movs	r6, r0
    706c:	000c      	movs	r4, r1
    706e:	2d00      	cmp	r5, #0
    7070:	d005      	beq.n	707e <__swsetup_r+0x1a>
    7072:	69ab      	ldr	r3, [r5, #24]
    7074:	2b00      	cmp	r3, #0
    7076:	d102      	bne.n	707e <__swsetup_r+0x1a>
    7078:	0028      	movs	r0, r5
    707a:	f000 ffcd 	bl	8018 <__sinit>
    707e:	4b31      	ldr	r3, [pc, #196]	; (7144 <__swsetup_r+0xe0>)
    7080:	429c      	cmp	r4, r3
    7082:	d10f      	bne.n	70a4 <__swsetup_r+0x40>
    7084:	686c      	ldr	r4, [r5, #4]
    7086:	230c      	movs	r3, #12
    7088:	5ee2      	ldrsh	r2, [r4, r3]
    708a:	b293      	uxth	r3, r2
    708c:	0719      	lsls	r1, r3, #28
    708e:	d42d      	bmi.n	70ec <__swsetup_r+0x88>
    7090:	06d9      	lsls	r1, r3, #27
    7092:	d411      	bmi.n	70b8 <__swsetup_r+0x54>
    7094:	2309      	movs	r3, #9
    7096:	2001      	movs	r0, #1
    7098:	6033      	str	r3, [r6, #0]
    709a:	3337      	adds	r3, #55	; 0x37
    709c:	4313      	orrs	r3, r2
    709e:	81a3      	strh	r3, [r4, #12]
    70a0:	4240      	negs	r0, r0
    70a2:	bd70      	pop	{r4, r5, r6, pc}
    70a4:	4b28      	ldr	r3, [pc, #160]	; (7148 <__swsetup_r+0xe4>)
    70a6:	429c      	cmp	r4, r3
    70a8:	d101      	bne.n	70ae <__swsetup_r+0x4a>
    70aa:	68ac      	ldr	r4, [r5, #8]
    70ac:	e7eb      	b.n	7086 <__swsetup_r+0x22>
    70ae:	4b27      	ldr	r3, [pc, #156]	; (714c <__swsetup_r+0xe8>)
    70b0:	429c      	cmp	r4, r3
    70b2:	d1e8      	bne.n	7086 <__swsetup_r+0x22>
    70b4:	68ec      	ldr	r4, [r5, #12]
    70b6:	e7e6      	b.n	7086 <__swsetup_r+0x22>
    70b8:	075b      	lsls	r3, r3, #29
    70ba:	d513      	bpl.n	70e4 <__swsetup_r+0x80>
    70bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    70be:	2900      	cmp	r1, #0
    70c0:	d008      	beq.n	70d4 <__swsetup_r+0x70>
    70c2:	0023      	movs	r3, r4
    70c4:	3344      	adds	r3, #68	; 0x44
    70c6:	4299      	cmp	r1, r3
    70c8:	d002      	beq.n	70d0 <__swsetup_r+0x6c>
    70ca:	0030      	movs	r0, r6
    70cc:	f7fe fffa 	bl	60c4 <_free_r>
    70d0:	2300      	movs	r3, #0
    70d2:	6363      	str	r3, [r4, #52]	; 0x34
    70d4:	2224      	movs	r2, #36	; 0x24
    70d6:	89a3      	ldrh	r3, [r4, #12]
    70d8:	4393      	bics	r3, r2
    70da:	81a3      	strh	r3, [r4, #12]
    70dc:	2300      	movs	r3, #0
    70de:	6063      	str	r3, [r4, #4]
    70e0:	6923      	ldr	r3, [r4, #16]
    70e2:	6023      	str	r3, [r4, #0]
    70e4:	2308      	movs	r3, #8
    70e6:	89a2      	ldrh	r2, [r4, #12]
    70e8:	4313      	orrs	r3, r2
    70ea:	81a3      	strh	r3, [r4, #12]
    70ec:	6923      	ldr	r3, [r4, #16]
    70ee:	2b00      	cmp	r3, #0
    70f0:	d10b      	bne.n	710a <__swsetup_r+0xa6>
    70f2:	21a0      	movs	r1, #160	; 0xa0
    70f4:	2280      	movs	r2, #128	; 0x80
    70f6:	89a3      	ldrh	r3, [r4, #12]
    70f8:	0089      	lsls	r1, r1, #2
    70fa:	0092      	lsls	r2, r2, #2
    70fc:	400b      	ands	r3, r1
    70fe:	4293      	cmp	r3, r2
    7100:	d003      	beq.n	710a <__swsetup_r+0xa6>
    7102:	0021      	movs	r1, r4
    7104:	0030      	movs	r0, r6
    7106:	f001 f851 	bl	81ac <__smakebuf_r>
    710a:	2301      	movs	r3, #1
    710c:	89a2      	ldrh	r2, [r4, #12]
    710e:	4013      	ands	r3, r2
    7110:	d011      	beq.n	7136 <__swsetup_r+0xd2>
    7112:	2300      	movs	r3, #0
    7114:	60a3      	str	r3, [r4, #8]
    7116:	6963      	ldr	r3, [r4, #20]
    7118:	425b      	negs	r3, r3
    711a:	61a3      	str	r3, [r4, #24]
    711c:	2000      	movs	r0, #0
    711e:	6923      	ldr	r3, [r4, #16]
    7120:	4283      	cmp	r3, r0
    7122:	d1be      	bne.n	70a2 <__swsetup_r+0x3e>
    7124:	230c      	movs	r3, #12
    7126:	5ee2      	ldrsh	r2, [r4, r3]
    7128:	0613      	lsls	r3, r2, #24
    712a:	d5ba      	bpl.n	70a2 <__swsetup_r+0x3e>
    712c:	2340      	movs	r3, #64	; 0x40
    712e:	4313      	orrs	r3, r2
    7130:	81a3      	strh	r3, [r4, #12]
    7132:	3801      	subs	r0, #1
    7134:	e7b5      	b.n	70a2 <__swsetup_r+0x3e>
    7136:	0792      	lsls	r2, r2, #30
    7138:	d400      	bmi.n	713c <__swsetup_r+0xd8>
    713a:	6963      	ldr	r3, [r4, #20]
    713c:	60a3      	str	r3, [r4, #8]
    713e:	e7ed      	b.n	711c <__swsetup_r+0xb8>
    7140:	2000004c 	.word	0x2000004c
    7144:	0000b648 	.word	0x0000b648
    7148:	0000b668 	.word	0x0000b668
    714c:	0000b628 	.word	0x0000b628

00007150 <quorem>:
    7150:	b5f0      	push	{r4, r5, r6, r7, lr}
    7152:	6903      	ldr	r3, [r0, #16]
    7154:	690c      	ldr	r4, [r1, #16]
    7156:	b089      	sub	sp, #36	; 0x24
    7158:	0007      	movs	r7, r0
    715a:	9105      	str	r1, [sp, #20]
    715c:	2600      	movs	r6, #0
    715e:	429c      	cmp	r4, r3
    7160:	dc6d      	bgt.n	723e <quorem+0xee>
    7162:	000b      	movs	r3, r1
    7164:	3c01      	subs	r4, #1
    7166:	3314      	adds	r3, #20
    7168:	00a5      	lsls	r5, r4, #2
    716a:	9303      	str	r3, [sp, #12]
    716c:	195b      	adds	r3, r3, r5
    716e:	9304      	str	r3, [sp, #16]
    7170:	0003      	movs	r3, r0
    7172:	3314      	adds	r3, #20
    7174:	9302      	str	r3, [sp, #8]
    7176:	195d      	adds	r5, r3, r5
    7178:	9b04      	ldr	r3, [sp, #16]
    717a:	6828      	ldr	r0, [r5, #0]
    717c:	681b      	ldr	r3, [r3, #0]
    717e:	1c59      	adds	r1, r3, #1
    7180:	9301      	str	r3, [sp, #4]
    7182:	f001 fd61 	bl	8c48 <__udivsi3>
    7186:	9001      	str	r0, [sp, #4]
    7188:	42b0      	cmp	r0, r6
    718a:	d02d      	beq.n	71e8 <quorem+0x98>
    718c:	9b03      	ldr	r3, [sp, #12]
    718e:	9802      	ldr	r0, [sp, #8]
    7190:	469c      	mov	ip, r3
    7192:	9606      	str	r6, [sp, #24]
    7194:	4662      	mov	r2, ip
    7196:	ca08      	ldmia	r2!, {r3}
    7198:	4694      	mov	ip, r2
    719a:	9a01      	ldr	r2, [sp, #4]
    719c:	b299      	uxth	r1, r3
    719e:	4351      	muls	r1, r2
    71a0:	0c1b      	lsrs	r3, r3, #16
    71a2:	4353      	muls	r3, r2
    71a4:	1989      	adds	r1, r1, r6
    71a6:	0c0a      	lsrs	r2, r1, #16
    71a8:	189b      	adds	r3, r3, r2
    71aa:	9307      	str	r3, [sp, #28]
    71ac:	8802      	ldrh	r2, [r0, #0]
    71ae:	0c1e      	lsrs	r6, r3, #16
    71b0:	9b06      	ldr	r3, [sp, #24]
    71b2:	b289      	uxth	r1, r1
    71b4:	18d2      	adds	r2, r2, r3
    71b6:	6803      	ldr	r3, [r0, #0]
    71b8:	1a52      	subs	r2, r2, r1
    71ba:	0c19      	lsrs	r1, r3, #16
    71bc:	466b      	mov	r3, sp
    71be:	8b9b      	ldrh	r3, [r3, #28]
    71c0:	1acb      	subs	r3, r1, r3
    71c2:	1411      	asrs	r1, r2, #16
    71c4:	185b      	adds	r3, r3, r1
    71c6:	1419      	asrs	r1, r3, #16
    71c8:	b292      	uxth	r2, r2
    71ca:	041b      	lsls	r3, r3, #16
    71cc:	431a      	orrs	r2, r3
    71ce:	9b04      	ldr	r3, [sp, #16]
    71d0:	9106      	str	r1, [sp, #24]
    71d2:	c004      	stmia	r0!, {r2}
    71d4:	4563      	cmp	r3, ip
    71d6:	d2dd      	bcs.n	7194 <quorem+0x44>
    71d8:	682b      	ldr	r3, [r5, #0]
    71da:	2b00      	cmp	r3, #0
    71dc:	d104      	bne.n	71e8 <quorem+0x98>
    71de:	9b02      	ldr	r3, [sp, #8]
    71e0:	3d04      	subs	r5, #4
    71e2:	42ab      	cmp	r3, r5
    71e4:	d32e      	bcc.n	7244 <quorem+0xf4>
    71e6:	613c      	str	r4, [r7, #16]
    71e8:	9905      	ldr	r1, [sp, #20]
    71ea:	0038      	movs	r0, r7
    71ec:	f001 fa41 	bl	8672 <__mcmp>
    71f0:	2800      	cmp	r0, #0
    71f2:	db23      	blt.n	723c <quorem+0xec>
    71f4:	2500      	movs	r5, #0
    71f6:	9b01      	ldr	r3, [sp, #4]
    71f8:	9802      	ldr	r0, [sp, #8]
    71fa:	3301      	adds	r3, #1
    71fc:	9903      	ldr	r1, [sp, #12]
    71fe:	9301      	str	r3, [sp, #4]
    7200:	c908      	ldmia	r1!, {r3}
    7202:	8802      	ldrh	r2, [r0, #0]
    7204:	1955      	adds	r5, r2, r5
    7206:	b29a      	uxth	r2, r3
    7208:	1aaa      	subs	r2, r5, r2
    720a:	6805      	ldr	r5, [r0, #0]
    720c:	0c1b      	lsrs	r3, r3, #16
    720e:	0c2d      	lsrs	r5, r5, #16
    7210:	1aeb      	subs	r3, r5, r3
    7212:	1415      	asrs	r5, r2, #16
    7214:	195b      	adds	r3, r3, r5
    7216:	141d      	asrs	r5, r3, #16
    7218:	b292      	uxth	r2, r2
    721a:	041b      	lsls	r3, r3, #16
    721c:	4313      	orrs	r3, r2
    721e:	c008      	stmia	r0!, {r3}
    7220:	9b04      	ldr	r3, [sp, #16]
    7222:	428b      	cmp	r3, r1
    7224:	d2ec      	bcs.n	7200 <quorem+0xb0>
    7226:	9a02      	ldr	r2, [sp, #8]
    7228:	00a3      	lsls	r3, r4, #2
    722a:	18d3      	adds	r3, r2, r3
    722c:	681a      	ldr	r2, [r3, #0]
    722e:	2a00      	cmp	r2, #0
    7230:	d104      	bne.n	723c <quorem+0xec>
    7232:	9a02      	ldr	r2, [sp, #8]
    7234:	3b04      	subs	r3, #4
    7236:	429a      	cmp	r2, r3
    7238:	d309      	bcc.n	724e <quorem+0xfe>
    723a:	613c      	str	r4, [r7, #16]
    723c:	9e01      	ldr	r6, [sp, #4]
    723e:	0030      	movs	r0, r6
    7240:	b009      	add	sp, #36	; 0x24
    7242:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7244:	682b      	ldr	r3, [r5, #0]
    7246:	2b00      	cmp	r3, #0
    7248:	d1cd      	bne.n	71e6 <quorem+0x96>
    724a:	3c01      	subs	r4, #1
    724c:	e7c7      	b.n	71de <quorem+0x8e>
    724e:	681a      	ldr	r2, [r3, #0]
    7250:	2a00      	cmp	r2, #0
    7252:	d1f2      	bne.n	723a <quorem+0xea>
    7254:	3c01      	subs	r4, #1
    7256:	e7ec      	b.n	7232 <quorem+0xe2>

00007258 <_dtoa_r>:
    7258:	b5f0      	push	{r4, r5, r6, r7, lr}
    725a:	0016      	movs	r6, r2
    725c:	001f      	movs	r7, r3
    725e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    7260:	b09d      	sub	sp, #116	; 0x74
    7262:	9004      	str	r0, [sp, #16]
    7264:	9d25      	ldr	r5, [sp, #148]	; 0x94
    7266:	9606      	str	r6, [sp, #24]
    7268:	9707      	str	r7, [sp, #28]
    726a:	2c00      	cmp	r4, #0
    726c:	d108      	bne.n	7280 <_dtoa_r+0x28>
    726e:	2010      	movs	r0, #16
    7270:	f7fe fefa 	bl	6068 <malloc>
    7274:	9b04      	ldr	r3, [sp, #16]
    7276:	6258      	str	r0, [r3, #36]	; 0x24
    7278:	6044      	str	r4, [r0, #4]
    727a:	6084      	str	r4, [r0, #8]
    727c:	6004      	str	r4, [r0, #0]
    727e:	60c4      	str	r4, [r0, #12]
    7280:	9b04      	ldr	r3, [sp, #16]
    7282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7284:	6819      	ldr	r1, [r3, #0]
    7286:	2900      	cmp	r1, #0
    7288:	d00b      	beq.n	72a2 <_dtoa_r+0x4a>
    728a:	685a      	ldr	r2, [r3, #4]
    728c:	2301      	movs	r3, #1
    728e:	4093      	lsls	r3, r2
    7290:	604a      	str	r2, [r1, #4]
    7292:	608b      	str	r3, [r1, #8]
    7294:	9804      	ldr	r0, [sp, #16]
    7296:	f001 f812 	bl	82be <_Bfree>
    729a:	2200      	movs	r2, #0
    729c:	9b04      	ldr	r3, [sp, #16]
    729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    72a0:	601a      	str	r2, [r3, #0]
    72a2:	9b07      	ldr	r3, [sp, #28]
    72a4:	2b00      	cmp	r3, #0
    72a6:	da1f      	bge.n	72e8 <_dtoa_r+0x90>
    72a8:	2301      	movs	r3, #1
    72aa:	602b      	str	r3, [r5, #0]
    72ac:	007b      	lsls	r3, r7, #1
    72ae:	085b      	lsrs	r3, r3, #1
    72b0:	9307      	str	r3, [sp, #28]
    72b2:	9c07      	ldr	r4, [sp, #28]
    72b4:	4bb7      	ldr	r3, [pc, #732]	; (7594 <_dtoa_r+0x33c>)
    72b6:	0022      	movs	r2, r4
    72b8:	9319      	str	r3, [sp, #100]	; 0x64
    72ba:	401a      	ands	r2, r3
    72bc:	429a      	cmp	r2, r3
    72be:	d116      	bne.n	72ee <_dtoa_r+0x96>
    72c0:	4bb5      	ldr	r3, [pc, #724]	; (7598 <_dtoa_r+0x340>)
    72c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    72c4:	6013      	str	r3, [r2, #0]
    72c6:	9b06      	ldr	r3, [sp, #24]
    72c8:	2b00      	cmp	r3, #0
    72ca:	d103      	bne.n	72d4 <_dtoa_r+0x7c>
    72cc:	0324      	lsls	r4, r4, #12
    72ce:	d101      	bne.n	72d4 <_dtoa_r+0x7c>
    72d0:	f000 fd91 	bl	7df6 <_dtoa_r+0xb9e>
    72d4:	4bb1      	ldr	r3, [pc, #708]	; (759c <_dtoa_r+0x344>)
    72d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    72d8:	930a      	str	r3, [sp, #40]	; 0x28
    72da:	4bb1      	ldr	r3, [pc, #708]	; (75a0 <_dtoa_r+0x348>)
    72dc:	2a00      	cmp	r2, #0
    72de:	d001      	beq.n	72e4 <_dtoa_r+0x8c>
    72e0:	f000 fd8f 	bl	7e02 <_dtoa_r+0xbaa>
    72e4:	f000 fd8f 	bl	7e06 <_dtoa_r+0xbae>
    72e8:	2300      	movs	r3, #0
    72ea:	602b      	str	r3, [r5, #0]
    72ec:	e7e1      	b.n	72b2 <_dtoa_r+0x5a>
    72ee:	9e06      	ldr	r6, [sp, #24]
    72f0:	9f07      	ldr	r7, [sp, #28]
    72f2:	2200      	movs	r2, #0
    72f4:	2300      	movs	r3, #0
    72f6:	0030      	movs	r0, r6
    72f8:	0039      	movs	r1, r7
    72fa:	f001 fe2b 	bl	8f54 <__aeabi_dcmpeq>
    72fe:	1e05      	subs	r5, r0, #0
    7300:	d00e      	beq.n	7320 <_dtoa_r+0xc8>
    7302:	2301      	movs	r3, #1
    7304:	9a24      	ldr	r2, [sp, #144]	; 0x90
    7306:	6013      	str	r3, [r2, #0]
    7308:	4ba6      	ldr	r3, [pc, #664]	; (75a4 <_dtoa_r+0x34c>)
    730a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    730c:	930a      	str	r3, [sp, #40]	; 0x28
    730e:	2a00      	cmp	r2, #0
    7310:	d101      	bne.n	7316 <_dtoa_r+0xbe>
    7312:	f000 fd78 	bl	7e06 <_dtoa_r+0xbae>
    7316:	4aa4      	ldr	r2, [pc, #656]	; (75a8 <_dtoa_r+0x350>)
    7318:	9926      	ldr	r1, [sp, #152]	; 0x98
    731a:	600a      	str	r2, [r1, #0]
    731c:	f000 fd73 	bl	7e06 <_dtoa_r+0xbae>
    7320:	ab1a      	add	r3, sp, #104	; 0x68
    7322:	9301      	str	r3, [sp, #4]
    7324:	ab1b      	add	r3, sp, #108	; 0x6c
    7326:	9300      	str	r3, [sp, #0]
    7328:	0032      	movs	r2, r6
    732a:	003b      	movs	r3, r7
    732c:	9804      	ldr	r0, [sp, #16]
    732e:	f001 fa1d 	bl	876c <__d2b>
    7332:	0063      	lsls	r3, r4, #1
    7334:	9005      	str	r0, [sp, #20]
    7336:	0d5b      	lsrs	r3, r3, #21
    7338:	d100      	bne.n	733c <_dtoa_r+0xe4>
    733a:	e07f      	b.n	743c <_dtoa_r+0x1e4>
    733c:	033a      	lsls	r2, r7, #12
    733e:	4c9b      	ldr	r4, [pc, #620]	; (75ac <_dtoa_r+0x354>)
    7340:	0b12      	lsrs	r2, r2, #12
    7342:	4314      	orrs	r4, r2
    7344:	0021      	movs	r1, r4
    7346:	4a9a      	ldr	r2, [pc, #616]	; (75b0 <_dtoa_r+0x358>)
    7348:	0030      	movs	r0, r6
    734a:	9518      	str	r5, [sp, #96]	; 0x60
    734c:	189e      	adds	r6, r3, r2
    734e:	2200      	movs	r2, #0
    7350:	4b98      	ldr	r3, [pc, #608]	; (75b4 <_dtoa_r+0x35c>)
    7352:	f003 f81b 	bl	a38c <__aeabi_dsub>
    7356:	4a98      	ldr	r2, [pc, #608]	; (75b8 <_dtoa_r+0x360>)
    7358:	4b98      	ldr	r3, [pc, #608]	; (75bc <_dtoa_r+0x364>)
    735a:	f002 fd97 	bl	9e8c <__aeabi_dmul>
    735e:	4a98      	ldr	r2, [pc, #608]	; (75c0 <_dtoa_r+0x368>)
    7360:	4b98      	ldr	r3, [pc, #608]	; (75c4 <_dtoa_r+0x36c>)
    7362:	f001 fe4f 	bl	9004 <__aeabi_dadd>
    7366:	0004      	movs	r4, r0
    7368:	0030      	movs	r0, r6
    736a:	000d      	movs	r5, r1
    736c:	f003 fb78 	bl	aa60 <__aeabi_i2d>
    7370:	4a95      	ldr	r2, [pc, #596]	; (75c8 <_dtoa_r+0x370>)
    7372:	4b96      	ldr	r3, [pc, #600]	; (75cc <_dtoa_r+0x374>)
    7374:	f002 fd8a 	bl	9e8c <__aeabi_dmul>
    7378:	0002      	movs	r2, r0
    737a:	000b      	movs	r3, r1
    737c:	0020      	movs	r0, r4
    737e:	0029      	movs	r1, r5
    7380:	f001 fe40 	bl	9004 <__aeabi_dadd>
    7384:	0004      	movs	r4, r0
    7386:	000d      	movs	r5, r1
    7388:	f003 fb36 	bl	a9f8 <__aeabi_d2iz>
    738c:	2200      	movs	r2, #0
    738e:	9003      	str	r0, [sp, #12]
    7390:	2300      	movs	r3, #0
    7392:	0020      	movs	r0, r4
    7394:	0029      	movs	r1, r5
    7396:	f001 fde3 	bl	8f60 <__aeabi_dcmplt>
    739a:	2800      	cmp	r0, #0
    739c:	d00e      	beq.n	73bc <_dtoa_r+0x164>
    739e:	9803      	ldr	r0, [sp, #12]
    73a0:	f003 fb5e 	bl	aa60 <__aeabi_i2d>
    73a4:	000b      	movs	r3, r1
    73a6:	0002      	movs	r2, r0
    73a8:	0029      	movs	r1, r5
    73aa:	0020      	movs	r0, r4
    73ac:	f001 fdd2 	bl	8f54 <__aeabi_dcmpeq>
    73b0:	0003      	movs	r3, r0
    73b2:	4258      	negs	r0, r3
    73b4:	4158      	adcs	r0, r3
    73b6:	9b03      	ldr	r3, [sp, #12]
    73b8:	1a1b      	subs	r3, r3, r0
    73ba:	9303      	str	r3, [sp, #12]
    73bc:	2301      	movs	r3, #1
    73be:	9316      	str	r3, [sp, #88]	; 0x58
    73c0:	9b03      	ldr	r3, [sp, #12]
    73c2:	2b16      	cmp	r3, #22
    73c4:	d80f      	bhi.n	73e6 <_dtoa_r+0x18e>
    73c6:	4982      	ldr	r1, [pc, #520]	; (75d0 <_dtoa_r+0x378>)
    73c8:	00db      	lsls	r3, r3, #3
    73ca:	18c9      	adds	r1, r1, r3
    73cc:	6808      	ldr	r0, [r1, #0]
    73ce:	6849      	ldr	r1, [r1, #4]
    73d0:	9a06      	ldr	r2, [sp, #24]
    73d2:	9b07      	ldr	r3, [sp, #28]
    73d4:	f001 fdd8 	bl	8f88 <__aeabi_dcmpgt>
    73d8:	2800      	cmp	r0, #0
    73da:	d04b      	beq.n	7474 <_dtoa_r+0x21c>
    73dc:	9b03      	ldr	r3, [sp, #12]
    73de:	3b01      	subs	r3, #1
    73e0:	9303      	str	r3, [sp, #12]
    73e2:	2300      	movs	r3, #0
    73e4:	9316      	str	r3, [sp, #88]	; 0x58
    73e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    73e8:	1b9e      	subs	r6, r3, r6
    73ea:	2300      	movs	r3, #0
    73ec:	930b      	str	r3, [sp, #44]	; 0x2c
    73ee:	0033      	movs	r3, r6
    73f0:	3b01      	subs	r3, #1
    73f2:	930c      	str	r3, [sp, #48]	; 0x30
    73f4:	d504      	bpl.n	7400 <_dtoa_r+0x1a8>
    73f6:	2301      	movs	r3, #1
    73f8:	1b9b      	subs	r3, r3, r6
    73fa:	930b      	str	r3, [sp, #44]	; 0x2c
    73fc:	2300      	movs	r3, #0
    73fe:	930c      	str	r3, [sp, #48]	; 0x30
    7400:	9b03      	ldr	r3, [sp, #12]
    7402:	2b00      	cmp	r3, #0
    7404:	db38      	blt.n	7478 <_dtoa_r+0x220>
    7406:	9a03      	ldr	r2, [sp, #12]
    7408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    740a:	4694      	mov	ip, r2
    740c:	4463      	add	r3, ip
    740e:	930c      	str	r3, [sp, #48]	; 0x30
    7410:	2300      	movs	r3, #0
    7412:	920f      	str	r2, [sp, #60]	; 0x3c
    7414:	9308      	str	r3, [sp, #32]
    7416:	9b22      	ldr	r3, [sp, #136]	; 0x88
    7418:	2501      	movs	r5, #1
    741a:	2b09      	cmp	r3, #9
    741c:	d900      	bls.n	7420 <_dtoa_r+0x1c8>
    741e:	e091      	b.n	7544 <_dtoa_r+0x2ec>
    7420:	2b05      	cmp	r3, #5
    7422:	dd02      	ble.n	742a <_dtoa_r+0x1d2>
    7424:	2500      	movs	r5, #0
    7426:	3b04      	subs	r3, #4
    7428:	9322      	str	r3, [sp, #136]	; 0x88
    742a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    742c:	1e98      	subs	r0, r3, #2
    742e:	2803      	cmp	r0, #3
    7430:	d900      	bls.n	7434 <_dtoa_r+0x1dc>
    7432:	e091      	b.n	7558 <_dtoa_r+0x300>
    7434:	f001 fbfe 	bl	8c34 <__gnu_thumb1_case_uqi>
    7438:	76298482 	.word	0x76298482
    743c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    743e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7440:	189e      	adds	r6, r3, r2
    7442:	4b64      	ldr	r3, [pc, #400]	; (75d4 <_dtoa_r+0x37c>)
    7444:	18f2      	adds	r2, r6, r3
    7446:	2a20      	cmp	r2, #32
    7448:	dd0f      	ble.n	746a <_dtoa_r+0x212>
    744a:	4b63      	ldr	r3, [pc, #396]	; (75d8 <_dtoa_r+0x380>)
    744c:	9806      	ldr	r0, [sp, #24]
    744e:	18f3      	adds	r3, r6, r3
    7450:	40d8      	lsrs	r0, r3
    7452:	2340      	movs	r3, #64	; 0x40
    7454:	1a9b      	subs	r3, r3, r2
    7456:	409c      	lsls	r4, r3
    7458:	4320      	orrs	r0, r4
    745a:	f003 fb43 	bl	aae4 <__aeabi_ui2d>
    745e:	2301      	movs	r3, #1
    7460:	4c5e      	ldr	r4, [pc, #376]	; (75dc <_dtoa_r+0x384>)
    7462:	3e01      	subs	r6, #1
    7464:	1909      	adds	r1, r1, r4
    7466:	9318      	str	r3, [sp, #96]	; 0x60
    7468:	e771      	b.n	734e <_dtoa_r+0xf6>
    746a:	2320      	movs	r3, #32
    746c:	9806      	ldr	r0, [sp, #24]
    746e:	1a9b      	subs	r3, r3, r2
    7470:	4098      	lsls	r0, r3
    7472:	e7f2      	b.n	745a <_dtoa_r+0x202>
    7474:	9016      	str	r0, [sp, #88]	; 0x58
    7476:	e7b6      	b.n	73e6 <_dtoa_r+0x18e>
    7478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    747a:	9a03      	ldr	r2, [sp, #12]
    747c:	1a9b      	subs	r3, r3, r2
    747e:	930b      	str	r3, [sp, #44]	; 0x2c
    7480:	4253      	negs	r3, r2
    7482:	9308      	str	r3, [sp, #32]
    7484:	2300      	movs	r3, #0
    7486:	930f      	str	r3, [sp, #60]	; 0x3c
    7488:	e7c5      	b.n	7416 <_dtoa_r+0x1be>
    748a:	2301      	movs	r3, #1
    748c:	930e      	str	r3, [sp, #56]	; 0x38
    748e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    7490:	2b00      	cmp	r3, #0
    7492:	dd65      	ble.n	7560 <_dtoa_r+0x308>
    7494:	001f      	movs	r7, r3
    7496:	930d      	str	r3, [sp, #52]	; 0x34
    7498:	9a04      	ldr	r2, [sp, #16]
    749a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    749c:	2200      	movs	r2, #0
    749e:	6062      	str	r2, [r4, #4]
    74a0:	3204      	adds	r2, #4
    74a2:	0011      	movs	r1, r2
    74a4:	3114      	adds	r1, #20
    74a6:	4299      	cmp	r1, r3
    74a8:	d95f      	bls.n	756a <_dtoa_r+0x312>
    74aa:	6861      	ldr	r1, [r4, #4]
    74ac:	9804      	ldr	r0, [sp, #16]
    74ae:	f000 fece 	bl	824e <_Balloc>
    74b2:	9b04      	ldr	r3, [sp, #16]
    74b4:	6020      	str	r0, [r4, #0]
    74b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    74b8:	681b      	ldr	r3, [r3, #0]
    74ba:	930a      	str	r3, [sp, #40]	; 0x28
    74bc:	2f0e      	cmp	r7, #14
    74be:	d900      	bls.n	74c2 <_dtoa_r+0x26a>
    74c0:	e105      	b.n	76ce <_dtoa_r+0x476>
    74c2:	2d00      	cmp	r5, #0
    74c4:	d100      	bne.n	74c8 <_dtoa_r+0x270>
    74c6:	e102      	b.n	76ce <_dtoa_r+0x476>
    74c8:	9b06      	ldr	r3, [sp, #24]
    74ca:	9c07      	ldr	r4, [sp, #28]
    74cc:	9314      	str	r3, [sp, #80]	; 0x50
    74ce:	9415      	str	r4, [sp, #84]	; 0x54
    74d0:	9b03      	ldr	r3, [sp, #12]
    74d2:	2b00      	cmp	r3, #0
    74d4:	dc00      	bgt.n	74d8 <_dtoa_r+0x280>
    74d6:	e085      	b.n	75e4 <_dtoa_r+0x38c>
    74d8:	001a      	movs	r2, r3
    74da:	210f      	movs	r1, #15
    74dc:	4b3c      	ldr	r3, [pc, #240]	; (75d0 <_dtoa_r+0x378>)
    74de:	400a      	ands	r2, r1
    74e0:	00d2      	lsls	r2, r2, #3
    74e2:	189b      	adds	r3, r3, r2
    74e4:	685c      	ldr	r4, [r3, #4]
    74e6:	681b      	ldr	r3, [r3, #0]
    74e8:	9310      	str	r3, [sp, #64]	; 0x40
    74ea:	9411      	str	r4, [sp, #68]	; 0x44
    74ec:	9b03      	ldr	r3, [sp, #12]
    74ee:	2402      	movs	r4, #2
    74f0:	111d      	asrs	r5, r3, #4
    74f2:	06eb      	lsls	r3, r5, #27
    74f4:	d50a      	bpl.n	750c <_dtoa_r+0x2b4>
    74f6:	4b3a      	ldr	r3, [pc, #232]	; (75e0 <_dtoa_r+0x388>)
    74f8:	400d      	ands	r5, r1
    74fa:	6a1a      	ldr	r2, [r3, #32]
    74fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    74fe:	9814      	ldr	r0, [sp, #80]	; 0x50
    7500:	9915      	ldr	r1, [sp, #84]	; 0x54
    7502:	f002 f88f 	bl	9624 <__aeabi_ddiv>
    7506:	9006      	str	r0, [sp, #24]
    7508:	9107      	str	r1, [sp, #28]
    750a:	3401      	adds	r4, #1
    750c:	4e34      	ldr	r6, [pc, #208]	; (75e0 <_dtoa_r+0x388>)
    750e:	2d00      	cmp	r5, #0
    7510:	d130      	bne.n	7574 <_dtoa_r+0x31c>
    7512:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7514:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7516:	9806      	ldr	r0, [sp, #24]
    7518:	9907      	ldr	r1, [sp, #28]
    751a:	f002 f883 	bl	9624 <__aeabi_ddiv>
    751e:	9006      	str	r0, [sp, #24]
    7520:	9107      	str	r1, [sp, #28]
    7522:	e07a      	b.n	761a <_dtoa_r+0x3c2>
    7524:	2301      	movs	r3, #1
    7526:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    7528:	930e      	str	r3, [sp, #56]	; 0x38
    752a:	4694      	mov	ip, r2
    752c:	9b03      	ldr	r3, [sp, #12]
    752e:	4463      	add	r3, ip
    7530:	1c5f      	adds	r7, r3, #1
    7532:	930d      	str	r3, [sp, #52]	; 0x34
    7534:	1e3b      	subs	r3, r7, #0
    7536:	dcaf      	bgt.n	7498 <_dtoa_r+0x240>
    7538:	2301      	movs	r3, #1
    753a:	e7ad      	b.n	7498 <_dtoa_r+0x240>
    753c:	2300      	movs	r3, #0
    753e:	e7a5      	b.n	748c <_dtoa_r+0x234>
    7540:	2300      	movs	r3, #0
    7542:	e7f0      	b.n	7526 <_dtoa_r+0x2ce>
    7544:	2300      	movs	r3, #0
    7546:	950e      	str	r5, [sp, #56]	; 0x38
    7548:	9322      	str	r3, [sp, #136]	; 0x88
    754a:	3b01      	subs	r3, #1
    754c:	2200      	movs	r2, #0
    754e:	930d      	str	r3, [sp, #52]	; 0x34
    7550:	001f      	movs	r7, r3
    7552:	3313      	adds	r3, #19
    7554:	9223      	str	r2, [sp, #140]	; 0x8c
    7556:	e79f      	b.n	7498 <_dtoa_r+0x240>
    7558:	2301      	movs	r3, #1
    755a:	930e      	str	r3, [sp, #56]	; 0x38
    755c:	3b02      	subs	r3, #2
    755e:	e7f5      	b.n	754c <_dtoa_r+0x2f4>
    7560:	2301      	movs	r3, #1
    7562:	930d      	str	r3, [sp, #52]	; 0x34
    7564:	001f      	movs	r7, r3
    7566:	001a      	movs	r2, r3
    7568:	e7f4      	b.n	7554 <_dtoa_r+0x2fc>
    756a:	6861      	ldr	r1, [r4, #4]
    756c:	0052      	lsls	r2, r2, #1
    756e:	3101      	adds	r1, #1
    7570:	6061      	str	r1, [r4, #4]
    7572:	e796      	b.n	74a2 <_dtoa_r+0x24a>
    7574:	2301      	movs	r3, #1
    7576:	421d      	tst	r5, r3
    7578:	d008      	beq.n	758c <_dtoa_r+0x334>
    757a:	9810      	ldr	r0, [sp, #64]	; 0x40
    757c:	9911      	ldr	r1, [sp, #68]	; 0x44
    757e:	18e4      	adds	r4, r4, r3
    7580:	6832      	ldr	r2, [r6, #0]
    7582:	6873      	ldr	r3, [r6, #4]
    7584:	f002 fc82 	bl	9e8c <__aeabi_dmul>
    7588:	9010      	str	r0, [sp, #64]	; 0x40
    758a:	9111      	str	r1, [sp, #68]	; 0x44
    758c:	106d      	asrs	r5, r5, #1
    758e:	3608      	adds	r6, #8
    7590:	e7bd      	b.n	750e <_dtoa_r+0x2b6>
    7592:	46c0      	nop			; (mov r8, r8)
    7594:	7ff00000 	.word	0x7ff00000
    7598:	0000270f 	.word	0x0000270f
    759c:	0000b624 	.word	0x0000b624
    75a0:	0000b627 	.word	0x0000b627
    75a4:	0000b4f6 	.word	0x0000b4f6
    75a8:	0000b4f7 	.word	0x0000b4f7
    75ac:	3ff00000 	.word	0x3ff00000
    75b0:	fffffc01 	.word	0xfffffc01
    75b4:	3ff80000 	.word	0x3ff80000
    75b8:	636f4361 	.word	0x636f4361
    75bc:	3fd287a7 	.word	0x3fd287a7
    75c0:	8b60c8b3 	.word	0x8b60c8b3
    75c4:	3fc68a28 	.word	0x3fc68a28
    75c8:	509f79fb 	.word	0x509f79fb
    75cc:	3fd34413 	.word	0x3fd34413
    75d0:	0000b6b0 	.word	0x0000b6b0
    75d4:	00000432 	.word	0x00000432
    75d8:	00000412 	.word	0x00000412
    75dc:	fe100000 	.word	0xfe100000
    75e0:	0000b688 	.word	0x0000b688
    75e4:	9b03      	ldr	r3, [sp, #12]
    75e6:	2402      	movs	r4, #2
    75e8:	2b00      	cmp	r3, #0
    75ea:	d016      	beq.n	761a <_dtoa_r+0x3c2>
    75ec:	9814      	ldr	r0, [sp, #80]	; 0x50
    75ee:	9915      	ldr	r1, [sp, #84]	; 0x54
    75f0:	425d      	negs	r5, r3
    75f2:	230f      	movs	r3, #15
    75f4:	4aca      	ldr	r2, [pc, #808]	; (7920 <_dtoa_r+0x6c8>)
    75f6:	402b      	ands	r3, r5
    75f8:	00db      	lsls	r3, r3, #3
    75fa:	18d3      	adds	r3, r2, r3
    75fc:	681a      	ldr	r2, [r3, #0]
    75fe:	685b      	ldr	r3, [r3, #4]
    7600:	f002 fc44 	bl	9e8c <__aeabi_dmul>
    7604:	2300      	movs	r3, #0
    7606:	9006      	str	r0, [sp, #24]
    7608:	9107      	str	r1, [sp, #28]
    760a:	4ec6      	ldr	r6, [pc, #792]	; (7924 <_dtoa_r+0x6cc>)
    760c:	112d      	asrs	r5, r5, #4
    760e:	2d00      	cmp	r5, #0
    7610:	d000      	beq.n	7614 <_dtoa_r+0x3bc>
    7612:	e08c      	b.n	772e <_dtoa_r+0x4d6>
    7614:	2b00      	cmp	r3, #0
    7616:	d000      	beq.n	761a <_dtoa_r+0x3c2>
    7618:	e781      	b.n	751e <_dtoa_r+0x2c6>
    761a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    761c:	2b00      	cmp	r3, #0
    761e:	d100      	bne.n	7622 <_dtoa_r+0x3ca>
    7620:	e091      	b.n	7746 <_dtoa_r+0x4ee>
    7622:	9a06      	ldr	r2, [sp, #24]
    7624:	9b07      	ldr	r3, [sp, #28]
    7626:	9210      	str	r2, [sp, #64]	; 0x40
    7628:	9311      	str	r3, [sp, #68]	; 0x44
    762a:	9810      	ldr	r0, [sp, #64]	; 0x40
    762c:	9911      	ldr	r1, [sp, #68]	; 0x44
    762e:	2200      	movs	r2, #0
    7630:	4bbd      	ldr	r3, [pc, #756]	; (7928 <_dtoa_r+0x6d0>)
    7632:	f001 fc95 	bl	8f60 <__aeabi_dcmplt>
    7636:	2800      	cmp	r0, #0
    7638:	d100      	bne.n	763c <_dtoa_r+0x3e4>
    763a:	e084      	b.n	7746 <_dtoa_r+0x4ee>
    763c:	2f00      	cmp	r7, #0
    763e:	d100      	bne.n	7642 <_dtoa_r+0x3ea>
    7640:	e081      	b.n	7746 <_dtoa_r+0x4ee>
    7642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7644:	2b00      	cmp	r3, #0
    7646:	dd3e      	ble.n	76c6 <_dtoa_r+0x46e>
    7648:	9810      	ldr	r0, [sp, #64]	; 0x40
    764a:	9911      	ldr	r1, [sp, #68]	; 0x44
    764c:	9b03      	ldr	r3, [sp, #12]
    764e:	2200      	movs	r2, #0
    7650:	1e5e      	subs	r6, r3, #1
    7652:	4bb6      	ldr	r3, [pc, #728]	; (792c <_dtoa_r+0x6d4>)
    7654:	f002 fc1a 	bl	9e8c <__aeabi_dmul>
    7658:	9006      	str	r0, [sp, #24]
    765a:	9107      	str	r1, [sp, #28]
    765c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    765e:	3401      	adds	r4, #1
    7660:	0020      	movs	r0, r4
    7662:	f003 f9fd 	bl	aa60 <__aeabi_i2d>
    7666:	9a06      	ldr	r2, [sp, #24]
    7668:	9b07      	ldr	r3, [sp, #28]
    766a:	f002 fc0f 	bl	9e8c <__aeabi_dmul>
    766e:	2200      	movs	r2, #0
    7670:	4baf      	ldr	r3, [pc, #700]	; (7930 <_dtoa_r+0x6d8>)
    7672:	f001 fcc7 	bl	9004 <__aeabi_dadd>
    7676:	9012      	str	r0, [sp, #72]	; 0x48
    7678:	9113      	str	r1, [sp, #76]	; 0x4c
    767a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    767c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    767e:	4aad      	ldr	r2, [pc, #692]	; (7934 <_dtoa_r+0x6dc>)
    7680:	9310      	str	r3, [sp, #64]	; 0x40
    7682:	9411      	str	r4, [sp, #68]	; 0x44
    7684:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7686:	189c      	adds	r4, r3, r2
    7688:	9411      	str	r4, [sp, #68]	; 0x44
    768a:	2d00      	cmp	r5, #0
    768c:	d15e      	bne.n	774c <_dtoa_r+0x4f4>
    768e:	9806      	ldr	r0, [sp, #24]
    7690:	9907      	ldr	r1, [sp, #28]
    7692:	2200      	movs	r2, #0
    7694:	4ba8      	ldr	r3, [pc, #672]	; (7938 <_dtoa_r+0x6e0>)
    7696:	f002 fe79 	bl	a38c <__aeabi_dsub>
    769a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    769c:	0023      	movs	r3, r4
    769e:	9006      	str	r0, [sp, #24]
    76a0:	9107      	str	r1, [sp, #28]
    76a2:	f001 fc71 	bl	8f88 <__aeabi_dcmpgt>
    76a6:	2800      	cmp	r0, #0
    76a8:	d000      	beq.n	76ac <_dtoa_r+0x454>
    76aa:	e301      	b.n	7cb0 <_dtoa_r+0xa58>
    76ac:	48a3      	ldr	r0, [pc, #652]	; (793c <_dtoa_r+0x6e4>)
    76ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
    76b0:	4684      	mov	ip, r0
    76b2:	4461      	add	r1, ip
    76b4:	000b      	movs	r3, r1
    76b6:	9806      	ldr	r0, [sp, #24]
    76b8:	9907      	ldr	r1, [sp, #28]
    76ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
    76bc:	f001 fc50 	bl	8f60 <__aeabi_dcmplt>
    76c0:	2800      	cmp	r0, #0
    76c2:	d000      	beq.n	76c6 <_dtoa_r+0x46e>
    76c4:	e2e8      	b.n	7c98 <_dtoa_r+0xa40>
    76c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    76c8:	9c15      	ldr	r4, [sp, #84]	; 0x54
    76ca:	9306      	str	r3, [sp, #24]
    76cc:	9407      	str	r4, [sp, #28]
    76ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    76d0:	2b00      	cmp	r3, #0
    76d2:	da00      	bge.n	76d6 <_dtoa_r+0x47e>
    76d4:	e157      	b.n	7986 <_dtoa_r+0x72e>
    76d6:	9a03      	ldr	r2, [sp, #12]
    76d8:	2a0e      	cmp	r2, #14
    76da:	dd00      	ble.n	76de <_dtoa_r+0x486>
    76dc:	e153      	b.n	7986 <_dtoa_r+0x72e>
    76de:	4b90      	ldr	r3, [pc, #576]	; (7920 <_dtoa_r+0x6c8>)
    76e0:	00d2      	lsls	r2, r2, #3
    76e2:	189b      	adds	r3, r3, r2
    76e4:	685c      	ldr	r4, [r3, #4]
    76e6:	681b      	ldr	r3, [r3, #0]
    76e8:	9308      	str	r3, [sp, #32]
    76ea:	9409      	str	r4, [sp, #36]	; 0x24
    76ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    76ee:	2b00      	cmp	r3, #0
    76f0:	db00      	blt.n	76f4 <_dtoa_r+0x49c>
    76f2:	e0ce      	b.n	7892 <_dtoa_r+0x63a>
    76f4:	2f00      	cmp	r7, #0
    76f6:	dd00      	ble.n	76fa <_dtoa_r+0x4a2>
    76f8:	e0cb      	b.n	7892 <_dtoa_r+0x63a>
    76fa:	d000      	beq.n	76fe <_dtoa_r+0x4a6>
    76fc:	e2cf      	b.n	7c9e <_dtoa_r+0xa46>
    76fe:	9808      	ldr	r0, [sp, #32]
    7700:	9909      	ldr	r1, [sp, #36]	; 0x24
    7702:	2200      	movs	r2, #0
    7704:	4b8c      	ldr	r3, [pc, #560]	; (7938 <_dtoa_r+0x6e0>)
    7706:	f002 fbc1 	bl	9e8c <__aeabi_dmul>
    770a:	9a06      	ldr	r2, [sp, #24]
    770c:	9b07      	ldr	r3, [sp, #28]
    770e:	f001 fc45 	bl	8f9c <__aeabi_dcmpge>
    7712:	003e      	movs	r6, r7
    7714:	9708      	str	r7, [sp, #32]
    7716:	2800      	cmp	r0, #0
    7718:	d000      	beq.n	771c <_dtoa_r+0x4c4>
    771a:	e2a4      	b.n	7c66 <_dtoa_r+0xa0e>
    771c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    771e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7720:	1c5d      	adds	r5, r3, #1
    7722:	2331      	movs	r3, #49	; 0x31
    7724:	7013      	strb	r3, [r2, #0]
    7726:	9b03      	ldr	r3, [sp, #12]
    7728:	3301      	adds	r3, #1
    772a:	9303      	str	r3, [sp, #12]
    772c:	e29f      	b.n	7c6e <_dtoa_r+0xa16>
    772e:	2201      	movs	r2, #1
    7730:	4215      	tst	r5, r2
    7732:	d005      	beq.n	7740 <_dtoa_r+0x4e8>
    7734:	18a4      	adds	r4, r4, r2
    7736:	6832      	ldr	r2, [r6, #0]
    7738:	6873      	ldr	r3, [r6, #4]
    773a:	f002 fba7 	bl	9e8c <__aeabi_dmul>
    773e:	2301      	movs	r3, #1
    7740:	106d      	asrs	r5, r5, #1
    7742:	3608      	adds	r6, #8
    7744:	e763      	b.n	760e <_dtoa_r+0x3b6>
    7746:	9e03      	ldr	r6, [sp, #12]
    7748:	003d      	movs	r5, r7
    774a:	e789      	b.n	7660 <_dtoa_r+0x408>
    774c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    774e:	1e69      	subs	r1, r5, #1
    7750:	1952      	adds	r2, r2, r5
    7752:	9217      	str	r2, [sp, #92]	; 0x5c
    7754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7756:	4b72      	ldr	r3, [pc, #456]	; (7920 <_dtoa_r+0x6c8>)
    7758:	00c9      	lsls	r1, r1, #3
    775a:	2a00      	cmp	r2, #0
    775c:	d04a      	beq.n	77f4 <_dtoa_r+0x59c>
    775e:	185b      	adds	r3, r3, r1
    7760:	681a      	ldr	r2, [r3, #0]
    7762:	685b      	ldr	r3, [r3, #4]
    7764:	2000      	movs	r0, #0
    7766:	4976      	ldr	r1, [pc, #472]	; (7940 <_dtoa_r+0x6e8>)
    7768:	f001 ff5c 	bl	9624 <__aeabi_ddiv>
    776c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    776e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7770:	f002 fe0c 	bl	a38c <__aeabi_dsub>
    7774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7776:	9010      	str	r0, [sp, #64]	; 0x40
    7778:	9111      	str	r1, [sp, #68]	; 0x44
    777a:	9312      	str	r3, [sp, #72]	; 0x48
    777c:	9806      	ldr	r0, [sp, #24]
    777e:	9907      	ldr	r1, [sp, #28]
    7780:	f003 f93a 	bl	a9f8 <__aeabi_d2iz>
    7784:	0004      	movs	r4, r0
    7786:	f003 f96b 	bl	aa60 <__aeabi_i2d>
    778a:	0002      	movs	r2, r0
    778c:	000b      	movs	r3, r1
    778e:	9806      	ldr	r0, [sp, #24]
    7790:	9907      	ldr	r1, [sp, #28]
    7792:	f002 fdfb 	bl	a38c <__aeabi_dsub>
    7796:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7798:	3430      	adds	r4, #48	; 0x30
    779a:	1c5d      	adds	r5, r3, #1
    779c:	701c      	strb	r4, [r3, #0]
    779e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    77a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    77a2:	9006      	str	r0, [sp, #24]
    77a4:	9107      	str	r1, [sp, #28]
    77a6:	f001 fbdb 	bl	8f60 <__aeabi_dcmplt>
    77aa:	2800      	cmp	r0, #0
    77ac:	d165      	bne.n	787a <_dtoa_r+0x622>
    77ae:	9a06      	ldr	r2, [sp, #24]
    77b0:	9b07      	ldr	r3, [sp, #28]
    77b2:	2000      	movs	r0, #0
    77b4:	495c      	ldr	r1, [pc, #368]	; (7928 <_dtoa_r+0x6d0>)
    77b6:	f002 fde9 	bl	a38c <__aeabi_dsub>
    77ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
    77bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    77be:	f001 fbcf 	bl	8f60 <__aeabi_dcmplt>
    77c2:	2800      	cmp	r0, #0
    77c4:	d000      	beq.n	77c8 <_dtoa_r+0x570>
    77c6:	e0be      	b.n	7946 <_dtoa_r+0x6ee>
    77c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    77ca:	429d      	cmp	r5, r3
    77cc:	d100      	bne.n	77d0 <_dtoa_r+0x578>
    77ce:	e77a      	b.n	76c6 <_dtoa_r+0x46e>
    77d0:	9810      	ldr	r0, [sp, #64]	; 0x40
    77d2:	9911      	ldr	r1, [sp, #68]	; 0x44
    77d4:	2200      	movs	r2, #0
    77d6:	4b55      	ldr	r3, [pc, #340]	; (792c <_dtoa_r+0x6d4>)
    77d8:	f002 fb58 	bl	9e8c <__aeabi_dmul>
    77dc:	2200      	movs	r2, #0
    77de:	9010      	str	r0, [sp, #64]	; 0x40
    77e0:	9111      	str	r1, [sp, #68]	; 0x44
    77e2:	9806      	ldr	r0, [sp, #24]
    77e4:	9907      	ldr	r1, [sp, #28]
    77e6:	4b51      	ldr	r3, [pc, #324]	; (792c <_dtoa_r+0x6d4>)
    77e8:	f002 fb50 	bl	9e8c <__aeabi_dmul>
    77ec:	9512      	str	r5, [sp, #72]	; 0x48
    77ee:	9006      	str	r0, [sp, #24]
    77f0:	9107      	str	r1, [sp, #28]
    77f2:	e7c3      	b.n	777c <_dtoa_r+0x524>
    77f4:	1859      	adds	r1, r3, r1
    77f6:	6808      	ldr	r0, [r1, #0]
    77f8:	6849      	ldr	r1, [r1, #4]
    77fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    77fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    77fe:	f002 fb45 	bl	9e8c <__aeabi_dmul>
    7802:	9010      	str	r0, [sp, #64]	; 0x40
    7804:	9111      	str	r1, [sp, #68]	; 0x44
    7806:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    7808:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    780a:	9806      	ldr	r0, [sp, #24]
    780c:	9907      	ldr	r1, [sp, #28]
    780e:	f003 f8f3 	bl	a9f8 <__aeabi_d2iz>
    7812:	9012      	str	r0, [sp, #72]	; 0x48
    7814:	f003 f924 	bl	aa60 <__aeabi_i2d>
    7818:	0002      	movs	r2, r0
    781a:	000b      	movs	r3, r1
    781c:	9806      	ldr	r0, [sp, #24]
    781e:	9907      	ldr	r1, [sp, #28]
    7820:	f002 fdb4 	bl	a38c <__aeabi_dsub>
    7824:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7826:	9006      	str	r0, [sp, #24]
    7828:	9107      	str	r1, [sp, #28]
    782a:	3330      	adds	r3, #48	; 0x30
    782c:	7023      	strb	r3, [r4, #0]
    782e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    7830:	3401      	adds	r4, #1
    7832:	2200      	movs	r2, #0
    7834:	42a3      	cmp	r3, r4
    7836:	d124      	bne.n	7882 <_dtoa_r+0x62a>
    7838:	4b41      	ldr	r3, [pc, #260]	; (7940 <_dtoa_r+0x6e8>)
    783a:	9810      	ldr	r0, [sp, #64]	; 0x40
    783c:	9911      	ldr	r1, [sp, #68]	; 0x44
    783e:	f001 fbe1 	bl	9004 <__aeabi_dadd>
    7842:	0002      	movs	r2, r0
    7844:	000b      	movs	r3, r1
    7846:	9806      	ldr	r0, [sp, #24]
    7848:	9907      	ldr	r1, [sp, #28]
    784a:	f001 fb9d 	bl	8f88 <__aeabi_dcmpgt>
    784e:	2800      	cmp	r0, #0
    7850:	d000      	beq.n	7854 <_dtoa_r+0x5fc>
    7852:	e078      	b.n	7946 <_dtoa_r+0x6ee>
    7854:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7856:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7858:	2000      	movs	r0, #0
    785a:	4939      	ldr	r1, [pc, #228]	; (7940 <_dtoa_r+0x6e8>)
    785c:	f002 fd96 	bl	a38c <__aeabi_dsub>
    7860:	0002      	movs	r2, r0
    7862:	000b      	movs	r3, r1
    7864:	9806      	ldr	r0, [sp, #24]
    7866:	9907      	ldr	r1, [sp, #28]
    7868:	f001 fb7a 	bl	8f60 <__aeabi_dcmplt>
    786c:	2800      	cmp	r0, #0
    786e:	d100      	bne.n	7872 <_dtoa_r+0x61a>
    7870:	e729      	b.n	76c6 <_dtoa_r+0x46e>
    7872:	1e6b      	subs	r3, r5, #1
    7874:	781a      	ldrb	r2, [r3, #0]
    7876:	2a30      	cmp	r2, #48	; 0x30
    7878:	d001      	beq.n	787e <_dtoa_r+0x626>
    787a:	9603      	str	r6, [sp, #12]
    787c:	e03f      	b.n	78fe <_dtoa_r+0x6a6>
    787e:	001d      	movs	r5, r3
    7880:	e7f7      	b.n	7872 <_dtoa_r+0x61a>
    7882:	9806      	ldr	r0, [sp, #24]
    7884:	9907      	ldr	r1, [sp, #28]
    7886:	4b29      	ldr	r3, [pc, #164]	; (792c <_dtoa_r+0x6d4>)
    7888:	f002 fb00 	bl	9e8c <__aeabi_dmul>
    788c:	9006      	str	r0, [sp, #24]
    788e:	9107      	str	r1, [sp, #28]
    7890:	e7bb      	b.n	780a <_dtoa_r+0x5b2>
    7892:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    7894:	9a08      	ldr	r2, [sp, #32]
    7896:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7898:	9806      	ldr	r0, [sp, #24]
    789a:	9907      	ldr	r1, [sp, #28]
    789c:	f001 fec2 	bl	9624 <__aeabi_ddiv>
    78a0:	f003 f8aa 	bl	a9f8 <__aeabi_d2iz>
    78a4:	0004      	movs	r4, r0
    78a6:	f003 f8db 	bl	aa60 <__aeabi_i2d>
    78aa:	9a08      	ldr	r2, [sp, #32]
    78ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    78ae:	f002 faed 	bl	9e8c <__aeabi_dmul>
    78b2:	000b      	movs	r3, r1
    78b4:	0002      	movs	r2, r0
    78b6:	9806      	ldr	r0, [sp, #24]
    78b8:	9907      	ldr	r1, [sp, #28]
    78ba:	f002 fd67 	bl	a38c <__aeabi_dsub>
    78be:	0023      	movs	r3, r4
    78c0:	3330      	adds	r3, #48	; 0x30
    78c2:	7033      	strb	r3, [r6, #0]
    78c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    78c6:	1c75      	adds	r5, r6, #1
    78c8:	1aeb      	subs	r3, r5, r3
    78ca:	429f      	cmp	r7, r3
    78cc:	d14c      	bne.n	7968 <_dtoa_r+0x710>
    78ce:	0002      	movs	r2, r0
    78d0:	000b      	movs	r3, r1
    78d2:	f001 fb97 	bl	9004 <__aeabi_dadd>
    78d6:	0006      	movs	r6, r0
    78d8:	000f      	movs	r7, r1
    78da:	0002      	movs	r2, r0
    78dc:	000b      	movs	r3, r1
    78de:	9808      	ldr	r0, [sp, #32]
    78e0:	9909      	ldr	r1, [sp, #36]	; 0x24
    78e2:	f001 fb3d 	bl	8f60 <__aeabi_dcmplt>
    78e6:	2800      	cmp	r0, #0
    78e8:	d12c      	bne.n	7944 <_dtoa_r+0x6ec>
    78ea:	9808      	ldr	r0, [sp, #32]
    78ec:	9909      	ldr	r1, [sp, #36]	; 0x24
    78ee:	0032      	movs	r2, r6
    78f0:	003b      	movs	r3, r7
    78f2:	f001 fb2f 	bl	8f54 <__aeabi_dcmpeq>
    78f6:	2800      	cmp	r0, #0
    78f8:	d001      	beq.n	78fe <_dtoa_r+0x6a6>
    78fa:	07e3      	lsls	r3, r4, #31
    78fc:	d422      	bmi.n	7944 <_dtoa_r+0x6ec>
    78fe:	9905      	ldr	r1, [sp, #20]
    7900:	9804      	ldr	r0, [sp, #16]
    7902:	f000 fcdc 	bl	82be <_Bfree>
    7906:	2300      	movs	r3, #0
    7908:	702b      	strb	r3, [r5, #0]
    790a:	9b03      	ldr	r3, [sp, #12]
    790c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    790e:	3301      	adds	r3, #1
    7910:	6013      	str	r3, [r2, #0]
    7912:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7914:	2b00      	cmp	r3, #0
    7916:	d100      	bne.n	791a <_dtoa_r+0x6c2>
    7918:	e275      	b.n	7e06 <_dtoa_r+0xbae>
    791a:	601d      	str	r5, [r3, #0]
    791c:	e273      	b.n	7e06 <_dtoa_r+0xbae>
    791e:	46c0      	nop			; (mov r8, r8)
    7920:	0000b6b0 	.word	0x0000b6b0
    7924:	0000b688 	.word	0x0000b688
    7928:	3ff00000 	.word	0x3ff00000
    792c:	40240000 	.word	0x40240000
    7930:	401c0000 	.word	0x401c0000
    7934:	fcc00000 	.word	0xfcc00000
    7938:	40140000 	.word	0x40140000
    793c:	7cc00000 	.word	0x7cc00000
    7940:	3fe00000 	.word	0x3fe00000
    7944:	9e03      	ldr	r6, [sp, #12]
    7946:	1e6b      	subs	r3, r5, #1
    7948:	781a      	ldrb	r2, [r3, #0]
    794a:	2a39      	cmp	r2, #57	; 0x39
    794c:	d106      	bne.n	795c <_dtoa_r+0x704>
    794e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7950:	429a      	cmp	r2, r3
    7952:	d107      	bne.n	7964 <_dtoa_r+0x70c>
    7954:	2330      	movs	r3, #48	; 0x30
    7956:	7013      	strb	r3, [r2, #0]
    7958:	0013      	movs	r3, r2
    795a:	3601      	adds	r6, #1
    795c:	781a      	ldrb	r2, [r3, #0]
    795e:	3201      	adds	r2, #1
    7960:	701a      	strb	r2, [r3, #0]
    7962:	e78a      	b.n	787a <_dtoa_r+0x622>
    7964:	001d      	movs	r5, r3
    7966:	e7ee      	b.n	7946 <_dtoa_r+0x6ee>
    7968:	2200      	movs	r2, #0
    796a:	4bcf      	ldr	r3, [pc, #828]	; (7ca8 <_dtoa_r+0xa50>)
    796c:	f002 fa8e 	bl	9e8c <__aeabi_dmul>
    7970:	2200      	movs	r2, #0
    7972:	2300      	movs	r3, #0
    7974:	9006      	str	r0, [sp, #24]
    7976:	9107      	str	r1, [sp, #28]
    7978:	002e      	movs	r6, r5
    797a:	f001 faeb 	bl	8f54 <__aeabi_dcmpeq>
    797e:	2800      	cmp	r0, #0
    7980:	d100      	bne.n	7984 <_dtoa_r+0x72c>
    7982:	e787      	b.n	7894 <_dtoa_r+0x63c>
    7984:	e7bb      	b.n	78fe <_dtoa_r+0x6a6>
    7986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7988:	2a00      	cmp	r2, #0
    798a:	d100      	bne.n	798e <_dtoa_r+0x736>
    798c:	e087      	b.n	7a9e <_dtoa_r+0x846>
    798e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    7990:	2a01      	cmp	r2, #1
    7992:	dc6e      	bgt.n	7a72 <_dtoa_r+0x81a>
    7994:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7996:	2a00      	cmp	r2, #0
    7998:	d067      	beq.n	7a6a <_dtoa_r+0x812>
    799a:	4ac4      	ldr	r2, [pc, #784]	; (7cac <_dtoa_r+0xa54>)
    799c:	189b      	adds	r3, r3, r2
    799e:	9d08      	ldr	r5, [sp, #32]
    79a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    79a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    79a4:	2101      	movs	r1, #1
    79a6:	18d2      	adds	r2, r2, r3
    79a8:	920b      	str	r2, [sp, #44]	; 0x2c
    79aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    79ac:	9804      	ldr	r0, [sp, #16]
    79ae:	18d3      	adds	r3, r2, r3
    79b0:	930c      	str	r3, [sp, #48]	; 0x30
    79b2:	f000 fd22 	bl	83fa <__i2b>
    79b6:	0006      	movs	r6, r0
    79b8:	2c00      	cmp	r4, #0
    79ba:	dd0e      	ble.n	79da <_dtoa_r+0x782>
    79bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79be:	2b00      	cmp	r3, #0
    79c0:	dd0b      	ble.n	79da <_dtoa_r+0x782>
    79c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    79c4:	0023      	movs	r3, r4
    79c6:	4294      	cmp	r4, r2
    79c8:	dd00      	ble.n	79cc <_dtoa_r+0x774>
    79ca:	0013      	movs	r3, r2
    79cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    79ce:	1ae4      	subs	r4, r4, r3
    79d0:	1ad2      	subs	r2, r2, r3
    79d2:	920b      	str	r2, [sp, #44]	; 0x2c
    79d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    79d6:	1ad3      	subs	r3, r2, r3
    79d8:	930c      	str	r3, [sp, #48]	; 0x30
    79da:	9b08      	ldr	r3, [sp, #32]
    79dc:	2b00      	cmp	r3, #0
    79de:	d01e      	beq.n	7a1e <_dtoa_r+0x7c6>
    79e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    79e2:	2b00      	cmp	r3, #0
    79e4:	d05f      	beq.n	7aa6 <_dtoa_r+0x84e>
    79e6:	2d00      	cmp	r5, #0
    79e8:	dd11      	ble.n	7a0e <_dtoa_r+0x7b6>
    79ea:	0031      	movs	r1, r6
    79ec:	002a      	movs	r2, r5
    79ee:	9804      	ldr	r0, [sp, #16]
    79f0:	f000 fd9c 	bl	852c <__pow5mult>
    79f4:	9a05      	ldr	r2, [sp, #20]
    79f6:	0001      	movs	r1, r0
    79f8:	0006      	movs	r6, r0
    79fa:	9804      	ldr	r0, [sp, #16]
    79fc:	f000 fd06 	bl	840c <__multiply>
    7a00:	9905      	ldr	r1, [sp, #20]
    7a02:	9010      	str	r0, [sp, #64]	; 0x40
    7a04:	9804      	ldr	r0, [sp, #16]
    7a06:	f000 fc5a 	bl	82be <_Bfree>
    7a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7a0c:	9305      	str	r3, [sp, #20]
    7a0e:	9b08      	ldr	r3, [sp, #32]
    7a10:	1b5a      	subs	r2, r3, r5
    7a12:	d004      	beq.n	7a1e <_dtoa_r+0x7c6>
    7a14:	9905      	ldr	r1, [sp, #20]
    7a16:	9804      	ldr	r0, [sp, #16]
    7a18:	f000 fd88 	bl	852c <__pow5mult>
    7a1c:	9005      	str	r0, [sp, #20]
    7a1e:	2101      	movs	r1, #1
    7a20:	9804      	ldr	r0, [sp, #16]
    7a22:	f000 fcea 	bl	83fa <__i2b>
    7a26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7a28:	9008      	str	r0, [sp, #32]
    7a2a:	2b00      	cmp	r3, #0
    7a2c:	dd3d      	ble.n	7aaa <_dtoa_r+0x852>
    7a2e:	001a      	movs	r2, r3
    7a30:	0001      	movs	r1, r0
    7a32:	9804      	ldr	r0, [sp, #16]
    7a34:	f000 fd7a 	bl	852c <__pow5mult>
    7a38:	9b22      	ldr	r3, [sp, #136]	; 0x88
    7a3a:	9008      	str	r0, [sp, #32]
    7a3c:	2500      	movs	r5, #0
    7a3e:	2b01      	cmp	r3, #1
    7a40:	dc3b      	bgt.n	7aba <_dtoa_r+0x862>
    7a42:	2500      	movs	r5, #0
    7a44:	9b06      	ldr	r3, [sp, #24]
    7a46:	42ab      	cmp	r3, r5
    7a48:	d133      	bne.n	7ab2 <_dtoa_r+0x85a>
    7a4a:	9b07      	ldr	r3, [sp, #28]
    7a4c:	031b      	lsls	r3, r3, #12
    7a4e:	42ab      	cmp	r3, r5
    7a50:	d12f      	bne.n	7ab2 <_dtoa_r+0x85a>
    7a52:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7a54:	9a07      	ldr	r2, [sp, #28]
    7a56:	4213      	tst	r3, r2
    7a58:	d02b      	beq.n	7ab2 <_dtoa_r+0x85a>
    7a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7a5c:	3501      	adds	r5, #1
    7a5e:	3301      	adds	r3, #1
    7a60:	930b      	str	r3, [sp, #44]	; 0x2c
    7a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7a64:	3301      	adds	r3, #1
    7a66:	930c      	str	r3, [sp, #48]	; 0x30
    7a68:	e023      	b.n	7ab2 <_dtoa_r+0x85a>
    7a6a:	2336      	movs	r3, #54	; 0x36
    7a6c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    7a6e:	1a9b      	subs	r3, r3, r2
    7a70:	e795      	b.n	799e <_dtoa_r+0x746>
    7a72:	9b08      	ldr	r3, [sp, #32]
    7a74:	1e7d      	subs	r5, r7, #1
    7a76:	42ab      	cmp	r3, r5
    7a78:	db06      	blt.n	7a88 <_dtoa_r+0x830>
    7a7a:	1b5d      	subs	r5, r3, r5
    7a7c:	2f00      	cmp	r7, #0
    7a7e:	da0b      	bge.n	7a98 <_dtoa_r+0x840>
    7a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7a82:	1bdc      	subs	r4, r3, r7
    7a84:	2300      	movs	r3, #0
    7a86:	e78c      	b.n	79a2 <_dtoa_r+0x74a>
    7a88:	9b08      	ldr	r3, [sp, #32]
    7a8a:	9508      	str	r5, [sp, #32]
    7a8c:	1aea      	subs	r2, r5, r3
    7a8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7a90:	2500      	movs	r5, #0
    7a92:	189b      	adds	r3, r3, r2
    7a94:	930f      	str	r3, [sp, #60]	; 0x3c
    7a96:	e7f1      	b.n	7a7c <_dtoa_r+0x824>
    7a98:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    7a9a:	003b      	movs	r3, r7
    7a9c:	e781      	b.n	79a2 <_dtoa_r+0x74a>
    7a9e:	9d08      	ldr	r5, [sp, #32]
    7aa0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    7aa2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7aa4:	e788      	b.n	79b8 <_dtoa_r+0x760>
    7aa6:	9a08      	ldr	r2, [sp, #32]
    7aa8:	e7b4      	b.n	7a14 <_dtoa_r+0x7bc>
    7aaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    7aac:	2500      	movs	r5, #0
    7aae:	2b01      	cmp	r3, #1
    7ab0:	ddc7      	ble.n	7a42 <_dtoa_r+0x7ea>
    7ab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ab4:	2001      	movs	r0, #1
    7ab6:	2b00      	cmp	r3, #0
    7ab8:	d00b      	beq.n	7ad2 <_dtoa_r+0x87a>
    7aba:	9b08      	ldr	r3, [sp, #32]
    7abc:	9a08      	ldr	r2, [sp, #32]
    7abe:	691b      	ldr	r3, [r3, #16]
    7ac0:	930f      	str	r3, [sp, #60]	; 0x3c
    7ac2:	3303      	adds	r3, #3
    7ac4:	009b      	lsls	r3, r3, #2
    7ac6:	18d3      	adds	r3, r2, r3
    7ac8:	6858      	ldr	r0, [r3, #4]
    7aca:	f000 fc4d 	bl	8368 <__hi0bits>
    7ace:	2320      	movs	r3, #32
    7ad0:	1a18      	subs	r0, r3, r0
    7ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7ad4:	18c0      	adds	r0, r0, r3
    7ad6:	231f      	movs	r3, #31
    7ad8:	4018      	ands	r0, r3
    7ada:	d100      	bne.n	7ade <_dtoa_r+0x886>
    7adc:	e0ab      	b.n	7c36 <_dtoa_r+0x9de>
    7ade:	3301      	adds	r3, #1
    7ae0:	1a1b      	subs	r3, r3, r0
    7ae2:	2b04      	cmp	r3, #4
    7ae4:	dc00      	bgt.n	7ae8 <_dtoa_r+0x890>
    7ae6:	e09b      	b.n	7c20 <_dtoa_r+0x9c8>
    7ae8:	231c      	movs	r3, #28
    7aea:	1a18      	subs	r0, r3, r0
    7aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7aee:	1824      	adds	r4, r4, r0
    7af0:	181b      	adds	r3, r3, r0
    7af2:	930b      	str	r3, [sp, #44]	; 0x2c
    7af4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7af6:	181b      	adds	r3, r3, r0
    7af8:	930c      	str	r3, [sp, #48]	; 0x30
    7afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7afc:	2b00      	cmp	r3, #0
    7afe:	dd05      	ble.n	7b0c <_dtoa_r+0x8b4>
    7b00:	001a      	movs	r2, r3
    7b02:	9905      	ldr	r1, [sp, #20]
    7b04:	9804      	ldr	r0, [sp, #16]
    7b06:	f000 fd63 	bl	85d0 <__lshift>
    7b0a:	9005      	str	r0, [sp, #20]
    7b0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7b0e:	2b00      	cmp	r3, #0
    7b10:	dd05      	ble.n	7b1e <_dtoa_r+0x8c6>
    7b12:	001a      	movs	r2, r3
    7b14:	9908      	ldr	r1, [sp, #32]
    7b16:	9804      	ldr	r0, [sp, #16]
    7b18:	f000 fd5a 	bl	85d0 <__lshift>
    7b1c:	9008      	str	r0, [sp, #32]
    7b1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b20:	2b00      	cmp	r3, #0
    7b22:	d100      	bne.n	7b26 <_dtoa_r+0x8ce>
    7b24:	e089      	b.n	7c3a <_dtoa_r+0x9e2>
    7b26:	9908      	ldr	r1, [sp, #32]
    7b28:	9805      	ldr	r0, [sp, #20]
    7b2a:	f000 fda2 	bl	8672 <__mcmp>
    7b2e:	2800      	cmp	r0, #0
    7b30:	db00      	blt.n	7b34 <_dtoa_r+0x8dc>
    7b32:	e082      	b.n	7c3a <_dtoa_r+0x9e2>
    7b34:	9b03      	ldr	r3, [sp, #12]
    7b36:	220a      	movs	r2, #10
    7b38:	3b01      	subs	r3, #1
    7b3a:	9303      	str	r3, [sp, #12]
    7b3c:	9905      	ldr	r1, [sp, #20]
    7b3e:	2300      	movs	r3, #0
    7b40:	9804      	ldr	r0, [sp, #16]
    7b42:	f000 fbd5 	bl	82f0 <__multadd>
    7b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7b48:	9005      	str	r0, [sp, #20]
    7b4a:	2b00      	cmp	r3, #0
    7b4c:	d100      	bne.n	7b50 <_dtoa_r+0x8f8>
    7b4e:	e15d      	b.n	7e0c <_dtoa_r+0xbb4>
    7b50:	2300      	movs	r3, #0
    7b52:	0031      	movs	r1, r6
    7b54:	220a      	movs	r2, #10
    7b56:	9804      	ldr	r0, [sp, #16]
    7b58:	f000 fbca 	bl	82f0 <__multadd>
    7b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7b5e:	0006      	movs	r6, r0
    7b60:	2b00      	cmp	r3, #0
    7b62:	dc02      	bgt.n	7b6a <_dtoa_r+0x912>
    7b64:	9b22      	ldr	r3, [sp, #136]	; 0x88
    7b66:	2b02      	cmp	r3, #2
    7b68:	dc6d      	bgt.n	7c46 <_dtoa_r+0x9ee>
    7b6a:	2c00      	cmp	r4, #0
    7b6c:	dd05      	ble.n	7b7a <_dtoa_r+0x922>
    7b6e:	0031      	movs	r1, r6
    7b70:	0022      	movs	r2, r4
    7b72:	9804      	ldr	r0, [sp, #16]
    7b74:	f000 fd2c 	bl	85d0 <__lshift>
    7b78:	0006      	movs	r6, r0
    7b7a:	0030      	movs	r0, r6
    7b7c:	2d00      	cmp	r5, #0
    7b7e:	d011      	beq.n	7ba4 <_dtoa_r+0x94c>
    7b80:	6871      	ldr	r1, [r6, #4]
    7b82:	9804      	ldr	r0, [sp, #16]
    7b84:	f000 fb63 	bl	824e <_Balloc>
    7b88:	0031      	movs	r1, r6
    7b8a:	0004      	movs	r4, r0
    7b8c:	6933      	ldr	r3, [r6, #16]
    7b8e:	310c      	adds	r1, #12
    7b90:	1c9a      	adds	r2, r3, #2
    7b92:	0092      	lsls	r2, r2, #2
    7b94:	300c      	adds	r0, #12
    7b96:	f7fe fa83 	bl	60a0 <memcpy>
    7b9a:	2201      	movs	r2, #1
    7b9c:	0021      	movs	r1, r4
    7b9e:	9804      	ldr	r0, [sp, #16]
    7ba0:	f000 fd16 	bl	85d0 <__lshift>
    7ba4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    7ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7ba8:	3f01      	subs	r7, #1
    7baa:	930b      	str	r3, [sp, #44]	; 0x2c
    7bac:	19db      	adds	r3, r3, r7
    7bae:	0037      	movs	r7, r6
    7bb0:	0006      	movs	r6, r0
    7bb2:	930f      	str	r3, [sp, #60]	; 0x3c
    7bb4:	9908      	ldr	r1, [sp, #32]
    7bb6:	9805      	ldr	r0, [sp, #20]
    7bb8:	f7ff faca 	bl	7150 <quorem>
    7bbc:	0039      	movs	r1, r7
    7bbe:	900d      	str	r0, [sp, #52]	; 0x34
    7bc0:	0004      	movs	r4, r0
    7bc2:	9805      	ldr	r0, [sp, #20]
    7bc4:	f000 fd55 	bl	8672 <__mcmp>
    7bc8:	0032      	movs	r2, r6
    7bca:	900e      	str	r0, [sp, #56]	; 0x38
    7bcc:	9908      	ldr	r1, [sp, #32]
    7bce:	9804      	ldr	r0, [sp, #16]
    7bd0:	f000 fd68 	bl	86a4 <__mdiff>
    7bd4:	2301      	movs	r3, #1
    7bd6:	930c      	str	r3, [sp, #48]	; 0x30
    7bd8:	68c3      	ldr	r3, [r0, #12]
    7bda:	3430      	adds	r4, #48	; 0x30
    7bdc:	0005      	movs	r5, r0
    7bde:	2b00      	cmp	r3, #0
    7be0:	d104      	bne.n	7bec <_dtoa_r+0x994>
    7be2:	0001      	movs	r1, r0
    7be4:	9805      	ldr	r0, [sp, #20]
    7be6:	f000 fd44 	bl	8672 <__mcmp>
    7bea:	900c      	str	r0, [sp, #48]	; 0x30
    7bec:	0029      	movs	r1, r5
    7bee:	9804      	ldr	r0, [sp, #16]
    7bf0:	f000 fb65 	bl	82be <_Bfree>
    7bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7bf6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    7bf8:	4313      	orrs	r3, r2
    7bfa:	d000      	beq.n	7bfe <_dtoa_r+0x9a6>
    7bfc:	e089      	b.n	7d12 <_dtoa_r+0xaba>
    7bfe:	9a06      	ldr	r2, [sp, #24]
    7c00:	3301      	adds	r3, #1
    7c02:	4213      	tst	r3, r2
    7c04:	d000      	beq.n	7c08 <_dtoa_r+0x9b0>
    7c06:	e084      	b.n	7d12 <_dtoa_r+0xaba>
    7c08:	2c39      	cmp	r4, #57	; 0x39
    7c0a:	d100      	bne.n	7c0e <_dtoa_r+0x9b6>
    7c0c:	e0a3      	b.n	7d56 <_dtoa_r+0xafe>
    7c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7c10:	2b00      	cmp	r3, #0
    7c12:	dd01      	ble.n	7c18 <_dtoa_r+0x9c0>
    7c14:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    7c16:	3431      	adds	r4, #49	; 0x31
    7c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7c1a:	1c5d      	adds	r5, r3, #1
    7c1c:	701c      	strb	r4, [r3, #0]
    7c1e:	e027      	b.n	7c70 <_dtoa_r+0xa18>
    7c20:	2b04      	cmp	r3, #4
    7c22:	d100      	bne.n	7c26 <_dtoa_r+0x9ce>
    7c24:	e769      	b.n	7afa <_dtoa_r+0x8a2>
    7c26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7c28:	331c      	adds	r3, #28
    7c2a:	18d2      	adds	r2, r2, r3
    7c2c:	920b      	str	r2, [sp, #44]	; 0x2c
    7c2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7c30:	18e4      	adds	r4, r4, r3
    7c32:	18d3      	adds	r3, r2, r3
    7c34:	e760      	b.n	7af8 <_dtoa_r+0x8a0>
    7c36:	0003      	movs	r3, r0
    7c38:	e7f5      	b.n	7c26 <_dtoa_r+0x9ce>
    7c3a:	2f00      	cmp	r7, #0
    7c3c:	dc3c      	bgt.n	7cb8 <_dtoa_r+0xa60>
    7c3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    7c40:	2b02      	cmp	r3, #2
    7c42:	dd39      	ble.n	7cb8 <_dtoa_r+0xa60>
    7c44:	970d      	str	r7, [sp, #52]	; 0x34
    7c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7c48:	2b00      	cmp	r3, #0
    7c4a:	d10c      	bne.n	7c66 <_dtoa_r+0xa0e>
    7c4c:	9908      	ldr	r1, [sp, #32]
    7c4e:	2205      	movs	r2, #5
    7c50:	9804      	ldr	r0, [sp, #16]
    7c52:	f000 fb4d 	bl	82f0 <__multadd>
    7c56:	9008      	str	r0, [sp, #32]
    7c58:	0001      	movs	r1, r0
    7c5a:	9805      	ldr	r0, [sp, #20]
    7c5c:	f000 fd09 	bl	8672 <__mcmp>
    7c60:	2800      	cmp	r0, #0
    7c62:	dd00      	ble.n	7c66 <_dtoa_r+0xa0e>
    7c64:	e55a      	b.n	771c <_dtoa_r+0x4c4>
    7c66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    7c68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7c6a:	43db      	mvns	r3, r3
    7c6c:	9303      	str	r3, [sp, #12]
    7c6e:	2700      	movs	r7, #0
    7c70:	9908      	ldr	r1, [sp, #32]
    7c72:	9804      	ldr	r0, [sp, #16]
    7c74:	f000 fb23 	bl	82be <_Bfree>
    7c78:	2e00      	cmp	r6, #0
    7c7a:	d100      	bne.n	7c7e <_dtoa_r+0xa26>
    7c7c:	e63f      	b.n	78fe <_dtoa_r+0x6a6>
    7c7e:	2f00      	cmp	r7, #0
    7c80:	d005      	beq.n	7c8e <_dtoa_r+0xa36>
    7c82:	42b7      	cmp	r7, r6
    7c84:	d003      	beq.n	7c8e <_dtoa_r+0xa36>
    7c86:	0039      	movs	r1, r7
    7c88:	9804      	ldr	r0, [sp, #16]
    7c8a:	f000 fb18 	bl	82be <_Bfree>
    7c8e:	0031      	movs	r1, r6
    7c90:	9804      	ldr	r0, [sp, #16]
    7c92:	f000 fb14 	bl	82be <_Bfree>
    7c96:	e632      	b.n	78fe <_dtoa_r+0x6a6>
    7c98:	9508      	str	r5, [sp, #32]
    7c9a:	002e      	movs	r6, r5
    7c9c:	e7e3      	b.n	7c66 <_dtoa_r+0xa0e>
    7c9e:	2300      	movs	r3, #0
    7ca0:	9308      	str	r3, [sp, #32]
    7ca2:	001e      	movs	r6, r3
    7ca4:	e7df      	b.n	7c66 <_dtoa_r+0xa0e>
    7ca6:	46c0      	nop			; (mov r8, r8)
    7ca8:	40240000 	.word	0x40240000
    7cac:	00000433 	.word	0x00000433
    7cb0:	9603      	str	r6, [sp, #12]
    7cb2:	9508      	str	r5, [sp, #32]
    7cb4:	002e      	movs	r6, r5
    7cb6:	e531      	b.n	771c <_dtoa_r+0x4c4>
    7cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7cba:	970d      	str	r7, [sp, #52]	; 0x34
    7cbc:	2b00      	cmp	r3, #0
    7cbe:	d000      	beq.n	7cc2 <_dtoa_r+0xa6a>
    7cc0:	e753      	b.n	7b6a <_dtoa_r+0x912>
    7cc2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7cc4:	9908      	ldr	r1, [sp, #32]
    7cc6:	9805      	ldr	r0, [sp, #20]
    7cc8:	f7ff fa42 	bl	7150 <quorem>
    7ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7cce:	3030      	adds	r0, #48	; 0x30
    7cd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7cd2:	7028      	strb	r0, [r5, #0]
    7cd4:	3501      	adds	r5, #1
    7cd6:	0004      	movs	r4, r0
    7cd8:	1aeb      	subs	r3, r5, r3
    7cda:	429a      	cmp	r2, r3
    7cdc:	dc78      	bgt.n	7dd0 <_dtoa_r+0xb78>
    7cde:	1e15      	subs	r5, r2, #0
    7ce0:	dc00      	bgt.n	7ce4 <_dtoa_r+0xa8c>
    7ce2:	2501      	movs	r5, #1
    7ce4:	2700      	movs	r7, #0
    7ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7ce8:	195d      	adds	r5, r3, r5
    7cea:	9905      	ldr	r1, [sp, #20]
    7cec:	2201      	movs	r2, #1
    7cee:	9804      	ldr	r0, [sp, #16]
    7cf0:	f000 fc6e 	bl	85d0 <__lshift>
    7cf4:	9908      	ldr	r1, [sp, #32]
    7cf6:	9005      	str	r0, [sp, #20]
    7cf8:	f000 fcbb 	bl	8672 <__mcmp>
    7cfc:	2800      	cmp	r0, #0
    7cfe:	dc2f      	bgt.n	7d60 <_dtoa_r+0xb08>
    7d00:	d101      	bne.n	7d06 <_dtoa_r+0xaae>
    7d02:	07e3      	lsls	r3, r4, #31
    7d04:	d42c      	bmi.n	7d60 <_dtoa_r+0xb08>
    7d06:	1e6b      	subs	r3, r5, #1
    7d08:	781a      	ldrb	r2, [r3, #0]
    7d0a:	2a30      	cmp	r2, #48	; 0x30
    7d0c:	d1b0      	bne.n	7c70 <_dtoa_r+0xa18>
    7d0e:	001d      	movs	r5, r3
    7d10:	e7f9      	b.n	7d06 <_dtoa_r+0xaae>
    7d12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7d14:	2b00      	cmp	r3, #0
    7d16:	db07      	blt.n	7d28 <_dtoa_r+0xad0>
    7d18:	001d      	movs	r5, r3
    7d1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    7d1c:	431d      	orrs	r5, r3
    7d1e:	d126      	bne.n	7d6e <_dtoa_r+0xb16>
    7d20:	2301      	movs	r3, #1
    7d22:	9a06      	ldr	r2, [sp, #24]
    7d24:	4213      	tst	r3, r2
    7d26:	d122      	bne.n	7d6e <_dtoa_r+0xb16>
    7d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7d2a:	2b00      	cmp	r3, #0
    7d2c:	dc00      	bgt.n	7d30 <_dtoa_r+0xad8>
    7d2e:	e773      	b.n	7c18 <_dtoa_r+0x9c0>
    7d30:	9905      	ldr	r1, [sp, #20]
    7d32:	2201      	movs	r2, #1
    7d34:	9804      	ldr	r0, [sp, #16]
    7d36:	f000 fc4b 	bl	85d0 <__lshift>
    7d3a:	9908      	ldr	r1, [sp, #32]
    7d3c:	9005      	str	r0, [sp, #20]
    7d3e:	f000 fc98 	bl	8672 <__mcmp>
    7d42:	2800      	cmp	r0, #0
    7d44:	dc04      	bgt.n	7d50 <_dtoa_r+0xaf8>
    7d46:	d000      	beq.n	7d4a <_dtoa_r+0xaf2>
    7d48:	e766      	b.n	7c18 <_dtoa_r+0x9c0>
    7d4a:	07e3      	lsls	r3, r4, #31
    7d4c:	d400      	bmi.n	7d50 <_dtoa_r+0xaf8>
    7d4e:	e763      	b.n	7c18 <_dtoa_r+0x9c0>
    7d50:	2c39      	cmp	r4, #57	; 0x39
    7d52:	d000      	beq.n	7d56 <_dtoa_r+0xafe>
    7d54:	e75e      	b.n	7c14 <_dtoa_r+0x9bc>
    7d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7d5a:	1c5d      	adds	r5, r3, #1
    7d5c:	2339      	movs	r3, #57	; 0x39
    7d5e:	7013      	strb	r3, [r2, #0]
    7d60:	1e6b      	subs	r3, r5, #1
    7d62:	781a      	ldrb	r2, [r3, #0]
    7d64:	2a39      	cmp	r2, #57	; 0x39
    7d66:	d03b      	beq.n	7de0 <_dtoa_r+0xb88>
    7d68:	3201      	adds	r2, #1
    7d6a:	701a      	strb	r2, [r3, #0]
    7d6c:	e780      	b.n	7c70 <_dtoa_r+0xa18>
    7d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d70:	3301      	adds	r3, #1
    7d72:	930d      	str	r3, [sp, #52]	; 0x34
    7d74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7d76:	2b00      	cmp	r3, #0
    7d78:	dd05      	ble.n	7d86 <_dtoa_r+0xb2e>
    7d7a:	2c39      	cmp	r4, #57	; 0x39
    7d7c:	d0eb      	beq.n	7d56 <_dtoa_r+0xafe>
    7d7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    7d80:	3401      	adds	r4, #1
    7d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d84:	e74a      	b.n	7c1c <_dtoa_r+0x9c4>
    7d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7d8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    7d8c:	701c      	strb	r4, [r3, #0]
    7d8e:	4293      	cmp	r3, r2
    7d90:	d0ab      	beq.n	7cea <_dtoa_r+0xa92>
    7d92:	2300      	movs	r3, #0
    7d94:	220a      	movs	r2, #10
    7d96:	9905      	ldr	r1, [sp, #20]
    7d98:	9804      	ldr	r0, [sp, #16]
    7d9a:	f000 faa9 	bl	82f0 <__multadd>
    7d9e:	2300      	movs	r3, #0
    7da0:	9005      	str	r0, [sp, #20]
    7da2:	220a      	movs	r2, #10
    7da4:	0039      	movs	r1, r7
    7da6:	9804      	ldr	r0, [sp, #16]
    7da8:	42b7      	cmp	r7, r6
    7daa:	d106      	bne.n	7dba <_dtoa_r+0xb62>
    7dac:	f000 faa0 	bl	82f0 <__multadd>
    7db0:	0007      	movs	r7, r0
    7db2:	0006      	movs	r6, r0
    7db4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7db6:	930b      	str	r3, [sp, #44]	; 0x2c
    7db8:	e6fc      	b.n	7bb4 <_dtoa_r+0x95c>
    7dba:	f000 fa99 	bl	82f0 <__multadd>
    7dbe:	0031      	movs	r1, r6
    7dc0:	0007      	movs	r7, r0
    7dc2:	2300      	movs	r3, #0
    7dc4:	220a      	movs	r2, #10
    7dc6:	9804      	ldr	r0, [sp, #16]
    7dc8:	f000 fa92 	bl	82f0 <__multadd>
    7dcc:	0006      	movs	r6, r0
    7dce:	e7f1      	b.n	7db4 <_dtoa_r+0xb5c>
    7dd0:	2300      	movs	r3, #0
    7dd2:	220a      	movs	r2, #10
    7dd4:	9905      	ldr	r1, [sp, #20]
    7dd6:	9804      	ldr	r0, [sp, #16]
    7dd8:	f000 fa8a 	bl	82f0 <__multadd>
    7ddc:	9005      	str	r0, [sp, #20]
    7dde:	e771      	b.n	7cc4 <_dtoa_r+0xa6c>
    7de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7de2:	429a      	cmp	r2, r3
    7de4:	d105      	bne.n	7df2 <_dtoa_r+0xb9a>
    7de6:	9b03      	ldr	r3, [sp, #12]
    7de8:	3301      	adds	r3, #1
    7dea:	9303      	str	r3, [sp, #12]
    7dec:	2331      	movs	r3, #49	; 0x31
    7dee:	7013      	strb	r3, [r2, #0]
    7df0:	e73e      	b.n	7c70 <_dtoa_r+0xa18>
    7df2:	001d      	movs	r5, r3
    7df4:	e7b4      	b.n	7d60 <_dtoa_r+0xb08>
    7df6:	4b0a      	ldr	r3, [pc, #40]	; (7e20 <_dtoa_r+0xbc8>)
    7df8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7dfa:	930a      	str	r3, [sp, #40]	; 0x28
    7dfc:	4b09      	ldr	r3, [pc, #36]	; (7e24 <_dtoa_r+0xbcc>)
    7dfe:	2a00      	cmp	r2, #0
    7e00:	d001      	beq.n	7e06 <_dtoa_r+0xbae>
    7e02:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7e04:	6013      	str	r3, [r2, #0]
    7e06:	980a      	ldr	r0, [sp, #40]	; 0x28
    7e08:	b01d      	add	sp, #116	; 0x74
    7e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7e0e:	2b00      	cmp	r3, #0
    7e10:	dd00      	ble.n	7e14 <_dtoa_r+0xbbc>
    7e12:	e756      	b.n	7cc2 <_dtoa_r+0xa6a>
    7e14:	9b22      	ldr	r3, [sp, #136]	; 0x88
    7e16:	2b02      	cmp	r3, #2
    7e18:	dc00      	bgt.n	7e1c <_dtoa_r+0xbc4>
    7e1a:	e752      	b.n	7cc2 <_dtoa_r+0xa6a>
    7e1c:	e713      	b.n	7c46 <_dtoa_r+0x9ee>
    7e1e:	46c0      	nop			; (mov r8, r8)
    7e20:	0000b61b 	.word	0x0000b61b
    7e24:	0000b623 	.word	0x0000b623

00007e28 <__sflush_r>:
    7e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7e2a:	898a      	ldrh	r2, [r1, #12]
    7e2c:	0005      	movs	r5, r0
    7e2e:	000c      	movs	r4, r1
    7e30:	0713      	lsls	r3, r2, #28
    7e32:	d460      	bmi.n	7ef6 <__sflush_r+0xce>
    7e34:	684b      	ldr	r3, [r1, #4]
    7e36:	2b00      	cmp	r3, #0
    7e38:	dc04      	bgt.n	7e44 <__sflush_r+0x1c>
    7e3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	dc01      	bgt.n	7e44 <__sflush_r+0x1c>
    7e40:	2000      	movs	r0, #0
    7e42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7e44:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7e46:	2f00      	cmp	r7, #0
    7e48:	d0fa      	beq.n	7e40 <__sflush_r+0x18>
    7e4a:	2300      	movs	r3, #0
    7e4c:	682e      	ldr	r6, [r5, #0]
    7e4e:	602b      	str	r3, [r5, #0]
    7e50:	2380      	movs	r3, #128	; 0x80
    7e52:	015b      	lsls	r3, r3, #5
    7e54:	401a      	ands	r2, r3
    7e56:	d034      	beq.n	7ec2 <__sflush_r+0x9a>
    7e58:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7e5a:	89a3      	ldrh	r3, [r4, #12]
    7e5c:	075b      	lsls	r3, r3, #29
    7e5e:	d506      	bpl.n	7e6e <__sflush_r+0x46>
    7e60:	6863      	ldr	r3, [r4, #4]
    7e62:	1ac0      	subs	r0, r0, r3
    7e64:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7e66:	2b00      	cmp	r3, #0
    7e68:	d001      	beq.n	7e6e <__sflush_r+0x46>
    7e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7e6c:	1ac0      	subs	r0, r0, r3
    7e6e:	0002      	movs	r2, r0
    7e70:	6a21      	ldr	r1, [r4, #32]
    7e72:	2300      	movs	r3, #0
    7e74:	0028      	movs	r0, r5
    7e76:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7e78:	47b8      	blx	r7
    7e7a:	89a1      	ldrh	r1, [r4, #12]
    7e7c:	1c43      	adds	r3, r0, #1
    7e7e:	d106      	bne.n	7e8e <__sflush_r+0x66>
    7e80:	682b      	ldr	r3, [r5, #0]
    7e82:	2b1d      	cmp	r3, #29
    7e84:	d831      	bhi.n	7eea <__sflush_r+0xc2>
    7e86:	4a2c      	ldr	r2, [pc, #176]	; (7f38 <__sflush_r+0x110>)
    7e88:	40da      	lsrs	r2, r3
    7e8a:	07d3      	lsls	r3, r2, #31
    7e8c:	d52d      	bpl.n	7eea <__sflush_r+0xc2>
    7e8e:	2300      	movs	r3, #0
    7e90:	6063      	str	r3, [r4, #4]
    7e92:	6923      	ldr	r3, [r4, #16]
    7e94:	6023      	str	r3, [r4, #0]
    7e96:	04cb      	lsls	r3, r1, #19
    7e98:	d505      	bpl.n	7ea6 <__sflush_r+0x7e>
    7e9a:	1c43      	adds	r3, r0, #1
    7e9c:	d102      	bne.n	7ea4 <__sflush_r+0x7c>
    7e9e:	682b      	ldr	r3, [r5, #0]
    7ea0:	2b00      	cmp	r3, #0
    7ea2:	d100      	bne.n	7ea6 <__sflush_r+0x7e>
    7ea4:	6560      	str	r0, [r4, #84]	; 0x54
    7ea6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7ea8:	602e      	str	r6, [r5, #0]
    7eaa:	2900      	cmp	r1, #0
    7eac:	d0c8      	beq.n	7e40 <__sflush_r+0x18>
    7eae:	0023      	movs	r3, r4
    7eb0:	3344      	adds	r3, #68	; 0x44
    7eb2:	4299      	cmp	r1, r3
    7eb4:	d002      	beq.n	7ebc <__sflush_r+0x94>
    7eb6:	0028      	movs	r0, r5
    7eb8:	f7fe f904 	bl	60c4 <_free_r>
    7ebc:	2000      	movs	r0, #0
    7ebe:	6360      	str	r0, [r4, #52]	; 0x34
    7ec0:	e7bf      	b.n	7e42 <__sflush_r+0x1a>
    7ec2:	2301      	movs	r3, #1
    7ec4:	6a21      	ldr	r1, [r4, #32]
    7ec6:	0028      	movs	r0, r5
    7ec8:	47b8      	blx	r7
    7eca:	1c43      	adds	r3, r0, #1
    7ecc:	d1c5      	bne.n	7e5a <__sflush_r+0x32>
    7ece:	682b      	ldr	r3, [r5, #0]
    7ed0:	2b00      	cmp	r3, #0
    7ed2:	d0c2      	beq.n	7e5a <__sflush_r+0x32>
    7ed4:	2b1d      	cmp	r3, #29
    7ed6:	d001      	beq.n	7edc <__sflush_r+0xb4>
    7ed8:	2b16      	cmp	r3, #22
    7eda:	d101      	bne.n	7ee0 <__sflush_r+0xb8>
    7edc:	602e      	str	r6, [r5, #0]
    7ede:	e7af      	b.n	7e40 <__sflush_r+0x18>
    7ee0:	2340      	movs	r3, #64	; 0x40
    7ee2:	89a2      	ldrh	r2, [r4, #12]
    7ee4:	4313      	orrs	r3, r2
    7ee6:	81a3      	strh	r3, [r4, #12]
    7ee8:	e7ab      	b.n	7e42 <__sflush_r+0x1a>
    7eea:	2340      	movs	r3, #64	; 0x40
    7eec:	430b      	orrs	r3, r1
    7eee:	2001      	movs	r0, #1
    7ef0:	81a3      	strh	r3, [r4, #12]
    7ef2:	4240      	negs	r0, r0
    7ef4:	e7a5      	b.n	7e42 <__sflush_r+0x1a>
    7ef6:	690f      	ldr	r7, [r1, #16]
    7ef8:	2f00      	cmp	r7, #0
    7efa:	d0a1      	beq.n	7e40 <__sflush_r+0x18>
    7efc:	680b      	ldr	r3, [r1, #0]
    7efe:	600f      	str	r7, [r1, #0]
    7f00:	1bdb      	subs	r3, r3, r7
    7f02:	9301      	str	r3, [sp, #4]
    7f04:	2300      	movs	r3, #0
    7f06:	0792      	lsls	r2, r2, #30
    7f08:	d100      	bne.n	7f0c <__sflush_r+0xe4>
    7f0a:	694b      	ldr	r3, [r1, #20]
    7f0c:	60a3      	str	r3, [r4, #8]
    7f0e:	9b01      	ldr	r3, [sp, #4]
    7f10:	2b00      	cmp	r3, #0
    7f12:	dc00      	bgt.n	7f16 <__sflush_r+0xee>
    7f14:	e794      	b.n	7e40 <__sflush_r+0x18>
    7f16:	9b01      	ldr	r3, [sp, #4]
    7f18:	003a      	movs	r2, r7
    7f1a:	6a21      	ldr	r1, [r4, #32]
    7f1c:	0028      	movs	r0, r5
    7f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7f20:	47b0      	blx	r6
    7f22:	2800      	cmp	r0, #0
    7f24:	dc03      	bgt.n	7f2e <__sflush_r+0x106>
    7f26:	2340      	movs	r3, #64	; 0x40
    7f28:	89a2      	ldrh	r2, [r4, #12]
    7f2a:	4313      	orrs	r3, r2
    7f2c:	e7df      	b.n	7eee <__sflush_r+0xc6>
    7f2e:	9b01      	ldr	r3, [sp, #4]
    7f30:	183f      	adds	r7, r7, r0
    7f32:	1a1b      	subs	r3, r3, r0
    7f34:	9301      	str	r3, [sp, #4]
    7f36:	e7ea      	b.n	7f0e <__sflush_r+0xe6>
    7f38:	20400001 	.word	0x20400001

00007f3c <_fflush_r>:
    7f3c:	690b      	ldr	r3, [r1, #16]
    7f3e:	b570      	push	{r4, r5, r6, lr}
    7f40:	0005      	movs	r5, r0
    7f42:	000c      	movs	r4, r1
    7f44:	2b00      	cmp	r3, #0
    7f46:	d101      	bne.n	7f4c <_fflush_r+0x10>
    7f48:	2000      	movs	r0, #0
    7f4a:	bd70      	pop	{r4, r5, r6, pc}
    7f4c:	2800      	cmp	r0, #0
    7f4e:	d004      	beq.n	7f5a <_fflush_r+0x1e>
    7f50:	6983      	ldr	r3, [r0, #24]
    7f52:	2b00      	cmp	r3, #0
    7f54:	d101      	bne.n	7f5a <_fflush_r+0x1e>
    7f56:	f000 f85f 	bl	8018 <__sinit>
    7f5a:	4b0b      	ldr	r3, [pc, #44]	; (7f88 <_fflush_r+0x4c>)
    7f5c:	429c      	cmp	r4, r3
    7f5e:	d109      	bne.n	7f74 <_fflush_r+0x38>
    7f60:	686c      	ldr	r4, [r5, #4]
    7f62:	220c      	movs	r2, #12
    7f64:	5ea3      	ldrsh	r3, [r4, r2]
    7f66:	2b00      	cmp	r3, #0
    7f68:	d0ee      	beq.n	7f48 <_fflush_r+0xc>
    7f6a:	0021      	movs	r1, r4
    7f6c:	0028      	movs	r0, r5
    7f6e:	f7ff ff5b 	bl	7e28 <__sflush_r>
    7f72:	e7ea      	b.n	7f4a <_fflush_r+0xe>
    7f74:	4b05      	ldr	r3, [pc, #20]	; (7f8c <_fflush_r+0x50>)
    7f76:	429c      	cmp	r4, r3
    7f78:	d101      	bne.n	7f7e <_fflush_r+0x42>
    7f7a:	68ac      	ldr	r4, [r5, #8]
    7f7c:	e7f1      	b.n	7f62 <_fflush_r+0x26>
    7f7e:	4b04      	ldr	r3, [pc, #16]	; (7f90 <_fflush_r+0x54>)
    7f80:	429c      	cmp	r4, r3
    7f82:	d1ee      	bne.n	7f62 <_fflush_r+0x26>
    7f84:	68ec      	ldr	r4, [r5, #12]
    7f86:	e7ec      	b.n	7f62 <_fflush_r+0x26>
    7f88:	0000b648 	.word	0x0000b648
    7f8c:	0000b668 	.word	0x0000b668
    7f90:	0000b628 	.word	0x0000b628

00007f94 <_cleanup_r>:
    7f94:	b510      	push	{r4, lr}
    7f96:	4902      	ldr	r1, [pc, #8]	; (7fa0 <_cleanup_r+0xc>)
    7f98:	f000 f8b2 	bl	8100 <_fwalk_reent>
    7f9c:	bd10      	pop	{r4, pc}
    7f9e:	46c0      	nop			; (mov r8, r8)
    7fa0:	00007f3d 	.word	0x00007f3d

00007fa4 <std.isra.0>:
    7fa4:	2300      	movs	r3, #0
    7fa6:	b510      	push	{r4, lr}
    7fa8:	0004      	movs	r4, r0
    7faa:	6003      	str	r3, [r0, #0]
    7fac:	6043      	str	r3, [r0, #4]
    7fae:	6083      	str	r3, [r0, #8]
    7fb0:	8181      	strh	r1, [r0, #12]
    7fb2:	6643      	str	r3, [r0, #100]	; 0x64
    7fb4:	81c2      	strh	r2, [r0, #14]
    7fb6:	6103      	str	r3, [r0, #16]
    7fb8:	6143      	str	r3, [r0, #20]
    7fba:	6183      	str	r3, [r0, #24]
    7fbc:	0019      	movs	r1, r3
    7fbe:	2208      	movs	r2, #8
    7fc0:	305c      	adds	r0, #92	; 0x5c
    7fc2:	f7fe f876 	bl	60b2 <memset>
    7fc6:	4b05      	ldr	r3, [pc, #20]	; (7fdc <std.isra.0+0x38>)
    7fc8:	6224      	str	r4, [r4, #32]
    7fca:	6263      	str	r3, [r4, #36]	; 0x24
    7fcc:	4b04      	ldr	r3, [pc, #16]	; (7fe0 <std.isra.0+0x3c>)
    7fce:	62a3      	str	r3, [r4, #40]	; 0x28
    7fd0:	4b04      	ldr	r3, [pc, #16]	; (7fe4 <std.isra.0+0x40>)
    7fd2:	62e3      	str	r3, [r4, #44]	; 0x2c
    7fd4:	4b04      	ldr	r3, [pc, #16]	; (7fe8 <std.isra.0+0x44>)
    7fd6:	6323      	str	r3, [r4, #48]	; 0x30
    7fd8:	bd10      	pop	{r4, pc}
    7fda:	46c0      	nop			; (mov r8, r8)
    7fdc:	00008ab9 	.word	0x00008ab9
    7fe0:	00008ae1 	.word	0x00008ae1
    7fe4:	00008b19 	.word	0x00008b19
    7fe8:	00008b45 	.word	0x00008b45

00007fec <__sfmoreglue>:
    7fec:	b570      	push	{r4, r5, r6, lr}
    7fee:	2568      	movs	r5, #104	; 0x68
    7ff0:	1e4a      	subs	r2, r1, #1
    7ff2:	4355      	muls	r5, r2
    7ff4:	000e      	movs	r6, r1
    7ff6:	0029      	movs	r1, r5
    7ff8:	3174      	adds	r1, #116	; 0x74
    7ffa:	f7fe f8ad 	bl	6158 <_malloc_r>
    7ffe:	1e04      	subs	r4, r0, #0
    8000:	d008      	beq.n	8014 <__sfmoreglue+0x28>
    8002:	2100      	movs	r1, #0
    8004:	002a      	movs	r2, r5
    8006:	6001      	str	r1, [r0, #0]
    8008:	6046      	str	r6, [r0, #4]
    800a:	300c      	adds	r0, #12
    800c:	60a0      	str	r0, [r4, #8]
    800e:	3268      	adds	r2, #104	; 0x68
    8010:	f7fe f84f 	bl	60b2 <memset>
    8014:	0020      	movs	r0, r4
    8016:	bd70      	pop	{r4, r5, r6, pc}

00008018 <__sinit>:
    8018:	6983      	ldr	r3, [r0, #24]
    801a:	b513      	push	{r0, r1, r4, lr}
    801c:	0004      	movs	r4, r0
    801e:	2b00      	cmp	r3, #0
    8020:	d128      	bne.n	8074 <__sinit+0x5c>
    8022:	6483      	str	r3, [r0, #72]	; 0x48
    8024:	64c3      	str	r3, [r0, #76]	; 0x4c
    8026:	6503      	str	r3, [r0, #80]	; 0x50
    8028:	4b13      	ldr	r3, [pc, #76]	; (8078 <__sinit+0x60>)
    802a:	4a14      	ldr	r2, [pc, #80]	; (807c <__sinit+0x64>)
    802c:	681b      	ldr	r3, [r3, #0]
    802e:	6282      	str	r2, [r0, #40]	; 0x28
    8030:	9301      	str	r3, [sp, #4]
    8032:	4298      	cmp	r0, r3
    8034:	d101      	bne.n	803a <__sinit+0x22>
    8036:	2301      	movs	r3, #1
    8038:	6183      	str	r3, [r0, #24]
    803a:	0020      	movs	r0, r4
    803c:	f000 f820 	bl	8080 <__sfp>
    8040:	6060      	str	r0, [r4, #4]
    8042:	0020      	movs	r0, r4
    8044:	f000 f81c 	bl	8080 <__sfp>
    8048:	60a0      	str	r0, [r4, #8]
    804a:	0020      	movs	r0, r4
    804c:	f000 f818 	bl	8080 <__sfp>
    8050:	2200      	movs	r2, #0
    8052:	60e0      	str	r0, [r4, #12]
    8054:	2104      	movs	r1, #4
    8056:	6860      	ldr	r0, [r4, #4]
    8058:	f7ff ffa4 	bl	7fa4 <std.isra.0>
    805c:	2201      	movs	r2, #1
    805e:	2109      	movs	r1, #9
    8060:	68a0      	ldr	r0, [r4, #8]
    8062:	f7ff ff9f 	bl	7fa4 <std.isra.0>
    8066:	2202      	movs	r2, #2
    8068:	2112      	movs	r1, #18
    806a:	68e0      	ldr	r0, [r4, #12]
    806c:	f7ff ff9a 	bl	7fa4 <std.isra.0>
    8070:	2301      	movs	r3, #1
    8072:	61a3      	str	r3, [r4, #24]
    8074:	bd13      	pop	{r0, r1, r4, pc}
    8076:	46c0      	nop			; (mov r8, r8)
    8078:	0000b4d8 	.word	0x0000b4d8
    807c:	00007f95 	.word	0x00007f95

00008080 <__sfp>:
    8080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8082:	4b1e      	ldr	r3, [pc, #120]	; (80fc <__sfp+0x7c>)
    8084:	0007      	movs	r7, r0
    8086:	681e      	ldr	r6, [r3, #0]
    8088:	69b3      	ldr	r3, [r6, #24]
    808a:	2b00      	cmp	r3, #0
    808c:	d102      	bne.n	8094 <__sfp+0x14>
    808e:	0030      	movs	r0, r6
    8090:	f7ff ffc2 	bl	8018 <__sinit>
    8094:	3648      	adds	r6, #72	; 0x48
    8096:	68b4      	ldr	r4, [r6, #8]
    8098:	6873      	ldr	r3, [r6, #4]
    809a:	3b01      	subs	r3, #1
    809c:	d504      	bpl.n	80a8 <__sfp+0x28>
    809e:	6833      	ldr	r3, [r6, #0]
    80a0:	2b00      	cmp	r3, #0
    80a2:	d007      	beq.n	80b4 <__sfp+0x34>
    80a4:	6836      	ldr	r6, [r6, #0]
    80a6:	e7f6      	b.n	8096 <__sfp+0x16>
    80a8:	220c      	movs	r2, #12
    80aa:	5ea5      	ldrsh	r5, [r4, r2]
    80ac:	2d00      	cmp	r5, #0
    80ae:	d00d      	beq.n	80cc <__sfp+0x4c>
    80b0:	3468      	adds	r4, #104	; 0x68
    80b2:	e7f2      	b.n	809a <__sfp+0x1a>
    80b4:	2104      	movs	r1, #4
    80b6:	0038      	movs	r0, r7
    80b8:	f7ff ff98 	bl	7fec <__sfmoreglue>
    80bc:	6030      	str	r0, [r6, #0]
    80be:	2800      	cmp	r0, #0
    80c0:	d1f0      	bne.n	80a4 <__sfp+0x24>
    80c2:	230c      	movs	r3, #12
    80c4:	0004      	movs	r4, r0
    80c6:	603b      	str	r3, [r7, #0]
    80c8:	0020      	movs	r0, r4
    80ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    80cc:	2301      	movs	r3, #1
    80ce:	0020      	movs	r0, r4
    80d0:	425b      	negs	r3, r3
    80d2:	81e3      	strh	r3, [r4, #14]
    80d4:	3302      	adds	r3, #2
    80d6:	81a3      	strh	r3, [r4, #12]
    80d8:	6665      	str	r5, [r4, #100]	; 0x64
    80da:	6025      	str	r5, [r4, #0]
    80dc:	60a5      	str	r5, [r4, #8]
    80de:	6065      	str	r5, [r4, #4]
    80e0:	6125      	str	r5, [r4, #16]
    80e2:	6165      	str	r5, [r4, #20]
    80e4:	61a5      	str	r5, [r4, #24]
    80e6:	2208      	movs	r2, #8
    80e8:	0029      	movs	r1, r5
    80ea:	305c      	adds	r0, #92	; 0x5c
    80ec:	f7fd ffe1 	bl	60b2 <memset>
    80f0:	6365      	str	r5, [r4, #52]	; 0x34
    80f2:	63a5      	str	r5, [r4, #56]	; 0x38
    80f4:	64a5      	str	r5, [r4, #72]	; 0x48
    80f6:	64e5      	str	r5, [r4, #76]	; 0x4c
    80f8:	e7e6      	b.n	80c8 <__sfp+0x48>
    80fa:	46c0      	nop			; (mov r8, r8)
    80fc:	0000b4d8 	.word	0x0000b4d8

00008100 <_fwalk_reent>:
    8100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8102:	0004      	movs	r4, r0
    8104:	0007      	movs	r7, r0
    8106:	2600      	movs	r6, #0
    8108:	9101      	str	r1, [sp, #4]
    810a:	3448      	adds	r4, #72	; 0x48
    810c:	2c00      	cmp	r4, #0
    810e:	d101      	bne.n	8114 <_fwalk_reent+0x14>
    8110:	0030      	movs	r0, r6
    8112:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8114:	6863      	ldr	r3, [r4, #4]
    8116:	68a5      	ldr	r5, [r4, #8]
    8118:	9300      	str	r3, [sp, #0]
    811a:	9b00      	ldr	r3, [sp, #0]
    811c:	3b01      	subs	r3, #1
    811e:	9300      	str	r3, [sp, #0]
    8120:	d501      	bpl.n	8126 <_fwalk_reent+0x26>
    8122:	6824      	ldr	r4, [r4, #0]
    8124:	e7f2      	b.n	810c <_fwalk_reent+0xc>
    8126:	89ab      	ldrh	r3, [r5, #12]
    8128:	2b01      	cmp	r3, #1
    812a:	d908      	bls.n	813e <_fwalk_reent+0x3e>
    812c:	220e      	movs	r2, #14
    812e:	5eab      	ldrsh	r3, [r5, r2]
    8130:	3301      	adds	r3, #1
    8132:	d004      	beq.n	813e <_fwalk_reent+0x3e>
    8134:	0029      	movs	r1, r5
    8136:	0038      	movs	r0, r7
    8138:	9b01      	ldr	r3, [sp, #4]
    813a:	4798      	blx	r3
    813c:	4306      	orrs	r6, r0
    813e:	3568      	adds	r5, #104	; 0x68
    8140:	e7eb      	b.n	811a <_fwalk_reent+0x1a>
	...

00008144 <_localeconv_r>:
    8144:	4b03      	ldr	r3, [pc, #12]	; (8154 <_localeconv_r+0x10>)
    8146:	681b      	ldr	r3, [r3, #0]
    8148:	6a18      	ldr	r0, [r3, #32]
    814a:	2800      	cmp	r0, #0
    814c:	d100      	bne.n	8150 <_localeconv_r+0xc>
    814e:	4802      	ldr	r0, [pc, #8]	; (8158 <_localeconv_r+0x14>)
    8150:	30f0      	adds	r0, #240	; 0xf0
    8152:	4770      	bx	lr
    8154:	2000004c 	.word	0x2000004c
    8158:	200000b0 	.word	0x200000b0

0000815c <__swhatbuf_r>:
    815c:	b570      	push	{r4, r5, r6, lr}
    815e:	000e      	movs	r6, r1
    8160:	001d      	movs	r5, r3
    8162:	230e      	movs	r3, #14
    8164:	5ec9      	ldrsh	r1, [r1, r3]
    8166:	b090      	sub	sp, #64	; 0x40
    8168:	0014      	movs	r4, r2
    816a:	2900      	cmp	r1, #0
    816c:	da07      	bge.n	817e <__swhatbuf_r+0x22>
    816e:	2300      	movs	r3, #0
    8170:	602b      	str	r3, [r5, #0]
    8172:	89b3      	ldrh	r3, [r6, #12]
    8174:	061b      	lsls	r3, r3, #24
    8176:	d411      	bmi.n	819c <__swhatbuf_r+0x40>
    8178:	2380      	movs	r3, #128	; 0x80
    817a:	00db      	lsls	r3, r3, #3
    817c:	e00f      	b.n	819e <__swhatbuf_r+0x42>
    817e:	aa01      	add	r2, sp, #4
    8180:	f000 fd0c 	bl	8b9c <_fstat_r>
    8184:	2800      	cmp	r0, #0
    8186:	dbf2      	blt.n	816e <__swhatbuf_r+0x12>
    8188:	22f0      	movs	r2, #240	; 0xf0
    818a:	9b02      	ldr	r3, [sp, #8]
    818c:	0212      	lsls	r2, r2, #8
    818e:	4013      	ands	r3, r2
    8190:	4a05      	ldr	r2, [pc, #20]	; (81a8 <__swhatbuf_r+0x4c>)
    8192:	189b      	adds	r3, r3, r2
    8194:	425a      	negs	r2, r3
    8196:	4153      	adcs	r3, r2
    8198:	602b      	str	r3, [r5, #0]
    819a:	e7ed      	b.n	8178 <__swhatbuf_r+0x1c>
    819c:	2340      	movs	r3, #64	; 0x40
    819e:	2000      	movs	r0, #0
    81a0:	6023      	str	r3, [r4, #0]
    81a2:	b010      	add	sp, #64	; 0x40
    81a4:	bd70      	pop	{r4, r5, r6, pc}
    81a6:	46c0      	nop			; (mov r8, r8)
    81a8:	ffffe000 	.word	0xffffe000

000081ac <__smakebuf_r>:
    81ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    81ae:	2602      	movs	r6, #2
    81b0:	898b      	ldrh	r3, [r1, #12]
    81b2:	0005      	movs	r5, r0
    81b4:	000c      	movs	r4, r1
    81b6:	4233      	tst	r3, r6
    81b8:	d006      	beq.n	81c8 <__smakebuf_r+0x1c>
    81ba:	0023      	movs	r3, r4
    81bc:	3347      	adds	r3, #71	; 0x47
    81be:	6023      	str	r3, [r4, #0]
    81c0:	6123      	str	r3, [r4, #16]
    81c2:	2301      	movs	r3, #1
    81c4:	6163      	str	r3, [r4, #20]
    81c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    81c8:	ab01      	add	r3, sp, #4
    81ca:	466a      	mov	r2, sp
    81cc:	f7ff ffc6 	bl	815c <__swhatbuf_r>
    81d0:	9900      	ldr	r1, [sp, #0]
    81d2:	0007      	movs	r7, r0
    81d4:	0028      	movs	r0, r5
    81d6:	f7fd ffbf 	bl	6158 <_malloc_r>
    81da:	2800      	cmp	r0, #0
    81dc:	d108      	bne.n	81f0 <__smakebuf_r+0x44>
    81de:	220c      	movs	r2, #12
    81e0:	5ea3      	ldrsh	r3, [r4, r2]
    81e2:	059a      	lsls	r2, r3, #22
    81e4:	d4ef      	bmi.n	81c6 <__smakebuf_r+0x1a>
    81e6:	2203      	movs	r2, #3
    81e8:	4393      	bics	r3, r2
    81ea:	431e      	orrs	r6, r3
    81ec:	81a6      	strh	r6, [r4, #12]
    81ee:	e7e4      	b.n	81ba <__smakebuf_r+0xe>
    81f0:	4b0f      	ldr	r3, [pc, #60]	; (8230 <__smakebuf_r+0x84>)
    81f2:	62ab      	str	r3, [r5, #40]	; 0x28
    81f4:	2380      	movs	r3, #128	; 0x80
    81f6:	89a2      	ldrh	r2, [r4, #12]
    81f8:	6020      	str	r0, [r4, #0]
    81fa:	4313      	orrs	r3, r2
    81fc:	81a3      	strh	r3, [r4, #12]
    81fe:	9b00      	ldr	r3, [sp, #0]
    8200:	6120      	str	r0, [r4, #16]
    8202:	6163      	str	r3, [r4, #20]
    8204:	9b01      	ldr	r3, [sp, #4]
    8206:	2b00      	cmp	r3, #0
    8208:	d00d      	beq.n	8226 <__smakebuf_r+0x7a>
    820a:	230e      	movs	r3, #14
    820c:	5ee1      	ldrsh	r1, [r4, r3]
    820e:	0028      	movs	r0, r5
    8210:	f000 fcd6 	bl	8bc0 <_isatty_r>
    8214:	2800      	cmp	r0, #0
    8216:	d006      	beq.n	8226 <__smakebuf_r+0x7a>
    8218:	2203      	movs	r2, #3
    821a:	89a3      	ldrh	r3, [r4, #12]
    821c:	4393      	bics	r3, r2
    821e:	001a      	movs	r2, r3
    8220:	2301      	movs	r3, #1
    8222:	4313      	orrs	r3, r2
    8224:	81a3      	strh	r3, [r4, #12]
    8226:	89a0      	ldrh	r0, [r4, #12]
    8228:	4338      	orrs	r0, r7
    822a:	81a0      	strh	r0, [r4, #12]
    822c:	e7cb      	b.n	81c6 <__smakebuf_r+0x1a>
    822e:	46c0      	nop			; (mov r8, r8)
    8230:	00007f95 	.word	0x00007f95

00008234 <memchr>:
    8234:	b2c9      	uxtb	r1, r1
    8236:	1882      	adds	r2, r0, r2
    8238:	4290      	cmp	r0, r2
    823a:	d101      	bne.n	8240 <memchr+0xc>
    823c:	2000      	movs	r0, #0
    823e:	4770      	bx	lr
    8240:	7803      	ldrb	r3, [r0, #0]
    8242:	428b      	cmp	r3, r1
    8244:	d0fb      	beq.n	823e <memchr+0xa>
    8246:	3001      	adds	r0, #1
    8248:	e7f6      	b.n	8238 <memchr+0x4>

0000824a <__malloc_lock>:
    824a:	4770      	bx	lr

0000824c <__malloc_unlock>:
    824c:	4770      	bx	lr

0000824e <_Balloc>:
    824e:	b570      	push	{r4, r5, r6, lr}
    8250:	6a46      	ldr	r6, [r0, #36]	; 0x24
    8252:	0004      	movs	r4, r0
    8254:	000d      	movs	r5, r1
    8256:	2e00      	cmp	r6, #0
    8258:	d107      	bne.n	826a <_Balloc+0x1c>
    825a:	2010      	movs	r0, #16
    825c:	f7fd ff04 	bl	6068 <malloc>
    8260:	6260      	str	r0, [r4, #36]	; 0x24
    8262:	6046      	str	r6, [r0, #4]
    8264:	6086      	str	r6, [r0, #8]
    8266:	6006      	str	r6, [r0, #0]
    8268:	60c6      	str	r6, [r0, #12]
    826a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    826c:	68f3      	ldr	r3, [r6, #12]
    826e:	2b00      	cmp	r3, #0
    8270:	d013      	beq.n	829a <_Balloc+0x4c>
    8272:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8274:	00aa      	lsls	r2, r5, #2
    8276:	68db      	ldr	r3, [r3, #12]
    8278:	189b      	adds	r3, r3, r2
    827a:	6818      	ldr	r0, [r3, #0]
    827c:	2800      	cmp	r0, #0
    827e:	d118      	bne.n	82b2 <_Balloc+0x64>
    8280:	2101      	movs	r1, #1
    8282:	000e      	movs	r6, r1
    8284:	40ae      	lsls	r6, r5
    8286:	1d72      	adds	r2, r6, #5
    8288:	0092      	lsls	r2, r2, #2
    828a:	0020      	movs	r0, r4
    828c:	f000 fac2 	bl	8814 <_calloc_r>
    8290:	2800      	cmp	r0, #0
    8292:	d00c      	beq.n	82ae <_Balloc+0x60>
    8294:	6045      	str	r5, [r0, #4]
    8296:	6086      	str	r6, [r0, #8]
    8298:	e00d      	b.n	82b6 <_Balloc+0x68>
    829a:	2221      	movs	r2, #33	; 0x21
    829c:	2104      	movs	r1, #4
    829e:	0020      	movs	r0, r4
    82a0:	f000 fab8 	bl	8814 <_calloc_r>
    82a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    82a6:	60f0      	str	r0, [r6, #12]
    82a8:	68db      	ldr	r3, [r3, #12]
    82aa:	2b00      	cmp	r3, #0
    82ac:	d1e1      	bne.n	8272 <_Balloc+0x24>
    82ae:	2000      	movs	r0, #0
    82b0:	bd70      	pop	{r4, r5, r6, pc}
    82b2:	6802      	ldr	r2, [r0, #0]
    82b4:	601a      	str	r2, [r3, #0]
    82b6:	2300      	movs	r3, #0
    82b8:	6103      	str	r3, [r0, #16]
    82ba:	60c3      	str	r3, [r0, #12]
    82bc:	e7f8      	b.n	82b0 <_Balloc+0x62>

000082be <_Bfree>:
    82be:	b570      	push	{r4, r5, r6, lr}
    82c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    82c2:	0006      	movs	r6, r0
    82c4:	000d      	movs	r5, r1
    82c6:	2c00      	cmp	r4, #0
    82c8:	d107      	bne.n	82da <_Bfree+0x1c>
    82ca:	2010      	movs	r0, #16
    82cc:	f7fd fecc 	bl	6068 <malloc>
    82d0:	6270      	str	r0, [r6, #36]	; 0x24
    82d2:	6044      	str	r4, [r0, #4]
    82d4:	6084      	str	r4, [r0, #8]
    82d6:	6004      	str	r4, [r0, #0]
    82d8:	60c4      	str	r4, [r0, #12]
    82da:	2d00      	cmp	r5, #0
    82dc:	d007      	beq.n	82ee <_Bfree+0x30>
    82de:	6a73      	ldr	r3, [r6, #36]	; 0x24
    82e0:	686a      	ldr	r2, [r5, #4]
    82e2:	68db      	ldr	r3, [r3, #12]
    82e4:	0092      	lsls	r2, r2, #2
    82e6:	189b      	adds	r3, r3, r2
    82e8:	681a      	ldr	r2, [r3, #0]
    82ea:	602a      	str	r2, [r5, #0]
    82ec:	601d      	str	r5, [r3, #0]
    82ee:	bd70      	pop	{r4, r5, r6, pc}

000082f0 <__multadd>:
    82f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    82f2:	001e      	movs	r6, r3
    82f4:	2314      	movs	r3, #20
    82f6:	469c      	mov	ip, r3
    82f8:	0007      	movs	r7, r0
    82fa:	000c      	movs	r4, r1
    82fc:	2000      	movs	r0, #0
    82fe:	690d      	ldr	r5, [r1, #16]
    8300:	448c      	add	ip, r1
    8302:	4663      	mov	r3, ip
    8304:	8819      	ldrh	r1, [r3, #0]
    8306:	681b      	ldr	r3, [r3, #0]
    8308:	4351      	muls	r1, r2
    830a:	0c1b      	lsrs	r3, r3, #16
    830c:	4353      	muls	r3, r2
    830e:	1989      	adds	r1, r1, r6
    8310:	0c0e      	lsrs	r6, r1, #16
    8312:	199b      	adds	r3, r3, r6
    8314:	b289      	uxth	r1, r1
    8316:	0c1e      	lsrs	r6, r3, #16
    8318:	041b      	lsls	r3, r3, #16
    831a:	185b      	adds	r3, r3, r1
    831c:	4661      	mov	r1, ip
    831e:	3001      	adds	r0, #1
    8320:	c108      	stmia	r1!, {r3}
    8322:	468c      	mov	ip, r1
    8324:	4285      	cmp	r5, r0
    8326:	dcec      	bgt.n	8302 <__multadd+0x12>
    8328:	2e00      	cmp	r6, #0
    832a:	d01b      	beq.n	8364 <__multadd+0x74>
    832c:	68a3      	ldr	r3, [r4, #8]
    832e:	429d      	cmp	r5, r3
    8330:	db12      	blt.n	8358 <__multadd+0x68>
    8332:	6863      	ldr	r3, [r4, #4]
    8334:	0038      	movs	r0, r7
    8336:	1c59      	adds	r1, r3, #1
    8338:	f7ff ff89 	bl	824e <_Balloc>
    833c:	0021      	movs	r1, r4
    833e:	6923      	ldr	r3, [r4, #16]
    8340:	9001      	str	r0, [sp, #4]
    8342:	1c9a      	adds	r2, r3, #2
    8344:	0092      	lsls	r2, r2, #2
    8346:	310c      	adds	r1, #12
    8348:	300c      	adds	r0, #12
    834a:	f7fd fea9 	bl	60a0 <memcpy>
    834e:	0021      	movs	r1, r4
    8350:	0038      	movs	r0, r7
    8352:	f7ff ffb4 	bl	82be <_Bfree>
    8356:	9c01      	ldr	r4, [sp, #4]
    8358:	1d2b      	adds	r3, r5, #4
    835a:	009b      	lsls	r3, r3, #2
    835c:	18e3      	adds	r3, r4, r3
    835e:	3501      	adds	r5, #1
    8360:	605e      	str	r6, [r3, #4]
    8362:	6125      	str	r5, [r4, #16]
    8364:	0020      	movs	r0, r4
    8366:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00008368 <__hi0bits>:
    8368:	0003      	movs	r3, r0
    836a:	0c02      	lsrs	r2, r0, #16
    836c:	2000      	movs	r0, #0
    836e:	4282      	cmp	r2, r0
    8370:	d101      	bne.n	8376 <__hi0bits+0xe>
    8372:	041b      	lsls	r3, r3, #16
    8374:	3010      	adds	r0, #16
    8376:	0e1a      	lsrs	r2, r3, #24
    8378:	d101      	bne.n	837e <__hi0bits+0x16>
    837a:	3008      	adds	r0, #8
    837c:	021b      	lsls	r3, r3, #8
    837e:	0f1a      	lsrs	r2, r3, #28
    8380:	d101      	bne.n	8386 <__hi0bits+0x1e>
    8382:	3004      	adds	r0, #4
    8384:	011b      	lsls	r3, r3, #4
    8386:	0f9a      	lsrs	r2, r3, #30
    8388:	d101      	bne.n	838e <__hi0bits+0x26>
    838a:	3002      	adds	r0, #2
    838c:	009b      	lsls	r3, r3, #2
    838e:	2b00      	cmp	r3, #0
    8390:	db03      	blt.n	839a <__hi0bits+0x32>
    8392:	3001      	adds	r0, #1
    8394:	005b      	lsls	r3, r3, #1
    8396:	d400      	bmi.n	839a <__hi0bits+0x32>
    8398:	2020      	movs	r0, #32
    839a:	4770      	bx	lr

0000839c <__lo0bits>:
    839c:	2207      	movs	r2, #7
    839e:	6803      	ldr	r3, [r0, #0]
    83a0:	b510      	push	{r4, lr}
    83a2:	0001      	movs	r1, r0
    83a4:	401a      	ands	r2, r3
    83a6:	d00d      	beq.n	83c4 <__lo0bits+0x28>
    83a8:	2401      	movs	r4, #1
    83aa:	2000      	movs	r0, #0
    83ac:	4223      	tst	r3, r4
    83ae:	d105      	bne.n	83bc <__lo0bits+0x20>
    83b0:	3002      	adds	r0, #2
    83b2:	4203      	tst	r3, r0
    83b4:	d003      	beq.n	83be <__lo0bits+0x22>
    83b6:	40e3      	lsrs	r3, r4
    83b8:	0020      	movs	r0, r4
    83ba:	600b      	str	r3, [r1, #0]
    83bc:	bd10      	pop	{r4, pc}
    83be:	089b      	lsrs	r3, r3, #2
    83c0:	600b      	str	r3, [r1, #0]
    83c2:	e7fb      	b.n	83bc <__lo0bits+0x20>
    83c4:	b29c      	uxth	r4, r3
    83c6:	0010      	movs	r0, r2
    83c8:	2c00      	cmp	r4, #0
    83ca:	d101      	bne.n	83d0 <__lo0bits+0x34>
    83cc:	2010      	movs	r0, #16
    83ce:	0c1b      	lsrs	r3, r3, #16
    83d0:	b2da      	uxtb	r2, r3
    83d2:	2a00      	cmp	r2, #0
    83d4:	d101      	bne.n	83da <__lo0bits+0x3e>
    83d6:	3008      	adds	r0, #8
    83d8:	0a1b      	lsrs	r3, r3, #8
    83da:	071a      	lsls	r2, r3, #28
    83dc:	d101      	bne.n	83e2 <__lo0bits+0x46>
    83de:	3004      	adds	r0, #4
    83e0:	091b      	lsrs	r3, r3, #4
    83e2:	079a      	lsls	r2, r3, #30
    83e4:	d101      	bne.n	83ea <__lo0bits+0x4e>
    83e6:	3002      	adds	r0, #2
    83e8:	089b      	lsrs	r3, r3, #2
    83ea:	07da      	lsls	r2, r3, #31
    83ec:	d4e8      	bmi.n	83c0 <__lo0bits+0x24>
    83ee:	085b      	lsrs	r3, r3, #1
    83f0:	d001      	beq.n	83f6 <__lo0bits+0x5a>
    83f2:	3001      	adds	r0, #1
    83f4:	e7e4      	b.n	83c0 <__lo0bits+0x24>
    83f6:	2020      	movs	r0, #32
    83f8:	e7e0      	b.n	83bc <__lo0bits+0x20>

000083fa <__i2b>:
    83fa:	b510      	push	{r4, lr}
    83fc:	000c      	movs	r4, r1
    83fe:	2101      	movs	r1, #1
    8400:	f7ff ff25 	bl	824e <_Balloc>
    8404:	2301      	movs	r3, #1
    8406:	6144      	str	r4, [r0, #20]
    8408:	6103      	str	r3, [r0, #16]
    840a:	bd10      	pop	{r4, pc}

0000840c <__multiply>:
    840c:	b5f0      	push	{r4, r5, r6, r7, lr}
    840e:	690b      	ldr	r3, [r1, #16]
    8410:	0015      	movs	r5, r2
    8412:	6912      	ldr	r2, [r2, #16]
    8414:	b089      	sub	sp, #36	; 0x24
    8416:	000c      	movs	r4, r1
    8418:	4293      	cmp	r3, r2
    841a:	da01      	bge.n	8420 <__multiply+0x14>
    841c:	002c      	movs	r4, r5
    841e:	000d      	movs	r5, r1
    8420:	6927      	ldr	r7, [r4, #16]
    8422:	692e      	ldr	r6, [r5, #16]
    8424:	68a2      	ldr	r2, [r4, #8]
    8426:	19bb      	adds	r3, r7, r6
    8428:	6861      	ldr	r1, [r4, #4]
    842a:	9301      	str	r3, [sp, #4]
    842c:	4293      	cmp	r3, r2
    842e:	dd00      	ble.n	8432 <__multiply+0x26>
    8430:	3101      	adds	r1, #1
    8432:	f7ff ff0c 	bl	824e <_Balloc>
    8436:	0003      	movs	r3, r0
    8438:	3314      	adds	r3, #20
    843a:	9300      	str	r3, [sp, #0]
    843c:	9a00      	ldr	r2, [sp, #0]
    843e:	19bb      	adds	r3, r7, r6
    8440:	4694      	mov	ip, r2
    8442:	009b      	lsls	r3, r3, #2
    8444:	449c      	add	ip, r3
    8446:	0013      	movs	r3, r2
    8448:	2200      	movs	r2, #0
    844a:	9004      	str	r0, [sp, #16]
    844c:	4563      	cmp	r3, ip
    844e:	d31c      	bcc.n	848a <__multiply+0x7e>
    8450:	002a      	movs	r2, r5
    8452:	3414      	adds	r4, #20
    8454:	00bf      	lsls	r7, r7, #2
    8456:	19e3      	adds	r3, r4, r7
    8458:	3214      	adds	r2, #20
    845a:	00b6      	lsls	r6, r6, #2
    845c:	9305      	str	r3, [sp, #20]
    845e:	1993      	adds	r3, r2, r6
    8460:	9402      	str	r4, [sp, #8]
    8462:	9306      	str	r3, [sp, #24]
    8464:	9b06      	ldr	r3, [sp, #24]
    8466:	429a      	cmp	r2, r3
    8468:	d311      	bcc.n	848e <__multiply+0x82>
    846a:	9b01      	ldr	r3, [sp, #4]
    846c:	2b00      	cmp	r3, #0
    846e:	dd06      	ble.n	847e <__multiply+0x72>
    8470:	2304      	movs	r3, #4
    8472:	425b      	negs	r3, r3
    8474:	449c      	add	ip, r3
    8476:	4663      	mov	r3, ip
    8478:	681b      	ldr	r3, [r3, #0]
    847a:	2b00      	cmp	r3, #0
    847c:	d051      	beq.n	8522 <__multiply+0x116>
    847e:	9b04      	ldr	r3, [sp, #16]
    8480:	9a01      	ldr	r2, [sp, #4]
    8482:	0018      	movs	r0, r3
    8484:	611a      	str	r2, [r3, #16]
    8486:	b009      	add	sp, #36	; 0x24
    8488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    848a:	c304      	stmia	r3!, {r2}
    848c:	e7de      	b.n	844c <__multiply+0x40>
    848e:	8814      	ldrh	r4, [r2, #0]
    8490:	2c00      	cmp	r4, #0
    8492:	d01e      	beq.n	84d2 <__multiply+0xc6>
    8494:	2600      	movs	r6, #0
    8496:	9d00      	ldr	r5, [sp, #0]
    8498:	9f02      	ldr	r7, [sp, #8]
    849a:	cf01      	ldmia	r7!, {r0}
    849c:	9507      	str	r5, [sp, #28]
    849e:	cd08      	ldmia	r5!, {r3}
    84a0:	9303      	str	r3, [sp, #12]
    84a2:	b283      	uxth	r3, r0
    84a4:	4363      	muls	r3, r4
    84a6:	0019      	movs	r1, r3
    84a8:	466b      	mov	r3, sp
    84aa:	0c00      	lsrs	r0, r0, #16
    84ac:	899b      	ldrh	r3, [r3, #12]
    84ae:	4360      	muls	r0, r4
    84b0:	18cb      	adds	r3, r1, r3
    84b2:	9903      	ldr	r1, [sp, #12]
    84b4:	199b      	adds	r3, r3, r6
    84b6:	0c09      	lsrs	r1, r1, #16
    84b8:	1841      	adds	r1, r0, r1
    84ba:	0c18      	lsrs	r0, r3, #16
    84bc:	1809      	adds	r1, r1, r0
    84be:	0c0e      	lsrs	r6, r1, #16
    84c0:	b29b      	uxth	r3, r3
    84c2:	0409      	lsls	r1, r1, #16
    84c4:	430b      	orrs	r3, r1
    84c6:	9907      	ldr	r1, [sp, #28]
    84c8:	600b      	str	r3, [r1, #0]
    84ca:	9b05      	ldr	r3, [sp, #20]
    84cc:	42bb      	cmp	r3, r7
    84ce:	d8e4      	bhi.n	849a <__multiply+0x8e>
    84d0:	602e      	str	r6, [r5, #0]
    84d2:	6813      	ldr	r3, [r2, #0]
    84d4:	0c1b      	lsrs	r3, r3, #16
    84d6:	9303      	str	r3, [sp, #12]
    84d8:	d01e      	beq.n	8518 <__multiply+0x10c>
    84da:	2600      	movs	r6, #0
    84dc:	9b00      	ldr	r3, [sp, #0]
    84de:	9c02      	ldr	r4, [sp, #8]
    84e0:	681b      	ldr	r3, [r3, #0]
    84e2:	9800      	ldr	r0, [sp, #0]
    84e4:	0007      	movs	r7, r0
    84e6:	8821      	ldrh	r1, [r4, #0]
    84e8:	9d03      	ldr	r5, [sp, #12]
    84ea:	b29b      	uxth	r3, r3
    84ec:	4369      	muls	r1, r5
    84ee:	c820      	ldmia	r0!, {r5}
    84f0:	0c2d      	lsrs	r5, r5, #16
    84f2:	1949      	adds	r1, r1, r5
    84f4:	198e      	adds	r6, r1, r6
    84f6:	0431      	lsls	r1, r6, #16
    84f8:	430b      	orrs	r3, r1
    84fa:	603b      	str	r3, [r7, #0]
    84fc:	cc08      	ldmia	r4!, {r3}
    84fe:	9903      	ldr	r1, [sp, #12]
    8500:	0c1b      	lsrs	r3, r3, #16
    8502:	434b      	muls	r3, r1
    8504:	6879      	ldr	r1, [r7, #4]
    8506:	0c36      	lsrs	r6, r6, #16
    8508:	b289      	uxth	r1, r1
    850a:	185b      	adds	r3, r3, r1
    850c:	9905      	ldr	r1, [sp, #20]
    850e:	199b      	adds	r3, r3, r6
    8510:	0c1e      	lsrs	r6, r3, #16
    8512:	42a1      	cmp	r1, r4
    8514:	d8e6      	bhi.n	84e4 <__multiply+0xd8>
    8516:	6003      	str	r3, [r0, #0]
    8518:	9b00      	ldr	r3, [sp, #0]
    851a:	3204      	adds	r2, #4
    851c:	3304      	adds	r3, #4
    851e:	9300      	str	r3, [sp, #0]
    8520:	e7a0      	b.n	8464 <__multiply+0x58>
    8522:	9b01      	ldr	r3, [sp, #4]
    8524:	3b01      	subs	r3, #1
    8526:	9301      	str	r3, [sp, #4]
    8528:	e79f      	b.n	846a <__multiply+0x5e>
	...

0000852c <__pow5mult>:
    852c:	2303      	movs	r3, #3
    852e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8530:	4013      	ands	r3, r2
    8532:	0005      	movs	r5, r0
    8534:	000e      	movs	r6, r1
    8536:	0014      	movs	r4, r2
    8538:	2b00      	cmp	r3, #0
    853a:	d008      	beq.n	854e <__pow5mult+0x22>
    853c:	4922      	ldr	r1, [pc, #136]	; (85c8 <__pow5mult+0x9c>)
    853e:	3b01      	subs	r3, #1
    8540:	009a      	lsls	r2, r3, #2
    8542:	5852      	ldr	r2, [r2, r1]
    8544:	2300      	movs	r3, #0
    8546:	0031      	movs	r1, r6
    8548:	f7ff fed2 	bl	82f0 <__multadd>
    854c:	0006      	movs	r6, r0
    854e:	10a3      	asrs	r3, r4, #2
    8550:	9301      	str	r3, [sp, #4]
    8552:	d036      	beq.n	85c2 <__pow5mult+0x96>
    8554:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    8556:	2c00      	cmp	r4, #0
    8558:	d107      	bne.n	856a <__pow5mult+0x3e>
    855a:	2010      	movs	r0, #16
    855c:	f7fd fd84 	bl	6068 <malloc>
    8560:	6268      	str	r0, [r5, #36]	; 0x24
    8562:	6044      	str	r4, [r0, #4]
    8564:	6084      	str	r4, [r0, #8]
    8566:	6004      	str	r4, [r0, #0]
    8568:	60c4      	str	r4, [r0, #12]
    856a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    856c:	68bc      	ldr	r4, [r7, #8]
    856e:	2c00      	cmp	r4, #0
    8570:	d107      	bne.n	8582 <__pow5mult+0x56>
    8572:	4916      	ldr	r1, [pc, #88]	; (85cc <__pow5mult+0xa0>)
    8574:	0028      	movs	r0, r5
    8576:	f7ff ff40 	bl	83fa <__i2b>
    857a:	2300      	movs	r3, #0
    857c:	0004      	movs	r4, r0
    857e:	60b8      	str	r0, [r7, #8]
    8580:	6003      	str	r3, [r0, #0]
    8582:	2201      	movs	r2, #1
    8584:	9b01      	ldr	r3, [sp, #4]
    8586:	4213      	tst	r3, r2
    8588:	d00a      	beq.n	85a0 <__pow5mult+0x74>
    858a:	0031      	movs	r1, r6
    858c:	0022      	movs	r2, r4
    858e:	0028      	movs	r0, r5
    8590:	f7ff ff3c 	bl	840c <__multiply>
    8594:	0007      	movs	r7, r0
    8596:	0031      	movs	r1, r6
    8598:	0028      	movs	r0, r5
    859a:	f7ff fe90 	bl	82be <_Bfree>
    859e:	003e      	movs	r6, r7
    85a0:	9b01      	ldr	r3, [sp, #4]
    85a2:	105b      	asrs	r3, r3, #1
    85a4:	9301      	str	r3, [sp, #4]
    85a6:	d00c      	beq.n	85c2 <__pow5mult+0x96>
    85a8:	6820      	ldr	r0, [r4, #0]
    85aa:	2800      	cmp	r0, #0
    85ac:	d107      	bne.n	85be <__pow5mult+0x92>
    85ae:	0022      	movs	r2, r4
    85b0:	0021      	movs	r1, r4
    85b2:	0028      	movs	r0, r5
    85b4:	f7ff ff2a 	bl	840c <__multiply>
    85b8:	2300      	movs	r3, #0
    85ba:	6020      	str	r0, [r4, #0]
    85bc:	6003      	str	r3, [r0, #0]
    85be:	0004      	movs	r4, r0
    85c0:	e7df      	b.n	8582 <__pow5mult+0x56>
    85c2:	0030      	movs	r0, r6
    85c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    85c6:	46c0      	nop			; (mov r8, r8)
    85c8:	0000b778 	.word	0x0000b778
    85cc:	00000271 	.word	0x00000271

000085d0 <__lshift>:
    85d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    85d2:	000d      	movs	r5, r1
    85d4:	0017      	movs	r7, r2
    85d6:	692b      	ldr	r3, [r5, #16]
    85d8:	1154      	asrs	r4, r2, #5
    85da:	b085      	sub	sp, #20
    85dc:	18e3      	adds	r3, r4, r3
    85de:	9302      	str	r3, [sp, #8]
    85e0:	3301      	adds	r3, #1
    85e2:	9301      	str	r3, [sp, #4]
    85e4:	6849      	ldr	r1, [r1, #4]
    85e6:	68ab      	ldr	r3, [r5, #8]
    85e8:	9003      	str	r0, [sp, #12]
    85ea:	9a01      	ldr	r2, [sp, #4]
    85ec:	4293      	cmp	r3, r2
    85ee:	db34      	blt.n	865a <__lshift+0x8a>
    85f0:	9803      	ldr	r0, [sp, #12]
    85f2:	f7ff fe2c 	bl	824e <_Balloc>
    85f6:	2300      	movs	r3, #0
    85f8:	0002      	movs	r2, r0
    85fa:	0006      	movs	r6, r0
    85fc:	0019      	movs	r1, r3
    85fe:	3214      	adds	r2, #20
    8600:	42a3      	cmp	r3, r4
    8602:	db2d      	blt.n	8660 <__lshift+0x90>
    8604:	43e3      	mvns	r3, r4
    8606:	17db      	asrs	r3, r3, #31
    8608:	401c      	ands	r4, r3
    860a:	002b      	movs	r3, r5
    860c:	211f      	movs	r1, #31
    860e:	00a4      	lsls	r4, r4, #2
    8610:	1914      	adds	r4, r2, r4
    8612:	692a      	ldr	r2, [r5, #16]
    8614:	3314      	adds	r3, #20
    8616:	0092      	lsls	r2, r2, #2
    8618:	189a      	adds	r2, r3, r2
    861a:	400f      	ands	r7, r1
    861c:	d024      	beq.n	8668 <__lshift+0x98>
    861e:	3101      	adds	r1, #1
    8620:	1bc9      	subs	r1, r1, r7
    8622:	468c      	mov	ip, r1
    8624:	2100      	movs	r1, #0
    8626:	6818      	ldr	r0, [r3, #0]
    8628:	40b8      	lsls	r0, r7
    862a:	4301      	orrs	r1, r0
    862c:	4660      	mov	r0, ip
    862e:	6021      	str	r1, [r4, #0]
    8630:	cb02      	ldmia	r3!, {r1}
    8632:	3404      	adds	r4, #4
    8634:	40c1      	lsrs	r1, r0
    8636:	429a      	cmp	r2, r3
    8638:	d8f5      	bhi.n	8626 <__lshift+0x56>
    863a:	6021      	str	r1, [r4, #0]
    863c:	2900      	cmp	r1, #0
    863e:	d002      	beq.n	8646 <__lshift+0x76>
    8640:	9b02      	ldr	r3, [sp, #8]
    8642:	3302      	adds	r3, #2
    8644:	9301      	str	r3, [sp, #4]
    8646:	9b01      	ldr	r3, [sp, #4]
    8648:	9803      	ldr	r0, [sp, #12]
    864a:	3b01      	subs	r3, #1
    864c:	6133      	str	r3, [r6, #16]
    864e:	0029      	movs	r1, r5
    8650:	f7ff fe35 	bl	82be <_Bfree>
    8654:	0030      	movs	r0, r6
    8656:	b005      	add	sp, #20
    8658:	bdf0      	pop	{r4, r5, r6, r7, pc}
    865a:	3101      	adds	r1, #1
    865c:	005b      	lsls	r3, r3, #1
    865e:	e7c4      	b.n	85ea <__lshift+0x1a>
    8660:	0098      	lsls	r0, r3, #2
    8662:	5011      	str	r1, [r2, r0]
    8664:	3301      	adds	r3, #1
    8666:	e7cb      	b.n	8600 <__lshift+0x30>
    8668:	cb02      	ldmia	r3!, {r1}
    866a:	c402      	stmia	r4!, {r1}
    866c:	429a      	cmp	r2, r3
    866e:	d8fb      	bhi.n	8668 <__lshift+0x98>
    8670:	e7e9      	b.n	8646 <__lshift+0x76>

00008672 <__mcmp>:
    8672:	690a      	ldr	r2, [r1, #16]
    8674:	6903      	ldr	r3, [r0, #16]
    8676:	b530      	push	{r4, r5, lr}
    8678:	1a9b      	subs	r3, r3, r2
    867a:	d10e      	bne.n	869a <__mcmp+0x28>
    867c:	0092      	lsls	r2, r2, #2
    867e:	3014      	adds	r0, #20
    8680:	3114      	adds	r1, #20
    8682:	1884      	adds	r4, r0, r2
    8684:	1889      	adds	r1, r1, r2
    8686:	3c04      	subs	r4, #4
    8688:	3904      	subs	r1, #4
    868a:	6822      	ldr	r2, [r4, #0]
    868c:	680d      	ldr	r5, [r1, #0]
    868e:	42aa      	cmp	r2, r5
    8690:	d005      	beq.n	869e <__mcmp+0x2c>
    8692:	42aa      	cmp	r2, r5
    8694:	4192      	sbcs	r2, r2
    8696:	2301      	movs	r3, #1
    8698:	4313      	orrs	r3, r2
    869a:	0018      	movs	r0, r3
    869c:	bd30      	pop	{r4, r5, pc}
    869e:	42a0      	cmp	r0, r4
    86a0:	d3f1      	bcc.n	8686 <__mcmp+0x14>
    86a2:	e7fa      	b.n	869a <__mcmp+0x28>

000086a4 <__mdiff>:
    86a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    86a6:	000d      	movs	r5, r1
    86a8:	b085      	sub	sp, #20
    86aa:	0007      	movs	r7, r0
    86ac:	0011      	movs	r1, r2
    86ae:	0028      	movs	r0, r5
    86b0:	0014      	movs	r4, r2
    86b2:	f7ff ffde 	bl	8672 <__mcmp>
    86b6:	1e06      	subs	r6, r0, #0
    86b8:	d108      	bne.n	86cc <__mdiff+0x28>
    86ba:	0001      	movs	r1, r0
    86bc:	0038      	movs	r0, r7
    86be:	f7ff fdc6 	bl	824e <_Balloc>
    86c2:	2301      	movs	r3, #1
    86c4:	6146      	str	r6, [r0, #20]
    86c6:	6103      	str	r3, [r0, #16]
    86c8:	b005      	add	sp, #20
    86ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86cc:	2301      	movs	r3, #1
    86ce:	9301      	str	r3, [sp, #4]
    86d0:	2800      	cmp	r0, #0
    86d2:	db04      	blt.n	86de <__mdiff+0x3a>
    86d4:	0023      	movs	r3, r4
    86d6:	002c      	movs	r4, r5
    86d8:	001d      	movs	r5, r3
    86da:	2300      	movs	r3, #0
    86dc:	9301      	str	r3, [sp, #4]
    86de:	6861      	ldr	r1, [r4, #4]
    86e0:	0038      	movs	r0, r7
    86e2:	f7ff fdb4 	bl	824e <_Balloc>
    86e6:	002f      	movs	r7, r5
    86e8:	2200      	movs	r2, #0
    86ea:	9b01      	ldr	r3, [sp, #4]
    86ec:	6926      	ldr	r6, [r4, #16]
    86ee:	60c3      	str	r3, [r0, #12]
    86f0:	3414      	adds	r4, #20
    86f2:	00b3      	lsls	r3, r6, #2
    86f4:	18e3      	adds	r3, r4, r3
    86f6:	9302      	str	r3, [sp, #8]
    86f8:	692b      	ldr	r3, [r5, #16]
    86fa:	3714      	adds	r7, #20
    86fc:	009b      	lsls	r3, r3, #2
    86fe:	18fb      	adds	r3, r7, r3
    8700:	9303      	str	r3, [sp, #12]
    8702:	0003      	movs	r3, r0
    8704:	4694      	mov	ip, r2
    8706:	3314      	adds	r3, #20
    8708:	cc20      	ldmia	r4!, {r5}
    870a:	cf04      	ldmia	r7!, {r2}
    870c:	9201      	str	r2, [sp, #4]
    870e:	b2aa      	uxth	r2, r5
    8710:	4494      	add	ip, r2
    8712:	466a      	mov	r2, sp
    8714:	4661      	mov	r1, ip
    8716:	8892      	ldrh	r2, [r2, #4]
    8718:	0c2d      	lsrs	r5, r5, #16
    871a:	1a8a      	subs	r2, r1, r2
    871c:	9901      	ldr	r1, [sp, #4]
    871e:	0c09      	lsrs	r1, r1, #16
    8720:	1a69      	subs	r1, r5, r1
    8722:	1415      	asrs	r5, r2, #16
    8724:	1949      	adds	r1, r1, r5
    8726:	140d      	asrs	r5, r1, #16
    8728:	b292      	uxth	r2, r2
    872a:	0409      	lsls	r1, r1, #16
    872c:	430a      	orrs	r2, r1
    872e:	601a      	str	r2, [r3, #0]
    8730:	9a03      	ldr	r2, [sp, #12]
    8732:	46ac      	mov	ip, r5
    8734:	3304      	adds	r3, #4
    8736:	42ba      	cmp	r2, r7
    8738:	d8e6      	bhi.n	8708 <__mdiff+0x64>
    873a:	9902      	ldr	r1, [sp, #8]
    873c:	001a      	movs	r2, r3
    873e:	428c      	cmp	r4, r1
    8740:	d305      	bcc.n	874e <__mdiff+0xaa>
    8742:	3a04      	subs	r2, #4
    8744:	6813      	ldr	r3, [r2, #0]
    8746:	2b00      	cmp	r3, #0
    8748:	d00e      	beq.n	8768 <__mdiff+0xc4>
    874a:	6106      	str	r6, [r0, #16]
    874c:	e7bc      	b.n	86c8 <__mdiff+0x24>
    874e:	cc04      	ldmia	r4!, {r2}
    8750:	b291      	uxth	r1, r2
    8752:	4461      	add	r1, ip
    8754:	140d      	asrs	r5, r1, #16
    8756:	0c12      	lsrs	r2, r2, #16
    8758:	1952      	adds	r2, r2, r5
    875a:	1415      	asrs	r5, r2, #16
    875c:	b289      	uxth	r1, r1
    875e:	0412      	lsls	r2, r2, #16
    8760:	430a      	orrs	r2, r1
    8762:	46ac      	mov	ip, r5
    8764:	c304      	stmia	r3!, {r2}
    8766:	e7e8      	b.n	873a <__mdiff+0x96>
    8768:	3e01      	subs	r6, #1
    876a:	e7ea      	b.n	8742 <__mdiff+0x9e>

0000876c <__d2b>:
    876c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    876e:	001d      	movs	r5, r3
    8770:	2101      	movs	r1, #1
    8772:	9f08      	ldr	r7, [sp, #32]
    8774:	0014      	movs	r4, r2
    8776:	f7ff fd6a 	bl	824e <_Balloc>
    877a:	032b      	lsls	r3, r5, #12
    877c:	006d      	lsls	r5, r5, #1
    877e:	0006      	movs	r6, r0
    8780:	0b1b      	lsrs	r3, r3, #12
    8782:	0d6d      	lsrs	r5, r5, #21
    8784:	d124      	bne.n	87d0 <__d2b+0x64>
    8786:	9301      	str	r3, [sp, #4]
    8788:	2c00      	cmp	r4, #0
    878a:	d027      	beq.n	87dc <__d2b+0x70>
    878c:	4668      	mov	r0, sp
    878e:	9400      	str	r4, [sp, #0]
    8790:	f7ff fe04 	bl	839c <__lo0bits>
    8794:	9c00      	ldr	r4, [sp, #0]
    8796:	2800      	cmp	r0, #0
    8798:	d01e      	beq.n	87d8 <__d2b+0x6c>
    879a:	9b01      	ldr	r3, [sp, #4]
    879c:	2120      	movs	r1, #32
    879e:	001a      	movs	r2, r3
    87a0:	1a09      	subs	r1, r1, r0
    87a2:	408a      	lsls	r2, r1
    87a4:	40c3      	lsrs	r3, r0
    87a6:	4322      	orrs	r2, r4
    87a8:	6172      	str	r2, [r6, #20]
    87aa:	9301      	str	r3, [sp, #4]
    87ac:	9c01      	ldr	r4, [sp, #4]
    87ae:	61b4      	str	r4, [r6, #24]
    87b0:	1e63      	subs	r3, r4, #1
    87b2:	419c      	sbcs	r4, r3
    87b4:	3401      	adds	r4, #1
    87b6:	6134      	str	r4, [r6, #16]
    87b8:	2d00      	cmp	r5, #0
    87ba:	d018      	beq.n	87ee <__d2b+0x82>
    87bc:	4b12      	ldr	r3, [pc, #72]	; (8808 <__d2b+0x9c>)
    87be:	18ed      	adds	r5, r5, r3
    87c0:	2335      	movs	r3, #53	; 0x35
    87c2:	182d      	adds	r5, r5, r0
    87c4:	603d      	str	r5, [r7, #0]
    87c6:	1a18      	subs	r0, r3, r0
    87c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    87ca:	6018      	str	r0, [r3, #0]
    87cc:	0030      	movs	r0, r6
    87ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    87d0:	2280      	movs	r2, #128	; 0x80
    87d2:	0352      	lsls	r2, r2, #13
    87d4:	4313      	orrs	r3, r2
    87d6:	e7d6      	b.n	8786 <__d2b+0x1a>
    87d8:	6174      	str	r4, [r6, #20]
    87da:	e7e7      	b.n	87ac <__d2b+0x40>
    87dc:	a801      	add	r0, sp, #4
    87de:	f7ff fddd 	bl	839c <__lo0bits>
    87e2:	2401      	movs	r4, #1
    87e4:	9b01      	ldr	r3, [sp, #4]
    87e6:	6134      	str	r4, [r6, #16]
    87e8:	6173      	str	r3, [r6, #20]
    87ea:	3020      	adds	r0, #32
    87ec:	e7e4      	b.n	87b8 <__d2b+0x4c>
    87ee:	4b07      	ldr	r3, [pc, #28]	; (880c <__d2b+0xa0>)
    87f0:	18c0      	adds	r0, r0, r3
    87f2:	4b07      	ldr	r3, [pc, #28]	; (8810 <__d2b+0xa4>)
    87f4:	6038      	str	r0, [r7, #0]
    87f6:	18e3      	adds	r3, r4, r3
    87f8:	009b      	lsls	r3, r3, #2
    87fa:	18f3      	adds	r3, r6, r3
    87fc:	6958      	ldr	r0, [r3, #20]
    87fe:	f7ff fdb3 	bl	8368 <__hi0bits>
    8802:	0164      	lsls	r4, r4, #5
    8804:	1a20      	subs	r0, r4, r0
    8806:	e7df      	b.n	87c8 <__d2b+0x5c>
    8808:	fffffbcd 	.word	0xfffffbcd
    880c:	fffffbce 	.word	0xfffffbce
    8810:	3fffffff 	.word	0x3fffffff

00008814 <_calloc_r>:
    8814:	434a      	muls	r2, r1
    8816:	b570      	push	{r4, r5, r6, lr}
    8818:	0011      	movs	r1, r2
    881a:	0014      	movs	r4, r2
    881c:	f7fd fc9c 	bl	6158 <_malloc_r>
    8820:	1e05      	subs	r5, r0, #0
    8822:	d003      	beq.n	882c <_calloc_r+0x18>
    8824:	0022      	movs	r2, r4
    8826:	2100      	movs	r1, #0
    8828:	f7fd fc43 	bl	60b2 <memset>
    882c:	0028      	movs	r0, r5
    882e:	bd70      	pop	{r4, r5, r6, pc}

00008830 <__sfputc_r>:
    8830:	6893      	ldr	r3, [r2, #8]
    8832:	b510      	push	{r4, lr}
    8834:	3b01      	subs	r3, #1
    8836:	6093      	str	r3, [r2, #8]
    8838:	2b00      	cmp	r3, #0
    883a:	da05      	bge.n	8848 <__sfputc_r+0x18>
    883c:	6994      	ldr	r4, [r2, #24]
    883e:	42a3      	cmp	r3, r4
    8840:	db08      	blt.n	8854 <__sfputc_r+0x24>
    8842:	b2cb      	uxtb	r3, r1
    8844:	2b0a      	cmp	r3, #10
    8846:	d005      	beq.n	8854 <__sfputc_r+0x24>
    8848:	6813      	ldr	r3, [r2, #0]
    884a:	1c58      	adds	r0, r3, #1
    884c:	6010      	str	r0, [r2, #0]
    884e:	7019      	strb	r1, [r3, #0]
    8850:	b2c8      	uxtb	r0, r1
    8852:	bd10      	pop	{r4, pc}
    8854:	f7fe fba4 	bl	6fa0 <__swbuf_r>
    8858:	e7fb      	b.n	8852 <__sfputc_r+0x22>

0000885a <__sfputs_r>:
    885a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    885c:	0006      	movs	r6, r0
    885e:	000f      	movs	r7, r1
    8860:	0014      	movs	r4, r2
    8862:	18d5      	adds	r5, r2, r3
    8864:	42ac      	cmp	r4, r5
    8866:	d101      	bne.n	886c <__sfputs_r+0x12>
    8868:	2000      	movs	r0, #0
    886a:	e007      	b.n	887c <__sfputs_r+0x22>
    886c:	7821      	ldrb	r1, [r4, #0]
    886e:	003a      	movs	r2, r7
    8870:	0030      	movs	r0, r6
    8872:	f7ff ffdd 	bl	8830 <__sfputc_r>
    8876:	3401      	adds	r4, #1
    8878:	1c43      	adds	r3, r0, #1
    887a:	d1f3      	bne.n	8864 <__sfputs_r+0xa>
    887c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008880 <_vfiprintf_r>:
    8880:	b5f0      	push	{r4, r5, r6, r7, lr}
    8882:	b09f      	sub	sp, #124	; 0x7c
    8884:	0006      	movs	r6, r0
    8886:	000f      	movs	r7, r1
    8888:	0014      	movs	r4, r2
    888a:	9305      	str	r3, [sp, #20]
    888c:	2800      	cmp	r0, #0
    888e:	d004      	beq.n	889a <_vfiprintf_r+0x1a>
    8890:	6983      	ldr	r3, [r0, #24]
    8892:	2b00      	cmp	r3, #0
    8894:	d101      	bne.n	889a <_vfiprintf_r+0x1a>
    8896:	f7ff fbbf 	bl	8018 <__sinit>
    889a:	4b7f      	ldr	r3, [pc, #508]	; (8a98 <_vfiprintf_r+0x218>)
    889c:	429f      	cmp	r7, r3
    889e:	d15c      	bne.n	895a <_vfiprintf_r+0xda>
    88a0:	6877      	ldr	r7, [r6, #4]
    88a2:	89bb      	ldrh	r3, [r7, #12]
    88a4:	071b      	lsls	r3, r3, #28
    88a6:	d562      	bpl.n	896e <_vfiprintf_r+0xee>
    88a8:	693b      	ldr	r3, [r7, #16]
    88aa:	2b00      	cmp	r3, #0
    88ac:	d05f      	beq.n	896e <_vfiprintf_r+0xee>
    88ae:	2300      	movs	r3, #0
    88b0:	ad06      	add	r5, sp, #24
    88b2:	616b      	str	r3, [r5, #20]
    88b4:	3320      	adds	r3, #32
    88b6:	766b      	strb	r3, [r5, #25]
    88b8:	3310      	adds	r3, #16
    88ba:	76ab      	strb	r3, [r5, #26]
    88bc:	9402      	str	r4, [sp, #8]
    88be:	9c02      	ldr	r4, [sp, #8]
    88c0:	7823      	ldrb	r3, [r4, #0]
    88c2:	2b00      	cmp	r3, #0
    88c4:	d15d      	bne.n	8982 <_vfiprintf_r+0x102>
    88c6:	9b02      	ldr	r3, [sp, #8]
    88c8:	1ae3      	subs	r3, r4, r3
    88ca:	9304      	str	r3, [sp, #16]
    88cc:	d00d      	beq.n	88ea <_vfiprintf_r+0x6a>
    88ce:	9b04      	ldr	r3, [sp, #16]
    88d0:	9a02      	ldr	r2, [sp, #8]
    88d2:	0039      	movs	r1, r7
    88d4:	0030      	movs	r0, r6
    88d6:	f7ff ffc0 	bl	885a <__sfputs_r>
    88da:	1c43      	adds	r3, r0, #1
    88dc:	d100      	bne.n	88e0 <_vfiprintf_r+0x60>
    88de:	e0cc      	b.n	8a7a <_vfiprintf_r+0x1fa>
    88e0:	696a      	ldr	r2, [r5, #20]
    88e2:	9b04      	ldr	r3, [sp, #16]
    88e4:	4694      	mov	ip, r2
    88e6:	4463      	add	r3, ip
    88e8:	616b      	str	r3, [r5, #20]
    88ea:	7823      	ldrb	r3, [r4, #0]
    88ec:	2b00      	cmp	r3, #0
    88ee:	d100      	bne.n	88f2 <_vfiprintf_r+0x72>
    88f0:	e0c3      	b.n	8a7a <_vfiprintf_r+0x1fa>
    88f2:	2201      	movs	r2, #1
    88f4:	2300      	movs	r3, #0
    88f6:	4252      	negs	r2, r2
    88f8:	606a      	str	r2, [r5, #4]
    88fa:	a902      	add	r1, sp, #8
    88fc:	3254      	adds	r2, #84	; 0x54
    88fe:	1852      	adds	r2, r2, r1
    8900:	3401      	adds	r4, #1
    8902:	602b      	str	r3, [r5, #0]
    8904:	60eb      	str	r3, [r5, #12]
    8906:	60ab      	str	r3, [r5, #8]
    8908:	7013      	strb	r3, [r2, #0]
    890a:	65ab      	str	r3, [r5, #88]	; 0x58
    890c:	7821      	ldrb	r1, [r4, #0]
    890e:	2205      	movs	r2, #5
    8910:	4862      	ldr	r0, [pc, #392]	; (8a9c <_vfiprintf_r+0x21c>)
    8912:	f7ff fc8f 	bl	8234 <memchr>
    8916:	1c63      	adds	r3, r4, #1
    8918:	469c      	mov	ip, r3
    891a:	2800      	cmp	r0, #0
    891c:	d135      	bne.n	898a <_vfiprintf_r+0x10a>
    891e:	6829      	ldr	r1, [r5, #0]
    8920:	06cb      	lsls	r3, r1, #27
    8922:	d504      	bpl.n	892e <_vfiprintf_r+0xae>
    8924:	2353      	movs	r3, #83	; 0x53
    8926:	aa02      	add	r2, sp, #8
    8928:	3020      	adds	r0, #32
    892a:	189b      	adds	r3, r3, r2
    892c:	7018      	strb	r0, [r3, #0]
    892e:	070b      	lsls	r3, r1, #28
    8930:	d504      	bpl.n	893c <_vfiprintf_r+0xbc>
    8932:	2353      	movs	r3, #83	; 0x53
    8934:	202b      	movs	r0, #43	; 0x2b
    8936:	aa02      	add	r2, sp, #8
    8938:	189b      	adds	r3, r3, r2
    893a:	7018      	strb	r0, [r3, #0]
    893c:	7823      	ldrb	r3, [r4, #0]
    893e:	2b2a      	cmp	r3, #42	; 0x2a
    8940:	d02c      	beq.n	899c <_vfiprintf_r+0x11c>
    8942:	2000      	movs	r0, #0
    8944:	210a      	movs	r1, #10
    8946:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8948:	7822      	ldrb	r2, [r4, #0]
    894a:	3a30      	subs	r2, #48	; 0x30
    894c:	2a09      	cmp	r2, #9
    894e:	d800      	bhi.n	8952 <_vfiprintf_r+0xd2>
    8950:	e06b      	b.n	8a2a <_vfiprintf_r+0x1aa>
    8952:	2800      	cmp	r0, #0
    8954:	d02a      	beq.n	89ac <_vfiprintf_r+0x12c>
    8956:	9309      	str	r3, [sp, #36]	; 0x24
    8958:	e028      	b.n	89ac <_vfiprintf_r+0x12c>
    895a:	4b51      	ldr	r3, [pc, #324]	; (8aa0 <_vfiprintf_r+0x220>)
    895c:	429f      	cmp	r7, r3
    895e:	d101      	bne.n	8964 <_vfiprintf_r+0xe4>
    8960:	68b7      	ldr	r7, [r6, #8]
    8962:	e79e      	b.n	88a2 <_vfiprintf_r+0x22>
    8964:	4b4f      	ldr	r3, [pc, #316]	; (8aa4 <_vfiprintf_r+0x224>)
    8966:	429f      	cmp	r7, r3
    8968:	d19b      	bne.n	88a2 <_vfiprintf_r+0x22>
    896a:	68f7      	ldr	r7, [r6, #12]
    896c:	e799      	b.n	88a2 <_vfiprintf_r+0x22>
    896e:	0039      	movs	r1, r7
    8970:	0030      	movs	r0, r6
    8972:	f7fe fb77 	bl	7064 <__swsetup_r>
    8976:	2800      	cmp	r0, #0
    8978:	d099      	beq.n	88ae <_vfiprintf_r+0x2e>
    897a:	2001      	movs	r0, #1
    897c:	4240      	negs	r0, r0
    897e:	b01f      	add	sp, #124	; 0x7c
    8980:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8982:	2b25      	cmp	r3, #37	; 0x25
    8984:	d09f      	beq.n	88c6 <_vfiprintf_r+0x46>
    8986:	3401      	adds	r4, #1
    8988:	e79a      	b.n	88c0 <_vfiprintf_r+0x40>
    898a:	4b44      	ldr	r3, [pc, #272]	; (8a9c <_vfiprintf_r+0x21c>)
    898c:	6829      	ldr	r1, [r5, #0]
    898e:	1ac0      	subs	r0, r0, r3
    8990:	2301      	movs	r3, #1
    8992:	4083      	lsls	r3, r0
    8994:	430b      	orrs	r3, r1
    8996:	602b      	str	r3, [r5, #0]
    8998:	4664      	mov	r4, ip
    899a:	e7b7      	b.n	890c <_vfiprintf_r+0x8c>
    899c:	9b05      	ldr	r3, [sp, #20]
    899e:	1d18      	adds	r0, r3, #4
    89a0:	681b      	ldr	r3, [r3, #0]
    89a2:	9005      	str	r0, [sp, #20]
    89a4:	2b00      	cmp	r3, #0
    89a6:	db3a      	blt.n	8a1e <_vfiprintf_r+0x19e>
    89a8:	9309      	str	r3, [sp, #36]	; 0x24
    89aa:	4664      	mov	r4, ip
    89ac:	7823      	ldrb	r3, [r4, #0]
    89ae:	2b2e      	cmp	r3, #46	; 0x2e
    89b0:	d10b      	bne.n	89ca <_vfiprintf_r+0x14a>
    89b2:	7863      	ldrb	r3, [r4, #1]
    89b4:	1c62      	adds	r2, r4, #1
    89b6:	2b2a      	cmp	r3, #42	; 0x2a
    89b8:	d13f      	bne.n	8a3a <_vfiprintf_r+0x1ba>
    89ba:	9b05      	ldr	r3, [sp, #20]
    89bc:	3402      	adds	r4, #2
    89be:	1d1a      	adds	r2, r3, #4
    89c0:	681b      	ldr	r3, [r3, #0]
    89c2:	9205      	str	r2, [sp, #20]
    89c4:	2b00      	cmp	r3, #0
    89c6:	db35      	blt.n	8a34 <_vfiprintf_r+0x1b4>
    89c8:	9307      	str	r3, [sp, #28]
    89ca:	7821      	ldrb	r1, [r4, #0]
    89cc:	2203      	movs	r2, #3
    89ce:	4836      	ldr	r0, [pc, #216]	; (8aa8 <_vfiprintf_r+0x228>)
    89d0:	f7ff fc30 	bl	8234 <memchr>
    89d4:	2800      	cmp	r0, #0
    89d6:	d007      	beq.n	89e8 <_vfiprintf_r+0x168>
    89d8:	4b33      	ldr	r3, [pc, #204]	; (8aa8 <_vfiprintf_r+0x228>)
    89da:	682a      	ldr	r2, [r5, #0]
    89dc:	1ac0      	subs	r0, r0, r3
    89de:	2340      	movs	r3, #64	; 0x40
    89e0:	4083      	lsls	r3, r0
    89e2:	4313      	orrs	r3, r2
    89e4:	602b      	str	r3, [r5, #0]
    89e6:	3401      	adds	r4, #1
    89e8:	7821      	ldrb	r1, [r4, #0]
    89ea:	1c63      	adds	r3, r4, #1
    89ec:	2206      	movs	r2, #6
    89ee:	482f      	ldr	r0, [pc, #188]	; (8aac <_vfiprintf_r+0x22c>)
    89f0:	9302      	str	r3, [sp, #8]
    89f2:	7629      	strb	r1, [r5, #24]
    89f4:	f7ff fc1e 	bl	8234 <memchr>
    89f8:	2800      	cmp	r0, #0
    89fa:	d044      	beq.n	8a86 <_vfiprintf_r+0x206>
    89fc:	4b2c      	ldr	r3, [pc, #176]	; (8ab0 <_vfiprintf_r+0x230>)
    89fe:	2b00      	cmp	r3, #0
    8a00:	d12f      	bne.n	8a62 <_vfiprintf_r+0x1e2>
    8a02:	6829      	ldr	r1, [r5, #0]
    8a04:	9b05      	ldr	r3, [sp, #20]
    8a06:	2207      	movs	r2, #7
    8a08:	05c9      	lsls	r1, r1, #23
    8a0a:	d528      	bpl.n	8a5e <_vfiprintf_r+0x1de>
    8a0c:	189b      	adds	r3, r3, r2
    8a0e:	4393      	bics	r3, r2
    8a10:	3308      	adds	r3, #8
    8a12:	9305      	str	r3, [sp, #20]
    8a14:	696b      	ldr	r3, [r5, #20]
    8a16:	9a03      	ldr	r2, [sp, #12]
    8a18:	189b      	adds	r3, r3, r2
    8a1a:	616b      	str	r3, [r5, #20]
    8a1c:	e74f      	b.n	88be <_vfiprintf_r+0x3e>
    8a1e:	425b      	negs	r3, r3
    8a20:	60eb      	str	r3, [r5, #12]
    8a22:	2302      	movs	r3, #2
    8a24:	430b      	orrs	r3, r1
    8a26:	602b      	str	r3, [r5, #0]
    8a28:	e7bf      	b.n	89aa <_vfiprintf_r+0x12a>
    8a2a:	434b      	muls	r3, r1
    8a2c:	3401      	adds	r4, #1
    8a2e:	189b      	adds	r3, r3, r2
    8a30:	2001      	movs	r0, #1
    8a32:	e789      	b.n	8948 <_vfiprintf_r+0xc8>
    8a34:	2301      	movs	r3, #1
    8a36:	425b      	negs	r3, r3
    8a38:	e7c6      	b.n	89c8 <_vfiprintf_r+0x148>
    8a3a:	2300      	movs	r3, #0
    8a3c:	0014      	movs	r4, r2
    8a3e:	200a      	movs	r0, #10
    8a40:	001a      	movs	r2, r3
    8a42:	606b      	str	r3, [r5, #4]
    8a44:	7821      	ldrb	r1, [r4, #0]
    8a46:	3930      	subs	r1, #48	; 0x30
    8a48:	2909      	cmp	r1, #9
    8a4a:	d903      	bls.n	8a54 <_vfiprintf_r+0x1d4>
    8a4c:	2b00      	cmp	r3, #0
    8a4e:	d0bc      	beq.n	89ca <_vfiprintf_r+0x14a>
    8a50:	9207      	str	r2, [sp, #28]
    8a52:	e7ba      	b.n	89ca <_vfiprintf_r+0x14a>
    8a54:	4342      	muls	r2, r0
    8a56:	3401      	adds	r4, #1
    8a58:	1852      	adds	r2, r2, r1
    8a5a:	2301      	movs	r3, #1
    8a5c:	e7f2      	b.n	8a44 <_vfiprintf_r+0x1c4>
    8a5e:	3307      	adds	r3, #7
    8a60:	e7d5      	b.n	8a0e <_vfiprintf_r+0x18e>
    8a62:	ab05      	add	r3, sp, #20
    8a64:	9300      	str	r3, [sp, #0]
    8a66:	003a      	movs	r2, r7
    8a68:	4b12      	ldr	r3, [pc, #72]	; (8ab4 <_vfiprintf_r+0x234>)
    8a6a:	0029      	movs	r1, r5
    8a6c:	0030      	movs	r0, r6
    8a6e:	f7fd fc6d 	bl	634c <_printf_float>
    8a72:	9003      	str	r0, [sp, #12]
    8a74:	9b03      	ldr	r3, [sp, #12]
    8a76:	3301      	adds	r3, #1
    8a78:	d1cc      	bne.n	8a14 <_vfiprintf_r+0x194>
    8a7a:	89bb      	ldrh	r3, [r7, #12]
    8a7c:	065b      	lsls	r3, r3, #25
    8a7e:	d500      	bpl.n	8a82 <_vfiprintf_r+0x202>
    8a80:	e77b      	b.n	897a <_vfiprintf_r+0xfa>
    8a82:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8a84:	e77b      	b.n	897e <_vfiprintf_r+0xfe>
    8a86:	ab05      	add	r3, sp, #20
    8a88:	9300      	str	r3, [sp, #0]
    8a8a:	003a      	movs	r2, r7
    8a8c:	4b09      	ldr	r3, [pc, #36]	; (8ab4 <_vfiprintf_r+0x234>)
    8a8e:	0029      	movs	r1, r5
    8a90:	0030      	movs	r0, r6
    8a92:	f7fd ff15 	bl	68c0 <_printf_i>
    8a96:	e7ec      	b.n	8a72 <_vfiprintf_r+0x1f2>
    8a98:	0000b648 	.word	0x0000b648
    8a9c:	0000b784 	.word	0x0000b784
    8aa0:	0000b668 	.word	0x0000b668
    8aa4:	0000b628 	.word	0x0000b628
    8aa8:	0000b78a 	.word	0x0000b78a
    8aac:	0000b78e 	.word	0x0000b78e
    8ab0:	0000634d 	.word	0x0000634d
    8ab4:	0000885b 	.word	0x0000885b

00008ab8 <__sread>:
    8ab8:	b570      	push	{r4, r5, r6, lr}
    8aba:	000c      	movs	r4, r1
    8abc:	250e      	movs	r5, #14
    8abe:	5f49      	ldrsh	r1, [r1, r5]
    8ac0:	f000 f8a4 	bl	8c0c <_read_r>
    8ac4:	2800      	cmp	r0, #0
    8ac6:	db03      	blt.n	8ad0 <__sread+0x18>
    8ac8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    8aca:	181b      	adds	r3, r3, r0
    8acc:	6563      	str	r3, [r4, #84]	; 0x54
    8ace:	bd70      	pop	{r4, r5, r6, pc}
    8ad0:	89a3      	ldrh	r3, [r4, #12]
    8ad2:	4a02      	ldr	r2, [pc, #8]	; (8adc <__sread+0x24>)
    8ad4:	4013      	ands	r3, r2
    8ad6:	81a3      	strh	r3, [r4, #12]
    8ad8:	e7f9      	b.n	8ace <__sread+0x16>
    8ada:	46c0      	nop			; (mov r8, r8)
    8adc:	ffffefff 	.word	0xffffefff

00008ae0 <__swrite>:
    8ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ae2:	001f      	movs	r7, r3
    8ae4:	898b      	ldrh	r3, [r1, #12]
    8ae6:	0005      	movs	r5, r0
    8ae8:	000c      	movs	r4, r1
    8aea:	0016      	movs	r6, r2
    8aec:	05db      	lsls	r3, r3, #23
    8aee:	d505      	bpl.n	8afc <__swrite+0x1c>
    8af0:	230e      	movs	r3, #14
    8af2:	5ec9      	ldrsh	r1, [r1, r3]
    8af4:	2200      	movs	r2, #0
    8af6:	2302      	movs	r3, #2
    8af8:	f000 f874 	bl	8be4 <_lseek_r>
    8afc:	89a3      	ldrh	r3, [r4, #12]
    8afe:	4a05      	ldr	r2, [pc, #20]	; (8b14 <__swrite+0x34>)
    8b00:	0028      	movs	r0, r5
    8b02:	4013      	ands	r3, r2
    8b04:	81a3      	strh	r3, [r4, #12]
    8b06:	0032      	movs	r2, r6
    8b08:	230e      	movs	r3, #14
    8b0a:	5ee1      	ldrsh	r1, [r4, r3]
    8b0c:	003b      	movs	r3, r7
    8b0e:	f000 f81f 	bl	8b50 <_write_r>
    8b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b14:	ffffefff 	.word	0xffffefff

00008b18 <__sseek>:
    8b18:	b570      	push	{r4, r5, r6, lr}
    8b1a:	000c      	movs	r4, r1
    8b1c:	250e      	movs	r5, #14
    8b1e:	5f49      	ldrsh	r1, [r1, r5]
    8b20:	f000 f860 	bl	8be4 <_lseek_r>
    8b24:	89a3      	ldrh	r3, [r4, #12]
    8b26:	1c42      	adds	r2, r0, #1
    8b28:	d103      	bne.n	8b32 <__sseek+0x1a>
    8b2a:	4a05      	ldr	r2, [pc, #20]	; (8b40 <__sseek+0x28>)
    8b2c:	4013      	ands	r3, r2
    8b2e:	81a3      	strh	r3, [r4, #12]
    8b30:	bd70      	pop	{r4, r5, r6, pc}
    8b32:	2280      	movs	r2, #128	; 0x80
    8b34:	0152      	lsls	r2, r2, #5
    8b36:	4313      	orrs	r3, r2
    8b38:	81a3      	strh	r3, [r4, #12]
    8b3a:	6560      	str	r0, [r4, #84]	; 0x54
    8b3c:	e7f8      	b.n	8b30 <__sseek+0x18>
    8b3e:	46c0      	nop			; (mov r8, r8)
    8b40:	ffffefff 	.word	0xffffefff

00008b44 <__sclose>:
    8b44:	b510      	push	{r4, lr}
    8b46:	230e      	movs	r3, #14
    8b48:	5ec9      	ldrsh	r1, [r1, r3]
    8b4a:	f000 f815 	bl	8b78 <_close_r>
    8b4e:	bd10      	pop	{r4, pc}

00008b50 <_write_r>:
    8b50:	b570      	push	{r4, r5, r6, lr}
    8b52:	0005      	movs	r5, r0
    8b54:	0008      	movs	r0, r1
    8b56:	0011      	movs	r1, r2
    8b58:	2200      	movs	r2, #0
    8b5a:	4c06      	ldr	r4, [pc, #24]	; (8b74 <_write_r+0x24>)
    8b5c:	6022      	str	r2, [r4, #0]
    8b5e:	001a      	movs	r2, r3
    8b60:	f7f9 fd6c 	bl	263c <_write>
    8b64:	1c43      	adds	r3, r0, #1
    8b66:	d103      	bne.n	8b70 <_write_r+0x20>
    8b68:	6823      	ldr	r3, [r4, #0]
    8b6a:	2b00      	cmp	r3, #0
    8b6c:	d000      	beq.n	8b70 <_write_r+0x20>
    8b6e:	602b      	str	r3, [r5, #0]
    8b70:	bd70      	pop	{r4, r5, r6, pc}
    8b72:	46c0      	nop			; (mov r8, r8)
    8b74:	20000398 	.word	0x20000398

00008b78 <_close_r>:
    8b78:	2300      	movs	r3, #0
    8b7a:	b570      	push	{r4, r5, r6, lr}
    8b7c:	4c06      	ldr	r4, [pc, #24]	; (8b98 <_close_r+0x20>)
    8b7e:	0005      	movs	r5, r0
    8b80:	0008      	movs	r0, r1
    8b82:	6023      	str	r3, [r4, #0]
    8b84:	f7fb fe90 	bl	48a8 <_close>
    8b88:	1c43      	adds	r3, r0, #1
    8b8a:	d103      	bne.n	8b94 <_close_r+0x1c>
    8b8c:	6823      	ldr	r3, [r4, #0]
    8b8e:	2b00      	cmp	r3, #0
    8b90:	d000      	beq.n	8b94 <_close_r+0x1c>
    8b92:	602b      	str	r3, [r5, #0]
    8b94:	bd70      	pop	{r4, r5, r6, pc}
    8b96:	46c0      	nop			; (mov r8, r8)
    8b98:	20000398 	.word	0x20000398

00008b9c <_fstat_r>:
    8b9c:	2300      	movs	r3, #0
    8b9e:	b570      	push	{r4, r5, r6, lr}
    8ba0:	4c06      	ldr	r4, [pc, #24]	; (8bbc <_fstat_r+0x20>)
    8ba2:	0005      	movs	r5, r0
    8ba4:	0008      	movs	r0, r1
    8ba6:	0011      	movs	r1, r2
    8ba8:	6023      	str	r3, [r4, #0]
    8baa:	f7fb fe87 	bl	48bc <_fstat>
    8bae:	1c43      	adds	r3, r0, #1
    8bb0:	d103      	bne.n	8bba <_fstat_r+0x1e>
    8bb2:	6823      	ldr	r3, [r4, #0]
    8bb4:	2b00      	cmp	r3, #0
    8bb6:	d000      	beq.n	8bba <_fstat_r+0x1e>
    8bb8:	602b      	str	r3, [r5, #0]
    8bba:	bd70      	pop	{r4, r5, r6, pc}
    8bbc:	20000398 	.word	0x20000398

00008bc0 <_isatty_r>:
    8bc0:	2300      	movs	r3, #0
    8bc2:	b570      	push	{r4, r5, r6, lr}
    8bc4:	4c06      	ldr	r4, [pc, #24]	; (8be0 <_isatty_r+0x20>)
    8bc6:	0005      	movs	r5, r0
    8bc8:	0008      	movs	r0, r1
    8bca:	6023      	str	r3, [r4, #0]
    8bcc:	f7fb fe84 	bl	48d8 <_isatty>
    8bd0:	1c43      	adds	r3, r0, #1
    8bd2:	d103      	bne.n	8bdc <_isatty_r+0x1c>
    8bd4:	6823      	ldr	r3, [r4, #0]
    8bd6:	2b00      	cmp	r3, #0
    8bd8:	d000      	beq.n	8bdc <_isatty_r+0x1c>
    8bda:	602b      	str	r3, [r5, #0]
    8bdc:	bd70      	pop	{r4, r5, r6, pc}
    8bde:	46c0      	nop			; (mov r8, r8)
    8be0:	20000398 	.word	0x20000398

00008be4 <_lseek_r>:
    8be4:	b570      	push	{r4, r5, r6, lr}
    8be6:	0005      	movs	r5, r0
    8be8:	0008      	movs	r0, r1
    8bea:	0011      	movs	r1, r2
    8bec:	2200      	movs	r2, #0
    8bee:	4c06      	ldr	r4, [pc, #24]	; (8c08 <_lseek_r+0x24>)
    8bf0:	6022      	str	r2, [r4, #0]
    8bf2:	001a      	movs	r2, r3
    8bf4:	f7fb fe79 	bl	48ea <_lseek>
    8bf8:	1c43      	adds	r3, r0, #1
    8bfa:	d103      	bne.n	8c04 <_lseek_r+0x20>
    8bfc:	6823      	ldr	r3, [r4, #0]
    8bfe:	2b00      	cmp	r3, #0
    8c00:	d000      	beq.n	8c04 <_lseek_r+0x20>
    8c02:	602b      	str	r3, [r5, #0]
    8c04:	bd70      	pop	{r4, r5, r6, pc}
    8c06:	46c0      	nop			; (mov r8, r8)
    8c08:	20000398 	.word	0x20000398

00008c0c <_read_r>:
    8c0c:	b570      	push	{r4, r5, r6, lr}
    8c0e:	0005      	movs	r5, r0
    8c10:	0008      	movs	r0, r1
    8c12:	0011      	movs	r1, r2
    8c14:	2200      	movs	r2, #0
    8c16:	4c06      	ldr	r4, [pc, #24]	; (8c30 <_read_r+0x24>)
    8c18:	6022      	str	r2, [r4, #0]
    8c1a:	001a      	movs	r2, r3
    8c1c:	f7f9 fce4 	bl	25e8 <_read>
    8c20:	1c43      	adds	r3, r0, #1
    8c22:	d103      	bne.n	8c2c <_read_r+0x20>
    8c24:	6823      	ldr	r3, [r4, #0]
    8c26:	2b00      	cmp	r3, #0
    8c28:	d000      	beq.n	8c2c <_read_r+0x20>
    8c2a:	602b      	str	r3, [r5, #0]
    8c2c:	bd70      	pop	{r4, r5, r6, pc}
    8c2e:	46c0      	nop			; (mov r8, r8)
    8c30:	20000398 	.word	0x20000398

00008c34 <__gnu_thumb1_case_uqi>:
    8c34:	b402      	push	{r1}
    8c36:	4671      	mov	r1, lr
    8c38:	0849      	lsrs	r1, r1, #1
    8c3a:	0049      	lsls	r1, r1, #1
    8c3c:	5c09      	ldrb	r1, [r1, r0]
    8c3e:	0049      	lsls	r1, r1, #1
    8c40:	448e      	add	lr, r1
    8c42:	bc02      	pop	{r1}
    8c44:	4770      	bx	lr
    8c46:	46c0      	nop			; (mov r8, r8)

00008c48 <__udivsi3>:
    8c48:	2200      	movs	r2, #0
    8c4a:	0843      	lsrs	r3, r0, #1
    8c4c:	428b      	cmp	r3, r1
    8c4e:	d374      	bcc.n	8d3a <__udivsi3+0xf2>
    8c50:	0903      	lsrs	r3, r0, #4
    8c52:	428b      	cmp	r3, r1
    8c54:	d35f      	bcc.n	8d16 <__udivsi3+0xce>
    8c56:	0a03      	lsrs	r3, r0, #8
    8c58:	428b      	cmp	r3, r1
    8c5a:	d344      	bcc.n	8ce6 <__udivsi3+0x9e>
    8c5c:	0b03      	lsrs	r3, r0, #12
    8c5e:	428b      	cmp	r3, r1
    8c60:	d328      	bcc.n	8cb4 <__udivsi3+0x6c>
    8c62:	0c03      	lsrs	r3, r0, #16
    8c64:	428b      	cmp	r3, r1
    8c66:	d30d      	bcc.n	8c84 <__udivsi3+0x3c>
    8c68:	22ff      	movs	r2, #255	; 0xff
    8c6a:	0209      	lsls	r1, r1, #8
    8c6c:	ba12      	rev	r2, r2
    8c6e:	0c03      	lsrs	r3, r0, #16
    8c70:	428b      	cmp	r3, r1
    8c72:	d302      	bcc.n	8c7a <__udivsi3+0x32>
    8c74:	1212      	asrs	r2, r2, #8
    8c76:	0209      	lsls	r1, r1, #8
    8c78:	d065      	beq.n	8d46 <__udivsi3+0xfe>
    8c7a:	0b03      	lsrs	r3, r0, #12
    8c7c:	428b      	cmp	r3, r1
    8c7e:	d319      	bcc.n	8cb4 <__udivsi3+0x6c>
    8c80:	e000      	b.n	8c84 <__udivsi3+0x3c>
    8c82:	0a09      	lsrs	r1, r1, #8
    8c84:	0bc3      	lsrs	r3, r0, #15
    8c86:	428b      	cmp	r3, r1
    8c88:	d301      	bcc.n	8c8e <__udivsi3+0x46>
    8c8a:	03cb      	lsls	r3, r1, #15
    8c8c:	1ac0      	subs	r0, r0, r3
    8c8e:	4152      	adcs	r2, r2
    8c90:	0b83      	lsrs	r3, r0, #14
    8c92:	428b      	cmp	r3, r1
    8c94:	d301      	bcc.n	8c9a <__udivsi3+0x52>
    8c96:	038b      	lsls	r3, r1, #14
    8c98:	1ac0      	subs	r0, r0, r3
    8c9a:	4152      	adcs	r2, r2
    8c9c:	0b43      	lsrs	r3, r0, #13
    8c9e:	428b      	cmp	r3, r1
    8ca0:	d301      	bcc.n	8ca6 <__udivsi3+0x5e>
    8ca2:	034b      	lsls	r3, r1, #13
    8ca4:	1ac0      	subs	r0, r0, r3
    8ca6:	4152      	adcs	r2, r2
    8ca8:	0b03      	lsrs	r3, r0, #12
    8caa:	428b      	cmp	r3, r1
    8cac:	d301      	bcc.n	8cb2 <__udivsi3+0x6a>
    8cae:	030b      	lsls	r3, r1, #12
    8cb0:	1ac0      	subs	r0, r0, r3
    8cb2:	4152      	adcs	r2, r2
    8cb4:	0ac3      	lsrs	r3, r0, #11
    8cb6:	428b      	cmp	r3, r1
    8cb8:	d301      	bcc.n	8cbe <__udivsi3+0x76>
    8cba:	02cb      	lsls	r3, r1, #11
    8cbc:	1ac0      	subs	r0, r0, r3
    8cbe:	4152      	adcs	r2, r2
    8cc0:	0a83      	lsrs	r3, r0, #10
    8cc2:	428b      	cmp	r3, r1
    8cc4:	d301      	bcc.n	8cca <__udivsi3+0x82>
    8cc6:	028b      	lsls	r3, r1, #10
    8cc8:	1ac0      	subs	r0, r0, r3
    8cca:	4152      	adcs	r2, r2
    8ccc:	0a43      	lsrs	r3, r0, #9
    8cce:	428b      	cmp	r3, r1
    8cd0:	d301      	bcc.n	8cd6 <__udivsi3+0x8e>
    8cd2:	024b      	lsls	r3, r1, #9
    8cd4:	1ac0      	subs	r0, r0, r3
    8cd6:	4152      	adcs	r2, r2
    8cd8:	0a03      	lsrs	r3, r0, #8
    8cda:	428b      	cmp	r3, r1
    8cdc:	d301      	bcc.n	8ce2 <__udivsi3+0x9a>
    8cde:	020b      	lsls	r3, r1, #8
    8ce0:	1ac0      	subs	r0, r0, r3
    8ce2:	4152      	adcs	r2, r2
    8ce4:	d2cd      	bcs.n	8c82 <__udivsi3+0x3a>
    8ce6:	09c3      	lsrs	r3, r0, #7
    8ce8:	428b      	cmp	r3, r1
    8cea:	d301      	bcc.n	8cf0 <__udivsi3+0xa8>
    8cec:	01cb      	lsls	r3, r1, #7
    8cee:	1ac0      	subs	r0, r0, r3
    8cf0:	4152      	adcs	r2, r2
    8cf2:	0983      	lsrs	r3, r0, #6
    8cf4:	428b      	cmp	r3, r1
    8cf6:	d301      	bcc.n	8cfc <__udivsi3+0xb4>
    8cf8:	018b      	lsls	r3, r1, #6
    8cfa:	1ac0      	subs	r0, r0, r3
    8cfc:	4152      	adcs	r2, r2
    8cfe:	0943      	lsrs	r3, r0, #5
    8d00:	428b      	cmp	r3, r1
    8d02:	d301      	bcc.n	8d08 <__udivsi3+0xc0>
    8d04:	014b      	lsls	r3, r1, #5
    8d06:	1ac0      	subs	r0, r0, r3
    8d08:	4152      	adcs	r2, r2
    8d0a:	0903      	lsrs	r3, r0, #4
    8d0c:	428b      	cmp	r3, r1
    8d0e:	d301      	bcc.n	8d14 <__udivsi3+0xcc>
    8d10:	010b      	lsls	r3, r1, #4
    8d12:	1ac0      	subs	r0, r0, r3
    8d14:	4152      	adcs	r2, r2
    8d16:	08c3      	lsrs	r3, r0, #3
    8d18:	428b      	cmp	r3, r1
    8d1a:	d301      	bcc.n	8d20 <__udivsi3+0xd8>
    8d1c:	00cb      	lsls	r3, r1, #3
    8d1e:	1ac0      	subs	r0, r0, r3
    8d20:	4152      	adcs	r2, r2
    8d22:	0883      	lsrs	r3, r0, #2
    8d24:	428b      	cmp	r3, r1
    8d26:	d301      	bcc.n	8d2c <__udivsi3+0xe4>
    8d28:	008b      	lsls	r3, r1, #2
    8d2a:	1ac0      	subs	r0, r0, r3
    8d2c:	4152      	adcs	r2, r2
    8d2e:	0843      	lsrs	r3, r0, #1
    8d30:	428b      	cmp	r3, r1
    8d32:	d301      	bcc.n	8d38 <__udivsi3+0xf0>
    8d34:	004b      	lsls	r3, r1, #1
    8d36:	1ac0      	subs	r0, r0, r3
    8d38:	4152      	adcs	r2, r2
    8d3a:	1a41      	subs	r1, r0, r1
    8d3c:	d200      	bcs.n	8d40 <__udivsi3+0xf8>
    8d3e:	4601      	mov	r1, r0
    8d40:	4152      	adcs	r2, r2
    8d42:	4610      	mov	r0, r2
    8d44:	4770      	bx	lr
    8d46:	e7ff      	b.n	8d48 <__udivsi3+0x100>
    8d48:	b501      	push	{r0, lr}
    8d4a:	2000      	movs	r0, #0
    8d4c:	f000 f8f0 	bl	8f30 <__aeabi_idiv0>
    8d50:	bd02      	pop	{r1, pc}
    8d52:	46c0      	nop			; (mov r8, r8)

00008d54 <__aeabi_uidivmod>:
    8d54:	2900      	cmp	r1, #0
    8d56:	d0f7      	beq.n	8d48 <__udivsi3+0x100>
    8d58:	e776      	b.n	8c48 <__udivsi3>
    8d5a:	4770      	bx	lr

00008d5c <__divsi3>:
    8d5c:	4603      	mov	r3, r0
    8d5e:	430b      	orrs	r3, r1
    8d60:	d47f      	bmi.n	8e62 <__divsi3+0x106>
    8d62:	2200      	movs	r2, #0
    8d64:	0843      	lsrs	r3, r0, #1
    8d66:	428b      	cmp	r3, r1
    8d68:	d374      	bcc.n	8e54 <__divsi3+0xf8>
    8d6a:	0903      	lsrs	r3, r0, #4
    8d6c:	428b      	cmp	r3, r1
    8d6e:	d35f      	bcc.n	8e30 <__divsi3+0xd4>
    8d70:	0a03      	lsrs	r3, r0, #8
    8d72:	428b      	cmp	r3, r1
    8d74:	d344      	bcc.n	8e00 <__divsi3+0xa4>
    8d76:	0b03      	lsrs	r3, r0, #12
    8d78:	428b      	cmp	r3, r1
    8d7a:	d328      	bcc.n	8dce <__divsi3+0x72>
    8d7c:	0c03      	lsrs	r3, r0, #16
    8d7e:	428b      	cmp	r3, r1
    8d80:	d30d      	bcc.n	8d9e <__divsi3+0x42>
    8d82:	22ff      	movs	r2, #255	; 0xff
    8d84:	0209      	lsls	r1, r1, #8
    8d86:	ba12      	rev	r2, r2
    8d88:	0c03      	lsrs	r3, r0, #16
    8d8a:	428b      	cmp	r3, r1
    8d8c:	d302      	bcc.n	8d94 <__divsi3+0x38>
    8d8e:	1212      	asrs	r2, r2, #8
    8d90:	0209      	lsls	r1, r1, #8
    8d92:	d065      	beq.n	8e60 <__divsi3+0x104>
    8d94:	0b03      	lsrs	r3, r0, #12
    8d96:	428b      	cmp	r3, r1
    8d98:	d319      	bcc.n	8dce <__divsi3+0x72>
    8d9a:	e000      	b.n	8d9e <__divsi3+0x42>
    8d9c:	0a09      	lsrs	r1, r1, #8
    8d9e:	0bc3      	lsrs	r3, r0, #15
    8da0:	428b      	cmp	r3, r1
    8da2:	d301      	bcc.n	8da8 <__divsi3+0x4c>
    8da4:	03cb      	lsls	r3, r1, #15
    8da6:	1ac0      	subs	r0, r0, r3
    8da8:	4152      	adcs	r2, r2
    8daa:	0b83      	lsrs	r3, r0, #14
    8dac:	428b      	cmp	r3, r1
    8dae:	d301      	bcc.n	8db4 <__divsi3+0x58>
    8db0:	038b      	lsls	r3, r1, #14
    8db2:	1ac0      	subs	r0, r0, r3
    8db4:	4152      	adcs	r2, r2
    8db6:	0b43      	lsrs	r3, r0, #13
    8db8:	428b      	cmp	r3, r1
    8dba:	d301      	bcc.n	8dc0 <__divsi3+0x64>
    8dbc:	034b      	lsls	r3, r1, #13
    8dbe:	1ac0      	subs	r0, r0, r3
    8dc0:	4152      	adcs	r2, r2
    8dc2:	0b03      	lsrs	r3, r0, #12
    8dc4:	428b      	cmp	r3, r1
    8dc6:	d301      	bcc.n	8dcc <__divsi3+0x70>
    8dc8:	030b      	lsls	r3, r1, #12
    8dca:	1ac0      	subs	r0, r0, r3
    8dcc:	4152      	adcs	r2, r2
    8dce:	0ac3      	lsrs	r3, r0, #11
    8dd0:	428b      	cmp	r3, r1
    8dd2:	d301      	bcc.n	8dd8 <__divsi3+0x7c>
    8dd4:	02cb      	lsls	r3, r1, #11
    8dd6:	1ac0      	subs	r0, r0, r3
    8dd8:	4152      	adcs	r2, r2
    8dda:	0a83      	lsrs	r3, r0, #10
    8ddc:	428b      	cmp	r3, r1
    8dde:	d301      	bcc.n	8de4 <__divsi3+0x88>
    8de0:	028b      	lsls	r3, r1, #10
    8de2:	1ac0      	subs	r0, r0, r3
    8de4:	4152      	adcs	r2, r2
    8de6:	0a43      	lsrs	r3, r0, #9
    8de8:	428b      	cmp	r3, r1
    8dea:	d301      	bcc.n	8df0 <__divsi3+0x94>
    8dec:	024b      	lsls	r3, r1, #9
    8dee:	1ac0      	subs	r0, r0, r3
    8df0:	4152      	adcs	r2, r2
    8df2:	0a03      	lsrs	r3, r0, #8
    8df4:	428b      	cmp	r3, r1
    8df6:	d301      	bcc.n	8dfc <__divsi3+0xa0>
    8df8:	020b      	lsls	r3, r1, #8
    8dfa:	1ac0      	subs	r0, r0, r3
    8dfc:	4152      	adcs	r2, r2
    8dfe:	d2cd      	bcs.n	8d9c <__divsi3+0x40>
    8e00:	09c3      	lsrs	r3, r0, #7
    8e02:	428b      	cmp	r3, r1
    8e04:	d301      	bcc.n	8e0a <__divsi3+0xae>
    8e06:	01cb      	lsls	r3, r1, #7
    8e08:	1ac0      	subs	r0, r0, r3
    8e0a:	4152      	adcs	r2, r2
    8e0c:	0983      	lsrs	r3, r0, #6
    8e0e:	428b      	cmp	r3, r1
    8e10:	d301      	bcc.n	8e16 <__divsi3+0xba>
    8e12:	018b      	lsls	r3, r1, #6
    8e14:	1ac0      	subs	r0, r0, r3
    8e16:	4152      	adcs	r2, r2
    8e18:	0943      	lsrs	r3, r0, #5
    8e1a:	428b      	cmp	r3, r1
    8e1c:	d301      	bcc.n	8e22 <__divsi3+0xc6>
    8e1e:	014b      	lsls	r3, r1, #5
    8e20:	1ac0      	subs	r0, r0, r3
    8e22:	4152      	adcs	r2, r2
    8e24:	0903      	lsrs	r3, r0, #4
    8e26:	428b      	cmp	r3, r1
    8e28:	d301      	bcc.n	8e2e <__divsi3+0xd2>
    8e2a:	010b      	lsls	r3, r1, #4
    8e2c:	1ac0      	subs	r0, r0, r3
    8e2e:	4152      	adcs	r2, r2
    8e30:	08c3      	lsrs	r3, r0, #3
    8e32:	428b      	cmp	r3, r1
    8e34:	d301      	bcc.n	8e3a <__divsi3+0xde>
    8e36:	00cb      	lsls	r3, r1, #3
    8e38:	1ac0      	subs	r0, r0, r3
    8e3a:	4152      	adcs	r2, r2
    8e3c:	0883      	lsrs	r3, r0, #2
    8e3e:	428b      	cmp	r3, r1
    8e40:	d301      	bcc.n	8e46 <__divsi3+0xea>
    8e42:	008b      	lsls	r3, r1, #2
    8e44:	1ac0      	subs	r0, r0, r3
    8e46:	4152      	adcs	r2, r2
    8e48:	0843      	lsrs	r3, r0, #1
    8e4a:	428b      	cmp	r3, r1
    8e4c:	d301      	bcc.n	8e52 <__divsi3+0xf6>
    8e4e:	004b      	lsls	r3, r1, #1
    8e50:	1ac0      	subs	r0, r0, r3
    8e52:	4152      	adcs	r2, r2
    8e54:	1a41      	subs	r1, r0, r1
    8e56:	d200      	bcs.n	8e5a <__divsi3+0xfe>
    8e58:	4601      	mov	r1, r0
    8e5a:	4152      	adcs	r2, r2
    8e5c:	4610      	mov	r0, r2
    8e5e:	4770      	bx	lr
    8e60:	e05d      	b.n	8f1e <__divsi3+0x1c2>
    8e62:	0fca      	lsrs	r2, r1, #31
    8e64:	d000      	beq.n	8e68 <__divsi3+0x10c>
    8e66:	4249      	negs	r1, r1
    8e68:	1003      	asrs	r3, r0, #32
    8e6a:	d300      	bcc.n	8e6e <__divsi3+0x112>
    8e6c:	4240      	negs	r0, r0
    8e6e:	4053      	eors	r3, r2
    8e70:	2200      	movs	r2, #0
    8e72:	469c      	mov	ip, r3
    8e74:	0903      	lsrs	r3, r0, #4
    8e76:	428b      	cmp	r3, r1
    8e78:	d32d      	bcc.n	8ed6 <__divsi3+0x17a>
    8e7a:	0a03      	lsrs	r3, r0, #8
    8e7c:	428b      	cmp	r3, r1
    8e7e:	d312      	bcc.n	8ea6 <__divsi3+0x14a>
    8e80:	22fc      	movs	r2, #252	; 0xfc
    8e82:	0189      	lsls	r1, r1, #6
    8e84:	ba12      	rev	r2, r2
    8e86:	0a03      	lsrs	r3, r0, #8
    8e88:	428b      	cmp	r3, r1
    8e8a:	d30c      	bcc.n	8ea6 <__divsi3+0x14a>
    8e8c:	0189      	lsls	r1, r1, #6
    8e8e:	1192      	asrs	r2, r2, #6
    8e90:	428b      	cmp	r3, r1
    8e92:	d308      	bcc.n	8ea6 <__divsi3+0x14a>
    8e94:	0189      	lsls	r1, r1, #6
    8e96:	1192      	asrs	r2, r2, #6
    8e98:	428b      	cmp	r3, r1
    8e9a:	d304      	bcc.n	8ea6 <__divsi3+0x14a>
    8e9c:	0189      	lsls	r1, r1, #6
    8e9e:	d03a      	beq.n	8f16 <__divsi3+0x1ba>
    8ea0:	1192      	asrs	r2, r2, #6
    8ea2:	e000      	b.n	8ea6 <__divsi3+0x14a>
    8ea4:	0989      	lsrs	r1, r1, #6
    8ea6:	09c3      	lsrs	r3, r0, #7
    8ea8:	428b      	cmp	r3, r1
    8eaa:	d301      	bcc.n	8eb0 <__divsi3+0x154>
    8eac:	01cb      	lsls	r3, r1, #7
    8eae:	1ac0      	subs	r0, r0, r3
    8eb0:	4152      	adcs	r2, r2
    8eb2:	0983      	lsrs	r3, r0, #6
    8eb4:	428b      	cmp	r3, r1
    8eb6:	d301      	bcc.n	8ebc <__divsi3+0x160>
    8eb8:	018b      	lsls	r3, r1, #6
    8eba:	1ac0      	subs	r0, r0, r3
    8ebc:	4152      	adcs	r2, r2
    8ebe:	0943      	lsrs	r3, r0, #5
    8ec0:	428b      	cmp	r3, r1
    8ec2:	d301      	bcc.n	8ec8 <__divsi3+0x16c>
    8ec4:	014b      	lsls	r3, r1, #5
    8ec6:	1ac0      	subs	r0, r0, r3
    8ec8:	4152      	adcs	r2, r2
    8eca:	0903      	lsrs	r3, r0, #4
    8ecc:	428b      	cmp	r3, r1
    8ece:	d301      	bcc.n	8ed4 <__divsi3+0x178>
    8ed0:	010b      	lsls	r3, r1, #4
    8ed2:	1ac0      	subs	r0, r0, r3
    8ed4:	4152      	adcs	r2, r2
    8ed6:	08c3      	lsrs	r3, r0, #3
    8ed8:	428b      	cmp	r3, r1
    8eda:	d301      	bcc.n	8ee0 <__divsi3+0x184>
    8edc:	00cb      	lsls	r3, r1, #3
    8ede:	1ac0      	subs	r0, r0, r3
    8ee0:	4152      	adcs	r2, r2
    8ee2:	0883      	lsrs	r3, r0, #2
    8ee4:	428b      	cmp	r3, r1
    8ee6:	d301      	bcc.n	8eec <__divsi3+0x190>
    8ee8:	008b      	lsls	r3, r1, #2
    8eea:	1ac0      	subs	r0, r0, r3
    8eec:	4152      	adcs	r2, r2
    8eee:	d2d9      	bcs.n	8ea4 <__divsi3+0x148>
    8ef0:	0843      	lsrs	r3, r0, #1
    8ef2:	428b      	cmp	r3, r1
    8ef4:	d301      	bcc.n	8efa <__divsi3+0x19e>
    8ef6:	004b      	lsls	r3, r1, #1
    8ef8:	1ac0      	subs	r0, r0, r3
    8efa:	4152      	adcs	r2, r2
    8efc:	1a41      	subs	r1, r0, r1
    8efe:	d200      	bcs.n	8f02 <__divsi3+0x1a6>
    8f00:	4601      	mov	r1, r0
    8f02:	4663      	mov	r3, ip
    8f04:	4152      	adcs	r2, r2
    8f06:	105b      	asrs	r3, r3, #1
    8f08:	4610      	mov	r0, r2
    8f0a:	d301      	bcc.n	8f10 <__divsi3+0x1b4>
    8f0c:	4240      	negs	r0, r0
    8f0e:	2b00      	cmp	r3, #0
    8f10:	d500      	bpl.n	8f14 <__divsi3+0x1b8>
    8f12:	4249      	negs	r1, r1
    8f14:	4770      	bx	lr
    8f16:	4663      	mov	r3, ip
    8f18:	105b      	asrs	r3, r3, #1
    8f1a:	d300      	bcc.n	8f1e <__divsi3+0x1c2>
    8f1c:	4240      	negs	r0, r0
    8f1e:	b501      	push	{r0, lr}
    8f20:	2000      	movs	r0, #0
    8f22:	f000 f805 	bl	8f30 <__aeabi_idiv0>
    8f26:	bd02      	pop	{r1, pc}

00008f28 <__aeabi_idivmod>:
    8f28:	2900      	cmp	r1, #0
    8f2a:	d0f8      	beq.n	8f1e <__divsi3+0x1c2>
    8f2c:	e716      	b.n	8d5c <__divsi3>
    8f2e:	4770      	bx	lr

00008f30 <__aeabi_idiv0>:
    8f30:	4770      	bx	lr
    8f32:	46c0      	nop			; (mov r8, r8)

00008f34 <__aeabi_cdrcmple>:
    8f34:	4684      	mov	ip, r0
    8f36:	1c10      	adds	r0, r2, #0
    8f38:	4662      	mov	r2, ip
    8f3a:	468c      	mov	ip, r1
    8f3c:	1c19      	adds	r1, r3, #0
    8f3e:	4663      	mov	r3, ip
    8f40:	e000      	b.n	8f44 <__aeabi_cdcmpeq>
    8f42:	46c0      	nop			; (mov r8, r8)

00008f44 <__aeabi_cdcmpeq>:
    8f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8f46:	f000 ff3f 	bl	9dc8 <__ledf2>
    8f4a:	2800      	cmp	r0, #0
    8f4c:	d401      	bmi.n	8f52 <__aeabi_cdcmpeq+0xe>
    8f4e:	2100      	movs	r1, #0
    8f50:	42c8      	cmn	r0, r1
    8f52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00008f54 <__aeabi_dcmpeq>:
    8f54:	b510      	push	{r4, lr}
    8f56:	f000 fe99 	bl	9c8c <__eqdf2>
    8f5a:	4240      	negs	r0, r0
    8f5c:	3001      	adds	r0, #1
    8f5e:	bd10      	pop	{r4, pc}

00008f60 <__aeabi_dcmplt>:
    8f60:	b510      	push	{r4, lr}
    8f62:	f000 ff31 	bl	9dc8 <__ledf2>
    8f66:	2800      	cmp	r0, #0
    8f68:	db01      	blt.n	8f6e <__aeabi_dcmplt+0xe>
    8f6a:	2000      	movs	r0, #0
    8f6c:	bd10      	pop	{r4, pc}
    8f6e:	2001      	movs	r0, #1
    8f70:	bd10      	pop	{r4, pc}
    8f72:	46c0      	nop			; (mov r8, r8)

00008f74 <__aeabi_dcmple>:
    8f74:	b510      	push	{r4, lr}
    8f76:	f000 ff27 	bl	9dc8 <__ledf2>
    8f7a:	2800      	cmp	r0, #0
    8f7c:	dd01      	ble.n	8f82 <__aeabi_dcmple+0xe>
    8f7e:	2000      	movs	r0, #0
    8f80:	bd10      	pop	{r4, pc}
    8f82:	2001      	movs	r0, #1
    8f84:	bd10      	pop	{r4, pc}
    8f86:	46c0      	nop			; (mov r8, r8)

00008f88 <__aeabi_dcmpgt>:
    8f88:	b510      	push	{r4, lr}
    8f8a:	f000 feb9 	bl	9d00 <__gedf2>
    8f8e:	2800      	cmp	r0, #0
    8f90:	dc01      	bgt.n	8f96 <__aeabi_dcmpgt+0xe>
    8f92:	2000      	movs	r0, #0
    8f94:	bd10      	pop	{r4, pc}
    8f96:	2001      	movs	r0, #1
    8f98:	bd10      	pop	{r4, pc}
    8f9a:	46c0      	nop			; (mov r8, r8)

00008f9c <__aeabi_dcmpge>:
    8f9c:	b510      	push	{r4, lr}
    8f9e:	f000 feaf 	bl	9d00 <__gedf2>
    8fa2:	2800      	cmp	r0, #0
    8fa4:	da01      	bge.n	8faa <__aeabi_dcmpge+0xe>
    8fa6:	2000      	movs	r0, #0
    8fa8:	bd10      	pop	{r4, pc}
    8faa:	2001      	movs	r0, #1
    8fac:	bd10      	pop	{r4, pc}
    8fae:	46c0      	nop			; (mov r8, r8)

00008fb0 <__aeabi_lmul>:
    8fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fb2:	46ce      	mov	lr, r9
    8fb4:	4647      	mov	r7, r8
    8fb6:	0415      	lsls	r5, r2, #16
    8fb8:	0c2d      	lsrs	r5, r5, #16
    8fba:	002e      	movs	r6, r5
    8fbc:	b580      	push	{r7, lr}
    8fbe:	0407      	lsls	r7, r0, #16
    8fc0:	0c14      	lsrs	r4, r2, #16
    8fc2:	0c3f      	lsrs	r7, r7, #16
    8fc4:	4699      	mov	r9, r3
    8fc6:	0c03      	lsrs	r3, r0, #16
    8fc8:	437e      	muls	r6, r7
    8fca:	435d      	muls	r5, r3
    8fcc:	4367      	muls	r7, r4
    8fce:	4363      	muls	r3, r4
    8fd0:	197f      	adds	r7, r7, r5
    8fd2:	0c34      	lsrs	r4, r6, #16
    8fd4:	19e4      	adds	r4, r4, r7
    8fd6:	469c      	mov	ip, r3
    8fd8:	42a5      	cmp	r5, r4
    8fda:	d903      	bls.n	8fe4 <__aeabi_lmul+0x34>
    8fdc:	2380      	movs	r3, #128	; 0x80
    8fde:	025b      	lsls	r3, r3, #9
    8fe0:	4698      	mov	r8, r3
    8fe2:	44c4      	add	ip, r8
    8fe4:	464b      	mov	r3, r9
    8fe6:	4351      	muls	r1, r2
    8fe8:	4343      	muls	r3, r0
    8fea:	0436      	lsls	r6, r6, #16
    8fec:	0c36      	lsrs	r6, r6, #16
    8fee:	0c25      	lsrs	r5, r4, #16
    8ff0:	0424      	lsls	r4, r4, #16
    8ff2:	4465      	add	r5, ip
    8ff4:	19a4      	adds	r4, r4, r6
    8ff6:	1859      	adds	r1, r3, r1
    8ff8:	1949      	adds	r1, r1, r5
    8ffa:	0020      	movs	r0, r4
    8ffc:	bc0c      	pop	{r2, r3}
    8ffe:	4690      	mov	r8, r2
    9000:	4699      	mov	r9, r3
    9002:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009004 <__aeabi_dadd>:
    9004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9006:	4645      	mov	r5, r8
    9008:	46de      	mov	lr, fp
    900a:	4657      	mov	r7, sl
    900c:	464e      	mov	r6, r9
    900e:	030c      	lsls	r4, r1, #12
    9010:	b5e0      	push	{r5, r6, r7, lr}
    9012:	004e      	lsls	r6, r1, #1
    9014:	0fc9      	lsrs	r1, r1, #31
    9016:	4688      	mov	r8, r1
    9018:	000d      	movs	r5, r1
    901a:	0a61      	lsrs	r1, r4, #9
    901c:	0f44      	lsrs	r4, r0, #29
    901e:	430c      	orrs	r4, r1
    9020:	00c7      	lsls	r7, r0, #3
    9022:	0319      	lsls	r1, r3, #12
    9024:	0058      	lsls	r0, r3, #1
    9026:	0fdb      	lsrs	r3, r3, #31
    9028:	469b      	mov	fp, r3
    902a:	0a4b      	lsrs	r3, r1, #9
    902c:	0f51      	lsrs	r1, r2, #29
    902e:	430b      	orrs	r3, r1
    9030:	0d76      	lsrs	r6, r6, #21
    9032:	0d40      	lsrs	r0, r0, #21
    9034:	0019      	movs	r1, r3
    9036:	00d2      	lsls	r2, r2, #3
    9038:	45d8      	cmp	r8, fp
    903a:	d100      	bne.n	903e <__aeabi_dadd+0x3a>
    903c:	e0ae      	b.n	919c <__aeabi_dadd+0x198>
    903e:	1a35      	subs	r5, r6, r0
    9040:	2d00      	cmp	r5, #0
    9042:	dc00      	bgt.n	9046 <__aeabi_dadd+0x42>
    9044:	e0f6      	b.n	9234 <__aeabi_dadd+0x230>
    9046:	2800      	cmp	r0, #0
    9048:	d10f      	bne.n	906a <__aeabi_dadd+0x66>
    904a:	4313      	orrs	r3, r2
    904c:	d100      	bne.n	9050 <__aeabi_dadd+0x4c>
    904e:	e0db      	b.n	9208 <__aeabi_dadd+0x204>
    9050:	1e6b      	subs	r3, r5, #1
    9052:	2b00      	cmp	r3, #0
    9054:	d000      	beq.n	9058 <__aeabi_dadd+0x54>
    9056:	e137      	b.n	92c8 <__aeabi_dadd+0x2c4>
    9058:	1aba      	subs	r2, r7, r2
    905a:	4297      	cmp	r7, r2
    905c:	41bf      	sbcs	r7, r7
    905e:	1a64      	subs	r4, r4, r1
    9060:	427f      	negs	r7, r7
    9062:	1be4      	subs	r4, r4, r7
    9064:	2601      	movs	r6, #1
    9066:	0017      	movs	r7, r2
    9068:	e024      	b.n	90b4 <__aeabi_dadd+0xb0>
    906a:	4bc6      	ldr	r3, [pc, #792]	; (9384 <__aeabi_dadd+0x380>)
    906c:	429e      	cmp	r6, r3
    906e:	d04d      	beq.n	910c <__aeabi_dadd+0x108>
    9070:	2380      	movs	r3, #128	; 0x80
    9072:	041b      	lsls	r3, r3, #16
    9074:	4319      	orrs	r1, r3
    9076:	2d38      	cmp	r5, #56	; 0x38
    9078:	dd00      	ble.n	907c <__aeabi_dadd+0x78>
    907a:	e107      	b.n	928c <__aeabi_dadd+0x288>
    907c:	2d1f      	cmp	r5, #31
    907e:	dd00      	ble.n	9082 <__aeabi_dadd+0x7e>
    9080:	e138      	b.n	92f4 <__aeabi_dadd+0x2f0>
    9082:	2020      	movs	r0, #32
    9084:	1b43      	subs	r3, r0, r5
    9086:	469a      	mov	sl, r3
    9088:	000b      	movs	r3, r1
    908a:	4650      	mov	r0, sl
    908c:	4083      	lsls	r3, r0
    908e:	4699      	mov	r9, r3
    9090:	0013      	movs	r3, r2
    9092:	4648      	mov	r0, r9
    9094:	40eb      	lsrs	r3, r5
    9096:	4318      	orrs	r0, r3
    9098:	0003      	movs	r3, r0
    909a:	4650      	mov	r0, sl
    909c:	4082      	lsls	r2, r0
    909e:	1e50      	subs	r0, r2, #1
    90a0:	4182      	sbcs	r2, r0
    90a2:	40e9      	lsrs	r1, r5
    90a4:	431a      	orrs	r2, r3
    90a6:	1aba      	subs	r2, r7, r2
    90a8:	1a61      	subs	r1, r4, r1
    90aa:	4297      	cmp	r7, r2
    90ac:	41a4      	sbcs	r4, r4
    90ae:	0017      	movs	r7, r2
    90b0:	4264      	negs	r4, r4
    90b2:	1b0c      	subs	r4, r1, r4
    90b4:	0223      	lsls	r3, r4, #8
    90b6:	d562      	bpl.n	917e <__aeabi_dadd+0x17a>
    90b8:	0264      	lsls	r4, r4, #9
    90ba:	0a65      	lsrs	r5, r4, #9
    90bc:	2d00      	cmp	r5, #0
    90be:	d100      	bne.n	90c2 <__aeabi_dadd+0xbe>
    90c0:	e0df      	b.n	9282 <__aeabi_dadd+0x27e>
    90c2:	0028      	movs	r0, r5
    90c4:	f001 fe22 	bl	ad0c <__clzsi2>
    90c8:	0003      	movs	r3, r0
    90ca:	3b08      	subs	r3, #8
    90cc:	2b1f      	cmp	r3, #31
    90ce:	dd00      	ble.n	90d2 <__aeabi_dadd+0xce>
    90d0:	e0d2      	b.n	9278 <__aeabi_dadd+0x274>
    90d2:	2220      	movs	r2, #32
    90d4:	003c      	movs	r4, r7
    90d6:	1ad2      	subs	r2, r2, r3
    90d8:	409d      	lsls	r5, r3
    90da:	40d4      	lsrs	r4, r2
    90dc:	409f      	lsls	r7, r3
    90de:	4325      	orrs	r5, r4
    90e0:	429e      	cmp	r6, r3
    90e2:	dd00      	ble.n	90e6 <__aeabi_dadd+0xe2>
    90e4:	e0c4      	b.n	9270 <__aeabi_dadd+0x26c>
    90e6:	1b9e      	subs	r6, r3, r6
    90e8:	1c73      	adds	r3, r6, #1
    90ea:	2b1f      	cmp	r3, #31
    90ec:	dd00      	ble.n	90f0 <__aeabi_dadd+0xec>
    90ee:	e0f1      	b.n	92d4 <__aeabi_dadd+0x2d0>
    90f0:	2220      	movs	r2, #32
    90f2:	0038      	movs	r0, r7
    90f4:	0029      	movs	r1, r5
    90f6:	1ad2      	subs	r2, r2, r3
    90f8:	40d8      	lsrs	r0, r3
    90fa:	4091      	lsls	r1, r2
    90fc:	4097      	lsls	r7, r2
    90fe:	002c      	movs	r4, r5
    9100:	4301      	orrs	r1, r0
    9102:	1e78      	subs	r0, r7, #1
    9104:	4187      	sbcs	r7, r0
    9106:	40dc      	lsrs	r4, r3
    9108:	2600      	movs	r6, #0
    910a:	430f      	orrs	r7, r1
    910c:	077b      	lsls	r3, r7, #29
    910e:	d009      	beq.n	9124 <__aeabi_dadd+0x120>
    9110:	230f      	movs	r3, #15
    9112:	403b      	ands	r3, r7
    9114:	2b04      	cmp	r3, #4
    9116:	d005      	beq.n	9124 <__aeabi_dadd+0x120>
    9118:	1d3b      	adds	r3, r7, #4
    911a:	42bb      	cmp	r3, r7
    911c:	41bf      	sbcs	r7, r7
    911e:	427f      	negs	r7, r7
    9120:	19e4      	adds	r4, r4, r7
    9122:	001f      	movs	r7, r3
    9124:	0223      	lsls	r3, r4, #8
    9126:	d52c      	bpl.n	9182 <__aeabi_dadd+0x17e>
    9128:	4b96      	ldr	r3, [pc, #600]	; (9384 <__aeabi_dadd+0x380>)
    912a:	3601      	adds	r6, #1
    912c:	429e      	cmp	r6, r3
    912e:	d100      	bne.n	9132 <__aeabi_dadd+0x12e>
    9130:	e09a      	b.n	9268 <__aeabi_dadd+0x264>
    9132:	4645      	mov	r5, r8
    9134:	4b94      	ldr	r3, [pc, #592]	; (9388 <__aeabi_dadd+0x384>)
    9136:	08ff      	lsrs	r7, r7, #3
    9138:	401c      	ands	r4, r3
    913a:	0760      	lsls	r0, r4, #29
    913c:	0576      	lsls	r6, r6, #21
    913e:	0264      	lsls	r4, r4, #9
    9140:	4307      	orrs	r7, r0
    9142:	0b24      	lsrs	r4, r4, #12
    9144:	0d76      	lsrs	r6, r6, #21
    9146:	2100      	movs	r1, #0
    9148:	0324      	lsls	r4, r4, #12
    914a:	0b23      	lsrs	r3, r4, #12
    914c:	0d0c      	lsrs	r4, r1, #20
    914e:	4a8f      	ldr	r2, [pc, #572]	; (938c <__aeabi_dadd+0x388>)
    9150:	0524      	lsls	r4, r4, #20
    9152:	431c      	orrs	r4, r3
    9154:	4014      	ands	r4, r2
    9156:	0533      	lsls	r3, r6, #20
    9158:	4323      	orrs	r3, r4
    915a:	005b      	lsls	r3, r3, #1
    915c:	07ed      	lsls	r5, r5, #31
    915e:	085b      	lsrs	r3, r3, #1
    9160:	432b      	orrs	r3, r5
    9162:	0038      	movs	r0, r7
    9164:	0019      	movs	r1, r3
    9166:	bc3c      	pop	{r2, r3, r4, r5}
    9168:	4690      	mov	r8, r2
    916a:	4699      	mov	r9, r3
    916c:	46a2      	mov	sl, r4
    916e:	46ab      	mov	fp, r5
    9170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9172:	4664      	mov	r4, ip
    9174:	4304      	orrs	r4, r0
    9176:	d100      	bne.n	917a <__aeabi_dadd+0x176>
    9178:	e211      	b.n	959e <__aeabi_dadd+0x59a>
    917a:	0004      	movs	r4, r0
    917c:	4667      	mov	r7, ip
    917e:	077b      	lsls	r3, r7, #29
    9180:	d1c6      	bne.n	9110 <__aeabi_dadd+0x10c>
    9182:	4645      	mov	r5, r8
    9184:	0760      	lsls	r0, r4, #29
    9186:	08ff      	lsrs	r7, r7, #3
    9188:	4307      	orrs	r7, r0
    918a:	08e4      	lsrs	r4, r4, #3
    918c:	4b7d      	ldr	r3, [pc, #500]	; (9384 <__aeabi_dadd+0x380>)
    918e:	429e      	cmp	r6, r3
    9190:	d030      	beq.n	91f4 <__aeabi_dadd+0x1f0>
    9192:	0324      	lsls	r4, r4, #12
    9194:	0576      	lsls	r6, r6, #21
    9196:	0b24      	lsrs	r4, r4, #12
    9198:	0d76      	lsrs	r6, r6, #21
    919a:	e7d4      	b.n	9146 <__aeabi_dadd+0x142>
    919c:	1a33      	subs	r3, r6, r0
    919e:	469a      	mov	sl, r3
    91a0:	2b00      	cmp	r3, #0
    91a2:	dd78      	ble.n	9296 <__aeabi_dadd+0x292>
    91a4:	2800      	cmp	r0, #0
    91a6:	d031      	beq.n	920c <__aeabi_dadd+0x208>
    91a8:	4876      	ldr	r0, [pc, #472]	; (9384 <__aeabi_dadd+0x380>)
    91aa:	4286      	cmp	r6, r0
    91ac:	d0ae      	beq.n	910c <__aeabi_dadd+0x108>
    91ae:	2080      	movs	r0, #128	; 0x80
    91b0:	0400      	lsls	r0, r0, #16
    91b2:	4301      	orrs	r1, r0
    91b4:	4653      	mov	r3, sl
    91b6:	2b38      	cmp	r3, #56	; 0x38
    91b8:	dc00      	bgt.n	91bc <__aeabi_dadd+0x1b8>
    91ba:	e0e9      	b.n	9390 <__aeabi_dadd+0x38c>
    91bc:	430a      	orrs	r2, r1
    91be:	1e51      	subs	r1, r2, #1
    91c0:	418a      	sbcs	r2, r1
    91c2:	2100      	movs	r1, #0
    91c4:	19d2      	adds	r2, r2, r7
    91c6:	42ba      	cmp	r2, r7
    91c8:	41bf      	sbcs	r7, r7
    91ca:	1909      	adds	r1, r1, r4
    91cc:	427c      	negs	r4, r7
    91ce:	0017      	movs	r7, r2
    91d0:	190c      	adds	r4, r1, r4
    91d2:	0223      	lsls	r3, r4, #8
    91d4:	d5d3      	bpl.n	917e <__aeabi_dadd+0x17a>
    91d6:	4b6b      	ldr	r3, [pc, #428]	; (9384 <__aeabi_dadd+0x380>)
    91d8:	3601      	adds	r6, #1
    91da:	429e      	cmp	r6, r3
    91dc:	d100      	bne.n	91e0 <__aeabi_dadd+0x1dc>
    91de:	e13a      	b.n	9456 <__aeabi_dadd+0x452>
    91e0:	2001      	movs	r0, #1
    91e2:	4b69      	ldr	r3, [pc, #420]	; (9388 <__aeabi_dadd+0x384>)
    91e4:	401c      	ands	r4, r3
    91e6:	087b      	lsrs	r3, r7, #1
    91e8:	4007      	ands	r7, r0
    91ea:	431f      	orrs	r7, r3
    91ec:	07e0      	lsls	r0, r4, #31
    91ee:	4307      	orrs	r7, r0
    91f0:	0864      	lsrs	r4, r4, #1
    91f2:	e78b      	b.n	910c <__aeabi_dadd+0x108>
    91f4:	0023      	movs	r3, r4
    91f6:	433b      	orrs	r3, r7
    91f8:	d100      	bne.n	91fc <__aeabi_dadd+0x1f8>
    91fa:	e1cb      	b.n	9594 <__aeabi_dadd+0x590>
    91fc:	2280      	movs	r2, #128	; 0x80
    91fe:	0312      	lsls	r2, r2, #12
    9200:	4314      	orrs	r4, r2
    9202:	0324      	lsls	r4, r4, #12
    9204:	0b24      	lsrs	r4, r4, #12
    9206:	e79e      	b.n	9146 <__aeabi_dadd+0x142>
    9208:	002e      	movs	r6, r5
    920a:	e77f      	b.n	910c <__aeabi_dadd+0x108>
    920c:	0008      	movs	r0, r1
    920e:	4310      	orrs	r0, r2
    9210:	d100      	bne.n	9214 <__aeabi_dadd+0x210>
    9212:	e0b4      	b.n	937e <__aeabi_dadd+0x37a>
    9214:	1e58      	subs	r0, r3, #1
    9216:	2800      	cmp	r0, #0
    9218:	d000      	beq.n	921c <__aeabi_dadd+0x218>
    921a:	e0de      	b.n	93da <__aeabi_dadd+0x3d6>
    921c:	18ba      	adds	r2, r7, r2
    921e:	42ba      	cmp	r2, r7
    9220:	419b      	sbcs	r3, r3
    9222:	1864      	adds	r4, r4, r1
    9224:	425b      	negs	r3, r3
    9226:	18e4      	adds	r4, r4, r3
    9228:	0017      	movs	r7, r2
    922a:	2601      	movs	r6, #1
    922c:	0223      	lsls	r3, r4, #8
    922e:	d5a6      	bpl.n	917e <__aeabi_dadd+0x17a>
    9230:	2602      	movs	r6, #2
    9232:	e7d5      	b.n	91e0 <__aeabi_dadd+0x1dc>
    9234:	2d00      	cmp	r5, #0
    9236:	d16e      	bne.n	9316 <__aeabi_dadd+0x312>
    9238:	1c70      	adds	r0, r6, #1
    923a:	0540      	lsls	r0, r0, #21
    923c:	0d40      	lsrs	r0, r0, #21
    923e:	2801      	cmp	r0, #1
    9240:	dc00      	bgt.n	9244 <__aeabi_dadd+0x240>
    9242:	e0f9      	b.n	9438 <__aeabi_dadd+0x434>
    9244:	1ab8      	subs	r0, r7, r2
    9246:	4684      	mov	ip, r0
    9248:	4287      	cmp	r7, r0
    924a:	4180      	sbcs	r0, r0
    924c:	1ae5      	subs	r5, r4, r3
    924e:	4240      	negs	r0, r0
    9250:	1a2d      	subs	r5, r5, r0
    9252:	0228      	lsls	r0, r5, #8
    9254:	d400      	bmi.n	9258 <__aeabi_dadd+0x254>
    9256:	e089      	b.n	936c <__aeabi_dadd+0x368>
    9258:	1bd7      	subs	r7, r2, r7
    925a:	42ba      	cmp	r2, r7
    925c:	4192      	sbcs	r2, r2
    925e:	1b1c      	subs	r4, r3, r4
    9260:	4252      	negs	r2, r2
    9262:	1aa5      	subs	r5, r4, r2
    9264:	46d8      	mov	r8, fp
    9266:	e729      	b.n	90bc <__aeabi_dadd+0xb8>
    9268:	4645      	mov	r5, r8
    926a:	2400      	movs	r4, #0
    926c:	2700      	movs	r7, #0
    926e:	e76a      	b.n	9146 <__aeabi_dadd+0x142>
    9270:	4c45      	ldr	r4, [pc, #276]	; (9388 <__aeabi_dadd+0x384>)
    9272:	1af6      	subs	r6, r6, r3
    9274:	402c      	ands	r4, r5
    9276:	e749      	b.n	910c <__aeabi_dadd+0x108>
    9278:	003d      	movs	r5, r7
    927a:	3828      	subs	r0, #40	; 0x28
    927c:	4085      	lsls	r5, r0
    927e:	2700      	movs	r7, #0
    9280:	e72e      	b.n	90e0 <__aeabi_dadd+0xdc>
    9282:	0038      	movs	r0, r7
    9284:	f001 fd42 	bl	ad0c <__clzsi2>
    9288:	3020      	adds	r0, #32
    928a:	e71d      	b.n	90c8 <__aeabi_dadd+0xc4>
    928c:	430a      	orrs	r2, r1
    928e:	1e51      	subs	r1, r2, #1
    9290:	418a      	sbcs	r2, r1
    9292:	2100      	movs	r1, #0
    9294:	e707      	b.n	90a6 <__aeabi_dadd+0xa2>
    9296:	2b00      	cmp	r3, #0
    9298:	d000      	beq.n	929c <__aeabi_dadd+0x298>
    929a:	e0f3      	b.n	9484 <__aeabi_dadd+0x480>
    929c:	1c70      	adds	r0, r6, #1
    929e:	0543      	lsls	r3, r0, #21
    92a0:	0d5b      	lsrs	r3, r3, #21
    92a2:	2b01      	cmp	r3, #1
    92a4:	dc00      	bgt.n	92a8 <__aeabi_dadd+0x2a4>
    92a6:	e0ad      	b.n	9404 <__aeabi_dadd+0x400>
    92a8:	4b36      	ldr	r3, [pc, #216]	; (9384 <__aeabi_dadd+0x380>)
    92aa:	4298      	cmp	r0, r3
    92ac:	d100      	bne.n	92b0 <__aeabi_dadd+0x2ac>
    92ae:	e0d1      	b.n	9454 <__aeabi_dadd+0x450>
    92b0:	18ba      	adds	r2, r7, r2
    92b2:	42ba      	cmp	r2, r7
    92b4:	41bf      	sbcs	r7, r7
    92b6:	1864      	adds	r4, r4, r1
    92b8:	427f      	negs	r7, r7
    92ba:	19e4      	adds	r4, r4, r7
    92bc:	07e7      	lsls	r7, r4, #31
    92be:	0852      	lsrs	r2, r2, #1
    92c0:	4317      	orrs	r7, r2
    92c2:	0864      	lsrs	r4, r4, #1
    92c4:	0006      	movs	r6, r0
    92c6:	e721      	b.n	910c <__aeabi_dadd+0x108>
    92c8:	482e      	ldr	r0, [pc, #184]	; (9384 <__aeabi_dadd+0x380>)
    92ca:	4285      	cmp	r5, r0
    92cc:	d100      	bne.n	92d0 <__aeabi_dadd+0x2cc>
    92ce:	e093      	b.n	93f8 <__aeabi_dadd+0x3f4>
    92d0:	001d      	movs	r5, r3
    92d2:	e6d0      	b.n	9076 <__aeabi_dadd+0x72>
    92d4:	0029      	movs	r1, r5
    92d6:	3e1f      	subs	r6, #31
    92d8:	40f1      	lsrs	r1, r6
    92da:	2b20      	cmp	r3, #32
    92dc:	d100      	bne.n	92e0 <__aeabi_dadd+0x2dc>
    92de:	e08d      	b.n	93fc <__aeabi_dadd+0x3f8>
    92e0:	2240      	movs	r2, #64	; 0x40
    92e2:	1ad3      	subs	r3, r2, r3
    92e4:	409d      	lsls	r5, r3
    92e6:	432f      	orrs	r7, r5
    92e8:	1e7d      	subs	r5, r7, #1
    92ea:	41af      	sbcs	r7, r5
    92ec:	2400      	movs	r4, #0
    92ee:	430f      	orrs	r7, r1
    92f0:	2600      	movs	r6, #0
    92f2:	e744      	b.n	917e <__aeabi_dadd+0x17a>
    92f4:	002b      	movs	r3, r5
    92f6:	0008      	movs	r0, r1
    92f8:	3b20      	subs	r3, #32
    92fa:	40d8      	lsrs	r0, r3
    92fc:	0003      	movs	r3, r0
    92fe:	2d20      	cmp	r5, #32
    9300:	d100      	bne.n	9304 <__aeabi_dadd+0x300>
    9302:	e07d      	b.n	9400 <__aeabi_dadd+0x3fc>
    9304:	2040      	movs	r0, #64	; 0x40
    9306:	1b45      	subs	r5, r0, r5
    9308:	40a9      	lsls	r1, r5
    930a:	430a      	orrs	r2, r1
    930c:	1e51      	subs	r1, r2, #1
    930e:	418a      	sbcs	r2, r1
    9310:	2100      	movs	r1, #0
    9312:	431a      	orrs	r2, r3
    9314:	e6c7      	b.n	90a6 <__aeabi_dadd+0xa2>
    9316:	2e00      	cmp	r6, #0
    9318:	d050      	beq.n	93bc <__aeabi_dadd+0x3b8>
    931a:	4e1a      	ldr	r6, [pc, #104]	; (9384 <__aeabi_dadd+0x380>)
    931c:	42b0      	cmp	r0, r6
    931e:	d057      	beq.n	93d0 <__aeabi_dadd+0x3cc>
    9320:	2680      	movs	r6, #128	; 0x80
    9322:	426b      	negs	r3, r5
    9324:	4699      	mov	r9, r3
    9326:	0436      	lsls	r6, r6, #16
    9328:	4334      	orrs	r4, r6
    932a:	464b      	mov	r3, r9
    932c:	2b38      	cmp	r3, #56	; 0x38
    932e:	dd00      	ble.n	9332 <__aeabi_dadd+0x32e>
    9330:	e0d6      	b.n	94e0 <__aeabi_dadd+0x4dc>
    9332:	2b1f      	cmp	r3, #31
    9334:	dd00      	ble.n	9338 <__aeabi_dadd+0x334>
    9336:	e135      	b.n	95a4 <__aeabi_dadd+0x5a0>
    9338:	2620      	movs	r6, #32
    933a:	1af5      	subs	r5, r6, r3
    933c:	0026      	movs	r6, r4
    933e:	40ae      	lsls	r6, r5
    9340:	46b2      	mov	sl, r6
    9342:	003e      	movs	r6, r7
    9344:	40de      	lsrs	r6, r3
    9346:	46ac      	mov	ip, r5
    9348:	0035      	movs	r5, r6
    934a:	4656      	mov	r6, sl
    934c:	432e      	orrs	r6, r5
    934e:	4665      	mov	r5, ip
    9350:	40af      	lsls	r7, r5
    9352:	1e7d      	subs	r5, r7, #1
    9354:	41af      	sbcs	r7, r5
    9356:	40dc      	lsrs	r4, r3
    9358:	4337      	orrs	r7, r6
    935a:	1bd7      	subs	r7, r2, r7
    935c:	42ba      	cmp	r2, r7
    935e:	4192      	sbcs	r2, r2
    9360:	1b0c      	subs	r4, r1, r4
    9362:	4252      	negs	r2, r2
    9364:	1aa4      	subs	r4, r4, r2
    9366:	0006      	movs	r6, r0
    9368:	46d8      	mov	r8, fp
    936a:	e6a3      	b.n	90b4 <__aeabi_dadd+0xb0>
    936c:	4664      	mov	r4, ip
    936e:	4667      	mov	r7, ip
    9370:	432c      	orrs	r4, r5
    9372:	d000      	beq.n	9376 <__aeabi_dadd+0x372>
    9374:	e6a2      	b.n	90bc <__aeabi_dadd+0xb8>
    9376:	2500      	movs	r5, #0
    9378:	2600      	movs	r6, #0
    937a:	2700      	movs	r7, #0
    937c:	e706      	b.n	918c <__aeabi_dadd+0x188>
    937e:	001e      	movs	r6, r3
    9380:	e6c4      	b.n	910c <__aeabi_dadd+0x108>
    9382:	46c0      	nop			; (mov r8, r8)
    9384:	000007ff 	.word	0x000007ff
    9388:	ff7fffff 	.word	0xff7fffff
    938c:	800fffff 	.word	0x800fffff
    9390:	2b1f      	cmp	r3, #31
    9392:	dc63      	bgt.n	945c <__aeabi_dadd+0x458>
    9394:	2020      	movs	r0, #32
    9396:	1ac3      	subs	r3, r0, r3
    9398:	0008      	movs	r0, r1
    939a:	4098      	lsls	r0, r3
    939c:	469c      	mov	ip, r3
    939e:	4683      	mov	fp, r0
    93a0:	4653      	mov	r3, sl
    93a2:	0010      	movs	r0, r2
    93a4:	40d8      	lsrs	r0, r3
    93a6:	0003      	movs	r3, r0
    93a8:	4658      	mov	r0, fp
    93aa:	4318      	orrs	r0, r3
    93ac:	4663      	mov	r3, ip
    93ae:	409a      	lsls	r2, r3
    93b0:	1e53      	subs	r3, r2, #1
    93b2:	419a      	sbcs	r2, r3
    93b4:	4653      	mov	r3, sl
    93b6:	4302      	orrs	r2, r0
    93b8:	40d9      	lsrs	r1, r3
    93ba:	e703      	b.n	91c4 <__aeabi_dadd+0x1c0>
    93bc:	0026      	movs	r6, r4
    93be:	433e      	orrs	r6, r7
    93c0:	d006      	beq.n	93d0 <__aeabi_dadd+0x3cc>
    93c2:	43eb      	mvns	r3, r5
    93c4:	4699      	mov	r9, r3
    93c6:	2b00      	cmp	r3, #0
    93c8:	d0c7      	beq.n	935a <__aeabi_dadd+0x356>
    93ca:	4e94      	ldr	r6, [pc, #592]	; (961c <__aeabi_dadd+0x618>)
    93cc:	42b0      	cmp	r0, r6
    93ce:	d1ac      	bne.n	932a <__aeabi_dadd+0x326>
    93d0:	000c      	movs	r4, r1
    93d2:	0017      	movs	r7, r2
    93d4:	0006      	movs	r6, r0
    93d6:	46d8      	mov	r8, fp
    93d8:	e698      	b.n	910c <__aeabi_dadd+0x108>
    93da:	4b90      	ldr	r3, [pc, #576]	; (961c <__aeabi_dadd+0x618>)
    93dc:	459a      	cmp	sl, r3
    93de:	d00b      	beq.n	93f8 <__aeabi_dadd+0x3f4>
    93e0:	4682      	mov	sl, r0
    93e2:	e6e7      	b.n	91b4 <__aeabi_dadd+0x1b0>
    93e4:	2800      	cmp	r0, #0
    93e6:	d000      	beq.n	93ea <__aeabi_dadd+0x3e6>
    93e8:	e09e      	b.n	9528 <__aeabi_dadd+0x524>
    93ea:	0018      	movs	r0, r3
    93ec:	4310      	orrs	r0, r2
    93ee:	d100      	bne.n	93f2 <__aeabi_dadd+0x3ee>
    93f0:	e0e9      	b.n	95c6 <__aeabi_dadd+0x5c2>
    93f2:	001c      	movs	r4, r3
    93f4:	0017      	movs	r7, r2
    93f6:	46d8      	mov	r8, fp
    93f8:	4e88      	ldr	r6, [pc, #544]	; (961c <__aeabi_dadd+0x618>)
    93fa:	e687      	b.n	910c <__aeabi_dadd+0x108>
    93fc:	2500      	movs	r5, #0
    93fe:	e772      	b.n	92e6 <__aeabi_dadd+0x2e2>
    9400:	2100      	movs	r1, #0
    9402:	e782      	b.n	930a <__aeabi_dadd+0x306>
    9404:	0023      	movs	r3, r4
    9406:	433b      	orrs	r3, r7
    9408:	2e00      	cmp	r6, #0
    940a:	d000      	beq.n	940e <__aeabi_dadd+0x40a>
    940c:	e0ab      	b.n	9566 <__aeabi_dadd+0x562>
    940e:	2b00      	cmp	r3, #0
    9410:	d100      	bne.n	9414 <__aeabi_dadd+0x410>
    9412:	e0e7      	b.n	95e4 <__aeabi_dadd+0x5e0>
    9414:	000b      	movs	r3, r1
    9416:	4313      	orrs	r3, r2
    9418:	d100      	bne.n	941c <__aeabi_dadd+0x418>
    941a:	e677      	b.n	910c <__aeabi_dadd+0x108>
    941c:	18ba      	adds	r2, r7, r2
    941e:	42ba      	cmp	r2, r7
    9420:	41bf      	sbcs	r7, r7
    9422:	1864      	adds	r4, r4, r1
    9424:	427f      	negs	r7, r7
    9426:	19e4      	adds	r4, r4, r7
    9428:	0223      	lsls	r3, r4, #8
    942a:	d400      	bmi.n	942e <__aeabi_dadd+0x42a>
    942c:	e0f2      	b.n	9614 <__aeabi_dadd+0x610>
    942e:	4b7c      	ldr	r3, [pc, #496]	; (9620 <__aeabi_dadd+0x61c>)
    9430:	0017      	movs	r7, r2
    9432:	401c      	ands	r4, r3
    9434:	0006      	movs	r6, r0
    9436:	e669      	b.n	910c <__aeabi_dadd+0x108>
    9438:	0020      	movs	r0, r4
    943a:	4338      	orrs	r0, r7
    943c:	2e00      	cmp	r6, #0
    943e:	d1d1      	bne.n	93e4 <__aeabi_dadd+0x3e0>
    9440:	2800      	cmp	r0, #0
    9442:	d15b      	bne.n	94fc <__aeabi_dadd+0x4f8>
    9444:	001c      	movs	r4, r3
    9446:	4314      	orrs	r4, r2
    9448:	d100      	bne.n	944c <__aeabi_dadd+0x448>
    944a:	e0a8      	b.n	959e <__aeabi_dadd+0x59a>
    944c:	001c      	movs	r4, r3
    944e:	0017      	movs	r7, r2
    9450:	46d8      	mov	r8, fp
    9452:	e65b      	b.n	910c <__aeabi_dadd+0x108>
    9454:	0006      	movs	r6, r0
    9456:	2400      	movs	r4, #0
    9458:	2700      	movs	r7, #0
    945a:	e697      	b.n	918c <__aeabi_dadd+0x188>
    945c:	4650      	mov	r0, sl
    945e:	000b      	movs	r3, r1
    9460:	3820      	subs	r0, #32
    9462:	40c3      	lsrs	r3, r0
    9464:	4699      	mov	r9, r3
    9466:	4653      	mov	r3, sl
    9468:	2b20      	cmp	r3, #32
    946a:	d100      	bne.n	946e <__aeabi_dadd+0x46a>
    946c:	e095      	b.n	959a <__aeabi_dadd+0x596>
    946e:	2340      	movs	r3, #64	; 0x40
    9470:	4650      	mov	r0, sl
    9472:	1a1b      	subs	r3, r3, r0
    9474:	4099      	lsls	r1, r3
    9476:	430a      	orrs	r2, r1
    9478:	1e51      	subs	r1, r2, #1
    947a:	418a      	sbcs	r2, r1
    947c:	464b      	mov	r3, r9
    947e:	2100      	movs	r1, #0
    9480:	431a      	orrs	r2, r3
    9482:	e69f      	b.n	91c4 <__aeabi_dadd+0x1c0>
    9484:	2e00      	cmp	r6, #0
    9486:	d130      	bne.n	94ea <__aeabi_dadd+0x4e6>
    9488:	0026      	movs	r6, r4
    948a:	433e      	orrs	r6, r7
    948c:	d067      	beq.n	955e <__aeabi_dadd+0x55a>
    948e:	43db      	mvns	r3, r3
    9490:	469a      	mov	sl, r3
    9492:	2b00      	cmp	r3, #0
    9494:	d01c      	beq.n	94d0 <__aeabi_dadd+0x4cc>
    9496:	4e61      	ldr	r6, [pc, #388]	; (961c <__aeabi_dadd+0x618>)
    9498:	42b0      	cmp	r0, r6
    949a:	d060      	beq.n	955e <__aeabi_dadd+0x55a>
    949c:	4653      	mov	r3, sl
    949e:	2b38      	cmp	r3, #56	; 0x38
    94a0:	dd00      	ble.n	94a4 <__aeabi_dadd+0x4a0>
    94a2:	e096      	b.n	95d2 <__aeabi_dadd+0x5ce>
    94a4:	2b1f      	cmp	r3, #31
    94a6:	dd00      	ble.n	94aa <__aeabi_dadd+0x4a6>
    94a8:	e09f      	b.n	95ea <__aeabi_dadd+0x5e6>
    94aa:	2620      	movs	r6, #32
    94ac:	1af3      	subs	r3, r6, r3
    94ae:	0026      	movs	r6, r4
    94b0:	409e      	lsls	r6, r3
    94b2:	469c      	mov	ip, r3
    94b4:	46b3      	mov	fp, r6
    94b6:	4653      	mov	r3, sl
    94b8:	003e      	movs	r6, r7
    94ba:	40de      	lsrs	r6, r3
    94bc:	0033      	movs	r3, r6
    94be:	465e      	mov	r6, fp
    94c0:	431e      	orrs	r6, r3
    94c2:	4663      	mov	r3, ip
    94c4:	409f      	lsls	r7, r3
    94c6:	1e7b      	subs	r3, r7, #1
    94c8:	419f      	sbcs	r7, r3
    94ca:	4653      	mov	r3, sl
    94cc:	40dc      	lsrs	r4, r3
    94ce:	4337      	orrs	r7, r6
    94d0:	18bf      	adds	r7, r7, r2
    94d2:	4297      	cmp	r7, r2
    94d4:	4192      	sbcs	r2, r2
    94d6:	1864      	adds	r4, r4, r1
    94d8:	4252      	negs	r2, r2
    94da:	18a4      	adds	r4, r4, r2
    94dc:	0006      	movs	r6, r0
    94de:	e678      	b.n	91d2 <__aeabi_dadd+0x1ce>
    94e0:	4327      	orrs	r7, r4
    94e2:	1e7c      	subs	r4, r7, #1
    94e4:	41a7      	sbcs	r7, r4
    94e6:	2400      	movs	r4, #0
    94e8:	e737      	b.n	935a <__aeabi_dadd+0x356>
    94ea:	4e4c      	ldr	r6, [pc, #304]	; (961c <__aeabi_dadd+0x618>)
    94ec:	42b0      	cmp	r0, r6
    94ee:	d036      	beq.n	955e <__aeabi_dadd+0x55a>
    94f0:	2680      	movs	r6, #128	; 0x80
    94f2:	425b      	negs	r3, r3
    94f4:	0436      	lsls	r6, r6, #16
    94f6:	469a      	mov	sl, r3
    94f8:	4334      	orrs	r4, r6
    94fa:	e7cf      	b.n	949c <__aeabi_dadd+0x498>
    94fc:	0018      	movs	r0, r3
    94fe:	4310      	orrs	r0, r2
    9500:	d100      	bne.n	9504 <__aeabi_dadd+0x500>
    9502:	e603      	b.n	910c <__aeabi_dadd+0x108>
    9504:	1ab8      	subs	r0, r7, r2
    9506:	4684      	mov	ip, r0
    9508:	4567      	cmp	r7, ip
    950a:	41ad      	sbcs	r5, r5
    950c:	1ae0      	subs	r0, r4, r3
    950e:	426d      	negs	r5, r5
    9510:	1b40      	subs	r0, r0, r5
    9512:	0205      	lsls	r5, r0, #8
    9514:	d400      	bmi.n	9518 <__aeabi_dadd+0x514>
    9516:	e62c      	b.n	9172 <__aeabi_dadd+0x16e>
    9518:	1bd7      	subs	r7, r2, r7
    951a:	42ba      	cmp	r2, r7
    951c:	4192      	sbcs	r2, r2
    951e:	1b1c      	subs	r4, r3, r4
    9520:	4252      	negs	r2, r2
    9522:	1aa4      	subs	r4, r4, r2
    9524:	46d8      	mov	r8, fp
    9526:	e5f1      	b.n	910c <__aeabi_dadd+0x108>
    9528:	0018      	movs	r0, r3
    952a:	4310      	orrs	r0, r2
    952c:	d100      	bne.n	9530 <__aeabi_dadd+0x52c>
    952e:	e763      	b.n	93f8 <__aeabi_dadd+0x3f4>
    9530:	08f8      	lsrs	r0, r7, #3
    9532:	0767      	lsls	r7, r4, #29
    9534:	4307      	orrs	r7, r0
    9536:	2080      	movs	r0, #128	; 0x80
    9538:	08e4      	lsrs	r4, r4, #3
    953a:	0300      	lsls	r0, r0, #12
    953c:	4204      	tst	r4, r0
    953e:	d008      	beq.n	9552 <__aeabi_dadd+0x54e>
    9540:	08dd      	lsrs	r5, r3, #3
    9542:	4205      	tst	r5, r0
    9544:	d105      	bne.n	9552 <__aeabi_dadd+0x54e>
    9546:	08d2      	lsrs	r2, r2, #3
    9548:	0759      	lsls	r1, r3, #29
    954a:	4311      	orrs	r1, r2
    954c:	000f      	movs	r7, r1
    954e:	002c      	movs	r4, r5
    9550:	46d8      	mov	r8, fp
    9552:	0f7b      	lsrs	r3, r7, #29
    9554:	00e4      	lsls	r4, r4, #3
    9556:	431c      	orrs	r4, r3
    9558:	00ff      	lsls	r7, r7, #3
    955a:	4e30      	ldr	r6, [pc, #192]	; (961c <__aeabi_dadd+0x618>)
    955c:	e5d6      	b.n	910c <__aeabi_dadd+0x108>
    955e:	000c      	movs	r4, r1
    9560:	0017      	movs	r7, r2
    9562:	0006      	movs	r6, r0
    9564:	e5d2      	b.n	910c <__aeabi_dadd+0x108>
    9566:	2b00      	cmp	r3, #0
    9568:	d038      	beq.n	95dc <__aeabi_dadd+0x5d8>
    956a:	000b      	movs	r3, r1
    956c:	4313      	orrs	r3, r2
    956e:	d100      	bne.n	9572 <__aeabi_dadd+0x56e>
    9570:	e742      	b.n	93f8 <__aeabi_dadd+0x3f4>
    9572:	08f8      	lsrs	r0, r7, #3
    9574:	0767      	lsls	r7, r4, #29
    9576:	4307      	orrs	r7, r0
    9578:	2080      	movs	r0, #128	; 0x80
    957a:	08e4      	lsrs	r4, r4, #3
    957c:	0300      	lsls	r0, r0, #12
    957e:	4204      	tst	r4, r0
    9580:	d0e7      	beq.n	9552 <__aeabi_dadd+0x54e>
    9582:	08cb      	lsrs	r3, r1, #3
    9584:	4203      	tst	r3, r0
    9586:	d1e4      	bne.n	9552 <__aeabi_dadd+0x54e>
    9588:	08d2      	lsrs	r2, r2, #3
    958a:	0749      	lsls	r1, r1, #29
    958c:	4311      	orrs	r1, r2
    958e:	000f      	movs	r7, r1
    9590:	001c      	movs	r4, r3
    9592:	e7de      	b.n	9552 <__aeabi_dadd+0x54e>
    9594:	2700      	movs	r7, #0
    9596:	2400      	movs	r4, #0
    9598:	e5d5      	b.n	9146 <__aeabi_dadd+0x142>
    959a:	2100      	movs	r1, #0
    959c:	e76b      	b.n	9476 <__aeabi_dadd+0x472>
    959e:	2500      	movs	r5, #0
    95a0:	2700      	movs	r7, #0
    95a2:	e5f3      	b.n	918c <__aeabi_dadd+0x188>
    95a4:	464e      	mov	r6, r9
    95a6:	0025      	movs	r5, r4
    95a8:	3e20      	subs	r6, #32
    95aa:	40f5      	lsrs	r5, r6
    95ac:	464b      	mov	r3, r9
    95ae:	002e      	movs	r6, r5
    95b0:	2b20      	cmp	r3, #32
    95b2:	d02d      	beq.n	9610 <__aeabi_dadd+0x60c>
    95b4:	2540      	movs	r5, #64	; 0x40
    95b6:	1aed      	subs	r5, r5, r3
    95b8:	40ac      	lsls	r4, r5
    95ba:	4327      	orrs	r7, r4
    95bc:	1e7c      	subs	r4, r7, #1
    95be:	41a7      	sbcs	r7, r4
    95c0:	2400      	movs	r4, #0
    95c2:	4337      	orrs	r7, r6
    95c4:	e6c9      	b.n	935a <__aeabi_dadd+0x356>
    95c6:	2480      	movs	r4, #128	; 0x80
    95c8:	2500      	movs	r5, #0
    95ca:	0324      	lsls	r4, r4, #12
    95cc:	4e13      	ldr	r6, [pc, #76]	; (961c <__aeabi_dadd+0x618>)
    95ce:	2700      	movs	r7, #0
    95d0:	e5dc      	b.n	918c <__aeabi_dadd+0x188>
    95d2:	4327      	orrs	r7, r4
    95d4:	1e7c      	subs	r4, r7, #1
    95d6:	41a7      	sbcs	r7, r4
    95d8:	2400      	movs	r4, #0
    95da:	e779      	b.n	94d0 <__aeabi_dadd+0x4cc>
    95dc:	000c      	movs	r4, r1
    95de:	0017      	movs	r7, r2
    95e0:	4e0e      	ldr	r6, [pc, #56]	; (961c <__aeabi_dadd+0x618>)
    95e2:	e593      	b.n	910c <__aeabi_dadd+0x108>
    95e4:	000c      	movs	r4, r1
    95e6:	0017      	movs	r7, r2
    95e8:	e590      	b.n	910c <__aeabi_dadd+0x108>
    95ea:	4656      	mov	r6, sl
    95ec:	0023      	movs	r3, r4
    95ee:	3e20      	subs	r6, #32
    95f0:	40f3      	lsrs	r3, r6
    95f2:	4699      	mov	r9, r3
    95f4:	4653      	mov	r3, sl
    95f6:	2b20      	cmp	r3, #32
    95f8:	d00e      	beq.n	9618 <__aeabi_dadd+0x614>
    95fa:	2340      	movs	r3, #64	; 0x40
    95fc:	4656      	mov	r6, sl
    95fe:	1b9b      	subs	r3, r3, r6
    9600:	409c      	lsls	r4, r3
    9602:	4327      	orrs	r7, r4
    9604:	1e7c      	subs	r4, r7, #1
    9606:	41a7      	sbcs	r7, r4
    9608:	464b      	mov	r3, r9
    960a:	2400      	movs	r4, #0
    960c:	431f      	orrs	r7, r3
    960e:	e75f      	b.n	94d0 <__aeabi_dadd+0x4cc>
    9610:	2400      	movs	r4, #0
    9612:	e7d2      	b.n	95ba <__aeabi_dadd+0x5b6>
    9614:	0017      	movs	r7, r2
    9616:	e5b2      	b.n	917e <__aeabi_dadd+0x17a>
    9618:	2400      	movs	r4, #0
    961a:	e7f2      	b.n	9602 <__aeabi_dadd+0x5fe>
    961c:	000007ff 	.word	0x000007ff
    9620:	ff7fffff 	.word	0xff7fffff

00009624 <__aeabi_ddiv>:
    9624:	b5f0      	push	{r4, r5, r6, r7, lr}
    9626:	4657      	mov	r7, sl
    9628:	4645      	mov	r5, r8
    962a:	46de      	mov	lr, fp
    962c:	464e      	mov	r6, r9
    962e:	b5e0      	push	{r5, r6, r7, lr}
    9630:	004c      	lsls	r4, r1, #1
    9632:	030e      	lsls	r6, r1, #12
    9634:	b087      	sub	sp, #28
    9636:	4683      	mov	fp, r0
    9638:	4692      	mov	sl, r2
    963a:	001d      	movs	r5, r3
    963c:	4680      	mov	r8, r0
    963e:	0b36      	lsrs	r6, r6, #12
    9640:	0d64      	lsrs	r4, r4, #21
    9642:	0fcf      	lsrs	r7, r1, #31
    9644:	2c00      	cmp	r4, #0
    9646:	d04f      	beq.n	96e8 <__aeabi_ddiv+0xc4>
    9648:	4b6f      	ldr	r3, [pc, #444]	; (9808 <__aeabi_ddiv+0x1e4>)
    964a:	429c      	cmp	r4, r3
    964c:	d035      	beq.n	96ba <__aeabi_ddiv+0x96>
    964e:	2380      	movs	r3, #128	; 0x80
    9650:	0f42      	lsrs	r2, r0, #29
    9652:	041b      	lsls	r3, r3, #16
    9654:	00f6      	lsls	r6, r6, #3
    9656:	4313      	orrs	r3, r2
    9658:	4333      	orrs	r3, r6
    965a:	4699      	mov	r9, r3
    965c:	00c3      	lsls	r3, r0, #3
    965e:	4698      	mov	r8, r3
    9660:	4b6a      	ldr	r3, [pc, #424]	; (980c <__aeabi_ddiv+0x1e8>)
    9662:	2600      	movs	r6, #0
    9664:	469c      	mov	ip, r3
    9666:	2300      	movs	r3, #0
    9668:	4464      	add	r4, ip
    966a:	9303      	str	r3, [sp, #12]
    966c:	032b      	lsls	r3, r5, #12
    966e:	0b1b      	lsrs	r3, r3, #12
    9670:	469b      	mov	fp, r3
    9672:	006b      	lsls	r3, r5, #1
    9674:	0fed      	lsrs	r5, r5, #31
    9676:	4650      	mov	r0, sl
    9678:	0d5b      	lsrs	r3, r3, #21
    967a:	9501      	str	r5, [sp, #4]
    967c:	d05e      	beq.n	973c <__aeabi_ddiv+0x118>
    967e:	4a62      	ldr	r2, [pc, #392]	; (9808 <__aeabi_ddiv+0x1e4>)
    9680:	4293      	cmp	r3, r2
    9682:	d053      	beq.n	972c <__aeabi_ddiv+0x108>
    9684:	465a      	mov	r2, fp
    9686:	00d1      	lsls	r1, r2, #3
    9688:	2280      	movs	r2, #128	; 0x80
    968a:	0f40      	lsrs	r0, r0, #29
    968c:	0412      	lsls	r2, r2, #16
    968e:	4302      	orrs	r2, r0
    9690:	430a      	orrs	r2, r1
    9692:	4693      	mov	fp, r2
    9694:	4652      	mov	r2, sl
    9696:	00d1      	lsls	r1, r2, #3
    9698:	4a5c      	ldr	r2, [pc, #368]	; (980c <__aeabi_ddiv+0x1e8>)
    969a:	4694      	mov	ip, r2
    969c:	2200      	movs	r2, #0
    969e:	4463      	add	r3, ip
    96a0:	0038      	movs	r0, r7
    96a2:	4068      	eors	r0, r5
    96a4:	4684      	mov	ip, r0
    96a6:	9002      	str	r0, [sp, #8]
    96a8:	1ae4      	subs	r4, r4, r3
    96aa:	4316      	orrs	r6, r2
    96ac:	2e0f      	cmp	r6, #15
    96ae:	d900      	bls.n	96b2 <__aeabi_ddiv+0x8e>
    96b0:	e0b4      	b.n	981c <__aeabi_ddiv+0x1f8>
    96b2:	4b57      	ldr	r3, [pc, #348]	; (9810 <__aeabi_ddiv+0x1ec>)
    96b4:	00b6      	lsls	r6, r6, #2
    96b6:	599b      	ldr	r3, [r3, r6]
    96b8:	469f      	mov	pc, r3
    96ba:	0003      	movs	r3, r0
    96bc:	4333      	orrs	r3, r6
    96be:	4699      	mov	r9, r3
    96c0:	d16c      	bne.n	979c <__aeabi_ddiv+0x178>
    96c2:	2300      	movs	r3, #0
    96c4:	4698      	mov	r8, r3
    96c6:	3302      	adds	r3, #2
    96c8:	2608      	movs	r6, #8
    96ca:	9303      	str	r3, [sp, #12]
    96cc:	e7ce      	b.n	966c <__aeabi_ddiv+0x48>
    96ce:	46cb      	mov	fp, r9
    96d0:	4641      	mov	r1, r8
    96d2:	9a03      	ldr	r2, [sp, #12]
    96d4:	9701      	str	r7, [sp, #4]
    96d6:	2a02      	cmp	r2, #2
    96d8:	d165      	bne.n	97a6 <__aeabi_ddiv+0x182>
    96da:	9b01      	ldr	r3, [sp, #4]
    96dc:	4c4a      	ldr	r4, [pc, #296]	; (9808 <__aeabi_ddiv+0x1e4>)
    96de:	469c      	mov	ip, r3
    96e0:	2300      	movs	r3, #0
    96e2:	2200      	movs	r2, #0
    96e4:	4698      	mov	r8, r3
    96e6:	e06b      	b.n	97c0 <__aeabi_ddiv+0x19c>
    96e8:	0003      	movs	r3, r0
    96ea:	4333      	orrs	r3, r6
    96ec:	4699      	mov	r9, r3
    96ee:	d04e      	beq.n	978e <__aeabi_ddiv+0x16a>
    96f0:	2e00      	cmp	r6, #0
    96f2:	d100      	bne.n	96f6 <__aeabi_ddiv+0xd2>
    96f4:	e1bc      	b.n	9a70 <__aeabi_ddiv+0x44c>
    96f6:	0030      	movs	r0, r6
    96f8:	f001 fb08 	bl	ad0c <__clzsi2>
    96fc:	0003      	movs	r3, r0
    96fe:	3b0b      	subs	r3, #11
    9700:	2b1c      	cmp	r3, #28
    9702:	dd00      	ble.n	9706 <__aeabi_ddiv+0xe2>
    9704:	e1ac      	b.n	9a60 <__aeabi_ddiv+0x43c>
    9706:	221d      	movs	r2, #29
    9708:	1ad3      	subs	r3, r2, r3
    970a:	465a      	mov	r2, fp
    970c:	0001      	movs	r1, r0
    970e:	40da      	lsrs	r2, r3
    9710:	3908      	subs	r1, #8
    9712:	408e      	lsls	r6, r1
    9714:	0013      	movs	r3, r2
    9716:	4333      	orrs	r3, r6
    9718:	4699      	mov	r9, r3
    971a:	465b      	mov	r3, fp
    971c:	408b      	lsls	r3, r1
    971e:	4698      	mov	r8, r3
    9720:	2300      	movs	r3, #0
    9722:	4c3c      	ldr	r4, [pc, #240]	; (9814 <__aeabi_ddiv+0x1f0>)
    9724:	2600      	movs	r6, #0
    9726:	1a24      	subs	r4, r4, r0
    9728:	9303      	str	r3, [sp, #12]
    972a:	e79f      	b.n	966c <__aeabi_ddiv+0x48>
    972c:	4651      	mov	r1, sl
    972e:	465a      	mov	r2, fp
    9730:	4311      	orrs	r1, r2
    9732:	d129      	bne.n	9788 <__aeabi_ddiv+0x164>
    9734:	2200      	movs	r2, #0
    9736:	4693      	mov	fp, r2
    9738:	3202      	adds	r2, #2
    973a:	e7b1      	b.n	96a0 <__aeabi_ddiv+0x7c>
    973c:	4659      	mov	r1, fp
    973e:	4301      	orrs	r1, r0
    9740:	d01e      	beq.n	9780 <__aeabi_ddiv+0x15c>
    9742:	465b      	mov	r3, fp
    9744:	2b00      	cmp	r3, #0
    9746:	d100      	bne.n	974a <__aeabi_ddiv+0x126>
    9748:	e19e      	b.n	9a88 <__aeabi_ddiv+0x464>
    974a:	4658      	mov	r0, fp
    974c:	f001 fade 	bl	ad0c <__clzsi2>
    9750:	0003      	movs	r3, r0
    9752:	3b0b      	subs	r3, #11
    9754:	2b1c      	cmp	r3, #28
    9756:	dd00      	ble.n	975a <__aeabi_ddiv+0x136>
    9758:	e18f      	b.n	9a7a <__aeabi_ddiv+0x456>
    975a:	0002      	movs	r2, r0
    975c:	4659      	mov	r1, fp
    975e:	3a08      	subs	r2, #8
    9760:	4091      	lsls	r1, r2
    9762:	468b      	mov	fp, r1
    9764:	211d      	movs	r1, #29
    9766:	1acb      	subs	r3, r1, r3
    9768:	4651      	mov	r1, sl
    976a:	40d9      	lsrs	r1, r3
    976c:	000b      	movs	r3, r1
    976e:	4659      	mov	r1, fp
    9770:	430b      	orrs	r3, r1
    9772:	4651      	mov	r1, sl
    9774:	469b      	mov	fp, r3
    9776:	4091      	lsls	r1, r2
    9778:	4b26      	ldr	r3, [pc, #152]	; (9814 <__aeabi_ddiv+0x1f0>)
    977a:	2200      	movs	r2, #0
    977c:	1a1b      	subs	r3, r3, r0
    977e:	e78f      	b.n	96a0 <__aeabi_ddiv+0x7c>
    9780:	2300      	movs	r3, #0
    9782:	2201      	movs	r2, #1
    9784:	469b      	mov	fp, r3
    9786:	e78b      	b.n	96a0 <__aeabi_ddiv+0x7c>
    9788:	4651      	mov	r1, sl
    978a:	2203      	movs	r2, #3
    978c:	e788      	b.n	96a0 <__aeabi_ddiv+0x7c>
    978e:	2300      	movs	r3, #0
    9790:	4698      	mov	r8, r3
    9792:	3301      	adds	r3, #1
    9794:	2604      	movs	r6, #4
    9796:	2400      	movs	r4, #0
    9798:	9303      	str	r3, [sp, #12]
    979a:	e767      	b.n	966c <__aeabi_ddiv+0x48>
    979c:	2303      	movs	r3, #3
    979e:	46b1      	mov	r9, r6
    97a0:	9303      	str	r3, [sp, #12]
    97a2:	260c      	movs	r6, #12
    97a4:	e762      	b.n	966c <__aeabi_ddiv+0x48>
    97a6:	2a03      	cmp	r2, #3
    97a8:	d100      	bne.n	97ac <__aeabi_ddiv+0x188>
    97aa:	e25c      	b.n	9c66 <__aeabi_ddiv+0x642>
    97ac:	9b01      	ldr	r3, [sp, #4]
    97ae:	2a01      	cmp	r2, #1
    97b0:	d000      	beq.n	97b4 <__aeabi_ddiv+0x190>
    97b2:	e1e4      	b.n	9b7e <__aeabi_ddiv+0x55a>
    97b4:	4013      	ands	r3, r2
    97b6:	469c      	mov	ip, r3
    97b8:	2300      	movs	r3, #0
    97ba:	2400      	movs	r4, #0
    97bc:	2200      	movs	r2, #0
    97be:	4698      	mov	r8, r3
    97c0:	2100      	movs	r1, #0
    97c2:	0312      	lsls	r2, r2, #12
    97c4:	0b13      	lsrs	r3, r2, #12
    97c6:	0d0a      	lsrs	r2, r1, #20
    97c8:	0512      	lsls	r2, r2, #20
    97ca:	431a      	orrs	r2, r3
    97cc:	0523      	lsls	r3, r4, #20
    97ce:	4c12      	ldr	r4, [pc, #72]	; (9818 <__aeabi_ddiv+0x1f4>)
    97d0:	4640      	mov	r0, r8
    97d2:	4022      	ands	r2, r4
    97d4:	4313      	orrs	r3, r2
    97d6:	4662      	mov	r2, ip
    97d8:	005b      	lsls	r3, r3, #1
    97da:	07d2      	lsls	r2, r2, #31
    97dc:	085b      	lsrs	r3, r3, #1
    97de:	4313      	orrs	r3, r2
    97e0:	0019      	movs	r1, r3
    97e2:	b007      	add	sp, #28
    97e4:	bc3c      	pop	{r2, r3, r4, r5}
    97e6:	4690      	mov	r8, r2
    97e8:	4699      	mov	r9, r3
    97ea:	46a2      	mov	sl, r4
    97ec:	46ab      	mov	fp, r5
    97ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97f0:	2300      	movs	r3, #0
    97f2:	2280      	movs	r2, #128	; 0x80
    97f4:	469c      	mov	ip, r3
    97f6:	0312      	lsls	r2, r2, #12
    97f8:	4698      	mov	r8, r3
    97fa:	4c03      	ldr	r4, [pc, #12]	; (9808 <__aeabi_ddiv+0x1e4>)
    97fc:	e7e0      	b.n	97c0 <__aeabi_ddiv+0x19c>
    97fe:	2300      	movs	r3, #0
    9800:	4c01      	ldr	r4, [pc, #4]	; (9808 <__aeabi_ddiv+0x1e4>)
    9802:	2200      	movs	r2, #0
    9804:	4698      	mov	r8, r3
    9806:	e7db      	b.n	97c0 <__aeabi_ddiv+0x19c>
    9808:	000007ff 	.word	0x000007ff
    980c:	fffffc01 	.word	0xfffffc01
    9810:	0000b798 	.word	0x0000b798
    9814:	fffffc0d 	.word	0xfffffc0d
    9818:	800fffff 	.word	0x800fffff
    981c:	45d9      	cmp	r9, fp
    981e:	d900      	bls.n	9822 <__aeabi_ddiv+0x1fe>
    9820:	e139      	b.n	9a96 <__aeabi_ddiv+0x472>
    9822:	d100      	bne.n	9826 <__aeabi_ddiv+0x202>
    9824:	e134      	b.n	9a90 <__aeabi_ddiv+0x46c>
    9826:	2300      	movs	r3, #0
    9828:	4646      	mov	r6, r8
    982a:	464d      	mov	r5, r9
    982c:	469a      	mov	sl, r3
    982e:	3c01      	subs	r4, #1
    9830:	465b      	mov	r3, fp
    9832:	0e0a      	lsrs	r2, r1, #24
    9834:	021b      	lsls	r3, r3, #8
    9836:	431a      	orrs	r2, r3
    9838:	020b      	lsls	r3, r1, #8
    983a:	0c17      	lsrs	r7, r2, #16
    983c:	9303      	str	r3, [sp, #12]
    983e:	0413      	lsls	r3, r2, #16
    9840:	0c1b      	lsrs	r3, r3, #16
    9842:	0039      	movs	r1, r7
    9844:	0028      	movs	r0, r5
    9846:	4690      	mov	r8, r2
    9848:	9301      	str	r3, [sp, #4]
    984a:	f7ff f9fd 	bl	8c48 <__udivsi3>
    984e:	0002      	movs	r2, r0
    9850:	9b01      	ldr	r3, [sp, #4]
    9852:	4683      	mov	fp, r0
    9854:	435a      	muls	r2, r3
    9856:	0028      	movs	r0, r5
    9858:	0039      	movs	r1, r7
    985a:	4691      	mov	r9, r2
    985c:	f7ff fa7a 	bl	8d54 <__aeabi_uidivmod>
    9860:	0c35      	lsrs	r5, r6, #16
    9862:	0409      	lsls	r1, r1, #16
    9864:	430d      	orrs	r5, r1
    9866:	45a9      	cmp	r9, r5
    9868:	d90d      	bls.n	9886 <__aeabi_ddiv+0x262>
    986a:	465b      	mov	r3, fp
    986c:	4445      	add	r5, r8
    986e:	3b01      	subs	r3, #1
    9870:	45a8      	cmp	r8, r5
    9872:	d900      	bls.n	9876 <__aeabi_ddiv+0x252>
    9874:	e13a      	b.n	9aec <__aeabi_ddiv+0x4c8>
    9876:	45a9      	cmp	r9, r5
    9878:	d800      	bhi.n	987c <__aeabi_ddiv+0x258>
    987a:	e137      	b.n	9aec <__aeabi_ddiv+0x4c8>
    987c:	2302      	movs	r3, #2
    987e:	425b      	negs	r3, r3
    9880:	469c      	mov	ip, r3
    9882:	4445      	add	r5, r8
    9884:	44e3      	add	fp, ip
    9886:	464b      	mov	r3, r9
    9888:	1aeb      	subs	r3, r5, r3
    988a:	0039      	movs	r1, r7
    988c:	0018      	movs	r0, r3
    988e:	9304      	str	r3, [sp, #16]
    9890:	f7ff f9da 	bl	8c48 <__udivsi3>
    9894:	9b01      	ldr	r3, [sp, #4]
    9896:	0005      	movs	r5, r0
    9898:	4343      	muls	r3, r0
    989a:	0039      	movs	r1, r7
    989c:	9804      	ldr	r0, [sp, #16]
    989e:	4699      	mov	r9, r3
    98a0:	f7ff fa58 	bl	8d54 <__aeabi_uidivmod>
    98a4:	0433      	lsls	r3, r6, #16
    98a6:	0409      	lsls	r1, r1, #16
    98a8:	0c1b      	lsrs	r3, r3, #16
    98aa:	430b      	orrs	r3, r1
    98ac:	4599      	cmp	r9, r3
    98ae:	d909      	bls.n	98c4 <__aeabi_ddiv+0x2a0>
    98b0:	4443      	add	r3, r8
    98b2:	1e6a      	subs	r2, r5, #1
    98b4:	4598      	cmp	r8, r3
    98b6:	d900      	bls.n	98ba <__aeabi_ddiv+0x296>
    98b8:	e11a      	b.n	9af0 <__aeabi_ddiv+0x4cc>
    98ba:	4599      	cmp	r9, r3
    98bc:	d800      	bhi.n	98c0 <__aeabi_ddiv+0x29c>
    98be:	e117      	b.n	9af0 <__aeabi_ddiv+0x4cc>
    98c0:	3d02      	subs	r5, #2
    98c2:	4443      	add	r3, r8
    98c4:	464a      	mov	r2, r9
    98c6:	1a9b      	subs	r3, r3, r2
    98c8:	465a      	mov	r2, fp
    98ca:	0412      	lsls	r2, r2, #16
    98cc:	432a      	orrs	r2, r5
    98ce:	9903      	ldr	r1, [sp, #12]
    98d0:	4693      	mov	fp, r2
    98d2:	0c10      	lsrs	r0, r2, #16
    98d4:	0c0a      	lsrs	r2, r1, #16
    98d6:	4691      	mov	r9, r2
    98d8:	0409      	lsls	r1, r1, #16
    98da:	465a      	mov	r2, fp
    98dc:	0c09      	lsrs	r1, r1, #16
    98de:	464e      	mov	r6, r9
    98e0:	000d      	movs	r5, r1
    98e2:	0412      	lsls	r2, r2, #16
    98e4:	0c12      	lsrs	r2, r2, #16
    98e6:	4345      	muls	r5, r0
    98e8:	9105      	str	r1, [sp, #20]
    98ea:	4351      	muls	r1, r2
    98ec:	4372      	muls	r2, r6
    98ee:	4370      	muls	r0, r6
    98f0:	1952      	adds	r2, r2, r5
    98f2:	0c0e      	lsrs	r6, r1, #16
    98f4:	18b2      	adds	r2, r6, r2
    98f6:	4295      	cmp	r5, r2
    98f8:	d903      	bls.n	9902 <__aeabi_ddiv+0x2de>
    98fa:	2580      	movs	r5, #128	; 0x80
    98fc:	026d      	lsls	r5, r5, #9
    98fe:	46ac      	mov	ip, r5
    9900:	4460      	add	r0, ip
    9902:	0c15      	lsrs	r5, r2, #16
    9904:	0409      	lsls	r1, r1, #16
    9906:	0412      	lsls	r2, r2, #16
    9908:	0c09      	lsrs	r1, r1, #16
    990a:	1828      	adds	r0, r5, r0
    990c:	1852      	adds	r2, r2, r1
    990e:	4283      	cmp	r3, r0
    9910:	d200      	bcs.n	9914 <__aeabi_ddiv+0x2f0>
    9912:	e0ce      	b.n	9ab2 <__aeabi_ddiv+0x48e>
    9914:	d100      	bne.n	9918 <__aeabi_ddiv+0x2f4>
    9916:	e0c8      	b.n	9aaa <__aeabi_ddiv+0x486>
    9918:	1a1d      	subs	r5, r3, r0
    991a:	4653      	mov	r3, sl
    991c:	1a9e      	subs	r6, r3, r2
    991e:	45b2      	cmp	sl, r6
    9920:	4192      	sbcs	r2, r2
    9922:	4252      	negs	r2, r2
    9924:	1aab      	subs	r3, r5, r2
    9926:	469a      	mov	sl, r3
    9928:	4598      	cmp	r8, r3
    992a:	d100      	bne.n	992e <__aeabi_ddiv+0x30a>
    992c:	e117      	b.n	9b5e <__aeabi_ddiv+0x53a>
    992e:	0039      	movs	r1, r7
    9930:	0018      	movs	r0, r3
    9932:	f7ff f989 	bl	8c48 <__udivsi3>
    9936:	9b01      	ldr	r3, [sp, #4]
    9938:	0005      	movs	r5, r0
    993a:	4343      	muls	r3, r0
    993c:	0039      	movs	r1, r7
    993e:	4650      	mov	r0, sl
    9940:	9304      	str	r3, [sp, #16]
    9942:	f7ff fa07 	bl	8d54 <__aeabi_uidivmod>
    9946:	9804      	ldr	r0, [sp, #16]
    9948:	040b      	lsls	r3, r1, #16
    994a:	0c31      	lsrs	r1, r6, #16
    994c:	4319      	orrs	r1, r3
    994e:	4288      	cmp	r0, r1
    9950:	d909      	bls.n	9966 <__aeabi_ddiv+0x342>
    9952:	4441      	add	r1, r8
    9954:	1e6b      	subs	r3, r5, #1
    9956:	4588      	cmp	r8, r1
    9958:	d900      	bls.n	995c <__aeabi_ddiv+0x338>
    995a:	e107      	b.n	9b6c <__aeabi_ddiv+0x548>
    995c:	4288      	cmp	r0, r1
    995e:	d800      	bhi.n	9962 <__aeabi_ddiv+0x33e>
    9960:	e104      	b.n	9b6c <__aeabi_ddiv+0x548>
    9962:	3d02      	subs	r5, #2
    9964:	4441      	add	r1, r8
    9966:	9b04      	ldr	r3, [sp, #16]
    9968:	1acb      	subs	r3, r1, r3
    996a:	0018      	movs	r0, r3
    996c:	0039      	movs	r1, r7
    996e:	9304      	str	r3, [sp, #16]
    9970:	f7ff f96a 	bl	8c48 <__udivsi3>
    9974:	9b01      	ldr	r3, [sp, #4]
    9976:	4682      	mov	sl, r0
    9978:	4343      	muls	r3, r0
    997a:	0039      	movs	r1, r7
    997c:	9804      	ldr	r0, [sp, #16]
    997e:	9301      	str	r3, [sp, #4]
    9980:	f7ff f9e8 	bl	8d54 <__aeabi_uidivmod>
    9984:	9801      	ldr	r0, [sp, #4]
    9986:	040b      	lsls	r3, r1, #16
    9988:	0431      	lsls	r1, r6, #16
    998a:	0c09      	lsrs	r1, r1, #16
    998c:	4319      	orrs	r1, r3
    998e:	4288      	cmp	r0, r1
    9990:	d90d      	bls.n	99ae <__aeabi_ddiv+0x38a>
    9992:	4653      	mov	r3, sl
    9994:	4441      	add	r1, r8
    9996:	3b01      	subs	r3, #1
    9998:	4588      	cmp	r8, r1
    999a:	d900      	bls.n	999e <__aeabi_ddiv+0x37a>
    999c:	e0e8      	b.n	9b70 <__aeabi_ddiv+0x54c>
    999e:	4288      	cmp	r0, r1
    99a0:	d800      	bhi.n	99a4 <__aeabi_ddiv+0x380>
    99a2:	e0e5      	b.n	9b70 <__aeabi_ddiv+0x54c>
    99a4:	2302      	movs	r3, #2
    99a6:	425b      	negs	r3, r3
    99a8:	469c      	mov	ip, r3
    99aa:	4441      	add	r1, r8
    99ac:	44e2      	add	sl, ip
    99ae:	9b01      	ldr	r3, [sp, #4]
    99b0:	042d      	lsls	r5, r5, #16
    99b2:	1ace      	subs	r6, r1, r3
    99b4:	4651      	mov	r1, sl
    99b6:	4329      	orrs	r1, r5
    99b8:	9d05      	ldr	r5, [sp, #20]
    99ba:	464f      	mov	r7, r9
    99bc:	002a      	movs	r2, r5
    99be:	040b      	lsls	r3, r1, #16
    99c0:	0c08      	lsrs	r0, r1, #16
    99c2:	0c1b      	lsrs	r3, r3, #16
    99c4:	435a      	muls	r2, r3
    99c6:	4345      	muls	r5, r0
    99c8:	437b      	muls	r3, r7
    99ca:	4378      	muls	r0, r7
    99cc:	195b      	adds	r3, r3, r5
    99ce:	0c17      	lsrs	r7, r2, #16
    99d0:	18fb      	adds	r3, r7, r3
    99d2:	429d      	cmp	r5, r3
    99d4:	d903      	bls.n	99de <__aeabi_ddiv+0x3ba>
    99d6:	2580      	movs	r5, #128	; 0x80
    99d8:	026d      	lsls	r5, r5, #9
    99da:	46ac      	mov	ip, r5
    99dc:	4460      	add	r0, ip
    99de:	0c1d      	lsrs	r5, r3, #16
    99e0:	0412      	lsls	r2, r2, #16
    99e2:	041b      	lsls	r3, r3, #16
    99e4:	0c12      	lsrs	r2, r2, #16
    99e6:	1828      	adds	r0, r5, r0
    99e8:	189b      	adds	r3, r3, r2
    99ea:	4286      	cmp	r6, r0
    99ec:	d200      	bcs.n	99f0 <__aeabi_ddiv+0x3cc>
    99ee:	e093      	b.n	9b18 <__aeabi_ddiv+0x4f4>
    99f0:	d100      	bne.n	99f4 <__aeabi_ddiv+0x3d0>
    99f2:	e08e      	b.n	9b12 <__aeabi_ddiv+0x4ee>
    99f4:	2301      	movs	r3, #1
    99f6:	4319      	orrs	r1, r3
    99f8:	4ba0      	ldr	r3, [pc, #640]	; (9c7c <__aeabi_ddiv+0x658>)
    99fa:	18e3      	adds	r3, r4, r3
    99fc:	2b00      	cmp	r3, #0
    99fe:	dc00      	bgt.n	9a02 <__aeabi_ddiv+0x3de>
    9a00:	e099      	b.n	9b36 <__aeabi_ddiv+0x512>
    9a02:	074a      	lsls	r2, r1, #29
    9a04:	d000      	beq.n	9a08 <__aeabi_ddiv+0x3e4>
    9a06:	e09e      	b.n	9b46 <__aeabi_ddiv+0x522>
    9a08:	465a      	mov	r2, fp
    9a0a:	01d2      	lsls	r2, r2, #7
    9a0c:	d506      	bpl.n	9a1c <__aeabi_ddiv+0x3f8>
    9a0e:	465a      	mov	r2, fp
    9a10:	4b9b      	ldr	r3, [pc, #620]	; (9c80 <__aeabi_ddiv+0x65c>)
    9a12:	401a      	ands	r2, r3
    9a14:	2380      	movs	r3, #128	; 0x80
    9a16:	4693      	mov	fp, r2
    9a18:	00db      	lsls	r3, r3, #3
    9a1a:	18e3      	adds	r3, r4, r3
    9a1c:	4a99      	ldr	r2, [pc, #612]	; (9c84 <__aeabi_ddiv+0x660>)
    9a1e:	4293      	cmp	r3, r2
    9a20:	dd68      	ble.n	9af4 <__aeabi_ddiv+0x4d0>
    9a22:	2301      	movs	r3, #1
    9a24:	9a02      	ldr	r2, [sp, #8]
    9a26:	4c98      	ldr	r4, [pc, #608]	; (9c88 <__aeabi_ddiv+0x664>)
    9a28:	401a      	ands	r2, r3
    9a2a:	2300      	movs	r3, #0
    9a2c:	4694      	mov	ip, r2
    9a2e:	4698      	mov	r8, r3
    9a30:	2200      	movs	r2, #0
    9a32:	e6c5      	b.n	97c0 <__aeabi_ddiv+0x19c>
    9a34:	2280      	movs	r2, #128	; 0x80
    9a36:	464b      	mov	r3, r9
    9a38:	0312      	lsls	r2, r2, #12
    9a3a:	4213      	tst	r3, r2
    9a3c:	d00a      	beq.n	9a54 <__aeabi_ddiv+0x430>
    9a3e:	465b      	mov	r3, fp
    9a40:	4213      	tst	r3, r2
    9a42:	d106      	bne.n	9a52 <__aeabi_ddiv+0x42e>
    9a44:	431a      	orrs	r2, r3
    9a46:	0312      	lsls	r2, r2, #12
    9a48:	0b12      	lsrs	r2, r2, #12
    9a4a:	46ac      	mov	ip, r5
    9a4c:	4688      	mov	r8, r1
    9a4e:	4c8e      	ldr	r4, [pc, #568]	; (9c88 <__aeabi_ddiv+0x664>)
    9a50:	e6b6      	b.n	97c0 <__aeabi_ddiv+0x19c>
    9a52:	464b      	mov	r3, r9
    9a54:	431a      	orrs	r2, r3
    9a56:	0312      	lsls	r2, r2, #12
    9a58:	0b12      	lsrs	r2, r2, #12
    9a5a:	46bc      	mov	ip, r7
    9a5c:	4c8a      	ldr	r4, [pc, #552]	; (9c88 <__aeabi_ddiv+0x664>)
    9a5e:	e6af      	b.n	97c0 <__aeabi_ddiv+0x19c>
    9a60:	0003      	movs	r3, r0
    9a62:	465a      	mov	r2, fp
    9a64:	3b28      	subs	r3, #40	; 0x28
    9a66:	409a      	lsls	r2, r3
    9a68:	2300      	movs	r3, #0
    9a6a:	4691      	mov	r9, r2
    9a6c:	4698      	mov	r8, r3
    9a6e:	e657      	b.n	9720 <__aeabi_ddiv+0xfc>
    9a70:	4658      	mov	r0, fp
    9a72:	f001 f94b 	bl	ad0c <__clzsi2>
    9a76:	3020      	adds	r0, #32
    9a78:	e640      	b.n	96fc <__aeabi_ddiv+0xd8>
    9a7a:	0003      	movs	r3, r0
    9a7c:	4652      	mov	r2, sl
    9a7e:	3b28      	subs	r3, #40	; 0x28
    9a80:	409a      	lsls	r2, r3
    9a82:	2100      	movs	r1, #0
    9a84:	4693      	mov	fp, r2
    9a86:	e677      	b.n	9778 <__aeabi_ddiv+0x154>
    9a88:	f001 f940 	bl	ad0c <__clzsi2>
    9a8c:	3020      	adds	r0, #32
    9a8e:	e65f      	b.n	9750 <__aeabi_ddiv+0x12c>
    9a90:	4588      	cmp	r8, r1
    9a92:	d200      	bcs.n	9a96 <__aeabi_ddiv+0x472>
    9a94:	e6c7      	b.n	9826 <__aeabi_ddiv+0x202>
    9a96:	464b      	mov	r3, r9
    9a98:	07de      	lsls	r6, r3, #31
    9a9a:	085d      	lsrs	r5, r3, #1
    9a9c:	4643      	mov	r3, r8
    9a9e:	085b      	lsrs	r3, r3, #1
    9aa0:	431e      	orrs	r6, r3
    9aa2:	4643      	mov	r3, r8
    9aa4:	07db      	lsls	r3, r3, #31
    9aa6:	469a      	mov	sl, r3
    9aa8:	e6c2      	b.n	9830 <__aeabi_ddiv+0x20c>
    9aaa:	2500      	movs	r5, #0
    9aac:	4592      	cmp	sl, r2
    9aae:	d300      	bcc.n	9ab2 <__aeabi_ddiv+0x48e>
    9ab0:	e733      	b.n	991a <__aeabi_ddiv+0x2f6>
    9ab2:	9e03      	ldr	r6, [sp, #12]
    9ab4:	4659      	mov	r1, fp
    9ab6:	46b4      	mov	ip, r6
    9ab8:	44e2      	add	sl, ip
    9aba:	45b2      	cmp	sl, r6
    9abc:	41ad      	sbcs	r5, r5
    9abe:	426d      	negs	r5, r5
    9ac0:	4445      	add	r5, r8
    9ac2:	18eb      	adds	r3, r5, r3
    9ac4:	3901      	subs	r1, #1
    9ac6:	4598      	cmp	r8, r3
    9ac8:	d207      	bcs.n	9ada <__aeabi_ddiv+0x4b6>
    9aca:	4298      	cmp	r0, r3
    9acc:	d900      	bls.n	9ad0 <__aeabi_ddiv+0x4ac>
    9ace:	e07f      	b.n	9bd0 <__aeabi_ddiv+0x5ac>
    9ad0:	d100      	bne.n	9ad4 <__aeabi_ddiv+0x4b0>
    9ad2:	e0bc      	b.n	9c4e <__aeabi_ddiv+0x62a>
    9ad4:	1a1d      	subs	r5, r3, r0
    9ad6:	468b      	mov	fp, r1
    9ad8:	e71f      	b.n	991a <__aeabi_ddiv+0x2f6>
    9ada:	4598      	cmp	r8, r3
    9adc:	d1fa      	bne.n	9ad4 <__aeabi_ddiv+0x4b0>
    9ade:	9d03      	ldr	r5, [sp, #12]
    9ae0:	4555      	cmp	r5, sl
    9ae2:	d9f2      	bls.n	9aca <__aeabi_ddiv+0x4a6>
    9ae4:	4643      	mov	r3, r8
    9ae6:	468b      	mov	fp, r1
    9ae8:	1a1d      	subs	r5, r3, r0
    9aea:	e716      	b.n	991a <__aeabi_ddiv+0x2f6>
    9aec:	469b      	mov	fp, r3
    9aee:	e6ca      	b.n	9886 <__aeabi_ddiv+0x262>
    9af0:	0015      	movs	r5, r2
    9af2:	e6e7      	b.n	98c4 <__aeabi_ddiv+0x2a0>
    9af4:	465a      	mov	r2, fp
    9af6:	08c9      	lsrs	r1, r1, #3
    9af8:	0752      	lsls	r2, r2, #29
    9afa:	430a      	orrs	r2, r1
    9afc:	055b      	lsls	r3, r3, #21
    9afe:	4690      	mov	r8, r2
    9b00:	0d5c      	lsrs	r4, r3, #21
    9b02:	465a      	mov	r2, fp
    9b04:	2301      	movs	r3, #1
    9b06:	9902      	ldr	r1, [sp, #8]
    9b08:	0252      	lsls	r2, r2, #9
    9b0a:	4019      	ands	r1, r3
    9b0c:	0b12      	lsrs	r2, r2, #12
    9b0e:	468c      	mov	ip, r1
    9b10:	e656      	b.n	97c0 <__aeabi_ddiv+0x19c>
    9b12:	2b00      	cmp	r3, #0
    9b14:	d100      	bne.n	9b18 <__aeabi_ddiv+0x4f4>
    9b16:	e76f      	b.n	99f8 <__aeabi_ddiv+0x3d4>
    9b18:	4446      	add	r6, r8
    9b1a:	1e4a      	subs	r2, r1, #1
    9b1c:	45b0      	cmp	r8, r6
    9b1e:	d929      	bls.n	9b74 <__aeabi_ddiv+0x550>
    9b20:	0011      	movs	r1, r2
    9b22:	4286      	cmp	r6, r0
    9b24:	d000      	beq.n	9b28 <__aeabi_ddiv+0x504>
    9b26:	e765      	b.n	99f4 <__aeabi_ddiv+0x3d0>
    9b28:	9a03      	ldr	r2, [sp, #12]
    9b2a:	4293      	cmp	r3, r2
    9b2c:	d000      	beq.n	9b30 <__aeabi_ddiv+0x50c>
    9b2e:	e761      	b.n	99f4 <__aeabi_ddiv+0x3d0>
    9b30:	e762      	b.n	99f8 <__aeabi_ddiv+0x3d4>
    9b32:	2101      	movs	r1, #1
    9b34:	4249      	negs	r1, r1
    9b36:	2001      	movs	r0, #1
    9b38:	1ac2      	subs	r2, r0, r3
    9b3a:	2a38      	cmp	r2, #56	; 0x38
    9b3c:	dd21      	ble.n	9b82 <__aeabi_ddiv+0x55e>
    9b3e:	9b02      	ldr	r3, [sp, #8]
    9b40:	4003      	ands	r3, r0
    9b42:	469c      	mov	ip, r3
    9b44:	e638      	b.n	97b8 <__aeabi_ddiv+0x194>
    9b46:	220f      	movs	r2, #15
    9b48:	400a      	ands	r2, r1
    9b4a:	2a04      	cmp	r2, #4
    9b4c:	d100      	bne.n	9b50 <__aeabi_ddiv+0x52c>
    9b4e:	e75b      	b.n	9a08 <__aeabi_ddiv+0x3e4>
    9b50:	000a      	movs	r2, r1
    9b52:	1d11      	adds	r1, r2, #4
    9b54:	4291      	cmp	r1, r2
    9b56:	4192      	sbcs	r2, r2
    9b58:	4252      	negs	r2, r2
    9b5a:	4493      	add	fp, r2
    9b5c:	e754      	b.n	9a08 <__aeabi_ddiv+0x3e4>
    9b5e:	4b47      	ldr	r3, [pc, #284]	; (9c7c <__aeabi_ddiv+0x658>)
    9b60:	18e3      	adds	r3, r4, r3
    9b62:	2b00      	cmp	r3, #0
    9b64:	dde5      	ble.n	9b32 <__aeabi_ddiv+0x50e>
    9b66:	2201      	movs	r2, #1
    9b68:	4252      	negs	r2, r2
    9b6a:	e7f2      	b.n	9b52 <__aeabi_ddiv+0x52e>
    9b6c:	001d      	movs	r5, r3
    9b6e:	e6fa      	b.n	9966 <__aeabi_ddiv+0x342>
    9b70:	469a      	mov	sl, r3
    9b72:	e71c      	b.n	99ae <__aeabi_ddiv+0x38a>
    9b74:	42b0      	cmp	r0, r6
    9b76:	d839      	bhi.n	9bec <__aeabi_ddiv+0x5c8>
    9b78:	d06e      	beq.n	9c58 <__aeabi_ddiv+0x634>
    9b7a:	0011      	movs	r1, r2
    9b7c:	e73a      	b.n	99f4 <__aeabi_ddiv+0x3d0>
    9b7e:	9302      	str	r3, [sp, #8]
    9b80:	e73a      	b.n	99f8 <__aeabi_ddiv+0x3d4>
    9b82:	2a1f      	cmp	r2, #31
    9b84:	dc3c      	bgt.n	9c00 <__aeabi_ddiv+0x5dc>
    9b86:	2320      	movs	r3, #32
    9b88:	1a9b      	subs	r3, r3, r2
    9b8a:	000c      	movs	r4, r1
    9b8c:	4658      	mov	r0, fp
    9b8e:	4099      	lsls	r1, r3
    9b90:	4098      	lsls	r0, r3
    9b92:	1e4b      	subs	r3, r1, #1
    9b94:	4199      	sbcs	r1, r3
    9b96:	465b      	mov	r3, fp
    9b98:	40d4      	lsrs	r4, r2
    9b9a:	40d3      	lsrs	r3, r2
    9b9c:	4320      	orrs	r0, r4
    9b9e:	4308      	orrs	r0, r1
    9ba0:	001a      	movs	r2, r3
    9ba2:	0743      	lsls	r3, r0, #29
    9ba4:	d009      	beq.n	9bba <__aeabi_ddiv+0x596>
    9ba6:	230f      	movs	r3, #15
    9ba8:	4003      	ands	r3, r0
    9baa:	2b04      	cmp	r3, #4
    9bac:	d005      	beq.n	9bba <__aeabi_ddiv+0x596>
    9bae:	0001      	movs	r1, r0
    9bb0:	1d08      	adds	r0, r1, #4
    9bb2:	4288      	cmp	r0, r1
    9bb4:	419b      	sbcs	r3, r3
    9bb6:	425b      	negs	r3, r3
    9bb8:	18d2      	adds	r2, r2, r3
    9bba:	0213      	lsls	r3, r2, #8
    9bbc:	d53a      	bpl.n	9c34 <__aeabi_ddiv+0x610>
    9bbe:	2301      	movs	r3, #1
    9bc0:	9a02      	ldr	r2, [sp, #8]
    9bc2:	2401      	movs	r4, #1
    9bc4:	401a      	ands	r2, r3
    9bc6:	2300      	movs	r3, #0
    9bc8:	4694      	mov	ip, r2
    9bca:	4698      	mov	r8, r3
    9bcc:	2200      	movs	r2, #0
    9bce:	e5f7      	b.n	97c0 <__aeabi_ddiv+0x19c>
    9bd0:	2102      	movs	r1, #2
    9bd2:	4249      	negs	r1, r1
    9bd4:	468c      	mov	ip, r1
    9bd6:	9d03      	ldr	r5, [sp, #12]
    9bd8:	44e3      	add	fp, ip
    9bda:	46ac      	mov	ip, r5
    9bdc:	44e2      	add	sl, ip
    9bde:	45aa      	cmp	sl, r5
    9be0:	41ad      	sbcs	r5, r5
    9be2:	426d      	negs	r5, r5
    9be4:	4445      	add	r5, r8
    9be6:	18ed      	adds	r5, r5, r3
    9be8:	1a2d      	subs	r5, r5, r0
    9bea:	e696      	b.n	991a <__aeabi_ddiv+0x2f6>
    9bec:	1e8a      	subs	r2, r1, #2
    9bee:	9903      	ldr	r1, [sp, #12]
    9bf0:	004d      	lsls	r5, r1, #1
    9bf2:	428d      	cmp	r5, r1
    9bf4:	4189      	sbcs	r1, r1
    9bf6:	4249      	negs	r1, r1
    9bf8:	4441      	add	r1, r8
    9bfa:	1876      	adds	r6, r6, r1
    9bfc:	9503      	str	r5, [sp, #12]
    9bfe:	e78f      	b.n	9b20 <__aeabi_ddiv+0x4fc>
    9c00:	201f      	movs	r0, #31
    9c02:	4240      	negs	r0, r0
    9c04:	1ac3      	subs	r3, r0, r3
    9c06:	4658      	mov	r0, fp
    9c08:	40d8      	lsrs	r0, r3
    9c0a:	0003      	movs	r3, r0
    9c0c:	2a20      	cmp	r2, #32
    9c0e:	d028      	beq.n	9c62 <__aeabi_ddiv+0x63e>
    9c10:	2040      	movs	r0, #64	; 0x40
    9c12:	465d      	mov	r5, fp
    9c14:	1a82      	subs	r2, r0, r2
    9c16:	4095      	lsls	r5, r2
    9c18:	4329      	orrs	r1, r5
    9c1a:	1e4a      	subs	r2, r1, #1
    9c1c:	4191      	sbcs	r1, r2
    9c1e:	4319      	orrs	r1, r3
    9c20:	2307      	movs	r3, #7
    9c22:	2200      	movs	r2, #0
    9c24:	400b      	ands	r3, r1
    9c26:	d009      	beq.n	9c3c <__aeabi_ddiv+0x618>
    9c28:	230f      	movs	r3, #15
    9c2a:	2200      	movs	r2, #0
    9c2c:	400b      	ands	r3, r1
    9c2e:	0008      	movs	r0, r1
    9c30:	2b04      	cmp	r3, #4
    9c32:	d1bd      	bne.n	9bb0 <__aeabi_ddiv+0x58c>
    9c34:	0001      	movs	r1, r0
    9c36:	0753      	lsls	r3, r2, #29
    9c38:	0252      	lsls	r2, r2, #9
    9c3a:	0b12      	lsrs	r2, r2, #12
    9c3c:	08c9      	lsrs	r1, r1, #3
    9c3e:	4319      	orrs	r1, r3
    9c40:	2301      	movs	r3, #1
    9c42:	4688      	mov	r8, r1
    9c44:	9902      	ldr	r1, [sp, #8]
    9c46:	2400      	movs	r4, #0
    9c48:	4019      	ands	r1, r3
    9c4a:	468c      	mov	ip, r1
    9c4c:	e5b8      	b.n	97c0 <__aeabi_ddiv+0x19c>
    9c4e:	4552      	cmp	r2, sl
    9c50:	d8be      	bhi.n	9bd0 <__aeabi_ddiv+0x5ac>
    9c52:	468b      	mov	fp, r1
    9c54:	2500      	movs	r5, #0
    9c56:	e660      	b.n	991a <__aeabi_ddiv+0x2f6>
    9c58:	9d03      	ldr	r5, [sp, #12]
    9c5a:	429d      	cmp	r5, r3
    9c5c:	d3c6      	bcc.n	9bec <__aeabi_ddiv+0x5c8>
    9c5e:	0011      	movs	r1, r2
    9c60:	e762      	b.n	9b28 <__aeabi_ddiv+0x504>
    9c62:	2500      	movs	r5, #0
    9c64:	e7d8      	b.n	9c18 <__aeabi_ddiv+0x5f4>
    9c66:	2280      	movs	r2, #128	; 0x80
    9c68:	465b      	mov	r3, fp
    9c6a:	0312      	lsls	r2, r2, #12
    9c6c:	431a      	orrs	r2, r3
    9c6e:	9b01      	ldr	r3, [sp, #4]
    9c70:	0312      	lsls	r2, r2, #12
    9c72:	0b12      	lsrs	r2, r2, #12
    9c74:	469c      	mov	ip, r3
    9c76:	4688      	mov	r8, r1
    9c78:	4c03      	ldr	r4, [pc, #12]	; (9c88 <__aeabi_ddiv+0x664>)
    9c7a:	e5a1      	b.n	97c0 <__aeabi_ddiv+0x19c>
    9c7c:	000003ff 	.word	0x000003ff
    9c80:	feffffff 	.word	0xfeffffff
    9c84:	000007fe 	.word	0x000007fe
    9c88:	000007ff 	.word	0x000007ff

00009c8c <__eqdf2>:
    9c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c8e:	464f      	mov	r7, r9
    9c90:	4646      	mov	r6, r8
    9c92:	46d6      	mov	lr, sl
    9c94:	005c      	lsls	r4, r3, #1
    9c96:	b5c0      	push	{r6, r7, lr}
    9c98:	031f      	lsls	r7, r3, #12
    9c9a:	0fdb      	lsrs	r3, r3, #31
    9c9c:	469a      	mov	sl, r3
    9c9e:	4b17      	ldr	r3, [pc, #92]	; (9cfc <__eqdf2+0x70>)
    9ca0:	030e      	lsls	r6, r1, #12
    9ca2:	004d      	lsls	r5, r1, #1
    9ca4:	4684      	mov	ip, r0
    9ca6:	4680      	mov	r8, r0
    9ca8:	0b36      	lsrs	r6, r6, #12
    9caa:	0d6d      	lsrs	r5, r5, #21
    9cac:	0fc9      	lsrs	r1, r1, #31
    9cae:	4691      	mov	r9, r2
    9cb0:	0b3f      	lsrs	r7, r7, #12
    9cb2:	0d64      	lsrs	r4, r4, #21
    9cb4:	2001      	movs	r0, #1
    9cb6:	429d      	cmp	r5, r3
    9cb8:	d008      	beq.n	9ccc <__eqdf2+0x40>
    9cba:	429c      	cmp	r4, r3
    9cbc:	d001      	beq.n	9cc2 <__eqdf2+0x36>
    9cbe:	42a5      	cmp	r5, r4
    9cc0:	d00b      	beq.n	9cda <__eqdf2+0x4e>
    9cc2:	bc1c      	pop	{r2, r3, r4}
    9cc4:	4690      	mov	r8, r2
    9cc6:	4699      	mov	r9, r3
    9cc8:	46a2      	mov	sl, r4
    9cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ccc:	4663      	mov	r3, ip
    9cce:	4333      	orrs	r3, r6
    9cd0:	d1f7      	bne.n	9cc2 <__eqdf2+0x36>
    9cd2:	42ac      	cmp	r4, r5
    9cd4:	d1f5      	bne.n	9cc2 <__eqdf2+0x36>
    9cd6:	433a      	orrs	r2, r7
    9cd8:	d1f3      	bne.n	9cc2 <__eqdf2+0x36>
    9cda:	2001      	movs	r0, #1
    9cdc:	42be      	cmp	r6, r7
    9cde:	d1f0      	bne.n	9cc2 <__eqdf2+0x36>
    9ce0:	45c8      	cmp	r8, r9
    9ce2:	d1ee      	bne.n	9cc2 <__eqdf2+0x36>
    9ce4:	4551      	cmp	r1, sl
    9ce6:	d007      	beq.n	9cf8 <__eqdf2+0x6c>
    9ce8:	2d00      	cmp	r5, #0
    9cea:	d1ea      	bne.n	9cc2 <__eqdf2+0x36>
    9cec:	4663      	mov	r3, ip
    9cee:	431e      	orrs	r6, r3
    9cf0:	0030      	movs	r0, r6
    9cf2:	1e46      	subs	r6, r0, #1
    9cf4:	41b0      	sbcs	r0, r6
    9cf6:	e7e4      	b.n	9cc2 <__eqdf2+0x36>
    9cf8:	2000      	movs	r0, #0
    9cfa:	e7e2      	b.n	9cc2 <__eqdf2+0x36>
    9cfc:	000007ff 	.word	0x000007ff

00009d00 <__gedf2>:
    9d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d02:	4645      	mov	r5, r8
    9d04:	46de      	mov	lr, fp
    9d06:	4657      	mov	r7, sl
    9d08:	464e      	mov	r6, r9
    9d0a:	b5e0      	push	{r5, r6, r7, lr}
    9d0c:	031f      	lsls	r7, r3, #12
    9d0e:	0b3d      	lsrs	r5, r7, #12
    9d10:	4f2c      	ldr	r7, [pc, #176]	; (9dc4 <__gedf2+0xc4>)
    9d12:	030e      	lsls	r6, r1, #12
    9d14:	004c      	lsls	r4, r1, #1
    9d16:	46ab      	mov	fp, r5
    9d18:	005d      	lsls	r5, r3, #1
    9d1a:	4684      	mov	ip, r0
    9d1c:	0b36      	lsrs	r6, r6, #12
    9d1e:	0d64      	lsrs	r4, r4, #21
    9d20:	0fc9      	lsrs	r1, r1, #31
    9d22:	4690      	mov	r8, r2
    9d24:	0d6d      	lsrs	r5, r5, #21
    9d26:	0fdb      	lsrs	r3, r3, #31
    9d28:	42bc      	cmp	r4, r7
    9d2a:	d02a      	beq.n	9d82 <__gedf2+0x82>
    9d2c:	4f25      	ldr	r7, [pc, #148]	; (9dc4 <__gedf2+0xc4>)
    9d2e:	42bd      	cmp	r5, r7
    9d30:	d02d      	beq.n	9d8e <__gedf2+0x8e>
    9d32:	2c00      	cmp	r4, #0
    9d34:	d10f      	bne.n	9d56 <__gedf2+0x56>
    9d36:	4330      	orrs	r0, r6
    9d38:	0007      	movs	r7, r0
    9d3a:	4681      	mov	r9, r0
    9d3c:	4278      	negs	r0, r7
    9d3e:	4178      	adcs	r0, r7
    9d40:	b2c0      	uxtb	r0, r0
    9d42:	2d00      	cmp	r5, #0
    9d44:	d117      	bne.n	9d76 <__gedf2+0x76>
    9d46:	465f      	mov	r7, fp
    9d48:	433a      	orrs	r2, r7
    9d4a:	d114      	bne.n	9d76 <__gedf2+0x76>
    9d4c:	464b      	mov	r3, r9
    9d4e:	2000      	movs	r0, #0
    9d50:	2b00      	cmp	r3, #0
    9d52:	d00a      	beq.n	9d6a <__gedf2+0x6a>
    9d54:	e006      	b.n	9d64 <__gedf2+0x64>
    9d56:	2d00      	cmp	r5, #0
    9d58:	d102      	bne.n	9d60 <__gedf2+0x60>
    9d5a:	4658      	mov	r0, fp
    9d5c:	4302      	orrs	r2, r0
    9d5e:	d001      	beq.n	9d64 <__gedf2+0x64>
    9d60:	4299      	cmp	r1, r3
    9d62:	d018      	beq.n	9d96 <__gedf2+0x96>
    9d64:	4248      	negs	r0, r1
    9d66:	2101      	movs	r1, #1
    9d68:	4308      	orrs	r0, r1
    9d6a:	bc3c      	pop	{r2, r3, r4, r5}
    9d6c:	4690      	mov	r8, r2
    9d6e:	4699      	mov	r9, r3
    9d70:	46a2      	mov	sl, r4
    9d72:	46ab      	mov	fp, r5
    9d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d76:	2800      	cmp	r0, #0
    9d78:	d0f2      	beq.n	9d60 <__gedf2+0x60>
    9d7a:	2001      	movs	r0, #1
    9d7c:	3b01      	subs	r3, #1
    9d7e:	4318      	orrs	r0, r3
    9d80:	e7f3      	b.n	9d6a <__gedf2+0x6a>
    9d82:	0037      	movs	r7, r6
    9d84:	4307      	orrs	r7, r0
    9d86:	d0d1      	beq.n	9d2c <__gedf2+0x2c>
    9d88:	2002      	movs	r0, #2
    9d8a:	4240      	negs	r0, r0
    9d8c:	e7ed      	b.n	9d6a <__gedf2+0x6a>
    9d8e:	465f      	mov	r7, fp
    9d90:	4317      	orrs	r7, r2
    9d92:	d0ce      	beq.n	9d32 <__gedf2+0x32>
    9d94:	e7f8      	b.n	9d88 <__gedf2+0x88>
    9d96:	42ac      	cmp	r4, r5
    9d98:	dce4      	bgt.n	9d64 <__gedf2+0x64>
    9d9a:	da03      	bge.n	9da4 <__gedf2+0xa4>
    9d9c:	1e48      	subs	r0, r1, #1
    9d9e:	2101      	movs	r1, #1
    9da0:	4308      	orrs	r0, r1
    9da2:	e7e2      	b.n	9d6a <__gedf2+0x6a>
    9da4:	455e      	cmp	r6, fp
    9da6:	d8dd      	bhi.n	9d64 <__gedf2+0x64>
    9da8:	d006      	beq.n	9db8 <__gedf2+0xb8>
    9daa:	2000      	movs	r0, #0
    9dac:	455e      	cmp	r6, fp
    9dae:	d2dc      	bcs.n	9d6a <__gedf2+0x6a>
    9db0:	2301      	movs	r3, #1
    9db2:	1e48      	subs	r0, r1, #1
    9db4:	4318      	orrs	r0, r3
    9db6:	e7d8      	b.n	9d6a <__gedf2+0x6a>
    9db8:	45c4      	cmp	ip, r8
    9dba:	d8d3      	bhi.n	9d64 <__gedf2+0x64>
    9dbc:	2000      	movs	r0, #0
    9dbe:	45c4      	cmp	ip, r8
    9dc0:	d3f6      	bcc.n	9db0 <__gedf2+0xb0>
    9dc2:	e7d2      	b.n	9d6a <__gedf2+0x6a>
    9dc4:	000007ff 	.word	0x000007ff

00009dc8 <__ledf2>:
    9dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dca:	464e      	mov	r6, r9
    9dcc:	4645      	mov	r5, r8
    9dce:	46de      	mov	lr, fp
    9dd0:	4657      	mov	r7, sl
    9dd2:	005c      	lsls	r4, r3, #1
    9dd4:	b5e0      	push	{r5, r6, r7, lr}
    9dd6:	031f      	lsls	r7, r3, #12
    9dd8:	0fdb      	lsrs	r3, r3, #31
    9dda:	4699      	mov	r9, r3
    9ddc:	4b2a      	ldr	r3, [pc, #168]	; (9e88 <__ledf2+0xc0>)
    9dde:	030e      	lsls	r6, r1, #12
    9de0:	004d      	lsls	r5, r1, #1
    9de2:	0fc9      	lsrs	r1, r1, #31
    9de4:	4684      	mov	ip, r0
    9de6:	0b36      	lsrs	r6, r6, #12
    9de8:	0d6d      	lsrs	r5, r5, #21
    9dea:	468b      	mov	fp, r1
    9dec:	4690      	mov	r8, r2
    9dee:	0b3f      	lsrs	r7, r7, #12
    9df0:	0d64      	lsrs	r4, r4, #21
    9df2:	429d      	cmp	r5, r3
    9df4:	d020      	beq.n	9e38 <__ledf2+0x70>
    9df6:	4b24      	ldr	r3, [pc, #144]	; (9e88 <__ledf2+0xc0>)
    9df8:	429c      	cmp	r4, r3
    9dfa:	d022      	beq.n	9e42 <__ledf2+0x7a>
    9dfc:	2d00      	cmp	r5, #0
    9dfe:	d112      	bne.n	9e26 <__ledf2+0x5e>
    9e00:	4330      	orrs	r0, r6
    9e02:	4243      	negs	r3, r0
    9e04:	4143      	adcs	r3, r0
    9e06:	b2db      	uxtb	r3, r3
    9e08:	2c00      	cmp	r4, #0
    9e0a:	d01f      	beq.n	9e4c <__ledf2+0x84>
    9e0c:	2b00      	cmp	r3, #0
    9e0e:	d00c      	beq.n	9e2a <__ledf2+0x62>
    9e10:	464b      	mov	r3, r9
    9e12:	2001      	movs	r0, #1
    9e14:	3b01      	subs	r3, #1
    9e16:	4303      	orrs	r3, r0
    9e18:	0018      	movs	r0, r3
    9e1a:	bc3c      	pop	{r2, r3, r4, r5}
    9e1c:	4690      	mov	r8, r2
    9e1e:	4699      	mov	r9, r3
    9e20:	46a2      	mov	sl, r4
    9e22:	46ab      	mov	fp, r5
    9e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e26:	2c00      	cmp	r4, #0
    9e28:	d016      	beq.n	9e58 <__ledf2+0x90>
    9e2a:	45cb      	cmp	fp, r9
    9e2c:	d017      	beq.n	9e5e <__ledf2+0x96>
    9e2e:	465b      	mov	r3, fp
    9e30:	4259      	negs	r1, r3
    9e32:	2301      	movs	r3, #1
    9e34:	430b      	orrs	r3, r1
    9e36:	e7ef      	b.n	9e18 <__ledf2+0x50>
    9e38:	0031      	movs	r1, r6
    9e3a:	2302      	movs	r3, #2
    9e3c:	4301      	orrs	r1, r0
    9e3e:	d1eb      	bne.n	9e18 <__ledf2+0x50>
    9e40:	e7d9      	b.n	9df6 <__ledf2+0x2e>
    9e42:	0039      	movs	r1, r7
    9e44:	2302      	movs	r3, #2
    9e46:	4311      	orrs	r1, r2
    9e48:	d1e6      	bne.n	9e18 <__ledf2+0x50>
    9e4a:	e7d7      	b.n	9dfc <__ledf2+0x34>
    9e4c:	433a      	orrs	r2, r7
    9e4e:	d1dd      	bne.n	9e0c <__ledf2+0x44>
    9e50:	2300      	movs	r3, #0
    9e52:	2800      	cmp	r0, #0
    9e54:	d0e0      	beq.n	9e18 <__ledf2+0x50>
    9e56:	e7ea      	b.n	9e2e <__ledf2+0x66>
    9e58:	433a      	orrs	r2, r7
    9e5a:	d1e6      	bne.n	9e2a <__ledf2+0x62>
    9e5c:	e7e7      	b.n	9e2e <__ledf2+0x66>
    9e5e:	42a5      	cmp	r5, r4
    9e60:	dce5      	bgt.n	9e2e <__ledf2+0x66>
    9e62:	db05      	blt.n	9e70 <__ledf2+0xa8>
    9e64:	42be      	cmp	r6, r7
    9e66:	d8e2      	bhi.n	9e2e <__ledf2+0x66>
    9e68:	d007      	beq.n	9e7a <__ledf2+0xb2>
    9e6a:	2300      	movs	r3, #0
    9e6c:	42be      	cmp	r6, r7
    9e6e:	d2d3      	bcs.n	9e18 <__ledf2+0x50>
    9e70:	4659      	mov	r1, fp
    9e72:	2301      	movs	r3, #1
    9e74:	3901      	subs	r1, #1
    9e76:	430b      	orrs	r3, r1
    9e78:	e7ce      	b.n	9e18 <__ledf2+0x50>
    9e7a:	45c4      	cmp	ip, r8
    9e7c:	d8d7      	bhi.n	9e2e <__ledf2+0x66>
    9e7e:	2300      	movs	r3, #0
    9e80:	45c4      	cmp	ip, r8
    9e82:	d3f5      	bcc.n	9e70 <__ledf2+0xa8>
    9e84:	e7c8      	b.n	9e18 <__ledf2+0x50>
    9e86:	46c0      	nop			; (mov r8, r8)
    9e88:	000007ff 	.word	0x000007ff

00009e8c <__aeabi_dmul>:
    9e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e8e:	4657      	mov	r7, sl
    9e90:	4645      	mov	r5, r8
    9e92:	46de      	mov	lr, fp
    9e94:	464e      	mov	r6, r9
    9e96:	b5e0      	push	{r5, r6, r7, lr}
    9e98:	030c      	lsls	r4, r1, #12
    9e9a:	4698      	mov	r8, r3
    9e9c:	004e      	lsls	r6, r1, #1
    9e9e:	0b23      	lsrs	r3, r4, #12
    9ea0:	b087      	sub	sp, #28
    9ea2:	0007      	movs	r7, r0
    9ea4:	4692      	mov	sl, r2
    9ea6:	469b      	mov	fp, r3
    9ea8:	0d76      	lsrs	r6, r6, #21
    9eaa:	0fcd      	lsrs	r5, r1, #31
    9eac:	2e00      	cmp	r6, #0
    9eae:	d06b      	beq.n	9f88 <__aeabi_dmul+0xfc>
    9eb0:	4b6d      	ldr	r3, [pc, #436]	; (a068 <__aeabi_dmul+0x1dc>)
    9eb2:	429e      	cmp	r6, r3
    9eb4:	d035      	beq.n	9f22 <__aeabi_dmul+0x96>
    9eb6:	2480      	movs	r4, #128	; 0x80
    9eb8:	465b      	mov	r3, fp
    9eba:	0f42      	lsrs	r2, r0, #29
    9ebc:	0424      	lsls	r4, r4, #16
    9ebe:	00db      	lsls	r3, r3, #3
    9ec0:	4314      	orrs	r4, r2
    9ec2:	431c      	orrs	r4, r3
    9ec4:	00c3      	lsls	r3, r0, #3
    9ec6:	4699      	mov	r9, r3
    9ec8:	4b68      	ldr	r3, [pc, #416]	; (a06c <__aeabi_dmul+0x1e0>)
    9eca:	46a3      	mov	fp, r4
    9ecc:	469c      	mov	ip, r3
    9ece:	2300      	movs	r3, #0
    9ed0:	2700      	movs	r7, #0
    9ed2:	4466      	add	r6, ip
    9ed4:	9302      	str	r3, [sp, #8]
    9ed6:	4643      	mov	r3, r8
    9ed8:	031c      	lsls	r4, r3, #12
    9eda:	005a      	lsls	r2, r3, #1
    9edc:	0fdb      	lsrs	r3, r3, #31
    9ede:	4650      	mov	r0, sl
    9ee0:	0b24      	lsrs	r4, r4, #12
    9ee2:	0d52      	lsrs	r2, r2, #21
    9ee4:	4698      	mov	r8, r3
    9ee6:	d100      	bne.n	9eea <__aeabi_dmul+0x5e>
    9ee8:	e076      	b.n	9fd8 <__aeabi_dmul+0x14c>
    9eea:	4b5f      	ldr	r3, [pc, #380]	; (a068 <__aeabi_dmul+0x1dc>)
    9eec:	429a      	cmp	r2, r3
    9eee:	d06d      	beq.n	9fcc <__aeabi_dmul+0x140>
    9ef0:	2380      	movs	r3, #128	; 0x80
    9ef2:	0f41      	lsrs	r1, r0, #29
    9ef4:	041b      	lsls	r3, r3, #16
    9ef6:	430b      	orrs	r3, r1
    9ef8:	495c      	ldr	r1, [pc, #368]	; (a06c <__aeabi_dmul+0x1e0>)
    9efa:	00e4      	lsls	r4, r4, #3
    9efc:	468c      	mov	ip, r1
    9efe:	431c      	orrs	r4, r3
    9f00:	00c3      	lsls	r3, r0, #3
    9f02:	2000      	movs	r0, #0
    9f04:	4462      	add	r2, ip
    9f06:	4641      	mov	r1, r8
    9f08:	18b6      	adds	r6, r6, r2
    9f0a:	4069      	eors	r1, r5
    9f0c:	1c72      	adds	r2, r6, #1
    9f0e:	9101      	str	r1, [sp, #4]
    9f10:	4694      	mov	ip, r2
    9f12:	4307      	orrs	r7, r0
    9f14:	2f0f      	cmp	r7, #15
    9f16:	d900      	bls.n	9f1a <__aeabi_dmul+0x8e>
    9f18:	e0b0      	b.n	a07c <__aeabi_dmul+0x1f0>
    9f1a:	4a55      	ldr	r2, [pc, #340]	; (a070 <__aeabi_dmul+0x1e4>)
    9f1c:	00bf      	lsls	r7, r7, #2
    9f1e:	59d2      	ldr	r2, [r2, r7]
    9f20:	4697      	mov	pc, r2
    9f22:	465b      	mov	r3, fp
    9f24:	4303      	orrs	r3, r0
    9f26:	4699      	mov	r9, r3
    9f28:	d000      	beq.n	9f2c <__aeabi_dmul+0xa0>
    9f2a:	e087      	b.n	a03c <__aeabi_dmul+0x1b0>
    9f2c:	2300      	movs	r3, #0
    9f2e:	469b      	mov	fp, r3
    9f30:	3302      	adds	r3, #2
    9f32:	2708      	movs	r7, #8
    9f34:	9302      	str	r3, [sp, #8]
    9f36:	e7ce      	b.n	9ed6 <__aeabi_dmul+0x4a>
    9f38:	4642      	mov	r2, r8
    9f3a:	9201      	str	r2, [sp, #4]
    9f3c:	2802      	cmp	r0, #2
    9f3e:	d067      	beq.n	a010 <__aeabi_dmul+0x184>
    9f40:	2803      	cmp	r0, #3
    9f42:	d100      	bne.n	9f46 <__aeabi_dmul+0xba>
    9f44:	e20e      	b.n	a364 <__aeabi_dmul+0x4d8>
    9f46:	2801      	cmp	r0, #1
    9f48:	d000      	beq.n	9f4c <__aeabi_dmul+0xc0>
    9f4a:	e162      	b.n	a212 <__aeabi_dmul+0x386>
    9f4c:	2300      	movs	r3, #0
    9f4e:	2400      	movs	r4, #0
    9f50:	2200      	movs	r2, #0
    9f52:	4699      	mov	r9, r3
    9f54:	9901      	ldr	r1, [sp, #4]
    9f56:	4001      	ands	r1, r0
    9f58:	b2cd      	uxtb	r5, r1
    9f5a:	2100      	movs	r1, #0
    9f5c:	0312      	lsls	r2, r2, #12
    9f5e:	0d0b      	lsrs	r3, r1, #20
    9f60:	0b12      	lsrs	r2, r2, #12
    9f62:	051b      	lsls	r3, r3, #20
    9f64:	4313      	orrs	r3, r2
    9f66:	4a43      	ldr	r2, [pc, #268]	; (a074 <__aeabi_dmul+0x1e8>)
    9f68:	0524      	lsls	r4, r4, #20
    9f6a:	4013      	ands	r3, r2
    9f6c:	431c      	orrs	r4, r3
    9f6e:	0064      	lsls	r4, r4, #1
    9f70:	07ed      	lsls	r5, r5, #31
    9f72:	0864      	lsrs	r4, r4, #1
    9f74:	432c      	orrs	r4, r5
    9f76:	4648      	mov	r0, r9
    9f78:	0021      	movs	r1, r4
    9f7a:	b007      	add	sp, #28
    9f7c:	bc3c      	pop	{r2, r3, r4, r5}
    9f7e:	4690      	mov	r8, r2
    9f80:	4699      	mov	r9, r3
    9f82:	46a2      	mov	sl, r4
    9f84:	46ab      	mov	fp, r5
    9f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f88:	4303      	orrs	r3, r0
    9f8a:	4699      	mov	r9, r3
    9f8c:	d04f      	beq.n	a02e <__aeabi_dmul+0x1a2>
    9f8e:	465b      	mov	r3, fp
    9f90:	2b00      	cmp	r3, #0
    9f92:	d100      	bne.n	9f96 <__aeabi_dmul+0x10a>
    9f94:	e189      	b.n	a2aa <__aeabi_dmul+0x41e>
    9f96:	4658      	mov	r0, fp
    9f98:	f000 feb8 	bl	ad0c <__clzsi2>
    9f9c:	0003      	movs	r3, r0
    9f9e:	3b0b      	subs	r3, #11
    9fa0:	2b1c      	cmp	r3, #28
    9fa2:	dd00      	ble.n	9fa6 <__aeabi_dmul+0x11a>
    9fa4:	e17a      	b.n	a29c <__aeabi_dmul+0x410>
    9fa6:	221d      	movs	r2, #29
    9fa8:	1ad3      	subs	r3, r2, r3
    9faa:	003a      	movs	r2, r7
    9fac:	0001      	movs	r1, r0
    9fae:	465c      	mov	r4, fp
    9fb0:	40da      	lsrs	r2, r3
    9fb2:	3908      	subs	r1, #8
    9fb4:	408c      	lsls	r4, r1
    9fb6:	0013      	movs	r3, r2
    9fb8:	408f      	lsls	r7, r1
    9fba:	4323      	orrs	r3, r4
    9fbc:	469b      	mov	fp, r3
    9fbe:	46b9      	mov	r9, r7
    9fc0:	2300      	movs	r3, #0
    9fc2:	4e2d      	ldr	r6, [pc, #180]	; (a078 <__aeabi_dmul+0x1ec>)
    9fc4:	2700      	movs	r7, #0
    9fc6:	1a36      	subs	r6, r6, r0
    9fc8:	9302      	str	r3, [sp, #8]
    9fca:	e784      	b.n	9ed6 <__aeabi_dmul+0x4a>
    9fcc:	4653      	mov	r3, sl
    9fce:	4323      	orrs	r3, r4
    9fd0:	d12a      	bne.n	a028 <__aeabi_dmul+0x19c>
    9fd2:	2400      	movs	r4, #0
    9fd4:	2002      	movs	r0, #2
    9fd6:	e796      	b.n	9f06 <__aeabi_dmul+0x7a>
    9fd8:	4653      	mov	r3, sl
    9fda:	4323      	orrs	r3, r4
    9fdc:	d020      	beq.n	a020 <__aeabi_dmul+0x194>
    9fde:	2c00      	cmp	r4, #0
    9fe0:	d100      	bne.n	9fe4 <__aeabi_dmul+0x158>
    9fe2:	e157      	b.n	a294 <__aeabi_dmul+0x408>
    9fe4:	0020      	movs	r0, r4
    9fe6:	f000 fe91 	bl	ad0c <__clzsi2>
    9fea:	0003      	movs	r3, r0
    9fec:	3b0b      	subs	r3, #11
    9fee:	2b1c      	cmp	r3, #28
    9ff0:	dd00      	ble.n	9ff4 <__aeabi_dmul+0x168>
    9ff2:	e149      	b.n	a288 <__aeabi_dmul+0x3fc>
    9ff4:	211d      	movs	r1, #29
    9ff6:	1acb      	subs	r3, r1, r3
    9ff8:	4651      	mov	r1, sl
    9ffa:	0002      	movs	r2, r0
    9ffc:	40d9      	lsrs	r1, r3
    9ffe:	4653      	mov	r3, sl
    a000:	3a08      	subs	r2, #8
    a002:	4094      	lsls	r4, r2
    a004:	4093      	lsls	r3, r2
    a006:	430c      	orrs	r4, r1
    a008:	4a1b      	ldr	r2, [pc, #108]	; (a078 <__aeabi_dmul+0x1ec>)
    a00a:	1a12      	subs	r2, r2, r0
    a00c:	2000      	movs	r0, #0
    a00e:	e77a      	b.n	9f06 <__aeabi_dmul+0x7a>
    a010:	2501      	movs	r5, #1
    a012:	9b01      	ldr	r3, [sp, #4]
    a014:	4c14      	ldr	r4, [pc, #80]	; (a068 <__aeabi_dmul+0x1dc>)
    a016:	401d      	ands	r5, r3
    a018:	2300      	movs	r3, #0
    a01a:	2200      	movs	r2, #0
    a01c:	4699      	mov	r9, r3
    a01e:	e79c      	b.n	9f5a <__aeabi_dmul+0xce>
    a020:	2400      	movs	r4, #0
    a022:	2200      	movs	r2, #0
    a024:	2001      	movs	r0, #1
    a026:	e76e      	b.n	9f06 <__aeabi_dmul+0x7a>
    a028:	4653      	mov	r3, sl
    a02a:	2003      	movs	r0, #3
    a02c:	e76b      	b.n	9f06 <__aeabi_dmul+0x7a>
    a02e:	2300      	movs	r3, #0
    a030:	469b      	mov	fp, r3
    a032:	3301      	adds	r3, #1
    a034:	2704      	movs	r7, #4
    a036:	2600      	movs	r6, #0
    a038:	9302      	str	r3, [sp, #8]
    a03a:	e74c      	b.n	9ed6 <__aeabi_dmul+0x4a>
    a03c:	2303      	movs	r3, #3
    a03e:	4681      	mov	r9, r0
    a040:	270c      	movs	r7, #12
    a042:	9302      	str	r3, [sp, #8]
    a044:	e747      	b.n	9ed6 <__aeabi_dmul+0x4a>
    a046:	2280      	movs	r2, #128	; 0x80
    a048:	2300      	movs	r3, #0
    a04a:	2500      	movs	r5, #0
    a04c:	0312      	lsls	r2, r2, #12
    a04e:	4699      	mov	r9, r3
    a050:	4c05      	ldr	r4, [pc, #20]	; (a068 <__aeabi_dmul+0x1dc>)
    a052:	e782      	b.n	9f5a <__aeabi_dmul+0xce>
    a054:	465c      	mov	r4, fp
    a056:	464b      	mov	r3, r9
    a058:	9802      	ldr	r0, [sp, #8]
    a05a:	e76f      	b.n	9f3c <__aeabi_dmul+0xb0>
    a05c:	465c      	mov	r4, fp
    a05e:	464b      	mov	r3, r9
    a060:	9501      	str	r5, [sp, #4]
    a062:	9802      	ldr	r0, [sp, #8]
    a064:	e76a      	b.n	9f3c <__aeabi_dmul+0xb0>
    a066:	46c0      	nop			; (mov r8, r8)
    a068:	000007ff 	.word	0x000007ff
    a06c:	fffffc01 	.word	0xfffffc01
    a070:	0000b7d8 	.word	0x0000b7d8
    a074:	800fffff 	.word	0x800fffff
    a078:	fffffc0d 	.word	0xfffffc0d
    a07c:	464a      	mov	r2, r9
    a07e:	4649      	mov	r1, r9
    a080:	0c17      	lsrs	r7, r2, #16
    a082:	0c1a      	lsrs	r2, r3, #16
    a084:	041b      	lsls	r3, r3, #16
    a086:	0c1b      	lsrs	r3, r3, #16
    a088:	0408      	lsls	r0, r1, #16
    a08a:	0019      	movs	r1, r3
    a08c:	0c00      	lsrs	r0, r0, #16
    a08e:	4341      	muls	r1, r0
    a090:	0015      	movs	r5, r2
    a092:	4688      	mov	r8, r1
    a094:	0019      	movs	r1, r3
    a096:	437d      	muls	r5, r7
    a098:	4379      	muls	r1, r7
    a09a:	9503      	str	r5, [sp, #12]
    a09c:	4689      	mov	r9, r1
    a09e:	0029      	movs	r1, r5
    a0a0:	0015      	movs	r5, r2
    a0a2:	4345      	muls	r5, r0
    a0a4:	444d      	add	r5, r9
    a0a6:	9502      	str	r5, [sp, #8]
    a0a8:	4645      	mov	r5, r8
    a0aa:	0c2d      	lsrs	r5, r5, #16
    a0ac:	46aa      	mov	sl, r5
    a0ae:	9d02      	ldr	r5, [sp, #8]
    a0b0:	4455      	add	r5, sl
    a0b2:	45a9      	cmp	r9, r5
    a0b4:	d906      	bls.n	a0c4 <__aeabi_dmul+0x238>
    a0b6:	468a      	mov	sl, r1
    a0b8:	2180      	movs	r1, #128	; 0x80
    a0ba:	0249      	lsls	r1, r1, #9
    a0bc:	4689      	mov	r9, r1
    a0be:	44ca      	add	sl, r9
    a0c0:	4651      	mov	r1, sl
    a0c2:	9103      	str	r1, [sp, #12]
    a0c4:	0c29      	lsrs	r1, r5, #16
    a0c6:	9104      	str	r1, [sp, #16]
    a0c8:	4641      	mov	r1, r8
    a0ca:	0409      	lsls	r1, r1, #16
    a0cc:	042d      	lsls	r5, r5, #16
    a0ce:	0c09      	lsrs	r1, r1, #16
    a0d0:	4688      	mov	r8, r1
    a0d2:	0029      	movs	r1, r5
    a0d4:	0c25      	lsrs	r5, r4, #16
    a0d6:	0424      	lsls	r4, r4, #16
    a0d8:	4441      	add	r1, r8
    a0da:	0c24      	lsrs	r4, r4, #16
    a0dc:	9105      	str	r1, [sp, #20]
    a0de:	0021      	movs	r1, r4
    a0e0:	4341      	muls	r1, r0
    a0e2:	4688      	mov	r8, r1
    a0e4:	0021      	movs	r1, r4
    a0e6:	4379      	muls	r1, r7
    a0e8:	468a      	mov	sl, r1
    a0ea:	4368      	muls	r0, r5
    a0ec:	4641      	mov	r1, r8
    a0ee:	4450      	add	r0, sl
    a0f0:	4681      	mov	r9, r0
    a0f2:	0c08      	lsrs	r0, r1, #16
    a0f4:	4448      	add	r0, r9
    a0f6:	436f      	muls	r7, r5
    a0f8:	4582      	cmp	sl, r0
    a0fa:	d903      	bls.n	a104 <__aeabi_dmul+0x278>
    a0fc:	2180      	movs	r1, #128	; 0x80
    a0fe:	0249      	lsls	r1, r1, #9
    a100:	4689      	mov	r9, r1
    a102:	444f      	add	r7, r9
    a104:	0c01      	lsrs	r1, r0, #16
    a106:	4689      	mov	r9, r1
    a108:	0039      	movs	r1, r7
    a10a:	4449      	add	r1, r9
    a10c:	9102      	str	r1, [sp, #8]
    a10e:	4641      	mov	r1, r8
    a110:	040f      	lsls	r7, r1, #16
    a112:	9904      	ldr	r1, [sp, #16]
    a114:	0c3f      	lsrs	r7, r7, #16
    a116:	4688      	mov	r8, r1
    a118:	0400      	lsls	r0, r0, #16
    a11a:	19c0      	adds	r0, r0, r7
    a11c:	4480      	add	r8, r0
    a11e:	4641      	mov	r1, r8
    a120:	9104      	str	r1, [sp, #16]
    a122:	4659      	mov	r1, fp
    a124:	0c0f      	lsrs	r7, r1, #16
    a126:	0409      	lsls	r1, r1, #16
    a128:	0c09      	lsrs	r1, r1, #16
    a12a:	4688      	mov	r8, r1
    a12c:	4359      	muls	r1, r3
    a12e:	468a      	mov	sl, r1
    a130:	0039      	movs	r1, r7
    a132:	4351      	muls	r1, r2
    a134:	4689      	mov	r9, r1
    a136:	4641      	mov	r1, r8
    a138:	434a      	muls	r2, r1
    a13a:	4651      	mov	r1, sl
    a13c:	0c09      	lsrs	r1, r1, #16
    a13e:	468b      	mov	fp, r1
    a140:	437b      	muls	r3, r7
    a142:	18d2      	adds	r2, r2, r3
    a144:	445a      	add	r2, fp
    a146:	4293      	cmp	r3, r2
    a148:	d903      	bls.n	a152 <__aeabi_dmul+0x2c6>
    a14a:	2380      	movs	r3, #128	; 0x80
    a14c:	025b      	lsls	r3, r3, #9
    a14e:	469b      	mov	fp, r3
    a150:	44d9      	add	r9, fp
    a152:	4651      	mov	r1, sl
    a154:	0409      	lsls	r1, r1, #16
    a156:	0c09      	lsrs	r1, r1, #16
    a158:	468a      	mov	sl, r1
    a15a:	4641      	mov	r1, r8
    a15c:	4361      	muls	r1, r4
    a15e:	437c      	muls	r4, r7
    a160:	0c13      	lsrs	r3, r2, #16
    a162:	0412      	lsls	r2, r2, #16
    a164:	444b      	add	r3, r9
    a166:	4452      	add	r2, sl
    a168:	46a1      	mov	r9, r4
    a16a:	468a      	mov	sl, r1
    a16c:	003c      	movs	r4, r7
    a16e:	4641      	mov	r1, r8
    a170:	436c      	muls	r4, r5
    a172:	434d      	muls	r5, r1
    a174:	4651      	mov	r1, sl
    a176:	444d      	add	r5, r9
    a178:	0c0f      	lsrs	r7, r1, #16
    a17a:	197d      	adds	r5, r7, r5
    a17c:	45a9      	cmp	r9, r5
    a17e:	d903      	bls.n	a188 <__aeabi_dmul+0x2fc>
    a180:	2180      	movs	r1, #128	; 0x80
    a182:	0249      	lsls	r1, r1, #9
    a184:	4688      	mov	r8, r1
    a186:	4444      	add	r4, r8
    a188:	9f04      	ldr	r7, [sp, #16]
    a18a:	9903      	ldr	r1, [sp, #12]
    a18c:	46b8      	mov	r8, r7
    a18e:	4441      	add	r1, r8
    a190:	468b      	mov	fp, r1
    a192:	4583      	cmp	fp, r0
    a194:	4180      	sbcs	r0, r0
    a196:	4241      	negs	r1, r0
    a198:	4688      	mov	r8, r1
    a19a:	4651      	mov	r1, sl
    a19c:	0408      	lsls	r0, r1, #16
    a19e:	042f      	lsls	r7, r5, #16
    a1a0:	0c00      	lsrs	r0, r0, #16
    a1a2:	183f      	adds	r7, r7, r0
    a1a4:	4658      	mov	r0, fp
    a1a6:	9902      	ldr	r1, [sp, #8]
    a1a8:	1810      	adds	r0, r2, r0
    a1aa:	4689      	mov	r9, r1
    a1ac:	4290      	cmp	r0, r2
    a1ae:	4192      	sbcs	r2, r2
    a1b0:	444f      	add	r7, r9
    a1b2:	46ba      	mov	sl, r7
    a1b4:	4252      	negs	r2, r2
    a1b6:	4699      	mov	r9, r3
    a1b8:	4693      	mov	fp, r2
    a1ba:	44c2      	add	sl, r8
    a1bc:	44d1      	add	r9, sl
    a1be:	44cb      	add	fp, r9
    a1c0:	428f      	cmp	r7, r1
    a1c2:	41bf      	sbcs	r7, r7
    a1c4:	45c2      	cmp	sl, r8
    a1c6:	4189      	sbcs	r1, r1
    a1c8:	4599      	cmp	r9, r3
    a1ca:	419b      	sbcs	r3, r3
    a1cc:	4593      	cmp	fp, r2
    a1ce:	4192      	sbcs	r2, r2
    a1d0:	427f      	negs	r7, r7
    a1d2:	4249      	negs	r1, r1
    a1d4:	0c2d      	lsrs	r5, r5, #16
    a1d6:	4252      	negs	r2, r2
    a1d8:	430f      	orrs	r7, r1
    a1da:	425b      	negs	r3, r3
    a1dc:	4313      	orrs	r3, r2
    a1de:	197f      	adds	r7, r7, r5
    a1e0:	18ff      	adds	r7, r7, r3
    a1e2:	465b      	mov	r3, fp
    a1e4:	193c      	adds	r4, r7, r4
    a1e6:	0ddb      	lsrs	r3, r3, #23
    a1e8:	9a05      	ldr	r2, [sp, #20]
    a1ea:	0264      	lsls	r4, r4, #9
    a1ec:	431c      	orrs	r4, r3
    a1ee:	0243      	lsls	r3, r0, #9
    a1f0:	4313      	orrs	r3, r2
    a1f2:	1e5d      	subs	r5, r3, #1
    a1f4:	41ab      	sbcs	r3, r5
    a1f6:	465a      	mov	r2, fp
    a1f8:	0dc0      	lsrs	r0, r0, #23
    a1fa:	4303      	orrs	r3, r0
    a1fc:	0252      	lsls	r2, r2, #9
    a1fe:	4313      	orrs	r3, r2
    a200:	01e2      	lsls	r2, r4, #7
    a202:	d556      	bpl.n	a2b2 <__aeabi_dmul+0x426>
    a204:	2001      	movs	r0, #1
    a206:	085a      	lsrs	r2, r3, #1
    a208:	4003      	ands	r3, r0
    a20a:	4313      	orrs	r3, r2
    a20c:	07e2      	lsls	r2, r4, #31
    a20e:	4313      	orrs	r3, r2
    a210:	0864      	lsrs	r4, r4, #1
    a212:	485a      	ldr	r0, [pc, #360]	; (a37c <__aeabi_dmul+0x4f0>)
    a214:	4460      	add	r0, ip
    a216:	2800      	cmp	r0, #0
    a218:	dd4d      	ble.n	a2b6 <__aeabi_dmul+0x42a>
    a21a:	075a      	lsls	r2, r3, #29
    a21c:	d009      	beq.n	a232 <__aeabi_dmul+0x3a6>
    a21e:	220f      	movs	r2, #15
    a220:	401a      	ands	r2, r3
    a222:	2a04      	cmp	r2, #4
    a224:	d005      	beq.n	a232 <__aeabi_dmul+0x3a6>
    a226:	1d1a      	adds	r2, r3, #4
    a228:	429a      	cmp	r2, r3
    a22a:	419b      	sbcs	r3, r3
    a22c:	425b      	negs	r3, r3
    a22e:	18e4      	adds	r4, r4, r3
    a230:	0013      	movs	r3, r2
    a232:	01e2      	lsls	r2, r4, #7
    a234:	d504      	bpl.n	a240 <__aeabi_dmul+0x3b4>
    a236:	2080      	movs	r0, #128	; 0x80
    a238:	4a51      	ldr	r2, [pc, #324]	; (a380 <__aeabi_dmul+0x4f4>)
    a23a:	00c0      	lsls	r0, r0, #3
    a23c:	4014      	ands	r4, r2
    a23e:	4460      	add	r0, ip
    a240:	4a50      	ldr	r2, [pc, #320]	; (a384 <__aeabi_dmul+0x4f8>)
    a242:	4290      	cmp	r0, r2
    a244:	dd00      	ble.n	a248 <__aeabi_dmul+0x3bc>
    a246:	e6e3      	b.n	a010 <__aeabi_dmul+0x184>
    a248:	2501      	movs	r5, #1
    a24a:	08db      	lsrs	r3, r3, #3
    a24c:	0762      	lsls	r2, r4, #29
    a24e:	431a      	orrs	r2, r3
    a250:	0264      	lsls	r4, r4, #9
    a252:	9b01      	ldr	r3, [sp, #4]
    a254:	4691      	mov	r9, r2
    a256:	0b22      	lsrs	r2, r4, #12
    a258:	0544      	lsls	r4, r0, #21
    a25a:	0d64      	lsrs	r4, r4, #21
    a25c:	401d      	ands	r5, r3
    a25e:	e67c      	b.n	9f5a <__aeabi_dmul+0xce>
    a260:	2280      	movs	r2, #128	; 0x80
    a262:	4659      	mov	r1, fp
    a264:	0312      	lsls	r2, r2, #12
    a266:	4211      	tst	r1, r2
    a268:	d008      	beq.n	a27c <__aeabi_dmul+0x3f0>
    a26a:	4214      	tst	r4, r2
    a26c:	d106      	bne.n	a27c <__aeabi_dmul+0x3f0>
    a26e:	4322      	orrs	r2, r4
    a270:	0312      	lsls	r2, r2, #12
    a272:	0b12      	lsrs	r2, r2, #12
    a274:	4645      	mov	r5, r8
    a276:	4699      	mov	r9, r3
    a278:	4c43      	ldr	r4, [pc, #268]	; (a388 <__aeabi_dmul+0x4fc>)
    a27a:	e66e      	b.n	9f5a <__aeabi_dmul+0xce>
    a27c:	465b      	mov	r3, fp
    a27e:	431a      	orrs	r2, r3
    a280:	0312      	lsls	r2, r2, #12
    a282:	0b12      	lsrs	r2, r2, #12
    a284:	4c40      	ldr	r4, [pc, #256]	; (a388 <__aeabi_dmul+0x4fc>)
    a286:	e668      	b.n	9f5a <__aeabi_dmul+0xce>
    a288:	0003      	movs	r3, r0
    a28a:	4654      	mov	r4, sl
    a28c:	3b28      	subs	r3, #40	; 0x28
    a28e:	409c      	lsls	r4, r3
    a290:	2300      	movs	r3, #0
    a292:	e6b9      	b.n	a008 <__aeabi_dmul+0x17c>
    a294:	f000 fd3a 	bl	ad0c <__clzsi2>
    a298:	3020      	adds	r0, #32
    a29a:	e6a6      	b.n	9fea <__aeabi_dmul+0x15e>
    a29c:	0003      	movs	r3, r0
    a29e:	3b28      	subs	r3, #40	; 0x28
    a2a0:	409f      	lsls	r7, r3
    a2a2:	2300      	movs	r3, #0
    a2a4:	46bb      	mov	fp, r7
    a2a6:	4699      	mov	r9, r3
    a2a8:	e68a      	b.n	9fc0 <__aeabi_dmul+0x134>
    a2aa:	f000 fd2f 	bl	ad0c <__clzsi2>
    a2ae:	3020      	adds	r0, #32
    a2b0:	e674      	b.n	9f9c <__aeabi_dmul+0x110>
    a2b2:	46b4      	mov	ip, r6
    a2b4:	e7ad      	b.n	a212 <__aeabi_dmul+0x386>
    a2b6:	2501      	movs	r5, #1
    a2b8:	1a2a      	subs	r2, r5, r0
    a2ba:	2a38      	cmp	r2, #56	; 0x38
    a2bc:	dd06      	ble.n	a2cc <__aeabi_dmul+0x440>
    a2be:	9b01      	ldr	r3, [sp, #4]
    a2c0:	2400      	movs	r4, #0
    a2c2:	401d      	ands	r5, r3
    a2c4:	2300      	movs	r3, #0
    a2c6:	2200      	movs	r2, #0
    a2c8:	4699      	mov	r9, r3
    a2ca:	e646      	b.n	9f5a <__aeabi_dmul+0xce>
    a2cc:	2a1f      	cmp	r2, #31
    a2ce:	dc21      	bgt.n	a314 <__aeabi_dmul+0x488>
    a2d0:	2520      	movs	r5, #32
    a2d2:	0020      	movs	r0, r4
    a2d4:	1aad      	subs	r5, r5, r2
    a2d6:	001e      	movs	r6, r3
    a2d8:	40ab      	lsls	r3, r5
    a2da:	40a8      	lsls	r0, r5
    a2dc:	40d6      	lsrs	r6, r2
    a2de:	1e5d      	subs	r5, r3, #1
    a2e0:	41ab      	sbcs	r3, r5
    a2e2:	4330      	orrs	r0, r6
    a2e4:	4318      	orrs	r0, r3
    a2e6:	40d4      	lsrs	r4, r2
    a2e8:	0743      	lsls	r3, r0, #29
    a2ea:	d009      	beq.n	a300 <__aeabi_dmul+0x474>
    a2ec:	230f      	movs	r3, #15
    a2ee:	4003      	ands	r3, r0
    a2f0:	2b04      	cmp	r3, #4
    a2f2:	d005      	beq.n	a300 <__aeabi_dmul+0x474>
    a2f4:	0003      	movs	r3, r0
    a2f6:	1d18      	adds	r0, r3, #4
    a2f8:	4298      	cmp	r0, r3
    a2fa:	419b      	sbcs	r3, r3
    a2fc:	425b      	negs	r3, r3
    a2fe:	18e4      	adds	r4, r4, r3
    a300:	0223      	lsls	r3, r4, #8
    a302:	d521      	bpl.n	a348 <__aeabi_dmul+0x4bc>
    a304:	2501      	movs	r5, #1
    a306:	9b01      	ldr	r3, [sp, #4]
    a308:	2401      	movs	r4, #1
    a30a:	401d      	ands	r5, r3
    a30c:	2300      	movs	r3, #0
    a30e:	2200      	movs	r2, #0
    a310:	4699      	mov	r9, r3
    a312:	e622      	b.n	9f5a <__aeabi_dmul+0xce>
    a314:	251f      	movs	r5, #31
    a316:	0021      	movs	r1, r4
    a318:	426d      	negs	r5, r5
    a31a:	1a28      	subs	r0, r5, r0
    a31c:	40c1      	lsrs	r1, r0
    a31e:	0008      	movs	r0, r1
    a320:	2a20      	cmp	r2, #32
    a322:	d01d      	beq.n	a360 <__aeabi_dmul+0x4d4>
    a324:	355f      	adds	r5, #95	; 0x5f
    a326:	1aaa      	subs	r2, r5, r2
    a328:	4094      	lsls	r4, r2
    a32a:	4323      	orrs	r3, r4
    a32c:	1e5c      	subs	r4, r3, #1
    a32e:	41a3      	sbcs	r3, r4
    a330:	2507      	movs	r5, #7
    a332:	4303      	orrs	r3, r0
    a334:	401d      	ands	r5, r3
    a336:	2200      	movs	r2, #0
    a338:	2d00      	cmp	r5, #0
    a33a:	d009      	beq.n	a350 <__aeabi_dmul+0x4c4>
    a33c:	220f      	movs	r2, #15
    a33e:	2400      	movs	r4, #0
    a340:	401a      	ands	r2, r3
    a342:	0018      	movs	r0, r3
    a344:	2a04      	cmp	r2, #4
    a346:	d1d6      	bne.n	a2f6 <__aeabi_dmul+0x46a>
    a348:	0003      	movs	r3, r0
    a34a:	0765      	lsls	r5, r4, #29
    a34c:	0264      	lsls	r4, r4, #9
    a34e:	0b22      	lsrs	r2, r4, #12
    a350:	08db      	lsrs	r3, r3, #3
    a352:	432b      	orrs	r3, r5
    a354:	2501      	movs	r5, #1
    a356:	4699      	mov	r9, r3
    a358:	9b01      	ldr	r3, [sp, #4]
    a35a:	2400      	movs	r4, #0
    a35c:	401d      	ands	r5, r3
    a35e:	e5fc      	b.n	9f5a <__aeabi_dmul+0xce>
    a360:	2400      	movs	r4, #0
    a362:	e7e2      	b.n	a32a <__aeabi_dmul+0x49e>
    a364:	2280      	movs	r2, #128	; 0x80
    a366:	2501      	movs	r5, #1
    a368:	0312      	lsls	r2, r2, #12
    a36a:	4322      	orrs	r2, r4
    a36c:	9901      	ldr	r1, [sp, #4]
    a36e:	0312      	lsls	r2, r2, #12
    a370:	0b12      	lsrs	r2, r2, #12
    a372:	400d      	ands	r5, r1
    a374:	4699      	mov	r9, r3
    a376:	4c04      	ldr	r4, [pc, #16]	; (a388 <__aeabi_dmul+0x4fc>)
    a378:	e5ef      	b.n	9f5a <__aeabi_dmul+0xce>
    a37a:	46c0      	nop			; (mov r8, r8)
    a37c:	000003ff 	.word	0x000003ff
    a380:	feffffff 	.word	0xfeffffff
    a384:	000007fe 	.word	0x000007fe
    a388:	000007ff 	.word	0x000007ff

0000a38c <__aeabi_dsub>:
    a38c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a38e:	4646      	mov	r6, r8
    a390:	46d6      	mov	lr, sl
    a392:	464f      	mov	r7, r9
    a394:	030c      	lsls	r4, r1, #12
    a396:	b5c0      	push	{r6, r7, lr}
    a398:	0fcd      	lsrs	r5, r1, #31
    a39a:	004e      	lsls	r6, r1, #1
    a39c:	0a61      	lsrs	r1, r4, #9
    a39e:	0f44      	lsrs	r4, r0, #29
    a3a0:	430c      	orrs	r4, r1
    a3a2:	00c1      	lsls	r1, r0, #3
    a3a4:	0058      	lsls	r0, r3, #1
    a3a6:	0d40      	lsrs	r0, r0, #21
    a3a8:	4684      	mov	ip, r0
    a3aa:	468a      	mov	sl, r1
    a3ac:	000f      	movs	r7, r1
    a3ae:	0319      	lsls	r1, r3, #12
    a3b0:	0f50      	lsrs	r0, r2, #29
    a3b2:	0a49      	lsrs	r1, r1, #9
    a3b4:	4301      	orrs	r1, r0
    a3b6:	48c6      	ldr	r0, [pc, #792]	; (a6d0 <__aeabi_dsub+0x344>)
    a3b8:	0d76      	lsrs	r6, r6, #21
    a3ba:	46a8      	mov	r8, r5
    a3bc:	0fdb      	lsrs	r3, r3, #31
    a3be:	00d2      	lsls	r2, r2, #3
    a3c0:	4584      	cmp	ip, r0
    a3c2:	d100      	bne.n	a3c6 <__aeabi_dsub+0x3a>
    a3c4:	e0d8      	b.n	a578 <__aeabi_dsub+0x1ec>
    a3c6:	2001      	movs	r0, #1
    a3c8:	4043      	eors	r3, r0
    a3ca:	42ab      	cmp	r3, r5
    a3cc:	d100      	bne.n	a3d0 <__aeabi_dsub+0x44>
    a3ce:	e0a6      	b.n	a51e <__aeabi_dsub+0x192>
    a3d0:	4660      	mov	r0, ip
    a3d2:	1a35      	subs	r5, r6, r0
    a3d4:	2d00      	cmp	r5, #0
    a3d6:	dc00      	bgt.n	a3da <__aeabi_dsub+0x4e>
    a3d8:	e105      	b.n	a5e6 <__aeabi_dsub+0x25a>
    a3da:	2800      	cmp	r0, #0
    a3dc:	d110      	bne.n	a400 <__aeabi_dsub+0x74>
    a3de:	000b      	movs	r3, r1
    a3e0:	4313      	orrs	r3, r2
    a3e2:	d100      	bne.n	a3e6 <__aeabi_dsub+0x5a>
    a3e4:	e0d7      	b.n	a596 <__aeabi_dsub+0x20a>
    a3e6:	1e6b      	subs	r3, r5, #1
    a3e8:	2b00      	cmp	r3, #0
    a3ea:	d000      	beq.n	a3ee <__aeabi_dsub+0x62>
    a3ec:	e14b      	b.n	a686 <__aeabi_dsub+0x2fa>
    a3ee:	4653      	mov	r3, sl
    a3f0:	1a9f      	subs	r7, r3, r2
    a3f2:	45ba      	cmp	sl, r7
    a3f4:	4180      	sbcs	r0, r0
    a3f6:	1a64      	subs	r4, r4, r1
    a3f8:	4240      	negs	r0, r0
    a3fa:	1a24      	subs	r4, r4, r0
    a3fc:	2601      	movs	r6, #1
    a3fe:	e01e      	b.n	a43e <__aeabi_dsub+0xb2>
    a400:	4bb3      	ldr	r3, [pc, #716]	; (a6d0 <__aeabi_dsub+0x344>)
    a402:	429e      	cmp	r6, r3
    a404:	d048      	beq.n	a498 <__aeabi_dsub+0x10c>
    a406:	2380      	movs	r3, #128	; 0x80
    a408:	041b      	lsls	r3, r3, #16
    a40a:	4319      	orrs	r1, r3
    a40c:	2d38      	cmp	r5, #56	; 0x38
    a40e:	dd00      	ble.n	a412 <__aeabi_dsub+0x86>
    a410:	e119      	b.n	a646 <__aeabi_dsub+0x2ba>
    a412:	2d1f      	cmp	r5, #31
    a414:	dd00      	ble.n	a418 <__aeabi_dsub+0x8c>
    a416:	e14c      	b.n	a6b2 <__aeabi_dsub+0x326>
    a418:	2320      	movs	r3, #32
    a41a:	000f      	movs	r7, r1
    a41c:	1b5b      	subs	r3, r3, r5
    a41e:	0010      	movs	r0, r2
    a420:	409a      	lsls	r2, r3
    a422:	409f      	lsls	r7, r3
    a424:	40e8      	lsrs	r0, r5
    a426:	1e53      	subs	r3, r2, #1
    a428:	419a      	sbcs	r2, r3
    a42a:	40e9      	lsrs	r1, r5
    a42c:	4307      	orrs	r7, r0
    a42e:	4317      	orrs	r7, r2
    a430:	4653      	mov	r3, sl
    a432:	1bdf      	subs	r7, r3, r7
    a434:	1a61      	subs	r1, r4, r1
    a436:	45ba      	cmp	sl, r7
    a438:	41a4      	sbcs	r4, r4
    a43a:	4264      	negs	r4, r4
    a43c:	1b0c      	subs	r4, r1, r4
    a43e:	0223      	lsls	r3, r4, #8
    a440:	d400      	bmi.n	a444 <__aeabi_dsub+0xb8>
    a442:	e0c5      	b.n	a5d0 <__aeabi_dsub+0x244>
    a444:	0264      	lsls	r4, r4, #9
    a446:	0a65      	lsrs	r5, r4, #9
    a448:	2d00      	cmp	r5, #0
    a44a:	d100      	bne.n	a44e <__aeabi_dsub+0xc2>
    a44c:	e0f6      	b.n	a63c <__aeabi_dsub+0x2b0>
    a44e:	0028      	movs	r0, r5
    a450:	f000 fc5c 	bl	ad0c <__clzsi2>
    a454:	0003      	movs	r3, r0
    a456:	3b08      	subs	r3, #8
    a458:	2b1f      	cmp	r3, #31
    a45a:	dd00      	ble.n	a45e <__aeabi_dsub+0xd2>
    a45c:	e0e9      	b.n	a632 <__aeabi_dsub+0x2a6>
    a45e:	2220      	movs	r2, #32
    a460:	003c      	movs	r4, r7
    a462:	1ad2      	subs	r2, r2, r3
    a464:	409d      	lsls	r5, r3
    a466:	40d4      	lsrs	r4, r2
    a468:	409f      	lsls	r7, r3
    a46a:	4325      	orrs	r5, r4
    a46c:	429e      	cmp	r6, r3
    a46e:	dd00      	ble.n	a472 <__aeabi_dsub+0xe6>
    a470:	e0db      	b.n	a62a <__aeabi_dsub+0x29e>
    a472:	1b9e      	subs	r6, r3, r6
    a474:	1c73      	adds	r3, r6, #1
    a476:	2b1f      	cmp	r3, #31
    a478:	dd00      	ble.n	a47c <__aeabi_dsub+0xf0>
    a47a:	e10a      	b.n	a692 <__aeabi_dsub+0x306>
    a47c:	2220      	movs	r2, #32
    a47e:	0038      	movs	r0, r7
    a480:	1ad2      	subs	r2, r2, r3
    a482:	0029      	movs	r1, r5
    a484:	4097      	lsls	r7, r2
    a486:	002c      	movs	r4, r5
    a488:	4091      	lsls	r1, r2
    a48a:	40d8      	lsrs	r0, r3
    a48c:	1e7a      	subs	r2, r7, #1
    a48e:	4197      	sbcs	r7, r2
    a490:	40dc      	lsrs	r4, r3
    a492:	2600      	movs	r6, #0
    a494:	4301      	orrs	r1, r0
    a496:	430f      	orrs	r7, r1
    a498:	077b      	lsls	r3, r7, #29
    a49a:	d009      	beq.n	a4b0 <__aeabi_dsub+0x124>
    a49c:	230f      	movs	r3, #15
    a49e:	403b      	ands	r3, r7
    a4a0:	2b04      	cmp	r3, #4
    a4a2:	d005      	beq.n	a4b0 <__aeabi_dsub+0x124>
    a4a4:	1d3b      	adds	r3, r7, #4
    a4a6:	42bb      	cmp	r3, r7
    a4a8:	41bf      	sbcs	r7, r7
    a4aa:	427f      	negs	r7, r7
    a4ac:	19e4      	adds	r4, r4, r7
    a4ae:	001f      	movs	r7, r3
    a4b0:	0223      	lsls	r3, r4, #8
    a4b2:	d525      	bpl.n	a500 <__aeabi_dsub+0x174>
    a4b4:	4b86      	ldr	r3, [pc, #536]	; (a6d0 <__aeabi_dsub+0x344>)
    a4b6:	3601      	adds	r6, #1
    a4b8:	429e      	cmp	r6, r3
    a4ba:	d100      	bne.n	a4be <__aeabi_dsub+0x132>
    a4bc:	e0af      	b.n	a61e <__aeabi_dsub+0x292>
    a4be:	4b85      	ldr	r3, [pc, #532]	; (a6d4 <__aeabi_dsub+0x348>)
    a4c0:	2501      	movs	r5, #1
    a4c2:	401c      	ands	r4, r3
    a4c4:	4643      	mov	r3, r8
    a4c6:	0762      	lsls	r2, r4, #29
    a4c8:	08ff      	lsrs	r7, r7, #3
    a4ca:	0264      	lsls	r4, r4, #9
    a4cc:	0576      	lsls	r6, r6, #21
    a4ce:	4317      	orrs	r7, r2
    a4d0:	0b24      	lsrs	r4, r4, #12
    a4d2:	0d76      	lsrs	r6, r6, #21
    a4d4:	401d      	ands	r5, r3
    a4d6:	2100      	movs	r1, #0
    a4d8:	0324      	lsls	r4, r4, #12
    a4da:	0b23      	lsrs	r3, r4, #12
    a4dc:	0d0c      	lsrs	r4, r1, #20
    a4de:	4a7e      	ldr	r2, [pc, #504]	; (a6d8 <__aeabi_dsub+0x34c>)
    a4e0:	0524      	lsls	r4, r4, #20
    a4e2:	431c      	orrs	r4, r3
    a4e4:	4014      	ands	r4, r2
    a4e6:	0533      	lsls	r3, r6, #20
    a4e8:	4323      	orrs	r3, r4
    a4ea:	005b      	lsls	r3, r3, #1
    a4ec:	07ed      	lsls	r5, r5, #31
    a4ee:	085b      	lsrs	r3, r3, #1
    a4f0:	432b      	orrs	r3, r5
    a4f2:	0038      	movs	r0, r7
    a4f4:	0019      	movs	r1, r3
    a4f6:	bc1c      	pop	{r2, r3, r4}
    a4f8:	4690      	mov	r8, r2
    a4fa:	4699      	mov	r9, r3
    a4fc:	46a2      	mov	sl, r4
    a4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a500:	2501      	movs	r5, #1
    a502:	4643      	mov	r3, r8
    a504:	0762      	lsls	r2, r4, #29
    a506:	08ff      	lsrs	r7, r7, #3
    a508:	4317      	orrs	r7, r2
    a50a:	08e4      	lsrs	r4, r4, #3
    a50c:	401d      	ands	r5, r3
    a50e:	4b70      	ldr	r3, [pc, #448]	; (a6d0 <__aeabi_dsub+0x344>)
    a510:	429e      	cmp	r6, r3
    a512:	d036      	beq.n	a582 <__aeabi_dsub+0x1f6>
    a514:	0324      	lsls	r4, r4, #12
    a516:	0576      	lsls	r6, r6, #21
    a518:	0b24      	lsrs	r4, r4, #12
    a51a:	0d76      	lsrs	r6, r6, #21
    a51c:	e7db      	b.n	a4d6 <__aeabi_dsub+0x14a>
    a51e:	4663      	mov	r3, ip
    a520:	1af3      	subs	r3, r6, r3
    a522:	2b00      	cmp	r3, #0
    a524:	dc00      	bgt.n	a528 <__aeabi_dsub+0x19c>
    a526:	e094      	b.n	a652 <__aeabi_dsub+0x2c6>
    a528:	4660      	mov	r0, ip
    a52a:	2800      	cmp	r0, #0
    a52c:	d035      	beq.n	a59a <__aeabi_dsub+0x20e>
    a52e:	4868      	ldr	r0, [pc, #416]	; (a6d0 <__aeabi_dsub+0x344>)
    a530:	4286      	cmp	r6, r0
    a532:	d0b1      	beq.n	a498 <__aeabi_dsub+0x10c>
    a534:	2780      	movs	r7, #128	; 0x80
    a536:	043f      	lsls	r7, r7, #16
    a538:	4339      	orrs	r1, r7
    a53a:	2b38      	cmp	r3, #56	; 0x38
    a53c:	dc00      	bgt.n	a540 <__aeabi_dsub+0x1b4>
    a53e:	e0fd      	b.n	a73c <__aeabi_dsub+0x3b0>
    a540:	430a      	orrs	r2, r1
    a542:	0017      	movs	r7, r2
    a544:	2100      	movs	r1, #0
    a546:	1e7a      	subs	r2, r7, #1
    a548:	4197      	sbcs	r7, r2
    a54a:	4457      	add	r7, sl
    a54c:	4557      	cmp	r7, sl
    a54e:	4180      	sbcs	r0, r0
    a550:	1909      	adds	r1, r1, r4
    a552:	4244      	negs	r4, r0
    a554:	190c      	adds	r4, r1, r4
    a556:	0223      	lsls	r3, r4, #8
    a558:	d53a      	bpl.n	a5d0 <__aeabi_dsub+0x244>
    a55a:	4b5d      	ldr	r3, [pc, #372]	; (a6d0 <__aeabi_dsub+0x344>)
    a55c:	3601      	adds	r6, #1
    a55e:	429e      	cmp	r6, r3
    a560:	d100      	bne.n	a564 <__aeabi_dsub+0x1d8>
    a562:	e14b      	b.n	a7fc <__aeabi_dsub+0x470>
    a564:	2201      	movs	r2, #1
    a566:	4b5b      	ldr	r3, [pc, #364]	; (a6d4 <__aeabi_dsub+0x348>)
    a568:	401c      	ands	r4, r3
    a56a:	087b      	lsrs	r3, r7, #1
    a56c:	4017      	ands	r7, r2
    a56e:	431f      	orrs	r7, r3
    a570:	07e2      	lsls	r2, r4, #31
    a572:	4317      	orrs	r7, r2
    a574:	0864      	lsrs	r4, r4, #1
    a576:	e78f      	b.n	a498 <__aeabi_dsub+0x10c>
    a578:	0008      	movs	r0, r1
    a57a:	4310      	orrs	r0, r2
    a57c:	d000      	beq.n	a580 <__aeabi_dsub+0x1f4>
    a57e:	e724      	b.n	a3ca <__aeabi_dsub+0x3e>
    a580:	e721      	b.n	a3c6 <__aeabi_dsub+0x3a>
    a582:	0023      	movs	r3, r4
    a584:	433b      	orrs	r3, r7
    a586:	d100      	bne.n	a58a <__aeabi_dsub+0x1fe>
    a588:	e1b9      	b.n	a8fe <__aeabi_dsub+0x572>
    a58a:	2280      	movs	r2, #128	; 0x80
    a58c:	0312      	lsls	r2, r2, #12
    a58e:	4314      	orrs	r4, r2
    a590:	0324      	lsls	r4, r4, #12
    a592:	0b24      	lsrs	r4, r4, #12
    a594:	e79f      	b.n	a4d6 <__aeabi_dsub+0x14a>
    a596:	002e      	movs	r6, r5
    a598:	e77e      	b.n	a498 <__aeabi_dsub+0x10c>
    a59a:	0008      	movs	r0, r1
    a59c:	4310      	orrs	r0, r2
    a59e:	d100      	bne.n	a5a2 <__aeabi_dsub+0x216>
    a5a0:	e0ca      	b.n	a738 <__aeabi_dsub+0x3ac>
    a5a2:	1e58      	subs	r0, r3, #1
    a5a4:	4684      	mov	ip, r0
    a5a6:	2800      	cmp	r0, #0
    a5a8:	d000      	beq.n	a5ac <__aeabi_dsub+0x220>
    a5aa:	e0e7      	b.n	a77c <__aeabi_dsub+0x3f0>
    a5ac:	4452      	add	r2, sl
    a5ae:	4552      	cmp	r2, sl
    a5b0:	4180      	sbcs	r0, r0
    a5b2:	1864      	adds	r4, r4, r1
    a5b4:	4240      	negs	r0, r0
    a5b6:	1824      	adds	r4, r4, r0
    a5b8:	0017      	movs	r7, r2
    a5ba:	2601      	movs	r6, #1
    a5bc:	0223      	lsls	r3, r4, #8
    a5be:	d507      	bpl.n	a5d0 <__aeabi_dsub+0x244>
    a5c0:	2602      	movs	r6, #2
    a5c2:	e7cf      	b.n	a564 <__aeabi_dsub+0x1d8>
    a5c4:	4664      	mov	r4, ip
    a5c6:	432c      	orrs	r4, r5
    a5c8:	d100      	bne.n	a5cc <__aeabi_dsub+0x240>
    a5ca:	e1b3      	b.n	a934 <__aeabi_dsub+0x5a8>
    a5cc:	002c      	movs	r4, r5
    a5ce:	4667      	mov	r7, ip
    a5d0:	077b      	lsls	r3, r7, #29
    a5d2:	d000      	beq.n	a5d6 <__aeabi_dsub+0x24a>
    a5d4:	e762      	b.n	a49c <__aeabi_dsub+0x110>
    a5d6:	0763      	lsls	r3, r4, #29
    a5d8:	08ff      	lsrs	r7, r7, #3
    a5da:	431f      	orrs	r7, r3
    a5dc:	2501      	movs	r5, #1
    a5de:	4643      	mov	r3, r8
    a5e0:	08e4      	lsrs	r4, r4, #3
    a5e2:	401d      	ands	r5, r3
    a5e4:	e793      	b.n	a50e <__aeabi_dsub+0x182>
    a5e6:	2d00      	cmp	r5, #0
    a5e8:	d178      	bne.n	a6dc <__aeabi_dsub+0x350>
    a5ea:	1c75      	adds	r5, r6, #1
    a5ec:	056d      	lsls	r5, r5, #21
    a5ee:	0d6d      	lsrs	r5, r5, #21
    a5f0:	2d01      	cmp	r5, #1
    a5f2:	dc00      	bgt.n	a5f6 <__aeabi_dsub+0x26a>
    a5f4:	e0f2      	b.n	a7dc <__aeabi_dsub+0x450>
    a5f6:	4650      	mov	r0, sl
    a5f8:	1a80      	subs	r0, r0, r2
    a5fa:	4582      	cmp	sl, r0
    a5fc:	41bf      	sbcs	r7, r7
    a5fe:	1a65      	subs	r5, r4, r1
    a600:	427f      	negs	r7, r7
    a602:	1bed      	subs	r5, r5, r7
    a604:	4684      	mov	ip, r0
    a606:	0228      	lsls	r0, r5, #8
    a608:	d400      	bmi.n	a60c <__aeabi_dsub+0x280>
    a60a:	e08c      	b.n	a726 <__aeabi_dsub+0x39a>
    a60c:	4650      	mov	r0, sl
    a60e:	1a17      	subs	r7, r2, r0
    a610:	42ba      	cmp	r2, r7
    a612:	4192      	sbcs	r2, r2
    a614:	1b0c      	subs	r4, r1, r4
    a616:	4255      	negs	r5, r2
    a618:	1b65      	subs	r5, r4, r5
    a61a:	4698      	mov	r8, r3
    a61c:	e714      	b.n	a448 <__aeabi_dsub+0xbc>
    a61e:	2501      	movs	r5, #1
    a620:	4643      	mov	r3, r8
    a622:	2400      	movs	r4, #0
    a624:	401d      	ands	r5, r3
    a626:	2700      	movs	r7, #0
    a628:	e755      	b.n	a4d6 <__aeabi_dsub+0x14a>
    a62a:	4c2a      	ldr	r4, [pc, #168]	; (a6d4 <__aeabi_dsub+0x348>)
    a62c:	1af6      	subs	r6, r6, r3
    a62e:	402c      	ands	r4, r5
    a630:	e732      	b.n	a498 <__aeabi_dsub+0x10c>
    a632:	003d      	movs	r5, r7
    a634:	3828      	subs	r0, #40	; 0x28
    a636:	4085      	lsls	r5, r0
    a638:	2700      	movs	r7, #0
    a63a:	e717      	b.n	a46c <__aeabi_dsub+0xe0>
    a63c:	0038      	movs	r0, r7
    a63e:	f000 fb65 	bl	ad0c <__clzsi2>
    a642:	3020      	adds	r0, #32
    a644:	e706      	b.n	a454 <__aeabi_dsub+0xc8>
    a646:	430a      	orrs	r2, r1
    a648:	0017      	movs	r7, r2
    a64a:	2100      	movs	r1, #0
    a64c:	1e7a      	subs	r2, r7, #1
    a64e:	4197      	sbcs	r7, r2
    a650:	e6ee      	b.n	a430 <__aeabi_dsub+0xa4>
    a652:	2b00      	cmp	r3, #0
    a654:	d000      	beq.n	a658 <__aeabi_dsub+0x2cc>
    a656:	e0e5      	b.n	a824 <__aeabi_dsub+0x498>
    a658:	1c73      	adds	r3, r6, #1
    a65a:	469c      	mov	ip, r3
    a65c:	055b      	lsls	r3, r3, #21
    a65e:	0d5b      	lsrs	r3, r3, #21
    a660:	2b01      	cmp	r3, #1
    a662:	dc00      	bgt.n	a666 <__aeabi_dsub+0x2da>
    a664:	e09f      	b.n	a7a6 <__aeabi_dsub+0x41a>
    a666:	4b1a      	ldr	r3, [pc, #104]	; (a6d0 <__aeabi_dsub+0x344>)
    a668:	459c      	cmp	ip, r3
    a66a:	d100      	bne.n	a66e <__aeabi_dsub+0x2e2>
    a66c:	e0c5      	b.n	a7fa <__aeabi_dsub+0x46e>
    a66e:	4452      	add	r2, sl
    a670:	4552      	cmp	r2, sl
    a672:	4180      	sbcs	r0, r0
    a674:	1864      	adds	r4, r4, r1
    a676:	4240      	negs	r0, r0
    a678:	1824      	adds	r4, r4, r0
    a67a:	07e7      	lsls	r7, r4, #31
    a67c:	0852      	lsrs	r2, r2, #1
    a67e:	4317      	orrs	r7, r2
    a680:	0864      	lsrs	r4, r4, #1
    a682:	4666      	mov	r6, ip
    a684:	e708      	b.n	a498 <__aeabi_dsub+0x10c>
    a686:	4812      	ldr	r0, [pc, #72]	; (a6d0 <__aeabi_dsub+0x344>)
    a688:	4285      	cmp	r5, r0
    a68a:	d100      	bne.n	a68e <__aeabi_dsub+0x302>
    a68c:	e085      	b.n	a79a <__aeabi_dsub+0x40e>
    a68e:	001d      	movs	r5, r3
    a690:	e6bc      	b.n	a40c <__aeabi_dsub+0x80>
    a692:	0029      	movs	r1, r5
    a694:	3e1f      	subs	r6, #31
    a696:	40f1      	lsrs	r1, r6
    a698:	2b20      	cmp	r3, #32
    a69a:	d100      	bne.n	a69e <__aeabi_dsub+0x312>
    a69c:	e07f      	b.n	a79e <__aeabi_dsub+0x412>
    a69e:	2240      	movs	r2, #64	; 0x40
    a6a0:	1ad3      	subs	r3, r2, r3
    a6a2:	409d      	lsls	r5, r3
    a6a4:	432f      	orrs	r7, r5
    a6a6:	1e7d      	subs	r5, r7, #1
    a6a8:	41af      	sbcs	r7, r5
    a6aa:	2400      	movs	r4, #0
    a6ac:	430f      	orrs	r7, r1
    a6ae:	2600      	movs	r6, #0
    a6b0:	e78e      	b.n	a5d0 <__aeabi_dsub+0x244>
    a6b2:	002b      	movs	r3, r5
    a6b4:	000f      	movs	r7, r1
    a6b6:	3b20      	subs	r3, #32
    a6b8:	40df      	lsrs	r7, r3
    a6ba:	2d20      	cmp	r5, #32
    a6bc:	d071      	beq.n	a7a2 <__aeabi_dsub+0x416>
    a6be:	2340      	movs	r3, #64	; 0x40
    a6c0:	1b5d      	subs	r5, r3, r5
    a6c2:	40a9      	lsls	r1, r5
    a6c4:	430a      	orrs	r2, r1
    a6c6:	1e51      	subs	r1, r2, #1
    a6c8:	418a      	sbcs	r2, r1
    a6ca:	2100      	movs	r1, #0
    a6cc:	4317      	orrs	r7, r2
    a6ce:	e6af      	b.n	a430 <__aeabi_dsub+0xa4>
    a6d0:	000007ff 	.word	0x000007ff
    a6d4:	ff7fffff 	.word	0xff7fffff
    a6d8:	800fffff 	.word	0x800fffff
    a6dc:	2e00      	cmp	r6, #0
    a6de:	d03e      	beq.n	a75e <__aeabi_dsub+0x3d2>
    a6e0:	4eb3      	ldr	r6, [pc, #716]	; (a9b0 <__aeabi_dsub+0x624>)
    a6e2:	45b4      	cmp	ip, r6
    a6e4:	d045      	beq.n	a772 <__aeabi_dsub+0x3e6>
    a6e6:	2680      	movs	r6, #128	; 0x80
    a6e8:	0436      	lsls	r6, r6, #16
    a6ea:	426d      	negs	r5, r5
    a6ec:	4334      	orrs	r4, r6
    a6ee:	2d38      	cmp	r5, #56	; 0x38
    a6f0:	dd00      	ble.n	a6f4 <__aeabi_dsub+0x368>
    a6f2:	e0a8      	b.n	a846 <__aeabi_dsub+0x4ba>
    a6f4:	2d1f      	cmp	r5, #31
    a6f6:	dd00      	ble.n	a6fa <__aeabi_dsub+0x36e>
    a6f8:	e11f      	b.n	a93a <__aeabi_dsub+0x5ae>
    a6fa:	2620      	movs	r6, #32
    a6fc:	0027      	movs	r7, r4
    a6fe:	4650      	mov	r0, sl
    a700:	1b76      	subs	r6, r6, r5
    a702:	40b7      	lsls	r7, r6
    a704:	40e8      	lsrs	r0, r5
    a706:	4307      	orrs	r7, r0
    a708:	4650      	mov	r0, sl
    a70a:	40b0      	lsls	r0, r6
    a70c:	1e46      	subs	r6, r0, #1
    a70e:	41b0      	sbcs	r0, r6
    a710:	40ec      	lsrs	r4, r5
    a712:	4338      	orrs	r0, r7
    a714:	1a17      	subs	r7, r2, r0
    a716:	42ba      	cmp	r2, r7
    a718:	4192      	sbcs	r2, r2
    a71a:	1b0c      	subs	r4, r1, r4
    a71c:	4252      	negs	r2, r2
    a71e:	1aa4      	subs	r4, r4, r2
    a720:	4666      	mov	r6, ip
    a722:	4698      	mov	r8, r3
    a724:	e68b      	b.n	a43e <__aeabi_dsub+0xb2>
    a726:	4664      	mov	r4, ip
    a728:	4667      	mov	r7, ip
    a72a:	432c      	orrs	r4, r5
    a72c:	d000      	beq.n	a730 <__aeabi_dsub+0x3a4>
    a72e:	e68b      	b.n	a448 <__aeabi_dsub+0xbc>
    a730:	2500      	movs	r5, #0
    a732:	2600      	movs	r6, #0
    a734:	2700      	movs	r7, #0
    a736:	e6ea      	b.n	a50e <__aeabi_dsub+0x182>
    a738:	001e      	movs	r6, r3
    a73a:	e6ad      	b.n	a498 <__aeabi_dsub+0x10c>
    a73c:	2b1f      	cmp	r3, #31
    a73e:	dc60      	bgt.n	a802 <__aeabi_dsub+0x476>
    a740:	2720      	movs	r7, #32
    a742:	1af8      	subs	r0, r7, r3
    a744:	000f      	movs	r7, r1
    a746:	4684      	mov	ip, r0
    a748:	4087      	lsls	r7, r0
    a74a:	0010      	movs	r0, r2
    a74c:	40d8      	lsrs	r0, r3
    a74e:	4307      	orrs	r7, r0
    a750:	4660      	mov	r0, ip
    a752:	4082      	lsls	r2, r0
    a754:	1e50      	subs	r0, r2, #1
    a756:	4182      	sbcs	r2, r0
    a758:	40d9      	lsrs	r1, r3
    a75a:	4317      	orrs	r7, r2
    a75c:	e6f5      	b.n	a54a <__aeabi_dsub+0x1be>
    a75e:	0026      	movs	r6, r4
    a760:	4650      	mov	r0, sl
    a762:	4306      	orrs	r6, r0
    a764:	d005      	beq.n	a772 <__aeabi_dsub+0x3e6>
    a766:	43ed      	mvns	r5, r5
    a768:	2d00      	cmp	r5, #0
    a76a:	d0d3      	beq.n	a714 <__aeabi_dsub+0x388>
    a76c:	4e90      	ldr	r6, [pc, #576]	; (a9b0 <__aeabi_dsub+0x624>)
    a76e:	45b4      	cmp	ip, r6
    a770:	d1bd      	bne.n	a6ee <__aeabi_dsub+0x362>
    a772:	000c      	movs	r4, r1
    a774:	0017      	movs	r7, r2
    a776:	4666      	mov	r6, ip
    a778:	4698      	mov	r8, r3
    a77a:	e68d      	b.n	a498 <__aeabi_dsub+0x10c>
    a77c:	488c      	ldr	r0, [pc, #560]	; (a9b0 <__aeabi_dsub+0x624>)
    a77e:	4283      	cmp	r3, r0
    a780:	d00b      	beq.n	a79a <__aeabi_dsub+0x40e>
    a782:	4663      	mov	r3, ip
    a784:	e6d9      	b.n	a53a <__aeabi_dsub+0x1ae>
    a786:	2d00      	cmp	r5, #0
    a788:	d000      	beq.n	a78c <__aeabi_dsub+0x400>
    a78a:	e096      	b.n	a8ba <__aeabi_dsub+0x52e>
    a78c:	0008      	movs	r0, r1
    a78e:	4310      	orrs	r0, r2
    a790:	d100      	bne.n	a794 <__aeabi_dsub+0x408>
    a792:	e0e2      	b.n	a95a <__aeabi_dsub+0x5ce>
    a794:	000c      	movs	r4, r1
    a796:	0017      	movs	r7, r2
    a798:	4698      	mov	r8, r3
    a79a:	4e85      	ldr	r6, [pc, #532]	; (a9b0 <__aeabi_dsub+0x624>)
    a79c:	e67c      	b.n	a498 <__aeabi_dsub+0x10c>
    a79e:	2500      	movs	r5, #0
    a7a0:	e780      	b.n	a6a4 <__aeabi_dsub+0x318>
    a7a2:	2100      	movs	r1, #0
    a7a4:	e78e      	b.n	a6c4 <__aeabi_dsub+0x338>
    a7a6:	0023      	movs	r3, r4
    a7a8:	4650      	mov	r0, sl
    a7aa:	4303      	orrs	r3, r0
    a7ac:	2e00      	cmp	r6, #0
    a7ae:	d000      	beq.n	a7b2 <__aeabi_dsub+0x426>
    a7b0:	e0a8      	b.n	a904 <__aeabi_dsub+0x578>
    a7b2:	2b00      	cmp	r3, #0
    a7b4:	d100      	bne.n	a7b8 <__aeabi_dsub+0x42c>
    a7b6:	e0de      	b.n	a976 <__aeabi_dsub+0x5ea>
    a7b8:	000b      	movs	r3, r1
    a7ba:	4313      	orrs	r3, r2
    a7bc:	d100      	bne.n	a7c0 <__aeabi_dsub+0x434>
    a7be:	e66b      	b.n	a498 <__aeabi_dsub+0x10c>
    a7c0:	4452      	add	r2, sl
    a7c2:	4552      	cmp	r2, sl
    a7c4:	4180      	sbcs	r0, r0
    a7c6:	1864      	adds	r4, r4, r1
    a7c8:	4240      	negs	r0, r0
    a7ca:	1824      	adds	r4, r4, r0
    a7cc:	0017      	movs	r7, r2
    a7ce:	0223      	lsls	r3, r4, #8
    a7d0:	d400      	bmi.n	a7d4 <__aeabi_dsub+0x448>
    a7d2:	e6fd      	b.n	a5d0 <__aeabi_dsub+0x244>
    a7d4:	4b77      	ldr	r3, [pc, #476]	; (a9b4 <__aeabi_dsub+0x628>)
    a7d6:	4666      	mov	r6, ip
    a7d8:	401c      	ands	r4, r3
    a7da:	e65d      	b.n	a498 <__aeabi_dsub+0x10c>
    a7dc:	0025      	movs	r5, r4
    a7de:	4650      	mov	r0, sl
    a7e0:	4305      	orrs	r5, r0
    a7e2:	2e00      	cmp	r6, #0
    a7e4:	d1cf      	bne.n	a786 <__aeabi_dsub+0x3fa>
    a7e6:	2d00      	cmp	r5, #0
    a7e8:	d14f      	bne.n	a88a <__aeabi_dsub+0x4fe>
    a7ea:	000c      	movs	r4, r1
    a7ec:	4314      	orrs	r4, r2
    a7ee:	d100      	bne.n	a7f2 <__aeabi_dsub+0x466>
    a7f0:	e0a0      	b.n	a934 <__aeabi_dsub+0x5a8>
    a7f2:	000c      	movs	r4, r1
    a7f4:	0017      	movs	r7, r2
    a7f6:	4698      	mov	r8, r3
    a7f8:	e64e      	b.n	a498 <__aeabi_dsub+0x10c>
    a7fa:	4666      	mov	r6, ip
    a7fc:	2400      	movs	r4, #0
    a7fe:	2700      	movs	r7, #0
    a800:	e685      	b.n	a50e <__aeabi_dsub+0x182>
    a802:	001f      	movs	r7, r3
    a804:	0008      	movs	r0, r1
    a806:	3f20      	subs	r7, #32
    a808:	40f8      	lsrs	r0, r7
    a80a:	0007      	movs	r7, r0
    a80c:	2b20      	cmp	r3, #32
    a80e:	d100      	bne.n	a812 <__aeabi_dsub+0x486>
    a810:	e08e      	b.n	a930 <__aeabi_dsub+0x5a4>
    a812:	2040      	movs	r0, #64	; 0x40
    a814:	1ac3      	subs	r3, r0, r3
    a816:	4099      	lsls	r1, r3
    a818:	430a      	orrs	r2, r1
    a81a:	1e51      	subs	r1, r2, #1
    a81c:	418a      	sbcs	r2, r1
    a81e:	2100      	movs	r1, #0
    a820:	4317      	orrs	r7, r2
    a822:	e692      	b.n	a54a <__aeabi_dsub+0x1be>
    a824:	2e00      	cmp	r6, #0
    a826:	d114      	bne.n	a852 <__aeabi_dsub+0x4c6>
    a828:	0026      	movs	r6, r4
    a82a:	4650      	mov	r0, sl
    a82c:	4306      	orrs	r6, r0
    a82e:	d062      	beq.n	a8f6 <__aeabi_dsub+0x56a>
    a830:	43db      	mvns	r3, r3
    a832:	2b00      	cmp	r3, #0
    a834:	d15c      	bne.n	a8f0 <__aeabi_dsub+0x564>
    a836:	1887      	adds	r7, r0, r2
    a838:	4297      	cmp	r7, r2
    a83a:	4192      	sbcs	r2, r2
    a83c:	1864      	adds	r4, r4, r1
    a83e:	4252      	negs	r2, r2
    a840:	18a4      	adds	r4, r4, r2
    a842:	4666      	mov	r6, ip
    a844:	e687      	b.n	a556 <__aeabi_dsub+0x1ca>
    a846:	4650      	mov	r0, sl
    a848:	4320      	orrs	r0, r4
    a84a:	1e44      	subs	r4, r0, #1
    a84c:	41a0      	sbcs	r0, r4
    a84e:	2400      	movs	r4, #0
    a850:	e760      	b.n	a714 <__aeabi_dsub+0x388>
    a852:	4e57      	ldr	r6, [pc, #348]	; (a9b0 <__aeabi_dsub+0x624>)
    a854:	45b4      	cmp	ip, r6
    a856:	d04e      	beq.n	a8f6 <__aeabi_dsub+0x56a>
    a858:	2680      	movs	r6, #128	; 0x80
    a85a:	0436      	lsls	r6, r6, #16
    a85c:	425b      	negs	r3, r3
    a85e:	4334      	orrs	r4, r6
    a860:	2b38      	cmp	r3, #56	; 0x38
    a862:	dd00      	ble.n	a866 <__aeabi_dsub+0x4da>
    a864:	e07f      	b.n	a966 <__aeabi_dsub+0x5da>
    a866:	2b1f      	cmp	r3, #31
    a868:	dd00      	ble.n	a86c <__aeabi_dsub+0x4e0>
    a86a:	e08b      	b.n	a984 <__aeabi_dsub+0x5f8>
    a86c:	2620      	movs	r6, #32
    a86e:	0027      	movs	r7, r4
    a870:	4650      	mov	r0, sl
    a872:	1af6      	subs	r6, r6, r3
    a874:	40b7      	lsls	r7, r6
    a876:	40d8      	lsrs	r0, r3
    a878:	4307      	orrs	r7, r0
    a87a:	4650      	mov	r0, sl
    a87c:	40b0      	lsls	r0, r6
    a87e:	1e46      	subs	r6, r0, #1
    a880:	41b0      	sbcs	r0, r6
    a882:	4307      	orrs	r7, r0
    a884:	40dc      	lsrs	r4, r3
    a886:	18bf      	adds	r7, r7, r2
    a888:	e7d6      	b.n	a838 <__aeabi_dsub+0x4ac>
    a88a:	000d      	movs	r5, r1
    a88c:	4315      	orrs	r5, r2
    a88e:	d100      	bne.n	a892 <__aeabi_dsub+0x506>
    a890:	e602      	b.n	a498 <__aeabi_dsub+0x10c>
    a892:	4650      	mov	r0, sl
    a894:	1a80      	subs	r0, r0, r2
    a896:	4582      	cmp	sl, r0
    a898:	41bf      	sbcs	r7, r7
    a89a:	1a65      	subs	r5, r4, r1
    a89c:	427f      	negs	r7, r7
    a89e:	1bed      	subs	r5, r5, r7
    a8a0:	4684      	mov	ip, r0
    a8a2:	0228      	lsls	r0, r5, #8
    a8a4:	d400      	bmi.n	a8a8 <__aeabi_dsub+0x51c>
    a8a6:	e68d      	b.n	a5c4 <__aeabi_dsub+0x238>
    a8a8:	4650      	mov	r0, sl
    a8aa:	1a17      	subs	r7, r2, r0
    a8ac:	42ba      	cmp	r2, r7
    a8ae:	4192      	sbcs	r2, r2
    a8b0:	1b0c      	subs	r4, r1, r4
    a8b2:	4252      	negs	r2, r2
    a8b4:	1aa4      	subs	r4, r4, r2
    a8b6:	4698      	mov	r8, r3
    a8b8:	e5ee      	b.n	a498 <__aeabi_dsub+0x10c>
    a8ba:	000d      	movs	r5, r1
    a8bc:	4315      	orrs	r5, r2
    a8be:	d100      	bne.n	a8c2 <__aeabi_dsub+0x536>
    a8c0:	e76b      	b.n	a79a <__aeabi_dsub+0x40e>
    a8c2:	4650      	mov	r0, sl
    a8c4:	0767      	lsls	r7, r4, #29
    a8c6:	08c0      	lsrs	r0, r0, #3
    a8c8:	4307      	orrs	r7, r0
    a8ca:	2080      	movs	r0, #128	; 0x80
    a8cc:	08e4      	lsrs	r4, r4, #3
    a8ce:	0300      	lsls	r0, r0, #12
    a8d0:	4204      	tst	r4, r0
    a8d2:	d007      	beq.n	a8e4 <__aeabi_dsub+0x558>
    a8d4:	08cd      	lsrs	r5, r1, #3
    a8d6:	4205      	tst	r5, r0
    a8d8:	d104      	bne.n	a8e4 <__aeabi_dsub+0x558>
    a8da:	002c      	movs	r4, r5
    a8dc:	4698      	mov	r8, r3
    a8de:	08d7      	lsrs	r7, r2, #3
    a8e0:	0749      	lsls	r1, r1, #29
    a8e2:	430f      	orrs	r7, r1
    a8e4:	0f7b      	lsrs	r3, r7, #29
    a8e6:	00e4      	lsls	r4, r4, #3
    a8e8:	431c      	orrs	r4, r3
    a8ea:	00ff      	lsls	r7, r7, #3
    a8ec:	4e30      	ldr	r6, [pc, #192]	; (a9b0 <__aeabi_dsub+0x624>)
    a8ee:	e5d3      	b.n	a498 <__aeabi_dsub+0x10c>
    a8f0:	4e2f      	ldr	r6, [pc, #188]	; (a9b0 <__aeabi_dsub+0x624>)
    a8f2:	45b4      	cmp	ip, r6
    a8f4:	d1b4      	bne.n	a860 <__aeabi_dsub+0x4d4>
    a8f6:	000c      	movs	r4, r1
    a8f8:	0017      	movs	r7, r2
    a8fa:	4666      	mov	r6, ip
    a8fc:	e5cc      	b.n	a498 <__aeabi_dsub+0x10c>
    a8fe:	2700      	movs	r7, #0
    a900:	2400      	movs	r4, #0
    a902:	e5e8      	b.n	a4d6 <__aeabi_dsub+0x14a>
    a904:	2b00      	cmp	r3, #0
    a906:	d039      	beq.n	a97c <__aeabi_dsub+0x5f0>
    a908:	000b      	movs	r3, r1
    a90a:	4313      	orrs	r3, r2
    a90c:	d100      	bne.n	a910 <__aeabi_dsub+0x584>
    a90e:	e744      	b.n	a79a <__aeabi_dsub+0x40e>
    a910:	08c0      	lsrs	r0, r0, #3
    a912:	0767      	lsls	r7, r4, #29
    a914:	4307      	orrs	r7, r0
    a916:	2080      	movs	r0, #128	; 0x80
    a918:	08e4      	lsrs	r4, r4, #3
    a91a:	0300      	lsls	r0, r0, #12
    a91c:	4204      	tst	r4, r0
    a91e:	d0e1      	beq.n	a8e4 <__aeabi_dsub+0x558>
    a920:	08cb      	lsrs	r3, r1, #3
    a922:	4203      	tst	r3, r0
    a924:	d1de      	bne.n	a8e4 <__aeabi_dsub+0x558>
    a926:	08d7      	lsrs	r7, r2, #3
    a928:	0749      	lsls	r1, r1, #29
    a92a:	430f      	orrs	r7, r1
    a92c:	001c      	movs	r4, r3
    a92e:	e7d9      	b.n	a8e4 <__aeabi_dsub+0x558>
    a930:	2100      	movs	r1, #0
    a932:	e771      	b.n	a818 <__aeabi_dsub+0x48c>
    a934:	2500      	movs	r5, #0
    a936:	2700      	movs	r7, #0
    a938:	e5e9      	b.n	a50e <__aeabi_dsub+0x182>
    a93a:	002e      	movs	r6, r5
    a93c:	0027      	movs	r7, r4
    a93e:	3e20      	subs	r6, #32
    a940:	40f7      	lsrs	r7, r6
    a942:	2d20      	cmp	r5, #32
    a944:	d02f      	beq.n	a9a6 <__aeabi_dsub+0x61a>
    a946:	2640      	movs	r6, #64	; 0x40
    a948:	1b75      	subs	r5, r6, r5
    a94a:	40ac      	lsls	r4, r5
    a94c:	4650      	mov	r0, sl
    a94e:	4320      	orrs	r0, r4
    a950:	1e44      	subs	r4, r0, #1
    a952:	41a0      	sbcs	r0, r4
    a954:	2400      	movs	r4, #0
    a956:	4338      	orrs	r0, r7
    a958:	e6dc      	b.n	a714 <__aeabi_dsub+0x388>
    a95a:	2480      	movs	r4, #128	; 0x80
    a95c:	2500      	movs	r5, #0
    a95e:	0324      	lsls	r4, r4, #12
    a960:	4e13      	ldr	r6, [pc, #76]	; (a9b0 <__aeabi_dsub+0x624>)
    a962:	2700      	movs	r7, #0
    a964:	e5d3      	b.n	a50e <__aeabi_dsub+0x182>
    a966:	4650      	mov	r0, sl
    a968:	4320      	orrs	r0, r4
    a96a:	0007      	movs	r7, r0
    a96c:	1e78      	subs	r0, r7, #1
    a96e:	4187      	sbcs	r7, r0
    a970:	2400      	movs	r4, #0
    a972:	18bf      	adds	r7, r7, r2
    a974:	e760      	b.n	a838 <__aeabi_dsub+0x4ac>
    a976:	000c      	movs	r4, r1
    a978:	0017      	movs	r7, r2
    a97a:	e58d      	b.n	a498 <__aeabi_dsub+0x10c>
    a97c:	000c      	movs	r4, r1
    a97e:	0017      	movs	r7, r2
    a980:	4e0b      	ldr	r6, [pc, #44]	; (a9b0 <__aeabi_dsub+0x624>)
    a982:	e589      	b.n	a498 <__aeabi_dsub+0x10c>
    a984:	001e      	movs	r6, r3
    a986:	0027      	movs	r7, r4
    a988:	3e20      	subs	r6, #32
    a98a:	40f7      	lsrs	r7, r6
    a98c:	2b20      	cmp	r3, #32
    a98e:	d00c      	beq.n	a9aa <__aeabi_dsub+0x61e>
    a990:	2640      	movs	r6, #64	; 0x40
    a992:	1af3      	subs	r3, r6, r3
    a994:	409c      	lsls	r4, r3
    a996:	4650      	mov	r0, sl
    a998:	4320      	orrs	r0, r4
    a99a:	1e44      	subs	r4, r0, #1
    a99c:	41a0      	sbcs	r0, r4
    a99e:	4307      	orrs	r7, r0
    a9a0:	2400      	movs	r4, #0
    a9a2:	18bf      	adds	r7, r7, r2
    a9a4:	e748      	b.n	a838 <__aeabi_dsub+0x4ac>
    a9a6:	2400      	movs	r4, #0
    a9a8:	e7d0      	b.n	a94c <__aeabi_dsub+0x5c0>
    a9aa:	2400      	movs	r4, #0
    a9ac:	e7f3      	b.n	a996 <__aeabi_dsub+0x60a>
    a9ae:	46c0      	nop			; (mov r8, r8)
    a9b0:	000007ff 	.word	0x000007ff
    a9b4:	ff7fffff 	.word	0xff7fffff

0000a9b8 <__aeabi_dcmpun>:
    a9b8:	b570      	push	{r4, r5, r6, lr}
    a9ba:	4e0e      	ldr	r6, [pc, #56]	; (a9f4 <__aeabi_dcmpun+0x3c>)
    a9bc:	030d      	lsls	r5, r1, #12
    a9be:	031c      	lsls	r4, r3, #12
    a9c0:	0049      	lsls	r1, r1, #1
    a9c2:	005b      	lsls	r3, r3, #1
    a9c4:	0b2d      	lsrs	r5, r5, #12
    a9c6:	0d49      	lsrs	r1, r1, #21
    a9c8:	0b24      	lsrs	r4, r4, #12
    a9ca:	0d5b      	lsrs	r3, r3, #21
    a9cc:	42b1      	cmp	r1, r6
    a9ce:	d004      	beq.n	a9da <__aeabi_dcmpun+0x22>
    a9d0:	4908      	ldr	r1, [pc, #32]	; (a9f4 <__aeabi_dcmpun+0x3c>)
    a9d2:	2000      	movs	r0, #0
    a9d4:	428b      	cmp	r3, r1
    a9d6:	d008      	beq.n	a9ea <__aeabi_dcmpun+0x32>
    a9d8:	bd70      	pop	{r4, r5, r6, pc}
    a9da:	4305      	orrs	r5, r0
    a9dc:	2001      	movs	r0, #1
    a9de:	2d00      	cmp	r5, #0
    a9e0:	d1fa      	bne.n	a9d8 <__aeabi_dcmpun+0x20>
    a9e2:	4904      	ldr	r1, [pc, #16]	; (a9f4 <__aeabi_dcmpun+0x3c>)
    a9e4:	2000      	movs	r0, #0
    a9e6:	428b      	cmp	r3, r1
    a9e8:	d1f6      	bne.n	a9d8 <__aeabi_dcmpun+0x20>
    a9ea:	4314      	orrs	r4, r2
    a9ec:	0020      	movs	r0, r4
    a9ee:	1e44      	subs	r4, r0, #1
    a9f0:	41a0      	sbcs	r0, r4
    a9f2:	e7f1      	b.n	a9d8 <__aeabi_dcmpun+0x20>
    a9f4:	000007ff 	.word	0x000007ff

0000a9f8 <__aeabi_d2iz>:
    a9f8:	b530      	push	{r4, r5, lr}
    a9fa:	4d13      	ldr	r5, [pc, #76]	; (aa48 <__aeabi_d2iz+0x50>)
    a9fc:	030a      	lsls	r2, r1, #12
    a9fe:	004b      	lsls	r3, r1, #1
    aa00:	0b12      	lsrs	r2, r2, #12
    aa02:	0d5b      	lsrs	r3, r3, #21
    aa04:	0fc9      	lsrs	r1, r1, #31
    aa06:	2400      	movs	r4, #0
    aa08:	42ab      	cmp	r3, r5
    aa0a:	dd10      	ble.n	aa2e <__aeabi_d2iz+0x36>
    aa0c:	4c0f      	ldr	r4, [pc, #60]	; (aa4c <__aeabi_d2iz+0x54>)
    aa0e:	42a3      	cmp	r3, r4
    aa10:	dc0f      	bgt.n	aa32 <__aeabi_d2iz+0x3a>
    aa12:	2480      	movs	r4, #128	; 0x80
    aa14:	4d0e      	ldr	r5, [pc, #56]	; (aa50 <__aeabi_d2iz+0x58>)
    aa16:	0364      	lsls	r4, r4, #13
    aa18:	4322      	orrs	r2, r4
    aa1a:	1aed      	subs	r5, r5, r3
    aa1c:	2d1f      	cmp	r5, #31
    aa1e:	dd0b      	ble.n	aa38 <__aeabi_d2iz+0x40>
    aa20:	480c      	ldr	r0, [pc, #48]	; (aa54 <__aeabi_d2iz+0x5c>)
    aa22:	1ac3      	subs	r3, r0, r3
    aa24:	40da      	lsrs	r2, r3
    aa26:	4254      	negs	r4, r2
    aa28:	2900      	cmp	r1, #0
    aa2a:	d100      	bne.n	aa2e <__aeabi_d2iz+0x36>
    aa2c:	0014      	movs	r4, r2
    aa2e:	0020      	movs	r0, r4
    aa30:	bd30      	pop	{r4, r5, pc}
    aa32:	4b09      	ldr	r3, [pc, #36]	; (aa58 <__aeabi_d2iz+0x60>)
    aa34:	18cc      	adds	r4, r1, r3
    aa36:	e7fa      	b.n	aa2e <__aeabi_d2iz+0x36>
    aa38:	4c08      	ldr	r4, [pc, #32]	; (aa5c <__aeabi_d2iz+0x64>)
    aa3a:	40e8      	lsrs	r0, r5
    aa3c:	46a4      	mov	ip, r4
    aa3e:	4463      	add	r3, ip
    aa40:	409a      	lsls	r2, r3
    aa42:	4302      	orrs	r2, r0
    aa44:	e7ef      	b.n	aa26 <__aeabi_d2iz+0x2e>
    aa46:	46c0      	nop			; (mov r8, r8)
    aa48:	000003fe 	.word	0x000003fe
    aa4c:	0000041d 	.word	0x0000041d
    aa50:	00000433 	.word	0x00000433
    aa54:	00000413 	.word	0x00000413
    aa58:	7fffffff 	.word	0x7fffffff
    aa5c:	fffffbed 	.word	0xfffffbed

0000aa60 <__aeabi_i2d>:
    aa60:	b570      	push	{r4, r5, r6, lr}
    aa62:	2800      	cmp	r0, #0
    aa64:	d030      	beq.n	aac8 <__aeabi_i2d+0x68>
    aa66:	17c3      	asrs	r3, r0, #31
    aa68:	18c4      	adds	r4, r0, r3
    aa6a:	405c      	eors	r4, r3
    aa6c:	0fc5      	lsrs	r5, r0, #31
    aa6e:	0020      	movs	r0, r4
    aa70:	f000 f94c 	bl	ad0c <__clzsi2>
    aa74:	4b17      	ldr	r3, [pc, #92]	; (aad4 <__aeabi_i2d+0x74>)
    aa76:	4a18      	ldr	r2, [pc, #96]	; (aad8 <__aeabi_i2d+0x78>)
    aa78:	1a1b      	subs	r3, r3, r0
    aa7a:	1ad2      	subs	r2, r2, r3
    aa7c:	2a1f      	cmp	r2, #31
    aa7e:	dd18      	ble.n	aab2 <__aeabi_i2d+0x52>
    aa80:	4a16      	ldr	r2, [pc, #88]	; (aadc <__aeabi_i2d+0x7c>)
    aa82:	1ad2      	subs	r2, r2, r3
    aa84:	4094      	lsls	r4, r2
    aa86:	2200      	movs	r2, #0
    aa88:	0324      	lsls	r4, r4, #12
    aa8a:	055b      	lsls	r3, r3, #21
    aa8c:	0b24      	lsrs	r4, r4, #12
    aa8e:	0d5b      	lsrs	r3, r3, #21
    aa90:	2100      	movs	r1, #0
    aa92:	0010      	movs	r0, r2
    aa94:	0324      	lsls	r4, r4, #12
    aa96:	0d0a      	lsrs	r2, r1, #20
    aa98:	0b24      	lsrs	r4, r4, #12
    aa9a:	0512      	lsls	r2, r2, #20
    aa9c:	4322      	orrs	r2, r4
    aa9e:	4c10      	ldr	r4, [pc, #64]	; (aae0 <__aeabi_i2d+0x80>)
    aaa0:	051b      	lsls	r3, r3, #20
    aaa2:	4022      	ands	r2, r4
    aaa4:	4313      	orrs	r3, r2
    aaa6:	005b      	lsls	r3, r3, #1
    aaa8:	07ed      	lsls	r5, r5, #31
    aaaa:	085b      	lsrs	r3, r3, #1
    aaac:	432b      	orrs	r3, r5
    aaae:	0019      	movs	r1, r3
    aab0:	bd70      	pop	{r4, r5, r6, pc}
    aab2:	0021      	movs	r1, r4
    aab4:	4091      	lsls	r1, r2
    aab6:	000a      	movs	r2, r1
    aab8:	210b      	movs	r1, #11
    aaba:	1a08      	subs	r0, r1, r0
    aabc:	40c4      	lsrs	r4, r0
    aabe:	055b      	lsls	r3, r3, #21
    aac0:	0324      	lsls	r4, r4, #12
    aac2:	0b24      	lsrs	r4, r4, #12
    aac4:	0d5b      	lsrs	r3, r3, #21
    aac6:	e7e3      	b.n	aa90 <__aeabi_i2d+0x30>
    aac8:	2500      	movs	r5, #0
    aaca:	2300      	movs	r3, #0
    aacc:	2400      	movs	r4, #0
    aace:	2200      	movs	r2, #0
    aad0:	e7de      	b.n	aa90 <__aeabi_i2d+0x30>
    aad2:	46c0      	nop			; (mov r8, r8)
    aad4:	0000041e 	.word	0x0000041e
    aad8:	00000433 	.word	0x00000433
    aadc:	00000413 	.word	0x00000413
    aae0:	800fffff 	.word	0x800fffff

0000aae4 <__aeabi_ui2d>:
    aae4:	b510      	push	{r4, lr}
    aae6:	1e04      	subs	r4, r0, #0
    aae8:	d028      	beq.n	ab3c <__aeabi_ui2d+0x58>
    aaea:	f000 f90f 	bl	ad0c <__clzsi2>
    aaee:	4b15      	ldr	r3, [pc, #84]	; (ab44 <__aeabi_ui2d+0x60>)
    aaf0:	4a15      	ldr	r2, [pc, #84]	; (ab48 <__aeabi_ui2d+0x64>)
    aaf2:	1a1b      	subs	r3, r3, r0
    aaf4:	1ad2      	subs	r2, r2, r3
    aaf6:	2a1f      	cmp	r2, #31
    aaf8:	dd15      	ble.n	ab26 <__aeabi_ui2d+0x42>
    aafa:	4a14      	ldr	r2, [pc, #80]	; (ab4c <__aeabi_ui2d+0x68>)
    aafc:	1ad2      	subs	r2, r2, r3
    aafe:	4094      	lsls	r4, r2
    ab00:	2200      	movs	r2, #0
    ab02:	0324      	lsls	r4, r4, #12
    ab04:	055b      	lsls	r3, r3, #21
    ab06:	0b24      	lsrs	r4, r4, #12
    ab08:	0d5b      	lsrs	r3, r3, #21
    ab0a:	2100      	movs	r1, #0
    ab0c:	0010      	movs	r0, r2
    ab0e:	0324      	lsls	r4, r4, #12
    ab10:	0d0a      	lsrs	r2, r1, #20
    ab12:	0b24      	lsrs	r4, r4, #12
    ab14:	0512      	lsls	r2, r2, #20
    ab16:	4322      	orrs	r2, r4
    ab18:	4c0d      	ldr	r4, [pc, #52]	; (ab50 <__aeabi_ui2d+0x6c>)
    ab1a:	051b      	lsls	r3, r3, #20
    ab1c:	4022      	ands	r2, r4
    ab1e:	4313      	orrs	r3, r2
    ab20:	005b      	lsls	r3, r3, #1
    ab22:	0859      	lsrs	r1, r3, #1
    ab24:	bd10      	pop	{r4, pc}
    ab26:	0021      	movs	r1, r4
    ab28:	4091      	lsls	r1, r2
    ab2a:	000a      	movs	r2, r1
    ab2c:	210b      	movs	r1, #11
    ab2e:	1a08      	subs	r0, r1, r0
    ab30:	40c4      	lsrs	r4, r0
    ab32:	055b      	lsls	r3, r3, #21
    ab34:	0324      	lsls	r4, r4, #12
    ab36:	0b24      	lsrs	r4, r4, #12
    ab38:	0d5b      	lsrs	r3, r3, #21
    ab3a:	e7e6      	b.n	ab0a <__aeabi_ui2d+0x26>
    ab3c:	2300      	movs	r3, #0
    ab3e:	2400      	movs	r4, #0
    ab40:	2200      	movs	r2, #0
    ab42:	e7e2      	b.n	ab0a <__aeabi_ui2d+0x26>
    ab44:	0000041e 	.word	0x0000041e
    ab48:	00000433 	.word	0x00000433
    ab4c:	00000413 	.word	0x00000413
    ab50:	800fffff 	.word	0x800fffff

0000ab54 <__aeabi_f2d>:
    ab54:	0041      	lsls	r1, r0, #1
    ab56:	0e09      	lsrs	r1, r1, #24
    ab58:	1c4b      	adds	r3, r1, #1
    ab5a:	b570      	push	{r4, r5, r6, lr}
    ab5c:	b2db      	uxtb	r3, r3
    ab5e:	0246      	lsls	r6, r0, #9
    ab60:	0a75      	lsrs	r5, r6, #9
    ab62:	0fc4      	lsrs	r4, r0, #31
    ab64:	2b01      	cmp	r3, #1
    ab66:	dd14      	ble.n	ab92 <__aeabi_f2d+0x3e>
    ab68:	23e0      	movs	r3, #224	; 0xe0
    ab6a:	009b      	lsls	r3, r3, #2
    ab6c:	076d      	lsls	r5, r5, #29
    ab6e:	0b36      	lsrs	r6, r6, #12
    ab70:	18cb      	adds	r3, r1, r3
    ab72:	2100      	movs	r1, #0
    ab74:	0d0a      	lsrs	r2, r1, #20
    ab76:	0028      	movs	r0, r5
    ab78:	0512      	lsls	r2, r2, #20
    ab7a:	4d1c      	ldr	r5, [pc, #112]	; (abec <__aeabi_f2d+0x98>)
    ab7c:	4332      	orrs	r2, r6
    ab7e:	055b      	lsls	r3, r3, #21
    ab80:	402a      	ands	r2, r5
    ab82:	085b      	lsrs	r3, r3, #1
    ab84:	4313      	orrs	r3, r2
    ab86:	005b      	lsls	r3, r3, #1
    ab88:	07e4      	lsls	r4, r4, #31
    ab8a:	085b      	lsrs	r3, r3, #1
    ab8c:	4323      	orrs	r3, r4
    ab8e:	0019      	movs	r1, r3
    ab90:	bd70      	pop	{r4, r5, r6, pc}
    ab92:	2900      	cmp	r1, #0
    ab94:	d114      	bne.n	abc0 <__aeabi_f2d+0x6c>
    ab96:	2d00      	cmp	r5, #0
    ab98:	d01e      	beq.n	abd8 <__aeabi_f2d+0x84>
    ab9a:	0028      	movs	r0, r5
    ab9c:	f000 f8b6 	bl	ad0c <__clzsi2>
    aba0:	280a      	cmp	r0, #10
    aba2:	dc1c      	bgt.n	abde <__aeabi_f2d+0x8a>
    aba4:	230b      	movs	r3, #11
    aba6:	002a      	movs	r2, r5
    aba8:	1a1b      	subs	r3, r3, r0
    abaa:	40da      	lsrs	r2, r3
    abac:	0003      	movs	r3, r0
    abae:	3315      	adds	r3, #21
    abb0:	409d      	lsls	r5, r3
    abb2:	4b0f      	ldr	r3, [pc, #60]	; (abf0 <__aeabi_f2d+0x9c>)
    abb4:	0312      	lsls	r2, r2, #12
    abb6:	1a1b      	subs	r3, r3, r0
    abb8:	055b      	lsls	r3, r3, #21
    abba:	0b16      	lsrs	r6, r2, #12
    abbc:	0d5b      	lsrs	r3, r3, #21
    abbe:	e7d8      	b.n	ab72 <__aeabi_f2d+0x1e>
    abc0:	2d00      	cmp	r5, #0
    abc2:	d006      	beq.n	abd2 <__aeabi_f2d+0x7e>
    abc4:	0b32      	lsrs	r2, r6, #12
    abc6:	2680      	movs	r6, #128	; 0x80
    abc8:	0336      	lsls	r6, r6, #12
    abca:	076d      	lsls	r5, r5, #29
    abcc:	4316      	orrs	r6, r2
    abce:	4b09      	ldr	r3, [pc, #36]	; (abf4 <__aeabi_f2d+0xa0>)
    abd0:	e7cf      	b.n	ab72 <__aeabi_f2d+0x1e>
    abd2:	4b08      	ldr	r3, [pc, #32]	; (abf4 <__aeabi_f2d+0xa0>)
    abd4:	2600      	movs	r6, #0
    abd6:	e7cc      	b.n	ab72 <__aeabi_f2d+0x1e>
    abd8:	2300      	movs	r3, #0
    abda:	2600      	movs	r6, #0
    abdc:	e7c9      	b.n	ab72 <__aeabi_f2d+0x1e>
    abde:	0003      	movs	r3, r0
    abe0:	002a      	movs	r2, r5
    abe2:	3b0b      	subs	r3, #11
    abe4:	409a      	lsls	r2, r3
    abe6:	2500      	movs	r5, #0
    abe8:	e7e3      	b.n	abb2 <__aeabi_f2d+0x5e>
    abea:	46c0      	nop			; (mov r8, r8)
    abec:	800fffff 	.word	0x800fffff
    abf0:	00000389 	.word	0x00000389
    abf4:	000007ff 	.word	0x000007ff

0000abf8 <__aeabi_d2f>:
    abf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    abfa:	004c      	lsls	r4, r1, #1
    abfc:	0d64      	lsrs	r4, r4, #21
    abfe:	030b      	lsls	r3, r1, #12
    ac00:	1c62      	adds	r2, r4, #1
    ac02:	0f45      	lsrs	r5, r0, #29
    ac04:	0a5b      	lsrs	r3, r3, #9
    ac06:	0552      	lsls	r2, r2, #21
    ac08:	432b      	orrs	r3, r5
    ac0a:	0fc9      	lsrs	r1, r1, #31
    ac0c:	00c5      	lsls	r5, r0, #3
    ac0e:	0d52      	lsrs	r2, r2, #21
    ac10:	2a01      	cmp	r2, #1
    ac12:	dd28      	ble.n	ac66 <__aeabi_d2f+0x6e>
    ac14:	4a3a      	ldr	r2, [pc, #232]	; (ad00 <__aeabi_d2f+0x108>)
    ac16:	18a6      	adds	r6, r4, r2
    ac18:	2efe      	cmp	r6, #254	; 0xfe
    ac1a:	dc1b      	bgt.n	ac54 <__aeabi_d2f+0x5c>
    ac1c:	2e00      	cmp	r6, #0
    ac1e:	dd3e      	ble.n	ac9e <__aeabi_d2f+0xa6>
    ac20:	0180      	lsls	r0, r0, #6
    ac22:	0002      	movs	r2, r0
    ac24:	1e50      	subs	r0, r2, #1
    ac26:	4182      	sbcs	r2, r0
    ac28:	0f6d      	lsrs	r5, r5, #29
    ac2a:	432a      	orrs	r2, r5
    ac2c:	00db      	lsls	r3, r3, #3
    ac2e:	4313      	orrs	r3, r2
    ac30:	075a      	lsls	r2, r3, #29
    ac32:	d004      	beq.n	ac3e <__aeabi_d2f+0x46>
    ac34:	220f      	movs	r2, #15
    ac36:	401a      	ands	r2, r3
    ac38:	2a04      	cmp	r2, #4
    ac3a:	d000      	beq.n	ac3e <__aeabi_d2f+0x46>
    ac3c:	3304      	adds	r3, #4
    ac3e:	2280      	movs	r2, #128	; 0x80
    ac40:	04d2      	lsls	r2, r2, #19
    ac42:	401a      	ands	r2, r3
    ac44:	d05a      	beq.n	acfc <__aeabi_d2f+0x104>
    ac46:	3601      	adds	r6, #1
    ac48:	2eff      	cmp	r6, #255	; 0xff
    ac4a:	d003      	beq.n	ac54 <__aeabi_d2f+0x5c>
    ac4c:	019b      	lsls	r3, r3, #6
    ac4e:	0a5b      	lsrs	r3, r3, #9
    ac50:	b2f4      	uxtb	r4, r6
    ac52:	e001      	b.n	ac58 <__aeabi_d2f+0x60>
    ac54:	24ff      	movs	r4, #255	; 0xff
    ac56:	2300      	movs	r3, #0
    ac58:	0258      	lsls	r0, r3, #9
    ac5a:	05e4      	lsls	r4, r4, #23
    ac5c:	0a40      	lsrs	r0, r0, #9
    ac5e:	07c9      	lsls	r1, r1, #31
    ac60:	4320      	orrs	r0, r4
    ac62:	4308      	orrs	r0, r1
    ac64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac66:	2c00      	cmp	r4, #0
    ac68:	d007      	beq.n	ac7a <__aeabi_d2f+0x82>
    ac6a:	431d      	orrs	r5, r3
    ac6c:	d0f2      	beq.n	ac54 <__aeabi_d2f+0x5c>
    ac6e:	2080      	movs	r0, #128	; 0x80
    ac70:	00db      	lsls	r3, r3, #3
    ac72:	0480      	lsls	r0, r0, #18
    ac74:	4303      	orrs	r3, r0
    ac76:	26ff      	movs	r6, #255	; 0xff
    ac78:	e7da      	b.n	ac30 <__aeabi_d2f+0x38>
    ac7a:	432b      	orrs	r3, r5
    ac7c:	d003      	beq.n	ac86 <__aeabi_d2f+0x8e>
    ac7e:	2305      	movs	r3, #5
    ac80:	08db      	lsrs	r3, r3, #3
    ac82:	2cff      	cmp	r4, #255	; 0xff
    ac84:	d003      	beq.n	ac8e <__aeabi_d2f+0x96>
    ac86:	025b      	lsls	r3, r3, #9
    ac88:	0a5b      	lsrs	r3, r3, #9
    ac8a:	b2e4      	uxtb	r4, r4
    ac8c:	e7e4      	b.n	ac58 <__aeabi_d2f+0x60>
    ac8e:	2b00      	cmp	r3, #0
    ac90:	d032      	beq.n	acf8 <__aeabi_d2f+0x100>
    ac92:	2080      	movs	r0, #128	; 0x80
    ac94:	03c0      	lsls	r0, r0, #15
    ac96:	4303      	orrs	r3, r0
    ac98:	025b      	lsls	r3, r3, #9
    ac9a:	0a5b      	lsrs	r3, r3, #9
    ac9c:	e7dc      	b.n	ac58 <__aeabi_d2f+0x60>
    ac9e:	0032      	movs	r2, r6
    aca0:	3217      	adds	r2, #23
    aca2:	db14      	blt.n	acce <__aeabi_d2f+0xd6>
    aca4:	2280      	movs	r2, #128	; 0x80
    aca6:	271e      	movs	r7, #30
    aca8:	0412      	lsls	r2, r2, #16
    acaa:	4313      	orrs	r3, r2
    acac:	1bbf      	subs	r7, r7, r6
    acae:	2f1f      	cmp	r7, #31
    acb0:	dc0f      	bgt.n	acd2 <__aeabi_d2f+0xda>
    acb2:	4a14      	ldr	r2, [pc, #80]	; (ad04 <__aeabi_d2f+0x10c>)
    acb4:	4694      	mov	ip, r2
    acb6:	4464      	add	r4, ip
    acb8:	002a      	movs	r2, r5
    acba:	40a5      	lsls	r5, r4
    acbc:	002e      	movs	r6, r5
    acbe:	40a3      	lsls	r3, r4
    acc0:	1e75      	subs	r5, r6, #1
    acc2:	41ae      	sbcs	r6, r5
    acc4:	40fa      	lsrs	r2, r7
    acc6:	4333      	orrs	r3, r6
    acc8:	4313      	orrs	r3, r2
    acca:	2600      	movs	r6, #0
    accc:	e7b0      	b.n	ac30 <__aeabi_d2f+0x38>
    acce:	2400      	movs	r4, #0
    acd0:	e7d5      	b.n	ac7e <__aeabi_d2f+0x86>
    acd2:	2202      	movs	r2, #2
    acd4:	4252      	negs	r2, r2
    acd6:	1b96      	subs	r6, r2, r6
    acd8:	001a      	movs	r2, r3
    acda:	40f2      	lsrs	r2, r6
    acdc:	2f20      	cmp	r7, #32
    acde:	d009      	beq.n	acf4 <__aeabi_d2f+0xfc>
    ace0:	4809      	ldr	r0, [pc, #36]	; (ad08 <__aeabi_d2f+0x110>)
    ace2:	4684      	mov	ip, r0
    ace4:	4464      	add	r4, ip
    ace6:	40a3      	lsls	r3, r4
    ace8:	432b      	orrs	r3, r5
    acea:	1e5d      	subs	r5, r3, #1
    acec:	41ab      	sbcs	r3, r5
    acee:	2600      	movs	r6, #0
    acf0:	4313      	orrs	r3, r2
    acf2:	e79d      	b.n	ac30 <__aeabi_d2f+0x38>
    acf4:	2300      	movs	r3, #0
    acf6:	e7f7      	b.n	ace8 <__aeabi_d2f+0xf0>
    acf8:	2300      	movs	r3, #0
    acfa:	e7ad      	b.n	ac58 <__aeabi_d2f+0x60>
    acfc:	0034      	movs	r4, r6
    acfe:	e7bf      	b.n	ac80 <__aeabi_d2f+0x88>
    ad00:	fffffc80 	.word	0xfffffc80
    ad04:	fffffc82 	.word	0xfffffc82
    ad08:	fffffca2 	.word	0xfffffca2

0000ad0c <__clzsi2>:
    ad0c:	211c      	movs	r1, #28
    ad0e:	2301      	movs	r3, #1
    ad10:	041b      	lsls	r3, r3, #16
    ad12:	4298      	cmp	r0, r3
    ad14:	d301      	bcc.n	ad1a <__clzsi2+0xe>
    ad16:	0c00      	lsrs	r0, r0, #16
    ad18:	3910      	subs	r1, #16
    ad1a:	0a1b      	lsrs	r3, r3, #8
    ad1c:	4298      	cmp	r0, r3
    ad1e:	d301      	bcc.n	ad24 <__clzsi2+0x18>
    ad20:	0a00      	lsrs	r0, r0, #8
    ad22:	3908      	subs	r1, #8
    ad24:	091b      	lsrs	r3, r3, #4
    ad26:	4298      	cmp	r0, r3
    ad28:	d301      	bcc.n	ad2e <__clzsi2+0x22>
    ad2a:	0900      	lsrs	r0, r0, #4
    ad2c:	3904      	subs	r1, #4
    ad2e:	a202      	add	r2, pc, #8	; (adr r2, ad38 <__clzsi2+0x2c>)
    ad30:	5c10      	ldrb	r0, [r2, r0]
    ad32:	1840      	adds	r0, r0, r1
    ad34:	4770      	bx	lr
    ad36:	46c0      	nop			; (mov r8, r8)
    ad38:	02020304 	.word	0x02020304
    ad3c:	01010101 	.word	0x01010101
	...
    ad48:	00000002 	.word	0x00000002
    ad4c:	00000003 	.word	0x00000003
    ad50:	00000028 	.word	0x00000028
    ad54:	00000029 	.word	0x00000029
    ad58:	00000004 	.word	0x00000004
    ad5c:	00000005 	.word	0x00000005
    ad60:	00000006 	.word	0x00000006
    ad64:	00000007 	.word	0x00000007
    ad68:	0000ffff 	.word	0x0000ffff
    ad6c:	0000ffff 	.word	0x0000ffff
    ad70:	00000022 	.word	0x00000022
    ad74:	00000023 	.word	0x00000023
    ad78:	0000ffff 	.word	0x0000ffff
    ad7c:	0000ffff 	.word	0x0000ffff
    ad80:	0000ffff 	.word	0x0000ffff
    ad84:	0000ffff 	.word	0x0000ffff
    ad88:	00000008 	.word	0x00000008
    ad8c:	00000009 	.word	0x00000009
    ad90:	0000000a 	.word	0x0000000a
    ad94:	0000000b 	.word	0x0000000b
    ad98:	0000091a 	.word	0x0000091a
    ad9c:	00000920 	.word	0x00000920
    ada0:	00000920 	.word	0x00000920
    ada4:	00000920 	.word	0x00000920
    ada8:	00000920 	.word	0x00000920
    adac:	00000920 	.word	0x00000920
    adb0:	00000920 	.word	0x00000920
    adb4:	00000920 	.word	0x00000920
    adb8:	00000920 	.word	0x00000920
    adbc:	00000920 	.word	0x00000920
    adc0:	00000920 	.word	0x00000920
    adc4:	00000920 	.word	0x00000920
    adc8:	00000920 	.word	0x00000920
    adcc:	00000920 	.word	0x00000920
    add0:	00000920 	.word	0x00000920
    add4:	00000920 	.word	0x00000920
    add8:	000008f8 	.word	0x000008f8
    addc:	00000920 	.word	0x00000920
    ade0:	00000920 	.word	0x00000920
    ade4:	00000920 	.word	0x00000920
    ade8:	00000920 	.word	0x00000920
    adec:	00000920 	.word	0x00000920
    adf0:	00000920 	.word	0x00000920
    adf4:	00000920 	.word	0x00000920
    adf8:	00000920 	.word	0x00000920
    adfc:	00000920 	.word	0x00000920
    ae00:	00000920 	.word	0x00000920
    ae04:	00000920 	.word	0x00000920
    ae08:	00000920 	.word	0x00000920
    ae0c:	00000920 	.word	0x00000920
    ae10:	00000920 	.word	0x00000920
    ae14:	00000920 	.word	0x00000920
    ae18:	00000914 	.word	0x00000914
    ae1c:	00000920 	.word	0x00000920
    ae20:	00000920 	.word	0x00000920
    ae24:	00000920 	.word	0x00000920
    ae28:	00000920 	.word	0x00000920
    ae2c:	00000920 	.word	0x00000920
    ae30:	00000920 	.word	0x00000920
    ae34:	00000920 	.word	0x00000920
    ae38:	00000920 	.word	0x00000920
    ae3c:	00000920 	.word	0x00000920
    ae40:	00000920 	.word	0x00000920
    ae44:	00000920 	.word	0x00000920
    ae48:	00000920 	.word	0x00000920
    ae4c:	00000920 	.word	0x00000920
    ae50:	00000920 	.word	0x00000920
    ae54:	00000920 	.word	0x00000920
    ae58:	0000090e 	.word	0x0000090e
    ae5c:	000008b6 	.word	0x000008b6
    ae60:	000008cc 	.word	0x000008cc
    ae64:	000008e2 	.word	0x000008e2
    ae68:	0000089c 	.word	0x0000089c
    ae6c:	42000800 	.word	0x42000800
    ae70:	42000c00 	.word	0x42000c00
    ae74:	42001000 	.word	0x42001000
    ae78:	42001400 	.word	0x42001400
    ae7c:	42001800 	.word	0x42001800
    ae80:	42001c00 	.word	0x42001c00
    ae84:	0c0b0a09 	.word	0x0c0b0a09
    ae88:	00000e0d 	.word	0x00000e0d
    ae8c:	000039e2 	.word	0x000039e2
    ae90:	00003a5a 	.word	0x00003a5a
    ae94:	00003a5a 	.word	0x00003a5a
    ae98:	00003a00 	.word	0x00003a00
    ae9c:	000039fa 	.word	0x000039fa
    aea0:	00003a06 	.word	0x00003a06
    aea4:	000039e8 	.word	0x000039e8
    aea8:	00003a0c 	.word	0x00003a0c
    aeac:	00003a40 	.word	0x00003a40
    aeb0:	00003d24 	.word	0x00003d24
    aeb4:	00003d74 	.word	0x00003d74
    aeb8:	00003d74 	.word	0x00003d74
    aebc:	00003d70 	.word	0x00003d70
    aec0:	00003d16 	.word	0x00003d16
    aec4:	00003d36 	.word	0x00003d36
    aec8:	00003d06 	.word	0x00003d06
    aecc:	00003d48 	.word	0x00003d48
    aed0:	00003d5a 	.word	0x00003d5a
    aed4:	00003dc2 	.word	0x00003dc2
    aed8:	00003df0 	.word	0x00003df0
    aedc:	00003df0 	.word	0x00003df0
    aee0:	00003dec 	.word	0x00003dec
    aee4:	00003dbc 	.word	0x00003dbc
    aee8:	00003dc8 	.word	0x00003dc8
    aeec:	00003db6 	.word	0x00003db6
    aef0:	00003dce 	.word	0x00003dce
    aef4:	00003dd4 	.word	0x00003dd4
    aef8:	796c6e4f 	.word	0x796c6e4f
    aefc:	25415020 	.word	0x25415020
    af00:	50202c64 	.word	0x50202c64
    af04:	2c642541 	.word	0x2c642541
    af08:	25425020 	.word	0x25425020
    af0c:	50202c64 	.word	0x50202c64
    af10:	2c642542 	.word	0x2c642542
    af14:	206e6163 	.word	0x206e6163
    af18:	73206562 	.word	0x73206562
    af1c:	0a0d7465 	.word	0x0a0d7465
    af20:	00000000 	.word	0x00000000
    af24:	706c6568 	.word	0x706c6568
    af28:	50202d20 	.word	0x50202d20
    af2c:	746e6972 	.word	0x746e6972
    af30:	6c612073 	.word	0x6c612073
    af34:	6874206c 	.word	0x6874206c
    af38:	76612065 	.word	0x76612065
    af3c:	616c6961 	.word	0x616c6961
    af40:	20656c62 	.word	0x20656c62
    af44:	6d6d6f63 	.word	0x6d6d6f63
    af48:	73646e61 	.word	0x73646e61
    af4c:	646e6120 	.word	0x646e6120
    af50:	73206120 	.word	0x73206120
    af54:	74726f68 	.word	0x74726f68
    af58:	6e797320 	.word	0x6e797320
    af5c:	6973706f 	.word	0x6973706f
    af60:	0a0d2073 	.word	0x0a0d2073
    af64:	5f726576 	.word	0x5f726576
    af68:	2d206c62 	.word	0x2d206c62
    af6c:	69725020 	.word	0x69725020
    af70:	2073746e 	.word	0x2073746e
    af74:	20656874 	.word	0x20656874
    af78:	746f6f62 	.word	0x746f6f62
    af7c:	64616f6c 	.word	0x64616f6c
    af80:	66207265 	.word	0x66207265
    af84:	776d7269 	.word	0x776d7269
    af88:	20657261 	.word	0x20657261
    af8c:	73726576 	.word	0x73726576
    af90:	206e6f69 	.word	0x206e6f69
    af94:	65760a0d 	.word	0x65760a0d
    af98:	70615f72 	.word	0x70615f72
    af9c:	202d0970 	.word	0x202d0970
    afa0:	6e697250 	.word	0x6e697250
    afa4:	74207374 	.word	0x74207374
    afa8:	61206568 	.word	0x61206568
    afac:	696c7070 	.word	0x696c7070
    afb0:	69746163 	.word	0x69746163
    afb4:	63206e6f 	.word	0x63206e6f
    afb8:	2065646f 	.word	0x2065646f
    afbc:	6d726966 	.word	0x6d726966
    afc0:	65726177 	.word	0x65726177
    afc4:	72657620 	.word	0x72657620
    afc8:	6e6f6973 	.word	0x6e6f6973
    afcc:	670a0d20 	.word	0x670a0d20
    afd0:	5f6f6970 	.word	0x5f6f6970
    afd4:	20746573 	.word	0x20746573
    afd8:	726f705b 	.word	0x726f705b
    afdc:	5b205d74 	.word	0x5b205d74
    afe0:	5d6e6970 	.word	0x5d6e6970
    afe4:	53202d20 	.word	0x53202d20
    afe8:	61207465 	.word	0x61207465
    afec:	49504720 	.word	0x49504720
    aff0:	6970204f 	.word	0x6970204f
    aff4:	6f74206e 	.word	0x6f74206e
    aff8:	67696820 	.word	0x67696820
    affc:	202f2068 	.word	0x202f2068
    b000:	0a0d2031 	.word	0x0a0d2031
    b004:	6f697067 	.word	0x6f697067
    b008:	656c635f 	.word	0x656c635f
    b00c:	5b207261 	.word	0x5b207261
    b010:	74726f70 	.word	0x74726f70
    b014:	705b205d 	.word	0x705b205d
    b018:	095d6e69 	.word	0x095d6e69
    b01c:	6553202d 	.word	0x6553202d
    b020:	20612074 	.word	0x20612074
    b024:	4f495047 	.word	0x4f495047
    b028:	6e697020 	.word	0x6e697020
    b02c:	206f7420 	.word	0x206f7420
    b030:	20776f6c 	.word	0x20776f6c
    b034:	2030202f 	.word	0x2030202f
    b038:	70670a0d 	.word	0x70670a0d
    b03c:	675f6f69 	.word	0x675f6f69
    b040:	5b207465 	.word	0x5b207465
    b044:	74726f70 	.word	0x74726f70
    b048:	705b205d 	.word	0x705b205d
    b04c:	205d6e69 	.word	0x205d6e69
    b050:	6547202d 	.word	0x6547202d
    b054:	74732074 	.word	0x74732074
    b058:	20657461 	.word	0x20657461
    b05c:	7320666f 	.word	0x7320666f
    b060:	69636570 	.word	0x69636570
    b064:	64656966 	.word	0x64656966
    b068:	49504720 	.word	0x49504720
    b06c:	6970204f 	.word	0x6970204f
    b070:	0a0d206e 	.word	0x0a0d206e
    b074:	2063616d 	.word	0x2063616d
    b078:	6572202d 	.word	0x6572202d
    b07c:	6e727574 	.word	0x6e727574
    b080:	68742073 	.word	0x68742073
    b084:	616d2065 	.word	0x616d2065
    b088:	64612063 	.word	0x64612063
    b08c:	73657264 	.word	0x73657264
    b090:	666f2073 	.word	0x666f2073
    b094:	65687420 	.word	0x65687420
    b098:	76656420 	.word	0x76656420
    b09c:	20656369 	.word	0x20656369
    b0a0:	70690a0d 	.word	0x70690a0d
    b0a4:	72202d20 	.word	0x72202d20
    b0a8:	72757465 	.word	0x72757465
    b0ac:	7420736e 	.word	0x7420736e
    b0b0:	49206568 	.word	0x49206568
    b0b4:	20347650 	.word	0x20347650
    b0b8:	72646461 	.word	0x72646461
    b0bc:	20737365 	.word	0x20737365
    b0c0:	65720a0d 	.word	0x65720a0d
    b0c4:	3c5f6461 	.word	0x3c5f6461
    b0c8:	736e6573 	.word	0x736e6573
    b0cc:	203e726f 	.word	0x203e726f
    b0d0:	6165725b 	.word	0x6165725b
    b0d4:	676e6964 	.word	0x676e6964
    b0d8:	5b205d73 	.word	0x5b205d73
    b0dc:	65746e69 	.word	0x65746e69
    b0e0:	6c617672 	.word	0x6c617672
    b0e4:	202d205d 	.word	0x202d205d
    b0e8:	6e697250 	.word	0x6e697250
    b0ec:	61207374 	.word	0x61207374
    b0f0:	6d756e20 	.word	0x6d756e20
    b0f4:	20726562 	.word	0x20726562
    b0f8:	7220666f 	.word	0x7220666f
    b0fc:	69646165 	.word	0x69646165
    b100:	2073676e 	.word	0x2073676e
    b104:	74207461 	.word	0x74207461
    b108:	67206568 	.word	0x67206568
    b10c:	6e657669 	.word	0x6e657669
    b110:	746e6920 	.word	0x746e6920
    b114:	61767265 	.word	0x61767265
    b118:	0a0d206c 	.word	0x0a0d206c
    b11c:	5f636461 	.word	0x5f636461
    b120:	20746567 	.word	0x20746567
    b124:	726f705b 	.word	0x726f705b
    b128:	5b205d74 	.word	0x5b205d74
    b12c:	5d6e6970 	.word	0x5d6e6970
    b130:	47202d20 	.word	0x47202d20
    b134:	74207465 	.word	0x74207465
    b138:	41206568 	.word	0x41206568
    b13c:	76204344 	.word	0x76204344
    b140:	65756c61 	.word	0x65756c61
    b144:	20666f20 	.word	0x20666f20
    b148:	20656874 	.word	0x20656874
    b14c:	65766967 	.word	0x65766967
    b150:	6970206e 	.word	0x6970206e
    b154:	0d202e6e 	.word	0x0d202e6e
    b158:	75636d0a 	.word	0x75636d0a
    b15c:	6d65745f 	.word	0x6d65745f
    b160:	202d2070 	.word	0x202d2070
    b164:	6f706552 	.word	0x6f706552
    b168:	20737472 	.word	0x20737472
    b16c:	20656874 	.word	0x20656874
    b170:	706d6574 	.word	0x706d6574
    b174:	74617265 	.word	0x74617265
    b178:	20657275 	.word	0x20657275
    b17c:	7420666f 	.word	0x7420666f
    b180:	6d206568 	.word	0x6d206568
    b184:	69207563 	.word	0x69207563
    b188:	6543206e 	.word	0x6543206e
    b18c:	7569736c 	.word	0x7569736c
    b190:	0d202e73 	.word	0x0d202e73
    b194:	6332690a 	.word	0x6332690a
    b198:	6163735f 	.word	0x6163735f
    b19c:	202d206e 	.word	0x202d206e
    b1a0:	6e697250 	.word	0x6e697250
    b1a4:	6f207374 	.word	0x6f207374
    b1a8:	61207475 	.word	0x61207475
    b1ac:	73696c20 	.word	0x73696c20
    b1b0:	6f632074 	.word	0x6f632074
    b1b4:	63656e6e 	.word	0x63656e6e
    b1b8:	20646574 	.word	0x20646574
    b1bc:	20433249 	.word	0x20433249
    b1c0:	76616c73 	.word	0x76616c73
    b1c4:	64612065 	.word	0x64612065
    b1c8:	73657264 	.word	0x73657264
    b1cc:	20736573 	.word	0x20736573
    b1d0:	0000000d 	.word	0x0000000d
    b1d4:	2e302e30 	.word	0x2e302e30
    b1d8:	00000030 	.word	0x00000030
    b1dc:	73726556 	.word	0x73726556
    b1e0:	3a6e6f69 	.word	0x3a6e6f69
    b1e4:	20732520 	.word	0x20732520
    b1e8:	00000a0d 	.word	0x00000a0d
    b1ec:	206e6950 	.word	0x206e6950
    b1f0:	73206425 	.word	0x73206425
    b1f4:	68207465 	.word	0x68207465
    b1f8:	0d686769 	.word	0x0d686769
    b1fc:	0000000a 	.word	0x0000000a
    b200:	206e6950 	.word	0x206e6950
    b204:	63206425 	.word	0x63206425
    b208:	7261656c 	.word	0x7261656c
    b20c:	0a0d6465 	.word	0x0a0d6465
    b210:	00000000 	.word	0x00000000
    b214:	206e6970 	.word	0x206e6970
    b218:	76206425 	.word	0x76206425
    b21c:	65756c61 	.word	0x65756c61
    b220:	6425203a 	.word	0x6425203a
    b224:	00000a0d 	.word	0x00000a0d
    b228:	302e3030 	.word	0x302e3030
    b22c:	30302e30 	.word	0x30302e30
    b230:	0d30302e 	.word	0x0d30302e
    b234:	00000000 	.word	0x00000000
    b238:	2e353532 	.word	0x2e353532
    b23c:	2e353532 	.word	0x2e353532
    b240:	2e353532 	.word	0x2e353532
    b244:	20353532 	.word	0x20353532
    b248:	0000000d 	.word	0x0000000d
    b24c:	0078756c 	.word	0x0078756c
    b250:	72727543 	.word	0x72727543
    b254:	20746e65 	.word	0x20746e65
    b258:	3a78756c 	.word	0x3a78756c
    b25c:	0d642520 	.word	0x0d642520
    b260:	0000000a 	.word	0x0000000a
    b264:	6c696166 	.word	0x6c696166
    b268:	206e6f20 	.word	0x206e6f20
    b26c:	206e6970 	.word	0x206e6970
    b270:	20434441 	.word	0x20434441
    b274:	206e6163 	.word	0x206e6163
    b278:	72727563 	.word	0x72727563
    b27c:	6c746e65 	.word	0x6c746e65
    b280:	6e6f2079 	.word	0x6e6f2079
    b284:	6220796c 	.word	0x6220796c
    b288:	6f632065 	.word	0x6f632065
    b28c:	6769666e 	.word	0x6769666e
    b290:	64657275 	.word	0x64657275
    b294:	206e6f20 	.word	0x206e6f20
    b298:	25632550 	.word	0x25632550
    b29c:	50202e64 	.word	0x50202e64
    b2a0:	7361656c 	.word	0x7361656c
    b2a4:	72742065 	.word	0x72742065
    b2a8:	67612079 	.word	0x67612079
    b2ac:	2e6e6961 	.word	0x2e6e6961
    b2b0:	00000a0d 	.word	0x00000a0d
    b2b4:	6c696166 	.word	0x6c696166
    b2b8:	206e6f20 	.word	0x206e6f20
    b2bc:	74726f70 	.word	0x74726f70
    b2c0:	43444120 	.word	0x43444120
    b2c4:	6e616320 	.word	0x6e616320
    b2c8:	72756320 	.word	0x72756320
    b2cc:	746e6572 	.word	0x746e6572
    b2d0:	6f20796c 	.word	0x6f20796c
    b2d4:	20796c6e 	.word	0x20796c6e
    b2d8:	63206562 	.word	0x63206562
    b2dc:	69666e6f 	.word	0x69666e6f
    b2e0:	65727567 	.word	0x65727567
    b2e4:	6e6f2064 	.word	0x6e6f2064
    b2e8:	25632520 	.word	0x25632520
    b2ec:	50202e64 	.word	0x50202e64
    b2f0:	7361656c 	.word	0x7361656c
    b2f4:	72742065 	.word	0x72742065
    b2f8:	67612079 	.word	0x67612079
    b2fc:	2e6e6961 	.word	0x2e6e6961
    b300:	00000a0d 	.word	0x00000a0d
    b304:	746c6f56 	.word	0x746c6f56
    b308:	20656761 	.word	0x20656761
    b30c:	50207461 	.word	0x50207461
    b310:	64256325 	.word	0x64256325
    b314:	6625203a 	.word	0x6625203a
    b318:	00000a0d 	.word	0x00000a0d
    b31c:	2055434d 	.word	0x2055434d
    b320:	706d6574 	.word	0x706d6574
    b324:	74617265 	.word	0x74617265
    b328:	3a657275 	.word	0x3a657275
    b32c:	43642520 	.word	0x43642520
    b330:	000a0d20 	.word	0x000a0d20
    b334:	72646441 	.word	0x72646441
    b338:	20737365 	.word	0x20737365
    b33c:	6e756f66 	.word	0x6e756f66
    b340:	74612064 	.word	0x74612064
    b344:	58232520 	.word	0x58232520
    b348:	00000a0d 	.word	0x00000a0d
    b34c:	72656874 	.word	0x72656874
    b350:	61772065 	.word	0x61772065
    b354:	6e612073 	.word	0x6e612073
    b358:	72726520 	.word	0x72726520
    b35c:	7020726f 	.word	0x7020726f
    b360:	69737261 	.word	0x69737261
    b364:	7920676e 	.word	0x7920676e
    b368:	2072756f 	.word	0x2072756f
    b36c:	73677261 	.word	0x73677261
    b370:	726f6620 	.word	0x726f6620
    b374:	2e732520 	.word	0x2e732520
    b378:	65655320 	.word	0x65655320
    b37c:	6c656820 	.word	0x6c656820
    b380:	6f662070 	.word	0x6f662070
    b384:	6f632072 	.word	0x6f632072
    b388:	63657272 	.word	0x63657272
    b38c:	73752074 	.word	0x73752074
    b390:	2e656761 	.word	0x2e656761
    b394:	00000a0d 	.word	0x00000a0d
    b398:	61766e49 	.word	0x61766e49
    b39c:	2064696c 	.word	0x2064696c
    b3a0:	626d756e 	.word	0x626d756e
    b3a4:	6f207265 	.word	0x6f207265
    b3a8:	72612066 	.word	0x72612066
    b3ac:	203a7367 	.word	0x203a7367
    b3b0:	72207325 	.word	0x72207325
    b3b4:	69757165 	.word	0x69757165
    b3b8:	20736572 	.word	0x20736572
    b3bc:	61206425 	.word	0x61206425
    b3c0:	6d756772 	.word	0x6d756772
    b3c4:	73746e65 	.word	0x73746e65
    b3c8:	646e6120 	.word	0x646e6120
    b3cc:	756f7920 	.word	0x756f7920
    b3d0:	6f727020 	.word	0x6f727020
    b3d4:	65646976 	.word	0x65646976
    b3d8:	64252064 	.word	0x64252064
    b3dc:	2e0a0d20 	.word	0x2e0a0d20
    b3e0:	20656553 	.word	0x20656553
    b3e4:	706c6568 	.word	0x706c6568
    b3e8:	726f6620 	.word	0x726f6620
    b3ec:	726f6d20 	.word	0x726f6d20
    b3f0:	6e692065 	.word	0x6e692065
    b3f4:	6d726f66 	.word	0x6d726f66
    b3f8:	6f697461 	.word	0x6f697461
    b3fc:	0d202e6e 	.word	0x0d202e6e
    b400:	0000000a 	.word	0x0000000a
    b404:	706c6568 	.word	0x706c6568
    b408:	00000000 	.word	0x00000000
    b40c:	5f726576 	.word	0x5f726576
    b410:	00006c62 	.word	0x00006c62
    b414:	5f726576 	.word	0x5f726576
    b418:	00707061 	.word	0x00707061
    b41c:	6f697067 	.word	0x6f697067
    b420:	7465735f 	.word	0x7465735f
    b424:	00000000 	.word	0x00000000
    b428:	6f697067 	.word	0x6f697067
    b42c:	656c635f 	.word	0x656c635f
    b430:	00007261 	.word	0x00007261
    b434:	6f697067 	.word	0x6f697067
    b438:	7465675f 	.word	0x7465675f
    b43c:	00000000 	.word	0x00000000
    b440:	0063616d 	.word	0x0063616d
    b444:	00007069 	.word	0x00007069
    b448:	64616572 	.word	0x64616572
    b44c:	00000000 	.word	0x00000000
    b450:	5f636461 	.word	0x5f636461
    b454:	00746567 	.word	0x00746567
    b458:	5f75636d 	.word	0x5f75636d
    b45c:	706d6574 	.word	0x706d6574
    b460:	00000000 	.word	0x00000000
    b464:	5f633269 	.word	0x5f633269
    b468:	6e616373 	.word	0x6e616373
    b46c:	00000000 	.word	0x00000000
    b470:	6e6e7572 	.word	0x6e6e7572
    b474:	20676e69 	.word	0x20676e69
    b478:	5f633269 	.word	0x5f633269
    b47c:	6e616373 	.word	0x6e616373
    b480:	0000000d 	.word	0x0000000d
    b484:	61766e49 	.word	0x61766e49
    b488:	2064696c 	.word	0x2064696c
    b48c:	75706e69 	.word	0x75706e69
    b490:	53202e74 	.word	0x53202e74
    b494:	68206565 	.word	0x68206565
    b498:	20706c65 	.word	0x20706c65
    b49c:	20726f66 	.word	0x20726f66
    b4a0:	72726f63 	.word	0x72726f63
    b4a4:	20746365 	.word	0x20746365
    b4a8:	67617375 	.word	0x67617375
    b4ac:	000d2e65 	.word	0x000d2e65
    b4b0:	00000020 	.word	0x00000020
    b4b4:	636c6557 	.word	0x636c6557
    b4b8:	20656d6f 	.word	0x20656d6f
    b4bc:	74206f74 	.word	0x74206f74
    b4c0:	45206568 	.word	0x45206568
    b4c4:	67726576 	.word	0x67726576
    b4c8:	6e656572 	.word	0x6e656572
    b4cc:	494c4320 	.word	0x494c4320
    b4d0:	00000d2e 	.word	0x00000d2e
    b4d4:	0000203e 	.word	0x0000203e

0000b4d8 <_global_impure_ptr>:
    b4d8:	20000050 4f500043 00584953 4e49002e     P.. C.POSIX...IN
    b4e8:	6e690046 414e0066 616e004e 0030006e     F.inf.NAN.nan.0.
    b4f8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    b508:	32313000 36353433 61393837 65646362     .0123456789abcde
    b518:	20000066                                         f.

0000b51a <_ctype_>:
    b51a:	20202000 20202020 28282020 20282828     .         ((((( 
    b52a:	20202020 20202020 20202020 20202020                     
    b53a:	10108820 10101010 10101010 10101010      ...............
    b54a:	04040410 04040404 10040404 10101010     ................
    b55a:	41411010 41414141 01010101 01010101     ..AAAAAA........
    b56a:	01010101 01010101 01010101 10101010     ................
    b57a:	42421010 42424242 02020202 02020202     ..BBBBBB........
    b58a:	02020202 02020202 02020202 10101010     ................
    b59a:	00000020 00000000 00000000 00000000      ...............
	...
    b61a:	666e4900 74696e69 614e0079 0000004e              .Infinity.NaN.

0000b628 <__sf_fake_stderr>:
	...

0000b648 <__sf_fake_stdin>:
	...

0000b668 <__sf_fake_stdout>:
	...

0000b688 <__mprec_bigtens>:
    b688:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    b698:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    b6a8:	7f73bf3c 75154fdd                       <.s..O.u

0000b6b0 <__mprec_tens>:
    b6b0:	00000000 3ff00000 00000000 40240000     .......?......$@
    b6c0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    b6d0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    b6e0:	00000000 412e8480 00000000 416312d0     .......A......cA
    b6f0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    b700:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    b710:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    b720:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    b730:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    b740:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    b750:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    b760:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    b770:	79d99db4 44ea7843                       ...yCx.D

0000b778 <p05.6047>:
    b778:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    b788:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
    b798:	0000981c 000097fe 000097b8 000096d6     ................
    b7a8:	000097b8 000097f0 000097b8 000096d6     ................
    b7b8:	000097fe 000097fe 000097f0 000096d6     ................
    b7c8:	000096ce 000096ce 000096ce 00009a34     ............4...
    b7d8:	0000a07c 00009f3c 00009f3c 00009f38     |...<...<...8...
    b7e8:	0000a054 0000a054 0000a046 00009f38     T...T...F...8...
    b7f8:	0000a054 0000a046 0000a054 00009f38     T...F...T...8...
    b808:	0000a05c 0000a05c 0000a05c 0000a260     \...\...\...`...

0000b818 <_init>:
    b818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b81a:	46c0      	nop			; (mov r8, r8)
    b81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b81e:	bc08      	pop	{r3}
    b820:	469e      	mov	lr, r3
    b822:	4770      	bx	lr

0000b824 <__init_array_start>:
    b824:	000000dd 	.word	0x000000dd

0000b828 <_fini>:
    b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b82a:	46c0      	nop			; (mov r8, r8)
    b82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b82e:	bc08      	pop	{r3}
    b830:	469e      	mov	lr, r3
    b832:	4770      	bx	lr

0000b834 <__fini_array_start>:
    b834:	000000b5 	.word	0x000000b5
