
EverGreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001b2e0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e8  20000000  0001b2e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000738  200001e8  0001b4c8  000301e8  2**2
                  ALLOC
  3 .stack        00002000  20000920  0001bc00  000301e8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
  6 .debug_info   00094316  00000000  00000000  000302da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000097e6  00000000  00000000  000c45f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a47f  00000000  00000000  000cddd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001c90  00000000  00000000  000d8255  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001a50  00000000  00000000  000d9ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002869e  00000000  00000000  000db935  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002a124  00000000  00000000  00103fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009a93f  00000000  00000000  0012e0f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00007600  00000000  00000000  001c8a38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 29 00 20 55 1a 01 00 4d 1b 01 00 4d 1b 01 00      ). U...M...M...
	...
      2c:	4d 1b 01 00 00 00 00 00 00 00 00 00 4d 1b 01 00     M...........M...
      3c:	4d 1b 01 00 4d 1b 01 00 4d 1b 01 00 4d 1b 01 00     M...M...M...M...
      4c:	4d 1b 01 00 29 91 00 00 4d 1b 01 00 4d 1b 01 00     M...)...M...M...
      5c:	4d 1b 01 00 4d 1b 01 00 ad 07 01 00 c5 07 01 00     M...M...........
      6c:	dd 07 01 00 f5 07 01 00 0d 08 01 00 25 08 01 00     ............%...
      7c:	39 b5 00 00 4d b5 00 00 61 b5 00 00 4d 1b 01 00     9...M...a...M...
      8c:	4d 1b 01 00 4d 1b 01 00 00 00 00 00 00 00 00 00     M...M...........
      9c:	4d 1b 01 00 4d 1b 01 00 4d 1b 01 00 4d 1b 01 00     M...M...M...M...
      ac:	4d 1b 01 00 00 00 00 00                             M.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001e8 	.word	0x200001e8
      d4:	00000000 	.word	0x00000000
      d8:	0001b2e0 	.word	0x0001b2e0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001ec 	.word	0x200001ec
     108:	0001b2e0 	.word	0x0001b2e0
     10c:	0001b2e0 	.word	0x0001b2e0
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     12c:	230e      	movs	r3, #14
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     166:	2300      	movs	r3, #0
	}
}
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	41004400 	.word	0x41004400

00000174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     174:	b580      	push	{r7, lr}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	0002      	movs	r2, r0
     17c:	1dfb      	adds	r3, r7, #7
     17e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     180:	1dfb      	adds	r3, r7, #7
     182:	781b      	ldrb	r3, [r3, #0]
     184:	0018      	movs	r0, r3
     186:	4b03      	ldr	r3, [pc, #12]	; (194 <port_get_group_from_gpio_pin+0x20>)
     188:	4798      	blx	r3
     18a:	0003      	movs	r3, r0
}
     18c:	0018      	movs	r0, r3
     18e:	46bd      	mov	sp, r7
     190:	b002      	add	sp, #8
     192:	bd80      	pop	{r7, pc}
     194:	00000115 	.word	0x00000115

00000198 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     198:	b580      	push	{r7, lr}
     19a:	b082      	sub	sp, #8
     19c:	af00      	add	r7, sp, #0
     19e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     1a0:	687b      	ldr	r3, [r7, #4]
     1a2:	2200      	movs	r2, #0
     1a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1a6:	687b      	ldr	r3, [r7, #4]
     1a8:	2201      	movs	r2, #1
     1aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     1ac:	687b      	ldr	r3, [r7, #4]
     1ae:	2200      	movs	r2, #0
     1b0:	709a      	strb	r2, [r3, #2]
}
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	46bd      	mov	sp, r7
     1b6:	b002      	add	sp, #8
     1b8:	bd80      	pop	{r7, pc}
	...

000001bc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b084      	sub	sp, #16
     1c0:	af00      	add	r7, sp, #0
     1c2:	0002      	movs	r2, r0
     1c4:	1dfb      	adds	r3, r7, #7
     1c6:	701a      	strb	r2, [r3, #0]
     1c8:	1dbb      	adds	r3, r7, #6
     1ca:	1c0a      	adds	r2, r1, #0
     1cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1ce:	1dfb      	adds	r3, r7, #7
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	0018      	movs	r0, r3
     1d4:	4b0d      	ldr	r3, [pc, #52]	; (20c <port_pin_set_output_level+0x50>)
     1d6:	4798      	blx	r3
     1d8:	0003      	movs	r3, r0
     1da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1dc:	1dfb      	adds	r3, r7, #7
     1de:	781b      	ldrb	r3, [r3, #0]
     1e0:	221f      	movs	r2, #31
     1e2:	4013      	ands	r3, r2
     1e4:	2201      	movs	r2, #1
     1e6:	409a      	lsls	r2, r3
     1e8:	0013      	movs	r3, r2
     1ea:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1ec:	1dbb      	adds	r3, r7, #6
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d003      	beq.n	1fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	68ba      	ldr	r2, [r7, #8]
     1f8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     1fa:	e002      	b.n	202 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     1fc:	68fb      	ldr	r3, [r7, #12]
     1fe:	68ba      	ldr	r2, [r7, #8]
     200:	615a      	str	r2, [r3, #20]
}
     202:	46c0      	nop			; (mov r8, r8)
     204:	46bd      	mov	sp, r7
     206:	b004      	add	sp, #16
     208:	bd80      	pop	{r7, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	00000175 	.word	0x00000175

00000210 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     210:	b580      	push	{r7, lr}
     212:	b082      	sub	sp, #8
     214:	af00      	add	r7, sp, #0
     216:	0002      	movs	r2, r0
     218:	1dfb      	adds	r3, r7, #7
     21a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     21c:	4b06      	ldr	r3, [pc, #24]	; (238 <system_interrupt_enable+0x28>)
     21e:	1dfa      	adds	r2, r7, #7
     220:	7812      	ldrb	r2, [r2, #0]
     222:	0011      	movs	r1, r2
     224:	221f      	movs	r2, #31
     226:	400a      	ands	r2, r1
     228:	2101      	movs	r1, #1
     22a:	4091      	lsls	r1, r2
     22c:	000a      	movs	r2, r1
     22e:	601a      	str	r2, [r3, #0]
}
     230:	46c0      	nop			; (mov r8, r8)
     232:	46bd      	mov	sp, r7
     234:	b002      	add	sp, #8
     236:	bd80      	pop	{r7, pc}
     238:	e000e100 	.word	0xe000e100

0000023c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     23c:	b580      	push	{r7, lr}
     23e:	b084      	sub	sp, #16
     240:	af00      	add	r7, sp, #0
     242:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     244:	687b      	ldr	r3, [r7, #4]
     246:	681b      	ldr	r3, [r3, #0]
     248:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     24a:	68fb      	ldr	r3, [r7, #12]
     24c:	69db      	ldr	r3, [r3, #28]
     24e:	1e5a      	subs	r2, r3, #1
     250:	4193      	sbcs	r3, r2
     252:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     254:	0018      	movs	r0, r3
     256:	46bd      	mov	sp, r7
     258:	b004      	add	sp, #16
     25a:	bd80      	pop	{r7, pc}

0000025c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     264:	687b      	ldr	r3, [r7, #4]
     266:	2201      	movs	r2, #1
     268:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	2200      	movs	r2, #0
     26e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     270:	687b      	ldr	r3, [r7, #4]
     272:	2200      	movs	r2, #0
     274:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     276:	687b      	ldr	r3, [r7, #4]
     278:	22c0      	movs	r2, #192	; 0xc0
     27a:	0392      	lsls	r2, r2, #14
     27c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     27e:	687b      	ldr	r3, [r7, #4]
     280:	2200      	movs	r2, #0
     282:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     284:	687b      	ldr	r3, [r7, #4]
     286:	2200      	movs	r2, #0
     288:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	2201      	movs	r2, #1
     28e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2201      	movs	r2, #1
     294:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     296:	687b      	ldr	r3, [r7, #4]
     298:	2200      	movs	r2, #0
     29a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     29c:	687b      	ldr	r3, [r7, #4]
     29e:	2224      	movs	r2, #36	; 0x24
     2a0:	2100      	movs	r1, #0
     2a2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	3318      	adds	r3, #24
     2a8:	220c      	movs	r2, #12
     2aa:	2100      	movs	r1, #0
     2ac:	0018      	movs	r0, r3
     2ae:	4b0a      	ldr	r3, [pc, #40]	; (2d8 <spi_get_config_defaults+0x7c>)
     2b0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	4a09      	ldr	r2, [pc, #36]	; (2dc <spi_get_config_defaults+0x80>)
     2b6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	2200      	movs	r2, #0
     2bc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     2be:	687b      	ldr	r3, [r7, #4]
     2c0:	2200      	movs	r2, #0
     2c2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     2c4:	687b      	ldr	r3, [r7, #4]
     2c6:	2200      	movs	r2, #0
     2c8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     2ca:	687b      	ldr	r3, [r7, #4]
     2cc:	2200      	movs	r2, #0
     2ce:	635a      	str	r2, [r3, #52]	; 0x34

};
     2d0:	46c0      	nop			; (mov r8, r8)
     2d2:	46bd      	mov	sp, r7
     2d4:	b002      	add	sp, #8
     2d6:	bd80      	pop	{r7, pc}
     2d8:	0001340b 	.word	0x0001340b
     2dc:	000186a0 	.word	0x000186a0

000002e0 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b084      	sub	sp, #16
     2e4:	af00      	add	r7, sp, #0
     2e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	681b      	ldr	r3, [r3, #0]
     2ec:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	681b      	ldr	r3, [r3, #0]
     2f2:	0018      	movs	r0, r3
     2f4:	4b0b      	ldr	r3, [pc, #44]	; (324 <spi_enable+0x44>)
     2f6:	4798      	blx	r3
     2f8:	0003      	movs	r3, r0
     2fa:	0018      	movs	r0, r3
     2fc:	4b0a      	ldr	r3, [pc, #40]	; (328 <spi_enable+0x48>)
     2fe:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     300:	46c0      	nop			; (mov r8, r8)
     302:	687b      	ldr	r3, [r7, #4]
     304:	0018      	movs	r0, r3
     306:	4b09      	ldr	r3, [pc, #36]	; (32c <spi_enable+0x4c>)
     308:	4798      	blx	r3
     30a:	1e03      	subs	r3, r0, #0
     30c:	d1f9      	bne.n	302 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     30e:	68fb      	ldr	r3, [r7, #12]
     310:	681b      	ldr	r3, [r3, #0]
     312:	2202      	movs	r2, #2
     314:	431a      	orrs	r2, r3
     316:	68fb      	ldr	r3, [r7, #12]
     318:	601a      	str	r2, [r3, #0]
}
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	46bd      	mov	sp, r7
     31e:	b004      	add	sp, #16
     320:	bd80      	pop	{r7, pc}
     322:	46c0      	nop			; (mov r8, r8)
     324:	00010769 	.word	0x00010769
     328:	00000211 	.word	0x00000211
     32c:	0000023d 	.word	0x0000023d

00000330 <at25dfx_spi_get_config_defaults>:
 *
 * \param[out] config Address of config struct to initialize.
 */
static inline void at25dfx_spi_get_config_defaults(
		struct spi_config *const config)
{
     330:	b580      	push	{r7, lr}
     332:	b082      	sub	sp, #8
     334:	af00      	add	r7, sp, #0
     336:	6078      	str	r0, [r7, #4]
	spi_get_config_defaults(config);
     338:	687b      	ldr	r3, [r7, #4]
     33a:	0018      	movs	r0, r3
     33c:	4b02      	ldr	r3, [pc, #8]	; (348 <at25dfx_spi_get_config_defaults+0x18>)
     33e:	4798      	blx	r3
}
     340:	46c0      	nop			; (mov r8, r8)
     342:	46bd      	mov	sp, r7
     344:	b002      	add	sp, #8
     346:	bd80      	pop	{r7, pc}
     348:	0000025d 	.word	0x0000025d

0000034c <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
     34c:	b580      	push	{r7, lr}
     34e:	b086      	sub	sp, #24
     350:	af00      	add	r7, sp, #0
     352:	60f8      	str	r0, [r7, #12]
     354:	60b9      	str	r1, [r7, #8]
     356:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
     358:	687b      	ldr	r3, [r7, #4]
     35a:	781a      	ldrb	r2, [r3, #0]
     35c:	68fb      	ldr	r3, [r7, #12]
     35e:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
     360:	687b      	ldr	r3, [r7, #4]
     362:	785a      	ldrb	r2, [r3, #1]
     364:	68fb      	ldr	r3, [r7, #12]
     366:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
     368:	68fb      	ldr	r3, [r7, #12]
     36a:	68ba      	ldr	r2, [r7, #8]
     36c:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
     36e:	2314      	movs	r3, #20
     370:	18fb      	adds	r3, r7, r3
     372:	0018      	movs	r0, r3
     374:	4b0c      	ldr	r3, [pc, #48]	; (3a8 <at25dfx_chip_init+0x5c>)
     376:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
     378:	2314      	movs	r3, #20
     37a:	18fb      	adds	r3, r7, r3
     37c:	2201      	movs	r2, #1
     37e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
     380:	68fb      	ldr	r3, [r7, #12]
     382:	795b      	ldrb	r3, [r3, #5]
     384:	2214      	movs	r2, #20
     386:	18ba      	adds	r2, r7, r2
     388:	0011      	movs	r1, r2
     38a:	0018      	movs	r0, r3
     38c:	4b07      	ldr	r3, [pc, #28]	; (3ac <at25dfx_chip_init+0x60>)
     38e:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
     390:	68fb      	ldr	r3, [r7, #12]
     392:	795b      	ldrb	r3, [r3, #5]
     394:	2101      	movs	r1, #1
     396:	0018      	movs	r0, r3
     398:	4b05      	ldr	r3, [pc, #20]	; (3b0 <at25dfx_chip_init+0x64>)
     39a:	4798      	blx	r3

	return STATUS_OK;
     39c:	2300      	movs	r3, #0
}
     39e:	0018      	movs	r0, r3
     3a0:	46bd      	mov	sp, r7
     3a2:	b006      	add	sp, #24
     3a4:	bd80      	pop	{r7, pc}
     3a6:	46c0      	nop			; (mov r8, r8)
     3a8:	00000199 	.word	0x00000199
     3ac:	00010a45 	.word	0x00010a45
     3b0:	000001bd 	.word	0x000001bd

000003b4 <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
     3b4:	b580      	push	{r7, lr}
     3b6:	b082      	sub	sp, #8
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	2200      	movs	r2, #0
     3c0:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	2201      	movs	r2, #1
     3c6:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
     3c8:	4b08      	ldr	r3, [pc, #32]	; (3ec <nvm_get_config_defaults+0x38>)
     3ca:	685b      	ldr	r3, [r3, #4]
     3cc:	06db      	lsls	r3, r3, #27
     3ce:	0f1b      	lsrs	r3, r3, #28
     3d0:	b2db      	uxtb	r3, r3
     3d2:	001a      	movs	r2, r3
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	2200      	movs	r2, #0
     3dc:	70da      	strb	r2, [r3, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
     3de:	687b      	ldr	r3, [r7, #4]
     3e0:	2200      	movs	r2, #0
     3e2:	711a      	strb	r2, [r3, #4]
}
     3e4:	46c0      	nop			; (mov r8, r8)
     3e6:	46bd      	mov	sp, r7
     3e8:	b002      	add	sp, #8
     3ea:	bd80      	pop	{r7, pc}
     3ec:	41004000 	.word	0x41004000

000003f0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     3f0:	b580      	push	{r7, lr}
     3f2:	b084      	sub	sp, #16
     3f4:	af00      	add	r7, sp, #0
     3f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	681b      	ldr	r3, [r3, #0]
     3fc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     3fe:	68fb      	ldr	r3, [r7, #12]
     400:	69db      	ldr	r3, [r3, #28]
     402:	1e5a      	subs	r2, r3, #1
     404:	4193      	sbcs	r3, r2
     406:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     408:	0018      	movs	r0, r3
     40a:	46bd      	mov	sp, r7
     40c:	b004      	add	sp, #16
     40e:	bd80      	pop	{r7, pc}

00000410 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     418:	46c0      	nop			; (mov r8, r8)
     41a:	687b      	ldr	r3, [r7, #4]
     41c:	0018      	movs	r0, r3
     41e:	4b04      	ldr	r3, [pc, #16]	; (430 <_usart_wait_for_sync+0x20>)
     420:	4798      	blx	r3
     422:	1e03      	subs	r3, r0, #0
     424:	d1f9      	bne.n	41a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     426:	46c0      	nop			; (mov r8, r8)
     428:	46bd      	mov	sp, r7
     42a:	b002      	add	sp, #8
     42c:	bd80      	pop	{r7, pc}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	000003f1 	.word	0x000003f1

00000434 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     434:	b580      	push	{r7, lr}
     436:	b082      	sub	sp, #8
     438:	af00      	add	r7, sp, #0
     43a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     43c:	687b      	ldr	r3, [r7, #4]
     43e:	2280      	movs	r2, #128	; 0x80
     440:	05d2      	lsls	r2, r2, #23
     442:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     444:	687b      	ldr	r3, [r7, #4]
     446:	2200      	movs	r2, #0
     448:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     44a:	687b      	ldr	r3, [r7, #4]
     44c:	22ff      	movs	r2, #255	; 0xff
     44e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     450:	687b      	ldr	r3, [r7, #4]
     452:	2200      	movs	r2, #0
     454:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     456:	687b      	ldr	r3, [r7, #4]
     458:	2200      	movs	r2, #0
     45a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     45c:	687b      	ldr	r3, [r7, #4]
     45e:	2296      	movs	r2, #150	; 0x96
     460:	0192      	lsls	r2, r2, #6
     462:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     464:	687b      	ldr	r3, [r7, #4]
     466:	2224      	movs	r2, #36	; 0x24
     468:	2101      	movs	r1, #1
     46a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	2225      	movs	r2, #37	; 0x25
     470:	2101      	movs	r1, #1
     472:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     474:	687b      	ldr	r3, [r7, #4]
     476:	2226      	movs	r2, #38	; 0x26
     478:	2100      	movs	r1, #0
     47a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     47c:	687b      	ldr	r3, [r7, #4]
     47e:	2227      	movs	r2, #39	; 0x27
     480:	2100      	movs	r1, #0
     482:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     484:	687b      	ldr	r3, [r7, #4]
     486:	2200      	movs	r2, #0
     488:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     48a:	687b      	ldr	r3, [r7, #4]
     48c:	2288      	movs	r2, #136	; 0x88
     48e:	0352      	lsls	r2, r2, #13
     490:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     492:	687b      	ldr	r3, [r7, #4]
     494:	222c      	movs	r2, #44	; 0x2c
     496:	2100      	movs	r1, #0
     498:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     49a:	687b      	ldr	r3, [r7, #4]
     49c:	222d      	movs	r2, #45	; 0x2d
     49e:	2100      	movs	r1, #0
     4a0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	2200      	movs	r2, #0
     4a6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	2200      	movs	r2, #0
     4ac:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     4ae:	687b      	ldr	r3, [r7, #4]
     4b0:	2200      	movs	r2, #0
     4b2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     4b4:	687b      	ldr	r3, [r7, #4]
     4b6:	2200      	movs	r2, #0
     4b8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     4ba:	687b      	ldr	r3, [r7, #4]
     4bc:	2200      	movs	r2, #0
     4be:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	2200      	movs	r2, #0
     4c4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	2200      	movs	r2, #0
     4ca:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	2200      	movs	r2, #0
     4d0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	2200      	movs	r2, #0
     4d6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     4d8:	687b      	ldr	r3, [r7, #4]
     4da:	2200      	movs	r2, #0
     4dc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     4de:	687b      	ldr	r3, [r7, #4]
     4e0:	2213      	movs	r2, #19
     4e2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	2200      	movs	r2, #0
     4e8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	46bd      	mov	sp, r7
     4ee:	b002      	add	sp, #8
     4f0:	bd80      	pop	{r7, pc}
	...

000004f4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     4f4:	b580      	push	{r7, lr}
     4f6:	b084      	sub	sp, #16
     4f8:	af00      	add	r7, sp, #0
     4fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     4fc:	687b      	ldr	r3, [r7, #4]
     4fe:	681b      	ldr	r3, [r3, #0]
     500:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     502:	687b      	ldr	r3, [r7, #4]
     504:	681b      	ldr	r3, [r3, #0]
     506:	0018      	movs	r0, r3
     508:	4b09      	ldr	r3, [pc, #36]	; (530 <usart_enable+0x3c>)
     50a:	4798      	blx	r3
     50c:	0003      	movs	r3, r0
     50e:	0018      	movs	r0, r3
     510:	4b08      	ldr	r3, [pc, #32]	; (534 <usart_enable+0x40>)
     512:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     514:	687b      	ldr	r3, [r7, #4]
     516:	0018      	movs	r0, r3
     518:	4b07      	ldr	r3, [pc, #28]	; (538 <usart_enable+0x44>)
     51a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     51c:	68fb      	ldr	r3, [r7, #12]
     51e:	681b      	ldr	r3, [r3, #0]
     520:	2202      	movs	r2, #2
     522:	431a      	orrs	r2, r3
     524:	68fb      	ldr	r3, [r7, #12]
     526:	601a      	str	r2, [r3, #0]
}
     528:	46c0      	nop			; (mov r8, r8)
     52a:	46bd      	mov	sp, r7
     52c:	b004      	add	sp, #16
     52e:	bd80      	pop	{r7, pc}
     530:	00010769 	.word	0x00010769
     534:	00000211 	.word	0x00000211
     538:	00000411 	.word	0x00000411

0000053c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     53c:	b580      	push	{r7, lr}
     53e:	b084      	sub	sp, #16
     540:	af00      	add	r7, sp, #0
     542:	60f8      	str	r0, [r7, #12]
     544:	60b9      	str	r1, [r7, #8]
     546:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
     548:	687a      	ldr	r2, [r7, #4]
     54a:	68b9      	ldr	r1, [r7, #8]
     54c:	68fb      	ldr	r3, [r7, #12]
     54e:	0018      	movs	r0, r3
     550:	4b05      	ldr	r3, [pc, #20]	; (568 <usart_serial_init+0x2c>)
     552:	4798      	blx	r3
     554:	1e03      	subs	r3, r0, #0
     556:	d101      	bne.n	55c <usart_serial_init+0x20>
		return true;
     558:	2301      	movs	r3, #1
     55a:	e000      	b.n	55e <usart_serial_init+0x22>
	}
	else {
		return false;
     55c:	2300      	movs	r3, #0
	}
}
     55e:	0018      	movs	r0, r3
     560:	46bd      	mov	sp, r7
     562:	b004      	add	sp, #16
     564:	bd80      	pop	{r7, pc}
     566:	46c0      	nop			; (mov r8, r8)
     568:	0000ffa1 	.word	0x0000ffa1

0000056c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     56c:	b580      	push	{r7, lr}
     56e:	b082      	sub	sp, #8
     570:	af00      	add	r7, sp, #0
     572:	6078      	str	r0, [r7, #4]
     574:	000a      	movs	r2, r1
     576:	1cfb      	adds	r3, r7, #3
     578:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	1cfb      	adds	r3, r7, #3
     57e:	781b      	ldrb	r3, [r3, #0]
     580:	b29a      	uxth	r2, r3
     582:	687b      	ldr	r3, [r7, #4]
     584:	0011      	movs	r1, r2
     586:	0018      	movs	r0, r3
     588:	4b04      	ldr	r3, [pc, #16]	; (59c <usart_serial_putchar+0x30>)
     58a:	4798      	blx	r3
     58c:	1e03      	subs	r3, r0, #0
     58e:	d1f5      	bne.n	57c <usart_serial_putchar+0x10>

	return STATUS_OK;
     590:	2300      	movs	r3, #0
}
     592:	0018      	movs	r0, r3
     594:	46bd      	mov	sp, r7
     596:	b002      	add	sp, #8
     598:	bd80      	pop	{r7, pc}
     59a:	46c0      	nop			; (mov r8, r8)
     59c:	00010215 	.word	0x00010215

000005a0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     5a0:	b580      	push	{r7, lr}
     5a2:	b084      	sub	sp, #16
     5a4:	af00      	add	r7, sp, #0
     5a6:	6078      	str	r0, [r7, #4]
     5a8:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     5aa:	230e      	movs	r3, #14
     5ac:	18fb      	adds	r3, r7, r3
     5ae:	2200      	movs	r2, #0
     5b0:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	230e      	movs	r3, #14
     5b6:	18fa      	adds	r2, r7, r3
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	0011      	movs	r1, r2
     5bc:	0018      	movs	r0, r3
     5be:	4b07      	ldr	r3, [pc, #28]	; (5dc <usart_serial_getchar+0x3c>)
     5c0:	4798      	blx	r3
     5c2:	1e03      	subs	r3, r0, #0
     5c4:	d1f6      	bne.n	5b4 <usart_serial_getchar+0x14>

	*c = temp;
     5c6:	230e      	movs	r3, #14
     5c8:	18fb      	adds	r3, r7, r3
     5ca:	881b      	ldrh	r3, [r3, #0]
     5cc:	b2da      	uxtb	r2, r3
     5ce:	683b      	ldr	r3, [r7, #0]
     5d0:	701a      	strb	r2, [r3, #0]
}
     5d2:	46c0      	nop			; (mov r8, r8)
     5d4:	46bd      	mov	sp, r7
     5d6:	b004      	add	sp, #16
     5d8:	bd80      	pop	{r7, pc}
     5da:	46c0      	nop			; (mov r8, r8)
     5dc:	00010279 	.word	0x00010279

000005e0 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     5e0:	b580      	push	{r7, lr}
     5e2:	b084      	sub	sp, #16
     5e4:	af00      	add	r7, sp, #0
     5e6:	60f8      	str	r0, [r7, #12]
     5e8:	60b9      	str	r1, [r7, #8]
     5ea:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     5ec:	4b10      	ldr	r3, [pc, #64]	; (630 <stdio_serial_init+0x50>)
     5ee:	68fa      	ldr	r2, [r7, #12]
     5f0:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     5f2:	4b10      	ldr	r3, [pc, #64]	; (634 <stdio_serial_init+0x54>)
     5f4:	4a10      	ldr	r2, [pc, #64]	; (638 <stdio_serial_init+0x58>)
     5f6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     5f8:	4b10      	ldr	r3, [pc, #64]	; (63c <stdio_serial_init+0x5c>)
     5fa:	4a11      	ldr	r2, [pc, #68]	; (640 <stdio_serial_init+0x60>)
     5fc:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
     5fe:	687a      	ldr	r2, [r7, #4]
     600:	68b9      	ldr	r1, [r7, #8]
     602:	68fb      	ldr	r3, [r7, #12]
     604:	0018      	movs	r0, r3
     606:	4b0f      	ldr	r3, [pc, #60]	; (644 <stdio_serial_init+0x64>)
     608:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     60a:	4b0f      	ldr	r3, [pc, #60]	; (648 <stdio_serial_init+0x68>)
     60c:	681b      	ldr	r3, [r3, #0]
     60e:	689b      	ldr	r3, [r3, #8]
     610:	2100      	movs	r1, #0
     612:	0018      	movs	r0, r3
     614:	4b0d      	ldr	r3, [pc, #52]	; (64c <stdio_serial_init+0x6c>)
     616:	4798      	blx	r3
	setbuf(stdin, NULL);
     618:	4b0b      	ldr	r3, [pc, #44]	; (648 <stdio_serial_init+0x68>)
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	685b      	ldr	r3, [r3, #4]
     61e:	2100      	movs	r1, #0
     620:	0018      	movs	r0, r3
     622:	4b0a      	ldr	r3, [pc, #40]	; (64c <stdio_serial_init+0x6c>)
     624:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     626:	46c0      	nop			; (mov r8, r8)
     628:	46bd      	mov	sp, r7
     62a:	b004      	add	sp, #16
     62c:	bd80      	pop	{r7, pc}
     62e:	46c0      	nop			; (mov r8, r8)
     630:	20000900 	.word	0x20000900
     634:	200008fc 	.word	0x200008fc
     638:	0000056d 	.word	0x0000056d
     63c:	200008f8 	.word	0x200008f8
     640:	000005a1 	.word	0x000005a1
     644:	0000053d 	.word	0x0000053d
     648:	20000018 	.word	0x20000018
     64c:	00013fa1 	.word	0x00013fa1

00000650 <configure_usart>:
#endif

#ifdef STDIO_SERIAL_H_INCLUDED
extern struct usart_module usart_instance;
void configure_usart()
{
     650:	b580      	push	{r7, lr}
     652:	b090      	sub	sp, #64	; 0x40
     654:	af00      	add	r7, sp, #0
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);
     656:	003b      	movs	r3, r7
     658:	0018      	movs	r0, r3
     65a:	4b13      	ldr	r3, [pc, #76]	; (6a8 <configure_usart+0x58>)
     65c:	4798      	blx	r3
	config_usart.baudrate = 115200;
     65e:	003b      	movs	r3, r7
     660:	22e1      	movs	r2, #225	; 0xe1
     662:	0252      	lsls	r2, r2, #9
     664:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
     666:	003b      	movs	r3, r7
     668:	22c4      	movs	r2, #196	; 0xc4
     66a:	0392      	lsls	r2, r2, #14
     66c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
     66e:	003b      	movs	r3, r7
     670:	2201      	movs	r2, #1
     672:	4252      	negs	r2, r2
     674:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
     676:	003b      	movs	r3, r7
     678:	2201      	movs	r2, #1
     67a:	4252      	negs	r2, r2
     67c:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
     67e:	003b      	movs	r3, r7
     680:	4a0a      	ldr	r2, [pc, #40]	; (6ac <configure_usart+0x5c>)
     682:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
     684:	003b      	movs	r3, r7
     686:	4a0a      	ldr	r2, [pc, #40]	; (6b0 <configure_usart+0x60>)
     688:	63da      	str	r2, [r3, #60]	; 0x3c

	stdio_serial_init(&usart_instance, SERCOM4, &config_usart);
     68a:	003a      	movs	r2, r7
     68c:	4909      	ldr	r1, [pc, #36]	; (6b4 <configure_usart+0x64>)
     68e:	4b0a      	ldr	r3, [pc, #40]	; (6b8 <configure_usart+0x68>)
     690:	0018      	movs	r0, r3
     692:	4b0a      	ldr	r3, [pc, #40]	; (6bc <configure_usart+0x6c>)
     694:	4798      	blx	r3

	usart_enable(&usart_instance);
     696:	4b08      	ldr	r3, [pc, #32]	; (6b8 <configure_usart+0x68>)
     698:	0018      	movs	r0, r3
     69a:	4b09      	ldr	r3, [pc, #36]	; (6c0 <configure_usart+0x70>)
     69c:	4798      	blx	r3
}
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	46bd      	mov	sp, r7
     6a2:	b010      	add	sp, #64	; 0x40
     6a4:	bd80      	pop	{r7, pc}
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	00000435 	.word	0x00000435
     6ac:	002a0003 	.word	0x002a0003
     6b0:	002b0003 	.word	0x002b0003
     6b4:	42001800 	.word	0x42001800
     6b8:	200007ac 	.word	0x200007ac
     6bc:	000005e1 	.word	0x000005e1
     6c0:	000004f5 	.word	0x000004f5

000006c4 <configure_flash>:
#endif
#ifdef AT25DFX_H
void configure_flash()
{
     6c4:	b580      	push	{r7, lr}
     6c6:	b090      	sub	sp, #64	; 0x40
     6c8:	af00      	add	r7, sp, #0
	struct at25dfx_chip_config at_chip_config;
	struct spi_config at25dfx_spi_config;

	at25dfx_spi_get_config_defaults(&at25dfx_spi_config);
     6ca:	1d3b      	adds	r3, r7, #4
     6cc:	0018      	movs	r0, r3
     6ce:	4b19      	ldr	r3, [pc, #100]	; (734 <configure_flash+0x70>)
     6d0:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
     6d2:	1d3b      	adds	r3, r7, #4
     6d4:	4a18      	ldr	r2, [pc, #96]	; (738 <configure_flash+0x74>)
     6d6:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
     6d8:	1d3b      	adds	r3, r7, #4
     6da:	2280      	movs	r2, #128	; 0x80
     6dc:	0252      	lsls	r2, r2, #9
     6de:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
     6e0:	1d3b      	adds	r3, r7, #4
     6e2:	4a16      	ldr	r2, [pc, #88]	; (73c <configure_flash+0x78>)
     6e4:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
     6e6:	1d3b      	adds	r3, r7, #4
     6e8:	2201      	movs	r2, #1
     6ea:	4252      	negs	r2, r2
     6ec:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
     6ee:	1d3b      	adds	r3, r7, #4
     6f0:	4a13      	ldr	r2, [pc, #76]	; (740 <configure_flash+0x7c>)
     6f2:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
     6f4:	1d3b      	adds	r3, r7, #4
     6f6:	4a13      	ldr	r2, [pc, #76]	; (744 <configure_flash+0x80>)
     6f8:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
     6fa:	1d3a      	adds	r2, r7, #4
     6fc:	4912      	ldr	r1, [pc, #72]	; (748 <configure_flash+0x84>)
     6fe:	4b13      	ldr	r3, [pc, #76]	; (74c <configure_flash+0x88>)
     700:	0018      	movs	r0, r3
     702:	4b13      	ldr	r3, [pc, #76]	; (750 <configure_flash+0x8c>)
     704:	4798      	blx	r3
	spi_enable(&at25dfx_spi);
     706:	4b11      	ldr	r3, [pc, #68]	; (74c <configure_flash+0x88>)
     708:	0018      	movs	r0, r3
     70a:	4b12      	ldr	r3, [pc, #72]	; (754 <configure_flash+0x90>)
     70c:	4798      	blx	r3

	at_chip_config.type = AT25DFX_MEM_TYPE;
     70e:	233c      	movs	r3, #60	; 0x3c
     710:	18fb      	adds	r3, r7, r3
     712:	2204      	movs	r2, #4
     714:	701a      	strb	r2, [r3, #0]
	at_chip_config.cs_pin = AT25DFX_CS;
     716:	233c      	movs	r3, #60	; 0x3c
     718:	18fb      	adds	r3, r7, r3
     71a:	2207      	movs	r2, #7
     71c:	705a      	strb	r2, [r3, #1]
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at_chip_config);
     71e:	233c      	movs	r3, #60	; 0x3c
     720:	18fa      	adds	r2, r7, r3
     722:	490a      	ldr	r1, [pc, #40]	; (74c <configure_flash+0x88>)
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <configure_flash+0x94>)
     726:	0018      	movs	r0, r3
     728:	4b0c      	ldr	r3, [pc, #48]	; (75c <configure_flash+0x98>)
     72a:	4798      	blx	r3
}
     72c:	46c0      	nop			; (mov r8, r8)
     72e:	46bd      	mov	sp, r7
     730:	b010      	add	sp, #64	; 0x40
     732:	bd80      	pop	{r7, pc}
     734:	00000331 	.word	0x00000331
     738:	000f4240 	.word	0x000f4240
     73c:	00100002 	.word	0x00100002
     740:	00120002 	.word	0x00120002
     744:	00130002 	.word	0x00130002
     748:	42000c00 	.word	0x42000c00
     74c:	20000468 	.word	0x20000468
     750:	0000a071 	.word	0x0000a071
     754:	000002e1 	.word	0x000002e1
     758:	2000031c 	.word	0x2000031c
     75c:	0000034d 	.word	0x0000034d

00000760 <configure_nvm>:
#endif

#ifdef NVM_H_INCLUDED
void configure_nvm()
{
     760:	b580      	push	{r7, lr}
     762:	b082      	sub	sp, #8
     764:	af00      	add	r7, sp, #0
	struct nvm_config config_nvm;

	nvm_get_config_defaults(&config_nvm);
     766:	003b      	movs	r3, r7
     768:	0018      	movs	r0, r3
     76a:	4b06      	ldr	r3, [pc, #24]	; (784 <configure_nvm+0x24>)
     76c:	4798      	blx	r3
	config_nvm.manual_page_write = false;
     76e:	003b      	movs	r3, r7
     770:	2200      	movs	r2, #0
     772:	705a      	strb	r2, [r3, #1]

	nvm_set_config(&config_nvm);
     774:	003b      	movs	r3, r7
     776:	0018      	movs	r0, r3
     778:	4b03      	ldr	r3, [pc, #12]	; (788 <configure_nvm+0x28>)
     77a:	4798      	blx	r3
}
     77c:	46c0      	nop			; (mov r8, r8)
     77e:	46bd      	mov	sp, r7
     780:	b002      	add	sp, #8
     782:	bd80      	pop	{r7, pc}
     784:	000003b5 	.word	0x000003b5
     788:	000095e9 	.word	0x000095e9

0000078c <system_interrupt_enable>:
{
     78c:	b580      	push	{r7, lr}
     78e:	b082      	sub	sp, #8
     790:	af00      	add	r7, sp, #0
     792:	0002      	movs	r2, r0
     794:	1dfb      	adds	r3, r7, #7
     796:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     798:	4b06      	ldr	r3, [pc, #24]	; (7b4 <system_interrupt_enable+0x28>)
     79a:	1dfa      	adds	r2, r7, #7
     79c:	7812      	ldrb	r2, [r2, #0]
     79e:	0011      	movs	r1, r2
     7a0:	221f      	movs	r2, #31
     7a2:	400a      	ands	r2, r1
     7a4:	2101      	movs	r1, #1
     7a6:	4091      	lsls	r1, r2
     7a8:	000a      	movs	r2, r1
     7aa:	601a      	str	r2, [r3, #0]
}
     7ac:	46c0      	nop			; (mov r8, r8)
     7ae:	46bd      	mov	sp, r7
     7b0:	b002      	add	sp, #8
     7b2:	bd80      	pop	{r7, pc}
     7b4:	e000e100 	.word	0xe000e100

000007b8 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     7b8:	b580      	push	{r7, lr}
     7ba:	b084      	sub	sp, #16
     7bc:	af00      	add	r7, sp, #0
     7be:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     7c0:	687b      	ldr	r3, [r7, #4]
     7c2:	681b      	ldr	r3, [r3, #0]
     7c4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     7c6:	68fb      	ldr	r3, [r7, #12]
     7c8:	69db      	ldr	r3, [r3, #28]
     7ca:	2207      	movs	r2, #7
     7cc:	4013      	ands	r3, r2
     7ce:	1e5a      	subs	r2, r3, #1
     7d0:	4193      	sbcs	r3, r2
     7d2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     7d4:	0018      	movs	r0, r3
     7d6:	46bd      	mov	sp, r7
     7d8:	b004      	add	sp, #16
     7da:	bd80      	pop	{r7, pc}

000007dc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     7dc:	b580      	push	{r7, lr}
     7de:	b082      	sub	sp, #8
     7e0:	af00      	add	r7, sp, #0
     7e2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     7e4:	46c0      	nop			; (mov r8, r8)
     7e6:	687b      	ldr	r3, [r7, #4]
     7e8:	0018      	movs	r0, r3
     7ea:	4b04      	ldr	r3, [pc, #16]	; (7fc <_i2c_master_wait_for_sync+0x20>)
     7ec:	4798      	blx	r3
     7ee:	1e03      	subs	r3, r0, #0
     7f0:	d1f9      	bne.n	7e6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	46bd      	mov	sp, r7
     7f6:	b002      	add	sp, #8
     7f8:	bd80      	pop	{r7, pc}
     7fa:	46c0      	nop			; (mov r8, r8)
     7fc:	000007b9 	.word	0x000007b9

00000800 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
     800:	b580      	push	{r7, lr}
     802:	b082      	sub	sp, #8
     804:	af00      	add	r7, sp, #0
     806:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     808:	687b      	ldr	r3, [r7, #4]
     80a:	2264      	movs	r2, #100	; 0x64
     80c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     80e:	687b      	ldr	r3, [r7, #4]
     810:	4a1b      	ldr	r2, [pc, #108]	; (880 <i2c_master_get_config_defaults+0x80>)
     812:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     814:	687b      	ldr	r3, [r7, #4]
     816:	2200      	movs	r2, #0
     818:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     81a:	687b      	ldr	r3, [r7, #4]
     81c:	2200      	movs	r2, #0
     81e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     820:	687b      	ldr	r3, [r7, #4]
     822:	2200      	movs	r2, #0
     824:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     826:	687b      	ldr	r3, [r7, #4]
     828:	2280      	movs	r2, #128	; 0x80
     82a:	0392      	lsls	r2, r2, #14
     82c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
     82e:	687b      	ldr	r3, [r7, #4]
     830:	2201      	movs	r2, #1
     832:	4252      	negs	r2, r2
     834:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
     836:	687b      	ldr	r3, [r7, #4]
     838:	2201      	movs	r2, #1
     83a:	4252      	negs	r2, r2
     83c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     83e:	687b      	ldr	r3, [r7, #4]
     840:	2200      	movs	r2, #0
     842:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     844:	687b      	ldr	r3, [r7, #4]
     846:	2200      	movs	r2, #0
     848:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
     84a:	687b      	ldr	r3, [r7, #4]
     84c:	2224      	movs	r2, #36	; 0x24
     84e:	2100      	movs	r1, #0
     850:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     852:	687b      	ldr	r3, [r7, #4]
     854:	2200      	movs	r2, #0
     856:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     858:	687b      	ldr	r3, [r7, #4]
     85a:	222c      	movs	r2, #44	; 0x2c
     85c:	2100      	movs	r1, #0
     85e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     860:	687b      	ldr	r3, [r7, #4]
     862:	222d      	movs	r2, #45	; 0x2d
     864:	2100      	movs	r1, #0
     866:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
     868:	687b      	ldr	r3, [r7, #4]
     86a:	222e      	movs	r2, #46	; 0x2e
     86c:	2100      	movs	r1, #0
     86e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     870:	687b      	ldr	r3, [r7, #4]
     872:	22d7      	movs	r2, #215	; 0xd7
     874:	861a      	strh	r2, [r3, #48]	; 0x30
}
     876:	46c0      	nop			; (mov r8, r8)
     878:	46bd      	mov	sp, r7
     87a:	b002      	add	sp, #8
     87c:	bd80      	pop	{r7, pc}
     87e:	46c0      	nop			; (mov r8, r8)
     880:	00000d48 	.word	0x00000d48

00000884 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
     884:	b580      	push	{r7, lr}
     886:	b084      	sub	sp, #16
     888:	af00      	add	r7, sp, #0
     88a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     88c:	687b      	ldr	r3, [r7, #4]
     88e:	681b      	ldr	r3, [r3, #0]
     890:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
     892:	2300      	movs	r3, #0
     894:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
     896:	687b      	ldr	r3, [r7, #4]
     898:	0018      	movs	r0, r3
     89a:	4b14      	ldr	r3, [pc, #80]	; (8ec <i2c_master_enable+0x68>)
     89c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     89e:	68bb      	ldr	r3, [r7, #8]
     8a0:	681b      	ldr	r3, [r3, #0]
     8a2:	2202      	movs	r2, #2
     8a4:	431a      	orrs	r2, r3
     8a6:	68bb      	ldr	r3, [r7, #8]
     8a8:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	681b      	ldr	r3, [r3, #0]
     8ae:	0018      	movs	r0, r3
     8b0:	4b0f      	ldr	r3, [pc, #60]	; (8f0 <i2c_master_enable+0x6c>)
     8b2:	4798      	blx	r3
     8b4:	0003      	movs	r3, r0
     8b6:	0018      	movs	r0, r3
     8b8:	4b0e      	ldr	r3, [pc, #56]	; (8f4 <i2c_master_enable+0x70>)
     8ba:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     8bc:	e00c      	b.n	8d8 <i2c_master_enable+0x54>
		timeout_counter++;
     8be:	68fb      	ldr	r3, [r7, #12]
     8c0:	3301      	adds	r3, #1
     8c2:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	88db      	ldrh	r3, [r3, #6]
     8c8:	001a      	movs	r2, r3
     8ca:	68fb      	ldr	r3, [r7, #12]
     8cc:	429a      	cmp	r2, r3
     8ce:	d803      	bhi.n	8d8 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     8d0:	68bb      	ldr	r3, [r7, #8]
     8d2:	2210      	movs	r2, #16
     8d4:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
     8d6:	e006      	b.n	8e6 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     8d8:	68bb      	ldr	r3, [r7, #8]
     8da:	8b5b      	ldrh	r3, [r3, #26]
     8dc:	b29b      	uxth	r3, r3
     8de:	001a      	movs	r2, r3
     8e0:	2310      	movs	r3, #16
     8e2:	4013      	ands	r3, r2
     8e4:	d0eb      	beq.n	8be <i2c_master_enable+0x3a>
		}
	}
}
     8e6:	46bd      	mov	sp, r7
     8e8:	b004      	add	sp, #16
     8ea:	bd80      	pop	{r7, pc}
     8ec:	000007dd 	.word	0x000007dd
     8f0:	00010769 	.word	0x00010769
     8f4:	0000078d 	.word	0x0000078d

000008f8 <configure_i2c_hdc>:
 **/

#include "hdc_1080.h"

void configure_i2c_hdc()
{
     8f8:	b590      	push	{r4, r7, lr}
     8fa:	b08f      	sub	sp, #60	; 0x3c
     8fc:	af00      	add	r7, sp, #0
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
     8fe:	003b      	movs	r3, r7
     900:	0018      	movs	r0, r3
     902:	4b15      	ldr	r3, [pc, #84]	; (958 <configure_i2c_hdc+0x60>)
     904:	4798      	blx	r3
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
     906:	003b      	movs	r3, r7
     908:	2201      	movs	r2, #1
     90a:	4252      	negs	r2, r2
     90c:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
     90e:	003b      	movs	r3, r7
     910:	4a12      	ldr	r2, [pc, #72]	; (95c <configure_i2c_hdc+0x64>)
     912:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA23C_SERCOM3_PAD1;
     914:	003b      	movs	r3, r7
     916:	4a12      	ldr	r2, [pc, #72]	; (960 <configure_i2c_hdc+0x68>)
     918:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
     91a:	003b      	movs	r3, r7
     91c:	2200      	movs	r2, #0
     91e:	731a      	strb	r2, [r3, #12]
	enum status_code init_status = i2c_master_init(&i2c_hdc, SERCOM3, &config_i2c_master);
     920:	2337      	movs	r3, #55	; 0x37
     922:	18fc      	adds	r4, r7, r3
     924:	003a      	movs	r2, r7
     926:	490f      	ldr	r1, [pc, #60]	; (964 <configure_i2c_hdc+0x6c>)
     928:	4b0f      	ldr	r3, [pc, #60]	; (968 <configure_i2c_hdc+0x70>)
     92a:	0018      	movs	r0, r3
     92c:	4b0f      	ldr	r3, [pc, #60]	; (96c <configure_i2c_hdc+0x74>)
     92e:	4798      	blx	r3
     930:	0003      	movs	r3, r0
     932:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != init_status) {
     934:	2337      	movs	r3, #55	; 0x37
     936:	18fb      	adds	r3, r7, r3
     938:	781b      	ldrb	r3, [r3, #0]
     93a:	2b00      	cmp	r3, #0
     93c:	d004      	beq.n	948 <configure_i2c_hdc+0x50>
		printf("failed to initialize HDC1080 driver.\r\n");
     93e:	4b0c      	ldr	r3, [pc, #48]	; (970 <configure_i2c_hdc+0x78>)
     940:	0018      	movs	r0, r3
     942:	4b0c      	ldr	r3, [pc, #48]	; (974 <configure_i2c_hdc+0x7c>)
     944:	4798      	blx	r3
     946:	e003      	b.n	950 <configure_i2c_hdc+0x58>
		return;
	}
	i2c_master_enable(&i2c_hdc);
     948:	4b07      	ldr	r3, [pc, #28]	; (968 <configure_i2c_hdc+0x70>)
     94a:	0018      	movs	r0, r3
     94c:	4b0a      	ldr	r3, [pc, #40]	; (978 <configure_i2c_hdc+0x80>)
     94e:	4798      	blx	r3
}
     950:	46bd      	mov	sp, r7
     952:	b00f      	add	sp, #60	; 0x3c
     954:	bd90      	pop	{r4, r7, pc}
     956:	46c0      	nop			; (mov r8, r8)
     958:	00000801 	.word	0x00000801
     95c:	00160002 	.word	0x00160002
     960:	00170002 	.word	0x00170002
     964:	42001400 	.word	0x42001400
     968:	200002c8 	.word	0x200002c8
     96c:	0000e965 	.word	0x0000e965
     970:	000188dc 	.word	0x000188dc
     974:	00013f69 	.word	0x00013f69
     978:	00000885 	.word	0x00000885

0000097c <set_resolution>:
//NOTE: bit[10] = 1 for 11 bit temp
//NOTE: bit[9:8] = 00 for 14 bit humidity
//NOTE: bit[9:8] = 01 for 11 bit humidity
//NOTE: bit[9:8] = 10 for 8 bit humidity
void set_resolution(hdc_resolution temp_resolution, hdc_resolution humidity_resolution)
{
     97c:	b590      	push	{r4, r7, lr}
     97e:	b089      	sub	sp, #36	; 0x24
     980:	af00      	add	r7, sp, #0
     982:	0002      	movs	r2, r0
     984:	1dfb      	adds	r3, r7, #7
     986:	701a      	strb	r2, [r3, #0]
     988:	1dbb      	adds	r3, r7, #6
     98a:	1c0a      	adds	r2, r1, #0
     98c:	701a      	strb	r2, [r3, #0]
	int8_t data_packet[3];

	data_packet[0] = HDC_SET_RES;
     98e:	2318      	movs	r3, #24
     990:	18fb      	adds	r3, r7, r3
     992:	2202      	movs	r2, #2
     994:	701a      	strb	r2, [r3, #0]
	uint8_t write_byte = 0;
     996:	231f      	movs	r3, #31
     998:	18fb      	adds	r3, r7, r3
     99a:	2200      	movs	r2, #0
     99c:	701a      	strb	r2, [r3, #0]
	switch (temp_resolution) {
     99e:	1dfb      	adds	r3, r7, #7
     9a0:	781b      	ldrb	r3, [r3, #0]
     9a2:	2b01      	cmp	r3, #1
     9a4:	d007      	beq.n	9b6 <set_resolution+0x3a>
     9a6:	2b02      	cmp	r3, #2
     9a8:	d000      	beq.n	9ac <set_resolution+0x30>
		write_byte = (1 << 2);
		break;
	}
	default: {
		//TODO: error
		return;
     9aa:	e07e      	b.n	aaa <set_resolution+0x12e>
		write_byte = 0;
     9ac:	231f      	movs	r3, #31
     9ae:	18fb      	adds	r3, r7, r3
     9b0:	2200      	movs	r2, #0
     9b2:	701a      	strb	r2, [r3, #0]
		break;
     9b4:	e004      	b.n	9c0 <set_resolution+0x44>
		write_byte = (1 << 2);
     9b6:	231f      	movs	r3, #31
     9b8:	18fb      	adds	r3, r7, r3
     9ba:	2204      	movs	r2, #4
     9bc:	701a      	strb	r2, [r3, #0]
		break;
     9be:	46c0      	nop			; (mov r8, r8)
	}
	}

	switch (humidity_resolution) {
     9c0:	1dbb      	adds	r3, r7, #6
     9c2:	781b      	ldrb	r3, [r3, #0]
     9c4:	2b01      	cmp	r3, #1
     9c6:	d00b      	beq.n	9e0 <set_resolution+0x64>
     9c8:	2b02      	cmp	r3, #2
     9ca:	d002      	beq.n	9d2 <set_resolution+0x56>
     9cc:	2b00      	cmp	r3, #0
     9ce:	d010      	beq.n	9f2 <set_resolution+0x76>
		write_byte |= 2;
		break;
	}
	default: {
		//TODO: error
		return;
     9d0:	e06b      	b.n	aaa <set_resolution+0x12e>
		write_byte |= 0;
     9d2:	231f      	movs	r3, #31
     9d4:	18fb      	adds	r3, r7, r3
     9d6:	221f      	movs	r2, #31
     9d8:	18ba      	adds	r2, r7, r2
     9da:	7812      	ldrb	r2, [r2, #0]
     9dc:	701a      	strb	r2, [r3, #0]
		break;
     9de:	e011      	b.n	a04 <set_resolution+0x88>
		write_byte |= 1;
     9e0:	231f      	movs	r3, #31
     9e2:	18fb      	adds	r3, r7, r3
     9e4:	221f      	movs	r2, #31
     9e6:	18ba      	adds	r2, r7, r2
     9e8:	7812      	ldrb	r2, [r2, #0]
     9ea:	2101      	movs	r1, #1
     9ec:	430a      	orrs	r2, r1
     9ee:	701a      	strb	r2, [r3, #0]
		break;
     9f0:	e008      	b.n	a04 <set_resolution+0x88>
		write_byte |= 2;
     9f2:	231f      	movs	r3, #31
     9f4:	18fb      	adds	r3, r7, r3
     9f6:	221f      	movs	r2, #31
     9f8:	18ba      	adds	r2, r7, r2
     9fa:	7812      	ldrb	r2, [r2, #0]
     9fc:	2102      	movs	r1, #2
     9fe:	430a      	orrs	r2, r1
     a00:	701a      	strb	r2, [r3, #0]
		break;
     a02:	46c0      	nop			; (mov r8, r8)
	}
	}
	write_byte |= (1 << 4);
     a04:	231f      	movs	r3, #31
     a06:	18fb      	adds	r3, r7, r3
     a08:	221f      	movs	r2, #31
     a0a:	18ba      	adds	r2, r7, r2
     a0c:	7812      	ldrb	r2, [r2, #0]
     a0e:	2110      	movs	r1, #16
     a10:	430a      	orrs	r2, r1
     a12:	701a      	strb	r2, [r3, #0]
	data_packet[1] = write_byte;
     a14:	231f      	movs	r3, #31
     a16:	18fb      	adds	r3, r7, r3
     a18:	2200      	movs	r2, #0
     a1a:	569a      	ldrsb	r2, [r3, r2]
     a1c:	2318      	movs	r3, #24
     a1e:	18fb      	adds	r3, r7, r3
     a20:	705a      	strb	r2, [r3, #1]
	data_packet[2] = 0x00;
     a22:	2318      	movs	r3, #24
     a24:	18fb      	adds	r3, r7, r3
     a26:	2200      	movs	r2, #0
     a28:	709a      	strb	r2, [r3, #2]
	printf("data packet: 0x%02x 0x%02x 0x%02x\r\n", data_packet[0], data_packet[1], data_packet[2]);
     a2a:	2318      	movs	r3, #24
     a2c:	18fb      	adds	r3, r7, r3
     a2e:	781b      	ldrb	r3, [r3, #0]
     a30:	b25b      	sxtb	r3, r3
     a32:	0019      	movs	r1, r3
     a34:	2318      	movs	r3, #24
     a36:	18fb      	adds	r3, r7, r3
     a38:	785b      	ldrb	r3, [r3, #1]
     a3a:	b25b      	sxtb	r3, r3
     a3c:	001a      	movs	r2, r3
     a3e:	2318      	movs	r3, #24
     a40:	18fb      	adds	r3, r7, r3
     a42:	789b      	ldrb	r3, [r3, #2]
     a44:	b25b      	sxtb	r3, r3
     a46:	481a      	ldr	r0, [pc, #104]	; (ab0 <set_resolution+0x134>)
     a48:	4c1a      	ldr	r4, [pc, #104]	; (ab4 <set_resolution+0x138>)
     a4a:	47a0      	blx	r4
	struct i2c_master_packet packet = {
     a4c:	230c      	movs	r3, #12
     a4e:	18fb      	adds	r3, r7, r3
     a50:	2240      	movs	r2, #64	; 0x40
     a52:	801a      	strh	r2, [r3, #0]
     a54:	230c      	movs	r3, #12
     a56:	18fb      	adds	r3, r7, r3
     a58:	2203      	movs	r2, #3
     a5a:	805a      	strh	r2, [r3, #2]
     a5c:	230c      	movs	r3, #12
     a5e:	18fb      	adds	r3, r7, r3
     a60:	2218      	movs	r2, #24
     a62:	18ba      	adds	r2, r7, r2
     a64:	605a      	str	r2, [r3, #4]
     a66:	230c      	movs	r3, #12
     a68:	18fb      	adds	r3, r7, r3
     a6a:	2200      	movs	r2, #0
     a6c:	721a      	strb	r2, [r3, #8]
     a6e:	230c      	movs	r3, #12
     a70:	18fb      	adds	r3, r7, r3
     a72:	2200      	movs	r2, #0
     a74:	725a      	strb	r2, [r3, #9]
     a76:	230c      	movs	r3, #12
     a78:	18fb      	adds	r3, r7, r3
     a7a:	2200      	movs	r2, #0
     a7c:	729a      	strb	r2, [r3, #10]
		.data			= data_packet,
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};
	enum status_code i2c_status = i2c_master_write_packet_wait(&i2c_hdc, &packet);
     a7e:	231e      	movs	r3, #30
     a80:	18fc      	adds	r4, r7, r3
     a82:	230c      	movs	r3, #12
     a84:	18fa      	adds	r2, r7, r3
     a86:	4b0c      	ldr	r3, [pc, #48]	; (ab8 <set_resolution+0x13c>)
     a88:	0011      	movs	r1, r2
     a8a:	0018      	movs	r0, r3
     a8c:	4b0b      	ldr	r3, [pc, #44]	; (abc <set_resolution+0x140>)
     a8e:	4798      	blx	r3
     a90:	0003      	movs	r3, r0
     a92:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != i2c_status)
     a94:	231e      	movs	r3, #30
     a96:	18fb      	adds	r3, r7, r3
     a98:	781b      	ldrb	r3, [r3, #0]
     a9a:	2b00      	cmp	r3, #0
     a9c:	d004      	beq.n	aa8 <set_resolution+0x12c>
		printf("error trying to set resolution!\r\n");
     a9e:	4b08      	ldr	r3, [pc, #32]	; (ac0 <set_resolution+0x144>)
     aa0:	0018      	movs	r0, r3
     aa2:	4b08      	ldr	r3, [pc, #32]	; (ac4 <set_resolution+0x148>)
     aa4:	4798      	blx	r3

	return;
     aa6:	46c0      	nop			; (mov r8, r8)
     aa8:	46c0      	nop			; (mov r8, r8)
}
     aaa:	46bd      	mov	sp, r7
     aac:	b009      	add	sp, #36	; 0x24
     aae:	bd90      	pop	{r4, r7, pc}
     ab0:	00018904 	.word	0x00018904
     ab4:	00013e4d 	.word	0x00013e4d
     ab8:	200002c8 	.word	0x200002c8
     abc:	0000efd5 	.word	0x0000efd5
     ac0:	00018928 	.word	0x00018928
     ac4:	00013f69 	.word	0x00013f69

00000ac8 <request_data>:

uint16_t request_data(hdc_request command)
{
     ac8:	b590      	push	{r4, r7, lr}
     aca:	b089      	sub	sp, #36	; 0x24
     acc:	af00      	add	r7, sp, #0
     ace:	0002      	movs	r2, r0
     ad0:	1dfb      	adds	r3, r7, #7
     ad2:	701a      	strb	r2, [r3, #0]
	uint8_t received_data[2];
	uint8_t write_buffer = command;
     ad4:	231b      	movs	r3, #27
     ad6:	18fb      	adds	r3, r7, r3
     ad8:	1dfa      	adds	r2, r7, #7
     ada:	7812      	ldrb	r2, [r2, #0]
     adc:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
     ade:	230c      	movs	r3, #12
     ae0:	18fb      	adds	r3, r7, r3
     ae2:	2240      	movs	r2, #64	; 0x40
     ae4:	801a      	strh	r2, [r3, #0]
     ae6:	230c      	movs	r3, #12
     ae8:	18fb      	adds	r3, r7, r3
     aea:	2201      	movs	r2, #1
     aec:	805a      	strh	r2, [r3, #2]
     aee:	230c      	movs	r3, #12
     af0:	18fb      	adds	r3, r7, r3
     af2:	221b      	movs	r2, #27
     af4:	18ba      	adds	r2, r7, r2
     af6:	605a      	str	r2, [r3, #4]
     af8:	230c      	movs	r3, #12
     afa:	18fb      	adds	r3, r7, r3
     afc:	2200      	movs	r2, #0
     afe:	721a      	strb	r2, [r3, #8]
     b00:	230c      	movs	r3, #12
     b02:	18fb      	adds	r3, r7, r3
     b04:	2200      	movs	r2, #0
     b06:	725a      	strb	r2, [r3, #9]
     b08:	230c      	movs	r3, #12
     b0a:	18fb      	adds	r3, r7, r3
     b0c:	2200      	movs	r2, #0
     b0e:	729a      	strb	r2, [r3, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_hdc, &packet);
     b10:	231f      	movs	r3, #31
     b12:	18fc      	adds	r4, r7, r3
     b14:	230c      	movs	r3, #12
     b16:	18fa      	adds	r2, r7, r3
     b18:	4b24      	ldr	r3, [pc, #144]	; (bac <request_data+0xe4>)
     b1a:	0011      	movs	r1, r2
     b1c:	0018      	movs	r0, r3
     b1e:	4b24      	ldr	r3, [pc, #144]	; (bb0 <request_data+0xe8>)
     b20:	4798      	blx	r3
     b22:	0003      	movs	r3, r0
     b24:	7023      	strb	r3, [r4, #0]

	if (STATUS_OK != i2c_code) {
     b26:	231f      	movs	r3, #31
     b28:	18fb      	adds	r3, r7, r3
     b2a:	781b      	ldrb	r3, [r3, #0]
     b2c:	2b00      	cmp	r3, #0
     b2e:	d008      	beq.n	b42 <request_data+0x7a>
		printf("failed to s	end register request for command 0x%02x!\r\n", command);
     b30:	1dfb      	adds	r3, r7, #7
     b32:	781a      	ldrb	r2, [r3, #0]
     b34:	4b1f      	ldr	r3, [pc, #124]	; (bb4 <request_data+0xec>)
     b36:	0011      	movs	r1, r2
     b38:	0018      	movs	r0, r3
     b3a:	4b1f      	ldr	r3, [pc, #124]	; (bb8 <request_data+0xf0>)
     b3c:	4798      	blx	r3
		return -1;
     b3e:	4b1f      	ldr	r3, [pc, #124]	; (bbc <request_data+0xf4>)
     b40:	e030      	b.n	ba4 <request_data+0xdc>
	}
	packet.data = received_data;
     b42:	230c      	movs	r3, #12
     b44:	18fb      	adds	r3, r7, r3
     b46:	221c      	movs	r2, #28
     b48:	18ba      	adds	r2, r7, r2
     b4a:	605a      	str	r2, [r3, #4]
	packet.data_length = 2;
     b4c:	230c      	movs	r3, #12
     b4e:	18fb      	adds	r3, r7, r3
     b50:	2202      	movs	r2, #2
     b52:	805a      	strh	r2, [r3, #2]
	delay_ms(15);
     b54:	200f      	movs	r0, #15
     b56:	4b1a      	ldr	r3, [pc, #104]	; (bc0 <request_data+0xf8>)
     b58:	4798      	blx	r3
	i2c_code = i2c_master_read_packet_wait(&i2c_hdc, &packet);
     b5a:	231f      	movs	r3, #31
     b5c:	18fc      	adds	r4, r7, r3
     b5e:	230c      	movs	r3, #12
     b60:	18fa      	adds	r2, r7, r3
     b62:	4b12      	ldr	r3, [pc, #72]	; (bac <request_data+0xe4>)
     b64:	0011      	movs	r1, r2
     b66:	0018      	movs	r0, r3
     b68:	4b16      	ldr	r3, [pc, #88]	; (bc4 <request_data+0xfc>)
     b6a:	4798      	blx	r3
     b6c:	0003      	movs	r3, r0
     b6e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != i2c_code) {
     b70:	231f      	movs	r3, #31
     b72:	18fb      	adds	r3, r7, r3
     b74:	781b      	ldrb	r3, [r3, #0]
     b76:	2b00      	cmp	r3, #0
     b78:	d008      	beq.n	b8c <request_data+0xc4>
		printf("failed to receive bytes for command 0x%02x!\r\n", command);
     b7a:	1dfb      	adds	r3, r7, #7
     b7c:	781a      	ldrb	r2, [r3, #0]
     b7e:	4b12      	ldr	r3, [pc, #72]	; (bc8 <request_data+0x100>)
     b80:	0011      	movs	r1, r2
     b82:	0018      	movs	r0, r3
     b84:	4b0c      	ldr	r3, [pc, #48]	; (bb8 <request_data+0xf0>)
     b86:	4798      	blx	r3
		return -1;
     b88:	4b0c      	ldr	r3, [pc, #48]	; (bbc <request_data+0xf4>)
     b8a:	e00b      	b.n	ba4 <request_data+0xdc>
	}
	return (received_data[0] << 8) | received_data[1];
     b8c:	231c      	movs	r3, #28
     b8e:	18fb      	adds	r3, r7, r3
     b90:	781b      	ldrb	r3, [r3, #0]
     b92:	021b      	lsls	r3, r3, #8
     b94:	b21a      	sxth	r2, r3
     b96:	231c      	movs	r3, #28
     b98:	18fb      	adds	r3, r7, r3
     b9a:	785b      	ldrb	r3, [r3, #1]
     b9c:	b21b      	sxth	r3, r3
     b9e:	4313      	orrs	r3, r2
     ba0:	b21b      	sxth	r3, r3
     ba2:	b29b      	uxth	r3, r3
}
     ba4:	0018      	movs	r0, r3
     ba6:	46bd      	mov	sp, r7
     ba8:	b009      	add	sp, #36	; 0x24
     baa:	bd90      	pop	{r4, r7, pc}
     bac:	200002c8 	.word	0x200002c8
     bb0:	0000f015 	.word	0x0000f015
     bb4:	0001894c 	.word	0x0001894c
     bb8:	00013e4d 	.word	0x00013e4d
     bbc:	0000ffff 	.word	0x0000ffff
     bc0:	0000dc51 	.word	0x0000dc51
     bc4:	0000ee1d 	.word	0x0000ee1d
     bc8:	00018984 	.word	0x00018984

00000bcc <get_hdc_device_id>:
uint16_t get_hdc_manufacturer_id()
{
	return request_data(HDC_MANUFACTURER_ID);
}
uint16_t get_hdc_device_id()
{
     bcc:	b580      	push	{r7, lr}
     bce:	af00      	add	r7, sp, #0
	return request_data(HDC_DEVICE_ID);
     bd0:	20ff      	movs	r0, #255	; 0xff
     bd2:	4b03      	ldr	r3, [pc, #12]	; (be0 <get_hdc_device_id+0x14>)
     bd4:	4798      	blx	r3
     bd6:	0003      	movs	r3, r0
}
     bd8:	0018      	movs	r0, r3
     bda:	46bd      	mov	sp, r7
     bdc:	bd80      	pop	{r7, pc}
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	00000ac9 	.word	0x00000ac9

00000be4 <get_humidity>:
double get_humidity()
{
     be4:	b590      	push	{r4, r7, lr}
     be6:	b083      	sub	sp, #12
     be8:	af00      	add	r7, sp, #0
	double raw_data = request_data(HDC_HUMIDITY);
     bea:	2001      	movs	r0, #1
     bec:	4b12      	ldr	r3, [pc, #72]	; (c38 <get_humidity+0x54>)
     bee:	4798      	blx	r3
     bf0:	0003      	movs	r3, r0
     bf2:	001a      	movs	r2, r3
     bf4:	4b11      	ldr	r3, [pc, #68]	; (c3c <get_humidity+0x58>)
     bf6:	0010      	movs	r0, r2
     bf8:	4798      	blx	r3
     bfa:	0003      	movs	r3, r0
     bfc:	000c      	movs	r4, r1
     bfe:	603b      	str	r3, [r7, #0]
     c00:	607c      	str	r4, [r7, #4]

	raw_data /= 65536.0;
     c02:	4c0f      	ldr	r4, [pc, #60]	; (c40 <get_humidity+0x5c>)
     c04:	2200      	movs	r2, #0
     c06:	4b0f      	ldr	r3, [pc, #60]	; (c44 <get_humidity+0x60>)
     c08:	6838      	ldr	r0, [r7, #0]
     c0a:	6879      	ldr	r1, [r7, #4]
     c0c:	47a0      	blx	r4
     c0e:	0003      	movs	r3, r0
     c10:	000c      	movs	r4, r1
     c12:	603b      	str	r3, [r7, #0]
     c14:	607c      	str	r4, [r7, #4]
	raw_data *= 100.0;
     c16:	4c0c      	ldr	r4, [pc, #48]	; (c48 <get_humidity+0x64>)
     c18:	2200      	movs	r2, #0
     c1a:	4b0c      	ldr	r3, [pc, #48]	; (c4c <get_humidity+0x68>)
     c1c:	6838      	ldr	r0, [r7, #0]
     c1e:	6879      	ldr	r1, [r7, #4]
     c20:	47a0      	blx	r4
     c22:	0003      	movs	r3, r0
     c24:	000c      	movs	r4, r1
     c26:	603b      	str	r3, [r7, #0]
     c28:	607c      	str	r4, [r7, #4]
	return raw_data;
     c2a:	683b      	ldr	r3, [r7, #0]
     c2c:	687c      	ldr	r4, [r7, #4]
}
     c2e:	0018      	movs	r0, r3
     c30:	0021      	movs	r1, r4
     c32:	46bd      	mov	sp, r7
     c34:	b003      	add	sp, #12
     c36:	bd90      	pop	{r4, r7, pc}
     c38:	00000ac9 	.word	0x00000ac9
     c3c:	0001878d 	.word	0x0001878d
     c40:	000172cd 	.word	0x000172cd
     c44:	40f00000 	.word	0x40f00000
     c48:	00017b35 	.word	0x00017b35
     c4c:	40590000 	.word	0x40590000

00000c50 <get_temp>:

double get_temp()
{
     c50:	b590      	push	{r4, r7, lr}
     c52:	b083      	sub	sp, #12
     c54:	af00      	add	r7, sp, #0
	double raw_data = request_data(HDC_TEMP);
     c56:	2000      	movs	r0, #0
     c58:	4b17      	ldr	r3, [pc, #92]	; (cb8 <get_temp+0x68>)
     c5a:	4798      	blx	r3
     c5c:	0003      	movs	r3, r0
     c5e:	001a      	movs	r2, r3
     c60:	4b16      	ldr	r3, [pc, #88]	; (cbc <get_temp+0x6c>)
     c62:	0010      	movs	r0, r2
     c64:	4798      	blx	r3
     c66:	0003      	movs	r3, r0
     c68:	000c      	movs	r4, r1
     c6a:	603b      	str	r3, [r7, #0]
     c6c:	607c      	str	r4, [r7, #4]

	raw_data /= 65536.0;
     c6e:	4c14      	ldr	r4, [pc, #80]	; (cc0 <get_temp+0x70>)
     c70:	2200      	movs	r2, #0
     c72:	4b14      	ldr	r3, [pc, #80]	; (cc4 <get_temp+0x74>)
     c74:	6838      	ldr	r0, [r7, #0]
     c76:	6879      	ldr	r1, [r7, #4]
     c78:	47a0      	blx	r4
     c7a:	0003      	movs	r3, r0
     c7c:	000c      	movs	r4, r1
     c7e:	603b      	str	r3, [r7, #0]
     c80:	607c      	str	r4, [r7, #4]
	raw_data *= 165.0;
     c82:	4c11      	ldr	r4, [pc, #68]	; (cc8 <get_temp+0x78>)
     c84:	2200      	movs	r2, #0
     c86:	4b11      	ldr	r3, [pc, #68]	; (ccc <get_temp+0x7c>)
     c88:	6838      	ldr	r0, [r7, #0]
     c8a:	6879      	ldr	r1, [r7, #4]
     c8c:	47a0      	blx	r4
     c8e:	0003      	movs	r3, r0
     c90:	000c      	movs	r4, r1
     c92:	603b      	str	r3, [r7, #0]
     c94:	607c      	str	r4, [r7, #4]
	raw_data -= 40.0;
     c96:	4c0e      	ldr	r4, [pc, #56]	; (cd0 <get_temp+0x80>)
     c98:	2200      	movs	r2, #0
     c9a:	4b0e      	ldr	r3, [pc, #56]	; (cd4 <get_temp+0x84>)
     c9c:	6838      	ldr	r0, [r7, #0]
     c9e:	6879      	ldr	r1, [r7, #4]
     ca0:	47a0      	blx	r4
     ca2:	0003      	movs	r3, r0
     ca4:	000c      	movs	r4, r1
     ca6:	603b      	str	r3, [r7, #0]
     ca8:	607c      	str	r4, [r7, #4]
	return raw_data;
     caa:	683b      	ldr	r3, [r7, #0]
     cac:	687c      	ldr	r4, [r7, #4]
}
     cae:	0018      	movs	r0, r3
     cb0:	0021      	movs	r1, r4
     cb2:	46bd      	mov	sp, r7
     cb4:	b003      	add	sp, #12
     cb6:	bd90      	pop	{r4, r7, pc}
     cb8:	00000ac9 	.word	0x00000ac9
     cbc:	0001878d 	.word	0x0001878d
     cc0:	000172cd 	.word	0x000172cd
     cc4:	40f00000 	.word	0x40f00000
     cc8:	00017b35 	.word	0x00017b35
     ccc:	4064a000 	.word	0x4064a000
     cd0:	00018035 	.word	0x00018035
     cd4:	40440000 	.word	0x40440000

00000cd8 <system_interrupt_enable>:
{
     cd8:	b580      	push	{r7, lr}
     cda:	b082      	sub	sp, #8
     cdc:	af00      	add	r7, sp, #0
     cde:	0002      	movs	r2, r0
     ce0:	1dfb      	adds	r3, r7, #7
     ce2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ce4:	4b06      	ldr	r3, [pc, #24]	; (d00 <system_interrupt_enable+0x28>)
     ce6:	1dfa      	adds	r2, r7, #7
     ce8:	7812      	ldrb	r2, [r2, #0]
     cea:	0011      	movs	r1, r2
     cec:	221f      	movs	r2, #31
     cee:	400a      	ands	r2, r1
     cf0:	2101      	movs	r1, #1
     cf2:	4091      	lsls	r1, r2
     cf4:	000a      	movs	r2, r1
     cf6:	601a      	str	r2, [r3, #0]
}
     cf8:	46c0      	nop			; (mov r8, r8)
     cfa:	46bd      	mov	sp, r7
     cfc:	b002      	add	sp, #8
     cfe:	bd80      	pop	{r7, pc}
     d00:	e000e100 	.word	0xe000e100

00000d04 <i2c_master_is_syncing>:
{
     d04:	b580      	push	{r7, lr}
     d06:	b084      	sub	sp, #16
     d08:	af00      	add	r7, sp, #0
     d0a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     d0c:	687b      	ldr	r3, [r7, #4]
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     d12:	68fb      	ldr	r3, [r7, #12]
     d14:	69db      	ldr	r3, [r3, #28]
     d16:	2207      	movs	r2, #7
     d18:	4013      	ands	r3, r2
     d1a:	1e5a      	subs	r2, r3, #1
     d1c:	4193      	sbcs	r3, r2
     d1e:	b2db      	uxtb	r3, r3
}
     d20:	0018      	movs	r0, r3
     d22:	46bd      	mov	sp, r7
     d24:	b004      	add	sp, #16
     d26:	bd80      	pop	{r7, pc}

00000d28 <_i2c_master_wait_for_sync>:
{
     d28:	b580      	push	{r7, lr}
     d2a:	b082      	sub	sp, #8
     d2c:	af00      	add	r7, sp, #0
     d2e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
     d30:	46c0      	nop			; (mov r8, r8)
     d32:	687b      	ldr	r3, [r7, #4]
     d34:	0018      	movs	r0, r3
     d36:	4b04      	ldr	r3, [pc, #16]	; (d48 <_i2c_master_wait_for_sync+0x20>)
     d38:	4798      	blx	r3
     d3a:	1e03      	subs	r3, r0, #0
     d3c:	d1f9      	bne.n	d32 <_i2c_master_wait_for_sync+0xa>
}
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	46bd      	mov	sp, r7
     d42:	b002      	add	sp, #8
     d44:	bd80      	pop	{r7, pc}
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	00000d05 	.word	0x00000d05

00000d4c <i2c_master_get_config_defaults>:
{
     d4c:	b580      	push	{r7, lr}
     d4e:	b082      	sub	sp, #8
     d50:	af00      	add	r7, sp, #0
     d52:	6078      	str	r0, [r7, #4]
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	2264      	movs	r2, #100	; 0x64
     d58:	601a      	str	r2, [r3, #0]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     d5a:	687b      	ldr	r3, [r7, #4]
     d5c:	4a1b      	ldr	r2, [pc, #108]	; (dcc <i2c_master_get_config_defaults+0x80>)
     d5e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	2200      	movs	r2, #0
     d64:	609a      	str	r2, [r3, #8]
	config->generator_source = GCLK_GENERATOR_0;
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	2200      	movs	r2, #0
     d6a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     d6c:	687b      	ldr	r3, [r7, #4]
     d6e:	2200      	movs	r2, #0
     d70:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	2280      	movs	r2, #128	; 0x80
     d76:	0392      	lsls	r2, r2, #14
     d78:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
     d7a:	687b      	ldr	r3, [r7, #4]
     d7c:	2201      	movs	r2, #1
     d7e:	4252      	negs	r2, r2
     d80:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
     d82:	687b      	ldr	r3, [r7, #4]
     d84:	2201      	movs	r2, #1
     d86:	4252      	negs	r2, r2
     d88:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     d8a:	687b      	ldr	r3, [r7, #4]
     d8c:	2200      	movs	r2, #0
     d8e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	2200      	movs	r2, #0
     d94:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	2224      	movs	r2, #36	; 0x24
     d9a:	2100      	movs	r1, #0
     d9c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	2200      	movs	r2, #0
     da2:	629a      	str	r2, [r3, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
     da4:	687b      	ldr	r3, [r7, #4]
     da6:	222c      	movs	r2, #44	; 0x2c
     da8:	2100      	movs	r1, #0
     daa:	5499      	strb	r1, [r3, r2]
	config->slave_scl_low_extend_timeout   = false;
     dac:	687b      	ldr	r3, [r7, #4]
     dae:	222d      	movs	r2, #45	; 0x2d
     db0:	2100      	movs	r1, #0
     db2:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	222e      	movs	r2, #46	; 0x2e
     db8:	2100      	movs	r1, #0
     dba:	5499      	strb	r1, [r3, r2]
	config->sda_scl_rise_time_ns = 215;
     dbc:	687b      	ldr	r3, [r7, #4]
     dbe:	22d7      	movs	r2, #215	; 0xd7
     dc0:	861a      	strh	r2, [r3, #48]	; 0x30
}
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	46bd      	mov	sp, r7
     dc6:	b002      	add	sp, #8
     dc8:	bd80      	pop	{r7, pc}
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	00000d48 	.word	0x00000d48

00000dd0 <i2c_master_enable>:
{
     dd0:	b580      	push	{r7, lr}
     dd2:	b084      	sub	sp, #16
     dd4:	af00      	add	r7, sp, #0
     dd6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     dd8:	687b      	ldr	r3, [r7, #4]
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	60bb      	str	r3, [r7, #8]
	uint32_t timeout_counter = 0;
     dde:	2300      	movs	r3, #0
     de0:	60fb      	str	r3, [r7, #12]
	_i2c_master_wait_for_sync(module);
     de2:	687b      	ldr	r3, [r7, #4]
     de4:	0018      	movs	r0, r3
     de6:	4b14      	ldr	r3, [pc, #80]	; (e38 <i2c_master_enable+0x68>)
     de8:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     dea:	68bb      	ldr	r3, [r7, #8]
     dec:	681b      	ldr	r3, [r3, #0]
     dee:	2202      	movs	r2, #2
     df0:	431a      	orrs	r2, r3
     df2:	68bb      	ldr	r3, [r7, #8]
     df4:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     df6:	687b      	ldr	r3, [r7, #4]
     df8:	681b      	ldr	r3, [r3, #0]
     dfa:	0018      	movs	r0, r3
     dfc:	4b0f      	ldr	r3, [pc, #60]	; (e3c <i2c_master_enable+0x6c>)
     dfe:	4798      	blx	r3
     e00:	0003      	movs	r3, r0
     e02:	0018      	movs	r0, r3
     e04:	4b0e      	ldr	r3, [pc, #56]	; (e40 <i2c_master_enable+0x70>)
     e06:	4798      	blx	r3
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     e08:	e00c      	b.n	e24 <i2c_master_enable+0x54>
		timeout_counter++;
     e0a:	68fb      	ldr	r3, [r7, #12]
     e0c:	3301      	adds	r3, #1
     e0e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     e10:	687b      	ldr	r3, [r7, #4]
     e12:	88db      	ldrh	r3, [r3, #6]
     e14:	001a      	movs	r2, r3
     e16:	68fb      	ldr	r3, [r7, #12]
     e18:	429a      	cmp	r2, r3
     e1a:	d803      	bhi.n	e24 <i2c_master_enable+0x54>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     e1c:	68bb      	ldr	r3, [r7, #8]
     e1e:	2210      	movs	r2, #16
     e20:	835a      	strh	r2, [r3, #26]
			return;
     e22:	e006      	b.n	e32 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     e24:	68bb      	ldr	r3, [r7, #8]
     e26:	8b5b      	ldrh	r3, [r3, #26]
     e28:	b29b      	uxth	r3, r3
     e2a:	001a      	movs	r2, r3
     e2c:	2310      	movs	r3, #16
     e2e:	4013      	ands	r3, r2
     e30:	d0eb      	beq.n	e0a <i2c_master_enable+0x3a>
}
     e32:	46bd      	mov	sp, r7
     e34:	b004      	add	sp, #16
     e36:	bd80      	pop	{r7, pc}
     e38:	00000d29 	.word	0x00000d29
     e3c:	00010769 	.word	0x00010769
     e40:	00000cd9 	.word	0x00000cd9

00000e44 <configure_i2c_tsl2561>:
#include "TSL2561.h"

tsl2561_i2c_addr tsl2561_addr = 0;

void configure_i2c_tsl2561(tsl2561_i2c_addr addr)
{
     e44:	b590      	push	{r4, r7, lr}
     e46:	b091      	sub	sp, #68	; 0x44
     e48:	af00      	add	r7, sp, #0
     e4a:	0002      	movs	r2, r0
     e4c:	1dfb      	adds	r3, r7, #7
     e4e:	701a      	strb	r2, [r3, #0]
	struct i2c_master_config config_i2c_master;

	i2c_master_get_config_defaults(&config_i2c_master);
     e50:	2308      	movs	r3, #8
     e52:	18fb      	adds	r3, r7, r3
     e54:	0018      	movs	r0, r3
     e56:	4b19      	ldr	r3, [pc, #100]	; (ebc <configure_i2c_tsl2561+0x78>)
     e58:	4798      	blx	r3
	config_i2c_master.buffer_timeout = I2C_TIMEOUT;
     e5a:	2308      	movs	r3, #8
     e5c:	18fb      	adds	r3, r7, r3
     e5e:	2201      	movs	r2, #1
     e60:	4252      	negs	r2, r2
     e62:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
     e64:	2308      	movs	r3, #8
     e66:	18fb      	adds	r3, r7, r3
     e68:	4a15      	ldr	r2, [pc, #84]	; (ec0 <configure_i2c_tsl2561+0x7c>)
     e6a:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
     e6c:	2308      	movs	r3, #8
     e6e:	18fb      	adds	r3, r7, r3
     e70:	4a14      	ldr	r2, [pc, #80]	; (ec4 <configure_i2c_tsl2561+0x80>)
     e72:	621a      	str	r2, [r3, #32]
	config_i2c_master.generator_source = GCLK_GENERATOR_0;
     e74:	2308      	movs	r3, #8
     e76:	18fb      	adds	r3, r7, r3
     e78:	2200      	movs	r2, #0
     e7a:	731a      	strb	r2, [r3, #12]
	enum status_code init_status = i2c_master_init(&i2c_tsl2561, SERCOM0, &config_i2c_master);
     e7c:	233f      	movs	r3, #63	; 0x3f
     e7e:	18fc      	adds	r4, r7, r3
     e80:	2308      	movs	r3, #8
     e82:	18fa      	adds	r2, r7, r3
     e84:	4910      	ldr	r1, [pc, #64]	; (ec8 <configure_i2c_tsl2561+0x84>)
     e86:	4b11      	ldr	r3, [pc, #68]	; (ecc <configure_i2c_tsl2561+0x88>)
     e88:	0018      	movs	r0, r3
     e8a:	4b11      	ldr	r3, [pc, #68]	; (ed0 <configure_i2c_tsl2561+0x8c>)
     e8c:	4798      	blx	r3
     e8e:	0003      	movs	r3, r0
     e90:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != init_status) {
     e92:	233f      	movs	r3, #63	; 0x3f
     e94:	18fb      	adds	r3, r7, r3
     e96:	781b      	ldrb	r3, [r3, #0]
     e98:	2b00      	cmp	r3, #0
     e9a:	d004      	beq.n	ea6 <configure_i2c_tsl2561+0x62>
		printf("failed to initialize TSL2561 driver.\r\n");
     e9c:	4b0d      	ldr	r3, [pc, #52]	; (ed4 <configure_i2c_tsl2561+0x90>)
     e9e:	0018      	movs	r0, r3
     ea0:	4b0d      	ldr	r3, [pc, #52]	; (ed8 <configure_i2c_tsl2561+0x94>)
     ea2:	4798      	blx	r3
     ea4:	e007      	b.n	eb6 <configure_i2c_tsl2561+0x72>
		return;
	}
	i2c_master_enable(&i2c_tsl2561);
     ea6:	4b09      	ldr	r3, [pc, #36]	; (ecc <configure_i2c_tsl2561+0x88>)
     ea8:	0018      	movs	r0, r3
     eaa:	4b0c      	ldr	r3, [pc, #48]	; (edc <configure_i2c_tsl2561+0x98>)
     eac:	4798      	blx	r3
	tsl2561_addr = addr;
     eae:	4b0c      	ldr	r3, [pc, #48]	; (ee0 <configure_i2c_tsl2561+0x9c>)
     eb0:	1dfa      	adds	r2, r7, #7
     eb2:	7812      	ldrb	r2, [r2, #0]
     eb4:	701a      	strb	r2, [r3, #0]
}
     eb6:	46bd      	mov	sp, r7
     eb8:	b011      	add	sp, #68	; 0x44
     eba:	bd90      	pop	{r4, r7, pc}
     ebc:	00000d4d 	.word	0x00000d4d
     ec0:	00080002 	.word	0x00080002
     ec4:	00090002 	.word	0x00090002
     ec8:	42000800 	.word	0x42000800
     ecc:	200002f0 	.word	0x200002f0
     ed0:	0000e965 	.word	0x0000e965
     ed4:	000189b4 	.word	0x000189b4
     ed8:	00013f69 	.word	0x00013f69
     edc:	00000dd1 	.word	0x00000dd1
     ee0:	20000204 	.word	0x20000204

00000ee4 <read_byte>:


uint8_t read_byte(tsl2561_registers reg)
{
     ee4:	b590      	push	{r4, r7, lr}
     ee6:	b087      	sub	sp, #28
     ee8:	af00      	add	r7, sp, #0
     eea:	0002      	movs	r2, r0
     eec:	1dfb      	adds	r3, r7, #7
     eee:	701a      	strb	r2, [r3, #0]
	uint8_t received_data;
	uint8_t write_buffer = reg;
     ef0:	2315      	movs	r3, #21
     ef2:	18fb      	adds	r3, r7, r3
     ef4:	1dfa      	adds	r2, r7, #7
     ef6:	7812      	ldrb	r2, [r2, #0]
     ef8:	701a      	strb	r2, [r3, #0]
	struct i2c_master_packet packet = {
     efa:	4b30      	ldr	r3, [pc, #192]	; (fbc <read_byte+0xd8>)
     efc:	781b      	ldrb	r3, [r3, #0]
     efe:	b29a      	uxth	r2, r3
     f00:	2308      	movs	r3, #8
     f02:	18fb      	adds	r3, r7, r3
     f04:	801a      	strh	r2, [r3, #0]
     f06:	2308      	movs	r3, #8
     f08:	18fb      	adds	r3, r7, r3
     f0a:	2201      	movs	r2, #1
     f0c:	805a      	strh	r2, [r3, #2]
     f0e:	2308      	movs	r3, #8
     f10:	18fb      	adds	r3, r7, r3
     f12:	2215      	movs	r2, #21
     f14:	18ba      	adds	r2, r7, r2
     f16:	605a      	str	r2, [r3, #4]
     f18:	2308      	movs	r3, #8
     f1a:	18fb      	adds	r3, r7, r3
     f1c:	2200      	movs	r2, #0
     f1e:	721a      	strb	r2, [r3, #8]
     f20:	2308      	movs	r3, #8
     f22:	18fb      	adds	r3, r7, r3
     f24:	2200      	movs	r2, #0
     f26:	725a      	strb	r2, [r3, #9]
     f28:	2308      	movs	r3, #8
     f2a:	18fb      	adds	r3, r7, r3
     f2c:	2200      	movs	r2, #0
     f2e:	729a      	strb	r2, [r3, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait(&i2c_tsl2561, &packet);
     f30:	2317      	movs	r3, #23
     f32:	18fc      	adds	r4, r7, r3
     f34:	2308      	movs	r3, #8
     f36:	18fa      	adds	r2, r7, r3
     f38:	4b21      	ldr	r3, [pc, #132]	; (fc0 <read_byte+0xdc>)
     f3a:	0011      	movs	r1, r2
     f3c:	0018      	movs	r0, r3
     f3e:	4b21      	ldr	r3, [pc, #132]	; (fc4 <read_byte+0xe0>)
     f40:	4798      	blx	r3
     f42:	0003      	movs	r3, r0
     f44:	7023      	strb	r3, [r4, #0]

	if (STATUS_OK != i2c_code) {
     f46:	2317      	movs	r3, #23
     f48:	18fb      	adds	r3, r7, r3
     f4a:	781b      	ldrb	r3, [r3, #0]
     f4c:	2b00      	cmp	r3, #0
     f4e:	d00a      	beq.n	f66 <read_byte+0x82>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
     f50:	2315      	movs	r3, #21
     f52:	18fb      	adds	r3, r7, r3
     f54:	781b      	ldrb	r3, [r3, #0]
     f56:	001a      	movs	r2, r3
     f58:	4b1b      	ldr	r3, [pc, #108]	; (fc8 <read_byte+0xe4>)
     f5a:	0011      	movs	r1, r2
     f5c:	0018      	movs	r0, r3
     f5e:	4b1b      	ldr	r3, [pc, #108]	; (fcc <read_byte+0xe8>)
     f60:	4798      	blx	r3
		return -1;
     f62:	23ff      	movs	r3, #255	; 0xff
     f64:	e026      	b.n	fb4 <read_byte+0xd0>
	}
	packet.data = &received_data;
     f66:	2308      	movs	r3, #8
     f68:	18fb      	adds	r3, r7, r3
     f6a:	2216      	movs	r2, #22
     f6c:	18ba      	adds	r2, r7, r2
     f6e:	605a      	str	r2, [r3, #4]
	packet.data_length = 1;
     f70:	2308      	movs	r3, #8
     f72:	18fb      	adds	r3, r7, r3
     f74:	2201      	movs	r2, #1
     f76:	805a      	strh	r2, [r3, #2]

	i2c_code = i2c_master_read_packet_wait(&i2c_tsl2561, &packet);
     f78:	2317      	movs	r3, #23
     f7a:	18fc      	adds	r4, r7, r3
     f7c:	2308      	movs	r3, #8
     f7e:	18fa      	adds	r2, r7, r3
     f80:	4b0f      	ldr	r3, [pc, #60]	; (fc0 <read_byte+0xdc>)
     f82:	0011      	movs	r1, r2
     f84:	0018      	movs	r0, r3
     f86:	4b12      	ldr	r3, [pc, #72]	; (fd0 <read_byte+0xec>)
     f88:	4798      	blx	r3
     f8a:	0003      	movs	r3, r0
     f8c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != i2c_code) {
     f8e:	2317      	movs	r3, #23
     f90:	18fb      	adds	r3, r7, r3
     f92:	781b      	ldrb	r3, [r3, #0]
     f94:	2b00      	cmp	r3, #0
     f96:	d00a      	beq.n	fae <read_byte+0xca>
		printf("failed to receive bytes for command 0x%02x!\r\n", write_buffer);
     f98:	2315      	movs	r3, #21
     f9a:	18fb      	adds	r3, r7, r3
     f9c:	781b      	ldrb	r3, [r3, #0]
     f9e:	001a      	movs	r2, r3
     fa0:	4b0c      	ldr	r3, [pc, #48]	; (fd4 <read_byte+0xf0>)
     fa2:	0011      	movs	r1, r2
     fa4:	0018      	movs	r0, r3
     fa6:	4b09      	ldr	r3, [pc, #36]	; (fcc <read_byte+0xe8>)
     fa8:	4798      	blx	r3
		return -1;
     faa:	23ff      	movs	r3, #255	; 0xff
     fac:	e002      	b.n	fb4 <read_byte+0xd0>
	}
	return received_data;
     fae:	2316      	movs	r3, #22
     fb0:	18fb      	adds	r3, r7, r3
     fb2:	781b      	ldrb	r3, [r3, #0]
}
     fb4:	0018      	movs	r0, r3
     fb6:	46bd      	mov	sp, r7
     fb8:	b007      	add	sp, #28
     fba:	bd90      	pop	{r4, r7, pc}
     fbc:	20000204 	.word	0x20000204
     fc0:	200002f0 	.word	0x200002f0
     fc4:	0000efd5 	.word	0x0000efd5
     fc8:	000189dc 	.word	0x000189dc
     fcc:	00013e4d 	.word	0x00013e4d
     fd0:	0000ee1d 	.word	0x0000ee1d
     fd4:	00018a14 	.word	0x00018a14

00000fd8 <write_byte>:

void write_byte(tsl2561_registers reg, uint8_t data_byte)
{
     fd8:	b590      	push	{r4, r7, lr}
     fda:	b087      	sub	sp, #28
     fdc:	af00      	add	r7, sp, #0
     fde:	0002      	movs	r2, r0
     fe0:	1dfb      	adds	r3, r7, #7
     fe2:	701a      	strb	r2, [r3, #0]
     fe4:	1dbb      	adds	r3, r7, #6
     fe6:	1c0a      	adds	r2, r1, #0
     fe8:	701a      	strb	r2, [r3, #0]
	uint8_t write_buffer[2] = { reg, data_byte };
     fea:	2314      	movs	r3, #20
     fec:	18fb      	adds	r3, r7, r3
     fee:	1dfa      	adds	r2, r7, #7
     ff0:	7812      	ldrb	r2, [r2, #0]
     ff2:	701a      	strb	r2, [r3, #0]
     ff4:	2314      	movs	r3, #20
     ff6:	18fb      	adds	r3, r7, r3
     ff8:	1dba      	adds	r2, r7, #6
     ffa:	7812      	ldrb	r2, [r2, #0]
     ffc:	705a      	strb	r2, [r3, #1]
	struct i2c_master_packet packet = {
     ffe:	4b1a      	ldr	r3, [pc, #104]	; (1068 <write_byte+0x90>)
    1000:	781b      	ldrb	r3, [r3, #0]
    1002:	b29a      	uxth	r2, r3
    1004:	2308      	movs	r3, #8
    1006:	18fb      	adds	r3, r7, r3
    1008:	801a      	strh	r2, [r3, #0]
    100a:	2308      	movs	r3, #8
    100c:	18fb      	adds	r3, r7, r3
    100e:	2202      	movs	r2, #2
    1010:	805a      	strh	r2, [r3, #2]
    1012:	2308      	movs	r3, #8
    1014:	18fb      	adds	r3, r7, r3
    1016:	2214      	movs	r2, #20
    1018:	18ba      	adds	r2, r7, r2
    101a:	605a      	str	r2, [r3, #4]
    101c:	2308      	movs	r3, #8
    101e:	18fb      	adds	r3, r7, r3
    1020:	2200      	movs	r2, #0
    1022:	721a      	strb	r2, [r3, #8]
    1024:	2308      	movs	r3, #8
    1026:	18fb      	adds	r3, r7, r3
    1028:	2200      	movs	r2, #0
    102a:	725a      	strb	r2, [r3, #9]
    102c:	2308      	movs	r3, #8
    102e:	18fb      	adds	r3, r7, r3
    1030:	2200      	movs	r2, #0
    1032:	729a      	strb	r2, [r3, #10]
		.ten_bit_address	= false,
		.high_speed		= false,
		.hs_master_code		= 0x0,
	};

	enum status_code i2c_code = i2c_master_write_packet_wait_no_stop(&i2c_tsl2561, &packet);
    1034:	2317      	movs	r3, #23
    1036:	18fc      	adds	r4, r7, r3
    1038:	2308      	movs	r3, #8
    103a:	18fa      	adds	r2, r7, r3
    103c:	4b0b      	ldr	r3, [pc, #44]	; (106c <write_byte+0x94>)
    103e:	0011      	movs	r1, r2
    1040:	0018      	movs	r0, r3
    1042:	4b0b      	ldr	r3, [pc, #44]	; (1070 <write_byte+0x98>)
    1044:	4798      	blx	r3
    1046:	0003      	movs	r3, r0
    1048:	7023      	strb	r3, [r4, #0]

	if (STATUS_OK != i2c_code) {
    104a:	2317      	movs	r3, #23
    104c:	18fb      	adds	r3, r7, r3
    104e:	781b      	ldrb	r3, [r3, #0]
    1050:	2b00      	cmp	r3, #0
    1052:	d006      	beq.n	1062 <write_byte+0x8a>
		printf("failed to send register request for command 0x%02x!\r\n", write_buffer);
    1054:	2314      	movs	r3, #20
    1056:	18fa      	adds	r2, r7, r3
    1058:	4b06      	ldr	r3, [pc, #24]	; (1074 <write_byte+0x9c>)
    105a:	0011      	movs	r1, r2
    105c:	0018      	movs	r0, r3
    105e:	4b06      	ldr	r3, [pc, #24]	; (1078 <write_byte+0xa0>)
    1060:	4798      	blx	r3
		return;
	}
}
    1062:	46bd      	mov	sp, r7
    1064:	b007      	add	sp, #28
    1066:	bd90      	pop	{r4, r7, pc}
    1068:	20000204 	.word	0x20000204
    106c:	200002f0 	.word	0x200002f0
    1070:	0000f015 	.word	0x0000f015
    1074:	000189dc 	.word	0x000189dc
    1078:	00013e4d 	.word	0x00013e4d

0000107c <set_gain>:
 * For now the integration time will always be 402ms. Will update once decide
 * if we need faster readings
 * @param new_gain new gain multiplier
 */
void set_gain(tsl2561_gains new_gain)
{
    107c:	b580      	push	{r7, lr}
    107e:	b082      	sub	sp, #8
    1080:	af00      	add	r7, sp, #0
    1082:	0002      	movs	r2, r0
    1084:	1dfb      	adds	r3, r7, #7
    1086:	701a      	strb	r2, [r3, #0]
	write_byte(CMD_BIT | TIMING_REG, (INTEGRATE_402MS | new_gain));
    1088:	1dfb      	adds	r3, r7, #7
    108a:	781b      	ldrb	r3, [r3, #0]
    108c:	2202      	movs	r2, #2
    108e:	4313      	orrs	r3, r2
    1090:	b2db      	uxtb	r3, r3
    1092:	0019      	movs	r1, r3
    1094:	2081      	movs	r0, #129	; 0x81
    1096:	4b03      	ldr	r3, [pc, #12]	; (10a4 <set_gain+0x28>)
    1098:	4798      	blx	r3
}
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	46bd      	mov	sp, r7
    109e:	b002      	add	sp, #8
    10a0:	bd80      	pop	{r7, pc}
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	00000fd9 	.word	0x00000fd9

000010a8 <power_on_tsl2561>:

void power_on_tsl2561()
{
    10a8:	b580      	push	{r7, lr}
    10aa:	af00      	add	r7, sp, #0
	write_byte(CMD_BIT | CTRL_REG, 0x03);
    10ac:	2103      	movs	r1, #3
    10ae:	2080      	movs	r0, #128	; 0x80
    10b0:	4b03      	ldr	r3, [pc, #12]	; (10c0 <power_on_tsl2561+0x18>)
    10b2:	4798      	blx	r3
	set_gain(GAIN_16X);
    10b4:	2010      	movs	r0, #16
    10b6:	4b03      	ldr	r3, [pc, #12]	; (10c4 <power_on_tsl2561+0x1c>)
    10b8:	4798      	blx	r3
}
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	46bd      	mov	sp, r7
    10be:	bd80      	pop	{r7, pc}
    10c0:	00000fd9 	.word	0x00000fd9
    10c4:	0000107d 	.word	0x0000107d

000010c8 <power_off_tsl2561>:

void power_off_tsl2561()
{
    10c8:	b580      	push	{r7, lr}
    10ca:	af00      	add	r7, sp, #0
	write_byte(CMD_BIT | CTRL_REG, 0x0);
    10cc:	2100      	movs	r1, #0
    10ce:	2080      	movs	r0, #128	; 0x80
    10d0:	4b02      	ldr	r3, [pc, #8]	; (10dc <power_off_tsl2561+0x14>)
    10d2:	4798      	blx	r3
}
    10d4:	46c0      	nop			; (mov r8, r8)
    10d6:	46bd      	mov	sp, r7
    10d8:	bd80      	pop	{r7, pc}
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00000fd9 	.word	0x00000fd9

000010e0 <get_chan0>:
{
	return read_byte(CMD_BIT | ID_REG);
}

uint16_t get_chan0()
{
    10e0:	b5b0      	push	{r4, r5, r7, lr}
    10e2:	af00      	add	r7, sp, #0
	//TODO: add way to change this
	delay_ms(403);
    10e4:	2394      	movs	r3, #148	; 0x94
    10e6:	33ff      	adds	r3, #255	; 0xff
    10e8:	0018      	movs	r0, r3
    10ea:	4b09      	ldr	r3, [pc, #36]	; (1110 <get_chan0+0x30>)
    10ec:	4798      	blx	r3
	//HAVE TO READ LOW REGISTER BEFORE HIGH REG PER DATASHEET
	return read_byte(CMD_BIT | CHAN0_LOW_REG) | (read_byte(CMD_BIT | CHAN0_HIGH_REG) << 8);
    10ee:	208c      	movs	r0, #140	; 0x8c
    10f0:	4b08      	ldr	r3, [pc, #32]	; (1114 <get_chan0+0x34>)
    10f2:	4798      	blx	r3
    10f4:	0003      	movs	r3, r0
    10f6:	b21c      	sxth	r4, r3
    10f8:	208d      	movs	r0, #141	; 0x8d
    10fa:	4b06      	ldr	r3, [pc, #24]	; (1114 <get_chan0+0x34>)
    10fc:	4798      	blx	r3
    10fe:	0003      	movs	r3, r0
    1100:	021b      	lsls	r3, r3, #8
    1102:	b21b      	sxth	r3, r3
    1104:	4323      	orrs	r3, r4
    1106:	b21b      	sxth	r3, r3
    1108:	b29b      	uxth	r3, r3
}
    110a:	0018      	movs	r0, r3
    110c:	46bd      	mov	sp, r7
    110e:	bdb0      	pop	{r4, r5, r7, pc}
    1110:	0000dc51 	.word	0x0000dc51
    1114:	00000ee5 	.word	0x00000ee5

00001118 <get_chan1>:

uint16_t get_chan1()
{
    1118:	b5b0      	push	{r4, r5, r7, lr}
    111a:	af00      	add	r7, sp, #0
	//TODO: add way to change this
	delay_ms(403);
    111c:	2394      	movs	r3, #148	; 0x94
    111e:	33ff      	adds	r3, #255	; 0xff
    1120:	0018      	movs	r0, r3
    1122:	4b09      	ldr	r3, [pc, #36]	; (1148 <get_chan1+0x30>)
    1124:	4798      	blx	r3
	return read_byte(CMD_BIT | CHAN1_LOW_REG) | (read_byte(CMD_BIT | CHAN1_HIGH_REG) << 8);
    1126:	208e      	movs	r0, #142	; 0x8e
    1128:	4b08      	ldr	r3, [pc, #32]	; (114c <get_chan1+0x34>)
    112a:	4798      	blx	r3
    112c:	0003      	movs	r3, r0
    112e:	b21c      	sxth	r4, r3
    1130:	208f      	movs	r0, #143	; 0x8f
    1132:	4b06      	ldr	r3, [pc, #24]	; (114c <get_chan1+0x34>)
    1134:	4798      	blx	r3
    1136:	0003      	movs	r3, r0
    1138:	021b      	lsls	r3, r3, #8
    113a:	b21b      	sxth	r3, r3
    113c:	4323      	orrs	r3, r4
    113e:	b21b      	sxth	r3, r3
    1140:	b29b      	uxth	r3, r3
}
    1142:	0018      	movs	r0, r3
    1144:	46bd      	mov	sp, r7
    1146:	bdb0      	pop	{r4, r5, r7, pc}
    1148:	0000dc51 	.word	0x0000dc51
    114c:	00000ee5 	.word	0x00000ee5

00001150 <get_lux>:

uint32_t get_lux()
{
    1150:	b590      	push	{r4, r7, lr}
    1152:	b089      	sub	sp, #36	; 0x24
    1154:	af00      	add	r7, sp, #0
	uint16_t chan0 = get_chan0();
    1156:	2312      	movs	r3, #18
    1158:	18fc      	adds	r4, r7, r3
    115a:	4b52      	ldr	r3, [pc, #328]	; (12a4 <get_lux+0x154>)
    115c:	4798      	blx	r3
    115e:	0003      	movs	r3, r0
    1160:	8023      	strh	r3, [r4, #0]
	uint16_t chan1 = get_chan1();
    1162:	2310      	movs	r3, #16
    1164:	18fc      	adds	r4, r7, r3
    1166:	4b50      	ldr	r3, [pc, #320]	; (12a8 <get_lux+0x158>)
    1168:	4798      	blx	r3
    116a:	0003      	movs	r3, r0
    116c:	8023      	strh	r3, [r4, #0]

	uint16_t saturation_test = 0xffff; // can't guarantee accuracy if reg is filled
    116e:	230e      	movs	r3, #14
    1170:	18fb      	adds	r3, r7, r3
    1172:	2201      	movs	r2, #1
    1174:	4252      	negs	r2, r2
    1176:	801a      	strh	r2, [r3, #0]
	if (chan0 > saturation_test || (chan1 > saturation_test)) {
    1178:	2312      	movs	r3, #18
    117a:	18fa      	adds	r2, r7, r3
    117c:	230e      	movs	r3, #14
    117e:	18fb      	adds	r3, r7, r3
    1180:	8812      	ldrh	r2, [r2, #0]
    1182:	881b      	ldrh	r3, [r3, #0]
    1184:	429a      	cmp	r2, r3
    1186:	d807      	bhi.n	1198 <get_lux+0x48>
    1188:	2310      	movs	r3, #16
    118a:	18fa      	adds	r2, r7, r3
    118c:	230e      	movs	r3, #14
    118e:	18fb      	adds	r3, r7, r3
    1190:	8812      	ldrh	r2, [r2, #0]
    1192:	881b      	ldrh	r3, [r3, #0]
    1194:	429a      	cmp	r2, r3
    1196:	d906      	bls.n	11a6 <get_lux+0x56>
		printf("get_lux: TSL2561 light is saturated");
    1198:	4b44      	ldr	r3, [pc, #272]	; (12ac <get_lux+0x15c>)
    119a:	0018      	movs	r0, r3
    119c:	4b44      	ldr	r3, [pc, #272]	; (12b0 <get_lux+0x160>)
    119e:	4798      	blx	r3
		return -1;
    11a0:	2301      	movs	r3, #1
    11a2:	425b      	negs	r3, r3
    11a4:	e079      	b.n	129a <get_lux+0x14a>
	}

	unsigned long ratio10 = 0;
    11a6:	2300      	movs	r3, #0
    11a8:	61fb      	str	r3, [r7, #28]
	if(chan0 != 0) {
    11aa:	2312      	movs	r3, #18
    11ac:	18fb      	adds	r3, r7, r3
    11ae:	881b      	ldrh	r3, [r3, #0]
    11b0:	2b00      	cmp	r3, #0
    11b2:	d00b      	beq.n	11cc <get_lux+0x7c>
		 ratio10 = (chan1 << (TSL2561_LUX_RATIOSCALE + 1)) / chan0;
    11b4:	2310      	movs	r3, #16
    11b6:	18fb      	adds	r3, r7, r3
    11b8:	881b      	ldrh	r3, [r3, #0]
    11ba:	029a      	lsls	r2, r3, #10
    11bc:	2312      	movs	r3, #18
    11be:	18fb      	adds	r3, r7, r3
    11c0:	8819      	ldrh	r1, [r3, #0]
    11c2:	4b3c      	ldr	r3, [pc, #240]	; (12b4 <get_lux+0x164>)
    11c4:	0010      	movs	r0, r2
    11c6:	4798      	blx	r3
    11c8:	0003      	movs	r3, r0
    11ca:	61fb      	str	r3, [r7, #28]
	}
	ratio10 = (ratio10 + 1) >> 1;
    11cc:	69fb      	ldr	r3, [r7, #28]
    11ce:	3301      	adds	r3, #1
    11d0:	085b      	lsrs	r3, r3, #1
    11d2:	61fb      	str	r3, [r7, #28]
	unsigned int b, m;

	if ((ratio10 >= 0) && (ratio10 <= TSL2561_LUX_K1T)) {
    11d4:	69fb      	ldr	r3, [r7, #28]
    11d6:	2b40      	cmp	r3, #64	; 0x40
    11d8:	d806      	bhi.n	11e8 <get_lux+0x98>
		b = TSL2561_LUX_B1T; m = TSL2561_LUX_M1T;
    11da:	23f9      	movs	r3, #249	; 0xf9
    11dc:	005b      	lsls	r3, r3, #1
    11de:	61bb      	str	r3, [r7, #24]
    11e0:	23df      	movs	r3, #223	; 0xdf
    11e2:	005b      	lsls	r3, r3, #1
    11e4:	617b      	str	r3, [r7, #20]
    11e6:	e042      	b.n	126e <get_lux+0x11e>
	} else if (ratio10 <= TSL2561_LUX_K2T) {
    11e8:	69fb      	ldr	r3, [r7, #28]
    11ea:	2b80      	cmp	r3, #128	; 0x80
    11ec:	d805      	bhi.n	11fa <get_lux+0xaa>
		b = TSL2561_LUX_B2T; m = TSL2561_LUX_M2T;
    11ee:	2385      	movs	r3, #133	; 0x85
    11f0:	009b      	lsls	r3, r3, #2
    11f2:	61bb      	str	r3, [r7, #24]
    11f4:	4b30      	ldr	r3, [pc, #192]	; (12b8 <get_lux+0x168>)
    11f6:	617b      	str	r3, [r7, #20]
    11f8:	e039      	b.n	126e <get_lux+0x11e>
	} else if (ratio10 <= TSL2561_LUX_K3T) {
    11fa:	69fb      	ldr	r3, [r7, #28]
    11fc:	2bc0      	cmp	r3, #192	; 0xc0
    11fe:	d804      	bhi.n	120a <get_lux+0xba>
		b = TSL2561_LUX_B3T; m = TSL2561_LUX_M3T;
    1200:	4b2e      	ldr	r3, [pc, #184]	; (12bc <get_lux+0x16c>)
    1202:	61bb      	str	r3, [r7, #24]
    1204:	4b2e      	ldr	r3, [pc, #184]	; (12c0 <get_lux+0x170>)
    1206:	617b      	str	r3, [r7, #20]
    1208:	e031      	b.n	126e <get_lux+0x11e>
	} else if (ratio10 <= TSL2561_LUX_K4T) {
    120a:	69fa      	ldr	r2, [r7, #28]
    120c:	2380      	movs	r3, #128	; 0x80
    120e:	005b      	lsls	r3, r3, #1
    1210:	429a      	cmp	r2, r3
    1212:	d805      	bhi.n	1220 <get_lux+0xd0>
		b = TSL2561_LUX_B4T; m = TSL2561_LUX_M4T;
    1214:	239c      	movs	r3, #156	; 0x9c
    1216:	009b      	lsls	r3, r3, #2
    1218:	61bb      	str	r3, [r7, #24]
    121a:	4b2a      	ldr	r3, [pc, #168]	; (12c4 <get_lux+0x174>)
    121c:	617b      	str	r3, [r7, #20]
    121e:	e026      	b.n	126e <get_lux+0x11e>
	} else if (ratio10 <= TSL2561_LUX_K5T) {
    1220:	69fa      	ldr	r2, [r7, #28]
    1222:	239c      	movs	r3, #156	; 0x9c
    1224:	005b      	lsls	r3, r3, #1
    1226:	429a      	cmp	r2, r3
    1228:	d806      	bhi.n	1238 <get_lux+0xe8>
		b = TSL2561_LUX_B5T; m = TSL2561_LUX_M5T;
    122a:	2370      	movs	r3, #112	; 0x70
    122c:	33ff      	adds	r3, #255	; 0xff
    122e:	61bb      	str	r3, [r7, #24]
    1230:	23fe      	movs	r3, #254	; 0xfe
    1232:	005b      	lsls	r3, r3, #1
    1234:	617b      	str	r3, [r7, #20]
    1236:	e01a      	b.n	126e <get_lux+0x11e>
	} else if (ratio10 <= TSL2561_LUX_K6T) {
    1238:	69fa      	ldr	r2, [r7, #28]
    123a:	23cd      	movs	r3, #205	; 0xcd
    123c:	005b      	lsls	r3, r3, #1
    123e:	429a      	cmp	r2, r3
    1240:	d804      	bhi.n	124c <get_lux+0xfc>
		b = TSL2561_LUX_B6T; m = TSL2561_LUX_M6T;
    1242:	23d2      	movs	r3, #210	; 0xd2
    1244:	61bb      	str	r3, [r7, #24]
    1246:	23fb      	movs	r3, #251	; 0xfb
    1248:	617b      	str	r3, [r7, #20]
    124a:	e010      	b.n	126e <get_lux+0x11e>
	} else if (ratio10 <= TSL2561_LUX_K7T) {
    124c:	69fb      	ldr	r3, [r7, #28]
    124e:	4a1e      	ldr	r2, [pc, #120]	; (12c8 <get_lux+0x178>)
    1250:	4293      	cmp	r3, r2
    1252:	d804      	bhi.n	125e <get_lux+0x10e>
		b = TSL2561_LUX_B7T; m = TSL2561_LUX_M7T;
    1254:	2318      	movs	r3, #24
    1256:	61bb      	str	r3, [r7, #24]
    1258:	2312      	movs	r3, #18
    125a:	617b      	str	r3, [r7, #20]
    125c:	e007      	b.n	126e <get_lux+0x11e>
	} else if (ratio10 > TSL2561_LUX_K8T) {
    125e:	69fb      	ldr	r3, [r7, #28]
    1260:	4a19      	ldr	r2, [pc, #100]	; (12c8 <get_lux+0x178>)
    1262:	4293      	cmp	r3, r2
    1264:	d903      	bls.n	126e <get_lux+0x11e>
		b = TSL2561_LUX_B8T; m = TSL2561_LUX_M8T;
    1266:	2300      	movs	r3, #0
    1268:	61bb      	str	r3, [r7, #24]
    126a:	2300      	movs	r3, #0
    126c:	617b      	str	r3, [r7, #20]
	}
	
	
	unsigned long temp = ((chan0 * b) - (chan1 * m));
    126e:	2312      	movs	r3, #18
    1270:	18fb      	adds	r3, r7, r3
    1272:	881b      	ldrh	r3, [r3, #0]
    1274:	69ba      	ldr	r2, [r7, #24]
    1276:	435a      	muls	r2, r3
    1278:	2310      	movs	r3, #16
    127a:	18fb      	adds	r3, r7, r3
    127c:	881b      	ldrh	r3, [r3, #0]
    127e:	6979      	ldr	r1, [r7, #20]
    1280:	434b      	muls	r3, r1
    1282:	1ad3      	subs	r3, r2, r3
    1284:	60bb      	str	r3, [r7, #8]
	temp = (temp) ? temp : 0; // no negative lux
	temp += (1 << (TSL2561_LUX_LUXSCALE - 1));
    1286:	68bb      	ldr	r3, [r7, #8]
    1288:	2280      	movs	r2, #128	; 0x80
    128a:	0192      	lsls	r2, r2, #6
    128c:	4694      	mov	ip, r2
    128e:	4463      	add	r3, ip
    1290:	60bb      	str	r3, [r7, #8]
	uint32_t lux = temp >> TSL2561_LUX_LUXSCALE;
    1292:	68bb      	ldr	r3, [r7, #8]
    1294:	0b9b      	lsrs	r3, r3, #14
    1296:	607b      	str	r3, [r7, #4]
	return lux;
    1298:	687b      	ldr	r3, [r7, #4]
}
    129a:	0018      	movs	r0, r3
    129c:	46bd      	mov	sp, r7
    129e:	b009      	add	sp, #36	; 0x24
    12a0:	bd90      	pop	{r4, r7, pc}
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	000010e1 	.word	0x000010e1
    12a8:	00001119 	.word	0x00001119
    12ac:	00018a44 	.word	0x00018a44
    12b0:	00013e4d 	.word	0x00013e4d
    12b4:	00016495 	.word	0x00016495
    12b8:	000002d1 	.word	0x000002d1
    12bc:	0000023f 	.word	0x0000023f
    12c0:	0000037b 	.word	0x0000037b
    12c4:	000003fe 	.word	0x000003fe
    12c8:	0000029a 	.word	0x0000029a

000012cc <crc32_calculate>:
 * \note To calculate the CRC of multiple blocks, use this function first, then
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
    12cc:	b580      	push	{r7, lr}
    12ce:	b084      	sub	sp, #16
    12d0:	af00      	add	r7, sp, #0
    12d2:	60f8      	str	r0, [r7, #12]
    12d4:	60b9      	str	r1, [r7, #8]
    12d6:	607a      	str	r2, [r7, #4]
	*crc = 0;
    12d8:	687b      	ldr	r3, [r7, #4]
    12da:	2200      	movs	r2, #0
    12dc:	601a      	str	r2, [r3, #0]

	return crc32_recalculate(data, length, crc);
    12de:	687a      	ldr	r2, [r7, #4]
    12e0:	68b9      	ldr	r1, [r7, #8]
    12e2:	68fb      	ldr	r3, [r7, #12]
    12e4:	0018      	movs	r0, r3
    12e6:	4b03      	ldr	r3, [pc, #12]	; (12f4 <crc32_calculate+0x28>)
    12e8:	4798      	blx	r3
    12ea:	0003      	movs	r3, r0
}
    12ec:	0018      	movs	r0, r3
    12ee:	46bd      	mov	sp, r7
    12f0:	b004      	add	sp, #16
    12f2:	bd80      	pop	{r7, pc}
    12f4:	00008e6d 	.word	0x00008e6d

000012f8 <clear_state>:
 * @param mask state to clear
 *
 */
//TODO: check and see if it will only clear on mask
static void clear_state(download_state mask)
{
    12f8:	b580      	push	{r7, lr}
    12fa:	b082      	sub	sp, #8
    12fc:	af00      	add	r7, sp, #0
    12fe:	0002      	movs	r2, r0
    1300:	1dbb      	adds	r3, r7, #6
    1302:	801a      	strh	r2, [r3, #0]
	down_state &= ~mask;
    1304:	1dbb      	adds	r3, r7, #6
    1306:	2200      	movs	r2, #0
    1308:	5e9b      	ldrsh	r3, [r3, r2]
    130a:	43db      	mvns	r3, r3
    130c:	b21b      	sxth	r3, r3
    130e:	4a06      	ldr	r2, [pc, #24]	; (1328 <clear_state+0x30>)
    1310:	8812      	ldrh	r2, [r2, #0]
    1312:	b212      	sxth	r2, r2
    1314:	4013      	ands	r3, r2
    1316:	b21b      	sxth	r3, r3
    1318:	b29a      	uxth	r2, r3
    131a:	4b03      	ldr	r3, [pc, #12]	; (1328 <clear_state+0x30>)
    131c:	801a      	strh	r2, [r3, #0]
}
    131e:	46c0      	nop			; (mov r8, r8)
    1320:	46bd      	mov	sp, r7
    1322:	b002      	add	sp, #8
    1324:	bd80      	pop	{r7, pc}
    1326:	46c0      	nop			; (mov r8, r8)
    1328:	20000324 	.word	0x20000324

0000132c <add_state>:
/**
 * add a given state to the global download_state @ref down_state
 * @param mask add given state
 */
static void add_state(download_state mask)
{
    132c:	b580      	push	{r7, lr}
    132e:	b082      	sub	sp, #8
    1330:	af00      	add	r7, sp, #0
    1332:	0002      	movs	r2, r0
    1334:	1dbb      	adds	r3, r7, #6
    1336:	801a      	strh	r2, [r3, #0]
	down_state |= mask;
    1338:	4b10      	ldr	r3, [pc, #64]	; (137c <add_state+0x50>)
    133a:	881a      	ldrh	r2, [r3, #0]
    133c:	1dbb      	adds	r3, r7, #6
    133e:	881b      	ldrh	r3, [r3, #0]
    1340:	4313      	orrs	r3, r2
    1342:	b29a      	uxth	r2, r3
    1344:	4b0d      	ldr	r3, [pc, #52]	; (137c <add_state+0x50>)
    1346:	801a      	strh	r2, [r3, #0]
	if (mask == CANCELED || mask == COMPLETED)
    1348:	1dbb      	adds	r3, r7, #6
    134a:	881b      	ldrh	r3, [r3, #0]
    134c:	2b20      	cmp	r3, #32
    134e:	d003      	beq.n	1358 <add_state+0x2c>
    1350:	1dbb      	adds	r3, r7, #6
    1352:	881b      	ldrh	r3, [r3, #0]
    1354:	2b10      	cmp	r3, #16
    1356:	d104      	bne.n	1362 <add_state+0x36>
		at25dfx_chip_sleep(&at25dfx_chip);
    1358:	4b09      	ldr	r3, [pc, #36]	; (1380 <add_state+0x54>)
    135a:	0018      	movs	r0, r3
    135c:	4b09      	ldr	r3, [pc, #36]	; (1384 <add_state+0x58>)
    135e:	4798      	blx	r3
	else if (mask == DOWNLOADING)
		at25dfx_chip_wake(&at25dfx_chip);
}
    1360:	e007      	b.n	1372 <add_state+0x46>
	else if (mask == DOWNLOADING)
    1362:	1dbb      	adds	r3, r7, #6
    1364:	881b      	ldrh	r3, [r3, #0]
    1366:	2b08      	cmp	r3, #8
    1368:	d103      	bne.n	1372 <add_state+0x46>
		at25dfx_chip_wake(&at25dfx_chip);
    136a:	4b05      	ldr	r3, [pc, #20]	; (1380 <add_state+0x54>)
    136c:	0018      	movs	r0, r3
    136e:	4b06      	ldr	r3, [pc, #24]	; (1388 <add_state+0x5c>)
    1370:	4798      	blx	r3
}
    1372:	46c0      	nop			; (mov r8, r8)
    1374:	46bd      	mov	sp, r7
    1376:	b002      	add	sp, #8
    1378:	bd80      	pop	{r7, pc}
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	20000324 	.word	0x20000324
    1380:	2000031c 	.word	0x2000031c
    1384:	000032c1 	.word	0x000032c1
    1388:	0000334d 	.word	0x0000334d

0000138c <init_state>:
/**
 * initialize global @ref down_state
 */
static void init_state()
{
    138c:	b580      	push	{r7, lr}
    138e:	af00      	add	r7, sp, #0
	down_state = NOT_READY;
    1390:	4b04      	ldr	r3, [pc, #16]	; (13a4 <init_state+0x18>)
    1392:	2200      	movs	r2, #0
    1394:	801a      	strh	r2, [r3, #0]
	add_state(NOT_CHECKED);
    1396:	2040      	movs	r0, #64	; 0x40
    1398:	4b03      	ldr	r3, [pc, #12]	; (13a8 <init_state+0x1c>)
    139a:	4798      	blx	r3
}
    139c:	46c0      	nop			; (mov r8, r8)
    139e:	46bd      	mov	sp, r7
    13a0:	bd80      	pop	{r7, pc}
    13a2:	46c0      	nop			; (mov r8, r8)
    13a4:	20000324 	.word	0x20000324
    13a8:	0000132d 	.word	0x0000132d

000013ac <is_state_set>:
 * check is a state is set or not
 * @param  mask state to check
 * @return      true if state is set
 */
static inline bool is_state_set(download_state mask)
{
    13ac:	b580      	push	{r7, lr}
    13ae:	b082      	sub	sp, #8
    13b0:	af00      	add	r7, sp, #0
    13b2:	0002      	movs	r2, r0
    13b4:	1dbb      	adds	r3, r7, #6
    13b6:	801a      	strh	r2, [r3, #0]
	return (down_state & mask) != 0;
    13b8:	4b06      	ldr	r3, [pc, #24]	; (13d4 <is_state_set+0x28>)
    13ba:	881b      	ldrh	r3, [r3, #0]
    13bc:	1dba      	adds	r2, r7, #6
    13be:	8812      	ldrh	r2, [r2, #0]
    13c0:	4013      	ands	r3, r2
    13c2:	b29b      	uxth	r3, r3
    13c4:	1e5a      	subs	r2, r3, #1
    13c6:	4193      	sbcs	r3, r2
    13c8:	b2db      	uxtb	r3, r3
}
    13ca:	0018      	movs	r0, r3
    13cc:	46bd      	mov	sp, r7
    13ce:	b002      	add	sp, #8
    13d0:	bd80      	pop	{r7, pc}
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	20000324 	.word	0x20000324

000013d8 <start_download>:

/**
 * ensures proper state before GET Request
 */
static void start_download()
{
    13d8:	b590      	push	{r4, r7, lr}
    13da:	b083      	sub	sp, #12
    13dc:	af02      	add	r7, sp, #8
	if (!is_state_set(STORAGE_READY)) {
    13de:	2001      	movs	r0, #1
    13e0:	4b35      	ldr	r3, [pc, #212]	; (14b8 <start_download+0xe0>)
    13e2:	4798      	blx	r3
    13e4:	0003      	movs	r3, r0
    13e6:	001a      	movs	r2, r3
    13e8:	2301      	movs	r3, #1
    13ea:	4053      	eors	r3, r2
    13ec:	b2db      	uxtb	r3, r3
    13ee:	2b00      	cmp	r3, #0
    13f0:	d004      	beq.n	13fc <start_download+0x24>
		printf("start_download: MMC storage not ready.\r\n");
    13f2:	4b32      	ldr	r3, [pc, #200]	; (14bc <start_download+0xe4>)
    13f4:	0018      	movs	r0, r3
    13f6:	4b32      	ldr	r3, [pc, #200]	; (14c0 <start_download+0xe8>)
    13f8:	4798      	blx	r3
		return;
    13fa:	e059      	b.n	14b0 <start_download+0xd8>
	}

	if (!is_state_set(WIFI_CONNECTED)) {
    13fc:	2002      	movs	r0, #2
    13fe:	4b2e      	ldr	r3, [pc, #184]	; (14b8 <start_download+0xe0>)
    1400:	4798      	blx	r3
    1402:	0003      	movs	r3, r0
    1404:	001a      	movs	r2, r3
    1406:	2301      	movs	r3, #1
    1408:	4053      	eors	r3, r2
    140a:	b2db      	uxtb	r3, r3
    140c:	2b00      	cmp	r3, #0
    140e:	d004      	beq.n	141a <start_download+0x42>
		printf("start_download: Wi-Fi is not connected.\r\n");
    1410:	4b2c      	ldr	r3, [pc, #176]	; (14c4 <start_download+0xec>)
    1412:	0018      	movs	r0, r3
    1414:	4b2a      	ldr	r3, [pc, #168]	; (14c0 <start_download+0xe8>)
    1416:	4798      	blx	r3
		return;
    1418:	e04a      	b.n	14b0 <start_download+0xd8>
	}

	if (is_state_set(GET_REQUESTED)) {
    141a:	2004      	movs	r0, #4
    141c:	4b26      	ldr	r3, [pc, #152]	; (14b8 <start_download+0xe0>)
    141e:	4798      	blx	r3
    1420:	1e03      	subs	r3, r0, #0
    1422:	d004      	beq.n	142e <start_download+0x56>
		printf("start_download: request is sent already.\r\n");
    1424:	4b28      	ldr	r3, [pc, #160]	; (14c8 <start_download+0xf0>)
    1426:	0018      	movs	r0, r3
    1428:	4b25      	ldr	r3, [pc, #148]	; (14c0 <start_download+0xe8>)
    142a:	4798      	blx	r3
		return;
    142c:	e040      	b.n	14b0 <start_download+0xd8>
	}

	if (is_state_set(DOWNLOADING)) {
    142e:	2008      	movs	r0, #8
    1430:	4b21      	ldr	r3, [pc, #132]	; (14b8 <start_download+0xe0>)
    1432:	4798      	blx	r3
    1434:	1e03      	subs	r3, r0, #0
    1436:	d004      	beq.n	1442 <start_download+0x6a>
		printf("start_download: running download already.\r\n");
    1438:	4b24      	ldr	r3, [pc, #144]	; (14cc <start_download+0xf4>)
    143a:	0018      	movs	r0, r3
    143c:	4b20      	ldr	r3, [pc, #128]	; (14c0 <start_download+0xe8>)
    143e:	4798      	blx	r3
		return;
    1440:	e036      	b.n	14b0 <start_download+0xd8>
	}
	if (is_state_set(NOT_CHECKED)) {
    1442:	2040      	movs	r0, #64	; 0x40
    1444:	4b1c      	ldr	r3, [pc, #112]	; (14b8 <start_download+0xe0>)
    1446:	4798      	blx	r3
    1448:	1e03      	subs	r3, r0, #0
    144a:	d00e      	beq.n	146a <start_download+0x92>
		printf("start_download [NOT_CHECKED]: sending HTTP request for header\r\n");
    144c:	4b20      	ldr	r3, [pc, #128]	; (14d0 <start_download+0xf8>)
    144e:	0018      	movs	r0, r3
    1450:	4b1b      	ldr	r3, [pc, #108]	; (14c0 <start_download+0xe8>)
    1452:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, current_wifi_config->firmware_header_http_address, HTTP_METHOD_GET, NULL, NULL);
    1454:	4b1f      	ldr	r3, [pc, #124]	; (14d4 <start_download+0xfc>)
    1456:	681b      	ldr	r3, [r3, #0]
    1458:	68d9      	ldr	r1, [r3, #12]
    145a:	481f      	ldr	r0, [pc, #124]	; (14d8 <start_download+0x100>)
    145c:	2300      	movs	r3, #0
    145e:	9300      	str	r3, [sp, #0]
    1460:	2300      	movs	r3, #0
    1462:	2201      	movs	r2, #1
    1464:	4c1d      	ldr	r4, [pc, #116]	; (14dc <start_download+0x104>)
    1466:	47a0      	blx	r4
		return;
    1468:	e022      	b.n	14b0 <start_download+0xd8>
	}
	if (is_state_set(UPDATE_AVAILABLE)) {
    146a:	2080      	movs	r0, #128	; 0x80
    146c:	4b12      	ldr	r3, [pc, #72]	; (14b8 <start_download+0xe0>)
    146e:	4798      	blx	r3
    1470:	1e03      	subs	r3, r0, #0
    1472:	d00e      	beq.n	1492 <start_download+0xba>
		printf("start_download [UPDATE_AVAILABLE]: sending HTTP request for firmware\r\n");
    1474:	4b1a      	ldr	r3, [pc, #104]	; (14e0 <start_download+0x108>)
    1476:	0018      	movs	r0, r3
    1478:	4b11      	ldr	r3, [pc, #68]	; (14c0 <start_download+0xe8>)
    147a:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, current_wifi_config->firmware_http_address, HTTP_METHOD_GET, NULL, NULL);
    147c:	4b15      	ldr	r3, [pc, #84]	; (14d4 <start_download+0xfc>)
    147e:	681b      	ldr	r3, [r3, #0]
    1480:	6919      	ldr	r1, [r3, #16]
    1482:	4815      	ldr	r0, [pc, #84]	; (14d8 <start_download+0x100>)
    1484:	2300      	movs	r3, #0
    1486:	9300      	str	r3, [sp, #0]
    1488:	2300      	movs	r3, #0
    148a:	2201      	movs	r2, #1
    148c:	4c13      	ldr	r4, [pc, #76]	; (14dc <start_download+0x104>)
    148e:	47a0      	blx	r4
		return;
    1490:	e00e      	b.n	14b0 <start_download+0xd8>
	}
	if (is_state_set(UPDATE_NOT_AVAILABLE)) {
    1492:	2380      	movs	r3, #128	; 0x80
    1494:	005b      	lsls	r3, r3, #1
    1496:	0018      	movs	r0, r3
    1498:	4b07      	ldr	r3, [pc, #28]	; (14b8 <start_download+0xe0>)
    149a:	4798      	blx	r3
    149c:	1e03      	subs	r3, r0, #0
    149e:	d007      	beq.n	14b0 <start_download+0xd8>
		printf("start_download: no update available\r\n");
    14a0:	4b10      	ldr	r3, [pc, #64]	; (14e4 <start_download+0x10c>)
    14a2:	0018      	movs	r0, r3
    14a4:	4b06      	ldr	r3, [pc, #24]	; (14c0 <start_download+0xe8>)
    14a6:	4798      	blx	r3
		add_state(COMPLETED);
    14a8:	2010      	movs	r0, #16
    14aa:	4b0f      	ldr	r3, [pc, #60]	; (14e8 <start_download+0x110>)
    14ac:	4798      	blx	r3
		return;
    14ae:	46c0      	nop			; (mov r8, r8)
	}
}
    14b0:	46bd      	mov	sp, r7
    14b2:	b001      	add	sp, #4
    14b4:	bd90      	pop	{r4, r7, pc}
    14b6:	46c0      	nop			; (mov r8, r8)
    14b8:	000013ad 	.word	0x000013ad
    14bc:	00018a68 	.word	0x00018a68
    14c0:	00013f69 	.word	0x00013f69
    14c4:	00018a90 	.word	0x00018a90
    14c8:	00018abc 	.word	0x00018abc
    14cc:	00018ae8 	.word	0x00018ae8
    14d0:	00018b14 	.word	0x00018b14
    14d4:	200004ac 	.word	0x200004ac
    14d8:	20000380 	.word	0x20000380
    14dc:	0000bab9 	.word	0x0000bab9
    14e0:	00018b54 	.word	0x00018b54
    14e4:	00018b9c 	.word	0x00018b9c
    14e8:	0000132d 	.word	0x0000132d

000014ec <write_firmware_metadata>:

static void write_firmware_metadata(uint32_t firmware_address, uint16_t firmware_version, uint32_t firmware_checksum, uint32_t fw_size)
{
    14ec:	b5b0      	push	{r4, r5, r7, lr}
    14ee:	b0c8      	sub	sp, #288	; 0x120
    14f0:	af00      	add	r7, sp, #0
    14f2:	60f8      	str	r0, [r7, #12]
    14f4:	607a      	str	r2, [r7, #4]
    14f6:	603b      	str	r3, [r7, #0]
    14f8:	4b29      	ldr	r3, [pc, #164]	; (15a0 <write_firmware_metadata+0xb4>)
    14fa:	2290      	movs	r2, #144	; 0x90
    14fc:	0052      	lsls	r2, r2, #1
    14fe:	4694      	mov	ip, r2
    1500:	44bc      	add	ip, r7
    1502:	4463      	add	r3, ip
    1504:	1c0a      	adds	r2, r1, #0
    1506:	801a      	strh	r2, [r3, #0]
	if (FW1_ADDR == firmware_address)
    1508:	68fa      	ldr	r2, [r7, #12]
    150a:	2380      	movs	r3, #128	; 0x80
    150c:	019b      	lsls	r3, r3, #6
    150e:	429a      	cmp	r2, r3
    1510:	d103      	bne.n	151a <write_firmware_metadata+0x2e>
		firmware_address = FW1_HEADER_ADDR;
    1512:	2380      	movs	r3, #128	; 0x80
    1514:	015b      	lsls	r3, r3, #5
    1516:	60fb      	str	r3, [r7, #12]
    1518:	e007      	b.n	152a <write_firmware_metadata+0x3e>
	else if (FW2_ADDR == firmware_address)
    151a:	68fa      	ldr	r2, [r7, #12]
    151c:	2382      	movs	r3, #130	; 0x82
    151e:	02db      	lsls	r3, r3, #11
    1520:	429a      	cmp	r2, r3
    1522:	d138      	bne.n	1596 <write_firmware_metadata+0xaa>
		firmware_address = FW2_HEADER_ADDR;
    1524:	2380      	movs	r3, #128	; 0x80
    1526:	02db      	lsls	r3, r3, #11
    1528:	60fb      	str	r3, [r7, #12]
		return;

	//NOTE: existing firmware information has already been erased when chip was being prepped
	//NOTE: this is to prevent metadata corruption or a mismatch in the case of failure

	fw_header_t new_firmware_header = { .fw_version = firmware_version, .checksum = firmware_checksum, .size = fw_size };
    152a:	2388      	movs	r3, #136	; 0x88
    152c:	005b      	lsls	r3, r3, #1
    152e:	18fb      	adds	r3, r7, r3
    1530:	4a1b      	ldr	r2, [pc, #108]	; (15a0 <write_firmware_metadata+0xb4>)
    1532:	2190      	movs	r1, #144	; 0x90
    1534:	0049      	lsls	r1, r1, #1
    1536:	468c      	mov	ip, r1
    1538:	44bc      	add	ip, r7
    153a:	4462      	add	r2, ip
    153c:	8812      	ldrh	r2, [r2, #0]
    153e:	801a      	strh	r2, [r3, #0]
    1540:	2388      	movs	r3, #136	; 0x88
    1542:	005b      	lsls	r3, r3, #1
    1544:	18fb      	adds	r3, r7, r3
    1546:	687a      	ldr	r2, [r7, #4]
    1548:	605a      	str	r2, [r3, #4]
    154a:	2388      	movs	r3, #136	; 0x88
    154c:	005b      	lsls	r3, r3, #1
    154e:	18fb      	adds	r3, r7, r3
    1550:	683a      	ldr	r2, [r7, #0]
    1552:	609a      	str	r2, [r3, #8]
	uint8_t write_buffer[FLASH_ROW_SIZE];
	memcpy(write_buffer, &new_firmware_header, sizeof(fw_header_t));
    1554:	2388      	movs	r3, #136	; 0x88
    1556:	005b      	lsls	r3, r3, #1
    1558:	18f9      	adds	r1, r7, r3
    155a:	2310      	movs	r3, #16
    155c:	18fb      	adds	r3, r7, r3
    155e:	220c      	movs	r2, #12
    1560:	0018      	movs	r0, r3
    1562:	4b10      	ldr	r3, [pc, #64]	; (15a4 <write_firmware_metadata+0xb8>)
    1564:	4798      	blx	r3
	enum status_code write_code = at25dfx_chip_write_buffer(&at25dfx_chip, firmware_address, write_buffer, FLASH_ROW_SIZE);
    1566:	2320      	movs	r3, #32
    1568:	33ff      	adds	r3, #255	; 0xff
    156a:	18fc      	adds	r4, r7, r3
    156c:	2380      	movs	r3, #128	; 0x80
    156e:	005b      	lsls	r3, r3, #1
    1570:	2210      	movs	r2, #16
    1572:	18ba      	adds	r2, r7, r2
    1574:	68f9      	ldr	r1, [r7, #12]
    1576:	480c      	ldr	r0, [pc, #48]	; (15a8 <write_firmware_metadata+0xbc>)
    1578:	4d0c      	ldr	r5, [pc, #48]	; (15ac <write_firmware_metadata+0xc0>)
    157a:	47a8      	blx	r5
    157c:	0003      	movs	r3, r0
    157e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != write_code) {
    1580:	2320      	movs	r3, #32
    1582:	33ff      	adds	r3, #255	; 0xff
    1584:	18fb      	adds	r3, r7, r3
    1586:	781b      	ldrb	r3, [r3, #0]
    1588:	2b00      	cmp	r3, #0
    158a:	d005      	beq.n	1598 <write_firmware_metadata+0xac>
		printf("write_firmware_metadata: could not write to flash!\r\n");
    158c:	4b08      	ldr	r3, [pc, #32]	; (15b0 <write_firmware_metadata+0xc4>)
    158e:	0018      	movs	r0, r3
    1590:	4b08      	ldr	r3, [pc, #32]	; (15b4 <write_firmware_metadata+0xc8>)
    1592:	4798      	blx	r3
		return;
    1594:	e000      	b.n	1598 <write_firmware_metadata+0xac>
		return;
    1596:	46c0      	nop			; (mov r8, r8)
	}
}
    1598:	46bd      	mov	sp, r7
    159a:	b048      	add	sp, #288	; 0x120
    159c:	bdb0      	pop	{r4, r5, r7, pc}
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	fffffeea 	.word	0xfffffeea
    15a4:	000133d5 	.word	0x000133d5
    15a8:	2000031c 	.word	0x2000031c
    15ac:	00002f69 	.word	0x00002f69
    15b0:	00018bc4 	.word	0x00018bc4
    15b4:	00013f69 	.word	0x00013f69

000015b8 <update_boot_status>:

/**
 * update the boot status struct in internal memory
 */
static void update_boot_status()
{
    15b8:	b590      	push	{r4, r7, lr}
    15ba:	b0d1      	sub	sp, #324	; 0x144
    15bc:	af00      	add	r7, sp, #0
	struct nvm_parameters nvm_information;

	nvm_get_parameters(&nvm_information);
    15be:	2386      	movs	r3, #134	; 0x86
    15c0:	005b      	lsls	r3, r3, #1
    15c2:	18fb      	adds	r3, r7, r3
    15c4:	0018      	movs	r0, r3
    15c6:	4ba5      	ldr	r3, [pc, #660]	; (185c <update_boot_status+0x2a4>)
    15c8:	4798      	blx	r3
	uint16_t num_pages = nvm_information.nvm_number_of_pages;
    15ca:	239b      	movs	r3, #155	; 0x9b
    15cc:	005b      	lsls	r3, r3, #1
    15ce:	18fb      	adds	r3, r7, r3
    15d0:	2286      	movs	r2, #134	; 0x86
    15d2:	0052      	lsls	r2, r2, #1
    15d4:	18ba      	adds	r2, r7, r2
    15d6:	8852      	ldrh	r2, [r2, #2]
    15d8:	801a      	strh	r2, [r3, #0]
	int page_to_write = BOOT_STATUS_ADDR / NVMCTRL_PAGE_SIZE;
    15da:	23ff      	movs	r3, #255	; 0xff
    15dc:	2298      	movs	r2, #152	; 0x98
    15de:	0052      	lsls	r2, r2, #1
    15e0:	18ba      	adds	r2, r7, r2
    15e2:	6013      	str	r3, [r2, #0]
	int row_to_erase = page_to_write / NVMCTRL_ROW_PAGES;
    15e4:	2398      	movs	r3, #152	; 0x98
    15e6:	005b      	lsls	r3, r3, #1
    15e8:	18fb      	adds	r3, r7, r3
    15ea:	681b      	ldr	r3, [r3, #0]
    15ec:	2b00      	cmp	r3, #0
    15ee:	da00      	bge.n	15f2 <update_boot_status+0x3a>
    15f0:	3303      	adds	r3, #3
    15f2:	109b      	asrs	r3, r3, #2
    15f4:	2296      	movs	r2, #150	; 0x96
    15f6:	0052      	lsls	r2, r2, #1
    15f8:	18ba      	adds	r2, r7, r2
    15fa:	6013      	str	r3, [r2, #0]
	printf("update_boot_status: row_to_erase: %d\r\n", row_to_erase);
    15fc:	2396      	movs	r3, #150	; 0x96
    15fe:	005b      	lsls	r3, r3, #1
    1600:	18fb      	adds	r3, r7, r3
    1602:	681a      	ldr	r2, [r3, #0]
    1604:	4b96      	ldr	r3, [pc, #600]	; (1860 <update_boot_status+0x2a8>)
    1606:	0011      	movs	r1, r2
    1608:	0018      	movs	r0, r3
    160a:	4b96      	ldr	r3, [pc, #600]	; (1864 <update_boot_status+0x2ac>)
    160c:	4798      	blx	r3
	printf("update_boot_status: page_to_write: %d\r\n", page_to_write);
    160e:	2398      	movs	r3, #152	; 0x98
    1610:	005b      	lsls	r3, r3, #1
    1612:	18fb      	adds	r3, r7, r3
    1614:	681a      	ldr	r2, [r3, #0]
    1616:	4b94      	ldr	r3, [pc, #592]	; (1868 <update_boot_status+0x2b0>)
    1618:	0011      	movs	r1, r2
    161a:	0018      	movs	r0, r3
    161c:	4b91      	ldr	r3, [pc, #580]	; (1864 <update_boot_status+0x2ac>)
    161e:	4798      	blx	r3
	uint8_t page_offset = page_to_write - (row_to_erase * NVMCTRL_ROW_PAGES);
    1620:	2398      	movs	r3, #152	; 0x98
    1622:	005b      	lsls	r3, r3, #1
    1624:	18fb      	adds	r3, r7, r3
    1626:	681b      	ldr	r3, [r3, #0]
    1628:	b2d9      	uxtb	r1, r3
    162a:	2396      	movs	r3, #150	; 0x96
    162c:	005b      	lsls	r3, r3, #1
    162e:	18fb      	adds	r3, r7, r3
    1630:	681b      	ldr	r3, [r3, #0]
    1632:	b2db      	uxtb	r3, r3
    1634:	009b      	lsls	r3, r3, #2
    1636:	b2da      	uxtb	r2, r3
    1638:	232c      	movs	r3, #44	; 0x2c
    163a:	33ff      	adds	r3, #255	; 0xff
    163c:	18fb      	adds	r3, r7, r3
    163e:	1a8a      	subs	r2, r1, r2
    1640:	701a      	strb	r2, [r3, #0]
	int row_address = row_to_erase * NVMCTRL_ROW_SIZE;
    1642:	2396      	movs	r3, #150	; 0x96
    1644:	005b      	lsls	r3, r3, #1
    1646:	18fb      	adds	r3, r7, r3
    1648:	681b      	ldr	r3, [r3, #0]
    164a:	021b      	lsls	r3, r3, #8
    164c:	2292      	movs	r2, #146	; 0x92
    164e:	0052      	lsls	r2, r2, #1
    1650:	18ba      	adds	r2, r7, r2
    1652:	6013      	str	r3, [r2, #0]
	printf("update_boot_status: row_address: %d\r\n", row_address);
    1654:	2392      	movs	r3, #146	; 0x92
    1656:	005b      	lsls	r3, r3, #1
    1658:	18fb      	adds	r3, r7, r3
    165a:	681a      	ldr	r2, [r3, #0]
    165c:	4b83      	ldr	r3, [pc, #524]	; (186c <update_boot_status+0x2b4>)
    165e:	0011      	movs	r1, r2
    1660:	0018      	movs	r0, r3
    1662:	4b80      	ldr	r3, [pc, #512]	; (1864 <update_boot_status+0x2ac>)
    1664:	4798      	blx	r3
	printf("update_boot_status: page_offset: %d\r\n", page_offset);
    1666:	232c      	movs	r3, #44	; 0x2c
    1668:	33ff      	adds	r3, #255	; 0xff
    166a:	18fb      	adds	r3, r7, r3
    166c:	781a      	ldrb	r2, [r3, #0]
    166e:	4b80      	ldr	r3, [pc, #512]	; (1870 <update_boot_status+0x2b8>)
    1670:	0011      	movs	r1, r2
    1672:	0018      	movs	r0, r3
    1674:	4b7b      	ldr	r3, [pc, #492]	; (1864 <update_boot_status+0x2ac>)
    1676:	4798      	blx	r3
	uint8_t row_buffer[NVMCTRL_ROW_SIZE];
	enum status_code read_nvm_code;
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    1678:	2300      	movs	r3, #0
    167a:	229e      	movs	r2, #158	; 0x9e
    167c:	0052      	lsls	r2, r2, #1
    167e:	18ba      	adds	r2, r7, r2
    1680:	6013      	str	r3, [r2, #0]
    1682:	e031      	b.n	16e8 <update_boot_status+0x130>
		int offset = i * NVMCTRL_PAGE_SIZE;
    1684:	239e      	movs	r3, #158	; 0x9e
    1686:	005b      	lsls	r3, r3, #1
    1688:	18fb      	adds	r3, r7, r3
    168a:	681b      	ldr	r3, [r3, #0]
    168c:	019b      	lsls	r3, r3, #6
    168e:	2290      	movs	r2, #144	; 0x90
    1690:	0052      	lsls	r2, r2, #1
    1692:	18ba      	adds	r2, r7, r2
    1694:	6013      	str	r3, [r2, #0]
		do
			read_nvm_code = nvm_read_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
    1696:	2392      	movs	r3, #146	; 0x92
    1698:	005b      	lsls	r3, r3, #1
    169a:	18fb      	adds	r3, r7, r3
    169c:	681a      	ldr	r2, [r3, #0]
    169e:	2390      	movs	r3, #144	; 0x90
    16a0:	005b      	lsls	r3, r3, #1
    16a2:	18fb      	adds	r3, r7, r3
    16a4:	681b      	ldr	r3, [r3, #0]
    16a6:	18d3      	adds	r3, r2, r3
    16a8:	0018      	movs	r0, r3
    16aa:	2390      	movs	r3, #144	; 0x90
    16ac:	005b      	lsls	r3, r3, #1
    16ae:	18fb      	adds	r3, r7, r3
    16b0:	681b      	ldr	r3, [r3, #0]
    16b2:	220c      	movs	r2, #12
    16b4:	18ba      	adds	r2, r7, r2
    16b6:	18d3      	adds	r3, r2, r3
    16b8:	2220      	movs	r2, #32
    16ba:	32ff      	adds	r2, #255	; 0xff
    16bc:	18bc      	adds	r4, r7, r2
    16be:	2240      	movs	r2, #64	; 0x40
    16c0:	0019      	movs	r1, r3
    16c2:	4b6c      	ldr	r3, [pc, #432]	; (1874 <update_boot_status+0x2bc>)
    16c4:	4798      	blx	r3
    16c6:	0003      	movs	r3, r0
    16c8:	7023      	strb	r3, [r4, #0]
		while (STATUS_OK != read_nvm_code);
    16ca:	2320      	movs	r3, #32
    16cc:	33ff      	adds	r3, #255	; 0xff
    16ce:	18fb      	adds	r3, r7, r3
    16d0:	781b      	ldrb	r3, [r3, #0]
    16d2:	2b00      	cmp	r3, #0
    16d4:	d1df      	bne.n	1696 <update_boot_status+0xde>
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    16d6:	239e      	movs	r3, #158	; 0x9e
    16d8:	005b      	lsls	r3, r3, #1
    16da:	18fb      	adds	r3, r7, r3
    16dc:	681b      	ldr	r3, [r3, #0]
    16de:	3301      	adds	r3, #1
    16e0:	229e      	movs	r2, #158	; 0x9e
    16e2:	0052      	lsls	r2, r2, #1
    16e4:	18ba      	adds	r2, r7, r2
    16e6:	6013      	str	r3, [r2, #0]
    16e8:	239e      	movs	r3, #158	; 0x9e
    16ea:	005b      	lsls	r3, r3, #1
    16ec:	18fb      	adds	r3, r7, r3
    16ee:	681b      	ldr	r3, [r3, #0]
    16f0:	2b03      	cmp	r3, #3
    16f2:	ddc7      	ble.n	1684 <update_boot_status+0xcc>
	}
	printf("row: %04x\r\n", row_buffer);
    16f4:	230c      	movs	r3, #12
    16f6:	18fa      	adds	r2, r7, r3
    16f8:	4b5f      	ldr	r3, [pc, #380]	; (1878 <update_boot_status+0x2c0>)
    16fa:	0011      	movs	r1, r2
    16fc:	0018      	movs	r0, r3
    16fe:	4b59      	ldr	r3, [pc, #356]	; (1864 <update_boot_status+0x2ac>)
    1700:	4798      	blx	r3
	do
		read_nvm_code = nvm_erase_row(row_address);
    1702:	2392      	movs	r3, #146	; 0x92
    1704:	005b      	lsls	r3, r3, #1
    1706:	18fb      	adds	r3, r7, r3
    1708:	681b      	ldr	r3, [r3, #0]
    170a:	2220      	movs	r2, #32
    170c:	32ff      	adds	r2, #255	; 0xff
    170e:	18bc      	adds	r4, r7, r2
    1710:	0018      	movs	r0, r3
    1712:	4b5a      	ldr	r3, [pc, #360]	; (187c <update_boot_status+0x2c4>)
    1714:	4798      	blx	r3
    1716:	0003      	movs	r3, r0
    1718:	7023      	strb	r3, [r4, #0]
	while (STATUS_OK != read_nvm_code);
    171a:	2320      	movs	r3, #32
    171c:	33ff      	adds	r3, #255	; 0xff
    171e:	18fb      	adds	r3, r7, r3
    1720:	781b      	ldrb	r3, [r3, #0]
    1722:	2b00      	cmp	r3, #0
    1724:	d1ed      	bne.n	1702 <update_boot_status+0x14a>

	fw_status_t write_boot;
	memcpy(&write_boot, row_buffer + page_offset * NVMCTRL_PAGE_SIZE, sizeof(fw_status_t));
    1726:	232c      	movs	r3, #44	; 0x2c
    1728:	33ff      	adds	r3, #255	; 0xff
    172a:	18fb      	adds	r3, r7, r3
    172c:	781b      	ldrb	r3, [r3, #0]
    172e:	019b      	lsls	r3, r3, #6
    1730:	001a      	movs	r2, r3
    1732:	230c      	movs	r3, #12
    1734:	18fb      	adds	r3, r7, r3
    1736:	1899      	adds	r1, r3, r2
    1738:	1d3b      	adds	r3, r7, #4
    173a:	2208      	movs	r2, #8
    173c:	0018      	movs	r0, r3
    173e:	4b50      	ldr	r3, [pc, #320]	; (1880 <update_boot_status+0x2c8>)
    1740:	4798      	blx	r3
	write_boot.new_image_ready = 1;
    1742:	4b50      	ldr	r3, [pc, #320]	; (1884 <update_boot_status+0x2cc>)
    1744:	22a0      	movs	r2, #160	; 0xa0
    1746:	0052      	lsls	r2, r2, #1
    1748:	4694      	mov	ip, r2
    174a:	44bc      	add	ip, r7
    174c:	4463      	add	r3, ip
    174e:	2201      	movs	r2, #1
    1750:	70da      	strb	r2, [r3, #3]
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[0]);
    1752:	4b4c      	ldr	r3, [pc, #304]	; (1884 <update_boot_status+0x2cc>)
    1754:	22a0      	movs	r2, #160	; 0xa0
    1756:	0052      	lsls	r2, r2, #1
    1758:	4694      	mov	ip, r2
    175a:	44bc      	add	ip, r7
    175c:	4463      	add	r3, ip
    175e:	781b      	ldrb	r3, [r3, #0]
    1760:	001a      	movs	r2, r3
    1762:	4b49      	ldr	r3, [pc, #292]	; (1888 <update_boot_status+0x2d0>)
    1764:	0011      	movs	r1, r2
    1766:	0018      	movs	r0, r3
    1768:	4b3e      	ldr	r3, [pc, #248]	; (1864 <update_boot_status+0x2ac>)
    176a:	4798      	blx	r3
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[1]);
    176c:	4b45      	ldr	r3, [pc, #276]	; (1884 <update_boot_status+0x2cc>)
    176e:	22a0      	movs	r2, #160	; 0xa0
    1770:	0052      	lsls	r2, r2, #1
    1772:	4694      	mov	ip, r2
    1774:	44bc      	add	ip, r7
    1776:	4463      	add	r3, ip
    1778:	785b      	ldrb	r3, [r3, #1]
    177a:	001a      	movs	r2, r3
    177c:	4b42      	ldr	r3, [pc, #264]	; (1888 <update_boot_status+0x2d0>)
    177e:	0011      	movs	r1, r2
    1780:	0018      	movs	r0, r3
    1782:	4b38      	ldr	r3, [pc, #224]	; (1864 <update_boot_status+0x2ac>)
    1784:	4798      	blx	r3
	printf("update_boot_status write_boot.signature: %02x\r\n", write_boot.signature[2]);
    1786:	4b3f      	ldr	r3, [pc, #252]	; (1884 <update_boot_status+0x2cc>)
    1788:	22a0      	movs	r2, #160	; 0xa0
    178a:	0052      	lsls	r2, r2, #1
    178c:	4694      	mov	ip, r2
    178e:	44bc      	add	ip, r7
    1790:	4463      	add	r3, ip
    1792:	789b      	ldrb	r3, [r3, #2]
    1794:	001a      	movs	r2, r3
    1796:	4b3c      	ldr	r3, [pc, #240]	; (1888 <update_boot_status+0x2d0>)
    1798:	0011      	movs	r1, r2
    179a:	0018      	movs	r0, r3
    179c:	4b31      	ldr	r3, [pc, #196]	; (1864 <update_boot_status+0x2ac>)
    179e:	4798      	blx	r3
	memcpy(row_buffer + (page_offset * NVMCTRL_PAGE_SIZE), &write_boot, sizeof(fw_status_t));
    17a0:	232c      	movs	r3, #44	; 0x2c
    17a2:	33ff      	adds	r3, #255	; 0xff
    17a4:	18fb      	adds	r3, r7, r3
    17a6:	781b      	ldrb	r3, [r3, #0]
    17a8:	019b      	lsls	r3, r3, #6
    17aa:	001a      	movs	r2, r3
    17ac:	230c      	movs	r3, #12
    17ae:	18fb      	adds	r3, r7, r3
    17b0:	189b      	adds	r3, r3, r2
    17b2:	1d39      	adds	r1, r7, #4
    17b4:	2208      	movs	r2, #8
    17b6:	0018      	movs	r0, r3
    17b8:	4b31      	ldr	r3, [pc, #196]	; (1880 <update_boot_status+0x2c8>)
    17ba:	4798      	blx	r3

	memcpy(row_buffer + (page_offset * NVMCTRL_PAGE_SIZE), &write_boot, sizeof(fw_status_t));
    17bc:	232c      	movs	r3, #44	; 0x2c
    17be:	33ff      	adds	r3, #255	; 0xff
    17c0:	18fb      	adds	r3, r7, r3
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	019b      	lsls	r3, r3, #6
    17c6:	001a      	movs	r2, r3
    17c8:	230c      	movs	r3, #12
    17ca:	18fb      	adds	r3, r7, r3
    17cc:	189b      	adds	r3, r3, r2
    17ce:	1d39      	adds	r1, r7, #4
    17d0:	2208      	movs	r2, #8
    17d2:	0018      	movs	r0, r3
    17d4:	4b2a      	ldr	r3, [pc, #168]	; (1880 <update_boot_status+0x2c8>)
    17d6:	4798      	blx	r3
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    17d8:	2300      	movs	r3, #0
    17da:	229c      	movs	r2, #156	; 0x9c
    17dc:	0052      	lsls	r2, r2, #1
    17de:	18ba      	adds	r2, r7, r2
    17e0:	6013      	str	r3, [r2, #0]
    17e2:	e031      	b.n	1848 <update_boot_status+0x290>
		int offset = i * NVMCTRL_PAGE_SIZE;
    17e4:	239c      	movs	r3, #156	; 0x9c
    17e6:	005b      	lsls	r3, r3, #1
    17e8:	18fb      	adds	r3, r7, r3
    17ea:	681b      	ldr	r3, [r3, #0]
    17ec:	019b      	lsls	r3, r3, #6
    17ee:	228c      	movs	r2, #140	; 0x8c
    17f0:	0052      	lsls	r2, r2, #1
    17f2:	18ba      	adds	r2, r7, r2
    17f4:	6013      	str	r3, [r2, #0]
		do
			read_nvm_code = nvm_write_buffer(row_address + offset, row_buffer + offset, NVMCTRL_PAGE_SIZE);
    17f6:	2392      	movs	r3, #146	; 0x92
    17f8:	005b      	lsls	r3, r3, #1
    17fa:	18fb      	adds	r3, r7, r3
    17fc:	681a      	ldr	r2, [r3, #0]
    17fe:	238c      	movs	r3, #140	; 0x8c
    1800:	005b      	lsls	r3, r3, #1
    1802:	18fb      	adds	r3, r7, r3
    1804:	681b      	ldr	r3, [r3, #0]
    1806:	18d3      	adds	r3, r2, r3
    1808:	0018      	movs	r0, r3
    180a:	238c      	movs	r3, #140	; 0x8c
    180c:	005b      	lsls	r3, r3, #1
    180e:	18fb      	adds	r3, r7, r3
    1810:	681b      	ldr	r3, [r3, #0]
    1812:	220c      	movs	r2, #12
    1814:	18ba      	adds	r2, r7, r2
    1816:	18d3      	adds	r3, r2, r3
    1818:	2220      	movs	r2, #32
    181a:	32ff      	adds	r2, #255	; 0xff
    181c:	18bc      	adds	r4, r7, r2
    181e:	2240      	movs	r2, #64	; 0x40
    1820:	0019      	movs	r1, r3
    1822:	4b1a      	ldr	r3, [pc, #104]	; (188c <update_boot_status+0x2d4>)
    1824:	4798      	blx	r3
    1826:	0003      	movs	r3, r0
    1828:	7023      	strb	r3, [r4, #0]
		while (STATUS_OK != read_nvm_code);
    182a:	2320      	movs	r3, #32
    182c:	33ff      	adds	r3, #255	; 0xff
    182e:	18fb      	adds	r3, r7, r3
    1830:	781b      	ldrb	r3, [r3, #0]
    1832:	2b00      	cmp	r3, #0
    1834:	d1df      	bne.n	17f6 <update_boot_status+0x23e>
	for (int i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    1836:	239c      	movs	r3, #156	; 0x9c
    1838:	005b      	lsls	r3, r3, #1
    183a:	18fb      	adds	r3, r7, r3
    183c:	681b      	ldr	r3, [r3, #0]
    183e:	3301      	adds	r3, #1
    1840:	229c      	movs	r2, #156	; 0x9c
    1842:	0052      	lsls	r2, r2, #1
    1844:	18ba      	adds	r2, r7, r2
    1846:	6013      	str	r3, [r2, #0]
    1848:	239c      	movs	r3, #156	; 0x9c
    184a:	005b      	lsls	r3, r3, #1
    184c:	18fb      	adds	r3, r7, r3
    184e:	681b      	ldr	r3, [r3, #0]
    1850:	2b03      	cmp	r3, #3
    1852:	ddc7      	ble.n	17e4 <update_boot_status+0x22c>
	}
}
    1854:	46c0      	nop			; (mov r8, r8)
    1856:	46bd      	mov	sp, r7
    1858:	b051      	add	sp, #324	; 0x144
    185a:	bd90      	pop	{r4, r7, pc}
    185c:	00009ac9 	.word	0x00009ac9
    1860:	00018bf8 	.word	0x00018bf8
    1864:	00013e4d 	.word	0x00013e4d
    1868:	00018c20 	.word	0x00018c20
    186c:	00018c48 	.word	0x00018c48
    1870:	00018c70 	.word	0x00018c70
    1874:	00009925 	.word	0x00009925
    1878:	00018c98 	.word	0x00018c98
    187c:	00009a21 	.word	0x00009a21
    1880:	000133d5 	.word	0x000133d5
    1884:	fffffec4 	.word	0xfffffec4
    1888:	00018ca4 	.word	0x00018ca4
    188c:	000097d9 	.word	0x000097d9

00001890 <verify_flash>:
 * calculates crc for firmware to ensure flash wrote correctly
 * @param  known_checksum checksum calculated during download
 * @return                true if checksums match
 */
bool verify_flash(crc32_t known_checksum)
{
    1890:	b5b0      	push	{r4, r5, r7, lr}
    1892:	b086      	sub	sp, #24
    1894:	af00      	add	r7, sp, #0
    1896:	6078      	str	r0, [r7, #4]
	//TODO: write this
	crc32_t flash_checksum = 0;
    1898:	2300      	movs	r3, #0
    189a:	60bb      	str	r3, [r7, #8]

	printf("starting seed: %04x\r\n", flash_checksum);
    189c:	68ba      	ldr	r2, [r7, #8]
    189e:	4b3e      	ldr	r3, [pc, #248]	; (1998 <verify_flash+0x108>)
    18a0:	0011      	movs	r1, r2
    18a2:	0018      	movs	r0, r3
    18a4:	4b3d      	ldr	r3, [pc, #244]	; (199c <verify_flash+0x10c>)
    18a6:	4798      	blx	r3
	enum status_code read_status;
	for (int i = 0; i < total_bytes_written / FLASH_ROW_SIZE; i++) {
    18a8:	2300      	movs	r3, #0
    18aa:	617b      	str	r3, [r7, #20]
    18ac:	e039      	b.n	1922 <verify_flash+0x92>
		read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW1_ADDR + (i * FLASH_ROW_SIZE), write_row_buffer, FLASH_ROW_SIZE);
    18ae:	697b      	ldr	r3, [r7, #20]
    18b0:	3320      	adds	r3, #32
    18b2:	021b      	lsls	r3, r3, #8
    18b4:	0019      	movs	r1, r3
    18b6:	2313      	movs	r3, #19
    18b8:	18fc      	adds	r4, r7, r3
    18ba:	2380      	movs	r3, #128	; 0x80
    18bc:	005b      	lsls	r3, r3, #1
    18be:	4a38      	ldr	r2, [pc, #224]	; (19a0 <verify_flash+0x110>)
    18c0:	4838      	ldr	r0, [pc, #224]	; (19a4 <verify_flash+0x114>)
    18c2:	4d39      	ldr	r5, [pc, #228]	; (19a8 <verify_flash+0x118>)
    18c4:	47a8      	blx	r5
    18c6:	0003      	movs	r3, r0
    18c8:	7023      	strb	r3, [r4, #0]
		if (STATUS_OK != read_status) {
    18ca:	2313      	movs	r3, #19
    18cc:	18fb      	adds	r3, r7, r3
    18ce:	781b      	ldrb	r3, [r3, #0]
    18d0:	2b00      	cmp	r3, #0
    18d2:	d009      	beq.n	18e8 <verify_flash+0x58>
			printf("verify_flash: error trying to read external flash. %d", read_status);
    18d4:	2313      	movs	r3, #19
    18d6:	18fb      	adds	r3, r7, r3
    18d8:	781a      	ldrb	r2, [r3, #0]
    18da:	4b34      	ldr	r3, [pc, #208]	; (19ac <verify_flash+0x11c>)
    18dc:	0011      	movs	r1, r2
    18de:	0018      	movs	r0, r3
    18e0:	4b2e      	ldr	r3, [pc, #184]	; (199c <verify_flash+0x10c>)
    18e2:	4798      	blx	r3
			return false;
    18e4:	2300      	movs	r3, #0
    18e6:	e052      	b.n	198e <verify_flash+0xfe>
		}
		//printf("verify_flash [flash_dump]: %d. %s\r\n", i, write_row_buffer);
		if (!flash_checksum)
    18e8:	68bb      	ldr	r3, [r7, #8]
    18ea:	2b00      	cmp	r3, #0
    18ec:	d108      	bne.n	1900 <verify_flash+0x70>
			crc32_calculate(write_row_buffer, FLASH_ROW_SIZE, &flash_checksum);
    18ee:	2308      	movs	r3, #8
    18f0:	18fa      	adds	r2, r7, r3
    18f2:	2380      	movs	r3, #128	; 0x80
    18f4:	0059      	lsls	r1, r3, #1
    18f6:	4b2a      	ldr	r3, [pc, #168]	; (19a0 <verify_flash+0x110>)
    18f8:	0018      	movs	r0, r3
    18fa:	4b2d      	ldr	r3, [pc, #180]	; (19b0 <verify_flash+0x120>)
    18fc:	4798      	blx	r3
    18fe:	e007      	b.n	1910 <verify_flash+0x80>
		else
			crc32_recalculate(write_row_buffer, FLASH_ROW_SIZE, &flash_checksum);
    1900:	2308      	movs	r3, #8
    1902:	18fa      	adds	r2, r7, r3
    1904:	2380      	movs	r3, #128	; 0x80
    1906:	0059      	lsls	r1, r3, #1
    1908:	4b25      	ldr	r3, [pc, #148]	; (19a0 <verify_flash+0x110>)
    190a:	0018      	movs	r0, r3
    190c:	4b29      	ldr	r3, [pc, #164]	; (19b4 <verify_flash+0x124>)
    190e:	4798      	blx	r3
		printf("%d. verify_flash: crc_val: %d\r\n", i, flash_checksum);
    1910:	68ba      	ldr	r2, [r7, #8]
    1912:	6979      	ldr	r1, [r7, #20]
    1914:	4b28      	ldr	r3, [pc, #160]	; (19b8 <verify_flash+0x128>)
    1916:	0018      	movs	r0, r3
    1918:	4b20      	ldr	r3, [pc, #128]	; (199c <verify_flash+0x10c>)
    191a:	4798      	blx	r3
	for (int i = 0; i < total_bytes_written / FLASH_ROW_SIZE; i++) {
    191c:	697b      	ldr	r3, [r7, #20]
    191e:	3301      	adds	r3, #1
    1920:	617b      	str	r3, [r7, #20]
    1922:	4b26      	ldr	r3, [pc, #152]	; (19bc <verify_flash+0x12c>)
    1924:	681b      	ldr	r3, [r3, #0]
    1926:	0a1a      	lsrs	r2, r3, #8
    1928:	697b      	ldr	r3, [r7, #20]
    192a:	429a      	cmp	r2, r3
    192c:	d8bf      	bhi.n	18ae <verify_flash+0x1e>
	}
	int remaining_bytes = total_bytes_written % FLASH_ROW_SIZE;
    192e:	4b23      	ldr	r3, [pc, #140]	; (19bc <verify_flash+0x12c>)
    1930:	681b      	ldr	r3, [r3, #0]
    1932:	001a      	movs	r2, r3
    1934:	23ff      	movs	r3, #255	; 0xff
    1936:	4013      	ands	r3, r2
    1938:	60fb      	str	r3, [r7, #12]
	printf("verify_flash: remaining bytes %d\r\n", remaining_bytes);
    193a:	68fa      	ldr	r2, [r7, #12]
    193c:	4b20      	ldr	r3, [pc, #128]	; (19c0 <verify_flash+0x130>)
    193e:	0011      	movs	r1, r2
    1940:	0018      	movs	r0, r3
    1942:	4b16      	ldr	r3, [pc, #88]	; (199c <verify_flash+0x10c>)
    1944:	4798      	blx	r3
	read_status = at25dfx_chip_read_buffer(&at25dfx_chip, FW1_ADDR + (total_bytes_written - remaining_bytes), write_row_buffer, remaining_bytes);
    1946:	4b1d      	ldr	r3, [pc, #116]	; (19bc <verify_flash+0x12c>)
    1948:	681a      	ldr	r2, [r3, #0]
    194a:	68fb      	ldr	r3, [r7, #12]
    194c:	1ad3      	subs	r3, r2, r3
    194e:	2280      	movs	r2, #128	; 0x80
    1950:	0192      	lsls	r2, r2, #6
    1952:	1899      	adds	r1, r3, r2
    1954:	68fb      	ldr	r3, [r7, #12]
    1956:	b29b      	uxth	r3, r3
    1958:	2213      	movs	r2, #19
    195a:	18bc      	adds	r4, r7, r2
    195c:	4a10      	ldr	r2, [pc, #64]	; (19a0 <verify_flash+0x110>)
    195e:	4811      	ldr	r0, [pc, #68]	; (19a4 <verify_flash+0x114>)
    1960:	4d11      	ldr	r5, [pc, #68]	; (19a8 <verify_flash+0x118>)
    1962:	47a8      	blx	r5
    1964:	0003      	movs	r3, r0
    1966:	7023      	strb	r3, [r4, #0]
	crc32_recalculate(write_row_buffer, remaining_bytes, &flash_checksum);
    1968:	68f9      	ldr	r1, [r7, #12]
    196a:	2308      	movs	r3, #8
    196c:	18fa      	adds	r2, r7, r3
    196e:	4b0c      	ldr	r3, [pc, #48]	; (19a0 <verify_flash+0x110>)
    1970:	0018      	movs	r0, r3
    1972:	4b10      	ldr	r3, [pc, #64]	; (19b4 <verify_flash+0x124>)
    1974:	4798      	blx	r3
	printf("verify_flash: calculated crc32 val: %d\r\n", flash_checksum);
    1976:	68ba      	ldr	r2, [r7, #8]
    1978:	4b12      	ldr	r3, [pc, #72]	; (19c4 <verify_flash+0x134>)
    197a:	0011      	movs	r1, r2
    197c:	0018      	movs	r0, r3
    197e:	4b07      	ldr	r3, [pc, #28]	; (199c <verify_flash+0x10c>)
    1980:	4798      	blx	r3
	return flash_checksum == known_checksum;
    1982:	68ba      	ldr	r2, [r7, #8]
    1984:	687b      	ldr	r3, [r7, #4]
    1986:	1ad3      	subs	r3, r2, r3
    1988:	425a      	negs	r2, r3
    198a:	4153      	adcs	r3, r2
    198c:	b2db      	uxtb	r3, r3
}
    198e:	0018      	movs	r0, r3
    1990:	46bd      	mov	sp, r7
    1992:	b006      	add	sp, #24
    1994:	bdb0      	pop	{r4, r5, r7, pc}
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	00018cd4 	.word	0x00018cd4
    199c:	00013e4d 	.word	0x00013e4d
    19a0:	200004b0 	.word	0x200004b0
    19a4:	2000031c 	.word	0x2000031c
    19a8:	00002eb1 	.word	0x00002eb1
    19ac:	00018cec 	.word	0x00018cec
    19b0:	000012cd 	.word	0x000012cd
    19b4:	00008e6d 	.word	0x00008e6d
    19b8:	00018d24 	.word	0x00018d24
    19bc:	20000318 	.word	0x20000318
    19c0:	00018d44 	.word	0x00018d44
    19c4:	00018d68 	.word	0x00018d68

000019c8 <erase_firmware_in_flash>:
/**
 * erase given firmware in flash Memory
 * @param firmware_starter_address starting address of firmware
 */
static void erase_firmware_in_flash(uint32_t firmware_starter_address)
{
    19c8:	b590      	push	{r4, r7, lr}
    19ca:	b085      	sub	sp, #20
    19cc:	af00      	add	r7, sp, #0
    19ce:	6078      	str	r0, [r7, #4]
	if (firmware_starter_address == FW1_ADDR)
    19d0:	687a      	ldr	r2, [r7, #4]
    19d2:	2380      	movs	r3, #128	; 0x80
    19d4:	019b      	lsls	r3, r3, #6
    19d6:	429a      	cmp	r2, r3
    19d8:	d102      	bne.n	19e0 <erase_firmware_in_flash+0x18>
		firmware_starter_address = FW1_ERASE_ADDR;
    19da:	2300      	movs	r3, #0
    19dc:	607b      	str	r3, [r7, #4]
    19de:	e007      	b.n	19f0 <erase_firmware_in_flash+0x28>
	else if (firmware_starter_address == FW2_ADDR)
    19e0:	687a      	ldr	r2, [r7, #4]
    19e2:	2382      	movs	r3, #130	; 0x82
    19e4:	02db      	lsls	r3, r3, #11
    19e6:	429a      	cmp	r2, r3
    19e8:	d000      	beq.n	19ec <erase_firmware_in_flash+0x24>
    19ea:	e16b      	b.n	1cc4 <erase_firmware_in_flash+0x2fc>
		firmware_starter_address = FW2_ERASE_ADDR;
    19ec:	4bb7      	ldr	r3, [pc, #732]	; (1ccc <erase_firmware_in_flash+0x304>)
    19ee:	607b      	str	r3, [r7, #4]
	else
		//TODO: Throw error
		return;
	printf("FW1_ERASE_ADDR: %d\r\n", firmware_starter_address);
    19f0:	687a      	ldr	r2, [r7, #4]
    19f2:	4bb7      	ldr	r3, [pc, #732]	; (1cd0 <erase_firmware_in_flash+0x308>)
    19f4:	0011      	movs	r1, r2
    19f6:	0018      	movs	r0, r3
    19f8:	4bb6      	ldr	r3, [pc, #728]	; (1cd4 <erase_firmware_in_flash+0x30c>)
    19fa:	4798      	blx	r3
	//Clear flash for max firmware size here
	at25dfx_chip_wake(&at25dfx_chip);
    19fc:	4bb6      	ldr	r3, [pc, #728]	; (1cd8 <erase_firmware_in_flash+0x310>)
    19fe:	0018      	movs	r0, r3
    1a00:	4bb6      	ldr	r3, [pc, #728]	; (1cdc <erase_firmware_in_flash+0x314>)
    1a02:	4798      	blx	r3

	//check if chip is there
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    1a04:	4bb4      	ldr	r3, [pc, #720]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1a06:	0018      	movs	r0, r3
    1a08:	4bb5      	ldr	r3, [pc, #724]	; (1ce0 <erase_firmware_in_flash+0x318>)
    1a0a:	4798      	blx	r3
    1a0c:	1e03      	subs	r3, r0, #0
    1a0e:	d004      	beq.n	1a1a <erase_firmware_in_flash+0x52>
		printf("store_file_packet: No flash chip.\r\n");
    1a10:	4bb4      	ldr	r3, [pc, #720]	; (1ce4 <erase_firmware_in_flash+0x31c>)
    1a12:	0018      	movs	r0, r3
    1a14:	4bb4      	ldr	r3, [pc, #720]	; (1ce8 <erase_firmware_in_flash+0x320>)
    1a16:	4798      	blx	r3
		return;
    1a18:	e155      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
	}
	//max fw size is ~252k = 3x 64kb sectors 1x 32kb sector 7x4kb sectors
	//disable protection
	enum status_code status_val;
	//for (int i = 0; i < FW_MAX_SIZE / SIXTY_FOUR_KB; i++) {
	status_val = at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
    1a1a:	230f      	movs	r3, #15
    1a1c:	18fc      	adds	r4, r7, r3
    1a1e:	4bae      	ldr	r3, [pc, #696]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1a20:	2100      	movs	r1, #0
    1a22:	0018      	movs	r0, r3
    1a24:	4bb1      	ldr	r3, [pc, #708]	; (1cec <erase_firmware_in_flash+0x324>)
    1a26:	4798      	blx	r3
    1a28:	0003      	movs	r3, r0
    1a2a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1a2c:	230f      	movs	r3, #15
    1a2e:	18fb      	adds	r3, r7, r3
    1a30:	781b      	ldrb	r3, [r3, #0]
    1a32:	2b00      	cmp	r3, #0
    1a34:	d009      	beq.n	1a4a <erase_firmware_in_flash+0x82>
		add_state(CANCELED);
    1a36:	2020      	movs	r0, #32
    1a38:	4bad      	ldr	r3, [pc, #692]	; (1cf0 <erase_firmware_in_flash+0x328>)
    1a3a:	4798      	blx	r3
		printf("store_file_packet: error clearing sector protect at address %d \r\n", SIXTY_FOUR_KB);
    1a3c:	4aad      	ldr	r2, [pc, #692]	; (1cf4 <erase_firmware_in_flash+0x32c>)
    1a3e:	4bae      	ldr	r3, [pc, #696]	; (1cf8 <erase_firmware_in_flash+0x330>)
    1a40:	0011      	movs	r1, r2
    1a42:	0018      	movs	r0, r3
    1a44:	4ba3      	ldr	r3, [pc, #652]	; (1cd4 <erase_firmware_in_flash+0x30c>)
    1a46:	4798      	blx	r3
		return;
    1a48:	e13d      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
	}
	//}
	//erase block (sets to FF's)
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address, AT25DFX_BLOCK_SIZE_64KB);
    1a4a:	230f      	movs	r3, #15
    1a4c:	18fc      	adds	r4, r7, r3
    1a4e:	6879      	ldr	r1, [r7, #4]
    1a50:	4ba1      	ldr	r3, [pc, #644]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1a52:	2202      	movs	r2, #2
    1a54:	0018      	movs	r0, r3
    1a56:	4ba9      	ldr	r3, [pc, #676]	; (1cfc <erase_firmware_in_flash+0x334>)
    1a58:	4798      	blx	r3
    1a5a:	0003      	movs	r3, r0
    1a5c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1a5e:	230f      	movs	r3, #15
    1a60:	18fb      	adds	r3, r7, r3
    1a62:	781b      	ldrb	r3, [r3, #0]
    1a64:	2b00      	cmp	r3, #0
    1a66:	d009      	beq.n	1a7c <erase_firmware_in_flash+0xb4>
		add_state(CANCELED);
    1a68:	2020      	movs	r0, #32
    1a6a:	4ba1      	ldr	r3, [pc, #644]	; (1cf0 <erase_firmware_in_flash+0x328>)
    1a6c:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address);
    1a6e:	687a      	ldr	r2, [r7, #4]
    1a70:	4ba3      	ldr	r3, [pc, #652]	; (1d00 <erase_firmware_in_flash+0x338>)
    1a72:	0011      	movs	r1, r2
    1a74:	0018      	movs	r0, r3
    1a76:	4b97      	ldr	r3, [pc, #604]	; (1cd4 <erase_firmware_in_flash+0x30c>)
    1a78:	4798      	blx	r3
		return;
    1a7a:	e124      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 1), AT25DFX_BLOCK_SIZE_64KB);
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	4a9d      	ldr	r2, [pc, #628]	; (1cf4 <erase_firmware_in_flash+0x32c>)
    1a80:	1899      	adds	r1, r3, r2
    1a82:	230f      	movs	r3, #15
    1a84:	18fc      	adds	r4, r7, r3
    1a86:	4b94      	ldr	r3, [pc, #592]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1a88:	2202      	movs	r2, #2
    1a8a:	0018      	movs	r0, r3
    1a8c:	4b9b      	ldr	r3, [pc, #620]	; (1cfc <erase_firmware_in_flash+0x334>)
    1a8e:	4798      	blx	r3
    1a90:	0003      	movs	r3, r0
    1a92:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1a94:	230f      	movs	r3, #15
    1a96:	18fb      	adds	r3, r7, r3
    1a98:	781b      	ldrb	r3, [r3, #0]
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d008      	beq.n	1ab0 <erase_firmware_in_flash+0xe8>
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 1));
    1a9e:	687b      	ldr	r3, [r7, #4]
    1aa0:	4a94      	ldr	r2, [pc, #592]	; (1cf4 <erase_firmware_in_flash+0x32c>)
    1aa2:	189a      	adds	r2, r3, r2
    1aa4:	4b96      	ldr	r3, [pc, #600]	; (1d00 <erase_firmware_in_flash+0x338>)
    1aa6:	0011      	movs	r1, r2
    1aa8:	0018      	movs	r0, r3
    1aaa:	4b8a      	ldr	r3, [pc, #552]	; (1cd4 <erase_firmware_in_flash+0x30c>)
    1aac:	4798      	blx	r3
		return;
    1aae:	e10a      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2), AT25DFX_BLOCK_SIZE_64KB);
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	4a94      	ldr	r2, [pc, #592]	; (1d04 <erase_firmware_in_flash+0x33c>)
    1ab4:	1899      	adds	r1, r3, r2
    1ab6:	230f      	movs	r3, #15
    1ab8:	18fc      	adds	r4, r7, r3
    1aba:	4b87      	ldr	r3, [pc, #540]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1abc:	2202      	movs	r2, #2
    1abe:	0018      	movs	r0, r3
    1ac0:	4b8e      	ldr	r3, [pc, #568]	; (1cfc <erase_firmware_in_flash+0x334>)
    1ac2:	4798      	blx	r3
    1ac4:	0003      	movs	r3, r0
    1ac6:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1ac8:	230f      	movs	r3, #15
    1aca:	18fb      	adds	r3, r7, r3
    1acc:	781b      	ldrb	r3, [r3, #0]
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d00b      	beq.n	1aea <erase_firmware_in_flash+0x122>
		add_state(CANCELED);
    1ad2:	2020      	movs	r0, #32
    1ad4:	4b86      	ldr	r3, [pc, #536]	; (1cf0 <erase_firmware_in_flash+0x328>)
    1ad6:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2));
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	4a8a      	ldr	r2, [pc, #552]	; (1d04 <erase_firmware_in_flash+0x33c>)
    1adc:	189a      	adds	r2, r3, r2
    1ade:	4b88      	ldr	r3, [pc, #544]	; (1d00 <erase_firmware_in_flash+0x338>)
    1ae0:	0011      	movs	r1, r2
    1ae2:	0018      	movs	r0, r3
    1ae4:	4b7b      	ldr	r3, [pc, #492]	; (1cd4 <erase_firmware_in_flash+0x30c>)
    1ae6:	4798      	blx	r3
		return;
    1ae8:	e0ed      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 3) + (THIRTY_TWO_KB * 0), AT25DFX_BLOCK_SIZE_32KB);
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	4a86      	ldr	r2, [pc, #536]	; (1d08 <erase_firmware_in_flash+0x340>)
    1aee:	1899      	adds	r1, r3, r2
    1af0:	230f      	movs	r3, #15
    1af2:	18fc      	adds	r4, r7, r3
    1af4:	4b78      	ldr	r3, [pc, #480]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1af6:	2201      	movs	r2, #1
    1af8:	0018      	movs	r0, r3
    1afa:	4b80      	ldr	r3, [pc, #512]	; (1cfc <erase_firmware_in_flash+0x334>)
    1afc:	4798      	blx	r3
    1afe:	0003      	movs	r3, r0
    1b00:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1b02:	230f      	movs	r3, #15
    1b04:	18fb      	adds	r3, r7, r3
    1b06:	781b      	ldrb	r3, [r3, #0]
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d00b      	beq.n	1b24 <erase_firmware_in_flash+0x15c>
		add_state(CANCELED);
    1b0c:	2020      	movs	r0, #32
    1b0e:	4b78      	ldr	r3, [pc, #480]	; (1cf0 <erase_firmware_in_flash+0x328>)
    1b10:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 3) + (THIRTY_TWO_KB * 0));
    1b12:	687b      	ldr	r3, [r7, #4]
    1b14:	4a7c      	ldr	r2, [pc, #496]	; (1d08 <erase_firmware_in_flash+0x340>)
    1b16:	189a      	adds	r2, r3, r2
    1b18:	4b79      	ldr	r3, [pc, #484]	; (1d00 <erase_firmware_in_flash+0x338>)
    1b1a:	0011      	movs	r1, r2
    1b1c:	0018      	movs	r0, r3
    1b1e:	4b6d      	ldr	r3, [pc, #436]	; (1cd4 <erase_firmware_in_flash+0x30c>)
    1b20:	4798      	blx	r3
		return;
    1b22:	e0d0      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 0), AT25DFX_BLOCK_SIZE_4KB);
    1b24:	687b      	ldr	r3, [r7, #4]
    1b26:	4a79      	ldr	r2, [pc, #484]	; (1d0c <erase_firmware_in_flash+0x344>)
    1b28:	1899      	adds	r1, r3, r2
    1b2a:	230f      	movs	r3, #15
    1b2c:	18fc      	adds	r4, r7, r3
    1b2e:	4b6a      	ldr	r3, [pc, #424]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1b30:	2200      	movs	r2, #0
    1b32:	0018      	movs	r0, r3
    1b34:	4b71      	ldr	r3, [pc, #452]	; (1cfc <erase_firmware_in_flash+0x334>)
    1b36:	4798      	blx	r3
    1b38:	0003      	movs	r3, r0
    1b3a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1b3c:	230f      	movs	r3, #15
    1b3e:	18fb      	adds	r3, r7, r3
    1b40:	781b      	ldrb	r3, [r3, #0]
    1b42:	2b00      	cmp	r3, #0
    1b44:	d00b      	beq.n	1b5e <erase_firmware_in_flash+0x196>
		add_state(CANCELED);
    1b46:	2020      	movs	r0, #32
    1b48:	4b69      	ldr	r3, [pc, #420]	; (1cf0 <erase_firmware_in_flash+0x328>)
    1b4a:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 0));
    1b4c:	687b      	ldr	r3, [r7, #4]
    1b4e:	4a6f      	ldr	r2, [pc, #444]	; (1d0c <erase_firmware_in_flash+0x344>)
    1b50:	189a      	adds	r2, r3, r2
    1b52:	4b6b      	ldr	r3, [pc, #428]	; (1d00 <erase_firmware_in_flash+0x338>)
    1b54:	0011      	movs	r1, r2
    1b56:	0018      	movs	r0, r3
    1b58:	4b5e      	ldr	r3, [pc, #376]	; (1cd4 <erase_firmware_in_flash+0x30c>)
    1b5a:	4798      	blx	r3
		return;
    1b5c:	e0b3      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 1), AT25DFX_BLOCK_SIZE_4KB);
    1b5e:	687b      	ldr	r3, [r7, #4]
    1b60:	4a6b      	ldr	r2, [pc, #428]	; (1d10 <erase_firmware_in_flash+0x348>)
    1b62:	1899      	adds	r1, r3, r2
    1b64:	230f      	movs	r3, #15
    1b66:	18fc      	adds	r4, r7, r3
    1b68:	4b5b      	ldr	r3, [pc, #364]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1b6a:	2200      	movs	r2, #0
    1b6c:	0018      	movs	r0, r3
    1b6e:	4b63      	ldr	r3, [pc, #396]	; (1cfc <erase_firmware_in_flash+0x334>)
    1b70:	4798      	blx	r3
    1b72:	0003      	movs	r3, r0
    1b74:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1b76:	230f      	movs	r3, #15
    1b78:	18fb      	adds	r3, r7, r3
    1b7a:	781b      	ldrb	r3, [r3, #0]
    1b7c:	2b00      	cmp	r3, #0
    1b7e:	d00b      	beq.n	1b98 <erase_firmware_in_flash+0x1d0>
		add_state(CANCELED);
    1b80:	2020      	movs	r0, #32
    1b82:	4b5b      	ldr	r3, [pc, #364]	; (1cf0 <erase_firmware_in_flash+0x328>)
    1b84:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 1));
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	4a61      	ldr	r2, [pc, #388]	; (1d10 <erase_firmware_in_flash+0x348>)
    1b8a:	189a      	adds	r2, r3, r2
    1b8c:	4b5c      	ldr	r3, [pc, #368]	; (1d00 <erase_firmware_in_flash+0x338>)
    1b8e:	0011      	movs	r1, r2
    1b90:	0018      	movs	r0, r3
    1b92:	4b50      	ldr	r3, [pc, #320]	; (1cd4 <erase_firmware_in_flash+0x30c>)
    1b94:	4798      	blx	r3
		return;
    1b96:	e096      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 2), AT25DFX_BLOCK_SIZE_4KB);
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	4a5e      	ldr	r2, [pc, #376]	; (1d14 <erase_firmware_in_flash+0x34c>)
    1b9c:	1899      	adds	r1, r3, r2
    1b9e:	230f      	movs	r3, #15
    1ba0:	18fc      	adds	r4, r7, r3
    1ba2:	4b4d      	ldr	r3, [pc, #308]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1ba4:	2200      	movs	r2, #0
    1ba6:	0018      	movs	r0, r3
    1ba8:	4b54      	ldr	r3, [pc, #336]	; (1cfc <erase_firmware_in_flash+0x334>)
    1baa:	4798      	blx	r3
    1bac:	0003      	movs	r3, r0
    1bae:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1bb0:	230f      	movs	r3, #15
    1bb2:	18fb      	adds	r3, r7, r3
    1bb4:	781b      	ldrb	r3, [r3, #0]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d00b      	beq.n	1bd2 <erase_firmware_in_flash+0x20a>
		add_state(CANCELED);
    1bba:	2020      	movs	r0, #32
    1bbc:	4b4c      	ldr	r3, [pc, #304]	; (1cf0 <erase_firmware_in_flash+0x328>)
    1bbe:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 2));
    1bc0:	687b      	ldr	r3, [r7, #4]
    1bc2:	4a54      	ldr	r2, [pc, #336]	; (1d14 <erase_firmware_in_flash+0x34c>)
    1bc4:	189a      	adds	r2, r3, r2
    1bc6:	4b4e      	ldr	r3, [pc, #312]	; (1d00 <erase_firmware_in_flash+0x338>)
    1bc8:	0011      	movs	r1, r2
    1bca:	0018      	movs	r0, r3
    1bcc:	4b41      	ldr	r3, [pc, #260]	; (1cd4 <erase_firmware_in_flash+0x30c>)
    1bce:	4798      	blx	r3
		return;
    1bd0:	e079      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3), AT25DFX_BLOCK_SIZE_4KB);
    1bd2:	687b      	ldr	r3, [r7, #4]
    1bd4:	4a50      	ldr	r2, [pc, #320]	; (1d18 <erase_firmware_in_flash+0x350>)
    1bd6:	1899      	adds	r1, r3, r2
    1bd8:	230f      	movs	r3, #15
    1bda:	18fc      	adds	r4, r7, r3
    1bdc:	4b3e      	ldr	r3, [pc, #248]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1bde:	2200      	movs	r2, #0
    1be0:	0018      	movs	r0, r3
    1be2:	4b46      	ldr	r3, [pc, #280]	; (1cfc <erase_firmware_in_flash+0x334>)
    1be4:	4798      	blx	r3
    1be6:	0003      	movs	r3, r0
    1be8:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1bea:	230f      	movs	r3, #15
    1bec:	18fb      	adds	r3, r7, r3
    1bee:	781b      	ldrb	r3, [r3, #0]
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d00b      	beq.n	1c0c <erase_firmware_in_flash+0x244>
		add_state(CANCELED);
    1bf4:	2020      	movs	r0, #32
    1bf6:	4b3e      	ldr	r3, [pc, #248]	; (1cf0 <erase_firmware_in_flash+0x328>)
    1bf8:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3));
    1bfa:	687b      	ldr	r3, [r7, #4]
    1bfc:	4a46      	ldr	r2, [pc, #280]	; (1d18 <erase_firmware_in_flash+0x350>)
    1bfe:	189a      	adds	r2, r3, r2
    1c00:	4b3f      	ldr	r3, [pc, #252]	; (1d00 <erase_firmware_in_flash+0x338>)
    1c02:	0011      	movs	r1, r2
    1c04:	0018      	movs	r0, r3
    1c06:	4b33      	ldr	r3, [pc, #204]	; (1cd4 <erase_firmware_in_flash+0x30c>)
    1c08:	4798      	blx	r3
		return;
    1c0a:	e05c      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 4), AT25DFX_BLOCK_SIZE_4KB);
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	4a43      	ldr	r2, [pc, #268]	; (1d1c <erase_firmware_in_flash+0x354>)
    1c10:	1899      	adds	r1, r3, r2
    1c12:	230f      	movs	r3, #15
    1c14:	18fc      	adds	r4, r7, r3
    1c16:	4b30      	ldr	r3, [pc, #192]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1c18:	2200      	movs	r2, #0
    1c1a:	0018      	movs	r0, r3
    1c1c:	4b37      	ldr	r3, [pc, #220]	; (1cfc <erase_firmware_in_flash+0x334>)
    1c1e:	4798      	blx	r3
    1c20:	0003      	movs	r3, r0
    1c22:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1c24:	230f      	movs	r3, #15
    1c26:	18fb      	adds	r3, r7, r3
    1c28:	781b      	ldrb	r3, [r3, #0]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d00b      	beq.n	1c46 <erase_firmware_in_flash+0x27e>
		add_state(CANCELED);
    1c2e:	2020      	movs	r0, #32
    1c30:	4b2f      	ldr	r3, [pc, #188]	; (1cf0 <erase_firmware_in_flash+0x328>)
    1c32:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 4));
    1c34:	687b      	ldr	r3, [r7, #4]
    1c36:	4a39      	ldr	r2, [pc, #228]	; (1d1c <erase_firmware_in_flash+0x354>)
    1c38:	189a      	adds	r2, r3, r2
    1c3a:	4b31      	ldr	r3, [pc, #196]	; (1d00 <erase_firmware_in_flash+0x338>)
    1c3c:	0011      	movs	r1, r2
    1c3e:	0018      	movs	r0, r3
    1c40:	4b24      	ldr	r3, [pc, #144]	; (1cd4 <erase_firmware_in_flash+0x30c>)
    1c42:	4798      	blx	r3
		return;
    1c44:	e03f      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 5), AT25DFX_BLOCK_SIZE_4KB);
    1c46:	687b      	ldr	r3, [r7, #4]
    1c48:	4a35      	ldr	r2, [pc, #212]	; (1d20 <erase_firmware_in_flash+0x358>)
    1c4a:	1899      	adds	r1, r3, r2
    1c4c:	230f      	movs	r3, #15
    1c4e:	18fc      	adds	r4, r7, r3
    1c50:	4b21      	ldr	r3, [pc, #132]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1c52:	2200      	movs	r2, #0
    1c54:	0018      	movs	r0, r3
    1c56:	4b29      	ldr	r3, [pc, #164]	; (1cfc <erase_firmware_in_flash+0x334>)
    1c58:	4798      	blx	r3
    1c5a:	0003      	movs	r3, r0
    1c5c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1c5e:	230f      	movs	r3, #15
    1c60:	18fb      	adds	r3, r7, r3
    1c62:	781b      	ldrb	r3, [r3, #0]
    1c64:	2b00      	cmp	r3, #0
    1c66:	d00b      	beq.n	1c80 <erase_firmware_in_flash+0x2b8>
		add_state(CANCELED);
    1c68:	2020      	movs	r0, #32
    1c6a:	4b21      	ldr	r3, [pc, #132]	; (1cf0 <erase_firmware_in_flash+0x328>)
    1c6c:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 5));
    1c6e:	687b      	ldr	r3, [r7, #4]
    1c70:	4a2b      	ldr	r2, [pc, #172]	; (1d20 <erase_firmware_in_flash+0x358>)
    1c72:	189a      	adds	r2, r3, r2
    1c74:	4b22      	ldr	r3, [pc, #136]	; (1d00 <erase_firmware_in_flash+0x338>)
    1c76:	0011      	movs	r1, r2
    1c78:	0018      	movs	r0, r3
    1c7a:	4b16      	ldr	r3, [pc, #88]	; (1cd4 <erase_firmware_in_flash+0x30c>)
    1c7c:	4798      	blx	r3
		return;
    1c7e:	e022      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
	}
	status_val = at25dfx_chip_erase_block(&at25dfx_chip, firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 6), AT25DFX_BLOCK_SIZE_4KB);
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	4a28      	ldr	r2, [pc, #160]	; (1d24 <erase_firmware_in_flash+0x35c>)
    1c84:	1899      	adds	r1, r3, r2
    1c86:	230f      	movs	r3, #15
    1c88:	18fc      	adds	r4, r7, r3
    1c8a:	4b13      	ldr	r3, [pc, #76]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1c8c:	2200      	movs	r2, #0
    1c8e:	0018      	movs	r0, r3
    1c90:	4b1a      	ldr	r3, [pc, #104]	; (1cfc <erase_firmware_in_flash+0x334>)
    1c92:	4798      	blx	r3
    1c94:	0003      	movs	r3, r0
    1c96:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status_val) {
    1c98:	230f      	movs	r3, #15
    1c9a:	18fb      	adds	r3, r7, r3
    1c9c:	781b      	ldrb	r3, [r3, #0]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d00b      	beq.n	1cba <erase_firmware_in_flash+0x2f2>
		add_state(CANCELED);
    1ca2:	2020      	movs	r0, #32
    1ca4:	4b12      	ldr	r3, [pc, #72]	; (1cf0 <erase_firmware_in_flash+0x328>)
    1ca6:	4798      	blx	r3
		printf("store_file_packet: error erasing sector at address %d \r\n", firmware_starter_address + (SIXTY_FOUR_KB * 2) + (THIRTY_TWO_KB * 1) + (FOUR_KB * 3));
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	4a1b      	ldr	r2, [pc, #108]	; (1d18 <erase_firmware_in_flash+0x350>)
    1cac:	189a      	adds	r2, r3, r2
    1cae:	4b14      	ldr	r3, [pc, #80]	; (1d00 <erase_firmware_in_flash+0x338>)
    1cb0:	0011      	movs	r1, r2
    1cb2:	0018      	movs	r0, r3
    1cb4:	4b07      	ldr	r3, [pc, #28]	; (1cd4 <erase_firmware_in_flash+0x30c>)
    1cb6:	4798      	blx	r3
		return;
    1cb8:	e005      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
	}
	at25dfx_chip_sleep(&at25dfx_chip);
    1cba:	4b07      	ldr	r3, [pc, #28]	; (1cd8 <erase_firmware_in_flash+0x310>)
    1cbc:	0018      	movs	r0, r3
    1cbe:	4b1a      	ldr	r3, [pc, #104]	; (1d28 <erase_firmware_in_flash+0x360>)
    1cc0:	4798      	blx	r3
    1cc2:	e000      	b.n	1cc6 <erase_firmware_in_flash+0x2fe>
		return;
    1cc4:	46c0      	nop			; (mov r8, r8)
}
    1cc6:	46bd      	mov	sp, r7
    1cc8:	b005      	add	sp, #20
    1cca:	bd90      	pop	{r4, r7, pc}
    1ccc:	0003fffc 	.word	0x0003fffc
    1cd0:	00018d94 	.word	0x00018d94
    1cd4:	00013e4d 	.word	0x00013e4d
    1cd8:	2000031c 	.word	0x2000031c
    1cdc:	0000334d 	.word	0x0000334d
    1ce0:	00002e05 	.word	0x00002e05
    1ce4:	00018dac 	.word	0x00018dac
    1ce8:	00013f69 	.word	0x00013f69
    1cec:	0000320d 	.word	0x0000320d
    1cf0:	0000132d 	.word	0x0000132d
    1cf4:	0000ffff 	.word	0x0000ffff
    1cf8:	00018dd0 	.word	0x00018dd0
    1cfc:	00003111 	.word	0x00003111
    1d00:	00018e14 	.word	0x00018e14
    1d04:	0001fffe 	.word	0x0001fffe
    1d08:	0002fffd 	.word	0x0002fffd
    1d0c:	00027ffd 	.word	0x00027ffd
    1d10:	00028ffc 	.word	0x00028ffc
    1d14:	00029ffb 	.word	0x00029ffb
    1d18:	0002affa 	.word	0x0002affa
    1d1c:	0002bff9 	.word	0x0002bff9
    1d20:	0002cff8 	.word	0x0002cff8
    1d24:	0002dff7 	.word	0x0002dff7
    1d28:	000032c1 	.word	0x000032c1

00001d2c <check_set_firmware_metadata>:

//TODO: write documentation on this
static void check_set_firmware_metadata(fw_header_t firmware_header)
{
    1d2c:	b580      	push	{r7, lr}
    1d2e:	b084      	sub	sp, #16
    1d30:	af00      	add	r7, sp, #0
    1d32:	1d3b      	adds	r3, r7, #4
    1d34:	6018      	str	r0, [r3, #0]
    1d36:	6059      	str	r1, [r3, #4]
    1d38:	609a      	str	r2, [r3, #8]
	printf("new firmware version: %d\r\n", firmware_header.fw_version);
    1d3a:	1d3b      	adds	r3, r7, #4
    1d3c:	881b      	ldrh	r3, [r3, #0]
    1d3e:	001a      	movs	r2, r3
    1d40:	4b15      	ldr	r3, [pc, #84]	; (1d98 <check_set_firmware_metadata+0x6c>)
    1d42:	0011      	movs	r1, r2
    1d44:	0018      	movs	r0, r3
    1d46:	4b15      	ldr	r3, [pc, #84]	; (1d9c <check_set_firmware_metadata+0x70>)
    1d48:	4798      	blx	r3
	printf("new firmware checksum: %04x\r\n", firmware_header.checksum);
    1d4a:	1d3b      	adds	r3, r7, #4
    1d4c:	685a      	ldr	r2, [r3, #4]
    1d4e:	4b14      	ldr	r3, [pc, #80]	; (1da0 <check_set_firmware_metadata+0x74>)
    1d50:	0011      	movs	r1, r2
    1d52:	0018      	movs	r0, r3
    1d54:	4b11      	ldr	r3, [pc, #68]	; (1d9c <check_set_firmware_metadata+0x70>)
    1d56:	4798      	blx	r3
	if (firmware_header.fw_version > FW_VERSION) {
    1d58:	1d3b      	adds	r3, r7, #4
    1d5a:	881b      	ldrh	r3, [r3, #0]
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	d011      	beq.n	1d84 <check_set_firmware_metadata+0x58>
		clear_state(GET_REQUESTED);
    1d60:	2004      	movs	r0, #4
    1d62:	4b10      	ldr	r3, [pc, #64]	; (1da4 <check_set_firmware_metadata+0x78>)
    1d64:	4798      	blx	r3
		clear_state(NOT_CHECKED);
    1d66:	2040      	movs	r0, #64	; 0x40
    1d68:	4b0e      	ldr	r3, [pc, #56]	; (1da4 <check_set_firmware_metadata+0x78>)
    1d6a:	4798      	blx	r3
		add_state(UPDATE_AVAILABLE);
    1d6c:	2080      	movs	r0, #128	; 0x80
    1d6e:	4b0e      	ldr	r3, [pc, #56]	; (1da8 <check_set_firmware_metadata+0x7c>)
    1d70:	4798      	blx	r3
		new_firmware_checksum = firmware_header.checksum;
    1d72:	1d3b      	adds	r3, r7, #4
    1d74:	685a      	ldr	r2, [r3, #4]
    1d76:	4b0d      	ldr	r3, [pc, #52]	; (1dac <check_set_firmware_metadata+0x80>)
    1d78:	601a      	str	r2, [r3, #0]
		new_firmware_version = firmware_header.fw_version;
    1d7a:	1d3b      	adds	r3, r7, #4
    1d7c:	881a      	ldrh	r2, [r3, #0]
    1d7e:	4b0c      	ldr	r3, [pc, #48]	; (1db0 <check_set_firmware_metadata+0x84>)
    1d80:	801a      	strh	r2, [r3, #0]
		return;
    1d82:	e006      	b.n	1d92 <check_set_firmware_metadata+0x66>
	} else {
		clear_state(NOT_CHECKED & GET_REQUESTED);
    1d84:	2000      	movs	r0, #0
    1d86:	4b07      	ldr	r3, [pc, #28]	; (1da4 <check_set_firmware_metadata+0x78>)
    1d88:	4798      	blx	r3
		add_state(UPDATE_NOT_AVAILABLE & COMPLETED);
    1d8a:	2000      	movs	r0, #0
    1d8c:	4b06      	ldr	r3, [pc, #24]	; (1da8 <check_set_firmware_metadata+0x7c>)
    1d8e:	4798      	blx	r3
		return;
    1d90:	46c0      	nop			; (mov r8, r8)
	}
}
    1d92:	46bd      	mov	sp, r7
    1d94:	b004      	add	sp, #16
    1d96:	bd80      	pop	{r7, pc}
    1d98:	00018e50 	.word	0x00018e50
    1d9c:	00013e4d 	.word	0x00013e4d
    1da0:	00018e6c 	.word	0x00018e6c
    1da4:	000012f9 	.word	0x000012f9
    1da8:	0000132d 	.word	0x0000132d
    1dac:	20000218 	.word	0x20000218
    1db0:	20000214 	.word	0x20000214

00001db4 <store_file_packet>:
 * puts the given packet in flash memory
 * @param data   data to put in flash memory
 * @param length size in bytes of data
 */
static void store_file_packet(char *data, uint32_t length)
{
    1db4:	b5b0      	push	{r4, r5, r7, lr}
    1db6:	b08a      	sub	sp, #40	; 0x28
    1db8:	af00      	add	r7, sp, #0
    1dba:	6078      	str	r0, [r7, #4]
    1dbc:	6039      	str	r1, [r7, #0]
	if ((data == NULL) || (length < 1)) {
    1dbe:	687b      	ldr	r3, [r7, #4]
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	d002      	beq.n	1dca <store_file_packet+0x16>
    1dc4:	683b      	ldr	r3, [r7, #0]
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d104      	bne.n	1dd4 <store_file_packet+0x20>
		printf("store_file_packet: empty data.\r\n");
    1dca:	4bb2      	ldr	r3, [pc, #712]	; (2094 <STACK_SIZE+0x94>)
    1dcc:	0018      	movs	r0, r3
    1dce:	4bb2      	ldr	r3, [pc, #712]	; (2098 <STACK_SIZE+0x98>)
    1dd0:	4798      	blx	r3
		return;
    1dd2:	e15c      	b.n	208e <STACK_SIZE+0x8e>
	}
	if (is_state_set(NOT_CHECKED)) {
    1dd4:	2040      	movs	r0, #64	; 0x40
    1dd6:	4bb1      	ldr	r3, [pc, #708]	; (209c <STACK_SIZE+0x9c>)
    1dd8:	4798      	blx	r3
    1dda:	1e03      	subs	r3, r0, #0
    1ddc:	d025      	beq.n	1e2a <store_file_packet+0x76>
		if (6 != length) {
    1dde:	683b      	ldr	r3, [r7, #0]
    1de0:	2b06      	cmp	r3, #6
    1de2:	d006      	beq.n	1df2 <store_file_packet+0x3e>
			printf("store_file_packet [UPDATE_CHECK]: file [%d bytes] does not match header [%d bytes] size\r\n", length, sizeof(fw_header_t));
    1de4:	6839      	ldr	r1, [r7, #0]
    1de6:	4bae      	ldr	r3, [pc, #696]	; (20a0 <STACK_SIZE+0xa0>)
    1de8:	220c      	movs	r2, #12
    1dea:	0018      	movs	r0, r3
    1dec:	4bad      	ldr	r3, [pc, #692]	; (20a4 <STACK_SIZE+0xa4>)
    1dee:	4798      	blx	r3
			return;
    1df0:	e14d      	b.n	208e <STACK_SIZE+0x8e>
		}
		fw_header_t firmware_header;
		memcpy(&firmware_header.fw_version, data, 2);
    1df2:	6879      	ldr	r1, [r7, #4]
    1df4:	230c      	movs	r3, #12
    1df6:	18fb      	adds	r3, r7, r3
    1df8:	2202      	movs	r2, #2
    1dfa:	0018      	movs	r0, r3
    1dfc:	4baa      	ldr	r3, [pc, #680]	; (20a8 <STACK_SIZE+0xa8>)
    1dfe:	4798      	blx	r3
		memcpy(&firmware_header.checksum, data + 2, 4);
    1e00:	687b      	ldr	r3, [r7, #4]
    1e02:	1c99      	adds	r1, r3, #2
    1e04:	230c      	movs	r3, #12
    1e06:	18fb      	adds	r3, r7, r3
    1e08:	3304      	adds	r3, #4
    1e0a:	2204      	movs	r2, #4
    1e0c:	0018      	movs	r0, r3
    1e0e:	4ba6      	ldr	r3, [pc, #664]	; (20a8 <STACK_SIZE+0xa8>)
    1e10:	4798      	blx	r3
		check_set_firmware_metadata(firmware_header);
    1e12:	230c      	movs	r3, #12
    1e14:	18fb      	adds	r3, r7, r3
    1e16:	6818      	ldr	r0, [r3, #0]
    1e18:	6859      	ldr	r1, [r3, #4]
    1e1a:	689a      	ldr	r2, [r3, #8]
    1e1c:	4ba3      	ldr	r3, [pc, #652]	; (20ac <STACK_SIZE+0xac>)
    1e1e:	4798      	blx	r3
		add_state(COMPLETED);
    1e20:	2010      	movs	r0, #16
    1e22:	4ba3      	ldr	r3, [pc, #652]	; (20b0 <STACK_SIZE+0xb0>)
    1e24:	4798      	blx	r3
		return;
    1e26:	46c0      	nop			; (mov r8, r8)
    1e28:	e131      	b.n	208e <STACK_SIZE+0x8e>
	} else if (is_state_set(UPDATE_AVAILABLE)) {
    1e2a:	2080      	movs	r0, #128	; 0x80
    1e2c:	4b9b      	ldr	r3, [pc, #620]	; (209c <STACK_SIZE+0x9c>)
    1e2e:	4798      	blx	r3
    1e30:	1e03      	subs	r3, r0, #0
    1e32:	d100      	bne.n	1e36 <store_file_packet+0x82>
    1e34:	e12b      	b.n	208e <STACK_SIZE+0x8e>
		enum status_code status_val;
		//hasn't started downloading yet, first packet. set values
		if (!is_state_set(DOWNLOADING)) {
    1e36:	2008      	movs	r0, #8
    1e38:	4b98      	ldr	r3, [pc, #608]	; (209c <STACK_SIZE+0x9c>)
    1e3a:	4798      	blx	r3
    1e3c:	0003      	movs	r3, r0
    1e3e:	001a      	movs	r2, r3
    1e40:	2301      	movs	r3, #1
    1e42:	4053      	eors	r3, r2
    1e44:	b2db      	uxtb	r3, r3
    1e46:	2b00      	cmp	r3, #0
    1e48:	d01b      	beq.n	1e82 <store_file_packet+0xce>
			erase_firmware_in_flash(FW1_ADDR);
    1e4a:	2380      	movs	r3, #128	; 0x80
    1e4c:	019b      	lsls	r3, r3, #6
    1e4e:	0018      	movs	r0, r3
    1e50:	4b98      	ldr	r3, [pc, #608]	; (20b4 <STACK_SIZE+0xb4>)
    1e52:	4798      	blx	r3
			received_file_size = 0;
    1e54:	4b98      	ldr	r3, [pc, #608]	; (20b8 <STACK_SIZE+0xb8>)
    1e56:	2200      	movs	r2, #0
    1e58:	601a      	str	r2, [r3, #0]
			write_address = FW1_ADDR; //TODO: MAKE GENERIC SO CAN OTA CLI
    1e5a:	4b98      	ldr	r3, [pc, #608]	; (20bc <STACK_SIZE+0xbc>)
    1e5c:	2280      	movs	r2, #128	; 0x80
    1e5e:	0192      	lsls	r2, r2, #6
    1e60:	601a      	str	r2, [r3, #0]
			buffer_cursor = 0;
    1e62:	4b97      	ldr	r3, [pc, #604]	; (20c0 <STACK_SIZE+0xc0>)
    1e64:	2200      	movs	r2, #0
    1e66:	701a      	strb	r2, [r3, #0]
			total_bytes_written = 0;
    1e68:	4b96      	ldr	r3, [pc, #600]	; (20c4 <STACK_SIZE+0xc4>)
    1e6a:	2200      	movs	r2, #0
    1e6c:	601a      	str	r2, [r3, #0]
			printf("starting val: ", crc_val);
    1e6e:	4b96      	ldr	r3, [pc, #600]	; (20c8 <STACK_SIZE+0xc8>)
    1e70:	681a      	ldr	r2, [r3, #0]
    1e72:	4b96      	ldr	r3, [pc, #600]	; (20cc <STACK_SIZE+0xcc>)
    1e74:	0011      	movs	r1, r2
    1e76:	0018      	movs	r0, r3
    1e78:	4b8a      	ldr	r3, [pc, #552]	; (20a4 <STACK_SIZE+0xa4>)
    1e7a:	4798      	blx	r3
			add_state(DOWNLOADING);
    1e7c:	2008      	movs	r0, #8
    1e7e:	4b8c      	ldr	r3, [pc, #560]	; (20b0 <STACK_SIZE+0xb0>)
    1e80:	4798      	blx	r3
		}

		if (data != NULL) {
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	2b00      	cmp	r3, #0
    1e86:	d100      	bne.n	1e8a <store_file_packet+0xd6>
    1e88:	e101      	b.n	208e <STACK_SIZE+0x8e>
			int bytes_written = 0;
    1e8a:	2300      	movs	r3, #0
    1e8c:	627b      	str	r3, [r7, #36]	; 0x24
			//printf("length of packet: %d\r\n", length);
			while (bytes_written < length) {
    1e8e:	e079      	b.n	1f84 <store_file_packet+0x1d0>
				//TOOD: Check to see if should look at bytes_written + 256 or + 255
				uint16_t num_bytes_to_buffer = (bytes_written + FLASH_ROW_SIZE - 1 < length) ? ((FLASH_ROW_SIZE)-buffer_cursor) : length - bytes_written;
    1e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e92:	33ff      	adds	r3, #255	; 0xff
    1e94:	001a      	movs	r2, r3
    1e96:	683b      	ldr	r3, [r7, #0]
    1e98:	429a      	cmp	r2, r3
    1e9a:	d207      	bcs.n	1eac <store_file_packet+0xf8>
    1e9c:	4b88      	ldr	r3, [pc, #544]	; (20c0 <STACK_SIZE+0xc0>)
    1e9e:	781b      	ldrb	r3, [r3, #0]
    1ea0:	b29b      	uxth	r3, r3
    1ea2:	2280      	movs	r2, #128	; 0x80
    1ea4:	0052      	lsls	r2, r2, #1
    1ea6:	1ad3      	subs	r3, r2, r3
    1ea8:	b29b      	uxth	r3, r3
    1eaa:	e005      	b.n	1eb8 <store_file_packet+0x104>
    1eac:	683b      	ldr	r3, [r7, #0]
    1eae:	b29a      	uxth	r2, r3
    1eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1eb2:	b29b      	uxth	r3, r3
    1eb4:	1ad3      	subs	r3, r2, r3
    1eb6:	b29b      	uxth	r3, r3
    1eb8:	2222      	movs	r2, #34	; 0x22
    1eba:	18ba      	adds	r2, r7, r2
    1ebc:	8013      	strh	r3, [r2, #0]
				//printf("store_file_packet: num_bytes_to_buffer %d\r\n", num_bytes_to_buffer);
				unsigned int data_cursor = data + bytes_written;
    1ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ec0:	687a      	ldr	r2, [r7, #4]
    1ec2:	18d3      	adds	r3, r2, r3
    1ec4:	61fb      	str	r3, [r7, #28]
				memcpy(write_row_buffer + buffer_cursor, data_cursor, num_bytes_to_buffer);
    1ec6:	4b7e      	ldr	r3, [pc, #504]	; (20c0 <STACK_SIZE+0xc0>)
    1ec8:	781b      	ldrb	r3, [r3, #0]
    1eca:	001a      	movs	r2, r3
    1ecc:	4b80      	ldr	r3, [pc, #512]	; (20d0 <STACK_SIZE+0xd0>)
    1ece:	18d0      	adds	r0, r2, r3
    1ed0:	69f9      	ldr	r1, [r7, #28]
    1ed2:	2322      	movs	r3, #34	; 0x22
    1ed4:	18fb      	adds	r3, r7, r3
    1ed6:	881b      	ldrh	r3, [r3, #0]
    1ed8:	001a      	movs	r2, r3
    1eda:	4b73      	ldr	r3, [pc, #460]	; (20a8 <STACK_SIZE+0xa8>)
    1edc:	4798      	blx	r3
				bytes_written += num_bytes_to_buffer;
    1ede:	2322      	movs	r3, #34	; 0x22
    1ee0:	18fb      	adds	r3, r7, r3
    1ee2:	881b      	ldrh	r3, [r3, #0]
    1ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1ee6:	18d3      	adds	r3, r2, r3
    1ee8:	627b      	str	r3, [r7, #36]	; 0x24
				buffer_cursor = buffer_cursor + num_bytes_to_buffer;
    1eea:	2322      	movs	r3, #34	; 0x22
    1eec:	18fb      	adds	r3, r7, r3
    1eee:	881b      	ldrh	r3, [r3, #0]
    1ef0:	b2da      	uxtb	r2, r3
    1ef2:	4b73      	ldr	r3, [pc, #460]	; (20c0 <STACK_SIZE+0xc0>)
    1ef4:	781b      	ldrb	r3, [r3, #0]
    1ef6:	18d3      	adds	r3, r2, r3
    1ef8:	b2da      	uxtb	r2, r3
    1efa:	4b71      	ldr	r3, [pc, #452]	; (20c0 <STACK_SIZE+0xc0>)
    1efc:	701a      	strb	r2, [r3, #0]
				if (buffer_cursor == 0)
    1efe:	4b70      	ldr	r3, [pc, #448]	; (20c0 <STACK_SIZE+0xc0>)
    1f00:	781b      	ldrb	r3, [r3, #0]
    1f02:	2b00      	cmp	r3, #0
    1f04:	d102      	bne.n	1f0c <store_file_packet+0x158>
					buffer_cursor = (FLASH_ROW_SIZE - 1);
    1f06:	4b6e      	ldr	r3, [pc, #440]	; (20c0 <STACK_SIZE+0xc0>)
    1f08:	22ff      	movs	r2, #255	; 0xff
    1f0a:	701a      	strb	r2, [r3, #0]
				if (buffer_cursor == (FLASH_ROW_SIZE - 1)) {
    1f0c:	4b6c      	ldr	r3, [pc, #432]	; (20c0 <STACK_SIZE+0xc0>)
    1f0e:	781b      	ldrb	r3, [r3, #0]
    1f10:	2bff      	cmp	r3, #255	; 0xff
    1f12:	d137      	bne.n	1f84 <store_file_packet+0x1d0>
					status_val = at25dfx_chip_write_buffer(&at25dfx_chip, write_address, write_row_buffer, FLASH_ROW_SIZE);
    1f14:	4b69      	ldr	r3, [pc, #420]	; (20bc <STACK_SIZE+0xbc>)
    1f16:	6819      	ldr	r1, [r3, #0]
    1f18:	231b      	movs	r3, #27
    1f1a:	18fc      	adds	r4, r7, r3
    1f1c:	2380      	movs	r3, #128	; 0x80
    1f1e:	005b      	lsls	r3, r3, #1
    1f20:	4a6b      	ldr	r2, [pc, #428]	; (20d0 <STACK_SIZE+0xd0>)
    1f22:	486c      	ldr	r0, [pc, #432]	; (20d4 <STACK_SIZE+0xd4>)
    1f24:	4d6c      	ldr	r5, [pc, #432]	; (20d8 <STACK_SIZE+0xd8>)
    1f26:	47a8      	blx	r5
    1f28:	0003      	movs	r3, r0
    1f2a:	7023      	strb	r3, [r4, #0]
					if (STATUS_OK != status_val) {
    1f2c:	231b      	movs	r3, #27
    1f2e:	18fb      	adds	r3, r7, r3
    1f30:	781b      	ldrb	r3, [r3, #0]
    1f32:	2b00      	cmp	r3, #0
    1f34:	d00a      	beq.n	1f4c <store_file_packet+0x198>
						add_state(CANCELED);
    1f36:	2020      	movs	r0, #32
    1f38:	4b5d      	ldr	r3, [pc, #372]	; (20b0 <STACK_SIZE+0xb0>)
    1f3a:	4798      	blx	r3
						printf("store_file_packet: error writing row at address %d \r\n", write_address);
    1f3c:	4b5f      	ldr	r3, [pc, #380]	; (20bc <STACK_SIZE+0xbc>)
    1f3e:	681a      	ldr	r2, [r3, #0]
    1f40:	4b66      	ldr	r3, [pc, #408]	; (20dc <STACK_SIZE+0xdc>)
    1f42:	0011      	movs	r1, r2
    1f44:	0018      	movs	r0, r3
    1f46:	4b57      	ldr	r3, [pc, #348]	; (20a4 <STACK_SIZE+0xa4>)
    1f48:	4798      	blx	r3
						return;
    1f4a:	e0a0      	b.n	208e <STACK_SIZE+0x8e>
					}
					buffer_cursor = 0;
    1f4c:	4b5c      	ldr	r3, [pc, #368]	; (20c0 <STACK_SIZE+0xc0>)
    1f4e:	2200      	movs	r2, #0
    1f50:	701a      	strb	r2, [r3, #0]
					write_address += FLASH_ROW_SIZE;
    1f52:	4b5a      	ldr	r3, [pc, #360]	; (20bc <STACK_SIZE+0xbc>)
    1f54:	681b      	ldr	r3, [r3, #0]
    1f56:	1c5a      	adds	r2, r3, #1
    1f58:	32ff      	adds	r2, #255	; 0xff
    1f5a:	4b58      	ldr	r3, [pc, #352]	; (20bc <STACK_SIZE+0xbc>)
    1f5c:	601a      	str	r2, [r3, #0]
#if DEBUG_LEVEL >= 3
					if (!global_test_counter)
						hexDump("hexDump", write_row_buffer, 256);

#endif
					if (!crc_val)
    1f5e:	4b5a      	ldr	r3, [pc, #360]	; (20c8 <STACK_SIZE+0xc8>)
    1f60:	681b      	ldr	r3, [r3, #0]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d107      	bne.n	1f76 <store_file_packet+0x1c2>
						crc32_calculate(write_row_buffer, FLASH_ROW_SIZE, &crc_val);
    1f66:	4a58      	ldr	r2, [pc, #352]	; (20c8 <STACK_SIZE+0xc8>)
    1f68:	2380      	movs	r3, #128	; 0x80
    1f6a:	0059      	lsls	r1, r3, #1
    1f6c:	4b58      	ldr	r3, [pc, #352]	; (20d0 <STACK_SIZE+0xd0>)
    1f6e:	0018      	movs	r0, r3
    1f70:	4b5b      	ldr	r3, [pc, #364]	; (20e0 <STACK_SIZE+0xe0>)
    1f72:	4798      	blx	r3
    1f74:	e006      	b.n	1f84 <store_file_packet+0x1d0>
					else
						crc32_recalculate(write_row_buffer, FLASH_ROW_SIZE, &crc_val);
    1f76:	4a54      	ldr	r2, [pc, #336]	; (20c8 <STACK_SIZE+0xc8>)
    1f78:	2380      	movs	r3, #128	; 0x80
    1f7a:	0059      	lsls	r1, r3, #1
    1f7c:	4b54      	ldr	r3, [pc, #336]	; (20d0 <STACK_SIZE+0xd0>)
    1f7e:	0018      	movs	r0, r3
    1f80:	4b58      	ldr	r3, [pc, #352]	; (20e4 <STACK_SIZE+0xe4>)
    1f82:	4798      	blx	r3
			while (bytes_written < length) {
    1f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1f86:	683b      	ldr	r3, [r7, #0]
    1f88:	429a      	cmp	r2, r3
    1f8a:	d200      	bcs.n	1f8e <store_file_packet+0x1da>
    1f8c:	e780      	b.n	1e90 <store_file_packet+0xdc>
					printf("%d. store_file_packet [crc_calc]: %d\r\n", global_test_counter++, crc_val);
#endif
				}
			}

			total_bytes_written += bytes_written;
    1f8e:	4b4d      	ldr	r3, [pc, #308]	; (20c4 <STACK_SIZE+0xc4>)
    1f90:	681a      	ldr	r2, [r3, #0]
    1f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f94:	18d2      	adds	r2, r2, r3
    1f96:	4b4b      	ldr	r3, [pc, #300]	; (20c4 <STACK_SIZE+0xc4>)
    1f98:	601a      	str	r2, [r3, #0]
			received_file_size += length;
    1f9a:	4b47      	ldr	r3, [pc, #284]	; (20b8 <STACK_SIZE+0xb8>)
    1f9c:	681a      	ldr	r2, [r3, #0]
    1f9e:	683b      	ldr	r3, [r7, #0]
    1fa0:	18d2      	adds	r2, r2, r3
    1fa2:	4b45      	ldr	r3, [pc, #276]	; (20b8 <STACK_SIZE+0xb8>)
    1fa4:	601a      	str	r2, [r3, #0]
			printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    1fa6:	4b44      	ldr	r3, [pc, #272]	; (20b8 <STACK_SIZE+0xb8>)
    1fa8:	6819      	ldr	r1, [r3, #0]
    1faa:	4b4f      	ldr	r3, [pc, #316]	; (20e8 <STACK_SIZE+0xe8>)
    1fac:	681a      	ldr	r2, [r3, #0]
    1fae:	4b4f      	ldr	r3, [pc, #316]	; (20ec <STACK_SIZE+0xec>)
    1fb0:	0018      	movs	r0, r3
    1fb2:	4b3c      	ldr	r3, [pc, #240]	; (20a4 <STACK_SIZE+0xa4>)
    1fb4:	4798      	blx	r3
			if (received_file_size >= http_file_size) {
    1fb6:	4b40      	ldr	r3, [pc, #256]	; (20b8 <STACK_SIZE+0xb8>)
    1fb8:	681a      	ldr	r2, [r3, #0]
    1fba:	4b4b      	ldr	r3, [pc, #300]	; (20e8 <STACK_SIZE+0xe8>)
    1fbc:	681b      	ldr	r3, [r3, #0]
    1fbe:	429a      	cmp	r2, r3
    1fc0:	d365      	bcc.n	208e <STACK_SIZE+0x8e>
#if DEBUG_LEVEL >= 2
				printf("store_file_packet: leftover write_buffer %s\r\n", write_row_buffer);
#endif
				status_val = at25dfx_chip_write_buffer(&at25dfx_chip, write_address, write_row_buffer, buffer_cursor);
    1fc2:	4b3e      	ldr	r3, [pc, #248]	; (20bc <STACK_SIZE+0xbc>)
    1fc4:	6819      	ldr	r1, [r3, #0]
    1fc6:	4b3e      	ldr	r3, [pc, #248]	; (20c0 <STACK_SIZE+0xc0>)
    1fc8:	781b      	ldrb	r3, [r3, #0]
    1fca:	b29b      	uxth	r3, r3
    1fcc:	221b      	movs	r2, #27
    1fce:	18bc      	adds	r4, r7, r2
    1fd0:	4a3f      	ldr	r2, [pc, #252]	; (20d0 <STACK_SIZE+0xd0>)
    1fd2:	4840      	ldr	r0, [pc, #256]	; (20d4 <STACK_SIZE+0xd4>)
    1fd4:	4d40      	ldr	r5, [pc, #256]	; (20d8 <STACK_SIZE+0xd8>)
    1fd6:	47a8      	blx	r5
    1fd8:	0003      	movs	r3, r0
    1fda:	7023      	strb	r3, [r4, #0]
				if (STATUS_OK != status_val) {
    1fdc:	231b      	movs	r3, #27
    1fde:	18fb      	adds	r3, r7, r3
    1fe0:	781b      	ldrb	r3, [r3, #0]
    1fe2:	2b00      	cmp	r3, #0
    1fe4:	d00a      	beq.n	1ffc <store_file_packet+0x248>
					add_state(CANCELED);
    1fe6:	2020      	movs	r0, #32
    1fe8:	4b31      	ldr	r3, [pc, #196]	; (20b0 <STACK_SIZE+0xb0>)
    1fea:	4798      	blx	r3
					printf("store_file_packet: error writing row at address %d \r\n", write_address);
    1fec:	4b33      	ldr	r3, [pc, #204]	; (20bc <STACK_SIZE+0xbc>)
    1fee:	681a      	ldr	r2, [r3, #0]
    1ff0:	4b3a      	ldr	r3, [pc, #232]	; (20dc <STACK_SIZE+0xdc>)
    1ff2:	0011      	movs	r1, r2
    1ff4:	0018      	movs	r0, r3
    1ff6:	4b2b      	ldr	r3, [pc, #172]	; (20a4 <STACK_SIZE+0xa4>)
    1ff8:	4798      	blx	r3
					return;
    1ffa:	e048      	b.n	208e <STACK_SIZE+0x8e>
				}
				crc32_recalculate(write_row_buffer, buffer_cursor, &crc_val);
    1ffc:	4b30      	ldr	r3, [pc, #192]	; (20c0 <STACK_SIZE+0xc0>)
    1ffe:	781b      	ldrb	r3, [r3, #0]
    2000:	0019      	movs	r1, r3
    2002:	4a31      	ldr	r2, [pc, #196]	; (20c8 <STACK_SIZE+0xc8>)
    2004:	4b32      	ldr	r3, [pc, #200]	; (20d0 <STACK_SIZE+0xd0>)
    2006:	0018      	movs	r0, r3
    2008:	4b36      	ldr	r3, [pc, #216]	; (20e4 <STACK_SIZE+0xe4>)
    200a:	4798      	blx	r3
#if DEBUG_LEVEL >= 1
				printf("store_file_packet: buffer_cursor size: %d\r\n", buffer_cursor);
				printf("store_file_packet: calculated crc32 val from packets: %d\r\n", crc_val);
#endif
				bytes_written += buffer_cursor;
    200c:	4b2c      	ldr	r3, [pc, #176]	; (20c0 <STACK_SIZE+0xc0>)
    200e:	781b      	ldrb	r3, [r3, #0]
    2010:	001a      	movs	r2, r3
    2012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2014:	189b      	adds	r3, r3, r2
    2016:	627b      	str	r3, [r7, #36]	; 0x24
				printf("store_file_packet: file downloaded successfully.\r\n");
    2018:	4b35      	ldr	r3, [pc, #212]	; (20f0 <STACK_SIZE+0xf0>)
    201a:	0018      	movs	r0, r3
    201c:	4b1e      	ldr	r3, [pc, #120]	; (2098 <STACK_SIZE+0x98>)
    201e:	4798      	blx	r3
#if DEBUG_LEVEL >= 1
				printf("store_file_packet: received_file_size: %d\r\n", received_file_size);
				printf("store_file_packet: num bytes written to flash memory: %d\r\n", total_bytes_written);
#endif
				if (verify_flash(crc_val)) {
    2020:	4b29      	ldr	r3, [pc, #164]	; (20c8 <STACK_SIZE+0xc8>)
    2022:	681b      	ldr	r3, [r3, #0]
    2024:	0018      	movs	r0, r3
    2026:	4b33      	ldr	r3, [pc, #204]	; (20f4 <STACK_SIZE+0xf4>)
    2028:	4798      	blx	r3
    202a:	1e03      	subs	r3, r0, #0
    202c:	d00a      	beq.n	2044 <STACK_SIZE+0x44>
					printf("store_file_packet: flash successfully written with no errors\r\n");
    202e:	4b32      	ldr	r3, [pc, #200]	; (20f8 <STACK_SIZE+0xf8>)
    2030:	0018      	movs	r0, r3
    2032:	4b19      	ldr	r3, [pc, #100]	; (2098 <STACK_SIZE+0x98>)
    2034:	4798      	blx	r3
				} else {
					printf("store_file_packet: flash corrupted.\r\n");
					add_state(CANCELED);
					return;
				}
				if (crc_val != new_firmware_checksum) {
    2036:	4b24      	ldr	r3, [pc, #144]	; (20c8 <STACK_SIZE+0xc8>)
    2038:	681a      	ldr	r2, [r3, #0]
    203a:	4b30      	ldr	r3, [pc, #192]	; (20fc <STACK_SIZE+0xfc>)
    203c:	681b      	ldr	r3, [r3, #0]
    203e:	429a      	cmp	r2, r3
    2040:	d014      	beq.n	206c <STACK_SIZE+0x6c>
    2042:	e007      	b.n	2054 <STACK_SIZE+0x54>
					printf("store_file_packet: flash corrupted.\r\n");
    2044:	4b2e      	ldr	r3, [pc, #184]	; (2100 <STACK_SIZE+0x100>)
    2046:	0018      	movs	r0, r3
    2048:	4b13      	ldr	r3, [pc, #76]	; (2098 <STACK_SIZE+0x98>)
    204a:	4798      	blx	r3
					add_state(CANCELED);
    204c:	2020      	movs	r0, #32
    204e:	4b18      	ldr	r3, [pc, #96]	; (20b0 <STACK_SIZE+0xb0>)
    2050:	4798      	blx	r3
					return;
    2052:	e01c      	b.n	208e <STACK_SIZE+0x8e>
					printf("store_file_packet: file checksums don't match.\r\n Expected checksum %04x\r\n Received checksum %04x\r\n", new_firmware_checksum, crc_val);
    2054:	4b29      	ldr	r3, [pc, #164]	; (20fc <STACK_SIZE+0xfc>)
    2056:	6819      	ldr	r1, [r3, #0]
    2058:	4b1b      	ldr	r3, [pc, #108]	; (20c8 <STACK_SIZE+0xc8>)
    205a:	681a      	ldr	r2, [r3, #0]
    205c:	4b29      	ldr	r3, [pc, #164]	; (2104 <STACK_SIZE+0x104>)
    205e:	0018      	movs	r0, r3
    2060:	4b10      	ldr	r3, [pc, #64]	; (20a4 <STACK_SIZE+0xa4>)
    2062:	4798      	blx	r3
					add_state(CANCELED);
    2064:	2020      	movs	r0, #32
    2066:	4b12      	ldr	r3, [pc, #72]	; (20b0 <STACK_SIZE+0xb0>)
    2068:	4798      	blx	r3
					return;
    206a:	e010      	b.n	208e <STACK_SIZE+0x8e>
				} else {
					update_boot_status();
    206c:	4b26      	ldr	r3, [pc, #152]	; (2108 <STACK_SIZE+0x108>)
    206e:	4798      	blx	r3
					write_firmware_metadata(FW1_ADDR, new_firmware_version, new_firmware_checksum, received_file_size);
    2070:	4b26      	ldr	r3, [pc, #152]	; (210c <STACK_SIZE+0x10c>)
    2072:	8819      	ldrh	r1, [r3, #0]
    2074:	4b21      	ldr	r3, [pc, #132]	; (20fc <STACK_SIZE+0xfc>)
    2076:	681a      	ldr	r2, [r3, #0]
    2078:	4b0f      	ldr	r3, [pc, #60]	; (20b8 <STACK_SIZE+0xb8>)
    207a:	681c      	ldr	r4, [r3, #0]
    207c:	2380      	movs	r3, #128	; 0x80
    207e:	0198      	lsls	r0, r3, #6
    2080:	0023      	movs	r3, r4
    2082:	4c23      	ldr	r4, [pc, #140]	; (2110 <STACK_SIZE+0x110>)
    2084:	47a0      	blx	r4
					add_state(COMPLETED);
    2086:	2010      	movs	r0, #16
    2088:	4b09      	ldr	r3, [pc, #36]	; (20b0 <STACK_SIZE+0xb0>)
    208a:	4798      	blx	r3
				}
				return;
    208c:	46c0      	nop			; (mov r8, r8)
			}
		}
	} else {
		//TODO: shouldn't get here
	}
}
    208e:	46bd      	mov	sp, r7
    2090:	b00a      	add	sp, #40	; 0x28
    2092:	bdb0      	pop	{r4, r5, r7, pc}
    2094:	00018e8c 	.word	0x00018e8c
    2098:	00013f69 	.word	0x00013f69
    209c:	000013ad 	.word	0x000013ad
    20a0:	00018eac 	.word	0x00018eac
    20a4:	00013e4d 	.word	0x00013e4d
    20a8:	000133d5 	.word	0x000133d5
    20ac:	00001d2d 	.word	0x00001d2d
    20b0:	0000132d 	.word	0x0000132d
    20b4:	000019c9 	.word	0x000019c9
    20b8:	20000210 	.word	0x20000210
    20bc:	200004a4 	.word	0x200004a4
    20c0:	200004a8 	.word	0x200004a8
    20c4:	20000318 	.word	0x20000318
    20c8:	20000208 	.word	0x20000208
    20cc:	00018f08 	.word	0x00018f08
    20d0:	200004b0 	.word	0x200004b0
    20d4:	2000031c 	.word	0x2000031c
    20d8:	00002f69 	.word	0x00002f69
    20dc:	00018f18 	.word	0x00018f18
    20e0:	000012cd 	.word	0x000012cd
    20e4:	00008e6d 	.word	0x00008e6d
    20e8:	2000020c 	.word	0x2000020c
    20ec:	00018f50 	.word	0x00018f50
    20f0:	00018f84 	.word	0x00018f84
    20f4:	00001891 	.word	0x00001891
    20f8:	00018fb8 	.word	0x00018fb8
    20fc:	20000218 	.word	0x20000218
    2100:	00018ff8 	.word	0x00018ff8
    2104:	00019020 	.word	0x00019020
    2108:	000015b9 	.word	0x000015b9
    210c:	20000214 	.word	0x20000214
    2110:	000014ed 	.word	0x000014ed

00002114 <http_client_callback>:
 * @param module_inst instantiated http_client struct
 * @param evt         event change (enum)
 * @param data        data from http_client
 */
static void http_client_callback(struct http_client_module *module_inst, int evt, union http_client_data *data)
{
    2114:	b580      	push	{r7, lr}
    2116:	b084      	sub	sp, #16
    2118:	af00      	add	r7, sp, #0
    211a:	60f8      	str	r0, [r7, #12]
    211c:	60b9      	str	r1, [r7, #8]
    211e:	607a      	str	r2, [r7, #4]
	switch (evt) {
    2120:	68bb      	ldr	r3, [r7, #8]
    2122:	2b04      	cmp	r3, #4
    2124:	d85e      	bhi.n	21e4 <http_client_callback+0xd0>
    2126:	68bb      	ldr	r3, [r7, #8]
    2128:	009a      	lsls	r2, r3, #2
    212a:	4b32      	ldr	r3, [pc, #200]	; (21f4 <http_client_callback+0xe0>)
    212c:	18d3      	adds	r3, r2, r3
    212e:	681b      	ldr	r3, [r3, #0]
    2130:	469f      	mov	pc, r3
	case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED: {
		printf("http_client_callback: HTTP client socket connected.\r\n");
    2132:	4b31      	ldr	r3, [pc, #196]	; (21f8 <http_client_callback+0xe4>)
    2134:	0018      	movs	r0, r3
    2136:	4b31      	ldr	r3, [pc, #196]	; (21fc <http_client_callback+0xe8>)
    2138:	4798      	blx	r3
		break;
    213a:	e058      	b.n	21ee <http_client_callback+0xda>
	}
	case HTTP_CLIENT_CALLBACK_REQUESTED: {
		printf("http_client_callback: request completed.\r\n");
    213c:	4b30      	ldr	r3, [pc, #192]	; (2200 <http_client_callback+0xec>)
    213e:	0018      	movs	r0, r3
    2140:	4b2e      	ldr	r3, [pc, #184]	; (21fc <http_client_callback+0xe8>)
    2142:	4798      	blx	r3
		add_state(GET_REQUESTED);
    2144:	2004      	movs	r0, #4
    2146:	4b2f      	ldr	r3, [pc, #188]	; (2204 <http_client_callback+0xf0>)
    2148:	4798      	blx	r3
		break;
    214a:	e050      	b.n	21ee <http_client_callback+0xda>
	}
	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE: {
		printf("http_client_callback: received response %u data size %u\r\n",
		       (unsigned int)data->recv_response.response_code,
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	881b      	ldrh	r3, [r3, #0]
		printf("http_client_callback: received response %u data size %u\r\n",
    2150:	0019      	movs	r1, r3
		       (unsigned int)data->recv_response.content_length);
    2152:	687b      	ldr	r3, [r7, #4]
    2154:	685a      	ldr	r2, [r3, #4]
		printf("http_client_callback: received response %u data size %u\r\n",
    2156:	4b2c      	ldr	r3, [pc, #176]	; (2208 <http_client_callback+0xf4>)
    2158:	0018      	movs	r0, r3
    215a:	4b2c      	ldr	r3, [pc, #176]	; (220c <http_client_callback+0xf8>)
    215c:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    215e:	687b      	ldr	r3, [r7, #4]
    2160:	881b      	ldrh	r3, [r3, #0]
    2162:	2bc8      	cmp	r3, #200	; 0xc8
    2164:	d10c      	bne.n	2180 <http_client_callback+0x6c>
			http_file_size = data->recv_response.content_length;
    2166:	687b      	ldr	r3, [r7, #4]
    2168:	685a      	ldr	r2, [r3, #4]
    216a:	4b29      	ldr	r3, [pc, #164]	; (2210 <http_client_callback+0xfc>)
    216c:	601a      	str	r2, [r3, #0]
			received_file_size = 0;
    216e:	4b29      	ldr	r3, [pc, #164]	; (2214 <http_client_callback+0x100>)
    2170:	2200      	movs	r2, #0
    2172:	601a      	str	r2, [r3, #0]
		} else {
			add_state(CANCELED);
			return;
		}
		if (data->recv_response.content_length <= MTU_HTTP)
    2174:	687b      	ldr	r3, [r7, #4]
    2176:	685b      	ldr	r3, [r3, #4]
    2178:	4a27      	ldr	r2, [pc, #156]	; (2218 <http_client_callback+0x104>)
    217a:	4293      	cmp	r3, r2
    217c:	d834      	bhi.n	21e8 <http_client_callback+0xd4>
    217e:	e003      	b.n	2188 <http_client_callback+0x74>
			add_state(CANCELED);
    2180:	2020      	movs	r0, #32
    2182:	4b20      	ldr	r3, [pc, #128]	; (2204 <http_client_callback+0xf0>)
    2184:	4798      	blx	r3
			return;
    2186:	e032      	b.n	21ee <http_client_callback+0xda>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	689a      	ldr	r2, [r3, #8]
    218c:	687b      	ldr	r3, [r7, #4]
    218e:	685b      	ldr	r3, [r3, #4]
    2190:	0019      	movs	r1, r3
    2192:	0010      	movs	r0, r2
    2194:	4b21      	ldr	r3, [pc, #132]	; (221c <http_client_callback+0x108>)
    2196:	4798      	blx	r3
		//add_state(COMPLETED);
		break;
    2198:	e026      	b.n	21e8 <http_client_callback+0xd4>
	}
	case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA: {
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	685a      	ldr	r2, [r3, #4]
    219e:	687b      	ldr	r3, [r7, #4]
    21a0:	681b      	ldr	r3, [r3, #0]
    21a2:	0019      	movs	r1, r3
    21a4:	0010      	movs	r0, r2
    21a6:	4b1d      	ldr	r3, [pc, #116]	; (221c <http_client_callback+0x108>)
    21a8:	4798      	blx	r3
		//if (data->recv_chunked_data.is_complete)
		//add_state(COMPLETED);
		break;
    21aa:	e020      	b.n	21ee <http_client_callback+0xda>
	}
	case HTTP_CLIENT_CALLBACK_DISCONNECTED: {
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    21ac:	687b      	ldr	r3, [r7, #4]
    21ae:	681a      	ldr	r2, [r3, #0]
    21b0:	4b1b      	ldr	r3, [pc, #108]	; (2220 <http_client_callback+0x10c>)
    21b2:	0011      	movs	r1, r2
    21b4:	0018      	movs	r0, r3
    21b6:	4b15      	ldr	r3, [pc, #84]	; (220c <http_client_callback+0xf8>)
    21b8:	4798      	blx	r3

		/* If disconnect reason is equal to -ECONNRESET(-104),
		 * It means the server has closed the connection (timeout).
		 * This is normal operation.
		 */
		if (data->disconnected.reason == -EAGAIN) {
    21ba:	687b      	ldr	r3, [r7, #4]
    21bc:	681b      	ldr	r3, [r3, #0]
    21be:	330b      	adds	r3, #11
    21c0:	d110      	bne.n	21e4 <http_client_callback+0xd0>
			/* Server has not responded. Retry immediately. */
			if (is_state_set(DOWNLOADING))
    21c2:	2008      	movs	r0, #8
    21c4:	4b17      	ldr	r3, [pc, #92]	; (2224 <http_client_callback+0x110>)
    21c6:	4798      	blx	r3
    21c8:	1e03      	subs	r3, r0, #0
    21ca:	d002      	beq.n	21d2 <http_client_callback+0xbe>
				clear_state(DOWNLOADING);
    21cc:	2008      	movs	r0, #8
    21ce:	4b16      	ldr	r3, [pc, #88]	; (2228 <http_client_callback+0x114>)
    21d0:	4798      	blx	r3

			if (is_state_set(GET_REQUESTED))
    21d2:	2004      	movs	r0, #4
    21d4:	4b13      	ldr	r3, [pc, #76]	; (2224 <http_client_callback+0x110>)
    21d6:	4798      	blx	r3
    21d8:	1e03      	subs	r3, r0, #0
    21da:	d007      	beq.n	21ec <http_client_callback+0xd8>
				clear_state(GET_REQUESTED);
    21dc:	2004      	movs	r0, #4
    21de:	4b12      	ldr	r3, [pc, #72]	; (2228 <http_client_callback+0x114>)
    21e0:	4798      	blx	r3
			break;
    21e2:	e003      	b.n	21ec <http_client_callback+0xd8>
		}
	}
	default: {
		break;
    21e4:	46c0      	nop			; (mov r8, r8)
    21e6:	e002      	b.n	21ee <http_client_callback+0xda>
		break;
    21e8:	46c0      	nop			; (mov r8, r8)
    21ea:	e000      	b.n	21ee <http_client_callback+0xda>
			break;
    21ec:	46c0      	nop			; (mov r8, r8)
	}
	}
}
    21ee:	46bd      	mov	sp, r7
    21f0:	b004      	add	sp, #16
    21f2:	bd80      	pop	{r7, pc}
    21f4:	000193e4 	.word	0x000193e4
    21f8:	00019084 	.word	0x00019084
    21fc:	00013f69 	.word	0x00013f69
    2200:	000190bc 	.word	0x000190bc
    2204:	0000132d 	.word	0x0000132d
    2208:	000190e8 	.word	0x000190e8
    220c:	00013e4d 	.word	0x00013e4d
    2210:	2000020c 	.word	0x2000020c
    2214:	20000210 	.word	0x20000210
    2218:	000005dc 	.word	0x000005dc
    221c:	00001db5 	.word	0x00001db5
    2220:	00019124 	.word	0x00019124
    2224:	000013ad 	.word	0x000013ad
    2228:	000012f9 	.word	0x000012f9

0000222c <configure_http_client>:

/**
 * http_client configuration setup
 */
void configure_http_client(void)
{
    222c:	b580      	push	{r7, lr}
    222e:	b088      	sub	sp, #32
    2230:	af00      	add	r7, sp, #0
	struct http_client_config httpc_conf;
	int ret;

	http_client_get_config_defaults(&httpc_conf);
    2232:	003b      	movs	r3, r7
    2234:	0018      	movs	r0, r3
    2236:	4b12      	ldr	r3, [pc, #72]	; (2280 <configure_http_client+0x54>)
    2238:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MTU_HTTP;
    223a:	003b      	movs	r3, r7
    223c:	4a11      	ldr	r2, [pc, #68]	; (2284 <configure_http_client+0x58>)
    223e:	611a      	str	r2, [r3, #16]
	httpc_conf.timer_inst = &swt_module_inst;
    2240:	003b      	movs	r3, r7
    2242:	4a11      	ldr	r2, [pc, #68]	; (2288 <configure_http_client+0x5c>)
    2244:	605a      	str	r2, [r3, #4]

	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    2246:	003a      	movs	r2, r7
    2248:	4b10      	ldr	r3, [pc, #64]	; (228c <configure_http_client+0x60>)
    224a:	0011      	movs	r1, r2
    224c:	0018      	movs	r0, r3
    224e:	4b10      	ldr	r3, [pc, #64]	; (2290 <configure_http_client+0x64>)
    2250:	4798      	blx	r3
    2252:	0003      	movs	r3, r0
    2254:	61fb      	str	r3, [r7, #28]
	if (ret < 0) {
    2256:	69fb      	ldr	r3, [r7, #28]
    2258:	2b00      	cmp	r3, #0
    225a:	da06      	bge.n	226a <configure_http_client+0x3e>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    225c:	69fa      	ldr	r2, [r7, #28]
    225e:	4b0d      	ldr	r3, [pc, #52]	; (2294 <configure_http_client+0x68>)
    2260:	0011      	movs	r1, r2
    2262:	0018      	movs	r0, r3
    2264:	4b0c      	ldr	r3, [pc, #48]	; (2298 <configure_http_client+0x6c>)
    2266:	4798      	blx	r3
		while (1) {
    2268:	e7fe      	b.n	2268 <configure_http_client+0x3c>
		}         /* Loop forever. */
	}

	http_client_register_callback(&http_client_module_inst, http_client_callback);
    226a:	4a0c      	ldr	r2, [pc, #48]	; (229c <configure_http_client+0x70>)
    226c:	4b07      	ldr	r3, [pc, #28]	; (228c <configure_http_client+0x60>)
    226e:	0011      	movs	r1, r2
    2270:	0018      	movs	r0, r3
    2272:	4b0b      	ldr	r3, [pc, #44]	; (22a0 <configure_http_client+0x74>)
    2274:	4798      	blx	r3
}
    2276:	46c0      	nop			; (mov r8, r8)
    2278:	46bd      	mov	sp, r7
    227a:	b008      	add	sp, #32
    227c:	bd80      	pop	{r7, pc}
    227e:	46c0      	nop			; (mov r8, r8)
    2280:	0000b5f1 	.word	0x0000b5f1
    2284:	000005dc 	.word	0x000005dc
    2288:	20000328 	.word	0x20000328
    228c:	20000380 	.word	0x20000380
    2290:	0000b63d 	.word	0x0000b63d
    2294:	00019154 	.word	0x00019154
    2298:	00013e4d 	.word	0x00013e4d
    229c:	00002115 	.word	0x00002115
    22a0:	0000b729 	.word	0x0000b729

000022a4 <socket_callback>:
 * @param sock    open socket
 * @param evt     event change that pulled callback
 * @param evt_msg event data
 */
void socket_callback(SOCKET sock, uint8_t evt, void *evt_msg)
{
    22a4:	b580      	push	{r7, lr}
    22a6:	b082      	sub	sp, #8
    22a8:	af00      	add	r7, sp, #0
    22aa:	603a      	str	r2, [r7, #0]
    22ac:	1dfb      	adds	r3, r7, #7
    22ae:	1c02      	adds	r2, r0, #0
    22b0:	701a      	strb	r2, [r3, #0]
    22b2:	1dbb      	adds	r3, r7, #6
    22b4:	1c0a      	adds	r2, r1, #0
    22b6:	701a      	strb	r2, [r3, #0]
	http_client_socket_event_handler(sock, evt, evt_msg);
    22b8:	683a      	ldr	r2, [r7, #0]
    22ba:	1dbb      	adds	r3, r7, #6
    22bc:	7819      	ldrb	r1, [r3, #0]
    22be:	1dfb      	adds	r3, r7, #7
    22c0:	781b      	ldrb	r3, [r3, #0]
    22c2:	b25b      	sxtb	r3, r3
    22c4:	0018      	movs	r0, r3
    22c6:	4b03      	ldr	r3, [pc, #12]	; (22d4 <socket_callback+0x30>)
    22c8:	4798      	blx	r3
}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	46bd      	mov	sp, r7
    22ce:	b002      	add	sp, #8
    22d0:	bd80      	pop	{r7, pc}
    22d2:	46c0      	nop			; (mov r8, r8)
    22d4:	0000b7c9 	.word	0x0000b7c9

000022d8 <resolve_cb>:
 * callback to resolve http address to an IP address
 * @param pu8DomainName unknown??
 * @param u32ServerIP   unknown??
 */
void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    22d8:	b5b0      	push	{r4, r5, r7, lr}
    22da:	b084      	sub	sp, #16
    22dc:	af02      	add	r7, sp, #8
    22de:	6078      	str	r0, [r7, #4]
    22e0:	6039      	str	r1, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
	       (int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    22e2:	683b      	ldr	r3, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    22e4:	22ff      	movs	r2, #255	; 0xff
    22e6:	4013      	ands	r3, r2
    22e8:	001c      	movs	r4, r3
	       (int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    22ea:	683b      	ldr	r3, [r7, #0]
    22ec:	0a1b      	lsrs	r3, r3, #8
    22ee:	001a      	movs	r2, r3
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    22f0:	23ff      	movs	r3, #255	; 0xff
    22f2:	401a      	ands	r2, r3
    22f4:	0015      	movs	r5, r2
	       (int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    22f6:	683b      	ldr	r3, [r7, #0]
    22f8:	0c1b      	lsrs	r3, r3, #16
    22fa:	001a      	movs	r2, r3
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    22fc:	23ff      	movs	r3, #255	; 0xff
    22fe:	4013      	ands	r3, r2
	       (int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    2300:	683a      	ldr	r2, [r7, #0]
    2302:	0e12      	lsrs	r2, r2, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    2304:	6879      	ldr	r1, [r7, #4]
    2306:	4808      	ldr	r0, [pc, #32]	; (2328 <resolve_cb+0x50>)
    2308:	9201      	str	r2, [sp, #4]
    230a:	9300      	str	r3, [sp, #0]
    230c:	002b      	movs	r3, r5
    230e:	0022      	movs	r2, r4
    2310:	4c06      	ldr	r4, [pc, #24]	; (232c <resolve_cb+0x54>)
    2312:	47a0      	blx	r4
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    2314:	683a      	ldr	r2, [r7, #0]
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	0011      	movs	r1, r2
    231a:	0018      	movs	r0, r3
    231c:	4b04      	ldr	r3, [pc, #16]	; (2330 <resolve_cb+0x58>)
    231e:	4798      	blx	r3
}
    2320:	46c0      	nop			; (mov r8, r8)
    2322:	46bd      	mov	sp, r7
    2324:	b002      	add	sp, #8
    2326:	bdb0      	pop	{r4, r5, r7, pc}
    2328:	0001919c 	.word	0x0001919c
    232c:	00013e4d 	.word	0x00013e4d
    2330:	0000b92d 	.word	0x0000b92d

00002334 <wifi_callback>:
 * Callback for wifi state changes
 * @param evt     event change
 * @param evt_msg information about wifi state change
 */
void wifi_callback(uint8_t evt, void *evt_msg)
{
    2334:	b590      	push	{r4, r7, lr}
    2336:	b087      	sub	sp, #28
    2338:	af02      	add	r7, sp, #8
    233a:	0002      	movs	r2, r0
    233c:	6039      	str	r1, [r7, #0]
    233e:	1dfb      	adds	r3, r7, #7
    2340:	701a      	strb	r2, [r3, #0]
	switch (evt) {
    2342:	1dfb      	adds	r3, r7, #7
    2344:	781b      	ldrb	r3, [r3, #0]
    2346:	2b2c      	cmp	r3, #44	; 0x2c
    2348:	d002      	beq.n	2350 <wifi_callback+0x1c>
    234a:	2b32      	cmp	r3, #50	; 0x32
    234c:	d041      	beq.n	23d2 <wifi_callback+0x9e>
    234e:	e05b      	b.n	2408 <wifi_callback+0xd4>
	case M2M_WIFI_RESP_CON_STATE_CHANGED: {
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)evt_msg;
    2350:	683b      	ldr	r3, [r7, #0]
    2352:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    2354:	68fb      	ldr	r3, [r7, #12]
    2356:	781b      	ldrb	r3, [r3, #0]
    2358:	2b01      	cmp	r3, #1
    235a:	d106      	bne.n	236a <wifi_callback+0x36>
			printf("wifi_callback [M2M_WIFI_RESP_CON_STATE_CHANGED]: connected.\r\n");
    235c:	4b31      	ldr	r3, [pc, #196]	; (2424 <wifi_callback+0xf0>)
    235e:	0018      	movs	r0, r3
    2360:	4b31      	ldr	r3, [pc, #196]	; (2428 <wifi_callback+0xf4>)
    2362:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    2364:	4b31      	ldr	r3, [pc, #196]	; (242c <wifi_callback+0xf8>)
    2366:	4798      	blx	r3
			if (is_state_set(GET_REQUESTED))
				clear_state(GET_REQUESTED);
			m2m_wifi_connect(current_wifi_config->ssid, strlen(current_wifi_config->ssid), current_wifi_config->auth_type, current_wifi_config->password, M2M_WIFI_CH_ALL);
		}

		break;
    2368:	e056      	b.n	2418 <wifi_callback+0xe4>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    236a:	68fb      	ldr	r3, [r7, #12]
    236c:	781b      	ldrb	r3, [r3, #0]
    236e:	2b00      	cmp	r3, #0
    2370:	d152      	bne.n	2418 <wifi_callback+0xe4>
			printf("wifi_callback [M2M_WIFI_RESP_CON_STATE_CHANGED] disconnected.\r\n");
    2372:	4b2f      	ldr	r3, [pc, #188]	; (2430 <wifi_callback+0xfc>)
    2374:	0018      	movs	r0, r3
    2376:	4b2c      	ldr	r3, [pc, #176]	; (2428 <wifi_callback+0xf4>)
    2378:	4798      	blx	r3
			clear_state(WIFI_CONNECTED);
    237a:	2002      	movs	r0, #2
    237c:	4b2d      	ldr	r3, [pc, #180]	; (2434 <wifi_callback+0x100>)
    237e:	4798      	blx	r3
			if (is_state_set(DOWNLOADING))
    2380:	2008      	movs	r0, #8
    2382:	4b2d      	ldr	r3, [pc, #180]	; (2438 <wifi_callback+0x104>)
    2384:	4798      	blx	r3
    2386:	1e03      	subs	r3, r0, #0
    2388:	d002      	beq.n	2390 <wifi_callback+0x5c>
				clear_state(DOWNLOADING);
    238a:	2008      	movs	r0, #8
    238c:	4b29      	ldr	r3, [pc, #164]	; (2434 <wifi_callback+0x100>)
    238e:	4798      	blx	r3
			if (is_state_set(GET_REQUESTED))
    2390:	2004      	movs	r0, #4
    2392:	4b29      	ldr	r3, [pc, #164]	; (2438 <wifi_callback+0x104>)
    2394:	4798      	blx	r3
    2396:	1e03      	subs	r3, r0, #0
    2398:	d002      	beq.n	23a0 <wifi_callback+0x6c>
				clear_state(GET_REQUESTED);
    239a:	2004      	movs	r0, #4
    239c:	4b25      	ldr	r3, [pc, #148]	; (2434 <wifi_callback+0x100>)
    239e:	4798      	blx	r3
			m2m_wifi_connect(current_wifi_config->ssid, strlen(current_wifi_config->ssid), current_wifi_config->auth_type, current_wifi_config->password, M2M_WIFI_CH_ALL);
    23a0:	4b26      	ldr	r3, [pc, #152]	; (243c <wifi_callback+0x108>)
    23a2:	681b      	ldr	r3, [r3, #0]
    23a4:	681c      	ldr	r4, [r3, #0]
    23a6:	4b25      	ldr	r3, [pc, #148]	; (243c <wifi_callback+0x108>)
    23a8:	681b      	ldr	r3, [r3, #0]
    23aa:	681b      	ldr	r3, [r3, #0]
    23ac:	0018      	movs	r0, r3
    23ae:	4b24      	ldr	r3, [pc, #144]	; (2440 <wifi_callback+0x10c>)
    23b0:	4798      	blx	r3
    23b2:	0003      	movs	r3, r0
    23b4:	b2d9      	uxtb	r1, r3
    23b6:	4b21      	ldr	r3, [pc, #132]	; (243c <wifi_callback+0x108>)
    23b8:	681b      	ldr	r3, [r3, #0]
    23ba:	685b      	ldr	r3, [r3, #4]
    23bc:	b2da      	uxtb	r2, r3
    23be:	4b1f      	ldr	r3, [pc, #124]	; (243c <wifi_callback+0x108>)
    23c0:	681b      	ldr	r3, [r3, #0]
    23c2:	6898      	ldr	r0, [r3, #8]
    23c4:	23ff      	movs	r3, #255	; 0xff
    23c6:	9300      	str	r3, [sp, #0]
    23c8:	0003      	movs	r3, r0
    23ca:	0020      	movs	r0, r4
    23cc:	4c1d      	ldr	r4, [pc, #116]	; (2444 <wifi_callback+0x110>)
    23ce:	47a0      	blx	r4
		break;
    23d0:	e022      	b.n	2418 <wifi_callback+0xe4>
	}
	case M2M_WIFI_REQ_DHCP_CONF: {
		uint8_t *pu8IPAddress = (uint8_t *)evt_msg;
    23d2:	683b      	ldr	r3, [r7, #0]
    23d4:	60bb      	str	r3, [r7, #8]
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
		       pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    23d6:	68bb      	ldr	r3, [r7, #8]
    23d8:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
    23da:	0019      	movs	r1, r3
		       pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    23dc:	68bb      	ldr	r3, [r7, #8]
    23de:	3301      	adds	r3, #1
    23e0:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
    23e2:	001a      	movs	r2, r3
		       pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    23e4:	68bb      	ldr	r3, [r7, #8]
    23e6:	3302      	adds	r3, #2
    23e8:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
    23ea:	001c      	movs	r4, r3
		       pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    23ec:	68bb      	ldr	r3, [r7, #8]
    23ee:	3303      	adds	r3, #3
    23f0:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_callback [M2M_WIFI_REQ_DHCP_CONF]: IP address is %u.%u.%u.%u\r\n",
    23f2:	4815      	ldr	r0, [pc, #84]	; (2448 <wifi_callback+0x114>)
    23f4:	9300      	str	r3, [sp, #0]
    23f6:	0023      	movs	r3, r4
    23f8:	4c14      	ldr	r4, [pc, #80]	; (244c <wifi_callback+0x118>)
    23fa:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
    23fc:	2002      	movs	r0, #2
    23fe:	4b14      	ldr	r3, [pc, #80]	; (2450 <wifi_callback+0x11c>)
    2400:	4798      	blx	r3
		start_download();
    2402:	4b14      	ldr	r3, [pc, #80]	; (2454 <wifi_callback+0x120>)
    2404:	4798      	blx	r3
		break;
    2406:	e008      	b.n	241a <wifi_callback+0xe6>
	}
	default:
		printf("wifi_callback [default]: ERROR evt %d\r\n", evt);
    2408:	1dfb      	adds	r3, r7, #7
    240a:	781a      	ldrb	r2, [r3, #0]
    240c:	4b12      	ldr	r3, [pc, #72]	; (2458 <wifi_callback+0x124>)
    240e:	0011      	movs	r1, r2
    2410:	0018      	movs	r0, r3
    2412:	4b0e      	ldr	r3, [pc, #56]	; (244c <wifi_callback+0x118>)
    2414:	4798      	blx	r3
	}
}
    2416:	e000      	b.n	241a <wifi_callback+0xe6>
		break;
    2418:	46c0      	nop			; (mov r8, r8)
}
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	46bd      	mov	sp, r7
    241e:	b005      	add	sp, #20
    2420:	bd90      	pop	{r4, r7, pc}
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	000191cc 	.word	0x000191cc
    2428:	00013f69 	.word	0x00013f69
    242c:	000057a1 	.word	0x000057a1
    2430:	0001920c 	.word	0x0001920c
    2434:	000012f9 	.word	0x000012f9
    2438:	000013ad 	.word	0x000013ad
    243c:	200004ac 	.word	0x200004ac
    2440:	000141af 	.word	0x000141af
    2444:	000052d9 	.word	0x000052d9
    2448:	0001924c 	.word	0x0001924c
    244c:	00013e4d 	.word	0x00013e4d
    2450:	0000132d 	.word	0x0000132d
    2454:	000013d9 	.word	0x000013d9
    2458:	00019290 	.word	0x00019290

0000245c <configure_timer>:

static void configure_timer(void)
{
    245c:	b580      	push	{r7, lr}
    245e:	b082      	sub	sp, #8
    2460:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;

	sw_timer_get_config_defaults(&swt_conf);
    2462:	1d3b      	adds	r3, r7, #4
    2464:	0018      	movs	r0, r3
    2466:	4b08      	ldr	r3, [pc, #32]	; (2488 <configure_timer+0x2c>)
    2468:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    246a:	1d3a      	adds	r2, r7, #4
    246c:	4b07      	ldr	r3, [pc, #28]	; (248c <configure_timer+0x30>)
    246e:	0011      	movs	r1, r2
    2470:	0018      	movs	r0, r3
    2472:	4b07      	ldr	r3, [pc, #28]	; (2490 <configure_timer+0x34>)
    2474:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    2476:	4b05      	ldr	r3, [pc, #20]	; (248c <configure_timer+0x30>)
    2478:	0018      	movs	r0, r3
    247a:	4b06      	ldr	r3, [pc, #24]	; (2494 <configure_timer+0x38>)
    247c:	4798      	blx	r3
}
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	46bd      	mov	sp, r7
    2482:	b002      	add	sp, #8
    2484:	bd80      	pop	{r7, pc}
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	0000cf9d 	.word	0x0000cf9d
    248c:	20000328 	.word	0x20000328
    2490:	0000cfc1 	.word	0x0000cfc1
    2494:	0000d0ad 	.word	0x0000d0ad

00002498 <get_default_wifi_config>:

void get_default_wifi_config(wifi_config *wifi_configuration)
{
    2498:	b580      	push	{r7, lr}
    249a:	b082      	sub	sp, #8
    249c:	af00      	add	r7, sp, #0
    249e:	6078      	str	r0, [r7, #4]
	wifi_configuration->ssid = "AirPennNet-Device";
    24a0:	687b      	ldr	r3, [r7, #4]
    24a2:	4a09      	ldr	r2, [pc, #36]	; (24c8 <get_default_wifi_config+0x30>)
    24a4:	601a      	str	r2, [r3, #0]
	wifi_configuration->auth_type = M2M_WIFI_SEC_WPA_PSK;
    24a6:	687b      	ldr	r3, [r7, #4]
    24a8:	2202      	movs	r2, #2
    24aa:	605a      	str	r2, [r3, #4]
	wifi_configuration->password = "penn1740wifi";
    24ac:	687b      	ldr	r3, [r7, #4]
    24ae:	4a07      	ldr	r2, [pc, #28]	; (24cc <get_default_wifi_config+0x34>)
    24b0:	609a      	str	r2, [r3, #8]
	wifi_configuration->firmware_header_http_address = "http://www.seas.upenn.edu/~warcher/ese516/metadata.bin";
    24b2:	687b      	ldr	r3, [r7, #4]
    24b4:	4a06      	ldr	r2, [pc, #24]	; (24d0 <get_default_wifi_config+0x38>)
    24b6:	60da      	str	r2, [r3, #12]
	wifi_configuration->firmware_http_address = "http://www.seas.upenn.edu/~warcher/ese516/test-firmware.bin";
    24b8:	687b      	ldr	r3, [r7, #4]
    24ba:	4a06      	ldr	r2, [pc, #24]	; (24d4 <get_default_wifi_config+0x3c>)
    24bc:	611a      	str	r2, [r3, #16]
}
    24be:	46c0      	nop			; (mov r8, r8)
    24c0:	46bd      	mov	sp, r7
    24c2:	b002      	add	sp, #8
    24c4:	bd80      	pop	{r7, pc}
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	000192b8 	.word	0x000192b8
    24cc:	000192cc 	.word	0x000192cc
    24d0:	000192dc 	.word	0x000192dc
    24d4:	00019314 	.word	0x00019314

000024d8 <configure_wifi_module>:
void configure_wifi_module(wifi_config *wifi_configuration)
{
    24d8:	b5b0      	push	{r4, r5, r7, lr}
    24da:	b08c      	sub	sp, #48	; 0x30
    24dc:	af02      	add	r7, sp, #8
    24de:	6078      	str	r0, [r7, #4]
	init_state();
    24e0:	4b32      	ldr	r3, [pc, #200]	; (25ac <configure_wifi_module+0xd4>)
    24e2:	4798      	blx	r3
	add_state(STORAGE_READY);
    24e4:	2001      	movs	r0, #1
    24e6:	4b32      	ldr	r3, [pc, #200]	; (25b0 <configure_wifi_module+0xd8>)
    24e8:	4798      	blx	r3
	configure_timer();
    24ea:	4b32      	ldr	r3, [pc, #200]	; (25b4 <configure_wifi_module+0xdc>)
    24ec:	4798      	blx	r3
	configure_http_client();
    24ee:	4b32      	ldr	r3, [pc, #200]	; (25b8 <configure_wifi_module+0xe0>)
    24f0:	4798      	blx	r3
	nm_bsp_init();
    24f2:	4b32      	ldr	r3, [pc, #200]	; (25bc <configure_wifi_module+0xe4>)
    24f4:	4798      	blx	r3

	tstrWifiInitParam wifi_params;
	memset((uint8_t *)&wifi_params, 0, sizeof(tstrWifiInitParam));
    24f6:	230c      	movs	r3, #12
    24f8:	18fb      	adds	r3, r7, r3
    24fa:	2218      	movs	r2, #24
    24fc:	2100      	movs	r1, #0
    24fe:	0018      	movs	r0, r3
    2500:	4b2f      	ldr	r3, [pc, #188]	; (25c0 <configure_wifi_module+0xe8>)
    2502:	4798      	blx	r3
	wifi_params.pfAppWifiCb = wifi_callback;
    2504:	230c      	movs	r3, #12
    2506:	18fb      	adds	r3, r7, r3
    2508:	4a2e      	ldr	r2, [pc, #184]	; (25c4 <configure_wifi_module+0xec>)
    250a:	601a      	str	r2, [r3, #0]
	int8_t ret = m2m_wifi_init(&wifi_params); // NOTE: m2m = machine to machine
    250c:	2327      	movs	r3, #39	; 0x27
    250e:	18fc      	adds	r4, r7, r3
    2510:	230c      	movs	r3, #12
    2512:	18fb      	adds	r3, r7, r3
    2514:	0018      	movs	r0, r3
    2516:	4b2c      	ldr	r3, [pc, #176]	; (25c8 <configure_wifi_module+0xf0>)
    2518:	4798      	blx	r3
    251a:	0003      	movs	r3, r0
    251c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    251e:	2327      	movs	r3, #39	; 0x27
    2520:	18fb      	adds	r3, r7, r3
    2522:	781b      	ldrb	r3, [r3, #0]
    2524:	b25b      	sxtb	r3, r3
    2526:	2b00      	cmp	r3, #0
    2528:	d004      	beq.n	2534 <configure_wifi_module+0x5c>
		printf("failed to initialize wifi parameters\r\n");
    252a:	4b28      	ldr	r3, [pc, #160]	; (25cc <configure_wifi_module+0xf4>)
    252c:	0018      	movs	r0, r3
    252e:	4b28      	ldr	r3, [pc, #160]	; (25d0 <configure_wifi_module+0xf8>)
    2530:	4798      	blx	r3
    2532:	e037      	b.n	25a4 <configure_wifi_module+0xcc>
		return 0;
	}

	socketInit();
    2534:	4b27      	ldr	r3, [pc, #156]	; (25d4 <configure_wifi_module+0xfc>)
    2536:	4798      	blx	r3
	registerSocketCallback(socket_callback, resolve_cb);
    2538:	4a27      	ldr	r2, [pc, #156]	; (25d8 <configure_wifi_module+0x100>)
    253a:	4b28      	ldr	r3, [pc, #160]	; (25dc <configure_wifi_module+0x104>)
    253c:	0011      	movs	r1, r2
    253e:	0018      	movs	r0, r3
    2540:	4b27      	ldr	r3, [pc, #156]	; (25e0 <configure_wifi_module+0x108>)
    2542:	4798      	blx	r3
	printf("--- Welcome to ATWINC 1500 Connection Test ---\r\n");
    2544:	4b27      	ldr	r3, [pc, #156]	; (25e4 <configure_wifi_module+0x10c>)
    2546:	0018      	movs	r0, r3
    2548:	4b21      	ldr	r3, [pc, #132]	; (25d0 <configure_wifi_module+0xf8>)
    254a:	4798      	blx	r3
	printf("main: connecting to WiFi AP %s...\r\n", wifi_configuration->ssid);
    254c:	687b      	ldr	r3, [r7, #4]
    254e:	681a      	ldr	r2, [r3, #0]
    2550:	4b25      	ldr	r3, [pc, #148]	; (25e8 <configure_wifi_module+0x110>)
    2552:	0011      	movs	r1, r2
    2554:	0018      	movs	r0, r3
    2556:	4b25      	ldr	r3, [pc, #148]	; (25ec <configure_wifi_module+0x114>)
    2558:	4798      	blx	r3
	ret = m2m_wifi_connect(wifi_configuration->ssid, strlen(wifi_configuration->ssid), wifi_configuration->auth_type, wifi_configuration->password, M2M_WIFI_CH_ALL);
    255a:	687b      	ldr	r3, [r7, #4]
    255c:	681d      	ldr	r5, [r3, #0]
    255e:	687b      	ldr	r3, [r7, #4]
    2560:	681b      	ldr	r3, [r3, #0]
    2562:	0018      	movs	r0, r3
    2564:	4b22      	ldr	r3, [pc, #136]	; (25f0 <configure_wifi_module+0x118>)
    2566:	4798      	blx	r3
    2568:	0003      	movs	r3, r0
    256a:	b2d9      	uxtb	r1, r3
    256c:	687b      	ldr	r3, [r7, #4]
    256e:	685b      	ldr	r3, [r3, #4]
    2570:	b2da      	uxtb	r2, r3
    2572:	687b      	ldr	r3, [r7, #4]
    2574:	6898      	ldr	r0, [r3, #8]
    2576:	2327      	movs	r3, #39	; 0x27
    2578:	18fc      	adds	r4, r7, r3
    257a:	23ff      	movs	r3, #255	; 0xff
    257c:	9300      	str	r3, [sp, #0]
    257e:	0003      	movs	r3, r0
    2580:	0028      	movs	r0, r5
    2582:	4d1c      	ldr	r5, [pc, #112]	; (25f4 <configure_wifi_module+0x11c>)
    2584:	47a8      	blx	r5
    2586:	0003      	movs	r3, r0
    2588:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS == ret) {
    258a:	2327      	movs	r3, #39	; 0x27
    258c:	18fb      	adds	r3, r7, r3
    258e:	781b      	ldrb	r3, [r3, #0]
    2590:	b25b      	sxtb	r3, r3
    2592:	2b00      	cmp	r3, #0
    2594:	d106      	bne.n	25a4 <configure_wifi_module+0xcc>
		printf("successfully connected\r\n");
    2596:	4b18      	ldr	r3, [pc, #96]	; (25f8 <configure_wifi_module+0x120>)
    2598:	0018      	movs	r0, r3
    259a:	4b0d      	ldr	r3, [pc, #52]	; (25d0 <configure_wifi_module+0xf8>)
    259c:	4798      	blx	r3
		current_wifi_config = wifi_configuration;
    259e:	4b17      	ldr	r3, [pc, #92]	; (25fc <configure_wifi_module+0x124>)
    25a0:	687a      	ldr	r2, [r7, #4]
    25a2:	601a      	str	r2, [r3, #0]
	}
}
    25a4:	46bd      	mov	sp, r7
    25a6:	b00a      	add	sp, #40	; 0x28
    25a8:	bdb0      	pop	{r4, r5, r7, pc}
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	0000138d 	.word	0x0000138d
    25b0:	0000132d 	.word	0x0000132d
    25b4:	0000245d 	.word	0x0000245d
    25b8:	0000222d 	.word	0x0000222d
    25bc:	00003565 	.word	0x00003565
    25c0:	0001340b 	.word	0x0001340b
    25c4:	00002335 	.word	0x00002335
    25c8:	000050a9 	.word	0x000050a9
    25cc:	00019350 	.word	0x00019350
    25d0:	00013f69 	.word	0x00013f69
    25d4:	000082d5 	.word	0x000082d5
    25d8:	000022d9 	.word	0x000022d9
    25dc:	000022a5 	.word	0x000022a5
    25e0:	0000836d 	.word	0x0000836d
    25e4:	00019378 	.word	0x00019378
    25e8:	000193a8 	.word	0x000193a8
    25ec:	00013e4d 	.word	0x00013e4d
    25f0:	000141af 	.word	0x000141af
    25f4:	000052d9 	.word	0x000052d9
    25f8:	000193cc 	.word	0x000193cc
    25fc:	200004ac 	.word	0x200004ac

00002600 <check_for_update>:

bool check_for_update()
{
    2600:	b580      	push	{r7, lr}
    2602:	af00      	add	r7, sp, #0
	m2m_wifi_request_dhcp_client();
    2604:	4b15      	ldr	r3, [pc, #84]	; (265c <check_for_update+0x5c>)
    2606:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    2608:	e006      	b.n	2618 <check_for_update+0x18>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    260a:	2000      	movs	r0, #0
    260c:	4b14      	ldr	r3, [pc, #80]	; (2660 <check_for_update+0x60>)
    260e:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    2610:	4b14      	ldr	r3, [pc, #80]	; (2664 <check_for_update+0x64>)
    2612:	0018      	movs	r0, r3
    2614:	4b14      	ldr	r3, [pc, #80]	; (2668 <check_for_update+0x68>)
    2616:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    2618:	2010      	movs	r0, #16
    261a:	4b14      	ldr	r3, [pc, #80]	; (266c <check_for_update+0x6c>)
    261c:	4798      	blx	r3
    261e:	0003      	movs	r3, r0
    2620:	001a      	movs	r2, r3
    2622:	2301      	movs	r3, #1
    2624:	4053      	eors	r3, r2
    2626:	b2db      	uxtb	r3, r3
    2628:	2b00      	cmp	r3, #0
    262a:	d009      	beq.n	2640 <check_for_update+0x40>
    262c:	2020      	movs	r0, #32
    262e:	4b0f      	ldr	r3, [pc, #60]	; (266c <check_for_update+0x6c>)
    2630:	4798      	blx	r3
    2632:	0003      	movs	r3, r0
    2634:	001a      	movs	r2, r3
    2636:	2301      	movs	r3, #1
    2638:	4053      	eors	r3, r2
    263a:	b2db      	uxtb	r3, r3
    263c:	2b00      	cmp	r3, #0
    263e:	d1e4      	bne.n	260a <check_for_update+0xa>
	}
	if (is_state_set(UPDATE_AVAILABLE)) {
    2640:	2080      	movs	r0, #128	; 0x80
    2642:	4b0a      	ldr	r3, [pc, #40]	; (266c <check_for_update+0x6c>)
    2644:	4798      	blx	r3
    2646:	1e03      	subs	r3, r0, #0
    2648:	d004      	beq.n	2654 <check_for_update+0x54>
		clear_state(COMPLETED);
    264a:	2010      	movs	r0, #16
    264c:	4b08      	ldr	r3, [pc, #32]	; (2670 <check_for_update+0x70>)
    264e:	4798      	blx	r3
		return true;
    2650:	2301      	movs	r3, #1
    2652:	e000      	b.n	2656 <check_for_update+0x56>
	} else {
		return false;
    2654:	2300      	movs	r3, #0
	}
}
    2656:	0018      	movs	r0, r3
    2658:	46bd      	mov	sp, r7
    265a:	bd80      	pop	{r7, pc}
    265c:	000057a1 	.word	0x000057a1
    2660:	000052bd 	.word	0x000052bd
    2664:	20000328 	.word	0x20000328
    2668:	0000d209 	.word	0x0000d209
    266c:	000013ad 	.word	0x000013ad
    2670:	000012f9 	.word	0x000012f9

00002674 <download_firmware>:
bool download_firmware()
{
    2674:	b580      	push	{r7, lr}
    2676:	af00      	add	r7, sp, #0
	if (is_state_set(UPDATE_AVAILABLE)) {
    2678:	2080      	movs	r0, #128	; 0x80
    267a:	4b17      	ldr	r3, [pc, #92]	; (26d8 <download_firmware+0x64>)
    267c:	4798      	blx	r3
    267e:	1e03      	subs	r3, r0, #0
    2680:	d026      	beq.n	26d0 <download_firmware+0x5c>
		start_download();
    2682:	4b16      	ldr	r3, [pc, #88]	; (26dc <download_firmware+0x68>)
    2684:	4798      	blx	r3
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    2686:	e006      	b.n	2696 <download_firmware+0x22>
			/* Handle pending events from network controller. */
			m2m_wifi_handle_events(NULL);
    2688:	2000      	movs	r0, #0
    268a:	4b15      	ldr	r3, [pc, #84]	; (26e0 <download_firmware+0x6c>)
    268c:	4798      	blx	r3
			/* Checks the timer timeout. */
			sw_timer_task(&swt_module_inst);
    268e:	4b15      	ldr	r3, [pc, #84]	; (26e4 <download_firmware+0x70>)
    2690:	0018      	movs	r0, r3
    2692:	4b15      	ldr	r3, [pc, #84]	; (26e8 <download_firmware+0x74>)
    2694:	4798      	blx	r3
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    2696:	2010      	movs	r0, #16
    2698:	4b0f      	ldr	r3, [pc, #60]	; (26d8 <download_firmware+0x64>)
    269a:	4798      	blx	r3
    269c:	0003      	movs	r3, r0
    269e:	001a      	movs	r2, r3
    26a0:	2301      	movs	r3, #1
    26a2:	4053      	eors	r3, r2
    26a4:	b2db      	uxtb	r3, r3
    26a6:	2b00      	cmp	r3, #0
    26a8:	d009      	beq.n	26be <download_firmware+0x4a>
    26aa:	2020      	movs	r0, #32
    26ac:	4b0a      	ldr	r3, [pc, #40]	; (26d8 <download_firmware+0x64>)
    26ae:	4798      	blx	r3
    26b0:	0003      	movs	r3, r0
    26b2:	001a      	movs	r2, r3
    26b4:	2301      	movs	r3, #1
    26b6:	4053      	eors	r3, r2
    26b8:	b2db      	uxtb	r3, r3
    26ba:	2b00      	cmp	r3, #0
    26bc:	d1e4      	bne.n	2688 <download_firmware+0x14>
		}
		if (is_state_set(COMPLETED))
    26be:	2010      	movs	r0, #16
    26c0:	4b05      	ldr	r3, [pc, #20]	; (26d8 <download_firmware+0x64>)
    26c2:	4798      	blx	r3
    26c4:	1e03      	subs	r3, r0, #0
    26c6:	d001      	beq.n	26cc <download_firmware+0x58>
			return true;
    26c8:	2301      	movs	r3, #1
    26ca:	e002      	b.n	26d2 <download_firmware+0x5e>
		else
			return false;
    26cc:	2300      	movs	r3, #0
    26ce:	e000      	b.n	26d2 <download_firmware+0x5e>
	} else {
		return false;
    26d0:	2300      	movs	r3, #0
	}
}
    26d2:	0018      	movs	r0, r3
    26d4:	46bd      	mov	sp, r7
    26d6:	bd80      	pop	{r7, pc}
    26d8:	000013ad 	.word	0x000013ad
    26dc:	000013d9 	.word	0x000013d9
    26e0:	000052bd 	.word	0x000052bd
    26e4:	20000328 	.word	0x20000328
    26e8:	0000d209 	.word	0x0000d209

000026ec <system_pinmux_get_group_from_gpio_pin>:
{
    26ec:	b580      	push	{r7, lr}
    26ee:	b084      	sub	sp, #16
    26f0:	af00      	add	r7, sp, #0
    26f2:	0002      	movs	r2, r0
    26f4:	1dfb      	adds	r3, r7, #7
    26f6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    26f8:	230f      	movs	r3, #15
    26fa:	18fb      	adds	r3, r7, r3
    26fc:	1dfa      	adds	r2, r7, #7
    26fe:	7812      	ldrb	r2, [r2, #0]
    2700:	09d2      	lsrs	r2, r2, #7
    2702:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2704:	230e      	movs	r3, #14
    2706:	18fb      	adds	r3, r7, r3
    2708:	1dfa      	adds	r2, r7, #7
    270a:	7812      	ldrb	r2, [r2, #0]
    270c:	0952      	lsrs	r2, r2, #5
    270e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2710:	4b0d      	ldr	r3, [pc, #52]	; (2748 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2712:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    2714:	230f      	movs	r3, #15
    2716:	18fb      	adds	r3, r7, r3
    2718:	781b      	ldrb	r3, [r3, #0]
    271a:	2b00      	cmp	r3, #0
    271c:	d10f      	bne.n	273e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    271e:	230f      	movs	r3, #15
    2720:	18fb      	adds	r3, r7, r3
    2722:	781b      	ldrb	r3, [r3, #0]
    2724:	009b      	lsls	r3, r3, #2
    2726:	2210      	movs	r2, #16
    2728:	4694      	mov	ip, r2
    272a:	44bc      	add	ip, r7
    272c:	4463      	add	r3, ip
    272e:	3b08      	subs	r3, #8
    2730:	681a      	ldr	r2, [r3, #0]
    2732:	230e      	movs	r3, #14
    2734:	18fb      	adds	r3, r7, r3
    2736:	781b      	ldrb	r3, [r3, #0]
    2738:	01db      	lsls	r3, r3, #7
    273a:	18d3      	adds	r3, r2, r3
    273c:	e000      	b.n	2740 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    273e:	2300      	movs	r3, #0
}
    2740:	0018      	movs	r0, r3
    2742:	46bd      	mov	sp, r7
    2744:	b004      	add	sp, #16
    2746:	bd80      	pop	{r7, pc}
    2748:	41004400 	.word	0x41004400

0000274c <port_get_group_from_gpio_pin>:
{
    274c:	b580      	push	{r7, lr}
    274e:	b082      	sub	sp, #8
    2750:	af00      	add	r7, sp, #0
    2752:	0002      	movs	r2, r0
    2754:	1dfb      	adds	r3, r7, #7
    2756:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2758:	1dfb      	adds	r3, r7, #7
    275a:	781b      	ldrb	r3, [r3, #0]
    275c:	0018      	movs	r0, r3
    275e:	4b03      	ldr	r3, [pc, #12]	; (276c <port_get_group_from_gpio_pin+0x20>)
    2760:	4798      	blx	r3
    2762:	0003      	movs	r3, r0
}
    2764:	0018      	movs	r0, r3
    2766:	46bd      	mov	sp, r7
    2768:	b002      	add	sp, #8
    276a:	bd80      	pop	{r7, pc}
    276c:	000026ed 	.word	0x000026ed

00002770 <port_pin_set_output_level>:
{
    2770:	b580      	push	{r7, lr}
    2772:	b084      	sub	sp, #16
    2774:	af00      	add	r7, sp, #0
    2776:	0002      	movs	r2, r0
    2778:	1dfb      	adds	r3, r7, #7
    277a:	701a      	strb	r2, [r3, #0]
    277c:	1dbb      	adds	r3, r7, #6
    277e:	1c0a      	adds	r2, r1, #0
    2780:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2782:	1dfb      	adds	r3, r7, #7
    2784:	781b      	ldrb	r3, [r3, #0]
    2786:	0018      	movs	r0, r3
    2788:	4b0d      	ldr	r3, [pc, #52]	; (27c0 <port_pin_set_output_level+0x50>)
    278a:	4798      	blx	r3
    278c:	0003      	movs	r3, r0
    278e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2790:	1dfb      	adds	r3, r7, #7
    2792:	781b      	ldrb	r3, [r3, #0]
    2794:	221f      	movs	r2, #31
    2796:	4013      	ands	r3, r2
    2798:	2201      	movs	r2, #1
    279a:	409a      	lsls	r2, r3
    279c:	0013      	movs	r3, r2
    279e:	60bb      	str	r3, [r7, #8]
	if (level) {
    27a0:	1dbb      	adds	r3, r7, #6
    27a2:	781b      	ldrb	r3, [r3, #0]
    27a4:	2b00      	cmp	r3, #0
    27a6:	d003      	beq.n	27b0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    27a8:	68fb      	ldr	r3, [r7, #12]
    27aa:	68ba      	ldr	r2, [r7, #8]
    27ac:	619a      	str	r2, [r3, #24]
}
    27ae:	e002      	b.n	27b6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    27b0:	68fb      	ldr	r3, [r7, #12]
    27b2:	68ba      	ldr	r2, [r7, #8]
    27b4:	615a      	str	r2, [r3, #20]
}
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	46bd      	mov	sp, r7
    27ba:	b004      	add	sp, #16
    27bc:	bd80      	pop	{r7, pc}
    27be:	46c0      	nop			; (mov r8, r8)
    27c0:	0000274d 	.word	0x0000274d

000027c4 <system_interrupt_enter_critical_section>:
{
    27c4:	b580      	push	{r7, lr}
    27c6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    27c8:	4b02      	ldr	r3, [pc, #8]	; (27d4 <system_interrupt_enter_critical_section+0x10>)
    27ca:	4798      	blx	r3
}
    27cc:	46c0      	nop			; (mov r8, r8)
    27ce:	46bd      	mov	sp, r7
    27d0:	bd80      	pop	{r7, pc}
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	0001083d 	.word	0x0001083d

000027d8 <system_interrupt_leave_critical_section>:
{
    27d8:	b580      	push	{r7, lr}
    27da:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    27dc:	4b02      	ldr	r3, [pc, #8]	; (27e8 <system_interrupt_leave_critical_section+0x10>)
    27de:	4798      	blx	r3
}
    27e0:	46c0      	nop			; (mov r8, r8)
    27e2:	46bd      	mov	sp, r7
    27e4:	bd80      	pop	{r7, pc}
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	00010891 	.word	0x00010891

000027ec <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
    27ec:	b580      	push	{r7, lr}
    27ee:	b084      	sub	sp, #16
    27f0:	af00      	add	r7, sp, #0
    27f2:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
    27f4:	4b0d      	ldr	r3, [pc, #52]	; (282c <spi_lock+0x40>)
    27f6:	4798      	blx	r3

	if (module->locked) {
    27f8:	687b      	ldr	r3, [r7, #4]
    27fa:	791b      	ldrb	r3, [r3, #4]
    27fc:	b2db      	uxtb	r3, r3
    27fe:	2b00      	cmp	r3, #0
    2800:	d004      	beq.n	280c <spi_lock+0x20>
		status = STATUS_BUSY;
    2802:	230f      	movs	r3, #15
    2804:	18fb      	adds	r3, r7, r3
    2806:	2205      	movs	r2, #5
    2808:	701a      	strb	r2, [r3, #0]
    280a:	e006      	b.n	281a <spi_lock+0x2e>
	} else {
		module->locked = true;
    280c:	687b      	ldr	r3, [r7, #4]
    280e:	2201      	movs	r2, #1
    2810:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
    2812:	230f      	movs	r3, #15
    2814:	18fb      	adds	r3, r7, r3
    2816:	2200      	movs	r2, #0
    2818:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
    281a:	4b05      	ldr	r3, [pc, #20]	; (2830 <spi_lock+0x44>)
    281c:	4798      	blx	r3

	return status;
    281e:	230f      	movs	r3, #15
    2820:	18fb      	adds	r3, r7, r3
    2822:	781b      	ldrb	r3, [r3, #0]
}
    2824:	0018      	movs	r0, r3
    2826:	46bd      	mov	sp, r7
    2828:	b004      	add	sp, #16
    282a:	bd80      	pop	{r7, pc}
    282c:	000027c5 	.word	0x000027c5
    2830:	000027d9 	.word	0x000027d9

00002834 <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
    283a:	6078      	str	r0, [r7, #4]
	module->locked = false;
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	2200      	movs	r2, #0
    2840:	711a      	strb	r2, [r3, #4]
}
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	46bd      	mov	sp, r7
    2846:	b002      	add	sp, #8
    2848:	bd80      	pop	{r7, pc}

0000284a <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    284a:	b580      	push	{r7, lr}
    284c:	b084      	sub	sp, #16
    284e:	af00      	add	r7, sp, #0
    2850:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2852:	687b      	ldr	r3, [r7, #4]
    2854:	681b      	ldr	r3, [r3, #0]
    2856:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2858:	68fb      	ldr	r3, [r7, #12]
    285a:	7e1b      	ldrb	r3, [r3, #24]
    285c:	b2db      	uxtb	r3, r3
    285e:	001a      	movs	r2, r3
    2860:	2301      	movs	r3, #1
    2862:	4013      	ands	r3, r2
    2864:	1e5a      	subs	r2, r3, #1
    2866:	4193      	sbcs	r3, r2
    2868:	b2db      	uxtb	r3, r3
}
    286a:	0018      	movs	r0, r3
    286c:	46bd      	mov	sp, r7
    286e:	b004      	add	sp, #16
    2870:	bd80      	pop	{r7, pc}

00002872 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    2872:	b580      	push	{r7, lr}
    2874:	b084      	sub	sp, #16
    2876:	af00      	add	r7, sp, #0
    2878:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    287a:	687b      	ldr	r3, [r7, #4]
    287c:	681b      	ldr	r3, [r3, #0]
    287e:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2880:	68fb      	ldr	r3, [r7, #12]
    2882:	7e1b      	ldrb	r3, [r3, #24]
    2884:	b2db      	uxtb	r3, r3
    2886:	001a      	movs	r2, r3
    2888:	2304      	movs	r3, #4
    288a:	4013      	ands	r3, r2
    288c:	1e5a      	subs	r2, r3, #1
    288e:	4193      	sbcs	r3, r2
    2890:	b2db      	uxtb	r3, r3
}
    2892:	0018      	movs	r0, r3
    2894:	46bd      	mov	sp, r7
    2896:	b004      	add	sp, #16
    2898:	bd80      	pop	{r7, pc}
	...

0000289c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    289c:	b580      	push	{r7, lr}
    289e:	b084      	sub	sp, #16
    28a0:	af00      	add	r7, sp, #0
    28a2:	6078      	str	r0, [r7, #4]
    28a4:	000a      	movs	r2, r1
    28a6:	1cbb      	adds	r3, r7, #2
    28a8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	681b      	ldr	r3, [r3, #0]
    28ae:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    28b0:	687b      	ldr	r3, [r7, #4]
    28b2:	0018      	movs	r0, r3
    28b4:	4b0a      	ldr	r3, [pc, #40]	; (28e0 <spi_write+0x44>)
    28b6:	4798      	blx	r3
    28b8:	0003      	movs	r3, r0
    28ba:	001a      	movs	r2, r3
    28bc:	2301      	movs	r3, #1
    28be:	4053      	eors	r3, r2
    28c0:	b2db      	uxtb	r3, r3
    28c2:	2b00      	cmp	r3, #0
    28c4:	d001      	beq.n	28ca <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    28c6:	2305      	movs	r3, #5
    28c8:	e006      	b.n	28d8 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    28ca:	1cbb      	adds	r3, r7, #2
    28cc:	881b      	ldrh	r3, [r3, #0]
    28ce:	05db      	lsls	r3, r3, #23
    28d0:	0dda      	lsrs	r2, r3, #23
    28d2:	68fb      	ldr	r3, [r7, #12]
    28d4:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    28d6:	2300      	movs	r3, #0
}
    28d8:	0018      	movs	r0, r3
    28da:	46bd      	mov	sp, r7
    28dc:	b004      	add	sp, #16
    28de:	bd80      	pop	{r7, pc}
    28e0:	0000284b 	.word	0x0000284b

000028e4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    28e4:	b580      	push	{r7, lr}
    28e6:	b084      	sub	sp, #16
    28e8:	af00      	add	r7, sp, #0
    28ea:	6078      	str	r0, [r7, #4]
    28ec:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    28ee:	687b      	ldr	r3, [r7, #4]
    28f0:	681b      	ldr	r3, [r3, #0]
    28f2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    28f4:	687b      	ldr	r3, [r7, #4]
    28f6:	0018      	movs	r0, r3
    28f8:	4b1b      	ldr	r3, [pc, #108]	; (2968 <spi_read+0x84>)
    28fa:	4798      	blx	r3
    28fc:	0003      	movs	r3, r0
    28fe:	001a      	movs	r2, r3
    2900:	2301      	movs	r3, #1
    2902:	4053      	eors	r3, r2
    2904:	b2db      	uxtb	r3, r3
    2906:	2b00      	cmp	r3, #0
    2908:	d001      	beq.n	290e <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    290a:	2310      	movs	r3, #16
    290c:	e027      	b.n	295e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    290e:	230f      	movs	r3, #15
    2910:	18fb      	adds	r3, r7, r3
    2912:	2200      	movs	r2, #0
    2914:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2916:	68bb      	ldr	r3, [r7, #8]
    2918:	8b5b      	ldrh	r3, [r3, #26]
    291a:	b29b      	uxth	r3, r3
    291c:	001a      	movs	r2, r3
    291e:	2304      	movs	r3, #4
    2920:	4013      	ands	r3, r2
    2922:	d006      	beq.n	2932 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    2924:	230f      	movs	r3, #15
    2926:	18fb      	adds	r3, r7, r3
    2928:	221e      	movs	r2, #30
    292a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    292c:	68bb      	ldr	r3, [r7, #8]
    292e:	2204      	movs	r2, #4
    2930:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	799b      	ldrb	r3, [r3, #6]
    2936:	2b01      	cmp	r3, #1
    2938:	d108      	bne.n	294c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    293a:	68bb      	ldr	r3, [r7, #8]
    293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    293e:	b29b      	uxth	r3, r3
    2940:	05db      	lsls	r3, r3, #23
    2942:	0ddb      	lsrs	r3, r3, #23
    2944:	b29a      	uxth	r2, r3
    2946:	683b      	ldr	r3, [r7, #0]
    2948:	801a      	strh	r2, [r3, #0]
    294a:	e005      	b.n	2958 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    294c:	68bb      	ldr	r3, [r7, #8]
    294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2950:	b2db      	uxtb	r3, r3
    2952:	b29a      	uxth	r2, r3
    2954:	683b      	ldr	r3, [r7, #0]
    2956:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    2958:	230f      	movs	r3, #15
    295a:	18fb      	adds	r3, r7, r3
    295c:	781b      	ldrb	r3, [r3, #0]
}
    295e:	0018      	movs	r0, r3
    2960:	46bd      	mov	sp, r7
    2962:	b004      	add	sp, #16
    2964:	bd80      	pop	{r7, pc}
    2966:	46c0      	nop			; (mov r8, r8)
    2968:	00002873 	.word	0x00002873

0000296c <_at25dfx_get_device_id>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
    296c:	b580      	push	{r7, lr}
    296e:	b082      	sub	sp, #8
    2970:	af00      	add	r7, sp, #0
    2972:	0002      	movs	r2, r0
    2974:	1dfb      	adds	r3, r7, #7
    2976:	701a      	strb	r2, [r3, #0]
	switch (type) {
    2978:	1dfb      	adds	r3, r7, #7
    297a:	781b      	ldrb	r3, [r3, #0]
    297c:	2b09      	cmp	r3, #9
    297e:	d818      	bhi.n	29b2 <_at25dfx_get_device_id+0x46>
    2980:	009a      	lsls	r2, r3, #2
    2982:	4b0e      	ldr	r3, [pc, #56]	; (29bc <_at25dfx_get_device_id+0x50>)
    2984:	18d3      	adds	r3, r2, r3
    2986:	681b      	ldr	r3, [r3, #0]
    2988:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;
    298a:	4b0d      	ldr	r3, [pc, #52]	; (29c0 <_at25dfx_get_device_id+0x54>)
    298c:	e012      	b.n	29b4 <_at25dfx_get_device_id+0x48>

	case AT25DFX_021:
		return 0x00431f;
    298e:	4b0d      	ldr	r3, [pc, #52]	; (29c4 <_at25dfx_get_device_id+0x58>)
    2990:	e010      	b.n	29b4 <_at25dfx_get_device_id+0x48>

	case AT25DFX_041A:
		return 0x01441f;
    2992:	4b0d      	ldr	r3, [pc, #52]	; (29c8 <_at25dfx_get_device_id+0x5c>)
    2994:	e00e      	b.n	29b4 <_at25dfx_get_device_id+0x48>

	case AT25DFX_081:
		return 0x02451f;
    2996:	4b0d      	ldr	r3, [pc, #52]	; (29cc <_at25dfx_get_device_id+0x60>)
    2998:	e00c      	b.n	29b4 <_at25dfx_get_device_id+0x48>

	case AT25DFX_081A:
		return 0x01451f;
    299a:	4b0d      	ldr	r3, [pc, #52]	; (29d0 <_at25dfx_get_device_id+0x64>)
    299c:	e00a      	b.n	29b4 <_at25dfx_get_device_id+0x48>

	case AT25DFX_161:
		return 0x02461f;
    299e:	4b0d      	ldr	r3, [pc, #52]	; (29d4 <_at25dfx_get_device_id+0x68>)
    29a0:	e008      	b.n	29b4 <_at25dfx_get_device_id+0x48>

	case AT25DFX_L161:
		return 0x03461f;
    29a2:	4b0d      	ldr	r3, [pc, #52]	; (29d8 <_at25dfx_get_device_id+0x6c>)
    29a4:	e006      	b.n	29b4 <_at25dfx_get_device_id+0x48>

	case AT25DFX_Q161:
		return 0x00861f;
    29a6:	4b0d      	ldr	r3, [pc, #52]	; (29dc <_at25dfx_get_device_id+0x70>)
    29a8:	e004      	b.n	29b4 <_at25dfx_get_device_id+0x48>

	case AT25DFX_321A:
		return 0x01471f;
    29aa:	4b0d      	ldr	r3, [pc, #52]	; (29e0 <_at25dfx_get_device_id+0x74>)
    29ac:	e002      	b.n	29b4 <_at25dfx_get_device_id+0x48>

	case AT25DFX_641:
		return 0x00481f;
    29ae:	4b0d      	ldr	r3, [pc, #52]	; (29e4 <_at25dfx_get_device_id+0x78>)
    29b0:	e000      	b.n	29b4 <_at25dfx_get_device_id+0x48>

	default:
		Assert(false);
		return 0;
    29b2:	2300      	movs	r3, #0
	}
}
    29b4:	0018      	movs	r0, r3
    29b6:	46bd      	mov	sp, r7
    29b8:	b002      	add	sp, #8
    29ba:	bd80      	pop	{r7, pc}
    29bc:	000193f8 	.word	0x000193f8
    29c0:	0000651f 	.word	0x0000651f
    29c4:	0000431f 	.word	0x0000431f
    29c8:	0001441f 	.word	0x0001441f
    29cc:	0002451f 	.word	0x0002451f
    29d0:	0001451f 	.word	0x0001451f
    29d4:	0002461f 	.word	0x0002461f
    29d8:	0003461f 	.word	0x0003461f
    29dc:	0000861f 	.word	0x0000861f
    29e0:	0001471f 	.word	0x0001471f
    29e4:	0000481f 	.word	0x0000481f

000029e8 <_at25dfx_get_device_size>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
    29e8:	b580      	push	{r7, lr}
    29ea:	b082      	sub	sp, #8
    29ec:	af00      	add	r7, sp, #0
    29ee:	0002      	movs	r2, r0
    29f0:	1dfb      	adds	r3, r7, #7
    29f2:	701a      	strb	r2, [r3, #0]
	switch (type) {
    29f4:	1dfb      	adds	r3, r7, #7
    29f6:	781b      	ldrb	r3, [r3, #0]
    29f8:	2b09      	cmp	r3, #9
    29fa:	d819      	bhi.n	2a30 <_at25dfx_get_device_size+0x48>
    29fc:	009a      	lsls	r2, r3, #2
    29fe:	4b0f      	ldr	r3, [pc, #60]	; (2a3c <_at25dfx_get_device_size+0x54>)
    2a00:	18d3      	adds	r3, r2, r3
    2a02:	681b      	ldr	r3, [r3, #0]
    2a04:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;
    2a06:	2380      	movs	r3, #128	; 0x80
    2a08:	025b      	lsls	r3, r3, #9
    2a0a:	e012      	b.n	2a32 <_at25dfx_get_device_size+0x4a>

	case AT25DFX_021:
		return 256 * 1024UL;
    2a0c:	2380      	movs	r3, #128	; 0x80
    2a0e:	02db      	lsls	r3, r3, #11
    2a10:	e00f      	b.n	2a32 <_at25dfx_get_device_size+0x4a>

	case AT25DFX_041A:
		return 512 * 1024UL;
    2a12:	2380      	movs	r3, #128	; 0x80
    2a14:	031b      	lsls	r3, r3, #12
    2a16:	e00c      	b.n	2a32 <_at25dfx_get_device_size+0x4a>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
    2a18:	2380      	movs	r3, #128	; 0x80
    2a1a:	035b      	lsls	r3, r3, #13
    2a1c:	e009      	b.n	2a32 <_at25dfx_get_device_size+0x4a>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
    2a1e:	2380      	movs	r3, #128	; 0x80
    2a20:	039b      	lsls	r3, r3, #14
    2a22:	e006      	b.n	2a32 <_at25dfx_get_device_size+0x4a>

	case AT25DFX_321A:
		return 4096 * 1024UL;
    2a24:	2380      	movs	r3, #128	; 0x80
    2a26:	03db      	lsls	r3, r3, #15
    2a28:	e003      	b.n	2a32 <_at25dfx_get_device_size+0x4a>

	case AT25DFX_641:
		return 8192 * 1024UL;
    2a2a:	2380      	movs	r3, #128	; 0x80
    2a2c:	041b      	lsls	r3, r3, #16
    2a2e:	e000      	b.n	2a32 <_at25dfx_get_device_size+0x4a>

	default:
		Assert(false);
		return 0;
    2a30:	2300      	movs	r3, #0
	}
}
    2a32:	0018      	movs	r0, r3
    2a34:	46bd      	mov	sp, r7
    2a36:	b002      	add	sp, #8
    2a38:	bd80      	pop	{r7, pc}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	00019420 	.word	0x00019420

00002a40 <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
    2a40:	b580      	push	{r7, lr}
    2a42:	b082      	sub	sp, #8
    2a44:	af00      	add	r7, sp, #0
    2a46:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
    2a48:	687b      	ldr	r3, [r7, #4]
    2a4a:	795b      	ldrb	r3, [r3, #5]
    2a4c:	2100      	movs	r1, #0
    2a4e:	0018      	movs	r0, r3
    2a50:	4b02      	ldr	r3, [pc, #8]	; (2a5c <_at25dfx_chip_select+0x1c>)
    2a52:	4798      	blx	r3
}
    2a54:	46c0      	nop			; (mov r8, r8)
    2a56:	46bd      	mov	sp, r7
    2a58:	b002      	add	sp, #8
    2a5a:	bd80      	pop	{r7, pc}
    2a5c:	00002771 	.word	0x00002771

00002a60 <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
    2a60:	b580      	push	{r7, lr}
    2a62:	b082      	sub	sp, #8
    2a64:	af00      	add	r7, sp, #0
    2a66:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
    2a68:	687b      	ldr	r3, [r7, #4]
    2a6a:	795b      	ldrb	r3, [r3, #5]
    2a6c:	2101      	movs	r1, #1
    2a6e:	0018      	movs	r0, r3
    2a70:	4b02      	ldr	r3, [pc, #8]	; (2a7c <_at25dfx_chip_deselect+0x1c>)
    2a72:	4798      	blx	r3
}
    2a74:	46c0      	nop			; (mov r8, r8)
    2a76:	46bd      	mov	sp, r7
    2a78:	b002      	add	sp, #8
    2a7a:	bd80      	pop	{r7, pc}
    2a7c:	00002771 	.word	0x00002771

00002a80 <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
    2a80:	b084      	sub	sp, #16
    2a82:	b5b0      	push	{r4, r5, r7, lr}
    2a84:	b084      	sub	sp, #16
    2a86:	af00      	add	r7, sp, #0
    2a88:	6078      	str	r0, [r7, #4]
    2a8a:	2004      	movs	r0, #4
    2a8c:	2420      	movs	r4, #32
    2a8e:	46a4      	mov	ip, r4
    2a90:	44bc      	add	ip, r7
    2a92:	4460      	add	r0, ip
    2a94:	6001      	str	r1, [r0, #0]
    2a96:	6042      	str	r2, [r0, #4]
    2a98:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    2a9a:	2304      	movs	r3, #4
    2a9c:	2220      	movs	r2, #32
    2a9e:	4694      	mov	ip, r2
    2aa0:	44bc      	add	ip, r7
    2aa2:	4463      	add	r3, ip
    2aa4:	781a      	ldrb	r2, [r3, #0]
    2aa6:	2308      	movs	r3, #8
    2aa8:	18fb      	adds	r3, r7, r3
    2aaa:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
    2aac:	2304      	movs	r3, #4
    2aae:	2220      	movs	r2, #32
    2ab0:	4694      	mov	ip, r2
    2ab2:	44bc      	add	ip, r7
    2ab4:	4463      	add	r3, ip
    2ab6:	785b      	ldrb	r3, [r3, #1]
    2ab8:	2b01      	cmp	r3, #1
    2aba:	d91f      	bls.n	2afc <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
    2abc:	2304      	movs	r3, #4
    2abe:	2220      	movs	r2, #32
    2ac0:	4694      	mov	ip, r2
    2ac2:	44bc      	add	ip, r7
    2ac4:	4463      	add	r3, ip
    2ac6:	685b      	ldr	r3, [r3, #4]
    2ac8:	b2da      	uxtb	r2, r3
    2aca:	2308      	movs	r3, #8
    2acc:	18fb      	adds	r3, r7, r3
    2ace:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    2ad0:	2304      	movs	r3, #4
    2ad2:	2220      	movs	r2, #32
    2ad4:	4694      	mov	ip, r2
    2ad6:	44bc      	add	ip, r7
    2ad8:	4463      	add	r3, ip
    2ada:	685b      	ldr	r3, [r3, #4]
    2adc:	0a1b      	lsrs	r3, r3, #8
    2ade:	b2da      	uxtb	r2, r3
    2ae0:	2308      	movs	r3, #8
    2ae2:	18fb      	adds	r3, r7, r3
    2ae4:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    2ae6:	2304      	movs	r3, #4
    2ae8:	2220      	movs	r2, #32
    2aea:	4694      	mov	ip, r2
    2aec:	44bc      	add	ip, r7
    2aee:	4463      	add	r3, ip
    2af0:	685b      	ldr	r3, [r3, #4]
    2af2:	0c1b      	lsrs	r3, r3, #16
    2af4:	b2da      	uxtb	r2, r3
    2af6:	2308      	movs	r3, #8
    2af8:	18fb      	adds	r3, r7, r3
    2afa:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
    2afc:	687b      	ldr	r3, [r7, #4]
    2afe:	0018      	movs	r0, r3
    2b00:	4b1d      	ldr	r3, [pc, #116]	; (2b78 <_at25dfx_chip_issue_read_command_wait+0xf8>)
    2b02:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    2b04:	687b      	ldr	r3, [r7, #4]
    2b06:	6818      	ldr	r0, [r3, #0]
    2b08:	2304      	movs	r3, #4
    2b0a:	2220      	movs	r2, #32
    2b0c:	4694      	mov	ip, r2
    2b0e:	44bc      	add	ip, r7
    2b10:	4463      	add	r3, ip
    2b12:	785b      	ldrb	r3, [r3, #1]
    2b14:	b29a      	uxth	r2, r3
    2b16:	230f      	movs	r3, #15
    2b18:	18fc      	adds	r4, r7, r3
    2b1a:	2308      	movs	r3, #8
    2b1c:	18fb      	adds	r3, r7, r3
    2b1e:	0019      	movs	r1, r3
    2b20:	4b16      	ldr	r3, [pc, #88]	; (2b7c <_at25dfx_chip_issue_read_command_wait+0xfc>)
    2b22:	4798      	blx	r3
    2b24:	0003      	movs	r3, r0
    2b26:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
    2b28:	2304      	movs	r3, #4
    2b2a:	2220      	movs	r2, #32
    2b2c:	4694      	mov	ip, r2
    2b2e:	44bc      	add	ip, r7
    2b30:	4463      	add	r3, ip
    2b32:	899b      	ldrh	r3, [r3, #12]
    2b34:	2b00      	cmp	r3, #0
    2b36:	d014      	beq.n	2b62 <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    2b38:	687b      	ldr	r3, [r7, #4]
    2b3a:	6818      	ldr	r0, [r3, #0]
    2b3c:	2304      	movs	r3, #4
    2b3e:	2220      	movs	r2, #32
    2b40:	4694      	mov	ip, r2
    2b42:	44bc      	add	ip, r7
    2b44:	4463      	add	r3, ip
    2b46:	6899      	ldr	r1, [r3, #8]
    2b48:	2304      	movs	r3, #4
    2b4a:	2220      	movs	r2, #32
    2b4c:	4694      	mov	ip, r2
    2b4e:	44bc      	add	ip, r7
    2b50:	4463      	add	r3, ip
    2b52:	899a      	ldrh	r2, [r3, #12]
    2b54:	230f      	movs	r3, #15
    2b56:	18fc      	adds	r4, r7, r3
    2b58:	2300      	movs	r3, #0
    2b5a:	4d09      	ldr	r5, [pc, #36]	; (2b80 <_at25dfx_chip_issue_read_command_wait+0x100>)
    2b5c:	47a8      	blx	r5
    2b5e:	0003      	movs	r3, r0
    2b60:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	0018      	movs	r0, r3
    2b66:	4b07      	ldr	r3, [pc, #28]	; (2b84 <_at25dfx_chip_issue_read_command_wait+0x104>)
    2b68:	4798      	blx	r3
}
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	46bd      	mov	sp, r7
    2b6e:	b004      	add	sp, #16
    2b70:	bcb0      	pop	{r4, r5, r7}
    2b72:	bc08      	pop	{r3}
    2b74:	b004      	add	sp, #16
    2b76:	4718      	bx	r3
    2b78:	00002a41 	.word	0x00002a41
    2b7c:	0000a425 	.word	0x0000a425
    2b80:	0000a201 	.word	0x0000a201
    2b84:	00002a61 	.word	0x00002a61

00002b88 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
    2b88:	b084      	sub	sp, #16
    2b8a:	b590      	push	{r4, r7, lr}
    2b8c:	b085      	sub	sp, #20
    2b8e:	af00      	add	r7, sp, #0
    2b90:	6078      	str	r0, [r7, #4]
    2b92:	2004      	movs	r0, #4
    2b94:	2420      	movs	r4, #32
    2b96:	46a4      	mov	ip, r4
    2b98:	44bc      	add	ip, r7
    2b9a:	4460      	add	r0, ip
    2b9c:	6001      	str	r1, [r0, #0]
    2b9e:	6042      	str	r2, [r0, #4]
    2ba0:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    2ba2:	2304      	movs	r3, #4
    2ba4:	2220      	movs	r2, #32
    2ba6:	4694      	mov	ip, r2
    2ba8:	44bc      	add	ip, r7
    2baa:	4463      	add	r3, ip
    2bac:	781a      	ldrb	r2, [r3, #0]
    2bae:	2308      	movs	r3, #8
    2bb0:	18fb      	adds	r3, r7, r3
    2bb2:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
    2bb4:	2304      	movs	r3, #4
    2bb6:	2220      	movs	r2, #32
    2bb8:	4694      	mov	ip, r2
    2bba:	44bc      	add	ip, r7
    2bbc:	4463      	add	r3, ip
    2bbe:	785b      	ldrb	r3, [r3, #1]
    2bc0:	2b01      	cmp	r3, #1
    2bc2:	d91f      	bls.n	2c04 <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
    2bc4:	2304      	movs	r3, #4
    2bc6:	2220      	movs	r2, #32
    2bc8:	4694      	mov	ip, r2
    2bca:	44bc      	add	ip, r7
    2bcc:	4463      	add	r3, ip
    2bce:	685b      	ldr	r3, [r3, #4]
    2bd0:	b2da      	uxtb	r2, r3
    2bd2:	2308      	movs	r3, #8
    2bd4:	18fb      	adds	r3, r7, r3
    2bd6:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    2bd8:	2304      	movs	r3, #4
    2bda:	2220      	movs	r2, #32
    2bdc:	4694      	mov	ip, r2
    2bde:	44bc      	add	ip, r7
    2be0:	4463      	add	r3, ip
    2be2:	685b      	ldr	r3, [r3, #4]
    2be4:	0a1b      	lsrs	r3, r3, #8
    2be6:	b2da      	uxtb	r2, r3
    2be8:	2308      	movs	r3, #8
    2bea:	18fb      	adds	r3, r7, r3
    2bec:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    2bee:	2304      	movs	r3, #4
    2bf0:	2220      	movs	r2, #32
    2bf2:	4694      	mov	ip, r2
    2bf4:	44bc      	add	ip, r7
    2bf6:	4463      	add	r3, ip
    2bf8:	685b      	ldr	r3, [r3, #4]
    2bfa:	0c1b      	lsrs	r3, r3, #16
    2bfc:	b2da      	uxtb	r2, r3
    2bfe:	2308      	movs	r3, #8
    2c00:	18fb      	adds	r3, r7, r3
    2c02:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
    2c04:	687b      	ldr	r3, [r7, #4]
    2c06:	0018      	movs	r0, r3
    2c08:	4b1d      	ldr	r3, [pc, #116]	; (2c80 <_at25dfx_chip_issue_write_command_wait+0xf8>)
    2c0a:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    2c0c:	687b      	ldr	r3, [r7, #4]
    2c0e:	6818      	ldr	r0, [r3, #0]
    2c10:	2304      	movs	r3, #4
    2c12:	2220      	movs	r2, #32
    2c14:	4694      	mov	ip, r2
    2c16:	44bc      	add	ip, r7
    2c18:	4463      	add	r3, ip
    2c1a:	785b      	ldrb	r3, [r3, #1]
    2c1c:	b29a      	uxth	r2, r3
    2c1e:	230f      	movs	r3, #15
    2c20:	18fc      	adds	r4, r7, r3
    2c22:	2308      	movs	r3, #8
    2c24:	18fb      	adds	r3, r7, r3
    2c26:	0019      	movs	r1, r3
    2c28:	4b16      	ldr	r3, [pc, #88]	; (2c84 <_at25dfx_chip_issue_write_command_wait+0xfc>)
    2c2a:	4798      	blx	r3
    2c2c:	0003      	movs	r3, r0
    2c2e:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
    2c30:	2304      	movs	r3, #4
    2c32:	2220      	movs	r2, #32
    2c34:	4694      	mov	ip, r2
    2c36:	44bc      	add	ip, r7
    2c38:	4463      	add	r3, ip
    2c3a:	899b      	ldrh	r3, [r3, #12]
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d014      	beq.n	2c6a <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    2c40:	687b      	ldr	r3, [r7, #4]
    2c42:	6818      	ldr	r0, [r3, #0]
    2c44:	2304      	movs	r3, #4
    2c46:	2220      	movs	r2, #32
    2c48:	4694      	mov	ip, r2
    2c4a:	44bc      	add	ip, r7
    2c4c:	4463      	add	r3, ip
    2c4e:	6899      	ldr	r1, [r3, #8]
    2c50:	2304      	movs	r3, #4
    2c52:	2220      	movs	r2, #32
    2c54:	4694      	mov	ip, r2
    2c56:	44bc      	add	ip, r7
    2c58:	4463      	add	r3, ip
    2c5a:	899b      	ldrh	r3, [r3, #12]
    2c5c:	220f      	movs	r2, #15
    2c5e:	18bc      	adds	r4, r7, r2
    2c60:	001a      	movs	r2, r3
    2c62:	4b08      	ldr	r3, [pc, #32]	; (2c84 <_at25dfx_chip_issue_write_command_wait+0xfc>)
    2c64:	4798      	blx	r3
    2c66:	0003      	movs	r3, r0
    2c68:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
    2c6a:	687b      	ldr	r3, [r7, #4]
    2c6c:	0018      	movs	r0, r3
    2c6e:	4b06      	ldr	r3, [pc, #24]	; (2c88 <_at25dfx_chip_issue_write_command_wait+0x100>)
    2c70:	4798      	blx	r3
}
    2c72:	46c0      	nop			; (mov r8, r8)
    2c74:	46bd      	mov	sp, r7
    2c76:	b005      	add	sp, #20
    2c78:	bc90      	pop	{r4, r7}
    2c7a:	bc08      	pop	{r3}
    2c7c:	b004      	add	sp, #16
    2c7e:	4718      	bx	r3
    2c80:	00002a41 	.word	0x00002a41
    2c84:	0000a425 	.word	0x0000a425
    2c88:	00002a61 	.word	0x00002a61

00002c8c <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
    2c8c:	b590      	push	{r4, r7, lr}
    2c8e:	b085      	sub	sp, #20
    2c90:	af00      	add	r7, sp, #0
    2c92:	6078      	str	r0, [r7, #4]
	enum status_code status;
	uint16_t status_reg = 0;
    2c94:	230c      	movs	r3, #12
    2c96:	18fb      	adds	r3, r7, r3
    2c98:	2200      	movs	r2, #0
    2c9a:	801a      	strh	r2, [r3, #0]

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    2c9c:	46c0      	nop			; (mov r8, r8)
    2c9e:	687b      	ldr	r3, [r7, #4]
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	0018      	movs	r0, r3
    2ca4:	4b3c      	ldr	r3, [pc, #240]	; (2d98 <_at25dfx_chip_get_nonbusy_status+0x10c>)
    2ca6:	4798      	blx	r3
    2ca8:	0003      	movs	r3, r0
    2caa:	001a      	movs	r2, r3
    2cac:	2301      	movs	r3, #1
    2cae:	4053      	eors	r3, r2
    2cb0:	b2db      	uxtb	r3, r3
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	d1f3      	bne.n	2c9e <_at25dfx_chip_get_nonbusy_status+0x12>
	}

	_at25dfx_chip_select(chip);
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	0018      	movs	r0, r3
    2cba:	4b38      	ldr	r3, [pc, #224]	; (2d9c <_at25dfx_chip_get_nonbusy_status+0x110>)
    2cbc:	4798      	blx	r3
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
    2cbe:	687b      	ldr	r3, [r7, #4]
    2cc0:	681b      	ldr	r3, [r3, #0]
    2cc2:	220f      	movs	r2, #15
    2cc4:	18bc      	adds	r4, r7, r2
    2cc6:	2105      	movs	r1, #5
    2cc8:	0018      	movs	r0, r3
    2cca:	4b35      	ldr	r3, [pc, #212]	; (2da0 <_at25dfx_chip_get_nonbusy_status+0x114>)
    2ccc:	4798      	blx	r3
    2cce:	0003      	movs	r3, r0
    2cd0:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    2cd2:	46c0      	nop			; (mov r8, r8)
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	681b      	ldr	r3, [r3, #0]
    2cd8:	0018      	movs	r0, r3
    2cda:	4b32      	ldr	r3, [pc, #200]	; (2da4 <_at25dfx_chip_get_nonbusy_status+0x118>)
    2cdc:	4798      	blx	r3
    2cde:	0003      	movs	r3, r0
    2ce0:	001a      	movs	r2, r3
    2ce2:	2301      	movs	r3, #1
    2ce4:	4053      	eors	r3, r2
    2ce6:	b2db      	uxtb	r3, r3
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d1f3      	bne.n	2cd4 <_at25dfx_chip_get_nonbusy_status+0x48>
	}
	status = spi_read(chip->spi, &status_reg);
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	681b      	ldr	r3, [r3, #0]
    2cf0:	220f      	movs	r2, #15
    2cf2:	18bc      	adds	r4, r7, r2
    2cf4:	220c      	movs	r2, #12
    2cf6:	18ba      	adds	r2, r7, r2
    2cf8:	0011      	movs	r1, r2
    2cfa:	0018      	movs	r0, r3
    2cfc:	4b2a      	ldr	r3, [pc, #168]	; (2da8 <_at25dfx_chip_get_nonbusy_status+0x11c>)
    2cfe:	4798      	blx	r3
    2d00:	0003      	movs	r3, r0
    2d02:	7023      	strb	r3, [r4, #0]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    2d04:	46c0      	nop			; (mov r8, r8)
    2d06:	687b      	ldr	r3, [r7, #4]
    2d08:	681b      	ldr	r3, [r3, #0]
    2d0a:	0018      	movs	r0, r3
    2d0c:	4b22      	ldr	r3, [pc, #136]	; (2d98 <_at25dfx_chip_get_nonbusy_status+0x10c>)
    2d0e:	4798      	blx	r3
    2d10:	0003      	movs	r3, r0
    2d12:	001a      	movs	r2, r3
    2d14:	2301      	movs	r3, #1
    2d16:	4053      	eors	r3, r2
    2d18:	b2db      	uxtb	r3, r3
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	d1f3      	bne.n	2d06 <_at25dfx_chip_get_nonbusy_status+0x7a>
		}
		status = spi_write(chip->spi, 0);
    2d1e:	687b      	ldr	r3, [r7, #4]
    2d20:	681b      	ldr	r3, [r3, #0]
    2d22:	220f      	movs	r2, #15
    2d24:	18bc      	adds	r4, r7, r2
    2d26:	2100      	movs	r1, #0
    2d28:	0018      	movs	r0, r3
    2d2a:	4b1d      	ldr	r3, [pc, #116]	; (2da0 <_at25dfx_chip_get_nonbusy_status+0x114>)
    2d2c:	4798      	blx	r3
    2d2e:	0003      	movs	r3, r0
    2d30:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	687b      	ldr	r3, [r7, #4]
    2d36:	681b      	ldr	r3, [r3, #0]
    2d38:	0018      	movs	r0, r3
    2d3a:	4b1a      	ldr	r3, [pc, #104]	; (2da4 <_at25dfx_chip_get_nonbusy_status+0x118>)
    2d3c:	4798      	blx	r3
    2d3e:	0003      	movs	r3, r0
    2d40:	001a      	movs	r2, r3
    2d42:	2301      	movs	r3, #1
    2d44:	4053      	eors	r3, r2
    2d46:	b2db      	uxtb	r3, r3
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d1f3      	bne.n	2d34 <_at25dfx_chip_get_nonbusy_status+0xa8>
		}
		status = spi_read(chip->spi, &status_reg);
    2d4c:	687b      	ldr	r3, [r7, #4]
    2d4e:	681b      	ldr	r3, [r3, #0]
    2d50:	220f      	movs	r2, #15
    2d52:	18bc      	adds	r4, r7, r2
    2d54:	220c      	movs	r2, #12
    2d56:	18ba      	adds	r2, r7, r2
    2d58:	0011      	movs	r1, r2
    2d5a:	0018      	movs	r0, r3
    2d5c:	4b12      	ldr	r3, [pc, #72]	; (2da8 <_at25dfx_chip_get_nonbusy_status+0x11c>)
    2d5e:	4798      	blx	r3
    2d60:	0003      	movs	r3, r0
    2d62:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    2d64:	230c      	movs	r3, #12
    2d66:	18fb      	adds	r3, r7, r3
    2d68:	881b      	ldrh	r3, [r3, #0]
    2d6a:	001a      	movs	r2, r3
    2d6c:	2301      	movs	r3, #1
    2d6e:	4013      	ands	r3, r2
    2d70:	d1c8      	bne.n	2d04 <_at25dfx_chip_get_nonbusy_status+0x78>

	_at25dfx_chip_deselect(chip);
    2d72:	687b      	ldr	r3, [r7, #4]
    2d74:	0018      	movs	r0, r3
    2d76:	4b0d      	ldr	r3, [pc, #52]	; (2dac <_at25dfx_chip_get_nonbusy_status+0x120>)
    2d78:	4798      	blx	r3

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
    2d7a:	230c      	movs	r3, #12
    2d7c:	18fb      	adds	r3, r7, r3
    2d7e:	881b      	ldrh	r3, [r3, #0]
    2d80:	001a      	movs	r2, r3
    2d82:	2320      	movs	r3, #32
    2d84:	4013      	ands	r3, r2
    2d86:	d001      	beq.n	2d8c <_at25dfx_chip_get_nonbusy_status+0x100>
		return STATUS_ERR_IO;
    2d88:	2310      	movs	r3, #16
    2d8a:	e000      	b.n	2d8e <_at25dfx_chip_get_nonbusy_status+0x102>
	}
	return STATUS_OK;
    2d8c:	2300      	movs	r3, #0
}
    2d8e:	0018      	movs	r0, r3
    2d90:	46bd      	mov	sp, r7
    2d92:	b005      	add	sp, #20
    2d94:	bd90      	pop	{r4, r7, pc}
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	0000284b 	.word	0x0000284b
    2d9c:	00002a41 	.word	0x00002a41
    2da0:	0000289d 	.word	0x0000289d
    2da4:	00002873 	.word	0x00002873
    2da8:	000028e5 	.word	0x000028e5
    2dac:	00002a61 	.word	0x00002a61

00002db0 <_at25dfx_chip_enable_write>:
 * or unprotecting sectors.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_enable_write(struct at25dfx_chip_module *chip)
{
    2db0:	b590      	push	{r4, r7, lr}
    2db2:	b089      	sub	sp, #36	; 0x24
    2db4:	af02      	add	r7, sp, #8
    2db6:	6078      	str	r0, [r7, #4]
	struct at25dfx_command cmd;

	cmd.opcode = AT25DFX_COMMAND_WRITE_ENABLE;
    2db8:	2308      	movs	r3, #8
    2dba:	18fb      	adds	r3, r7, r3
    2dbc:	2206      	movs	r2, #6
    2dbe:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    2dc0:	2308      	movs	r3, #8
    2dc2:	18fb      	adds	r3, r7, r3
    2dc4:	2201      	movs	r2, #1
    2dc6:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    2dc8:	2308      	movs	r3, #8
    2dca:	18fb      	adds	r3, r7, r3
    2dcc:	2200      	movs	r2, #0
    2dce:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    2dd0:	2308      	movs	r3, #8
    2dd2:	18fb      	adds	r3, r7, r3
    2dd4:	2200      	movs	r2, #0
    2dd6:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    2dd8:	2308      	movs	r3, #8
    2dda:	18fb      	adds	r3, r7, r3
    2ddc:	2200      	movs	r2, #0
    2dde:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    2de0:	2308      	movs	r3, #8
    2de2:	18fb      	adds	r3, r7, r3
    2de4:	6878      	ldr	r0, [r7, #4]
    2de6:	466a      	mov	r2, sp
    2de8:	68d9      	ldr	r1, [r3, #12]
    2dea:	6011      	str	r1, [r2, #0]
    2dec:	6819      	ldr	r1, [r3, #0]
    2dee:	685a      	ldr	r2, [r3, #4]
    2df0:	689b      	ldr	r3, [r3, #8]
    2df2:	4c03      	ldr	r4, [pc, #12]	; (2e00 <_at25dfx_chip_enable_write+0x50>)
    2df4:	47a0      	blx	r4
}
    2df6:	46c0      	nop			; (mov r8, r8)
    2df8:	46bd      	mov	sp, r7
    2dfa:	b007      	add	sp, #28
    2dfc:	bd90      	pop	{r4, r7, pc}
    2dfe:	46c0      	nop			; (mov r8, r8)
    2e00:	00002b89 	.word	0x00002b89

00002e04 <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    2e04:	b590      	push	{r4, r7, lr}
    2e06:	b08b      	sub	sp, #44	; 0x2c
    2e08:	af02      	add	r7, sp, #8
    2e0a:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    2e0c:	2300      	movs	r3, #0
    2e0e:	60bb      	str	r3, [r7, #8]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    2e10:	687b      	ldr	r3, [r7, #4]
    2e12:	681b      	ldr	r3, [r3, #0]
    2e14:	221f      	movs	r2, #31
    2e16:	18bc      	adds	r4, r7, r2
    2e18:	0018      	movs	r0, r3
    2e1a:	4b21      	ldr	r3, [pc, #132]	; (2ea0 <at25dfx_chip_check_presence+0x9c>)
    2e1c:	4798      	blx	r3
    2e1e:	0003      	movs	r3, r0
    2e20:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2e22:	231f      	movs	r3, #31
    2e24:	18fb      	adds	r3, r7, r3
    2e26:	781b      	ldrb	r3, [r3, #0]
    2e28:	2b05      	cmp	r3, #5
    2e2a:	d103      	bne.n	2e34 <at25dfx_chip_check_presence+0x30>
		return status;
    2e2c:	231f      	movs	r3, #31
    2e2e:	18fb      	adds	r3, r7, r3
    2e30:	781b      	ldrb	r3, [r3, #0]
    2e32:	e030      	b.n	2e96 <at25dfx_chip_check_presence+0x92>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
    2e34:	230c      	movs	r3, #12
    2e36:	18fb      	adds	r3, r7, r3
    2e38:	229f      	movs	r2, #159	; 0x9f
    2e3a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    2e3c:	230c      	movs	r3, #12
    2e3e:	18fb      	adds	r3, r7, r3
    2e40:	2201      	movs	r2, #1
    2e42:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
    2e44:	230c      	movs	r3, #12
    2e46:	18fb      	adds	r3, r7, r3
    2e48:	2208      	movs	r2, #8
    2e4a:	18ba      	adds	r2, r7, r2
    2e4c:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
    2e4e:	230c      	movs	r3, #12
    2e50:	18fb      	adds	r3, r7, r3
    2e52:	2203      	movs	r2, #3
    2e54:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    2e56:	230c      	movs	r3, #12
    2e58:	18fb      	adds	r3, r7, r3
    2e5a:	2200      	movs	r2, #0
    2e5c:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
    2e5e:	230c      	movs	r3, #12
    2e60:	18fb      	adds	r3, r7, r3
    2e62:	6878      	ldr	r0, [r7, #4]
    2e64:	466a      	mov	r2, sp
    2e66:	68d9      	ldr	r1, [r3, #12]
    2e68:	6011      	str	r1, [r2, #0]
    2e6a:	6819      	ldr	r1, [r3, #0]
    2e6c:	685a      	ldr	r2, [r3, #4]
    2e6e:	689b      	ldr	r3, [r3, #8]
    2e70:	4c0c      	ldr	r4, [pc, #48]	; (2ea4 <at25dfx_chip_check_presence+0xa0>)
    2e72:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	681b      	ldr	r3, [r3, #0]
    2e78:	0018      	movs	r0, r3
    2e7a:	4b0b      	ldr	r3, [pc, #44]	; (2ea8 <at25dfx_chip_check_presence+0xa4>)
    2e7c:	4798      	blx	r3

	if (id == _at25dfx_get_device_id(chip->type)) {
    2e7e:	687b      	ldr	r3, [r7, #4]
    2e80:	791b      	ldrb	r3, [r3, #4]
    2e82:	0018      	movs	r0, r3
    2e84:	4b09      	ldr	r3, [pc, #36]	; (2eac <at25dfx_chip_check_presence+0xa8>)
    2e86:	4798      	blx	r3
    2e88:	0002      	movs	r2, r0
    2e8a:	68bb      	ldr	r3, [r7, #8]
    2e8c:	429a      	cmp	r2, r3
    2e8e:	d101      	bne.n	2e94 <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
    2e90:	2300      	movs	r3, #0
    2e92:	e000      	b.n	2e96 <at25dfx_chip_check_presence+0x92>
	} else {
		return STATUS_ERR_NOT_FOUND;
    2e94:	2314      	movs	r3, #20
	}
}
    2e96:	0018      	movs	r0, r3
    2e98:	46bd      	mov	sp, r7
    2e9a:	b009      	add	sp, #36	; 0x24
    2e9c:	bd90      	pop	{r4, r7, pc}
    2e9e:	46c0      	nop			; (mov r8, r8)
    2ea0:	000027ed 	.word	0x000027ed
    2ea4:	00002a81 	.word	0x00002a81
    2ea8:	00002835 	.word	0x00002835
    2eac:	0000296d 	.word	0x0000296d

00002eb0 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
    2eb0:	b590      	push	{r4, r7, lr}
    2eb2:	b08d      	sub	sp, #52	; 0x34
    2eb4:	af02      	add	r7, sp, #8
    2eb6:	60f8      	str	r0, [r7, #12]
    2eb8:	60b9      	str	r1, [r7, #8]
    2eba:	607a      	str	r2, [r7, #4]
    2ebc:	001a      	movs	r2, r3
    2ebe:	1cbb      	adds	r3, r7, #2
    2ec0:	801a      	strh	r2, [r3, #0]
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    2ec2:	1cbb      	adds	r3, r7, #2
    2ec4:	881a      	ldrh	r2, [r3, #0]
    2ec6:	68bb      	ldr	r3, [r7, #8]
    2ec8:	18d4      	adds	r4, r2, r3
    2eca:	68fb      	ldr	r3, [r7, #12]
    2ecc:	791b      	ldrb	r3, [r3, #4]
    2ece:	0018      	movs	r0, r3
    2ed0:	4b21      	ldr	r3, [pc, #132]	; (2f58 <at25dfx_chip_read_buffer+0xa8>)
    2ed2:	4798      	blx	r3
    2ed4:	0003      	movs	r3, r0
    2ed6:	429c      	cmp	r4, r3
    2ed8:	d901      	bls.n	2ede <at25dfx_chip_read_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
    2eda:	2317      	movs	r3, #23
    2edc:	e037      	b.n	2f4e <at25dfx_chip_read_buffer+0x9e>
	}

	status = _at25dfx_spi_lock(chip->spi);
    2ede:	68fb      	ldr	r3, [r7, #12]
    2ee0:	681b      	ldr	r3, [r3, #0]
    2ee2:	2227      	movs	r2, #39	; 0x27
    2ee4:	18bc      	adds	r4, r7, r2
    2ee6:	0018      	movs	r0, r3
    2ee8:	4b1c      	ldr	r3, [pc, #112]	; (2f5c <at25dfx_chip_read_buffer+0xac>)
    2eea:	4798      	blx	r3
    2eec:	0003      	movs	r3, r0
    2eee:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2ef0:	2327      	movs	r3, #39	; 0x27
    2ef2:	18fb      	adds	r3, r7, r3
    2ef4:	781b      	ldrb	r3, [r3, #0]
    2ef6:	2b05      	cmp	r3, #5
    2ef8:	d103      	bne.n	2f02 <at25dfx_chip_read_buffer+0x52>
		return status;
    2efa:	2327      	movs	r3, #39	; 0x27
    2efc:	18fb      	adds	r3, r7, r3
    2efe:	781b      	ldrb	r3, [r3, #0]
    2f00:	e025      	b.n	2f4e <at25dfx_chip_read_buffer+0x9e>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
    2f02:	2314      	movs	r3, #20
    2f04:	18fb      	adds	r3, r7, r3
    2f06:	220b      	movs	r2, #11
    2f08:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 5;
    2f0a:	2314      	movs	r3, #20
    2f0c:	18fb      	adds	r3, r7, r3
    2f0e:	2205      	movs	r2, #5
    2f10:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    2f12:	2314      	movs	r3, #20
    2f14:	18fb      	adds	r3, r7, r3
    2f16:	68ba      	ldr	r2, [r7, #8]
    2f18:	605a      	str	r2, [r3, #4]
	cmd.data.rx = (uint8_t *)data;
    2f1a:	2314      	movs	r3, #20
    2f1c:	18fb      	adds	r3, r7, r3
    2f1e:	687a      	ldr	r2, [r7, #4]
    2f20:	609a      	str	r2, [r3, #8]
	cmd.length = length;
    2f22:	2314      	movs	r3, #20
    2f24:	18fb      	adds	r3, r7, r3
    2f26:	1cba      	adds	r2, r7, #2
    2f28:	8812      	ldrh	r2, [r2, #0]
    2f2a:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
    2f2c:	2314      	movs	r3, #20
    2f2e:	18fb      	adds	r3, r7, r3
    2f30:	68f8      	ldr	r0, [r7, #12]
    2f32:	466a      	mov	r2, sp
    2f34:	68d9      	ldr	r1, [r3, #12]
    2f36:	6011      	str	r1, [r2, #0]
    2f38:	6819      	ldr	r1, [r3, #0]
    2f3a:	685a      	ldr	r2, [r3, #4]
    2f3c:	689b      	ldr	r3, [r3, #8]
    2f3e:	4c08      	ldr	r4, [pc, #32]	; (2f60 <at25dfx_chip_read_buffer+0xb0>)
    2f40:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    2f42:	68fb      	ldr	r3, [r7, #12]
    2f44:	681b      	ldr	r3, [r3, #0]
    2f46:	0018      	movs	r0, r3
    2f48:	4b06      	ldr	r3, [pc, #24]	; (2f64 <at25dfx_chip_read_buffer+0xb4>)
    2f4a:	4798      	blx	r3

	return STATUS_OK;
    2f4c:	2300      	movs	r3, #0
}
    2f4e:	0018      	movs	r0, r3
    2f50:	46bd      	mov	sp, r7
    2f52:	b00b      	add	sp, #44	; 0x2c
    2f54:	bd90      	pop	{r4, r7, pc}
    2f56:	46c0      	nop			; (mov r8, r8)
    2f58:	000029e9 	.word	0x000029e9
    2f5c:	000027ed 	.word	0x000027ed
    2f60:	00002a81 	.word	0x00002a81
    2f64:	00002835 	.word	0x00002835

00002f68 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    2f68:	b590      	push	{r4, r7, lr}
    2f6a:	b08d      	sub	sp, #52	; 0x34
    2f6c:	af02      	add	r7, sp, #8
    2f6e:	60f8      	str	r0, [r7, #12]
    2f70:	60b9      	str	r1, [r7, #8]
    2f72:	607a      	str	r2, [r7, #4]
    2f74:	001a      	movs	r2, r3
    2f76:	1cbb      	adds	r3, r7, #2
    2f78:	801a      	strh	r2, [r3, #0]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    2f7a:	1cbb      	adds	r3, r7, #2
    2f7c:	881a      	ldrh	r2, [r3, #0]
    2f7e:	68bb      	ldr	r3, [r7, #8]
    2f80:	18d4      	adds	r4, r2, r3
    2f82:	68fb      	ldr	r3, [r7, #12]
    2f84:	791b      	ldrb	r3, [r3, #4]
    2f86:	0018      	movs	r0, r3
    2f88:	4b5b      	ldr	r3, [pc, #364]	; (30f8 <at25dfx_chip_write_buffer+0x190>)
    2f8a:	4798      	blx	r3
    2f8c:	0003      	movs	r3, r0
    2f8e:	429c      	cmp	r4, r3
    2f90:	d901      	bls.n	2f96 <at25dfx_chip_write_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
    2f92:	2317      	movs	r3, #23
    2f94:	e0ab      	b.n	30ee <at25dfx_chip_write_buffer+0x186>
	}

	status = _at25dfx_spi_lock(chip->spi);
    2f96:	68fb      	ldr	r3, [r7, #12]
    2f98:	681b      	ldr	r3, [r3, #0]
    2f9a:	2227      	movs	r2, #39	; 0x27
    2f9c:	18bc      	adds	r4, r7, r2
    2f9e:	0018      	movs	r0, r3
    2fa0:	4b56      	ldr	r3, [pc, #344]	; (30fc <at25dfx_chip_write_buffer+0x194>)
    2fa2:	4798      	blx	r3
    2fa4:	0003      	movs	r3, r0
    2fa6:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    2fa8:	2327      	movs	r3, #39	; 0x27
    2faa:	18fb      	adds	r3, r7, r3
    2fac:	781b      	ldrb	r3, [r3, #0]
    2fae:	2b05      	cmp	r3, #5
    2fb0:	d103      	bne.n	2fba <at25dfx_chip_write_buffer+0x52>
		return status;
    2fb2:	2327      	movs	r3, #39	; 0x27
    2fb4:	18fb      	adds	r3, r7, r3
    2fb6:	781b      	ldrb	r3, [r3, #0]
    2fb8:	e099      	b.n	30ee <at25dfx_chip_write_buffer+0x186>
	}

	_at25dfx_chip_enable_write(chip);
    2fba:	68fb      	ldr	r3, [r7, #12]
    2fbc:	0018      	movs	r0, r3
    2fbe:	4b50      	ldr	r3, [pc, #320]	; (3100 <at25dfx_chip_write_buffer+0x198>)
    2fc0:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
    2fc2:	2314      	movs	r3, #20
    2fc4:	18fb      	adds	r3, r7, r3
    2fc6:	2202      	movs	r2, #2
    2fc8:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
    2fca:	2314      	movs	r3, #20
    2fcc:	18fb      	adds	r3, r7, r3
    2fce:	2204      	movs	r2, #4
    2fd0:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    2fd2:	2314      	movs	r3, #20
    2fd4:	18fb      	adds	r3, r7, r3
    2fd6:	68ba      	ldr	r2, [r7, #8]
    2fd8:	605a      	str	r2, [r3, #4]
	cmd.data.tx = (uint8_t *)data;
    2fda:	2314      	movs	r3, #20
    2fdc:	18fb      	adds	r3, r7, r3
    2fde:	687a      	ldr	r2, [r7, #4]
    2fe0:	609a      	str	r2, [r3, #8]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    2fe2:	68bb      	ldr	r3, [r7, #8]
    2fe4:	b29b      	uxth	r3, r3
    2fe6:	22ff      	movs	r2, #255	; 0xff
    2fe8:	4013      	ands	r3, r2
    2fea:	b29a      	uxth	r2, r3
    2fec:	2324      	movs	r3, #36	; 0x24
    2fee:	18fb      	adds	r3, r7, r3
    2ff0:	2180      	movs	r1, #128	; 0x80
    2ff2:	0049      	lsls	r1, r1, #1
    2ff4:	1a8a      	subs	r2, r1, r2
    2ff6:	801a      	strh	r2, [r3, #0]
	cmd.length = min(page_bytes, length);
    2ff8:	1cbb      	adds	r3, r7, #2
    2ffa:	2224      	movs	r2, #36	; 0x24
    2ffc:	18ba      	adds	r2, r7, r2
    2ffe:	8810      	ldrh	r0, [r2, #0]
    3000:	881b      	ldrh	r3, [r3, #0]
    3002:	b299      	uxth	r1, r3
    3004:	b282      	uxth	r2, r0
    3006:	4291      	cmp	r1, r2
    3008:	d900      	bls.n	300c <at25dfx_chip_write_buffer+0xa4>
    300a:	1c03      	adds	r3, r0, #0
    300c:	b29a      	uxth	r2, r3
    300e:	2314      	movs	r3, #20
    3010:	18fb      	adds	r3, r7, r3
    3012:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    3014:	2314      	movs	r3, #20
    3016:	18fb      	adds	r3, r7, r3
    3018:	68f8      	ldr	r0, [r7, #12]
    301a:	466a      	mov	r2, sp
    301c:	68d9      	ldr	r1, [r3, #12]
    301e:	6011      	str	r1, [r2, #0]
    3020:	6819      	ldr	r1, [r3, #0]
    3022:	685a      	ldr	r2, [r3, #4]
    3024:	689b      	ldr	r3, [r3, #8]
    3026:	4c37      	ldr	r4, [pc, #220]	; (3104 <at25dfx_chip_write_buffer+0x19c>)
    3028:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
    302a:	2327      	movs	r3, #39	; 0x27
    302c:	18fc      	adds	r4, r7, r3
    302e:	68fb      	ldr	r3, [r7, #12]
    3030:	0018      	movs	r0, r3
    3032:	4b35      	ldr	r3, [pc, #212]	; (3108 <at25dfx_chip_write_buffer+0x1a0>)
    3034:	4798      	blx	r3
    3036:	0003      	movs	r3, r0
    3038:	7023      	strb	r3, [r4, #0]

	length -= cmd.length;
    303a:	2314      	movs	r3, #20
    303c:	18fb      	adds	r3, r7, r3
    303e:	899a      	ldrh	r2, [r3, #12]
    3040:	1cbb      	adds	r3, r7, #2
    3042:	1cb9      	adds	r1, r7, #2
    3044:	8809      	ldrh	r1, [r1, #0]
    3046:	1a8a      	subs	r2, r1, r2
    3048:	801a      	strh	r2, [r3, #0]

	while (length && (status == STATUS_OK)) {
    304a:	e03f      	b.n	30cc <at25dfx_chip_write_buffer+0x164>
		_at25dfx_chip_enable_write(chip);
    304c:	68fb      	ldr	r3, [r7, #12]
    304e:	0018      	movs	r0, r3
    3050:	4b2b      	ldr	r3, [pc, #172]	; (3100 <at25dfx_chip_write_buffer+0x198>)
    3052:	4798      	blx	r3

		cmd.address += cmd.length;
    3054:	2314      	movs	r3, #20
    3056:	18fb      	adds	r3, r7, r3
    3058:	685b      	ldr	r3, [r3, #4]
    305a:	2214      	movs	r2, #20
    305c:	18ba      	adds	r2, r7, r2
    305e:	8992      	ldrh	r2, [r2, #12]
    3060:	189a      	adds	r2, r3, r2
    3062:	2314      	movs	r3, #20
    3064:	18fb      	adds	r3, r7, r3
    3066:	605a      	str	r2, [r3, #4]
		cmd.data.tx += cmd.length;
    3068:	2314      	movs	r3, #20
    306a:	18fb      	adds	r3, r7, r3
    306c:	689b      	ldr	r3, [r3, #8]
    306e:	2214      	movs	r2, #20
    3070:	18ba      	adds	r2, r7, r2
    3072:	8992      	ldrh	r2, [r2, #12]
    3074:	189a      	adds	r2, r3, r2
    3076:	2314      	movs	r3, #20
    3078:	18fb      	adds	r3, r7, r3
    307a:	609a      	str	r2, [r3, #8]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    307c:	1cbb      	adds	r3, r7, #2
    307e:	881b      	ldrh	r3, [r3, #0]
    3080:	b299      	uxth	r1, r3
    3082:	2280      	movs	r2, #128	; 0x80
    3084:	0052      	lsls	r2, r2, #1
    3086:	4291      	cmp	r1, r2
    3088:	d901      	bls.n	308e <at25dfx_chip_write_buffer+0x126>
    308a:	2380      	movs	r3, #128	; 0x80
    308c:	005b      	lsls	r3, r3, #1
    308e:	b29a      	uxth	r2, r3
    3090:	2314      	movs	r3, #20
    3092:	18fb      	adds	r3, r7, r3
    3094:	819a      	strh	r2, [r3, #12]

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
    3096:	2314      	movs	r3, #20
    3098:	18fb      	adds	r3, r7, r3
    309a:	68f8      	ldr	r0, [r7, #12]
    309c:	466a      	mov	r2, sp
    309e:	68d9      	ldr	r1, [r3, #12]
    30a0:	6011      	str	r1, [r2, #0]
    30a2:	6819      	ldr	r1, [r3, #0]
    30a4:	685a      	ldr	r2, [r3, #4]
    30a6:	689b      	ldr	r3, [r3, #8]
    30a8:	4c16      	ldr	r4, [pc, #88]	; (3104 <at25dfx_chip_write_buffer+0x19c>)
    30aa:	47a0      	blx	r4

		status = _at25dfx_chip_get_nonbusy_status(chip);
    30ac:	2327      	movs	r3, #39	; 0x27
    30ae:	18fc      	adds	r4, r7, r3
    30b0:	68fb      	ldr	r3, [r7, #12]
    30b2:	0018      	movs	r0, r3
    30b4:	4b14      	ldr	r3, [pc, #80]	; (3108 <at25dfx_chip_write_buffer+0x1a0>)
    30b6:	4798      	blx	r3
    30b8:	0003      	movs	r3, r0
    30ba:	7023      	strb	r3, [r4, #0]

		length -= cmd.length;
    30bc:	2314      	movs	r3, #20
    30be:	18fb      	adds	r3, r7, r3
    30c0:	899a      	ldrh	r2, [r3, #12]
    30c2:	1cbb      	adds	r3, r7, #2
    30c4:	1cb9      	adds	r1, r7, #2
    30c6:	8809      	ldrh	r1, [r1, #0]
    30c8:	1a8a      	subs	r2, r1, r2
    30ca:	801a      	strh	r2, [r3, #0]
	while (length && (status == STATUS_OK)) {
    30cc:	1cbb      	adds	r3, r7, #2
    30ce:	881b      	ldrh	r3, [r3, #0]
    30d0:	2b00      	cmp	r3, #0
    30d2:	d004      	beq.n	30de <at25dfx_chip_write_buffer+0x176>
    30d4:	2327      	movs	r3, #39	; 0x27
    30d6:	18fb      	adds	r3, r7, r3
    30d8:	781b      	ldrb	r3, [r3, #0]
    30da:	2b00      	cmp	r3, #0
    30dc:	d0b6      	beq.n	304c <at25dfx_chip_write_buffer+0xe4>
	}

	_at25dfx_spi_unlock(chip->spi);
    30de:	68fb      	ldr	r3, [r7, #12]
    30e0:	681b      	ldr	r3, [r3, #0]
    30e2:	0018      	movs	r0, r3
    30e4:	4b09      	ldr	r3, [pc, #36]	; (310c <at25dfx_chip_write_buffer+0x1a4>)
    30e6:	4798      	blx	r3

	return status;
    30e8:	2327      	movs	r3, #39	; 0x27
    30ea:	18fb      	adds	r3, r7, r3
    30ec:	781b      	ldrb	r3, [r3, #0]
}
    30ee:	0018      	movs	r0, r3
    30f0:	46bd      	mov	sp, r7
    30f2:	b00b      	add	sp, #44	; 0x2c
    30f4:	bd90      	pop	{r4, r7, pc}
    30f6:	46c0      	nop			; (mov r8, r8)
    30f8:	000029e9 	.word	0x000029e9
    30fc:	000027ed 	.word	0x000027ed
    3100:	00002db1 	.word	0x00002db1
    3104:	00002b89 	.word	0x00002b89
    3108:	00002c8d 	.word	0x00002c8d
    310c:	00002835 	.word	0x00002835

00003110 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    3110:	b590      	push	{r4, r7, lr}
    3112:	b08d      	sub	sp, #52	; 0x34
    3114:	af02      	add	r7, sp, #8
    3116:	60f8      	str	r0, [r7, #12]
    3118:	60b9      	str	r1, [r7, #8]
    311a:	1dfb      	adds	r3, r7, #7
    311c:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
    311e:	68fb      	ldr	r3, [r7, #12]
    3120:	791b      	ldrb	r3, [r3, #4]
    3122:	0018      	movs	r0, r3
    3124:	4b33      	ldr	r3, [pc, #204]	; (31f4 <at25dfx_chip_erase_block+0xe4>)
    3126:	4798      	blx	r3
    3128:	0002      	movs	r2, r0
    312a:	68bb      	ldr	r3, [r7, #8]
    312c:	429a      	cmp	r2, r3
    312e:	d801      	bhi.n	3134 <at25dfx_chip_erase_block+0x24>
		return STATUS_ERR_INVALID_ARG;
    3130:	2317      	movs	r3, #23
    3132:	e05b      	b.n	31ec <at25dfx_chip_erase_block+0xdc>
	}

	status = _at25dfx_spi_lock(chip->spi);
    3134:	68fb      	ldr	r3, [r7, #12]
    3136:	681b      	ldr	r3, [r3, #0]
    3138:	2227      	movs	r2, #39	; 0x27
    313a:	18bc      	adds	r4, r7, r2
    313c:	0018      	movs	r0, r3
    313e:	4b2e      	ldr	r3, [pc, #184]	; (31f8 <at25dfx_chip_erase_block+0xe8>)
    3140:	4798      	blx	r3
    3142:	0003      	movs	r3, r0
    3144:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    3146:	2327      	movs	r3, #39	; 0x27
    3148:	18fb      	adds	r3, r7, r3
    314a:	781b      	ldrb	r3, [r3, #0]
    314c:	2b05      	cmp	r3, #5
    314e:	d103      	bne.n	3158 <at25dfx_chip_erase_block+0x48>
		return status;
    3150:	2327      	movs	r3, #39	; 0x27
    3152:	18fb      	adds	r3, r7, r3
    3154:	781b      	ldrb	r3, [r3, #0]
    3156:	e049      	b.n	31ec <at25dfx_chip_erase_block+0xdc>
	}

	_at25dfx_chip_enable_write(chip);
    3158:	68fb      	ldr	r3, [r7, #12]
    315a:	0018      	movs	r0, r3
    315c:	4b27      	ldr	r3, [pc, #156]	; (31fc <at25dfx_chip_erase_block+0xec>)
    315e:	4798      	blx	r3

	switch (block_size) {
    3160:	1dfb      	adds	r3, r7, #7
    3162:	781b      	ldrb	r3, [r3, #0]
    3164:	2b01      	cmp	r3, #1
    3166:	d008      	beq.n	317a <at25dfx_chip_erase_block+0x6a>
    3168:	2b02      	cmp	r3, #2
    316a:	d00b      	beq.n	3184 <at25dfx_chip_erase_block+0x74>
    316c:	2b00      	cmp	r3, #0
    316e:	d10e      	bne.n	318e <at25dfx_chip_erase_block+0x7e>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    3170:	2314      	movs	r3, #20
    3172:	18fb      	adds	r3, r7, r3
    3174:	2220      	movs	r2, #32
    3176:	701a      	strb	r2, [r3, #0]
		break;
    3178:	e00d      	b.n	3196 <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    317a:	2314      	movs	r3, #20
    317c:	18fb      	adds	r3, r7, r3
    317e:	2252      	movs	r2, #82	; 0x52
    3180:	701a      	strb	r2, [r3, #0]
		break;
    3182:	e008      	b.n	3196 <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    3184:	2314      	movs	r3, #20
    3186:	18fb      	adds	r3, r7, r3
    3188:	22d8      	movs	r2, #216	; 0xd8
    318a:	701a      	strb	r2, [r3, #0]
		break;
    318c:	e003      	b.n	3196 <at25dfx_chip_erase_block+0x86>

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
    318e:	2314      	movs	r3, #20
    3190:	18fb      	adds	r3, r7, r3
    3192:	2200      	movs	r2, #0
    3194:	701a      	strb	r2, [r3, #0]
	}
	cmd.command_size = 4;
    3196:	2314      	movs	r3, #20
    3198:	18fb      	adds	r3, r7, r3
    319a:	2204      	movs	r2, #4
    319c:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
    319e:	2314      	movs	r3, #20
    31a0:	18fb      	adds	r3, r7, r3
    31a2:	68ba      	ldr	r2, [r7, #8]
    31a4:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
    31a6:	2314      	movs	r3, #20
    31a8:	18fb      	adds	r3, r7, r3
    31aa:	2200      	movs	r2, #0
    31ac:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
    31ae:	2314      	movs	r3, #20
    31b0:	18fb      	adds	r3, r7, r3
    31b2:	2200      	movs	r2, #0
    31b4:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    31b6:	2314      	movs	r3, #20
    31b8:	18fb      	adds	r3, r7, r3
    31ba:	68f8      	ldr	r0, [r7, #12]
    31bc:	466a      	mov	r2, sp
    31be:	68d9      	ldr	r1, [r3, #12]
    31c0:	6011      	str	r1, [r2, #0]
    31c2:	6819      	ldr	r1, [r3, #0]
    31c4:	685a      	ldr	r2, [r3, #4]
    31c6:	689b      	ldr	r3, [r3, #8]
    31c8:	4c0d      	ldr	r4, [pc, #52]	; (3200 <at25dfx_chip_erase_block+0xf0>)
    31ca:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
    31cc:	2327      	movs	r3, #39	; 0x27
    31ce:	18fc      	adds	r4, r7, r3
    31d0:	68fb      	ldr	r3, [r7, #12]
    31d2:	0018      	movs	r0, r3
    31d4:	4b0b      	ldr	r3, [pc, #44]	; (3204 <at25dfx_chip_erase_block+0xf4>)
    31d6:	4798      	blx	r3
    31d8:	0003      	movs	r3, r0
    31da:	7023      	strb	r3, [r4, #0]

	_at25dfx_spi_unlock(chip->spi);
    31dc:	68fb      	ldr	r3, [r7, #12]
    31de:	681b      	ldr	r3, [r3, #0]
    31e0:	0018      	movs	r0, r3
    31e2:	4b09      	ldr	r3, [pc, #36]	; (3208 <at25dfx_chip_erase_block+0xf8>)
    31e4:	4798      	blx	r3

	return status;
    31e6:	2327      	movs	r3, #39	; 0x27
    31e8:	18fb      	adds	r3, r7, r3
    31ea:	781b      	ldrb	r3, [r3, #0]
}
    31ec:	0018      	movs	r0, r3
    31ee:	46bd      	mov	sp, r7
    31f0:	b00b      	add	sp, #44	; 0x2c
    31f2:	bd90      	pop	{r4, r7, pc}
    31f4:	000029e9 	.word	0x000029e9
    31f8:	000027ed 	.word	0x000027ed
    31fc:	00002db1 	.word	0x00002db1
    3200:	00002b89 	.word	0x00002b89
    3204:	00002c8d 	.word	0x00002c8d
    3208:	00002835 	.word	0x00002835

0000320c <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    320c:	b590      	push	{r4, r7, lr}
    320e:	b08b      	sub	sp, #44	; 0x2c
    3210:	af02      	add	r7, sp, #8
    3212:	6078      	str	r0, [r7, #4]
    3214:	000a      	movs	r2, r1
    3216:	1cfb      	adds	r3, r7, #3
    3218:	701a      	strb	r2, [r3, #0]
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    321a:	687b      	ldr	r3, [r7, #4]
    321c:	681b      	ldr	r3, [r3, #0]
    321e:	221f      	movs	r2, #31
    3220:	18bc      	adds	r4, r7, r2
    3222:	0018      	movs	r0, r3
    3224:	4b22      	ldr	r3, [pc, #136]	; (32b0 <at25dfx_chip_set_global_sector_protect+0xa4>)
    3226:	4798      	blx	r3
    3228:	0003      	movs	r3, r0
    322a:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    322c:	231f      	movs	r3, #31
    322e:	18fb      	adds	r3, r7, r3
    3230:	781b      	ldrb	r3, [r3, #0]
    3232:	2b05      	cmp	r3, #5
    3234:	d103      	bne.n	323e <at25dfx_chip_set_global_sector_protect+0x32>
		return status;
    3236:	231f      	movs	r3, #31
    3238:	18fb      	adds	r3, r7, r3
    323a:	781b      	ldrb	r3, [r3, #0]
    323c:	e033      	b.n	32a6 <at25dfx_chip_set_global_sector_protect+0x9a>
	}

	_at25dfx_chip_enable_write(chip);
    323e:	687b      	ldr	r3, [r7, #4]
    3240:	0018      	movs	r0, r3
    3242:	4b1c      	ldr	r3, [pc, #112]	; (32b4 <at25dfx_chip_set_global_sector_protect+0xa8>)
    3244:	4798      	blx	r3

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    3246:	1cfb      	adds	r3, r7, #3
    3248:	781b      	ldrb	r3, [r3, #0]
    324a:	2b00      	cmp	r3, #0
    324c:	d001      	beq.n	3252 <at25dfx_chip_set_global_sector_protect+0x46>
    324e:	223c      	movs	r2, #60	; 0x3c
    3250:	e000      	b.n	3254 <at25dfx_chip_set_global_sector_protect+0x48>
    3252:	2200      	movs	r2, #0
    3254:	230b      	movs	r3, #11
    3256:	18fb      	adds	r3, r7, r3
    3258:	701a      	strb	r2, [r3, #0]
	cmd.opcode = AT25DFX_COMMAND_WRITE_STATUS;
    325a:	230c      	movs	r3, #12
    325c:	18fb      	adds	r3, r7, r3
    325e:	2201      	movs	r2, #1
    3260:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    3262:	230c      	movs	r3, #12
    3264:	18fb      	adds	r3, r7, r3
    3266:	2201      	movs	r2, #1
    3268:	705a      	strb	r2, [r3, #1]
	cmd.length = 1;
    326a:	230c      	movs	r3, #12
    326c:	18fb      	adds	r3, r7, r3
    326e:	2201      	movs	r2, #1
    3270:	819a      	strh	r2, [r3, #12]
	cmd.data.tx = &temp_data;
    3272:	230c      	movs	r3, #12
    3274:	18fb      	adds	r3, r7, r3
    3276:	220b      	movs	r2, #11
    3278:	18ba      	adds	r2, r7, r2
    327a:	609a      	str	r2, [r3, #8]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    327c:	230c      	movs	r3, #12
    327e:	18fb      	adds	r3, r7, r3
    3280:	2200      	movs	r2, #0
    3282:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    3284:	230c      	movs	r3, #12
    3286:	18fb      	adds	r3, r7, r3
    3288:	6878      	ldr	r0, [r7, #4]
    328a:	466a      	mov	r2, sp
    328c:	68d9      	ldr	r1, [r3, #12]
    328e:	6011      	str	r1, [r2, #0]
    3290:	6819      	ldr	r1, [r3, #0]
    3292:	685a      	ldr	r2, [r3, #4]
    3294:	689b      	ldr	r3, [r3, #8]
    3296:	4c08      	ldr	r4, [pc, #32]	; (32b8 <at25dfx_chip_set_global_sector_protect+0xac>)
    3298:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    329a:	687b      	ldr	r3, [r7, #4]
    329c:	681b      	ldr	r3, [r3, #0]
    329e:	0018      	movs	r0, r3
    32a0:	4b06      	ldr	r3, [pc, #24]	; (32bc <at25dfx_chip_set_global_sector_protect+0xb0>)
    32a2:	4798      	blx	r3

	return STATUS_OK;
    32a4:	2300      	movs	r3, #0
}
    32a6:	0018      	movs	r0, r3
    32a8:	46bd      	mov	sp, r7
    32aa:	b009      	add	sp, #36	; 0x24
    32ac:	bd90      	pop	{r4, r7, pc}
    32ae:	46c0      	nop			; (mov r8, r8)
    32b0:	000027ed 	.word	0x000027ed
    32b4:	00002db1 	.word	0x00002db1
    32b8:	00002b89 	.word	0x00002b89
    32bc:	00002835 	.word	0x00002835

000032c0 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    32c0:	b590      	push	{r4, r7, lr}
    32c2:	b08b      	sub	sp, #44	; 0x2c
    32c4:	af02      	add	r7, sp, #8
    32c6:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    32c8:	687b      	ldr	r3, [r7, #4]
    32ca:	681b      	ldr	r3, [r3, #0]
    32cc:	221f      	movs	r2, #31
    32ce:	18bc      	adds	r4, r7, r2
    32d0:	0018      	movs	r0, r3
    32d2:	4b1b      	ldr	r3, [pc, #108]	; (3340 <at25dfx_chip_sleep+0x80>)
    32d4:	4798      	blx	r3
    32d6:	0003      	movs	r3, r0
    32d8:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    32da:	231f      	movs	r3, #31
    32dc:	18fb      	adds	r3, r7, r3
    32de:	781b      	ldrb	r3, [r3, #0]
    32e0:	2b05      	cmp	r3, #5
    32e2:	d103      	bne.n	32ec <at25dfx_chip_sleep+0x2c>
		return status;
    32e4:	231f      	movs	r3, #31
    32e6:	18fb      	adds	r3, r7, r3
    32e8:	781b      	ldrb	r3, [r3, #0]
    32ea:	e024      	b.n	3336 <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
    32ec:	230c      	movs	r3, #12
    32ee:	18fb      	adds	r3, r7, r3
    32f0:	22b9      	movs	r2, #185	; 0xb9
    32f2:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    32f4:	230c      	movs	r3, #12
    32f6:	18fb      	adds	r3, r7, r3
    32f8:	2201      	movs	r2, #1
    32fa:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    32fc:	230c      	movs	r3, #12
    32fe:	18fb      	adds	r3, r7, r3
    3300:	2200      	movs	r2, #0
    3302:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    3304:	230c      	movs	r3, #12
    3306:	18fb      	adds	r3, r7, r3
    3308:	2200      	movs	r2, #0
    330a:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    330c:	230c      	movs	r3, #12
    330e:	18fb      	adds	r3, r7, r3
    3310:	2200      	movs	r2, #0
    3312:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    3314:	230c      	movs	r3, #12
    3316:	18fb      	adds	r3, r7, r3
    3318:	6878      	ldr	r0, [r7, #4]
    331a:	466a      	mov	r2, sp
    331c:	68d9      	ldr	r1, [r3, #12]
    331e:	6011      	str	r1, [r2, #0]
    3320:	6819      	ldr	r1, [r3, #0]
    3322:	685a      	ldr	r2, [r3, #4]
    3324:	689b      	ldr	r3, [r3, #8]
    3326:	4c07      	ldr	r4, [pc, #28]	; (3344 <at25dfx_chip_sleep+0x84>)
    3328:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    332a:	687b      	ldr	r3, [r7, #4]
    332c:	681b      	ldr	r3, [r3, #0]
    332e:	0018      	movs	r0, r3
    3330:	4b05      	ldr	r3, [pc, #20]	; (3348 <at25dfx_chip_sleep+0x88>)
    3332:	4798      	blx	r3

	return STATUS_OK;
    3334:	2300      	movs	r3, #0
}
    3336:	0018      	movs	r0, r3
    3338:	46bd      	mov	sp, r7
    333a:	b009      	add	sp, #36	; 0x24
    333c:	bd90      	pop	{r4, r7, pc}
    333e:	46c0      	nop			; (mov r8, r8)
    3340:	000027ed 	.word	0x000027ed
    3344:	00002b89 	.word	0x00002b89
    3348:	00002835 	.word	0x00002835

0000334c <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    334c:	b590      	push	{r4, r7, lr}
    334e:	b08b      	sub	sp, #44	; 0x2c
    3350:	af02      	add	r7, sp, #8
    3352:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	681b      	ldr	r3, [r3, #0]
    3358:	221f      	movs	r2, #31
    335a:	18bc      	adds	r4, r7, r2
    335c:	0018      	movs	r0, r3
    335e:	4b1b      	ldr	r3, [pc, #108]	; (33cc <at25dfx_chip_wake+0x80>)
    3360:	4798      	blx	r3
    3362:	0003      	movs	r3, r0
    3364:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
    3366:	231f      	movs	r3, #31
    3368:	18fb      	adds	r3, r7, r3
    336a:	781b      	ldrb	r3, [r3, #0]
    336c:	2b05      	cmp	r3, #5
    336e:	d103      	bne.n	3378 <at25dfx_chip_wake+0x2c>
		return status;
    3370:	231f      	movs	r3, #31
    3372:	18fb      	adds	r3, r7, r3
    3374:	781b      	ldrb	r3, [r3, #0]
    3376:	e024      	b.n	33c2 <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
    3378:	230c      	movs	r3, #12
    337a:	18fb      	adds	r3, r7, r3
    337c:	22ab      	movs	r2, #171	; 0xab
    337e:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
    3380:	230c      	movs	r3, #12
    3382:	18fb      	adds	r3, r7, r3
    3384:	2201      	movs	r2, #1
    3386:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
    3388:	230c      	movs	r3, #12
    338a:	18fb      	adds	r3, r7, r3
    338c:	2200      	movs	r2, #0
    338e:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
    3390:	230c      	movs	r3, #12
    3392:	18fb      	adds	r3, r7, r3
    3394:	2200      	movs	r2, #0
    3396:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
    3398:	230c      	movs	r3, #12
    339a:	18fb      	adds	r3, r7, r3
    339c:	2200      	movs	r2, #0
    339e:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    33a0:	230c      	movs	r3, #12
    33a2:	18fb      	adds	r3, r7, r3
    33a4:	6878      	ldr	r0, [r7, #4]
    33a6:	466a      	mov	r2, sp
    33a8:	68d9      	ldr	r1, [r3, #12]
    33aa:	6011      	str	r1, [r2, #0]
    33ac:	6819      	ldr	r1, [r3, #0]
    33ae:	685a      	ldr	r2, [r3, #4]
    33b0:	689b      	ldr	r3, [r3, #8]
    33b2:	4c07      	ldr	r4, [pc, #28]	; (33d0 <at25dfx_chip_wake+0x84>)
    33b4:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
    33b6:	687b      	ldr	r3, [r7, #4]
    33b8:	681b      	ldr	r3, [r3, #0]
    33ba:	0018      	movs	r0, r3
    33bc:	4b05      	ldr	r3, [pc, #20]	; (33d4 <at25dfx_chip_wake+0x88>)
    33be:	4798      	blx	r3

	return STATUS_OK;
    33c0:	2300      	movs	r3, #0
    33c2:	0018      	movs	r0, r3
    33c4:	46bd      	mov	sp, r7
    33c6:	b009      	add	sp, #36	; 0x24
    33c8:	bd90      	pop	{r4, r7, pc}
    33ca:	46c0      	nop			; (mov r8, r8)
    33cc:	000027ed 	.word	0x000027ed
    33d0:	00002b89 	.word	0x00002b89
    33d4:	00002835 	.word	0x00002835

000033d8 <system_pinmux_get_group_from_gpio_pin>:
{
    33d8:	b580      	push	{r7, lr}
    33da:	b084      	sub	sp, #16
    33dc:	af00      	add	r7, sp, #0
    33de:	0002      	movs	r2, r0
    33e0:	1dfb      	adds	r3, r7, #7
    33e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    33e4:	230f      	movs	r3, #15
    33e6:	18fb      	adds	r3, r7, r3
    33e8:	1dfa      	adds	r2, r7, #7
    33ea:	7812      	ldrb	r2, [r2, #0]
    33ec:	09d2      	lsrs	r2, r2, #7
    33ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    33f0:	230e      	movs	r3, #14
    33f2:	18fb      	adds	r3, r7, r3
    33f4:	1dfa      	adds	r2, r7, #7
    33f6:	7812      	ldrb	r2, [r2, #0]
    33f8:	0952      	lsrs	r2, r2, #5
    33fa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    33fc:	4b0d      	ldr	r3, [pc, #52]	; (3434 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    33fe:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3400:	230f      	movs	r3, #15
    3402:	18fb      	adds	r3, r7, r3
    3404:	781b      	ldrb	r3, [r3, #0]
    3406:	2b00      	cmp	r3, #0
    3408:	d10f      	bne.n	342a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    340a:	230f      	movs	r3, #15
    340c:	18fb      	adds	r3, r7, r3
    340e:	781b      	ldrb	r3, [r3, #0]
    3410:	009b      	lsls	r3, r3, #2
    3412:	2210      	movs	r2, #16
    3414:	4694      	mov	ip, r2
    3416:	44bc      	add	ip, r7
    3418:	4463      	add	r3, ip
    341a:	3b08      	subs	r3, #8
    341c:	681a      	ldr	r2, [r3, #0]
    341e:	230e      	movs	r3, #14
    3420:	18fb      	adds	r3, r7, r3
    3422:	781b      	ldrb	r3, [r3, #0]
    3424:	01db      	lsls	r3, r3, #7
    3426:	18d3      	adds	r3, r2, r3
    3428:	e000      	b.n	342c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    342a:	2300      	movs	r3, #0
}
    342c:	0018      	movs	r0, r3
    342e:	46bd      	mov	sp, r7
    3430:	b004      	add	sp, #16
    3432:	bd80      	pop	{r7, pc}
    3434:	41004400 	.word	0x41004400

00003438 <port_get_group_from_gpio_pin>:
{
    3438:	b580      	push	{r7, lr}
    343a:	b082      	sub	sp, #8
    343c:	af00      	add	r7, sp, #0
    343e:	0002      	movs	r2, r0
    3440:	1dfb      	adds	r3, r7, #7
    3442:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3444:	1dfb      	adds	r3, r7, #7
    3446:	781b      	ldrb	r3, [r3, #0]
    3448:	0018      	movs	r0, r3
    344a:	4b03      	ldr	r3, [pc, #12]	; (3458 <port_get_group_from_gpio_pin+0x20>)
    344c:	4798      	blx	r3
    344e:	0003      	movs	r3, r0
}
    3450:	0018      	movs	r0, r3
    3452:	46bd      	mov	sp, r7
    3454:	b002      	add	sp, #8
    3456:	bd80      	pop	{r7, pc}
    3458:	000033d9 	.word	0x000033d9

0000345c <port_get_config_defaults>:
{
    345c:	b580      	push	{r7, lr}
    345e:	b082      	sub	sp, #8
    3460:	af00      	add	r7, sp, #0
    3462:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    3464:	687b      	ldr	r3, [r7, #4]
    3466:	2200      	movs	r2, #0
    3468:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    346a:	687b      	ldr	r3, [r7, #4]
    346c:	2201      	movs	r2, #1
    346e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	2200      	movs	r2, #0
    3474:	709a      	strb	r2, [r3, #2]
}
    3476:	46c0      	nop			; (mov r8, r8)
    3478:	46bd      	mov	sp, r7
    347a:	b002      	add	sp, #8
    347c:	bd80      	pop	{r7, pc}
	...

00003480 <port_pin_set_output_level>:
{
    3480:	b580      	push	{r7, lr}
    3482:	b084      	sub	sp, #16
    3484:	af00      	add	r7, sp, #0
    3486:	0002      	movs	r2, r0
    3488:	1dfb      	adds	r3, r7, #7
    348a:	701a      	strb	r2, [r3, #0]
    348c:	1dbb      	adds	r3, r7, #6
    348e:	1c0a      	adds	r2, r1, #0
    3490:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3492:	1dfb      	adds	r3, r7, #7
    3494:	781b      	ldrb	r3, [r3, #0]
    3496:	0018      	movs	r0, r3
    3498:	4b0d      	ldr	r3, [pc, #52]	; (34d0 <port_pin_set_output_level+0x50>)
    349a:	4798      	blx	r3
    349c:	0003      	movs	r3, r0
    349e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    34a0:	1dfb      	adds	r3, r7, #7
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	221f      	movs	r2, #31
    34a6:	4013      	ands	r3, r2
    34a8:	2201      	movs	r2, #1
    34aa:	409a      	lsls	r2, r3
    34ac:	0013      	movs	r3, r2
    34ae:	60bb      	str	r3, [r7, #8]
	if (level) {
    34b0:	1dbb      	adds	r3, r7, #6
    34b2:	781b      	ldrb	r3, [r3, #0]
    34b4:	2b00      	cmp	r3, #0
    34b6:	d003      	beq.n	34c0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    34b8:	68fb      	ldr	r3, [r7, #12]
    34ba:	68ba      	ldr	r2, [r7, #8]
    34bc:	619a      	str	r2, [r3, #24]
}
    34be:	e002      	b.n	34c6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    34c0:	68fb      	ldr	r3, [r7, #12]
    34c2:	68ba      	ldr	r2, [r7, #8]
    34c4:	615a      	str	r2, [r3, #20]
}
    34c6:	46c0      	nop			; (mov r8, r8)
    34c8:	46bd      	mov	sp, r7
    34ca:	b004      	add	sp, #16
    34cc:	bd80      	pop	{r7, pc}
    34ce:	46c0      	nop			; (mov r8, r8)
    34d0:	00003439 	.word	0x00003439

000034d4 <system_interrupt_enable_global>:
{
    34d4:	b580      	push	{r7, lr}
    34d6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    34d8:	4b04      	ldr	r3, [pc, #16]	; (34ec <system_interrupt_enable_global+0x18>)
    34da:	2201      	movs	r2, #1
    34dc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    34de:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    34e2:	b662      	cpsie	i
}
    34e4:	46c0      	nop			; (mov r8, r8)
    34e6:	46bd      	mov	sp, r7
    34e8:	bd80      	pop	{r7, pc}
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	20000014 	.word	0x20000014

000034f0 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    34f0:	b580      	push	{r7, lr}
    34f2:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    34f4:	4b04      	ldr	r3, [pc, #16]	; (3508 <chip_isr+0x18>)
    34f6:	681b      	ldr	r3, [r3, #0]
    34f8:	2b00      	cmp	r3, #0
    34fa:	d002      	beq.n	3502 <chip_isr+0x12>
		gpfIsr();
    34fc:	4b02      	ldr	r3, [pc, #8]	; (3508 <chip_isr+0x18>)
    34fe:	681b      	ldr	r3, [r3, #0]
    3500:	4798      	blx	r3
	}
}
    3502:	46c0      	nop			; (mov r8, r8)
    3504:	46bd      	mov	sp, r7
    3506:	bd80      	pop	{r7, pc}
    3508:	2000021c 	.word	0x2000021c

0000350c <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    350c:	b580      	push	{r7, lr}
    350e:	b082      	sub	sp, #8
    3510:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    3512:	1d3b      	adds	r3, r7, #4
    3514:	0018      	movs	r0, r3
    3516:	4b10      	ldr	r3, [pc, #64]	; (3558 <init_chip_pins+0x4c>)
    3518:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    351a:	1d3b      	adds	r3, r7, #4
    351c:	2201      	movs	r2, #1
    351e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    3520:	1d3b      	adds	r3, r7, #4
    3522:	0019      	movs	r1, r3
    3524:	201b      	movs	r0, #27
    3526:	4b0d      	ldr	r3, [pc, #52]	; (355c <init_chip_pins+0x50>)
    3528:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    352a:	1d3b      	adds	r3, r7, #4
    352c:	0019      	movs	r1, r3
    352e:	201c      	movs	r0, #28
    3530:	4b0a      	ldr	r3, [pc, #40]	; (355c <init_chip_pins+0x50>)
    3532:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    3534:	1d3b      	adds	r3, r7, #4
    3536:	0019      	movs	r1, r3
    3538:	2028      	movs	r0, #40	; 0x28
    353a:	4b08      	ldr	r3, [pc, #32]	; (355c <init_chip_pins+0x50>)
    353c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    353e:	2100      	movs	r1, #0
    3540:	201c      	movs	r0, #28
    3542:	4b07      	ldr	r3, [pc, #28]	; (3560 <init_chip_pins+0x54>)
    3544:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    3546:	2100      	movs	r1, #0
    3548:	201b      	movs	r0, #27
    354a:	4b05      	ldr	r3, [pc, #20]	; (3560 <init_chip_pins+0x54>)
    354c:	4798      	blx	r3
}
    354e:	46c0      	nop			; (mov r8, r8)
    3550:	46bd      	mov	sp, r7
    3552:	b002      	add	sp, #8
    3554:	bd80      	pop	{r7, pc}
    3556:	46c0      	nop			; (mov r8, r8)
    3558:	0000345d 	.word	0x0000345d
    355c:	00010a45 	.word	0x00010a45
    3560:	00003481 	.word	0x00003481

00003564 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    3564:	b580      	push	{r7, lr}
    3566:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    3568:	4b0c      	ldr	r3, [pc, #48]	; (359c <nm_bsp_init+0x38>)
    356a:	2200      	movs	r2, #0
    356c:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    356e:	4b0c      	ldr	r3, [pc, #48]	; (35a0 <nm_bsp_init+0x3c>)
    3570:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    3572:	4b0c      	ldr	r3, [pc, #48]	; (35a4 <nm_bsp_init+0x40>)
    3574:	681b      	ldr	r3, [r3, #0]
    3576:	2201      	movs	r2, #1
    3578:	4013      	ands	r3, r2
    357a:	d004      	beq.n	3586 <nm_bsp_init+0x22>
    357c:	4b09      	ldr	r3, [pc, #36]	; (35a4 <nm_bsp_init+0x40>)
    357e:	681b      	ldr	r3, [r3, #0]
    3580:	2202      	movs	r2, #2
    3582:	4013      	ands	r3, r2
    3584:	d101      	bne.n	358a <nm_bsp_init+0x26>
	    delay_init();
    3586:	4b08      	ldr	r3, [pc, #32]	; (35a8 <nm_bsp_init+0x44>)
    3588:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    358a:	4b08      	ldr	r3, [pc, #32]	; (35ac <nm_bsp_init+0x48>)
    358c:	4798      	blx	r3

	system_interrupt_enable_global();
    358e:	4b08      	ldr	r3, [pc, #32]	; (35b0 <nm_bsp_init+0x4c>)
    3590:	4798      	blx	r3

	return M2M_SUCCESS;
    3592:	2300      	movs	r3, #0
}
    3594:	0018      	movs	r0, r3
    3596:	46bd      	mov	sp, r7
    3598:	bd80      	pop	{r7, pc}
    359a:	46c0      	nop			; (mov r8, r8)
    359c:	2000021c 	.word	0x2000021c
    35a0:	0000350d 	.word	0x0000350d
    35a4:	e000e010 	.word	0xe000e010
    35a8:	0000dbc9 	.word	0x0000dbc9
    35ac:	00003601 	.word	0x00003601
    35b0:	000034d5 	.word	0x000034d5

000035b4 <nm_bsp_deinit>:
 *	@fn		nm_bsp_deinit
 *	@brief	De-iInitialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
    35b4:	b580      	push	{r7, lr}
    35b6:	b082      	sub	sp, #8
    35b8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    35ba:	1d3b      	adds	r3, r7, #4
    35bc:	0018      	movs	r0, r3
    35be:	4b0d      	ldr	r3, [pc, #52]	; (35f4 <nm_bsp_deinit+0x40>)
    35c0:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    35c2:	1d3b      	adds	r3, r7, #4
    35c4:	2200      	movs	r2, #0
    35c6:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    35c8:	1d3b      	adds	r3, r7, #4
    35ca:	2200      	movs	r2, #0
    35cc:	705a      	strb	r2, [r3, #1]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    35ce:	2100      	movs	r1, #0
    35d0:	201c      	movs	r0, #28
    35d2:	4b09      	ldr	r3, [pc, #36]	; (35f8 <nm_bsp_deinit+0x44>)
    35d4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    35d6:	2100      	movs	r1, #0
    35d8:	201b      	movs	r0, #27
    35da:	4b07      	ldr	r3, [pc, #28]	; (35f8 <nm_bsp_deinit+0x44>)
    35dc:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_INT_PIN, &pin_conf);
    35de:	1d3b      	adds	r3, r7, #4
    35e0:	0019      	movs	r1, r3
    35e2:	2029      	movs	r0, #41	; 0x29
    35e4:	4b05      	ldr	r3, [pc, #20]	; (35fc <nm_bsp_deinit+0x48>)
    35e6:	4798      	blx	r3
	return M2M_SUCCESS;
    35e8:	2300      	movs	r3, #0
}
    35ea:	0018      	movs	r0, r3
    35ec:	46bd      	mov	sp, r7
    35ee:	b002      	add	sp, #8
    35f0:	bd80      	pop	{r7, pc}
    35f2:	46c0      	nop			; (mov r8, r8)
    35f4:	0000345d 	.word	0x0000345d
    35f8:	00003481 	.word	0x00003481
    35fc:	00010a45 	.word	0x00010a45

00003600 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    3600:	b580      	push	{r7, lr}
    3602:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    3604:	2100      	movs	r1, #0
    3606:	201c      	movs	r0, #28
    3608:	4b0b      	ldr	r3, [pc, #44]	; (3638 <nm_bsp_reset+0x38>)
    360a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    360c:	2100      	movs	r1, #0
    360e:	201b      	movs	r0, #27
    3610:	4b09      	ldr	r3, [pc, #36]	; (3638 <nm_bsp_reset+0x38>)
    3612:	4798      	blx	r3
	nm_bsp_sleep(1);
    3614:	2001      	movs	r0, #1
    3616:	4b09      	ldr	r3, [pc, #36]	; (363c <nm_bsp_reset+0x3c>)
    3618:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    361a:	2101      	movs	r1, #1
    361c:	201c      	movs	r0, #28
    361e:	4b06      	ldr	r3, [pc, #24]	; (3638 <nm_bsp_reset+0x38>)
    3620:	4798      	blx	r3
	nm_bsp_sleep(10);
    3622:	200a      	movs	r0, #10
    3624:	4b05      	ldr	r3, [pc, #20]	; (363c <nm_bsp_reset+0x3c>)
    3626:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    3628:	2101      	movs	r1, #1
    362a:	201b      	movs	r0, #27
    362c:	4b02      	ldr	r3, [pc, #8]	; (3638 <nm_bsp_reset+0x38>)
    362e:	4798      	blx	r3
}
    3630:	46c0      	nop			; (mov r8, r8)
    3632:	46bd      	mov	sp, r7
    3634:	bd80      	pop	{r7, pc}
    3636:	46c0      	nop			; (mov r8, r8)
    3638:	00003481 	.word	0x00003481
    363c:	00003641 	.word	0x00003641

00003640 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    3640:	b580      	push	{r7, lr}
    3642:	b082      	sub	sp, #8
    3644:	af00      	add	r7, sp, #0
    3646:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    3648:	e002      	b.n	3650 <nm_bsp_sleep+0x10>
		delay_ms(1);
    364a:	2001      	movs	r0, #1
    364c:	4b05      	ldr	r3, [pc, #20]	; (3664 <nm_bsp_sleep+0x24>)
    364e:	4798      	blx	r3
	while (u32TimeMsec--) {
    3650:	687b      	ldr	r3, [r7, #4]
    3652:	1e5a      	subs	r2, r3, #1
    3654:	607a      	str	r2, [r7, #4]
    3656:	2b00      	cmp	r3, #0
    3658:	d1f7      	bne.n	364a <nm_bsp_sleep+0xa>
	}
}
    365a:	46c0      	nop			; (mov r8, r8)
    365c:	46bd      	mov	sp, r7
    365e:	b002      	add	sp, #8
    3660:	bd80      	pop	{r7, pc}
    3662:	46c0      	nop			; (mov r8, r8)
    3664:	0000dc51 	.word	0x0000dc51

00003668 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    3668:	b580      	push	{r7, lr}
    366a:	b086      	sub	sp, #24
    366c:	af00      	add	r7, sp, #0
    366e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    3670:	4b15      	ldr	r3, [pc, #84]	; (36c8 <nm_bsp_register_isr+0x60>)
    3672:	687a      	ldr	r2, [r7, #4]
    3674:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    3676:	230c      	movs	r3, #12
    3678:	18fb      	adds	r3, r7, r3
    367a:	0018      	movs	r0, r3
    367c:	4b13      	ldr	r3, [pc, #76]	; (36cc <nm_bsp_register_isr+0x64>)
    367e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    3680:	230c      	movs	r3, #12
    3682:	18fb      	adds	r3, r7, r3
    3684:	2229      	movs	r2, #41	; 0x29
    3686:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    3688:	230c      	movs	r3, #12
    368a:	18fb      	adds	r3, r7, r3
    368c:	2200      	movs	r2, #0
    368e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3690:	230c      	movs	r3, #12
    3692:	18fb      	adds	r3, r7, r3
    3694:	2201      	movs	r2, #1
    3696:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    3698:	230c      	movs	r3, #12
    369a:	18fb      	adds	r3, r7, r3
    369c:	2202      	movs	r2, #2
    369e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    36a0:	230c      	movs	r3, #12
    36a2:	18fb      	adds	r3, r7, r3
    36a4:	0019      	movs	r1, r3
    36a6:	2009      	movs	r0, #9
    36a8:	4b09      	ldr	r3, [pc, #36]	; (36d0 <nm_bsp_register_isr+0x68>)
    36aa:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    36ac:	4b09      	ldr	r3, [pc, #36]	; (36d4 <nm_bsp_register_isr+0x6c>)
    36ae:	2200      	movs	r2, #0
    36b0:	2109      	movs	r1, #9
    36b2:	0018      	movs	r0, r3
    36b4:	4b08      	ldr	r3, [pc, #32]	; (36d8 <nm_bsp_register_isr+0x70>)
    36b6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    36b8:	2100      	movs	r1, #0
    36ba:	2009      	movs	r0, #9
    36bc:	4b07      	ldr	r3, [pc, #28]	; (36dc <nm_bsp_register_isr+0x74>)
    36be:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    36c0:	46c0      	nop			; (mov r8, r8)
    36c2:	46bd      	mov	sp, r7
    36c4:	b006      	add	sp, #24
    36c6:	bd80      	pop	{r7, pc}
    36c8:	2000021c 	.word	0x2000021c
    36cc:	00009435 	.word	0x00009435
    36d0:	00009469 	.word	0x00009469
    36d4:	000034f1 	.word	0x000034f1
    36d8:	00009035 	.word	0x00009035
    36dc:	00009099 	.word	0x00009099

000036e0 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    36e0:	b580      	push	{r7, lr}
    36e2:	b082      	sub	sp, #8
    36e4:	af00      	add	r7, sp, #0
    36e6:	0002      	movs	r2, r0
    36e8:	1dfb      	adds	r3, r7, #7
    36ea:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    36ec:	1dfb      	adds	r3, r7, #7
    36ee:	781b      	ldrb	r3, [r3, #0]
    36f0:	2b00      	cmp	r3, #0
    36f2:	d004      	beq.n	36fe <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    36f4:	2100      	movs	r1, #0
    36f6:	2009      	movs	r0, #9
    36f8:	4b05      	ldr	r3, [pc, #20]	; (3710 <nm_bsp_interrupt_ctrl+0x30>)
    36fa:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    36fc:	e003      	b.n	3706 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    36fe:	2100      	movs	r1, #0
    3700:	2009      	movs	r0, #9
    3702:	4b04      	ldr	r3, [pc, #16]	; (3714 <nm_bsp_interrupt_ctrl+0x34>)
    3704:	4798      	blx	r3
}
    3706:	46c0      	nop			; (mov r8, r8)
    3708:	46bd      	mov	sp, r7
    370a:	b002      	add	sp, #8
    370c:	bd80      	pop	{r7, pc}
    370e:	46c0      	nop			; (mov r8, r8)
    3710:	00009099 	.word	0x00009099
    3714:	000090e1 	.word	0x000090e1

00003718 <system_pinmux_get_group_from_gpio_pin>:
{
    3718:	b580      	push	{r7, lr}
    371a:	b084      	sub	sp, #16
    371c:	af00      	add	r7, sp, #0
    371e:	0002      	movs	r2, r0
    3720:	1dfb      	adds	r3, r7, #7
    3722:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3724:	230f      	movs	r3, #15
    3726:	18fb      	adds	r3, r7, r3
    3728:	1dfa      	adds	r2, r7, #7
    372a:	7812      	ldrb	r2, [r2, #0]
    372c:	09d2      	lsrs	r2, r2, #7
    372e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3730:	230e      	movs	r3, #14
    3732:	18fb      	adds	r3, r7, r3
    3734:	1dfa      	adds	r2, r7, #7
    3736:	7812      	ldrb	r2, [r2, #0]
    3738:	0952      	lsrs	r2, r2, #5
    373a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    373c:	4b0d      	ldr	r3, [pc, #52]	; (3774 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    373e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3740:	230f      	movs	r3, #15
    3742:	18fb      	adds	r3, r7, r3
    3744:	781b      	ldrb	r3, [r3, #0]
    3746:	2b00      	cmp	r3, #0
    3748:	d10f      	bne.n	376a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    374a:	230f      	movs	r3, #15
    374c:	18fb      	adds	r3, r7, r3
    374e:	781b      	ldrb	r3, [r3, #0]
    3750:	009b      	lsls	r3, r3, #2
    3752:	2210      	movs	r2, #16
    3754:	4694      	mov	ip, r2
    3756:	44bc      	add	ip, r7
    3758:	4463      	add	r3, ip
    375a:	3b08      	subs	r3, #8
    375c:	681a      	ldr	r2, [r3, #0]
    375e:	230e      	movs	r3, #14
    3760:	18fb      	adds	r3, r7, r3
    3762:	781b      	ldrb	r3, [r3, #0]
    3764:	01db      	lsls	r3, r3, #7
    3766:	18d3      	adds	r3, r2, r3
    3768:	e000      	b.n	376c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    376a:	2300      	movs	r3, #0
}
    376c:	0018      	movs	r0, r3
    376e:	46bd      	mov	sp, r7
    3770:	b004      	add	sp, #16
    3772:	bd80      	pop	{r7, pc}
    3774:	41004400 	.word	0x41004400

00003778 <port_get_group_from_gpio_pin>:
{
    3778:	b580      	push	{r7, lr}
    377a:	b082      	sub	sp, #8
    377c:	af00      	add	r7, sp, #0
    377e:	0002      	movs	r2, r0
    3780:	1dfb      	adds	r3, r7, #7
    3782:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3784:	1dfb      	adds	r3, r7, #7
    3786:	781b      	ldrb	r3, [r3, #0]
    3788:	0018      	movs	r0, r3
    378a:	4b03      	ldr	r3, [pc, #12]	; (3798 <port_get_group_from_gpio_pin+0x20>)
    378c:	4798      	blx	r3
    378e:	0003      	movs	r3, r0
}
    3790:	0018      	movs	r0, r3
    3792:	46bd      	mov	sp, r7
    3794:	b002      	add	sp, #8
    3796:	bd80      	pop	{r7, pc}
    3798:	00003719 	.word	0x00003719

0000379c <port_get_config_defaults>:
{
    379c:	b580      	push	{r7, lr}
    379e:	b082      	sub	sp, #8
    37a0:	af00      	add	r7, sp, #0
    37a2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    37a4:	687b      	ldr	r3, [r7, #4]
    37a6:	2200      	movs	r2, #0
    37a8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	2201      	movs	r2, #1
    37ae:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    37b0:	687b      	ldr	r3, [r7, #4]
    37b2:	2200      	movs	r2, #0
    37b4:	709a      	strb	r2, [r3, #2]
}
    37b6:	46c0      	nop			; (mov r8, r8)
    37b8:	46bd      	mov	sp, r7
    37ba:	b002      	add	sp, #8
    37bc:	bd80      	pop	{r7, pc}
	...

000037c0 <port_pin_set_output_level>:
{
    37c0:	b580      	push	{r7, lr}
    37c2:	b084      	sub	sp, #16
    37c4:	af00      	add	r7, sp, #0
    37c6:	0002      	movs	r2, r0
    37c8:	1dfb      	adds	r3, r7, #7
    37ca:	701a      	strb	r2, [r3, #0]
    37cc:	1dbb      	adds	r3, r7, #6
    37ce:	1c0a      	adds	r2, r1, #0
    37d0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    37d2:	1dfb      	adds	r3, r7, #7
    37d4:	781b      	ldrb	r3, [r3, #0]
    37d6:	0018      	movs	r0, r3
    37d8:	4b0d      	ldr	r3, [pc, #52]	; (3810 <port_pin_set_output_level+0x50>)
    37da:	4798      	blx	r3
    37dc:	0003      	movs	r3, r0
    37de:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    37e0:	1dfb      	adds	r3, r7, #7
    37e2:	781b      	ldrb	r3, [r3, #0]
    37e4:	221f      	movs	r2, #31
    37e6:	4013      	ands	r3, r2
    37e8:	2201      	movs	r2, #1
    37ea:	409a      	lsls	r2, r3
    37ec:	0013      	movs	r3, r2
    37ee:	60bb      	str	r3, [r7, #8]
	if (level) {
    37f0:	1dbb      	adds	r3, r7, #6
    37f2:	781b      	ldrb	r3, [r3, #0]
    37f4:	2b00      	cmp	r3, #0
    37f6:	d003      	beq.n	3800 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    37f8:	68fb      	ldr	r3, [r7, #12]
    37fa:	68ba      	ldr	r2, [r7, #8]
    37fc:	619a      	str	r2, [r3, #24]
}
    37fe:	e002      	b.n	3806 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3800:	68fb      	ldr	r3, [r7, #12]
    3802:	68ba      	ldr	r2, [r7, #8]
    3804:	615a      	str	r2, [r3, #20]
}
    3806:	46c0      	nop			; (mov r8, r8)
    3808:	46bd      	mov	sp, r7
    380a:	b004      	add	sp, #16
    380c:	bd80      	pop	{r7, pc}
    380e:	46c0      	nop			; (mov r8, r8)
    3810:	00003779 	.word	0x00003779

00003814 <system_interrupt_enable>:
{
    3814:	b580      	push	{r7, lr}
    3816:	b082      	sub	sp, #8
    3818:	af00      	add	r7, sp, #0
    381a:	0002      	movs	r2, r0
    381c:	1dfb      	adds	r3, r7, #7
    381e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3820:	4b06      	ldr	r3, [pc, #24]	; (383c <system_interrupt_enable+0x28>)
    3822:	1dfa      	adds	r2, r7, #7
    3824:	7812      	ldrb	r2, [r2, #0]
    3826:	0011      	movs	r1, r2
    3828:	221f      	movs	r2, #31
    382a:	400a      	ands	r2, r1
    382c:	2101      	movs	r1, #1
    382e:	4091      	lsls	r1, r2
    3830:	000a      	movs	r2, r1
    3832:	601a      	str	r2, [r3, #0]
}
    3834:	46c0      	nop			; (mov r8, r8)
    3836:	46bd      	mov	sp, r7
    3838:	b002      	add	sp, #8
    383a:	bd80      	pop	{r7, pc}
    383c:	e000e100 	.word	0xe000e100

00003840 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    3840:	b580      	push	{r7, lr}
    3842:	b082      	sub	sp, #8
    3844:	af00      	add	r7, sp, #0
    3846:	0002      	movs	r2, r0
    3848:	1dfb      	adds	r3, r7, #7
    384a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    384c:	4a07      	ldr	r2, [pc, #28]	; (386c <system_interrupt_disable+0x2c>)
    384e:	1dfb      	adds	r3, r7, #7
    3850:	781b      	ldrb	r3, [r3, #0]
    3852:	0019      	movs	r1, r3
    3854:	231f      	movs	r3, #31
    3856:	400b      	ands	r3, r1
    3858:	2101      	movs	r1, #1
    385a:	4099      	lsls	r1, r3
    385c:	000b      	movs	r3, r1
    385e:	0019      	movs	r1, r3
    3860:	2380      	movs	r3, #128	; 0x80
    3862:	50d1      	str	r1, [r2, r3]
}
    3864:	46c0      	nop			; (mov r8, r8)
    3866:	46bd      	mov	sp, r7
    3868:	b002      	add	sp, #8
    386a:	bd80      	pop	{r7, pc}
    386c:	e000e100 	.word	0xe000e100

00003870 <spi_is_syncing>:
{
    3870:	b580      	push	{r7, lr}
    3872:	b084      	sub	sp, #16
    3874:	af00      	add	r7, sp, #0
    3876:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3878:	687b      	ldr	r3, [r7, #4]
    387a:	681b      	ldr	r3, [r3, #0]
    387c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    387e:	68fb      	ldr	r3, [r7, #12]
    3880:	69db      	ldr	r3, [r3, #28]
    3882:	1e5a      	subs	r2, r3, #1
    3884:	4193      	sbcs	r3, r2
    3886:	b2db      	uxtb	r3, r3
}
    3888:	0018      	movs	r0, r3
    388a:	46bd      	mov	sp, r7
    388c:	b004      	add	sp, #16
    388e:	bd80      	pop	{r7, pc}

00003890 <spi_get_config_defaults>:
{
    3890:	b580      	push	{r7, lr}
    3892:	b082      	sub	sp, #8
    3894:	af00      	add	r7, sp, #0
    3896:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	2201      	movs	r2, #1
    389c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    389e:	687b      	ldr	r3, [r7, #4]
    38a0:	2200      	movs	r2, #0
    38a2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    38a4:	687b      	ldr	r3, [r7, #4]
    38a6:	2200      	movs	r2, #0
    38a8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    38aa:	687b      	ldr	r3, [r7, #4]
    38ac:	22c0      	movs	r2, #192	; 0xc0
    38ae:	0392      	lsls	r2, r2, #14
    38b0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    38b2:	687b      	ldr	r3, [r7, #4]
    38b4:	2200      	movs	r2, #0
    38b6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	2200      	movs	r2, #0
    38bc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    38be:	687b      	ldr	r3, [r7, #4]
    38c0:	2201      	movs	r2, #1
    38c2:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    38c4:	687b      	ldr	r3, [r7, #4]
    38c6:	2201      	movs	r2, #1
    38c8:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    38ca:	687b      	ldr	r3, [r7, #4]
    38cc:	2200      	movs	r2, #0
    38ce:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    38d0:	687b      	ldr	r3, [r7, #4]
    38d2:	2224      	movs	r2, #36	; 0x24
    38d4:	2100      	movs	r1, #0
    38d6:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    38d8:	687b      	ldr	r3, [r7, #4]
    38da:	3318      	adds	r3, #24
    38dc:	220c      	movs	r2, #12
    38de:	2100      	movs	r1, #0
    38e0:	0018      	movs	r0, r3
    38e2:	4b0a      	ldr	r3, [pc, #40]	; (390c <spi_get_config_defaults+0x7c>)
    38e4:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	4a09      	ldr	r2, [pc, #36]	; (3910 <spi_get_config_defaults+0x80>)
    38ea:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    38ec:	687b      	ldr	r3, [r7, #4]
    38ee:	2200      	movs	r2, #0
    38f0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    38f2:	687b      	ldr	r3, [r7, #4]
    38f4:	2200      	movs	r2, #0
    38f6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    38f8:	687b      	ldr	r3, [r7, #4]
    38fa:	2200      	movs	r2, #0
    38fc:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    38fe:	687b      	ldr	r3, [r7, #4]
    3900:	2200      	movs	r2, #0
    3902:	635a      	str	r2, [r3, #52]	; 0x34
};
    3904:	46c0      	nop			; (mov r8, r8)
    3906:	46bd      	mov	sp, r7
    3908:	b002      	add	sp, #8
    390a:	bd80      	pop	{r7, pc}
    390c:	0001340b 	.word	0x0001340b
    3910:	000186a0 	.word	0x000186a0

00003914 <spi_slave_inst_get_config_defaults>:
{
    3914:	b580      	push	{r7, lr}
    3916:	b082      	sub	sp, #8
    3918:	af00      	add	r7, sp, #0
    391a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    391c:	687b      	ldr	r3, [r7, #4]
    391e:	220a      	movs	r2, #10
    3920:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    3922:	687b      	ldr	r3, [r7, #4]
    3924:	2200      	movs	r2, #0
    3926:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    3928:	687b      	ldr	r3, [r7, #4]
    392a:	2200      	movs	r2, #0
    392c:	709a      	strb	r2, [r3, #2]
}
    392e:	46c0      	nop			; (mov r8, r8)
    3930:	46bd      	mov	sp, r7
    3932:	b002      	add	sp, #8
    3934:	bd80      	pop	{r7, pc}
	...

00003938 <spi_attach_slave>:
{
    3938:	b580      	push	{r7, lr}
    393a:	b084      	sub	sp, #16
    393c:	af00      	add	r7, sp, #0
    393e:	6078      	str	r0, [r7, #4]
    3940:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
    3942:	683b      	ldr	r3, [r7, #0]
    3944:	781a      	ldrb	r2, [r3, #0]
    3946:	687b      	ldr	r3, [r7, #4]
    3948:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    394a:	683b      	ldr	r3, [r7, #0]
    394c:	785a      	ldrb	r2, [r3, #1]
    394e:	687b      	ldr	r3, [r7, #4]
    3950:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    3952:	683b      	ldr	r3, [r7, #0]
    3954:	789a      	ldrb	r2, [r3, #2]
    3956:	687b      	ldr	r3, [r7, #4]
    3958:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    395a:	230c      	movs	r3, #12
    395c:	18fb      	adds	r3, r7, r3
    395e:	0018      	movs	r0, r3
    3960:	4b0b      	ldr	r3, [pc, #44]	; (3990 <spi_attach_slave+0x58>)
    3962:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3964:	230c      	movs	r3, #12
    3966:	18fb      	adds	r3, r7, r3
    3968:	2201      	movs	r2, #1
    396a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    396c:	687b      	ldr	r3, [r7, #4]
    396e:	781b      	ldrb	r3, [r3, #0]
    3970:	220c      	movs	r2, #12
    3972:	18ba      	adds	r2, r7, r2
    3974:	0011      	movs	r1, r2
    3976:	0018      	movs	r0, r3
    3978:	4b06      	ldr	r3, [pc, #24]	; (3994 <spi_attach_slave+0x5c>)
    397a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	781b      	ldrb	r3, [r3, #0]
    3980:	2101      	movs	r1, #1
    3982:	0018      	movs	r0, r3
    3984:	4b04      	ldr	r3, [pc, #16]	; (3998 <spi_attach_slave+0x60>)
    3986:	4798      	blx	r3
}
    3988:	46c0      	nop			; (mov r8, r8)
    398a:	46bd      	mov	sp, r7
    398c:	b004      	add	sp, #16
    398e:	bd80      	pop	{r7, pc}
    3990:	0000379d 	.word	0x0000379d
    3994:	00010a45 	.word	0x00010a45
    3998:	000037c1 	.word	0x000037c1

0000399c <spi_enable>:
{
    399c:	b580      	push	{r7, lr}
    399e:	b084      	sub	sp, #16
    39a0:	af00      	add	r7, sp, #0
    39a2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    39a4:	687b      	ldr	r3, [r7, #4]
    39a6:	681b      	ldr	r3, [r3, #0]
    39a8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    39aa:	687b      	ldr	r3, [r7, #4]
    39ac:	681b      	ldr	r3, [r3, #0]
    39ae:	0018      	movs	r0, r3
    39b0:	4b0b      	ldr	r3, [pc, #44]	; (39e0 <spi_enable+0x44>)
    39b2:	4798      	blx	r3
    39b4:	0003      	movs	r3, r0
    39b6:	0018      	movs	r0, r3
    39b8:	4b0a      	ldr	r3, [pc, #40]	; (39e4 <spi_enable+0x48>)
    39ba:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    39bc:	46c0      	nop			; (mov r8, r8)
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	0018      	movs	r0, r3
    39c2:	4b09      	ldr	r3, [pc, #36]	; (39e8 <spi_enable+0x4c>)
    39c4:	4798      	blx	r3
    39c6:	1e03      	subs	r3, r0, #0
    39c8:	d1f9      	bne.n	39be <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    39ca:	68fb      	ldr	r3, [r7, #12]
    39cc:	681b      	ldr	r3, [r3, #0]
    39ce:	2202      	movs	r2, #2
    39d0:	431a      	orrs	r2, r3
    39d2:	68fb      	ldr	r3, [r7, #12]
    39d4:	601a      	str	r2, [r3, #0]
}
    39d6:	46c0      	nop			; (mov r8, r8)
    39d8:	46bd      	mov	sp, r7
    39da:	b004      	add	sp, #16
    39dc:	bd80      	pop	{r7, pc}
    39de:	46c0      	nop			; (mov r8, r8)
    39e0:	00010769 	.word	0x00010769
    39e4:	00003815 	.word	0x00003815
    39e8:	00003871 	.word	0x00003871

000039ec <spi_disable>:
{
    39ec:	b580      	push	{r7, lr}
    39ee:	b084      	sub	sp, #16
    39f0:	af00      	add	r7, sp, #0
    39f2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    39f4:	687b      	ldr	r3, [r7, #4]
    39f6:	681b      	ldr	r3, [r3, #0]
    39f8:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    39fa:	687b      	ldr	r3, [r7, #4]
    39fc:	681b      	ldr	r3, [r3, #0]
    39fe:	0018      	movs	r0, r3
    3a00:	4b0e      	ldr	r3, [pc, #56]	; (3a3c <spi_disable+0x50>)
    3a02:	4798      	blx	r3
    3a04:	0003      	movs	r3, r0
    3a06:	0018      	movs	r0, r3
    3a08:	4b0d      	ldr	r3, [pc, #52]	; (3a40 <spi_disable+0x54>)
    3a0a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    3a0c:	46c0      	nop			; (mov r8, r8)
    3a0e:	687b      	ldr	r3, [r7, #4]
    3a10:	0018      	movs	r0, r3
    3a12:	4b0c      	ldr	r3, [pc, #48]	; (3a44 <spi_disable+0x58>)
    3a14:	4798      	blx	r3
    3a16:	1e03      	subs	r3, r0, #0
    3a18:	d1f9      	bne.n	3a0e <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    3a1a:	68fb      	ldr	r3, [r7, #12]
    3a1c:	228f      	movs	r2, #143	; 0x8f
    3a1e:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    3a20:	68fb      	ldr	r3, [r7, #12]
    3a22:	228f      	movs	r2, #143	; 0x8f
    3a24:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3a26:	68fb      	ldr	r3, [r7, #12]
    3a28:	681b      	ldr	r3, [r3, #0]
    3a2a:	2202      	movs	r2, #2
    3a2c:	4393      	bics	r3, r2
    3a2e:	001a      	movs	r2, r3
    3a30:	68fb      	ldr	r3, [r7, #12]
    3a32:	601a      	str	r2, [r3, #0]
}
    3a34:	46c0      	nop			; (mov r8, r8)
    3a36:	46bd      	mov	sp, r7
    3a38:	b004      	add	sp, #16
    3a3a:	bd80      	pop	{r7, pc}
    3a3c:	00010769 	.word	0x00010769
    3a40:	00003841 	.word	0x00003841
    3a44:	00003871 	.word	0x00003871

00003a48 <spi_is_write_complete>:
{
    3a48:	b580      	push	{r7, lr}
    3a4a:	b084      	sub	sp, #16
    3a4c:	af00      	add	r7, sp, #0
    3a4e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3a50:	687b      	ldr	r3, [r7, #4]
    3a52:	681b      	ldr	r3, [r3, #0]
    3a54:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3a56:	68fb      	ldr	r3, [r7, #12]
    3a58:	7e1b      	ldrb	r3, [r3, #24]
    3a5a:	b2db      	uxtb	r3, r3
    3a5c:	001a      	movs	r2, r3
    3a5e:	2302      	movs	r3, #2
    3a60:	4013      	ands	r3, r2
    3a62:	1e5a      	subs	r2, r3, #1
    3a64:	4193      	sbcs	r3, r2
    3a66:	b2db      	uxtb	r3, r3
}
    3a68:	0018      	movs	r0, r3
    3a6a:	46bd      	mov	sp, r7
    3a6c:	b004      	add	sp, #16
    3a6e:	bd80      	pop	{r7, pc}

00003a70 <spi_is_ready_to_write>:
{
    3a70:	b580      	push	{r7, lr}
    3a72:	b084      	sub	sp, #16
    3a74:	af00      	add	r7, sp, #0
    3a76:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3a78:	687b      	ldr	r3, [r7, #4]
    3a7a:	681b      	ldr	r3, [r3, #0]
    3a7c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3a7e:	68fb      	ldr	r3, [r7, #12]
    3a80:	7e1b      	ldrb	r3, [r3, #24]
    3a82:	b2db      	uxtb	r3, r3
    3a84:	001a      	movs	r2, r3
    3a86:	2301      	movs	r3, #1
    3a88:	4013      	ands	r3, r2
    3a8a:	1e5a      	subs	r2, r3, #1
    3a8c:	4193      	sbcs	r3, r2
    3a8e:	b2db      	uxtb	r3, r3
}
    3a90:	0018      	movs	r0, r3
    3a92:	46bd      	mov	sp, r7
    3a94:	b004      	add	sp, #16
    3a96:	bd80      	pop	{r7, pc}

00003a98 <spi_is_ready_to_read>:
{
    3a98:	b580      	push	{r7, lr}
    3a9a:	b084      	sub	sp, #16
    3a9c:	af00      	add	r7, sp, #0
    3a9e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3aa0:	687b      	ldr	r3, [r7, #4]
    3aa2:	681b      	ldr	r3, [r3, #0]
    3aa4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3aa6:	68fb      	ldr	r3, [r7, #12]
    3aa8:	7e1b      	ldrb	r3, [r3, #24]
    3aaa:	b2db      	uxtb	r3, r3
    3aac:	001a      	movs	r2, r3
    3aae:	2304      	movs	r3, #4
    3ab0:	4013      	ands	r3, r2
    3ab2:	1e5a      	subs	r2, r3, #1
    3ab4:	4193      	sbcs	r3, r2
    3ab6:	b2db      	uxtb	r3, r3
}
    3ab8:	0018      	movs	r0, r3
    3aba:	46bd      	mov	sp, r7
    3abc:	b004      	add	sp, #16
    3abe:	bd80      	pop	{r7, pc}

00003ac0 <spi_write>:
{
    3ac0:	b580      	push	{r7, lr}
    3ac2:	b084      	sub	sp, #16
    3ac4:	af00      	add	r7, sp, #0
    3ac6:	6078      	str	r0, [r7, #4]
    3ac8:	000a      	movs	r2, r1
    3aca:	1cbb      	adds	r3, r7, #2
    3acc:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ace:	687b      	ldr	r3, [r7, #4]
    3ad0:	681b      	ldr	r3, [r3, #0]
    3ad2:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    3ad4:	687b      	ldr	r3, [r7, #4]
    3ad6:	0018      	movs	r0, r3
    3ad8:	4b0a      	ldr	r3, [pc, #40]	; (3b04 <spi_write+0x44>)
    3ada:	4798      	blx	r3
    3adc:	0003      	movs	r3, r0
    3ade:	001a      	movs	r2, r3
    3ae0:	2301      	movs	r3, #1
    3ae2:	4053      	eors	r3, r2
    3ae4:	b2db      	uxtb	r3, r3
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d001      	beq.n	3aee <spi_write+0x2e>
		return STATUS_BUSY;
    3aea:	2305      	movs	r3, #5
    3aec:	e006      	b.n	3afc <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3aee:	1cbb      	adds	r3, r7, #2
    3af0:	881b      	ldrh	r3, [r3, #0]
    3af2:	05db      	lsls	r3, r3, #23
    3af4:	0dda      	lsrs	r2, r3, #23
    3af6:	68fb      	ldr	r3, [r7, #12]
    3af8:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    3afa:	2300      	movs	r3, #0
}
    3afc:	0018      	movs	r0, r3
    3afe:	46bd      	mov	sp, r7
    3b00:	b004      	add	sp, #16
    3b02:	bd80      	pop	{r7, pc}
    3b04:	00003a71 	.word	0x00003a71

00003b08 <spi_read>:
{
    3b08:	b580      	push	{r7, lr}
    3b0a:	b084      	sub	sp, #16
    3b0c:	af00      	add	r7, sp, #0
    3b0e:	6078      	str	r0, [r7, #4]
    3b10:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b12:	687b      	ldr	r3, [r7, #4]
    3b14:	681b      	ldr	r3, [r3, #0]
    3b16:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    3b18:	687b      	ldr	r3, [r7, #4]
    3b1a:	0018      	movs	r0, r3
    3b1c:	4b1b      	ldr	r3, [pc, #108]	; (3b8c <spi_read+0x84>)
    3b1e:	4798      	blx	r3
    3b20:	0003      	movs	r3, r0
    3b22:	001a      	movs	r2, r3
    3b24:	2301      	movs	r3, #1
    3b26:	4053      	eors	r3, r2
    3b28:	b2db      	uxtb	r3, r3
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d001      	beq.n	3b32 <spi_read+0x2a>
		return STATUS_ERR_IO;
    3b2e:	2310      	movs	r3, #16
    3b30:	e027      	b.n	3b82 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    3b32:	230f      	movs	r3, #15
    3b34:	18fb      	adds	r3, r7, r3
    3b36:	2200      	movs	r2, #0
    3b38:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3b3a:	68bb      	ldr	r3, [r7, #8]
    3b3c:	8b5b      	ldrh	r3, [r3, #26]
    3b3e:	b29b      	uxth	r3, r3
    3b40:	001a      	movs	r2, r3
    3b42:	2304      	movs	r3, #4
    3b44:	4013      	ands	r3, r2
    3b46:	d006      	beq.n	3b56 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    3b48:	230f      	movs	r3, #15
    3b4a:	18fb      	adds	r3, r7, r3
    3b4c:	221e      	movs	r2, #30
    3b4e:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3b50:	68bb      	ldr	r3, [r7, #8]
    3b52:	2204      	movs	r2, #4
    3b54:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3b56:	687b      	ldr	r3, [r7, #4]
    3b58:	799b      	ldrb	r3, [r3, #6]
    3b5a:	2b01      	cmp	r3, #1
    3b5c:	d108      	bne.n	3b70 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3b5e:	68bb      	ldr	r3, [r7, #8]
    3b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b62:	b29b      	uxth	r3, r3
    3b64:	05db      	lsls	r3, r3, #23
    3b66:	0ddb      	lsrs	r3, r3, #23
    3b68:	b29a      	uxth	r2, r3
    3b6a:	683b      	ldr	r3, [r7, #0]
    3b6c:	801a      	strh	r2, [r3, #0]
    3b6e:	e005      	b.n	3b7c <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3b70:	68bb      	ldr	r3, [r7, #8]
    3b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b74:	b2db      	uxtb	r3, r3
    3b76:	b29a      	uxth	r2, r3
    3b78:	683b      	ldr	r3, [r7, #0]
    3b7a:	801a      	strh	r2, [r3, #0]
	return retval;
    3b7c:	230f      	movs	r3, #15
    3b7e:	18fb      	adds	r3, r7, r3
    3b80:	781b      	ldrb	r3, [r3, #0]
}
    3b82:	0018      	movs	r0, r3
    3b84:	46bd      	mov	sp, r7
    3b86:	b004      	add	sp, #16
    3b88:	bd80      	pop	{r7, pc}
    3b8a:	46c0      	nop			; (mov r8, r8)
    3b8c:	00003a99 	.word	0x00003a99

00003b90 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    3b90:	b580      	push	{r7, lr}
    3b92:	b086      	sub	sp, #24
    3b94:	af00      	add	r7, sp, #0
    3b96:	60f8      	str	r0, [r7, #12]
    3b98:	60b9      	str	r1, [r7, #8]
    3b9a:	1dbb      	adds	r3, r7, #6
    3b9c:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    3b9e:	2313      	movs	r3, #19
    3ba0:	18fb      	adds	r3, r7, r3
    3ba2:	2200      	movs	r2, #0
    3ba4:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    3ba6:	2317      	movs	r3, #23
    3ba8:	18fb      	adds	r3, r7, r3
    3baa:	2200      	movs	r2, #0
    3bac:	701a      	strb	r2, [r3, #0]
    3bae:	2316      	movs	r3, #22
    3bb0:	18fb      	adds	r3, r7, r3
    3bb2:	2200      	movs	r2, #0
    3bb4:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    3bb6:	2314      	movs	r3, #20
    3bb8:	18fb      	adds	r3, r7, r3
    3bba:	2200      	movs	r2, #0
    3bbc:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    3bbe:	2310      	movs	r3, #16
    3bc0:	18fb      	adds	r3, r7, r3
    3bc2:	2200      	movs	r2, #0
    3bc4:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    3bc6:	68bb      	ldr	r3, [r7, #8]
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d102      	bne.n	3bd2 <spi_rw+0x42>
    3bcc:	68fb      	ldr	r3, [r7, #12]
    3bce:	2b00      	cmp	r3, #0
    3bd0:	d003      	beq.n	3bda <spi_rw+0x4a>
    3bd2:	1dbb      	adds	r3, r7, #6
    3bd4:	881b      	ldrh	r3, [r3, #0]
    3bd6:	2b00      	cmp	r3, #0
    3bd8:	d102      	bne.n	3be0 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    3bda:	230f      	movs	r3, #15
    3bdc:	425b      	negs	r3, r3
    3bde:	e07e      	b.n	3cde <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    3be0:	68fb      	ldr	r3, [r7, #12]
    3be2:	2b00      	cmp	r3, #0
    3be4:	d106      	bne.n	3bf4 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    3be6:	2313      	movs	r3, #19
    3be8:	18fb      	adds	r3, r7, r3
    3bea:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    3bec:	2317      	movs	r3, #23
    3bee:	18fb      	adds	r3, r7, r3
    3bf0:	2201      	movs	r2, #1
    3bf2:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    3bf4:	68bb      	ldr	r3, [r7, #8]
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	d106      	bne.n	3c08 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    3bfa:	2313      	movs	r3, #19
    3bfc:	18fb      	adds	r3, r7, r3
    3bfe:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    3c00:	2316      	movs	r3, #22
    3c02:	18fb      	adds	r3, r7, r3
    3c04:	2201      	movs	r2, #1
    3c06:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    3c08:	4937      	ldr	r1, [pc, #220]	; (3ce8 <spi_rw+0x158>)
    3c0a:	4b38      	ldr	r3, [pc, #224]	; (3cec <spi_rw+0x15c>)
    3c0c:	2201      	movs	r2, #1
    3c0e:	0018      	movs	r0, r3
    3c10:	4b37      	ldr	r3, [pc, #220]	; (3cf0 <spi_rw+0x160>)
    3c12:	4798      	blx	r3

	while (u16Sz) {
    3c14:	e04c      	b.n	3cb0 <spi_rw+0x120>
		txd_data = *pu8Mosi;
    3c16:	68fb      	ldr	r3, [r7, #12]
    3c18:	781a      	ldrb	r2, [r3, #0]
    3c1a:	2314      	movs	r3, #20
    3c1c:	18fb      	adds	r3, r7, r3
    3c1e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    3c20:	46c0      	nop			; (mov r8, r8)
    3c22:	4b32      	ldr	r3, [pc, #200]	; (3cec <spi_rw+0x15c>)
    3c24:	0018      	movs	r0, r3
    3c26:	4b33      	ldr	r3, [pc, #204]	; (3cf4 <spi_rw+0x164>)
    3c28:	4798      	blx	r3
    3c2a:	0003      	movs	r3, r0
    3c2c:	001a      	movs	r2, r3
    3c2e:	2301      	movs	r3, #1
    3c30:	4053      	eors	r3, r2
    3c32:	b2db      	uxtb	r3, r3
    3c34:	2b00      	cmp	r3, #0
    3c36:	d1f4      	bne.n	3c22 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    3c38:	46c0      	nop			; (mov r8, r8)
    3c3a:	2314      	movs	r3, #20
    3c3c:	18fb      	adds	r3, r7, r3
    3c3e:	881a      	ldrh	r2, [r3, #0]
    3c40:	4b2a      	ldr	r3, [pc, #168]	; (3cec <spi_rw+0x15c>)
    3c42:	0011      	movs	r1, r2
    3c44:	0018      	movs	r0, r3
    3c46:	4b2c      	ldr	r3, [pc, #176]	; (3cf8 <spi_rw+0x168>)
    3c48:	4798      	blx	r3
    3c4a:	1e03      	subs	r3, r0, #0
    3c4c:	d1f5      	bne.n	3c3a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    3c4e:	46c0      	nop			; (mov r8, r8)
    3c50:	4b26      	ldr	r3, [pc, #152]	; (3cec <spi_rw+0x15c>)
    3c52:	0018      	movs	r0, r3
    3c54:	4b29      	ldr	r3, [pc, #164]	; (3cfc <spi_rw+0x16c>)
    3c56:	4798      	blx	r3
    3c58:	0003      	movs	r3, r0
    3c5a:	001a      	movs	r2, r3
    3c5c:	2301      	movs	r3, #1
    3c5e:	4053      	eors	r3, r2
    3c60:	b2db      	uxtb	r3, r3
    3c62:	2b00      	cmp	r3, #0
    3c64:	d1f4      	bne.n	3c50 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    3c66:	46c0      	nop			; (mov r8, r8)
    3c68:	2310      	movs	r3, #16
    3c6a:	18fa      	adds	r2, r7, r3
    3c6c:	4b1f      	ldr	r3, [pc, #124]	; (3cec <spi_rw+0x15c>)
    3c6e:	0011      	movs	r1, r2
    3c70:	0018      	movs	r0, r3
    3c72:	4b23      	ldr	r3, [pc, #140]	; (3d00 <spi_rw+0x170>)
    3c74:	4798      	blx	r3
    3c76:	1e03      	subs	r3, r0, #0
    3c78:	d1f6      	bne.n	3c68 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    3c7a:	2310      	movs	r3, #16
    3c7c:	18fb      	adds	r3, r7, r3
    3c7e:	881b      	ldrh	r3, [r3, #0]
    3c80:	b2da      	uxtb	r2, r3
    3c82:	68bb      	ldr	r3, [r7, #8]
    3c84:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    3c86:	1dbb      	adds	r3, r7, #6
    3c88:	881a      	ldrh	r2, [r3, #0]
    3c8a:	1dbb      	adds	r3, r7, #6
    3c8c:	3a01      	subs	r2, #1
    3c8e:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    3c90:	2316      	movs	r3, #22
    3c92:	18fb      	adds	r3, r7, r3
    3c94:	781b      	ldrb	r3, [r3, #0]
    3c96:	2b00      	cmp	r3, #0
    3c98:	d102      	bne.n	3ca0 <spi_rw+0x110>
			pu8Miso++;
    3c9a:	68bb      	ldr	r3, [r7, #8]
    3c9c:	3301      	adds	r3, #1
    3c9e:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    3ca0:	2317      	movs	r3, #23
    3ca2:	18fb      	adds	r3, r7, r3
    3ca4:	781b      	ldrb	r3, [r3, #0]
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d102      	bne.n	3cb0 <spi_rw+0x120>
			pu8Mosi++;
    3caa:	68fb      	ldr	r3, [r7, #12]
    3cac:	3301      	adds	r3, #1
    3cae:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
    3cb0:	1dbb      	adds	r3, r7, #6
    3cb2:	881b      	ldrh	r3, [r3, #0]
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	d1ae      	bne.n	3c16 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
    3cb8:	46c0      	nop			; (mov r8, r8)
    3cba:	4b0c      	ldr	r3, [pc, #48]	; (3cec <spi_rw+0x15c>)
    3cbc:	0018      	movs	r0, r3
    3cbe:	4b11      	ldr	r3, [pc, #68]	; (3d04 <spi_rw+0x174>)
    3cc0:	4798      	blx	r3
    3cc2:	0003      	movs	r3, r0
    3cc4:	001a      	movs	r2, r3
    3cc6:	2301      	movs	r3, #1
    3cc8:	4053      	eors	r3, r2
    3cca:	b2db      	uxtb	r3, r3
    3ccc:	2b00      	cmp	r3, #0
    3cce:	d1f4      	bne.n	3cba <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    3cd0:	4905      	ldr	r1, [pc, #20]	; (3ce8 <spi_rw+0x158>)
    3cd2:	4b06      	ldr	r3, [pc, #24]	; (3cec <spi_rw+0x15c>)
    3cd4:	2200      	movs	r2, #0
    3cd6:	0018      	movs	r0, r3
    3cd8:	4b05      	ldr	r3, [pc, #20]	; (3cf0 <spi_rw+0x160>)
    3cda:	4798      	blx	r3

	return M2M_SUCCESS;
    3cdc:	2300      	movs	r3, #0
}
    3cde:	0018      	movs	r0, r3
    3ce0:	46bd      	mov	sp, r7
    3ce2:	b006      	add	sp, #24
    3ce4:	bd80      	pop	{r7, pc}
    3ce6:	46c0      	nop			; (mov r8, r8)
    3ce8:	200005b0 	.word	0x200005b0
    3cec:	200005b4 	.word	0x200005b4
    3cf0:	0000a335 	.word	0x0000a335
    3cf4:	00003a71 	.word	0x00003a71
    3cf8:	00003ac1 	.word	0x00003ac1
    3cfc:	00003a99 	.word	0x00003a99
    3d00:	00003b09 	.word	0x00003b09
    3d04:	00003a49 	.word	0x00003a49

00003d08 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    3d08:	b580      	push	{r7, lr}
    3d0a:	b092      	sub	sp, #72	; 0x48
    3d0c:	af00      	add	r7, sp, #0
    3d0e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    3d10:	2347      	movs	r3, #71	; 0x47
    3d12:	18fb      	adds	r3, r7, r3
    3d14:	2200      	movs	r2, #0
    3d16:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    3d18:	2308      	movs	r3, #8
    3d1a:	18fb      	adds	r3, r7, r3
    3d1c:	0018      	movs	r0, r3
    3d1e:	4b26      	ldr	r3, [pc, #152]	; (3db8 <nm_bus_init+0xb0>)
    3d20:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    3d22:	2308      	movs	r3, #8
    3d24:	18fb      	adds	r3, r7, r3
    3d26:	220e      	movs	r2, #14
    3d28:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    3d2a:	2308      	movs	r3, #8
    3d2c:	18fa      	adds	r2, r7, r3
    3d2e:	4b23      	ldr	r3, [pc, #140]	; (3dbc <nm_bus_init+0xb4>)
    3d30:	0011      	movs	r1, r2
    3d32:	0018      	movs	r0, r3
    3d34:	4b22      	ldr	r3, [pc, #136]	; (3dc0 <nm_bus_init+0xb8>)
    3d36:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    3d38:	230c      	movs	r3, #12
    3d3a:	18fb      	adds	r3, r7, r3
    3d3c:	0018      	movs	r0, r3
    3d3e:	4b21      	ldr	r3, [pc, #132]	; (3dc4 <nm_bus_init+0xbc>)
    3d40:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    3d42:	230c      	movs	r3, #12
    3d44:	18fb      	adds	r3, r7, r3
    3d46:	22c0      	movs	r2, #192	; 0xc0
    3d48:	0392      	lsls	r2, r2, #14
    3d4a:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    3d4c:	230c      	movs	r3, #12
    3d4e:	18fb      	adds	r3, r7, r3
    3d50:	4a1d      	ldr	r2, [pc, #116]	; (3dc8 <nm_bus_init+0xc0>)
    3d52:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    3d54:	230c      	movs	r3, #12
    3d56:	18fb      	adds	r3, r7, r3
    3d58:	4a1c      	ldr	r2, [pc, #112]	; (3dcc <nm_bus_init+0xc4>)
    3d5a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    3d5c:	230c      	movs	r3, #12
    3d5e:	18fb      	adds	r3, r7, r3
    3d60:	2201      	movs	r2, #1
    3d62:	4252      	negs	r2, r2
    3d64:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    3d66:	230c      	movs	r3, #12
    3d68:	18fb      	adds	r3, r7, r3
    3d6a:	4a19      	ldr	r2, [pc, #100]	; (3dd0 <nm_bus_init+0xc8>)
    3d6c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    3d6e:	230c      	movs	r3, #12
    3d70:	18fb      	adds	r3, r7, r3
    3d72:	2200      	movs	r2, #0
    3d74:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    3d76:	230c      	movs	r3, #12
    3d78:	18fb      	adds	r3, r7, r3
    3d7a:	4a16      	ldr	r2, [pc, #88]	; (3dd4 <nm_bus_init+0xcc>)
    3d7c:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    3d7e:	230c      	movs	r3, #12
    3d80:	18fa      	adds	r2, r7, r3
    3d82:	4915      	ldr	r1, [pc, #84]	; (3dd8 <nm_bus_init+0xd0>)
    3d84:	4b15      	ldr	r3, [pc, #84]	; (3ddc <nm_bus_init+0xd4>)
    3d86:	0018      	movs	r0, r3
    3d88:	4b15      	ldr	r3, [pc, #84]	; (3de0 <nm_bus_init+0xd8>)
    3d8a:	4798      	blx	r3
    3d8c:	1e03      	subs	r3, r0, #0
    3d8e:	d002      	beq.n	3d96 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    3d90:	2306      	movs	r3, #6
    3d92:	425b      	negs	r3, r3
    3d94:	e00c      	b.n	3db0 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    3d96:	4b11      	ldr	r3, [pc, #68]	; (3ddc <nm_bus_init+0xd4>)
    3d98:	0018      	movs	r0, r3
    3d9a:	4b12      	ldr	r3, [pc, #72]	; (3de4 <nm_bus_init+0xdc>)
    3d9c:	4798      	blx	r3

	nm_bsp_reset();
    3d9e:	4b12      	ldr	r3, [pc, #72]	; (3de8 <nm_bus_init+0xe0>)
    3da0:	4798      	blx	r3
	nm_bsp_sleep(1);
    3da2:	2001      	movs	r0, #1
    3da4:	4b11      	ldr	r3, [pc, #68]	; (3dec <nm_bus_init+0xe4>)
    3da6:	4798      	blx	r3
#endif
	return result;
    3da8:	2347      	movs	r3, #71	; 0x47
    3daa:	18fb      	adds	r3, r7, r3
    3dac:	781b      	ldrb	r3, [r3, #0]
    3dae:	b25b      	sxtb	r3, r3
}
    3db0:	0018      	movs	r0, r3
    3db2:	46bd      	mov	sp, r7
    3db4:	b012      	add	sp, #72	; 0x48
    3db6:	bd80      	pop	{r7, pc}
    3db8:	00003915 	.word	0x00003915
    3dbc:	200005b0 	.word	0x200005b0
    3dc0:	00003939 	.word	0x00003939
    3dc4:	00003891 	.word	0x00003891
    3dc8:	000c0002 	.word	0x000c0002
    3dcc:	000d0002 	.word	0x000d0002
    3dd0:	000f0002 	.word	0x000f0002
    3dd4:	00b71b00 	.word	0x00b71b00
    3dd8:	42001000 	.word	0x42001000
    3ddc:	200005b4 	.word	0x200005b4
    3de0:	0000a071 	.word	0x0000a071
    3de4:	0000399d 	.word	0x0000399d
    3de8:	00003601 	.word	0x00003601
    3dec:	00003641 	.word	0x00003641

00003df0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    3df0:	b590      	push	{r4, r7, lr}
    3df2:	b085      	sub	sp, #20
    3df4:	af00      	add	r7, sp, #0
    3df6:	0002      	movs	r2, r0
    3df8:	6039      	str	r1, [r7, #0]
    3dfa:	1dfb      	adds	r3, r7, #7
    3dfc:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    3dfe:	230f      	movs	r3, #15
    3e00:	18fb      	adds	r3, r7, r3
    3e02:	2200      	movs	r2, #0
    3e04:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    3e06:	1dfb      	adds	r3, r7, #7
    3e08:	781b      	ldrb	r3, [r3, #0]
    3e0a:	2b03      	cmp	r3, #3
    3e0c:	d10f      	bne.n	3e2e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    3e0e:	683b      	ldr	r3, [r7, #0]
    3e10:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    3e12:	68bb      	ldr	r3, [r7, #8]
    3e14:	6818      	ldr	r0, [r3, #0]
    3e16:	68bb      	ldr	r3, [r7, #8]
    3e18:	6859      	ldr	r1, [r3, #4]
    3e1a:	68bb      	ldr	r3, [r7, #8]
    3e1c:	891b      	ldrh	r3, [r3, #8]
    3e1e:	220f      	movs	r2, #15
    3e20:	18bc      	adds	r4, r7, r2
    3e22:	001a      	movs	r2, r3
    3e24:	4b10      	ldr	r3, [pc, #64]	; (3e68 <nm_bus_ioctl+0x78>)
    3e26:	4798      	blx	r3
    3e28:	0003      	movs	r3, r0
    3e2a:	7023      	strb	r3, [r4, #0]
		}
		break;
    3e2c:	e013      	b.n	3e56 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    3e2e:	230f      	movs	r3, #15
    3e30:	18fb      	adds	r3, r7, r3
    3e32:	22ff      	movs	r2, #255	; 0xff
    3e34:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    3e36:	230e      	movs	r3, #14
    3e38:	33ff      	adds	r3, #255	; 0xff
    3e3a:	001a      	movs	r2, r3
    3e3c:	490b      	ldr	r1, [pc, #44]	; (3e6c <nm_bus_ioctl+0x7c>)
    3e3e:	4b0c      	ldr	r3, [pc, #48]	; (3e70 <nm_bus_ioctl+0x80>)
    3e40:	0018      	movs	r0, r3
    3e42:	4b0c      	ldr	r3, [pc, #48]	; (3e74 <nm_bus_ioctl+0x84>)
    3e44:	4798      	blx	r3
    3e46:	4b0c      	ldr	r3, [pc, #48]	; (3e78 <nm_bus_ioctl+0x88>)
    3e48:	0018      	movs	r0, r3
    3e4a:	4b0c      	ldr	r3, [pc, #48]	; (3e7c <nm_bus_ioctl+0x8c>)
    3e4c:	4798      	blx	r3
    3e4e:	200d      	movs	r0, #13
    3e50:	4b0b      	ldr	r3, [pc, #44]	; (3e80 <nm_bus_ioctl+0x90>)
    3e52:	4798      	blx	r3
			break;
    3e54:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    3e56:	230f      	movs	r3, #15
    3e58:	18fb      	adds	r3, r7, r3
    3e5a:	781b      	ldrb	r3, [r3, #0]
    3e5c:	b25b      	sxtb	r3, r3
}
    3e5e:	0018      	movs	r0, r3
    3e60:	46bd      	mov	sp, r7
    3e62:	b005      	add	sp, #20
    3e64:	bd90      	pop	{r4, r7, pc}
    3e66:	46c0      	nop			; (mov r8, r8)
    3e68:	00003b91 	.word	0x00003b91
    3e6c:	00019470 	.word	0x00019470
    3e70:	00019448 	.word	0x00019448
    3e74:	00013e4d 	.word	0x00013e4d
    3e78:	0001945c 	.word	0x0001945c
    3e7c:	00013f69 	.word	0x00013f69
    3e80:	00013e81 	.word	0x00013e81

00003e84 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    3e84:	b580      	push	{r7, lr}
    3e86:	b082      	sub	sp, #8
    3e88:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    3e8a:	1dfb      	adds	r3, r7, #7
    3e8c:	2200      	movs	r2, #0
    3e8e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    3e90:	1d3b      	adds	r3, r7, #4
    3e92:	0018      	movs	r0, r3
    3e94:	4b13      	ldr	r3, [pc, #76]	; (3ee4 <nm_bus_deinit+0x60>)
    3e96:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3e98:	1d3b      	adds	r3, r7, #4
    3e9a:	2200      	movs	r2, #0
    3e9c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    3e9e:	1d3b      	adds	r3, r7, #4
    3ea0:	2200      	movs	r2, #0
    3ea2:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    3ea4:	4b10      	ldr	r3, [pc, #64]	; (3ee8 <nm_bus_deinit+0x64>)
    3ea6:	0018      	movs	r0, r3
    3ea8:	4b10      	ldr	r3, [pc, #64]	; (3eec <nm_bus_deinit+0x68>)
    3eaa:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    3eac:	1d3b      	adds	r3, r7, #4
    3eae:	0019      	movs	r1, r3
    3eb0:	200c      	movs	r0, #12
    3eb2:	4b0f      	ldr	r3, [pc, #60]	; (3ef0 <nm_bus_deinit+0x6c>)
    3eb4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    3eb6:	1d3b      	adds	r3, r7, #4
    3eb8:	0019      	movs	r1, r3
    3eba:	200f      	movs	r0, #15
    3ebc:	4b0c      	ldr	r3, [pc, #48]	; (3ef0 <nm_bus_deinit+0x6c>)
    3ebe:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    3ec0:	1d3b      	adds	r3, r7, #4
    3ec2:	0019      	movs	r1, r3
    3ec4:	200d      	movs	r0, #13
    3ec6:	4b0a      	ldr	r3, [pc, #40]	; (3ef0 <nm_bus_deinit+0x6c>)
    3ec8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    3eca:	1d3b      	adds	r3, r7, #4
    3ecc:	0019      	movs	r1, r3
    3ece:	200e      	movs	r0, #14
    3ed0:	4b07      	ldr	r3, [pc, #28]	; (3ef0 <nm_bus_deinit+0x6c>)
    3ed2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    3ed4:	1dfb      	adds	r3, r7, #7
    3ed6:	781b      	ldrb	r3, [r3, #0]
    3ed8:	b25b      	sxtb	r3, r3
}
    3eda:	0018      	movs	r0, r3
    3edc:	46bd      	mov	sp, r7
    3ede:	b002      	add	sp, #8
    3ee0:	bd80      	pop	{r7, pc}
    3ee2:	46c0      	nop			; (mov r8, r8)
    3ee4:	0000379d 	.word	0x0000379d
    3ee8:	200005b4 	.word	0x200005b4
    3eec:	000039ed 	.word	0x000039ed
    3ef0:	00010a45 	.word	0x00010a45

00003ef4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    3ef4:	b580      	push	{r7, lr}
    3ef6:	b084      	sub	sp, #16
    3ef8:	af00      	add	r7, sp, #0
    3efa:	60f8      	str	r0, [r7, #12]
    3efc:	60b9      	str	r1, [r7, #8]
    3efe:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    3f00:	687b      	ldr	r3, [r7, #4]
    3f02:	2b00      	cmp	r3, #0
    3f04:	d010      	beq.n	3f28 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    3f06:	68bb      	ldr	r3, [r7, #8]
    3f08:	781a      	ldrb	r2, [r3, #0]
    3f0a:	68fb      	ldr	r3, [r7, #12]
    3f0c:	701a      	strb	r2, [r3, #0]
		pDst++;
    3f0e:	68fb      	ldr	r3, [r7, #12]
    3f10:	3301      	adds	r3, #1
    3f12:	60fb      	str	r3, [r7, #12]
		pSrc++;
    3f14:	68bb      	ldr	r3, [r7, #8]
    3f16:	3301      	adds	r3, #1
    3f18:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    3f1a:	687b      	ldr	r3, [r7, #4]
    3f1c:	3b01      	subs	r3, #1
    3f1e:	607b      	str	r3, [r7, #4]
    3f20:	687b      	ldr	r3, [r7, #4]
    3f22:	2b00      	cmp	r3, #0
    3f24:	d1ef      	bne.n	3f06 <m2m_memcpy+0x12>
    3f26:	e000      	b.n	3f2a <m2m_memcpy+0x36>
	if(sz == 0) return;
    3f28:	46c0      	nop			; (mov r8, r8)
}
    3f2a:	46bd      	mov	sp, r7
    3f2c:	b004      	add	sp, #16
    3f2e:	bd80      	pop	{r7, pc}

00003f30 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    3f30:	b580      	push	{r7, lr}
    3f32:	b084      	sub	sp, #16
    3f34:	af00      	add	r7, sp, #0
    3f36:	60f8      	str	r0, [r7, #12]
    3f38:	607a      	str	r2, [r7, #4]
    3f3a:	230b      	movs	r3, #11
    3f3c:	18fb      	adds	r3, r7, r3
    3f3e:	1c0a      	adds	r2, r1, #0
    3f40:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	2b00      	cmp	r3, #0
    3f46:	d00e      	beq.n	3f66 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    3f48:	68fb      	ldr	r3, [r7, #12]
    3f4a:	220b      	movs	r2, #11
    3f4c:	18ba      	adds	r2, r7, r2
    3f4e:	7812      	ldrb	r2, [r2, #0]
    3f50:	701a      	strb	r2, [r3, #0]
		pBuf++;
    3f52:	68fb      	ldr	r3, [r7, #12]
    3f54:	3301      	adds	r3, #1
    3f56:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	3b01      	subs	r3, #1
    3f5c:	607b      	str	r3, [r7, #4]
    3f5e:	687b      	ldr	r3, [r7, #4]
    3f60:	2b00      	cmp	r3, #0
    3f62:	d1f1      	bne.n	3f48 <m2m_memset+0x18>
    3f64:	e000      	b.n	3f68 <m2m_memset+0x38>
	if(sz == 0) return;
    3f66:	46c0      	nop			; (mov r8, r8)
}
    3f68:	46bd      	mov	sp, r7
    3f6a:	b004      	add	sp, #16
    3f6c:	bd80      	pop	{r7, pc}

00003f6e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    3f6e:	b580      	push	{r7, lr}
    3f70:	b084      	sub	sp, #16
    3f72:	af00      	add	r7, sp, #0
    3f74:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    3f76:	230e      	movs	r3, #14
    3f78:	18fb      	adds	r3, r7, r3
    3f7a:	2200      	movs	r2, #0
    3f7c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    3f7e:	e009      	b.n	3f94 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    3f80:	230e      	movs	r3, #14
    3f82:	18fb      	adds	r3, r7, r3
    3f84:	881a      	ldrh	r2, [r3, #0]
    3f86:	230e      	movs	r3, #14
    3f88:	18fb      	adds	r3, r7, r3
    3f8a:	3201      	adds	r2, #1
    3f8c:	801a      	strh	r2, [r3, #0]
		pcStr++;
    3f8e:	687b      	ldr	r3, [r7, #4]
    3f90:	3301      	adds	r3, #1
    3f92:	607b      	str	r3, [r7, #4]
	while(*pcStr)
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	781b      	ldrb	r3, [r3, #0]
    3f98:	2b00      	cmp	r3, #0
    3f9a:	d1f1      	bne.n	3f80 <m2m_strlen+0x12>
	}
	return u16StrLen;
    3f9c:	230e      	movs	r3, #14
    3f9e:	18fb      	adds	r3, r7, r3
    3fa0:	881b      	ldrh	r3, [r3, #0]
}
    3fa2:	0018      	movs	r0, r3
    3fa4:	46bd      	mov	sp, r7
    3fa6:	b004      	add	sp, #16
    3fa8:	bd80      	pop	{r7, pc}
	...

00003fac <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
    3fac:	b580      	push	{r7, lr}
    3fae:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    3fb0:	4b04      	ldr	r3, [pc, #16]	; (3fc4 <isr+0x18>)
    3fb2:	78db      	ldrb	r3, [r3, #3]
    3fb4:	b2db      	uxtb	r3, r3
    3fb6:	3301      	adds	r3, #1
    3fb8:	b2da      	uxtb	r2, r3
    3fba:	4b02      	ldr	r3, [pc, #8]	; (3fc4 <isr+0x18>)
    3fbc:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    3fbe:	46c0      	nop			; (mov r8, r8)
    3fc0:	46bd      	mov	sp, r7
    3fc2:	bd80      	pop	{r7, pc}
    3fc4:	200005f0 	.word	0x200005f0

00003fc8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    3fc8:	b590      	push	{r4, r7, lr}
    3fca:	b083      	sub	sp, #12
    3fcc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    3fce:	1dfb      	adds	r3, r7, #7
    3fd0:	2200      	movs	r2, #0
    3fd2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    3fd4:	4b14      	ldr	r3, [pc, #80]	; (4028 <hif_set_rx_done+0x60>)
    3fd6:	2200      	movs	r2, #0
    3fd8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    3fda:	2001      	movs	r0, #1
    3fdc:	4b13      	ldr	r3, [pc, #76]	; (402c <hif_set_rx_done+0x64>)
    3fde:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    3fe0:	1dfc      	adds	r4, r7, #7
    3fe2:	003b      	movs	r3, r7
    3fe4:	4a12      	ldr	r2, [pc, #72]	; (4030 <hif_set_rx_done+0x68>)
    3fe6:	0019      	movs	r1, r3
    3fe8:	0010      	movs	r0, r2
    3fea:	4b12      	ldr	r3, [pc, #72]	; (4034 <hif_set_rx_done+0x6c>)
    3fec:	4798      	blx	r3
    3fee:	0003      	movs	r3, r0
    3ff0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    3ff2:	1dfb      	adds	r3, r7, #7
    3ff4:	781b      	ldrb	r3, [r3, #0]
    3ff6:	b25b      	sxtb	r3, r3
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	d10d      	bne.n	4018 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    3ffc:	683b      	ldr	r3, [r7, #0]
    3ffe:	2202      	movs	r2, #2
    4000:	4313      	orrs	r3, r2
    4002:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    4004:	683b      	ldr	r3, [r7, #0]
    4006:	1dfc      	adds	r4, r7, #7
    4008:	4a09      	ldr	r2, [pc, #36]	; (4030 <hif_set_rx_done+0x68>)
    400a:	0019      	movs	r1, r3
    400c:	0010      	movs	r0, r2
    400e:	4b0a      	ldr	r3, [pc, #40]	; (4038 <hif_set_rx_done+0x70>)
    4010:	4798      	blx	r3
    4012:	0003      	movs	r3, r0
    4014:	7023      	strb	r3, [r4, #0]
    4016:	e000      	b.n	401a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
    4018:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    401a:	1dfb      	adds	r3, r7, #7
    401c:	781b      	ldrb	r3, [r3, #0]
    401e:	b25b      	sxtb	r3, r3

}
    4020:	0018      	movs	r0, r3
    4022:	46bd      	mov	sp, r7
    4024:	b003      	add	sp, #12
    4026:	bd90      	pop	{r4, r7, pc}
    4028:	200005f0 	.word	0x200005f0
    402c:	000036e1 	.word	0x000036e1
    4030:	00001070 	.word	0x00001070
    4034:	00005fd9 	.word	0x00005fd9
    4038:	00005ffd 	.word	0x00005ffd

0000403c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    403c:	b580      	push	{r7, lr}
    403e:	b082      	sub	sp, #8
    4040:	af00      	add	r7, sp, #0
    4042:	603a      	str	r2, [r7, #0]
    4044:	1dfb      	adds	r3, r7, #7
    4046:	1c02      	adds	r2, r0, #0
    4048:	701a      	strb	r2, [r3, #0]
    404a:	1d3b      	adds	r3, r7, #4
    404c:	1c0a      	adds	r2, r1, #0
    404e:	801a      	strh	r2, [r3, #0]


}
    4050:	46c0      	nop			; (mov r8, r8)
    4052:	46bd      	mov	sp, r7
    4054:	b002      	add	sp, #8
    4056:	bd80      	pop	{r7, pc}

00004058 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    4058:	b590      	push	{r4, r7, lr}
    405a:	b083      	sub	sp, #12
    405c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    405e:	1dfb      	adds	r3, r7, #7
    4060:	2200      	movs	r2, #0
    4062:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
    4064:	4b16      	ldr	r3, [pc, #88]	; (40c0 <hif_chip_wake+0x68>)
    4066:	789b      	ldrb	r3, [r3, #2]
    4068:	b2db      	uxtb	r3, r3
    406a:	2b00      	cmp	r3, #0
    406c:	d003      	beq.n	4076 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    406e:	1dfb      	adds	r3, r7, #7
    4070:	781b      	ldrb	r3, [r3, #0]
    4072:	b25b      	sxtb	r3, r3
    4074:	e01f      	b.n	40b6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    4076:	4b12      	ldr	r3, [pc, #72]	; (40c0 <hif_chip_wake+0x68>)
    4078:	785b      	ldrb	r3, [r3, #1]
    407a:	b2db      	uxtb	r3, r3
    407c:	2b00      	cmp	r3, #0
    407e:	d10e      	bne.n	409e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    4080:	4b0f      	ldr	r3, [pc, #60]	; (40c0 <hif_chip_wake+0x68>)
    4082:	781b      	ldrb	r3, [r3, #0]
    4084:	b2db      	uxtb	r3, r3
    4086:	2b00      	cmp	r3, #0
    4088:	d009      	beq.n	409e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
    408a:	1dfc      	adds	r4, r7, #7
    408c:	4b0d      	ldr	r3, [pc, #52]	; (40c4 <hif_chip_wake+0x6c>)
    408e:	4798      	blx	r3
    4090:	0003      	movs	r3, r0
    4092:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    4094:	1dfb      	adds	r3, r7, #7
    4096:	781b      	ldrb	r3, [r3, #0]
    4098:	b25b      	sxtb	r3, r3
    409a:	2b00      	cmp	r3, #0
    409c:	d107      	bne.n	40ae <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    409e:	4b08      	ldr	r3, [pc, #32]	; (40c0 <hif_chip_wake+0x68>)
    40a0:	785b      	ldrb	r3, [r3, #1]
    40a2:	b2db      	uxtb	r3, r3
    40a4:	3301      	adds	r3, #1
    40a6:	b2da      	uxtb	r2, r3
    40a8:	4b05      	ldr	r3, [pc, #20]	; (40c0 <hif_chip_wake+0x68>)
    40aa:	705a      	strb	r2, [r3, #1]
    40ac:	e000      	b.n	40b0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
    40ae:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    40b0:	1dfb      	adds	r3, r7, #7
    40b2:	781b      	ldrb	r3, [r3, #0]
    40b4:	b25b      	sxtb	r3, r3
}
    40b6:	0018      	movs	r0, r3
    40b8:	46bd      	mov	sp, r7
    40ba:	b003      	add	sp, #12
    40bc:	bd90      	pop	{r4, r7, pc}
    40be:	46c0      	nop			; (mov r8, r8)
    40c0:	200005f0 	.word	0x200005f0
    40c4:	00005aad 	.word	0x00005aad

000040c8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
    40c8:	b580      	push	{r7, lr}
    40ca:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
    40cc:	4b07      	ldr	r3, [pc, #28]	; (40ec <hif_chip_sleep_sc+0x24>)
    40ce:	785b      	ldrb	r3, [r3, #1]
    40d0:	b2db      	uxtb	r3, r3
    40d2:	2b00      	cmp	r3, #0
    40d4:	d006      	beq.n	40e4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
    40d6:	4b05      	ldr	r3, [pc, #20]	; (40ec <hif_chip_sleep_sc+0x24>)
    40d8:	785b      	ldrb	r3, [r3, #1]
    40da:	b2db      	uxtb	r3, r3
    40dc:	3b01      	subs	r3, #1
    40de:	b2da      	uxtb	r2, r3
    40e0:	4b02      	ldr	r3, [pc, #8]	; (40ec <hif_chip_sleep_sc+0x24>)
    40e2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
    40e4:	2300      	movs	r3, #0
}
    40e6:	0018      	movs	r0, r3
    40e8:	46bd      	mov	sp, r7
    40ea:	bd80      	pop	{r7, pc}
    40ec:	200005f0 	.word	0x200005f0

000040f0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    40f0:	b590      	push	{r4, r7, lr}
    40f2:	b083      	sub	sp, #12
    40f4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    40f6:	1dfb      	adds	r3, r7, #7
    40f8:	2200      	movs	r2, #0
    40fa:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
    40fc:	4b10      	ldr	r3, [pc, #64]	; (4140 <hif_chip_sleep+0x50>)
    40fe:	785b      	ldrb	r3, [r3, #1]
    4100:	b2db      	uxtb	r3, r3
    4102:	2b00      	cmp	r3, #0
    4104:	d006      	beq.n	4114 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
    4106:	4b0e      	ldr	r3, [pc, #56]	; (4140 <hif_chip_sleep+0x50>)
    4108:	785b      	ldrb	r3, [r3, #1]
    410a:	b2db      	uxtb	r3, r3
    410c:	3b01      	subs	r3, #1
    410e:	b2da      	uxtb	r2, r3
    4110:	4b0b      	ldr	r3, [pc, #44]	; (4140 <hif_chip_sleep+0x50>)
    4112:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    4114:	4b0a      	ldr	r3, [pc, #40]	; (4140 <hif_chip_sleep+0x50>)
    4116:	785b      	ldrb	r3, [r3, #1]
    4118:	b2db      	uxtb	r3, r3
    411a:	2b00      	cmp	r3, #0
    411c:	d109      	bne.n	4132 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    411e:	4b08      	ldr	r3, [pc, #32]	; (4140 <hif_chip_sleep+0x50>)
    4120:	781b      	ldrb	r3, [r3, #0]
    4122:	b2db      	uxtb	r3, r3
    4124:	2b00      	cmp	r3, #0
    4126:	d004      	beq.n	4132 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
    4128:	1dfc      	adds	r4, r7, #7
    412a:	4b06      	ldr	r3, [pc, #24]	; (4144 <hif_chip_sleep+0x54>)
    412c:	4798      	blx	r3
    412e:	0003      	movs	r3, r0
    4130:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
    4132:	1dfb      	adds	r3, r7, #7
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	b25b      	sxtb	r3, r3
}
    4138:	0018      	movs	r0, r3
    413a:	46bd      	mov	sp, r7
    413c:	b003      	add	sp, #12
    413e:	bd90      	pop	{r4, r7, pc}
    4140:	200005f0 	.word	0x200005f0
    4144:	000059d5 	.word	0x000059d5

00004148 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    4148:	b580      	push	{r7, lr}
    414a:	b082      	sub	sp, #8
    414c:	af00      	add	r7, sp, #0
    414e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    4150:	4b09      	ldr	r3, [pc, #36]	; (4178 <hif_init+0x30>)
    4152:	2228      	movs	r2, #40	; 0x28
    4154:	2100      	movs	r1, #0
    4156:	0018      	movs	r0, r3
    4158:	4b08      	ldr	r3, [pc, #32]	; (417c <hif_init+0x34>)
    415a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    415c:	4b08      	ldr	r3, [pc, #32]	; (4180 <hif_init+0x38>)
    415e:	0018      	movs	r0, r3
    4160:	4b08      	ldr	r3, [pc, #32]	; (4184 <hif_init+0x3c>)
    4162:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    4164:	4b08      	ldr	r3, [pc, #32]	; (4188 <hif_init+0x40>)
    4166:	0019      	movs	r1, r3
    4168:	2003      	movs	r0, #3
    416a:	4b08      	ldr	r3, [pc, #32]	; (418c <hif_init+0x44>)
    416c:	4798      	blx	r3
	return M2M_SUCCESS;
    416e:	2300      	movs	r3, #0
}
    4170:	0018      	movs	r0, r3
    4172:	46bd      	mov	sp, r7
    4174:	b002      	add	sp, #8
    4176:	bd80      	pop	{r7, pc}
    4178:	200005f0 	.word	0x200005f0
    417c:	00003f31 	.word	0x00003f31
    4180:	00003fad 	.word	0x00003fad
    4184:	00003669 	.word	0x00003669
    4188:	0000403d 	.word	0x0000403d
    418c:	00004c49 	.word	0x00004c49

00004190 <hif_deinit>:
*    @param [in]	arg
*				Pointer to the arguments.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_deinit(void * arg)
{
    4190:	b590      	push	{r4, r7, lr}
    4192:	b085      	sub	sp, #20
    4194:	af00      	add	r7, sp, #0
    4196:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    4198:	230f      	movs	r3, #15
    419a:	18fb      	adds	r3, r7, r3
    419c:	2200      	movs	r2, #0
    419e:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    41a0:	230f      	movs	r3, #15
    41a2:	18fc      	adds	r4, r7, r3
    41a4:	4b08      	ldr	r3, [pc, #32]	; (41c8 <hif_deinit+0x38>)
    41a6:	4798      	blx	r3
    41a8:	0003      	movs	r3, r0
    41aa:	7023      	strb	r3, [r4, #0]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    41ac:	4b07      	ldr	r3, [pc, #28]	; (41cc <hif_deinit+0x3c>)
    41ae:	2228      	movs	r2, #40	; 0x28
    41b0:	2100      	movs	r1, #0
    41b2:	0018      	movs	r0, r3
    41b4:	4b06      	ldr	r3, [pc, #24]	; (41d0 <hif_deinit+0x40>)
    41b6:	4798      	blx	r3
	return ret;
    41b8:	230f      	movs	r3, #15
    41ba:	18fb      	adds	r3, r7, r3
    41bc:	781b      	ldrb	r3, [r3, #0]
    41be:	b25b      	sxtb	r3, r3
}
    41c0:	0018      	movs	r0, r3
    41c2:	46bd      	mov	sp, r7
    41c4:	b005      	add	sp, #20
    41c6:	bd90      	pop	{r4, r7, pc}
    41c8:	00004059 	.word	0x00004059
    41cc:	200005f0 	.word	0x200005f0
    41d0:	00003f31 	.word	0x00003f31

000041d4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    41d4:	b590      	push	{r4, r7, lr}
    41d6:	b089      	sub	sp, #36	; 0x24
    41d8:	af00      	add	r7, sp, #0
    41da:	0004      	movs	r4, r0
    41dc:	0008      	movs	r0, r1
    41de:	603a      	str	r2, [r7, #0]
    41e0:	0019      	movs	r1, r3
    41e2:	1dfb      	adds	r3, r7, #7
    41e4:	1c22      	adds	r2, r4, #0
    41e6:	701a      	strb	r2, [r3, #0]
    41e8:	1dbb      	adds	r3, r7, #6
    41ea:	1c02      	adds	r2, r0, #0
    41ec:	701a      	strb	r2, [r3, #0]
    41ee:	1d3b      	adds	r3, r7, #4
    41f0:	1c0a      	adds	r2, r1, #0
    41f2:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    41f4:	231f      	movs	r3, #31
    41f6:	18fb      	adds	r3, r7, r3
    41f8:	22ff      	movs	r2, #255	; 0xff
    41fa:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    41fc:	1dbb      	adds	r3, r7, #6
    41fe:	781b      	ldrb	r3, [r3, #0]
    4200:	227f      	movs	r2, #127	; 0x7f
    4202:	4013      	ands	r3, r2
    4204:	b2da      	uxtb	r2, r3
    4206:	2318      	movs	r3, #24
    4208:	18fb      	adds	r3, r7, r3
    420a:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    420c:	2318      	movs	r3, #24
    420e:	18fb      	adds	r3, r7, r3
    4210:	1dfa      	adds	r2, r7, #7
    4212:	7812      	ldrb	r2, [r2, #0]
    4214:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    4216:	2318      	movs	r3, #24
    4218:	18fb      	adds	r3, r7, r3
    421a:	2208      	movs	r2, #8
    421c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4220:	2b00      	cmp	r3, #0
    4222:	d011      	beq.n	4248 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    4224:	2318      	movs	r3, #24
    4226:	18fb      	adds	r3, r7, r3
    4228:	885b      	ldrh	r3, [r3, #2]
    422a:	b29a      	uxth	r2, r3
    422c:	2338      	movs	r3, #56	; 0x38
    422e:	18f9      	adds	r1, r7, r3
    4230:	2334      	movs	r3, #52	; 0x34
    4232:	18fb      	adds	r3, r7, r3
    4234:	8809      	ldrh	r1, [r1, #0]
    4236:	881b      	ldrh	r3, [r3, #0]
    4238:	18cb      	adds	r3, r1, r3
    423a:	b29b      	uxth	r3, r3
    423c:	18d3      	adds	r3, r2, r3
    423e:	b29a      	uxth	r2, r3
    4240:	2318      	movs	r3, #24
    4242:	18fb      	adds	r3, r7, r3
    4244:	805a      	strh	r2, [r3, #2]
    4246:	e00a      	b.n	425e <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    4248:	2318      	movs	r3, #24
    424a:	18fb      	adds	r3, r7, r3
    424c:	885b      	ldrh	r3, [r3, #2]
    424e:	b29a      	uxth	r2, r3
    4250:	1d3b      	adds	r3, r7, #4
    4252:	881b      	ldrh	r3, [r3, #0]
    4254:	18d3      	adds	r3, r2, r3
    4256:	b29a      	uxth	r2, r3
    4258:	2318      	movs	r3, #24
    425a:	18fb      	adds	r3, r7, r3
    425c:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    425e:	231f      	movs	r3, #31
    4260:	18fc      	adds	r4, r7, r3
    4262:	4bb0      	ldr	r3, [pc, #704]	; (4524 <hif_send+0x350>)
    4264:	4798      	blx	r3
    4266:	0003      	movs	r3, r0
    4268:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    426a:	231f      	movs	r3, #31
    426c:	18fb      	adds	r3, r7, r3
    426e:	781b      	ldrb	r3, [r3, #0]
    4270:	b25b      	sxtb	r3, r3
    4272:	2b00      	cmp	r3, #0
    4274:	d000      	beq.n	4278 <hif_send+0xa4>
    4276:	e127      	b.n	44c8 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
    4278:	2300      	movs	r3, #0
    427a:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    427c:	230e      	movs	r3, #14
    427e:	18fb      	adds	r3, r7, r3
    4280:	2200      	movs	r2, #0
    4282:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    4284:	2300      	movs	r3, #0
    4286:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    4288:	1dfb      	adds	r3, r7, #7
    428a:	781a      	ldrb	r2, [r3, #0]
    428c:	697b      	ldr	r3, [r7, #20]
    428e:	4313      	orrs	r3, r2
    4290:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    4292:	1dbb      	adds	r3, r7, #6
    4294:	781b      	ldrb	r3, [r3, #0]
    4296:	021a      	lsls	r2, r3, #8
    4298:	697b      	ldr	r3, [r7, #20]
    429a:	4313      	orrs	r3, r2
    429c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    429e:	2318      	movs	r3, #24
    42a0:	18fb      	adds	r3, r7, r3
    42a2:	885b      	ldrh	r3, [r3, #2]
    42a4:	b29b      	uxth	r3, r3
    42a6:	041a      	lsls	r2, r3, #16
    42a8:	697b      	ldr	r3, [r7, #20]
    42aa:	4313      	orrs	r3, r2
    42ac:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    42ae:	697b      	ldr	r3, [r7, #20]
    42b0:	221f      	movs	r2, #31
    42b2:	18bc      	adds	r4, r7, r2
    42b4:	4a9c      	ldr	r2, [pc, #624]	; (4528 <hif_send+0x354>)
    42b6:	0019      	movs	r1, r3
    42b8:	0010      	movs	r0, r2
    42ba:	4b9c      	ldr	r3, [pc, #624]	; (452c <hif_send+0x358>)
    42bc:	4798      	blx	r3
    42be:	0003      	movs	r3, r0
    42c0:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    42c2:	231f      	movs	r3, #31
    42c4:	18fb      	adds	r3, r7, r3
    42c6:	781b      	ldrb	r3, [r3, #0]
    42c8:	b25b      	sxtb	r3, r3
    42ca:	2b00      	cmp	r3, #0
    42cc:	d000      	beq.n	42d0 <hif_send+0xfc>
    42ce:	e115      	b.n	44fc <hif_send+0x328>

		reg = 0UL;
    42d0:	2300      	movs	r3, #0
    42d2:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    42d4:	697b      	ldr	r3, [r7, #20]
    42d6:	2202      	movs	r2, #2
    42d8:	4313      	orrs	r3, r2
    42da:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    42dc:	697b      	ldr	r3, [r7, #20]
    42de:	221f      	movs	r2, #31
    42e0:	18bc      	adds	r4, r7, r2
    42e2:	4a93      	ldr	r2, [pc, #588]	; (4530 <hif_send+0x35c>)
    42e4:	0019      	movs	r1, r3
    42e6:	0010      	movs	r0, r2
    42e8:	4b90      	ldr	r3, [pc, #576]	; (452c <hif_send+0x358>)
    42ea:	4798      	blx	r3
    42ec:	0003      	movs	r3, r0
    42ee:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    42f0:	231f      	movs	r3, #31
    42f2:	18fb      	adds	r3, r7, r3
    42f4:	781b      	ldrb	r3, [r3, #0]
    42f6:	b25b      	sxtb	r3, r3
    42f8:	2b00      	cmp	r3, #0
    42fa:	d000      	beq.n	42fe <hif_send+0x12a>
    42fc:	e100      	b.n	4500 <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    42fe:	2300      	movs	r3, #0
    4300:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    4302:	230e      	movs	r3, #14
    4304:	18fb      	adds	r3, r7, r3
    4306:	2200      	movs	r2, #0
    4308:	801a      	strh	r2, [r3, #0]
    430a:	e04f      	b.n	43ac <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    430c:	231f      	movs	r3, #31
    430e:	18fc      	adds	r4, r7, r3
    4310:	2314      	movs	r3, #20
    4312:	18fb      	adds	r3, r7, r3
    4314:	4a86      	ldr	r2, [pc, #536]	; (4530 <hif_send+0x35c>)
    4316:	0019      	movs	r1, r3
    4318:	0010      	movs	r0, r2
    431a:	4b86      	ldr	r3, [pc, #536]	; (4534 <hif_send+0x360>)
    431c:	4798      	blx	r3
    431e:	0003      	movs	r3, r0
    4320:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    4322:	231f      	movs	r3, #31
    4324:	18fb      	adds	r3, r7, r3
    4326:	781b      	ldrb	r3, [r3, #0]
    4328:	b25b      	sxtb	r3, r3
    432a:	2b00      	cmp	r3, #0
    432c:	d146      	bne.n	43bc <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    432e:	230e      	movs	r3, #14
    4330:	18fb      	adds	r3, r7, r3
    4332:	881b      	ldrh	r3, [r3, #0]
    4334:	b29a      	uxth	r2, r3
    4336:	23f4      	movs	r3, #244	; 0xf4
    4338:	33ff      	adds	r3, #255	; 0xff
    433a:	429a      	cmp	r2, r3
    433c:	d915      	bls.n	436a <hif_send+0x196>
				if(cnt < 501) {
    433e:	230e      	movs	r3, #14
    4340:	18fb      	adds	r3, r7, r3
    4342:	881b      	ldrh	r3, [r3, #0]
    4344:	b29a      	uxth	r2, r3
    4346:	23fa      	movs	r3, #250	; 0xfa
    4348:	005b      	lsls	r3, r3, #1
    434a:	429a      	cmp	r2, r3
    434c:	d80a      	bhi.n	4364 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
    434e:	4b7a      	ldr	r3, [pc, #488]	; (4538 <hif_send+0x364>)
    4350:	0018      	movs	r0, r3
    4352:	4b7a      	ldr	r3, [pc, #488]	; (453c <hif_send+0x368>)
    4354:	4798      	blx	r3
    4356:	4b7a      	ldr	r3, [pc, #488]	; (4540 <hif_send+0x36c>)
    4358:	0018      	movs	r0, r3
    435a:	4b7a      	ldr	r3, [pc, #488]	; (4544 <hif_send+0x370>)
    435c:	4798      	blx	r3
    435e:	200d      	movs	r0, #13
    4360:	4b79      	ldr	r3, [pc, #484]	; (4548 <hif_send+0x374>)
    4362:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    4364:	2001      	movs	r0, #1
    4366:	4b79      	ldr	r3, [pc, #484]	; (454c <hif_send+0x378>)
    4368:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    436a:	697b      	ldr	r3, [r7, #20]
    436c:	2202      	movs	r2, #2
    436e:	4013      	ands	r3, r2
    4370:	d113      	bne.n	439a <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    4372:	231f      	movs	r3, #31
    4374:	18fc      	adds	r4, r7, r3
    4376:	2310      	movs	r3, #16
    4378:	18fb      	adds	r3, r7, r3
    437a:	4a75      	ldr	r2, [pc, #468]	; (4550 <hif_send+0x37c>)
    437c:	0019      	movs	r1, r3
    437e:	0010      	movs	r0, r2
    4380:	4b6c      	ldr	r3, [pc, #432]	; (4534 <hif_send+0x360>)
    4382:	4798      	blx	r3
    4384:	0003      	movs	r3, r0
    4386:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    4388:	231f      	movs	r3, #31
    438a:	18fb      	adds	r3, r7, r3
    438c:	781b      	ldrb	r3, [r3, #0]
    438e:	b25b      	sxtb	r3, r3
    4390:	2b00      	cmp	r3, #0
    4392:	d015      	beq.n	43c0 <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    4394:	2300      	movs	r3, #0
    4396:	613b      	str	r3, [r7, #16]
					goto ERR1;
    4398:	e0b9      	b.n	450e <hif_send+0x33a>
		for(cnt = 0; cnt < 1000; cnt ++)
    439a:	230e      	movs	r3, #14
    439c:	18fb      	adds	r3, r7, r3
    439e:	881b      	ldrh	r3, [r3, #0]
    43a0:	b29b      	uxth	r3, r3
    43a2:	3301      	adds	r3, #1
    43a4:	b29a      	uxth	r2, r3
    43a6:	230e      	movs	r3, #14
    43a8:	18fb      	adds	r3, r7, r3
    43aa:	801a      	strh	r2, [r3, #0]
    43ac:	230e      	movs	r3, #14
    43ae:	18fb      	adds	r3, r7, r3
    43b0:	881b      	ldrh	r3, [r3, #0]
    43b2:	b29b      	uxth	r3, r3
    43b4:	4a67      	ldr	r2, [pc, #412]	; (4554 <hif_send+0x380>)
    43b6:	4293      	cmp	r3, r2
    43b8:	d9a8      	bls.n	430c <hif_send+0x138>
    43ba:	e002      	b.n	43c2 <hif_send+0x1ee>
			if(ret != M2M_SUCCESS) break;
    43bc:	46c0      	nop			; (mov r8, r8)
    43be:	e000      	b.n	43c2 <hif_send+0x1ee>
				}
				/*in case of success break */
				break;
    43c0:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    43c2:	693b      	ldr	r3, [r7, #16]
    43c4:	2b00      	cmp	r3, #0
    43c6:	d100      	bne.n	43ca <hif_send+0x1f6>
    43c8:	e073      	b.n	44b2 <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    43ca:	693b      	ldr	r3, [r7, #16]
    43cc:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    43ce:	2318      	movs	r3, #24
    43d0:	18fb      	adds	r3, r7, r3
    43d2:	885b      	ldrh	r3, [r3, #2]
    43d4:	b29a      	uxth	r2, r3
    43d6:	2318      	movs	r3, #24
    43d8:	18fb      	adds	r3, r7, r3
    43da:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    43dc:	68bb      	ldr	r3, [r7, #8]
    43de:	221f      	movs	r2, #31
    43e0:	18bc      	adds	r4, r7, r2
    43e2:	2218      	movs	r2, #24
    43e4:	18b9      	adds	r1, r7, r2
    43e6:	2208      	movs	r2, #8
    43e8:	0018      	movs	r0, r3
    43ea:	4b5b      	ldr	r3, [pc, #364]	; (4558 <hif_send+0x384>)
    43ec:	4798      	blx	r3
    43ee:	0003      	movs	r3, r0
    43f0:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    43f2:	231f      	movs	r3, #31
    43f4:	18fb      	adds	r3, r7, r3
    43f6:	781b      	ldrb	r3, [r3, #0]
    43f8:	b25b      	sxtb	r3, r3
    43fa:	2b00      	cmp	r3, #0
    43fc:	d000      	beq.n	4400 <hif_send+0x22c>
    43fe:	e081      	b.n	4504 <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    4400:	68bb      	ldr	r3, [r7, #8]
    4402:	3308      	adds	r3, #8
    4404:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    4406:	683b      	ldr	r3, [r7, #0]
    4408:	2b00      	cmp	r3, #0
    440a:	d015      	beq.n	4438 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    440c:	68b8      	ldr	r0, [r7, #8]
    440e:	1d3b      	adds	r3, r7, #4
    4410:	881a      	ldrh	r2, [r3, #0]
    4412:	231f      	movs	r3, #31
    4414:	18fc      	adds	r4, r7, r3
    4416:	683b      	ldr	r3, [r7, #0]
    4418:	0019      	movs	r1, r3
    441a:	4b4f      	ldr	r3, [pc, #316]	; (4558 <hif_send+0x384>)
    441c:	4798      	blx	r3
    441e:	0003      	movs	r3, r0
    4420:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    4422:	231f      	movs	r3, #31
    4424:	18fb      	adds	r3, r7, r3
    4426:	781b      	ldrb	r3, [r3, #0]
    4428:	b25b      	sxtb	r3, r3
    442a:	2b00      	cmp	r3, #0
    442c:	d16c      	bne.n	4508 <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    442e:	1d3b      	adds	r3, r7, #4
    4430:	881a      	ldrh	r2, [r3, #0]
    4432:	68bb      	ldr	r3, [r7, #8]
    4434:	18d3      	adds	r3, r2, r3
    4436:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    4438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    443a:	2b00      	cmp	r3, #0
    443c:	d021      	beq.n	4482 <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    443e:	2338      	movs	r3, #56	; 0x38
    4440:	18fb      	adds	r3, r7, r3
    4442:	881a      	ldrh	r2, [r3, #0]
    4444:	1d3b      	adds	r3, r7, #4
    4446:	881b      	ldrh	r3, [r3, #0]
    4448:	1ad3      	subs	r3, r2, r3
    444a:	001a      	movs	r2, r3
    444c:	68bb      	ldr	r3, [r7, #8]
    444e:	18d3      	adds	r3, r2, r3
    4450:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    4452:	68b8      	ldr	r0, [r7, #8]
    4454:	2334      	movs	r3, #52	; 0x34
    4456:	18fb      	adds	r3, r7, r3
    4458:	881a      	ldrh	r2, [r3, #0]
    445a:	231f      	movs	r3, #31
    445c:	18fc      	adds	r4, r7, r3
    445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4460:	0019      	movs	r1, r3
    4462:	4b3d      	ldr	r3, [pc, #244]	; (4558 <hif_send+0x384>)
    4464:	4798      	blx	r3
    4466:	0003      	movs	r3, r0
    4468:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    446a:	231f      	movs	r3, #31
    446c:	18fb      	adds	r3, r7, r3
    446e:	781b      	ldrb	r3, [r3, #0]
    4470:	b25b      	sxtb	r3, r3
    4472:	2b00      	cmp	r3, #0
    4474:	d14a      	bne.n	450c <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    4476:	2334      	movs	r3, #52	; 0x34
    4478:	18fb      	adds	r3, r7, r3
    447a:	881a      	ldrh	r2, [r3, #0]
    447c:	68bb      	ldr	r3, [r7, #8]
    447e:	18d3      	adds	r3, r2, r3
    4480:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    4482:	693b      	ldr	r3, [r7, #16]
    4484:	009b      	lsls	r3, r3, #2
    4486:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    4488:	697b      	ldr	r3, [r7, #20]
    448a:	2202      	movs	r2, #2
    448c:	4313      	orrs	r3, r2
    448e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    4490:	697b      	ldr	r3, [r7, #20]
    4492:	221f      	movs	r2, #31
    4494:	18bc      	adds	r4, r7, r2
    4496:	4a31      	ldr	r2, [pc, #196]	; (455c <hif_send+0x388>)
    4498:	0019      	movs	r1, r3
    449a:	0010      	movs	r0, r2
    449c:	4b23      	ldr	r3, [pc, #140]	; (452c <hif_send+0x358>)
    449e:	4798      	blx	r3
    44a0:	0003      	movs	r3, r0
    44a2:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    44a4:	231f      	movs	r3, #31
    44a6:	18fb      	adds	r3, r7, r3
    44a8:	781b      	ldrb	r3, [r3, #0]
    44aa:	b25b      	sxtb	r3, r3
    44ac:	2b00      	cmp	r3, #0
    44ae:	d01a      	beq.n	44e6 <hif_send+0x312>
    44b0:	e02d      	b.n	450e <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    44b2:	231f      	movs	r3, #31
    44b4:	18fc      	adds	r4, r7, r3
    44b6:	4b2a      	ldr	r3, [pc, #168]	; (4560 <hif_send+0x38c>)
    44b8:	4798      	blx	r3
    44ba:	0003      	movs	r3, r0
    44bc:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    44be:	231f      	movs	r3, #31
    44c0:	18fb      	adds	r3, r7, r3
    44c2:	22fd      	movs	r2, #253	; 0xfd
    44c4:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    44c6:	e024      	b.n	4512 <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    44c8:	23cb      	movs	r3, #203	; 0xcb
    44ca:	005a      	lsls	r2, r3, #1
    44cc:	4925      	ldr	r1, [pc, #148]	; (4564 <hif_send+0x390>)
    44ce:	4b26      	ldr	r3, [pc, #152]	; (4568 <hif_send+0x394>)
    44d0:	0018      	movs	r0, r3
    44d2:	4b1a      	ldr	r3, [pc, #104]	; (453c <hif_send+0x368>)
    44d4:	4798      	blx	r3
    44d6:	4b25      	ldr	r3, [pc, #148]	; (456c <hif_send+0x398>)
    44d8:	0018      	movs	r0, r3
    44da:	4b1a      	ldr	r3, [pc, #104]	; (4544 <hif_send+0x370>)
    44dc:	4798      	blx	r3
    44de:	200d      	movs	r0, #13
    44e0:	4b19      	ldr	r3, [pc, #100]	; (4548 <hif_send+0x374>)
    44e2:	4798      	blx	r3
		goto ERR2;
    44e4:	e015      	b.n	4512 <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    44e6:	231f      	movs	r3, #31
    44e8:	18fc      	adds	r4, r7, r3
    44ea:	4b1d      	ldr	r3, [pc, #116]	; (4560 <hif_send+0x38c>)
    44ec:	4798      	blx	r3
    44ee:	0003      	movs	r3, r0
    44f0:	7023      	strb	r3, [r4, #0]
	return ret;
    44f2:	231f      	movs	r3, #31
    44f4:	18fb      	adds	r3, r7, r3
    44f6:	781b      	ldrb	r3, [r3, #0]
    44f8:	b25b      	sxtb	r3, r3
    44fa:	e00e      	b.n	451a <hif_send+0x346>
		if(M2M_SUCCESS != ret) goto ERR1;
    44fc:	46c0      	nop			; (mov r8, r8)
    44fe:	e006      	b.n	450e <hif_send+0x33a>
		if(M2M_SUCCESS != ret) goto ERR1;
    4500:	46c0      	nop			; (mov r8, r8)
    4502:	e004      	b.n	450e <hif_send+0x33a>
			if(M2M_SUCCESS != ret) goto ERR1;
    4504:	46c0      	nop			; (mov r8, r8)
    4506:	e002      	b.n	450e <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    4508:	46c0      	nop			; (mov r8, r8)
    450a:	e000      	b.n	450e <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    450c:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    450e:	4b18      	ldr	r3, [pc, #96]	; (4570 <hif_send+0x39c>)
    4510:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    4512:	231f      	movs	r3, #31
    4514:	18fb      	adds	r3, r7, r3
    4516:	781b      	ldrb	r3, [r3, #0]
    4518:	b25b      	sxtb	r3, r3
}
    451a:	0018      	movs	r0, r3
    451c:	46bd      	mov	sp, r7
    451e:	b009      	add	sp, #36	; 0x24
    4520:	bd90      	pop	{r4, r7, pc}
    4522:	46c0      	nop			; (mov r8, r8)
    4524:	00004059 	.word	0x00004059
    4528:	0000108c 	.word	0x0000108c
    452c:	00005ffd 	.word	0x00005ffd
    4530:	00001078 	.word	0x00001078
    4534:	00005fd9 	.word	0x00005fd9
    4538:	00019480 	.word	0x00019480
    453c:	00013e4d 	.word	0x00013e4d
    4540:	0001948c 	.word	0x0001948c
    4544:	00013f69 	.word	0x00013f69
    4548:	00013e81 	.word	0x00013e81
    454c:	00003641 	.word	0x00003641
    4550:	00150400 	.word	0x00150400
    4554:	000003e7 	.word	0x000003e7
    4558:	00006145 	.word	0x00006145
    455c:	0000106c 	.word	0x0000106c
    4560:	000040f1 	.word	0x000040f1
    4564:	00019794 	.word	0x00019794
    4568:	0001949c 	.word	0x0001949c
    456c:	000194b0 	.word	0x000194b0
    4570:	000040c9 	.word	0x000040c9

00004574 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    4574:	b590      	push	{r4, r7, lr}
    4576:	b087      	sub	sp, #28
    4578:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    457a:	230f      	movs	r3, #15
    457c:	18fb      	adds	r3, r7, r3
    457e:	2200      	movs	r2, #0
    4580:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    4582:	230f      	movs	r3, #15
    4584:	18fc      	adds	r4, r7, r3
    4586:	2308      	movs	r3, #8
    4588:	18fb      	adds	r3, r7, r3
    458a:	4ad6      	ldr	r2, [pc, #856]	; (48e4 <hif_isr+0x370>)
    458c:	0019      	movs	r1, r3
    458e:	0010      	movs	r0, r2
    4590:	4bd5      	ldr	r3, [pc, #852]	; (48e8 <hif_isr+0x374>)
    4592:	4798      	blx	r3
    4594:	0003      	movs	r3, r0
    4596:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    4598:	230f      	movs	r3, #15
    459a:	18fb      	adds	r3, r7, r3
    459c:	781b      	ldrb	r3, [r3, #0]
    459e:	b25b      	sxtb	r3, r3
    45a0:	2b00      	cmp	r3, #0
    45a2:	d000      	beq.n	45a6 <hif_isr+0x32>
    45a4:	e217      	b.n	49d6 <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    45a6:	68bb      	ldr	r3, [r7, #8]
    45a8:	2201      	movs	r2, #1
    45aa:	4013      	ands	r3, r2
    45ac:	d100      	bne.n	45b0 <hif_isr+0x3c>
    45ae:	e1fd      	b.n	49ac <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    45b0:	2000      	movs	r0, #0
    45b2:	4bce      	ldr	r3, [pc, #824]	; (48ec <hif_isr+0x378>)
    45b4:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    45b6:	68bb      	ldr	r3, [r7, #8]
    45b8:	2201      	movs	r2, #1
    45ba:	4393      	bics	r3, r2
    45bc:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    45be:	68bb      	ldr	r3, [r7, #8]
    45c0:	220f      	movs	r2, #15
    45c2:	18bc      	adds	r4, r7, r2
    45c4:	4ac7      	ldr	r2, [pc, #796]	; (48e4 <hif_isr+0x370>)
    45c6:	0019      	movs	r1, r3
    45c8:	0010      	movs	r0, r2
    45ca:	4bc9      	ldr	r3, [pc, #804]	; (48f0 <hif_isr+0x37c>)
    45cc:	4798      	blx	r3
    45ce:	0003      	movs	r3, r0
    45d0:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    45d2:	230f      	movs	r3, #15
    45d4:	18fb      	adds	r3, r7, r3
    45d6:	781b      	ldrb	r3, [r3, #0]
    45d8:	b25b      	sxtb	r3, r3
    45da:	2b00      	cmp	r3, #0
    45dc:	d000      	beq.n	45e0 <hif_isr+0x6c>
    45de:	e208      	b.n	49f2 <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    45e0:	4bc4      	ldr	r3, [pc, #784]	; (48f4 <hif_isr+0x380>)
    45e2:	2201      	movs	r2, #1
    45e4:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    45e6:	68bb      	ldr	r3, [r7, #8]
    45e8:	089b      	lsrs	r3, r3, #2
    45ea:	b29a      	uxth	r2, r3
    45ec:	230c      	movs	r3, #12
    45ee:	18fb      	adds	r3, r7, r3
    45f0:	0512      	lsls	r2, r2, #20
    45f2:	0d12      	lsrs	r2, r2, #20
    45f4:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    45f6:	230c      	movs	r3, #12
    45f8:	18fb      	adds	r3, r7, r3
    45fa:	881b      	ldrh	r3, [r3, #0]
    45fc:	2b00      	cmp	r3, #0
    45fe:	d100      	bne.n	4602 <hif_isr+0x8e>
    4600:	e1c1      	b.n	4986 <hif_isr+0x412>
				uint32 address = 0;
    4602:	2300      	movs	r3, #0
    4604:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    4606:	230f      	movs	r3, #15
    4608:	18fc      	adds	r4, r7, r3
    460a:	003b      	movs	r3, r7
    460c:	4aba      	ldr	r2, [pc, #744]	; (48f8 <hif_isr+0x384>)
    460e:	0019      	movs	r1, r3
    4610:	0010      	movs	r0, r2
    4612:	4bb5      	ldr	r3, [pc, #724]	; (48e8 <hif_isr+0x374>)
    4614:	4798      	blx	r3
    4616:	0003      	movs	r3, r0
    4618:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    461a:	230f      	movs	r3, #15
    461c:	18fb      	adds	r3, r7, r3
    461e:	781b      	ldrb	r3, [r3, #0]
    4620:	b25b      	sxtb	r3, r3
    4622:	2b00      	cmp	r3, #0
    4624:	d012      	beq.n	464c <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    4626:	23c8      	movs	r3, #200	; 0xc8
    4628:	33ff      	adds	r3, #255	; 0xff
    462a:	001a      	movs	r2, r3
    462c:	49b3      	ldr	r1, [pc, #716]	; (48fc <hif_isr+0x388>)
    462e:	4bb4      	ldr	r3, [pc, #720]	; (4900 <hif_isr+0x38c>)
    4630:	0018      	movs	r0, r3
    4632:	4bb4      	ldr	r3, [pc, #720]	; (4904 <hif_isr+0x390>)
    4634:	4798      	blx	r3
    4636:	4bb4      	ldr	r3, [pc, #720]	; (4908 <hif_isr+0x394>)
    4638:	0018      	movs	r0, r3
    463a:	4bb4      	ldr	r3, [pc, #720]	; (490c <hif_isr+0x398>)
    463c:	4798      	blx	r3
    463e:	200d      	movs	r0, #13
    4640:	4bb3      	ldr	r3, [pc, #716]	; (4910 <hif_isr+0x39c>)
    4642:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    4644:	2001      	movs	r0, #1
    4646:	4ba9      	ldr	r3, [pc, #676]	; (48ec <hif_isr+0x378>)
    4648:	4798      	blx	r3
					goto ERR1;
    464a:	e1d3      	b.n	49f4 <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    464c:	683a      	ldr	r2, [r7, #0]
    464e:	4ba9      	ldr	r3, [pc, #676]	; (48f4 <hif_isr+0x380>)
    4650:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    4652:	230c      	movs	r3, #12
    4654:	18fb      	adds	r3, r7, r3
    4656:	881a      	ldrh	r2, [r3, #0]
    4658:	4ba6      	ldr	r3, [pc, #664]	; (48f4 <hif_isr+0x380>)
    465a:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    465c:	683b      	ldr	r3, [r7, #0]
    465e:	220f      	movs	r2, #15
    4660:	18bc      	adds	r4, r7, r2
    4662:	1d39      	adds	r1, r7, #4
    4664:	2204      	movs	r2, #4
    4666:	0018      	movs	r0, r3
    4668:	4baa      	ldr	r3, [pc, #680]	; (4914 <hif_isr+0x3a0>)
    466a:	4798      	blx	r3
    466c:	0003      	movs	r3, r0
    466e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    4670:	1d3b      	adds	r3, r7, #4
    4672:	885b      	ldrh	r3, [r3, #2]
    4674:	b29a      	uxth	r2, r3
    4676:	1d3b      	adds	r3, r7, #4
    4678:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    467a:	230f      	movs	r3, #15
    467c:	18fb      	adds	r3, r7, r3
    467e:	781b      	ldrb	r3, [r3, #0]
    4680:	b25b      	sxtb	r3, r3
    4682:	2b00      	cmp	r3, #0
    4684:	d012      	beq.n	46ac <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    4686:	23d2      	movs	r3, #210	; 0xd2
    4688:	33ff      	adds	r3, #255	; 0xff
    468a:	001a      	movs	r2, r3
    468c:	499b      	ldr	r1, [pc, #620]	; (48fc <hif_isr+0x388>)
    468e:	4b9c      	ldr	r3, [pc, #624]	; (4900 <hif_isr+0x38c>)
    4690:	0018      	movs	r0, r3
    4692:	4b9c      	ldr	r3, [pc, #624]	; (4904 <hif_isr+0x390>)
    4694:	4798      	blx	r3
    4696:	4ba0      	ldr	r3, [pc, #640]	; (4918 <hif_isr+0x3a4>)
    4698:	0018      	movs	r0, r3
    469a:	4b9c      	ldr	r3, [pc, #624]	; (490c <hif_isr+0x398>)
    469c:	4798      	blx	r3
    469e:	200d      	movs	r0, #13
    46a0:	4b9b      	ldr	r3, [pc, #620]	; (4910 <hif_isr+0x39c>)
    46a2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    46a4:	2001      	movs	r0, #1
    46a6:	4b91      	ldr	r3, [pc, #580]	; (48ec <hif_isr+0x378>)
    46a8:	4798      	blx	r3
					goto ERR1;
    46aa:	e1a3      	b.n	49f4 <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    46ac:	1d3b      	adds	r3, r7, #4
    46ae:	885b      	ldrh	r3, [r3, #2]
    46b0:	b29b      	uxth	r3, r3
    46b2:	220c      	movs	r2, #12
    46b4:	18ba      	adds	r2, r7, r2
    46b6:	8812      	ldrh	r2, [r2, #0]
    46b8:	429a      	cmp	r2, r3
    46ba:	d02d      	beq.n	4718 <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    46bc:	230c      	movs	r3, #12
    46be:	18fb      	adds	r3, r7, r3
    46c0:	881b      	ldrh	r3, [r3, #0]
    46c2:	1d3a      	adds	r2, r7, #4
    46c4:	8852      	ldrh	r2, [r2, #2]
    46c6:	b292      	uxth	r2, r2
    46c8:	1a9b      	subs	r3, r3, r2
    46ca:	2b04      	cmp	r3, #4
    46cc:	dd24      	ble.n	4718 <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    46ce:	23ed      	movs	r3, #237	; 0xed
    46d0:	005a      	lsls	r2, r3, #1
    46d2:	498a      	ldr	r1, [pc, #552]	; (48fc <hif_isr+0x388>)
    46d4:	4b8a      	ldr	r3, [pc, #552]	; (4900 <hif_isr+0x38c>)
    46d6:	0018      	movs	r0, r3
    46d8:	4b8a      	ldr	r3, [pc, #552]	; (4904 <hif_isr+0x390>)
    46da:	4798      	blx	r3
    46dc:	230c      	movs	r3, #12
    46de:	18fb      	adds	r3, r7, r3
    46e0:	8819      	ldrh	r1, [r3, #0]
    46e2:	1d3b      	adds	r3, r7, #4
    46e4:	885b      	ldrh	r3, [r3, #2]
    46e6:	b29b      	uxth	r3, r3
    46e8:	001a      	movs	r2, r3
    46ea:	1d3b      	adds	r3, r7, #4
    46ec:	781b      	ldrb	r3, [r3, #0]
    46ee:	b2db      	uxtb	r3, r3
    46f0:	001c      	movs	r4, r3
    46f2:	1d3b      	adds	r3, r7, #4
    46f4:	785b      	ldrb	r3, [r3, #1]
    46f6:	b2db      	uxtb	r3, r3
    46f8:	4888      	ldr	r0, [pc, #544]	; (491c <hif_isr+0x3a8>)
    46fa:	9300      	str	r3, [sp, #0]
    46fc:	0023      	movs	r3, r4
    46fe:	4c81      	ldr	r4, [pc, #516]	; (4904 <hif_isr+0x390>)
    4700:	47a0      	blx	r4
    4702:	200d      	movs	r0, #13
    4704:	4b82      	ldr	r3, [pc, #520]	; (4910 <hif_isr+0x39c>)
    4706:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    4708:	2001      	movs	r0, #1
    470a:	4b78      	ldr	r3, [pc, #480]	; (48ec <hif_isr+0x378>)
    470c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    470e:	230f      	movs	r3, #15
    4710:	18fb      	adds	r3, r7, r3
    4712:	22fa      	movs	r2, #250	; 0xfa
    4714:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    4716:	e16d      	b.n	49f4 <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    4718:	1d3b      	adds	r3, r7, #4
    471a:	781b      	ldrb	r3, [r3, #0]
    471c:	b2db      	uxtb	r3, r3
    471e:	2b01      	cmp	r3, #1
    4720:	d120      	bne.n	4764 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    4722:	4b74      	ldr	r3, [pc, #464]	; (48f4 <hif_isr+0x380>)
    4724:	68db      	ldr	r3, [r3, #12]
    4726:	2b00      	cmp	r3, #0
    4728:	d00d      	beq.n	4746 <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    472a:	4b72      	ldr	r3, [pc, #456]	; (48f4 <hif_isr+0x380>)
    472c:	68db      	ldr	r3, [r3, #12]
    472e:	1d3a      	adds	r2, r7, #4
    4730:	7852      	ldrb	r2, [r2, #1]
    4732:	b2d0      	uxtb	r0, r2
    4734:	1d3a      	adds	r2, r7, #4
    4736:	8852      	ldrh	r2, [r2, #2]
    4738:	b292      	uxth	r2, r2
    473a:	3a08      	subs	r2, #8
    473c:	b291      	uxth	r1, r2
    473e:	683a      	ldr	r2, [r7, #0]
    4740:	3208      	adds	r2, #8
    4742:	4798      	blx	r3
    4744:	e0fe      	b.n	4944 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    4746:	23f3      	movs	r3, #243	; 0xf3
    4748:	005a      	lsls	r2, r3, #1
    474a:	496c      	ldr	r1, [pc, #432]	; (48fc <hif_isr+0x388>)
    474c:	4b6c      	ldr	r3, [pc, #432]	; (4900 <hif_isr+0x38c>)
    474e:	0018      	movs	r0, r3
    4750:	4b6c      	ldr	r3, [pc, #432]	; (4904 <hif_isr+0x390>)
    4752:	4798      	blx	r3
    4754:	4b72      	ldr	r3, [pc, #456]	; (4920 <hif_isr+0x3ac>)
    4756:	0018      	movs	r0, r3
    4758:	4b6c      	ldr	r3, [pc, #432]	; (490c <hif_isr+0x398>)
    475a:	4798      	blx	r3
    475c:	200d      	movs	r0, #13
    475e:	4b6c      	ldr	r3, [pc, #432]	; (4910 <hif_isr+0x39c>)
    4760:	4798      	blx	r3
    4762:	e0ef      	b.n	4944 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    4764:	1d3b      	adds	r3, r7, #4
    4766:	781b      	ldrb	r3, [r3, #0]
    4768:	b2db      	uxtb	r3, r3
    476a:	2b02      	cmp	r3, #2
    476c:	d120      	bne.n	47b0 <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    476e:	4b61      	ldr	r3, [pc, #388]	; (48f4 <hif_isr+0x380>)
    4770:	691b      	ldr	r3, [r3, #16]
    4772:	2b00      	cmp	r3, #0
    4774:	d00d      	beq.n	4792 <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4776:	4b5f      	ldr	r3, [pc, #380]	; (48f4 <hif_isr+0x380>)
    4778:	691b      	ldr	r3, [r3, #16]
    477a:	1d3a      	adds	r2, r7, #4
    477c:	7852      	ldrb	r2, [r2, #1]
    477e:	b2d0      	uxtb	r0, r2
    4780:	1d3a      	adds	r2, r7, #4
    4782:	8852      	ldrh	r2, [r2, #2]
    4784:	b292      	uxth	r2, r2
    4786:	3a08      	subs	r2, #8
    4788:	b291      	uxth	r1, r2
    478a:	683a      	ldr	r2, [r7, #0]
    478c:	3208      	adds	r2, #8
    478e:	4798      	blx	r3
    4790:	e0d8      	b.n	4944 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    4792:	23f7      	movs	r3, #247	; 0xf7
    4794:	005a      	lsls	r2, r3, #1
    4796:	4959      	ldr	r1, [pc, #356]	; (48fc <hif_isr+0x388>)
    4798:	4b59      	ldr	r3, [pc, #356]	; (4900 <hif_isr+0x38c>)
    479a:	0018      	movs	r0, r3
    479c:	4b59      	ldr	r3, [pc, #356]	; (4904 <hif_isr+0x390>)
    479e:	4798      	blx	r3
    47a0:	4b60      	ldr	r3, [pc, #384]	; (4924 <hif_isr+0x3b0>)
    47a2:	0018      	movs	r0, r3
    47a4:	4b59      	ldr	r3, [pc, #356]	; (490c <hif_isr+0x398>)
    47a6:	4798      	blx	r3
    47a8:	200d      	movs	r0, #13
    47aa:	4b59      	ldr	r3, [pc, #356]	; (4910 <hif_isr+0x39c>)
    47ac:	4798      	blx	r3
    47ae:	e0c9      	b.n	4944 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    47b0:	1d3b      	adds	r3, r7, #4
    47b2:	781b      	ldrb	r3, [r3, #0]
    47b4:	b2db      	uxtb	r3, r3
    47b6:	2b04      	cmp	r3, #4
    47b8:	d120      	bne.n	47fc <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    47ba:	4b4e      	ldr	r3, [pc, #312]	; (48f4 <hif_isr+0x380>)
    47bc:	695b      	ldr	r3, [r3, #20]
    47be:	2b00      	cmp	r3, #0
    47c0:	d00d      	beq.n	47de <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    47c2:	4b4c      	ldr	r3, [pc, #304]	; (48f4 <hif_isr+0x380>)
    47c4:	695b      	ldr	r3, [r3, #20]
    47c6:	1d3a      	adds	r2, r7, #4
    47c8:	7852      	ldrb	r2, [r2, #1]
    47ca:	b2d0      	uxtb	r0, r2
    47cc:	1d3a      	adds	r2, r7, #4
    47ce:	8852      	ldrh	r2, [r2, #2]
    47d0:	b292      	uxth	r2, r2
    47d2:	3a08      	subs	r2, #8
    47d4:	b291      	uxth	r1, r2
    47d6:	683a      	ldr	r2, [r7, #0]
    47d8:	3208      	adds	r2, #8
    47da:	4798      	blx	r3
    47dc:	e0b2      	b.n	4944 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    47de:	23fb      	movs	r3, #251	; 0xfb
    47e0:	005a      	lsls	r2, r3, #1
    47e2:	4946      	ldr	r1, [pc, #280]	; (48fc <hif_isr+0x388>)
    47e4:	4b46      	ldr	r3, [pc, #280]	; (4900 <hif_isr+0x38c>)
    47e6:	0018      	movs	r0, r3
    47e8:	4b46      	ldr	r3, [pc, #280]	; (4904 <hif_isr+0x390>)
    47ea:	4798      	blx	r3
    47ec:	4b4e      	ldr	r3, [pc, #312]	; (4928 <hif_isr+0x3b4>)
    47ee:	0018      	movs	r0, r3
    47f0:	4b46      	ldr	r3, [pc, #280]	; (490c <hif_isr+0x398>)
    47f2:	4798      	blx	r3
    47f4:	200d      	movs	r0, #13
    47f6:	4b46      	ldr	r3, [pc, #280]	; (4910 <hif_isr+0x39c>)
    47f8:	4798      	blx	r3
    47fa:	e0a3      	b.n	4944 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    47fc:	1d3b      	adds	r3, r7, #4
    47fe:	781b      	ldrb	r3, [r3, #0]
    4800:	b2db      	uxtb	r3, r3
    4802:	2b06      	cmp	r3, #6
    4804:	d11f      	bne.n	4846 <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    4806:	4b3b      	ldr	r3, [pc, #236]	; (48f4 <hif_isr+0x380>)
    4808:	6a1b      	ldr	r3, [r3, #32]
    480a:	2b00      	cmp	r3, #0
    480c:	d00d      	beq.n	482a <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    480e:	4b39      	ldr	r3, [pc, #228]	; (48f4 <hif_isr+0x380>)
    4810:	6a1b      	ldr	r3, [r3, #32]
    4812:	1d3a      	adds	r2, r7, #4
    4814:	7852      	ldrb	r2, [r2, #1]
    4816:	b2d0      	uxtb	r0, r2
    4818:	1d3a      	adds	r2, r7, #4
    481a:	8852      	ldrh	r2, [r2, #2]
    481c:	b292      	uxth	r2, r2
    481e:	3a08      	subs	r2, #8
    4820:	b291      	uxth	r1, r2
    4822:	683a      	ldr	r2, [r7, #0]
    4824:	3208      	adds	r2, #8
    4826:	4798      	blx	r3
    4828:	e08c      	b.n	4944 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    482a:	4a40      	ldr	r2, [pc, #256]	; (492c <hif_isr+0x3b8>)
    482c:	4933      	ldr	r1, [pc, #204]	; (48fc <hif_isr+0x388>)
    482e:	4b34      	ldr	r3, [pc, #208]	; (4900 <hif_isr+0x38c>)
    4830:	0018      	movs	r0, r3
    4832:	4b34      	ldr	r3, [pc, #208]	; (4904 <hif_isr+0x390>)
    4834:	4798      	blx	r3
    4836:	4b3e      	ldr	r3, [pc, #248]	; (4930 <hif_isr+0x3bc>)
    4838:	0018      	movs	r0, r3
    483a:	4b34      	ldr	r3, [pc, #208]	; (490c <hif_isr+0x398>)
    483c:	4798      	blx	r3
    483e:	200d      	movs	r0, #13
    4840:	4b33      	ldr	r3, [pc, #204]	; (4910 <hif_isr+0x39c>)
    4842:	4798      	blx	r3
    4844:	e07e      	b.n	4944 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    4846:	1d3b      	adds	r3, r7, #4
    4848:	781b      	ldrb	r3, [r3, #0]
    484a:	b2db      	uxtb	r3, r3
    484c:	2b07      	cmp	r3, #7
    484e:	d11f      	bne.n	4890 <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    4850:	4b28      	ldr	r3, [pc, #160]	; (48f4 <hif_isr+0x380>)
    4852:	699b      	ldr	r3, [r3, #24]
    4854:	2b00      	cmp	r3, #0
    4856:	d00d      	beq.n	4874 <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4858:	4b26      	ldr	r3, [pc, #152]	; (48f4 <hif_isr+0x380>)
    485a:	699b      	ldr	r3, [r3, #24]
    485c:	1d3a      	adds	r2, r7, #4
    485e:	7852      	ldrb	r2, [r2, #1]
    4860:	b2d0      	uxtb	r0, r2
    4862:	1d3a      	adds	r2, r7, #4
    4864:	8852      	ldrh	r2, [r2, #2]
    4866:	b292      	uxth	r2, r2
    4868:	3a08      	subs	r2, #8
    486a:	b291      	uxth	r1, r2
    486c:	683a      	ldr	r2, [r7, #0]
    486e:	3208      	adds	r2, #8
    4870:	4798      	blx	r3
    4872:	e067      	b.n	4944 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    4874:	4a2f      	ldr	r2, [pc, #188]	; (4934 <hif_isr+0x3c0>)
    4876:	4921      	ldr	r1, [pc, #132]	; (48fc <hif_isr+0x388>)
    4878:	4b21      	ldr	r3, [pc, #132]	; (4900 <hif_isr+0x38c>)
    487a:	0018      	movs	r0, r3
    487c:	4b21      	ldr	r3, [pc, #132]	; (4904 <hif_isr+0x390>)
    487e:	4798      	blx	r3
    4880:	4b2d      	ldr	r3, [pc, #180]	; (4938 <hif_isr+0x3c4>)
    4882:	0018      	movs	r0, r3
    4884:	4b21      	ldr	r3, [pc, #132]	; (490c <hif_isr+0x398>)
    4886:	4798      	blx	r3
    4888:	200d      	movs	r0, #13
    488a:	4b21      	ldr	r3, [pc, #132]	; (4910 <hif_isr+0x39c>)
    488c:	4798      	blx	r3
    488e:	e059      	b.n	4944 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    4890:	1d3b      	adds	r3, r7, #4
    4892:	781b      	ldrb	r3, [r3, #0]
    4894:	b2db      	uxtb	r3, r3
    4896:	2b05      	cmp	r3, #5
    4898:	d111      	bne.n	48be <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    489a:	4b16      	ldr	r3, [pc, #88]	; (48f4 <hif_isr+0x380>)
    489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    489e:	2b00      	cmp	r3, #0
    48a0:	d050      	beq.n	4944 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    48a2:	4b14      	ldr	r3, [pc, #80]	; (48f4 <hif_isr+0x380>)
    48a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    48a6:	1d3a      	adds	r2, r7, #4
    48a8:	7852      	ldrb	r2, [r2, #1]
    48aa:	b2d0      	uxtb	r0, r2
    48ac:	1d3a      	adds	r2, r7, #4
    48ae:	8852      	ldrh	r2, [r2, #2]
    48b0:	b292      	uxth	r2, r2
    48b2:	3a08      	subs	r2, #8
    48b4:	b291      	uxth	r1, r2
    48b6:	683a      	ldr	r2, [r7, #0]
    48b8:	3208      	adds	r2, #8
    48ba:	4798      	blx	r3
    48bc:	e042      	b.n	4944 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    48be:	4a1f      	ldr	r2, [pc, #124]	; (493c <hif_isr+0x3c8>)
    48c0:	490e      	ldr	r1, [pc, #56]	; (48fc <hif_isr+0x388>)
    48c2:	4b0f      	ldr	r3, [pc, #60]	; (4900 <hif_isr+0x38c>)
    48c4:	0018      	movs	r0, r3
    48c6:	4b0f      	ldr	r3, [pc, #60]	; (4904 <hif_isr+0x390>)
    48c8:	4798      	blx	r3
    48ca:	4b1d      	ldr	r3, [pc, #116]	; (4940 <hif_isr+0x3cc>)
    48cc:	0018      	movs	r0, r3
    48ce:	4b0f      	ldr	r3, [pc, #60]	; (490c <hif_isr+0x398>)
    48d0:	4798      	blx	r3
    48d2:	200d      	movs	r0, #13
    48d4:	4b0e      	ldr	r3, [pc, #56]	; (4910 <hif_isr+0x39c>)
    48d6:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    48d8:	230f      	movs	r3, #15
    48da:	18fb      	adds	r3, r7, r3
    48dc:	22fa      	movs	r2, #250	; 0xfa
    48de:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    48e0:	e088      	b.n	49f4 <hif_isr+0x480>
    48e2:	46c0      	nop			; (mov r8, r8)
    48e4:	00001070 	.word	0x00001070
    48e8:	00005fd9 	.word	0x00005fd9
    48ec:	000036e1 	.word	0x000036e1
    48f0:	00005ffd 	.word	0x00005ffd
    48f4:	200005f0 	.word	0x200005f0
    48f8:	00001084 	.word	0x00001084
    48fc:	000197a0 	.word	0x000197a0
    4900:	0001949c 	.word	0x0001949c
    4904:	00013e4d 	.word	0x00013e4d
    4908:	000194cc 	.word	0x000194cc
    490c:	00013f69 	.word	0x00013f69
    4910:	00013e81 	.word	0x00013e81
    4914:	0000604d 	.word	0x0000604d
    4918:	000194f0 	.word	0x000194f0
    491c:	00019508 	.word	0x00019508
    4920:	00019548 	.word	0x00019548
    4924:	00019568 	.word	0x00019568
    4928:	0001958c 	.word	0x0001958c
    492c:	000001ff 	.word	0x000001ff
    4930:	000195ac 	.word	0x000195ac
    4934:	00000206 	.word	0x00000206
    4938:	000195d0 	.word	0x000195d0
    493c:	0000020f 	.word	0x0000020f
    4940:	000195f4 	.word	0x000195f4
				}
				if(gstrHifCxt.u8HifRXDone)
    4944:	4b2f      	ldr	r3, [pc, #188]	; (4a04 <hif_isr+0x490>)
    4946:	789b      	ldrb	r3, [r3, #2]
    4948:	b2db      	uxtb	r3, r3
    494a:	2b00      	cmp	r3, #0
    494c:	d052      	beq.n	49f4 <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    494e:	4a2e      	ldr	r2, [pc, #184]	; (4a08 <hif_isr+0x494>)
    4950:	492e      	ldr	r1, [pc, #184]	; (4a0c <hif_isr+0x498>)
    4952:	4b2f      	ldr	r3, [pc, #188]	; (4a10 <hif_isr+0x49c>)
    4954:	0018      	movs	r0, r3
    4956:	4b2f      	ldr	r3, [pc, #188]	; (4a14 <hif_isr+0x4a0>)
    4958:	4798      	blx	r3
    495a:	1d3b      	adds	r3, r7, #4
    495c:	781b      	ldrb	r3, [r3, #0]
    495e:	b2db      	uxtb	r3, r3
    4960:	0019      	movs	r1, r3
    4962:	1d3b      	adds	r3, r7, #4
    4964:	785b      	ldrb	r3, [r3, #1]
    4966:	b2db      	uxtb	r3, r3
    4968:	001a      	movs	r2, r3
    496a:	4b2b      	ldr	r3, [pc, #172]	; (4a18 <hif_isr+0x4a4>)
    496c:	0018      	movs	r0, r3
    496e:	4b29      	ldr	r3, [pc, #164]	; (4a14 <hif_isr+0x4a0>)
    4970:	4798      	blx	r3
    4972:	200d      	movs	r0, #13
    4974:	4b29      	ldr	r3, [pc, #164]	; (4a1c <hif_isr+0x4a8>)
    4976:	4798      	blx	r3
					ret = hif_set_rx_done();
    4978:	230f      	movs	r3, #15
    497a:	18fc      	adds	r4, r7, r3
    497c:	4b28      	ldr	r3, [pc, #160]	; (4a20 <hif_isr+0x4ac>)
    497e:	4798      	blx	r3
    4980:	0003      	movs	r3, r0
    4982:	7023      	strb	r3, [r4, #0]
    4984:	e036      	b.n	49f4 <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    4986:	2387      	movs	r3, #135	; 0x87
    4988:	009a      	lsls	r2, r3, #2
    498a:	4920      	ldr	r1, [pc, #128]	; (4a0c <hif_isr+0x498>)
    498c:	4b20      	ldr	r3, [pc, #128]	; (4a10 <hif_isr+0x49c>)
    498e:	0018      	movs	r0, r3
    4990:	4b20      	ldr	r3, [pc, #128]	; (4a14 <hif_isr+0x4a0>)
    4992:	4798      	blx	r3
    4994:	4b23      	ldr	r3, [pc, #140]	; (4a24 <hif_isr+0x4b0>)
    4996:	0018      	movs	r0, r3
    4998:	4b23      	ldr	r3, [pc, #140]	; (4a28 <hif_isr+0x4b4>)
    499a:	4798      	blx	r3
    499c:	200d      	movs	r0, #13
    499e:	4b1f      	ldr	r3, [pc, #124]	; (4a1c <hif_isr+0x4a8>)
    49a0:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    49a2:	230f      	movs	r3, #15
    49a4:	18fb      	adds	r3, r7, r3
    49a6:	22fe      	movs	r2, #254	; 0xfe
    49a8:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    49aa:	e023      	b.n	49f4 <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    49ac:	2389      	movs	r3, #137	; 0x89
    49ae:	009a      	lsls	r2, r3, #2
    49b0:	4916      	ldr	r1, [pc, #88]	; (4a0c <hif_isr+0x498>)
    49b2:	4b17      	ldr	r3, [pc, #92]	; (4a10 <hif_isr+0x49c>)
    49b4:	0018      	movs	r0, r3
    49b6:	4b17      	ldr	r3, [pc, #92]	; (4a14 <hif_isr+0x4a0>)
    49b8:	4798      	blx	r3
    49ba:	68ba      	ldr	r2, [r7, #8]
    49bc:	4b1b      	ldr	r3, [pc, #108]	; (4a2c <hif_isr+0x4b8>)
    49be:	0011      	movs	r1, r2
    49c0:	0018      	movs	r0, r3
    49c2:	4b14      	ldr	r3, [pc, #80]	; (4a14 <hif_isr+0x4a0>)
    49c4:	4798      	blx	r3
    49c6:	200d      	movs	r0, #13
    49c8:	4b14      	ldr	r3, [pc, #80]	; (4a1c <hif_isr+0x4a8>)
    49ca:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    49cc:	230f      	movs	r3, #15
    49ce:	18fb      	adds	r3, r7, r3
    49d0:	22f4      	movs	r2, #244	; 0xf4
    49d2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    49d4:	e00e      	b.n	49f4 <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    49d6:	4a16      	ldr	r2, [pc, #88]	; (4a30 <hif_isr+0x4bc>)
    49d8:	490c      	ldr	r1, [pc, #48]	; (4a0c <hif_isr+0x498>)
    49da:	4b0d      	ldr	r3, [pc, #52]	; (4a10 <hif_isr+0x49c>)
    49dc:	0018      	movs	r0, r3
    49de:	4b0d      	ldr	r3, [pc, #52]	; (4a14 <hif_isr+0x4a0>)
    49e0:	4798      	blx	r3
    49e2:	4b14      	ldr	r3, [pc, #80]	; (4a34 <hif_isr+0x4c0>)
    49e4:	0018      	movs	r0, r3
    49e6:	4b10      	ldr	r3, [pc, #64]	; (4a28 <hif_isr+0x4b4>)
    49e8:	4798      	blx	r3
    49ea:	200d      	movs	r0, #13
    49ec:	4b0b      	ldr	r3, [pc, #44]	; (4a1c <hif_isr+0x4a8>)
    49ee:	4798      	blx	r3
		goto ERR1;
    49f0:	e000      	b.n	49f4 <hif_isr+0x480>
			if(ret != M2M_SUCCESS)goto ERR1;
    49f2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    49f4:	230f      	movs	r3, #15
    49f6:	18fb      	adds	r3, r7, r3
    49f8:	781b      	ldrb	r3, [r3, #0]
    49fa:	b25b      	sxtb	r3, r3
}
    49fc:	0018      	movs	r0, r3
    49fe:	46bd      	mov	sp, r7
    4a00:	b005      	add	sp, #20
    4a02:	bd90      	pop	{r4, r7, pc}
    4a04:	200005f0 	.word	0x200005f0
    4a08:	00000215 	.word	0x00000215
    4a0c:	000197a0 	.word	0x000197a0
    4a10:	0001949c 	.word	0x0001949c
    4a14:	00013e4d 	.word	0x00013e4d
    4a18:	0001960c 	.word	0x0001960c
    4a1c:	00013e81 	.word	0x00013e81
    4a20:	00003fc9 	.word	0x00003fc9
    4a24:	00019638 	.word	0x00019638
    4a28:	00013f69 	.word	0x00013f69
    4a2c:	0001964c 	.word	0x0001964c
    4a30:	0000022d 	.word	0x0000022d
    4a34:	00019668 	.word	0x00019668

00004a38 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    4a38:	b590      	push	{r4, r7, lr}
    4a3a:	b083      	sub	sp, #12
    4a3c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    4a3e:	1dfb      	adds	r3, r7, #7
    4a40:	2200      	movs	r2, #0
    4a42:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    4a44:	e023      	b.n	4a8e <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    4a46:	4b18      	ldr	r3, [pc, #96]	; (4aa8 <hif_handle_isr+0x70>)
    4a48:	78db      	ldrb	r3, [r3, #3]
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	3b01      	subs	r3, #1
    4a4e:	b2da      	uxtb	r2, r3
    4a50:	4b15      	ldr	r3, [pc, #84]	; (4aa8 <hif_handle_isr+0x70>)
    4a52:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    4a54:	1dfc      	adds	r4, r7, #7
    4a56:	4b15      	ldr	r3, [pc, #84]	; (4aac <hif_handle_isr+0x74>)
    4a58:	4798      	blx	r3
    4a5a:	0003      	movs	r3, r0
    4a5c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    4a5e:	1dfb      	adds	r3, r7, #7
    4a60:	781b      	ldrb	r3, [r3, #0]
    4a62:	b25b      	sxtb	r3, r3
    4a64:	2b00      	cmp	r3, #0
    4a66:	d100      	bne.n	4a6a <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    4a68:	e011      	b.n	4a8e <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    4a6a:	4a11      	ldr	r2, [pc, #68]	; (4ab0 <hif_handle_isr+0x78>)
    4a6c:	4911      	ldr	r1, [pc, #68]	; (4ab4 <hif_handle_isr+0x7c>)
    4a6e:	4b12      	ldr	r3, [pc, #72]	; (4ab8 <hif_handle_isr+0x80>)
    4a70:	0018      	movs	r0, r3
    4a72:	4b12      	ldr	r3, [pc, #72]	; (4abc <hif_handle_isr+0x84>)
    4a74:	4798      	blx	r3
    4a76:	1dfb      	adds	r3, r7, #7
    4a78:	2200      	movs	r2, #0
    4a7a:	569a      	ldrsb	r2, [r3, r2]
    4a7c:	4b10      	ldr	r3, [pc, #64]	; (4ac0 <hif_handle_isr+0x88>)
    4a7e:	0011      	movs	r1, r2
    4a80:	0018      	movs	r0, r3
    4a82:	4b0e      	ldr	r3, [pc, #56]	; (4abc <hif_handle_isr+0x84>)
    4a84:	4798      	blx	r3
    4a86:	200d      	movs	r0, #13
    4a88:	4b0e      	ldr	r3, [pc, #56]	; (4ac4 <hif_handle_isr+0x8c>)
    4a8a:	4798      	blx	r3
			ret = hif_isr();
    4a8c:	e7e2      	b.n	4a54 <hif_handle_isr+0x1c>
	while (gstrHifCxt.u8Interrupt) {
    4a8e:	4b06      	ldr	r3, [pc, #24]	; (4aa8 <hif_handle_isr+0x70>)
    4a90:	78db      	ldrb	r3, [r3, #3]
    4a92:	b2db      	uxtb	r3, r3
    4a94:	2b00      	cmp	r3, #0
    4a96:	d1d6      	bne.n	4a46 <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    4a98:	1dfb      	adds	r3, r7, #7
    4a9a:	781b      	ldrb	r3, [r3, #0]
    4a9c:	b25b      	sxtb	r3, r3
}
    4a9e:	0018      	movs	r0, r3
    4aa0:	46bd      	mov	sp, r7
    4aa2:	b003      	add	sp, #12
    4aa4:	bd90      	pop	{r4, r7, pc}
    4aa6:	46c0      	nop			; (mov r8, r8)
    4aa8:	200005f0 	.word	0x200005f0
    4aac:	00004575 	.word	0x00004575
    4ab0:	0000024a 	.word	0x0000024a
    4ab4:	000197a8 	.word	0x000197a8
    4ab8:	0001949c 	.word	0x0001949c
    4abc:	00013e4d 	.word	0x00013e4d
    4ac0:	0001968c 	.word	0x0001968c
    4ac4:	00013e81 	.word	0x00013e81

00004ac8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    4ac8:	b590      	push	{r4, r7, lr}
    4aca:	b087      	sub	sp, #28
    4acc:	af00      	add	r7, sp, #0
    4ace:	60f8      	str	r0, [r7, #12]
    4ad0:	60b9      	str	r1, [r7, #8]
    4ad2:	0019      	movs	r1, r3
    4ad4:	1dbb      	adds	r3, r7, #6
    4ad6:	801a      	strh	r2, [r3, #0]
    4ad8:	1d7b      	adds	r3, r7, #5
    4ada:	1c0a      	adds	r2, r1, #0
    4adc:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    4ade:	2317      	movs	r3, #23
    4ae0:	18fb      	adds	r3, r7, r3
    4ae2:	2200      	movs	r2, #0
    4ae4:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    4ae6:	68fb      	ldr	r3, [r7, #12]
    4ae8:	2b00      	cmp	r3, #0
    4aea:	d006      	beq.n	4afa <hif_receive+0x32>
    4aec:	68bb      	ldr	r3, [r7, #8]
    4aee:	2b00      	cmp	r3, #0
    4af0:	d003      	beq.n	4afa <hif_receive+0x32>
    4af2:	1dbb      	adds	r3, r7, #6
    4af4:	881b      	ldrh	r3, [r3, #0]
    4af6:	2b00      	cmp	r3, #0
    4af8:	d11c      	bne.n	4b34 <hif_receive+0x6c>
	{
		if(isDone)
    4afa:	1d7b      	adds	r3, r7, #5
    4afc:	781b      	ldrb	r3, [r3, #0]
    4afe:	2b00      	cmp	r3, #0
    4b00:	d006      	beq.n	4b10 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    4b02:	2317      	movs	r3, #23
    4b04:	18fc      	adds	r4, r7, r3
    4b06:	4b42      	ldr	r3, [pc, #264]	; (4c10 <hif_receive+0x148>)
    4b08:	4798      	blx	r3
    4b0a:	0003      	movs	r3, r0
    4b0c:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    4b0e:	e077      	b.n	4c00 <hif_receive+0x138>
			ret = M2M_ERR_FAIL;
    4b10:	2317      	movs	r3, #23
    4b12:	18fb      	adds	r3, r7, r3
    4b14:	22f4      	movs	r2, #244	; 0xf4
    4b16:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    4b18:	4a3e      	ldr	r2, [pc, #248]	; (4c14 <hif_receive+0x14c>)
    4b1a:	493f      	ldr	r1, [pc, #252]	; (4c18 <hif_receive+0x150>)
    4b1c:	4b3f      	ldr	r3, [pc, #252]	; (4c1c <hif_receive+0x154>)
    4b1e:	0018      	movs	r0, r3
    4b20:	4b3f      	ldr	r3, [pc, #252]	; (4c20 <hif_receive+0x158>)
    4b22:	4798      	blx	r3
    4b24:	4b3f      	ldr	r3, [pc, #252]	; (4c24 <hif_receive+0x15c>)
    4b26:	0018      	movs	r0, r3
    4b28:	4b3f      	ldr	r3, [pc, #252]	; (4c28 <hif_receive+0x160>)
    4b2a:	4798      	blx	r3
    4b2c:	200d      	movs	r0, #13
    4b2e:	4b3f      	ldr	r3, [pc, #252]	; (4c2c <hif_receive+0x164>)
    4b30:	4798      	blx	r3
		goto ERR1;
    4b32:	e065      	b.n	4c00 <hif_receive+0x138>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    4b34:	1dbb      	adds	r3, r7, #6
    4b36:	881a      	ldrh	r2, [r3, #0]
    4b38:	4b3d      	ldr	r3, [pc, #244]	; (4c30 <hif_receive+0x168>)
    4b3a:	689b      	ldr	r3, [r3, #8]
    4b3c:	429a      	cmp	r2, r3
    4b3e:	d915      	bls.n	4b6c <hif_receive+0xa4>
	{
		ret = M2M_ERR_FAIL;
    4b40:	2317      	movs	r3, #23
    4b42:	18fb      	adds	r3, r7, r3
    4b44:	22f4      	movs	r2, #244	; 0xf4
    4b46:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    4b48:	4a3a      	ldr	r2, [pc, #232]	; (4c34 <hif_receive+0x16c>)
    4b4a:	4933      	ldr	r1, [pc, #204]	; (4c18 <hif_receive+0x150>)
    4b4c:	4b33      	ldr	r3, [pc, #204]	; (4c1c <hif_receive+0x154>)
    4b4e:	0018      	movs	r0, r3
    4b50:	4b33      	ldr	r3, [pc, #204]	; (4c20 <hif_receive+0x158>)
    4b52:	4798      	blx	r3
    4b54:	1dbb      	adds	r3, r7, #6
    4b56:	8819      	ldrh	r1, [r3, #0]
    4b58:	4b35      	ldr	r3, [pc, #212]	; (4c30 <hif_receive+0x168>)
    4b5a:	689a      	ldr	r2, [r3, #8]
    4b5c:	4b36      	ldr	r3, [pc, #216]	; (4c38 <hif_receive+0x170>)
    4b5e:	0018      	movs	r0, r3
    4b60:	4b2f      	ldr	r3, [pc, #188]	; (4c20 <hif_receive+0x158>)
    4b62:	4798      	blx	r3
    4b64:	200d      	movs	r0, #13
    4b66:	4b31      	ldr	r3, [pc, #196]	; (4c2c <hif_receive+0x164>)
    4b68:	4798      	blx	r3
		goto ERR1;
    4b6a:	e049      	b.n	4c00 <hif_receive+0x138>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    4b6c:	4b30      	ldr	r3, [pc, #192]	; (4c30 <hif_receive+0x168>)
    4b6e:	685a      	ldr	r2, [r3, #4]
    4b70:	68fb      	ldr	r3, [r7, #12]
    4b72:	429a      	cmp	r2, r3
    4b74:	d80a      	bhi.n	4b8c <hif_receive+0xc4>
    4b76:	1dbb      	adds	r3, r7, #6
    4b78:	881a      	ldrh	r2, [r3, #0]
    4b7a:	68fb      	ldr	r3, [r7, #12]
    4b7c:	18d2      	adds	r2, r2, r3
    4b7e:	4b2c      	ldr	r3, [pc, #176]	; (4c30 <hif_receive+0x168>)
    4b80:	6859      	ldr	r1, [r3, #4]
    4b82:	4b2b      	ldr	r3, [pc, #172]	; (4c30 <hif_receive+0x168>)
    4b84:	689b      	ldr	r3, [r3, #8]
    4b86:	18cb      	adds	r3, r1, r3
    4b88:	429a      	cmp	r2, r3
    4b8a:	d911      	bls.n	4bb0 <hif_receive+0xe8>
	{
		ret = M2M_ERR_FAIL;
    4b8c:	2317      	movs	r3, #23
    4b8e:	18fb      	adds	r3, r7, r3
    4b90:	22f4      	movs	r2, #244	; 0xf4
    4b92:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    4b94:	4a29      	ldr	r2, [pc, #164]	; (4c3c <hif_receive+0x174>)
    4b96:	4920      	ldr	r1, [pc, #128]	; (4c18 <hif_receive+0x150>)
    4b98:	4b20      	ldr	r3, [pc, #128]	; (4c1c <hif_receive+0x154>)
    4b9a:	0018      	movs	r0, r3
    4b9c:	4b20      	ldr	r3, [pc, #128]	; (4c20 <hif_receive+0x158>)
    4b9e:	4798      	blx	r3
    4ba0:	4b27      	ldr	r3, [pc, #156]	; (4c40 <hif_receive+0x178>)
    4ba2:	0018      	movs	r0, r3
    4ba4:	4b20      	ldr	r3, [pc, #128]	; (4c28 <hif_receive+0x160>)
    4ba6:	4798      	blx	r3
    4ba8:	200d      	movs	r0, #13
    4baa:	4b20      	ldr	r3, [pc, #128]	; (4c2c <hif_receive+0x164>)
    4bac:	4798      	blx	r3
		goto ERR1;
    4bae:	e027      	b.n	4c00 <hif_receive+0x138>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    4bb0:	1dbb      	adds	r3, r7, #6
    4bb2:	881a      	ldrh	r2, [r3, #0]
    4bb4:	2317      	movs	r3, #23
    4bb6:	18fc      	adds	r4, r7, r3
    4bb8:	68b9      	ldr	r1, [r7, #8]
    4bba:	68fb      	ldr	r3, [r7, #12]
    4bbc:	0018      	movs	r0, r3
    4bbe:	4b21      	ldr	r3, [pc, #132]	; (4c44 <hif_receive+0x17c>)
    4bc0:	4798      	blx	r3
    4bc2:	0003      	movs	r3, r0
    4bc4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    4bc6:	2317      	movs	r3, #23
    4bc8:	18fb      	adds	r3, r7, r3
    4bca:	781b      	ldrb	r3, [r3, #0]
    4bcc:	b25b      	sxtb	r3, r3
    4bce:	2b00      	cmp	r3, #0
    4bd0:	d115      	bne.n	4bfe <hif_receive+0x136>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    4bd2:	4b17      	ldr	r3, [pc, #92]	; (4c30 <hif_receive+0x168>)
    4bd4:	685a      	ldr	r2, [r3, #4]
    4bd6:	4b16      	ldr	r3, [pc, #88]	; (4c30 <hif_receive+0x168>)
    4bd8:	689b      	ldr	r3, [r3, #8]
    4bda:	18d2      	adds	r2, r2, r3
    4bdc:	1dbb      	adds	r3, r7, #6
    4bde:	8819      	ldrh	r1, [r3, #0]
    4be0:	68fb      	ldr	r3, [r7, #12]
    4be2:	18cb      	adds	r3, r1, r3
    4be4:	429a      	cmp	r2, r3
    4be6:	d003      	beq.n	4bf0 <hif_receive+0x128>
    4be8:	1d7b      	adds	r3, r7, #5
    4bea:	781b      	ldrb	r3, [r3, #0]
    4bec:	2b00      	cmp	r3, #0
    4bee:	d007      	beq.n	4c00 <hif_receive+0x138>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    4bf0:	2317      	movs	r3, #23
    4bf2:	18fc      	adds	r4, r7, r3
    4bf4:	4b06      	ldr	r3, [pc, #24]	; (4c10 <hif_receive+0x148>)
    4bf6:	4798      	blx	r3
    4bf8:	0003      	movs	r3, r0
    4bfa:	7023      	strb	r3, [r4, #0]
    4bfc:	e000      	b.n	4c00 <hif_receive+0x138>
	if(ret != M2M_SUCCESS)goto ERR1;
    4bfe:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    4c00:	2317      	movs	r3, #23
    4c02:	18fb      	adds	r3, r7, r3
    4c04:	781b      	ldrb	r3, [r3, #0]
    4c06:	b25b      	sxtb	r3, r3
}
    4c08:	0018      	movs	r0, r3
    4c0a:	46bd      	mov	sp, r7
    4c0c:	b007      	add	sp, #28
    4c0e:	bd90      	pop	{r4, r7, pc}
    4c10:	00003fc9 	.word	0x00003fc9
    4c14:	0000026b 	.word	0x0000026b
    4c18:	000197b8 	.word	0x000197b8
    4c1c:	0001949c 	.word	0x0001949c
    4c20:	00013e4d 	.word	0x00013e4d
    4c24:	000196bc 	.word	0x000196bc
    4c28:	00013f69 	.word	0x00013f69
    4c2c:	00013e81 	.word	0x00013e81
    4c30:	200005f0 	.word	0x200005f0
    4c34:	00000273 	.word	0x00000273
    4c38:	000196dc 	.word	0x000196dc
    4c3c:	00000279 	.word	0x00000279
    4c40:	00019724 	.word	0x00019724
    4c44:	0000604d 	.word	0x0000604d

00004c48 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    4c48:	b580      	push	{r7, lr}
    4c4a:	b084      	sub	sp, #16
    4c4c:	af00      	add	r7, sp, #0
    4c4e:	0002      	movs	r2, r0
    4c50:	6039      	str	r1, [r7, #0]
    4c52:	1dfb      	adds	r3, r7, #7
    4c54:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    4c56:	230f      	movs	r3, #15
    4c58:	18fb      	adds	r3, r7, r3
    4c5a:	2200      	movs	r2, #0
    4c5c:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    4c5e:	1dfb      	adds	r3, r7, #7
    4c60:	781b      	ldrb	r3, [r3, #0]
    4c62:	2b07      	cmp	r3, #7
    4c64:	d820      	bhi.n	4ca8 <hif_register_cb+0x60>
    4c66:	009a      	lsls	r2, r3, #2
    4c68:	4b1e      	ldr	r3, [pc, #120]	; (4ce4 <hif_register_cb+0x9c>)
    4c6a:	18d3      	adds	r3, r2, r3
    4c6c:	681b      	ldr	r3, [r3, #0]
    4c6e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    4c70:	4b1d      	ldr	r3, [pc, #116]	; (4ce8 <hif_register_cb+0xa0>)
    4c72:	683a      	ldr	r2, [r7, #0]
    4c74:	611a      	str	r2, [r3, #16]
			break;
    4c76:	e02c      	b.n	4cd2 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    4c78:	4b1b      	ldr	r3, [pc, #108]	; (4ce8 <hif_register_cb+0xa0>)
    4c7a:	683a      	ldr	r2, [r7, #0]
    4c7c:	60da      	str	r2, [r3, #12]
			break;
    4c7e:	e028      	b.n	4cd2 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    4c80:	4b19      	ldr	r3, [pc, #100]	; (4ce8 <hif_register_cb+0xa0>)
    4c82:	683a      	ldr	r2, [r7, #0]
    4c84:	615a      	str	r2, [r3, #20]
			break;
    4c86:	e024      	b.n	4cd2 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    4c88:	4b17      	ldr	r3, [pc, #92]	; (4ce8 <hif_register_cb+0xa0>)
    4c8a:	683a      	ldr	r2, [r7, #0]
    4c8c:	61da      	str	r2, [r3, #28]
			break;
    4c8e:	e020      	b.n	4cd2 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    4c90:	4b15      	ldr	r3, [pc, #84]	; (4ce8 <hif_register_cb+0xa0>)
    4c92:	683a      	ldr	r2, [r7, #0]
    4c94:	621a      	str	r2, [r3, #32]
			break;
    4c96:	e01c      	b.n	4cd2 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    4c98:	4b13      	ldr	r3, [pc, #76]	; (4ce8 <hif_register_cb+0xa0>)
    4c9a:	683a      	ldr	r2, [r7, #0]
    4c9c:	619a      	str	r2, [r3, #24]
			break;
    4c9e:	e018      	b.n	4cd2 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    4ca0:	4b11      	ldr	r3, [pc, #68]	; (4ce8 <hif_register_cb+0xa0>)
    4ca2:	683a      	ldr	r2, [r7, #0]
    4ca4:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    4ca6:	e014      	b.n	4cd2 <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    4ca8:	4a10      	ldr	r2, [pc, #64]	; (4cec <hif_register_cb+0xa4>)
    4caa:	4911      	ldr	r1, [pc, #68]	; (4cf0 <hif_register_cb+0xa8>)
    4cac:	4b11      	ldr	r3, [pc, #68]	; (4cf4 <hif_register_cb+0xac>)
    4cae:	0018      	movs	r0, r3
    4cb0:	4b11      	ldr	r3, [pc, #68]	; (4cf8 <hif_register_cb+0xb0>)
    4cb2:	4798      	blx	r3
    4cb4:	1dfb      	adds	r3, r7, #7
    4cb6:	781a      	ldrb	r2, [r3, #0]
    4cb8:	4b10      	ldr	r3, [pc, #64]	; (4cfc <hif_register_cb+0xb4>)
    4cba:	0011      	movs	r1, r2
    4cbc:	0018      	movs	r0, r3
    4cbe:	4b0e      	ldr	r3, [pc, #56]	; (4cf8 <hif_register_cb+0xb0>)
    4cc0:	4798      	blx	r3
    4cc2:	200d      	movs	r0, #13
    4cc4:	4b0e      	ldr	r3, [pc, #56]	; (4d00 <hif_register_cb+0xb8>)
    4cc6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    4cc8:	230f      	movs	r3, #15
    4cca:	18fb      	adds	r3, r7, r3
    4ccc:	22f4      	movs	r2, #244	; 0xf4
    4cce:	701a      	strb	r2, [r3, #0]
			break;
    4cd0:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    4cd2:	230f      	movs	r3, #15
    4cd4:	18fb      	adds	r3, r7, r3
    4cd6:	781b      	ldrb	r3, [r3, #0]
    4cd8:	b25b      	sxtb	r3, r3
}
    4cda:	0018      	movs	r0, r3
    4cdc:	46bd      	mov	sp, r7
    4cde:	b004      	add	sp, #16
    4ce0:	bd80      	pop	{r7, pc}
    4ce2:	46c0      	nop			; (mov r8, r8)
    4ce4:	00019774 	.word	0x00019774
    4ce8:	200005f0 	.word	0x200005f0
    4cec:	000002b1 	.word	0x000002b1
    4cf0:	000197c4 	.word	0x000197c4
    4cf4:	0001949c 	.word	0x0001949c
    4cf8:	00013e4d 	.word	0x00013e4d
    4cfc:	00019768 	.word	0x00019768
    4d00:	00013e81 	.word	0x00013e81

00004d04 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    4d04:	b590      	push	{r4, r7, lr}
    4d06:	b0ad      	sub	sp, #180	; 0xb4
    4d08:	af02      	add	r7, sp, #8
    4d0a:	603a      	str	r2, [r7, #0]
    4d0c:	1dfb      	adds	r3, r7, #7
    4d0e:	1c02      	adds	r2, r0, #0
    4d10:	701a      	strb	r2, [r3, #0]
    4d12:	1d3b      	adds	r3, r7, #4
    4d14:	1c0a      	adds	r2, r1, #0
    4d16:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    4d18:	1dfb      	adds	r3, r7, #7
    4d1a:	781b      	ldrb	r3, [r3, #0]
    4d1c:	2b2c      	cmp	r3, #44	; 0x2c
    4d1e:	d116      	bne.n	4d4e <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    4d20:	239c      	movs	r3, #156	; 0x9c
    4d22:	18f9      	adds	r1, r7, r3
    4d24:	6838      	ldr	r0, [r7, #0]
    4d26:	2300      	movs	r3, #0
    4d28:	2204      	movs	r2, #4
    4d2a:	4cc6      	ldr	r4, [pc, #792]	; (5044 <m2m_wifi_cb+0x340>)
    4d2c:	47a0      	blx	r4
    4d2e:	1e03      	subs	r3, r0, #0
    4d30:	d000      	beq.n	4d34 <m2m_wifi_cb+0x30>
    4d32:	e1aa      	b.n	508a <m2m_wifi_cb+0x386>
		{
			if (gpfAppWifiCb)
    4d34:	4bc4      	ldr	r3, [pc, #784]	; (5048 <m2m_wifi_cb+0x344>)
    4d36:	681b      	ldr	r3, [r3, #0]
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d100      	bne.n	4d3e <m2m_wifi_cb+0x3a>
    4d3c:	e1a5      	b.n	508a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    4d3e:	4bc2      	ldr	r3, [pc, #776]	; (5048 <m2m_wifi_cb+0x344>)
    4d40:	681b      	ldr	r3, [r3, #0]
    4d42:	229c      	movs	r2, #156	; 0x9c
    4d44:	18ba      	adds	r2, r7, r2
    4d46:	0011      	movs	r1, r2
    4d48:	202c      	movs	r0, #44	; 0x2c
    4d4a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4d4c:	e19d      	b.n	508a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    4d4e:	1dfb      	adds	r3, r7, #7
    4d50:	781b      	ldrb	r3, [r3, #0]
    4d52:	2b1b      	cmp	r3, #27
    4d54:	d116      	bne.n	4d84 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    4d56:	2394      	movs	r3, #148	; 0x94
    4d58:	18f9      	adds	r1, r7, r3
    4d5a:	6838      	ldr	r0, [r7, #0]
    4d5c:	2300      	movs	r3, #0
    4d5e:	2208      	movs	r2, #8
    4d60:	4cb8      	ldr	r4, [pc, #736]	; (5044 <m2m_wifi_cb+0x340>)
    4d62:	47a0      	blx	r4
    4d64:	1e03      	subs	r3, r0, #0
    4d66:	d000      	beq.n	4d6a <m2m_wifi_cb+0x66>
    4d68:	e18f      	b.n	508a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    4d6a:	4bb7      	ldr	r3, [pc, #732]	; (5048 <m2m_wifi_cb+0x344>)
    4d6c:	681b      	ldr	r3, [r3, #0]
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d100      	bne.n	4d74 <m2m_wifi_cb+0x70>
    4d72:	e18a      	b.n	508a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    4d74:	4bb4      	ldr	r3, [pc, #720]	; (5048 <m2m_wifi_cb+0x344>)
    4d76:	681b      	ldr	r3, [r3, #0]
    4d78:	2294      	movs	r2, #148	; 0x94
    4d7a:	18ba      	adds	r2, r7, r2
    4d7c:	0011      	movs	r1, r2
    4d7e:	201b      	movs	r0, #27
    4d80:	4798      	blx	r3
}
    4d82:	e182      	b.n	508a <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    4d84:	1dfb      	adds	r3, r7, #7
    4d86:	781b      	ldrb	r3, [r3, #0]
    4d88:	2b06      	cmp	r3, #6
    4d8a:	d116      	bne.n	4dba <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    4d8c:	2308      	movs	r3, #8
    4d8e:	18f9      	adds	r1, r7, r3
    4d90:	6838      	ldr	r0, [r7, #0]
    4d92:	2301      	movs	r3, #1
    4d94:	2230      	movs	r2, #48	; 0x30
    4d96:	4cab      	ldr	r4, [pc, #684]	; (5044 <m2m_wifi_cb+0x340>)
    4d98:	47a0      	blx	r4
    4d9a:	1e03      	subs	r3, r0, #0
    4d9c:	d000      	beq.n	4da0 <m2m_wifi_cb+0x9c>
    4d9e:	e174      	b.n	508a <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    4da0:	4ba9      	ldr	r3, [pc, #676]	; (5048 <m2m_wifi_cb+0x344>)
    4da2:	681b      	ldr	r3, [r3, #0]
    4da4:	2b00      	cmp	r3, #0
    4da6:	d100      	bne.n	4daa <m2m_wifi_cb+0xa6>
    4da8:	e16f      	b.n	508a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    4daa:	4ba7      	ldr	r3, [pc, #668]	; (5048 <m2m_wifi_cb+0x344>)
    4dac:	681b      	ldr	r3, [r3, #0]
    4dae:	2208      	movs	r2, #8
    4db0:	18ba      	adds	r2, r7, r2
    4db2:	0011      	movs	r1, r2
    4db4:	2006      	movs	r0, #6
    4db6:	4798      	blx	r3
}
    4db8:	e167      	b.n	508a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    4dba:	1dfb      	adds	r3, r7, #7
    4dbc:	781b      	ldrb	r3, [r3, #0]
    4dbe:	2b0e      	cmp	r3, #14
    4dc0:	d100      	bne.n	4dc4 <m2m_wifi_cb+0xc0>
    4dc2:	e162      	b.n	508a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    4dc4:	1dfb      	adds	r3, r7, #7
    4dc6:	781b      	ldrb	r3, [r3, #0]
    4dc8:	2b32      	cmp	r3, #50	; 0x32
    4dca:	d116      	bne.n	4dfa <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    4dcc:	2380      	movs	r3, #128	; 0x80
    4dce:	18f9      	adds	r1, r7, r3
    4dd0:	6838      	ldr	r0, [r7, #0]
    4dd2:	2300      	movs	r3, #0
    4dd4:	2214      	movs	r2, #20
    4dd6:	4c9b      	ldr	r4, [pc, #620]	; (5044 <m2m_wifi_cb+0x340>)
    4dd8:	47a0      	blx	r4
    4dda:	1e03      	subs	r3, r0, #0
    4ddc:	d000      	beq.n	4de0 <m2m_wifi_cb+0xdc>
    4dde:	e154      	b.n	508a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    4de0:	4b99      	ldr	r3, [pc, #612]	; (5048 <m2m_wifi_cb+0x344>)
    4de2:	681b      	ldr	r3, [r3, #0]
    4de4:	2b00      	cmp	r3, #0
    4de6:	d100      	bne.n	4dea <m2m_wifi_cb+0xe6>
    4de8:	e14f      	b.n	508a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    4dea:	4b97      	ldr	r3, [pc, #604]	; (5048 <m2m_wifi_cb+0x344>)
    4dec:	681b      	ldr	r3, [r3, #0]
    4dee:	2280      	movs	r2, #128	; 0x80
    4df0:	18ba      	adds	r2, r7, r2
    4df2:	0011      	movs	r1, r2
    4df4:	2032      	movs	r0, #50	; 0x32
    4df6:	4798      	blx	r3
}
    4df8:	e147      	b.n	508a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    4dfa:	1dfb      	adds	r3, r7, #7
    4dfc:	781b      	ldrb	r3, [r3, #0]
    4dfe:	2b2f      	cmp	r3, #47	; 0x2f
    4e00:	d11d      	bne.n	4e3e <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    4e02:	2308      	movs	r3, #8
    4e04:	18fb      	adds	r3, r7, r3
    4e06:	2264      	movs	r2, #100	; 0x64
    4e08:	2100      	movs	r1, #0
    4e0a:	0018      	movs	r0, r3
    4e0c:	4b8f      	ldr	r3, [pc, #572]	; (504c <m2m_wifi_cb+0x348>)
    4e0e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    4e10:	2308      	movs	r3, #8
    4e12:	18f9      	adds	r1, r7, r3
    4e14:	6838      	ldr	r0, [r7, #0]
    4e16:	2300      	movs	r3, #0
    4e18:	2264      	movs	r2, #100	; 0x64
    4e1a:	4c8a      	ldr	r4, [pc, #552]	; (5044 <m2m_wifi_cb+0x340>)
    4e1c:	47a0      	blx	r4
    4e1e:	1e03      	subs	r3, r0, #0
    4e20:	d000      	beq.n	4e24 <m2m_wifi_cb+0x120>
    4e22:	e132      	b.n	508a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    4e24:	4b88      	ldr	r3, [pc, #544]	; (5048 <m2m_wifi_cb+0x344>)
    4e26:	681b      	ldr	r3, [r3, #0]
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d100      	bne.n	4e2e <m2m_wifi_cb+0x12a>
    4e2c:	e12d      	b.n	508a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    4e2e:	4b86      	ldr	r3, [pc, #536]	; (5048 <m2m_wifi_cb+0x344>)
    4e30:	681b      	ldr	r3, [r3, #0]
    4e32:	2208      	movs	r2, #8
    4e34:	18ba      	adds	r2, r7, r2
    4e36:	0011      	movs	r1, r2
    4e38:	202f      	movs	r0, #47	; 0x2f
    4e3a:	4798      	blx	r3
}
    4e3c:	e125      	b.n	508a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    4e3e:	1dfb      	adds	r3, r7, #7
    4e40:	781b      	ldrb	r3, [r3, #0]
    4e42:	2b34      	cmp	r3, #52	; 0x34
    4e44:	d12e      	bne.n	4ea4 <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    4e46:	237c      	movs	r3, #124	; 0x7c
    4e48:	18f9      	adds	r1, r7, r3
    4e4a:	6838      	ldr	r0, [r7, #0]
    4e4c:	2300      	movs	r3, #0
    4e4e:	2204      	movs	r2, #4
    4e50:	4c7c      	ldr	r4, [pc, #496]	; (5044 <m2m_wifi_cb+0x340>)
    4e52:	47a0      	blx	r4
    4e54:	1e03      	subs	r3, r0, #0
    4e56:	d000      	beq.n	4e5a <m2m_wifi_cb+0x156>
    4e58:	e117      	b.n	508a <m2m_wifi_cb+0x386>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    4e5a:	4b7d      	ldr	r3, [pc, #500]	; (5050 <m2m_wifi_cb+0x34c>)
    4e5c:	0018      	movs	r0, r3
    4e5e:	4b7d      	ldr	r3, [pc, #500]	; (5054 <m2m_wifi_cb+0x350>)
    4e60:	4798      	blx	r3
    4e62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4e64:	0e1b      	lsrs	r3, r3, #24
    4e66:	b2db      	uxtb	r3, r3
    4e68:	0019      	movs	r1, r3
    4e6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4e6c:	0c1b      	lsrs	r3, r3, #16
    4e6e:	b2db      	uxtb	r3, r3
    4e70:	001a      	movs	r2, r3
    4e72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4e74:	0a1b      	lsrs	r3, r3, #8
    4e76:	b2db      	uxtb	r3, r3
    4e78:	001c      	movs	r4, r3
    4e7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4e7c:	b2db      	uxtb	r3, r3
    4e7e:	4876      	ldr	r0, [pc, #472]	; (5058 <m2m_wifi_cb+0x354>)
    4e80:	9300      	str	r3, [sp, #0]
    4e82:	0023      	movs	r3, r4
    4e84:	4c73      	ldr	r4, [pc, #460]	; (5054 <m2m_wifi_cb+0x350>)
    4e86:	47a0      	blx	r4
    4e88:	200d      	movs	r0, #13
    4e8a:	4b74      	ldr	r3, [pc, #464]	; (505c <m2m_wifi_cb+0x358>)
    4e8c:	4798      	blx	r3
			if (gpfAppWifiCb)
    4e8e:	4b6e      	ldr	r3, [pc, #440]	; (5048 <m2m_wifi_cb+0x344>)
    4e90:	681b      	ldr	r3, [r3, #0]
    4e92:	2b00      	cmp	r3, #0
    4e94:	d100      	bne.n	4e98 <m2m_wifi_cb+0x194>
    4e96:	e0f8      	b.n	508a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    4e98:	4b6b      	ldr	r3, [pc, #428]	; (5048 <m2m_wifi_cb+0x344>)
    4e9a:	681b      	ldr	r3, [r3, #0]
    4e9c:	2100      	movs	r1, #0
    4e9e:	2034      	movs	r0, #52	; 0x34
    4ea0:	4798      	blx	r3
}
    4ea2:	e0f2      	b.n	508a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    4ea4:	1dfb      	adds	r3, r7, #7
    4ea6:	781b      	ldrb	r3, [r3, #0]
    4ea8:	2b11      	cmp	r3, #17
    4eaa:	d11e      	bne.n	4eea <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    4eac:	4b6c      	ldr	r3, [pc, #432]	; (5060 <m2m_wifi_cb+0x35c>)
    4eae:	2200      	movs	r2, #0
    4eb0:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    4eb2:	2378      	movs	r3, #120	; 0x78
    4eb4:	18f9      	adds	r1, r7, r3
    4eb6:	6838      	ldr	r0, [r7, #0]
    4eb8:	2300      	movs	r3, #0
    4eba:	2204      	movs	r2, #4
    4ebc:	4c61      	ldr	r4, [pc, #388]	; (5044 <m2m_wifi_cb+0x340>)
    4ebe:	47a0      	blx	r4
    4ec0:	1e03      	subs	r3, r0, #0
    4ec2:	d000      	beq.n	4ec6 <m2m_wifi_cb+0x1c2>
    4ec4:	e0e1      	b.n	508a <m2m_wifi_cb+0x386>
			gu8ChNum = strState.u8NumofCh;
    4ec6:	2378      	movs	r3, #120	; 0x78
    4ec8:	18fb      	adds	r3, r7, r3
    4eca:	781a      	ldrb	r2, [r3, #0]
    4ecc:	4b65      	ldr	r3, [pc, #404]	; (5064 <m2m_wifi_cb+0x360>)
    4ece:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    4ed0:	4b5d      	ldr	r3, [pc, #372]	; (5048 <m2m_wifi_cb+0x344>)
    4ed2:	681b      	ldr	r3, [r3, #0]
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	d100      	bne.n	4eda <m2m_wifi_cb+0x1d6>
    4ed8:	e0d7      	b.n	508a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    4eda:	4b5b      	ldr	r3, [pc, #364]	; (5048 <m2m_wifi_cb+0x344>)
    4edc:	681b      	ldr	r3, [r3, #0]
    4ede:	2278      	movs	r2, #120	; 0x78
    4ee0:	18ba      	adds	r2, r7, r2
    4ee2:	0011      	movs	r1, r2
    4ee4:	2011      	movs	r0, #17
    4ee6:	4798      	blx	r3
}
    4ee8:	e0cf      	b.n	508a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    4eea:	1dfb      	adds	r3, r7, #7
    4eec:	781b      	ldrb	r3, [r3, #0]
    4eee:	2b13      	cmp	r3, #19
    4ef0:	d116      	bne.n	4f20 <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    4ef2:	2308      	movs	r3, #8
    4ef4:	18f9      	adds	r1, r7, r3
    4ef6:	6838      	ldr	r0, [r7, #0]
    4ef8:	2300      	movs	r3, #0
    4efa:	222c      	movs	r2, #44	; 0x2c
    4efc:	4c51      	ldr	r4, [pc, #324]	; (5044 <m2m_wifi_cb+0x340>)
    4efe:	47a0      	blx	r4
    4f00:	1e03      	subs	r3, r0, #0
    4f02:	d000      	beq.n	4f06 <m2m_wifi_cb+0x202>
    4f04:	e0c1      	b.n	508a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    4f06:	4b50      	ldr	r3, [pc, #320]	; (5048 <m2m_wifi_cb+0x344>)
    4f08:	681b      	ldr	r3, [r3, #0]
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	d100      	bne.n	4f10 <m2m_wifi_cb+0x20c>
    4f0e:	e0bc      	b.n	508a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    4f10:	4b4d      	ldr	r3, [pc, #308]	; (5048 <m2m_wifi_cb+0x344>)
    4f12:	681b      	ldr	r3, [r3, #0]
    4f14:	2208      	movs	r2, #8
    4f16:	18ba      	adds	r2, r7, r2
    4f18:	0011      	movs	r1, r2
    4f1a:	2013      	movs	r0, #19
    4f1c:	4798      	blx	r3
}
    4f1e:	e0b4      	b.n	508a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    4f20:	1dfb      	adds	r3, r7, #7
    4f22:	781b      	ldrb	r3, [r3, #0]
    4f24:	2b04      	cmp	r3, #4
    4f26:	d116      	bne.n	4f56 <m2m_wifi_cb+0x252>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    4f28:	23a0      	movs	r3, #160	; 0xa0
    4f2a:	18f9      	adds	r1, r7, r3
    4f2c:	6838      	ldr	r0, [r7, #0]
    4f2e:	2300      	movs	r3, #0
    4f30:	2204      	movs	r2, #4
    4f32:	4c44      	ldr	r4, [pc, #272]	; (5044 <m2m_wifi_cb+0x340>)
    4f34:	47a0      	blx	r4
    4f36:	1e03      	subs	r3, r0, #0
    4f38:	d000      	beq.n	4f3c <m2m_wifi_cb+0x238>
    4f3a:	e0a6      	b.n	508a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    4f3c:	4b42      	ldr	r3, [pc, #264]	; (5048 <m2m_wifi_cb+0x344>)
    4f3e:	681b      	ldr	r3, [r3, #0]
    4f40:	2b00      	cmp	r3, #0
    4f42:	d100      	bne.n	4f46 <m2m_wifi_cb+0x242>
    4f44:	e0a1      	b.n	508a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    4f46:	4b40      	ldr	r3, [pc, #256]	; (5048 <m2m_wifi_cb+0x344>)
    4f48:	681b      	ldr	r3, [r3, #0]
    4f4a:	22a0      	movs	r2, #160	; 0xa0
    4f4c:	18ba      	adds	r2, r7, r2
    4f4e:	0011      	movs	r1, r2
    4f50:	2004      	movs	r0, #4
    4f52:	4798      	blx	r3
}
    4f54:	e099      	b.n	508a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    4f56:	1dfb      	adds	r3, r7, #7
    4f58:	781b      	ldrb	r3, [r3, #0]
    4f5a:	2b65      	cmp	r3, #101	; 0x65
    4f5c:	d116      	bne.n	4f8c <m2m_wifi_cb+0x288>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    4f5e:	23a0      	movs	r3, #160	; 0xa0
    4f60:	18f9      	adds	r1, r7, r3
    4f62:	6838      	ldr	r0, [r7, #0]
    4f64:	2300      	movs	r3, #0
    4f66:	2204      	movs	r2, #4
    4f68:	4c36      	ldr	r4, [pc, #216]	; (5044 <m2m_wifi_cb+0x340>)
    4f6a:	47a0      	blx	r4
    4f6c:	1e03      	subs	r3, r0, #0
    4f6e:	d000      	beq.n	4f72 <m2m_wifi_cb+0x26e>
    4f70:	e08b      	b.n	508a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    4f72:	4b35      	ldr	r3, [pc, #212]	; (5048 <m2m_wifi_cb+0x344>)
    4f74:	681b      	ldr	r3, [r3, #0]
    4f76:	2b00      	cmp	r3, #0
    4f78:	d100      	bne.n	4f7c <m2m_wifi_cb+0x278>
    4f7a:	e086      	b.n	508a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    4f7c:	4b32      	ldr	r3, [pc, #200]	; (5048 <m2m_wifi_cb+0x344>)
    4f7e:	681b      	ldr	r3, [r3, #0]
    4f80:	22a0      	movs	r2, #160	; 0xa0
    4f82:	18ba      	adds	r2, r7, r2
    4f84:	0011      	movs	r1, r2
    4f86:	2065      	movs	r0, #101	; 0x65
    4f88:	4798      	blx	r3
}
    4f8a:	e07e      	b.n	508a <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    4f8c:	1dfb      	adds	r3, r7, #7
    4f8e:	781b      	ldrb	r3, [r3, #0]
    4f90:	2b09      	cmp	r3, #9
    4f92:	d116      	bne.n	4fc2 <m2m_wifi_cb+0x2be>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    4f94:	2308      	movs	r3, #8
    4f96:	18f9      	adds	r1, r7, r3
    4f98:	6838      	ldr	r0, [r7, #0]
    4f9a:	2301      	movs	r3, #1
    4f9c:	2264      	movs	r2, #100	; 0x64
    4f9e:	4c29      	ldr	r4, [pc, #164]	; (5044 <m2m_wifi_cb+0x340>)
    4fa0:	47a0      	blx	r4
    4fa2:	1e03      	subs	r3, r0, #0
    4fa4:	d000      	beq.n	4fa8 <m2m_wifi_cb+0x2a4>
    4fa6:	e070      	b.n	508a <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    4fa8:	4b27      	ldr	r3, [pc, #156]	; (5048 <m2m_wifi_cb+0x344>)
    4faa:	681b      	ldr	r3, [r3, #0]
    4fac:	2b00      	cmp	r3, #0
    4fae:	d100      	bne.n	4fb2 <m2m_wifi_cb+0x2ae>
    4fb0:	e06b      	b.n	508a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    4fb2:	4b25      	ldr	r3, [pc, #148]	; (5048 <m2m_wifi_cb+0x344>)
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	2208      	movs	r2, #8
    4fb8:	18ba      	adds	r2, r7, r2
    4fba:	0011      	movs	r1, r2
    4fbc:	2009      	movs	r0, #9
    4fbe:	4798      	blx	r3
}
    4fc0:	e063      	b.n	508a <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    4fc2:	1dfb      	adds	r3, r7, #7
    4fc4:	781b      	ldrb	r3, [r3, #0]
    4fc6:	2b2a      	cmp	r3, #42	; 0x2a
    4fc8:	d114      	bne.n	4ff4 <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    4fca:	2374      	movs	r3, #116	; 0x74
    4fcc:	18f9      	adds	r1, r7, r3
    4fce:	6838      	ldr	r0, [r7, #0]
    4fd0:	2301      	movs	r3, #1
    4fd2:	2204      	movs	r2, #4
    4fd4:	4c1b      	ldr	r4, [pc, #108]	; (5044 <m2m_wifi_cb+0x340>)
    4fd6:	47a0      	blx	r4
    4fd8:	1e03      	subs	r3, r0, #0
    4fda:	d156      	bne.n	508a <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    4fdc:	4b1a      	ldr	r3, [pc, #104]	; (5048 <m2m_wifi_cb+0x344>)
    4fde:	681b      	ldr	r3, [r3, #0]
    4fe0:	2b00      	cmp	r3, #0
    4fe2:	d052      	beq.n	508a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    4fe4:	4b18      	ldr	r3, [pc, #96]	; (5048 <m2m_wifi_cb+0x344>)
    4fe6:	681b      	ldr	r3, [r3, #0]
    4fe8:	2274      	movs	r2, #116	; 0x74
    4fea:	18ba      	adds	r2, r7, r2
    4fec:	0011      	movs	r1, r2
    4fee:	202a      	movs	r0, #42	; 0x2a
    4ff0:	4798      	blx	r3
}
    4ff2:	e04a      	b.n	508a <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    4ff4:	1dfb      	adds	r3, r7, #7
    4ff6:	781b      	ldrb	r3, [r3, #0]
    4ff8:	2b20      	cmp	r3, #32
    4ffa:	d135      	bne.n	5068 <m2m_wifi_cb+0x364>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    4ffc:	236c      	movs	r3, #108	; 0x6c
    4ffe:	18f9      	adds	r1, r7, r3
    5000:	6838      	ldr	r0, [r7, #0]
    5002:	2300      	movs	r3, #0
    5004:	2208      	movs	r2, #8
    5006:	4c0f      	ldr	r4, [pc, #60]	; (5044 <m2m_wifi_cb+0x340>)
    5008:	47a0      	blx	r4
    500a:	1e03      	subs	r3, r0, #0
    500c:	d13d      	bne.n	508a <m2m_wifi_cb+0x386>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    500e:	683b      	ldr	r3, [r7, #0]
    5010:	3308      	adds	r3, #8
    5012:	0018      	movs	r0, r3
    5014:	236c      	movs	r3, #108	; 0x6c
    5016:	18fb      	adds	r3, r7, r3
    5018:	6819      	ldr	r1, [r3, #0]
    501a:	236c      	movs	r3, #108	; 0x6c
    501c:	18fb      	adds	r3, r7, r3
    501e:	889a      	ldrh	r2, [r3, #4]
    5020:	2301      	movs	r3, #1
    5022:	4c08      	ldr	r4, [pc, #32]	; (5044 <m2m_wifi_cb+0x340>)
    5024:	47a0      	blx	r4
    5026:	1e03      	subs	r3, r0, #0
    5028:	d12f      	bne.n	508a <m2m_wifi_cb+0x386>
				if(gpfAppWifiCb)
    502a:	4b07      	ldr	r3, [pc, #28]	; (5048 <m2m_wifi_cb+0x344>)
    502c:	681b      	ldr	r3, [r3, #0]
    502e:	2b00      	cmp	r3, #0
    5030:	d02b      	beq.n	508a <m2m_wifi_cb+0x386>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    5032:	4b05      	ldr	r3, [pc, #20]	; (5048 <m2m_wifi_cb+0x344>)
    5034:	681b      	ldr	r3, [r3, #0]
    5036:	226c      	movs	r2, #108	; 0x6c
    5038:	18ba      	adds	r2, r7, r2
    503a:	0011      	movs	r1, r2
    503c:	2020      	movs	r0, #32
    503e:	4798      	blx	r3
}
    5040:	e023      	b.n	508a <m2m_wifi_cb+0x386>
    5042:	46c0      	nop			; (mov r8, r8)
    5044:	00004ac9 	.word	0x00004ac9
    5048:	20000224 	.word	0x20000224
    504c:	00003f31 	.word	0x00003f31
    5050:	000197d4 	.word	0x000197d4
    5054:	00013e4d 	.word	0x00013e4d
    5058:	000197e0 	.word	0x000197e0
    505c:	00013e81 	.word	0x00013e81
    5060:	20000221 	.word	0x20000221
    5064:	20000220 	.word	0x20000220
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    5068:	2395      	movs	r3, #149	; 0x95
    506a:	005a      	lsls	r2, r3, #1
    506c:	4909      	ldr	r1, [pc, #36]	; (5094 <m2m_wifi_cb+0x390>)
    506e:	4b0a      	ldr	r3, [pc, #40]	; (5098 <m2m_wifi_cb+0x394>)
    5070:	0018      	movs	r0, r3
    5072:	4b0a      	ldr	r3, [pc, #40]	; (509c <m2m_wifi_cb+0x398>)
    5074:	4798      	blx	r3
    5076:	1dfb      	adds	r3, r7, #7
    5078:	781a      	ldrb	r2, [r3, #0]
    507a:	4b09      	ldr	r3, [pc, #36]	; (50a0 <m2m_wifi_cb+0x39c>)
    507c:	0011      	movs	r1, r2
    507e:	0018      	movs	r0, r3
    5080:	4b06      	ldr	r3, [pc, #24]	; (509c <m2m_wifi_cb+0x398>)
    5082:	4798      	blx	r3
    5084:	200d      	movs	r0, #13
    5086:	4b07      	ldr	r3, [pc, #28]	; (50a4 <m2m_wifi_cb+0x3a0>)
    5088:	4798      	blx	r3
}
    508a:	46c0      	nop			; (mov r8, r8)
    508c:	46bd      	mov	sp, r7
    508e:	b02b      	add	sp, #172	; 0xac
    5090:	bd90      	pop	{r4, r7, pc}
    5092:	46c0      	nop			; (mov r8, r8)
    5094:	00019b88 	.word	0x00019b88
    5098:	00019800 	.word	0x00019800
    509c:	00013e4d 	.word	0x00013e4d
    50a0:	00019814 	.word	0x00019814
    50a4:	00013e81 	.word	0x00013e81

000050a8 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    50a8:	b590      	push	{r4, r7, lr}
    50aa:	b091      	sub	sp, #68	; 0x44
    50ac:	af02      	add	r7, sp, #8
    50ae:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    50b0:	2337      	movs	r3, #55	; 0x37
    50b2:	18fb      	adds	r3, r7, r3
    50b4:	2200      	movs	r2, #0
    50b6:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    50b8:	230b      	movs	r3, #11
    50ba:	18fb      	adds	r3, r7, r3
    50bc:	2201      	movs	r2, #1
    50be:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    50c0:	687b      	ldr	r3, [r7, #4]
    50c2:	2b00      	cmp	r3, #0
    50c4:	d104      	bne.n	50d0 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    50c6:	2337      	movs	r3, #55	; 0x37
    50c8:	18fb      	adds	r3, r7, r3
    50ca:	22f4      	movs	r2, #244	; 0xf4
    50cc:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    50ce:	e0ad      	b.n	522c <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    50d0:	687b      	ldr	r3, [r7, #4]
    50d2:	681a      	ldr	r2, [r3, #0]
    50d4:	4b59      	ldr	r3, [pc, #356]	; (523c <m2m_wifi_init+0x194>)
    50d6:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    50d8:	4b59      	ldr	r3, [pc, #356]	; (5240 <m2m_wifi_init+0x198>)
    50da:	2200      	movs	r2, #0
    50dc:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    50de:	2337      	movs	r3, #55	; 0x37
    50e0:	18fc      	adds	r4, r7, r3
    50e2:	230b      	movs	r3, #11
    50e4:	18fb      	adds	r3, r7, r3
    50e6:	0018      	movs	r0, r3
    50e8:	4b56      	ldr	r3, [pc, #344]	; (5244 <m2m_wifi_init+0x19c>)
    50ea:	4798      	blx	r3
    50ec:	0003      	movs	r3, r0
    50ee:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    50f0:	2337      	movs	r3, #55	; 0x37
    50f2:	18fb      	adds	r3, r7, r3
    50f4:	781b      	ldrb	r3, [r3, #0]
    50f6:	b25b      	sxtb	r3, r3
    50f8:	2b00      	cmp	r3, #0
    50fa:	d000      	beq.n	50fe <m2m_wifi_init+0x56>
    50fc:	e093      	b.n	5226 <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    50fe:	2337      	movs	r3, #55	; 0x37
    5100:	18fc      	adds	r4, r7, r3
    5102:	2000      	movs	r0, #0
    5104:	4b50      	ldr	r3, [pc, #320]	; (5248 <m2m_wifi_init+0x1a0>)
    5106:	4798      	blx	r3
    5108:	0003      	movs	r3, r0
    510a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    510c:	2337      	movs	r3, #55	; 0x37
    510e:	18fb      	adds	r3, r7, r3
    5110:	781b      	ldrb	r3, [r3, #0]
    5112:	b25b      	sxtb	r3, r3
    5114:	2b00      	cmp	r3, #0
    5116:	d000      	beq.n	511a <m2m_wifi_init+0x72>
    5118:	e080      	b.n	521c <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    511a:	4b4c      	ldr	r3, [pc, #304]	; (524c <m2m_wifi_init+0x1a4>)
    511c:	0019      	movs	r1, r3
    511e:	2001      	movs	r0, #1
    5120:	4b4b      	ldr	r3, [pc, #300]	; (5250 <m2m_wifi_init+0x1a8>)
    5122:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    5124:	2337      	movs	r3, #55	; 0x37
    5126:	18fc      	adds	r4, r7, r3
    5128:	230c      	movs	r3, #12
    512a:	18fb      	adds	r3, r7, r3
    512c:	0018      	movs	r0, r3
    512e:	4b49      	ldr	r3, [pc, #292]	; (5254 <m2m_wifi_init+0x1ac>)
    5130:	4798      	blx	r3
    5132:	0003      	movs	r3, r0
    5134:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    5136:	4b48      	ldr	r3, [pc, #288]	; (5258 <m2m_wifi_init+0x1b0>)
    5138:	0018      	movs	r0, r3
    513a:	4b48      	ldr	r3, [pc, #288]	; (525c <m2m_wifi_init+0x1b4>)
    513c:	4798      	blx	r3
    513e:	230c      	movs	r3, #12
    5140:	18fb      	adds	r3, r7, r3
    5142:	791b      	ldrb	r3, [r3, #4]
    5144:	0019      	movs	r1, r3
    5146:	230c      	movs	r3, #12
    5148:	18fb      	adds	r3, r7, r3
    514a:	795b      	ldrb	r3, [r3, #5]
    514c:	001a      	movs	r2, r3
    514e:	230c      	movs	r3, #12
    5150:	18fb      	adds	r3, r7, r3
    5152:	799b      	ldrb	r3, [r3, #6]
    5154:	001c      	movs	r4, r3
    5156:	230c      	movs	r3, #12
    5158:	18fb      	adds	r3, r7, r3
    515a:	8c1b      	ldrh	r3, [r3, #32]
    515c:	4840      	ldr	r0, [pc, #256]	; (5260 <m2m_wifi_init+0x1b8>)
    515e:	9300      	str	r3, [sp, #0]
    5160:	0023      	movs	r3, r4
    5162:	4c3e      	ldr	r4, [pc, #248]	; (525c <m2m_wifi_init+0x1b4>)
    5164:	47a0      	blx	r4
    5166:	200d      	movs	r0, #13
    5168:	4b3e      	ldr	r3, [pc, #248]	; (5264 <m2m_wifi_init+0x1bc>)
    516a:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    516c:	4b3a      	ldr	r3, [pc, #232]	; (5258 <m2m_wifi_init+0x1b0>)
    516e:	0018      	movs	r0, r3
    5170:	4b3a      	ldr	r3, [pc, #232]	; (525c <m2m_wifi_init+0x1b4>)
    5172:	4798      	blx	r3
    5174:	230c      	movs	r3, #12
    5176:	18fb      	adds	r3, r7, r3
    5178:	3316      	adds	r3, #22
    517a:	001a      	movs	r2, r3
    517c:	230c      	movs	r3, #12
    517e:	18fb      	adds	r3, r7, r3
    5180:	330a      	adds	r3, #10
    5182:	0019      	movs	r1, r3
    5184:	4b38      	ldr	r3, [pc, #224]	; (5268 <m2m_wifi_init+0x1c0>)
    5186:	0018      	movs	r0, r3
    5188:	4b34      	ldr	r3, [pc, #208]	; (525c <m2m_wifi_init+0x1b4>)
    518a:	4798      	blx	r3
    518c:	200d      	movs	r0, #13
    518e:	4b35      	ldr	r3, [pc, #212]	; (5264 <m2m_wifi_init+0x1bc>)
    5190:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    5192:	4b31      	ldr	r3, [pc, #196]	; (5258 <m2m_wifi_init+0x1b0>)
    5194:	0018      	movs	r0, r3
    5196:	4b31      	ldr	r3, [pc, #196]	; (525c <m2m_wifi_init+0x1b4>)
    5198:	4798      	blx	r3
    519a:	230c      	movs	r3, #12
    519c:	18fb      	adds	r3, r7, r3
    519e:	79db      	ldrb	r3, [r3, #7]
    51a0:	0019      	movs	r1, r3
    51a2:	230c      	movs	r3, #12
    51a4:	18fb      	adds	r3, r7, r3
    51a6:	7a1b      	ldrb	r3, [r3, #8]
    51a8:	001a      	movs	r2, r3
    51aa:	230c      	movs	r3, #12
    51ac:	18fb      	adds	r3, r7, r3
    51ae:	7a5b      	ldrb	r3, [r3, #9]
    51b0:	482e      	ldr	r0, [pc, #184]	; (526c <m2m_wifi_init+0x1c4>)
    51b2:	4c2a      	ldr	r4, [pc, #168]	; (525c <m2m_wifi_init+0x1b4>)
    51b4:	47a0      	blx	r4
    51b6:	200d      	movs	r0, #13
    51b8:	4b2a      	ldr	r3, [pc, #168]	; (5264 <m2m_wifi_init+0x1bc>)
    51ba:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    51bc:	4b26      	ldr	r3, [pc, #152]	; (5258 <m2m_wifi_init+0x1b0>)
    51be:	0018      	movs	r0, r3
    51c0:	4b26      	ldr	r3, [pc, #152]	; (525c <m2m_wifi_init+0x1b4>)
    51c2:	4798      	blx	r3
    51c4:	482a      	ldr	r0, [pc, #168]	; (5270 <m2m_wifi_init+0x1c8>)
    51c6:	2302      	movs	r3, #2
    51c8:	2205      	movs	r2, #5
    51ca:	2113      	movs	r1, #19
    51cc:	4c23      	ldr	r4, [pc, #140]	; (525c <m2m_wifi_init+0x1b4>)
    51ce:	47a0      	blx	r4
    51d0:	200d      	movs	r0, #13
    51d2:	4b24      	ldr	r3, [pc, #144]	; (5264 <m2m_wifi_init+0x1bc>)
    51d4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    51d6:	4b20      	ldr	r3, [pc, #128]	; (5258 <m2m_wifi_init+0x1b0>)
    51d8:	0018      	movs	r0, r3
    51da:	4b20      	ldr	r3, [pc, #128]	; (525c <m2m_wifi_init+0x1b4>)
    51dc:	4798      	blx	r3
    51de:	4a25      	ldr	r2, [pc, #148]	; (5274 <m2m_wifi_init+0x1cc>)
    51e0:	4925      	ldr	r1, [pc, #148]	; (5278 <m2m_wifi_init+0x1d0>)
    51e2:	4b26      	ldr	r3, [pc, #152]	; (527c <m2m_wifi_init+0x1d4>)
    51e4:	0018      	movs	r0, r3
    51e6:	4b1d      	ldr	r3, [pc, #116]	; (525c <m2m_wifi_init+0x1b4>)
    51e8:	4798      	blx	r3
    51ea:	200d      	movs	r0, #13
    51ec:	4b1d      	ldr	r3, [pc, #116]	; (5264 <m2m_wifi_init+0x1bc>)
    51ee:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    51f0:	2337      	movs	r3, #55	; 0x37
    51f2:	18fb      	adds	r3, r7, r3
    51f4:	781b      	ldrb	r3, [r3, #0]
    51f6:	b25b      	sxtb	r3, r3
    51f8:	330d      	adds	r3, #13
    51fa:	d116      	bne.n	522a <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    51fc:	23ee      	movs	r3, #238	; 0xee
    51fe:	33ff      	adds	r3, #255	; 0xff
    5200:	001a      	movs	r2, r3
    5202:	491f      	ldr	r1, [pc, #124]	; (5280 <m2m_wifi_init+0x1d8>)
    5204:	4b1f      	ldr	r3, [pc, #124]	; (5284 <m2m_wifi_init+0x1dc>)
    5206:	0018      	movs	r0, r3
    5208:	4b14      	ldr	r3, [pc, #80]	; (525c <m2m_wifi_init+0x1b4>)
    520a:	4798      	blx	r3
    520c:	4b1e      	ldr	r3, [pc, #120]	; (5288 <m2m_wifi_init+0x1e0>)
    520e:	0018      	movs	r0, r3
    5210:	4b1e      	ldr	r3, [pc, #120]	; (528c <m2m_wifi_init+0x1e4>)
    5212:	4798      	blx	r3
    5214:	200d      	movs	r0, #13
    5216:	4b13      	ldr	r3, [pc, #76]	; (5264 <m2m_wifi_init+0x1bc>)
    5218:	4798      	blx	r3
	}

	goto _EXIT0;
    521a:	e006      	b.n	522a <m2m_wifi_init+0x182>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    521c:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    521e:	2000      	movs	r0, #0
    5220:	4b1b      	ldr	r3, [pc, #108]	; (5290 <m2m_wifi_init+0x1e8>)
    5222:	4798      	blx	r3
    5224:	e002      	b.n	522c <m2m_wifi_init+0x184>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    5226:	46c0      	nop			; (mov r8, r8)
    5228:	e000      	b.n	522c <m2m_wifi_init+0x184>
	goto _EXIT0;
    522a:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    522c:	2337      	movs	r3, #55	; 0x37
    522e:	18fb      	adds	r3, r7, r3
    5230:	781b      	ldrb	r3, [r3, #0]
    5232:	b25b      	sxtb	r3, r3
}
    5234:	0018      	movs	r0, r3
    5236:	46bd      	mov	sp, r7
    5238:	b00f      	add	sp, #60	; 0x3c
    523a:	bd90      	pop	{r4, r7, pc}
    523c:	20000224 	.word	0x20000224
    5240:	20000221 	.word	0x20000221
    5244:	000063dd 	.word	0x000063dd
    5248:	00004149 	.word	0x00004149
    524c:	00004d05 	.word	0x00004d05
    5250:	00004c49 	.word	0x00004c49
    5254:	00006211 	.word	0x00006211
    5258:	000197d4 	.word	0x000197d4
    525c:	00013e4d 	.word	0x00013e4d
    5260:	00019968 	.word	0x00019968
    5264:	00013e81 	.word	0x00013e81
    5268:	00019990 	.word	0x00019990
    526c:	000199ac 	.word	0x000199ac
    5270:	000199d0 	.word	0x000199d0
    5274:	000199e8 	.word	0x000199e8
    5278:	000199f4 	.word	0x000199f4
    527c:	00019a00 	.word	0x00019a00
    5280:	00019b94 	.word	0x00019b94
    5284:	00019800 	.word	0x00019800
    5288:	00019a18 	.word	0x00019a18
    528c:	00013f69 	.word	0x00013f69
    5290:	00006571 	.word	0x00006571

00005294 <m2m_wifi_deinit>:

sint8  m2m_wifi_deinit(void * arg)
{
    5294:	b580      	push	{r7, lr}
    5296:	b082      	sub	sp, #8
    5298:	af00      	add	r7, sp, #0
    529a:	6078      	str	r0, [r7, #4]

	hif_deinit(NULL);
    529c:	2000      	movs	r0, #0
    529e:	4b05      	ldr	r3, [pc, #20]	; (52b4 <m2m_wifi_deinit+0x20>)
    52a0:	4798      	blx	r3

	nm_drv_deinit(NULL);
    52a2:	2000      	movs	r0, #0
    52a4:	4b04      	ldr	r3, [pc, #16]	; (52b8 <m2m_wifi_deinit+0x24>)
    52a6:	4798      	blx	r3

	return M2M_SUCCESS;
    52a8:	2300      	movs	r3, #0
}
    52aa:	0018      	movs	r0, r3
    52ac:	46bd      	mov	sp, r7
    52ae:	b002      	add	sp, #8
    52b0:	bd80      	pop	{r7, pc}
    52b2:	46c0      	nop			; (mov r8, r8)
    52b4:	00004191 	.word	0x00004191
    52b8:	00006571 	.word	0x00006571

000052bc <m2m_wifi_handle_events>:


sint8 m2m_wifi_handle_events(void * arg)
{
    52bc:	b580      	push	{r7, lr}
    52be:	b082      	sub	sp, #8
    52c0:	af00      	add	r7, sp, #0
    52c2:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    52c4:	4b03      	ldr	r3, [pc, #12]	; (52d4 <m2m_wifi_handle_events+0x18>)
    52c6:	4798      	blx	r3
    52c8:	0003      	movs	r3, r0
}
    52ca:	0018      	movs	r0, r3
    52cc:	46bd      	mov	sp, r7
    52ce:	b002      	add	sp, #8
    52d0:	bd80      	pop	{r7, pc}
    52d2:	46c0      	nop			; (mov r8, r8)
    52d4:	00004a39 	.word	0x00004a39

000052d8 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    52d8:	b590      	push	{r4, r7, lr}
    52da:	b087      	sub	sp, #28
    52dc:	af02      	add	r7, sp, #8
    52de:	60f8      	str	r0, [r7, #12]
    52e0:	0008      	movs	r0, r1
    52e2:	0011      	movs	r1, r2
    52e4:	607b      	str	r3, [r7, #4]
    52e6:	230b      	movs	r3, #11
    52e8:	18fb      	adds	r3, r7, r3
    52ea:	1c02      	adds	r2, r0, #0
    52ec:	701a      	strb	r2, [r3, #0]
    52ee:	230a      	movs	r3, #10
    52f0:	18fb      	adds	r3, r7, r3
    52f2:	1c0a      	adds	r2, r1, #0
    52f4:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    52f6:	687c      	ldr	r4, [r7, #4]
    52f8:	230a      	movs	r3, #10
    52fa:	18fb      	adds	r3, r7, r3
    52fc:	781a      	ldrb	r2, [r3, #0]
    52fe:	230b      	movs	r3, #11
    5300:	18fb      	adds	r3, r7, r3
    5302:	7819      	ldrb	r1, [r3, #0]
    5304:	68f8      	ldr	r0, [r7, #12]
    5306:	2300      	movs	r3, #0
    5308:	9301      	str	r3, [sp, #4]
    530a:	2320      	movs	r3, #32
    530c:	18fb      	adds	r3, r7, r3
    530e:	881b      	ldrh	r3, [r3, #0]
    5310:	9300      	str	r3, [sp, #0]
    5312:	0023      	movs	r3, r4
    5314:	4c03      	ldr	r4, [pc, #12]	; (5324 <m2m_wifi_connect+0x4c>)
    5316:	47a0      	blx	r4
    5318:	0003      	movs	r3, r0
}
    531a:	0018      	movs	r0, r3
    531c:	46bd      	mov	sp, r7
    531e:	b005      	add	sp, #20
    5320:	bd90      	pop	{r4, r7, pc}
    5322:	46c0      	nop			; (mov r8, r8)
    5324:	00005329 	.word	0x00005329

00005328 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    5328:	b5b0      	push	{r4, r5, r7, lr}
    532a:	b0aa      	sub	sp, #168	; 0xa8
    532c:	af04      	add	r7, sp, #16
    532e:	60f8      	str	r0, [r7, #12]
    5330:	0008      	movs	r0, r1
    5332:	0011      	movs	r1, r2
    5334:	607b      	str	r3, [r7, #4]
    5336:	230b      	movs	r3, #11
    5338:	18fb      	adds	r3, r7, r3
    533a:	1c02      	adds	r2, r0, #0
    533c:	701a      	strb	r2, [r3, #0]
    533e:	230a      	movs	r3, #10
    5340:	18fb      	adds	r3, r7, r3
    5342:	1c0a      	adds	r2, r1, #0
    5344:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    5346:	2397      	movs	r3, #151	; 0x97
    5348:	18fb      	adds	r3, r7, r3
    534a:	2200      	movs	r2, #0
    534c:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    534e:	230a      	movs	r3, #10
    5350:	18fb      	adds	r3, r7, r3
    5352:	781b      	ldrb	r3, [r3, #0]
    5354:	2b01      	cmp	r3, #1
    5356:	d100      	bne.n	535a <m2m_wifi_connect_sc+0x32>
    5358:	e083      	b.n	5462 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    535a:	687b      	ldr	r3, [r7, #4]
    535c:	2b00      	cmp	r3, #0
    535e:	d111      	bne.n	5384 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    5360:	4adb      	ldr	r2, [pc, #876]	; (56d0 <m2m_wifi_connect_sc+0x3a8>)
    5362:	49dc      	ldr	r1, [pc, #880]	; (56d4 <m2m_wifi_connect_sc+0x3ac>)
    5364:	4bdc      	ldr	r3, [pc, #880]	; (56d8 <m2m_wifi_connect_sc+0x3b0>)
    5366:	0018      	movs	r0, r3
    5368:	4bdc      	ldr	r3, [pc, #880]	; (56dc <m2m_wifi_connect_sc+0x3b4>)
    536a:	4798      	blx	r3
    536c:	4bdc      	ldr	r3, [pc, #880]	; (56e0 <m2m_wifi_connect_sc+0x3b8>)
    536e:	0018      	movs	r0, r3
    5370:	4bdc      	ldr	r3, [pc, #880]	; (56e4 <m2m_wifi_connect_sc+0x3bc>)
    5372:	4798      	blx	r3
    5374:	200d      	movs	r0, #13
    5376:	4bdc      	ldr	r3, [pc, #880]	; (56e8 <m2m_wifi_connect_sc+0x3c0>)
    5378:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    537a:	2397      	movs	r3, #151	; 0x97
    537c:	18fb      	adds	r3, r7, r3
    537e:	22f4      	movs	r2, #244	; 0xf4
    5380:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    5382:	e1f5      	b.n	5770 <m2m_wifi_connect_sc+0x448>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    5384:	230a      	movs	r3, #10
    5386:	18fb      	adds	r3, r7, r3
    5388:	781b      	ldrb	r3, [r3, #0]
    538a:	2b02      	cmp	r3, #2
    538c:	d169      	bne.n	5462 <m2m_wifi_connect_sc+0x13a>
    538e:	687b      	ldr	r3, [r7, #4]
    5390:	0018      	movs	r0, r3
    5392:	4bd6      	ldr	r3, [pc, #856]	; (56ec <m2m_wifi_connect_sc+0x3c4>)
    5394:	4798      	blx	r3
    5396:	0003      	movs	r3, r0
    5398:	2b40      	cmp	r3, #64	; 0x40
    539a:	d162      	bne.n	5462 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    539c:	2396      	movs	r3, #150	; 0x96
    539e:	18fb      	adds	r3, r7, r3
    53a0:	2200      	movs	r2, #0
    53a2:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    53a4:	687b      	ldr	r3, [r7, #4]
    53a6:	2290      	movs	r2, #144	; 0x90
    53a8:	18ba      	adds	r2, r7, r2
    53aa:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    53ac:	e054      	b.n	5458 <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    53ae:	2396      	movs	r3, #150	; 0x96
    53b0:	18fb      	adds	r3, r7, r3
    53b2:	781b      	ldrb	r3, [r3, #0]
    53b4:	2290      	movs	r2, #144	; 0x90
    53b6:	18ba      	adds	r2, r7, r2
    53b8:	6812      	ldr	r2, [r2, #0]
    53ba:	18d3      	adds	r3, r2, r3
    53bc:	781b      	ldrb	r3, [r3, #0]
    53be:	2b2f      	cmp	r3, #47	; 0x2f
    53c0:	d931      	bls.n	5426 <m2m_wifi_connect_sc+0xfe>
    53c2:	2396      	movs	r3, #150	; 0x96
    53c4:	18fb      	adds	r3, r7, r3
    53c6:	781b      	ldrb	r3, [r3, #0]
    53c8:	2290      	movs	r2, #144	; 0x90
    53ca:	18ba      	adds	r2, r7, r2
    53cc:	6812      	ldr	r2, [r2, #0]
    53ce:	18d3      	adds	r3, r2, r3
    53d0:	781b      	ldrb	r3, [r3, #0]
    53d2:	2b39      	cmp	r3, #57	; 0x39
    53d4:	d909      	bls.n	53ea <m2m_wifi_connect_sc+0xc2>
    53d6:	2396      	movs	r3, #150	; 0x96
    53d8:	18fb      	adds	r3, r7, r3
    53da:	781b      	ldrb	r3, [r3, #0]
    53dc:	2290      	movs	r2, #144	; 0x90
    53de:	18ba      	adds	r2, r7, r2
    53e0:	6812      	ldr	r2, [r2, #0]
    53e2:	18d3      	adds	r3, r2, r3
    53e4:	781b      	ldrb	r3, [r3, #0]
    53e6:	2b40      	cmp	r3, #64	; 0x40
    53e8:	d91d      	bls.n	5426 <m2m_wifi_connect_sc+0xfe>
    53ea:	2396      	movs	r3, #150	; 0x96
    53ec:	18fb      	adds	r3, r7, r3
    53ee:	781b      	ldrb	r3, [r3, #0]
    53f0:	2290      	movs	r2, #144	; 0x90
    53f2:	18ba      	adds	r2, r7, r2
    53f4:	6812      	ldr	r2, [r2, #0]
    53f6:	18d3      	adds	r3, r2, r3
    53f8:	781b      	ldrb	r3, [r3, #0]
    53fa:	2b46      	cmp	r3, #70	; 0x46
    53fc:	d909      	bls.n	5412 <m2m_wifi_connect_sc+0xea>
    53fe:	2396      	movs	r3, #150	; 0x96
    5400:	18fb      	adds	r3, r7, r3
    5402:	781b      	ldrb	r3, [r3, #0]
    5404:	2290      	movs	r2, #144	; 0x90
    5406:	18ba      	adds	r2, r7, r2
    5408:	6812      	ldr	r2, [r2, #0]
    540a:	18d3      	adds	r3, r2, r3
    540c:	781b      	ldrb	r3, [r3, #0]
    540e:	2b60      	cmp	r3, #96	; 0x60
    5410:	d909      	bls.n	5426 <m2m_wifi_connect_sc+0xfe>
    5412:	2396      	movs	r3, #150	; 0x96
    5414:	18fb      	adds	r3, r7, r3
    5416:	781b      	ldrb	r3, [r3, #0]
    5418:	2290      	movs	r2, #144	; 0x90
    541a:	18ba      	adds	r2, r7, r2
    541c:	6812      	ldr	r2, [r2, #0]
    541e:	18d3      	adds	r3, r2, r3
    5420:	781b      	ldrb	r3, [r3, #0]
    5422:	2b66      	cmp	r3, #102	; 0x66
    5424:	d911      	bls.n	544a <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    5426:	4ab2      	ldr	r2, [pc, #712]	; (56f0 <m2m_wifi_connect_sc+0x3c8>)
    5428:	49aa      	ldr	r1, [pc, #680]	; (56d4 <m2m_wifi_connect_sc+0x3ac>)
    542a:	4bab      	ldr	r3, [pc, #684]	; (56d8 <m2m_wifi_connect_sc+0x3b0>)
    542c:	0018      	movs	r0, r3
    542e:	4bab      	ldr	r3, [pc, #684]	; (56dc <m2m_wifi_connect_sc+0x3b4>)
    5430:	4798      	blx	r3
    5432:	4bb0      	ldr	r3, [pc, #704]	; (56f4 <m2m_wifi_connect_sc+0x3cc>)
    5434:	0018      	movs	r0, r3
    5436:	4bab      	ldr	r3, [pc, #684]	; (56e4 <m2m_wifi_connect_sc+0x3bc>)
    5438:	4798      	blx	r3
    543a:	200d      	movs	r0, #13
    543c:	4baa      	ldr	r3, [pc, #680]	; (56e8 <m2m_wifi_connect_sc+0x3c0>)
    543e:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    5440:	2397      	movs	r3, #151	; 0x97
    5442:	18fb      	adds	r3, r7, r3
    5444:	22f4      	movs	r2, #244	; 0xf4
    5446:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    5448:	e192      	b.n	5770 <m2m_wifi_connect_sc+0x448>
				}
				i++;
    544a:	2396      	movs	r3, #150	; 0x96
    544c:	18fb      	adds	r3, r7, r3
    544e:	781a      	ldrb	r2, [r3, #0]
    5450:	2396      	movs	r3, #150	; 0x96
    5452:	18fb      	adds	r3, r7, r3
    5454:	3201      	adds	r2, #1
    5456:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    5458:	2396      	movs	r3, #150	; 0x96
    545a:	18fb      	adds	r3, r7, r3
    545c:	781b      	ldrb	r3, [r3, #0]
    545e:	2b3f      	cmp	r3, #63	; 0x3f
    5460:	d9a5      	bls.n	53ae <m2m_wifi_connect_sc+0x86>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    5462:	230b      	movs	r3, #11
    5464:	18fb      	adds	r3, r7, r3
    5466:	781b      	ldrb	r3, [r3, #0]
    5468:	2b00      	cmp	r3, #0
    546a:	d004      	beq.n	5476 <m2m_wifi_connect_sc+0x14e>
    546c:	230b      	movs	r3, #11
    546e:	18fb      	adds	r3, r7, r3
    5470:	781b      	ldrb	r3, [r3, #0]
    5472:	2b20      	cmp	r3, #32
    5474:	d911      	bls.n	549a <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    5476:	4aa0      	ldr	r2, [pc, #640]	; (56f8 <m2m_wifi_connect_sc+0x3d0>)
    5478:	4996      	ldr	r1, [pc, #600]	; (56d4 <m2m_wifi_connect_sc+0x3ac>)
    547a:	4b97      	ldr	r3, [pc, #604]	; (56d8 <m2m_wifi_connect_sc+0x3b0>)
    547c:	0018      	movs	r0, r3
    547e:	4b97      	ldr	r3, [pc, #604]	; (56dc <m2m_wifi_connect_sc+0x3b4>)
    5480:	4798      	blx	r3
    5482:	4b9e      	ldr	r3, [pc, #632]	; (56fc <m2m_wifi_connect_sc+0x3d4>)
    5484:	0018      	movs	r0, r3
    5486:	4b97      	ldr	r3, [pc, #604]	; (56e4 <m2m_wifi_connect_sc+0x3bc>)
    5488:	4798      	blx	r3
    548a:	200d      	movs	r0, #13
    548c:	4b96      	ldr	r3, [pc, #600]	; (56e8 <m2m_wifi_connect_sc+0x3c0>)
    548e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    5490:	2397      	movs	r3, #151	; 0x97
    5492:	18fb      	adds	r3, r7, r3
    5494:	22f4      	movs	r2, #244	; 0xf4
    5496:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    5498:	e16a      	b.n	5770 <m2m_wifi_connect_sc+0x448>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    549a:	23a8      	movs	r3, #168	; 0xa8
    549c:	18fb      	adds	r3, r7, r3
    549e:	881b      	ldrh	r3, [r3, #0]
    54a0:	2b00      	cmp	r3, #0
    54a2:	d004      	beq.n	54ae <m2m_wifi_connect_sc+0x186>
    54a4:	23a8      	movs	r3, #168	; 0xa8
    54a6:	18fb      	adds	r3, r7, r3
    54a8:	881b      	ldrh	r3, [r3, #0]
    54aa:	2b0e      	cmp	r3, #14
    54ac:	d916      	bls.n	54dc <m2m_wifi_connect_sc+0x1b4>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    54ae:	23a8      	movs	r3, #168	; 0xa8
    54b0:	18fb      	adds	r3, r7, r3
    54b2:	881b      	ldrh	r3, [r3, #0]
    54b4:	2bff      	cmp	r3, #255	; 0xff
    54b6:	d011      	beq.n	54dc <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("CH INVALID\n");
    54b8:	4a91      	ldr	r2, [pc, #580]	; (5700 <m2m_wifi_connect_sc+0x3d8>)
    54ba:	4986      	ldr	r1, [pc, #536]	; (56d4 <m2m_wifi_connect_sc+0x3ac>)
    54bc:	4b86      	ldr	r3, [pc, #536]	; (56d8 <m2m_wifi_connect_sc+0x3b0>)
    54be:	0018      	movs	r0, r3
    54c0:	4b86      	ldr	r3, [pc, #536]	; (56dc <m2m_wifi_connect_sc+0x3b4>)
    54c2:	4798      	blx	r3
    54c4:	4b8f      	ldr	r3, [pc, #572]	; (5704 <m2m_wifi_connect_sc+0x3dc>)
    54c6:	0018      	movs	r0, r3
    54c8:	4b86      	ldr	r3, [pc, #536]	; (56e4 <m2m_wifi_connect_sc+0x3bc>)
    54ca:	4798      	blx	r3
    54cc:	200d      	movs	r0, #13
    54ce:	4b86      	ldr	r3, [pc, #536]	; (56e8 <m2m_wifi_connect_sc+0x3c0>)
    54d0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    54d2:	2397      	movs	r3, #151	; 0x97
    54d4:	18fb      	adds	r3, r7, r3
    54d6:	22f4      	movs	r2, #244	; 0xf4
    54d8:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    54da:	e149      	b.n	5770 <m2m_wifi_connect_sc+0x448>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    54dc:	230b      	movs	r3, #11
    54de:	18fb      	adds	r3, r7, r3
    54e0:	781a      	ldrb	r2, [r3, #0]
    54e2:	68f9      	ldr	r1, [r7, #12]
    54e4:	2314      	movs	r3, #20
    54e6:	18fb      	adds	r3, r7, r3
    54e8:	3346      	adds	r3, #70	; 0x46
    54ea:	0018      	movs	r0, r3
    54ec:	4b86      	ldr	r3, [pc, #536]	; (5708 <m2m_wifi_connect_sc+0x3e0>)
    54ee:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    54f0:	230b      	movs	r3, #11
    54f2:	18fb      	adds	r3, r7, r3
    54f4:	781b      	ldrb	r3, [r3, #0]
    54f6:	2214      	movs	r2, #20
    54f8:	18ba      	adds	r2, r7, r2
    54fa:	2146      	movs	r1, #70	; 0x46
    54fc:	18d3      	adds	r3, r2, r3
    54fe:	185b      	adds	r3, r3, r1
    5500:	2200      	movs	r2, #0
    5502:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    5504:	2314      	movs	r3, #20
    5506:	18fb      	adds	r3, r7, r3
    5508:	22a8      	movs	r2, #168	; 0xa8
    550a:	18ba      	adds	r2, r7, r2
    550c:	2144      	movs	r1, #68	; 0x44
    550e:	8812      	ldrh	r2, [r2, #0]
    5510:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    5512:	23ac      	movs	r3, #172	; 0xac
    5514:	18fb      	adds	r3, r7, r3
    5516:	781b      	ldrb	r3, [r3, #0]
    5518:	1e5a      	subs	r2, r3, #1
    551a:	4193      	sbcs	r3, r2
    551c:	b2db      	uxtb	r3, r3
    551e:	0019      	movs	r1, r3
    5520:	2314      	movs	r3, #20
    5522:	18fb      	adds	r3, r7, r3
    5524:	2267      	movs	r2, #103	; 0x67
    5526:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    5528:	2314      	movs	r3, #20
    552a:	18fb      	adds	r3, r7, r3
    552c:	228c      	movs	r2, #140	; 0x8c
    552e:	18ba      	adds	r2, r7, r2
    5530:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    5532:	238c      	movs	r3, #140	; 0x8c
    5534:	18fb      	adds	r3, r7, r3
    5536:	681b      	ldr	r3, [r3, #0]
    5538:	220a      	movs	r2, #10
    553a:	18ba      	adds	r2, r7, r2
    553c:	2141      	movs	r1, #65	; 0x41
    553e:	7812      	ldrb	r2, [r2, #0]
    5540:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    5542:	230a      	movs	r3, #10
    5544:	18fb      	adds	r3, r7, r3
    5546:	781b      	ldrb	r3, [r3, #0]
    5548:	2b03      	cmp	r3, #3
    554a:	d000      	beq.n	554e <m2m_wifi_connect_sc+0x226>
    554c:	e07b      	b.n	5646 <m2m_wifi_connect_sc+0x31e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    554e:	687b      	ldr	r3, [r7, #4]
    5550:	2288      	movs	r2, #136	; 0x88
    5552:	18ba      	adds	r2, r7, r2
    5554:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    5556:	238c      	movs	r3, #140	; 0x8c
    5558:	18fb      	adds	r3, r7, r3
    555a:	681b      	ldr	r3, [r3, #0]
    555c:	2284      	movs	r2, #132	; 0x84
    555e:	18ba      	adds	r2, r7, r2
    5560:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    5562:	2388      	movs	r3, #136	; 0x88
    5564:	18fb      	adds	r3, r7, r3
    5566:	681b      	ldr	r3, [r3, #0]
    5568:	781b      	ldrb	r3, [r3, #0]
    556a:	3b01      	subs	r3, #1
    556c:	b2da      	uxtb	r2, r3
    556e:	2384      	movs	r3, #132	; 0x84
    5570:	18fb      	adds	r3, r7, r3
    5572:	681b      	ldr	r3, [r3, #0]
    5574:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    5576:	2384      	movs	r3, #132	; 0x84
    5578:	18fb      	adds	r3, r7, r3
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	781b      	ldrb	r3, [r3, #0]
    557e:	2b03      	cmp	r3, #3
    5580:	d917      	bls.n	55b2 <m2m_wifi_connect_sc+0x28a>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    5582:	4a62      	ldr	r2, [pc, #392]	; (570c <m2m_wifi_connect_sc+0x3e4>)
    5584:	4953      	ldr	r1, [pc, #332]	; (56d4 <m2m_wifi_connect_sc+0x3ac>)
    5586:	4b54      	ldr	r3, [pc, #336]	; (56d8 <m2m_wifi_connect_sc+0x3b0>)
    5588:	0018      	movs	r0, r3
    558a:	4b54      	ldr	r3, [pc, #336]	; (56dc <m2m_wifi_connect_sc+0x3b4>)
    558c:	4798      	blx	r3
    558e:	2384      	movs	r3, #132	; 0x84
    5590:	18fb      	adds	r3, r7, r3
    5592:	681b      	ldr	r3, [r3, #0]
    5594:	781b      	ldrb	r3, [r3, #0]
    5596:	001a      	movs	r2, r3
    5598:	4b5d      	ldr	r3, [pc, #372]	; (5710 <m2m_wifi_connect_sc+0x3e8>)
    559a:	0011      	movs	r1, r2
    559c:	0018      	movs	r0, r3
    559e:	4b4f      	ldr	r3, [pc, #316]	; (56dc <m2m_wifi_connect_sc+0x3b4>)
    55a0:	4798      	blx	r3
    55a2:	200d      	movs	r0, #13
    55a4:	4b50      	ldr	r3, [pc, #320]	; (56e8 <m2m_wifi_connect_sc+0x3c0>)
    55a6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    55a8:	2397      	movs	r3, #151	; 0x97
    55aa:	18fb      	adds	r3, r7, r3
    55ac:	22f4      	movs	r2, #244	; 0xf4
    55ae:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    55b0:	e0de      	b.n	5770 <m2m_wifi_connect_sc+0x448>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    55b2:	2388      	movs	r3, #136	; 0x88
    55b4:	18fb      	adds	r3, r7, r3
    55b6:	681b      	ldr	r3, [r3, #0]
    55b8:	785b      	ldrb	r3, [r3, #1]
    55ba:	3b01      	subs	r3, #1
    55bc:	b2da      	uxtb	r2, r3
    55be:	2384      	movs	r3, #132	; 0x84
    55c0:	18fb      	adds	r3, r7, r3
    55c2:	681b      	ldr	r3, [r3, #0]
    55c4:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    55c6:	2384      	movs	r3, #132	; 0x84
    55c8:	18fb      	adds	r3, r7, r3
    55ca:	681b      	ldr	r3, [r3, #0]
    55cc:	785b      	ldrb	r3, [r3, #1]
    55ce:	2b0a      	cmp	r3, #10
    55d0:	d01e      	beq.n	5610 <m2m_wifi_connect_sc+0x2e8>
    55d2:	2384      	movs	r3, #132	; 0x84
    55d4:	18fb      	adds	r3, r7, r3
    55d6:	681b      	ldr	r3, [r3, #0]
    55d8:	785b      	ldrb	r3, [r3, #1]
    55da:	2b1a      	cmp	r3, #26
    55dc:	d018      	beq.n	5610 <m2m_wifi_connect_sc+0x2e8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    55de:	2396      	movs	r3, #150	; 0x96
    55e0:	009a      	lsls	r2, r3, #2
    55e2:	493c      	ldr	r1, [pc, #240]	; (56d4 <m2m_wifi_connect_sc+0x3ac>)
    55e4:	4b3c      	ldr	r3, [pc, #240]	; (56d8 <m2m_wifi_connect_sc+0x3b0>)
    55e6:	0018      	movs	r0, r3
    55e8:	4b3c      	ldr	r3, [pc, #240]	; (56dc <m2m_wifi_connect_sc+0x3b4>)
    55ea:	4798      	blx	r3
    55ec:	2384      	movs	r3, #132	; 0x84
    55ee:	18fb      	adds	r3, r7, r3
    55f0:	681b      	ldr	r3, [r3, #0]
    55f2:	785b      	ldrb	r3, [r3, #1]
    55f4:	001a      	movs	r2, r3
    55f6:	4b47      	ldr	r3, [pc, #284]	; (5714 <m2m_wifi_connect_sc+0x3ec>)
    55f8:	0011      	movs	r1, r2
    55fa:	0018      	movs	r0, r3
    55fc:	4b37      	ldr	r3, [pc, #220]	; (56dc <m2m_wifi_connect_sc+0x3b4>)
    55fe:	4798      	blx	r3
    5600:	200d      	movs	r0, #13
    5602:	4b39      	ldr	r3, [pc, #228]	; (56e8 <m2m_wifi_connect_sc+0x3c0>)
    5604:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    5606:	2397      	movs	r3, #151	; 0x97
    5608:	18fb      	adds	r3, r7, r3
    560a:	22f4      	movs	r2, #244	; 0xf4
    560c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    560e:	e0af      	b.n	5770 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    5610:	2384      	movs	r3, #132	; 0x84
    5612:	18fb      	adds	r3, r7, r3
    5614:	681b      	ldr	r3, [r3, #0]
    5616:	1c98      	adds	r0, r3, #2
    5618:	2388      	movs	r3, #136	; 0x88
    561a:	18fb      	adds	r3, r7, r3
    561c:	681b      	ldr	r3, [r3, #0]
    561e:	1c99      	adds	r1, r3, #2
    5620:	2388      	movs	r3, #136	; 0x88
    5622:	18fb      	adds	r3, r7, r3
    5624:	681b      	ldr	r3, [r3, #0]
    5626:	785b      	ldrb	r3, [r3, #1]
    5628:	001a      	movs	r2, r3
    562a:	4b37      	ldr	r3, [pc, #220]	; (5708 <m2m_wifi_connect_sc+0x3e0>)
    562c:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    562e:	2388      	movs	r3, #136	; 0x88
    5630:	18fb      	adds	r3, r7, r3
    5632:	681b      	ldr	r3, [r3, #0]
    5634:	785b      	ldrb	r3, [r3, #1]
    5636:	001a      	movs	r2, r3
    5638:	2384      	movs	r3, #132	; 0x84
    563a:	18fb      	adds	r3, r7, r3
    563c:	681b      	ldr	r3, [r3, #0]
    563e:	189b      	adds	r3, r3, r2
    5640:	2200      	movs	r2, #0
    5642:	709a      	strb	r2, [r3, #2]
    5644:	e083      	b.n	574e <m2m_wifi_connect_sc+0x426>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    5646:	230a      	movs	r3, #10
    5648:	18fb      	adds	r3, r7, r3
    564a:	781b      	ldrb	r3, [r3, #0]
    564c:	2b02      	cmp	r3, #2
    564e:	d130      	bne.n	56b2 <m2m_wifi_connect_sc+0x38a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    5650:	2382      	movs	r3, #130	; 0x82
    5652:	18fc      	adds	r4, r7, r3
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	0018      	movs	r0, r3
    5658:	4b24      	ldr	r3, [pc, #144]	; (56ec <m2m_wifi_connect_sc+0x3c4>)
    565a:	4798      	blx	r3
    565c:	0003      	movs	r3, r0
    565e:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    5660:	2382      	movs	r3, #130	; 0x82
    5662:	18fb      	adds	r3, r7, r3
    5664:	881b      	ldrh	r3, [r3, #0]
    5666:	2b00      	cmp	r3, #0
    5668:	d004      	beq.n	5674 <m2m_wifi_connect_sc+0x34c>
    566a:	2382      	movs	r3, #130	; 0x82
    566c:	18fb      	adds	r3, r7, r3
    566e:	881b      	ldrh	r3, [r3, #0]
    5670:	2b40      	cmp	r3, #64	; 0x40
    5672:	d911      	bls.n	5698 <m2m_wifi_connect_sc+0x370>
		{
			M2M_ERR("Incorrect PSK key length\n");
    5674:	4a28      	ldr	r2, [pc, #160]	; (5718 <m2m_wifi_connect_sc+0x3f0>)
    5676:	4917      	ldr	r1, [pc, #92]	; (56d4 <m2m_wifi_connect_sc+0x3ac>)
    5678:	4b17      	ldr	r3, [pc, #92]	; (56d8 <m2m_wifi_connect_sc+0x3b0>)
    567a:	0018      	movs	r0, r3
    567c:	4b17      	ldr	r3, [pc, #92]	; (56dc <m2m_wifi_connect_sc+0x3b4>)
    567e:	4798      	blx	r3
    5680:	4b26      	ldr	r3, [pc, #152]	; (571c <m2m_wifi_connect_sc+0x3f4>)
    5682:	0018      	movs	r0, r3
    5684:	4b17      	ldr	r3, [pc, #92]	; (56e4 <m2m_wifi_connect_sc+0x3bc>)
    5686:	4798      	blx	r3
    5688:	200d      	movs	r0, #13
    568a:	4b17      	ldr	r3, [pc, #92]	; (56e8 <m2m_wifi_connect_sc+0x3c0>)
    568c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    568e:	2397      	movs	r3, #151	; 0x97
    5690:	18fb      	adds	r3, r7, r3
    5692:	22f4      	movs	r2, #244	; 0xf4
    5694:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    5696:	e06b      	b.n	5770 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    5698:	238c      	movs	r3, #140	; 0x8c
    569a:	18fb      	adds	r3, r7, r3
    569c:	6818      	ldr	r0, [r3, #0]
    569e:	2382      	movs	r3, #130	; 0x82
    56a0:	18fb      	adds	r3, r7, r3
    56a2:	881b      	ldrh	r3, [r3, #0]
    56a4:	3301      	adds	r3, #1
    56a6:	001a      	movs	r2, r3
    56a8:	687b      	ldr	r3, [r7, #4]
    56aa:	0019      	movs	r1, r3
    56ac:	4b16      	ldr	r3, [pc, #88]	; (5708 <m2m_wifi_connect_sc+0x3e0>)
    56ae:	4798      	blx	r3
    56b0:	e04d      	b.n	574e <m2m_wifi_connect_sc+0x426>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    56b2:	230a      	movs	r3, #10
    56b4:	18fb      	adds	r3, r7, r3
    56b6:	781b      	ldrb	r3, [r3, #0]
    56b8:	2b04      	cmp	r3, #4
    56ba:	d131      	bne.n	5720 <m2m_wifi_connect_sc+0x3f8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    56bc:	238c      	movs	r3, #140	; 0x8c
    56be:	18fb      	adds	r3, r7, r3
    56c0:	681b      	ldr	r3, [r3, #0]
    56c2:	6879      	ldr	r1, [r7, #4]
    56c4:	223e      	movs	r2, #62	; 0x3e
    56c6:	0018      	movs	r0, r3
    56c8:	4b0f      	ldr	r3, [pc, #60]	; (5708 <m2m_wifi_connect_sc+0x3e0>)
    56ca:	4798      	blx	r3
    56cc:	e03f      	b.n	574e <m2m_wifi_connect_sc+0x426>
    56ce:	46c0      	nop			; (mov r8, r8)
    56d0:	0000021b 	.word	0x0000021b
    56d4:	00019ba4 	.word	0x00019ba4
    56d8:	00019800 	.word	0x00019800
    56dc:	00013e4d 	.word	0x00013e4d
    56e0:	00019a34 	.word	0x00019a34
    56e4:	00013f69 	.word	0x00013f69
    56e8:	00013e81 	.word	0x00013e81
    56ec:	00003f6f 	.word	0x00003f6f
    56f0:	00000227 	.word	0x00000227
    56f4:	00019a48 	.word	0x00019a48
    56f8:	00000231 	.word	0x00000231
    56fc:	00019a54 	.word	0x00019a54
    5700:	0000023a 	.word	0x0000023a
    5704:	00019a68 	.word	0x00019a68
    5708:	00003ef5 	.word	0x00003ef5
    570c:	00000251 	.word	0x00000251
    5710:	00019a74 	.word	0x00019a74
    5714:	00019a90 	.word	0x00019a90
    5718:	00000267 	.word	0x00000267
    571c:	00019aac 	.word	0x00019aac
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    5720:	230a      	movs	r3, #10
    5722:	18fb      	adds	r3, r7, r3
    5724:	781b      	ldrb	r3, [r3, #0]
    5726:	2b01      	cmp	r3, #1
    5728:	d011      	beq.n	574e <m2m_wifi_connect_sc+0x426>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    572a:	4a15      	ldr	r2, [pc, #84]	; (5780 <m2m_wifi_connect_sc+0x458>)
    572c:	4915      	ldr	r1, [pc, #84]	; (5784 <m2m_wifi_connect_sc+0x45c>)
    572e:	4b16      	ldr	r3, [pc, #88]	; (5788 <m2m_wifi_connect_sc+0x460>)
    5730:	0018      	movs	r0, r3
    5732:	4b16      	ldr	r3, [pc, #88]	; (578c <m2m_wifi_connect_sc+0x464>)
    5734:	4798      	blx	r3
    5736:	4b16      	ldr	r3, [pc, #88]	; (5790 <m2m_wifi_connect_sc+0x468>)
    5738:	0018      	movs	r0, r3
    573a:	4b16      	ldr	r3, [pc, #88]	; (5794 <m2m_wifi_connect_sc+0x46c>)
    573c:	4798      	blx	r3
    573e:	200d      	movs	r0, #13
    5740:	4b15      	ldr	r3, [pc, #84]	; (5798 <m2m_wifi_connect_sc+0x470>)
    5742:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    5744:	2397      	movs	r3, #151	; 0x97
    5746:	18fb      	adds	r3, r7, r3
    5748:	22f4      	movs	r2, #244	; 0xf4
    574a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    574c:	e010      	b.n	5770 <m2m_wifi_connect_sc+0x448>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    574e:	2397      	movs	r3, #151	; 0x97
    5750:	18fc      	adds	r4, r7, r3
    5752:	2314      	movs	r3, #20
    5754:	18fa      	adds	r2, r7, r3
    5756:	2300      	movs	r3, #0
    5758:	9302      	str	r3, [sp, #8]
    575a:	2300      	movs	r3, #0
    575c:	9301      	str	r3, [sp, #4]
    575e:	2300      	movs	r3, #0
    5760:	9300      	str	r3, [sp, #0]
    5762:	236c      	movs	r3, #108	; 0x6c
    5764:	2128      	movs	r1, #40	; 0x28
    5766:	2001      	movs	r0, #1
    5768:	4d0c      	ldr	r5, [pc, #48]	; (579c <m2m_wifi_connect_sc+0x474>)
    576a:	47a8      	blx	r5
    576c:	0003      	movs	r3, r0
    576e:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    5770:	2397      	movs	r3, #151	; 0x97
    5772:	18fb      	adds	r3, r7, r3
    5774:	781b      	ldrb	r3, [r3, #0]
    5776:	b25b      	sxtb	r3, r3
}
    5778:	0018      	movs	r0, r3
    577a:	46bd      	mov	sp, r7
    577c:	b026      	add	sp, #152	; 0x98
    577e:	bdb0      	pop	{r4, r5, r7, pc}
    5780:	00000277 	.word	0x00000277
    5784:	00019ba4 	.word	0x00019ba4
    5788:	00019800 	.word	0x00019800
    578c:	00013e4d 	.word	0x00013e4d
    5790:	00019ac8 	.word	0x00019ac8
    5794:	00013f69 	.word	0x00013f69
    5798:	00013e81 	.word	0x00013e81
    579c:	000041d5 	.word	0x000041d5

000057a0 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    57a0:	b580      	push	{r7, lr}
    57a2:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    57a4:	2300      	movs	r3, #0
}
    57a6:	0018      	movs	r0, r3
    57a8:	46bd      	mov	sp, r7
    57aa:	bd80      	pop	{r7, pc}

000057ac <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    57ac:	b590      	push	{r4, r7, lr}
    57ae:	b087      	sub	sp, #28
    57b0:	af00      	add	r7, sp, #0
    57b2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    57b4:	2317      	movs	r3, #23
    57b6:	18fb      	adds	r3, r7, r3
    57b8:	2200      	movs	r2, #0
    57ba:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    57bc:	687b      	ldr	r3, [r7, #4]
    57be:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    57c0:	693b      	ldr	r3, [r7, #16]
    57c2:	2280      	movs	r2, #128	; 0x80
    57c4:	0052      	lsls	r2, r2, #1
    57c6:	4313      	orrs	r3, r2
    57c8:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    57ca:	693a      	ldr	r2, [r7, #16]
    57cc:	23a5      	movs	r3, #165	; 0xa5
    57ce:	015b      	lsls	r3, r3, #5
    57d0:	0011      	movs	r1, r2
    57d2:	0018      	movs	r0, r3
    57d4:	4b12      	ldr	r3, [pc, #72]	; (5820 <chip_apply_conf+0x74>)
    57d6:	4798      	blx	r3
		if(val32 != 0) {		
    57d8:	693b      	ldr	r3, [r7, #16]
    57da:	2b00      	cmp	r3, #0
    57dc:	d018      	beq.n	5810 <chip_apply_conf+0x64>
			uint32 reg = 0;
    57de:	2300      	movs	r3, #0
    57e0:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    57e2:	2317      	movs	r3, #23
    57e4:	18fc      	adds	r4, r7, r3
    57e6:	230c      	movs	r3, #12
    57e8:	18fa      	adds	r2, r7, r3
    57ea:	23a5      	movs	r3, #165	; 0xa5
    57ec:	015b      	lsls	r3, r3, #5
    57ee:	0011      	movs	r1, r2
    57f0:	0018      	movs	r0, r3
    57f2:	4b0c      	ldr	r3, [pc, #48]	; (5824 <chip_apply_conf+0x78>)
    57f4:	4798      	blx	r3
    57f6:	0003      	movs	r3, r0
    57f8:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    57fa:	2317      	movs	r3, #23
    57fc:	18fb      	adds	r3, r7, r3
    57fe:	781b      	ldrb	r3, [r3, #0]
    5800:	b25b      	sxtb	r3, r3
    5802:	2b00      	cmp	r3, #0
    5804:	d1e1      	bne.n	57ca <chip_apply_conf+0x1e>
				if(reg == val32)
    5806:	68fa      	ldr	r2, [r7, #12]
    5808:	693b      	ldr	r3, [r7, #16]
    580a:	429a      	cmp	r2, r3
    580c:	d002      	beq.n	5814 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    580e:	e7dc      	b.n	57ca <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    5810:	46c0      	nop			; (mov r8, r8)
    5812:	e000      	b.n	5816 <chip_apply_conf+0x6a>
					break;
    5814:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    5816:	2300      	movs	r3, #0
}
    5818:	0018      	movs	r0, r3
    581a:	46bd      	mov	sp, r7
    581c:	b007      	add	sp, #28
    581e:	bd90      	pop	{r4, r7, pc}
    5820:	00005ffd 	.word	0x00005ffd
    5824:	00005fd9 	.word	0x00005fd9

00005828 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    5828:	b590      	push	{r4, r7, lr}
    582a:	b083      	sub	sp, #12
    582c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    582e:	2300      	movs	r3, #0
    5830:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    5832:	1dfb      	adds	r3, r7, #7
    5834:	2200      	movs	r2, #0
    5836:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    5838:	1dfc      	adds	r4, r7, #7
    583a:	003b      	movs	r3, r7
    583c:	4a24      	ldr	r2, [pc, #144]	; (58d0 <enable_interrupts+0xa8>)
    583e:	0019      	movs	r1, r3
    5840:	0010      	movs	r0, r2
    5842:	4b24      	ldr	r3, [pc, #144]	; (58d4 <enable_interrupts+0xac>)
    5844:	4798      	blx	r3
    5846:	0003      	movs	r3, r0
    5848:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    584a:	1dfb      	adds	r3, r7, #7
    584c:	781b      	ldrb	r3, [r3, #0]
    584e:	b25b      	sxtb	r3, r3
    5850:	2b00      	cmp	r3, #0
    5852:	d131      	bne.n	58b8 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    5854:	683b      	ldr	r3, [r7, #0]
    5856:	2280      	movs	r2, #128	; 0x80
    5858:	0052      	lsls	r2, r2, #1
    585a:	4313      	orrs	r3, r2
    585c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    585e:	683b      	ldr	r3, [r7, #0]
    5860:	1dfc      	adds	r4, r7, #7
    5862:	4a1b      	ldr	r2, [pc, #108]	; (58d0 <enable_interrupts+0xa8>)
    5864:	0019      	movs	r1, r3
    5866:	0010      	movs	r0, r2
    5868:	4b1b      	ldr	r3, [pc, #108]	; (58d8 <enable_interrupts+0xb0>)
    586a:	4798      	blx	r3
    586c:	0003      	movs	r3, r0
    586e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    5870:	1dfb      	adds	r3, r7, #7
    5872:	781b      	ldrb	r3, [r3, #0]
    5874:	b25b      	sxtb	r3, r3
    5876:	2b00      	cmp	r3, #0
    5878:	d120      	bne.n	58bc <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    587a:	1dfc      	adds	r4, r7, #7
    587c:	003a      	movs	r2, r7
    587e:	23d0      	movs	r3, #208	; 0xd0
    5880:	015b      	lsls	r3, r3, #5
    5882:	0011      	movs	r1, r2
    5884:	0018      	movs	r0, r3
    5886:	4b13      	ldr	r3, [pc, #76]	; (58d4 <enable_interrupts+0xac>)
    5888:	4798      	blx	r3
    588a:	0003      	movs	r3, r0
    588c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    588e:	1dfb      	adds	r3, r7, #7
    5890:	781b      	ldrb	r3, [r3, #0]
    5892:	b25b      	sxtb	r3, r3
    5894:	2b00      	cmp	r3, #0
    5896:	d113      	bne.n	58c0 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    5898:	683b      	ldr	r3, [r7, #0]
    589a:	2280      	movs	r2, #128	; 0x80
    589c:	0252      	lsls	r2, r2, #9
    589e:	4313      	orrs	r3, r2
    58a0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    58a2:	683a      	ldr	r2, [r7, #0]
    58a4:	1dfc      	adds	r4, r7, #7
    58a6:	23d0      	movs	r3, #208	; 0xd0
    58a8:	015b      	lsls	r3, r3, #5
    58aa:	0011      	movs	r1, r2
    58ac:	0018      	movs	r0, r3
    58ae:	4b0a      	ldr	r3, [pc, #40]	; (58d8 <enable_interrupts+0xb0>)
    58b0:	4798      	blx	r3
    58b2:	0003      	movs	r3, r0
    58b4:	7023      	strb	r3, [r4, #0]
    58b6:	e004      	b.n	58c2 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    58b8:	46c0      	nop			; (mov r8, r8)
    58ba:	e002      	b.n	58c2 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    58bc:	46c0      	nop			; (mov r8, r8)
    58be:	e000      	b.n	58c2 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    58c0:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    58c2:	1dfb      	adds	r3, r7, #7
    58c4:	781b      	ldrb	r3, [r3, #0]
    58c6:	b25b      	sxtb	r3, r3
}
    58c8:	0018      	movs	r0, r3
    58ca:	46bd      	mov	sp, r7
    58cc:	b003      	add	sp, #12
    58ce:	bd90      	pop	{r4, r7, pc}
    58d0:	00001408 	.word	0x00001408
    58d4:	00005fd9 	.word	0x00005fd9
    58d8:	00005ffd 	.word	0x00005ffd

000058dc <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    58dc:	b580      	push	{r7, lr}
    58de:	b082      	sub	sp, #8
    58e0:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    58e2:	4b32      	ldr	r3, [pc, #200]	; (59ac <nmi_get_chipid+0xd0>)
    58e4:	681b      	ldr	r3, [r3, #0]
    58e6:	2b00      	cmp	r3, #0
    58e8:	d159      	bne.n	599e <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    58ea:	4a30      	ldr	r2, [pc, #192]	; (59ac <nmi_get_chipid+0xd0>)
    58ec:	2380      	movs	r3, #128	; 0x80
    58ee:	015b      	lsls	r3, r3, #5
    58f0:	0011      	movs	r1, r2
    58f2:	0018      	movs	r0, r3
    58f4:	4b2e      	ldr	r3, [pc, #184]	; (59b0 <nmi_get_chipid+0xd4>)
    58f6:	4798      	blx	r3
    58f8:	1e03      	subs	r3, r0, #0
    58fa:	d004      	beq.n	5906 <nmi_get_chipid+0x2a>
			chipid = 0;
    58fc:	4b2b      	ldr	r3, [pc, #172]	; (59ac <nmi_get_chipid+0xd0>)
    58fe:	2200      	movs	r2, #0
    5900:	601a      	str	r2, [r3, #0]
			return 0;
    5902:	2300      	movs	r3, #0
    5904:	e04d      	b.n	59a2 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    5906:	1d3b      	adds	r3, r7, #4
    5908:	4a2a      	ldr	r2, [pc, #168]	; (59b4 <nmi_get_chipid+0xd8>)
    590a:	0019      	movs	r1, r3
    590c:	0010      	movs	r0, r2
    590e:	4b28      	ldr	r3, [pc, #160]	; (59b0 <nmi_get_chipid+0xd4>)
    5910:	4798      	blx	r3
    5912:	1e03      	subs	r3, r0, #0
    5914:	d004      	beq.n	5920 <nmi_get_chipid+0x44>
			chipid = 0;
    5916:	4b25      	ldr	r3, [pc, #148]	; (59ac <nmi_get_chipid+0xd0>)
    5918:	2200      	movs	r2, #0
    591a:	601a      	str	r2, [r3, #0]
			return 0;
    591c:	2300      	movs	r3, #0
    591e:	e040      	b.n	59a2 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    5920:	4b22      	ldr	r3, [pc, #136]	; (59ac <nmi_get_chipid+0xd0>)
    5922:	681b      	ldr	r3, [r3, #0]
    5924:	4a24      	ldr	r2, [pc, #144]	; (59b8 <nmi_get_chipid+0xdc>)
    5926:	4293      	cmp	r3, r2
    5928:	d106      	bne.n	5938 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    592a:	687b      	ldr	r3, [r7, #4]
    592c:	2b01      	cmp	r3, #1
    592e:	d029      	beq.n	5984 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    5930:	4b1e      	ldr	r3, [pc, #120]	; (59ac <nmi_get_chipid+0xd0>)
    5932:	4a22      	ldr	r2, [pc, #136]	; (59bc <nmi_get_chipid+0xe0>)
    5934:	601a      	str	r2, [r3, #0]
    5936:	e025      	b.n	5984 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    5938:	4b1c      	ldr	r3, [pc, #112]	; (59ac <nmi_get_chipid+0xd0>)
    593a:	681b      	ldr	r3, [r3, #0]
    593c:	4a20      	ldr	r2, [pc, #128]	; (59c0 <nmi_get_chipid+0xe4>)
    593e:	4293      	cmp	r3, r2
    5940:	d10d      	bne.n	595e <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    5942:	687b      	ldr	r3, [r7, #4]
    5944:	2b03      	cmp	r3, #3
    5946:	d01d      	beq.n	5984 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    5948:	687b      	ldr	r3, [r7, #4]
    594a:	2b04      	cmp	r3, #4
    594c:	d103      	bne.n	5956 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    594e:	4b17      	ldr	r3, [pc, #92]	; (59ac <nmi_get_chipid+0xd0>)
    5950:	4a1c      	ldr	r2, [pc, #112]	; (59c4 <nmi_get_chipid+0xe8>)
    5952:	601a      	str	r2, [r3, #0]
    5954:	e016      	b.n	5984 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    5956:	4b15      	ldr	r3, [pc, #84]	; (59ac <nmi_get_chipid+0xd0>)
    5958:	4a1b      	ldr	r2, [pc, #108]	; (59c8 <nmi_get_chipid+0xec>)
    595a:	601a      	str	r2, [r3, #0]
    595c:	e012      	b.n	5984 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    595e:	4b13      	ldr	r3, [pc, #76]	; (59ac <nmi_get_chipid+0xd0>)
    5960:	681b      	ldr	r3, [r3, #0]
    5962:	4a1a      	ldr	r2, [pc, #104]	; (59cc <nmi_get_chipid+0xf0>)
    5964:	4293      	cmp	r3, r2
    5966:	d10d      	bne.n	5984 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    5968:	4a10      	ldr	r2, [pc, #64]	; (59ac <nmi_get_chipid+0xd0>)
    596a:	23ec      	movs	r3, #236	; 0xec
    596c:	039b      	lsls	r3, r3, #14
    596e:	0011      	movs	r1, r2
    5970:	0018      	movs	r0, r3
    5972:	4b0f      	ldr	r3, [pc, #60]	; (59b0 <nmi_get_chipid+0xd4>)
    5974:	4798      	blx	r3
    5976:	1e03      	subs	r3, r0, #0
    5978:	d004      	beq.n	5984 <nmi_get_chipid+0xa8>
			chipid = 0;
    597a:	4b0c      	ldr	r3, [pc, #48]	; (59ac <nmi_get_chipid+0xd0>)
    597c:	2200      	movs	r2, #0
    597e:	601a      	str	r2, [r3, #0]
			return 0;
    5980:	2300      	movs	r3, #0
    5982:	e00e      	b.n	59a2 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    5984:	4b09      	ldr	r3, [pc, #36]	; (59ac <nmi_get_chipid+0xd0>)
    5986:	681b      	ldr	r3, [r3, #0]
    5988:	4a11      	ldr	r2, [pc, #68]	; (59d0 <nmi_get_chipid+0xf4>)
    598a:	401a      	ands	r2, r3
    598c:	4b07      	ldr	r3, [pc, #28]	; (59ac <nmi_get_chipid+0xd0>)
    598e:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    5990:	4b06      	ldr	r3, [pc, #24]	; (59ac <nmi_get_chipid+0xd0>)
    5992:	681b      	ldr	r3, [r3, #0]
    5994:	22a0      	movs	r2, #160	; 0xa0
    5996:	02d2      	lsls	r2, r2, #11
    5998:	431a      	orrs	r2, r3
    599a:	4b04      	ldr	r3, [pc, #16]	; (59ac <nmi_get_chipid+0xd0>)
    599c:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    599e:	4b03      	ldr	r3, [pc, #12]	; (59ac <nmi_get_chipid+0xd0>)
    59a0:	681b      	ldr	r3, [r3, #0]
}
    59a2:	0018      	movs	r0, r3
    59a4:	46bd      	mov	sp, r7
    59a6:	b002      	add	sp, #8
    59a8:	bd80      	pop	{r7, pc}
    59aa:	46c0      	nop			; (mov r8, r8)
    59ac:	20000228 	.word	0x20000228
    59b0:	00005fd9 	.word	0x00005fd9
    59b4:	000013f4 	.word	0x000013f4
    59b8:	001002a0 	.word	0x001002a0
    59bc:	001002a1 	.word	0x001002a1
    59c0:	001002b0 	.word	0x001002b0
    59c4:	001002b1 	.word	0x001002b1
    59c8:	001002b2 	.word	0x001002b2
    59cc:	001000f0 	.word	0x001000f0
    59d0:	fff0ffff 	.word	0xfff0ffff

000059d4 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    59d4:	b590      	push	{r4, r7, lr}
    59d6:	b083      	sub	sp, #12
    59d8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    59da:	1dfb      	adds	r3, r7, #7
    59dc:	2200      	movs	r2, #0
    59de:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    59e0:	1dfc      	adds	r4, r7, #7
    59e2:	003b      	movs	r3, r7
    59e4:	0019      	movs	r1, r3
    59e6:	2010      	movs	r0, #16
    59e8:	4b2e      	ldr	r3, [pc, #184]	; (5aa4 <chip_sleep+0xd0>)
    59ea:	4798      	blx	r3
    59ec:	0003      	movs	r3, r0
    59ee:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    59f0:	1dfb      	adds	r3, r7, #7
    59f2:	781b      	ldrb	r3, [r3, #0]
    59f4:	b25b      	sxtb	r3, r3
    59f6:	2b00      	cmp	r3, #0
    59f8:	d145      	bne.n	5a86 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    59fa:	683b      	ldr	r3, [r7, #0]
    59fc:	2201      	movs	r2, #1
    59fe:	4013      	ands	r3, r2
    5a00:	d000      	beq.n	5a04 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    5a02:	e7ed      	b.n	59e0 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    5a04:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    5a06:	1dfc      	adds	r4, r7, #7
    5a08:	003b      	movs	r3, r7
    5a0a:	0019      	movs	r1, r3
    5a0c:	2001      	movs	r0, #1
    5a0e:	4b25      	ldr	r3, [pc, #148]	; (5aa4 <chip_sleep+0xd0>)
    5a10:	4798      	blx	r3
    5a12:	0003      	movs	r3, r0
    5a14:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    5a16:	1dfb      	adds	r3, r7, #7
    5a18:	781b      	ldrb	r3, [r3, #0]
    5a1a:	b25b      	sxtb	r3, r3
    5a1c:	2b00      	cmp	r3, #0
    5a1e:	d134      	bne.n	5a8a <chip_sleep+0xb6>
	if(reg & NBIT1)
    5a20:	683b      	ldr	r3, [r7, #0]
    5a22:	2202      	movs	r2, #2
    5a24:	4013      	ands	r3, r2
    5a26:	d010      	beq.n	5a4a <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    5a28:	683b      	ldr	r3, [r7, #0]
    5a2a:	2202      	movs	r2, #2
    5a2c:	4393      	bics	r3, r2
    5a2e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    5a30:	683b      	ldr	r3, [r7, #0]
    5a32:	1dfc      	adds	r4, r7, #7
    5a34:	0019      	movs	r1, r3
    5a36:	2001      	movs	r0, #1
    5a38:	4b1b      	ldr	r3, [pc, #108]	; (5aa8 <chip_sleep+0xd4>)
    5a3a:	4798      	blx	r3
    5a3c:	0003      	movs	r3, r0
    5a3e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    5a40:	1dfb      	adds	r3, r7, #7
    5a42:	781b      	ldrb	r3, [r3, #0]
    5a44:	b25b      	sxtb	r3, r3
    5a46:	2b00      	cmp	r3, #0
    5a48:	d121      	bne.n	5a8e <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    5a4a:	1dfc      	adds	r4, r7, #7
    5a4c:	003b      	movs	r3, r7
    5a4e:	0019      	movs	r1, r3
    5a50:	200b      	movs	r0, #11
    5a52:	4b14      	ldr	r3, [pc, #80]	; (5aa4 <chip_sleep+0xd0>)
    5a54:	4798      	blx	r3
    5a56:	0003      	movs	r3, r0
    5a58:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    5a5a:	1dfb      	adds	r3, r7, #7
    5a5c:	781b      	ldrb	r3, [r3, #0]
    5a5e:	b25b      	sxtb	r3, r3
    5a60:	2b00      	cmp	r3, #0
    5a62:	d116      	bne.n	5a92 <chip_sleep+0xbe>
	if(reg & NBIT0)
    5a64:	683b      	ldr	r3, [r7, #0]
    5a66:	2201      	movs	r2, #1
    5a68:	4013      	ands	r3, r2
    5a6a:	d013      	beq.n	5a94 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    5a6c:	683b      	ldr	r3, [r7, #0]
    5a6e:	2201      	movs	r2, #1
    5a70:	4393      	bics	r3, r2
    5a72:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    5a74:	683b      	ldr	r3, [r7, #0]
    5a76:	1dfc      	adds	r4, r7, #7
    5a78:	0019      	movs	r1, r3
    5a7a:	200b      	movs	r0, #11
    5a7c:	4b0a      	ldr	r3, [pc, #40]	; (5aa8 <chip_sleep+0xd4>)
    5a7e:	4798      	blx	r3
    5a80:	0003      	movs	r3, r0
    5a82:	7023      	strb	r3, [r4, #0]
    5a84:	e006      	b.n	5a94 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    5a86:	46c0      	nop			; (mov r8, r8)
    5a88:	e004      	b.n	5a94 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    5a8a:	46c0      	nop			; (mov r8, r8)
    5a8c:	e002      	b.n	5a94 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    5a8e:	46c0      	nop			; (mov r8, r8)
    5a90:	e000      	b.n	5a94 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    5a92:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    5a94:	1dfb      	adds	r3, r7, #7
    5a96:	781b      	ldrb	r3, [r3, #0]
    5a98:	b25b      	sxtb	r3, r3
}
    5a9a:	0018      	movs	r0, r3
    5a9c:	46bd      	mov	sp, r7
    5a9e:	b003      	add	sp, #12
    5aa0:	bd90      	pop	{r4, r7, pc}
    5aa2:	46c0      	nop			; (mov r8, r8)
    5aa4:	00005fd9 	.word	0x00005fd9
    5aa8:	00005ffd 	.word	0x00005ffd

00005aac <chip_wake>:
sint8 chip_wake(void)
{
    5aac:	b590      	push	{r4, r7, lr}
    5aae:	b085      	sub	sp, #20
    5ab0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    5ab2:	230f      	movs	r3, #15
    5ab4:	18fb      	adds	r3, r7, r3
    5ab6:	2200      	movs	r2, #0
    5ab8:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    5aba:	2300      	movs	r3, #0
    5abc:	607b      	str	r3, [r7, #4]
    5abe:	2300      	movs	r3, #0
    5ac0:	603b      	str	r3, [r7, #0]
    5ac2:	2300      	movs	r3, #0
    5ac4:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    5ac6:	230f      	movs	r3, #15
    5ac8:	18fc      	adds	r4, r7, r3
    5aca:	1d3b      	adds	r3, r7, #4
    5acc:	0019      	movs	r1, r3
    5ace:	200b      	movs	r0, #11
    5ad0:	4b4c      	ldr	r3, [pc, #304]	; (5c04 <chip_wake+0x158>)
    5ad2:	4798      	blx	r3
    5ad4:	0003      	movs	r3, r0
    5ad6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    5ad8:	230f      	movs	r3, #15
    5ada:	18fb      	adds	r3, r7, r3
    5adc:	781b      	ldrb	r3, [r3, #0]
    5ade:	b25b      	sxtb	r3, r3
    5ae0:	2b00      	cmp	r3, #0
    5ae2:	d000      	beq.n	5ae6 <chip_wake+0x3a>
    5ae4:	e07f      	b.n	5be6 <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    5ae6:	687b      	ldr	r3, [r7, #4]
    5ae8:	2201      	movs	r2, #1
    5aea:	4013      	ands	r3, r2
    5aec:	d110      	bne.n	5b10 <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    5aee:	687b      	ldr	r3, [r7, #4]
    5af0:	2201      	movs	r2, #1
    5af2:	4313      	orrs	r3, r2
    5af4:	220f      	movs	r2, #15
    5af6:	18bc      	adds	r4, r7, r2
    5af8:	0019      	movs	r1, r3
    5afa:	200b      	movs	r0, #11
    5afc:	4b42      	ldr	r3, [pc, #264]	; (5c08 <chip_wake+0x15c>)
    5afe:	4798      	blx	r3
    5b00:	0003      	movs	r3, r0
    5b02:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    5b04:	230f      	movs	r3, #15
    5b06:	18fb      	adds	r3, r7, r3
    5b08:	781b      	ldrb	r3, [r3, #0]
    5b0a:	b25b      	sxtb	r3, r3
    5b0c:	2b00      	cmp	r3, #0
    5b0e:	d16c      	bne.n	5bea <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    5b10:	230f      	movs	r3, #15
    5b12:	18fc      	adds	r4, r7, r3
    5b14:	1d3b      	adds	r3, r7, #4
    5b16:	0019      	movs	r1, r3
    5b18:	2001      	movs	r0, #1
    5b1a:	4b3a      	ldr	r3, [pc, #232]	; (5c04 <chip_wake+0x158>)
    5b1c:	4798      	blx	r3
    5b1e:	0003      	movs	r3, r0
    5b20:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    5b22:	230f      	movs	r3, #15
    5b24:	18fb      	adds	r3, r7, r3
    5b26:	781b      	ldrb	r3, [r3, #0]
    5b28:	b25b      	sxtb	r3, r3
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d15f      	bne.n	5bee <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    5b2e:	687b      	ldr	r3, [r7, #4]
    5b30:	2202      	movs	r2, #2
    5b32:	4013      	ands	r3, r2
    5b34:	d110      	bne.n	5b58 <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    5b36:	687b      	ldr	r3, [r7, #4]
    5b38:	2202      	movs	r2, #2
    5b3a:	4313      	orrs	r3, r2
    5b3c:	220f      	movs	r2, #15
    5b3e:	18bc      	adds	r4, r7, r2
    5b40:	0019      	movs	r1, r3
    5b42:	2001      	movs	r0, #1
    5b44:	4b30      	ldr	r3, [pc, #192]	; (5c08 <chip_wake+0x15c>)
    5b46:	4798      	blx	r3
    5b48:	0003      	movs	r3, r0
    5b4a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    5b4c:	230f      	movs	r3, #15
    5b4e:	18fb      	adds	r3, r7, r3
    5b50:	781b      	ldrb	r3, [r3, #0]
    5b52:	b25b      	sxtb	r3, r3
    5b54:	2b00      	cmp	r3, #0
    5b56:	d14c      	bne.n	5bf2 <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    5b58:	230f      	movs	r3, #15
    5b5a:	18fc      	adds	r4, r7, r3
    5b5c:	003b      	movs	r3, r7
    5b5e:	0019      	movs	r1, r3
    5b60:	200f      	movs	r0, #15
    5b62:	4b28      	ldr	r3, [pc, #160]	; (5c04 <chip_wake+0x158>)
    5b64:	4798      	blx	r3
    5b66:	0003      	movs	r3, r0
    5b68:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    5b6a:	230f      	movs	r3, #15
    5b6c:	18fb      	adds	r3, r7, r3
    5b6e:	781b      	ldrb	r3, [r3, #0]
    5b70:	b25b      	sxtb	r3, r3
    5b72:	2b00      	cmp	r3, #0
    5b74:	d013      	beq.n	5b9e <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    5b76:	23aa      	movs	r3, #170	; 0xaa
    5b78:	005a      	lsls	r2, r3, #1
    5b7a:	4924      	ldr	r1, [pc, #144]	; (5c0c <chip_wake+0x160>)
    5b7c:	4b24      	ldr	r3, [pc, #144]	; (5c10 <chip_wake+0x164>)
    5b7e:	0018      	movs	r0, r3
    5b80:	4b24      	ldr	r3, [pc, #144]	; (5c14 <chip_wake+0x168>)
    5b82:	4798      	blx	r3
    5b84:	230f      	movs	r3, #15
    5b86:	18fb      	adds	r3, r7, r3
    5b88:	2100      	movs	r1, #0
    5b8a:	5659      	ldrsb	r1, [r3, r1]
    5b8c:	683a      	ldr	r2, [r7, #0]
    5b8e:	4b22      	ldr	r3, [pc, #136]	; (5c18 <chip_wake+0x16c>)
    5b90:	0018      	movs	r0, r3
    5b92:	4b20      	ldr	r3, [pc, #128]	; (5c14 <chip_wake+0x168>)
    5b94:	4798      	blx	r3
    5b96:	200d      	movs	r0, #13
    5b98:	4b20      	ldr	r3, [pc, #128]	; (5c1c <chip_wake+0x170>)
    5b9a:	4798      	blx	r3
			goto _WAKE_EXIT;
    5b9c:	e02a      	b.n	5bf4 <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    5b9e:	683b      	ldr	r3, [r7, #0]
    5ba0:	2204      	movs	r2, #4
    5ba2:	4013      	ands	r3, r2
    5ba4:	d11b      	bne.n	5bde <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    5ba6:	2002      	movs	r0, #2
    5ba8:	4b1d      	ldr	r3, [pc, #116]	; (5c20 <chip_wake+0x174>)
    5baa:	4798      	blx	r3
		trials++;
    5bac:	68bb      	ldr	r3, [r7, #8]
    5bae:	3301      	adds	r3, #1
    5bb0:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    5bb2:	68bb      	ldr	r3, [r7, #8]
    5bb4:	2b04      	cmp	r3, #4
    5bb6:	d9cf      	bls.n	5b58 <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    5bb8:	23af      	movs	r3, #175	; 0xaf
    5bba:	005a      	lsls	r2, r3, #1
    5bbc:	4913      	ldr	r1, [pc, #76]	; (5c0c <chip_wake+0x160>)
    5bbe:	4b14      	ldr	r3, [pc, #80]	; (5c10 <chip_wake+0x164>)
    5bc0:	0018      	movs	r0, r3
    5bc2:	4b14      	ldr	r3, [pc, #80]	; (5c14 <chip_wake+0x168>)
    5bc4:	4798      	blx	r3
    5bc6:	4b17      	ldr	r3, [pc, #92]	; (5c24 <chip_wake+0x178>)
    5bc8:	0018      	movs	r0, r3
    5bca:	4b17      	ldr	r3, [pc, #92]	; (5c28 <chip_wake+0x17c>)
    5bcc:	4798      	blx	r3
    5bce:	200d      	movs	r0, #13
    5bd0:	4b12      	ldr	r3, [pc, #72]	; (5c1c <chip_wake+0x170>)
    5bd2:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    5bd4:	230f      	movs	r3, #15
    5bd6:	18fb      	adds	r3, r7, r3
    5bd8:	22fc      	movs	r2, #252	; 0xfc
    5bda:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    5bdc:	e00a      	b.n	5bf4 <chip_wake+0x148>
			break;
    5bde:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    5be0:	4b12      	ldr	r3, [pc, #72]	; (5c2c <chip_wake+0x180>)
    5be2:	4798      	blx	r3
    5be4:	e006      	b.n	5bf4 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    5be6:	46c0      	nop			; (mov r8, r8)
    5be8:	e004      	b.n	5bf4 <chip_wake+0x148>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    5bea:	46c0      	nop			; (mov r8, r8)
    5bec:	e002      	b.n	5bf4 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    5bee:	46c0      	nop			; (mov r8, r8)
    5bf0:	e000      	b.n	5bf4 <chip_wake+0x148>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    5bf2:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    5bf4:	230f      	movs	r3, #15
    5bf6:	18fb      	adds	r3, r7, r3
    5bf8:	781b      	ldrb	r3, [r3, #0]
    5bfa:	b25b      	sxtb	r3, r3
}
    5bfc:	0018      	movs	r0, r3
    5bfe:	46bd      	mov	sp, r7
    5c00:	b005      	add	sp, #20
    5c02:	bd90      	pop	{r4, r7, pc}
    5c04:	00005fd9 	.word	0x00005fd9
    5c08:	00005ffd 	.word	0x00005ffd
    5c0c:	00019c3c 	.word	0x00019c3c
    5c10:	00019bb8 	.word	0x00019bb8
    5c14:	00013e4d 	.word	0x00013e4d
    5c18:	00019bcc 	.word	0x00019bcc
    5c1c:	00013e81 	.word	0x00013e81
    5c20:	00003641 	.word	0x00003641
    5c24:	00019be4 	.word	0x00019be4
    5c28:	00013f69 	.word	0x00013f69
    5c2c:	00005f99 	.word	0x00005f99

00005c30 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    5c30:	b580      	push	{r7, lr}
    5c32:	b088      	sub	sp, #32
    5c34:	af00      	add	r7, sp, #0
    5c36:	0002      	movs	r2, r0
    5c38:	1dfb      	adds	r3, r7, #7
    5c3a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    5c3c:	2313      	movs	r3, #19
    5c3e:	18fb      	adds	r3, r7, r3
    5c40:	2200      	movs	r2, #0
    5c42:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    5c44:	2300      	movs	r3, #0
    5c46:	61fb      	str	r3, [r7, #28]
    5c48:	2300      	movs	r3, #0
    5c4a:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    5c4c:	2300      	movs	r3, #0
    5c4e:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    5c50:	4b4a      	ldr	r3, [pc, #296]	; (5d7c <wait_for_bootrom+0x14c>)
    5c52:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    5c54:	2300      	movs	r3, #0
    5c56:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    5c58:	4b49      	ldr	r3, [pc, #292]	; (5d80 <wait_for_bootrom+0x150>)
    5c5a:	0018      	movs	r0, r3
    5c5c:	4b49      	ldr	r3, [pc, #292]	; (5d84 <wait_for_bootrom+0x154>)
    5c5e:	4798      	blx	r3
    5c60:	0003      	movs	r3, r0
    5c62:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    5c64:	69fb      	ldr	r3, [r7, #28]
    5c66:	2b00      	cmp	r3, #0
    5c68:	db03      	blt.n	5c72 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    5c6a:	2001      	movs	r0, #1
    5c6c:	4b46      	ldr	r3, [pc, #280]	; (5d88 <wait_for_bootrom+0x158>)
    5c6e:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    5c70:	e7f2      	b.n	5c58 <wait_for_bootrom+0x28>
			break;
    5c72:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    5c74:	4b45      	ldr	r3, [pc, #276]	; (5d8c <wait_for_bootrom+0x15c>)
    5c76:	0018      	movs	r0, r3
    5c78:	4b42      	ldr	r3, [pc, #264]	; (5d84 <wait_for_bootrom+0x154>)
    5c7a:	4798      	blx	r3
    5c7c:	0003      	movs	r3, r0
    5c7e:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    5c80:	69fb      	ldr	r3, [r7, #28]
    5c82:	2201      	movs	r2, #1
    5c84:	4013      	ands	r3, r2
    5c86:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    5c88:	69fb      	ldr	r3, [r7, #28]
    5c8a:	2b00      	cmp	r3, #0
    5c8c:	d112      	bne.n	5cb4 <wait_for_bootrom+0x84>
	{
		reg = 0;
    5c8e:	2300      	movs	r3, #0
    5c90:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    5c92:	e00b      	b.n	5cac <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    5c94:	2001      	movs	r0, #1
    5c96:	4b3c      	ldr	r3, [pc, #240]	; (5d88 <wait_for_bootrom+0x158>)
    5c98:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    5c9a:	4b3d      	ldr	r3, [pc, #244]	; (5d90 <wait_for_bootrom+0x160>)
    5c9c:	0018      	movs	r0, r3
    5c9e:	4b39      	ldr	r3, [pc, #228]	; (5d84 <wait_for_bootrom+0x154>)
    5ca0:	4798      	blx	r3
    5ca2:	0003      	movs	r3, r0
    5ca4:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    5ca6:	69bb      	ldr	r3, [r7, #24]
    5ca8:	3301      	adds	r3, #1
    5caa:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    5cac:	69fb      	ldr	r3, [r7, #28]
    5cae:	4a39      	ldr	r2, [pc, #228]	; (5d94 <wait_for_bootrom+0x164>)
    5cb0:	4293      	cmp	r3, r2
    5cb2:	d1ef      	bne.n	5c94 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    5cb4:	1dfb      	adds	r3, r7, #7
    5cb6:	781b      	ldrb	r3, [r3, #0]
    5cb8:	2b02      	cmp	r3, #2
    5cba:	d10d      	bne.n	5cd8 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    5cbc:	4a36      	ldr	r2, [pc, #216]	; (5d98 <wait_for_bootrom+0x168>)
    5cbe:	4b37      	ldr	r3, [pc, #220]	; (5d9c <wait_for_bootrom+0x16c>)
    5cc0:	0011      	movs	r1, r2
    5cc2:	0018      	movs	r0, r3
    5cc4:	4b36      	ldr	r3, [pc, #216]	; (5da0 <wait_for_bootrom+0x170>)
    5cc6:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    5cc8:	2380      	movs	r3, #128	; 0x80
    5cca:	035b      	lsls	r3, r3, #13
    5ccc:	4a35      	ldr	r2, [pc, #212]	; (5da4 <wait_for_bootrom+0x174>)
    5cce:	0019      	movs	r1, r3
    5cd0:	0010      	movs	r0, r2
    5cd2:	4b33      	ldr	r3, [pc, #204]	; (5da0 <wait_for_bootrom+0x170>)
    5cd4:	4798      	blx	r3
    5cd6:	e022      	b.n	5d1e <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    5cd8:	1dfb      	adds	r3, r7, #7
    5cda:	781b      	ldrb	r3, [r3, #0]
    5cdc:	2b03      	cmp	r3, #3
    5cde:	d10b      	bne.n	5cf8 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    5ce0:	4a2d      	ldr	r2, [pc, #180]	; (5d98 <wait_for_bootrom+0x168>)
    5ce2:	4b2e      	ldr	r3, [pc, #184]	; (5d9c <wait_for_bootrom+0x16c>)
    5ce4:	0011      	movs	r1, r2
    5ce6:	0018      	movs	r0, r3
    5ce8:	4b2d      	ldr	r3, [pc, #180]	; (5da0 <wait_for_bootrom+0x170>)
    5cea:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    5cec:	4b2d      	ldr	r3, [pc, #180]	; (5da4 <wait_for_bootrom+0x174>)
    5cee:	2100      	movs	r1, #0
    5cf0:	0018      	movs	r0, r3
    5cf2:	4b2b      	ldr	r3, [pc, #172]	; (5da0 <wait_for_bootrom+0x170>)
    5cf4:	4798      	blx	r3
    5cf6:	e012      	b.n	5d1e <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    5cf8:	1dfb      	adds	r3, r7, #7
    5cfa:	781b      	ldrb	r3, [r3, #0]
    5cfc:	2b04      	cmp	r3, #4
    5cfe:	d108      	bne.n	5d12 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    5d00:	2380      	movs	r3, #128	; 0x80
    5d02:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    5d04:	68fb      	ldr	r3, [r7, #12]
    5d06:	4a27      	ldr	r2, [pc, #156]	; (5da4 <wait_for_bootrom+0x174>)
    5d08:	0019      	movs	r1, r3
    5d0a:	0010      	movs	r0, r2
    5d0c:	4b24      	ldr	r3, [pc, #144]	; (5da0 <wait_for_bootrom+0x170>)
    5d0e:	4798      	blx	r3
    5d10:	e005      	b.n	5d1e <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    5d12:	68fb      	ldr	r3, [r7, #12]
    5d14:	4a23      	ldr	r2, [pc, #140]	; (5da4 <wait_for_bootrom+0x174>)
    5d16:	0019      	movs	r1, r3
    5d18:	0010      	movs	r0, r2
    5d1a:	4b21      	ldr	r3, [pc, #132]	; (5da0 <wait_for_bootrom+0x170>)
    5d1c:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    5d1e:	4b22      	ldr	r3, [pc, #136]	; (5da8 <wait_for_bootrom+0x178>)
    5d20:	4798      	blx	r3
    5d22:	0003      	movs	r3, r0
    5d24:	051b      	lsls	r3, r3, #20
    5d26:	0d1b      	lsrs	r3, r3, #20
    5d28:	4a20      	ldr	r2, [pc, #128]	; (5dac <wait_for_bootrom+0x17c>)
    5d2a:	4293      	cmp	r3, r2
    5d2c:	d906      	bls.n	5d3c <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    5d2e:	697b      	ldr	r3, [r7, #20]
    5d30:	2202      	movs	r2, #2
    5d32:	4313      	orrs	r3, r2
    5d34:	0018      	movs	r0, r3
    5d36:	4b1e      	ldr	r3, [pc, #120]	; (5db0 <wait_for_bootrom+0x180>)
    5d38:	4798      	blx	r3
    5d3a:	e003      	b.n	5d44 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    5d3c:	697b      	ldr	r3, [r7, #20]
    5d3e:	0018      	movs	r0, r3
    5d40:	4b1b      	ldr	r3, [pc, #108]	; (5db0 <wait_for_bootrom+0x180>)
    5d42:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    5d44:	4b1b      	ldr	r3, [pc, #108]	; (5db4 <wait_for_bootrom+0x184>)
    5d46:	0018      	movs	r0, r3
    5d48:	4b1b      	ldr	r3, [pc, #108]	; (5db8 <wait_for_bootrom+0x188>)
    5d4a:	4798      	blx	r3
    5d4c:	68fa      	ldr	r2, [r7, #12]
    5d4e:	4b1b      	ldr	r3, [pc, #108]	; (5dbc <wait_for_bootrom+0x18c>)
    5d50:	0011      	movs	r1, r2
    5d52:	0018      	movs	r0, r3
    5d54:	4b18      	ldr	r3, [pc, #96]	; (5db8 <wait_for_bootrom+0x188>)
    5d56:	4798      	blx	r3
    5d58:	200d      	movs	r0, #13
    5d5a:	4b19      	ldr	r3, [pc, #100]	; (5dc0 <wait_for_bootrom+0x190>)
    5d5c:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    5d5e:	4a19      	ldr	r2, [pc, #100]	; (5dc4 <wait_for_bootrom+0x194>)
    5d60:	4b0b      	ldr	r3, [pc, #44]	; (5d90 <wait_for_bootrom+0x160>)
    5d62:	0011      	movs	r1, r2
    5d64:	0018      	movs	r0, r3
    5d66:	4b0e      	ldr	r3, [pc, #56]	; (5da0 <wait_for_bootrom+0x170>)
    5d68:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    5d6a:	2313      	movs	r3, #19
    5d6c:	18fb      	adds	r3, r7, r3
    5d6e:	781b      	ldrb	r3, [r3, #0]
    5d70:	b25b      	sxtb	r3, r3
}
    5d72:	0018      	movs	r0, r3
    5d74:	46bd      	mov	sp, r7
    5d76:	b008      	add	sp, #32
    5d78:	bd80      	pop	{r7, pc}
    5d7a:	46c0      	nop			; (mov r8, r8)
    5d7c:	13521352 	.word	0x13521352
    5d80:	00001014 	.word	0x00001014
    5d84:	00005fb9 	.word	0x00005fb9
    5d88:	00003641 	.word	0x00003641
    5d8c:	000207bc 	.word	0x000207bc
    5d90:	000c000c 	.word	0x000c000c
    5d94:	10add09e 	.word	0x10add09e
    5d98:	3c1cd57d 	.word	0x3c1cd57d
    5d9c:	000207ac 	.word	0x000207ac
    5da0:	00005ffd 	.word	0x00005ffd
    5da4:	0000108c 	.word	0x0000108c
    5da8:	000058dd 	.word	0x000058dd
    5dac:	0000039f 	.word	0x0000039f
    5db0:	000057ad 	.word	0x000057ad
    5db4:	00019c00 	.word	0x00019c00
    5db8:	00013e4d 	.word	0x00013e4d
    5dbc:	00019c0c 	.word	0x00019c0c
    5dc0:	00013e81 	.word	0x00013e81
    5dc4:	ef522f61 	.word	0xef522f61

00005dc8 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    5dc8:	b580      	push	{r7, lr}
    5dca:	b088      	sub	sp, #32
    5dcc:	af00      	add	r7, sp, #0
    5dce:	0002      	movs	r2, r0
    5dd0:	1dfb      	adds	r3, r7, #7
    5dd2:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    5dd4:	231f      	movs	r3, #31
    5dd6:	18fb      	adds	r3, r7, r3
    5dd8:	2200      	movs	r2, #0
    5dda:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    5ddc:	2300      	movs	r3, #0
    5dde:	61bb      	str	r3, [r7, #24]
    5de0:	2300      	movs	r3, #0
    5de2:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    5de4:	2301      	movs	r3, #1
    5de6:	425b      	negs	r3, r3
    5de8:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    5dea:	4b1d      	ldr	r3, [pc, #116]	; (5e60 <wait_for_firmware_start+0x98>)
    5dec:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    5dee:	4b1d      	ldr	r3, [pc, #116]	; (5e64 <wait_for_firmware_start+0x9c>)
    5df0:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    5df2:	1dfb      	adds	r3, r7, #7
    5df4:	781b      	ldrb	r3, [r3, #0]
    5df6:	2b02      	cmp	r3, #2
    5df8:	d003      	beq.n	5e02 <wait_for_firmware_start+0x3a>
    5dfa:	1dfb      	adds	r3, r7, #7
    5dfc:	781b      	ldrb	r3, [r3, #0]
    5dfe:	2b03      	cmp	r3, #3
    5e00:	d119      	bne.n	5e36 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    5e02:	4b19      	ldr	r3, [pc, #100]	; (5e68 <wait_for_firmware_start+0xa0>)
    5e04:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    5e06:	4b19      	ldr	r3, [pc, #100]	; (5e6c <wait_for_firmware_start+0xa4>)
    5e08:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    5e0a:	e014      	b.n	5e36 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    5e0c:	2002      	movs	r0, #2
    5e0e:	4b18      	ldr	r3, [pc, #96]	; (5e70 <wait_for_firmware_start+0xa8>)
    5e10:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    5e12:	68fb      	ldr	r3, [r7, #12]
    5e14:	0018      	movs	r0, r3
    5e16:	4b17      	ldr	r3, [pc, #92]	; (5e74 <wait_for_firmware_start+0xac>)
    5e18:	4798      	blx	r3
    5e1a:	0003      	movs	r3, r0
    5e1c:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    5e1e:	697b      	ldr	r3, [r7, #20]
    5e20:	3301      	adds	r3, #1
    5e22:	617b      	str	r3, [r7, #20]
    5e24:	697a      	ldr	r2, [r7, #20]
    5e26:	693b      	ldr	r3, [r7, #16]
    5e28:	429a      	cmp	r2, r3
    5e2a:	d304      	bcc.n	5e36 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    5e2c:	231f      	movs	r3, #31
    5e2e:	18fb      	adds	r3, r7, r3
    5e30:	22fb      	movs	r2, #251	; 0xfb
    5e32:	701a      	strb	r2, [r3, #0]
			goto ERR;
    5e34:	e00c      	b.n	5e50 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    5e36:	68ba      	ldr	r2, [r7, #8]
    5e38:	69bb      	ldr	r3, [r7, #24]
    5e3a:	429a      	cmp	r2, r3
    5e3c:	d1e6      	bne.n	5e0c <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    5e3e:	68bb      	ldr	r3, [r7, #8]
    5e40:	4a08      	ldr	r2, [pc, #32]	; (5e64 <wait_for_firmware_start+0x9c>)
    5e42:	4293      	cmp	r3, r2
    5e44:	d104      	bne.n	5e50 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    5e46:	4b06      	ldr	r3, [pc, #24]	; (5e60 <wait_for_firmware_start+0x98>)
    5e48:	2100      	movs	r1, #0
    5e4a:	0018      	movs	r0, r3
    5e4c:	4b0a      	ldr	r3, [pc, #40]	; (5e78 <wait_for_firmware_start+0xb0>)
    5e4e:	4798      	blx	r3
	}
ERR:
	return ret;
    5e50:	231f      	movs	r3, #31
    5e52:	18fb      	adds	r3, r7, r3
    5e54:	781b      	ldrb	r3, [r3, #0]
    5e56:	b25b      	sxtb	r3, r3
}
    5e58:	0018      	movs	r0, r3
    5e5a:	46bd      	mov	sp, r7
    5e5c:	b008      	add	sp, #32
    5e5e:	bd80      	pop	{r7, pc}
    5e60:	0000108c 	.word	0x0000108c
    5e64:	02532636 	.word	0x02532636
    5e68:	000207ac 	.word	0x000207ac
    5e6c:	d75dc1c3 	.word	0xd75dc1c3
    5e70:	00003641 	.word	0x00003641
    5e74:	00005fb9 	.word	0x00005fb9
    5e78:	00005ffd 	.word	0x00005ffd

00005e7c <chip_deinit>:

sint8 chip_deinit(void)
{
    5e7c:	b590      	push	{r4, r7, lr}
    5e7e:	b083      	sub	sp, #12
    5e80:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    5e82:	2300      	movs	r3, #0
    5e84:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    5e86:	1dfc      	adds	r4, r7, #7
    5e88:	003a      	movs	r2, r7
    5e8a:	23a0      	movs	r3, #160	; 0xa0
    5e8c:	015b      	lsls	r3, r3, #5
    5e8e:	0011      	movs	r1, r2
    5e90:	0018      	movs	r0, r3
    5e92:	4b1f      	ldr	r3, [pc, #124]	; (5f10 <chip_deinit+0x94>)
    5e94:	4798      	blx	r3
    5e96:	0003      	movs	r3, r0
    5e98:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    5e9a:	1dfb      	adds	r3, r7, #7
    5e9c:	781b      	ldrb	r3, [r3, #0]
    5e9e:	b25b      	sxtb	r3, r3
    5ea0:	2b00      	cmp	r3, #0
    5ea2:	d00d      	beq.n	5ec0 <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    5ea4:	4a1b      	ldr	r2, [pc, #108]	; (5f14 <chip_deinit+0x98>)
    5ea6:	491c      	ldr	r1, [pc, #112]	; (5f18 <chip_deinit+0x9c>)
    5ea8:	4b1c      	ldr	r3, [pc, #112]	; (5f1c <chip_deinit+0xa0>)
    5eaa:	0018      	movs	r0, r3
    5eac:	4b1c      	ldr	r3, [pc, #112]	; (5f20 <chip_deinit+0xa4>)
    5eae:	4798      	blx	r3
    5eb0:	4b1c      	ldr	r3, [pc, #112]	; (5f24 <chip_deinit+0xa8>)
    5eb2:	0018      	movs	r0, r3
    5eb4:	4b1c      	ldr	r3, [pc, #112]	; (5f28 <chip_deinit+0xac>)
    5eb6:	4798      	blx	r3
    5eb8:	200d      	movs	r0, #13
    5eba:	4b1c      	ldr	r3, [pc, #112]	; (5f2c <chip_deinit+0xb0>)
    5ebc:	4798      	blx	r3
		goto ERR1;
    5ebe:	e020      	b.n	5f02 <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    5ec0:	683b      	ldr	r3, [r7, #0]
    5ec2:	4a1b      	ldr	r2, [pc, #108]	; (5f30 <chip_deinit+0xb4>)
    5ec4:	4013      	ands	r3, r2
    5ec6:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    5ec8:	683a      	ldr	r2, [r7, #0]
    5eca:	1dfc      	adds	r4, r7, #7
    5ecc:	23a0      	movs	r3, #160	; 0xa0
    5ece:	015b      	lsls	r3, r3, #5
    5ed0:	0011      	movs	r1, r2
    5ed2:	0018      	movs	r0, r3
    5ed4:	4b17      	ldr	r3, [pc, #92]	; (5f34 <chip_deinit+0xb8>)
    5ed6:	4798      	blx	r3
    5ed8:	0003      	movs	r3, r0
    5eda:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    5edc:	1dfb      	adds	r3, r7, #7
    5ede:	781b      	ldrb	r3, [r3, #0]
    5ee0:	b25b      	sxtb	r3, r3
    5ee2:	2b00      	cmp	r3, #0
    5ee4:	d00d      	beq.n	5f02 <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    5ee6:	4a14      	ldr	r2, [pc, #80]	; (5f38 <chip_deinit+0xbc>)
    5ee8:	490b      	ldr	r1, [pc, #44]	; (5f18 <chip_deinit+0x9c>)
    5eea:	4b0c      	ldr	r3, [pc, #48]	; (5f1c <chip_deinit+0xa0>)
    5eec:	0018      	movs	r0, r3
    5eee:	4b0c      	ldr	r3, [pc, #48]	; (5f20 <chip_deinit+0xa4>)
    5ef0:	4798      	blx	r3
    5ef2:	4b0c      	ldr	r3, [pc, #48]	; (5f24 <chip_deinit+0xa8>)
    5ef4:	0018      	movs	r0, r3
    5ef6:	4b0c      	ldr	r3, [pc, #48]	; (5f28 <chip_deinit+0xac>)
    5ef8:	4798      	blx	r3
    5efa:	200d      	movs	r0, #13
    5efc:	4b0b      	ldr	r3, [pc, #44]	; (5f2c <chip_deinit+0xb0>)
    5efe:	4798      	blx	r3
		goto ERR1;
    5f00:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    5f02:	1dfb      	adds	r3, r7, #7
    5f04:	781b      	ldrb	r3, [r3, #0]
    5f06:	b25b      	sxtb	r3, r3
}
    5f08:	0018      	movs	r0, r3
    5f0a:	46bd      	mov	sp, r7
    5f0c:	b003      	add	sp, #12
    5f0e:	bd90      	pop	{r4, r7, pc}
    5f10:	00005fd9 	.word	0x00005fd9
    5f14:	00000205 	.word	0x00000205
    5f18:	00019c48 	.word	0x00019c48
    5f1c:	00019bb8 	.word	0x00019bb8
    5f20:	00013e4d 	.word	0x00013e4d
    5f24:	00019c24 	.word	0x00019c24
    5f28:	00013f69 	.word	0x00013f69
    5f2c:	00013e81 	.word	0x00013e81
    5f30:	fffffbff 	.word	0xfffffbff
    5f34:	00005ffd 	.word	0x00005ffd
    5f38:	0000020b 	.word	0x0000020b

00005f3c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    5f3c:	b590      	push	{r4, r7, lr}
    5f3e:	b085      	sub	sp, #20
    5f40:	af00      	add	r7, sp, #0
    5f42:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    5f44:	230f      	movs	r3, #15
    5f46:	18fb      	adds	r3, r7, r3
    5f48:	2200      	movs	r2, #0
    5f4a:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    5f4c:	230f      	movs	r3, #15
    5f4e:	18fc      	adds	r4, r7, r3
    5f50:	687b      	ldr	r3, [r7, #4]
    5f52:	0018      	movs	r0, r3
    5f54:	4b05      	ldr	r3, [pc, #20]	; (5f6c <nm_bus_iface_init+0x30>)
    5f56:	4798      	blx	r3
    5f58:	0003      	movs	r3, r0
    5f5a:	7023      	strb	r3, [r4, #0]
	return ret;
    5f5c:	230f      	movs	r3, #15
    5f5e:	18fb      	adds	r3, r7, r3
    5f60:	781b      	ldrb	r3, [r3, #0]
    5f62:	b25b      	sxtb	r3, r3
}
    5f64:	0018      	movs	r0, r3
    5f66:	46bd      	mov	sp, r7
    5f68:	b005      	add	sp, #20
    5f6a:	bd90      	pop	{r4, r7, pc}
    5f6c:	00003d09 	.word	0x00003d09

00005f70 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    5f70:	b590      	push	{r4, r7, lr}
    5f72:	b083      	sub	sp, #12
    5f74:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    5f76:	1dfb      	adds	r3, r7, #7
    5f78:	2200      	movs	r2, #0
    5f7a:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    5f7c:	1dfc      	adds	r4, r7, #7
    5f7e:	4b05      	ldr	r3, [pc, #20]	; (5f94 <nm_bus_iface_deinit+0x24>)
    5f80:	4798      	blx	r3
    5f82:	0003      	movs	r3, r0
    5f84:	7023      	strb	r3, [r4, #0]

	return ret;
    5f86:	1dfb      	adds	r3, r7, #7
    5f88:	781b      	ldrb	r3, [r3, #0]
    5f8a:	b25b      	sxtb	r3, r3
}
    5f8c:	0018      	movs	r0, r3
    5f8e:	46bd      	mov	sp, r7
    5f90:	b003      	add	sp, #12
    5f92:	bd90      	pop	{r4, r7, pc}
    5f94:	00003e85 	.word	0x00003e85

00005f98 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    5f98:	b580      	push	{r7, lr}
    5f9a:	b082      	sub	sp, #8
    5f9c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    5f9e:	1dfb      	adds	r3, r7, #7
    5fa0:	2200      	movs	r2, #0
    5fa2:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    5fa4:	4b03      	ldr	r3, [pc, #12]	; (5fb4 <nm_bus_reset+0x1c>)
    5fa6:	4798      	blx	r3
    5fa8:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    5faa:	0018      	movs	r0, r3
    5fac:	46bd      	mov	sp, r7
    5fae:	b002      	add	sp, #8
    5fb0:	bd80      	pop	{r7, pc}
    5fb2:	46c0      	nop			; (mov r8, r8)
    5fb4:	00007881 	.word	0x00007881

00005fb8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    5fb8:	b580      	push	{r7, lr}
    5fba:	b082      	sub	sp, #8
    5fbc:	af00      	add	r7, sp, #0
    5fbe:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    5fc0:	687b      	ldr	r3, [r7, #4]
    5fc2:	0018      	movs	r0, r3
    5fc4:	4b03      	ldr	r3, [pc, #12]	; (5fd4 <nm_read_reg+0x1c>)
    5fc6:	4798      	blx	r3
    5fc8:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    5fca:	0018      	movs	r0, r3
    5fcc:	46bd      	mov	sp, r7
    5fce:	b002      	add	sp, #8
    5fd0:	bd80      	pop	{r7, pc}
    5fd2:	46c0      	nop			; (mov r8, r8)
    5fd4:	00007a15 	.word	0x00007a15

00005fd8 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    5fd8:	b580      	push	{r7, lr}
    5fda:	b082      	sub	sp, #8
    5fdc:	af00      	add	r7, sp, #0
    5fde:	6078      	str	r0, [r7, #4]
    5fe0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    5fe2:	683a      	ldr	r2, [r7, #0]
    5fe4:	687b      	ldr	r3, [r7, #4]
    5fe6:	0011      	movs	r1, r2
    5fe8:	0018      	movs	r0, r3
    5fea:	4b03      	ldr	r3, [pc, #12]	; (5ff8 <nm_read_reg_with_ret+0x20>)
    5fec:	4798      	blx	r3
    5fee:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    5ff0:	0018      	movs	r0, r3
    5ff2:	46bd      	mov	sp, r7
    5ff4:	b002      	add	sp, #8
    5ff6:	bd80      	pop	{r7, pc}
    5ff8:	00007a39 	.word	0x00007a39

00005ffc <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    5ffc:	b580      	push	{r7, lr}
    5ffe:	b082      	sub	sp, #8
    6000:	af00      	add	r7, sp, #0
    6002:	6078      	str	r0, [r7, #4]
    6004:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    6006:	683a      	ldr	r2, [r7, #0]
    6008:	687b      	ldr	r3, [r7, #4]
    600a:	0011      	movs	r1, r2
    600c:	0018      	movs	r0, r3
    600e:	4b03      	ldr	r3, [pc, #12]	; (601c <nm_write_reg+0x20>)
    6010:	4798      	blx	r3
    6012:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    6014:	0018      	movs	r0, r3
    6016:	46bd      	mov	sp, r7
    6018:	b002      	add	sp, #8
    601a:	bd80      	pop	{r7, pc}
    601c:	00007a89 	.word	0x00007a89

00006020 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    6020:	b580      	push	{r7, lr}
    6022:	b084      	sub	sp, #16
    6024:	af00      	add	r7, sp, #0
    6026:	60f8      	str	r0, [r7, #12]
    6028:	60b9      	str	r1, [r7, #8]
    602a:	1dbb      	adds	r3, r7, #6
    602c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    602e:	1dbb      	adds	r3, r7, #6
    6030:	881a      	ldrh	r2, [r3, #0]
    6032:	68b9      	ldr	r1, [r7, #8]
    6034:	68fb      	ldr	r3, [r7, #12]
    6036:	0018      	movs	r0, r3
    6038:	4b03      	ldr	r3, [pc, #12]	; (6048 <p_nm_read_block+0x28>)
    603a:	4798      	blx	r3
    603c:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    603e:	0018      	movs	r0, r3
    6040:	46bd      	mov	sp, r7
    6042:	b004      	add	sp, #16
    6044:	bd80      	pop	{r7, pc}
    6046:	46c0      	nop			; (mov r8, r8)
    6048:	00007ad9 	.word	0x00007ad9

0000604c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    604c:	b580      	push	{r7, lr}
    604e:	b086      	sub	sp, #24
    6050:	af00      	add	r7, sp, #0
    6052:	60f8      	str	r0, [r7, #12]
    6054:	60b9      	str	r1, [r7, #8]
    6056:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    6058:	4b2d      	ldr	r3, [pc, #180]	; (6110 <nm_read_block+0xc4>)
    605a:	881a      	ldrh	r2, [r3, #0]
    605c:	2310      	movs	r3, #16
    605e:	18fb      	adds	r3, r7, r3
    6060:	3a08      	subs	r2, #8
    6062:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    6064:	2300      	movs	r3, #0
    6066:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    6068:	2313      	movs	r3, #19
    606a:	18fb      	adds	r3, r7, r3
    606c:	2200      	movs	r2, #0
    606e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    6070:	2310      	movs	r3, #16
    6072:	18fb      	adds	r3, r7, r3
    6074:	881a      	ldrh	r2, [r3, #0]
    6076:	687b      	ldr	r3, [r7, #4]
    6078:	429a      	cmp	r2, r3
    607a:	d313      	bcc.n	60a4 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    607c:	68ba      	ldr	r2, [r7, #8]
    607e:	697b      	ldr	r3, [r7, #20]
    6080:	18d1      	adds	r1, r2, r3
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	b29a      	uxth	r2, r3
    6086:	68fb      	ldr	r3, [r7, #12]
    6088:	0018      	movs	r0, r3
    608a:	4b22      	ldr	r3, [pc, #136]	; (6114 <nm_read_block+0xc8>)
    608c:	4798      	blx	r3
    608e:	0003      	movs	r3, r0
    6090:	b2da      	uxtb	r2, r3
    6092:	2313      	movs	r3, #19
    6094:	18fb      	adds	r3, r7, r3
    6096:	781b      	ldrb	r3, [r3, #0]
    6098:	18d3      	adds	r3, r2, r3
    609a:	b2da      	uxtb	r2, r3
    609c:	2313      	movs	r3, #19
    609e:	18fb      	adds	r3, r7, r3
    60a0:	701a      	strb	r2, [r3, #0]
			break;
    60a2:	e02d      	b.n	6100 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    60a4:	68ba      	ldr	r2, [r7, #8]
    60a6:	697b      	ldr	r3, [r7, #20]
    60a8:	18d1      	adds	r1, r2, r3
    60aa:	2310      	movs	r3, #16
    60ac:	18fb      	adds	r3, r7, r3
    60ae:	881a      	ldrh	r2, [r3, #0]
    60b0:	68fb      	ldr	r3, [r7, #12]
    60b2:	0018      	movs	r0, r3
    60b4:	4b17      	ldr	r3, [pc, #92]	; (6114 <nm_read_block+0xc8>)
    60b6:	4798      	blx	r3
    60b8:	0003      	movs	r3, r0
    60ba:	b2da      	uxtb	r2, r3
    60bc:	2313      	movs	r3, #19
    60be:	18fb      	adds	r3, r7, r3
    60c0:	781b      	ldrb	r3, [r3, #0]
    60c2:	18d3      	adds	r3, r2, r3
    60c4:	b2da      	uxtb	r2, r3
    60c6:	2313      	movs	r3, #19
    60c8:	18fb      	adds	r3, r7, r3
    60ca:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    60cc:	2313      	movs	r3, #19
    60ce:	18fb      	adds	r3, r7, r3
    60d0:	781b      	ldrb	r3, [r3, #0]
    60d2:	b25b      	sxtb	r3, r3
    60d4:	2b00      	cmp	r3, #0
    60d6:	d112      	bne.n	60fe <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    60d8:	2310      	movs	r3, #16
    60da:	18fb      	adds	r3, r7, r3
    60dc:	881b      	ldrh	r3, [r3, #0]
    60de:	687a      	ldr	r2, [r7, #4]
    60e0:	1ad3      	subs	r3, r2, r3
    60e2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    60e4:	2310      	movs	r3, #16
    60e6:	18fb      	adds	r3, r7, r3
    60e8:	881b      	ldrh	r3, [r3, #0]
    60ea:	697a      	ldr	r2, [r7, #20]
    60ec:	18d3      	adds	r3, r2, r3
    60ee:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    60f0:	2310      	movs	r3, #16
    60f2:	18fb      	adds	r3, r7, r3
    60f4:	881b      	ldrh	r3, [r3, #0]
    60f6:	68fa      	ldr	r2, [r7, #12]
    60f8:	18d3      	adds	r3, r2, r3
    60fa:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    60fc:	e7b8      	b.n	6070 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    60fe:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    6100:	2313      	movs	r3, #19
    6102:	18fb      	adds	r3, r7, r3
    6104:	781b      	ldrb	r3, [r3, #0]
    6106:	b25b      	sxtb	r3, r3
}
    6108:	0018      	movs	r0, r3
    610a:	46bd      	mov	sp, r7
    610c:	b006      	add	sp, #24
    610e:	bd80      	pop	{r7, pc}
    6110:	20000000 	.word	0x20000000
    6114:	00006021 	.word	0x00006021

00006118 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    6118:	b580      	push	{r7, lr}
    611a:	b084      	sub	sp, #16
    611c:	af00      	add	r7, sp, #0
    611e:	60f8      	str	r0, [r7, #12]
    6120:	60b9      	str	r1, [r7, #8]
    6122:	1dbb      	adds	r3, r7, #6
    6124:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    6126:	1dbb      	adds	r3, r7, #6
    6128:	881a      	ldrh	r2, [r3, #0]
    612a:	68b9      	ldr	r1, [r7, #8]
    612c:	68fb      	ldr	r3, [r7, #12]
    612e:	0018      	movs	r0, r3
    6130:	4b03      	ldr	r3, [pc, #12]	; (6140 <p_nm_write_block+0x28>)
    6132:	4798      	blx	r3
    6134:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    6136:	0018      	movs	r0, r3
    6138:	46bd      	mov	sp, r7
    613a:	b004      	add	sp, #16
    613c:	bd80      	pop	{r7, pc}
    613e:	46c0      	nop			; (mov r8, r8)
    6140:	00007b31 	.word	0x00007b31

00006144 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    6144:	b580      	push	{r7, lr}
    6146:	b086      	sub	sp, #24
    6148:	af00      	add	r7, sp, #0
    614a:	60f8      	str	r0, [r7, #12]
    614c:	60b9      	str	r1, [r7, #8]
    614e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    6150:	4b2d      	ldr	r3, [pc, #180]	; (6208 <nm_write_block+0xc4>)
    6152:	881a      	ldrh	r2, [r3, #0]
    6154:	2310      	movs	r3, #16
    6156:	18fb      	adds	r3, r7, r3
    6158:	3a08      	subs	r2, #8
    615a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    615c:	2300      	movs	r3, #0
    615e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    6160:	2313      	movs	r3, #19
    6162:	18fb      	adds	r3, r7, r3
    6164:	2200      	movs	r2, #0
    6166:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    6168:	2310      	movs	r3, #16
    616a:	18fb      	adds	r3, r7, r3
    616c:	881a      	ldrh	r2, [r3, #0]
    616e:	687b      	ldr	r3, [r7, #4]
    6170:	429a      	cmp	r2, r3
    6172:	d313      	bcc.n	619c <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    6174:	68ba      	ldr	r2, [r7, #8]
    6176:	697b      	ldr	r3, [r7, #20]
    6178:	18d1      	adds	r1, r2, r3
    617a:	687b      	ldr	r3, [r7, #4]
    617c:	b29a      	uxth	r2, r3
    617e:	68fb      	ldr	r3, [r7, #12]
    6180:	0018      	movs	r0, r3
    6182:	4b22      	ldr	r3, [pc, #136]	; (620c <nm_write_block+0xc8>)
    6184:	4798      	blx	r3
    6186:	0003      	movs	r3, r0
    6188:	b2da      	uxtb	r2, r3
    618a:	2313      	movs	r3, #19
    618c:	18fb      	adds	r3, r7, r3
    618e:	781b      	ldrb	r3, [r3, #0]
    6190:	18d3      	adds	r3, r2, r3
    6192:	b2da      	uxtb	r2, r3
    6194:	2313      	movs	r3, #19
    6196:	18fb      	adds	r3, r7, r3
    6198:	701a      	strb	r2, [r3, #0]
			break;
    619a:	e02d      	b.n	61f8 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    619c:	68ba      	ldr	r2, [r7, #8]
    619e:	697b      	ldr	r3, [r7, #20]
    61a0:	18d1      	adds	r1, r2, r3
    61a2:	2310      	movs	r3, #16
    61a4:	18fb      	adds	r3, r7, r3
    61a6:	881a      	ldrh	r2, [r3, #0]
    61a8:	68fb      	ldr	r3, [r7, #12]
    61aa:	0018      	movs	r0, r3
    61ac:	4b17      	ldr	r3, [pc, #92]	; (620c <nm_write_block+0xc8>)
    61ae:	4798      	blx	r3
    61b0:	0003      	movs	r3, r0
    61b2:	b2da      	uxtb	r2, r3
    61b4:	2313      	movs	r3, #19
    61b6:	18fb      	adds	r3, r7, r3
    61b8:	781b      	ldrb	r3, [r3, #0]
    61ba:	18d3      	adds	r3, r2, r3
    61bc:	b2da      	uxtb	r2, r3
    61be:	2313      	movs	r3, #19
    61c0:	18fb      	adds	r3, r7, r3
    61c2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    61c4:	2313      	movs	r3, #19
    61c6:	18fb      	adds	r3, r7, r3
    61c8:	781b      	ldrb	r3, [r3, #0]
    61ca:	b25b      	sxtb	r3, r3
    61cc:	2b00      	cmp	r3, #0
    61ce:	d112      	bne.n	61f6 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    61d0:	2310      	movs	r3, #16
    61d2:	18fb      	adds	r3, r7, r3
    61d4:	881b      	ldrh	r3, [r3, #0]
    61d6:	687a      	ldr	r2, [r7, #4]
    61d8:	1ad3      	subs	r3, r2, r3
    61da:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    61dc:	2310      	movs	r3, #16
    61de:	18fb      	adds	r3, r7, r3
    61e0:	881b      	ldrh	r3, [r3, #0]
    61e2:	697a      	ldr	r2, [r7, #20]
    61e4:	18d3      	adds	r3, r2, r3
    61e6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    61e8:	2310      	movs	r3, #16
    61ea:	18fb      	adds	r3, r7, r3
    61ec:	881b      	ldrh	r3, [r3, #0]
    61ee:	68fa      	ldr	r2, [r7, #12]
    61f0:	18d3      	adds	r3, r2, r3
    61f2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    61f4:	e7b8      	b.n	6168 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    61f6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    61f8:	2313      	movs	r3, #19
    61fa:	18fb      	adds	r3, r7, r3
    61fc:	781b      	ldrb	r3, [r3, #0]
    61fe:	b25b      	sxtb	r3, r3
}
    6200:	0018      	movs	r0, r3
    6202:	46bd      	mov	sp, r7
    6204:	b006      	add	sp, #24
    6206:	bd80      	pop	{r7, pc}
    6208:	20000000 	.word	0x20000000
    620c:	00006119 	.word	0x00006119

00006210 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    6210:	b590      	push	{r4, r7, lr}
    6212:	b089      	sub	sp, #36	; 0x24
    6214:	af00      	add	r7, sp, #0
    6216:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    6218:	2300      	movs	r3, #0
    621a:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    621c:	231f      	movs	r3, #31
    621e:	18fb      	adds	r3, r7, r3
    6220:	2200      	movs	r2, #0
    6222:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    6224:	230c      	movs	r3, #12
    6226:	18fb      	adds	r3, r7, r3
    6228:	0018      	movs	r0, r3
    622a:	2308      	movs	r3, #8
    622c:	001a      	movs	r2, r3
    622e:	2100      	movs	r1, #0
    6230:	4b64      	ldr	r3, [pc, #400]	; (63c4 <nm_get_firmware_full_info+0x1b4>)
    6232:	4798      	blx	r3
	if (pstrRev != NULL)
    6234:	687b      	ldr	r3, [r7, #4]
    6236:	2b00      	cmp	r3, #0
    6238:	d100      	bne.n	623c <nm_get_firmware_full_info+0x2c>
    623a:	e0ba      	b.n	63b2 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    623c:	687b      	ldr	r3, [r7, #4]
    623e:	2228      	movs	r2, #40	; 0x28
    6240:	2100      	movs	r1, #0
    6242:	0018      	movs	r0, r3
    6244:	4b60      	ldr	r3, [pc, #384]	; (63c8 <nm_get_firmware_full_info+0x1b8>)
    6246:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    6248:	231f      	movs	r3, #31
    624a:	18fc      	adds	r4, r7, r3
    624c:	2314      	movs	r3, #20
    624e:	18fb      	adds	r3, r7, r3
    6250:	4a5e      	ldr	r2, [pc, #376]	; (63cc <nm_get_firmware_full_info+0x1bc>)
    6252:	0019      	movs	r1, r3
    6254:	0010      	movs	r0, r2
    6256:	4b5e      	ldr	r3, [pc, #376]	; (63d0 <nm_get_firmware_full_info+0x1c0>)
    6258:	4798      	blx	r3
    625a:	0003      	movs	r3, r0
    625c:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    625e:	231f      	movs	r3, #31
    6260:	18fb      	adds	r3, r7, r3
    6262:	781b      	ldrb	r3, [r3, #0]
    6264:	b25b      	sxtb	r3, r3
    6266:	2b00      	cmp	r3, #0
    6268:	d000      	beq.n	626c <nm_get_firmware_full_info+0x5c>
    626a:	e0a2      	b.n	63b2 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    626c:	697b      	ldr	r3, [r7, #20]
    626e:	2b00      	cmp	r3, #0
    6270:	d100      	bne.n	6274 <nm_get_firmware_full_info+0x64>
    6272:	e09a      	b.n	63aa <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    6274:	697b      	ldr	r3, [r7, #20]
    6276:	22c0      	movs	r2, #192	; 0xc0
    6278:	0292      	lsls	r2, r2, #10
    627a:	4313      	orrs	r3, r2
    627c:	221f      	movs	r2, #31
    627e:	18bc      	adds	r4, r7, r2
    6280:	220c      	movs	r2, #12
    6282:	18b9      	adds	r1, r7, r2
    6284:	2208      	movs	r2, #8
    6286:	0018      	movs	r0, r3
    6288:	4b52      	ldr	r3, [pc, #328]	; (63d4 <nm_get_firmware_full_info+0x1c4>)
    628a:	4798      	blx	r3
    628c:	0003      	movs	r3, r0
    628e:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    6290:	231f      	movs	r3, #31
    6292:	18fb      	adds	r3, r7, r3
    6294:	781b      	ldrb	r3, [r3, #0]
    6296:	b25b      	sxtb	r3, r3
    6298:	2b00      	cmp	r3, #0
    629a:	d000      	beq.n	629e <nm_get_firmware_full_info+0x8e>
    629c:	e089      	b.n	63b2 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    629e:	230c      	movs	r3, #12
    62a0:	18fb      	adds	r3, r7, r3
    62a2:	685b      	ldr	r3, [r3, #4]
    62a4:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    62a6:	697b      	ldr	r3, [r7, #20]
    62a8:	041b      	lsls	r3, r3, #16
    62aa:	0c1b      	lsrs	r3, r3, #16
    62ac:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    62ae:	697b      	ldr	r3, [r7, #20]
    62b0:	2b00      	cmp	r3, #0
    62b2:	d100      	bne.n	62b6 <nm_get_firmware_full_info+0xa6>
    62b4:	e074      	b.n	63a0 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    62b6:	697b      	ldr	r3, [r7, #20]
    62b8:	22c0      	movs	r2, #192	; 0xc0
    62ba:	0292      	lsls	r2, r2, #10
    62bc:	4313      	orrs	r3, r2
    62be:	221f      	movs	r2, #31
    62c0:	18bc      	adds	r4, r7, r2
    62c2:	6879      	ldr	r1, [r7, #4]
    62c4:	2228      	movs	r2, #40	; 0x28
    62c6:	0018      	movs	r0, r3
    62c8:	4b42      	ldr	r3, [pc, #264]	; (63d4 <nm_get_firmware_full_info+0x1c4>)
    62ca:	4798      	blx	r3
    62cc:	0003      	movs	r3, r0
    62ce:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    62d0:	231f      	movs	r3, #31
    62d2:	18fb      	adds	r3, r7, r3
    62d4:	781b      	ldrb	r3, [r3, #0]
    62d6:	b25b      	sxtb	r3, r3
    62d8:	2b00      	cmp	r3, #0
    62da:	d16a      	bne.n	63b2 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    62dc:	687b      	ldr	r3, [r7, #4]
    62de:	791b      	ldrb	r3, [r3, #4]
    62e0:	021b      	lsls	r3, r3, #8
    62e2:	b21a      	sxth	r2, r3
    62e4:	687b      	ldr	r3, [r7, #4]
    62e6:	795b      	ldrb	r3, [r3, #5]
    62e8:	011b      	lsls	r3, r3, #4
    62ea:	b21b      	sxth	r3, r3
    62ec:	21ff      	movs	r1, #255	; 0xff
    62ee:	400b      	ands	r3, r1
    62f0:	b21b      	sxth	r3, r3
    62f2:	4313      	orrs	r3, r2
    62f4:	b21a      	sxth	r2, r3
    62f6:	687b      	ldr	r3, [r7, #4]
    62f8:	799b      	ldrb	r3, [r3, #6]
    62fa:	b21b      	sxth	r3, r3
    62fc:	210f      	movs	r1, #15
    62fe:	400b      	ands	r3, r1
    6300:	b21b      	sxth	r3, r3
    6302:	4313      	orrs	r3, r2
    6304:	b21a      	sxth	r2, r3
    6306:	231c      	movs	r3, #28
    6308:	18fb      	adds	r3, r7, r3
    630a:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    630c:	231a      	movs	r3, #26
    630e:	18fb      	adds	r3, r7, r3
    6310:	4a31      	ldr	r2, [pc, #196]	; (63d8 <nm_get_firmware_full_info+0x1c8>)
    6312:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    6314:	687b      	ldr	r3, [r7, #4]
    6316:	79db      	ldrb	r3, [r3, #7]
    6318:	021b      	lsls	r3, r3, #8
    631a:	b21a      	sxth	r2, r3
    631c:	687b      	ldr	r3, [r7, #4]
    631e:	7a1b      	ldrb	r3, [r3, #8]
    6320:	011b      	lsls	r3, r3, #4
    6322:	b21b      	sxth	r3, r3
    6324:	21ff      	movs	r1, #255	; 0xff
    6326:	400b      	ands	r3, r1
    6328:	b21b      	sxth	r3, r3
    632a:	4313      	orrs	r3, r2
    632c:	b21a      	sxth	r2, r3
    632e:	687b      	ldr	r3, [r7, #4]
    6330:	7a5b      	ldrb	r3, [r3, #9]
    6332:	b21b      	sxth	r3, r3
    6334:	210f      	movs	r1, #15
    6336:	400b      	ands	r3, r1
    6338:	b21b      	sxth	r3, r3
    633a:	4313      	orrs	r3, r2
    633c:	b21a      	sxth	r2, r3
    633e:	2318      	movs	r3, #24
    6340:	18fb      	adds	r3, r7, r3
    6342:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    6344:	231c      	movs	r3, #28
    6346:	18fb      	adds	r3, r7, r3
    6348:	881b      	ldrh	r3, [r3, #0]
    634a:	2b00      	cmp	r3, #0
    634c:	d009      	beq.n	6362 <nm_get_firmware_full_info+0x152>
    634e:	2318      	movs	r3, #24
    6350:	18fb      	adds	r3, r7, r3
    6352:	881b      	ldrh	r3, [r3, #0]
    6354:	2b00      	cmp	r3, #0
    6356:	d004      	beq.n	6362 <nm_get_firmware_full_info+0x152>
    6358:	2318      	movs	r3, #24
    635a:	18fb      	adds	r3, r7, r3
    635c:	881b      	ldrh	r3, [r3, #0]
    635e:	2b00      	cmp	r3, #0
    6360:	d104      	bne.n	636c <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    6362:	231f      	movs	r3, #31
    6364:	18fb      	adds	r3, r7, r3
    6366:	22f4      	movs	r2, #244	; 0xf4
    6368:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    636a:	e022      	b.n	63b2 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    636c:	231a      	movs	r3, #26
    636e:	18fa      	adds	r2, r7, r3
    6370:	2318      	movs	r3, #24
    6372:	18fb      	adds	r3, r7, r3
    6374:	8812      	ldrh	r2, [r2, #0]
    6376:	881b      	ldrh	r3, [r3, #0]
    6378:	429a      	cmp	r2, r3
    637a:	d204      	bcs.n	6386 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    637c:	231f      	movs	r3, #31
    637e:	18fb      	adds	r3, r7, r3
    6380:	22f3      	movs	r2, #243	; 0xf3
    6382:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    6384:	e015      	b.n	63b2 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    6386:	231a      	movs	r3, #26
    6388:	18fa      	adds	r2, r7, r3
    638a:	231c      	movs	r3, #28
    638c:	18fb      	adds	r3, r7, r3
    638e:	8812      	ldrh	r2, [r2, #0]
    6390:	881b      	ldrh	r3, [r3, #0]
    6392:	429a      	cmp	r2, r3
    6394:	d90d      	bls.n	63b2 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    6396:	231f      	movs	r3, #31
    6398:	18fb      	adds	r3, r7, r3
    639a:	22f3      	movs	r2, #243	; 0xf3
    639c:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    639e:	e008      	b.n	63b2 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    63a0:	231f      	movs	r3, #31
    63a2:	18fb      	adds	r3, r7, r3
    63a4:	22f4      	movs	r2, #244	; 0xf4
    63a6:	701a      	strb	r2, [r3, #0]
    63a8:	e003      	b.n	63b2 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    63aa:	231f      	movs	r3, #31
    63ac:	18fb      	adds	r3, r7, r3
    63ae:	22f4      	movs	r2, #244	; 0xf4
    63b0:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    63b2:	231f      	movs	r3, #31
    63b4:	18fb      	adds	r3, r7, r3
    63b6:	781b      	ldrb	r3, [r3, #0]
    63b8:	b25b      	sxtb	r3, r3
}
    63ba:	0018      	movs	r0, r3
    63bc:	46bd      	mov	sp, r7
    63be:	b009      	add	sp, #36	; 0x24
    63c0:	bd90      	pop	{r4, r7, pc}
    63c2:	46c0      	nop			; (mov r8, r8)
    63c4:	0001340b 	.word	0x0001340b
    63c8:	00003f31 	.word	0x00003f31
    63cc:	000c0008 	.word	0x000c0008
    63d0:	00005fd9 	.word	0x00005fd9
    63d4:	0000604d 	.word	0x0000604d
    63d8:	00001352 	.word	0x00001352

000063dc <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    63dc:	b590      	push	{r4, r7, lr}
    63de:	b085      	sub	sp, #20
    63e0:	af00      	add	r7, sp, #0
    63e2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    63e4:	230f      	movs	r3, #15
    63e6:	18fb      	adds	r3, r7, r3
    63e8:	2200      	movs	r2, #0
    63ea:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    63ec:	687b      	ldr	r3, [r7, #4]
    63ee:	2b00      	cmp	r3, #0
    63f0:	d013      	beq.n	641a <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    63f2:	230e      	movs	r3, #14
    63f4:	18fb      	adds	r3, r7, r3
    63f6:	687a      	ldr	r2, [r7, #4]
    63f8:	7812      	ldrb	r2, [r2, #0]
    63fa:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    63fc:	230e      	movs	r3, #14
    63fe:	18fb      	adds	r3, r7, r3
    6400:	781b      	ldrb	r3, [r3, #0]
    6402:	2b00      	cmp	r3, #0
    6404:	d004      	beq.n	6410 <nm_drv_init+0x34>
    6406:	230e      	movs	r3, #14
    6408:	18fb      	adds	r3, r7, r3
    640a:	781b      	ldrb	r3, [r3, #0]
    640c:	2b04      	cmp	r3, #4
    640e:	d908      	bls.n	6422 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    6410:	230e      	movs	r3, #14
    6412:	18fb      	adds	r3, r7, r3
    6414:	2201      	movs	r2, #1
    6416:	701a      	strb	r2, [r3, #0]
    6418:	e003      	b.n	6422 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    641a:	230e      	movs	r3, #14
    641c:	18fb      	adds	r3, r7, r3
    641e:	2201      	movs	r2, #1
    6420:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    6422:	230f      	movs	r3, #15
    6424:	18fc      	adds	r4, r7, r3
    6426:	2000      	movs	r0, #0
    6428:	4b41      	ldr	r3, [pc, #260]	; (6530 <nm_drv_init+0x154>)
    642a:	4798      	blx	r3
    642c:	0003      	movs	r3, r0
    642e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    6430:	230f      	movs	r3, #15
    6432:	18fb      	adds	r3, r7, r3
    6434:	781b      	ldrb	r3, [r3, #0]
    6436:	b25b      	sxtb	r3, r3
    6438:	2b00      	cmp	r3, #0
    643a:	d00f      	beq.n	645c <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    643c:	2328      	movs	r3, #40	; 0x28
    643e:	33ff      	adds	r3, #255	; 0xff
    6440:	001a      	movs	r2, r3
    6442:	493c      	ldr	r1, [pc, #240]	; (6534 <nm_drv_init+0x158>)
    6444:	4b3c      	ldr	r3, [pc, #240]	; (6538 <nm_drv_init+0x15c>)
    6446:	0018      	movs	r0, r3
    6448:	4b3c      	ldr	r3, [pc, #240]	; (653c <nm_drv_init+0x160>)
    644a:	4798      	blx	r3
    644c:	4b3c      	ldr	r3, [pc, #240]	; (6540 <nm_drv_init+0x164>)
    644e:	0018      	movs	r0, r3
    6450:	4b3c      	ldr	r3, [pc, #240]	; (6544 <nm_drv_init+0x168>)
    6452:	4798      	blx	r3
    6454:	200d      	movs	r0, #13
    6456:	4b3c      	ldr	r3, [pc, #240]	; (6548 <nm_drv_init+0x16c>)
    6458:	4798      	blx	r3
		goto ERR1;
    645a:	e060      	b.n	651e <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    645c:	4b3b      	ldr	r3, [pc, #236]	; (654c <nm_drv_init+0x170>)
    645e:	0018      	movs	r0, r3
    6460:	4b36      	ldr	r3, [pc, #216]	; (653c <nm_drv_init+0x160>)
    6462:	4798      	blx	r3
    6464:	4b3a      	ldr	r3, [pc, #232]	; (6550 <nm_drv_init+0x174>)
    6466:	4798      	blx	r3
    6468:	0002      	movs	r2, r0
    646a:	4b3a      	ldr	r3, [pc, #232]	; (6554 <nm_drv_init+0x178>)
    646c:	0011      	movs	r1, r2
    646e:	0018      	movs	r0, r3
    6470:	4b32      	ldr	r3, [pc, #200]	; (653c <nm_drv_init+0x160>)
    6472:	4798      	blx	r3
    6474:	200d      	movs	r0, #13
    6476:	4b34      	ldr	r3, [pc, #208]	; (6548 <nm_drv_init+0x16c>)
    6478:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    647a:	4b37      	ldr	r3, [pc, #220]	; (6558 <nm_drv_init+0x17c>)
    647c:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    647e:	230f      	movs	r3, #15
    6480:	18fc      	adds	r4, r7, r3
    6482:	230e      	movs	r3, #14
    6484:	18fb      	adds	r3, r7, r3
    6486:	781b      	ldrb	r3, [r3, #0]
    6488:	0018      	movs	r0, r3
    648a:	4b34      	ldr	r3, [pc, #208]	; (655c <nm_drv_init+0x180>)
    648c:	4798      	blx	r3
    648e:	0003      	movs	r3, r0
    6490:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    6492:	230f      	movs	r3, #15
    6494:	18fb      	adds	r3, r7, r3
    6496:	781b      	ldrb	r3, [r3, #0]
    6498:	b25b      	sxtb	r3, r3
    649a:	2b00      	cmp	r3, #0
    649c:	d13a      	bne.n	6514 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    649e:	230f      	movs	r3, #15
    64a0:	18fc      	adds	r4, r7, r3
    64a2:	230e      	movs	r3, #14
    64a4:	18fb      	adds	r3, r7, r3
    64a6:	781b      	ldrb	r3, [r3, #0]
    64a8:	0018      	movs	r0, r3
    64aa:	4b2d      	ldr	r3, [pc, #180]	; (6560 <nm_drv_init+0x184>)
    64ac:	4798      	blx	r3
    64ae:	0003      	movs	r3, r0
    64b0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    64b2:	230f      	movs	r3, #15
    64b4:	18fb      	adds	r3, r7, r3
    64b6:	781b      	ldrb	r3, [r3, #0]
    64b8:	b25b      	sxtb	r3, r3
    64ba:	2b00      	cmp	r3, #0
    64bc:	d12c      	bne.n	6518 <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    64be:	230e      	movs	r3, #14
    64c0:	18fb      	adds	r3, r7, r3
    64c2:	781b      	ldrb	r3, [r3, #0]
    64c4:	2b02      	cmp	r3, #2
    64c6:	d02a      	beq.n	651e <nm_drv_init+0x142>
    64c8:	230e      	movs	r3, #14
    64ca:	18fb      	adds	r3, r7, r3
    64cc:	781b      	ldrb	r3, [r3, #0]
    64ce:	2b03      	cmp	r3, #3
    64d0:	d025      	beq.n	651e <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    64d2:	230f      	movs	r3, #15
    64d4:	18fc      	adds	r4, r7, r3
    64d6:	4b23      	ldr	r3, [pc, #140]	; (6564 <nm_drv_init+0x188>)
    64d8:	4798      	blx	r3
    64da:	0003      	movs	r3, r0
    64dc:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    64de:	230f      	movs	r3, #15
    64e0:	18fb      	adds	r3, r7, r3
    64e2:	781b      	ldrb	r3, [r3, #0]
    64e4:	b25b      	sxtb	r3, r3
    64e6:	2b00      	cmp	r3, #0
    64e8:	d00f      	beq.n	650a <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    64ea:	2356      	movs	r3, #86	; 0x56
    64ec:	33ff      	adds	r3, #255	; 0xff
    64ee:	001a      	movs	r2, r3
    64f0:	4910      	ldr	r1, [pc, #64]	; (6534 <nm_drv_init+0x158>)
    64f2:	4b11      	ldr	r3, [pc, #68]	; (6538 <nm_drv_init+0x15c>)
    64f4:	0018      	movs	r0, r3
    64f6:	4b11      	ldr	r3, [pc, #68]	; (653c <nm_drv_init+0x160>)
    64f8:	4798      	blx	r3
    64fa:	4b1b      	ldr	r3, [pc, #108]	; (6568 <nm_drv_init+0x18c>)
    64fc:	0018      	movs	r0, r3
    64fe:	4b11      	ldr	r3, [pc, #68]	; (6544 <nm_drv_init+0x168>)
    6500:	4798      	blx	r3
    6502:	200d      	movs	r0, #13
    6504:	4b10      	ldr	r3, [pc, #64]	; (6548 <nm_drv_init+0x16c>)
    6506:	4798      	blx	r3
		goto ERR2;
    6508:	e007      	b.n	651a <nm_drv_init+0x13e>
	}
	return ret;
    650a:	230f      	movs	r3, #15
    650c:	18fb      	adds	r3, r7, r3
    650e:	781b      	ldrb	r3, [r3, #0]
    6510:	b25b      	sxtb	r3, r3
    6512:	e008      	b.n	6526 <nm_drv_init+0x14a>
		goto ERR2;
    6514:	46c0      	nop			; (mov r8, r8)
    6516:	e000      	b.n	651a <nm_drv_init+0x13e>
		goto ERR2;
    6518:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    651a:	4b14      	ldr	r3, [pc, #80]	; (656c <nm_drv_init+0x190>)
    651c:	4798      	blx	r3
ERR1:
	return ret;
    651e:	230f      	movs	r3, #15
    6520:	18fb      	adds	r3, r7, r3
    6522:	781b      	ldrb	r3, [r3, #0]
    6524:	b25b      	sxtb	r3, r3
}
    6526:	0018      	movs	r0, r3
    6528:	46bd      	mov	sp, r7
    652a:	b005      	add	sp, #20
    652c:	bd90      	pop	{r4, r7, pc}
    652e:	46c0      	nop			; (mov r8, r8)
    6530:	00005f3d 	.word	0x00005f3d
    6534:	00019d20 	.word	0x00019d20
    6538:	00019c54 	.word	0x00019c54
    653c:	00013e4d 	.word	0x00013e4d
    6540:	00019c68 	.word	0x00019c68
    6544:	00013f69 	.word	0x00013f69
    6548:	00013e81 	.word	0x00013e81
    654c:	00019c84 	.word	0x00019c84
    6550:	000058dd 	.word	0x000058dd
    6554:	00019c90 	.word	0x00019c90
    6558:	000078b1 	.word	0x000078b1
    655c:	00005c31 	.word	0x00005c31
    6560:	00005dc9 	.word	0x00005dc9
    6564:	00005829 	.word	0x00005829
    6568:	00019ca0 	.word	0x00019ca0
    656c:	00005f71 	.word	0x00005f71

00006570 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    6570:	b590      	push	{r4, r7, lr}
    6572:	b085      	sub	sp, #20
    6574:	af00      	add	r7, sp, #0
    6576:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    6578:	230f      	movs	r3, #15
    657a:	18fc      	adds	r4, r7, r3
    657c:	4b2d      	ldr	r3, [pc, #180]	; (6634 <nm_drv_deinit+0xc4>)
    657e:	4798      	blx	r3
    6580:	0003      	movs	r3, r0
    6582:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    6584:	230f      	movs	r3, #15
    6586:	18fb      	adds	r3, r7, r3
    6588:	781b      	ldrb	r3, [r3, #0]
    658a:	b25b      	sxtb	r3, r3
    658c:	2b00      	cmp	r3, #0
    658e:	d00e      	beq.n	65ae <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    6590:	23b6      	movs	r3, #182	; 0xb6
    6592:	005a      	lsls	r2, r3, #1
    6594:	4928      	ldr	r1, [pc, #160]	; (6638 <nm_drv_deinit+0xc8>)
    6596:	4b29      	ldr	r3, [pc, #164]	; (663c <nm_drv_deinit+0xcc>)
    6598:	0018      	movs	r0, r3
    659a:	4b29      	ldr	r3, [pc, #164]	; (6640 <nm_drv_deinit+0xd0>)
    659c:	4798      	blx	r3
    659e:	4b29      	ldr	r3, [pc, #164]	; (6644 <nm_drv_deinit+0xd4>)
    65a0:	0018      	movs	r0, r3
    65a2:	4b29      	ldr	r3, [pc, #164]	; (6648 <nm_drv_deinit+0xd8>)
    65a4:	4798      	blx	r3
    65a6:	200d      	movs	r0, #13
    65a8:	4b28      	ldr	r3, [pc, #160]	; (664c <nm_drv_deinit+0xdc>)
    65aa:	4798      	blx	r3
		goto ERR1;
    65ac:	e03a      	b.n	6624 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    65ae:	230f      	movs	r3, #15
    65b0:	18fc      	adds	r4, r7, r3
    65b2:	2000      	movs	r0, #0
    65b4:	4b26      	ldr	r3, [pc, #152]	; (6650 <nm_drv_deinit+0xe0>)
    65b6:	4798      	blx	r3
    65b8:	0003      	movs	r3, r0
    65ba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    65bc:	230f      	movs	r3, #15
    65be:	18fb      	adds	r3, r7, r3
    65c0:	781b      	ldrb	r3, [r3, #0]
    65c2:	b25b      	sxtb	r3, r3
    65c4:	2b00      	cmp	r3, #0
    65c6:	d00f      	beq.n	65e8 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    65c8:	2374      	movs	r3, #116	; 0x74
    65ca:	33ff      	adds	r3, #255	; 0xff
    65cc:	001a      	movs	r2, r3
    65ce:	491a      	ldr	r1, [pc, #104]	; (6638 <nm_drv_deinit+0xc8>)
    65d0:	4b1a      	ldr	r3, [pc, #104]	; (663c <nm_drv_deinit+0xcc>)
    65d2:	0018      	movs	r0, r3
    65d4:	4b1a      	ldr	r3, [pc, #104]	; (6640 <nm_drv_deinit+0xd0>)
    65d6:	4798      	blx	r3
    65d8:	4b1e      	ldr	r3, [pc, #120]	; (6654 <nm_drv_deinit+0xe4>)
    65da:	0018      	movs	r0, r3
    65dc:	4b1a      	ldr	r3, [pc, #104]	; (6648 <nm_drv_deinit+0xd8>)
    65de:	4798      	blx	r3
    65e0:	200d      	movs	r0, #13
    65e2:	4b1a      	ldr	r3, [pc, #104]	; (664c <nm_drv_deinit+0xdc>)
    65e4:	4798      	blx	r3
		goto ERR1;
    65e6:	e01d      	b.n	6624 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    65e8:	230f      	movs	r3, #15
    65ea:	18fc      	adds	r4, r7, r3
    65ec:	4b1a      	ldr	r3, [pc, #104]	; (6658 <nm_drv_deinit+0xe8>)
    65ee:	4798      	blx	r3
    65f0:	0003      	movs	r3, r0
    65f2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    65f4:	230f      	movs	r3, #15
    65f6:	18fb      	adds	r3, r7, r3
    65f8:	781b      	ldrb	r3, [r3, #0]
    65fa:	b25b      	sxtb	r3, r3
    65fc:	2b00      	cmp	r3, #0
    65fe:	d00f      	beq.n	6620 <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    6600:	237a      	movs	r3, #122	; 0x7a
    6602:	33ff      	adds	r3, #255	; 0xff
    6604:	001a      	movs	r2, r3
    6606:	490c      	ldr	r1, [pc, #48]	; (6638 <nm_drv_deinit+0xc8>)
    6608:	4b0c      	ldr	r3, [pc, #48]	; (663c <nm_drv_deinit+0xcc>)
    660a:	0018      	movs	r0, r3
    660c:	4b0c      	ldr	r3, [pc, #48]	; (6640 <nm_drv_deinit+0xd0>)
    660e:	4798      	blx	r3
    6610:	4b12      	ldr	r3, [pc, #72]	; (665c <nm_drv_deinit+0xec>)
    6612:	0018      	movs	r0, r3
    6614:	4b0c      	ldr	r3, [pc, #48]	; (6648 <nm_drv_deinit+0xd8>)
    6616:	4798      	blx	r3
    6618:	200d      	movs	r0, #13
    661a:	4b0c      	ldr	r3, [pc, #48]	; (664c <nm_drv_deinit+0xdc>)
    661c:	4798      	blx	r3
		goto ERR1;
    661e:	e001      	b.n	6624 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    6620:	4b0f      	ldr	r3, [pc, #60]	; (6660 <nm_drv_deinit+0xf0>)
    6622:	4798      	blx	r3
#endif

ERR1:
	return ret;
    6624:	230f      	movs	r3, #15
    6626:	18fb      	adds	r3, r7, r3
    6628:	781b      	ldrb	r3, [r3, #0]
    662a:	b25b      	sxtb	r3, r3
}
    662c:	0018      	movs	r0, r3
    662e:	46bd      	mov	sp, r7
    6630:	b005      	add	sp, #20
    6632:	bd90      	pop	{r4, r7, pc}
    6634:	00005e7d 	.word	0x00005e7d
    6638:	00019d2c 	.word	0x00019d2c
    663c:	00019c54 	.word	0x00019c54
    6640:	00013e4d 	.word	0x00013e4d
    6644:	00019cc0 	.word	0x00019cc0
    6648:	00013f69 	.word	0x00013f69
    664c:	00013e81 	.word	0x00013e81
    6650:	00008d51 	.word	0x00008d51
    6654:	00019ce0 	.word	0x00019ce0
    6658:	00005f71 	.word	0x00005f71
    665c:	00019d04 	.word	0x00019d04
    6660:	000079fd 	.word	0x000079fd

00006664 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    6664:	b580      	push	{r7, lr}
    6666:	b086      	sub	sp, #24
    6668:	af00      	add	r7, sp, #0
    666a:	6078      	str	r0, [r7, #4]
    666c:	000a      	movs	r2, r1
    666e:	1cbb      	adds	r3, r7, #2
    6670:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    6672:	230c      	movs	r3, #12
    6674:	18fb      	adds	r3, r7, r3
    6676:	2200      	movs	r2, #0
    6678:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    667a:	230c      	movs	r3, #12
    667c:	18fb      	adds	r3, r7, r3
    667e:	687a      	ldr	r2, [r7, #4]
    6680:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    6682:	230c      	movs	r3, #12
    6684:	18fb      	adds	r3, r7, r3
    6686:	1cba      	adds	r2, r7, #2
    6688:	8812      	ldrh	r2, [r2, #0]
    668a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    668c:	230c      	movs	r3, #12
    668e:	18fb      	adds	r3, r7, r3
    6690:	0019      	movs	r1, r3
    6692:	2003      	movs	r0, #3
    6694:	4b03      	ldr	r3, [pc, #12]	; (66a4 <nmi_spi_read+0x40>)
    6696:	4798      	blx	r3
    6698:	0003      	movs	r3, r0
}
    669a:	0018      	movs	r0, r3
    669c:	46bd      	mov	sp, r7
    669e:	b006      	add	sp, #24
    66a0:	bd80      	pop	{r7, pc}
    66a2:	46c0      	nop			; (mov r8, r8)
    66a4:	00003df1 	.word	0x00003df1

000066a8 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    66a8:	b580      	push	{r7, lr}
    66aa:	b086      	sub	sp, #24
    66ac:	af00      	add	r7, sp, #0
    66ae:	6078      	str	r0, [r7, #4]
    66b0:	000a      	movs	r2, r1
    66b2:	1cbb      	adds	r3, r7, #2
    66b4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    66b6:	230c      	movs	r3, #12
    66b8:	18fb      	adds	r3, r7, r3
    66ba:	687a      	ldr	r2, [r7, #4]
    66bc:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    66be:	230c      	movs	r3, #12
    66c0:	18fb      	adds	r3, r7, r3
    66c2:	2200      	movs	r2, #0
    66c4:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    66c6:	230c      	movs	r3, #12
    66c8:	18fb      	adds	r3, r7, r3
    66ca:	1cba      	adds	r2, r7, #2
    66cc:	8812      	ldrh	r2, [r2, #0]
    66ce:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    66d0:	230c      	movs	r3, #12
    66d2:	18fb      	adds	r3, r7, r3
    66d4:	0019      	movs	r1, r3
    66d6:	2003      	movs	r0, #3
    66d8:	4b03      	ldr	r3, [pc, #12]	; (66e8 <nmi_spi_write+0x40>)
    66da:	4798      	blx	r3
    66dc:	0003      	movs	r3, r0
}
    66de:	0018      	movs	r0, r3
    66e0:	46bd      	mov	sp, r7
    66e2:	b006      	add	sp, #24
    66e4:	bd80      	pop	{r7, pc}
    66e6:	46c0      	nop			; (mov r8, r8)
    66e8:	00003df1 	.word	0x00003df1

000066ec <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    66ec:	b580      	push	{r7, lr}
    66ee:	b082      	sub	sp, #8
    66f0:	af00      	add	r7, sp, #0
    66f2:	0002      	movs	r2, r0
    66f4:	1dfb      	adds	r3, r7, #7
    66f6:	701a      	strb	r2, [r3, #0]
    66f8:	1dbb      	adds	r3, r7, #6
    66fa:	1c0a      	adds	r2, r1, #0
    66fc:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    66fe:	1dfb      	adds	r3, r7, #7
    6700:	781b      	ldrb	r3, [r3, #0]
    6702:	005a      	lsls	r2, r3, #1
    6704:	1dbb      	adds	r3, r7, #6
    6706:	781b      	ldrb	r3, [r3, #0]
    6708:	4053      	eors	r3, r2
    670a:	4a03      	ldr	r2, [pc, #12]	; (6718 <crc7_byte+0x2c>)
    670c:	5cd3      	ldrb	r3, [r2, r3]
}
    670e:	0018      	movs	r0, r3
    6710:	46bd      	mov	sp, r7
    6712:	b002      	add	sp, #8
    6714:	bd80      	pop	{r7, pc}
    6716:	46c0      	nop			; (mov r8, r8)
    6718:	00019d3c 	.word	0x00019d3c

0000671c <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    671c:	b590      	push	{r4, r7, lr}
    671e:	b085      	sub	sp, #20
    6720:	af00      	add	r7, sp, #0
    6722:	60b9      	str	r1, [r7, #8]
    6724:	607a      	str	r2, [r7, #4]
    6726:	230f      	movs	r3, #15
    6728:	18fb      	adds	r3, r7, r3
    672a:	1c02      	adds	r2, r0, #0
    672c:	701a      	strb	r2, [r3, #0]
	while (len--)
    672e:	e00e      	b.n	674e <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    6730:	68bb      	ldr	r3, [r7, #8]
    6732:	1c5a      	adds	r2, r3, #1
    6734:	60ba      	str	r2, [r7, #8]
    6736:	781a      	ldrb	r2, [r3, #0]
    6738:	230f      	movs	r3, #15
    673a:	18fc      	adds	r4, r7, r3
    673c:	230f      	movs	r3, #15
    673e:	18fb      	adds	r3, r7, r3
    6740:	781b      	ldrb	r3, [r3, #0]
    6742:	0011      	movs	r1, r2
    6744:	0018      	movs	r0, r3
    6746:	4b08      	ldr	r3, [pc, #32]	; (6768 <crc7+0x4c>)
    6748:	4798      	blx	r3
    674a:	0003      	movs	r3, r0
    674c:	7023      	strb	r3, [r4, #0]
	while (len--)
    674e:	687b      	ldr	r3, [r7, #4]
    6750:	1e5a      	subs	r2, r3, #1
    6752:	607a      	str	r2, [r7, #4]
    6754:	2b00      	cmp	r3, #0
    6756:	d1eb      	bne.n	6730 <crc7+0x14>
	return crc;
    6758:	230f      	movs	r3, #15
    675a:	18fb      	adds	r3, r7, r3
    675c:	781b      	ldrb	r3, [r3, #0]
}
    675e:	0018      	movs	r0, r3
    6760:	46bd      	mov	sp, r7
    6762:	b005      	add	sp, #20
    6764:	bd90      	pop	{r4, r7, pc}
    6766:	46c0      	nop			; (mov r8, r8)
    6768:	000066ed 	.word	0x000066ed

0000676c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    676c:	b590      	push	{r4, r7, lr}
    676e:	b089      	sub	sp, #36	; 0x24
    6770:	af00      	add	r7, sp, #0
    6772:	60b9      	str	r1, [r7, #8]
    6774:	607a      	str	r2, [r7, #4]
    6776:	603b      	str	r3, [r7, #0]
    6778:	230f      	movs	r3, #15
    677a:	18fb      	adds	r3, r7, r3
    677c:	1c02      	adds	r2, r0, #0
    677e:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    6780:	231f      	movs	r3, #31
    6782:	18fb      	adds	r3, r7, r3
    6784:	2205      	movs	r2, #5
    6786:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    6788:	231e      	movs	r3, #30
    678a:	18fb      	adds	r3, r7, r3
    678c:	2201      	movs	r2, #1
    678e:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    6790:	2314      	movs	r3, #20
    6792:	18fb      	adds	r3, r7, r3
    6794:	220f      	movs	r2, #15
    6796:	18ba      	adds	r2, r7, r2
    6798:	7812      	ldrb	r2, [r2, #0]
    679a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    679c:	230f      	movs	r3, #15
    679e:	18fb      	adds	r3, r7, r3
    67a0:	781b      	ldrb	r3, [r3, #0]
    67a2:	3bc1      	subs	r3, #193	; 0xc1
    67a4:	2b0e      	cmp	r3, #14
    67a6:	d900      	bls.n	67aa <spi_cmd+0x3e>
    67a8:	e11b      	b.n	69e2 <spi_cmd+0x276>
    67aa:	009a      	lsls	r2, r3, #2
    67ac:	4bb6      	ldr	r3, [pc, #728]	; (6a88 <spi_cmd+0x31c>)
    67ae:	18d3      	adds	r3, r2, r3
    67b0:	681b      	ldr	r3, [r3, #0]
    67b2:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    67b4:	68bb      	ldr	r3, [r7, #8]
    67b6:	0c1b      	lsrs	r3, r3, #16
    67b8:	b2da      	uxtb	r2, r3
    67ba:	2314      	movs	r3, #20
    67bc:	18fb      	adds	r3, r7, r3
    67be:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    67c0:	68bb      	ldr	r3, [r7, #8]
    67c2:	0a1b      	lsrs	r3, r3, #8
    67c4:	b2da      	uxtb	r2, r3
    67c6:	2314      	movs	r3, #20
    67c8:	18fb      	adds	r3, r7, r3
    67ca:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    67cc:	68bb      	ldr	r3, [r7, #8]
    67ce:	b2da      	uxtb	r2, r3
    67d0:	2314      	movs	r3, #20
    67d2:	18fb      	adds	r3, r7, r3
    67d4:	70da      	strb	r2, [r3, #3]
		len = 5;
    67d6:	231f      	movs	r3, #31
    67d8:	18fb      	adds	r3, r7, r3
    67da:	2205      	movs	r2, #5
    67dc:	701a      	strb	r2, [r3, #0]
		break;
    67de:	e105      	b.n	69ec <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    67e0:	68bb      	ldr	r3, [r7, #8]
    67e2:	0a1b      	lsrs	r3, r3, #8
    67e4:	b2da      	uxtb	r2, r3
    67e6:	2314      	movs	r3, #20
    67e8:	18fb      	adds	r3, r7, r3
    67ea:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    67ec:	2330      	movs	r3, #48	; 0x30
    67ee:	18fb      	adds	r3, r7, r3
    67f0:	781b      	ldrb	r3, [r3, #0]
    67f2:	2b00      	cmp	r3, #0
    67f4:	d009      	beq.n	680a <spi_cmd+0x9e>
    67f6:	2314      	movs	r3, #20
    67f8:	18fb      	adds	r3, r7, r3
    67fa:	785b      	ldrb	r3, [r3, #1]
    67fc:	2280      	movs	r2, #128	; 0x80
    67fe:	4252      	negs	r2, r2
    6800:	4313      	orrs	r3, r2
    6802:	b2da      	uxtb	r2, r3
    6804:	2314      	movs	r3, #20
    6806:	18fb      	adds	r3, r7, r3
    6808:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    680a:	68bb      	ldr	r3, [r7, #8]
    680c:	b2da      	uxtb	r2, r3
    680e:	2314      	movs	r3, #20
    6810:	18fb      	adds	r3, r7, r3
    6812:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    6814:	2314      	movs	r3, #20
    6816:	18fb      	adds	r3, r7, r3
    6818:	2200      	movs	r2, #0
    681a:	70da      	strb	r2, [r3, #3]
		len = 5;
    681c:	231f      	movs	r3, #31
    681e:	18fb      	adds	r3, r7, r3
    6820:	2205      	movs	r2, #5
    6822:	701a      	strb	r2, [r3, #0]
		break;
    6824:	e0e2      	b.n	69ec <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    6826:	2314      	movs	r3, #20
    6828:	18fb      	adds	r3, r7, r3
    682a:	2200      	movs	r2, #0
    682c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    682e:	2314      	movs	r3, #20
    6830:	18fb      	adds	r3, r7, r3
    6832:	2200      	movs	r2, #0
    6834:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    6836:	2314      	movs	r3, #20
    6838:	18fb      	adds	r3, r7, r3
    683a:	2200      	movs	r2, #0
    683c:	70da      	strb	r2, [r3, #3]
		len = 5;
    683e:	231f      	movs	r3, #31
    6840:	18fb      	adds	r3, r7, r3
    6842:	2205      	movs	r2, #5
    6844:	701a      	strb	r2, [r3, #0]
		break;
    6846:	e0d1      	b.n	69ec <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    6848:	2314      	movs	r3, #20
    684a:	18fb      	adds	r3, r7, r3
    684c:	2200      	movs	r2, #0
    684e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    6850:	2314      	movs	r3, #20
    6852:	18fb      	adds	r3, r7, r3
    6854:	2200      	movs	r2, #0
    6856:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    6858:	2314      	movs	r3, #20
    685a:	18fb      	adds	r3, r7, r3
    685c:	2200      	movs	r2, #0
    685e:	70da      	strb	r2, [r3, #3]
		len = 5;
    6860:	231f      	movs	r3, #31
    6862:	18fb      	adds	r3, r7, r3
    6864:	2205      	movs	r2, #5
    6866:	701a      	strb	r2, [r3, #0]
		break;
    6868:	e0c0      	b.n	69ec <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    686a:	2314      	movs	r3, #20
    686c:	18fb      	adds	r3, r7, r3
    686e:	22ff      	movs	r2, #255	; 0xff
    6870:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    6872:	2314      	movs	r3, #20
    6874:	18fb      	adds	r3, r7, r3
    6876:	22ff      	movs	r2, #255	; 0xff
    6878:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    687a:	2314      	movs	r3, #20
    687c:	18fb      	adds	r3, r7, r3
    687e:	22ff      	movs	r2, #255	; 0xff
    6880:	70da      	strb	r2, [r3, #3]
		len = 5;
    6882:	231f      	movs	r3, #31
    6884:	18fb      	adds	r3, r7, r3
    6886:	2205      	movs	r2, #5
    6888:	701a      	strb	r2, [r3, #0]
		break;
    688a:	e0af      	b.n	69ec <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    688c:	68bb      	ldr	r3, [r7, #8]
    688e:	0c1b      	lsrs	r3, r3, #16
    6890:	b2da      	uxtb	r2, r3
    6892:	2314      	movs	r3, #20
    6894:	18fb      	adds	r3, r7, r3
    6896:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    6898:	68bb      	ldr	r3, [r7, #8]
    689a:	0a1b      	lsrs	r3, r3, #8
    689c:	b2da      	uxtb	r2, r3
    689e:	2314      	movs	r3, #20
    68a0:	18fb      	adds	r3, r7, r3
    68a2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    68a4:	68bb      	ldr	r3, [r7, #8]
    68a6:	b2da      	uxtb	r2, r3
    68a8:	2314      	movs	r3, #20
    68aa:	18fb      	adds	r3, r7, r3
    68ac:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    68ae:	683b      	ldr	r3, [r7, #0]
    68b0:	0a1b      	lsrs	r3, r3, #8
    68b2:	b2da      	uxtb	r2, r3
    68b4:	2314      	movs	r3, #20
    68b6:	18fb      	adds	r3, r7, r3
    68b8:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    68ba:	683b      	ldr	r3, [r7, #0]
    68bc:	b2da      	uxtb	r2, r3
    68be:	2314      	movs	r3, #20
    68c0:	18fb      	adds	r3, r7, r3
    68c2:	715a      	strb	r2, [r3, #5]
		len = 7;
    68c4:	231f      	movs	r3, #31
    68c6:	18fb      	adds	r3, r7, r3
    68c8:	2207      	movs	r2, #7
    68ca:	701a      	strb	r2, [r3, #0]
		break;
    68cc:	e08e      	b.n	69ec <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    68ce:	68bb      	ldr	r3, [r7, #8]
    68d0:	0c1b      	lsrs	r3, r3, #16
    68d2:	b2da      	uxtb	r2, r3
    68d4:	2314      	movs	r3, #20
    68d6:	18fb      	adds	r3, r7, r3
    68d8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    68da:	68bb      	ldr	r3, [r7, #8]
    68dc:	0a1b      	lsrs	r3, r3, #8
    68de:	b2da      	uxtb	r2, r3
    68e0:	2314      	movs	r3, #20
    68e2:	18fb      	adds	r3, r7, r3
    68e4:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    68e6:	68bb      	ldr	r3, [r7, #8]
    68e8:	b2da      	uxtb	r2, r3
    68ea:	2314      	movs	r3, #20
    68ec:	18fb      	adds	r3, r7, r3
    68ee:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    68f0:	683b      	ldr	r3, [r7, #0]
    68f2:	0c1b      	lsrs	r3, r3, #16
    68f4:	b2da      	uxtb	r2, r3
    68f6:	2314      	movs	r3, #20
    68f8:	18fb      	adds	r3, r7, r3
    68fa:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    68fc:	683b      	ldr	r3, [r7, #0]
    68fe:	0a1b      	lsrs	r3, r3, #8
    6900:	b2da      	uxtb	r2, r3
    6902:	2314      	movs	r3, #20
    6904:	18fb      	adds	r3, r7, r3
    6906:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    6908:	683b      	ldr	r3, [r7, #0]
    690a:	b2da      	uxtb	r2, r3
    690c:	2314      	movs	r3, #20
    690e:	18fb      	adds	r3, r7, r3
    6910:	719a      	strb	r2, [r3, #6]
		len = 8;
    6912:	231f      	movs	r3, #31
    6914:	18fb      	adds	r3, r7, r3
    6916:	2208      	movs	r2, #8
    6918:	701a      	strb	r2, [r3, #0]
		break;
    691a:	e067      	b.n	69ec <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    691c:	68bb      	ldr	r3, [r7, #8]
    691e:	0a1b      	lsrs	r3, r3, #8
    6920:	b2da      	uxtb	r2, r3
    6922:	2314      	movs	r3, #20
    6924:	18fb      	adds	r3, r7, r3
    6926:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    6928:	2330      	movs	r3, #48	; 0x30
    692a:	18fb      	adds	r3, r7, r3
    692c:	781b      	ldrb	r3, [r3, #0]
    692e:	2b00      	cmp	r3, #0
    6930:	d009      	beq.n	6946 <spi_cmd+0x1da>
    6932:	2314      	movs	r3, #20
    6934:	18fb      	adds	r3, r7, r3
    6936:	785b      	ldrb	r3, [r3, #1]
    6938:	2280      	movs	r2, #128	; 0x80
    693a:	4252      	negs	r2, r2
    693c:	4313      	orrs	r3, r2
    693e:	b2da      	uxtb	r2, r3
    6940:	2314      	movs	r3, #20
    6942:	18fb      	adds	r3, r7, r3
    6944:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    6946:	68bb      	ldr	r3, [r7, #8]
    6948:	b2da      	uxtb	r2, r3
    694a:	2314      	movs	r3, #20
    694c:	18fb      	adds	r3, r7, r3
    694e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    6950:	687b      	ldr	r3, [r7, #4]
    6952:	0e1b      	lsrs	r3, r3, #24
    6954:	b2da      	uxtb	r2, r3
    6956:	2314      	movs	r3, #20
    6958:	18fb      	adds	r3, r7, r3
    695a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    695c:	687b      	ldr	r3, [r7, #4]
    695e:	0c1b      	lsrs	r3, r3, #16
    6960:	b2da      	uxtb	r2, r3
    6962:	2314      	movs	r3, #20
    6964:	18fb      	adds	r3, r7, r3
    6966:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    6968:	687b      	ldr	r3, [r7, #4]
    696a:	0a1b      	lsrs	r3, r3, #8
    696c:	b2da      	uxtb	r2, r3
    696e:	2314      	movs	r3, #20
    6970:	18fb      	adds	r3, r7, r3
    6972:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    6974:	687b      	ldr	r3, [r7, #4]
    6976:	b2da      	uxtb	r2, r3
    6978:	2314      	movs	r3, #20
    697a:	18fb      	adds	r3, r7, r3
    697c:	719a      	strb	r2, [r3, #6]
		len = 8;
    697e:	231f      	movs	r3, #31
    6980:	18fb      	adds	r3, r7, r3
    6982:	2208      	movs	r2, #8
    6984:	701a      	strb	r2, [r3, #0]
		break;
    6986:	e031      	b.n	69ec <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    6988:	68bb      	ldr	r3, [r7, #8]
    698a:	0c1b      	lsrs	r3, r3, #16
    698c:	b2da      	uxtb	r2, r3
    698e:	2314      	movs	r3, #20
    6990:	18fb      	adds	r3, r7, r3
    6992:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    6994:	68bb      	ldr	r3, [r7, #8]
    6996:	0a1b      	lsrs	r3, r3, #8
    6998:	b2da      	uxtb	r2, r3
    699a:	2314      	movs	r3, #20
    699c:	18fb      	adds	r3, r7, r3
    699e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    69a0:	68bb      	ldr	r3, [r7, #8]
    69a2:	b2da      	uxtb	r2, r3
    69a4:	2314      	movs	r3, #20
    69a6:	18fb      	adds	r3, r7, r3
    69a8:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	0e1b      	lsrs	r3, r3, #24
    69ae:	b2da      	uxtb	r2, r3
    69b0:	2314      	movs	r3, #20
    69b2:	18fb      	adds	r3, r7, r3
    69b4:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    69b6:	687b      	ldr	r3, [r7, #4]
    69b8:	0c1b      	lsrs	r3, r3, #16
    69ba:	b2da      	uxtb	r2, r3
    69bc:	2314      	movs	r3, #20
    69be:	18fb      	adds	r3, r7, r3
    69c0:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    69c2:	687b      	ldr	r3, [r7, #4]
    69c4:	0a1b      	lsrs	r3, r3, #8
    69c6:	b2da      	uxtb	r2, r3
    69c8:	2314      	movs	r3, #20
    69ca:	18fb      	adds	r3, r7, r3
    69cc:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    69ce:	687b      	ldr	r3, [r7, #4]
    69d0:	b2da      	uxtb	r2, r3
    69d2:	2314      	movs	r3, #20
    69d4:	18fb      	adds	r3, r7, r3
    69d6:	71da      	strb	r2, [r3, #7]
		len = 9;
    69d8:	231f      	movs	r3, #31
    69da:	18fb      	adds	r3, r7, r3
    69dc:	2209      	movs	r2, #9
    69de:	701a      	strb	r2, [r3, #0]
		break;
    69e0:	e004      	b.n	69ec <spi_cmd+0x280>
	default:
		result = N_FAIL;
    69e2:	231e      	movs	r3, #30
    69e4:	18fb      	adds	r3, r7, r3
    69e6:	2200      	movs	r2, #0
    69e8:	701a      	strb	r2, [r3, #0]
		break;
    69ea:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    69ec:	231e      	movs	r3, #30
    69ee:	18fb      	adds	r3, r7, r3
    69f0:	781b      	ldrb	r3, [r3, #0]
    69f2:	b25b      	sxtb	r3, r3
    69f4:	2b00      	cmp	r3, #0
    69f6:	d03f      	beq.n	6a78 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    69f8:	4b24      	ldr	r3, [pc, #144]	; (6a8c <spi_cmd+0x320>)
    69fa:	781b      	ldrb	r3, [r3, #0]
    69fc:	2b00      	cmp	r3, #0
    69fe:	d115      	bne.n	6a2c <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    6a00:	231f      	movs	r3, #31
    6a02:	18fb      	adds	r3, r7, r3
    6a04:	781b      	ldrb	r3, [r3, #0]
    6a06:	1e5c      	subs	r4, r3, #1
    6a08:	231f      	movs	r3, #31
    6a0a:	18fb      	adds	r3, r7, r3
    6a0c:	781b      	ldrb	r3, [r3, #0]
    6a0e:	3b01      	subs	r3, #1
    6a10:	001a      	movs	r2, r3
    6a12:	2314      	movs	r3, #20
    6a14:	18fb      	adds	r3, r7, r3
    6a16:	0019      	movs	r1, r3
    6a18:	207f      	movs	r0, #127	; 0x7f
    6a1a:	4b1d      	ldr	r3, [pc, #116]	; (6a90 <spi_cmd+0x324>)
    6a1c:	4798      	blx	r3
    6a1e:	0003      	movs	r3, r0
    6a20:	18db      	adds	r3, r3, r3
    6a22:	b2da      	uxtb	r2, r3
    6a24:	2314      	movs	r3, #20
    6a26:	18fb      	adds	r3, r7, r3
    6a28:	551a      	strb	r2, [r3, r4]
    6a2a:	e006      	b.n	6a3a <spi_cmd+0x2ce>
		else
			len-=1;
    6a2c:	231f      	movs	r3, #31
    6a2e:	18fb      	adds	r3, r7, r3
    6a30:	221f      	movs	r2, #31
    6a32:	18ba      	adds	r2, r7, r2
    6a34:	7812      	ldrb	r2, [r2, #0]
    6a36:	3a01      	subs	r2, #1
    6a38:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    6a3a:	231f      	movs	r3, #31
    6a3c:	18fb      	adds	r3, r7, r3
    6a3e:	781b      	ldrb	r3, [r3, #0]
    6a40:	b29a      	uxth	r2, r3
    6a42:	2314      	movs	r3, #20
    6a44:	18fb      	adds	r3, r7, r3
    6a46:	0011      	movs	r1, r2
    6a48:	0018      	movs	r0, r3
    6a4a:	4b12      	ldr	r3, [pc, #72]	; (6a94 <spi_cmd+0x328>)
    6a4c:	4798      	blx	r3
    6a4e:	1e03      	subs	r3, r0, #0
    6a50:	d012      	beq.n	6a78 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    6a52:	2328      	movs	r3, #40	; 0x28
    6a54:	33ff      	adds	r3, #255	; 0xff
    6a56:	001a      	movs	r2, r3
    6a58:	490f      	ldr	r1, [pc, #60]	; (6a98 <spi_cmd+0x32c>)
    6a5a:	4b10      	ldr	r3, [pc, #64]	; (6a9c <spi_cmd+0x330>)
    6a5c:	0018      	movs	r0, r3
    6a5e:	4b10      	ldr	r3, [pc, #64]	; (6aa0 <spi_cmd+0x334>)
    6a60:	4798      	blx	r3
    6a62:	4b10      	ldr	r3, [pc, #64]	; (6aa4 <spi_cmd+0x338>)
    6a64:	0018      	movs	r0, r3
    6a66:	4b10      	ldr	r3, [pc, #64]	; (6aa8 <spi_cmd+0x33c>)
    6a68:	4798      	blx	r3
    6a6a:	200d      	movs	r0, #13
    6a6c:	4b0f      	ldr	r3, [pc, #60]	; (6aac <spi_cmd+0x340>)
    6a6e:	4798      	blx	r3
			result = N_FAIL;
    6a70:	231e      	movs	r3, #30
    6a72:	18fb      	adds	r3, r7, r3
    6a74:	2200      	movs	r2, #0
    6a76:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    6a78:	231e      	movs	r3, #30
    6a7a:	18fb      	adds	r3, r7, r3
    6a7c:	781b      	ldrb	r3, [r3, #0]
    6a7e:	b25b      	sxtb	r3, r3
}
    6a80:	0018      	movs	r0, r3
    6a82:	46bd      	mov	sp, r7
    6a84:	b009      	add	sp, #36	; 0x24
    6a86:	bd90      	pop	{r4, r7, pc}
    6a88:	0001a394 	.word	0x0001a394
    6a8c:	2000022c 	.word	0x2000022c
    6a90:	0000671d 	.word	0x0000671d
    6a94:	000066a9 	.word	0x000066a9
    6a98:	0001a3d0 	.word	0x0001a3d0
    6a9c:	00019e3c 	.word	0x00019e3c
    6aa0:	00013e4d 	.word	0x00013e4d
    6aa4:	00019e50 	.word	0x00019e50
    6aa8:	00013f69 	.word	0x00013f69
    6aac:	00013e81 	.word	0x00013e81

00006ab0 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    6ab0:	b590      	push	{r4, r7, lr}
    6ab2:	b085      	sub	sp, #20
    6ab4:	af00      	add	r7, sp, #0
    6ab6:	0002      	movs	r2, r0
    6ab8:	1dfb      	adds	r3, r7, #7
    6aba:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    6abc:	230e      	movs	r3, #14
    6abe:	18fb      	adds	r3, r7, r3
    6ac0:	2201      	movs	r2, #1
    6ac2:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    6ac4:	4b31      	ldr	r3, [pc, #196]	; (6b8c <spi_data_rsp+0xdc>)
    6ac6:	781b      	ldrb	r3, [r3, #0]
    6ac8:	2b00      	cmp	r3, #0
    6aca:	d104      	bne.n	6ad6 <spi_data_rsp+0x26>
		len = 2;
    6acc:	230f      	movs	r3, #15
    6ace:	18fb      	adds	r3, r7, r3
    6ad0:	2202      	movs	r2, #2
    6ad2:	701a      	strb	r2, [r3, #0]
    6ad4:	e003      	b.n	6ade <spi_data_rsp+0x2e>
	else
		len = 3;
    6ad6:	230f      	movs	r3, #15
    6ad8:	18fb      	adds	r3, r7, r3
    6ada:	2203      	movs	r2, #3
    6adc:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    6ade:	230f      	movs	r3, #15
    6ae0:	18fb      	adds	r3, r7, r3
    6ae2:	781b      	ldrb	r3, [r3, #0]
    6ae4:	b29a      	uxth	r2, r3
    6ae6:	2308      	movs	r3, #8
    6ae8:	18fb      	adds	r3, r7, r3
    6aea:	0011      	movs	r1, r2
    6aec:	0018      	movs	r0, r3
    6aee:	4b28      	ldr	r3, [pc, #160]	; (6b90 <spi_data_rsp+0xe0>)
    6af0:	4798      	blx	r3
    6af2:	1e03      	subs	r3, r0, #0
    6af4:	d013      	beq.n	6b1e <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    6af6:	233c      	movs	r3, #60	; 0x3c
    6af8:	33ff      	adds	r3, #255	; 0xff
    6afa:	001a      	movs	r2, r3
    6afc:	4925      	ldr	r1, [pc, #148]	; (6b94 <spi_data_rsp+0xe4>)
    6afe:	4b26      	ldr	r3, [pc, #152]	; (6b98 <spi_data_rsp+0xe8>)
    6b00:	0018      	movs	r0, r3
    6b02:	4b26      	ldr	r3, [pc, #152]	; (6b9c <spi_data_rsp+0xec>)
    6b04:	4798      	blx	r3
    6b06:	4b26      	ldr	r3, [pc, #152]	; (6ba0 <spi_data_rsp+0xf0>)
    6b08:	0018      	movs	r0, r3
    6b0a:	4b26      	ldr	r3, [pc, #152]	; (6ba4 <spi_data_rsp+0xf4>)
    6b0c:	4798      	blx	r3
    6b0e:	200d      	movs	r0, #13
    6b10:	4b25      	ldr	r3, [pc, #148]	; (6ba8 <spi_data_rsp+0xf8>)
    6b12:	4798      	blx	r3
		result = N_FAIL;
    6b14:	230e      	movs	r3, #14
    6b16:	18fb      	adds	r3, r7, r3
    6b18:	2200      	movs	r2, #0
    6b1a:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    6b1c:	e02e      	b.n	6b7c <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    6b1e:	230f      	movs	r3, #15
    6b20:	18fb      	adds	r3, r7, r3
    6b22:	781b      	ldrb	r3, [r3, #0]
    6b24:	3b01      	subs	r3, #1
    6b26:	2208      	movs	r2, #8
    6b28:	18ba      	adds	r2, r7, r2
    6b2a:	5cd3      	ldrb	r3, [r2, r3]
    6b2c:	2b00      	cmp	r3, #0
    6b2e:	d108      	bne.n	6b42 <spi_data_rsp+0x92>
    6b30:	230f      	movs	r3, #15
    6b32:	18fb      	adds	r3, r7, r3
    6b34:	781b      	ldrb	r3, [r3, #0]
    6b36:	3b02      	subs	r3, #2
    6b38:	2208      	movs	r2, #8
    6b3a:	18ba      	adds	r2, r7, r2
    6b3c:	5cd3      	ldrb	r3, [r2, r3]
    6b3e:	2bc3      	cmp	r3, #195	; 0xc3
    6b40:	d01c      	beq.n	6b7c <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    6b42:	23a1      	movs	r3, #161	; 0xa1
    6b44:	005a      	lsls	r2, r3, #1
    6b46:	4913      	ldr	r1, [pc, #76]	; (6b94 <spi_data_rsp+0xe4>)
    6b48:	4b13      	ldr	r3, [pc, #76]	; (6b98 <spi_data_rsp+0xe8>)
    6b4a:	0018      	movs	r0, r3
    6b4c:	4b13      	ldr	r3, [pc, #76]	; (6b9c <spi_data_rsp+0xec>)
    6b4e:	4798      	blx	r3
    6b50:	2308      	movs	r3, #8
    6b52:	18fb      	adds	r3, r7, r3
    6b54:	781b      	ldrb	r3, [r3, #0]
    6b56:	0019      	movs	r1, r3
    6b58:	2308      	movs	r3, #8
    6b5a:	18fb      	adds	r3, r7, r3
    6b5c:	785b      	ldrb	r3, [r3, #1]
    6b5e:	001a      	movs	r2, r3
    6b60:	2308      	movs	r3, #8
    6b62:	18fb      	adds	r3, r7, r3
    6b64:	789b      	ldrb	r3, [r3, #2]
    6b66:	4811      	ldr	r0, [pc, #68]	; (6bac <spi_data_rsp+0xfc>)
    6b68:	4c0c      	ldr	r4, [pc, #48]	; (6b9c <spi_data_rsp+0xec>)
    6b6a:	47a0      	blx	r4
    6b6c:	200d      	movs	r0, #13
    6b6e:	4b0e      	ldr	r3, [pc, #56]	; (6ba8 <spi_data_rsp+0xf8>)
    6b70:	4798      	blx	r3
		result = N_FAIL;
    6b72:	230e      	movs	r3, #14
    6b74:	18fb      	adds	r3, r7, r3
    6b76:	2200      	movs	r2, #0
    6b78:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    6b7a:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    6b7c:	230e      	movs	r3, #14
    6b7e:	18fb      	adds	r3, r7, r3
    6b80:	781b      	ldrb	r3, [r3, #0]
    6b82:	b25b      	sxtb	r3, r3
}
    6b84:	0018      	movs	r0, r3
    6b86:	46bd      	mov	sp, r7
    6b88:	b005      	add	sp, #20
    6b8a:	bd90      	pop	{r4, r7, pc}
    6b8c:	2000022c 	.word	0x2000022c
    6b90:	00006665 	.word	0x00006665
    6b94:	0001a3d8 	.word	0x0001a3d8
    6b98:	00019e3c 	.word	0x00019e3c
    6b9c:	00013e4d 	.word	0x00013e4d
    6ba0:	00019e7c 	.word	0x00019e7c
    6ba4:	00013f69 	.word	0x00013f69
    6ba8:	00013e81 	.word	0x00013e81
    6bac:	00019e9c 	.word	0x00019e9c

00006bb0 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    6bb0:	b580      	push	{r7, lr}
    6bb2:	b084      	sub	sp, #16
    6bb4:	af00      	add	r7, sp, #0
    6bb6:	0002      	movs	r2, r0
    6bb8:	1dfb      	adds	r3, r7, #7
    6bba:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    6bbc:	230f      	movs	r3, #15
    6bbe:	18fb      	adds	r3, r7, r3
    6bc0:	2201      	movs	r2, #1
    6bc2:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    6bc4:	1dfb      	adds	r3, r7, #7
    6bc6:	781b      	ldrb	r3, [r3, #0]
    6bc8:	2bcf      	cmp	r3, #207	; 0xcf
    6bca:	d007      	beq.n	6bdc <spi_cmd_rsp+0x2c>
    6bcc:	1dfb      	adds	r3, r7, #7
    6bce:	781b      	ldrb	r3, [r3, #0]
    6bd0:	2bc5      	cmp	r3, #197	; 0xc5
    6bd2:	d003      	beq.n	6bdc <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    6bd4:	1dfb      	adds	r3, r7, #7
    6bd6:	781b      	ldrb	r3, [r3, #0]
    6bd8:	2bc6      	cmp	r3, #198	; 0xc6
    6bda:	d10c      	bne.n	6bf6 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6bdc:	230d      	movs	r3, #13
    6bde:	18fb      	adds	r3, r7, r3
    6be0:	2101      	movs	r1, #1
    6be2:	0018      	movs	r0, r3
    6be4:	4b39      	ldr	r3, [pc, #228]	; (6ccc <spi_cmd_rsp+0x11c>)
    6be6:	4798      	blx	r3
    6be8:	1e03      	subs	r3, r0, #0
    6bea:	d004      	beq.n	6bf6 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    6bec:	230f      	movs	r3, #15
    6bee:	18fb      	adds	r3, r7, r3
    6bf0:	2200      	movs	r2, #0
    6bf2:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    6bf4:	e061      	b.n	6cba <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    6bf6:	230e      	movs	r3, #14
    6bf8:	18fb      	adds	r3, r7, r3
    6bfa:	220a      	movs	r2, #10
    6bfc:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6bfe:	230d      	movs	r3, #13
    6c00:	18fb      	adds	r3, r7, r3
    6c02:	2101      	movs	r1, #1
    6c04:	0018      	movs	r0, r3
    6c06:	4b31      	ldr	r3, [pc, #196]	; (6ccc <spi_cmd_rsp+0x11c>)
    6c08:	4798      	blx	r3
    6c0a:	1e03      	subs	r3, r0, #0
    6c0c:	d012      	beq.n	6c34 <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    6c0e:	23b1      	movs	r3, #177	; 0xb1
    6c10:	005a      	lsls	r2, r3, #1
    6c12:	492f      	ldr	r1, [pc, #188]	; (6cd0 <spi_cmd_rsp+0x120>)
    6c14:	4b2f      	ldr	r3, [pc, #188]	; (6cd4 <spi_cmd_rsp+0x124>)
    6c16:	0018      	movs	r0, r3
    6c18:	4b2f      	ldr	r3, [pc, #188]	; (6cd8 <spi_cmd_rsp+0x128>)
    6c1a:	4798      	blx	r3
    6c1c:	4b2f      	ldr	r3, [pc, #188]	; (6cdc <spi_cmd_rsp+0x12c>)
    6c1e:	0018      	movs	r0, r3
    6c20:	4b2f      	ldr	r3, [pc, #188]	; (6ce0 <spi_cmd_rsp+0x130>)
    6c22:	4798      	blx	r3
    6c24:	200d      	movs	r0, #13
    6c26:	4b2f      	ldr	r3, [pc, #188]	; (6ce4 <spi_cmd_rsp+0x134>)
    6c28:	4798      	blx	r3
			result = N_FAIL;
    6c2a:	230f      	movs	r3, #15
    6c2c:	18fb      	adds	r3, r7, r3
    6c2e:	2200      	movs	r2, #0
    6c30:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    6c32:	e042      	b.n	6cba <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    6c34:	230d      	movs	r3, #13
    6c36:	18fb      	adds	r3, r7, r3
    6c38:	781b      	ldrb	r3, [r3, #0]
    6c3a:	1dfa      	adds	r2, r7, #7
    6c3c:	7812      	ldrb	r2, [r2, #0]
    6c3e:	429a      	cmp	r2, r3
    6c40:	d00b      	beq.n	6c5a <spi_cmd_rsp+0xaa>
    6c42:	230e      	movs	r3, #14
    6c44:	18fb      	adds	r3, r7, r3
    6c46:	781b      	ldrb	r3, [r3, #0]
    6c48:	b25b      	sxtb	r3, r3
    6c4a:	b2da      	uxtb	r2, r3
    6c4c:	3a01      	subs	r2, #1
    6c4e:	b2d1      	uxtb	r1, r2
    6c50:	220e      	movs	r2, #14
    6c52:	18ba      	adds	r2, r7, r2
    6c54:	7011      	strb	r1, [r2, #0]
    6c56:	2b00      	cmp	r3, #0
    6c58:	dcd1      	bgt.n	6bfe <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    6c5a:	230e      	movs	r3, #14
    6c5c:	18fb      	adds	r3, r7, r3
    6c5e:	220a      	movs	r2, #10
    6c60:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6c62:	230d      	movs	r3, #13
    6c64:	18fb      	adds	r3, r7, r3
    6c66:	2101      	movs	r1, #1
    6c68:	0018      	movs	r0, r3
    6c6a:	4b18      	ldr	r3, [pc, #96]	; (6ccc <spi_cmd_rsp+0x11c>)
    6c6c:	4798      	blx	r3
    6c6e:	1e03      	subs	r3, r0, #0
    6c70:	d012      	beq.n	6c98 <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    6c72:	23b8      	movs	r3, #184	; 0xb8
    6c74:	005a      	lsls	r2, r3, #1
    6c76:	4916      	ldr	r1, [pc, #88]	; (6cd0 <spi_cmd_rsp+0x120>)
    6c78:	4b16      	ldr	r3, [pc, #88]	; (6cd4 <spi_cmd_rsp+0x124>)
    6c7a:	0018      	movs	r0, r3
    6c7c:	4b16      	ldr	r3, [pc, #88]	; (6cd8 <spi_cmd_rsp+0x128>)
    6c7e:	4798      	blx	r3
    6c80:	4b16      	ldr	r3, [pc, #88]	; (6cdc <spi_cmd_rsp+0x12c>)
    6c82:	0018      	movs	r0, r3
    6c84:	4b16      	ldr	r3, [pc, #88]	; (6ce0 <spi_cmd_rsp+0x130>)
    6c86:	4798      	blx	r3
    6c88:	200d      	movs	r0, #13
    6c8a:	4b16      	ldr	r3, [pc, #88]	; (6ce4 <spi_cmd_rsp+0x134>)
    6c8c:	4798      	blx	r3
			result = N_FAIL;
    6c8e:	230f      	movs	r3, #15
    6c90:	18fb      	adds	r3, r7, r3
    6c92:	2200      	movs	r2, #0
    6c94:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    6c96:	e010      	b.n	6cba <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    6c98:	230d      	movs	r3, #13
    6c9a:	18fb      	adds	r3, r7, r3
    6c9c:	781b      	ldrb	r3, [r3, #0]
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	d00b      	beq.n	6cba <spi_cmd_rsp+0x10a>
    6ca2:	230e      	movs	r3, #14
    6ca4:	18fb      	adds	r3, r7, r3
    6ca6:	781b      	ldrb	r3, [r3, #0]
    6ca8:	b25b      	sxtb	r3, r3
    6caa:	b2da      	uxtb	r2, r3
    6cac:	3a01      	subs	r2, #1
    6cae:	b2d1      	uxtb	r1, r2
    6cb0:	220e      	movs	r2, #14
    6cb2:	18ba      	adds	r2, r7, r2
    6cb4:	7011      	strb	r1, [r2, #0]
    6cb6:	2b00      	cmp	r3, #0
    6cb8:	dcd3      	bgt.n	6c62 <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    6cba:	230f      	movs	r3, #15
    6cbc:	18fb      	adds	r3, r7, r3
    6cbe:	781b      	ldrb	r3, [r3, #0]
    6cc0:	b25b      	sxtb	r3, r3
}
    6cc2:	0018      	movs	r0, r3
    6cc4:	46bd      	mov	sp, r7
    6cc6:	b004      	add	sp, #16
    6cc8:	bd80      	pop	{r7, pc}
    6cca:	46c0      	nop			; (mov r8, r8)
    6ccc:	00006665 	.word	0x00006665
    6cd0:	0001a3e8 	.word	0x0001a3e8
    6cd4:	00019e3c 	.word	0x00019e3c
    6cd8:	00013e4d 	.word	0x00013e4d
    6cdc:	00019ecc 	.word	0x00019ecc
    6ce0:	00013f69 	.word	0x00013f69
    6ce4:	00013e81 	.word	0x00013e81

00006ce8 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    6ce8:	b580      	push	{r7, lr}
    6cea:	b086      	sub	sp, #24
    6cec:	af00      	add	r7, sp, #0
    6cee:	6078      	str	r0, [r7, #4]
    6cf0:	0008      	movs	r0, r1
    6cf2:	0011      	movs	r1, r2
    6cf4:	1cbb      	adds	r3, r7, #2
    6cf6:	1c02      	adds	r2, r0, #0
    6cf8:	801a      	strh	r2, [r3, #0]
    6cfa:	1c7b      	adds	r3, r7, #1
    6cfc:	1c0a      	adds	r2, r1, #0
    6cfe:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    6d00:	2311      	movs	r3, #17
    6d02:	18fb      	adds	r3, r7, r3
    6d04:	2201      	movs	r2, #1
    6d06:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    6d08:	2314      	movs	r3, #20
    6d0a:	18fb      	adds	r3, r7, r3
    6d0c:	2200      	movs	r2, #0
    6d0e:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    6d10:	1cbb      	adds	r3, r7, #2
    6d12:	881a      	ldrh	r2, [r3, #0]
    6d14:	2380      	movs	r3, #128	; 0x80
    6d16:	019b      	lsls	r3, r3, #6
    6d18:	429a      	cmp	r2, r3
    6d1a:	d805      	bhi.n	6d28 <spi_data_read+0x40>
			nbytes = sz;
    6d1c:	2312      	movs	r3, #18
    6d1e:	18fb      	adds	r3, r7, r3
    6d20:	1cba      	adds	r2, r7, #2
    6d22:	8812      	ldrh	r2, [r2, #0]
    6d24:	801a      	strh	r2, [r3, #0]
    6d26:	e004      	b.n	6d32 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    6d28:	2312      	movs	r3, #18
    6d2a:	18fb      	adds	r3, r7, r3
    6d2c:	2280      	movs	r2, #128	; 0x80
    6d2e:	0192      	lsls	r2, r2, #6
    6d30:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    6d32:	2316      	movs	r3, #22
    6d34:	18fb      	adds	r3, r7, r3
    6d36:	220a      	movs	r2, #10
    6d38:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6d3a:	230b      	movs	r3, #11
    6d3c:	18fb      	adds	r3, r7, r3
    6d3e:	2101      	movs	r1, #1
    6d40:	0018      	movs	r0, r3
    6d42:	4b5c      	ldr	r3, [pc, #368]	; (6eb4 <spi_data_read+0x1cc>)
    6d44:	4798      	blx	r3
    6d46:	1e03      	subs	r3, r0, #0
    6d48:	d011      	beq.n	6d6e <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    6d4a:	4a5b      	ldr	r2, [pc, #364]	; (6eb8 <spi_data_read+0x1d0>)
    6d4c:	495b      	ldr	r1, [pc, #364]	; (6ebc <spi_data_read+0x1d4>)
    6d4e:	4b5c      	ldr	r3, [pc, #368]	; (6ec0 <spi_data_read+0x1d8>)
    6d50:	0018      	movs	r0, r3
    6d52:	4b5c      	ldr	r3, [pc, #368]	; (6ec4 <spi_data_read+0x1dc>)
    6d54:	4798      	blx	r3
    6d56:	4b5c      	ldr	r3, [pc, #368]	; (6ec8 <spi_data_read+0x1e0>)
    6d58:	0018      	movs	r0, r3
    6d5a:	4b5c      	ldr	r3, [pc, #368]	; (6ecc <spi_data_read+0x1e4>)
    6d5c:	4798      	blx	r3
    6d5e:	200d      	movs	r0, #13
    6d60:	4b5b      	ldr	r3, [pc, #364]	; (6ed0 <spi_data_read+0x1e8>)
    6d62:	4798      	blx	r3
				result = N_FAIL;
    6d64:	2311      	movs	r3, #17
    6d66:	18fb      	adds	r3, r7, r3
    6d68:	2200      	movs	r2, #0
    6d6a:	701a      	strb	r2, [r3, #0]
				break;
    6d6c:	e017      	b.n	6d9e <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    6d6e:	230b      	movs	r3, #11
    6d70:	18fb      	adds	r3, r7, r3
    6d72:	781b      	ldrb	r3, [r3, #0]
    6d74:	091b      	lsrs	r3, r3, #4
    6d76:	b2db      	uxtb	r3, r3
    6d78:	001a      	movs	r2, r3
    6d7a:	230f      	movs	r3, #15
    6d7c:	4013      	ands	r3, r2
    6d7e:	2b0f      	cmp	r3, #15
    6d80:	d00c      	beq.n	6d9c <spi_data_read+0xb4>
				break;
		} while (retry--);
    6d82:	2316      	movs	r3, #22
    6d84:	18fb      	adds	r3, r7, r3
    6d86:	2200      	movs	r2, #0
    6d88:	5e9b      	ldrsh	r3, [r3, r2]
    6d8a:	b29a      	uxth	r2, r3
    6d8c:	3a01      	subs	r2, #1
    6d8e:	b291      	uxth	r1, r2
    6d90:	2216      	movs	r2, #22
    6d92:	18ba      	adds	r2, r7, r2
    6d94:	8011      	strh	r1, [r2, #0]
    6d96:	2b00      	cmp	r3, #0
    6d98:	d1cf      	bne.n	6d3a <spi_data_read+0x52>
    6d9a:	e000      	b.n	6d9e <spi_data_read+0xb6>
				break;
    6d9c:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    6d9e:	2311      	movs	r3, #17
    6da0:	18fb      	adds	r3, r7, r3
    6da2:	781b      	ldrb	r3, [r3, #0]
    6da4:	b25b      	sxtb	r3, r3
    6da6:	2b00      	cmp	r3, #0
    6da8:	d100      	bne.n	6dac <spi_data_read+0xc4>
    6daa:	e079      	b.n	6ea0 <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    6dac:	2316      	movs	r3, #22
    6dae:	18fb      	adds	r3, r7, r3
    6db0:	2200      	movs	r2, #0
    6db2:	5e9b      	ldrsh	r3, [r3, r2]
    6db4:	2b00      	cmp	r3, #0
    6db6:	dc16      	bgt.n	6de6 <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    6db8:	4a46      	ldr	r2, [pc, #280]	; (6ed4 <spi_data_read+0x1ec>)
    6dba:	4940      	ldr	r1, [pc, #256]	; (6ebc <spi_data_read+0x1d4>)
    6dbc:	4b40      	ldr	r3, [pc, #256]	; (6ec0 <spi_data_read+0x1d8>)
    6dbe:	0018      	movs	r0, r3
    6dc0:	4b40      	ldr	r3, [pc, #256]	; (6ec4 <spi_data_read+0x1dc>)
    6dc2:	4798      	blx	r3
    6dc4:	230b      	movs	r3, #11
    6dc6:	18fb      	adds	r3, r7, r3
    6dc8:	781b      	ldrb	r3, [r3, #0]
    6dca:	001a      	movs	r2, r3
    6dcc:	4b42      	ldr	r3, [pc, #264]	; (6ed8 <spi_data_read+0x1f0>)
    6dce:	0011      	movs	r1, r2
    6dd0:	0018      	movs	r0, r3
    6dd2:	4b3c      	ldr	r3, [pc, #240]	; (6ec4 <spi_data_read+0x1dc>)
    6dd4:	4798      	blx	r3
    6dd6:	200d      	movs	r0, #13
    6dd8:	4b3d      	ldr	r3, [pc, #244]	; (6ed0 <spi_data_read+0x1e8>)
    6dda:	4798      	blx	r3
			result = N_FAIL;
    6ddc:	2311      	movs	r3, #17
    6dde:	18fb      	adds	r3, r7, r3
    6de0:	2200      	movs	r2, #0
    6de2:	701a      	strb	r2, [r3, #0]
			break;
    6de4:	e05d      	b.n	6ea2 <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    6de6:	2314      	movs	r3, #20
    6de8:	18fb      	adds	r3, r7, r3
    6dea:	2200      	movs	r2, #0
    6dec:	5e9b      	ldrsh	r3, [r3, r2]
    6dee:	687a      	ldr	r2, [r7, #4]
    6df0:	18d2      	adds	r2, r2, r3
    6df2:	2312      	movs	r3, #18
    6df4:	18fb      	adds	r3, r7, r3
    6df6:	881b      	ldrh	r3, [r3, #0]
    6df8:	0019      	movs	r1, r3
    6dfa:	0010      	movs	r0, r2
    6dfc:	4b2d      	ldr	r3, [pc, #180]	; (6eb4 <spi_data_read+0x1cc>)
    6dfe:	4798      	blx	r3
    6e00:	1e03      	subs	r3, r0, #0
    6e02:	d012      	beq.n	6e2a <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    6e04:	23c5      	movs	r3, #197	; 0xc5
    6e06:	009a      	lsls	r2, r3, #2
    6e08:	492c      	ldr	r1, [pc, #176]	; (6ebc <spi_data_read+0x1d4>)
    6e0a:	4b2d      	ldr	r3, [pc, #180]	; (6ec0 <spi_data_read+0x1d8>)
    6e0c:	0018      	movs	r0, r3
    6e0e:	4b2d      	ldr	r3, [pc, #180]	; (6ec4 <spi_data_read+0x1dc>)
    6e10:	4798      	blx	r3
    6e12:	4b32      	ldr	r3, [pc, #200]	; (6edc <spi_data_read+0x1f4>)
    6e14:	0018      	movs	r0, r3
    6e16:	4b2d      	ldr	r3, [pc, #180]	; (6ecc <spi_data_read+0x1e4>)
    6e18:	4798      	blx	r3
    6e1a:	200d      	movs	r0, #13
    6e1c:	4b2c      	ldr	r3, [pc, #176]	; (6ed0 <spi_data_read+0x1e8>)
    6e1e:	4798      	blx	r3
			result = N_FAIL;
    6e20:	2311      	movs	r3, #17
    6e22:	18fb      	adds	r3, r7, r3
    6e24:	2200      	movs	r2, #0
    6e26:	701a      	strb	r2, [r3, #0]
			break;
    6e28:	e03b      	b.n	6ea2 <spi_data_read+0x1ba>
		}
		if(!clockless)
    6e2a:	1c7b      	adds	r3, r7, #1
    6e2c:	781b      	ldrb	r3, [r3, #0]
    6e2e:	2b00      	cmp	r3, #0
    6e30:	d11d      	bne.n	6e6e <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    6e32:	4b2b      	ldr	r3, [pc, #172]	; (6ee0 <spi_data_read+0x1f8>)
    6e34:	781b      	ldrb	r3, [r3, #0]
    6e36:	2b00      	cmp	r3, #0
    6e38:	d119      	bne.n	6e6e <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    6e3a:	230c      	movs	r3, #12
    6e3c:	18fb      	adds	r3, r7, r3
    6e3e:	2102      	movs	r1, #2
    6e40:	0018      	movs	r0, r3
    6e42:	4b1c      	ldr	r3, [pc, #112]	; (6eb4 <spi_data_read+0x1cc>)
    6e44:	4798      	blx	r3
    6e46:	1e03      	subs	r3, r0, #0
    6e48:	d011      	beq.n	6e6e <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    6e4a:	4a26      	ldr	r2, [pc, #152]	; (6ee4 <spi_data_read+0x1fc>)
    6e4c:	491b      	ldr	r1, [pc, #108]	; (6ebc <spi_data_read+0x1d4>)
    6e4e:	4b1c      	ldr	r3, [pc, #112]	; (6ec0 <spi_data_read+0x1d8>)
    6e50:	0018      	movs	r0, r3
    6e52:	4b1c      	ldr	r3, [pc, #112]	; (6ec4 <spi_data_read+0x1dc>)
    6e54:	4798      	blx	r3
    6e56:	4b24      	ldr	r3, [pc, #144]	; (6ee8 <spi_data_read+0x200>)
    6e58:	0018      	movs	r0, r3
    6e5a:	4b1c      	ldr	r3, [pc, #112]	; (6ecc <spi_data_read+0x1e4>)
    6e5c:	4798      	blx	r3
    6e5e:	200d      	movs	r0, #13
    6e60:	4b1b      	ldr	r3, [pc, #108]	; (6ed0 <spi_data_read+0x1e8>)
    6e62:	4798      	blx	r3
					result = N_FAIL;
    6e64:	2311      	movs	r3, #17
    6e66:	18fb      	adds	r3, r7, r3
    6e68:	2200      	movs	r2, #0
    6e6a:	701a      	strb	r2, [r3, #0]
					break;
    6e6c:	e019      	b.n	6ea2 <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    6e6e:	2314      	movs	r3, #20
    6e70:	18fb      	adds	r3, r7, r3
    6e72:	881a      	ldrh	r2, [r3, #0]
    6e74:	2312      	movs	r3, #18
    6e76:	18fb      	adds	r3, r7, r3
    6e78:	881b      	ldrh	r3, [r3, #0]
    6e7a:	18d3      	adds	r3, r2, r3
    6e7c:	b29a      	uxth	r2, r3
    6e7e:	2314      	movs	r3, #20
    6e80:	18fb      	adds	r3, r7, r3
    6e82:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    6e84:	2312      	movs	r3, #18
    6e86:	18fb      	adds	r3, r7, r3
    6e88:	881a      	ldrh	r2, [r3, #0]
    6e8a:	1cbb      	adds	r3, r7, #2
    6e8c:	1cb9      	adds	r1, r7, #2
    6e8e:	8809      	ldrh	r1, [r1, #0]
    6e90:	1a8a      	subs	r2, r1, r2
    6e92:	801a      	strh	r2, [r3, #0]

	} while (sz);
    6e94:	1cbb      	adds	r3, r7, #2
    6e96:	881b      	ldrh	r3, [r3, #0]
    6e98:	2b00      	cmp	r3, #0
    6e9a:	d000      	beq.n	6e9e <spi_data_read+0x1b6>
    6e9c:	e738      	b.n	6d10 <spi_data_read+0x28>
    6e9e:	e000      	b.n	6ea2 <spi_data_read+0x1ba>
			break;
    6ea0:	46c0      	nop			; (mov r8, r8)

	return result;
    6ea2:	2311      	movs	r3, #17
    6ea4:	18fb      	adds	r3, r7, r3
    6ea6:	781b      	ldrb	r3, [r3, #0]
    6ea8:	b25b      	sxtb	r3, r3
}
    6eaa:	0018      	movs	r0, r3
    6eac:	46bd      	mov	sp, r7
    6eae:	b006      	add	sp, #24
    6eb0:	bd80      	pop	{r7, pc}
    6eb2:	46c0      	nop			; (mov r8, r8)
    6eb4:	00006665 	.word	0x00006665
    6eb8:	000002ff 	.word	0x000002ff
    6ebc:	0001a3f4 	.word	0x0001a3f4
    6ec0:	00019e3c 	.word	0x00019e3c
    6ec4:	00013e4d 	.word	0x00013e4d
    6ec8:	00019f00 	.word	0x00019f00
    6ecc:	00013f69 	.word	0x00013f69
    6ed0:	00013e81 	.word	0x00013e81
    6ed4:	0000030b 	.word	0x0000030b
    6ed8:	00019f34 	.word	0x00019f34
    6edc:	00019f64 	.word	0x00019f64
    6ee0:	2000022c 	.word	0x2000022c
    6ee4:	0000031f 	.word	0x0000031f
    6ee8:	00019f94 	.word	0x00019f94

00006eec <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    6eec:	b580      	push	{r7, lr}
    6eee:	b086      	sub	sp, #24
    6ef0:	af00      	add	r7, sp, #0
    6ef2:	6078      	str	r0, [r7, #4]
    6ef4:	000a      	movs	r2, r1
    6ef6:	1cbb      	adds	r3, r7, #2
    6ef8:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    6efa:	2313      	movs	r3, #19
    6efc:	18fb      	adds	r3, r7, r3
    6efe:	2201      	movs	r2, #1
    6f00:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    6f02:	230c      	movs	r3, #12
    6f04:	18fb      	adds	r3, r7, r3
    6f06:	2200      	movs	r2, #0
    6f08:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    6f0a:	2316      	movs	r3, #22
    6f0c:	18fb      	adds	r3, r7, r3
    6f0e:	2200      	movs	r2, #0
    6f10:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    6f12:	1cbb      	adds	r3, r7, #2
    6f14:	881a      	ldrh	r2, [r3, #0]
    6f16:	2380      	movs	r3, #128	; 0x80
    6f18:	019b      	lsls	r3, r3, #6
    6f1a:	429a      	cmp	r2, r3
    6f1c:	d805      	bhi.n	6f2a <spi_data_write+0x3e>
			nbytes = sz;
    6f1e:	2314      	movs	r3, #20
    6f20:	18fb      	adds	r3, r7, r3
    6f22:	1cba      	adds	r2, r7, #2
    6f24:	8812      	ldrh	r2, [r2, #0]
    6f26:	801a      	strh	r2, [r3, #0]
    6f28:	e004      	b.n	6f34 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    6f2a:	2314      	movs	r3, #20
    6f2c:	18fb      	adds	r3, r7, r3
    6f2e:	2280      	movs	r2, #128	; 0x80
    6f30:	0192      	lsls	r2, r2, #6
    6f32:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    6f34:	2311      	movs	r3, #17
    6f36:	18fb      	adds	r3, r7, r3
    6f38:	22f0      	movs	r2, #240	; 0xf0
    6f3a:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    6f3c:	2316      	movs	r3, #22
    6f3e:	18fb      	adds	r3, r7, r3
    6f40:	2200      	movs	r2, #0
    6f42:	5e9b      	ldrsh	r3, [r3, r2]
    6f44:	2b00      	cmp	r3, #0
    6f46:	d10f      	bne.n	6f68 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    6f48:	1cbb      	adds	r3, r7, #2
    6f4a:	881a      	ldrh	r2, [r3, #0]
    6f4c:	2380      	movs	r3, #128	; 0x80
    6f4e:	019b      	lsls	r3, r3, #6
    6f50:	429a      	cmp	r2, r3
    6f52:	d804      	bhi.n	6f5e <spi_data_write+0x72>
				order = 0x3;
    6f54:	2312      	movs	r3, #18
    6f56:	18fb      	adds	r3, r7, r3
    6f58:	2203      	movs	r2, #3
    6f5a:	701a      	strb	r2, [r3, #0]
    6f5c:	e013      	b.n	6f86 <spi_data_write+0x9a>
			else
				order = 0x1;
    6f5e:	2312      	movs	r3, #18
    6f60:	18fb      	adds	r3, r7, r3
    6f62:	2201      	movs	r2, #1
    6f64:	701a      	strb	r2, [r3, #0]
    6f66:	e00e      	b.n	6f86 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    6f68:	1cbb      	adds	r3, r7, #2
    6f6a:	881a      	ldrh	r2, [r3, #0]
    6f6c:	2380      	movs	r3, #128	; 0x80
    6f6e:	019b      	lsls	r3, r3, #6
    6f70:	429a      	cmp	r2, r3
    6f72:	d804      	bhi.n	6f7e <spi_data_write+0x92>
				order = 0x3;
    6f74:	2312      	movs	r3, #18
    6f76:	18fb      	adds	r3, r7, r3
    6f78:	2203      	movs	r2, #3
    6f7a:	701a      	strb	r2, [r3, #0]
    6f7c:	e003      	b.n	6f86 <spi_data_write+0x9a>
			else
				order = 0x2;
    6f7e:	2312      	movs	r3, #18
    6f80:	18fb      	adds	r3, r7, r3
    6f82:	2202      	movs	r2, #2
    6f84:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    6f86:	2311      	movs	r3, #17
    6f88:	18fb      	adds	r3, r7, r3
    6f8a:	781a      	ldrb	r2, [r3, #0]
    6f8c:	2312      	movs	r3, #18
    6f8e:	18fb      	adds	r3, r7, r3
    6f90:	781b      	ldrb	r3, [r3, #0]
    6f92:	4313      	orrs	r3, r2
    6f94:	b2da      	uxtb	r2, r3
    6f96:	2311      	movs	r3, #17
    6f98:	18fb      	adds	r3, r7, r3
    6f9a:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    6f9c:	2311      	movs	r3, #17
    6f9e:	18fb      	adds	r3, r7, r3
    6fa0:	2101      	movs	r1, #1
    6fa2:	0018      	movs	r0, r3
    6fa4:	4b3a      	ldr	r3, [pc, #232]	; (7090 <spi_data_write+0x1a4>)
    6fa6:	4798      	blx	r3
    6fa8:	1e03      	subs	r3, r0, #0
    6faa:	d012      	beq.n	6fd2 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    6fac:	23d4      	movs	r3, #212	; 0xd4
    6fae:	009a      	lsls	r2, r3, #2
    6fb0:	4938      	ldr	r1, [pc, #224]	; (7094 <spi_data_write+0x1a8>)
    6fb2:	4b39      	ldr	r3, [pc, #228]	; (7098 <spi_data_write+0x1ac>)
    6fb4:	0018      	movs	r0, r3
    6fb6:	4b39      	ldr	r3, [pc, #228]	; (709c <spi_data_write+0x1b0>)
    6fb8:	4798      	blx	r3
    6fba:	4b39      	ldr	r3, [pc, #228]	; (70a0 <spi_data_write+0x1b4>)
    6fbc:	0018      	movs	r0, r3
    6fbe:	4b39      	ldr	r3, [pc, #228]	; (70a4 <spi_data_write+0x1b8>)
    6fc0:	4798      	blx	r3
    6fc2:	200d      	movs	r0, #13
    6fc4:	4b38      	ldr	r3, [pc, #224]	; (70a8 <spi_data_write+0x1bc>)
    6fc6:	4798      	blx	r3
			result = N_FAIL;
    6fc8:	2313      	movs	r3, #19
    6fca:	18fb      	adds	r3, r7, r3
    6fcc:	2200      	movs	r2, #0
    6fce:	701a      	strb	r2, [r3, #0]
			break;
    6fd0:	e056      	b.n	7080 <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    6fd2:	2316      	movs	r3, #22
    6fd4:	18fb      	adds	r3, r7, r3
    6fd6:	2200      	movs	r2, #0
    6fd8:	5e9b      	ldrsh	r3, [r3, r2]
    6fda:	687a      	ldr	r2, [r7, #4]
    6fdc:	18d2      	adds	r2, r2, r3
    6fde:	2314      	movs	r3, #20
    6fe0:	18fb      	adds	r3, r7, r3
    6fe2:	881b      	ldrh	r3, [r3, #0]
    6fe4:	0019      	movs	r1, r3
    6fe6:	0010      	movs	r0, r2
    6fe8:	4b29      	ldr	r3, [pc, #164]	; (7090 <spi_data_write+0x1a4>)
    6fea:	4798      	blx	r3
    6fec:	1e03      	subs	r3, r0, #0
    6fee:	d011      	beq.n	7014 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    6ff0:	4a2e      	ldr	r2, [pc, #184]	; (70ac <spi_data_write+0x1c0>)
    6ff2:	4928      	ldr	r1, [pc, #160]	; (7094 <spi_data_write+0x1a8>)
    6ff4:	4b28      	ldr	r3, [pc, #160]	; (7098 <spi_data_write+0x1ac>)
    6ff6:	0018      	movs	r0, r3
    6ff8:	4b28      	ldr	r3, [pc, #160]	; (709c <spi_data_write+0x1b0>)
    6ffa:	4798      	blx	r3
    6ffc:	4b2c      	ldr	r3, [pc, #176]	; (70b0 <spi_data_write+0x1c4>)
    6ffe:	0018      	movs	r0, r3
    7000:	4b28      	ldr	r3, [pc, #160]	; (70a4 <spi_data_write+0x1b8>)
    7002:	4798      	blx	r3
    7004:	200d      	movs	r0, #13
    7006:	4b28      	ldr	r3, [pc, #160]	; (70a8 <spi_data_write+0x1bc>)
    7008:	4798      	blx	r3
			result = N_FAIL;
    700a:	2313      	movs	r3, #19
    700c:	18fb      	adds	r3, r7, r3
    700e:	2200      	movs	r2, #0
    7010:	701a      	strb	r2, [r3, #0]
			break;
    7012:	e035      	b.n	7080 <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    7014:	4b27      	ldr	r3, [pc, #156]	; (70b4 <spi_data_write+0x1c8>)
    7016:	781b      	ldrb	r3, [r3, #0]
    7018:	2b00      	cmp	r3, #0
    701a:	d119      	bne.n	7050 <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    701c:	230c      	movs	r3, #12
    701e:	18fb      	adds	r3, r7, r3
    7020:	2102      	movs	r1, #2
    7022:	0018      	movs	r0, r3
    7024:	4b1a      	ldr	r3, [pc, #104]	; (7090 <spi_data_write+0x1a4>)
    7026:	4798      	blx	r3
    7028:	1e03      	subs	r3, r0, #0
    702a:	d011      	beq.n	7050 <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    702c:	4a22      	ldr	r2, [pc, #136]	; (70b8 <spi_data_write+0x1cc>)
    702e:	4919      	ldr	r1, [pc, #100]	; (7094 <spi_data_write+0x1a8>)
    7030:	4b19      	ldr	r3, [pc, #100]	; (7098 <spi_data_write+0x1ac>)
    7032:	0018      	movs	r0, r3
    7034:	4b19      	ldr	r3, [pc, #100]	; (709c <spi_data_write+0x1b0>)
    7036:	4798      	blx	r3
    7038:	4b20      	ldr	r3, [pc, #128]	; (70bc <spi_data_write+0x1d0>)
    703a:	0018      	movs	r0, r3
    703c:	4b19      	ldr	r3, [pc, #100]	; (70a4 <spi_data_write+0x1b8>)
    703e:	4798      	blx	r3
    7040:	200d      	movs	r0, #13
    7042:	4b19      	ldr	r3, [pc, #100]	; (70a8 <spi_data_write+0x1bc>)
    7044:	4798      	blx	r3
				result = N_FAIL;
    7046:	2313      	movs	r3, #19
    7048:	18fb      	adds	r3, r7, r3
    704a:	2200      	movs	r2, #0
    704c:	701a      	strb	r2, [r3, #0]
				break;
    704e:	e017      	b.n	7080 <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    7050:	2316      	movs	r3, #22
    7052:	18fb      	adds	r3, r7, r3
    7054:	881a      	ldrh	r2, [r3, #0]
    7056:	2314      	movs	r3, #20
    7058:	18fb      	adds	r3, r7, r3
    705a:	881b      	ldrh	r3, [r3, #0]
    705c:	18d3      	adds	r3, r2, r3
    705e:	b29a      	uxth	r2, r3
    7060:	2316      	movs	r3, #22
    7062:	18fb      	adds	r3, r7, r3
    7064:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    7066:	1cbb      	adds	r3, r7, #2
    7068:	1cb9      	adds	r1, r7, #2
    706a:	2214      	movs	r2, #20
    706c:	18ba      	adds	r2, r7, r2
    706e:	8809      	ldrh	r1, [r1, #0]
    7070:	8812      	ldrh	r2, [r2, #0]
    7072:	1a8a      	subs	r2, r1, r2
    7074:	801a      	strh	r2, [r3, #0]
	} while (sz);
    7076:	1cbb      	adds	r3, r7, #2
    7078:	881b      	ldrh	r3, [r3, #0]
    707a:	2b00      	cmp	r3, #0
    707c:	d000      	beq.n	7080 <spi_data_write+0x194>
    707e:	e748      	b.n	6f12 <spi_data_write+0x26>


	return result;
    7080:	2313      	movs	r3, #19
    7082:	18fb      	adds	r3, r7, r3
    7084:	781b      	ldrb	r3, [r3, #0]
    7086:	b25b      	sxtb	r3, r3
}
    7088:	0018      	movs	r0, r3
    708a:	46bd      	mov	sp, r7
    708c:	b006      	add	sp, #24
    708e:	bd80      	pop	{r7, pc}
    7090:	000066a9 	.word	0x000066a9
    7094:	0001a404 	.word	0x0001a404
    7098:	00019e3c 	.word	0x00019e3c
    709c:	00013e4d 	.word	0x00013e4d
    70a0:	00019fc8 	.word	0x00019fc8
    70a4:	00013f69 	.word	0x00013f69
    70a8:	00013e81 	.word	0x00013e81
    70ac:	00000359 	.word	0x00000359
    70b0:	0001a000 	.word	0x0001a000
    70b4:	2000022c 	.word	0x2000022c
    70b8:	00000363 	.word	0x00000363
    70bc:	0001a034 	.word	0x0001a034

000070c0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    70c0:	b5b0      	push	{r4, r5, r7, lr}
    70c2:	b086      	sub	sp, #24
    70c4:	af02      	add	r7, sp, #8
    70c6:	6078      	str	r0, [r7, #4]
    70c8:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    70ca:	230f      	movs	r3, #15
    70cc:	18fb      	adds	r3, r7, r3
    70ce:	220a      	movs	r2, #10
    70d0:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    70d2:	230e      	movs	r3, #14
    70d4:	18fb      	adds	r3, r7, r3
    70d6:	2201      	movs	r2, #1
    70d8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    70da:	230d      	movs	r3, #13
    70dc:	18fb      	adds	r3, r7, r3
    70de:	22c9      	movs	r2, #201	; 0xc9
    70e0:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    70e2:	230c      	movs	r3, #12
    70e4:	18fb      	adds	r3, r7, r3
    70e6:	2200      	movs	r2, #0
    70e8:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    70ea:	687b      	ldr	r3, [r7, #4]
    70ec:	2b30      	cmp	r3, #48	; 0x30
    70ee:	d808      	bhi.n	7102 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    70f0:	230d      	movs	r3, #13
    70f2:	18fb      	adds	r3, r7, r3
    70f4:	22c3      	movs	r2, #195	; 0xc3
    70f6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    70f8:	230c      	movs	r3, #12
    70fa:	18fb      	adds	r3, r7, r3
    70fc:	2201      	movs	r2, #1
    70fe:	701a      	strb	r2, [r3, #0]
    7100:	e007      	b.n	7112 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    7102:	230d      	movs	r3, #13
    7104:	18fb      	adds	r3, r7, r3
    7106:	22c9      	movs	r2, #201	; 0xc9
    7108:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    710a:	230c      	movs	r3, #12
    710c:	18fb      	adds	r3, r7, r3
    710e:	2200      	movs	r2, #0
    7110:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    7112:	230e      	movs	r3, #14
    7114:	18fc      	adds	r4, r7, r3
    7116:	683a      	ldr	r2, [r7, #0]
    7118:	6879      	ldr	r1, [r7, #4]
    711a:	230d      	movs	r3, #13
    711c:	18fb      	adds	r3, r7, r3
    711e:	7818      	ldrb	r0, [r3, #0]
    7120:	230c      	movs	r3, #12
    7122:	18fb      	adds	r3, r7, r3
    7124:	781b      	ldrb	r3, [r3, #0]
    7126:	9300      	str	r3, [sp, #0]
    7128:	2304      	movs	r3, #4
    712a:	4d3c      	ldr	r5, [pc, #240]	; (721c <spi_write_reg+0x15c>)
    712c:	47a8      	blx	r5
    712e:	0003      	movs	r3, r0
    7130:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    7132:	230e      	movs	r3, #14
    7134:	18fb      	adds	r3, r7, r3
    7136:	781b      	ldrb	r3, [r3, #0]
    7138:	b25b      	sxtb	r3, r3
    713a:	2b01      	cmp	r3, #1
    713c:	d00f      	beq.n	715e <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    713e:	4a38      	ldr	r2, [pc, #224]	; (7220 <spi_write_reg+0x160>)
    7140:	4938      	ldr	r1, [pc, #224]	; (7224 <spi_write_reg+0x164>)
    7142:	4b39      	ldr	r3, [pc, #228]	; (7228 <spi_write_reg+0x168>)
    7144:	0018      	movs	r0, r3
    7146:	4b39      	ldr	r3, [pc, #228]	; (722c <spi_write_reg+0x16c>)
    7148:	4798      	blx	r3
    714a:	687a      	ldr	r2, [r7, #4]
    714c:	4b38      	ldr	r3, [pc, #224]	; (7230 <spi_write_reg+0x170>)
    714e:	0011      	movs	r1, r2
    7150:	0018      	movs	r0, r3
    7152:	4b36      	ldr	r3, [pc, #216]	; (722c <spi_write_reg+0x16c>)
    7154:	4798      	blx	r3
    7156:	200d      	movs	r0, #13
    7158:	4b36      	ldr	r3, [pc, #216]	; (7234 <spi_write_reg+0x174>)
    715a:	4798      	blx	r3
		goto _FAIL_;
    715c:	e020      	b.n	71a0 <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    715e:	230e      	movs	r3, #14
    7160:	18fc      	adds	r4, r7, r3
    7162:	230d      	movs	r3, #13
    7164:	18fb      	adds	r3, r7, r3
    7166:	781b      	ldrb	r3, [r3, #0]
    7168:	0018      	movs	r0, r3
    716a:	4b33      	ldr	r3, [pc, #204]	; (7238 <spi_write_reg+0x178>)
    716c:	4798      	blx	r3
    716e:	0003      	movs	r3, r0
    7170:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    7172:	230e      	movs	r3, #14
    7174:	18fb      	adds	r3, r7, r3
    7176:	781b      	ldrb	r3, [r3, #0]
    7178:	b25b      	sxtb	r3, r3
    717a:	2b01      	cmp	r3, #1
    717c:	d010      	beq.n	71a0 <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    717e:	23e7      	movs	r3, #231	; 0xe7
    7180:	009a      	lsls	r2, r3, #2
    7182:	4928      	ldr	r1, [pc, #160]	; (7224 <spi_write_reg+0x164>)
    7184:	4b28      	ldr	r3, [pc, #160]	; (7228 <spi_write_reg+0x168>)
    7186:	0018      	movs	r0, r3
    7188:	4b28      	ldr	r3, [pc, #160]	; (722c <spi_write_reg+0x16c>)
    718a:	4798      	blx	r3
    718c:	687a      	ldr	r2, [r7, #4]
    718e:	4b2b      	ldr	r3, [pc, #172]	; (723c <spi_write_reg+0x17c>)
    7190:	0011      	movs	r1, r2
    7192:	0018      	movs	r0, r3
    7194:	4b25      	ldr	r3, [pc, #148]	; (722c <spi_write_reg+0x16c>)
    7196:	4798      	blx	r3
    7198:	200d      	movs	r0, #13
    719a:	4b26      	ldr	r3, [pc, #152]	; (7234 <spi_write_reg+0x174>)
    719c:	4798      	blx	r3
		goto _FAIL_;
    719e:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    71a0:	230e      	movs	r3, #14
    71a2:	18fb      	adds	r3, r7, r3
    71a4:	781b      	ldrb	r3, [r3, #0]
    71a6:	b25b      	sxtb	r3, r3
    71a8:	2b01      	cmp	r3, #1
    71aa:	d02e      	beq.n	720a <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    71ac:	2001      	movs	r0, #1
    71ae:	4b24      	ldr	r3, [pc, #144]	; (7240 <spi_write_reg+0x180>)
    71b0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    71b2:	2300      	movs	r3, #0
    71b4:	9300      	str	r3, [sp, #0]
    71b6:	2300      	movs	r3, #0
    71b8:	2200      	movs	r2, #0
    71ba:	2100      	movs	r1, #0
    71bc:	20cf      	movs	r0, #207	; 0xcf
    71be:	4c17      	ldr	r4, [pc, #92]	; (721c <spi_write_reg+0x15c>)
    71c0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    71c2:	20cf      	movs	r0, #207	; 0xcf
    71c4:	4b1c      	ldr	r3, [pc, #112]	; (7238 <spi_write_reg+0x178>)
    71c6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    71c8:	4a1e      	ldr	r2, [pc, #120]	; (7244 <spi_write_reg+0x184>)
    71ca:	4916      	ldr	r1, [pc, #88]	; (7224 <spi_write_reg+0x164>)
    71cc:	4b16      	ldr	r3, [pc, #88]	; (7228 <spi_write_reg+0x168>)
    71ce:	0018      	movs	r0, r3
    71d0:	4b16      	ldr	r3, [pc, #88]	; (722c <spi_write_reg+0x16c>)
    71d2:	4798      	blx	r3
    71d4:	230f      	movs	r3, #15
    71d6:	18fb      	adds	r3, r7, r3
    71d8:	7819      	ldrb	r1, [r3, #0]
    71da:	683b      	ldr	r3, [r7, #0]
    71dc:	687a      	ldr	r2, [r7, #4]
    71de:	481a      	ldr	r0, [pc, #104]	; (7248 <spi_write_reg+0x188>)
    71e0:	4c12      	ldr	r4, [pc, #72]	; (722c <spi_write_reg+0x16c>)
    71e2:	47a0      	blx	r4
    71e4:	200d      	movs	r0, #13
    71e6:	4b13      	ldr	r3, [pc, #76]	; (7234 <spi_write_reg+0x174>)
    71e8:	4798      	blx	r3
		nm_bsp_sleep(1);
    71ea:	2001      	movs	r0, #1
    71ec:	4b14      	ldr	r3, [pc, #80]	; (7240 <spi_write_reg+0x180>)
    71ee:	4798      	blx	r3
		retry--;
    71f0:	230f      	movs	r3, #15
    71f2:	18fb      	adds	r3, r7, r3
    71f4:	781a      	ldrb	r2, [r3, #0]
    71f6:	230f      	movs	r3, #15
    71f8:	18fb      	adds	r3, r7, r3
    71fa:	3a01      	subs	r2, #1
    71fc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    71fe:	230f      	movs	r3, #15
    7200:	18fb      	adds	r3, r7, r3
    7202:	781b      	ldrb	r3, [r3, #0]
    7204:	2b00      	cmp	r3, #0
    7206:	d000      	beq.n	720a <spi_write_reg+0x14a>
    7208:	e76f      	b.n	70ea <spi_write_reg+0x2a>
	}

	return result;
    720a:	230e      	movs	r3, #14
    720c:	18fb      	adds	r3, r7, r3
    720e:	781b      	ldrb	r3, [r3, #0]
    7210:	b25b      	sxtb	r3, r3
}
    7212:	0018      	movs	r0, r3
    7214:	46bd      	mov	sp, r7
    7216:	b004      	add	sp, #16
    7218:	bdb0      	pop	{r4, r5, r7, pc}
    721a:	46c0      	nop			; (mov r8, r8)
    721c:	0000676d 	.word	0x0000676d
    7220:	00000396 	.word	0x00000396
    7224:	0001a414 	.word	0x0001a414
    7228:	00019e3c 	.word	0x00019e3c
    722c:	00013e4d 	.word	0x00013e4d
    7230:	0001a06c 	.word	0x0001a06c
    7234:	00013e81 	.word	0x00013e81
    7238:	00006bb1 	.word	0x00006bb1
    723c:	0001a098 	.word	0x0001a098
    7240:	00003641 	.word	0x00003641
    7244:	000003af 	.word	0x000003af
    7248:	0001a0d0 	.word	0x0001a0d0

0000724c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    724c:	b5b0      	push	{r4, r5, r7, lr}
    724e:	b088      	sub	sp, #32
    7250:	af02      	add	r7, sp, #8
    7252:	60f8      	str	r0, [r7, #12]
    7254:	60b9      	str	r1, [r7, #8]
    7256:	1dbb      	adds	r3, r7, #6
    7258:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    725a:	2316      	movs	r3, #22
    725c:	18fb      	adds	r3, r7, r3
    725e:	220a      	movs	r2, #10
    7260:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    7262:	2315      	movs	r3, #21
    7264:	18fb      	adds	r3, r7, r3
    7266:	22c7      	movs	r2, #199	; 0xc7
    7268:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    726a:	1dbb      	adds	r3, r7, #6
    726c:	881b      	ldrh	r3, [r3, #0]
    726e:	2b01      	cmp	r3, #1
    7270:	d102      	bne.n	7278 <nm_spi_write+0x2c>
		size = 2;
    7272:	1dbb      	adds	r3, r7, #6
    7274:	2202      	movs	r2, #2
    7276:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    7278:	1dbb      	adds	r3, r7, #6
    727a:	881a      	ldrh	r2, [r3, #0]
    727c:	2317      	movs	r3, #23
    727e:	18fc      	adds	r4, r7, r3
    7280:	68f9      	ldr	r1, [r7, #12]
    7282:	2315      	movs	r3, #21
    7284:	18fb      	adds	r3, r7, r3
    7286:	7818      	ldrb	r0, [r3, #0]
    7288:	2300      	movs	r3, #0
    728a:	9300      	str	r3, [sp, #0]
    728c:	0013      	movs	r3, r2
    728e:	2200      	movs	r2, #0
    7290:	4d5b      	ldr	r5, [pc, #364]	; (7400 <nm_spi_write+0x1b4>)
    7292:	47a8      	blx	r5
    7294:	0003      	movs	r3, r0
    7296:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    7298:	2317      	movs	r3, #23
    729a:	18fb      	adds	r3, r7, r3
    729c:	781b      	ldrb	r3, [r3, #0]
    729e:	b25b      	sxtb	r3, r3
    72a0:	2b01      	cmp	r3, #1
    72a2:	d00f      	beq.n	72c4 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    72a4:	4a57      	ldr	r2, [pc, #348]	; (7404 <nm_spi_write+0x1b8>)
    72a6:	4958      	ldr	r1, [pc, #352]	; (7408 <nm_spi_write+0x1bc>)
    72a8:	4b58      	ldr	r3, [pc, #352]	; (740c <nm_spi_write+0x1c0>)
    72aa:	0018      	movs	r0, r3
    72ac:	4b58      	ldr	r3, [pc, #352]	; (7410 <nm_spi_write+0x1c4>)
    72ae:	4798      	blx	r3
    72b0:	68fa      	ldr	r2, [r7, #12]
    72b2:	4b58      	ldr	r3, [pc, #352]	; (7414 <nm_spi_write+0x1c8>)
    72b4:	0011      	movs	r1, r2
    72b6:	0018      	movs	r0, r3
    72b8:	4b55      	ldr	r3, [pc, #340]	; (7410 <nm_spi_write+0x1c4>)
    72ba:	4798      	blx	r3
    72bc:	200d      	movs	r0, #13
    72be:	4b56      	ldr	r3, [pc, #344]	; (7418 <nm_spi_write+0x1cc>)
    72c0:	4798      	blx	r3
		goto _FAIL_;
    72c2:	e05f      	b.n	7384 <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    72c4:	2317      	movs	r3, #23
    72c6:	18fc      	adds	r4, r7, r3
    72c8:	2315      	movs	r3, #21
    72ca:	18fb      	adds	r3, r7, r3
    72cc:	781b      	ldrb	r3, [r3, #0]
    72ce:	0018      	movs	r0, r3
    72d0:	4b52      	ldr	r3, [pc, #328]	; (741c <nm_spi_write+0x1d0>)
    72d2:	4798      	blx	r3
    72d4:	0003      	movs	r3, r0
    72d6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    72d8:	2317      	movs	r3, #23
    72da:	18fb      	adds	r3, r7, r3
    72dc:	781b      	ldrb	r3, [r3, #0]
    72de:	b25b      	sxtb	r3, r3
    72e0:	2b01      	cmp	r3, #1
    72e2:	d010      	beq.n	7306 <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    72e4:	23f4      	movs	r3, #244	; 0xf4
    72e6:	009a      	lsls	r2, r3, #2
    72e8:	4947      	ldr	r1, [pc, #284]	; (7408 <nm_spi_write+0x1bc>)
    72ea:	4b48      	ldr	r3, [pc, #288]	; (740c <nm_spi_write+0x1c0>)
    72ec:	0018      	movs	r0, r3
    72ee:	4b48      	ldr	r3, [pc, #288]	; (7410 <nm_spi_write+0x1c4>)
    72f0:	4798      	blx	r3
    72f2:	68fa      	ldr	r2, [r7, #12]
    72f4:	4b4a      	ldr	r3, [pc, #296]	; (7420 <nm_spi_write+0x1d4>)
    72f6:	0011      	movs	r1, r2
    72f8:	0018      	movs	r0, r3
    72fa:	4b45      	ldr	r3, [pc, #276]	; (7410 <nm_spi_write+0x1c4>)
    72fc:	4798      	blx	r3
    72fe:	200d      	movs	r0, #13
    7300:	4b45      	ldr	r3, [pc, #276]	; (7418 <nm_spi_write+0x1cc>)
    7302:	4798      	blx	r3
		goto _FAIL_;
    7304:	e03e      	b.n	7384 <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    7306:	2317      	movs	r3, #23
    7308:	18fc      	adds	r4, r7, r3
    730a:	1dbb      	adds	r3, r7, #6
    730c:	881a      	ldrh	r2, [r3, #0]
    730e:	68bb      	ldr	r3, [r7, #8]
    7310:	0011      	movs	r1, r2
    7312:	0018      	movs	r0, r3
    7314:	4b43      	ldr	r3, [pc, #268]	; (7424 <nm_spi_write+0x1d8>)
    7316:	4798      	blx	r3
    7318:	0003      	movs	r3, r0
    731a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    731c:	2317      	movs	r3, #23
    731e:	18fb      	adds	r3, r7, r3
    7320:	781b      	ldrb	r3, [r3, #0]
    7322:	b25b      	sxtb	r3, r3
    7324:	2b01      	cmp	r3, #1
    7326:	d00e      	beq.n	7346 <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    7328:	23f8      	movs	r3, #248	; 0xf8
    732a:	009a      	lsls	r2, r3, #2
    732c:	4936      	ldr	r1, [pc, #216]	; (7408 <nm_spi_write+0x1bc>)
    732e:	4b37      	ldr	r3, [pc, #220]	; (740c <nm_spi_write+0x1c0>)
    7330:	0018      	movs	r0, r3
    7332:	4b37      	ldr	r3, [pc, #220]	; (7410 <nm_spi_write+0x1c4>)
    7334:	4798      	blx	r3
    7336:	4b3c      	ldr	r3, [pc, #240]	; (7428 <nm_spi_write+0x1dc>)
    7338:	0018      	movs	r0, r3
    733a:	4b3c      	ldr	r3, [pc, #240]	; (742c <nm_spi_write+0x1e0>)
    733c:	4798      	blx	r3
    733e:	200d      	movs	r0, #13
    7340:	4b35      	ldr	r3, [pc, #212]	; (7418 <nm_spi_write+0x1cc>)
    7342:	4798      	blx	r3
		goto _FAIL_;
    7344:	e01e      	b.n	7384 <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    7346:	2317      	movs	r3, #23
    7348:	18fc      	adds	r4, r7, r3
    734a:	2315      	movs	r3, #21
    734c:	18fb      	adds	r3, r7, r3
    734e:	781b      	ldrb	r3, [r3, #0]
    7350:	0018      	movs	r0, r3
    7352:	4b37      	ldr	r3, [pc, #220]	; (7430 <nm_spi_write+0x1e4>)
    7354:	4798      	blx	r3
    7356:	0003      	movs	r3, r0
    7358:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    735a:	2317      	movs	r3, #23
    735c:	18fb      	adds	r3, r7, r3
    735e:	781b      	ldrb	r3, [r3, #0]
    7360:	b25b      	sxtb	r3, r3
    7362:	2b01      	cmp	r3, #1
    7364:	d00e      	beq.n	7384 <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    7366:	23fa      	movs	r3, #250	; 0xfa
    7368:	009a      	lsls	r2, r3, #2
    736a:	4927      	ldr	r1, [pc, #156]	; (7408 <nm_spi_write+0x1bc>)
    736c:	4b27      	ldr	r3, [pc, #156]	; (740c <nm_spi_write+0x1c0>)
    736e:	0018      	movs	r0, r3
    7370:	4b27      	ldr	r3, [pc, #156]	; (7410 <nm_spi_write+0x1c4>)
    7372:	4798      	blx	r3
    7374:	4b2c      	ldr	r3, [pc, #176]	; (7428 <nm_spi_write+0x1dc>)
    7376:	0018      	movs	r0, r3
    7378:	4b2c      	ldr	r3, [pc, #176]	; (742c <nm_spi_write+0x1e0>)
    737a:	4798      	blx	r3
    737c:	200d      	movs	r0, #13
    737e:	4b26      	ldr	r3, [pc, #152]	; (7418 <nm_spi_write+0x1cc>)
    7380:	4798      	blx	r3
		goto _FAIL_;
    7382:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    7384:	2317      	movs	r3, #23
    7386:	18fb      	adds	r3, r7, r3
    7388:	781b      	ldrb	r3, [r3, #0]
    738a:	b25b      	sxtb	r3, r3
    738c:	2b01      	cmp	r3, #1
    738e:	d02f      	beq.n	73f0 <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    7390:	2001      	movs	r0, #1
    7392:	4b28      	ldr	r3, [pc, #160]	; (7434 <nm_spi_write+0x1e8>)
    7394:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7396:	2300      	movs	r3, #0
    7398:	9300      	str	r3, [sp, #0]
    739a:	2300      	movs	r3, #0
    739c:	2200      	movs	r2, #0
    739e:	2100      	movs	r1, #0
    73a0:	20cf      	movs	r0, #207	; 0xcf
    73a2:	4c17      	ldr	r4, [pc, #92]	; (7400 <nm_spi_write+0x1b4>)
    73a4:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    73a6:	20cf      	movs	r0, #207	; 0xcf
    73a8:	4b1c      	ldr	r3, [pc, #112]	; (741c <nm_spi_write+0x1d0>)
    73aa:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    73ac:	4a22      	ldr	r2, [pc, #136]	; (7438 <nm_spi_write+0x1ec>)
    73ae:	4916      	ldr	r1, [pc, #88]	; (7408 <nm_spi_write+0x1bc>)
    73b0:	4b16      	ldr	r3, [pc, #88]	; (740c <nm_spi_write+0x1c0>)
    73b2:	0018      	movs	r0, r3
    73b4:	4b16      	ldr	r3, [pc, #88]	; (7410 <nm_spi_write+0x1c4>)
    73b6:	4798      	blx	r3
    73b8:	2316      	movs	r3, #22
    73ba:	18fb      	adds	r3, r7, r3
    73bc:	7819      	ldrb	r1, [r3, #0]
    73be:	1dbb      	adds	r3, r7, #6
    73c0:	881b      	ldrh	r3, [r3, #0]
    73c2:	68fa      	ldr	r2, [r7, #12]
    73c4:	481d      	ldr	r0, [pc, #116]	; (743c <nm_spi_write+0x1f0>)
    73c6:	4c12      	ldr	r4, [pc, #72]	; (7410 <nm_spi_write+0x1c4>)
    73c8:	47a0      	blx	r4
    73ca:	200d      	movs	r0, #13
    73cc:	4b12      	ldr	r3, [pc, #72]	; (7418 <nm_spi_write+0x1cc>)
    73ce:	4798      	blx	r3
		nm_bsp_sleep(1);
    73d0:	2001      	movs	r0, #1
    73d2:	4b18      	ldr	r3, [pc, #96]	; (7434 <nm_spi_write+0x1e8>)
    73d4:	4798      	blx	r3
		retry--;
    73d6:	2316      	movs	r3, #22
    73d8:	18fb      	adds	r3, r7, r3
    73da:	781a      	ldrb	r2, [r3, #0]
    73dc:	2316      	movs	r3, #22
    73de:	18fb      	adds	r3, r7, r3
    73e0:	3a01      	subs	r2, #1
    73e2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    73e4:	2316      	movs	r3, #22
    73e6:	18fb      	adds	r3, r7, r3
    73e8:	781b      	ldrb	r3, [r3, #0]
    73ea:	2b00      	cmp	r3, #0
    73ec:	d000      	beq.n	73f0 <nm_spi_write+0x1a4>
    73ee:	e73c      	b.n	726a <nm_spi_write+0x1e>
	}


	return result;
    73f0:	2317      	movs	r3, #23
    73f2:	18fb      	adds	r3, r7, r3
    73f4:	781b      	ldrb	r3, [r3, #0]
    73f6:	b25b      	sxtb	r3, r3
}
    73f8:	0018      	movs	r0, r3
    73fa:	46bd      	mov	sp, r7
    73fc:	b006      	add	sp, #24
    73fe:	bdb0      	pop	{r4, r5, r7, pc}
    7400:	0000676d 	.word	0x0000676d
    7404:	000003ca 	.word	0x000003ca
    7408:	0001a424 	.word	0x0001a424
    740c:	00019e3c 	.word	0x00019e3c
    7410:	00013e4d 	.word	0x00013e4d
    7414:	0001a0ec 	.word	0x0001a0ec
    7418:	00013e81 	.word	0x00013e81
    741c:	00006bb1 	.word	0x00006bb1
    7420:	0001a11c 	.word	0x0001a11c
    7424:	00006eed 	.word	0x00006eed
    7428:	0001a154 	.word	0x0001a154
    742c:	00013f69 	.word	0x00013f69
    7430:	00006ab1 	.word	0x00006ab1
    7434:	00003641 	.word	0x00003641
    7438:	000003f2 	.word	0x000003f2
    743c:	0001a17c 	.word	0x0001a17c

00007440 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    7440:	b5b0      	push	{r4, r5, r7, lr}
    7442:	b086      	sub	sp, #24
    7444:	af02      	add	r7, sp, #8
    7446:	6078      	str	r0, [r7, #4]
    7448:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    744a:	230f      	movs	r3, #15
    744c:	18fb      	adds	r3, r7, r3
    744e:	220a      	movs	r2, #10
    7450:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    7452:	230e      	movs	r3, #14
    7454:	18fb      	adds	r3, r7, r3
    7456:	2201      	movs	r2, #1
    7458:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    745a:	230d      	movs	r3, #13
    745c:	18fb      	adds	r3, r7, r3
    745e:	22ca      	movs	r2, #202	; 0xca
    7460:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    7462:	230c      	movs	r3, #12
    7464:	18fb      	adds	r3, r7, r3
    7466:	2200      	movs	r2, #0
    7468:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    746a:	687b      	ldr	r3, [r7, #4]
    746c:	2bff      	cmp	r3, #255	; 0xff
    746e:	d808      	bhi.n	7482 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    7470:	230d      	movs	r3, #13
    7472:	18fb      	adds	r3, r7, r3
    7474:	22c4      	movs	r2, #196	; 0xc4
    7476:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    7478:	230c      	movs	r3, #12
    747a:	18fb      	adds	r3, r7, r3
    747c:	2201      	movs	r2, #1
    747e:	701a      	strb	r2, [r3, #0]
    7480:	e007      	b.n	7492 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    7482:	230d      	movs	r3, #13
    7484:	18fb      	adds	r3, r7, r3
    7486:	22ca      	movs	r2, #202	; 0xca
    7488:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    748a:	230c      	movs	r3, #12
    748c:	18fb      	adds	r3, r7, r3
    748e:	2200      	movs	r2, #0
    7490:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    7492:	230e      	movs	r3, #14
    7494:	18fc      	adds	r4, r7, r3
    7496:	6879      	ldr	r1, [r7, #4]
    7498:	230d      	movs	r3, #13
    749a:	18fb      	adds	r3, r7, r3
    749c:	7818      	ldrb	r0, [r3, #0]
    749e:	230c      	movs	r3, #12
    74a0:	18fb      	adds	r3, r7, r3
    74a2:	781b      	ldrb	r3, [r3, #0]
    74a4:	9300      	str	r3, [sp, #0]
    74a6:	2304      	movs	r3, #4
    74a8:	2200      	movs	r2, #0
    74aa:	4d56      	ldr	r5, [pc, #344]	; (7604 <spi_read_reg+0x1c4>)
    74ac:	47a8      	blx	r5
    74ae:	0003      	movs	r3, r0
    74b0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    74b2:	230e      	movs	r3, #14
    74b4:	18fb      	adds	r3, r7, r3
    74b6:	781b      	ldrb	r3, [r3, #0]
    74b8:	b25b      	sxtb	r3, r3
    74ba:	2b01      	cmp	r3, #1
    74bc:	d00f      	beq.n	74de <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    74be:	4a52      	ldr	r2, [pc, #328]	; (7608 <spi_read_reg+0x1c8>)
    74c0:	4952      	ldr	r1, [pc, #328]	; (760c <spi_read_reg+0x1cc>)
    74c2:	4b53      	ldr	r3, [pc, #332]	; (7610 <spi_read_reg+0x1d0>)
    74c4:	0018      	movs	r0, r3
    74c6:	4b53      	ldr	r3, [pc, #332]	; (7614 <spi_read_reg+0x1d4>)
    74c8:	4798      	blx	r3
    74ca:	687a      	ldr	r2, [r7, #4]
    74cc:	4b52      	ldr	r3, [pc, #328]	; (7618 <spi_read_reg+0x1d8>)
    74ce:	0011      	movs	r1, r2
    74d0:	0018      	movs	r0, r3
    74d2:	4b50      	ldr	r3, [pc, #320]	; (7614 <spi_read_reg+0x1d4>)
    74d4:	4798      	blx	r3
    74d6:	200d      	movs	r0, #13
    74d8:	4b50      	ldr	r3, [pc, #320]	; (761c <spi_read_reg+0x1dc>)
    74da:	4798      	blx	r3
		goto _FAIL_;
    74dc:	e055      	b.n	758a <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    74de:	230e      	movs	r3, #14
    74e0:	18fc      	adds	r4, r7, r3
    74e2:	230d      	movs	r3, #13
    74e4:	18fb      	adds	r3, r7, r3
    74e6:	781b      	ldrb	r3, [r3, #0]
    74e8:	0018      	movs	r0, r3
    74ea:	4b4d      	ldr	r3, [pc, #308]	; (7620 <spi_read_reg+0x1e0>)
    74ec:	4798      	blx	r3
    74ee:	0003      	movs	r3, r0
    74f0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    74f2:	230e      	movs	r3, #14
    74f4:	18fb      	adds	r3, r7, r3
    74f6:	781b      	ldrb	r3, [r3, #0]
    74f8:	b25b      	sxtb	r3, r3
    74fa:	2b01      	cmp	r3, #1
    74fc:	d00f      	beq.n	751e <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    74fe:	4a49      	ldr	r2, [pc, #292]	; (7624 <spi_read_reg+0x1e4>)
    7500:	4942      	ldr	r1, [pc, #264]	; (760c <spi_read_reg+0x1cc>)
    7502:	4b43      	ldr	r3, [pc, #268]	; (7610 <spi_read_reg+0x1d0>)
    7504:	0018      	movs	r0, r3
    7506:	4b43      	ldr	r3, [pc, #268]	; (7614 <spi_read_reg+0x1d4>)
    7508:	4798      	blx	r3
    750a:	687a      	ldr	r2, [r7, #4]
    750c:	4b46      	ldr	r3, [pc, #280]	; (7628 <spi_read_reg+0x1e8>)
    750e:	0011      	movs	r1, r2
    7510:	0018      	movs	r0, r3
    7512:	4b40      	ldr	r3, [pc, #256]	; (7614 <spi_read_reg+0x1d4>)
    7514:	4798      	blx	r3
    7516:	200d      	movs	r0, #13
    7518:	4b40      	ldr	r3, [pc, #256]	; (761c <spi_read_reg+0x1dc>)
    751a:	4798      	blx	r3
		goto _FAIL_;
    751c:	e035      	b.n	758a <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    751e:	230e      	movs	r3, #14
    7520:	18fc      	adds	r4, r7, r3
    7522:	230c      	movs	r3, #12
    7524:	18fb      	adds	r3, r7, r3
    7526:	781a      	ldrb	r2, [r3, #0]
    7528:	2308      	movs	r3, #8
    752a:	18fb      	adds	r3, r7, r3
    752c:	2104      	movs	r1, #4
    752e:	0018      	movs	r0, r3
    7530:	4b3e      	ldr	r3, [pc, #248]	; (762c <spi_read_reg+0x1ec>)
    7532:	4798      	blx	r3
    7534:	0003      	movs	r3, r0
    7536:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    7538:	230e      	movs	r3, #14
    753a:	18fb      	adds	r3, r7, r3
    753c:	781b      	ldrb	r3, [r3, #0]
    753e:	b25b      	sxtb	r3, r3
    7540:	2b01      	cmp	r3, #1
    7542:	d00d      	beq.n	7560 <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    7544:	4a3a      	ldr	r2, [pc, #232]	; (7630 <spi_read_reg+0x1f0>)
    7546:	4931      	ldr	r1, [pc, #196]	; (760c <spi_read_reg+0x1cc>)
    7548:	4b31      	ldr	r3, [pc, #196]	; (7610 <spi_read_reg+0x1d0>)
    754a:	0018      	movs	r0, r3
    754c:	4b31      	ldr	r3, [pc, #196]	; (7614 <spi_read_reg+0x1d4>)
    754e:	4798      	blx	r3
    7550:	4b38      	ldr	r3, [pc, #224]	; (7634 <spi_read_reg+0x1f4>)
    7552:	0018      	movs	r0, r3
    7554:	4b38      	ldr	r3, [pc, #224]	; (7638 <spi_read_reg+0x1f8>)
    7556:	4798      	blx	r3
    7558:	200d      	movs	r0, #13
    755a:	4b30      	ldr	r3, [pc, #192]	; (761c <spi_read_reg+0x1dc>)
    755c:	4798      	blx	r3
		goto _FAIL_;
    755e:	e014      	b.n	758a <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    7560:	2308      	movs	r3, #8
    7562:	18fb      	adds	r3, r7, r3
    7564:	781b      	ldrb	r3, [r3, #0]
    7566:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    7568:	2308      	movs	r3, #8
    756a:	18fb      	adds	r3, r7, r3
    756c:	785b      	ldrb	r3, [r3, #1]
    756e:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    7570:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    7572:	2308      	movs	r3, #8
    7574:	18fb      	adds	r3, r7, r3
    7576:	789b      	ldrb	r3, [r3, #2]
    7578:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    757a:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    757c:	2308      	movs	r3, #8
    757e:	18fb      	adds	r3, r7, r3
    7580:	78db      	ldrb	r3, [r3, #3]
    7582:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    7584:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    7586:	683b      	ldr	r3, [r7, #0]
    7588:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
    758a:	230e      	movs	r3, #14
    758c:	18fb      	adds	r3, r7, r3
    758e:	781b      	ldrb	r3, [r3, #0]
    7590:	b25b      	sxtb	r3, r3
    7592:	2b01      	cmp	r3, #1
    7594:	d02e      	beq.n	75f4 <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    7596:	2001      	movs	r0, #1
    7598:	4b28      	ldr	r3, [pc, #160]	; (763c <spi_read_reg+0x1fc>)
    759a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    759c:	2300      	movs	r3, #0
    759e:	9300      	str	r3, [sp, #0]
    75a0:	2300      	movs	r3, #0
    75a2:	2200      	movs	r2, #0
    75a4:	2100      	movs	r1, #0
    75a6:	20cf      	movs	r0, #207	; 0xcf
    75a8:	4c16      	ldr	r4, [pc, #88]	; (7604 <spi_read_reg+0x1c4>)
    75aa:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    75ac:	20cf      	movs	r0, #207	; 0xcf
    75ae:	4b1c      	ldr	r3, [pc, #112]	; (7620 <spi_read_reg+0x1e0>)
    75b0:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    75b2:	4a23      	ldr	r2, [pc, #140]	; (7640 <spi_read_reg+0x200>)
    75b4:	4915      	ldr	r1, [pc, #84]	; (760c <spi_read_reg+0x1cc>)
    75b6:	4b16      	ldr	r3, [pc, #88]	; (7610 <spi_read_reg+0x1d0>)
    75b8:	0018      	movs	r0, r3
    75ba:	4b16      	ldr	r3, [pc, #88]	; (7614 <spi_read_reg+0x1d4>)
    75bc:	4798      	blx	r3
    75be:	230f      	movs	r3, #15
    75c0:	18fb      	adds	r3, r7, r3
    75c2:	7819      	ldrb	r1, [r3, #0]
    75c4:	687a      	ldr	r2, [r7, #4]
    75c6:	4b1f      	ldr	r3, [pc, #124]	; (7644 <spi_read_reg+0x204>)
    75c8:	0018      	movs	r0, r3
    75ca:	4b12      	ldr	r3, [pc, #72]	; (7614 <spi_read_reg+0x1d4>)
    75cc:	4798      	blx	r3
    75ce:	200d      	movs	r0, #13
    75d0:	4b12      	ldr	r3, [pc, #72]	; (761c <spi_read_reg+0x1dc>)
    75d2:	4798      	blx	r3
		nm_bsp_sleep(1);
    75d4:	2001      	movs	r0, #1
    75d6:	4b19      	ldr	r3, [pc, #100]	; (763c <spi_read_reg+0x1fc>)
    75d8:	4798      	blx	r3
		retry--;
    75da:	230f      	movs	r3, #15
    75dc:	18fb      	adds	r3, r7, r3
    75de:	781a      	ldrb	r2, [r3, #0]
    75e0:	230f      	movs	r3, #15
    75e2:	18fb      	adds	r3, r7, r3
    75e4:	3a01      	subs	r2, #1
    75e6:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    75e8:	230f      	movs	r3, #15
    75ea:	18fb      	adds	r3, r7, r3
    75ec:	781b      	ldrb	r3, [r3, #0]
    75ee:	2b00      	cmp	r3, #0
    75f0:	d000      	beq.n	75f4 <spi_read_reg+0x1b4>
    75f2:	e73a      	b.n	746a <spi_read_reg+0x2a>
	}
		
	return result;
    75f4:	230e      	movs	r3, #14
    75f6:	18fb      	adds	r3, r7, r3
    75f8:	781b      	ldrb	r3, [r3, #0]
    75fa:	b25b      	sxtb	r3, r3
}
    75fc:	0018      	movs	r0, r3
    75fe:	46bd      	mov	sp, r7
    7600:	b004      	add	sp, #16
    7602:	bdb0      	pop	{r4, r5, r7, pc}
    7604:	0000676d 	.word	0x0000676d
    7608:	00000417 	.word	0x00000417
    760c:	0001a434 	.word	0x0001a434
    7610:	00019e3c 	.word	0x00019e3c
    7614:	00013e4d 	.word	0x00013e4d
    7618:	0001a198 	.word	0x0001a198
    761c:	00013e81 	.word	0x00013e81
    7620:	00006bb1 	.word	0x00006bb1
    7624:	0000041d 	.word	0x0000041d
    7628:	0001a1c4 	.word	0x0001a1c4
    762c:	00006ce9 	.word	0x00006ce9
    7630:	00000424 	.word	0x00000424
    7634:	0001a1f8 	.word	0x0001a1f8
    7638:	00013f69 	.word	0x00013f69
    763c:	00003641 	.word	0x00003641
    7640:	0000043c 	.word	0x0000043c
    7644:	0001a218 	.word	0x0001a218

00007648 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    7648:	b5b0      	push	{r4, r5, r7, lr}
    764a:	b088      	sub	sp, #32
    764c:	af02      	add	r7, sp, #8
    764e:	60f8      	str	r0, [r7, #12]
    7650:	60b9      	str	r1, [r7, #8]
    7652:	1dbb      	adds	r3, r7, #6
    7654:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    7656:	2314      	movs	r3, #20
    7658:	18fb      	adds	r3, r7, r3
    765a:	22c8      	movs	r2, #200	; 0xc8
    765c:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    765e:	2316      	movs	r3, #22
    7660:	18fb      	adds	r3, r7, r3
    7662:	220a      	movs	r2, #10
    7664:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    7666:	2315      	movs	r3, #21
    7668:	18fb      	adds	r3, r7, r3
    766a:	2200      	movs	r2, #0
    766c:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    766e:	1dbb      	adds	r3, r7, #6
    7670:	881b      	ldrh	r3, [r3, #0]
    7672:	2b01      	cmp	r3, #1
    7674:	d106      	bne.n	7684 <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    7676:	1dbb      	adds	r3, r7, #6
    7678:	2202      	movs	r2, #2
    767a:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    767c:	2315      	movs	r3, #21
    767e:	18fb      	adds	r3, r7, r3
    7680:	2201      	movs	r2, #1
    7682:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    7684:	1dbb      	adds	r3, r7, #6
    7686:	881a      	ldrh	r2, [r3, #0]
    7688:	2317      	movs	r3, #23
    768a:	18fc      	adds	r4, r7, r3
    768c:	68f9      	ldr	r1, [r7, #12]
    768e:	2314      	movs	r3, #20
    7690:	18fb      	adds	r3, r7, r3
    7692:	7818      	ldrb	r0, [r3, #0]
    7694:	2300      	movs	r3, #0
    7696:	9300      	str	r3, [sp, #0]
    7698:	0013      	movs	r3, r2
    769a:	2200      	movs	r2, #0
    769c:	4d56      	ldr	r5, [pc, #344]	; (77f8 <nm_spi_read+0x1b0>)
    769e:	47a8      	blx	r5
    76a0:	0003      	movs	r3, r0
    76a2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    76a4:	2317      	movs	r3, #23
    76a6:	18fb      	adds	r3, r7, r3
    76a8:	781b      	ldrb	r3, [r3, #0]
    76aa:	b25b      	sxtb	r3, r3
    76ac:	2b01      	cmp	r3, #1
    76ae:	d00f      	beq.n	76d0 <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    76b0:	4a52      	ldr	r2, [pc, #328]	; (77fc <nm_spi_read+0x1b4>)
    76b2:	4953      	ldr	r1, [pc, #332]	; (7800 <nm_spi_read+0x1b8>)
    76b4:	4b53      	ldr	r3, [pc, #332]	; (7804 <nm_spi_read+0x1bc>)
    76b6:	0018      	movs	r0, r3
    76b8:	4b53      	ldr	r3, [pc, #332]	; (7808 <nm_spi_read+0x1c0>)
    76ba:	4798      	blx	r3
    76bc:	68fa      	ldr	r2, [r7, #12]
    76be:	4b53      	ldr	r3, [pc, #332]	; (780c <nm_spi_read+0x1c4>)
    76c0:	0011      	movs	r1, r2
    76c2:	0018      	movs	r0, r3
    76c4:	4b50      	ldr	r3, [pc, #320]	; (7808 <nm_spi_read+0x1c0>)
    76c6:	4798      	blx	r3
    76c8:	200d      	movs	r0, #13
    76ca:	4b51      	ldr	r3, [pc, #324]	; (7810 <nm_spi_read+0x1c8>)
    76cc:	4798      	blx	r3
		goto _FAIL_;
    76ce:	e055      	b.n	777c <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    76d0:	2317      	movs	r3, #23
    76d2:	18fc      	adds	r4, r7, r3
    76d4:	2314      	movs	r3, #20
    76d6:	18fb      	adds	r3, r7, r3
    76d8:	781b      	ldrb	r3, [r3, #0]
    76da:	0018      	movs	r0, r3
    76dc:	4b4d      	ldr	r3, [pc, #308]	; (7814 <nm_spi_read+0x1cc>)
    76de:	4798      	blx	r3
    76e0:	0003      	movs	r3, r0
    76e2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    76e4:	2317      	movs	r3, #23
    76e6:	18fb      	adds	r3, r7, r3
    76e8:	781b      	ldrb	r3, [r3, #0]
    76ea:	b25b      	sxtb	r3, r3
    76ec:	2b01      	cmp	r3, #1
    76ee:	d00f      	beq.n	7710 <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    76f0:	4a49      	ldr	r2, [pc, #292]	; (7818 <nm_spi_read+0x1d0>)
    76f2:	4943      	ldr	r1, [pc, #268]	; (7800 <nm_spi_read+0x1b8>)
    76f4:	4b43      	ldr	r3, [pc, #268]	; (7804 <nm_spi_read+0x1bc>)
    76f6:	0018      	movs	r0, r3
    76f8:	4b43      	ldr	r3, [pc, #268]	; (7808 <nm_spi_read+0x1c0>)
    76fa:	4798      	blx	r3
    76fc:	68fa      	ldr	r2, [r7, #12]
    76fe:	4b47      	ldr	r3, [pc, #284]	; (781c <nm_spi_read+0x1d4>)
    7700:	0011      	movs	r1, r2
    7702:	0018      	movs	r0, r3
    7704:	4b40      	ldr	r3, [pc, #256]	; (7808 <nm_spi_read+0x1c0>)
    7706:	4798      	blx	r3
    7708:	200d      	movs	r0, #13
    770a:	4b41      	ldr	r3, [pc, #260]	; (7810 <nm_spi_read+0x1c8>)
    770c:	4798      	blx	r3
		goto _FAIL_;
    770e:	e035      	b.n	777c <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    7710:	2315      	movs	r3, #21
    7712:	18fb      	adds	r3, r7, r3
    7714:	781b      	ldrb	r3, [r3, #0]
    7716:	2b00      	cmp	r3, #0
    7718:	d011      	beq.n	773e <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    771a:	2317      	movs	r3, #23
    771c:	18fc      	adds	r4, r7, r3
    771e:	1dbb      	adds	r3, r7, #6
    7720:	8819      	ldrh	r1, [r3, #0]
    7722:	2310      	movs	r3, #16
    7724:	18fb      	adds	r3, r7, r3
    7726:	2200      	movs	r2, #0
    7728:	0018      	movs	r0, r3
    772a:	4b3d      	ldr	r3, [pc, #244]	; (7820 <nm_spi_read+0x1d8>)
    772c:	4798      	blx	r3
    772e:	0003      	movs	r3, r0
    7730:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    7732:	2310      	movs	r3, #16
    7734:	18fb      	adds	r3, r7, r3
    7736:	781a      	ldrb	r2, [r3, #0]
    7738:	68bb      	ldr	r3, [r7, #8]
    773a:	701a      	strb	r2, [r3, #0]
    773c:	e00a      	b.n	7754 <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    773e:	2317      	movs	r3, #23
    7740:	18fc      	adds	r4, r7, r3
    7742:	1dbb      	adds	r3, r7, #6
    7744:	8819      	ldrh	r1, [r3, #0]
    7746:	68bb      	ldr	r3, [r7, #8]
    7748:	2200      	movs	r2, #0
    774a:	0018      	movs	r0, r3
    774c:	4b34      	ldr	r3, [pc, #208]	; (7820 <nm_spi_read+0x1d8>)
    774e:	4798      	blx	r3
    7750:	0003      	movs	r3, r0
    7752:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    7754:	2317      	movs	r3, #23
    7756:	18fb      	adds	r3, r7, r3
    7758:	781b      	ldrb	r3, [r3, #0]
    775a:	b25b      	sxtb	r3, r3
    775c:	2b01      	cmp	r3, #1
    775e:	d00d      	beq.n	777c <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    7760:	4a30      	ldr	r2, [pc, #192]	; (7824 <nm_spi_read+0x1dc>)
    7762:	4927      	ldr	r1, [pc, #156]	; (7800 <nm_spi_read+0x1b8>)
    7764:	4b27      	ldr	r3, [pc, #156]	; (7804 <nm_spi_read+0x1bc>)
    7766:	0018      	movs	r0, r3
    7768:	4b27      	ldr	r3, [pc, #156]	; (7808 <nm_spi_read+0x1c0>)
    776a:	4798      	blx	r3
    776c:	4b2e      	ldr	r3, [pc, #184]	; (7828 <nm_spi_read+0x1e0>)
    776e:	0018      	movs	r0, r3
    7770:	4b2e      	ldr	r3, [pc, #184]	; (782c <nm_spi_read+0x1e4>)
    7772:	4798      	blx	r3
    7774:	200d      	movs	r0, #13
    7776:	4b26      	ldr	r3, [pc, #152]	; (7810 <nm_spi_read+0x1c8>)
    7778:	4798      	blx	r3
		goto _FAIL_;
    777a:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    777c:	2317      	movs	r3, #23
    777e:	18fb      	adds	r3, r7, r3
    7780:	781b      	ldrb	r3, [r3, #0]
    7782:	b25b      	sxtb	r3, r3
    7784:	2b01      	cmp	r3, #1
    7786:	d02f      	beq.n	77e8 <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    7788:	2001      	movs	r0, #1
    778a:	4b29      	ldr	r3, [pc, #164]	; (7830 <nm_spi_read+0x1e8>)
    778c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    778e:	2300      	movs	r3, #0
    7790:	9300      	str	r3, [sp, #0]
    7792:	2300      	movs	r3, #0
    7794:	2200      	movs	r2, #0
    7796:	2100      	movs	r1, #0
    7798:	20cf      	movs	r0, #207	; 0xcf
    779a:	4c17      	ldr	r4, [pc, #92]	; (77f8 <nm_spi_read+0x1b0>)
    779c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    779e:	20cf      	movs	r0, #207	; 0xcf
    77a0:	4b1c      	ldr	r3, [pc, #112]	; (7814 <nm_spi_read+0x1cc>)
    77a2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    77a4:	4a23      	ldr	r2, [pc, #140]	; (7834 <nm_spi_read+0x1ec>)
    77a6:	4916      	ldr	r1, [pc, #88]	; (7800 <nm_spi_read+0x1b8>)
    77a8:	4b16      	ldr	r3, [pc, #88]	; (7804 <nm_spi_read+0x1bc>)
    77aa:	0018      	movs	r0, r3
    77ac:	4b16      	ldr	r3, [pc, #88]	; (7808 <nm_spi_read+0x1c0>)
    77ae:	4798      	blx	r3
    77b0:	2316      	movs	r3, #22
    77b2:	18fb      	adds	r3, r7, r3
    77b4:	7819      	ldrb	r1, [r3, #0]
    77b6:	1dbb      	adds	r3, r7, #6
    77b8:	881b      	ldrh	r3, [r3, #0]
    77ba:	68fa      	ldr	r2, [r7, #12]
    77bc:	481e      	ldr	r0, [pc, #120]	; (7838 <nm_spi_read+0x1f0>)
    77be:	4c12      	ldr	r4, [pc, #72]	; (7808 <nm_spi_read+0x1c0>)
    77c0:	47a0      	blx	r4
    77c2:	200d      	movs	r0, #13
    77c4:	4b12      	ldr	r3, [pc, #72]	; (7810 <nm_spi_read+0x1c8>)
    77c6:	4798      	blx	r3
		nm_bsp_sleep(1);
    77c8:	2001      	movs	r0, #1
    77ca:	4b19      	ldr	r3, [pc, #100]	; (7830 <nm_spi_read+0x1e8>)
    77cc:	4798      	blx	r3
		retry--;
    77ce:	2316      	movs	r3, #22
    77d0:	18fb      	adds	r3, r7, r3
    77d2:	781a      	ldrb	r2, [r3, #0]
    77d4:	2316      	movs	r3, #22
    77d6:	18fb      	adds	r3, r7, r3
    77d8:	3a01      	subs	r2, #1
    77da:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    77dc:	2316      	movs	r3, #22
    77de:	18fb      	adds	r3, r7, r3
    77e0:	781b      	ldrb	r3, [r3, #0]
    77e2:	2b00      	cmp	r3, #0
    77e4:	d000      	beq.n	77e8 <nm_spi_read+0x1a0>
    77e6:	e742      	b.n	766e <nm_spi_read+0x26>
	}

	return result;
    77e8:	2317      	movs	r3, #23
    77ea:	18fb      	adds	r3, r7, r3
    77ec:	781b      	ldrb	r3, [r3, #0]
    77ee:	b25b      	sxtb	r3, r3
}
    77f0:	0018      	movs	r0, r3
    77f2:	46bd      	mov	sp, r7
    77f4:	b006      	add	sp, #24
    77f6:	bdb0      	pop	{r4, r5, r7, pc}
    77f8:	0000676d 	.word	0x0000676d
    77fc:	0000045d 	.word	0x0000045d
    7800:	0001a444 	.word	0x0001a444
    7804:	00019e3c 	.word	0x00019e3c
    7808:	00013e4d 	.word	0x00013e4d
    780c:	0001a230 	.word	0x0001a230
    7810:	00013e81 	.word	0x00013e81
    7814:	00006bb1 	.word	0x00006bb1
    7818:	00000463 	.word	0x00000463
    781c:	0001a260 	.word	0x0001a260
    7820:	00006ce9 	.word	0x00006ce9
    7824:	00000473 	.word	0x00000473
    7828:	0001a298 	.word	0x0001a298
    782c:	00013f69 	.word	0x00013f69
    7830:	00003641 	.word	0x00003641
    7834:	00000484 	.word	0x00000484
    7838:	0001a17c 	.word	0x0001a17c

0000783c <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    783c:	b580      	push	{r7, lr}
    783e:	b082      	sub	sp, #8
    7840:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    7842:	4b0c      	ldr	r3, [pc, #48]	; (7874 <spi_init_pkt_sz+0x38>)
    7844:	0018      	movs	r0, r3
    7846:	4b0c      	ldr	r3, [pc, #48]	; (7878 <spi_init_pkt_sz+0x3c>)
    7848:	4798      	blx	r3
    784a:	0003      	movs	r3, r0
    784c:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    784e:	687b      	ldr	r3, [r7, #4]
    7850:	2270      	movs	r2, #112	; 0x70
    7852:	4393      	bics	r3, r2
    7854:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    7856:	687b      	ldr	r3, [r7, #4]
    7858:	2250      	movs	r2, #80	; 0x50
    785a:	4313      	orrs	r3, r2
    785c:	607b      	str	r3, [r7, #4]
    785e:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    7860:	687b      	ldr	r3, [r7, #4]
    7862:	4a04      	ldr	r2, [pc, #16]	; (7874 <spi_init_pkt_sz+0x38>)
    7864:	0019      	movs	r1, r3
    7866:	0010      	movs	r0, r2
    7868:	4b04      	ldr	r3, [pc, #16]	; (787c <spi_init_pkt_sz+0x40>)
    786a:	4798      	blx	r3
}
    786c:	46c0      	nop			; (mov r8, r8)
    786e:	46bd      	mov	sp, r7
    7870:	b002      	add	sp, #8
    7872:	bd80      	pop	{r7, pc}
    7874:	0000e824 	.word	0x0000e824
    7878:	00007a15 	.word	0x00007a15
    787c:	00007a89 	.word	0x00007a89

00007880 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    7880:	b590      	push	{r4, r7, lr}
    7882:	b083      	sub	sp, #12
    7884:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7886:	2300      	movs	r3, #0
    7888:	9300      	str	r3, [sp, #0]
    788a:	2300      	movs	r3, #0
    788c:	2200      	movs	r2, #0
    788e:	2100      	movs	r1, #0
    7890:	20cf      	movs	r0, #207	; 0xcf
    7892:	4c05      	ldr	r4, [pc, #20]	; (78a8 <nm_spi_reset+0x28>)
    7894:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    7896:	20cf      	movs	r0, #207	; 0xcf
    7898:	4b04      	ldr	r3, [pc, #16]	; (78ac <nm_spi_reset+0x2c>)
    789a:	4798      	blx	r3
	return M2M_SUCCESS;
    789c:	2300      	movs	r3, #0
}
    789e:	0018      	movs	r0, r3
    78a0:	46bd      	mov	sp, r7
    78a2:	b001      	add	sp, #4
    78a4:	bd90      	pop	{r4, r7, pc}
    78a6:	46c0      	nop			; (mov r8, r8)
    78a8:	0000676d 	.word	0x0000676d
    78ac:	00006bb1 	.word	0x00006bb1

000078b0 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    78b0:	b580      	push	{r7, lr}
    78b2:	b082      	sub	sp, #8
    78b4:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    78b6:	2300      	movs	r3, #0
    78b8:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    78ba:	4b3e      	ldr	r3, [pc, #248]	; (79b4 <nm_spi_init+0x104>)
    78bc:	2200      	movs	r2, #0
    78be:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    78c0:	003b      	movs	r3, r7
    78c2:	4a3d      	ldr	r2, [pc, #244]	; (79b8 <nm_spi_init+0x108>)
    78c4:	0019      	movs	r1, r3
    78c6:	0010      	movs	r0, r2
    78c8:	4b3c      	ldr	r3, [pc, #240]	; (79bc <nm_spi_init+0x10c>)
    78ca:	4798      	blx	r3
    78cc:	1e03      	subs	r3, r0, #0
    78ce:	d126      	bne.n	791e <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    78d0:	4b38      	ldr	r3, [pc, #224]	; (79b4 <nm_spi_init+0x104>)
    78d2:	2201      	movs	r2, #1
    78d4:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    78d6:	4a3a      	ldr	r2, [pc, #232]	; (79c0 <nm_spi_init+0x110>)
    78d8:	493a      	ldr	r1, [pc, #232]	; (79c4 <nm_spi_init+0x114>)
    78da:	4b3b      	ldr	r3, [pc, #236]	; (79c8 <nm_spi_init+0x118>)
    78dc:	0018      	movs	r0, r3
    78de:	4b3b      	ldr	r3, [pc, #236]	; (79cc <nm_spi_init+0x11c>)
    78e0:	4798      	blx	r3
    78e2:	4b3b      	ldr	r3, [pc, #236]	; (79d0 <nm_spi_init+0x120>)
    78e4:	0018      	movs	r0, r3
    78e6:	4b3b      	ldr	r3, [pc, #236]	; (79d4 <nm_spi_init+0x124>)
    78e8:	4798      	blx	r3
    78ea:	200d      	movs	r0, #13
    78ec:	4b3a      	ldr	r3, [pc, #232]	; (79d8 <nm_spi_init+0x128>)
    78ee:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    78f0:	003b      	movs	r3, r7
    78f2:	4a31      	ldr	r2, [pc, #196]	; (79b8 <nm_spi_init+0x108>)
    78f4:	0019      	movs	r1, r3
    78f6:	0010      	movs	r0, r2
    78f8:	4b30      	ldr	r3, [pc, #192]	; (79bc <nm_spi_init+0x10c>)
    78fa:	4798      	blx	r3
    78fc:	1e03      	subs	r3, r0, #0
    78fe:	d10e      	bne.n	791e <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    7900:	4a36      	ldr	r2, [pc, #216]	; (79dc <nm_spi_init+0x12c>)
    7902:	4930      	ldr	r1, [pc, #192]	; (79c4 <nm_spi_init+0x114>)
    7904:	4b30      	ldr	r3, [pc, #192]	; (79c8 <nm_spi_init+0x118>)
    7906:	0018      	movs	r0, r3
    7908:	4b30      	ldr	r3, [pc, #192]	; (79cc <nm_spi_init+0x11c>)
    790a:	4798      	blx	r3
    790c:	4b34      	ldr	r3, [pc, #208]	; (79e0 <nm_spi_init+0x130>)
    790e:	0018      	movs	r0, r3
    7910:	4b30      	ldr	r3, [pc, #192]	; (79d4 <nm_spi_init+0x124>)
    7912:	4798      	blx	r3
    7914:	200d      	movs	r0, #13
    7916:	4b30      	ldr	r3, [pc, #192]	; (79d8 <nm_spi_init+0x128>)
    7918:	4798      	blx	r3
			return 0;
    791a:	2300      	movs	r3, #0
    791c:	e045      	b.n	79aa <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    791e:	4b25      	ldr	r3, [pc, #148]	; (79b4 <nm_spi_init+0x104>)
    7920:	781b      	ldrb	r3, [r3, #0]
    7922:	2b00      	cmp	r3, #0
    7924:	d125      	bne.n	7972 <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    7926:	683b      	ldr	r3, [r7, #0]
    7928:	220c      	movs	r2, #12
    792a:	4393      	bics	r3, r2
    792c:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    792e:	683b      	ldr	r3, [r7, #0]
    7930:	2270      	movs	r2, #112	; 0x70
    7932:	4393      	bics	r3, r2
    7934:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    7936:	683b      	ldr	r3, [r7, #0]
    7938:	2250      	movs	r2, #80	; 0x50
    793a:	4313      	orrs	r3, r2
    793c:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    793e:	683b      	ldr	r3, [r7, #0]
    7940:	4a1d      	ldr	r2, [pc, #116]	; (79b8 <nm_spi_init+0x108>)
    7942:	0019      	movs	r1, r3
    7944:	0010      	movs	r0, r2
    7946:	4b27      	ldr	r3, [pc, #156]	; (79e4 <nm_spi_init+0x134>)
    7948:	4798      	blx	r3
    794a:	1e03      	subs	r3, r0, #0
    794c:	d10e      	bne.n	796c <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    794e:	4a26      	ldr	r2, [pc, #152]	; (79e8 <nm_spi_init+0x138>)
    7950:	491c      	ldr	r1, [pc, #112]	; (79c4 <nm_spi_init+0x114>)
    7952:	4b1d      	ldr	r3, [pc, #116]	; (79c8 <nm_spi_init+0x118>)
    7954:	0018      	movs	r0, r3
    7956:	4b1d      	ldr	r3, [pc, #116]	; (79cc <nm_spi_init+0x11c>)
    7958:	4798      	blx	r3
    795a:	4b24      	ldr	r3, [pc, #144]	; (79ec <nm_spi_init+0x13c>)
    795c:	0018      	movs	r0, r3
    795e:	4b1d      	ldr	r3, [pc, #116]	; (79d4 <nm_spi_init+0x124>)
    7960:	4798      	blx	r3
    7962:	200d      	movs	r0, #13
    7964:	4b1c      	ldr	r3, [pc, #112]	; (79d8 <nm_spi_init+0x128>)
    7966:	4798      	blx	r3
			return 0;
    7968:	2300      	movs	r3, #0
    796a:	e01e      	b.n	79aa <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    796c:	4b11      	ldr	r3, [pc, #68]	; (79b4 <nm_spi_init+0x104>)
    796e:	2201      	movs	r2, #1
    7970:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    7972:	1d3a      	adds	r2, r7, #4
    7974:	2380      	movs	r3, #128	; 0x80
    7976:	015b      	lsls	r3, r3, #5
    7978:	0011      	movs	r1, r2
    797a:	0018      	movs	r0, r3
    797c:	4b0f      	ldr	r3, [pc, #60]	; (79bc <nm_spi_init+0x10c>)
    797e:	4798      	blx	r3
    7980:	1e03      	subs	r3, r0, #0
    7982:	d10f      	bne.n	79a4 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    7984:	4a1a      	ldr	r2, [pc, #104]	; (79f0 <nm_spi_init+0x140>)
    7986:	490f      	ldr	r1, [pc, #60]	; (79c4 <nm_spi_init+0x114>)
    7988:	4b0f      	ldr	r3, [pc, #60]	; (79c8 <nm_spi_init+0x118>)
    798a:	0018      	movs	r0, r3
    798c:	4b0f      	ldr	r3, [pc, #60]	; (79cc <nm_spi_init+0x11c>)
    798e:	4798      	blx	r3
    7990:	4b18      	ldr	r3, [pc, #96]	; (79f4 <nm_spi_init+0x144>)
    7992:	0018      	movs	r0, r3
    7994:	4b0f      	ldr	r3, [pc, #60]	; (79d4 <nm_spi_init+0x124>)
    7996:	4798      	blx	r3
    7998:	200d      	movs	r0, #13
    799a:	4b0f      	ldr	r3, [pc, #60]	; (79d8 <nm_spi_init+0x128>)
    799c:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    799e:	2306      	movs	r3, #6
    79a0:	425b      	negs	r3, r3
    79a2:	e002      	b.n	79aa <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    79a4:	4b14      	ldr	r3, [pc, #80]	; (79f8 <nm_spi_init+0x148>)
    79a6:	4798      	blx	r3


	return M2M_SUCCESS;
    79a8:	2300      	movs	r3, #0
}
    79aa:	0018      	movs	r0, r3
    79ac:	46bd      	mov	sp, r7
    79ae:	b002      	add	sp, #8
    79b0:	bd80      	pop	{r7, pc}
    79b2:	46c0      	nop			; (mov r8, r8)
    79b4:	2000022c 	.word	0x2000022c
    79b8:	0000e824 	.word	0x0000e824
    79bc:	00007441 	.word	0x00007441
    79c0:	000004c7 	.word	0x000004c7
    79c4:	0001a450 	.word	0x0001a450
    79c8:	00019e3c 	.word	0x00019e3c
    79cc:	00013e4d 	.word	0x00013e4d
    79d0:	0001a2c0 	.word	0x0001a2c0
    79d4:	00013f69 	.word	0x00013f69
    79d8:	00013e81 	.word	0x00013e81
    79dc:	000004ca 	.word	0x000004ca
    79e0:	0001a310 	.word	0x0001a310
    79e4:	000070c1 	.word	0x000070c1
    79e8:	000004d4 	.word	0x000004d4
    79ec:	0001a33c 	.word	0x0001a33c
    79f0:	000004de 	.word	0x000004de
    79f4:	0001a370 	.word	0x0001a370
    79f8:	0000783d 	.word	0x0000783d

000079fc <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    79fc:	b580      	push	{r7, lr}
    79fe:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    7a00:	4b03      	ldr	r3, [pc, #12]	; (7a10 <nm_spi_deinit+0x14>)
    7a02:	2200      	movs	r2, #0
    7a04:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    7a06:	2300      	movs	r3, #0
}
    7a08:	0018      	movs	r0, r3
    7a0a:	46bd      	mov	sp, r7
    7a0c:	bd80      	pop	{r7, pc}
    7a0e:	46c0      	nop			; (mov r8, r8)
    7a10:	2000022c 	.word	0x2000022c

00007a14 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    7a14:	b580      	push	{r7, lr}
    7a16:	b084      	sub	sp, #16
    7a18:	af00      	add	r7, sp, #0
    7a1a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    7a1c:	230c      	movs	r3, #12
    7a1e:	18fa      	adds	r2, r7, r3
    7a20:	687b      	ldr	r3, [r7, #4]
    7a22:	0011      	movs	r1, r2
    7a24:	0018      	movs	r0, r3
    7a26:	4b03      	ldr	r3, [pc, #12]	; (7a34 <nm_spi_read_reg+0x20>)
    7a28:	4798      	blx	r3

	return u32Val;
    7a2a:	68fb      	ldr	r3, [r7, #12]
}
    7a2c:	0018      	movs	r0, r3
    7a2e:	46bd      	mov	sp, r7
    7a30:	b004      	add	sp, #16
    7a32:	bd80      	pop	{r7, pc}
    7a34:	00007441 	.word	0x00007441

00007a38 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    7a38:	b590      	push	{r4, r7, lr}
    7a3a:	b085      	sub	sp, #20
    7a3c:	af00      	add	r7, sp, #0
    7a3e:	6078      	str	r0, [r7, #4]
    7a40:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    7a42:	230f      	movs	r3, #15
    7a44:	18fc      	adds	r4, r7, r3
    7a46:	683a      	ldr	r2, [r7, #0]
    7a48:	687b      	ldr	r3, [r7, #4]
    7a4a:	0011      	movs	r1, r2
    7a4c:	0018      	movs	r0, r3
    7a4e:	4b0d      	ldr	r3, [pc, #52]	; (7a84 <nm_spi_read_reg_with_ret+0x4c>)
    7a50:	4798      	blx	r3
    7a52:	0003      	movs	r3, r0
    7a54:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    7a56:	230f      	movs	r3, #15
    7a58:	18fb      	adds	r3, r7, r3
    7a5a:	781b      	ldrb	r3, [r3, #0]
    7a5c:	b25b      	sxtb	r3, r3
    7a5e:	2b01      	cmp	r3, #1
    7a60:	d104      	bne.n	7a6c <nm_spi_read_reg_with_ret+0x34>
    7a62:	230f      	movs	r3, #15
    7a64:	18fb      	adds	r3, r7, r3
    7a66:	2200      	movs	r2, #0
    7a68:	701a      	strb	r2, [r3, #0]
    7a6a:	e003      	b.n	7a74 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    7a6c:	230f      	movs	r3, #15
    7a6e:	18fb      	adds	r3, r7, r3
    7a70:	22fa      	movs	r2, #250	; 0xfa
    7a72:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    7a74:	230f      	movs	r3, #15
    7a76:	18fb      	adds	r3, r7, r3
    7a78:	781b      	ldrb	r3, [r3, #0]
    7a7a:	b25b      	sxtb	r3, r3
}
    7a7c:	0018      	movs	r0, r3
    7a7e:	46bd      	mov	sp, r7
    7a80:	b005      	add	sp, #20
    7a82:	bd90      	pop	{r4, r7, pc}
    7a84:	00007441 	.word	0x00007441

00007a88 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    7a88:	b590      	push	{r4, r7, lr}
    7a8a:	b085      	sub	sp, #20
    7a8c:	af00      	add	r7, sp, #0
    7a8e:	6078      	str	r0, [r7, #4]
    7a90:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    7a92:	230f      	movs	r3, #15
    7a94:	18fc      	adds	r4, r7, r3
    7a96:	683a      	ldr	r2, [r7, #0]
    7a98:	687b      	ldr	r3, [r7, #4]
    7a9a:	0011      	movs	r1, r2
    7a9c:	0018      	movs	r0, r3
    7a9e:	4b0d      	ldr	r3, [pc, #52]	; (7ad4 <nm_spi_write_reg+0x4c>)
    7aa0:	4798      	blx	r3
    7aa2:	0003      	movs	r3, r0
    7aa4:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    7aa6:	230f      	movs	r3, #15
    7aa8:	18fb      	adds	r3, r7, r3
    7aaa:	781b      	ldrb	r3, [r3, #0]
    7aac:	b25b      	sxtb	r3, r3
    7aae:	2b01      	cmp	r3, #1
    7ab0:	d104      	bne.n	7abc <nm_spi_write_reg+0x34>
    7ab2:	230f      	movs	r3, #15
    7ab4:	18fb      	adds	r3, r7, r3
    7ab6:	2200      	movs	r2, #0
    7ab8:	701a      	strb	r2, [r3, #0]
    7aba:	e003      	b.n	7ac4 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    7abc:	230f      	movs	r3, #15
    7abe:	18fb      	adds	r3, r7, r3
    7ac0:	22fa      	movs	r2, #250	; 0xfa
    7ac2:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    7ac4:	230f      	movs	r3, #15
    7ac6:	18fb      	adds	r3, r7, r3
    7ac8:	781b      	ldrb	r3, [r3, #0]
    7aca:	b25b      	sxtb	r3, r3
}
    7acc:	0018      	movs	r0, r3
    7ace:	46bd      	mov	sp, r7
    7ad0:	b005      	add	sp, #20
    7ad2:	bd90      	pop	{r4, r7, pc}
    7ad4:	000070c1 	.word	0x000070c1

00007ad8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    7ad8:	b590      	push	{r4, r7, lr}
    7ada:	b087      	sub	sp, #28
    7adc:	af00      	add	r7, sp, #0
    7ade:	60f8      	str	r0, [r7, #12]
    7ae0:	60b9      	str	r1, [r7, #8]
    7ae2:	1dbb      	adds	r3, r7, #6
    7ae4:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    7ae6:	2317      	movs	r3, #23
    7ae8:	18fc      	adds	r4, r7, r3
    7aea:	1dbb      	adds	r3, r7, #6
    7aec:	881a      	ldrh	r2, [r3, #0]
    7aee:	68b9      	ldr	r1, [r7, #8]
    7af0:	68fb      	ldr	r3, [r7, #12]
    7af2:	0018      	movs	r0, r3
    7af4:	4b0d      	ldr	r3, [pc, #52]	; (7b2c <nm_spi_read_block+0x54>)
    7af6:	4798      	blx	r3
    7af8:	0003      	movs	r3, r0
    7afa:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    7afc:	2317      	movs	r3, #23
    7afe:	18fb      	adds	r3, r7, r3
    7b00:	781b      	ldrb	r3, [r3, #0]
    7b02:	b25b      	sxtb	r3, r3
    7b04:	2b01      	cmp	r3, #1
    7b06:	d104      	bne.n	7b12 <nm_spi_read_block+0x3a>
    7b08:	2317      	movs	r3, #23
    7b0a:	18fb      	adds	r3, r7, r3
    7b0c:	2200      	movs	r2, #0
    7b0e:	701a      	strb	r2, [r3, #0]
    7b10:	e003      	b.n	7b1a <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    7b12:	2317      	movs	r3, #23
    7b14:	18fb      	adds	r3, r7, r3
    7b16:	22fa      	movs	r2, #250	; 0xfa
    7b18:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    7b1a:	2317      	movs	r3, #23
    7b1c:	18fb      	adds	r3, r7, r3
    7b1e:	781b      	ldrb	r3, [r3, #0]
    7b20:	b25b      	sxtb	r3, r3
}
    7b22:	0018      	movs	r0, r3
    7b24:	46bd      	mov	sp, r7
    7b26:	b007      	add	sp, #28
    7b28:	bd90      	pop	{r4, r7, pc}
    7b2a:	46c0      	nop			; (mov r8, r8)
    7b2c:	00007649 	.word	0x00007649

00007b30 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    7b30:	b590      	push	{r4, r7, lr}
    7b32:	b087      	sub	sp, #28
    7b34:	af00      	add	r7, sp, #0
    7b36:	60f8      	str	r0, [r7, #12]
    7b38:	60b9      	str	r1, [r7, #8]
    7b3a:	1dbb      	adds	r3, r7, #6
    7b3c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    7b3e:	2317      	movs	r3, #23
    7b40:	18fc      	adds	r4, r7, r3
    7b42:	1dbb      	adds	r3, r7, #6
    7b44:	881a      	ldrh	r2, [r3, #0]
    7b46:	68b9      	ldr	r1, [r7, #8]
    7b48:	68fb      	ldr	r3, [r7, #12]
    7b4a:	0018      	movs	r0, r3
    7b4c:	4b0d      	ldr	r3, [pc, #52]	; (7b84 <nm_spi_write_block+0x54>)
    7b4e:	4798      	blx	r3
    7b50:	0003      	movs	r3, r0
    7b52:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    7b54:	2317      	movs	r3, #23
    7b56:	18fb      	adds	r3, r7, r3
    7b58:	781b      	ldrb	r3, [r3, #0]
    7b5a:	b25b      	sxtb	r3, r3
    7b5c:	2b01      	cmp	r3, #1
    7b5e:	d104      	bne.n	7b6a <nm_spi_write_block+0x3a>
    7b60:	2317      	movs	r3, #23
    7b62:	18fb      	adds	r3, r7, r3
    7b64:	2200      	movs	r2, #0
    7b66:	701a      	strb	r2, [r3, #0]
    7b68:	e003      	b.n	7b72 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    7b6a:	2317      	movs	r3, #23
    7b6c:	18fb      	adds	r3, r7, r3
    7b6e:	22fa      	movs	r2, #250	; 0xfa
    7b70:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    7b72:	2317      	movs	r3, #23
    7b74:	18fb      	adds	r3, r7, r3
    7b76:	781b      	ldrb	r3, [r3, #0]
    7b78:	b25b      	sxtb	r3, r3
}
    7b7a:	0018      	movs	r0, r3
    7b7c:	46bd      	mov	sp, r7
    7b7e:	b007      	add	sp, #28
    7b80:	bd90      	pop	{r4, r7, pc}
    7b82:	46c0      	nop			; (mov r8, r8)
    7b84:	0000724d 	.word	0x0000724d

00007b88 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    7b88:	b590      	push	{r4, r7, lr}
    7b8a:	b089      	sub	sp, #36	; 0x24
    7b8c:	af00      	add	r7, sp, #0
    7b8e:	60b9      	str	r1, [r7, #8]
    7b90:	0011      	movs	r1, r2
    7b92:	607b      	str	r3, [r7, #4]
    7b94:	230f      	movs	r3, #15
    7b96:	18fb      	adds	r3, r7, r3
    7b98:	1c02      	adds	r2, r0, #0
    7b9a:	701a      	strb	r2, [r3, #0]
    7b9c:	230e      	movs	r3, #14
    7b9e:	18fb      	adds	r3, r7, r3
    7ba0:	1c0a      	adds	r2, r1, #0
    7ba2:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    7ba4:	2330      	movs	r3, #48	; 0x30
    7ba6:	18fb      	adds	r3, r7, r3
    7ba8:	881b      	ldrh	r3, [r3, #0]
    7baa:	2b00      	cmp	r3, #0
    7bac:	d100      	bne.n	7bb0 <Socket_ReadSocketData+0x28>
    7bae:	e0d6      	b.n	7d5e <Socket_ReadSocketData+0x1d6>
    7bb0:	230f      	movs	r3, #15
    7bb2:	18fb      	adds	r3, r7, r3
    7bb4:	2200      	movs	r2, #0
    7bb6:	569a      	ldrsb	r2, [r3, r2]
    7bb8:	4b6b      	ldr	r3, [pc, #428]	; (7d68 <Socket_ReadSocketData+0x1e0>)
    7bba:	0112      	lsls	r2, r2, #4
    7bbc:	58d3      	ldr	r3, [r2, r3]
    7bbe:	2b00      	cmp	r3, #0
    7bc0:	d100      	bne.n	7bc4 <Socket_ReadSocketData+0x3c>
    7bc2:	e0cc      	b.n	7d5e <Socket_ReadSocketData+0x1d6>
    7bc4:	230f      	movs	r3, #15
    7bc6:	18fb      	adds	r3, r7, r3
    7bc8:	781b      	ldrb	r3, [r3, #0]
    7bca:	b25b      	sxtb	r3, r3
    7bcc:	4a66      	ldr	r2, [pc, #408]	; (7d68 <Socket_ReadSocketData+0x1e0>)
    7bce:	011b      	lsls	r3, r3, #4
    7bd0:	18d3      	adds	r3, r2, r3
    7bd2:	3304      	adds	r3, #4
    7bd4:	881b      	ldrh	r3, [r3, #0]
    7bd6:	b29b      	uxth	r3, r3
    7bd8:	2b00      	cmp	r3, #0
    7bda:	d100      	bne.n	7bde <Socket_ReadSocketData+0x56>
    7bdc:	e0bf      	b.n	7d5e <Socket_ReadSocketData+0x1d6>
    7bde:	230f      	movs	r3, #15
    7be0:	18fb      	adds	r3, r7, r3
    7be2:	781b      	ldrb	r3, [r3, #0]
    7be4:	b25b      	sxtb	r3, r3
    7be6:	4a60      	ldr	r2, [pc, #384]	; (7d68 <Socket_ReadSocketData+0x1e0>)
    7be8:	011b      	lsls	r3, r3, #4
    7bea:	18d3      	adds	r3, r2, r3
    7bec:	330a      	adds	r3, #10
    7bee:	781b      	ldrb	r3, [r3, #0]
    7bf0:	b2db      	uxtb	r3, r3
    7bf2:	2b01      	cmp	r3, #1
    7bf4:	d000      	beq.n	7bf8 <Socket_ReadSocketData+0x70>
    7bf6:	e0b2      	b.n	7d5e <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    7bf8:	687b      	ldr	r3, [r7, #4]
    7bfa:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    7bfc:	68bb      	ldr	r3, [r7, #8]
    7bfe:	2230      	movs	r2, #48	; 0x30
    7c00:	18ba      	adds	r2, r7, r2
    7c02:	8812      	ldrh	r2, [r2, #0]
    7c04:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    7c06:	2319      	movs	r3, #25
    7c08:	18fb      	adds	r3, r7, r3
    7c0a:	2201      	movs	r2, #1
    7c0c:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    7c0e:	231a      	movs	r3, #26
    7c10:	18fb      	adds	r3, r7, r3
    7c12:	2230      	movs	r2, #48	; 0x30
    7c14:	18ba      	adds	r2, r7, r2
    7c16:	8812      	ldrh	r2, [r2, #0]
    7c18:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    7c1a:	230f      	movs	r3, #15
    7c1c:	18fb      	adds	r3, r7, r3
    7c1e:	781b      	ldrb	r3, [r3, #0]
    7c20:	b25b      	sxtb	r3, r3
    7c22:	4a51      	ldr	r2, [pc, #324]	; (7d68 <Socket_ReadSocketData+0x1e0>)
    7c24:	011b      	lsls	r3, r3, #4
    7c26:	18d3      	adds	r3, r2, r3
    7c28:	3304      	adds	r3, #4
    7c2a:	881b      	ldrh	r3, [r3, #0]
    7c2c:	b29b      	uxth	r3, r3
    7c2e:	221a      	movs	r2, #26
    7c30:	18ba      	adds	r2, r7, r2
    7c32:	8812      	ldrh	r2, [r2, #0]
    7c34:	1ad3      	subs	r3, r2, r3
    7c36:	b29a      	uxth	r2, r3
    7c38:	2316      	movs	r3, #22
    7c3a:	18fb      	adds	r3, r7, r3
    7c3c:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    7c3e:	2316      	movs	r3, #22
    7c40:	18fb      	adds	r3, r7, r3
    7c42:	2200      	movs	r2, #0
    7c44:	5e9b      	ldrsh	r3, [r3, r2]
    7c46:	2b00      	cmp	r3, #0
    7c48:	dd0f      	ble.n	7c6a <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    7c4a:	2319      	movs	r3, #25
    7c4c:	18fb      	adds	r3, r7, r3
    7c4e:	2200      	movs	r2, #0
    7c50:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    7c52:	230f      	movs	r3, #15
    7c54:	18fb      	adds	r3, r7, r3
    7c56:	2200      	movs	r2, #0
    7c58:	569a      	ldrsb	r2, [r3, r2]
    7c5a:	231a      	movs	r3, #26
    7c5c:	18fb      	adds	r3, r7, r3
    7c5e:	4942      	ldr	r1, [pc, #264]	; (7d68 <Socket_ReadSocketData+0x1e0>)
    7c60:	0112      	lsls	r2, r2, #4
    7c62:	188a      	adds	r2, r1, r2
    7c64:	3204      	adds	r2, #4
    7c66:	8812      	ldrh	r2, [r2, #0]
    7c68:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    7c6a:	230f      	movs	r3, #15
    7c6c:	18fb      	adds	r3, r7, r3
    7c6e:	2200      	movs	r2, #0
    7c70:	569a      	ldrsb	r2, [r3, r2]
    7c72:	4b3d      	ldr	r3, [pc, #244]	; (7d68 <Socket_ReadSocketData+0x1e0>)
    7c74:	0112      	lsls	r2, r2, #4
    7c76:	58d1      	ldr	r1, [r2, r3]
    7c78:	2319      	movs	r3, #25
    7c7a:	18fb      	adds	r3, r7, r3
    7c7c:	781c      	ldrb	r4, [r3, #0]
    7c7e:	231a      	movs	r3, #26
    7c80:	18fb      	adds	r3, r7, r3
    7c82:	881a      	ldrh	r2, [r3, #0]
    7c84:	69f8      	ldr	r0, [r7, #28]
    7c86:	0023      	movs	r3, r4
    7c88:	4c38      	ldr	r4, [pc, #224]	; (7d6c <Socket_ReadSocketData+0x1e4>)
    7c8a:	47a0      	blx	r4
    7c8c:	1e03      	subs	r3, r0, #0
    7c8e:	d14f      	bne.n	7d30 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    7c90:	230f      	movs	r3, #15
    7c92:	18fb      	adds	r3, r7, r3
    7c94:	2200      	movs	r2, #0
    7c96:	569a      	ldrsb	r2, [r3, r2]
    7c98:	4b33      	ldr	r3, [pc, #204]	; (7d68 <Socket_ReadSocketData+0x1e0>)
    7c9a:	0112      	lsls	r2, r2, #4
    7c9c:	58d2      	ldr	r2, [r2, r3]
    7c9e:	68bb      	ldr	r3, [r7, #8]
    7ca0:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    7ca2:	231a      	movs	r3, #26
    7ca4:	18fb      	adds	r3, r7, r3
    7ca6:	2200      	movs	r2, #0
    7ca8:	5e9a      	ldrsh	r2, [r3, r2]
    7caa:	68bb      	ldr	r3, [r7, #8]
    7cac:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    7cae:	68bb      	ldr	r3, [r7, #8]
    7cb0:	88da      	ldrh	r2, [r3, #6]
    7cb2:	231a      	movs	r3, #26
    7cb4:	18fb      	adds	r3, r7, r3
    7cb6:	881b      	ldrh	r3, [r3, #0]
    7cb8:	1ad3      	subs	r3, r2, r3
    7cba:	b29a      	uxth	r2, r3
    7cbc:	68bb      	ldr	r3, [r7, #8]
    7cbe:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    7cc0:	4b2b      	ldr	r3, [pc, #172]	; (7d70 <Socket_ReadSocketData+0x1e8>)
    7cc2:	681b      	ldr	r3, [r3, #0]
    7cc4:	2b00      	cmp	r3, #0
    7cc6:	d00b      	beq.n	7ce0 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    7cc8:	4b29      	ldr	r3, [pc, #164]	; (7d70 <Socket_ReadSocketData+0x1e8>)
    7cca:	681b      	ldr	r3, [r3, #0]
    7ccc:	68bc      	ldr	r4, [r7, #8]
    7cce:	220e      	movs	r2, #14
    7cd0:	18ba      	adds	r2, r7, r2
    7cd2:	7811      	ldrb	r1, [r2, #0]
    7cd4:	220f      	movs	r2, #15
    7cd6:	18ba      	adds	r2, r7, r2
    7cd8:	2000      	movs	r0, #0
    7cda:	5610      	ldrsb	r0, [r2, r0]
    7cdc:	0022      	movs	r2, r4
    7cde:	4798      	blx	r3

				u16ReadCount -= u16Read;
    7ce0:	2330      	movs	r3, #48	; 0x30
    7ce2:	18f9      	adds	r1, r7, r3
    7ce4:	2330      	movs	r3, #48	; 0x30
    7ce6:	18fa      	adds	r2, r7, r3
    7ce8:	231a      	movs	r3, #26
    7cea:	18fb      	adds	r3, r7, r3
    7cec:	8812      	ldrh	r2, [r2, #0]
    7cee:	881b      	ldrh	r3, [r3, #0]
    7cf0:	1ad3      	subs	r3, r2, r3
    7cf2:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    7cf4:	231a      	movs	r3, #26
    7cf6:	18fb      	adds	r3, r7, r3
    7cf8:	881b      	ldrh	r3, [r3, #0]
    7cfa:	69fa      	ldr	r2, [r7, #28]
    7cfc:	18d3      	adds	r3, r2, r3
    7cfe:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    7d00:	230f      	movs	r3, #15
    7d02:	18fb      	adds	r3, r7, r3
    7d04:	781b      	ldrb	r3, [r3, #0]
    7d06:	b25b      	sxtb	r3, r3
    7d08:	4a17      	ldr	r2, [pc, #92]	; (7d68 <Socket_ReadSocketData+0x1e0>)
    7d0a:	011b      	lsls	r3, r3, #4
    7d0c:	18d3      	adds	r3, r2, r3
    7d0e:	330a      	adds	r3, #10
    7d10:	781b      	ldrb	r3, [r3, #0]
    7d12:	b2db      	uxtb	r3, r3
    7d14:	2b00      	cmp	r3, #0
    7d16:	d11b      	bne.n	7d50 <Socket_ReadSocketData+0x1c8>
    7d18:	2330      	movs	r3, #48	; 0x30
    7d1a:	18fb      	adds	r3, r7, r3
    7d1c:	881b      	ldrh	r3, [r3, #0]
    7d1e:	2b00      	cmp	r3, #0
    7d20:	d016      	beq.n	7d50 <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    7d22:	2301      	movs	r3, #1
    7d24:	2200      	movs	r2, #0
    7d26:	2100      	movs	r1, #0
    7d28:	2000      	movs	r0, #0
    7d2a:	4c10      	ldr	r4, [pc, #64]	; (7d6c <Socket_ReadSocketData+0x1e4>)
    7d2c:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    7d2e:	e016      	b.n	7d5e <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    7d30:	4b10      	ldr	r3, [pc, #64]	; (7d74 <Socket_ReadSocketData+0x1ec>)
    7d32:	0018      	movs	r0, r3
    7d34:	4b10      	ldr	r3, [pc, #64]	; (7d78 <Socket_ReadSocketData+0x1f0>)
    7d36:	4798      	blx	r3
    7d38:	2330      	movs	r3, #48	; 0x30
    7d3a:	18fb      	adds	r3, r7, r3
    7d3c:	881a      	ldrh	r2, [r3, #0]
    7d3e:	4b0f      	ldr	r3, [pc, #60]	; (7d7c <Socket_ReadSocketData+0x1f4>)
    7d40:	0011      	movs	r1, r2
    7d42:	0018      	movs	r0, r3
    7d44:	4b0c      	ldr	r3, [pc, #48]	; (7d78 <Socket_ReadSocketData+0x1f0>)
    7d46:	4798      	blx	r3
    7d48:	200d      	movs	r0, #13
    7d4a:	4b0d      	ldr	r3, [pc, #52]	; (7d80 <Socket_ReadSocketData+0x1f8>)
    7d4c:	4798      	blx	r3
				break;
    7d4e:	e006      	b.n	7d5e <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    7d50:	2330      	movs	r3, #48	; 0x30
    7d52:	18fb      	adds	r3, r7, r3
    7d54:	881b      	ldrh	r3, [r3, #0]
    7d56:	2b00      	cmp	r3, #0
    7d58:	d000      	beq.n	7d5c <Socket_ReadSocketData+0x1d4>
    7d5a:	e754      	b.n	7c06 <Socket_ReadSocketData+0x7e>
	}
}
    7d5c:	e7ff      	b.n	7d5e <Socket_ReadSocketData+0x1d6>
    7d5e:	46c0      	nop			; (mov r8, r8)
    7d60:	46bd      	mov	sp, r7
    7d62:	b009      	add	sp, #36	; 0x24
    7d64:	bd90      	pop	{r4, r7, pc}
    7d66:	46c0      	nop			; (mov r8, r8)
    7d68:	2000061c 	.word	0x2000061c
    7d6c:	00004ac9 	.word	0x00004ac9
    7d70:	200006cc 	.word	0x200006cc
    7d74:	0001a45c 	.word	0x0001a45c
    7d78:	00013e4d 	.word	0x00013e4d
    7d7c:	0001a468 	.word	0x0001a468
    7d80:	00013e81 	.word	0x00013e81

00007d84 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    7d84:	b590      	push	{r4, r7, lr}
    7d86:	b0bb      	sub	sp, #236	; 0xec
    7d88:	af02      	add	r7, sp, #8
    7d8a:	603a      	str	r2, [r7, #0]
    7d8c:	1dfb      	adds	r3, r7, #7
    7d8e:	1c02      	adds	r2, r0, #0
    7d90:	701a      	strb	r2, [r3, #0]
    7d92:	1d3b      	adds	r3, r7, #4
    7d94:	1c0a      	adds	r2, r1, #0
    7d96:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    7d98:	1dfb      	adds	r3, r7, #7
    7d9a:	781b      	ldrb	r3, [r3, #0]
    7d9c:	2b41      	cmp	r3, #65	; 0x41
    7d9e:	d003      	beq.n	7da8 <m2m_ip_cb+0x24>
    7da0:	1dfb      	adds	r3, r7, #7
    7da2:	781b      	ldrb	r3, [r3, #0]
    7da4:	2b54      	cmp	r3, #84	; 0x54
    7da6:	d120      	bne.n	7dea <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    7da8:	23cc      	movs	r3, #204	; 0xcc
    7daa:	18f9      	adds	r1, r7, r3
    7dac:	6838      	ldr	r0, [r7, #0]
    7dae:	2300      	movs	r3, #0
    7db0:	2204      	movs	r2, #4
    7db2:	4c98      	ldr	r4, [pc, #608]	; (8014 <m2m_ip_cb+0x290>)
    7db4:	47a0      	blx	r4
    7db6:	1e03      	subs	r3, r0, #0
    7db8:	d000      	beq.n	7dbc <m2m_ip_cb+0x38>
    7dba:	e275      	b.n	82a8 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    7dbc:	23cc      	movs	r3, #204	; 0xcc
    7dbe:	18fb      	adds	r3, r7, r3
    7dc0:	2201      	movs	r2, #1
    7dc2:	569a      	ldrsb	r2, [r3, r2]
    7dc4:	23c8      	movs	r3, #200	; 0xc8
    7dc6:	18fb      	adds	r3, r7, r3
    7dc8:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    7dca:	4b93      	ldr	r3, [pc, #588]	; (8018 <m2m_ip_cb+0x294>)
    7dcc:	681b      	ldr	r3, [r3, #0]
    7dce:	2b00      	cmp	r3, #0
    7dd0:	d100      	bne.n	7dd4 <m2m_ip_cb+0x50>
    7dd2:	e269      	b.n	82a8 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    7dd4:	4b90      	ldr	r3, [pc, #576]	; (8018 <m2m_ip_cb+0x294>)
    7dd6:	681b      	ldr	r3, [r3, #0]
    7dd8:	22cc      	movs	r2, #204	; 0xcc
    7dda:	18ba      	adds	r2, r7, r2
    7ddc:	2000      	movs	r0, #0
    7dde:	5610      	ldrsb	r0, [r2, r0]
    7de0:	22c8      	movs	r2, #200	; 0xc8
    7de2:	18ba      	adds	r2, r7, r2
    7de4:	2101      	movs	r1, #1
    7de6:	4798      	blx	r3
	{
    7de8:	e25e      	b.n	82a8 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    7dea:	1dfb      	adds	r3, r7, #7
    7dec:	781b      	ldrb	r3, [r3, #0]
    7dee:	2b42      	cmp	r3, #66	; 0x42
    7df0:	d120      	bne.n	7e34 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    7df2:	23c4      	movs	r3, #196	; 0xc4
    7df4:	18f9      	adds	r1, r7, r3
    7df6:	6838      	ldr	r0, [r7, #0]
    7df8:	2300      	movs	r3, #0
    7dfa:	2204      	movs	r2, #4
    7dfc:	4c85      	ldr	r4, [pc, #532]	; (8014 <m2m_ip_cb+0x290>)
    7dfe:	47a0      	blx	r4
    7e00:	1e03      	subs	r3, r0, #0
    7e02:	d000      	beq.n	7e06 <m2m_ip_cb+0x82>
    7e04:	e257      	b.n	82b6 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    7e06:	23c4      	movs	r3, #196	; 0xc4
    7e08:	18fb      	adds	r3, r7, r3
    7e0a:	2201      	movs	r2, #1
    7e0c:	569a      	ldrsb	r2, [r3, r2]
    7e0e:	23c0      	movs	r3, #192	; 0xc0
    7e10:	18fb      	adds	r3, r7, r3
    7e12:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    7e14:	4b80      	ldr	r3, [pc, #512]	; (8018 <m2m_ip_cb+0x294>)
    7e16:	681b      	ldr	r3, [r3, #0]
    7e18:	2b00      	cmp	r3, #0
    7e1a:	d100      	bne.n	7e1e <m2m_ip_cb+0x9a>
    7e1c:	e24b      	b.n	82b6 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    7e1e:	4b7e      	ldr	r3, [pc, #504]	; (8018 <m2m_ip_cb+0x294>)
    7e20:	681b      	ldr	r3, [r3, #0]
    7e22:	22c4      	movs	r2, #196	; 0xc4
    7e24:	18ba      	adds	r2, r7, r2
    7e26:	2000      	movs	r0, #0
    7e28:	5610      	ldrsb	r0, [r2, r0]
    7e2a:	22c0      	movs	r2, #192	; 0xc0
    7e2c:	18ba      	adds	r2, r7, r2
    7e2e:	2102      	movs	r1, #2
    7e30:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    7e32:	e240      	b.n	82b6 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    7e34:	1dfb      	adds	r3, r7, #7
    7e36:	781b      	ldrb	r3, [r3, #0]
    7e38:	2b43      	cmp	r3, #67	; 0x43
    7e3a:	d000      	beq.n	7e3e <m2m_ip_cb+0xba>
    7e3c:	e086      	b.n	7f4c <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    7e3e:	23b4      	movs	r3, #180	; 0xb4
    7e40:	18f9      	adds	r1, r7, r3
    7e42:	6838      	ldr	r0, [r7, #0]
    7e44:	2300      	movs	r3, #0
    7e46:	220c      	movs	r2, #12
    7e48:	4c72      	ldr	r4, [pc, #456]	; (8014 <m2m_ip_cb+0x290>)
    7e4a:	47a0      	blx	r4
    7e4c:	1e03      	subs	r3, r0, #0
    7e4e:	d000      	beq.n	7e52 <m2m_ip_cb+0xce>
    7e50:	e231      	b.n	82b6 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
    7e52:	23b4      	movs	r3, #180	; 0xb4
    7e54:	18fb      	adds	r3, r7, r3
    7e56:	7a5b      	ldrb	r3, [r3, #9]
    7e58:	b25b      	sxtb	r3, r3
    7e5a:	2b00      	cmp	r3, #0
    7e5c:	db4f      	blt.n	7efe <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    7e5e:	23b4      	movs	r3, #180	; 0xb4
    7e60:	18fb      	adds	r3, r7, r3
    7e62:	7a5b      	ldrb	r3, [r3, #9]
    7e64:	b25b      	sxtb	r3, r3
    7e66:	0018      	movs	r0, r3
    7e68:	23b4      	movs	r3, #180	; 0xb4
    7e6a:	18fb      	adds	r3, r7, r3
    7e6c:	7a1b      	ldrb	r3, [r3, #8]
    7e6e:	b25b      	sxtb	r3, r3
    7e70:	4a6a      	ldr	r2, [pc, #424]	; (801c <m2m_ip_cb+0x298>)
    7e72:	011b      	lsls	r3, r3, #4
    7e74:	18d3      	adds	r3, r2, r3
    7e76:	330b      	adds	r3, #11
    7e78:	781b      	ldrb	r3, [r3, #0]
    7e7a:	b2d9      	uxtb	r1, r3
    7e7c:	4a67      	ldr	r2, [pc, #412]	; (801c <m2m_ip_cb+0x298>)
    7e7e:	0103      	lsls	r3, r0, #4
    7e80:	18d3      	adds	r3, r2, r3
    7e82:	330b      	adds	r3, #11
    7e84:	1c0a      	adds	r2, r1, #0
    7e86:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    7e88:	23b4      	movs	r3, #180	; 0xb4
    7e8a:	18fb      	adds	r3, r7, r3
    7e8c:	7a5b      	ldrb	r3, [r3, #9]
    7e8e:	b25b      	sxtb	r3, r3
    7e90:	4a62      	ldr	r2, [pc, #392]	; (801c <m2m_ip_cb+0x298>)
    7e92:	011b      	lsls	r3, r3, #4
    7e94:	18d3      	adds	r3, r2, r3
    7e96:	330a      	adds	r3, #10
    7e98:	2201      	movs	r2, #1
    7e9a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    7e9c:	23b4      	movs	r3, #180	; 0xb4
    7e9e:	18fb      	adds	r3, r7, r3
    7ea0:	7a5b      	ldrb	r3, [r3, #9]
    7ea2:	b25b      	sxtb	r3, r3
    7ea4:	0018      	movs	r0, r3
    7ea6:	23b4      	movs	r3, #180	; 0xb4
    7ea8:	18fb      	adds	r3, r7, r3
    7eaa:	895b      	ldrh	r3, [r3, #10]
    7eac:	3b08      	subs	r3, #8
    7eae:	b299      	uxth	r1, r3
    7eb0:	4a5a      	ldr	r2, [pc, #360]	; (801c <m2m_ip_cb+0x298>)
    7eb2:	0103      	lsls	r3, r0, #4
    7eb4:	18d3      	adds	r3, r2, r3
    7eb6:	3308      	adds	r3, #8
    7eb8:	1c0a      	adds	r2, r1, #0
    7eba:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
    7ebc:	4b58      	ldr	r3, [pc, #352]	; (8020 <m2m_ip_cb+0x29c>)
    7ebe:	881b      	ldrh	r3, [r3, #0]
    7ec0:	b29b      	uxth	r3, r3
    7ec2:	3301      	adds	r3, #1
    7ec4:	b29a      	uxth	r2, r3
    7ec6:	4b56      	ldr	r3, [pc, #344]	; (8020 <m2m_ip_cb+0x29c>)
    7ec8:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    7eca:	4b55      	ldr	r3, [pc, #340]	; (8020 <m2m_ip_cb+0x29c>)
    7ecc:	881b      	ldrh	r3, [r3, #0]
    7ece:	b29b      	uxth	r3, r3
    7ed0:	2b00      	cmp	r3, #0
    7ed2:	d106      	bne.n	7ee2 <m2m_ip_cb+0x15e>
					++gu16SessionID;
    7ed4:	4b52      	ldr	r3, [pc, #328]	; (8020 <m2m_ip_cb+0x29c>)
    7ed6:	881b      	ldrh	r3, [r3, #0]
    7ed8:	b29b      	uxth	r3, r3
    7eda:	3301      	adds	r3, #1
    7edc:	b29a      	uxth	r2, r3
    7ede:	4b50      	ldr	r3, [pc, #320]	; (8020 <m2m_ip_cb+0x29c>)
    7ee0:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    7ee2:	23b4      	movs	r3, #180	; 0xb4
    7ee4:	18fb      	adds	r3, r7, r3
    7ee6:	7a5b      	ldrb	r3, [r3, #9]
    7ee8:	b25b      	sxtb	r3, r3
    7eea:	0018      	movs	r0, r3
    7eec:	4b4c      	ldr	r3, [pc, #304]	; (8020 <m2m_ip_cb+0x29c>)
    7eee:	881b      	ldrh	r3, [r3, #0]
    7ef0:	b299      	uxth	r1, r3
    7ef2:	4a4a      	ldr	r2, [pc, #296]	; (801c <m2m_ip_cb+0x298>)
    7ef4:	0103      	lsls	r3, r0, #4
    7ef6:	18d3      	adds	r3, r2, r3
    7ef8:	3306      	adds	r3, #6
    7efa:	1c0a      	adds	r2, r1, #0
    7efc:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
    7efe:	23b4      	movs	r3, #180	; 0xb4
    7f00:	18fb      	adds	r3, r7, r3
    7f02:	2209      	movs	r2, #9
    7f04:	569a      	ldrsb	r2, [r3, r2]
    7f06:	23a0      	movs	r3, #160	; 0xa0
    7f08:	18fb      	adds	r3, r7, r3
    7f0a:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    7f0c:	23a0      	movs	r3, #160	; 0xa0
    7f0e:	18fb      	adds	r3, r7, r3
    7f10:	2202      	movs	r2, #2
    7f12:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    7f14:	23b4      	movs	r3, #180	; 0xb4
    7f16:	18fb      	adds	r3, r7, r3
    7f18:	885a      	ldrh	r2, [r3, #2]
    7f1a:	23a0      	movs	r3, #160	; 0xa0
    7f1c:	18fb      	adds	r3, r7, r3
    7f1e:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    7f20:	23b4      	movs	r3, #180	; 0xb4
    7f22:	18fb      	adds	r3, r7, r3
    7f24:	685a      	ldr	r2, [r3, #4]
    7f26:	23a0      	movs	r3, #160	; 0xa0
    7f28:	18fb      	adds	r3, r7, r3
    7f2a:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    7f2c:	4b3a      	ldr	r3, [pc, #232]	; (8018 <m2m_ip_cb+0x294>)
    7f2e:	681b      	ldr	r3, [r3, #0]
    7f30:	2b00      	cmp	r3, #0
    7f32:	d100      	bne.n	7f36 <m2m_ip_cb+0x1b2>
    7f34:	e1bf      	b.n	82b6 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    7f36:	4b38      	ldr	r3, [pc, #224]	; (8018 <m2m_ip_cb+0x294>)
    7f38:	681b      	ldr	r3, [r3, #0]
    7f3a:	22b4      	movs	r2, #180	; 0xb4
    7f3c:	18ba      	adds	r2, r7, r2
    7f3e:	2008      	movs	r0, #8
    7f40:	5610      	ldrsb	r0, [r2, r0]
    7f42:	22a0      	movs	r2, #160	; 0xa0
    7f44:	18ba      	adds	r2, r7, r2
    7f46:	2104      	movs	r1, #4
    7f48:	4798      	blx	r3
}
    7f4a:	e1b4      	b.n	82b6 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    7f4c:	1dfb      	adds	r3, r7, #7
    7f4e:	781b      	ldrb	r3, [r3, #0]
    7f50:	2b44      	cmp	r3, #68	; 0x44
    7f52:	d003      	beq.n	7f5c <m2m_ip_cb+0x1d8>
    7f54:	1dfb      	adds	r3, r7, #7
    7f56:	781b      	ldrb	r3, [r3, #0]
    7f58:	2b4b      	cmp	r3, #75	; 0x4b
    7f5a:	d13d      	bne.n	7fd8 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    7f5c:	239c      	movs	r3, #156	; 0x9c
    7f5e:	18f9      	adds	r1, r7, r3
    7f60:	6838      	ldr	r0, [r7, #0]
    7f62:	2300      	movs	r3, #0
    7f64:	2204      	movs	r2, #4
    7f66:	4c2b      	ldr	r4, [pc, #172]	; (8014 <m2m_ip_cb+0x290>)
    7f68:	47a0      	blx	r4
    7f6a:	1e03      	subs	r3, r0, #0
    7f6c:	d000      	beq.n	7f70 <m2m_ip_cb+0x1ec>
    7f6e:	e19d      	b.n	82ac <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
    7f70:	239c      	movs	r3, #156	; 0x9c
    7f72:	18fb      	adds	r3, r7, r3
    7f74:	2200      	movs	r2, #0
    7f76:	569a      	ldrsb	r2, [r3, r2]
    7f78:	2398      	movs	r3, #152	; 0x98
    7f7a:	18fb      	adds	r3, r7, r3
    7f7c:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    7f7e:	239c      	movs	r3, #156	; 0x9c
    7f80:	18fb      	adds	r3, r7, r3
    7f82:	2201      	movs	r2, #1
    7f84:	569a      	ldrsb	r2, [r3, r2]
    7f86:	2398      	movs	r3, #152	; 0x98
    7f88:	18fb      	adds	r3, r7, r3
    7f8a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    7f8c:	239c      	movs	r3, #156	; 0x9c
    7f8e:	18fb      	adds	r3, r7, r3
    7f90:	785b      	ldrb	r3, [r3, #1]
    7f92:	b25b      	sxtb	r3, r3
    7f94:	2b00      	cmp	r3, #0
    7f96:	d10f      	bne.n	7fb8 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    7f98:	239c      	movs	r3, #156	; 0x9c
    7f9a:	18fb      	adds	r3, r7, r3
    7f9c:	781b      	ldrb	r3, [r3, #0]
    7f9e:	b25b      	sxtb	r3, r3
    7fa0:	0018      	movs	r0, r3
    7fa2:	239c      	movs	r3, #156	; 0x9c
    7fa4:	18fb      	adds	r3, r7, r3
    7fa6:	885b      	ldrh	r3, [r3, #2]
    7fa8:	3b08      	subs	r3, #8
    7faa:	b299      	uxth	r1, r3
    7fac:	4a1b      	ldr	r2, [pc, #108]	; (801c <m2m_ip_cb+0x298>)
    7fae:	0103      	lsls	r3, r0, #4
    7fb0:	18d3      	adds	r3, r2, r3
    7fb2:	3308      	adds	r3, #8
    7fb4:	1c0a      	adds	r2, r1, #0
    7fb6:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
    7fb8:	4b17      	ldr	r3, [pc, #92]	; (8018 <m2m_ip_cb+0x294>)
    7fba:	681b      	ldr	r3, [r3, #0]
    7fbc:	2b00      	cmp	r3, #0
    7fbe:	d100      	bne.n	7fc2 <m2m_ip_cb+0x23e>
    7fc0:	e174      	b.n	82ac <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    7fc2:	4b15      	ldr	r3, [pc, #84]	; (8018 <m2m_ip_cb+0x294>)
    7fc4:	681b      	ldr	r3, [r3, #0]
    7fc6:	229c      	movs	r2, #156	; 0x9c
    7fc8:	18ba      	adds	r2, r7, r2
    7fca:	2000      	movs	r0, #0
    7fcc:	5610      	ldrsb	r0, [r2, r0]
    7fce:	2298      	movs	r2, #152	; 0x98
    7fd0:	18ba      	adds	r2, r7, r2
    7fd2:	2105      	movs	r1, #5
    7fd4:	4798      	blx	r3
	{
    7fd6:	e169      	b.n	82ac <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    7fd8:	1dfb      	adds	r3, r7, #7
    7fda:	781b      	ldrb	r3, [r3, #0]
    7fdc:	2b4a      	cmp	r3, #74	; 0x4a
    7fde:	d123      	bne.n	8028 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    7fe0:	230c      	movs	r3, #12
    7fe2:	18f9      	adds	r1, r7, r3
    7fe4:	6838      	ldr	r0, [r7, #0]
    7fe6:	2300      	movs	r3, #0
    7fe8:	2244      	movs	r2, #68	; 0x44
    7fea:	4c0a      	ldr	r4, [pc, #40]	; (8014 <m2m_ip_cb+0x290>)
    7fec:	47a0      	blx	r4
    7fee:	1e03      	subs	r3, r0, #0
    7ff0:	d000      	beq.n	7ff4 <m2m_ip_cb+0x270>
    7ff2:	e160      	b.n	82b6 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
    7ff4:	4b0b      	ldr	r3, [pc, #44]	; (8024 <m2m_ip_cb+0x2a0>)
    7ff6:	681b      	ldr	r3, [r3, #0]
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	d100      	bne.n	7ffe <m2m_ip_cb+0x27a>
    7ffc:	e15b      	b.n	82b6 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    7ffe:	4b09      	ldr	r3, [pc, #36]	; (8024 <m2m_ip_cb+0x2a0>)
    8000:	681a      	ldr	r2, [r3, #0]
    8002:	230c      	movs	r3, #12
    8004:	18fb      	adds	r3, r7, r3
    8006:	6c19      	ldr	r1, [r3, #64]	; 0x40
    8008:	230c      	movs	r3, #12
    800a:	18fb      	adds	r3, r7, r3
    800c:	0018      	movs	r0, r3
    800e:	4790      	blx	r2
}
    8010:	e151      	b.n	82b6 <m2m_ip_cb+0x532>
    8012:	46c0      	nop			; (mov r8, r8)
    8014:	00004ac9 	.word	0x00004ac9
    8018:	200006cc 	.word	0x200006cc
    801c:	2000061c 	.word	0x2000061c
    8020:	2000022e 	.word	0x2000022e
    8024:	200006d4 	.word	0x200006d4
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    8028:	1dfb      	adds	r3, r7, #7
    802a:	781b      	ldrb	r3, [r3, #0]
    802c:	2b46      	cmp	r3, #70	; 0x46
    802e:	d008      	beq.n	8042 <m2m_ip_cb+0x2be>
    8030:	1dfb      	adds	r3, r7, #7
    8032:	781b      	ldrb	r3, [r3, #0]
    8034:	2b48      	cmp	r3, #72	; 0x48
    8036:	d004      	beq.n	8042 <m2m_ip_cb+0x2be>
    8038:	1dfb      	adds	r3, r7, #7
    803a:	781b      	ldrb	r3, [r3, #0]
    803c:	2b4d      	cmp	r3, #77	; 0x4d
    803e:	d000      	beq.n	8042 <m2m_ip_cb+0x2be>
    8040:	e0b4      	b.n	81ac <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    8042:	23df      	movs	r3, #223	; 0xdf
    8044:	18fb      	adds	r3, r7, r3
    8046:	2206      	movs	r2, #6
    8048:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    804a:	1dfb      	adds	r3, r7, #7
    804c:	781b      	ldrb	r3, [r3, #0]
    804e:	2b48      	cmp	r3, #72	; 0x48
    8050:	d103      	bne.n	805a <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    8052:	23df      	movs	r3, #223	; 0xdf
    8054:	18fb      	adds	r3, r7, r3
    8056:	2209      	movs	r2, #9
    8058:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
    805a:	23d8      	movs	r3, #216	; 0xd8
    805c:	18fb      	adds	r3, r7, r3
    805e:	2210      	movs	r2, #16
    8060:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    8062:	23d8      	movs	r3, #216	; 0xd8
    8064:	18fb      	adds	r3, r7, r3
    8066:	881a      	ldrh	r2, [r3, #0]
    8068:	2388      	movs	r3, #136	; 0x88
    806a:	18f9      	adds	r1, r7, r3
    806c:	6838      	ldr	r0, [r7, #0]
    806e:	2300      	movs	r3, #0
    8070:	4c93      	ldr	r4, [pc, #588]	; (82c0 <m2m_ip_cb+0x53c>)
    8072:	47a0      	blx	r4
    8074:	1e03      	subs	r3, r0, #0
    8076:	d000      	beq.n	807a <m2m_ip_cb+0x2f6>
    8078:	e11a      	b.n	82b0 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
    807a:	23d6      	movs	r3, #214	; 0xd6
    807c:	18fb      	adds	r3, r7, r3
    807e:	2200      	movs	r2, #0
    8080:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
    8082:	23d5      	movs	r3, #213	; 0xd5
    8084:	18fb      	adds	r3, r7, r3
    8086:	2288      	movs	r2, #136	; 0x88
    8088:	18ba      	adds	r2, r7, r2
    808a:	7b12      	ldrb	r2, [r2, #12]
    808c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    808e:	23d6      	movs	r3, #214	; 0xd6
    8090:	18fb      	adds	r3, r7, r3
    8092:	2288      	movs	r2, #136	; 0x88
    8094:	18ba      	adds	r2, r7, r2
    8096:	89d2      	ldrh	r2, [r2, #14]
    8098:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
    809a:	23d5      	movs	r3, #213	; 0xd5
    809c:	18fb      	adds	r3, r7, r3
    809e:	781b      	ldrb	r3, [r3, #0]
    80a0:	b25b      	sxtb	r3, r3
    80a2:	4a88      	ldr	r2, [pc, #544]	; (82c4 <m2m_ip_cb+0x540>)
    80a4:	011b      	lsls	r3, r3, #4
    80a6:	18d3      	adds	r3, r2, r3
    80a8:	330c      	adds	r3, #12
    80aa:	2200      	movs	r2, #0
    80ac:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    80ae:	23d2      	movs	r3, #210	; 0xd2
    80b0:	18fb      	adds	r3, r7, r3
    80b2:	2288      	movs	r2, #136	; 0x88
    80b4:	18ba      	adds	r2, r7, r2
    80b6:	8912      	ldrh	r2, [r2, #8]
    80b8:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    80ba:	23d0      	movs	r3, #208	; 0xd0
    80bc:	18fb      	adds	r3, r7, r3
    80be:	2288      	movs	r2, #136	; 0x88
    80c0:	18ba      	adds	r2, r7, r2
    80c2:	8952      	ldrh	r2, [r2, #10]
    80c4:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    80c6:	2388      	movs	r3, #136	; 0x88
    80c8:	18fb      	adds	r3, r7, r3
    80ca:	885a      	ldrh	r2, [r3, #2]
    80cc:	2370      	movs	r3, #112	; 0x70
    80ce:	18fb      	adds	r3, r7, r3
    80d0:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    80d2:	2388      	movs	r3, #136	; 0x88
    80d4:	18fb      	adds	r3, r7, r3
    80d6:	685a      	ldr	r2, [r3, #4]
    80d8:	2370      	movs	r3, #112	; 0x70
    80da:	18fb      	adds	r3, r7, r3
    80dc:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    80de:	23d5      	movs	r3, #213	; 0xd5
    80e0:	18fb      	adds	r3, r7, r3
    80e2:	781b      	ldrb	r3, [r3, #0]
    80e4:	b25b      	sxtb	r3, r3
    80e6:	4a77      	ldr	r2, [pc, #476]	; (82c4 <m2m_ip_cb+0x540>)
    80e8:	011b      	lsls	r3, r3, #4
    80ea:	18d3      	adds	r3, r2, r3
    80ec:	3306      	adds	r3, #6
    80ee:	881b      	ldrh	r3, [r3, #0]
    80f0:	b29b      	uxth	r3, r3
    80f2:	22d6      	movs	r2, #214	; 0xd6
    80f4:	18ba      	adds	r2, r7, r2
    80f6:	8812      	ldrh	r2, [r2, #0]
    80f8:	429a      	cmp	r2, r3
    80fa:	d148      	bne.n	818e <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    80fc:	23d2      	movs	r3, #210	; 0xd2
    80fe:	18fb      	adds	r3, r7, r3
    8100:	2200      	movs	r2, #0
    8102:	5e9b      	ldrsh	r3, [r3, r2]
    8104:	2b00      	cmp	r3, #0
    8106:	dd25      	ble.n	8154 <m2m_ip_cb+0x3d0>
    8108:	23d2      	movs	r3, #210	; 0xd2
    810a:	18fb      	adds	r3, r7, r3
    810c:	2200      	movs	r2, #0
    810e:	5e9a      	ldrsh	r2, [r3, r2]
    8110:	1d3b      	adds	r3, r7, #4
    8112:	881b      	ldrh	r3, [r3, #0]
    8114:	429a      	cmp	r2, r3
    8116:	da1d      	bge.n	8154 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
    8118:	23d0      	movs	r3, #208	; 0xd0
    811a:	18fb      	adds	r3, r7, r3
    811c:	881b      	ldrh	r3, [r3, #0]
    811e:	683a      	ldr	r2, [r7, #0]
    8120:	18d3      	adds	r3, r2, r3
    8122:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
    8124:	23d8      	movs	r3, #216	; 0xd8
    8126:	18fb      	adds	r3, r7, r3
    8128:	22d2      	movs	r2, #210	; 0xd2
    812a:	18ba      	adds	r2, r7, r2
    812c:	8812      	ldrh	r2, [r2, #0]
    812e:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    8130:	683c      	ldr	r4, [r7, #0]
    8132:	23df      	movs	r3, #223	; 0xdf
    8134:	18fb      	adds	r3, r7, r3
    8136:	781a      	ldrb	r2, [r3, #0]
    8138:	2370      	movs	r3, #112	; 0x70
    813a:	18f9      	adds	r1, r7, r3
    813c:	23d5      	movs	r3, #213	; 0xd5
    813e:	18fb      	adds	r3, r7, r3
    8140:	2000      	movs	r0, #0
    8142:	5618      	ldrsb	r0, [r3, r0]
    8144:	23d8      	movs	r3, #216	; 0xd8
    8146:	18fb      	adds	r3, r7, r3
    8148:	881b      	ldrh	r3, [r3, #0]
    814a:	9300      	str	r3, [sp, #0]
    814c:	0023      	movs	r3, r4
    814e:	4c5e      	ldr	r4, [pc, #376]	; (82c8 <m2m_ip_cb+0x544>)
    8150:	47a0      	blx	r4
	{
    8152:	e0ad      	b.n	82b0 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    8154:	2370      	movs	r3, #112	; 0x70
    8156:	18fb      	adds	r3, r7, r3
    8158:	22d2      	movs	r2, #210	; 0xd2
    815a:	18ba      	adds	r2, r7, r2
    815c:	8812      	ldrh	r2, [r2, #0]
    815e:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    8160:	2370      	movs	r3, #112	; 0x70
    8162:	18fb      	adds	r3, r7, r3
    8164:	2200      	movs	r2, #0
    8166:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    8168:	4b58      	ldr	r3, [pc, #352]	; (82cc <m2m_ip_cb+0x548>)
    816a:	681b      	ldr	r3, [r3, #0]
    816c:	2b00      	cmp	r3, #0
    816e:	d100      	bne.n	8172 <m2m_ip_cb+0x3ee>
    8170:	e09e      	b.n	82b0 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    8172:	4b56      	ldr	r3, [pc, #344]	; (82cc <m2m_ip_cb+0x548>)
    8174:	681b      	ldr	r3, [r3, #0]
    8176:	2270      	movs	r2, #112	; 0x70
    8178:	18bc      	adds	r4, r7, r2
    817a:	22df      	movs	r2, #223	; 0xdf
    817c:	18ba      	adds	r2, r7, r2
    817e:	7811      	ldrb	r1, [r2, #0]
    8180:	22d5      	movs	r2, #213	; 0xd5
    8182:	18ba      	adds	r2, r7, r2
    8184:	2000      	movs	r0, #0
    8186:	5610      	ldrsb	r0, [r2, r0]
    8188:	0022      	movs	r2, r4
    818a:	4798      	blx	r3
	{
    818c:	e090      	b.n	82b0 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
    818e:	23d8      	movs	r3, #216	; 0xd8
    8190:	18fa      	adds	r2, r7, r3
    8192:	1d3b      	adds	r3, r7, #4
    8194:	8812      	ldrh	r2, [r2, #0]
    8196:	881b      	ldrh	r3, [r3, #0]
    8198:	429a      	cmp	r2, r3
    819a:	d300      	bcc.n	819e <m2m_ip_cb+0x41a>
    819c:	e088      	b.n	82b0 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    819e:	2301      	movs	r3, #1
    81a0:	2200      	movs	r2, #0
    81a2:	2100      	movs	r1, #0
    81a4:	2000      	movs	r0, #0
    81a6:	4c46      	ldr	r4, [pc, #280]	; (82c0 <m2m_ip_cb+0x53c>)
    81a8:	47a0      	blx	r4
	{
    81aa:	e081      	b.n	82b0 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    81ac:	1dfb      	adds	r3, r7, #7
    81ae:	781b      	ldrb	r3, [r3, #0]
    81b0:	2b45      	cmp	r3, #69	; 0x45
    81b2:	d007      	beq.n	81c4 <m2m_ip_cb+0x440>
    81b4:	1dfb      	adds	r3, r7, #7
    81b6:	781b      	ldrb	r3, [r3, #0]
    81b8:	2b47      	cmp	r3, #71	; 0x47
    81ba:	d003      	beq.n	81c4 <m2m_ip_cb+0x440>
    81bc:	1dfb      	adds	r3, r7, #7
    81be:	781b      	ldrb	r3, [r3, #0]
    81c0:	2b4c      	cmp	r3, #76	; 0x4c
    81c2:	d14c      	bne.n	825e <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    81c4:	23de      	movs	r3, #222	; 0xde
    81c6:	18fb      	adds	r3, r7, r3
    81c8:	2207      	movs	r2, #7
    81ca:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
    81cc:	1dfb      	adds	r3, r7, #7
    81ce:	781b      	ldrb	r3, [r3, #0]
    81d0:	2b47      	cmp	r3, #71	; 0x47
    81d2:	d103      	bne.n	81dc <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    81d4:	23de      	movs	r3, #222	; 0xde
    81d6:	18fb      	adds	r3, r7, r3
    81d8:	2208      	movs	r2, #8
    81da:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    81dc:	2364      	movs	r3, #100	; 0x64
    81de:	18f9      	adds	r1, r7, r3
    81e0:	6838      	ldr	r0, [r7, #0]
    81e2:	2300      	movs	r3, #0
    81e4:	2208      	movs	r2, #8
    81e6:	4c36      	ldr	r4, [pc, #216]	; (82c0 <m2m_ip_cb+0x53c>)
    81e8:	47a0      	blx	r4
    81ea:	1e03      	subs	r3, r0, #0
    81ec:	d162      	bne.n	82b4 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
    81ee:	23dc      	movs	r3, #220	; 0xdc
    81f0:	18fb      	adds	r3, r7, r3
    81f2:	2200      	movs	r2, #0
    81f4:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
    81f6:	23db      	movs	r3, #219	; 0xdb
    81f8:	18fb      	adds	r3, r7, r3
    81fa:	2264      	movs	r2, #100	; 0x64
    81fc:	18ba      	adds	r2, r7, r2
    81fe:	7812      	ldrb	r2, [r2, #0]
    8200:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    8202:	23dc      	movs	r3, #220	; 0xdc
    8204:	18fb      	adds	r3, r7, r3
    8206:	2264      	movs	r2, #100	; 0x64
    8208:	18ba      	adds	r2, r7, r2
    820a:	8892      	ldrh	r2, [r2, #4]
    820c:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    820e:	2364      	movs	r3, #100	; 0x64
    8210:	18fb      	adds	r3, r7, r3
    8212:	2202      	movs	r2, #2
    8214:	5e9a      	ldrsh	r2, [r3, r2]
    8216:	236e      	movs	r3, #110	; 0x6e
    8218:	18fb      	adds	r3, r7, r3
    821a:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    821c:	23db      	movs	r3, #219	; 0xdb
    821e:	18fb      	adds	r3, r7, r3
    8220:	781b      	ldrb	r3, [r3, #0]
    8222:	b25b      	sxtb	r3, r3
    8224:	4a27      	ldr	r2, [pc, #156]	; (82c4 <m2m_ip_cb+0x540>)
    8226:	011b      	lsls	r3, r3, #4
    8228:	18d3      	adds	r3, r2, r3
    822a:	3306      	adds	r3, #6
    822c:	881b      	ldrh	r3, [r3, #0]
    822e:	b29b      	uxth	r3, r3
    8230:	22dc      	movs	r2, #220	; 0xdc
    8232:	18ba      	adds	r2, r7, r2
    8234:	8812      	ldrh	r2, [r2, #0]
    8236:	429a      	cmp	r2, r3
    8238:	d13c      	bne.n	82b4 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
    823a:	4b24      	ldr	r3, [pc, #144]	; (82cc <m2m_ip_cb+0x548>)
    823c:	681b      	ldr	r3, [r3, #0]
    823e:	2b00      	cmp	r3, #0
    8240:	d038      	beq.n	82b4 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    8242:	4b22      	ldr	r3, [pc, #136]	; (82cc <m2m_ip_cb+0x548>)
    8244:	681b      	ldr	r3, [r3, #0]
    8246:	226e      	movs	r2, #110	; 0x6e
    8248:	18bc      	adds	r4, r7, r2
    824a:	22de      	movs	r2, #222	; 0xde
    824c:	18ba      	adds	r2, r7, r2
    824e:	7811      	ldrb	r1, [r2, #0]
    8250:	22db      	movs	r2, #219	; 0xdb
    8252:	18ba      	adds	r2, r7, r2
    8254:	2000      	movs	r0, #0
    8256:	5610      	ldrsb	r0, [r2, r0]
    8258:	0022      	movs	r2, r4
    825a:	4798      	blx	r3
	{
    825c:	e02a      	b.n	82b4 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
    825e:	1dfb      	adds	r3, r7, #7
    8260:	781b      	ldrb	r3, [r3, #0]
    8262:	2b52      	cmp	r3, #82	; 0x52
    8264:	d127      	bne.n	82b6 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    8266:	2350      	movs	r3, #80	; 0x50
    8268:	18f9      	adds	r1, r7, r3
    826a:	6838      	ldr	r0, [r7, #0]
    826c:	2301      	movs	r3, #1
    826e:	2214      	movs	r2, #20
    8270:	4c13      	ldr	r4, [pc, #76]	; (82c0 <m2m_ip_cb+0x53c>)
    8272:	47a0      	blx	r4
    8274:	1e03      	subs	r3, r0, #0
    8276:	d11e      	bne.n	82b6 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    8278:	2350      	movs	r3, #80	; 0x50
    827a:	18fb      	adds	r3, r7, r3
    827c:	685b      	ldr	r3, [r3, #4]
    827e:	001a      	movs	r2, r3
    8280:	4b13      	ldr	r3, [pc, #76]	; (82d0 <m2m_ip_cb+0x54c>)
    8282:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    8284:	4b12      	ldr	r3, [pc, #72]	; (82d0 <m2m_ip_cb+0x54c>)
    8286:	681b      	ldr	r3, [r3, #0]
    8288:	2b00      	cmp	r3, #0
    828a:	d014      	beq.n	82b6 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    828c:	4b10      	ldr	r3, [pc, #64]	; (82d0 <m2m_ip_cb+0x54c>)
    828e:	681c      	ldr	r4, [r3, #0]
    8290:	2350      	movs	r3, #80	; 0x50
    8292:	18fb      	adds	r3, r7, r3
    8294:	6818      	ldr	r0, [r3, #0]
    8296:	2350      	movs	r3, #80	; 0x50
    8298:	18fb      	adds	r3, r7, r3
    829a:	6899      	ldr	r1, [r3, #8]
    829c:	2350      	movs	r3, #80	; 0x50
    829e:	18fb      	adds	r3, r7, r3
    82a0:	7c1b      	ldrb	r3, [r3, #16]
    82a2:	001a      	movs	r2, r3
    82a4:	47a0      	blx	r4
}
    82a6:	e006      	b.n	82b6 <m2m_ip_cb+0x532>
	{
    82a8:	46c0      	nop			; (mov r8, r8)
    82aa:	e004      	b.n	82b6 <m2m_ip_cb+0x532>
	{
    82ac:	46c0      	nop			; (mov r8, r8)
    82ae:	e002      	b.n	82b6 <m2m_ip_cb+0x532>
	{
    82b0:	46c0      	nop			; (mov r8, r8)
    82b2:	e000      	b.n	82b6 <m2m_ip_cb+0x532>
	{
    82b4:	46c0      	nop			; (mov r8, r8)
}
    82b6:	46c0      	nop			; (mov r8, r8)
    82b8:	46bd      	mov	sp, r7
    82ba:	b039      	add	sp, #228	; 0xe4
    82bc:	bd90      	pop	{r4, r7, pc}
    82be:	46c0      	nop			; (mov r8, r8)
    82c0:	00004ac9 	.word	0x00004ac9
    82c4:	2000061c 	.word	0x2000061c
    82c8:	00007b89 	.word	0x00007b89
    82cc:	200006cc 	.word	0x200006cc
    82d0:	200006d0 	.word	0x200006d0

000082d4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    82d4:	b580      	push	{r7, lr}
    82d6:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    82d8:	4b0c      	ldr	r3, [pc, #48]	; (830c <socketInit+0x38>)
    82da:	781b      	ldrb	r3, [r3, #0]
    82dc:	b2db      	uxtb	r3, r3
    82de:	2b00      	cmp	r3, #0
    82e0:	d110      	bne.n	8304 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    82e2:	4b0b      	ldr	r3, [pc, #44]	; (8310 <socketInit+0x3c>)
    82e4:	22b0      	movs	r2, #176	; 0xb0
    82e6:	2100      	movs	r1, #0
    82e8:	0018      	movs	r0, r3
    82ea:	4b0a      	ldr	r3, [pc, #40]	; (8314 <socketInit+0x40>)
    82ec:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    82ee:	4b0a      	ldr	r3, [pc, #40]	; (8318 <socketInit+0x44>)
    82f0:	0019      	movs	r1, r3
    82f2:	2002      	movs	r0, #2
    82f4:	4b09      	ldr	r3, [pc, #36]	; (831c <socketInit+0x48>)
    82f6:	4798      	blx	r3
		gbSocketInit	= 1;
    82f8:	4b04      	ldr	r3, [pc, #16]	; (830c <socketInit+0x38>)
    82fa:	2201      	movs	r2, #1
    82fc:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    82fe:	4b08      	ldr	r3, [pc, #32]	; (8320 <socketInit+0x4c>)
    8300:	2200      	movs	r2, #0
    8302:	801a      	strh	r2, [r3, #0]
	}
}
    8304:	46c0      	nop			; (mov r8, r8)
    8306:	46bd      	mov	sp, r7
    8308:	bd80      	pop	{r7, pc}
    830a:	46c0      	nop			; (mov r8, r8)
    830c:	20000230 	.word	0x20000230
    8310:	2000061c 	.word	0x2000061c
    8314:	00003f31 	.word	0x00003f31
    8318:	00007d85 	.word	0x00007d85
    831c:	00004c49 	.word	0x00004c49
    8320:	2000022e 	.word	0x2000022e

00008324 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    8324:	b580      	push	{r7, lr}
    8326:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    8328:	4b0a      	ldr	r3, [pc, #40]	; (8354 <socketDeinit+0x30>)
    832a:	22b0      	movs	r2, #176	; 0xb0
    832c:	2100      	movs	r1, #0
    832e:	0018      	movs	r0, r3
    8330:	4b09      	ldr	r3, [pc, #36]	; (8358 <socketDeinit+0x34>)
    8332:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    8334:	2100      	movs	r1, #0
    8336:	2002      	movs	r0, #2
    8338:	4b08      	ldr	r3, [pc, #32]	; (835c <socketDeinit+0x38>)
    833a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    833c:	4b08      	ldr	r3, [pc, #32]	; (8360 <socketDeinit+0x3c>)
    833e:	2200      	movs	r2, #0
    8340:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
    8342:	4b08      	ldr	r3, [pc, #32]	; (8364 <socketDeinit+0x40>)
    8344:	2200      	movs	r2, #0
    8346:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
    8348:	4b07      	ldr	r3, [pc, #28]	; (8368 <socketDeinit+0x44>)
    834a:	2200      	movs	r2, #0
    834c:	701a      	strb	r2, [r3, #0]
}
    834e:	46c0      	nop			; (mov r8, r8)
    8350:	46bd      	mov	sp, r7
    8352:	bd80      	pop	{r7, pc}
    8354:	2000061c 	.word	0x2000061c
    8358:	00003f31 	.word	0x00003f31
    835c:	00004c49 	.word	0x00004c49
    8360:	200006cc 	.word	0x200006cc
    8364:	200006d4 	.word	0x200006d4
    8368:	20000230 	.word	0x20000230

0000836c <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    836c:	b580      	push	{r7, lr}
    836e:	b082      	sub	sp, #8
    8370:	af00      	add	r7, sp, #0
    8372:	6078      	str	r0, [r7, #4]
    8374:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    8376:	4b05      	ldr	r3, [pc, #20]	; (838c <registerSocketCallback+0x20>)
    8378:	687a      	ldr	r2, [r7, #4]
    837a:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    837c:	4b04      	ldr	r3, [pc, #16]	; (8390 <registerSocketCallback+0x24>)
    837e:	683a      	ldr	r2, [r7, #0]
    8380:	601a      	str	r2, [r3, #0]
}
    8382:	46c0      	nop			; (mov r8, r8)
    8384:	46bd      	mov	sp, r7
    8386:	b002      	add	sp, #8
    8388:	bd80      	pop	{r7, pc}
    838a:	46c0      	nop			; (mov r8, r8)
    838c:	200006cc 	.word	0x200006cc
    8390:	200006d4 	.word	0x200006d4

00008394 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    8394:	b590      	push	{r4, r7, lr}
    8396:	b08d      	sub	sp, #52	; 0x34
    8398:	af04      	add	r7, sp, #16
    839a:	0004      	movs	r4, r0
    839c:	0008      	movs	r0, r1
    839e:	0011      	movs	r1, r2
    83a0:	1dbb      	adds	r3, r7, #6
    83a2:	1c22      	adds	r2, r4, #0
    83a4:	801a      	strh	r2, [r3, #0]
    83a6:	1d7b      	adds	r3, r7, #5
    83a8:	1c02      	adds	r2, r0, #0
    83aa:	701a      	strb	r2, [r3, #0]
    83ac:	1d3b      	adds	r3, r7, #4
    83ae:	1c0a      	adds	r2, r1, #0
    83b0:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    83b2:	231f      	movs	r3, #31
    83b4:	18fb      	adds	r3, r7, r3
    83b6:	22ff      	movs	r2, #255	; 0xff
    83b8:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    83ba:	1dbb      	adds	r3, r7, #6
    83bc:	881b      	ldrh	r3, [r3, #0]
    83be:	2b02      	cmp	r3, #2
    83c0:	d000      	beq.n	83c4 <socket+0x30>
    83c2:	e0cd      	b.n	8560 <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    83c4:	1d7b      	adds	r3, r7, #5
    83c6:	781b      	ldrb	r3, [r3, #0]
    83c8:	2b01      	cmp	r3, #1
    83ca:	d135      	bne.n	8438 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    83cc:	231e      	movs	r3, #30
    83ce:	18fb      	adds	r3, r7, r3
    83d0:	2200      	movs	r2, #0
    83d2:	701a      	strb	r2, [r3, #0]
    83d4:	e02a      	b.n	842c <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    83d6:	2317      	movs	r3, #23
    83d8:	18fb      	adds	r3, r7, r3
    83da:	4a65      	ldr	r2, [pc, #404]	; (8570 <socket+0x1dc>)
    83dc:	7812      	ldrb	r2, [r2, #0]
    83de:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    83e0:	4b63      	ldr	r3, [pc, #396]	; (8570 <socket+0x1dc>)
    83e2:	781b      	ldrb	r3, [r3, #0]
    83e4:	b2db      	uxtb	r3, r3
    83e6:	011a      	lsls	r2, r3, #4
    83e8:	4b62      	ldr	r3, [pc, #392]	; (8574 <socket+0x1e0>)
    83ea:	18d3      	adds	r3, r2, r3
    83ec:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    83ee:	4b60      	ldr	r3, [pc, #384]	; (8570 <socket+0x1dc>)
    83f0:	781b      	ldrb	r3, [r3, #0]
    83f2:	b2db      	uxtb	r3, r3
    83f4:	1c5a      	adds	r2, r3, #1
    83f6:	4b60      	ldr	r3, [pc, #384]	; (8578 <socket+0x1e4>)
    83f8:	2107      	movs	r1, #7
    83fa:	0010      	movs	r0, r2
    83fc:	4798      	blx	r3
    83fe:	000b      	movs	r3, r1
    8400:	b2da      	uxtb	r2, r3
    8402:	4b5b      	ldr	r3, [pc, #364]	; (8570 <socket+0x1dc>)
    8404:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    8406:	69bb      	ldr	r3, [r7, #24]
    8408:	7a9b      	ldrb	r3, [r3, #10]
    840a:	b2db      	uxtb	r3, r3
    840c:	2b00      	cmp	r3, #0
    840e:	d106      	bne.n	841e <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    8410:	231f      	movs	r3, #31
    8412:	18fb      	adds	r3, r7, r3
    8414:	2217      	movs	r2, #23
    8416:	18ba      	adds	r2, r7, r2
    8418:	7812      	ldrb	r2, [r2, #0]
    841a:	701a      	strb	r2, [r3, #0]
					break;
    841c:	e04c      	b.n	84b8 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    841e:	231e      	movs	r3, #30
    8420:	18fb      	adds	r3, r7, r3
    8422:	781a      	ldrb	r2, [r3, #0]
    8424:	231e      	movs	r3, #30
    8426:	18fb      	adds	r3, r7, r3
    8428:	3201      	adds	r2, #1
    842a:	701a      	strb	r2, [r3, #0]
    842c:	231e      	movs	r3, #30
    842e:	18fb      	adds	r3, r7, r3
    8430:	781b      	ldrb	r3, [r3, #0]
    8432:	2b06      	cmp	r3, #6
    8434:	d9cf      	bls.n	83d6 <socket+0x42>
    8436:	e03f      	b.n	84b8 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    8438:	1d7b      	adds	r3, r7, #5
    843a:	781b      	ldrb	r3, [r3, #0]
    843c:	2b02      	cmp	r3, #2
    843e:	d13b      	bne.n	84b8 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    8440:	4b4e      	ldr	r3, [pc, #312]	; (857c <socket+0x1e8>)
    8442:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    8444:	231e      	movs	r3, #30
    8446:	18fb      	adds	r3, r7, r3
    8448:	2200      	movs	r2, #0
    844a:	701a      	strb	r2, [r3, #0]
    844c:	e02f      	b.n	84ae <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    844e:	2317      	movs	r3, #23
    8450:	18fb      	adds	r3, r7, r3
    8452:	4a4b      	ldr	r2, [pc, #300]	; (8580 <socket+0x1ec>)
    8454:	7812      	ldrb	r2, [r2, #0]
    8456:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    8458:	4b49      	ldr	r3, [pc, #292]	; (8580 <socket+0x1ec>)
    845a:	781b      	ldrb	r3, [r3, #0]
    845c:	b2db      	uxtb	r3, r3
    845e:	011b      	lsls	r3, r3, #4
    8460:	693a      	ldr	r2, [r7, #16]
    8462:	18d3      	adds	r3, r2, r3
    8464:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    8466:	4b46      	ldr	r3, [pc, #280]	; (8580 <socket+0x1ec>)
    8468:	781b      	ldrb	r3, [r3, #0]
    846a:	b2db      	uxtb	r3, r3
    846c:	3301      	adds	r3, #1
    846e:	4a45      	ldr	r2, [pc, #276]	; (8584 <socket+0x1f0>)
    8470:	4013      	ands	r3, r2
    8472:	d504      	bpl.n	847e <socket+0xea>
    8474:	3b01      	subs	r3, #1
    8476:	2204      	movs	r2, #4
    8478:	4252      	negs	r2, r2
    847a:	4313      	orrs	r3, r2
    847c:	3301      	adds	r3, #1
    847e:	b2da      	uxtb	r2, r3
    8480:	4b3f      	ldr	r3, [pc, #252]	; (8580 <socket+0x1ec>)
    8482:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    8484:	69bb      	ldr	r3, [r7, #24]
    8486:	7a9b      	ldrb	r3, [r3, #10]
    8488:	b2db      	uxtb	r3, r3
    848a:	2b00      	cmp	r3, #0
    848c:	d108      	bne.n	84a0 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    848e:	2317      	movs	r3, #23
    8490:	18fb      	adds	r3, r7, r3
    8492:	781b      	ldrb	r3, [r3, #0]
    8494:	3307      	adds	r3, #7
    8496:	b2da      	uxtb	r2, r3
    8498:	231f      	movs	r3, #31
    849a:	18fb      	adds	r3, r7, r3
    849c:	701a      	strb	r2, [r3, #0]
					break;
    849e:	e00b      	b.n	84b8 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    84a0:	231e      	movs	r3, #30
    84a2:	18fb      	adds	r3, r7, r3
    84a4:	781a      	ldrb	r2, [r3, #0]
    84a6:	231e      	movs	r3, #30
    84a8:	18fb      	adds	r3, r7, r3
    84aa:	3201      	adds	r2, #1
    84ac:	701a      	strb	r2, [r3, #0]
    84ae:	231e      	movs	r3, #30
    84b0:	18fb      	adds	r3, r7, r3
    84b2:	781b      	ldrb	r3, [r3, #0]
    84b4:	2b03      	cmp	r3, #3
    84b6:	d9ca      	bls.n	844e <socket+0xba>
				}
			}
		}

		if(sock >= 0)
    84b8:	231f      	movs	r3, #31
    84ba:	18fb      	adds	r3, r7, r3
    84bc:	781b      	ldrb	r3, [r3, #0]
    84be:	2b7f      	cmp	r3, #127	; 0x7f
    84c0:	d84e      	bhi.n	8560 <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    84c2:	69bb      	ldr	r3, [r7, #24]
    84c4:	2210      	movs	r2, #16
    84c6:	2100      	movs	r1, #0
    84c8:	0018      	movs	r0, r3
    84ca:	4b2f      	ldr	r3, [pc, #188]	; (8588 <socket+0x1f4>)
    84cc:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    84ce:	69bb      	ldr	r3, [r7, #24]
    84d0:	2201      	movs	r2, #1
    84d2:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    84d4:	4b2d      	ldr	r3, [pc, #180]	; (858c <socket+0x1f8>)
    84d6:	881b      	ldrh	r3, [r3, #0]
    84d8:	b29b      	uxth	r3, r3
    84da:	3301      	adds	r3, #1
    84dc:	b29a      	uxth	r2, r3
    84de:	4b2b      	ldr	r3, [pc, #172]	; (858c <socket+0x1f8>)
    84e0:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    84e2:	4b2a      	ldr	r3, [pc, #168]	; (858c <socket+0x1f8>)
    84e4:	881b      	ldrh	r3, [r3, #0]
    84e6:	b29b      	uxth	r3, r3
    84e8:	2b00      	cmp	r3, #0
    84ea:	d106      	bne.n	84fa <socket+0x166>
				++gu16SessionID;
    84ec:	4b27      	ldr	r3, [pc, #156]	; (858c <socket+0x1f8>)
    84ee:	881b      	ldrh	r3, [r3, #0]
    84f0:	b29b      	uxth	r3, r3
    84f2:	3301      	adds	r3, #1
    84f4:	b29a      	uxth	r2, r3
    84f6:	4b25      	ldr	r3, [pc, #148]	; (858c <socket+0x1f8>)
    84f8:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    84fa:	4b24      	ldr	r3, [pc, #144]	; (858c <socket+0x1f8>)
    84fc:	881b      	ldrh	r3, [r3, #0]
    84fe:	b29a      	uxth	r2, r3
    8500:	69bb      	ldr	r3, [r7, #24]
    8502:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    8504:	4b22      	ldr	r3, [pc, #136]	; (8590 <socket+0x1fc>)
    8506:	0018      	movs	r0, r3
    8508:	4b22      	ldr	r3, [pc, #136]	; (8594 <socket+0x200>)
    850a:	4798      	blx	r3
    850c:	231f      	movs	r3, #31
    850e:	18fb      	adds	r3, r7, r3
    8510:	2100      	movs	r1, #0
    8512:	5659      	ldrsb	r1, [r3, r1]
    8514:	4b1d      	ldr	r3, [pc, #116]	; (858c <socket+0x1f8>)
    8516:	881b      	ldrh	r3, [r3, #0]
    8518:	b29b      	uxth	r3, r3
    851a:	001a      	movs	r2, r3
    851c:	4b1e      	ldr	r3, [pc, #120]	; (8598 <socket+0x204>)
    851e:	0018      	movs	r0, r3
    8520:	4b1c      	ldr	r3, [pc, #112]	; (8594 <socket+0x200>)
    8522:	4798      	blx	r3
    8524:	200d      	movs	r0, #13
    8526:	4b1d      	ldr	r3, [pc, #116]	; (859c <socket+0x208>)
    8528:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    852a:	1d3b      	adds	r3, r7, #4
    852c:	781b      	ldrb	r3, [r3, #0]
    852e:	2201      	movs	r2, #1
    8530:	4013      	ands	r3, r2
    8532:	d015      	beq.n	8560 <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    8534:	230c      	movs	r3, #12
    8536:	18fb      	adds	r3, r7, r3
    8538:	221f      	movs	r2, #31
    853a:	18ba      	adds	r2, r7, r2
    853c:	7812      	ldrb	r2, [r2, #0]
    853e:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    8540:	69bb      	ldr	r3, [r7, #24]
    8542:	2221      	movs	r2, #33	; 0x21
    8544:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    8546:	230c      	movs	r3, #12
    8548:	18fa      	adds	r2, r7, r3
    854a:	2300      	movs	r3, #0
    854c:	9302      	str	r3, [sp, #8]
    854e:	2300      	movs	r3, #0
    8550:	9301      	str	r3, [sp, #4]
    8552:	2300      	movs	r3, #0
    8554:	9300      	str	r3, [sp, #0]
    8556:	2304      	movs	r3, #4
    8558:	2150      	movs	r1, #80	; 0x50
    855a:	2002      	movs	r0, #2
    855c:	4c10      	ldr	r4, [pc, #64]	; (85a0 <socket+0x20c>)
    855e:	47a0      	blx	r4
			}
		}
	}
	return sock;
    8560:	231f      	movs	r3, #31
    8562:	18fb      	adds	r3, r7, r3
    8564:	781b      	ldrb	r3, [r3, #0]
    8566:	b25b      	sxtb	r3, r3
}
    8568:	0018      	movs	r0, r3
    856a:	46bd      	mov	sp, r7
    856c:	b009      	add	sp, #36	; 0x24
    856e:	bd90      	pop	{r4, r7, pc}
    8570:	20000231 	.word	0x20000231
    8574:	2000061c 	.word	0x2000061c
    8578:	00016661 	.word	0x00016661
    857c:	2000068c 	.word	0x2000068c
    8580:	20000232 	.word	0x20000232
    8584:	80000003 	.word	0x80000003
    8588:	00003f31 	.word	0x00003f31
    858c:	2000022e 	.word	0x2000022e
    8590:	0001a45c 	.word	0x0001a45c
    8594:	00013e4d 	.word	0x00013e4d
    8598:	0001a47c 	.word	0x0001a47c
    859c:	00013e81 	.word	0x00013e81
    85a0:	000041d5 	.word	0x000041d5

000085a4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    85a4:	b5b0      	push	{r4, r5, r7, lr}
    85a6:	b08a      	sub	sp, #40	; 0x28
    85a8:	af04      	add	r7, sp, #16
    85aa:	6039      	str	r1, [r7, #0]
    85ac:	0011      	movs	r1, r2
    85ae:	1dfb      	adds	r3, r7, #7
    85b0:	1c02      	adds	r2, r0, #0
    85b2:	701a      	strb	r2, [r3, #0]
    85b4:	1dbb      	adds	r3, r7, #6
    85b6:	1c0a      	adds	r2, r1, #0
    85b8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    85ba:	2317      	movs	r3, #23
    85bc:	18fb      	adds	r3, r7, r3
    85be:	22fa      	movs	r2, #250	; 0xfa
    85c0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    85c2:	1dfb      	adds	r3, r7, #7
    85c4:	781b      	ldrb	r3, [r3, #0]
    85c6:	2b7f      	cmp	r3, #127	; 0x7f
    85c8:	d867      	bhi.n	869a <connect+0xf6>
    85ca:	683b      	ldr	r3, [r7, #0]
    85cc:	2b00      	cmp	r3, #0
    85ce:	d064      	beq.n	869a <connect+0xf6>
    85d0:	1dfb      	adds	r3, r7, #7
    85d2:	781b      	ldrb	r3, [r3, #0]
    85d4:	b25b      	sxtb	r3, r3
    85d6:	4a35      	ldr	r2, [pc, #212]	; (86ac <connect+0x108>)
    85d8:	011b      	lsls	r3, r3, #4
    85da:	18d3      	adds	r3, r2, r3
    85dc:	330a      	adds	r3, #10
    85de:	781b      	ldrb	r3, [r3, #0]
    85e0:	b2db      	uxtb	r3, r3
    85e2:	2b01      	cmp	r3, #1
    85e4:	d159      	bne.n	869a <connect+0xf6>
    85e6:	1dbb      	adds	r3, r7, #6
    85e8:	781b      	ldrb	r3, [r3, #0]
    85ea:	2b00      	cmp	r3, #0
    85ec:	d055      	beq.n	869a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    85ee:	2316      	movs	r3, #22
    85f0:	18fb      	adds	r3, r7, r3
    85f2:	2244      	movs	r2, #68	; 0x44
    85f4:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    85f6:	1dfb      	adds	r3, r7, #7
    85f8:	781b      	ldrb	r3, [r3, #0]
    85fa:	b25b      	sxtb	r3, r3
    85fc:	4a2b      	ldr	r2, [pc, #172]	; (86ac <connect+0x108>)
    85fe:	011b      	lsls	r3, r3, #4
    8600:	18d3      	adds	r3, r2, r3
    8602:	330b      	adds	r3, #11
    8604:	781b      	ldrb	r3, [r3, #0]
    8606:	b2db      	uxtb	r3, r3
    8608:	001a      	movs	r2, r3
    860a:	2301      	movs	r3, #1
    860c:	4013      	ands	r3, r2
    860e:	d00f      	beq.n	8630 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    8610:	2316      	movs	r3, #22
    8612:	18fb      	adds	r3, r7, r3
    8614:	224b      	movs	r2, #75	; 0x4b
    8616:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    8618:	1dfb      	adds	r3, r7, #7
    861a:	781b      	ldrb	r3, [r3, #0]
    861c:	b25b      	sxtb	r3, r3
    861e:	4a23      	ldr	r2, [pc, #140]	; (86ac <connect+0x108>)
    8620:	011b      	lsls	r3, r3, #4
    8622:	18d3      	adds	r3, r2, r3
    8624:	330b      	adds	r3, #11
    8626:	781b      	ldrb	r3, [r3, #0]
    8628:	b2da      	uxtb	r2, r3
    862a:	2308      	movs	r3, #8
    862c:	18fb      	adds	r3, r7, r3
    862e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    8630:	2308      	movs	r3, #8
    8632:	18fb      	adds	r3, r7, r3
    8634:	1dfa      	adds	r2, r7, #7
    8636:	7812      	ldrb	r2, [r2, #0]
    8638:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    863a:	6839      	ldr	r1, [r7, #0]
    863c:	2308      	movs	r3, #8
    863e:	18fb      	adds	r3, r7, r3
    8640:	2208      	movs	r2, #8
    8642:	0018      	movs	r0, r3
    8644:	4b1a      	ldr	r3, [pc, #104]	; (86b0 <connect+0x10c>)
    8646:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    8648:	1dfb      	adds	r3, r7, #7
    864a:	781b      	ldrb	r3, [r3, #0]
    864c:	b25b      	sxtb	r3, r3
    864e:	4a17      	ldr	r2, [pc, #92]	; (86ac <connect+0x108>)
    8650:	011b      	lsls	r3, r3, #4
    8652:	18d3      	adds	r3, r2, r3
    8654:	3306      	adds	r3, #6
    8656:	881b      	ldrh	r3, [r3, #0]
    8658:	b29a      	uxth	r2, r3
    865a:	2308      	movs	r3, #8
    865c:	18fb      	adds	r3, r7, r3
    865e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    8660:	2317      	movs	r3, #23
    8662:	18fc      	adds	r4, r7, r3
    8664:	2308      	movs	r3, #8
    8666:	18fa      	adds	r2, r7, r3
    8668:	2316      	movs	r3, #22
    866a:	18fb      	adds	r3, r7, r3
    866c:	7819      	ldrb	r1, [r3, #0]
    866e:	2300      	movs	r3, #0
    8670:	9302      	str	r3, [sp, #8]
    8672:	2300      	movs	r3, #0
    8674:	9301      	str	r3, [sp, #4]
    8676:	2300      	movs	r3, #0
    8678:	9300      	str	r3, [sp, #0]
    867a:	230c      	movs	r3, #12
    867c:	2002      	movs	r0, #2
    867e:	4d0d      	ldr	r5, [pc, #52]	; (86b4 <connect+0x110>)
    8680:	47a8      	blx	r5
    8682:	0003      	movs	r3, r0
    8684:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    8686:	2317      	movs	r3, #23
    8688:	18fb      	adds	r3, r7, r3
    868a:	781b      	ldrb	r3, [r3, #0]
    868c:	b25b      	sxtb	r3, r3
    868e:	2b00      	cmp	r3, #0
    8690:	d003      	beq.n	869a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    8692:	2317      	movs	r3, #23
    8694:	18fb      	adds	r3, r7, r3
    8696:	22f7      	movs	r2, #247	; 0xf7
    8698:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    869a:	2317      	movs	r3, #23
    869c:	18fb      	adds	r3, r7, r3
    869e:	781b      	ldrb	r3, [r3, #0]
    86a0:	b25b      	sxtb	r3, r3
}
    86a2:	0018      	movs	r0, r3
    86a4:	46bd      	mov	sp, r7
    86a6:	b006      	add	sp, #24
    86a8:	bdb0      	pop	{r4, r5, r7, pc}
    86aa:	46c0      	nop			; (mov r8, r8)
    86ac:	2000061c 	.word	0x2000061c
    86b0:	00003ef5 	.word	0x00003ef5
    86b4:	000041d5 	.word	0x000041d5

000086b8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    86b8:	b590      	push	{r4, r7, lr}
    86ba:	b08f      	sub	sp, #60	; 0x3c
    86bc:	af04      	add	r7, sp, #16
    86be:	0004      	movs	r4, r0
    86c0:	60b9      	str	r1, [r7, #8]
    86c2:	0010      	movs	r0, r2
    86c4:	0019      	movs	r1, r3
    86c6:	230f      	movs	r3, #15
    86c8:	18fb      	adds	r3, r7, r3
    86ca:	1c22      	adds	r2, r4, #0
    86cc:	701a      	strb	r2, [r3, #0]
    86ce:	230c      	movs	r3, #12
    86d0:	18fb      	adds	r3, r7, r3
    86d2:	1c02      	adds	r2, r0, #0
    86d4:	801a      	strh	r2, [r3, #0]
    86d6:	1dbb      	adds	r3, r7, #6
    86d8:	1c0a      	adds	r2, r1, #0
    86da:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    86dc:	2326      	movs	r3, #38	; 0x26
    86de:	18fb      	adds	r3, r7, r3
    86e0:	2206      	movs	r2, #6
    86e2:	4252      	negs	r2, r2
    86e4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    86e6:	230f      	movs	r3, #15
    86e8:	18fb      	adds	r3, r7, r3
    86ea:	781b      	ldrb	r3, [r3, #0]
    86ec:	2b7f      	cmp	r3, #127	; 0x7f
    86ee:	d900      	bls.n	86f2 <send+0x3a>
    86f0:	e087      	b.n	8802 <send+0x14a>
    86f2:	68bb      	ldr	r3, [r7, #8]
    86f4:	2b00      	cmp	r3, #0
    86f6:	d100      	bne.n	86fa <send+0x42>
    86f8:	e083      	b.n	8802 <send+0x14a>
    86fa:	230c      	movs	r3, #12
    86fc:	18fb      	adds	r3, r7, r3
    86fe:	881a      	ldrh	r2, [r3, #0]
    8700:	23af      	movs	r3, #175	; 0xaf
    8702:	00db      	lsls	r3, r3, #3
    8704:	429a      	cmp	r2, r3
    8706:	d900      	bls.n	870a <send+0x52>
    8708:	e07b      	b.n	8802 <send+0x14a>
    870a:	230f      	movs	r3, #15
    870c:	18fb      	adds	r3, r7, r3
    870e:	781b      	ldrb	r3, [r3, #0]
    8710:	b25b      	sxtb	r3, r3
    8712:	4a40      	ldr	r2, [pc, #256]	; (8814 <send+0x15c>)
    8714:	011b      	lsls	r3, r3, #4
    8716:	18d3      	adds	r3, r2, r3
    8718:	330a      	adds	r3, #10
    871a:	781b      	ldrb	r3, [r3, #0]
    871c:	b2db      	uxtb	r3, r3
    871e:	2b01      	cmp	r3, #1
    8720:	d16f      	bne.n	8802 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    8722:	2323      	movs	r3, #35	; 0x23
    8724:	18fb      	adds	r3, r7, r3
    8726:	2245      	movs	r2, #69	; 0x45
    8728:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    872a:	2324      	movs	r3, #36	; 0x24
    872c:	18fb      	adds	r3, r7, r3
    872e:	2250      	movs	r2, #80	; 0x50
    8730:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    8732:	2310      	movs	r3, #16
    8734:	18fb      	adds	r3, r7, r3
    8736:	220f      	movs	r2, #15
    8738:	18ba      	adds	r2, r7, r2
    873a:	7812      	ldrb	r2, [r2, #0]
    873c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    873e:	2310      	movs	r3, #16
    8740:	18fb      	adds	r3, r7, r3
    8742:	220c      	movs	r2, #12
    8744:	18ba      	adds	r2, r7, r2
    8746:	8812      	ldrh	r2, [r2, #0]
    8748:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    874a:	230f      	movs	r3, #15
    874c:	18fb      	adds	r3, r7, r3
    874e:	781b      	ldrb	r3, [r3, #0]
    8750:	b25b      	sxtb	r3, r3
    8752:	4a30      	ldr	r2, [pc, #192]	; (8814 <send+0x15c>)
    8754:	011b      	lsls	r3, r3, #4
    8756:	18d3      	adds	r3, r2, r3
    8758:	3306      	adds	r3, #6
    875a:	881b      	ldrh	r3, [r3, #0]
    875c:	b29a      	uxth	r2, r3
    875e:	2310      	movs	r3, #16
    8760:	18fb      	adds	r3, r7, r3
    8762:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    8764:	230f      	movs	r3, #15
    8766:	18fb      	adds	r3, r7, r3
    8768:	781b      	ldrb	r3, [r3, #0]
    876a:	b25b      	sxtb	r3, r3
    876c:	2b06      	cmp	r3, #6
    876e:	dd03      	ble.n	8778 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    8770:	2324      	movs	r3, #36	; 0x24
    8772:	18fb      	adds	r3, r7, r3
    8774:	2244      	movs	r2, #68	; 0x44
    8776:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8778:	230f      	movs	r3, #15
    877a:	18fb      	adds	r3, r7, r3
    877c:	781b      	ldrb	r3, [r3, #0]
    877e:	b25b      	sxtb	r3, r3
    8780:	4a24      	ldr	r2, [pc, #144]	; (8814 <send+0x15c>)
    8782:	011b      	lsls	r3, r3, #4
    8784:	18d3      	adds	r3, r2, r3
    8786:	330b      	adds	r3, #11
    8788:	781b      	ldrb	r3, [r3, #0]
    878a:	b2db      	uxtb	r3, r3
    878c:	001a      	movs	r2, r3
    878e:	2301      	movs	r3, #1
    8790:	4013      	ands	r3, r2
    8792:	d00f      	beq.n	87b4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    8794:	2323      	movs	r3, #35	; 0x23
    8796:	18fb      	adds	r3, r7, r3
    8798:	224c      	movs	r2, #76	; 0x4c
    879a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    879c:	230f      	movs	r3, #15
    879e:	18fb      	adds	r3, r7, r3
    87a0:	2200      	movs	r2, #0
    87a2:	569a      	ldrsb	r2, [r3, r2]
    87a4:	2324      	movs	r3, #36	; 0x24
    87a6:	18fb      	adds	r3, r7, r3
    87a8:	491a      	ldr	r1, [pc, #104]	; (8814 <send+0x15c>)
    87aa:	0112      	lsls	r2, r2, #4
    87ac:	188a      	adds	r2, r1, r2
    87ae:	3208      	adds	r2, #8
    87b0:	8812      	ldrh	r2, [r2, #0]
    87b2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    87b4:	2323      	movs	r3, #35	; 0x23
    87b6:	18fb      	adds	r3, r7, r3
    87b8:	781b      	ldrb	r3, [r3, #0]
    87ba:	2280      	movs	r2, #128	; 0x80
    87bc:	4252      	negs	r2, r2
    87be:	4313      	orrs	r3, r2
    87c0:	b2d9      	uxtb	r1, r3
    87c2:	2310      	movs	r3, #16
    87c4:	18fa      	adds	r2, r7, r3
    87c6:	2324      	movs	r3, #36	; 0x24
    87c8:	18fb      	adds	r3, r7, r3
    87ca:	881b      	ldrh	r3, [r3, #0]
    87cc:	9302      	str	r3, [sp, #8]
    87ce:	230c      	movs	r3, #12
    87d0:	18fb      	adds	r3, r7, r3
    87d2:	881b      	ldrh	r3, [r3, #0]
    87d4:	9301      	str	r3, [sp, #4]
    87d6:	68bb      	ldr	r3, [r7, #8]
    87d8:	9300      	str	r3, [sp, #0]
    87da:	2310      	movs	r3, #16
    87dc:	2002      	movs	r0, #2
    87de:	4c0e      	ldr	r4, [pc, #56]	; (8818 <send+0x160>)
    87e0:	47a0      	blx	r4
    87e2:	0003      	movs	r3, r0
    87e4:	001a      	movs	r2, r3
    87e6:	2326      	movs	r3, #38	; 0x26
    87e8:	18fb      	adds	r3, r7, r3
    87ea:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    87ec:	2326      	movs	r3, #38	; 0x26
    87ee:	18fb      	adds	r3, r7, r3
    87f0:	2200      	movs	r2, #0
    87f2:	5e9b      	ldrsh	r3, [r3, r2]
    87f4:	2b00      	cmp	r3, #0
    87f6:	d004      	beq.n	8802 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    87f8:	2326      	movs	r3, #38	; 0x26
    87fa:	18fb      	adds	r3, r7, r3
    87fc:	220e      	movs	r2, #14
    87fe:	4252      	negs	r2, r2
    8800:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    8802:	2326      	movs	r3, #38	; 0x26
    8804:	18fb      	adds	r3, r7, r3
    8806:	2200      	movs	r2, #0
    8808:	5e9b      	ldrsh	r3, [r3, r2]
}
    880a:	0018      	movs	r0, r3
    880c:	46bd      	mov	sp, r7
    880e:	b00b      	add	sp, #44	; 0x2c
    8810:	bd90      	pop	{r4, r7, pc}
    8812:	46c0      	nop			; (mov r8, r8)
    8814:	2000061c 	.word	0x2000061c
    8818:	000041d5 	.word	0x000041d5

0000881c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    881c:	b590      	push	{r4, r7, lr}
    881e:	b08d      	sub	sp, #52	; 0x34
    8820:	af04      	add	r7, sp, #16
    8822:	60b9      	str	r1, [r7, #8]
    8824:	0011      	movs	r1, r2
    8826:	607b      	str	r3, [r7, #4]
    8828:	230f      	movs	r3, #15
    882a:	18fb      	adds	r3, r7, r3
    882c:	1c02      	adds	r2, r0, #0
    882e:	701a      	strb	r2, [r3, #0]
    8830:	230c      	movs	r3, #12
    8832:	18fb      	adds	r3, r7, r3
    8834:	1c0a      	adds	r2, r1, #0
    8836:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    8838:	231e      	movs	r3, #30
    883a:	18fb      	adds	r3, r7, r3
    883c:	2206      	movs	r2, #6
    883e:	4252      	negs	r2, r2
    8840:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    8842:	230f      	movs	r3, #15
    8844:	18fb      	adds	r3, r7, r3
    8846:	781b      	ldrb	r3, [r3, #0]
    8848:	2b7f      	cmp	r3, #127	; 0x7f
    884a:	d900      	bls.n	884e <recv+0x32>
    884c:	e099      	b.n	8982 <recv+0x166>
    884e:	68bb      	ldr	r3, [r7, #8]
    8850:	2b00      	cmp	r3, #0
    8852:	d100      	bne.n	8856 <recv+0x3a>
    8854:	e095      	b.n	8982 <recv+0x166>
    8856:	230c      	movs	r3, #12
    8858:	18fb      	adds	r3, r7, r3
    885a:	881b      	ldrh	r3, [r3, #0]
    885c:	2b00      	cmp	r3, #0
    885e:	d100      	bne.n	8862 <recv+0x46>
    8860:	e08f      	b.n	8982 <recv+0x166>
    8862:	230f      	movs	r3, #15
    8864:	18fb      	adds	r3, r7, r3
    8866:	781b      	ldrb	r3, [r3, #0]
    8868:	b25b      	sxtb	r3, r3
    886a:	4a4a      	ldr	r2, [pc, #296]	; (8994 <recv+0x178>)
    886c:	011b      	lsls	r3, r3, #4
    886e:	18d3      	adds	r3, r2, r3
    8870:	330a      	adds	r3, #10
    8872:	781b      	ldrb	r3, [r3, #0]
    8874:	b2db      	uxtb	r3, r3
    8876:	2b01      	cmp	r3, #1
    8878:	d000      	beq.n	887c <recv+0x60>
    887a:	e082      	b.n	8982 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    887c:	231e      	movs	r3, #30
    887e:	18fb      	adds	r3, r7, r3
    8880:	2200      	movs	r2, #0
    8882:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    8884:	230f      	movs	r3, #15
    8886:	18fb      	adds	r3, r7, r3
    8888:	2200      	movs	r2, #0
    888a:	569a      	ldrsb	r2, [r3, r2]
    888c:	4b41      	ldr	r3, [pc, #260]	; (8994 <recv+0x178>)
    888e:	0112      	lsls	r2, r2, #4
    8890:	68b9      	ldr	r1, [r7, #8]
    8892:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    8894:	230f      	movs	r3, #15
    8896:	18fb      	adds	r3, r7, r3
    8898:	781b      	ldrb	r3, [r3, #0]
    889a:	b25b      	sxtb	r3, r3
    889c:	4a3d      	ldr	r2, [pc, #244]	; (8994 <recv+0x178>)
    889e:	011b      	lsls	r3, r3, #4
    88a0:	18d3      	adds	r3, r2, r3
    88a2:	3304      	adds	r3, #4
    88a4:	220c      	movs	r2, #12
    88a6:	18ba      	adds	r2, r7, r2
    88a8:	8812      	ldrh	r2, [r2, #0]
    88aa:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    88ac:	230f      	movs	r3, #15
    88ae:	18fb      	adds	r3, r7, r3
    88b0:	781b      	ldrb	r3, [r3, #0]
    88b2:	b25b      	sxtb	r3, r3
    88b4:	4a37      	ldr	r2, [pc, #220]	; (8994 <recv+0x178>)
    88b6:	011b      	lsls	r3, r3, #4
    88b8:	18d3      	adds	r3, r2, r3
    88ba:	330c      	adds	r3, #12
    88bc:	781b      	ldrb	r3, [r3, #0]
    88be:	b2db      	uxtb	r3, r3
    88c0:	2b00      	cmp	r3, #0
    88c2:	d15e      	bne.n	8982 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    88c4:	231d      	movs	r3, #29
    88c6:	18fb      	adds	r3, r7, r3
    88c8:	2246      	movs	r2, #70	; 0x46
    88ca:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    88cc:	230f      	movs	r3, #15
    88ce:	18fb      	adds	r3, r7, r3
    88d0:	781b      	ldrb	r3, [r3, #0]
    88d2:	b25b      	sxtb	r3, r3
    88d4:	4a2f      	ldr	r2, [pc, #188]	; (8994 <recv+0x178>)
    88d6:	011b      	lsls	r3, r3, #4
    88d8:	18d3      	adds	r3, r2, r3
    88da:	330c      	adds	r3, #12
    88dc:	2201      	movs	r2, #1
    88de:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    88e0:	230f      	movs	r3, #15
    88e2:	18fb      	adds	r3, r7, r3
    88e4:	781b      	ldrb	r3, [r3, #0]
    88e6:	b25b      	sxtb	r3, r3
    88e8:	4a2a      	ldr	r2, [pc, #168]	; (8994 <recv+0x178>)
    88ea:	011b      	lsls	r3, r3, #4
    88ec:	18d3      	adds	r3, r2, r3
    88ee:	330b      	adds	r3, #11
    88f0:	781b      	ldrb	r3, [r3, #0]
    88f2:	b2db      	uxtb	r3, r3
    88f4:	001a      	movs	r2, r3
    88f6:	2301      	movs	r3, #1
    88f8:	4013      	ands	r3, r2
    88fa:	d003      	beq.n	8904 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    88fc:	231d      	movs	r3, #29
    88fe:	18fb      	adds	r3, r7, r3
    8900:	224d      	movs	r2, #77	; 0x4d
    8902:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    8904:	687b      	ldr	r3, [r7, #4]
    8906:	2b00      	cmp	r3, #0
    8908:	d105      	bne.n	8916 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    890a:	2314      	movs	r3, #20
    890c:	18fb      	adds	r3, r7, r3
    890e:	2201      	movs	r2, #1
    8910:	4252      	negs	r2, r2
    8912:	601a      	str	r2, [r3, #0]
    8914:	e003      	b.n	891e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    8916:	2314      	movs	r3, #20
    8918:	18fb      	adds	r3, r7, r3
    891a:	687a      	ldr	r2, [r7, #4]
    891c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    891e:	2314      	movs	r3, #20
    8920:	18fb      	adds	r3, r7, r3
    8922:	220f      	movs	r2, #15
    8924:	18ba      	adds	r2, r7, r2
    8926:	7812      	ldrb	r2, [r2, #0]
    8928:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    892a:	230f      	movs	r3, #15
    892c:	18fb      	adds	r3, r7, r3
    892e:	781b      	ldrb	r3, [r3, #0]
    8930:	b25b      	sxtb	r3, r3
    8932:	4a18      	ldr	r2, [pc, #96]	; (8994 <recv+0x178>)
    8934:	011b      	lsls	r3, r3, #4
    8936:	18d3      	adds	r3, r2, r3
    8938:	3306      	adds	r3, #6
    893a:	881b      	ldrh	r3, [r3, #0]
    893c:	b29a      	uxth	r2, r3
    893e:	2314      	movs	r3, #20
    8940:	18fb      	adds	r3, r7, r3
    8942:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    8944:	2314      	movs	r3, #20
    8946:	18fa      	adds	r2, r7, r3
    8948:	231d      	movs	r3, #29
    894a:	18fb      	adds	r3, r7, r3
    894c:	7819      	ldrb	r1, [r3, #0]
    894e:	2300      	movs	r3, #0
    8950:	9302      	str	r3, [sp, #8]
    8952:	2300      	movs	r3, #0
    8954:	9301      	str	r3, [sp, #4]
    8956:	2300      	movs	r3, #0
    8958:	9300      	str	r3, [sp, #0]
    895a:	2308      	movs	r3, #8
    895c:	2002      	movs	r0, #2
    895e:	4c0e      	ldr	r4, [pc, #56]	; (8998 <recv+0x17c>)
    8960:	47a0      	blx	r4
    8962:	0003      	movs	r3, r0
    8964:	001a      	movs	r2, r3
    8966:	231e      	movs	r3, #30
    8968:	18fb      	adds	r3, r7, r3
    896a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    896c:	231e      	movs	r3, #30
    896e:	18fb      	adds	r3, r7, r3
    8970:	2200      	movs	r2, #0
    8972:	5e9b      	ldrsh	r3, [r3, r2]
    8974:	2b00      	cmp	r3, #0
    8976:	d004      	beq.n	8982 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    8978:	231e      	movs	r3, #30
    897a:	18fb      	adds	r3, r7, r3
    897c:	220e      	movs	r2, #14
    897e:	4252      	negs	r2, r2
    8980:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    8982:	231e      	movs	r3, #30
    8984:	18fb      	adds	r3, r7, r3
    8986:	2200      	movs	r2, #0
    8988:	5e9b      	ldrsh	r3, [r3, r2]
}
    898a:	0018      	movs	r0, r3
    898c:	46bd      	mov	sp, r7
    898e:	b009      	add	sp, #36	; 0x24
    8990:	bd90      	pop	{r4, r7, pc}
    8992:	46c0      	nop			; (mov r8, r8)
    8994:	2000061c 	.word	0x2000061c
    8998:	000041d5 	.word	0x000041d5

0000899c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    899c:	b5b0      	push	{r4, r5, r7, lr}
    899e:	b088      	sub	sp, #32
    89a0:	af04      	add	r7, sp, #16
    89a2:	0002      	movs	r2, r0
    89a4:	1dfb      	adds	r3, r7, #7
    89a6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    89a8:	230f      	movs	r3, #15
    89aa:	18fb      	adds	r3, r7, r3
    89ac:	22fa      	movs	r2, #250	; 0xfa
    89ae:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    89b0:	4b42      	ldr	r3, [pc, #264]	; (8abc <close+0x120>)
    89b2:	0018      	movs	r0, r3
    89b4:	4b42      	ldr	r3, [pc, #264]	; (8ac0 <close+0x124>)
    89b6:	4798      	blx	r3
    89b8:	1dfb      	adds	r3, r7, #7
    89ba:	2200      	movs	r2, #0
    89bc:	569a      	ldrsb	r2, [r3, r2]
    89be:	4b41      	ldr	r3, [pc, #260]	; (8ac4 <close+0x128>)
    89c0:	0011      	movs	r1, r2
    89c2:	0018      	movs	r0, r3
    89c4:	4b3e      	ldr	r3, [pc, #248]	; (8ac0 <close+0x124>)
    89c6:	4798      	blx	r3
    89c8:	200d      	movs	r0, #13
    89ca:	4b3f      	ldr	r3, [pc, #252]	; (8ac8 <close+0x12c>)
    89cc:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    89ce:	1dfb      	adds	r3, r7, #7
    89d0:	781b      	ldrb	r3, [r3, #0]
    89d2:	2b7f      	cmp	r3, #127	; 0x7f
    89d4:	d86a      	bhi.n	8aac <close+0x110>
    89d6:	1dfb      	adds	r3, r7, #7
    89d8:	781b      	ldrb	r3, [r3, #0]
    89da:	b25b      	sxtb	r3, r3
    89dc:	4a3b      	ldr	r2, [pc, #236]	; (8acc <close+0x130>)
    89de:	011b      	lsls	r3, r3, #4
    89e0:	18d3      	adds	r3, r2, r3
    89e2:	330a      	adds	r3, #10
    89e4:	781b      	ldrb	r3, [r3, #0]
    89e6:	b2db      	uxtb	r3, r3
    89e8:	2b01      	cmp	r3, #1
    89ea:	d15f      	bne.n	8aac <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    89ec:	230e      	movs	r3, #14
    89ee:	18fb      	adds	r3, r7, r3
    89f0:	2249      	movs	r2, #73	; 0x49
    89f2:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    89f4:	2308      	movs	r3, #8
    89f6:	18fb      	adds	r3, r7, r3
    89f8:	1dfa      	adds	r2, r7, #7
    89fa:	7812      	ldrb	r2, [r2, #0]
    89fc:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    89fe:	1dfb      	adds	r3, r7, #7
    8a00:	781b      	ldrb	r3, [r3, #0]
    8a02:	b25b      	sxtb	r3, r3
    8a04:	4a31      	ldr	r2, [pc, #196]	; (8acc <close+0x130>)
    8a06:	011b      	lsls	r3, r3, #4
    8a08:	18d3      	adds	r3, r2, r3
    8a0a:	3306      	adds	r3, #6
    8a0c:	881b      	ldrh	r3, [r3, #0]
    8a0e:	b29a      	uxth	r2, r3
    8a10:	2308      	movs	r3, #8
    8a12:	18fb      	adds	r3, r7, r3
    8a14:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    8a16:	1dfb      	adds	r3, r7, #7
    8a18:	781b      	ldrb	r3, [r3, #0]
    8a1a:	b25b      	sxtb	r3, r3
    8a1c:	4a2b      	ldr	r2, [pc, #172]	; (8acc <close+0x130>)
    8a1e:	011b      	lsls	r3, r3, #4
    8a20:	18d3      	adds	r3, r2, r3
    8a22:	330a      	adds	r3, #10
    8a24:	2200      	movs	r2, #0
    8a26:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    8a28:	1dfb      	adds	r3, r7, #7
    8a2a:	781b      	ldrb	r3, [r3, #0]
    8a2c:	b25b      	sxtb	r3, r3
    8a2e:	4a27      	ldr	r2, [pc, #156]	; (8acc <close+0x130>)
    8a30:	011b      	lsls	r3, r3, #4
    8a32:	18d3      	adds	r3, r2, r3
    8a34:	3306      	adds	r3, #6
    8a36:	2200      	movs	r2, #0
    8a38:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8a3a:	1dfb      	adds	r3, r7, #7
    8a3c:	781b      	ldrb	r3, [r3, #0]
    8a3e:	b25b      	sxtb	r3, r3
    8a40:	4a22      	ldr	r2, [pc, #136]	; (8acc <close+0x130>)
    8a42:	011b      	lsls	r3, r3, #4
    8a44:	18d3      	adds	r3, r2, r3
    8a46:	330b      	adds	r3, #11
    8a48:	781b      	ldrb	r3, [r3, #0]
    8a4a:	b2db      	uxtb	r3, r3
    8a4c:	001a      	movs	r2, r3
    8a4e:	2301      	movs	r3, #1
    8a50:	4013      	ands	r3, r2
    8a52:	d003      	beq.n	8a5c <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    8a54:	230e      	movs	r3, #14
    8a56:	18fb      	adds	r3, r7, r3
    8a58:	224e      	movs	r2, #78	; 0x4e
    8a5a:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    8a5c:	230f      	movs	r3, #15
    8a5e:	18fc      	adds	r4, r7, r3
    8a60:	2308      	movs	r3, #8
    8a62:	18fa      	adds	r2, r7, r3
    8a64:	230e      	movs	r3, #14
    8a66:	18fb      	adds	r3, r7, r3
    8a68:	7819      	ldrb	r1, [r3, #0]
    8a6a:	2300      	movs	r3, #0
    8a6c:	9302      	str	r3, [sp, #8]
    8a6e:	2300      	movs	r3, #0
    8a70:	9301      	str	r3, [sp, #4]
    8a72:	2300      	movs	r3, #0
    8a74:	9300      	str	r3, [sp, #0]
    8a76:	2304      	movs	r3, #4
    8a78:	2002      	movs	r0, #2
    8a7a:	4d15      	ldr	r5, [pc, #84]	; (8ad0 <close+0x134>)
    8a7c:	47a8      	blx	r5
    8a7e:	0003      	movs	r3, r0
    8a80:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    8a82:	230f      	movs	r3, #15
    8a84:	18fb      	adds	r3, r7, r3
    8a86:	781b      	ldrb	r3, [r3, #0]
    8a88:	b25b      	sxtb	r3, r3
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	d003      	beq.n	8a96 <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    8a8e:	230f      	movs	r3, #15
    8a90:	18fb      	adds	r3, r7, r3
    8a92:	22f7      	movs	r2, #247	; 0xf7
    8a94:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    8a96:	1dfb      	adds	r3, r7, #7
    8a98:	781b      	ldrb	r3, [r3, #0]
    8a9a:	b25b      	sxtb	r3, r3
    8a9c:	011a      	lsls	r2, r3, #4
    8a9e:	4b0b      	ldr	r3, [pc, #44]	; (8acc <close+0x130>)
    8aa0:	18d3      	adds	r3, r2, r3
    8aa2:	2210      	movs	r2, #16
    8aa4:	2100      	movs	r1, #0
    8aa6:	0018      	movs	r0, r3
    8aa8:	4b0a      	ldr	r3, [pc, #40]	; (8ad4 <close+0x138>)
    8aaa:	4798      	blx	r3
	}
	return s8Ret;
    8aac:	230f      	movs	r3, #15
    8aae:	18fb      	adds	r3, r7, r3
    8ab0:	781b      	ldrb	r3, [r3, #0]
    8ab2:	b25b      	sxtb	r3, r3
}
    8ab4:	0018      	movs	r0, r3
    8ab6:	46bd      	mov	sp, r7
    8ab8:	b004      	add	sp, #16
    8aba:	bdb0      	pop	{r4, r5, r7, pc}
    8abc:	0001a45c 	.word	0x0001a45c
    8ac0:	00013e4d 	.word	0x00013e4d
    8ac4:	0001a498 	.word	0x0001a498
    8ac8:	00013e81 	.word	0x00013e81
    8acc:	2000061c 	.word	0x2000061c
    8ad0:	000041d5 	.word	0x000041d5
    8ad4:	00003f31 	.word	0x00003f31

00008ad8 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    8ad8:	b580      	push	{r7, lr}
    8ada:	b086      	sub	sp, #24
    8adc:	af00      	add	r7, sp, #0
    8ade:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
    8ae0:	2300      	movs	r3, #0
    8ae2:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
    8ae4:	2317      	movs	r3, #23
    8ae6:	18fb      	adds	r3, r7, r3
    8ae8:	2200      	movs	r2, #0
    8aea:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
    8aec:	2316      	movs	r3, #22
    8aee:	18fb      	adds	r3, r7, r3
    8af0:	2200      	movs	r2, #0
    8af2:	701a      	strb	r2, [r3, #0]
    8af4:	e060      	b.n	8bb8 <nmi_inet_addr+0xe0>
	{
		j = 0;
    8af6:	2315      	movs	r3, #21
    8af8:	18fb      	adds	r3, r7, r3
    8afa:	2200      	movs	r2, #0
    8afc:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
    8afe:	2314      	movs	r3, #20
    8b00:	18fb      	adds	r3, r7, r3
    8b02:	687a      	ldr	r2, [r7, #4]
    8b04:	7812      	ldrb	r2, [r2, #0]
    8b06:	701a      	strb	r2, [r3, #0]
			++j;
    8b08:	2315      	movs	r3, #21
    8b0a:	18fb      	adds	r3, r7, r3
    8b0c:	2215      	movs	r2, #21
    8b0e:	18ba      	adds	r2, r7, r2
    8b10:	7812      	ldrb	r2, [r2, #0]
    8b12:	3201      	adds	r2, #1
    8b14:	701a      	strb	r2, [r3, #0]
			if(j > 4)
    8b16:	2315      	movs	r3, #21
    8b18:	18fb      	adds	r3, r7, r3
    8b1a:	781b      	ldrb	r3, [r3, #0]
    8b1c:	2b04      	cmp	r3, #4
    8b1e:	d901      	bls.n	8b24 <nmi_inet_addr+0x4c>
			{
				return 0;
    8b20:	2300      	movs	r3, #0
    8b22:	e057      	b.n	8bd4 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
    8b24:	2314      	movs	r3, #20
    8b26:	18fb      	adds	r3, r7, r3
    8b28:	781b      	ldrb	r3, [r3, #0]
    8b2a:	2b2e      	cmp	r3, #46	; 0x2e
    8b2c:	d004      	beq.n	8b38 <nmi_inet_addr+0x60>
    8b2e:	2314      	movs	r3, #20
    8b30:	18fb      	adds	r3, r7, r3
    8b32:	781b      	ldrb	r3, [r3, #0]
    8b34:	2b00      	cmp	r3, #0
    8b36:	d10d      	bne.n	8b54 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
    8b38:	2316      	movs	r3, #22
    8b3a:	18fb      	adds	r3, r7, r3
    8b3c:	781b      	ldrb	r3, [r3, #0]
    8b3e:	220c      	movs	r2, #12
    8b40:	18ba      	adds	r2, r7, r2
    8b42:	2117      	movs	r1, #23
    8b44:	1879      	adds	r1, r7, r1
    8b46:	7809      	ldrb	r1, [r1, #0]
    8b48:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
    8b4a:	2317      	movs	r3, #23
    8b4c:	18fb      	adds	r3, r7, r3
    8b4e:	2200      	movs	r2, #0
    8b50:	701a      	strb	r2, [r3, #0]
    8b52:	e01d      	b.n	8b90 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
    8b54:	2314      	movs	r3, #20
    8b56:	18fb      	adds	r3, r7, r3
    8b58:	781b      	ldrb	r3, [r3, #0]
    8b5a:	2b2f      	cmp	r3, #47	; 0x2f
    8b5c:	d916      	bls.n	8b8c <nmi_inet_addr+0xb4>
    8b5e:	2314      	movs	r3, #20
    8b60:	18fb      	adds	r3, r7, r3
    8b62:	781b      	ldrb	r3, [r3, #0]
    8b64:	2b39      	cmp	r3, #57	; 0x39
    8b66:	d811      	bhi.n	8b8c <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
    8b68:	2317      	movs	r3, #23
    8b6a:	18fb      	adds	r3, r7, r3
    8b6c:	781b      	ldrb	r3, [r3, #0]
    8b6e:	1c1a      	adds	r2, r3, #0
    8b70:	0092      	lsls	r2, r2, #2
    8b72:	18d3      	adds	r3, r2, r3
    8b74:	18db      	adds	r3, r3, r3
    8b76:	b2da      	uxtb	r2, r3
    8b78:	2314      	movs	r3, #20
    8b7a:	18fb      	adds	r3, r7, r3
    8b7c:	781b      	ldrb	r3, [r3, #0]
    8b7e:	18d3      	adds	r3, r2, r3
    8b80:	b2da      	uxtb	r2, r3
    8b82:	2317      	movs	r3, #23
    8b84:	18fb      	adds	r3, r7, r3
    8b86:	3a30      	subs	r2, #48	; 0x30
    8b88:	701a      	strb	r2, [r3, #0]
    8b8a:	e001      	b.n	8b90 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
    8b8c:	2300      	movs	r3, #0
    8b8e:	e021      	b.n	8bd4 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	3301      	adds	r3, #1
    8b94:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
    8b96:	2314      	movs	r3, #20
    8b98:	18fb      	adds	r3, r7, r3
    8b9a:	781b      	ldrb	r3, [r3, #0]
    8b9c:	2b2e      	cmp	r3, #46	; 0x2e
    8b9e:	d004      	beq.n	8baa <nmi_inet_addr+0xd2>
    8ba0:	2314      	movs	r3, #20
    8ba2:	18fb      	adds	r3, r7, r3
    8ba4:	781b      	ldrb	r3, [r3, #0]
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d1a9      	bne.n	8afe <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
    8baa:	2316      	movs	r3, #22
    8bac:	18fb      	adds	r3, r7, r3
    8bae:	2216      	movs	r2, #22
    8bb0:	18ba      	adds	r2, r7, r2
    8bb2:	7812      	ldrb	r2, [r2, #0]
    8bb4:	3201      	adds	r2, #1
    8bb6:	701a      	strb	r2, [r3, #0]
    8bb8:	2316      	movs	r3, #22
    8bba:	18fb      	adds	r3, r7, r3
    8bbc:	781b      	ldrb	r3, [r3, #0]
    8bbe:	2b03      	cmp	r3, #3
    8bc0:	d999      	bls.n	8af6 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    8bc2:	230c      	movs	r3, #12
    8bc4:	18f9      	adds	r1, r7, r3
    8bc6:	2310      	movs	r3, #16
    8bc8:	18fb      	adds	r3, r7, r3
    8bca:	2204      	movs	r2, #4
    8bcc:	0018      	movs	r0, r3
    8bce:	4b03      	ldr	r3, [pc, #12]	; (8bdc <nmi_inet_addr+0x104>)
    8bd0:	4798      	blx	r3
	return u32IP;
    8bd2:	693b      	ldr	r3, [r7, #16]
}
    8bd4:	0018      	movs	r0, r3
    8bd6:	46bd      	mov	sp, r7
    8bd8:	b006      	add	sp, #24
    8bda:	bd80      	pop	{r7, pc}
    8bdc:	00003ef5 	.word	0x00003ef5

00008be0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    8be0:	b5b0      	push	{r4, r5, r7, lr}
    8be2:	b088      	sub	sp, #32
    8be4:	af04      	add	r7, sp, #16
    8be6:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    8be8:	230f      	movs	r3, #15
    8bea:	18fb      	adds	r3, r7, r3
    8bec:	22fa      	movs	r2, #250	; 0xfa
    8bee:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    8bf0:	687b      	ldr	r3, [r7, #4]
    8bf2:	0018      	movs	r0, r3
    8bf4:	4b14      	ldr	r3, [pc, #80]	; (8c48 <gethostbyname+0x68>)
    8bf6:	4798      	blx	r3
    8bf8:	0003      	movs	r3, r0
    8bfa:	001a      	movs	r2, r3
    8bfc:	230e      	movs	r3, #14
    8bfe:	18fb      	adds	r3, r7, r3
    8c00:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    8c02:	230e      	movs	r3, #14
    8c04:	18fb      	adds	r3, r7, r3
    8c06:	781b      	ldrb	r3, [r3, #0]
    8c08:	2b40      	cmp	r3, #64	; 0x40
    8c0a:	d815      	bhi.n	8c38 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    8c0c:	230e      	movs	r3, #14
    8c0e:	18fb      	adds	r3, r7, r3
    8c10:	781b      	ldrb	r3, [r3, #0]
    8c12:	b29b      	uxth	r3, r3
    8c14:	3301      	adds	r3, #1
    8c16:	b299      	uxth	r1, r3
    8c18:	230f      	movs	r3, #15
    8c1a:	18fc      	adds	r4, r7, r3
    8c1c:	687a      	ldr	r2, [r7, #4]
    8c1e:	2300      	movs	r3, #0
    8c20:	9302      	str	r3, [sp, #8]
    8c22:	2300      	movs	r3, #0
    8c24:	9301      	str	r3, [sp, #4]
    8c26:	2300      	movs	r3, #0
    8c28:	9300      	str	r3, [sp, #0]
    8c2a:	000b      	movs	r3, r1
    8c2c:	214a      	movs	r1, #74	; 0x4a
    8c2e:	2002      	movs	r0, #2
    8c30:	4d06      	ldr	r5, [pc, #24]	; (8c4c <gethostbyname+0x6c>)
    8c32:	47a8      	blx	r5
    8c34:	0003      	movs	r3, r0
    8c36:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    8c38:	230f      	movs	r3, #15
    8c3a:	18fb      	adds	r3, r7, r3
    8c3c:	781b      	ldrb	r3, [r3, #0]
    8c3e:	b25b      	sxtb	r3, r3
}
    8c40:	0018      	movs	r0, r3
    8c42:	46bd      	mov	sp, r7
    8c44:	b004      	add	sp, #16
    8c46:	bdb0      	pop	{r4, r5, r7, pc}
    8c48:	00003f6f 	.word	0x00003f6f
    8c4c:	000041d5 	.word	0x000041d5

00008c50 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    8c50:	b580      	push	{r7, lr}
    8c52:	b082      	sub	sp, #8
    8c54:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    8c56:	003b      	movs	r3, r7
    8c58:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    8c5a:	687b      	ldr	r3, [r7, #4]
    8c5c:	22b9      	movs	r2, #185	; 0xb9
    8c5e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    8c60:	4b13      	ldr	r3, [pc, #76]	; (8cb0 <spi_flash_enter_low_power_mode+0x60>)
    8c62:	2100      	movs	r1, #0
    8c64:	0018      	movs	r0, r3
    8c66:	4b13      	ldr	r3, [pc, #76]	; (8cb4 <spi_flash_enter_low_power_mode+0x64>)
    8c68:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    8c6a:	687b      	ldr	r3, [r7, #4]
    8c6c:	781b      	ldrb	r3, [r3, #0]
    8c6e:	001a      	movs	r2, r3
    8c70:	4b11      	ldr	r3, [pc, #68]	; (8cb8 <spi_flash_enter_low_power_mode+0x68>)
    8c72:	0011      	movs	r1, r2
    8c74:	0018      	movs	r0, r3
    8c76:	4b0f      	ldr	r3, [pc, #60]	; (8cb4 <spi_flash_enter_low_power_mode+0x64>)
    8c78:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    8c7a:	4b10      	ldr	r3, [pc, #64]	; (8cbc <spi_flash_enter_low_power_mode+0x6c>)
    8c7c:	2101      	movs	r1, #1
    8c7e:	0018      	movs	r0, r3
    8c80:	4b0c      	ldr	r3, [pc, #48]	; (8cb4 <spi_flash_enter_low_power_mode+0x64>)
    8c82:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    8c84:	4b0e      	ldr	r3, [pc, #56]	; (8cc0 <spi_flash_enter_low_power_mode+0x70>)
    8c86:	2100      	movs	r1, #0
    8c88:	0018      	movs	r0, r3
    8c8a:	4b0a      	ldr	r3, [pc, #40]	; (8cb4 <spi_flash_enter_low_power_mode+0x64>)
    8c8c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    8c8e:	4b0d      	ldr	r3, [pc, #52]	; (8cc4 <spi_flash_enter_low_power_mode+0x74>)
    8c90:	2181      	movs	r1, #129	; 0x81
    8c92:	0018      	movs	r0, r3
    8c94:	4b07      	ldr	r3, [pc, #28]	; (8cb4 <spi_flash_enter_low_power_mode+0x64>)
    8c96:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    8c98:	46c0      	nop			; (mov r8, r8)
    8c9a:	4b0b      	ldr	r3, [pc, #44]	; (8cc8 <spi_flash_enter_low_power_mode+0x78>)
    8c9c:	0018      	movs	r0, r3
    8c9e:	4b0b      	ldr	r3, [pc, #44]	; (8ccc <spi_flash_enter_low_power_mode+0x7c>)
    8ca0:	4798      	blx	r3
    8ca2:	0003      	movs	r3, r0
    8ca4:	2b01      	cmp	r3, #1
    8ca6:	d1f8      	bne.n	8c9a <spi_flash_enter_low_power_mode+0x4a>
}
    8ca8:	46c0      	nop			; (mov r8, r8)
    8caa:	46bd      	mov	sp, r7
    8cac:	b002      	add	sp, #8
    8cae:	bd80      	pop	{r7, pc}
    8cb0:	00010208 	.word	0x00010208
    8cb4:	00005ffd 	.word	0x00005ffd
    8cb8:	0001020c 	.word	0x0001020c
    8cbc:	00010214 	.word	0x00010214
    8cc0:	0001021c 	.word	0x0001021c
    8cc4:	00010204 	.word	0x00010204
    8cc8:	00010218 	.word	0x00010218
    8ccc:	00005fb9 	.word	0x00005fb9

00008cd0 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    8cd0:	b580      	push	{r7, lr}
    8cd2:	b082      	sub	sp, #8
    8cd4:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    8cd6:	003b      	movs	r3, r7
    8cd8:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    8cda:	687b      	ldr	r3, [r7, #4]
    8cdc:	22ab      	movs	r2, #171	; 0xab
    8cde:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    8ce0:	4b13      	ldr	r3, [pc, #76]	; (8d30 <spi_flash_leave_low_power_mode+0x60>)
    8ce2:	2100      	movs	r1, #0
    8ce4:	0018      	movs	r0, r3
    8ce6:	4b13      	ldr	r3, [pc, #76]	; (8d34 <spi_flash_leave_low_power_mode+0x64>)
    8ce8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    8cea:	687b      	ldr	r3, [r7, #4]
    8cec:	781b      	ldrb	r3, [r3, #0]
    8cee:	001a      	movs	r2, r3
    8cf0:	4b11      	ldr	r3, [pc, #68]	; (8d38 <spi_flash_leave_low_power_mode+0x68>)
    8cf2:	0011      	movs	r1, r2
    8cf4:	0018      	movs	r0, r3
    8cf6:	4b0f      	ldr	r3, [pc, #60]	; (8d34 <spi_flash_leave_low_power_mode+0x64>)
    8cf8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    8cfa:	4b10      	ldr	r3, [pc, #64]	; (8d3c <spi_flash_leave_low_power_mode+0x6c>)
    8cfc:	2101      	movs	r1, #1
    8cfe:	0018      	movs	r0, r3
    8d00:	4b0c      	ldr	r3, [pc, #48]	; (8d34 <spi_flash_leave_low_power_mode+0x64>)
    8d02:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    8d04:	4b0e      	ldr	r3, [pc, #56]	; (8d40 <spi_flash_leave_low_power_mode+0x70>)
    8d06:	2100      	movs	r1, #0
    8d08:	0018      	movs	r0, r3
    8d0a:	4b0a      	ldr	r3, [pc, #40]	; (8d34 <spi_flash_leave_low_power_mode+0x64>)
    8d0c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    8d0e:	4b0d      	ldr	r3, [pc, #52]	; (8d44 <spi_flash_leave_low_power_mode+0x74>)
    8d10:	2181      	movs	r1, #129	; 0x81
    8d12:	0018      	movs	r0, r3
    8d14:	4b07      	ldr	r3, [pc, #28]	; (8d34 <spi_flash_leave_low_power_mode+0x64>)
    8d16:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    8d18:	46c0      	nop			; (mov r8, r8)
    8d1a:	4b0b      	ldr	r3, [pc, #44]	; (8d48 <spi_flash_leave_low_power_mode+0x78>)
    8d1c:	0018      	movs	r0, r3
    8d1e:	4b0b      	ldr	r3, [pc, #44]	; (8d4c <spi_flash_leave_low_power_mode+0x7c>)
    8d20:	4798      	blx	r3
    8d22:	0003      	movs	r3, r0
    8d24:	2b01      	cmp	r3, #1
    8d26:	d1f8      	bne.n	8d1a <spi_flash_leave_low_power_mode+0x4a>
}
    8d28:	46c0      	nop			; (mov r8, r8)
    8d2a:	46bd      	mov	sp, r7
    8d2c:	b002      	add	sp, #8
    8d2e:	bd80      	pop	{r7, pc}
    8d30:	00010208 	.word	0x00010208
    8d34:	00005ffd 	.word	0x00005ffd
    8d38:	0001020c 	.word	0x0001020c
    8d3c:	00010214 	.word	0x00010214
    8d40:	0001021c 	.word	0x0001021c
    8d44:	00010204 	.word	0x00010204
    8d48:	00010218 	.word	0x00010218
    8d4c:	00005fb9 	.word	0x00005fb9

00008d50 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    8d50:	b590      	push	{r4, r7, lr}
    8d52:	b085      	sub	sp, #20
    8d54:	af00      	add	r7, sp, #0
    8d56:	0002      	movs	r2, r0
    8d58:	1dfb      	adds	r3, r7, #7
    8d5a:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    8d5c:	230f      	movs	r3, #15
    8d5e:	18fb      	adds	r3, r7, r3
    8d60:	2200      	movs	r2, #0
    8d62:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    8d64:	4b24      	ldr	r3, [pc, #144]	; (8df8 <spi_flash_enable+0xa8>)
    8d66:	4798      	blx	r3
    8d68:	0003      	movs	r3, r0
    8d6a:	051b      	lsls	r3, r3, #20
    8d6c:	0d1b      	lsrs	r3, r3, #20
    8d6e:	4a23      	ldr	r2, [pc, #140]	; (8dfc <spi_flash_enable+0xac>)
    8d70:	4293      	cmp	r3, r2
    8d72:	d938      	bls.n	8de6 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    8d74:	230f      	movs	r3, #15
    8d76:	18fc      	adds	r4, r7, r3
    8d78:	2308      	movs	r3, #8
    8d7a:	18fb      	adds	r3, r7, r3
    8d7c:	4a20      	ldr	r2, [pc, #128]	; (8e00 <spi_flash_enable+0xb0>)
    8d7e:	0019      	movs	r1, r3
    8d80:	0010      	movs	r0, r2
    8d82:	4b20      	ldr	r3, [pc, #128]	; (8e04 <spi_flash_enable+0xb4>)
    8d84:	4798      	blx	r3
    8d86:	0003      	movs	r3, r0
    8d88:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    8d8a:	230f      	movs	r3, #15
    8d8c:	18fb      	adds	r3, r7, r3
    8d8e:	781b      	ldrb	r3, [r3, #0]
    8d90:	b25b      	sxtb	r3, r3
    8d92:	2b00      	cmp	r3, #0
    8d94:	d126      	bne.n	8de4 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    8d96:	68bb      	ldr	r3, [r7, #8]
    8d98:	4a1b      	ldr	r2, [pc, #108]	; (8e08 <spi_flash_enable+0xb8>)
    8d9a:	4013      	ands	r3, r2
    8d9c:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    8d9e:	68bb      	ldr	r3, [r7, #8]
    8da0:	4a1a      	ldr	r2, [pc, #104]	; (8e0c <spi_flash_enable+0xbc>)
    8da2:	4313      	orrs	r3, r2
    8da4:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    8da6:	68bb      	ldr	r3, [r7, #8]
    8da8:	4a15      	ldr	r2, [pc, #84]	; (8e00 <spi_flash_enable+0xb0>)
    8daa:	0019      	movs	r1, r3
    8dac:	0010      	movs	r0, r2
    8dae:	4b18      	ldr	r3, [pc, #96]	; (8e10 <spi_flash_enable+0xc0>)
    8db0:	4798      	blx	r3
		if(enable) {
    8db2:	1dfb      	adds	r3, r7, #7
    8db4:	781b      	ldrb	r3, [r3, #0]
    8db6:	2b00      	cmp	r3, #0
    8db8:	d002      	beq.n	8dc0 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    8dba:	4b16      	ldr	r3, [pc, #88]	; (8e14 <spi_flash_enable+0xc4>)
    8dbc:	4798      	blx	r3
    8dbe:	e001      	b.n	8dc4 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    8dc0:	4b15      	ldr	r3, [pc, #84]	; (8e18 <spi_flash_enable+0xc8>)
    8dc2:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    8dc4:	68bb      	ldr	r3, [r7, #8]
    8dc6:	4a10      	ldr	r2, [pc, #64]	; (8e08 <spi_flash_enable+0xb8>)
    8dc8:	4013      	ands	r3, r2
    8dca:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    8dcc:	68bb      	ldr	r3, [r7, #8]
    8dce:	2280      	movs	r2, #128	; 0x80
    8dd0:	0252      	lsls	r2, r2, #9
    8dd2:	4313      	orrs	r3, r2
    8dd4:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    8dd6:	68bb      	ldr	r3, [r7, #8]
    8dd8:	4a09      	ldr	r2, [pc, #36]	; (8e00 <spi_flash_enable+0xb0>)
    8dda:	0019      	movs	r1, r3
    8ddc:	0010      	movs	r0, r2
    8dde:	4b0c      	ldr	r3, [pc, #48]	; (8e10 <spi_flash_enable+0xc0>)
    8de0:	4798      	blx	r3
    8de2:	e000      	b.n	8de6 <spi_flash_enable+0x96>
			goto ERR1;
    8de4:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
    8de6:	230f      	movs	r3, #15
    8de8:	18fb      	adds	r3, r7, r3
    8dea:	781b      	ldrb	r3, [r3, #0]
    8dec:	b25b      	sxtb	r3, r3
}
    8dee:	0018      	movs	r0, r3
    8df0:	46bd      	mov	sp, r7
    8df2:	b005      	add	sp, #20
    8df4:	bd90      	pop	{r4, r7, pc}
    8df6:	46c0      	nop			; (mov r8, r8)
    8df8:	000058dd 	.word	0x000058dd
    8dfc:	0000039f 	.word	0x0000039f
    8e00:	00001410 	.word	0x00001410
    8e04:	00005fd9 	.word	0x00005fd9
    8e08:	f8888fff 	.word	0xf8888fff
    8e0c:	01111000 	.word	0x01111000
    8e10:	00005ffd 	.word	0x00005ffd
    8e14:	00008cd1 	.word	0x00008cd1
    8e18:	00008c51 	.word	0x00008c51

00008e1c <_crc32_recalculate_bytes_helper>:
 *
 * \attention This implementation assumes a little-endian architecture.
 */
static inline crc32_t _crc32_recalculate_bytes_helper(word_t data,
		crc32_t crc, uint_fast8_t bytes)
{
    8e1c:	b580      	push	{r7, lr}
    8e1e:	b086      	sub	sp, #24
    8e20:	af00      	add	r7, sp, #0
    8e22:	60f8      	str	r0, [r7, #12]
    8e24:	60b9      	str	r1, [r7, #8]
    8e26:	607a      	str	r2, [r7, #4]
	uint_fast8_t bit;

	crc ^= data;
    8e28:	68ba      	ldr	r2, [r7, #8]
    8e2a:	68fb      	ldr	r3, [r7, #12]
    8e2c:	4053      	eors	r3, r2
    8e2e:	60bb      	str	r3, [r7, #8]

	for (bit = 8 * bytes; bit > 0; bit--) {
    8e30:	687b      	ldr	r3, [r7, #4]
    8e32:	00db      	lsls	r3, r3, #3
    8e34:	617b      	str	r3, [r7, #20]
    8e36:	e00f      	b.n	8e58 <_crc32_recalculate_bytes_helper+0x3c>
		if (crc & 1) {
    8e38:	68bb      	ldr	r3, [r7, #8]
    8e3a:	2201      	movs	r2, #1
    8e3c:	4013      	ands	r3, r2
    8e3e:	d005      	beq.n	8e4c <_crc32_recalculate_bytes_helper+0x30>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    8e40:	68bb      	ldr	r3, [r7, #8]
    8e42:	085b      	lsrs	r3, r3, #1
    8e44:	4a08      	ldr	r2, [pc, #32]	; (8e68 <_crc32_recalculate_bytes_helper+0x4c>)
    8e46:	4053      	eors	r3, r2
    8e48:	60bb      	str	r3, [r7, #8]
    8e4a:	e002      	b.n	8e52 <_crc32_recalculate_bytes_helper+0x36>
		} else {
			crc >>= 1;
    8e4c:	68bb      	ldr	r3, [r7, #8]
    8e4e:	085b      	lsrs	r3, r3, #1
    8e50:	60bb      	str	r3, [r7, #8]
	for (bit = 8 * bytes; bit > 0; bit--) {
    8e52:	697b      	ldr	r3, [r7, #20]
    8e54:	3b01      	subs	r3, #1
    8e56:	617b      	str	r3, [r7, #20]
    8e58:	697b      	ldr	r3, [r7, #20]
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d1ec      	bne.n	8e38 <_crc32_recalculate_bytes_helper+0x1c>
		}
	}

	return crc;
    8e5e:	68bb      	ldr	r3, [r7, #8]
}
    8e60:	0018      	movs	r0, r3
    8e62:	46bd      	mov	sp, r7
    8e64:	b006      	add	sp, #24
    8e66:	bd80      	pop	{r7, pc}
    8e68:	edb88320 	.word	0xedb88320

00008e6c <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    8e6c:	b580      	push	{r7, lr}
    8e6e:	b088      	sub	sp, #32
    8e70:	af00      	add	r7, sp, #0
    8e72:	60f8      	str	r0, [r7, #12]
    8e74:	60b9      	str	r1, [r7, #8]
    8e76:	607a      	str	r2, [r7, #4]
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    8e78:	68fb      	ldr	r3, [r7, #12]
    8e7a:	2203      	movs	r2, #3
    8e7c:	4393      	bics	r3, r2
	const word_t *word_ptr =
    8e7e:	61fb      	str	r3, [r7, #28]
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    8e80:	687b      	ldr	r3, [r7, #4]
    8e82:	681b      	ldr	r3, [r3, #0]
    8e84:	43db      	mvns	r3, r3
    8e86:	617b      	str	r3, [r7, #20]
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
    8e88:	68bb      	ldr	r3, [r7, #8]
    8e8a:	2b03      	cmp	r3, #3
    8e8c:	d802      	bhi.n	8e94 <crc32_recalculate+0x28>
		temp_length = length;
    8e8e:	68bb      	ldr	r3, [r7, #8]
    8e90:	61bb      	str	r3, [r7, #24]
    8e92:	e004      	b.n	8e9e <crc32_recalculate+0x32>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    8e94:	68fb      	ldr	r3, [r7, #12]
    8e96:	425b      	negs	r3, r3
    8e98:	2203      	movs	r2, #3
    8e9a:	4013      	ands	r3, r2
    8e9c:	61bb      	str	r3, [r7, #24]
	}

	if (temp_length) {
    8e9e:	69bb      	ldr	r3, [r7, #24]
    8ea0:	2b00      	cmp	r3, #0
    8ea2:	d01a      	beq.n	8eda <crc32_recalculate+0x6e>
		length -= temp_length;
    8ea4:	68ba      	ldr	r2, [r7, #8]
    8ea6:	69bb      	ldr	r3, [r7, #24]
    8ea8:	1ad3      	subs	r3, r2, r3
    8eaa:	60bb      	str	r3, [r7, #8]

		word = *(word_ptr++);
    8eac:	69fb      	ldr	r3, [r7, #28]
    8eae:	1d1a      	adds	r2, r3, #4
    8eb0:	61fa      	str	r2, [r7, #28]
    8eb2:	681b      	ldr	r3, [r3, #0]
    8eb4:	613b      	str	r3, [r7, #16]
		word >>= 8 * (WORD_SIZE - temp_length);
    8eb6:	69ba      	ldr	r2, [r7, #24]
    8eb8:	0013      	movs	r3, r2
    8eba:	075b      	lsls	r3, r3, #29
    8ebc:	1a9b      	subs	r3, r3, r2
    8ebe:	00db      	lsls	r3, r3, #3
    8ec0:	3320      	adds	r3, #32
    8ec2:	693a      	ldr	r2, [r7, #16]
    8ec4:	40da      	lsrs	r2, r3
    8ec6:	0013      	movs	r3, r2
    8ec8:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
    8eca:	69ba      	ldr	r2, [r7, #24]
    8ecc:	6979      	ldr	r1, [r7, #20]
    8ece:	693b      	ldr	r3, [r7, #16]
    8ed0:	0018      	movs	r0, r3
    8ed2:	4b24      	ldr	r3, [pc, #144]	; (8f64 <crc32_recalculate+0xf8>)
    8ed4:	4798      	blx	r3
    8ed6:	0003      	movs	r3, r0
    8ed8:	617b      	str	r3, [r7, #20]
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    8eda:	68bb      	ldr	r3, [r7, #8]
    8edc:	2203      	movs	r2, #3
    8ede:	4393      	bics	r3, r2
    8ee0:	61bb      	str	r3, [r7, #24]

	if (temp_length) {
    8ee2:	69bb      	ldr	r3, [r7, #24]
    8ee4:	2b00      	cmp	r3, #0
    8ee6:	d019      	beq.n	8f1c <crc32_recalculate+0xb0>
		length -= temp_length;
    8ee8:	68ba      	ldr	r2, [r7, #8]
    8eea:	69bb      	ldr	r3, [r7, #24]
    8eec:	1ad3      	subs	r3, r2, r3
    8eee:	60bb      	str	r3, [r7, #8]
		temp_length /= WORD_SIZE;
    8ef0:	69bb      	ldr	r3, [r7, #24]
    8ef2:	089b      	lsrs	r3, r3, #2
    8ef4:	61bb      	str	r3, [r7, #24]

		while (temp_length--) {
    8ef6:	e00c      	b.n	8f12 <crc32_recalculate+0xa6>
			word = *(word_ptr++);
    8ef8:	69fb      	ldr	r3, [r7, #28]
    8efa:	1d1a      	adds	r2, r3, #4
    8efc:	61fa      	str	r2, [r7, #28]
    8efe:	681b      	ldr	r3, [r3, #0]
    8f00:	613b      	str	r3, [r7, #16]
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
    8f02:	6979      	ldr	r1, [r7, #20]
    8f04:	693b      	ldr	r3, [r7, #16]
    8f06:	2204      	movs	r2, #4
    8f08:	0018      	movs	r0, r3
    8f0a:	4b16      	ldr	r3, [pc, #88]	; (8f64 <crc32_recalculate+0xf8>)
    8f0c:	4798      	blx	r3
    8f0e:	0003      	movs	r3, r0
    8f10:	617b      	str	r3, [r7, #20]
		while (temp_length--) {
    8f12:	69bb      	ldr	r3, [r7, #24]
    8f14:	1e5a      	subs	r2, r3, #1
    8f16:	61ba      	str	r2, [r7, #24]
    8f18:	2b00      	cmp	r3, #0
    8f1a:	d1ed      	bne.n	8ef8 <crc32_recalculate+0x8c>
		}
	}

	// Calculate for tailing bytes
	if (length) {
    8f1c:	68bb      	ldr	r3, [r7, #8]
    8f1e:	2b00      	cmp	r3, #0
    8f20:	d016      	beq.n	8f50 <crc32_recalculate+0xe4>
		word = *word_ptr;
    8f22:	69fb      	ldr	r3, [r7, #28]
    8f24:	681b      	ldr	r3, [r3, #0]
    8f26:	613b      	str	r3, [r7, #16]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    8f28:	68ba      	ldr	r2, [r7, #8]
    8f2a:	0013      	movs	r3, r2
    8f2c:	075b      	lsls	r3, r3, #29
    8f2e:	1a9b      	subs	r3, r3, r2
    8f30:	00db      	lsls	r3, r3, #3
    8f32:	3320      	adds	r3, #32
    8f34:	2201      	movs	r2, #1
    8f36:	4252      	negs	r2, r2
    8f38:	40da      	lsrs	r2, r3
    8f3a:	693b      	ldr	r3, [r7, #16]
    8f3c:	4013      	ands	r3, r2
    8f3e:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
    8f40:	68ba      	ldr	r2, [r7, #8]
    8f42:	6979      	ldr	r1, [r7, #20]
    8f44:	693b      	ldr	r3, [r7, #16]
    8f46:	0018      	movs	r0, r3
    8f48:	4b06      	ldr	r3, [pc, #24]	; (8f64 <crc32_recalculate+0xf8>)
    8f4a:	4798      	blx	r3
    8f4c:	0003      	movs	r3, r0
    8f4e:	617b      	str	r3, [r7, #20]
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    8f50:	697b      	ldr	r3, [r7, #20]
    8f52:	43da      	mvns	r2, r3
    8f54:	687b      	ldr	r3, [r7, #4]
    8f56:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    8f58:	2300      	movs	r3, #0
    8f5a:	0018      	movs	r0, r3
    8f5c:	46bd      	mov	sp, r7
    8f5e:	b008      	add	sp, #32
    8f60:	bd80      	pop	{r7, pc}
    8f62:	46c0      	nop			; (mov r8, r8)
    8f64:	00008e1d 	.word	0x00008e1d

00008f68 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    8f68:	b580      	push	{r7, lr}
    8f6a:	b084      	sub	sp, #16
    8f6c:	af00      	add	r7, sp, #0
    8f6e:	0002      	movs	r2, r0
    8f70:	1dfb      	adds	r3, r7, #7
    8f72:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    8f74:	230f      	movs	r3, #15
    8f76:	18fb      	adds	r3, r7, r3
    8f78:	1dfa      	adds	r2, r7, #7
    8f7a:	7812      	ldrb	r2, [r2, #0]
    8f7c:	0952      	lsrs	r2, r2, #5
    8f7e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    8f80:	230f      	movs	r3, #15
    8f82:	18fb      	adds	r3, r7, r3
    8f84:	781b      	ldrb	r3, [r3, #0]
    8f86:	2b00      	cmp	r3, #0
    8f88:	d10c      	bne.n	8fa4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    8f8a:	4b09      	ldr	r3, [pc, #36]	; (8fb0 <_extint_get_eic_from_channel+0x48>)
    8f8c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    8f8e:	230f      	movs	r3, #15
    8f90:	18fb      	adds	r3, r7, r3
    8f92:	781b      	ldrb	r3, [r3, #0]
    8f94:	009b      	lsls	r3, r3, #2
    8f96:	2210      	movs	r2, #16
    8f98:	4694      	mov	ip, r2
    8f9a:	44bc      	add	ip, r7
    8f9c:	4463      	add	r3, ip
    8f9e:	3b08      	subs	r3, #8
    8fa0:	681b      	ldr	r3, [r3, #0]
    8fa2:	e000      	b.n	8fa6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    8fa4:	2300      	movs	r3, #0
	}
}
    8fa6:	0018      	movs	r0, r3
    8fa8:	46bd      	mov	sp, r7
    8faa:	b004      	add	sp, #16
    8fac:	bd80      	pop	{r7, pc}
    8fae:	46c0      	nop			; (mov r8, r8)
    8fb0:	40001800 	.word	0x40001800

00008fb4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    8fb4:	b580      	push	{r7, lr}
    8fb6:	b084      	sub	sp, #16
    8fb8:	af00      	add	r7, sp, #0
    8fba:	0002      	movs	r2, r0
    8fbc:	1dfb      	adds	r3, r7, #7
    8fbe:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    8fc0:	1dfb      	adds	r3, r7, #7
    8fc2:	781b      	ldrb	r3, [r3, #0]
    8fc4:	0018      	movs	r0, r3
    8fc6:	4b0b      	ldr	r3, [pc, #44]	; (8ff4 <extint_chan_is_detected+0x40>)
    8fc8:	4798      	blx	r3
    8fca:	0003      	movs	r3, r0
    8fcc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    8fce:	1dfb      	adds	r3, r7, #7
    8fd0:	781b      	ldrb	r3, [r3, #0]
    8fd2:	221f      	movs	r2, #31
    8fd4:	4013      	ands	r3, r2
    8fd6:	2201      	movs	r2, #1
    8fd8:	409a      	lsls	r2, r3
    8fda:	0013      	movs	r3, r2
    8fdc:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    8fde:	68fb      	ldr	r3, [r7, #12]
    8fe0:	691b      	ldr	r3, [r3, #16]
    8fe2:	68ba      	ldr	r2, [r7, #8]
    8fe4:	4013      	ands	r3, r2
    8fe6:	1e5a      	subs	r2, r3, #1
    8fe8:	4193      	sbcs	r3, r2
    8fea:	b2db      	uxtb	r3, r3
}
    8fec:	0018      	movs	r0, r3
    8fee:	46bd      	mov	sp, r7
    8ff0:	b004      	add	sp, #16
    8ff2:	bd80      	pop	{r7, pc}
    8ff4:	00008f69 	.word	0x00008f69

00008ff8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    8ff8:	b580      	push	{r7, lr}
    8ffa:	b084      	sub	sp, #16
    8ffc:	af00      	add	r7, sp, #0
    8ffe:	0002      	movs	r2, r0
    9000:	1dfb      	adds	r3, r7, #7
    9002:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    9004:	1dfb      	adds	r3, r7, #7
    9006:	781b      	ldrb	r3, [r3, #0]
    9008:	0018      	movs	r0, r3
    900a:	4b09      	ldr	r3, [pc, #36]	; (9030 <extint_chan_clear_detected+0x38>)
    900c:	4798      	blx	r3
    900e:	0003      	movs	r3, r0
    9010:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    9012:	1dfb      	adds	r3, r7, #7
    9014:	781b      	ldrb	r3, [r3, #0]
    9016:	221f      	movs	r2, #31
    9018:	4013      	ands	r3, r2
    901a:	2201      	movs	r2, #1
    901c:	409a      	lsls	r2, r3
    901e:	0013      	movs	r3, r2
    9020:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    9022:	68fb      	ldr	r3, [r7, #12]
    9024:	68ba      	ldr	r2, [r7, #8]
    9026:	611a      	str	r2, [r3, #16]
}
    9028:	46c0      	nop			; (mov r8, r8)
    902a:	46bd      	mov	sp, r7
    902c:	b004      	add	sp, #16
    902e:	bd80      	pop	{r7, pc}
    9030:	00008f69 	.word	0x00008f69

00009034 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    9034:	b580      	push	{r7, lr}
    9036:	b082      	sub	sp, #8
    9038:	af00      	add	r7, sp, #0
    903a:	6078      	str	r0, [r7, #4]
    903c:	0008      	movs	r0, r1
    903e:	0011      	movs	r1, r2
    9040:	1cfb      	adds	r3, r7, #3
    9042:	1c02      	adds	r2, r0, #0
    9044:	701a      	strb	r2, [r3, #0]
    9046:	1cbb      	adds	r3, r7, #2
    9048:	1c0a      	adds	r2, r1, #0
    904a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    904c:	1cbb      	adds	r3, r7, #2
    904e:	781b      	ldrb	r3, [r3, #0]
    9050:	2b00      	cmp	r3, #0
    9052:	d001      	beq.n	9058 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9054:	2317      	movs	r3, #23
    9056:	e019      	b.n	908c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    9058:	1cfb      	adds	r3, r7, #3
    905a:	781a      	ldrb	r2, [r3, #0]
    905c:	4b0d      	ldr	r3, [pc, #52]	; (9094 <extint_register_callback+0x60>)
    905e:	0092      	lsls	r2, r2, #2
    9060:	58d3      	ldr	r3, [r2, r3]
    9062:	2b00      	cmp	r3, #0
    9064:	d107      	bne.n	9076 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    9066:	1cfb      	adds	r3, r7, #3
    9068:	781a      	ldrb	r2, [r3, #0]
    906a:	4b0a      	ldr	r3, [pc, #40]	; (9094 <extint_register_callback+0x60>)
    906c:	0092      	lsls	r2, r2, #2
    906e:	6879      	ldr	r1, [r7, #4]
    9070:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    9072:	2300      	movs	r3, #0
    9074:	e00a      	b.n	908c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    9076:	1cfb      	adds	r3, r7, #3
    9078:	781a      	ldrb	r2, [r3, #0]
    907a:	4b06      	ldr	r3, [pc, #24]	; (9094 <extint_register_callback+0x60>)
    907c:	0092      	lsls	r2, r2, #2
    907e:	58d2      	ldr	r2, [r2, r3]
    9080:	687b      	ldr	r3, [r7, #4]
    9082:	429a      	cmp	r2, r3
    9084:	d101      	bne.n	908a <extint_register_callback+0x56>
		return STATUS_OK;
    9086:	2300      	movs	r3, #0
    9088:	e000      	b.n	908c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    908a:	231d      	movs	r3, #29
}
    908c:	0018      	movs	r0, r3
    908e:	46bd      	mov	sp, r7
    9090:	b002      	add	sp, #8
    9092:	bd80      	pop	{r7, pc}
    9094:	200006dc 	.word	0x200006dc

00009098 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    9098:	b580      	push	{r7, lr}
    909a:	b084      	sub	sp, #16
    909c:	af00      	add	r7, sp, #0
    909e:	0002      	movs	r2, r0
    90a0:	1dfb      	adds	r3, r7, #7
    90a2:	701a      	strb	r2, [r3, #0]
    90a4:	1dbb      	adds	r3, r7, #6
    90a6:	1c0a      	adds	r2, r1, #0
    90a8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    90aa:	1dbb      	adds	r3, r7, #6
    90ac:	781b      	ldrb	r3, [r3, #0]
    90ae:	2b00      	cmp	r3, #0
    90b0:	d10e      	bne.n	90d0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    90b2:	1dfb      	adds	r3, r7, #7
    90b4:	781b      	ldrb	r3, [r3, #0]
    90b6:	0018      	movs	r0, r3
    90b8:	4b08      	ldr	r3, [pc, #32]	; (90dc <extint_chan_enable_callback+0x44>)
    90ba:	4798      	blx	r3
    90bc:	0003      	movs	r3, r0
    90be:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    90c0:	1dfb      	adds	r3, r7, #7
    90c2:	781b      	ldrb	r3, [r3, #0]
    90c4:	2201      	movs	r2, #1
    90c6:	409a      	lsls	r2, r3
    90c8:	68fb      	ldr	r3, [r7, #12]
    90ca:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    90cc:	2300      	movs	r3, #0
    90ce:	e000      	b.n	90d2 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    90d0:	2317      	movs	r3, #23
}
    90d2:	0018      	movs	r0, r3
    90d4:	46bd      	mov	sp, r7
    90d6:	b004      	add	sp, #16
    90d8:	bd80      	pop	{r7, pc}
    90da:	46c0      	nop			; (mov r8, r8)
    90dc:	00008f69 	.word	0x00008f69

000090e0 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    90e0:	b580      	push	{r7, lr}
    90e2:	b084      	sub	sp, #16
    90e4:	af00      	add	r7, sp, #0
    90e6:	0002      	movs	r2, r0
    90e8:	1dfb      	adds	r3, r7, #7
    90ea:	701a      	strb	r2, [r3, #0]
    90ec:	1dbb      	adds	r3, r7, #6
    90ee:	1c0a      	adds	r2, r1, #0
    90f0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    90f2:	1dbb      	adds	r3, r7, #6
    90f4:	781b      	ldrb	r3, [r3, #0]
    90f6:	2b00      	cmp	r3, #0
    90f8:	d10e      	bne.n	9118 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    90fa:	1dfb      	adds	r3, r7, #7
    90fc:	781b      	ldrb	r3, [r3, #0]
    90fe:	0018      	movs	r0, r3
    9100:	4b08      	ldr	r3, [pc, #32]	; (9124 <extint_chan_disable_callback+0x44>)
    9102:	4798      	blx	r3
    9104:	0003      	movs	r3, r0
    9106:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    9108:	1dfb      	adds	r3, r7, #7
    910a:	781b      	ldrb	r3, [r3, #0]
    910c:	2201      	movs	r2, #1
    910e:	409a      	lsls	r2, r3
    9110:	68fb      	ldr	r3, [r7, #12]
    9112:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    9114:	2300      	movs	r3, #0
    9116:	e000      	b.n	911a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    9118:	2317      	movs	r3, #23
}
    911a:	0018      	movs	r0, r3
    911c:	46bd      	mov	sp, r7
    911e:	b004      	add	sp, #16
    9120:	bd80      	pop	{r7, pc}
    9122:	46c0      	nop			; (mov r8, r8)
    9124:	00008f69 	.word	0x00008f69

00009128 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    9128:	b580      	push	{r7, lr}
    912a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    912c:	4b15      	ldr	r3, [pc, #84]	; (9184 <EIC_Handler+0x5c>)
    912e:	2200      	movs	r2, #0
    9130:	701a      	strb	r2, [r3, #0]
    9132:	e020      	b.n	9176 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    9134:	4b13      	ldr	r3, [pc, #76]	; (9184 <EIC_Handler+0x5c>)
    9136:	781b      	ldrb	r3, [r3, #0]
    9138:	0018      	movs	r0, r3
    913a:	4b13      	ldr	r3, [pc, #76]	; (9188 <EIC_Handler+0x60>)
    913c:	4798      	blx	r3
    913e:	1e03      	subs	r3, r0, #0
    9140:	d013      	beq.n	916a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    9142:	4b10      	ldr	r3, [pc, #64]	; (9184 <EIC_Handler+0x5c>)
    9144:	781b      	ldrb	r3, [r3, #0]
    9146:	0018      	movs	r0, r3
    9148:	4b10      	ldr	r3, [pc, #64]	; (918c <EIC_Handler+0x64>)
    914a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    914c:	4b0d      	ldr	r3, [pc, #52]	; (9184 <EIC_Handler+0x5c>)
    914e:	781b      	ldrb	r3, [r3, #0]
    9150:	001a      	movs	r2, r3
    9152:	4b0f      	ldr	r3, [pc, #60]	; (9190 <EIC_Handler+0x68>)
    9154:	0092      	lsls	r2, r2, #2
    9156:	58d3      	ldr	r3, [r2, r3]
    9158:	2b00      	cmp	r3, #0
    915a:	d006      	beq.n	916a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    915c:	4b09      	ldr	r3, [pc, #36]	; (9184 <EIC_Handler+0x5c>)
    915e:	781b      	ldrb	r3, [r3, #0]
    9160:	001a      	movs	r2, r3
    9162:	4b0b      	ldr	r3, [pc, #44]	; (9190 <EIC_Handler+0x68>)
    9164:	0092      	lsls	r2, r2, #2
    9166:	58d3      	ldr	r3, [r2, r3]
    9168:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    916a:	4b06      	ldr	r3, [pc, #24]	; (9184 <EIC_Handler+0x5c>)
    916c:	781b      	ldrb	r3, [r3, #0]
    916e:	3301      	adds	r3, #1
    9170:	b2da      	uxtb	r2, r3
    9172:	4b04      	ldr	r3, [pc, #16]	; (9184 <EIC_Handler+0x5c>)
    9174:	701a      	strb	r2, [r3, #0]
    9176:	4b03      	ldr	r3, [pc, #12]	; (9184 <EIC_Handler+0x5c>)
    9178:	781b      	ldrb	r3, [r3, #0]
    917a:	2b0f      	cmp	r3, #15
    917c:	d9da      	bls.n	9134 <EIC_Handler+0xc>
			}
		}
	}
}
    917e:	46c0      	nop			; (mov r8, r8)
    9180:	46bd      	mov	sp, r7
    9182:	bd80      	pop	{r7, pc}
    9184:	200006d8 	.word	0x200006d8
    9188:	00008fb5 	.word	0x00008fb5
    918c:	00008ff9 	.word	0x00008ff9
    9190:	200006dc 	.word	0x200006dc

00009194 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    9194:	b580      	push	{r7, lr}
    9196:	b082      	sub	sp, #8
    9198:	af00      	add	r7, sp, #0
    919a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    919c:	687b      	ldr	r3, [r7, #4]
    919e:	2200      	movs	r2, #0
    91a0:	701a      	strb	r2, [r3, #0]
}
    91a2:	46c0      	nop			; (mov r8, r8)
    91a4:	46bd      	mov	sp, r7
    91a6:	b002      	add	sp, #8
    91a8:	bd80      	pop	{r7, pc}
	...

000091ac <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    91ac:	b580      	push	{r7, lr}
    91ae:	b082      	sub	sp, #8
    91b0:	af00      	add	r7, sp, #0
    91b2:	0002      	movs	r2, r0
    91b4:	6039      	str	r1, [r7, #0]
    91b6:	1dfb      	adds	r3, r7, #7
    91b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    91ba:	1dfb      	adds	r3, r7, #7
    91bc:	781b      	ldrb	r3, [r3, #0]
    91be:	2b01      	cmp	r3, #1
    91c0:	d00a      	beq.n	91d8 <system_apb_clock_set_mask+0x2c>
    91c2:	2b02      	cmp	r3, #2
    91c4:	d00f      	beq.n	91e6 <system_apb_clock_set_mask+0x3a>
    91c6:	2b00      	cmp	r3, #0
    91c8:	d114      	bne.n	91f4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    91ca:	4b0e      	ldr	r3, [pc, #56]	; (9204 <system_apb_clock_set_mask+0x58>)
    91cc:	4a0d      	ldr	r2, [pc, #52]	; (9204 <system_apb_clock_set_mask+0x58>)
    91ce:	6991      	ldr	r1, [r2, #24]
    91d0:	683a      	ldr	r2, [r7, #0]
    91d2:	430a      	orrs	r2, r1
    91d4:	619a      	str	r2, [r3, #24]
			break;
    91d6:	e00f      	b.n	91f8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    91d8:	4b0a      	ldr	r3, [pc, #40]	; (9204 <system_apb_clock_set_mask+0x58>)
    91da:	4a0a      	ldr	r2, [pc, #40]	; (9204 <system_apb_clock_set_mask+0x58>)
    91dc:	69d1      	ldr	r1, [r2, #28]
    91de:	683a      	ldr	r2, [r7, #0]
    91e0:	430a      	orrs	r2, r1
    91e2:	61da      	str	r2, [r3, #28]
			break;
    91e4:	e008      	b.n	91f8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    91e6:	4b07      	ldr	r3, [pc, #28]	; (9204 <system_apb_clock_set_mask+0x58>)
    91e8:	4a06      	ldr	r2, [pc, #24]	; (9204 <system_apb_clock_set_mask+0x58>)
    91ea:	6a11      	ldr	r1, [r2, #32]
    91ec:	683a      	ldr	r2, [r7, #0]
    91ee:	430a      	orrs	r2, r1
    91f0:	621a      	str	r2, [r3, #32]
			break;
    91f2:	e001      	b.n	91f8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    91f4:	2317      	movs	r3, #23
    91f6:	e000      	b.n	91fa <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    91f8:	2300      	movs	r3, #0
}
    91fa:	0018      	movs	r0, r3
    91fc:	46bd      	mov	sp, r7
    91fe:	b002      	add	sp, #8
    9200:	bd80      	pop	{r7, pc}
    9202:	46c0      	nop			; (mov r8, r8)
    9204:	40000400 	.word	0x40000400

00009208 <system_pinmux_get_config_defaults>:
{
    9208:	b580      	push	{r7, lr}
    920a:	b082      	sub	sp, #8
    920c:	af00      	add	r7, sp, #0
    920e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9210:	687b      	ldr	r3, [r7, #4]
    9212:	2280      	movs	r2, #128	; 0x80
    9214:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9216:	687b      	ldr	r3, [r7, #4]
    9218:	2200      	movs	r2, #0
    921a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    921c:	687b      	ldr	r3, [r7, #4]
    921e:	2201      	movs	r2, #1
    9220:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    9222:	687b      	ldr	r3, [r7, #4]
    9224:	2200      	movs	r2, #0
    9226:	70da      	strb	r2, [r3, #3]
}
    9228:	46c0      	nop			; (mov r8, r8)
    922a:	46bd      	mov	sp, r7
    922c:	b002      	add	sp, #8
    922e:	bd80      	pop	{r7, pc}

00009230 <system_interrupt_enable>:
{
    9230:	b580      	push	{r7, lr}
    9232:	b082      	sub	sp, #8
    9234:	af00      	add	r7, sp, #0
    9236:	0002      	movs	r2, r0
    9238:	1dfb      	adds	r3, r7, #7
    923a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    923c:	4b06      	ldr	r3, [pc, #24]	; (9258 <system_interrupt_enable+0x28>)
    923e:	1dfa      	adds	r2, r7, #7
    9240:	7812      	ldrb	r2, [r2, #0]
    9242:	0011      	movs	r1, r2
    9244:	221f      	movs	r2, #31
    9246:	400a      	ands	r2, r1
    9248:	2101      	movs	r1, #1
    924a:	4091      	lsls	r1, r2
    924c:	000a      	movs	r2, r1
    924e:	601a      	str	r2, [r3, #0]
}
    9250:	46c0      	nop			; (mov r8, r8)
    9252:	46bd      	mov	sp, r7
    9254:	b002      	add	sp, #8
    9256:	bd80      	pop	{r7, pc}
    9258:	e000e100 	.word	0xe000e100

0000925c <_extint_get_eic_from_channel>:
{
    925c:	b580      	push	{r7, lr}
    925e:	b084      	sub	sp, #16
    9260:	af00      	add	r7, sp, #0
    9262:	0002      	movs	r2, r0
    9264:	1dfb      	adds	r3, r7, #7
    9266:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    9268:	230f      	movs	r3, #15
    926a:	18fb      	adds	r3, r7, r3
    926c:	1dfa      	adds	r2, r7, #7
    926e:	7812      	ldrb	r2, [r2, #0]
    9270:	0952      	lsrs	r2, r2, #5
    9272:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    9274:	230f      	movs	r3, #15
    9276:	18fb      	adds	r3, r7, r3
    9278:	781b      	ldrb	r3, [r3, #0]
    927a:	2b00      	cmp	r3, #0
    927c:	d10c      	bne.n	9298 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    927e:	4b09      	ldr	r3, [pc, #36]	; (92a4 <_extint_get_eic_from_channel+0x48>)
    9280:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    9282:	230f      	movs	r3, #15
    9284:	18fb      	adds	r3, r7, r3
    9286:	781b      	ldrb	r3, [r3, #0]
    9288:	009b      	lsls	r3, r3, #2
    928a:	2210      	movs	r2, #16
    928c:	4694      	mov	ip, r2
    928e:	44bc      	add	ip, r7
    9290:	4463      	add	r3, ip
    9292:	3b08      	subs	r3, #8
    9294:	681b      	ldr	r3, [r3, #0]
    9296:	e000      	b.n	929a <_extint_get_eic_from_channel+0x3e>
		return NULL;
    9298:	2300      	movs	r3, #0
}
    929a:	0018      	movs	r0, r3
    929c:	46bd      	mov	sp, r7
    929e:	b004      	add	sp, #16
    92a0:	bd80      	pop	{r7, pc}
    92a2:	46c0      	nop			; (mov r8, r8)
    92a4:	40001800 	.word	0x40001800

000092a8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    92a8:	b580      	push	{r7, lr}
    92aa:	b082      	sub	sp, #8
    92ac:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    92ae:	4b0f      	ldr	r3, [pc, #60]	; (92ec <extint_is_syncing+0x44>)
    92b0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    92b2:	2300      	movs	r3, #0
    92b4:	607b      	str	r3, [r7, #4]
    92b6:	e011      	b.n	92dc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    92b8:	687b      	ldr	r3, [r7, #4]
    92ba:	009b      	lsls	r3, r3, #2
    92bc:	2208      	movs	r2, #8
    92be:	4694      	mov	ip, r2
    92c0:	44bc      	add	ip, r7
    92c2:	4463      	add	r3, ip
    92c4:	3b08      	subs	r3, #8
    92c6:	681b      	ldr	r3, [r3, #0]
    92c8:	785b      	ldrb	r3, [r3, #1]
    92ca:	b2db      	uxtb	r3, r3
    92cc:	b25b      	sxtb	r3, r3
    92ce:	2b00      	cmp	r3, #0
    92d0:	da01      	bge.n	92d6 <extint_is_syncing+0x2e>
			return true;
    92d2:	2301      	movs	r3, #1
    92d4:	e006      	b.n	92e4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    92d6:	687b      	ldr	r3, [r7, #4]
    92d8:	3301      	adds	r3, #1
    92da:	607b      	str	r3, [r7, #4]
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	2b00      	cmp	r3, #0
    92e0:	d0ea      	beq.n	92b8 <extint_is_syncing+0x10>
		}
	}
	return false;
    92e2:	2300      	movs	r3, #0
}
    92e4:	0018      	movs	r0, r3
    92e6:	46bd      	mov	sp, r7
    92e8:	b002      	add	sp, #8
    92ea:	bd80      	pop	{r7, pc}
    92ec:	40001800 	.word	0x40001800

000092f0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    92f0:	b580      	push	{r7, lr}
    92f2:	b084      	sub	sp, #16
    92f4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    92f6:	4b2d      	ldr	r3, [pc, #180]	; (93ac <_system_extint_init+0xbc>)
    92f8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    92fa:	2140      	movs	r1, #64	; 0x40
    92fc:	2000      	movs	r0, #0
    92fe:	4b2c      	ldr	r3, [pc, #176]	; (93b0 <_system_extint_init+0xc0>)
    9300:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    9302:	003b      	movs	r3, r7
    9304:	0018      	movs	r0, r3
    9306:	4b2b      	ldr	r3, [pc, #172]	; (93b4 <_system_extint_init+0xc4>)
    9308:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    930a:	003b      	movs	r3, r7
    930c:	2200      	movs	r2, #0
    930e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    9310:	003b      	movs	r3, r7
    9312:	0019      	movs	r1, r3
    9314:	2005      	movs	r0, #5
    9316:	4b28      	ldr	r3, [pc, #160]	; (93b8 <_system_extint_init+0xc8>)
    9318:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    931a:	2005      	movs	r0, #5
    931c:	4b27      	ldr	r3, [pc, #156]	; (93bc <_system_extint_init+0xcc>)
    931e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9320:	2300      	movs	r3, #0
    9322:	60fb      	str	r3, [r7, #12]
    9324:	e018      	b.n	9358 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    9326:	68fb      	ldr	r3, [r7, #12]
    9328:	009b      	lsls	r3, r3, #2
    932a:	2210      	movs	r2, #16
    932c:	4694      	mov	ip, r2
    932e:	44bc      	add	ip, r7
    9330:	4463      	add	r3, ip
    9332:	3b0c      	subs	r3, #12
    9334:	681a      	ldr	r2, [r3, #0]
    9336:	68fb      	ldr	r3, [r7, #12]
    9338:	009b      	lsls	r3, r3, #2
    933a:	2110      	movs	r1, #16
    933c:	468c      	mov	ip, r1
    933e:	44bc      	add	ip, r7
    9340:	4463      	add	r3, ip
    9342:	3b0c      	subs	r3, #12
    9344:	681b      	ldr	r3, [r3, #0]
    9346:	781b      	ldrb	r3, [r3, #0]
    9348:	b2db      	uxtb	r3, r3
    934a:	2101      	movs	r1, #1
    934c:	430b      	orrs	r3, r1
    934e:	b2db      	uxtb	r3, r3
    9350:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9352:	68fb      	ldr	r3, [r7, #12]
    9354:	3301      	adds	r3, #1
    9356:	60fb      	str	r3, [r7, #12]
    9358:	68fb      	ldr	r3, [r7, #12]
    935a:	2b00      	cmp	r3, #0
    935c:	d0e3      	beq.n	9326 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    935e:	46c0      	nop			; (mov r8, r8)
    9360:	4b17      	ldr	r3, [pc, #92]	; (93c0 <_system_extint_init+0xd0>)
    9362:	4798      	blx	r3
    9364:	1e03      	subs	r3, r0, #0
    9366:	d1fb      	bne.n	9360 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    9368:	230b      	movs	r3, #11
    936a:	18fb      	adds	r3, r7, r3
    936c:	2200      	movs	r2, #0
    936e:	701a      	strb	r2, [r3, #0]
    9370:	e00d      	b.n	938e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    9372:	230b      	movs	r3, #11
    9374:	18fb      	adds	r3, r7, r3
    9376:	781a      	ldrb	r2, [r3, #0]
    9378:	4b12      	ldr	r3, [pc, #72]	; (93c4 <_system_extint_init+0xd4>)
    937a:	0092      	lsls	r2, r2, #2
    937c:	2100      	movs	r1, #0
    937e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    9380:	230b      	movs	r3, #11
    9382:	18fb      	adds	r3, r7, r3
    9384:	781a      	ldrb	r2, [r3, #0]
    9386:	230b      	movs	r3, #11
    9388:	18fb      	adds	r3, r7, r3
    938a:	3201      	adds	r2, #1
    938c:	701a      	strb	r2, [r3, #0]
    938e:	230b      	movs	r3, #11
    9390:	18fb      	adds	r3, r7, r3
    9392:	781b      	ldrb	r3, [r3, #0]
    9394:	2b0f      	cmp	r3, #15
    9396:	d9ec      	bls.n	9372 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    9398:	2004      	movs	r0, #4
    939a:	4b0b      	ldr	r3, [pc, #44]	; (93c8 <_system_extint_init+0xd8>)
    939c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    939e:	4b0b      	ldr	r3, [pc, #44]	; (93cc <_system_extint_init+0xdc>)
    93a0:	4798      	blx	r3
}
    93a2:	46c0      	nop			; (mov r8, r8)
    93a4:	46bd      	mov	sp, r7
    93a6:	b004      	add	sp, #16
    93a8:	bd80      	pop	{r7, pc}
    93aa:	46c0      	nop			; (mov r8, r8)
    93ac:	40001800 	.word	0x40001800
    93b0:	000091ad 	.word	0x000091ad
    93b4:	00009195 	.word	0x00009195
    93b8:	000116e1 	.word	0x000116e1
    93bc:	00011725 	.word	0x00011725
    93c0:	000092a9 	.word	0x000092a9
    93c4:	200006dc 	.word	0x200006dc
    93c8:	00009231 	.word	0x00009231
    93cc:	000093d1 	.word	0x000093d1

000093d0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    93d0:	b580      	push	{r7, lr}
    93d2:	b082      	sub	sp, #8
    93d4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    93d6:	4b15      	ldr	r3, [pc, #84]	; (942c <_extint_enable+0x5c>)
    93d8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    93da:	2300      	movs	r3, #0
    93dc:	607b      	str	r3, [r7, #4]
    93de:	e018      	b.n	9412 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    93e0:	687b      	ldr	r3, [r7, #4]
    93e2:	009b      	lsls	r3, r3, #2
    93e4:	2208      	movs	r2, #8
    93e6:	4694      	mov	ip, r2
    93e8:	44bc      	add	ip, r7
    93ea:	4463      	add	r3, ip
    93ec:	3b08      	subs	r3, #8
    93ee:	681a      	ldr	r2, [r3, #0]
    93f0:	687b      	ldr	r3, [r7, #4]
    93f2:	009b      	lsls	r3, r3, #2
    93f4:	2108      	movs	r1, #8
    93f6:	468c      	mov	ip, r1
    93f8:	44bc      	add	ip, r7
    93fa:	4463      	add	r3, ip
    93fc:	3b08      	subs	r3, #8
    93fe:	681b      	ldr	r3, [r3, #0]
    9400:	781b      	ldrb	r3, [r3, #0]
    9402:	b2db      	uxtb	r3, r3
    9404:	2102      	movs	r1, #2
    9406:	430b      	orrs	r3, r1
    9408:	b2db      	uxtb	r3, r3
    940a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    940c:	687b      	ldr	r3, [r7, #4]
    940e:	3301      	adds	r3, #1
    9410:	607b      	str	r3, [r7, #4]
    9412:	687b      	ldr	r3, [r7, #4]
    9414:	2b00      	cmp	r3, #0
    9416:	d0e3      	beq.n	93e0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    9418:	46c0      	nop			; (mov r8, r8)
    941a:	4b05      	ldr	r3, [pc, #20]	; (9430 <_extint_enable+0x60>)
    941c:	4798      	blx	r3
    941e:	1e03      	subs	r3, r0, #0
    9420:	d1fb      	bne.n	941a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    9422:	46c0      	nop			; (mov r8, r8)
    9424:	46bd      	mov	sp, r7
    9426:	b002      	add	sp, #8
    9428:	bd80      	pop	{r7, pc}
    942a:	46c0      	nop			; (mov r8, r8)
    942c:	40001800 	.word	0x40001800
    9430:	000092a9 	.word	0x000092a9

00009434 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    9434:	b580      	push	{r7, lr}
    9436:	b082      	sub	sp, #8
    9438:	af00      	add	r7, sp, #0
    943a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    943c:	687b      	ldr	r3, [r7, #4]
    943e:	2200      	movs	r2, #0
    9440:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    9442:	687b      	ldr	r3, [r7, #4]
    9444:	2200      	movs	r2, #0
    9446:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    9448:	687b      	ldr	r3, [r7, #4]
    944a:	2201      	movs	r2, #1
    944c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    944e:	687b      	ldr	r3, [r7, #4]
    9450:	2201      	movs	r2, #1
    9452:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    9454:	687b      	ldr	r3, [r7, #4]
    9456:	2200      	movs	r2, #0
    9458:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    945a:	687b      	ldr	r3, [r7, #4]
    945c:	2202      	movs	r2, #2
    945e:	72da      	strb	r2, [r3, #11]
}
    9460:	46c0      	nop			; (mov r8, r8)
    9462:	46bd      	mov	sp, r7
    9464:	b002      	add	sp, #8
    9466:	bd80      	pop	{r7, pc}

00009468 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    9468:	b580      	push	{r7, lr}
    946a:	b086      	sub	sp, #24
    946c:	af00      	add	r7, sp, #0
    946e:	0002      	movs	r2, r0
    9470:	6039      	str	r1, [r7, #0]
    9472:	1dfb      	adds	r3, r7, #7
    9474:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    9476:	2308      	movs	r3, #8
    9478:	18fb      	adds	r3, r7, r3
    947a:	0018      	movs	r0, r3
    947c:	4b36      	ldr	r3, [pc, #216]	; (9558 <extint_chan_set_config+0xf0>)
    947e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    9480:	683b      	ldr	r3, [r7, #0]
    9482:	685b      	ldr	r3, [r3, #4]
    9484:	b2da      	uxtb	r2, r3
    9486:	2308      	movs	r3, #8
    9488:	18fb      	adds	r3, r7, r3
    948a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    948c:	2308      	movs	r3, #8
    948e:	18fb      	adds	r3, r7, r3
    9490:	2200      	movs	r2, #0
    9492:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    9494:	683b      	ldr	r3, [r7, #0]
    9496:	7a1a      	ldrb	r2, [r3, #8]
    9498:	2308      	movs	r3, #8
    949a:	18fb      	adds	r3, r7, r3
    949c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    949e:	683b      	ldr	r3, [r7, #0]
    94a0:	681b      	ldr	r3, [r3, #0]
    94a2:	b2db      	uxtb	r3, r3
    94a4:	2208      	movs	r2, #8
    94a6:	18ba      	adds	r2, r7, r2
    94a8:	0011      	movs	r1, r2
    94aa:	0018      	movs	r0, r3
    94ac:	4b2b      	ldr	r3, [pc, #172]	; (955c <extint_chan_set_config+0xf4>)
    94ae:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    94b0:	1dfb      	adds	r3, r7, #7
    94b2:	781b      	ldrb	r3, [r3, #0]
    94b4:	0018      	movs	r0, r3
    94b6:	4b2a      	ldr	r3, [pc, #168]	; (9560 <extint_chan_set_config+0xf8>)
    94b8:	4798      	blx	r3
    94ba:	0003      	movs	r3, r0
    94bc:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    94be:	1dfb      	adds	r3, r7, #7
    94c0:	781b      	ldrb	r3, [r3, #0]
    94c2:	2207      	movs	r2, #7
    94c4:	4013      	ands	r3, r2
    94c6:	009b      	lsls	r3, r3, #2
    94c8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    94ca:	683b      	ldr	r3, [r7, #0]
    94cc:	7adb      	ldrb	r3, [r3, #11]
    94ce:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    94d0:	683b      	ldr	r3, [r7, #0]
    94d2:	7a9b      	ldrb	r3, [r3, #10]
    94d4:	2b00      	cmp	r3, #0
    94d6:	d003      	beq.n	94e0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    94d8:	697b      	ldr	r3, [r7, #20]
    94da:	2208      	movs	r2, #8
    94dc:	4313      	orrs	r3, r2
    94de:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    94e0:	1dfb      	adds	r3, r7, #7
    94e2:	781b      	ldrb	r3, [r3, #0]
    94e4:	08db      	lsrs	r3, r3, #3
    94e6:	b2db      	uxtb	r3, r3
    94e8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    94ea:	1dfb      	adds	r3, r7, #7
    94ec:	781b      	ldrb	r3, [r3, #0]
    94ee:	08db      	lsrs	r3, r3, #3
    94f0:	b2db      	uxtb	r3, r3
    94f2:	001a      	movs	r2, r3
    94f4:	693b      	ldr	r3, [r7, #16]
    94f6:	3206      	adds	r2, #6
    94f8:	0092      	lsls	r2, r2, #2
    94fa:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    94fc:	210f      	movs	r1, #15
    94fe:	68fa      	ldr	r2, [r7, #12]
    9500:	4091      	lsls	r1, r2
    9502:	000a      	movs	r2, r1
    9504:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    9506:	401a      	ands	r2, r3
			(new_config << config_pos);
    9508:	6979      	ldr	r1, [r7, #20]
    950a:	68fb      	ldr	r3, [r7, #12]
    950c:	4099      	lsls	r1, r3
    950e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    9510:	431a      	orrs	r2, r3
    9512:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    9514:	693b      	ldr	r3, [r7, #16]
    9516:	1d82      	adds	r2, r0, #6
    9518:	0092      	lsls	r2, r2, #2
    951a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    951c:	683b      	ldr	r3, [r7, #0]
    951e:	7a5b      	ldrb	r3, [r3, #9]
    9520:	2b00      	cmp	r3, #0
    9522:	d00a      	beq.n	953a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    9524:	693b      	ldr	r3, [r7, #16]
    9526:	695a      	ldr	r2, [r3, #20]
    9528:	1dfb      	adds	r3, r7, #7
    952a:	781b      	ldrb	r3, [r3, #0]
    952c:	2101      	movs	r1, #1
    952e:	4099      	lsls	r1, r3
    9530:	000b      	movs	r3, r1
    9532:	431a      	orrs	r2, r3
    9534:	693b      	ldr	r3, [r7, #16]
    9536:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    9538:	e00a      	b.n	9550 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    953a:	693b      	ldr	r3, [r7, #16]
    953c:	695b      	ldr	r3, [r3, #20]
    953e:	1dfa      	adds	r2, r7, #7
    9540:	7812      	ldrb	r2, [r2, #0]
    9542:	2101      	movs	r1, #1
    9544:	4091      	lsls	r1, r2
    9546:	000a      	movs	r2, r1
    9548:	43d2      	mvns	r2, r2
    954a:	401a      	ands	r2, r3
    954c:	693b      	ldr	r3, [r7, #16]
    954e:	615a      	str	r2, [r3, #20]
}
    9550:	46c0      	nop			; (mov r8, r8)
    9552:	46bd      	mov	sp, r7
    9554:	b006      	add	sp, #24
    9556:	bd80      	pop	{r7, pc}
    9558:	00009209 	.word	0x00009209
    955c:	000119cd 	.word	0x000119cd
    9560:	0000925d 	.word	0x0000925d

00009564 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    9564:	b580      	push	{r7, lr}
    9566:	b082      	sub	sp, #8
    9568:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    956a:	4b07      	ldr	r3, [pc, #28]	; (9588 <nvm_is_ready+0x24>)
    956c:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    956e:	687b      	ldr	r3, [r7, #4]
    9570:	7d1b      	ldrb	r3, [r3, #20]
    9572:	b2db      	uxtb	r3, r3
    9574:	001a      	movs	r2, r3
    9576:	2301      	movs	r3, #1
    9578:	4013      	ands	r3, r2
    957a:	1e5a      	subs	r2, r3, #1
    957c:	4193      	sbcs	r3, r2
    957e:	b2db      	uxtb	r3, r3
}
    9580:	0018      	movs	r0, r3
    9582:	46bd      	mov	sp, r7
    9584:	b002      	add	sp, #8
    9586:	bd80      	pop	{r7, pc}
    9588:	41004000 	.word	0x41004000

0000958c <system_apb_clock_set_mask>:
{
    958c:	b580      	push	{r7, lr}
    958e:	b082      	sub	sp, #8
    9590:	af00      	add	r7, sp, #0
    9592:	0002      	movs	r2, r0
    9594:	6039      	str	r1, [r7, #0]
    9596:	1dfb      	adds	r3, r7, #7
    9598:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    959a:	1dfb      	adds	r3, r7, #7
    959c:	781b      	ldrb	r3, [r3, #0]
    959e:	2b01      	cmp	r3, #1
    95a0:	d00a      	beq.n	95b8 <system_apb_clock_set_mask+0x2c>
    95a2:	2b02      	cmp	r3, #2
    95a4:	d00f      	beq.n	95c6 <system_apb_clock_set_mask+0x3a>
    95a6:	2b00      	cmp	r3, #0
    95a8:	d114      	bne.n	95d4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    95aa:	4b0e      	ldr	r3, [pc, #56]	; (95e4 <system_apb_clock_set_mask+0x58>)
    95ac:	4a0d      	ldr	r2, [pc, #52]	; (95e4 <system_apb_clock_set_mask+0x58>)
    95ae:	6991      	ldr	r1, [r2, #24]
    95b0:	683a      	ldr	r2, [r7, #0]
    95b2:	430a      	orrs	r2, r1
    95b4:	619a      	str	r2, [r3, #24]
			break;
    95b6:	e00f      	b.n	95d8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    95b8:	4b0a      	ldr	r3, [pc, #40]	; (95e4 <system_apb_clock_set_mask+0x58>)
    95ba:	4a0a      	ldr	r2, [pc, #40]	; (95e4 <system_apb_clock_set_mask+0x58>)
    95bc:	69d1      	ldr	r1, [r2, #28]
    95be:	683a      	ldr	r2, [r7, #0]
    95c0:	430a      	orrs	r2, r1
    95c2:	61da      	str	r2, [r3, #28]
			break;
    95c4:	e008      	b.n	95d8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    95c6:	4b07      	ldr	r3, [pc, #28]	; (95e4 <system_apb_clock_set_mask+0x58>)
    95c8:	4a06      	ldr	r2, [pc, #24]	; (95e4 <system_apb_clock_set_mask+0x58>)
    95ca:	6a11      	ldr	r1, [r2, #32]
    95cc:	683a      	ldr	r2, [r7, #0]
    95ce:	430a      	orrs	r2, r1
    95d0:	621a      	str	r2, [r3, #32]
			break;
    95d2:	e001      	b.n	95d8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    95d4:	2317      	movs	r3, #23
    95d6:	e000      	b.n	95da <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    95d8:	2300      	movs	r3, #0
}
    95da:	0018      	movs	r0, r3
    95dc:	46bd      	mov	sp, r7
    95de:	b002      	add	sp, #8
    95e0:	bd80      	pop	{r7, pc}
    95e2:	46c0      	nop			; (mov r8, r8)
    95e4:	40000400 	.word	0x40000400

000095e8 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    95e8:	b580      	push	{r7, lr}
    95ea:	b084      	sub	sp, #16
    95ec:	af00      	add	r7, sp, #0
    95ee:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    95f0:	4b2f      	ldr	r3, [pc, #188]	; (96b0 <nvm_set_config+0xc8>)
    95f2:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    95f4:	2104      	movs	r1, #4
    95f6:	2001      	movs	r0, #1
    95f8:	4b2e      	ldr	r3, [pc, #184]	; (96b4 <nvm_set_config+0xcc>)
    95fa:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    95fc:	68fb      	ldr	r3, [r7, #12]
    95fe:	2220      	movs	r2, #32
    9600:	32ff      	adds	r2, #255	; 0xff
    9602:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    9604:	4b2c      	ldr	r3, [pc, #176]	; (96b8 <nvm_set_config+0xd0>)
    9606:	4798      	blx	r3
    9608:	0003      	movs	r3, r0
    960a:	001a      	movs	r2, r3
    960c:	2301      	movs	r3, #1
    960e:	4053      	eors	r3, r2
    9610:	b2db      	uxtb	r3, r3
    9612:	2b00      	cmp	r3, #0
    9614:	d001      	beq.n	961a <nvm_set_config+0x32>
		return STATUS_BUSY;
    9616:	2305      	movs	r3, #5
    9618:	e045      	b.n	96a6 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    961a:	687b      	ldr	r3, [r7, #4]
    961c:	781b      	ldrb	r3, [r3, #0]
    961e:	021b      	lsls	r3, r3, #8
    9620:	001a      	movs	r2, r3
    9622:	23c0      	movs	r3, #192	; 0xc0
    9624:	009b      	lsls	r3, r3, #2
    9626:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    9628:	687b      	ldr	r3, [r7, #4]
    962a:	785b      	ldrb	r3, [r3, #1]
    962c:	01db      	lsls	r3, r3, #7
    962e:	0019      	movs	r1, r3
    9630:	23ff      	movs	r3, #255	; 0xff
    9632:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    9634:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    9636:	687b      	ldr	r3, [r7, #4]
    9638:	789b      	ldrb	r3, [r3, #2]
    963a:	005b      	lsls	r3, r3, #1
    963c:	0019      	movs	r1, r3
    963e:	231e      	movs	r3, #30
    9640:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    9642:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    9644:	687b      	ldr	r3, [r7, #4]
    9646:	78db      	ldrb	r3, [r3, #3]
    9648:	049b      	lsls	r3, r3, #18
    964a:	0019      	movs	r1, r3
    964c:	2380      	movs	r3, #128	; 0x80
    964e:	02db      	lsls	r3, r3, #11
    9650:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    9652:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    9654:	687b      	ldr	r3, [r7, #4]
    9656:	791b      	ldrb	r3, [r3, #4]
    9658:	041b      	lsls	r3, r3, #16
    965a:	0019      	movs	r1, r3
    965c:	23c0      	movs	r3, #192	; 0xc0
    965e:	029b      	lsls	r3, r3, #10
    9660:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    9662:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    9664:	68fb      	ldr	r3, [r7, #12]
    9666:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    9668:	68fb      	ldr	r3, [r7, #12]
    966a:	689b      	ldr	r3, [r3, #8]
    966c:	035b      	lsls	r3, r3, #13
    966e:	0f5b      	lsrs	r3, r3, #29
    9670:	b2db      	uxtb	r3, r3
    9672:	001a      	movs	r2, r3
    9674:	2308      	movs	r3, #8
    9676:	4093      	lsls	r3, r2
    9678:	b29a      	uxth	r2, r3
    967a:	4b10      	ldr	r3, [pc, #64]	; (96bc <nvm_set_config+0xd4>)
    967c:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    967e:	68fb      	ldr	r3, [r7, #12]
    9680:	689b      	ldr	r3, [r3, #8]
    9682:	b29a      	uxth	r2, r3
    9684:	4b0d      	ldr	r3, [pc, #52]	; (96bc <nvm_set_config+0xd4>)
    9686:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    9688:	687b      	ldr	r3, [r7, #4]
    968a:	785a      	ldrb	r2, [r3, #1]
    968c:	4b0b      	ldr	r3, [pc, #44]	; (96bc <nvm_set_config+0xd4>)
    968e:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    9690:	68fb      	ldr	r3, [r7, #12]
    9692:	8b1b      	ldrh	r3, [r3, #24]
    9694:	b29b      	uxth	r3, r3
    9696:	001a      	movs	r2, r3
    9698:	2380      	movs	r3, #128	; 0x80
    969a:	005b      	lsls	r3, r3, #1
    969c:	4013      	ands	r3, r2
    969e:	d001      	beq.n	96a4 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    96a0:	2310      	movs	r3, #16
    96a2:	e000      	b.n	96a6 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    96a4:	2300      	movs	r3, #0
}
    96a6:	0018      	movs	r0, r3
    96a8:	46bd      	mov	sp, r7
    96aa:	b004      	add	sp, #16
    96ac:	bd80      	pop	{r7, pc}
    96ae:	46c0      	nop			; (mov r8, r8)
    96b0:	41004000 	.word	0x41004000
    96b4:	0000958d 	.word	0x0000958d
    96b8:	00009565 	.word	0x00009565
    96bc:	20000234 	.word	0x20000234

000096c0 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    96c0:	b580      	push	{r7, lr}
    96c2:	b086      	sub	sp, #24
    96c4:	af00      	add	r7, sp, #0
    96c6:	60b9      	str	r1, [r7, #8]
    96c8:	607a      	str	r2, [r7, #4]
    96ca:	230f      	movs	r3, #15
    96cc:	18fb      	adds	r3, r7, r3
    96ce:	1c02      	adds	r2, r0, #0
    96d0:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    96d2:	4b3a      	ldr	r3, [pc, #232]	; (97bc <nvm_execute_command+0xfc>)
    96d4:	881b      	ldrh	r3, [r3, #0]
    96d6:	001a      	movs	r2, r3
    96d8:	4b38      	ldr	r3, [pc, #224]	; (97bc <nvm_execute_command+0xfc>)
    96da:	885b      	ldrh	r3, [r3, #2]
    96dc:	435a      	muls	r2, r3
    96de:	68bb      	ldr	r3, [r7, #8]
    96e0:	429a      	cmp	r2, r3
    96e2:	d209      	bcs.n	96f8 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    96e4:	68bb      	ldr	r3, [r7, #8]
    96e6:	4a36      	ldr	r2, [pc, #216]	; (97c0 <nvm_execute_command+0x100>)
    96e8:	4293      	cmp	r3, r2
    96ea:	d903      	bls.n	96f4 <nvm_execute_command+0x34>
    96ec:	68bb      	ldr	r3, [r7, #8]
    96ee:	4a35      	ldr	r2, [pc, #212]	; (97c4 <nvm_execute_command+0x104>)
    96f0:	4293      	cmp	r3, r2
    96f2:	d901      	bls.n	96f8 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    96f4:	2318      	movs	r3, #24
    96f6:	e05c      	b.n	97b2 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    96f8:	4b33      	ldr	r3, [pc, #204]	; (97c8 <nvm_execute_command+0x108>)
    96fa:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    96fc:	697b      	ldr	r3, [r7, #20]
    96fe:	685b      	ldr	r3, [r3, #4]
    9700:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    9702:	693b      	ldr	r3, [r7, #16]
    9704:	2280      	movs	r2, #128	; 0x80
    9706:	02d2      	lsls	r2, r2, #11
    9708:	431a      	orrs	r2, r3
    970a:	697b      	ldr	r3, [r7, #20]
    970c:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    970e:	697b      	ldr	r3, [r7, #20]
    9710:	2220      	movs	r2, #32
    9712:	32ff      	adds	r2, #255	; 0xff
    9714:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    9716:	4b2d      	ldr	r3, [pc, #180]	; (97cc <nvm_execute_command+0x10c>)
    9718:	4798      	blx	r3
    971a:	0003      	movs	r3, r0
    971c:	001a      	movs	r2, r3
    971e:	2301      	movs	r3, #1
    9720:	4053      	eors	r3, r2
    9722:	b2db      	uxtb	r3, r3
    9724:	2b00      	cmp	r3, #0
    9726:	d004      	beq.n	9732 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    9728:	697b      	ldr	r3, [r7, #20]
    972a:	693a      	ldr	r2, [r7, #16]
    972c:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    972e:	2305      	movs	r3, #5
    9730:	e03f      	b.n	97b2 <nvm_execute_command+0xf2>
	}

	switch (command) {
    9732:	230f      	movs	r3, #15
    9734:	18fb      	adds	r3, r7, r3
    9736:	781b      	ldrb	r3, [r3, #0]
    9738:	2b45      	cmp	r3, #69	; 0x45
    973a:	d81d      	bhi.n	9778 <nvm_execute_command+0xb8>
    973c:	009a      	lsls	r2, r3, #2
    973e:	4b24      	ldr	r3, [pc, #144]	; (97d0 <nvm_execute_command+0x110>)
    9740:	18d3      	adds	r3, r2, r3
    9742:	681b      	ldr	r3, [r3, #0]
    9744:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    9746:	697b      	ldr	r3, [r7, #20]
    9748:	8b1b      	ldrh	r3, [r3, #24]
    974a:	b29b      	uxth	r3, r3
    974c:	001a      	movs	r2, r3
    974e:	2380      	movs	r3, #128	; 0x80
    9750:	005b      	lsls	r3, r3, #1
    9752:	4013      	ands	r3, r2
    9754:	d004      	beq.n	9760 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    9756:	697b      	ldr	r3, [r7, #20]
    9758:	693a      	ldr	r2, [r7, #16]
    975a:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    975c:	2310      	movs	r3, #16
    975e:	e028      	b.n	97b2 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    9760:	68bb      	ldr	r3, [r7, #8]
    9762:	089b      	lsrs	r3, r3, #2
    9764:	005a      	lsls	r2, r3, #1
    9766:	697b      	ldr	r3, [r7, #20]
    9768:	61da      	str	r2, [r3, #28]
			break;
    976a:	e00b      	b.n	9784 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    976c:	68bb      	ldr	r3, [r7, #8]
    976e:	089b      	lsrs	r3, r3, #2
    9770:	005a      	lsls	r2, r3, #1
    9772:	697b      	ldr	r3, [r7, #20]
    9774:	61da      	str	r2, [r3, #28]
			break;
    9776:	e005      	b.n	9784 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    9778:	697b      	ldr	r3, [r7, #20]
    977a:	693a      	ldr	r2, [r7, #16]
    977c:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    977e:	2317      	movs	r3, #23
    9780:	e017      	b.n	97b2 <nvm_execute_command+0xf2>
			break;
    9782:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    9784:	230f      	movs	r3, #15
    9786:	18fb      	adds	r3, r7, r3
    9788:	781b      	ldrb	r3, [r3, #0]
    978a:	b29b      	uxth	r3, r3
    978c:	4a11      	ldr	r2, [pc, #68]	; (97d4 <nvm_execute_command+0x114>)
    978e:	4313      	orrs	r3, r2
    9790:	b29a      	uxth	r2, r3
    9792:	697b      	ldr	r3, [r7, #20]
    9794:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    9796:	46c0      	nop			; (mov r8, r8)
    9798:	4b0c      	ldr	r3, [pc, #48]	; (97cc <nvm_execute_command+0x10c>)
    979a:	4798      	blx	r3
    979c:	0003      	movs	r3, r0
    979e:	001a      	movs	r2, r3
    97a0:	2301      	movs	r3, #1
    97a2:	4053      	eors	r3, r2
    97a4:	b2db      	uxtb	r3, r3
    97a6:	2b00      	cmp	r3, #0
    97a8:	d1f6      	bne.n	9798 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    97aa:	697b      	ldr	r3, [r7, #20]
    97ac:	693a      	ldr	r2, [r7, #16]
    97ae:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    97b0:	2300      	movs	r3, #0
}
    97b2:	0018      	movs	r0, r3
    97b4:	46bd      	mov	sp, r7
    97b6:	b006      	add	sp, #24
    97b8:	bd80      	pop	{r7, pc}
    97ba:	46c0      	nop			; (mov r8, r8)
    97bc:	20000234 	.word	0x20000234
    97c0:	00803fff 	.word	0x00803fff
    97c4:	00806000 	.word	0x00806000
    97c8:	41004000 	.word	0x41004000
    97cc:	00009565 	.word	0x00009565
    97d0:	0001a50c 	.word	0x0001a50c
    97d4:	ffffa500 	.word	0xffffa500

000097d8 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    97d8:	b580      	push	{r7, lr}
    97da:	b088      	sub	sp, #32
    97dc:	af00      	add	r7, sp, #0
    97de:	60f8      	str	r0, [r7, #12]
    97e0:	60b9      	str	r1, [r7, #8]
    97e2:	1dbb      	adds	r3, r7, #6
    97e4:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    97e6:	4b4a      	ldr	r3, [pc, #296]	; (9910 <nvm_write_buffer+0x138>)
    97e8:	881b      	ldrh	r3, [r3, #0]
    97ea:	001a      	movs	r2, r3
    97ec:	4b48      	ldr	r3, [pc, #288]	; (9910 <nvm_write_buffer+0x138>)
    97ee:	885b      	ldrh	r3, [r3, #2]
    97f0:	435a      	muls	r2, r3
	if (destination_address >
    97f2:	68fb      	ldr	r3, [r7, #12]
    97f4:	429a      	cmp	r2, r3
    97f6:	d201      	bcs.n	97fc <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    97f8:	2318      	movs	r3, #24
    97fa:	e084      	b.n	9906 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    97fc:	4b44      	ldr	r3, [pc, #272]	; (9910 <nvm_write_buffer+0x138>)
    97fe:	881b      	ldrh	r3, [r3, #0]
    9800:	3b01      	subs	r3, #1
    9802:	001a      	movs	r2, r3
    9804:	68fb      	ldr	r3, [r7, #12]
    9806:	4013      	ands	r3, r2
    9808:	d001      	beq.n	980e <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    980a:	2318      	movs	r3, #24
    980c:	e07b      	b.n	9906 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    980e:	4b40      	ldr	r3, [pc, #256]	; (9910 <nvm_write_buffer+0x138>)
    9810:	881b      	ldrh	r3, [r3, #0]
    9812:	1dba      	adds	r2, r7, #6
    9814:	8812      	ldrh	r2, [r2, #0]
    9816:	429a      	cmp	r2, r3
    9818:	d901      	bls.n	981e <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    981a:	2317      	movs	r3, #23
    981c:	e073      	b.n	9906 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    981e:	4b3d      	ldr	r3, [pc, #244]	; (9914 <nvm_write_buffer+0x13c>)
    9820:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    9822:	4b3d      	ldr	r3, [pc, #244]	; (9918 <nvm_write_buffer+0x140>)
    9824:	4798      	blx	r3
    9826:	0003      	movs	r3, r0
    9828:	001a      	movs	r2, r3
    982a:	2301      	movs	r3, #1
    982c:	4053      	eors	r3, r2
    982e:	b2db      	uxtb	r3, r3
    9830:	2b00      	cmp	r3, #0
    9832:	d001      	beq.n	9838 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    9834:	2305      	movs	r3, #5
    9836:	e066      	b.n	9906 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    9838:	697b      	ldr	r3, [r7, #20]
    983a:	4a38      	ldr	r2, [pc, #224]	; (991c <nvm_write_buffer+0x144>)
    983c:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    983e:	46c0      	nop			; (mov r8, r8)
    9840:	4b35      	ldr	r3, [pc, #212]	; (9918 <nvm_write_buffer+0x140>)
    9842:	4798      	blx	r3
    9844:	0003      	movs	r3, r0
    9846:	001a      	movs	r2, r3
    9848:	2301      	movs	r3, #1
    984a:	4053      	eors	r3, r2
    984c:	b2db      	uxtb	r3, r3
    984e:	2b00      	cmp	r3, #0
    9850:	d1f6      	bne.n	9840 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9852:	697b      	ldr	r3, [r7, #20]
    9854:	2220      	movs	r2, #32
    9856:	32ff      	adds	r2, #255	; 0xff
    9858:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    985a:	68fb      	ldr	r3, [r7, #12]
    985c:	085b      	lsrs	r3, r3, #1
    985e:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    9860:	231a      	movs	r3, #26
    9862:	18fb      	adds	r3, r7, r3
    9864:	2200      	movs	r2, #0
    9866:	801a      	strh	r2, [r3, #0]
    9868:	e032      	b.n	98d0 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    986a:	231a      	movs	r3, #26
    986c:	18fb      	adds	r3, r7, r3
    986e:	881b      	ldrh	r3, [r3, #0]
    9870:	68ba      	ldr	r2, [r7, #8]
    9872:	18d3      	adds	r3, r2, r3
    9874:	781a      	ldrb	r2, [r3, #0]
    9876:	2318      	movs	r3, #24
    9878:	18fb      	adds	r3, r7, r3
    987a:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    987c:	231a      	movs	r3, #26
    987e:	18fb      	adds	r3, r7, r3
    9880:	881a      	ldrh	r2, [r3, #0]
    9882:	1dbb      	adds	r3, r7, #6
    9884:	881b      	ldrh	r3, [r3, #0]
    9886:	3b01      	subs	r3, #1
    9888:	429a      	cmp	r2, r3
    988a:	da11      	bge.n	98b0 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    988c:	231a      	movs	r3, #26
    988e:	18fb      	adds	r3, r7, r3
    9890:	881b      	ldrh	r3, [r3, #0]
    9892:	3301      	adds	r3, #1
    9894:	68ba      	ldr	r2, [r7, #8]
    9896:	18d3      	adds	r3, r2, r3
    9898:	781b      	ldrb	r3, [r3, #0]
    989a:	021b      	lsls	r3, r3, #8
    989c:	b21a      	sxth	r2, r3
    989e:	2318      	movs	r3, #24
    98a0:	18fb      	adds	r3, r7, r3
    98a2:	2100      	movs	r1, #0
    98a4:	5e5b      	ldrsh	r3, [r3, r1]
    98a6:	4313      	orrs	r3, r2
    98a8:	b21a      	sxth	r2, r3
    98aa:	2318      	movs	r3, #24
    98ac:	18fb      	adds	r3, r7, r3
    98ae:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    98b0:	69fb      	ldr	r3, [r7, #28]
    98b2:	1c5a      	adds	r2, r3, #1
    98b4:	61fa      	str	r2, [r7, #28]
    98b6:	005b      	lsls	r3, r3, #1
    98b8:	001a      	movs	r2, r3
    98ba:	2318      	movs	r3, #24
    98bc:	18fb      	adds	r3, r7, r3
    98be:	881b      	ldrh	r3, [r3, #0]
    98c0:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    98c2:	231a      	movs	r3, #26
    98c4:	18fb      	adds	r3, r7, r3
    98c6:	221a      	movs	r2, #26
    98c8:	18ba      	adds	r2, r7, r2
    98ca:	8812      	ldrh	r2, [r2, #0]
    98cc:	3202      	adds	r2, #2
    98ce:	801a      	strh	r2, [r3, #0]
    98d0:	231a      	movs	r3, #26
    98d2:	18fa      	adds	r2, r7, r3
    98d4:	1dbb      	adds	r3, r7, #6
    98d6:	8812      	ldrh	r2, [r2, #0]
    98d8:	881b      	ldrh	r3, [r3, #0]
    98da:	429a      	cmp	r2, r3
    98dc:	d3c5      	bcc.n	986a <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    98de:	4b0c      	ldr	r3, [pc, #48]	; (9910 <nvm_write_buffer+0x138>)
    98e0:	791b      	ldrb	r3, [r3, #4]
    98e2:	2201      	movs	r2, #1
    98e4:	4053      	eors	r3, r2
    98e6:	b2db      	uxtb	r3, r3
    98e8:	2b00      	cmp	r3, #0
    98ea:	d00b      	beq.n	9904 <nvm_write_buffer+0x12c>
    98ec:	1dbb      	adds	r3, r7, #6
    98ee:	881b      	ldrh	r3, [r3, #0]
    98f0:	2b3f      	cmp	r3, #63	; 0x3f
    98f2:	d807      	bhi.n	9904 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    98f4:	68fb      	ldr	r3, [r7, #12]
    98f6:	2200      	movs	r2, #0
    98f8:	0019      	movs	r1, r3
    98fa:	2004      	movs	r0, #4
    98fc:	4b08      	ldr	r3, [pc, #32]	; (9920 <nvm_write_buffer+0x148>)
    98fe:	4798      	blx	r3
    9900:	0003      	movs	r3, r0
    9902:	e000      	b.n	9906 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    9904:	2300      	movs	r3, #0
}
    9906:	0018      	movs	r0, r3
    9908:	46bd      	mov	sp, r7
    990a:	b008      	add	sp, #32
    990c:	bd80      	pop	{r7, pc}
    990e:	46c0      	nop			; (mov r8, r8)
    9910:	20000234 	.word	0x20000234
    9914:	41004000 	.word	0x41004000
    9918:	00009565 	.word	0x00009565
    991c:	ffffa544 	.word	0xffffa544
    9920:	000096c1 	.word	0x000096c1

00009924 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    9924:	b580      	push	{r7, lr}
    9926:	b088      	sub	sp, #32
    9928:	af00      	add	r7, sp, #0
    992a:	60f8      	str	r0, [r7, #12]
    992c:	60b9      	str	r1, [r7, #8]
    992e:	1dbb      	adds	r3, r7, #6
    9930:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9932:	4b38      	ldr	r3, [pc, #224]	; (9a14 <nvm_read_buffer+0xf0>)
    9934:	881b      	ldrh	r3, [r3, #0]
    9936:	001a      	movs	r2, r3
    9938:	4b36      	ldr	r3, [pc, #216]	; (9a14 <nvm_read_buffer+0xf0>)
    993a:	885b      	ldrh	r3, [r3, #2]
    993c:	435a      	muls	r2, r3
	if (source_address >
    993e:	68fb      	ldr	r3, [r7, #12]
    9940:	429a      	cmp	r2, r3
    9942:	d201      	bcs.n	9948 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    9944:	2318      	movs	r3, #24
    9946:	e060      	b.n	9a0a <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    9948:	4b32      	ldr	r3, [pc, #200]	; (9a14 <nvm_read_buffer+0xf0>)
    994a:	881b      	ldrh	r3, [r3, #0]
    994c:	3b01      	subs	r3, #1
    994e:	001a      	movs	r2, r3
    9950:	68fb      	ldr	r3, [r7, #12]
    9952:	4013      	ands	r3, r2
    9954:	d001      	beq.n	995a <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    9956:	2318      	movs	r3, #24
    9958:	e057      	b.n	9a0a <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    995a:	4b2e      	ldr	r3, [pc, #184]	; (9a14 <nvm_read_buffer+0xf0>)
    995c:	881b      	ldrh	r3, [r3, #0]
    995e:	1dba      	adds	r2, r7, #6
    9960:	8812      	ldrh	r2, [r2, #0]
    9962:	429a      	cmp	r2, r3
    9964:	d901      	bls.n	996a <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    9966:	2317      	movs	r3, #23
    9968:	e04f      	b.n	9a0a <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    996a:	4b2b      	ldr	r3, [pc, #172]	; (9a18 <nvm_read_buffer+0xf4>)
    996c:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    996e:	4b2b      	ldr	r3, [pc, #172]	; (9a1c <nvm_read_buffer+0xf8>)
    9970:	4798      	blx	r3
    9972:	0003      	movs	r3, r0
    9974:	001a      	movs	r2, r3
    9976:	2301      	movs	r3, #1
    9978:	4053      	eors	r3, r2
    997a:	b2db      	uxtb	r3, r3
    997c:	2b00      	cmp	r3, #0
    997e:	d001      	beq.n	9984 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
    9980:	2305      	movs	r3, #5
    9982:	e042      	b.n	9a0a <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9984:	697b      	ldr	r3, [r7, #20]
    9986:	2220      	movs	r2, #32
    9988:	32ff      	adds	r2, #255	; 0xff
    998a:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
    998c:	68fb      	ldr	r3, [r7, #12]
    998e:	085b      	lsrs	r3, r3, #1
    9990:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    9992:	231a      	movs	r3, #26
    9994:	18fb      	adds	r3, r7, r3
    9996:	2200      	movs	r2, #0
    9998:	801a      	strh	r2, [r3, #0]
    999a:	e02e      	b.n	99fa <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
    999c:	69fb      	ldr	r3, [r7, #28]
    999e:	1c5a      	adds	r2, r3, #1
    99a0:	61fa      	str	r2, [r7, #28]
    99a2:	005b      	lsls	r3, r3, #1
    99a4:	001a      	movs	r2, r3
    99a6:	2312      	movs	r3, #18
    99a8:	18fb      	adds	r3, r7, r3
    99aa:	8812      	ldrh	r2, [r2, #0]
    99ac:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
    99ae:	231a      	movs	r3, #26
    99b0:	18fb      	adds	r3, r7, r3
    99b2:	881b      	ldrh	r3, [r3, #0]
    99b4:	68ba      	ldr	r2, [r7, #8]
    99b6:	18d3      	adds	r3, r2, r3
    99b8:	2212      	movs	r2, #18
    99ba:	18ba      	adds	r2, r7, r2
    99bc:	8812      	ldrh	r2, [r2, #0]
    99be:	b2d2      	uxtb	r2, r2
    99c0:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    99c2:	231a      	movs	r3, #26
    99c4:	18fb      	adds	r3, r7, r3
    99c6:	881a      	ldrh	r2, [r3, #0]
    99c8:	1dbb      	adds	r3, r7, #6
    99ca:	881b      	ldrh	r3, [r3, #0]
    99cc:	3b01      	subs	r3, #1
    99ce:	429a      	cmp	r2, r3
    99d0:	da0c      	bge.n	99ec <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
    99d2:	231a      	movs	r3, #26
    99d4:	18fb      	adds	r3, r7, r3
    99d6:	881b      	ldrh	r3, [r3, #0]
    99d8:	3301      	adds	r3, #1
    99da:	68ba      	ldr	r2, [r7, #8]
    99dc:	18d3      	adds	r3, r2, r3
    99de:	2212      	movs	r2, #18
    99e0:	18ba      	adds	r2, r7, r2
    99e2:	8812      	ldrh	r2, [r2, #0]
    99e4:	0a12      	lsrs	r2, r2, #8
    99e6:	b292      	uxth	r2, r2
    99e8:	b2d2      	uxtb	r2, r2
    99ea:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    99ec:	231a      	movs	r3, #26
    99ee:	18fb      	adds	r3, r7, r3
    99f0:	221a      	movs	r2, #26
    99f2:	18ba      	adds	r2, r7, r2
    99f4:	8812      	ldrh	r2, [r2, #0]
    99f6:	3202      	adds	r2, #2
    99f8:	801a      	strh	r2, [r3, #0]
    99fa:	231a      	movs	r3, #26
    99fc:	18fa      	adds	r2, r7, r3
    99fe:	1dbb      	adds	r3, r7, #6
    9a00:	8812      	ldrh	r2, [r2, #0]
    9a02:	881b      	ldrh	r3, [r3, #0]
    9a04:	429a      	cmp	r2, r3
    9a06:	d3c9      	bcc.n	999c <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
    9a08:	2300      	movs	r3, #0
}
    9a0a:	0018      	movs	r0, r3
    9a0c:	46bd      	mov	sp, r7
    9a0e:	b008      	add	sp, #32
    9a10:	bd80      	pop	{r7, pc}
    9a12:	46c0      	nop			; (mov r8, r8)
    9a14:	20000234 	.word	0x20000234
    9a18:	41004000 	.word	0x41004000
    9a1c:	00009565 	.word	0x00009565

00009a20 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    9a20:	b580      	push	{r7, lr}
    9a22:	b084      	sub	sp, #16
    9a24:	af00      	add	r7, sp, #0
    9a26:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9a28:	4b23      	ldr	r3, [pc, #140]	; (9ab8 <nvm_erase_row+0x98>)
    9a2a:	881b      	ldrh	r3, [r3, #0]
    9a2c:	001a      	movs	r2, r3
    9a2e:	4b22      	ldr	r3, [pc, #136]	; (9ab8 <nvm_erase_row+0x98>)
    9a30:	885b      	ldrh	r3, [r3, #2]
    9a32:	435a      	muls	r2, r3
	if (row_address >
    9a34:	687b      	ldr	r3, [r7, #4]
    9a36:	429a      	cmp	r2, r3
    9a38:	d201      	bcs.n	9a3e <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    9a3a:	2318      	movs	r3, #24
    9a3c:	e037      	b.n	9aae <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    9a3e:	4b1e      	ldr	r3, [pc, #120]	; (9ab8 <nvm_erase_row+0x98>)
    9a40:	881b      	ldrh	r3, [r3, #0]
    9a42:	009b      	lsls	r3, r3, #2
    9a44:	3b01      	subs	r3, #1
    9a46:	001a      	movs	r2, r3
    9a48:	687b      	ldr	r3, [r7, #4]
    9a4a:	4013      	ands	r3, r2
    9a4c:	d001      	beq.n	9a52 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    9a4e:	2318      	movs	r3, #24
    9a50:	e02d      	b.n	9aae <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    9a52:	4b1a      	ldr	r3, [pc, #104]	; (9abc <nvm_erase_row+0x9c>)
    9a54:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    9a56:	4b1a      	ldr	r3, [pc, #104]	; (9ac0 <nvm_erase_row+0xa0>)
    9a58:	4798      	blx	r3
    9a5a:	0003      	movs	r3, r0
    9a5c:	001a      	movs	r2, r3
    9a5e:	2301      	movs	r3, #1
    9a60:	4053      	eors	r3, r2
    9a62:	b2db      	uxtb	r3, r3
    9a64:	2b00      	cmp	r3, #0
    9a66:	d001      	beq.n	9a6c <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    9a68:	2305      	movs	r3, #5
    9a6a:	e020      	b.n	9aae <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9a6c:	68fb      	ldr	r3, [r7, #12]
    9a6e:	2220      	movs	r2, #32
    9a70:	32ff      	adds	r2, #255	; 0xff
    9a72:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    9a74:	687b      	ldr	r3, [r7, #4]
    9a76:	089b      	lsrs	r3, r3, #2
    9a78:	005a      	lsls	r2, r3, #1
    9a7a:	68fb      	ldr	r3, [r7, #12]
    9a7c:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    9a7e:	68fb      	ldr	r3, [r7, #12]
    9a80:	4a10      	ldr	r2, [pc, #64]	; (9ac4 <nvm_erase_row+0xa4>)
    9a82:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    9a84:	46c0      	nop			; (mov r8, r8)
    9a86:	4b0e      	ldr	r3, [pc, #56]	; (9ac0 <nvm_erase_row+0xa0>)
    9a88:	4798      	blx	r3
    9a8a:	0003      	movs	r3, r0
    9a8c:	001a      	movs	r2, r3
    9a8e:	2301      	movs	r3, #1
    9a90:	4053      	eors	r3, r2
    9a92:	b2db      	uxtb	r3, r3
    9a94:	2b00      	cmp	r3, #0
    9a96:	d1f6      	bne.n	9a86 <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    9a98:	68fb      	ldr	r3, [r7, #12]
    9a9a:	8b1b      	ldrh	r3, [r3, #24]
    9a9c:	b29b      	uxth	r3, r3
    9a9e:	b2db      	uxtb	r3, r3
    9aa0:	001a      	movs	r2, r3
    9aa2:	231c      	movs	r3, #28
    9aa4:	4013      	ands	r3, r2
    9aa6:	d001      	beq.n	9aac <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
    9aa8:	2304      	movs	r3, #4
    9aaa:	e000      	b.n	9aae <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
    9aac:	2300      	movs	r3, #0
}
    9aae:	0018      	movs	r0, r3
    9ab0:	46bd      	mov	sp, r7
    9ab2:	b004      	add	sp, #16
    9ab4:	bd80      	pop	{r7, pc}
    9ab6:	46c0      	nop			; (mov r8, r8)
    9ab8:	20000234 	.word	0x20000234
    9abc:	41004000 	.word	0x41004000
    9ac0:	00009565 	.word	0x00009565
    9ac4:	ffffa502 	.word	0xffffa502

00009ac8 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
    9ac8:	b580      	push	{r7, lr}
    9aca:	b086      	sub	sp, #24
    9acc:	af00      	add	r7, sp, #0
    9ace:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    9ad0:	4b2a      	ldr	r3, [pc, #168]	; (9b7c <nvm_get_parameters+0xb4>)
    9ad2:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9ad4:	697b      	ldr	r3, [r7, #20]
    9ad6:	2220      	movs	r2, #32
    9ad8:	32ff      	adds	r2, #255	; 0xff
    9ada:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    9adc:	697b      	ldr	r3, [r7, #20]
    9ade:	689b      	ldr	r3, [r3, #8]
    9ae0:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    9ae2:	693b      	ldr	r3, [r7, #16]
    9ae4:	0c1b      	lsrs	r3, r3, #16
    9ae6:	2207      	movs	r2, #7
    9ae8:	4013      	ands	r3, r2
    9aea:	2208      	movs	r2, #8
    9aec:	409a      	lsls	r2, r3
    9aee:	0013      	movs	r3, r2
	parameters->page_size =
    9af0:	b2da      	uxtb	r2, r3
    9af2:	687b      	ldr	r3, [r7, #4]
    9af4:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    9af6:	693b      	ldr	r3, [r7, #16]
    9af8:	b29a      	uxth	r2, r3
    9afa:	687b      	ldr	r3, [r7, #4]
    9afc:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    9afe:	4b20      	ldr	r3, [pc, #128]	; (9b80 <nvm_get_parameters+0xb8>)
    9b00:	881b      	ldrh	r3, [r3, #0]
    9b02:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
    9b04:	091b      	lsrs	r3, r3, #4
    9b06:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
    9b08:	230e      	movs	r3, #14
    9b0a:	18fb      	adds	r3, r7, r3
    9b0c:	2107      	movs	r1, #7
    9b0e:	400a      	ands	r2, r1
    9b10:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    9b12:	230e      	movs	r3, #14
    9b14:	18fb      	adds	r3, r7, r3
    9b16:	881b      	ldrh	r3, [r3, #0]
    9b18:	2b07      	cmp	r3, #7
    9b1a:	d103      	bne.n	9b24 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
    9b1c:	687b      	ldr	r3, [r7, #4]
    9b1e:	2200      	movs	r2, #0
    9b20:	605a      	str	r2, [r3, #4]
    9b22:	e00a      	b.n	9b3a <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    9b24:	230e      	movs	r3, #14
    9b26:	18fb      	adds	r3, r7, r3
    9b28:	881b      	ldrh	r3, [r3, #0]
    9b2a:	2206      	movs	r2, #6
    9b2c:	1ad3      	subs	r3, r2, r3
    9b2e:	2204      	movs	r2, #4
    9b30:	409a      	lsls	r2, r3
    9b32:	0013      	movs	r3, r2
    9b34:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
    9b36:	687b      	ldr	r3, [r7, #4]
    9b38:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    9b3a:	4b11      	ldr	r3, [pc, #68]	; (9b80 <nvm_get_parameters+0xb8>)
    9b3c:	881b      	ldrh	r3, [r3, #0]
    9b3e:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
    9b40:	230c      	movs	r3, #12
    9b42:	18fb      	adds	r3, r7, r3
    9b44:	2107      	movs	r1, #7
    9b46:	400a      	ands	r2, r1
    9b48:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    9b4a:	230c      	movs	r3, #12
    9b4c:	18fb      	adds	r3, r7, r3
    9b4e:	881b      	ldrh	r3, [r3, #0]
    9b50:	2b07      	cmp	r3, #7
    9b52:	d103      	bne.n	9b5c <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
    9b54:	687b      	ldr	r3, [r7, #4]
    9b56:	2200      	movs	r2, #0
    9b58:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
    9b5a:	e00a      	b.n	9b72 <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    9b5c:	230c      	movs	r3, #12
    9b5e:	18fb      	adds	r3, r7, r3
    9b60:	881b      	ldrh	r3, [r3, #0]
    9b62:	2207      	movs	r2, #7
    9b64:	1ad3      	subs	r3, r2, r3
    9b66:	2204      	movs	r2, #4
    9b68:	409a      	lsls	r2, r3
    9b6a:	0013      	movs	r3, r2
    9b6c:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
    9b6e:	687b      	ldr	r3, [r7, #4]
    9b70:	609a      	str	r2, [r3, #8]
}
    9b72:	46c0      	nop			; (mov r8, r8)
    9b74:	46bd      	mov	sp, r7
    9b76:	b006      	add	sp, #24
    9b78:	bd80      	pop	{r7, pc}
    9b7a:	46c0      	nop			; (mov r8, r8)
    9b7c:	41004000 	.word	0x41004000
    9b80:	00804000 	.word	0x00804000

00009b84 <system_pinmux_get_config_defaults>:
{
    9b84:	b580      	push	{r7, lr}
    9b86:	b082      	sub	sp, #8
    9b88:	af00      	add	r7, sp, #0
    9b8a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9b8c:	687b      	ldr	r3, [r7, #4]
    9b8e:	2280      	movs	r2, #128	; 0x80
    9b90:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9b92:	687b      	ldr	r3, [r7, #4]
    9b94:	2200      	movs	r2, #0
    9b96:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9b98:	687b      	ldr	r3, [r7, #4]
    9b9a:	2201      	movs	r2, #1
    9b9c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    9b9e:	687b      	ldr	r3, [r7, #4]
    9ba0:	2200      	movs	r2, #0
    9ba2:	70da      	strb	r2, [r3, #3]
}
    9ba4:	46c0      	nop			; (mov r8, r8)
    9ba6:	46bd      	mov	sp, r7
    9ba8:	b002      	add	sp, #8
    9baa:	bd80      	pop	{r7, pc}

00009bac <system_pinmux_get_group_from_gpio_pin>:
{
    9bac:	b580      	push	{r7, lr}
    9bae:	b084      	sub	sp, #16
    9bb0:	af00      	add	r7, sp, #0
    9bb2:	0002      	movs	r2, r0
    9bb4:	1dfb      	adds	r3, r7, #7
    9bb6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9bb8:	230f      	movs	r3, #15
    9bba:	18fb      	adds	r3, r7, r3
    9bbc:	1dfa      	adds	r2, r7, #7
    9bbe:	7812      	ldrb	r2, [r2, #0]
    9bc0:	09d2      	lsrs	r2, r2, #7
    9bc2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    9bc4:	230e      	movs	r3, #14
    9bc6:	18fb      	adds	r3, r7, r3
    9bc8:	1dfa      	adds	r2, r7, #7
    9bca:	7812      	ldrb	r2, [r2, #0]
    9bcc:	0952      	lsrs	r2, r2, #5
    9bce:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9bd0:	4b0d      	ldr	r3, [pc, #52]	; (9c08 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    9bd2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    9bd4:	230f      	movs	r3, #15
    9bd6:	18fb      	adds	r3, r7, r3
    9bd8:	781b      	ldrb	r3, [r3, #0]
    9bda:	2b00      	cmp	r3, #0
    9bdc:	d10f      	bne.n	9bfe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    9bde:	230f      	movs	r3, #15
    9be0:	18fb      	adds	r3, r7, r3
    9be2:	781b      	ldrb	r3, [r3, #0]
    9be4:	009b      	lsls	r3, r3, #2
    9be6:	2210      	movs	r2, #16
    9be8:	4694      	mov	ip, r2
    9bea:	44bc      	add	ip, r7
    9bec:	4463      	add	r3, ip
    9bee:	3b08      	subs	r3, #8
    9bf0:	681a      	ldr	r2, [r3, #0]
    9bf2:	230e      	movs	r3, #14
    9bf4:	18fb      	adds	r3, r7, r3
    9bf6:	781b      	ldrb	r3, [r3, #0]
    9bf8:	01db      	lsls	r3, r3, #7
    9bfa:	18d3      	adds	r3, r2, r3
    9bfc:	e000      	b.n	9c00 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    9bfe:	2300      	movs	r3, #0
}
    9c00:	0018      	movs	r0, r3
    9c02:	46bd      	mov	sp, r7
    9c04:	b004      	add	sp, #16
    9c06:	bd80      	pop	{r7, pc}
    9c08:	41004400 	.word	0x41004400

00009c0c <port_get_group_from_gpio_pin>:
{
    9c0c:	b580      	push	{r7, lr}
    9c0e:	b082      	sub	sp, #8
    9c10:	af00      	add	r7, sp, #0
    9c12:	0002      	movs	r2, r0
    9c14:	1dfb      	adds	r3, r7, #7
    9c16:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    9c18:	1dfb      	adds	r3, r7, #7
    9c1a:	781b      	ldrb	r3, [r3, #0]
    9c1c:	0018      	movs	r0, r3
    9c1e:	4b03      	ldr	r3, [pc, #12]	; (9c2c <port_get_group_from_gpio_pin+0x20>)
    9c20:	4798      	blx	r3
    9c22:	0003      	movs	r3, r0
}
    9c24:	0018      	movs	r0, r3
    9c26:	46bd      	mov	sp, r7
    9c28:	b002      	add	sp, #8
    9c2a:	bd80      	pop	{r7, pc}
    9c2c:	00009bad 	.word	0x00009bad

00009c30 <port_pin_set_output_level>:
{
    9c30:	b580      	push	{r7, lr}
    9c32:	b084      	sub	sp, #16
    9c34:	af00      	add	r7, sp, #0
    9c36:	0002      	movs	r2, r0
    9c38:	1dfb      	adds	r3, r7, #7
    9c3a:	701a      	strb	r2, [r3, #0]
    9c3c:	1dbb      	adds	r3, r7, #6
    9c3e:	1c0a      	adds	r2, r1, #0
    9c40:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    9c42:	1dfb      	adds	r3, r7, #7
    9c44:	781b      	ldrb	r3, [r3, #0]
    9c46:	0018      	movs	r0, r3
    9c48:	4b0d      	ldr	r3, [pc, #52]	; (9c80 <port_pin_set_output_level+0x50>)
    9c4a:	4798      	blx	r3
    9c4c:	0003      	movs	r3, r0
    9c4e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9c50:	1dfb      	adds	r3, r7, #7
    9c52:	781b      	ldrb	r3, [r3, #0]
    9c54:	221f      	movs	r2, #31
    9c56:	4013      	ands	r3, r2
    9c58:	2201      	movs	r2, #1
    9c5a:	409a      	lsls	r2, r3
    9c5c:	0013      	movs	r3, r2
    9c5e:	60bb      	str	r3, [r7, #8]
	if (level) {
    9c60:	1dbb      	adds	r3, r7, #6
    9c62:	781b      	ldrb	r3, [r3, #0]
    9c64:	2b00      	cmp	r3, #0
    9c66:	d003      	beq.n	9c70 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    9c68:	68fb      	ldr	r3, [r7, #12]
    9c6a:	68ba      	ldr	r2, [r7, #8]
    9c6c:	619a      	str	r2, [r3, #24]
}
    9c6e:	e002      	b.n	9c76 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    9c70:	68fb      	ldr	r3, [r7, #12]
    9c72:	68ba      	ldr	r2, [r7, #8]
    9c74:	615a      	str	r2, [r3, #20]
}
    9c76:	46c0      	nop			; (mov r8, r8)
    9c78:	46bd      	mov	sp, r7
    9c7a:	b004      	add	sp, #16
    9c7c:	bd80      	pop	{r7, pc}
    9c7e:	46c0      	nop			; (mov r8, r8)
    9c80:	00009c0d 	.word	0x00009c0d

00009c84 <system_gclk_chan_get_config_defaults>:
{
    9c84:	b580      	push	{r7, lr}
    9c86:	b082      	sub	sp, #8
    9c88:	af00      	add	r7, sp, #0
    9c8a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    9c8c:	687b      	ldr	r3, [r7, #4]
    9c8e:	2200      	movs	r2, #0
    9c90:	701a      	strb	r2, [r3, #0]
}
    9c92:	46c0      	nop			; (mov r8, r8)
    9c94:	46bd      	mov	sp, r7
    9c96:	b002      	add	sp, #8
    9c98:	bd80      	pop	{r7, pc}
	...

00009c9c <system_apb_clock_set_mask>:
{
    9c9c:	b580      	push	{r7, lr}
    9c9e:	b082      	sub	sp, #8
    9ca0:	af00      	add	r7, sp, #0
    9ca2:	0002      	movs	r2, r0
    9ca4:	6039      	str	r1, [r7, #0]
    9ca6:	1dfb      	adds	r3, r7, #7
    9ca8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    9caa:	1dfb      	adds	r3, r7, #7
    9cac:	781b      	ldrb	r3, [r3, #0]
    9cae:	2b01      	cmp	r3, #1
    9cb0:	d00a      	beq.n	9cc8 <system_apb_clock_set_mask+0x2c>
    9cb2:	2b02      	cmp	r3, #2
    9cb4:	d00f      	beq.n	9cd6 <system_apb_clock_set_mask+0x3a>
    9cb6:	2b00      	cmp	r3, #0
    9cb8:	d114      	bne.n	9ce4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    9cba:	4b0e      	ldr	r3, [pc, #56]	; (9cf4 <system_apb_clock_set_mask+0x58>)
    9cbc:	4a0d      	ldr	r2, [pc, #52]	; (9cf4 <system_apb_clock_set_mask+0x58>)
    9cbe:	6991      	ldr	r1, [r2, #24]
    9cc0:	683a      	ldr	r2, [r7, #0]
    9cc2:	430a      	orrs	r2, r1
    9cc4:	619a      	str	r2, [r3, #24]
			break;
    9cc6:	e00f      	b.n	9ce8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    9cc8:	4b0a      	ldr	r3, [pc, #40]	; (9cf4 <system_apb_clock_set_mask+0x58>)
    9cca:	4a0a      	ldr	r2, [pc, #40]	; (9cf4 <system_apb_clock_set_mask+0x58>)
    9ccc:	69d1      	ldr	r1, [r2, #28]
    9cce:	683a      	ldr	r2, [r7, #0]
    9cd0:	430a      	orrs	r2, r1
    9cd2:	61da      	str	r2, [r3, #28]
			break;
    9cd4:	e008      	b.n	9ce8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    9cd6:	4b07      	ldr	r3, [pc, #28]	; (9cf4 <system_apb_clock_set_mask+0x58>)
    9cd8:	4a06      	ldr	r2, [pc, #24]	; (9cf4 <system_apb_clock_set_mask+0x58>)
    9cda:	6a11      	ldr	r1, [r2, #32]
    9cdc:	683a      	ldr	r2, [r7, #0]
    9cde:	430a      	orrs	r2, r1
    9ce0:	621a      	str	r2, [r3, #32]
			break;
    9ce2:	e001      	b.n	9ce8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    9ce4:	2317      	movs	r3, #23
    9ce6:	e000      	b.n	9cea <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    9ce8:	2300      	movs	r3, #0
}
    9cea:	0018      	movs	r0, r3
    9cec:	46bd      	mov	sp, r7
    9cee:	b002      	add	sp, #8
    9cf0:	bd80      	pop	{r7, pc}
    9cf2:	46c0      	nop			; (mov r8, r8)
    9cf4:	40000400 	.word	0x40000400

00009cf8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    9cf8:	b580      	push	{r7, lr}
    9cfa:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    9cfc:	4b05      	ldr	r3, [pc, #20]	; (9d14 <system_is_debugger_present+0x1c>)
    9cfe:	789b      	ldrb	r3, [r3, #2]
    9d00:	b2db      	uxtb	r3, r3
    9d02:	001a      	movs	r2, r3
    9d04:	2302      	movs	r3, #2
    9d06:	4013      	ands	r3, r2
    9d08:	1e5a      	subs	r2, r3, #1
    9d0a:	4193      	sbcs	r3, r2
    9d0c:	b2db      	uxtb	r3, r3
}
    9d0e:	0018      	movs	r0, r3
    9d10:	46bd      	mov	sp, r7
    9d12:	bd80      	pop	{r7, pc}
    9d14:	41002000 	.word	0x41002000

00009d18 <spi_is_write_complete>:
{
    9d18:	b580      	push	{r7, lr}
    9d1a:	b084      	sub	sp, #16
    9d1c:	af00      	add	r7, sp, #0
    9d1e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9d20:	687b      	ldr	r3, [r7, #4]
    9d22:	681b      	ldr	r3, [r3, #0]
    9d24:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    9d26:	68fb      	ldr	r3, [r7, #12]
    9d28:	7e1b      	ldrb	r3, [r3, #24]
    9d2a:	b2db      	uxtb	r3, r3
    9d2c:	001a      	movs	r2, r3
    9d2e:	2302      	movs	r3, #2
    9d30:	4013      	ands	r3, r2
    9d32:	1e5a      	subs	r2, r3, #1
    9d34:	4193      	sbcs	r3, r2
    9d36:	b2db      	uxtb	r3, r3
}
    9d38:	0018      	movs	r0, r3
    9d3a:	46bd      	mov	sp, r7
    9d3c:	b004      	add	sp, #16
    9d3e:	bd80      	pop	{r7, pc}

00009d40 <spi_is_ready_to_write>:
{
    9d40:	b580      	push	{r7, lr}
    9d42:	b084      	sub	sp, #16
    9d44:	af00      	add	r7, sp, #0
    9d46:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9d48:	687b      	ldr	r3, [r7, #4]
    9d4a:	681b      	ldr	r3, [r3, #0]
    9d4c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    9d4e:	68fb      	ldr	r3, [r7, #12]
    9d50:	7e1b      	ldrb	r3, [r3, #24]
    9d52:	b2db      	uxtb	r3, r3
    9d54:	001a      	movs	r2, r3
    9d56:	2301      	movs	r3, #1
    9d58:	4013      	ands	r3, r2
    9d5a:	1e5a      	subs	r2, r3, #1
    9d5c:	4193      	sbcs	r3, r2
    9d5e:	b2db      	uxtb	r3, r3
}
    9d60:	0018      	movs	r0, r3
    9d62:	46bd      	mov	sp, r7
    9d64:	b004      	add	sp, #16
    9d66:	bd80      	pop	{r7, pc}

00009d68 <spi_is_ready_to_read>:
{
    9d68:	b580      	push	{r7, lr}
    9d6a:	b084      	sub	sp, #16
    9d6c:	af00      	add	r7, sp, #0
    9d6e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9d70:	687b      	ldr	r3, [r7, #4]
    9d72:	681b      	ldr	r3, [r3, #0]
    9d74:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    9d76:	68fb      	ldr	r3, [r7, #12]
    9d78:	7e1b      	ldrb	r3, [r3, #24]
    9d7a:	b2db      	uxtb	r3, r3
    9d7c:	001a      	movs	r2, r3
    9d7e:	2304      	movs	r3, #4
    9d80:	4013      	ands	r3, r2
    9d82:	1e5a      	subs	r2, r3, #1
    9d84:	4193      	sbcs	r3, r2
    9d86:	b2db      	uxtb	r3, r3
}
    9d88:	0018      	movs	r0, r3
    9d8a:	46bd      	mov	sp, r7
    9d8c:	b004      	add	sp, #16
    9d8e:	bd80      	pop	{r7, pc}

00009d90 <spi_write>:
{
    9d90:	b580      	push	{r7, lr}
    9d92:	b084      	sub	sp, #16
    9d94:	af00      	add	r7, sp, #0
    9d96:	6078      	str	r0, [r7, #4]
    9d98:	000a      	movs	r2, r1
    9d9a:	1cbb      	adds	r3, r7, #2
    9d9c:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9d9e:	687b      	ldr	r3, [r7, #4]
    9da0:	681b      	ldr	r3, [r3, #0]
    9da2:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    9da4:	687b      	ldr	r3, [r7, #4]
    9da6:	0018      	movs	r0, r3
    9da8:	4b0a      	ldr	r3, [pc, #40]	; (9dd4 <spi_write+0x44>)
    9daa:	4798      	blx	r3
    9dac:	0003      	movs	r3, r0
    9dae:	001a      	movs	r2, r3
    9db0:	2301      	movs	r3, #1
    9db2:	4053      	eors	r3, r2
    9db4:	b2db      	uxtb	r3, r3
    9db6:	2b00      	cmp	r3, #0
    9db8:	d001      	beq.n	9dbe <spi_write+0x2e>
		return STATUS_BUSY;
    9dba:	2305      	movs	r3, #5
    9dbc:	e006      	b.n	9dcc <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    9dbe:	1cbb      	adds	r3, r7, #2
    9dc0:	881b      	ldrh	r3, [r3, #0]
    9dc2:	05db      	lsls	r3, r3, #23
    9dc4:	0dda      	lsrs	r2, r3, #23
    9dc6:	68fb      	ldr	r3, [r7, #12]
    9dc8:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    9dca:	2300      	movs	r3, #0
}
    9dcc:	0018      	movs	r0, r3
    9dce:	46bd      	mov	sp, r7
    9dd0:	b004      	add	sp, #16
    9dd2:	bd80      	pop	{r7, pc}
    9dd4:	00009d41 	.word	0x00009d41

00009dd8 <spi_read>:
{
    9dd8:	b580      	push	{r7, lr}
    9dda:	b084      	sub	sp, #16
    9ddc:	af00      	add	r7, sp, #0
    9dde:	6078      	str	r0, [r7, #4]
    9de0:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9de2:	687b      	ldr	r3, [r7, #4]
    9de4:	681b      	ldr	r3, [r3, #0]
    9de6:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    9de8:	687b      	ldr	r3, [r7, #4]
    9dea:	0018      	movs	r0, r3
    9dec:	4b1b      	ldr	r3, [pc, #108]	; (9e5c <spi_read+0x84>)
    9dee:	4798      	blx	r3
    9df0:	0003      	movs	r3, r0
    9df2:	001a      	movs	r2, r3
    9df4:	2301      	movs	r3, #1
    9df6:	4053      	eors	r3, r2
    9df8:	b2db      	uxtb	r3, r3
    9dfa:	2b00      	cmp	r3, #0
    9dfc:	d001      	beq.n	9e02 <spi_read+0x2a>
		return STATUS_ERR_IO;
    9dfe:	2310      	movs	r3, #16
    9e00:	e027      	b.n	9e52 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    9e02:	230f      	movs	r3, #15
    9e04:	18fb      	adds	r3, r7, r3
    9e06:	2200      	movs	r2, #0
    9e08:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9e0a:	68bb      	ldr	r3, [r7, #8]
    9e0c:	8b5b      	ldrh	r3, [r3, #26]
    9e0e:	b29b      	uxth	r3, r3
    9e10:	001a      	movs	r2, r3
    9e12:	2304      	movs	r3, #4
    9e14:	4013      	ands	r3, r2
    9e16:	d006      	beq.n	9e26 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    9e18:	230f      	movs	r3, #15
    9e1a:	18fb      	adds	r3, r7, r3
    9e1c:	221e      	movs	r2, #30
    9e1e:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9e20:	68bb      	ldr	r3, [r7, #8]
    9e22:	2204      	movs	r2, #4
    9e24:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9e26:	687b      	ldr	r3, [r7, #4]
    9e28:	799b      	ldrb	r3, [r3, #6]
    9e2a:	2b01      	cmp	r3, #1
    9e2c:	d108      	bne.n	9e40 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    9e2e:	68bb      	ldr	r3, [r7, #8]
    9e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9e32:	b29b      	uxth	r3, r3
    9e34:	05db      	lsls	r3, r3, #23
    9e36:	0ddb      	lsrs	r3, r3, #23
    9e38:	b29a      	uxth	r2, r3
    9e3a:	683b      	ldr	r3, [r7, #0]
    9e3c:	801a      	strh	r2, [r3, #0]
    9e3e:	e005      	b.n	9e4c <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    9e40:	68bb      	ldr	r3, [r7, #8]
    9e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9e44:	b2db      	uxtb	r3, r3
    9e46:	b29a      	uxth	r2, r3
    9e48:	683b      	ldr	r3, [r7, #0]
    9e4a:	801a      	strh	r2, [r3, #0]
	return retval;
    9e4c:	230f      	movs	r3, #15
    9e4e:	18fb      	adds	r3, r7, r3
    9e50:	781b      	ldrb	r3, [r3, #0]
}
    9e52:	0018      	movs	r0, r3
    9e54:	46bd      	mov	sp, r7
    9e56:	b004      	add	sp, #16
    9e58:	bd80      	pop	{r7, pc}
    9e5a:	46c0      	nop			; (mov r8, r8)
    9e5c:	00009d69 	.word	0x00009d69

00009e60 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    9e60:	b590      	push	{r4, r7, lr}
    9e62:	b093      	sub	sp, #76	; 0x4c
    9e64:	af00      	add	r7, sp, #0
    9e66:	6078      	str	r0, [r7, #4]
    9e68:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9e6a:	687b      	ldr	r3, [r7, #4]
    9e6c:	681b      	ldr	r3, [r3, #0]
    9e6e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    9e70:	687b      	ldr	r3, [r7, #4]
    9e72:	681b      	ldr	r3, [r3, #0]
    9e74:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    9e76:	231c      	movs	r3, #28
    9e78:	18fb      	adds	r3, r7, r3
    9e7a:	0018      	movs	r0, r3
    9e7c:	4b75      	ldr	r3, [pc, #468]	; (a054 <_spi_set_config+0x1f4>)
    9e7e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9e80:	231c      	movs	r3, #28
    9e82:	18fb      	adds	r3, r7, r3
    9e84:	2200      	movs	r2, #0
    9e86:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    9e88:	683b      	ldr	r3, [r7, #0]
    9e8a:	781b      	ldrb	r3, [r3, #0]
    9e8c:	2b00      	cmp	r3, #0
    9e8e:	d103      	bne.n	9e98 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    9e90:	231c      	movs	r3, #28
    9e92:	18fb      	adds	r3, r7, r3
    9e94:	2200      	movs	r2, #0
    9e96:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    9e98:	683b      	ldr	r3, [r7, #0]
    9e9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    9e9c:	230c      	movs	r3, #12
    9e9e:	18fb      	adds	r3, r7, r3
    9ea0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    9ea2:	683b      	ldr	r3, [r7, #0]
    9ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    9ea6:	230c      	movs	r3, #12
    9ea8:	18fb      	adds	r3, r7, r3
    9eaa:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    9eac:	683b      	ldr	r3, [r7, #0]
    9eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    9eb0:	230c      	movs	r3, #12
    9eb2:	18fb      	adds	r3, r7, r3
    9eb4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    9eb6:	683b      	ldr	r3, [r7, #0]
    9eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    9eba:	230c      	movs	r3, #12
    9ebc:	18fb      	adds	r3, r7, r3
    9ebe:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    9ec0:	2347      	movs	r3, #71	; 0x47
    9ec2:	18fb      	adds	r3, r7, r3
    9ec4:	2200      	movs	r2, #0
    9ec6:	701a      	strb	r2, [r3, #0]
    9ec8:	e02c      	b.n	9f24 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    9eca:	2347      	movs	r3, #71	; 0x47
    9ecc:	18fb      	adds	r3, r7, r3
    9ece:	781a      	ldrb	r2, [r3, #0]
    9ed0:	230c      	movs	r3, #12
    9ed2:	18fb      	adds	r3, r7, r3
    9ed4:	0092      	lsls	r2, r2, #2
    9ed6:	58d3      	ldr	r3, [r2, r3]
    9ed8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    9eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9edc:	2b00      	cmp	r3, #0
    9ede:	d109      	bne.n	9ef4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    9ee0:	2347      	movs	r3, #71	; 0x47
    9ee2:	18fb      	adds	r3, r7, r3
    9ee4:	781a      	ldrb	r2, [r3, #0]
    9ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9ee8:	0011      	movs	r1, r2
    9eea:	0018      	movs	r0, r3
    9eec:	4b5a      	ldr	r3, [pc, #360]	; (a058 <_spi_set_config+0x1f8>)
    9eee:	4798      	blx	r3
    9ef0:	0003      	movs	r3, r0
    9ef2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    9ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9ef6:	3301      	adds	r3, #1
    9ef8:	d00d      	beq.n	9f16 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    9efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9efc:	b2da      	uxtb	r2, r3
    9efe:	231c      	movs	r3, #28
    9f00:	18fb      	adds	r3, r7, r3
    9f02:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    9f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9f06:	0c1b      	lsrs	r3, r3, #16
    9f08:	b2db      	uxtb	r3, r3
    9f0a:	221c      	movs	r2, #28
    9f0c:	18ba      	adds	r2, r7, r2
    9f0e:	0011      	movs	r1, r2
    9f10:	0018      	movs	r0, r3
    9f12:	4b52      	ldr	r3, [pc, #328]	; (a05c <_spi_set_config+0x1fc>)
    9f14:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    9f16:	2347      	movs	r3, #71	; 0x47
    9f18:	18fb      	adds	r3, r7, r3
    9f1a:	781a      	ldrb	r2, [r3, #0]
    9f1c:	2347      	movs	r3, #71	; 0x47
    9f1e:	18fb      	adds	r3, r7, r3
    9f20:	3201      	adds	r2, #1
    9f22:	701a      	strb	r2, [r3, #0]
    9f24:	2347      	movs	r3, #71	; 0x47
    9f26:	18fb      	adds	r3, r7, r3
    9f28:	781b      	ldrb	r3, [r3, #0]
    9f2a:	2b03      	cmp	r3, #3
    9f2c:	d9cd      	bls.n	9eca <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    9f2e:	683b      	ldr	r3, [r7, #0]
    9f30:	781a      	ldrb	r2, [r3, #0]
    9f32:	687b      	ldr	r3, [r7, #4]
    9f34:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    9f36:	683b      	ldr	r3, [r7, #0]
    9f38:	7c1a      	ldrb	r2, [r3, #16]
    9f3a:	687b      	ldr	r3, [r7, #4]
    9f3c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    9f3e:	683b      	ldr	r3, [r7, #0]
    9f40:	7c9a      	ldrb	r2, [r3, #18]
    9f42:	687b      	ldr	r3, [r7, #4]
    9f44:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    9f46:	683b      	ldr	r3, [r7, #0]
    9f48:	7d1a      	ldrb	r2, [r3, #20]
    9f4a:	687b      	ldr	r3, [r7, #4]
    9f4c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    9f4e:	230a      	movs	r3, #10
    9f50:	18fb      	adds	r3, r7, r3
    9f52:	2200      	movs	r2, #0
    9f54:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    9f56:	2300      	movs	r3, #0
    9f58:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    9f5a:	2300      	movs	r3, #0
    9f5c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    9f5e:	683b      	ldr	r3, [r7, #0]
    9f60:	781b      	ldrb	r3, [r3, #0]
    9f62:	2b01      	cmp	r3, #1
    9f64:	d129      	bne.n	9fba <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9f66:	687b      	ldr	r3, [r7, #4]
    9f68:	681b      	ldr	r3, [r3, #0]
    9f6a:	0018      	movs	r0, r3
    9f6c:	4b3c      	ldr	r3, [pc, #240]	; (a060 <_spi_set_config+0x200>)
    9f6e:	4798      	blx	r3
    9f70:	0003      	movs	r3, r0
    9f72:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    9f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9f76:	3314      	adds	r3, #20
    9f78:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    9f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9f7c:	b2db      	uxtb	r3, r3
    9f7e:	0018      	movs	r0, r3
    9f80:	4b38      	ldr	r3, [pc, #224]	; (a064 <_spi_set_config+0x204>)
    9f82:	4798      	blx	r3
    9f84:	0003      	movs	r3, r0
    9f86:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    9f88:	683b      	ldr	r3, [r7, #0]
    9f8a:	699b      	ldr	r3, [r3, #24]
    9f8c:	2223      	movs	r2, #35	; 0x23
    9f8e:	18bc      	adds	r4, r7, r2
    9f90:	220a      	movs	r2, #10
    9f92:	18ba      	adds	r2, r7, r2
    9f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
    9f96:	0018      	movs	r0, r3
    9f98:	4b33      	ldr	r3, [pc, #204]	; (a068 <_spi_set_config+0x208>)
    9f9a:	4798      	blx	r3
    9f9c:	0003      	movs	r3, r0
    9f9e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    9fa0:	2323      	movs	r3, #35	; 0x23
    9fa2:	18fb      	adds	r3, r7, r3
    9fa4:	781b      	ldrb	r3, [r3, #0]
    9fa6:	2b00      	cmp	r3, #0
    9fa8:	d001      	beq.n	9fae <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    9faa:	2317      	movs	r3, #23
    9fac:	e04e      	b.n	a04c <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    9fae:	230a      	movs	r3, #10
    9fb0:	18fb      	adds	r3, r7, r3
    9fb2:	881b      	ldrh	r3, [r3, #0]
    9fb4:	b2da      	uxtb	r2, r3
    9fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9fb8:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    9fba:	683b      	ldr	r3, [r7, #0]
    9fbc:	685b      	ldr	r3, [r3, #4]
    9fbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9fc0:	4313      	orrs	r3, r2
    9fc2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    9fc4:	683b      	ldr	r3, [r7, #0]
    9fc6:	689b      	ldr	r3, [r3, #8]
    9fc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9fca:	4313      	orrs	r3, r2
    9fcc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    9fce:	683b      	ldr	r3, [r7, #0]
    9fd0:	68db      	ldr	r3, [r3, #12]
    9fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9fd4:	4313      	orrs	r3, r2
    9fd6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    9fd8:	683b      	ldr	r3, [r7, #0]
    9fda:	7c1b      	ldrb	r3, [r3, #16]
    9fdc:	001a      	movs	r2, r3
    9fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9fe0:	4313      	orrs	r3, r2
    9fe2:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    9fe4:	683b      	ldr	r3, [r7, #0]
    9fe6:	7c5b      	ldrb	r3, [r3, #17]
    9fe8:	2b00      	cmp	r3, #0
    9fea:	d103      	bne.n	9ff4 <_spi_set_config+0x194>
    9fec:	4b1f      	ldr	r3, [pc, #124]	; (a06c <_spi_set_config+0x20c>)
    9fee:	4798      	blx	r3
    9ff0:	1e03      	subs	r3, r0, #0
    9ff2:	d003      	beq.n	9ffc <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    9ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9ff6:	2280      	movs	r2, #128	; 0x80
    9ff8:	4313      	orrs	r3, r2
    9ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    9ffc:	683b      	ldr	r3, [r7, #0]
    9ffe:	7c9b      	ldrb	r3, [r3, #18]
    a000:	2b00      	cmp	r3, #0
    a002:	d004      	beq.n	a00e <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a006:	2280      	movs	r2, #128	; 0x80
    a008:	0292      	lsls	r2, r2, #10
    a00a:	4313      	orrs	r3, r2
    a00c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    a00e:	683b      	ldr	r3, [r7, #0]
    a010:	7cdb      	ldrb	r3, [r3, #19]
    a012:	2b00      	cmp	r3, #0
    a014:	d004      	beq.n	a020 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    a016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a018:	2280      	movs	r2, #128	; 0x80
    a01a:	0092      	lsls	r2, r2, #2
    a01c:	4313      	orrs	r3, r2
    a01e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    a020:	683b      	ldr	r3, [r7, #0]
    a022:	7d1b      	ldrb	r3, [r3, #20]
    a024:	2b00      	cmp	r3, #0
    a026:	d004      	beq.n	a032 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    a028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a02a:	2280      	movs	r2, #128	; 0x80
    a02c:	0192      	lsls	r2, r2, #6
    a02e:	4313      	orrs	r3, r2
    a030:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    a032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a034:	681a      	ldr	r2, [r3, #0]
    a036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a038:	431a      	orrs	r2, r3
    a03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a03c:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    a03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a040:	685a      	ldr	r2, [r3, #4]
    a042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a044:	431a      	orrs	r2, r3
    a046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a048:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    a04a:	2300      	movs	r3, #0
}
    a04c:	0018      	movs	r0, r3
    a04e:	46bd      	mov	sp, r7
    a050:	b013      	add	sp, #76	; 0x4c
    a052:	bd90      	pop	{r4, r7, pc}
    a054:	00009b85 	.word	0x00009b85
    a058:	0000f8f9 	.word	0x0000f8f9
    a05c:	000119cd 	.word	0x000119cd
    a060:	0000fab5 	.word	0x0000fab5
    a064:	00011805 	.word	0x00011805
    a068:	0000f62f 	.word	0x0000f62f
    a06c:	00009cf9 	.word	0x00009cf9

0000a070 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    a070:	b590      	push	{r4, r7, lr}
    a072:	b08b      	sub	sp, #44	; 0x2c
    a074:	af00      	add	r7, sp, #0
    a076:	60f8      	str	r0, [r7, #12]
    a078:	60b9      	str	r1, [r7, #8]
    a07a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    a07c:	68fb      	ldr	r3, [r7, #12]
    a07e:	68ba      	ldr	r2, [r7, #8]
    a080:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    a082:	68fb      	ldr	r3, [r7, #12]
    a084:	681b      	ldr	r3, [r3, #0]
    a086:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    a088:	6a3b      	ldr	r3, [r7, #32]
    a08a:	681b      	ldr	r3, [r3, #0]
    a08c:	2202      	movs	r2, #2
    a08e:	4013      	ands	r3, r2
    a090:	d001      	beq.n	a096 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    a092:	231c      	movs	r3, #28
    a094:	e09c      	b.n	a1d0 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    a096:	6a3b      	ldr	r3, [r7, #32]
    a098:	681b      	ldr	r3, [r3, #0]
    a09a:	2201      	movs	r2, #1
    a09c:	4013      	ands	r3, r2
    a09e:	d001      	beq.n	a0a4 <spi_init+0x34>
		return STATUS_BUSY;
    a0a0:	2305      	movs	r3, #5
    a0a2:	e095      	b.n	a1d0 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a0a4:	68fb      	ldr	r3, [r7, #12]
    a0a6:	681b      	ldr	r3, [r3, #0]
    a0a8:	0018      	movs	r0, r3
    a0aa:	4b4b      	ldr	r3, [pc, #300]	; (a1d8 <spi_init+0x168>)
    a0ac:	4798      	blx	r3
    a0ae:	0003      	movs	r3, r0
    a0b0:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    a0b2:	69fb      	ldr	r3, [r7, #28]
    a0b4:	3302      	adds	r3, #2
    a0b6:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a0b8:	69fb      	ldr	r3, [r7, #28]
    a0ba:	3314      	adds	r3, #20
    a0bc:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    a0be:	2201      	movs	r2, #1
    a0c0:	69bb      	ldr	r3, [r7, #24]
    a0c2:	409a      	lsls	r2, r3
    a0c4:	0013      	movs	r3, r2
    a0c6:	0019      	movs	r1, r3
    a0c8:	2002      	movs	r0, #2
    a0ca:	4b44      	ldr	r3, [pc, #272]	; (a1dc <spi_init+0x16c>)
    a0cc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    a0ce:	2310      	movs	r3, #16
    a0d0:	18fb      	adds	r3, r7, r3
    a0d2:	0018      	movs	r0, r3
    a0d4:	4b42      	ldr	r3, [pc, #264]	; (a1e0 <spi_init+0x170>)
    a0d6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    a0d8:	687b      	ldr	r3, [r7, #4]
    a0da:	2224      	movs	r2, #36	; 0x24
    a0dc:	5c9a      	ldrb	r2, [r3, r2]
    a0de:	2310      	movs	r3, #16
    a0e0:	18fb      	adds	r3, r7, r3
    a0e2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    a0e4:	697b      	ldr	r3, [r7, #20]
    a0e6:	b2db      	uxtb	r3, r3
    a0e8:	2210      	movs	r2, #16
    a0ea:	18ba      	adds	r2, r7, r2
    a0ec:	0011      	movs	r1, r2
    a0ee:	0018      	movs	r0, r3
    a0f0:	4b3c      	ldr	r3, [pc, #240]	; (a1e4 <spi_init+0x174>)
    a0f2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    a0f4:	697b      	ldr	r3, [r7, #20]
    a0f6:	b2db      	uxtb	r3, r3
    a0f8:	0018      	movs	r0, r3
    a0fa:	4b3b      	ldr	r3, [pc, #236]	; (a1e8 <spi_init+0x178>)
    a0fc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    a0fe:	687b      	ldr	r3, [r7, #4]
    a100:	2224      	movs	r2, #36	; 0x24
    a102:	5c9b      	ldrb	r3, [r3, r2]
    a104:	2100      	movs	r1, #0
    a106:	0018      	movs	r0, r3
    a108:	4b38      	ldr	r3, [pc, #224]	; (a1ec <spi_init+0x17c>)
    a10a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    a10c:	687b      	ldr	r3, [r7, #4]
    a10e:	781b      	ldrb	r3, [r3, #0]
    a110:	2b01      	cmp	r3, #1
    a112:	d105      	bne.n	a120 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    a114:	6a3b      	ldr	r3, [r7, #32]
    a116:	681b      	ldr	r3, [r3, #0]
    a118:	220c      	movs	r2, #12
    a11a:	431a      	orrs	r2, r3
    a11c:	6a3b      	ldr	r3, [r7, #32]
    a11e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    a120:	2327      	movs	r3, #39	; 0x27
    a122:	18fb      	adds	r3, r7, r3
    a124:	2200      	movs	r2, #0
    a126:	701a      	strb	r2, [r3, #0]
    a128:	e010      	b.n	a14c <spi_init+0xdc>
		module->callback[i]        = NULL;
    a12a:	2327      	movs	r3, #39	; 0x27
    a12c:	18fb      	adds	r3, r7, r3
    a12e:	781b      	ldrb	r3, [r3, #0]
    a130:	68fa      	ldr	r2, [r7, #12]
    a132:	3302      	adds	r3, #2
    a134:	009b      	lsls	r3, r3, #2
    a136:	18d3      	adds	r3, r2, r3
    a138:	3304      	adds	r3, #4
    a13a:	2200      	movs	r2, #0
    a13c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    a13e:	2327      	movs	r3, #39	; 0x27
    a140:	18fb      	adds	r3, r7, r3
    a142:	781a      	ldrb	r2, [r3, #0]
    a144:	2327      	movs	r3, #39	; 0x27
    a146:	18fb      	adds	r3, r7, r3
    a148:	3201      	adds	r2, #1
    a14a:	701a      	strb	r2, [r3, #0]
    a14c:	2327      	movs	r3, #39	; 0x27
    a14e:	18fb      	adds	r3, r7, r3
    a150:	781b      	ldrb	r3, [r3, #0]
    a152:	2b06      	cmp	r3, #6
    a154:	d9e9      	bls.n	a12a <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    a156:	68fb      	ldr	r3, [r7, #12]
    a158:	2200      	movs	r2, #0
    a15a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    a15c:	68fb      	ldr	r3, [r7, #12]
    a15e:	2200      	movs	r2, #0
    a160:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    a162:	68fb      	ldr	r3, [r7, #12]
    a164:	2200      	movs	r2, #0
    a166:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    a168:	68fb      	ldr	r3, [r7, #12]
    a16a:	2200      	movs	r2, #0
    a16c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    a16e:	68fb      	ldr	r3, [r7, #12]
    a170:	2236      	movs	r2, #54	; 0x36
    a172:	2100      	movs	r1, #0
    a174:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    a176:	68fb      	ldr	r3, [r7, #12]
    a178:	2237      	movs	r2, #55	; 0x37
    a17a:	2100      	movs	r1, #0
    a17c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    a17e:	68fb      	ldr	r3, [r7, #12]
    a180:	2238      	movs	r2, #56	; 0x38
    a182:	2100      	movs	r1, #0
    a184:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    a186:	68fb      	ldr	r3, [r7, #12]
    a188:	2203      	movs	r2, #3
    a18a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    a18c:	68fb      	ldr	r3, [r7, #12]
    a18e:	2200      	movs	r2, #0
    a190:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    a192:	68fb      	ldr	r3, [r7, #12]
    a194:	681b      	ldr	r3, [r3, #0]
    a196:	2213      	movs	r2, #19
    a198:	18bc      	adds	r4, r7, r2
    a19a:	0018      	movs	r0, r3
    a19c:	4b0e      	ldr	r3, [pc, #56]	; (a1d8 <spi_init+0x168>)
    a19e:	4798      	blx	r3
    a1a0:	0003      	movs	r3, r0
    a1a2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    a1a4:	4a12      	ldr	r2, [pc, #72]	; (a1f0 <spi_init+0x180>)
    a1a6:	2313      	movs	r3, #19
    a1a8:	18fb      	adds	r3, r7, r3
    a1aa:	781b      	ldrb	r3, [r3, #0]
    a1ac:	0011      	movs	r1, r2
    a1ae:	0018      	movs	r0, r3
    a1b0:	4b10      	ldr	r3, [pc, #64]	; (a1f4 <spi_init+0x184>)
    a1b2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    a1b4:	2313      	movs	r3, #19
    a1b6:	18fb      	adds	r3, r7, r3
    a1b8:	781a      	ldrb	r2, [r3, #0]
    a1ba:	4b0f      	ldr	r3, [pc, #60]	; (a1f8 <spi_init+0x188>)
    a1bc:	0092      	lsls	r2, r2, #2
    a1be:	68f9      	ldr	r1, [r7, #12]
    a1c0:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    a1c2:	687a      	ldr	r2, [r7, #4]
    a1c4:	68fb      	ldr	r3, [r7, #12]
    a1c6:	0011      	movs	r1, r2
    a1c8:	0018      	movs	r0, r3
    a1ca:	4b0c      	ldr	r3, [pc, #48]	; (a1fc <spi_init+0x18c>)
    a1cc:	4798      	blx	r3
    a1ce:	0003      	movs	r3, r0
}
    a1d0:	0018      	movs	r0, r3
    a1d2:	46bd      	mov	sp, r7
    a1d4:	b00b      	add	sp, #44	; 0x2c
    a1d6:	bd90      	pop	{r4, r7, pc}
    a1d8:	0000fab5 	.word	0x0000fab5
    a1dc:	00009c9d 	.word	0x00009c9d
    a1e0:	00009c85 	.word	0x00009c85
    a1e4:	000116e1 	.word	0x000116e1
    a1e8:	00011725 	.word	0x00011725
    a1ec:	0000f86d 	.word	0x0000f86d
    a1f0:	0000a6c9 	.word	0x0000a6c9
    a1f4:	000106fd 	.word	0x000106fd
    a1f8:	20000904 	.word	0x20000904
    a1fc:	00009e61 	.word	0x00009e61

0000a200 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    a200:	b590      	push	{r4, r7, lr}
    a202:	b087      	sub	sp, #28
    a204:	af00      	add	r7, sp, #0
    a206:	60f8      	str	r0, [r7, #12]
    a208:	60b9      	str	r1, [r7, #8]
    a20a:	0019      	movs	r1, r3
    a20c:	1dbb      	adds	r3, r7, #6
    a20e:	801a      	strh	r2, [r3, #0]
    a210:	1d3b      	adds	r3, r7, #4
    a212:	1c0a      	adds	r2, r1, #0
    a214:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    a216:	68fb      	ldr	r3, [r7, #12]
    a218:	2238      	movs	r2, #56	; 0x38
    a21a:	5c9b      	ldrb	r3, [r3, r2]
    a21c:	b2db      	uxtb	r3, r3
    a21e:	2b05      	cmp	r3, #5
    a220:	d101      	bne.n	a226 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    a222:	2305      	movs	r3, #5
    a224:	e07a      	b.n	a31c <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    a226:	1dbb      	adds	r3, r7, #6
    a228:	881b      	ldrh	r3, [r3, #0]
    a22a:	2b00      	cmp	r3, #0
    a22c:	d101      	bne.n	a232 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    a22e:	2317      	movs	r3, #23
    a230:	e074      	b.n	a31c <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    a232:	68fb      	ldr	r3, [r7, #12]
    a234:	79db      	ldrb	r3, [r3, #7]
    a236:	2201      	movs	r2, #1
    a238:	4053      	eors	r3, r2
    a23a:	b2db      	uxtb	r3, r3
    a23c:	2b00      	cmp	r3, #0
    a23e:	d001      	beq.n	a244 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    a240:	231c      	movs	r3, #28
    a242:	e06b      	b.n	a31c <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    a244:	2316      	movs	r3, #22
    a246:	18fb      	adds	r3, r7, r3
    a248:	2200      	movs	r2, #0
    a24a:	801a      	strh	r2, [r3, #0]

	while (length--) {
    a24c:	e05e      	b.n	a30c <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    a24e:	68fb      	ldr	r3, [r7, #12]
    a250:	795b      	ldrb	r3, [r3, #5]
    a252:	2b01      	cmp	r3, #1
    a254:	d112      	bne.n	a27c <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    a256:	46c0      	nop			; (mov r8, r8)
    a258:	68fb      	ldr	r3, [r7, #12]
    a25a:	0018      	movs	r0, r3
    a25c:	4b31      	ldr	r3, [pc, #196]	; (a324 <spi_read_buffer_wait+0x124>)
    a25e:	4798      	blx	r3
    a260:	0003      	movs	r3, r0
    a262:	001a      	movs	r2, r3
    a264:	2301      	movs	r3, #1
    a266:	4053      	eors	r3, r2
    a268:	b2db      	uxtb	r3, r3
    a26a:	2b00      	cmp	r3, #0
    a26c:	d1f4      	bne.n	a258 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    a26e:	1d3b      	adds	r3, r7, #4
    a270:	881a      	ldrh	r2, [r3, #0]
    a272:	68fb      	ldr	r3, [r7, #12]
    a274:	0011      	movs	r1, r2
    a276:	0018      	movs	r0, r3
    a278:	4b2b      	ldr	r3, [pc, #172]	; (a328 <spi_read_buffer_wait+0x128>)
    a27a:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    a27c:	46c0      	nop			; (mov r8, r8)
    a27e:	68fb      	ldr	r3, [r7, #12]
    a280:	0018      	movs	r0, r3
    a282:	4b2a      	ldr	r3, [pc, #168]	; (a32c <spi_read_buffer_wait+0x12c>)
    a284:	4798      	blx	r3
    a286:	0003      	movs	r3, r0
    a288:	001a      	movs	r2, r3
    a28a:	2301      	movs	r3, #1
    a28c:	4053      	eors	r3, r2
    a28e:	b2db      	uxtb	r3, r3
    a290:	2b00      	cmp	r3, #0
    a292:	d1f4      	bne.n	a27e <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    a294:	2312      	movs	r3, #18
    a296:	18fb      	adds	r3, r7, r3
    a298:	2200      	movs	r2, #0
    a29a:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    a29c:	2315      	movs	r3, #21
    a29e:	18fc      	adds	r4, r7, r3
    a2a0:	2312      	movs	r3, #18
    a2a2:	18fa      	adds	r2, r7, r3
    a2a4:	68fb      	ldr	r3, [r7, #12]
    a2a6:	0011      	movs	r1, r2
    a2a8:	0018      	movs	r0, r3
    a2aa:	4b21      	ldr	r3, [pc, #132]	; (a330 <spi_read_buffer_wait+0x130>)
    a2ac:	4798      	blx	r3
    a2ae:	0003      	movs	r3, r0
    a2b0:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    a2b2:	2315      	movs	r3, #21
    a2b4:	18fb      	adds	r3, r7, r3
    a2b6:	781b      	ldrb	r3, [r3, #0]
    a2b8:	2b00      	cmp	r3, #0
    a2ba:	d003      	beq.n	a2c4 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    a2bc:	2315      	movs	r3, #21
    a2be:	18fb      	adds	r3, r7, r3
    a2c0:	781b      	ldrb	r3, [r3, #0]
    a2c2:	e02b      	b.n	a31c <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    a2c4:	2316      	movs	r3, #22
    a2c6:	18fb      	adds	r3, r7, r3
    a2c8:	881b      	ldrh	r3, [r3, #0]
    a2ca:	2216      	movs	r2, #22
    a2cc:	18ba      	adds	r2, r7, r2
    a2ce:	1c59      	adds	r1, r3, #1
    a2d0:	8011      	strh	r1, [r2, #0]
    a2d2:	001a      	movs	r2, r3
    a2d4:	68bb      	ldr	r3, [r7, #8]
    a2d6:	189b      	adds	r3, r3, r2
    a2d8:	2212      	movs	r2, #18
    a2da:	18ba      	adds	r2, r7, r2
    a2dc:	8812      	ldrh	r2, [r2, #0]
    a2de:	b2d2      	uxtb	r2, r2
    a2e0:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    a2e2:	68fb      	ldr	r3, [r7, #12]
    a2e4:	799b      	ldrb	r3, [r3, #6]
    a2e6:	2b01      	cmp	r3, #1
    a2e8:	d110      	bne.n	a30c <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    a2ea:	2316      	movs	r3, #22
    a2ec:	18fb      	adds	r3, r7, r3
    a2ee:	881b      	ldrh	r3, [r3, #0]
    a2f0:	2216      	movs	r2, #22
    a2f2:	18ba      	adds	r2, r7, r2
    a2f4:	1c59      	adds	r1, r3, #1
    a2f6:	8011      	strh	r1, [r2, #0]
    a2f8:	001a      	movs	r2, r3
    a2fa:	68bb      	ldr	r3, [r7, #8]
    a2fc:	189b      	adds	r3, r3, r2
    a2fe:	2212      	movs	r2, #18
    a300:	18ba      	adds	r2, r7, r2
    a302:	8812      	ldrh	r2, [r2, #0]
    a304:	0a12      	lsrs	r2, r2, #8
    a306:	b292      	uxth	r2, r2
    a308:	b2d2      	uxtb	r2, r2
    a30a:	701a      	strb	r2, [r3, #0]
	while (length--) {
    a30c:	1dbb      	adds	r3, r7, #6
    a30e:	881b      	ldrh	r3, [r3, #0]
    a310:	1dba      	adds	r2, r7, #6
    a312:	1e59      	subs	r1, r3, #1
    a314:	8011      	strh	r1, [r2, #0]
    a316:	2b00      	cmp	r3, #0
    a318:	d199      	bne.n	a24e <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    a31a:	2300      	movs	r3, #0
}
    a31c:	0018      	movs	r0, r3
    a31e:	46bd      	mov	sp, r7
    a320:	b007      	add	sp, #28
    a322:	bd90      	pop	{r4, r7, pc}
    a324:	00009d41 	.word	0x00009d41
    a328:	00009d91 	.word	0x00009d91
    a32c:	00009d69 	.word	0x00009d69
    a330:	00009dd9 	.word	0x00009dd9

0000a334 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    a334:	b580      	push	{r7, lr}
    a336:	b086      	sub	sp, #24
    a338:	af00      	add	r7, sp, #0
    a33a:	60f8      	str	r0, [r7, #12]
    a33c:	60b9      	str	r1, [r7, #8]
    a33e:	1dfb      	adds	r3, r7, #7
    a340:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    a342:	68fb      	ldr	r3, [r7, #12]
    a344:	795b      	ldrb	r3, [r3, #5]
    a346:	2b01      	cmp	r3, #1
    a348:	d001      	beq.n	a34e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    a34a:	2315      	movs	r3, #21
    a34c:	e05c      	b.n	a408 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    a34e:	68fb      	ldr	r3, [r7, #12]
    a350:	7a1b      	ldrb	r3, [r3, #8]
    a352:	2201      	movs	r2, #1
    a354:	4053      	eors	r3, r2
    a356:	b2db      	uxtb	r3, r3
    a358:	2b00      	cmp	r3, #0
    a35a:	d054      	beq.n	a406 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    a35c:	1dfb      	adds	r3, r7, #7
    a35e:	781b      	ldrb	r3, [r3, #0]
    a360:	2b00      	cmp	r3, #0
    a362:	d04a      	beq.n	a3fa <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    a364:	68bb      	ldr	r3, [r7, #8]
    a366:	785b      	ldrb	r3, [r3, #1]
    a368:	2b00      	cmp	r3, #0
    a36a:	d03f      	beq.n	a3ec <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    a36c:	68fb      	ldr	r3, [r7, #12]
    a36e:	0018      	movs	r0, r3
    a370:	4b27      	ldr	r3, [pc, #156]	; (a410 <spi_select_slave+0xdc>)
    a372:	4798      	blx	r3
    a374:	0003      	movs	r3, r0
    a376:	001a      	movs	r2, r3
    a378:	2301      	movs	r3, #1
    a37a:	4053      	eors	r3, r2
    a37c:	b2db      	uxtb	r3, r3
    a37e:	2b00      	cmp	r3, #0
    a380:	d007      	beq.n	a392 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    a382:	68bb      	ldr	r3, [r7, #8]
    a384:	781b      	ldrb	r3, [r3, #0]
    a386:	2101      	movs	r1, #1
    a388:	0018      	movs	r0, r3
    a38a:	4b22      	ldr	r3, [pc, #136]	; (a414 <spi_select_slave+0xe0>)
    a38c:	4798      	blx	r3
					return STATUS_BUSY;
    a38e:	2305      	movs	r3, #5
    a390:	e03a      	b.n	a408 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    a392:	68bb      	ldr	r3, [r7, #8]
    a394:	781b      	ldrb	r3, [r3, #0]
    a396:	2100      	movs	r1, #0
    a398:	0018      	movs	r0, r3
    a39a:	4b1e      	ldr	r3, [pc, #120]	; (a414 <spi_select_slave+0xe0>)
    a39c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    a39e:	68bb      	ldr	r3, [r7, #8]
    a3a0:	789b      	ldrb	r3, [r3, #2]
    a3a2:	b29a      	uxth	r2, r3
    a3a4:	68fb      	ldr	r3, [r7, #12]
    a3a6:	0011      	movs	r1, r2
    a3a8:	0018      	movs	r0, r3
    a3aa:	4b1b      	ldr	r3, [pc, #108]	; (a418 <spi_select_slave+0xe4>)
    a3ac:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    a3ae:	68fb      	ldr	r3, [r7, #12]
    a3b0:	79db      	ldrb	r3, [r3, #7]
    a3b2:	2201      	movs	r2, #1
    a3b4:	4053      	eors	r3, r2
    a3b6:	b2db      	uxtb	r3, r3
    a3b8:	2b00      	cmp	r3, #0
    a3ba:	d024      	beq.n	a406 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    a3bc:	46c0      	nop			; (mov r8, r8)
    a3be:	68fb      	ldr	r3, [r7, #12]
    a3c0:	0018      	movs	r0, r3
    a3c2:	4b16      	ldr	r3, [pc, #88]	; (a41c <spi_select_slave+0xe8>)
    a3c4:	4798      	blx	r3
    a3c6:	0003      	movs	r3, r0
    a3c8:	001a      	movs	r2, r3
    a3ca:	2301      	movs	r3, #1
    a3cc:	4053      	eors	r3, r2
    a3ce:	b2db      	uxtb	r3, r3
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	d1f4      	bne.n	a3be <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    a3d4:	2316      	movs	r3, #22
    a3d6:	18fb      	adds	r3, r7, r3
    a3d8:	2200      	movs	r2, #0
    a3da:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    a3dc:	2316      	movs	r3, #22
    a3de:	18fa      	adds	r2, r7, r3
    a3e0:	68fb      	ldr	r3, [r7, #12]
    a3e2:	0011      	movs	r1, r2
    a3e4:	0018      	movs	r0, r3
    a3e6:	4b0e      	ldr	r3, [pc, #56]	; (a420 <spi_select_slave+0xec>)
    a3e8:	4798      	blx	r3
    a3ea:	e00c      	b.n	a406 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    a3ec:	68bb      	ldr	r3, [r7, #8]
    a3ee:	781b      	ldrb	r3, [r3, #0]
    a3f0:	2100      	movs	r1, #0
    a3f2:	0018      	movs	r0, r3
    a3f4:	4b07      	ldr	r3, [pc, #28]	; (a414 <spi_select_slave+0xe0>)
    a3f6:	4798      	blx	r3
    a3f8:	e005      	b.n	a406 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    a3fa:	68bb      	ldr	r3, [r7, #8]
    a3fc:	781b      	ldrb	r3, [r3, #0]
    a3fe:	2101      	movs	r1, #1
    a400:	0018      	movs	r0, r3
    a402:	4b04      	ldr	r3, [pc, #16]	; (a414 <spi_select_slave+0xe0>)
    a404:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    a406:	2300      	movs	r3, #0
}
    a408:	0018      	movs	r0, r3
    a40a:	46bd      	mov	sp, r7
    a40c:	b006      	add	sp, #24
    a40e:	bd80      	pop	{r7, pc}
    a410:	00009d41 	.word	0x00009d41
    a414:	00009c31 	.word	0x00009c31
    a418:	00009d91 	.word	0x00009d91
    a41c:	00009d69 	.word	0x00009d69
    a420:	00009dd9 	.word	0x00009dd9

0000a424 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    a424:	b580      	push	{r7, lr}
    a426:	b086      	sub	sp, #24
    a428:	af00      	add	r7, sp, #0
    a42a:	60f8      	str	r0, [r7, #12]
    a42c:	60b9      	str	r1, [r7, #8]
    a42e:	1dbb      	adds	r3, r7, #6
    a430:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    a432:	68fb      	ldr	r3, [r7, #12]
    a434:	2238      	movs	r2, #56	; 0x38
    a436:	5c9b      	ldrb	r3, [r3, r2]
    a438:	b2db      	uxtb	r3, r3
    a43a:	2b05      	cmp	r3, #5
    a43c:	d101      	bne.n	a442 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    a43e:	2305      	movs	r3, #5
    a440:	e087      	b.n	a552 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    a442:	1dbb      	adds	r3, r7, #6
    a444:	881b      	ldrh	r3, [r3, #0]
    a446:	2b00      	cmp	r3, #0
    a448:	d101      	bne.n	a44e <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    a44a:	2317      	movs	r3, #23
    a44c:	e081      	b.n	a552 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    a44e:	2316      	movs	r3, #22
    a450:	18fb      	adds	r3, r7, r3
    a452:	2200      	movs	r2, #0
    a454:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    a456:	2314      	movs	r3, #20
    a458:	18fb      	adds	r3, r7, r3
    a45a:	1dba      	adds	r2, r7, #6
    a45c:	8812      	ldrh	r2, [r2, #0]
    a45e:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    a460:	e05f      	b.n	a522 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    a462:	46c0      	nop			; (mov r8, r8)
    a464:	68fb      	ldr	r3, [r7, #12]
    a466:	0018      	movs	r0, r3
    a468:	4b3c      	ldr	r3, [pc, #240]	; (a55c <spi_write_buffer_wait+0x138>)
    a46a:	4798      	blx	r3
    a46c:	0003      	movs	r3, r0
    a46e:	001a      	movs	r2, r3
    a470:	2301      	movs	r3, #1
    a472:	4053      	eors	r3, r2
    a474:	b2db      	uxtb	r3, r3
    a476:	2b00      	cmp	r3, #0
    a478:	d1f4      	bne.n	a464 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    a47a:	2316      	movs	r3, #22
    a47c:	18fb      	adds	r3, r7, r3
    a47e:	881b      	ldrh	r3, [r3, #0]
    a480:	2216      	movs	r2, #22
    a482:	18ba      	adds	r2, r7, r2
    a484:	1c59      	adds	r1, r3, #1
    a486:	8011      	strh	r1, [r2, #0]
    a488:	001a      	movs	r2, r3
    a48a:	68bb      	ldr	r3, [r7, #8]
    a48c:	189b      	adds	r3, r3, r2
    a48e:	781a      	ldrb	r2, [r3, #0]
    a490:	2312      	movs	r3, #18
    a492:	18fb      	adds	r3, r7, r3
    a494:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    a496:	68fb      	ldr	r3, [r7, #12]
    a498:	799b      	ldrb	r3, [r3, #6]
    a49a:	2b01      	cmp	r3, #1
    a49c:	d115      	bne.n	a4ca <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    a49e:	2316      	movs	r3, #22
    a4a0:	18fb      	adds	r3, r7, r3
    a4a2:	881b      	ldrh	r3, [r3, #0]
    a4a4:	2216      	movs	r2, #22
    a4a6:	18ba      	adds	r2, r7, r2
    a4a8:	1c59      	adds	r1, r3, #1
    a4aa:	8011      	strh	r1, [r2, #0]
    a4ac:	001a      	movs	r2, r3
    a4ae:	68bb      	ldr	r3, [r7, #8]
    a4b0:	189b      	adds	r3, r3, r2
    a4b2:	781b      	ldrb	r3, [r3, #0]
    a4b4:	021b      	lsls	r3, r3, #8
    a4b6:	b21a      	sxth	r2, r3
    a4b8:	2312      	movs	r3, #18
    a4ba:	18fb      	adds	r3, r7, r3
    a4bc:	2100      	movs	r1, #0
    a4be:	5e5b      	ldrsh	r3, [r3, r1]
    a4c0:	4313      	orrs	r3, r2
    a4c2:	b21a      	sxth	r2, r3
    a4c4:	2312      	movs	r3, #18
    a4c6:	18fb      	adds	r3, r7, r3
    a4c8:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    a4ca:	2312      	movs	r3, #18
    a4cc:	18fb      	adds	r3, r7, r3
    a4ce:	881a      	ldrh	r2, [r3, #0]
    a4d0:	68fb      	ldr	r3, [r7, #12]
    a4d2:	0011      	movs	r1, r2
    a4d4:	0018      	movs	r0, r3
    a4d6:	4b22      	ldr	r3, [pc, #136]	; (a560 <spi_write_buffer_wait+0x13c>)
    a4d8:	4798      	blx	r3

		if (module->receiver_enabled) {
    a4da:	68fb      	ldr	r3, [r7, #12]
    a4dc:	79db      	ldrb	r3, [r3, #7]
    a4de:	2214      	movs	r2, #20
    a4e0:	18ba      	adds	r2, r7, r2
    a4e2:	2114      	movs	r1, #20
    a4e4:	1879      	adds	r1, r7, r1
    a4e6:	8809      	ldrh	r1, [r1, #0]
    a4e8:	8011      	strh	r1, [r2, #0]
    a4ea:	2b00      	cmp	r3, #0
    a4ec:	d019      	beq.n	a522 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    a4ee:	46c0      	nop			; (mov r8, r8)
    a4f0:	68fb      	ldr	r3, [r7, #12]
    a4f2:	0018      	movs	r0, r3
    a4f4:	4b1b      	ldr	r3, [pc, #108]	; (a564 <spi_write_buffer_wait+0x140>)
    a4f6:	4798      	blx	r3
    a4f8:	0003      	movs	r3, r0
    a4fa:	001a      	movs	r2, r3
    a4fc:	2301      	movs	r3, #1
    a4fe:	4053      	eors	r3, r2
    a500:	b2db      	uxtb	r3, r3
    a502:	2b00      	cmp	r3, #0
    a504:	d1f4      	bne.n	a4f0 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    a506:	2310      	movs	r3, #16
    a508:	18fa      	adds	r2, r7, r3
    a50a:	68fb      	ldr	r3, [r7, #12]
    a50c:	0011      	movs	r1, r2
    a50e:	0018      	movs	r0, r3
    a510:	4b15      	ldr	r3, [pc, #84]	; (a568 <spi_write_buffer_wait+0x144>)
    a512:	4798      	blx	r3
			flush_length--;
    a514:	2314      	movs	r3, #20
    a516:	18fb      	adds	r3, r7, r3
    a518:	881a      	ldrh	r2, [r3, #0]
    a51a:	2314      	movs	r3, #20
    a51c:	18fb      	adds	r3, r7, r3
    a51e:	3a01      	subs	r2, #1
    a520:	801a      	strh	r2, [r3, #0]
	while (length--) {
    a522:	1dbb      	adds	r3, r7, #6
    a524:	881b      	ldrh	r3, [r3, #0]
    a526:	1dba      	adds	r2, r7, #6
    a528:	1e59      	subs	r1, r3, #1
    a52a:	8011      	strh	r1, [r2, #0]
    a52c:	2b00      	cmp	r3, #0
    a52e:	d198      	bne.n	a462 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    a530:	68fb      	ldr	r3, [r7, #12]
    a532:	795b      	ldrb	r3, [r3, #5]
    a534:	2b01      	cmp	r3, #1
    a536:	d10b      	bne.n	a550 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    a538:	46c0      	nop			; (mov r8, r8)
    a53a:	68fb      	ldr	r3, [r7, #12]
    a53c:	0018      	movs	r0, r3
    a53e:	4b0b      	ldr	r3, [pc, #44]	; (a56c <spi_write_buffer_wait+0x148>)
    a540:	4798      	blx	r3
    a542:	0003      	movs	r3, r0
    a544:	001a      	movs	r2, r3
    a546:	2301      	movs	r3, #1
    a548:	4053      	eors	r3, r2
    a54a:	b2db      	uxtb	r3, r3
    a54c:	2b00      	cmp	r3, #0
    a54e:	d1f4      	bne.n	a53a <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    a550:	2300      	movs	r3, #0
}
    a552:	0018      	movs	r0, r3
    a554:	46bd      	mov	sp, r7
    a556:	b006      	add	sp, #24
    a558:	bd80      	pop	{r7, pc}
    a55a:	46c0      	nop			; (mov r8, r8)
    a55c:	00009d41 	.word	0x00009d41
    a560:	00009d91 	.word	0x00009d91
    a564:	00009d69 	.word	0x00009d69
    a568:	00009dd9 	.word	0x00009dd9
    a56c:	00009d19 	.word	0x00009d19

0000a570 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    a570:	b580      	push	{r7, lr}
    a572:	b084      	sub	sp, #16
    a574:	af00      	add	r7, sp, #0
    a576:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a578:	687b      	ldr	r3, [r7, #4]
    a57a:	681b      	ldr	r3, [r3, #0]
    a57c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    a57e:	687b      	ldr	r3, [r7, #4]
    a580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a582:	781b      	ldrb	r3, [r3, #0]
    a584:	b2da      	uxtb	r2, r3
    a586:	230e      	movs	r3, #14
    a588:	18fb      	adds	r3, r7, r3
    a58a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    a58c:	687b      	ldr	r3, [r7, #4]
    a58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a590:	1c5a      	adds	r2, r3, #1
    a592:	687b      	ldr	r3, [r7, #4]
    a594:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    a596:	687b      	ldr	r3, [r7, #4]
    a598:	799b      	ldrb	r3, [r3, #6]
    a59a:	2b01      	cmp	r3, #1
    a59c:	d113      	bne.n	a5c6 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    a59e:	687b      	ldr	r3, [r7, #4]
    a5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a5a2:	781b      	ldrb	r3, [r3, #0]
    a5a4:	b2db      	uxtb	r3, r3
    a5a6:	021b      	lsls	r3, r3, #8
    a5a8:	b21a      	sxth	r2, r3
    a5aa:	230e      	movs	r3, #14
    a5ac:	18fb      	adds	r3, r7, r3
    a5ae:	2100      	movs	r1, #0
    a5b0:	5e5b      	ldrsh	r3, [r3, r1]
    a5b2:	4313      	orrs	r3, r2
    a5b4:	b21a      	sxth	r2, r3
    a5b6:	230e      	movs	r3, #14
    a5b8:	18fb      	adds	r3, r7, r3
    a5ba:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    a5bc:	687b      	ldr	r3, [r7, #4]
    a5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a5c0:	1c5a      	adds	r2, r3, #1
    a5c2:	687b      	ldr	r3, [r7, #4]
    a5c4:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    a5c6:	230e      	movs	r3, #14
    a5c8:	18fb      	adds	r3, r7, r3
    a5ca:	881b      	ldrh	r3, [r3, #0]
    a5cc:	05db      	lsls	r3, r3, #23
    a5ce:	0dda      	lsrs	r2, r3, #23
    a5d0:	68bb      	ldr	r3, [r7, #8]
    a5d2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    a5d4:	687b      	ldr	r3, [r7, #4]
    a5d6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    a5d8:	b29b      	uxth	r3, r3
    a5da:	3b01      	subs	r3, #1
    a5dc:	b29a      	uxth	r2, r3
    a5de:	687b      	ldr	r3, [r7, #4]
    a5e0:	869a      	strh	r2, [r3, #52]	; 0x34
}
    a5e2:	46c0      	nop			; (mov r8, r8)
    a5e4:	46bd      	mov	sp, r7
    a5e6:	b004      	add	sp, #16
    a5e8:	bd80      	pop	{r7, pc}
	...

0000a5ec <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    a5ec:	b580      	push	{r7, lr}
    a5ee:	b084      	sub	sp, #16
    a5f0:	af00      	add	r7, sp, #0
    a5f2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a5f4:	687b      	ldr	r3, [r7, #4]
    a5f6:	681b      	ldr	r3, [r3, #0]
    a5f8:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    a5fa:	4b08      	ldr	r3, [pc, #32]	; (a61c <_spi_write_dummy+0x30>)
    a5fc:	881b      	ldrh	r3, [r3, #0]
    a5fe:	001a      	movs	r2, r3
    a600:	68fb      	ldr	r3, [r7, #12]
    a602:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    a604:	687b      	ldr	r3, [r7, #4]
    a606:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a608:	b29b      	uxth	r3, r3
    a60a:	3b01      	subs	r3, #1
    a60c:	b29a      	uxth	r2, r3
    a60e:	687b      	ldr	r3, [r7, #4]
    a610:	865a      	strh	r2, [r3, #50]	; 0x32
}
    a612:	46c0      	nop			; (mov r8, r8)
    a614:	46bd      	mov	sp, r7
    a616:	b004      	add	sp, #16
    a618:	bd80      	pop	{r7, pc}
    a61a:	46c0      	nop			; (mov r8, r8)
    a61c:	2000071c 	.word	0x2000071c

0000a620 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    a620:	b580      	push	{r7, lr}
    a622:	b084      	sub	sp, #16
    a624:	af00      	add	r7, sp, #0
    a626:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a628:	687b      	ldr	r3, [r7, #4]
    a62a:	681b      	ldr	r3, [r3, #0]
    a62c:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    a62e:	230a      	movs	r3, #10
    a630:	18fb      	adds	r3, r7, r3
    a632:	2200      	movs	r2, #0
    a634:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    a636:	68fb      	ldr	r3, [r7, #12]
    a638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a63a:	230a      	movs	r3, #10
    a63c:	18fb      	adds	r3, r7, r3
    a63e:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    a640:	687b      	ldr	r3, [r7, #4]
    a642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a644:	b29b      	uxth	r3, r3
    a646:	3b01      	subs	r3, #1
    a648:	b29a      	uxth	r2, r3
    a64a:	687b      	ldr	r3, [r7, #4]
    a64c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    a64e:	46c0      	nop			; (mov r8, r8)
    a650:	46bd      	mov	sp, r7
    a652:	b004      	add	sp, #16
    a654:	bd80      	pop	{r7, pc}

0000a656 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    a656:	b580      	push	{r7, lr}
    a658:	b084      	sub	sp, #16
    a65a:	af00      	add	r7, sp, #0
    a65c:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a65e:	687b      	ldr	r3, [r7, #4]
    a660:	681b      	ldr	r3, [r3, #0]
    a662:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    a664:	68fb      	ldr	r3, [r7, #12]
    a666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a668:	b29a      	uxth	r2, r3
    a66a:	230a      	movs	r3, #10
    a66c:	18fb      	adds	r3, r7, r3
    a66e:	05d2      	lsls	r2, r2, #23
    a670:	0dd2      	lsrs	r2, r2, #23
    a672:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    a674:	687b      	ldr	r3, [r7, #4]
    a676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a678:	220a      	movs	r2, #10
    a67a:	18ba      	adds	r2, r7, r2
    a67c:	8812      	ldrh	r2, [r2, #0]
    a67e:	b2d2      	uxtb	r2, r2
    a680:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    a682:	687b      	ldr	r3, [r7, #4]
    a684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a686:	1c5a      	adds	r2, r3, #1
    a688:	687b      	ldr	r3, [r7, #4]
    a68a:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    a68c:	687b      	ldr	r3, [r7, #4]
    a68e:	799b      	ldrb	r3, [r3, #6]
    a690:	2b01      	cmp	r3, #1
    a692:	d10d      	bne.n	a6b0 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    a694:	687b      	ldr	r3, [r7, #4]
    a696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a698:	220a      	movs	r2, #10
    a69a:	18ba      	adds	r2, r7, r2
    a69c:	8812      	ldrh	r2, [r2, #0]
    a69e:	0a12      	lsrs	r2, r2, #8
    a6a0:	b292      	uxth	r2, r2
    a6a2:	b2d2      	uxtb	r2, r2
    a6a4:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    a6a6:	687b      	ldr	r3, [r7, #4]
    a6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a6aa:	1c5a      	adds	r2, r3, #1
    a6ac:	687b      	ldr	r3, [r7, #4]
    a6ae:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    a6b0:	687b      	ldr	r3, [r7, #4]
    a6b2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    a6b4:	b29b      	uxth	r3, r3
    a6b6:	3b01      	subs	r3, #1
    a6b8:	b29a      	uxth	r2, r3
    a6ba:	687b      	ldr	r3, [r7, #4]
    a6bc:	861a      	strh	r2, [r3, #48]	; 0x30
}
    a6be:	46c0      	nop			; (mov r8, r8)
    a6c0:	46bd      	mov	sp, r7
    a6c2:	b004      	add	sp, #16
    a6c4:	bd80      	pop	{r7, pc}
	...

0000a6c8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    a6c8:	b580      	push	{r7, lr}
    a6ca:	b086      	sub	sp, #24
    a6cc:	af00      	add	r7, sp, #0
    a6ce:	0002      	movs	r2, r0
    a6d0:	1dfb      	adds	r3, r7, #7
    a6d2:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    a6d4:	1dfb      	adds	r3, r7, #7
    a6d6:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    a6d8:	4b96      	ldr	r3, [pc, #600]	; (a934 <_spi_interrupt_handler+0x26c>)
    a6da:	0092      	lsls	r2, r2, #2
    a6dc:	58d3      	ldr	r3, [r2, r3]
    a6de:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a6e0:	697b      	ldr	r3, [r7, #20]
    a6e2:	681b      	ldr	r3, [r3, #0]
    a6e4:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    a6e6:	697b      	ldr	r3, [r7, #20]
    a6e8:	2237      	movs	r2, #55	; 0x37
    a6ea:	5c9a      	ldrb	r2, [r3, r2]
    a6ec:	697b      	ldr	r3, [r7, #20]
    a6ee:	2136      	movs	r1, #54	; 0x36
    a6f0:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    a6f2:	230f      	movs	r3, #15
    a6f4:	18fb      	adds	r3, r7, r3
    a6f6:	400a      	ands	r2, r1
    a6f8:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    a6fa:	693b      	ldr	r3, [r7, #16]
    a6fc:	7e1b      	ldrb	r3, [r3, #24]
    a6fe:	b2da      	uxtb	r2, r3
    a700:	230c      	movs	r3, #12
    a702:	18fb      	adds	r3, r7, r3
    a704:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    a706:	693b      	ldr	r3, [r7, #16]
    a708:	7d9b      	ldrb	r3, [r3, #22]
    a70a:	b2db      	uxtb	r3, r3
    a70c:	b29a      	uxth	r2, r3
    a70e:	230c      	movs	r3, #12
    a710:	18fb      	adds	r3, r7, r3
    a712:	210c      	movs	r1, #12
    a714:	1879      	adds	r1, r7, r1
    a716:	8809      	ldrh	r1, [r1, #0]
    a718:	400a      	ands	r2, r1
    a71a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    a71c:	230c      	movs	r3, #12
    a71e:	18fb      	adds	r3, r7, r3
    a720:	881b      	ldrh	r3, [r3, #0]
    a722:	2201      	movs	r2, #1
    a724:	4013      	ands	r3, r2
    a726:	d038      	beq.n	a79a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    a728:	697b      	ldr	r3, [r7, #20]
    a72a:	795b      	ldrb	r3, [r3, #5]
    a72c:	2b01      	cmp	r3, #1
    a72e:	d110      	bne.n	a752 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    a730:	697b      	ldr	r3, [r7, #20]
    a732:	7a5b      	ldrb	r3, [r3, #9]
    a734:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    a736:	2b00      	cmp	r3, #0
    a738:	d10b      	bne.n	a752 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    a73a:	697b      	ldr	r3, [r7, #20]
    a73c:	0018      	movs	r0, r3
    a73e:	4b7e      	ldr	r3, [pc, #504]	; (a938 <_spi_interrupt_handler+0x270>)
    a740:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    a742:	697b      	ldr	r3, [r7, #20]
    a744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a746:	b29b      	uxth	r3, r3
    a748:	2b00      	cmp	r3, #0
    a74a:	d102      	bne.n	a752 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    a74c:	693b      	ldr	r3, [r7, #16]
    a74e:	2201      	movs	r2, #1
    a750:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    a752:	697b      	ldr	r3, [r7, #20]
    a754:	795b      	ldrb	r3, [r3, #5]
		if (0
    a756:	2b01      	cmp	r3, #1
    a758:	d11f      	bne.n	a79a <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    a75a:	697b      	ldr	r3, [r7, #20]
    a75c:	7a5b      	ldrb	r3, [r3, #9]
    a75e:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    a760:	2b00      	cmp	r3, #0
    a762:	d01a      	beq.n	a79a <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    a764:	697b      	ldr	r3, [r7, #20]
    a766:	0018      	movs	r0, r3
    a768:	4b74      	ldr	r3, [pc, #464]	; (a93c <_spi_interrupt_handler+0x274>)
    a76a:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    a76c:	697b      	ldr	r3, [r7, #20]
    a76e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    a770:	b29b      	uxth	r3, r3
    a772:	2b00      	cmp	r3, #0
    a774:	d111      	bne.n	a79a <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    a776:	693b      	ldr	r3, [r7, #16]
    a778:	2201      	movs	r2, #1
    a77a:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    a77c:	697b      	ldr	r3, [r7, #20]
    a77e:	7a5b      	ldrb	r3, [r3, #9]
    a780:	b2db      	uxtb	r3, r3
    a782:	2b01      	cmp	r3, #1
    a784:	d109      	bne.n	a79a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    a786:	697b      	ldr	r3, [r7, #20]
    a788:	79db      	ldrb	r3, [r3, #7]
    a78a:	2201      	movs	r2, #1
    a78c:	4053      	eors	r3, r2
    a78e:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    a790:	2b00      	cmp	r3, #0
    a792:	d002      	beq.n	a79a <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    a794:	693b      	ldr	r3, [r7, #16]
    a796:	2202      	movs	r2, #2
    a798:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    a79a:	230c      	movs	r3, #12
    a79c:	18fb      	adds	r3, r7, r3
    a79e:	881b      	ldrh	r3, [r3, #0]
    a7a0:	2204      	movs	r2, #4
    a7a2:	4013      	ands	r3, r2
    a7a4:	d100      	bne.n	a7a8 <_spi_interrupt_handler+0xe0>
    a7a6:	e07e      	b.n	a8a6 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    a7a8:	693b      	ldr	r3, [r7, #16]
    a7aa:	8b5b      	ldrh	r3, [r3, #26]
    a7ac:	b29b      	uxth	r3, r3
    a7ae:	001a      	movs	r2, r3
    a7b0:	2304      	movs	r3, #4
    a7b2:	4013      	ands	r3, r2
    a7b4:	d022      	beq.n	a7fc <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    a7b6:	697b      	ldr	r3, [r7, #20]
    a7b8:	7a5b      	ldrb	r3, [r3, #9]
    a7ba:	b2db      	uxtb	r3, r3
    a7bc:	2b01      	cmp	r3, #1
    a7be:	d014      	beq.n	a7ea <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    a7c0:	697b      	ldr	r3, [r7, #20]
    a7c2:	2238      	movs	r2, #56	; 0x38
    a7c4:	211e      	movs	r1, #30
    a7c6:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    a7c8:	697b      	ldr	r3, [r7, #20]
    a7ca:	2203      	movs	r2, #3
    a7cc:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    a7ce:	693b      	ldr	r3, [r7, #16]
    a7d0:	2205      	movs	r2, #5
    a7d2:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    a7d4:	230f      	movs	r3, #15
    a7d6:	18fb      	adds	r3, r7, r3
    a7d8:	781b      	ldrb	r3, [r3, #0]
    a7da:	2208      	movs	r2, #8
    a7dc:	4013      	ands	r3, r2
    a7de:	d004      	beq.n	a7ea <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    a7e0:	697b      	ldr	r3, [r7, #20]
    a7e2:	699b      	ldr	r3, [r3, #24]
    a7e4:	697a      	ldr	r2, [r7, #20]
    a7e6:	0010      	movs	r0, r2
    a7e8:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    a7ea:	693b      	ldr	r3, [r7, #16]
    a7ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a7ee:	230a      	movs	r3, #10
    a7f0:	18fb      	adds	r3, r7, r3
    a7f2:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    a7f4:	693b      	ldr	r3, [r7, #16]
    a7f6:	2204      	movs	r2, #4
    a7f8:	835a      	strh	r2, [r3, #26]
    a7fa:	e054      	b.n	a8a6 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    a7fc:	697b      	ldr	r3, [r7, #20]
    a7fe:	7a5b      	ldrb	r3, [r3, #9]
    a800:	b2db      	uxtb	r3, r3
    a802:	2b01      	cmp	r3, #1
    a804:	d11e      	bne.n	a844 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    a806:	697b      	ldr	r3, [r7, #20]
    a808:	0018      	movs	r0, r3
    a80a:	4b4d      	ldr	r3, [pc, #308]	; (a940 <_spi_interrupt_handler+0x278>)
    a80c:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    a80e:	697b      	ldr	r3, [r7, #20]
    a810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a812:	b29b      	uxth	r3, r3
    a814:	2b00      	cmp	r3, #0
    a816:	d146      	bne.n	a8a6 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    a818:	693b      	ldr	r3, [r7, #16]
    a81a:	2204      	movs	r2, #4
    a81c:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    a81e:	697b      	ldr	r3, [r7, #20]
    a820:	2238      	movs	r2, #56	; 0x38
    a822:	2100      	movs	r1, #0
    a824:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    a826:	697b      	ldr	r3, [r7, #20]
    a828:	2203      	movs	r2, #3
    a82a:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    a82c:	230f      	movs	r3, #15
    a82e:	18fb      	adds	r3, r7, r3
    a830:	781b      	ldrb	r3, [r3, #0]
    a832:	2201      	movs	r2, #1
    a834:	4013      	ands	r3, r2
    a836:	d036      	beq.n	a8a6 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    a838:	697b      	ldr	r3, [r7, #20]
    a83a:	68db      	ldr	r3, [r3, #12]
    a83c:	697a      	ldr	r2, [r7, #20]
    a83e:	0010      	movs	r0, r2
    a840:	4798      	blx	r3
    a842:	e030      	b.n	a8a6 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    a844:	697b      	ldr	r3, [r7, #20]
    a846:	0018      	movs	r0, r3
    a848:	4b3e      	ldr	r3, [pc, #248]	; (a944 <_spi_interrupt_handler+0x27c>)
    a84a:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    a84c:	697b      	ldr	r3, [r7, #20]
    a84e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    a850:	b29b      	uxth	r3, r3
    a852:	2b00      	cmp	r3, #0
    a854:	d127      	bne.n	a8a6 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    a856:	697b      	ldr	r3, [r7, #20]
    a858:	2238      	movs	r2, #56	; 0x38
    a85a:	2100      	movs	r1, #0
    a85c:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    a85e:	693b      	ldr	r3, [r7, #16]
    a860:	2204      	movs	r2, #4
    a862:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    a864:	697b      	ldr	r3, [r7, #20]
    a866:	7a5b      	ldrb	r3, [r3, #9]
    a868:	b2db      	uxtb	r3, r3
    a86a:	2b02      	cmp	r3, #2
    a86c:	d10b      	bne.n	a886 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    a86e:	230f      	movs	r3, #15
    a870:	18fb      	adds	r3, r7, r3
    a872:	781b      	ldrb	r3, [r3, #0]
    a874:	2204      	movs	r2, #4
    a876:	4013      	ands	r3, r2
    a878:	d015      	beq.n	a8a6 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    a87a:	697b      	ldr	r3, [r7, #20]
    a87c:	695b      	ldr	r3, [r3, #20]
    a87e:	697a      	ldr	r2, [r7, #20]
    a880:	0010      	movs	r0, r2
    a882:	4798      	blx	r3
    a884:	e00f      	b.n	a8a6 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    a886:	697b      	ldr	r3, [r7, #20]
    a888:	7a5b      	ldrb	r3, [r3, #9]
    a88a:	b2db      	uxtb	r3, r3
    a88c:	2b00      	cmp	r3, #0
    a88e:	d10a      	bne.n	a8a6 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    a890:	230f      	movs	r3, #15
    a892:	18fb      	adds	r3, r7, r3
    a894:	781b      	ldrb	r3, [r3, #0]
    a896:	2202      	movs	r2, #2
    a898:	4013      	ands	r3, r2
    a89a:	d004      	beq.n	a8a6 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    a89c:	697b      	ldr	r3, [r7, #20]
    a89e:	691b      	ldr	r3, [r3, #16]
    a8a0:	697a      	ldr	r2, [r7, #20]
    a8a2:	0010      	movs	r0, r2
    a8a4:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    a8a6:	230c      	movs	r3, #12
    a8a8:	18fb      	adds	r3, r7, r3
    a8aa:	881b      	ldrh	r3, [r3, #0]
    a8ac:	2202      	movs	r2, #2
    a8ae:	4013      	ands	r3, r2
    a8b0:	d024      	beq.n	a8fc <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    a8b2:	697b      	ldr	r3, [r7, #20]
    a8b4:	795b      	ldrb	r3, [r3, #5]
    a8b6:	2b01      	cmp	r3, #1
    a8b8:	d120      	bne.n	a8fc <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    a8ba:	697b      	ldr	r3, [r7, #20]
    a8bc:	7a5b      	ldrb	r3, [r3, #9]
    a8be:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    a8c0:	2b01      	cmp	r3, #1
    a8c2:	d11b      	bne.n	a8fc <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    a8c4:	697b      	ldr	r3, [r7, #20]
    a8c6:	79db      	ldrb	r3, [r3, #7]
    a8c8:	2201      	movs	r2, #1
    a8ca:	4053      	eors	r3, r2
    a8cc:	b2db      	uxtb	r3, r3
    a8ce:	2b00      	cmp	r3, #0
    a8d0:	d014      	beq.n	a8fc <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    a8d2:	693b      	ldr	r3, [r7, #16]
    a8d4:	2202      	movs	r2, #2
    a8d6:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    a8d8:	697b      	ldr	r3, [r7, #20]
    a8da:	2203      	movs	r2, #3
    a8dc:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    a8de:	697b      	ldr	r3, [r7, #20]
    a8e0:	2238      	movs	r2, #56	; 0x38
    a8e2:	2100      	movs	r1, #0
    a8e4:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    a8e6:	230f      	movs	r3, #15
    a8e8:	18fb      	adds	r3, r7, r3
    a8ea:	781b      	ldrb	r3, [r3, #0]
    a8ec:	2201      	movs	r2, #1
    a8ee:	4013      	ands	r3, r2
    a8f0:	d004      	beq.n	a8fc <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    a8f2:	697b      	ldr	r3, [r7, #20]
    a8f4:	68db      	ldr	r3, [r3, #12]
    a8f6:	697a      	ldr	r2, [r7, #20]
    a8f8:	0010      	movs	r0, r2
    a8fa:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    a8fc:	230c      	movs	r3, #12
    a8fe:	18fb      	adds	r3, r7, r3
    a900:	881b      	ldrh	r3, [r3, #0]
    a902:	2280      	movs	r2, #128	; 0x80
    a904:	4013      	ands	r3, r2
    a906:	d010      	beq.n	a92a <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    a908:	693b      	ldr	r3, [r7, #16]
    a90a:	2280      	movs	r2, #128	; 0x80
    a90c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    a90e:	693b      	ldr	r3, [r7, #16]
    a910:	2280      	movs	r2, #128	; 0x80
    a912:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    a914:	230f      	movs	r3, #15
    a916:	18fb      	adds	r3, r7, r3
    a918:	781b      	ldrb	r3, [r3, #0]
    a91a:	2240      	movs	r2, #64	; 0x40
    a91c:	4013      	ands	r3, r2
    a91e:	d004      	beq.n	a92a <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    a920:	697b      	ldr	r3, [r7, #20]
    a922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a924:	697a      	ldr	r2, [r7, #20]
    a926:	0010      	movs	r0, r2
    a928:	4798      	blx	r3
		}
	}
#  endif
}
    a92a:	46c0      	nop			; (mov r8, r8)
    a92c:	46bd      	mov	sp, r7
    a92e:	b006      	add	sp, #24
    a930:	bd80      	pop	{r7, pc}
    a932:	46c0      	nop			; (mov r8, r8)
    a934:	20000904 	.word	0x20000904
    a938:	0000a5ed 	.word	0x0000a5ed
    a93c:	0000a571 	.word	0x0000a571
    a940:	0000a621 	.word	0x0000a621
    a944:	0000a657 	.word	0x0000a657

0000a948 <system_gclk_chan_get_config_defaults>:
{
    a948:	b580      	push	{r7, lr}
    a94a:	b082      	sub	sp, #8
    a94c:	af00      	add	r7, sp, #0
    a94e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    a950:	687b      	ldr	r3, [r7, #4]
    a952:	2200      	movs	r2, #0
    a954:	701a      	strb	r2, [r3, #0]
}
    a956:	46c0      	nop			; (mov r8, r8)
    a958:	46bd      	mov	sp, r7
    a95a:	b002      	add	sp, #8
    a95c:	bd80      	pop	{r7, pc}
	...

0000a960 <system_apb_clock_set_mask>:
{
    a960:	b580      	push	{r7, lr}
    a962:	b082      	sub	sp, #8
    a964:	af00      	add	r7, sp, #0
    a966:	0002      	movs	r2, r0
    a968:	6039      	str	r1, [r7, #0]
    a96a:	1dfb      	adds	r3, r7, #7
    a96c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a96e:	1dfb      	adds	r3, r7, #7
    a970:	781b      	ldrb	r3, [r3, #0]
    a972:	2b01      	cmp	r3, #1
    a974:	d00a      	beq.n	a98c <system_apb_clock_set_mask+0x2c>
    a976:	2b02      	cmp	r3, #2
    a978:	d00f      	beq.n	a99a <system_apb_clock_set_mask+0x3a>
    a97a:	2b00      	cmp	r3, #0
    a97c:	d114      	bne.n	a9a8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    a97e:	4b0e      	ldr	r3, [pc, #56]	; (a9b8 <system_apb_clock_set_mask+0x58>)
    a980:	4a0d      	ldr	r2, [pc, #52]	; (a9b8 <system_apb_clock_set_mask+0x58>)
    a982:	6991      	ldr	r1, [r2, #24]
    a984:	683a      	ldr	r2, [r7, #0]
    a986:	430a      	orrs	r2, r1
    a988:	619a      	str	r2, [r3, #24]
			break;
    a98a:	e00f      	b.n	a9ac <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    a98c:	4b0a      	ldr	r3, [pc, #40]	; (a9b8 <system_apb_clock_set_mask+0x58>)
    a98e:	4a0a      	ldr	r2, [pc, #40]	; (a9b8 <system_apb_clock_set_mask+0x58>)
    a990:	69d1      	ldr	r1, [r2, #28]
    a992:	683a      	ldr	r2, [r7, #0]
    a994:	430a      	orrs	r2, r1
    a996:	61da      	str	r2, [r3, #28]
			break;
    a998:	e008      	b.n	a9ac <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    a99a:	4b07      	ldr	r3, [pc, #28]	; (a9b8 <system_apb_clock_set_mask+0x58>)
    a99c:	4a06      	ldr	r2, [pc, #24]	; (a9b8 <system_apb_clock_set_mask+0x58>)
    a99e:	6a11      	ldr	r1, [r2, #32]
    a9a0:	683a      	ldr	r2, [r7, #0]
    a9a2:	430a      	orrs	r2, r1
    a9a4:	621a      	str	r2, [r3, #32]
			break;
    a9a6:	e001      	b.n	a9ac <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    a9a8:	2317      	movs	r3, #23
    a9aa:	e000      	b.n	a9ae <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    a9ac:	2300      	movs	r3, #0
}
    a9ae:	0018      	movs	r0, r3
    a9b0:	46bd      	mov	sp, r7
    a9b2:	b002      	add	sp, #8
    a9b4:	bd80      	pop	{r7, pc}
    a9b6:	46c0      	nop			; (mov r8, r8)
    a9b8:	40000400 	.word	0x40000400

0000a9bc <system_pinmux_get_config_defaults>:
{
    a9bc:	b580      	push	{r7, lr}
    a9be:	b082      	sub	sp, #8
    a9c0:	af00      	add	r7, sp, #0
    a9c2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    a9c4:	687b      	ldr	r3, [r7, #4]
    a9c6:	2280      	movs	r2, #128	; 0x80
    a9c8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a9ca:	687b      	ldr	r3, [r7, #4]
    a9cc:	2200      	movs	r2, #0
    a9ce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    a9d0:	687b      	ldr	r3, [r7, #4]
    a9d2:	2201      	movs	r2, #1
    a9d4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    a9d6:	687b      	ldr	r3, [r7, #4]
    a9d8:	2200      	movs	r2, #0
    a9da:	70da      	strb	r2, [r3, #3]
}
    a9dc:	46c0      	nop			; (mov r8, r8)
    a9de:	46bd      	mov	sp, r7
    a9e0:	b002      	add	sp, #8
    a9e2:	bd80      	pop	{r7, pc}

0000a9e4 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    a9e4:	b580      	push	{r7, lr}
    a9e6:	b084      	sub	sp, #16
    a9e8:	af00      	add	r7, sp, #0
    a9ea:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    a9ec:	2300      	movs	r3, #0
    a9ee:	60fb      	str	r3, [r7, #12]
    a9f0:	e00c      	b.n	aa0c <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    a9f2:	4b0a      	ldr	r3, [pc, #40]	; (aa1c <_tcc_get_inst_index+0x38>)
    a9f4:	68fa      	ldr	r2, [r7, #12]
    a9f6:	0092      	lsls	r2, r2, #2
    a9f8:	58d2      	ldr	r2, [r2, r3]
    a9fa:	687b      	ldr	r3, [r7, #4]
    a9fc:	429a      	cmp	r2, r3
    a9fe:	d102      	bne.n	aa06 <_tcc_get_inst_index+0x22>
			return i;
    aa00:	68fb      	ldr	r3, [r7, #12]
    aa02:	b2db      	uxtb	r3, r3
    aa04:	e006      	b.n	aa14 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    aa06:	68fb      	ldr	r3, [r7, #12]
    aa08:	3301      	adds	r3, #1
    aa0a:	60fb      	str	r3, [r7, #12]
    aa0c:	68fb      	ldr	r3, [r7, #12]
    aa0e:	2b02      	cmp	r3, #2
    aa10:	d9ef      	bls.n	a9f2 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    aa12:	2300      	movs	r3, #0
}
    aa14:	0018      	movs	r0, r3
    aa16:	46bd      	mov	sp, r7
    aa18:	b004      	add	sp, #16
    aa1a:	bd80      	pop	{r7, pc}
    aa1c:	0001a624 	.word	0x0001a624

0000aa20 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    aa20:	b590      	push	{r4, r7, lr}
    aa22:	b085      	sub	sp, #20
    aa24:	af00      	add	r7, sp, #0
    aa26:	6078      	str	r0, [r7, #4]
    aa28:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    aa2a:	230f      	movs	r3, #15
    aa2c:	18fc      	adds	r4, r7, r3
    aa2e:	683b      	ldr	r3, [r7, #0]
    aa30:	0018      	movs	r0, r3
    aa32:	4bad      	ldr	r3, [pc, #692]	; (ace8 <tcc_get_config_defaults+0x2c8>)
    aa34:	4798      	blx	r3
    aa36:	0003      	movs	r3, r0
    aa38:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    aa3a:	687b      	ldr	r3, [r7, #4]
    aa3c:	2200      	movs	r2, #0
    aa3e:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    aa40:	230f      	movs	r3, #15
    aa42:	18fb      	adds	r3, r7, r3
    aa44:	781a      	ldrb	r2, [r3, #0]
    aa46:	4ba9      	ldr	r3, [pc, #676]	; (acec <tcc_get_config_defaults+0x2cc>)
    aa48:	0092      	lsls	r2, r2, #2
    aa4a:	58d2      	ldr	r2, [r2, r3]
    aa4c:	687b      	ldr	r3, [r7, #4]
    aa4e:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    aa50:	687b      	ldr	r3, [r7, #4]
    aa52:	2200      	movs	r2, #0
    aa54:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    aa56:	687b      	ldr	r3, [r7, #4]
    aa58:	2200      	movs	r2, #0
    aa5a:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    aa5c:	687b      	ldr	r3, [r7, #4]
    aa5e:	2200      	movs	r2, #0
    aa60:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    aa62:	687b      	ldr	r3, [r7, #4]
    aa64:	2200      	movs	r2, #0
    aa66:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    aa68:	687b      	ldr	r3, [r7, #4]
    aa6a:	2200      	movs	r2, #0
    aa6c:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    aa6e:	687b      	ldr	r3, [r7, #4]
    aa70:	2200      	movs	r2, #0
    aa72:	61da      	str	r2, [r3, #28]
    aa74:	687b      	ldr	r3, [r7, #4]
    aa76:	2200      	movs	r2, #0
    aa78:	621a      	str	r2, [r3, #32]
    aa7a:	687b      	ldr	r3, [r7, #4]
    aa7c:	2200      	movs	r2, #0
    aa7e:	625a      	str	r2, [r3, #36]	; 0x24
    aa80:	687b      	ldr	r3, [r7, #4]
    aa82:	2200      	movs	r2, #0
    aa84:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    aa86:	687b      	ldr	r3, [r7, #4]
    aa88:	2200      	movs	r2, #0
    aa8a:	751a      	strb	r2, [r3, #20]
    aa8c:	687b      	ldr	r3, [r7, #4]
    aa8e:	2200      	movs	r2, #0
    aa90:	755a      	strb	r2, [r3, #21]
    aa92:	687b      	ldr	r3, [r7, #4]
    aa94:	2200      	movs	r2, #0
    aa96:	759a      	strb	r2, [r3, #22]
    aa98:	687b      	ldr	r3, [r7, #4]
    aa9a:	2200      	movs	r2, #0
    aa9c:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    aa9e:	687b      	ldr	r3, [r7, #4]
    aaa0:	2200      	movs	r2, #0
    aaa2:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    aaa4:	687b      	ldr	r3, [r7, #4]
    aaa6:	2200      	movs	r2, #0
    aaa8:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    aaaa:	687b      	ldr	r3, [r7, #4]
    aaac:	2200      	movs	r2, #0
    aaae:	741a      	strb	r2, [r3, #16]
    aab0:	687b      	ldr	r3, [r7, #4]
    aab2:	2200      	movs	r2, #0
    aab4:	745a      	strb	r2, [r3, #17]
    aab6:	687b      	ldr	r3, [r7, #4]
    aab8:	2200      	movs	r2, #0
    aaba:	749a      	strb	r2, [r3, #18]
    aabc:	687b      	ldr	r3, [r7, #4]
    aabe:	2200      	movs	r2, #0
    aac0:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    aac2:	687b      	ldr	r3, [r7, #4]
    aac4:	222c      	movs	r2, #44	; 0x2c
    aac6:	2100      	movs	r1, #0
    aac8:	5499      	strb	r1, [r3, r2]
    aaca:	687b      	ldr	r3, [r7, #4]
    aacc:	222d      	movs	r2, #45	; 0x2d
    aace:	2100      	movs	r1, #0
    aad0:	5499      	strb	r1, [r3, r2]
    aad2:	687b      	ldr	r3, [r7, #4]
    aad4:	222e      	movs	r2, #46	; 0x2e
    aad6:	2100      	movs	r1, #0
    aad8:	5499      	strb	r1, [r3, r2]
    aada:	687b      	ldr	r3, [r7, #4]
    aadc:	222f      	movs	r2, #47	; 0x2f
    aade:	2100      	movs	r1, #0
    aae0:	5499      	strb	r1, [r3, r2]
    aae2:	687b      	ldr	r3, [r7, #4]
    aae4:	2230      	movs	r2, #48	; 0x30
    aae6:	2100      	movs	r1, #0
    aae8:	5499      	strb	r1, [r3, r2]
    aaea:	687b      	ldr	r3, [r7, #4]
    aaec:	2231      	movs	r2, #49	; 0x31
    aaee:	2100      	movs	r1, #0
    aaf0:	5499      	strb	r1, [r3, r2]
    aaf2:	687b      	ldr	r3, [r7, #4]
    aaf4:	2232      	movs	r2, #50	; 0x32
    aaf6:	2100      	movs	r1, #0
    aaf8:	5499      	strb	r1, [r3, r2]
    aafa:	687b      	ldr	r3, [r7, #4]
    aafc:	2233      	movs	r2, #51	; 0x33
    aafe:	2100      	movs	r1, #0
    ab00:	5499      	strb	r1, [r3, r2]
    ab02:	687b      	ldr	r3, [r7, #4]
    ab04:	2234      	movs	r2, #52	; 0x34
    ab06:	2100      	movs	r1, #0
    ab08:	5499      	strb	r1, [r3, r2]
    ab0a:	687b      	ldr	r3, [r7, #4]
    ab0c:	2235      	movs	r2, #53	; 0x35
    ab0e:	2100      	movs	r1, #0
    ab10:	5499      	strb	r1, [r3, r2]
    ab12:	687b      	ldr	r3, [r7, #4]
    ab14:	2236      	movs	r2, #54	; 0x36
    ab16:	2100      	movs	r1, #0
    ab18:	5499      	strb	r1, [r3, r2]
    ab1a:	687b      	ldr	r3, [r7, #4]
    ab1c:	2237      	movs	r2, #55	; 0x37
    ab1e:	2100      	movs	r1, #0
    ab20:	5499      	strb	r1, [r3, r2]
    ab22:	687b      	ldr	r3, [r7, #4]
    ab24:	2238      	movs	r2, #56	; 0x38
    ab26:	2100      	movs	r1, #0
    ab28:	5499      	strb	r1, [r3, r2]
    ab2a:	687b      	ldr	r3, [r7, #4]
    ab2c:	2239      	movs	r2, #57	; 0x39
    ab2e:	2100      	movs	r1, #0
    ab30:	5499      	strb	r1, [r3, r2]
    ab32:	687b      	ldr	r3, [r7, #4]
    ab34:	223a      	movs	r2, #58	; 0x3a
    ab36:	2100      	movs	r1, #0
    ab38:	5499      	strb	r1, [r3, r2]
    ab3a:	687b      	ldr	r3, [r7, #4]
    ab3c:	223b      	movs	r2, #59	; 0x3b
    ab3e:	2100      	movs	r1, #0
    ab40:	5499      	strb	r1, [r3, r2]
    ab42:	687b      	ldr	r3, [r7, #4]
    ab44:	223c      	movs	r2, #60	; 0x3c
    ab46:	2100      	movs	r1, #0
    ab48:	5499      	strb	r1, [r3, r2]
    ab4a:	687b      	ldr	r3, [r7, #4]
    ab4c:	223d      	movs	r2, #61	; 0x3d
    ab4e:	2100      	movs	r1, #0
    ab50:	5499      	strb	r1, [r3, r2]
    ab52:	687b      	ldr	r3, [r7, #4]
    ab54:	223e      	movs	r2, #62	; 0x3e
    ab56:	2100      	movs	r1, #0
    ab58:	5499      	strb	r1, [r3, r2]
    ab5a:	687b      	ldr	r3, [r7, #4]
    ab5c:	223f      	movs	r2, #63	; 0x3f
    ab5e:	2100      	movs	r1, #0
    ab60:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    ab62:	687b      	ldr	r3, [r7, #4]
    ab64:	2240      	movs	r2, #64	; 0x40
    ab66:	2100      	movs	r1, #0
    ab68:	5499      	strb	r1, [r3, r2]
    ab6a:	687b      	ldr	r3, [r7, #4]
    ab6c:	2241      	movs	r2, #65	; 0x41
    ab6e:	2100      	movs	r1, #0
    ab70:	5499      	strb	r1, [r3, r2]
    ab72:	687b      	ldr	r3, [r7, #4]
    ab74:	2242      	movs	r2, #66	; 0x42
    ab76:	2100      	movs	r1, #0
    ab78:	5499      	strb	r1, [r3, r2]
    ab7a:	687b      	ldr	r3, [r7, #4]
    ab7c:	2243      	movs	r2, #67	; 0x43
    ab7e:	2100      	movs	r1, #0
    ab80:	5499      	strb	r1, [r3, r2]
    ab82:	687b      	ldr	r3, [r7, #4]
    ab84:	2244      	movs	r2, #68	; 0x44
    ab86:	2100      	movs	r1, #0
    ab88:	5499      	strb	r1, [r3, r2]
    ab8a:	687b      	ldr	r3, [r7, #4]
    ab8c:	2245      	movs	r2, #69	; 0x45
    ab8e:	2100      	movs	r1, #0
    ab90:	5499      	strb	r1, [r3, r2]
    ab92:	687b      	ldr	r3, [r7, #4]
    ab94:	2246      	movs	r2, #70	; 0x46
    ab96:	2100      	movs	r1, #0
    ab98:	5499      	strb	r1, [r3, r2]
    ab9a:	687b      	ldr	r3, [r7, #4]
    ab9c:	2247      	movs	r2, #71	; 0x47
    ab9e:	2100      	movs	r1, #0
    aba0:	5499      	strb	r1, [r3, r2]
    aba2:	687b      	ldr	r3, [r7, #4]
    aba4:	2248      	movs	r2, #72	; 0x48
    aba6:	2100      	movs	r1, #0
    aba8:	5499      	strb	r1, [r3, r2]
    abaa:	687b      	ldr	r3, [r7, #4]
    abac:	2249      	movs	r2, #73	; 0x49
    abae:	2100      	movs	r1, #0
    abb0:	5499      	strb	r1, [r3, r2]
    abb2:	687b      	ldr	r3, [r7, #4]
    abb4:	224a      	movs	r2, #74	; 0x4a
    abb6:	2100      	movs	r1, #0
    abb8:	5499      	strb	r1, [r3, r2]
    abba:	687b      	ldr	r3, [r7, #4]
    abbc:	224b      	movs	r2, #75	; 0x4b
    abbe:	2100      	movs	r1, #0
    abc0:	5499      	strb	r1, [r3, r2]
    abc2:	687b      	ldr	r3, [r7, #4]
    abc4:	224c      	movs	r2, #76	; 0x4c
    abc6:	2100      	movs	r1, #0
    abc8:	5499      	strb	r1, [r3, r2]
    abca:	687b      	ldr	r3, [r7, #4]
    abcc:	224d      	movs	r2, #77	; 0x4d
    abce:	2100      	movs	r1, #0
    abd0:	5499      	strb	r1, [r3, r2]
    abd2:	687b      	ldr	r3, [r7, #4]
    abd4:	224e      	movs	r2, #78	; 0x4e
    abd6:	2100      	movs	r1, #0
    abd8:	5499      	strb	r1, [r3, r2]
    abda:	687b      	ldr	r3, [r7, #4]
    abdc:	224f      	movs	r2, #79	; 0x4f
    abde:	2100      	movs	r1, #0
    abe0:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    abe2:	687b      	ldr	r3, [r7, #4]
    abe4:	2250      	movs	r2, #80	; 0x50
    abe6:	2100      	movs	r1, #0
    abe8:	5499      	strb	r1, [r3, r2]
    abea:	687b      	ldr	r3, [r7, #4]
    abec:	2251      	movs	r2, #81	; 0x51
    abee:	2100      	movs	r1, #0
    abf0:	5499      	strb	r1, [r3, r2]
    abf2:	687b      	ldr	r3, [r7, #4]
    abf4:	2252      	movs	r2, #82	; 0x52
    abf6:	2100      	movs	r1, #0
    abf8:	5499      	strb	r1, [r3, r2]
    abfa:	687b      	ldr	r3, [r7, #4]
    abfc:	2253      	movs	r2, #83	; 0x53
    abfe:	2100      	movs	r1, #0
    ac00:	5499      	strb	r1, [r3, r2]
    ac02:	687b      	ldr	r3, [r7, #4]
    ac04:	2254      	movs	r2, #84	; 0x54
    ac06:	2100      	movs	r1, #0
    ac08:	5499      	strb	r1, [r3, r2]
    ac0a:	687b      	ldr	r3, [r7, #4]
    ac0c:	2255      	movs	r2, #85	; 0x55
    ac0e:	2100      	movs	r1, #0
    ac10:	5499      	strb	r1, [r3, r2]
    ac12:	687b      	ldr	r3, [r7, #4]
    ac14:	2256      	movs	r2, #86	; 0x56
    ac16:	2100      	movs	r1, #0
    ac18:	5499      	strb	r1, [r3, r2]
    ac1a:	687b      	ldr	r3, [r7, #4]
    ac1c:	2257      	movs	r2, #87	; 0x57
    ac1e:	2100      	movs	r1, #0
    ac20:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    ac22:	687b      	ldr	r3, [r7, #4]
    ac24:	2298      	movs	r2, #152	; 0x98
    ac26:	2100      	movs	r1, #0
    ac28:	5499      	strb	r1, [r3, r2]
    ac2a:	687b      	ldr	r3, [r7, #4]
    ac2c:	2200      	movs	r2, #0
    ac2e:	659a      	str	r2, [r3, #88]	; 0x58
    ac30:	687b      	ldr	r3, [r7, #4]
    ac32:	2200      	movs	r2, #0
    ac34:	679a      	str	r2, [r3, #120]	; 0x78
    ac36:	687b      	ldr	r3, [r7, #4]
    ac38:	2299      	movs	r2, #153	; 0x99
    ac3a:	2100      	movs	r1, #0
    ac3c:	5499      	strb	r1, [r3, r2]
    ac3e:	687b      	ldr	r3, [r7, #4]
    ac40:	2200      	movs	r2, #0
    ac42:	65da      	str	r2, [r3, #92]	; 0x5c
    ac44:	687b      	ldr	r3, [r7, #4]
    ac46:	2200      	movs	r2, #0
    ac48:	67da      	str	r2, [r3, #124]	; 0x7c
    ac4a:	687b      	ldr	r3, [r7, #4]
    ac4c:	229a      	movs	r2, #154	; 0x9a
    ac4e:	2100      	movs	r1, #0
    ac50:	5499      	strb	r1, [r3, r2]
    ac52:	687b      	ldr	r3, [r7, #4]
    ac54:	2200      	movs	r2, #0
    ac56:	661a      	str	r2, [r3, #96]	; 0x60
    ac58:	687b      	ldr	r3, [r7, #4]
    ac5a:	2280      	movs	r2, #128	; 0x80
    ac5c:	2100      	movs	r1, #0
    ac5e:	5099      	str	r1, [r3, r2]
    ac60:	687b      	ldr	r3, [r7, #4]
    ac62:	229b      	movs	r2, #155	; 0x9b
    ac64:	2100      	movs	r1, #0
    ac66:	5499      	strb	r1, [r3, r2]
    ac68:	687b      	ldr	r3, [r7, #4]
    ac6a:	2200      	movs	r2, #0
    ac6c:	665a      	str	r2, [r3, #100]	; 0x64
    ac6e:	687b      	ldr	r3, [r7, #4]
    ac70:	2284      	movs	r2, #132	; 0x84
    ac72:	2100      	movs	r1, #0
    ac74:	5099      	str	r1, [r3, r2]
    ac76:	687b      	ldr	r3, [r7, #4]
    ac78:	229c      	movs	r2, #156	; 0x9c
    ac7a:	2100      	movs	r1, #0
    ac7c:	5499      	strb	r1, [r3, r2]
    ac7e:	687b      	ldr	r3, [r7, #4]
    ac80:	2200      	movs	r2, #0
    ac82:	669a      	str	r2, [r3, #104]	; 0x68
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	2288      	movs	r2, #136	; 0x88
    ac88:	2100      	movs	r1, #0
    ac8a:	5099      	str	r1, [r3, r2]
    ac8c:	687b      	ldr	r3, [r7, #4]
    ac8e:	229d      	movs	r2, #157	; 0x9d
    ac90:	2100      	movs	r1, #0
    ac92:	5499      	strb	r1, [r3, r2]
    ac94:	687b      	ldr	r3, [r7, #4]
    ac96:	2200      	movs	r2, #0
    ac98:	66da      	str	r2, [r3, #108]	; 0x6c
    ac9a:	687b      	ldr	r3, [r7, #4]
    ac9c:	228c      	movs	r2, #140	; 0x8c
    ac9e:	2100      	movs	r1, #0
    aca0:	5099      	str	r1, [r3, r2]
    aca2:	687b      	ldr	r3, [r7, #4]
    aca4:	229e      	movs	r2, #158	; 0x9e
    aca6:	2100      	movs	r1, #0
    aca8:	5499      	strb	r1, [r3, r2]
    acaa:	687b      	ldr	r3, [r7, #4]
    acac:	2200      	movs	r2, #0
    acae:	671a      	str	r2, [r3, #112]	; 0x70
    acb0:	687b      	ldr	r3, [r7, #4]
    acb2:	2290      	movs	r2, #144	; 0x90
    acb4:	2100      	movs	r1, #0
    acb6:	5099      	str	r1, [r3, r2]
    acb8:	687b      	ldr	r3, [r7, #4]
    acba:	229f      	movs	r2, #159	; 0x9f
    acbc:	2100      	movs	r1, #0
    acbe:	5499      	strb	r1, [r3, r2]
    acc0:	687b      	ldr	r3, [r7, #4]
    acc2:	2200      	movs	r2, #0
    acc4:	675a      	str	r2, [r3, #116]	; 0x74
    acc6:	687b      	ldr	r3, [r7, #4]
    acc8:	2294      	movs	r2, #148	; 0x94
    acca:	2100      	movs	r1, #0
    accc:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    acce:	687b      	ldr	r3, [r7, #4]
    acd0:	22a0      	movs	r2, #160	; 0xa0
    acd2:	2101      	movs	r1, #1
    acd4:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    acd6:	687b      	ldr	r3, [r7, #4]
    acd8:	22a1      	movs	r2, #161	; 0xa1
    acda:	2100      	movs	r1, #0
    acdc:	5499      	strb	r1, [r3, r2]
}
    acde:	46c0      	nop			; (mov r8, r8)
    ace0:	46bd      	mov	sp, r7
    ace2:	b005      	add	sp, #20
    ace4:	bd90      	pop	{r4, r7, pc}
    ace6:	46c0      	nop			; (mov r8, r8)
    ace8:	0000a9e5 	.word	0x0000a9e5
    acec:	0001a640 	.word	0x0001a640

0000acf0 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    acf0:	b580      	push	{r7, lr}
    acf2:	b086      	sub	sp, #24
    acf4:	af00      	add	r7, sp, #0
    acf6:	60b9      	str	r1, [r7, #8]
    acf8:	607a      	str	r2, [r7, #4]
    acfa:	230f      	movs	r3, #15
    acfc:	18fb      	adds	r3, r7, r3
    acfe:	1c02      	adds	r2, r0, #0
    ad00:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    ad02:	2300      	movs	r3, #0
    ad04:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    ad06:	2300      	movs	r3, #0
    ad08:	613b      	str	r3, [r7, #16]
    ad0a:	e01d      	b.n	ad48 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    ad0c:	68ba      	ldr	r2, [r7, #8]
    ad0e:	693b      	ldr	r3, [r7, #16]
    ad10:	18d3      	adds	r3, r2, r3
    ad12:	3310      	adds	r3, #16
    ad14:	781b      	ldrb	r3, [r3, #0]
    ad16:	2b01      	cmp	r3, #1
    ad18:	d113      	bne.n	ad42 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    ad1a:	230f      	movs	r3, #15
    ad1c:	18fb      	adds	r3, r7, r3
    ad1e:	781b      	ldrb	r3, [r3, #0]
    ad20:	4a1b      	ldr	r2, [pc, #108]	; (ad90 <_tcc_build_ctrla+0xa0>)
    ad22:	5cd3      	ldrb	r3, [r2, r3]
    ad24:	001a      	movs	r2, r3
    ad26:	693b      	ldr	r3, [r7, #16]
    ad28:	429a      	cmp	r2, r3
    ad2a:	da01      	bge.n	ad30 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    ad2c:	2317      	movs	r3, #23
    ad2e:	e02a      	b.n	ad86 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    ad30:	2380      	movs	r3, #128	; 0x80
    ad32:	045a      	lsls	r2, r3, #17
    ad34:	693b      	ldr	r3, [r7, #16]
    ad36:	409a      	lsls	r2, r3
    ad38:	0013      	movs	r3, r2
    ad3a:	001a      	movs	r2, r3
    ad3c:	697b      	ldr	r3, [r7, #20]
    ad3e:	4313      	orrs	r3, r2
    ad40:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    ad42:	693b      	ldr	r3, [r7, #16]
    ad44:	3301      	adds	r3, #1
    ad46:	613b      	str	r3, [r7, #16]
    ad48:	693b      	ldr	r3, [r7, #16]
    ad4a:	2b03      	cmp	r3, #3
    ad4c:	ddde      	ble.n	ad0c <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    ad4e:	68bb      	ldr	r3, [r7, #8]
    ad50:	22a1      	movs	r2, #161	; 0xa1
    ad52:	5c9b      	ldrb	r3, [r3, r2]
    ad54:	2b00      	cmp	r3, #0
    ad56:	d004      	beq.n	ad62 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    ad58:	697b      	ldr	r3, [r7, #20]
    ad5a:	2280      	movs	r2, #128	; 0x80
    ad5c:	0112      	lsls	r2, r2, #4
    ad5e:	4313      	orrs	r3, r2
    ad60:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    ad62:	68bb      	ldr	r3, [r7, #8]
    ad64:	7b1b      	ldrb	r3, [r3, #12]
    ad66:	031b      	lsls	r3, r3, #12
    ad68:	001a      	movs	r2, r3
    ad6a:	697b      	ldr	r3, [r7, #20]
    ad6c:	4313      	orrs	r3, r2
    ad6e:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    ad70:	68bb      	ldr	r3, [r7, #8]
    ad72:	7adb      	ldrb	r3, [r3, #11]
    ad74:	021b      	lsls	r3, r3, #8
    ad76:	001a      	movs	r2, r3
    ad78:	697b      	ldr	r3, [r7, #20]
    ad7a:	4313      	orrs	r3, r2
    ad7c:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    ad7e:	687b      	ldr	r3, [r7, #4]
    ad80:	697a      	ldr	r2, [r7, #20]
    ad82:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    ad84:	2300      	movs	r3, #0
}
    ad86:	0018      	movs	r0, r3
    ad88:	46bd      	mov	sp, r7
    ad8a:	b006      	add	sp, #24
    ad8c:	bd80      	pop	{r7, pc}
    ad8e:	46c0      	nop			; (mov r8, r8)
    ad90:	0001a64c 	.word	0x0001a64c

0000ad94 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    ad94:	b580      	push	{r7, lr}
    ad96:	b086      	sub	sp, #24
    ad98:	af00      	add	r7, sp, #0
    ad9a:	60b9      	str	r1, [r7, #8]
    ad9c:	607a      	str	r2, [r7, #4]
    ad9e:	230f      	movs	r3, #15
    ada0:	18fb      	adds	r3, r7, r3
    ada2:	1c02      	adds	r2, r0, #0
    ada4:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    ada6:	2317      	movs	r3, #23
    ada8:	18fb      	adds	r3, r7, r3
    adaa:	2200      	movs	r2, #0
    adac:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    adae:	68bb      	ldr	r3, [r7, #8]
    adb0:	7a1b      	ldrb	r3, [r3, #8]
    adb2:	2b00      	cmp	r3, #0
    adb4:	d007      	beq.n	adc6 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    adb6:	2317      	movs	r3, #23
    adb8:	18fb      	adds	r3, r7, r3
    adba:	2217      	movs	r2, #23
    adbc:	18ba      	adds	r2, r7, r2
    adbe:	7812      	ldrb	r2, [r2, #0]
    adc0:	2104      	movs	r1, #4
    adc2:	430a      	orrs	r2, r1
    adc4:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    adc6:	68bb      	ldr	r3, [r7, #8]
    adc8:	7a5b      	ldrb	r3, [r3, #9]
    adca:	2b01      	cmp	r3, #1
    adcc:	d107      	bne.n	adde <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    adce:	2317      	movs	r3, #23
    add0:	18fb      	adds	r3, r7, r3
    add2:	2217      	movs	r2, #23
    add4:	18ba      	adds	r2, r7, r2
    add6:	7812      	ldrb	r2, [r2, #0]
    add8:	2101      	movs	r1, #1
    adda:	430a      	orrs	r2, r1
    addc:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    adde:	687b      	ldr	r3, [r7, #4]
    ade0:	2217      	movs	r2, #23
    ade2:	18ba      	adds	r2, r7, r2
    ade4:	7812      	ldrb	r2, [r2, #0]
    ade6:	701a      	strb	r2, [r3, #0]
}
    ade8:	46c0      	nop			; (mov r8, r8)
    adea:	46bd      	mov	sp, r7
    adec:	b006      	add	sp, #24
    adee:	bd80      	pop	{r7, pc}

0000adf0 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    adf0:	b580      	push	{r7, lr}
    adf2:	b088      	sub	sp, #32
    adf4:	af00      	add	r7, sp, #0
    adf6:	60b9      	str	r1, [r7, #8]
    adf8:	607a      	str	r2, [r7, #4]
    adfa:	230f      	movs	r3, #15
    adfc:	18fb      	adds	r3, r7, r3
    adfe:	1c02      	adds	r2, r0, #0
    ae00:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    ae02:	230f      	movs	r3, #15
    ae04:	18fb      	adds	r3, r7, r3
    ae06:	781a      	ldrb	r2, [r3, #0]
    ae08:	231b      	movs	r3, #27
    ae0a:	18fb      	adds	r3, r7, r3
    ae0c:	493e      	ldr	r1, [pc, #248]	; (af08 <_tcc_build_faults+0x118>)
    ae0e:	5c8a      	ldrb	r2, [r1, r2]
    ae10:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    ae12:	2300      	movs	r3, #0
    ae14:	61fb      	str	r3, [r7, #28]
    ae16:	e06e      	b.n	aef6 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    ae18:	69fa      	ldr	r2, [r7, #28]
    ae1a:	0013      	movs	r3, r2
    ae1c:	009b      	lsls	r3, r3, #2
    ae1e:	189b      	adds	r3, r3, r2
    ae20:	005b      	lsls	r3, r3, #1
    ae22:	3328      	adds	r3, #40	; 0x28
    ae24:	68ba      	ldr	r2, [r7, #8]
    ae26:	18d3      	adds	r3, r2, r3
    ae28:	3304      	adds	r3, #4
    ae2a:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    ae2c:	697b      	ldr	r3, [r7, #20]
    ae2e:	7a5b      	ldrb	r3, [r3, #9]
    ae30:	221b      	movs	r2, #27
    ae32:	18ba      	adds	r2, r7, r2
    ae34:	7812      	ldrb	r2, [r2, #0]
    ae36:	429a      	cmp	r2, r3
    ae38:	d801      	bhi.n	ae3e <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    ae3a:	2317      	movs	r3, #23
    ae3c:	e05f      	b.n	aefe <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    ae3e:	697b      	ldr	r3, [r7, #20]
    ae40:	781b      	ldrb	r3, [r3, #0]
    ae42:	2b0f      	cmp	r3, #15
    ae44:	d901      	bls.n	ae4a <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    ae46:	2317      	movs	r3, #23
    ae48:	e059      	b.n	aefe <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    ae4a:	697b      	ldr	r3, [r7, #20]
    ae4c:	781b      	ldrb	r3, [r3, #0]
    ae4e:	061b      	lsls	r3, r3, #24
    ae50:	001a      	movs	r2, r3
    ae52:	23f0      	movs	r3, #240	; 0xf0
    ae54:	051b      	lsls	r3, r3, #20
    ae56:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    ae58:	697b      	ldr	r3, [r7, #20]
    ae5a:	785b      	ldrb	r3, [r3, #1]
    ae5c:	041b      	lsls	r3, r3, #16
    ae5e:	0019      	movs	r1, r3
    ae60:	23ff      	movs	r3, #255	; 0xff
    ae62:	041b      	lsls	r3, r3, #16
    ae64:	400b      	ands	r3, r1
    ae66:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    ae68:	697b      	ldr	r3, [r7, #20]
    ae6a:	789b      	ldrb	r3, [r3, #2]
    ae6c:	2b00      	cmp	r3, #0
    ae6e:	d001      	beq.n	ae74 <_tcc_build_faults+0x84>
    ae70:	2380      	movs	r3, #128	; 0x80
    ae72:	e000      	b.n	ae76 <_tcc_build_faults+0x86>
    ae74:	2300      	movs	r3, #0
    ae76:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    ae78:	697b      	ldr	r3, [r7, #20]
    ae7a:	78db      	ldrb	r3, [r3, #3]
    ae7c:	2b00      	cmp	r3, #0
    ae7e:	d001      	beq.n	ae84 <_tcc_build_faults+0x94>
    ae80:	2308      	movs	r3, #8
    ae82:	e000      	b.n	ae86 <_tcc_build_faults+0x96>
    ae84:	2300      	movs	r3, #0
    ae86:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    ae88:	697b      	ldr	r3, [r7, #20]
    ae8a:	791b      	ldrb	r3, [r3, #4]
    ae8c:	2b00      	cmp	r3, #0
    ae8e:	d001      	beq.n	ae94 <_tcc_build_faults+0xa4>
    ae90:	2310      	movs	r3, #16
    ae92:	e000      	b.n	ae96 <_tcc_build_faults+0xa6>
    ae94:	2300      	movs	r3, #0
    ae96:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    ae98:	697b      	ldr	r3, [r7, #20]
    ae9a:	795b      	ldrb	r3, [r3, #5]
    ae9c:	0019      	movs	r1, r3
    ae9e:	2303      	movs	r3, #3
    aea0:	400b      	ands	r3, r1
    aea2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    aea4:	697b      	ldr	r3, [r7, #20]
    aea6:	799b      	ldrb	r3, [r3, #6]
    aea8:	015b      	lsls	r3, r3, #5
    aeaa:	0019      	movs	r1, r3
    aeac:	2360      	movs	r3, #96	; 0x60
    aeae:	400b      	ands	r3, r1
    aeb0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    aeb2:	697b      	ldr	r3, [r7, #20]
    aeb4:	79db      	ldrb	r3, [r3, #7]
    aeb6:	021b      	lsls	r3, r3, #8
    aeb8:	0019      	movs	r1, r3
    aeba:	23c0      	movs	r3, #192	; 0xc0
    aebc:	009b      	lsls	r3, r3, #2
    aebe:	400b      	ands	r3, r1
    aec0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    aec2:	697b      	ldr	r3, [r7, #20]
    aec4:	7a1b      	ldrb	r3, [r3, #8]
    aec6:	031b      	lsls	r3, r3, #12
    aec8:	0019      	movs	r1, r3
    aeca:	23e0      	movs	r3, #224	; 0xe0
    aecc:	01db      	lsls	r3, r3, #7
    aece:	400b      	ands	r3, r1
    aed0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    aed2:	697b      	ldr	r3, [r7, #20]
    aed4:	7a5b      	ldrb	r3, [r3, #9]
    aed6:	029b      	lsls	r3, r3, #10
    aed8:	0019      	movs	r1, r3
    aeda:	23c0      	movs	r3, #192	; 0xc0
    aedc:	011b      	lsls	r3, r3, #4
    aede:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    aee0:	4313      	orrs	r3, r2
    aee2:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    aee4:	69fb      	ldr	r3, [r7, #28]
    aee6:	009b      	lsls	r3, r3, #2
    aee8:	687a      	ldr	r2, [r7, #4]
    aeea:	18d3      	adds	r3, r2, r3
    aeec:	693a      	ldr	r2, [r7, #16]
    aeee:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    aef0:	69fb      	ldr	r3, [r7, #28]
    aef2:	3301      	adds	r3, #1
    aef4:	61fb      	str	r3, [r7, #28]
    aef6:	69fb      	ldr	r3, [r7, #28]
    aef8:	2b01      	cmp	r3, #1
    aefa:	dd8d      	ble.n	ae18 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    aefc:	2300      	movs	r3, #0
}
    aefe:	0018      	movs	r0, r3
    af00:	46bd      	mov	sp, r7
    af02:	b008      	add	sp, #32
    af04:	bd80      	pop	{r7, pc}
    af06:	46c0      	nop			; (mov r8, r8)
    af08:	0001a64c 	.word	0x0001a64c

0000af0c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    af0c:	b580      	push	{r7, lr}
    af0e:	b088      	sub	sp, #32
    af10:	af00      	add	r7, sp, #0
    af12:	60b9      	str	r1, [r7, #8]
    af14:	607a      	str	r2, [r7, #4]
    af16:	230f      	movs	r3, #15
    af18:	18fb      	adds	r3, r7, r3
    af1a:	1c02      	adds	r2, r0, #0
    af1c:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    af1e:	230f      	movs	r3, #15
    af20:	18fb      	adds	r3, r7, r3
    af22:	781a      	ldrb	r2, [r3, #0]
    af24:	2317      	movs	r3, #23
    af26:	18fb      	adds	r3, r7, r3
    af28:	492d      	ldr	r1, [pc, #180]	; (afe0 <_tcc_build_drvctrl+0xd4>)
    af2a:	5c8a      	ldrb	r2, [r1, r2]
    af2c:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    af2e:	2300      	movs	r3, #0
    af30:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    af32:	2300      	movs	r3, #0
    af34:	61fb      	str	r3, [r7, #28]
    af36:	e048      	b.n	afca <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    af38:	68ba      	ldr	r2, [r7, #8]
    af3a:	2150      	movs	r1, #80	; 0x50
    af3c:	69fb      	ldr	r3, [r7, #28]
    af3e:	18d3      	adds	r3, r2, r3
    af40:	185b      	adds	r3, r3, r1
    af42:	781b      	ldrb	r3, [r3, #0]
    af44:	2b00      	cmp	r3, #0
    af46:	d010      	beq.n	af6a <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    af48:	2317      	movs	r3, #23
    af4a:	18fb      	adds	r3, r7, r3
    af4c:	781a      	ldrb	r2, [r3, #0]
    af4e:	69fb      	ldr	r3, [r7, #28]
    af50:	429a      	cmp	r2, r3
    af52:	d801      	bhi.n	af58 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    af54:	2317      	movs	r3, #23
    af56:	e03f      	b.n	afd8 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    af58:	2380      	movs	r3, #128	; 0x80
    af5a:	025a      	lsls	r2, r3, #9
    af5c:	69fb      	ldr	r3, [r7, #28]
    af5e:	409a      	lsls	r2, r3
    af60:	0013      	movs	r3, r2
    af62:	001a      	movs	r2, r3
    af64:	69bb      	ldr	r3, [r7, #24]
    af66:	4313      	orrs	r3, r2
    af68:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    af6a:	68ba      	ldr	r2, [r7, #8]
    af6c:	69fb      	ldr	r3, [r7, #28]
    af6e:	331c      	adds	r3, #28
    af70:	005b      	lsls	r3, r3, #1
    af72:	18d3      	adds	r3, r2, r3
    af74:	3309      	adds	r3, #9
    af76:	781b      	ldrb	r3, [r3, #0]
    af78:	2b00      	cmp	r3, #0
    af7a:	d023      	beq.n	afc4 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    af7c:	2317      	movs	r3, #23
    af7e:	18fb      	adds	r3, r7, r3
    af80:	781a      	ldrb	r2, [r3, #0]
    af82:	69fb      	ldr	r3, [r7, #28]
    af84:	429a      	cmp	r2, r3
    af86:	d801      	bhi.n	af8c <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    af88:	2317      	movs	r3, #23
    af8a:	e025      	b.n	afd8 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    af8c:	68ba      	ldr	r2, [r7, #8]
    af8e:	69fb      	ldr	r3, [r7, #28]
    af90:	331c      	adds	r3, #28
    af92:	005b      	lsls	r3, r3, #1
    af94:	18d3      	adds	r3, r2, r3
    af96:	3309      	adds	r3, #9
    af98:	781b      	ldrb	r3, [r3, #0]
    af9a:	2b02      	cmp	r3, #2
    af9c:	d10a      	bne.n	afb4 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    af9e:	2302      	movs	r3, #2
    afa0:	33ff      	adds	r3, #255	; 0xff
    afa2:	001a      	movs	r2, r3
    afa4:	69fb      	ldr	r3, [r7, #28]
    afa6:	409a      	lsls	r2, r3
    afa8:	0013      	movs	r3, r2
    afaa:	001a      	movs	r2, r3
    afac:	69bb      	ldr	r3, [r7, #24]
    afae:	4313      	orrs	r3, r2
    afb0:	61bb      	str	r3, [r7, #24]
    afb2:	e007      	b.n	afc4 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    afb4:	2201      	movs	r2, #1
    afb6:	69fb      	ldr	r3, [r7, #28]
    afb8:	409a      	lsls	r2, r3
    afba:	0013      	movs	r3, r2
    afbc:	001a      	movs	r2, r3
    afbe:	69bb      	ldr	r3, [r7, #24]
    afc0:	4313      	orrs	r3, r2
    afc2:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    afc4:	69fb      	ldr	r3, [r7, #28]
    afc6:	3301      	adds	r3, #1
    afc8:	61fb      	str	r3, [r7, #28]
    afca:	69fb      	ldr	r3, [r7, #28]
    afcc:	2b07      	cmp	r3, #7
    afce:	d9b3      	bls.n	af38 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    afd0:	687b      	ldr	r3, [r7, #4]
    afd2:	69ba      	ldr	r2, [r7, #24]
    afd4:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    afd6:	2300      	movs	r3, #0
}
    afd8:	0018      	movs	r0, r3
    afda:	46bd      	mov	sp, r7
    afdc:	b008      	add	sp, #32
    afde:	bd80      	pop	{r7, pc}
    afe0:	0001a650 	.word	0x0001a650

0000afe4 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    afe4:	b580      	push	{r7, lr}
    afe6:	b088      	sub	sp, #32
    afe8:	af00      	add	r7, sp, #0
    afea:	60b9      	str	r1, [r7, #8]
    afec:	607a      	str	r2, [r7, #4]
    afee:	230f      	movs	r3, #15
    aff0:	18fb      	adds	r3, r7, r3
    aff2:	1c02      	adds	r2, r0, #0
    aff4:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    aff6:	230f      	movs	r3, #15
    aff8:	18fb      	adds	r3, r7, r3
    affa:	781a      	ldrb	r2, [r3, #0]
    affc:	2317      	movs	r3, #23
    affe:	18fb      	adds	r3, r7, r3
    b000:	491d      	ldr	r1, [pc, #116]	; (b078 <_tcc_build_waves+0x94>)
    b002:	5c8a      	ldrb	r2, [r1, r2]
    b004:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    b006:	68bb      	ldr	r3, [r7, #8]
    b008:	3310      	adds	r3, #16
    b00a:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    b00c:	693b      	ldr	r3, [r7, #16]
    b00e:	7a5b      	ldrb	r3, [r3, #9]
    b010:	011b      	lsls	r3, r3, #4
    b012:	001a      	movs	r2, r3
    b014:	2330      	movs	r3, #48	; 0x30
    b016:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    b018:	693b      	ldr	r3, [r7, #16]
    b01a:	7a1b      	ldrb	r3, [r3, #8]
    b01c:	0019      	movs	r1, r3
    b01e:	2307      	movs	r3, #7
    b020:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    b022:	4313      	orrs	r3, r2
    b024:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    b026:	2300      	movs	r3, #0
    b028:	61fb      	str	r3, [r7, #28]
    b02a:	e01a      	b.n	b062 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    b02c:	693a      	ldr	r2, [r7, #16]
    b02e:	69fb      	ldr	r3, [r7, #28]
    b030:	18d3      	adds	r3, r2, r3
    b032:	3304      	adds	r3, #4
    b034:	781b      	ldrb	r3, [r3, #0]
    b036:	2b00      	cmp	r3, #0
    b038:	d010      	beq.n	b05c <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    b03a:	2317      	movs	r3, #23
    b03c:	18fb      	adds	r3, r7, r3
    b03e:	781a      	ldrb	r2, [r3, #0]
    b040:	69fb      	ldr	r3, [r7, #28]
    b042:	429a      	cmp	r2, r3
    b044:	dc01      	bgt.n	b04a <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    b046:	2317      	movs	r3, #23
    b048:	e012      	b.n	b070 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    b04a:	2380      	movs	r3, #128	; 0x80
    b04c:	025a      	lsls	r2, r3, #9
    b04e:	69fb      	ldr	r3, [r7, #28]
    b050:	409a      	lsls	r2, r3
    b052:	0013      	movs	r3, r2
    b054:	001a      	movs	r2, r3
    b056:	69bb      	ldr	r3, [r7, #24]
    b058:	4313      	orrs	r3, r2
    b05a:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    b05c:	69fb      	ldr	r3, [r7, #28]
    b05e:	3301      	adds	r3, #1
    b060:	61fb      	str	r3, [r7, #28]
    b062:	69fb      	ldr	r3, [r7, #28]
    b064:	2b03      	cmp	r3, #3
    b066:	dde1      	ble.n	b02c <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    b068:	687b      	ldr	r3, [r7, #4]
    b06a:	69ba      	ldr	r2, [r7, #24]
    b06c:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    b06e:	2300      	movs	r3, #0
}
    b070:	0018      	movs	r0, r3
    b072:	46bd      	mov	sp, r7
    b074:	b008      	add	sp, #32
    b076:	bd80      	pop	{r7, pc}
    b078:	0001a64c 	.word	0x0001a64c

0000b07c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    b07c:	b590      	push	{r4, r7, lr}
    b07e:	b091      	sub	sp, #68	; 0x44
    b080:	af00      	add	r7, sp, #0
    b082:	60f8      	str	r0, [r7, #12]
    b084:	60b9      	str	r1, [r7, #8]
    b086:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    b088:	233b      	movs	r3, #59	; 0x3b
    b08a:	18fc      	adds	r4, r7, r3
    b08c:	68bb      	ldr	r3, [r7, #8]
    b08e:	0018      	movs	r0, r3
    b090:	4bc4      	ldr	r3, [pc, #784]	; (b3a4 <tcc_init+0x328>)
    b092:	4798      	blx	r3
    b094:	0003      	movs	r3, r0
    b096:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    b098:	233b      	movs	r3, #59	; 0x3b
    b09a:	18fb      	adds	r3, r7, r3
    b09c:	781a      	ldrb	r2, [r3, #0]
    b09e:	4bc2      	ldr	r3, [pc, #776]	; (b3a8 <tcc_init+0x32c>)
    b0a0:	0092      	lsls	r2, r2, #2
    b0a2:	58d3      	ldr	r3, [r2, r3]
    b0a4:	0019      	movs	r1, r3
    b0a6:	2002      	movs	r0, #2
    b0a8:	4bc0      	ldr	r3, [pc, #768]	; (b3ac <tcc_init+0x330>)
    b0aa:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    b0ac:	68bb      	ldr	r3, [r7, #8]
    b0ae:	681b      	ldr	r3, [r3, #0]
    b0b0:	2202      	movs	r2, #2
    b0b2:	4013      	ands	r3, r2
    b0b4:	d001      	beq.n	b0ba <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    b0b6:	231c      	movs	r3, #28
    b0b8:	e1be      	b.n	b438 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    b0ba:	68bb      	ldr	r3, [r7, #8]
    b0bc:	681b      	ldr	r3, [r3, #0]
    b0be:	2201      	movs	r2, #1
    b0c0:	4013      	ands	r3, r2
    b0c2:	d001      	beq.n	b0c8 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    b0c4:	231c      	movs	r3, #28
    b0c6:	e1b7      	b.n	b438 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    b0c8:	233b      	movs	r3, #59	; 0x3b
    b0ca:	18fb      	adds	r3, r7, r3
    b0cc:	781a      	ldrb	r2, [r3, #0]
    b0ce:	4bb8      	ldr	r3, [pc, #736]	; (b3b0 <tcc_init+0x334>)
    b0d0:	0092      	lsls	r2, r2, #2
    b0d2:	58d3      	ldr	r3, [r2, r3]
    b0d4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    b0d6:	687b      	ldr	r3, [r7, #4]
    b0d8:	681a      	ldr	r2, [r3, #0]
    b0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b0dc:	429a      	cmp	r2, r3
    b0de:	d804      	bhi.n	b0ea <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    b0e0:	687b      	ldr	r3, [r7, #4]
    b0e2:	685a      	ldr	r2, [r3, #4]
    b0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b0e6:	429a      	cmp	r2, r3
    b0e8:	d901      	bls.n	b0ee <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    b0ea:	2317      	movs	r3, #23
    b0ec:	e1a4      	b.n	b438 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    b0ee:	2300      	movs	r3, #0
    b0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    b0f2:	e00e      	b.n	b112 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    b0f4:	687a      	ldr	r2, [r7, #4]
    b0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0f8:	3306      	adds	r3, #6
    b0fa:	009b      	lsls	r3, r3, #2
    b0fc:	18d3      	adds	r3, r2, r3
    b0fe:	3304      	adds	r3, #4
    b100:	681a      	ldr	r2, [r3, #0]
    b102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b104:	429a      	cmp	r2, r3
    b106:	d901      	bls.n	b10c <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    b108:	2317      	movs	r3, #23
    b10a:	e195      	b.n	b438 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    b10c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b10e:	3301      	adds	r3, #1
    b110:	63fb      	str	r3, [r7, #60]	; 0x3c
    b112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b114:	2b03      	cmp	r3, #3
    b116:	dded      	ble.n	b0f4 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    b118:	2300      	movs	r3, #0
    b11a:	63fb      	str	r3, [r7, #60]	; 0x3c
    b11c:	e019      	b.n	b152 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    b11e:	687a      	ldr	r2, [r7, #4]
    b120:	2198      	movs	r1, #152	; 0x98
    b122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b124:	18d3      	adds	r3, r2, r3
    b126:	185b      	adds	r3, r3, r1
    b128:	781b      	ldrb	r3, [r3, #0]
    b12a:	2201      	movs	r2, #1
    b12c:	4053      	eors	r3, r2
    b12e:	b2db      	uxtb	r3, r3
    b130:	2b00      	cmp	r3, #0
    b132:	d10a      	bne.n	b14a <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    b134:	233b      	movs	r3, #59	; 0x3b
    b136:	18fb      	adds	r3, r7, r3
    b138:	781b      	ldrb	r3, [r3, #0]
    b13a:	4a9e      	ldr	r2, [pc, #632]	; (b3b4 <tcc_init+0x338>)
    b13c:	5cd3      	ldrb	r3, [r2, r3]
    b13e:	001a      	movs	r2, r3
    b140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b142:	429a      	cmp	r2, r3
    b144:	dc02      	bgt.n	b14c <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    b146:	2317      	movs	r3, #23
    b148:	e176      	b.n	b438 <tcc_init+0x3bc>
			continue;
    b14a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    b14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b14e:	3301      	adds	r3, #1
    b150:	63fb      	str	r3, [r7, #60]	; 0x3c
    b152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b154:	2b07      	cmp	r3, #7
    b156:	dde2      	ble.n	b11e <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    b158:	2300      	movs	r3, #0
    b15a:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    b15c:	2333      	movs	r3, #51	; 0x33
    b15e:	18fc      	adds	r4, r7, r3
    b160:	232c      	movs	r3, #44	; 0x2c
    b162:	18fa      	adds	r2, r7, r3
    b164:	6879      	ldr	r1, [r7, #4]
    b166:	233b      	movs	r3, #59	; 0x3b
    b168:	18fb      	adds	r3, r7, r3
    b16a:	781b      	ldrb	r3, [r3, #0]
    b16c:	0018      	movs	r0, r3
    b16e:	4b92      	ldr	r3, [pc, #584]	; (b3b8 <tcc_init+0x33c>)
    b170:	4798      	blx	r3
    b172:	0003      	movs	r3, r0
    b174:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    b176:	2333      	movs	r3, #51	; 0x33
    b178:	18fb      	adds	r3, r7, r3
    b17a:	781b      	ldrb	r3, [r3, #0]
    b17c:	2b00      	cmp	r3, #0
    b17e:	d003      	beq.n	b188 <tcc_init+0x10c>
		return status;
    b180:	2333      	movs	r3, #51	; 0x33
    b182:	18fb      	adds	r3, r7, r3
    b184:	781b      	ldrb	r3, [r3, #0]
    b186:	e157      	b.n	b438 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    b188:	232b      	movs	r3, #43	; 0x2b
    b18a:	18fa      	adds	r2, r7, r3
    b18c:	6879      	ldr	r1, [r7, #4]
    b18e:	233b      	movs	r3, #59	; 0x3b
    b190:	18fb      	adds	r3, r7, r3
    b192:	781b      	ldrb	r3, [r3, #0]
    b194:	0018      	movs	r0, r3
    b196:	4b89      	ldr	r3, [pc, #548]	; (b3bc <tcc_init+0x340>)
    b198:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    b19a:	2333      	movs	r3, #51	; 0x33
    b19c:	18fc      	adds	r4, r7, r3
    b19e:	2320      	movs	r3, #32
    b1a0:	18fa      	adds	r2, r7, r3
    b1a2:	6879      	ldr	r1, [r7, #4]
    b1a4:	233b      	movs	r3, #59	; 0x3b
    b1a6:	18fb      	adds	r3, r7, r3
    b1a8:	781b      	ldrb	r3, [r3, #0]
    b1aa:	0018      	movs	r0, r3
    b1ac:	4b84      	ldr	r3, [pc, #528]	; (b3c0 <tcc_init+0x344>)
    b1ae:	4798      	blx	r3
    b1b0:	0003      	movs	r3, r0
    b1b2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    b1b4:	2333      	movs	r3, #51	; 0x33
    b1b6:	18fb      	adds	r3, r7, r3
    b1b8:	781b      	ldrb	r3, [r3, #0]
    b1ba:	2b00      	cmp	r3, #0
    b1bc:	d003      	beq.n	b1c6 <tcc_init+0x14a>
		return status;
    b1be:	2333      	movs	r3, #51	; 0x33
    b1c0:	18fb      	adds	r3, r7, r3
    b1c2:	781b      	ldrb	r3, [r3, #0]
    b1c4:	e138      	b.n	b438 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    b1c6:	2300      	movs	r3, #0
    b1c8:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    b1ca:	2333      	movs	r3, #51	; 0x33
    b1cc:	18fc      	adds	r4, r7, r3
    b1ce:	231c      	movs	r3, #28
    b1d0:	18fa      	adds	r2, r7, r3
    b1d2:	6879      	ldr	r1, [r7, #4]
    b1d4:	233b      	movs	r3, #59	; 0x3b
    b1d6:	18fb      	adds	r3, r7, r3
    b1d8:	781b      	ldrb	r3, [r3, #0]
    b1da:	0018      	movs	r0, r3
    b1dc:	4b79      	ldr	r3, [pc, #484]	; (b3c4 <tcc_init+0x348>)
    b1de:	4798      	blx	r3
    b1e0:	0003      	movs	r3, r0
    b1e2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    b1e4:	2333      	movs	r3, #51	; 0x33
    b1e6:	18fb      	adds	r3, r7, r3
    b1e8:	781b      	ldrb	r3, [r3, #0]
    b1ea:	2b00      	cmp	r3, #0
    b1ec:	d003      	beq.n	b1f6 <tcc_init+0x17a>
		return status;
    b1ee:	2333      	movs	r3, #51	; 0x33
    b1f0:	18fb      	adds	r3, r7, r3
    b1f2:	781b      	ldrb	r3, [r3, #0]
    b1f4:	e120      	b.n	b438 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    b1f6:	2333      	movs	r3, #51	; 0x33
    b1f8:	18fc      	adds	r4, r7, r3
    b1fa:	2318      	movs	r3, #24
    b1fc:	18fa      	adds	r2, r7, r3
    b1fe:	6879      	ldr	r1, [r7, #4]
    b200:	233b      	movs	r3, #59	; 0x3b
    b202:	18fb      	adds	r3, r7, r3
    b204:	781b      	ldrb	r3, [r3, #0]
    b206:	0018      	movs	r0, r3
    b208:	4b6f      	ldr	r3, [pc, #444]	; (b3c8 <tcc_init+0x34c>)
    b20a:	4798      	blx	r3
    b20c:	0003      	movs	r3, r0
    b20e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    b210:	2333      	movs	r3, #51	; 0x33
    b212:	18fb      	adds	r3, r7, r3
    b214:	781b      	ldrb	r3, [r3, #0]
    b216:	2b00      	cmp	r3, #0
    b218:	d003      	beq.n	b222 <tcc_init+0x1a6>
		return status;
    b21a:	2333      	movs	r3, #51	; 0x33
    b21c:	18fb      	adds	r3, r7, r3
    b21e:	781b      	ldrb	r3, [r3, #0]
    b220:	e10a      	b.n	b438 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    b222:	2300      	movs	r3, #0
    b224:	63fb      	str	r3, [r7, #60]	; 0x3c
    b226:	e009      	b.n	b23c <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    b228:	68fa      	ldr	r2, [r7, #12]
    b22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b22c:	009b      	lsls	r3, r3, #2
    b22e:	18d3      	adds	r3, r2, r3
    b230:	3304      	adds	r3, #4
    b232:	2200      	movs	r2, #0
    b234:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    b236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b238:	3301      	adds	r3, #1
    b23a:	63fb      	str	r3, [r7, #60]	; 0x3c
    b23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b23e:	2b0b      	cmp	r3, #11
    b240:	ddf2      	ble.n	b228 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    b242:	68fb      	ldr	r3, [r7, #12]
    b244:	2200      	movs	r2, #0
    b246:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    b248:	68fb      	ldr	r3, [r7, #12]
    b24a:	2200      	movs	r2, #0
    b24c:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    b24e:	233b      	movs	r3, #59	; 0x3b
    b250:	18fb      	adds	r3, r7, r3
    b252:	781a      	ldrb	r2, [r3, #0]
    b254:	4b5d      	ldr	r3, [pc, #372]	; (b3cc <tcc_init+0x350>)
    b256:	0092      	lsls	r2, r2, #2
    b258:	68f9      	ldr	r1, [r7, #12]
    b25a:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    b25c:	68fb      	ldr	r3, [r7, #12]
    b25e:	68ba      	ldr	r2, [r7, #8]
    b260:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    b262:	687b      	ldr	r3, [r7, #4]
    b264:	22a0      	movs	r2, #160	; 0xa0
    b266:	5c99      	ldrb	r1, [r3, r2]
    b268:	68fb      	ldr	r3, [r7, #12]
    b26a:	223c      	movs	r2, #60	; 0x3c
    b26c:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    b26e:	2314      	movs	r3, #20
    b270:	18fb      	adds	r3, r7, r3
    b272:	0018      	movs	r0, r3
    b274:	4b56      	ldr	r3, [pc, #344]	; (b3d0 <tcc_init+0x354>)
    b276:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    b278:	687b      	ldr	r3, [r7, #4]
    b27a:	7a9a      	ldrb	r2, [r3, #10]
    b27c:	2314      	movs	r3, #20
    b27e:	18fb      	adds	r3, r7, r3
    b280:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    b282:	233b      	movs	r3, #59	; 0x3b
    b284:	18fb      	adds	r3, r7, r3
    b286:	781b      	ldrb	r3, [r3, #0]
    b288:	4a52      	ldr	r2, [pc, #328]	; (b3d4 <tcc_init+0x358>)
    b28a:	5cd3      	ldrb	r3, [r2, r3]
    b28c:	2214      	movs	r2, #20
    b28e:	18ba      	adds	r2, r7, r2
    b290:	0011      	movs	r1, r2
    b292:	0018      	movs	r0, r3
    b294:	4b50      	ldr	r3, [pc, #320]	; (b3d8 <tcc_init+0x35c>)
    b296:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    b298:	233b      	movs	r3, #59	; 0x3b
    b29a:	18fb      	adds	r3, r7, r3
    b29c:	781b      	ldrb	r3, [r3, #0]
    b29e:	4a4d      	ldr	r2, [pc, #308]	; (b3d4 <tcc_init+0x358>)
    b2a0:	5cd3      	ldrb	r3, [r2, r3]
    b2a2:	0018      	movs	r0, r3
    b2a4:	4b4d      	ldr	r3, [pc, #308]	; (b3dc <tcc_init+0x360>)
    b2a6:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    b2a8:	2300      	movs	r3, #0
    b2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    b2ac:	e02d      	b.n	b30a <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    b2ae:	687a      	ldr	r2, [r7, #4]
    b2b0:	2198      	movs	r1, #152	; 0x98
    b2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2b4:	18d3      	adds	r3, r2, r3
    b2b6:	185b      	adds	r3, r3, r1
    b2b8:	781b      	ldrb	r3, [r3, #0]
    b2ba:	2201      	movs	r2, #1
    b2bc:	4053      	eors	r3, r2
    b2be:	b2db      	uxtb	r3, r3
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	d11e      	bne.n	b302 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    b2c4:	2310      	movs	r3, #16
    b2c6:	18fb      	adds	r3, r7, r3
    b2c8:	0018      	movs	r0, r3
    b2ca:	4b45      	ldr	r3, [pc, #276]	; (b3e0 <tcc_init+0x364>)
    b2cc:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    b2ce:	687b      	ldr	r3, [r7, #4]
    b2d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    b2d2:	321e      	adds	r2, #30
    b2d4:	0092      	lsls	r2, r2, #2
    b2d6:	58d3      	ldr	r3, [r2, r3]
    b2d8:	b2da      	uxtb	r2, r3
    b2da:	2310      	movs	r3, #16
    b2dc:	18fb      	adds	r3, r7, r3
    b2de:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    b2e0:	2310      	movs	r3, #16
    b2e2:	18fb      	adds	r3, r7, r3
    b2e4:	2201      	movs	r2, #1
    b2e6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    b2e8:	687b      	ldr	r3, [r7, #4]
    b2ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    b2ec:	3216      	adds	r2, #22
    b2ee:	0092      	lsls	r2, r2, #2
    b2f0:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    b2f2:	b2db      	uxtb	r3, r3
    b2f4:	2210      	movs	r2, #16
    b2f6:	18ba      	adds	r2, r7, r2
    b2f8:	0011      	movs	r1, r2
    b2fa:	0018      	movs	r0, r3
    b2fc:	4b39      	ldr	r3, [pc, #228]	; (b3e4 <tcc_init+0x368>)
    b2fe:	4798      	blx	r3
    b300:	e000      	b.n	b304 <tcc_init+0x288>
			continue;
    b302:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    b304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b306:	3301      	adds	r3, #1
    b308:	63fb      	str	r3, [r7, #60]	; 0x3c
    b30a:	233b      	movs	r3, #59	; 0x3b
    b30c:	18fb      	adds	r3, r7, r3
    b30e:	781b      	ldrb	r3, [r3, #0]
    b310:	4a28      	ldr	r2, [pc, #160]	; (b3b4 <tcc_init+0x338>)
    b312:	5cd3      	ldrb	r3, [r2, r3]
    b314:	001a      	movs	r2, r3
    b316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b318:	429a      	cmp	r2, r3
    b31a:	dcc8      	bgt.n	b2ae <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    b31c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    b31e:	68bb      	ldr	r3, [r7, #8]
    b320:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    b322:	46c0      	nop			; (mov r8, r8)
    b324:	68bb      	ldr	r3, [r7, #8]
    b326:	689b      	ldr	r3, [r3, #8]
    b328:	2204      	movs	r2, #4
    b32a:	4013      	ands	r3, r2
    b32c:	d1fa      	bne.n	b324 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    b32e:	68bb      	ldr	r3, [r7, #8]
    b330:	22ff      	movs	r2, #255	; 0xff
    b332:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    b334:	46c0      	nop			; (mov r8, r8)
    b336:	68bb      	ldr	r3, [r7, #8]
    b338:	689b      	ldr	r3, [r3, #8]
    b33a:	2204      	movs	r2, #4
    b33c:	4013      	ands	r3, r2
    b33e:	d1fa      	bne.n	b336 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    b340:	232b      	movs	r3, #43	; 0x2b
    b342:	18fb      	adds	r3, r7, r3
    b344:	781a      	ldrb	r2, [r3, #0]
    b346:	68bb      	ldr	r3, [r7, #8]
    b348:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    b34a:	2320      	movs	r3, #32
    b34c:	18fb      	adds	r3, r7, r3
    b34e:	681a      	ldr	r2, [r3, #0]
    b350:	68bb      	ldr	r3, [r7, #8]
    b352:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    b354:	2320      	movs	r3, #32
    b356:	18fb      	adds	r3, r7, r3
    b358:	685a      	ldr	r2, [r3, #4]
    b35a:	68bb      	ldr	r3, [r7, #8]
    b35c:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    b35e:	69fa      	ldr	r2, [r7, #28]
    b360:	68bb      	ldr	r3, [r7, #8]
    b362:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    b364:	46c0      	nop			; (mov r8, r8)
    b366:	68bb      	ldr	r3, [r7, #8]
    b368:	689b      	ldr	r3, [r3, #8]
    b36a:	4a1f      	ldr	r2, [pc, #124]	; (b3e8 <tcc_init+0x36c>)
    b36c:	4013      	ands	r3, r2
    b36e:	d1fa      	bne.n	b366 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    b370:	69ba      	ldr	r2, [r7, #24]
    b372:	68bb      	ldr	r3, [r7, #8]
    b374:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    b376:	46c0      	nop			; (mov r8, r8)
    b378:	68bb      	ldr	r3, [r7, #8]
    b37a:	689b      	ldr	r3, [r3, #8]
    b37c:	2210      	movs	r2, #16
    b37e:	4013      	ands	r3, r2
    b380:	d1fa      	bne.n	b378 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    b382:	687b      	ldr	r3, [r7, #4]
    b384:	681a      	ldr	r2, [r3, #0]
    b386:	68bb      	ldr	r3, [r7, #8]
    b388:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    b38a:	46c0      	nop			; (mov r8, r8)
    b38c:	68bb      	ldr	r3, [r7, #8]
    b38e:	689b      	ldr	r3, [r3, #8]
    b390:	4a16      	ldr	r2, [pc, #88]	; (b3ec <tcc_init+0x370>)
    b392:	4013      	ands	r3, r2
    b394:	d1fa      	bne.n	b38c <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    b396:	687b      	ldr	r3, [r7, #4]
    b398:	685a      	ldr	r2, [r3, #4]
    b39a:	68bb      	ldr	r3, [r7, #8]
    b39c:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    b39e:	2300      	movs	r3, #0
    b3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    b3a2:	e03f      	b.n	b424 <tcc_init+0x3a8>
    b3a4:	0000a9e5 	.word	0x0000a9e5
    b3a8:	0001a634 	.word	0x0001a634
    b3ac:	0000a961 	.word	0x0000a961
    b3b0:	0001a640 	.word	0x0001a640
    b3b4:	0001a650 	.word	0x0001a650
    b3b8:	0000acf1 	.word	0x0000acf1
    b3bc:	0000ad95 	.word	0x0000ad95
    b3c0:	0000adf1 	.word	0x0000adf1
    b3c4:	0000af0d 	.word	0x0000af0d
    b3c8:	0000afe5 	.word	0x0000afe5
    b3cc:	20000720 	.word	0x20000720
    b3d0:	0000a949 	.word	0x0000a949
    b3d4:	0001a630 	.word	0x0001a630
    b3d8:	000116e1 	.word	0x000116e1
    b3dc:	00011725 	.word	0x00011725
    b3e0:	0000a9bd 	.word	0x0000a9bd
    b3e4:	000119cd 	.word	0x000119cd
    b3e8:	00020040 	.word	0x00020040
    b3ec:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    b3f0:	46c0      	nop			; (mov r8, r8)
    b3f2:	68bb      	ldr	r3, [r7, #8]
    b3f4:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    b3f6:	4912      	ldr	r1, [pc, #72]	; (b440 <tcc_init+0x3c4>)
    b3f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    b3fa:	4091      	lsls	r1, r2
    b3fc:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    b3fe:	4013      	ands	r3, r2
    b400:	d1f7      	bne.n	b3f2 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    b402:	687a      	ldr	r2, [r7, #4]
    b404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b406:	3306      	adds	r3, #6
    b408:	009b      	lsls	r3, r3, #2
    b40a:	18d3      	adds	r3, r2, r3
    b40c:	3304      	adds	r3, #4
    b40e:	681a      	ldr	r2, [r3, #0]
    b410:	68b9      	ldr	r1, [r7, #8]
    b412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b414:	3310      	adds	r3, #16
    b416:	009b      	lsls	r3, r3, #2
    b418:	18cb      	adds	r3, r1, r3
    b41a:	3304      	adds	r3, #4
    b41c:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    b41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b420:	3301      	adds	r3, #1
    b422:	63fb      	str	r3, [r7, #60]	; 0x3c
    b424:	233b      	movs	r3, #59	; 0x3b
    b426:	18fb      	adds	r3, r7, r3
    b428:	781b      	ldrb	r3, [r3, #0]
    b42a:	4a06      	ldr	r2, [pc, #24]	; (b444 <tcc_init+0x3c8>)
    b42c:	5cd3      	ldrb	r3, [r2, r3]
    b42e:	001a      	movs	r2, r3
    b430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b432:	429a      	cmp	r2, r3
    b434:	dcdc      	bgt.n	b3f0 <tcc_init+0x374>
	}

	return STATUS_OK;
    b436:	2300      	movs	r3, #0
}
    b438:	0018      	movs	r0, r3
    b43a:	46bd      	mov	sp, r7
    b43c:	b011      	add	sp, #68	; 0x44
    b43e:	bd90      	pop	{r4, r7, pc}
    b440:	00080100 	.word	0x00080100
    b444:	0001a64c 	.word	0x0001a64c

0000b448 <system_interrupt_enable>:
{
    b448:	b580      	push	{r7, lr}
    b44a:	b082      	sub	sp, #8
    b44c:	af00      	add	r7, sp, #0
    b44e:	0002      	movs	r2, r0
    b450:	1dfb      	adds	r3, r7, #7
    b452:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b454:	4b06      	ldr	r3, [pc, #24]	; (b470 <system_interrupt_enable+0x28>)
    b456:	1dfa      	adds	r2, r7, #7
    b458:	7812      	ldrb	r2, [r2, #0]
    b45a:	0011      	movs	r1, r2
    b45c:	221f      	movs	r2, #31
    b45e:	400a      	ands	r2, r1
    b460:	2101      	movs	r1, #1
    b462:	4091      	lsls	r1, r2
    b464:	000a      	movs	r2, r1
    b466:	601a      	str	r2, [r3, #0]
}
    b468:	46c0      	nop			; (mov r8, r8)
    b46a:	46bd      	mov	sp, r7
    b46c:	b002      	add	sp, #8
    b46e:	bd80      	pop	{r7, pc}
    b470:	e000e100 	.word	0xe000e100

0000b474 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    b474:	b580      	push	{r7, lr}
    b476:	b082      	sub	sp, #8
    b478:	af00      	add	r7, sp, #0
    b47a:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    b47c:	4a04      	ldr	r2, [pc, #16]	; (b490 <_tcc_interrupt_get_interrupt_vector+0x1c>)
    b47e:	687b      	ldr	r3, [r7, #4]
    b480:	18d3      	adds	r3, r2, r3
    b482:	781b      	ldrb	r3, [r3, #0]
    b484:	b25b      	sxtb	r3, r3
}
    b486:	0018      	movs	r0, r3
    b488:	46bd      	mov	sp, r7
    b48a:	b002      	add	sp, #8
    b48c:	bd80      	pop	{r7, pc}
    b48e:	46c0      	nop			; (mov r8, r8)
    b490:	20000004 	.word	0x20000004

0000b494 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    b494:	b580      	push	{r7, lr}
    b496:	b084      	sub	sp, #16
    b498:	af00      	add	r7, sp, #0
    b49a:	60f8      	str	r0, [r7, #12]
    b49c:	60b9      	str	r1, [r7, #8]
    b49e:	1dfb      	adds	r3, r7, #7
    b4a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    b4a2:	1dfb      	adds	r3, r7, #7
    b4a4:	781b      	ldrb	r3, [r3, #0]
    b4a6:	68fa      	ldr	r2, [r7, #12]
    b4a8:	009b      	lsls	r3, r3, #2
    b4aa:	18d3      	adds	r3, r2, r3
    b4ac:	3304      	adds	r3, #4
    b4ae:	68ba      	ldr	r2, [r7, #8]
    b4b0:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    b4b2:	68fb      	ldr	r3, [r7, #12]
    b4b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    b4b6:	1dfb      	adds	r3, r7, #7
    b4b8:	7819      	ldrb	r1, [r3, #0]
    b4ba:	4b05      	ldr	r3, [pc, #20]	; (b4d0 <tcc_register_callback+0x3c>)
    b4bc:	0089      	lsls	r1, r1, #2
    b4be:	58cb      	ldr	r3, [r1, r3]
    b4c0:	431a      	orrs	r2, r3
    b4c2:	68fb      	ldr	r3, [r7, #12]
    b4c4:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    b4c6:	2300      	movs	r3, #0
}
    b4c8:	0018      	movs	r0, r3
    b4ca:	46bd      	mov	sp, r7
    b4cc:	b004      	add	sp, #16
    b4ce:	bd80      	pop	{r7, pc}
    b4d0:	0001a654 	.word	0x0001a654

0000b4d4 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    b4d4:	b580      	push	{r7, lr}
    b4d6:	b082      	sub	sp, #8
    b4d8:	af00      	add	r7, sp, #0
    b4da:	6078      	str	r0, [r7, #4]
    b4dc:	000a      	movs	r2, r1
    b4de:	1cfb      	adds	r3, r7, #3
    b4e0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    b4e2:	687b      	ldr	r3, [r7, #4]
    b4e4:	681b      	ldr	r3, [r3, #0]
    b4e6:	0018      	movs	r0, r3
    b4e8:	4b0f      	ldr	r3, [pc, #60]	; (b528 <tcc_enable_callback+0x54>)
    b4ea:	4798      	blx	r3
    b4ec:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    b4ee:	0018      	movs	r0, r3
    b4f0:	4b0e      	ldr	r3, [pc, #56]	; (b52c <tcc_enable_callback+0x58>)
    b4f2:	4798      	blx	r3
    b4f4:	0003      	movs	r3, r0
    b4f6:	0018      	movs	r0, r3
    b4f8:	4b0d      	ldr	r3, [pc, #52]	; (b530 <tcc_enable_callback+0x5c>)
    b4fa:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    b4fc:	687b      	ldr	r3, [r7, #4]
    b4fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b500:	1cfb      	adds	r3, r7, #3
    b502:	7819      	ldrb	r1, [r3, #0]
    b504:	4b0b      	ldr	r3, [pc, #44]	; (b534 <tcc_enable_callback+0x60>)
    b506:	0089      	lsls	r1, r1, #2
    b508:	58cb      	ldr	r3, [r1, r3]
    b50a:	431a      	orrs	r2, r3
    b50c:	687b      	ldr	r3, [r7, #4]
    b50e:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    b510:	687b      	ldr	r3, [r7, #4]
    b512:	681b      	ldr	r3, [r3, #0]
    b514:	1cfa      	adds	r2, r7, #3
    b516:	7811      	ldrb	r1, [r2, #0]
    b518:	4a06      	ldr	r2, [pc, #24]	; (b534 <tcc_enable_callback+0x60>)
    b51a:	0089      	lsls	r1, r1, #2
    b51c:	588a      	ldr	r2, [r1, r2]
    b51e:	629a      	str	r2, [r3, #40]	; 0x28
}
    b520:	46c0      	nop			; (mov r8, r8)
    b522:	46bd      	mov	sp, r7
    b524:	b002      	add	sp, #8
    b526:	bd80      	pop	{r7, pc}
    b528:	0000a9e5 	.word	0x0000a9e5
    b52c:	0000b475 	.word	0x0000b475
    b530:	0000b449 	.word	0x0000b449
    b534:	0001a654 	.word	0x0001a654

0000b538 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    b538:	b580      	push	{r7, lr}
    b53a:	af00      	add	r7, sp, #0
    b53c:	2000      	movs	r0, #0
    b53e:	4b02      	ldr	r3, [pc, #8]	; (b548 <TCC0_Handler+0x10>)
    b540:	4798      	blx	r3
    b542:	46c0      	nop			; (mov r8, r8)
    b544:	46bd      	mov	sp, r7
    b546:	bd80      	pop	{r7, pc}
    b548:	0000b575 	.word	0x0000b575

0000b54c <TCC1_Handler>:
    b54c:	b580      	push	{r7, lr}
    b54e:	af00      	add	r7, sp, #0
    b550:	2001      	movs	r0, #1
    b552:	4b02      	ldr	r3, [pc, #8]	; (b55c <TCC1_Handler+0x10>)
    b554:	4798      	blx	r3
    b556:	46c0      	nop			; (mov r8, r8)
    b558:	46bd      	mov	sp, r7
    b55a:	bd80      	pop	{r7, pc}
    b55c:	0000b575 	.word	0x0000b575

0000b560 <TCC2_Handler>:
    b560:	b580      	push	{r7, lr}
    b562:	af00      	add	r7, sp, #0
    b564:	2002      	movs	r0, #2
    b566:	4b02      	ldr	r3, [pc, #8]	; (b570 <TCC2_Handler+0x10>)
    b568:	4798      	blx	r3
    b56a:	46c0      	nop			; (mov r8, r8)
    b56c:	46bd      	mov	sp, r7
    b56e:	bd80      	pop	{r7, pc}
    b570:	0000b575 	.word	0x0000b575

0000b574 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    b574:	b580      	push	{r7, lr}
    b576:	b086      	sub	sp, #24
    b578:	af00      	add	r7, sp, #0
    b57a:	0002      	movs	r2, r0
    b57c:	1dfb      	adds	r3, r7, #7
    b57e:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    b580:	1dfb      	adds	r3, r7, #7
    b582:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    b584:	4b18      	ldr	r3, [pc, #96]	; (b5e8 <_tcc_interrupt_handler+0x74>)
    b586:	0092      	lsls	r2, r2, #2
    b588:	58d3      	ldr	r3, [r2, r3]
    b58a:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    b58c:	693b      	ldr	r3, [r7, #16]
    b58e:	681b      	ldr	r3, [r3, #0]
    b590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    b592:	693b      	ldr	r3, [r7, #16]
    b594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    b596:	401a      	ands	r2, r3
			module->enable_callback_mask);
    b598:	693b      	ldr	r3, [r7, #16]
    b59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    b59c:	4013      	ands	r3, r2
    b59e:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    b5a0:	2300      	movs	r3, #0
    b5a2:	617b      	str	r3, [r7, #20]
    b5a4:	e019      	b.n	b5da <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    b5a6:	4b11      	ldr	r3, [pc, #68]	; (b5ec <_tcc_interrupt_handler+0x78>)
    b5a8:	697a      	ldr	r2, [r7, #20]
    b5aa:	0092      	lsls	r2, r2, #2
    b5ac:	58d3      	ldr	r3, [r2, r3]
    b5ae:	68fa      	ldr	r2, [r7, #12]
    b5b0:	4013      	ands	r3, r2
    b5b2:	d00f      	beq.n	b5d4 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    b5b4:	693a      	ldr	r2, [r7, #16]
    b5b6:	697b      	ldr	r3, [r7, #20]
    b5b8:	009b      	lsls	r3, r3, #2
    b5ba:	18d3      	adds	r3, r2, r3
    b5bc:	3304      	adds	r3, #4
    b5be:	681b      	ldr	r3, [r3, #0]
    b5c0:	693a      	ldr	r2, [r7, #16]
    b5c2:	0010      	movs	r0, r2
    b5c4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    b5c6:	693b      	ldr	r3, [r7, #16]
    b5c8:	681b      	ldr	r3, [r3, #0]
    b5ca:	4a08      	ldr	r2, [pc, #32]	; (b5ec <_tcc_interrupt_handler+0x78>)
    b5cc:	6979      	ldr	r1, [r7, #20]
    b5ce:	0089      	lsls	r1, r1, #2
    b5d0:	588a      	ldr	r2, [r1, r2]
    b5d2:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    b5d4:	697b      	ldr	r3, [r7, #20]
    b5d6:	3301      	adds	r3, #1
    b5d8:	617b      	str	r3, [r7, #20]
    b5da:	697b      	ldr	r3, [r7, #20]
    b5dc:	2b0b      	cmp	r3, #11
    b5de:	dde2      	ble.n	b5a6 <_tcc_interrupt_handler+0x32>
		}
	}
}
    b5e0:	46c0      	nop			; (mov r8, r8)
    b5e2:	46bd      	mov	sp, r7
    b5e4:	b006      	add	sp, #24
    b5e6:	bd80      	pop	{r7, pc}
    b5e8:	20000720 	.word	0x20000720
    b5ec:	0001a654 	.word	0x0001a654

0000b5f0 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
    b5f0:	b580      	push	{r7, lr}
    b5f2:	b082      	sub	sp, #8
    b5f4:	af00      	add	r7, sp, #0
    b5f6:	6078      	str	r0, [r7, #4]
	config->port = 80;
    b5f8:	687b      	ldr	r3, [r7, #4]
    b5fa:	2250      	movs	r2, #80	; 0x50
    b5fc:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
    b5fe:	687b      	ldr	r3, [r7, #4]
    b600:	2200      	movs	r2, #0
    b602:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
    b604:	687b      	ldr	r3, [r7, #4]
    b606:	4a0b      	ldr	r2, [pc, #44]	; (b634 <http_client_get_config_defaults+0x44>)
    b608:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
    b60a:	687b      	ldr	r3, [r7, #4]
    b60c:	2200      	movs	r2, #0
    b60e:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
    b610:	687b      	ldr	r3, [r7, #4]
    b612:	2200      	movs	r2, #0
    b614:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
    b616:	687b      	ldr	r3, [r7, #4]
    b618:	2280      	movs	r2, #128	; 0x80
    b61a:	0052      	lsls	r2, r2, #1
    b61c:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    b61e:	687b      	ldr	r3, [r7, #4]
    b620:	2252      	movs	r2, #82	; 0x52
    b622:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    b624:	687b      	ldr	r3, [r7, #4]
    b626:	4a04      	ldr	r2, [pc, #16]	; (b638 <http_client_get_config_defaults+0x48>)
    b628:	619a      	str	r2, [r3, #24]
}
    b62a:	46c0      	nop			; (mov r8, r8)
    b62c:	46bd      	mov	sp, r7
    b62e:	b002      	add	sp, #8
    b630:	bd80      	pop	{r7, pc}
    b632:	46c0      	nop			; (mov r8, r8)
    b634:	00004e20 	.word	0x00004e20
    b638:	0001a684 	.word	0x0001a684

0000b63c <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
    b63c:	b590      	push	{r4, r7, lr}
    b63e:	b083      	sub	sp, #12
    b640:	af00      	add	r7, sp, #0
    b642:	6078      	str	r0, [r7, #4]
    b644:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
    b646:	687b      	ldr	r3, [r7, #4]
    b648:	2b00      	cmp	r3, #0
    b64a:	d002      	beq.n	b652 <http_client_init+0x16>
    b64c:	683b      	ldr	r3, [r7, #0]
    b64e:	2b00      	cmp	r3, #0
    b650:	d102      	bne.n	b658 <http_client_init+0x1c>
		return -EINVAL;
    b652:	2316      	movs	r3, #22
    b654:	425b      	negs	r3, r3
    b656:	e058      	b.n	b70a <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
    b658:	683b      	ldr	r3, [r7, #0]
    b65a:	691b      	ldr	r3, [r3, #16]
    b65c:	2b00      	cmp	r3, #0
    b65e:	d102      	bne.n	b666 <http_client_init+0x2a>
		return -EINVAL;
    b660:	2316      	movs	r3, #22
    b662:	425b      	negs	r3, r3
    b664:	e051      	b.n	b70a <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
    b666:	683b      	ldr	r3, [r7, #0]
    b668:	685b      	ldr	r3, [r3, #4]
    b66a:	2b00      	cmp	r3, #0
    b66c:	d102      	bne.n	b674 <http_client_init+0x38>
		return -EINVAL;
    b66e:	2316      	movs	r3, #22
    b670:	425b      	negs	r3, r3
    b672:	e04a      	b.n	b70a <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    b674:	683b      	ldr	r3, [r7, #0]
    b676:	695b      	ldr	r3, [r3, #20]
    b678:	2b51      	cmp	r3, #81	; 0x51
    b67a:	d802      	bhi.n	b682 <http_client_init+0x46>
		return -EINVAL;
    b67c:	2316      	movs	r3, #22
    b67e:	425b      	negs	r3, r3
    b680:	e043      	b.n	b70a <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
    b682:	687b      	ldr	r3, [r7, #4]
    b684:	22e8      	movs	r2, #232	; 0xe8
    b686:	2100      	movs	r1, #0
    b688:	0018      	movs	r0, r3
    b68a:	4b22      	ldr	r3, [pc, #136]	; (b714 <http_client_init+0xd8>)
    b68c:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    b68e:	687b      	ldr	r3, [r7, #4]
    b690:	3350      	adds	r3, #80	; 0x50
    b692:	6839      	ldr	r1, [r7, #0]
    b694:	221c      	movs	r2, #28
    b696:	0018      	movs	r0, r3
    b698:	4b1f      	ldr	r3, [pc, #124]	; (b718 <http_client_init+0xdc>)
    b69a:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
    b69c:	687b      	ldr	r3, [r7, #4]
    b69e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b6a0:	2b00      	cmp	r3, #0
    b6a2:	d115      	bne.n	b6d0 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    b6a4:	683b      	ldr	r3, [r7, #0]
    b6a6:	691b      	ldr	r3, [r3, #16]
    b6a8:	0018      	movs	r0, r3
    b6aa:	4b1c      	ldr	r3, [pc, #112]	; (b71c <http_client_init+0xe0>)
    b6ac:	4798      	blx	r3
    b6ae:	0003      	movs	r3, r0
    b6b0:	001a      	movs	r2, r3
    b6b2:	687b      	ldr	r3, [r7, #4]
    b6b4:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    b6b6:	687b      	ldr	r3, [r7, #4]
    b6b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d102      	bne.n	b6c4 <http_client_init+0x88>
			return -ENOMEM;
    b6be:	230c      	movs	r3, #12
    b6c0:	425b      	negs	r3, r3
    b6c2:	e022      	b.n	b70a <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
    b6c4:	687b      	ldr	r3, [r7, #4]
    b6c6:	2241      	movs	r2, #65	; 0x41
    b6c8:	5c99      	ldrb	r1, [r3, r2]
    b6ca:	2004      	movs	r0, #4
    b6cc:	4301      	orrs	r1, r0
    b6ce:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
    b6d0:	683b      	ldr	r3, [r7, #0]
    b6d2:	891b      	ldrh	r3, [r3, #8]
    b6d4:	2b00      	cmp	r3, #0
    b6d6:	d010      	beq.n	b6fa <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    b6d8:	683b      	ldr	r3, [r7, #0]
    b6da:	6858      	ldr	r0, [r3, #4]
    b6dc:	687a      	ldr	r2, [r7, #4]
    b6de:	4910      	ldr	r1, [pc, #64]	; (b720 <http_client_init+0xe4>)
    b6e0:	2300      	movs	r3, #0
    b6e2:	4c10      	ldr	r4, [pc, #64]	; (b724 <http_client_init+0xe8>)
    b6e4:	47a0      	blx	r4
    b6e6:	0002      	movs	r2, r0
    b6e8:	687b      	ldr	r3, [r7, #4]
    b6ea:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
    b6ec:	687b      	ldr	r3, [r7, #4]
    b6ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b6f0:	2b00      	cmp	r3, #0
    b6f2:	da02      	bge.n	b6fa <http_client_init+0xbe>
			return -ENOSPC;
    b6f4:	231c      	movs	r3, #28
    b6f6:	425b      	negs	r3, r3
    b6f8:	e007      	b.n	b70a <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
    b6fa:	687b      	ldr	r3, [r7, #4]
    b6fc:	2200      	movs	r2, #0
    b6fe:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    b700:	687b      	ldr	r3, [r7, #4]
    b702:	22d8      	movs	r2, #216	; 0xd8
    b704:	2100      	movs	r1, #0
    b706:	5099      	str	r1, [r3, r2]

	return 0;
    b708:	2300      	movs	r3, #0
}
    b70a:	0018      	movs	r0, r3
    b70c:	46bd      	mov	sp, r7
    b70e:	b003      	add	sp, #12
    b710:	bd90      	pop	{r4, r7, pc}
    b712:	46c0      	nop			; (mov r8, r8)
    b714:	0001340b 	.word	0x0001340b
    b718:	000133d5 	.word	0x000133d5
    b71c:	00013389 	.word	0x00013389
    b720:	0000b9ed 	.word	0x0000b9ed
    b724:	0000d0d1 	.word	0x0000d0d1

0000b728 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
    b728:	b580      	push	{r7, lr}
    b72a:	b082      	sub	sp, #8
    b72c:	af00      	add	r7, sp, #0
    b72e:	6078      	str	r0, [r7, #4]
    b730:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
    b732:	687b      	ldr	r3, [r7, #4]
    b734:	2b00      	cmp	r3, #0
    b736:	d102      	bne.n	b73e <http_client_register_callback+0x16>
		return -EINVAL;
    b738:	2316      	movs	r3, #22
    b73a:	425b      	negs	r3, r3
    b73c:	e003      	b.n	b746 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
    b73e:	687b      	ldr	r3, [r7, #4]
    b740:	683a      	ldr	r2, [r7, #0]
    b742:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
    b744:	2300      	movs	r3, #0
}
    b746:	0018      	movs	r0, r3
    b748:	46bd      	mov	sp, r7
    b74a:	b002      	add	sp, #8
    b74c:	bd80      	pop	{r7, pc}
	...

0000b750 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
    b750:	b580      	push	{r7, lr}
    b752:	b082      	sub	sp, #8
    b754:	af00      	add	r7, sp, #0
    b756:	6078      	str	r0, [r7, #4]
	switch (err) {
    b758:	687b      	ldr	r3, [r7, #4]
    b75a:	330e      	adds	r3, #14
    b75c:	2b0e      	cmp	r3, #14
    b75e:	d825      	bhi.n	b7ac <_hwerr_to_stderr+0x5c>
    b760:	009a      	lsls	r2, r3, #2
    b762:	4b18      	ldr	r3, [pc, #96]	; (b7c4 <_hwerr_to_stderr+0x74>)
    b764:	18d3      	adds	r3, r2, r3
    b766:	681b      	ldr	r3, [r3, #0]
    b768:	469f      	mov	pc, r3
		case 0:
			return -EIO;
    b76a:	2305      	movs	r3, #5
    b76c:	425b      	negs	r3, r3
    b76e:	e024      	b.n	b7ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
    b770:	2302      	movs	r3, #2
    b772:	425b      	negs	r3, r3
    b774:	e021      	b.n	b7ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
    b776:	2370      	movs	r3, #112	; 0x70
    b778:	425b      	negs	r3, r3
    b77a:	e01e      	b.n	b7ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
    b77c:	230c      	movs	r3, #12
    b77e:	425b      	negs	r3, r3
    b780:	e01b      	b.n	b7ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
    b782:	2316      	movs	r3, #22
    b784:	425b      	negs	r3, r3
    b786:	e018      	b.n	b7ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
    b788:	230c      	movs	r3, #12
    b78a:	425b      	negs	r3, r3
    b78c:	e015      	b.n	b7ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
    b78e:	2305      	movs	r3, #5
    b790:	425b      	negs	r3, r3
    b792:	e012      	b.n	b7ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
    b794:	2379      	movs	r3, #121	; 0x79
    b796:	425b      	negs	r3, r3
    b798:	e00f      	b.n	b7ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
    b79a:	2368      	movs	r3, #104	; 0x68
    b79c:	425b      	negs	r3, r3
    b79e:	e00c      	b.n	b7ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
    b7a0:	230b      	movs	r3, #11
    b7a2:	425b      	negs	r3, r3
    b7a4:	e009      	b.n	b7ba <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
    b7a6:	2310      	movs	r3, #16
    b7a8:	425b      	negs	r3, r3
    b7aa:	e006      	b.n	b7ba <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
    b7ac:	687b      	ldr	r3, [r7, #4]
    b7ae:	2b00      	cmp	r3, #0
    b7b0:	da02      	bge.n	b7b8 <_hwerr_to_stderr+0x68>
				return -EIO;
    b7b2:	2305      	movs	r3, #5
    b7b4:	425b      	negs	r3, r3
    b7b6:	e000      	b.n	b7ba <_hwerr_to_stderr+0x6a>
			}
			return 0;
    b7b8:	2300      	movs	r3, #0
	}
}
    b7ba:	0018      	movs	r0, r3
    b7bc:	46bd      	mov	sp, r7
    b7be:	b002      	add	sp, #8
    b7c0:	bd80      	pop	{r7, pc}
    b7c2:	46c0      	nop			; (mov r8, r8)
    b7c4:	0001a7c0 	.word	0x0001a7c0

0000b7c8 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    b7c8:	b580      	push	{r7, lr}
    b7ca:	b08a      	sub	sp, #40	; 0x28
    b7cc:	af00      	add	r7, sp, #0
    b7ce:	603a      	str	r2, [r7, #0]
    b7d0:	1dfb      	adds	r3, r7, #7
    b7d2:	1c02      	adds	r2, r0, #0
    b7d4:	701a      	strb	r2, [r3, #0]
    b7d6:	1dbb      	adds	r3, r7, #6
    b7d8:	1c0a      	adds	r2, r1, #0
    b7da:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
    b7dc:	1dfb      	adds	r3, r7, #7
    b7de:	2200      	movs	r2, #0
    b7e0:	569a      	ldrsb	r2, [r3, r2]
    b7e2:	4b4b      	ldr	r3, [pc, #300]	; (b910 <http_client_socket_event_handler+0x148>)
    b7e4:	0092      	lsls	r2, r2, #2
    b7e6:	58d3      	ldr	r3, [r2, r3]
    b7e8:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
    b7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b7ec:	2b00      	cmp	r3, #0
    b7ee:	d100      	bne.n	b7f2 <http_client_socket_event_handler+0x2a>
    b7f0:	e08a      	b.n	b908 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
    b7f2:	1dbb      	adds	r3, r7, #6
    b7f4:	781b      	ldrb	r3, [r3, #0]
    b7f6:	2b06      	cmp	r3, #6
    b7f8:	d040      	beq.n	b87c <http_client_socket_event_handler+0xb4>
    b7fa:	2b07      	cmp	r3, #7
    b7fc:	d060      	beq.n	b8c0 <http_client_socket_event_handler+0xf8>
    b7fe:	2b05      	cmp	r3, #5
    b800:	d000      	beq.n	b804 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
    b802:	e082      	b.n	b90a <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
    b804:	683b      	ldr	r3, [r7, #0]
    b806:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
    b808:	6a3b      	ldr	r3, [r7, #32]
    b80a:	785b      	ldrb	r3, [r3, #1]
    b80c:	b25b      	sxtb	r3, r3
    b80e:	001a      	movs	r2, r3
    b810:	230c      	movs	r3, #12
    b812:	18fb      	adds	r3, r7, r3
    b814:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
    b816:	6a3b      	ldr	r3, [r7, #32]
    b818:	785b      	ldrb	r3, [r3, #1]
    b81a:	b25b      	sxtb	r3, r3
    b81c:	2b00      	cmp	r3, #0
    b81e:	da0c      	bge.n	b83a <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    b820:	6a3b      	ldr	r3, [r7, #32]
    b822:	785b      	ldrb	r3, [r3, #1]
    b824:	b25b      	sxtb	r3, r3
    b826:	0018      	movs	r0, r3
    b828:	4b3a      	ldr	r3, [pc, #232]	; (b914 <http_client_socket_event_handler+0x14c>)
    b82a:	4798      	blx	r3
    b82c:	0002      	movs	r2, r0
    b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b830:	0011      	movs	r1, r2
    b832:	0018      	movs	r0, r3
    b834:	4b38      	ldr	r3, [pc, #224]	; (b918 <http_client_socket_event_handler+0x150>)
    b836:	4798      	blx	r3
    	break;
    b838:	e067      	b.n	b90a <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
    b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b83c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b83e:	2b00      	cmp	r3, #0
    b840:	d006      	beq.n	b850 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    b842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b846:	220c      	movs	r2, #12
    b848:	18ba      	adds	r2, r7, r2
    b84a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    b84c:	2100      	movs	r1, #0
    b84e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    b850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b852:	2203      	movs	r2, #3
    b854:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b858:	6d58      	ldr	r0, [r3, #84]	; 0x54
    b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b85c:	6c99      	ldr	r1, [r3, #72]	; 0x48
    b85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b860:	2258      	movs	r2, #88	; 0x58
    b862:	5a9b      	ldrh	r3, [r3, r2]
    b864:	001a      	movs	r2, r3
    b866:	4b2d      	ldr	r3, [pc, #180]	; (b91c <http_client_socket_event_handler+0x154>)
    b868:	4798      	blx	r3
    		_http_client_recv_packet(module);
    b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b86c:	0018      	movs	r0, r3
    b86e:	4b2c      	ldr	r3, [pc, #176]	; (b920 <http_client_socket_event_handler+0x158>)
    b870:	4798      	blx	r3
			_http_client_request(module);
    b872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b874:	0018      	movs	r0, r3
    b876:	4b2b      	ldr	r3, [pc, #172]	; (b924 <http_client_socket_event_handler+0x15c>)
    b878:	4798      	blx	r3
    	break;
    b87a:	e046      	b.n	b90a <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
    b87c:	683b      	ldr	r3, [r7, #0]
    b87e:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
    b880:	69fb      	ldr	r3, [r7, #28]
    b882:	2204      	movs	r2, #4
    b884:	5e9b      	ldrsh	r3, [r3, r2]
    b886:	2b00      	cmp	r3, #0
    b888:	dd09      	ble.n	b89e <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    b88a:	69fb      	ldr	r3, [r7, #28]
    b88c:	2204      	movs	r2, #4
    b88e:	5e9b      	ldrsh	r3, [r3, r2]
    b890:	001a      	movs	r2, r3
    b892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b894:	0011      	movs	r1, r2
    b896:	0018      	movs	r0, r3
    b898:	4b23      	ldr	r3, [pc, #140]	; (b928 <http_client_socket_event_handler+0x160>)
    b89a:	4798      	blx	r3
    b89c:	e00b      	b.n	b8b6 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    b89e:	69fb      	ldr	r3, [r7, #28]
    b8a0:	2204      	movs	r2, #4
    b8a2:	5e9b      	ldrsh	r3, [r3, r2]
    b8a4:	0018      	movs	r0, r3
    b8a6:	4b1b      	ldr	r3, [pc, #108]	; (b914 <http_client_socket_event_handler+0x14c>)
    b8a8:	4798      	blx	r3
    b8aa:	0002      	movs	r2, r0
    b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b8ae:	0011      	movs	r1, r2
    b8b0:	0018      	movs	r0, r3
    b8b2:	4b19      	ldr	r3, [pc, #100]	; (b918 <http_client_socket_event_handler+0x150>)
    b8b4:	4798      	blx	r3
		_http_client_recv_packet(module);
    b8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b8b8:	0018      	movs	r0, r3
    b8ba:	4b19      	ldr	r3, [pc, #100]	; (b920 <http_client_socket_event_handler+0x158>)
    b8bc:	4798      	blx	r3
		break;
    b8be:	e024      	b.n	b90a <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
    b8c0:	231a      	movs	r3, #26
    b8c2:	18fb      	adds	r3, r7, r3
    b8c4:	683a      	ldr	r2, [r7, #0]
    b8c6:	8812      	ldrh	r2, [r2, #0]
    b8c8:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
    b8ca:	231a      	movs	r3, #26
    b8cc:	18fb      	adds	r3, r7, r3
    b8ce:	2200      	movs	r2, #0
    b8d0:	5e9b      	ldrsh	r3, [r3, r2]
    b8d2:	2b00      	cmp	r3, #0
    b8d4:	da0d      	bge.n	b8f2 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    b8d6:	231a      	movs	r3, #26
    b8d8:	18fb      	adds	r3, r7, r3
    b8da:	2200      	movs	r2, #0
    b8dc:	5e9b      	ldrsh	r3, [r3, r2]
    b8de:	0018      	movs	r0, r3
    b8e0:	4b0c      	ldr	r3, [pc, #48]	; (b914 <http_client_socket_event_handler+0x14c>)
    b8e2:	4798      	blx	r3
    b8e4:	0002      	movs	r2, r0
    b8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b8e8:	0011      	movs	r1, r2
    b8ea:	0018      	movs	r0, r3
    b8ec:	4b0a      	ldr	r3, [pc, #40]	; (b918 <http_client_socket_event_handler+0x150>)
    b8ee:	4798      	blx	r3
    b8f0:	e003      	b.n	b8fa <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
    b8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b8f4:	0018      	movs	r0, r3
    b8f6:	4b0b      	ldr	r3, [pc, #44]	; (b924 <http_client_socket_event_handler+0x15c>)
    b8f8:	4798      	blx	r3
		module->sending = 0;
    b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b8fc:	2241      	movs	r2, #65	; 0x41
    b8fe:	5c99      	ldrb	r1, [r3, r2]
    b900:	2001      	movs	r0, #1
    b902:	4381      	bics	r1, r0
    b904:	5499      	strb	r1, [r3, r2]
    	break;
    b906:	e000      	b.n	b90a <http_client_socket_event_handler+0x142>
		return;
    b908:	46c0      	nop			; (mov r8, r8)
	}

}
    b90a:	46bd      	mov	sp, r7
    b90c:	b00a      	add	sp, #40	; 0x28
    b90e:	bd80      	pop	{r7, pc}
    b910:	2000023c 	.word	0x2000023c
    b914:	0000b751 	.word	0x0000b751
    b918:	0000bdc5 	.word	0x0000bdc5
    b91c:	0000d18d 	.word	0x0000d18d
    b920:	0000c651 	.word	0x0000c651
    b924:	0000bf19 	.word	0x0000bf19
    b928:	0000c6b5 	.word	0x0000c6b5

0000b92c <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    b92c:	b580      	push	{r7, lr}
    b92e:	b088      	sub	sp, #32
    b930:	af00      	add	r7, sp, #0
    b932:	6078      	str	r0, [r7, #4]
    b934:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
    b936:	2300      	movs	r3, #0
    b938:	61fb      	str	r3, [r7, #28]
    b93a:	e048      	b.n	b9ce <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
    b93c:	4b27      	ldr	r3, [pc, #156]	; (b9dc <http_client_socket_resolve_handler+0xb0>)
    b93e:	69fa      	ldr	r2, [r7, #28]
    b940:	0092      	lsls	r2, r2, #2
    b942:	58d3      	ldr	r3, [r2, r3]
    b944:	2b00      	cmp	r3, #0
    b946:	d03f      	beq.n	b9c8 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
    b948:	4b24      	ldr	r3, [pc, #144]	; (b9dc <http_client_socket_resolve_handler+0xb0>)
    b94a:	69fa      	ldr	r2, [r7, #28]
    b94c:	0092      	lsls	r2, r2, #2
    b94e:	58d3      	ldr	r3, [r2, r3]
    b950:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    b952:	69bb      	ldr	r3, [r7, #24]
    b954:	1c5a      	adds	r2, r3, #1
    b956:	687b      	ldr	r3, [r7, #4]
    b958:	0011      	movs	r1, r2
    b95a:	0018      	movs	r0, r3
    b95c:	4b20      	ldr	r3, [pc, #128]	; (b9e0 <http_client_socket_resolve_handler+0xb4>)
    b95e:	4798      	blx	r3
    b960:	1e03      	subs	r3, r0, #0
    b962:	d131      	bne.n	b9c8 <http_client_socket_resolve_handler+0x9c>
    b964:	69bb      	ldr	r3, [r7, #24]
    b966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    b968:	2b01      	cmp	r3, #1
    b96a:	d12d      	bne.n	b9c8 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    b96c:	683b      	ldr	r3, [r7, #0]
    b96e:	2b00      	cmp	r3, #0
    b970:	d107      	bne.n	b982 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    b972:	2376      	movs	r3, #118	; 0x76
    b974:	425a      	negs	r2, r3
    b976:	69bb      	ldr	r3, [r7, #24]
    b978:	0011      	movs	r1, r2
    b97a:	0018      	movs	r0, r3
    b97c:	4b19      	ldr	r3, [pc, #100]	; (b9e4 <http_client_socket_resolve_handler+0xb8>)
    b97e:	4798      	blx	r3
					return;
    b980:	e028      	b.n	b9d4 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
    b982:	2308      	movs	r3, #8
    b984:	18fb      	adds	r3, r7, r3
    b986:	2202      	movs	r2, #2
    b988:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    b98a:	69bb      	ldr	r3, [r7, #24]
    b98c:	2250      	movs	r2, #80	; 0x50
    b98e:	5a9b      	ldrh	r3, [r3, r2]
    b990:	021b      	lsls	r3, r3, #8
    b992:	b21a      	sxth	r2, r3
    b994:	69bb      	ldr	r3, [r7, #24]
    b996:	2150      	movs	r1, #80	; 0x50
    b998:	5a5b      	ldrh	r3, [r3, r1]
    b99a:	0a1b      	lsrs	r3, r3, #8
    b99c:	b29b      	uxth	r3, r3
    b99e:	b21b      	sxth	r3, r3
    b9a0:	4313      	orrs	r3, r2
    b9a2:	b21b      	sxth	r3, r3
    b9a4:	b29a      	uxth	r2, r3
    b9a6:	2308      	movs	r3, #8
    b9a8:	18fb      	adds	r3, r7, r3
    b9aa:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
    b9ac:	2308      	movs	r3, #8
    b9ae:	18fb      	adds	r3, r7, r3
    b9b0:	683a      	ldr	r2, [r7, #0]
    b9b2:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    b9b4:	69bb      	ldr	r3, [r7, #24]
    b9b6:	781b      	ldrb	r3, [r3, #0]
    b9b8:	b25b      	sxtb	r3, r3
    b9ba:	2208      	movs	r2, #8
    b9bc:	18b9      	adds	r1, r7, r2
    b9be:	2210      	movs	r2, #16
    b9c0:	0018      	movs	r0, r3
    b9c2:	4b09      	ldr	r3, [pc, #36]	; (b9e8 <http_client_socket_resolve_handler+0xbc>)
    b9c4:	4798      	blx	r3
				return;
    b9c6:	e005      	b.n	b9d4 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    b9c8:	69fb      	ldr	r3, [r7, #28]
    b9ca:	3301      	adds	r3, #1
    b9cc:	61fb      	str	r3, [r7, #28]
    b9ce:	69fb      	ldr	r3, [r7, #28]
    b9d0:	2b06      	cmp	r3, #6
    b9d2:	ddb3      	ble.n	b93c <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
    b9d4:	46bd      	mov	sp, r7
    b9d6:	b008      	add	sp, #32
    b9d8:	bd80      	pop	{r7, pc}
    b9da:	46c0      	nop			; (mov r8, r8)
    b9dc:	2000023c 	.word	0x2000023c
    b9e0:	00014151 	.word	0x00014151
    b9e4:	0000bdc5 	.word	0x0000bdc5
    b9e8:	000085a5 	.word	0x000085a5

0000b9ec <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
    b9ec:	b580      	push	{r7, lr}
    b9ee:	b086      	sub	sp, #24
    b9f0:	af00      	add	r7, sp, #0
    b9f2:	60f8      	str	r0, [r7, #12]
    b9f4:	60b9      	str	r1, [r7, #8]
    b9f6:	607a      	str	r2, [r7, #4]
    b9f8:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
    b9fa:	687b      	ldr	r3, [r7, #4]
    b9fc:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
    b9fe:	697b      	ldr	r3, [r7, #20]
    ba00:	2b00      	cmp	r3, #0
    ba02:	d007      	beq.n	ba14 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
    ba04:	233e      	movs	r3, #62	; 0x3e
    ba06:	425a      	negs	r2, r3
    ba08:	697b      	ldr	r3, [r7, #20]
    ba0a:	0011      	movs	r1, r2
    ba0c:	0018      	movs	r0, r3
    ba0e:	4b03      	ldr	r3, [pc, #12]	; (ba1c <http_client_timer_callback+0x30>)
    ba10:	4798      	blx	r3
    ba12:	e000      	b.n	ba16 <http_client_timer_callback+0x2a>
		return;
    ba14:	46c0      	nop			; (mov r8, r8)
}
    ba16:	46bd      	mov	sp, r7
    ba18:	b006      	add	sp, #24
    ba1a:	bd80      	pop	{r7, pc}
    ba1c:	0000bdc5 	.word	0x0000bdc5

0000ba20 <_is_ip>:

static int _is_ip(const char *host)
{
    ba20:	b580      	push	{r7, lr}
    ba22:	b084      	sub	sp, #16
    ba24:	af00      	add	r7, sp, #0
    ba26:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
    ba28:	2300      	movs	r3, #0
    ba2a:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
    ba2c:	e03a      	b.n	baa4 <_is_ip+0x84>
		ch = *host++;
    ba2e:	687b      	ldr	r3, [r7, #4]
    ba30:	1c5a      	adds	r2, r3, #1
    ba32:	607a      	str	r2, [r7, #4]
    ba34:	220b      	movs	r2, #11
    ba36:	18ba      	adds	r2, r7, r2
    ba38:	781b      	ldrb	r3, [r3, #0]
    ba3a:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    ba3c:	230b      	movs	r3, #11
    ba3e:	18fb      	adds	r3, r7, r3
    ba40:	781b      	ldrb	r3, [r3, #0]
    ba42:	2b60      	cmp	r3, #96	; 0x60
    ba44:	d904      	bls.n	ba50 <_is_ip+0x30>
    ba46:	230b      	movs	r3, #11
    ba48:	18fb      	adds	r3, r7, r3
    ba4a:	781b      	ldrb	r3, [r3, #0]
    ba4c:	2b66      	cmp	r3, #102	; 0x66
    ba4e:	d913      	bls.n	ba78 <_is_ip+0x58>
    ba50:	230b      	movs	r3, #11
    ba52:	18fb      	adds	r3, r7, r3
    ba54:	781b      	ldrb	r3, [r3, #0]
    ba56:	2b40      	cmp	r3, #64	; 0x40
    ba58:	d904      	bls.n	ba64 <_is_ip+0x44>
    ba5a:	230b      	movs	r3, #11
    ba5c:	18fb      	adds	r3, r7, r3
    ba5e:	781b      	ldrb	r3, [r3, #0]
    ba60:	2b46      	cmp	r3, #70	; 0x46
    ba62:	d909      	bls.n	ba78 <_is_ip+0x58>
    ba64:	230b      	movs	r3, #11
    ba66:	18fb      	adds	r3, r7, r3
    ba68:	781b      	ldrb	r3, [r3, #0]
    ba6a:	2b3a      	cmp	r3, #58	; 0x3a
    ba6c:	d004      	beq.n	ba78 <_is_ip+0x58>
    ba6e:	230b      	movs	r3, #11
    ba70:	18fb      	adds	r3, r7, r3
    ba72:	781b      	ldrb	r3, [r3, #0]
    ba74:	2b2f      	cmp	r3, #47	; 0x2f
    ba76:	d102      	bne.n	ba7e <_is_ip+0x5e>
			isv6 = 1;
    ba78:	2301      	movs	r3, #1
    ba7a:	60fb      	str	r3, [r7, #12]
    ba7c:	e012      	b.n	baa4 <_is_ip+0x84>
		} else if (ch == '.') {
    ba7e:	230b      	movs	r3, #11
    ba80:	18fb      	adds	r3, r7, r3
    ba82:	781b      	ldrb	r3, [r3, #0]
    ba84:	2b2e      	cmp	r3, #46	; 0x2e
    ba86:	d104      	bne.n	ba92 <_is_ip+0x72>
			if (isv6) {
    ba88:	68fb      	ldr	r3, [r7, #12]
    ba8a:	2b00      	cmp	r3, #0
    ba8c:	d00a      	beq.n	baa4 <_is_ip+0x84>
				return 0;
    ba8e:	2300      	movs	r3, #0
    ba90:	e00d      	b.n	baae <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
    ba92:	230b      	movs	r3, #11
    ba94:	18fb      	adds	r3, r7, r3
    ba96:	781b      	ldrb	r3, [r3, #0]
    ba98:	2230      	movs	r2, #48	; 0x30
    ba9a:	4013      	ands	r3, r2
    ba9c:	2b30      	cmp	r3, #48	; 0x30
    ba9e:	d001      	beq.n	baa4 <_is_ip+0x84>
			return 0;
    baa0:	2300      	movs	r3, #0
    baa2:	e004      	b.n	baae <_is_ip+0x8e>
	while (*host != '\0') {
    baa4:	687b      	ldr	r3, [r7, #4]
    baa6:	781b      	ldrb	r3, [r3, #0]
    baa8:	2b00      	cmp	r3, #0
    baaa:	d1c0      	bne.n	ba2e <_is_ip+0xe>
		}
	}
	return 1;
    baac:	2301      	movs	r3, #1
}
    baae:	0018      	movs	r0, r3
    bab0:	46bd      	mov	sp, r7
    bab2:	b004      	add	sp, #16
    bab4:	bd80      	pop	{r7, pc}
	...

0000bab8 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
    bab8:	b5b0      	push	{r4, r5, r7, lr}
    baba:	b08e      	sub	sp, #56	; 0x38
    babc:	af00      	add	r7, sp, #0
    babe:	60f8      	str	r0, [r7, #12]
    bac0:	60b9      	str	r1, [r7, #8]
    bac2:	603b      	str	r3, [r7, #0]
    bac4:	1dfb      	adds	r3, r7, #7
    bac6:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
    bac8:	2337      	movs	r3, #55	; 0x37
    baca:	18fb      	adds	r3, r7, r3
    bacc:	2200      	movs	r2, #0
    bace:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
    bad0:	2300      	movs	r3, #0
    bad2:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
    bad4:	2300      	movs	r3, #0
    bad6:	633b      	str	r3, [r7, #48]	; 0x30
    bad8:	2300      	movs	r3, #0
    bada:	62fb      	str	r3, [r7, #44]	; 0x2c
    badc:	2300      	movs	r3, #0
    bade:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
    bae0:	68fb      	ldr	r3, [r7, #12]
    bae2:	2b00      	cmp	r3, #0
    bae4:	d102      	bne.n	baec <http_client_send_request+0x34>
		return -EINVAL;
    bae6:	2316      	movs	r3, #22
    bae8:	425b      	negs	r3, r3
    baea:	e145      	b.n	bd78 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
    baec:	68fb      	ldr	r3, [r7, #12]
    baee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    baf0:	2b02      	cmp	r3, #2
    baf2:	d902      	bls.n	bafa <http_client_send_request+0x42>
		return -EBUSY;
    baf4:	2310      	movs	r3, #16
    baf6:	425b      	negs	r3, r3
    baf8:	e13e      	b.n	bd78 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
    bafa:	49a1      	ldr	r1, [pc, #644]	; (bd80 <http_client_send_request+0x2c8>)
    bafc:	68bb      	ldr	r3, [r7, #8]
    bafe:	2207      	movs	r2, #7
    bb00:	0018      	movs	r0, r3
    bb02:	4ba0      	ldr	r3, [pc, #640]	; (bd84 <http_client_send_request+0x2cc>)
    bb04:	4798      	blx	r3
    bb06:	1e03      	subs	r3, r0, #0
    bb08:	d102      	bne.n	bb10 <http_client_send_request+0x58>
		i = 7;
    bb0a:	2307      	movs	r3, #7
    bb0c:	633b      	str	r3, [r7, #48]	; 0x30
    bb0e:	e009      	b.n	bb24 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
    bb10:	499d      	ldr	r1, [pc, #628]	; (bd88 <http_client_send_request+0x2d0>)
    bb12:	68bb      	ldr	r3, [r7, #8]
    bb14:	2208      	movs	r2, #8
    bb16:	0018      	movs	r0, r3
    bb18:	4b9a      	ldr	r3, [pc, #616]	; (bd84 <http_client_send_request+0x2cc>)
    bb1a:	4798      	blx	r3
    bb1c:	1e03      	subs	r3, r0, #0
    bb1e:	d101      	bne.n	bb24 <http_client_send_request+0x6c>
		i = 8;
    bb20:	2308      	movs	r3, #8
    bb22:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    bb24:	68fb      	ldr	r3, [r7, #12]
    bb26:	1c5c      	adds	r4, r3, #1
    bb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bb2a:	68ba      	ldr	r2, [r7, #8]
    bb2c:	18d5      	adds	r5, r2, r3
    bb2e:	68fb      	ldr	r3, [r7, #12]
    bb30:	3301      	adds	r3, #1
    bb32:	0018      	movs	r0, r3
    bb34:	4b95      	ldr	r3, [pc, #596]	; (bd8c <http_client_send_request+0x2d4>)
    bb36:	4798      	blx	r3
    bb38:	0003      	movs	r3, r0
    bb3a:	001a      	movs	r2, r3
    bb3c:	0029      	movs	r1, r5
    bb3e:	0020      	movs	r0, r4
    bb40:	4b90      	ldr	r3, [pc, #576]	; (bd84 <http_client_send_request+0x2cc>)
    bb42:	4798      	blx	r3
    bb44:	0003      	movs	r3, r0
    bb46:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
    bb48:	e00d      	b.n	bb66 <http_client_send_request+0xae>
		module->host[j++] = url[i];
    bb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb4c:	1c5a      	adds	r2, r3, #1
    bb4e:	62fa      	str	r2, [r7, #44]	; 0x2c
    bb50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    bb52:	68b9      	ldr	r1, [r7, #8]
    bb54:	188a      	adds	r2, r1, r2
    bb56:	7811      	ldrb	r1, [r2, #0]
    bb58:	68fa      	ldr	r2, [r7, #12]
    bb5a:	18d3      	adds	r3, r2, r3
    bb5c:	1c0a      	adds	r2, r1, #0
    bb5e:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    bb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bb62:	3301      	adds	r3, #1
    bb64:	633b      	str	r3, [r7, #48]	; 0x30
    bb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bb68:	68ba      	ldr	r2, [r7, #8]
    bb6a:	18d3      	adds	r3, r2, r3
    bb6c:	781b      	ldrb	r3, [r3, #0]
    bb6e:	2b00      	cmp	r3, #0
    bb70:	d005      	beq.n	bb7e <http_client_send_request+0xc6>
    bb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bb74:	68ba      	ldr	r2, [r7, #8]
    bb76:	18d3      	adds	r3, r2, r3
    bb78:	781b      	ldrb	r3, [r3, #0]
    bb7a:	2b2f      	cmp	r3, #47	; 0x2f
    bb7c:	d1e5      	bne.n	bb4a <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
    bb7e:	68fa      	ldr	r2, [r7, #12]
    bb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb82:	18d3      	adds	r3, r2, r3
    bb84:	3301      	adds	r3, #1
    bb86:	2200      	movs	r2, #0
    bb88:	701a      	strb	r2, [r3, #0]
	uri = url + i;
    bb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bb8c:	68ba      	ldr	r2, [r7, #8]
    bb8e:	18d3      	adds	r3, r2, r3
    bb90:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
    bb92:	68fb      	ldr	r3, [r7, #12]
    bb94:	3301      	adds	r3, #1
    bb96:	781b      	ldrb	r3, [r3, #0]
    bb98:	2b00      	cmp	r3, #0
    bb9a:	d102      	bne.n	bba2 <http_client_send_request+0xea>
		return -EINVAL;
    bb9c:	2316      	movs	r3, #22
    bb9e:	425b      	negs	r3, r3
    bba0:	e0ea      	b.n	bd78 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    bba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bba4:	0018      	movs	r0, r3
    bba6:	4b79      	ldr	r3, [pc, #484]	; (bd8c <http_client_send_request+0x2d4>)
    bba8:	4798      	blx	r3
    bbaa:	0003      	movs	r3, r0
    bbac:	2b3f      	cmp	r3, #63	; 0x3f
    bbae:	d902      	bls.n	bbb6 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
    bbb0:	235b      	movs	r3, #91	; 0x5b
    bbb2:	425b      	negs	r3, r3
    bbb4:	e0e0      	b.n	bd78 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
    bbb6:	68fb      	ldr	r3, [r7, #12]
    bbb8:	22d4      	movs	r2, #212	; 0xd4
    bbba:	589b      	ldr	r3, [r3, r2]
    bbbc:	2b00      	cmp	r3, #0
    bbbe:	d005      	beq.n	bbcc <http_client_send_request+0x114>
		free(module->req.ext_header);
    bbc0:	68fb      	ldr	r3, [r7, #12]
    bbc2:	22d4      	movs	r2, #212	; 0xd4
    bbc4:	589b      	ldr	r3, [r3, r2]
    bbc6:	0018      	movs	r0, r3
    bbc8:	4b71      	ldr	r3, [pc, #452]	; (bd90 <http_client_send_request+0x2d8>)
    bbca:	4798      	blx	r3
	}
	if (ext_header != NULL) {
    bbcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bbce:	2b00      	cmp	r3, #0
    bbd0:	d010      	beq.n	bbf4 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
    bbd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bbd4:	0018      	movs	r0, r3
    bbd6:	4b6f      	ldr	r3, [pc, #444]	; (bd94 <http_client_send_request+0x2dc>)
    bbd8:	4798      	blx	r3
    bbda:	0003      	movs	r3, r0
    bbdc:	0019      	movs	r1, r3
    bbde:	68fb      	ldr	r3, [r7, #12]
    bbe0:	22d4      	movs	r2, #212	; 0xd4
    bbe2:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
    bbe4:	68fb      	ldr	r3, [r7, #12]
    bbe6:	22d4      	movs	r2, #212	; 0xd4
    bbe8:	589b      	ldr	r3, [r3, r2]
    bbea:	2b00      	cmp	r3, #0
    bbec:	d106      	bne.n	bbfc <http_client_send_request+0x144>
			return -ENOMEM;
    bbee:	230c      	movs	r3, #12
    bbf0:	425b      	negs	r3, r3
    bbf2:	e0c1      	b.n	bd78 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
    bbf4:	68fb      	ldr	r3, [r7, #12]
    bbf6:	22d4      	movs	r2, #212	; 0xd4
    bbf8:	2100      	movs	r1, #0
    bbfa:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
    bbfc:	68fb      	ldr	r3, [r7, #12]
    bbfe:	2241      	movs	r2, #65	; 0x41
    bc00:	5c99      	ldrb	r1, [r3, r2]
    bc02:	2001      	movs	r0, #1
    bc04:	4381      	bics	r1, r0
    bc06:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
    bc08:	68fb      	ldr	r3, [r7, #12]
    bc0a:	2200      	movs	r2, #0
    bc0c:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
    bc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bc10:	781b      	ldrb	r3, [r3, #0]
    bc12:	2b2f      	cmp	r3, #47	; 0x2f
    bc14:	d107      	bne.n	bc26 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
    bc16:	68fb      	ldr	r3, [r7, #12]
    bc18:	3370      	adds	r3, #112	; 0x70
    bc1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bc1c:	0011      	movs	r1, r2
    bc1e:	0018      	movs	r0, r3
    bc20:	4b5d      	ldr	r3, [pc, #372]	; (bd98 <http_client_send_request+0x2e0>)
    bc22:	4798      	blx	r3
    bc24:	e00f      	b.n	bc46 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
    bc26:	68fb      	ldr	r3, [r7, #12]
    bc28:	2270      	movs	r2, #112	; 0x70
    bc2a:	212f      	movs	r1, #47	; 0x2f
    bc2c:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
    bc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bc30:	781b      	ldrb	r3, [r3, #0]
    bc32:	2b00      	cmp	r3, #0
    bc34:	d007      	beq.n	bc46 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
    bc36:	68fb      	ldr	r3, [r7, #12]
    bc38:	3370      	adds	r3, #112	; 0x70
    bc3a:	3301      	adds	r3, #1
    bc3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bc3e:	0011      	movs	r1, r2
    bc40:	0018      	movs	r0, r3
    bc42:	4b55      	ldr	r3, [pc, #340]	; (bd98 <http_client_send_request+0x2e0>)
    bc44:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
    bc46:	683b      	ldr	r3, [r7, #0]
    bc48:	2b00      	cmp	r3, #0
    bc4a:	d007      	beq.n	bc5c <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    bc4c:	68fb      	ldr	r3, [r7, #12]
    bc4e:	33b0      	adds	r3, #176	; 0xb0
    bc50:	6839      	ldr	r1, [r7, #0]
    bc52:	2218      	movs	r2, #24
    bc54:	0018      	movs	r0, r3
    bc56:	4b51      	ldr	r3, [pc, #324]	; (bd9c <http_client_send_request+0x2e4>)
    bc58:	4798      	blx	r3
    bc5a:	e006      	b.n	bc6a <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    bc5c:	68fb      	ldr	r3, [r7, #12]
    bc5e:	33b0      	adds	r3, #176	; 0xb0
    bc60:	2218      	movs	r2, #24
    bc62:	2100      	movs	r1, #0
    bc64:	0018      	movs	r0, r3
    bc66:	4b4e      	ldr	r3, [pc, #312]	; (bda0 <http_client_send_request+0x2e8>)
    bc68:	4798      	blx	r3
	}

	module->req.method = method;
    bc6a:	68fb      	ldr	r3, [r7, #12]
    bc6c:	1dfa      	adds	r2, r7, #7
    bc6e:	21c8      	movs	r1, #200	; 0xc8
    bc70:	7812      	ldrb	r2, [r2, #0]
    bc72:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
    bc74:	68fb      	ldr	r3, [r7, #12]
    bc76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    bc78:	2b01      	cmp	r3, #1
    bc7a:	d003      	beq.n	bc84 <http_client_send_request+0x1cc>
    bc7c:	d316      	bcc.n	bcac <http_client_send_request+0x1f4>
    bc7e:	2b02      	cmp	r3, #2
    bc80:	d004      	beq.n	bc8c <http_client_send_request+0x1d4>
    bc82:	e074      	b.n	bd6e <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
    bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bc86:	2b00      	cmp	r3, #0
    bc88:	d100      	bne.n	bc8c <http_client_send_request+0x1d4>
    bc8a:	e073      	b.n	bd74 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
    bc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bc8e:	2b00      	cmp	r3, #0
    bc90:	d107      	bne.n	bca2 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
    bc92:	68fb      	ldr	r3, [r7, #12]
    bc94:	2203      	movs	r2, #3
    bc96:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
    bc98:	68fb      	ldr	r3, [r7, #12]
    bc9a:	0018      	movs	r0, r3
    bc9c:	4b41      	ldr	r3, [pc, #260]	; (bda4 <http_client_send_request+0x2ec>)
    bc9e:	4798      	blx	r3
			break;
    bca0:	e069      	b.n	bd76 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
    bca2:	68fb      	ldr	r3, [r7, #12]
    bca4:	2100      	movs	r1, #0
    bca6:	0018      	movs	r0, r3
    bca8:	4b3f      	ldr	r3, [pc, #252]	; (bda8 <http_client_send_request+0x2f0>)
    bcaa:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
    bcac:	68fb      	ldr	r3, [r7, #12]
    bcae:	2252      	movs	r2, #82	; 0x52
    bcb0:	5c9b      	ldrb	r3, [r3, r2]
    bcb2:	2b00      	cmp	r3, #0
    bcb4:	d007      	beq.n	bcc6 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
    bcb6:	2337      	movs	r3, #55	; 0x37
    bcb8:	18fb      	adds	r3, r7, r3
    bcba:	2237      	movs	r2, #55	; 0x37
    bcbc:	18ba      	adds	r2, r7, r2
    bcbe:	7812      	ldrb	r2, [r2, #0]
    bcc0:	2101      	movs	r1, #1
    bcc2:	430a      	orrs	r2, r1
    bcc4:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    bcc6:	2337      	movs	r3, #55	; 0x37
    bcc8:	18fb      	adds	r3, r7, r3
    bcca:	781b      	ldrb	r3, [r3, #0]
    bccc:	001a      	movs	r2, r3
    bcce:	2101      	movs	r1, #1
    bcd0:	2002      	movs	r0, #2
    bcd2:	4b36      	ldr	r3, [pc, #216]	; (bdac <http_client_send_request+0x2f4>)
    bcd4:	4798      	blx	r3
    bcd6:	0003      	movs	r3, r0
    bcd8:	001a      	movs	r2, r3
    bcda:	68fb      	ldr	r3, [r7, #12]
    bcdc:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
    bcde:	68fb      	ldr	r3, [r7, #12]
    bce0:	781b      	ldrb	r3, [r3, #0]
    bce2:	b25b      	sxtb	r3, r3
    bce4:	2b00      	cmp	r3, #0
    bce6:	db3f      	blt.n	bd68 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
    bce8:	68fb      	ldr	r3, [r7, #12]
    bcea:	781b      	ldrb	r3, [r3, #0]
    bcec:	b25b      	sxtb	r3, r3
    bcee:	001a      	movs	r2, r3
    bcf0:	4b2f      	ldr	r3, [pc, #188]	; (bdb0 <http_client_send_request+0x2f8>)
    bcf2:	0092      	lsls	r2, r2, #2
    bcf4:	68f9      	ldr	r1, [r7, #12]
    bcf6:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
    bcf8:	68fb      	ldr	r3, [r7, #12]
    bcfa:	3301      	adds	r3, #1
    bcfc:	0018      	movs	r0, r3
    bcfe:	4b2d      	ldr	r3, [pc, #180]	; (bdb4 <http_client_send_request+0x2fc>)
    bd00:	4798      	blx	r3
    bd02:	1e03      	subs	r3, r0, #0
    bd04:	d027      	beq.n	bd56 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
    bd06:	2314      	movs	r3, #20
    bd08:	18fb      	adds	r3, r7, r3
    bd0a:	2202      	movs	r2, #2
    bd0c:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    bd0e:	68fb      	ldr	r3, [r7, #12]
    bd10:	2250      	movs	r2, #80	; 0x50
    bd12:	5a9b      	ldrh	r3, [r3, r2]
    bd14:	021b      	lsls	r3, r3, #8
    bd16:	b21a      	sxth	r2, r3
    bd18:	68fb      	ldr	r3, [r7, #12]
    bd1a:	2150      	movs	r1, #80	; 0x50
    bd1c:	5a5b      	ldrh	r3, [r3, r1]
    bd1e:	0a1b      	lsrs	r3, r3, #8
    bd20:	b29b      	uxth	r3, r3
    bd22:	b21b      	sxth	r3, r3
    bd24:	4313      	orrs	r3, r2
    bd26:	b21b      	sxth	r3, r3
    bd28:	b29a      	uxth	r2, r3
    bd2a:	2314      	movs	r3, #20
    bd2c:	18fb      	adds	r3, r7, r3
    bd2e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    bd30:	68fb      	ldr	r3, [r7, #12]
    bd32:	3301      	adds	r3, #1
    bd34:	0018      	movs	r0, r3
    bd36:	4b20      	ldr	r3, [pc, #128]	; (bdb8 <http_client_send_request+0x300>)
    bd38:	4798      	blx	r3
    bd3a:	0002      	movs	r2, r0
    bd3c:	2314      	movs	r3, #20
    bd3e:	18fb      	adds	r3, r7, r3
    bd40:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    bd42:	68fb      	ldr	r3, [r7, #12]
    bd44:	781b      	ldrb	r3, [r3, #0]
    bd46:	b25b      	sxtb	r3, r3
    bd48:	2214      	movs	r2, #20
    bd4a:	18b9      	adds	r1, r7, r2
    bd4c:	2210      	movs	r2, #16
    bd4e:	0018      	movs	r0, r3
    bd50:	4b1a      	ldr	r3, [pc, #104]	; (bdbc <http_client_send_request+0x304>)
    bd52:	4798      	blx	r3
    bd54:	e004      	b.n	bd60 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
    bd56:	68fb      	ldr	r3, [r7, #12]
    bd58:	3301      	adds	r3, #1
    bd5a:	0018      	movs	r0, r3
    bd5c:	4b18      	ldr	r3, [pc, #96]	; (bdc0 <http_client_send_request+0x308>)
    bd5e:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
    bd60:	68fb      	ldr	r3, [r7, #12]
    bd62:	2201      	movs	r2, #1
    bd64:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
    bd66:	e006      	b.n	bd76 <http_client_send_request+0x2be>
			return -ENOSPC;
    bd68:	231c      	movs	r3, #28
    bd6a:	425b      	negs	r3, r3
    bd6c:	e004      	b.n	bd78 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
    bd6e:	230b      	movs	r3, #11
    bd70:	425b      	negs	r3, r3
    bd72:	e001      	b.n	bd78 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
    bd74:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
    bd76:	2300      	movs	r3, #0
}
    bd78:	0018      	movs	r0, r3
    bd7a:	46bd      	mov	sp, r7
    bd7c:	b00e      	add	sp, #56	; 0x38
    bd7e:	bdb0      	pop	{r4, r5, r7, pc}
    bd80:	0001a690 	.word	0x0001a690
    bd84:	000141bd 	.word	0x000141bd
    bd88:	0001a698 	.word	0x0001a698
    bd8c:	000141af 	.word	0x000141af
    bd90:	0001339d 	.word	0x0001339d
    bd94:	00014175 	.word	0x00014175
    bd98:	00014165 	.word	0x00014165
    bd9c:	000133d5 	.word	0x000133d5
    bda0:	0001340b 	.word	0x0001340b
    bda4:	0000bf19 	.word	0x0000bf19
    bda8:	0000bdc5 	.word	0x0000bdc5
    bdac:	00008395 	.word	0x00008395
    bdb0:	2000023c 	.word	0x2000023c
    bdb4:	0000ba21 	.word	0x0000ba21
    bdb8:	00008ad9 	.word	0x00008ad9
    bdbc:	000085a5 	.word	0x000085a5
    bdc0:	00008be1 	.word	0x00008be1

0000bdc4 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
    bdc4:	b580      	push	{r7, lr}
    bdc6:	b086      	sub	sp, #24
    bdc8:	af00      	add	r7, sp, #0
    bdca:	6078      	str	r0, [r7, #4]
    bdcc:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
    bdce:	687b      	ldr	r3, [r7, #4]
    bdd0:	22c0      	movs	r2, #192	; 0xc0
    bdd2:	589b      	ldr	r3, [r3, r2]
    bdd4:	2b00      	cmp	r3, #0
    bdd6:	d007      	beq.n	bde8 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
    bdd8:	687b      	ldr	r3, [r7, #4]
    bdda:	22c0      	movs	r2, #192	; 0xc0
    bddc:	589b      	ldr	r3, [r3, r2]
    bdde:	687a      	ldr	r2, [r7, #4]
    bde0:	21c4      	movs	r1, #196	; 0xc4
    bde2:	5852      	ldr	r2, [r2, r1]
    bde4:	0010      	movs	r0, r2
    bde6:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
    bde8:	687b      	ldr	r3, [r7, #4]
    bdea:	33b0      	adds	r3, #176	; 0xb0
    bdec:	2218      	movs	r2, #24
    bdee:	2100      	movs	r1, #0
    bdf0:	0018      	movs	r0, r3
    bdf2:	4b24      	ldr	r3, [pc, #144]	; (be84 <_http_client_clear_conn+0xc0>)
    bdf4:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    bdf6:	687b      	ldr	r3, [r7, #4]
    bdf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    bdfa:	2b00      	cmp	r3, #0
    bdfc:	d005      	beq.n	be0a <_http_client_clear_conn+0x46>
		close(module->sock);
    bdfe:	687b      	ldr	r3, [r7, #4]
    be00:	781b      	ldrb	r3, [r3, #0]
    be02:	b25b      	sxtb	r3, r3
    be04:	0018      	movs	r0, r3
    be06:	4b20      	ldr	r3, [pc, #128]	; (be88 <_http_client_clear_conn+0xc4>)
    be08:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
    be0a:	687b      	ldr	r3, [r7, #4]
    be0c:	781b      	ldrb	r3, [r3, #0]
    be0e:	b25b      	sxtb	r3, r3
    be10:	001a      	movs	r2, r3
    be12:	4b1e      	ldr	r3, [pc, #120]	; (be8c <_http_client_clear_conn+0xc8>)
    be14:	0092      	lsls	r2, r2, #2
    be16:	2100      	movs	r1, #0
    be18:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
    be1a:	687b      	ldr	r3, [r7, #4]
    be1c:	336c      	adds	r3, #108	; 0x6c
    be1e:	226c      	movs	r2, #108	; 0x6c
    be20:	2100      	movs	r1, #0
    be22:	0018      	movs	r0, r3
    be24:	4b17      	ldr	r3, [pc, #92]	; (be84 <_http_client_clear_conn+0xc0>)
    be26:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    be28:	687b      	ldr	r3, [r7, #4]
    be2a:	33d8      	adds	r3, #216	; 0xd8
    be2c:	2210      	movs	r2, #16
    be2e:	2100      	movs	r1, #0
    be30:	0018      	movs	r0, r3
    be32:	4b14      	ldr	r3, [pc, #80]	; (be84 <_http_client_clear_conn+0xc0>)
    be34:	4798      	blx	r3
	module->req.state = STATE_INIT;
    be36:	687b      	ldr	r3, [r7, #4]
    be38:	2200      	movs	r2, #0
    be3a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    be3c:	687b      	ldr	r3, [r7, #4]
    be3e:	22d8      	movs	r2, #216	; 0xd8
    be40:	2100      	movs	r1, #0
    be42:	5099      	str	r1, [r3, r2]

	module->sending = 0;
    be44:	687b      	ldr	r3, [r7, #4]
    be46:	2241      	movs	r2, #65	; 0x41
    be48:	5c99      	ldrb	r1, [r3, r2]
    be4a:	2001      	movs	r0, #1
    be4c:	4381      	bics	r1, r0
    be4e:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
    be50:	687b      	ldr	r3, [r7, #4]
    be52:	2241      	movs	r2, #65	; 0x41
    be54:	5c99      	ldrb	r1, [r3, r2]
    be56:	2002      	movs	r0, #2
    be58:	4381      	bics	r1, r0
    be5a:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
    be5c:	230c      	movs	r3, #12
    be5e:	18fb      	adds	r3, r7, r3
    be60:	683a      	ldr	r2, [r7, #0]
    be62:	601a      	str	r2, [r3, #0]
	if (module->cb) {
    be64:	687b      	ldr	r3, [r7, #4]
    be66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    be68:	2b00      	cmp	r3, #0
    be6a:	d006      	beq.n	be7a <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    be6c:	687b      	ldr	r3, [r7, #4]
    be6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    be70:	220c      	movs	r2, #12
    be72:	18ba      	adds	r2, r7, r2
    be74:	6878      	ldr	r0, [r7, #4]
    be76:	2104      	movs	r1, #4
    be78:	4798      	blx	r3
	}
}
    be7a:	46c0      	nop			; (mov r8, r8)
    be7c:	46bd      	mov	sp, r7
    be7e:	b006      	add	sp, #24
    be80:	bd80      	pop	{r7, pc}
    be82:	46c0      	nop			; (mov r8, r8)
    be84:	0001340b 	.word	0x0001340b
    be88:	0000899d 	.word	0x0000899d
    be8c:	2000023c 	.word	0x2000023c

0000be90 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    be90:	b590      	push	{r4, r7, lr}
    be92:	b087      	sub	sp, #28
    be94:	af00      	add	r7, sp, #0
    be96:	60f8      	str	r0, [r7, #12]
    be98:	60b9      	str	r1, [r7, #8]
    be9a:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
    be9c:	68fb      	ldr	r3, [r7, #12]
    be9e:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
    bea0:	697b      	ldr	r3, [r7, #20]
    bea2:	2241      	movs	r2, #65	; 0x41
    bea4:	5c99      	ldrb	r1, [r3, r2]
    bea6:	2001      	movs	r0, #1
    bea8:	4301      	orrs	r1, r0
    beaa:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    beac:	697b      	ldr	r3, [r7, #20]
    beae:	2000      	movs	r0, #0
    beb0:	5618      	ldrsb	r0, [r3, r0]
    beb2:	687b      	ldr	r3, [r7, #4]
    beb4:	b29a      	uxth	r2, r3
    beb6:	68b9      	ldr	r1, [r7, #8]
    beb8:	2300      	movs	r3, #0
    beba:	4c14      	ldr	r4, [pc, #80]	; (bf0c <_http_client_send_wait+0x7c>)
    bebc:	47a0      	blx	r4
    bebe:	0003      	movs	r3, r0
    bec0:	613b      	str	r3, [r7, #16]
    bec2:	693b      	ldr	r3, [r7, #16]
    bec4:	2b00      	cmp	r3, #0
    bec6:	da0f      	bge.n	bee8 <_http_client_send_wait+0x58>
		module->sending = 0;
    bec8:	697b      	ldr	r3, [r7, #20]
    beca:	2241      	movs	r2, #65	; 0x41
    becc:	5c99      	ldrb	r1, [r3, r2]
    bece:	2001      	movs	r0, #1
    bed0:	4381      	bics	r1, r0
    bed2:	5499      	strb	r1, [r3, r2]
		return result;
    bed4:	693b      	ldr	r3, [r7, #16]
    bed6:	e014      	b.n	bf02 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
    bed8:	2000      	movs	r0, #0
    beda:	4b0d      	ldr	r3, [pc, #52]	; (bf10 <_http_client_send_wait+0x80>)
    bedc:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
    bede:	697b      	ldr	r3, [r7, #20]
    bee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bee2:	0018      	movs	r0, r3
    bee4:	4b0b      	ldr	r3, [pc, #44]	; (bf14 <_http_client_send_wait+0x84>)
    bee6:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    bee8:	697b      	ldr	r3, [r7, #20]
    beea:	2241      	movs	r2, #65	; 0x41
    beec:	5c9b      	ldrb	r3, [r3, r2]
    beee:	2201      	movs	r2, #1
    bef0:	4013      	ands	r3, r2
    bef2:	b2db      	uxtb	r3, r3
    bef4:	2b00      	cmp	r3, #0
    bef6:	d003      	beq.n	bf00 <_http_client_send_wait+0x70>
    bef8:	697b      	ldr	r3, [r7, #20]
    befa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    befc:	2b02      	cmp	r3, #2
    befe:	d8eb      	bhi.n	bed8 <_http_client_send_wait+0x48>
	}

	return 0;
    bf00:	2300      	movs	r3, #0
}
    bf02:	0018      	movs	r0, r3
    bf04:	46bd      	mov	sp, r7
    bf06:	b007      	add	sp, #28
    bf08:	bd90      	pop	{r4, r7, pc}
    bf0a:	46c0      	nop			; (mov r8, r8)
    bf0c:	000086b9 	.word	0x000086b9
    bf10:	000052bd 	.word	0x000052bd
    bf14:	0000d209 	.word	0x0000d209

0000bf18 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    bf18:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf1a:	46c6      	mov	lr, r8
    bf1c:	b500      	push	{lr}
    bf1e:	b0a0      	sub	sp, #128	; 0x80
    bf20:	af02      	add	r7, sp, #8
    bf22:	61f8      	str	r0, [r7, #28]
    bf24:	4668      	mov	r0, sp
    bf26:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    bf28:	2318      	movs	r3, #24
    bf2a:	2218      	movs	r2, #24
    bf2c:	18ba      	adds	r2, r7, r2
    bf2e:	18d0      	adds	r0, r2, r3
    bf30:	4bbd      	ldr	r3, [pc, #756]	; (c228 <_http_client_request+0x310>)
    bf32:	469c      	mov	ip, r3
    bf34:	4663      	mov	r3, ip
    bf36:	cb16      	ldmia	r3!, {r1, r2, r4}
    bf38:	c016      	stmia	r0!, {r1, r2, r4}
    bf3a:	469c      	mov	ip, r3
    bf3c:	4663      	mov	r3, ip
    bf3e:	681b      	ldr	r3, [r3, #0]
    bf40:	469c      	mov	ip, r3
    bf42:	4663      	mov	r3, ip
    bf44:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    bf46:	69f8      	ldr	r0, [r7, #28]
    bf48:	6e40      	ldr	r0, [r0, #100]	; 0x64
    bf4a:	4684      	mov	ip, r0
    bf4c:	2301      	movs	r3, #1
    bf4e:	425b      	negs	r3, r3
    bf50:	4698      	mov	r8, r3
    bf52:	44c4      	add	ip, r8
    bf54:	4663      	mov	r3, ip
    bf56:	66fb      	str	r3, [r7, #108]	; 0x6c
    bf58:	6038      	str	r0, [r7, #0]
    bf5a:	2300      	movs	r3, #0
    bf5c:	607b      	str	r3, [r7, #4]
    bf5e:	6839      	ldr	r1, [r7, #0]
    bf60:	687a      	ldr	r2, [r7, #4]
    bf62:	000b      	movs	r3, r1
    bf64:	0f5b      	lsrs	r3, r3, #29
    bf66:	469c      	mov	ip, r3
    bf68:	0013      	movs	r3, r2
    bf6a:	00db      	lsls	r3, r3, #3
    bf6c:	617b      	str	r3, [r7, #20]
    bf6e:	4663      	mov	r3, ip
    bf70:	697c      	ldr	r4, [r7, #20]
    bf72:	431c      	orrs	r4, r3
    bf74:	617c      	str	r4, [r7, #20]
    bf76:	000b      	movs	r3, r1
    bf78:	00db      	lsls	r3, r3, #3
    bf7a:	613b      	str	r3, [r7, #16]
    bf7c:	0005      	movs	r5, r0
    bf7e:	2200      	movs	r2, #0
    bf80:	0016      	movs	r6, r2
    bf82:	0f6a      	lsrs	r2, r5, #29
    bf84:	00f3      	lsls	r3, r6, #3
    bf86:	60fb      	str	r3, [r7, #12]
    bf88:	68fb      	ldr	r3, [r7, #12]
    bf8a:	4313      	orrs	r3, r2
    bf8c:	60fb      	str	r3, [r7, #12]
    bf8e:	00eb      	lsls	r3, r5, #3
    bf90:	60bb      	str	r3, [r7, #8]
    bf92:	1dc3      	adds	r3, r0, #7
    bf94:	08db      	lsrs	r3, r3, #3
    bf96:	00db      	lsls	r3, r3, #3
    bf98:	466a      	mov	r2, sp
    bf9a:	1ad3      	subs	r3, r2, r3
    bf9c:	469d      	mov	sp, r3
    bf9e:	ab02      	add	r3, sp, #8
    bfa0:	3300      	adds	r3, #0
    bfa2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
    bfa4:	69fb      	ldr	r3, [r7, #28]
    bfa6:	2b00      	cmp	r3, #0
    bfa8:	d100      	bne.n	bfac <_http_client_request+0x94>
    bfaa:	e346      	b.n	c63a <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
    bfac:	69fb      	ldr	r3, [r7, #28]
    bfae:	2241      	movs	r2, #65	; 0x41
    bfb0:	5c9b      	ldrb	r3, [r3, r2]
    bfb2:	2201      	movs	r2, #1
    bfb4:	4013      	ands	r3, r2
    bfb6:	b2db      	uxtb	r3, r3
    bfb8:	2b00      	cmp	r3, #0
    bfba:	d000      	beq.n	bfbe <_http_client_request+0xa6>
    bfbc:	e33f      	b.n	c63e <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
    bfbe:	69fb      	ldr	r3, [r7, #28]
    bfc0:	33b0      	adds	r3, #176	; 0xb0
    bfc2:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
    bfc4:	69fb      	ldr	r3, [r7, #28]
    bfc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    bfc8:	2b03      	cmp	r3, #3
    bfca:	d003      	beq.n	bfd4 <_http_client_request+0xbc>
    bfcc:	2b04      	cmp	r3, #4
    bfce:	d100      	bne.n	bfd2 <_http_client_request+0xba>
    bfd0:	e1b3      	b.n	c33a <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
    bfd2:	e32f      	b.n	c634 <_http_client_request+0x71c>
		module->req.content_length = 0;
    bfd4:	69fb      	ldr	r3, [r7, #28]
    bfd6:	22cc      	movs	r2, #204	; 0xcc
    bfd8:	2100      	movs	r1, #0
    bfda:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
    bfdc:	69fb      	ldr	r3, [r7, #28]
    bfde:	22d0      	movs	r2, #208	; 0xd0
    bfe0:	2100      	movs	r1, #0
    bfe2:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    bfe4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    bfe6:	69fb      	ldr	r3, [r7, #28]
    bfe8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    bfea:	4c90      	ldr	r4, [pc, #576]	; (c22c <_http_client_request+0x314>)
    bfec:	2334      	movs	r3, #52	; 0x34
    bfee:	2018      	movs	r0, #24
    bff0:	1838      	adds	r0, r7, r0
    bff2:	18c0      	adds	r0, r0, r3
    bff4:	69fb      	ldr	r3, [r7, #28]
    bff6:	9300      	str	r3, [sp, #0]
    bff8:	0023      	movs	r3, r4
    bffa:	4c8d      	ldr	r4, [pc, #564]	; (c230 <_http_client_request+0x318>)
    bffc:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
    bffe:	69fb      	ldr	r3, [r7, #28]
    c000:	22c8      	movs	r2, #200	; 0xc8
    c002:	5c9b      	ldrb	r3, [r3, r2]
    c004:	2b01      	cmp	r3, #1
    c006:	d10a      	bne.n	c01e <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
    c008:	498a      	ldr	r1, [pc, #552]	; (c234 <_http_client_request+0x31c>)
    c00a:	2334      	movs	r3, #52	; 0x34
    c00c:	2218      	movs	r2, #24
    c00e:	4694      	mov	ip, r2
    c010:	44bc      	add	ip, r7
    c012:	4463      	add	r3, ip
    c014:	2204      	movs	r2, #4
    c016:	0018      	movs	r0, r3
    c018:	4b87      	ldr	r3, [pc, #540]	; (c238 <_http_client_request+0x320>)
    c01a:	4798      	blx	r3
    c01c:	e04e      	b.n	c0bc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
    c01e:	69fb      	ldr	r3, [r7, #28]
    c020:	22c8      	movs	r2, #200	; 0xc8
    c022:	5c9b      	ldrb	r3, [r3, r2]
    c024:	2b02      	cmp	r3, #2
    c026:	d10a      	bne.n	c03e <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
    c028:	4984      	ldr	r1, [pc, #528]	; (c23c <_http_client_request+0x324>)
    c02a:	2334      	movs	r3, #52	; 0x34
    c02c:	2218      	movs	r2, #24
    c02e:	4694      	mov	ip, r2
    c030:	44bc      	add	ip, r7
    c032:	4463      	add	r3, ip
    c034:	2205      	movs	r2, #5
    c036:	0018      	movs	r0, r3
    c038:	4b7f      	ldr	r3, [pc, #508]	; (c238 <_http_client_request+0x320>)
    c03a:	4798      	blx	r3
    c03c:	e03e      	b.n	c0bc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    c03e:	69fb      	ldr	r3, [r7, #28]
    c040:	22c8      	movs	r2, #200	; 0xc8
    c042:	5c9b      	ldrb	r3, [r3, r2]
    c044:	2b03      	cmp	r3, #3
    c046:	d10a      	bne.n	c05e <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    c048:	497d      	ldr	r1, [pc, #500]	; (c240 <_http_client_request+0x328>)
    c04a:	2334      	movs	r3, #52	; 0x34
    c04c:	2218      	movs	r2, #24
    c04e:	4694      	mov	ip, r2
    c050:	44bc      	add	ip, r7
    c052:	4463      	add	r3, ip
    c054:	2207      	movs	r2, #7
    c056:	0018      	movs	r0, r3
    c058:	4b77      	ldr	r3, [pc, #476]	; (c238 <_http_client_request+0x320>)
    c05a:	4798      	blx	r3
    c05c:	e02e      	b.n	c0bc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
    c05e:	69fb      	ldr	r3, [r7, #28]
    c060:	22c8      	movs	r2, #200	; 0xc8
    c062:	5c9b      	ldrb	r3, [r3, r2]
    c064:	2b04      	cmp	r3, #4
    c066:	d10a      	bne.n	c07e <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    c068:	4976      	ldr	r1, [pc, #472]	; (c244 <_http_client_request+0x32c>)
    c06a:	2334      	movs	r3, #52	; 0x34
    c06c:	2218      	movs	r2, #24
    c06e:	4694      	mov	ip, r2
    c070:	44bc      	add	ip, r7
    c072:	4463      	add	r3, ip
    c074:	2204      	movs	r2, #4
    c076:	0018      	movs	r0, r3
    c078:	4b6f      	ldr	r3, [pc, #444]	; (c238 <_http_client_request+0x320>)
    c07a:	4798      	blx	r3
    c07c:	e01e      	b.n	c0bc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    c07e:	69fb      	ldr	r3, [r7, #28]
    c080:	22c8      	movs	r2, #200	; 0xc8
    c082:	5c9b      	ldrb	r3, [r3, r2]
    c084:	2b05      	cmp	r3, #5
    c086:	d10a      	bne.n	c09e <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    c088:	496f      	ldr	r1, [pc, #444]	; (c248 <_http_client_request+0x330>)
    c08a:	2334      	movs	r3, #52	; 0x34
    c08c:	2218      	movs	r2, #24
    c08e:	4694      	mov	ip, r2
    c090:	44bc      	add	ip, r7
    c092:	4463      	add	r3, ip
    c094:	2208      	movs	r2, #8
    c096:	0018      	movs	r0, r3
    c098:	4b67      	ldr	r3, [pc, #412]	; (c238 <_http_client_request+0x320>)
    c09a:	4798      	blx	r3
    c09c:	e00e      	b.n	c0bc <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    c09e:	69fb      	ldr	r3, [r7, #28]
    c0a0:	22c8      	movs	r2, #200	; 0xc8
    c0a2:	5c9b      	ldrb	r3, [r3, r2]
    c0a4:	2b06      	cmp	r3, #6
    c0a6:	d109      	bne.n	c0bc <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    c0a8:	4968      	ldr	r1, [pc, #416]	; (c24c <_http_client_request+0x334>)
    c0aa:	2334      	movs	r3, #52	; 0x34
    c0ac:	2218      	movs	r2, #24
    c0ae:	4694      	mov	ip, r2
    c0b0:	44bc      	add	ip, r7
    c0b2:	4463      	add	r3, ip
    c0b4:	2205      	movs	r2, #5
    c0b6:	0018      	movs	r0, r3
    c0b8:	4b5f      	ldr	r3, [pc, #380]	; (c238 <_http_client_request+0x320>)
    c0ba:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    c0bc:	69fb      	ldr	r3, [r7, #28]
    c0be:	3370      	adds	r3, #112	; 0x70
    c0c0:	001c      	movs	r4, r3
    c0c2:	69fb      	ldr	r3, [r7, #28]
    c0c4:	3370      	adds	r3, #112	; 0x70
    c0c6:	0018      	movs	r0, r3
    c0c8:	4b61      	ldr	r3, [pc, #388]	; (c250 <_http_client_request+0x338>)
    c0ca:	4798      	blx	r3
    c0cc:	0002      	movs	r2, r0
    c0ce:	2334      	movs	r3, #52	; 0x34
    c0d0:	2118      	movs	r1, #24
    c0d2:	468c      	mov	ip, r1
    c0d4:	44bc      	add	ip, r7
    c0d6:	4463      	add	r3, ip
    c0d8:	0021      	movs	r1, r4
    c0da:	0018      	movs	r0, r3
    c0dc:	4b56      	ldr	r3, [pc, #344]	; (c238 <_http_client_request+0x320>)
    c0de:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    c0e0:	495c      	ldr	r1, [pc, #368]	; (c254 <_http_client_request+0x33c>)
    c0e2:	2334      	movs	r3, #52	; 0x34
    c0e4:	2218      	movs	r2, #24
    c0e6:	4694      	mov	ip, r2
    c0e8:	44bc      	add	ip, r7
    c0ea:	4463      	add	r3, ip
    c0ec:	220b      	movs	r2, #11
    c0ee:	0018      	movs	r0, r3
    c0f0:	4b51      	ldr	r3, [pc, #324]	; (c238 <_http_client_request+0x320>)
    c0f2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    c0f4:	4958      	ldr	r1, [pc, #352]	; (c258 <_http_client_request+0x340>)
    c0f6:	2334      	movs	r3, #52	; 0x34
    c0f8:	2218      	movs	r2, #24
    c0fa:	4694      	mov	ip, r2
    c0fc:	44bc      	add	ip, r7
    c0fe:	4463      	add	r3, ip
    c100:	220c      	movs	r2, #12
    c102:	0018      	movs	r0, r3
    c104:	4b4c      	ldr	r3, [pc, #304]	; (c238 <_http_client_request+0x320>)
    c106:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    c108:	69fb      	ldr	r3, [r7, #28]
    c10a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
    c10c:	69fb      	ldr	r3, [r7, #28]
    c10e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c110:	0018      	movs	r0, r3
    c112:	4b4f      	ldr	r3, [pc, #316]	; (c250 <_http_client_request+0x338>)
    c114:	4798      	blx	r3
    c116:	0002      	movs	r2, r0
    c118:	2334      	movs	r3, #52	; 0x34
    c11a:	2118      	movs	r1, #24
    c11c:	468c      	mov	ip, r1
    c11e:	44bc      	add	ip, r7
    c120:	4463      	add	r3, ip
    c122:	0021      	movs	r1, r4
    c124:	0018      	movs	r0, r3
    c126:	4b44      	ldr	r3, [pc, #272]	; (c238 <_http_client_request+0x320>)
    c128:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    c12a:	494c      	ldr	r1, [pc, #304]	; (c25c <_http_client_request+0x344>)
    c12c:	2334      	movs	r3, #52	; 0x34
    c12e:	2218      	movs	r2, #24
    c130:	4694      	mov	ip, r2
    c132:	44bc      	add	ip, r7
    c134:	4463      	add	r3, ip
    c136:	2202      	movs	r2, #2
    c138:	0018      	movs	r0, r3
    c13a:	4b3f      	ldr	r3, [pc, #252]	; (c238 <_http_client_request+0x320>)
    c13c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    c13e:	4948      	ldr	r1, [pc, #288]	; (c260 <_http_client_request+0x348>)
    c140:	2334      	movs	r3, #52	; 0x34
    c142:	2218      	movs	r2, #24
    c144:	4694      	mov	ip, r2
    c146:	44bc      	add	ip, r7
    c148:	4463      	add	r3, ip
    c14a:	2206      	movs	r2, #6
    c14c:	0018      	movs	r0, r3
    c14e:	4b3a      	ldr	r3, [pc, #232]	; (c238 <_http_client_request+0x320>)
    c150:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    c152:	69fb      	ldr	r3, [r7, #28]
    c154:	1c5c      	adds	r4, r3, #1
    c156:	69fb      	ldr	r3, [r7, #28]
    c158:	3301      	adds	r3, #1
    c15a:	0018      	movs	r0, r3
    c15c:	4b3c      	ldr	r3, [pc, #240]	; (c250 <_http_client_request+0x338>)
    c15e:	4798      	blx	r3
    c160:	0002      	movs	r2, r0
    c162:	2334      	movs	r3, #52	; 0x34
    c164:	2118      	movs	r1, #24
    c166:	468c      	mov	ip, r1
    c168:	44bc      	add	ip, r7
    c16a:	4463      	add	r3, ip
    c16c:	0021      	movs	r1, r4
    c16e:	0018      	movs	r0, r3
    c170:	4b31      	ldr	r3, [pc, #196]	; (c238 <_http_client_request+0x320>)
    c172:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    c174:	4939      	ldr	r1, [pc, #228]	; (c25c <_http_client_request+0x344>)
    c176:	2334      	movs	r3, #52	; 0x34
    c178:	2218      	movs	r2, #24
    c17a:	4694      	mov	ip, r2
    c17c:	44bc      	add	ip, r7
    c17e:	4463      	add	r3, ip
    c180:	2202      	movs	r2, #2
    c182:	0018      	movs	r0, r3
    c184:	4b2c      	ldr	r3, [pc, #176]	; (c238 <_http_client_request+0x320>)
    c186:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    c188:	4936      	ldr	r1, [pc, #216]	; (c264 <_http_client_request+0x34c>)
    c18a:	2334      	movs	r3, #52	; 0x34
    c18c:	2218      	movs	r2, #24
    c18e:	4694      	mov	ip, r2
    c190:	44bc      	add	ip, r7
    c192:	4463      	add	r3, ip
    c194:	2218      	movs	r2, #24
    c196:	0018      	movs	r0, r3
    c198:	4b27      	ldr	r3, [pc, #156]	; (c238 <_http_client_request+0x320>)
    c19a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    c19c:	4932      	ldr	r1, [pc, #200]	; (c268 <_http_client_request+0x350>)
    c19e:	2334      	movs	r3, #52	; 0x34
    c1a0:	2218      	movs	r2, #24
    c1a2:	4694      	mov	ip, r2
    c1a4:	44bc      	add	ip, r7
    c1a6:	4463      	add	r3, ip
    c1a8:	2213      	movs	r2, #19
    c1aa:	0018      	movs	r0, r3
    c1ac:	4b22      	ldr	r3, [pc, #136]	; (c238 <_http_client_request+0x320>)
    c1ae:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    c1b0:	492e      	ldr	r1, [pc, #184]	; (c26c <_http_client_request+0x354>)
    c1b2:	2334      	movs	r3, #52	; 0x34
    c1b4:	2218      	movs	r2, #24
    c1b6:	4694      	mov	ip, r2
    c1b8:	44bc      	add	ip, r7
    c1ba:	4463      	add	r3, ip
    c1bc:	2217      	movs	r2, #23
    c1be:	0018      	movs	r0, r3
    c1c0:	4b1d      	ldr	r3, [pc, #116]	; (c238 <_http_client_request+0x320>)
    c1c2:	4798      	blx	r3
		if (entity->read != NULL) {
    c1c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c1c6:	68db      	ldr	r3, [r3, #12]
    c1c8:	2b00      	cmp	r3, #0
    c1ca:	d100      	bne.n	c1ce <_http_client_request+0x2b6>
    c1cc:	e088      	b.n	c2e0 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
    c1ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c1d0:	781b      	ldrb	r3, [r3, #0]
    c1d2:	2b00      	cmp	r3, #0
    c1d4:	d00f      	beq.n	c1f6 <_http_client_request+0x2de>
				module->req.content_length = -1;
    c1d6:	69fb      	ldr	r3, [r7, #28]
    c1d8:	21cc      	movs	r1, #204	; 0xcc
    c1da:	2201      	movs	r2, #1
    c1dc:	4252      	negs	r2, r2
    c1de:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    c1e0:	4923      	ldr	r1, [pc, #140]	; (c270 <_http_client_request+0x358>)
    c1e2:	2334      	movs	r3, #52	; 0x34
    c1e4:	2218      	movs	r2, #24
    c1e6:	4694      	mov	ip, r2
    c1e8:	44bc      	add	ip, r7
    c1ea:	4463      	add	r3, ip
    c1ec:	221c      	movs	r2, #28
    c1ee:	0018      	movs	r0, r3
    c1f0:	4b11      	ldr	r3, [pc, #68]	; (c238 <_http_client_request+0x320>)
    c1f2:	4798      	blx	r3
    c1f4:	e074      	b.n	c2e0 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
    c1f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c1f8:	689b      	ldr	r3, [r3, #8]
    c1fa:	2b00      	cmp	r3, #0
    c1fc:	d070      	beq.n	c2e0 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    c1fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c200:	689a      	ldr	r2, [r3, #8]
    c202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c204:	695b      	ldr	r3, [r3, #20]
    c206:	0018      	movs	r0, r3
    c208:	4790      	blx	r2
    c20a:	0001      	movs	r1, r0
    c20c:	69fb      	ldr	r3, [r7, #28]
    c20e:	22cc      	movs	r2, #204	; 0xcc
    c210:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
    c212:	69fb      	ldr	r3, [r7, #28]
    c214:	22cc      	movs	r2, #204	; 0xcc
    c216:	589b      	ldr	r3, [r3, r2]
    c218:	2b00      	cmp	r3, #0
    c21a:	da2b      	bge.n	c274 <_http_client_request+0x35c>
					module->req.content_length = 0;
    c21c:	69fb      	ldr	r3, [r7, #28]
    c21e:	22cc      	movs	r2, #204	; 0xcc
    c220:	2100      	movs	r1, #0
    c222:	5099      	str	r1, [r3, r2]
    c224:	e05c      	b.n	c2e0 <_http_client_request+0x3c8>
    c226:	46c0      	nop			; (mov r8, r8)
    c228:	0001a780 	.word	0x0001a780
    c22c:	0000be91 	.word	0x0000be91
    c230:	0000cdf9 	.word	0x0000cdf9
    c234:	0001a6a4 	.word	0x0001a6a4
    c238:	0000ceb9 	.word	0x0000ceb9
    c23c:	0001a6ac 	.word	0x0001a6ac
    c240:	0001a6b4 	.word	0x0001a6b4
    c244:	0001a6bc 	.word	0x0001a6bc
    c248:	0001a6c4 	.word	0x0001a6c4
    c24c:	0001a6d0 	.word	0x0001a6d0
    c250:	000141af 	.word	0x000141af
    c254:	0001a6d8 	.word	0x0001a6d8
    c258:	0001a6e4 	.word	0x0001a6e4
    c25c:	0001a6f4 	.word	0x0001a6f4
    c260:	0001a6f8 	.word	0x0001a6f8
    c264:	0001a700 	.word	0x0001a700
    c268:	0001a71c 	.word	0x0001a71c
    c26c:	0001a730 	.word	0x0001a730
    c270:	0001a748 	.word	0x0001a748
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    c274:	69fb      	ldr	r3, [r7, #28]
    c276:	22cc      	movs	r2, #204	; 0xcc
    c278:	589b      	ldr	r3, [r3, r2]
    c27a:	001a      	movs	r2, r3
    c27c:	49e0      	ldr	r1, [pc, #896]	; (c600 <_http_client_request+0x6e8>)
    c27e:	2328      	movs	r3, #40	; 0x28
    c280:	2018      	movs	r0, #24
    c282:	4684      	mov	ip, r0
    c284:	44bc      	add	ip, r7
    c286:	4463      	add	r3, ip
    c288:	0018      	movs	r0, r3
    c28a:	4bde      	ldr	r3, [pc, #888]	; (c604 <_http_client_request+0x6ec>)
    c28c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    c28e:	49de      	ldr	r1, [pc, #888]	; (c608 <_http_client_request+0x6f0>)
    c290:	2334      	movs	r3, #52	; 0x34
    c292:	2218      	movs	r2, #24
    c294:	4694      	mov	ip, r2
    c296:	44bc      	add	ip, r7
    c298:	4463      	add	r3, ip
    c29a:	2210      	movs	r2, #16
    c29c:	0018      	movs	r0, r3
    c29e:	4bdb      	ldr	r3, [pc, #876]	; (c60c <_http_client_request+0x6f4>)
    c2a0:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
    c2a2:	2328      	movs	r3, #40	; 0x28
    c2a4:	2218      	movs	r2, #24
    c2a6:	4694      	mov	ip, r2
    c2a8:	44bc      	add	ip, r7
    c2aa:	4463      	add	r3, ip
    c2ac:	0018      	movs	r0, r3
    c2ae:	4bd8      	ldr	r3, [pc, #864]	; (c610 <_http_client_request+0x6f8>)
    c2b0:	4798      	blx	r3
    c2b2:	0002      	movs	r2, r0
    c2b4:	2328      	movs	r3, #40	; 0x28
    c2b6:	2118      	movs	r1, #24
    c2b8:	1879      	adds	r1, r7, r1
    c2ba:	18c9      	adds	r1, r1, r3
    c2bc:	2334      	movs	r3, #52	; 0x34
    c2be:	2018      	movs	r0, #24
    c2c0:	4684      	mov	ip, r0
    c2c2:	44bc      	add	ip, r7
    c2c4:	4463      	add	r3, ip
    c2c6:	0018      	movs	r0, r3
    c2c8:	4bd0      	ldr	r3, [pc, #832]	; (c60c <_http_client_request+0x6f4>)
    c2ca:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    c2cc:	49d1      	ldr	r1, [pc, #836]	; (c614 <_http_client_request+0x6fc>)
    c2ce:	2334      	movs	r3, #52	; 0x34
    c2d0:	2218      	movs	r2, #24
    c2d2:	4694      	mov	ip, r2
    c2d4:	44bc      	add	ip, r7
    c2d6:	4463      	add	r3, ip
    c2d8:	2202      	movs	r2, #2
    c2da:	0018      	movs	r0, r3
    c2dc:	4bcb      	ldr	r3, [pc, #812]	; (c60c <_http_client_request+0x6f4>)
    c2de:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
    c2e0:	69fb      	ldr	r3, [r7, #28]
    c2e2:	22d4      	movs	r2, #212	; 0xd4
    c2e4:	589b      	ldr	r3, [r3, r2]
    c2e6:	2b00      	cmp	r3, #0
    c2e8:	d012      	beq.n	c310 <_http_client_request+0x3f8>
			stream_writer_send_buffer(&writer,
    c2ea:	69fb      	ldr	r3, [r7, #28]
    c2ec:	22d4      	movs	r2, #212	; 0xd4
    c2ee:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
    c2f0:	69fb      	ldr	r3, [r7, #28]
    c2f2:	22d4      	movs	r2, #212	; 0xd4
    c2f4:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
    c2f6:	0018      	movs	r0, r3
    c2f8:	4bc5      	ldr	r3, [pc, #788]	; (c610 <_http_client_request+0x6f8>)
    c2fa:	4798      	blx	r3
    c2fc:	0002      	movs	r2, r0
    c2fe:	2334      	movs	r3, #52	; 0x34
    c300:	2118      	movs	r1, #24
    c302:	468c      	mov	ip, r1
    c304:	44bc      	add	ip, r7
    c306:	4463      	add	r3, ip
    c308:	0021      	movs	r1, r4
    c30a:	0018      	movs	r0, r3
    c30c:	4bbf      	ldr	r3, [pc, #764]	; (c60c <_http_client_request+0x6f4>)
    c30e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    c310:	49c0      	ldr	r1, [pc, #768]	; (c614 <_http_client_request+0x6fc>)
    c312:	2334      	movs	r3, #52	; 0x34
    c314:	2218      	movs	r2, #24
    c316:	4694      	mov	ip, r2
    c318:	44bc      	add	ip, r7
    c31a:	4463      	add	r3, ip
    c31c:	2202      	movs	r2, #2
    c31e:	0018      	movs	r0, r3
    c320:	4bba      	ldr	r3, [pc, #744]	; (c60c <_http_client_request+0x6f4>)
    c322:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    c324:	2334      	movs	r3, #52	; 0x34
    c326:	2218      	movs	r2, #24
    c328:	4694      	mov	ip, r2
    c32a:	44bc      	add	ip, r7
    c32c:	4463      	add	r3, ip
    c32e:	0018      	movs	r0, r3
    c330:	4bb9      	ldr	r3, [pc, #740]	; (c618 <_http_client_request+0x700>)
    c332:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
    c334:	69fb      	ldr	r3, [r7, #28]
    c336:	2204      	movs	r2, #4
    c338:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
    c33a:	69fb      	ldr	r3, [r7, #28]
    c33c:	22cc      	movs	r2, #204	; 0xcc
    c33e:	589b      	ldr	r3, [r3, r2]
    c340:	2b00      	cmp	r3, #0
    c342:	db00      	blt.n	c346 <_http_client_request+0x42e>
    c344:	e0c6      	b.n	c4d4 <_http_client_request+0x5bc>
    c346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c348:	68db      	ldr	r3, [r3, #12]
    c34a:	2b00      	cmp	r3, #0
    c34c:	d100      	bne.n	c350 <_http_client_request+0x438>
    c34e:	e0c1      	b.n	c4d4 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    c350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c352:	68dc      	ldr	r4, [r3, #12]
    c354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c356:	6958      	ldr	r0, [r3, #20]
    c358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c35a:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    c35c:	69fb      	ldr	r3, [r7, #28]
    c35e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    c360:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    c362:	69fb      	ldr	r3, [r7, #28]
    c364:	22d0      	movs	r2, #208	; 0xd0
    c366:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    c368:	002a      	movs	r2, r5
    c36a:	47a0      	blx	r4
    c36c:	0003      	movs	r3, r0
    c36e:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
    c370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c372:	2b00      	cmp	r3, #0
    c374:	da01      	bge.n	c37a <_http_client_request+0x462>
				size = 0;
    c376:	2300      	movs	r3, #0
    c378:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    c37a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c37c:	220a      	movs	r2, #10
    c37e:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    c380:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c382:	220d      	movs	r2, #13
    c384:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    c386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c388:	3305      	adds	r3, #5
    c38a:	6eba      	ldr	r2, [r7, #104]	; 0x68
    c38c:	210d      	movs	r1, #13
    c38e:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    c390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c392:	3306      	adds	r3, #6
    c394:	6eba      	ldr	r2, [r7, #104]	; 0x68
    c396:	210a      	movs	r1, #10
    c398:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
    c39a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c39c:	2b00      	cmp	r3, #0
    c39e:	db14      	blt.n	c3ca <_http_client_request+0x4b2>
				ptr = buffer + 2;
    c3a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c3a2:	3302      	adds	r3, #2
    c3a4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
    c3a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c3a8:	4a9c      	ldr	r2, [pc, #624]	; (c61c <_http_client_request+0x704>)
    c3aa:	4013      	ands	r3, r2
    c3ac:	d504      	bpl.n	c3b8 <_http_client_request+0x4a0>
    c3ae:	3b01      	subs	r3, #1
    c3b0:	2210      	movs	r2, #16
    c3b2:	4252      	negs	r2, r2
    c3b4:	4313      	orrs	r3, r2
    c3b6:	3301      	adds	r3, #1
    c3b8:	001a      	movs	r2, r3
    c3ba:	2318      	movs	r3, #24
    c3bc:	2118      	movs	r1, #24
    c3be:	468c      	mov	ip, r1
    c3c0:	44bc      	add	ip, r7
    c3c2:	4463      	add	r3, ip
    c3c4:	5c9a      	ldrb	r2, [r3, r2]
    c3c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c3c8:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
    c3ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c3cc:	2b0f      	cmp	r3, #15
    c3ce:	dd19      	ble.n	c404 <_http_client_request+0x4ec>
				ptr = buffer + 1;
    c3d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c3d2:	3301      	adds	r3, #1
    c3d4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
    c3d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c3d8:	2b00      	cmp	r3, #0
    c3da:	da00      	bge.n	c3de <_http_client_request+0x4c6>
    c3dc:	330f      	adds	r3, #15
    c3de:	111b      	asrs	r3, r3, #4
    c3e0:	001a      	movs	r2, r3
    c3e2:	4b8e      	ldr	r3, [pc, #568]	; (c61c <_http_client_request+0x704>)
    c3e4:	4013      	ands	r3, r2
    c3e6:	d504      	bpl.n	c3f2 <_http_client_request+0x4da>
    c3e8:	3b01      	subs	r3, #1
    c3ea:	2210      	movs	r2, #16
    c3ec:	4252      	negs	r2, r2
    c3ee:	4313      	orrs	r3, r2
    c3f0:	3301      	adds	r3, #1
    c3f2:	001a      	movs	r2, r3
    c3f4:	2318      	movs	r3, #24
    c3f6:	2118      	movs	r1, #24
    c3f8:	468c      	mov	ip, r1
    c3fa:	44bc      	add	ip, r7
    c3fc:	4463      	add	r3, ip
    c3fe:	5c9a      	ldrb	r2, [r3, r2]
    c400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c402:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
    c404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c406:	2bff      	cmp	r3, #255	; 0xff
    c408:	dd18      	ble.n	c43c <_http_client_request+0x524>
				ptr = buffer;
    c40a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c40c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
    c40e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c410:	2b00      	cmp	r3, #0
    c412:	da00      	bge.n	c416 <_http_client_request+0x4fe>
    c414:	33ff      	adds	r3, #255	; 0xff
    c416:	121b      	asrs	r3, r3, #8
    c418:	001a      	movs	r2, r3
    c41a:	4b80      	ldr	r3, [pc, #512]	; (c61c <_http_client_request+0x704>)
    c41c:	4013      	ands	r3, r2
    c41e:	d504      	bpl.n	c42a <_http_client_request+0x512>
    c420:	3b01      	subs	r3, #1
    c422:	2210      	movs	r2, #16
    c424:	4252      	negs	r2, r2
    c426:	4313      	orrs	r3, r2
    c428:	3301      	adds	r3, #1
    c42a:	001a      	movs	r2, r3
    c42c:	2318      	movs	r3, #24
    c42e:	2118      	movs	r1, #24
    c430:	468c      	mov	ip, r1
    c432:	44bc      	add	ip, r7
    c434:	4463      	add	r3, ip
    c436:	5c9a      	ldrb	r2, [r3, r2]
    c438:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c43a:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    c43c:	69fb      	ldr	r3, [r7, #28]
    c43e:	2000      	movs	r0, #0
    c440:	5618      	ldrsb	r0, [r3, r0]
    c442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c444:	3303      	adds	r3, #3
    c446:	001a      	movs	r2, r3
    c448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c44a:	1ad3      	subs	r3, r2, r3
    c44c:	b29a      	uxth	r2, r3
    c44e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c450:	b29b      	uxth	r3, r3
    c452:	18d3      	adds	r3, r2, r3
    c454:	b29b      	uxth	r3, r3
    c456:	3304      	adds	r3, #4
    c458:	b29a      	uxth	r2, r3
    c45a:	6f39      	ldr	r1, [r7, #112]	; 0x70
    c45c:	2300      	movs	r3, #0
    c45e:	4c70      	ldr	r4, [pc, #448]	; (c620 <_http_client_request+0x708>)
    c460:	47a0      	blx	r4
    c462:	0003      	movs	r3, r0
    c464:	663b      	str	r3, [r7, #96]	; 0x60
    c466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    c468:	2b00      	cmp	r3, #0
    c46a:	da07      	bge.n	c47c <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
    c46c:	2305      	movs	r3, #5
    c46e:	425a      	negs	r2, r3
    c470:	69fb      	ldr	r3, [r7, #28]
    c472:	0011      	movs	r1, r2
    c474:	0018      	movs	r0, r3
    c476:	4b6b      	ldr	r3, [pc, #428]	; (c624 <_http_client_request+0x70c>)
    c478:	4798      	blx	r3
				return;
    c47a:	e0e1      	b.n	c640 <_http_client_request+0x728>
			module->req.sent_length += size;
    c47c:	69fb      	ldr	r3, [r7, #28]
    c47e:	22d0      	movs	r2, #208	; 0xd0
    c480:	589a      	ldr	r2, [r3, r2]
    c482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c484:	18d2      	adds	r2, r2, r3
    c486:	69fb      	ldr	r3, [r7, #28]
    c488:	21d0      	movs	r1, #208	; 0xd0
    c48a:	505a      	str	r2, [r3, r1]
			if(size == 0) {
    c48c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c48e:	2b00      	cmp	r3, #0
    c490:	d000      	beq.n	c494 <_http_client_request+0x57c>
    c492:	e0c9      	b.n	c628 <_http_client_request+0x710>
				if (module->req.entity.close) {
    c494:	69fb      	ldr	r3, [r7, #28]
    c496:	22c0      	movs	r2, #192	; 0xc0
    c498:	589b      	ldr	r3, [r3, r2]
    c49a:	2b00      	cmp	r3, #0
    c49c:	d007      	beq.n	c4ae <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
    c49e:	69fb      	ldr	r3, [r7, #28]
    c4a0:	22c0      	movs	r2, #192	; 0xc0
    c4a2:	589b      	ldr	r3, [r3, r2]
    c4a4:	69fa      	ldr	r2, [r7, #28]
    c4a6:	21c4      	movs	r1, #196	; 0xc4
    c4a8:	5852      	ldr	r2, [r2, r1]
    c4aa:	0010      	movs	r0, r2
    c4ac:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    c4ae:	69fb      	ldr	r3, [r7, #28]
    c4b0:	2202      	movs	r2, #2
    c4b2:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    c4b4:	69fb      	ldr	r3, [r7, #28]
    c4b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c4b8:	2b00      	cmp	r3, #0
    c4ba:	d100      	bne.n	c4be <_http_client_request+0x5a6>
    c4bc:	e0b5      	b.n	c62a <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    c4be:	69fb      	ldr	r3, [r7, #28]
    c4c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c4c2:	220c      	movs	r2, #12
    c4c4:	2118      	movs	r1, #24
    c4c6:	468c      	mov	ip, r1
    c4c8:	44bc      	add	ip, r7
    c4ca:	4462      	add	r2, ip
    c4cc:	69f8      	ldr	r0, [r7, #28]
    c4ce:	2101      	movs	r1, #1
    c4d0:	4798      	blx	r3
				break;
    c4d2:	e0aa      	b.n	c62a <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
    c4d4:	69fb      	ldr	r3, [r7, #28]
    c4d6:	22cc      	movs	r2, #204	; 0xcc
    c4d8:	589b      	ldr	r3, [r3, r2]
    c4da:	2b00      	cmp	r3, #0
    c4dc:	dc00      	bgt.n	c4e0 <_http_client_request+0x5c8>
    c4de:	e07c      	b.n	c5da <_http_client_request+0x6c2>
    c4e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c4e2:	68db      	ldr	r3, [r3, #12]
    c4e4:	2b00      	cmp	r3, #0
    c4e6:	d100      	bne.n	c4ea <_http_client_request+0x5d2>
    c4e8:	e077      	b.n	c5da <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
    c4ea:	69fb      	ldr	r3, [r7, #28]
    c4ec:	22d0      	movs	r2, #208	; 0xd0
    c4ee:	589a      	ldr	r2, [r3, r2]
    c4f0:	69fb      	ldr	r3, [r7, #28]
    c4f2:	21cc      	movs	r1, #204	; 0xcc
    c4f4:	585b      	ldr	r3, [r3, r1]
    c4f6:	429a      	cmp	r2, r3
    c4f8:	db1f      	blt.n	c53a <_http_client_request+0x622>
				if (module->req.entity.close) {
    c4fa:	69fb      	ldr	r3, [r7, #28]
    c4fc:	22c0      	movs	r2, #192	; 0xc0
    c4fe:	589b      	ldr	r3, [r3, r2]
    c500:	2b00      	cmp	r3, #0
    c502:	d007      	beq.n	c514 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
    c504:	69fb      	ldr	r3, [r7, #28]
    c506:	22c0      	movs	r2, #192	; 0xc0
    c508:	589b      	ldr	r3, [r3, r2]
    c50a:	69fa      	ldr	r2, [r7, #28]
    c50c:	21c4      	movs	r1, #196	; 0xc4
    c50e:	5852      	ldr	r2, [r2, r1]
    c510:	0010      	movs	r0, r2
    c512:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    c514:	69fb      	ldr	r3, [r7, #28]
    c516:	2202      	movs	r2, #2
    c518:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    c51a:	69fb      	ldr	r3, [r7, #28]
    c51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c51e:	2b00      	cmp	r3, #0
    c520:	d100      	bne.n	c524 <_http_client_request+0x60c>
    c522:	e084      	b.n	c62e <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    c524:	69fb      	ldr	r3, [r7, #28]
    c526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c528:	220c      	movs	r2, #12
    c52a:	2118      	movs	r1, #24
    c52c:	468c      	mov	ip, r1
    c52e:	44bc      	add	ip, r7
    c530:	4462      	add	r2, ip
    c532:	69f8      	ldr	r0, [r7, #28]
    c534:	2101      	movs	r1, #1
    c536:	4798      	blx	r3
				break;
    c538:	e079      	b.n	c62e <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    c53a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c53c:	68dc      	ldr	r4, [r3, #12]
    c53e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c540:	6958      	ldr	r0, [r3, #20]
    c542:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    c544:	69fb      	ldr	r3, [r7, #28]
    c546:	6e5d      	ldr	r5, [r3, #100]	; 0x64
    c548:	69fb      	ldr	r3, [r7, #28]
    c54a:	22d0      	movs	r2, #208	; 0xd0
    c54c:	589b      	ldr	r3, [r3, r2]
    c54e:	002a      	movs	r2, r5
    c550:	47a0      	blx	r4
    c552:	0003      	movs	r3, r0
    c554:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
    c556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c558:	2b00      	cmp	r3, #0
    c55a:	da0d      	bge.n	c578 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    c55c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c55e:	2b00      	cmp	r3, #0
    c560:	d102      	bne.n	c568 <_http_client_request+0x650>
    c562:	234d      	movs	r3, #77	; 0x4d
    c564:	425b      	negs	r3, r3
    c566:	e001      	b.n	c56c <_http_client_request+0x654>
    c568:	2305      	movs	r3, #5
    c56a:	425b      	negs	r3, r3
    c56c:	69fa      	ldr	r2, [r7, #28]
    c56e:	0019      	movs	r1, r3
    c570:	0010      	movs	r0, r2
    c572:	4b2c      	ldr	r3, [pc, #176]	; (c624 <_http_client_request+0x70c>)
    c574:	4798      	blx	r3
			if (size < 0) {
    c576:	e057      	b.n	c628 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
    c578:	69fb      	ldr	r3, [r7, #28]
    c57a:	22cc      	movs	r2, #204	; 0xcc
    c57c:	589a      	ldr	r2, [r3, r2]
    c57e:	69fb      	ldr	r3, [r7, #28]
    c580:	21d0      	movs	r1, #208	; 0xd0
    c582:	585b      	ldr	r3, [r3, r1]
    c584:	1ad2      	subs	r2, r2, r3
    c586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c588:	429a      	cmp	r2, r3
    c58a:	da07      	bge.n	c59c <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
    c58c:	69fb      	ldr	r3, [r7, #28]
    c58e:	22cc      	movs	r2, #204	; 0xcc
    c590:	589a      	ldr	r2, [r3, r2]
    c592:	69fb      	ldr	r3, [r7, #28]
    c594:	21d0      	movs	r1, #208	; 0xd0
    c596:	585b      	ldr	r3, [r3, r1]
    c598:	1ad3      	subs	r3, r2, r3
    c59a:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    c59c:	69fb      	ldr	r3, [r7, #28]
    c59e:	2000      	movs	r0, #0
    c5a0:	5618      	ldrsb	r0, [r3, r0]
    c5a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    c5a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c5a6:	b29a      	uxth	r2, r3
    c5a8:	2300      	movs	r3, #0
    c5aa:	4c1d      	ldr	r4, [pc, #116]	; (c620 <_http_client_request+0x708>)
    c5ac:	47a0      	blx	r4
    c5ae:	0003      	movs	r3, r0
    c5b0:	663b      	str	r3, [r7, #96]	; 0x60
    c5b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    c5b4:	2b00      	cmp	r3, #0
    c5b6:	da07      	bge.n	c5c8 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
    c5b8:	2305      	movs	r3, #5
    c5ba:	425a      	negs	r2, r3
    c5bc:	69fb      	ldr	r3, [r7, #28]
    c5be:	0011      	movs	r1, r2
    c5c0:	0018      	movs	r0, r3
    c5c2:	4b18      	ldr	r3, [pc, #96]	; (c624 <_http_client_request+0x70c>)
    c5c4:	4798      	blx	r3
					return;
    c5c6:	e03b      	b.n	c640 <_http_client_request+0x728>
				module->req.sent_length += size;
    c5c8:	69fb      	ldr	r3, [r7, #28]
    c5ca:	22d0      	movs	r2, #208	; 0xd0
    c5cc:	589a      	ldr	r2, [r3, r2]
    c5ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c5d0:	18d2      	adds	r2, r2, r3
    c5d2:	69fb      	ldr	r3, [r7, #28]
    c5d4:	21d0      	movs	r1, #208	; 0xd0
    c5d6:	505a      	str	r2, [r3, r1]
			if (size < 0) {
    c5d8:	e026      	b.n	c628 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
    c5da:	69fb      	ldr	r3, [r7, #28]
    c5dc:	2202      	movs	r2, #2
    c5de:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
    c5e0:	69fb      	ldr	r3, [r7, #28]
    c5e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c5e4:	2b00      	cmp	r3, #0
    c5e6:	d024      	beq.n	c632 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    c5e8:	69fb      	ldr	r3, [r7, #28]
    c5ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c5ec:	220c      	movs	r2, #12
    c5ee:	2118      	movs	r1, #24
    c5f0:	468c      	mov	ip, r1
    c5f2:	44bc      	add	ip, r7
    c5f4:	4462      	add	r2, ip
    c5f6:	69f8      	ldr	r0, [r7, #28]
    c5f8:	2101      	movs	r1, #1
    c5fa:	4798      	blx	r3
			break;
    c5fc:	e019      	b.n	c632 <_http_client_request+0x71a>
    c5fe:	46c0      	nop			; (mov r8, r8)
    c600:	0001a768 	.word	0x0001a768
    c604:	0001410d 	.word	0x0001410d
    c608:	0001a76c 	.word	0x0001a76c
    c60c:	0000ceb9 	.word	0x0000ceb9
    c610:	000141af 	.word	0x000141af
    c614:	0001a6f4 	.word	0x0001a6f4
    c618:	0000cef5 	.word	0x0000cef5
    c61c:	8000000f 	.word	0x8000000f
    c620:	000086b9 	.word	0x000086b9
    c624:	0000bdc5 	.word	0x0000bdc5
		break;
    c628:	e004      	b.n	c634 <_http_client_request+0x71c>
				break;
    c62a:	46c0      	nop			; (mov r8, r8)
    c62c:	e002      	b.n	c634 <_http_client_request+0x71c>
				break;
    c62e:	46c0      	nop			; (mov r8, r8)
    c630:	e000      	b.n	c634 <_http_client_request+0x71c>
			break;
    c632:	46c0      	nop			; (mov r8, r8)
    c634:	69bb      	ldr	r3, [r7, #24]
    c636:	469d      	mov	sp, r3
    c638:	e004      	b.n	c644 <_http_client_request+0x72c>
		return;
    c63a:	46c0      	nop			; (mov r8, r8)
    c63c:	e000      	b.n	c640 <_http_client_request+0x728>
		return;
    c63e:	46c0      	nop			; (mov r8, r8)
    c640:	69bb      	ldr	r3, [r7, #24]
    c642:	469d      	mov	sp, r3
	}
}
    c644:	46bd      	mov	sp, r7
    c646:	b01e      	add	sp, #120	; 0x78
    c648:	bc04      	pop	{r2}
    c64a:	4690      	mov	r8, r2
    c64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c64e:	46c0      	nop			; (mov r8, r8)

0000c650 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    c650:	b590      	push	{r4, r7, lr}
    c652:	b083      	sub	sp, #12
    c654:	af00      	add	r7, sp, #0
    c656:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
    c658:	687b      	ldr	r3, [r7, #4]
    c65a:	2b00      	cmp	r3, #0
    c65c:	d021      	beq.n	c6a2 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    c65e:	687b      	ldr	r3, [r7, #4]
    c660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    c662:	687b      	ldr	r3, [r7, #4]
    c664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    c666:	429a      	cmp	r2, r3
    c668:	d307      	bcc.n	c67a <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
    c66a:	238b      	movs	r3, #139	; 0x8b
    c66c:	425a      	negs	r2, r3
    c66e:	687b      	ldr	r3, [r7, #4]
    c670:	0011      	movs	r1, r2
    c672:	0018      	movs	r0, r3
    c674:	4b0d      	ldr	r3, [pc, #52]	; (c6ac <_http_client_recv_packet+0x5c>)
    c676:	4798      	blx	r3
		return;
    c678:	e014      	b.n	c6a4 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    c67a:	687b      	ldr	r3, [r7, #4]
    c67c:	2000      	movs	r0, #0
    c67e:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
    c680:	687b      	ldr	r3, [r7, #4]
    c682:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    c684:	687b      	ldr	r3, [r7, #4]
    c686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c688:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
    c68a:	687b      	ldr	r3, [r7, #4]
    c68c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
    c68e:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
    c690:	687b      	ldr	r3, [r7, #4]
    c692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
    c694:	b29b      	uxth	r3, r3
    c696:	1ad3      	subs	r3, r2, r3
    c698:	b29a      	uxth	r2, r3
    c69a:	2300      	movs	r3, #0
    c69c:	4c04      	ldr	r4, [pc, #16]	; (c6b0 <_http_client_recv_packet+0x60>)
    c69e:	47a0      	blx	r4
    c6a0:	e000      	b.n	c6a4 <_http_client_recv_packet+0x54>
		return;
    c6a2:	46c0      	nop			; (mov r8, r8)
}
    c6a4:	46bd      	mov	sp, r7
    c6a6:	b003      	add	sp, #12
    c6a8:	bd90      	pop	{r4, r7, pc}
    c6aa:	46c0      	nop			; (mov r8, r8)
    c6ac:	0000bdc5 	.word	0x0000bdc5
    c6b0:	0000881d 	.word	0x0000881d

0000c6b4 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
    c6b4:	b580      	push	{r7, lr}
    c6b6:	b082      	sub	sp, #8
    c6b8:	af00      	add	r7, sp, #0
    c6ba:	6078      	str	r0, [r7, #4]
    c6bc:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
    c6be:	687b      	ldr	r3, [r7, #4]
    c6c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    c6c2:	683b      	ldr	r3, [r7, #0]
    c6c4:	18d2      	adds	r2, r2, r3
    c6c6:	687b      	ldr	r3, [r7, #4]
    c6c8:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
    c6ca:	687b      	ldr	r3, [r7, #4]
    c6cc:	2258      	movs	r2, #88	; 0x58
    c6ce:	5a9b      	ldrh	r3, [r3, r2]
    c6d0:	2b00      	cmp	r3, #0
    c6d2:	d007      	beq.n	c6e4 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    c6d4:	687b      	ldr	r3, [r7, #4]
    c6d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    c6d8:	687b      	ldr	r3, [r7, #4]
    c6da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c6dc:	0019      	movs	r1, r3
    c6de:	0010      	movs	r0, r2
    c6e0:	4b06      	ldr	r3, [pc, #24]	; (c6fc <_http_client_recved_packet+0x48>)
    c6e2:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
    c6e4:	46c0      	nop			; (mov r8, r8)
    c6e6:	687b      	ldr	r3, [r7, #4]
    c6e8:	0018      	movs	r0, r3
    c6ea:	4b05      	ldr	r3, [pc, #20]	; (c700 <_http_client_recved_packet+0x4c>)
    c6ec:	4798      	blx	r3
    c6ee:	1e03      	subs	r3, r0, #0
    c6f0:	d1f9      	bne.n	c6e6 <_http_client_recved_packet+0x32>
}
    c6f2:	46c0      	nop			; (mov r8, r8)
    c6f4:	46bd      	mov	sp, r7
    c6f6:	b002      	add	sp, #8
    c6f8:	bd80      	pop	{r7, pc}
    c6fa:	46c0      	nop			; (mov r8, r8)
    c6fc:	0000d1dd 	.word	0x0000d1dd
    c700:	0000c705 	.word	0x0000c705

0000c704 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
    c704:	b580      	push	{r7, lr}
    c706:	b082      	sub	sp, #8
    c708:	af00      	add	r7, sp, #0
    c70a:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
    c70c:	687b      	ldr	r3, [r7, #4]
    c70e:	22d8      	movs	r2, #216	; 0xd8
    c710:	589b      	ldr	r3, [r3, r2]
    c712:	2b00      	cmp	r3, #0
    c714:	d002      	beq.n	c71c <_http_client_handle_response+0x18>
    c716:	2b01      	cmp	r3, #1
    c718:	d006      	beq.n	c728 <_http_client_handle_response+0x24>
    c71a:	e00b      	b.n	c734 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
    c71c:	687b      	ldr	r3, [r7, #4]
    c71e:	0018      	movs	r0, r3
    c720:	4b07      	ldr	r3, [pc, #28]	; (c740 <_http_client_handle_response+0x3c>)
    c722:	4798      	blx	r3
    c724:	0003      	movs	r3, r0
    c726:	e006      	b.n	c736 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
    c728:	687b      	ldr	r3, [r7, #4]
    c72a:	0018      	movs	r0, r3
    c72c:	4b05      	ldr	r3, [pc, #20]	; (c744 <_http_client_handle_response+0x40>)
    c72e:	4798      	blx	r3
    c730:	0003      	movs	r3, r0
    c732:	e000      	b.n	c736 <_http_client_handle_response+0x32>
	}
	return 0;
    c734:	2300      	movs	r3, #0
}
    c736:	0018      	movs	r0, r3
    c738:	46bd      	mov	sp, r7
    c73a:	b002      	add	sp, #8
    c73c:	bd80      	pop	{r7, pc}
    c73e:	46c0      	nop			; (mov r8, r8)
    c740:	0000c749 	.word	0x0000c749
    c744:	0000cc01 	.word	0x0000cc01

0000c748 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
    c748:	b590      	push	{r4, r7, lr}
    c74a:	b08b      	sub	sp, #44	; 0x2c
    c74c:	af00      	add	r7, sp, #0
    c74e:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
    c750:	687b      	ldr	r3, [r7, #4]
    c752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    c754:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
    c756:	4b9a      	ldr	r3, [pc, #616]	; (c9c0 <_http_client_handle_header+0x278>)
    c758:	681a      	ldr	r2, [r3, #0]
    c75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c75c:	0011      	movs	r1, r2
    c75e:	0018      	movs	r0, r3
    c760:	4b98      	ldr	r3, [pc, #608]	; (c9c4 <_http_client_handle_header+0x27c>)
    c762:	4798      	blx	r3
    c764:	0003      	movs	r3, r0
    c766:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    c768:	69bb      	ldr	r3, [r7, #24]
    c76a:	2b00      	cmp	r3, #0
    c76c:	d007      	beq.n	c77e <_http_client_handle_header+0x36>
    c76e:	687b      	ldr	r3, [r7, #4]
    c770:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    c772:	687b      	ldr	r3, [r7, #4]
    c774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c776:	18d2      	adds	r2, r2, r3
    c778:	69bb      	ldr	r3, [r7, #24]
    c77a:	429a      	cmp	r2, r3
    c77c:	d807      	bhi.n	c78e <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
    c77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c780:	687b      	ldr	r3, [r7, #4]
    c782:	0011      	movs	r1, r2
    c784:	0018      	movs	r0, r3
    c786:	4b90      	ldr	r3, [pc, #576]	; (c9c8 <_http_client_handle_header+0x280>)
    c788:	4798      	blx	r3
			return 0;
    c78a:	2300      	movs	r3, #0
    c78c:	e114      	b.n	c9b8 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
    c78e:	4b8c      	ldr	r3, [pc, #560]	; (c9c0 <_http_client_handle_header+0x278>)
    c790:	681c      	ldr	r4, [r3, #0]
    c792:	4b8b      	ldr	r3, [pc, #556]	; (c9c0 <_http_client_handle_header+0x278>)
    c794:	681b      	ldr	r3, [r3, #0]
    c796:	0018      	movs	r0, r3
    c798:	4b8c      	ldr	r3, [pc, #560]	; (c9cc <_http_client_handle_header+0x284>)
    c79a:	4798      	blx	r3
    c79c:	0002      	movs	r2, r0
    c79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c7a0:	0021      	movs	r1, r4
    c7a2:	0018      	movs	r0, r3
    c7a4:	4b8a      	ldr	r3, [pc, #552]	; (c9d0 <_http_client_handle_header+0x288>)
    c7a6:	4798      	blx	r3
    c7a8:	1e03      	subs	r3, r0, #0
    c7aa:	d15d      	bne.n	c868 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
    c7ac:	4b84      	ldr	r3, [pc, #528]	; (c9c0 <_http_client_handle_header+0x278>)
    c7ae:	681b      	ldr	r3, [r3, #0]
    c7b0:	0018      	movs	r0, r3
    c7b2:	4b86      	ldr	r3, [pc, #536]	; (c9cc <_http_client_handle_header+0x284>)
    c7b4:	4798      	blx	r3
    c7b6:	0002      	movs	r2, r0
    c7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c7ba:	189a      	adds	r2, r3, r2
    c7bc:	687b      	ldr	r3, [r7, #4]
    c7be:	0011      	movs	r1, r2
    c7c0:	0018      	movs	r0, r3
    c7c2:	4b81      	ldr	r3, [pc, #516]	; (c9c8 <_http_client_handle_header+0x280>)
    c7c4:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
    c7c6:	687b      	ldr	r3, [r7, #4]
    c7c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c7ca:	2b00      	cmp	r3, #0
    c7cc:	d046      	beq.n	c85c <_http_client_handle_header+0x114>
    c7ce:	687b      	ldr	r3, [r7, #4]
    c7d0:	22e4      	movs	r2, #228	; 0xe4
    c7d2:	5a9b      	ldrh	r3, [r3, r2]
    c7d4:	2b00      	cmp	r3, #0
    c7d6:	d041      	beq.n	c85c <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
    c7d8:	687b      	ldr	r3, [r7, #4]
    c7da:	22dc      	movs	r2, #220	; 0xdc
    c7dc:	589b      	ldr	r3, [r3, r2]
    c7de:	2b00      	cmp	r3, #0
    c7e0:	da19      	bge.n	c816 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
    c7e2:	687b      	ldr	r3, [r7, #4]
    c7e4:	22e4      	movs	r2, #228	; 0xe4
    c7e6:	5a9a      	ldrh	r2, [r3, r2]
    c7e8:	230c      	movs	r3, #12
    c7ea:	18fb      	adds	r3, r7, r3
    c7ec:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
    c7ee:	230c      	movs	r3, #12
    c7f0:	18fb      	adds	r3, r7, r3
    c7f2:	2201      	movs	r2, #1
    c7f4:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
    c7f6:	687b      	ldr	r3, [r7, #4]
    c7f8:	22e0      	movs	r2, #224	; 0xe0
    c7fa:	2100      	movs	r1, #0
    c7fc:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
    c7fe:	230c      	movs	r3, #12
    c800:	18fb      	adds	r3, r7, r3
    c802:	2200      	movs	r2, #0
    c804:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    c806:	687b      	ldr	r3, [r7, #4]
    c808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c80a:	220c      	movs	r2, #12
    c80c:	18ba      	adds	r2, r7, r2
    c80e:	6878      	ldr	r0, [r7, #4]
    c810:	2102      	movs	r1, #2
    c812:	4798      	blx	r3
    c814:	e022      	b.n	c85c <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    c816:	687b      	ldr	r3, [r7, #4]
    c818:	22dc      	movs	r2, #220	; 0xdc
    c81a:	589a      	ldr	r2, [r3, r2]
    c81c:	687b      	ldr	r3, [r7, #4]
    c81e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    c820:	429a      	cmp	r2, r3
    c822:	dd1b      	ble.n	c85c <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
    c824:	687b      	ldr	r3, [r7, #4]
    c826:	22e4      	movs	r2, #228	; 0xe4
    c828:	5a9a      	ldrh	r2, [r3, r2]
    c82a:	230c      	movs	r3, #12
    c82c:	18fb      	adds	r3, r7, r3
    c82e:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
    c830:	687b      	ldr	r3, [r7, #4]
    c832:	22dc      	movs	r2, #220	; 0xdc
    c834:	589b      	ldr	r3, [r3, r2]
    c836:	001a      	movs	r2, r3
    c838:	230c      	movs	r3, #12
    c83a:	18fb      	adds	r3, r7, r3
    c83c:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
    c83e:	230c      	movs	r3, #12
    c840:	18fb      	adds	r3, r7, r3
    c842:	2200      	movs	r2, #0
    c844:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
    c846:	687b      	ldr	r3, [r7, #4]
    c848:	22e0      	movs	r2, #224	; 0xe0
    c84a:	2100      	movs	r1, #0
    c84c:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    c84e:	687b      	ldr	r3, [r7, #4]
    c850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c852:	220c      	movs	r2, #12
    c854:	18ba      	adds	r2, r7, r2
    c856:	6878      	ldr	r0, [r7, #4]
    c858:	2102      	movs	r1, #2
    c85a:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
    c85c:	687b      	ldr	r3, [r7, #4]
    c85e:	22d8      	movs	r2, #216	; 0xd8
    c860:	2101      	movs	r1, #1
    c862:	5099      	str	r1, [r3, r2]
			return 1;
    c864:	2301      	movs	r3, #1
    c866:	e0a7      	b.n	c9b8 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    c868:	495a      	ldr	r1, [pc, #360]	; (c9d4 <_http_client_handle_header+0x28c>)
    c86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c86c:	2210      	movs	r2, #16
    c86e:	0018      	movs	r0, r3
    c870:	4b57      	ldr	r3, [pc, #348]	; (c9d0 <_http_client_handle_header+0x288>)
    c872:	4798      	blx	r3
    c874:	1e03      	subs	r3, r0, #0
    c876:	d109      	bne.n	c88c <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    c878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c87a:	3310      	adds	r3, #16
    c87c:	0018      	movs	r0, r3
    c87e:	4b56      	ldr	r3, [pc, #344]	; (c9d8 <_http_client_handle_header+0x290>)
    c880:	4798      	blx	r3
    c882:	0001      	movs	r1, r0
    c884:	687b      	ldr	r3, [r7, #4]
    c886:	22dc      	movs	r2, #220	; 0xdc
    c888:	5099      	str	r1, [r3, r2]
    c88a:	e08b      	b.n	c9a4 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    c88c:	4953      	ldr	r1, [pc, #332]	; (c9dc <_http_client_handle_header+0x294>)
    c88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c890:	2213      	movs	r2, #19
    c892:	0018      	movs	r0, r3
    c894:	4b4e      	ldr	r3, [pc, #312]	; (c9d0 <_http_client_handle_header+0x288>)
    c896:	4798      	blx	r3
    c898:	1e03      	subs	r3, r0, #0
    c89a:	d127      	bne.n	c8ec <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    c89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c89e:	3313      	adds	r3, #19
    c8a0:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c8a2:	e01e      	b.n	c8e2 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
    c8a4:	6a3b      	ldr	r3, [r7, #32]
    c8a6:	781b      	ldrb	r3, [r3, #0]
    c8a8:	2b20      	cmp	r3, #32
    c8aa:	d103      	bne.n	c8b4 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c8ac:	6a3b      	ldr	r3, [r7, #32]
    c8ae:	3301      	adds	r3, #1
    c8b0:	623b      	str	r3, [r7, #32]
    c8b2:	e016      	b.n	c8e2 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    c8b4:	6a3b      	ldr	r3, [r7, #32]
    c8b6:	781b      	ldrb	r3, [r3, #0]
    c8b8:	2b43      	cmp	r3, #67	; 0x43
    c8ba:	d003      	beq.n	c8c4 <_http_client_handle_header+0x17c>
    c8bc:	6a3b      	ldr	r3, [r7, #32]
    c8be:	781b      	ldrb	r3, [r3, #0]
    c8c0:	2b63      	cmp	r3, #99	; 0x63
    c8c2:	d105      	bne.n	c8d0 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
    c8c4:	687b      	ldr	r3, [r7, #4]
    c8c6:	21cc      	movs	r1, #204	; 0xcc
    c8c8:	2201      	movs	r2, #1
    c8ca:	4252      	negs	r2, r2
    c8cc:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
    c8ce:	e069      	b.n	c9a4 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
    c8d0:	2386      	movs	r3, #134	; 0x86
    c8d2:	425a      	negs	r2, r3
    c8d4:	687b      	ldr	r3, [r7, #4]
    c8d6:	0011      	movs	r1, r2
    c8d8:	0018      	movs	r0, r3
    c8da:	4b41      	ldr	r3, [pc, #260]	; (c9e0 <_http_client_handle_header+0x298>)
    c8dc:	4798      	blx	r3
					return 0;
    c8de:	2300      	movs	r3, #0
    c8e0:	e06a      	b.n	c9b8 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c8e2:	69ba      	ldr	r2, [r7, #24]
    c8e4:	6a3b      	ldr	r3, [r7, #32]
    c8e6:	429a      	cmp	r2, r3
    c8e8:	d8dc      	bhi.n	c8a4 <_http_client_handle_header+0x15c>
    c8ea:	e05b      	b.n	c9a4 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    c8ec:	493d      	ldr	r1, [pc, #244]	; (c9e4 <_http_client_handle_header+0x29c>)
    c8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c8f0:	220c      	movs	r2, #12
    c8f2:	0018      	movs	r0, r3
    c8f4:	4b36      	ldr	r3, [pc, #216]	; (c9d0 <_http_client_handle_header+0x288>)
    c8f6:	4798      	blx	r3
    c8f8:	1e03      	subs	r3, r0, #0
    c8fa:	d126      	bne.n	c94a <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
    c8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c8fe:	330c      	adds	r3, #12
    c900:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c902:	e01d      	b.n	c940 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
    c904:	69fb      	ldr	r3, [r7, #28]
    c906:	781b      	ldrb	r3, [r3, #0]
    c908:	2b20      	cmp	r3, #32
    c90a:	d103      	bne.n	c914 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c90c:	69fb      	ldr	r3, [r7, #28]
    c90e:	3301      	adds	r3, #1
    c910:	61fb      	str	r3, [r7, #28]
    c912:	e015      	b.n	c940 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    c914:	69fb      	ldr	r3, [r7, #28]
    c916:	781b      	ldrb	r3, [r3, #0]
    c918:	2b4b      	cmp	r3, #75	; 0x4b
    c91a:	d003      	beq.n	c924 <_http_client_handle_header+0x1dc>
    c91c:	69fb      	ldr	r3, [r7, #28]
    c91e:	781b      	ldrb	r3, [r3, #0]
    c920:	2b6b      	cmp	r3, #107	; 0x6b
    c922:	d106      	bne.n	c932 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
    c924:	687b      	ldr	r3, [r7, #4]
    c926:	2241      	movs	r2, #65	; 0x41
    c928:	5c99      	ldrb	r1, [r3, r2]
    c92a:	2002      	movs	r0, #2
    c92c:	4301      	orrs	r1, r0
    c92e:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
    c930:	e038      	b.n	c9a4 <_http_client_handle_header+0x25c>
					module->permanent = 0;
    c932:	687b      	ldr	r3, [r7, #4]
    c934:	2241      	movs	r2, #65	; 0x41
    c936:	5c99      	ldrb	r1, [r3, r2]
    c938:	2002      	movs	r0, #2
    c93a:	4381      	bics	r1, r0
    c93c:	5499      	strb	r1, [r3, r2]
				break;
    c93e:	e031      	b.n	c9a4 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c940:	69ba      	ldr	r2, [r7, #24]
    c942:	69fb      	ldr	r3, [r7, #28]
    c944:	429a      	cmp	r2, r3
    c946:	d8dd      	bhi.n	c904 <_http_client_handle_header+0x1bc>
    c948:	e02c      	b.n	c9a4 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    c94a:	4927      	ldr	r1, [pc, #156]	; (c9e8 <_http_client_handle_header+0x2a0>)
    c94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c94e:	2205      	movs	r2, #5
    c950:	0018      	movs	r0, r3
    c952:	4b1f      	ldr	r3, [pc, #124]	; (c9d0 <_http_client_handle_header+0x288>)
    c954:	4798      	blx	r3
    c956:	1e03      	subs	r3, r0, #0
    c958:	d124      	bne.n	c9a4 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    c95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c95c:	3309      	adds	r3, #9
    c95e:	0018      	movs	r0, r3
    c960:	4b1d      	ldr	r3, [pc, #116]	; (c9d8 <_http_client_handle_header+0x290>)
    c962:	4798      	blx	r3
    c964:	0003      	movs	r3, r0
    c966:	b299      	uxth	r1, r3
    c968:	687b      	ldr	r3, [r7, #4]
    c96a:	22e4      	movs	r2, #228	; 0xe4
    c96c:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
    c96e:	687b      	ldr	r3, [r7, #4]
    c970:	22dc      	movs	r2, #220	; 0xdc
    c972:	2100      	movs	r1, #0
    c974:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
    c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c978:	3305      	adds	r3, #5
    c97a:	781b      	ldrb	r3, [r3, #0]
    c97c:	2b31      	cmp	r3, #49	; 0x31
    c97e:	d804      	bhi.n	c98a <_http_client_handle_header+0x242>
    c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c982:	3307      	adds	r3, #7
    c984:	781b      	ldrb	r3, [r3, #0]
    c986:	2b30      	cmp	r3, #48	; 0x30
    c988:	d906      	bls.n	c998 <_http_client_handle_header+0x250>
				module->permanent = 1;
    c98a:	687b      	ldr	r3, [r7, #4]
    c98c:	2241      	movs	r2, #65	; 0x41
    c98e:	5c99      	ldrb	r1, [r3, r2]
    c990:	2002      	movs	r0, #2
    c992:	4301      	orrs	r1, r0
    c994:	5499      	strb	r1, [r3, r2]
    c996:	e005      	b.n	c9a4 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
    c998:	687b      	ldr	r3, [r7, #4]
    c99a:	2241      	movs	r2, #65	; 0x41
    c99c:	5c99      	ldrb	r1, [r3, r2]
    c99e:	2002      	movs	r0, #2
    c9a0:	4381      	bics	r1, r0
    c9a2:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
    c9a4:	4b06      	ldr	r3, [pc, #24]	; (c9c0 <_http_client_handle_header+0x278>)
    c9a6:	681b      	ldr	r3, [r3, #0]
    c9a8:	0018      	movs	r0, r3
    c9aa:	4b08      	ldr	r3, [pc, #32]	; (c9cc <_http_client_handle_header+0x284>)
    c9ac:	4798      	blx	r3
    c9ae:	0002      	movs	r2, r0
    c9b0:	69bb      	ldr	r3, [r7, #24]
    c9b2:	189b      	adds	r3, r3, r2
    c9b4:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
    c9b6:	e6ce      	b.n	c756 <_http_client_handle_header+0xe>
	}
}
    c9b8:	0018      	movs	r0, r3
    c9ba:	46bd      	mov	sp, r7
    c9bc:	b00b      	add	sp, #44	; 0x2c
    c9be:	bd90      	pop	{r4, r7, pc}
    c9c0:	20000008 	.word	0x20000008
    c9c4:	000141df 	.word	0x000141df
    c9c8:	0000cdad 	.word	0x0000cdad
    c9cc:	000141af 	.word	0x000141af
    c9d0:	000141bd 	.word	0x000141bd
    c9d4:	0001a76c 	.word	0x0001a76c
    c9d8:	0001332d 	.word	0x0001332d
    c9dc:	0001a790 	.word	0x0001a790
    c9e0:	0000bdc5 	.word	0x0000bdc5
    c9e4:	0001a7a4 	.word	0x0001a7a4
    c9e8:	0001a7b4 	.word	0x0001a7b4

0000c9ec <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
    c9ec:	b580      	push	{r7, lr}
    c9ee:	b088      	sub	sp, #32
    c9f0:	af00      	add	r7, sp, #0
    c9f2:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
    c9f4:	687b      	ldr	r3, [r7, #4]
    c9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c9f8:	61fb      	str	r3, [r7, #28]
	int extension = 0;
    c9fa:	2300      	movs	r3, #0
    c9fc:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
    c9fe:	687b      	ldr	r3, [r7, #4]
    ca00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    ca02:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
    ca04:	687b      	ldr	r3, [r7, #4]
    ca06:	22e0      	movs	r2, #224	; 0xe0
    ca08:	589b      	ldr	r3, [r3, r2]
    ca0a:	2b00      	cmp	r3, #0
    ca0c:	db71      	blt.n	caf2 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
    ca0e:	687b      	ldr	r3, [r7, #4]
    ca10:	22e0      	movs	r2, #224	; 0xe0
    ca12:	589b      	ldr	r3, [r3, r2]
    ca14:	2b00      	cmp	r3, #0
    ca16:	d134      	bne.n	ca82 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
    ca18:	687b      	ldr	r3, [r7, #4]
    ca1a:	22d8      	movs	r2, #216	; 0xd8
    ca1c:	2100      	movs	r1, #0
    ca1e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
    ca20:	687b      	ldr	r3, [r7, #4]
    ca22:	22e4      	movs	r2, #228	; 0xe4
    ca24:	2100      	movs	r1, #0
    ca26:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
    ca28:	2308      	movs	r3, #8
    ca2a:	18fb      	adds	r3, r7, r3
    ca2c:	2201      	movs	r2, #1
    ca2e:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
    ca30:	2308      	movs	r3, #8
    ca32:	18fb      	adds	r3, r7, r3
    ca34:	2200      	movs	r2, #0
    ca36:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
    ca38:	2308      	movs	r3, #8
    ca3a:	18fb      	adds	r3, r7, r3
    ca3c:	2200      	movs	r2, #0
    ca3e:	605a      	str	r2, [r3, #4]
				if (module->cb) {
    ca40:	687b      	ldr	r3, [r7, #4]
    ca42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ca44:	2b00      	cmp	r3, #0
    ca46:	d006      	beq.n	ca56 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    ca48:	687b      	ldr	r3, [r7, #4]
    ca4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ca4c:	2208      	movs	r2, #8
    ca4e:	18ba      	adds	r2, r7, r2
    ca50:	6878      	ldr	r0, [r7, #4]
    ca52:	2103      	movs	r1, #3
    ca54:	4798      	blx	r3
				}
				if (module->permanent == 0) {
    ca56:	687b      	ldr	r3, [r7, #4]
    ca58:	2241      	movs	r2, #65	; 0x41
    ca5a:	5c9b      	ldrb	r3, [r3, r2]
    ca5c:	2202      	movs	r2, #2
    ca5e:	4013      	ands	r3, r2
    ca60:	b2db      	uxtb	r3, r3
    ca62:	2b00      	cmp	r3, #0
    ca64:	d105      	bne.n	ca72 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
    ca66:	687b      	ldr	r3, [r7, #4]
    ca68:	2100      	movs	r1, #0
    ca6a:	0018      	movs	r0, r3
    ca6c:	4b62      	ldr	r3, [pc, #392]	; (cbf8 <_http_client_read_chuked_entity+0x20c>)
    ca6e:	4798      	blx	r3
					return;
    ca70:	e0bf      	b.n	cbf2 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
    ca72:	697b      	ldr	r3, [r7, #20]
    ca74:	1c9a      	adds	r2, r3, #2
    ca76:	687b      	ldr	r3, [r7, #4]
    ca78:	0011      	movs	r1, r2
    ca7a:	0018      	movs	r0, r3
    ca7c:	4b5f      	ldr	r3, [pc, #380]	; (cbfc <_http_client_read_chuked_entity+0x210>)
    ca7e:	4798      	blx	r3
    ca80:	e0b2      	b.n	cbe8 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
    ca82:	687b      	ldr	r3, [r7, #4]
    ca84:	22e0      	movs	r2, #224	; 0xe0
    ca86:	589a      	ldr	r2, [r3, r2]
    ca88:	69fb      	ldr	r3, [r7, #28]
    ca8a:	429a      	cmp	r2, r3
    ca8c:	dd00      	ble.n	ca90 <_http_client_read_chuked_entity+0xa4>
    ca8e:	e0ab      	b.n	cbe8 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
    ca90:	687b      	ldr	r3, [r7, #4]
    ca92:	22e0      	movs	r2, #224	; 0xe0
    ca94:	589b      	ldr	r3, [r3, r2]
    ca96:	001a      	movs	r2, r3
    ca98:	2308      	movs	r3, #8
    ca9a:	18fb      	adds	r3, r7, r3
    ca9c:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
    ca9e:	2308      	movs	r3, #8
    caa0:	18fb      	adds	r3, r7, r3
    caa2:	697a      	ldr	r2, [r7, #20]
    caa4:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
    caa6:	2308      	movs	r3, #8
    caa8:	18fb      	adds	r3, r7, r3
    caaa:	2200      	movs	r2, #0
    caac:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
    caae:	687b      	ldr	r3, [r7, #4]
    cab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    cab2:	2b00      	cmp	r3, #0
    cab4:	d006      	beq.n	cac4 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    cab6:	687b      	ldr	r3, [r7, #4]
    cab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    caba:	2208      	movs	r2, #8
    cabc:	18ba      	adds	r2, r7, r2
    cabe:	6878      	ldr	r0, [r7, #4]
    cac0:	2103      	movs	r1, #3
    cac2:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    cac4:	687b      	ldr	r3, [r7, #4]
    cac6:	22e0      	movs	r2, #224	; 0xe0
    cac8:	589b      	ldr	r3, [r3, r2]
    caca:	3302      	adds	r3, #2
    cacc:	697a      	ldr	r2, [r7, #20]
    cace:	18d2      	adds	r2, r2, r3
    cad0:	687b      	ldr	r3, [r7, #4]
    cad2:	0011      	movs	r1, r2
    cad4:	0018      	movs	r0, r3
    cad6:	4b49      	ldr	r3, [pc, #292]	; (cbfc <_http_client_read_chuked_entity+0x210>)
    cad8:	4798      	blx	r3
				length = (int)module->recved_size;
    cada:	687b      	ldr	r3, [r7, #4]
    cadc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cade:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
    cae0:	687b      	ldr	r3, [r7, #4]
    cae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    cae4:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
    cae6:	687b      	ldr	r3, [r7, #4]
    cae8:	21e0      	movs	r1, #224	; 0xe0
    caea:	2201      	movs	r2, #1
    caec:	4252      	negs	r2, r2
    caee:	505a      	str	r2, [r3, r1]
    caf0:	e07a      	b.n	cbe8 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
    caf2:	687b      	ldr	r3, [r7, #4]
    caf4:	22e0      	movs	r2, #224	; 0xe0
    caf6:	2100      	movs	r1, #0
    caf8:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
    cafa:	e05a      	b.n	cbb2 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
    cafc:	697b      	ldr	r3, [r7, #20]
    cafe:	781b      	ldrb	r3, [r3, #0]
    cb00:	2b0a      	cmp	r3, #10
    cb02:	d106      	bne.n	cb12 <_http_client_read_chuked_entity+0x126>
					buffer++;
    cb04:	697b      	ldr	r3, [r7, #20]
    cb06:	3301      	adds	r3, #1
    cb08:	617b      	str	r3, [r7, #20]
					length--;
    cb0a:	69fb      	ldr	r3, [r7, #28]
    cb0c:	3b01      	subs	r3, #1
    cb0e:	61fb      	str	r3, [r7, #28]
					break;
    cb10:	e052      	b.n	cbb8 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
    cb12:	69bb      	ldr	r3, [r7, #24]
    cb14:	2b00      	cmp	r3, #0
    cb16:	d145      	bne.n	cba4 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
    cb18:	697b      	ldr	r3, [r7, #20]
    cb1a:	781b      	ldrb	r3, [r3, #0]
    cb1c:	2b2f      	cmp	r3, #47	; 0x2f
    cb1e:	d910      	bls.n	cb42 <_http_client_read_chuked_entity+0x156>
    cb20:	697b      	ldr	r3, [r7, #20]
    cb22:	781b      	ldrb	r3, [r3, #0]
    cb24:	2b39      	cmp	r3, #57	; 0x39
    cb26:	d80c      	bhi.n	cb42 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    cb28:	687b      	ldr	r3, [r7, #4]
    cb2a:	22e0      	movs	r2, #224	; 0xe0
    cb2c:	589b      	ldr	r3, [r3, r2]
    cb2e:	011b      	lsls	r3, r3, #4
    cb30:	697a      	ldr	r2, [r7, #20]
    cb32:	7812      	ldrb	r2, [r2, #0]
    cb34:	189b      	adds	r3, r3, r2
    cb36:	3b30      	subs	r3, #48	; 0x30
    cb38:	001a      	movs	r2, r3
    cb3a:	687b      	ldr	r3, [r7, #4]
    cb3c:	21e0      	movs	r1, #224	; 0xe0
    cb3e:	505a      	str	r2, [r3, r1]
    cb40:	e031      	b.n	cba6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    cb42:	697b      	ldr	r3, [r7, #20]
    cb44:	781b      	ldrb	r3, [r3, #0]
    cb46:	2b60      	cmp	r3, #96	; 0x60
    cb48:	d910      	bls.n	cb6c <_http_client_read_chuked_entity+0x180>
    cb4a:	697b      	ldr	r3, [r7, #20]
    cb4c:	781b      	ldrb	r3, [r3, #0]
    cb4e:	2b66      	cmp	r3, #102	; 0x66
    cb50:	d80c      	bhi.n	cb6c <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    cb52:	687b      	ldr	r3, [r7, #4]
    cb54:	22e0      	movs	r2, #224	; 0xe0
    cb56:	589b      	ldr	r3, [r3, r2]
    cb58:	011b      	lsls	r3, r3, #4
    cb5a:	697a      	ldr	r2, [r7, #20]
    cb5c:	7812      	ldrb	r2, [r2, #0]
    cb5e:	189b      	adds	r3, r3, r2
    cb60:	3b61      	subs	r3, #97	; 0x61
    cb62:	001a      	movs	r2, r3
    cb64:	687b      	ldr	r3, [r7, #4]
    cb66:	21e0      	movs	r1, #224	; 0xe0
    cb68:	505a      	str	r2, [r3, r1]
    cb6a:	e01c      	b.n	cba6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    cb6c:	697b      	ldr	r3, [r7, #20]
    cb6e:	781b      	ldrb	r3, [r3, #0]
    cb70:	2b40      	cmp	r3, #64	; 0x40
    cb72:	d910      	bls.n	cb96 <_http_client_read_chuked_entity+0x1aa>
    cb74:	697b      	ldr	r3, [r7, #20]
    cb76:	781b      	ldrb	r3, [r3, #0]
    cb78:	2b46      	cmp	r3, #70	; 0x46
    cb7a:	d80c      	bhi.n	cb96 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    cb7c:	687b      	ldr	r3, [r7, #4]
    cb7e:	22e0      	movs	r2, #224	; 0xe0
    cb80:	589b      	ldr	r3, [r3, r2]
    cb82:	011b      	lsls	r3, r3, #4
    cb84:	697a      	ldr	r2, [r7, #20]
    cb86:	7812      	ldrb	r2, [r2, #0]
    cb88:	189b      	adds	r3, r3, r2
    cb8a:	3b41      	subs	r3, #65	; 0x41
    cb8c:	001a      	movs	r2, r3
    cb8e:	687b      	ldr	r3, [r7, #4]
    cb90:	21e0      	movs	r1, #224	; 0xe0
    cb92:	505a      	str	r2, [r3, r1]
    cb94:	e007      	b.n	cba6 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
    cb96:	697b      	ldr	r3, [r7, #20]
    cb98:	781b      	ldrb	r3, [r3, #0]
    cb9a:	2b3b      	cmp	r3, #59	; 0x3b
    cb9c:	d103      	bne.n	cba6 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
    cb9e:	2301      	movs	r3, #1
    cba0:	61bb      	str	r3, [r7, #24]
    cba2:	e000      	b.n	cba6 <_http_client_read_chuked_entity+0x1ba>
					continue;
    cba4:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
    cba6:	697b      	ldr	r3, [r7, #20]
    cba8:	3301      	adds	r3, #1
    cbaa:	617b      	str	r3, [r7, #20]
    cbac:	69fb      	ldr	r3, [r7, #28]
    cbae:	3b01      	subs	r3, #1
    cbb0:	61fb      	str	r3, [r7, #28]
    cbb2:	69fb      	ldr	r3, [r7, #28]
    cbb4:	2b00      	cmp	r3, #0
    cbb6:	dca1      	bgt.n	cafc <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    cbb8:	687b      	ldr	r3, [r7, #4]
    cbba:	22e0      	movs	r2, #224	; 0xe0
    cbbc:	589a      	ldr	r2, [r3, r2]
    cbbe:	687b      	ldr	r3, [r7, #4]
    cbc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    cbc2:	429a      	cmp	r2, r3
    cbc4:	dd07      	ble.n	cbd6 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
    cbc6:	238b      	movs	r3, #139	; 0x8b
    cbc8:	425a      	negs	r2, r3
    cbca:	687b      	ldr	r3, [r7, #4]
    cbcc:	0011      	movs	r1, r2
    cbce:	0018      	movs	r0, r3
    cbd0:	4b09      	ldr	r3, [pc, #36]	; (cbf8 <_http_client_read_chuked_entity+0x20c>)
    cbd2:	4798      	blx	r3
				return;
    cbd4:	e00d      	b.n	cbf2 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
    cbd6:	69fb      	ldr	r3, [r7, #28]
    cbd8:	2b00      	cmp	r3, #0
    cbda:	d105      	bne.n	cbe8 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
    cbdc:	687b      	ldr	r3, [r7, #4]
    cbde:	21e0      	movs	r1, #224	; 0xe0
    cbe0:	2201      	movs	r2, #1
    cbe2:	4252      	negs	r2, r2
    cbe4:	505a      	str	r2, [r3, r1]
				return;
    cbe6:	e004      	b.n	cbf2 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
    cbe8:	687b      	ldr	r3, [r7, #4]
    cbea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cbec:	2b00      	cmp	r3, #0
    cbee:	d000      	beq.n	cbf2 <_http_client_read_chuked_entity+0x206>
    cbf0:	e708      	b.n	ca04 <_http_client_read_chuked_entity+0x18>
}
    cbf2:	46bd      	mov	sp, r7
    cbf4:	b008      	add	sp, #32
    cbf6:	bd80      	pop	{r7, pc}
    cbf8:	0000bdc5 	.word	0x0000bdc5
    cbfc:	0000cdad 	.word	0x0000cdad

0000cc00 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
    cc00:	b580      	push	{r7, lr}
    cc02:	b086      	sub	sp, #24
    cc04:	af00      	add	r7, sp, #0
    cc06:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
    cc08:	687b      	ldr	r3, [r7, #4]
    cc0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    cc0c:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    cc0e:	687b      	ldr	r3, [r7, #4]
    cc10:	22dc      	movs	r2, #220	; 0xdc
    cc12:	589b      	ldr	r3, [r3, r2]
    cc14:	2b00      	cmp	r3, #0
    cc16:	db58      	blt.n	ccca <_http_client_handle_entity+0xca>
    cc18:	687b      	ldr	r3, [r7, #4]
    cc1a:	22dc      	movs	r2, #220	; 0xdc
    cc1c:	589a      	ldr	r2, [r3, r2]
    cc1e:	687b      	ldr	r3, [r7, #4]
    cc20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    cc22:	429a      	cmp	r2, r3
    cc24:	dc51      	bgt.n	ccca <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
    cc26:	687b      	ldr	r3, [r7, #4]
    cc28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cc2a:	0019      	movs	r1, r3
    cc2c:	687b      	ldr	r3, [r7, #4]
    cc2e:	22dc      	movs	r2, #220	; 0xdc
    cc30:	589b      	ldr	r3, [r3, r2]
    cc32:	4299      	cmp	r1, r3
    cc34:	da00      	bge.n	cc38 <_http_client_handle_entity+0x38>
    cc36:	e0a9      	b.n	cd8c <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
    cc38:	687b      	ldr	r3, [r7, #4]
    cc3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    cc3c:	2b00      	cmp	r3, #0
    cc3e:	d020      	beq.n	cc82 <_http_client_handle_entity+0x82>
    cc40:	687b      	ldr	r3, [r7, #4]
    cc42:	22e4      	movs	r2, #228	; 0xe4
    cc44:	5a9b      	ldrh	r3, [r3, r2]
    cc46:	2b00      	cmp	r3, #0
    cc48:	d01b      	beq.n	cc82 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
    cc4a:	687b      	ldr	r3, [r7, #4]
    cc4c:	22e4      	movs	r2, #228	; 0xe4
    cc4e:	5a9a      	ldrh	r2, [r3, r2]
    cc50:	2308      	movs	r3, #8
    cc52:	18fb      	adds	r3, r7, r3
    cc54:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
    cc56:	2308      	movs	r3, #8
    cc58:	18fb      	adds	r3, r7, r3
    cc5a:	2200      	movs	r2, #0
    cc5c:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
    cc5e:	687b      	ldr	r3, [r7, #4]
    cc60:	22dc      	movs	r2, #220	; 0xdc
    cc62:	589b      	ldr	r3, [r3, r2]
    cc64:	001a      	movs	r2, r3
    cc66:	2308      	movs	r3, #8
    cc68:	18fb      	adds	r3, r7, r3
    cc6a:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
    cc6c:	2308      	movs	r3, #8
    cc6e:	18fb      	adds	r3, r7, r3
    cc70:	697a      	ldr	r2, [r7, #20]
    cc72:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    cc74:	687b      	ldr	r3, [r7, #4]
    cc76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    cc78:	2208      	movs	r2, #8
    cc7a:	18ba      	adds	r2, r7, r2
    cc7c:	6878      	ldr	r0, [r7, #4]
    cc7e:	2102      	movs	r1, #2
    cc80:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
    cc82:	687b      	ldr	r3, [r7, #4]
    cc84:	22d8      	movs	r2, #216	; 0xd8
    cc86:	2100      	movs	r1, #0
    cc88:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
    cc8a:	687b      	ldr	r3, [r7, #4]
    cc8c:	22e4      	movs	r2, #228	; 0xe4
    cc8e:	2100      	movs	r1, #0
    cc90:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
    cc92:	687b      	ldr	r3, [r7, #4]
    cc94:	2241      	movs	r2, #65	; 0x41
    cc96:	5c9b      	ldrb	r3, [r3, r2]
    cc98:	2202      	movs	r2, #2
    cc9a:	4013      	ands	r3, r2
    cc9c:	b2db      	uxtb	r3, r3
    cc9e:	2b00      	cmp	r3, #0
    cca0:	d105      	bne.n	ccae <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
    cca2:	687b      	ldr	r3, [r7, #4]
    cca4:	2100      	movs	r1, #0
    cca6:	0018      	movs	r0, r3
    cca8:	4b3b      	ldr	r3, [pc, #236]	; (cd98 <_http_client_handle_entity+0x198>)
    ccaa:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
    ccac:	e06e      	b.n	cd8c <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    ccae:	687b      	ldr	r3, [r7, #4]
    ccb0:	22dc      	movs	r2, #220	; 0xdc
    ccb2:	589b      	ldr	r3, [r3, r2]
    ccb4:	001a      	movs	r2, r3
    ccb6:	697b      	ldr	r3, [r7, #20]
    ccb8:	189a      	adds	r2, r3, r2
    ccba:	687b      	ldr	r3, [r7, #4]
    ccbc:	0011      	movs	r1, r2
    ccbe:	0018      	movs	r0, r3
    ccc0:	4b36      	ldr	r3, [pc, #216]	; (cd9c <_http_client_handle_entity+0x19c>)
    ccc2:	4798      	blx	r3
				return module->recved_size;
    ccc4:	687b      	ldr	r3, [r7, #4]
    ccc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ccc8:	e061      	b.n	cd8e <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
    ccca:	687b      	ldr	r3, [r7, #4]
    cccc:	22dc      	movs	r2, #220	; 0xdc
    ccce:	589b      	ldr	r3, [r3, r2]
    ccd0:	2b00      	cmp	r3, #0
    ccd2:	db57      	blt.n	cd84 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
    ccd4:	687b      	ldr	r3, [r7, #4]
    ccd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    ccd8:	2308      	movs	r3, #8
    ccda:	18fb      	adds	r3, r7, r3
    ccdc:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
    ccde:	2308      	movs	r3, #8
    cce0:	18fb      	adds	r3, r7, r3
    cce2:	697a      	ldr	r2, [r7, #20]
    cce4:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
    cce6:	687b      	ldr	r3, [r7, #4]
    cce8:	22e0      	movs	r2, #224	; 0xe0
    ccea:	589a      	ldr	r2, [r3, r2]
    ccec:	687b      	ldr	r3, [r7, #4]
    ccee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ccf0:	18d2      	adds	r2, r2, r3
    ccf2:	687b      	ldr	r3, [r7, #4]
    ccf4:	21e0      	movs	r1, #224	; 0xe0
    ccf6:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    ccf8:	687b      	ldr	r3, [r7, #4]
    ccfa:	22dc      	movs	r2, #220	; 0xdc
    ccfc:	589a      	ldr	r2, [r3, r2]
    ccfe:	687b      	ldr	r3, [r7, #4]
    cd00:	21e0      	movs	r1, #224	; 0xe0
    cd02:	585b      	ldr	r3, [r3, r1]
    cd04:	429a      	cmp	r2, r3
    cd06:	dc0c      	bgt.n	cd22 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
    cd08:	687b      	ldr	r3, [r7, #4]
    cd0a:	22d8      	movs	r2, #216	; 0xd8
    cd0c:	2100      	movs	r1, #0
    cd0e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
    cd10:	687b      	ldr	r3, [r7, #4]
    cd12:	22e4      	movs	r2, #228	; 0xe4
    cd14:	2100      	movs	r1, #0
    cd16:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
    cd18:	2308      	movs	r3, #8
    cd1a:	18fb      	adds	r3, r7, r3
    cd1c:	2201      	movs	r2, #1
    cd1e:	721a      	strb	r2, [r3, #8]
    cd20:	e003      	b.n	cd2a <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
    cd22:	2308      	movs	r3, #8
    cd24:	18fb      	adds	r3, r7, r3
    cd26:	2200      	movs	r2, #0
    cd28:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
    cd2a:	687b      	ldr	r3, [r7, #4]
    cd2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    cd2e:	2b00      	cmp	r3, #0
    cd30:	d006      	beq.n	cd40 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    cd32:	687b      	ldr	r3, [r7, #4]
    cd34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    cd36:	2208      	movs	r2, #8
    cd38:	18ba      	adds	r2, r7, r2
    cd3a:	6878      	ldr	r0, [r7, #4]
    cd3c:	2103      	movs	r1, #3
    cd3e:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
    cd40:	2308      	movs	r3, #8
    cd42:	18fb      	adds	r3, r7, r3
    cd44:	7a1b      	ldrb	r3, [r3, #8]
    cd46:	2b01      	cmp	r3, #1
    cd48:	d112      	bne.n	cd70 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
    cd4a:	687b      	ldr	r3, [r7, #4]
    cd4c:	2241      	movs	r2, #65	; 0x41
    cd4e:	5c9b      	ldrb	r3, [r3, r2]
    cd50:	2202      	movs	r2, #2
    cd52:	4013      	ands	r3, r2
    cd54:	b2db      	uxtb	r3, r3
    cd56:	2b00      	cmp	r3, #0
    cd58:	d10a      	bne.n	cd70 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
    cd5a:	4b11      	ldr	r3, [pc, #68]	; (cda0 <_http_client_handle_entity+0x1a0>)
    cd5c:	0018      	movs	r0, r3
    cd5e:	4b11      	ldr	r3, [pc, #68]	; (cda4 <_http_client_handle_entity+0x1a4>)
    cd60:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    cd62:	687b      	ldr	r3, [r7, #4]
    cd64:	2100      	movs	r1, #0
    cd66:	0018      	movs	r0, r3
    cd68:	4b0b      	ldr	r3, [pc, #44]	; (cd98 <_http_client_handle_entity+0x198>)
    cd6a:	4798      	blx	r3
					return 0;
    cd6c:	2300      	movs	r3, #0
    cd6e:	e00e      	b.n	cd8e <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
    cd70:	687b      	ldr	r3, [r7, #4]
    cd72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cd74:	697a      	ldr	r2, [r7, #20]
    cd76:	18d2      	adds	r2, r2, r3
    cd78:	687b      	ldr	r3, [r7, #4]
    cd7a:	0011      	movs	r1, r2
    cd7c:	0018      	movs	r0, r3
    cd7e:	4b07      	ldr	r3, [pc, #28]	; (cd9c <_http_client_handle_entity+0x19c>)
    cd80:	4798      	blx	r3
    cd82:	e003      	b.n	cd8c <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
    cd84:	687b      	ldr	r3, [r7, #4]
    cd86:	0018      	movs	r0, r3
    cd88:	4b07      	ldr	r3, [pc, #28]	; (cda8 <_http_client_handle_entity+0x1a8>)
    cd8a:	4798      	blx	r3
		}
	}

	return 0;
    cd8c:	2300      	movs	r3, #0
}
    cd8e:	0018      	movs	r0, r3
    cd90:	46bd      	mov	sp, r7
    cd92:	b006      	add	sp, #24
    cd94:	bd80      	pop	{r7, pc}
    cd96:	46c0      	nop			; (mov r8, r8)
    cd98:	0000bdc5 	.word	0x0000bdc5
    cd9c:	0000cdad 	.word	0x0000cdad
    cda0:	0001a7bc 	.word	0x0001a7bc
    cda4:	00013f69 	.word	0x00013f69
    cda8:	0000c9ed 	.word	0x0000c9ed

0000cdac <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    cdac:	b580      	push	{r7, lr}
    cdae:	b084      	sub	sp, #16
    cdb0:	af00      	add	r7, sp, #0
    cdb2:	6078      	str	r0, [r7, #4]
    cdb4:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
    cdb6:	687b      	ldr	r3, [r7, #4]
    cdb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    cdba:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    cdbc:	687b      	ldr	r3, [r7, #4]
    cdbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cdc0:	001a      	movs	r2, r3
    cdc2:	683b      	ldr	r3, [r7, #0]
    cdc4:	1ad2      	subs	r2, r2, r3
    cdc6:	68fb      	ldr	r3, [r7, #12]
    cdc8:	18d3      	adds	r3, r2, r3
    cdca:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
    cdcc:	68bb      	ldr	r3, [r7, #8]
    cdce:	2b00      	cmp	r3, #0
    cdd0:	dd09      	ble.n	cde6 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
    cdd2:	68ba      	ldr	r2, [r7, #8]
    cdd4:	6839      	ldr	r1, [r7, #0]
    cdd6:	68fb      	ldr	r3, [r7, #12]
    cdd8:	0018      	movs	r0, r3
    cdda:	4b06      	ldr	r3, [pc, #24]	; (cdf4 <_http_client_move_buffer+0x48>)
    cddc:	4798      	blx	r3
		module->recved_size = remain;
    cdde:	68ba      	ldr	r2, [r7, #8]
    cde0:	687b      	ldr	r3, [r7, #4]
    cde2:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
    cde4:	e002      	b.n	cdec <_http_client_move_buffer+0x40>
		module->recved_size = 0;
    cde6:	687b      	ldr	r3, [r7, #4]
    cde8:	2200      	movs	r2, #0
    cdea:	645a      	str	r2, [r3, #68]	; 0x44
}
    cdec:	46c0      	nop			; (mov r8, r8)
    cdee:	46bd      	mov	sp, r7
    cdf0:	b004      	add	sp, #16
    cdf2:	bd80      	pop	{r7, pc}
    cdf4:	000133e7 	.word	0x000133e7

0000cdf8 <stream_writer_init>:
#include "iot/stream_writer.h"
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
    cdf8:	b580      	push	{r7, lr}
    cdfa:	b084      	sub	sp, #16
    cdfc:	af00      	add	r7, sp, #0
    cdfe:	60f8      	str	r0, [r7, #12]
    ce00:	60b9      	str	r1, [r7, #8]
    ce02:	607a      	str	r2, [r7, #4]
    ce04:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
    ce06:	68fb      	ldr	r3, [r7, #12]
    ce08:	687a      	ldr	r2, [r7, #4]
    ce0a:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
    ce0c:	68fb      	ldr	r3, [r7, #12]
    ce0e:	68ba      	ldr	r2, [r7, #8]
    ce10:	611a      	str	r2, [r3, #16]
	writer->written = 0;
    ce12:	68fb      	ldr	r3, [r7, #12]
    ce14:	2200      	movs	r2, #0
    ce16:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
    ce18:	68fb      	ldr	r3, [r7, #12]
    ce1a:	683a      	ldr	r2, [r7, #0]
    ce1c:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
    ce1e:	68fb      	ldr	r3, [r7, #12]
    ce20:	69ba      	ldr	r2, [r7, #24]
    ce22:	60da      	str	r2, [r3, #12]
}
    ce24:	46c0      	nop			; (mov r8, r8)
    ce26:	46bd      	mov	sp, r7
    ce28:	b004      	add	sp, #16
    ce2a:	bd80      	pop	{r7, pc}

0000ce2c <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    ce2c:	b580      	push	{r7, lr}
    ce2e:	b084      	sub	sp, #16
    ce30:	af00      	add	r7, sp, #0
    ce32:	6078      	str	r0, [r7, #4]
    ce34:	000a      	movs	r2, r1
    ce36:	1cfb      	adds	r3, r7, #3
    ce38:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
    ce3a:	687b      	ldr	r3, [r7, #4]
    ce3c:	681a      	ldr	r2, [r3, #0]
    ce3e:	687b      	ldr	r3, [r7, #4]
    ce40:	685b      	ldr	r3, [r3, #4]
    ce42:	1ad3      	subs	r3, r2, r3
    ce44:	60fb      	str	r3, [r7, #12]

	if (remain < 1) {
    ce46:	68fb      	ldr	r3, [r7, #12]
    ce48:	2b00      	cmp	r3, #0
    ce4a:	dc03      	bgt.n	ce54 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
    ce4c:	687b      	ldr	r3, [r7, #4]
    ce4e:	0018      	movs	r0, r3
    ce50:	4b08      	ldr	r3, [pc, #32]	; (ce74 <stream_writer_send_8+0x48>)
    ce52:	4798      	blx	r3
	}

	writer->buffer[writer->written++] = (char)value;
    ce54:	687b      	ldr	r3, [r7, #4]
    ce56:	6919      	ldr	r1, [r3, #16]
    ce58:	687b      	ldr	r3, [r7, #4]
    ce5a:	685b      	ldr	r3, [r3, #4]
    ce5c:	1c58      	adds	r0, r3, #1
    ce5e:	687a      	ldr	r2, [r7, #4]
    ce60:	6050      	str	r0, [r2, #4]
    ce62:	18cb      	adds	r3, r1, r3
    ce64:	1cfa      	adds	r2, r7, #3
    ce66:	7812      	ldrb	r2, [r2, #0]
    ce68:	701a      	strb	r2, [r3, #0]
}
    ce6a:	46c0      	nop			; (mov r8, r8)
    ce6c:	46bd      	mov	sp, r7
    ce6e:	b004      	add	sp, #16
    ce70:	bd80      	pop	{r7, pc}
    ce72:	46c0      	nop			; (mov r8, r8)
    ce74:	0000cef5 	.word	0x0000cef5

0000ce78 <stream_writer_send_16BE>:

void stream_writer_send_16BE(struct stream_writer * writer, int16_t value)
{
    ce78:	b580      	push	{r7, lr}
    ce7a:	b082      	sub	sp, #8
    ce7c:	af00      	add	r7, sp, #0
    ce7e:	6078      	str	r0, [r7, #4]
    ce80:	000a      	movs	r2, r1
    ce82:	1cbb      	adds	r3, r7, #2
    ce84:	801a      	strh	r2, [r3, #0]
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    ce86:	1cbb      	adds	r3, r7, #2
    ce88:	2200      	movs	r2, #0
    ce8a:	5e9b      	ldrsh	r3, [r3, r2]
    ce8c:	121b      	asrs	r3, r3, #8
    ce8e:	b21b      	sxth	r3, r3
    ce90:	b25a      	sxtb	r2, r3
    ce92:	687b      	ldr	r3, [r7, #4]
    ce94:	0011      	movs	r1, r2
    ce96:	0018      	movs	r0, r3
    ce98:	4b06      	ldr	r3, [pc, #24]	; (ceb4 <stream_writer_send_16BE+0x3c>)
    ce9a:	4798      	blx	r3
	stream_writer_send_8(writer, value & 0xFF);
    ce9c:	1cbb      	adds	r3, r7, #2
    ce9e:	881b      	ldrh	r3, [r3, #0]
    cea0:	b25a      	sxtb	r2, r3
    cea2:	687b      	ldr	r3, [r7, #4]
    cea4:	0011      	movs	r1, r2
    cea6:	0018      	movs	r0, r3
    cea8:	4b02      	ldr	r3, [pc, #8]	; (ceb4 <stream_writer_send_16BE+0x3c>)
    ceaa:	4798      	blx	r3
}
    ceac:	46c0      	nop			; (mov r8, r8)
    ceae:	46bd      	mov	sp, r7
    ceb0:	b002      	add	sp, #8
    ceb2:	bd80      	pop	{r7, pc}
    ceb4:	0000ce2d 	.word	0x0000ce2d

0000ceb8 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
    ceb8:	b580      	push	{r7, lr}
    ceba:	b084      	sub	sp, #16
    cebc:	af00      	add	r7, sp, #0
    cebe:	60f8      	str	r0, [r7, #12]
    cec0:	60b9      	str	r1, [r7, #8]
    cec2:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
    cec4:	e00d      	b.n	cee2 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
    cec6:	68bb      	ldr	r3, [r7, #8]
    cec8:	781b      	ldrb	r3, [r3, #0]
    ceca:	b25a      	sxtb	r2, r3
    cecc:	68fb      	ldr	r3, [r7, #12]
    cece:	0011      	movs	r1, r2
    ced0:	0018      	movs	r0, r3
    ced2:	4b07      	ldr	r3, [pc, #28]	; (cef0 <stream_writer_send_buffer+0x38>)
    ced4:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
    ced6:	687b      	ldr	r3, [r7, #4]
    ced8:	3b01      	subs	r3, #1
    ceda:	607b      	str	r3, [r7, #4]
    cedc:	68bb      	ldr	r3, [r7, #8]
    cede:	3301      	adds	r3, #1
    cee0:	60bb      	str	r3, [r7, #8]
    cee2:	687b      	ldr	r3, [r7, #4]
    cee4:	2b00      	cmp	r3, #0
    cee6:	d1ee      	bne.n	cec6 <stream_writer_send_buffer+0xe>
	}
}
    cee8:	46c0      	nop			; (mov r8, r8)
    ceea:	46bd      	mov	sp, r7
    ceec:	b004      	add	sp, #16
    ceee:	bd80      	pop	{r7, pc}
    cef0:	0000ce2d 	.word	0x0000ce2d

0000cef4 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
    cef4:	b590      	push	{r4, r7, lr}
    cef6:	b083      	sub	sp, #12
    cef8:	af00      	add	r7, sp, #0
    cefa:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
    cefc:	687b      	ldr	r3, [r7, #4]
    cefe:	685b      	ldr	r3, [r3, #4]
    cf00:	2b00      	cmp	r3, #0
    cf02:	d00c      	beq.n	cf1e <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    cf04:	687b      	ldr	r3, [r7, #4]
    cf06:	689c      	ldr	r4, [r3, #8]
    cf08:	687b      	ldr	r3, [r7, #4]
    cf0a:	68d8      	ldr	r0, [r3, #12]
    cf0c:	687b      	ldr	r3, [r7, #4]
    cf0e:	6919      	ldr	r1, [r3, #16]
    cf10:	687b      	ldr	r3, [r7, #4]
    cf12:	685b      	ldr	r3, [r3, #4]
    cf14:	001a      	movs	r2, r3
    cf16:	47a0      	blx	r4
		writer->written = 0;
    cf18:	687b      	ldr	r3, [r7, #4]
    cf1a:	2200      	movs	r2, #0
    cf1c:	605a      	str	r2, [r3, #4]
	}
}
    cf1e:	46c0      	nop			; (mov r8, r8)
    cf20:	46bd      	mov	sp, r7
    cf22:	b003      	add	sp, #12
    cf24:	bd90      	pop	{r4, r7, pc}
	...

0000cf28 <system_cpu_clock_get_hz>:
{
    cf28:	b580      	push	{r7, lr}
    cf2a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    cf2c:	2000      	movs	r0, #0
    cf2e:	4b05      	ldr	r3, [pc, #20]	; (cf44 <system_cpu_clock_get_hz+0x1c>)
    cf30:	4798      	blx	r3
    cf32:	0002      	movs	r2, r0
    cf34:	4b04      	ldr	r3, [pc, #16]	; (cf48 <system_cpu_clock_get_hz+0x20>)
    cf36:	7a1b      	ldrb	r3, [r3, #8]
    cf38:	b2db      	uxtb	r3, r3
    cf3a:	40da      	lsrs	r2, r3
    cf3c:	0013      	movs	r3, r2
}
    cf3e:	0018      	movs	r0, r3
    cf40:	46bd      	mov	sp, r7
    cf42:	bd80      	pop	{r7, pc}
    cf44:	00011609 	.word	0x00011609
    cf48:	40000400 	.word	0x40000400

0000cf4c <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    cf4c:	b580      	push	{r7, lr}
    cf4e:	b084      	sub	sp, #16
    cf50:	af00      	add	r7, sp, #0
    cf52:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    cf54:	687b      	ldr	r3, [r7, #4]
    cf56:	681b      	ldr	r3, [r3, #0]
    cf58:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    cf5a:	46c0      	nop			; (mov r8, r8)
    cf5c:	68fb      	ldr	r3, [r7, #12]
    cf5e:	689b      	ldr	r3, [r3, #8]
    cf60:	2202      	movs	r2, #2
    cf62:	4013      	ands	r3, r2
    cf64:	d1fa      	bne.n	cf5c <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    cf66:	68fb      	ldr	r3, [r7, #12]
    cf68:	681b      	ldr	r3, [r3, #0]
    cf6a:	2202      	movs	r2, #2
    cf6c:	431a      	orrs	r2, r3
    cf6e:	68fb      	ldr	r3, [r7, #12]
    cf70:	601a      	str	r2, [r3, #0]
}
    cf72:	46c0      	nop			; (mov r8, r8)
    cf74:	46bd      	mov	sp, r7
    cf76:	b004      	add	sp, #16
    cf78:	bd80      	pop	{r7, pc}
	...

0000cf7c <sw_timer_tcc_callback>:
 * This function performs to the increasing the tick count.
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
    cf7c:	b580      	push	{r7, lr}
    cf7e:	b082      	sub	sp, #8
    cf80:	af00      	add	r7, sp, #0
    cf82:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
    cf84:	4b04      	ldr	r3, [pc, #16]	; (cf98 <sw_timer_tcc_callback+0x1c>)
    cf86:	681b      	ldr	r3, [r3, #0]
    cf88:	1c5a      	adds	r2, r3, #1
    cf8a:	4b03      	ldr	r3, [pc, #12]	; (cf98 <sw_timer_tcc_callback+0x1c>)
    cf8c:	601a      	str	r2, [r3, #0]
}
    cf8e:	46c0      	nop			; (mov r8, r8)
    cf90:	46bd      	mov	sp, r7
    cf92:	b002      	add	sp, #8
    cf94:	bd80      	pop	{r7, pc}
    cf96:	46c0      	nop			; (mov r8, r8)
    cf98:	20000258 	.word	0x20000258

0000cf9c <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
    cf9c:	b580      	push	{r7, lr}
    cf9e:	b082      	sub	sp, #8
    cfa0:	af00      	add	r7, sp, #0
    cfa2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
    cfa4:	687b      	ldr	r3, [r7, #4]
    cfa6:	2264      	movs	r2, #100	; 0x64
    cfa8:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
    cfaa:	687b      	ldr	r3, [r7, #4]
    cfac:	2200      	movs	r2, #0
    cfae:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
    cfb0:	687b      	ldr	r3, [r7, #4]
    cfb2:	2200      	movs	r2, #0
    cfb4:	705a      	strb	r2, [r3, #1]
}
    cfb6:	46c0      	nop			; (mov r8, r8)
    cfb8:	46bd      	mov	sp, r7
    cfba:	b002      	add	sp, #8
    cfbc:	bd80      	pop	{r7, pc}
	...

0000cfc0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    cfc0:	b590      	push	{r4, r7, lr}
    cfc2:	b0b1      	sub	sp, #196	; 0xc4
    cfc4:	af00      	add	r7, sp, #0
    cfc6:	6078      	str	r0, [r7, #4]
    cfc8:	6039      	str	r1, [r7, #0]
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    cfca:	230c      	movs	r3, #12
    cfcc:	18fb      	adds	r3, r7, r3
    cfce:	4a2e      	ldr	r2, [pc, #184]	; (d088 <sw_timer_init+0xc8>)
    cfd0:	ca13      	ldmia	r2!, {r0, r1, r4}
    cfd2:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    cfd4:	683b      	ldr	r3, [r7, #0]
    cfd6:	885b      	ldrh	r3, [r3, #2]
    cfd8:	001a      	movs	r2, r3
    cfda:	687b      	ldr	r3, [r7, #4]
    cfdc:	655a      	str	r2, [r3, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    cfde:	687b      	ldr	r3, [r7, #4]
    cfe0:	3314      	adds	r3, #20
    cfe2:	22bc      	movs	r2, #188	; 0xbc
    cfe4:	18ba      	adds	r2, r7, r2
    cfe6:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    cfe8:	683b      	ldr	r3, [r7, #0]
    cfea:	781b      	ldrb	r3, [r3, #0]
    cfec:	001a      	movs	r2, r3
    cfee:	230c      	movs	r3, #12
    cff0:	18fb      	adds	r3, r7, r3
    cff2:	0092      	lsls	r2, r2, #2
    cff4:	58d2      	ldr	r2, [r2, r3]
    cff6:	2318      	movs	r3, #24
    cff8:	18fb      	adds	r3, r7, r3
    cffa:	0011      	movs	r1, r2
    cffc:	0018      	movs	r0, r3
    cffe:	4b23      	ldr	r3, [pc, #140]	; (d08c <sw_timer_init+0xcc>)
    d000:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    d002:	4b23      	ldr	r3, [pc, #140]	; (d090 <sw_timer_init+0xd0>)
    d004:	4798      	blx	r3
    d006:	0004      	movs	r4, r0
    d008:	683b      	ldr	r3, [r7, #0]
    d00a:	885b      	ldrh	r3, [r3, #2]
    d00c:	001a      	movs	r2, r3
    d00e:	4b21      	ldr	r3, [pc, #132]	; (d094 <sw_timer_init+0xd4>)
    d010:	0011      	movs	r1, r2
    d012:	22fa      	movs	r2, #250	; 0xfa
    d014:	0210      	lsls	r0, r2, #8
    d016:	4798      	blx	r3
    d018:	0003      	movs	r3, r0
    d01a:	001a      	movs	r2, r3
    d01c:	4b1e      	ldr	r3, [pc, #120]	; (d098 <sw_timer_init+0xd8>)
    d01e:	0011      	movs	r1, r2
    d020:	0020      	movs	r0, r4
    d022:	4798      	blx	r3
    d024:	0003      	movs	r3, r0
    d026:	001a      	movs	r2, r3
    d028:	2318      	movs	r3, #24
    d02a:	18fb      	adds	r3, r7, r3
    d02c:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    d02e:	2318      	movs	r3, #24
    d030:	18fb      	adds	r3, r7, r3
    d032:	2205      	movs	r2, #5
    d034:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    d036:	683b      	ldr	r3, [r7, #0]
    d038:	781b      	ldrb	r3, [r3, #0]
    d03a:	001a      	movs	r2, r3
    d03c:	230c      	movs	r3, #12
    d03e:	18fb      	adds	r3, r7, r3
    d040:	0092      	lsls	r2, r2, #2
    d042:	58d1      	ldr	r1, [r2, r3]
    d044:	2318      	movs	r3, #24
    d046:	18fa      	adds	r2, r7, r3
    d048:	23bc      	movs	r3, #188	; 0xbc
    d04a:	18fb      	adds	r3, r7, r3
    d04c:	681b      	ldr	r3, [r3, #0]
    d04e:	0018      	movs	r0, r3
    d050:	4b12      	ldr	r3, [pc, #72]	; (d09c <sw_timer_init+0xdc>)
    d052:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    d054:	683b      	ldr	r3, [r7, #0]
    d056:	785b      	ldrb	r3, [r3, #1]
    d058:	3308      	adds	r3, #8
    d05a:	b2da      	uxtb	r2, r3
    d05c:	4910      	ldr	r1, [pc, #64]	; (d0a0 <sw_timer_init+0xe0>)
    d05e:	23bc      	movs	r3, #188	; 0xbc
    d060:	18fb      	adds	r3, r7, r3
    d062:	681b      	ldr	r3, [r3, #0]
    d064:	0018      	movs	r0, r3
    d066:	4b0f      	ldr	r3, [pc, #60]	; (d0a4 <sw_timer_init+0xe4>)
    d068:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    d06a:	683b      	ldr	r3, [r7, #0]
    d06c:	785b      	ldrb	r3, [r3, #1]
    d06e:	3308      	adds	r3, #8
    d070:	b2da      	uxtb	r2, r3
    d072:	23bc      	movs	r3, #188	; 0xbc
    d074:	18fb      	adds	r3, r7, r3
    d076:	681b      	ldr	r3, [r3, #0]
    d078:	0011      	movs	r1, r2
    d07a:	0018      	movs	r0, r3
    d07c:	4b0a      	ldr	r3, [pc, #40]	; (d0a8 <sw_timer_init+0xe8>)
    d07e:	4798      	blx	r3
}
    d080:	46c0      	nop			; (mov r8, r8)
    d082:	46bd      	mov	sp, r7
    d084:	b031      	add	sp, #196	; 0xc4
    d086:	bd90      	pop	{r4, r7, pc}
    d088:	0001a7fc 	.word	0x0001a7fc
    d08c:	0000aa21 	.word	0x0000aa21
    d090:	0000cf29 	.word	0x0000cf29
    d094:	00016495 	.word	0x00016495
    d098:	00016381 	.word	0x00016381
    d09c:	0000b07d 	.word	0x0000b07d
    d0a0:	0000cf7d 	.word	0x0000cf7d
    d0a4:	0000b495 	.word	0x0000b495
    d0a8:	0000b4d5 	.word	0x0000b4d5

0000d0ac <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
    d0ac:	b580      	push	{r7, lr}
    d0ae:	b084      	sub	sp, #16
    d0b0:	af00      	add	r7, sp, #0
    d0b2:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;

	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;
    d0b4:	687b      	ldr	r3, [r7, #4]
    d0b6:	3314      	adds	r3, #20
    d0b8:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
    d0ba:	68fb      	ldr	r3, [r7, #12]
    d0bc:	0018      	movs	r0, r3
    d0be:	4b03      	ldr	r3, [pc, #12]	; (d0cc <sw_timer_enable+0x20>)
    d0c0:	4798      	blx	r3
}
    d0c2:	46c0      	nop			; (mov r8, r8)
    d0c4:	46bd      	mov	sp, r7
    d0c6:	b004      	add	sp, #16
    d0c8:	bd80      	pop	{r7, pc}
    d0ca:	46c0      	nop			; (mov r8, r8)
    d0cc:	0000cf4d 	.word	0x0000cf4d

0000d0d0 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    d0d0:	b580      	push	{r7, lr}
    d0d2:	b086      	sub	sp, #24
    d0d4:	af00      	add	r7, sp, #0
    d0d6:	60f8      	str	r0, [r7, #12]
    d0d8:	60b9      	str	r1, [r7, #8]
    d0da:	607a      	str	r2, [r7, #4]
    d0dc:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    d0de:	2300      	movs	r3, #0
    d0e0:	617b      	str	r3, [r7, #20]
    d0e2:	e032      	b.n	d14a <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
    d0e4:	68f9      	ldr	r1, [r7, #12]
    d0e6:	697a      	ldr	r2, [r7, #20]
    d0e8:	0013      	movs	r3, r2
    d0ea:	009b      	lsls	r3, r3, #2
    d0ec:	189b      	adds	r3, r3, r2
    d0ee:	009b      	lsls	r3, r3, #2
    d0f0:	5c5b      	ldrb	r3, [r3, r1]
    d0f2:	07db      	lsls	r3, r3, #31
    d0f4:	0fdb      	lsrs	r3, r3, #31
    d0f6:	b2db      	uxtb	r3, r3
    d0f8:	2b00      	cmp	r3, #0
    d0fa:	d123      	bne.n	d144 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
    d0fc:	697a      	ldr	r2, [r7, #20]
    d0fe:	0013      	movs	r3, r2
    d100:	009b      	lsls	r3, r3, #2
    d102:	189b      	adds	r3, r3, r2
    d104:	009b      	lsls	r3, r3, #2
    d106:	68fa      	ldr	r2, [r7, #12]
    d108:	18d3      	adds	r3, r2, r3
    d10a:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
    d10c:	693b      	ldr	r3, [r7, #16]
    d10e:	68ba      	ldr	r2, [r7, #8]
    d110:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
    d112:	693b      	ldr	r3, [r7, #16]
    d114:	781a      	ldrb	r2, [r3, #0]
    d116:	2102      	movs	r1, #2
    d118:	438a      	bics	r2, r1
    d11a:	701a      	strb	r2, [r3, #0]
			handler->context = context;
    d11c:	693b      	ldr	r3, [r7, #16]
    d11e:	687a      	ldr	r2, [r7, #4]
    d120:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
    d122:	68fb      	ldr	r3, [r7, #12]
    d124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    d126:	4b0d      	ldr	r3, [pc, #52]	; (d15c <sw_timer_register_callback+0x8c>)
    d128:	0011      	movs	r1, r2
    d12a:	6838      	ldr	r0, [r7, #0]
    d12c:	4798      	blx	r3
    d12e:	0003      	movs	r3, r0
    d130:	001a      	movs	r2, r3
    d132:	693b      	ldr	r3, [r7, #16]
    d134:	60da      	str	r2, [r3, #12]
			handler->used = 1;
    d136:	693b      	ldr	r3, [r7, #16]
    d138:	781a      	ldrb	r2, [r3, #0]
    d13a:	2101      	movs	r1, #1
    d13c:	430a      	orrs	r2, r1
    d13e:	701a      	strb	r2, [r3, #0]
			return index;
    d140:	697b      	ldr	r3, [r7, #20]
    d142:	e007      	b.n	d154 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    d144:	697b      	ldr	r3, [r7, #20]
    d146:	3301      	adds	r3, #1
    d148:	617b      	str	r3, [r7, #20]
    d14a:	697b      	ldr	r3, [r7, #20]
    d14c:	2b00      	cmp	r3, #0
    d14e:	ddc9      	ble.n	d0e4 <sw_timer_register_callback+0x14>
		}
	}

	return -1;
    d150:	2301      	movs	r3, #1
    d152:	425b      	negs	r3, r3
}
    d154:	0018      	movs	r0, r3
    d156:	46bd      	mov	sp, r7
    d158:	b006      	add	sp, #24
    d15a:	bd80      	pop	{r7, pc}
    d15c:	00016381 	.word	0x00016381

0000d160 <sw_timer_unregister_callback>:

void sw_timer_unregister_callback(struct sw_timer_module *const module_inst, int timer_id)
{
    d160:	b580      	push	{r7, lr}
    d162:	b084      	sub	sp, #16
    d164:	af00      	add	r7, sp, #0
    d166:	6078      	str	r0, [r7, #4]
    d168:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    d16a:	683a      	ldr	r2, [r7, #0]
    d16c:	0013      	movs	r3, r2
    d16e:	009b      	lsls	r3, r3, #2
    d170:	189b      	adds	r3, r3, r2
    d172:	009b      	lsls	r3, r3, #2
    d174:	687a      	ldr	r2, [r7, #4]
    d176:	18d3      	adds	r3, r2, r3
    d178:	60fb      	str	r3, [r7, #12]

	handler->used = 0;
    d17a:	68fb      	ldr	r3, [r7, #12]
    d17c:	781a      	ldrb	r2, [r3, #0]
    d17e:	2101      	movs	r1, #1
    d180:	438a      	bics	r2, r1
    d182:	701a      	strb	r2, [r3, #0]
}
    d184:	46c0      	nop			; (mov r8, r8)
    d186:	46bd      	mov	sp, r7
    d188:	b004      	add	sp, #16
    d18a:	bd80      	pop	{r7, pc}

0000d18c <sw_timer_enable_callback>:

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    d18c:	b580      	push	{r7, lr}
    d18e:	b086      	sub	sp, #24
    d190:	af00      	add	r7, sp, #0
    d192:	60f8      	str	r0, [r7, #12]
    d194:	60b9      	str	r1, [r7, #8]
    d196:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    d198:	68ba      	ldr	r2, [r7, #8]
    d19a:	0013      	movs	r3, r2
    d19c:	009b      	lsls	r3, r3, #2
    d19e:	189b      	adds	r3, r3, r2
    d1a0:	009b      	lsls	r3, r3, #2
    d1a2:	68fa      	ldr	r2, [r7, #12]
    d1a4:	18d3      	adds	r3, r2, r3
    d1a6:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
    d1a8:	697b      	ldr	r3, [r7, #20]
    d1aa:	781a      	ldrb	r2, [r3, #0]
    d1ac:	2102      	movs	r1, #2
    d1ae:	430a      	orrs	r2, r1
    d1b0:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    d1b2:	68fb      	ldr	r3, [r7, #12]
    d1b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    d1b6:	4b07      	ldr	r3, [pc, #28]	; (d1d4 <sw_timer_enable_callback+0x48>)
    d1b8:	0011      	movs	r1, r2
    d1ba:	6878      	ldr	r0, [r7, #4]
    d1bc:	4798      	blx	r3
    d1be:	0003      	movs	r3, r0
    d1c0:	001a      	movs	r2, r3
    d1c2:	4b05      	ldr	r3, [pc, #20]	; (d1d8 <sw_timer_enable_callback+0x4c>)
    d1c4:	681b      	ldr	r3, [r3, #0]
    d1c6:	18d2      	adds	r2, r2, r3
    d1c8:	697b      	ldr	r3, [r7, #20]
    d1ca:	611a      	str	r2, [r3, #16]
}
    d1cc:	46c0      	nop			; (mov r8, r8)
    d1ce:	46bd      	mov	sp, r7
    d1d0:	b006      	add	sp, #24
    d1d2:	bd80      	pop	{r7, pc}
    d1d4:	00016381 	.word	0x00016381
    d1d8:	20000258 	.word	0x20000258

0000d1dc <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
    d1dc:	b580      	push	{r7, lr}
    d1de:	b084      	sub	sp, #16
    d1e0:	af00      	add	r7, sp, #0
    d1e2:	6078      	str	r0, [r7, #4]
    d1e4:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    d1e6:	683a      	ldr	r2, [r7, #0]
    d1e8:	0013      	movs	r3, r2
    d1ea:	009b      	lsls	r3, r3, #2
    d1ec:	189b      	adds	r3, r3, r2
    d1ee:	009b      	lsls	r3, r3, #2
    d1f0:	687a      	ldr	r2, [r7, #4]
    d1f2:	18d3      	adds	r3, r2, r3
    d1f4:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
    d1f6:	68fb      	ldr	r3, [r7, #12]
    d1f8:	781a      	ldrb	r2, [r3, #0]
    d1fa:	2102      	movs	r1, #2
    d1fc:	438a      	bics	r2, r1
    d1fe:	701a      	strb	r2, [r3, #0]
}
    d200:	46c0      	nop			; (mov r8, r8)
    d202:	46bd      	mov	sp, r7
    d204:	b004      	add	sp, #16
    d206:	bd80      	pop	{r7, pc}

0000d208 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    d208:	b590      	push	{r4, r7, lr}
    d20a:	b085      	sub	sp, #20
    d20c:	af00      	add	r7, sp, #0
    d20e:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    d210:	2300      	movs	r3, #0
    d212:	60fb      	str	r3, [r7, #12]
    d214:	e053      	b.n	d2be <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    d216:	6879      	ldr	r1, [r7, #4]
    d218:	68fa      	ldr	r2, [r7, #12]
    d21a:	0013      	movs	r3, r2
    d21c:	009b      	lsls	r3, r3, #2
    d21e:	189b      	adds	r3, r3, r2
    d220:	009b      	lsls	r3, r3, #2
    d222:	5c5b      	ldrb	r3, [r3, r1]
    d224:	07db      	lsls	r3, r3, #31
    d226:	0fdb      	lsrs	r3, r3, #31
    d228:	b2db      	uxtb	r3, r3
    d22a:	2b00      	cmp	r3, #0
    d22c:	d044      	beq.n	d2b8 <sw_timer_task+0xb0>
    d22e:	6879      	ldr	r1, [r7, #4]
    d230:	68fa      	ldr	r2, [r7, #12]
    d232:	0013      	movs	r3, r2
    d234:	009b      	lsls	r3, r3, #2
    d236:	189b      	adds	r3, r3, r2
    d238:	009b      	lsls	r3, r3, #2
    d23a:	5c5b      	ldrb	r3, [r3, r1]
    d23c:	079b      	lsls	r3, r3, #30
    d23e:	0fdb      	lsrs	r3, r3, #31
    d240:	b2db      	uxtb	r3, r3
    d242:	2b00      	cmp	r3, #0
    d244:	d038      	beq.n	d2b8 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
    d246:	68fa      	ldr	r2, [r7, #12]
    d248:	0013      	movs	r3, r2
    d24a:	009b      	lsls	r3, r3, #2
    d24c:	189b      	adds	r3, r3, r2
    d24e:	009b      	lsls	r3, r3, #2
    d250:	687a      	ldr	r2, [r7, #4]
    d252:	18d3      	adds	r3, r2, r3
    d254:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    d256:	68bb      	ldr	r3, [r7, #8]
    d258:	691a      	ldr	r2, [r3, #16]
    d25a:	4b1c      	ldr	r3, [pc, #112]	; (d2cc <sw_timer_task+0xc4>)
    d25c:	681b      	ldr	r3, [r3, #0]
    d25e:	1ad3      	subs	r3, r2, r3
    d260:	d52a      	bpl.n	d2b8 <sw_timer_task+0xb0>
    d262:	68bb      	ldr	r3, [r7, #8]
    d264:	781b      	ldrb	r3, [r3, #0]
    d266:	2204      	movs	r2, #4
    d268:	4013      	ands	r3, r2
    d26a:	b2db      	uxtb	r3, r3
    d26c:	2b00      	cmp	r3, #0
    d26e:	d123      	bne.n	d2b8 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
    d270:	68bb      	ldr	r3, [r7, #8]
    d272:	781a      	ldrb	r2, [r3, #0]
    d274:	2104      	movs	r1, #4
    d276:	430a      	orrs	r2, r1
    d278:	701a      	strb	r2, [r3, #0]
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    d27a:	68bb      	ldr	r3, [r7, #8]
    d27c:	685c      	ldr	r4, [r3, #4]
    d27e:	68bb      	ldr	r3, [r7, #8]
    d280:	689a      	ldr	r2, [r3, #8]
    d282:	68bb      	ldr	r3, [r7, #8]
    d284:	68db      	ldr	r3, [r3, #12]
    d286:	68f9      	ldr	r1, [r7, #12]
    d288:	6878      	ldr	r0, [r7, #4]
    d28a:	47a0      	blx	r4
				/* Timer was expired. */
				if (handler->period > 0) {
    d28c:	68bb      	ldr	r3, [r7, #8]
    d28e:	68db      	ldr	r3, [r3, #12]
    d290:	2b00      	cmp	r3, #0
    d292:	d007      	beq.n	d2a4 <sw_timer_task+0x9c>
					handler->expire_time = sw_timer_tick + handler->period;
    d294:	68bb      	ldr	r3, [r7, #8]
    d296:	68da      	ldr	r2, [r3, #12]
    d298:	4b0c      	ldr	r3, [pc, #48]	; (d2cc <sw_timer_task+0xc4>)
    d29a:	681b      	ldr	r3, [r3, #0]
    d29c:	18d2      	adds	r2, r2, r3
    d29e:	68bb      	ldr	r3, [r7, #8]
    d2a0:	611a      	str	r2, [r3, #16]
    d2a2:	e004      	b.n	d2ae <sw_timer_task+0xa6>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    d2a4:	68bb      	ldr	r3, [r7, #8]
    d2a6:	781a      	ldrb	r2, [r3, #0]
    d2a8:	2102      	movs	r1, #2
    d2aa:	438a      	bics	r2, r1
    d2ac:	701a      	strb	r2, [r3, #0]
				}
				/* Leave critical section. */
				handler->busy = 0;
    d2ae:	68bb      	ldr	r3, [r7, #8]
    d2b0:	781a      	ldrb	r2, [r3, #0]
    d2b2:	2104      	movs	r1, #4
    d2b4:	438a      	bics	r2, r1
    d2b6:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    d2b8:	68fb      	ldr	r3, [r7, #12]
    d2ba:	3301      	adds	r3, #1
    d2bc:	60fb      	str	r3, [r7, #12]
    d2be:	68fb      	ldr	r3, [r7, #12]
    d2c0:	2b00      	cmp	r3, #0
    d2c2:	dda8      	ble.n	d216 <sw_timer_task+0xe>
			}
		}
	}

}
    d2c4:	46c0      	nop			; (mov r8, r8)
    d2c6:	46bd      	mov	sp, r7
    d2c8:	b005      	add	sp, #20
    d2ca:	bd90      	pop	{r4, r7, pc}
    d2cc:	20000258 	.word	0x20000258

0000d2d0 <wifi_callback>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_callback(uint8 msg_type, void *msg_data)
{
    d2d0:	b590      	push	{r4, r7, lr}
    d2d2:	b087      	sub	sp, #28
    d2d4:	af02      	add	r7, sp, #8
    d2d6:	0002      	movs	r2, r0
    d2d8:	6039      	str	r1, [r7, #0]
    d2da:	1dfb      	adds	r3, r7, #7
    d2dc:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiStateChanged *msg_wifi_state;
	uint8 *msg_ip_addr;

	switch (msg_type) {
    d2de:	1dfb      	adds	r3, r7, #7
    d2e0:	781b      	ldrb	r3, [r3, #0]
    d2e2:	2b2c      	cmp	r3, #44	; 0x2c
    d2e4:	d002      	beq.n	d2ec <wifi_callback+0x1c>
    d2e6:	2b32      	cmp	r3, #50	; 0x32
    d2e8:	d024      	beq.n	d334 <wifi_callback+0x64>
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
		wifi_connected = 1; 
		break;

	default:
		break;
    d2ea:	e043      	b.n	d374 <wifi_callback+0xa4>
		msg_wifi_state = (tstrM2mWifiStateChanged *)msg_data;
    d2ec:	683b      	ldr	r3, [r7, #0]
    d2ee:	60fb      	str	r3, [r7, #12]
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    d2f0:	68fb      	ldr	r3, [r7, #12]
    d2f2:	781b      	ldrb	r3, [r3, #0]
    d2f4:	2b01      	cmp	r3, #1
    d2f6:	d106      	bne.n	d306 <wifi_callback+0x36>
			printf("Wi-Fi connected\r\n");
    d2f8:	4b20      	ldr	r3, [pc, #128]	; (d37c <wifi_callback+0xac>)
    d2fa:	0018      	movs	r0, r3
    d2fc:	4b20      	ldr	r3, [pc, #128]	; (d380 <wifi_callback+0xb0>)
    d2fe:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    d300:	4b20      	ldr	r3, [pc, #128]	; (d384 <wifi_callback+0xb4>)
    d302:	4798      	blx	r3
		break;
    d304:	e035      	b.n	d372 <wifi_callback+0xa2>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    d306:	68fb      	ldr	r3, [r7, #12]
    d308:	781b      	ldrb	r3, [r3, #0]
    d30a:	2b00      	cmp	r3, #0
    d30c:	d131      	bne.n	d372 <wifi_callback+0xa2>
			printf("Wi-Fi disconnected\r\n");
    d30e:	4b1e      	ldr	r3, [pc, #120]	; (d388 <wifi_callback+0xb8>)
    d310:	0018      	movs	r0, r3
    d312:	4b1b      	ldr	r3, [pc, #108]	; (d380 <wifi_callback+0xb0>)
    d314:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    d316:	4a1d      	ldr	r2, [pc, #116]	; (d38c <wifi_callback+0xbc>)
    d318:	481d      	ldr	r0, [pc, #116]	; (d390 <wifi_callback+0xc0>)
    d31a:	23ff      	movs	r3, #255	; 0xff
    d31c:	9300      	str	r3, [sp, #0]
    d31e:	0013      	movs	r3, r2
    d320:	2202      	movs	r2, #2
    d322:	2105      	movs	r1, #5
    d324:	4c1b      	ldr	r4, [pc, #108]	; (d394 <wifi_callback+0xc4>)
    d326:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    d328:	4b1b      	ldr	r3, [pc, #108]	; (d398 <wifi_callback+0xc8>)
    d32a:	2101      	movs	r1, #1
    d32c:	0018      	movs	r0, r3
    d32e:	4b1b      	ldr	r3, [pc, #108]	; (d39c <wifi_callback+0xcc>)
    d330:	4798      	blx	r3
		break;
    d332:	e01e      	b.n	d372 <wifi_callback+0xa2>
		msg_ip_addr = (uint8 *)msg_data;
    d334:	683b      	ldr	r3, [r7, #0]
    d336:	60bb      	str	r3, [r7, #8]
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    d338:	68bb      	ldr	r3, [r7, #8]
    d33a:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    d33c:	0019      	movs	r1, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    d33e:	68bb      	ldr	r3, [r7, #8]
    d340:	3301      	adds	r3, #1
    d342:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    d344:	001a      	movs	r2, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    d346:	68bb      	ldr	r3, [r7, #8]
    d348:	3302      	adds	r3, #2
    d34a:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    d34c:	001c      	movs	r4, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    d34e:	68bb      	ldr	r3, [r7, #8]
    d350:	3303      	adds	r3, #3
    d352:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    d354:	4812      	ldr	r0, [pc, #72]	; (d3a0 <wifi_callback+0xd0>)
    d356:	9300      	str	r3, [sp, #0]
    d358:	0023      	movs	r3, r4
    d35a:	4c12      	ldr	r4, [pc, #72]	; (d3a4 <wifi_callback+0xd4>)
    d35c:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    d35e:	4a12      	ldr	r2, [pc, #72]	; (d3a8 <wifi_callback+0xd8>)
    d360:	4b0d      	ldr	r3, [pc, #52]	; (d398 <wifi_callback+0xc8>)
    d362:	0011      	movs	r1, r2
    d364:	0018      	movs	r0, r3
    d366:	4b11      	ldr	r3, [pc, #68]	; (d3ac <wifi_callback+0xdc>)
    d368:	4798      	blx	r3
		wifi_connected = 1; 
    d36a:	4b11      	ldr	r3, [pc, #68]	; (d3b0 <wifi_callback+0xe0>)
    d36c:	2201      	movs	r2, #1
    d36e:	601a      	str	r2, [r3, #0]
		break;
    d370:	e000      	b.n	d374 <wifi_callback+0xa4>
		break;
    d372:	46c0      	nop			; (mov r8, r8)
	}
}
    d374:	46c0      	nop			; (mov r8, r8)
    d376:	46bd      	mov	sp, r7
    d378:	b005      	add	sp, #20
    d37a:	bd90      	pop	{r4, r7, pc}
    d37c:	0001a81c 	.word	0x0001a81c
    d380:	00013f69 	.word	0x00013f69
    d384:	000057a1 	.word	0x000057a1
    d388:	0001a830 	.word	0x0001a830
    d38c:	0001a844 	.word	0x0001a844
    d390:	0001a850 	.word	0x0001a850
    d394:	000052d9 	.word	0x000052d9
    d398:	20000878 	.word	0x20000878
    d39c:	00012eed 	.word	0x00012eed
    d3a0:	0001a858 	.word	0x0001a858
    d3a4:	00013e4d 	.word	0x00013e4d
    d3a8:	0001a808 	.word	0x0001a808
    d3ac:	000126e1 	.word	0x000126e1
    d3b0:	2000025c 	.word	0x2000025c

0000d3b4 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    d3b4:	b580      	push	{r7, lr}
    d3b6:	b082      	sub	sp, #8
    d3b8:	af00      	add	r7, sp, #0
    d3ba:	603a      	str	r2, [r7, #0]
    d3bc:	1dfb      	adds	r3, r7, #7
    d3be:	1c02      	adds	r2, r0, #0
    d3c0:	701a      	strb	r2, [r3, #0]
    d3c2:	1dbb      	adds	r3, r7, #6
    d3c4:	1c0a      	adds	r2, r1, #0
    d3c6:	701a      	strb	r2, [r3, #0]
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    d3c8:	683a      	ldr	r2, [r7, #0]
    d3ca:	1dbb      	adds	r3, r7, #6
    d3cc:	7819      	ldrb	r1, [r3, #0]
    d3ce:	1dfb      	adds	r3, r7, #7
    d3d0:	781b      	ldrb	r3, [r3, #0]
    d3d2:	b25b      	sxtb	r3, r3
    d3d4:	0018      	movs	r0, r3
    d3d6:	4b03      	ldr	r3, [pc, #12]	; (d3e4 <socket_event_handler+0x30>)
    d3d8:	4798      	blx	r3
}
    d3da:	46c0      	nop			; (mov r8, r8)
    d3dc:	46bd      	mov	sp, r7
    d3de:	b002      	add	sp, #8
    d3e0:	bd80      	pop	{r7, pc}
    d3e2:	46c0      	nop			; (mov r8, r8)
    d3e4:	0001322d 	.word	0x0001322d

0000d3e8 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    d3e8:	b580      	push	{r7, lr}
    d3ea:	b082      	sub	sp, #8
    d3ec:	af00      	add	r7, sp, #0
    d3ee:	6078      	str	r0, [r7, #4]
    d3f0:	6039      	str	r1, [r7, #0]
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    d3f2:	683a      	ldr	r2, [r7, #0]
    d3f4:	687b      	ldr	r3, [r7, #4]
    d3f6:	0011      	movs	r1, r2
    d3f8:	0018      	movs	r0, r3
    d3fa:	4b03      	ldr	r3, [pc, #12]	; (d408 <socket_resolve_handler+0x20>)
    d3fc:	4798      	blx	r3
}
    d3fe:	46c0      	nop			; (mov r8, r8)
    d400:	46bd      	mov	sp, r7
    d402:	b002      	add	sp, #8
    d404:	bd80      	pop	{r7, pc}
    d406:	46c0      	nop			; (mov r8, r8)
    d408:	0001268d 	.word	0x0001268d

0000d40c <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    d40c:	b590      	push	{r4, r7, lr}
    d40e:	b08d      	sub	sp, #52	; 0x34
    d410:	af06      	add	r7, sp, #24
    d412:	60f8      	str	r0, [r7, #12]
    d414:	60b9      	str	r1, [r7, #8]
    d416:	607a      	str	r2, [r7, #4]
	switch (type) {
    d418:	68bb      	ldr	r3, [r7, #8]
    d41a:	2b01      	cmp	r3, #1
    d41c:	d030      	beq.n	d480 <mqtt_callback+0x74>
    d41e:	dc02      	bgt.n	d426 <mqtt_callback+0x1a>
    d420:	2b00      	cmp	r3, #0
    d422:	d006      	beq.n	d432 <mqtt_callback+0x26>
	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer */
		printf("MQTT disconnected\r\n");
		break;
	}
}
    d424:	e146      	b.n	d6b4 <mqtt_callback+0x2a8>
	switch (type) {
    d426:	2b05      	cmp	r3, #5
    d428:	d100      	bne.n	d42c <mqtt_callback+0x20>
    d42a:	e13d      	b.n	d6a8 <mqtt_callback+0x29c>
    d42c:	2b06      	cmp	r3, #6
    d42e:	d063      	beq.n	d4f8 <mqtt_callback+0xec>
}
    d430:	e140      	b.n	d6b4 <mqtt_callback+0x2a8>
		if (data->sock_connected.result >= 0) {
    d432:	687b      	ldr	r3, [r7, #4]
    d434:	681b      	ldr	r3, [r3, #0]
    d436:	2b00      	cmp	r3, #0
    d438:	db15      	blt.n	d466 <mqtt_callback+0x5a>
			mqtt_connect_broker(module_inst, 1, NULL, NULL, MQTT_USER, NULL, NULL, 0, 0, 0);
    d43a:	68f8      	ldr	r0, [r7, #12]
    d43c:	2300      	movs	r3, #0
    d43e:	9305      	str	r3, [sp, #20]
    d440:	2300      	movs	r3, #0
    d442:	9304      	str	r3, [sp, #16]
    d444:	2300      	movs	r3, #0
    d446:	9303      	str	r3, [sp, #12]
    d448:	2300      	movs	r3, #0
    d44a:	9302      	str	r3, [sp, #8]
    d44c:	2300      	movs	r3, #0
    d44e:	9301      	str	r3, [sp, #4]
    d450:	4b9a      	ldr	r3, [pc, #616]	; (d6bc <mqtt_callback+0x2b0>)
    d452:	9300      	str	r3, [sp, #0]
    d454:	2300      	movs	r3, #0
    d456:	2200      	movs	r2, #0
    d458:	2101      	movs	r1, #1
    d45a:	4c99      	ldr	r4, [pc, #612]	; (d6c0 <mqtt_callback+0x2b4>)
    d45c:	47a0      	blx	r4
			mqtt_connected = 1;
    d45e:	4b99      	ldr	r3, [pc, #612]	; (d6c4 <mqtt_callback+0x2b8>)
    d460:	2201      	movs	r2, #1
    d462:	601a      	str	r2, [r3, #0]
	break;
    d464:	e126      	b.n	d6b4 <mqtt_callback+0x2a8>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    d466:	4a98      	ldr	r2, [pc, #608]	; (d6c8 <mqtt_callback+0x2bc>)
    d468:	4b98      	ldr	r3, [pc, #608]	; (d6cc <mqtt_callback+0x2c0>)
    d46a:	0011      	movs	r1, r2
    d46c:	0018      	movs	r0, r3
    d46e:	4b98      	ldr	r3, [pc, #608]	; (d6d0 <mqtt_callback+0x2c4>)
    d470:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    d472:	4a95      	ldr	r2, [pc, #596]	; (d6c8 <mqtt_callback+0x2bc>)
    d474:	68fb      	ldr	r3, [r7, #12]
    d476:	0011      	movs	r1, r2
    d478:	0018      	movs	r0, r3
    d47a:	4b96      	ldr	r3, [pc, #600]	; (d6d4 <mqtt_callback+0x2c8>)
    d47c:	4798      	blx	r3
	break;
    d47e:	e119      	b.n	d6b4 <mqtt_callback+0x2a8>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    d480:	687b      	ldr	r3, [r7, #4]
    d482:	781b      	ldrb	r3, [r3, #0]
    d484:	2b00      	cmp	r3, #0
    d486:	d12e      	bne.n	d4e6 <mqtt_callback+0xda>
			  module_inst->busy = 0;
    d488:	68fb      	ldr	r3, [r7, #12]
    d48a:	2243      	movs	r2, #67	; 0x43
    d48c:	5c99      	ldrb	r1, [r3, r2]
    d48e:	2008      	movs	r0, #8
    d490:	4381      	bics	r1, r0
    d492:	5499      	strb	r1, [r3, r2]
			  mqtt_subscribe(module_inst, PUMP_TOPIC "#", 0);
    d494:	4990      	ldr	r1, [pc, #576]	; (d6d8 <mqtt_callback+0x2cc>)
    d496:	68fb      	ldr	r3, [r7, #12]
    d498:	2200      	movs	r2, #0
    d49a:	0018      	movs	r0, r3
    d49c:	4b8f      	ldr	r3, [pc, #572]	; (d6dc <mqtt_callback+0x2d0>)
    d49e:	4798      	blx	r3
			  mqtt_subscribe(module_inst, RELAY1_TOPIC "#", 0);
    d4a0:	498f      	ldr	r1, [pc, #572]	; (d6e0 <mqtt_callback+0x2d4>)
    d4a2:	68fb      	ldr	r3, [r7, #12]
    d4a4:	2200      	movs	r2, #0
    d4a6:	0018      	movs	r0, r3
    d4a8:	4b8c      	ldr	r3, [pc, #560]	; (d6dc <mqtt_callback+0x2d0>)
    d4aa:	4798      	blx	r3
			  mqtt_subscribe(module_inst, RELAY2_TOPIC "#", 0);
    d4ac:	498d      	ldr	r1, [pc, #564]	; (d6e4 <mqtt_callback+0x2d8>)
    d4ae:	68fb      	ldr	r3, [r7, #12]
    d4b0:	2200      	movs	r2, #0
    d4b2:	0018      	movs	r0, r3
    d4b4:	4b89      	ldr	r3, [pc, #548]	; (d6dc <mqtt_callback+0x2d0>)
    d4b6:	4798      	blx	r3
			  mqtt_subscribe(module_inst, LED_TOPIC "#", 0);
    d4b8:	498b      	ldr	r1, [pc, #556]	; (d6e8 <mqtt_callback+0x2dc>)
    d4ba:	68fb      	ldr	r3, [r7, #12]
    d4bc:	2200      	movs	r2, #0
    d4be:	0018      	movs	r0, r3
    d4c0:	4b86      	ldr	r3, [pc, #536]	; (d6dc <mqtt_callback+0x2d0>)
    d4c2:	4798      	blx	r3
			  mqtt_subscribe(module_inst, UPGRADE_TOPIC "#", 0);
    d4c4:	4989      	ldr	r1, [pc, #548]	; (d6ec <mqtt_callback+0x2e0>)
    d4c6:	68fb      	ldr	r3, [r7, #12]
    d4c8:	2200      	movs	r2, #0
    d4ca:	0018      	movs	r0, r3
    d4cc:	4b83      	ldr	r3, [pc, #524]	; (d6dc <mqtt_callback+0x2d0>)
    d4ce:	4798      	blx	r3
			  mqtt_subscribe(module_inst, VERSION_TOPIC "#", 0);
    d4d0:	4987      	ldr	r1, [pc, #540]	; (d6f0 <mqtt_callback+0x2e4>)
    d4d2:	68fb      	ldr	r3, [r7, #12]
    d4d4:	2200      	movs	r2, #0
    d4d6:	0018      	movs	r0, r3
    d4d8:	4b80      	ldr	r3, [pc, #512]	; (d6dc <mqtt_callback+0x2d0>)
    d4da:	4798      	blx	r3
			printf("Preparation of MQTT has been completed.\r\n");
    d4dc:	4b85      	ldr	r3, [pc, #532]	; (d6f4 <mqtt_callback+0x2e8>)
    d4de:	0018      	movs	r0, r3
    d4e0:	4b85      	ldr	r3, [pc, #532]	; (d6f8 <mqtt_callback+0x2ec>)
    d4e2:	4798      	blx	r3
		break;
    d4e4:	e0e6      	b.n	d6b4 <mqtt_callback+0x2a8>
			printf("MQTT broker declined your access! error code %d\r\n", data->connected.result);
    d4e6:	687b      	ldr	r3, [r7, #4]
    d4e8:	781b      	ldrb	r3, [r3, #0]
    d4ea:	001a      	movs	r2, r3
    d4ec:	4b83      	ldr	r3, [pc, #524]	; (d6fc <mqtt_callback+0x2f0>)
    d4ee:	0011      	movs	r1, r2
    d4f0:	0018      	movs	r0, r3
    d4f2:	4b77      	ldr	r3, [pc, #476]	; (d6d0 <mqtt_callback+0x2c4>)
    d4f4:	4798      	blx	r3
		break;
    d4f6:	e0dd      	b.n	d6b4 <mqtt_callback+0x2a8>
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL)
    d4f8:	687b      	ldr	r3, [r7, #4]
    d4fa:	681b      	ldr	r3, [r3, #0]
    d4fc:	2b00      	cmp	r3, #0
    d4fe:	d100      	bne.n	d502 <mqtt_callback+0xf6>
    d500:	e0d7      	b.n	d6b2 <mqtt_callback+0x2a6>
    d502:	687b      	ldr	r3, [r7, #4]
    d504:	689b      	ldr	r3, [r3, #8]
    d506:	2b00      	cmp	r3, #0
    d508:	d100      	bne.n	d50c <mqtt_callback+0x100>
    d50a:	e0d2      	b.n	d6b2 <mqtt_callback+0x2a6>
			if (strncmp(data->recv_publish.topic, PUMP_TOPIC, strlen(PUMP_TOPIC)) == 0)
    d50c:	687b      	ldr	r3, [r7, #4]
    d50e:	681b      	ldr	r3, [r3, #0]
    d510:	497b      	ldr	r1, [pc, #492]	; (d700 <mqtt_callback+0x2f4>)
    d512:	2212      	movs	r2, #18
    d514:	0018      	movs	r0, r3
    d516:	4b7b      	ldr	r3, [pc, #492]	; (d704 <mqtt_callback+0x2f8>)
    d518:	4798      	blx	r3
    d51a:	1e03      	subs	r3, r0, #0
    d51c:	d10a      	bne.n	d534 <mqtt_callback+0x128>
					printf("%s >> ", PUMP_TOPIC);
    d51e:	4a78      	ldr	r2, [pc, #480]	; (d700 <mqtt_callback+0x2f4>)
    d520:	4b79      	ldr	r3, [pc, #484]	; (d708 <mqtt_callback+0x2fc>)
    d522:	0011      	movs	r1, r2
    d524:	0018      	movs	r0, r3
    d526:	4b6a      	ldr	r3, [pc, #424]	; (d6d0 <mqtt_callback+0x2c4>)
    d528:	4798      	blx	r3
					run_pump(10000);
    d52a:	4b78      	ldr	r3, [pc, #480]	; (d70c <mqtt_callback+0x300>)
    d52c:	0018      	movs	r0, r3
    d52e:	4b78      	ldr	r3, [pc, #480]	; (d710 <mqtt_callback+0x304>)
    d530:	4798      	blx	r3
    d532:	e0ad      	b.n	d690 <mqtt_callback+0x284>
			else if (strncmp(data->recv_publish.topic, RELAY1_TOPIC, strlen(RELAY1_TOPIC)) == 0)
    d534:	687b      	ldr	r3, [r7, #4]
    d536:	681b      	ldr	r3, [r3, #0]
    d538:	4976      	ldr	r1, [pc, #472]	; (d714 <mqtt_callback+0x308>)
    d53a:	2214      	movs	r2, #20
    d53c:	0018      	movs	r0, r3
    d53e:	4b71      	ldr	r3, [pc, #452]	; (d704 <mqtt_callback+0x2f8>)
    d540:	4798      	blx	r3
    d542:	1e03      	subs	r3, r0, #0
    d544:	d122      	bne.n	d58c <mqtt_callback+0x180>
					printf("%s >> ", RELAY1_TOPIC);
    d546:	4a73      	ldr	r2, [pc, #460]	; (d714 <mqtt_callback+0x308>)
    d548:	4b6f      	ldr	r3, [pc, #444]	; (d708 <mqtt_callback+0x2fc>)
    d54a:	0011      	movs	r1, r2
    d54c:	0018      	movs	r0, r3
    d54e:	4b60      	ldr	r3, [pc, #384]	; (d6d0 <mqtt_callback+0x2c4>)
    d550:	4798      	blx	r3
					if (strncmp("on", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    d552:	687b      	ldr	r3, [r7, #4]
    d554:	6899      	ldr	r1, [r3, #8]
    d556:	687b      	ldr	r3, [r7, #4]
    d558:	68db      	ldr	r3, [r3, #12]
    d55a:	001a      	movs	r2, r3
    d55c:	4b6e      	ldr	r3, [pc, #440]	; (d718 <mqtt_callback+0x30c>)
    d55e:	0018      	movs	r0, r3
    d560:	4b68      	ldr	r3, [pc, #416]	; (d704 <mqtt_callback+0x2f8>)
    d562:	4798      	blx	r3
    d564:	1e03      	subs	r3, r0, #0
    d566:	d102      	bne.n	d56e <mqtt_callback+0x162>
						relay1_enable();
    d568:	4b6c      	ldr	r3, [pc, #432]	; (d71c <mqtt_callback+0x310>)
    d56a:	4798      	blx	r3
    d56c:	e090      	b.n	d690 <mqtt_callback+0x284>
					else if (strncmp("off", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    d56e:	687b      	ldr	r3, [r7, #4]
    d570:	6899      	ldr	r1, [r3, #8]
    d572:	687b      	ldr	r3, [r7, #4]
    d574:	68db      	ldr	r3, [r3, #12]
    d576:	001a      	movs	r2, r3
    d578:	4b69      	ldr	r3, [pc, #420]	; (d720 <mqtt_callback+0x314>)
    d57a:	0018      	movs	r0, r3
    d57c:	4b61      	ldr	r3, [pc, #388]	; (d704 <mqtt_callback+0x2f8>)
    d57e:	4798      	blx	r3
    d580:	1e03      	subs	r3, r0, #0
    d582:	d000      	beq.n	d586 <mqtt_callback+0x17a>
    d584:	e084      	b.n	d690 <mqtt_callback+0x284>
						relay1_disable();
    d586:	4b67      	ldr	r3, [pc, #412]	; (d724 <mqtt_callback+0x318>)
    d588:	4798      	blx	r3
    d58a:	e081      	b.n	d690 <mqtt_callback+0x284>
			else if (strncmp(data->recv_publish.topic, LED_TOPIC, strlen(LED_TOPIC)) == 0)
    d58c:	687b      	ldr	r3, [r7, #4]
    d58e:	681b      	ldr	r3, [r3, #0]
    d590:	4965      	ldr	r1, [pc, #404]	; (d728 <mqtt_callback+0x31c>)
    d592:	2211      	movs	r2, #17
    d594:	0018      	movs	r0, r3
    d596:	4b5b      	ldr	r3, [pc, #364]	; (d704 <mqtt_callback+0x2f8>)
    d598:	4798      	blx	r3
    d59a:	1e03      	subs	r3, r0, #0
    d59c:	d121      	bne.n	d5e2 <mqtt_callback+0x1d6>
					printf("%s >> ", LED_TOPIC);
    d59e:	4a62      	ldr	r2, [pc, #392]	; (d728 <mqtt_callback+0x31c>)
    d5a0:	4b59      	ldr	r3, [pc, #356]	; (d708 <mqtt_callback+0x2fc>)
    d5a2:	0011      	movs	r1, r2
    d5a4:	0018      	movs	r0, r3
    d5a6:	4b4a      	ldr	r3, [pc, #296]	; (d6d0 <mqtt_callback+0x2c4>)
    d5a8:	4798      	blx	r3
					if (strncmp("on", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    d5aa:	687b      	ldr	r3, [r7, #4]
    d5ac:	6899      	ldr	r1, [r3, #8]
    d5ae:	687b      	ldr	r3, [r7, #4]
    d5b0:	68db      	ldr	r3, [r3, #12]
    d5b2:	001a      	movs	r2, r3
    d5b4:	4b58      	ldr	r3, [pc, #352]	; (d718 <mqtt_callback+0x30c>)
    d5b6:	0018      	movs	r0, r3
    d5b8:	4b52      	ldr	r3, [pc, #328]	; (d704 <mqtt_callback+0x2f8>)
    d5ba:	4798      	blx	r3
    d5bc:	1e03      	subs	r3, r0, #0
    d5be:	d102      	bne.n	d5c6 <mqtt_callback+0x1ba>
						led2_on();
    d5c0:	4b5a      	ldr	r3, [pc, #360]	; (d72c <mqtt_callback+0x320>)
    d5c2:	4798      	blx	r3
    d5c4:	e064      	b.n	d690 <mqtt_callback+0x284>
					else if (strncmp("off", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    d5c6:	687b      	ldr	r3, [r7, #4]
    d5c8:	6899      	ldr	r1, [r3, #8]
    d5ca:	687b      	ldr	r3, [r7, #4]
    d5cc:	68db      	ldr	r3, [r3, #12]
    d5ce:	001a      	movs	r2, r3
    d5d0:	4b53      	ldr	r3, [pc, #332]	; (d720 <mqtt_callback+0x314>)
    d5d2:	0018      	movs	r0, r3
    d5d4:	4b4b      	ldr	r3, [pc, #300]	; (d704 <mqtt_callback+0x2f8>)
    d5d6:	4798      	blx	r3
    d5d8:	1e03      	subs	r3, r0, #0
    d5da:	d159      	bne.n	d690 <mqtt_callback+0x284>
						led2_off();
    d5dc:	4b54      	ldr	r3, [pc, #336]	; (d730 <mqtt_callback+0x324>)
    d5de:	4798      	blx	r3
    d5e0:	e056      	b.n	d690 <mqtt_callback+0x284>
			else if (strncmp(data->recv_publish.topic, RELAY2_TOPIC, strlen(RELAY2_TOPIC)) == 0)
    d5e2:	687b      	ldr	r3, [r7, #4]
    d5e4:	681b      	ldr	r3, [r3, #0]
    d5e6:	4953      	ldr	r1, [pc, #332]	; (d734 <mqtt_callback+0x328>)
    d5e8:	2214      	movs	r2, #20
    d5ea:	0018      	movs	r0, r3
    d5ec:	4b45      	ldr	r3, [pc, #276]	; (d704 <mqtt_callback+0x2f8>)
    d5ee:	4798      	blx	r3
    d5f0:	1e03      	subs	r3, r0, #0
    d5f2:	d121      	bne.n	d638 <mqtt_callback+0x22c>
					printf("%s >> ", RELAY2_TOPIC);
    d5f4:	4a4f      	ldr	r2, [pc, #316]	; (d734 <mqtt_callback+0x328>)
    d5f6:	4b44      	ldr	r3, [pc, #272]	; (d708 <mqtt_callback+0x2fc>)
    d5f8:	0011      	movs	r1, r2
    d5fa:	0018      	movs	r0, r3
    d5fc:	4b34      	ldr	r3, [pc, #208]	; (d6d0 <mqtt_callback+0x2c4>)
    d5fe:	4798      	blx	r3
					if (strncmp("on", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    d600:	687b      	ldr	r3, [r7, #4]
    d602:	6899      	ldr	r1, [r3, #8]
    d604:	687b      	ldr	r3, [r7, #4]
    d606:	68db      	ldr	r3, [r3, #12]
    d608:	001a      	movs	r2, r3
    d60a:	4b43      	ldr	r3, [pc, #268]	; (d718 <mqtt_callback+0x30c>)
    d60c:	0018      	movs	r0, r3
    d60e:	4b3d      	ldr	r3, [pc, #244]	; (d704 <mqtt_callback+0x2f8>)
    d610:	4798      	blx	r3
    d612:	1e03      	subs	r3, r0, #0
    d614:	d102      	bne.n	d61c <mqtt_callback+0x210>
						relay2_enable();
    d616:	4b48      	ldr	r3, [pc, #288]	; (d738 <mqtt_callback+0x32c>)
    d618:	4798      	blx	r3
    d61a:	e039      	b.n	d690 <mqtt_callback+0x284>
					else if (strncmp("off", data->recv_publish.msg, data->recv_publish.msg_size) == 0) {
    d61c:	687b      	ldr	r3, [r7, #4]
    d61e:	6899      	ldr	r1, [r3, #8]
    d620:	687b      	ldr	r3, [r7, #4]
    d622:	68db      	ldr	r3, [r3, #12]
    d624:	001a      	movs	r2, r3
    d626:	4b3e      	ldr	r3, [pc, #248]	; (d720 <mqtt_callback+0x314>)
    d628:	0018      	movs	r0, r3
    d62a:	4b36      	ldr	r3, [pc, #216]	; (d704 <mqtt_callback+0x2f8>)
    d62c:	4798      	blx	r3
    d62e:	1e03      	subs	r3, r0, #0
    d630:	d12e      	bne.n	d690 <mqtt_callback+0x284>
						relay2_disable();
    d632:	4b42      	ldr	r3, [pc, #264]	; (d73c <mqtt_callback+0x330>)
    d634:	4798      	blx	r3
    d636:	e02b      	b.n	d690 <mqtt_callback+0x284>
			else if (strncmp(data->recv_publish.topic, UPGRADE_TOPIC, strlen(UPGRADE_TOPIC)) == 0)
    d638:	687b      	ldr	r3, [r7, #4]
    d63a:	681b      	ldr	r3, [r3, #0]
    d63c:	4940      	ldr	r1, [pc, #256]	; (d740 <mqtt_callback+0x334>)
    d63e:	2215      	movs	r2, #21
    d640:	0018      	movs	r0, r3
    d642:	4b30      	ldr	r3, [pc, #192]	; (d704 <mqtt_callback+0x2f8>)
    d644:	4798      	blx	r3
    d646:	1e03      	subs	r3, r0, #0
    d648:	d109      	bne.n	d65e <mqtt_callback+0x252>
					printf("%s >> ", UPGRADE_TOPIC);
    d64a:	4a3d      	ldr	r2, [pc, #244]	; (d740 <mqtt_callback+0x334>)
    d64c:	4b2e      	ldr	r3, [pc, #184]	; (d708 <mqtt_callback+0x2fc>)
    d64e:	0011      	movs	r1, r2
    d650:	0018      	movs	r0, r3
    d652:	4b1f      	ldr	r3, [pc, #124]	; (d6d0 <mqtt_callback+0x2c4>)
    d654:	4798      	blx	r3
					mqttfirmware_download = 1;
    d656:	4b3b      	ldr	r3, [pc, #236]	; (d744 <mqtt_callback+0x338>)
    d658:	2201      	movs	r2, #1
    d65a:	701a      	strb	r2, [r3, #0]
    d65c:	e018      	b.n	d690 <mqtt_callback+0x284>
				printf("Unknown topic: %s", data->recv_publish.topic);
    d65e:	687b      	ldr	r3, [r7, #4]
    d660:	681a      	ldr	r2, [r3, #0]
    d662:	4b39      	ldr	r3, [pc, #228]	; (d748 <mqtt_callback+0x33c>)
    d664:	0011      	movs	r1, r2
    d666:	0018      	movs	r0, r3
    d668:	4b19      	ldr	r3, [pc, #100]	; (d6d0 <mqtt_callback+0x2c4>)
    d66a:	4798      	blx	r3
			for (uint8_t i; i < data->recv_publish.msg_size; i++)
    d66c:	e010      	b.n	d690 <mqtt_callback+0x284>
				printf("%c", data->recv_publish.msg[i]);
    d66e:	687b      	ldr	r3, [r7, #4]
    d670:	689a      	ldr	r2, [r3, #8]
    d672:	2317      	movs	r3, #23
    d674:	18fb      	adds	r3, r7, r3
    d676:	781b      	ldrb	r3, [r3, #0]
    d678:	18d3      	adds	r3, r2, r3
    d67a:	781b      	ldrb	r3, [r3, #0]
    d67c:	0018      	movs	r0, r3
    d67e:	4b33      	ldr	r3, [pc, #204]	; (d74c <mqtt_callback+0x340>)
    d680:	4798      	blx	r3
			for (uint8_t i; i < data->recv_publish.msg_size; i++)
    d682:	2317      	movs	r3, #23
    d684:	18fb      	adds	r3, r7, r3
    d686:	781a      	ldrb	r2, [r3, #0]
    d688:	2317      	movs	r3, #23
    d68a:	18fb      	adds	r3, r7, r3
    d68c:	3201      	adds	r2, #1
    d68e:	701a      	strb	r2, [r3, #0]
    d690:	2317      	movs	r3, #23
    d692:	18fb      	adds	r3, r7, r3
    d694:	781a      	ldrb	r2, [r3, #0]
    d696:	687b      	ldr	r3, [r7, #4]
    d698:	68db      	ldr	r3, [r3, #12]
    d69a:	429a      	cmp	r2, r3
    d69c:	dbe7      	blt.n	d66e <mqtt_callback+0x262>
			printf("\r\n");
    d69e:	4b2c      	ldr	r3, [pc, #176]	; (d750 <mqtt_callback+0x344>)
    d6a0:	0018      	movs	r0, r3
    d6a2:	4b15      	ldr	r3, [pc, #84]	; (d6f8 <mqtt_callback+0x2ec>)
    d6a4:	4798      	blx	r3
		break;
    d6a6:	e004      	b.n	d6b2 <mqtt_callback+0x2a6>
		printf("MQTT disconnected\r\n");
    d6a8:	4b2a      	ldr	r3, [pc, #168]	; (d754 <mqtt_callback+0x348>)
    d6aa:	0018      	movs	r0, r3
    d6ac:	4b12      	ldr	r3, [pc, #72]	; (d6f8 <mqtt_callback+0x2ec>)
    d6ae:	4798      	blx	r3
		break;
    d6b0:	e000      	b.n	d6b4 <mqtt_callback+0x2a8>
		break;
    d6b2:	46c0      	nop			; (mov r8, r8)
}
    d6b4:	46c0      	nop			; (mov r8, r8)
    d6b6:	46bd      	mov	sp, r7
    d6b8:	b007      	add	sp, #28
    d6ba:	bd90      	pop	{r4, r7, pc}
    d6bc:	0001a874 	.word	0x0001a874
    d6c0:	000127f5 	.word	0x000127f5
    d6c4:	20000260 	.word	0x20000260
    d6c8:	0001a808 	.word	0x0001a808
    d6cc:	0001a880 	.word	0x0001a880
    d6d0:	00013e4d 	.word	0x00013e4d
    d6d4:	000126e1 	.word	0x000126e1
    d6d8:	0001a8b8 	.word	0x0001a8b8
    d6dc:	00012c4d 	.word	0x00012c4d
    d6e0:	0001a8cc 	.word	0x0001a8cc
    d6e4:	0001a8e4 	.word	0x0001a8e4
    d6e8:	0001a8fc 	.word	0x0001a8fc
    d6ec:	0001a910 	.word	0x0001a910
    d6f0:	0001a928 	.word	0x0001a928
    d6f4:	0001a940 	.word	0x0001a940
    d6f8:	00013f69 	.word	0x00013f69
    d6fc:	0001a96c 	.word	0x0001a96c
    d700:	0001a9a0 	.word	0x0001a9a0
    d704:	000141bd 	.word	0x000141bd
    d708:	0001a9b4 	.word	0x0001a9b4
    d70c:	00002710 	.word	0x00002710
    d710:	00012189 	.word	0x00012189
    d714:	0001a9bc 	.word	0x0001a9bc
    d718:	0001a9d4 	.word	0x0001a9d4
    d71c:	000120c9 	.word	0x000120c9
    d720:	0001a9d8 	.word	0x0001a9d8
    d724:	000120e9 	.word	0x000120e9
    d728:	0001a9dc 	.word	0x0001a9dc
    d72c:	00012089 	.word	0x00012089
    d730:	000120a9 	.word	0x000120a9
    d734:	0001a9f0 	.word	0x0001a9f0
    d738:	00012109 	.word	0x00012109
    d73c:	00012129 	.word	0x00012129
    d740:	0001aa08 	.word	0x0001aa08
    d744:	2000080c 	.word	0x2000080c
    d748:	0001aa20 	.word	0x0001aa20
    d74c:	00013e81 	.word	0x00013e81
    d750:	0001aa34 	.word	0x0001aa34
    d754:	0001aa38 	.word	0x0001aa38

0000d758 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
    d758:	b580      	push	{r7, lr}
    d75a:	b082      	sub	sp, #8
    d75c:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
    d75e:	1d3b      	adds	r3, r7, #4
    d760:	0018      	movs	r0, r3
    d762:	4b0a      	ldr	r3, [pc, #40]	; (d78c <configure_timer+0x34>)
    d764:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    d766:	1d3a      	adds	r2, r7, #4
    d768:	4b09      	ldr	r3, [pc, #36]	; (d790 <configure_timer+0x38>)
    d76a:	0011      	movs	r1, r2
    d76c:	0018      	movs	r0, r3
    d76e:	4b09      	ldr	r3, [pc, #36]	; (d794 <configure_timer+0x3c>)
    d770:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    d772:	4b07      	ldr	r3, [pc, #28]	; (d790 <configure_timer+0x38>)
    d774:	0018      	movs	r0, r3
    d776:	4b08      	ldr	r3, [pc, #32]	; (d798 <configure_timer+0x40>)
    d778:	4798      	blx	r3
	printf("Timer enabled.\r\n");
    d77a:	4b08      	ldr	r3, [pc, #32]	; (d79c <configure_timer+0x44>)
    d77c:	0018      	movs	r0, r3
    d77e:	4b08      	ldr	r3, [pc, #32]	; (d7a0 <configure_timer+0x48>)
    d780:	4798      	blx	r3
}
    d782:	46c0      	nop			; (mov r8, r8)
    d784:	46bd      	mov	sp, r7
    d786:	b002      	add	sp, #8
    d788:	bd80      	pop	{r7, pc}
    d78a:	46c0      	nop			; (mov r8, r8)
    d78c:	0000cf9d 	.word	0x0000cf9d
    d790:	20000328 	.word	0x20000328
    d794:	0000cfc1 	.word	0x0000cfc1
    d798:	0000d0ad 	.word	0x0000d0ad
    d79c:	0001aa4c 	.word	0x0001aa4c
    d7a0:	00013f69 	.word	0x00013f69

0000d7a4 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
void configure_mqtt(void)
{
    d7a4:	b580      	push	{r7, lr}
    d7a6:	b088      	sub	sp, #32
    d7a8:	af00      	add	r7, sp, #0
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
    d7aa:	003b      	movs	r3, r7
    d7ac:	0018      	movs	r0, r3
    d7ae:	4b1b      	ldr	r3, [pc, #108]	; (d81c <configure_mqtt+0x78>)
    d7b0:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_inst;
    d7b2:	003b      	movs	r3, r7
    d7b4:	4a1a      	ldr	r2, [pc, #104]	; (d820 <configure_mqtt+0x7c>)
    d7b6:	605a      	str	r2, [r3, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
    d7b8:	003b      	movs	r3, r7
    d7ba:	4a1a      	ldr	r2, [pc, #104]	; (d824 <configure_mqtt+0x80>)
    d7bc:	60da      	str	r2, [r3, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    d7be:	003b      	movs	r3, r7
    d7c0:	2280      	movs	r2, #128	; 0x80
    d7c2:	611a      	str	r2, [r3, #16]
	mqtt_conf.port = CLOUD_PORT;
    d7c4:	003b      	movs	r3, r7
    d7c6:	4a18      	ldr	r2, [pc, #96]	; (d828 <configure_mqtt+0x84>)
    d7c8:	801a      	strh	r2, [r3, #0]
	//cloudmqtt port 11353

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    d7ca:	003a      	movs	r2, r7
    d7cc:	4b17      	ldr	r3, [pc, #92]	; (d82c <configure_mqtt+0x88>)
    d7ce:	0011      	movs	r1, r2
    d7d0:	0018      	movs	r0, r3
    d7d2:	4b17      	ldr	r3, [pc, #92]	; (d830 <configure_mqtt+0x8c>)
    d7d4:	4798      	blx	r3
    d7d6:	0003      	movs	r3, r0
    d7d8:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    d7da:	69fb      	ldr	r3, [r7, #28]
    d7dc:	2b00      	cmp	r3, #0
    d7de:	da06      	bge.n	d7ee <configure_mqtt+0x4a>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    d7e0:	69fa      	ldr	r2, [r7, #28]
    d7e2:	4b14      	ldr	r3, [pc, #80]	; (d834 <configure_mqtt+0x90>)
    d7e4:	0011      	movs	r1, r2
    d7e6:	0018      	movs	r0, r3
    d7e8:	4b13      	ldr	r3, [pc, #76]	; (d838 <configure_mqtt+0x94>)
    d7ea:	4798      	blx	r3
		while (1) {
    d7ec:	e7fe      	b.n	d7ec <configure_mqtt+0x48>
		}
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    d7ee:	4a13      	ldr	r2, [pc, #76]	; (d83c <configure_mqtt+0x98>)
    d7f0:	4b0e      	ldr	r3, [pc, #56]	; (d82c <configure_mqtt+0x88>)
    d7f2:	0011      	movs	r1, r2
    d7f4:	0018      	movs	r0, r3
    d7f6:	4b12      	ldr	r3, [pc, #72]	; (d840 <configure_mqtt+0x9c>)
    d7f8:	4798      	blx	r3
    d7fa:	0003      	movs	r3, r0
    d7fc:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    d7fe:	69fb      	ldr	r3, [r7, #28]
    d800:	2b00      	cmp	r3, #0
    d802:	da06      	bge.n	d812 <configure_mqtt+0x6e>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    d804:	69fa      	ldr	r2, [r7, #28]
    d806:	4b0f      	ldr	r3, [pc, #60]	; (d844 <configure_mqtt+0xa0>)
    d808:	0011      	movs	r1, r2
    d80a:	0018      	movs	r0, r3
    d80c:	4b0a      	ldr	r3, [pc, #40]	; (d838 <configure_mqtt+0x94>)
    d80e:	4798      	blx	r3
		while (1) {
    d810:	e7fe      	b.n	d810 <configure_mqtt+0x6c>
		}
	}
}
    d812:	46c0      	nop			; (mov r8, r8)
    d814:	46bd      	mov	sp, r7
    d816:	b008      	add	sp, #32
    d818:	bd80      	pop	{r7, pc}
    d81a:	46c0      	nop			; (mov r8, r8)
    d81c:	00012575 	.word	0x00012575
    d820:	20000328 	.word	0x20000328
    d824:	2000072c 	.word	0x2000072c
    d828:	0000075b 	.word	0x0000075b
    d82c:	20000878 	.word	0x20000878
    d830:	00012599 	.word	0x00012599
    d834:	0001aa5c 	.word	0x0001aa5c
    d838:	00013e4d 	.word	0x00013e4d
    d83c:	0000d40d 	.word	0x0000d40d
    d840:	00012669 	.word	0x00012669
    d844:	0001aa90 	.word	0x0001aa90

0000d848 <deconfigure_mqtt>:

void deconfigure_mqtt()
{
    d848:	b580      	push	{r7, lr}
    d84a:	b082      	sub	sp, #8
    d84c:	af00      	add	r7, sp, #0
	uint8_t result;
	result = mqtt_deinit(&mqtt_inst);
    d84e:	4b0c      	ldr	r3, [pc, #48]	; (d880 <deconfigure_mqtt+0x38>)
    d850:	0018      	movs	r0, r3
    d852:	4b0c      	ldr	r3, [pc, #48]	; (d884 <deconfigure_mqtt+0x3c>)
    d854:	4798      	blx	r3
    d856:	0002      	movs	r2, r0
    d858:	1dfb      	adds	r3, r7, #7
    d85a:	701a      	strb	r2, [r3, #0]
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
		while (1) {
		}
	}

	result = mqtt_unregister_callback(&mqtt_inst);
    d85c:	4b08      	ldr	r3, [pc, #32]	; (d880 <deconfigure_mqtt+0x38>)
    d85e:	0018      	movs	r0, r3
    d860:	4b09      	ldr	r3, [pc, #36]	; (d888 <deconfigure_mqtt+0x40>)
    d862:	4798      	blx	r3
    d864:	0002      	movs	r2, r0
    d866:	1dfb      	adds	r3, r7, #7
    d868:	701a      	strb	r2, [r3, #0]
	if (result < 0) {
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
		while (1) {
		}
	}
	mqtt_disconnect(&mqtt_inst, 1);
    d86a:	4b05      	ldr	r3, [pc, #20]	; (d880 <deconfigure_mqtt+0x38>)
    d86c:	2101      	movs	r1, #1
    d86e:	0018      	movs	r0, r3
    d870:	4b06      	ldr	r3, [pc, #24]	; (d88c <deconfigure_mqtt+0x44>)
    d872:	4798      	blx	r3
	socketDeinit();
    d874:	4b06      	ldr	r3, [pc, #24]	; (d890 <deconfigure_mqtt+0x48>)
    d876:	4798      	blx	r3
	
}
    d878:	46c0      	nop			; (mov r8, r8)
    d87a:	46bd      	mov	sp, r7
    d87c:	b002      	add	sp, #8
    d87e:	bd80      	pop	{r7, pc}
    d880:	20000878 	.word	0x20000878
    d884:	00012625 	.word	0x00012625
    d888:	00012679 	.word	0x00012679
    d88c:	00012eed 	.word	0x00012eed
    d890:	00008325 	.word	0x00008325

0000d894 <wifi_init>:
/**
 * \brief Initialize the WiFi
 */
int wifi_init(void) 
{
    d894:	b590      	push	{r4, r7, lr}
    d896:	b089      	sub	sp, #36	; 0x24
    d898:	af00      	add	r7, sp, #0
	tstrWifiInitParam param;
	int8_t ret;

	/* Initialize the Timer. */
	configure_timer();
    d89a:	4b25      	ldr	r3, [pc, #148]	; (d930 <wifi_init+0x9c>)
    d89c:	4798      	blx	r3

	/* Initialize the MQTT service. */
	configure_mqtt();
    d89e:	4b25      	ldr	r3, [pc, #148]	; (d934 <wifi_init+0xa0>)
    d8a0:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    d8a2:	4b25      	ldr	r3, [pc, #148]	; (d938 <wifi_init+0xa4>)
    d8a4:	4798      	blx	r3
	
	printf("MQTT Configured.\r\n");
    d8a6:	4b25      	ldr	r3, [pc, #148]	; (d93c <wifi_init+0xa8>)
    d8a8:	0018      	movs	r0, r3
    d8aa:	4b25      	ldr	r3, [pc, #148]	; (d940 <wifi_init+0xac>)
    d8ac:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    d8ae:	1d3b      	adds	r3, r7, #4
    d8b0:	2218      	movs	r2, #24
    d8b2:	2100      	movs	r1, #0
    d8b4:	0018      	movs	r0, r3
    d8b6:	4b23      	ldr	r3, [pc, #140]	; (d944 <wifi_init+0xb0>)
    d8b8:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    d8ba:	1d3b      	adds	r3, r7, #4
    d8bc:	4a22      	ldr	r2, [pc, #136]	; (d948 <wifi_init+0xb4>)
    d8be:	601a      	str	r2, [r3, #0]
	printf("Initializing...\r\n");
    d8c0:	4b22      	ldr	r3, [pc, #136]	; (d94c <wifi_init+0xb8>)
    d8c2:	0018      	movs	r0, r3
    d8c4:	4b1e      	ldr	r3, [pc, #120]	; (d940 <wifi_init+0xac>)
    d8c6:	4798      	blx	r3
	ret = m2m_wifi_init(&param);
    d8c8:	231f      	movs	r3, #31
    d8ca:	18fc      	adds	r4, r7, r3
    d8cc:	1d3b      	adds	r3, r7, #4
    d8ce:	0018      	movs	r0, r3
    d8d0:	4b1f      	ldr	r3, [pc, #124]	; (d950 <wifi_init+0xbc>)
    d8d2:	4798      	blx	r3
    d8d4:	0003      	movs	r3, r0
    d8d6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    d8d8:	231f      	movs	r3, #31
    d8da:	18fb      	adds	r3, r7, r3
    d8dc:	781b      	ldrb	r3, [r3, #0]
    d8de:	b25b      	sxtb	r3, r3
    d8e0:	2b00      	cmp	r3, #0
    d8e2:	d00a      	beq.n	d8fa <wifi_init+0x66>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    d8e4:	231f      	movs	r3, #31
    d8e6:	18fb      	adds	r3, r7, r3
    d8e8:	2200      	movs	r2, #0
    d8ea:	569a      	ldrsb	r2, [r3, r2]
    d8ec:	4b19      	ldr	r3, [pc, #100]	; (d954 <wifi_init+0xc0>)
    d8ee:	0011      	movs	r1, r2
    d8f0:	0018      	movs	r0, r3
    d8f2:	4b19      	ldr	r3, [pc, #100]	; (d958 <wifi_init+0xc4>)
    d8f4:	4798      	blx	r3
		return 1;
    d8f6:	2301      	movs	r3, #1
    d8f8:	e015      	b.n	d926 <wifi_init+0x92>
	} 
		printf("main: m2m_wifi_init call success!(%d)\r\n", ret);
    d8fa:	231f      	movs	r3, #31
    d8fc:	18fb      	adds	r3, r7, r3
    d8fe:	2200      	movs	r2, #0
    d900:	569a      	ldrsb	r2, [r3, r2]
    d902:	4b16      	ldr	r3, [pc, #88]	; (d95c <wifi_init+0xc8>)
    d904:	0011      	movs	r1, r2
    d906:	0018      	movs	r0, r3
    d908:	4b13      	ldr	r3, [pc, #76]	; (d958 <wifi_init+0xc4>)
    d90a:	4798      	blx	r3
	
	/* Initialize socket interface. */
	socketInit();
    d90c:	4b14      	ldr	r3, [pc, #80]	; (d960 <wifi_init+0xcc>)
    d90e:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    d910:	4a14      	ldr	r2, [pc, #80]	; (d964 <wifi_init+0xd0>)
    d912:	4b15      	ldr	r3, [pc, #84]	; (d968 <wifi_init+0xd4>)
    d914:	0011      	movs	r1, r2
    d916:	0018      	movs	r0, r3
    d918:	4b14      	ldr	r3, [pc, #80]	; (d96c <wifi_init+0xd8>)
    d91a:	4798      	blx	r3
	printf("Sockets initialized.\r\n");
    d91c:	4b14      	ldr	r3, [pc, #80]	; (d970 <wifi_init+0xdc>)
    d91e:	0018      	movs	r0, r3
    d920:	4b07      	ldr	r3, [pc, #28]	; (d940 <wifi_init+0xac>)
    d922:	4798      	blx	r3
	
	return 0;
    d924:	2300      	movs	r3, #0
}
    d926:	0018      	movs	r0, r3
    d928:	46bd      	mov	sp, r7
    d92a:	b009      	add	sp, #36	; 0x24
    d92c:	bd90      	pop	{r4, r7, pc}
    d92e:	46c0      	nop			; (mov r8, r8)
    d930:	0000d759 	.word	0x0000d759
    d934:	0000d7a5 	.word	0x0000d7a5
    d938:	00003565 	.word	0x00003565
    d93c:	0001aac4 	.word	0x0001aac4
    d940:	00013f69 	.word	0x00013f69
    d944:	0001340b 	.word	0x0001340b
    d948:	0000d2d1 	.word	0x0000d2d1
    d94c:	0001aad8 	.word	0x0001aad8
    d950:	000050a9 	.word	0x000050a9
    d954:	0001aaec 	.word	0x0001aaec
    d958:	00013e4d 	.word	0x00013e4d
    d95c:	0001ab14 	.word	0x0001ab14
    d960:	000082d5 	.word	0x000082d5
    d964:	0000d3e9 	.word	0x0000d3e9
    d968:	0000d3b5 	.word	0x0000d3b5
    d96c:	0000836d 	.word	0x0000836d
    d970:	0001ab3c 	.word	0x0001ab3c

0000d974 <publish_sensor_values>:

void publish_sensor_values(void) {
    d974:	b590      	push	{r4, r7, lr}
    d976:	b099      	sub	sp, #100	; 0x64
    d978:	af02      	add	r7, sp, #8
	
		uint8_t mqtt_send_buffer[MQTT_SEND_BUFFER_SIZE];
		printf("Publishing version to %s\r\n", VERSION_TOPIC);
    d97a:	4a6b      	ldr	r2, [pc, #428]	; (db28 <publish_sensor_values+0x1b4>)
    d97c:	4b6b      	ldr	r3, [pc, #428]	; (db2c <publish_sensor_values+0x1b8>)
    d97e:	0011      	movs	r1, r2
    d980:	0018      	movs	r0, r3
    d982:	4b6b      	ldr	r3, [pc, #428]	; (db30 <publish_sensor_values+0x1bc>)
    d984:	4798      	blx	r3
		//version
		memset(mqtt_send_buffer, 0, sizeof(mqtt_send_buffer));
    d986:	003b      	movs	r3, r7
    d988:	2240      	movs	r2, #64	; 0x40
    d98a:	2100      	movs	r1, #0
    d98c:	0018      	movs	r0, r3
    d98e:	4b69      	ldr	r3, [pc, #420]	; (db34 <publish_sensor_values+0x1c0>)
    d990:	4798      	blx	r3
		sprintf(mqtt_send_buffer, "%s", APP_VERSION); //set to current firmware
    d992:	003b      	movs	r3, r7
    d994:	4a68      	ldr	r2, [pc, #416]	; (db38 <publish_sensor_values+0x1c4>)
    d996:	6811      	ldr	r1, [r2, #0]
    d998:	6019      	str	r1, [r3, #0]
    d99a:	8892      	ldrh	r2, [r2, #4]
    d99c:	809a      	strh	r2, [r3, #4]
		mqtt_publish(&mqtt_inst, VERSION_TOPIC, mqtt_send_buffer, strlen(mqtt_send_buffer), 0, 0);
    d99e:	003b      	movs	r3, r7
    d9a0:	0018      	movs	r0, r3
    d9a2:	4b66      	ldr	r3, [pc, #408]	; (db3c <publish_sensor_values+0x1c8>)
    d9a4:	4798      	blx	r3
    d9a6:	0004      	movs	r4, r0
    d9a8:	003a      	movs	r2, r7
    d9aa:	495f      	ldr	r1, [pc, #380]	; (db28 <publish_sensor_values+0x1b4>)
    d9ac:	4864      	ldr	r0, [pc, #400]	; (db40 <publish_sensor_values+0x1cc>)
    d9ae:	2300      	movs	r3, #0
    d9b0:	9301      	str	r3, [sp, #4]
    d9b2:	2300      	movs	r3, #0
    d9b4:	9300      	str	r3, [sp, #0]
    d9b6:	0023      	movs	r3, r4
    d9b8:	4c62      	ldr	r4, [pc, #392]	; (db44 <publish_sensor_values+0x1d0>)
    d9ba:	47a0      	blx	r4
		
		
		//temp
		set_resolution(FOURTEEN_BIT_RESOLUTION,FOURTEEN_BIT_RESOLUTION);
    d9bc:	2102      	movs	r1, #2
    d9be:	2002      	movs	r0, #2
    d9c0:	4b61      	ldr	r3, [pc, #388]	; (db48 <publish_sensor_values+0x1d4>)
    d9c2:	4798      	blx	r3
		double temperature = get_temp();
    d9c4:	4b61      	ldr	r3, [pc, #388]	; (db4c <publish_sensor_values+0x1d8>)
    d9c6:	4798      	blx	r3
    d9c8:	0003      	movs	r3, r0
    d9ca:	000c      	movs	r4, r1
    d9cc:	653b      	str	r3, [r7, #80]	; 0x50
    d9ce:	657c      	str	r4, [r7, #84]	; 0x54
		double humidity = get_humidity();
    d9d0:	4b5f      	ldr	r3, [pc, #380]	; (db50 <publish_sensor_values+0x1dc>)
    d9d2:	4798      	blx	r3
    d9d4:	0003      	movs	r3, r0
    d9d6:	000c      	movs	r4, r1
    d9d8:	64bb      	str	r3, [r7, #72]	; 0x48
    d9da:	64fc      	str	r4, [r7, #76]	; 0x4c
		
		printf("Temperature: %.02f\r\n", temperature);
    d9dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    d9de:	6d7c      	ldr	r4, [r7, #84]	; 0x54
    d9e0:	495c      	ldr	r1, [pc, #368]	; (db54 <publish_sensor_values+0x1e0>)
    d9e2:	001a      	movs	r2, r3
    d9e4:	0023      	movs	r3, r4
    d9e6:	0008      	movs	r0, r1
    d9e8:	4951      	ldr	r1, [pc, #324]	; (db30 <publish_sensor_values+0x1bc>)
    d9ea:	4788      	blx	r1
		printf("Humidity: %.02f\r\n", humidity);
    d9ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d9ee:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    d9f0:	4959      	ldr	r1, [pc, #356]	; (db58 <publish_sensor_values+0x1e4>)
    d9f2:	001a      	movs	r2, r3
    d9f4:	0023      	movs	r3, r4
    d9f6:	0008      	movs	r0, r1
    d9f8:	494d      	ldr	r1, [pc, #308]	; (db30 <publish_sensor_values+0x1bc>)
    d9fa:	4788      	blx	r1

		
		memset(mqtt_send_buffer, 0, sizeof(mqtt_send_buffer));
    d9fc:	003b      	movs	r3, r7
    d9fe:	2240      	movs	r2, #64	; 0x40
    da00:	2100      	movs	r1, #0
    da02:	0018      	movs	r0, r3
    da04:	4b4b      	ldr	r3, [pc, #300]	; (db34 <publish_sensor_values+0x1c0>)
    da06:	4798      	blx	r3
		sprintf(mqtt_send_buffer, "%.02f", temperature);
    da08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    da0a:	6d7c      	ldr	r4, [r7, #84]	; 0x54
    da0c:	4953      	ldr	r1, [pc, #332]	; (db5c <publish_sensor_values+0x1e8>)
    da0e:	0038      	movs	r0, r7
    da10:	001a      	movs	r2, r3
    da12:	0023      	movs	r3, r4
    da14:	4c52      	ldr	r4, [pc, #328]	; (db60 <publish_sensor_values+0x1ec>)
    da16:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_send_buffer, strlen(mqtt_send_buffer), 0, 0);
    da18:	003b      	movs	r3, r7
    da1a:	0018      	movs	r0, r3
    da1c:	4b47      	ldr	r3, [pc, #284]	; (db3c <publish_sensor_values+0x1c8>)
    da1e:	4798      	blx	r3
    da20:	0004      	movs	r4, r0
    da22:	003a      	movs	r2, r7
    da24:	494f      	ldr	r1, [pc, #316]	; (db64 <publish_sensor_values+0x1f0>)
    da26:	4846      	ldr	r0, [pc, #280]	; (db40 <publish_sensor_values+0x1cc>)
    da28:	2300      	movs	r3, #0
    da2a:	9301      	str	r3, [sp, #4]
    da2c:	2300      	movs	r3, #0
    da2e:	9300      	str	r3, [sp, #0]
    da30:	0023      	movs	r3, r4
    da32:	4c44      	ldr	r4, [pc, #272]	; (db44 <publish_sensor_values+0x1d0>)
    da34:	47a0      	blx	r4
		
		//humidity
		memset(mqtt_send_buffer, 0, sizeof(mqtt_send_buffer));
    da36:	003b      	movs	r3, r7
    da38:	2240      	movs	r2, #64	; 0x40
    da3a:	2100      	movs	r1, #0
    da3c:	0018      	movs	r0, r3
    da3e:	4b3d      	ldr	r3, [pc, #244]	; (db34 <publish_sensor_values+0x1c0>)
    da40:	4798      	blx	r3
		sprintf(mqtt_send_buffer, "%.02f", humidity);
    da42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    da44:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    da46:	4945      	ldr	r1, [pc, #276]	; (db5c <publish_sensor_values+0x1e8>)
    da48:	0038      	movs	r0, r7
    da4a:	001a      	movs	r2, r3
    da4c:	0023      	movs	r3, r4
    da4e:	4c44      	ldr	r4, [pc, #272]	; (db60 <publish_sensor_values+0x1ec>)
    da50:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, HUMIDITY_TOPIC, mqtt_send_buffer, strlen(mqtt_send_buffer), 0, 0);
    da52:	003b      	movs	r3, r7
    da54:	0018      	movs	r0, r3
    da56:	4b39      	ldr	r3, [pc, #228]	; (db3c <publish_sensor_values+0x1c8>)
    da58:	4798      	blx	r3
    da5a:	0004      	movs	r4, r0
    da5c:	003a      	movs	r2, r7
    da5e:	4942      	ldr	r1, [pc, #264]	; (db68 <publish_sensor_values+0x1f4>)
    da60:	4837      	ldr	r0, [pc, #220]	; (db40 <publish_sensor_values+0x1cc>)
    da62:	2300      	movs	r3, #0
    da64:	9301      	str	r3, [sp, #4]
    da66:	2300      	movs	r3, #0
    da68:	9300      	str	r3, [sp, #0]
    da6a:	0023      	movs	r3, r4
    da6c:	4c35      	ldr	r4, [pc, #212]	; (db44 <publish_sensor_values+0x1d0>)
    da6e:	47a0      	blx	r4
		
		
		//lux
		
		power_on_tsl2561();
    da70:	4b3e      	ldr	r3, [pc, #248]	; (db6c <publish_sensor_values+0x1f8>)
    da72:	4798      	blx	r3
		uint32_t lux_value = get_lux();
    da74:	4b3e      	ldr	r3, [pc, #248]	; (db70 <publish_sensor_values+0x1fc>)
    da76:	4798      	blx	r3
    da78:	0003      	movs	r3, r0
    da7a:	647b      	str	r3, [r7, #68]	; 0x44
		power_off_tsl2561();
    da7c:	4b3d      	ldr	r3, [pc, #244]	; (db74 <publish_sensor_values+0x200>)
    da7e:	4798      	blx	r3
		
		printf("Lux: %d\r\n", lux_value);
    da80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    da82:	4b3d      	ldr	r3, [pc, #244]	; (db78 <publish_sensor_values+0x204>)
    da84:	0011      	movs	r1, r2
    da86:	0018      	movs	r0, r3
    da88:	4b29      	ldr	r3, [pc, #164]	; (db30 <publish_sensor_values+0x1bc>)
    da8a:	4798      	blx	r3
		
		
		memset(mqtt_send_buffer, 0, sizeof(mqtt_send_buffer));
    da8c:	003b      	movs	r3, r7
    da8e:	2240      	movs	r2, #64	; 0x40
    da90:	2100      	movs	r1, #0
    da92:	0018      	movs	r0, r3
    da94:	4b27      	ldr	r3, [pc, #156]	; (db34 <publish_sensor_values+0x1c0>)
    da96:	4798      	blx	r3
		sprintf(mqtt_send_buffer, "%d", lux_value);
    da98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    da9a:	4938      	ldr	r1, [pc, #224]	; (db7c <publish_sensor_values+0x208>)
    da9c:	003b      	movs	r3, r7
    da9e:	0018      	movs	r0, r3
    daa0:	4b2f      	ldr	r3, [pc, #188]	; (db60 <publish_sensor_values+0x1ec>)
    daa2:	4798      	blx	r3
		mqtt_publish(&mqtt_inst, LUX_TOPIC, mqtt_send_buffer, strlen(mqtt_send_buffer), 0, 0);
    daa4:	003b      	movs	r3, r7
    daa6:	0018      	movs	r0, r3
    daa8:	4b24      	ldr	r3, [pc, #144]	; (db3c <publish_sensor_values+0x1c8>)
    daaa:	4798      	blx	r3
    daac:	0004      	movs	r4, r0
    daae:	003a      	movs	r2, r7
    dab0:	4933      	ldr	r1, [pc, #204]	; (db80 <publish_sensor_values+0x20c>)
    dab2:	4823      	ldr	r0, [pc, #140]	; (db40 <publish_sensor_values+0x1cc>)
    dab4:	2300      	movs	r3, #0
    dab6:	9301      	str	r3, [sp, #4]
    dab8:	2300      	movs	r3, #0
    daba:	9300      	str	r3, [sp, #0]
    dabc:	0023      	movs	r3, r4
    dabe:	4c21      	ldr	r4, [pc, #132]	; (db44 <publish_sensor_values+0x1d0>)
    dac0:	47a0      	blx	r4
		
		
		//moisture
		float m_value = get_moisture();
    dac2:	4b30      	ldr	r3, [pc, #192]	; (db84 <publish_sensor_values+0x210>)
    dac4:	4798      	blx	r3
    dac6:	1c03      	adds	r3, r0, #0
    dac8:	643b      	str	r3, [r7, #64]	; 0x40
		
		printf("Moisture: %.02f\r\n", m_value);
    daca:	4b2f      	ldr	r3, [pc, #188]	; (db88 <publish_sensor_values+0x214>)
    dacc:	6c38      	ldr	r0, [r7, #64]	; 0x40
    dace:	4798      	blx	r3
    dad0:	0003      	movs	r3, r0
    dad2:	000c      	movs	r4, r1
    dad4:	492d      	ldr	r1, [pc, #180]	; (db8c <publish_sensor_values+0x218>)
    dad6:	001a      	movs	r2, r3
    dad8:	0023      	movs	r3, r4
    dada:	0008      	movs	r0, r1
    dadc:	4914      	ldr	r1, [pc, #80]	; (db30 <publish_sensor_values+0x1bc>)
    dade:	4788      	blx	r1
		
		memset(mqtt_send_buffer, 0, sizeof(mqtt_send_buffer));
    dae0:	003b      	movs	r3, r7
    dae2:	2240      	movs	r2, #64	; 0x40
    dae4:	2100      	movs	r1, #0
    dae6:	0018      	movs	r0, r3
    dae8:	4b12      	ldr	r3, [pc, #72]	; (db34 <publish_sensor_values+0x1c0>)
    daea:	4798      	blx	r3
		sprintf(mqtt_send_buffer, "%.02f", m_value);
    daec:	4b26      	ldr	r3, [pc, #152]	; (db88 <publish_sensor_values+0x214>)
    daee:	6c38      	ldr	r0, [r7, #64]	; 0x40
    daf0:	4798      	blx	r3
    daf2:	0003      	movs	r3, r0
    daf4:	000c      	movs	r4, r1
    daf6:	4919      	ldr	r1, [pc, #100]	; (db5c <publish_sensor_values+0x1e8>)
    daf8:	0038      	movs	r0, r7
    dafa:	001a      	movs	r2, r3
    dafc:	0023      	movs	r3, r4
    dafe:	4c18      	ldr	r4, [pc, #96]	; (db60 <publish_sensor_values+0x1ec>)
    db00:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, MOISTURE_TOPIC, mqtt_send_buffer, strlen(mqtt_send_buffer), 0, 0);
    db02:	003b      	movs	r3, r7
    db04:	0018      	movs	r0, r3
    db06:	4b0d      	ldr	r3, [pc, #52]	; (db3c <publish_sensor_values+0x1c8>)
    db08:	4798      	blx	r3
    db0a:	0004      	movs	r4, r0
    db0c:	003a      	movs	r2, r7
    db0e:	4920      	ldr	r1, [pc, #128]	; (db90 <publish_sensor_values+0x21c>)
    db10:	480b      	ldr	r0, [pc, #44]	; (db40 <publish_sensor_values+0x1cc>)
    db12:	2300      	movs	r3, #0
    db14:	9301      	str	r3, [sp, #4]
    db16:	2300      	movs	r3, #0
    db18:	9300      	str	r3, [sp, #0]
    db1a:	0023      	movs	r3, r4
    db1c:	4c09      	ldr	r4, [pc, #36]	; (db44 <publish_sensor_values+0x1d0>)
    db1e:	47a0      	blx	r4
		
	
}
    db20:	46c0      	nop			; (mov r8, r8)
    db22:	46bd      	mov	sp, r7
    db24:	b017      	add	sp, #92	; 0x5c
    db26:	bd90      	pop	{r4, r7, pc}
    db28:	0001ab54 	.word	0x0001ab54
    db2c:	0001ab6c 	.word	0x0001ab6c
    db30:	00013e4d 	.word	0x00013e4d
    db34:	0001340b 	.word	0x0001340b
    db38:	0001ab88 	.word	0x0001ab88
    db3c:	000141af 	.word	0x000141af
    db40:	20000878 	.word	0x20000878
    db44:	00012aa5 	.word	0x00012aa5
    db48:	0000097d 	.word	0x0000097d
    db4c:	00000c51 	.word	0x00000c51
    db50:	00000be5 	.word	0x00000be5
    db54:	0001ab90 	.word	0x0001ab90
    db58:	0001aba8 	.word	0x0001aba8
    db5c:	0001abbc 	.word	0x0001abbc
    db60:	0001410d 	.word	0x0001410d
    db64:	0001abc4 	.word	0x0001abc4
    db68:	0001abd8 	.word	0x0001abd8
    db6c:	000010a9 	.word	0x000010a9
    db70:	00001151 	.word	0x00001151
    db74:	000010c9 	.word	0x000010c9
    db78:	0001abec 	.word	0x0001abec
    db7c:	0001abf8 	.word	0x0001abf8
    db80:	0001abfc 	.word	0x0001abfc
    db84:	00011ecd 	.word	0x00011ecd
    db88:	000187fd 	.word	0x000187fd
    db8c:	0001ac10 	.word	0x0001ac10
    db90:	0001ac24 	.word	0x0001ac24

0000db94 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    db94:	b580      	push	{r7, lr}
    db96:	b082      	sub	sp, #8
    db98:	af00      	add	r7, sp, #0
    db9a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    db9c:	687b      	ldr	r3, [r7, #4]
    db9e:	2b00      	cmp	r3, #0
    dba0:	d00c      	beq.n	dbbc <delay_cycles+0x28>
		SysTick->LOAD = n;
    dba2:	4b08      	ldr	r3, [pc, #32]	; (dbc4 <delay_cycles+0x30>)
    dba4:	687a      	ldr	r2, [r7, #4]
    dba6:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    dba8:	4b06      	ldr	r3, [pc, #24]	; (dbc4 <delay_cycles+0x30>)
    dbaa:	2200      	movs	r2, #0
    dbac:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    dbae:	46c0      	nop			; (mov r8, r8)
    dbb0:	4b04      	ldr	r3, [pc, #16]	; (dbc4 <delay_cycles+0x30>)
    dbb2:	681a      	ldr	r2, [r3, #0]
    dbb4:	2380      	movs	r3, #128	; 0x80
    dbb6:	025b      	lsls	r3, r3, #9
    dbb8:	4013      	ands	r3, r2
    dbba:	d0f9      	beq.n	dbb0 <delay_cycles+0x1c>
		};
	}
}
    dbbc:	46c0      	nop			; (mov r8, r8)
    dbbe:	46bd      	mov	sp, r7
    dbc0:	b002      	add	sp, #8
    dbc2:	bd80      	pop	{r7, pc}
    dbc4:	e000e010 	.word	0xe000e010

0000dbc8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    dbc8:	b580      	push	{r7, lr}
    dbca:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    dbcc:	2000      	movs	r0, #0
    dbce:	4b0f      	ldr	r3, [pc, #60]	; (dc0c <delay_init+0x44>)
    dbd0:	4798      	blx	r3
    dbd2:	0002      	movs	r2, r0
    dbd4:	4b0e      	ldr	r3, [pc, #56]	; (dc10 <delay_init+0x48>)
    dbd6:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    dbd8:	4b0d      	ldr	r3, [pc, #52]	; (dc10 <delay_init+0x48>)
    dbda:	6818      	ldr	r0, [r3, #0]
    dbdc:	4b0d      	ldr	r3, [pc, #52]	; (dc14 <delay_init+0x4c>)
    dbde:	22fa      	movs	r2, #250	; 0xfa
    dbe0:	0091      	lsls	r1, r2, #2
    dbe2:	4798      	blx	r3
    dbe4:	0003      	movs	r3, r0
    dbe6:	001a      	movs	r2, r3
    dbe8:	4b09      	ldr	r3, [pc, #36]	; (dc10 <delay_init+0x48>)
    dbea:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    dbec:	4b08      	ldr	r3, [pc, #32]	; (dc10 <delay_init+0x48>)
    dbee:	6818      	ldr	r0, [r3, #0]
    dbf0:	4b08      	ldr	r3, [pc, #32]	; (dc14 <delay_init+0x4c>)
    dbf2:	22fa      	movs	r2, #250	; 0xfa
    dbf4:	0091      	lsls	r1, r2, #2
    dbf6:	4798      	blx	r3
    dbf8:	0003      	movs	r3, r0
    dbfa:	001a      	movs	r2, r3
    dbfc:	4b06      	ldr	r3, [pc, #24]	; (dc18 <delay_init+0x50>)
    dbfe:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    dc00:	4b06      	ldr	r3, [pc, #24]	; (dc1c <delay_init+0x54>)
    dc02:	2205      	movs	r2, #5
    dc04:	601a      	str	r2, [r3, #0]
}
    dc06:	46c0      	nop			; (mov r8, r8)
    dc08:	46bd      	mov	sp, r7
    dc0a:	bd80      	pop	{r7, pc}
    dc0c:	00011609 	.word	0x00011609
    dc10:	2000000c 	.word	0x2000000c
    dc14:	00016381 	.word	0x00016381
    dc18:	20000010 	.word	0x20000010
    dc1c:	e000e010 	.word	0xe000e010

0000dc20 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    dc20:	b580      	push	{r7, lr}
    dc22:	b082      	sub	sp, #8
    dc24:	af00      	add	r7, sp, #0
    dc26:	6078      	str	r0, [r7, #4]
	while (n--) {
    dc28:	e004      	b.n	dc34 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    dc2a:	4b07      	ldr	r3, [pc, #28]	; (dc48 <delay_cycles_us+0x28>)
    dc2c:	681b      	ldr	r3, [r3, #0]
    dc2e:	0018      	movs	r0, r3
    dc30:	4b06      	ldr	r3, [pc, #24]	; (dc4c <delay_cycles_us+0x2c>)
    dc32:	4798      	blx	r3
	while (n--) {
    dc34:	687b      	ldr	r3, [r7, #4]
    dc36:	1e5a      	subs	r2, r3, #1
    dc38:	607a      	str	r2, [r7, #4]
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	d1f5      	bne.n	dc2a <delay_cycles_us+0xa>
	}
}
    dc3e:	46c0      	nop			; (mov r8, r8)
    dc40:	46bd      	mov	sp, r7
    dc42:	b002      	add	sp, #8
    dc44:	bd80      	pop	{r7, pc}
    dc46:	46c0      	nop			; (mov r8, r8)
    dc48:	20000010 	.word	0x20000010
    dc4c:	0000db95 	.word	0x0000db95

0000dc50 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    dc50:	b580      	push	{r7, lr}
    dc52:	b082      	sub	sp, #8
    dc54:	af00      	add	r7, sp, #0
    dc56:	6078      	str	r0, [r7, #4]
	while (n--) {
    dc58:	e004      	b.n	dc64 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    dc5a:	4b07      	ldr	r3, [pc, #28]	; (dc78 <delay_cycles_ms+0x28>)
    dc5c:	681b      	ldr	r3, [r3, #0]
    dc5e:	0018      	movs	r0, r3
    dc60:	4b06      	ldr	r3, [pc, #24]	; (dc7c <delay_cycles_ms+0x2c>)
    dc62:	4798      	blx	r3
	while (n--) {
    dc64:	687b      	ldr	r3, [r7, #4]
    dc66:	1e5a      	subs	r2, r3, #1
    dc68:	607a      	str	r2, [r7, #4]
    dc6a:	2b00      	cmp	r3, #0
    dc6c:	d1f5      	bne.n	dc5a <delay_cycles_ms+0xa>
	}
}
    dc6e:	46c0      	nop			; (mov r8, r8)
    dc70:	46bd      	mov	sp, r7
    dc72:	b002      	add	sp, #8
    dc74:	bd80      	pop	{r7, pc}
    dc76:	46c0      	nop			; (mov r8, r8)
    dc78:	2000000c 	.word	0x2000000c
    dc7c:	0000db95 	.word	0x0000db95

0000dc80 <system_gclk_chan_get_config_defaults>:
{
    dc80:	b580      	push	{r7, lr}
    dc82:	b082      	sub	sp, #8
    dc84:	af00      	add	r7, sp, #0
    dc86:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    dc88:	687b      	ldr	r3, [r7, #4]
    dc8a:	2200      	movs	r2, #0
    dc8c:	701a      	strb	r2, [r3, #0]
}
    dc8e:	46c0      	nop			; (mov r8, r8)
    dc90:	46bd      	mov	sp, r7
    dc92:	b002      	add	sp, #8
    dc94:	bd80      	pop	{r7, pc}
	...

0000dc98 <system_apb_clock_set_mask>:
{
    dc98:	b580      	push	{r7, lr}
    dc9a:	b082      	sub	sp, #8
    dc9c:	af00      	add	r7, sp, #0
    dc9e:	0002      	movs	r2, r0
    dca0:	6039      	str	r1, [r7, #0]
    dca2:	1dfb      	adds	r3, r7, #7
    dca4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    dca6:	1dfb      	adds	r3, r7, #7
    dca8:	781b      	ldrb	r3, [r3, #0]
    dcaa:	2b01      	cmp	r3, #1
    dcac:	d00a      	beq.n	dcc4 <system_apb_clock_set_mask+0x2c>
    dcae:	2b02      	cmp	r3, #2
    dcb0:	d00f      	beq.n	dcd2 <system_apb_clock_set_mask+0x3a>
    dcb2:	2b00      	cmp	r3, #0
    dcb4:	d114      	bne.n	dce0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    dcb6:	4b0e      	ldr	r3, [pc, #56]	; (dcf0 <system_apb_clock_set_mask+0x58>)
    dcb8:	4a0d      	ldr	r2, [pc, #52]	; (dcf0 <system_apb_clock_set_mask+0x58>)
    dcba:	6991      	ldr	r1, [r2, #24]
    dcbc:	683a      	ldr	r2, [r7, #0]
    dcbe:	430a      	orrs	r2, r1
    dcc0:	619a      	str	r2, [r3, #24]
			break;
    dcc2:	e00f      	b.n	dce4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    dcc4:	4b0a      	ldr	r3, [pc, #40]	; (dcf0 <system_apb_clock_set_mask+0x58>)
    dcc6:	4a0a      	ldr	r2, [pc, #40]	; (dcf0 <system_apb_clock_set_mask+0x58>)
    dcc8:	69d1      	ldr	r1, [r2, #28]
    dcca:	683a      	ldr	r2, [r7, #0]
    dccc:	430a      	orrs	r2, r1
    dcce:	61da      	str	r2, [r3, #28]
			break;
    dcd0:	e008      	b.n	dce4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    dcd2:	4b07      	ldr	r3, [pc, #28]	; (dcf0 <system_apb_clock_set_mask+0x58>)
    dcd4:	4a06      	ldr	r2, [pc, #24]	; (dcf0 <system_apb_clock_set_mask+0x58>)
    dcd6:	6a11      	ldr	r1, [r2, #32]
    dcd8:	683a      	ldr	r2, [r7, #0]
    dcda:	430a      	orrs	r2, r1
    dcdc:	621a      	str	r2, [r3, #32]
			break;
    dcde:	e001      	b.n	dce4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    dce0:	2317      	movs	r3, #23
    dce2:	e000      	b.n	dce6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    dce4:	2300      	movs	r3, #0
}
    dce6:	0018      	movs	r0, r3
    dce8:	46bd      	mov	sp, r7
    dcea:	b002      	add	sp, #8
    dcec:	bd80      	pop	{r7, pc}
    dcee:	46c0      	nop			; (mov r8, r8)
    dcf0:	40000400 	.word	0x40000400

0000dcf4 <system_pinmux_get_config_defaults>:
{
    dcf4:	b580      	push	{r7, lr}
    dcf6:	b082      	sub	sp, #8
    dcf8:	af00      	add	r7, sp, #0
    dcfa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    dcfc:	687b      	ldr	r3, [r7, #4]
    dcfe:	2280      	movs	r2, #128	; 0x80
    dd00:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    dd02:	687b      	ldr	r3, [r7, #4]
    dd04:	2200      	movs	r2, #0
    dd06:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    dd08:	687b      	ldr	r3, [r7, #4]
    dd0a:	2201      	movs	r2, #1
    dd0c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    dd0e:	687b      	ldr	r3, [r7, #4]
    dd10:	2200      	movs	r2, #0
    dd12:	70da      	strb	r2, [r3, #3]
}
    dd14:	46c0      	nop			; (mov r8, r8)
    dd16:	46bd      	mov	sp, r7
    dd18:	b002      	add	sp, #8
    dd1a:	bd80      	pop	{r7, pc}

0000dd1c <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    dd1c:	b580      	push	{r7, lr}
    dd1e:	b082      	sub	sp, #8
    dd20:	af00      	add	r7, sp, #0
    dd22:	0002      	movs	r2, r0
    dd24:	1dfb      	adds	r3, r7, #7
    dd26:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    dd28:	1dfb      	adds	r3, r7, #7
    dd2a:	781b      	ldrb	r3, [r3, #0]
    dd2c:	2b00      	cmp	r3, #0
    dd2e:	d002      	beq.n	dd36 <system_voltage_reference_enable+0x1a>
    dd30:	2b01      	cmp	r3, #1
    dd32:	d007      	beq.n	dd44 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    dd34:	e00d      	b.n	dd52 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    dd36:	4b08      	ldr	r3, [pc, #32]	; (dd58 <system_voltage_reference_enable+0x3c>)
    dd38:	4a07      	ldr	r2, [pc, #28]	; (dd58 <system_voltage_reference_enable+0x3c>)
    dd3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
    dd3c:	2102      	movs	r1, #2
    dd3e:	430a      	orrs	r2, r1
    dd40:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    dd42:	e006      	b.n	dd52 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    dd44:	4b04      	ldr	r3, [pc, #16]	; (dd58 <system_voltage_reference_enable+0x3c>)
    dd46:	4a04      	ldr	r2, [pc, #16]	; (dd58 <system_voltage_reference_enable+0x3c>)
    dd48:	6c12      	ldr	r2, [r2, #64]	; 0x40
    dd4a:	2104      	movs	r1, #4
    dd4c:	430a      	orrs	r2, r1
    dd4e:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    dd50:	46c0      	nop			; (mov r8, r8)
	}
}
    dd52:	46bd      	mov	sp, r7
    dd54:	b002      	add	sp, #8
    dd56:	bd80      	pop	{r7, pc}
    dd58:	40000800 	.word	0x40000800

0000dd5c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    dd5c:	b580      	push	{r7, lr}
    dd5e:	b084      	sub	sp, #16
    dd60:	af00      	add	r7, sp, #0
    dd62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    dd64:	687b      	ldr	r3, [r7, #4]
    dd66:	681b      	ldr	r3, [r3, #0]
    dd68:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    dd6a:	68fb      	ldr	r3, [r7, #12]
    dd6c:	7e5b      	ldrb	r3, [r3, #25]
    dd6e:	b2db      	uxtb	r3, r3
    dd70:	b25b      	sxtb	r3, r3
    dd72:	2b00      	cmp	r3, #0
    dd74:	da01      	bge.n	dd7a <adc_is_syncing+0x1e>
		return true;
    dd76:	2301      	movs	r3, #1
    dd78:	e000      	b.n	dd7c <adc_is_syncing+0x20>
	}

	return false;
    dd7a:	2300      	movs	r3, #0
}
    dd7c:	0018      	movs	r0, r3
    dd7e:	46bd      	mov	sp, r7
    dd80:	b004      	add	sp, #16
    dd82:	bd80      	pop	{r7, pc}

0000dd84 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    dd84:	b580      	push	{r7, lr}
    dd86:	b082      	sub	sp, #8
    dd88:	af00      	add	r7, sp, #0
    dd8a:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    dd8c:	687b      	ldr	r3, [r7, #4]
    dd8e:	2200      	movs	r2, #0
    dd90:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    dd92:	687b      	ldr	r3, [r7, #4]
    dd94:	2200      	movs	r2, #0
    dd96:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    dd98:	687b      	ldr	r3, [r7, #4]
    dd9a:	2200      	movs	r2, #0
    dd9c:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    dd9e:	687b      	ldr	r3, [r7, #4]
    dda0:	2200      	movs	r2, #0
    dda2:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    dda4:	687b      	ldr	r3, [r7, #4]
    dda6:	2200      	movs	r2, #0
    dda8:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    ddaa:	687b      	ldr	r3, [r7, #4]
    ddac:	2200      	movs	r2, #0
    ddae:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    ddb0:	687b      	ldr	r3, [r7, #4]
    ddb2:	2200      	movs	r2, #0
    ddb4:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    ddb6:	687b      	ldr	r3, [r7, #4]
    ddb8:	2200      	movs	r2, #0
    ddba:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    ddbc:	687b      	ldr	r3, [r7, #4]
    ddbe:	2200      	movs	r2, #0
    ddc0:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    ddc2:	687b      	ldr	r3, [r7, #4]
    ddc4:	22c0      	movs	r2, #192	; 0xc0
    ddc6:	0152      	lsls	r2, r2, #5
    ddc8:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    ddca:	687b      	ldr	r3, [r7, #4]
    ddcc:	2200      	movs	r2, #0
    ddce:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    ddd0:	687b      	ldr	r3, [r7, #4]
    ddd2:	2200      	movs	r2, #0
    ddd4:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    ddd6:	687b      	ldr	r3, [r7, #4]
    ddd8:	2200      	movs	r2, #0
    ddda:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    dddc:	687b      	ldr	r3, [r7, #4]
    ddde:	2200      	movs	r2, #0
    dde0:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    dde2:	687b      	ldr	r3, [r7, #4]
    dde4:	2200      	movs	r2, #0
    dde6:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    dde8:	687b      	ldr	r3, [r7, #4]
    ddea:	222a      	movs	r2, #42	; 0x2a
    ddec:	2100      	movs	r1, #0
    ddee:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    ddf0:	687b      	ldr	r3, [r7, #4]
    ddf2:	2200      	movs	r2, #0
    ddf4:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    ddf6:	687b      	ldr	r3, [r7, #4]
    ddf8:	2200      	movs	r2, #0
    ddfa:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    ddfc:	687b      	ldr	r3, [r7, #4]
    ddfe:	2224      	movs	r2, #36	; 0x24
    de00:	2100      	movs	r1, #0
    de02:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    de04:	687b      	ldr	r3, [r7, #4]
    de06:	2200      	movs	r2, #0
    de08:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    de0a:	687b      	ldr	r3, [r7, #4]
    de0c:	2200      	movs	r2, #0
    de0e:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    de10:	687b      	ldr	r3, [r7, #4]
    de12:	2200      	movs	r2, #0
    de14:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    de16:	687b      	ldr	r3, [r7, #4]
    de18:	222b      	movs	r2, #43	; 0x2b
    de1a:	2100      	movs	r1, #0
    de1c:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    de1e:	687b      	ldr	r3, [r7, #4]
    de20:	222c      	movs	r2, #44	; 0x2c
    de22:	2100      	movs	r1, #0
    de24:	5499      	strb	r1, [r3, r2]
}
    de26:	46c0      	nop			; (mov r8, r8)
    de28:	46bd      	mov	sp, r7
    de2a:	b002      	add	sp, #8
    de2c:	bd80      	pop	{r7, pc}
	...

0000de30 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    de30:	b580      	push	{r7, lr}
    de32:	b098      	sub	sp, #96	; 0x60
    de34:	af00      	add	r7, sp, #0
    de36:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    de38:	230c      	movs	r3, #12
    de3a:	18fa      	adds	r2, r7, r3
    de3c:	4b15      	ldr	r3, [pc, #84]	; (de94 <_adc_configure_ain_pin+0x64>)
    de3e:	0010      	movs	r0, r2
    de40:	0019      	movs	r1, r3
    de42:	2350      	movs	r3, #80	; 0x50
    de44:	001a      	movs	r2, r3
    de46:	4b14      	ldr	r3, [pc, #80]	; (de98 <_adc_configure_ain_pin+0x68>)
    de48:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    de4a:	4b14      	ldr	r3, [pc, #80]	; (de9c <_adc_configure_ain_pin+0x6c>)
    de4c:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    de4e:	687b      	ldr	r3, [r7, #4]
    de50:	2b13      	cmp	r3, #19
    de52:	d81a      	bhi.n	de8a <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    de54:	230c      	movs	r3, #12
    de56:	18fb      	adds	r3, r7, r3
    de58:	687a      	ldr	r2, [r7, #4]
    de5a:	0092      	lsls	r2, r2, #2
    de5c:	58d3      	ldr	r3, [r2, r3]
    de5e:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    de60:	2308      	movs	r3, #8
    de62:	18fb      	adds	r3, r7, r3
    de64:	0018      	movs	r0, r3
    de66:	4b0e      	ldr	r3, [pc, #56]	; (dea0 <_adc_configure_ain_pin+0x70>)
    de68:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    de6a:	2308      	movs	r3, #8
    de6c:	18fb      	adds	r3, r7, r3
    de6e:	2200      	movs	r2, #0
    de70:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    de72:	2308      	movs	r3, #8
    de74:	18fb      	adds	r3, r7, r3
    de76:	2201      	movs	r2, #1
    de78:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    de7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    de7c:	b2db      	uxtb	r3, r3
    de7e:	2208      	movs	r2, #8
    de80:	18ba      	adds	r2, r7, r2
    de82:	0011      	movs	r1, r2
    de84:	0018      	movs	r0, r3
    de86:	4b07      	ldr	r3, [pc, #28]	; (dea4 <_adc_configure_ain_pin+0x74>)
    de88:	4798      	blx	r3
	}
}
    de8a:	46c0      	nop			; (mov r8, r8)
    de8c:	46bd      	mov	sp, r7
    de8e:	b018      	add	sp, #96	; 0x60
    de90:	bd80      	pop	{r7, pc}
    de92:	46c0      	nop			; (mov r8, r8)
    de94:	0001ac38 	.word	0x0001ac38
    de98:	000133d5 	.word	0x000133d5
    de9c:	0000ffff 	.word	0x0000ffff
    dea0:	0000dcf5 	.word	0x0000dcf5
    dea4:	000119cd 	.word	0x000119cd

0000dea8 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    dea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    deaa:	b089      	sub	sp, #36	; 0x24
    deac:	af00      	add	r7, sp, #0
    deae:	6078      	str	r0, [r7, #4]
    deb0:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    deb2:	231f      	movs	r3, #31
    deb4:	18fb      	adds	r3, r7, r3
    deb6:	2200      	movs	r2, #0
    deb8:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    deba:	2310      	movs	r3, #16
    debc:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    debe:	2317      	movs	r3, #23
    dec0:	18fb      	adds	r3, r7, r3
    dec2:	2200      	movs	r2, #0
    dec4:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    dec6:	687b      	ldr	r3, [r7, #4]
    dec8:	681b      	ldr	r3, [r3, #0]
    deca:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    decc:	230c      	movs	r3, #12
    dece:	18fb      	adds	r3, r7, r3
    ded0:	0018      	movs	r0, r3
    ded2:	4bce      	ldr	r3, [pc, #824]	; (e20c <_adc_set_config+0x364>)
    ded4:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    ded6:	683b      	ldr	r3, [r7, #0]
    ded8:	781a      	ldrb	r2, [r3, #0]
    deda:	230c      	movs	r3, #12
    dedc:	18fb      	adds	r3, r7, r3
    dede:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    dee0:	230c      	movs	r3, #12
    dee2:	18fb      	adds	r3, r7, r3
    dee4:	0019      	movs	r1, r3
    dee6:	201e      	movs	r0, #30
    dee8:	4bc9      	ldr	r3, [pc, #804]	; (e210 <_adc_set_config+0x368>)
    deea:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    deec:	201e      	movs	r0, #30
    deee:	4bc9      	ldr	r3, [pc, #804]	; (e214 <_adc_set_config+0x36c>)
    def0:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    def2:	683b      	ldr	r3, [r7, #0]
    def4:	222c      	movs	r2, #44	; 0x2c
    def6:	5c9b      	ldrb	r3, [r3, r2]
    def8:	2b00      	cmp	r3, #0
    defa:	d040      	beq.n	df7e <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    defc:	2316      	movs	r3, #22
    defe:	18fb      	adds	r3, r7, r3
    df00:	683a      	ldr	r2, [r7, #0]
    df02:	212b      	movs	r1, #43	; 0x2b
    df04:	5c52      	ldrb	r2, [r2, r1]
    df06:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    df08:	683b      	ldr	r3, [r7, #0]
    df0a:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    df0c:	2315      	movs	r3, #21
    df0e:	18fb      	adds	r3, r7, r3
    df10:	2216      	movs	r2, #22
    df12:	18ba      	adds	r2, r7, r2
    df14:	7812      	ldrb	r2, [r2, #0]
    df16:	188a      	adds	r2, r1, r2
    df18:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    df1a:	683b      	ldr	r3, [r7, #0]
    df1c:	222c      	movs	r2, #44	; 0x2c
    df1e:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    df20:	230f      	movs	r3, #15
    df22:	18fb      	adds	r3, r7, r3
    df24:	2215      	movs	r2, #21
    df26:	18ba      	adds	r2, r7, r2
    df28:	7812      	ldrb	r2, [r2, #0]
    df2a:	188a      	adds	r2, r1, r2
    df2c:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    df2e:	e018      	b.n	df62 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    df30:	2316      	movs	r3, #22
    df32:	18fb      	adds	r3, r7, r3
    df34:	781b      	ldrb	r3, [r3, #0]
    df36:	220f      	movs	r2, #15
    df38:	4013      	ands	r3, r2
    df3a:	683a      	ldr	r2, [r7, #0]
    df3c:	7b12      	ldrb	r2, [r2, #12]
    df3e:	189b      	adds	r3, r3, r2
    df40:	0018      	movs	r0, r3
    df42:	4bb5      	ldr	r3, [pc, #724]	; (e218 <_adc_set_config+0x370>)
    df44:	4798      	blx	r3
			start_pin++;
    df46:	2315      	movs	r3, #21
    df48:	18fb      	adds	r3, r7, r3
    df4a:	781a      	ldrb	r2, [r3, #0]
    df4c:	2315      	movs	r3, #21
    df4e:	18fb      	adds	r3, r7, r3
    df50:	3201      	adds	r2, #1
    df52:	701a      	strb	r2, [r3, #0]
			offset++;
    df54:	2316      	movs	r3, #22
    df56:	18fb      	adds	r3, r7, r3
    df58:	781a      	ldrb	r2, [r3, #0]
    df5a:	2316      	movs	r3, #22
    df5c:	18fb      	adds	r3, r7, r3
    df5e:	3201      	adds	r2, #1
    df60:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    df62:	2315      	movs	r3, #21
    df64:	18fa      	adds	r2, r7, r3
    df66:	230f      	movs	r3, #15
    df68:	18fb      	adds	r3, r7, r3
    df6a:	7812      	ldrb	r2, [r2, #0]
    df6c:	781b      	ldrb	r3, [r3, #0]
    df6e:	429a      	cmp	r2, r3
    df70:	d3de      	bcc.n	df30 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    df72:	683b      	ldr	r3, [r7, #0]
    df74:	89db      	ldrh	r3, [r3, #14]
    df76:	0018      	movs	r0, r3
    df78:	4ba7      	ldr	r3, [pc, #668]	; (e218 <_adc_set_config+0x370>)
    df7a:	4798      	blx	r3
    df7c:	e009      	b.n	df92 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    df7e:	683b      	ldr	r3, [r7, #0]
    df80:	7b1b      	ldrb	r3, [r3, #12]
    df82:	0018      	movs	r0, r3
    df84:	4ba4      	ldr	r3, [pc, #656]	; (e218 <_adc_set_config+0x370>)
    df86:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    df88:	683b      	ldr	r3, [r7, #0]
    df8a:	89db      	ldrh	r3, [r3, #14]
    df8c:	0018      	movs	r0, r3
    df8e:	4ba2      	ldr	r3, [pc, #648]	; (e218 <_adc_set_config+0x370>)
    df90:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    df92:	683b      	ldr	r3, [r7, #0]
    df94:	7d5b      	ldrb	r3, [r3, #21]
    df96:	009b      	lsls	r3, r3, #2
    df98:	b2da      	uxtb	r2, r3
    df9a:	693b      	ldr	r3, [r7, #16]
    df9c:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    df9e:	683b      	ldr	r3, [r7, #0]
    dfa0:	7d9b      	ldrb	r3, [r3, #22]
    dfa2:	01db      	lsls	r3, r3, #7
    dfa4:	b25a      	sxtb	r2, r3
			(config->reference);
    dfa6:	683b      	ldr	r3, [r7, #0]
    dfa8:	785b      	ldrb	r3, [r3, #1]
    dfaa:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    dfac:	4313      	orrs	r3, r2
    dfae:	b25b      	sxtb	r3, r3
    dfb0:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    dfb2:	693b      	ldr	r3, [r7, #16]
    dfb4:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    dfb6:	683b      	ldr	r3, [r7, #0]
    dfb8:	791b      	ldrb	r3, [r3, #4]
    dfba:	2b34      	cmp	r3, #52	; 0x34
    dfbc:	d846      	bhi.n	e04c <_adc_set_config+0x1a4>
    dfbe:	009a      	lsls	r2, r3, #2
    dfc0:	4b96      	ldr	r3, [pc, #600]	; (e21c <_adc_set_config+0x374>)
    dfc2:	18d3      	adds	r3, r2, r3
    dfc4:	681b      	ldr	r3, [r3, #0]
    dfc6:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    dfc8:	231f      	movs	r3, #31
    dfca:	18fb      	adds	r3, r7, r3
    dfcc:	683a      	ldr	r2, [r7, #0]
    dfce:	7c52      	ldrb	r2, [r2, #17]
    dfd0:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    dfd2:	2317      	movs	r3, #23
    dfd4:	18fb      	adds	r3, r7, r3
    dfd6:	683a      	ldr	r2, [r7, #0]
    dfd8:	7c12      	ldrb	r2, [r2, #16]
    dfda:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    dfdc:	2310      	movs	r3, #16
    dfde:	61bb      	str	r3, [r7, #24]
		break;
    dfe0:	e036      	b.n	e050 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    dfe2:	231f      	movs	r3, #31
    dfe4:	18fb      	adds	r3, r7, r3
    dfe6:	2201      	movs	r2, #1
    dfe8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    dfea:	2317      	movs	r3, #23
    dfec:	18fb      	adds	r3, r7, r3
    dfee:	2202      	movs	r2, #2
    dff0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    dff2:	2310      	movs	r3, #16
    dff4:	61bb      	str	r3, [r7, #24]
		break;
    dff6:	e02b      	b.n	e050 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    dff8:	231f      	movs	r3, #31
    dffa:	18fb      	adds	r3, r7, r3
    dffc:	2202      	movs	r2, #2
    dffe:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    e000:	2317      	movs	r3, #23
    e002:	18fb      	adds	r3, r7, r3
    e004:	2204      	movs	r2, #4
    e006:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    e008:	2310      	movs	r3, #16
    e00a:	61bb      	str	r3, [r7, #24]
		break;
    e00c:	e020      	b.n	e050 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    e00e:	231f      	movs	r3, #31
    e010:	18fb      	adds	r3, r7, r3
    e012:	2201      	movs	r2, #1
    e014:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    e016:	2317      	movs	r3, #23
    e018:	18fb      	adds	r3, r7, r3
    e01a:	2206      	movs	r2, #6
    e01c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    e01e:	2310      	movs	r3, #16
    e020:	61bb      	str	r3, [r7, #24]
		break;
    e022:	e015      	b.n	e050 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    e024:	231f      	movs	r3, #31
    e026:	18fb      	adds	r3, r7, r3
    e028:	2200      	movs	r2, #0
    e02a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    e02c:	2317      	movs	r3, #23
    e02e:	18fb      	adds	r3, r7, r3
    e030:	2208      	movs	r2, #8
    e032:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    e034:	2310      	movs	r3, #16
    e036:	61bb      	str	r3, [r7, #24]
		break;
    e038:	e00a      	b.n	e050 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    e03a:	2330      	movs	r3, #48	; 0x30
    e03c:	61bb      	str	r3, [r7, #24]
		break;
    e03e:	e007      	b.n	e050 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    e040:	2320      	movs	r3, #32
    e042:	61bb      	str	r3, [r7, #24]
		break;
    e044:	e004      	b.n	e050 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    e046:	2300      	movs	r3, #0
    e048:	61bb      	str	r3, [r7, #24]
		break;
    e04a:	e001      	b.n	e050 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    e04c:	2317      	movs	r3, #23
    e04e:	e1ae      	b.n	e3ae <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    e050:	231f      	movs	r3, #31
    e052:	18fb      	adds	r3, r7, r3
    e054:	781b      	ldrb	r3, [r3, #0]
    e056:	011b      	lsls	r3, r3, #4
    e058:	b2db      	uxtb	r3, r3
    e05a:	2270      	movs	r2, #112	; 0x70
    e05c:	4013      	ands	r3, r2
    e05e:	b2da      	uxtb	r2, r3
    e060:	2317      	movs	r3, #23
    e062:	18fb      	adds	r3, r7, r3
    e064:	781b      	ldrb	r3, [r3, #0]
    e066:	4313      	orrs	r3, r2
    e068:	b2da      	uxtb	r2, r3
    e06a:	693b      	ldr	r3, [r7, #16]
    e06c:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    e06e:	683b      	ldr	r3, [r7, #0]
    e070:	7ddb      	ldrb	r3, [r3, #23]
    e072:	2b3f      	cmp	r3, #63	; 0x3f
    e074:	d901      	bls.n	e07a <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    e076:	2317      	movs	r3, #23
    e078:	e199      	b.n	e3ae <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    e07a:	683b      	ldr	r3, [r7, #0]
    e07c:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    e07e:	693b      	ldr	r3, [r7, #16]
    e080:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    e082:	46c0      	nop			; (mov r8, r8)
    e084:	687b      	ldr	r3, [r7, #4]
    e086:	0018      	movs	r0, r3
    e088:	4b65      	ldr	r3, [pc, #404]	; (e220 <_adc_set_config+0x378>)
    e08a:	4798      	blx	r3
    e08c:	1e03      	subs	r3, r0, #0
    e08e:	d1f9      	bne.n	e084 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    e090:	683b      	ldr	r3, [r7, #0]
    e092:	885a      	ldrh	r2, [r3, #2]
    e094:	69bb      	ldr	r3, [r7, #24]
    e096:	b29b      	uxth	r3, r3
    e098:	4313      	orrs	r3, r2
    e09a:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    e09c:	683b      	ldr	r3, [r7, #0]
    e09e:	2124      	movs	r1, #36	; 0x24
    e0a0:	5c5b      	ldrb	r3, [r3, r1]
    e0a2:	b29b      	uxth	r3, r3
    e0a4:	00db      	lsls	r3, r3, #3
    e0a6:	b29b      	uxth	r3, r3
			resolution |
    e0a8:	4313      	orrs	r3, r2
    e0aa:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    e0ac:	683b      	ldr	r3, [r7, #0]
    e0ae:	7d1b      	ldrb	r3, [r3, #20]
    e0b0:	b29b      	uxth	r3, r3
    e0b2:	009b      	lsls	r3, r3, #2
    e0b4:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    e0b6:	4313      	orrs	r3, r2
    e0b8:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    e0ba:	683b      	ldr	r3, [r7, #0]
    e0bc:	7c9b      	ldrb	r3, [r3, #18]
    e0be:	b29b      	uxth	r3, r3
    e0c0:	18db      	adds	r3, r3, r3
    e0c2:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    e0c4:	4313      	orrs	r3, r2
    e0c6:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    e0c8:	683b      	ldr	r3, [r7, #0]
    e0ca:	7cdb      	ldrb	r3, [r3, #19]
    e0cc:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    e0ce:	4313      	orrs	r3, r2
    e0d0:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    e0d2:	693b      	ldr	r3, [r7, #16]
    e0d4:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    e0d6:	683b      	ldr	r3, [r7, #0]
    e0d8:	7e1b      	ldrb	r3, [r3, #24]
    e0da:	2b00      	cmp	r3, #0
    e0dc:	d100      	bne.n	e0e0 <_adc_set_config+0x238>
    e0de:	e0c4      	b.n	e26a <_adc_set_config+0x3c2>
		switch (resolution) {
    e0e0:	69bb      	ldr	r3, [r7, #24]
    e0e2:	2b10      	cmp	r3, #16
    e0e4:	d100      	bne.n	e0e8 <_adc_set_config+0x240>
    e0e6:	e076      	b.n	e1d6 <_adc_set_config+0x32e>
    e0e8:	d802      	bhi.n	e0f0 <_adc_set_config+0x248>
    e0ea:	2b00      	cmp	r3, #0
    e0ec:	d04d      	beq.n	e18a <_adc_set_config+0x2e2>
    e0ee:	e0bc      	b.n	e26a <_adc_set_config+0x3c2>
    e0f0:	2b20      	cmp	r3, #32
    e0f2:	d023      	beq.n	e13c <_adc_set_config+0x294>
    e0f4:	2b30      	cmp	r3, #48	; 0x30
    e0f6:	d000      	beq.n	e0fa <_adc_set_config+0x252>
    e0f8:	e0b7      	b.n	e26a <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    e0fa:	683b      	ldr	r3, [r7, #0]
    e0fc:	7cdb      	ldrb	r3, [r3, #19]
    e0fe:	2b00      	cmp	r3, #0
    e100:	d011      	beq.n	e126 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    e102:	683b      	ldr	r3, [r7, #0]
    e104:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    e106:	2b7f      	cmp	r3, #127	; 0x7f
    e108:	dc0b      	bgt.n	e122 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    e10a:	683b      	ldr	r3, [r7, #0]
    e10c:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    e10e:	3380      	adds	r3, #128	; 0x80
    e110:	db07      	blt.n	e122 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    e112:	683b      	ldr	r3, [r7, #0]
    e114:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    e116:	2b7f      	cmp	r3, #127	; 0x7f
    e118:	dc03      	bgt.n	e122 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    e11a:	683b      	ldr	r3, [r7, #0]
    e11c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    e11e:	3380      	adds	r3, #128	; 0x80
    e120:	da01      	bge.n	e126 <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    e122:	2317      	movs	r3, #23
    e124:	e143      	b.n	e3ae <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    e126:	683b      	ldr	r3, [r7, #0]
    e128:	69db      	ldr	r3, [r3, #28]
    e12a:	2bff      	cmp	r3, #255	; 0xff
    e12c:	dc04      	bgt.n	e138 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    e12e:	683b      	ldr	r3, [r7, #0]
    e130:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    e132:	2bff      	cmp	r3, #255	; 0xff
    e134:	dc00      	bgt.n	e138 <_adc_set_config+0x290>
    e136:	e091      	b.n	e25c <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    e138:	2317      	movs	r3, #23
    e13a:	e138      	b.n	e3ae <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    e13c:	683b      	ldr	r3, [r7, #0]
    e13e:	7cdb      	ldrb	r3, [r3, #19]
    e140:	2b00      	cmp	r3, #0
    e142:	d015      	beq.n	e170 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    e144:	683b      	ldr	r3, [r7, #0]
    e146:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    e148:	4a36      	ldr	r2, [pc, #216]	; (e224 <_adc_set_config+0x37c>)
    e14a:	4293      	cmp	r3, r2
    e14c:	dc0e      	bgt.n	e16c <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    e14e:	683b      	ldr	r3, [r7, #0]
    e150:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    e152:	4a35      	ldr	r2, [pc, #212]	; (e228 <_adc_set_config+0x380>)
    e154:	4293      	cmp	r3, r2
    e156:	db09      	blt.n	e16c <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    e158:	683b      	ldr	r3, [r7, #0]
    e15a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    e15c:	4a31      	ldr	r2, [pc, #196]	; (e224 <_adc_set_config+0x37c>)
    e15e:	4293      	cmp	r3, r2
    e160:	dc04      	bgt.n	e16c <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    e162:	683b      	ldr	r3, [r7, #0]
    e164:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    e166:	4a30      	ldr	r2, [pc, #192]	; (e228 <_adc_set_config+0x380>)
    e168:	4293      	cmp	r3, r2
    e16a:	da01      	bge.n	e170 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    e16c:	2317      	movs	r3, #23
    e16e:	e11e      	b.n	e3ae <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    e170:	683b      	ldr	r3, [r7, #0]
    e172:	69db      	ldr	r3, [r3, #28]
    e174:	4a2d      	ldr	r2, [pc, #180]	; (e22c <_adc_set_config+0x384>)
    e176:	4293      	cmp	r3, r2
    e178:	dc05      	bgt.n	e186 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    e17a:	683b      	ldr	r3, [r7, #0]
    e17c:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    e17e:	4a2b      	ldr	r2, [pc, #172]	; (e22c <_adc_set_config+0x384>)
    e180:	4293      	cmp	r3, r2
    e182:	dc00      	bgt.n	e186 <_adc_set_config+0x2de>
    e184:	e06c      	b.n	e260 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    e186:	2317      	movs	r3, #23
    e188:	e111      	b.n	e3ae <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    e18a:	683b      	ldr	r3, [r7, #0]
    e18c:	7cdb      	ldrb	r3, [r3, #19]
    e18e:	2b00      	cmp	r3, #0
    e190:	d015      	beq.n	e1be <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    e192:	683b      	ldr	r3, [r7, #0]
    e194:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    e196:	4a26      	ldr	r2, [pc, #152]	; (e230 <_adc_set_config+0x388>)
    e198:	4293      	cmp	r3, r2
    e19a:	dc0e      	bgt.n	e1ba <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    e19c:	683b      	ldr	r3, [r7, #0]
    e19e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    e1a0:	4a24      	ldr	r2, [pc, #144]	; (e234 <_adc_set_config+0x38c>)
    e1a2:	4293      	cmp	r3, r2
    e1a4:	db09      	blt.n	e1ba <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    e1a6:	683b      	ldr	r3, [r7, #0]
    e1a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    e1aa:	4a21      	ldr	r2, [pc, #132]	; (e230 <_adc_set_config+0x388>)
    e1ac:	4293      	cmp	r3, r2
    e1ae:	dc04      	bgt.n	e1ba <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    e1b0:	683b      	ldr	r3, [r7, #0]
    e1b2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    e1b4:	4a1f      	ldr	r2, [pc, #124]	; (e234 <_adc_set_config+0x38c>)
    e1b6:	4293      	cmp	r3, r2
    e1b8:	da01      	bge.n	e1be <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    e1ba:	2317      	movs	r3, #23
    e1bc:	e0f7      	b.n	e3ae <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    e1be:	683b      	ldr	r3, [r7, #0]
    e1c0:	69db      	ldr	r3, [r3, #28]
    e1c2:	4a1d      	ldr	r2, [pc, #116]	; (e238 <_adc_set_config+0x390>)
    e1c4:	4293      	cmp	r3, r2
    e1c6:	dc04      	bgt.n	e1d2 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    e1c8:	683b      	ldr	r3, [r7, #0]
    e1ca:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    e1cc:	4a1a      	ldr	r2, [pc, #104]	; (e238 <_adc_set_config+0x390>)
    e1ce:	4293      	cmp	r3, r2
    e1d0:	dd48      	ble.n	e264 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    e1d2:	2317      	movs	r3, #23
    e1d4:	e0eb      	b.n	e3ae <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    e1d6:	683b      	ldr	r3, [r7, #0]
    e1d8:	7cdb      	ldrb	r3, [r3, #19]
    e1da:	2b00      	cmp	r3, #0
    e1dc:	d032      	beq.n	e244 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    e1de:	683b      	ldr	r3, [r7, #0]
    e1e0:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    e1e2:	4a16      	ldr	r2, [pc, #88]	; (e23c <_adc_set_config+0x394>)
    e1e4:	4293      	cmp	r3, r2
    e1e6:	dc0e      	bgt.n	e206 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    e1e8:	683b      	ldr	r3, [r7, #0]
    e1ea:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    e1ec:	4a14      	ldr	r2, [pc, #80]	; (e240 <_adc_set_config+0x398>)
    e1ee:	4293      	cmp	r3, r2
    e1f0:	db09      	blt.n	e206 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    e1f2:	683b      	ldr	r3, [r7, #0]
    e1f4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    e1f6:	4a11      	ldr	r2, [pc, #68]	; (e23c <_adc_set_config+0x394>)
    e1f8:	4293      	cmp	r3, r2
    e1fa:	dc04      	bgt.n	e206 <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    e1fc:	683b      	ldr	r3, [r7, #0]
    e1fe:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    e200:	4a0f      	ldr	r2, [pc, #60]	; (e240 <_adc_set_config+0x398>)
    e202:	4293      	cmp	r3, r2
    e204:	da1e      	bge.n	e244 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    e206:	2317      	movs	r3, #23
    e208:	e0d1      	b.n	e3ae <_adc_set_config+0x506>
    e20a:	46c0      	nop			; (mov r8, r8)
    e20c:	0000dc81 	.word	0x0000dc81
    e210:	000116e1 	.word	0x000116e1
    e214:	00011725 	.word	0x00011725
    e218:	0000de31 	.word	0x0000de31
    e21c:	0001ac88 	.word	0x0001ac88
    e220:	0000dd5d 	.word	0x0000dd5d
    e224:	000001ff 	.word	0x000001ff
    e228:	fffffe00 	.word	0xfffffe00
    e22c:	000003ff 	.word	0x000003ff
    e230:	000007ff 	.word	0x000007ff
    e234:	fffff800 	.word	0xfffff800
    e238:	00000fff 	.word	0x00000fff
    e23c:	00007fff 	.word	0x00007fff
    e240:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    e244:	683b      	ldr	r3, [r7, #0]
    e246:	69db      	ldr	r3, [r3, #28]
    e248:	4a5b      	ldr	r2, [pc, #364]	; (e3b8 <_adc_set_config+0x510>)
    e24a:	4293      	cmp	r3, r2
    e24c:	dc04      	bgt.n	e258 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    e24e:	683b      	ldr	r3, [r7, #0]
    e250:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    e252:	4a59      	ldr	r2, [pc, #356]	; (e3b8 <_adc_set_config+0x510>)
    e254:	4293      	cmp	r3, r2
    e256:	dd07      	ble.n	e268 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    e258:	2317      	movs	r3, #23
    e25a:	e0a8      	b.n	e3ae <_adc_set_config+0x506>
			break;
    e25c:	46c0      	nop			; (mov r8, r8)
    e25e:	e004      	b.n	e26a <_adc_set_config+0x3c2>
			break;
    e260:	46c0      	nop			; (mov r8, r8)
    e262:	e002      	b.n	e26a <_adc_set_config+0x3c2>
			break;
    e264:	46c0      	nop			; (mov r8, r8)
    e266:	e000      	b.n	e26a <_adc_set_config+0x3c2>
			}
			break;
    e268:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    e26a:	46c0      	nop			; (mov r8, r8)
    e26c:	687b      	ldr	r3, [r7, #4]
    e26e:	0018      	movs	r0, r3
    e270:	4b52      	ldr	r3, [pc, #328]	; (e3bc <_adc_set_config+0x514>)
    e272:	4798      	blx	r3
    e274:	1e03      	subs	r3, r0, #0
    e276:	d1f9      	bne.n	e26c <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    e278:	683b      	ldr	r3, [r7, #0]
    e27a:	7e1a      	ldrb	r2, [r3, #24]
    e27c:	693b      	ldr	r3, [r7, #16]
    e27e:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    e280:	46c0      	nop			; (mov r8, r8)
    e282:	687b      	ldr	r3, [r7, #4]
    e284:	0018      	movs	r0, r3
    e286:	4b4d      	ldr	r3, [pc, #308]	; (e3bc <_adc_set_config+0x514>)
    e288:	4798      	blx	r3
    e28a:	1e03      	subs	r3, r0, #0
    e28c:	d1f9      	bne.n	e282 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    e28e:	683b      	ldr	r3, [r7, #0]
    e290:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    e292:	b29a      	uxth	r2, r3
    e294:	693b      	ldr	r3, [r7, #16]
    e296:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    e298:	46c0      	nop			; (mov r8, r8)
    e29a:	687b      	ldr	r3, [r7, #4]
    e29c:	0018      	movs	r0, r3
    e29e:	4b47      	ldr	r3, [pc, #284]	; (e3bc <_adc_set_config+0x514>)
    e2a0:	4798      	blx	r3
    e2a2:	1e03      	subs	r3, r0, #0
    e2a4:	d1f9      	bne.n	e29a <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    e2a6:	683b      	ldr	r3, [r7, #0]
    e2a8:	6a1b      	ldr	r3, [r3, #32]
    e2aa:	b29a      	uxth	r2, r3
    e2ac:	693b      	ldr	r3, [r7, #16]
    e2ae:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    e2b0:	2314      	movs	r3, #20
    e2b2:	18fb      	adds	r3, r7, r3
    e2b4:	683a      	ldr	r2, [r7, #0]
    e2b6:	212c      	movs	r1, #44	; 0x2c
    e2b8:	5c52      	ldrb	r2, [r2, r1]
    e2ba:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    e2bc:	2314      	movs	r3, #20
    e2be:	18fb      	adds	r3, r7, r3
    e2c0:	781b      	ldrb	r3, [r3, #0]
    e2c2:	2b00      	cmp	r3, #0
    e2c4:	d006      	beq.n	e2d4 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    e2c6:	2314      	movs	r3, #20
    e2c8:	18fb      	adds	r3, r7, r3
    e2ca:	781a      	ldrb	r2, [r3, #0]
    e2cc:	2314      	movs	r3, #20
    e2ce:	18fb      	adds	r3, r7, r3
    e2d0:	3a01      	subs	r2, #1
    e2d2:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    e2d4:	2314      	movs	r3, #20
    e2d6:	18fb      	adds	r3, r7, r3
    e2d8:	781b      	ldrb	r3, [r3, #0]
    e2da:	2b0f      	cmp	r3, #15
    e2dc:	d804      	bhi.n	e2e8 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    e2de:	683b      	ldr	r3, [r7, #0]
    e2e0:	222b      	movs	r2, #43	; 0x2b
    e2e2:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    e2e4:	2b0f      	cmp	r3, #15
    e2e6:	d901      	bls.n	e2ec <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    e2e8:	2317      	movs	r3, #23
    e2ea:	e060      	b.n	e3ae <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    e2ec:	46c0      	nop			; (mov r8, r8)
    e2ee:	687b      	ldr	r3, [r7, #4]
    e2f0:	0018      	movs	r0, r3
    e2f2:	4b32      	ldr	r3, [pc, #200]	; (e3bc <_adc_set_config+0x514>)
    e2f4:	4798      	blx	r3
    e2f6:	1e03      	subs	r3, r0, #0
    e2f8:	d1f9      	bne.n	e2ee <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    e2fa:	683b      	ldr	r3, [r7, #0]
    e2fc:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    e2fe:	683a      	ldr	r2, [r7, #0]
    e300:	212b      	movs	r1, #43	; 0x2b
    e302:	5c52      	ldrb	r2, [r2, r1]
    e304:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    e306:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    e308:	2214      	movs	r2, #20
    e30a:	18ba      	adds	r2, r7, r2
    e30c:	7812      	ldrb	r2, [r2, #0]
    e30e:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    e310:	4313      	orrs	r3, r2
			config->negative_input |
    e312:	683a      	ldr	r2, [r7, #0]
    e314:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    e316:	4313      	orrs	r3, r2
			config->positive_input;
    e318:	683a      	ldr	r2, [r7, #0]
    e31a:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    e31c:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    e31e:	693b      	ldr	r3, [r7, #16]
    e320:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    e322:	683b      	ldr	r3, [r7, #0]
    e324:	222a      	movs	r2, #42	; 0x2a
    e326:	5c9a      	ldrb	r2, [r3, r2]
    e328:	693b      	ldr	r3, [r7, #16]
    e32a:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    e32c:	693b      	ldr	r3, [r7, #16]
    e32e:	220f      	movs	r2, #15
    e330:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    e332:	683b      	ldr	r3, [r7, #0]
    e334:	2224      	movs	r2, #36	; 0x24
    e336:	5c9b      	ldrb	r3, [r3, r2]
    e338:	2b00      	cmp	r3, #0
    e33a:	d01e      	beq.n	e37a <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    e33c:	683b      	ldr	r3, [r7, #0]
    e33e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    e340:	4a1f      	ldr	r2, [pc, #124]	; (e3c0 <_adc_set_config+0x518>)
    e342:	4293      	cmp	r3, r2
    e344:	d901      	bls.n	e34a <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    e346:	2317      	movs	r3, #23
    e348:	e031      	b.n	e3ae <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    e34a:	683b      	ldr	r3, [r7, #0]
    e34c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    e34e:	693b      	ldr	r3, [r7, #16]
    e350:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    e352:	683b      	ldr	r3, [r7, #0]
    e354:	2228      	movs	r2, #40	; 0x28
    e356:	5e9b      	ldrsh	r3, [r3, r2]
    e358:	4a1a      	ldr	r2, [pc, #104]	; (e3c4 <_adc_set_config+0x51c>)
    e35a:	4293      	cmp	r3, r2
    e35c:	dc05      	bgt.n	e36a <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    e35e:	683b      	ldr	r3, [r7, #0]
    e360:	2228      	movs	r2, #40	; 0x28
    e362:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    e364:	4a18      	ldr	r2, [pc, #96]	; (e3c8 <_adc_set_config+0x520>)
    e366:	4293      	cmp	r3, r2
    e368:	da01      	bge.n	e36e <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    e36a:	2317      	movs	r3, #23
    e36c:	e01f      	b.n	e3ae <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    e36e:	683b      	ldr	r3, [r7, #0]
    e370:	2228      	movs	r2, #40	; 0x28
    e372:	5e9b      	ldrsh	r3, [r3, r2]
    e374:	b29a      	uxth	r2, r3
    e376:	693b      	ldr	r3, [r7, #16]
    e378:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    e37a:	4b14      	ldr	r3, [pc, #80]	; (e3cc <_adc_set_config+0x524>)
    e37c:	681b      	ldr	r3, [r3, #0]
    e37e:	08db      	lsrs	r3, r3, #3
    e380:	b29b      	uxth	r3, r3
    e382:	021b      	lsls	r3, r3, #8
    e384:	b29a      	uxth	r2, r3
    e386:	23e0      	movs	r3, #224	; 0xe0
    e388:	00db      	lsls	r3, r3, #3
    e38a:	4013      	ands	r3, r2
    e38c:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    e38e:	4b10      	ldr	r3, [pc, #64]	; (e3d0 <_adc_set_config+0x528>)
    e390:	685c      	ldr	r4, [r3, #4]
    e392:	681b      	ldr	r3, [r3, #0]
    e394:	0161      	lsls	r1, r4, #5
    e396:	0edd      	lsrs	r5, r3, #27
    e398:	430d      	orrs	r5, r1
    e39a:	0ee6      	lsrs	r6, r4, #27
    e39c:	b2ab      	uxth	r3, r5
    e39e:	21ff      	movs	r1, #255	; 0xff
    e3a0:	400b      	ands	r3, r1
    e3a2:	b29b      	uxth	r3, r3
			) |
    e3a4:	4313      	orrs	r3, r2
    e3a6:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    e3a8:	693b      	ldr	r3, [r7, #16]
    e3aa:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    e3ac:	2300      	movs	r3, #0
}
    e3ae:	0018      	movs	r0, r3
    e3b0:	46bd      	mov	sp, r7
    e3b2:	b009      	add	sp, #36	; 0x24
    e3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3b6:	46c0      	nop			; (mov r8, r8)
    e3b8:	0000ffff 	.word	0x0000ffff
    e3bc:	0000dd5d 	.word	0x0000dd5d
    e3c0:	00000fff 	.word	0x00000fff
    e3c4:	000007ff 	.word	0x000007ff
    e3c8:	fffff800 	.word	0xfffff800
    e3cc:	00806024 	.word	0x00806024
    e3d0:	00806020 	.word	0x00806020

0000e3d4 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    e3d4:	b580      	push	{r7, lr}
    e3d6:	b084      	sub	sp, #16
    e3d8:	af00      	add	r7, sp, #0
    e3da:	60f8      	str	r0, [r7, #12]
    e3dc:	60b9      	str	r1, [r7, #8]
    e3de:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    e3e0:	68fb      	ldr	r3, [r7, #12]
    e3e2:	68ba      	ldr	r2, [r7, #8]
    e3e4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    e3e6:	2380      	movs	r3, #128	; 0x80
    e3e8:	025b      	lsls	r3, r3, #9
    e3ea:	0019      	movs	r1, r3
    e3ec:	2002      	movs	r0, #2
    e3ee:	4b15      	ldr	r3, [pc, #84]	; (e444 <adc_init+0x70>)
    e3f0:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    e3f2:	68bb      	ldr	r3, [r7, #8]
    e3f4:	781b      	ldrb	r3, [r3, #0]
    e3f6:	b2db      	uxtb	r3, r3
    e3f8:	001a      	movs	r2, r3
    e3fa:	2301      	movs	r3, #1
    e3fc:	4013      	ands	r3, r2
    e3fe:	d001      	beq.n	e404 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    e400:	2305      	movs	r3, #5
    e402:	e01a      	b.n	e43a <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    e404:	68bb      	ldr	r3, [r7, #8]
    e406:	781b      	ldrb	r3, [r3, #0]
    e408:	b2db      	uxtb	r3, r3
    e40a:	001a      	movs	r2, r3
    e40c:	2302      	movs	r3, #2
    e40e:	4013      	ands	r3, r2
    e410:	d001      	beq.n	e416 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    e412:	231c      	movs	r3, #28
    e414:	e011      	b.n	e43a <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    e416:	687b      	ldr	r3, [r7, #4]
    e418:	785a      	ldrb	r2, [r3, #1]
    e41a:	68fb      	ldr	r3, [r7, #12]
    e41c:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    e41e:	68fb      	ldr	r3, [r7, #12]
    e420:	791b      	ldrb	r3, [r3, #4]
    e422:	2b00      	cmp	r3, #0
    e424:	d102      	bne.n	e42c <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    e426:	2001      	movs	r0, #1
    e428:	4b07      	ldr	r3, [pc, #28]	; (e448 <adc_init+0x74>)
    e42a:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    e42c:	687a      	ldr	r2, [r7, #4]
    e42e:	68fb      	ldr	r3, [r7, #12]
    e430:	0011      	movs	r1, r2
    e432:	0018      	movs	r0, r3
    e434:	4b05      	ldr	r3, [pc, #20]	; (e44c <adc_init+0x78>)
    e436:	4798      	blx	r3
    e438:	0003      	movs	r3, r0
}
    e43a:	0018      	movs	r0, r3
    e43c:	46bd      	mov	sp, r7
    e43e:	b004      	add	sp, #16
    e440:	bd80      	pop	{r7, pc}
    e442:	46c0      	nop			; (mov r8, r8)
    e444:	0000dc99 	.word	0x0000dc99
    e448:	0000dd1d 	.word	0x0000dd1d
    e44c:	0000dea9 	.word	0x0000dea9

0000e450 <system_gclk_chan_get_config_defaults>:
{
    e450:	b580      	push	{r7, lr}
    e452:	b082      	sub	sp, #8
    e454:	af00      	add	r7, sp, #0
    e456:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    e458:	687b      	ldr	r3, [r7, #4]
    e45a:	2200      	movs	r2, #0
    e45c:	701a      	strb	r2, [r3, #0]
}
    e45e:	46c0      	nop			; (mov r8, r8)
    e460:	46bd      	mov	sp, r7
    e462:	b002      	add	sp, #8
    e464:	bd80      	pop	{r7, pc}
	...

0000e468 <system_apb_clock_set_mask>:
{
    e468:	b580      	push	{r7, lr}
    e46a:	b082      	sub	sp, #8
    e46c:	af00      	add	r7, sp, #0
    e46e:	0002      	movs	r2, r0
    e470:	6039      	str	r1, [r7, #0]
    e472:	1dfb      	adds	r3, r7, #7
    e474:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    e476:	1dfb      	adds	r3, r7, #7
    e478:	781b      	ldrb	r3, [r3, #0]
    e47a:	2b01      	cmp	r3, #1
    e47c:	d00a      	beq.n	e494 <system_apb_clock_set_mask+0x2c>
    e47e:	2b02      	cmp	r3, #2
    e480:	d00f      	beq.n	e4a2 <system_apb_clock_set_mask+0x3a>
    e482:	2b00      	cmp	r3, #0
    e484:	d114      	bne.n	e4b0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    e486:	4b0e      	ldr	r3, [pc, #56]	; (e4c0 <system_apb_clock_set_mask+0x58>)
    e488:	4a0d      	ldr	r2, [pc, #52]	; (e4c0 <system_apb_clock_set_mask+0x58>)
    e48a:	6991      	ldr	r1, [r2, #24]
    e48c:	683a      	ldr	r2, [r7, #0]
    e48e:	430a      	orrs	r2, r1
    e490:	619a      	str	r2, [r3, #24]
			break;
    e492:	e00f      	b.n	e4b4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    e494:	4b0a      	ldr	r3, [pc, #40]	; (e4c0 <system_apb_clock_set_mask+0x58>)
    e496:	4a0a      	ldr	r2, [pc, #40]	; (e4c0 <system_apb_clock_set_mask+0x58>)
    e498:	69d1      	ldr	r1, [r2, #28]
    e49a:	683a      	ldr	r2, [r7, #0]
    e49c:	430a      	orrs	r2, r1
    e49e:	61da      	str	r2, [r3, #28]
			break;
    e4a0:	e008      	b.n	e4b4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    e4a2:	4b07      	ldr	r3, [pc, #28]	; (e4c0 <system_apb_clock_set_mask+0x58>)
    e4a4:	4a06      	ldr	r2, [pc, #24]	; (e4c0 <system_apb_clock_set_mask+0x58>)
    e4a6:	6a11      	ldr	r1, [r2, #32]
    e4a8:	683a      	ldr	r2, [r7, #0]
    e4aa:	430a      	orrs	r2, r1
    e4ac:	621a      	str	r2, [r3, #32]
			break;
    e4ae:	e001      	b.n	e4b4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    e4b0:	2317      	movs	r3, #23
    e4b2:	e000      	b.n	e4b6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    e4b4:	2300      	movs	r3, #0
}
    e4b6:	0018      	movs	r0, r3
    e4b8:	46bd      	mov	sp, r7
    e4ba:	b002      	add	sp, #8
    e4bc:	bd80      	pop	{r7, pc}
    e4be:	46c0      	nop			; (mov r8, r8)
    e4c0:	40000400 	.word	0x40000400

0000e4c4 <system_pinmux_get_config_defaults>:
{
    e4c4:	b580      	push	{r7, lr}
    e4c6:	b082      	sub	sp, #8
    e4c8:	af00      	add	r7, sp, #0
    e4ca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    e4cc:	687b      	ldr	r3, [r7, #4]
    e4ce:	2280      	movs	r2, #128	; 0x80
    e4d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    e4d2:	687b      	ldr	r3, [r7, #4]
    e4d4:	2200      	movs	r2, #0
    e4d6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    e4d8:	687b      	ldr	r3, [r7, #4]
    e4da:	2201      	movs	r2, #1
    e4dc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    e4de:	687b      	ldr	r3, [r7, #4]
    e4e0:	2200      	movs	r2, #0
    e4e2:	70da      	strb	r2, [r3, #3]
}
    e4e4:	46c0      	nop			; (mov r8, r8)
    e4e6:	46bd      	mov	sp, r7
    e4e8:	b002      	add	sp, #8
    e4ea:	bd80      	pop	{r7, pc}

0000e4ec <system_is_debugger_present>:
{
    e4ec:	b580      	push	{r7, lr}
    e4ee:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    e4f0:	4b05      	ldr	r3, [pc, #20]	; (e508 <system_is_debugger_present+0x1c>)
    e4f2:	789b      	ldrb	r3, [r3, #2]
    e4f4:	b2db      	uxtb	r3, r3
    e4f6:	001a      	movs	r2, r3
    e4f8:	2302      	movs	r3, #2
    e4fa:	4013      	ands	r3, r2
    e4fc:	1e5a      	subs	r2, r3, #1
    e4fe:	4193      	sbcs	r3, r2
    e500:	b2db      	uxtb	r3, r3
}
    e502:	0018      	movs	r0, r3
    e504:	46bd      	mov	sp, r7
    e506:	bd80      	pop	{r7, pc}
    e508:	41002000 	.word	0x41002000

0000e50c <i2c_master_is_syncing>:
{
    e50c:	b580      	push	{r7, lr}
    e50e:	b084      	sub	sp, #16
    e510:	af00      	add	r7, sp, #0
    e512:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    e514:	687b      	ldr	r3, [r7, #4]
    e516:	681b      	ldr	r3, [r3, #0]
    e518:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    e51a:	68fb      	ldr	r3, [r7, #12]
    e51c:	69db      	ldr	r3, [r3, #28]
    e51e:	2207      	movs	r2, #7
    e520:	4013      	ands	r3, r2
    e522:	1e5a      	subs	r2, r3, #1
    e524:	4193      	sbcs	r3, r2
    e526:	b2db      	uxtb	r3, r3
}
    e528:	0018      	movs	r0, r3
    e52a:	46bd      	mov	sp, r7
    e52c:	b004      	add	sp, #16
    e52e:	bd80      	pop	{r7, pc}

0000e530 <_i2c_master_wait_for_sync>:
{
    e530:	b580      	push	{r7, lr}
    e532:	b082      	sub	sp, #8
    e534:	af00      	add	r7, sp, #0
    e536:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    e538:	46c0      	nop			; (mov r8, r8)
    e53a:	687b      	ldr	r3, [r7, #4]
    e53c:	0018      	movs	r0, r3
    e53e:	4b04      	ldr	r3, [pc, #16]	; (e550 <_i2c_master_wait_for_sync+0x20>)
    e540:	4798      	blx	r3
    e542:	1e03      	subs	r3, r0, #0
    e544:	d1f9      	bne.n	e53a <_i2c_master_wait_for_sync+0xa>
}
    e546:	46c0      	nop			; (mov r8, r8)
    e548:	46bd      	mov	sp, r7
    e54a:	b002      	add	sp, #8
    e54c:	bd80      	pop	{r7, pc}
    e54e:	46c0      	nop			; (mov r8, r8)
    e550:	0000e50d 	.word	0x0000e50d

0000e554 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    e554:	b5f0      	push	{r4, r5, r6, r7, lr}
    e556:	b097      	sub	sp, #92	; 0x5c
    e558:	af00      	add	r7, sp, #0
    e55a:	6178      	str	r0, [r7, #20]
    e55c:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    e55e:	2300      	movs	r3, #0
    e560:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    e562:	2300      	movs	r3, #0
    e564:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    e566:	2300      	movs	r3, #0
    e568:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    e56a:	233b      	movs	r3, #59	; 0x3b
    e56c:	2210      	movs	r2, #16
    e56e:	4694      	mov	ip, r2
    e570:	44bc      	add	ip, r7
    e572:	4463      	add	r3, ip
    e574:	2200      	movs	r2, #0
    e576:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    e578:	697b      	ldr	r3, [r7, #20]
    e57a:	681b      	ldr	r3, [r3, #0]
    e57c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    e57e:	697b      	ldr	r3, [r7, #20]
    e580:	681b      	ldr	r3, [r3, #0]
    e582:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    e584:	2323      	movs	r3, #35	; 0x23
    e586:	2210      	movs	r2, #16
    e588:	18ba      	adds	r2, r7, r2
    e58a:	18d4      	adds	r4, r2, r3
    e58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e58e:	0018      	movs	r0, r3
    e590:	4bc0      	ldr	r3, [pc, #768]	; (e894 <_i2c_master_set_config+0x340>)
    e592:	4798      	blx	r3
    e594:	0003      	movs	r3, r0
    e596:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    e598:	230c      	movs	r3, #12
    e59a:	2210      	movs	r2, #16
    e59c:	4694      	mov	ip, r2
    e59e:	44bc      	add	ip, r7
    e5a0:	4463      	add	r3, ip
    e5a2:	0018      	movs	r0, r3
    e5a4:	4bbc      	ldr	r3, [pc, #752]	; (e898 <_i2c_master_set_config+0x344>)
    e5a6:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    e5a8:	693b      	ldr	r3, [r7, #16]
    e5aa:	69db      	ldr	r3, [r3, #28]
    e5ac:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    e5ae:	693b      	ldr	r3, [r7, #16]
    e5b0:	6a1b      	ldr	r3, [r3, #32]
    e5b2:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    e5b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e5b6:	2b00      	cmp	r3, #0
    e5b8:	d106      	bne.n	e5c8 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    e5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e5bc:	2100      	movs	r1, #0
    e5be:	0018      	movs	r0, r3
    e5c0:	4bb6      	ldr	r3, [pc, #728]	; (e89c <_i2c_master_set_config+0x348>)
    e5c2:	4798      	blx	r3
    e5c4:	0003      	movs	r3, r0
    e5c6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    e5c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e5ca:	b2da      	uxtb	r2, r3
    e5cc:	230c      	movs	r3, #12
    e5ce:	2110      	movs	r1, #16
    e5d0:	468c      	mov	ip, r1
    e5d2:	44bc      	add	ip, r7
    e5d4:	4463      	add	r3, ip
    e5d6:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    e5d8:	230c      	movs	r3, #12
    e5da:	2210      	movs	r2, #16
    e5dc:	4694      	mov	ip, r2
    e5de:	44bc      	add	ip, r7
    e5e0:	4463      	add	r3, ip
    e5e2:	2202      	movs	r2, #2
    e5e4:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    e5e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e5e8:	0c1b      	lsrs	r3, r3, #16
    e5ea:	b2db      	uxtb	r3, r3
    e5ec:	220c      	movs	r2, #12
    e5ee:	2110      	movs	r1, #16
    e5f0:	468c      	mov	ip, r1
    e5f2:	44bc      	add	ip, r7
    e5f4:	4462      	add	r2, ip
    e5f6:	0011      	movs	r1, r2
    e5f8:	0018      	movs	r0, r3
    e5fa:	4ba9      	ldr	r3, [pc, #676]	; (e8a0 <_i2c_master_set_config+0x34c>)
    e5fc:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    e5fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e600:	2b00      	cmp	r3, #0
    e602:	d106      	bne.n	e612 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    e604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e606:	2101      	movs	r1, #1
    e608:	0018      	movs	r0, r3
    e60a:	4ba4      	ldr	r3, [pc, #656]	; (e89c <_i2c_master_set_config+0x348>)
    e60c:	4798      	blx	r3
    e60e:	0003      	movs	r3, r0
    e610:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    e612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e614:	b2da      	uxtb	r2, r3
    e616:	230c      	movs	r3, #12
    e618:	2110      	movs	r1, #16
    e61a:	468c      	mov	ip, r1
    e61c:	44bc      	add	ip, r7
    e61e:	4463      	add	r3, ip
    e620:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    e622:	230c      	movs	r3, #12
    e624:	2210      	movs	r2, #16
    e626:	4694      	mov	ip, r2
    e628:	44bc      	add	ip, r7
    e62a:	4463      	add	r3, ip
    e62c:	2202      	movs	r2, #2
    e62e:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    e630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e632:	0c1b      	lsrs	r3, r3, #16
    e634:	b2db      	uxtb	r3, r3
    e636:	220c      	movs	r2, #12
    e638:	2110      	movs	r1, #16
    e63a:	468c      	mov	ip, r1
    e63c:	44bc      	add	ip, r7
    e63e:	4462      	add	r2, ip
    e640:	0011      	movs	r1, r2
    e642:	0018      	movs	r0, r3
    e644:	4b96      	ldr	r3, [pc, #600]	; (e8a0 <_i2c_master_set_config+0x34c>)
    e646:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    e648:	693b      	ldr	r3, [r7, #16]
    e64a:	8a9a      	ldrh	r2, [r3, #20]
    e64c:	697b      	ldr	r3, [r7, #20]
    e64e:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    e650:	693b      	ldr	r3, [r7, #16]
    e652:	8ada      	ldrh	r2, [r3, #22]
    e654:	697b      	ldr	r3, [r7, #20]
    e656:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    e658:	693b      	ldr	r3, [r7, #16]
    e65a:	7e1b      	ldrb	r3, [r3, #24]
    e65c:	2b00      	cmp	r3, #0
    e65e:	d103      	bne.n	e668 <_i2c_master_set_config+0x114>
    e660:	4b90      	ldr	r3, [pc, #576]	; (e8a4 <_i2c_master_set_config+0x350>)
    e662:	4798      	blx	r3
    e664:	1e03      	subs	r3, r0, #0
    e666:	d002      	beq.n	e66e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    e668:	2380      	movs	r3, #128	; 0x80
    e66a:	657b      	str	r3, [r7, #84]	; 0x54
    e66c:	e001      	b.n	e672 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    e66e:	2300      	movs	r3, #0
    e670:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    e672:	693b      	ldr	r3, [r7, #16]
    e674:	691b      	ldr	r3, [r3, #16]
    e676:	2b00      	cmp	r3, #0
    e678:	d004      	beq.n	e684 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    e67a:	693b      	ldr	r3, [r7, #16]
    e67c:	691b      	ldr	r3, [r3, #16]
    e67e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    e680:	4313      	orrs	r3, r2
    e682:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    e684:	693b      	ldr	r3, [r7, #16]
    e686:	689b      	ldr	r3, [r3, #8]
    e688:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    e68a:	4313      	orrs	r3, r2
    e68c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    e68e:	693b      	ldr	r3, [r7, #16]
    e690:	2224      	movs	r2, #36	; 0x24
    e692:	5c9b      	ldrb	r3, [r3, r2]
    e694:	2b00      	cmp	r3, #0
    e696:	d004      	beq.n	e6a2 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    e698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    e69a:	2280      	movs	r2, #128	; 0x80
    e69c:	05d2      	lsls	r2, r2, #23
    e69e:	4313      	orrs	r3, r2
    e6a0:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    e6a2:	693b      	ldr	r3, [r7, #16]
    e6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e6a6:	2b00      	cmp	r3, #0
    e6a8:	d004      	beq.n	e6b4 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    e6aa:	693b      	ldr	r3, [r7, #16]
    e6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e6ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    e6b0:	4313      	orrs	r3, r2
    e6b2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    e6b4:	693b      	ldr	r3, [r7, #16]
    e6b6:	222c      	movs	r2, #44	; 0x2c
    e6b8:	5c9b      	ldrb	r3, [r3, r2]
    e6ba:	2b00      	cmp	r3, #0
    e6bc:	d105      	bne.n	e6ca <_i2c_master_set_config+0x176>
    e6be:	693b      	ldr	r3, [r7, #16]
    e6c0:	689a      	ldr	r2, [r3, #8]
    e6c2:	2380      	movs	r3, #128	; 0x80
    e6c4:	049b      	lsls	r3, r3, #18
    e6c6:	429a      	cmp	r2, r3
    e6c8:	d104      	bne.n	e6d4 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    e6ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    e6cc:	2280      	movs	r2, #128	; 0x80
    e6ce:	0512      	lsls	r2, r2, #20
    e6d0:	4313      	orrs	r3, r2
    e6d2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    e6d4:	693b      	ldr	r3, [r7, #16]
    e6d6:	222d      	movs	r2, #45	; 0x2d
    e6d8:	5c9b      	ldrb	r3, [r3, r2]
    e6da:	2b00      	cmp	r3, #0
    e6dc:	d004      	beq.n	e6e8 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    e6de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    e6e0:	2280      	movs	r2, #128	; 0x80
    e6e2:	0412      	lsls	r2, r2, #16
    e6e4:	4313      	orrs	r3, r2
    e6e6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    e6e8:	693b      	ldr	r3, [r7, #16]
    e6ea:	222e      	movs	r2, #46	; 0x2e
    e6ec:	5c9b      	ldrb	r3, [r3, r2]
    e6ee:	2b00      	cmp	r3, #0
    e6f0:	d004      	beq.n	e6fc <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    e6f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    e6f4:	2280      	movs	r2, #128	; 0x80
    e6f6:	03d2      	lsls	r2, r2, #15
    e6f8:	4313      	orrs	r3, r2
    e6fa:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    e6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e6fe:	681a      	ldr	r2, [r3, #0]
    e700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    e702:	431a      	orrs	r2, r3
    e704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e706:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    e708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e70a:	2280      	movs	r2, #128	; 0x80
    e70c:	0052      	lsls	r2, r2, #1
    e70e:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    e710:	2323      	movs	r3, #35	; 0x23
    e712:	2210      	movs	r2, #16
    e714:	4694      	mov	ip, r2
    e716:	44bc      	add	ip, r7
    e718:	4463      	add	r3, ip
    e71a:	781b      	ldrb	r3, [r3, #0]
    e71c:	3314      	adds	r3, #20
    e71e:	b2db      	uxtb	r3, r3
    e720:	0018      	movs	r0, r3
    e722:	4b61      	ldr	r3, [pc, #388]	; (e8a8 <_i2c_master_set_config+0x354>)
    e724:	4798      	blx	r3
    e726:	0003      	movs	r3, r0
    e728:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    e72a:	693b      	ldr	r3, [r7, #16]
    e72c:	681b      	ldr	r3, [r3, #0]
    e72e:	22fa      	movs	r2, #250	; 0xfa
    e730:	0092      	lsls	r2, r2, #2
    e732:	4353      	muls	r3, r2
    e734:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    e736:	693b      	ldr	r3, [r7, #16]
    e738:	685b      	ldr	r3, [r3, #4]
    e73a:	22fa      	movs	r2, #250	; 0xfa
    e73c:	0092      	lsls	r2, r2, #2
    e73e:	4353      	muls	r3, r2
    e740:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    e742:	693b      	ldr	r3, [r7, #16]
    e744:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    e746:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    e748:	4b58      	ldr	r3, [pc, #352]	; (e8ac <_i2c_master_set_config+0x358>)
    e74a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e74c:	4798      	blx	r3
    e74e:	0005      	movs	r5, r0
    e750:	000e      	movs	r6, r1
    e752:	4b56      	ldr	r3, [pc, #344]	; (e8ac <_i2c_master_set_config+0x358>)
    e754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e756:	4798      	blx	r3
    e758:	60b8      	str	r0, [r7, #8]
    e75a:	60f9      	str	r1, [r7, #12]
    e75c:	4b53      	ldr	r3, [pc, #332]	; (e8ac <_i2c_master_set_config+0x358>)
    e75e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e760:	4798      	blx	r3
    e762:	4c53      	ldr	r4, [pc, #332]	; (e8b0 <_i2c_master_set_config+0x35c>)
    e764:	4a53      	ldr	r2, [pc, #332]	; (e8b4 <_i2c_master_set_config+0x360>)
    e766:	4b54      	ldr	r3, [pc, #336]	; (e8b8 <_i2c_master_set_config+0x364>)
    e768:	47a0      	blx	r4
    e76a:	0003      	movs	r3, r0
    e76c:	000c      	movs	r4, r1
    e76e:	603b      	str	r3, [r7, #0]
    e770:	607c      	str	r4, [r7, #4]
    e772:	4b4e      	ldr	r3, [pc, #312]	; (e8ac <_i2c_master_set_config+0x358>)
    e774:	6a38      	ldr	r0, [r7, #32]
    e776:	4798      	blx	r3
    e778:	0002      	movs	r2, r0
    e77a:	000b      	movs	r3, r1
    e77c:	4c4c      	ldr	r4, [pc, #304]	; (e8b0 <_i2c_master_set_config+0x35c>)
    e77e:	6838      	ldr	r0, [r7, #0]
    e780:	6879      	ldr	r1, [r7, #4]
    e782:	47a0      	blx	r4
    e784:	0003      	movs	r3, r0
    e786:	000c      	movs	r4, r1
    e788:	0018      	movs	r0, r3
    e78a:	0021      	movs	r1, r4
    e78c:	4c4b      	ldr	r4, [pc, #300]	; (e8bc <_i2c_master_set_config+0x368>)
    e78e:	2200      	movs	r2, #0
    e790:	4b4b      	ldr	r3, [pc, #300]	; (e8c0 <_i2c_master_set_config+0x36c>)
    e792:	47a0      	blx	r4
    e794:	0003      	movs	r3, r0
    e796:	000c      	movs	r4, r1
    e798:	001a      	movs	r2, r3
    e79a:	0023      	movs	r3, r4
    e79c:	4c44      	ldr	r4, [pc, #272]	; (e8b0 <_i2c_master_set_config+0x35c>)
    e79e:	68b8      	ldr	r0, [r7, #8]
    e7a0:	68f9      	ldr	r1, [r7, #12]
    e7a2:	47a0      	blx	r4
    e7a4:	0003      	movs	r3, r0
    e7a6:	000c      	movs	r4, r1
    e7a8:	001a      	movs	r2, r3
    e7aa:	0023      	movs	r3, r4
    e7ac:	4c45      	ldr	r4, [pc, #276]	; (e8c4 <_i2c_master_set_config+0x370>)
    e7ae:	0028      	movs	r0, r5
    e7b0:	0031      	movs	r1, r6
    e7b2:	47a0      	blx	r4
    e7b4:	0003      	movs	r3, r0
    e7b6:	000c      	movs	r4, r1
    e7b8:	001d      	movs	r5, r3
    e7ba:	0026      	movs	r6, r4
    e7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e7be:	005a      	lsls	r2, r3, #1
    e7c0:	4b3a      	ldr	r3, [pc, #232]	; (e8ac <_i2c_master_set_config+0x358>)
    e7c2:	0010      	movs	r0, r2
    e7c4:	4798      	blx	r3
    e7c6:	0002      	movs	r2, r0
    e7c8:	000b      	movs	r3, r1
    e7ca:	4c3c      	ldr	r4, [pc, #240]	; (e8bc <_i2c_master_set_config+0x368>)
    e7cc:	0028      	movs	r0, r5
    e7ce:	0031      	movs	r1, r6
    e7d0:	47a0      	blx	r4
    e7d2:	0003      	movs	r3, r0
    e7d4:	000c      	movs	r4, r1
    e7d6:	0018      	movs	r0, r3
    e7d8:	0021      	movs	r1, r4
    e7da:	4c3a      	ldr	r4, [pc, #232]	; (e8c4 <_i2c_master_set_config+0x370>)
    e7dc:	2200      	movs	r2, #0
    e7de:	4b3a      	ldr	r3, [pc, #232]	; (e8c8 <_i2c_master_set_config+0x374>)
    e7e0:	47a0      	blx	r4
    e7e2:	0003      	movs	r3, r0
    e7e4:	000c      	movs	r4, r1
    e7e6:	001d      	movs	r5, r3
    e7e8:	0026      	movs	r6, r4
    e7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e7ec:	005a      	lsls	r2, r3, #1
    e7ee:	4b2f      	ldr	r3, [pc, #188]	; (e8ac <_i2c_master_set_config+0x358>)
    e7f0:	0010      	movs	r0, r2
    e7f2:	4798      	blx	r3
    e7f4:	0002      	movs	r2, r0
    e7f6:	000b      	movs	r3, r1
    e7f8:	4c34      	ldr	r4, [pc, #208]	; (e8cc <_i2c_master_set_config+0x378>)
    e7fa:	0028      	movs	r0, r5
    e7fc:	0031      	movs	r1, r6
    e7fe:	47a0      	blx	r4
    e800:	0003      	movs	r3, r0
    e802:	000c      	movs	r4, r1
    e804:	0019      	movs	r1, r3
    e806:	0022      	movs	r2, r4
    e808:	4b31      	ldr	r3, [pc, #196]	; (e8d0 <_i2c_master_set_config+0x37c>)
    e80a:	0008      	movs	r0, r1
    e80c:	0011      	movs	r1, r2
    e80e:	4798      	blx	r3
    e810:	0003      	movs	r3, r0
    e812:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    e814:	693b      	ldr	r3, [r7, #16]
    e816:	689a      	ldr	r2, [r3, #8]
    e818:	2380      	movs	r3, #128	; 0x80
    e81a:	049b      	lsls	r3, r3, #18
    e81c:	429a      	cmp	r2, r3
    e81e:	d16a      	bne.n	e8f6 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    e820:	4b22      	ldr	r3, [pc, #136]	; (e8ac <_i2c_master_set_config+0x358>)
    e822:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e824:	4798      	blx	r3
    e826:	4c25      	ldr	r4, [pc, #148]	; (e8bc <_i2c_master_set_config+0x368>)
    e828:	0002      	movs	r2, r0
    e82a:	000b      	movs	r3, r1
    e82c:	47a0      	blx	r4
    e82e:	0003      	movs	r3, r0
    e830:	000c      	movs	r4, r1
    e832:	001d      	movs	r5, r3
    e834:	0026      	movs	r6, r4
    e836:	4b1d      	ldr	r3, [pc, #116]	; (e8ac <_i2c_master_set_config+0x358>)
    e838:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e83a:	4798      	blx	r3
    e83c:	4c1c      	ldr	r4, [pc, #112]	; (e8b0 <_i2c_master_set_config+0x35c>)
    e83e:	2200      	movs	r2, #0
    e840:	4b24      	ldr	r3, [pc, #144]	; (e8d4 <_i2c_master_set_config+0x380>)
    e842:	47a0      	blx	r4
    e844:	0003      	movs	r3, r0
    e846:	000c      	movs	r4, r1
    e848:	001a      	movs	r2, r3
    e84a:	0023      	movs	r3, r4
    e84c:	4c1f      	ldr	r4, [pc, #124]	; (e8cc <_i2c_master_set_config+0x378>)
    e84e:	0028      	movs	r0, r5
    e850:	0031      	movs	r1, r6
    e852:	47a0      	blx	r4
    e854:	0003      	movs	r3, r0
    e856:	000c      	movs	r4, r1
    e858:	0018      	movs	r0, r3
    e85a:	0021      	movs	r1, r4
    e85c:	4c19      	ldr	r4, [pc, #100]	; (e8c4 <_i2c_master_set_config+0x370>)
    e85e:	2200      	movs	r2, #0
    e860:	4b19      	ldr	r3, [pc, #100]	; (e8c8 <_i2c_master_set_config+0x374>)
    e862:	47a0      	blx	r4
    e864:	0003      	movs	r3, r0
    e866:	000c      	movs	r4, r1
    e868:	0019      	movs	r1, r3
    e86a:	0022      	movs	r2, r4
    e86c:	4b18      	ldr	r3, [pc, #96]	; (e8d0 <_i2c_master_set_config+0x37c>)
    e86e:	0008      	movs	r0, r1
    e870:	0011      	movs	r1, r2
    e872:	4798      	blx	r3
    e874:	0003      	movs	r3, r0
    e876:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    e878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e87a:	2b00      	cmp	r3, #0
    e87c:	d02e      	beq.n	e8dc <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    e87e:	4b16      	ldr	r3, [pc, #88]	; (e8d8 <_i2c_master_set_config+0x384>)
    e880:	6a79      	ldr	r1, [r7, #36]	; 0x24
    e882:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e884:	4798      	blx	r3
    e886:	0003      	movs	r3, r0
    e888:	1e9a      	subs	r2, r3, #2
    e88a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e88c:	1ad3      	subs	r3, r2, r3
    e88e:	653b      	str	r3, [r7, #80]	; 0x50
    e890:	e031      	b.n	e8f6 <_i2c_master_set_config+0x3a2>
    e892:	46c0      	nop			; (mov r8, r8)
    e894:	0000fab5 	.word	0x0000fab5
    e898:	0000e4c5 	.word	0x0000e4c5
    e89c:	0000f8f9 	.word	0x0000f8f9
    e8a0:	000119cd 	.word	0x000119cd
    e8a4:	0000e4ed 	.word	0x0000e4ed
    e8a8:	00011805 	.word	0x00011805
    e8ac:	0001878d 	.word	0x0001878d
    e8b0:	00017b35 	.word	0x00017b35
    e8b4:	e826d695 	.word	0xe826d695
    e8b8:	3e112e0b 	.word	0x3e112e0b
    e8bc:	00016cad 	.word	0x00016cad
    e8c0:	40240000 	.word	0x40240000
    e8c4:	00018035 	.word	0x00018035
    e8c8:	3ff00000 	.word	0x3ff00000
    e8cc:	000172cd 	.word	0x000172cd
    e8d0:	000186a1 	.word	0x000186a1
    e8d4:	40080000 	.word	0x40080000
    e8d8:	00016381 	.word	0x00016381
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    e8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e8de:	005a      	lsls	r2, r3, #1
    e8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e8e2:	18d3      	adds	r3, r2, r3
    e8e4:	1e5a      	subs	r2, r3, #1
    e8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e8e8:	0059      	lsls	r1, r3, #1
    e8ea:	4b1d      	ldr	r3, [pc, #116]	; (e960 <_i2c_master_set_config+0x40c>)
    e8ec:	0010      	movs	r0, r2
    e8ee:	4798      	blx	r3
    e8f0:	0003      	movs	r3, r0
    e8f2:	3b01      	subs	r3, #1
    e8f4:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    e8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e8f8:	2bff      	cmp	r3, #255	; 0xff
    e8fa:	dc08      	bgt.n	e90e <_i2c_master_set_config+0x3ba>
    e8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e8fe:	2b00      	cmp	r3, #0
    e900:	db05      	blt.n	e90e <_i2c_master_set_config+0x3ba>
    e902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e904:	2bff      	cmp	r3, #255	; 0xff
    e906:	dc02      	bgt.n	e90e <_i2c_master_set_config+0x3ba>
    e908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e90a:	2b00      	cmp	r3, #0
    e90c:	da06      	bge.n	e91c <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    e90e:	233b      	movs	r3, #59	; 0x3b
    e910:	2210      	movs	r2, #16
    e912:	4694      	mov	ip, r2
    e914:	44bc      	add	ip, r7
    e916:	4463      	add	r3, ip
    e918:	2240      	movs	r2, #64	; 0x40
    e91a:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    e91c:	233b      	movs	r3, #59	; 0x3b
    e91e:	2210      	movs	r2, #16
    e920:	4694      	mov	ip, r2
    e922:	44bc      	add	ip, r7
    e924:	4463      	add	r3, ip
    e926:	781b      	ldrb	r3, [r3, #0]
    e928:	2b40      	cmp	r3, #64	; 0x40
    e92a:	d00e      	beq.n	e94a <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    e92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e92e:	22ff      	movs	r2, #255	; 0xff
    e930:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    e932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e934:	041b      	lsls	r3, r3, #16
    e936:	0019      	movs	r1, r3
    e938:	23ff      	movs	r3, #255	; 0xff
    e93a:	041b      	lsls	r3, r3, #16
    e93c:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    e93e:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    e940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    e942:	0612      	lsls	r2, r2, #24
    e944:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    e946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e948:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    e94a:	233b      	movs	r3, #59	; 0x3b
    e94c:	2210      	movs	r2, #16
    e94e:	4694      	mov	ip, r2
    e950:	44bc      	add	ip, r7
    e952:	4463      	add	r3, ip
    e954:	781b      	ldrb	r3, [r3, #0]
}
    e956:	0018      	movs	r0, r3
    e958:	46bd      	mov	sp, r7
    e95a:	b017      	add	sp, #92	; 0x5c
    e95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e95e:	46c0      	nop			; (mov r8, r8)
    e960:	00016381 	.word	0x00016381

0000e964 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    e964:	b590      	push	{r4, r7, lr}
    e966:	b08b      	sub	sp, #44	; 0x2c
    e968:	af00      	add	r7, sp, #0
    e96a:	60f8      	str	r0, [r7, #12]
    e96c:	60b9      	str	r1, [r7, #8]
    e96e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    e970:	68fb      	ldr	r3, [r7, #12]
    e972:	68ba      	ldr	r2, [r7, #8]
    e974:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    e976:	68fb      	ldr	r3, [r7, #12]
    e978:	681b      	ldr	r3, [r3, #0]
    e97a:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    e97c:	68fb      	ldr	r3, [r7, #12]
    e97e:	681b      	ldr	r3, [r3, #0]
    e980:	0018      	movs	r0, r3
    e982:	4b3b      	ldr	r3, [pc, #236]	; (ea70 <i2c_master_init+0x10c>)
    e984:	4798      	blx	r3
    e986:	0003      	movs	r3, r0
    e988:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    e98a:	6a3b      	ldr	r3, [r7, #32]
    e98c:	3302      	adds	r3, #2
    e98e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    e990:	6a3b      	ldr	r3, [r7, #32]
    e992:	3314      	adds	r3, #20
    e994:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    e996:	2201      	movs	r2, #1
    e998:	69fb      	ldr	r3, [r7, #28]
    e99a:	409a      	lsls	r2, r3
    e99c:	0013      	movs	r3, r2
    e99e:	0019      	movs	r1, r3
    e9a0:	2002      	movs	r0, #2
    e9a2:	4b34      	ldr	r3, [pc, #208]	; (ea74 <i2c_master_init+0x110>)
    e9a4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    e9a6:	2314      	movs	r3, #20
    e9a8:	18fb      	adds	r3, r7, r3
    e9aa:	0018      	movs	r0, r3
    e9ac:	4b32      	ldr	r3, [pc, #200]	; (ea78 <i2c_master_init+0x114>)
    e9ae:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    e9b0:	687b      	ldr	r3, [r7, #4]
    e9b2:	7b1a      	ldrb	r2, [r3, #12]
    e9b4:	2314      	movs	r3, #20
    e9b6:	18fb      	adds	r3, r7, r3
    e9b8:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    e9ba:	69bb      	ldr	r3, [r7, #24]
    e9bc:	b2db      	uxtb	r3, r3
    e9be:	2214      	movs	r2, #20
    e9c0:	18ba      	adds	r2, r7, r2
    e9c2:	0011      	movs	r1, r2
    e9c4:	0018      	movs	r0, r3
    e9c6:	4b2d      	ldr	r3, [pc, #180]	; (ea7c <i2c_master_init+0x118>)
    e9c8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    e9ca:	69bb      	ldr	r3, [r7, #24]
    e9cc:	b2db      	uxtb	r3, r3
    e9ce:	0018      	movs	r0, r3
    e9d0:	4b2b      	ldr	r3, [pc, #172]	; (ea80 <i2c_master_init+0x11c>)
    e9d2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    e9d4:	687b      	ldr	r3, [r7, #4]
    e9d6:	7b1b      	ldrb	r3, [r3, #12]
    e9d8:	2100      	movs	r1, #0
    e9da:	0018      	movs	r0, r3
    e9dc:	4b29      	ldr	r3, [pc, #164]	; (ea84 <i2c_master_init+0x120>)
    e9de:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    e9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e9e2:	681b      	ldr	r3, [r3, #0]
    e9e4:	2202      	movs	r2, #2
    e9e6:	4013      	ands	r3, r2
    e9e8:	d001      	beq.n	e9ee <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    e9ea:	231c      	movs	r3, #28
    e9ec:	e03b      	b.n	ea66 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    e9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e9f0:	681b      	ldr	r3, [r3, #0]
    e9f2:	2201      	movs	r2, #1
    e9f4:	4013      	ands	r3, r2
    e9f6:	d001      	beq.n	e9fc <i2c_master_init+0x98>
		return STATUS_BUSY;
    e9f8:	2305      	movs	r3, #5
    e9fa:	e034      	b.n	ea66 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    e9fc:	68fb      	ldr	r3, [r7, #12]
    e9fe:	681b      	ldr	r3, [r3, #0]
    ea00:	2217      	movs	r2, #23
    ea02:	18bc      	adds	r4, r7, r2
    ea04:	0018      	movs	r0, r3
    ea06:	4b1a      	ldr	r3, [pc, #104]	; (ea70 <i2c_master_init+0x10c>)
    ea08:	4798      	blx	r3
    ea0a:	0003      	movs	r3, r0
    ea0c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    ea0e:	4a1e      	ldr	r2, [pc, #120]	; (ea88 <i2c_master_init+0x124>)
    ea10:	2317      	movs	r3, #23
    ea12:	18fb      	adds	r3, r7, r3
    ea14:	781b      	ldrb	r3, [r3, #0]
    ea16:	0011      	movs	r1, r2
    ea18:	0018      	movs	r0, r3
    ea1a:	4b1c      	ldr	r3, [pc, #112]	; (ea8c <i2c_master_init+0x128>)
    ea1c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    ea1e:	2317      	movs	r3, #23
    ea20:	18fb      	adds	r3, r7, r3
    ea22:	781a      	ldrb	r2, [r3, #0]
    ea24:	4b1a      	ldr	r3, [pc, #104]	; (ea90 <i2c_master_init+0x12c>)
    ea26:	0092      	lsls	r2, r2, #2
    ea28:	68f9      	ldr	r1, [r7, #12]
    ea2a:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    ea2c:	68fb      	ldr	r3, [r7, #12]
    ea2e:	2200      	movs	r2, #0
    ea30:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    ea32:	68fb      	ldr	r3, [r7, #12]
    ea34:	2200      	movs	r2, #0
    ea36:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    ea38:	68fb      	ldr	r3, [r7, #12]
    ea3a:	2200      	movs	r2, #0
    ea3c:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    ea3e:	68fb      	ldr	r3, [r7, #12]
    ea40:	2200      	movs	r2, #0
    ea42:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    ea44:	68fb      	ldr	r3, [r7, #12]
    ea46:	2225      	movs	r2, #37	; 0x25
    ea48:	2100      	movs	r1, #0
    ea4a:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    ea4c:	68fb      	ldr	r3, [r7, #12]
    ea4e:	2200      	movs	r2, #0
    ea50:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    ea52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ea54:	2214      	movs	r2, #20
    ea56:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    ea58:	687a      	ldr	r2, [r7, #4]
    ea5a:	68fb      	ldr	r3, [r7, #12]
    ea5c:	0011      	movs	r1, r2
    ea5e:	0018      	movs	r0, r3
    ea60:	4b0c      	ldr	r3, [pc, #48]	; (ea94 <i2c_master_init+0x130>)
    ea62:	4798      	blx	r3
    ea64:	0003      	movs	r3, r0
}
    ea66:	0018      	movs	r0, r3
    ea68:	46bd      	mov	sp, r7
    ea6a:	b00b      	add	sp, #44	; 0x2c
    ea6c:	bd90      	pop	{r4, r7, pc}
    ea6e:	46c0      	nop			; (mov r8, r8)
    ea70:	0000fab5 	.word	0x0000fab5
    ea74:	0000e469 	.word	0x0000e469
    ea78:	0000e451 	.word	0x0000e451
    ea7c:	000116e1 	.word	0x000116e1
    ea80:	00011725 	.word	0x00011725
    ea84:	0000f86d 	.word	0x0000f86d
    ea88:	0000f2c5 	.word	0x0000f2c5
    ea8c:	000106fd 	.word	0x000106fd
    ea90:	20000904 	.word	0x20000904
    ea94:	0000e555 	.word	0x0000e555

0000ea98 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    ea98:	b580      	push	{r7, lr}
    ea9a:	b084      	sub	sp, #16
    ea9c:	af00      	add	r7, sp, #0
    ea9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    eaa0:	687b      	ldr	r3, [r7, #4]
    eaa2:	681b      	ldr	r3, [r3, #0]
    eaa4:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    eaa6:	68fb      	ldr	r3, [r7, #12]
    eaa8:	7e1b      	ldrb	r3, [r3, #24]
    eaaa:	b2db      	uxtb	r3, r3
    eaac:	001a      	movs	r2, r3
    eaae:	2302      	movs	r3, #2
    eab0:	4013      	ands	r3, r2
    eab2:	d00b      	beq.n	eacc <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    eab4:	68fb      	ldr	r3, [r7, #12]
    eab6:	2202      	movs	r2, #2
    eab8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    eaba:	68fb      	ldr	r3, [r7, #12]
    eabc:	8b5b      	ldrh	r3, [r3, #26]
    eabe:	b29b      	uxth	r3, r3
    eac0:	001a      	movs	r2, r3
    eac2:	2302      	movs	r3, #2
    eac4:	4013      	ands	r3, r2
    eac6:	d011      	beq.n	eaec <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    eac8:	2341      	movs	r3, #65	; 0x41
    eaca:	e010      	b.n	eaee <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    eacc:	68fb      	ldr	r3, [r7, #12]
    eace:	8b5b      	ldrh	r3, [r3, #26]
    ead0:	b29b      	uxth	r3, r3
    ead2:	001a      	movs	r2, r3
    ead4:	2304      	movs	r3, #4
    ead6:	4013      	ands	r3, r2
    ead8:	d008      	beq.n	eaec <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    eada:	68fb      	ldr	r3, [r7, #12]
    eadc:	685b      	ldr	r3, [r3, #4]
    eade:	22c0      	movs	r2, #192	; 0xc0
    eae0:	0292      	lsls	r2, r2, #10
    eae2:	431a      	orrs	r2, r3
    eae4:	68fb      	ldr	r3, [r7, #12]
    eae6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    eae8:	2318      	movs	r3, #24
    eaea:	e000      	b.n	eaee <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    eaec:	2300      	movs	r3, #0
}
    eaee:	0018      	movs	r0, r3
    eaf0:	46bd      	mov	sp, r7
    eaf2:	b004      	add	sp, #16
    eaf4:	bd80      	pop	{r7, pc}

0000eaf6 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    eaf6:	b580      	push	{r7, lr}
    eaf8:	b084      	sub	sp, #16
    eafa:	af00      	add	r7, sp, #0
    eafc:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    eafe:	687b      	ldr	r3, [r7, #4]
    eb00:	681b      	ldr	r3, [r3, #0]
    eb02:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    eb04:	230e      	movs	r3, #14
    eb06:	18fb      	adds	r3, r7, r3
    eb08:	2200      	movs	r2, #0
    eb0a:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    eb0c:	e00f      	b.n	eb2e <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    eb0e:	230e      	movs	r3, #14
    eb10:	18fb      	adds	r3, r7, r3
    eb12:	220e      	movs	r2, #14
    eb14:	18ba      	adds	r2, r7, r2
    eb16:	8812      	ldrh	r2, [r2, #0]
    eb18:	3201      	adds	r2, #1
    eb1a:	801a      	strh	r2, [r3, #0]
    eb1c:	687b      	ldr	r3, [r7, #4]
    eb1e:	891b      	ldrh	r3, [r3, #8]
    eb20:	220e      	movs	r2, #14
    eb22:	18ba      	adds	r2, r7, r2
    eb24:	8812      	ldrh	r2, [r2, #0]
    eb26:	429a      	cmp	r2, r3
    eb28:	d301      	bcc.n	eb2e <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    eb2a:	2312      	movs	r3, #18
    eb2c:	e00e      	b.n	eb4c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    eb2e:	68bb      	ldr	r3, [r7, #8]
    eb30:	7e1b      	ldrb	r3, [r3, #24]
    eb32:	b2db      	uxtb	r3, r3
    eb34:	001a      	movs	r2, r3
    eb36:	2301      	movs	r3, #1
    eb38:	4013      	ands	r3, r2
    eb3a:	d106      	bne.n	eb4a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    eb3c:	68bb      	ldr	r3, [r7, #8]
    eb3e:	7e1b      	ldrb	r3, [r3, #24]
    eb40:	b2db      	uxtb	r3, r3
    eb42:	001a      	movs	r2, r3
    eb44:	2302      	movs	r3, #2
    eb46:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    eb48:	d0e1      	beq.n	eb0e <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    eb4a:	2300      	movs	r3, #0
}
    eb4c:	0018      	movs	r0, r3
    eb4e:	46bd      	mov	sp, r7
    eb50:	b004      	add	sp, #16
    eb52:	bd80      	pop	{r7, pc}

0000eb54 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    eb54:	b590      	push	{r4, r7, lr}
    eb56:	b085      	sub	sp, #20
    eb58:	af00      	add	r7, sp, #0
    eb5a:	6078      	str	r0, [r7, #4]
    eb5c:	000a      	movs	r2, r1
    eb5e:	1cfb      	adds	r3, r7, #3
    eb60:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    eb62:	687b      	ldr	r3, [r7, #4]
    eb64:	681b      	ldr	r3, [r3, #0]
    eb66:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    eb68:	68fb      	ldr	r3, [r7, #12]
    eb6a:	685b      	ldr	r3, [r3, #4]
    eb6c:	2280      	movs	r2, #128	; 0x80
    eb6e:	02d2      	lsls	r2, r2, #11
    eb70:	431a      	orrs	r2, r3
    eb72:	68fb      	ldr	r3, [r7, #12]
    eb74:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    eb76:	1cfb      	adds	r3, r7, #3
    eb78:	781a      	ldrb	r2, [r3, #0]
    eb7a:	68fb      	ldr	r3, [r7, #12]
    eb7c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    eb7e:	230b      	movs	r3, #11
    eb80:	18fc      	adds	r4, r7, r3
    eb82:	687b      	ldr	r3, [r7, #4]
    eb84:	0018      	movs	r0, r3
    eb86:	4b07      	ldr	r3, [pc, #28]	; (eba4 <_i2c_master_send_hs_master_code+0x50>)
    eb88:	4798      	blx	r3
    eb8a:	0003      	movs	r3, r0
    eb8c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    eb8e:	68fb      	ldr	r3, [r7, #12]
    eb90:	2201      	movs	r2, #1
    eb92:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    eb94:	230b      	movs	r3, #11
    eb96:	18fb      	adds	r3, r7, r3
    eb98:	781b      	ldrb	r3, [r3, #0]
}
    eb9a:	0018      	movs	r0, r3
    eb9c:	46bd      	mov	sp, r7
    eb9e:	b005      	add	sp, #20
    eba0:	bd90      	pop	{r4, r7, pc}
    eba2:	46c0      	nop			; (mov r8, r8)
    eba4:	0000eaf7 	.word	0x0000eaf7

0000eba8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    eba8:	b590      	push	{r4, r7, lr}
    ebaa:	b087      	sub	sp, #28
    ebac:	af00      	add	r7, sp, #0
    ebae:	6078      	str	r0, [r7, #4]
    ebb0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    ebb2:	687b      	ldr	r3, [r7, #4]
    ebb4:	681b      	ldr	r3, [r3, #0]
    ebb6:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    ebb8:	2314      	movs	r3, #20
    ebba:	18fb      	adds	r3, r7, r3
    ebbc:	683a      	ldr	r2, [r7, #0]
    ebbe:	8852      	ldrh	r2, [r2, #2]
    ebc0:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    ebc2:	2312      	movs	r3, #18
    ebc4:	18fb      	adds	r3, r7, r3
    ebc6:	2200      	movs	r2, #0
    ebc8:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    ebca:	68fb      	ldr	r3, [r7, #12]
    ebcc:	681b      	ldr	r3, [r3, #0]
    ebce:	011b      	lsls	r3, r3, #4
    ebd0:	0fdb      	lsrs	r3, r3, #31
    ebd2:	b2db      	uxtb	r3, r3
    ebd4:	001a      	movs	r2, r3
    ebd6:	230b      	movs	r3, #11
    ebd8:	18fb      	adds	r3, r7, r3
    ebda:	1e51      	subs	r1, r2, #1
    ebdc:	418a      	sbcs	r2, r1
    ebde:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    ebe0:	683b      	ldr	r3, [r7, #0]
    ebe2:	7a5b      	ldrb	r3, [r3, #9]
    ebe4:	2b00      	cmp	r3, #0
    ebe6:	d006      	beq.n	ebf6 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    ebe8:	683b      	ldr	r3, [r7, #0]
    ebea:	7a9a      	ldrb	r2, [r3, #10]
    ebec:	687b      	ldr	r3, [r7, #4]
    ebee:	0011      	movs	r1, r2
    ebf0:	0018      	movs	r0, r3
    ebf2:	4b85      	ldr	r3, [pc, #532]	; (ee08 <_i2c_master_read_packet+0x260>)
    ebf4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    ebf6:	68fb      	ldr	r3, [r7, #12]
    ebf8:	685b      	ldr	r3, [r3, #4]
    ebfa:	4a84      	ldr	r2, [pc, #528]	; (ee0c <_i2c_master_read_packet+0x264>)
    ebfc:	401a      	ands	r2, r3
    ebfe:	68fb      	ldr	r3, [r7, #12]
    ec00:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    ec02:	683b      	ldr	r3, [r7, #0]
    ec04:	7a1b      	ldrb	r3, [r3, #8]
    ec06:	2b00      	cmp	r3, #0
    ec08:	d042      	beq.n	ec90 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    ec0a:	683b      	ldr	r3, [r7, #0]
    ec0c:	881b      	ldrh	r3, [r3, #0]
    ec0e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    ec10:	683b      	ldr	r3, [r7, #0]
    ec12:	7a5b      	ldrb	r3, [r3, #9]
    ec14:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    ec16:	4313      	orrs	r3, r2
    ec18:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    ec1a:	2380      	movs	r3, #128	; 0x80
    ec1c:	021b      	lsls	r3, r3, #8
    ec1e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    ec20:	68fb      	ldr	r3, [r7, #12]
    ec22:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    ec24:	2317      	movs	r3, #23
    ec26:	18fc      	adds	r4, r7, r3
    ec28:	687b      	ldr	r3, [r7, #4]
    ec2a:	0018      	movs	r0, r3
    ec2c:	4b78      	ldr	r3, [pc, #480]	; (ee10 <_i2c_master_read_packet+0x268>)
    ec2e:	4798      	blx	r3
    ec30:	0003      	movs	r3, r0
    ec32:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    ec34:	68fb      	ldr	r3, [r7, #12]
    ec36:	685b      	ldr	r3, [r3, #4]
    ec38:	4a74      	ldr	r2, [pc, #464]	; (ee0c <_i2c_master_read_packet+0x264>)
    ec3a:	401a      	ands	r2, r3
    ec3c:	68fb      	ldr	r3, [r7, #12]
    ec3e:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    ec40:	2317      	movs	r3, #23
    ec42:	18fb      	adds	r3, r7, r3
    ec44:	781b      	ldrb	r3, [r3, #0]
    ec46:	2b00      	cmp	r3, #0
    ec48:	d107      	bne.n	ec5a <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    ec4a:	2317      	movs	r3, #23
    ec4c:	18fc      	adds	r4, r7, r3
    ec4e:	687b      	ldr	r3, [r7, #4]
    ec50:	0018      	movs	r0, r3
    ec52:	4b70      	ldr	r3, [pc, #448]	; (ee14 <_i2c_master_read_packet+0x26c>)
    ec54:	4798      	blx	r3
    ec56:	0003      	movs	r3, r0
    ec58:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    ec5a:	2317      	movs	r3, #23
    ec5c:	18fb      	adds	r3, r7, r3
    ec5e:	781b      	ldrb	r3, [r3, #0]
    ec60:	2b00      	cmp	r3, #0
    ec62:	d111      	bne.n	ec88 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    ec64:	683b      	ldr	r3, [r7, #0]
    ec66:	881b      	ldrh	r3, [r3, #0]
    ec68:	0a1b      	lsrs	r3, r3, #8
    ec6a:	b29b      	uxth	r3, r3
    ec6c:	2278      	movs	r2, #120	; 0x78
    ec6e:	4313      	orrs	r3, r2
    ec70:	b29b      	uxth	r3, r3
    ec72:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    ec74:	683b      	ldr	r3, [r7, #0]
    ec76:	7a5b      	ldrb	r3, [r3, #9]
    ec78:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    ec7a:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    ec7c:	2201      	movs	r2, #1
    ec7e:	4313      	orrs	r3, r2
    ec80:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    ec82:	68fb      	ldr	r3, [r7, #12]
    ec84:	625a      	str	r2, [r3, #36]	; 0x24
    ec86:	e00f      	b.n	eca8 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    ec88:	2317      	movs	r3, #23
    ec8a:	18fb      	adds	r3, r7, r3
    ec8c:	781b      	ldrb	r3, [r3, #0]
    ec8e:	e0b6      	b.n	edfe <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    ec90:	683b      	ldr	r3, [r7, #0]
    ec92:	881b      	ldrh	r3, [r3, #0]
    ec94:	005b      	lsls	r3, r3, #1
    ec96:	2201      	movs	r2, #1
    ec98:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    ec9a:	683b      	ldr	r3, [r7, #0]
    ec9c:	7a5b      	ldrb	r3, [r3, #9]
    ec9e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    eca0:	4313      	orrs	r3, r2
    eca2:	001a      	movs	r2, r3
    eca4:	68fb      	ldr	r3, [r7, #12]
    eca6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    eca8:	2317      	movs	r3, #23
    ecaa:	18fc      	adds	r4, r7, r3
    ecac:	687b      	ldr	r3, [r7, #4]
    ecae:	0018      	movs	r0, r3
    ecb0:	4b57      	ldr	r3, [pc, #348]	; (ee10 <_i2c_master_read_packet+0x268>)
    ecb2:	4798      	blx	r3
    ecb4:	0003      	movs	r3, r0
    ecb6:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    ecb8:	230b      	movs	r3, #11
    ecba:	18fb      	adds	r3, r7, r3
    ecbc:	781b      	ldrb	r3, [r3, #0]
    ecbe:	2b00      	cmp	r3, #0
    ecc0:	d00b      	beq.n	ecda <_i2c_master_read_packet+0x132>
    ecc2:	683b      	ldr	r3, [r7, #0]
    ecc4:	885b      	ldrh	r3, [r3, #2]
    ecc6:	2b01      	cmp	r3, #1
    ecc8:	d107      	bne.n	ecda <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    ecca:	68fb      	ldr	r3, [r7, #12]
    eccc:	685b      	ldr	r3, [r3, #4]
    ecce:	2280      	movs	r2, #128	; 0x80
    ecd0:	02d2      	lsls	r2, r2, #11
    ecd2:	431a      	orrs	r2, r3
    ecd4:	68fb      	ldr	r3, [r7, #12]
    ecd6:	605a      	str	r2, [r3, #4]
    ecd8:	e005      	b.n	ece6 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    ecda:	68fb      	ldr	r3, [r7, #12]
    ecdc:	685b      	ldr	r3, [r3, #4]
    ecde:	4a4b      	ldr	r2, [pc, #300]	; (ee0c <_i2c_master_read_packet+0x264>)
    ece0:	401a      	ands	r2, r3
    ece2:	68fb      	ldr	r3, [r7, #12]
    ece4:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    ece6:	2317      	movs	r3, #23
    ece8:	18fb      	adds	r3, r7, r3
    ecea:	781b      	ldrb	r3, [r3, #0]
    ecec:	2b00      	cmp	r3, #0
    ecee:	d107      	bne.n	ed00 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    ecf0:	2317      	movs	r3, #23
    ecf2:	18fc      	adds	r4, r7, r3
    ecf4:	687b      	ldr	r3, [r7, #4]
    ecf6:	0018      	movs	r0, r3
    ecf8:	4b46      	ldr	r3, [pc, #280]	; (ee14 <_i2c_master_read_packet+0x26c>)
    ecfa:	4798      	blx	r3
    ecfc:	0003      	movs	r3, r0
    ecfe:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    ed00:	2317      	movs	r3, #23
    ed02:	18fb      	adds	r3, r7, r3
    ed04:	781b      	ldrb	r3, [r3, #0]
    ed06:	2b00      	cmp	r3, #0
    ed08:	d000      	beq.n	ed0c <_i2c_master_read_packet+0x164>
    ed0a:	e075      	b.n	edf8 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    ed0c:	e04b      	b.n	eda6 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    ed0e:	68fb      	ldr	r3, [r7, #12]
    ed10:	8b5b      	ldrh	r3, [r3, #26]
    ed12:	b29b      	uxth	r3, r3
    ed14:	001a      	movs	r2, r3
    ed16:	2320      	movs	r3, #32
    ed18:	4013      	ands	r3, r2
    ed1a:	d101      	bne.n	ed20 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    ed1c:	2341      	movs	r3, #65	; 0x41
    ed1e:	e06e      	b.n	edfe <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    ed20:	687b      	ldr	r3, [r7, #4]
    ed22:	7adb      	ldrb	r3, [r3, #11]
    ed24:	2b00      	cmp	r3, #0
    ed26:	d01e      	beq.n	ed66 <_i2c_master_read_packet+0x1be>
    ed28:	230b      	movs	r3, #11
    ed2a:	18fb      	adds	r3, r7, r3
    ed2c:	781b      	ldrb	r3, [r3, #0]
    ed2e:	2201      	movs	r2, #1
    ed30:	4053      	eors	r3, r2
    ed32:	b2db      	uxtb	r3, r3
    ed34:	2b00      	cmp	r3, #0
    ed36:	d004      	beq.n	ed42 <_i2c_master_read_packet+0x19a>
    ed38:	2314      	movs	r3, #20
    ed3a:	18fb      	adds	r3, r7, r3
    ed3c:	881b      	ldrh	r3, [r3, #0]
    ed3e:	2b00      	cmp	r3, #0
    ed40:	d009      	beq.n	ed56 <_i2c_master_read_packet+0x1ae>
    ed42:	230b      	movs	r3, #11
    ed44:	18fb      	adds	r3, r7, r3
    ed46:	781b      	ldrb	r3, [r3, #0]
    ed48:	2b00      	cmp	r3, #0
    ed4a:	d00c      	beq.n	ed66 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    ed4c:	2314      	movs	r3, #20
    ed4e:	18fb      	adds	r3, r7, r3
    ed50:	881b      	ldrh	r3, [r3, #0]
    ed52:	2b01      	cmp	r3, #1
    ed54:	d107      	bne.n	ed66 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    ed56:	68fb      	ldr	r3, [r7, #12]
    ed58:	685b      	ldr	r3, [r3, #4]
    ed5a:	2280      	movs	r2, #128	; 0x80
    ed5c:	02d2      	lsls	r2, r2, #11
    ed5e:	431a      	orrs	r2, r3
    ed60:	68fb      	ldr	r3, [r7, #12]
    ed62:	605a      	str	r2, [r3, #4]
    ed64:	e01a      	b.n	ed9c <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    ed66:	687b      	ldr	r3, [r7, #4]
    ed68:	0018      	movs	r0, r3
    ed6a:	4b2b      	ldr	r3, [pc, #172]	; (ee18 <_i2c_master_read_packet+0x270>)
    ed6c:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    ed6e:	683b      	ldr	r3, [r7, #0]
    ed70:	685a      	ldr	r2, [r3, #4]
    ed72:	2312      	movs	r3, #18
    ed74:	18fb      	adds	r3, r7, r3
    ed76:	881b      	ldrh	r3, [r3, #0]
    ed78:	2112      	movs	r1, #18
    ed7a:	1879      	adds	r1, r7, r1
    ed7c:	1c58      	adds	r0, r3, #1
    ed7e:	8008      	strh	r0, [r1, #0]
    ed80:	18d3      	adds	r3, r2, r3
    ed82:	68fa      	ldr	r2, [r7, #12]
    ed84:	2128      	movs	r1, #40	; 0x28
    ed86:	5c52      	ldrb	r2, [r2, r1]
    ed88:	b2d2      	uxtb	r2, r2
    ed8a:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    ed8c:	2317      	movs	r3, #23
    ed8e:	18fc      	adds	r4, r7, r3
    ed90:	687b      	ldr	r3, [r7, #4]
    ed92:	0018      	movs	r0, r3
    ed94:	4b1e      	ldr	r3, [pc, #120]	; (ee10 <_i2c_master_read_packet+0x268>)
    ed96:	4798      	blx	r3
    ed98:	0003      	movs	r3, r0
    ed9a:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    ed9c:	2317      	movs	r3, #23
    ed9e:	18fb      	adds	r3, r7, r3
    eda0:	781b      	ldrb	r3, [r3, #0]
    eda2:	2b00      	cmp	r3, #0
    eda4:	d109      	bne.n	edba <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    eda6:	2314      	movs	r3, #20
    eda8:	18fb      	adds	r3, r7, r3
    edaa:	881b      	ldrh	r3, [r3, #0]
    edac:	2214      	movs	r2, #20
    edae:	18ba      	adds	r2, r7, r2
    edb0:	1e59      	subs	r1, r3, #1
    edb2:	8011      	strh	r1, [r2, #0]
    edb4:	2b00      	cmp	r3, #0
    edb6:	d1aa      	bne.n	ed0e <_i2c_master_read_packet+0x166>
    edb8:	e000      	b.n	edbc <_i2c_master_read_packet+0x214>
				break;
    edba:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    edbc:	687b      	ldr	r3, [r7, #4]
    edbe:	7a9b      	ldrb	r3, [r3, #10]
    edc0:	2b00      	cmp	r3, #0
    edc2:	d00a      	beq.n	edda <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    edc4:	687b      	ldr	r3, [r7, #4]
    edc6:	0018      	movs	r0, r3
    edc8:	4b13      	ldr	r3, [pc, #76]	; (ee18 <_i2c_master_read_packet+0x270>)
    edca:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    edcc:	68fb      	ldr	r3, [r7, #12]
    edce:	685b      	ldr	r3, [r3, #4]
    edd0:	22c0      	movs	r2, #192	; 0xc0
    edd2:	0292      	lsls	r2, r2, #10
    edd4:	431a      	orrs	r2, r3
    edd6:	68fb      	ldr	r3, [r7, #12]
    edd8:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    edda:	687b      	ldr	r3, [r7, #4]
    eddc:	0018      	movs	r0, r3
    edde:	4b0e      	ldr	r3, [pc, #56]	; (ee18 <_i2c_master_read_packet+0x270>)
    ede0:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    ede2:	683b      	ldr	r3, [r7, #0]
    ede4:	685a      	ldr	r2, [r3, #4]
    ede6:	2312      	movs	r3, #18
    ede8:	18fb      	adds	r3, r7, r3
    edea:	881b      	ldrh	r3, [r3, #0]
    edec:	18d3      	adds	r3, r2, r3
    edee:	68fa      	ldr	r2, [r7, #12]
    edf0:	2128      	movs	r1, #40	; 0x28
    edf2:	5c52      	ldrb	r2, [r2, r1]
    edf4:	b2d2      	uxtb	r2, r2
    edf6:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    edf8:	2317      	movs	r3, #23
    edfa:	18fb      	adds	r3, r7, r3
    edfc:	781b      	ldrb	r3, [r3, #0]
}
    edfe:	0018      	movs	r0, r3
    ee00:	46bd      	mov	sp, r7
    ee02:	b007      	add	sp, #28
    ee04:	bd90      	pop	{r4, r7, pc}
    ee06:	46c0      	nop			; (mov r8, r8)
    ee08:	0000eb55 	.word	0x0000eb55
    ee0c:	fffbffff 	.word	0xfffbffff
    ee10:	0000eaf7 	.word	0x0000eaf7
    ee14:	0000ea99 	.word	0x0000ea99
    ee18:	0000e531 	.word	0x0000e531

0000ee1c <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    ee1c:	b580      	push	{r7, lr}
    ee1e:	b082      	sub	sp, #8
    ee20:	af00      	add	r7, sp, #0
    ee22:	6078      	str	r0, [r7, #4]
    ee24:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    ee26:	687b      	ldr	r3, [r7, #4]
    ee28:	8b9b      	ldrh	r3, [r3, #28]
    ee2a:	b29b      	uxth	r3, r3
    ee2c:	2b00      	cmp	r3, #0
    ee2e:	d001      	beq.n	ee34 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    ee30:	2305      	movs	r3, #5
    ee32:	e00c      	b.n	ee4e <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    ee34:	687b      	ldr	r3, [r7, #4]
    ee36:	2201      	movs	r2, #1
    ee38:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    ee3a:	687b      	ldr	r3, [r7, #4]
    ee3c:	2201      	movs	r2, #1
    ee3e:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    ee40:	683a      	ldr	r2, [r7, #0]
    ee42:	687b      	ldr	r3, [r7, #4]
    ee44:	0011      	movs	r1, r2
    ee46:	0018      	movs	r0, r3
    ee48:	4b03      	ldr	r3, [pc, #12]	; (ee58 <i2c_master_read_packet_wait+0x3c>)
    ee4a:	4798      	blx	r3
    ee4c:	0003      	movs	r3, r0
}
    ee4e:	0018      	movs	r0, r3
    ee50:	46bd      	mov	sp, r7
    ee52:	b002      	add	sp, #8
    ee54:	bd80      	pop	{r7, pc}
    ee56:	46c0      	nop			; (mov r8, r8)
    ee58:	0000eba9 	.word	0x0000eba9

0000ee5c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    ee5c:	b590      	push	{r4, r7, lr}
    ee5e:	b087      	sub	sp, #28
    ee60:	af00      	add	r7, sp, #0
    ee62:	6078      	str	r0, [r7, #4]
    ee64:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    ee66:	687b      	ldr	r3, [r7, #4]
    ee68:	681b      	ldr	r3, [r3, #0]
    ee6a:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    ee6c:	2314      	movs	r3, #20
    ee6e:	18fb      	adds	r3, r7, r3
    ee70:	683a      	ldr	r2, [r7, #0]
    ee72:	8852      	ldrh	r2, [r2, #2]
    ee74:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    ee76:	687b      	ldr	r3, [r7, #4]
    ee78:	0018      	movs	r0, r3
    ee7a:	4b51      	ldr	r3, [pc, #324]	; (efc0 <_i2c_master_write_packet+0x164>)
    ee7c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    ee7e:	683b      	ldr	r3, [r7, #0]
    ee80:	7a5b      	ldrb	r3, [r3, #9]
    ee82:	2b00      	cmp	r3, #0
    ee84:	d006      	beq.n	ee94 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    ee86:	683b      	ldr	r3, [r7, #0]
    ee88:	7a9a      	ldrb	r2, [r3, #10]
    ee8a:	687b      	ldr	r3, [r7, #4]
    ee8c:	0011      	movs	r1, r2
    ee8e:	0018      	movs	r0, r3
    ee90:	4b4c      	ldr	r3, [pc, #304]	; (efc4 <_i2c_master_write_packet+0x168>)
    ee92:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    ee94:	68fb      	ldr	r3, [r7, #12]
    ee96:	685b      	ldr	r3, [r3, #4]
    ee98:	4a4b      	ldr	r2, [pc, #300]	; (efc8 <_i2c_master_write_packet+0x16c>)
    ee9a:	401a      	ands	r2, r3
    ee9c:	68fb      	ldr	r3, [r7, #12]
    ee9e:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    eea0:	683b      	ldr	r3, [r7, #0]
    eea2:	7a1b      	ldrb	r3, [r3, #8]
    eea4:	2b00      	cmp	r3, #0
    eea6:	d00d      	beq.n	eec4 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    eea8:	683b      	ldr	r3, [r7, #0]
    eeaa:	881b      	ldrh	r3, [r3, #0]
    eeac:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    eeae:	683b      	ldr	r3, [r7, #0]
    eeb0:	7a5b      	ldrb	r3, [r3, #9]
    eeb2:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    eeb4:	4313      	orrs	r3, r2
    eeb6:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    eeb8:	2380      	movs	r3, #128	; 0x80
    eeba:	021b      	lsls	r3, r3, #8
    eebc:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    eebe:	68fb      	ldr	r3, [r7, #12]
    eec0:	625a      	str	r2, [r3, #36]	; 0x24
    eec2:	e009      	b.n	eed8 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    eec4:	683b      	ldr	r3, [r7, #0]
    eec6:	881b      	ldrh	r3, [r3, #0]
    eec8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    eeca:	683b      	ldr	r3, [r7, #0]
    eecc:	7a5b      	ldrb	r3, [r3, #9]
    eece:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    eed0:	4313      	orrs	r3, r2
    eed2:	001a      	movs	r2, r3
    eed4:	68fb      	ldr	r3, [r7, #12]
    eed6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    eed8:	2317      	movs	r3, #23
    eeda:	18fc      	adds	r4, r7, r3
    eedc:	687b      	ldr	r3, [r7, #4]
    eede:	0018      	movs	r0, r3
    eee0:	4b3a      	ldr	r3, [pc, #232]	; (efcc <_i2c_master_write_packet+0x170>)
    eee2:	4798      	blx	r3
    eee4:	0003      	movs	r3, r0
    eee6:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    eee8:	2317      	movs	r3, #23
    eeea:	18fb      	adds	r3, r7, r3
    eeec:	781b      	ldrb	r3, [r3, #0]
    eeee:	2b00      	cmp	r3, #0
    eef0:	d107      	bne.n	ef02 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    eef2:	2317      	movs	r3, #23
    eef4:	18fc      	adds	r4, r7, r3
    eef6:	687b      	ldr	r3, [r7, #4]
    eef8:	0018      	movs	r0, r3
    eefa:	4b35      	ldr	r3, [pc, #212]	; (efd0 <_i2c_master_write_packet+0x174>)
    eefc:	4798      	blx	r3
    eefe:	0003      	movs	r3, r0
    ef00:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    ef02:	2317      	movs	r3, #23
    ef04:	18fb      	adds	r3, r7, r3
    ef06:	781b      	ldrb	r3, [r3, #0]
    ef08:	2b00      	cmp	r3, #0
    ef0a:	d152      	bne.n	efb2 <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    ef0c:	2312      	movs	r3, #18
    ef0e:	18fb      	adds	r3, r7, r3
    ef10:	2200      	movs	r2, #0
    ef12:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    ef14:	e033      	b.n	ef7e <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    ef16:	68fb      	ldr	r3, [r7, #12]
    ef18:	8b5b      	ldrh	r3, [r3, #26]
    ef1a:	b29b      	uxth	r3, r3
    ef1c:	001a      	movs	r2, r3
    ef1e:	2320      	movs	r3, #32
    ef20:	4013      	ands	r3, r2
    ef22:	d101      	bne.n	ef28 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    ef24:	2341      	movs	r3, #65	; 0x41
    ef26:	e047      	b.n	efb8 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    ef28:	687b      	ldr	r3, [r7, #4]
    ef2a:	0018      	movs	r0, r3
    ef2c:	4b24      	ldr	r3, [pc, #144]	; (efc0 <_i2c_master_write_packet+0x164>)
    ef2e:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    ef30:	683b      	ldr	r3, [r7, #0]
    ef32:	685a      	ldr	r2, [r3, #4]
    ef34:	2312      	movs	r3, #18
    ef36:	18fb      	adds	r3, r7, r3
    ef38:	881b      	ldrh	r3, [r3, #0]
    ef3a:	2112      	movs	r1, #18
    ef3c:	1879      	adds	r1, r7, r1
    ef3e:	1c58      	adds	r0, r3, #1
    ef40:	8008      	strh	r0, [r1, #0]
    ef42:	18d3      	adds	r3, r2, r3
    ef44:	7819      	ldrb	r1, [r3, #0]
    ef46:	68fb      	ldr	r3, [r7, #12]
    ef48:	2228      	movs	r2, #40	; 0x28
    ef4a:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    ef4c:	2317      	movs	r3, #23
    ef4e:	18fc      	adds	r4, r7, r3
    ef50:	687b      	ldr	r3, [r7, #4]
    ef52:	0018      	movs	r0, r3
    ef54:	4b1d      	ldr	r3, [pc, #116]	; (efcc <_i2c_master_write_packet+0x170>)
    ef56:	4798      	blx	r3
    ef58:	0003      	movs	r3, r0
    ef5a:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    ef5c:	2317      	movs	r3, #23
    ef5e:	18fb      	adds	r3, r7, r3
    ef60:	781b      	ldrb	r3, [r3, #0]
    ef62:	2b00      	cmp	r3, #0
    ef64:	d115      	bne.n	ef92 <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    ef66:	68fb      	ldr	r3, [r7, #12]
    ef68:	8b5b      	ldrh	r3, [r3, #26]
    ef6a:	b29b      	uxth	r3, r3
    ef6c:	001a      	movs	r2, r3
    ef6e:	2304      	movs	r3, #4
    ef70:	4013      	ands	r3, r2
    ef72:	d004      	beq.n	ef7e <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    ef74:	2317      	movs	r3, #23
    ef76:	18fb      	adds	r3, r7, r3
    ef78:	221e      	movs	r2, #30
    ef7a:	701a      	strb	r2, [r3, #0]
				break;
    ef7c:	e00a      	b.n	ef94 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    ef7e:	2314      	movs	r3, #20
    ef80:	18fb      	adds	r3, r7, r3
    ef82:	881b      	ldrh	r3, [r3, #0]
    ef84:	2214      	movs	r2, #20
    ef86:	18ba      	adds	r2, r7, r2
    ef88:	1e59      	subs	r1, r3, #1
    ef8a:	8011      	strh	r1, [r2, #0]
    ef8c:	2b00      	cmp	r3, #0
    ef8e:	d1c2      	bne.n	ef16 <_i2c_master_write_packet+0xba>
    ef90:	e000      	b.n	ef94 <_i2c_master_write_packet+0x138>
				break;
    ef92:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    ef94:	687b      	ldr	r3, [r7, #4]
    ef96:	7a9b      	ldrb	r3, [r3, #10]
    ef98:	2b00      	cmp	r3, #0
    ef9a:	d00a      	beq.n	efb2 <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    ef9c:	687b      	ldr	r3, [r7, #4]
    ef9e:	0018      	movs	r0, r3
    efa0:	4b07      	ldr	r3, [pc, #28]	; (efc0 <_i2c_master_write_packet+0x164>)
    efa2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    efa4:	68fb      	ldr	r3, [r7, #12]
    efa6:	685b      	ldr	r3, [r3, #4]
    efa8:	22c0      	movs	r2, #192	; 0xc0
    efaa:	0292      	lsls	r2, r2, #10
    efac:	431a      	orrs	r2, r3
    efae:	68fb      	ldr	r3, [r7, #12]
    efb0:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    efb2:	2317      	movs	r3, #23
    efb4:	18fb      	adds	r3, r7, r3
    efb6:	781b      	ldrb	r3, [r3, #0]
}
    efb8:	0018      	movs	r0, r3
    efba:	46bd      	mov	sp, r7
    efbc:	b007      	add	sp, #28
    efbe:	bd90      	pop	{r4, r7, pc}
    efc0:	0000e531 	.word	0x0000e531
    efc4:	0000eb55 	.word	0x0000eb55
    efc8:	fffbffff 	.word	0xfffbffff
    efcc:	0000eaf7 	.word	0x0000eaf7
    efd0:	0000ea99 	.word	0x0000ea99

0000efd4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    efd4:	b580      	push	{r7, lr}
    efd6:	b082      	sub	sp, #8
    efd8:	af00      	add	r7, sp, #0
    efda:	6078      	str	r0, [r7, #4]
    efdc:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    efde:	687b      	ldr	r3, [r7, #4]
    efe0:	8b9b      	ldrh	r3, [r3, #28]
    efe2:	b29b      	uxth	r3, r3
    efe4:	2b00      	cmp	r3, #0
    efe6:	d001      	beq.n	efec <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    efe8:	2305      	movs	r3, #5
    efea:	e00c      	b.n	f006 <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    efec:	687b      	ldr	r3, [r7, #4]
    efee:	2201      	movs	r2, #1
    eff0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    eff2:	687b      	ldr	r3, [r7, #4]
    eff4:	2201      	movs	r2, #1
    eff6:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    eff8:	683a      	ldr	r2, [r7, #0]
    effa:	687b      	ldr	r3, [r7, #4]
    effc:	0011      	movs	r1, r2
    effe:	0018      	movs	r0, r3
    f000:	4b03      	ldr	r3, [pc, #12]	; (f010 <i2c_master_write_packet_wait+0x3c>)
    f002:	4798      	blx	r3
    f004:	0003      	movs	r3, r0
}
    f006:	0018      	movs	r0, r3
    f008:	46bd      	mov	sp, r7
    f00a:	b002      	add	sp, #8
    f00c:	bd80      	pop	{r7, pc}
    f00e:	46c0      	nop			; (mov r8, r8)
    f010:	0000ee5d 	.word	0x0000ee5d

0000f014 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    f014:	b580      	push	{r7, lr}
    f016:	b082      	sub	sp, #8
    f018:	af00      	add	r7, sp, #0
    f01a:	6078      	str	r0, [r7, #4]
    f01c:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    f01e:	687b      	ldr	r3, [r7, #4]
    f020:	8b9b      	ldrh	r3, [r3, #28]
    f022:	b29b      	uxth	r3, r3
    f024:	2b00      	cmp	r3, #0
    f026:	d001      	beq.n	f02c <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
    f028:	2305      	movs	r3, #5
    f02a:	e00c      	b.n	f046 <i2c_master_write_packet_wait_no_stop+0x32>
	}
#endif

	module->send_stop = false;
    f02c:	687b      	ldr	r3, [r7, #4]
    f02e:	2200      	movs	r2, #0
    f030:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    f032:	687b      	ldr	r3, [r7, #4]
    f034:	2201      	movs	r2, #1
    f036:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    f038:	683a      	ldr	r2, [r7, #0]
    f03a:	687b      	ldr	r3, [r7, #4]
    f03c:	0011      	movs	r1, r2
    f03e:	0018      	movs	r0, r3
    f040:	4b03      	ldr	r3, [pc, #12]	; (f050 <i2c_master_write_packet_wait_no_stop+0x3c>)
    f042:	4798      	blx	r3
    f044:	0003      	movs	r3, r0
}
    f046:	0018      	movs	r0, r3
    f048:	46bd      	mov	sp, r7
    f04a:	b002      	add	sp, #8
    f04c:	bd80      	pop	{r7, pc}
    f04e:	46c0      	nop			; (mov r8, r8)
    f050:	0000ee5d 	.word	0x0000ee5d

0000f054 <i2c_master_is_syncing>:
{
    f054:	b580      	push	{r7, lr}
    f056:	b084      	sub	sp, #16
    f058:	af00      	add	r7, sp, #0
    f05a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    f05c:	687b      	ldr	r3, [r7, #4]
    f05e:	681b      	ldr	r3, [r3, #0]
    f060:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    f062:	68fb      	ldr	r3, [r7, #12]
    f064:	69db      	ldr	r3, [r3, #28]
    f066:	2207      	movs	r2, #7
    f068:	4013      	ands	r3, r2
    f06a:	1e5a      	subs	r2, r3, #1
    f06c:	4193      	sbcs	r3, r2
    f06e:	b2db      	uxtb	r3, r3
}
    f070:	0018      	movs	r0, r3
    f072:	46bd      	mov	sp, r7
    f074:	b004      	add	sp, #16
    f076:	bd80      	pop	{r7, pc}

0000f078 <_i2c_master_wait_for_sync>:
{
    f078:	b580      	push	{r7, lr}
    f07a:	b082      	sub	sp, #8
    f07c:	af00      	add	r7, sp, #0
    f07e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    f080:	46c0      	nop			; (mov r8, r8)
    f082:	687b      	ldr	r3, [r7, #4]
    f084:	0018      	movs	r0, r3
    f086:	4b04      	ldr	r3, [pc, #16]	; (f098 <_i2c_master_wait_for_sync+0x20>)
    f088:	4798      	blx	r3
    f08a:	1e03      	subs	r3, r0, #0
    f08c:	d1f9      	bne.n	f082 <_i2c_master_wait_for_sync+0xa>
}
    f08e:	46c0      	nop			; (mov r8, r8)
    f090:	46bd      	mov	sp, r7
    f092:	b002      	add	sp, #8
    f094:	bd80      	pop	{r7, pc}
    f096:	46c0      	nop			; (mov r8, r8)
    f098:	0000f055 	.word	0x0000f055

0000f09c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    f09c:	b580      	push	{r7, lr}
    f09e:	b084      	sub	sp, #16
    f0a0:	af00      	add	r7, sp, #0
    f0a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f0a4:	687b      	ldr	r3, [r7, #4]
    f0a6:	681b      	ldr	r3, [r3, #0]
    f0a8:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    f0aa:	68fb      	ldr	r3, [r7, #12]
    f0ac:	681b      	ldr	r3, [r3, #0]
    f0ae:	011b      	lsls	r3, r3, #4
    f0b0:	0fdb      	lsrs	r3, r3, #31
    f0b2:	b2db      	uxtb	r3, r3
    f0b4:	001a      	movs	r2, r3
    f0b6:	230b      	movs	r3, #11
    f0b8:	18fb      	adds	r3, r7, r3
    f0ba:	1e51      	subs	r1, r2, #1
    f0bc:	418a      	sbcs	r2, r1
    f0be:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    f0c0:	2308      	movs	r3, #8
    f0c2:	18fb      	adds	r3, r7, r3
    f0c4:	687a      	ldr	r2, [r7, #4]
    f0c6:	8b52      	ldrh	r2, [r2, #26]
    f0c8:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    f0ca:	687b      	ldr	r3, [r7, #4]
    f0cc:	8b9b      	ldrh	r3, [r3, #28]
    f0ce:	b29a      	uxth	r2, r3
    f0d0:	2308      	movs	r3, #8
    f0d2:	18fb      	adds	r3, r7, r3
    f0d4:	2108      	movs	r1, #8
    f0d6:	1879      	adds	r1, r7, r1
    f0d8:	8809      	ldrh	r1, [r1, #0]
    f0da:	1a8a      	subs	r2, r1, r2
    f0dc:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    f0de:	687b      	ldr	r3, [r7, #4]
    f0e0:	8b9b      	ldrh	r3, [r3, #28]
    f0e2:	b29b      	uxth	r3, r3
    f0e4:	3b01      	subs	r3, #1
    f0e6:	b29a      	uxth	r2, r3
    f0e8:	687b      	ldr	r3, [r7, #4]
    f0ea:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    f0ec:	230b      	movs	r3, #11
    f0ee:	18fb      	adds	r3, r7, r3
    f0f0:	781b      	ldrb	r3, [r3, #0]
    f0f2:	2b00      	cmp	r3, #0
    f0f4:	d010      	beq.n	f118 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    f0f6:	687b      	ldr	r3, [r7, #4]
    f0f8:	7adb      	ldrb	r3, [r3, #11]
    f0fa:	2b00      	cmp	r3, #0
    f0fc:	d01c      	beq.n	f138 <_i2c_master_read+0x9c>
    f0fe:	687b      	ldr	r3, [r7, #4]
    f100:	8b9b      	ldrh	r3, [r3, #28]
    f102:	b29b      	uxth	r3, r3
    f104:	2b01      	cmp	r3, #1
    f106:	d117      	bne.n	f138 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    f108:	68fb      	ldr	r3, [r7, #12]
    f10a:	685b      	ldr	r3, [r3, #4]
    f10c:	2280      	movs	r2, #128	; 0x80
    f10e:	02d2      	lsls	r2, r2, #11
    f110:	431a      	orrs	r2, r3
    f112:	68fb      	ldr	r3, [r7, #12]
    f114:	605a      	str	r2, [r3, #4]
    f116:	e00f      	b.n	f138 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    f118:	687b      	ldr	r3, [r7, #4]
    f11a:	7adb      	ldrb	r3, [r3, #11]
    f11c:	2b00      	cmp	r3, #0
    f11e:	d00b      	beq.n	f138 <_i2c_master_read+0x9c>
    f120:	687b      	ldr	r3, [r7, #4]
    f122:	8b9b      	ldrh	r3, [r3, #28]
    f124:	b29b      	uxth	r3, r3
    f126:	2b00      	cmp	r3, #0
    f128:	d106      	bne.n	f138 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    f12a:	68fb      	ldr	r3, [r7, #12]
    f12c:	685b      	ldr	r3, [r3, #4]
    f12e:	2280      	movs	r2, #128	; 0x80
    f130:	02d2      	lsls	r2, r2, #11
    f132:	431a      	orrs	r2, r3
    f134:	68fb      	ldr	r3, [r7, #12]
    f136:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    f138:	687b      	ldr	r3, [r7, #4]
    f13a:	8b9b      	ldrh	r3, [r3, #28]
    f13c:	b29b      	uxth	r3, r3
    f13e:	2b00      	cmp	r3, #0
    f140:	d10e      	bne.n	f160 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    f142:	687b      	ldr	r3, [r7, #4]
    f144:	7a9b      	ldrb	r3, [r3, #10]
    f146:	2b00      	cmp	r3, #0
    f148:	d00a      	beq.n	f160 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    f14a:	687b      	ldr	r3, [r7, #4]
    f14c:	0018      	movs	r0, r3
    f14e:	4b0e      	ldr	r3, [pc, #56]	; (f188 <_i2c_master_read+0xec>)
    f150:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    f152:	68fb      	ldr	r3, [r7, #12]
    f154:	685b      	ldr	r3, [r3, #4]
    f156:	22c0      	movs	r2, #192	; 0xc0
    f158:	0292      	lsls	r2, r2, #10
    f15a:	431a      	orrs	r2, r3
    f15c:	68fb      	ldr	r3, [r7, #12]
    f15e:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    f160:	687b      	ldr	r3, [r7, #4]
    f162:	0018      	movs	r0, r3
    f164:	4b08      	ldr	r3, [pc, #32]	; (f188 <_i2c_master_read+0xec>)
    f166:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    f168:	687b      	ldr	r3, [r7, #4]
    f16a:	6a1a      	ldr	r2, [r3, #32]
    f16c:	2308      	movs	r3, #8
    f16e:	18fb      	adds	r3, r7, r3
    f170:	881b      	ldrh	r3, [r3, #0]
    f172:	18d3      	adds	r3, r2, r3
    f174:	68fa      	ldr	r2, [r7, #12]
    f176:	2128      	movs	r1, #40	; 0x28
    f178:	5c52      	ldrb	r2, [r2, r1]
    f17a:	b2d2      	uxtb	r2, r2
    f17c:	701a      	strb	r2, [r3, #0]
}
    f17e:	46c0      	nop			; (mov r8, r8)
    f180:	46bd      	mov	sp, r7
    f182:	b004      	add	sp, #16
    f184:	bd80      	pop	{r7, pc}
    f186:	46c0      	nop			; (mov r8, r8)
    f188:	0000f079 	.word	0x0000f079

0000f18c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    f18c:	b580      	push	{r7, lr}
    f18e:	b084      	sub	sp, #16
    f190:	af00      	add	r7, sp, #0
    f192:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f194:	687b      	ldr	r3, [r7, #4]
    f196:	681b      	ldr	r3, [r3, #0]
    f198:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    f19a:	68fb      	ldr	r3, [r7, #12]
    f19c:	8b5b      	ldrh	r3, [r3, #26]
    f19e:	b29b      	uxth	r3, r3
    f1a0:	001a      	movs	r2, r3
    f1a2:	2304      	movs	r3, #4
    f1a4:	4013      	ands	r3, r2
    f1a6:	d004      	beq.n	f1b2 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    f1a8:	687b      	ldr	r3, [r7, #4]
    f1aa:	2225      	movs	r2, #37	; 0x25
    f1ac:	211e      	movs	r1, #30
    f1ae:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    f1b0:	e024      	b.n	f1fc <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    f1b2:	230a      	movs	r3, #10
    f1b4:	18fb      	adds	r3, r7, r3
    f1b6:	687a      	ldr	r2, [r7, #4]
    f1b8:	8b52      	ldrh	r2, [r2, #26]
    f1ba:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    f1bc:	687b      	ldr	r3, [r7, #4]
    f1be:	8b9b      	ldrh	r3, [r3, #28]
    f1c0:	b29a      	uxth	r2, r3
    f1c2:	230a      	movs	r3, #10
    f1c4:	18fb      	adds	r3, r7, r3
    f1c6:	210a      	movs	r1, #10
    f1c8:	1879      	adds	r1, r7, r1
    f1ca:	8809      	ldrh	r1, [r1, #0]
    f1cc:	1a8a      	subs	r2, r1, r2
    f1ce:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    f1d0:	687b      	ldr	r3, [r7, #4]
    f1d2:	8b9b      	ldrh	r3, [r3, #28]
    f1d4:	b29b      	uxth	r3, r3
    f1d6:	3b01      	subs	r3, #1
    f1d8:	b29a      	uxth	r2, r3
    f1da:	687b      	ldr	r3, [r7, #4]
    f1dc:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    f1de:	687b      	ldr	r3, [r7, #4]
    f1e0:	0018      	movs	r0, r3
    f1e2:	4b08      	ldr	r3, [pc, #32]	; (f204 <_i2c_master_write+0x78>)
    f1e4:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    f1e6:	687b      	ldr	r3, [r7, #4]
    f1e8:	6a1a      	ldr	r2, [r3, #32]
    f1ea:	230a      	movs	r3, #10
    f1ec:	18fb      	adds	r3, r7, r3
    f1ee:	881b      	ldrh	r3, [r3, #0]
    f1f0:	18d3      	adds	r3, r2, r3
    f1f2:	781b      	ldrb	r3, [r3, #0]
    f1f4:	b2d9      	uxtb	r1, r3
    f1f6:	68fb      	ldr	r3, [r7, #12]
    f1f8:	2228      	movs	r2, #40	; 0x28
    f1fa:	5499      	strb	r1, [r3, r2]
}
    f1fc:	46bd      	mov	sp, r7
    f1fe:	b004      	add	sp, #16
    f200:	bd80      	pop	{r7, pc}
    f202:	46c0      	nop			; (mov r8, r8)
    f204:	0000f079 	.word	0x0000f079

0000f208 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    f208:	b580      	push	{r7, lr}
    f20a:	b084      	sub	sp, #16
    f20c:	af00      	add	r7, sp, #0
    f20e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f210:	687b      	ldr	r3, [r7, #4]
    f212:	681b      	ldr	r3, [r3, #0]
    f214:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    f216:	68fb      	ldr	r3, [r7, #12]
    f218:	7e1b      	ldrb	r3, [r3, #24]
    f21a:	b2db      	uxtb	r3, r3
    f21c:	001a      	movs	r2, r3
    f21e:	2301      	movs	r3, #1
    f220:	4013      	ands	r3, r2
    f222:	d02b      	beq.n	f27c <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    f224:	68fb      	ldr	r3, [r7, #12]
    f226:	2201      	movs	r2, #1
    f228:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    f22a:	68fb      	ldr	r3, [r7, #12]
    f22c:	8b5b      	ldrh	r3, [r3, #26]
    f22e:	b29b      	uxth	r3, r3
    f230:	001a      	movs	r2, r3
    f232:	2302      	movs	r3, #2
    f234:	4013      	ands	r3, r2
    f236:	d004      	beq.n	f242 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    f238:	687b      	ldr	r3, [r7, #4]
    f23a:	2225      	movs	r2, #37	; 0x25
    f23c:	2141      	movs	r1, #65	; 0x41
    f23e:	5499      	strb	r1, [r3, r2]
    f240:	e01c      	b.n	f27c <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    f242:	68fb      	ldr	r3, [r7, #12]
    f244:	8b5b      	ldrh	r3, [r3, #26]
    f246:	b29b      	uxth	r3, r3
    f248:	001a      	movs	r2, r3
    f24a:	2304      	movs	r3, #4
    f24c:	4013      	ands	r3, r2
    f24e:	d015      	beq.n	f27c <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    f250:	687b      	ldr	r3, [r7, #4]
    f252:	2225      	movs	r2, #37	; 0x25
    f254:	2118      	movs	r1, #24
    f256:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    f258:	687b      	ldr	r3, [r7, #4]
    f25a:	2200      	movs	r2, #0
    f25c:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    f25e:	687b      	ldr	r3, [r7, #4]
    f260:	7a9b      	ldrb	r3, [r3, #10]
    f262:	2b00      	cmp	r3, #0
    f264:	d00a      	beq.n	f27c <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    f266:	687b      	ldr	r3, [r7, #4]
    f268:	0018      	movs	r0, r3
    f26a:	4b13      	ldr	r3, [pc, #76]	; (f2b8 <_i2c_master_async_address_response+0xb0>)
    f26c:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    f26e:	68fb      	ldr	r3, [r7, #12]
    f270:	685b      	ldr	r3, [r3, #4]
    f272:	22c0      	movs	r2, #192	; 0xc0
    f274:	0292      	lsls	r2, r2, #10
    f276:	431a      	orrs	r2, r3
    f278:	68fb      	ldr	r3, [r7, #12]
    f27a:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    f27c:	687b      	ldr	r3, [r7, #4]
    f27e:	8b9b      	ldrh	r3, [r3, #28]
    f280:	b29a      	uxth	r2, r3
    f282:	687b      	ldr	r3, [r7, #4]
    f284:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    f286:	687b      	ldr	r3, [r7, #4]
    f288:	2225      	movs	r2, #37	; 0x25
    f28a:	5c9b      	ldrb	r3, [r3, r2]
    f28c:	b2db      	uxtb	r3, r3
    f28e:	2b05      	cmp	r3, #5
    f290:	d10e      	bne.n	f2b0 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    f292:	687b      	ldr	r3, [r7, #4]
    f294:	2224      	movs	r2, #36	; 0x24
    f296:	5c9b      	ldrb	r3, [r3, r2]
    f298:	b2db      	uxtb	r3, r3
    f29a:	2b00      	cmp	r3, #0
    f29c:	d104      	bne.n	f2a8 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    f29e:	687b      	ldr	r3, [r7, #4]
    f2a0:	0018      	movs	r0, r3
    f2a2:	4b06      	ldr	r3, [pc, #24]	; (f2bc <_i2c_master_async_address_response+0xb4>)
    f2a4:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    f2a6:	e003      	b.n	f2b0 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    f2a8:	687b      	ldr	r3, [r7, #4]
    f2aa:	0018      	movs	r0, r3
    f2ac:	4b04      	ldr	r3, [pc, #16]	; (f2c0 <_i2c_master_async_address_response+0xb8>)
    f2ae:	4798      	blx	r3
}
    f2b0:	46c0      	nop			; (mov r8, r8)
    f2b2:	46bd      	mov	sp, r7
    f2b4:	b004      	add	sp, #16
    f2b6:	bd80      	pop	{r7, pc}
    f2b8:	0000f079 	.word	0x0000f079
    f2bc:	0000f18d 	.word	0x0000f18d
    f2c0:	0000f09d 	.word	0x0000f09d

0000f2c4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    f2c4:	b580      	push	{r7, lr}
    f2c6:	b086      	sub	sp, #24
    f2c8:	af00      	add	r7, sp, #0
    f2ca:	0002      	movs	r2, r0
    f2cc:	1dfb      	adds	r3, r7, #7
    f2ce:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    f2d0:	1dfb      	adds	r3, r7, #7
    f2d2:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    f2d4:	4b93      	ldr	r3, [pc, #588]	; (f524 <_i2c_master_interrupt_handler+0x260>)
    f2d6:	0092      	lsls	r2, r2, #2
    f2d8:	58d3      	ldr	r3, [r2, r3]
    f2da:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    f2dc:	697b      	ldr	r3, [r7, #20]
    f2de:	681b      	ldr	r3, [r3, #0]
    f2e0:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    f2e2:	693b      	ldr	r3, [r7, #16]
    f2e4:	681b      	ldr	r3, [r3, #0]
    f2e6:	011b      	lsls	r3, r3, #4
    f2e8:	0fdb      	lsrs	r3, r3, #31
    f2ea:	b2db      	uxtb	r3, r3
    f2ec:	001a      	movs	r2, r3
    f2ee:	230f      	movs	r3, #15
    f2f0:	18fb      	adds	r3, r7, r3
    f2f2:	1e51      	subs	r1, r2, #1
    f2f4:	418a      	sbcs	r2, r1
    f2f6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    f2f8:	230e      	movs	r3, #14
    f2fa:	18fb      	adds	r3, r7, r3
    f2fc:	697a      	ldr	r2, [r7, #20]
    f2fe:	7e52      	ldrb	r2, [r2, #25]
    f300:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    f302:	697b      	ldr	r3, [r7, #20]
    f304:	7e1b      	ldrb	r3, [r3, #24]
    f306:	b2da      	uxtb	r2, r3
    f308:	230e      	movs	r3, #14
    f30a:	18fb      	adds	r3, r7, r3
    f30c:	210e      	movs	r1, #14
    f30e:	1879      	adds	r1, r7, r1
    f310:	7809      	ldrb	r1, [r1, #0]
    f312:	400a      	ands	r2, r1
    f314:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    f316:	697b      	ldr	r3, [r7, #20]
    f318:	8b5b      	ldrh	r3, [r3, #26]
    f31a:	b29b      	uxth	r3, r3
    f31c:	2b00      	cmp	r3, #0
    f31e:	d109      	bne.n	f334 <_i2c_master_interrupt_handler+0x70>
    f320:	697b      	ldr	r3, [r7, #20]
    f322:	8b9b      	ldrh	r3, [r3, #28]
    f324:	b29b      	uxth	r3, r3
    f326:	2b00      	cmp	r3, #0
    f328:	d004      	beq.n	f334 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    f32a:	697b      	ldr	r3, [r7, #20]
    f32c:	0018      	movs	r0, r3
    f32e:	4b7e      	ldr	r3, [pc, #504]	; (f528 <_i2c_master_interrupt_handler+0x264>)
    f330:	4798      	blx	r3
    f332:	e070      	b.n	f416 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    f334:	697b      	ldr	r3, [r7, #20]
    f336:	8b5b      	ldrh	r3, [r3, #26]
    f338:	b29b      	uxth	r3, r3
    f33a:	2b00      	cmp	r3, #0
    f33c:	d039      	beq.n	f3b2 <_i2c_master_interrupt_handler+0xee>
    f33e:	697b      	ldr	r3, [r7, #20]
    f340:	8b9b      	ldrh	r3, [r3, #28]
    f342:	b29b      	uxth	r3, r3
    f344:	2b00      	cmp	r3, #0
    f346:	d134      	bne.n	f3b2 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    f348:	697b      	ldr	r3, [r7, #20]
    f34a:	2225      	movs	r2, #37	; 0x25
    f34c:	5c9b      	ldrb	r3, [r3, r2]
    f34e:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    f350:	2b05      	cmp	r3, #5
    f352:	d12e      	bne.n	f3b2 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    f354:	697b      	ldr	r3, [r7, #20]
    f356:	2224      	movs	r2, #36	; 0x24
    f358:	5c9b      	ldrb	r3, [r3, r2]
    f35a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    f35c:	2b00      	cmp	r3, #0
    f35e:	d128      	bne.n	f3b2 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    f360:	693b      	ldr	r3, [r7, #16]
    f362:	2203      	movs	r2, #3
    f364:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    f366:	697b      	ldr	r3, [r7, #20]
    f368:	2200      	movs	r2, #0
    f36a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    f36c:	697b      	ldr	r3, [r7, #20]
    f36e:	2225      	movs	r2, #37	; 0x25
    f370:	2100      	movs	r1, #0
    f372:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    f374:	697b      	ldr	r3, [r7, #20]
    f376:	7a9b      	ldrb	r3, [r3, #10]
    f378:	2b00      	cmp	r3, #0
    f37a:	d00b      	beq.n	f394 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    f37c:	697b      	ldr	r3, [r7, #20]
    f37e:	0018      	movs	r0, r3
    f380:	4b6a      	ldr	r3, [pc, #424]	; (f52c <_i2c_master_interrupt_handler+0x268>)
    f382:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    f384:	693b      	ldr	r3, [r7, #16]
    f386:	685b      	ldr	r3, [r3, #4]
    f388:	22c0      	movs	r2, #192	; 0xc0
    f38a:	0292      	lsls	r2, r2, #10
    f38c:	431a      	orrs	r2, r3
    f38e:	693b      	ldr	r3, [r7, #16]
    f390:	605a      	str	r2, [r3, #4]
    f392:	e002      	b.n	f39a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    f394:	693b      	ldr	r3, [r7, #16]
    f396:	2201      	movs	r2, #1
    f398:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    f39a:	230e      	movs	r3, #14
    f39c:	18fb      	adds	r3, r7, r3
    f39e:	781b      	ldrb	r3, [r3, #0]
    f3a0:	2201      	movs	r2, #1
    f3a2:	4013      	ands	r3, r2
    f3a4:	d037      	beq.n	f416 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    f3a6:	697b      	ldr	r3, [r7, #20]
    f3a8:	68db      	ldr	r3, [r3, #12]
    f3aa:	697a      	ldr	r2, [r7, #20]
    f3ac:	0010      	movs	r0, r2
    f3ae:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    f3b0:	e031      	b.n	f416 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    f3b2:	697b      	ldr	r3, [r7, #20]
    f3b4:	8b5b      	ldrh	r3, [r3, #26]
    f3b6:	b29b      	uxth	r3, r3
    f3b8:	2b00      	cmp	r3, #0
    f3ba:	d02c      	beq.n	f416 <_i2c_master_interrupt_handler+0x152>
    f3bc:	697b      	ldr	r3, [r7, #20]
    f3be:	8b9b      	ldrh	r3, [r3, #28]
    f3c0:	b29b      	uxth	r3, r3
    f3c2:	2b00      	cmp	r3, #0
    f3c4:	d027      	beq.n	f416 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    f3c6:	693b      	ldr	r3, [r7, #16]
    f3c8:	8b5b      	ldrh	r3, [r3, #26]
    f3ca:	b29b      	uxth	r3, r3
    f3cc:	001a      	movs	r2, r3
    f3ce:	2320      	movs	r3, #32
    f3d0:	4013      	ands	r3, r2
    f3d2:	d111      	bne.n	f3f8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    f3d4:	230f      	movs	r3, #15
    f3d6:	18fb      	adds	r3, r7, r3
    f3d8:	781b      	ldrb	r3, [r3, #0]
    f3da:	2201      	movs	r2, #1
    f3dc:	4053      	eors	r3, r2
    f3de:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    f3e0:	2b00      	cmp	r3, #0
    f3e2:	d104      	bne.n	f3ee <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    f3e4:	697b      	ldr	r3, [r7, #20]
    f3e6:	8b9b      	ldrh	r3, [r3, #28]
    f3e8:	b29b      	uxth	r3, r3
    f3ea:	2b01      	cmp	r3, #1
    f3ec:	d004      	beq.n	f3f8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    f3ee:	697b      	ldr	r3, [r7, #20]
    f3f0:	2225      	movs	r2, #37	; 0x25
    f3f2:	2141      	movs	r1, #65	; 0x41
    f3f4:	5499      	strb	r1, [r3, r2]
    f3f6:	e00e      	b.n	f416 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    f3f8:	697b      	ldr	r3, [r7, #20]
    f3fa:	2224      	movs	r2, #36	; 0x24
    f3fc:	5c9b      	ldrb	r3, [r3, r2]
    f3fe:	b2db      	uxtb	r3, r3
    f400:	2b00      	cmp	r3, #0
    f402:	d104      	bne.n	f40e <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    f404:	697b      	ldr	r3, [r7, #20]
    f406:	0018      	movs	r0, r3
    f408:	4b49      	ldr	r3, [pc, #292]	; (f530 <_i2c_master_interrupt_handler+0x26c>)
    f40a:	4798      	blx	r3
    f40c:	e003      	b.n	f416 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    f40e:	697b      	ldr	r3, [r7, #20]
    f410:	0018      	movs	r0, r3
    f412:	4b48      	ldr	r3, [pc, #288]	; (f534 <_i2c_master_interrupt_handler+0x270>)
    f414:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    f416:	697b      	ldr	r3, [r7, #20]
    f418:	8b5b      	ldrh	r3, [r3, #26]
    f41a:	b29b      	uxth	r3, r3
    f41c:	2b00      	cmp	r3, #0
    f41e:	d047      	beq.n	f4b0 <_i2c_master_interrupt_handler+0x1ec>
    f420:	697b      	ldr	r3, [r7, #20]
    f422:	8b9b      	ldrh	r3, [r3, #28]
    f424:	b29b      	uxth	r3, r3
    f426:	2b00      	cmp	r3, #0
    f428:	d142      	bne.n	f4b0 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    f42a:	697b      	ldr	r3, [r7, #20]
    f42c:	2225      	movs	r2, #37	; 0x25
    f42e:	5c9b      	ldrb	r3, [r3, r2]
    f430:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    f432:	2b05      	cmp	r3, #5
    f434:	d13c      	bne.n	f4b0 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    f436:	697b      	ldr	r3, [r7, #20]
    f438:	2224      	movs	r2, #36	; 0x24
    f43a:	5c9b      	ldrb	r3, [r3, r2]
    f43c:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    f43e:	2b01      	cmp	r3, #1
    f440:	d136      	bne.n	f4b0 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    f442:	693b      	ldr	r3, [r7, #16]
    f444:	7e1b      	ldrb	r3, [r3, #24]
    f446:	b2db      	uxtb	r3, r3
    f448:	001a      	movs	r2, r3
    f44a:	2302      	movs	r3, #2
    f44c:	4013      	ands	r3, r2
    f44e:	d002      	beq.n	f456 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    f450:	693b      	ldr	r3, [r7, #16]
    f452:	2202      	movs	r2, #2
    f454:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    f456:	693b      	ldr	r3, [r7, #16]
    f458:	2203      	movs	r2, #3
    f45a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    f45c:	697b      	ldr	r3, [r7, #20]
    f45e:	2200      	movs	r2, #0
    f460:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    f462:	697b      	ldr	r3, [r7, #20]
    f464:	2225      	movs	r2, #37	; 0x25
    f466:	2100      	movs	r1, #0
    f468:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    f46a:	230e      	movs	r3, #14
    f46c:	18fb      	adds	r3, r7, r3
    f46e:	781b      	ldrb	r3, [r3, #0]
    f470:	2202      	movs	r2, #2
    f472:	4013      	ands	r3, r2
    f474:	d00b      	beq.n	f48e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    f476:	697b      	ldr	r3, [r7, #20]
    f478:	2224      	movs	r2, #36	; 0x24
    f47a:	5c9b      	ldrb	r3, [r3, r2]
    f47c:	b2db      	uxtb	r3, r3
    f47e:	2b01      	cmp	r3, #1
    f480:	d105      	bne.n	f48e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    f482:	697b      	ldr	r3, [r7, #20]
    f484:	691b      	ldr	r3, [r3, #16]
    f486:	697a      	ldr	r2, [r7, #20]
    f488:	0010      	movs	r0, r2
    f48a:	4798      	blx	r3
    f48c:	e010      	b.n	f4b0 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    f48e:	230e      	movs	r3, #14
    f490:	18fb      	adds	r3, r7, r3
    f492:	781b      	ldrb	r3, [r3, #0]
    f494:	2201      	movs	r2, #1
    f496:	4013      	ands	r3, r2
    f498:	d00a      	beq.n	f4b0 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    f49a:	697b      	ldr	r3, [r7, #20]
    f49c:	2224      	movs	r2, #36	; 0x24
    f49e:	5c9b      	ldrb	r3, [r3, r2]
    f4a0:	b2db      	uxtb	r3, r3
    f4a2:	2b00      	cmp	r3, #0
    f4a4:	d104      	bne.n	f4b0 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    f4a6:	697b      	ldr	r3, [r7, #20]
    f4a8:	68db      	ldr	r3, [r3, #12]
    f4aa:	697a      	ldr	r2, [r7, #20]
    f4ac:	0010      	movs	r0, r2
    f4ae:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    f4b0:	697b      	ldr	r3, [r7, #20]
    f4b2:	2225      	movs	r2, #37	; 0x25
    f4b4:	5c9b      	ldrb	r3, [r3, r2]
    f4b6:	b2db      	uxtb	r3, r3
    f4b8:	2b05      	cmp	r3, #5
    f4ba:	d02e      	beq.n	f51a <_i2c_master_interrupt_handler+0x256>
    f4bc:	697b      	ldr	r3, [r7, #20]
    f4be:	2225      	movs	r2, #37	; 0x25
    f4c0:	5c9b      	ldrb	r3, [r3, r2]
    f4c2:	b2db      	uxtb	r3, r3
    f4c4:	2b00      	cmp	r3, #0
    f4c6:	d028      	beq.n	f51a <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    f4c8:	693b      	ldr	r3, [r7, #16]
    f4ca:	2203      	movs	r2, #3
    f4cc:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    f4ce:	697b      	ldr	r3, [r7, #20]
    f4d0:	2200      	movs	r2, #0
    f4d2:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    f4d4:	697b      	ldr	r3, [r7, #20]
    f4d6:	2200      	movs	r2, #0
    f4d8:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    f4da:	697b      	ldr	r3, [r7, #20]
    f4dc:	2225      	movs	r2, #37	; 0x25
    f4de:	5c9b      	ldrb	r3, [r3, r2]
    f4e0:	b2db      	uxtb	r3, r3
    f4e2:	2b41      	cmp	r3, #65	; 0x41
    f4e4:	d00e      	beq.n	f504 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    f4e6:	697b      	ldr	r3, [r7, #20]
    f4e8:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    f4ea:	2b00      	cmp	r3, #0
    f4ec:	d00a      	beq.n	f504 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    f4ee:	697b      	ldr	r3, [r7, #20]
    f4f0:	0018      	movs	r0, r3
    f4f2:	4b0e      	ldr	r3, [pc, #56]	; (f52c <_i2c_master_interrupt_handler+0x268>)
    f4f4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    f4f6:	693b      	ldr	r3, [r7, #16]
    f4f8:	685b      	ldr	r3, [r3, #4]
    f4fa:	22e0      	movs	r2, #224	; 0xe0
    f4fc:	02d2      	lsls	r2, r2, #11
    f4fe:	431a      	orrs	r2, r3
    f500:	693b      	ldr	r3, [r7, #16]
    f502:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    f504:	230e      	movs	r3, #14
    f506:	18fb      	adds	r3, r7, r3
    f508:	781b      	ldrb	r3, [r3, #0]
    f50a:	2204      	movs	r2, #4
    f50c:	4013      	ands	r3, r2
    f50e:	d004      	beq.n	f51a <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    f510:	697b      	ldr	r3, [r7, #20]
    f512:	695b      	ldr	r3, [r3, #20]
    f514:	697a      	ldr	r2, [r7, #20]
    f516:	0010      	movs	r0, r2
    f518:	4798      	blx	r3
		}
	}
}
    f51a:	46c0      	nop			; (mov r8, r8)
    f51c:	46bd      	mov	sp, r7
    f51e:	b006      	add	sp, #24
    f520:	bd80      	pop	{r7, pc}
    f522:	46c0      	nop			; (mov r8, r8)
    f524:	20000904 	.word	0x20000904
    f528:	0000f209 	.word	0x0000f209
    f52c:	0000f079 	.word	0x0000f079
    f530:	0000f18d 	.word	0x0000f18d
    f534:	0000f09d 	.word	0x0000f09d

0000f538 <system_gclk_chan_get_config_defaults>:
{
    f538:	b580      	push	{r7, lr}
    f53a:	b082      	sub	sp, #8
    f53c:	af00      	add	r7, sp, #0
    f53e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    f540:	687b      	ldr	r3, [r7, #4]
    f542:	2200      	movs	r2, #0
    f544:	701a      	strb	r2, [r3, #0]
}
    f546:	46c0      	nop			; (mov r8, r8)
    f548:	46bd      	mov	sp, r7
    f54a:	b002      	add	sp, #8
    f54c:	bd80      	pop	{r7, pc}

0000f54e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    f54e:	b5f0      	push	{r4, r5, r6, r7, lr}
    f550:	b08d      	sub	sp, #52	; 0x34
    f552:	af00      	add	r7, sp, #0
    f554:	60b8      	str	r0, [r7, #8]
    f556:	60f9      	str	r1, [r7, #12]
    f558:	603a      	str	r2, [r7, #0]
    f55a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    f55c:	2300      	movs	r3, #0
    f55e:	2400      	movs	r4, #0
    f560:	623b      	str	r3, [r7, #32]
    f562:	627c      	str	r4, [r7, #36]	; 0x24
    f564:	2300      	movs	r3, #0
    f566:	2400      	movs	r4, #0
    f568:	61bb      	str	r3, [r7, #24]
    f56a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    f56c:	233f      	movs	r3, #63	; 0x3f
    f56e:	62fb      	str	r3, [r7, #44]	; 0x2c
    f570:	e053      	b.n	f61a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    f572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f574:	3b20      	subs	r3, #32
    f576:	2b00      	cmp	r3, #0
    f578:	db04      	blt.n	f584 <long_division+0x36>
    f57a:	2201      	movs	r2, #1
    f57c:	409a      	lsls	r2, r3
    f57e:	0013      	movs	r3, r2
    f580:	617b      	str	r3, [r7, #20]
    f582:	e00b      	b.n	f59c <long_division+0x4e>
    f584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f586:	2220      	movs	r2, #32
    f588:	1ad3      	subs	r3, r2, r3
    f58a:	2201      	movs	r2, #1
    f58c:	40da      	lsrs	r2, r3
    f58e:	0013      	movs	r3, r2
    f590:	2100      	movs	r1, #0
    f592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    f594:	4091      	lsls	r1, r2
    f596:	000a      	movs	r2, r1
    f598:	4313      	orrs	r3, r2
    f59a:	617b      	str	r3, [r7, #20]
    f59c:	2201      	movs	r2, #1
    f59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f5a0:	409a      	lsls	r2, r3
    f5a2:	0013      	movs	r3, r2
    f5a4:	613b      	str	r3, [r7, #16]

		r = r << 1;
    f5a6:	69bb      	ldr	r3, [r7, #24]
    f5a8:	69fc      	ldr	r4, [r7, #28]
    f5aa:	18db      	adds	r3, r3, r3
    f5ac:	4164      	adcs	r4, r4
    f5ae:	61bb      	str	r3, [r7, #24]
    f5b0:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    f5b2:	68bb      	ldr	r3, [r7, #8]
    f5b4:	693a      	ldr	r2, [r7, #16]
    f5b6:	401a      	ands	r2, r3
    f5b8:	0015      	movs	r5, r2
    f5ba:	68fb      	ldr	r3, [r7, #12]
    f5bc:	697a      	ldr	r2, [r7, #20]
    f5be:	401a      	ands	r2, r3
    f5c0:	0016      	movs	r6, r2
    f5c2:	002b      	movs	r3, r5
    f5c4:	4333      	orrs	r3, r6
    f5c6:	d007      	beq.n	f5d8 <long_division+0x8a>
			r |= 0x01;
    f5c8:	69bb      	ldr	r3, [r7, #24]
    f5ca:	2201      	movs	r2, #1
    f5cc:	4313      	orrs	r3, r2
    f5ce:	61bb      	str	r3, [r7, #24]
    f5d0:	69fb      	ldr	r3, [r7, #28]
    f5d2:	2200      	movs	r2, #0
    f5d4:	4313      	orrs	r3, r2
    f5d6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    f5d8:	687a      	ldr	r2, [r7, #4]
    f5da:	69fb      	ldr	r3, [r7, #28]
    f5dc:	429a      	cmp	r2, r3
    f5de:	d819      	bhi.n	f614 <long_division+0xc6>
    f5e0:	687a      	ldr	r2, [r7, #4]
    f5e2:	69fb      	ldr	r3, [r7, #28]
    f5e4:	429a      	cmp	r2, r3
    f5e6:	d103      	bne.n	f5f0 <long_division+0xa2>
    f5e8:	683a      	ldr	r2, [r7, #0]
    f5ea:	69bb      	ldr	r3, [r7, #24]
    f5ec:	429a      	cmp	r2, r3
    f5ee:	d811      	bhi.n	f614 <long_division+0xc6>
			r = r - d;
    f5f0:	69b9      	ldr	r1, [r7, #24]
    f5f2:	69fa      	ldr	r2, [r7, #28]
    f5f4:	683b      	ldr	r3, [r7, #0]
    f5f6:	687c      	ldr	r4, [r7, #4]
    f5f8:	1ac9      	subs	r1, r1, r3
    f5fa:	41a2      	sbcs	r2, r4
    f5fc:	000b      	movs	r3, r1
    f5fe:	0014      	movs	r4, r2
    f600:	61bb      	str	r3, [r7, #24]
    f602:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    f604:	6a3a      	ldr	r2, [r7, #32]
    f606:	693b      	ldr	r3, [r7, #16]
    f608:	4313      	orrs	r3, r2
    f60a:	623b      	str	r3, [r7, #32]
    f60c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f60e:	697b      	ldr	r3, [r7, #20]
    f610:	4313      	orrs	r3, r2
    f612:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    f614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f616:	3b01      	subs	r3, #1
    f618:	62fb      	str	r3, [r7, #44]	; 0x2c
    f61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f61c:	2b00      	cmp	r3, #0
    f61e:	daa8      	bge.n	f572 <long_division+0x24>
		}
	}

	return q;
    f620:	6a3b      	ldr	r3, [r7, #32]
    f622:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    f624:	0018      	movs	r0, r3
    f626:	0021      	movs	r1, r4
    f628:	46bd      	mov	sp, r7
    f62a:	b00d      	add	sp, #52	; 0x34
    f62c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f62e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    f62e:	b580      	push	{r7, lr}
    f630:	b086      	sub	sp, #24
    f632:	af00      	add	r7, sp, #0
    f634:	60f8      	str	r0, [r7, #12]
    f636:	60b9      	str	r1, [r7, #8]
    f638:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    f63a:	2316      	movs	r3, #22
    f63c:	18fb      	adds	r3, r7, r3
    f63e:	2200      	movs	r2, #0
    f640:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    f642:	68bb      	ldr	r3, [r7, #8]
    f644:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    f646:	68bb      	ldr	r3, [r7, #8]
    f648:	085a      	lsrs	r2, r3, #1
    f64a:	68fb      	ldr	r3, [r7, #12]
    f64c:	429a      	cmp	r2, r3
    f64e:	d201      	bcs.n	f654 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    f650:	2340      	movs	r3, #64	; 0x40
    f652:	e026      	b.n	f6a2 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    f654:	68bb      	ldr	r3, [r7, #8]
    f656:	085b      	lsrs	r3, r3, #1
    f658:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    f65a:	e00a      	b.n	f672 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    f65c:	693a      	ldr	r2, [r7, #16]
    f65e:	68fb      	ldr	r3, [r7, #12]
    f660:	1ad3      	subs	r3, r2, r3
    f662:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    f664:	2316      	movs	r3, #22
    f666:	18fb      	adds	r3, r7, r3
    f668:	881a      	ldrh	r2, [r3, #0]
    f66a:	2316      	movs	r3, #22
    f66c:	18fb      	adds	r3, r7, r3
    f66e:	3201      	adds	r2, #1
    f670:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    f672:	693a      	ldr	r2, [r7, #16]
    f674:	68fb      	ldr	r3, [r7, #12]
    f676:	429a      	cmp	r2, r3
    f678:	d2f0      	bcs.n	f65c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    f67a:	2316      	movs	r3, #22
    f67c:	18fb      	adds	r3, r7, r3
    f67e:	2216      	movs	r2, #22
    f680:	18ba      	adds	r2, r7, r2
    f682:	8812      	ldrh	r2, [r2, #0]
    f684:	3a01      	subs	r2, #1
    f686:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    f688:	2316      	movs	r3, #22
    f68a:	18fb      	adds	r3, r7, r3
    f68c:	881b      	ldrh	r3, [r3, #0]
    f68e:	2bff      	cmp	r3, #255	; 0xff
    f690:	d901      	bls.n	f696 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    f692:	2340      	movs	r3, #64	; 0x40
    f694:	e005      	b.n	f6a2 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    f696:	687b      	ldr	r3, [r7, #4]
    f698:	2216      	movs	r2, #22
    f69a:	18ba      	adds	r2, r7, r2
    f69c:	8812      	ldrh	r2, [r2, #0]
    f69e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    f6a0:	2300      	movs	r3, #0
	}
}
    f6a2:	0018      	movs	r0, r3
    f6a4:	46bd      	mov	sp, r7
    f6a6:	b006      	add	sp, #24
    f6a8:	bd80      	pop	{r7, pc}
	...

0000f6ac <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    f6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6ae:	b0a1      	sub	sp, #132	; 0x84
    f6b0:	af00      	add	r7, sp, #0
    f6b2:	64f8      	str	r0, [r7, #76]	; 0x4c
    f6b4:	64b9      	str	r1, [r7, #72]	; 0x48
    f6b6:	647a      	str	r2, [r7, #68]	; 0x44
    f6b8:	2243      	movs	r2, #67	; 0x43
    f6ba:	18ba      	adds	r2, r7, r2
    f6bc:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    f6be:	2300      	movs	r3, #0
    f6c0:	2400      	movs	r4, #0
    f6c2:	673b      	str	r3, [r7, #112]	; 0x70
    f6c4:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    f6c6:	2300      	movs	r3, #0
    f6c8:	2400      	movs	r4, #0
    f6ca:	66bb      	str	r3, [r7, #104]	; 0x68
    f6cc:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    f6ce:	2300      	movs	r3, #0
    f6d0:	2400      	movs	r4, #0
    f6d2:	67bb      	str	r3, [r7, #120]	; 0x78
    f6d4:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    f6d6:	2300      	movs	r3, #0
    f6d8:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    f6da:	2358      	movs	r3, #88	; 0x58
    f6dc:	2240      	movs	r2, #64	; 0x40
    f6de:	4694      	mov	ip, r2
    f6e0:	44bc      	add	ip, r7
    f6e2:	4463      	add	r3, ip
    f6e4:	781a      	ldrb	r2, [r3, #0]
    f6e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f6e8:	435a      	muls	r2, r3
    f6ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f6ec:	429a      	cmp	r2, r3
    f6ee:	d901      	bls.n	f6f4 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    f6f0:	2340      	movs	r3, #64	; 0x40
    f6f2:	e0b3      	b.n	f85c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    f6f4:	2343      	movs	r3, #67	; 0x43
    f6f6:	18fb      	adds	r3, r7, r3
    f6f8:	781b      	ldrb	r3, [r3, #0]
    f6fa:	2b00      	cmp	r3, #0
    f6fc:	d13d      	bne.n	f77a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    f6fe:	2358      	movs	r3, #88	; 0x58
    f700:	2240      	movs	r2, #64	; 0x40
    f702:	4694      	mov	ip, r2
    f704:	44bc      	add	ip, r7
    f706:	4463      	add	r3, ip
    f708:	781b      	ldrb	r3, [r3, #0]
    f70a:	b2db      	uxtb	r3, r3
    f70c:	613b      	str	r3, [r7, #16]
    f70e:	2300      	movs	r3, #0
    f710:	617b      	str	r3, [r7, #20]
    f712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f714:	60bb      	str	r3, [r7, #8]
    f716:	2300      	movs	r3, #0
    f718:	60fb      	str	r3, [r7, #12]
    f71a:	4c52      	ldr	r4, [pc, #328]	; (f864 <_sercom_get_async_baud_val+0x1b8>)
    f71c:	68ba      	ldr	r2, [r7, #8]
    f71e:	68fb      	ldr	r3, [r7, #12]
    f720:	6938      	ldr	r0, [r7, #16]
    f722:	6979      	ldr	r1, [r7, #20]
    f724:	47a0      	blx	r4
    f726:	0003      	movs	r3, r0
    f728:	000c      	movs	r4, r1
    f72a:	001b      	movs	r3, r3
    f72c:	65fb      	str	r3, [r7, #92]	; 0x5c
    f72e:	2300      	movs	r3, #0
    f730:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    f732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f734:	603b      	str	r3, [r7, #0]
    f736:	2300      	movs	r3, #0
    f738:	607b      	str	r3, [r7, #4]
    f73a:	6db8      	ldr	r0, [r7, #88]	; 0x58
    f73c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    f73e:	683a      	ldr	r2, [r7, #0]
    f740:	687b      	ldr	r3, [r7, #4]
    f742:	4c49      	ldr	r4, [pc, #292]	; (f868 <_sercom_get_async_baud_val+0x1bc>)
    f744:	47a0      	blx	r4
    f746:	0003      	movs	r3, r0
    f748:	000c      	movs	r4, r1
    f74a:	673b      	str	r3, [r7, #112]	; 0x70
    f74c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    f74e:	2100      	movs	r1, #0
    f750:	2201      	movs	r2, #1
    f752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    f754:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    f756:	1ac9      	subs	r1, r1, r3
    f758:	41a2      	sbcs	r2, r4
    f75a:	000b      	movs	r3, r1
    f75c:	0014      	movs	r4, r2
    f75e:	66bb      	str	r3, [r7, #104]	; 0x68
    f760:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    f762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    f764:	0c1b      	lsrs	r3, r3, #16
    f766:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    f768:	0416      	lsls	r6, r2, #16
    f76a:	431e      	orrs	r6, r3
    f76c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    f76e:	041d      	lsls	r5, r3, #16
    f770:	0033      	movs	r3, r6
    f772:	67bb      	str	r3, [r7, #120]	; 0x78
    f774:	2300      	movs	r3, #0
    f776:	67fb      	str	r3, [r7, #124]	; 0x7c
    f778:	e06a      	b.n	f850 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    f77a:	2343      	movs	r3, #67	; 0x43
    f77c:	18fb      	adds	r3, r7, r3
    f77e:	781b      	ldrb	r3, [r3, #0]
    f780:	2b01      	cmp	r3, #1
    f782:	d165      	bne.n	f850 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    f784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f786:	633b      	str	r3, [r7, #48]	; 0x30
    f788:	2300      	movs	r3, #0
    f78a:	637b      	str	r3, [r7, #52]	; 0x34
    f78c:	2358      	movs	r3, #88	; 0x58
    f78e:	2240      	movs	r2, #64	; 0x40
    f790:	4694      	mov	ip, r2
    f792:	44bc      	add	ip, r7
    f794:	4463      	add	r3, ip
    f796:	781b      	ldrb	r3, [r3, #0]
    f798:	b2db      	uxtb	r3, r3
    f79a:	62bb      	str	r3, [r7, #40]	; 0x28
    f79c:	2300      	movs	r3, #0
    f79e:	62fb      	str	r3, [r7, #44]	; 0x2c
    f7a0:	4c30      	ldr	r4, [pc, #192]	; (f864 <_sercom_get_async_baud_val+0x1b8>)
    f7a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f7a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    f7a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    f7aa:	47a0      	blx	r4
    f7ac:	0003      	movs	r3, r0
    f7ae:	000c      	movs	r4, r1
    f7b0:	65bb      	str	r3, [r7, #88]	; 0x58
    f7b2:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    f7b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f7b6:	623b      	str	r3, [r7, #32]
    f7b8:	2300      	movs	r3, #0
    f7ba:	627b      	str	r3, [r7, #36]	; 0x24
    f7bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    f7be:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    f7c0:	001a      	movs	r2, r3
    f7c2:	0023      	movs	r3, r4
    f7c4:	6a38      	ldr	r0, [r7, #32]
    f7c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    f7c8:	4c27      	ldr	r4, [pc, #156]	; (f868 <_sercom_get_async_baud_val+0x1bc>)
    f7ca:	47a0      	blx	r4
    f7cc:	0003      	movs	r3, r0
    f7ce:	000c      	movs	r4, r1
    f7d0:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    f7d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    f7d4:	2380      	movs	r3, #128	; 0x80
    f7d6:	019b      	lsls	r3, r3, #6
    f7d8:	429a      	cmp	r2, r3
    f7da:	d901      	bls.n	f7e0 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    f7dc:	2340      	movs	r3, #64	; 0x40
    f7de:	e03d      	b.n	f85c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    f7e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f7e2:	61bb      	str	r3, [r7, #24]
    f7e4:	2300      	movs	r3, #0
    f7e6:	61fb      	str	r3, [r7, #28]
    f7e8:	69b9      	ldr	r1, [r7, #24]
    f7ea:	69fa      	ldr	r2, [r7, #28]
    f7ec:	000b      	movs	r3, r1
    f7ee:	0f5b      	lsrs	r3, r3, #29
    f7f0:	0010      	movs	r0, r2
    f7f2:	00c0      	lsls	r0, r0, #3
    f7f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    f7f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    f7f8:	4318      	orrs	r0, r3
    f7fa:	63f8      	str	r0, [r7, #60]	; 0x3c
    f7fc:	000b      	movs	r3, r1
    f7fe:	00db      	lsls	r3, r3, #3
    f800:	63bb      	str	r3, [r7, #56]	; 0x38
    f802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    f804:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    f806:	001a      	movs	r2, r3
    f808:	0023      	movs	r3, r4
    f80a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    f80c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    f80e:	4c16      	ldr	r4, [pc, #88]	; (f868 <_sercom_get_async_baud_val+0x1bc>)
    f810:	47a0      	blx	r4
    f812:	0003      	movs	r3, r0
    f814:	000c      	movs	r4, r1
    f816:	65bb      	str	r3, [r7, #88]	; 0x58
    f818:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    f81a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    f81c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    f81e:	b2d9      	uxtb	r1, r3
    f820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    f822:	b2db      	uxtb	r3, r3
    f824:	00db      	lsls	r3, r3, #3
    f826:	b2da      	uxtb	r2, r3
    f828:	2317      	movs	r3, #23
    f82a:	2040      	movs	r0, #64	; 0x40
    f82c:	4684      	mov	ip, r0
    f82e:	44bc      	add	ip, r7
    f830:	4463      	add	r3, ip
    f832:	1a8a      	subs	r2, r1, r2
    f834:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    f836:	2317      	movs	r3, #23
    f838:	2240      	movs	r2, #64	; 0x40
    f83a:	4694      	mov	ip, r2
    f83c:	44bc      	add	ip, r7
    f83e:	4463      	add	r3, ip
    f840:	781b      	ldrb	r3, [r3, #0]
    f842:	035b      	lsls	r3, r3, #13
    f844:	001a      	movs	r2, r3
    f846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    f848:	4313      	orrs	r3, r2
    f84a:	67bb      	str	r3, [r7, #120]	; 0x78
    f84c:	2300      	movs	r3, #0
    f84e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    f850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    f852:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    f854:	b29a      	uxth	r2, r3
    f856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f858:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    f85a:	2300      	movs	r3, #0
}
    f85c:	0018      	movs	r0, r3
    f85e:	46bd      	mov	sp, r7
    f860:	b021      	add	sp, #132	; 0x84
    f862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f864:	000166e9 	.word	0x000166e9
    f868:	0000f54f 	.word	0x0000f54f

0000f86c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    f86c:	b580      	push	{r7, lr}
    f86e:	b084      	sub	sp, #16
    f870:	af00      	add	r7, sp, #0
    f872:	0002      	movs	r2, r0
    f874:	1dfb      	adds	r3, r7, #7
    f876:	701a      	strb	r2, [r3, #0]
    f878:	1dbb      	adds	r3, r7, #6
    f87a:	1c0a      	adds	r2, r1, #0
    f87c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    f87e:	4b1a      	ldr	r3, [pc, #104]	; (f8e8 <sercom_set_gclk_generator+0x7c>)
    f880:	781b      	ldrb	r3, [r3, #0]
    f882:	2201      	movs	r2, #1
    f884:	4053      	eors	r3, r2
    f886:	b2db      	uxtb	r3, r3
    f888:	2b00      	cmp	r3, #0
    f88a:	d103      	bne.n	f894 <sercom_set_gclk_generator+0x28>
    f88c:	1dbb      	adds	r3, r7, #6
    f88e:	781b      	ldrb	r3, [r3, #0]
    f890:	2b00      	cmp	r3, #0
    f892:	d01b      	beq.n	f8cc <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    f894:	230c      	movs	r3, #12
    f896:	18fb      	adds	r3, r7, r3
    f898:	0018      	movs	r0, r3
    f89a:	4b14      	ldr	r3, [pc, #80]	; (f8ec <sercom_set_gclk_generator+0x80>)
    f89c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    f89e:	230c      	movs	r3, #12
    f8a0:	18fb      	adds	r3, r7, r3
    f8a2:	1dfa      	adds	r2, r7, #7
    f8a4:	7812      	ldrb	r2, [r2, #0]
    f8a6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    f8a8:	230c      	movs	r3, #12
    f8aa:	18fb      	adds	r3, r7, r3
    f8ac:	0019      	movs	r1, r3
    f8ae:	2013      	movs	r0, #19
    f8b0:	4b0f      	ldr	r3, [pc, #60]	; (f8f0 <sercom_set_gclk_generator+0x84>)
    f8b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    f8b4:	2013      	movs	r0, #19
    f8b6:	4b0f      	ldr	r3, [pc, #60]	; (f8f4 <sercom_set_gclk_generator+0x88>)
    f8b8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    f8ba:	4b0b      	ldr	r3, [pc, #44]	; (f8e8 <sercom_set_gclk_generator+0x7c>)
    f8bc:	1dfa      	adds	r2, r7, #7
    f8be:	7812      	ldrb	r2, [r2, #0]
    f8c0:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    f8c2:	4b09      	ldr	r3, [pc, #36]	; (f8e8 <sercom_set_gclk_generator+0x7c>)
    f8c4:	2201      	movs	r2, #1
    f8c6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    f8c8:	2300      	movs	r3, #0
    f8ca:	e008      	b.n	f8de <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    f8cc:	4b06      	ldr	r3, [pc, #24]	; (f8e8 <sercom_set_gclk_generator+0x7c>)
    f8ce:	785b      	ldrb	r3, [r3, #1]
    f8d0:	1dfa      	adds	r2, r7, #7
    f8d2:	7812      	ldrb	r2, [r2, #0]
    f8d4:	429a      	cmp	r2, r3
    f8d6:	d101      	bne.n	f8dc <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    f8d8:	2300      	movs	r3, #0
    f8da:	e000      	b.n	f8de <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    f8dc:	231d      	movs	r3, #29
}
    f8de:	0018      	movs	r0, r3
    f8e0:	46bd      	mov	sp, r7
    f8e2:	b004      	add	sp, #16
    f8e4:	bd80      	pop	{r7, pc}
    f8e6:	46c0      	nop			; (mov r8, r8)
    f8e8:	20000264 	.word	0x20000264
    f8ec:	0000f539 	.word	0x0000f539
    f8f0:	000116e1 	.word	0x000116e1
    f8f4:	00011725 	.word	0x00011725

0000f8f8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    f8f8:	b580      	push	{r7, lr}
    f8fa:	b082      	sub	sp, #8
    f8fc:	af00      	add	r7, sp, #0
    f8fe:	6078      	str	r0, [r7, #4]
    f900:	000a      	movs	r2, r1
    f902:	1cfb      	adds	r3, r7, #3
    f904:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    f906:	687b      	ldr	r3, [r7, #4]
    f908:	4a4d      	ldr	r2, [pc, #308]	; (fa40 <_sercom_get_default_pad+0x148>)
    f90a:	4293      	cmp	r3, r2
    f90c:	d03f      	beq.n	f98e <_sercom_get_default_pad+0x96>
    f90e:	4a4c      	ldr	r2, [pc, #304]	; (fa40 <_sercom_get_default_pad+0x148>)
    f910:	4293      	cmp	r3, r2
    f912:	d806      	bhi.n	f922 <_sercom_get_default_pad+0x2a>
    f914:	4a4b      	ldr	r2, [pc, #300]	; (fa44 <_sercom_get_default_pad+0x14c>)
    f916:	4293      	cmp	r3, r2
    f918:	d00f      	beq.n	f93a <_sercom_get_default_pad+0x42>
    f91a:	4a4b      	ldr	r2, [pc, #300]	; (fa48 <_sercom_get_default_pad+0x150>)
    f91c:	4293      	cmp	r3, r2
    f91e:	d021      	beq.n	f964 <_sercom_get_default_pad+0x6c>
    f920:	e089      	b.n	fa36 <_sercom_get_default_pad+0x13e>
    f922:	4a4a      	ldr	r2, [pc, #296]	; (fa4c <_sercom_get_default_pad+0x154>)
    f924:	4293      	cmp	r3, r2
    f926:	d100      	bne.n	f92a <_sercom_get_default_pad+0x32>
    f928:	e05b      	b.n	f9e2 <_sercom_get_default_pad+0xea>
    f92a:	4a49      	ldr	r2, [pc, #292]	; (fa50 <_sercom_get_default_pad+0x158>)
    f92c:	4293      	cmp	r3, r2
    f92e:	d100      	bne.n	f932 <_sercom_get_default_pad+0x3a>
    f930:	e06c      	b.n	fa0c <_sercom_get_default_pad+0x114>
    f932:	4a48      	ldr	r2, [pc, #288]	; (fa54 <_sercom_get_default_pad+0x15c>)
    f934:	4293      	cmp	r3, r2
    f936:	d03f      	beq.n	f9b8 <_sercom_get_default_pad+0xc0>
    f938:	e07d      	b.n	fa36 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    f93a:	1cfb      	adds	r3, r7, #3
    f93c:	781b      	ldrb	r3, [r3, #0]
    f93e:	2b01      	cmp	r3, #1
    f940:	d00a      	beq.n	f958 <_sercom_get_default_pad+0x60>
    f942:	dc02      	bgt.n	f94a <_sercom_get_default_pad+0x52>
    f944:	2b00      	cmp	r3, #0
    f946:	d005      	beq.n	f954 <_sercom_get_default_pad+0x5c>
    f948:	e075      	b.n	fa36 <_sercom_get_default_pad+0x13e>
    f94a:	2b02      	cmp	r3, #2
    f94c:	d006      	beq.n	f95c <_sercom_get_default_pad+0x64>
    f94e:	2b03      	cmp	r3, #3
    f950:	d006      	beq.n	f960 <_sercom_get_default_pad+0x68>
    f952:	e070      	b.n	fa36 <_sercom_get_default_pad+0x13e>
    f954:	4b40      	ldr	r3, [pc, #256]	; (fa58 <_sercom_get_default_pad+0x160>)
    f956:	e06f      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f958:	4b40      	ldr	r3, [pc, #256]	; (fa5c <_sercom_get_default_pad+0x164>)
    f95a:	e06d      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f95c:	4b40      	ldr	r3, [pc, #256]	; (fa60 <_sercom_get_default_pad+0x168>)
    f95e:	e06b      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f960:	4b40      	ldr	r3, [pc, #256]	; (fa64 <_sercom_get_default_pad+0x16c>)
    f962:	e069      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f964:	1cfb      	adds	r3, r7, #3
    f966:	781b      	ldrb	r3, [r3, #0]
    f968:	2b01      	cmp	r3, #1
    f96a:	d00a      	beq.n	f982 <_sercom_get_default_pad+0x8a>
    f96c:	dc02      	bgt.n	f974 <_sercom_get_default_pad+0x7c>
    f96e:	2b00      	cmp	r3, #0
    f970:	d005      	beq.n	f97e <_sercom_get_default_pad+0x86>
    f972:	e060      	b.n	fa36 <_sercom_get_default_pad+0x13e>
    f974:	2b02      	cmp	r3, #2
    f976:	d006      	beq.n	f986 <_sercom_get_default_pad+0x8e>
    f978:	2b03      	cmp	r3, #3
    f97a:	d006      	beq.n	f98a <_sercom_get_default_pad+0x92>
    f97c:	e05b      	b.n	fa36 <_sercom_get_default_pad+0x13e>
    f97e:	2303      	movs	r3, #3
    f980:	e05a      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f982:	4b39      	ldr	r3, [pc, #228]	; (fa68 <_sercom_get_default_pad+0x170>)
    f984:	e058      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f986:	4b39      	ldr	r3, [pc, #228]	; (fa6c <_sercom_get_default_pad+0x174>)
    f988:	e056      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f98a:	4b39      	ldr	r3, [pc, #228]	; (fa70 <_sercom_get_default_pad+0x178>)
    f98c:	e054      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f98e:	1cfb      	adds	r3, r7, #3
    f990:	781b      	ldrb	r3, [r3, #0]
    f992:	2b01      	cmp	r3, #1
    f994:	d00a      	beq.n	f9ac <_sercom_get_default_pad+0xb4>
    f996:	dc02      	bgt.n	f99e <_sercom_get_default_pad+0xa6>
    f998:	2b00      	cmp	r3, #0
    f99a:	d005      	beq.n	f9a8 <_sercom_get_default_pad+0xb0>
    f99c:	e04b      	b.n	fa36 <_sercom_get_default_pad+0x13e>
    f99e:	2b02      	cmp	r3, #2
    f9a0:	d006      	beq.n	f9b0 <_sercom_get_default_pad+0xb8>
    f9a2:	2b03      	cmp	r3, #3
    f9a4:	d006      	beq.n	f9b4 <_sercom_get_default_pad+0xbc>
    f9a6:	e046      	b.n	fa36 <_sercom_get_default_pad+0x13e>
    f9a8:	4b32      	ldr	r3, [pc, #200]	; (fa74 <_sercom_get_default_pad+0x17c>)
    f9aa:	e045      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f9ac:	4b32      	ldr	r3, [pc, #200]	; (fa78 <_sercom_get_default_pad+0x180>)
    f9ae:	e043      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f9b0:	4b32      	ldr	r3, [pc, #200]	; (fa7c <_sercom_get_default_pad+0x184>)
    f9b2:	e041      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f9b4:	4b32      	ldr	r3, [pc, #200]	; (fa80 <_sercom_get_default_pad+0x188>)
    f9b6:	e03f      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f9b8:	1cfb      	adds	r3, r7, #3
    f9ba:	781b      	ldrb	r3, [r3, #0]
    f9bc:	2b01      	cmp	r3, #1
    f9be:	d00a      	beq.n	f9d6 <_sercom_get_default_pad+0xde>
    f9c0:	dc02      	bgt.n	f9c8 <_sercom_get_default_pad+0xd0>
    f9c2:	2b00      	cmp	r3, #0
    f9c4:	d005      	beq.n	f9d2 <_sercom_get_default_pad+0xda>
    f9c6:	e036      	b.n	fa36 <_sercom_get_default_pad+0x13e>
    f9c8:	2b02      	cmp	r3, #2
    f9ca:	d006      	beq.n	f9da <_sercom_get_default_pad+0xe2>
    f9cc:	2b03      	cmp	r3, #3
    f9ce:	d006      	beq.n	f9de <_sercom_get_default_pad+0xe6>
    f9d0:	e031      	b.n	fa36 <_sercom_get_default_pad+0x13e>
    f9d2:	4b2c      	ldr	r3, [pc, #176]	; (fa84 <_sercom_get_default_pad+0x18c>)
    f9d4:	e030      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f9d6:	4b2c      	ldr	r3, [pc, #176]	; (fa88 <_sercom_get_default_pad+0x190>)
    f9d8:	e02e      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f9da:	4b2c      	ldr	r3, [pc, #176]	; (fa8c <_sercom_get_default_pad+0x194>)
    f9dc:	e02c      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f9de:	4b2c      	ldr	r3, [pc, #176]	; (fa90 <_sercom_get_default_pad+0x198>)
    f9e0:	e02a      	b.n	fa38 <_sercom_get_default_pad+0x140>
    f9e2:	1cfb      	adds	r3, r7, #3
    f9e4:	781b      	ldrb	r3, [r3, #0]
    f9e6:	2b01      	cmp	r3, #1
    f9e8:	d00a      	beq.n	fa00 <_sercom_get_default_pad+0x108>
    f9ea:	dc02      	bgt.n	f9f2 <_sercom_get_default_pad+0xfa>
    f9ec:	2b00      	cmp	r3, #0
    f9ee:	d005      	beq.n	f9fc <_sercom_get_default_pad+0x104>
    f9f0:	e021      	b.n	fa36 <_sercom_get_default_pad+0x13e>
    f9f2:	2b02      	cmp	r3, #2
    f9f4:	d006      	beq.n	fa04 <_sercom_get_default_pad+0x10c>
    f9f6:	2b03      	cmp	r3, #3
    f9f8:	d006      	beq.n	fa08 <_sercom_get_default_pad+0x110>
    f9fa:	e01c      	b.n	fa36 <_sercom_get_default_pad+0x13e>
    f9fc:	4b25      	ldr	r3, [pc, #148]	; (fa94 <_sercom_get_default_pad+0x19c>)
    f9fe:	e01b      	b.n	fa38 <_sercom_get_default_pad+0x140>
    fa00:	4b25      	ldr	r3, [pc, #148]	; (fa98 <_sercom_get_default_pad+0x1a0>)
    fa02:	e019      	b.n	fa38 <_sercom_get_default_pad+0x140>
    fa04:	4b25      	ldr	r3, [pc, #148]	; (fa9c <_sercom_get_default_pad+0x1a4>)
    fa06:	e017      	b.n	fa38 <_sercom_get_default_pad+0x140>
    fa08:	4b25      	ldr	r3, [pc, #148]	; (faa0 <_sercom_get_default_pad+0x1a8>)
    fa0a:	e015      	b.n	fa38 <_sercom_get_default_pad+0x140>
    fa0c:	1cfb      	adds	r3, r7, #3
    fa0e:	781b      	ldrb	r3, [r3, #0]
    fa10:	2b01      	cmp	r3, #1
    fa12:	d00a      	beq.n	fa2a <_sercom_get_default_pad+0x132>
    fa14:	dc02      	bgt.n	fa1c <_sercom_get_default_pad+0x124>
    fa16:	2b00      	cmp	r3, #0
    fa18:	d005      	beq.n	fa26 <_sercom_get_default_pad+0x12e>
    fa1a:	e00c      	b.n	fa36 <_sercom_get_default_pad+0x13e>
    fa1c:	2b02      	cmp	r3, #2
    fa1e:	d006      	beq.n	fa2e <_sercom_get_default_pad+0x136>
    fa20:	2b03      	cmp	r3, #3
    fa22:	d006      	beq.n	fa32 <_sercom_get_default_pad+0x13a>
    fa24:	e007      	b.n	fa36 <_sercom_get_default_pad+0x13e>
    fa26:	4b1f      	ldr	r3, [pc, #124]	; (faa4 <_sercom_get_default_pad+0x1ac>)
    fa28:	e006      	b.n	fa38 <_sercom_get_default_pad+0x140>
    fa2a:	4b1f      	ldr	r3, [pc, #124]	; (faa8 <_sercom_get_default_pad+0x1b0>)
    fa2c:	e004      	b.n	fa38 <_sercom_get_default_pad+0x140>
    fa2e:	4b1f      	ldr	r3, [pc, #124]	; (faac <_sercom_get_default_pad+0x1b4>)
    fa30:	e002      	b.n	fa38 <_sercom_get_default_pad+0x140>
    fa32:	4b1f      	ldr	r3, [pc, #124]	; (fab0 <_sercom_get_default_pad+0x1b8>)
    fa34:	e000      	b.n	fa38 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    fa36:	2300      	movs	r3, #0
}
    fa38:	0018      	movs	r0, r3
    fa3a:	46bd      	mov	sp, r7
    fa3c:	b002      	add	sp, #8
    fa3e:	bd80      	pop	{r7, pc}
    fa40:	42001000 	.word	0x42001000
    fa44:	42000800 	.word	0x42000800
    fa48:	42000c00 	.word	0x42000c00
    fa4c:	42001800 	.word	0x42001800
    fa50:	42001c00 	.word	0x42001c00
    fa54:	42001400 	.word	0x42001400
    fa58:	00040003 	.word	0x00040003
    fa5c:	00050003 	.word	0x00050003
    fa60:	00060003 	.word	0x00060003
    fa64:	00070003 	.word	0x00070003
    fa68:	00010003 	.word	0x00010003
    fa6c:	001e0003 	.word	0x001e0003
    fa70:	001f0003 	.word	0x001f0003
    fa74:	00080003 	.word	0x00080003
    fa78:	00090003 	.word	0x00090003
    fa7c:	000a0003 	.word	0x000a0003
    fa80:	000b0003 	.word	0x000b0003
    fa84:	00100003 	.word	0x00100003
    fa88:	00110003 	.word	0x00110003
    fa8c:	00120003 	.word	0x00120003
    fa90:	00130003 	.word	0x00130003
    fa94:	000c0003 	.word	0x000c0003
    fa98:	000d0003 	.word	0x000d0003
    fa9c:	000e0003 	.word	0x000e0003
    faa0:	000f0003 	.word	0x000f0003
    faa4:	00160003 	.word	0x00160003
    faa8:	00170003 	.word	0x00170003
    faac:	00180003 	.word	0x00180003
    fab0:	00190003 	.word	0x00190003

0000fab4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    fab4:	b590      	push	{r4, r7, lr}
    fab6:	b08b      	sub	sp, #44	; 0x2c
    fab8:	af00      	add	r7, sp, #0
    faba:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    fabc:	230c      	movs	r3, #12
    fabe:	18fb      	adds	r3, r7, r3
    fac0:	4a0f      	ldr	r2, [pc, #60]	; (fb00 <_sercom_get_sercom_inst_index+0x4c>)
    fac2:	ca13      	ldmia	r2!, {r0, r1, r4}
    fac4:	c313      	stmia	r3!, {r0, r1, r4}
    fac6:	ca13      	ldmia	r2!, {r0, r1, r4}
    fac8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    faca:	2300      	movs	r3, #0
    facc:	627b      	str	r3, [r7, #36]	; 0x24
    face:	e00e      	b.n	faee <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    fad0:	230c      	movs	r3, #12
    fad2:	18fb      	adds	r3, r7, r3
    fad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    fad6:	0092      	lsls	r2, r2, #2
    fad8:	58d3      	ldr	r3, [r2, r3]
    fada:	001a      	movs	r2, r3
    fadc:	687b      	ldr	r3, [r7, #4]
    fade:	429a      	cmp	r2, r3
    fae0:	d102      	bne.n	fae8 <_sercom_get_sercom_inst_index+0x34>
			return i;
    fae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fae4:	b2db      	uxtb	r3, r3
    fae6:	e006      	b.n	faf6 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    fae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    faea:	3301      	adds	r3, #1
    faec:	627b      	str	r3, [r7, #36]	; 0x24
    faee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    faf0:	2b05      	cmp	r3, #5
    faf2:	d9ed      	bls.n	fad0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    faf4:	2300      	movs	r3, #0
}
    faf6:	0018      	movs	r0, r3
    faf8:	46bd      	mov	sp, r7
    fafa:	b00b      	add	sp, #44	; 0x2c
    fafc:	bd90      	pop	{r4, r7, pc}
    fafe:	46c0      	nop			; (mov r8, r8)
    fb00:	0001ad5c 	.word	0x0001ad5c

0000fb04 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    fb04:	b580      	push	{r7, lr}
    fb06:	b086      	sub	sp, #24
    fb08:	af00      	add	r7, sp, #0
    fb0a:	60f8      	str	r0, [r7, #12]
    fb0c:	60b9      	str	r1, [r7, #8]
    fb0e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    fb10:	2300      	movs	r3, #0
    fb12:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    fb14:	68fb      	ldr	r3, [r7, #12]
    fb16:	2b00      	cmp	r3, #0
    fb18:	d012      	beq.n	fb40 <_read+0x3c>
		return -1;
    fb1a:	2301      	movs	r3, #1
    fb1c:	425b      	negs	r3, r3
    fb1e:	e013      	b.n	fb48 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    fb20:	4b0b      	ldr	r3, [pc, #44]	; (fb50 <_read+0x4c>)
    fb22:	681a      	ldr	r2, [r3, #0]
    fb24:	4b0b      	ldr	r3, [pc, #44]	; (fb54 <_read+0x50>)
    fb26:	681b      	ldr	r3, [r3, #0]
    fb28:	68b9      	ldr	r1, [r7, #8]
    fb2a:	0018      	movs	r0, r3
    fb2c:	4790      	blx	r2
		ptr++;
    fb2e:	68bb      	ldr	r3, [r7, #8]
    fb30:	3301      	adds	r3, #1
    fb32:	60bb      	str	r3, [r7, #8]
		nChars++;
    fb34:	697b      	ldr	r3, [r7, #20]
    fb36:	3301      	adds	r3, #1
    fb38:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    fb3a:	687b      	ldr	r3, [r7, #4]
    fb3c:	3b01      	subs	r3, #1
    fb3e:	607b      	str	r3, [r7, #4]
    fb40:	687b      	ldr	r3, [r7, #4]
    fb42:	2b00      	cmp	r3, #0
    fb44:	dcec      	bgt.n	fb20 <_read+0x1c>
	}
	return nChars;
    fb46:	697b      	ldr	r3, [r7, #20]
}
    fb48:	0018      	movs	r0, r3
    fb4a:	46bd      	mov	sp, r7
    fb4c:	b006      	add	sp, #24
    fb4e:	bd80      	pop	{r7, pc}
    fb50:	200008f8 	.word	0x200008f8
    fb54:	20000900 	.word	0x20000900

0000fb58 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    fb58:	b580      	push	{r7, lr}
    fb5a:	b086      	sub	sp, #24
    fb5c:	af00      	add	r7, sp, #0
    fb5e:	60f8      	str	r0, [r7, #12]
    fb60:	60b9      	str	r1, [r7, #8]
    fb62:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    fb64:	2300      	movs	r3, #0
    fb66:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    fb68:	68fb      	ldr	r3, [r7, #12]
    fb6a:	2b01      	cmp	r3, #1
    fb6c:	d01d      	beq.n	fbaa <_write+0x52>
    fb6e:	68fb      	ldr	r3, [r7, #12]
    fb70:	2b02      	cmp	r3, #2
    fb72:	d01a      	beq.n	fbaa <_write+0x52>
    fb74:	68fb      	ldr	r3, [r7, #12]
    fb76:	2b03      	cmp	r3, #3
    fb78:	d017      	beq.n	fbaa <_write+0x52>
		return -1;
    fb7a:	2301      	movs	r3, #1
    fb7c:	425b      	negs	r3, r3
    fb7e:	e018      	b.n	fbb2 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    fb80:	4b0e      	ldr	r3, [pc, #56]	; (fbbc <_write+0x64>)
    fb82:	681a      	ldr	r2, [r3, #0]
    fb84:	4b0e      	ldr	r3, [pc, #56]	; (fbc0 <_write+0x68>)
    fb86:	6818      	ldr	r0, [r3, #0]
    fb88:	68bb      	ldr	r3, [r7, #8]
    fb8a:	1c59      	adds	r1, r3, #1
    fb8c:	60b9      	str	r1, [r7, #8]
    fb8e:	781b      	ldrb	r3, [r3, #0]
    fb90:	0019      	movs	r1, r3
    fb92:	4790      	blx	r2
    fb94:	1e03      	subs	r3, r0, #0
    fb96:	da02      	bge.n	fb9e <_write+0x46>
			return -1;
    fb98:	2301      	movs	r3, #1
    fb9a:	425b      	negs	r3, r3
    fb9c:	e009      	b.n	fbb2 <_write+0x5a>
		}
		++nChars;
    fb9e:	697b      	ldr	r3, [r7, #20]
    fba0:	3301      	adds	r3, #1
    fba2:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    fba4:	687b      	ldr	r3, [r7, #4]
    fba6:	3b01      	subs	r3, #1
    fba8:	607b      	str	r3, [r7, #4]
    fbaa:	687b      	ldr	r3, [r7, #4]
    fbac:	2b00      	cmp	r3, #0
    fbae:	d1e7      	bne.n	fb80 <_write+0x28>
	}
	return nChars;
    fbb0:	697b      	ldr	r3, [r7, #20]
}
    fbb2:	0018      	movs	r0, r3
    fbb4:	46bd      	mov	sp, r7
    fbb6:	b006      	add	sp, #24
    fbb8:	bd80      	pop	{r7, pc}
    fbba:	46c0      	nop			; (mov r8, r8)
    fbbc:	200008fc 	.word	0x200008fc
    fbc0:	20000900 	.word	0x20000900

0000fbc4 <system_gclk_chan_get_config_defaults>:
{
    fbc4:	b580      	push	{r7, lr}
    fbc6:	b082      	sub	sp, #8
    fbc8:	af00      	add	r7, sp, #0
    fbca:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    fbcc:	687b      	ldr	r3, [r7, #4]
    fbce:	2200      	movs	r2, #0
    fbd0:	701a      	strb	r2, [r3, #0]
}
    fbd2:	46c0      	nop			; (mov r8, r8)
    fbd4:	46bd      	mov	sp, r7
    fbd6:	b002      	add	sp, #8
    fbd8:	bd80      	pop	{r7, pc}
	...

0000fbdc <system_apb_clock_set_mask>:
{
    fbdc:	b580      	push	{r7, lr}
    fbde:	b082      	sub	sp, #8
    fbe0:	af00      	add	r7, sp, #0
    fbe2:	0002      	movs	r2, r0
    fbe4:	6039      	str	r1, [r7, #0]
    fbe6:	1dfb      	adds	r3, r7, #7
    fbe8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    fbea:	1dfb      	adds	r3, r7, #7
    fbec:	781b      	ldrb	r3, [r3, #0]
    fbee:	2b01      	cmp	r3, #1
    fbf0:	d00a      	beq.n	fc08 <system_apb_clock_set_mask+0x2c>
    fbf2:	2b02      	cmp	r3, #2
    fbf4:	d00f      	beq.n	fc16 <system_apb_clock_set_mask+0x3a>
    fbf6:	2b00      	cmp	r3, #0
    fbf8:	d114      	bne.n	fc24 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    fbfa:	4b0e      	ldr	r3, [pc, #56]	; (fc34 <system_apb_clock_set_mask+0x58>)
    fbfc:	4a0d      	ldr	r2, [pc, #52]	; (fc34 <system_apb_clock_set_mask+0x58>)
    fbfe:	6991      	ldr	r1, [r2, #24]
    fc00:	683a      	ldr	r2, [r7, #0]
    fc02:	430a      	orrs	r2, r1
    fc04:	619a      	str	r2, [r3, #24]
			break;
    fc06:	e00f      	b.n	fc28 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    fc08:	4b0a      	ldr	r3, [pc, #40]	; (fc34 <system_apb_clock_set_mask+0x58>)
    fc0a:	4a0a      	ldr	r2, [pc, #40]	; (fc34 <system_apb_clock_set_mask+0x58>)
    fc0c:	69d1      	ldr	r1, [r2, #28]
    fc0e:	683a      	ldr	r2, [r7, #0]
    fc10:	430a      	orrs	r2, r1
    fc12:	61da      	str	r2, [r3, #28]
			break;
    fc14:	e008      	b.n	fc28 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    fc16:	4b07      	ldr	r3, [pc, #28]	; (fc34 <system_apb_clock_set_mask+0x58>)
    fc18:	4a06      	ldr	r2, [pc, #24]	; (fc34 <system_apb_clock_set_mask+0x58>)
    fc1a:	6a11      	ldr	r1, [r2, #32]
    fc1c:	683a      	ldr	r2, [r7, #0]
    fc1e:	430a      	orrs	r2, r1
    fc20:	621a      	str	r2, [r3, #32]
			break;
    fc22:	e001      	b.n	fc28 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    fc24:	2317      	movs	r3, #23
    fc26:	e000      	b.n	fc2a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    fc28:	2300      	movs	r3, #0
}
    fc2a:	0018      	movs	r0, r3
    fc2c:	46bd      	mov	sp, r7
    fc2e:	b002      	add	sp, #8
    fc30:	bd80      	pop	{r7, pc}
    fc32:	46c0      	nop			; (mov r8, r8)
    fc34:	40000400 	.word	0x40000400

0000fc38 <system_pinmux_get_config_defaults>:
{
    fc38:	b580      	push	{r7, lr}
    fc3a:	b082      	sub	sp, #8
    fc3c:	af00      	add	r7, sp, #0
    fc3e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    fc40:	687b      	ldr	r3, [r7, #4]
    fc42:	2280      	movs	r2, #128	; 0x80
    fc44:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    fc46:	687b      	ldr	r3, [r7, #4]
    fc48:	2200      	movs	r2, #0
    fc4a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    fc4c:	687b      	ldr	r3, [r7, #4]
    fc4e:	2201      	movs	r2, #1
    fc50:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    fc52:	687b      	ldr	r3, [r7, #4]
    fc54:	2200      	movs	r2, #0
    fc56:	70da      	strb	r2, [r3, #3]
}
    fc58:	46c0      	nop			; (mov r8, r8)
    fc5a:	46bd      	mov	sp, r7
    fc5c:	b002      	add	sp, #8
    fc5e:	bd80      	pop	{r7, pc}

0000fc60 <system_is_debugger_present>:
{
    fc60:	b580      	push	{r7, lr}
    fc62:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    fc64:	4b05      	ldr	r3, [pc, #20]	; (fc7c <system_is_debugger_present+0x1c>)
    fc66:	789b      	ldrb	r3, [r3, #2]
    fc68:	b2db      	uxtb	r3, r3
    fc6a:	001a      	movs	r2, r3
    fc6c:	2302      	movs	r3, #2
    fc6e:	4013      	ands	r3, r2
    fc70:	1e5a      	subs	r2, r3, #1
    fc72:	4193      	sbcs	r3, r2
    fc74:	b2db      	uxtb	r3, r3
}
    fc76:	0018      	movs	r0, r3
    fc78:	46bd      	mov	sp, r7
    fc7a:	bd80      	pop	{r7, pc}
    fc7c:	41002000 	.word	0x41002000

0000fc80 <usart_is_syncing>:
{
    fc80:	b580      	push	{r7, lr}
    fc82:	b084      	sub	sp, #16
    fc84:	af00      	add	r7, sp, #0
    fc86:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    fc88:	687b      	ldr	r3, [r7, #4]
    fc8a:	681b      	ldr	r3, [r3, #0]
    fc8c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    fc8e:	68fb      	ldr	r3, [r7, #12]
    fc90:	69db      	ldr	r3, [r3, #28]
    fc92:	1e5a      	subs	r2, r3, #1
    fc94:	4193      	sbcs	r3, r2
    fc96:	b2db      	uxtb	r3, r3
}
    fc98:	0018      	movs	r0, r3
    fc9a:	46bd      	mov	sp, r7
    fc9c:	b004      	add	sp, #16
    fc9e:	bd80      	pop	{r7, pc}

0000fca0 <_usart_wait_for_sync>:
{
    fca0:	b580      	push	{r7, lr}
    fca2:	b082      	sub	sp, #8
    fca4:	af00      	add	r7, sp, #0
    fca6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    fca8:	46c0      	nop			; (mov r8, r8)
    fcaa:	687b      	ldr	r3, [r7, #4]
    fcac:	0018      	movs	r0, r3
    fcae:	4b04      	ldr	r3, [pc, #16]	; (fcc0 <_usart_wait_for_sync+0x20>)
    fcb0:	4798      	blx	r3
    fcb2:	1e03      	subs	r3, r0, #0
    fcb4:	d1f9      	bne.n	fcaa <_usart_wait_for_sync+0xa>
}
    fcb6:	46c0      	nop			; (mov r8, r8)
    fcb8:	46bd      	mov	sp, r7
    fcba:	b002      	add	sp, #8
    fcbc:	bd80      	pop	{r7, pc}
    fcbe:	46c0      	nop			; (mov r8, r8)
    fcc0:	0000fc81 	.word	0x0000fc81

0000fcc4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    fcc4:	b5b0      	push	{r4, r5, r7, lr}
    fcc6:	b08c      	sub	sp, #48	; 0x30
    fcc8:	af02      	add	r7, sp, #8
    fcca:	6078      	str	r0, [r7, #4]
    fccc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    fcce:	687b      	ldr	r3, [r7, #4]
    fcd0:	681b      	ldr	r3, [r3, #0]
    fcd2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    fcd4:	687b      	ldr	r3, [r7, #4]
    fcd6:	681b      	ldr	r3, [r3, #0]
    fcd8:	0018      	movs	r0, r3
    fcda:	4bab      	ldr	r3, [pc, #684]	; (ff88 <_usart_set_config+0x2c4>)
    fcdc:	4798      	blx	r3
    fcde:	0003      	movs	r3, r0
    fce0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    fce2:	697b      	ldr	r3, [r7, #20]
    fce4:	3314      	adds	r3, #20
    fce6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    fce8:	2300      	movs	r3, #0
    fcea:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    fcec:	2300      	movs	r3, #0
    fcee:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    fcf0:	230a      	movs	r3, #10
    fcf2:	18fb      	adds	r3, r7, r3
    fcf4:	2200      	movs	r2, #0
    fcf6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    fcf8:	231f      	movs	r3, #31
    fcfa:	18fb      	adds	r3, r7, r3
    fcfc:	2200      	movs	r2, #0
    fcfe:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    fd00:	231e      	movs	r3, #30
    fd02:	18fb      	adds	r3, r7, r3
    fd04:	2210      	movs	r2, #16
    fd06:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    fd08:	683b      	ldr	r3, [r7, #0]
    fd0a:	8a1b      	ldrh	r3, [r3, #16]
    fd0c:	2280      	movs	r2, #128	; 0x80
    fd0e:	01d2      	lsls	r2, r2, #7
    fd10:	4293      	cmp	r3, r2
    fd12:	d01c      	beq.n	fd4e <_usart_set_config+0x8a>
    fd14:	2280      	movs	r2, #128	; 0x80
    fd16:	01d2      	lsls	r2, r2, #7
    fd18:	4293      	cmp	r3, r2
    fd1a:	dc06      	bgt.n	fd2a <_usart_set_config+0x66>
    fd1c:	2b00      	cmp	r3, #0
    fd1e:	d00d      	beq.n	fd3c <_usart_set_config+0x78>
    fd20:	2280      	movs	r2, #128	; 0x80
    fd22:	0192      	lsls	r2, r2, #6
    fd24:	4293      	cmp	r3, r2
    fd26:	d024      	beq.n	fd72 <_usart_set_config+0xae>
    fd28:	e035      	b.n	fd96 <_usart_set_config+0xd2>
    fd2a:	22c0      	movs	r2, #192	; 0xc0
    fd2c:	01d2      	lsls	r2, r2, #7
    fd2e:	4293      	cmp	r3, r2
    fd30:	d028      	beq.n	fd84 <_usart_set_config+0xc0>
    fd32:	2280      	movs	r2, #128	; 0x80
    fd34:	0212      	lsls	r2, r2, #8
    fd36:	4293      	cmp	r3, r2
    fd38:	d012      	beq.n	fd60 <_usart_set_config+0x9c>
    fd3a:	e02c      	b.n	fd96 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    fd3c:	231f      	movs	r3, #31
    fd3e:	18fb      	adds	r3, r7, r3
    fd40:	2200      	movs	r2, #0
    fd42:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    fd44:	231e      	movs	r3, #30
    fd46:	18fb      	adds	r3, r7, r3
    fd48:	2210      	movs	r2, #16
    fd4a:	701a      	strb	r2, [r3, #0]
			break;
    fd4c:	e023      	b.n	fd96 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    fd4e:	231f      	movs	r3, #31
    fd50:	18fb      	adds	r3, r7, r3
    fd52:	2200      	movs	r2, #0
    fd54:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    fd56:	231e      	movs	r3, #30
    fd58:	18fb      	adds	r3, r7, r3
    fd5a:	2208      	movs	r2, #8
    fd5c:	701a      	strb	r2, [r3, #0]
			break;
    fd5e:	e01a      	b.n	fd96 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    fd60:	231f      	movs	r3, #31
    fd62:	18fb      	adds	r3, r7, r3
    fd64:	2200      	movs	r2, #0
    fd66:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    fd68:	231e      	movs	r3, #30
    fd6a:	18fb      	adds	r3, r7, r3
    fd6c:	2203      	movs	r2, #3
    fd6e:	701a      	strb	r2, [r3, #0]
			break;
    fd70:	e011      	b.n	fd96 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    fd72:	231f      	movs	r3, #31
    fd74:	18fb      	adds	r3, r7, r3
    fd76:	2201      	movs	r2, #1
    fd78:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    fd7a:	231e      	movs	r3, #30
    fd7c:	18fb      	adds	r3, r7, r3
    fd7e:	2210      	movs	r2, #16
    fd80:	701a      	strb	r2, [r3, #0]
			break;
    fd82:	e008      	b.n	fd96 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    fd84:	231f      	movs	r3, #31
    fd86:	18fb      	adds	r3, r7, r3
    fd88:	2201      	movs	r2, #1
    fd8a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    fd8c:	231e      	movs	r3, #30
    fd8e:	18fb      	adds	r3, r7, r3
    fd90:	2208      	movs	r2, #8
    fd92:	701a      	strb	r2, [r3, #0]
			break;
    fd94:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    fd96:	683b      	ldr	r3, [r7, #0]
    fd98:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    fd9a:	683b      	ldr	r3, [r7, #0]
    fd9c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    fd9e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    fda0:	683b      	ldr	r3, [r7, #0]
    fda2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    fda4:	4313      	orrs	r3, r2
		config->sample_rate |
    fda6:	683a      	ldr	r2, [r7, #0]
    fda8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    fdaa:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    fdac:	683a      	ldr	r2, [r7, #0]
    fdae:	7e12      	ldrb	r2, [r2, #24]
    fdb0:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    fdb2:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    fdb4:	683a      	ldr	r2, [r7, #0]
    fdb6:	2126      	movs	r1, #38	; 0x26
    fdb8:	5c52      	ldrb	r2, [r2, r1]
    fdba:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    fdbc:	4313      	orrs	r3, r2
    fdbe:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    fdc0:	231d      	movs	r3, #29
    fdc2:	18fb      	adds	r3, r7, r3
    fdc4:	2200      	movs	r2, #0
    fdc6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    fdc8:	683b      	ldr	r3, [r7, #0]
    fdca:	685b      	ldr	r3, [r3, #4]
    fdcc:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    fdce:	68fb      	ldr	r3, [r7, #12]
    fdd0:	2b00      	cmp	r3, #0
    fdd2:	d01e      	beq.n	fe12 <_usart_set_config+0x14e>
    fdd4:	2280      	movs	r2, #128	; 0x80
    fdd6:	0552      	lsls	r2, r2, #21
    fdd8:	4293      	cmp	r3, r2
    fdda:	d14f      	bne.n	fe7c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    fddc:	683b      	ldr	r3, [r7, #0]
    fdde:	2227      	movs	r2, #39	; 0x27
    fde0:	5c9b      	ldrb	r3, [r3, r2]
    fde2:	2201      	movs	r2, #1
    fde4:	4053      	eors	r3, r2
    fde6:	b2db      	uxtb	r3, r3
    fde8:	2b00      	cmp	r3, #0
    fdea:	d046      	beq.n	fe7a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    fdec:	683b      	ldr	r3, [r7, #0]
    fdee:	6a1d      	ldr	r5, [r3, #32]
    fdf0:	693b      	ldr	r3, [r7, #16]
    fdf2:	b2db      	uxtb	r3, r3
    fdf4:	0018      	movs	r0, r3
    fdf6:	4b65      	ldr	r3, [pc, #404]	; (ff8c <_usart_set_config+0x2c8>)
    fdf8:	4798      	blx	r3
    fdfa:	0001      	movs	r1, r0
    fdfc:	231d      	movs	r3, #29
    fdfe:	18fc      	adds	r4, r7, r3
    fe00:	230a      	movs	r3, #10
    fe02:	18fb      	adds	r3, r7, r3
    fe04:	001a      	movs	r2, r3
    fe06:	0028      	movs	r0, r5
    fe08:	4b61      	ldr	r3, [pc, #388]	; (ff90 <_usart_set_config+0x2cc>)
    fe0a:	4798      	blx	r3
    fe0c:	0003      	movs	r3, r0
    fe0e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    fe10:	e033      	b.n	fe7a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    fe12:	683b      	ldr	r3, [r7, #0]
    fe14:	2227      	movs	r2, #39	; 0x27
    fe16:	5c9b      	ldrb	r3, [r3, r2]
    fe18:	2b00      	cmp	r3, #0
    fe1a:	d014      	beq.n	fe46 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    fe1c:	683b      	ldr	r3, [r7, #0]
    fe1e:	6a18      	ldr	r0, [r3, #32]
    fe20:	683b      	ldr	r3, [r7, #0]
    fe22:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    fe24:	231d      	movs	r3, #29
    fe26:	18fc      	adds	r4, r7, r3
    fe28:	231f      	movs	r3, #31
    fe2a:	18fb      	adds	r3, r7, r3
    fe2c:	781d      	ldrb	r5, [r3, #0]
    fe2e:	230a      	movs	r3, #10
    fe30:	18fa      	adds	r2, r7, r3
    fe32:	231e      	movs	r3, #30
    fe34:	18fb      	adds	r3, r7, r3
    fe36:	781b      	ldrb	r3, [r3, #0]
    fe38:	9300      	str	r3, [sp, #0]
    fe3a:	002b      	movs	r3, r5
    fe3c:	4d55      	ldr	r5, [pc, #340]	; (ff94 <_usart_set_config+0x2d0>)
    fe3e:	47a8      	blx	r5
    fe40:	0003      	movs	r3, r0
    fe42:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    fe44:	e01a      	b.n	fe7c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    fe46:	683b      	ldr	r3, [r7, #0]
    fe48:	6a1d      	ldr	r5, [r3, #32]
    fe4a:	693b      	ldr	r3, [r7, #16]
    fe4c:	b2db      	uxtb	r3, r3
    fe4e:	0018      	movs	r0, r3
    fe50:	4b4e      	ldr	r3, [pc, #312]	; (ff8c <_usart_set_config+0x2c8>)
    fe52:	4798      	blx	r3
				status_code =
    fe54:	231d      	movs	r3, #29
    fe56:	18fc      	adds	r4, r7, r3
    fe58:	231f      	movs	r3, #31
    fe5a:	18fb      	adds	r3, r7, r3
    fe5c:	7819      	ldrb	r1, [r3, #0]
    fe5e:	230a      	movs	r3, #10
    fe60:	18fa      	adds	r2, r7, r3
    fe62:	231e      	movs	r3, #30
    fe64:	18fb      	adds	r3, r7, r3
    fe66:	781b      	ldrb	r3, [r3, #0]
    fe68:	9300      	str	r3, [sp, #0]
    fe6a:	000b      	movs	r3, r1
    fe6c:	0001      	movs	r1, r0
    fe6e:	0028      	movs	r0, r5
    fe70:	4d48      	ldr	r5, [pc, #288]	; (ff94 <_usart_set_config+0x2d0>)
    fe72:	47a8      	blx	r5
    fe74:	0003      	movs	r3, r0
    fe76:	7023      	strb	r3, [r4, #0]
			break;
    fe78:	e000      	b.n	fe7c <_usart_set_config+0x1b8>
			break;
    fe7a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    fe7c:	231d      	movs	r3, #29
    fe7e:	18fb      	adds	r3, r7, r3
    fe80:	781b      	ldrb	r3, [r3, #0]
    fe82:	2b00      	cmp	r3, #0
    fe84:	d003      	beq.n	fe8e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    fe86:	231d      	movs	r3, #29
    fe88:	18fb      	adds	r3, r7, r3
    fe8a:	781b      	ldrb	r3, [r3, #0]
    fe8c:	e077      	b.n	ff7e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    fe8e:	683b      	ldr	r3, [r7, #0]
    fe90:	7e5b      	ldrb	r3, [r3, #25]
    fe92:	2b00      	cmp	r3, #0
    fe94:	d003      	beq.n	fe9e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    fe96:	683b      	ldr	r3, [r7, #0]
    fe98:	7e9a      	ldrb	r2, [r3, #26]
    fe9a:	69bb      	ldr	r3, [r7, #24]
    fe9c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    fe9e:	687b      	ldr	r3, [r7, #4]
    fea0:	0018      	movs	r0, r3
    fea2:	4b3d      	ldr	r3, [pc, #244]	; (ff98 <_usart_set_config+0x2d4>)
    fea4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    fea6:	230a      	movs	r3, #10
    fea8:	18fb      	adds	r3, r7, r3
    feaa:	881a      	ldrh	r2, [r3, #0]
    feac:	69bb      	ldr	r3, [r7, #24]
    feae:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    feb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    feb2:	68fb      	ldr	r3, [r7, #12]
    feb4:	4313      	orrs	r3, r2
    feb6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    feb8:	683b      	ldr	r3, [r7, #0]
    feba:	2227      	movs	r2, #39	; 0x27
    febc:	5c9b      	ldrb	r3, [r3, r2]
    febe:	2201      	movs	r2, #1
    fec0:	4053      	eors	r3, r2
    fec2:	b2db      	uxtb	r3, r3
    fec4:	2b00      	cmp	r3, #0
    fec6:	d003      	beq.n	fed0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    fec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    feca:	2204      	movs	r2, #4
    fecc:	4313      	orrs	r3, r2
    fece:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    fed0:	683b      	ldr	r3, [r7, #0]
    fed2:	7e5b      	ldrb	r3, [r3, #25]
    fed4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    fed6:	683b      	ldr	r3, [r7, #0]
    fed8:	7f1b      	ldrb	r3, [r3, #28]
    feda:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    fedc:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    fede:	683b      	ldr	r3, [r7, #0]
    fee0:	7f5b      	ldrb	r3, [r3, #29]
    fee2:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    fee4:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    fee6:	683b      	ldr	r3, [r7, #0]
    fee8:	2124      	movs	r1, #36	; 0x24
    feea:	5c5b      	ldrb	r3, [r3, r1]
    feec:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    feee:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    fef0:	683b      	ldr	r3, [r7, #0]
    fef2:	2125      	movs	r1, #37	; 0x25
    fef4:	5c5b      	ldrb	r3, [r3, r1]
    fef6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    fef8:	4313      	orrs	r3, r2
	ctrlb =  
    fefa:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    fefc:	683b      	ldr	r3, [r7, #0]
    fefe:	7a9b      	ldrb	r3, [r3, #10]
    ff00:	001a      	movs	r2, r3
    ff02:	6a3b      	ldr	r3, [r7, #32]
    ff04:	4313      	orrs	r3, r2
    ff06:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    ff08:	683b      	ldr	r3, [r7, #0]
    ff0a:	7adb      	ldrb	r3, [r3, #11]
    ff0c:	001a      	movs	r2, r3
    ff0e:	6a3b      	ldr	r3, [r7, #32]
    ff10:	4313      	orrs	r3, r2
    ff12:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    ff14:	683b      	ldr	r3, [r7, #0]
    ff16:	891b      	ldrh	r3, [r3, #8]
    ff18:	2bff      	cmp	r3, #255	; 0xff
    ff1a:	d00b      	beq.n	ff34 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    ff1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ff1e:	2280      	movs	r2, #128	; 0x80
    ff20:	0452      	lsls	r2, r2, #17
    ff22:	4313      	orrs	r3, r2
    ff24:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    ff26:	683b      	ldr	r3, [r7, #0]
    ff28:	891b      	ldrh	r3, [r3, #8]
    ff2a:	001a      	movs	r2, r3
    ff2c:	6a3b      	ldr	r3, [r7, #32]
    ff2e:	4313      	orrs	r3, r2
    ff30:	623b      	str	r3, [r7, #32]
    ff32:	e008      	b.n	ff46 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    ff34:	683b      	ldr	r3, [r7, #0]
    ff36:	7edb      	ldrb	r3, [r3, #27]
    ff38:	2b00      	cmp	r3, #0
    ff3a:	d004      	beq.n	ff46 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    ff3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ff3e:	2280      	movs	r2, #128	; 0x80
    ff40:	04d2      	lsls	r2, r2, #19
    ff42:	4313      	orrs	r3, r2
    ff44:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    ff46:	683b      	ldr	r3, [r7, #0]
    ff48:	222c      	movs	r2, #44	; 0x2c
    ff4a:	5c9b      	ldrb	r3, [r3, r2]
    ff4c:	2b00      	cmp	r3, #0
    ff4e:	d103      	bne.n	ff58 <_usart_set_config+0x294>
    ff50:	4b12      	ldr	r3, [pc, #72]	; (ff9c <_usart_set_config+0x2d8>)
    ff52:	4798      	blx	r3
    ff54:	1e03      	subs	r3, r0, #0
    ff56:	d003      	beq.n	ff60 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    ff58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ff5a:	2280      	movs	r2, #128	; 0x80
    ff5c:	4313      	orrs	r3, r2
    ff5e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    ff60:	687b      	ldr	r3, [r7, #4]
    ff62:	0018      	movs	r0, r3
    ff64:	4b0c      	ldr	r3, [pc, #48]	; (ff98 <_usart_set_config+0x2d4>)
    ff66:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    ff68:	69bb      	ldr	r3, [r7, #24]
    ff6a:	6a3a      	ldr	r2, [r7, #32]
    ff6c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    ff6e:	687b      	ldr	r3, [r7, #4]
    ff70:	0018      	movs	r0, r3
    ff72:	4b09      	ldr	r3, [pc, #36]	; (ff98 <_usart_set_config+0x2d4>)
    ff74:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    ff76:	69bb      	ldr	r3, [r7, #24]
    ff78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ff7a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    ff7c:	2300      	movs	r3, #0
}
    ff7e:	0018      	movs	r0, r3
    ff80:	46bd      	mov	sp, r7
    ff82:	b00a      	add	sp, #40	; 0x28
    ff84:	bdb0      	pop	{r4, r5, r7, pc}
    ff86:	46c0      	nop			; (mov r8, r8)
    ff88:	0000fab5 	.word	0x0000fab5
    ff8c:	00011805 	.word	0x00011805
    ff90:	0000f62f 	.word	0x0000f62f
    ff94:	0000f6ad 	.word	0x0000f6ad
    ff98:	0000fca1 	.word	0x0000fca1
    ff9c:	0000fc61 	.word	0x0000fc61

0000ffa0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    ffa0:	b590      	push	{r4, r7, lr}
    ffa2:	b093      	sub	sp, #76	; 0x4c
    ffa4:	af00      	add	r7, sp, #0
    ffa6:	60f8      	str	r0, [r7, #12]
    ffa8:	60b9      	str	r1, [r7, #8]
    ffaa:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    ffac:	233b      	movs	r3, #59	; 0x3b
    ffae:	18fb      	adds	r3, r7, r3
    ffb0:	2200      	movs	r2, #0
    ffb2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    ffb4:	68fb      	ldr	r3, [r7, #12]
    ffb6:	68ba      	ldr	r2, [r7, #8]
    ffb8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    ffba:	68fb      	ldr	r3, [r7, #12]
    ffbc:	681b      	ldr	r3, [r3, #0]
    ffbe:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    ffc0:	68fb      	ldr	r3, [r7, #12]
    ffc2:	681b      	ldr	r3, [r3, #0]
    ffc4:	0018      	movs	r0, r3
    ffc6:	4b86      	ldr	r3, [pc, #536]	; (101e0 <usart_init+0x240>)
    ffc8:	4798      	blx	r3
    ffca:	0003      	movs	r3, r0
    ffcc:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    ffce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ffd0:	3302      	adds	r3, #2
    ffd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    ffd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ffd6:	3314      	adds	r3, #20
    ffd8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    ffda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ffdc:	681b      	ldr	r3, [r3, #0]
    ffde:	2201      	movs	r2, #1
    ffe0:	4013      	ands	r3, r2
    ffe2:	d001      	beq.n	ffe8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    ffe4:	2305      	movs	r3, #5
    ffe6:	e0f6      	b.n	101d6 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    ffe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ffea:	681b      	ldr	r3, [r3, #0]
    ffec:	2202      	movs	r2, #2
    ffee:	4013      	ands	r3, r2
    fff0:	d001      	beq.n	fff6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    fff2:	231c      	movs	r3, #28
    fff4:	e0ef      	b.n	101d6 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    fff6:	2201      	movs	r2, #1
    fff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fffa:	409a      	lsls	r2, r3
    fffc:	0013      	movs	r3, r2
    fffe:	0019      	movs	r1, r3
   10000:	2002      	movs	r0, #2
   10002:	4b78      	ldr	r3, [pc, #480]	; (101e4 <usart_init+0x244>)
   10004:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   10006:	2324      	movs	r3, #36	; 0x24
   10008:	18fb      	adds	r3, r7, r3
   1000a:	0018      	movs	r0, r3
   1000c:	4b76      	ldr	r3, [pc, #472]	; (101e8 <usart_init+0x248>)
   1000e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   10010:	687b      	ldr	r3, [r7, #4]
   10012:	222d      	movs	r2, #45	; 0x2d
   10014:	5c9a      	ldrb	r2, [r3, r2]
   10016:	2324      	movs	r3, #36	; 0x24
   10018:	18fb      	adds	r3, r7, r3
   1001a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1001c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1001e:	b2db      	uxtb	r3, r3
   10020:	2224      	movs	r2, #36	; 0x24
   10022:	18ba      	adds	r2, r7, r2
   10024:	0011      	movs	r1, r2
   10026:	0018      	movs	r0, r3
   10028:	4b70      	ldr	r3, [pc, #448]	; (101ec <usart_init+0x24c>)
   1002a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1002c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1002e:	b2db      	uxtb	r3, r3
   10030:	0018      	movs	r0, r3
   10032:	4b6f      	ldr	r3, [pc, #444]	; (101f0 <usart_init+0x250>)
   10034:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   10036:	687b      	ldr	r3, [r7, #4]
   10038:	222d      	movs	r2, #45	; 0x2d
   1003a:	5c9b      	ldrb	r3, [r3, r2]
   1003c:	2100      	movs	r1, #0
   1003e:	0018      	movs	r0, r3
   10040:	4b6c      	ldr	r3, [pc, #432]	; (101f4 <usart_init+0x254>)
   10042:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   10044:	687b      	ldr	r3, [r7, #4]
   10046:	7ada      	ldrb	r2, [r3, #11]
   10048:	68fb      	ldr	r3, [r7, #12]
   1004a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   1004c:	687b      	ldr	r3, [r7, #4]
   1004e:	2224      	movs	r2, #36	; 0x24
   10050:	5c9a      	ldrb	r2, [r3, r2]
   10052:	68fb      	ldr	r3, [r7, #12]
   10054:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   10056:	687b      	ldr	r3, [r7, #4]
   10058:	2225      	movs	r2, #37	; 0x25
   1005a:	5c9a      	ldrb	r2, [r3, r2]
   1005c:	68fb      	ldr	r3, [r7, #12]
   1005e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   10060:	687b      	ldr	r3, [r7, #4]
   10062:	7eda      	ldrb	r2, [r3, #27]
   10064:	68fb      	ldr	r3, [r7, #12]
   10066:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   10068:	687b      	ldr	r3, [r7, #4]
   1006a:	7f1a      	ldrb	r2, [r3, #28]
   1006c:	68fb      	ldr	r3, [r7, #12]
   1006e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   10070:	233b      	movs	r3, #59	; 0x3b
   10072:	18fc      	adds	r4, r7, r3
   10074:	687a      	ldr	r2, [r7, #4]
   10076:	68fb      	ldr	r3, [r7, #12]
   10078:	0011      	movs	r1, r2
   1007a:	0018      	movs	r0, r3
   1007c:	4b5e      	ldr	r3, [pc, #376]	; (101f8 <usart_init+0x258>)
   1007e:	4798      	blx	r3
   10080:	0003      	movs	r3, r0
   10082:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   10084:	233b      	movs	r3, #59	; 0x3b
   10086:	18fb      	adds	r3, r7, r3
   10088:	781b      	ldrb	r3, [r3, #0]
   1008a:	2b00      	cmp	r3, #0
   1008c:	d003      	beq.n	10096 <usart_init+0xf6>
		return status_code;
   1008e:	233b      	movs	r3, #59	; 0x3b
   10090:	18fb      	adds	r3, r7, r3
   10092:	781b      	ldrb	r3, [r3, #0]
   10094:	e09f      	b.n	101d6 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   10096:	2320      	movs	r3, #32
   10098:	18fb      	adds	r3, r7, r3
   1009a:	0018      	movs	r0, r3
   1009c:	4b57      	ldr	r3, [pc, #348]	; (101fc <usart_init+0x25c>)
   1009e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   100a0:	2320      	movs	r3, #32
   100a2:	18fb      	adds	r3, r7, r3
   100a4:	2200      	movs	r2, #0
   100a6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   100a8:	2320      	movs	r3, #32
   100aa:	18fb      	adds	r3, r7, r3
   100ac:	2200      	movs	r2, #0
   100ae:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   100b0:	687b      	ldr	r3, [r7, #4]
   100b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   100b4:	2310      	movs	r3, #16
   100b6:	18fb      	adds	r3, r7, r3
   100b8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   100ba:	687b      	ldr	r3, [r7, #4]
   100bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   100be:	2310      	movs	r3, #16
   100c0:	18fb      	adds	r3, r7, r3
   100c2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   100c4:	687b      	ldr	r3, [r7, #4]
   100c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   100c8:	2310      	movs	r3, #16
   100ca:	18fb      	adds	r3, r7, r3
   100cc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   100ce:	687b      	ldr	r3, [r7, #4]
   100d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   100d2:	2310      	movs	r3, #16
   100d4:	18fb      	adds	r3, r7, r3
   100d6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   100d8:	2347      	movs	r3, #71	; 0x47
   100da:	18fb      	adds	r3, r7, r3
   100dc:	2200      	movs	r2, #0
   100de:	701a      	strb	r2, [r3, #0]
   100e0:	e02c      	b.n	1013c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   100e2:	2347      	movs	r3, #71	; 0x47
   100e4:	18fb      	adds	r3, r7, r3
   100e6:	781a      	ldrb	r2, [r3, #0]
   100e8:	2310      	movs	r3, #16
   100ea:	18fb      	adds	r3, r7, r3
   100ec:	0092      	lsls	r2, r2, #2
   100ee:	58d3      	ldr	r3, [r2, r3]
   100f0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   100f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100f4:	2b00      	cmp	r3, #0
   100f6:	d109      	bne.n	1010c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   100f8:	2347      	movs	r3, #71	; 0x47
   100fa:	18fb      	adds	r3, r7, r3
   100fc:	781a      	ldrb	r2, [r3, #0]
   100fe:	68bb      	ldr	r3, [r7, #8]
   10100:	0011      	movs	r1, r2
   10102:	0018      	movs	r0, r3
   10104:	4b3e      	ldr	r3, [pc, #248]	; (10200 <usart_init+0x260>)
   10106:	4798      	blx	r3
   10108:	0003      	movs	r3, r0
   1010a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   1010c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1010e:	3301      	adds	r3, #1
   10110:	d00d      	beq.n	1012e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   10112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10114:	b2da      	uxtb	r2, r3
   10116:	2320      	movs	r3, #32
   10118:	18fb      	adds	r3, r7, r3
   1011a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1011c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1011e:	0c1b      	lsrs	r3, r3, #16
   10120:	b2db      	uxtb	r3, r3
   10122:	2220      	movs	r2, #32
   10124:	18ba      	adds	r2, r7, r2
   10126:	0011      	movs	r1, r2
   10128:	0018      	movs	r0, r3
   1012a:	4b36      	ldr	r3, [pc, #216]	; (10204 <usart_init+0x264>)
   1012c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   1012e:	2347      	movs	r3, #71	; 0x47
   10130:	18fb      	adds	r3, r7, r3
   10132:	781a      	ldrb	r2, [r3, #0]
   10134:	2347      	movs	r3, #71	; 0x47
   10136:	18fb      	adds	r3, r7, r3
   10138:	3201      	adds	r2, #1
   1013a:	701a      	strb	r2, [r3, #0]
   1013c:	2347      	movs	r3, #71	; 0x47
   1013e:	18fb      	adds	r3, r7, r3
   10140:	781b      	ldrb	r3, [r3, #0]
   10142:	2b03      	cmp	r3, #3
   10144:	d9cd      	bls.n	100e2 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   10146:	2300      	movs	r3, #0
   10148:	63fb      	str	r3, [r7, #60]	; 0x3c
   1014a:	e00a      	b.n	10162 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   1014c:	68fa      	ldr	r2, [r7, #12]
   1014e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10150:	3302      	adds	r3, #2
   10152:	009b      	lsls	r3, r3, #2
   10154:	18d3      	adds	r3, r2, r3
   10156:	3304      	adds	r3, #4
   10158:	2200      	movs	r2, #0
   1015a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   1015c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1015e:	3301      	adds	r3, #1
   10160:	63fb      	str	r3, [r7, #60]	; 0x3c
   10162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10164:	2b05      	cmp	r3, #5
   10166:	d9f1      	bls.n	1014c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   10168:	68fb      	ldr	r3, [r7, #12]
   1016a:	2200      	movs	r2, #0
   1016c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   1016e:	68fb      	ldr	r3, [r7, #12]
   10170:	2200      	movs	r2, #0
   10172:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   10174:	68fb      	ldr	r3, [r7, #12]
   10176:	2200      	movs	r2, #0
   10178:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   1017a:	68fb      	ldr	r3, [r7, #12]
   1017c:	2200      	movs	r2, #0
   1017e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   10180:	68fb      	ldr	r3, [r7, #12]
   10182:	2230      	movs	r2, #48	; 0x30
   10184:	2100      	movs	r1, #0
   10186:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   10188:	68fb      	ldr	r3, [r7, #12]
   1018a:	2231      	movs	r2, #49	; 0x31
   1018c:	2100      	movs	r1, #0
   1018e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   10190:	68fb      	ldr	r3, [r7, #12]
   10192:	2232      	movs	r2, #50	; 0x32
   10194:	2100      	movs	r1, #0
   10196:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   10198:	68fb      	ldr	r3, [r7, #12]
   1019a:	2233      	movs	r2, #51	; 0x33
   1019c:	2100      	movs	r1, #0
   1019e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   101a0:	68fb      	ldr	r3, [r7, #12]
   101a2:	681b      	ldr	r3, [r3, #0]
   101a4:	2227      	movs	r2, #39	; 0x27
   101a6:	18bc      	adds	r4, r7, r2
   101a8:	0018      	movs	r0, r3
   101aa:	4b0d      	ldr	r3, [pc, #52]	; (101e0 <usart_init+0x240>)
   101ac:	4798      	blx	r3
   101ae:	0003      	movs	r3, r0
   101b0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   101b2:	4a15      	ldr	r2, [pc, #84]	; (10208 <usart_init+0x268>)
   101b4:	2327      	movs	r3, #39	; 0x27
   101b6:	18fb      	adds	r3, r7, r3
   101b8:	781b      	ldrb	r3, [r3, #0]
   101ba:	0011      	movs	r1, r2
   101bc:	0018      	movs	r0, r3
   101be:	4b13      	ldr	r3, [pc, #76]	; (1020c <usart_init+0x26c>)
   101c0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   101c2:	2327      	movs	r3, #39	; 0x27
   101c4:	18fb      	adds	r3, r7, r3
   101c6:	781a      	ldrb	r2, [r3, #0]
   101c8:	4b11      	ldr	r3, [pc, #68]	; (10210 <usart_init+0x270>)
   101ca:	0092      	lsls	r2, r2, #2
   101cc:	68f9      	ldr	r1, [r7, #12]
   101ce:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   101d0:	233b      	movs	r3, #59	; 0x3b
   101d2:	18fb      	adds	r3, r7, r3
   101d4:	781b      	ldrb	r3, [r3, #0]
}
   101d6:	0018      	movs	r0, r3
   101d8:	46bd      	mov	sp, r7
   101da:	b013      	add	sp, #76	; 0x4c
   101dc:	bd90      	pop	{r4, r7, pc}
   101de:	46c0      	nop			; (mov r8, r8)
   101e0:	0000fab5 	.word	0x0000fab5
   101e4:	0000fbdd 	.word	0x0000fbdd
   101e8:	0000fbc5 	.word	0x0000fbc5
   101ec:	000116e1 	.word	0x000116e1
   101f0:	00011725 	.word	0x00011725
   101f4:	0000f86d 	.word	0x0000f86d
   101f8:	0000fcc5 	.word	0x0000fcc5
   101fc:	0000fc39 	.word	0x0000fc39
   10200:	0000f8f9 	.word	0x0000f8f9
   10204:	000119cd 	.word	0x000119cd
   10208:	000103a9 	.word	0x000103a9
   1020c:	000106fd 	.word	0x000106fd
   10210:	20000904 	.word	0x20000904

00010214 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   10214:	b580      	push	{r7, lr}
   10216:	b084      	sub	sp, #16
   10218:	af00      	add	r7, sp, #0
   1021a:	6078      	str	r0, [r7, #4]
   1021c:	000a      	movs	r2, r1
   1021e:	1cbb      	adds	r3, r7, #2
   10220:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10222:	687b      	ldr	r3, [r7, #4]
   10224:	681b      	ldr	r3, [r3, #0]
   10226:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10228:	687b      	ldr	r3, [r7, #4]
   1022a:	79db      	ldrb	r3, [r3, #7]
   1022c:	2201      	movs	r2, #1
   1022e:	4053      	eors	r3, r2
   10230:	b2db      	uxtb	r3, r3
   10232:	2b00      	cmp	r3, #0
   10234:	d001      	beq.n	1023a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   10236:	231c      	movs	r3, #28
   10238:	e017      	b.n	1026a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   1023a:	687b      	ldr	r3, [r7, #4]
   1023c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1023e:	b29b      	uxth	r3, r3
   10240:	2b00      	cmp	r3, #0
   10242:	d001      	beq.n	10248 <usart_write_wait+0x34>
		return STATUS_BUSY;
   10244:	2305      	movs	r3, #5
   10246:	e010      	b.n	1026a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   10248:	687b      	ldr	r3, [r7, #4]
   1024a:	0018      	movs	r0, r3
   1024c:	4b09      	ldr	r3, [pc, #36]	; (10274 <usart_write_wait+0x60>)
   1024e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   10250:	68fb      	ldr	r3, [r7, #12]
   10252:	1cba      	adds	r2, r7, #2
   10254:	8812      	ldrh	r2, [r2, #0]
   10256:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   10258:	46c0      	nop			; (mov r8, r8)
   1025a:	68fb      	ldr	r3, [r7, #12]
   1025c:	7e1b      	ldrb	r3, [r3, #24]
   1025e:	b2db      	uxtb	r3, r3
   10260:	001a      	movs	r2, r3
   10262:	2302      	movs	r3, #2
   10264:	4013      	ands	r3, r2
   10266:	d0f8      	beq.n	1025a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   10268:	2300      	movs	r3, #0
}
   1026a:	0018      	movs	r0, r3
   1026c:	46bd      	mov	sp, r7
   1026e:	b004      	add	sp, #16
   10270:	bd80      	pop	{r7, pc}
   10272:	46c0      	nop			; (mov r8, r8)
   10274:	0000fca1 	.word	0x0000fca1

00010278 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
   10278:	b580      	push	{r7, lr}
   1027a:	b084      	sub	sp, #16
   1027c:	af00      	add	r7, sp, #0
   1027e:	6078      	str	r0, [r7, #4]
   10280:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10282:	687b      	ldr	r3, [r7, #4]
   10284:	681b      	ldr	r3, [r3, #0]
   10286:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   10288:	687b      	ldr	r3, [r7, #4]
   1028a:	799b      	ldrb	r3, [r3, #6]
   1028c:	2201      	movs	r2, #1
   1028e:	4053      	eors	r3, r2
   10290:	b2db      	uxtb	r3, r3
   10292:	2b00      	cmp	r3, #0
   10294:	d001      	beq.n	1029a <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
   10296:	231c      	movs	r3, #28
   10298:	e05e      	b.n	10358 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
   1029a:	687b      	ldr	r3, [r7, #4]
   1029c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1029e:	b29b      	uxth	r3, r3
   102a0:	2b00      	cmp	r3, #0
   102a2:	d001      	beq.n	102a8 <usart_read_wait+0x30>
		return STATUS_BUSY;
   102a4:	2305      	movs	r3, #5
   102a6:	e057      	b.n	10358 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
   102a8:	68fb      	ldr	r3, [r7, #12]
   102aa:	7e1b      	ldrb	r3, [r3, #24]
   102ac:	b2db      	uxtb	r3, r3
   102ae:	001a      	movs	r2, r3
   102b0:	2304      	movs	r3, #4
   102b2:	4013      	ands	r3, r2
   102b4:	d101      	bne.n	102ba <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
   102b6:	2305      	movs	r3, #5
   102b8:	e04e      	b.n	10358 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   102ba:	687b      	ldr	r3, [r7, #4]
   102bc:	0018      	movs	r0, r3
   102be:	4b28      	ldr	r3, [pc, #160]	; (10360 <usart_read_wait+0xe8>)
   102c0:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   102c2:	68fb      	ldr	r3, [r7, #12]
   102c4:	8b5b      	ldrh	r3, [r3, #26]
   102c6:	b29b      	uxth	r3, r3
   102c8:	b2da      	uxtb	r2, r3
   102ca:	230b      	movs	r3, #11
   102cc:	18fb      	adds	r3, r7, r3
   102ce:	213f      	movs	r1, #63	; 0x3f
   102d0:	400a      	ands	r2, r1
   102d2:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
   102d4:	230b      	movs	r3, #11
   102d6:	18fb      	adds	r3, r7, r3
   102d8:	781b      	ldrb	r3, [r3, #0]
   102da:	2b00      	cmp	r3, #0
   102dc:	d036      	beq.n	1034c <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
   102de:	230b      	movs	r3, #11
   102e0:	18fb      	adds	r3, r7, r3
   102e2:	781b      	ldrb	r3, [r3, #0]
   102e4:	2202      	movs	r2, #2
   102e6:	4013      	ands	r3, r2
   102e8:	d004      	beq.n	102f4 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   102ea:	68fb      	ldr	r3, [r7, #12]
   102ec:	2202      	movs	r2, #2
   102ee:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
   102f0:	231a      	movs	r3, #26
   102f2:	e031      	b.n	10358 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   102f4:	230b      	movs	r3, #11
   102f6:	18fb      	adds	r3, r7, r3
   102f8:	781b      	ldrb	r3, [r3, #0]
   102fa:	2204      	movs	r2, #4
   102fc:	4013      	ands	r3, r2
   102fe:	d004      	beq.n	1030a <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   10300:	68fb      	ldr	r3, [r7, #12]
   10302:	2204      	movs	r2, #4
   10304:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
   10306:	231e      	movs	r3, #30
   10308:	e026      	b.n	10358 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1030a:	230b      	movs	r3, #11
   1030c:	18fb      	adds	r3, r7, r3
   1030e:	781b      	ldrb	r3, [r3, #0]
   10310:	2201      	movs	r2, #1
   10312:	4013      	ands	r3, r2
   10314:	d004      	beq.n	10320 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   10316:	68fb      	ldr	r3, [r7, #12]
   10318:	2201      	movs	r2, #1
   1031a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
   1031c:	2313      	movs	r3, #19
   1031e:	e01b      	b.n	10358 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
   10320:	230b      	movs	r3, #11
   10322:	18fb      	adds	r3, r7, r3
   10324:	781b      	ldrb	r3, [r3, #0]
   10326:	2210      	movs	r2, #16
   10328:	4013      	ands	r3, r2
   1032a:	d004      	beq.n	10336 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1032c:	68fb      	ldr	r3, [r7, #12]
   1032e:	2210      	movs	r2, #16
   10330:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
   10332:	2342      	movs	r3, #66	; 0x42
   10334:	e010      	b.n	10358 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
   10336:	230b      	movs	r3, #11
   10338:	18fb      	adds	r3, r7, r3
   1033a:	781b      	ldrb	r3, [r3, #0]
   1033c:	2220      	movs	r2, #32
   1033e:	4013      	ands	r3, r2
   10340:	d004      	beq.n	1034c <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   10342:	68fb      	ldr	r3, [r7, #12]
   10344:	2220      	movs	r2, #32
   10346:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
   10348:	2341      	movs	r3, #65	; 0x41
   1034a:	e005      	b.n	10358 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
   1034c:	68fb      	ldr	r3, [r7, #12]
   1034e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   10350:	b29a      	uxth	r2, r3
   10352:	683b      	ldr	r3, [r7, #0]
   10354:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
   10356:	2300      	movs	r3, #0
}
   10358:	0018      	movs	r0, r3
   1035a:	46bd      	mov	sp, r7
   1035c:	b004      	add	sp, #16
   1035e:	bd80      	pop	{r7, pc}
   10360:	0000fca1 	.word	0x0000fca1

00010364 <usart_is_syncing>:
{
   10364:	b580      	push	{r7, lr}
   10366:	b084      	sub	sp, #16
   10368:	af00      	add	r7, sp, #0
   1036a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1036c:	687b      	ldr	r3, [r7, #4]
   1036e:	681b      	ldr	r3, [r3, #0]
   10370:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   10372:	68fb      	ldr	r3, [r7, #12]
   10374:	69db      	ldr	r3, [r3, #28]
   10376:	1e5a      	subs	r2, r3, #1
   10378:	4193      	sbcs	r3, r2
   1037a:	b2db      	uxtb	r3, r3
}
   1037c:	0018      	movs	r0, r3
   1037e:	46bd      	mov	sp, r7
   10380:	b004      	add	sp, #16
   10382:	bd80      	pop	{r7, pc}

00010384 <_usart_wait_for_sync>:
{
   10384:	b580      	push	{r7, lr}
   10386:	b082      	sub	sp, #8
   10388:	af00      	add	r7, sp, #0
   1038a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   1038c:	46c0      	nop			; (mov r8, r8)
   1038e:	687b      	ldr	r3, [r7, #4]
   10390:	0018      	movs	r0, r3
   10392:	4b04      	ldr	r3, [pc, #16]	; (103a4 <_usart_wait_for_sync+0x20>)
   10394:	4798      	blx	r3
   10396:	1e03      	subs	r3, r0, #0
   10398:	d1f9      	bne.n	1038e <_usart_wait_for_sync+0xa>
}
   1039a:	46c0      	nop			; (mov r8, r8)
   1039c:	46bd      	mov	sp, r7
   1039e:	b002      	add	sp, #8
   103a0:	bd80      	pop	{r7, pc}
   103a2:	46c0      	nop			; (mov r8, r8)
   103a4:	00010365 	.word	0x00010365

000103a8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   103a8:	b580      	push	{r7, lr}
   103aa:	b088      	sub	sp, #32
   103ac:	af00      	add	r7, sp, #0
   103ae:	0002      	movs	r2, r0
   103b0:	1dfb      	adds	r3, r7, #7
   103b2:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   103b4:	1dfb      	adds	r3, r7, #7
   103b6:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   103b8:	4ba3      	ldr	r3, [pc, #652]	; (10648 <_usart_interrupt_handler+0x2a0>)
   103ba:	0092      	lsls	r2, r2, #2
   103bc:	58d3      	ldr	r3, [r2, r3]
   103be:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   103c0:	69bb      	ldr	r3, [r7, #24]
   103c2:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   103c4:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   103c6:	69bb      	ldr	r3, [r7, #24]
   103c8:	0018      	movs	r0, r3
   103ca:	4ba0      	ldr	r3, [pc, #640]	; (1064c <_usart_interrupt_handler+0x2a4>)
   103cc:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   103ce:	697b      	ldr	r3, [r7, #20]
   103d0:	7e1b      	ldrb	r3, [r3, #24]
   103d2:	b2da      	uxtb	r2, r3
   103d4:	2312      	movs	r3, #18
   103d6:	18fb      	adds	r3, r7, r3
   103d8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   103da:	697b      	ldr	r3, [r7, #20]
   103dc:	7d9b      	ldrb	r3, [r3, #22]
   103de:	b2db      	uxtb	r3, r3
   103e0:	b29a      	uxth	r2, r3
   103e2:	2312      	movs	r3, #18
   103e4:	18fb      	adds	r3, r7, r3
   103e6:	2112      	movs	r1, #18
   103e8:	1879      	adds	r1, r7, r1
   103ea:	8809      	ldrh	r1, [r1, #0]
   103ec:	400a      	ands	r2, r1
   103ee:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   103f0:	69bb      	ldr	r3, [r7, #24]
   103f2:	2230      	movs	r2, #48	; 0x30
   103f4:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   103f6:	69ba      	ldr	r2, [r7, #24]
   103f8:	2131      	movs	r1, #49	; 0x31
   103fa:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   103fc:	4013      	ands	r3, r2
   103fe:	b2da      	uxtb	r2, r3
   10400:	2310      	movs	r3, #16
   10402:	18fb      	adds	r3, r7, r3
   10404:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   10406:	2312      	movs	r3, #18
   10408:	18fb      	adds	r3, r7, r3
   1040a:	881b      	ldrh	r3, [r3, #0]
   1040c:	2201      	movs	r2, #1
   1040e:	4013      	ands	r3, r2
   10410:	d044      	beq.n	1049c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   10412:	69bb      	ldr	r3, [r7, #24]
   10414:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   10416:	b29b      	uxth	r3, r3
   10418:	2b00      	cmp	r3, #0
   1041a:	d03c      	beq.n	10496 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1041c:	69bb      	ldr	r3, [r7, #24]
   1041e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10420:	781b      	ldrb	r3, [r3, #0]
   10422:	b2da      	uxtb	r2, r3
   10424:	231c      	movs	r3, #28
   10426:	18fb      	adds	r3, r7, r3
   10428:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   1042a:	69bb      	ldr	r3, [r7, #24]
   1042c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1042e:	1c5a      	adds	r2, r3, #1
   10430:	69bb      	ldr	r3, [r7, #24]
   10432:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10434:	69bb      	ldr	r3, [r7, #24]
   10436:	795b      	ldrb	r3, [r3, #5]
   10438:	2b01      	cmp	r3, #1
   1043a:	d113      	bne.n	10464 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   1043c:	69bb      	ldr	r3, [r7, #24]
   1043e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10440:	781b      	ldrb	r3, [r3, #0]
   10442:	b2db      	uxtb	r3, r3
   10444:	021b      	lsls	r3, r3, #8
   10446:	b21a      	sxth	r2, r3
   10448:	231c      	movs	r3, #28
   1044a:	18fb      	adds	r3, r7, r3
   1044c:	2100      	movs	r1, #0
   1044e:	5e5b      	ldrsh	r3, [r3, r1]
   10450:	4313      	orrs	r3, r2
   10452:	b21a      	sxth	r2, r3
   10454:	231c      	movs	r3, #28
   10456:	18fb      	adds	r3, r7, r3
   10458:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   1045a:	69bb      	ldr	r3, [r7, #24]
   1045c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1045e:	1c5a      	adds	r2, r3, #1
   10460:	69bb      	ldr	r3, [r7, #24]
   10462:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   10464:	231c      	movs	r3, #28
   10466:	18fb      	adds	r3, r7, r3
   10468:	881b      	ldrh	r3, [r3, #0]
   1046a:	05db      	lsls	r3, r3, #23
   1046c:	0ddb      	lsrs	r3, r3, #23
   1046e:	b29a      	uxth	r2, r3
   10470:	697b      	ldr	r3, [r7, #20]
   10472:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   10474:	69bb      	ldr	r3, [r7, #24]
   10476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   10478:	b29b      	uxth	r3, r3
   1047a:	3b01      	subs	r3, #1
   1047c:	b29b      	uxth	r3, r3
   1047e:	69ba      	ldr	r2, [r7, #24]
   10480:	1c19      	adds	r1, r3, #0
   10482:	85d1      	strh	r1, [r2, #46]	; 0x2e
   10484:	2b00      	cmp	r3, #0
   10486:	d109      	bne.n	1049c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10488:	697b      	ldr	r3, [r7, #20]
   1048a:	2201      	movs	r2, #1
   1048c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   1048e:	697b      	ldr	r3, [r7, #20]
   10490:	2202      	movs	r2, #2
   10492:	759a      	strb	r2, [r3, #22]
   10494:	e002      	b.n	1049c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10496:	697b      	ldr	r3, [r7, #20]
   10498:	2201      	movs	r2, #1
   1049a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   1049c:	2312      	movs	r3, #18
   1049e:	18fb      	adds	r3, r7, r3
   104a0:	881b      	ldrh	r3, [r3, #0]
   104a2:	2202      	movs	r2, #2
   104a4:	4013      	ands	r3, r2
   104a6:	d011      	beq.n	104cc <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   104a8:	697b      	ldr	r3, [r7, #20]
   104aa:	2202      	movs	r2, #2
   104ac:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   104ae:	69bb      	ldr	r3, [r7, #24]
   104b0:	2233      	movs	r2, #51	; 0x33
   104b2:	2100      	movs	r1, #0
   104b4:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   104b6:	2310      	movs	r3, #16
   104b8:	18fb      	adds	r3, r7, r3
   104ba:	881b      	ldrh	r3, [r3, #0]
   104bc:	2201      	movs	r2, #1
   104be:	4013      	ands	r3, r2
   104c0:	d004      	beq.n	104cc <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   104c2:	69bb      	ldr	r3, [r7, #24]
   104c4:	68db      	ldr	r3, [r3, #12]
   104c6:	69ba      	ldr	r2, [r7, #24]
   104c8:	0010      	movs	r0, r2
   104ca:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   104cc:	2312      	movs	r3, #18
   104ce:	18fb      	adds	r3, r7, r3
   104d0:	881b      	ldrh	r3, [r3, #0]
   104d2:	2204      	movs	r2, #4
   104d4:	4013      	ands	r3, r2
   104d6:	d100      	bne.n	104da <_usart_interrupt_handler+0x132>
   104d8:	e0bd      	b.n	10656 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   104da:	69bb      	ldr	r3, [r7, #24]
   104dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   104de:	b29b      	uxth	r3, r3
   104e0:	2b00      	cmp	r3, #0
   104e2:	d100      	bne.n	104e6 <_usart_interrupt_handler+0x13e>
   104e4:	e0b4      	b.n	10650 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   104e6:	697b      	ldr	r3, [r7, #20]
   104e8:	8b5b      	ldrh	r3, [r3, #26]
   104ea:	b29b      	uxth	r3, r3
   104ec:	b2da      	uxtb	r2, r3
   104ee:	231f      	movs	r3, #31
   104f0:	18fb      	adds	r3, r7, r3
   104f2:	213f      	movs	r1, #63	; 0x3f
   104f4:	400a      	ands	r2, r1
   104f6:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   104f8:	231f      	movs	r3, #31
   104fa:	18fb      	adds	r3, r7, r3
   104fc:	781b      	ldrb	r3, [r3, #0]
   104fe:	2208      	movs	r2, #8
   10500:	4013      	ands	r3, r2
   10502:	d007      	beq.n	10514 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   10504:	231f      	movs	r3, #31
   10506:	18fb      	adds	r3, r7, r3
   10508:	221f      	movs	r2, #31
   1050a:	18ba      	adds	r2, r7, r2
   1050c:	7812      	ldrb	r2, [r2, #0]
   1050e:	2108      	movs	r1, #8
   10510:	438a      	bics	r2, r1
   10512:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   10514:	231f      	movs	r3, #31
   10516:	18fb      	adds	r3, r7, r3
   10518:	781b      	ldrb	r3, [r3, #0]
   1051a:	2b00      	cmp	r3, #0
   1051c:	d050      	beq.n	105c0 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   1051e:	231f      	movs	r3, #31
   10520:	18fb      	adds	r3, r7, r3
   10522:	781b      	ldrb	r3, [r3, #0]
   10524:	2202      	movs	r2, #2
   10526:	4013      	ands	r3, r2
   10528:	d007      	beq.n	1053a <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1052a:	69bb      	ldr	r3, [r7, #24]
   1052c:	2232      	movs	r2, #50	; 0x32
   1052e:	211a      	movs	r1, #26
   10530:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   10532:	697b      	ldr	r3, [r7, #20]
   10534:	2202      	movs	r2, #2
   10536:	835a      	strh	r2, [r3, #26]
   10538:	e036      	b.n	105a8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1053a:	231f      	movs	r3, #31
   1053c:	18fb      	adds	r3, r7, r3
   1053e:	781b      	ldrb	r3, [r3, #0]
   10540:	2204      	movs	r2, #4
   10542:	4013      	ands	r3, r2
   10544:	d007      	beq.n	10556 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   10546:	69bb      	ldr	r3, [r7, #24]
   10548:	2232      	movs	r2, #50	; 0x32
   1054a:	211e      	movs	r1, #30
   1054c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   1054e:	697b      	ldr	r3, [r7, #20]
   10550:	2204      	movs	r2, #4
   10552:	835a      	strh	r2, [r3, #26]
   10554:	e028      	b.n	105a8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   10556:	231f      	movs	r3, #31
   10558:	18fb      	adds	r3, r7, r3
   1055a:	781b      	ldrb	r3, [r3, #0]
   1055c:	2201      	movs	r2, #1
   1055e:	4013      	ands	r3, r2
   10560:	d007      	beq.n	10572 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   10562:	69bb      	ldr	r3, [r7, #24]
   10564:	2232      	movs	r2, #50	; 0x32
   10566:	2113      	movs	r1, #19
   10568:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1056a:	697b      	ldr	r3, [r7, #20]
   1056c:	2201      	movs	r2, #1
   1056e:	835a      	strh	r2, [r3, #26]
   10570:	e01a      	b.n	105a8 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   10572:	231f      	movs	r3, #31
   10574:	18fb      	adds	r3, r7, r3
   10576:	781b      	ldrb	r3, [r3, #0]
   10578:	2210      	movs	r2, #16
   1057a:	4013      	ands	r3, r2
   1057c:	d007      	beq.n	1058e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   1057e:	69bb      	ldr	r3, [r7, #24]
   10580:	2232      	movs	r2, #50	; 0x32
   10582:	2142      	movs	r1, #66	; 0x42
   10584:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   10586:	697b      	ldr	r3, [r7, #20]
   10588:	2210      	movs	r2, #16
   1058a:	835a      	strh	r2, [r3, #26]
   1058c:	e00c      	b.n	105a8 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   1058e:	231f      	movs	r3, #31
   10590:	18fb      	adds	r3, r7, r3
   10592:	781b      	ldrb	r3, [r3, #0]
   10594:	2220      	movs	r2, #32
   10596:	4013      	ands	r3, r2
   10598:	d006      	beq.n	105a8 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   1059a:	69bb      	ldr	r3, [r7, #24]
   1059c:	2232      	movs	r2, #50	; 0x32
   1059e:	2141      	movs	r1, #65	; 0x41
   105a0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   105a2:	697b      	ldr	r3, [r7, #20]
   105a4:	2220      	movs	r2, #32
   105a6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   105a8:	2310      	movs	r3, #16
   105aa:	18fb      	adds	r3, r7, r3
   105ac:	881b      	ldrh	r3, [r3, #0]
   105ae:	2204      	movs	r2, #4
   105b0:	4013      	ands	r3, r2
				if (callback_status
   105b2:	d050      	beq.n	10656 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   105b4:	69bb      	ldr	r3, [r7, #24]
   105b6:	695b      	ldr	r3, [r3, #20]
   105b8:	69ba      	ldr	r2, [r7, #24]
   105ba:	0010      	movs	r0, r2
   105bc:	4798      	blx	r3
   105be:	e04a      	b.n	10656 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   105c0:	697b      	ldr	r3, [r7, #20]
   105c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   105c4:	b29a      	uxth	r2, r3
   105c6:	230e      	movs	r3, #14
   105c8:	18fb      	adds	r3, r7, r3
   105ca:	05d2      	lsls	r2, r2, #23
   105cc:	0dd2      	lsrs	r2, r2, #23
   105ce:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   105d0:	69bb      	ldr	r3, [r7, #24]
   105d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   105d4:	220e      	movs	r2, #14
   105d6:	18ba      	adds	r2, r7, r2
   105d8:	8812      	ldrh	r2, [r2, #0]
   105da:	b2d2      	uxtb	r2, r2
   105dc:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   105de:	69bb      	ldr	r3, [r7, #24]
   105e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   105e2:	1c5a      	adds	r2, r3, #1
   105e4:	69bb      	ldr	r3, [r7, #24]
   105e6:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   105e8:	69bb      	ldr	r3, [r7, #24]
   105ea:	795b      	ldrb	r3, [r3, #5]
   105ec:	2b01      	cmp	r3, #1
   105ee:	d10d      	bne.n	1060c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   105f0:	69bb      	ldr	r3, [r7, #24]
   105f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   105f4:	220e      	movs	r2, #14
   105f6:	18ba      	adds	r2, r7, r2
   105f8:	8812      	ldrh	r2, [r2, #0]
   105fa:	0a12      	lsrs	r2, r2, #8
   105fc:	b292      	uxth	r2, r2
   105fe:	b2d2      	uxtb	r2, r2
   10600:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   10602:	69bb      	ldr	r3, [r7, #24]
   10604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10606:	1c5a      	adds	r2, r3, #1
   10608:	69bb      	ldr	r3, [r7, #24]
   1060a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   1060c:	69bb      	ldr	r3, [r7, #24]
   1060e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   10610:	b29b      	uxth	r3, r3
   10612:	3b01      	subs	r3, #1
   10614:	b29b      	uxth	r3, r3
   10616:	69ba      	ldr	r2, [r7, #24]
   10618:	1c19      	adds	r1, r3, #0
   1061a:	8591      	strh	r1, [r2, #44]	; 0x2c
   1061c:	2b00      	cmp	r3, #0
   1061e:	d11a      	bne.n	10656 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10620:	697b      	ldr	r3, [r7, #20]
   10622:	2204      	movs	r2, #4
   10624:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   10626:	69bb      	ldr	r3, [r7, #24]
   10628:	2232      	movs	r2, #50	; 0x32
   1062a:	2100      	movs	r1, #0
   1062c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   1062e:	2310      	movs	r3, #16
   10630:	18fb      	adds	r3, r7, r3
   10632:	881b      	ldrh	r3, [r3, #0]
   10634:	2202      	movs	r2, #2
   10636:	4013      	ands	r3, r2
					if (callback_status
   10638:	d00d      	beq.n	10656 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   1063a:	69bb      	ldr	r3, [r7, #24]
   1063c:	691b      	ldr	r3, [r3, #16]
   1063e:	69ba      	ldr	r2, [r7, #24]
   10640:	0010      	movs	r0, r2
   10642:	4798      	blx	r3
   10644:	e007      	b.n	10656 <_usart_interrupt_handler+0x2ae>
   10646:	46c0      	nop			; (mov r8, r8)
   10648:	20000904 	.word	0x20000904
   1064c:	00010385 	.word	0x00010385
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10650:	697b      	ldr	r3, [r7, #20]
   10652:	2204      	movs	r2, #4
   10654:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   10656:	2312      	movs	r3, #18
   10658:	18fb      	adds	r3, r7, r3
   1065a:	881b      	ldrh	r3, [r3, #0]
   1065c:	2210      	movs	r2, #16
   1065e:	4013      	ands	r3, r2
   10660:	d010      	beq.n	10684 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   10662:	697b      	ldr	r3, [r7, #20]
   10664:	2210      	movs	r2, #16
   10666:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   10668:	697b      	ldr	r3, [r7, #20]
   1066a:	2210      	movs	r2, #16
   1066c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   1066e:	2310      	movs	r3, #16
   10670:	18fb      	adds	r3, r7, r3
   10672:	881b      	ldrh	r3, [r3, #0]
   10674:	2210      	movs	r2, #16
   10676:	4013      	ands	r3, r2
   10678:	d004      	beq.n	10684 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   1067a:	69bb      	ldr	r3, [r7, #24]
   1067c:	69db      	ldr	r3, [r3, #28]
   1067e:	69ba      	ldr	r2, [r7, #24]
   10680:	0010      	movs	r0, r2
   10682:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   10684:	2312      	movs	r3, #18
   10686:	18fb      	adds	r3, r7, r3
   10688:	881b      	ldrh	r3, [r3, #0]
   1068a:	2220      	movs	r2, #32
   1068c:	4013      	ands	r3, r2
   1068e:	d010      	beq.n	106b2 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   10690:	697b      	ldr	r3, [r7, #20]
   10692:	2220      	movs	r2, #32
   10694:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   10696:	697b      	ldr	r3, [r7, #20]
   10698:	2220      	movs	r2, #32
   1069a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   1069c:	2310      	movs	r3, #16
   1069e:	18fb      	adds	r3, r7, r3
   106a0:	881b      	ldrh	r3, [r3, #0]
   106a2:	2208      	movs	r2, #8
   106a4:	4013      	ands	r3, r2
   106a6:	d004      	beq.n	106b2 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   106a8:	69bb      	ldr	r3, [r7, #24]
   106aa:	699b      	ldr	r3, [r3, #24]
   106ac:	69ba      	ldr	r2, [r7, #24]
   106ae:	0010      	movs	r0, r2
   106b0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   106b2:	2312      	movs	r3, #18
   106b4:	18fb      	adds	r3, r7, r3
   106b6:	881b      	ldrh	r3, [r3, #0]
   106b8:	2208      	movs	r2, #8
   106ba:	4013      	ands	r3, r2
   106bc:	d010      	beq.n	106e0 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   106be:	697b      	ldr	r3, [r7, #20]
   106c0:	2208      	movs	r2, #8
   106c2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   106c4:	697b      	ldr	r3, [r7, #20]
   106c6:	2208      	movs	r2, #8
   106c8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   106ca:	2310      	movs	r3, #16
   106cc:	18fb      	adds	r3, r7, r3
   106ce:	881b      	ldrh	r3, [r3, #0]
   106d0:	2220      	movs	r2, #32
   106d2:	4013      	ands	r3, r2
   106d4:	d004      	beq.n	106e0 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   106d6:	69bb      	ldr	r3, [r7, #24]
   106d8:	6a1b      	ldr	r3, [r3, #32]
   106da:	69ba      	ldr	r2, [r7, #24]
   106dc:	0010      	movs	r0, r2
   106de:	4798      	blx	r3
		}
	}
#endif
}
   106e0:	46c0      	nop			; (mov r8, r8)
   106e2:	46bd      	mov	sp, r7
   106e4:	b008      	add	sp, #32
   106e6:	bd80      	pop	{r7, pc}

000106e8 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   106e8:	b580      	push	{r7, lr}
   106ea:	b082      	sub	sp, #8
   106ec:	af00      	add	r7, sp, #0
   106ee:	0002      	movs	r2, r0
   106f0:	1dfb      	adds	r3, r7, #7
   106f2:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   106f4:	46c0      	nop			; (mov r8, r8)
   106f6:	46bd      	mov	sp, r7
   106f8:	b002      	add	sp, #8
   106fa:	bd80      	pop	{r7, pc}

000106fc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   106fc:	b580      	push	{r7, lr}
   106fe:	b084      	sub	sp, #16
   10700:	af00      	add	r7, sp, #0
   10702:	0002      	movs	r2, r0
   10704:	6039      	str	r1, [r7, #0]
   10706:	1dfb      	adds	r3, r7, #7
   10708:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   1070a:	4b13      	ldr	r3, [pc, #76]	; (10758 <_sercom_set_handler+0x5c>)
   1070c:	781b      	ldrb	r3, [r3, #0]
   1070e:	2201      	movs	r2, #1
   10710:	4053      	eors	r3, r2
   10712:	b2db      	uxtb	r3, r3
   10714:	2b00      	cmp	r3, #0
   10716:	d015      	beq.n	10744 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   10718:	2300      	movs	r3, #0
   1071a:	60fb      	str	r3, [r7, #12]
   1071c:	e00c      	b.n	10738 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1071e:	4b0f      	ldr	r3, [pc, #60]	; (1075c <_sercom_set_handler+0x60>)
   10720:	68fa      	ldr	r2, [r7, #12]
   10722:	0092      	lsls	r2, r2, #2
   10724:	490e      	ldr	r1, [pc, #56]	; (10760 <_sercom_set_handler+0x64>)
   10726:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   10728:	4b0e      	ldr	r3, [pc, #56]	; (10764 <_sercom_set_handler+0x68>)
   1072a:	68fa      	ldr	r2, [r7, #12]
   1072c:	0092      	lsls	r2, r2, #2
   1072e:	2100      	movs	r1, #0
   10730:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   10732:	68fb      	ldr	r3, [r7, #12]
   10734:	3301      	adds	r3, #1
   10736:	60fb      	str	r3, [r7, #12]
   10738:	68fb      	ldr	r3, [r7, #12]
   1073a:	2b05      	cmp	r3, #5
   1073c:	d9ef      	bls.n	1071e <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   1073e:	4b06      	ldr	r3, [pc, #24]	; (10758 <_sercom_set_handler+0x5c>)
   10740:	2201      	movs	r2, #1
   10742:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   10744:	1dfb      	adds	r3, r7, #7
   10746:	781a      	ldrb	r2, [r3, #0]
   10748:	4b04      	ldr	r3, [pc, #16]	; (1075c <_sercom_set_handler+0x60>)
   1074a:	0092      	lsls	r2, r2, #2
   1074c:	6839      	ldr	r1, [r7, #0]
   1074e:	50d1      	str	r1, [r2, r3]
}
   10750:	46c0      	nop			; (mov r8, r8)
   10752:	46bd      	mov	sp, r7
   10754:	b004      	add	sp, #16
   10756:	bd80      	pop	{r7, pc}
   10758:	20000266 	.word	0x20000266
   1075c:	20000268 	.word	0x20000268
   10760:	000106e9 	.word	0x000106e9
   10764:	20000904 	.word	0x20000904

00010768 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   10768:	b590      	push	{r4, r7, lr}
   1076a:	b085      	sub	sp, #20
   1076c:	af00      	add	r7, sp, #0
   1076e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   10770:	2308      	movs	r3, #8
   10772:	18fb      	adds	r3, r7, r3
   10774:	4a0b      	ldr	r2, [pc, #44]	; (107a4 <_sercom_get_interrupt_vector+0x3c>)
   10776:	6811      	ldr	r1, [r2, #0]
   10778:	6019      	str	r1, [r3, #0]
   1077a:	8892      	ldrh	r2, [r2, #4]
   1077c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   1077e:	230f      	movs	r3, #15
   10780:	18fc      	adds	r4, r7, r3
   10782:	687b      	ldr	r3, [r7, #4]
   10784:	0018      	movs	r0, r3
   10786:	4b08      	ldr	r3, [pc, #32]	; (107a8 <_sercom_get_interrupt_vector+0x40>)
   10788:	4798      	blx	r3
   1078a:	0003      	movs	r3, r0
   1078c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   1078e:	230f      	movs	r3, #15
   10790:	18fb      	adds	r3, r7, r3
   10792:	781b      	ldrb	r3, [r3, #0]
   10794:	2208      	movs	r2, #8
   10796:	18ba      	adds	r2, r7, r2
   10798:	5cd3      	ldrb	r3, [r2, r3]
   1079a:	b25b      	sxtb	r3, r3
}
   1079c:	0018      	movs	r0, r3
   1079e:	46bd      	mov	sp, r7
   107a0:	b005      	add	sp, #20
   107a2:	bd90      	pop	{r4, r7, pc}
   107a4:	0001ad74 	.word	0x0001ad74
   107a8:	0000fab5 	.word	0x0000fab5

000107ac <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   107ac:	b580      	push	{r7, lr}
   107ae:	af00      	add	r7, sp, #0
   107b0:	4b03      	ldr	r3, [pc, #12]	; (107c0 <SERCOM0_Handler+0x14>)
   107b2:	681b      	ldr	r3, [r3, #0]
   107b4:	2000      	movs	r0, #0
   107b6:	4798      	blx	r3
   107b8:	46c0      	nop			; (mov r8, r8)
   107ba:	46bd      	mov	sp, r7
   107bc:	bd80      	pop	{r7, pc}
   107be:	46c0      	nop			; (mov r8, r8)
   107c0:	20000268 	.word	0x20000268

000107c4 <SERCOM1_Handler>:
   107c4:	b580      	push	{r7, lr}
   107c6:	af00      	add	r7, sp, #0
   107c8:	4b03      	ldr	r3, [pc, #12]	; (107d8 <SERCOM1_Handler+0x14>)
   107ca:	685b      	ldr	r3, [r3, #4]
   107cc:	2001      	movs	r0, #1
   107ce:	4798      	blx	r3
   107d0:	46c0      	nop			; (mov r8, r8)
   107d2:	46bd      	mov	sp, r7
   107d4:	bd80      	pop	{r7, pc}
   107d6:	46c0      	nop			; (mov r8, r8)
   107d8:	20000268 	.word	0x20000268

000107dc <SERCOM2_Handler>:
   107dc:	b580      	push	{r7, lr}
   107de:	af00      	add	r7, sp, #0
   107e0:	4b03      	ldr	r3, [pc, #12]	; (107f0 <SERCOM2_Handler+0x14>)
   107e2:	689b      	ldr	r3, [r3, #8]
   107e4:	2002      	movs	r0, #2
   107e6:	4798      	blx	r3
   107e8:	46c0      	nop			; (mov r8, r8)
   107ea:	46bd      	mov	sp, r7
   107ec:	bd80      	pop	{r7, pc}
   107ee:	46c0      	nop			; (mov r8, r8)
   107f0:	20000268 	.word	0x20000268

000107f4 <SERCOM3_Handler>:
   107f4:	b580      	push	{r7, lr}
   107f6:	af00      	add	r7, sp, #0
   107f8:	4b03      	ldr	r3, [pc, #12]	; (10808 <SERCOM3_Handler+0x14>)
   107fa:	68db      	ldr	r3, [r3, #12]
   107fc:	2003      	movs	r0, #3
   107fe:	4798      	blx	r3
   10800:	46c0      	nop			; (mov r8, r8)
   10802:	46bd      	mov	sp, r7
   10804:	bd80      	pop	{r7, pc}
   10806:	46c0      	nop			; (mov r8, r8)
   10808:	20000268 	.word	0x20000268

0001080c <SERCOM4_Handler>:
   1080c:	b580      	push	{r7, lr}
   1080e:	af00      	add	r7, sp, #0
   10810:	4b03      	ldr	r3, [pc, #12]	; (10820 <SERCOM4_Handler+0x14>)
   10812:	691b      	ldr	r3, [r3, #16]
   10814:	2004      	movs	r0, #4
   10816:	4798      	blx	r3
   10818:	46c0      	nop			; (mov r8, r8)
   1081a:	46bd      	mov	sp, r7
   1081c:	bd80      	pop	{r7, pc}
   1081e:	46c0      	nop			; (mov r8, r8)
   10820:	20000268 	.word	0x20000268

00010824 <SERCOM5_Handler>:
   10824:	b580      	push	{r7, lr}
   10826:	af00      	add	r7, sp, #0
   10828:	4b03      	ldr	r3, [pc, #12]	; (10838 <SERCOM5_Handler+0x14>)
   1082a:	695b      	ldr	r3, [r3, #20]
   1082c:	2005      	movs	r0, #5
   1082e:	4798      	blx	r3
   10830:	46c0      	nop			; (mov r8, r8)
   10832:	46bd      	mov	sp, r7
   10834:	bd80      	pop	{r7, pc}
   10836:	46c0      	nop			; (mov r8, r8)
   10838:	20000268 	.word	0x20000268

0001083c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   1083c:	b580      	push	{r7, lr}
   1083e:	b082      	sub	sp, #8
   10840:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   10842:	4b10      	ldr	r3, [pc, #64]	; (10884 <cpu_irq_enter_critical+0x48>)
   10844:	681b      	ldr	r3, [r3, #0]
   10846:	2b00      	cmp	r3, #0
   10848:	d112      	bne.n	10870 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1084a:	f3ef 8310 	mrs	r3, PRIMASK
   1084e:	607b      	str	r3, [r7, #4]
  return(result);
   10850:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   10852:	2b00      	cmp	r3, #0
   10854:	d109      	bne.n	1086a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   10856:	b672      	cpsid	i
   10858:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   1085c:	4b0a      	ldr	r3, [pc, #40]	; (10888 <cpu_irq_enter_critical+0x4c>)
   1085e:	2200      	movs	r2, #0
   10860:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   10862:	4b0a      	ldr	r3, [pc, #40]	; (1088c <cpu_irq_enter_critical+0x50>)
   10864:	2201      	movs	r2, #1
   10866:	701a      	strb	r2, [r3, #0]
   10868:	e002      	b.n	10870 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   1086a:	4b08      	ldr	r3, [pc, #32]	; (1088c <cpu_irq_enter_critical+0x50>)
   1086c:	2200      	movs	r2, #0
   1086e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   10870:	4b04      	ldr	r3, [pc, #16]	; (10884 <cpu_irq_enter_critical+0x48>)
   10872:	681b      	ldr	r3, [r3, #0]
   10874:	1c5a      	adds	r2, r3, #1
   10876:	4b03      	ldr	r3, [pc, #12]	; (10884 <cpu_irq_enter_critical+0x48>)
   10878:	601a      	str	r2, [r3, #0]
}
   1087a:	46c0      	nop			; (mov r8, r8)
   1087c:	46bd      	mov	sp, r7
   1087e:	b002      	add	sp, #8
   10880:	bd80      	pop	{r7, pc}
   10882:	46c0      	nop			; (mov r8, r8)
   10884:	20000280 	.word	0x20000280
   10888:	20000014 	.word	0x20000014
   1088c:	20000284 	.word	0x20000284

00010890 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   10890:	b580      	push	{r7, lr}
   10892:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   10894:	4b0b      	ldr	r3, [pc, #44]	; (108c4 <cpu_irq_leave_critical+0x34>)
   10896:	681b      	ldr	r3, [r3, #0]
   10898:	1e5a      	subs	r2, r3, #1
   1089a:	4b0a      	ldr	r3, [pc, #40]	; (108c4 <cpu_irq_leave_critical+0x34>)
   1089c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   1089e:	4b09      	ldr	r3, [pc, #36]	; (108c4 <cpu_irq_leave_critical+0x34>)
   108a0:	681b      	ldr	r3, [r3, #0]
   108a2:	2b00      	cmp	r3, #0
   108a4:	d10a      	bne.n	108bc <cpu_irq_leave_critical+0x2c>
   108a6:	4b08      	ldr	r3, [pc, #32]	; (108c8 <cpu_irq_leave_critical+0x38>)
   108a8:	781b      	ldrb	r3, [r3, #0]
   108aa:	b2db      	uxtb	r3, r3
   108ac:	2b00      	cmp	r3, #0
   108ae:	d005      	beq.n	108bc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   108b0:	4b06      	ldr	r3, [pc, #24]	; (108cc <cpu_irq_leave_critical+0x3c>)
   108b2:	2201      	movs	r2, #1
   108b4:	701a      	strb	r2, [r3, #0]
   108b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   108ba:	b662      	cpsie	i
	}
}
   108bc:	46c0      	nop			; (mov r8, r8)
   108be:	46bd      	mov	sp, r7
   108c0:	bd80      	pop	{r7, pc}
   108c2:	46c0      	nop			; (mov r8, r8)
   108c4:	20000280 	.word	0x20000280
   108c8:	20000284 	.word	0x20000284
   108cc:	20000014 	.word	0x20000014

000108d0 <system_pinmux_get_group_from_gpio_pin>:
{
   108d0:	b580      	push	{r7, lr}
   108d2:	b084      	sub	sp, #16
   108d4:	af00      	add	r7, sp, #0
   108d6:	0002      	movs	r2, r0
   108d8:	1dfb      	adds	r3, r7, #7
   108da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   108dc:	230f      	movs	r3, #15
   108de:	18fb      	adds	r3, r7, r3
   108e0:	1dfa      	adds	r2, r7, #7
   108e2:	7812      	ldrb	r2, [r2, #0]
   108e4:	09d2      	lsrs	r2, r2, #7
   108e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   108e8:	230e      	movs	r3, #14
   108ea:	18fb      	adds	r3, r7, r3
   108ec:	1dfa      	adds	r2, r7, #7
   108ee:	7812      	ldrb	r2, [r2, #0]
   108f0:	0952      	lsrs	r2, r2, #5
   108f2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   108f4:	4b0d      	ldr	r3, [pc, #52]	; (1092c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   108f6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   108f8:	230f      	movs	r3, #15
   108fa:	18fb      	adds	r3, r7, r3
   108fc:	781b      	ldrb	r3, [r3, #0]
   108fe:	2b00      	cmp	r3, #0
   10900:	d10f      	bne.n	10922 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   10902:	230f      	movs	r3, #15
   10904:	18fb      	adds	r3, r7, r3
   10906:	781b      	ldrb	r3, [r3, #0]
   10908:	009b      	lsls	r3, r3, #2
   1090a:	2210      	movs	r2, #16
   1090c:	4694      	mov	ip, r2
   1090e:	44bc      	add	ip, r7
   10910:	4463      	add	r3, ip
   10912:	3b08      	subs	r3, #8
   10914:	681a      	ldr	r2, [r3, #0]
   10916:	230e      	movs	r3, #14
   10918:	18fb      	adds	r3, r7, r3
   1091a:	781b      	ldrb	r3, [r3, #0]
   1091c:	01db      	lsls	r3, r3, #7
   1091e:	18d3      	adds	r3, r2, r3
   10920:	e000      	b.n	10924 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   10922:	2300      	movs	r3, #0
}
   10924:	0018      	movs	r0, r3
   10926:	46bd      	mov	sp, r7
   10928:	b004      	add	sp, #16
   1092a:	bd80      	pop	{r7, pc}
   1092c:	41004400 	.word	0x41004400

00010930 <port_get_group_from_gpio_pin>:
{
   10930:	b580      	push	{r7, lr}
   10932:	b082      	sub	sp, #8
   10934:	af00      	add	r7, sp, #0
   10936:	0002      	movs	r2, r0
   10938:	1dfb      	adds	r3, r7, #7
   1093a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1093c:	1dfb      	adds	r3, r7, #7
   1093e:	781b      	ldrb	r3, [r3, #0]
   10940:	0018      	movs	r0, r3
   10942:	4b03      	ldr	r3, [pc, #12]	; (10950 <port_get_group_from_gpio_pin+0x20>)
   10944:	4798      	blx	r3
   10946:	0003      	movs	r3, r0
}
   10948:	0018      	movs	r0, r3
   1094a:	46bd      	mov	sp, r7
   1094c:	b002      	add	sp, #8
   1094e:	bd80      	pop	{r7, pc}
   10950:	000108d1 	.word	0x000108d1

00010954 <port_get_config_defaults>:
{
   10954:	b580      	push	{r7, lr}
   10956:	b082      	sub	sp, #8
   10958:	af00      	add	r7, sp, #0
   1095a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1095c:	687b      	ldr	r3, [r7, #4]
   1095e:	2200      	movs	r2, #0
   10960:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   10962:	687b      	ldr	r3, [r7, #4]
   10964:	2201      	movs	r2, #1
   10966:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   10968:	687b      	ldr	r3, [r7, #4]
   1096a:	2200      	movs	r2, #0
   1096c:	709a      	strb	r2, [r3, #2]
}
   1096e:	46c0      	nop			; (mov r8, r8)
   10970:	46bd      	mov	sp, r7
   10972:	b002      	add	sp, #8
   10974:	bd80      	pop	{r7, pc}
	...

00010978 <port_pin_set_output_level>:
{
   10978:	b580      	push	{r7, lr}
   1097a:	b084      	sub	sp, #16
   1097c:	af00      	add	r7, sp, #0
   1097e:	0002      	movs	r2, r0
   10980:	1dfb      	adds	r3, r7, #7
   10982:	701a      	strb	r2, [r3, #0]
   10984:	1dbb      	adds	r3, r7, #6
   10986:	1c0a      	adds	r2, r1, #0
   10988:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1098a:	1dfb      	adds	r3, r7, #7
   1098c:	781b      	ldrb	r3, [r3, #0]
   1098e:	0018      	movs	r0, r3
   10990:	4b0d      	ldr	r3, [pc, #52]	; (109c8 <port_pin_set_output_level+0x50>)
   10992:	4798      	blx	r3
   10994:	0003      	movs	r3, r0
   10996:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   10998:	1dfb      	adds	r3, r7, #7
   1099a:	781b      	ldrb	r3, [r3, #0]
   1099c:	221f      	movs	r2, #31
   1099e:	4013      	ands	r3, r2
   109a0:	2201      	movs	r2, #1
   109a2:	409a      	lsls	r2, r3
   109a4:	0013      	movs	r3, r2
   109a6:	60bb      	str	r3, [r7, #8]
	if (level) {
   109a8:	1dbb      	adds	r3, r7, #6
   109aa:	781b      	ldrb	r3, [r3, #0]
   109ac:	2b00      	cmp	r3, #0
   109ae:	d003      	beq.n	109b8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   109b0:	68fb      	ldr	r3, [r7, #12]
   109b2:	68ba      	ldr	r2, [r7, #8]
   109b4:	619a      	str	r2, [r3, #24]
}
   109b6:	e002      	b.n	109be <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   109b8:	68fb      	ldr	r3, [r7, #12]
   109ba:	68ba      	ldr	r2, [r7, #8]
   109bc:	615a      	str	r2, [r3, #20]
}
   109be:	46c0      	nop			; (mov r8, r8)
   109c0:	46bd      	mov	sp, r7
   109c2:	b004      	add	sp, #16
   109c4:	bd80      	pop	{r7, pc}
   109c6:	46c0      	nop			; (mov r8, r8)
   109c8:	00010931 	.word	0x00010931

000109cc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   109cc:	b580      	push	{r7, lr}
   109ce:	b082      	sub	sp, #8
   109d0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   109d2:	1d3b      	adds	r3, r7, #4
   109d4:	0018      	movs	r0, r3
   109d6:	4b0e      	ldr	r3, [pc, #56]	; (10a10 <system_board_init+0x44>)
   109d8:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   109da:	1d3b      	adds	r3, r7, #4
   109dc:	2201      	movs	r2, #1
   109de:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   109e0:	1d3b      	adds	r3, r7, #4
   109e2:	0019      	movs	r1, r3
   109e4:	2017      	movs	r0, #23
   109e6:	4b0b      	ldr	r3, [pc, #44]	; (10a14 <system_board_init+0x48>)
   109e8:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   109ea:	2101      	movs	r1, #1
   109ec:	2017      	movs	r0, #23
   109ee:	4b0a      	ldr	r3, [pc, #40]	; (10a18 <system_board_init+0x4c>)
   109f0:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   109f2:	1d3b      	adds	r3, r7, #4
   109f4:	2200      	movs	r2, #0
   109f6:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   109f8:	1d3b      	adds	r3, r7, #4
   109fa:	2201      	movs	r2, #1
   109fc:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   109fe:	1d3b      	adds	r3, r7, #4
   10a00:	0019      	movs	r1, r3
   10a02:	2037      	movs	r0, #55	; 0x37
   10a04:	4b03      	ldr	r3, [pc, #12]	; (10a14 <system_board_init+0x48>)
   10a06:	4798      	blx	r3
}
   10a08:	46c0      	nop			; (mov r8, r8)
   10a0a:	46bd      	mov	sp, r7
   10a0c:	b002      	add	sp, #8
   10a0e:	bd80      	pop	{r7, pc}
   10a10:	00010955 	.word	0x00010955
   10a14:	00010a45 	.word	0x00010a45
   10a18:	00010979 	.word	0x00010979

00010a1c <system_pinmux_get_config_defaults>:
{
   10a1c:	b580      	push	{r7, lr}
   10a1e:	b082      	sub	sp, #8
   10a20:	af00      	add	r7, sp, #0
   10a22:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   10a24:	687b      	ldr	r3, [r7, #4]
   10a26:	2280      	movs	r2, #128	; 0x80
   10a28:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10a2a:	687b      	ldr	r3, [r7, #4]
   10a2c:	2200      	movs	r2, #0
   10a2e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   10a30:	687b      	ldr	r3, [r7, #4]
   10a32:	2201      	movs	r2, #1
   10a34:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   10a36:	687b      	ldr	r3, [r7, #4]
   10a38:	2200      	movs	r2, #0
   10a3a:	70da      	strb	r2, [r3, #3]
}
   10a3c:	46c0      	nop			; (mov r8, r8)
   10a3e:	46bd      	mov	sp, r7
   10a40:	b002      	add	sp, #8
   10a42:	bd80      	pop	{r7, pc}

00010a44 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   10a44:	b580      	push	{r7, lr}
   10a46:	b084      	sub	sp, #16
   10a48:	af00      	add	r7, sp, #0
   10a4a:	0002      	movs	r2, r0
   10a4c:	6039      	str	r1, [r7, #0]
   10a4e:	1dfb      	adds	r3, r7, #7
   10a50:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   10a52:	230c      	movs	r3, #12
   10a54:	18fb      	adds	r3, r7, r3
   10a56:	0018      	movs	r0, r3
   10a58:	4b10      	ldr	r3, [pc, #64]	; (10a9c <port_pin_set_config+0x58>)
   10a5a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   10a5c:	230c      	movs	r3, #12
   10a5e:	18fb      	adds	r3, r7, r3
   10a60:	2280      	movs	r2, #128	; 0x80
   10a62:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   10a64:	683b      	ldr	r3, [r7, #0]
   10a66:	781a      	ldrb	r2, [r3, #0]
   10a68:	230c      	movs	r3, #12
   10a6a:	18fb      	adds	r3, r7, r3
   10a6c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   10a6e:	683b      	ldr	r3, [r7, #0]
   10a70:	785a      	ldrb	r2, [r3, #1]
   10a72:	230c      	movs	r3, #12
   10a74:	18fb      	adds	r3, r7, r3
   10a76:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   10a78:	683b      	ldr	r3, [r7, #0]
   10a7a:	789a      	ldrb	r2, [r3, #2]
   10a7c:	230c      	movs	r3, #12
   10a7e:	18fb      	adds	r3, r7, r3
   10a80:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   10a82:	230c      	movs	r3, #12
   10a84:	18fa      	adds	r2, r7, r3
   10a86:	1dfb      	adds	r3, r7, #7
   10a88:	781b      	ldrb	r3, [r3, #0]
   10a8a:	0011      	movs	r1, r2
   10a8c:	0018      	movs	r0, r3
   10a8e:	4b04      	ldr	r3, [pc, #16]	; (10aa0 <port_pin_set_config+0x5c>)
   10a90:	4798      	blx	r3
}
   10a92:	46c0      	nop			; (mov r8, r8)
   10a94:	46bd      	mov	sp, r7
   10a96:	b004      	add	sp, #16
   10a98:	bd80      	pop	{r7, pc}
   10a9a:	46c0      	nop			; (mov r8, r8)
   10a9c:	00010a1d 	.word	0x00010a1d
   10aa0:	000119cd 	.word	0x000119cd

00010aa4 <system_gclk_gen_get_config_defaults>:
{
   10aa4:	b580      	push	{r7, lr}
   10aa6:	b082      	sub	sp, #8
   10aa8:	af00      	add	r7, sp, #0
   10aaa:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   10aac:	687b      	ldr	r3, [r7, #4]
   10aae:	2201      	movs	r2, #1
   10ab0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   10ab2:	687b      	ldr	r3, [r7, #4]
   10ab4:	2200      	movs	r2, #0
   10ab6:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   10ab8:	687b      	ldr	r3, [r7, #4]
   10aba:	2206      	movs	r2, #6
   10abc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   10abe:	687b      	ldr	r3, [r7, #4]
   10ac0:	2200      	movs	r2, #0
   10ac2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   10ac4:	687b      	ldr	r3, [r7, #4]
   10ac6:	2200      	movs	r2, #0
   10ac8:	725a      	strb	r2, [r3, #9]
}
   10aca:	46c0      	nop			; (mov r8, r8)
   10acc:	46bd      	mov	sp, r7
   10ace:	b002      	add	sp, #8
   10ad0:	bd80      	pop	{r7, pc}

00010ad2 <system_gclk_chan_get_config_defaults>:
{
   10ad2:	b580      	push	{r7, lr}
   10ad4:	b082      	sub	sp, #8
   10ad6:	af00      	add	r7, sp, #0
   10ad8:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   10ada:	687b      	ldr	r3, [r7, #4]
   10adc:	2200      	movs	r2, #0
   10ade:	701a      	strb	r2, [r3, #0]
}
   10ae0:	46c0      	nop			; (mov r8, r8)
   10ae2:	46bd      	mov	sp, r7
   10ae4:	b002      	add	sp, #8
   10ae6:	bd80      	pop	{r7, pc}

00010ae8 <system_clock_source_xosc32k_get_config_defaults>:
{
   10ae8:	b580      	push	{r7, lr}
   10aea:	b082      	sub	sp, #8
   10aec:	af00      	add	r7, sp, #0
   10aee:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   10af0:	687b      	ldr	r3, [r7, #4]
   10af2:	2200      	movs	r2, #0
   10af4:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   10af6:	687b      	ldr	r3, [r7, #4]
   10af8:	2204      	movs	r2, #4
   10afa:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   10afc:	687b      	ldr	r3, [r7, #4]
   10afe:	2200      	movs	r2, #0
   10b00:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   10b02:	687b      	ldr	r3, [r7, #4]
   10b04:	2280      	movs	r2, #128	; 0x80
   10b06:	0212      	lsls	r2, r2, #8
   10b08:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   10b0a:	687b      	ldr	r3, [r7, #4]
   10b0c:	2200      	movs	r2, #0
   10b0e:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   10b10:	687b      	ldr	r3, [r7, #4]
   10b12:	2201      	movs	r2, #1
   10b14:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   10b16:	687b      	ldr	r3, [r7, #4]
   10b18:	2200      	movs	r2, #0
   10b1a:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   10b1c:	687b      	ldr	r3, [r7, #4]
   10b1e:	2201      	movs	r2, #1
   10b20:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   10b22:	687b      	ldr	r3, [r7, #4]
   10b24:	2200      	movs	r2, #0
   10b26:	739a      	strb	r2, [r3, #14]
}
   10b28:	46c0      	nop			; (mov r8, r8)
   10b2a:	46bd      	mov	sp, r7
   10b2c:	b002      	add	sp, #8
   10b2e:	bd80      	pop	{r7, pc}

00010b30 <system_clock_source_osc8m_get_config_defaults>:
{
   10b30:	b580      	push	{r7, lr}
   10b32:	b082      	sub	sp, #8
   10b34:	af00      	add	r7, sp, #0
   10b36:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   10b38:	687b      	ldr	r3, [r7, #4]
   10b3a:	2203      	movs	r2, #3
   10b3c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   10b3e:	687b      	ldr	r3, [r7, #4]
   10b40:	2200      	movs	r2, #0
   10b42:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   10b44:	687b      	ldr	r3, [r7, #4]
   10b46:	2201      	movs	r2, #1
   10b48:	709a      	strb	r2, [r3, #2]
}
   10b4a:	46c0      	nop			; (mov r8, r8)
   10b4c:	46bd      	mov	sp, r7
   10b4e:	b002      	add	sp, #8
   10b50:	bd80      	pop	{r7, pc}

00010b52 <system_clock_source_dfll_get_config_defaults>:
{
   10b52:	b580      	push	{r7, lr}
   10b54:	b082      	sub	sp, #8
   10b56:	af00      	add	r7, sp, #0
   10b58:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   10b5a:	687b      	ldr	r3, [r7, #4]
   10b5c:	2200      	movs	r2, #0
   10b5e:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   10b60:	687b      	ldr	r3, [r7, #4]
   10b62:	2200      	movs	r2, #0
   10b64:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   10b66:	687b      	ldr	r3, [r7, #4]
   10b68:	2200      	movs	r2, #0
   10b6a:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   10b6c:	687b      	ldr	r3, [r7, #4]
   10b6e:	2200      	movs	r2, #0
   10b70:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   10b72:	687b      	ldr	r3, [r7, #4]
   10b74:	2200      	movs	r2, #0
   10b76:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   10b78:	687b      	ldr	r3, [r7, #4]
   10b7a:	2201      	movs	r2, #1
   10b7c:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   10b7e:	687b      	ldr	r3, [r7, #4]
   10b80:	2207      	movs	r2, #7
   10b82:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   10b84:	687b      	ldr	r3, [r7, #4]
   10b86:	223f      	movs	r2, #63	; 0x3f
   10b88:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   10b8a:	687b      	ldr	r3, [r7, #4]
   10b8c:	2201      	movs	r2, #1
   10b8e:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   10b90:	687b      	ldr	r3, [r7, #4]
   10b92:	2201      	movs	r2, #1
   10b94:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   10b96:	687b      	ldr	r3, [r7, #4]
   10b98:	2206      	movs	r2, #6
   10b9a:	821a      	strh	r2, [r3, #16]
}
   10b9c:	46c0      	nop			; (mov r8, r8)
   10b9e:	46bd      	mov	sp, r7
   10ba0:	b002      	add	sp, #8
   10ba2:	bd80      	pop	{r7, pc}

00010ba4 <system_cpu_clock_set_divider>:
{
   10ba4:	b580      	push	{r7, lr}
   10ba6:	b082      	sub	sp, #8
   10ba8:	af00      	add	r7, sp, #0
   10baa:	0002      	movs	r2, r0
   10bac:	1dfb      	adds	r3, r7, #7
   10bae:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   10bb0:	4a03      	ldr	r2, [pc, #12]	; (10bc0 <system_cpu_clock_set_divider+0x1c>)
   10bb2:	1dfb      	adds	r3, r7, #7
   10bb4:	781b      	ldrb	r3, [r3, #0]
   10bb6:	7213      	strb	r3, [r2, #8]
}
   10bb8:	46c0      	nop			; (mov r8, r8)
   10bba:	46bd      	mov	sp, r7
   10bbc:	b002      	add	sp, #8
   10bbe:	bd80      	pop	{r7, pc}
   10bc0:	40000400 	.word	0x40000400

00010bc4 <system_apb_clock_set_divider>:
{
   10bc4:	b580      	push	{r7, lr}
   10bc6:	b082      	sub	sp, #8
   10bc8:	af00      	add	r7, sp, #0
   10bca:	0002      	movs	r2, r0
   10bcc:	1dfb      	adds	r3, r7, #7
   10bce:	701a      	strb	r2, [r3, #0]
   10bd0:	1dbb      	adds	r3, r7, #6
   10bd2:	1c0a      	adds	r2, r1, #0
   10bd4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   10bd6:	1dfb      	adds	r3, r7, #7
   10bd8:	781b      	ldrb	r3, [r3, #0]
   10bda:	2b01      	cmp	r3, #1
   10bdc:	d008      	beq.n	10bf0 <system_apb_clock_set_divider+0x2c>
   10bde:	2b02      	cmp	r3, #2
   10be0:	d00b      	beq.n	10bfa <system_apb_clock_set_divider+0x36>
   10be2:	2b00      	cmp	r3, #0
   10be4:	d10e      	bne.n	10c04 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   10be6:	4a0b      	ldr	r2, [pc, #44]	; (10c14 <system_apb_clock_set_divider+0x50>)
   10be8:	1dbb      	adds	r3, r7, #6
   10bea:	781b      	ldrb	r3, [r3, #0]
   10bec:	7253      	strb	r3, [r2, #9]
			break;
   10bee:	e00b      	b.n	10c08 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   10bf0:	4a08      	ldr	r2, [pc, #32]	; (10c14 <system_apb_clock_set_divider+0x50>)
   10bf2:	1dbb      	adds	r3, r7, #6
   10bf4:	781b      	ldrb	r3, [r3, #0]
   10bf6:	7293      	strb	r3, [r2, #10]
			break;
   10bf8:	e006      	b.n	10c08 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   10bfa:	4a06      	ldr	r2, [pc, #24]	; (10c14 <system_apb_clock_set_divider+0x50>)
   10bfc:	1dbb      	adds	r3, r7, #6
   10bfe:	781b      	ldrb	r3, [r3, #0]
   10c00:	72d3      	strb	r3, [r2, #11]
			break;
   10c02:	e001      	b.n	10c08 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   10c04:	2317      	movs	r3, #23
   10c06:	e000      	b.n	10c0a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   10c08:	2300      	movs	r3, #0
}
   10c0a:	0018      	movs	r0, r3
   10c0c:	46bd      	mov	sp, r7
   10c0e:	b002      	add	sp, #8
   10c10:	bd80      	pop	{r7, pc}
   10c12:	46c0      	nop			; (mov r8, r8)
   10c14:	40000400 	.word	0x40000400

00010c18 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   10c18:	b580      	push	{r7, lr}
   10c1a:	b082      	sub	sp, #8
   10c1c:	af00      	add	r7, sp, #0
   10c1e:	0002      	movs	r2, r0
   10c20:	1dfb      	adds	r3, r7, #7
   10c22:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   10c24:	4a08      	ldr	r2, [pc, #32]	; (10c48 <system_flash_set_waitstates+0x30>)
   10c26:	1dfb      	adds	r3, r7, #7
   10c28:	781b      	ldrb	r3, [r3, #0]
   10c2a:	210f      	movs	r1, #15
   10c2c:	400b      	ands	r3, r1
   10c2e:	b2d9      	uxtb	r1, r3
   10c30:	6853      	ldr	r3, [r2, #4]
   10c32:	200f      	movs	r0, #15
   10c34:	4001      	ands	r1, r0
   10c36:	0049      	lsls	r1, r1, #1
   10c38:	201e      	movs	r0, #30
   10c3a:	4383      	bics	r3, r0
   10c3c:	430b      	orrs	r3, r1
   10c3e:	6053      	str	r3, [r2, #4]
}
   10c40:	46c0      	nop			; (mov r8, r8)
   10c42:	46bd      	mov	sp, r7
   10c44:	b002      	add	sp, #8
   10c46:	bd80      	pop	{r7, pc}
   10c48:	41004000 	.word	0x41004000

00010c4c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   10c4c:	b580      	push	{r7, lr}
   10c4e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   10c50:	46c0      	nop			; (mov r8, r8)
   10c52:	4b04      	ldr	r3, [pc, #16]	; (10c64 <_system_dfll_wait_for_sync+0x18>)
   10c54:	68db      	ldr	r3, [r3, #12]
   10c56:	2210      	movs	r2, #16
   10c58:	4013      	ands	r3, r2
   10c5a:	d0fa      	beq.n	10c52 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   10c5c:	46c0      	nop			; (mov r8, r8)
   10c5e:	46bd      	mov	sp, r7
   10c60:	bd80      	pop	{r7, pc}
   10c62:	46c0      	nop			; (mov r8, r8)
   10c64:	40000800 	.word	0x40000800

00010c68 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   10c68:	b580      	push	{r7, lr}
   10c6a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   10c6c:	4b0c      	ldr	r3, [pc, #48]	; (10ca0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   10c6e:	2202      	movs	r2, #2
   10c70:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   10c72:	4b0c      	ldr	r3, [pc, #48]	; (10ca4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   10c74:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   10c76:	4a0a      	ldr	r2, [pc, #40]	; (10ca0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   10c78:	4b0b      	ldr	r3, [pc, #44]	; (10ca8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   10c7a:	689b      	ldr	r3, [r3, #8]
   10c7c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   10c7e:	4a08      	ldr	r2, [pc, #32]	; (10ca0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   10c80:	4b09      	ldr	r3, [pc, #36]	; (10ca8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   10c82:	685b      	ldr	r3, [r3, #4]
   10c84:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   10c86:	4b06      	ldr	r3, [pc, #24]	; (10ca0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   10c88:	2200      	movs	r2, #0
   10c8a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   10c8c:	4b05      	ldr	r3, [pc, #20]	; (10ca4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   10c8e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   10c90:	4a03      	ldr	r2, [pc, #12]	; (10ca0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   10c92:	4b05      	ldr	r3, [pc, #20]	; (10ca8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   10c94:	681b      	ldr	r3, [r3, #0]
   10c96:	b29b      	uxth	r3, r3
   10c98:	8493      	strh	r3, [r2, #36]	; 0x24
}
   10c9a:	46c0      	nop			; (mov r8, r8)
   10c9c:	46bd      	mov	sp, r7
   10c9e:	bd80      	pop	{r7, pc}
   10ca0:	40000800 	.word	0x40000800
   10ca4:	00010c4d 	.word	0x00010c4d
   10ca8:	20000288 	.word	0x20000288

00010cac <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   10cac:	b580      	push	{r7, lr}
   10cae:	b082      	sub	sp, #8
   10cb0:	af00      	add	r7, sp, #0
   10cb2:	0002      	movs	r2, r0
   10cb4:	1dfb      	adds	r3, r7, #7
   10cb6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   10cb8:	1dfb      	adds	r3, r7, #7
   10cba:	781b      	ldrb	r3, [r3, #0]
   10cbc:	2b08      	cmp	r3, #8
   10cbe:	d840      	bhi.n	10d42 <system_clock_source_get_hz+0x96>
   10cc0:	009a      	lsls	r2, r3, #2
   10cc2:	4b22      	ldr	r3, [pc, #136]	; (10d4c <system_clock_source_get_hz+0xa0>)
   10cc4:	18d3      	adds	r3, r2, r3
   10cc6:	681b      	ldr	r3, [r3, #0]
   10cc8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   10cca:	4b21      	ldr	r3, [pc, #132]	; (10d50 <system_clock_source_get_hz+0xa4>)
   10ccc:	691b      	ldr	r3, [r3, #16]
   10cce:	e039      	b.n	10d44 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   10cd0:	4b20      	ldr	r3, [pc, #128]	; (10d54 <system_clock_source_get_hz+0xa8>)
   10cd2:	6a1b      	ldr	r3, [r3, #32]
   10cd4:	059b      	lsls	r3, r3, #22
   10cd6:	0f9b      	lsrs	r3, r3, #30
   10cd8:	b2db      	uxtb	r3, r3
   10cda:	001a      	movs	r2, r3
   10cdc:	4b1e      	ldr	r3, [pc, #120]	; (10d58 <system_clock_source_get_hz+0xac>)
   10cde:	40d3      	lsrs	r3, r2
   10ce0:	e030      	b.n	10d44 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   10ce2:	2380      	movs	r3, #128	; 0x80
   10ce4:	021b      	lsls	r3, r3, #8
   10ce6:	e02d      	b.n	10d44 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   10ce8:	2380      	movs	r3, #128	; 0x80
   10cea:	021b      	lsls	r3, r3, #8
   10cec:	e02a      	b.n	10d44 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   10cee:	4b18      	ldr	r3, [pc, #96]	; (10d50 <system_clock_source_get_hz+0xa4>)
   10cf0:	695b      	ldr	r3, [r3, #20]
   10cf2:	e027      	b.n	10d44 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   10cf4:	4b16      	ldr	r3, [pc, #88]	; (10d50 <system_clock_source_get_hz+0xa4>)
   10cf6:	681b      	ldr	r3, [r3, #0]
   10cf8:	2202      	movs	r2, #2
   10cfa:	4013      	ands	r3, r2
   10cfc:	d101      	bne.n	10d02 <system_clock_source_get_hz+0x56>
			return 0;
   10cfe:	2300      	movs	r3, #0
   10d00:	e020      	b.n	10d44 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   10d02:	4b16      	ldr	r3, [pc, #88]	; (10d5c <system_clock_source_get_hz+0xb0>)
   10d04:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
   10d06:	4b12      	ldr	r3, [pc, #72]	; (10d50 <system_clock_source_get_hz+0xa4>)
   10d08:	681b      	ldr	r3, [r3, #0]
   10d0a:	2204      	movs	r2, #4
   10d0c:	4013      	ands	r3, r2
   10d0e:	d009      	beq.n	10d24 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   10d10:	2000      	movs	r0, #0
   10d12:	4b13      	ldr	r3, [pc, #76]	; (10d60 <system_clock_source_get_hz+0xb4>)
   10d14:	4798      	blx	r3
   10d16:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   10d18:	4b0d      	ldr	r3, [pc, #52]	; (10d50 <system_clock_source_get_hz+0xa4>)
   10d1a:	689b      	ldr	r3, [r3, #8]
   10d1c:	041b      	lsls	r3, r3, #16
   10d1e:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   10d20:	4353      	muls	r3, r2
   10d22:	e00f      	b.n	10d44 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
   10d24:	4b0f      	ldr	r3, [pc, #60]	; (10d64 <system_clock_source_get_hz+0xb8>)
   10d26:	e00d      	b.n	10d44 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   10d28:	4a0a      	ldr	r2, [pc, #40]	; (10d54 <system_clock_source_get_hz+0xa8>)
   10d2a:	2350      	movs	r3, #80	; 0x50
   10d2c:	5cd3      	ldrb	r3, [r2, r3]
   10d2e:	b2db      	uxtb	r3, r3
   10d30:	001a      	movs	r2, r3
   10d32:	2304      	movs	r3, #4
   10d34:	4013      	ands	r3, r2
   10d36:	d101      	bne.n	10d3c <system_clock_source_get_hz+0x90>
			return 0;
   10d38:	2300      	movs	r3, #0
   10d3a:	e003      	b.n	10d44 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
   10d3c:	4b04      	ldr	r3, [pc, #16]	; (10d50 <system_clock_source_get_hz+0xa4>)
   10d3e:	68db      	ldr	r3, [r3, #12]
   10d40:	e000      	b.n	10d44 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
   10d42:	2300      	movs	r3, #0
	}
}
   10d44:	0018      	movs	r0, r3
   10d46:	46bd      	mov	sp, r7
   10d48:	b002      	add	sp, #8
   10d4a:	bd80      	pop	{r7, pc}
   10d4c:	0001ad7c 	.word	0x0001ad7c
   10d50:	20000288 	.word	0x20000288
   10d54:	40000800 	.word	0x40000800
   10d58:	007a1200 	.word	0x007a1200
   10d5c:	00010c4d 	.word	0x00010c4d
   10d60:	00011805 	.word	0x00011805
   10d64:	02dc6c00 	.word	0x02dc6c00

00010d68 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   10d68:	b580      	push	{r7, lr}
   10d6a:	b084      	sub	sp, #16
   10d6c:	af00      	add	r7, sp, #0
   10d6e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   10d70:	4b1a      	ldr	r3, [pc, #104]	; (10ddc <system_clock_source_osc8m_set_config+0x74>)
   10d72:	6a1b      	ldr	r3, [r3, #32]
   10d74:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   10d76:	687b      	ldr	r3, [r7, #4]
   10d78:	781b      	ldrb	r3, [r3, #0]
   10d7a:	1c1a      	adds	r2, r3, #0
   10d7c:	2303      	movs	r3, #3
   10d7e:	4013      	ands	r3, r2
   10d80:	b2da      	uxtb	r2, r3
   10d82:	230d      	movs	r3, #13
   10d84:	18fb      	adds	r3, r7, r3
   10d86:	2103      	movs	r1, #3
   10d88:	400a      	ands	r2, r1
   10d8a:	0010      	movs	r0, r2
   10d8c:	781a      	ldrb	r2, [r3, #0]
   10d8e:	2103      	movs	r1, #3
   10d90:	438a      	bics	r2, r1
   10d92:	1c11      	adds	r1, r2, #0
   10d94:	1c02      	adds	r2, r0, #0
   10d96:	430a      	orrs	r2, r1
   10d98:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   10d9a:	687b      	ldr	r3, [r7, #4]
   10d9c:	789a      	ldrb	r2, [r3, #2]
   10d9e:	230c      	movs	r3, #12
   10da0:	18fb      	adds	r3, r7, r3
   10da2:	01d0      	lsls	r0, r2, #7
   10da4:	781a      	ldrb	r2, [r3, #0]
   10da6:	217f      	movs	r1, #127	; 0x7f
   10da8:	400a      	ands	r2, r1
   10daa:	1c11      	adds	r1, r2, #0
   10dac:	1c02      	adds	r2, r0, #0
   10dae:	430a      	orrs	r2, r1
   10db0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   10db2:	687b      	ldr	r3, [r7, #4]
   10db4:	785a      	ldrb	r2, [r3, #1]
   10db6:	230c      	movs	r3, #12
   10db8:	18fb      	adds	r3, r7, r3
   10dba:	2101      	movs	r1, #1
   10dbc:	400a      	ands	r2, r1
   10dbe:	0190      	lsls	r0, r2, #6
   10dc0:	781a      	ldrb	r2, [r3, #0]
   10dc2:	2140      	movs	r1, #64	; 0x40
   10dc4:	438a      	bics	r2, r1
   10dc6:	1c11      	adds	r1, r2, #0
   10dc8:	1c02      	adds	r2, r0, #0
   10dca:	430a      	orrs	r2, r1
   10dcc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   10dce:	4b03      	ldr	r3, [pc, #12]	; (10ddc <system_clock_source_osc8m_set_config+0x74>)
   10dd0:	68fa      	ldr	r2, [r7, #12]
   10dd2:	621a      	str	r2, [r3, #32]
}
   10dd4:	46c0      	nop			; (mov r8, r8)
   10dd6:	46bd      	mov	sp, r7
   10dd8:	b004      	add	sp, #16
   10dda:	bd80      	pop	{r7, pc}
   10ddc:	40000800 	.word	0x40000800

00010de0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   10de0:	b580      	push	{r7, lr}
   10de2:	b084      	sub	sp, #16
   10de4:	af00      	add	r7, sp, #0
   10de6:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   10de8:	4a43      	ldr	r2, [pc, #268]	; (10ef8 <system_clock_source_xosc32k_set_config+0x118>)
   10dea:	230c      	movs	r3, #12
   10dec:	18fb      	adds	r3, r7, r3
   10dee:	8a92      	ldrh	r2, [r2, #20]
   10df0:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   10df2:	687b      	ldr	r3, [r7, #4]
   10df4:	785b      	ldrb	r3, [r3, #1]
   10df6:	1c1a      	adds	r2, r3, #0
   10df8:	2307      	movs	r3, #7
   10dfa:	4013      	ands	r3, r2
   10dfc:	b2da      	uxtb	r2, r3
   10dfe:	230c      	movs	r3, #12
   10e00:	18fb      	adds	r3, r7, r3
   10e02:	2107      	movs	r1, #7
   10e04:	400a      	ands	r2, r1
   10e06:	0010      	movs	r0, r2
   10e08:	785a      	ldrb	r2, [r3, #1]
   10e0a:	2107      	movs	r1, #7
   10e0c:	438a      	bics	r2, r1
   10e0e:	1c11      	adds	r1, r2, #0
   10e10:	1c02      	adds	r2, r0, #0
   10e12:	430a      	orrs	r2, r1
   10e14:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   10e16:	687b      	ldr	r3, [r7, #4]
   10e18:	781b      	ldrb	r3, [r3, #0]
   10e1a:	2b00      	cmp	r3, #0
   10e1c:	d106      	bne.n	10e2c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   10e1e:	230c      	movs	r3, #12
   10e20:	18fb      	adds	r3, r7, r3
   10e22:	781a      	ldrb	r2, [r3, #0]
   10e24:	2104      	movs	r1, #4
   10e26:	430a      	orrs	r2, r1
   10e28:	701a      	strb	r2, [r3, #0]
   10e2a:	e005      	b.n	10e38 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   10e2c:	230c      	movs	r3, #12
   10e2e:	18fb      	adds	r3, r7, r3
   10e30:	781a      	ldrb	r2, [r3, #0]
   10e32:	2104      	movs	r1, #4
   10e34:	438a      	bics	r2, r1
   10e36:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   10e38:	687b      	ldr	r3, [r7, #4]
   10e3a:	789a      	ldrb	r2, [r3, #2]
   10e3c:	230c      	movs	r3, #12
   10e3e:	18fb      	adds	r3, r7, r3
   10e40:	2101      	movs	r1, #1
   10e42:	400a      	ands	r2, r1
   10e44:	0150      	lsls	r0, r2, #5
   10e46:	781a      	ldrb	r2, [r3, #0]
   10e48:	2120      	movs	r1, #32
   10e4a:	438a      	bics	r2, r1
   10e4c:	1c11      	adds	r1, r2, #0
   10e4e:	1c02      	adds	r2, r0, #0
   10e50:	430a      	orrs	r2, r1
   10e52:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   10e54:	687b      	ldr	r3, [r7, #4]
   10e56:	78da      	ldrb	r2, [r3, #3]
   10e58:	230c      	movs	r3, #12
   10e5a:	18fb      	adds	r3, r7, r3
   10e5c:	2101      	movs	r1, #1
   10e5e:	400a      	ands	r2, r1
   10e60:	0110      	lsls	r0, r2, #4
   10e62:	781a      	ldrb	r2, [r3, #0]
   10e64:	2110      	movs	r1, #16
   10e66:	438a      	bics	r2, r1
   10e68:	1c11      	adds	r1, r2, #0
   10e6a:	1c02      	adds	r2, r0, #0
   10e6c:	430a      	orrs	r2, r1
   10e6e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   10e70:	687b      	ldr	r3, [r7, #4]
   10e72:	791a      	ldrb	r2, [r3, #4]
   10e74:	230c      	movs	r3, #12
   10e76:	18fb      	adds	r3, r7, r3
   10e78:	2101      	movs	r1, #1
   10e7a:	400a      	ands	r2, r1
   10e7c:	00d0      	lsls	r0, r2, #3
   10e7e:	781a      	ldrb	r2, [r3, #0]
   10e80:	2108      	movs	r1, #8
   10e82:	438a      	bics	r2, r1
   10e84:	1c11      	adds	r1, r2, #0
   10e86:	1c02      	adds	r2, r0, #0
   10e88:	430a      	orrs	r2, r1
   10e8a:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   10e8c:	687b      	ldr	r3, [r7, #4]
   10e8e:	7b5a      	ldrb	r2, [r3, #13]
   10e90:	230c      	movs	r3, #12
   10e92:	18fb      	adds	r3, r7, r3
   10e94:	01d0      	lsls	r0, r2, #7
   10e96:	781a      	ldrb	r2, [r3, #0]
   10e98:	217f      	movs	r1, #127	; 0x7f
   10e9a:	400a      	ands	r2, r1
   10e9c:	1c11      	adds	r1, r2, #0
   10e9e:	1c02      	adds	r2, r0, #0
   10ea0:	430a      	orrs	r2, r1
   10ea2:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   10ea4:	687b      	ldr	r3, [r7, #4]
   10ea6:	7b1a      	ldrb	r2, [r3, #12]
   10ea8:	230c      	movs	r3, #12
   10eaa:	18fb      	adds	r3, r7, r3
   10eac:	2101      	movs	r1, #1
   10eae:	400a      	ands	r2, r1
   10eb0:	0190      	lsls	r0, r2, #6
   10eb2:	781a      	ldrb	r2, [r3, #0]
   10eb4:	2140      	movs	r1, #64	; 0x40
   10eb6:	438a      	bics	r2, r1
   10eb8:	1c11      	adds	r1, r2, #0
   10eba:	1c02      	adds	r2, r0, #0
   10ebc:	430a      	orrs	r2, r1
   10ebe:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   10ec0:	687b      	ldr	r3, [r7, #4]
   10ec2:	7b9a      	ldrb	r2, [r3, #14]
   10ec4:	230c      	movs	r3, #12
   10ec6:	18fb      	adds	r3, r7, r3
   10ec8:	2101      	movs	r1, #1
   10eca:	400a      	ands	r2, r1
   10ecc:	0110      	lsls	r0, r2, #4
   10ece:	785a      	ldrb	r2, [r3, #1]
   10ed0:	2110      	movs	r1, #16
   10ed2:	438a      	bics	r2, r1
   10ed4:	1c11      	adds	r1, r2, #0
   10ed6:	1c02      	adds	r2, r0, #0
   10ed8:	430a      	orrs	r2, r1
   10eda:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   10edc:	687b      	ldr	r3, [r7, #4]
   10ede:	689a      	ldr	r2, [r3, #8]
   10ee0:	4b06      	ldr	r3, [pc, #24]	; (10efc <system_clock_source_xosc32k_set_config+0x11c>)
   10ee2:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   10ee4:	4a04      	ldr	r2, [pc, #16]	; (10ef8 <system_clock_source_xosc32k_set_config+0x118>)
   10ee6:	230c      	movs	r3, #12
   10ee8:	18fb      	adds	r3, r7, r3
   10eea:	881b      	ldrh	r3, [r3, #0]
   10eec:	8293      	strh	r3, [r2, #20]
}
   10eee:	46c0      	nop			; (mov r8, r8)
   10ef0:	46bd      	mov	sp, r7
   10ef2:	b004      	add	sp, #16
   10ef4:	bd80      	pop	{r7, pc}
   10ef6:	46c0      	nop			; (mov r8, r8)
   10ef8:	40000800 	.word	0x40000800
   10efc:	20000288 	.word	0x20000288

00010f00 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   10f00:	b580      	push	{r7, lr}
   10f02:	b082      	sub	sp, #8
   10f04:	af00      	add	r7, sp, #0
   10f06:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   10f08:	687b      	ldr	r3, [r7, #4]
   10f0a:	7a1b      	ldrb	r3, [r3, #8]
   10f0c:	029b      	lsls	r3, r3, #10
   10f0e:	041b      	lsls	r3, r3, #16
   10f10:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   10f12:	687b      	ldr	r3, [r7, #4]
   10f14:	895b      	ldrh	r3, [r3, #10]
   10f16:	059b      	lsls	r3, r3, #22
   10f18:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   10f1a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   10f1c:	4b2a      	ldr	r3, [pc, #168]	; (10fc8 <system_clock_source_dfll_set_config+0xc8>)
   10f1e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   10f20:	687b      	ldr	r3, [r7, #4]
   10f22:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   10f24:	687b      	ldr	r3, [r7, #4]
   10f26:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   10f28:	4313      	orrs	r3, r2
   10f2a:	b2db      	uxtb	r3, r3
   10f2c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   10f2e:	687b      	ldr	r3, [r7, #4]
   10f30:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   10f32:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   10f34:	687a      	ldr	r2, [r7, #4]
   10f36:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   10f38:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   10f3a:	687b      	ldr	r3, [r7, #4]
   10f3c:	785b      	ldrb	r3, [r3, #1]
   10f3e:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   10f40:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   10f42:	4b21      	ldr	r3, [pc, #132]	; (10fc8 <system_clock_source_dfll_set_config+0xc8>)
   10f44:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   10f46:	687b      	ldr	r3, [r7, #4]
   10f48:	781b      	ldrb	r3, [r3, #0]
   10f4a:	2b04      	cmp	r3, #4
   10f4c:	d116      	bne.n	10f7c <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   10f4e:	687b      	ldr	r3, [r7, #4]
   10f50:	7b1b      	ldrb	r3, [r3, #12]
   10f52:	069b      	lsls	r3, r3, #26
   10f54:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   10f56:	687b      	ldr	r3, [r7, #4]
   10f58:	89db      	ldrh	r3, [r3, #14]
   10f5a:	041b      	lsls	r3, r3, #16
   10f5c:	0019      	movs	r1, r3
   10f5e:	4b1b      	ldr	r3, [pc, #108]	; (10fcc <system_clock_source_dfll_set_config+0xcc>)
   10f60:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   10f62:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   10f64:	687a      	ldr	r2, [r7, #4]
   10f66:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   10f68:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   10f6a:	4b17      	ldr	r3, [pc, #92]	; (10fc8 <system_clock_source_dfll_set_config+0xc8>)
   10f6c:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   10f6e:	4b16      	ldr	r3, [pc, #88]	; (10fc8 <system_clock_source_dfll_set_config+0xc8>)
   10f70:	681b      	ldr	r3, [r3, #0]
   10f72:	687a      	ldr	r2, [r7, #4]
   10f74:	7812      	ldrb	r2, [r2, #0]
   10f76:	431a      	orrs	r2, r3
   10f78:	4b13      	ldr	r3, [pc, #76]	; (10fc8 <system_clock_source_dfll_set_config+0xc8>)
   10f7a:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   10f7c:	687b      	ldr	r3, [r7, #4]
   10f7e:	781b      	ldrb	r3, [r3, #0]
   10f80:	2b20      	cmp	r3, #32
   10f82:	d11c      	bne.n	10fbe <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   10f84:	687b      	ldr	r3, [r7, #4]
   10f86:	7b1b      	ldrb	r3, [r3, #12]
   10f88:	069b      	lsls	r3, r3, #26
   10f8a:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   10f8c:	687b      	ldr	r3, [r7, #4]
   10f8e:	89db      	ldrh	r3, [r3, #14]
   10f90:	041b      	lsls	r3, r3, #16
   10f92:	0019      	movs	r1, r3
   10f94:	4b0d      	ldr	r3, [pc, #52]	; (10fcc <system_clock_source_dfll_set_config+0xcc>)
   10f96:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   10f98:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   10f9a:	687a      	ldr	r2, [r7, #4]
   10f9c:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   10f9e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   10fa0:	4b09      	ldr	r3, [pc, #36]	; (10fc8 <system_clock_source_dfll_set_config+0xc8>)
   10fa2:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   10fa4:	4b08      	ldr	r3, [pc, #32]	; (10fc8 <system_clock_source_dfll_set_config+0xc8>)
   10fa6:	681b      	ldr	r3, [r3, #0]
   10fa8:	687a      	ldr	r2, [r7, #4]
   10faa:	7812      	ldrb	r2, [r2, #0]
   10fac:	2104      	movs	r1, #4
   10fae:	430a      	orrs	r2, r1
   10fb0:	b2d2      	uxtb	r2, r2
   10fb2:	4313      	orrs	r3, r2
   10fb4:	2280      	movs	r2, #128	; 0x80
   10fb6:	00d2      	lsls	r2, r2, #3
   10fb8:	431a      	orrs	r2, r3
   10fba:	4b03      	ldr	r3, [pc, #12]	; (10fc8 <system_clock_source_dfll_set_config+0xc8>)
   10fbc:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   10fbe:	46c0      	nop			; (mov r8, r8)
   10fc0:	46bd      	mov	sp, r7
   10fc2:	b002      	add	sp, #8
   10fc4:	bd80      	pop	{r7, pc}
   10fc6:	46c0      	nop			; (mov r8, r8)
   10fc8:	20000288 	.word	0x20000288
   10fcc:	03ff0000 	.word	0x03ff0000

00010fd0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   10fd0:	b580      	push	{r7, lr}
   10fd2:	b082      	sub	sp, #8
   10fd4:	af00      	add	r7, sp, #0
   10fd6:	0002      	movs	r2, r0
   10fd8:	1dfb      	adds	r3, r7, #7
   10fda:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   10fdc:	1dfb      	adds	r3, r7, #7
   10fde:	781b      	ldrb	r3, [r3, #0]
   10fe0:	2b08      	cmp	r3, #8
   10fe2:	d83b      	bhi.n	1105c <system_clock_source_enable+0x8c>
   10fe4:	009a      	lsls	r2, r3, #2
   10fe6:	4b21      	ldr	r3, [pc, #132]	; (1106c <system_clock_source_enable+0x9c>)
   10fe8:	18d3      	adds	r3, r2, r3
   10fea:	681b      	ldr	r3, [r3, #0]
   10fec:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   10fee:	4b20      	ldr	r3, [pc, #128]	; (11070 <system_clock_source_enable+0xa0>)
   10ff0:	4a1f      	ldr	r2, [pc, #124]	; (11070 <system_clock_source_enable+0xa0>)
   10ff2:	6a12      	ldr	r2, [r2, #32]
   10ff4:	2102      	movs	r1, #2
   10ff6:	430a      	orrs	r2, r1
   10ff8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   10ffa:	2300      	movs	r3, #0
   10ffc:	e031      	b.n	11062 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   10ffe:	4b1c      	ldr	r3, [pc, #112]	; (11070 <system_clock_source_enable+0xa0>)
   11000:	4a1b      	ldr	r2, [pc, #108]	; (11070 <system_clock_source_enable+0xa0>)
   11002:	6992      	ldr	r2, [r2, #24]
   11004:	2102      	movs	r1, #2
   11006:	430a      	orrs	r2, r1
   11008:	619a      	str	r2, [r3, #24]
		break;
   1100a:	e029      	b.n	11060 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   1100c:	4a18      	ldr	r2, [pc, #96]	; (11070 <system_clock_source_enable+0xa0>)
   1100e:	4b18      	ldr	r3, [pc, #96]	; (11070 <system_clock_source_enable+0xa0>)
   11010:	8a1b      	ldrh	r3, [r3, #16]
   11012:	b29b      	uxth	r3, r3
   11014:	2102      	movs	r1, #2
   11016:	430b      	orrs	r3, r1
   11018:	b29b      	uxth	r3, r3
   1101a:	8213      	strh	r3, [r2, #16]
		break;
   1101c:	e020      	b.n	11060 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   1101e:	4a14      	ldr	r2, [pc, #80]	; (11070 <system_clock_source_enable+0xa0>)
   11020:	4b13      	ldr	r3, [pc, #76]	; (11070 <system_clock_source_enable+0xa0>)
   11022:	8a9b      	ldrh	r3, [r3, #20]
   11024:	b29b      	uxth	r3, r3
   11026:	2102      	movs	r1, #2
   11028:	430b      	orrs	r3, r1
   1102a:	b29b      	uxth	r3, r3
   1102c:	8293      	strh	r3, [r2, #20]
		break;
   1102e:	e017      	b.n	11060 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   11030:	4b10      	ldr	r3, [pc, #64]	; (11074 <system_clock_source_enable+0xa4>)
   11032:	681b      	ldr	r3, [r3, #0]
   11034:	2202      	movs	r2, #2
   11036:	431a      	orrs	r2, r3
   11038:	4b0e      	ldr	r3, [pc, #56]	; (11074 <system_clock_source_enable+0xa4>)
   1103a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   1103c:	4b0e      	ldr	r3, [pc, #56]	; (11078 <system_clock_source_enable+0xa8>)
   1103e:	4798      	blx	r3
		break;
   11040:	e00e      	b.n	11060 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   11042:	4a0b      	ldr	r2, [pc, #44]	; (11070 <system_clock_source_enable+0xa0>)
   11044:	490a      	ldr	r1, [pc, #40]	; (11070 <system_clock_source_enable+0xa0>)
   11046:	2344      	movs	r3, #68	; 0x44
   11048:	5ccb      	ldrb	r3, [r1, r3]
   1104a:	b2db      	uxtb	r3, r3
   1104c:	2102      	movs	r1, #2
   1104e:	430b      	orrs	r3, r1
   11050:	b2d9      	uxtb	r1, r3
   11052:	2344      	movs	r3, #68	; 0x44
   11054:	54d1      	strb	r1, [r2, r3]
		break;
   11056:	e003      	b.n	11060 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   11058:	2300      	movs	r3, #0
   1105a:	e002      	b.n	11062 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1105c:	2317      	movs	r3, #23
   1105e:	e000      	b.n	11062 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   11060:	2300      	movs	r3, #0
}
   11062:	0018      	movs	r0, r3
   11064:	46bd      	mov	sp, r7
   11066:	b002      	add	sp, #8
   11068:	bd80      	pop	{r7, pc}
   1106a:	46c0      	nop			; (mov r8, r8)
   1106c:	0001ada0 	.word	0x0001ada0
   11070:	40000800 	.word	0x40000800
   11074:	20000288 	.word	0x20000288
   11078:	00010c69 	.word	0x00010c69

0001107c <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   1107c:	b580      	push	{r7, lr}
   1107e:	b084      	sub	sp, #16
   11080:	af00      	add	r7, sp, #0
   11082:	0002      	movs	r2, r0
   11084:	1dfb      	adds	r3, r7, #7
   11086:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   11088:	2300      	movs	r3, #0
   1108a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   1108c:	1dfb      	adds	r3, r7, #7
   1108e:	781b      	ldrb	r3, [r3, #0]
   11090:	2b08      	cmp	r3, #8
   11092:	d821      	bhi.n	110d8 <system_clock_source_is_ready+0x5c>
   11094:	009a      	lsls	r2, r3, #2
   11096:	4b18      	ldr	r3, [pc, #96]	; (110f8 <system_clock_source_is_ready+0x7c>)
   11098:	18d3      	adds	r3, r2, r3
   1109a:	681b      	ldr	r3, [r3, #0]
   1109c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   1109e:	2308      	movs	r3, #8
   110a0:	60fb      	str	r3, [r7, #12]
		break;
   110a2:	e01b      	b.n	110dc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   110a4:	2304      	movs	r3, #4
   110a6:	60fb      	str	r3, [r7, #12]
		break;
   110a8:	e018      	b.n	110dc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   110aa:	2301      	movs	r3, #1
   110ac:	60fb      	str	r3, [r7, #12]
		break;
   110ae:	e015      	b.n	110dc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   110b0:	2302      	movs	r3, #2
   110b2:	60fb      	str	r3, [r7, #12]
		break;
   110b4:	e012      	b.n	110dc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   110b6:	23d0      	movs	r3, #208	; 0xd0
   110b8:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   110ba:	e00f      	b.n	110dc <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   110bc:	4a0f      	ldr	r2, [pc, #60]	; (110fc <system_clock_source_is_ready+0x80>)
   110be:	2350      	movs	r3, #80	; 0x50
   110c0:	5cd3      	ldrb	r3, [r2, r3]
   110c2:	b2db      	uxtb	r3, r3
   110c4:	001a      	movs	r2, r3
   110c6:	2303      	movs	r3, #3
   110c8:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   110ca:	3b03      	subs	r3, #3
   110cc:	425a      	negs	r2, r3
   110ce:	4153      	adcs	r3, r2
   110d0:	b2db      	uxtb	r3, r3
   110d2:	e00c      	b.n	110ee <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   110d4:	2301      	movs	r3, #1
   110d6:	e00a      	b.n	110ee <system_clock_source_is_ready+0x72>

	default:
		return false;
   110d8:	2300      	movs	r3, #0
   110da:	e008      	b.n	110ee <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   110dc:	4b07      	ldr	r3, [pc, #28]	; (110fc <system_clock_source_is_ready+0x80>)
   110de:	68db      	ldr	r3, [r3, #12]
   110e0:	68fa      	ldr	r2, [r7, #12]
   110e2:	401a      	ands	r2, r3
   110e4:	68fb      	ldr	r3, [r7, #12]
   110e6:	1ad3      	subs	r3, r2, r3
   110e8:	425a      	negs	r2, r3
   110ea:	4153      	adcs	r3, r2
   110ec:	b2db      	uxtb	r3, r3
}
   110ee:	0018      	movs	r0, r3
   110f0:	46bd      	mov	sp, r7
   110f2:	b004      	add	sp, #16
   110f4:	bd80      	pop	{r7, pc}
   110f6:	46c0      	nop			; (mov r8, r8)
   110f8:	0001adc4 	.word	0x0001adc4
   110fc:	40000800 	.word	0x40000800

00011100 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   11100:	b580      	push	{r7, lr}
   11102:	b082      	sub	sp, #8
   11104:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   11106:	003b      	movs	r3, r7
   11108:	2202      	movs	r2, #2
   1110a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1110c:	2300      	movs	r3, #0
   1110e:	607b      	str	r3, [r7, #4]
   11110:	e009      	b.n	11126 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   11112:	687b      	ldr	r3, [r7, #4]
   11114:	b2db      	uxtb	r3, r3
   11116:	003a      	movs	r2, r7
   11118:	0011      	movs	r1, r2
   1111a:	0018      	movs	r0, r3
   1111c:	4b05      	ldr	r3, [pc, #20]	; (11134 <_switch_peripheral_gclk+0x34>)
   1111e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   11120:	687b      	ldr	r3, [r7, #4]
   11122:	3301      	adds	r3, #1
   11124:	607b      	str	r3, [r7, #4]
   11126:	687b      	ldr	r3, [r7, #4]
   11128:	2b24      	cmp	r3, #36	; 0x24
   1112a:	d9f2      	bls.n	11112 <_switch_peripheral_gclk+0x12>
	}
}
   1112c:	46c0      	nop			; (mov r8, r8)
   1112e:	46bd      	mov	sp, r7
   11130:	b002      	add	sp, #8
   11132:	bd80      	pop	{r7, pc}
   11134:	000116e1 	.word	0x000116e1

00011138 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   11138:	b580      	push	{r7, lr}
   1113a:	b0aa      	sub	sp, #168	; 0xa8
   1113c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   1113e:	4b87      	ldr	r3, [pc, #540]	; (1135c <system_clock_init+0x224>)
   11140:	22c2      	movs	r2, #194	; 0xc2
   11142:	00d2      	lsls	r2, r2, #3
   11144:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   11146:	2002      	movs	r0, #2
   11148:	4b85      	ldr	r3, [pc, #532]	; (11360 <system_clock_init+0x228>)
   1114a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   1114c:	4b85      	ldr	r3, [pc, #532]	; (11364 <system_clock_init+0x22c>)
   1114e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   11150:	2394      	movs	r3, #148	; 0x94
   11152:	18fb      	adds	r3, r7, r3
   11154:	0018      	movs	r0, r3
   11156:	4b84      	ldr	r3, [pc, #528]	; (11368 <system_clock_init+0x230>)
   11158:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   1115a:	2394      	movs	r3, #148	; 0x94
   1115c:	18fb      	adds	r3, r7, r3
   1115e:	2280      	movs	r2, #128	; 0x80
   11160:	0212      	lsls	r2, r2, #8
   11162:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   11164:	2394      	movs	r3, #148	; 0x94
   11166:	18fb      	adds	r3, r7, r3
   11168:	2200      	movs	r2, #0
   1116a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   1116c:	2394      	movs	r3, #148	; 0x94
   1116e:	18fb      	adds	r3, r7, r3
   11170:	2203      	movs	r2, #3
   11172:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   11174:	2394      	movs	r3, #148	; 0x94
   11176:	18fb      	adds	r3, r7, r3
   11178:	2200      	movs	r2, #0
   1117a:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   1117c:	2394      	movs	r3, #148	; 0x94
   1117e:	18fb      	adds	r3, r7, r3
   11180:	2200      	movs	r2, #0
   11182:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   11184:	2394      	movs	r3, #148	; 0x94
   11186:	18fb      	adds	r3, r7, r3
   11188:	2201      	movs	r2, #1
   1118a:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   1118c:	2394      	movs	r3, #148	; 0x94
   1118e:	18fb      	adds	r3, r7, r3
   11190:	2200      	movs	r2, #0
   11192:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   11194:	2394      	movs	r3, #148	; 0x94
   11196:	18fb      	adds	r3, r7, r3
   11198:	2200      	movs	r2, #0
   1119a:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   1119c:	2394      	movs	r3, #148	; 0x94
   1119e:	18fb      	adds	r3, r7, r3
   111a0:	0018      	movs	r0, r3
   111a2:	4b72      	ldr	r3, [pc, #456]	; (1136c <system_clock_init+0x234>)
   111a4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   111a6:	2005      	movs	r0, #5
   111a8:	4b71      	ldr	r3, [pc, #452]	; (11370 <system_clock_init+0x238>)
   111aa:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   111ac:	46c0      	nop			; (mov r8, r8)
   111ae:	2005      	movs	r0, #5
   111b0:	4b70      	ldr	r3, [pc, #448]	; (11374 <system_clock_init+0x23c>)
   111b2:	4798      	blx	r3
   111b4:	0003      	movs	r3, r0
   111b6:	001a      	movs	r2, r3
   111b8:	2301      	movs	r3, #1
   111ba:	4053      	eors	r3, r2
   111bc:	b2db      	uxtb	r3, r3
   111be:	2b00      	cmp	r3, #0
   111c0:	d1f5      	bne.n	111ae <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
   111c2:	4a66      	ldr	r2, [pc, #408]	; (1135c <system_clock_init+0x224>)
   111c4:	8a93      	ldrh	r3, [r2, #20]
   111c6:	2180      	movs	r1, #128	; 0x80
   111c8:	430b      	orrs	r3, r1
   111ca:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   111cc:	2380      	movs	r3, #128	; 0x80
   111ce:	18fb      	adds	r3, r7, r3
   111d0:	0018      	movs	r0, r3
   111d2:	4b69      	ldr	r3, [pc, #420]	; (11378 <system_clock_init+0x240>)
   111d4:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   111d6:	2380      	movs	r3, #128	; 0x80
   111d8:	18fb      	adds	r3, r7, r3
   111da:	2204      	movs	r2, #4
   111dc:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   111de:	2380      	movs	r3, #128	; 0x80
   111e0:	18fb      	adds	r3, r7, r3
   111e2:	2200      	movs	r2, #0
   111e4:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   111e6:	4b65      	ldr	r3, [pc, #404]	; (1137c <system_clock_init+0x244>)
   111e8:	681b      	ldr	r3, [r3, #0]
   111ea:	0e9b      	lsrs	r3, r3, #26
   111ec:	22a4      	movs	r2, #164	; 0xa4
   111ee:	18ba      	adds	r2, r7, r2
   111f0:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   111f2:	23a4      	movs	r3, #164	; 0xa4
   111f4:	18fb      	adds	r3, r7, r3
   111f6:	681b      	ldr	r3, [r3, #0]
   111f8:	2b3f      	cmp	r3, #63	; 0x3f
   111fa:	d103      	bne.n	11204 <system_clock_init+0xcc>
		coarse = 0x1f;
   111fc:	231f      	movs	r3, #31
   111fe:	22a4      	movs	r2, #164	; 0xa4
   11200:	18ba      	adds	r2, r7, r2
   11202:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   11204:	23a4      	movs	r3, #164	; 0xa4
   11206:	18fb      	adds	r3, r7, r3
   11208:	681b      	ldr	r3, [r3, #0]
   1120a:	b2da      	uxtb	r2, r3
   1120c:	2380      	movs	r3, #128	; 0x80
   1120e:	18fb      	adds	r3, r7, r3
   11210:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   11212:	2380      	movs	r3, #128	; 0x80
   11214:	18fb      	adds	r3, r7, r3
   11216:	2200      	movs	r2, #0
   11218:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   1121a:	2380      	movs	r3, #128	; 0x80
   1121c:	18fb      	adds	r3, r7, r3
   1121e:	2200      	movs	r2, #0
   11220:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   11222:	2380      	movs	r3, #128	; 0x80
   11224:	18fb      	adds	r3, r7, r3
   11226:	2200      	movs	r2, #0
   11228:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   1122a:	2380      	movs	r3, #128	; 0x80
   1122c:	18fb      	adds	r3, r7, r3
   1122e:	2200      	movs	r2, #0
   11230:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   11232:	2380      	movs	r3, #128	; 0x80
   11234:	18fb      	adds	r3, r7, r3
   11236:	4a52      	ldr	r2, [pc, #328]	; (11380 <system_clock_init+0x248>)
   11238:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   1123a:	2380      	movs	r3, #128	; 0x80
   1123c:	18fb      	adds	r3, r7, r3
   1123e:	2207      	movs	r2, #7
   11240:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   11242:	2380      	movs	r3, #128	; 0x80
   11244:	18fb      	adds	r3, r7, r3
   11246:	223f      	movs	r2, #63	; 0x3f
   11248:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   1124a:	2380      	movs	r3, #128	; 0x80
   1124c:	18fb      	adds	r3, r7, r3
   1124e:	0018      	movs	r0, r3
   11250:	4b4c      	ldr	r3, [pc, #304]	; (11384 <system_clock_init+0x24c>)
   11252:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   11254:	237c      	movs	r3, #124	; 0x7c
   11256:	18fb      	adds	r3, r7, r3
   11258:	0018      	movs	r0, r3
   1125a:	4b4b      	ldr	r3, [pc, #300]	; (11388 <system_clock_init+0x250>)
   1125c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   1125e:	237c      	movs	r3, #124	; 0x7c
   11260:	18fb      	adds	r3, r7, r3
   11262:	2200      	movs	r2, #0
   11264:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   11266:	237c      	movs	r3, #124	; 0x7c
   11268:	18fb      	adds	r3, r7, r3
   1126a:	2201      	movs	r2, #1
   1126c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   1126e:	237c      	movs	r3, #124	; 0x7c
   11270:	18fb      	adds	r3, r7, r3
   11272:	2200      	movs	r2, #0
   11274:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   11276:	237c      	movs	r3, #124	; 0x7c
   11278:	18fb      	adds	r3, r7, r3
   1127a:	0018      	movs	r0, r3
   1127c:	4b43      	ldr	r3, [pc, #268]	; (1138c <system_clock_init+0x254>)
   1127e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   11280:	2006      	movs	r0, #6
   11282:	4b3b      	ldr	r3, [pc, #236]	; (11370 <system_clock_init+0x238>)
   11284:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   11286:	4b42      	ldr	r3, [pc, #264]	; (11390 <system_clock_init+0x258>)
   11288:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1128a:	2364      	movs	r3, #100	; 0x64
   1128c:	18fb      	adds	r3, r7, r3
   1128e:	0018      	movs	r0, r3
   11290:	4b40      	ldr	r3, [pc, #256]	; (11394 <system_clock_init+0x25c>)
   11292:	4798      	blx	r3
   11294:	2364      	movs	r3, #100	; 0x64
   11296:	18fb      	adds	r3, r7, r3
   11298:	2205      	movs	r2, #5
   1129a:	701a      	strb	r2, [r3, #0]
   1129c:	2364      	movs	r3, #100	; 0x64
   1129e:	18fb      	adds	r3, r7, r3
   112a0:	2201      	movs	r2, #1
   112a2:	605a      	str	r2, [r3, #4]
   112a4:	2364      	movs	r3, #100	; 0x64
   112a6:	18fb      	adds	r3, r7, r3
   112a8:	2200      	movs	r2, #0
   112aa:	721a      	strb	r2, [r3, #8]
   112ac:	2364      	movs	r3, #100	; 0x64
   112ae:	18fb      	adds	r3, r7, r3
   112b0:	2200      	movs	r2, #0
   112b2:	725a      	strb	r2, [r3, #9]
   112b4:	2364      	movs	r3, #100	; 0x64
   112b6:	18fb      	adds	r3, r7, r3
   112b8:	0019      	movs	r1, r3
   112ba:	2001      	movs	r0, #1
   112bc:	4b36      	ldr	r3, [pc, #216]	; (11398 <system_clock_init+0x260>)
   112be:	4798      	blx	r3
   112c0:	2001      	movs	r0, #1
   112c2:	4b36      	ldr	r3, [pc, #216]	; (1139c <system_clock_init+0x264>)
   112c4:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   112c6:	230c      	movs	r3, #12
   112c8:	18fb      	adds	r3, r7, r3
   112ca:	0018      	movs	r0, r3
   112cc:	4b34      	ldr	r3, [pc, #208]	; (113a0 <system_clock_init+0x268>)
   112ce:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   112d0:	230c      	movs	r3, #12
   112d2:	18fb      	adds	r3, r7, r3
   112d4:	2201      	movs	r2, #1
   112d6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   112d8:	230c      	movs	r3, #12
   112da:	18fb      	adds	r3, r7, r3
   112dc:	0019      	movs	r1, r3
   112de:	2000      	movs	r0, #0
   112e0:	4b30      	ldr	r3, [pc, #192]	; (113a4 <system_clock_init+0x26c>)
   112e2:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   112e4:	2000      	movs	r0, #0
   112e6:	4b30      	ldr	r3, [pc, #192]	; (113a8 <system_clock_init+0x270>)
   112e8:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   112ea:	2007      	movs	r0, #7
   112ec:	4b20      	ldr	r3, [pc, #128]	; (11370 <system_clock_init+0x238>)
   112ee:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   112f0:	46c0      	nop			; (mov r8, r8)
   112f2:	2007      	movs	r0, #7
   112f4:	4b1f      	ldr	r3, [pc, #124]	; (11374 <system_clock_init+0x23c>)
   112f6:	4798      	blx	r3
   112f8:	0003      	movs	r3, r0
   112fa:	001a      	movs	r2, r3
   112fc:	2301      	movs	r3, #1
   112fe:	4053      	eors	r3, r2
   11300:	b2db      	uxtb	r3, r3
   11302:	2b00      	cmp	r3, #0
   11304:	d1f5      	bne.n	112f2 <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   11306:	2000      	movs	r0, #0
   11308:	4b28      	ldr	r3, [pc, #160]	; (113ac <system_clock_init+0x274>)
   1130a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   1130c:	2100      	movs	r1, #0
   1130e:	2000      	movs	r0, #0
   11310:	4b27      	ldr	r3, [pc, #156]	; (113b0 <system_clock_init+0x278>)
   11312:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   11314:	2100      	movs	r1, #0
   11316:	2001      	movs	r0, #1
   11318:	4b25      	ldr	r3, [pc, #148]	; (113b0 <system_clock_init+0x278>)
   1131a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   1131c:	2100      	movs	r1, #0
   1131e:	2002      	movs	r0, #2
   11320:	4b23      	ldr	r3, [pc, #140]	; (113b0 <system_clock_init+0x278>)
   11322:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   11324:	003b      	movs	r3, r7
   11326:	0018      	movs	r0, r3
   11328:	4b1a      	ldr	r3, [pc, #104]	; (11394 <system_clock_init+0x25c>)
   1132a:	4798      	blx	r3
   1132c:	003b      	movs	r3, r7
   1132e:	2207      	movs	r2, #7
   11330:	701a      	strb	r2, [r3, #0]
   11332:	003b      	movs	r3, r7
   11334:	2201      	movs	r2, #1
   11336:	605a      	str	r2, [r3, #4]
   11338:	003b      	movs	r3, r7
   1133a:	2200      	movs	r2, #0
   1133c:	721a      	strb	r2, [r3, #8]
   1133e:	003b      	movs	r3, r7
   11340:	2200      	movs	r2, #0
   11342:	725a      	strb	r2, [r3, #9]
   11344:	003b      	movs	r3, r7
   11346:	0019      	movs	r1, r3
   11348:	2000      	movs	r0, #0
   1134a:	4b13      	ldr	r3, [pc, #76]	; (11398 <system_clock_init+0x260>)
   1134c:	4798      	blx	r3
   1134e:	2000      	movs	r0, #0
   11350:	4b12      	ldr	r3, [pc, #72]	; (1139c <system_clock_init+0x264>)
   11352:	4798      	blx	r3
#endif
}
   11354:	46c0      	nop			; (mov r8, r8)
   11356:	46bd      	mov	sp, r7
   11358:	b02a      	add	sp, #168	; 0xa8
   1135a:	bd80      	pop	{r7, pc}
   1135c:	40000800 	.word	0x40000800
   11360:	00010c19 	.word	0x00010c19
   11364:	00011101 	.word	0x00011101
   11368:	00010ae9 	.word	0x00010ae9
   1136c:	00010de1 	.word	0x00010de1
   11370:	00010fd1 	.word	0x00010fd1
   11374:	0001107d 	.word	0x0001107d
   11378:	00010b53 	.word	0x00010b53
   1137c:	00806024 	.word	0x00806024
   11380:	000005b9 	.word	0x000005b9
   11384:	00010f01 	.word	0x00010f01
   11388:	00010b31 	.word	0x00010b31
   1138c:	00010d69 	.word	0x00010d69
   11390:	00011459 	.word	0x00011459
   11394:	00010aa5 	.word	0x00010aa5
   11398:	00011489 	.word	0x00011489
   1139c:	000115ad 	.word	0x000115ad
   113a0:	00010ad3 	.word	0x00010ad3
   113a4:	000116e1 	.word	0x000116e1
   113a8:	00011725 	.word	0x00011725
   113ac:	00010ba5 	.word	0x00010ba5
   113b0:	00010bc5 	.word	0x00010bc5

000113b4 <system_apb_clock_set_mask>:
{
   113b4:	b580      	push	{r7, lr}
   113b6:	b082      	sub	sp, #8
   113b8:	af00      	add	r7, sp, #0
   113ba:	0002      	movs	r2, r0
   113bc:	6039      	str	r1, [r7, #0]
   113be:	1dfb      	adds	r3, r7, #7
   113c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   113c2:	1dfb      	adds	r3, r7, #7
   113c4:	781b      	ldrb	r3, [r3, #0]
   113c6:	2b01      	cmp	r3, #1
   113c8:	d00a      	beq.n	113e0 <system_apb_clock_set_mask+0x2c>
   113ca:	2b02      	cmp	r3, #2
   113cc:	d00f      	beq.n	113ee <system_apb_clock_set_mask+0x3a>
   113ce:	2b00      	cmp	r3, #0
   113d0:	d114      	bne.n	113fc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   113d2:	4b0e      	ldr	r3, [pc, #56]	; (1140c <system_apb_clock_set_mask+0x58>)
   113d4:	4a0d      	ldr	r2, [pc, #52]	; (1140c <system_apb_clock_set_mask+0x58>)
   113d6:	6991      	ldr	r1, [r2, #24]
   113d8:	683a      	ldr	r2, [r7, #0]
   113da:	430a      	orrs	r2, r1
   113dc:	619a      	str	r2, [r3, #24]
			break;
   113de:	e00f      	b.n	11400 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   113e0:	4b0a      	ldr	r3, [pc, #40]	; (1140c <system_apb_clock_set_mask+0x58>)
   113e2:	4a0a      	ldr	r2, [pc, #40]	; (1140c <system_apb_clock_set_mask+0x58>)
   113e4:	69d1      	ldr	r1, [r2, #28]
   113e6:	683a      	ldr	r2, [r7, #0]
   113e8:	430a      	orrs	r2, r1
   113ea:	61da      	str	r2, [r3, #28]
			break;
   113ec:	e008      	b.n	11400 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   113ee:	4b07      	ldr	r3, [pc, #28]	; (1140c <system_apb_clock_set_mask+0x58>)
   113f0:	4a06      	ldr	r2, [pc, #24]	; (1140c <system_apb_clock_set_mask+0x58>)
   113f2:	6a11      	ldr	r1, [r2, #32]
   113f4:	683a      	ldr	r2, [r7, #0]
   113f6:	430a      	orrs	r2, r1
   113f8:	621a      	str	r2, [r3, #32]
			break;
   113fa:	e001      	b.n	11400 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   113fc:	2317      	movs	r3, #23
   113fe:	e000      	b.n	11402 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   11400:	2300      	movs	r3, #0
}
   11402:	0018      	movs	r0, r3
   11404:	46bd      	mov	sp, r7
   11406:	b002      	add	sp, #8
   11408:	bd80      	pop	{r7, pc}
   1140a:	46c0      	nop			; (mov r8, r8)
   1140c:	40000400 	.word	0x40000400

00011410 <system_interrupt_enter_critical_section>:
{
   11410:	b580      	push	{r7, lr}
   11412:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   11414:	4b02      	ldr	r3, [pc, #8]	; (11420 <system_interrupt_enter_critical_section+0x10>)
   11416:	4798      	blx	r3
}
   11418:	46c0      	nop			; (mov r8, r8)
   1141a:	46bd      	mov	sp, r7
   1141c:	bd80      	pop	{r7, pc}
   1141e:	46c0      	nop			; (mov r8, r8)
   11420:	0001083d 	.word	0x0001083d

00011424 <system_interrupt_leave_critical_section>:
{
   11424:	b580      	push	{r7, lr}
   11426:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   11428:	4b02      	ldr	r3, [pc, #8]	; (11434 <system_interrupt_leave_critical_section+0x10>)
   1142a:	4798      	blx	r3
}
   1142c:	46c0      	nop			; (mov r8, r8)
   1142e:	46bd      	mov	sp, r7
   11430:	bd80      	pop	{r7, pc}
   11432:	46c0      	nop			; (mov r8, r8)
   11434:	00010891 	.word	0x00010891

00011438 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   11438:	b580      	push	{r7, lr}
   1143a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1143c:	4b05      	ldr	r3, [pc, #20]	; (11454 <system_gclk_is_syncing+0x1c>)
   1143e:	785b      	ldrb	r3, [r3, #1]
   11440:	b2db      	uxtb	r3, r3
   11442:	b25b      	sxtb	r3, r3
   11444:	2b00      	cmp	r3, #0
   11446:	da01      	bge.n	1144c <system_gclk_is_syncing+0x14>
		return true;
   11448:	2301      	movs	r3, #1
   1144a:	e000      	b.n	1144e <system_gclk_is_syncing+0x16>
	}

	return false;
   1144c:	2300      	movs	r3, #0
}
   1144e:	0018      	movs	r0, r3
   11450:	46bd      	mov	sp, r7
   11452:	bd80      	pop	{r7, pc}
   11454:	40000c00 	.word	0x40000c00

00011458 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   11458:	b580      	push	{r7, lr}
   1145a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   1145c:	2108      	movs	r1, #8
   1145e:	2000      	movs	r0, #0
   11460:	4b07      	ldr	r3, [pc, #28]	; (11480 <system_gclk_init+0x28>)
   11462:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   11464:	4b07      	ldr	r3, [pc, #28]	; (11484 <system_gclk_init+0x2c>)
   11466:	2201      	movs	r2, #1
   11468:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   1146a:	46c0      	nop			; (mov r8, r8)
   1146c:	4b05      	ldr	r3, [pc, #20]	; (11484 <system_gclk_init+0x2c>)
   1146e:	781b      	ldrb	r3, [r3, #0]
   11470:	b2db      	uxtb	r3, r3
   11472:	001a      	movs	r2, r3
   11474:	2301      	movs	r3, #1
   11476:	4013      	ands	r3, r2
   11478:	d1f8      	bne.n	1146c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   1147a:	46c0      	nop			; (mov r8, r8)
   1147c:	46bd      	mov	sp, r7
   1147e:	bd80      	pop	{r7, pc}
   11480:	000113b5 	.word	0x000113b5
   11484:	40000c00 	.word	0x40000c00

00011488 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   11488:	b580      	push	{r7, lr}
   1148a:	b086      	sub	sp, #24
   1148c:	af00      	add	r7, sp, #0
   1148e:	0002      	movs	r2, r0
   11490:	6039      	str	r1, [r7, #0]
   11492:	1dfb      	adds	r3, r7, #7
   11494:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   11496:	1dfb      	adds	r3, r7, #7
   11498:	781b      	ldrb	r3, [r3, #0]
   1149a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   1149c:	1dfb      	adds	r3, r7, #7
   1149e:	781b      	ldrb	r3, [r3, #0]
   114a0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   114a2:	683b      	ldr	r3, [r7, #0]
   114a4:	781b      	ldrb	r3, [r3, #0]
   114a6:	021b      	lsls	r3, r3, #8
   114a8:	001a      	movs	r2, r3
   114aa:	697b      	ldr	r3, [r7, #20]
   114ac:	4313      	orrs	r3, r2
   114ae:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   114b0:	683b      	ldr	r3, [r7, #0]
   114b2:	785b      	ldrb	r3, [r3, #1]
   114b4:	2b00      	cmp	r3, #0
   114b6:	d004      	beq.n	114c2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   114b8:	697b      	ldr	r3, [r7, #20]
   114ba:	2280      	movs	r2, #128	; 0x80
   114bc:	02d2      	lsls	r2, r2, #11
   114be:	4313      	orrs	r3, r2
   114c0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   114c2:	683b      	ldr	r3, [r7, #0]
   114c4:	7a5b      	ldrb	r3, [r3, #9]
   114c6:	2b00      	cmp	r3, #0
   114c8:	d004      	beq.n	114d4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   114ca:	697b      	ldr	r3, [r7, #20]
   114cc:	2280      	movs	r2, #128	; 0x80
   114ce:	0312      	lsls	r2, r2, #12
   114d0:	4313      	orrs	r3, r2
   114d2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   114d4:	683b      	ldr	r3, [r7, #0]
   114d6:	685b      	ldr	r3, [r3, #4]
   114d8:	2b01      	cmp	r3, #1
   114da:	d92c      	bls.n	11536 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   114dc:	683b      	ldr	r3, [r7, #0]
   114de:	685a      	ldr	r2, [r3, #4]
   114e0:	683b      	ldr	r3, [r7, #0]
   114e2:	685b      	ldr	r3, [r3, #4]
   114e4:	3b01      	subs	r3, #1
   114e6:	4013      	ands	r3, r2
   114e8:	d11a      	bne.n	11520 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   114ea:	2300      	movs	r3, #0
   114ec:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   114ee:	2302      	movs	r3, #2
   114f0:	60bb      	str	r3, [r7, #8]
   114f2:	e005      	b.n	11500 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   114f4:	68fb      	ldr	r3, [r7, #12]
   114f6:	3301      	adds	r3, #1
   114f8:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   114fa:	68bb      	ldr	r3, [r7, #8]
   114fc:	005b      	lsls	r3, r3, #1
   114fe:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   11500:	683b      	ldr	r3, [r7, #0]
   11502:	685a      	ldr	r2, [r3, #4]
   11504:	68bb      	ldr	r3, [r7, #8]
   11506:	429a      	cmp	r2, r3
   11508:	d8f4      	bhi.n	114f4 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   1150a:	68fb      	ldr	r3, [r7, #12]
   1150c:	021b      	lsls	r3, r3, #8
   1150e:	693a      	ldr	r2, [r7, #16]
   11510:	4313      	orrs	r3, r2
   11512:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   11514:	697b      	ldr	r3, [r7, #20]
   11516:	2280      	movs	r2, #128	; 0x80
   11518:	0352      	lsls	r2, r2, #13
   1151a:	4313      	orrs	r3, r2
   1151c:	617b      	str	r3, [r7, #20]
   1151e:	e00a      	b.n	11536 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   11520:	683b      	ldr	r3, [r7, #0]
   11522:	685b      	ldr	r3, [r3, #4]
   11524:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   11526:	693a      	ldr	r2, [r7, #16]
   11528:	4313      	orrs	r3, r2
   1152a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1152c:	697b      	ldr	r3, [r7, #20]
   1152e:	2280      	movs	r2, #128	; 0x80
   11530:	0292      	lsls	r2, r2, #10
   11532:	4313      	orrs	r3, r2
   11534:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   11536:	683b      	ldr	r3, [r7, #0]
   11538:	7a1b      	ldrb	r3, [r3, #8]
   1153a:	2b00      	cmp	r3, #0
   1153c:	d004      	beq.n	11548 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1153e:	697b      	ldr	r3, [r7, #20]
   11540:	2280      	movs	r2, #128	; 0x80
   11542:	0392      	lsls	r2, r2, #14
   11544:	4313      	orrs	r3, r2
   11546:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   11548:	46c0      	nop			; (mov r8, r8)
   1154a:	4b13      	ldr	r3, [pc, #76]	; (11598 <system_gclk_gen_set_config+0x110>)
   1154c:	4798      	blx	r3
   1154e:	1e03      	subs	r3, r0, #0
   11550:	d1fb      	bne.n	1154a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   11552:	4b12      	ldr	r3, [pc, #72]	; (1159c <system_gclk_gen_set_config+0x114>)
   11554:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   11556:	4a12      	ldr	r2, [pc, #72]	; (115a0 <system_gclk_gen_set_config+0x118>)
   11558:	1dfb      	adds	r3, r7, #7
   1155a:	781b      	ldrb	r3, [r3, #0]
   1155c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   1155e:	46c0      	nop			; (mov r8, r8)
   11560:	4b0d      	ldr	r3, [pc, #52]	; (11598 <system_gclk_gen_set_config+0x110>)
   11562:	4798      	blx	r3
   11564:	1e03      	subs	r3, r0, #0
   11566:	d1fb      	bne.n	11560 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   11568:	4b0e      	ldr	r3, [pc, #56]	; (115a4 <system_gclk_gen_set_config+0x11c>)
   1156a:	693a      	ldr	r2, [r7, #16]
   1156c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   1156e:	46c0      	nop			; (mov r8, r8)
   11570:	4b09      	ldr	r3, [pc, #36]	; (11598 <system_gclk_gen_set_config+0x110>)
   11572:	4798      	blx	r3
   11574:	1e03      	subs	r3, r0, #0
   11576:	d1fb      	bne.n	11570 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   11578:	4b0a      	ldr	r3, [pc, #40]	; (115a4 <system_gclk_gen_set_config+0x11c>)
   1157a:	4a0a      	ldr	r2, [pc, #40]	; (115a4 <system_gclk_gen_set_config+0x11c>)
   1157c:	6851      	ldr	r1, [r2, #4]
   1157e:	2280      	movs	r2, #128	; 0x80
   11580:	0252      	lsls	r2, r2, #9
   11582:	4011      	ands	r1, r2
   11584:	697a      	ldr	r2, [r7, #20]
   11586:	430a      	orrs	r2, r1
   11588:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   1158a:	4b07      	ldr	r3, [pc, #28]	; (115a8 <system_gclk_gen_set_config+0x120>)
   1158c:	4798      	blx	r3
}
   1158e:	46c0      	nop			; (mov r8, r8)
   11590:	46bd      	mov	sp, r7
   11592:	b006      	add	sp, #24
   11594:	bd80      	pop	{r7, pc}
   11596:	46c0      	nop			; (mov r8, r8)
   11598:	00011439 	.word	0x00011439
   1159c:	00011411 	.word	0x00011411
   115a0:	40000c08 	.word	0x40000c08
   115a4:	40000c00 	.word	0x40000c00
   115a8:	00011425 	.word	0x00011425

000115ac <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   115ac:	b580      	push	{r7, lr}
   115ae:	b082      	sub	sp, #8
   115b0:	af00      	add	r7, sp, #0
   115b2:	0002      	movs	r2, r0
   115b4:	1dfb      	adds	r3, r7, #7
   115b6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   115b8:	46c0      	nop			; (mov r8, r8)
   115ba:	4b0e      	ldr	r3, [pc, #56]	; (115f4 <system_gclk_gen_enable+0x48>)
   115bc:	4798      	blx	r3
   115be:	1e03      	subs	r3, r0, #0
   115c0:	d1fb      	bne.n	115ba <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   115c2:	4b0d      	ldr	r3, [pc, #52]	; (115f8 <system_gclk_gen_enable+0x4c>)
   115c4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   115c6:	4a0d      	ldr	r2, [pc, #52]	; (115fc <system_gclk_gen_enable+0x50>)
   115c8:	1dfb      	adds	r3, r7, #7
   115ca:	781b      	ldrb	r3, [r3, #0]
   115cc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   115ce:	46c0      	nop			; (mov r8, r8)
   115d0:	4b08      	ldr	r3, [pc, #32]	; (115f4 <system_gclk_gen_enable+0x48>)
   115d2:	4798      	blx	r3
   115d4:	1e03      	subs	r3, r0, #0
   115d6:	d1fb      	bne.n	115d0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   115d8:	4b09      	ldr	r3, [pc, #36]	; (11600 <system_gclk_gen_enable+0x54>)
   115da:	4a09      	ldr	r2, [pc, #36]	; (11600 <system_gclk_gen_enable+0x54>)
   115dc:	6852      	ldr	r2, [r2, #4]
   115de:	2180      	movs	r1, #128	; 0x80
   115e0:	0249      	lsls	r1, r1, #9
   115e2:	430a      	orrs	r2, r1
   115e4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   115e6:	4b07      	ldr	r3, [pc, #28]	; (11604 <system_gclk_gen_enable+0x58>)
   115e8:	4798      	blx	r3
}
   115ea:	46c0      	nop			; (mov r8, r8)
   115ec:	46bd      	mov	sp, r7
   115ee:	b002      	add	sp, #8
   115f0:	bd80      	pop	{r7, pc}
   115f2:	46c0      	nop			; (mov r8, r8)
   115f4:	00011439 	.word	0x00011439
   115f8:	00011411 	.word	0x00011411
   115fc:	40000c04 	.word	0x40000c04
   11600:	40000c00 	.word	0x40000c00
   11604:	00011425 	.word	0x00011425

00011608 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   11608:	b580      	push	{r7, lr}
   1160a:	b086      	sub	sp, #24
   1160c:	af00      	add	r7, sp, #0
   1160e:	0002      	movs	r2, r0
   11610:	1dfb      	adds	r3, r7, #7
   11612:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   11614:	46c0      	nop			; (mov r8, r8)
   11616:	4b2a      	ldr	r3, [pc, #168]	; (116c0 <system_gclk_gen_get_hz+0xb8>)
   11618:	4798      	blx	r3
   1161a:	1e03      	subs	r3, r0, #0
   1161c:	d1fb      	bne.n	11616 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1161e:	4b29      	ldr	r3, [pc, #164]	; (116c4 <system_gclk_gen_get_hz+0xbc>)
   11620:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   11622:	4a29      	ldr	r2, [pc, #164]	; (116c8 <system_gclk_gen_get_hz+0xc0>)
   11624:	1dfb      	adds	r3, r7, #7
   11626:	781b      	ldrb	r3, [r3, #0]
   11628:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1162a:	46c0      	nop			; (mov r8, r8)
   1162c:	4b24      	ldr	r3, [pc, #144]	; (116c0 <system_gclk_gen_get_hz+0xb8>)
   1162e:	4798      	blx	r3
   11630:	1e03      	subs	r3, r0, #0
   11632:	d1fb      	bne.n	1162c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   11634:	4b25      	ldr	r3, [pc, #148]	; (116cc <system_gclk_gen_get_hz+0xc4>)
   11636:	685b      	ldr	r3, [r3, #4]
   11638:	04db      	lsls	r3, r3, #19
   1163a:	0edb      	lsrs	r3, r3, #27
   1163c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1163e:	0018      	movs	r0, r3
   11640:	4b23      	ldr	r3, [pc, #140]	; (116d0 <system_gclk_gen_get_hz+0xc8>)
   11642:	4798      	blx	r3
   11644:	0003      	movs	r3, r0
   11646:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   11648:	4a1f      	ldr	r2, [pc, #124]	; (116c8 <system_gclk_gen_get_hz+0xc0>)
   1164a:	1dfb      	adds	r3, r7, #7
   1164c:	781b      	ldrb	r3, [r3, #0]
   1164e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   11650:	4b1e      	ldr	r3, [pc, #120]	; (116cc <system_gclk_gen_get_hz+0xc4>)
   11652:	685b      	ldr	r3, [r3, #4]
   11654:	02db      	lsls	r3, r3, #11
   11656:	0fdb      	lsrs	r3, r3, #31
   11658:	b2da      	uxtb	r2, r3
   1165a:	2313      	movs	r3, #19
   1165c:	18fb      	adds	r3, r7, r3
   1165e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   11660:	4a1c      	ldr	r2, [pc, #112]	; (116d4 <system_gclk_gen_get_hz+0xcc>)
   11662:	1dfb      	adds	r3, r7, #7
   11664:	781b      	ldrb	r3, [r3, #0]
   11666:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   11668:	46c0      	nop			; (mov r8, r8)
   1166a:	4b15      	ldr	r3, [pc, #84]	; (116c0 <system_gclk_gen_get_hz+0xb8>)
   1166c:	4798      	blx	r3
   1166e:	1e03      	subs	r3, r0, #0
   11670:	d1fb      	bne.n	1166a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   11672:	4b16      	ldr	r3, [pc, #88]	; (116cc <system_gclk_gen_get_hz+0xc4>)
   11674:	689b      	ldr	r3, [r3, #8]
   11676:	021b      	lsls	r3, r3, #8
   11678:	0c1b      	lsrs	r3, r3, #16
   1167a:	b29b      	uxth	r3, r3
   1167c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   1167e:	4b16      	ldr	r3, [pc, #88]	; (116d8 <system_gclk_gen_get_hz+0xd0>)
   11680:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   11682:	2313      	movs	r3, #19
   11684:	18fb      	adds	r3, r7, r3
   11686:	781b      	ldrb	r3, [r3, #0]
   11688:	2b00      	cmp	r3, #0
   1168a:	d109      	bne.n	116a0 <system_gclk_gen_get_hz+0x98>
   1168c:	68fb      	ldr	r3, [r7, #12]
   1168e:	2b01      	cmp	r3, #1
   11690:	d906      	bls.n	116a0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   11692:	4b12      	ldr	r3, [pc, #72]	; (116dc <system_gclk_gen_get_hz+0xd4>)
   11694:	68f9      	ldr	r1, [r7, #12]
   11696:	6978      	ldr	r0, [r7, #20]
   11698:	4798      	blx	r3
   1169a:	0003      	movs	r3, r0
   1169c:	617b      	str	r3, [r7, #20]
   1169e:	e00a      	b.n	116b6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   116a0:	2313      	movs	r3, #19
   116a2:	18fb      	adds	r3, r7, r3
   116a4:	781b      	ldrb	r3, [r3, #0]
   116a6:	2b00      	cmp	r3, #0
   116a8:	d005      	beq.n	116b6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   116aa:	68fb      	ldr	r3, [r7, #12]
   116ac:	3301      	adds	r3, #1
   116ae:	697a      	ldr	r2, [r7, #20]
   116b0:	40da      	lsrs	r2, r3
   116b2:	0013      	movs	r3, r2
   116b4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   116b6:	697b      	ldr	r3, [r7, #20]
}
   116b8:	0018      	movs	r0, r3
   116ba:	46bd      	mov	sp, r7
   116bc:	b006      	add	sp, #24
   116be:	bd80      	pop	{r7, pc}
   116c0:	00011439 	.word	0x00011439
   116c4:	00011411 	.word	0x00011411
   116c8:	40000c04 	.word	0x40000c04
   116cc:	40000c00 	.word	0x40000c00
   116d0:	00010cad 	.word	0x00010cad
   116d4:	40000c08 	.word	0x40000c08
   116d8:	00011425 	.word	0x00011425
   116dc:	00016381 	.word	0x00016381

000116e0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   116e0:	b580      	push	{r7, lr}
   116e2:	b084      	sub	sp, #16
   116e4:	af00      	add	r7, sp, #0
   116e6:	0002      	movs	r2, r0
   116e8:	6039      	str	r1, [r7, #0]
   116ea:	1dfb      	adds	r3, r7, #7
   116ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   116ee:	1dfb      	adds	r3, r7, #7
   116f0:	781b      	ldrb	r3, [r3, #0]
   116f2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   116f4:	683b      	ldr	r3, [r7, #0]
   116f6:	781b      	ldrb	r3, [r3, #0]
   116f8:	021b      	lsls	r3, r3, #8
   116fa:	001a      	movs	r2, r3
   116fc:	68fb      	ldr	r3, [r7, #12]
   116fe:	4313      	orrs	r3, r2
   11700:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   11702:	1dfb      	adds	r3, r7, #7
   11704:	781b      	ldrb	r3, [r3, #0]
   11706:	0018      	movs	r0, r3
   11708:	4b04      	ldr	r3, [pc, #16]	; (1171c <system_gclk_chan_set_config+0x3c>)
   1170a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   1170c:	4b04      	ldr	r3, [pc, #16]	; (11720 <system_gclk_chan_set_config+0x40>)
   1170e:	68fa      	ldr	r2, [r7, #12]
   11710:	b292      	uxth	r2, r2
   11712:	805a      	strh	r2, [r3, #2]
}
   11714:	46c0      	nop			; (mov r8, r8)
   11716:	46bd      	mov	sp, r7
   11718:	b004      	add	sp, #16
   1171a:	bd80      	pop	{r7, pc}
   1171c:	0001176d 	.word	0x0001176d
   11720:	40000c00 	.word	0x40000c00

00011724 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   11724:	b580      	push	{r7, lr}
   11726:	b082      	sub	sp, #8
   11728:	af00      	add	r7, sp, #0
   1172a:	0002      	movs	r2, r0
   1172c:	1dfb      	adds	r3, r7, #7
   1172e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   11730:	4b0a      	ldr	r3, [pc, #40]	; (1175c <system_gclk_chan_enable+0x38>)
   11732:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   11734:	4a0a      	ldr	r2, [pc, #40]	; (11760 <system_gclk_chan_enable+0x3c>)
   11736:	1dfb      	adds	r3, r7, #7
   11738:	781b      	ldrb	r3, [r3, #0]
   1173a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   1173c:	4909      	ldr	r1, [pc, #36]	; (11764 <system_gclk_chan_enable+0x40>)
   1173e:	4b09      	ldr	r3, [pc, #36]	; (11764 <system_gclk_chan_enable+0x40>)
   11740:	885b      	ldrh	r3, [r3, #2]
   11742:	b29b      	uxth	r3, r3
   11744:	2280      	movs	r2, #128	; 0x80
   11746:	01d2      	lsls	r2, r2, #7
   11748:	4313      	orrs	r3, r2
   1174a:	b29b      	uxth	r3, r3
   1174c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   1174e:	4b06      	ldr	r3, [pc, #24]	; (11768 <system_gclk_chan_enable+0x44>)
   11750:	4798      	blx	r3
}
   11752:	46c0      	nop			; (mov r8, r8)
   11754:	46bd      	mov	sp, r7
   11756:	b002      	add	sp, #8
   11758:	bd80      	pop	{r7, pc}
   1175a:	46c0      	nop			; (mov r8, r8)
   1175c:	00011411 	.word	0x00011411
   11760:	40000c02 	.word	0x40000c02
   11764:	40000c00 	.word	0x40000c00
   11768:	00011425 	.word	0x00011425

0001176c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   1176c:	b580      	push	{r7, lr}
   1176e:	b084      	sub	sp, #16
   11770:	af00      	add	r7, sp, #0
   11772:	0002      	movs	r2, r0
   11774:	1dfb      	adds	r3, r7, #7
   11776:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   11778:	4b1c      	ldr	r3, [pc, #112]	; (117ec <system_gclk_chan_disable+0x80>)
   1177a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1177c:	4a1c      	ldr	r2, [pc, #112]	; (117f0 <system_gclk_chan_disable+0x84>)
   1177e:	1dfb      	adds	r3, r7, #7
   11780:	781b      	ldrb	r3, [r3, #0]
   11782:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   11784:	4b1b      	ldr	r3, [pc, #108]	; (117f4 <system_gclk_chan_disable+0x88>)
   11786:	885b      	ldrh	r3, [r3, #2]
   11788:	051b      	lsls	r3, r3, #20
   1178a:	0f1b      	lsrs	r3, r3, #28
   1178c:	b2db      	uxtb	r3, r3
   1178e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   11790:	4a18      	ldr	r2, [pc, #96]	; (117f4 <system_gclk_chan_disable+0x88>)
   11792:	8853      	ldrh	r3, [r2, #2]
   11794:	4918      	ldr	r1, [pc, #96]	; (117f8 <system_gclk_chan_disable+0x8c>)
   11796:	400b      	ands	r3, r1
   11798:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   1179a:	4a16      	ldr	r2, [pc, #88]	; (117f4 <system_gclk_chan_disable+0x88>)
   1179c:	4b15      	ldr	r3, [pc, #84]	; (117f4 <system_gclk_chan_disable+0x88>)
   1179e:	885b      	ldrh	r3, [r3, #2]
   117a0:	b29b      	uxth	r3, r3
   117a2:	4916      	ldr	r1, [pc, #88]	; (117fc <system_gclk_chan_disable+0x90>)
   117a4:	400b      	ands	r3, r1
   117a6:	b29b      	uxth	r3, r3
   117a8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   117aa:	46c0      	nop			; (mov r8, r8)
   117ac:	4b11      	ldr	r3, [pc, #68]	; (117f4 <system_gclk_chan_disable+0x88>)
   117ae:	885b      	ldrh	r3, [r3, #2]
   117b0:	b29b      	uxth	r3, r3
   117b2:	001a      	movs	r2, r3
   117b4:	2380      	movs	r3, #128	; 0x80
   117b6:	01db      	lsls	r3, r3, #7
   117b8:	4013      	ands	r3, r2
   117ba:	d1f7      	bne.n	117ac <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   117bc:	4a0d      	ldr	r2, [pc, #52]	; (117f4 <system_gclk_chan_disable+0x88>)
   117be:	68fb      	ldr	r3, [r7, #12]
   117c0:	b2db      	uxtb	r3, r3
   117c2:	1c19      	adds	r1, r3, #0
   117c4:	230f      	movs	r3, #15
   117c6:	400b      	ands	r3, r1
   117c8:	b2d9      	uxtb	r1, r3
   117ca:	8853      	ldrh	r3, [r2, #2]
   117cc:	1c08      	adds	r0, r1, #0
   117ce:	210f      	movs	r1, #15
   117d0:	4001      	ands	r1, r0
   117d2:	0208      	lsls	r0, r1, #8
   117d4:	4908      	ldr	r1, [pc, #32]	; (117f8 <system_gclk_chan_disable+0x8c>)
   117d6:	400b      	ands	r3, r1
   117d8:	1c19      	adds	r1, r3, #0
   117da:	1c03      	adds	r3, r0, #0
   117dc:	430b      	orrs	r3, r1
   117de:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   117e0:	4b07      	ldr	r3, [pc, #28]	; (11800 <system_gclk_chan_disable+0x94>)
   117e2:	4798      	blx	r3
}
   117e4:	46c0      	nop			; (mov r8, r8)
   117e6:	46bd      	mov	sp, r7
   117e8:	b004      	add	sp, #16
   117ea:	bd80      	pop	{r7, pc}
   117ec:	00011411 	.word	0x00011411
   117f0:	40000c02 	.word	0x40000c02
   117f4:	40000c00 	.word	0x40000c00
   117f8:	fffff0ff 	.word	0xfffff0ff
   117fc:	ffffbfff 	.word	0xffffbfff
   11800:	00011425 	.word	0x00011425

00011804 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   11804:	b580      	push	{r7, lr}
   11806:	b084      	sub	sp, #16
   11808:	af00      	add	r7, sp, #0
   1180a:	0002      	movs	r2, r0
   1180c:	1dfb      	adds	r3, r7, #7
   1180e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   11810:	4b0d      	ldr	r3, [pc, #52]	; (11848 <system_gclk_chan_get_hz+0x44>)
   11812:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   11814:	4a0d      	ldr	r2, [pc, #52]	; (1184c <system_gclk_chan_get_hz+0x48>)
   11816:	1dfb      	adds	r3, r7, #7
   11818:	781b      	ldrb	r3, [r3, #0]
   1181a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   1181c:	4b0c      	ldr	r3, [pc, #48]	; (11850 <system_gclk_chan_get_hz+0x4c>)
   1181e:	885b      	ldrh	r3, [r3, #2]
   11820:	051b      	lsls	r3, r3, #20
   11822:	0f1b      	lsrs	r3, r3, #28
   11824:	b2da      	uxtb	r2, r3
   11826:	230f      	movs	r3, #15
   11828:	18fb      	adds	r3, r7, r3
   1182a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   1182c:	4b09      	ldr	r3, [pc, #36]	; (11854 <system_gclk_chan_get_hz+0x50>)
   1182e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   11830:	230f      	movs	r3, #15
   11832:	18fb      	adds	r3, r7, r3
   11834:	781b      	ldrb	r3, [r3, #0]
   11836:	0018      	movs	r0, r3
   11838:	4b07      	ldr	r3, [pc, #28]	; (11858 <system_gclk_chan_get_hz+0x54>)
   1183a:	4798      	blx	r3
   1183c:	0003      	movs	r3, r0
}
   1183e:	0018      	movs	r0, r3
   11840:	46bd      	mov	sp, r7
   11842:	b004      	add	sp, #16
   11844:	bd80      	pop	{r7, pc}
   11846:	46c0      	nop			; (mov r8, r8)
   11848:	00011411 	.word	0x00011411
   1184c:	40000c02 	.word	0x40000c02
   11850:	40000c00 	.word	0x40000c00
   11854:	00011425 	.word	0x00011425
   11858:	00011609 	.word	0x00011609

0001185c <system_pinmux_get_group_from_gpio_pin>:
{
   1185c:	b580      	push	{r7, lr}
   1185e:	b084      	sub	sp, #16
   11860:	af00      	add	r7, sp, #0
   11862:	0002      	movs	r2, r0
   11864:	1dfb      	adds	r3, r7, #7
   11866:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11868:	230f      	movs	r3, #15
   1186a:	18fb      	adds	r3, r7, r3
   1186c:	1dfa      	adds	r2, r7, #7
   1186e:	7812      	ldrb	r2, [r2, #0]
   11870:	09d2      	lsrs	r2, r2, #7
   11872:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11874:	230e      	movs	r3, #14
   11876:	18fb      	adds	r3, r7, r3
   11878:	1dfa      	adds	r2, r7, #7
   1187a:	7812      	ldrb	r2, [r2, #0]
   1187c:	0952      	lsrs	r2, r2, #5
   1187e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11880:	4b0d      	ldr	r3, [pc, #52]	; (118b8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11882:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   11884:	230f      	movs	r3, #15
   11886:	18fb      	adds	r3, r7, r3
   11888:	781b      	ldrb	r3, [r3, #0]
   1188a:	2b00      	cmp	r3, #0
   1188c:	d10f      	bne.n	118ae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1188e:	230f      	movs	r3, #15
   11890:	18fb      	adds	r3, r7, r3
   11892:	781b      	ldrb	r3, [r3, #0]
   11894:	009b      	lsls	r3, r3, #2
   11896:	2210      	movs	r2, #16
   11898:	4694      	mov	ip, r2
   1189a:	44bc      	add	ip, r7
   1189c:	4463      	add	r3, ip
   1189e:	3b08      	subs	r3, #8
   118a0:	681a      	ldr	r2, [r3, #0]
   118a2:	230e      	movs	r3, #14
   118a4:	18fb      	adds	r3, r7, r3
   118a6:	781b      	ldrb	r3, [r3, #0]
   118a8:	01db      	lsls	r3, r3, #7
   118aa:	18d3      	adds	r3, r2, r3
   118ac:	e000      	b.n	118b0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   118ae:	2300      	movs	r3, #0
}
   118b0:	0018      	movs	r0, r3
   118b2:	46bd      	mov	sp, r7
   118b4:	b004      	add	sp, #16
   118b6:	bd80      	pop	{r7, pc}
   118b8:	41004400 	.word	0x41004400

000118bc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   118bc:	b580      	push	{r7, lr}
   118be:	b088      	sub	sp, #32
   118c0:	af00      	add	r7, sp, #0
   118c2:	60f8      	str	r0, [r7, #12]
   118c4:	60b9      	str	r1, [r7, #8]
   118c6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   118c8:	2300      	movs	r3, #0
   118ca:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   118cc:	687b      	ldr	r3, [r7, #4]
   118ce:	78db      	ldrb	r3, [r3, #3]
   118d0:	2201      	movs	r2, #1
   118d2:	4053      	eors	r3, r2
   118d4:	b2db      	uxtb	r3, r3
   118d6:	2b00      	cmp	r3, #0
   118d8:	d035      	beq.n	11946 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   118da:	687b      	ldr	r3, [r7, #4]
   118dc:	781b      	ldrb	r3, [r3, #0]
   118de:	2b80      	cmp	r3, #128	; 0x80
   118e0:	d00b      	beq.n	118fa <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   118e2:	69fb      	ldr	r3, [r7, #28]
   118e4:	2280      	movs	r2, #128	; 0x80
   118e6:	0252      	lsls	r2, r2, #9
   118e8:	4313      	orrs	r3, r2
   118ea:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   118ec:	687b      	ldr	r3, [r7, #4]
   118ee:	781b      	ldrb	r3, [r3, #0]
   118f0:	061b      	lsls	r3, r3, #24
   118f2:	001a      	movs	r2, r3
   118f4:	69fb      	ldr	r3, [r7, #28]
   118f6:	4313      	orrs	r3, r2
   118f8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   118fa:	687b      	ldr	r3, [r7, #4]
   118fc:	785b      	ldrb	r3, [r3, #1]
   118fe:	2b00      	cmp	r3, #0
   11900:	d003      	beq.n	1190a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   11902:	687b      	ldr	r3, [r7, #4]
   11904:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   11906:	2b02      	cmp	r3, #2
   11908:	d110      	bne.n	1192c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   1190a:	69fb      	ldr	r3, [r7, #28]
   1190c:	2280      	movs	r2, #128	; 0x80
   1190e:	0292      	lsls	r2, r2, #10
   11910:	4313      	orrs	r3, r2
   11912:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   11914:	687b      	ldr	r3, [r7, #4]
   11916:	789b      	ldrb	r3, [r3, #2]
   11918:	2b00      	cmp	r3, #0
   1191a:	d004      	beq.n	11926 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1191c:	69fb      	ldr	r3, [r7, #28]
   1191e:	2280      	movs	r2, #128	; 0x80
   11920:	02d2      	lsls	r2, r2, #11
   11922:	4313      	orrs	r3, r2
   11924:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   11926:	68fb      	ldr	r3, [r7, #12]
   11928:	68ba      	ldr	r2, [r7, #8]
   1192a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1192c:	687b      	ldr	r3, [r7, #4]
   1192e:	785b      	ldrb	r3, [r3, #1]
   11930:	2b01      	cmp	r3, #1
   11932:	d003      	beq.n	1193c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   11934:	687b      	ldr	r3, [r7, #4]
   11936:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   11938:	2b02      	cmp	r3, #2
   1193a:	d107      	bne.n	1194c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1193c:	69fb      	ldr	r3, [r7, #28]
   1193e:	4a22      	ldr	r2, [pc, #136]	; (119c8 <_system_pinmux_config+0x10c>)
   11940:	4013      	ands	r3, r2
   11942:	61fb      	str	r3, [r7, #28]
   11944:	e002      	b.n	1194c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   11946:	68fb      	ldr	r3, [r7, #12]
   11948:	68ba      	ldr	r2, [r7, #8]
   1194a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1194c:	68bb      	ldr	r3, [r7, #8]
   1194e:	041b      	lsls	r3, r3, #16
   11950:	0c1b      	lsrs	r3, r3, #16
   11952:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   11954:	68bb      	ldr	r3, [r7, #8]
   11956:	0c1b      	lsrs	r3, r3, #16
   11958:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1195a:	69ba      	ldr	r2, [r7, #24]
   1195c:	69fb      	ldr	r3, [r7, #28]
   1195e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   11960:	22a0      	movs	r2, #160	; 0xa0
   11962:	05d2      	lsls	r2, r2, #23
   11964:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   11966:	68fb      	ldr	r3, [r7, #12]
   11968:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1196a:	697a      	ldr	r2, [r7, #20]
   1196c:	69fb      	ldr	r3, [r7, #28]
   1196e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   11970:	22d0      	movs	r2, #208	; 0xd0
   11972:	0612      	lsls	r2, r2, #24
   11974:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   11976:	68fb      	ldr	r3, [r7, #12]
   11978:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1197a:	687b      	ldr	r3, [r7, #4]
   1197c:	78db      	ldrb	r3, [r3, #3]
   1197e:	2201      	movs	r2, #1
   11980:	4053      	eors	r3, r2
   11982:	b2db      	uxtb	r3, r3
   11984:	2b00      	cmp	r3, #0
   11986:	d01a      	beq.n	119be <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   11988:	69fa      	ldr	r2, [r7, #28]
   1198a:	2380      	movs	r3, #128	; 0x80
   1198c:	02db      	lsls	r3, r3, #11
   1198e:	4013      	ands	r3, r2
   11990:	d00a      	beq.n	119a8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   11992:	687b      	ldr	r3, [r7, #4]
   11994:	789b      	ldrb	r3, [r3, #2]
   11996:	2b01      	cmp	r3, #1
   11998:	d103      	bne.n	119a2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   1199a:	68fb      	ldr	r3, [r7, #12]
   1199c:	68ba      	ldr	r2, [r7, #8]
   1199e:	619a      	str	r2, [r3, #24]
   119a0:	e002      	b.n	119a8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   119a2:	68fb      	ldr	r3, [r7, #12]
   119a4:	68ba      	ldr	r2, [r7, #8]
   119a6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   119a8:	687b      	ldr	r3, [r7, #4]
   119aa:	785b      	ldrb	r3, [r3, #1]
   119ac:	2b01      	cmp	r3, #1
   119ae:	d003      	beq.n	119b8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   119b0:	687b      	ldr	r3, [r7, #4]
   119b2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   119b4:	2b02      	cmp	r3, #2
   119b6:	d102      	bne.n	119be <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   119b8:	68fb      	ldr	r3, [r7, #12]
   119ba:	68ba      	ldr	r2, [r7, #8]
   119bc:	609a      	str	r2, [r3, #8]
		}
	}
}
   119be:	46c0      	nop			; (mov r8, r8)
   119c0:	46bd      	mov	sp, r7
   119c2:	b008      	add	sp, #32
   119c4:	bd80      	pop	{r7, pc}
   119c6:	46c0      	nop			; (mov r8, r8)
   119c8:	fffbffff 	.word	0xfffbffff

000119cc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   119cc:	b580      	push	{r7, lr}
   119ce:	b084      	sub	sp, #16
   119d0:	af00      	add	r7, sp, #0
   119d2:	0002      	movs	r2, r0
   119d4:	6039      	str	r1, [r7, #0]
   119d6:	1dfb      	adds	r3, r7, #7
   119d8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   119da:	1dfb      	adds	r3, r7, #7
   119dc:	781b      	ldrb	r3, [r3, #0]
   119de:	0018      	movs	r0, r3
   119e0:	4b0a      	ldr	r3, [pc, #40]	; (11a0c <system_pinmux_pin_set_config+0x40>)
   119e2:	4798      	blx	r3
   119e4:	0003      	movs	r3, r0
   119e6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   119e8:	1dfb      	adds	r3, r7, #7
   119ea:	781b      	ldrb	r3, [r3, #0]
   119ec:	221f      	movs	r2, #31
   119ee:	4013      	ands	r3, r2
   119f0:	2201      	movs	r2, #1
   119f2:	409a      	lsls	r2, r3
   119f4:	0013      	movs	r3, r2
   119f6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   119f8:	683a      	ldr	r2, [r7, #0]
   119fa:	68b9      	ldr	r1, [r7, #8]
   119fc:	68fb      	ldr	r3, [r7, #12]
   119fe:	0018      	movs	r0, r3
   11a00:	4b03      	ldr	r3, [pc, #12]	; (11a10 <system_pinmux_pin_set_config+0x44>)
   11a02:	4798      	blx	r3
}
   11a04:	46c0      	nop			; (mov r8, r8)
   11a06:	46bd      	mov	sp, r7
   11a08:	b004      	add	sp, #16
   11a0a:	bd80      	pop	{r7, pc}
   11a0c:	0001185d 	.word	0x0001185d
   11a10:	000118bd 	.word	0x000118bd

00011a14 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   11a14:	b580      	push	{r7, lr}
   11a16:	af00      	add	r7, sp, #0
	return;
   11a18:	46c0      	nop			; (mov r8, r8)
}
   11a1a:	46bd      	mov	sp, r7
   11a1c:	bd80      	pop	{r7, pc}
	...

00011a20 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   11a20:	b580      	push	{r7, lr}
   11a22:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   11a24:	4b06      	ldr	r3, [pc, #24]	; (11a40 <system_init+0x20>)
   11a26:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   11a28:	4b06      	ldr	r3, [pc, #24]	; (11a44 <system_init+0x24>)
   11a2a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   11a2c:	4b06      	ldr	r3, [pc, #24]	; (11a48 <system_init+0x28>)
   11a2e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   11a30:	4b06      	ldr	r3, [pc, #24]	; (11a4c <system_init+0x2c>)
   11a32:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   11a34:	4b06      	ldr	r3, [pc, #24]	; (11a50 <system_init+0x30>)
   11a36:	4798      	blx	r3
}
   11a38:	46c0      	nop			; (mov r8, r8)
   11a3a:	46bd      	mov	sp, r7
   11a3c:	bd80      	pop	{r7, pc}
   11a3e:	46c0      	nop			; (mov r8, r8)
   11a40:	00011139 	.word	0x00011139
   11a44:	000109cd 	.word	0x000109cd
   11a48:	00011a15 	.word	0x00011a15
   11a4c:	000092f1 	.word	0x000092f1
   11a50:	00011a15 	.word	0x00011a15

00011a54 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   11a54:	b580      	push	{r7, lr}
   11a56:	b082      	sub	sp, #8
   11a58:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   11a5a:	4b2f      	ldr	r3, [pc, #188]	; (11b18 <Reset_Handler+0xc4>)
   11a5c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   11a5e:	4b2f      	ldr	r3, [pc, #188]	; (11b1c <Reset_Handler+0xc8>)
   11a60:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   11a62:	687a      	ldr	r2, [r7, #4]
   11a64:	683b      	ldr	r3, [r7, #0]
   11a66:	429a      	cmp	r2, r3
   11a68:	d00c      	beq.n	11a84 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   11a6a:	e007      	b.n	11a7c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   11a6c:	683b      	ldr	r3, [r7, #0]
   11a6e:	1d1a      	adds	r2, r3, #4
   11a70:	603a      	str	r2, [r7, #0]
   11a72:	687a      	ldr	r2, [r7, #4]
   11a74:	1d11      	adds	r1, r2, #4
   11a76:	6079      	str	r1, [r7, #4]
   11a78:	6812      	ldr	r2, [r2, #0]
   11a7a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   11a7c:	683a      	ldr	r2, [r7, #0]
   11a7e:	4b28      	ldr	r3, [pc, #160]	; (11b20 <Reset_Handler+0xcc>)
   11a80:	429a      	cmp	r2, r3
   11a82:	d3f3      	bcc.n	11a6c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   11a84:	4b27      	ldr	r3, [pc, #156]	; (11b24 <Reset_Handler+0xd0>)
   11a86:	603b      	str	r3, [r7, #0]
   11a88:	e004      	b.n	11a94 <Reset_Handler+0x40>
                *pDest++ = 0;
   11a8a:	683b      	ldr	r3, [r7, #0]
   11a8c:	1d1a      	adds	r2, r3, #4
   11a8e:	603a      	str	r2, [r7, #0]
   11a90:	2200      	movs	r2, #0
   11a92:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   11a94:	683a      	ldr	r2, [r7, #0]
   11a96:	4b24      	ldr	r3, [pc, #144]	; (11b28 <Reset_Handler+0xd4>)
   11a98:	429a      	cmp	r2, r3
   11a9a:	d3f6      	bcc.n	11a8a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   11a9c:	4b23      	ldr	r3, [pc, #140]	; (11b2c <Reset_Handler+0xd8>)
   11a9e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   11aa0:	4b23      	ldr	r3, [pc, #140]	; (11b30 <Reset_Handler+0xdc>)
   11aa2:	687a      	ldr	r2, [r7, #4]
   11aa4:	21ff      	movs	r1, #255	; 0xff
   11aa6:	438a      	bics	r2, r1
   11aa8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   11aaa:	4a22      	ldr	r2, [pc, #136]	; (11b34 <Reset_Handler+0xe0>)
   11aac:	2390      	movs	r3, #144	; 0x90
   11aae:	005b      	lsls	r3, r3, #1
   11ab0:	2102      	movs	r1, #2
   11ab2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   11ab4:	4a20      	ldr	r2, [pc, #128]	; (11b38 <Reset_Handler+0xe4>)
   11ab6:	78d3      	ldrb	r3, [r2, #3]
   11ab8:	2103      	movs	r1, #3
   11aba:	438b      	bics	r3, r1
   11abc:	1c19      	adds	r1, r3, #0
   11abe:	2302      	movs	r3, #2
   11ac0:	430b      	orrs	r3, r1
   11ac2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   11ac4:	4a1c      	ldr	r2, [pc, #112]	; (11b38 <Reset_Handler+0xe4>)
   11ac6:	78d3      	ldrb	r3, [r2, #3]
   11ac8:	210c      	movs	r1, #12
   11aca:	438b      	bics	r3, r1
   11acc:	1c19      	adds	r1, r3, #0
   11ace:	2308      	movs	r3, #8
   11ad0:	430b      	orrs	r3, r1
   11ad2:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   11ad4:	4a19      	ldr	r2, [pc, #100]	; (11b3c <Reset_Handler+0xe8>)
   11ad6:	7b93      	ldrb	r3, [r2, #14]
   11ad8:	2130      	movs	r1, #48	; 0x30
   11ada:	438b      	bics	r3, r1
   11adc:	1c19      	adds	r1, r3, #0
   11ade:	2320      	movs	r3, #32
   11ae0:	430b      	orrs	r3, r1
   11ae2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   11ae4:	4a15      	ldr	r2, [pc, #84]	; (11b3c <Reset_Handler+0xe8>)
   11ae6:	7b93      	ldrb	r3, [r2, #14]
   11ae8:	210c      	movs	r1, #12
   11aea:	438b      	bics	r3, r1
   11aec:	1c19      	adds	r1, r3, #0
   11aee:	2308      	movs	r3, #8
   11af0:	430b      	orrs	r3, r1
   11af2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   11af4:	4a11      	ldr	r2, [pc, #68]	; (11b3c <Reset_Handler+0xe8>)
   11af6:	7b93      	ldrb	r3, [r2, #14]
   11af8:	2103      	movs	r1, #3
   11afa:	438b      	bics	r3, r1
   11afc:	1c19      	adds	r1, r3, #0
   11afe:	2302      	movs	r3, #2
   11b00:	430b      	orrs	r3, r1
   11b02:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   11b04:	4a0e      	ldr	r2, [pc, #56]	; (11b40 <Reset_Handler+0xec>)
   11b06:	6853      	ldr	r3, [r2, #4]
   11b08:	2180      	movs	r1, #128	; 0x80
   11b0a:	430b      	orrs	r3, r1
   11b0c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   11b0e:	4b0d      	ldr	r3, [pc, #52]	; (11b44 <Reset_Handler+0xf0>)
   11b10:	4798      	blx	r3

        /* Branch to main function */
        main();
   11b12:	4b0d      	ldr	r3, [pc, #52]	; (11b48 <Reset_Handler+0xf4>)
   11b14:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   11b16:	e7fe      	b.n	11b16 <Reset_Handler+0xc2>
   11b18:	0001b2e0 	.word	0x0001b2e0
   11b1c:	20000000 	.word	0x20000000
   11b20:	200001e8 	.word	0x200001e8
   11b24:	200001e8 	.word	0x200001e8
   11b28:	20000920 	.word	0x20000920
   11b2c:	00000000 	.word	0x00000000
   11b30:	e000ed00 	.word	0xe000ed00
   11b34:	41007000 	.word	0x41007000
   11b38:	41005000 	.word	0x41005000
   11b3c:	41004800 	.word	0x41004800
   11b40:	41004000 	.word	0x41004000
   11b44:	00013339 	.word	0x00013339
   11b48:	000122bd 	.word	0x000122bd

00011b4c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   11b4c:	b580      	push	{r7, lr}
   11b4e:	af00      	add	r7, sp, #0
        while (1) {
   11b50:	e7fe      	b.n	11b50 <Dummy_Handler+0x4>
	...

00011b54 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   11b54:	b580      	push	{r7, lr}
   11b56:	b084      	sub	sp, #16
   11b58:	af00      	add	r7, sp, #0
   11b5a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   11b5c:	4b0a      	ldr	r3, [pc, #40]	; (11b88 <_sbrk+0x34>)
   11b5e:	681b      	ldr	r3, [r3, #0]
   11b60:	2b00      	cmp	r3, #0
   11b62:	d102      	bne.n	11b6a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   11b64:	4b08      	ldr	r3, [pc, #32]	; (11b88 <_sbrk+0x34>)
   11b66:	4a09      	ldr	r2, [pc, #36]	; (11b8c <_sbrk+0x38>)
   11b68:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   11b6a:	4b07      	ldr	r3, [pc, #28]	; (11b88 <_sbrk+0x34>)
   11b6c:	681b      	ldr	r3, [r3, #0]
   11b6e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   11b70:	4b05      	ldr	r3, [pc, #20]	; (11b88 <_sbrk+0x34>)
   11b72:	681a      	ldr	r2, [r3, #0]
   11b74:	687b      	ldr	r3, [r7, #4]
   11b76:	18d2      	adds	r2, r2, r3
   11b78:	4b03      	ldr	r3, [pc, #12]	; (11b88 <_sbrk+0x34>)
   11b7a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   11b7c:	68fb      	ldr	r3, [r7, #12]
}
   11b7e:	0018      	movs	r0, r3
   11b80:	46bd      	mov	sp, r7
   11b82:	b004      	add	sp, #16
   11b84:	bd80      	pop	{r7, pc}
   11b86:	46c0      	nop			; (mov r8, r8)
   11b88:	200002a0 	.word	0x200002a0
   11b8c:	20002920 	.word	0x20002920

00011b90 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   11b90:	b580      	push	{r7, lr}
   11b92:	b082      	sub	sp, #8
   11b94:	af00      	add	r7, sp, #0
   11b96:	6078      	str	r0, [r7, #4]
	return -1;
   11b98:	2301      	movs	r3, #1
   11b9a:	425b      	negs	r3, r3
}
   11b9c:	0018      	movs	r0, r3
   11b9e:	46bd      	mov	sp, r7
   11ba0:	b002      	add	sp, #8
   11ba2:	bd80      	pop	{r7, pc}

00011ba4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   11ba4:	b580      	push	{r7, lr}
   11ba6:	b082      	sub	sp, #8
   11ba8:	af00      	add	r7, sp, #0
   11baa:	6078      	str	r0, [r7, #4]
   11bac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   11bae:	683b      	ldr	r3, [r7, #0]
   11bb0:	2280      	movs	r2, #128	; 0x80
   11bb2:	0192      	lsls	r2, r2, #6
   11bb4:	605a      	str	r2, [r3, #4]

	return 0;
   11bb6:	2300      	movs	r3, #0
}
   11bb8:	0018      	movs	r0, r3
   11bba:	46bd      	mov	sp, r7
   11bbc:	b002      	add	sp, #8
   11bbe:	bd80      	pop	{r7, pc}

00011bc0 <_isatty>:

extern int _isatty(int file)
{
   11bc0:	b580      	push	{r7, lr}
   11bc2:	b082      	sub	sp, #8
   11bc4:	af00      	add	r7, sp, #0
   11bc6:	6078      	str	r0, [r7, #4]
	return 1;
   11bc8:	2301      	movs	r3, #1
}
   11bca:	0018      	movs	r0, r3
   11bcc:	46bd      	mov	sp, r7
   11bce:	b002      	add	sp, #8
   11bd0:	bd80      	pop	{r7, pc}

00011bd2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   11bd2:	b580      	push	{r7, lr}
   11bd4:	b084      	sub	sp, #16
   11bd6:	af00      	add	r7, sp, #0
   11bd8:	60f8      	str	r0, [r7, #12]
   11bda:	60b9      	str	r1, [r7, #8]
   11bdc:	607a      	str	r2, [r7, #4]
	return 0;
   11bde:	2300      	movs	r3, #0
}
   11be0:	0018      	movs	r0, r3
   11be2:	46bd      	mov	sp, r7
   11be4:	b004      	add	sp, #16
   11be6:	bd80      	pop	{r7, pc}

00011be8 <system_pinmux_get_group_from_gpio_pin>:
{
   11be8:	b580      	push	{r7, lr}
   11bea:	b084      	sub	sp, #16
   11bec:	af00      	add	r7, sp, #0
   11bee:	0002      	movs	r2, r0
   11bf0:	1dfb      	adds	r3, r7, #7
   11bf2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11bf4:	230f      	movs	r3, #15
   11bf6:	18fb      	adds	r3, r7, r3
   11bf8:	1dfa      	adds	r2, r7, #7
   11bfa:	7812      	ldrb	r2, [r2, #0]
   11bfc:	09d2      	lsrs	r2, r2, #7
   11bfe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11c00:	230e      	movs	r3, #14
   11c02:	18fb      	adds	r3, r7, r3
   11c04:	1dfa      	adds	r2, r7, #7
   11c06:	7812      	ldrb	r2, [r2, #0]
   11c08:	0952      	lsrs	r2, r2, #5
   11c0a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11c0c:	4b0d      	ldr	r3, [pc, #52]	; (11c44 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11c0e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   11c10:	230f      	movs	r3, #15
   11c12:	18fb      	adds	r3, r7, r3
   11c14:	781b      	ldrb	r3, [r3, #0]
   11c16:	2b00      	cmp	r3, #0
   11c18:	d10f      	bne.n	11c3a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11c1a:	230f      	movs	r3, #15
   11c1c:	18fb      	adds	r3, r7, r3
   11c1e:	781b      	ldrb	r3, [r3, #0]
   11c20:	009b      	lsls	r3, r3, #2
   11c22:	2210      	movs	r2, #16
   11c24:	4694      	mov	ip, r2
   11c26:	44bc      	add	ip, r7
   11c28:	4463      	add	r3, ip
   11c2a:	3b08      	subs	r3, #8
   11c2c:	681a      	ldr	r2, [r3, #0]
   11c2e:	230e      	movs	r3, #14
   11c30:	18fb      	adds	r3, r7, r3
   11c32:	781b      	ldrb	r3, [r3, #0]
   11c34:	01db      	lsls	r3, r3, #7
   11c36:	18d3      	adds	r3, r2, r3
   11c38:	e000      	b.n	11c3c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   11c3a:	2300      	movs	r3, #0
}
   11c3c:	0018      	movs	r0, r3
   11c3e:	46bd      	mov	sp, r7
   11c40:	b004      	add	sp, #16
   11c42:	bd80      	pop	{r7, pc}
   11c44:	41004400 	.word	0x41004400

00011c48 <adc_is_syncing>:
{
   11c48:	b580      	push	{r7, lr}
   11c4a:	b084      	sub	sp, #16
   11c4c:	af00      	add	r7, sp, #0
   11c4e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   11c50:	687b      	ldr	r3, [r7, #4]
   11c52:	681b      	ldr	r3, [r3, #0]
   11c54:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   11c56:	68fb      	ldr	r3, [r7, #12]
   11c58:	7e5b      	ldrb	r3, [r3, #25]
   11c5a:	b2db      	uxtb	r3, r3
   11c5c:	b25b      	sxtb	r3, r3
   11c5e:	2b00      	cmp	r3, #0
   11c60:	da01      	bge.n	11c66 <adc_is_syncing+0x1e>
		return true;
   11c62:	2301      	movs	r3, #1
   11c64:	e000      	b.n	11c68 <adc_is_syncing+0x20>
	return false;
   11c66:	2300      	movs	r3, #0
}
   11c68:	0018      	movs	r0, r3
   11c6a:	46bd      	mov	sp, r7
   11c6c:	b004      	add	sp, #16
   11c6e:	bd80      	pop	{r7, pc}

00011c70 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
   11c70:	b580      	push	{r7, lr}
   11c72:	b086      	sub	sp, #24
   11c74:	af00      	add	r7, sp, #0
   11c76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   11c78:	687b      	ldr	r3, [r7, #4]
   11c7a:	681b      	ldr	r3, [r3, #0]
   11c7c:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
   11c7e:	693b      	ldr	r3, [r7, #16]
   11c80:	7e1b      	ldrb	r3, [r3, #24]
   11c82:	b2db      	uxtb	r3, r3
   11c84:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
   11c86:	2300      	movs	r3, #0
   11c88:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
   11c8a:	68fb      	ldr	r3, [r7, #12]
   11c8c:	2201      	movs	r2, #1
   11c8e:	4013      	ands	r3, r2
   11c90:	d003      	beq.n	11c9a <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   11c92:	697b      	ldr	r3, [r7, #20]
   11c94:	2201      	movs	r2, #1
   11c96:	4313      	orrs	r3, r2
   11c98:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
   11c9a:	68fb      	ldr	r3, [r7, #12]
   11c9c:	2204      	movs	r2, #4
   11c9e:	4013      	ands	r3, r2
   11ca0:	d003      	beq.n	11caa <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   11ca2:	697b      	ldr	r3, [r7, #20]
   11ca4:	2202      	movs	r2, #2
   11ca6:	4313      	orrs	r3, r2
   11ca8:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   11caa:	68fb      	ldr	r3, [r7, #12]
   11cac:	2202      	movs	r2, #2
   11cae:	4013      	ands	r3, r2
   11cb0:	d003      	beq.n	11cba <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   11cb2:	697b      	ldr	r3, [r7, #20]
   11cb4:	2204      	movs	r2, #4
   11cb6:	4313      	orrs	r3, r2
   11cb8:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
   11cba:	697b      	ldr	r3, [r7, #20]
}
   11cbc:	0018      	movs	r0, r3
   11cbe:	46bd      	mov	sp, r7
   11cc0:	b006      	add	sp, #24
   11cc2:	bd80      	pop	{r7, pc}

00011cc4 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
   11cc4:	b580      	push	{r7, lr}
   11cc6:	b084      	sub	sp, #16
   11cc8:	af00      	add	r7, sp, #0
   11cca:	6078      	str	r0, [r7, #4]
   11ccc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   11cce:	687b      	ldr	r3, [r7, #4]
   11cd0:	681b      	ldr	r3, [r3, #0]
   11cd2:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
   11cd4:	2300      	movs	r3, #0
   11cd6:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
   11cd8:	683b      	ldr	r3, [r7, #0]
   11cda:	2201      	movs	r2, #1
   11cdc:	4013      	ands	r3, r2
   11cde:	d003      	beq.n	11ce8 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   11ce0:	68fb      	ldr	r3, [r7, #12]
   11ce2:	2201      	movs	r2, #1
   11ce4:	4313      	orrs	r3, r2
   11ce6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
   11ce8:	683b      	ldr	r3, [r7, #0]
   11cea:	2202      	movs	r2, #2
   11cec:	4013      	ands	r3, r2
   11cee:	d003      	beq.n	11cf8 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   11cf0:	68fb      	ldr	r3, [r7, #12]
   11cf2:	2204      	movs	r2, #4
   11cf4:	4313      	orrs	r3, r2
   11cf6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
   11cf8:	683b      	ldr	r3, [r7, #0]
   11cfa:	2204      	movs	r2, #4
   11cfc:	4013      	ands	r3, r2
   11cfe:	d003      	beq.n	11d08 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   11d00:	68fb      	ldr	r3, [r7, #12]
   11d02:	2202      	movs	r2, #2
   11d04:	4313      	orrs	r3, r2
   11d06:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
   11d08:	68fb      	ldr	r3, [r7, #12]
   11d0a:	b2da      	uxtb	r2, r3
   11d0c:	68bb      	ldr	r3, [r7, #8]
   11d0e:	761a      	strb	r2, [r3, #24]
}
   11d10:	46c0      	nop			; (mov r8, r8)
   11d12:	46bd      	mov	sp, r7
   11d14:	b004      	add	sp, #16
   11d16:	bd80      	pop	{r7, pc}

00011d18 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
   11d18:	b580      	push	{r7, lr}
   11d1a:	b084      	sub	sp, #16
   11d1c:	af00      	add	r7, sp, #0
   11d1e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   11d20:	687b      	ldr	r3, [r7, #4]
   11d22:	681b      	ldr	r3, [r3, #0]
   11d24:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   11d26:	46c0      	nop			; (mov r8, r8)
   11d28:	687b      	ldr	r3, [r7, #4]
   11d2a:	0018      	movs	r0, r3
   11d2c:	4b0e      	ldr	r3, [pc, #56]	; (11d68 <adc_enable+0x50>)
   11d2e:	4798      	blx	r3
   11d30:	1e03      	subs	r3, r0, #0
   11d32:	d1f9      	bne.n	11d28 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   11d34:	68fb      	ldr	r3, [r7, #12]
   11d36:	220f      	movs	r2, #15
   11d38:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   11d3a:	68fb      	ldr	r3, [r7, #12]
   11d3c:	220f      	movs	r2, #15
   11d3e:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   11d40:	68fb      	ldr	r3, [r7, #12]
   11d42:	781b      	ldrb	r3, [r3, #0]
   11d44:	b2db      	uxtb	r3, r3
   11d46:	2202      	movs	r2, #2
   11d48:	4313      	orrs	r3, r2
   11d4a:	b2da      	uxtb	r2, r3
   11d4c:	68fb      	ldr	r3, [r7, #12]
   11d4e:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
   11d50:	46c0      	nop			; (mov r8, r8)
   11d52:	687b      	ldr	r3, [r7, #4]
   11d54:	0018      	movs	r0, r3
   11d56:	4b04      	ldr	r3, [pc, #16]	; (11d68 <adc_enable+0x50>)
   11d58:	4798      	blx	r3
   11d5a:	1e03      	subs	r3, r0, #0
   11d5c:	d1f9      	bne.n	11d52 <adc_enable+0x3a>
		/* Wait for synchronization */
	}
	return STATUS_OK;
   11d5e:	2300      	movs	r3, #0
}
   11d60:	0018      	movs	r0, r3
   11d62:	46bd      	mov	sp, r7
   11d64:	b004      	add	sp, #16
   11d66:	bd80      	pop	{r7, pc}
   11d68:	00011c49 	.word	0x00011c49

00011d6c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   11d6c:	b580      	push	{r7, lr}
   11d6e:	b084      	sub	sp, #16
   11d70:	af00      	add	r7, sp, #0
   11d72:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   11d74:	687b      	ldr	r3, [r7, #4]
   11d76:	681b      	ldr	r3, [r3, #0]
   11d78:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   11d7a:	46c0      	nop			; (mov r8, r8)
   11d7c:	687b      	ldr	r3, [r7, #4]
   11d7e:	0018      	movs	r0, r3
   11d80:	4b0b      	ldr	r3, [pc, #44]	; (11db0 <adc_start_conversion+0x44>)
   11d82:	4798      	blx	r3
   11d84:	1e03      	subs	r3, r0, #0
   11d86:	d1f9      	bne.n	11d7c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   11d88:	68fb      	ldr	r3, [r7, #12]
   11d8a:	7b1b      	ldrb	r3, [r3, #12]
   11d8c:	b2db      	uxtb	r3, r3
   11d8e:	2202      	movs	r2, #2
   11d90:	4313      	orrs	r3, r2
   11d92:	b2da      	uxtb	r2, r3
   11d94:	68fb      	ldr	r3, [r7, #12]
   11d96:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   11d98:	46c0      	nop			; (mov r8, r8)
   11d9a:	687b      	ldr	r3, [r7, #4]
   11d9c:	0018      	movs	r0, r3
   11d9e:	4b04      	ldr	r3, [pc, #16]	; (11db0 <adc_start_conversion+0x44>)
   11da0:	4798      	blx	r3
   11da2:	1e03      	subs	r3, r0, #0
   11da4:	d1f9      	bne.n	11d9a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   11da6:	46c0      	nop			; (mov r8, r8)
   11da8:	46bd      	mov	sp, r7
   11daa:	b004      	add	sp, #16
   11dac:	bd80      	pop	{r7, pc}
   11dae:	46c0      	nop			; (mov r8, r8)
   11db0:	00011c49 	.word	0x00011c49

00011db4 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
   11db4:	b580      	push	{r7, lr}
   11db6:	b084      	sub	sp, #16
   11db8:	af00      	add	r7, sp, #0
   11dba:	6078      	str	r0, [r7, #4]
   11dbc:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   11dbe:	687b      	ldr	r3, [r7, #4]
   11dc0:	0018      	movs	r0, r3
   11dc2:	4b18      	ldr	r3, [pc, #96]	; (11e24 <adc_read+0x70>)
   11dc4:	4798      	blx	r3
   11dc6:	0002      	movs	r2, r0
   11dc8:	2301      	movs	r3, #1
   11dca:	4013      	ands	r3, r2
   11dcc:	d101      	bne.n	11dd2 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
   11dce:	2305      	movs	r3, #5
   11dd0:	e023      	b.n	11e1a <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
   11dd2:	687b      	ldr	r3, [r7, #4]
   11dd4:	681b      	ldr	r3, [r3, #0]
   11dd6:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
   11dd8:	46c0      	nop			; (mov r8, r8)
   11dda:	687b      	ldr	r3, [r7, #4]
   11ddc:	0018      	movs	r0, r3
   11dde:	4b12      	ldr	r3, [pc, #72]	; (11e28 <adc_read+0x74>)
   11de0:	4798      	blx	r3
   11de2:	1e03      	subs	r3, r0, #0
   11de4:	d1f9      	bne.n	11dda <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
   11de6:	68fb      	ldr	r3, [r7, #12]
   11de8:	8b5b      	ldrh	r3, [r3, #26]
   11dea:	b29a      	uxth	r2, r3
   11dec:	683b      	ldr	r3, [r7, #0]
   11dee:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   11df0:	687b      	ldr	r3, [r7, #4]
   11df2:	2101      	movs	r1, #1
   11df4:	0018      	movs	r0, r3
   11df6:	4b0d      	ldr	r3, [pc, #52]	; (11e2c <adc_read+0x78>)
   11df8:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   11dfa:	687b      	ldr	r3, [r7, #4]
   11dfc:	0018      	movs	r0, r3
   11dfe:	4b09      	ldr	r3, [pc, #36]	; (11e24 <adc_read+0x70>)
   11e00:	4798      	blx	r3
   11e02:	0002      	movs	r2, r0
   11e04:	2304      	movs	r3, #4
   11e06:	4013      	ands	r3, r2
   11e08:	d006      	beq.n	11e18 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   11e0a:	687b      	ldr	r3, [r7, #4]
   11e0c:	2104      	movs	r1, #4
   11e0e:	0018      	movs	r0, r3
   11e10:	4b06      	ldr	r3, [pc, #24]	; (11e2c <adc_read+0x78>)
   11e12:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   11e14:	231e      	movs	r3, #30
   11e16:	e000      	b.n	11e1a <adc_read+0x66>
	}

	return STATUS_OK;
   11e18:	2300      	movs	r3, #0
}
   11e1a:	0018      	movs	r0, r3
   11e1c:	46bd      	mov	sp, r7
   11e1e:	b004      	add	sp, #16
   11e20:	bd80      	pop	{r7, pc}
   11e22:	46c0      	nop			; (mov r8, r8)
   11e24:	00011c71 	.word	0x00011c71
   11e28:	00011c49 	.word	0x00011c49
   11e2c:	00011cc5 	.word	0x00011cc5

00011e30 <port_get_group_from_gpio_pin>:
{
   11e30:	b580      	push	{r7, lr}
   11e32:	b082      	sub	sp, #8
   11e34:	af00      	add	r7, sp, #0
   11e36:	0002      	movs	r2, r0
   11e38:	1dfb      	adds	r3, r7, #7
   11e3a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11e3c:	1dfb      	adds	r3, r7, #7
   11e3e:	781b      	ldrb	r3, [r3, #0]
   11e40:	0018      	movs	r0, r3
   11e42:	4b03      	ldr	r3, [pc, #12]	; (11e50 <port_get_group_from_gpio_pin+0x20>)
   11e44:	4798      	blx	r3
   11e46:	0003      	movs	r3, r0
}
   11e48:	0018      	movs	r0, r3
   11e4a:	46bd      	mov	sp, r7
   11e4c:	b002      	add	sp, #8
   11e4e:	bd80      	pop	{r7, pc}
   11e50:	00011be9 	.word	0x00011be9

00011e54 <port_get_config_defaults>:
{
   11e54:	b580      	push	{r7, lr}
   11e56:	b082      	sub	sp, #8
   11e58:	af00      	add	r7, sp, #0
   11e5a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   11e5c:	687b      	ldr	r3, [r7, #4]
   11e5e:	2200      	movs	r2, #0
   11e60:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   11e62:	687b      	ldr	r3, [r7, #4]
   11e64:	2201      	movs	r2, #1
   11e66:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   11e68:	687b      	ldr	r3, [r7, #4]
   11e6a:	2200      	movs	r2, #0
   11e6c:	709a      	strb	r2, [r3, #2]
}
   11e6e:	46c0      	nop			; (mov r8, r8)
   11e70:	46bd      	mov	sp, r7
   11e72:	b002      	add	sp, #8
   11e74:	bd80      	pop	{r7, pc}
	...

00011e78 <port_pin_set_output_level>:
{
   11e78:	b580      	push	{r7, lr}
   11e7a:	b084      	sub	sp, #16
   11e7c:	af00      	add	r7, sp, #0
   11e7e:	0002      	movs	r2, r0
   11e80:	1dfb      	adds	r3, r7, #7
   11e82:	701a      	strb	r2, [r3, #0]
   11e84:	1dbb      	adds	r3, r7, #6
   11e86:	1c0a      	adds	r2, r1, #0
   11e88:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11e8a:	1dfb      	adds	r3, r7, #7
   11e8c:	781b      	ldrb	r3, [r3, #0]
   11e8e:	0018      	movs	r0, r3
   11e90:	4b0d      	ldr	r3, [pc, #52]	; (11ec8 <port_pin_set_output_level+0x50>)
   11e92:	4798      	blx	r3
   11e94:	0003      	movs	r3, r0
   11e96:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e98:	1dfb      	adds	r3, r7, #7
   11e9a:	781b      	ldrb	r3, [r3, #0]
   11e9c:	221f      	movs	r2, #31
   11e9e:	4013      	ands	r3, r2
   11ea0:	2201      	movs	r2, #1
   11ea2:	409a      	lsls	r2, r3
   11ea4:	0013      	movs	r3, r2
   11ea6:	60bb      	str	r3, [r7, #8]
	if (level) {
   11ea8:	1dbb      	adds	r3, r7, #6
   11eaa:	781b      	ldrb	r3, [r3, #0]
   11eac:	2b00      	cmp	r3, #0
   11eae:	d003      	beq.n	11eb8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   11eb0:	68fb      	ldr	r3, [r7, #12]
   11eb2:	68ba      	ldr	r2, [r7, #8]
   11eb4:	619a      	str	r2, [r3, #24]
}
   11eb6:	e002      	b.n	11ebe <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11eb8:	68fb      	ldr	r3, [r7, #12]
   11eba:	68ba      	ldr	r2, [r7, #8]
   11ebc:	615a      	str	r2, [r3, #20]
}
   11ebe:	46c0      	nop			; (mov r8, r8)
   11ec0:	46bd      	mov	sp, r7
   11ec2:	b004      	add	sp, #16
   11ec4:	bd80      	pop	{r7, pc}
   11ec6:	46c0      	nop			; (mov r8, r8)
   11ec8:	00011e31 	.word	0x00011e31

00011ecc <get_moisture>:
/* Gets the moisture value from SEN13322
*
*/
//TODO Set reference value
float get_moisture(void)
{
   11ecc:	b580      	push	{r7, lr}
   11ece:	b082      	sub	sp, #8
   11ed0:	af00      	add	r7, sp, #0
	// turn on sensor
	configure_port_pins_set(PIN_PA17);
   11ed2:	2011      	movs	r0, #17
   11ed4:	4b19      	ldr	r3, [pc, #100]	; (11f3c <get_moisture+0x70>)
   11ed6:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA17, true);
   11ed8:	2101      	movs	r1, #1
   11eda:	2011      	movs	r0, #17
   11edc:	4b18      	ldr	r3, [pc, #96]	; (11f40 <get_moisture+0x74>)
   11ede:	4798      	blx	r3
	
	delay_ms(500);
   11ee0:	23fa      	movs	r3, #250	; 0xfa
   11ee2:	005b      	lsls	r3, r3, #1
   11ee4:	0018      	movs	r0, r3
   11ee6:	4b17      	ldr	r3, [pc, #92]	; (11f44 <get_moisture+0x78>)
   11ee8:	4798      	blx	r3
	
	// read ADC
	uint16_t adc_result;
	adc_start_conversion(&adc_instance);
   11eea:	4b17      	ldr	r3, [pc, #92]	; (11f48 <get_moisture+0x7c>)
   11eec:	0018      	movs	r0, r3
   11eee:	4b17      	ldr	r3, [pc, #92]	; (11f4c <get_moisture+0x80>)
   11ef0:	4798      	blx	r3
	/* Wait for conversion to be done and read out result */
	do {
	} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
   11ef2:	1cba      	adds	r2, r7, #2
   11ef4:	4b14      	ldr	r3, [pc, #80]	; (11f48 <get_moisture+0x7c>)
   11ef6:	0011      	movs	r1, r2
   11ef8:	0018      	movs	r0, r3
   11efa:	4b15      	ldr	r3, [pc, #84]	; (11f50 <get_moisture+0x84>)
   11efc:	4798      	blx	r3
   11efe:	0003      	movs	r3, r0
   11f00:	2b05      	cmp	r3, #5
   11f02:	d0f6      	beq.n	11ef2 <get_moisture+0x26>
	float moisture = (adc_result/4095.0f)*(100.0f); //TODO: set values, NO MAGIC NUMBERS
   11f04:	1cbb      	adds	r3, r7, #2
   11f06:	881b      	ldrh	r3, [r3, #0]
   11f08:	001a      	movs	r2, r3
   11f0a:	4b12      	ldr	r3, [pc, #72]	; (11f54 <get_moisture+0x88>)
   11f0c:	0010      	movs	r0, r2
   11f0e:	4798      	blx	r3
   11f10:	1c02      	adds	r2, r0, #0
   11f12:	4b11      	ldr	r3, [pc, #68]	; (11f58 <get_moisture+0x8c>)
   11f14:	4911      	ldr	r1, [pc, #68]	; (11f5c <get_moisture+0x90>)
   11f16:	1c10      	adds	r0, r2, #0
   11f18:	4798      	blx	r3
   11f1a:	1c03      	adds	r3, r0, #0
   11f1c:	1c1a      	adds	r2, r3, #0
   11f1e:	4b10      	ldr	r3, [pc, #64]	; (11f60 <get_moisture+0x94>)
   11f20:	4910      	ldr	r1, [pc, #64]	; (11f64 <get_moisture+0x98>)
   11f22:	1c10      	adds	r0, r2, #0
   11f24:	4798      	blx	r3
   11f26:	1c03      	adds	r3, r0, #0
   11f28:	607b      	str	r3, [r7, #4]
	
	//turn off sensor
	port_pin_set_output_level(PIN_PA17, false);
   11f2a:	2100      	movs	r1, #0
   11f2c:	2011      	movs	r0, #17
   11f2e:	4b04      	ldr	r3, [pc, #16]	; (11f40 <get_moisture+0x74>)
   11f30:	4798      	blx	r3
	

	return moisture;
   11f32:	687b      	ldr	r3, [r7, #4]

	
}
   11f34:	1c18      	adds	r0, r3, #0
   11f36:	46bd      	mov	sp, r7
   11f38:	b002      	add	sp, #8
   11f3a:	bd80      	pop	{r7, pc}
   11f3c:	00011fc9 	.word	0x00011fc9
   11f40:	00011e79 	.word	0x00011e79
   11f44:	0000dc51 	.word	0x0000dc51
   11f48:	200008f0 	.word	0x200008f0
   11f4c:	00011d6d 	.word	0x00011d6d
   11f50:	00011db5 	.word	0x00011db5
   11f54:	00016c0d 	.word	0x00016c0d
   11f58:	0001673d 	.word	0x0001673d
   11f5c:	457ff000 	.word	0x457ff000
   11f60:	000169cd 	.word	0x000169cd
   11f64:	42c80000 	.word	0x42c80000

00011f68 <configure_adc>:
 *      @li Reference voltage: 1/2* VCC (1.65V)
 *      @li clock prescale: 16x
 * @param pin pin to read value from
 */
void configure_adc(int pin)
{
   11f68:	b580      	push	{r7, lr}
   11f6a:	b08e      	sub	sp, #56	; 0x38
   11f6c:	af00      	add	r7, sp, #0
   11f6e:	6078      	str	r0, [r7, #4]
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
   11f70:	2308      	movs	r3, #8
   11f72:	18fb      	adds	r3, r7, r3
   11f74:	0018      	movs	r0, r3
   11f76:	4b0f      	ldr	r3, [pc, #60]	; (11fb4 <configure_adc+0x4c>)
   11f78:	4798      	blx	r3
	config_adc.positive_input = pin;
   11f7a:	687b      	ldr	r3, [r7, #4]
   11f7c:	b2da      	uxtb	r2, r3
   11f7e:	2308      	movs	r3, #8
   11f80:	18fb      	adds	r3, r7, r3
   11f82:	731a      	strb	r2, [r3, #12]
	config_adc.reference = ADC_REFERENCE_INTVCC0;
   11f84:	2308      	movs	r3, #8
   11f86:	18fb      	adds	r3, r7, r3
   11f88:	2201      	movs	r2, #1
   11f8a:	705a      	strb	r2, [r3, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
   11f8c:	2308      	movs	r3, #8
   11f8e:	18fb      	adds	r3, r7, r3
   11f90:	2280      	movs	r2, #128	; 0x80
   11f92:	0092      	lsls	r2, r2, #2
   11f94:	805a      	strh	r2, [r3, #2]
	adc_init(&adc_instance, ADC, &config_adc);
   11f96:	2308      	movs	r3, #8
   11f98:	18fa      	adds	r2, r7, r3
   11f9a:	4907      	ldr	r1, [pc, #28]	; (11fb8 <configure_adc+0x50>)
   11f9c:	4b07      	ldr	r3, [pc, #28]	; (11fbc <configure_adc+0x54>)
   11f9e:	0018      	movs	r0, r3
   11fa0:	4b07      	ldr	r3, [pc, #28]	; (11fc0 <configure_adc+0x58>)
   11fa2:	4798      	blx	r3
	adc_enable(&adc_instance);
   11fa4:	4b05      	ldr	r3, [pc, #20]	; (11fbc <configure_adc+0x54>)
   11fa6:	0018      	movs	r0, r3
   11fa8:	4b06      	ldr	r3, [pc, #24]	; (11fc4 <configure_adc+0x5c>)
   11faa:	4798      	blx	r3
}
   11fac:	46c0      	nop			; (mov r8, r8)
   11fae:	46bd      	mov	sp, r7
   11fb0:	b00e      	add	sp, #56	; 0x38
   11fb2:	bd80      	pop	{r7, pc}
   11fb4:	0000dd85 	.word	0x0000dd85
   11fb8:	42004000 	.word	0x42004000
   11fbc:	200008f0 	.word	0x200008f0
   11fc0:	0000e3d5 	.word	0x0000e3d5
   11fc4:	00011d19 	.word	0x00011d19

00011fc8 <configure_port_pins_set>:
/**
 * Sets a given port to output.
 * @param pin pin of the port to set
 */
void configure_port_pins_set(int pin)
{
   11fc8:	b580      	push	{r7, lr}
   11fca:	b084      	sub	sp, #16
   11fcc:	af00      	add	r7, sp, #0
   11fce:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
   11fd0:	230c      	movs	r3, #12
   11fd2:	18fb      	adds	r3, r7, r3
   11fd4:	0018      	movs	r0, r3
   11fd6:	4b09      	ldr	r3, [pc, #36]	; (11ffc <configure_port_pins_set+0x34>)
   11fd8:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   11fda:	230c      	movs	r3, #12
   11fdc:	18fb      	adds	r3, r7, r3
   11fde:	2201      	movs	r2, #1
   11fe0:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(pin, &config_port_pin);
   11fe2:	687b      	ldr	r3, [r7, #4]
   11fe4:	b2db      	uxtb	r3, r3
   11fe6:	220c      	movs	r2, #12
   11fe8:	18ba      	adds	r2, r7, r2
   11fea:	0011      	movs	r1, r2
   11fec:	0018      	movs	r0, r3
   11fee:	4b04      	ldr	r3, [pc, #16]	; (12000 <configure_port_pins_set+0x38>)
   11ff0:	4798      	blx	r3
}
   11ff2:	46c0      	nop			; (mov r8, r8)
   11ff4:	46bd      	mov	sp, r7
   11ff6:	b004      	add	sp, #16
   11ff8:	bd80      	pop	{r7, pc}
   11ffa:	46c0      	nop			; (mov r8, r8)
   11ffc:	00011e55 	.word	0x00011e55
   12000:	00010a45 	.word	0x00010a45

00012004 <configure_port_pins_get>:
/**
 * Sets a given port to input
 * @param pin pin to set as input
 */
void configure_port_pins_get(int pin)
{
   12004:	b580      	push	{r7, lr}
   12006:	b084      	sub	sp, #16
   12008:	af00      	add	r7, sp, #0
   1200a:	6078      	str	r0, [r7, #4]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);
   1200c:	230c      	movs	r3, #12
   1200e:	18fb      	adds	r3, r7, r3
   12010:	0018      	movs	r0, r3
   12012:	4b0b      	ldr	r3, [pc, #44]	; (12040 <configure_port_pins_get+0x3c>)
   12014:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
   12016:	230c      	movs	r3, #12
   12018:	18fb      	adds	r3, r7, r3
   1201a:	2200      	movs	r2, #0
   1201c:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
   1201e:	230c      	movs	r3, #12
   12020:	18fb      	adds	r3, r7, r3
   12022:	2201      	movs	r2, #1
   12024:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(pin, &config_port_pin);
   12026:	687b      	ldr	r3, [r7, #4]
   12028:	b2db      	uxtb	r3, r3
   1202a:	220c      	movs	r2, #12
   1202c:	18ba      	adds	r2, r7, r2
   1202e:	0011      	movs	r1, r2
   12030:	0018      	movs	r0, r3
   12032:	4b04      	ldr	r3, [pc, #16]	; (12044 <configure_port_pins_get+0x40>)
   12034:	4798      	blx	r3
}
   12036:	46c0      	nop			; (mov r8, r8)
   12038:	46bd      	mov	sp, r7
   1203a:	b004      	add	sp, #16
   1203c:	bd80      	pop	{r7, pc}
   1203e:	46c0      	nop			; (mov r8, r8)
   12040:	00011e55 	.word	0x00011e55
   12044:	00010a45 	.word	0x00010a45

00012048 <led1_on>:

/**
 * Functions to toggle LEDs
 */
void led1_on(void)
{
   12048:	b580      	push	{r7, lr}
   1204a:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA21);
   1204c:	2015      	movs	r0, #21
   1204e:	4b04      	ldr	r3, [pc, #16]	; (12060 <led1_on+0x18>)
   12050:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA21, true);	
   12052:	2101      	movs	r1, #1
   12054:	2015      	movs	r0, #21
   12056:	4b03      	ldr	r3, [pc, #12]	; (12064 <led1_on+0x1c>)
   12058:	4798      	blx	r3
}
   1205a:	46c0      	nop			; (mov r8, r8)
   1205c:	46bd      	mov	sp, r7
   1205e:	bd80      	pop	{r7, pc}
   12060:	00011fc9 	.word	0x00011fc9
   12064:	00011e79 	.word	0x00011e79

00012068 <led1_off>:

void led1_off(void)
{
   12068:	b580      	push	{r7, lr}
   1206a:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA21);
   1206c:	2015      	movs	r0, #21
   1206e:	4b04      	ldr	r3, [pc, #16]	; (12080 <led1_off+0x18>)
   12070:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA21, false);
   12072:	2100      	movs	r1, #0
   12074:	2015      	movs	r0, #21
   12076:	4b03      	ldr	r3, [pc, #12]	; (12084 <led1_off+0x1c>)
   12078:	4798      	blx	r3
}
   1207a:	46c0      	nop			; (mov r8, r8)
   1207c:	46bd      	mov	sp, r7
   1207e:	bd80      	pop	{r7, pc}
   12080:	00011fc9 	.word	0x00011fc9
   12084:	00011e79 	.word	0x00011e79

00012088 <led2_on>:

void led2_on(void)
{
   12088:	b580      	push	{r7, lr}
   1208a:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA03);
   1208c:	2003      	movs	r0, #3
   1208e:	4b04      	ldr	r3, [pc, #16]	; (120a0 <led2_on+0x18>)
   12090:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA03, true);
   12092:	2101      	movs	r1, #1
   12094:	2003      	movs	r0, #3
   12096:	4b03      	ldr	r3, [pc, #12]	; (120a4 <led2_on+0x1c>)
   12098:	4798      	blx	r3
}
   1209a:	46c0      	nop			; (mov r8, r8)
   1209c:	46bd      	mov	sp, r7
   1209e:	bd80      	pop	{r7, pc}
   120a0:	00011fc9 	.word	0x00011fc9
   120a4:	00011e79 	.word	0x00011e79

000120a8 <led2_off>:

void led2_off(void)
{
   120a8:	b580      	push	{r7, lr}
   120aa:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PA03);
   120ac:	2003      	movs	r0, #3
   120ae:	4b04      	ldr	r3, [pc, #16]	; (120c0 <led2_off+0x18>)
   120b0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA03, false);
   120b2:	2100      	movs	r1, #0
   120b4:	2003      	movs	r0, #3
   120b6:	4b03      	ldr	r3, [pc, #12]	; (120c4 <led2_off+0x1c>)
   120b8:	4798      	blx	r3
}
   120ba:	46c0      	nop			; (mov r8, r8)
   120bc:	46bd      	mov	sp, r7
   120be:	bd80      	pop	{r7, pc}
   120c0:	00011fc9 	.word	0x00011fc9
   120c4:	00011e79 	.word	0x00011e79

000120c8 <relay1_enable>:
	configure_port_pins_set(PIN_PA20);
	port_pin_set_output_level(PIN_PA20, false);
}

void relay1_enable(void)
{
   120c8:	b580      	push	{r7, lr}
   120ca:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB02);
   120cc:	2022      	movs	r0, #34	; 0x22
   120ce:	4b04      	ldr	r3, [pc, #16]	; (120e0 <relay1_enable+0x18>)
   120d0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB02, true);
   120d2:	2101      	movs	r1, #1
   120d4:	2022      	movs	r0, #34	; 0x22
   120d6:	4b03      	ldr	r3, [pc, #12]	; (120e4 <relay1_enable+0x1c>)
   120d8:	4798      	blx	r3
}
   120da:	46c0      	nop			; (mov r8, r8)
   120dc:	46bd      	mov	sp, r7
   120de:	bd80      	pop	{r7, pc}
   120e0:	00011fc9 	.word	0x00011fc9
   120e4:	00011e79 	.word	0x00011e79

000120e8 <relay1_disable>:

void relay1_disable(void)
{
   120e8:	b580      	push	{r7, lr}
   120ea:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB02);
   120ec:	2022      	movs	r0, #34	; 0x22
   120ee:	4b04      	ldr	r3, [pc, #16]	; (12100 <relay1_disable+0x18>)
   120f0:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB02, false);
   120f2:	2100      	movs	r1, #0
   120f4:	2022      	movs	r0, #34	; 0x22
   120f6:	4b03      	ldr	r3, [pc, #12]	; (12104 <relay1_disable+0x1c>)
   120f8:	4798      	blx	r3
}
   120fa:	46c0      	nop			; (mov r8, r8)
   120fc:	46bd      	mov	sp, r7
   120fe:	bd80      	pop	{r7, pc}
   12100:	00011fc9 	.word	0x00011fc9
   12104:	00011e79 	.word	0x00011e79

00012108 <relay2_enable>:

void relay2_enable(void)
{
   12108:	b580      	push	{r7, lr}
   1210a:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB03);
   1210c:	2023      	movs	r0, #35	; 0x23
   1210e:	4b04      	ldr	r3, [pc, #16]	; (12120 <relay2_enable+0x18>)
   12110:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB03, true);
   12112:	2101      	movs	r1, #1
   12114:	2023      	movs	r0, #35	; 0x23
   12116:	4b03      	ldr	r3, [pc, #12]	; (12124 <relay2_enable+0x1c>)
   12118:	4798      	blx	r3
}
   1211a:	46c0      	nop			; (mov r8, r8)
   1211c:	46bd      	mov	sp, r7
   1211e:	bd80      	pop	{r7, pc}
   12120:	00011fc9 	.word	0x00011fc9
   12124:	00011e79 	.word	0x00011e79

00012128 <relay2_disable>:

void relay2_disable(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB03);
   1212c:	2023      	movs	r0, #35	; 0x23
   1212e:	4b04      	ldr	r3, [pc, #16]	; (12140 <relay2_disable+0x18>)
   12130:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB03, false);
   12132:	2100      	movs	r1, #0
   12134:	2023      	movs	r0, #35	; 0x23
   12136:	4b03      	ldr	r3, [pc, #12]	; (12144 <relay2_disable+0x1c>)
   12138:	4798      	blx	r3
}
   1213a:	46c0      	nop			; (mov r8, r8)
   1213c:	46bd      	mov	sp, r7
   1213e:	bd80      	pop	{r7, pc}
   12140:	00011fc9 	.word	0x00011fc9
   12144:	00011e79 	.word	0x00011e79

00012148 <gpio5_enable>:

void gpio5_enable(void)
{
   12148:	b580      	push	{r7, lr}
   1214a:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB23);
   1214c:	2037      	movs	r0, #55	; 0x37
   1214e:	4b04      	ldr	r3, [pc, #16]	; (12160 <gpio5_enable+0x18>)
   12150:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB23, true);
   12152:	2101      	movs	r1, #1
   12154:	2037      	movs	r0, #55	; 0x37
   12156:	4b03      	ldr	r3, [pc, #12]	; (12164 <gpio5_enable+0x1c>)
   12158:	4798      	blx	r3
}
   1215a:	46c0      	nop			; (mov r8, r8)
   1215c:	46bd      	mov	sp, r7
   1215e:	bd80      	pop	{r7, pc}
   12160:	00011fc9 	.word	0x00011fc9
   12164:	00011e79 	.word	0x00011e79

00012168 <gpio5_disable>:

void gpio5_disable(void)
{
   12168:	b580      	push	{r7, lr}
   1216a:	af00      	add	r7, sp, #0
	configure_port_pins_set(PIN_PB23);
   1216c:	2037      	movs	r0, #55	; 0x37
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <gpio5_disable+0x18>)
   12170:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB23, false);
   12172:	2100      	movs	r1, #0
   12174:	2037      	movs	r0, #55	; 0x37
   12176:	4b03      	ldr	r3, [pc, #12]	; (12184 <gpio5_disable+0x1c>)
   12178:	4798      	blx	r3
}
   1217a:	46c0      	nop			; (mov r8, r8)
   1217c:	46bd      	mov	sp, r7
   1217e:	bd80      	pop	{r7, pc}
   12180:	00011fc9 	.word	0x00011fc9
   12184:	00011e79 	.word	0x00011e79

00012188 <run_pump>:

	tcc_init(&tcc_instance_pwm, CONF_PWM_MODULE, &config_tcc);
	tcc_enable(&tcc_instance_pwm);
}

void run_pump(int duration) {
   12188:	b580      	push	{r7, lr}
   1218a:	b082      	sub	sp, #8
   1218c:	af00      	add	r7, sp, #0
   1218e:	6078      	str	r0, [r7, #4]
	
	//boost_enable();
	gpio5_enable();
   12190:	4b0b      	ldr	r3, [pc, #44]	; (121c0 <run_pump+0x38>)
   12192:	4798      	blx	r3
	led1_on();	
   12194:	4b0b      	ldr	r3, [pc, #44]	; (121c4 <run_pump+0x3c>)
   12196:	4798      	blx	r3
	
	delay_ms(duration); //duration of pump
   12198:	687b      	ldr	r3, [r7, #4]
   1219a:	2b00      	cmp	r3, #0
   1219c:	d004      	beq.n	121a8 <run_pump+0x20>
   1219e:	687b      	ldr	r3, [r7, #4]
   121a0:	0018      	movs	r0, r3
   121a2:	4b09      	ldr	r3, [pc, #36]	; (121c8 <run_pump+0x40>)
   121a4:	4798      	blx	r3
   121a6:	e002      	b.n	121ae <run_pump+0x26>
   121a8:	2001      	movs	r0, #1
   121aa:	4b08      	ldr	r3, [pc, #32]	; (121cc <run_pump+0x44>)
   121ac:	4798      	blx	r3
	
	led1_off();
   121ae:	4b08      	ldr	r3, [pc, #32]	; (121d0 <run_pump+0x48>)
   121b0:	4798      	blx	r3
	gpio5_disable();
   121b2:	4b08      	ldr	r3, [pc, #32]	; (121d4 <run_pump+0x4c>)
   121b4:	4798      	blx	r3
	//boost_disable();
	
   121b6:	46c0      	nop			; (mov r8, r8)
   121b8:	46bd      	mov	sp, r7
   121ba:	b002      	add	sp, #8
   121bc:	bd80      	pop	{r7, pc}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	00012149 	.word	0x00012149
   121c4:	00012049 	.word	0x00012049
   121c8:	0000dc51 	.word	0x0000dc51
   121cc:	0000dc21 	.word	0x0000dc21
   121d0:	00012069 	.word	0x00012069
   121d4:	00012169 	.word	0x00012169

000121d8 <system_pinmux_get_group_from_gpio_pin>:
{
   121d8:	b580      	push	{r7, lr}
   121da:	b084      	sub	sp, #16
   121dc:	af00      	add	r7, sp, #0
   121de:	0002      	movs	r2, r0
   121e0:	1dfb      	adds	r3, r7, #7
   121e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   121e4:	230f      	movs	r3, #15
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	09d2      	lsrs	r2, r2, #7
   121ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   121f0:	230e      	movs	r3, #14
   121f2:	18fb      	adds	r3, r7, r3
   121f4:	1dfa      	adds	r2, r7, #7
   121f6:	7812      	ldrb	r2, [r2, #0]
   121f8:	0952      	lsrs	r2, r2, #5
   121fa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   121fc:	4b0d      	ldr	r3, [pc, #52]	; (12234 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   121fe:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   12200:	230f      	movs	r3, #15
   12202:	18fb      	adds	r3, r7, r3
   12204:	781b      	ldrb	r3, [r3, #0]
   12206:	2b00      	cmp	r3, #0
   12208:	d10f      	bne.n	1222a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1220a:	230f      	movs	r3, #15
   1220c:	18fb      	adds	r3, r7, r3
   1220e:	781b      	ldrb	r3, [r3, #0]
   12210:	009b      	lsls	r3, r3, #2
   12212:	2210      	movs	r2, #16
   12214:	4694      	mov	ip, r2
   12216:	44bc      	add	ip, r7
   12218:	4463      	add	r3, ip
   1221a:	3b08      	subs	r3, #8
   1221c:	681a      	ldr	r2, [r3, #0]
   1221e:	230e      	movs	r3, #14
   12220:	18fb      	adds	r3, r7, r3
   12222:	781b      	ldrb	r3, [r3, #0]
   12224:	01db      	lsls	r3, r3, #7
   12226:	18d3      	adds	r3, r2, r3
   12228:	e000      	b.n	1222c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1222a:	2300      	movs	r3, #0
}
   1222c:	0018      	movs	r0, r3
   1222e:	46bd      	mov	sp, r7
   12230:	b004      	add	sp, #16
   12232:	bd80      	pop	{r7, pc}
   12234:	41004400 	.word	0x41004400

00012238 <port_get_group_from_gpio_pin>:
{
   12238:	b580      	push	{r7, lr}
   1223a:	b082      	sub	sp, #8
   1223c:	af00      	add	r7, sp, #0
   1223e:	0002      	movs	r2, r0
   12240:	1dfb      	adds	r3, r7, #7
   12242:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   12244:	1dfb      	adds	r3, r7, #7
   12246:	781b      	ldrb	r3, [r3, #0]
   12248:	0018      	movs	r0, r3
   1224a:	4b03      	ldr	r3, [pc, #12]	; (12258 <port_get_group_from_gpio_pin+0x20>)
   1224c:	4798      	blx	r3
   1224e:	0003      	movs	r3, r0
}
   12250:	0018      	movs	r0, r3
   12252:	46bd      	mov	sp, r7
   12254:	b002      	add	sp, #8
   12256:	bd80      	pop	{r7, pc}
   12258:	000121d9 	.word	0x000121d9

0001225c <port_pin_get_input_level>:
{
   1225c:	b580      	push	{r7, lr}
   1225e:	b084      	sub	sp, #16
   12260:	af00      	add	r7, sp, #0
   12262:	0002      	movs	r2, r0
   12264:	1dfb      	adds	r3, r7, #7
   12266:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   12268:	1dfb      	adds	r3, r7, #7
   1226a:	781b      	ldrb	r3, [r3, #0]
   1226c:	0018      	movs	r0, r3
   1226e:	4b0b      	ldr	r3, [pc, #44]	; (1229c <port_pin_get_input_level+0x40>)
   12270:	4798      	blx	r3
   12272:	0003      	movs	r3, r0
   12274:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12276:	1dfb      	adds	r3, r7, #7
   12278:	781b      	ldrb	r3, [r3, #0]
   1227a:	221f      	movs	r2, #31
   1227c:	4013      	ands	r3, r2
   1227e:	2201      	movs	r2, #1
   12280:	409a      	lsls	r2, r3
   12282:	0013      	movs	r3, r2
   12284:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	6a1b      	ldr	r3, [r3, #32]
   1228a:	68ba      	ldr	r2, [r7, #8]
   1228c:	4013      	ands	r3, r2
   1228e:	1e5a      	subs	r2, r3, #1
   12290:	4193      	sbcs	r3, r2
   12292:	b2db      	uxtb	r3, r3
}
   12294:	0018      	movs	r0, r3
   12296:	46bd      	mov	sp, r7
   12298:	b004      	add	sp, #16
   1229a:	bd80      	pop	{r7, pc}
   1229c:	00012239 	.word	0x00012239

000122a0 <system_interrupt_enable_global>:
{
   122a0:	b580      	push	{r7, lr}
   122a2:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   122a4:	4b04      	ldr	r3, [pc, #16]	; (122b8 <system_interrupt_enable_global+0x18>)
   122a6:	2201      	movs	r2, #1
   122a8:	701a      	strb	r2, [r3, #0]
   122aa:	f3bf 8f5f 	dmb	sy
   122ae:	b662      	cpsie	i
}
   122b0:	46c0      	nop			; (mov r8, r8)
   122b2:	46bd      	mov	sp, r7
   122b4:	bd80      	pop	{r7, pc}
   122b6:	46c0      	nop			; (mov r8, r8)
   122b8:	20000014 	.word	0x20000014

000122bc <main>:

extern char mqtt_buffer[MAIN_MQTT_BUFFER_SIZE];


int main(void)
{
   122bc:	b590      	push	{r4, r7, lr}
   122be:	b08b      	sub	sp, #44	; 0x2c
   122c0:	af02      	add	r7, sp, #8
	uint32_t MQTTCounter = 0;	
   122c2:	2300      	movs	r3, #0
   122c4:	61fb      	str	r3, [r7, #28]
	int wifi_result = WIFI_SUCCESS;	    
   122c6:	2300      	movs	r3, #0
   122c8:	61bb      	str	r3, [r7, #24]
	
	mqttfirmware_download = 0;
   122ca:	4b55      	ldr	r3, [pc, #340]	; (12420 <main+0x164>)
   122cc:	2200      	movs	r2, #0
   122ce:	701a      	strb	r2, [r3, #0]

	system_init();
   122d0:	4b54      	ldr	r3, [pc, #336]	; (12424 <main+0x168>)
   122d2:	4798      	blx	r3
	system_interrupt_enable_global();
   122d4:	4b54      	ldr	r3, [pc, #336]	; (12428 <main+0x16c>)
   122d6:	4798      	blx	r3
	delay_init();
   122d8:	4b54      	ldr	r3, [pc, #336]	; (1242c <main+0x170>)
   122da:	4798      	blx	r3
	configure_usart();
   122dc:	4b54      	ldr	r3, [pc, #336]	; (12430 <main+0x174>)
   122de:	4798      	blx	r3
	wifi_result = wifi_init();
   122e0:	4b54      	ldr	r3, [pc, #336]	; (12434 <main+0x178>)
   122e2:	4798      	blx	r3
   122e4:	0003      	movs	r3, r0
   122e6:	61bb      	str	r3, [r7, #24]
	
	if (WIFI_SUCCESS != wifi_result) printf("\r\n...Wi-Fi failed to configure...\r\n");
   122e8:	69bb      	ldr	r3, [r7, #24]
   122ea:	2b00      	cmp	r3, #0
   122ec:	d003      	beq.n	122f6 <main+0x3a>
   122ee:	4b52      	ldr	r3, [pc, #328]	; (12438 <main+0x17c>)
   122f0:	0018      	movs	r0, r3
   122f2:	4b52      	ldr	r3, [pc, #328]	; (1243c <main+0x180>)
   122f4:	4798      	blx	r3
	
	printf("Board initialized.\r\n");
   122f6:	4b52      	ldr	r3, [pc, #328]	; (12440 <main+0x184>)
   122f8:	0018      	movs	r0, r3
   122fa:	4b50      	ldr	r3, [pc, #320]	; (1243c <main+0x180>)
   122fc:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   122fe:	4a51      	ldr	r2, [pc, #324]	; (12444 <main+0x188>)
   12300:	4851      	ldr	r0, [pc, #324]	; (12448 <main+0x18c>)
   12302:	23ff      	movs	r3, #255	; 0xff
   12304:	9300      	str	r3, [sp, #0]
   12306:	0013      	movs	r3, r2
   12308:	2202      	movs	r2, #2
   1230a:	2105      	movs	r1, #5
   1230c:	4c4f      	ldr	r4, [pc, #316]	; (1244c <main+0x190>)
   1230e:	47a0      	blx	r4
	MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	
	while(!(wifi_connected)) {		
   12310:	e006      	b.n	12320 <main+0x64>
		    /* Handle pending events from network controller. */
		    m2m_wifi_handle_events(NULL);
   12312:	2000      	movs	r0, #0
   12314:	4b4e      	ldr	r3, [pc, #312]	; (12450 <main+0x194>)
   12316:	4798      	blx	r3
		    /* Checks the timer timeout. */
		    sw_timer_task(&swt_module_inst);
   12318:	4b4e      	ldr	r3, [pc, #312]	; (12454 <main+0x198>)
   1231a:	0018      	movs	r0, r3
   1231c:	4b4e      	ldr	r3, [pc, #312]	; (12458 <main+0x19c>)
   1231e:	4798      	blx	r3
	while(!(wifi_connected)) {		
   12320:	4b4e      	ldr	r3, [pc, #312]	; (1245c <main+0x1a0>)
   12322:	681b      	ldr	r3, [r3, #0]
   12324:	2b00      	cmp	r3, #0
   12326:	d0f4      	beq.n	12312 <main+0x56>
	}
	
	while(!(mqtt_connected)) {
   12328:	e006      	b.n	12338 <main+0x7c>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   1232a:	2000      	movs	r0, #0
   1232c:	4b48      	ldr	r3, [pc, #288]	; (12450 <main+0x194>)
   1232e:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
   12330:	4b48      	ldr	r3, [pc, #288]	; (12454 <main+0x198>)
   12332:	0018      	movs	r0, r3
   12334:	4b48      	ldr	r3, [pc, #288]	; (12458 <main+0x19c>)
   12336:	4798      	blx	r3
	while(!(mqtt_connected)) {
   12338:	4b49      	ldr	r3, [pc, #292]	; (12460 <main+0x1a4>)
   1233a:	681b      	ldr	r3, [r3, #0]
   1233c:	2b00      	cmp	r3, #0
   1233e:	d0f4      	beq.n	1232a <main+0x6e>
	}
	
	
	
	configure_adc(MOISTURE_ANA_PIN); //configure moisture sensor analog
   12340:	2000      	movs	r0, #0
   12342:	4b48      	ldr	r3, [pc, #288]	; (12464 <main+0x1a8>)
   12344:	4798      	blx	r3
	configure_i2c_hdc(); //config i2c
   12346:	4b48      	ldr	r3, [pc, #288]	; (12468 <main+0x1ac>)
   12348:	4798      	blx	r3
	configure_i2c_tsl2561(ADDR_FLOAT);
   1234a:	2039      	movs	r0, #57	; 0x39
   1234c:	4b47      	ldr	r3, [pc, #284]	; (1246c <main+0x1b0>)
   1234e:	4798      	blx	r3
	uint16_t dev_id = get_hdc_device_id();
   12350:	2316      	movs	r3, #22
   12352:	18fc      	adds	r4, r7, r3
   12354:	4b46      	ldr	r3, [pc, #280]	; (12470 <main+0x1b4>)
   12356:	4798      	blx	r3
   12358:	0003      	movs	r3, r0
   1235a:	8023      	strh	r3, [r4, #0]
	printf("dev id: 0x%02x\r\n", dev_id);
   1235c:	2316      	movs	r3, #22
   1235e:	18fb      	adds	r3, r7, r3
   12360:	881a      	ldrh	r2, [r3, #0]
   12362:	4b44      	ldr	r3, [pc, #272]	; (12474 <main+0x1b8>)
   12364:	0011      	movs	r1, r2
   12366:	0018      	movs	r0, r3
   12368:	4b43      	ldr	r3, [pc, #268]	; (12478 <main+0x1bc>)
   1236a:	4798      	blx	r3
	
	configure_port_pins_get(PIN_PA11); //TODO: decide if this is necessary
   1236c:	200b      	movs	r0, #11
   1236e:	4b43      	ldr	r3, [pc, #268]	; (1247c <main+0x1c0>)
   12370:	4798      	blx	r3

	printf("Running as MQTT User: %s\r\n", MQTT_USER);
   12372:	4a43      	ldr	r2, [pc, #268]	; (12480 <main+0x1c4>)
   12374:	4b43      	ldr	r3, [pc, #268]	; (12484 <main+0x1c8>)
   12376:	0011      	movs	r1, r2
   12378:	0018      	movs	r0, r3
   1237a:	4b3f      	ldr	r3, [pc, #252]	; (12478 <main+0x1bc>)
   1237c:	4798      	blx	r3
	
	led1_on(); //show that board is connected	
   1237e:	4b42      	ldr	r3, [pc, #264]	; (12488 <main+0x1cc>)
   12380:	4798      	blx	r3

	while (1) {
	
	    /* Handle pending events from network controller. */
	    m2m_wifi_handle_events(NULL);
   12382:	2000      	movs	r0, #0
   12384:	4b32      	ldr	r3, [pc, #200]	; (12450 <main+0x194>)
   12386:	4798      	blx	r3
	    /* Checks the timer timeout. */
	    sw_timer_task(&swt_module_inst);		
   12388:	4b32      	ldr	r3, [pc, #200]	; (12454 <main+0x198>)
   1238a:	0018      	movs	r0, r3
   1238c:	4b32      	ldr	r3, [pc, #200]	; (12458 <main+0x19c>)
   1238e:	4798      	blx	r3
		
		if ((mqttfirmware_download == 1 || port_pin_get_input_level(PIN_PA11) == false))
   12390:	4b23      	ldr	r3, [pc, #140]	; (12420 <main+0x164>)
   12392:	781b      	ldrb	r3, [r3, #0]
   12394:	2b01      	cmp	r3, #1
   12396:	d009      	beq.n	123ac <main+0xf0>
   12398:	200b      	movs	r0, #11
   1239a:	4b3c      	ldr	r3, [pc, #240]	; (1248c <main+0x1d0>)
   1239c:	4798      	blx	r3
   1239e:	0003      	movs	r3, r0
   123a0:	001a      	movs	r2, r3
   123a2:	2301      	movs	r3, #1
   123a4:	4053      	eors	r3, r2
   123a6:	b2db      	uxtb	r3, r3
   123a8:	2b00      	cmp	r3, #0
   123aa:	d028      	beq.n	123fe <main+0x142>
		{
			deconfigure_mqtt();
   123ac:	4b38      	ldr	r3, [pc, #224]	; (12490 <main+0x1d4>)
   123ae:	4798      	blx	r3
			m2m_wifi_deinit(0);
   123b0:	2000      	movs	r0, #0
   123b2:	4b38      	ldr	r3, [pc, #224]	; (12494 <main+0x1d8>)
   123b4:	4798      	blx	r3
			nm_bsp_deinit();
   123b6:	4b38      	ldr	r3, [pc, #224]	; (12498 <main+0x1dc>)
   123b8:	4798      	blx	r3
			
			wifi_config new_wifi_configuration;
			get_default_wifi_config(&new_wifi_configuration);
   123ba:	003b      	movs	r3, r7
   123bc:	0018      	movs	r0, r3
   123be:	4b37      	ldr	r3, [pc, #220]	; (1249c <main+0x1e0>)
   123c0:	4798      	blx	r3
			new_wifi_configuration.ssid = "SNBP";
   123c2:	003b      	movs	r3, r7
   123c4:	4a20      	ldr	r2, [pc, #128]	; (12448 <main+0x18c>)
   123c6:	601a      	str	r2, [r3, #0]
			new_wifi_configuration.password = "sn42betarho";
   123c8:	003b      	movs	r3, r7
   123ca:	4a1e      	ldr	r2, [pc, #120]	; (12444 <main+0x188>)
   123cc:	609a      	str	r2, [r3, #8]
			configure_wifi_module(&new_wifi_configuration);
   123ce:	003b      	movs	r3, r7
   123d0:	0018      	movs	r0, r3
   123d2:	4b33      	ldr	r3, [pc, #204]	; (124a0 <main+0x1e4>)
   123d4:	4798      	blx	r3
			configure_flash();
   123d6:	4b33      	ldr	r3, [pc, #204]	; (124a4 <main+0x1e8>)
   123d8:	4798      	blx	r3
			configure_nvm();
   123da:	4b33      	ldr	r3, [pc, #204]	; (124a8 <main+0x1ec>)
   123dc:	4798      	blx	r3
			if(check_for_update()) {
   123de:	4b33      	ldr	r3, [pc, #204]	; (124ac <main+0x1f0>)
   123e0:	4798      	blx	r3
   123e2:	1e03      	subs	r3, r0, #0
   123e4:	d007      	beq.n	123f6 <main+0x13a>
				if(download_firmware()) {
   123e6:	4b32      	ldr	r3, [pc, #200]	; (124b0 <main+0x1f4>)
   123e8:	4798      	blx	r3
   123ea:	1e03      	subs	r3, r0, #0
   123ec:	d003      	beq.n	123f6 <main+0x13a>
					printf("firmware successfully downloaded!\r\n");
   123ee:	4b31      	ldr	r3, [pc, #196]	; (124b4 <main+0x1f8>)
   123f0:	0018      	movs	r0, r3
   123f2:	4b12      	ldr	r3, [pc, #72]	; (1243c <main+0x180>)
   123f4:	4798      	blx	r3
				}
			}			
			mqttfirmware_download = 0;
   123f6:	4b0a      	ldr	r3, [pc, #40]	; (12420 <main+0x164>)
   123f8:	2200      	movs	r2, #0
   123fa:	701a      	strb	r2, [r3, #0]
		{
   123fc:	e00b      	b.n	12416 <main+0x15a>
		}
		
		else if ((MQTTCounter >= COUNTER_MAX))
   123fe:	69fb      	ldr	r3, [r7, #28]
   12400:	4a2d      	ldr	r2, [pc, #180]	; (124b8 <main+0x1fc>)
   12402:	4293      	cmp	r3, r2
   12404:	d907      	bls.n	12416 <main+0x15a>
		{
			MQTTCounter = 0; //reset sensor counter
   12406:	2300      	movs	r3, #0
   12408:	61fb      	str	r3, [r7, #28]
			printf("Sending sensor values to Cloud.\r\n");			
   1240a:	4b2c      	ldr	r3, [pc, #176]	; (124bc <main+0x200>)
   1240c:	0018      	movs	r0, r3
   1240e:	4b0b      	ldr	r3, [pc, #44]	; (1243c <main+0x180>)
   12410:	4798      	blx	r3
			publish_sensor_values();			
   12412:	4b2b      	ldr	r3, [pc, #172]	; (124c0 <main+0x204>)
   12414:	4798      	blx	r3
		}	
				
		++MQTTCounter;
   12416:	69fb      	ldr	r3, [r7, #28]
   12418:	3301      	adds	r3, #1
   1241a:	61fb      	str	r3, [r7, #28]
	    m2m_wifi_handle_events(NULL);
   1241c:	e7b1      	b.n	12382 <main+0xc6>
   1241e:	46c0      	nop			; (mov r8, r8)
   12420:	2000080c 	.word	0x2000080c
   12424:	00011a21 	.word	0x00011a21
   12428:	000122a1 	.word	0x000122a1
   1242c:	0000dbc9 	.word	0x0000dbc9
   12430:	00000651 	.word	0x00000651
   12434:	0000d895 	.word	0x0000d895
   12438:	0001ade8 	.word	0x0001ade8
   1243c:	00013f69 	.word	0x00013f69
   12440:	0001ae0c 	.word	0x0001ae0c
   12444:	0001ae20 	.word	0x0001ae20
   12448:	0001ae2c 	.word	0x0001ae2c
   1244c:	000052d9 	.word	0x000052d9
   12450:	000052bd 	.word	0x000052bd
   12454:	20000328 	.word	0x20000328
   12458:	0000d209 	.word	0x0000d209
   1245c:	2000025c 	.word	0x2000025c
   12460:	20000260 	.word	0x20000260
   12464:	00011f69 	.word	0x00011f69
   12468:	000008f9 	.word	0x000008f9
   1246c:	00000e45 	.word	0x00000e45
   12470:	00000bcd 	.word	0x00000bcd
   12474:	0001ae34 	.word	0x0001ae34
   12478:	00013e4d 	.word	0x00013e4d
   1247c:	00012005 	.word	0x00012005
   12480:	0001ae48 	.word	0x0001ae48
   12484:	0001ae54 	.word	0x0001ae54
   12488:	00012049 	.word	0x00012049
   1248c:	0001225d 	.word	0x0001225d
   12490:	0000d849 	.word	0x0000d849
   12494:	00005295 	.word	0x00005295
   12498:	000035b5 	.word	0x000035b5
   1249c:	00002499 	.word	0x00002499
   124a0:	000024d9 	.word	0x000024d9
   124a4:	000006c5 	.word	0x000006c5
   124a8:	00000761 	.word	0x00000761
   124ac:	00002601 	.word	0x00002601
   124b0:	00002675 	.word	0x00002675
   124b4:	0001ae70 	.word	0x0001ae70
   124b8:	002dc6bf 	.word	0x002dc6bf
   124bc:	0001ae94 	.word	0x0001ae94
   124c0:	0000d975 	.word	0x0000d975

000124c4 <_hwerr_to_stderr>:
   124c4:	1c03      	adds	r3, r0, #0
   124c6:	300e      	adds	r0, #14
   124c8:	b500      	push	{lr}
   124ca:	280e      	cmp	r0, #14
   124cc:	d819      	bhi.n	12502 <_hwerr_to_stderr+0x3e>
   124ce:	f003 ff4d 	bl	1636c <__gnu_thumb1_case_uqi>
   124d2:	1416      	.short	0x1416
   124d4:	1b181012 	.word	0x1b181012
   124d8:	180c0e18 	.word	0x180c0e18
   124dc:	1d0a0e0e 	.word	0x1d0a0e0e
   124e0:	08          	.byte	0x08
   124e1:	00          	.byte	0x00
   124e2:	2000      	movs	r0, #0
   124e4:	e014      	b.n	12510 <_hwerr_to_stderr+0x4c>
   124e6:	2070      	movs	r0, #112	; 0x70
   124e8:	e011      	b.n	1250e <_hwerr_to_stderr+0x4a>
   124ea:	2016      	movs	r0, #22
   124ec:	e00f      	b.n	1250e <_hwerr_to_stderr+0x4a>
   124ee:	200c      	movs	r0, #12
   124f0:	e00d      	b.n	1250e <_hwerr_to_stderr+0x4a>
   124f2:	2079      	movs	r0, #121	; 0x79
   124f4:	e00b      	b.n	1250e <_hwerr_to_stderr+0x4a>
   124f6:	2068      	movs	r0, #104	; 0x68
   124f8:	e009      	b.n	1250e <_hwerr_to_stderr+0x4a>
   124fa:	200b      	movs	r0, #11
   124fc:	e007      	b.n	1250e <_hwerr_to_stderr+0x4a>
   124fe:	2010      	movs	r0, #16
   12500:	e005      	b.n	1250e <_hwerr_to_stderr+0x4a>
   12502:	2000      	movs	r0, #0
   12504:	4283      	cmp	r3, r0
   12506:	da03      	bge.n	12510 <_hwerr_to_stderr+0x4c>
   12508:	2005      	movs	r0, #5
   1250a:	e000      	b.n	1250e <_hwerr_to_stderr+0x4a>
   1250c:	2002      	movs	r0, #2
   1250e:	4240      	negs	r0, r0
   12510:	bd00      	pop	{pc}
	...

00012514 <_mqtt_send_wait>:
   12514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12516:	1c04      	adds	r4, r0, #0
   12518:	3443      	adds	r4, #67	; 0x43
   1251a:	7823      	ldrb	r3, [r4, #0]
   1251c:	1c05      	adds	r5, r0, #0
   1251e:	07d8      	lsls	r0, r3, #31
   12520:	d51c      	bpl.n	1255c <_mqtt_send_wait+0x48>
   12522:	2604      	movs	r6, #4
   12524:	4333      	orrs	r3, r6
   12526:	7023      	strb	r3, [r4, #0]
   12528:	2002      	movs	r0, #2
   1252a:	5628      	ldrsb	r0, [r5, r0]
   1252c:	b292      	uxth	r2, r2
   1252e:	2300      	movs	r3, #0
   12530:	4f0c      	ldr	r7, [pc, #48]	; (12564 <_mqtt_send_wait+0x50>)
   12532:	47b8      	blx	r7
   12534:	2800      	cmp	r0, #0
   12536:	da05      	bge.n	12544 <_mqtt_send_wait+0x30>
   12538:	7823      	ldrb	r3, [r4, #0]
   1253a:	43b3      	bics	r3, r6
   1253c:	7023      	strb	r3, [r4, #0]
   1253e:	4b0a      	ldr	r3, [pc, #40]	; (12568 <_mqtt_send_wait+0x54>)
   12540:	4798      	blx	r3
   12542:	e00d      	b.n	12560 <_mqtt_send_wait+0x4c>
   12544:	7822      	ldrb	r2, [r4, #0]
   12546:	2314      	movs	r3, #20
   12548:	4013      	ands	r3, r2
   1254a:	2000      	movs	r0, #0
   1254c:	2b04      	cmp	r3, #4
   1254e:	d107      	bne.n	12560 <_mqtt_send_wait+0x4c>
   12550:	4b06      	ldr	r3, [pc, #24]	; (1256c <_mqtt_send_wait+0x58>)
   12552:	4798      	blx	r3
   12554:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   12556:	4b06      	ldr	r3, [pc, #24]	; (12570 <_mqtt_send_wait+0x5c>)
   12558:	4798      	blx	r3
   1255a:	e7f3      	b.n	12544 <_mqtt_send_wait+0x30>
   1255c:	2001      	movs	r0, #1
   1255e:	4240      	negs	r0, r0
   12560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12562:	46c0      	nop			; (mov r8, r8)
   12564:	000086b9 	.word	0x000086b9
   12568:	000124c5 	.word	0x000124c5
   1256c:	000052bd 	.word	0x000052bd
   12570:	0000d209 	.word	0x0000d209

00012574 <mqtt_get_config_defaults>:
   12574:	4b07      	ldr	r3, [pc, #28]	; (12594 <mqtt_get_config_defaults+0x20>)
   12576:	2240      	movs	r2, #64	; 0x40
   12578:	8003      	strh	r3, [r0, #0]
   1257a:	2396      	movs	r3, #150	; 0x96
   1257c:	009b      	lsls	r3, r3, #2
   1257e:	8103      	strh	r3, [r0, #8]
   12580:	6102      	str	r2, [r0, #16]
   12582:	2300      	movs	r3, #0
   12584:	2220      	movs	r2, #32
   12586:	7083      	strb	r3, [r0, #2]
   12588:	6043      	str	r3, [r0, #4]
   1258a:	60c3      	str	r3, [r0, #12]
   1258c:	6142      	str	r2, [r0, #20]
   1258e:	7603      	strb	r3, [r0, #24]
   12590:	4770      	bx	lr
   12592:	46c0      	nop			; (mov r8, r8)
   12594:	0000075b 	.word	0x0000075b

00012598 <mqtt_init>:
   12598:	b538      	push	{r3, r4, r5, lr}
   1259a:	1c04      	adds	r4, r0, #0
   1259c:	1c0d      	adds	r5, r1, #0
   1259e:	2800      	cmp	r0, #0
   125a0:	d030      	beq.n	12604 <mqtt_init+0x6c>
   125a2:	2900      	cmp	r1, #0
   125a4:	d02e      	beq.n	12604 <mqtt_init+0x6c>
   125a6:	690b      	ldr	r3, [r1, #16]
   125a8:	2b00      	cmp	r3, #0
   125aa:	d02b      	beq.n	12604 <mqtt_init+0x6c>
   125ac:	684b      	ldr	r3, [r1, #4]
   125ae:	2b00      	cmp	r3, #0
   125b0:	d028      	beq.n	12604 <mqtt_init+0x6c>
   125b2:	2100      	movs	r1, #0
   125b4:	2274      	movs	r2, #116	; 0x74
   125b6:	4b16      	ldr	r3, [pc, #88]	; (12610 <mqtt_init+0x78>)
   125b8:	4798      	blx	r3
   125ba:	1c20      	adds	r0, r4, #0
   125bc:	4b15      	ldr	r3, [pc, #84]	; (12614 <mqtt_init+0x7c>)
   125be:	3058      	adds	r0, #88	; 0x58
   125c0:	1c29      	adds	r1, r5, #0
   125c2:	221c      	movs	r2, #28
   125c4:	4798      	blx	r3
   125c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   125c8:	2b00      	cmp	r3, #0
   125ca:	d10b      	bne.n	125e4 <mqtt_init+0x4c>
   125cc:	6928      	ldr	r0, [r5, #16]
   125ce:	4b12      	ldr	r3, [pc, #72]	; (12618 <mqtt_init+0x80>)
   125d0:	4798      	blx	r3
   125d2:	6660      	str	r0, [r4, #100]	; 0x64
   125d4:	2800      	cmp	r0, #0
   125d6:	d017      	beq.n	12608 <mqtt_init+0x70>
   125d8:	1c23      	adds	r3, r4, #0
   125da:	3343      	adds	r3, #67	; 0x43
   125dc:	781a      	ldrb	r2, [r3, #0]
   125de:	2120      	movs	r1, #32
   125e0:	430a      	orrs	r2, r1
   125e2:	701a      	strb	r2, [r3, #0]
   125e4:	892a      	ldrh	r2, [r5, #8]
   125e6:	23fa      	movs	r3, #250	; 0xfa
   125e8:	005b      	lsls	r3, r3, #1
   125ea:	4353      	muls	r3, r2
   125ec:	6868      	ldr	r0, [r5, #4]
   125ee:	490b      	ldr	r1, [pc, #44]	; (1261c <mqtt_init+0x84>)
   125f0:	1c22      	adds	r2, r4, #0
   125f2:	4d0b      	ldr	r5, [pc, #44]	; (12620 <mqtt_init+0x88>)
   125f4:	47a8      	blx	r5
   125f6:	1c03      	adds	r3, r0, #0
   125f8:	6520      	str	r0, [r4, #80]	; 0x50
   125fa:	2000      	movs	r0, #0
   125fc:	4283      	cmp	r3, r0
   125fe:	da05      	bge.n	1260c <mqtt_init+0x74>
   12600:	201c      	movs	r0, #28
   12602:	e002      	b.n	1260a <mqtt_init+0x72>
   12604:	2016      	movs	r0, #22
   12606:	e000      	b.n	1260a <mqtt_init+0x72>
   12608:	200c      	movs	r0, #12
   1260a:	4240      	negs	r0, r0
   1260c:	bd38      	pop	{r3, r4, r5, pc}
   1260e:	46c0      	nop			; (mov r8, r8)
   12610:	0001340b 	.word	0x0001340b
   12614:	000133d5 	.word	0x000133d5
   12618:	00013389 	.word	0x00013389
   1261c:	00012df9 	.word	0x00012df9
   12620:	0000d0d1 	.word	0x0000d0d1

00012624 <mqtt_deinit>:
   12624:	b510      	push	{r4, lr}
   12626:	1e04      	subs	r4, r0, #0
   12628:	d014      	beq.n	12654 <mqtt_deinit+0x30>
   1262a:	6e40      	ldr	r0, [r0, #100]	; 0x64
   1262c:	2800      	cmp	r0, #0
   1262e:	d008      	beq.n	12642 <mqtt_deinit+0x1e>
   12630:	1c23      	adds	r3, r4, #0
   12632:	3343      	adds	r3, #67	; 0x43
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	069a      	lsls	r2, r3, #26
   12638:	d503      	bpl.n	12642 <mqtt_deinit+0x1e>
   1263a:	4b09      	ldr	r3, [pc, #36]	; (12660 <mqtt_deinit+0x3c>)
   1263c:	4798      	blx	r3
   1263e:	2300      	movs	r3, #0
   12640:	6663      	str	r3, [r4, #100]	; 0x64
   12642:	6d21      	ldr	r1, [r4, #80]	; 0x50
   12644:	2900      	cmp	r1, #0
   12646:	db08      	blt.n	1265a <mqtt_deinit+0x36>
   12648:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   1264a:	2800      	cmp	r0, #0
   1264c:	d006      	beq.n	1265c <mqtt_deinit+0x38>
   1264e:	4b05      	ldr	r3, [pc, #20]	; (12664 <mqtt_deinit+0x40>)
   12650:	4798      	blx	r3
   12652:	e002      	b.n	1265a <mqtt_deinit+0x36>
   12654:	2016      	movs	r0, #22
   12656:	4240      	negs	r0, r0
   12658:	e000      	b.n	1265c <mqtt_deinit+0x38>
   1265a:	2000      	movs	r0, #0
   1265c:	bd10      	pop	{r4, pc}
   1265e:	46c0      	nop			; (mov r8, r8)
   12660:	0001339d 	.word	0x0001339d
   12664:	0000d161 	.word	0x0000d161

00012668 <mqtt_register_callback>:
   12668:	2800      	cmp	r0, #0
   1266a:	d002      	beq.n	12672 <mqtt_register_callback+0xa>
   1266c:	6541      	str	r1, [r0, #84]	; 0x54
   1266e:	2000      	movs	r0, #0
   12670:	e001      	b.n	12676 <mqtt_register_callback+0xe>
   12672:	2016      	movs	r0, #22
   12674:	4240      	negs	r0, r0
   12676:	4770      	bx	lr

00012678 <mqtt_unregister_callback>:
   12678:	2800      	cmp	r0, #0
   1267a:	d003      	beq.n	12684 <mqtt_unregister_callback+0xc>
   1267c:	2300      	movs	r3, #0
   1267e:	6543      	str	r3, [r0, #84]	; 0x54
   12680:	1c18      	adds	r0, r3, #0
   12682:	e001      	b.n	12688 <mqtt_unregister_callback+0x10>
   12684:	2016      	movs	r0, #22
   12686:	4240      	negs	r0, r0
   12688:	4770      	bx	lr
	...

0001268c <mqtt_socket_resolve_handler>:
   1268c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1268e:	1c06      	adds	r6, r0, #0
   12690:	b085      	sub	sp, #20
   12692:	1c0f      	adds	r7, r1, #0
   12694:	2400      	movs	r4, #0
   12696:	4b0f      	ldr	r3, [pc, #60]	; (126d4 <mqtt_socket_resolve_handler+0x48>)
   12698:	58e5      	ldr	r5, [r4, r3]
   1269a:	2d00      	cmp	r5, #0
   1269c:	d015      	beq.n	126ca <mqtt_socket_resolve_handler+0x3e>
   1269e:	1ce9      	adds	r1, r5, #3
   126a0:	1c30      	adds	r0, r6, #0
   126a2:	4b0d      	ldr	r3, [pc, #52]	; (126d8 <mqtt_socket_resolve_handler+0x4c>)
   126a4:	4798      	blx	r3
   126a6:	2800      	cmp	r0, #0
   126a8:	d10f      	bne.n	126ca <mqtt_socket_resolve_handler+0x3e>
   126aa:	466a      	mov	r2, sp
   126ac:	2302      	movs	r3, #2
   126ae:	8013      	strh	r3, [r2, #0]
   126b0:	1c2b      	adds	r3, r5, #0
   126b2:	3358      	adds	r3, #88	; 0x58
   126b4:	881b      	ldrh	r3, [r3, #0]
   126b6:	9701      	str	r7, [sp, #4]
   126b8:	ba5b      	rev16	r3, r3
   126ba:	8053      	strh	r3, [r2, #2]
   126bc:	2002      	movs	r0, #2
   126be:	5628      	ldrsb	r0, [r5, r0]
   126c0:	4669      	mov	r1, sp
   126c2:	2210      	movs	r2, #16
   126c4:	4b05      	ldr	r3, [pc, #20]	; (126dc <mqtt_socket_resolve_handler+0x50>)
   126c6:	4798      	blx	r3
   126c8:	e002      	b.n	126d0 <mqtt_socket_resolve_handler+0x44>
   126ca:	3404      	adds	r4, #4
   126cc:	2c1c      	cmp	r4, #28
   126ce:	d1e2      	bne.n	12696 <mqtt_socket_resolve_handler+0xa>
   126d0:	b005      	add	sp, #20
   126d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   126d4:	200002a4 	.word	0x200002a4
   126d8:	00014151 	.word	0x00014151
   126dc:	000085a5 	.word	0x000085a5

000126e0 <mqtt_connect>:
   126e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   126e2:	1c04      	adds	r4, r0, #0
   126e4:	b089      	sub	sp, #36	; 0x24
   126e6:	1c0d      	adds	r5, r1, #0
   126e8:	2800      	cmp	r0, #0
   126ea:	d051      	beq.n	12790 <mqtt_connect+0xb0>
   126ec:	2900      	cmp	r1, #0
   126ee:	d04f      	beq.n	12790 <mqtt_connect+0xb0>
   126f0:	1c08      	adds	r0, r1, #0
   126f2:	4b39      	ldr	r3, [pc, #228]	; (127d8 <mqtt_connect+0xf8>)
   126f4:	4798      	blx	r3
   126f6:	2840      	cmp	r0, #64	; 0x40
   126f8:	d84c      	bhi.n	12794 <mqtt_connect+0xb4>
   126fa:	1c21      	adds	r1, r4, #0
   126fc:	3143      	adds	r1, #67	; 0x43
   126fe:	780b      	ldrb	r3, [r1, #0]
   12700:	9101      	str	r1, [sp, #4]
   12702:	07db      	lsls	r3, r3, #31
   12704:	0fd9      	lsrs	r1, r3, #31
   12706:	466a      	mov	r2, sp
   12708:	b2ce      	uxtb	r6, r1
   1270a:	1ce0      	adds	r0, r4, #3
   1270c:	7211      	strb	r1, [r2, #8]
   1270e:	2e00      	cmp	r6, #0
   12710:	d142      	bne.n	12798 <mqtt_connect+0xb8>
   12712:	2701      	movs	r7, #1
   12714:	1c29      	adds	r1, r5, #0
   12716:	4b31      	ldr	r3, [pc, #196]	; (127dc <mqtt_connect+0xfc>)
   12718:	8027      	strh	r7, [r4, #0]
   1271a:	4798      	blx	r3
   1271c:	9a01      	ldr	r2, [sp, #4]
   1271e:	2002      	movs	r0, #2
   12720:	7813      	ldrb	r3, [r2, #0]
   12722:	9901      	ldr	r1, [sp, #4]
   12724:	43bb      	bics	r3, r7
   12726:	4383      	bics	r3, r0
   12728:	22e3      	movs	r2, #227	; 0xe3
   1272a:	4013      	ands	r3, r2
   1272c:	466a      	mov	r2, sp
   1272e:	700b      	strb	r3, [r1, #0]
   12730:	7a12      	ldrb	r2, [r2, #8]
   12732:	1c23      	adds	r3, r4, #0
   12734:	3348      	adds	r3, #72	; 0x48
   12736:	6466      	str	r6, [r4, #68]	; 0x44
   12738:	701a      	strb	r2, [r3, #0]
   1273a:	7c9a      	ldrb	r2, [r3, #18]
   1273c:	805e      	strh	r6, [r3, #2]
   1273e:	1e53      	subs	r3, r2, #1
   12740:	419a      	sbcs	r2, r3
   12742:	b2d2      	uxtb	r2, r2
   12744:	1c39      	adds	r1, r7, #0
   12746:	4b26      	ldr	r3, [pc, #152]	; (127e0 <mqtt_connect+0x100>)
   12748:	4798      	blx	r3
   1274a:	70a0      	strb	r0, [r4, #2]
   1274c:	2800      	cmp	r0, #0
   1274e:	db25      	blt.n	1279c <mqtt_connect+0xbc>
   12750:	4b24      	ldr	r3, [pc, #144]	; (127e4 <mqtt_connect+0x104>)
   12752:	0080      	lsls	r0, r0, #2
   12754:	50c4      	str	r4, [r0, r3]
   12756:	1c2b      	adds	r3, r5, #0
   12758:	781f      	ldrb	r7, [r3, #0]
   1275a:	2f00      	cmp	r7, #0
   1275c:	d026      	beq.n	127ac <mqtt_connect+0xcc>
   1275e:	2220      	movs	r2, #32
   12760:	1c39      	adds	r1, r7, #0
   12762:	4391      	bics	r1, r2
   12764:	1c0a      	adds	r2, r1, #0
   12766:	3a41      	subs	r2, #65	; 0x41
   12768:	b2d2      	uxtb	r2, r2
   1276a:	3301      	adds	r3, #1
   1276c:	2a05      	cmp	r2, #5
   1276e:	d90d      	bls.n	1278c <mqtt_connect+0xac>
   12770:	2f3a      	cmp	r7, #58	; 0x3a
   12772:	d00b      	beq.n	1278c <mqtt_connect+0xac>
   12774:	2f2f      	cmp	r7, #47	; 0x2f
   12776:	d009      	beq.n	1278c <mqtt_connect+0xac>
   12778:	2f2e      	cmp	r7, #46	; 0x2e
   1277a:	d102      	bne.n	12782 <mqtt_connect+0xa2>
   1277c:	2e00      	cmp	r6, #0
   1277e:	d0eb      	beq.n	12758 <mqtt_connect+0x78>
   12780:	e00f      	b.n	127a2 <mqtt_connect+0xc2>
   12782:	2230      	movs	r2, #48	; 0x30
   12784:	4017      	ands	r7, r2
   12786:	4297      	cmp	r7, r2
   12788:	d0e6      	beq.n	12758 <mqtt_connect+0x78>
   1278a:	e00a      	b.n	127a2 <mqtt_connect+0xc2>
   1278c:	2601      	movs	r6, #1
   1278e:	e7e3      	b.n	12758 <mqtt_connect+0x78>
   12790:	2016      	movs	r0, #22
   12792:	e004      	b.n	1279e <mqtt_connect+0xbe>
   12794:	205b      	movs	r0, #91	; 0x5b
   12796:	e002      	b.n	1279e <mqtt_connect+0xbe>
   12798:	2078      	movs	r0, #120	; 0x78
   1279a:	e000      	b.n	1279e <mqtt_connect+0xbe>
   1279c:	201c      	movs	r0, #28
   1279e:	4240      	negs	r0, r0
   127a0:	e017      	b.n	127d2 <mqtt_connect+0xf2>
   127a2:	1c28      	adds	r0, r5, #0
   127a4:	4b10      	ldr	r3, [pc, #64]	; (127e8 <mqtt_connect+0x108>)
   127a6:	4798      	blx	r3
   127a8:	2000      	movs	r0, #0
   127aa:	e012      	b.n	127d2 <mqtt_connect+0xf2>
   127ac:	466a      	mov	r2, sp
   127ae:	2302      	movs	r3, #2
   127b0:	8213      	strh	r3, [r2, #16]
   127b2:	1c23      	adds	r3, r4, #0
   127b4:	3358      	adds	r3, #88	; 0x58
   127b6:	881b      	ldrh	r3, [r3, #0]
   127b8:	1c28      	adds	r0, r5, #0
   127ba:	ba5b      	rev16	r3, r3
   127bc:	8253      	strh	r3, [r2, #18]
   127be:	4b0b      	ldr	r3, [pc, #44]	; (127ec <mqtt_connect+0x10c>)
   127c0:	4798      	blx	r3
   127c2:	9005      	str	r0, [sp, #20]
   127c4:	2002      	movs	r0, #2
   127c6:	5620      	ldrsb	r0, [r4, r0]
   127c8:	a904      	add	r1, sp, #16
   127ca:	2210      	movs	r2, #16
   127cc:	4b08      	ldr	r3, [pc, #32]	; (127f0 <mqtt_connect+0x110>)
   127ce:	4798      	blx	r3
   127d0:	1c38      	adds	r0, r7, #0
   127d2:	b009      	add	sp, #36	; 0x24
   127d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   127d6:	46c0      	nop			; (mov r8, r8)
   127d8:	000141af 	.word	0x000141af
   127dc:	00014165 	.word	0x00014165
   127e0:	00008395 	.word	0x00008395
   127e4:	200002a4 	.word	0x200002a4
   127e8:	00008be1 	.word	0x00008be1
   127ec:	00008ad9 	.word	0x00008ad9
   127f0:	000085a5 	.word	0x000085a5

000127f4 <mqtt_connect_broker>:
   127f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   127f6:	b095      	sub	sp, #84	; 0x54
   127f8:	af02      	add	r7, sp, #8
   127fa:	617b      	str	r3, [r7, #20]
   127fc:	1c3b      	adds	r3, r7, #0
   127fe:	3370      	adds	r3, #112	; 0x70
   12800:	781b      	ldrb	r3, [r3, #0]
   12802:	1c05      	adds	r5, r0, #0
   12804:	60fb      	str	r3, [r7, #12]
   12806:	1c3b      	adds	r3, r7, #0
   12808:	3374      	adds	r3, #116	; 0x74
   1280a:	781b      	ldrb	r3, [r3, #0]
   1280c:	6139      	str	r1, [r7, #16]
   1280e:	61fa      	str	r2, [r7, #28]
   12810:	60bb      	str	r3, [r7, #8]
   12812:	2800      	cmp	r0, #0
   12814:	d101      	bne.n	1281a <mqtt_connect_broker+0x26>
   12816:	2016      	movs	r0, #22
   12818:	e129      	b.n	12a6e <mqtt_connect_broker+0x27a>
   1281a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1281c:	4668      	mov	r0, sp
   1281e:	3307      	adds	r3, #7
   12820:	08db      	lsrs	r3, r3, #3
   12822:	00db      	lsls	r3, r3, #3
   12824:	1ac0      	subs	r0, r0, r3
   12826:	4685      	mov	sp, r0
   12828:	ac02      	add	r4, sp, #8
   1282a:	607c      	str	r4, [r7, #4]
   1282c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
   1282e:	2c00      	cmp	r4, #0
   12830:	d0f1      	beq.n	12816 <mqtt_connect_broker+0x22>
   12832:	1c2b      	adds	r3, r5, #0
   12834:	3343      	adds	r3, #67	; 0x43
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	07d8      	lsls	r0, r3, #31
   1283a:	d400      	bmi.n	1283e <mqtt_connect_broker+0x4a>
   1283c:	e112      	b.n	12a64 <mqtt_connect_broker+0x270>
   1283e:	079a      	lsls	r2, r3, #30
   12840:	d500      	bpl.n	12844 <mqtt_connect_broker+0x50>
   12842:	e111      	b.n	12a68 <mqtt_connect_broker+0x274>
   12844:	071c      	lsls	r4, r3, #28
   12846:	d40b      	bmi.n	12860 <mqtt_connect_broker+0x6c>
   12848:	4e8b      	ldr	r6, [pc, #556]	; (12a78 <mqtt_connect_broker+0x284>)
   1284a:	6e38      	ldr	r0, [r7, #96]	; 0x60
   1284c:	47b0      	blx	r6
   1284e:	1c03      	adds	r3, r0, #0
   12850:	61b8      	str	r0, [r7, #24]
   12852:	69f8      	ldr	r0, [r7, #28]
   12854:	330e      	adds	r3, #14
   12856:	1c34      	adds	r4, r6, #0
   12858:	2800      	cmp	r0, #0
   1285a:	d113      	bne.n	12884 <mqtt_connect_broker+0x90>
   1285c:	1c1e      	adds	r6, r3, #0
   1285e:	e01d      	b.n	1289c <mqtt_connect_broker+0xa8>
   12860:	1c2b      	adds	r3, r5, #0
   12862:	3370      	adds	r3, #112	; 0x70
   12864:	781b      	ldrb	r3, [r3, #0]
   12866:	2b00      	cmp	r3, #0
   12868:	d000      	beq.n	1286c <mqtt_connect_broker+0x78>
   1286a:	e0ff      	b.n	12a6c <mqtt_connect_broker+0x278>
   1286c:	1c2b      	adds	r3, r5, #0
   1286e:	3343      	adds	r3, #67	; 0x43
   12870:	781b      	ldrb	r3, [r3, #0]
   12872:	071a      	lsls	r2, r3, #28
   12874:	d5e8      	bpl.n	12848 <mqtt_connect_broker+0x54>
   12876:	4b81      	ldr	r3, [pc, #516]	; (12a7c <mqtt_connect_broker+0x288>)
   12878:	2000      	movs	r0, #0
   1287a:	4798      	blx	r3
   1287c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   1287e:	4b80      	ldr	r3, [pc, #512]	; (12a80 <mqtt_connect_broker+0x28c>)
   12880:	4798      	blx	r3
   12882:	e7f3      	b.n	1286c <mqtt_connect_broker+0x78>
   12884:	69f8      	ldr	r0, [r7, #28]
   12886:	47b0      	blx	r6
   12888:	69be      	ldr	r6, [r7, #24]
   1288a:	697b      	ldr	r3, [r7, #20]
   1288c:	3610      	adds	r6, #16
   1288e:	1836      	adds	r6, r6, r0
   12890:	2b00      	cmp	r3, #0
   12892:	d003      	beq.n	1289c <mqtt_connect_broker+0xa8>
   12894:	1c18      	adds	r0, r3, #0
   12896:	47a0      	blx	r4
   12898:	3602      	adds	r6, #2
   1289a:	1836      	adds	r6, r6, r0
   1289c:	6e78      	ldr	r0, [r7, #100]	; 0x64
   1289e:	2800      	cmp	r0, #0
   128a0:	d007      	beq.n	128b2 <mqtt_connect_broker+0xbe>
   128a2:	47a0      	blx	r4
   128a4:	3602      	adds	r6, #2
   128a6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
   128a8:	1830      	adds	r0, r6, r0
   128aa:	1906      	adds	r6, r0, r4
   128ac:	2c00      	cmp	r4, #0
   128ae:	d100      	bne.n	128b2 <mqtt_connect_broker+0xbe>
   128b0:	1c06      	adds	r6, r0, #0
   128b2:	69fc      	ldr	r4, [r7, #28]
   128b4:	2c00      	cmp	r4, #0
   128b6:	d006      	beq.n	128c6 <mqtt_connect_broker+0xd2>
   128b8:	24c0      	movs	r4, #192	; 0xc0
   128ba:	61bc      	str	r4, [r7, #24]
   128bc:	697c      	ldr	r4, [r7, #20]
   128be:	2c00      	cmp	r4, #0
   128c0:	d103      	bne.n	128ca <mqtt_connect_broker+0xd6>
   128c2:	2480      	movs	r4, #128	; 0x80
   128c4:	e000      	b.n	128c8 <mqtt_connect_broker+0xd4>
   128c6:	69fc      	ldr	r4, [r7, #28]
   128c8:	61bc      	str	r4, [r7, #24]
   128ca:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   128cc:	2c00      	cmp	r4, #0
   128ce:	d00f      	beq.n	128f0 <mqtt_connect_broker+0xfc>
   128d0:	68bc      	ldr	r4, [r7, #8]
   128d2:	2c00      	cmp	r4, #0
   128d4:	d003      	beq.n	128de <mqtt_connect_broker+0xea>
   128d6:	69bc      	ldr	r4, [r7, #24]
   128d8:	2320      	movs	r3, #32
   128da:	431c      	orrs	r4, r3
   128dc:	61bc      	str	r4, [r7, #24]
   128de:	68fc      	ldr	r4, [r7, #12]
   128e0:	2303      	movs	r3, #3
   128e2:	4023      	ands	r3, r4
   128e4:	00db      	lsls	r3, r3, #3
   128e6:	69bc      	ldr	r4, [r7, #24]
   128e8:	2204      	movs	r2, #4
   128ea:	4313      	orrs	r3, r2
   128ec:	431c      	orrs	r4, r3
   128ee:	61bc      	str	r4, [r7, #24]
   128f0:	693c      	ldr	r4, [r7, #16]
   128f2:	2c00      	cmp	r4, #0
   128f4:	d003      	beq.n	128fe <mqtt_connect_broker+0x10a>
   128f6:	69bc      	ldr	r4, [r7, #24]
   128f8:	2302      	movs	r3, #2
   128fa:	431c      	orrs	r4, r3
   128fc:	61bc      	str	r4, [r7, #24]
   128fe:	1c2b      	adds	r3, r5, #0
   12900:	3343      	adds	r3, #67	; 0x43
   12902:	781a      	ldrb	r2, [r3, #0]
   12904:	2108      	movs	r1, #8
   12906:	430a      	orrs	r2, r1
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	1c38      	adds	r0, r7, #0
   1290c:	9500      	str	r5, [sp, #0]
   1290e:	3020      	adds	r0, #32
   12910:	6879      	ldr	r1, [r7, #4]
   12912:	4b5c      	ldr	r3, [pc, #368]	; (12a84 <mqtt_connect_broker+0x290>)
   12914:	6eea      	ldr	r2, [r5, #108]	; 0x6c
   12916:	4c5c      	ldr	r4, [pc, #368]	; (12a88 <mqtt_connect_broker+0x294>)
   12918:	47a0      	blx	r4
   1291a:	1c38      	adds	r0, r7, #0
   1291c:	3020      	adds	r0, #32
   1291e:	2110      	movs	r1, #16
   12920:	4b5a      	ldr	r3, [pc, #360]	; (12a8c <mqtt_connect_broker+0x298>)
   12922:	4798      	blx	r3
   12924:	2e80      	cmp	r6, #128	; 0x80
   12926:	dd09      	ble.n	1293c <mqtt_connect_broker+0x148>
   12928:	2180      	movs	r1, #128	; 0x80
   1292a:	4249      	negs	r1, r1
   1292c:	4331      	orrs	r1, r6
   1292e:	1c38      	adds	r0, r7, #0
   12930:	b249      	sxtb	r1, r1
   12932:	3020      	adds	r0, #32
   12934:	4c55      	ldr	r4, [pc, #340]	; (12a8c <mqtt_connect_broker+0x298>)
   12936:	47a0      	blx	r4
   12938:	11f6      	asrs	r6, r6, #7
   1293a:	e7f3      	b.n	12924 <mqtt_connect_broker+0x130>
   1293c:	4b54      	ldr	r3, [pc, #336]	; (12a90 <mqtt_connect_broker+0x29c>)
   1293e:	401e      	ands	r6, r3
   12940:	d504      	bpl.n	1294c <mqtt_connect_broker+0x158>
   12942:	2380      	movs	r3, #128	; 0x80
   12944:	3e01      	subs	r6, #1
   12946:	425b      	negs	r3, r3
   12948:	431e      	orrs	r6, r3
   1294a:	3601      	adds	r6, #1
   1294c:	1c38      	adds	r0, r7, #0
   1294e:	b271      	sxtb	r1, r6
   12950:	3020      	adds	r0, #32
   12952:	4c4e      	ldr	r4, [pc, #312]	; (12a8c <mqtt_connect_broker+0x298>)
   12954:	47a0      	blx	r4
   12956:	1c38      	adds	r0, r7, #0
   12958:	4c4e      	ldr	r4, [pc, #312]	; (12a94 <mqtt_connect_broker+0x2a0>)
   1295a:	3020      	adds	r0, #32
   1295c:	2106      	movs	r1, #6
   1295e:	47a0      	blx	r4
   12960:	1c38      	adds	r0, r7, #0
   12962:	4b4d      	ldr	r3, [pc, #308]	; (12a98 <mqtt_connect_broker+0x2a4>)
   12964:	3020      	adds	r0, #32
   12966:	494d      	ldr	r1, [pc, #308]	; (12a9c <mqtt_connect_broker+0x2a8>)
   12968:	2206      	movs	r2, #6
   1296a:	4798      	blx	r3
   1296c:	1c38      	adds	r0, r7, #0
   1296e:	3020      	adds	r0, #32
   12970:	2103      	movs	r1, #3
   12972:	4a46      	ldr	r2, [pc, #280]	; (12a8c <mqtt_connect_broker+0x298>)
   12974:	4790      	blx	r2
   12976:	69bb      	ldr	r3, [r7, #24]
   12978:	1c38      	adds	r0, r7, #0
   1297a:	4a44      	ldr	r2, [pc, #272]	; (12a8c <mqtt_connect_broker+0x298>)
   1297c:	b259      	sxtb	r1, r3
   1297e:	3020      	adds	r0, #32
   12980:	4790      	blx	r2
   12982:	1c2b      	adds	r3, r5, #0
   12984:	3360      	adds	r3, #96	; 0x60
   12986:	2000      	movs	r0, #0
   12988:	5e19      	ldrsh	r1, [r3, r0]
   1298a:	1c38      	adds	r0, r7, #0
   1298c:	3020      	adds	r0, #32
   1298e:	47a0      	blx	r4
   12990:	4e39      	ldr	r6, [pc, #228]	; (12a78 <mqtt_connect_broker+0x284>)
   12992:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12994:	47b0      	blx	r6
   12996:	b201      	sxth	r1, r0
   12998:	1c38      	adds	r0, r7, #0
   1299a:	3020      	adds	r0, #32
   1299c:	47a0      	blx	r4
   1299e:	6e38      	ldr	r0, [r7, #96]	; 0x60
   129a0:	47b0      	blx	r6
   129a2:	1c02      	adds	r2, r0, #0
   129a4:	1c38      	adds	r0, r7, #0
   129a6:	3020      	adds	r0, #32
   129a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
   129aa:	4b3b      	ldr	r3, [pc, #236]	; (12a98 <mqtt_connect_broker+0x2a4>)
   129ac:	4798      	blx	r3
   129ae:	6e78      	ldr	r0, [r7, #100]	; 0x64
   129b0:	2800      	cmp	r0, #0
   129b2:	d015      	beq.n	129e0 <mqtt_connect_broker+0x1ec>
   129b4:	47b0      	blx	r6
   129b6:	b201      	sxth	r1, r0
   129b8:	1c38      	adds	r0, r7, #0
   129ba:	3020      	adds	r0, #32
   129bc:	47a0      	blx	r4
   129be:	6e78      	ldr	r0, [r7, #100]	; 0x64
   129c0:	47b0      	blx	r6
   129c2:	1c02      	adds	r2, r0, #0
   129c4:	1c38      	adds	r0, r7, #0
   129c6:	4c34      	ldr	r4, [pc, #208]	; (12a98 <mqtt_connect_broker+0x2a4>)
   129c8:	3020      	adds	r0, #32
   129ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
   129cc:	47a0      	blx	r4
   129ce:	6ebc      	ldr	r4, [r7, #104]	; 0x68
   129d0:	2c00      	cmp	r4, #0
   129d2:	d005      	beq.n	129e0 <mqtt_connect_broker+0x1ec>
   129d4:	1c38      	adds	r0, r7, #0
   129d6:	1c21      	adds	r1, r4, #0
   129d8:	3020      	adds	r0, #32
   129da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   129dc:	4c2e      	ldr	r4, [pc, #184]	; (12a98 <mqtt_connect_broker+0x2a4>)
   129de:	47a0      	blx	r4
   129e0:	69fc      	ldr	r4, [r7, #28]
   129e2:	2c00      	cmp	r4, #0
   129e4:	d01f      	beq.n	12a26 <mqtt_connect_broker+0x232>
   129e6:	4e24      	ldr	r6, [pc, #144]	; (12a78 <mqtt_connect_broker+0x284>)
   129e8:	1c20      	adds	r0, r4, #0
   129ea:	47b0      	blx	r6
   129ec:	b201      	sxth	r1, r0
   129ee:	1c38      	adds	r0, r7, #0
   129f0:	3020      	adds	r0, #32
   129f2:	4c28      	ldr	r4, [pc, #160]	; (12a94 <mqtt_connect_broker+0x2a0>)
   129f4:	47a0      	blx	r4
   129f6:	69f8      	ldr	r0, [r7, #28]
   129f8:	47b0      	blx	r6
   129fa:	1c02      	adds	r2, r0, #0
   129fc:	1c38      	adds	r0, r7, #0
   129fe:	3020      	adds	r0, #32
   12a00:	69f9      	ldr	r1, [r7, #28]
   12a02:	4c25      	ldr	r4, [pc, #148]	; (12a98 <mqtt_connect_broker+0x2a4>)
   12a04:	47a0      	blx	r4
   12a06:	6978      	ldr	r0, [r7, #20]
   12a08:	2800      	cmp	r0, #0
   12a0a:	d00c      	beq.n	12a26 <mqtt_connect_broker+0x232>
   12a0c:	47b0      	blx	r6
   12a0e:	b201      	sxth	r1, r0
   12a10:	1c38      	adds	r0, r7, #0
   12a12:	4a20      	ldr	r2, [pc, #128]	; (12a94 <mqtt_connect_broker+0x2a0>)
   12a14:	3020      	adds	r0, #32
   12a16:	4790      	blx	r2
   12a18:	6978      	ldr	r0, [r7, #20]
   12a1a:	47b0      	blx	r6
   12a1c:	1c02      	adds	r2, r0, #0
   12a1e:	1c38      	adds	r0, r7, #0
   12a20:	3020      	adds	r0, #32
   12a22:	6979      	ldr	r1, [r7, #20]
   12a24:	47a0      	blx	r4
   12a26:	1c38      	adds	r0, r7, #0
   12a28:	1c2c      	adds	r4, r5, #0
   12a2a:	3020      	adds	r0, #32
   12a2c:	4b1c      	ldr	r3, [pc, #112]	; (12aa0 <mqtt_connect_broker+0x2ac>)
   12a2e:	3443      	adds	r4, #67	; 0x43
   12a30:	4798      	blx	r3
   12a32:	7821      	ldrb	r1, [r4, #0]
   12a34:	0789      	lsls	r1, r1, #30
   12a36:	0fc9      	lsrs	r1, r1, #31
   12a38:	2901      	cmp	r1, #1
   12a3a:	d10b      	bne.n	12a54 <mqtt_connect_broker+0x260>
   12a3c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   12a3e:	2a00      	cmp	r2, #0
   12a40:	d108      	bne.n	12a54 <mqtt_connect_broker+0x260>
   12a42:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   12a44:	2b00      	cmp	r3, #0
   12a46:	d005      	beq.n	12a54 <mqtt_connect_broker+0x260>
   12a48:	2034      	movs	r0, #52	; 0x34
   12a4a:	55c2      	strb	r2, [r0, r7]
   12a4c:	1c3a      	adds	r2, r7, #0
   12a4e:	1c28      	adds	r0, r5, #0
   12a50:	3234      	adds	r2, #52	; 0x34
   12a52:	4798      	blx	r3
   12a54:	7823      	ldrb	r3, [r4, #0]
   12a56:	2202      	movs	r2, #2
   12a58:	4313      	orrs	r3, r2
   12a5a:	2208      	movs	r2, #8
   12a5c:	4393      	bics	r3, r2
   12a5e:	7023      	strb	r3, [r4, #0]
   12a60:	2000      	movs	r0, #0
   12a62:	e005      	b.n	12a70 <mqtt_connect_broker+0x27c>
   12a64:	2080      	movs	r0, #128	; 0x80
   12a66:	e002      	b.n	12a6e <mqtt_connect_broker+0x27a>
   12a68:	2078      	movs	r0, #120	; 0x78
   12a6a:	e000      	b.n	12a6e <mqtt_connect_broker+0x27a>
   12a6c:	200b      	movs	r0, #11
   12a6e:	4240      	negs	r0, r0
   12a70:	46bd      	mov	sp, r7
   12a72:	b013      	add	sp, #76	; 0x4c
   12a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	000141af 	.word	0x000141af
   12a7c:	000052bd 	.word	0x000052bd
   12a80:	0000d209 	.word	0x0000d209
   12a84:	00012515 	.word	0x00012515
   12a88:	0000cdf9 	.word	0x0000cdf9
   12a8c:	0000ce2d 	.word	0x0000ce2d
   12a90:	8000007f 	.word	0x8000007f
   12a94:	0000ce79 	.word	0x0000ce79
   12a98:	0000ceb9 	.word	0x0000ceb9
   12a9c:	0001aeb5 	.word	0x0001aeb5
   12aa0:	0000cef5 	.word	0x0000cef5

00012aa4 <mqtt_publish>:
   12aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   12aa6:	b093      	sub	sp, #76	; 0x4c
   12aa8:	af02      	add	r7, sp, #8
   12aaa:	60fb      	str	r3, [r7, #12]
   12aac:	1c3b      	adds	r3, r7, #0
   12aae:	3358      	adds	r3, #88	; 0x58
   12ab0:	781b      	ldrb	r3, [r3, #0]
   12ab2:	1c04      	adds	r4, r0, #0
   12ab4:	613b      	str	r3, [r7, #16]
   12ab6:	1c3b      	adds	r3, r7, #0
   12ab8:	335c      	adds	r3, #92	; 0x5c
   12aba:	781b      	ldrb	r3, [r3, #0]
   12abc:	6179      	str	r1, [r7, #20]
   12abe:	60ba      	str	r2, [r7, #8]
   12ac0:	607b      	str	r3, [r7, #4]
   12ac2:	2800      	cmp	r0, #0
   12ac4:	d101      	bne.n	12aca <mqtt_publish+0x26>
   12ac6:	2516      	movs	r5, #22
   12ac8:	e0a7      	b.n	12c1a <mqtt_publish+0x176>
   12aca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   12acc:	466a      	mov	r2, sp
   12ace:	3307      	adds	r3, #7
   12ad0:	08db      	lsrs	r3, r3, #3
   12ad2:	00db      	lsls	r3, r3, #3
   12ad4:	1ad2      	subs	r2, r2, r3
   12ad6:	697b      	ldr	r3, [r7, #20]
   12ad8:	4695      	mov	sp, r2
   12ada:	ae02      	add	r6, sp, #8
   12adc:	2b00      	cmp	r3, #0
   12ade:	d0f2      	beq.n	12ac6 <mqtt_publish+0x22>
   12ae0:	693a      	ldr	r2, [r7, #16]
   12ae2:	2a02      	cmp	r2, #2
   12ae4:	d8ef      	bhi.n	12ac6 <mqtt_publish+0x22>
   12ae6:	1c05      	adds	r5, r0, #0
   12ae8:	3543      	adds	r5, #67	; 0x43
   12aea:	782b      	ldrb	r3, [r5, #0]
   12aec:	079a      	lsls	r2, r3, #30
   12aee:	d400      	bmi.n	12af2 <mqtt_publish+0x4e>
   12af0:	e090      	b.n	12c14 <mqtt_publish+0x170>
   12af2:	071a      	lsls	r2, r3, #28
   12af4:	d40a      	bmi.n	12b0c <mqtt_publish+0x68>
   12af6:	4b4b      	ldr	r3, [pc, #300]	; (12c24 <mqtt_publish+0x180>)
   12af8:	6978      	ldr	r0, [r7, #20]
   12afa:	4798      	blx	r3
   12afc:	68fd      	ldr	r5, [r7, #12]
   12afe:	693b      	ldr	r3, [r7, #16]
   12b00:	3502      	adds	r5, #2
   12b02:	182d      	adds	r5, r5, r0
   12b04:	2b00      	cmp	r3, #0
   12b06:	d011      	beq.n	12b2c <mqtt_publish+0x88>
   12b08:	3502      	adds	r5, #2
   12b0a:	e00f      	b.n	12b2c <mqtt_publish+0x88>
   12b0c:	1c03      	adds	r3, r0, #0
   12b0e:	3370      	adds	r3, #112	; 0x70
   12b10:	781b      	ldrb	r3, [r3, #0]
   12b12:	2b00      	cmp	r3, #0
   12b14:	d000      	beq.n	12b18 <mqtt_publish+0x74>
   12b16:	e07f      	b.n	12c18 <mqtt_publish+0x174>
   12b18:	782b      	ldrb	r3, [r5, #0]
   12b1a:	071a      	lsls	r2, r3, #28
   12b1c:	d5eb      	bpl.n	12af6 <mqtt_publish+0x52>
   12b1e:	4b42      	ldr	r3, [pc, #264]	; (12c28 <mqtt_publish+0x184>)
   12b20:	2000      	movs	r0, #0
   12b22:	4798      	blx	r3
   12b24:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   12b26:	4b41      	ldr	r3, [pc, #260]	; (12c2c <mqtt_publish+0x188>)
   12b28:	4798      	blx	r3
   12b2a:	e7f5      	b.n	12b18 <mqtt_publish+0x74>
   12b2c:	1c23      	adds	r3, r4, #0
   12b2e:	3343      	adds	r3, #67	; 0x43
   12b30:	781a      	ldrb	r2, [r3, #0]
   12b32:	2108      	movs	r1, #8
   12b34:	430a      	orrs	r2, r1
   12b36:	701a      	strb	r2, [r3, #0]
   12b38:	1c38      	adds	r0, r7, #0
   12b3a:	9400      	str	r4, [sp, #0]
   12b3c:	1c31      	adds	r1, r6, #0
   12b3e:	302c      	adds	r0, #44	; 0x2c
   12b40:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   12b42:	4b3b      	ldr	r3, [pc, #236]	; (12c30 <mqtt_publish+0x18c>)
   12b44:	4e3b      	ldr	r6, [pc, #236]	; (12c34 <mqtt_publish+0x190>)
   12b46:	47b0      	blx	r6
   12b48:	687b      	ldr	r3, [r7, #4]
   12b4a:	2101      	movs	r1, #1
   12b4c:	4019      	ands	r1, r3
   12b4e:	2330      	movs	r3, #48	; 0x30
   12b50:	4319      	orrs	r1, r3
   12b52:	693b      	ldr	r3, [r7, #16]
   12b54:	1c38      	adds	r0, r7, #0
   12b56:	005a      	lsls	r2, r3, #1
   12b58:	2306      	movs	r3, #6
   12b5a:	4013      	ands	r3, r2
   12b5c:	4319      	orrs	r1, r3
   12b5e:	302c      	adds	r0, #44	; 0x2c
   12b60:	4b35      	ldr	r3, [pc, #212]	; (12c38 <mqtt_publish+0x194>)
   12b62:	4798      	blx	r3
   12b64:	4b34      	ldr	r3, [pc, #208]	; (12c38 <mqtt_publish+0x194>)
   12b66:	2d80      	cmp	r5, #128	; 0x80
   12b68:	dd08      	ble.n	12b7c <mqtt_publish+0xd8>
   12b6a:	2180      	movs	r1, #128	; 0x80
   12b6c:	4249      	negs	r1, r1
   12b6e:	4329      	orrs	r1, r5
   12b70:	1c38      	adds	r0, r7, #0
   12b72:	b249      	sxtb	r1, r1
   12b74:	302c      	adds	r0, #44	; 0x2c
   12b76:	4798      	blx	r3
   12b78:	11ed      	asrs	r5, r5, #7
   12b7a:	e7f3      	b.n	12b64 <mqtt_publish+0xc0>
   12b7c:	4a2f      	ldr	r2, [pc, #188]	; (12c3c <mqtt_publish+0x198>)
   12b7e:	4015      	ands	r5, r2
   12b80:	d504      	bpl.n	12b8c <mqtt_publish+0xe8>
   12b82:	2280      	movs	r2, #128	; 0x80
   12b84:	3d01      	subs	r5, #1
   12b86:	4252      	negs	r2, r2
   12b88:	4315      	orrs	r5, r2
   12b8a:	3501      	adds	r5, #1
   12b8c:	1c38      	adds	r0, r7, #0
   12b8e:	b269      	sxtb	r1, r5
   12b90:	302c      	adds	r0, #44	; 0x2c
   12b92:	4798      	blx	r3
   12b94:	4e23      	ldr	r6, [pc, #140]	; (12c24 <mqtt_publish+0x180>)
   12b96:	6978      	ldr	r0, [r7, #20]
   12b98:	47b0      	blx	r6
   12b9a:	b201      	sxth	r1, r0
   12b9c:	1c38      	adds	r0, r7, #0
   12b9e:	302c      	adds	r0, #44	; 0x2c
   12ba0:	4d27      	ldr	r5, [pc, #156]	; (12c40 <mqtt_publish+0x19c>)
   12ba2:	47a8      	blx	r5
   12ba4:	6978      	ldr	r0, [r7, #20]
   12ba6:	47b0      	blx	r6
   12ba8:	1c02      	adds	r2, r0, #0
   12baa:	1c38      	adds	r0, r7, #0
   12bac:	302c      	adds	r0, #44	; 0x2c
   12bae:	6979      	ldr	r1, [r7, #20]
   12bb0:	4e24      	ldr	r6, [pc, #144]	; (12c44 <mqtt_publish+0x1a0>)
   12bb2:	47b0      	blx	r6
   12bb4:	693a      	ldr	r2, [r7, #16]
   12bb6:	2a00      	cmp	r2, #0
   12bb8:	d006      	beq.n	12bc8 <mqtt_publish+0x124>
   12bba:	8821      	ldrh	r1, [r4, #0]
   12bbc:	1c38      	adds	r0, r7, #0
   12bbe:	1c4b      	adds	r3, r1, #1
   12bc0:	8023      	strh	r3, [r4, #0]
   12bc2:	b209      	sxth	r1, r1
   12bc4:	302c      	adds	r0, #44	; 0x2c
   12bc6:	47a8      	blx	r5
   12bc8:	8823      	ldrh	r3, [r4, #0]
   12bca:	2b00      	cmp	r3, #0
   12bcc:	d101      	bne.n	12bd2 <mqtt_publish+0x12e>
   12bce:	2301      	movs	r3, #1
   12bd0:	8023      	strh	r3, [r4, #0]
   12bd2:	68bb      	ldr	r3, [r7, #8]
   12bd4:	2b00      	cmp	r3, #0
   12bd6:	d006      	beq.n	12be6 <mqtt_publish+0x142>
   12bd8:	68fa      	ldr	r2, [r7, #12]
   12bda:	2a00      	cmp	r2, #0
   12bdc:	d003      	beq.n	12be6 <mqtt_publish+0x142>
   12bde:	1c38      	adds	r0, r7, #0
   12be0:	302c      	adds	r0, #44	; 0x2c
   12be2:	1c19      	adds	r1, r3, #0
   12be4:	47b0      	blx	r6
   12be6:	1c38      	adds	r0, r7, #0
   12be8:	4b17      	ldr	r3, [pc, #92]	; (12c48 <mqtt_publish+0x1a4>)
   12bea:	302c      	adds	r0, #44	; 0x2c
   12bec:	4798      	blx	r3
   12bee:	1c23      	adds	r3, r4, #0
   12bf0:	3343      	adds	r3, #67	; 0x43
   12bf2:	781a      	ldrb	r2, [r3, #0]
   12bf4:	2108      	movs	r1, #8
   12bf6:	438a      	bics	r2, r1
   12bf8:	701a      	strb	r2, [r3, #0]
   12bfa:	693b      	ldr	r3, [r7, #16]
   12bfc:	2500      	movs	r5, #0
   12bfe:	42ab      	cmp	r3, r5
   12c00:	d10c      	bne.n	12c1c <mqtt_publish+0x178>
   12c02:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12c04:	42ab      	cmp	r3, r5
   12c06:	d009      	beq.n	12c1c <mqtt_publish+0x178>
   12c08:	1c3a      	adds	r2, r7, #0
   12c0a:	1c20      	adds	r0, r4, #0
   12c0c:	2102      	movs	r1, #2
   12c0e:	3218      	adds	r2, #24
   12c10:	4798      	blx	r3
   12c12:	e003      	b.n	12c1c <mqtt_publish+0x178>
   12c14:	2580      	movs	r5, #128	; 0x80
   12c16:	e000      	b.n	12c1a <mqtt_publish+0x176>
   12c18:	250b      	movs	r5, #11
   12c1a:	426d      	negs	r5, r5
   12c1c:	1c28      	adds	r0, r5, #0
   12c1e:	46bd      	mov	sp, r7
   12c20:	b011      	add	sp, #68	; 0x44
   12c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c24:	000141af 	.word	0x000141af
   12c28:	000052bd 	.word	0x000052bd
   12c2c:	0000d209 	.word	0x0000d209
   12c30:	00012515 	.word	0x00012515
   12c34:	0000cdf9 	.word	0x0000cdf9
   12c38:	0000ce2d 	.word	0x0000ce2d
   12c3c:	8000007f 	.word	0x8000007f
   12c40:	0000ce79 	.word	0x0000ce79
   12c44:	0000ceb9 	.word	0x0000ceb9
   12c48:	0000cef5 	.word	0x0000cef5

00012c4c <mqtt_subscribe>:
   12c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c4e:	b08d      	sub	sp, #52	; 0x34
   12c50:	af02      	add	r7, sp, #8
   12c52:	1c04      	adds	r4, r0, #0
   12c54:	60b9      	str	r1, [r7, #8]
   12c56:	607a      	str	r2, [r7, #4]
   12c58:	d101      	bne.n	12c5e <mqtt_subscribe+0x12>
   12c5a:	2016      	movs	r0, #22
   12c5c:	e086      	b.n	12d6c <mqtt_subscribe+0x120>
   12c5e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   12c60:	466a      	mov	r2, sp
   12c62:	3307      	adds	r3, #7
   12c64:	08db      	lsrs	r3, r3, #3
   12c66:	00db      	lsls	r3, r3, #3
   12c68:	1ad2      	subs	r2, r2, r3
   12c6a:	4695      	mov	sp, r2
   12c6c:	ad02      	add	r5, sp, #8
   12c6e:	603d      	str	r5, [r7, #0]
   12c70:	68bd      	ldr	r5, [r7, #8]
   12c72:	2d00      	cmp	r5, #0
   12c74:	d0f1      	beq.n	12c5a <mqtt_subscribe+0xe>
   12c76:	687d      	ldr	r5, [r7, #4]
   12c78:	2d02      	cmp	r5, #2
   12c7a:	d8ee      	bhi.n	12c5a <mqtt_subscribe+0xe>
   12c7c:	1c05      	adds	r5, r0, #0
   12c7e:	3543      	adds	r5, #67	; 0x43
   12c80:	782b      	ldrb	r3, [r5, #0]
   12c82:	079a      	lsls	r2, r3, #30
   12c84:	d56f      	bpl.n	12d66 <mqtt_subscribe+0x11a>
   12c86:	071a      	lsls	r2, r3, #28
   12c88:	d41a      	bmi.n	12cc0 <mqtt_subscribe+0x74>
   12c8a:	68b8      	ldr	r0, [r7, #8]
   12c8c:	4d39      	ldr	r5, [pc, #228]	; (12d74 <mqtt_subscribe+0x128>)
   12c8e:	47a8      	blx	r5
   12c90:	1c25      	adds	r5, r4, #0
   12c92:	3543      	adds	r5, #67	; 0x43
   12c94:	782b      	ldrb	r3, [r5, #0]
   12c96:	2208      	movs	r2, #8
   12c98:	4313      	orrs	r3, r2
   12c9a:	702b      	strb	r3, [r5, #0]
   12c9c:	60fd      	str	r5, [r7, #12]
   12c9e:	1d46      	adds	r6, r0, #5
   12ca0:	9400      	str	r4, [sp, #0]
   12ca2:	1c38      	adds	r0, r7, #0
   12ca4:	3014      	adds	r0, #20
   12ca6:	6839      	ldr	r1, [r7, #0]
   12ca8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   12caa:	4b33      	ldr	r3, [pc, #204]	; (12d78 <mqtt_subscribe+0x12c>)
   12cac:	4d33      	ldr	r5, [pc, #204]	; (12d7c <mqtt_subscribe+0x130>)
   12cae:	47a8      	blx	r5
   12cb0:	1c38      	adds	r0, r7, #0
   12cb2:	217e      	movs	r1, #126	; 0x7e
   12cb4:	3014      	adds	r0, #20
   12cb6:	4249      	negs	r1, r1
   12cb8:	4b31      	ldr	r3, [pc, #196]	; (12d80 <mqtt_subscribe+0x134>)
   12cba:	4798      	blx	r3
   12cbc:	4d2d      	ldr	r5, [pc, #180]	; (12d74 <mqtt_subscribe+0x128>)
   12cbe:	e00e      	b.n	12cde <mqtt_subscribe+0x92>
   12cc0:	1c03      	adds	r3, r0, #0
   12cc2:	3370      	adds	r3, #112	; 0x70
   12cc4:	781b      	ldrb	r3, [r3, #0]
   12cc6:	2b00      	cmp	r3, #0
   12cc8:	d14f      	bne.n	12d6a <mqtt_subscribe+0x11e>
   12cca:	782b      	ldrb	r3, [r5, #0]
   12ccc:	071a      	lsls	r2, r3, #28
   12cce:	d5dc      	bpl.n	12c8a <mqtt_subscribe+0x3e>
   12cd0:	4b2c      	ldr	r3, [pc, #176]	; (12d84 <mqtt_subscribe+0x138>)
   12cd2:	2000      	movs	r0, #0
   12cd4:	4798      	blx	r3
   12cd6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   12cd8:	4b2b      	ldr	r3, [pc, #172]	; (12d88 <mqtt_subscribe+0x13c>)
   12cda:	4798      	blx	r3
   12cdc:	e7f5      	b.n	12cca <mqtt_subscribe+0x7e>
   12cde:	4b28      	ldr	r3, [pc, #160]	; (12d80 <mqtt_subscribe+0x134>)
   12ce0:	2e80      	cmp	r6, #128	; 0x80
   12ce2:	dd08      	ble.n	12cf6 <mqtt_subscribe+0xaa>
   12ce4:	2180      	movs	r1, #128	; 0x80
   12ce6:	4249      	negs	r1, r1
   12ce8:	4331      	orrs	r1, r6
   12cea:	1c38      	adds	r0, r7, #0
   12cec:	b249      	sxtb	r1, r1
   12cee:	3014      	adds	r0, #20
   12cf0:	4798      	blx	r3
   12cf2:	11f6      	asrs	r6, r6, #7
   12cf4:	e7f3      	b.n	12cde <mqtt_subscribe+0x92>
   12cf6:	4925      	ldr	r1, [pc, #148]	; (12d8c <mqtt_subscribe+0x140>)
   12cf8:	4031      	ands	r1, r6
   12cfa:	d504      	bpl.n	12d06 <mqtt_subscribe+0xba>
   12cfc:	2280      	movs	r2, #128	; 0x80
   12cfe:	3901      	subs	r1, #1
   12d00:	4252      	negs	r2, r2
   12d02:	4311      	orrs	r1, r2
   12d04:	3101      	adds	r1, #1
   12d06:	1c38      	adds	r0, r7, #0
   12d08:	b249      	sxtb	r1, r1
   12d0a:	3014      	adds	r0, #20
   12d0c:	4798      	blx	r3
   12d0e:	8821      	ldrh	r1, [r4, #0]
   12d10:	1c38      	adds	r0, r7, #0
   12d12:	1c4b      	adds	r3, r1, #1
   12d14:	8023      	strh	r3, [r4, #0]
   12d16:	b209      	sxth	r1, r1
   12d18:	3014      	adds	r0, #20
   12d1a:	4e1d      	ldr	r6, [pc, #116]	; (12d90 <mqtt_subscribe+0x144>)
   12d1c:	47b0      	blx	r6
   12d1e:	8823      	ldrh	r3, [r4, #0]
   12d20:	2b00      	cmp	r3, #0
   12d22:	d101      	bne.n	12d28 <mqtt_subscribe+0xdc>
   12d24:	2301      	movs	r3, #1
   12d26:	8023      	strh	r3, [r4, #0]
   12d28:	68b8      	ldr	r0, [r7, #8]
   12d2a:	47a8      	blx	r5
   12d2c:	b201      	sxth	r1, r0
   12d2e:	1c38      	adds	r0, r7, #0
   12d30:	3014      	adds	r0, #20
   12d32:	47b0      	blx	r6
   12d34:	68b8      	ldr	r0, [r7, #8]
   12d36:	47a8      	blx	r5
   12d38:	1c02      	adds	r2, r0, #0
   12d3a:	1c38      	adds	r0, r7, #0
   12d3c:	3014      	adds	r0, #20
   12d3e:	68b9      	ldr	r1, [r7, #8]
   12d40:	4b14      	ldr	r3, [pc, #80]	; (12d94 <mqtt_subscribe+0x148>)
   12d42:	4798      	blx	r3
   12d44:	687d      	ldr	r5, [r7, #4]
   12d46:	1c38      	adds	r0, r7, #0
   12d48:	b269      	sxtb	r1, r5
   12d4a:	3014      	adds	r0, #20
   12d4c:	4b0c      	ldr	r3, [pc, #48]	; (12d80 <mqtt_subscribe+0x134>)
   12d4e:	4798      	blx	r3
   12d50:	1c38      	adds	r0, r7, #0
   12d52:	3014      	adds	r0, #20
   12d54:	4b10      	ldr	r3, [pc, #64]	; (12d98 <mqtt_subscribe+0x14c>)
   12d56:	4798      	blx	r3
   12d58:	68fd      	ldr	r5, [r7, #12]
   12d5a:	2208      	movs	r2, #8
   12d5c:	782b      	ldrb	r3, [r5, #0]
   12d5e:	2000      	movs	r0, #0
   12d60:	4393      	bics	r3, r2
   12d62:	702b      	strb	r3, [r5, #0]
   12d64:	e003      	b.n	12d6e <mqtt_subscribe+0x122>
   12d66:	2080      	movs	r0, #128	; 0x80
   12d68:	e000      	b.n	12d6c <mqtt_subscribe+0x120>
   12d6a:	200b      	movs	r0, #11
   12d6c:	4240      	negs	r0, r0
   12d6e:	46bd      	mov	sp, r7
   12d70:	b00b      	add	sp, #44	; 0x2c
   12d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d74:	000141af 	.word	0x000141af
   12d78:	00012515 	.word	0x00012515
   12d7c:	0000cdf9 	.word	0x0000cdf9
   12d80:	0000ce2d 	.word	0x0000ce2d
   12d84:	000052bd 	.word	0x000052bd
   12d88:	0000d209 	.word	0x0000d209
   12d8c:	8000007f 	.word	0x8000007f
   12d90:	0000ce79 	.word	0x0000ce79
   12d94:	0000ceb9 	.word	0x0000ceb9
   12d98:	0000cef5 	.word	0x0000cef5

00012d9c <_mqtt_ping>:
   12d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12d9e:	23c0      	movs	r3, #192	; 0xc0
   12da0:	a901      	add	r1, sp, #4
   12da2:	2500      	movs	r5, #0
   12da4:	700b      	strb	r3, [r1, #0]
   12da6:	704d      	strb	r5, [r1, #1]
   12da8:	42a8      	cmp	r0, r5
   12daa:	d019      	beq.n	12de0 <_mqtt_ping+0x44>
   12dac:	1c04      	adds	r4, r0, #0
   12dae:	3443      	adds	r4, #67	; 0x43
   12db0:	7823      	ldrb	r3, [r4, #0]
   12db2:	079a      	lsls	r2, r3, #30
   12db4:	d516      	bpl.n	12de4 <_mqtt_ping+0x48>
   12db6:	071a      	lsls	r2, r3, #28
   12db8:	d416      	bmi.n	12de8 <_mqtt_ping+0x4c>
   12dba:	2608      	movs	r6, #8
   12dbc:	4333      	orrs	r3, r6
   12dbe:	7023      	strb	r3, [r4, #0]
   12dc0:	7880      	ldrb	r0, [r0, #2]
   12dc2:	1c2b      	adds	r3, r5, #0
   12dc4:	b240      	sxtb	r0, r0
   12dc6:	2202      	movs	r2, #2
   12dc8:	4f09      	ldr	r7, [pc, #36]	; (12df0 <_mqtt_ping+0x54>)
   12dca:	47b8      	blx	r7
   12dcc:	1c2b      	adds	r3, r5, #0
   12dce:	42a8      	cmp	r0, r5
   12dd0:	da0c      	bge.n	12dec <_mqtt_ping+0x50>
   12dd2:	7823      	ldrb	r3, [r4, #0]
   12dd4:	43b3      	bics	r3, r6
   12dd6:	7023      	strb	r3, [r4, #0]
   12dd8:	4b06      	ldr	r3, [pc, #24]	; (12df4 <_mqtt_ping+0x58>)
   12dda:	4798      	blx	r3
   12ddc:	1c03      	adds	r3, r0, #0
   12dde:	e005      	b.n	12dec <_mqtt_ping+0x50>
   12de0:	2316      	movs	r3, #22
   12de2:	e002      	b.n	12dea <_mqtt_ping+0x4e>
   12de4:	2380      	movs	r3, #128	; 0x80
   12de6:	e000      	b.n	12dea <_mqtt_ping+0x4e>
   12de8:	230b      	movs	r3, #11
   12dea:	425b      	negs	r3, r3
   12dec:	1c18      	adds	r0, r3, #0
   12dee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12df0:	000086b9 	.word	0x000086b9
   12df4:	000124c5 	.word	0x000124c5

00012df8 <mqtt_timer_callback>:
   12df8:	b570      	push	{r4, r5, r6, lr}
   12dfa:	1c05      	adds	r5, r0, #0
   12dfc:	b086      	sub	sp, #24
   12dfe:	1c0e      	adds	r6, r1, #0
   12e00:	1c14      	adds	r4, r2, #0
   12e02:	2800      	cmp	r0, #0
   12e04:	d012      	beq.n	12e2c <mqtt_timer_callback+0x34>
   12e06:	2a00      	cmp	r2, #0
   12e08:	d010      	beq.n	12e2c <mqtt_timer_callback+0x34>
   12e0a:	1c10      	adds	r0, r2, #0
   12e0c:	4b08      	ldr	r3, [pc, #32]	; (12e30 <mqtt_timer_callback+0x38>)
   12e0e:	4798      	blx	r3
   12e10:	2800      	cmp	r0, #0
   12e12:	da04      	bge.n	12e1e <mqtt_timer_callback+0x26>
   12e14:	1c28      	adds	r0, r5, #0
   12e16:	1c31      	adds	r1, r6, #0
   12e18:	2200      	movs	r2, #0
   12e1a:	4b06      	ldr	r3, [pc, #24]	; (12e34 <mqtt_timer_callback+0x3c>)
   12e1c:	e005      	b.n	12e2a <mqtt_timer_callback+0x32>
   12e1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12e20:	2b00      	cmp	r3, #0
   12e22:	d003      	beq.n	12e2c <mqtt_timer_callback+0x34>
   12e24:	1c20      	adds	r0, r4, #0
   12e26:	2107      	movs	r1, #7
   12e28:	aa01      	add	r2, sp, #4
   12e2a:	4798      	blx	r3
   12e2c:	b006      	add	sp, #24
   12e2e:	bd70      	pop	{r4, r5, r6, pc}
   12e30:	00012d9d 	.word	0x00012d9d
   12e34:	0000d18d 	.word	0x0000d18d

00012e38 <_mqtt_puback>:
   12e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12e3a:	2302      	movs	r3, #2
   12e3c:	ac01      	add	r4, sp, #4
   12e3e:	2700      	movs	r7, #0
   12e40:	7063      	strb	r3, [r4, #1]
   12e42:	42b8      	cmp	r0, r7
   12e44:	d01e      	beq.n	12e84 <_mqtt_puback+0x4c>
   12e46:	1c05      	adds	r5, r0, #0
   12e48:	3543      	adds	r5, #67	; 0x43
   12e4a:	782b      	ldrb	r3, [r5, #0]
   12e4c:	079e      	lsls	r6, r3, #30
   12e4e:	d51b      	bpl.n	12e88 <_mqtt_puback+0x50>
   12e50:	071e      	lsls	r6, r3, #28
   12e52:	d41b      	bmi.n	12e8c <_mqtt_puback+0x54>
   12e54:	2608      	movs	r6, #8
   12e56:	4333      	orrs	r3, r6
   12e58:	702b      	strb	r3, [r5, #0]
   12e5a:	7880      	ldrb	r0, [r0, #2]
   12e5c:	7021      	strb	r1, [r4, #0]
   12e5e:	0a11      	lsrs	r1, r2, #8
   12e60:	70a1      	strb	r1, [r4, #2]
   12e62:	70e2      	strb	r2, [r4, #3]
   12e64:	1c21      	adds	r1, r4, #0
   12e66:	1c3b      	adds	r3, r7, #0
   12e68:	b240      	sxtb	r0, r0
   12e6a:	2204      	movs	r2, #4
   12e6c:	4c09      	ldr	r4, [pc, #36]	; (12e94 <_mqtt_puback+0x5c>)
   12e6e:	47a0      	blx	r4
   12e70:	1c3b      	adds	r3, r7, #0
   12e72:	42b8      	cmp	r0, r7
   12e74:	da0c      	bge.n	12e90 <_mqtt_puback+0x58>
   12e76:	782b      	ldrb	r3, [r5, #0]
   12e78:	43b3      	bics	r3, r6
   12e7a:	702b      	strb	r3, [r5, #0]
   12e7c:	4b06      	ldr	r3, [pc, #24]	; (12e98 <_mqtt_puback+0x60>)
   12e7e:	4798      	blx	r3
   12e80:	1c03      	adds	r3, r0, #0
   12e82:	e005      	b.n	12e90 <_mqtt_puback+0x58>
   12e84:	2316      	movs	r3, #22
   12e86:	e002      	b.n	12e8e <_mqtt_puback+0x56>
   12e88:	2380      	movs	r3, #128	; 0x80
   12e8a:	e000      	b.n	12e8e <_mqtt_puback+0x56>
   12e8c:	230b      	movs	r3, #11
   12e8e:	425b      	negs	r3, r3
   12e90:	1c18      	adds	r0, r3, #0
   12e92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12e94:	000086b9 	.word	0x000086b9
   12e98:	000124c5 	.word	0x000124c5

00012e9c <mqtt_clear_conn>:
   12e9c:	b530      	push	{r4, r5, lr}
   12e9e:	1c04      	adds	r4, r0, #0
   12ea0:	b087      	sub	sp, #28
   12ea2:	2800      	cmp	r0, #0
   12ea4:	d01c      	beq.n	12ee0 <mqtt_clear_conn+0x44>
   12ea6:	2002      	movs	r0, #2
   12ea8:	4b0e      	ldr	r3, [pc, #56]	; (12ee4 <mqtt_clear_conn+0x48>)
   12eaa:	5620      	ldrsb	r0, [r4, r0]
   12eac:	4798      	blx	r3
   12eae:	1c23      	adds	r3, r4, #0
   12eb0:	3343      	adds	r3, #67	; 0x43
   12eb2:	781a      	ldrb	r2, [r3, #0]
   12eb4:	21fc      	movs	r1, #252	; 0xfc
   12eb6:	0795      	lsls	r5, r2, #30
   12eb8:	400a      	ands	r2, r1
   12eba:	701a      	strb	r2, [r3, #0]
   12ebc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   12ebe:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   12ec0:	9301      	str	r3, [sp, #4]
   12ec2:	2300      	movs	r3, #0
   12ec4:	64e3      	str	r3, [r4, #76]	; 0x4c
   12ec6:	6d21      	ldr	r1, [r4, #80]	; 0x50
   12ec8:	4b07      	ldr	r3, [pc, #28]	; (12ee8 <mqtt_clear_conn+0x4c>)
   12eca:	4798      	blx	r3
   12ecc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12ece:	0fed      	lsrs	r5, r5, #31
   12ed0:	2b00      	cmp	r3, #0
   12ed2:	d005      	beq.n	12ee0 <mqtt_clear_conn+0x44>
   12ed4:	2d00      	cmp	r5, #0
   12ed6:	d003      	beq.n	12ee0 <mqtt_clear_conn+0x44>
   12ed8:	1c20      	adds	r0, r4, #0
   12eda:	2105      	movs	r1, #5
   12edc:	aa01      	add	r2, sp, #4
   12ede:	4798      	blx	r3
   12ee0:	b007      	add	sp, #28
   12ee2:	bd30      	pop	{r4, r5, pc}
   12ee4:	0000899d 	.word	0x0000899d
   12ee8:	0000d1dd 	.word	0x0000d1dd

00012eec <mqtt_disconnect>:
   12eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12eee:	23e0      	movs	r3, #224	; 0xe0
   12ef0:	ae01      	add	r6, sp, #4
   12ef2:	2700      	movs	r7, #0
   12ef4:	1c05      	adds	r5, r0, #0
   12ef6:	7033      	strb	r3, [r6, #0]
   12ef8:	7077      	strb	r7, [r6, #1]
   12efa:	42b8      	cmp	r0, r7
   12efc:	d036      	beq.n	12f6c <mqtt_disconnect+0x80>
   12efe:	1c04      	adds	r4, r0, #0
   12f00:	3443      	adds	r4, #67	; 0x43
   12f02:	7823      	ldrb	r3, [r4, #0]
   12f04:	079a      	lsls	r2, r3, #30
   12f06:	d533      	bpl.n	12f70 <mqtt_disconnect+0x84>
   12f08:	42b9      	cmp	r1, r7
   12f0a:	d12b      	bne.n	12f64 <mqtt_disconnect+0x78>
   12f0c:	071a      	lsls	r2, r3, #28
   12f0e:	d414      	bmi.n	12f3a <mqtt_disconnect+0x4e>
   12f10:	7823      	ldrb	r3, [r4, #0]
   12f12:	2210      	movs	r2, #16
   12f14:	4313      	orrs	r3, r2
   12f16:	2708      	movs	r7, #8
   12f18:	433b      	orrs	r3, r7
   12f1a:	7023      	strb	r3, [r4, #0]
   12f1c:	2002      	movs	r0, #2
   12f1e:	5628      	ldrsb	r0, [r5, r0]
   12f20:	1c31      	adds	r1, r6, #0
   12f22:	2202      	movs	r2, #2
   12f24:	2300      	movs	r3, #0
   12f26:	4d15      	ldr	r5, [pc, #84]	; (12f7c <mqtt_disconnect+0x90>)
   12f28:	47a8      	blx	r5
   12f2a:	2800      	cmp	r0, #0
   12f2c:	da14      	bge.n	12f58 <mqtt_disconnect+0x6c>
   12f2e:	7823      	ldrb	r3, [r4, #0]
   12f30:	43bb      	bics	r3, r7
   12f32:	7023      	strb	r3, [r4, #0]
   12f34:	4b12      	ldr	r3, [pc, #72]	; (12f80 <mqtt_disconnect+0x94>)
   12f36:	4798      	blx	r3
   12f38:	e01e      	b.n	12f78 <mqtt_disconnect+0x8c>
   12f3a:	1c03      	adds	r3, r0, #0
   12f3c:	3370      	adds	r3, #112	; 0x70
   12f3e:	781b      	ldrb	r3, [r3, #0]
   12f40:	2b00      	cmp	r3, #0
   12f42:	d117      	bne.n	12f74 <mqtt_disconnect+0x88>
   12f44:	7823      	ldrb	r3, [r4, #0]
   12f46:	071a      	lsls	r2, r3, #28
   12f48:	d5e2      	bpl.n	12f10 <mqtt_disconnect+0x24>
   12f4a:	4b0e      	ldr	r3, [pc, #56]	; (12f84 <mqtt_disconnect+0x98>)
   12f4c:	2000      	movs	r0, #0
   12f4e:	4798      	blx	r3
   12f50:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   12f52:	4b0d      	ldr	r3, [pc, #52]	; (12f88 <mqtt_disconnect+0x9c>)
   12f54:	4798      	blx	r3
   12f56:	e7f5      	b.n	12f44 <mqtt_disconnect+0x58>
   12f58:	7823      	ldrb	r3, [r4, #0]
   12f5a:	2202      	movs	r2, #2
   12f5c:	4393      	bics	r3, r2
   12f5e:	7023      	strb	r3, [r4, #0]
   12f60:	2000      	movs	r0, #0
   12f62:	e009      	b.n	12f78 <mqtt_disconnect+0x8c>
   12f64:	4b09      	ldr	r3, [pc, #36]	; (12f8c <mqtt_disconnect+0xa0>)
   12f66:	4798      	blx	r3
   12f68:	1c38      	adds	r0, r7, #0
   12f6a:	e005      	b.n	12f78 <mqtt_disconnect+0x8c>
   12f6c:	2016      	movs	r0, #22
   12f6e:	e002      	b.n	12f76 <mqtt_disconnect+0x8a>
   12f70:	2080      	movs	r0, #128	; 0x80
   12f72:	e000      	b.n	12f76 <mqtt_disconnect+0x8a>
   12f74:	200b      	movs	r0, #11
   12f76:	4240      	negs	r0, r0
   12f78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12f7a:	46c0      	nop			; (mov r8, r8)
   12f7c:	000086b9 	.word	0x000086b9
   12f80:	000124c5 	.word	0x000124c5
   12f84:	000052bd 	.word	0x000052bd
   12f88:	0000d209 	.word	0x0000d209
   12f8c:	00012e9d 	.word	0x00012e9d

00012f90 <_mqtt_recv_handler>:
   12f90:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f92:	1c04      	adds	r4, r0, #0
   12f94:	6e40      	ldr	r0, [r0, #100]	; 0x64
   12f96:	230f      	movs	r3, #15
   12f98:	7802      	ldrb	r2, [r0, #0]
   12f9a:	b087      	sub	sp, #28
   12f9c:	1c15      	adds	r5, r2, #0
   12f9e:	439d      	bics	r5, r3
   12fa0:	2d50      	cmp	r5, #80	; 0x50
   12fa2:	d100      	bne.n	12fa6 <_mqtt_recv_handler+0x16>
   12fa4:	e098      	b.n	130d8 <_mqtt_recv_handler+0x148>
   12fa6:	d808      	bhi.n	12fba <_mqtt_recv_handler+0x2a>
   12fa8:	2d30      	cmp	r5, #48	; 0x30
   12faa:	d03f      	beq.n	1302c <_mqtt_recv_handler+0x9c>
   12fac:	2d40      	cmp	r5, #64	; 0x40
   12fae:	d100      	bne.n	12fb2 <_mqtt_recv_handler+0x22>
   12fb0:	e0b3      	b.n	1311a <_mqtt_recv_handler+0x18a>
   12fb2:	2d20      	cmp	r5, #32
   12fb4:	d000      	beq.n	12fb8 <_mqtt_recv_handler+0x28>
   12fb6:	e0c3      	b.n	13140 <_mqtt_recv_handler+0x1b0>
   12fb8:	e00e      	b.n	12fd8 <_mqtt_recv_handler+0x48>
   12fba:	2d70      	cmp	r5, #112	; 0x70
   12fbc:	d100      	bne.n	12fc0 <_mqtt_recv_handler+0x30>
   12fbe:	e0ac      	b.n	1311a <_mqtt_recv_handler+0x18a>
   12fc0:	d803      	bhi.n	12fca <_mqtt_recv_handler+0x3a>
   12fc2:	2d60      	cmp	r5, #96	; 0x60
   12fc4:	d100      	bne.n	12fc8 <_mqtt_recv_handler+0x38>
   12fc6:	e096      	b.n	130f6 <_mqtt_recv_handler+0x166>
   12fc8:	e0ba      	b.n	13140 <_mqtt_recv_handler+0x1b0>
   12fca:	2d90      	cmp	r5, #144	; 0x90
   12fcc:	d100      	bne.n	12fd0 <_mqtt_recv_handler+0x40>
   12fce:	e0aa      	b.n	13126 <_mqtt_recv_handler+0x196>
   12fd0:	2db0      	cmp	r5, #176	; 0xb0
   12fd2:	d100      	bne.n	12fd6 <_mqtt_recv_handler+0x46>
   12fd4:	e0ad      	b.n	13132 <_mqtt_recv_handler+0x1a2>
   12fd6:	e0b3      	b.n	13140 <_mqtt_recv_handler+0x1b0>
   12fd8:	aa01      	add	r2, sp, #4
   12fda:	2303      	movs	r3, #3
   12fdc:	2901      	cmp	r1, #1
   12fde:	d900      	bls.n	12fe2 <_mqtt_recv_handler+0x52>
   12fe0:	78c3      	ldrb	r3, [r0, #3]
   12fe2:	7013      	strb	r3, [r2, #0]
   12fe4:	7813      	ldrb	r3, [r2, #0]
   12fe6:	2b00      	cmp	r3, #0
   12fe8:	d00d      	beq.n	13006 <_mqtt_recv_handler+0x76>
   12fea:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12fec:	2b00      	cmp	r3, #0
   12fee:	d002      	beq.n	12ff6 <_mqtt_recv_handler+0x66>
   12ff0:	1c20      	adds	r0, r4, #0
   12ff2:	2101      	movs	r1, #1
   12ff4:	4798      	blx	r3
   12ff6:	236f      	movs	r3, #111	; 0x6f
   12ff8:	425b      	negs	r3, r3
   12ffa:	64e3      	str	r3, [r4, #76]	; 0x4c
   12ffc:	1c20      	adds	r0, r4, #0
   12ffe:	2100      	movs	r1, #0
   13000:	4b50      	ldr	r3, [pc, #320]	; (13144 <_mqtt_recv_handler+0x1b4>)
   13002:	4798      	blx	r3
   13004:	e09c      	b.n	13140 <_mqtt_recv_handler+0x1b0>
   13006:	1c23      	adds	r3, r4, #0
   13008:	3343      	adds	r3, #67	; 0x43
   1300a:	7819      	ldrb	r1, [r3, #0]
   1300c:	0789      	lsls	r1, r1, #30
   1300e:	0fc9      	lsrs	r1, r1, #31
   13010:	d105      	bne.n	1301e <_mqtt_recv_handler+0x8e>
   13012:	781a      	ldrb	r2, [r3, #0]
   13014:	64e1      	str	r1, [r4, #76]	; 0x4c
   13016:	2102      	movs	r1, #2
   13018:	430a      	orrs	r2, r1
   1301a:	701a      	strb	r2, [r3, #0]
   1301c:	e090      	b.n	13140 <_mqtt_recv_handler+0x1b0>
   1301e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   13020:	2b00      	cmp	r3, #0
   13022:	d100      	bne.n	13026 <_mqtt_recv_handler+0x96>
   13024:	e08c      	b.n	13140 <_mqtt_recv_handler+0x1b0>
   13026:	1c20      	adds	r0, r4, #0
   13028:	2101      	movs	r1, #1
   1302a:	e088      	b.n	1313e <_mqtt_recv_handler+0x1ae>
   1302c:	ad01      	add	r5, sp, #4
   1302e:	0713      	lsls	r3, r2, #28
   13030:	7c2a      	ldrb	r2, [r5, #16]
   13032:	0fdb      	lsrs	r3, r3, #31
   13034:	2604      	movs	r6, #4
   13036:	009b      	lsls	r3, r3, #2
   13038:	43b2      	bics	r2, r6
   1303a:	431a      	orrs	r2, r3
   1303c:	742a      	strb	r2, [r5, #16]
   1303e:	7807      	ldrb	r7, [r0, #0]
   13040:	2303      	movs	r3, #3
   13042:	b2d2      	uxtb	r2, r2
   13044:	087f      	lsrs	r7, r7, #1
   13046:	439a      	bics	r2, r3
   13048:	401f      	ands	r7, r3
   1304a:	1c13      	adds	r3, r2, #0
   1304c:	433b      	orrs	r3, r7
   1304e:	742b      	strb	r3, [r5, #16]
   13050:	1c43      	adds	r3, r0, #1
   13052:	7818      	ldrb	r0, [r3, #0]
   13054:	1c5a      	adds	r2, r3, #1
   13056:	287f      	cmp	r0, #127	; 0x7f
   13058:	d901      	bls.n	1305e <_mqtt_recv_handler+0xce>
   1305a:	1c13      	adds	r3, r2, #0
   1305c:	e7f9      	b.n	13052 <_mqtt_recv_handler+0xc2>
   1305e:	7858      	ldrb	r0, [r3, #1]
   13060:	789e      	ldrb	r6, [r3, #2]
   13062:	0200      	lsls	r0, r0, #8
   13064:	4330      	orrs	r0, r6
   13066:	3303      	adds	r3, #3
   13068:	2600      	movs	r6, #0
   1306a:	6068      	str	r0, [r5, #4]
   1306c:	9301      	str	r3, [sp, #4]
   1306e:	1818      	adds	r0, r3, r0
   13070:	42b7      	cmp	r7, r6
   13072:	d004      	beq.n	1307e <_mqtt_recv_handler+0xee>
   13074:	7806      	ldrb	r6, [r0, #0]
   13076:	7843      	ldrb	r3, [r0, #1]
   13078:	0236      	lsls	r6, r6, #8
   1307a:	431e      	orrs	r6, r3
   1307c:	3002      	adds	r0, #2
   1307e:	1851      	adds	r1, r2, r1
   13080:	6d63      	ldr	r3, [r4, #84]	; 0x54
   13082:	60a8      	str	r0, [r5, #8]
   13084:	1a08      	subs	r0, r1, r0
   13086:	60e8      	str	r0, [r5, #12]
   13088:	2b00      	cmp	r3, #0
   1308a:	d003      	beq.n	13094 <_mqtt_recv_handler+0x104>
   1308c:	1c20      	adds	r0, r4, #0
   1308e:	2106      	movs	r1, #6
   13090:	1c2a      	adds	r2, r5, #0
   13092:	4798      	blx	r3
   13094:	7c2b      	ldrb	r3, [r5, #16]
   13096:	079b      	lsls	r3, r3, #30
   13098:	0f9b      	lsrs	r3, r3, #30
   1309a:	2b01      	cmp	r3, #1
   1309c:	d10b      	bne.n	130b6 <_mqtt_recv_handler+0x126>
   1309e:	b2b6      	uxth	r6, r6
   130a0:	1c20      	adds	r0, r4, #0
   130a2:	2140      	movs	r1, #64	; 0x40
   130a4:	1c32      	adds	r2, r6, #0
   130a6:	4b28      	ldr	r3, [pc, #160]	; (13148 <_mqtt_recv_handler+0x1b8>)
   130a8:	4798      	blx	r3
   130aa:	2800      	cmp	r0, #0
   130ac:	d048      	beq.n	13140 <_mqtt_recv_handler+0x1b0>
   130ae:	1c23      	adds	r3, r4, #0
   130b0:	3348      	adds	r3, #72	; 0x48
   130b2:	2240      	movs	r2, #64	; 0x40
   130b4:	e00c      	b.n	130d0 <_mqtt_recv_handler+0x140>
   130b6:	2b02      	cmp	r3, #2
   130b8:	d142      	bne.n	13140 <_mqtt_recv_handler+0x1b0>
   130ba:	b2b6      	uxth	r6, r6
   130bc:	1c20      	adds	r0, r4, #0
   130be:	2150      	movs	r1, #80	; 0x50
   130c0:	1c32      	adds	r2, r6, #0
   130c2:	4b21      	ldr	r3, [pc, #132]	; (13148 <_mqtt_recv_handler+0x1b8>)
   130c4:	4798      	blx	r3
   130c6:	2800      	cmp	r0, #0
   130c8:	d03a      	beq.n	13140 <_mqtt_recv_handler+0x1b0>
   130ca:	1c23      	adds	r3, r4, #0
   130cc:	3348      	adds	r3, #72	; 0x48
   130ce:	2250      	movs	r2, #80	; 0x50
   130d0:	344a      	adds	r4, #74	; 0x4a
   130d2:	701a      	strb	r2, [r3, #0]
   130d4:	8026      	strh	r6, [r4, #0]
   130d6:	e033      	b.n	13140 <_mqtt_recv_handler+0x1b0>
   130d8:	7885      	ldrb	r5, [r0, #2]
   130da:	78c3      	ldrb	r3, [r0, #3]
   130dc:	022d      	lsls	r5, r5, #8
   130de:	431d      	orrs	r5, r3
   130e0:	1c20      	adds	r0, r4, #0
   130e2:	2162      	movs	r1, #98	; 0x62
   130e4:	1c2a      	adds	r2, r5, #0
   130e6:	4b18      	ldr	r3, [pc, #96]	; (13148 <_mqtt_recv_handler+0x1b8>)
   130e8:	4798      	blx	r3
   130ea:	2800      	cmp	r0, #0
   130ec:	d028      	beq.n	13140 <_mqtt_recv_handler+0x1b0>
   130ee:	1c23      	adds	r3, r4, #0
   130f0:	3348      	adds	r3, #72	; 0x48
   130f2:	2260      	movs	r2, #96	; 0x60
   130f4:	e00d      	b.n	13112 <_mqtt_recv_handler+0x182>
   130f6:	7885      	ldrb	r5, [r0, #2]
   130f8:	78c3      	ldrb	r3, [r0, #3]
   130fa:	022d      	lsls	r5, r5, #8
   130fc:	431d      	orrs	r5, r3
   130fe:	1c20      	adds	r0, r4, #0
   13100:	2170      	movs	r1, #112	; 0x70
   13102:	1c2a      	adds	r2, r5, #0
   13104:	4b10      	ldr	r3, [pc, #64]	; (13148 <_mqtt_recv_handler+0x1b8>)
   13106:	4798      	blx	r3
   13108:	2800      	cmp	r0, #0
   1310a:	d019      	beq.n	13140 <_mqtt_recv_handler+0x1b0>
   1310c:	1c23      	adds	r3, r4, #0
   1310e:	3348      	adds	r3, #72	; 0x48
   13110:	2270      	movs	r2, #112	; 0x70
   13112:	344a      	adds	r4, #74	; 0x4a
   13114:	701a      	strb	r2, [r3, #0]
   13116:	8025      	strh	r5, [r4, #0]
   13118:	e012      	b.n	13140 <_mqtt_recv_handler+0x1b0>
   1311a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1311c:	2b00      	cmp	r3, #0
   1311e:	d00f      	beq.n	13140 <_mqtt_recv_handler+0x1b0>
   13120:	1c20      	adds	r0, r4, #0
   13122:	2102      	movs	r1, #2
   13124:	e00a      	b.n	1313c <_mqtt_recv_handler+0x1ac>
   13126:	6d63      	ldr	r3, [r4, #84]	; 0x54
   13128:	2b00      	cmp	r3, #0
   1312a:	d009      	beq.n	13140 <_mqtt_recv_handler+0x1b0>
   1312c:	1c20      	adds	r0, r4, #0
   1312e:	2103      	movs	r1, #3
   13130:	e004      	b.n	1313c <_mqtt_recv_handler+0x1ac>
   13132:	6d63      	ldr	r3, [r4, #84]	; 0x54
   13134:	2b00      	cmp	r3, #0
   13136:	d003      	beq.n	13140 <_mqtt_recv_handler+0x1b0>
   13138:	1c20      	adds	r0, r4, #0
   1313a:	2104      	movs	r1, #4
   1313c:	aa01      	add	r2, sp, #4
   1313e:	4798      	blx	r3
   13140:	b007      	add	sp, #28
   13142:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13144:	00012eed 	.word	0x00012eed
   13148:	00012e39 	.word	0x00012e39

0001314c <mqtt_recv_packet>:
   1314c:	b538      	push	{r3, r4, r5, lr}
   1314e:	1e04      	subs	r4, r0, #0
   13150:	d017      	beq.n	13182 <mqtt_recv_packet+0x36>
   13152:	6c42      	ldr	r2, [r0, #68]	; 0x44
   13154:	6e83      	ldr	r3, [r0, #104]	; 0x68
   13156:	429a      	cmp	r2, r3
   13158:	d906      	bls.n	13168 <mqtt_recv_packet+0x1c>
   1315a:	238b      	movs	r3, #139	; 0x8b
   1315c:	425b      	negs	r3, r3
   1315e:	64c3      	str	r3, [r0, #76]	; 0x4c
   13160:	2100      	movs	r1, #0
   13162:	4b08      	ldr	r3, [pc, #32]	; (13184 <mqtt_recv_packet+0x38>)
   13164:	4798      	blx	r3
   13166:	e00c      	b.n	13182 <mqtt_recv_packet+0x36>
   13168:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1316a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1316c:	2002      	movs	r0, #2
   1316e:	1899      	adds	r1, r3, r2
   13170:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   13172:	5620      	ldrsb	r0, [r4, r0]
   13174:	1a9a      	subs	r2, r3, r2
   13176:	b292      	uxth	r2, r2
   13178:	2300      	movs	r3, #0
   1317a:	4d03      	ldr	r5, [pc, #12]	; (13188 <mqtt_recv_packet+0x3c>)
   1317c:	47a8      	blx	r5
   1317e:	2800      	cmp	r0, #0
   13180:	d1f2      	bne.n	13168 <mqtt_recv_packet+0x1c>
   13182:	bd38      	pop	{r3, r4, r5, pc}
   13184:	00012eed 	.word	0x00012eed
   13188:	0000881d 	.word	0x0000881d

0001318c <mqtt_recved_packet>:
   1318c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1318e:	1e04      	subs	r4, r0, #0
   13190:	d042      	beq.n	13218 <mqtt_recved_packet+0x8c>
   13192:	6c63      	ldr	r3, [r4, #68]	; 0x44
   13194:	6e67      	ldr	r7, [r4, #100]	; 0x64
   13196:	18ca      	adds	r2, r1, r3
   13198:	2301      	movs	r3, #1
   1319a:	9701      	str	r7, [sp, #4]
   1319c:	6462      	str	r2, [r4, #68]	; 0x44
   1319e:	2600      	movs	r6, #0
   131a0:	1c1d      	adds	r5, r3, #0
   131a2:	42a9      	cmp	r1, r5
   131a4:	dc03      	bgt.n	131ae <mqtt_recved_packet+0x22>
   131a6:	1c20      	adds	r0, r4, #0
   131a8:	4b1c      	ldr	r3, [pc, #112]	; (1321c <mqtt_recved_packet+0x90>)
   131aa:	4798      	blx	r3
   131ac:	e034      	b.n	13218 <mqtt_recved_packet+0x8c>
   131ae:	9f01      	ldr	r7, [sp, #4]
   131b0:	5d78      	ldrb	r0, [r7, r5]
   131b2:	01df      	lsls	r7, r3, #7
   131b4:	46bc      	mov	ip, r7
   131b6:	2d03      	cmp	r5, #3
   131b8:	d101      	bne.n	131be <mqtt_recved_packet+0x32>
   131ba:	234d      	movs	r3, #77	; 0x4d
   131bc:	e00e      	b.n	131dc <mqtt_recved_packet+0x50>
   131be:	277f      	movs	r7, #127	; 0x7f
   131c0:	4007      	ands	r7, r0
   131c2:	437b      	muls	r3, r7
   131c4:	b240      	sxtb	r0, r0
   131c6:	3501      	adds	r5, #1
   131c8:	18f6      	adds	r6, r6, r3
   131ca:	2800      	cmp	r0, #0
   131cc:	da01      	bge.n	131d2 <mqtt_recved_packet+0x46>
   131ce:	4663      	mov	r3, ip
   131d0:	e7e7      	b.n	131a2 <mqtt_recved_packet+0x16>
   131d2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   131d4:	19af      	adds	r7, r5, r6
   131d6:	429f      	cmp	r7, r3
   131d8:	d907      	bls.n	131ea <mqtt_recved_packet+0x5e>
   131da:	238b      	movs	r3, #139	; 0x8b
   131dc:	425b      	negs	r3, r3
   131de:	64e3      	str	r3, [r4, #76]	; 0x4c
   131e0:	1c20      	adds	r0, r4, #0
   131e2:	2100      	movs	r1, #0
   131e4:	4b0e      	ldr	r3, [pc, #56]	; (13220 <mqtt_recved_packet+0x94>)
   131e6:	4798      	blx	r3
   131e8:	e016      	b.n	13218 <mqtt_recved_packet+0x8c>
   131ea:	42ba      	cmp	r2, r7
   131ec:	d314      	bcc.n	13218 <mqtt_recved_packet+0x8c>
   131ee:	4b0d      	ldr	r3, [pc, #52]	; (13224 <mqtt_recved_packet+0x98>)
   131f0:	1c20      	adds	r0, r4, #0
   131f2:	1c31      	adds	r1, r6, #0
   131f4:	4798      	blx	r3
   131f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   131f8:	42bb      	cmp	r3, r7
   131fa:	d102      	bne.n	13202 <mqtt_recved_packet+0x76>
   131fc:	2300      	movs	r3, #0
   131fe:	6463      	str	r3, [r4, #68]	; 0x44
   13200:	e00a      	b.n	13218 <mqtt_recved_packet+0x8c>
   13202:	1b9e      	subs	r6, r3, r6
   13204:	9b01      	ldr	r3, [sp, #4]
   13206:	1b75      	subs	r5, r6, r5
   13208:	19d9      	adds	r1, r3, r7
   1320a:	1c18      	adds	r0, r3, #0
   1320c:	1c2a      	adds	r2, r5, #0
   1320e:	4b06      	ldr	r3, [pc, #24]	; (13228 <mqtt_recved_packet+0x9c>)
   13210:	4798      	blx	r3
   13212:	6465      	str	r5, [r4, #68]	; 0x44
   13214:	2100      	movs	r1, #0
   13216:	e7bc      	b.n	13192 <mqtt_recved_packet+0x6>
   13218:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1321a:	46c0      	nop			; (mov r8, r8)
   1321c:	0001314d 	.word	0x0001314d
   13220:	00012eed 	.word	0x00012eed
   13224:	00012f91 	.word	0x00012f91
   13228:	000133e7 	.word	0x000133e7

0001322c <mqtt_socket_event_handler>:
   1322c:	b570      	push	{r4, r5, r6, lr}
   1322e:	4d37      	ldr	r5, [pc, #220]	; (1330c <mqtt_socket_event_handler+0xe0>)
   13230:	0086      	lsls	r6, r0, #2
   13232:	5974      	ldr	r4, [r6, r5]
   13234:	b086      	sub	sp, #24
   13236:	2c00      	cmp	r4, #0
   13238:	d066      	beq.n	13308 <mqtt_socket_event_handler+0xdc>
   1323a:	2906      	cmp	r1, #6
   1323c:	d02b      	beq.n	13296 <mqtt_socket_event_handler+0x6a>
   1323e:	2907      	cmp	r1, #7
   13240:	d039      	beq.n	132b6 <mqtt_socket_event_handler+0x8a>
   13242:	2905      	cmp	r1, #5
   13244:	d160      	bne.n	13308 <mqtt_socket_event_handler+0xdc>
   13246:	2001      	movs	r0, #1
   13248:	5610      	ldrsb	r0, [r2, r0]
   1324a:	4b31      	ldr	r3, [pc, #196]	; (13310 <mqtt_socket_event_handler+0xe4>)
   1324c:	4798      	blx	r3
   1324e:	9001      	str	r0, [sp, #4]
   13250:	2800      	cmp	r0, #0
   13252:	da06      	bge.n	13262 <mqtt_socket_event_handler+0x36>
   13254:	2002      	movs	r0, #2
   13256:	4b2f      	ldr	r3, [pc, #188]	; (13314 <mqtt_socket_event_handler+0xe8>)
   13258:	5620      	ldrsb	r0, [r4, r0]
   1325a:	4798      	blx	r3
   1325c:	2300      	movs	r3, #0
   1325e:	5173      	str	r3, [r6, r5]
   13260:	e011      	b.n	13286 <mqtt_socket_event_handler+0x5a>
   13262:	1c23      	adds	r3, r4, #0
   13264:	3343      	adds	r3, #67	; 0x43
   13266:	781a      	ldrb	r2, [r3, #0]
   13268:	2101      	movs	r1, #1
   1326a:	430a      	orrs	r2, r1
   1326c:	701a      	strb	r2, [r3, #0]
   1326e:	331d      	adds	r3, #29
   13270:	881b      	ldrh	r3, [r3, #0]
   13272:	2b00      	cmp	r3, #0
   13274:	d004      	beq.n	13280 <mqtt_socket_event_handler+0x54>
   13276:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   13278:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1327a:	2200      	movs	r2, #0
   1327c:	4b26      	ldr	r3, [pc, #152]	; (13318 <mqtt_socket_event_handler+0xec>)
   1327e:	4798      	blx	r3
   13280:	1c20      	adds	r0, r4, #0
   13282:	4b26      	ldr	r3, [pc, #152]	; (1331c <mqtt_socket_event_handler+0xf0>)
   13284:	4798      	blx	r3
   13286:	6d63      	ldr	r3, [r4, #84]	; 0x54
   13288:	2b00      	cmp	r3, #0
   1328a:	d03d      	beq.n	13308 <mqtt_socket_event_handler+0xdc>
   1328c:	1c20      	adds	r0, r4, #0
   1328e:	2100      	movs	r1, #0
   13290:	aa01      	add	r2, sp, #4
   13292:	4798      	blx	r3
   13294:	e038      	b.n	13308 <mqtt_socket_event_handler+0xdc>
   13296:	2304      	movs	r3, #4
   13298:	5ed1      	ldrsh	r1, [r2, r3]
   1329a:	2900      	cmp	r1, #0
   1329c:	dd03      	ble.n	132a6 <mqtt_socket_event_handler+0x7a>
   1329e:	1c20      	adds	r0, r4, #0
   132a0:	4b1f      	ldr	r3, [pc, #124]	; (13320 <mqtt_socket_event_handler+0xf4>)
   132a2:	4798      	blx	r3
   132a4:	e003      	b.n	132ae <mqtt_socket_event_handler+0x82>
   132a6:	1c0b      	adds	r3, r1, #0
   132a8:	1c08      	adds	r0, r1, #0
   132aa:	330d      	adds	r3, #13
   132ac:	d11a      	bne.n	132e4 <mqtt_socket_event_handler+0xb8>
   132ae:	4b1b      	ldr	r3, [pc, #108]	; (1331c <mqtt_socket_event_handler+0xf0>)
   132b0:	1c20      	adds	r0, r4, #0
   132b2:	4798      	blx	r3
   132b4:	e028      	b.n	13308 <mqtt_socket_event_handler+0xdc>
   132b6:	1c23      	adds	r3, r4, #0
   132b8:	3343      	adds	r3, #67	; 0x43
   132ba:	8810      	ldrh	r0, [r2, #0]
   132bc:	781a      	ldrb	r2, [r3, #0]
   132be:	0751      	lsls	r1, r2, #29
   132c0:	d402      	bmi.n	132c8 <mqtt_socket_event_handler+0x9c>
   132c2:	2108      	movs	r1, #8
   132c4:	438a      	bics	r2, r1
   132c6:	701a      	strb	r2, [r3, #0]
   132c8:	781a      	ldrb	r2, [r3, #0]
   132ca:	2104      	movs	r1, #4
   132cc:	438a      	bics	r2, r1
   132ce:	701a      	strb	r2, [r3, #0]
   132d0:	06d3      	lsls	r3, r2, #27
   132d2:	0fde      	lsrs	r6, r3, #31
   132d4:	b200      	sxth	r0, r0
   132d6:	2b00      	cmp	r3, #0
   132d8:	db02      	blt.n	132e0 <mqtt_socket_event_handler+0xb4>
   132da:	2800      	cmp	r0, #0
   132dc:	da08      	bge.n	132f0 <mqtt_socket_event_handler+0xc4>
   132de:	e001      	b.n	132e4 <mqtt_socket_event_handler+0xb8>
   132e0:	2800      	cmp	r0, #0
   132e2:	da02      	bge.n	132ea <mqtt_socket_event_handler+0xbe>
   132e4:	4b0a      	ldr	r3, [pc, #40]	; (13310 <mqtt_socket_event_handler+0xe4>)
   132e6:	4798      	blx	r3
   132e8:	64e0      	str	r0, [r4, #76]	; 0x4c
   132ea:	1c20      	adds	r0, r4, #0
   132ec:	4b0d      	ldr	r3, [pc, #52]	; (13324 <mqtt_socket_event_handler+0xf8>)
   132ee:	e7e0      	b.n	132b2 <mqtt_socket_event_handler+0x86>
   132f0:	1c25      	adds	r5, r4, #0
   132f2:	3548      	adds	r5, #72	; 0x48
   132f4:	7829      	ldrb	r1, [r5, #0]
   132f6:	2900      	cmp	r1, #0
   132f8:	d006      	beq.n	13308 <mqtt_socket_event_handler+0xdc>
   132fa:	1c23      	adds	r3, r4, #0
   132fc:	334a      	adds	r3, #74	; 0x4a
   132fe:	881a      	ldrh	r2, [r3, #0]
   13300:	1c20      	adds	r0, r4, #0
   13302:	4b09      	ldr	r3, [pc, #36]	; (13328 <mqtt_socket_event_handler+0xfc>)
   13304:	4798      	blx	r3
   13306:	702e      	strb	r6, [r5, #0]
   13308:	b006      	add	sp, #24
   1330a:	bd70      	pop	{r4, r5, r6, pc}
   1330c:	200002a4 	.word	0x200002a4
   13310:	000124c5 	.word	0x000124c5
   13314:	0000899d 	.word	0x0000899d
   13318:	0000d18d 	.word	0x0000d18d
   1331c:	0001314d 	.word	0x0001314d
   13320:	0001318d 	.word	0x0001318d
   13324:	00012e9d 	.word	0x00012e9d
   13328:	00012e39 	.word	0x00012e39

0001332c <atoi>:
   1332c:	b510      	push	{r4, lr}
   1332e:	220a      	movs	r2, #10
   13330:	2100      	movs	r1, #0
   13332:	f000 fff3 	bl	1431c <strtol>
   13336:	bd10      	pop	{r4, pc}

00013338 <__libc_init_array>:
   13338:	b570      	push	{r4, r5, r6, lr}
   1333a:	2600      	movs	r6, #0
   1333c:	4d0c      	ldr	r5, [pc, #48]	; (13370 <__libc_init_array+0x38>)
   1333e:	4c0d      	ldr	r4, [pc, #52]	; (13374 <__libc_init_array+0x3c>)
   13340:	1b64      	subs	r4, r4, r5
   13342:	10a4      	asrs	r4, r4, #2
   13344:	42a6      	cmp	r6, r4
   13346:	d109      	bne.n	1335c <__libc_init_array+0x24>
   13348:	2600      	movs	r6, #0
   1334a:	f007 ffb9 	bl	1b2c0 <_init>
   1334e:	4d0a      	ldr	r5, [pc, #40]	; (13378 <__libc_init_array+0x40>)
   13350:	4c0a      	ldr	r4, [pc, #40]	; (1337c <__libc_init_array+0x44>)
   13352:	1b64      	subs	r4, r4, r5
   13354:	10a4      	asrs	r4, r4, #2
   13356:	42a6      	cmp	r6, r4
   13358:	d105      	bne.n	13366 <__libc_init_array+0x2e>
   1335a:	bd70      	pop	{r4, r5, r6, pc}
   1335c:	00b3      	lsls	r3, r6, #2
   1335e:	58eb      	ldr	r3, [r5, r3]
   13360:	4798      	blx	r3
   13362:	3601      	adds	r6, #1
   13364:	e7ee      	b.n	13344 <__libc_init_array+0xc>
   13366:	00b3      	lsls	r3, r6, #2
   13368:	58eb      	ldr	r3, [r5, r3]
   1336a:	4798      	blx	r3
   1336c:	3601      	adds	r6, #1
   1336e:	e7f2      	b.n	13356 <__libc_init_array+0x1e>
   13370:	0001b2cc 	.word	0x0001b2cc
   13374:	0001b2cc 	.word	0x0001b2cc
   13378:	0001b2cc 	.word	0x0001b2cc
   1337c:	0001b2d0 	.word	0x0001b2d0

00013380 <__locale_ctype_ptr_l>:
   13380:	30ec      	adds	r0, #236	; 0xec
   13382:	6800      	ldr	r0, [r0, #0]
   13384:	4770      	bx	lr
	...

00013388 <malloc>:
   13388:	b510      	push	{r4, lr}
   1338a:	4b03      	ldr	r3, [pc, #12]	; (13398 <malloc+0x10>)
   1338c:	0001      	movs	r1, r0
   1338e:	6818      	ldr	r0, [r3, #0]
   13390:	f000 f88e 	bl	134b0 <_malloc_r>
   13394:	bd10      	pop	{r4, pc}
   13396:	46c0      	nop			; (mov r8, r8)
   13398:	20000018 	.word	0x20000018

0001339c <free>:
   1339c:	b510      	push	{r4, lr}
   1339e:	4b03      	ldr	r3, [pc, #12]	; (133ac <free+0x10>)
   133a0:	0001      	movs	r1, r0
   133a2:	6818      	ldr	r0, [r3, #0]
   133a4:	f000 f83a 	bl	1341c <_free_r>
   133a8:	bd10      	pop	{r4, pc}
   133aa:	46c0      	nop			; (mov r8, r8)
   133ac:	20000018 	.word	0x20000018

000133b0 <__ascii_mbtowc>:
   133b0:	b082      	sub	sp, #8
   133b2:	2900      	cmp	r1, #0
   133b4:	d100      	bne.n	133b8 <__ascii_mbtowc+0x8>
   133b6:	a901      	add	r1, sp, #4
   133b8:	1e10      	subs	r0, r2, #0
   133ba:	d006      	beq.n	133ca <__ascii_mbtowc+0x1a>
   133bc:	2b00      	cmp	r3, #0
   133be:	d006      	beq.n	133ce <__ascii_mbtowc+0x1e>
   133c0:	7813      	ldrb	r3, [r2, #0]
   133c2:	600b      	str	r3, [r1, #0]
   133c4:	7810      	ldrb	r0, [r2, #0]
   133c6:	1e43      	subs	r3, r0, #1
   133c8:	4198      	sbcs	r0, r3
   133ca:	b002      	add	sp, #8
   133cc:	4770      	bx	lr
   133ce:	2002      	movs	r0, #2
   133d0:	4240      	negs	r0, r0
   133d2:	e7fa      	b.n	133ca <__ascii_mbtowc+0x1a>

000133d4 <memcpy>:
   133d4:	2300      	movs	r3, #0
   133d6:	b510      	push	{r4, lr}
   133d8:	429a      	cmp	r2, r3
   133da:	d100      	bne.n	133de <memcpy+0xa>
   133dc:	bd10      	pop	{r4, pc}
   133de:	5ccc      	ldrb	r4, [r1, r3]
   133e0:	54c4      	strb	r4, [r0, r3]
   133e2:	3301      	adds	r3, #1
   133e4:	e7f8      	b.n	133d8 <memcpy+0x4>

000133e6 <memmove>:
   133e6:	b510      	push	{r4, lr}
   133e8:	4288      	cmp	r0, r1
   133ea:	d902      	bls.n	133f2 <memmove+0xc>
   133ec:	188b      	adds	r3, r1, r2
   133ee:	4298      	cmp	r0, r3
   133f0:	d308      	bcc.n	13404 <memmove+0x1e>
   133f2:	2300      	movs	r3, #0
   133f4:	429a      	cmp	r2, r3
   133f6:	d007      	beq.n	13408 <memmove+0x22>
   133f8:	5ccc      	ldrb	r4, [r1, r3]
   133fa:	54c4      	strb	r4, [r0, r3]
   133fc:	3301      	adds	r3, #1
   133fe:	e7f9      	b.n	133f4 <memmove+0xe>
   13400:	5c8b      	ldrb	r3, [r1, r2]
   13402:	5483      	strb	r3, [r0, r2]
   13404:	3a01      	subs	r2, #1
   13406:	d2fb      	bcs.n	13400 <memmove+0x1a>
   13408:	bd10      	pop	{r4, pc}

0001340a <memset>:
   1340a:	0003      	movs	r3, r0
   1340c:	1882      	adds	r2, r0, r2
   1340e:	4293      	cmp	r3, r2
   13410:	d100      	bne.n	13414 <memset+0xa>
   13412:	4770      	bx	lr
   13414:	7019      	strb	r1, [r3, #0]
   13416:	3301      	adds	r3, #1
   13418:	e7f9      	b.n	1340e <memset+0x4>
	...

0001341c <_free_r>:
   1341c:	b570      	push	{r4, r5, r6, lr}
   1341e:	0005      	movs	r5, r0
   13420:	2900      	cmp	r1, #0
   13422:	d010      	beq.n	13446 <_free_r+0x2a>
   13424:	1f0c      	subs	r4, r1, #4
   13426:	6823      	ldr	r3, [r4, #0]
   13428:	2b00      	cmp	r3, #0
   1342a:	da00      	bge.n	1342e <_free_r+0x12>
   1342c:	18e4      	adds	r4, r4, r3
   1342e:	0028      	movs	r0, r5
   13430:	f002 f8dd 	bl	155ee <__malloc_lock>
   13434:	4a1d      	ldr	r2, [pc, #116]	; (134ac <_free_r+0x90>)
   13436:	6813      	ldr	r3, [r2, #0]
   13438:	2b00      	cmp	r3, #0
   1343a:	d105      	bne.n	13448 <_free_r+0x2c>
   1343c:	6063      	str	r3, [r4, #4]
   1343e:	6014      	str	r4, [r2, #0]
   13440:	0028      	movs	r0, r5
   13442:	f002 f8d5 	bl	155f0 <__malloc_unlock>
   13446:	bd70      	pop	{r4, r5, r6, pc}
   13448:	42a3      	cmp	r3, r4
   1344a:	d909      	bls.n	13460 <_free_r+0x44>
   1344c:	6821      	ldr	r1, [r4, #0]
   1344e:	1860      	adds	r0, r4, r1
   13450:	4283      	cmp	r3, r0
   13452:	d1f3      	bne.n	1343c <_free_r+0x20>
   13454:	6818      	ldr	r0, [r3, #0]
   13456:	685b      	ldr	r3, [r3, #4]
   13458:	1841      	adds	r1, r0, r1
   1345a:	6021      	str	r1, [r4, #0]
   1345c:	e7ee      	b.n	1343c <_free_r+0x20>
   1345e:	0013      	movs	r3, r2
   13460:	685a      	ldr	r2, [r3, #4]
   13462:	2a00      	cmp	r2, #0
   13464:	d001      	beq.n	1346a <_free_r+0x4e>
   13466:	42a2      	cmp	r2, r4
   13468:	d9f9      	bls.n	1345e <_free_r+0x42>
   1346a:	6819      	ldr	r1, [r3, #0]
   1346c:	1858      	adds	r0, r3, r1
   1346e:	42a0      	cmp	r0, r4
   13470:	d10b      	bne.n	1348a <_free_r+0x6e>
   13472:	6820      	ldr	r0, [r4, #0]
   13474:	1809      	adds	r1, r1, r0
   13476:	1858      	adds	r0, r3, r1
   13478:	6019      	str	r1, [r3, #0]
   1347a:	4282      	cmp	r2, r0
   1347c:	d1e0      	bne.n	13440 <_free_r+0x24>
   1347e:	6810      	ldr	r0, [r2, #0]
   13480:	6852      	ldr	r2, [r2, #4]
   13482:	1841      	adds	r1, r0, r1
   13484:	6019      	str	r1, [r3, #0]
   13486:	605a      	str	r2, [r3, #4]
   13488:	e7da      	b.n	13440 <_free_r+0x24>
   1348a:	42a0      	cmp	r0, r4
   1348c:	d902      	bls.n	13494 <_free_r+0x78>
   1348e:	230c      	movs	r3, #12
   13490:	602b      	str	r3, [r5, #0]
   13492:	e7d5      	b.n	13440 <_free_r+0x24>
   13494:	6821      	ldr	r1, [r4, #0]
   13496:	1860      	adds	r0, r4, r1
   13498:	4282      	cmp	r2, r0
   1349a:	d103      	bne.n	134a4 <_free_r+0x88>
   1349c:	6810      	ldr	r0, [r2, #0]
   1349e:	6852      	ldr	r2, [r2, #4]
   134a0:	1841      	adds	r1, r0, r1
   134a2:	6021      	str	r1, [r4, #0]
   134a4:	6062      	str	r2, [r4, #4]
   134a6:	605c      	str	r4, [r3, #4]
   134a8:	e7ca      	b.n	13440 <_free_r+0x24>
   134aa:	46c0      	nop			; (mov r8, r8)
   134ac:	200002c0 	.word	0x200002c0

000134b0 <_malloc_r>:
   134b0:	2303      	movs	r3, #3
   134b2:	b570      	push	{r4, r5, r6, lr}
   134b4:	1ccd      	adds	r5, r1, #3
   134b6:	439d      	bics	r5, r3
   134b8:	3508      	adds	r5, #8
   134ba:	0006      	movs	r6, r0
   134bc:	2d0c      	cmp	r5, #12
   134be:	d21e      	bcs.n	134fe <_malloc_r+0x4e>
   134c0:	250c      	movs	r5, #12
   134c2:	42a9      	cmp	r1, r5
   134c4:	d81d      	bhi.n	13502 <_malloc_r+0x52>
   134c6:	0030      	movs	r0, r6
   134c8:	f002 f891 	bl	155ee <__malloc_lock>
   134cc:	4a25      	ldr	r2, [pc, #148]	; (13564 <_malloc_r+0xb4>)
   134ce:	6814      	ldr	r4, [r2, #0]
   134d0:	0021      	movs	r1, r4
   134d2:	2900      	cmp	r1, #0
   134d4:	d119      	bne.n	1350a <_malloc_r+0x5a>
   134d6:	4c24      	ldr	r4, [pc, #144]	; (13568 <_malloc_r+0xb8>)
   134d8:	6823      	ldr	r3, [r4, #0]
   134da:	2b00      	cmp	r3, #0
   134dc:	d103      	bne.n	134e6 <_malloc_r+0x36>
   134de:	0030      	movs	r0, r6
   134e0:	f000 fd4c 	bl	13f7c <_sbrk_r>
   134e4:	6020      	str	r0, [r4, #0]
   134e6:	0029      	movs	r1, r5
   134e8:	0030      	movs	r0, r6
   134ea:	f000 fd47 	bl	13f7c <_sbrk_r>
   134ee:	1c43      	adds	r3, r0, #1
   134f0:	d12c      	bne.n	1354c <_malloc_r+0x9c>
   134f2:	230c      	movs	r3, #12
   134f4:	0030      	movs	r0, r6
   134f6:	6033      	str	r3, [r6, #0]
   134f8:	f002 f87a 	bl	155f0 <__malloc_unlock>
   134fc:	e003      	b.n	13506 <_malloc_r+0x56>
   134fe:	2d00      	cmp	r5, #0
   13500:	dadf      	bge.n	134c2 <_malloc_r+0x12>
   13502:	230c      	movs	r3, #12
   13504:	6033      	str	r3, [r6, #0]
   13506:	2000      	movs	r0, #0
   13508:	bd70      	pop	{r4, r5, r6, pc}
   1350a:	680b      	ldr	r3, [r1, #0]
   1350c:	1b5b      	subs	r3, r3, r5
   1350e:	d41a      	bmi.n	13546 <_malloc_r+0x96>
   13510:	2b0b      	cmp	r3, #11
   13512:	d903      	bls.n	1351c <_malloc_r+0x6c>
   13514:	600b      	str	r3, [r1, #0]
   13516:	18cc      	adds	r4, r1, r3
   13518:	6025      	str	r5, [r4, #0]
   1351a:	e003      	b.n	13524 <_malloc_r+0x74>
   1351c:	428c      	cmp	r4, r1
   1351e:	d10e      	bne.n	1353e <_malloc_r+0x8e>
   13520:	6863      	ldr	r3, [r4, #4]
   13522:	6013      	str	r3, [r2, #0]
   13524:	0030      	movs	r0, r6
   13526:	f002 f863 	bl	155f0 <__malloc_unlock>
   1352a:	0020      	movs	r0, r4
   1352c:	2207      	movs	r2, #7
   1352e:	300b      	adds	r0, #11
   13530:	1d23      	adds	r3, r4, #4
   13532:	4390      	bics	r0, r2
   13534:	1ac3      	subs	r3, r0, r3
   13536:	d0e7      	beq.n	13508 <_malloc_r+0x58>
   13538:	425a      	negs	r2, r3
   1353a:	50e2      	str	r2, [r4, r3]
   1353c:	e7e4      	b.n	13508 <_malloc_r+0x58>
   1353e:	684b      	ldr	r3, [r1, #4]
   13540:	6063      	str	r3, [r4, #4]
   13542:	000c      	movs	r4, r1
   13544:	e7ee      	b.n	13524 <_malloc_r+0x74>
   13546:	000c      	movs	r4, r1
   13548:	6849      	ldr	r1, [r1, #4]
   1354a:	e7c2      	b.n	134d2 <_malloc_r+0x22>
   1354c:	2303      	movs	r3, #3
   1354e:	1cc4      	adds	r4, r0, #3
   13550:	439c      	bics	r4, r3
   13552:	42a0      	cmp	r0, r4
   13554:	d0e0      	beq.n	13518 <_malloc_r+0x68>
   13556:	1a21      	subs	r1, r4, r0
   13558:	0030      	movs	r0, r6
   1355a:	f000 fd0f 	bl	13f7c <_sbrk_r>
   1355e:	1c43      	adds	r3, r0, #1
   13560:	d1da      	bne.n	13518 <_malloc_r+0x68>
   13562:	e7c6      	b.n	134f2 <_malloc_r+0x42>
   13564:	200002c0 	.word	0x200002c0
   13568:	200002c4 	.word	0x200002c4

0001356c <__cvt>:
   1356c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1356e:	b08b      	sub	sp, #44	; 0x2c
   13570:	0014      	movs	r4, r2
   13572:	1e1d      	subs	r5, r3, #0
   13574:	9912      	ldr	r1, [sp, #72]	; 0x48
   13576:	da53      	bge.n	13620 <__cvt+0xb4>
   13578:	2480      	movs	r4, #128	; 0x80
   1357a:	0624      	lsls	r4, r4, #24
   1357c:	191b      	adds	r3, r3, r4
   1357e:	001d      	movs	r5, r3
   13580:	0014      	movs	r4, r2
   13582:	232d      	movs	r3, #45	; 0x2d
   13584:	700b      	strb	r3, [r1, #0]
   13586:	2320      	movs	r3, #32
   13588:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1358a:	2203      	movs	r2, #3
   1358c:	439e      	bics	r6, r3
   1358e:	2e46      	cmp	r6, #70	; 0x46
   13590:	d007      	beq.n	135a2 <__cvt+0x36>
   13592:	0033      	movs	r3, r6
   13594:	3b45      	subs	r3, #69	; 0x45
   13596:	4259      	negs	r1, r3
   13598:	414b      	adcs	r3, r1
   1359a:	9910      	ldr	r1, [sp, #64]	; 0x40
   1359c:	3a01      	subs	r2, #1
   1359e:	18cb      	adds	r3, r1, r3
   135a0:	9310      	str	r3, [sp, #64]	; 0x40
   135a2:	ab09      	add	r3, sp, #36	; 0x24
   135a4:	9304      	str	r3, [sp, #16]
   135a6:	ab08      	add	r3, sp, #32
   135a8:	9303      	str	r3, [sp, #12]
   135aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   135ac:	9200      	str	r2, [sp, #0]
   135ae:	9302      	str	r3, [sp, #8]
   135b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   135b2:	0022      	movs	r2, r4
   135b4:	9301      	str	r3, [sp, #4]
   135b6:	002b      	movs	r3, r5
   135b8:	f001 f820 	bl	145fc <_dtoa_r>
   135bc:	0007      	movs	r7, r0
   135be:	2e47      	cmp	r6, #71	; 0x47
   135c0:	d102      	bne.n	135c8 <__cvt+0x5c>
   135c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   135c4:	07db      	lsls	r3, r3, #31
   135c6:	d524      	bpl.n	13612 <__cvt+0xa6>
   135c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   135ca:	18fb      	adds	r3, r7, r3
   135cc:	9307      	str	r3, [sp, #28]
   135ce:	2e46      	cmp	r6, #70	; 0x46
   135d0:	d114      	bne.n	135fc <__cvt+0x90>
   135d2:	783b      	ldrb	r3, [r7, #0]
   135d4:	2b30      	cmp	r3, #48	; 0x30
   135d6:	d10c      	bne.n	135f2 <__cvt+0x86>
   135d8:	2200      	movs	r2, #0
   135da:	2300      	movs	r3, #0
   135dc:	0020      	movs	r0, r4
   135de:	0029      	movs	r1, r5
   135e0:	f003 f854 	bl	1668c <__aeabi_dcmpeq>
   135e4:	2800      	cmp	r0, #0
   135e6:	d104      	bne.n	135f2 <__cvt+0x86>
   135e8:	2301      	movs	r3, #1
   135ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
   135ec:	1a9b      	subs	r3, r3, r2
   135ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   135f0:	6013      	str	r3, [r2, #0]
   135f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   135f4:	9a07      	ldr	r2, [sp, #28]
   135f6:	681b      	ldr	r3, [r3, #0]
   135f8:	18d3      	adds	r3, r2, r3
   135fa:	9307      	str	r3, [sp, #28]
   135fc:	2200      	movs	r2, #0
   135fe:	2300      	movs	r3, #0
   13600:	0020      	movs	r0, r4
   13602:	0029      	movs	r1, r5
   13604:	f003 f842 	bl	1668c <__aeabi_dcmpeq>
   13608:	2230      	movs	r2, #48	; 0x30
   1360a:	2800      	cmp	r0, #0
   1360c:	d00d      	beq.n	1362a <__cvt+0xbe>
   1360e:	9b07      	ldr	r3, [sp, #28]
   13610:	9309      	str	r3, [sp, #36]	; 0x24
   13612:	0038      	movs	r0, r7
   13614:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13616:	9a15      	ldr	r2, [sp, #84]	; 0x54
   13618:	1bdb      	subs	r3, r3, r7
   1361a:	6013      	str	r3, [r2, #0]
   1361c:	b00b      	add	sp, #44	; 0x2c
   1361e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13620:	2300      	movs	r3, #0
   13622:	e7af      	b.n	13584 <__cvt+0x18>
   13624:	1c59      	adds	r1, r3, #1
   13626:	9109      	str	r1, [sp, #36]	; 0x24
   13628:	701a      	strb	r2, [r3, #0]
   1362a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1362c:	9907      	ldr	r1, [sp, #28]
   1362e:	4299      	cmp	r1, r3
   13630:	d8f8      	bhi.n	13624 <__cvt+0xb8>
   13632:	e7ee      	b.n	13612 <__cvt+0xa6>

00013634 <__exponent>:
   13634:	b5f0      	push	{r4, r5, r6, r7, lr}
   13636:	232b      	movs	r3, #43	; 0x2b
   13638:	b085      	sub	sp, #20
   1363a:	0007      	movs	r7, r0
   1363c:	000c      	movs	r4, r1
   1363e:	7002      	strb	r2, [r0, #0]
   13640:	1c86      	adds	r6, r0, #2
   13642:	2900      	cmp	r1, #0
   13644:	da01      	bge.n	1364a <__exponent+0x16>
   13646:	232d      	movs	r3, #45	; 0x2d
   13648:	424c      	negs	r4, r1
   1364a:	707b      	strb	r3, [r7, #1]
   1364c:	2c09      	cmp	r4, #9
   1364e:	dd23      	ble.n	13698 <__exponent+0x64>
   13650:	ab02      	add	r3, sp, #8
   13652:	1ddd      	adds	r5, r3, #7
   13654:	1e6b      	subs	r3, r5, #1
   13656:	0020      	movs	r0, r4
   13658:	210a      	movs	r1, #10
   1365a:	9301      	str	r3, [sp, #4]
   1365c:	f003 f800 	bl	16660 <__aeabi_idivmod>
   13660:	1e6b      	subs	r3, r5, #1
   13662:	3130      	adds	r1, #48	; 0x30
   13664:	7019      	strb	r1, [r3, #0]
   13666:	0020      	movs	r0, r4
   13668:	210a      	movs	r1, #10
   1366a:	f002 ff13 	bl	16494 <__divsi3>
   1366e:	0004      	movs	r4, r0
   13670:	2809      	cmp	r0, #9
   13672:	dc0a      	bgt.n	1368a <__exponent+0x56>
   13674:	3d02      	subs	r5, #2
   13676:	3430      	adds	r4, #48	; 0x30
   13678:	702c      	strb	r4, [r5, #0]
   1367a:	ab02      	add	r3, sp, #8
   1367c:	3307      	adds	r3, #7
   1367e:	0030      	movs	r0, r6
   13680:	42ab      	cmp	r3, r5
   13682:	d804      	bhi.n	1368e <__exponent+0x5a>
   13684:	1bc0      	subs	r0, r0, r7
   13686:	b005      	add	sp, #20
   13688:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1368a:	9d01      	ldr	r5, [sp, #4]
   1368c:	e7e2      	b.n	13654 <__exponent+0x20>
   1368e:	782b      	ldrb	r3, [r5, #0]
   13690:	3501      	adds	r5, #1
   13692:	7033      	strb	r3, [r6, #0]
   13694:	3601      	adds	r6, #1
   13696:	e7f0      	b.n	1367a <__exponent+0x46>
   13698:	2330      	movs	r3, #48	; 0x30
   1369a:	18e4      	adds	r4, r4, r3
   1369c:	7033      	strb	r3, [r6, #0]
   1369e:	1cb0      	adds	r0, r6, #2
   136a0:	7074      	strb	r4, [r6, #1]
   136a2:	e7ef      	b.n	13684 <__exponent+0x50>

000136a4 <_printf_float>:
   136a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   136a6:	b095      	sub	sp, #84	; 0x54
   136a8:	000c      	movs	r4, r1
   136aa:	920a      	str	r2, [sp, #40]	; 0x28
   136ac:	930b      	str	r3, [sp, #44]	; 0x2c
   136ae:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   136b0:	9009      	str	r0, [sp, #36]	; 0x24
   136b2:	f001 ff19 	bl	154e8 <_localeconv_r>
   136b6:	6803      	ldr	r3, [r0, #0]
   136b8:	0018      	movs	r0, r3
   136ba:	930d      	str	r3, [sp, #52]	; 0x34
   136bc:	f000 fd77 	bl	141ae <strlen>
   136c0:	2300      	movs	r3, #0
   136c2:	9312      	str	r3, [sp, #72]	; 0x48
   136c4:	6823      	ldr	r3, [r4, #0]
   136c6:	900e      	str	r0, [sp, #56]	; 0x38
   136c8:	930c      	str	r3, [sp, #48]	; 0x30
   136ca:	990c      	ldr	r1, [sp, #48]	; 0x30
   136cc:	7e27      	ldrb	r7, [r4, #24]
   136ce:	682b      	ldr	r3, [r5, #0]
   136d0:	2207      	movs	r2, #7
   136d2:	05c9      	lsls	r1, r1, #23
   136d4:	d547      	bpl.n	13766 <_printf_float+0xc2>
   136d6:	189b      	adds	r3, r3, r2
   136d8:	4393      	bics	r3, r2
   136da:	001a      	movs	r2, r3
   136dc:	3208      	adds	r2, #8
   136de:	602a      	str	r2, [r5, #0]
   136e0:	681a      	ldr	r2, [r3, #0]
   136e2:	685b      	ldr	r3, [r3, #4]
   136e4:	64a2      	str	r2, [r4, #72]	; 0x48
   136e6:	64e3      	str	r3, [r4, #76]	; 0x4c
   136e8:	2201      	movs	r2, #1
   136ea:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
   136ec:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   136ee:	006b      	lsls	r3, r5, #1
   136f0:	085b      	lsrs	r3, r3, #1
   136f2:	930f      	str	r3, [sp, #60]	; 0x3c
   136f4:	4252      	negs	r2, r2
   136f6:	4ba7      	ldr	r3, [pc, #668]	; (13994 <_printf_float+0x2f0>)
   136f8:	0030      	movs	r0, r6
   136fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
   136fc:	f004 ffb0 	bl	18660 <__aeabi_dcmpun>
   13700:	2800      	cmp	r0, #0
   13702:	d000      	beq.n	13706 <_printf_float+0x62>
   13704:	e206      	b.n	13b14 <_printf_float+0x470>
   13706:	2201      	movs	r2, #1
   13708:	4ba2      	ldr	r3, [pc, #648]	; (13994 <_printf_float+0x2f0>)
   1370a:	4252      	negs	r2, r2
   1370c:	0030      	movs	r0, r6
   1370e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13710:	f002 ffcc 	bl	166ac <__aeabi_dcmple>
   13714:	2800      	cmp	r0, #0
   13716:	d000      	beq.n	1371a <_printf_float+0x76>
   13718:	e1fc      	b.n	13b14 <_printf_float+0x470>
   1371a:	2200      	movs	r2, #0
   1371c:	2300      	movs	r3, #0
   1371e:	0030      	movs	r0, r6
   13720:	0029      	movs	r1, r5
   13722:	f002 ffb9 	bl	16698 <__aeabi_dcmplt>
   13726:	2800      	cmp	r0, #0
   13728:	d003      	beq.n	13732 <_printf_float+0x8e>
   1372a:	0023      	movs	r3, r4
   1372c:	222d      	movs	r2, #45	; 0x2d
   1372e:	3343      	adds	r3, #67	; 0x43
   13730:	701a      	strb	r2, [r3, #0]
   13732:	4d99      	ldr	r5, [pc, #612]	; (13998 <_printf_float+0x2f4>)
   13734:	2f47      	cmp	r7, #71	; 0x47
   13736:	d800      	bhi.n	1373a <_printf_float+0x96>
   13738:	4d98      	ldr	r5, [pc, #608]	; (1399c <_printf_float+0x2f8>)
   1373a:	2303      	movs	r3, #3
   1373c:	2600      	movs	r6, #0
   1373e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13740:	6123      	str	r3, [r4, #16]
   13742:	3301      	adds	r3, #1
   13744:	439a      	bics	r2, r3
   13746:	6022      	str	r2, [r4, #0]
   13748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1374a:	aa13      	add	r2, sp, #76	; 0x4c
   1374c:	9300      	str	r3, [sp, #0]
   1374e:	0021      	movs	r1, r4
   13750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13752:	9809      	ldr	r0, [sp, #36]	; 0x24
   13754:	f000 f9f2 	bl	13b3c <_printf_common>
   13758:	1c43      	adds	r3, r0, #1
   1375a:	d000      	beq.n	1375e <_printf_float+0xba>
   1375c:	e09c      	b.n	13898 <_printf_float+0x1f4>
   1375e:	2001      	movs	r0, #1
   13760:	4240      	negs	r0, r0
   13762:	b015      	add	sp, #84	; 0x54
   13764:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13766:	3307      	adds	r3, #7
   13768:	e7b6      	b.n	136d8 <_printf_float+0x34>
   1376a:	2380      	movs	r3, #128	; 0x80
   1376c:	6862      	ldr	r2, [r4, #4]
   1376e:	00db      	lsls	r3, r3, #3
   13770:	1c51      	adds	r1, r2, #1
   13772:	d145      	bne.n	13800 <_printf_float+0x15c>
   13774:	3207      	adds	r2, #7
   13776:	6062      	str	r2, [r4, #4]
   13778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1377a:	2100      	movs	r1, #0
   1377c:	4313      	orrs	r3, r2
   1377e:	aa12      	add	r2, sp, #72	; 0x48
   13780:	9205      	str	r2, [sp, #20]
   13782:	aa11      	add	r2, sp, #68	; 0x44
   13784:	9203      	str	r2, [sp, #12]
   13786:	2223      	movs	r2, #35	; 0x23
   13788:	6023      	str	r3, [r4, #0]
   1378a:	9106      	str	r1, [sp, #24]
   1378c:	9301      	str	r3, [sp, #4]
   1378e:	a908      	add	r1, sp, #32
   13790:	6863      	ldr	r3, [r4, #4]
   13792:	1852      	adds	r2, r2, r1
   13794:	9202      	str	r2, [sp, #8]
   13796:	9300      	str	r3, [sp, #0]
   13798:	0032      	movs	r2, r6
   1379a:	002b      	movs	r3, r5
   1379c:	9704      	str	r7, [sp, #16]
   1379e:	9809      	ldr	r0, [sp, #36]	; 0x24
   137a0:	f7ff fee4 	bl	1356c <__cvt>
   137a4:	2320      	movs	r3, #32
   137a6:	003a      	movs	r2, r7
   137a8:	0005      	movs	r5, r0
   137aa:	439a      	bics	r2, r3
   137ac:	2a47      	cmp	r2, #71	; 0x47
   137ae:	d107      	bne.n	137c0 <_printf_float+0x11c>
   137b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   137b2:	1cda      	adds	r2, r3, #3
   137b4:	db02      	blt.n	137bc <_printf_float+0x118>
   137b6:	6862      	ldr	r2, [r4, #4]
   137b8:	4293      	cmp	r3, r2
   137ba:	dd5b      	ble.n	13874 <_printf_float+0x1d0>
   137bc:	3f02      	subs	r7, #2
   137be:	b2ff      	uxtb	r7, r7
   137c0:	9911      	ldr	r1, [sp, #68]	; 0x44
   137c2:	2f65      	cmp	r7, #101	; 0x65
   137c4:	d83b      	bhi.n	1383e <_printf_float+0x19a>
   137c6:	0020      	movs	r0, r4
   137c8:	3901      	subs	r1, #1
   137ca:	003a      	movs	r2, r7
   137cc:	3050      	adds	r0, #80	; 0x50
   137ce:	9111      	str	r1, [sp, #68]	; 0x44
   137d0:	f7ff ff30 	bl	13634 <__exponent>
   137d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   137d6:	0006      	movs	r6, r0
   137d8:	1883      	adds	r3, r0, r2
   137da:	6123      	str	r3, [r4, #16]
   137dc:	2a01      	cmp	r2, #1
   137de:	dc02      	bgt.n	137e6 <_printf_float+0x142>
   137e0:	6822      	ldr	r2, [r4, #0]
   137e2:	07d2      	lsls	r2, r2, #31
   137e4:	d501      	bpl.n	137ea <_printf_float+0x146>
   137e6:	3301      	adds	r3, #1
   137e8:	6123      	str	r3, [r4, #16]
   137ea:	2323      	movs	r3, #35	; 0x23
   137ec:	aa08      	add	r2, sp, #32
   137ee:	189b      	adds	r3, r3, r2
   137f0:	781b      	ldrb	r3, [r3, #0]
   137f2:	2b00      	cmp	r3, #0
   137f4:	d0a8      	beq.n	13748 <_printf_float+0xa4>
   137f6:	0023      	movs	r3, r4
   137f8:	222d      	movs	r2, #45	; 0x2d
   137fa:	3343      	adds	r3, #67	; 0x43
   137fc:	701a      	strb	r2, [r3, #0]
   137fe:	e7a3      	b.n	13748 <_printf_float+0xa4>
   13800:	2f67      	cmp	r7, #103	; 0x67
   13802:	d001      	beq.n	13808 <_printf_float+0x164>
   13804:	2f47      	cmp	r7, #71	; 0x47
   13806:	d1b7      	bne.n	13778 <_printf_float+0xd4>
   13808:	2a00      	cmp	r2, #0
   1380a:	d016      	beq.n	1383a <_printf_float+0x196>
   1380c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1380e:	a808      	add	r0, sp, #32
   13810:	430b      	orrs	r3, r1
   13812:	2100      	movs	r1, #0
   13814:	9106      	str	r1, [sp, #24]
   13816:	a912      	add	r1, sp, #72	; 0x48
   13818:	9105      	str	r1, [sp, #20]
   1381a:	a911      	add	r1, sp, #68	; 0x44
   1381c:	9103      	str	r1, [sp, #12]
   1381e:	2123      	movs	r1, #35	; 0x23
   13820:	1809      	adds	r1, r1, r0
   13822:	6023      	str	r3, [r4, #0]
   13824:	9301      	str	r3, [sp, #4]
   13826:	9200      	str	r2, [sp, #0]
   13828:	002b      	movs	r3, r5
   1382a:	9704      	str	r7, [sp, #16]
   1382c:	9102      	str	r1, [sp, #8]
   1382e:	0032      	movs	r2, r6
   13830:	9809      	ldr	r0, [sp, #36]	; 0x24
   13832:	f7ff fe9b 	bl	1356c <__cvt>
   13836:	0005      	movs	r5, r0
   13838:	e7ba      	b.n	137b0 <_printf_float+0x10c>
   1383a:	2201      	movs	r2, #1
   1383c:	e79b      	b.n	13776 <_printf_float+0xd2>
   1383e:	2f66      	cmp	r7, #102	; 0x66
   13840:	d119      	bne.n	13876 <_printf_float+0x1d2>
   13842:	6863      	ldr	r3, [r4, #4]
   13844:	2900      	cmp	r1, #0
   13846:	dd0c      	ble.n	13862 <_printf_float+0x1be>
   13848:	6121      	str	r1, [r4, #16]
   1384a:	2b00      	cmp	r3, #0
   1384c:	d102      	bne.n	13854 <_printf_float+0x1b0>
   1384e:	6822      	ldr	r2, [r4, #0]
   13850:	07d2      	lsls	r2, r2, #31
   13852:	d502      	bpl.n	1385a <_printf_float+0x1b6>
   13854:	3301      	adds	r3, #1
   13856:	185b      	adds	r3, r3, r1
   13858:	6123      	str	r3, [r4, #16]
   1385a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1385c:	2600      	movs	r6, #0
   1385e:	65a3      	str	r3, [r4, #88]	; 0x58
   13860:	e7c3      	b.n	137ea <_printf_float+0x146>
   13862:	2b00      	cmp	r3, #0
   13864:	d103      	bne.n	1386e <_printf_float+0x1ca>
   13866:	2201      	movs	r2, #1
   13868:	6821      	ldr	r1, [r4, #0]
   1386a:	4211      	tst	r1, r2
   1386c:	d000      	beq.n	13870 <_printf_float+0x1cc>
   1386e:	1c9a      	adds	r2, r3, #2
   13870:	6122      	str	r2, [r4, #16]
   13872:	e7f2      	b.n	1385a <_printf_float+0x1b6>
   13874:	2767      	movs	r7, #103	; 0x67
   13876:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13878:	9812      	ldr	r0, [sp, #72]	; 0x48
   1387a:	4283      	cmp	r3, r0
   1387c:	db05      	blt.n	1388a <_printf_float+0x1e6>
   1387e:	6822      	ldr	r2, [r4, #0]
   13880:	6123      	str	r3, [r4, #16]
   13882:	07d2      	lsls	r2, r2, #31
   13884:	d5e9      	bpl.n	1385a <_printf_float+0x1b6>
   13886:	3301      	adds	r3, #1
   13888:	e7e6      	b.n	13858 <_printf_float+0x1b4>
   1388a:	2201      	movs	r2, #1
   1388c:	2b00      	cmp	r3, #0
   1388e:	dc01      	bgt.n	13894 <_printf_float+0x1f0>
   13890:	1892      	adds	r2, r2, r2
   13892:	1ad2      	subs	r2, r2, r3
   13894:	1812      	adds	r2, r2, r0
   13896:	e7eb      	b.n	13870 <_printf_float+0x1cc>
   13898:	6822      	ldr	r2, [r4, #0]
   1389a:	0553      	lsls	r3, r2, #21
   1389c:	d408      	bmi.n	138b0 <_printf_float+0x20c>
   1389e:	6923      	ldr	r3, [r4, #16]
   138a0:	002a      	movs	r2, r5
   138a2:	990a      	ldr	r1, [sp, #40]	; 0x28
   138a4:	9809      	ldr	r0, [sp, #36]	; 0x24
   138a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   138a8:	47a8      	blx	r5
   138aa:	1c43      	adds	r3, r0, #1
   138ac:	d129      	bne.n	13902 <_printf_float+0x25e>
   138ae:	e756      	b.n	1375e <_printf_float+0xba>
   138b0:	2f65      	cmp	r7, #101	; 0x65
   138b2:	d800      	bhi.n	138b6 <_printf_float+0x212>
   138b4:	e0dc      	b.n	13a70 <_printf_float+0x3cc>
   138b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   138b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   138ba:	2200      	movs	r2, #0
   138bc:	2300      	movs	r3, #0
   138be:	f002 fee5 	bl	1668c <__aeabi_dcmpeq>
   138c2:	2800      	cmp	r0, #0
   138c4:	d035      	beq.n	13932 <_printf_float+0x28e>
   138c6:	2301      	movs	r3, #1
   138c8:	4a35      	ldr	r2, [pc, #212]	; (139a0 <_printf_float+0x2fc>)
   138ca:	990a      	ldr	r1, [sp, #40]	; 0x28
   138cc:	9809      	ldr	r0, [sp, #36]	; 0x24
   138ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   138d0:	47a8      	blx	r5
   138d2:	1c43      	adds	r3, r0, #1
   138d4:	d100      	bne.n	138d8 <_printf_float+0x234>
   138d6:	e742      	b.n	1375e <_printf_float+0xba>
   138d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   138da:	9a12      	ldr	r2, [sp, #72]	; 0x48
   138dc:	4293      	cmp	r3, r2
   138de:	db02      	blt.n	138e6 <_printf_float+0x242>
   138e0:	6823      	ldr	r3, [r4, #0]
   138e2:	07db      	lsls	r3, r3, #31
   138e4:	d50d      	bpl.n	13902 <_printf_float+0x25e>
   138e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   138e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   138ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   138ec:	990a      	ldr	r1, [sp, #40]	; 0x28
   138ee:	9809      	ldr	r0, [sp, #36]	; 0x24
   138f0:	47a8      	blx	r5
   138f2:	2500      	movs	r5, #0
   138f4:	1c43      	adds	r3, r0, #1
   138f6:	d100      	bne.n	138fa <_printf_float+0x256>
   138f8:	e731      	b.n	1375e <_printf_float+0xba>
   138fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   138fc:	3b01      	subs	r3, #1
   138fe:	429d      	cmp	r5, r3
   13900:	db0b      	blt.n	1391a <_printf_float+0x276>
   13902:	6823      	ldr	r3, [r4, #0]
   13904:	2500      	movs	r5, #0
   13906:	079b      	lsls	r3, r3, #30
   13908:	d500      	bpl.n	1390c <_printf_float+0x268>
   1390a:	e0fd      	b.n	13b08 <_printf_float+0x464>
   1390c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1390e:	68e0      	ldr	r0, [r4, #12]
   13910:	4298      	cmp	r0, r3
   13912:	db00      	blt.n	13916 <_printf_float+0x272>
   13914:	e725      	b.n	13762 <_printf_float+0xbe>
   13916:	0018      	movs	r0, r3
   13918:	e723      	b.n	13762 <_printf_float+0xbe>
   1391a:	0022      	movs	r2, r4
   1391c:	2301      	movs	r3, #1
   1391e:	321a      	adds	r2, #26
   13920:	990a      	ldr	r1, [sp, #40]	; 0x28
   13922:	9809      	ldr	r0, [sp, #36]	; 0x24
   13924:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   13926:	47b0      	blx	r6
   13928:	1c43      	adds	r3, r0, #1
   1392a:	d100      	bne.n	1392e <_printf_float+0x28a>
   1392c:	e717      	b.n	1375e <_printf_float+0xba>
   1392e:	3501      	adds	r5, #1
   13930:	e7e3      	b.n	138fa <_printf_float+0x256>
   13932:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13934:	2b00      	cmp	r3, #0
   13936:	dc35      	bgt.n	139a4 <_printf_float+0x300>
   13938:	2301      	movs	r3, #1
   1393a:	4a19      	ldr	r2, [pc, #100]	; (139a0 <_printf_float+0x2fc>)
   1393c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1393e:	9809      	ldr	r0, [sp, #36]	; 0x24
   13940:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   13942:	47b0      	blx	r6
   13944:	1c43      	adds	r3, r0, #1
   13946:	d100      	bne.n	1394a <_printf_float+0x2a6>
   13948:	e709      	b.n	1375e <_printf_float+0xba>
   1394a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1394c:	2b00      	cmp	r3, #0
   1394e:	d105      	bne.n	1395c <_printf_float+0x2b8>
   13950:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13952:	2b00      	cmp	r3, #0
   13954:	d102      	bne.n	1395c <_printf_float+0x2b8>
   13956:	6823      	ldr	r3, [r4, #0]
   13958:	07db      	lsls	r3, r3, #31
   1395a:	d5d2      	bpl.n	13902 <_printf_float+0x25e>
   1395c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1395e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13960:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13962:	990a      	ldr	r1, [sp, #40]	; 0x28
   13964:	9809      	ldr	r0, [sp, #36]	; 0x24
   13966:	47b0      	blx	r6
   13968:	2600      	movs	r6, #0
   1396a:	1c43      	adds	r3, r0, #1
   1396c:	d100      	bne.n	13970 <_printf_float+0x2cc>
   1396e:	e6f6      	b.n	1375e <_printf_float+0xba>
   13970:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13972:	425b      	negs	r3, r3
   13974:	429e      	cmp	r6, r3
   13976:	db01      	blt.n	1397c <_printf_float+0x2d8>
   13978:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1397a:	e791      	b.n	138a0 <_printf_float+0x1fc>
   1397c:	0022      	movs	r2, r4
   1397e:	2301      	movs	r3, #1
   13980:	321a      	adds	r2, #26
   13982:	990a      	ldr	r1, [sp, #40]	; 0x28
   13984:	9809      	ldr	r0, [sp, #36]	; 0x24
   13986:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   13988:	47b8      	blx	r7
   1398a:	1c43      	adds	r3, r0, #1
   1398c:	d100      	bne.n	13990 <_printf_float+0x2ec>
   1398e:	e6e6      	b.n	1375e <_printf_float+0xba>
   13990:	3601      	adds	r6, #1
   13992:	e7ed      	b.n	13970 <_printf_float+0x2cc>
   13994:	7fefffff 	.word	0x7fefffff
   13998:	0001aece 	.word	0x0001aece
   1399c:	0001aeca 	.word	0x0001aeca
   139a0:	0001aeda 	.word	0x0001aeda
   139a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   139a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
   139a8:	429e      	cmp	r6, r3
   139aa:	dd00      	ble.n	139ae <_printf_float+0x30a>
   139ac:	001e      	movs	r6, r3
   139ae:	2e00      	cmp	r6, #0
   139b0:	dc35      	bgt.n	13a1e <_printf_float+0x37a>
   139b2:	2300      	movs	r3, #0
   139b4:	930c      	str	r3, [sp, #48]	; 0x30
   139b6:	43f3      	mvns	r3, r6
   139b8:	17db      	asrs	r3, r3, #31
   139ba:	930f      	str	r3, [sp, #60]	; 0x3c
   139bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   139be:	6da7      	ldr	r7, [r4, #88]	; 0x58
   139c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   139c2:	4033      	ands	r3, r6
   139c4:	1afb      	subs	r3, r7, r3
   139c6:	429a      	cmp	r2, r3
   139c8:	db32      	blt.n	13a30 <_printf_float+0x38c>
   139ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   139cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   139ce:	4293      	cmp	r3, r2
   139d0:	db3c      	blt.n	13a4c <_printf_float+0x3a8>
   139d2:	6823      	ldr	r3, [r4, #0]
   139d4:	07db      	lsls	r3, r3, #31
   139d6:	d439      	bmi.n	13a4c <_printf_float+0x3a8>
   139d8:	9e12      	ldr	r6, [sp, #72]	; 0x48
   139da:	9a11      	ldr	r2, [sp, #68]	; 0x44
   139dc:	1bf3      	subs	r3, r6, r7
   139de:	1ab6      	subs	r6, r6, r2
   139e0:	429e      	cmp	r6, r3
   139e2:	dd00      	ble.n	139e6 <_printf_float+0x342>
   139e4:	001e      	movs	r6, r3
   139e6:	2e00      	cmp	r6, #0
   139e8:	dc39      	bgt.n	13a5e <_printf_float+0x3ba>
   139ea:	43f7      	mvns	r7, r6
   139ec:	2500      	movs	r5, #0
   139ee:	17fb      	asrs	r3, r7, #31
   139f0:	930c      	str	r3, [sp, #48]	; 0x30
   139f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   139f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   139f6:	990c      	ldr	r1, [sp, #48]	; 0x30
   139f8:	1a9b      	subs	r3, r3, r2
   139fa:	0032      	movs	r2, r6
   139fc:	400a      	ands	r2, r1
   139fe:	1a9b      	subs	r3, r3, r2
   13a00:	429d      	cmp	r5, r3
   13a02:	db00      	blt.n	13a06 <_printf_float+0x362>
   13a04:	e77d      	b.n	13902 <_printf_float+0x25e>
   13a06:	0022      	movs	r2, r4
   13a08:	2301      	movs	r3, #1
   13a0a:	321a      	adds	r2, #26
   13a0c:	990a      	ldr	r1, [sp, #40]	; 0x28
   13a0e:	9809      	ldr	r0, [sp, #36]	; 0x24
   13a10:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   13a12:	47b8      	blx	r7
   13a14:	1c43      	adds	r3, r0, #1
   13a16:	d100      	bne.n	13a1a <_printf_float+0x376>
   13a18:	e6a1      	b.n	1375e <_printf_float+0xba>
   13a1a:	3501      	adds	r5, #1
   13a1c:	e7e9      	b.n	139f2 <_printf_float+0x34e>
   13a1e:	0033      	movs	r3, r6
   13a20:	002a      	movs	r2, r5
   13a22:	990a      	ldr	r1, [sp, #40]	; 0x28
   13a24:	9809      	ldr	r0, [sp, #36]	; 0x24
   13a26:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   13a28:	47b8      	blx	r7
   13a2a:	1c43      	adds	r3, r0, #1
   13a2c:	d1c1      	bne.n	139b2 <_printf_float+0x30e>
   13a2e:	e696      	b.n	1375e <_printf_float+0xba>
   13a30:	0022      	movs	r2, r4
   13a32:	2301      	movs	r3, #1
   13a34:	321a      	adds	r2, #26
   13a36:	990a      	ldr	r1, [sp, #40]	; 0x28
   13a38:	9809      	ldr	r0, [sp, #36]	; 0x24
   13a3a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   13a3c:	47b8      	blx	r7
   13a3e:	1c43      	adds	r3, r0, #1
   13a40:	d100      	bne.n	13a44 <_printf_float+0x3a0>
   13a42:	e68c      	b.n	1375e <_printf_float+0xba>
   13a44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13a46:	3301      	adds	r3, #1
   13a48:	930c      	str	r3, [sp, #48]	; 0x30
   13a4a:	e7b7      	b.n	139bc <_printf_float+0x318>
   13a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13a4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13a50:	990a      	ldr	r1, [sp, #40]	; 0x28
   13a52:	9809      	ldr	r0, [sp, #36]	; 0x24
   13a54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   13a56:	47b0      	blx	r6
   13a58:	1c43      	adds	r3, r0, #1
   13a5a:	d1bd      	bne.n	139d8 <_printf_float+0x334>
   13a5c:	e67f      	b.n	1375e <_printf_float+0xba>
   13a5e:	19ea      	adds	r2, r5, r7
   13a60:	0033      	movs	r3, r6
   13a62:	990a      	ldr	r1, [sp, #40]	; 0x28
   13a64:	9809      	ldr	r0, [sp, #36]	; 0x24
   13a66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   13a68:	47a8      	blx	r5
   13a6a:	1c43      	adds	r3, r0, #1
   13a6c:	d1bd      	bne.n	139ea <_printf_float+0x346>
   13a6e:	e676      	b.n	1375e <_printf_float+0xba>
   13a70:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13a72:	2b01      	cmp	r3, #1
   13a74:	dc02      	bgt.n	13a7c <_printf_float+0x3d8>
   13a76:	2301      	movs	r3, #1
   13a78:	421a      	tst	r2, r3
   13a7a:	d038      	beq.n	13aee <_printf_float+0x44a>
   13a7c:	2301      	movs	r3, #1
   13a7e:	002a      	movs	r2, r5
   13a80:	990a      	ldr	r1, [sp, #40]	; 0x28
   13a82:	9809      	ldr	r0, [sp, #36]	; 0x24
   13a84:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   13a86:	47b8      	blx	r7
   13a88:	1c43      	adds	r3, r0, #1
   13a8a:	d100      	bne.n	13a8e <_printf_float+0x3ea>
   13a8c:	e667      	b.n	1375e <_printf_float+0xba>
   13a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13a92:	990a      	ldr	r1, [sp, #40]	; 0x28
   13a94:	9809      	ldr	r0, [sp, #36]	; 0x24
   13a96:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   13a98:	47b8      	blx	r7
   13a9a:	1c43      	adds	r3, r0, #1
   13a9c:	d100      	bne.n	13aa0 <_printf_float+0x3fc>
   13a9e:	e65e      	b.n	1375e <_printf_float+0xba>
   13aa0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   13aa2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   13aa4:	2200      	movs	r2, #0
   13aa6:	2300      	movs	r3, #0
   13aa8:	f002 fdf0 	bl	1668c <__aeabi_dcmpeq>
   13aac:	2800      	cmp	r0, #0
   13aae:	d008      	beq.n	13ac2 <_printf_float+0x41e>
   13ab0:	2500      	movs	r5, #0
   13ab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13ab4:	3b01      	subs	r3, #1
   13ab6:	429d      	cmp	r5, r3
   13ab8:	db0d      	blt.n	13ad6 <_printf_float+0x432>
   13aba:	0022      	movs	r2, r4
   13abc:	0033      	movs	r3, r6
   13abe:	3250      	adds	r2, #80	; 0x50
   13ac0:	e6ef      	b.n	138a2 <_printf_float+0x1fe>
   13ac2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13ac4:	1c6a      	adds	r2, r5, #1
   13ac6:	3b01      	subs	r3, #1
   13ac8:	990a      	ldr	r1, [sp, #40]	; 0x28
   13aca:	9809      	ldr	r0, [sp, #36]	; 0x24
   13acc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   13ace:	47a8      	blx	r5
   13ad0:	1c43      	adds	r3, r0, #1
   13ad2:	d1f2      	bne.n	13aba <_printf_float+0x416>
   13ad4:	e643      	b.n	1375e <_printf_float+0xba>
   13ad6:	0022      	movs	r2, r4
   13ad8:	2301      	movs	r3, #1
   13ada:	321a      	adds	r2, #26
   13adc:	990a      	ldr	r1, [sp, #40]	; 0x28
   13ade:	9809      	ldr	r0, [sp, #36]	; 0x24
   13ae0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   13ae2:	47b8      	blx	r7
   13ae4:	1c43      	adds	r3, r0, #1
   13ae6:	d100      	bne.n	13aea <_printf_float+0x446>
   13ae8:	e639      	b.n	1375e <_printf_float+0xba>
   13aea:	3501      	adds	r5, #1
   13aec:	e7e1      	b.n	13ab2 <_printf_float+0x40e>
   13aee:	002a      	movs	r2, r5
   13af0:	e7ea      	b.n	13ac8 <_printf_float+0x424>
   13af2:	0022      	movs	r2, r4
   13af4:	2301      	movs	r3, #1
   13af6:	3219      	adds	r2, #25
   13af8:	990a      	ldr	r1, [sp, #40]	; 0x28
   13afa:	9809      	ldr	r0, [sp, #36]	; 0x24
   13afc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   13afe:	47b0      	blx	r6
   13b00:	1c43      	adds	r3, r0, #1
   13b02:	d100      	bne.n	13b06 <_printf_float+0x462>
   13b04:	e62b      	b.n	1375e <_printf_float+0xba>
   13b06:	3501      	adds	r5, #1
   13b08:	68e3      	ldr	r3, [r4, #12]
   13b0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13b0c:	1a9b      	subs	r3, r3, r2
   13b0e:	429d      	cmp	r5, r3
   13b10:	dbef      	blt.n	13af2 <_printf_float+0x44e>
   13b12:	e6fb      	b.n	1390c <_printf_float+0x268>
   13b14:	0032      	movs	r2, r6
   13b16:	002b      	movs	r3, r5
   13b18:	0030      	movs	r0, r6
   13b1a:	0029      	movs	r1, r5
   13b1c:	f004 fda0 	bl	18660 <__aeabi_dcmpun>
   13b20:	2800      	cmp	r0, #0
   13b22:	d100      	bne.n	13b26 <_printf_float+0x482>
   13b24:	e621      	b.n	1376a <_printf_float+0xc6>
   13b26:	4d03      	ldr	r5, [pc, #12]	; (13b34 <_printf_float+0x490>)
   13b28:	2f47      	cmp	r7, #71	; 0x47
   13b2a:	d900      	bls.n	13b2e <_printf_float+0x48a>
   13b2c:	e605      	b.n	1373a <_printf_float+0x96>
   13b2e:	4d02      	ldr	r5, [pc, #8]	; (13b38 <_printf_float+0x494>)
   13b30:	e603      	b.n	1373a <_printf_float+0x96>
   13b32:	46c0      	nop			; (mov r8, r8)
   13b34:	0001aed6 	.word	0x0001aed6
   13b38:	0001aed2 	.word	0x0001aed2

00013b3c <_printf_common>:
   13b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13b3e:	0015      	movs	r5, r2
   13b40:	9301      	str	r3, [sp, #4]
   13b42:	688a      	ldr	r2, [r1, #8]
   13b44:	690b      	ldr	r3, [r1, #16]
   13b46:	9000      	str	r0, [sp, #0]
   13b48:	000c      	movs	r4, r1
   13b4a:	4293      	cmp	r3, r2
   13b4c:	da00      	bge.n	13b50 <_printf_common+0x14>
   13b4e:	0013      	movs	r3, r2
   13b50:	0022      	movs	r2, r4
   13b52:	602b      	str	r3, [r5, #0]
   13b54:	3243      	adds	r2, #67	; 0x43
   13b56:	7812      	ldrb	r2, [r2, #0]
   13b58:	2a00      	cmp	r2, #0
   13b5a:	d001      	beq.n	13b60 <_printf_common+0x24>
   13b5c:	3301      	adds	r3, #1
   13b5e:	602b      	str	r3, [r5, #0]
   13b60:	6823      	ldr	r3, [r4, #0]
   13b62:	069b      	lsls	r3, r3, #26
   13b64:	d502      	bpl.n	13b6c <_printf_common+0x30>
   13b66:	682b      	ldr	r3, [r5, #0]
   13b68:	3302      	adds	r3, #2
   13b6a:	602b      	str	r3, [r5, #0]
   13b6c:	2706      	movs	r7, #6
   13b6e:	6823      	ldr	r3, [r4, #0]
   13b70:	401f      	ands	r7, r3
   13b72:	d027      	beq.n	13bc4 <_printf_common+0x88>
   13b74:	0023      	movs	r3, r4
   13b76:	3343      	adds	r3, #67	; 0x43
   13b78:	781b      	ldrb	r3, [r3, #0]
   13b7a:	1e5a      	subs	r2, r3, #1
   13b7c:	4193      	sbcs	r3, r2
   13b7e:	6822      	ldr	r2, [r4, #0]
   13b80:	0692      	lsls	r2, r2, #26
   13b82:	d430      	bmi.n	13be6 <_printf_common+0xaa>
   13b84:	0022      	movs	r2, r4
   13b86:	9901      	ldr	r1, [sp, #4]
   13b88:	3243      	adds	r2, #67	; 0x43
   13b8a:	9800      	ldr	r0, [sp, #0]
   13b8c:	9e08      	ldr	r6, [sp, #32]
   13b8e:	47b0      	blx	r6
   13b90:	1c43      	adds	r3, r0, #1
   13b92:	d025      	beq.n	13be0 <_printf_common+0xa4>
   13b94:	2306      	movs	r3, #6
   13b96:	6820      	ldr	r0, [r4, #0]
   13b98:	682a      	ldr	r2, [r5, #0]
   13b9a:	68e1      	ldr	r1, [r4, #12]
   13b9c:	4003      	ands	r3, r0
   13b9e:	2500      	movs	r5, #0
   13ba0:	2b04      	cmp	r3, #4
   13ba2:	d103      	bne.n	13bac <_printf_common+0x70>
   13ba4:	1a8d      	subs	r5, r1, r2
   13ba6:	43eb      	mvns	r3, r5
   13ba8:	17db      	asrs	r3, r3, #31
   13baa:	401d      	ands	r5, r3
   13bac:	68a3      	ldr	r3, [r4, #8]
   13bae:	6922      	ldr	r2, [r4, #16]
   13bb0:	4293      	cmp	r3, r2
   13bb2:	dd01      	ble.n	13bb8 <_printf_common+0x7c>
   13bb4:	1a9b      	subs	r3, r3, r2
   13bb6:	18ed      	adds	r5, r5, r3
   13bb8:	2700      	movs	r7, #0
   13bba:	42bd      	cmp	r5, r7
   13bbc:	d120      	bne.n	13c00 <_printf_common+0xc4>
   13bbe:	2000      	movs	r0, #0
   13bc0:	e010      	b.n	13be4 <_printf_common+0xa8>
   13bc2:	3701      	adds	r7, #1
   13bc4:	68e3      	ldr	r3, [r4, #12]
   13bc6:	682a      	ldr	r2, [r5, #0]
   13bc8:	1a9b      	subs	r3, r3, r2
   13bca:	429f      	cmp	r7, r3
   13bcc:	dad2      	bge.n	13b74 <_printf_common+0x38>
   13bce:	0022      	movs	r2, r4
   13bd0:	2301      	movs	r3, #1
   13bd2:	3219      	adds	r2, #25
   13bd4:	9901      	ldr	r1, [sp, #4]
   13bd6:	9800      	ldr	r0, [sp, #0]
   13bd8:	9e08      	ldr	r6, [sp, #32]
   13bda:	47b0      	blx	r6
   13bdc:	1c43      	adds	r3, r0, #1
   13bde:	d1f0      	bne.n	13bc2 <_printf_common+0x86>
   13be0:	2001      	movs	r0, #1
   13be2:	4240      	negs	r0, r0
   13be4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   13be6:	2030      	movs	r0, #48	; 0x30
   13be8:	18e1      	adds	r1, r4, r3
   13bea:	3143      	adds	r1, #67	; 0x43
   13bec:	7008      	strb	r0, [r1, #0]
   13bee:	0021      	movs	r1, r4
   13bf0:	1c5a      	adds	r2, r3, #1
   13bf2:	3145      	adds	r1, #69	; 0x45
   13bf4:	7809      	ldrb	r1, [r1, #0]
   13bf6:	18a2      	adds	r2, r4, r2
   13bf8:	3243      	adds	r2, #67	; 0x43
   13bfa:	3302      	adds	r3, #2
   13bfc:	7011      	strb	r1, [r2, #0]
   13bfe:	e7c1      	b.n	13b84 <_printf_common+0x48>
   13c00:	0022      	movs	r2, r4
   13c02:	2301      	movs	r3, #1
   13c04:	321a      	adds	r2, #26
   13c06:	9901      	ldr	r1, [sp, #4]
   13c08:	9800      	ldr	r0, [sp, #0]
   13c0a:	9e08      	ldr	r6, [sp, #32]
   13c0c:	47b0      	blx	r6
   13c0e:	1c43      	adds	r3, r0, #1
   13c10:	d0e6      	beq.n	13be0 <_printf_common+0xa4>
   13c12:	3701      	adds	r7, #1
   13c14:	e7d1      	b.n	13bba <_printf_common+0x7e>
	...

00013c18 <_printf_i>:
   13c18:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c1a:	b08b      	sub	sp, #44	; 0x2c
   13c1c:	9206      	str	r2, [sp, #24]
   13c1e:	000a      	movs	r2, r1
   13c20:	3243      	adds	r2, #67	; 0x43
   13c22:	9307      	str	r3, [sp, #28]
   13c24:	9005      	str	r0, [sp, #20]
   13c26:	9204      	str	r2, [sp, #16]
   13c28:	7e0a      	ldrb	r2, [r1, #24]
   13c2a:	000c      	movs	r4, r1
   13c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13c2e:	2a6e      	cmp	r2, #110	; 0x6e
   13c30:	d100      	bne.n	13c34 <_printf_i+0x1c>
   13c32:	e08f      	b.n	13d54 <_printf_i+0x13c>
   13c34:	d817      	bhi.n	13c66 <_printf_i+0x4e>
   13c36:	2a63      	cmp	r2, #99	; 0x63
   13c38:	d02c      	beq.n	13c94 <_printf_i+0x7c>
   13c3a:	d808      	bhi.n	13c4e <_printf_i+0x36>
   13c3c:	2a00      	cmp	r2, #0
   13c3e:	d100      	bne.n	13c42 <_printf_i+0x2a>
   13c40:	e099      	b.n	13d76 <_printf_i+0x15e>
   13c42:	2a58      	cmp	r2, #88	; 0x58
   13c44:	d054      	beq.n	13cf0 <_printf_i+0xd8>
   13c46:	0026      	movs	r6, r4
   13c48:	3642      	adds	r6, #66	; 0x42
   13c4a:	7032      	strb	r2, [r6, #0]
   13c4c:	e029      	b.n	13ca2 <_printf_i+0x8a>
   13c4e:	2a64      	cmp	r2, #100	; 0x64
   13c50:	d001      	beq.n	13c56 <_printf_i+0x3e>
   13c52:	2a69      	cmp	r2, #105	; 0x69
   13c54:	d1f7      	bne.n	13c46 <_printf_i+0x2e>
   13c56:	6821      	ldr	r1, [r4, #0]
   13c58:	681a      	ldr	r2, [r3, #0]
   13c5a:	0608      	lsls	r0, r1, #24
   13c5c:	d523      	bpl.n	13ca6 <_printf_i+0x8e>
   13c5e:	1d11      	adds	r1, r2, #4
   13c60:	6019      	str	r1, [r3, #0]
   13c62:	6815      	ldr	r5, [r2, #0]
   13c64:	e025      	b.n	13cb2 <_printf_i+0x9a>
   13c66:	2a73      	cmp	r2, #115	; 0x73
   13c68:	d100      	bne.n	13c6c <_printf_i+0x54>
   13c6a:	e088      	b.n	13d7e <_printf_i+0x166>
   13c6c:	d808      	bhi.n	13c80 <_printf_i+0x68>
   13c6e:	2a6f      	cmp	r2, #111	; 0x6f
   13c70:	d029      	beq.n	13cc6 <_printf_i+0xae>
   13c72:	2a70      	cmp	r2, #112	; 0x70
   13c74:	d1e7      	bne.n	13c46 <_printf_i+0x2e>
   13c76:	2220      	movs	r2, #32
   13c78:	6809      	ldr	r1, [r1, #0]
   13c7a:	430a      	orrs	r2, r1
   13c7c:	6022      	str	r2, [r4, #0]
   13c7e:	e003      	b.n	13c88 <_printf_i+0x70>
   13c80:	2a75      	cmp	r2, #117	; 0x75
   13c82:	d020      	beq.n	13cc6 <_printf_i+0xae>
   13c84:	2a78      	cmp	r2, #120	; 0x78
   13c86:	d1de      	bne.n	13c46 <_printf_i+0x2e>
   13c88:	0022      	movs	r2, r4
   13c8a:	2178      	movs	r1, #120	; 0x78
   13c8c:	3245      	adds	r2, #69	; 0x45
   13c8e:	7011      	strb	r1, [r2, #0]
   13c90:	4a6c      	ldr	r2, [pc, #432]	; (13e44 <_printf_i+0x22c>)
   13c92:	e030      	b.n	13cf6 <_printf_i+0xde>
   13c94:	000e      	movs	r6, r1
   13c96:	681a      	ldr	r2, [r3, #0]
   13c98:	3642      	adds	r6, #66	; 0x42
   13c9a:	1d11      	adds	r1, r2, #4
   13c9c:	6019      	str	r1, [r3, #0]
   13c9e:	6813      	ldr	r3, [r2, #0]
   13ca0:	7033      	strb	r3, [r6, #0]
   13ca2:	2301      	movs	r3, #1
   13ca4:	e079      	b.n	13d9a <_printf_i+0x182>
   13ca6:	0649      	lsls	r1, r1, #25
   13ca8:	d5d9      	bpl.n	13c5e <_printf_i+0x46>
   13caa:	1d11      	adds	r1, r2, #4
   13cac:	6019      	str	r1, [r3, #0]
   13cae:	2300      	movs	r3, #0
   13cb0:	5ed5      	ldrsh	r5, [r2, r3]
   13cb2:	2d00      	cmp	r5, #0
   13cb4:	da03      	bge.n	13cbe <_printf_i+0xa6>
   13cb6:	232d      	movs	r3, #45	; 0x2d
   13cb8:	9a04      	ldr	r2, [sp, #16]
   13cba:	426d      	negs	r5, r5
   13cbc:	7013      	strb	r3, [r2, #0]
   13cbe:	4b62      	ldr	r3, [pc, #392]	; (13e48 <_printf_i+0x230>)
   13cc0:	270a      	movs	r7, #10
   13cc2:	9303      	str	r3, [sp, #12]
   13cc4:	e02f      	b.n	13d26 <_printf_i+0x10e>
   13cc6:	6820      	ldr	r0, [r4, #0]
   13cc8:	6819      	ldr	r1, [r3, #0]
   13cca:	0605      	lsls	r5, r0, #24
   13ccc:	d503      	bpl.n	13cd6 <_printf_i+0xbe>
   13cce:	1d08      	adds	r0, r1, #4
   13cd0:	6018      	str	r0, [r3, #0]
   13cd2:	680d      	ldr	r5, [r1, #0]
   13cd4:	e005      	b.n	13ce2 <_printf_i+0xca>
   13cd6:	0640      	lsls	r0, r0, #25
   13cd8:	d5f9      	bpl.n	13cce <_printf_i+0xb6>
   13cda:	680d      	ldr	r5, [r1, #0]
   13cdc:	1d08      	adds	r0, r1, #4
   13cde:	6018      	str	r0, [r3, #0]
   13ce0:	b2ad      	uxth	r5, r5
   13ce2:	4b59      	ldr	r3, [pc, #356]	; (13e48 <_printf_i+0x230>)
   13ce4:	2708      	movs	r7, #8
   13ce6:	9303      	str	r3, [sp, #12]
   13ce8:	2a6f      	cmp	r2, #111	; 0x6f
   13cea:	d018      	beq.n	13d1e <_printf_i+0x106>
   13cec:	270a      	movs	r7, #10
   13cee:	e016      	b.n	13d1e <_printf_i+0x106>
   13cf0:	3145      	adds	r1, #69	; 0x45
   13cf2:	700a      	strb	r2, [r1, #0]
   13cf4:	4a54      	ldr	r2, [pc, #336]	; (13e48 <_printf_i+0x230>)
   13cf6:	9203      	str	r2, [sp, #12]
   13cf8:	681a      	ldr	r2, [r3, #0]
   13cfa:	6821      	ldr	r1, [r4, #0]
   13cfc:	1d10      	adds	r0, r2, #4
   13cfe:	6018      	str	r0, [r3, #0]
   13d00:	6815      	ldr	r5, [r2, #0]
   13d02:	0608      	lsls	r0, r1, #24
   13d04:	d522      	bpl.n	13d4c <_printf_i+0x134>
   13d06:	07cb      	lsls	r3, r1, #31
   13d08:	d502      	bpl.n	13d10 <_printf_i+0xf8>
   13d0a:	2320      	movs	r3, #32
   13d0c:	4319      	orrs	r1, r3
   13d0e:	6021      	str	r1, [r4, #0]
   13d10:	2710      	movs	r7, #16
   13d12:	2d00      	cmp	r5, #0
   13d14:	d103      	bne.n	13d1e <_printf_i+0x106>
   13d16:	2320      	movs	r3, #32
   13d18:	6822      	ldr	r2, [r4, #0]
   13d1a:	439a      	bics	r2, r3
   13d1c:	6022      	str	r2, [r4, #0]
   13d1e:	0023      	movs	r3, r4
   13d20:	2200      	movs	r2, #0
   13d22:	3343      	adds	r3, #67	; 0x43
   13d24:	701a      	strb	r2, [r3, #0]
   13d26:	6863      	ldr	r3, [r4, #4]
   13d28:	60a3      	str	r3, [r4, #8]
   13d2a:	2b00      	cmp	r3, #0
   13d2c:	db5c      	blt.n	13de8 <_printf_i+0x1d0>
   13d2e:	2204      	movs	r2, #4
   13d30:	6821      	ldr	r1, [r4, #0]
   13d32:	4391      	bics	r1, r2
   13d34:	6021      	str	r1, [r4, #0]
   13d36:	2d00      	cmp	r5, #0
   13d38:	d158      	bne.n	13dec <_printf_i+0x1d4>
   13d3a:	9e04      	ldr	r6, [sp, #16]
   13d3c:	2b00      	cmp	r3, #0
   13d3e:	d064      	beq.n	13e0a <_printf_i+0x1f2>
   13d40:	0026      	movs	r6, r4
   13d42:	9b03      	ldr	r3, [sp, #12]
   13d44:	3642      	adds	r6, #66	; 0x42
   13d46:	781b      	ldrb	r3, [r3, #0]
   13d48:	7033      	strb	r3, [r6, #0]
   13d4a:	e05e      	b.n	13e0a <_printf_i+0x1f2>
   13d4c:	0648      	lsls	r0, r1, #25
   13d4e:	d5da      	bpl.n	13d06 <_printf_i+0xee>
   13d50:	b2ad      	uxth	r5, r5
   13d52:	e7d8      	b.n	13d06 <_printf_i+0xee>
   13d54:	6809      	ldr	r1, [r1, #0]
   13d56:	681a      	ldr	r2, [r3, #0]
   13d58:	0608      	lsls	r0, r1, #24
   13d5a:	d505      	bpl.n	13d68 <_printf_i+0x150>
   13d5c:	1d11      	adds	r1, r2, #4
   13d5e:	6019      	str	r1, [r3, #0]
   13d60:	6813      	ldr	r3, [r2, #0]
   13d62:	6962      	ldr	r2, [r4, #20]
   13d64:	601a      	str	r2, [r3, #0]
   13d66:	e006      	b.n	13d76 <_printf_i+0x15e>
   13d68:	0649      	lsls	r1, r1, #25
   13d6a:	d5f7      	bpl.n	13d5c <_printf_i+0x144>
   13d6c:	1d11      	adds	r1, r2, #4
   13d6e:	6019      	str	r1, [r3, #0]
   13d70:	6813      	ldr	r3, [r2, #0]
   13d72:	8aa2      	ldrh	r2, [r4, #20]
   13d74:	801a      	strh	r2, [r3, #0]
   13d76:	2300      	movs	r3, #0
   13d78:	9e04      	ldr	r6, [sp, #16]
   13d7a:	6123      	str	r3, [r4, #16]
   13d7c:	e054      	b.n	13e28 <_printf_i+0x210>
   13d7e:	681a      	ldr	r2, [r3, #0]
   13d80:	1d11      	adds	r1, r2, #4
   13d82:	6019      	str	r1, [r3, #0]
   13d84:	6816      	ldr	r6, [r2, #0]
   13d86:	2100      	movs	r1, #0
   13d88:	6862      	ldr	r2, [r4, #4]
   13d8a:	0030      	movs	r0, r6
   13d8c:	f001 fc24 	bl	155d8 <memchr>
   13d90:	2800      	cmp	r0, #0
   13d92:	d001      	beq.n	13d98 <_printf_i+0x180>
   13d94:	1b80      	subs	r0, r0, r6
   13d96:	6060      	str	r0, [r4, #4]
   13d98:	6863      	ldr	r3, [r4, #4]
   13d9a:	6123      	str	r3, [r4, #16]
   13d9c:	2300      	movs	r3, #0
   13d9e:	9a04      	ldr	r2, [sp, #16]
   13da0:	7013      	strb	r3, [r2, #0]
   13da2:	e041      	b.n	13e28 <_printf_i+0x210>
   13da4:	6923      	ldr	r3, [r4, #16]
   13da6:	0032      	movs	r2, r6
   13da8:	9906      	ldr	r1, [sp, #24]
   13daa:	9805      	ldr	r0, [sp, #20]
   13dac:	9d07      	ldr	r5, [sp, #28]
   13dae:	47a8      	blx	r5
   13db0:	1c43      	adds	r3, r0, #1
   13db2:	d043      	beq.n	13e3c <_printf_i+0x224>
   13db4:	6823      	ldr	r3, [r4, #0]
   13db6:	2500      	movs	r5, #0
   13db8:	079b      	lsls	r3, r3, #30
   13dba:	d40f      	bmi.n	13ddc <_printf_i+0x1c4>
   13dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13dbe:	68e0      	ldr	r0, [r4, #12]
   13dc0:	4298      	cmp	r0, r3
   13dc2:	da3d      	bge.n	13e40 <_printf_i+0x228>
   13dc4:	0018      	movs	r0, r3
   13dc6:	e03b      	b.n	13e40 <_printf_i+0x228>
   13dc8:	0022      	movs	r2, r4
   13dca:	2301      	movs	r3, #1
   13dcc:	3219      	adds	r2, #25
   13dce:	9906      	ldr	r1, [sp, #24]
   13dd0:	9805      	ldr	r0, [sp, #20]
   13dd2:	9e07      	ldr	r6, [sp, #28]
   13dd4:	47b0      	blx	r6
   13dd6:	1c43      	adds	r3, r0, #1
   13dd8:	d030      	beq.n	13e3c <_printf_i+0x224>
   13dda:	3501      	adds	r5, #1
   13ddc:	68e3      	ldr	r3, [r4, #12]
   13dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13de0:	1a9b      	subs	r3, r3, r2
   13de2:	429d      	cmp	r5, r3
   13de4:	dbf0      	blt.n	13dc8 <_printf_i+0x1b0>
   13de6:	e7e9      	b.n	13dbc <_printf_i+0x1a4>
   13de8:	2d00      	cmp	r5, #0
   13dea:	d0a9      	beq.n	13d40 <_printf_i+0x128>
   13dec:	9e04      	ldr	r6, [sp, #16]
   13dee:	0028      	movs	r0, r5
   13df0:	0039      	movs	r1, r7
   13df2:	f002 fb4b 	bl	1648c <__aeabi_uidivmod>
   13df6:	9b03      	ldr	r3, [sp, #12]
   13df8:	3e01      	subs	r6, #1
   13dfa:	5c5b      	ldrb	r3, [r3, r1]
   13dfc:	0028      	movs	r0, r5
   13dfe:	7033      	strb	r3, [r6, #0]
   13e00:	0039      	movs	r1, r7
   13e02:	f002 fabd 	bl	16380 <__udivsi3>
   13e06:	1e05      	subs	r5, r0, #0
   13e08:	d1f1      	bne.n	13dee <_printf_i+0x1d6>
   13e0a:	2f08      	cmp	r7, #8
   13e0c:	d109      	bne.n	13e22 <_printf_i+0x20a>
   13e0e:	6823      	ldr	r3, [r4, #0]
   13e10:	07db      	lsls	r3, r3, #31
   13e12:	d506      	bpl.n	13e22 <_printf_i+0x20a>
   13e14:	6863      	ldr	r3, [r4, #4]
   13e16:	6922      	ldr	r2, [r4, #16]
   13e18:	4293      	cmp	r3, r2
   13e1a:	dc02      	bgt.n	13e22 <_printf_i+0x20a>
   13e1c:	2330      	movs	r3, #48	; 0x30
   13e1e:	3e01      	subs	r6, #1
   13e20:	7033      	strb	r3, [r6, #0]
   13e22:	9b04      	ldr	r3, [sp, #16]
   13e24:	1b9b      	subs	r3, r3, r6
   13e26:	6123      	str	r3, [r4, #16]
   13e28:	9b07      	ldr	r3, [sp, #28]
   13e2a:	aa09      	add	r2, sp, #36	; 0x24
   13e2c:	9300      	str	r3, [sp, #0]
   13e2e:	0021      	movs	r1, r4
   13e30:	9b06      	ldr	r3, [sp, #24]
   13e32:	9805      	ldr	r0, [sp, #20]
   13e34:	f7ff fe82 	bl	13b3c <_printf_common>
   13e38:	1c43      	adds	r3, r0, #1
   13e3a:	d1b3      	bne.n	13da4 <_printf_i+0x18c>
   13e3c:	2001      	movs	r0, #1
   13e3e:	4240      	negs	r0, r0
   13e40:	b00b      	add	sp, #44	; 0x2c
   13e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e44:	0001aeed 	.word	0x0001aeed
   13e48:	0001aedc 	.word	0x0001aedc

00013e4c <iprintf>:
   13e4c:	b40f      	push	{r0, r1, r2, r3}
   13e4e:	4b0b      	ldr	r3, [pc, #44]	; (13e7c <iprintf+0x30>)
   13e50:	b513      	push	{r0, r1, r4, lr}
   13e52:	681c      	ldr	r4, [r3, #0]
   13e54:	2c00      	cmp	r4, #0
   13e56:	d005      	beq.n	13e64 <iprintf+0x18>
   13e58:	69a3      	ldr	r3, [r4, #24]
   13e5a:	2b00      	cmp	r3, #0
   13e5c:	d102      	bne.n	13e64 <iprintf+0x18>
   13e5e:	0020      	movs	r0, r4
   13e60:	f001 faac 	bl	153bc <__sinit>
   13e64:	ab05      	add	r3, sp, #20
   13e66:	9a04      	ldr	r2, [sp, #16]
   13e68:	68a1      	ldr	r1, [r4, #8]
   13e6a:	0020      	movs	r0, r4
   13e6c:	9301      	str	r3, [sp, #4]
   13e6e:	f002 f83f 	bl	15ef0 <_vfiprintf_r>
   13e72:	bc16      	pop	{r1, r2, r4}
   13e74:	bc08      	pop	{r3}
   13e76:	b004      	add	sp, #16
   13e78:	4718      	bx	r3
   13e7a:	46c0      	nop			; (mov r8, r8)
   13e7c:	20000018 	.word	0x20000018

00013e80 <putchar>:
   13e80:	4b08      	ldr	r3, [pc, #32]	; (13ea4 <putchar+0x24>)
   13e82:	b570      	push	{r4, r5, r6, lr}
   13e84:	681c      	ldr	r4, [r3, #0]
   13e86:	0005      	movs	r5, r0
   13e88:	2c00      	cmp	r4, #0
   13e8a:	d005      	beq.n	13e98 <putchar+0x18>
   13e8c:	69a3      	ldr	r3, [r4, #24]
   13e8e:	2b00      	cmp	r3, #0
   13e90:	d102      	bne.n	13e98 <putchar+0x18>
   13e92:	0020      	movs	r0, r4
   13e94:	f001 fa92 	bl	153bc <__sinit>
   13e98:	0029      	movs	r1, r5
   13e9a:	68a2      	ldr	r2, [r4, #8]
   13e9c:	0020      	movs	r0, r4
   13e9e:	f002 f943 	bl	16128 <_putc_r>
   13ea2:	bd70      	pop	{r4, r5, r6, pc}
   13ea4:	20000018 	.word	0x20000018

00013ea8 <_puts_r>:
   13ea8:	b570      	push	{r4, r5, r6, lr}
   13eaa:	0005      	movs	r5, r0
   13eac:	000e      	movs	r6, r1
   13eae:	2800      	cmp	r0, #0
   13eb0:	d004      	beq.n	13ebc <_puts_r+0x14>
   13eb2:	6983      	ldr	r3, [r0, #24]
   13eb4:	2b00      	cmp	r3, #0
   13eb6:	d101      	bne.n	13ebc <_puts_r+0x14>
   13eb8:	f001 fa80 	bl	153bc <__sinit>
   13ebc:	69ab      	ldr	r3, [r5, #24]
   13ebe:	68ac      	ldr	r4, [r5, #8]
   13ec0:	2b00      	cmp	r3, #0
   13ec2:	d102      	bne.n	13eca <_puts_r+0x22>
   13ec4:	0028      	movs	r0, r5
   13ec6:	f001 fa79 	bl	153bc <__sinit>
   13eca:	4b24      	ldr	r3, [pc, #144]	; (13f5c <_puts_r+0xb4>)
   13ecc:	429c      	cmp	r4, r3
   13ece:	d10f      	bne.n	13ef0 <_puts_r+0x48>
   13ed0:	686c      	ldr	r4, [r5, #4]
   13ed2:	89a3      	ldrh	r3, [r4, #12]
   13ed4:	071b      	lsls	r3, r3, #28
   13ed6:	d502      	bpl.n	13ede <_puts_r+0x36>
   13ed8:	6923      	ldr	r3, [r4, #16]
   13eda:	2b00      	cmp	r3, #0
   13edc:	d120      	bne.n	13f20 <_puts_r+0x78>
   13ede:	0021      	movs	r1, r4
   13ee0:	0028      	movs	r0, r5
   13ee2:	f000 fa91 	bl	14408 <__swsetup_r>
   13ee6:	2800      	cmp	r0, #0
   13ee8:	d01a      	beq.n	13f20 <_puts_r+0x78>
   13eea:	2001      	movs	r0, #1
   13eec:	4240      	negs	r0, r0
   13eee:	bd70      	pop	{r4, r5, r6, pc}
   13ef0:	4b1b      	ldr	r3, [pc, #108]	; (13f60 <_puts_r+0xb8>)
   13ef2:	429c      	cmp	r4, r3
   13ef4:	d101      	bne.n	13efa <_puts_r+0x52>
   13ef6:	68ac      	ldr	r4, [r5, #8]
   13ef8:	e7eb      	b.n	13ed2 <_puts_r+0x2a>
   13efa:	4b1a      	ldr	r3, [pc, #104]	; (13f64 <_puts_r+0xbc>)
   13efc:	429c      	cmp	r4, r3
   13efe:	d1e8      	bne.n	13ed2 <_puts_r+0x2a>
   13f00:	68ec      	ldr	r4, [r5, #12]
   13f02:	e7e6      	b.n	13ed2 <_puts_r+0x2a>
   13f04:	3b01      	subs	r3, #1
   13f06:	3601      	adds	r6, #1
   13f08:	60a3      	str	r3, [r4, #8]
   13f0a:	2b00      	cmp	r3, #0
   13f0c:	da04      	bge.n	13f18 <_puts_r+0x70>
   13f0e:	69a2      	ldr	r2, [r4, #24]
   13f10:	4293      	cmp	r3, r2
   13f12:	db16      	blt.n	13f42 <_puts_r+0x9a>
   13f14:	290a      	cmp	r1, #10
   13f16:	d014      	beq.n	13f42 <_puts_r+0x9a>
   13f18:	6823      	ldr	r3, [r4, #0]
   13f1a:	1c5a      	adds	r2, r3, #1
   13f1c:	6022      	str	r2, [r4, #0]
   13f1e:	7019      	strb	r1, [r3, #0]
   13f20:	7831      	ldrb	r1, [r6, #0]
   13f22:	68a3      	ldr	r3, [r4, #8]
   13f24:	2900      	cmp	r1, #0
   13f26:	d1ed      	bne.n	13f04 <_puts_r+0x5c>
   13f28:	3b01      	subs	r3, #1
   13f2a:	60a3      	str	r3, [r4, #8]
   13f2c:	2b00      	cmp	r3, #0
   13f2e:	da0f      	bge.n	13f50 <_puts_r+0xa8>
   13f30:	0022      	movs	r2, r4
   13f32:	310a      	adds	r1, #10
   13f34:	0028      	movs	r0, r5
   13f36:	f000 fa05 	bl	14344 <__swbuf_r>
   13f3a:	1c43      	adds	r3, r0, #1
   13f3c:	d0d5      	beq.n	13eea <_puts_r+0x42>
   13f3e:	200a      	movs	r0, #10
   13f40:	e7d5      	b.n	13eee <_puts_r+0x46>
   13f42:	0022      	movs	r2, r4
   13f44:	0028      	movs	r0, r5
   13f46:	f000 f9fd 	bl	14344 <__swbuf_r>
   13f4a:	1c43      	adds	r3, r0, #1
   13f4c:	d1e8      	bne.n	13f20 <_puts_r+0x78>
   13f4e:	e7cc      	b.n	13eea <_puts_r+0x42>
   13f50:	200a      	movs	r0, #10
   13f52:	6823      	ldr	r3, [r4, #0]
   13f54:	1c5a      	adds	r2, r3, #1
   13f56:	6022      	str	r2, [r4, #0]
   13f58:	7018      	strb	r0, [r3, #0]
   13f5a:	e7c8      	b.n	13eee <_puts_r+0x46>
   13f5c:	0001b02c 	.word	0x0001b02c
   13f60:	0001b04c 	.word	0x0001b04c
   13f64:	0001b00c 	.word	0x0001b00c

00013f68 <puts>:
   13f68:	b510      	push	{r4, lr}
   13f6a:	4b03      	ldr	r3, [pc, #12]	; (13f78 <puts+0x10>)
   13f6c:	0001      	movs	r1, r0
   13f6e:	6818      	ldr	r0, [r3, #0]
   13f70:	f7ff ff9a 	bl	13ea8 <_puts_r>
   13f74:	bd10      	pop	{r4, pc}
   13f76:	46c0      	nop			; (mov r8, r8)
   13f78:	20000018 	.word	0x20000018

00013f7c <_sbrk_r>:
   13f7c:	2300      	movs	r3, #0
   13f7e:	b570      	push	{r4, r5, r6, lr}
   13f80:	4c06      	ldr	r4, [pc, #24]	; (13f9c <_sbrk_r+0x20>)
   13f82:	0005      	movs	r5, r0
   13f84:	0008      	movs	r0, r1
   13f86:	6023      	str	r3, [r4, #0]
   13f88:	f7fd fde4 	bl	11b54 <_sbrk>
   13f8c:	1c43      	adds	r3, r0, #1
   13f8e:	d103      	bne.n	13f98 <_sbrk_r+0x1c>
   13f90:	6823      	ldr	r3, [r4, #0]
   13f92:	2b00      	cmp	r3, #0
   13f94:	d000      	beq.n	13f98 <_sbrk_r+0x1c>
   13f96:	602b      	str	r3, [r5, #0]
   13f98:	bd70      	pop	{r4, r5, r6, pc}
   13f9a:	46c0      	nop			; (mov r8, r8)
   13f9c:	2000091c 	.word	0x2000091c

00013fa0 <setbuf>:
   13fa0:	424a      	negs	r2, r1
   13fa2:	414a      	adcs	r2, r1
   13fa4:	2380      	movs	r3, #128	; 0x80
   13fa6:	b510      	push	{r4, lr}
   13fa8:	0052      	lsls	r2, r2, #1
   13faa:	00db      	lsls	r3, r3, #3
   13fac:	f000 f802 	bl	13fb4 <setvbuf>
   13fb0:	bd10      	pop	{r4, pc}
	...

00013fb4 <setvbuf>:
   13fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13fb6:	001d      	movs	r5, r3
   13fb8:	4b4f      	ldr	r3, [pc, #316]	; (140f8 <setvbuf+0x144>)
   13fba:	b085      	sub	sp, #20
   13fbc:	681e      	ldr	r6, [r3, #0]
   13fbe:	0004      	movs	r4, r0
   13fc0:	000f      	movs	r7, r1
   13fc2:	9200      	str	r2, [sp, #0]
   13fc4:	2e00      	cmp	r6, #0
   13fc6:	d005      	beq.n	13fd4 <setvbuf+0x20>
   13fc8:	69b3      	ldr	r3, [r6, #24]
   13fca:	2b00      	cmp	r3, #0
   13fcc:	d102      	bne.n	13fd4 <setvbuf+0x20>
   13fce:	0030      	movs	r0, r6
   13fd0:	f001 f9f4 	bl	153bc <__sinit>
   13fd4:	4b49      	ldr	r3, [pc, #292]	; (140fc <setvbuf+0x148>)
   13fd6:	429c      	cmp	r4, r3
   13fd8:	d150      	bne.n	1407c <setvbuf+0xc8>
   13fda:	6874      	ldr	r4, [r6, #4]
   13fdc:	9b00      	ldr	r3, [sp, #0]
   13fde:	2b02      	cmp	r3, #2
   13fe0:	d005      	beq.n	13fee <setvbuf+0x3a>
   13fe2:	2b01      	cmp	r3, #1
   13fe4:	d900      	bls.n	13fe8 <setvbuf+0x34>
   13fe6:	e084      	b.n	140f2 <setvbuf+0x13e>
   13fe8:	2d00      	cmp	r5, #0
   13fea:	da00      	bge.n	13fee <setvbuf+0x3a>
   13fec:	e081      	b.n	140f2 <setvbuf+0x13e>
   13fee:	0021      	movs	r1, r4
   13ff0:	0030      	movs	r0, r6
   13ff2:	f001 f975 	bl	152e0 <_fflush_r>
   13ff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13ff8:	2900      	cmp	r1, #0
   13ffa:	d008      	beq.n	1400e <setvbuf+0x5a>
   13ffc:	0023      	movs	r3, r4
   13ffe:	3344      	adds	r3, #68	; 0x44
   14000:	4299      	cmp	r1, r3
   14002:	d002      	beq.n	1400a <setvbuf+0x56>
   14004:	0030      	movs	r0, r6
   14006:	f7ff fa09 	bl	1341c <_free_r>
   1400a:	2300      	movs	r3, #0
   1400c:	6363      	str	r3, [r4, #52]	; 0x34
   1400e:	2300      	movs	r3, #0
   14010:	61a3      	str	r3, [r4, #24]
   14012:	6063      	str	r3, [r4, #4]
   14014:	89a3      	ldrh	r3, [r4, #12]
   14016:	061b      	lsls	r3, r3, #24
   14018:	d503      	bpl.n	14022 <setvbuf+0x6e>
   1401a:	6921      	ldr	r1, [r4, #16]
   1401c:	0030      	movs	r0, r6
   1401e:	f7ff f9fd 	bl	1341c <_free_r>
   14022:	89a3      	ldrh	r3, [r4, #12]
   14024:	4a36      	ldr	r2, [pc, #216]	; (14100 <setvbuf+0x14c>)
   14026:	4013      	ands	r3, r2
   14028:	81a3      	strh	r3, [r4, #12]
   1402a:	9b00      	ldr	r3, [sp, #0]
   1402c:	2b02      	cmp	r3, #2
   1402e:	d05a      	beq.n	140e6 <setvbuf+0x132>
   14030:	ab03      	add	r3, sp, #12
   14032:	aa02      	add	r2, sp, #8
   14034:	0021      	movs	r1, r4
   14036:	0030      	movs	r0, r6
   14038:	f001 fa62 	bl	15500 <__swhatbuf_r>
   1403c:	89a3      	ldrh	r3, [r4, #12]
   1403e:	4318      	orrs	r0, r3
   14040:	81a0      	strh	r0, [r4, #12]
   14042:	2d00      	cmp	r5, #0
   14044:	d124      	bne.n	14090 <setvbuf+0xdc>
   14046:	9d02      	ldr	r5, [sp, #8]
   14048:	0028      	movs	r0, r5
   1404a:	f7ff f99d 	bl	13388 <malloc>
   1404e:	9501      	str	r5, [sp, #4]
   14050:	1e07      	subs	r7, r0, #0
   14052:	d142      	bne.n	140da <setvbuf+0x126>
   14054:	9b02      	ldr	r3, [sp, #8]
   14056:	9301      	str	r3, [sp, #4]
   14058:	42ab      	cmp	r3, r5
   1405a:	d139      	bne.n	140d0 <setvbuf+0x11c>
   1405c:	2001      	movs	r0, #1
   1405e:	4240      	negs	r0, r0
   14060:	2302      	movs	r3, #2
   14062:	89a2      	ldrh	r2, [r4, #12]
   14064:	4313      	orrs	r3, r2
   14066:	81a3      	strh	r3, [r4, #12]
   14068:	2300      	movs	r3, #0
   1406a:	60a3      	str	r3, [r4, #8]
   1406c:	0023      	movs	r3, r4
   1406e:	3347      	adds	r3, #71	; 0x47
   14070:	6023      	str	r3, [r4, #0]
   14072:	6123      	str	r3, [r4, #16]
   14074:	2301      	movs	r3, #1
   14076:	6163      	str	r3, [r4, #20]
   14078:	b005      	add	sp, #20
   1407a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1407c:	4b21      	ldr	r3, [pc, #132]	; (14104 <setvbuf+0x150>)
   1407e:	429c      	cmp	r4, r3
   14080:	d101      	bne.n	14086 <setvbuf+0xd2>
   14082:	68b4      	ldr	r4, [r6, #8]
   14084:	e7aa      	b.n	13fdc <setvbuf+0x28>
   14086:	4b20      	ldr	r3, [pc, #128]	; (14108 <setvbuf+0x154>)
   14088:	429c      	cmp	r4, r3
   1408a:	d1a7      	bne.n	13fdc <setvbuf+0x28>
   1408c:	68f4      	ldr	r4, [r6, #12]
   1408e:	e7a5      	b.n	13fdc <setvbuf+0x28>
   14090:	2f00      	cmp	r7, #0
   14092:	d0d9      	beq.n	14048 <setvbuf+0x94>
   14094:	69b3      	ldr	r3, [r6, #24]
   14096:	2b00      	cmp	r3, #0
   14098:	d102      	bne.n	140a0 <setvbuf+0xec>
   1409a:	0030      	movs	r0, r6
   1409c:	f001 f98e 	bl	153bc <__sinit>
   140a0:	9b00      	ldr	r3, [sp, #0]
   140a2:	2b01      	cmp	r3, #1
   140a4:	d103      	bne.n	140ae <setvbuf+0xfa>
   140a6:	89a3      	ldrh	r3, [r4, #12]
   140a8:	9a00      	ldr	r2, [sp, #0]
   140aa:	431a      	orrs	r2, r3
   140ac:	81a2      	strh	r2, [r4, #12]
   140ae:	2008      	movs	r0, #8
   140b0:	89a3      	ldrh	r3, [r4, #12]
   140b2:	6027      	str	r7, [r4, #0]
   140b4:	6127      	str	r7, [r4, #16]
   140b6:	6165      	str	r5, [r4, #20]
   140b8:	4018      	ands	r0, r3
   140ba:	d018      	beq.n	140ee <setvbuf+0x13a>
   140bc:	2001      	movs	r0, #1
   140be:	4018      	ands	r0, r3
   140c0:	2300      	movs	r3, #0
   140c2:	4298      	cmp	r0, r3
   140c4:	d011      	beq.n	140ea <setvbuf+0x136>
   140c6:	426d      	negs	r5, r5
   140c8:	60a3      	str	r3, [r4, #8]
   140ca:	61a5      	str	r5, [r4, #24]
   140cc:	0018      	movs	r0, r3
   140ce:	e7d3      	b.n	14078 <setvbuf+0xc4>
   140d0:	9801      	ldr	r0, [sp, #4]
   140d2:	f7ff f959 	bl	13388 <malloc>
   140d6:	1e07      	subs	r7, r0, #0
   140d8:	d0c0      	beq.n	1405c <setvbuf+0xa8>
   140da:	2380      	movs	r3, #128	; 0x80
   140dc:	89a2      	ldrh	r2, [r4, #12]
   140de:	9d01      	ldr	r5, [sp, #4]
   140e0:	4313      	orrs	r3, r2
   140e2:	81a3      	strh	r3, [r4, #12]
   140e4:	e7d6      	b.n	14094 <setvbuf+0xe0>
   140e6:	2000      	movs	r0, #0
   140e8:	e7ba      	b.n	14060 <setvbuf+0xac>
   140ea:	60a5      	str	r5, [r4, #8]
   140ec:	e7c4      	b.n	14078 <setvbuf+0xc4>
   140ee:	60a0      	str	r0, [r4, #8]
   140f0:	e7c2      	b.n	14078 <setvbuf+0xc4>
   140f2:	2001      	movs	r0, #1
   140f4:	4240      	negs	r0, r0
   140f6:	e7bf      	b.n	14078 <setvbuf+0xc4>
   140f8:	20000018 	.word	0x20000018
   140fc:	0001b02c 	.word	0x0001b02c
   14100:	fffff35c 	.word	0xfffff35c
   14104:	0001b04c 	.word	0x0001b04c
   14108:	0001b00c 	.word	0x0001b00c

0001410c <siprintf>:
   1410c:	b40e      	push	{r1, r2, r3}
   1410e:	b510      	push	{r4, lr}
   14110:	b09d      	sub	sp, #116	; 0x74
   14112:	a902      	add	r1, sp, #8
   14114:	9002      	str	r0, [sp, #8]
   14116:	6108      	str	r0, [r1, #16]
   14118:	480b      	ldr	r0, [pc, #44]	; (14148 <siprintf+0x3c>)
   1411a:	2482      	movs	r4, #130	; 0x82
   1411c:	6088      	str	r0, [r1, #8]
   1411e:	6148      	str	r0, [r1, #20]
   14120:	2001      	movs	r0, #1
   14122:	4240      	negs	r0, r0
   14124:	ab1f      	add	r3, sp, #124	; 0x7c
   14126:	81c8      	strh	r0, [r1, #14]
   14128:	4808      	ldr	r0, [pc, #32]	; (1414c <siprintf+0x40>)
   1412a:	cb04      	ldmia	r3!, {r2}
   1412c:	00a4      	lsls	r4, r4, #2
   1412e:	6800      	ldr	r0, [r0, #0]
   14130:	9301      	str	r3, [sp, #4]
   14132:	818c      	strh	r4, [r1, #12]
   14134:	f001 fdb0 	bl	15c98 <_svfiprintf_r>
   14138:	2300      	movs	r3, #0
   1413a:	9a02      	ldr	r2, [sp, #8]
   1413c:	7013      	strb	r3, [r2, #0]
   1413e:	b01d      	add	sp, #116	; 0x74
   14140:	bc10      	pop	{r4}
   14142:	bc08      	pop	{r3}
   14144:	b003      	add	sp, #12
   14146:	4718      	bx	r3
   14148:	7fffffff 	.word	0x7fffffff
   1414c:	20000018 	.word	0x20000018

00014150 <strcmp>:
   14150:	7802      	ldrb	r2, [r0, #0]
   14152:	780b      	ldrb	r3, [r1, #0]
   14154:	2a00      	cmp	r2, #0
   14156:	d003      	beq.n	14160 <strcmp+0x10>
   14158:	3001      	adds	r0, #1
   1415a:	3101      	adds	r1, #1
   1415c:	429a      	cmp	r2, r3
   1415e:	d0f7      	beq.n	14150 <strcmp>
   14160:	1ad0      	subs	r0, r2, r3
   14162:	4770      	bx	lr

00014164 <strcpy>:
   14164:	1c03      	adds	r3, r0, #0
   14166:	780a      	ldrb	r2, [r1, #0]
   14168:	3101      	adds	r1, #1
   1416a:	701a      	strb	r2, [r3, #0]
   1416c:	3301      	adds	r3, #1
   1416e:	2a00      	cmp	r2, #0
   14170:	d1f9      	bne.n	14166 <strcpy+0x2>
   14172:	4770      	bx	lr

00014174 <strdup>:
   14174:	b510      	push	{r4, lr}
   14176:	4b03      	ldr	r3, [pc, #12]	; (14184 <strdup+0x10>)
   14178:	0001      	movs	r1, r0
   1417a:	6818      	ldr	r0, [r3, #0]
   1417c:	f000 f804 	bl	14188 <_strdup_r>
   14180:	bd10      	pop	{r4, pc}
   14182:	46c0      	nop			; (mov r8, r8)
   14184:	20000018 	.word	0x20000018

00014188 <_strdup_r>:
   14188:	b570      	push	{r4, r5, r6, lr}
   1418a:	0005      	movs	r5, r0
   1418c:	0008      	movs	r0, r1
   1418e:	000e      	movs	r6, r1
   14190:	f000 f80d 	bl	141ae <strlen>
   14194:	1c44      	adds	r4, r0, #1
   14196:	0021      	movs	r1, r4
   14198:	0028      	movs	r0, r5
   1419a:	f7ff f989 	bl	134b0 <_malloc_r>
   1419e:	1e05      	subs	r5, r0, #0
   141a0:	d003      	beq.n	141aa <_strdup_r+0x22>
   141a2:	0022      	movs	r2, r4
   141a4:	0031      	movs	r1, r6
   141a6:	f7ff f915 	bl	133d4 <memcpy>
   141aa:	0028      	movs	r0, r5
   141ac:	bd70      	pop	{r4, r5, r6, pc}

000141ae <strlen>:
   141ae:	2300      	movs	r3, #0
   141b0:	5cc2      	ldrb	r2, [r0, r3]
   141b2:	3301      	adds	r3, #1
   141b4:	2a00      	cmp	r2, #0
   141b6:	d1fb      	bne.n	141b0 <strlen+0x2>
   141b8:	1e58      	subs	r0, r3, #1
   141ba:	4770      	bx	lr

000141bc <strncmp>:
   141bc:	2300      	movs	r3, #0
   141be:	b530      	push	{r4, r5, lr}
   141c0:	429a      	cmp	r2, r3
   141c2:	d00a      	beq.n	141da <strncmp+0x1e>
   141c4:	3a01      	subs	r2, #1
   141c6:	5cc4      	ldrb	r4, [r0, r3]
   141c8:	5ccd      	ldrb	r5, [r1, r3]
   141ca:	42ac      	cmp	r4, r5
   141cc:	d104      	bne.n	141d8 <strncmp+0x1c>
   141ce:	429a      	cmp	r2, r3
   141d0:	d002      	beq.n	141d8 <strncmp+0x1c>
   141d2:	3301      	adds	r3, #1
   141d4:	2c00      	cmp	r4, #0
   141d6:	d1f6      	bne.n	141c6 <strncmp+0xa>
   141d8:	1b63      	subs	r3, r4, r5
   141da:	0018      	movs	r0, r3
   141dc:	bd30      	pop	{r4, r5, pc}

000141de <strstr>:
   141de:	b510      	push	{r4, lr}
   141e0:	0002      	movs	r2, r0
   141e2:	7800      	ldrb	r0, [r0, #0]
   141e4:	2800      	cmp	r0, #0
   141e6:	d104      	bne.n	141f2 <strstr+0x14>
   141e8:	7809      	ldrb	r1, [r1, #0]
   141ea:	2900      	cmp	r1, #0
   141ec:	d00d      	beq.n	1420a <strstr+0x2c>
   141ee:	bd10      	pop	{r4, pc}
   141f0:	3201      	adds	r2, #1
   141f2:	7810      	ldrb	r0, [r2, #0]
   141f4:	2800      	cmp	r0, #0
   141f6:	d0fa      	beq.n	141ee <strstr+0x10>
   141f8:	2300      	movs	r3, #0
   141fa:	5cc8      	ldrb	r0, [r1, r3]
   141fc:	2800      	cmp	r0, #0
   141fe:	d004      	beq.n	1420a <strstr+0x2c>
   14200:	5cd4      	ldrb	r4, [r2, r3]
   14202:	4284      	cmp	r4, r0
   14204:	d1f4      	bne.n	141f0 <strstr+0x12>
   14206:	3301      	adds	r3, #1
   14208:	e7f7      	b.n	141fa <strstr+0x1c>
   1420a:	0010      	movs	r0, r2
   1420c:	e7ef      	b.n	141ee <strstr+0x10>
	...

00014210 <_strtol_l.isra.0>:
   14210:	b5f0      	push	{r4, r5, r6, r7, lr}
   14212:	001f      	movs	r7, r3
   14214:	000e      	movs	r6, r1
   14216:	b087      	sub	sp, #28
   14218:	9005      	str	r0, [sp, #20]
   1421a:	9103      	str	r1, [sp, #12]
   1421c:	9202      	str	r2, [sp, #8]
   1421e:	980c      	ldr	r0, [sp, #48]	; 0x30
   14220:	7834      	ldrb	r4, [r6, #0]
   14222:	f7ff f8ad 	bl	13380 <__locale_ctype_ptr_l>
   14226:	2208      	movs	r2, #8
   14228:	1900      	adds	r0, r0, r4
   1422a:	7843      	ldrb	r3, [r0, #1]
   1422c:	1c75      	adds	r5, r6, #1
   1422e:	4013      	ands	r3, r2
   14230:	d10c      	bne.n	1424c <_strtol_l.isra.0+0x3c>
   14232:	2c2d      	cmp	r4, #45	; 0x2d
   14234:	d10c      	bne.n	14250 <_strtol_l.isra.0+0x40>
   14236:	3301      	adds	r3, #1
   14238:	782c      	ldrb	r4, [r5, #0]
   1423a:	9301      	str	r3, [sp, #4]
   1423c:	1cb5      	adds	r5, r6, #2
   1423e:	2f00      	cmp	r7, #0
   14240:	d00c      	beq.n	1425c <_strtol_l.isra.0+0x4c>
   14242:	2f10      	cmp	r7, #16
   14244:	d114      	bne.n	14270 <_strtol_l.isra.0+0x60>
   14246:	2c30      	cmp	r4, #48	; 0x30
   14248:	d00a      	beq.n	14260 <_strtol_l.isra.0+0x50>
   1424a:	e011      	b.n	14270 <_strtol_l.isra.0+0x60>
   1424c:	002e      	movs	r6, r5
   1424e:	e7e6      	b.n	1421e <_strtol_l.isra.0+0xe>
   14250:	9301      	str	r3, [sp, #4]
   14252:	2c2b      	cmp	r4, #43	; 0x2b
   14254:	d1f3      	bne.n	1423e <_strtol_l.isra.0+0x2e>
   14256:	782c      	ldrb	r4, [r5, #0]
   14258:	1cb5      	adds	r5, r6, #2
   1425a:	e7f0      	b.n	1423e <_strtol_l.isra.0+0x2e>
   1425c:	2c30      	cmp	r4, #48	; 0x30
   1425e:	d12f      	bne.n	142c0 <_strtol_l.isra.0+0xb0>
   14260:	2220      	movs	r2, #32
   14262:	782b      	ldrb	r3, [r5, #0]
   14264:	4393      	bics	r3, r2
   14266:	2b58      	cmp	r3, #88	; 0x58
   14268:	d151      	bne.n	1430e <_strtol_l.isra.0+0xfe>
   1426a:	2710      	movs	r7, #16
   1426c:	786c      	ldrb	r4, [r5, #1]
   1426e:	3502      	adds	r5, #2
   14270:	9b01      	ldr	r3, [sp, #4]
   14272:	4a29      	ldr	r2, [pc, #164]	; (14318 <_strtol_l.isra.0+0x108>)
   14274:	0039      	movs	r1, r7
   14276:	189e      	adds	r6, r3, r2
   14278:	0030      	movs	r0, r6
   1427a:	f002 f907 	bl	1648c <__aeabi_uidivmod>
   1427e:	0030      	movs	r0, r6
   14280:	9104      	str	r1, [sp, #16]
   14282:	0039      	movs	r1, r7
   14284:	f002 f87c 	bl	16380 <__udivsi3>
   14288:	2101      	movs	r1, #1
   1428a:	2300      	movs	r3, #0
   1428c:	4249      	negs	r1, r1
   1428e:	0002      	movs	r2, r0
   14290:	468c      	mov	ip, r1
   14292:	0018      	movs	r0, r3
   14294:	0021      	movs	r1, r4
   14296:	3930      	subs	r1, #48	; 0x30
   14298:	2909      	cmp	r1, #9
   1429a:	d813      	bhi.n	142c4 <_strtol_l.isra.0+0xb4>
   1429c:	000c      	movs	r4, r1
   1429e:	42a7      	cmp	r7, r4
   142a0:	dd1c      	ble.n	142dc <_strtol_l.isra.0+0xcc>
   142a2:	1c59      	adds	r1, r3, #1
   142a4:	d009      	beq.n	142ba <_strtol_l.isra.0+0xaa>
   142a6:	4663      	mov	r3, ip
   142a8:	4282      	cmp	r2, r0
   142aa:	d306      	bcc.n	142ba <_strtol_l.isra.0+0xaa>
   142ac:	d102      	bne.n	142b4 <_strtol_l.isra.0+0xa4>
   142ae:	9904      	ldr	r1, [sp, #16]
   142b0:	42a1      	cmp	r1, r4
   142b2:	db02      	blt.n	142ba <_strtol_l.isra.0+0xaa>
   142b4:	2301      	movs	r3, #1
   142b6:	4378      	muls	r0, r7
   142b8:	1820      	adds	r0, r4, r0
   142ba:	782c      	ldrb	r4, [r5, #0]
   142bc:	3501      	adds	r5, #1
   142be:	e7e9      	b.n	14294 <_strtol_l.isra.0+0x84>
   142c0:	270a      	movs	r7, #10
   142c2:	e7d5      	b.n	14270 <_strtol_l.isra.0+0x60>
   142c4:	0021      	movs	r1, r4
   142c6:	3941      	subs	r1, #65	; 0x41
   142c8:	2919      	cmp	r1, #25
   142ca:	d801      	bhi.n	142d0 <_strtol_l.isra.0+0xc0>
   142cc:	3c37      	subs	r4, #55	; 0x37
   142ce:	e7e6      	b.n	1429e <_strtol_l.isra.0+0x8e>
   142d0:	0021      	movs	r1, r4
   142d2:	3961      	subs	r1, #97	; 0x61
   142d4:	2919      	cmp	r1, #25
   142d6:	d801      	bhi.n	142dc <_strtol_l.isra.0+0xcc>
   142d8:	3c57      	subs	r4, #87	; 0x57
   142da:	e7e0      	b.n	1429e <_strtol_l.isra.0+0x8e>
   142dc:	1c5a      	adds	r2, r3, #1
   142de:	d108      	bne.n	142f2 <_strtol_l.isra.0+0xe2>
   142e0:	9a05      	ldr	r2, [sp, #20]
   142e2:	3323      	adds	r3, #35	; 0x23
   142e4:	6013      	str	r3, [r2, #0]
   142e6:	9b02      	ldr	r3, [sp, #8]
   142e8:	0030      	movs	r0, r6
   142ea:	2b00      	cmp	r3, #0
   142ec:	d10b      	bne.n	14306 <_strtol_l.isra.0+0xf6>
   142ee:	b007      	add	sp, #28
   142f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142f2:	9a01      	ldr	r2, [sp, #4]
   142f4:	2a00      	cmp	r2, #0
   142f6:	d000      	beq.n	142fa <_strtol_l.isra.0+0xea>
   142f8:	4240      	negs	r0, r0
   142fa:	9a02      	ldr	r2, [sp, #8]
   142fc:	2a00      	cmp	r2, #0
   142fe:	d0f6      	beq.n	142ee <_strtol_l.isra.0+0xde>
   14300:	9a03      	ldr	r2, [sp, #12]
   14302:	2b00      	cmp	r3, #0
   14304:	d000      	beq.n	14308 <_strtol_l.isra.0+0xf8>
   14306:	1e6a      	subs	r2, r5, #1
   14308:	9b02      	ldr	r3, [sp, #8]
   1430a:	601a      	str	r2, [r3, #0]
   1430c:	e7ef      	b.n	142ee <_strtol_l.isra.0+0xde>
   1430e:	2430      	movs	r4, #48	; 0x30
   14310:	2f00      	cmp	r7, #0
   14312:	d1ad      	bne.n	14270 <_strtol_l.isra.0+0x60>
   14314:	3708      	adds	r7, #8
   14316:	e7ab      	b.n	14270 <_strtol_l.isra.0+0x60>
   14318:	7fffffff 	.word	0x7fffffff

0001431c <strtol>:
   1431c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1431e:	0013      	movs	r3, r2
   14320:	4a06      	ldr	r2, [pc, #24]	; (1433c <strtol+0x20>)
   14322:	0005      	movs	r5, r0
   14324:	6810      	ldr	r0, [r2, #0]
   14326:	6a04      	ldr	r4, [r0, #32]
   14328:	2c00      	cmp	r4, #0
   1432a:	d100      	bne.n	1432e <strtol+0x12>
   1432c:	4c04      	ldr	r4, [pc, #16]	; (14340 <strtol+0x24>)
   1432e:	000a      	movs	r2, r1
   14330:	9400      	str	r4, [sp, #0]
   14332:	0029      	movs	r1, r5
   14334:	f7ff ff6c 	bl	14210 <_strtol_l.isra.0>
   14338:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1433a:	46c0      	nop			; (mov r8, r8)
   1433c:	20000018 	.word	0x20000018
   14340:	2000007c 	.word	0x2000007c

00014344 <__swbuf_r>:
   14344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14346:	0005      	movs	r5, r0
   14348:	000e      	movs	r6, r1
   1434a:	0014      	movs	r4, r2
   1434c:	2800      	cmp	r0, #0
   1434e:	d004      	beq.n	1435a <__swbuf_r+0x16>
   14350:	6983      	ldr	r3, [r0, #24]
   14352:	2b00      	cmp	r3, #0
   14354:	d101      	bne.n	1435a <__swbuf_r+0x16>
   14356:	f001 f831 	bl	153bc <__sinit>
   1435a:	4b22      	ldr	r3, [pc, #136]	; (143e4 <__swbuf_r+0xa0>)
   1435c:	429c      	cmp	r4, r3
   1435e:	d12d      	bne.n	143bc <__swbuf_r+0x78>
   14360:	686c      	ldr	r4, [r5, #4]
   14362:	69a3      	ldr	r3, [r4, #24]
   14364:	60a3      	str	r3, [r4, #8]
   14366:	89a3      	ldrh	r3, [r4, #12]
   14368:	071b      	lsls	r3, r3, #28
   1436a:	d531      	bpl.n	143d0 <__swbuf_r+0x8c>
   1436c:	6923      	ldr	r3, [r4, #16]
   1436e:	2b00      	cmp	r3, #0
   14370:	d02e      	beq.n	143d0 <__swbuf_r+0x8c>
   14372:	6823      	ldr	r3, [r4, #0]
   14374:	6922      	ldr	r2, [r4, #16]
   14376:	b2f7      	uxtb	r7, r6
   14378:	1a98      	subs	r0, r3, r2
   1437a:	6963      	ldr	r3, [r4, #20]
   1437c:	b2f6      	uxtb	r6, r6
   1437e:	4298      	cmp	r0, r3
   14380:	db05      	blt.n	1438e <__swbuf_r+0x4a>
   14382:	0021      	movs	r1, r4
   14384:	0028      	movs	r0, r5
   14386:	f000 ffab 	bl	152e0 <_fflush_r>
   1438a:	2800      	cmp	r0, #0
   1438c:	d126      	bne.n	143dc <__swbuf_r+0x98>
   1438e:	68a3      	ldr	r3, [r4, #8]
   14390:	3001      	adds	r0, #1
   14392:	3b01      	subs	r3, #1
   14394:	60a3      	str	r3, [r4, #8]
   14396:	6823      	ldr	r3, [r4, #0]
   14398:	1c5a      	adds	r2, r3, #1
   1439a:	6022      	str	r2, [r4, #0]
   1439c:	701f      	strb	r7, [r3, #0]
   1439e:	6963      	ldr	r3, [r4, #20]
   143a0:	4298      	cmp	r0, r3
   143a2:	d004      	beq.n	143ae <__swbuf_r+0x6a>
   143a4:	89a3      	ldrh	r3, [r4, #12]
   143a6:	07db      	lsls	r3, r3, #31
   143a8:	d51a      	bpl.n	143e0 <__swbuf_r+0x9c>
   143aa:	2e0a      	cmp	r6, #10
   143ac:	d118      	bne.n	143e0 <__swbuf_r+0x9c>
   143ae:	0021      	movs	r1, r4
   143b0:	0028      	movs	r0, r5
   143b2:	f000 ff95 	bl	152e0 <_fflush_r>
   143b6:	2800      	cmp	r0, #0
   143b8:	d012      	beq.n	143e0 <__swbuf_r+0x9c>
   143ba:	e00f      	b.n	143dc <__swbuf_r+0x98>
   143bc:	4b0a      	ldr	r3, [pc, #40]	; (143e8 <__swbuf_r+0xa4>)
   143be:	429c      	cmp	r4, r3
   143c0:	d101      	bne.n	143c6 <__swbuf_r+0x82>
   143c2:	68ac      	ldr	r4, [r5, #8]
   143c4:	e7cd      	b.n	14362 <__swbuf_r+0x1e>
   143c6:	4b09      	ldr	r3, [pc, #36]	; (143ec <__swbuf_r+0xa8>)
   143c8:	429c      	cmp	r4, r3
   143ca:	d1ca      	bne.n	14362 <__swbuf_r+0x1e>
   143cc:	68ec      	ldr	r4, [r5, #12]
   143ce:	e7c8      	b.n	14362 <__swbuf_r+0x1e>
   143d0:	0021      	movs	r1, r4
   143d2:	0028      	movs	r0, r5
   143d4:	f000 f818 	bl	14408 <__swsetup_r>
   143d8:	2800      	cmp	r0, #0
   143da:	d0ca      	beq.n	14372 <__swbuf_r+0x2e>
   143dc:	2601      	movs	r6, #1
   143de:	4276      	negs	r6, r6
   143e0:	0030      	movs	r0, r6
   143e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143e4:	0001b02c 	.word	0x0001b02c
   143e8:	0001b04c 	.word	0x0001b04c
   143ec:	0001b00c 	.word	0x0001b00c

000143f0 <__ascii_wctomb>:
   143f0:	1e0b      	subs	r3, r1, #0
   143f2:	d004      	beq.n	143fe <__ascii_wctomb+0xe>
   143f4:	2aff      	cmp	r2, #255	; 0xff
   143f6:	d904      	bls.n	14402 <__ascii_wctomb+0x12>
   143f8:	238a      	movs	r3, #138	; 0x8a
   143fa:	6003      	str	r3, [r0, #0]
   143fc:	3b8b      	subs	r3, #139	; 0x8b
   143fe:	0018      	movs	r0, r3
   14400:	4770      	bx	lr
   14402:	700a      	strb	r2, [r1, #0]
   14404:	2301      	movs	r3, #1
   14406:	e7fa      	b.n	143fe <__ascii_wctomb+0xe>

00014408 <__swsetup_r>:
   14408:	4b36      	ldr	r3, [pc, #216]	; (144e4 <__swsetup_r+0xdc>)
   1440a:	b570      	push	{r4, r5, r6, lr}
   1440c:	681d      	ldr	r5, [r3, #0]
   1440e:	0006      	movs	r6, r0
   14410:	000c      	movs	r4, r1
   14412:	2d00      	cmp	r5, #0
   14414:	d005      	beq.n	14422 <__swsetup_r+0x1a>
   14416:	69ab      	ldr	r3, [r5, #24]
   14418:	2b00      	cmp	r3, #0
   1441a:	d102      	bne.n	14422 <__swsetup_r+0x1a>
   1441c:	0028      	movs	r0, r5
   1441e:	f000 ffcd 	bl	153bc <__sinit>
   14422:	4b31      	ldr	r3, [pc, #196]	; (144e8 <__swsetup_r+0xe0>)
   14424:	429c      	cmp	r4, r3
   14426:	d10f      	bne.n	14448 <__swsetup_r+0x40>
   14428:	686c      	ldr	r4, [r5, #4]
   1442a:	230c      	movs	r3, #12
   1442c:	5ee2      	ldrsh	r2, [r4, r3]
   1442e:	b293      	uxth	r3, r2
   14430:	0719      	lsls	r1, r3, #28
   14432:	d42d      	bmi.n	14490 <__swsetup_r+0x88>
   14434:	06d9      	lsls	r1, r3, #27
   14436:	d411      	bmi.n	1445c <__swsetup_r+0x54>
   14438:	2309      	movs	r3, #9
   1443a:	2001      	movs	r0, #1
   1443c:	6033      	str	r3, [r6, #0]
   1443e:	3337      	adds	r3, #55	; 0x37
   14440:	4313      	orrs	r3, r2
   14442:	81a3      	strh	r3, [r4, #12]
   14444:	4240      	negs	r0, r0
   14446:	bd70      	pop	{r4, r5, r6, pc}
   14448:	4b28      	ldr	r3, [pc, #160]	; (144ec <__swsetup_r+0xe4>)
   1444a:	429c      	cmp	r4, r3
   1444c:	d101      	bne.n	14452 <__swsetup_r+0x4a>
   1444e:	68ac      	ldr	r4, [r5, #8]
   14450:	e7eb      	b.n	1442a <__swsetup_r+0x22>
   14452:	4b27      	ldr	r3, [pc, #156]	; (144f0 <__swsetup_r+0xe8>)
   14454:	429c      	cmp	r4, r3
   14456:	d1e8      	bne.n	1442a <__swsetup_r+0x22>
   14458:	68ec      	ldr	r4, [r5, #12]
   1445a:	e7e6      	b.n	1442a <__swsetup_r+0x22>
   1445c:	075b      	lsls	r3, r3, #29
   1445e:	d513      	bpl.n	14488 <__swsetup_r+0x80>
   14460:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14462:	2900      	cmp	r1, #0
   14464:	d008      	beq.n	14478 <__swsetup_r+0x70>
   14466:	0023      	movs	r3, r4
   14468:	3344      	adds	r3, #68	; 0x44
   1446a:	4299      	cmp	r1, r3
   1446c:	d002      	beq.n	14474 <__swsetup_r+0x6c>
   1446e:	0030      	movs	r0, r6
   14470:	f7fe ffd4 	bl	1341c <_free_r>
   14474:	2300      	movs	r3, #0
   14476:	6363      	str	r3, [r4, #52]	; 0x34
   14478:	2224      	movs	r2, #36	; 0x24
   1447a:	89a3      	ldrh	r3, [r4, #12]
   1447c:	4393      	bics	r3, r2
   1447e:	81a3      	strh	r3, [r4, #12]
   14480:	2300      	movs	r3, #0
   14482:	6063      	str	r3, [r4, #4]
   14484:	6923      	ldr	r3, [r4, #16]
   14486:	6023      	str	r3, [r4, #0]
   14488:	2308      	movs	r3, #8
   1448a:	89a2      	ldrh	r2, [r4, #12]
   1448c:	4313      	orrs	r3, r2
   1448e:	81a3      	strh	r3, [r4, #12]
   14490:	6923      	ldr	r3, [r4, #16]
   14492:	2b00      	cmp	r3, #0
   14494:	d10b      	bne.n	144ae <__swsetup_r+0xa6>
   14496:	21a0      	movs	r1, #160	; 0xa0
   14498:	2280      	movs	r2, #128	; 0x80
   1449a:	89a3      	ldrh	r3, [r4, #12]
   1449c:	0089      	lsls	r1, r1, #2
   1449e:	0092      	lsls	r2, r2, #2
   144a0:	400b      	ands	r3, r1
   144a2:	4293      	cmp	r3, r2
   144a4:	d003      	beq.n	144ae <__swsetup_r+0xa6>
   144a6:	0021      	movs	r1, r4
   144a8:	0030      	movs	r0, r6
   144aa:	f001 f851 	bl	15550 <__smakebuf_r>
   144ae:	2301      	movs	r3, #1
   144b0:	89a2      	ldrh	r2, [r4, #12]
   144b2:	4013      	ands	r3, r2
   144b4:	d011      	beq.n	144da <__swsetup_r+0xd2>
   144b6:	2300      	movs	r3, #0
   144b8:	60a3      	str	r3, [r4, #8]
   144ba:	6963      	ldr	r3, [r4, #20]
   144bc:	425b      	negs	r3, r3
   144be:	61a3      	str	r3, [r4, #24]
   144c0:	2000      	movs	r0, #0
   144c2:	6923      	ldr	r3, [r4, #16]
   144c4:	4283      	cmp	r3, r0
   144c6:	d1be      	bne.n	14446 <__swsetup_r+0x3e>
   144c8:	230c      	movs	r3, #12
   144ca:	5ee2      	ldrsh	r2, [r4, r3]
   144cc:	0613      	lsls	r3, r2, #24
   144ce:	d5ba      	bpl.n	14446 <__swsetup_r+0x3e>
   144d0:	2340      	movs	r3, #64	; 0x40
   144d2:	4313      	orrs	r3, r2
   144d4:	81a3      	strh	r3, [r4, #12]
   144d6:	3801      	subs	r0, #1
   144d8:	e7b5      	b.n	14446 <__swsetup_r+0x3e>
   144da:	0792      	lsls	r2, r2, #30
   144dc:	d400      	bmi.n	144e0 <__swsetup_r+0xd8>
   144de:	6963      	ldr	r3, [r4, #20]
   144e0:	60a3      	str	r3, [r4, #8]
   144e2:	e7ed      	b.n	144c0 <__swsetup_r+0xb8>
   144e4:	20000018 	.word	0x20000018
   144e8:	0001b02c 	.word	0x0001b02c
   144ec:	0001b04c 	.word	0x0001b04c
   144f0:	0001b00c 	.word	0x0001b00c

000144f4 <quorem>:
   144f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   144f6:	6903      	ldr	r3, [r0, #16]
   144f8:	690c      	ldr	r4, [r1, #16]
   144fa:	b089      	sub	sp, #36	; 0x24
   144fc:	0007      	movs	r7, r0
   144fe:	9105      	str	r1, [sp, #20]
   14500:	2600      	movs	r6, #0
   14502:	429c      	cmp	r4, r3
   14504:	dc6d      	bgt.n	145e2 <quorem+0xee>
   14506:	000b      	movs	r3, r1
   14508:	3c01      	subs	r4, #1
   1450a:	3314      	adds	r3, #20
   1450c:	00a5      	lsls	r5, r4, #2
   1450e:	9303      	str	r3, [sp, #12]
   14510:	195b      	adds	r3, r3, r5
   14512:	9304      	str	r3, [sp, #16]
   14514:	0003      	movs	r3, r0
   14516:	3314      	adds	r3, #20
   14518:	9302      	str	r3, [sp, #8]
   1451a:	195d      	adds	r5, r3, r5
   1451c:	9b04      	ldr	r3, [sp, #16]
   1451e:	6828      	ldr	r0, [r5, #0]
   14520:	681b      	ldr	r3, [r3, #0]
   14522:	1c59      	adds	r1, r3, #1
   14524:	9301      	str	r3, [sp, #4]
   14526:	f001 ff2b 	bl	16380 <__udivsi3>
   1452a:	9001      	str	r0, [sp, #4]
   1452c:	42b0      	cmp	r0, r6
   1452e:	d02d      	beq.n	1458c <quorem+0x98>
   14530:	9b03      	ldr	r3, [sp, #12]
   14532:	9802      	ldr	r0, [sp, #8]
   14534:	469c      	mov	ip, r3
   14536:	9606      	str	r6, [sp, #24]
   14538:	4662      	mov	r2, ip
   1453a:	ca08      	ldmia	r2!, {r3}
   1453c:	4694      	mov	ip, r2
   1453e:	9a01      	ldr	r2, [sp, #4]
   14540:	b299      	uxth	r1, r3
   14542:	4351      	muls	r1, r2
   14544:	0c1b      	lsrs	r3, r3, #16
   14546:	4353      	muls	r3, r2
   14548:	1989      	adds	r1, r1, r6
   1454a:	0c0a      	lsrs	r2, r1, #16
   1454c:	189b      	adds	r3, r3, r2
   1454e:	9307      	str	r3, [sp, #28]
   14550:	8802      	ldrh	r2, [r0, #0]
   14552:	0c1e      	lsrs	r6, r3, #16
   14554:	9b06      	ldr	r3, [sp, #24]
   14556:	b289      	uxth	r1, r1
   14558:	18d2      	adds	r2, r2, r3
   1455a:	6803      	ldr	r3, [r0, #0]
   1455c:	1a52      	subs	r2, r2, r1
   1455e:	0c19      	lsrs	r1, r3, #16
   14560:	466b      	mov	r3, sp
   14562:	8b9b      	ldrh	r3, [r3, #28]
   14564:	1acb      	subs	r3, r1, r3
   14566:	1411      	asrs	r1, r2, #16
   14568:	185b      	adds	r3, r3, r1
   1456a:	1419      	asrs	r1, r3, #16
   1456c:	b292      	uxth	r2, r2
   1456e:	041b      	lsls	r3, r3, #16
   14570:	431a      	orrs	r2, r3
   14572:	9b04      	ldr	r3, [sp, #16]
   14574:	9106      	str	r1, [sp, #24]
   14576:	c004      	stmia	r0!, {r2}
   14578:	4563      	cmp	r3, ip
   1457a:	d2dd      	bcs.n	14538 <quorem+0x44>
   1457c:	682b      	ldr	r3, [r5, #0]
   1457e:	2b00      	cmp	r3, #0
   14580:	d104      	bne.n	1458c <quorem+0x98>
   14582:	9b02      	ldr	r3, [sp, #8]
   14584:	3d04      	subs	r5, #4
   14586:	42ab      	cmp	r3, r5
   14588:	d32e      	bcc.n	145e8 <quorem+0xf4>
   1458a:	613c      	str	r4, [r7, #16]
   1458c:	9905      	ldr	r1, [sp, #20]
   1458e:	0038      	movs	r0, r7
   14590:	f001 fa41 	bl	15a16 <__mcmp>
   14594:	2800      	cmp	r0, #0
   14596:	db23      	blt.n	145e0 <quorem+0xec>
   14598:	2500      	movs	r5, #0
   1459a:	9b01      	ldr	r3, [sp, #4]
   1459c:	9802      	ldr	r0, [sp, #8]
   1459e:	3301      	adds	r3, #1
   145a0:	9903      	ldr	r1, [sp, #12]
   145a2:	9301      	str	r3, [sp, #4]
   145a4:	c908      	ldmia	r1!, {r3}
   145a6:	8802      	ldrh	r2, [r0, #0]
   145a8:	1955      	adds	r5, r2, r5
   145aa:	b29a      	uxth	r2, r3
   145ac:	1aaa      	subs	r2, r5, r2
   145ae:	6805      	ldr	r5, [r0, #0]
   145b0:	0c1b      	lsrs	r3, r3, #16
   145b2:	0c2d      	lsrs	r5, r5, #16
   145b4:	1aeb      	subs	r3, r5, r3
   145b6:	1415      	asrs	r5, r2, #16
   145b8:	195b      	adds	r3, r3, r5
   145ba:	141d      	asrs	r5, r3, #16
   145bc:	b292      	uxth	r2, r2
   145be:	041b      	lsls	r3, r3, #16
   145c0:	4313      	orrs	r3, r2
   145c2:	c008      	stmia	r0!, {r3}
   145c4:	9b04      	ldr	r3, [sp, #16]
   145c6:	428b      	cmp	r3, r1
   145c8:	d2ec      	bcs.n	145a4 <quorem+0xb0>
   145ca:	9a02      	ldr	r2, [sp, #8]
   145cc:	00a3      	lsls	r3, r4, #2
   145ce:	18d3      	adds	r3, r2, r3
   145d0:	681a      	ldr	r2, [r3, #0]
   145d2:	2a00      	cmp	r2, #0
   145d4:	d104      	bne.n	145e0 <quorem+0xec>
   145d6:	9a02      	ldr	r2, [sp, #8]
   145d8:	3b04      	subs	r3, #4
   145da:	429a      	cmp	r2, r3
   145dc:	d309      	bcc.n	145f2 <quorem+0xfe>
   145de:	613c      	str	r4, [r7, #16]
   145e0:	9e01      	ldr	r6, [sp, #4]
   145e2:	0030      	movs	r0, r6
   145e4:	b009      	add	sp, #36	; 0x24
   145e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   145e8:	682b      	ldr	r3, [r5, #0]
   145ea:	2b00      	cmp	r3, #0
   145ec:	d1cd      	bne.n	1458a <quorem+0x96>
   145ee:	3c01      	subs	r4, #1
   145f0:	e7c7      	b.n	14582 <quorem+0x8e>
   145f2:	681a      	ldr	r2, [r3, #0]
   145f4:	2a00      	cmp	r2, #0
   145f6:	d1f2      	bne.n	145de <quorem+0xea>
   145f8:	3c01      	subs	r4, #1
   145fa:	e7ec      	b.n	145d6 <quorem+0xe2>

000145fc <_dtoa_r>:
   145fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   145fe:	0016      	movs	r6, r2
   14600:	001f      	movs	r7, r3
   14602:	6a44      	ldr	r4, [r0, #36]	; 0x24
   14604:	b09d      	sub	sp, #116	; 0x74
   14606:	9004      	str	r0, [sp, #16]
   14608:	9d25      	ldr	r5, [sp, #148]	; 0x94
   1460a:	9606      	str	r6, [sp, #24]
   1460c:	9707      	str	r7, [sp, #28]
   1460e:	2c00      	cmp	r4, #0
   14610:	d108      	bne.n	14624 <_dtoa_r+0x28>
   14612:	2010      	movs	r0, #16
   14614:	f7fe feb8 	bl	13388 <malloc>
   14618:	9b04      	ldr	r3, [sp, #16]
   1461a:	6258      	str	r0, [r3, #36]	; 0x24
   1461c:	6044      	str	r4, [r0, #4]
   1461e:	6084      	str	r4, [r0, #8]
   14620:	6004      	str	r4, [r0, #0]
   14622:	60c4      	str	r4, [r0, #12]
   14624:	9b04      	ldr	r3, [sp, #16]
   14626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14628:	6819      	ldr	r1, [r3, #0]
   1462a:	2900      	cmp	r1, #0
   1462c:	d00b      	beq.n	14646 <_dtoa_r+0x4a>
   1462e:	685a      	ldr	r2, [r3, #4]
   14630:	2301      	movs	r3, #1
   14632:	4093      	lsls	r3, r2
   14634:	604a      	str	r2, [r1, #4]
   14636:	608b      	str	r3, [r1, #8]
   14638:	9804      	ldr	r0, [sp, #16]
   1463a:	f001 f812 	bl	15662 <_Bfree>
   1463e:	2200      	movs	r2, #0
   14640:	9b04      	ldr	r3, [sp, #16]
   14642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14644:	601a      	str	r2, [r3, #0]
   14646:	9b07      	ldr	r3, [sp, #28]
   14648:	2b00      	cmp	r3, #0
   1464a:	da1f      	bge.n	1468c <_dtoa_r+0x90>
   1464c:	2301      	movs	r3, #1
   1464e:	602b      	str	r3, [r5, #0]
   14650:	007b      	lsls	r3, r7, #1
   14652:	085b      	lsrs	r3, r3, #1
   14654:	9307      	str	r3, [sp, #28]
   14656:	9c07      	ldr	r4, [sp, #28]
   14658:	4bb7      	ldr	r3, [pc, #732]	; (14938 <_dtoa_r+0x33c>)
   1465a:	0022      	movs	r2, r4
   1465c:	9319      	str	r3, [sp, #100]	; 0x64
   1465e:	401a      	ands	r2, r3
   14660:	429a      	cmp	r2, r3
   14662:	d116      	bne.n	14692 <_dtoa_r+0x96>
   14664:	4bb5      	ldr	r3, [pc, #724]	; (1493c <_dtoa_r+0x340>)
   14666:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14668:	6013      	str	r3, [r2, #0]
   1466a:	9b06      	ldr	r3, [sp, #24]
   1466c:	2b00      	cmp	r3, #0
   1466e:	d103      	bne.n	14678 <_dtoa_r+0x7c>
   14670:	0324      	lsls	r4, r4, #12
   14672:	d101      	bne.n	14678 <_dtoa_r+0x7c>
   14674:	f000 fd91 	bl	1519a <_dtoa_r+0xb9e>
   14678:	4bb1      	ldr	r3, [pc, #708]	; (14940 <_dtoa_r+0x344>)
   1467a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1467c:	930a      	str	r3, [sp, #40]	; 0x28
   1467e:	4bb1      	ldr	r3, [pc, #708]	; (14944 <_dtoa_r+0x348>)
   14680:	2a00      	cmp	r2, #0
   14682:	d001      	beq.n	14688 <_dtoa_r+0x8c>
   14684:	f000 fd8f 	bl	151a6 <_dtoa_r+0xbaa>
   14688:	f000 fd8f 	bl	151aa <_dtoa_r+0xbae>
   1468c:	2300      	movs	r3, #0
   1468e:	602b      	str	r3, [r5, #0]
   14690:	e7e1      	b.n	14656 <_dtoa_r+0x5a>
   14692:	9e06      	ldr	r6, [sp, #24]
   14694:	9f07      	ldr	r7, [sp, #28]
   14696:	2200      	movs	r2, #0
   14698:	2300      	movs	r3, #0
   1469a:	0030      	movs	r0, r6
   1469c:	0039      	movs	r1, r7
   1469e:	f001 fff5 	bl	1668c <__aeabi_dcmpeq>
   146a2:	1e05      	subs	r5, r0, #0
   146a4:	d00e      	beq.n	146c4 <_dtoa_r+0xc8>
   146a6:	2301      	movs	r3, #1
   146a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   146aa:	6013      	str	r3, [r2, #0]
   146ac:	4ba6      	ldr	r3, [pc, #664]	; (14948 <_dtoa_r+0x34c>)
   146ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
   146b0:	930a      	str	r3, [sp, #40]	; 0x28
   146b2:	2a00      	cmp	r2, #0
   146b4:	d101      	bne.n	146ba <_dtoa_r+0xbe>
   146b6:	f000 fd78 	bl	151aa <_dtoa_r+0xbae>
   146ba:	4aa4      	ldr	r2, [pc, #656]	; (1494c <_dtoa_r+0x350>)
   146bc:	9926      	ldr	r1, [sp, #152]	; 0x98
   146be:	600a      	str	r2, [r1, #0]
   146c0:	f000 fd73 	bl	151aa <_dtoa_r+0xbae>
   146c4:	ab1a      	add	r3, sp, #104	; 0x68
   146c6:	9301      	str	r3, [sp, #4]
   146c8:	ab1b      	add	r3, sp, #108	; 0x6c
   146ca:	9300      	str	r3, [sp, #0]
   146cc:	0032      	movs	r2, r6
   146ce:	003b      	movs	r3, r7
   146d0:	9804      	ldr	r0, [sp, #16]
   146d2:	f001 fa1d 	bl	15b10 <__d2b>
   146d6:	0063      	lsls	r3, r4, #1
   146d8:	9005      	str	r0, [sp, #20]
   146da:	0d5b      	lsrs	r3, r3, #21
   146dc:	d100      	bne.n	146e0 <_dtoa_r+0xe4>
   146de:	e07f      	b.n	147e0 <_dtoa_r+0x1e4>
   146e0:	033a      	lsls	r2, r7, #12
   146e2:	4c9b      	ldr	r4, [pc, #620]	; (14950 <_dtoa_r+0x354>)
   146e4:	0b12      	lsrs	r2, r2, #12
   146e6:	4314      	orrs	r4, r2
   146e8:	0021      	movs	r1, r4
   146ea:	4a9a      	ldr	r2, [pc, #616]	; (14954 <_dtoa_r+0x358>)
   146ec:	0030      	movs	r0, r6
   146ee:	9518      	str	r5, [sp, #96]	; 0x60
   146f0:	189e      	adds	r6, r3, r2
   146f2:	2200      	movs	r2, #0
   146f4:	4b98      	ldr	r3, [pc, #608]	; (14958 <_dtoa_r+0x35c>)
   146f6:	f003 fc9d 	bl	18034 <__aeabi_dsub>
   146fa:	4a98      	ldr	r2, [pc, #608]	; (1495c <_dtoa_r+0x360>)
   146fc:	4b98      	ldr	r3, [pc, #608]	; (14960 <_dtoa_r+0x364>)
   146fe:	f003 fa19 	bl	17b34 <__aeabi_dmul>
   14702:	4a98      	ldr	r2, [pc, #608]	; (14964 <_dtoa_r+0x368>)
   14704:	4b98      	ldr	r3, [pc, #608]	; (14968 <_dtoa_r+0x36c>)
   14706:	f002 fad1 	bl	16cac <__aeabi_dadd>
   1470a:	0004      	movs	r4, r0
   1470c:	0030      	movs	r0, r6
   1470e:	000d      	movs	r5, r1
   14710:	f003 fffa 	bl	18708 <__aeabi_i2d>
   14714:	4a95      	ldr	r2, [pc, #596]	; (1496c <_dtoa_r+0x370>)
   14716:	4b96      	ldr	r3, [pc, #600]	; (14970 <_dtoa_r+0x374>)
   14718:	f003 fa0c 	bl	17b34 <__aeabi_dmul>
   1471c:	0002      	movs	r2, r0
   1471e:	000b      	movs	r3, r1
   14720:	0020      	movs	r0, r4
   14722:	0029      	movs	r1, r5
   14724:	f002 fac2 	bl	16cac <__aeabi_dadd>
   14728:	0004      	movs	r4, r0
   1472a:	000d      	movs	r5, r1
   1472c:	f003 ffb8 	bl	186a0 <__aeabi_d2iz>
   14730:	2200      	movs	r2, #0
   14732:	9003      	str	r0, [sp, #12]
   14734:	2300      	movs	r3, #0
   14736:	0020      	movs	r0, r4
   14738:	0029      	movs	r1, r5
   1473a:	f001 ffad 	bl	16698 <__aeabi_dcmplt>
   1473e:	2800      	cmp	r0, #0
   14740:	d00e      	beq.n	14760 <_dtoa_r+0x164>
   14742:	9803      	ldr	r0, [sp, #12]
   14744:	f003 ffe0 	bl	18708 <__aeabi_i2d>
   14748:	000b      	movs	r3, r1
   1474a:	0002      	movs	r2, r0
   1474c:	0029      	movs	r1, r5
   1474e:	0020      	movs	r0, r4
   14750:	f001 ff9c 	bl	1668c <__aeabi_dcmpeq>
   14754:	0003      	movs	r3, r0
   14756:	4258      	negs	r0, r3
   14758:	4158      	adcs	r0, r3
   1475a:	9b03      	ldr	r3, [sp, #12]
   1475c:	1a1b      	subs	r3, r3, r0
   1475e:	9303      	str	r3, [sp, #12]
   14760:	2301      	movs	r3, #1
   14762:	9316      	str	r3, [sp, #88]	; 0x58
   14764:	9b03      	ldr	r3, [sp, #12]
   14766:	2b16      	cmp	r3, #22
   14768:	d80f      	bhi.n	1478a <_dtoa_r+0x18e>
   1476a:	4982      	ldr	r1, [pc, #520]	; (14974 <_dtoa_r+0x378>)
   1476c:	00db      	lsls	r3, r3, #3
   1476e:	18c9      	adds	r1, r1, r3
   14770:	6808      	ldr	r0, [r1, #0]
   14772:	6849      	ldr	r1, [r1, #4]
   14774:	9a06      	ldr	r2, [sp, #24]
   14776:	9b07      	ldr	r3, [sp, #28]
   14778:	f001 ffa2 	bl	166c0 <__aeabi_dcmpgt>
   1477c:	2800      	cmp	r0, #0
   1477e:	d04b      	beq.n	14818 <_dtoa_r+0x21c>
   14780:	9b03      	ldr	r3, [sp, #12]
   14782:	3b01      	subs	r3, #1
   14784:	9303      	str	r3, [sp, #12]
   14786:	2300      	movs	r3, #0
   14788:	9316      	str	r3, [sp, #88]	; 0x58
   1478a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1478c:	1b9e      	subs	r6, r3, r6
   1478e:	2300      	movs	r3, #0
   14790:	930b      	str	r3, [sp, #44]	; 0x2c
   14792:	0033      	movs	r3, r6
   14794:	3b01      	subs	r3, #1
   14796:	930c      	str	r3, [sp, #48]	; 0x30
   14798:	d504      	bpl.n	147a4 <_dtoa_r+0x1a8>
   1479a:	2301      	movs	r3, #1
   1479c:	1b9b      	subs	r3, r3, r6
   1479e:	930b      	str	r3, [sp, #44]	; 0x2c
   147a0:	2300      	movs	r3, #0
   147a2:	930c      	str	r3, [sp, #48]	; 0x30
   147a4:	9b03      	ldr	r3, [sp, #12]
   147a6:	2b00      	cmp	r3, #0
   147a8:	db38      	blt.n	1481c <_dtoa_r+0x220>
   147aa:	9a03      	ldr	r2, [sp, #12]
   147ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   147ae:	4694      	mov	ip, r2
   147b0:	4463      	add	r3, ip
   147b2:	930c      	str	r3, [sp, #48]	; 0x30
   147b4:	2300      	movs	r3, #0
   147b6:	920f      	str	r2, [sp, #60]	; 0x3c
   147b8:	9308      	str	r3, [sp, #32]
   147ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
   147bc:	2501      	movs	r5, #1
   147be:	2b09      	cmp	r3, #9
   147c0:	d900      	bls.n	147c4 <_dtoa_r+0x1c8>
   147c2:	e091      	b.n	148e8 <_dtoa_r+0x2ec>
   147c4:	2b05      	cmp	r3, #5
   147c6:	dd02      	ble.n	147ce <_dtoa_r+0x1d2>
   147c8:	2500      	movs	r5, #0
   147ca:	3b04      	subs	r3, #4
   147cc:	9322      	str	r3, [sp, #136]	; 0x88
   147ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
   147d0:	1e98      	subs	r0, r3, #2
   147d2:	2803      	cmp	r0, #3
   147d4:	d900      	bls.n	147d8 <_dtoa_r+0x1dc>
   147d6:	e091      	b.n	148fc <_dtoa_r+0x300>
   147d8:	f001 fdc8 	bl	1636c <__gnu_thumb1_case_uqi>
   147dc:	76298482 	.word	0x76298482
   147e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   147e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   147e4:	189e      	adds	r6, r3, r2
   147e6:	4b64      	ldr	r3, [pc, #400]	; (14978 <_dtoa_r+0x37c>)
   147e8:	18f2      	adds	r2, r6, r3
   147ea:	2a20      	cmp	r2, #32
   147ec:	dd0f      	ble.n	1480e <_dtoa_r+0x212>
   147ee:	4b63      	ldr	r3, [pc, #396]	; (1497c <_dtoa_r+0x380>)
   147f0:	9806      	ldr	r0, [sp, #24]
   147f2:	18f3      	adds	r3, r6, r3
   147f4:	40d8      	lsrs	r0, r3
   147f6:	2340      	movs	r3, #64	; 0x40
   147f8:	1a9b      	subs	r3, r3, r2
   147fa:	409c      	lsls	r4, r3
   147fc:	4320      	orrs	r0, r4
   147fe:	f003 ffc5 	bl	1878c <__aeabi_ui2d>
   14802:	2301      	movs	r3, #1
   14804:	4c5e      	ldr	r4, [pc, #376]	; (14980 <_dtoa_r+0x384>)
   14806:	3e01      	subs	r6, #1
   14808:	1909      	adds	r1, r1, r4
   1480a:	9318      	str	r3, [sp, #96]	; 0x60
   1480c:	e771      	b.n	146f2 <_dtoa_r+0xf6>
   1480e:	2320      	movs	r3, #32
   14810:	9806      	ldr	r0, [sp, #24]
   14812:	1a9b      	subs	r3, r3, r2
   14814:	4098      	lsls	r0, r3
   14816:	e7f2      	b.n	147fe <_dtoa_r+0x202>
   14818:	9016      	str	r0, [sp, #88]	; 0x58
   1481a:	e7b6      	b.n	1478a <_dtoa_r+0x18e>
   1481c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1481e:	9a03      	ldr	r2, [sp, #12]
   14820:	1a9b      	subs	r3, r3, r2
   14822:	930b      	str	r3, [sp, #44]	; 0x2c
   14824:	4253      	negs	r3, r2
   14826:	9308      	str	r3, [sp, #32]
   14828:	2300      	movs	r3, #0
   1482a:	930f      	str	r3, [sp, #60]	; 0x3c
   1482c:	e7c5      	b.n	147ba <_dtoa_r+0x1be>
   1482e:	2301      	movs	r3, #1
   14830:	930e      	str	r3, [sp, #56]	; 0x38
   14832:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   14834:	2b00      	cmp	r3, #0
   14836:	dd65      	ble.n	14904 <_dtoa_r+0x308>
   14838:	001f      	movs	r7, r3
   1483a:	930d      	str	r3, [sp, #52]	; 0x34
   1483c:	9a04      	ldr	r2, [sp, #16]
   1483e:	6a54      	ldr	r4, [r2, #36]	; 0x24
   14840:	2200      	movs	r2, #0
   14842:	6062      	str	r2, [r4, #4]
   14844:	3204      	adds	r2, #4
   14846:	0011      	movs	r1, r2
   14848:	3114      	adds	r1, #20
   1484a:	4299      	cmp	r1, r3
   1484c:	d95f      	bls.n	1490e <_dtoa_r+0x312>
   1484e:	6861      	ldr	r1, [r4, #4]
   14850:	9804      	ldr	r0, [sp, #16]
   14852:	f000 fece 	bl	155f2 <_Balloc>
   14856:	9b04      	ldr	r3, [sp, #16]
   14858:	6020      	str	r0, [r4, #0]
   1485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1485c:	681b      	ldr	r3, [r3, #0]
   1485e:	930a      	str	r3, [sp, #40]	; 0x28
   14860:	2f0e      	cmp	r7, #14
   14862:	d900      	bls.n	14866 <_dtoa_r+0x26a>
   14864:	e105      	b.n	14a72 <_dtoa_r+0x476>
   14866:	2d00      	cmp	r5, #0
   14868:	d100      	bne.n	1486c <_dtoa_r+0x270>
   1486a:	e102      	b.n	14a72 <_dtoa_r+0x476>
   1486c:	9b06      	ldr	r3, [sp, #24]
   1486e:	9c07      	ldr	r4, [sp, #28]
   14870:	9314      	str	r3, [sp, #80]	; 0x50
   14872:	9415      	str	r4, [sp, #84]	; 0x54
   14874:	9b03      	ldr	r3, [sp, #12]
   14876:	2b00      	cmp	r3, #0
   14878:	dc00      	bgt.n	1487c <_dtoa_r+0x280>
   1487a:	e085      	b.n	14988 <_dtoa_r+0x38c>
   1487c:	001a      	movs	r2, r3
   1487e:	210f      	movs	r1, #15
   14880:	4b3c      	ldr	r3, [pc, #240]	; (14974 <_dtoa_r+0x378>)
   14882:	400a      	ands	r2, r1
   14884:	00d2      	lsls	r2, r2, #3
   14886:	189b      	adds	r3, r3, r2
   14888:	685c      	ldr	r4, [r3, #4]
   1488a:	681b      	ldr	r3, [r3, #0]
   1488c:	9310      	str	r3, [sp, #64]	; 0x40
   1488e:	9411      	str	r4, [sp, #68]	; 0x44
   14890:	9b03      	ldr	r3, [sp, #12]
   14892:	2402      	movs	r4, #2
   14894:	111d      	asrs	r5, r3, #4
   14896:	06eb      	lsls	r3, r5, #27
   14898:	d50a      	bpl.n	148b0 <_dtoa_r+0x2b4>
   1489a:	4b3a      	ldr	r3, [pc, #232]	; (14984 <_dtoa_r+0x388>)
   1489c:	400d      	ands	r5, r1
   1489e:	6a1a      	ldr	r2, [r3, #32]
   148a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   148a2:	9814      	ldr	r0, [sp, #80]	; 0x50
   148a4:	9915      	ldr	r1, [sp, #84]	; 0x54
   148a6:	f002 fd11 	bl	172cc <__aeabi_ddiv>
   148aa:	9006      	str	r0, [sp, #24]
   148ac:	9107      	str	r1, [sp, #28]
   148ae:	3401      	adds	r4, #1
   148b0:	4e34      	ldr	r6, [pc, #208]	; (14984 <_dtoa_r+0x388>)
   148b2:	2d00      	cmp	r5, #0
   148b4:	d130      	bne.n	14918 <_dtoa_r+0x31c>
   148b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   148b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   148ba:	9806      	ldr	r0, [sp, #24]
   148bc:	9907      	ldr	r1, [sp, #28]
   148be:	f002 fd05 	bl	172cc <__aeabi_ddiv>
   148c2:	9006      	str	r0, [sp, #24]
   148c4:	9107      	str	r1, [sp, #28]
   148c6:	e07a      	b.n	149be <_dtoa_r+0x3c2>
   148c8:	2301      	movs	r3, #1
   148ca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   148cc:	930e      	str	r3, [sp, #56]	; 0x38
   148ce:	4694      	mov	ip, r2
   148d0:	9b03      	ldr	r3, [sp, #12]
   148d2:	4463      	add	r3, ip
   148d4:	1c5f      	adds	r7, r3, #1
   148d6:	930d      	str	r3, [sp, #52]	; 0x34
   148d8:	1e3b      	subs	r3, r7, #0
   148da:	dcaf      	bgt.n	1483c <_dtoa_r+0x240>
   148dc:	2301      	movs	r3, #1
   148de:	e7ad      	b.n	1483c <_dtoa_r+0x240>
   148e0:	2300      	movs	r3, #0
   148e2:	e7a5      	b.n	14830 <_dtoa_r+0x234>
   148e4:	2300      	movs	r3, #0
   148e6:	e7f0      	b.n	148ca <_dtoa_r+0x2ce>
   148e8:	2300      	movs	r3, #0
   148ea:	950e      	str	r5, [sp, #56]	; 0x38
   148ec:	9322      	str	r3, [sp, #136]	; 0x88
   148ee:	3b01      	subs	r3, #1
   148f0:	2200      	movs	r2, #0
   148f2:	930d      	str	r3, [sp, #52]	; 0x34
   148f4:	001f      	movs	r7, r3
   148f6:	3313      	adds	r3, #19
   148f8:	9223      	str	r2, [sp, #140]	; 0x8c
   148fa:	e79f      	b.n	1483c <_dtoa_r+0x240>
   148fc:	2301      	movs	r3, #1
   148fe:	930e      	str	r3, [sp, #56]	; 0x38
   14900:	3b02      	subs	r3, #2
   14902:	e7f5      	b.n	148f0 <_dtoa_r+0x2f4>
   14904:	2301      	movs	r3, #1
   14906:	930d      	str	r3, [sp, #52]	; 0x34
   14908:	001f      	movs	r7, r3
   1490a:	001a      	movs	r2, r3
   1490c:	e7f4      	b.n	148f8 <_dtoa_r+0x2fc>
   1490e:	6861      	ldr	r1, [r4, #4]
   14910:	0052      	lsls	r2, r2, #1
   14912:	3101      	adds	r1, #1
   14914:	6061      	str	r1, [r4, #4]
   14916:	e796      	b.n	14846 <_dtoa_r+0x24a>
   14918:	2301      	movs	r3, #1
   1491a:	421d      	tst	r5, r3
   1491c:	d008      	beq.n	14930 <_dtoa_r+0x334>
   1491e:	9810      	ldr	r0, [sp, #64]	; 0x40
   14920:	9911      	ldr	r1, [sp, #68]	; 0x44
   14922:	18e4      	adds	r4, r4, r3
   14924:	6832      	ldr	r2, [r6, #0]
   14926:	6873      	ldr	r3, [r6, #4]
   14928:	f003 f904 	bl	17b34 <__aeabi_dmul>
   1492c:	9010      	str	r0, [sp, #64]	; 0x40
   1492e:	9111      	str	r1, [sp, #68]	; 0x44
   14930:	106d      	asrs	r5, r5, #1
   14932:	3608      	adds	r6, #8
   14934:	e7bd      	b.n	148b2 <_dtoa_r+0x2b6>
   14936:	46c0      	nop			; (mov r8, r8)
   14938:	7ff00000 	.word	0x7ff00000
   1493c:	0000270f 	.word	0x0000270f
   14940:	0001b008 	.word	0x0001b008
   14944:	0001b00b 	.word	0x0001b00b
   14948:	0001aeda 	.word	0x0001aeda
   1494c:	0001aedb 	.word	0x0001aedb
   14950:	3ff00000 	.word	0x3ff00000
   14954:	fffffc01 	.word	0xfffffc01
   14958:	3ff80000 	.word	0x3ff80000
   1495c:	636f4361 	.word	0x636f4361
   14960:	3fd287a7 	.word	0x3fd287a7
   14964:	8b60c8b3 	.word	0x8b60c8b3
   14968:	3fc68a28 	.word	0x3fc68a28
   1496c:	509f79fb 	.word	0x509f79fb
   14970:	3fd34413 	.word	0x3fd34413
   14974:	0001b098 	.word	0x0001b098
   14978:	00000432 	.word	0x00000432
   1497c:	00000412 	.word	0x00000412
   14980:	fe100000 	.word	0xfe100000
   14984:	0001b070 	.word	0x0001b070
   14988:	9b03      	ldr	r3, [sp, #12]
   1498a:	2402      	movs	r4, #2
   1498c:	2b00      	cmp	r3, #0
   1498e:	d016      	beq.n	149be <_dtoa_r+0x3c2>
   14990:	9814      	ldr	r0, [sp, #80]	; 0x50
   14992:	9915      	ldr	r1, [sp, #84]	; 0x54
   14994:	425d      	negs	r5, r3
   14996:	230f      	movs	r3, #15
   14998:	4aca      	ldr	r2, [pc, #808]	; (14cc4 <_dtoa_r+0x6c8>)
   1499a:	402b      	ands	r3, r5
   1499c:	00db      	lsls	r3, r3, #3
   1499e:	18d3      	adds	r3, r2, r3
   149a0:	681a      	ldr	r2, [r3, #0]
   149a2:	685b      	ldr	r3, [r3, #4]
   149a4:	f003 f8c6 	bl	17b34 <__aeabi_dmul>
   149a8:	2300      	movs	r3, #0
   149aa:	9006      	str	r0, [sp, #24]
   149ac:	9107      	str	r1, [sp, #28]
   149ae:	4ec6      	ldr	r6, [pc, #792]	; (14cc8 <_dtoa_r+0x6cc>)
   149b0:	112d      	asrs	r5, r5, #4
   149b2:	2d00      	cmp	r5, #0
   149b4:	d000      	beq.n	149b8 <_dtoa_r+0x3bc>
   149b6:	e08c      	b.n	14ad2 <_dtoa_r+0x4d6>
   149b8:	2b00      	cmp	r3, #0
   149ba:	d000      	beq.n	149be <_dtoa_r+0x3c2>
   149bc:	e781      	b.n	148c2 <_dtoa_r+0x2c6>
   149be:	9b16      	ldr	r3, [sp, #88]	; 0x58
   149c0:	2b00      	cmp	r3, #0
   149c2:	d100      	bne.n	149c6 <_dtoa_r+0x3ca>
   149c4:	e091      	b.n	14aea <_dtoa_r+0x4ee>
   149c6:	9a06      	ldr	r2, [sp, #24]
   149c8:	9b07      	ldr	r3, [sp, #28]
   149ca:	9210      	str	r2, [sp, #64]	; 0x40
   149cc:	9311      	str	r3, [sp, #68]	; 0x44
   149ce:	9810      	ldr	r0, [sp, #64]	; 0x40
   149d0:	9911      	ldr	r1, [sp, #68]	; 0x44
   149d2:	2200      	movs	r2, #0
   149d4:	4bbd      	ldr	r3, [pc, #756]	; (14ccc <_dtoa_r+0x6d0>)
   149d6:	f001 fe5f 	bl	16698 <__aeabi_dcmplt>
   149da:	2800      	cmp	r0, #0
   149dc:	d100      	bne.n	149e0 <_dtoa_r+0x3e4>
   149de:	e084      	b.n	14aea <_dtoa_r+0x4ee>
   149e0:	2f00      	cmp	r7, #0
   149e2:	d100      	bne.n	149e6 <_dtoa_r+0x3ea>
   149e4:	e081      	b.n	14aea <_dtoa_r+0x4ee>
   149e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   149e8:	2b00      	cmp	r3, #0
   149ea:	dd3e      	ble.n	14a6a <_dtoa_r+0x46e>
   149ec:	9810      	ldr	r0, [sp, #64]	; 0x40
   149ee:	9911      	ldr	r1, [sp, #68]	; 0x44
   149f0:	9b03      	ldr	r3, [sp, #12]
   149f2:	2200      	movs	r2, #0
   149f4:	1e5e      	subs	r6, r3, #1
   149f6:	4bb6      	ldr	r3, [pc, #728]	; (14cd0 <_dtoa_r+0x6d4>)
   149f8:	f003 f89c 	bl	17b34 <__aeabi_dmul>
   149fc:	9006      	str	r0, [sp, #24]
   149fe:	9107      	str	r1, [sp, #28]
   14a00:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14a02:	3401      	adds	r4, #1
   14a04:	0020      	movs	r0, r4
   14a06:	f003 fe7f 	bl	18708 <__aeabi_i2d>
   14a0a:	9a06      	ldr	r2, [sp, #24]
   14a0c:	9b07      	ldr	r3, [sp, #28]
   14a0e:	f003 f891 	bl	17b34 <__aeabi_dmul>
   14a12:	2200      	movs	r2, #0
   14a14:	4baf      	ldr	r3, [pc, #700]	; (14cd4 <_dtoa_r+0x6d8>)
   14a16:	f002 f949 	bl	16cac <__aeabi_dadd>
   14a1a:	9012      	str	r0, [sp, #72]	; 0x48
   14a1c:	9113      	str	r1, [sp, #76]	; 0x4c
   14a1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14a20:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   14a22:	4aad      	ldr	r2, [pc, #692]	; (14cd8 <_dtoa_r+0x6dc>)
   14a24:	9310      	str	r3, [sp, #64]	; 0x40
   14a26:	9411      	str	r4, [sp, #68]	; 0x44
   14a28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14a2a:	189c      	adds	r4, r3, r2
   14a2c:	9411      	str	r4, [sp, #68]	; 0x44
   14a2e:	2d00      	cmp	r5, #0
   14a30:	d15e      	bne.n	14af0 <_dtoa_r+0x4f4>
   14a32:	9806      	ldr	r0, [sp, #24]
   14a34:	9907      	ldr	r1, [sp, #28]
   14a36:	2200      	movs	r2, #0
   14a38:	4ba8      	ldr	r3, [pc, #672]	; (14cdc <_dtoa_r+0x6e0>)
   14a3a:	f003 fafb 	bl	18034 <__aeabi_dsub>
   14a3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14a40:	0023      	movs	r3, r4
   14a42:	9006      	str	r0, [sp, #24]
   14a44:	9107      	str	r1, [sp, #28]
   14a46:	f001 fe3b 	bl	166c0 <__aeabi_dcmpgt>
   14a4a:	2800      	cmp	r0, #0
   14a4c:	d000      	beq.n	14a50 <_dtoa_r+0x454>
   14a4e:	e301      	b.n	15054 <_dtoa_r+0xa58>
   14a50:	48a3      	ldr	r0, [pc, #652]	; (14ce0 <_dtoa_r+0x6e4>)
   14a52:	9913      	ldr	r1, [sp, #76]	; 0x4c
   14a54:	4684      	mov	ip, r0
   14a56:	4461      	add	r1, ip
   14a58:	000b      	movs	r3, r1
   14a5a:	9806      	ldr	r0, [sp, #24]
   14a5c:	9907      	ldr	r1, [sp, #28]
   14a5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14a60:	f001 fe1a 	bl	16698 <__aeabi_dcmplt>
   14a64:	2800      	cmp	r0, #0
   14a66:	d000      	beq.n	14a6a <_dtoa_r+0x46e>
   14a68:	e2e8      	b.n	1503c <_dtoa_r+0xa40>
   14a6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14a6c:	9c15      	ldr	r4, [sp, #84]	; 0x54
   14a6e:	9306      	str	r3, [sp, #24]
   14a70:	9407      	str	r4, [sp, #28]
   14a72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14a74:	2b00      	cmp	r3, #0
   14a76:	da00      	bge.n	14a7a <_dtoa_r+0x47e>
   14a78:	e157      	b.n	14d2a <_dtoa_r+0x72e>
   14a7a:	9a03      	ldr	r2, [sp, #12]
   14a7c:	2a0e      	cmp	r2, #14
   14a7e:	dd00      	ble.n	14a82 <_dtoa_r+0x486>
   14a80:	e153      	b.n	14d2a <_dtoa_r+0x72e>
   14a82:	4b90      	ldr	r3, [pc, #576]	; (14cc4 <_dtoa_r+0x6c8>)
   14a84:	00d2      	lsls	r2, r2, #3
   14a86:	189b      	adds	r3, r3, r2
   14a88:	685c      	ldr	r4, [r3, #4]
   14a8a:	681b      	ldr	r3, [r3, #0]
   14a8c:	9308      	str	r3, [sp, #32]
   14a8e:	9409      	str	r4, [sp, #36]	; 0x24
   14a90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   14a92:	2b00      	cmp	r3, #0
   14a94:	db00      	blt.n	14a98 <_dtoa_r+0x49c>
   14a96:	e0ce      	b.n	14c36 <_dtoa_r+0x63a>
   14a98:	2f00      	cmp	r7, #0
   14a9a:	dd00      	ble.n	14a9e <_dtoa_r+0x4a2>
   14a9c:	e0cb      	b.n	14c36 <_dtoa_r+0x63a>
   14a9e:	d000      	beq.n	14aa2 <_dtoa_r+0x4a6>
   14aa0:	e2cf      	b.n	15042 <_dtoa_r+0xa46>
   14aa2:	9808      	ldr	r0, [sp, #32]
   14aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
   14aa6:	2200      	movs	r2, #0
   14aa8:	4b8c      	ldr	r3, [pc, #560]	; (14cdc <_dtoa_r+0x6e0>)
   14aaa:	f003 f843 	bl	17b34 <__aeabi_dmul>
   14aae:	9a06      	ldr	r2, [sp, #24]
   14ab0:	9b07      	ldr	r3, [sp, #28]
   14ab2:	f001 fe0f 	bl	166d4 <__aeabi_dcmpge>
   14ab6:	003e      	movs	r6, r7
   14ab8:	9708      	str	r7, [sp, #32]
   14aba:	2800      	cmp	r0, #0
   14abc:	d000      	beq.n	14ac0 <_dtoa_r+0x4c4>
   14abe:	e2a4      	b.n	1500a <_dtoa_r+0xa0e>
   14ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14ac4:	1c5d      	adds	r5, r3, #1
   14ac6:	2331      	movs	r3, #49	; 0x31
   14ac8:	7013      	strb	r3, [r2, #0]
   14aca:	9b03      	ldr	r3, [sp, #12]
   14acc:	3301      	adds	r3, #1
   14ace:	9303      	str	r3, [sp, #12]
   14ad0:	e29f      	b.n	15012 <_dtoa_r+0xa16>
   14ad2:	2201      	movs	r2, #1
   14ad4:	4215      	tst	r5, r2
   14ad6:	d005      	beq.n	14ae4 <_dtoa_r+0x4e8>
   14ad8:	18a4      	adds	r4, r4, r2
   14ada:	6832      	ldr	r2, [r6, #0]
   14adc:	6873      	ldr	r3, [r6, #4]
   14ade:	f003 f829 	bl	17b34 <__aeabi_dmul>
   14ae2:	2301      	movs	r3, #1
   14ae4:	106d      	asrs	r5, r5, #1
   14ae6:	3608      	adds	r6, #8
   14ae8:	e763      	b.n	149b2 <_dtoa_r+0x3b6>
   14aea:	9e03      	ldr	r6, [sp, #12]
   14aec:	003d      	movs	r5, r7
   14aee:	e789      	b.n	14a04 <_dtoa_r+0x408>
   14af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14af2:	1e69      	subs	r1, r5, #1
   14af4:	1952      	adds	r2, r2, r5
   14af6:	9217      	str	r2, [sp, #92]	; 0x5c
   14af8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14afa:	4b72      	ldr	r3, [pc, #456]	; (14cc4 <_dtoa_r+0x6c8>)
   14afc:	00c9      	lsls	r1, r1, #3
   14afe:	2a00      	cmp	r2, #0
   14b00:	d04a      	beq.n	14b98 <_dtoa_r+0x59c>
   14b02:	185b      	adds	r3, r3, r1
   14b04:	681a      	ldr	r2, [r3, #0]
   14b06:	685b      	ldr	r3, [r3, #4]
   14b08:	2000      	movs	r0, #0
   14b0a:	4976      	ldr	r1, [pc, #472]	; (14ce4 <_dtoa_r+0x6e8>)
   14b0c:	f002 fbde 	bl	172cc <__aeabi_ddiv>
   14b10:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14b12:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14b14:	f003 fa8e 	bl	18034 <__aeabi_dsub>
   14b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14b1a:	9010      	str	r0, [sp, #64]	; 0x40
   14b1c:	9111      	str	r1, [sp, #68]	; 0x44
   14b1e:	9312      	str	r3, [sp, #72]	; 0x48
   14b20:	9806      	ldr	r0, [sp, #24]
   14b22:	9907      	ldr	r1, [sp, #28]
   14b24:	f003 fdbc 	bl	186a0 <__aeabi_d2iz>
   14b28:	0004      	movs	r4, r0
   14b2a:	f003 fded 	bl	18708 <__aeabi_i2d>
   14b2e:	0002      	movs	r2, r0
   14b30:	000b      	movs	r3, r1
   14b32:	9806      	ldr	r0, [sp, #24]
   14b34:	9907      	ldr	r1, [sp, #28]
   14b36:	f003 fa7d 	bl	18034 <__aeabi_dsub>
   14b3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14b3c:	3430      	adds	r4, #48	; 0x30
   14b3e:	1c5d      	adds	r5, r3, #1
   14b40:	701c      	strb	r4, [r3, #0]
   14b42:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14b44:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14b46:	9006      	str	r0, [sp, #24]
   14b48:	9107      	str	r1, [sp, #28]
   14b4a:	f001 fda5 	bl	16698 <__aeabi_dcmplt>
   14b4e:	2800      	cmp	r0, #0
   14b50:	d165      	bne.n	14c1e <_dtoa_r+0x622>
   14b52:	9a06      	ldr	r2, [sp, #24]
   14b54:	9b07      	ldr	r3, [sp, #28]
   14b56:	2000      	movs	r0, #0
   14b58:	495c      	ldr	r1, [pc, #368]	; (14ccc <_dtoa_r+0x6d0>)
   14b5a:	f003 fa6b 	bl	18034 <__aeabi_dsub>
   14b5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14b60:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14b62:	f001 fd99 	bl	16698 <__aeabi_dcmplt>
   14b66:	2800      	cmp	r0, #0
   14b68:	d000      	beq.n	14b6c <_dtoa_r+0x570>
   14b6a:	e0be      	b.n	14cea <_dtoa_r+0x6ee>
   14b6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14b6e:	429d      	cmp	r5, r3
   14b70:	d100      	bne.n	14b74 <_dtoa_r+0x578>
   14b72:	e77a      	b.n	14a6a <_dtoa_r+0x46e>
   14b74:	9810      	ldr	r0, [sp, #64]	; 0x40
   14b76:	9911      	ldr	r1, [sp, #68]	; 0x44
   14b78:	2200      	movs	r2, #0
   14b7a:	4b55      	ldr	r3, [pc, #340]	; (14cd0 <_dtoa_r+0x6d4>)
   14b7c:	f002 ffda 	bl	17b34 <__aeabi_dmul>
   14b80:	2200      	movs	r2, #0
   14b82:	9010      	str	r0, [sp, #64]	; 0x40
   14b84:	9111      	str	r1, [sp, #68]	; 0x44
   14b86:	9806      	ldr	r0, [sp, #24]
   14b88:	9907      	ldr	r1, [sp, #28]
   14b8a:	4b51      	ldr	r3, [pc, #324]	; (14cd0 <_dtoa_r+0x6d4>)
   14b8c:	f002 ffd2 	bl	17b34 <__aeabi_dmul>
   14b90:	9512      	str	r5, [sp, #72]	; 0x48
   14b92:	9006      	str	r0, [sp, #24]
   14b94:	9107      	str	r1, [sp, #28]
   14b96:	e7c3      	b.n	14b20 <_dtoa_r+0x524>
   14b98:	1859      	adds	r1, r3, r1
   14b9a:	6808      	ldr	r0, [r1, #0]
   14b9c:	6849      	ldr	r1, [r1, #4]
   14b9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14ba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14ba2:	f002 ffc7 	bl	17b34 <__aeabi_dmul>
   14ba6:	9010      	str	r0, [sp, #64]	; 0x40
   14ba8:	9111      	str	r1, [sp, #68]	; 0x44
   14baa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14bac:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   14bae:	9806      	ldr	r0, [sp, #24]
   14bb0:	9907      	ldr	r1, [sp, #28]
   14bb2:	f003 fd75 	bl	186a0 <__aeabi_d2iz>
   14bb6:	9012      	str	r0, [sp, #72]	; 0x48
   14bb8:	f003 fda6 	bl	18708 <__aeabi_i2d>
   14bbc:	0002      	movs	r2, r0
   14bbe:	000b      	movs	r3, r1
   14bc0:	9806      	ldr	r0, [sp, #24]
   14bc2:	9907      	ldr	r1, [sp, #28]
   14bc4:	f003 fa36 	bl	18034 <__aeabi_dsub>
   14bc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14bca:	9006      	str	r0, [sp, #24]
   14bcc:	9107      	str	r1, [sp, #28]
   14bce:	3330      	adds	r3, #48	; 0x30
   14bd0:	7023      	strb	r3, [r4, #0]
   14bd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14bd4:	3401      	adds	r4, #1
   14bd6:	2200      	movs	r2, #0
   14bd8:	42a3      	cmp	r3, r4
   14bda:	d124      	bne.n	14c26 <_dtoa_r+0x62a>
   14bdc:	4b41      	ldr	r3, [pc, #260]	; (14ce4 <_dtoa_r+0x6e8>)
   14bde:	9810      	ldr	r0, [sp, #64]	; 0x40
   14be0:	9911      	ldr	r1, [sp, #68]	; 0x44
   14be2:	f002 f863 	bl	16cac <__aeabi_dadd>
   14be6:	0002      	movs	r2, r0
   14be8:	000b      	movs	r3, r1
   14bea:	9806      	ldr	r0, [sp, #24]
   14bec:	9907      	ldr	r1, [sp, #28]
   14bee:	f001 fd67 	bl	166c0 <__aeabi_dcmpgt>
   14bf2:	2800      	cmp	r0, #0
   14bf4:	d000      	beq.n	14bf8 <_dtoa_r+0x5fc>
   14bf6:	e078      	b.n	14cea <_dtoa_r+0x6ee>
   14bf8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14bfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14bfc:	2000      	movs	r0, #0
   14bfe:	4939      	ldr	r1, [pc, #228]	; (14ce4 <_dtoa_r+0x6e8>)
   14c00:	f003 fa18 	bl	18034 <__aeabi_dsub>
   14c04:	0002      	movs	r2, r0
   14c06:	000b      	movs	r3, r1
   14c08:	9806      	ldr	r0, [sp, #24]
   14c0a:	9907      	ldr	r1, [sp, #28]
   14c0c:	f001 fd44 	bl	16698 <__aeabi_dcmplt>
   14c10:	2800      	cmp	r0, #0
   14c12:	d100      	bne.n	14c16 <_dtoa_r+0x61a>
   14c14:	e729      	b.n	14a6a <_dtoa_r+0x46e>
   14c16:	1e6b      	subs	r3, r5, #1
   14c18:	781a      	ldrb	r2, [r3, #0]
   14c1a:	2a30      	cmp	r2, #48	; 0x30
   14c1c:	d001      	beq.n	14c22 <_dtoa_r+0x626>
   14c1e:	9603      	str	r6, [sp, #12]
   14c20:	e03f      	b.n	14ca2 <_dtoa_r+0x6a6>
   14c22:	001d      	movs	r5, r3
   14c24:	e7f7      	b.n	14c16 <_dtoa_r+0x61a>
   14c26:	9806      	ldr	r0, [sp, #24]
   14c28:	9907      	ldr	r1, [sp, #28]
   14c2a:	4b29      	ldr	r3, [pc, #164]	; (14cd0 <_dtoa_r+0x6d4>)
   14c2c:	f002 ff82 	bl	17b34 <__aeabi_dmul>
   14c30:	9006      	str	r0, [sp, #24]
   14c32:	9107      	str	r1, [sp, #28]
   14c34:	e7bb      	b.n	14bae <_dtoa_r+0x5b2>
   14c36:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   14c38:	9a08      	ldr	r2, [sp, #32]
   14c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14c3c:	9806      	ldr	r0, [sp, #24]
   14c3e:	9907      	ldr	r1, [sp, #28]
   14c40:	f002 fb44 	bl	172cc <__aeabi_ddiv>
   14c44:	f003 fd2c 	bl	186a0 <__aeabi_d2iz>
   14c48:	0004      	movs	r4, r0
   14c4a:	f003 fd5d 	bl	18708 <__aeabi_i2d>
   14c4e:	9a08      	ldr	r2, [sp, #32]
   14c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14c52:	f002 ff6f 	bl	17b34 <__aeabi_dmul>
   14c56:	000b      	movs	r3, r1
   14c58:	0002      	movs	r2, r0
   14c5a:	9806      	ldr	r0, [sp, #24]
   14c5c:	9907      	ldr	r1, [sp, #28]
   14c5e:	f003 f9e9 	bl	18034 <__aeabi_dsub>
   14c62:	0023      	movs	r3, r4
   14c64:	3330      	adds	r3, #48	; 0x30
   14c66:	7033      	strb	r3, [r6, #0]
   14c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14c6a:	1c75      	adds	r5, r6, #1
   14c6c:	1aeb      	subs	r3, r5, r3
   14c6e:	429f      	cmp	r7, r3
   14c70:	d14c      	bne.n	14d0c <_dtoa_r+0x710>
   14c72:	0002      	movs	r2, r0
   14c74:	000b      	movs	r3, r1
   14c76:	f002 f819 	bl	16cac <__aeabi_dadd>
   14c7a:	0006      	movs	r6, r0
   14c7c:	000f      	movs	r7, r1
   14c7e:	0002      	movs	r2, r0
   14c80:	000b      	movs	r3, r1
   14c82:	9808      	ldr	r0, [sp, #32]
   14c84:	9909      	ldr	r1, [sp, #36]	; 0x24
   14c86:	f001 fd07 	bl	16698 <__aeabi_dcmplt>
   14c8a:	2800      	cmp	r0, #0
   14c8c:	d12c      	bne.n	14ce8 <_dtoa_r+0x6ec>
   14c8e:	9808      	ldr	r0, [sp, #32]
   14c90:	9909      	ldr	r1, [sp, #36]	; 0x24
   14c92:	0032      	movs	r2, r6
   14c94:	003b      	movs	r3, r7
   14c96:	f001 fcf9 	bl	1668c <__aeabi_dcmpeq>
   14c9a:	2800      	cmp	r0, #0
   14c9c:	d001      	beq.n	14ca2 <_dtoa_r+0x6a6>
   14c9e:	07e3      	lsls	r3, r4, #31
   14ca0:	d422      	bmi.n	14ce8 <_dtoa_r+0x6ec>
   14ca2:	9905      	ldr	r1, [sp, #20]
   14ca4:	9804      	ldr	r0, [sp, #16]
   14ca6:	f000 fcdc 	bl	15662 <_Bfree>
   14caa:	2300      	movs	r3, #0
   14cac:	702b      	strb	r3, [r5, #0]
   14cae:	9b03      	ldr	r3, [sp, #12]
   14cb0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14cb2:	3301      	adds	r3, #1
   14cb4:	6013      	str	r3, [r2, #0]
   14cb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   14cb8:	2b00      	cmp	r3, #0
   14cba:	d100      	bne.n	14cbe <_dtoa_r+0x6c2>
   14cbc:	e275      	b.n	151aa <_dtoa_r+0xbae>
   14cbe:	601d      	str	r5, [r3, #0]
   14cc0:	e273      	b.n	151aa <_dtoa_r+0xbae>
   14cc2:	46c0      	nop			; (mov r8, r8)
   14cc4:	0001b098 	.word	0x0001b098
   14cc8:	0001b070 	.word	0x0001b070
   14ccc:	3ff00000 	.word	0x3ff00000
   14cd0:	40240000 	.word	0x40240000
   14cd4:	401c0000 	.word	0x401c0000
   14cd8:	fcc00000 	.word	0xfcc00000
   14cdc:	40140000 	.word	0x40140000
   14ce0:	7cc00000 	.word	0x7cc00000
   14ce4:	3fe00000 	.word	0x3fe00000
   14ce8:	9e03      	ldr	r6, [sp, #12]
   14cea:	1e6b      	subs	r3, r5, #1
   14cec:	781a      	ldrb	r2, [r3, #0]
   14cee:	2a39      	cmp	r2, #57	; 0x39
   14cf0:	d106      	bne.n	14d00 <_dtoa_r+0x704>
   14cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14cf4:	429a      	cmp	r2, r3
   14cf6:	d107      	bne.n	14d08 <_dtoa_r+0x70c>
   14cf8:	2330      	movs	r3, #48	; 0x30
   14cfa:	7013      	strb	r3, [r2, #0]
   14cfc:	0013      	movs	r3, r2
   14cfe:	3601      	adds	r6, #1
   14d00:	781a      	ldrb	r2, [r3, #0]
   14d02:	3201      	adds	r2, #1
   14d04:	701a      	strb	r2, [r3, #0]
   14d06:	e78a      	b.n	14c1e <_dtoa_r+0x622>
   14d08:	001d      	movs	r5, r3
   14d0a:	e7ee      	b.n	14cea <_dtoa_r+0x6ee>
   14d0c:	2200      	movs	r2, #0
   14d0e:	4bcf      	ldr	r3, [pc, #828]	; (1504c <_dtoa_r+0xa50>)
   14d10:	f002 ff10 	bl	17b34 <__aeabi_dmul>
   14d14:	2200      	movs	r2, #0
   14d16:	2300      	movs	r3, #0
   14d18:	9006      	str	r0, [sp, #24]
   14d1a:	9107      	str	r1, [sp, #28]
   14d1c:	002e      	movs	r6, r5
   14d1e:	f001 fcb5 	bl	1668c <__aeabi_dcmpeq>
   14d22:	2800      	cmp	r0, #0
   14d24:	d100      	bne.n	14d28 <_dtoa_r+0x72c>
   14d26:	e787      	b.n	14c38 <_dtoa_r+0x63c>
   14d28:	e7bb      	b.n	14ca2 <_dtoa_r+0x6a6>
   14d2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14d2c:	2a00      	cmp	r2, #0
   14d2e:	d100      	bne.n	14d32 <_dtoa_r+0x736>
   14d30:	e087      	b.n	14e42 <_dtoa_r+0x846>
   14d32:	9a22      	ldr	r2, [sp, #136]	; 0x88
   14d34:	2a01      	cmp	r2, #1
   14d36:	dc6e      	bgt.n	14e16 <_dtoa_r+0x81a>
   14d38:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14d3a:	2a00      	cmp	r2, #0
   14d3c:	d067      	beq.n	14e0e <_dtoa_r+0x812>
   14d3e:	4ac4      	ldr	r2, [pc, #784]	; (15050 <_dtoa_r+0xa54>)
   14d40:	189b      	adds	r3, r3, r2
   14d42:	9d08      	ldr	r5, [sp, #32]
   14d44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   14d46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14d48:	2101      	movs	r1, #1
   14d4a:	18d2      	adds	r2, r2, r3
   14d4c:	920b      	str	r2, [sp, #44]	; 0x2c
   14d4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14d50:	9804      	ldr	r0, [sp, #16]
   14d52:	18d3      	adds	r3, r2, r3
   14d54:	930c      	str	r3, [sp, #48]	; 0x30
   14d56:	f000 fd22 	bl	1579e <__i2b>
   14d5a:	0006      	movs	r6, r0
   14d5c:	2c00      	cmp	r4, #0
   14d5e:	dd0e      	ble.n	14d7e <_dtoa_r+0x782>
   14d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14d62:	2b00      	cmp	r3, #0
   14d64:	dd0b      	ble.n	14d7e <_dtoa_r+0x782>
   14d66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14d68:	0023      	movs	r3, r4
   14d6a:	4294      	cmp	r4, r2
   14d6c:	dd00      	ble.n	14d70 <_dtoa_r+0x774>
   14d6e:	0013      	movs	r3, r2
   14d70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14d72:	1ae4      	subs	r4, r4, r3
   14d74:	1ad2      	subs	r2, r2, r3
   14d76:	920b      	str	r2, [sp, #44]	; 0x2c
   14d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14d7a:	1ad3      	subs	r3, r2, r3
   14d7c:	930c      	str	r3, [sp, #48]	; 0x30
   14d7e:	9b08      	ldr	r3, [sp, #32]
   14d80:	2b00      	cmp	r3, #0
   14d82:	d01e      	beq.n	14dc2 <_dtoa_r+0x7c6>
   14d84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14d86:	2b00      	cmp	r3, #0
   14d88:	d05f      	beq.n	14e4a <_dtoa_r+0x84e>
   14d8a:	2d00      	cmp	r5, #0
   14d8c:	dd11      	ble.n	14db2 <_dtoa_r+0x7b6>
   14d8e:	0031      	movs	r1, r6
   14d90:	002a      	movs	r2, r5
   14d92:	9804      	ldr	r0, [sp, #16]
   14d94:	f000 fd9c 	bl	158d0 <__pow5mult>
   14d98:	9a05      	ldr	r2, [sp, #20]
   14d9a:	0001      	movs	r1, r0
   14d9c:	0006      	movs	r6, r0
   14d9e:	9804      	ldr	r0, [sp, #16]
   14da0:	f000 fd06 	bl	157b0 <__multiply>
   14da4:	9905      	ldr	r1, [sp, #20]
   14da6:	9010      	str	r0, [sp, #64]	; 0x40
   14da8:	9804      	ldr	r0, [sp, #16]
   14daa:	f000 fc5a 	bl	15662 <_Bfree>
   14dae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14db0:	9305      	str	r3, [sp, #20]
   14db2:	9b08      	ldr	r3, [sp, #32]
   14db4:	1b5a      	subs	r2, r3, r5
   14db6:	d004      	beq.n	14dc2 <_dtoa_r+0x7c6>
   14db8:	9905      	ldr	r1, [sp, #20]
   14dba:	9804      	ldr	r0, [sp, #16]
   14dbc:	f000 fd88 	bl	158d0 <__pow5mult>
   14dc0:	9005      	str	r0, [sp, #20]
   14dc2:	2101      	movs	r1, #1
   14dc4:	9804      	ldr	r0, [sp, #16]
   14dc6:	f000 fcea 	bl	1579e <__i2b>
   14dca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14dcc:	9008      	str	r0, [sp, #32]
   14dce:	2b00      	cmp	r3, #0
   14dd0:	dd3d      	ble.n	14e4e <_dtoa_r+0x852>
   14dd2:	001a      	movs	r2, r3
   14dd4:	0001      	movs	r1, r0
   14dd6:	9804      	ldr	r0, [sp, #16]
   14dd8:	f000 fd7a 	bl	158d0 <__pow5mult>
   14ddc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14dde:	9008      	str	r0, [sp, #32]
   14de0:	2500      	movs	r5, #0
   14de2:	2b01      	cmp	r3, #1
   14de4:	dc3b      	bgt.n	14e5e <_dtoa_r+0x862>
   14de6:	2500      	movs	r5, #0
   14de8:	9b06      	ldr	r3, [sp, #24]
   14dea:	42ab      	cmp	r3, r5
   14dec:	d133      	bne.n	14e56 <_dtoa_r+0x85a>
   14dee:	9b07      	ldr	r3, [sp, #28]
   14df0:	031b      	lsls	r3, r3, #12
   14df2:	42ab      	cmp	r3, r5
   14df4:	d12f      	bne.n	14e56 <_dtoa_r+0x85a>
   14df6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14df8:	9a07      	ldr	r2, [sp, #28]
   14dfa:	4213      	tst	r3, r2
   14dfc:	d02b      	beq.n	14e56 <_dtoa_r+0x85a>
   14dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14e00:	3501      	adds	r5, #1
   14e02:	3301      	adds	r3, #1
   14e04:	930b      	str	r3, [sp, #44]	; 0x2c
   14e06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14e08:	3301      	adds	r3, #1
   14e0a:	930c      	str	r3, [sp, #48]	; 0x30
   14e0c:	e023      	b.n	14e56 <_dtoa_r+0x85a>
   14e0e:	2336      	movs	r3, #54	; 0x36
   14e10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   14e12:	1a9b      	subs	r3, r3, r2
   14e14:	e795      	b.n	14d42 <_dtoa_r+0x746>
   14e16:	9b08      	ldr	r3, [sp, #32]
   14e18:	1e7d      	subs	r5, r7, #1
   14e1a:	42ab      	cmp	r3, r5
   14e1c:	db06      	blt.n	14e2c <_dtoa_r+0x830>
   14e1e:	1b5d      	subs	r5, r3, r5
   14e20:	2f00      	cmp	r7, #0
   14e22:	da0b      	bge.n	14e3c <_dtoa_r+0x840>
   14e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14e26:	1bdc      	subs	r4, r3, r7
   14e28:	2300      	movs	r3, #0
   14e2a:	e78c      	b.n	14d46 <_dtoa_r+0x74a>
   14e2c:	9b08      	ldr	r3, [sp, #32]
   14e2e:	9508      	str	r5, [sp, #32]
   14e30:	1aea      	subs	r2, r5, r3
   14e32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14e34:	2500      	movs	r5, #0
   14e36:	189b      	adds	r3, r3, r2
   14e38:	930f      	str	r3, [sp, #60]	; 0x3c
   14e3a:	e7f1      	b.n	14e20 <_dtoa_r+0x824>
   14e3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   14e3e:	003b      	movs	r3, r7
   14e40:	e781      	b.n	14d46 <_dtoa_r+0x74a>
   14e42:	9d08      	ldr	r5, [sp, #32]
   14e44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   14e46:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14e48:	e788      	b.n	14d5c <_dtoa_r+0x760>
   14e4a:	9a08      	ldr	r2, [sp, #32]
   14e4c:	e7b4      	b.n	14db8 <_dtoa_r+0x7bc>
   14e4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14e50:	2500      	movs	r5, #0
   14e52:	2b01      	cmp	r3, #1
   14e54:	ddc7      	ble.n	14de6 <_dtoa_r+0x7ea>
   14e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14e58:	2001      	movs	r0, #1
   14e5a:	2b00      	cmp	r3, #0
   14e5c:	d00b      	beq.n	14e76 <_dtoa_r+0x87a>
   14e5e:	9b08      	ldr	r3, [sp, #32]
   14e60:	9a08      	ldr	r2, [sp, #32]
   14e62:	691b      	ldr	r3, [r3, #16]
   14e64:	930f      	str	r3, [sp, #60]	; 0x3c
   14e66:	3303      	adds	r3, #3
   14e68:	009b      	lsls	r3, r3, #2
   14e6a:	18d3      	adds	r3, r2, r3
   14e6c:	6858      	ldr	r0, [r3, #4]
   14e6e:	f000 fc4d 	bl	1570c <__hi0bits>
   14e72:	2320      	movs	r3, #32
   14e74:	1a18      	subs	r0, r3, r0
   14e76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14e78:	18c0      	adds	r0, r0, r3
   14e7a:	231f      	movs	r3, #31
   14e7c:	4018      	ands	r0, r3
   14e7e:	d100      	bne.n	14e82 <_dtoa_r+0x886>
   14e80:	e0ab      	b.n	14fda <_dtoa_r+0x9de>
   14e82:	3301      	adds	r3, #1
   14e84:	1a1b      	subs	r3, r3, r0
   14e86:	2b04      	cmp	r3, #4
   14e88:	dc00      	bgt.n	14e8c <_dtoa_r+0x890>
   14e8a:	e09b      	b.n	14fc4 <_dtoa_r+0x9c8>
   14e8c:	231c      	movs	r3, #28
   14e8e:	1a18      	subs	r0, r3, r0
   14e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14e92:	1824      	adds	r4, r4, r0
   14e94:	181b      	adds	r3, r3, r0
   14e96:	930b      	str	r3, [sp, #44]	; 0x2c
   14e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14e9a:	181b      	adds	r3, r3, r0
   14e9c:	930c      	str	r3, [sp, #48]	; 0x30
   14e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14ea0:	2b00      	cmp	r3, #0
   14ea2:	dd05      	ble.n	14eb0 <_dtoa_r+0x8b4>
   14ea4:	001a      	movs	r2, r3
   14ea6:	9905      	ldr	r1, [sp, #20]
   14ea8:	9804      	ldr	r0, [sp, #16]
   14eaa:	f000 fd63 	bl	15974 <__lshift>
   14eae:	9005      	str	r0, [sp, #20]
   14eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14eb2:	2b00      	cmp	r3, #0
   14eb4:	dd05      	ble.n	14ec2 <_dtoa_r+0x8c6>
   14eb6:	001a      	movs	r2, r3
   14eb8:	9908      	ldr	r1, [sp, #32]
   14eba:	9804      	ldr	r0, [sp, #16]
   14ebc:	f000 fd5a 	bl	15974 <__lshift>
   14ec0:	9008      	str	r0, [sp, #32]
   14ec2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14ec4:	2b00      	cmp	r3, #0
   14ec6:	d100      	bne.n	14eca <_dtoa_r+0x8ce>
   14ec8:	e089      	b.n	14fde <_dtoa_r+0x9e2>
   14eca:	9908      	ldr	r1, [sp, #32]
   14ecc:	9805      	ldr	r0, [sp, #20]
   14ece:	f000 fda2 	bl	15a16 <__mcmp>
   14ed2:	2800      	cmp	r0, #0
   14ed4:	db00      	blt.n	14ed8 <_dtoa_r+0x8dc>
   14ed6:	e082      	b.n	14fde <_dtoa_r+0x9e2>
   14ed8:	9b03      	ldr	r3, [sp, #12]
   14eda:	220a      	movs	r2, #10
   14edc:	3b01      	subs	r3, #1
   14ede:	9303      	str	r3, [sp, #12]
   14ee0:	9905      	ldr	r1, [sp, #20]
   14ee2:	2300      	movs	r3, #0
   14ee4:	9804      	ldr	r0, [sp, #16]
   14ee6:	f000 fbd5 	bl	15694 <__multadd>
   14eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14eec:	9005      	str	r0, [sp, #20]
   14eee:	2b00      	cmp	r3, #0
   14ef0:	d100      	bne.n	14ef4 <_dtoa_r+0x8f8>
   14ef2:	e15d      	b.n	151b0 <_dtoa_r+0xbb4>
   14ef4:	2300      	movs	r3, #0
   14ef6:	0031      	movs	r1, r6
   14ef8:	220a      	movs	r2, #10
   14efa:	9804      	ldr	r0, [sp, #16]
   14efc:	f000 fbca 	bl	15694 <__multadd>
   14f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14f02:	0006      	movs	r6, r0
   14f04:	2b00      	cmp	r3, #0
   14f06:	dc02      	bgt.n	14f0e <_dtoa_r+0x912>
   14f08:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14f0a:	2b02      	cmp	r3, #2
   14f0c:	dc6d      	bgt.n	14fea <_dtoa_r+0x9ee>
   14f0e:	2c00      	cmp	r4, #0
   14f10:	dd05      	ble.n	14f1e <_dtoa_r+0x922>
   14f12:	0031      	movs	r1, r6
   14f14:	0022      	movs	r2, r4
   14f16:	9804      	ldr	r0, [sp, #16]
   14f18:	f000 fd2c 	bl	15974 <__lshift>
   14f1c:	0006      	movs	r6, r0
   14f1e:	0030      	movs	r0, r6
   14f20:	2d00      	cmp	r5, #0
   14f22:	d011      	beq.n	14f48 <_dtoa_r+0x94c>
   14f24:	6871      	ldr	r1, [r6, #4]
   14f26:	9804      	ldr	r0, [sp, #16]
   14f28:	f000 fb63 	bl	155f2 <_Balloc>
   14f2c:	0031      	movs	r1, r6
   14f2e:	0004      	movs	r4, r0
   14f30:	6933      	ldr	r3, [r6, #16]
   14f32:	310c      	adds	r1, #12
   14f34:	1c9a      	adds	r2, r3, #2
   14f36:	0092      	lsls	r2, r2, #2
   14f38:	300c      	adds	r0, #12
   14f3a:	f7fe fa4b 	bl	133d4 <memcpy>
   14f3e:	2201      	movs	r2, #1
   14f40:	0021      	movs	r1, r4
   14f42:	9804      	ldr	r0, [sp, #16]
   14f44:	f000 fd16 	bl	15974 <__lshift>
   14f48:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   14f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14f4c:	3f01      	subs	r7, #1
   14f4e:	930b      	str	r3, [sp, #44]	; 0x2c
   14f50:	19db      	adds	r3, r3, r7
   14f52:	0037      	movs	r7, r6
   14f54:	0006      	movs	r6, r0
   14f56:	930f      	str	r3, [sp, #60]	; 0x3c
   14f58:	9908      	ldr	r1, [sp, #32]
   14f5a:	9805      	ldr	r0, [sp, #20]
   14f5c:	f7ff faca 	bl	144f4 <quorem>
   14f60:	0039      	movs	r1, r7
   14f62:	900d      	str	r0, [sp, #52]	; 0x34
   14f64:	0004      	movs	r4, r0
   14f66:	9805      	ldr	r0, [sp, #20]
   14f68:	f000 fd55 	bl	15a16 <__mcmp>
   14f6c:	0032      	movs	r2, r6
   14f6e:	900e      	str	r0, [sp, #56]	; 0x38
   14f70:	9908      	ldr	r1, [sp, #32]
   14f72:	9804      	ldr	r0, [sp, #16]
   14f74:	f000 fd68 	bl	15a48 <__mdiff>
   14f78:	2301      	movs	r3, #1
   14f7a:	930c      	str	r3, [sp, #48]	; 0x30
   14f7c:	68c3      	ldr	r3, [r0, #12]
   14f7e:	3430      	adds	r4, #48	; 0x30
   14f80:	0005      	movs	r5, r0
   14f82:	2b00      	cmp	r3, #0
   14f84:	d104      	bne.n	14f90 <_dtoa_r+0x994>
   14f86:	0001      	movs	r1, r0
   14f88:	9805      	ldr	r0, [sp, #20]
   14f8a:	f000 fd44 	bl	15a16 <__mcmp>
   14f8e:	900c      	str	r0, [sp, #48]	; 0x30
   14f90:	0029      	movs	r1, r5
   14f92:	9804      	ldr	r0, [sp, #16]
   14f94:	f000 fb65 	bl	15662 <_Bfree>
   14f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14f9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   14f9c:	4313      	orrs	r3, r2
   14f9e:	d000      	beq.n	14fa2 <_dtoa_r+0x9a6>
   14fa0:	e089      	b.n	150b6 <_dtoa_r+0xaba>
   14fa2:	9a06      	ldr	r2, [sp, #24]
   14fa4:	3301      	adds	r3, #1
   14fa6:	4213      	tst	r3, r2
   14fa8:	d000      	beq.n	14fac <_dtoa_r+0x9b0>
   14faa:	e084      	b.n	150b6 <_dtoa_r+0xaba>
   14fac:	2c39      	cmp	r4, #57	; 0x39
   14fae:	d100      	bne.n	14fb2 <_dtoa_r+0x9b6>
   14fb0:	e0a3      	b.n	150fa <_dtoa_r+0xafe>
   14fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14fb4:	2b00      	cmp	r3, #0
   14fb6:	dd01      	ble.n	14fbc <_dtoa_r+0x9c0>
   14fb8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14fba:	3431      	adds	r4, #49	; 0x31
   14fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14fbe:	1c5d      	adds	r5, r3, #1
   14fc0:	701c      	strb	r4, [r3, #0]
   14fc2:	e027      	b.n	15014 <_dtoa_r+0xa18>
   14fc4:	2b04      	cmp	r3, #4
   14fc6:	d100      	bne.n	14fca <_dtoa_r+0x9ce>
   14fc8:	e769      	b.n	14e9e <_dtoa_r+0x8a2>
   14fca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14fcc:	331c      	adds	r3, #28
   14fce:	18d2      	adds	r2, r2, r3
   14fd0:	920b      	str	r2, [sp, #44]	; 0x2c
   14fd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14fd4:	18e4      	adds	r4, r4, r3
   14fd6:	18d3      	adds	r3, r2, r3
   14fd8:	e760      	b.n	14e9c <_dtoa_r+0x8a0>
   14fda:	0003      	movs	r3, r0
   14fdc:	e7f5      	b.n	14fca <_dtoa_r+0x9ce>
   14fde:	2f00      	cmp	r7, #0
   14fe0:	dc3c      	bgt.n	1505c <_dtoa_r+0xa60>
   14fe2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14fe4:	2b02      	cmp	r3, #2
   14fe6:	dd39      	ble.n	1505c <_dtoa_r+0xa60>
   14fe8:	970d      	str	r7, [sp, #52]	; 0x34
   14fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14fec:	2b00      	cmp	r3, #0
   14fee:	d10c      	bne.n	1500a <_dtoa_r+0xa0e>
   14ff0:	9908      	ldr	r1, [sp, #32]
   14ff2:	2205      	movs	r2, #5
   14ff4:	9804      	ldr	r0, [sp, #16]
   14ff6:	f000 fb4d 	bl	15694 <__multadd>
   14ffa:	9008      	str	r0, [sp, #32]
   14ffc:	0001      	movs	r1, r0
   14ffe:	9805      	ldr	r0, [sp, #20]
   15000:	f000 fd09 	bl	15a16 <__mcmp>
   15004:	2800      	cmp	r0, #0
   15006:	dd00      	ble.n	1500a <_dtoa_r+0xa0e>
   15008:	e55a      	b.n	14ac0 <_dtoa_r+0x4c4>
   1500a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1500c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1500e:	43db      	mvns	r3, r3
   15010:	9303      	str	r3, [sp, #12]
   15012:	2700      	movs	r7, #0
   15014:	9908      	ldr	r1, [sp, #32]
   15016:	9804      	ldr	r0, [sp, #16]
   15018:	f000 fb23 	bl	15662 <_Bfree>
   1501c:	2e00      	cmp	r6, #0
   1501e:	d100      	bne.n	15022 <_dtoa_r+0xa26>
   15020:	e63f      	b.n	14ca2 <_dtoa_r+0x6a6>
   15022:	2f00      	cmp	r7, #0
   15024:	d005      	beq.n	15032 <_dtoa_r+0xa36>
   15026:	42b7      	cmp	r7, r6
   15028:	d003      	beq.n	15032 <_dtoa_r+0xa36>
   1502a:	0039      	movs	r1, r7
   1502c:	9804      	ldr	r0, [sp, #16]
   1502e:	f000 fb18 	bl	15662 <_Bfree>
   15032:	0031      	movs	r1, r6
   15034:	9804      	ldr	r0, [sp, #16]
   15036:	f000 fb14 	bl	15662 <_Bfree>
   1503a:	e632      	b.n	14ca2 <_dtoa_r+0x6a6>
   1503c:	9508      	str	r5, [sp, #32]
   1503e:	002e      	movs	r6, r5
   15040:	e7e3      	b.n	1500a <_dtoa_r+0xa0e>
   15042:	2300      	movs	r3, #0
   15044:	9308      	str	r3, [sp, #32]
   15046:	001e      	movs	r6, r3
   15048:	e7df      	b.n	1500a <_dtoa_r+0xa0e>
   1504a:	46c0      	nop			; (mov r8, r8)
   1504c:	40240000 	.word	0x40240000
   15050:	00000433 	.word	0x00000433
   15054:	9603      	str	r6, [sp, #12]
   15056:	9508      	str	r5, [sp, #32]
   15058:	002e      	movs	r6, r5
   1505a:	e531      	b.n	14ac0 <_dtoa_r+0x4c4>
   1505c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1505e:	970d      	str	r7, [sp, #52]	; 0x34
   15060:	2b00      	cmp	r3, #0
   15062:	d000      	beq.n	15066 <_dtoa_r+0xa6a>
   15064:	e753      	b.n	14f0e <_dtoa_r+0x912>
   15066:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   15068:	9908      	ldr	r1, [sp, #32]
   1506a:	9805      	ldr	r0, [sp, #20]
   1506c:	f7ff fa42 	bl	144f4 <quorem>
   15070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15072:	3030      	adds	r0, #48	; 0x30
   15074:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15076:	7028      	strb	r0, [r5, #0]
   15078:	3501      	adds	r5, #1
   1507a:	0004      	movs	r4, r0
   1507c:	1aeb      	subs	r3, r5, r3
   1507e:	429a      	cmp	r2, r3
   15080:	dc78      	bgt.n	15174 <_dtoa_r+0xb78>
   15082:	1e15      	subs	r5, r2, #0
   15084:	dc00      	bgt.n	15088 <_dtoa_r+0xa8c>
   15086:	2501      	movs	r5, #1
   15088:	2700      	movs	r7, #0
   1508a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1508c:	195d      	adds	r5, r3, r5
   1508e:	9905      	ldr	r1, [sp, #20]
   15090:	2201      	movs	r2, #1
   15092:	9804      	ldr	r0, [sp, #16]
   15094:	f000 fc6e 	bl	15974 <__lshift>
   15098:	9908      	ldr	r1, [sp, #32]
   1509a:	9005      	str	r0, [sp, #20]
   1509c:	f000 fcbb 	bl	15a16 <__mcmp>
   150a0:	2800      	cmp	r0, #0
   150a2:	dc2f      	bgt.n	15104 <_dtoa_r+0xb08>
   150a4:	d101      	bne.n	150aa <_dtoa_r+0xaae>
   150a6:	07e3      	lsls	r3, r4, #31
   150a8:	d42c      	bmi.n	15104 <_dtoa_r+0xb08>
   150aa:	1e6b      	subs	r3, r5, #1
   150ac:	781a      	ldrb	r2, [r3, #0]
   150ae:	2a30      	cmp	r2, #48	; 0x30
   150b0:	d1b0      	bne.n	15014 <_dtoa_r+0xa18>
   150b2:	001d      	movs	r5, r3
   150b4:	e7f9      	b.n	150aa <_dtoa_r+0xaae>
   150b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   150b8:	2b00      	cmp	r3, #0
   150ba:	db07      	blt.n	150cc <_dtoa_r+0xad0>
   150bc:	001d      	movs	r5, r3
   150be:	9b22      	ldr	r3, [sp, #136]	; 0x88
   150c0:	431d      	orrs	r5, r3
   150c2:	d126      	bne.n	15112 <_dtoa_r+0xb16>
   150c4:	2301      	movs	r3, #1
   150c6:	9a06      	ldr	r2, [sp, #24]
   150c8:	4213      	tst	r3, r2
   150ca:	d122      	bne.n	15112 <_dtoa_r+0xb16>
   150cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   150ce:	2b00      	cmp	r3, #0
   150d0:	dc00      	bgt.n	150d4 <_dtoa_r+0xad8>
   150d2:	e773      	b.n	14fbc <_dtoa_r+0x9c0>
   150d4:	9905      	ldr	r1, [sp, #20]
   150d6:	2201      	movs	r2, #1
   150d8:	9804      	ldr	r0, [sp, #16]
   150da:	f000 fc4b 	bl	15974 <__lshift>
   150de:	9908      	ldr	r1, [sp, #32]
   150e0:	9005      	str	r0, [sp, #20]
   150e2:	f000 fc98 	bl	15a16 <__mcmp>
   150e6:	2800      	cmp	r0, #0
   150e8:	dc04      	bgt.n	150f4 <_dtoa_r+0xaf8>
   150ea:	d000      	beq.n	150ee <_dtoa_r+0xaf2>
   150ec:	e766      	b.n	14fbc <_dtoa_r+0x9c0>
   150ee:	07e3      	lsls	r3, r4, #31
   150f0:	d400      	bmi.n	150f4 <_dtoa_r+0xaf8>
   150f2:	e763      	b.n	14fbc <_dtoa_r+0x9c0>
   150f4:	2c39      	cmp	r4, #57	; 0x39
   150f6:	d000      	beq.n	150fa <_dtoa_r+0xafe>
   150f8:	e75e      	b.n	14fb8 <_dtoa_r+0x9bc>
   150fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   150fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   150fe:	1c5d      	adds	r5, r3, #1
   15100:	2339      	movs	r3, #57	; 0x39
   15102:	7013      	strb	r3, [r2, #0]
   15104:	1e6b      	subs	r3, r5, #1
   15106:	781a      	ldrb	r2, [r3, #0]
   15108:	2a39      	cmp	r2, #57	; 0x39
   1510a:	d03b      	beq.n	15184 <_dtoa_r+0xb88>
   1510c:	3201      	adds	r2, #1
   1510e:	701a      	strb	r2, [r3, #0]
   15110:	e780      	b.n	15014 <_dtoa_r+0xa18>
   15112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15114:	3301      	adds	r3, #1
   15116:	930d      	str	r3, [sp, #52]	; 0x34
   15118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1511a:	2b00      	cmp	r3, #0
   1511c:	dd05      	ble.n	1512a <_dtoa_r+0xb2e>
   1511e:	2c39      	cmp	r4, #57	; 0x39
   15120:	d0eb      	beq.n	150fa <_dtoa_r+0xafe>
   15122:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   15124:	3401      	adds	r4, #1
   15126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15128:	e74a      	b.n	14fc0 <_dtoa_r+0x9c4>
   1512a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1512c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1512e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   15130:	701c      	strb	r4, [r3, #0]
   15132:	4293      	cmp	r3, r2
   15134:	d0ab      	beq.n	1508e <_dtoa_r+0xa92>
   15136:	2300      	movs	r3, #0
   15138:	220a      	movs	r2, #10
   1513a:	9905      	ldr	r1, [sp, #20]
   1513c:	9804      	ldr	r0, [sp, #16]
   1513e:	f000 faa9 	bl	15694 <__multadd>
   15142:	2300      	movs	r3, #0
   15144:	9005      	str	r0, [sp, #20]
   15146:	220a      	movs	r2, #10
   15148:	0039      	movs	r1, r7
   1514a:	9804      	ldr	r0, [sp, #16]
   1514c:	42b7      	cmp	r7, r6
   1514e:	d106      	bne.n	1515e <_dtoa_r+0xb62>
   15150:	f000 faa0 	bl	15694 <__multadd>
   15154:	0007      	movs	r7, r0
   15156:	0006      	movs	r6, r0
   15158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1515a:	930b      	str	r3, [sp, #44]	; 0x2c
   1515c:	e6fc      	b.n	14f58 <_dtoa_r+0x95c>
   1515e:	f000 fa99 	bl	15694 <__multadd>
   15162:	0031      	movs	r1, r6
   15164:	0007      	movs	r7, r0
   15166:	2300      	movs	r3, #0
   15168:	220a      	movs	r2, #10
   1516a:	9804      	ldr	r0, [sp, #16]
   1516c:	f000 fa92 	bl	15694 <__multadd>
   15170:	0006      	movs	r6, r0
   15172:	e7f1      	b.n	15158 <_dtoa_r+0xb5c>
   15174:	2300      	movs	r3, #0
   15176:	220a      	movs	r2, #10
   15178:	9905      	ldr	r1, [sp, #20]
   1517a:	9804      	ldr	r0, [sp, #16]
   1517c:	f000 fa8a 	bl	15694 <__multadd>
   15180:	9005      	str	r0, [sp, #20]
   15182:	e771      	b.n	15068 <_dtoa_r+0xa6c>
   15184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15186:	429a      	cmp	r2, r3
   15188:	d105      	bne.n	15196 <_dtoa_r+0xb9a>
   1518a:	9b03      	ldr	r3, [sp, #12]
   1518c:	3301      	adds	r3, #1
   1518e:	9303      	str	r3, [sp, #12]
   15190:	2331      	movs	r3, #49	; 0x31
   15192:	7013      	strb	r3, [r2, #0]
   15194:	e73e      	b.n	15014 <_dtoa_r+0xa18>
   15196:	001d      	movs	r5, r3
   15198:	e7b4      	b.n	15104 <_dtoa_r+0xb08>
   1519a:	4b0a      	ldr	r3, [pc, #40]	; (151c4 <_dtoa_r+0xbc8>)
   1519c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1519e:	930a      	str	r3, [sp, #40]	; 0x28
   151a0:	4b09      	ldr	r3, [pc, #36]	; (151c8 <_dtoa_r+0xbcc>)
   151a2:	2a00      	cmp	r2, #0
   151a4:	d001      	beq.n	151aa <_dtoa_r+0xbae>
   151a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
   151a8:	6013      	str	r3, [r2, #0]
   151aa:	980a      	ldr	r0, [sp, #40]	; 0x28
   151ac:	b01d      	add	sp, #116	; 0x74
   151ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   151b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   151b2:	2b00      	cmp	r3, #0
   151b4:	dd00      	ble.n	151b8 <_dtoa_r+0xbbc>
   151b6:	e756      	b.n	15066 <_dtoa_r+0xa6a>
   151b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   151ba:	2b02      	cmp	r3, #2
   151bc:	dc00      	bgt.n	151c0 <_dtoa_r+0xbc4>
   151be:	e752      	b.n	15066 <_dtoa_r+0xa6a>
   151c0:	e713      	b.n	14fea <_dtoa_r+0x9ee>
   151c2:	46c0      	nop			; (mov r8, r8)
   151c4:	0001afff 	.word	0x0001afff
   151c8:	0001b007 	.word	0x0001b007

000151cc <__sflush_r>:
   151cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   151ce:	898a      	ldrh	r2, [r1, #12]
   151d0:	0005      	movs	r5, r0
   151d2:	000c      	movs	r4, r1
   151d4:	0713      	lsls	r3, r2, #28
   151d6:	d460      	bmi.n	1529a <__sflush_r+0xce>
   151d8:	684b      	ldr	r3, [r1, #4]
   151da:	2b00      	cmp	r3, #0
   151dc:	dc04      	bgt.n	151e8 <__sflush_r+0x1c>
   151de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   151e0:	2b00      	cmp	r3, #0
   151e2:	dc01      	bgt.n	151e8 <__sflush_r+0x1c>
   151e4:	2000      	movs	r0, #0
   151e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   151e8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   151ea:	2f00      	cmp	r7, #0
   151ec:	d0fa      	beq.n	151e4 <__sflush_r+0x18>
   151ee:	2300      	movs	r3, #0
   151f0:	682e      	ldr	r6, [r5, #0]
   151f2:	602b      	str	r3, [r5, #0]
   151f4:	2380      	movs	r3, #128	; 0x80
   151f6:	015b      	lsls	r3, r3, #5
   151f8:	401a      	ands	r2, r3
   151fa:	d034      	beq.n	15266 <__sflush_r+0x9a>
   151fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
   151fe:	89a3      	ldrh	r3, [r4, #12]
   15200:	075b      	lsls	r3, r3, #29
   15202:	d506      	bpl.n	15212 <__sflush_r+0x46>
   15204:	6863      	ldr	r3, [r4, #4]
   15206:	1ac0      	subs	r0, r0, r3
   15208:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1520a:	2b00      	cmp	r3, #0
   1520c:	d001      	beq.n	15212 <__sflush_r+0x46>
   1520e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   15210:	1ac0      	subs	r0, r0, r3
   15212:	0002      	movs	r2, r0
   15214:	6a21      	ldr	r1, [r4, #32]
   15216:	2300      	movs	r3, #0
   15218:	0028      	movs	r0, r5
   1521a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1521c:	47b8      	blx	r7
   1521e:	89a1      	ldrh	r1, [r4, #12]
   15220:	1c43      	adds	r3, r0, #1
   15222:	d106      	bne.n	15232 <__sflush_r+0x66>
   15224:	682b      	ldr	r3, [r5, #0]
   15226:	2b1d      	cmp	r3, #29
   15228:	d831      	bhi.n	1528e <__sflush_r+0xc2>
   1522a:	4a2c      	ldr	r2, [pc, #176]	; (152dc <__sflush_r+0x110>)
   1522c:	40da      	lsrs	r2, r3
   1522e:	07d3      	lsls	r3, r2, #31
   15230:	d52d      	bpl.n	1528e <__sflush_r+0xc2>
   15232:	2300      	movs	r3, #0
   15234:	6063      	str	r3, [r4, #4]
   15236:	6923      	ldr	r3, [r4, #16]
   15238:	6023      	str	r3, [r4, #0]
   1523a:	04cb      	lsls	r3, r1, #19
   1523c:	d505      	bpl.n	1524a <__sflush_r+0x7e>
   1523e:	1c43      	adds	r3, r0, #1
   15240:	d102      	bne.n	15248 <__sflush_r+0x7c>
   15242:	682b      	ldr	r3, [r5, #0]
   15244:	2b00      	cmp	r3, #0
   15246:	d100      	bne.n	1524a <__sflush_r+0x7e>
   15248:	6560      	str	r0, [r4, #84]	; 0x54
   1524a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1524c:	602e      	str	r6, [r5, #0]
   1524e:	2900      	cmp	r1, #0
   15250:	d0c8      	beq.n	151e4 <__sflush_r+0x18>
   15252:	0023      	movs	r3, r4
   15254:	3344      	adds	r3, #68	; 0x44
   15256:	4299      	cmp	r1, r3
   15258:	d002      	beq.n	15260 <__sflush_r+0x94>
   1525a:	0028      	movs	r0, r5
   1525c:	f7fe f8de 	bl	1341c <_free_r>
   15260:	2000      	movs	r0, #0
   15262:	6360      	str	r0, [r4, #52]	; 0x34
   15264:	e7bf      	b.n	151e6 <__sflush_r+0x1a>
   15266:	2301      	movs	r3, #1
   15268:	6a21      	ldr	r1, [r4, #32]
   1526a:	0028      	movs	r0, r5
   1526c:	47b8      	blx	r7
   1526e:	1c43      	adds	r3, r0, #1
   15270:	d1c5      	bne.n	151fe <__sflush_r+0x32>
   15272:	682b      	ldr	r3, [r5, #0]
   15274:	2b00      	cmp	r3, #0
   15276:	d0c2      	beq.n	151fe <__sflush_r+0x32>
   15278:	2b1d      	cmp	r3, #29
   1527a:	d001      	beq.n	15280 <__sflush_r+0xb4>
   1527c:	2b16      	cmp	r3, #22
   1527e:	d101      	bne.n	15284 <__sflush_r+0xb8>
   15280:	602e      	str	r6, [r5, #0]
   15282:	e7af      	b.n	151e4 <__sflush_r+0x18>
   15284:	2340      	movs	r3, #64	; 0x40
   15286:	89a2      	ldrh	r2, [r4, #12]
   15288:	4313      	orrs	r3, r2
   1528a:	81a3      	strh	r3, [r4, #12]
   1528c:	e7ab      	b.n	151e6 <__sflush_r+0x1a>
   1528e:	2340      	movs	r3, #64	; 0x40
   15290:	430b      	orrs	r3, r1
   15292:	2001      	movs	r0, #1
   15294:	81a3      	strh	r3, [r4, #12]
   15296:	4240      	negs	r0, r0
   15298:	e7a5      	b.n	151e6 <__sflush_r+0x1a>
   1529a:	690f      	ldr	r7, [r1, #16]
   1529c:	2f00      	cmp	r7, #0
   1529e:	d0a1      	beq.n	151e4 <__sflush_r+0x18>
   152a0:	680b      	ldr	r3, [r1, #0]
   152a2:	600f      	str	r7, [r1, #0]
   152a4:	1bdb      	subs	r3, r3, r7
   152a6:	9301      	str	r3, [sp, #4]
   152a8:	2300      	movs	r3, #0
   152aa:	0792      	lsls	r2, r2, #30
   152ac:	d100      	bne.n	152b0 <__sflush_r+0xe4>
   152ae:	694b      	ldr	r3, [r1, #20]
   152b0:	60a3      	str	r3, [r4, #8]
   152b2:	9b01      	ldr	r3, [sp, #4]
   152b4:	2b00      	cmp	r3, #0
   152b6:	dc00      	bgt.n	152ba <__sflush_r+0xee>
   152b8:	e794      	b.n	151e4 <__sflush_r+0x18>
   152ba:	9b01      	ldr	r3, [sp, #4]
   152bc:	003a      	movs	r2, r7
   152be:	6a21      	ldr	r1, [r4, #32]
   152c0:	0028      	movs	r0, r5
   152c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   152c4:	47b0      	blx	r6
   152c6:	2800      	cmp	r0, #0
   152c8:	dc03      	bgt.n	152d2 <__sflush_r+0x106>
   152ca:	2340      	movs	r3, #64	; 0x40
   152cc:	89a2      	ldrh	r2, [r4, #12]
   152ce:	4313      	orrs	r3, r2
   152d0:	e7df      	b.n	15292 <__sflush_r+0xc6>
   152d2:	9b01      	ldr	r3, [sp, #4]
   152d4:	183f      	adds	r7, r7, r0
   152d6:	1a1b      	subs	r3, r3, r0
   152d8:	9301      	str	r3, [sp, #4]
   152da:	e7ea      	b.n	152b2 <__sflush_r+0xe6>
   152dc:	20400001 	.word	0x20400001

000152e0 <_fflush_r>:
   152e0:	690b      	ldr	r3, [r1, #16]
   152e2:	b570      	push	{r4, r5, r6, lr}
   152e4:	0005      	movs	r5, r0
   152e6:	000c      	movs	r4, r1
   152e8:	2b00      	cmp	r3, #0
   152ea:	d101      	bne.n	152f0 <_fflush_r+0x10>
   152ec:	2000      	movs	r0, #0
   152ee:	bd70      	pop	{r4, r5, r6, pc}
   152f0:	2800      	cmp	r0, #0
   152f2:	d004      	beq.n	152fe <_fflush_r+0x1e>
   152f4:	6983      	ldr	r3, [r0, #24]
   152f6:	2b00      	cmp	r3, #0
   152f8:	d101      	bne.n	152fe <_fflush_r+0x1e>
   152fa:	f000 f85f 	bl	153bc <__sinit>
   152fe:	4b0b      	ldr	r3, [pc, #44]	; (1532c <_fflush_r+0x4c>)
   15300:	429c      	cmp	r4, r3
   15302:	d109      	bne.n	15318 <_fflush_r+0x38>
   15304:	686c      	ldr	r4, [r5, #4]
   15306:	220c      	movs	r2, #12
   15308:	5ea3      	ldrsh	r3, [r4, r2]
   1530a:	2b00      	cmp	r3, #0
   1530c:	d0ee      	beq.n	152ec <_fflush_r+0xc>
   1530e:	0021      	movs	r1, r4
   15310:	0028      	movs	r0, r5
   15312:	f7ff ff5b 	bl	151cc <__sflush_r>
   15316:	e7ea      	b.n	152ee <_fflush_r+0xe>
   15318:	4b05      	ldr	r3, [pc, #20]	; (15330 <_fflush_r+0x50>)
   1531a:	429c      	cmp	r4, r3
   1531c:	d101      	bne.n	15322 <_fflush_r+0x42>
   1531e:	68ac      	ldr	r4, [r5, #8]
   15320:	e7f1      	b.n	15306 <_fflush_r+0x26>
   15322:	4b04      	ldr	r3, [pc, #16]	; (15334 <_fflush_r+0x54>)
   15324:	429c      	cmp	r4, r3
   15326:	d1ee      	bne.n	15306 <_fflush_r+0x26>
   15328:	68ec      	ldr	r4, [r5, #12]
   1532a:	e7ec      	b.n	15306 <_fflush_r+0x26>
   1532c:	0001b02c 	.word	0x0001b02c
   15330:	0001b04c 	.word	0x0001b04c
   15334:	0001b00c 	.word	0x0001b00c

00015338 <_cleanup_r>:
   15338:	b510      	push	{r4, lr}
   1533a:	4902      	ldr	r1, [pc, #8]	; (15344 <_cleanup_r+0xc>)
   1533c:	f000 f8b2 	bl	154a4 <_fwalk_reent>
   15340:	bd10      	pop	{r4, pc}
   15342:	46c0      	nop			; (mov r8, r8)
   15344:	000152e1 	.word	0x000152e1

00015348 <std.isra.0>:
   15348:	2300      	movs	r3, #0
   1534a:	b510      	push	{r4, lr}
   1534c:	0004      	movs	r4, r0
   1534e:	6003      	str	r3, [r0, #0]
   15350:	6043      	str	r3, [r0, #4]
   15352:	6083      	str	r3, [r0, #8]
   15354:	8181      	strh	r1, [r0, #12]
   15356:	6643      	str	r3, [r0, #100]	; 0x64
   15358:	81c2      	strh	r2, [r0, #14]
   1535a:	6103      	str	r3, [r0, #16]
   1535c:	6143      	str	r3, [r0, #20]
   1535e:	6183      	str	r3, [r0, #24]
   15360:	0019      	movs	r1, r3
   15362:	2208      	movs	r2, #8
   15364:	305c      	adds	r0, #92	; 0x5c
   15366:	f7fe f850 	bl	1340a <memset>
   1536a:	4b05      	ldr	r3, [pc, #20]	; (15380 <std.isra.0+0x38>)
   1536c:	6224      	str	r4, [r4, #32]
   1536e:	6263      	str	r3, [r4, #36]	; 0x24
   15370:	4b04      	ldr	r3, [pc, #16]	; (15384 <std.isra.0+0x3c>)
   15372:	62a3      	str	r3, [r4, #40]	; 0x28
   15374:	4b04      	ldr	r3, [pc, #16]	; (15388 <std.isra.0+0x40>)
   15376:	62e3      	str	r3, [r4, #44]	; 0x2c
   15378:	4b04      	ldr	r3, [pc, #16]	; (1538c <std.isra.0+0x44>)
   1537a:	6323      	str	r3, [r4, #48]	; 0x30
   1537c:	bd10      	pop	{r4, pc}
   1537e:	46c0      	nop			; (mov r8, r8)
   15380:	00016195 	.word	0x00016195
   15384:	000161bd 	.word	0x000161bd
   15388:	000161f5 	.word	0x000161f5
   1538c:	00016221 	.word	0x00016221

00015390 <__sfmoreglue>:
   15390:	b570      	push	{r4, r5, r6, lr}
   15392:	2568      	movs	r5, #104	; 0x68
   15394:	1e4a      	subs	r2, r1, #1
   15396:	4355      	muls	r5, r2
   15398:	000e      	movs	r6, r1
   1539a:	0029      	movs	r1, r5
   1539c:	3174      	adds	r1, #116	; 0x74
   1539e:	f7fe f887 	bl	134b0 <_malloc_r>
   153a2:	1e04      	subs	r4, r0, #0
   153a4:	d008      	beq.n	153b8 <__sfmoreglue+0x28>
   153a6:	2100      	movs	r1, #0
   153a8:	002a      	movs	r2, r5
   153aa:	6001      	str	r1, [r0, #0]
   153ac:	6046      	str	r6, [r0, #4]
   153ae:	300c      	adds	r0, #12
   153b0:	60a0      	str	r0, [r4, #8]
   153b2:	3268      	adds	r2, #104	; 0x68
   153b4:	f7fe f829 	bl	1340a <memset>
   153b8:	0020      	movs	r0, r4
   153ba:	bd70      	pop	{r4, r5, r6, pc}

000153bc <__sinit>:
   153bc:	6983      	ldr	r3, [r0, #24]
   153be:	b513      	push	{r0, r1, r4, lr}
   153c0:	0004      	movs	r4, r0
   153c2:	2b00      	cmp	r3, #0
   153c4:	d128      	bne.n	15418 <__sinit+0x5c>
   153c6:	6483      	str	r3, [r0, #72]	; 0x48
   153c8:	64c3      	str	r3, [r0, #76]	; 0x4c
   153ca:	6503      	str	r3, [r0, #80]	; 0x50
   153cc:	4b13      	ldr	r3, [pc, #76]	; (1541c <__sinit+0x60>)
   153ce:	4a14      	ldr	r2, [pc, #80]	; (15420 <__sinit+0x64>)
   153d0:	681b      	ldr	r3, [r3, #0]
   153d2:	6282      	str	r2, [r0, #40]	; 0x28
   153d4:	9301      	str	r3, [sp, #4]
   153d6:	4298      	cmp	r0, r3
   153d8:	d101      	bne.n	153de <__sinit+0x22>
   153da:	2301      	movs	r3, #1
   153dc:	6183      	str	r3, [r0, #24]
   153de:	0020      	movs	r0, r4
   153e0:	f000 f820 	bl	15424 <__sfp>
   153e4:	6060      	str	r0, [r4, #4]
   153e6:	0020      	movs	r0, r4
   153e8:	f000 f81c 	bl	15424 <__sfp>
   153ec:	60a0      	str	r0, [r4, #8]
   153ee:	0020      	movs	r0, r4
   153f0:	f000 f818 	bl	15424 <__sfp>
   153f4:	2200      	movs	r2, #0
   153f6:	60e0      	str	r0, [r4, #12]
   153f8:	2104      	movs	r1, #4
   153fa:	6860      	ldr	r0, [r4, #4]
   153fc:	f7ff ffa4 	bl	15348 <std.isra.0>
   15400:	2201      	movs	r2, #1
   15402:	2109      	movs	r1, #9
   15404:	68a0      	ldr	r0, [r4, #8]
   15406:	f7ff ff9f 	bl	15348 <std.isra.0>
   1540a:	2202      	movs	r2, #2
   1540c:	2112      	movs	r1, #18
   1540e:	68e0      	ldr	r0, [r4, #12]
   15410:	f7ff ff9a 	bl	15348 <std.isra.0>
   15414:	2301      	movs	r3, #1
   15416:	61a3      	str	r3, [r4, #24]
   15418:	bd13      	pop	{r0, r1, r4, pc}
   1541a:	46c0      	nop			; (mov r8, r8)
   1541c:	0001aebc 	.word	0x0001aebc
   15420:	00015339 	.word	0x00015339

00015424 <__sfp>:
   15424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15426:	4b1e      	ldr	r3, [pc, #120]	; (154a0 <__sfp+0x7c>)
   15428:	0007      	movs	r7, r0
   1542a:	681e      	ldr	r6, [r3, #0]
   1542c:	69b3      	ldr	r3, [r6, #24]
   1542e:	2b00      	cmp	r3, #0
   15430:	d102      	bne.n	15438 <__sfp+0x14>
   15432:	0030      	movs	r0, r6
   15434:	f7ff ffc2 	bl	153bc <__sinit>
   15438:	3648      	adds	r6, #72	; 0x48
   1543a:	68b4      	ldr	r4, [r6, #8]
   1543c:	6873      	ldr	r3, [r6, #4]
   1543e:	3b01      	subs	r3, #1
   15440:	d504      	bpl.n	1544c <__sfp+0x28>
   15442:	6833      	ldr	r3, [r6, #0]
   15444:	2b00      	cmp	r3, #0
   15446:	d007      	beq.n	15458 <__sfp+0x34>
   15448:	6836      	ldr	r6, [r6, #0]
   1544a:	e7f6      	b.n	1543a <__sfp+0x16>
   1544c:	220c      	movs	r2, #12
   1544e:	5ea5      	ldrsh	r5, [r4, r2]
   15450:	2d00      	cmp	r5, #0
   15452:	d00d      	beq.n	15470 <__sfp+0x4c>
   15454:	3468      	adds	r4, #104	; 0x68
   15456:	e7f2      	b.n	1543e <__sfp+0x1a>
   15458:	2104      	movs	r1, #4
   1545a:	0038      	movs	r0, r7
   1545c:	f7ff ff98 	bl	15390 <__sfmoreglue>
   15460:	6030      	str	r0, [r6, #0]
   15462:	2800      	cmp	r0, #0
   15464:	d1f0      	bne.n	15448 <__sfp+0x24>
   15466:	230c      	movs	r3, #12
   15468:	0004      	movs	r4, r0
   1546a:	603b      	str	r3, [r7, #0]
   1546c:	0020      	movs	r0, r4
   1546e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15470:	2301      	movs	r3, #1
   15472:	0020      	movs	r0, r4
   15474:	425b      	negs	r3, r3
   15476:	81e3      	strh	r3, [r4, #14]
   15478:	3302      	adds	r3, #2
   1547a:	81a3      	strh	r3, [r4, #12]
   1547c:	6665      	str	r5, [r4, #100]	; 0x64
   1547e:	6025      	str	r5, [r4, #0]
   15480:	60a5      	str	r5, [r4, #8]
   15482:	6065      	str	r5, [r4, #4]
   15484:	6125      	str	r5, [r4, #16]
   15486:	6165      	str	r5, [r4, #20]
   15488:	61a5      	str	r5, [r4, #24]
   1548a:	2208      	movs	r2, #8
   1548c:	0029      	movs	r1, r5
   1548e:	305c      	adds	r0, #92	; 0x5c
   15490:	f7fd ffbb 	bl	1340a <memset>
   15494:	6365      	str	r5, [r4, #52]	; 0x34
   15496:	63a5      	str	r5, [r4, #56]	; 0x38
   15498:	64a5      	str	r5, [r4, #72]	; 0x48
   1549a:	64e5      	str	r5, [r4, #76]	; 0x4c
   1549c:	e7e6      	b.n	1546c <__sfp+0x48>
   1549e:	46c0      	nop			; (mov r8, r8)
   154a0:	0001aebc 	.word	0x0001aebc

000154a4 <_fwalk_reent>:
   154a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   154a6:	0004      	movs	r4, r0
   154a8:	0007      	movs	r7, r0
   154aa:	2600      	movs	r6, #0
   154ac:	9101      	str	r1, [sp, #4]
   154ae:	3448      	adds	r4, #72	; 0x48
   154b0:	2c00      	cmp	r4, #0
   154b2:	d101      	bne.n	154b8 <_fwalk_reent+0x14>
   154b4:	0030      	movs	r0, r6
   154b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   154b8:	6863      	ldr	r3, [r4, #4]
   154ba:	68a5      	ldr	r5, [r4, #8]
   154bc:	9300      	str	r3, [sp, #0]
   154be:	9b00      	ldr	r3, [sp, #0]
   154c0:	3b01      	subs	r3, #1
   154c2:	9300      	str	r3, [sp, #0]
   154c4:	d501      	bpl.n	154ca <_fwalk_reent+0x26>
   154c6:	6824      	ldr	r4, [r4, #0]
   154c8:	e7f2      	b.n	154b0 <_fwalk_reent+0xc>
   154ca:	89ab      	ldrh	r3, [r5, #12]
   154cc:	2b01      	cmp	r3, #1
   154ce:	d908      	bls.n	154e2 <_fwalk_reent+0x3e>
   154d0:	220e      	movs	r2, #14
   154d2:	5eab      	ldrsh	r3, [r5, r2]
   154d4:	3301      	adds	r3, #1
   154d6:	d004      	beq.n	154e2 <_fwalk_reent+0x3e>
   154d8:	0029      	movs	r1, r5
   154da:	0038      	movs	r0, r7
   154dc:	9b01      	ldr	r3, [sp, #4]
   154de:	4798      	blx	r3
   154e0:	4306      	orrs	r6, r0
   154e2:	3568      	adds	r5, #104	; 0x68
   154e4:	e7eb      	b.n	154be <_fwalk_reent+0x1a>
	...

000154e8 <_localeconv_r>:
   154e8:	4b03      	ldr	r3, [pc, #12]	; (154f8 <_localeconv_r+0x10>)
   154ea:	681b      	ldr	r3, [r3, #0]
   154ec:	6a18      	ldr	r0, [r3, #32]
   154ee:	2800      	cmp	r0, #0
   154f0:	d100      	bne.n	154f4 <_localeconv_r+0xc>
   154f2:	4802      	ldr	r0, [pc, #8]	; (154fc <_localeconv_r+0x14>)
   154f4:	30f0      	adds	r0, #240	; 0xf0
   154f6:	4770      	bx	lr
   154f8:	20000018 	.word	0x20000018
   154fc:	2000007c 	.word	0x2000007c

00015500 <__swhatbuf_r>:
   15500:	b570      	push	{r4, r5, r6, lr}
   15502:	000e      	movs	r6, r1
   15504:	001d      	movs	r5, r3
   15506:	230e      	movs	r3, #14
   15508:	5ec9      	ldrsh	r1, [r1, r3]
   1550a:	b090      	sub	sp, #64	; 0x40
   1550c:	0014      	movs	r4, r2
   1550e:	2900      	cmp	r1, #0
   15510:	da07      	bge.n	15522 <__swhatbuf_r+0x22>
   15512:	2300      	movs	r3, #0
   15514:	602b      	str	r3, [r5, #0]
   15516:	89b3      	ldrh	r3, [r6, #12]
   15518:	061b      	lsls	r3, r3, #24
   1551a:	d411      	bmi.n	15540 <__swhatbuf_r+0x40>
   1551c:	2380      	movs	r3, #128	; 0x80
   1551e:	00db      	lsls	r3, r3, #3
   15520:	e00f      	b.n	15542 <__swhatbuf_r+0x42>
   15522:	aa01      	add	r2, sp, #4
   15524:	f000 fea8 	bl	16278 <_fstat_r>
   15528:	2800      	cmp	r0, #0
   1552a:	dbf2      	blt.n	15512 <__swhatbuf_r+0x12>
   1552c:	22f0      	movs	r2, #240	; 0xf0
   1552e:	9b02      	ldr	r3, [sp, #8]
   15530:	0212      	lsls	r2, r2, #8
   15532:	4013      	ands	r3, r2
   15534:	4a05      	ldr	r2, [pc, #20]	; (1554c <__swhatbuf_r+0x4c>)
   15536:	189b      	adds	r3, r3, r2
   15538:	425a      	negs	r2, r3
   1553a:	4153      	adcs	r3, r2
   1553c:	602b      	str	r3, [r5, #0]
   1553e:	e7ed      	b.n	1551c <__swhatbuf_r+0x1c>
   15540:	2340      	movs	r3, #64	; 0x40
   15542:	2000      	movs	r0, #0
   15544:	6023      	str	r3, [r4, #0]
   15546:	b010      	add	sp, #64	; 0x40
   15548:	bd70      	pop	{r4, r5, r6, pc}
   1554a:	46c0      	nop			; (mov r8, r8)
   1554c:	ffffe000 	.word	0xffffe000

00015550 <__smakebuf_r>:
   15550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15552:	2602      	movs	r6, #2
   15554:	898b      	ldrh	r3, [r1, #12]
   15556:	0005      	movs	r5, r0
   15558:	000c      	movs	r4, r1
   1555a:	4233      	tst	r3, r6
   1555c:	d006      	beq.n	1556c <__smakebuf_r+0x1c>
   1555e:	0023      	movs	r3, r4
   15560:	3347      	adds	r3, #71	; 0x47
   15562:	6023      	str	r3, [r4, #0]
   15564:	6123      	str	r3, [r4, #16]
   15566:	2301      	movs	r3, #1
   15568:	6163      	str	r3, [r4, #20]
   1556a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1556c:	ab01      	add	r3, sp, #4
   1556e:	466a      	mov	r2, sp
   15570:	f7ff ffc6 	bl	15500 <__swhatbuf_r>
   15574:	9900      	ldr	r1, [sp, #0]
   15576:	0007      	movs	r7, r0
   15578:	0028      	movs	r0, r5
   1557a:	f7fd ff99 	bl	134b0 <_malloc_r>
   1557e:	2800      	cmp	r0, #0
   15580:	d108      	bne.n	15594 <__smakebuf_r+0x44>
   15582:	220c      	movs	r2, #12
   15584:	5ea3      	ldrsh	r3, [r4, r2]
   15586:	059a      	lsls	r2, r3, #22
   15588:	d4ef      	bmi.n	1556a <__smakebuf_r+0x1a>
   1558a:	2203      	movs	r2, #3
   1558c:	4393      	bics	r3, r2
   1558e:	431e      	orrs	r6, r3
   15590:	81a6      	strh	r6, [r4, #12]
   15592:	e7e4      	b.n	1555e <__smakebuf_r+0xe>
   15594:	4b0f      	ldr	r3, [pc, #60]	; (155d4 <__smakebuf_r+0x84>)
   15596:	62ab      	str	r3, [r5, #40]	; 0x28
   15598:	2380      	movs	r3, #128	; 0x80
   1559a:	89a2      	ldrh	r2, [r4, #12]
   1559c:	6020      	str	r0, [r4, #0]
   1559e:	4313      	orrs	r3, r2
   155a0:	81a3      	strh	r3, [r4, #12]
   155a2:	9b00      	ldr	r3, [sp, #0]
   155a4:	6120      	str	r0, [r4, #16]
   155a6:	6163      	str	r3, [r4, #20]
   155a8:	9b01      	ldr	r3, [sp, #4]
   155aa:	2b00      	cmp	r3, #0
   155ac:	d00d      	beq.n	155ca <__smakebuf_r+0x7a>
   155ae:	230e      	movs	r3, #14
   155b0:	5ee1      	ldrsh	r1, [r4, r3]
   155b2:	0028      	movs	r0, r5
   155b4:	f000 fe72 	bl	1629c <_isatty_r>
   155b8:	2800      	cmp	r0, #0
   155ba:	d006      	beq.n	155ca <__smakebuf_r+0x7a>
   155bc:	2203      	movs	r2, #3
   155be:	89a3      	ldrh	r3, [r4, #12]
   155c0:	4393      	bics	r3, r2
   155c2:	001a      	movs	r2, r3
   155c4:	2301      	movs	r3, #1
   155c6:	4313      	orrs	r3, r2
   155c8:	81a3      	strh	r3, [r4, #12]
   155ca:	89a0      	ldrh	r0, [r4, #12]
   155cc:	4338      	orrs	r0, r7
   155ce:	81a0      	strh	r0, [r4, #12]
   155d0:	e7cb      	b.n	1556a <__smakebuf_r+0x1a>
   155d2:	46c0      	nop			; (mov r8, r8)
   155d4:	00015339 	.word	0x00015339

000155d8 <memchr>:
   155d8:	b2c9      	uxtb	r1, r1
   155da:	1882      	adds	r2, r0, r2
   155dc:	4290      	cmp	r0, r2
   155de:	d101      	bne.n	155e4 <memchr+0xc>
   155e0:	2000      	movs	r0, #0
   155e2:	4770      	bx	lr
   155e4:	7803      	ldrb	r3, [r0, #0]
   155e6:	428b      	cmp	r3, r1
   155e8:	d0fb      	beq.n	155e2 <memchr+0xa>
   155ea:	3001      	adds	r0, #1
   155ec:	e7f6      	b.n	155dc <memchr+0x4>

000155ee <__malloc_lock>:
   155ee:	4770      	bx	lr

000155f0 <__malloc_unlock>:
   155f0:	4770      	bx	lr

000155f2 <_Balloc>:
   155f2:	b570      	push	{r4, r5, r6, lr}
   155f4:	6a46      	ldr	r6, [r0, #36]	; 0x24
   155f6:	0004      	movs	r4, r0
   155f8:	000d      	movs	r5, r1
   155fa:	2e00      	cmp	r6, #0
   155fc:	d107      	bne.n	1560e <_Balloc+0x1c>
   155fe:	2010      	movs	r0, #16
   15600:	f7fd fec2 	bl	13388 <malloc>
   15604:	6260      	str	r0, [r4, #36]	; 0x24
   15606:	6046      	str	r6, [r0, #4]
   15608:	6086      	str	r6, [r0, #8]
   1560a:	6006      	str	r6, [r0, #0]
   1560c:	60c6      	str	r6, [r0, #12]
   1560e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   15610:	68f3      	ldr	r3, [r6, #12]
   15612:	2b00      	cmp	r3, #0
   15614:	d013      	beq.n	1563e <_Balloc+0x4c>
   15616:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15618:	00aa      	lsls	r2, r5, #2
   1561a:	68db      	ldr	r3, [r3, #12]
   1561c:	189b      	adds	r3, r3, r2
   1561e:	6818      	ldr	r0, [r3, #0]
   15620:	2800      	cmp	r0, #0
   15622:	d118      	bne.n	15656 <_Balloc+0x64>
   15624:	2101      	movs	r1, #1
   15626:	000e      	movs	r6, r1
   15628:	40ae      	lsls	r6, r5
   1562a:	1d72      	adds	r2, r6, #5
   1562c:	0092      	lsls	r2, r2, #2
   1562e:	0020      	movs	r0, r4
   15630:	f000 fac2 	bl	15bb8 <_calloc_r>
   15634:	2800      	cmp	r0, #0
   15636:	d00c      	beq.n	15652 <_Balloc+0x60>
   15638:	6045      	str	r5, [r0, #4]
   1563a:	6086      	str	r6, [r0, #8]
   1563c:	e00d      	b.n	1565a <_Balloc+0x68>
   1563e:	2221      	movs	r2, #33	; 0x21
   15640:	2104      	movs	r1, #4
   15642:	0020      	movs	r0, r4
   15644:	f000 fab8 	bl	15bb8 <_calloc_r>
   15648:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1564a:	60f0      	str	r0, [r6, #12]
   1564c:	68db      	ldr	r3, [r3, #12]
   1564e:	2b00      	cmp	r3, #0
   15650:	d1e1      	bne.n	15616 <_Balloc+0x24>
   15652:	2000      	movs	r0, #0
   15654:	bd70      	pop	{r4, r5, r6, pc}
   15656:	6802      	ldr	r2, [r0, #0]
   15658:	601a      	str	r2, [r3, #0]
   1565a:	2300      	movs	r3, #0
   1565c:	6103      	str	r3, [r0, #16]
   1565e:	60c3      	str	r3, [r0, #12]
   15660:	e7f8      	b.n	15654 <_Balloc+0x62>

00015662 <_Bfree>:
   15662:	b570      	push	{r4, r5, r6, lr}
   15664:	6a44      	ldr	r4, [r0, #36]	; 0x24
   15666:	0006      	movs	r6, r0
   15668:	000d      	movs	r5, r1
   1566a:	2c00      	cmp	r4, #0
   1566c:	d107      	bne.n	1567e <_Bfree+0x1c>
   1566e:	2010      	movs	r0, #16
   15670:	f7fd fe8a 	bl	13388 <malloc>
   15674:	6270      	str	r0, [r6, #36]	; 0x24
   15676:	6044      	str	r4, [r0, #4]
   15678:	6084      	str	r4, [r0, #8]
   1567a:	6004      	str	r4, [r0, #0]
   1567c:	60c4      	str	r4, [r0, #12]
   1567e:	2d00      	cmp	r5, #0
   15680:	d007      	beq.n	15692 <_Bfree+0x30>
   15682:	6a73      	ldr	r3, [r6, #36]	; 0x24
   15684:	686a      	ldr	r2, [r5, #4]
   15686:	68db      	ldr	r3, [r3, #12]
   15688:	0092      	lsls	r2, r2, #2
   1568a:	189b      	adds	r3, r3, r2
   1568c:	681a      	ldr	r2, [r3, #0]
   1568e:	602a      	str	r2, [r5, #0]
   15690:	601d      	str	r5, [r3, #0]
   15692:	bd70      	pop	{r4, r5, r6, pc}

00015694 <__multadd>:
   15694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15696:	001e      	movs	r6, r3
   15698:	2314      	movs	r3, #20
   1569a:	469c      	mov	ip, r3
   1569c:	0007      	movs	r7, r0
   1569e:	000c      	movs	r4, r1
   156a0:	2000      	movs	r0, #0
   156a2:	690d      	ldr	r5, [r1, #16]
   156a4:	448c      	add	ip, r1
   156a6:	4663      	mov	r3, ip
   156a8:	8819      	ldrh	r1, [r3, #0]
   156aa:	681b      	ldr	r3, [r3, #0]
   156ac:	4351      	muls	r1, r2
   156ae:	0c1b      	lsrs	r3, r3, #16
   156b0:	4353      	muls	r3, r2
   156b2:	1989      	adds	r1, r1, r6
   156b4:	0c0e      	lsrs	r6, r1, #16
   156b6:	199b      	adds	r3, r3, r6
   156b8:	b289      	uxth	r1, r1
   156ba:	0c1e      	lsrs	r6, r3, #16
   156bc:	041b      	lsls	r3, r3, #16
   156be:	185b      	adds	r3, r3, r1
   156c0:	4661      	mov	r1, ip
   156c2:	3001      	adds	r0, #1
   156c4:	c108      	stmia	r1!, {r3}
   156c6:	468c      	mov	ip, r1
   156c8:	4285      	cmp	r5, r0
   156ca:	dcec      	bgt.n	156a6 <__multadd+0x12>
   156cc:	2e00      	cmp	r6, #0
   156ce:	d01b      	beq.n	15708 <__multadd+0x74>
   156d0:	68a3      	ldr	r3, [r4, #8]
   156d2:	429d      	cmp	r5, r3
   156d4:	db12      	blt.n	156fc <__multadd+0x68>
   156d6:	6863      	ldr	r3, [r4, #4]
   156d8:	0038      	movs	r0, r7
   156da:	1c59      	adds	r1, r3, #1
   156dc:	f7ff ff89 	bl	155f2 <_Balloc>
   156e0:	0021      	movs	r1, r4
   156e2:	6923      	ldr	r3, [r4, #16]
   156e4:	9001      	str	r0, [sp, #4]
   156e6:	1c9a      	adds	r2, r3, #2
   156e8:	0092      	lsls	r2, r2, #2
   156ea:	310c      	adds	r1, #12
   156ec:	300c      	adds	r0, #12
   156ee:	f7fd fe71 	bl	133d4 <memcpy>
   156f2:	0021      	movs	r1, r4
   156f4:	0038      	movs	r0, r7
   156f6:	f7ff ffb4 	bl	15662 <_Bfree>
   156fa:	9c01      	ldr	r4, [sp, #4]
   156fc:	1d2b      	adds	r3, r5, #4
   156fe:	009b      	lsls	r3, r3, #2
   15700:	18e3      	adds	r3, r4, r3
   15702:	3501      	adds	r5, #1
   15704:	605e      	str	r6, [r3, #4]
   15706:	6125      	str	r5, [r4, #16]
   15708:	0020      	movs	r0, r4
   1570a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0001570c <__hi0bits>:
   1570c:	0003      	movs	r3, r0
   1570e:	0c02      	lsrs	r2, r0, #16
   15710:	2000      	movs	r0, #0
   15712:	4282      	cmp	r2, r0
   15714:	d101      	bne.n	1571a <__hi0bits+0xe>
   15716:	041b      	lsls	r3, r3, #16
   15718:	3010      	adds	r0, #16
   1571a:	0e1a      	lsrs	r2, r3, #24
   1571c:	d101      	bne.n	15722 <__hi0bits+0x16>
   1571e:	3008      	adds	r0, #8
   15720:	021b      	lsls	r3, r3, #8
   15722:	0f1a      	lsrs	r2, r3, #28
   15724:	d101      	bne.n	1572a <__hi0bits+0x1e>
   15726:	3004      	adds	r0, #4
   15728:	011b      	lsls	r3, r3, #4
   1572a:	0f9a      	lsrs	r2, r3, #30
   1572c:	d101      	bne.n	15732 <__hi0bits+0x26>
   1572e:	3002      	adds	r0, #2
   15730:	009b      	lsls	r3, r3, #2
   15732:	2b00      	cmp	r3, #0
   15734:	db03      	blt.n	1573e <__hi0bits+0x32>
   15736:	3001      	adds	r0, #1
   15738:	005b      	lsls	r3, r3, #1
   1573a:	d400      	bmi.n	1573e <__hi0bits+0x32>
   1573c:	2020      	movs	r0, #32
   1573e:	4770      	bx	lr

00015740 <__lo0bits>:
   15740:	2207      	movs	r2, #7
   15742:	6803      	ldr	r3, [r0, #0]
   15744:	b510      	push	{r4, lr}
   15746:	0001      	movs	r1, r0
   15748:	401a      	ands	r2, r3
   1574a:	d00d      	beq.n	15768 <__lo0bits+0x28>
   1574c:	2401      	movs	r4, #1
   1574e:	2000      	movs	r0, #0
   15750:	4223      	tst	r3, r4
   15752:	d105      	bne.n	15760 <__lo0bits+0x20>
   15754:	3002      	adds	r0, #2
   15756:	4203      	tst	r3, r0
   15758:	d003      	beq.n	15762 <__lo0bits+0x22>
   1575a:	40e3      	lsrs	r3, r4
   1575c:	0020      	movs	r0, r4
   1575e:	600b      	str	r3, [r1, #0]
   15760:	bd10      	pop	{r4, pc}
   15762:	089b      	lsrs	r3, r3, #2
   15764:	600b      	str	r3, [r1, #0]
   15766:	e7fb      	b.n	15760 <__lo0bits+0x20>
   15768:	b29c      	uxth	r4, r3
   1576a:	0010      	movs	r0, r2
   1576c:	2c00      	cmp	r4, #0
   1576e:	d101      	bne.n	15774 <__lo0bits+0x34>
   15770:	2010      	movs	r0, #16
   15772:	0c1b      	lsrs	r3, r3, #16
   15774:	b2da      	uxtb	r2, r3
   15776:	2a00      	cmp	r2, #0
   15778:	d101      	bne.n	1577e <__lo0bits+0x3e>
   1577a:	3008      	adds	r0, #8
   1577c:	0a1b      	lsrs	r3, r3, #8
   1577e:	071a      	lsls	r2, r3, #28
   15780:	d101      	bne.n	15786 <__lo0bits+0x46>
   15782:	3004      	adds	r0, #4
   15784:	091b      	lsrs	r3, r3, #4
   15786:	079a      	lsls	r2, r3, #30
   15788:	d101      	bne.n	1578e <__lo0bits+0x4e>
   1578a:	3002      	adds	r0, #2
   1578c:	089b      	lsrs	r3, r3, #2
   1578e:	07da      	lsls	r2, r3, #31
   15790:	d4e8      	bmi.n	15764 <__lo0bits+0x24>
   15792:	085b      	lsrs	r3, r3, #1
   15794:	d001      	beq.n	1579a <__lo0bits+0x5a>
   15796:	3001      	adds	r0, #1
   15798:	e7e4      	b.n	15764 <__lo0bits+0x24>
   1579a:	2020      	movs	r0, #32
   1579c:	e7e0      	b.n	15760 <__lo0bits+0x20>

0001579e <__i2b>:
   1579e:	b510      	push	{r4, lr}
   157a0:	000c      	movs	r4, r1
   157a2:	2101      	movs	r1, #1
   157a4:	f7ff ff25 	bl	155f2 <_Balloc>
   157a8:	2301      	movs	r3, #1
   157aa:	6144      	str	r4, [r0, #20]
   157ac:	6103      	str	r3, [r0, #16]
   157ae:	bd10      	pop	{r4, pc}

000157b0 <__multiply>:
   157b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   157b2:	690b      	ldr	r3, [r1, #16]
   157b4:	0015      	movs	r5, r2
   157b6:	6912      	ldr	r2, [r2, #16]
   157b8:	b089      	sub	sp, #36	; 0x24
   157ba:	000c      	movs	r4, r1
   157bc:	4293      	cmp	r3, r2
   157be:	da01      	bge.n	157c4 <__multiply+0x14>
   157c0:	002c      	movs	r4, r5
   157c2:	000d      	movs	r5, r1
   157c4:	6927      	ldr	r7, [r4, #16]
   157c6:	692e      	ldr	r6, [r5, #16]
   157c8:	68a2      	ldr	r2, [r4, #8]
   157ca:	19bb      	adds	r3, r7, r6
   157cc:	6861      	ldr	r1, [r4, #4]
   157ce:	9301      	str	r3, [sp, #4]
   157d0:	4293      	cmp	r3, r2
   157d2:	dd00      	ble.n	157d6 <__multiply+0x26>
   157d4:	3101      	adds	r1, #1
   157d6:	f7ff ff0c 	bl	155f2 <_Balloc>
   157da:	0003      	movs	r3, r0
   157dc:	3314      	adds	r3, #20
   157de:	9300      	str	r3, [sp, #0]
   157e0:	9a00      	ldr	r2, [sp, #0]
   157e2:	19bb      	adds	r3, r7, r6
   157e4:	4694      	mov	ip, r2
   157e6:	009b      	lsls	r3, r3, #2
   157e8:	449c      	add	ip, r3
   157ea:	0013      	movs	r3, r2
   157ec:	2200      	movs	r2, #0
   157ee:	9004      	str	r0, [sp, #16]
   157f0:	4563      	cmp	r3, ip
   157f2:	d31c      	bcc.n	1582e <__multiply+0x7e>
   157f4:	002a      	movs	r2, r5
   157f6:	3414      	adds	r4, #20
   157f8:	00bf      	lsls	r7, r7, #2
   157fa:	19e3      	adds	r3, r4, r7
   157fc:	3214      	adds	r2, #20
   157fe:	00b6      	lsls	r6, r6, #2
   15800:	9305      	str	r3, [sp, #20]
   15802:	1993      	adds	r3, r2, r6
   15804:	9402      	str	r4, [sp, #8]
   15806:	9306      	str	r3, [sp, #24]
   15808:	9b06      	ldr	r3, [sp, #24]
   1580a:	429a      	cmp	r2, r3
   1580c:	d311      	bcc.n	15832 <__multiply+0x82>
   1580e:	9b01      	ldr	r3, [sp, #4]
   15810:	2b00      	cmp	r3, #0
   15812:	dd06      	ble.n	15822 <__multiply+0x72>
   15814:	2304      	movs	r3, #4
   15816:	425b      	negs	r3, r3
   15818:	449c      	add	ip, r3
   1581a:	4663      	mov	r3, ip
   1581c:	681b      	ldr	r3, [r3, #0]
   1581e:	2b00      	cmp	r3, #0
   15820:	d051      	beq.n	158c6 <__multiply+0x116>
   15822:	9b04      	ldr	r3, [sp, #16]
   15824:	9a01      	ldr	r2, [sp, #4]
   15826:	0018      	movs	r0, r3
   15828:	611a      	str	r2, [r3, #16]
   1582a:	b009      	add	sp, #36	; 0x24
   1582c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1582e:	c304      	stmia	r3!, {r2}
   15830:	e7de      	b.n	157f0 <__multiply+0x40>
   15832:	8814      	ldrh	r4, [r2, #0]
   15834:	2c00      	cmp	r4, #0
   15836:	d01e      	beq.n	15876 <__multiply+0xc6>
   15838:	2600      	movs	r6, #0
   1583a:	9d00      	ldr	r5, [sp, #0]
   1583c:	9f02      	ldr	r7, [sp, #8]
   1583e:	cf01      	ldmia	r7!, {r0}
   15840:	9507      	str	r5, [sp, #28]
   15842:	cd08      	ldmia	r5!, {r3}
   15844:	9303      	str	r3, [sp, #12]
   15846:	b283      	uxth	r3, r0
   15848:	4363      	muls	r3, r4
   1584a:	0019      	movs	r1, r3
   1584c:	466b      	mov	r3, sp
   1584e:	0c00      	lsrs	r0, r0, #16
   15850:	899b      	ldrh	r3, [r3, #12]
   15852:	4360      	muls	r0, r4
   15854:	18cb      	adds	r3, r1, r3
   15856:	9903      	ldr	r1, [sp, #12]
   15858:	199b      	adds	r3, r3, r6
   1585a:	0c09      	lsrs	r1, r1, #16
   1585c:	1841      	adds	r1, r0, r1
   1585e:	0c18      	lsrs	r0, r3, #16
   15860:	1809      	adds	r1, r1, r0
   15862:	0c0e      	lsrs	r6, r1, #16
   15864:	b29b      	uxth	r3, r3
   15866:	0409      	lsls	r1, r1, #16
   15868:	430b      	orrs	r3, r1
   1586a:	9907      	ldr	r1, [sp, #28]
   1586c:	600b      	str	r3, [r1, #0]
   1586e:	9b05      	ldr	r3, [sp, #20]
   15870:	42bb      	cmp	r3, r7
   15872:	d8e4      	bhi.n	1583e <__multiply+0x8e>
   15874:	602e      	str	r6, [r5, #0]
   15876:	6813      	ldr	r3, [r2, #0]
   15878:	0c1b      	lsrs	r3, r3, #16
   1587a:	9303      	str	r3, [sp, #12]
   1587c:	d01e      	beq.n	158bc <__multiply+0x10c>
   1587e:	2600      	movs	r6, #0
   15880:	9b00      	ldr	r3, [sp, #0]
   15882:	9c02      	ldr	r4, [sp, #8]
   15884:	681b      	ldr	r3, [r3, #0]
   15886:	9800      	ldr	r0, [sp, #0]
   15888:	0007      	movs	r7, r0
   1588a:	8821      	ldrh	r1, [r4, #0]
   1588c:	9d03      	ldr	r5, [sp, #12]
   1588e:	b29b      	uxth	r3, r3
   15890:	4369      	muls	r1, r5
   15892:	c820      	ldmia	r0!, {r5}
   15894:	0c2d      	lsrs	r5, r5, #16
   15896:	1949      	adds	r1, r1, r5
   15898:	198e      	adds	r6, r1, r6
   1589a:	0431      	lsls	r1, r6, #16
   1589c:	430b      	orrs	r3, r1
   1589e:	603b      	str	r3, [r7, #0]
   158a0:	cc08      	ldmia	r4!, {r3}
   158a2:	9903      	ldr	r1, [sp, #12]
   158a4:	0c1b      	lsrs	r3, r3, #16
   158a6:	434b      	muls	r3, r1
   158a8:	6879      	ldr	r1, [r7, #4]
   158aa:	0c36      	lsrs	r6, r6, #16
   158ac:	b289      	uxth	r1, r1
   158ae:	185b      	adds	r3, r3, r1
   158b0:	9905      	ldr	r1, [sp, #20]
   158b2:	199b      	adds	r3, r3, r6
   158b4:	0c1e      	lsrs	r6, r3, #16
   158b6:	42a1      	cmp	r1, r4
   158b8:	d8e6      	bhi.n	15888 <__multiply+0xd8>
   158ba:	6003      	str	r3, [r0, #0]
   158bc:	9b00      	ldr	r3, [sp, #0]
   158be:	3204      	adds	r2, #4
   158c0:	3304      	adds	r3, #4
   158c2:	9300      	str	r3, [sp, #0]
   158c4:	e7a0      	b.n	15808 <__multiply+0x58>
   158c6:	9b01      	ldr	r3, [sp, #4]
   158c8:	3b01      	subs	r3, #1
   158ca:	9301      	str	r3, [sp, #4]
   158cc:	e79f      	b.n	1580e <__multiply+0x5e>
	...

000158d0 <__pow5mult>:
   158d0:	2303      	movs	r3, #3
   158d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   158d4:	4013      	ands	r3, r2
   158d6:	0005      	movs	r5, r0
   158d8:	000e      	movs	r6, r1
   158da:	0014      	movs	r4, r2
   158dc:	2b00      	cmp	r3, #0
   158de:	d008      	beq.n	158f2 <__pow5mult+0x22>
   158e0:	4922      	ldr	r1, [pc, #136]	; (1596c <__pow5mult+0x9c>)
   158e2:	3b01      	subs	r3, #1
   158e4:	009a      	lsls	r2, r3, #2
   158e6:	5852      	ldr	r2, [r2, r1]
   158e8:	2300      	movs	r3, #0
   158ea:	0031      	movs	r1, r6
   158ec:	f7ff fed2 	bl	15694 <__multadd>
   158f0:	0006      	movs	r6, r0
   158f2:	10a3      	asrs	r3, r4, #2
   158f4:	9301      	str	r3, [sp, #4]
   158f6:	d036      	beq.n	15966 <__pow5mult+0x96>
   158f8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   158fa:	2c00      	cmp	r4, #0
   158fc:	d107      	bne.n	1590e <__pow5mult+0x3e>
   158fe:	2010      	movs	r0, #16
   15900:	f7fd fd42 	bl	13388 <malloc>
   15904:	6268      	str	r0, [r5, #36]	; 0x24
   15906:	6044      	str	r4, [r0, #4]
   15908:	6084      	str	r4, [r0, #8]
   1590a:	6004      	str	r4, [r0, #0]
   1590c:	60c4      	str	r4, [r0, #12]
   1590e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   15910:	68bc      	ldr	r4, [r7, #8]
   15912:	2c00      	cmp	r4, #0
   15914:	d107      	bne.n	15926 <__pow5mult+0x56>
   15916:	4916      	ldr	r1, [pc, #88]	; (15970 <__pow5mult+0xa0>)
   15918:	0028      	movs	r0, r5
   1591a:	f7ff ff40 	bl	1579e <__i2b>
   1591e:	2300      	movs	r3, #0
   15920:	0004      	movs	r4, r0
   15922:	60b8      	str	r0, [r7, #8]
   15924:	6003      	str	r3, [r0, #0]
   15926:	2201      	movs	r2, #1
   15928:	9b01      	ldr	r3, [sp, #4]
   1592a:	4213      	tst	r3, r2
   1592c:	d00a      	beq.n	15944 <__pow5mult+0x74>
   1592e:	0031      	movs	r1, r6
   15930:	0022      	movs	r2, r4
   15932:	0028      	movs	r0, r5
   15934:	f7ff ff3c 	bl	157b0 <__multiply>
   15938:	0007      	movs	r7, r0
   1593a:	0031      	movs	r1, r6
   1593c:	0028      	movs	r0, r5
   1593e:	f7ff fe90 	bl	15662 <_Bfree>
   15942:	003e      	movs	r6, r7
   15944:	9b01      	ldr	r3, [sp, #4]
   15946:	105b      	asrs	r3, r3, #1
   15948:	9301      	str	r3, [sp, #4]
   1594a:	d00c      	beq.n	15966 <__pow5mult+0x96>
   1594c:	6820      	ldr	r0, [r4, #0]
   1594e:	2800      	cmp	r0, #0
   15950:	d107      	bne.n	15962 <__pow5mult+0x92>
   15952:	0022      	movs	r2, r4
   15954:	0021      	movs	r1, r4
   15956:	0028      	movs	r0, r5
   15958:	f7ff ff2a 	bl	157b0 <__multiply>
   1595c:	2300      	movs	r3, #0
   1595e:	6020      	str	r0, [r4, #0]
   15960:	6003      	str	r3, [r0, #0]
   15962:	0004      	movs	r4, r0
   15964:	e7df      	b.n	15926 <__pow5mult+0x56>
   15966:	0030      	movs	r0, r6
   15968:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1596a:	46c0      	nop			; (mov r8, r8)
   1596c:	0001b160 	.word	0x0001b160
   15970:	00000271 	.word	0x00000271

00015974 <__lshift>:
   15974:	b5f0      	push	{r4, r5, r6, r7, lr}
   15976:	000d      	movs	r5, r1
   15978:	0017      	movs	r7, r2
   1597a:	692b      	ldr	r3, [r5, #16]
   1597c:	1154      	asrs	r4, r2, #5
   1597e:	b085      	sub	sp, #20
   15980:	18e3      	adds	r3, r4, r3
   15982:	9302      	str	r3, [sp, #8]
   15984:	3301      	adds	r3, #1
   15986:	9301      	str	r3, [sp, #4]
   15988:	6849      	ldr	r1, [r1, #4]
   1598a:	68ab      	ldr	r3, [r5, #8]
   1598c:	9003      	str	r0, [sp, #12]
   1598e:	9a01      	ldr	r2, [sp, #4]
   15990:	4293      	cmp	r3, r2
   15992:	db34      	blt.n	159fe <__lshift+0x8a>
   15994:	9803      	ldr	r0, [sp, #12]
   15996:	f7ff fe2c 	bl	155f2 <_Balloc>
   1599a:	2300      	movs	r3, #0
   1599c:	0002      	movs	r2, r0
   1599e:	0006      	movs	r6, r0
   159a0:	0019      	movs	r1, r3
   159a2:	3214      	adds	r2, #20
   159a4:	42a3      	cmp	r3, r4
   159a6:	db2d      	blt.n	15a04 <__lshift+0x90>
   159a8:	43e3      	mvns	r3, r4
   159aa:	17db      	asrs	r3, r3, #31
   159ac:	401c      	ands	r4, r3
   159ae:	002b      	movs	r3, r5
   159b0:	211f      	movs	r1, #31
   159b2:	00a4      	lsls	r4, r4, #2
   159b4:	1914      	adds	r4, r2, r4
   159b6:	692a      	ldr	r2, [r5, #16]
   159b8:	3314      	adds	r3, #20
   159ba:	0092      	lsls	r2, r2, #2
   159bc:	189a      	adds	r2, r3, r2
   159be:	400f      	ands	r7, r1
   159c0:	d024      	beq.n	15a0c <__lshift+0x98>
   159c2:	3101      	adds	r1, #1
   159c4:	1bc9      	subs	r1, r1, r7
   159c6:	468c      	mov	ip, r1
   159c8:	2100      	movs	r1, #0
   159ca:	6818      	ldr	r0, [r3, #0]
   159cc:	40b8      	lsls	r0, r7
   159ce:	4301      	orrs	r1, r0
   159d0:	4660      	mov	r0, ip
   159d2:	6021      	str	r1, [r4, #0]
   159d4:	cb02      	ldmia	r3!, {r1}
   159d6:	3404      	adds	r4, #4
   159d8:	40c1      	lsrs	r1, r0
   159da:	429a      	cmp	r2, r3
   159dc:	d8f5      	bhi.n	159ca <__lshift+0x56>
   159de:	6021      	str	r1, [r4, #0]
   159e0:	2900      	cmp	r1, #0
   159e2:	d002      	beq.n	159ea <__lshift+0x76>
   159e4:	9b02      	ldr	r3, [sp, #8]
   159e6:	3302      	adds	r3, #2
   159e8:	9301      	str	r3, [sp, #4]
   159ea:	9b01      	ldr	r3, [sp, #4]
   159ec:	9803      	ldr	r0, [sp, #12]
   159ee:	3b01      	subs	r3, #1
   159f0:	6133      	str	r3, [r6, #16]
   159f2:	0029      	movs	r1, r5
   159f4:	f7ff fe35 	bl	15662 <_Bfree>
   159f8:	0030      	movs	r0, r6
   159fa:	b005      	add	sp, #20
   159fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159fe:	3101      	adds	r1, #1
   15a00:	005b      	lsls	r3, r3, #1
   15a02:	e7c4      	b.n	1598e <__lshift+0x1a>
   15a04:	0098      	lsls	r0, r3, #2
   15a06:	5011      	str	r1, [r2, r0]
   15a08:	3301      	adds	r3, #1
   15a0a:	e7cb      	b.n	159a4 <__lshift+0x30>
   15a0c:	cb02      	ldmia	r3!, {r1}
   15a0e:	c402      	stmia	r4!, {r1}
   15a10:	429a      	cmp	r2, r3
   15a12:	d8fb      	bhi.n	15a0c <__lshift+0x98>
   15a14:	e7e9      	b.n	159ea <__lshift+0x76>

00015a16 <__mcmp>:
   15a16:	690a      	ldr	r2, [r1, #16]
   15a18:	6903      	ldr	r3, [r0, #16]
   15a1a:	b530      	push	{r4, r5, lr}
   15a1c:	1a9b      	subs	r3, r3, r2
   15a1e:	d10e      	bne.n	15a3e <__mcmp+0x28>
   15a20:	0092      	lsls	r2, r2, #2
   15a22:	3014      	adds	r0, #20
   15a24:	3114      	adds	r1, #20
   15a26:	1884      	adds	r4, r0, r2
   15a28:	1889      	adds	r1, r1, r2
   15a2a:	3c04      	subs	r4, #4
   15a2c:	3904      	subs	r1, #4
   15a2e:	6822      	ldr	r2, [r4, #0]
   15a30:	680d      	ldr	r5, [r1, #0]
   15a32:	42aa      	cmp	r2, r5
   15a34:	d005      	beq.n	15a42 <__mcmp+0x2c>
   15a36:	42aa      	cmp	r2, r5
   15a38:	4192      	sbcs	r2, r2
   15a3a:	2301      	movs	r3, #1
   15a3c:	4313      	orrs	r3, r2
   15a3e:	0018      	movs	r0, r3
   15a40:	bd30      	pop	{r4, r5, pc}
   15a42:	42a0      	cmp	r0, r4
   15a44:	d3f1      	bcc.n	15a2a <__mcmp+0x14>
   15a46:	e7fa      	b.n	15a3e <__mcmp+0x28>

00015a48 <__mdiff>:
   15a48:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a4a:	000d      	movs	r5, r1
   15a4c:	b085      	sub	sp, #20
   15a4e:	0007      	movs	r7, r0
   15a50:	0011      	movs	r1, r2
   15a52:	0028      	movs	r0, r5
   15a54:	0014      	movs	r4, r2
   15a56:	f7ff ffde 	bl	15a16 <__mcmp>
   15a5a:	1e06      	subs	r6, r0, #0
   15a5c:	d108      	bne.n	15a70 <__mdiff+0x28>
   15a5e:	0001      	movs	r1, r0
   15a60:	0038      	movs	r0, r7
   15a62:	f7ff fdc6 	bl	155f2 <_Balloc>
   15a66:	2301      	movs	r3, #1
   15a68:	6146      	str	r6, [r0, #20]
   15a6a:	6103      	str	r3, [r0, #16]
   15a6c:	b005      	add	sp, #20
   15a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a70:	2301      	movs	r3, #1
   15a72:	9301      	str	r3, [sp, #4]
   15a74:	2800      	cmp	r0, #0
   15a76:	db04      	blt.n	15a82 <__mdiff+0x3a>
   15a78:	0023      	movs	r3, r4
   15a7a:	002c      	movs	r4, r5
   15a7c:	001d      	movs	r5, r3
   15a7e:	2300      	movs	r3, #0
   15a80:	9301      	str	r3, [sp, #4]
   15a82:	6861      	ldr	r1, [r4, #4]
   15a84:	0038      	movs	r0, r7
   15a86:	f7ff fdb4 	bl	155f2 <_Balloc>
   15a8a:	002f      	movs	r7, r5
   15a8c:	2200      	movs	r2, #0
   15a8e:	9b01      	ldr	r3, [sp, #4]
   15a90:	6926      	ldr	r6, [r4, #16]
   15a92:	60c3      	str	r3, [r0, #12]
   15a94:	3414      	adds	r4, #20
   15a96:	00b3      	lsls	r3, r6, #2
   15a98:	18e3      	adds	r3, r4, r3
   15a9a:	9302      	str	r3, [sp, #8]
   15a9c:	692b      	ldr	r3, [r5, #16]
   15a9e:	3714      	adds	r7, #20
   15aa0:	009b      	lsls	r3, r3, #2
   15aa2:	18fb      	adds	r3, r7, r3
   15aa4:	9303      	str	r3, [sp, #12]
   15aa6:	0003      	movs	r3, r0
   15aa8:	4694      	mov	ip, r2
   15aaa:	3314      	adds	r3, #20
   15aac:	cc20      	ldmia	r4!, {r5}
   15aae:	cf04      	ldmia	r7!, {r2}
   15ab0:	9201      	str	r2, [sp, #4]
   15ab2:	b2aa      	uxth	r2, r5
   15ab4:	4494      	add	ip, r2
   15ab6:	466a      	mov	r2, sp
   15ab8:	4661      	mov	r1, ip
   15aba:	8892      	ldrh	r2, [r2, #4]
   15abc:	0c2d      	lsrs	r5, r5, #16
   15abe:	1a8a      	subs	r2, r1, r2
   15ac0:	9901      	ldr	r1, [sp, #4]
   15ac2:	0c09      	lsrs	r1, r1, #16
   15ac4:	1a69      	subs	r1, r5, r1
   15ac6:	1415      	asrs	r5, r2, #16
   15ac8:	1949      	adds	r1, r1, r5
   15aca:	140d      	asrs	r5, r1, #16
   15acc:	b292      	uxth	r2, r2
   15ace:	0409      	lsls	r1, r1, #16
   15ad0:	430a      	orrs	r2, r1
   15ad2:	601a      	str	r2, [r3, #0]
   15ad4:	9a03      	ldr	r2, [sp, #12]
   15ad6:	46ac      	mov	ip, r5
   15ad8:	3304      	adds	r3, #4
   15ada:	42ba      	cmp	r2, r7
   15adc:	d8e6      	bhi.n	15aac <__mdiff+0x64>
   15ade:	9902      	ldr	r1, [sp, #8]
   15ae0:	001a      	movs	r2, r3
   15ae2:	428c      	cmp	r4, r1
   15ae4:	d305      	bcc.n	15af2 <__mdiff+0xaa>
   15ae6:	3a04      	subs	r2, #4
   15ae8:	6813      	ldr	r3, [r2, #0]
   15aea:	2b00      	cmp	r3, #0
   15aec:	d00e      	beq.n	15b0c <__mdiff+0xc4>
   15aee:	6106      	str	r6, [r0, #16]
   15af0:	e7bc      	b.n	15a6c <__mdiff+0x24>
   15af2:	cc04      	ldmia	r4!, {r2}
   15af4:	b291      	uxth	r1, r2
   15af6:	4461      	add	r1, ip
   15af8:	140d      	asrs	r5, r1, #16
   15afa:	0c12      	lsrs	r2, r2, #16
   15afc:	1952      	adds	r2, r2, r5
   15afe:	1415      	asrs	r5, r2, #16
   15b00:	b289      	uxth	r1, r1
   15b02:	0412      	lsls	r2, r2, #16
   15b04:	430a      	orrs	r2, r1
   15b06:	46ac      	mov	ip, r5
   15b08:	c304      	stmia	r3!, {r2}
   15b0a:	e7e8      	b.n	15ade <__mdiff+0x96>
   15b0c:	3e01      	subs	r6, #1
   15b0e:	e7ea      	b.n	15ae6 <__mdiff+0x9e>

00015b10 <__d2b>:
   15b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15b12:	001d      	movs	r5, r3
   15b14:	2101      	movs	r1, #1
   15b16:	9f08      	ldr	r7, [sp, #32]
   15b18:	0014      	movs	r4, r2
   15b1a:	f7ff fd6a 	bl	155f2 <_Balloc>
   15b1e:	032b      	lsls	r3, r5, #12
   15b20:	006d      	lsls	r5, r5, #1
   15b22:	0006      	movs	r6, r0
   15b24:	0b1b      	lsrs	r3, r3, #12
   15b26:	0d6d      	lsrs	r5, r5, #21
   15b28:	d124      	bne.n	15b74 <__d2b+0x64>
   15b2a:	9301      	str	r3, [sp, #4]
   15b2c:	2c00      	cmp	r4, #0
   15b2e:	d027      	beq.n	15b80 <__d2b+0x70>
   15b30:	4668      	mov	r0, sp
   15b32:	9400      	str	r4, [sp, #0]
   15b34:	f7ff fe04 	bl	15740 <__lo0bits>
   15b38:	9c00      	ldr	r4, [sp, #0]
   15b3a:	2800      	cmp	r0, #0
   15b3c:	d01e      	beq.n	15b7c <__d2b+0x6c>
   15b3e:	9b01      	ldr	r3, [sp, #4]
   15b40:	2120      	movs	r1, #32
   15b42:	001a      	movs	r2, r3
   15b44:	1a09      	subs	r1, r1, r0
   15b46:	408a      	lsls	r2, r1
   15b48:	40c3      	lsrs	r3, r0
   15b4a:	4322      	orrs	r2, r4
   15b4c:	6172      	str	r2, [r6, #20]
   15b4e:	9301      	str	r3, [sp, #4]
   15b50:	9c01      	ldr	r4, [sp, #4]
   15b52:	61b4      	str	r4, [r6, #24]
   15b54:	1e63      	subs	r3, r4, #1
   15b56:	419c      	sbcs	r4, r3
   15b58:	3401      	adds	r4, #1
   15b5a:	6134      	str	r4, [r6, #16]
   15b5c:	2d00      	cmp	r5, #0
   15b5e:	d018      	beq.n	15b92 <__d2b+0x82>
   15b60:	4b12      	ldr	r3, [pc, #72]	; (15bac <__d2b+0x9c>)
   15b62:	18ed      	adds	r5, r5, r3
   15b64:	2335      	movs	r3, #53	; 0x35
   15b66:	182d      	adds	r5, r5, r0
   15b68:	603d      	str	r5, [r7, #0]
   15b6a:	1a18      	subs	r0, r3, r0
   15b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15b6e:	6018      	str	r0, [r3, #0]
   15b70:	0030      	movs	r0, r6
   15b72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   15b74:	2280      	movs	r2, #128	; 0x80
   15b76:	0352      	lsls	r2, r2, #13
   15b78:	4313      	orrs	r3, r2
   15b7a:	e7d6      	b.n	15b2a <__d2b+0x1a>
   15b7c:	6174      	str	r4, [r6, #20]
   15b7e:	e7e7      	b.n	15b50 <__d2b+0x40>
   15b80:	a801      	add	r0, sp, #4
   15b82:	f7ff fddd 	bl	15740 <__lo0bits>
   15b86:	2401      	movs	r4, #1
   15b88:	9b01      	ldr	r3, [sp, #4]
   15b8a:	6134      	str	r4, [r6, #16]
   15b8c:	6173      	str	r3, [r6, #20]
   15b8e:	3020      	adds	r0, #32
   15b90:	e7e4      	b.n	15b5c <__d2b+0x4c>
   15b92:	4b07      	ldr	r3, [pc, #28]	; (15bb0 <__d2b+0xa0>)
   15b94:	18c0      	adds	r0, r0, r3
   15b96:	4b07      	ldr	r3, [pc, #28]	; (15bb4 <__d2b+0xa4>)
   15b98:	6038      	str	r0, [r7, #0]
   15b9a:	18e3      	adds	r3, r4, r3
   15b9c:	009b      	lsls	r3, r3, #2
   15b9e:	18f3      	adds	r3, r6, r3
   15ba0:	6958      	ldr	r0, [r3, #20]
   15ba2:	f7ff fdb3 	bl	1570c <__hi0bits>
   15ba6:	0164      	lsls	r4, r4, #5
   15ba8:	1a20      	subs	r0, r4, r0
   15baa:	e7df      	b.n	15b6c <__d2b+0x5c>
   15bac:	fffffbcd 	.word	0xfffffbcd
   15bb0:	fffffbce 	.word	0xfffffbce
   15bb4:	3fffffff 	.word	0x3fffffff

00015bb8 <_calloc_r>:
   15bb8:	434a      	muls	r2, r1
   15bba:	b570      	push	{r4, r5, r6, lr}
   15bbc:	0011      	movs	r1, r2
   15bbe:	0014      	movs	r4, r2
   15bc0:	f7fd fc76 	bl	134b0 <_malloc_r>
   15bc4:	1e05      	subs	r5, r0, #0
   15bc6:	d003      	beq.n	15bd0 <_calloc_r+0x18>
   15bc8:	0022      	movs	r2, r4
   15bca:	2100      	movs	r1, #0
   15bcc:	f7fd fc1d 	bl	1340a <memset>
   15bd0:	0028      	movs	r0, r5
   15bd2:	bd70      	pop	{r4, r5, r6, pc}

00015bd4 <__ssputs_r>:
   15bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15bd6:	688e      	ldr	r6, [r1, #8]
   15bd8:	b085      	sub	sp, #20
   15bda:	0007      	movs	r7, r0
   15bdc:	000c      	movs	r4, r1
   15bde:	9203      	str	r2, [sp, #12]
   15be0:	9301      	str	r3, [sp, #4]
   15be2:	429e      	cmp	r6, r3
   15be4:	d839      	bhi.n	15c5a <__ssputs_r+0x86>
   15be6:	2390      	movs	r3, #144	; 0x90
   15be8:	898a      	ldrh	r2, [r1, #12]
   15bea:	00db      	lsls	r3, r3, #3
   15bec:	421a      	tst	r2, r3
   15bee:	d034      	beq.n	15c5a <__ssputs_r+0x86>
   15bf0:	2503      	movs	r5, #3
   15bf2:	6909      	ldr	r1, [r1, #16]
   15bf4:	6823      	ldr	r3, [r4, #0]
   15bf6:	1a5b      	subs	r3, r3, r1
   15bf8:	9302      	str	r3, [sp, #8]
   15bfa:	6963      	ldr	r3, [r4, #20]
   15bfc:	9802      	ldr	r0, [sp, #8]
   15bfe:	435d      	muls	r5, r3
   15c00:	0feb      	lsrs	r3, r5, #31
   15c02:	195d      	adds	r5, r3, r5
   15c04:	9b01      	ldr	r3, [sp, #4]
   15c06:	106d      	asrs	r5, r5, #1
   15c08:	3301      	adds	r3, #1
   15c0a:	181b      	adds	r3, r3, r0
   15c0c:	42ab      	cmp	r3, r5
   15c0e:	d900      	bls.n	15c12 <__ssputs_r+0x3e>
   15c10:	001d      	movs	r5, r3
   15c12:	0553      	lsls	r3, r2, #21
   15c14:	d532      	bpl.n	15c7c <__ssputs_r+0xa8>
   15c16:	0029      	movs	r1, r5
   15c18:	0038      	movs	r0, r7
   15c1a:	f7fd fc49 	bl	134b0 <_malloc_r>
   15c1e:	1e06      	subs	r6, r0, #0
   15c20:	d109      	bne.n	15c36 <__ssputs_r+0x62>
   15c22:	230c      	movs	r3, #12
   15c24:	603b      	str	r3, [r7, #0]
   15c26:	2340      	movs	r3, #64	; 0x40
   15c28:	2001      	movs	r0, #1
   15c2a:	89a2      	ldrh	r2, [r4, #12]
   15c2c:	4240      	negs	r0, r0
   15c2e:	4313      	orrs	r3, r2
   15c30:	81a3      	strh	r3, [r4, #12]
   15c32:	b005      	add	sp, #20
   15c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15c36:	9a02      	ldr	r2, [sp, #8]
   15c38:	6921      	ldr	r1, [r4, #16]
   15c3a:	f7fd fbcb 	bl	133d4 <memcpy>
   15c3e:	89a3      	ldrh	r3, [r4, #12]
   15c40:	4a14      	ldr	r2, [pc, #80]	; (15c94 <__ssputs_r+0xc0>)
   15c42:	401a      	ands	r2, r3
   15c44:	2380      	movs	r3, #128	; 0x80
   15c46:	4313      	orrs	r3, r2
   15c48:	81a3      	strh	r3, [r4, #12]
   15c4a:	9b02      	ldr	r3, [sp, #8]
   15c4c:	6126      	str	r6, [r4, #16]
   15c4e:	18f6      	adds	r6, r6, r3
   15c50:	6026      	str	r6, [r4, #0]
   15c52:	6165      	str	r5, [r4, #20]
   15c54:	9e01      	ldr	r6, [sp, #4]
   15c56:	1aed      	subs	r5, r5, r3
   15c58:	60a5      	str	r5, [r4, #8]
   15c5a:	9b01      	ldr	r3, [sp, #4]
   15c5c:	42b3      	cmp	r3, r6
   15c5e:	d200      	bcs.n	15c62 <__ssputs_r+0x8e>
   15c60:	001e      	movs	r6, r3
   15c62:	0032      	movs	r2, r6
   15c64:	9903      	ldr	r1, [sp, #12]
   15c66:	6820      	ldr	r0, [r4, #0]
   15c68:	f7fd fbbd 	bl	133e6 <memmove>
   15c6c:	68a3      	ldr	r3, [r4, #8]
   15c6e:	2000      	movs	r0, #0
   15c70:	1b9b      	subs	r3, r3, r6
   15c72:	60a3      	str	r3, [r4, #8]
   15c74:	6823      	ldr	r3, [r4, #0]
   15c76:	199e      	adds	r6, r3, r6
   15c78:	6026      	str	r6, [r4, #0]
   15c7a:	e7da      	b.n	15c32 <__ssputs_r+0x5e>
   15c7c:	002a      	movs	r2, r5
   15c7e:	0038      	movs	r0, r7
   15c80:	f000 fb32 	bl	162e8 <_realloc_r>
   15c84:	1e06      	subs	r6, r0, #0
   15c86:	d1e0      	bne.n	15c4a <__ssputs_r+0x76>
   15c88:	6921      	ldr	r1, [r4, #16]
   15c8a:	0038      	movs	r0, r7
   15c8c:	f7fd fbc6 	bl	1341c <_free_r>
   15c90:	e7c7      	b.n	15c22 <__ssputs_r+0x4e>
   15c92:	46c0      	nop			; (mov r8, r8)
   15c94:	fffffb7f 	.word	0xfffffb7f

00015c98 <_svfiprintf_r>:
   15c98:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c9a:	b09f      	sub	sp, #124	; 0x7c
   15c9c:	9002      	str	r0, [sp, #8]
   15c9e:	9305      	str	r3, [sp, #20]
   15ca0:	898b      	ldrh	r3, [r1, #12]
   15ca2:	000f      	movs	r7, r1
   15ca4:	0016      	movs	r6, r2
   15ca6:	061b      	lsls	r3, r3, #24
   15ca8:	d511      	bpl.n	15cce <_svfiprintf_r+0x36>
   15caa:	690b      	ldr	r3, [r1, #16]
   15cac:	2b00      	cmp	r3, #0
   15cae:	d10e      	bne.n	15cce <_svfiprintf_r+0x36>
   15cb0:	2140      	movs	r1, #64	; 0x40
   15cb2:	f7fd fbfd 	bl	134b0 <_malloc_r>
   15cb6:	6038      	str	r0, [r7, #0]
   15cb8:	6138      	str	r0, [r7, #16]
   15cba:	2800      	cmp	r0, #0
   15cbc:	d105      	bne.n	15cca <_svfiprintf_r+0x32>
   15cbe:	230c      	movs	r3, #12
   15cc0:	9a02      	ldr	r2, [sp, #8]
   15cc2:	3801      	subs	r0, #1
   15cc4:	6013      	str	r3, [r2, #0]
   15cc6:	b01f      	add	sp, #124	; 0x7c
   15cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15cca:	2340      	movs	r3, #64	; 0x40
   15ccc:	617b      	str	r3, [r7, #20]
   15cce:	2300      	movs	r3, #0
   15cd0:	ad06      	add	r5, sp, #24
   15cd2:	616b      	str	r3, [r5, #20]
   15cd4:	3320      	adds	r3, #32
   15cd6:	766b      	strb	r3, [r5, #25]
   15cd8:	3310      	adds	r3, #16
   15cda:	76ab      	strb	r3, [r5, #26]
   15cdc:	0034      	movs	r4, r6
   15cde:	7823      	ldrb	r3, [r4, #0]
   15ce0:	2b00      	cmp	r3, #0
   15ce2:	d147      	bne.n	15d74 <_svfiprintf_r+0xdc>
   15ce4:	1ba3      	subs	r3, r4, r6
   15ce6:	9304      	str	r3, [sp, #16]
   15ce8:	d00d      	beq.n	15d06 <_svfiprintf_r+0x6e>
   15cea:	1ba3      	subs	r3, r4, r6
   15cec:	0032      	movs	r2, r6
   15cee:	0039      	movs	r1, r7
   15cf0:	9802      	ldr	r0, [sp, #8]
   15cf2:	f7ff ff6f 	bl	15bd4 <__ssputs_r>
   15cf6:	1c43      	adds	r3, r0, #1
   15cf8:	d100      	bne.n	15cfc <_svfiprintf_r+0x64>
   15cfa:	e0b5      	b.n	15e68 <_svfiprintf_r+0x1d0>
   15cfc:	696a      	ldr	r2, [r5, #20]
   15cfe:	9b04      	ldr	r3, [sp, #16]
   15d00:	4694      	mov	ip, r2
   15d02:	4463      	add	r3, ip
   15d04:	616b      	str	r3, [r5, #20]
   15d06:	7823      	ldrb	r3, [r4, #0]
   15d08:	2b00      	cmp	r3, #0
   15d0a:	d100      	bne.n	15d0e <_svfiprintf_r+0x76>
   15d0c:	e0ac      	b.n	15e68 <_svfiprintf_r+0x1d0>
   15d0e:	2201      	movs	r2, #1
   15d10:	2300      	movs	r3, #0
   15d12:	4252      	negs	r2, r2
   15d14:	606a      	str	r2, [r5, #4]
   15d16:	a902      	add	r1, sp, #8
   15d18:	3254      	adds	r2, #84	; 0x54
   15d1a:	1852      	adds	r2, r2, r1
   15d1c:	3401      	adds	r4, #1
   15d1e:	602b      	str	r3, [r5, #0]
   15d20:	60eb      	str	r3, [r5, #12]
   15d22:	60ab      	str	r3, [r5, #8]
   15d24:	7013      	strb	r3, [r2, #0]
   15d26:	65ab      	str	r3, [r5, #88]	; 0x58
   15d28:	4e58      	ldr	r6, [pc, #352]	; (15e8c <_svfiprintf_r+0x1f4>)
   15d2a:	2205      	movs	r2, #5
   15d2c:	7821      	ldrb	r1, [r4, #0]
   15d2e:	0030      	movs	r0, r6
   15d30:	f7ff fc52 	bl	155d8 <memchr>
   15d34:	1c62      	adds	r2, r4, #1
   15d36:	2800      	cmp	r0, #0
   15d38:	d120      	bne.n	15d7c <_svfiprintf_r+0xe4>
   15d3a:	6829      	ldr	r1, [r5, #0]
   15d3c:	06cb      	lsls	r3, r1, #27
   15d3e:	d504      	bpl.n	15d4a <_svfiprintf_r+0xb2>
   15d40:	2353      	movs	r3, #83	; 0x53
   15d42:	ae02      	add	r6, sp, #8
   15d44:	3020      	adds	r0, #32
   15d46:	199b      	adds	r3, r3, r6
   15d48:	7018      	strb	r0, [r3, #0]
   15d4a:	070b      	lsls	r3, r1, #28
   15d4c:	d504      	bpl.n	15d58 <_svfiprintf_r+0xc0>
   15d4e:	2353      	movs	r3, #83	; 0x53
   15d50:	202b      	movs	r0, #43	; 0x2b
   15d52:	ae02      	add	r6, sp, #8
   15d54:	199b      	adds	r3, r3, r6
   15d56:	7018      	strb	r0, [r3, #0]
   15d58:	7823      	ldrb	r3, [r4, #0]
   15d5a:	2b2a      	cmp	r3, #42	; 0x2a
   15d5c:	d016      	beq.n	15d8c <_svfiprintf_r+0xf4>
   15d5e:	2000      	movs	r0, #0
   15d60:	210a      	movs	r1, #10
   15d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15d64:	7822      	ldrb	r2, [r4, #0]
   15d66:	3a30      	subs	r2, #48	; 0x30
   15d68:	2a09      	cmp	r2, #9
   15d6a:	d955      	bls.n	15e18 <_svfiprintf_r+0x180>
   15d6c:	2800      	cmp	r0, #0
   15d6e:	d015      	beq.n	15d9c <_svfiprintf_r+0x104>
   15d70:	9309      	str	r3, [sp, #36]	; 0x24
   15d72:	e013      	b.n	15d9c <_svfiprintf_r+0x104>
   15d74:	2b25      	cmp	r3, #37	; 0x25
   15d76:	d0b5      	beq.n	15ce4 <_svfiprintf_r+0x4c>
   15d78:	3401      	adds	r4, #1
   15d7a:	e7b0      	b.n	15cde <_svfiprintf_r+0x46>
   15d7c:	2301      	movs	r3, #1
   15d7e:	1b80      	subs	r0, r0, r6
   15d80:	4083      	lsls	r3, r0
   15d82:	6829      	ldr	r1, [r5, #0]
   15d84:	0014      	movs	r4, r2
   15d86:	430b      	orrs	r3, r1
   15d88:	602b      	str	r3, [r5, #0]
   15d8a:	e7cd      	b.n	15d28 <_svfiprintf_r+0x90>
   15d8c:	9b05      	ldr	r3, [sp, #20]
   15d8e:	1d18      	adds	r0, r3, #4
   15d90:	681b      	ldr	r3, [r3, #0]
   15d92:	9005      	str	r0, [sp, #20]
   15d94:	2b00      	cmp	r3, #0
   15d96:	db39      	blt.n	15e0c <_svfiprintf_r+0x174>
   15d98:	9309      	str	r3, [sp, #36]	; 0x24
   15d9a:	0014      	movs	r4, r2
   15d9c:	7823      	ldrb	r3, [r4, #0]
   15d9e:	2b2e      	cmp	r3, #46	; 0x2e
   15da0:	d10b      	bne.n	15dba <_svfiprintf_r+0x122>
   15da2:	7863      	ldrb	r3, [r4, #1]
   15da4:	1c62      	adds	r2, r4, #1
   15da6:	2b2a      	cmp	r3, #42	; 0x2a
   15da8:	d13e      	bne.n	15e28 <_svfiprintf_r+0x190>
   15daa:	9b05      	ldr	r3, [sp, #20]
   15dac:	3402      	adds	r4, #2
   15dae:	1d1a      	adds	r2, r3, #4
   15db0:	681b      	ldr	r3, [r3, #0]
   15db2:	9205      	str	r2, [sp, #20]
   15db4:	2b00      	cmp	r3, #0
   15db6:	db34      	blt.n	15e22 <_svfiprintf_r+0x18a>
   15db8:	9307      	str	r3, [sp, #28]
   15dba:	4e35      	ldr	r6, [pc, #212]	; (15e90 <_svfiprintf_r+0x1f8>)
   15dbc:	7821      	ldrb	r1, [r4, #0]
   15dbe:	2203      	movs	r2, #3
   15dc0:	0030      	movs	r0, r6
   15dc2:	f7ff fc09 	bl	155d8 <memchr>
   15dc6:	2800      	cmp	r0, #0
   15dc8:	d006      	beq.n	15dd8 <_svfiprintf_r+0x140>
   15dca:	2340      	movs	r3, #64	; 0x40
   15dcc:	1b80      	subs	r0, r0, r6
   15dce:	4083      	lsls	r3, r0
   15dd0:	682a      	ldr	r2, [r5, #0]
   15dd2:	3401      	adds	r4, #1
   15dd4:	4313      	orrs	r3, r2
   15dd6:	602b      	str	r3, [r5, #0]
   15dd8:	7821      	ldrb	r1, [r4, #0]
   15dda:	2206      	movs	r2, #6
   15ddc:	482d      	ldr	r0, [pc, #180]	; (15e94 <_svfiprintf_r+0x1fc>)
   15dde:	1c66      	adds	r6, r4, #1
   15de0:	7629      	strb	r1, [r5, #24]
   15de2:	f7ff fbf9 	bl	155d8 <memchr>
   15de6:	2800      	cmp	r0, #0
   15de8:	d046      	beq.n	15e78 <_svfiprintf_r+0x1e0>
   15dea:	4b2b      	ldr	r3, [pc, #172]	; (15e98 <_svfiprintf_r+0x200>)
   15dec:	2b00      	cmp	r3, #0
   15dee:	d12f      	bne.n	15e50 <_svfiprintf_r+0x1b8>
   15df0:	6829      	ldr	r1, [r5, #0]
   15df2:	9b05      	ldr	r3, [sp, #20]
   15df4:	2207      	movs	r2, #7
   15df6:	05c9      	lsls	r1, r1, #23
   15df8:	d528      	bpl.n	15e4c <_svfiprintf_r+0x1b4>
   15dfa:	189b      	adds	r3, r3, r2
   15dfc:	4393      	bics	r3, r2
   15dfe:	3308      	adds	r3, #8
   15e00:	9305      	str	r3, [sp, #20]
   15e02:	696b      	ldr	r3, [r5, #20]
   15e04:	9a03      	ldr	r2, [sp, #12]
   15e06:	189b      	adds	r3, r3, r2
   15e08:	616b      	str	r3, [r5, #20]
   15e0a:	e767      	b.n	15cdc <_svfiprintf_r+0x44>
   15e0c:	425b      	negs	r3, r3
   15e0e:	60eb      	str	r3, [r5, #12]
   15e10:	2302      	movs	r3, #2
   15e12:	430b      	orrs	r3, r1
   15e14:	602b      	str	r3, [r5, #0]
   15e16:	e7c0      	b.n	15d9a <_svfiprintf_r+0x102>
   15e18:	434b      	muls	r3, r1
   15e1a:	3401      	adds	r4, #1
   15e1c:	189b      	adds	r3, r3, r2
   15e1e:	2001      	movs	r0, #1
   15e20:	e7a0      	b.n	15d64 <_svfiprintf_r+0xcc>
   15e22:	2301      	movs	r3, #1
   15e24:	425b      	negs	r3, r3
   15e26:	e7c7      	b.n	15db8 <_svfiprintf_r+0x120>
   15e28:	2300      	movs	r3, #0
   15e2a:	0014      	movs	r4, r2
   15e2c:	200a      	movs	r0, #10
   15e2e:	001a      	movs	r2, r3
   15e30:	606b      	str	r3, [r5, #4]
   15e32:	7821      	ldrb	r1, [r4, #0]
   15e34:	3930      	subs	r1, #48	; 0x30
   15e36:	2909      	cmp	r1, #9
   15e38:	d903      	bls.n	15e42 <_svfiprintf_r+0x1aa>
   15e3a:	2b00      	cmp	r3, #0
   15e3c:	d0bd      	beq.n	15dba <_svfiprintf_r+0x122>
   15e3e:	9207      	str	r2, [sp, #28]
   15e40:	e7bb      	b.n	15dba <_svfiprintf_r+0x122>
   15e42:	4342      	muls	r2, r0
   15e44:	3401      	adds	r4, #1
   15e46:	1852      	adds	r2, r2, r1
   15e48:	2301      	movs	r3, #1
   15e4a:	e7f2      	b.n	15e32 <_svfiprintf_r+0x19a>
   15e4c:	3307      	adds	r3, #7
   15e4e:	e7d5      	b.n	15dfc <_svfiprintf_r+0x164>
   15e50:	ab05      	add	r3, sp, #20
   15e52:	9300      	str	r3, [sp, #0]
   15e54:	003a      	movs	r2, r7
   15e56:	4b11      	ldr	r3, [pc, #68]	; (15e9c <_svfiprintf_r+0x204>)
   15e58:	0029      	movs	r1, r5
   15e5a:	9802      	ldr	r0, [sp, #8]
   15e5c:	f7fd fc22 	bl	136a4 <_printf_float>
   15e60:	9003      	str	r0, [sp, #12]
   15e62:	9b03      	ldr	r3, [sp, #12]
   15e64:	3301      	adds	r3, #1
   15e66:	d1cc      	bne.n	15e02 <_svfiprintf_r+0x16a>
   15e68:	89bb      	ldrh	r3, [r7, #12]
   15e6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15e6c:	065b      	lsls	r3, r3, #25
   15e6e:	d400      	bmi.n	15e72 <_svfiprintf_r+0x1da>
   15e70:	e729      	b.n	15cc6 <_svfiprintf_r+0x2e>
   15e72:	2001      	movs	r0, #1
   15e74:	4240      	negs	r0, r0
   15e76:	e726      	b.n	15cc6 <_svfiprintf_r+0x2e>
   15e78:	ab05      	add	r3, sp, #20
   15e7a:	9300      	str	r3, [sp, #0]
   15e7c:	003a      	movs	r2, r7
   15e7e:	4b07      	ldr	r3, [pc, #28]	; (15e9c <_svfiprintf_r+0x204>)
   15e80:	0029      	movs	r1, r5
   15e82:	9802      	ldr	r0, [sp, #8]
   15e84:	f7fd fec8 	bl	13c18 <_printf_i>
   15e88:	e7ea      	b.n	15e60 <_svfiprintf_r+0x1c8>
   15e8a:	46c0      	nop			; (mov r8, r8)
   15e8c:	0001b16c 	.word	0x0001b16c
   15e90:	0001b172 	.word	0x0001b172
   15e94:	0001b176 	.word	0x0001b176
   15e98:	000136a5 	.word	0x000136a5
   15e9c:	00015bd5 	.word	0x00015bd5

00015ea0 <__sfputc_r>:
   15ea0:	6893      	ldr	r3, [r2, #8]
   15ea2:	b510      	push	{r4, lr}
   15ea4:	3b01      	subs	r3, #1
   15ea6:	6093      	str	r3, [r2, #8]
   15ea8:	2b00      	cmp	r3, #0
   15eaa:	da05      	bge.n	15eb8 <__sfputc_r+0x18>
   15eac:	6994      	ldr	r4, [r2, #24]
   15eae:	42a3      	cmp	r3, r4
   15eb0:	db08      	blt.n	15ec4 <__sfputc_r+0x24>
   15eb2:	b2cb      	uxtb	r3, r1
   15eb4:	2b0a      	cmp	r3, #10
   15eb6:	d005      	beq.n	15ec4 <__sfputc_r+0x24>
   15eb8:	6813      	ldr	r3, [r2, #0]
   15eba:	1c58      	adds	r0, r3, #1
   15ebc:	6010      	str	r0, [r2, #0]
   15ebe:	7019      	strb	r1, [r3, #0]
   15ec0:	b2c8      	uxtb	r0, r1
   15ec2:	bd10      	pop	{r4, pc}
   15ec4:	f7fe fa3e 	bl	14344 <__swbuf_r>
   15ec8:	e7fb      	b.n	15ec2 <__sfputc_r+0x22>

00015eca <__sfputs_r>:
   15eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ecc:	0006      	movs	r6, r0
   15ece:	000f      	movs	r7, r1
   15ed0:	0014      	movs	r4, r2
   15ed2:	18d5      	adds	r5, r2, r3
   15ed4:	42ac      	cmp	r4, r5
   15ed6:	d101      	bne.n	15edc <__sfputs_r+0x12>
   15ed8:	2000      	movs	r0, #0
   15eda:	e007      	b.n	15eec <__sfputs_r+0x22>
   15edc:	7821      	ldrb	r1, [r4, #0]
   15ede:	003a      	movs	r2, r7
   15ee0:	0030      	movs	r0, r6
   15ee2:	f7ff ffdd 	bl	15ea0 <__sfputc_r>
   15ee6:	3401      	adds	r4, #1
   15ee8:	1c43      	adds	r3, r0, #1
   15eea:	d1f3      	bne.n	15ed4 <__sfputs_r+0xa>
   15eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00015ef0 <_vfiprintf_r>:
   15ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ef2:	b09f      	sub	sp, #124	; 0x7c
   15ef4:	0006      	movs	r6, r0
   15ef6:	000f      	movs	r7, r1
   15ef8:	0014      	movs	r4, r2
   15efa:	9305      	str	r3, [sp, #20]
   15efc:	2800      	cmp	r0, #0
   15efe:	d004      	beq.n	15f0a <_vfiprintf_r+0x1a>
   15f00:	6983      	ldr	r3, [r0, #24]
   15f02:	2b00      	cmp	r3, #0
   15f04:	d101      	bne.n	15f0a <_vfiprintf_r+0x1a>
   15f06:	f7ff fa59 	bl	153bc <__sinit>
   15f0a:	4b7f      	ldr	r3, [pc, #508]	; (16108 <_vfiprintf_r+0x218>)
   15f0c:	429f      	cmp	r7, r3
   15f0e:	d15c      	bne.n	15fca <_vfiprintf_r+0xda>
   15f10:	6877      	ldr	r7, [r6, #4]
   15f12:	89bb      	ldrh	r3, [r7, #12]
   15f14:	071b      	lsls	r3, r3, #28
   15f16:	d562      	bpl.n	15fde <_vfiprintf_r+0xee>
   15f18:	693b      	ldr	r3, [r7, #16]
   15f1a:	2b00      	cmp	r3, #0
   15f1c:	d05f      	beq.n	15fde <_vfiprintf_r+0xee>
   15f1e:	2300      	movs	r3, #0
   15f20:	ad06      	add	r5, sp, #24
   15f22:	616b      	str	r3, [r5, #20]
   15f24:	3320      	adds	r3, #32
   15f26:	766b      	strb	r3, [r5, #25]
   15f28:	3310      	adds	r3, #16
   15f2a:	76ab      	strb	r3, [r5, #26]
   15f2c:	9402      	str	r4, [sp, #8]
   15f2e:	9c02      	ldr	r4, [sp, #8]
   15f30:	7823      	ldrb	r3, [r4, #0]
   15f32:	2b00      	cmp	r3, #0
   15f34:	d15d      	bne.n	15ff2 <_vfiprintf_r+0x102>
   15f36:	9b02      	ldr	r3, [sp, #8]
   15f38:	1ae3      	subs	r3, r4, r3
   15f3a:	9304      	str	r3, [sp, #16]
   15f3c:	d00d      	beq.n	15f5a <_vfiprintf_r+0x6a>
   15f3e:	9b04      	ldr	r3, [sp, #16]
   15f40:	9a02      	ldr	r2, [sp, #8]
   15f42:	0039      	movs	r1, r7
   15f44:	0030      	movs	r0, r6
   15f46:	f7ff ffc0 	bl	15eca <__sfputs_r>
   15f4a:	1c43      	adds	r3, r0, #1
   15f4c:	d100      	bne.n	15f50 <_vfiprintf_r+0x60>
   15f4e:	e0cc      	b.n	160ea <_vfiprintf_r+0x1fa>
   15f50:	696a      	ldr	r2, [r5, #20]
   15f52:	9b04      	ldr	r3, [sp, #16]
   15f54:	4694      	mov	ip, r2
   15f56:	4463      	add	r3, ip
   15f58:	616b      	str	r3, [r5, #20]
   15f5a:	7823      	ldrb	r3, [r4, #0]
   15f5c:	2b00      	cmp	r3, #0
   15f5e:	d100      	bne.n	15f62 <_vfiprintf_r+0x72>
   15f60:	e0c3      	b.n	160ea <_vfiprintf_r+0x1fa>
   15f62:	2201      	movs	r2, #1
   15f64:	2300      	movs	r3, #0
   15f66:	4252      	negs	r2, r2
   15f68:	606a      	str	r2, [r5, #4]
   15f6a:	a902      	add	r1, sp, #8
   15f6c:	3254      	adds	r2, #84	; 0x54
   15f6e:	1852      	adds	r2, r2, r1
   15f70:	3401      	adds	r4, #1
   15f72:	602b      	str	r3, [r5, #0]
   15f74:	60eb      	str	r3, [r5, #12]
   15f76:	60ab      	str	r3, [r5, #8]
   15f78:	7013      	strb	r3, [r2, #0]
   15f7a:	65ab      	str	r3, [r5, #88]	; 0x58
   15f7c:	7821      	ldrb	r1, [r4, #0]
   15f7e:	2205      	movs	r2, #5
   15f80:	4862      	ldr	r0, [pc, #392]	; (1610c <_vfiprintf_r+0x21c>)
   15f82:	f7ff fb29 	bl	155d8 <memchr>
   15f86:	1c63      	adds	r3, r4, #1
   15f88:	469c      	mov	ip, r3
   15f8a:	2800      	cmp	r0, #0
   15f8c:	d135      	bne.n	15ffa <_vfiprintf_r+0x10a>
   15f8e:	6829      	ldr	r1, [r5, #0]
   15f90:	06cb      	lsls	r3, r1, #27
   15f92:	d504      	bpl.n	15f9e <_vfiprintf_r+0xae>
   15f94:	2353      	movs	r3, #83	; 0x53
   15f96:	aa02      	add	r2, sp, #8
   15f98:	3020      	adds	r0, #32
   15f9a:	189b      	adds	r3, r3, r2
   15f9c:	7018      	strb	r0, [r3, #0]
   15f9e:	070b      	lsls	r3, r1, #28
   15fa0:	d504      	bpl.n	15fac <_vfiprintf_r+0xbc>
   15fa2:	2353      	movs	r3, #83	; 0x53
   15fa4:	202b      	movs	r0, #43	; 0x2b
   15fa6:	aa02      	add	r2, sp, #8
   15fa8:	189b      	adds	r3, r3, r2
   15faa:	7018      	strb	r0, [r3, #0]
   15fac:	7823      	ldrb	r3, [r4, #0]
   15fae:	2b2a      	cmp	r3, #42	; 0x2a
   15fb0:	d02c      	beq.n	1600c <_vfiprintf_r+0x11c>
   15fb2:	2000      	movs	r0, #0
   15fb4:	210a      	movs	r1, #10
   15fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15fb8:	7822      	ldrb	r2, [r4, #0]
   15fba:	3a30      	subs	r2, #48	; 0x30
   15fbc:	2a09      	cmp	r2, #9
   15fbe:	d800      	bhi.n	15fc2 <_vfiprintf_r+0xd2>
   15fc0:	e06b      	b.n	1609a <_vfiprintf_r+0x1aa>
   15fc2:	2800      	cmp	r0, #0
   15fc4:	d02a      	beq.n	1601c <_vfiprintf_r+0x12c>
   15fc6:	9309      	str	r3, [sp, #36]	; 0x24
   15fc8:	e028      	b.n	1601c <_vfiprintf_r+0x12c>
   15fca:	4b51      	ldr	r3, [pc, #324]	; (16110 <_vfiprintf_r+0x220>)
   15fcc:	429f      	cmp	r7, r3
   15fce:	d101      	bne.n	15fd4 <_vfiprintf_r+0xe4>
   15fd0:	68b7      	ldr	r7, [r6, #8]
   15fd2:	e79e      	b.n	15f12 <_vfiprintf_r+0x22>
   15fd4:	4b4f      	ldr	r3, [pc, #316]	; (16114 <_vfiprintf_r+0x224>)
   15fd6:	429f      	cmp	r7, r3
   15fd8:	d19b      	bne.n	15f12 <_vfiprintf_r+0x22>
   15fda:	68f7      	ldr	r7, [r6, #12]
   15fdc:	e799      	b.n	15f12 <_vfiprintf_r+0x22>
   15fde:	0039      	movs	r1, r7
   15fe0:	0030      	movs	r0, r6
   15fe2:	f7fe fa11 	bl	14408 <__swsetup_r>
   15fe6:	2800      	cmp	r0, #0
   15fe8:	d099      	beq.n	15f1e <_vfiprintf_r+0x2e>
   15fea:	2001      	movs	r0, #1
   15fec:	4240      	negs	r0, r0
   15fee:	b01f      	add	sp, #124	; 0x7c
   15ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ff2:	2b25      	cmp	r3, #37	; 0x25
   15ff4:	d09f      	beq.n	15f36 <_vfiprintf_r+0x46>
   15ff6:	3401      	adds	r4, #1
   15ff8:	e79a      	b.n	15f30 <_vfiprintf_r+0x40>
   15ffa:	4b44      	ldr	r3, [pc, #272]	; (1610c <_vfiprintf_r+0x21c>)
   15ffc:	6829      	ldr	r1, [r5, #0]
   15ffe:	1ac0      	subs	r0, r0, r3
   16000:	2301      	movs	r3, #1
   16002:	4083      	lsls	r3, r0
   16004:	430b      	orrs	r3, r1
   16006:	602b      	str	r3, [r5, #0]
   16008:	4664      	mov	r4, ip
   1600a:	e7b7      	b.n	15f7c <_vfiprintf_r+0x8c>
   1600c:	9b05      	ldr	r3, [sp, #20]
   1600e:	1d18      	adds	r0, r3, #4
   16010:	681b      	ldr	r3, [r3, #0]
   16012:	9005      	str	r0, [sp, #20]
   16014:	2b00      	cmp	r3, #0
   16016:	db3a      	blt.n	1608e <_vfiprintf_r+0x19e>
   16018:	9309      	str	r3, [sp, #36]	; 0x24
   1601a:	4664      	mov	r4, ip
   1601c:	7823      	ldrb	r3, [r4, #0]
   1601e:	2b2e      	cmp	r3, #46	; 0x2e
   16020:	d10b      	bne.n	1603a <_vfiprintf_r+0x14a>
   16022:	7863      	ldrb	r3, [r4, #1]
   16024:	1c62      	adds	r2, r4, #1
   16026:	2b2a      	cmp	r3, #42	; 0x2a
   16028:	d13f      	bne.n	160aa <_vfiprintf_r+0x1ba>
   1602a:	9b05      	ldr	r3, [sp, #20]
   1602c:	3402      	adds	r4, #2
   1602e:	1d1a      	adds	r2, r3, #4
   16030:	681b      	ldr	r3, [r3, #0]
   16032:	9205      	str	r2, [sp, #20]
   16034:	2b00      	cmp	r3, #0
   16036:	db35      	blt.n	160a4 <_vfiprintf_r+0x1b4>
   16038:	9307      	str	r3, [sp, #28]
   1603a:	7821      	ldrb	r1, [r4, #0]
   1603c:	2203      	movs	r2, #3
   1603e:	4836      	ldr	r0, [pc, #216]	; (16118 <_vfiprintf_r+0x228>)
   16040:	f7ff faca 	bl	155d8 <memchr>
   16044:	2800      	cmp	r0, #0
   16046:	d007      	beq.n	16058 <_vfiprintf_r+0x168>
   16048:	4b33      	ldr	r3, [pc, #204]	; (16118 <_vfiprintf_r+0x228>)
   1604a:	682a      	ldr	r2, [r5, #0]
   1604c:	1ac0      	subs	r0, r0, r3
   1604e:	2340      	movs	r3, #64	; 0x40
   16050:	4083      	lsls	r3, r0
   16052:	4313      	orrs	r3, r2
   16054:	602b      	str	r3, [r5, #0]
   16056:	3401      	adds	r4, #1
   16058:	7821      	ldrb	r1, [r4, #0]
   1605a:	1c63      	adds	r3, r4, #1
   1605c:	2206      	movs	r2, #6
   1605e:	482f      	ldr	r0, [pc, #188]	; (1611c <_vfiprintf_r+0x22c>)
   16060:	9302      	str	r3, [sp, #8]
   16062:	7629      	strb	r1, [r5, #24]
   16064:	f7ff fab8 	bl	155d8 <memchr>
   16068:	2800      	cmp	r0, #0
   1606a:	d044      	beq.n	160f6 <_vfiprintf_r+0x206>
   1606c:	4b2c      	ldr	r3, [pc, #176]	; (16120 <_vfiprintf_r+0x230>)
   1606e:	2b00      	cmp	r3, #0
   16070:	d12f      	bne.n	160d2 <_vfiprintf_r+0x1e2>
   16072:	6829      	ldr	r1, [r5, #0]
   16074:	9b05      	ldr	r3, [sp, #20]
   16076:	2207      	movs	r2, #7
   16078:	05c9      	lsls	r1, r1, #23
   1607a:	d528      	bpl.n	160ce <_vfiprintf_r+0x1de>
   1607c:	189b      	adds	r3, r3, r2
   1607e:	4393      	bics	r3, r2
   16080:	3308      	adds	r3, #8
   16082:	9305      	str	r3, [sp, #20]
   16084:	696b      	ldr	r3, [r5, #20]
   16086:	9a03      	ldr	r2, [sp, #12]
   16088:	189b      	adds	r3, r3, r2
   1608a:	616b      	str	r3, [r5, #20]
   1608c:	e74f      	b.n	15f2e <_vfiprintf_r+0x3e>
   1608e:	425b      	negs	r3, r3
   16090:	60eb      	str	r3, [r5, #12]
   16092:	2302      	movs	r3, #2
   16094:	430b      	orrs	r3, r1
   16096:	602b      	str	r3, [r5, #0]
   16098:	e7bf      	b.n	1601a <_vfiprintf_r+0x12a>
   1609a:	434b      	muls	r3, r1
   1609c:	3401      	adds	r4, #1
   1609e:	189b      	adds	r3, r3, r2
   160a0:	2001      	movs	r0, #1
   160a2:	e789      	b.n	15fb8 <_vfiprintf_r+0xc8>
   160a4:	2301      	movs	r3, #1
   160a6:	425b      	negs	r3, r3
   160a8:	e7c6      	b.n	16038 <_vfiprintf_r+0x148>
   160aa:	2300      	movs	r3, #0
   160ac:	0014      	movs	r4, r2
   160ae:	200a      	movs	r0, #10
   160b0:	001a      	movs	r2, r3
   160b2:	606b      	str	r3, [r5, #4]
   160b4:	7821      	ldrb	r1, [r4, #0]
   160b6:	3930      	subs	r1, #48	; 0x30
   160b8:	2909      	cmp	r1, #9
   160ba:	d903      	bls.n	160c4 <_vfiprintf_r+0x1d4>
   160bc:	2b00      	cmp	r3, #0
   160be:	d0bc      	beq.n	1603a <_vfiprintf_r+0x14a>
   160c0:	9207      	str	r2, [sp, #28]
   160c2:	e7ba      	b.n	1603a <_vfiprintf_r+0x14a>
   160c4:	4342      	muls	r2, r0
   160c6:	3401      	adds	r4, #1
   160c8:	1852      	adds	r2, r2, r1
   160ca:	2301      	movs	r3, #1
   160cc:	e7f2      	b.n	160b4 <_vfiprintf_r+0x1c4>
   160ce:	3307      	adds	r3, #7
   160d0:	e7d5      	b.n	1607e <_vfiprintf_r+0x18e>
   160d2:	ab05      	add	r3, sp, #20
   160d4:	9300      	str	r3, [sp, #0]
   160d6:	003a      	movs	r2, r7
   160d8:	4b12      	ldr	r3, [pc, #72]	; (16124 <_vfiprintf_r+0x234>)
   160da:	0029      	movs	r1, r5
   160dc:	0030      	movs	r0, r6
   160de:	f7fd fae1 	bl	136a4 <_printf_float>
   160e2:	9003      	str	r0, [sp, #12]
   160e4:	9b03      	ldr	r3, [sp, #12]
   160e6:	3301      	adds	r3, #1
   160e8:	d1cc      	bne.n	16084 <_vfiprintf_r+0x194>
   160ea:	89bb      	ldrh	r3, [r7, #12]
   160ec:	065b      	lsls	r3, r3, #25
   160ee:	d500      	bpl.n	160f2 <_vfiprintf_r+0x202>
   160f0:	e77b      	b.n	15fea <_vfiprintf_r+0xfa>
   160f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   160f4:	e77b      	b.n	15fee <_vfiprintf_r+0xfe>
   160f6:	ab05      	add	r3, sp, #20
   160f8:	9300      	str	r3, [sp, #0]
   160fa:	003a      	movs	r2, r7
   160fc:	4b09      	ldr	r3, [pc, #36]	; (16124 <_vfiprintf_r+0x234>)
   160fe:	0029      	movs	r1, r5
   16100:	0030      	movs	r0, r6
   16102:	f7fd fd89 	bl	13c18 <_printf_i>
   16106:	e7ec      	b.n	160e2 <_vfiprintf_r+0x1f2>
   16108:	0001b02c 	.word	0x0001b02c
   1610c:	0001b16c 	.word	0x0001b16c
   16110:	0001b04c 	.word	0x0001b04c
   16114:	0001b00c 	.word	0x0001b00c
   16118:	0001b172 	.word	0x0001b172
   1611c:	0001b176 	.word	0x0001b176
   16120:	000136a5 	.word	0x000136a5
   16124:	00015ecb 	.word	0x00015ecb

00016128 <_putc_r>:
   16128:	b570      	push	{r4, r5, r6, lr}
   1612a:	0006      	movs	r6, r0
   1612c:	000d      	movs	r5, r1
   1612e:	0014      	movs	r4, r2
   16130:	2800      	cmp	r0, #0
   16132:	d004      	beq.n	1613e <_putc_r+0x16>
   16134:	6983      	ldr	r3, [r0, #24]
   16136:	2b00      	cmp	r3, #0
   16138:	d101      	bne.n	1613e <_putc_r+0x16>
   1613a:	f7ff f93f 	bl	153bc <__sinit>
   1613e:	4b12      	ldr	r3, [pc, #72]	; (16188 <_putc_r+0x60>)
   16140:	429c      	cmp	r4, r3
   16142:	d111      	bne.n	16168 <_putc_r+0x40>
   16144:	6874      	ldr	r4, [r6, #4]
   16146:	68a3      	ldr	r3, [r4, #8]
   16148:	3b01      	subs	r3, #1
   1614a:	60a3      	str	r3, [r4, #8]
   1614c:	2b00      	cmp	r3, #0
   1614e:	da05      	bge.n	1615c <_putc_r+0x34>
   16150:	69a2      	ldr	r2, [r4, #24]
   16152:	4293      	cmp	r3, r2
   16154:	db12      	blt.n	1617c <_putc_r+0x54>
   16156:	b2eb      	uxtb	r3, r5
   16158:	2b0a      	cmp	r3, #10
   1615a:	d00f      	beq.n	1617c <_putc_r+0x54>
   1615c:	6823      	ldr	r3, [r4, #0]
   1615e:	b2e8      	uxtb	r0, r5
   16160:	1c5a      	adds	r2, r3, #1
   16162:	6022      	str	r2, [r4, #0]
   16164:	701d      	strb	r5, [r3, #0]
   16166:	bd70      	pop	{r4, r5, r6, pc}
   16168:	4b08      	ldr	r3, [pc, #32]	; (1618c <_putc_r+0x64>)
   1616a:	429c      	cmp	r4, r3
   1616c:	d101      	bne.n	16172 <_putc_r+0x4a>
   1616e:	68b4      	ldr	r4, [r6, #8]
   16170:	e7e9      	b.n	16146 <_putc_r+0x1e>
   16172:	4b07      	ldr	r3, [pc, #28]	; (16190 <_putc_r+0x68>)
   16174:	429c      	cmp	r4, r3
   16176:	d1e6      	bne.n	16146 <_putc_r+0x1e>
   16178:	68f4      	ldr	r4, [r6, #12]
   1617a:	e7e4      	b.n	16146 <_putc_r+0x1e>
   1617c:	0022      	movs	r2, r4
   1617e:	0029      	movs	r1, r5
   16180:	0030      	movs	r0, r6
   16182:	f7fe f8df 	bl	14344 <__swbuf_r>
   16186:	e7ee      	b.n	16166 <_putc_r+0x3e>
   16188:	0001b02c 	.word	0x0001b02c
   1618c:	0001b04c 	.word	0x0001b04c
   16190:	0001b00c 	.word	0x0001b00c

00016194 <__sread>:
   16194:	b570      	push	{r4, r5, r6, lr}
   16196:	000c      	movs	r4, r1
   16198:	250e      	movs	r5, #14
   1619a:	5f49      	ldrsh	r1, [r1, r5]
   1619c:	f000 f8ca 	bl	16334 <_read_r>
   161a0:	2800      	cmp	r0, #0
   161a2:	db03      	blt.n	161ac <__sread+0x18>
   161a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   161a6:	181b      	adds	r3, r3, r0
   161a8:	6563      	str	r3, [r4, #84]	; 0x54
   161aa:	bd70      	pop	{r4, r5, r6, pc}
   161ac:	89a3      	ldrh	r3, [r4, #12]
   161ae:	4a02      	ldr	r2, [pc, #8]	; (161b8 <__sread+0x24>)
   161b0:	4013      	ands	r3, r2
   161b2:	81a3      	strh	r3, [r4, #12]
   161b4:	e7f9      	b.n	161aa <__sread+0x16>
   161b6:	46c0      	nop			; (mov r8, r8)
   161b8:	ffffefff 	.word	0xffffefff

000161bc <__swrite>:
   161bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   161be:	001f      	movs	r7, r3
   161c0:	898b      	ldrh	r3, [r1, #12]
   161c2:	0005      	movs	r5, r0
   161c4:	000c      	movs	r4, r1
   161c6:	0016      	movs	r6, r2
   161c8:	05db      	lsls	r3, r3, #23
   161ca:	d505      	bpl.n	161d8 <__swrite+0x1c>
   161cc:	230e      	movs	r3, #14
   161ce:	5ec9      	ldrsh	r1, [r1, r3]
   161d0:	2200      	movs	r2, #0
   161d2:	2302      	movs	r3, #2
   161d4:	f000 f874 	bl	162c0 <_lseek_r>
   161d8:	89a3      	ldrh	r3, [r4, #12]
   161da:	4a05      	ldr	r2, [pc, #20]	; (161f0 <__swrite+0x34>)
   161dc:	0028      	movs	r0, r5
   161de:	4013      	ands	r3, r2
   161e0:	81a3      	strh	r3, [r4, #12]
   161e2:	0032      	movs	r2, r6
   161e4:	230e      	movs	r3, #14
   161e6:	5ee1      	ldrsh	r1, [r4, r3]
   161e8:	003b      	movs	r3, r7
   161ea:	f000 f81f 	bl	1622c <_write_r>
   161ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   161f0:	ffffefff 	.word	0xffffefff

000161f4 <__sseek>:
   161f4:	b570      	push	{r4, r5, r6, lr}
   161f6:	000c      	movs	r4, r1
   161f8:	250e      	movs	r5, #14
   161fa:	5f49      	ldrsh	r1, [r1, r5]
   161fc:	f000 f860 	bl	162c0 <_lseek_r>
   16200:	89a3      	ldrh	r3, [r4, #12]
   16202:	1c42      	adds	r2, r0, #1
   16204:	d103      	bne.n	1620e <__sseek+0x1a>
   16206:	4a05      	ldr	r2, [pc, #20]	; (1621c <__sseek+0x28>)
   16208:	4013      	ands	r3, r2
   1620a:	81a3      	strh	r3, [r4, #12]
   1620c:	bd70      	pop	{r4, r5, r6, pc}
   1620e:	2280      	movs	r2, #128	; 0x80
   16210:	0152      	lsls	r2, r2, #5
   16212:	4313      	orrs	r3, r2
   16214:	81a3      	strh	r3, [r4, #12]
   16216:	6560      	str	r0, [r4, #84]	; 0x54
   16218:	e7f8      	b.n	1620c <__sseek+0x18>
   1621a:	46c0      	nop			; (mov r8, r8)
   1621c:	ffffefff 	.word	0xffffefff

00016220 <__sclose>:
   16220:	b510      	push	{r4, lr}
   16222:	230e      	movs	r3, #14
   16224:	5ec9      	ldrsh	r1, [r1, r3]
   16226:	f000 f815 	bl	16254 <_close_r>
   1622a:	bd10      	pop	{r4, pc}

0001622c <_write_r>:
   1622c:	b570      	push	{r4, r5, r6, lr}
   1622e:	0005      	movs	r5, r0
   16230:	0008      	movs	r0, r1
   16232:	0011      	movs	r1, r2
   16234:	2200      	movs	r2, #0
   16236:	4c06      	ldr	r4, [pc, #24]	; (16250 <_write_r+0x24>)
   16238:	6022      	str	r2, [r4, #0]
   1623a:	001a      	movs	r2, r3
   1623c:	f7f9 fc8c 	bl	fb58 <_write>
   16240:	1c43      	adds	r3, r0, #1
   16242:	d103      	bne.n	1624c <_write_r+0x20>
   16244:	6823      	ldr	r3, [r4, #0]
   16246:	2b00      	cmp	r3, #0
   16248:	d000      	beq.n	1624c <_write_r+0x20>
   1624a:	602b      	str	r3, [r5, #0]
   1624c:	bd70      	pop	{r4, r5, r6, pc}
   1624e:	46c0      	nop			; (mov r8, r8)
   16250:	2000091c 	.word	0x2000091c

00016254 <_close_r>:
   16254:	2300      	movs	r3, #0
   16256:	b570      	push	{r4, r5, r6, lr}
   16258:	4c06      	ldr	r4, [pc, #24]	; (16274 <_close_r+0x20>)
   1625a:	0005      	movs	r5, r0
   1625c:	0008      	movs	r0, r1
   1625e:	6023      	str	r3, [r4, #0]
   16260:	f7fb fc96 	bl	11b90 <_close>
   16264:	1c43      	adds	r3, r0, #1
   16266:	d103      	bne.n	16270 <_close_r+0x1c>
   16268:	6823      	ldr	r3, [r4, #0]
   1626a:	2b00      	cmp	r3, #0
   1626c:	d000      	beq.n	16270 <_close_r+0x1c>
   1626e:	602b      	str	r3, [r5, #0]
   16270:	bd70      	pop	{r4, r5, r6, pc}
   16272:	46c0      	nop			; (mov r8, r8)
   16274:	2000091c 	.word	0x2000091c

00016278 <_fstat_r>:
   16278:	2300      	movs	r3, #0
   1627a:	b570      	push	{r4, r5, r6, lr}
   1627c:	4c06      	ldr	r4, [pc, #24]	; (16298 <_fstat_r+0x20>)
   1627e:	0005      	movs	r5, r0
   16280:	0008      	movs	r0, r1
   16282:	0011      	movs	r1, r2
   16284:	6023      	str	r3, [r4, #0]
   16286:	f7fb fc8d 	bl	11ba4 <_fstat>
   1628a:	1c43      	adds	r3, r0, #1
   1628c:	d103      	bne.n	16296 <_fstat_r+0x1e>
   1628e:	6823      	ldr	r3, [r4, #0]
   16290:	2b00      	cmp	r3, #0
   16292:	d000      	beq.n	16296 <_fstat_r+0x1e>
   16294:	602b      	str	r3, [r5, #0]
   16296:	bd70      	pop	{r4, r5, r6, pc}
   16298:	2000091c 	.word	0x2000091c

0001629c <_isatty_r>:
   1629c:	2300      	movs	r3, #0
   1629e:	b570      	push	{r4, r5, r6, lr}
   162a0:	4c06      	ldr	r4, [pc, #24]	; (162bc <_isatty_r+0x20>)
   162a2:	0005      	movs	r5, r0
   162a4:	0008      	movs	r0, r1
   162a6:	6023      	str	r3, [r4, #0]
   162a8:	f7fb fc8a 	bl	11bc0 <_isatty>
   162ac:	1c43      	adds	r3, r0, #1
   162ae:	d103      	bne.n	162b8 <_isatty_r+0x1c>
   162b0:	6823      	ldr	r3, [r4, #0]
   162b2:	2b00      	cmp	r3, #0
   162b4:	d000      	beq.n	162b8 <_isatty_r+0x1c>
   162b6:	602b      	str	r3, [r5, #0]
   162b8:	bd70      	pop	{r4, r5, r6, pc}
   162ba:	46c0      	nop			; (mov r8, r8)
   162bc:	2000091c 	.word	0x2000091c

000162c0 <_lseek_r>:
   162c0:	b570      	push	{r4, r5, r6, lr}
   162c2:	0005      	movs	r5, r0
   162c4:	0008      	movs	r0, r1
   162c6:	0011      	movs	r1, r2
   162c8:	2200      	movs	r2, #0
   162ca:	4c06      	ldr	r4, [pc, #24]	; (162e4 <_lseek_r+0x24>)
   162cc:	6022      	str	r2, [r4, #0]
   162ce:	001a      	movs	r2, r3
   162d0:	f7fb fc7f 	bl	11bd2 <_lseek>
   162d4:	1c43      	adds	r3, r0, #1
   162d6:	d103      	bne.n	162e0 <_lseek_r+0x20>
   162d8:	6823      	ldr	r3, [r4, #0]
   162da:	2b00      	cmp	r3, #0
   162dc:	d000      	beq.n	162e0 <_lseek_r+0x20>
   162de:	602b      	str	r3, [r5, #0]
   162e0:	bd70      	pop	{r4, r5, r6, pc}
   162e2:	46c0      	nop			; (mov r8, r8)
   162e4:	2000091c 	.word	0x2000091c

000162e8 <_realloc_r>:
   162e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   162ea:	0007      	movs	r7, r0
   162ec:	000d      	movs	r5, r1
   162ee:	0016      	movs	r6, r2
   162f0:	2900      	cmp	r1, #0
   162f2:	d105      	bne.n	16300 <_realloc_r+0x18>
   162f4:	0011      	movs	r1, r2
   162f6:	f7fd f8db 	bl	134b0 <_malloc_r>
   162fa:	0004      	movs	r4, r0
   162fc:	0020      	movs	r0, r4
   162fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16300:	2a00      	cmp	r2, #0
   16302:	d103      	bne.n	1630c <_realloc_r+0x24>
   16304:	f7fd f88a 	bl	1341c <_free_r>
   16308:	0034      	movs	r4, r6
   1630a:	e7f7      	b.n	162fc <_realloc_r+0x14>
   1630c:	f000 f826 	bl	1635c <_malloc_usable_size_r>
   16310:	002c      	movs	r4, r5
   16312:	4286      	cmp	r6, r0
   16314:	d9f2      	bls.n	162fc <_realloc_r+0x14>
   16316:	0031      	movs	r1, r6
   16318:	0038      	movs	r0, r7
   1631a:	f7fd f8c9 	bl	134b0 <_malloc_r>
   1631e:	1e04      	subs	r4, r0, #0
   16320:	d0ec      	beq.n	162fc <_realloc_r+0x14>
   16322:	0029      	movs	r1, r5
   16324:	0032      	movs	r2, r6
   16326:	f7fd f855 	bl	133d4 <memcpy>
   1632a:	0029      	movs	r1, r5
   1632c:	0038      	movs	r0, r7
   1632e:	f7fd f875 	bl	1341c <_free_r>
   16332:	e7e3      	b.n	162fc <_realloc_r+0x14>

00016334 <_read_r>:
   16334:	b570      	push	{r4, r5, r6, lr}
   16336:	0005      	movs	r5, r0
   16338:	0008      	movs	r0, r1
   1633a:	0011      	movs	r1, r2
   1633c:	2200      	movs	r2, #0
   1633e:	4c06      	ldr	r4, [pc, #24]	; (16358 <_read_r+0x24>)
   16340:	6022      	str	r2, [r4, #0]
   16342:	001a      	movs	r2, r3
   16344:	f7f9 fbde 	bl	fb04 <_read>
   16348:	1c43      	adds	r3, r0, #1
   1634a:	d103      	bne.n	16354 <_read_r+0x20>
   1634c:	6823      	ldr	r3, [r4, #0]
   1634e:	2b00      	cmp	r3, #0
   16350:	d000      	beq.n	16354 <_read_r+0x20>
   16352:	602b      	str	r3, [r5, #0]
   16354:	bd70      	pop	{r4, r5, r6, pc}
   16356:	46c0      	nop			; (mov r8, r8)
   16358:	2000091c 	.word	0x2000091c

0001635c <_malloc_usable_size_r>:
   1635c:	1f0b      	subs	r3, r1, #4
   1635e:	681b      	ldr	r3, [r3, #0]
   16360:	1f18      	subs	r0, r3, #4
   16362:	2b00      	cmp	r3, #0
   16364:	da01      	bge.n	1636a <_malloc_usable_size_r+0xe>
   16366:	580b      	ldr	r3, [r1, r0]
   16368:	18c0      	adds	r0, r0, r3
   1636a:	4770      	bx	lr

0001636c <__gnu_thumb1_case_uqi>:
   1636c:	b402      	push	{r1}
   1636e:	4671      	mov	r1, lr
   16370:	0849      	lsrs	r1, r1, #1
   16372:	0049      	lsls	r1, r1, #1
   16374:	5c09      	ldrb	r1, [r1, r0]
   16376:	0049      	lsls	r1, r1, #1
   16378:	448e      	add	lr, r1
   1637a:	bc02      	pop	{r1}
   1637c:	4770      	bx	lr
   1637e:	46c0      	nop			; (mov r8, r8)

00016380 <__udivsi3>:
   16380:	2200      	movs	r2, #0
   16382:	0843      	lsrs	r3, r0, #1
   16384:	428b      	cmp	r3, r1
   16386:	d374      	bcc.n	16472 <__udivsi3+0xf2>
   16388:	0903      	lsrs	r3, r0, #4
   1638a:	428b      	cmp	r3, r1
   1638c:	d35f      	bcc.n	1644e <__udivsi3+0xce>
   1638e:	0a03      	lsrs	r3, r0, #8
   16390:	428b      	cmp	r3, r1
   16392:	d344      	bcc.n	1641e <__udivsi3+0x9e>
   16394:	0b03      	lsrs	r3, r0, #12
   16396:	428b      	cmp	r3, r1
   16398:	d328      	bcc.n	163ec <__udivsi3+0x6c>
   1639a:	0c03      	lsrs	r3, r0, #16
   1639c:	428b      	cmp	r3, r1
   1639e:	d30d      	bcc.n	163bc <__udivsi3+0x3c>
   163a0:	22ff      	movs	r2, #255	; 0xff
   163a2:	0209      	lsls	r1, r1, #8
   163a4:	ba12      	rev	r2, r2
   163a6:	0c03      	lsrs	r3, r0, #16
   163a8:	428b      	cmp	r3, r1
   163aa:	d302      	bcc.n	163b2 <__udivsi3+0x32>
   163ac:	1212      	asrs	r2, r2, #8
   163ae:	0209      	lsls	r1, r1, #8
   163b0:	d065      	beq.n	1647e <__udivsi3+0xfe>
   163b2:	0b03      	lsrs	r3, r0, #12
   163b4:	428b      	cmp	r3, r1
   163b6:	d319      	bcc.n	163ec <__udivsi3+0x6c>
   163b8:	e000      	b.n	163bc <__udivsi3+0x3c>
   163ba:	0a09      	lsrs	r1, r1, #8
   163bc:	0bc3      	lsrs	r3, r0, #15
   163be:	428b      	cmp	r3, r1
   163c0:	d301      	bcc.n	163c6 <__udivsi3+0x46>
   163c2:	03cb      	lsls	r3, r1, #15
   163c4:	1ac0      	subs	r0, r0, r3
   163c6:	4152      	adcs	r2, r2
   163c8:	0b83      	lsrs	r3, r0, #14
   163ca:	428b      	cmp	r3, r1
   163cc:	d301      	bcc.n	163d2 <__udivsi3+0x52>
   163ce:	038b      	lsls	r3, r1, #14
   163d0:	1ac0      	subs	r0, r0, r3
   163d2:	4152      	adcs	r2, r2
   163d4:	0b43      	lsrs	r3, r0, #13
   163d6:	428b      	cmp	r3, r1
   163d8:	d301      	bcc.n	163de <__udivsi3+0x5e>
   163da:	034b      	lsls	r3, r1, #13
   163dc:	1ac0      	subs	r0, r0, r3
   163de:	4152      	adcs	r2, r2
   163e0:	0b03      	lsrs	r3, r0, #12
   163e2:	428b      	cmp	r3, r1
   163e4:	d301      	bcc.n	163ea <__udivsi3+0x6a>
   163e6:	030b      	lsls	r3, r1, #12
   163e8:	1ac0      	subs	r0, r0, r3
   163ea:	4152      	adcs	r2, r2
   163ec:	0ac3      	lsrs	r3, r0, #11
   163ee:	428b      	cmp	r3, r1
   163f0:	d301      	bcc.n	163f6 <__udivsi3+0x76>
   163f2:	02cb      	lsls	r3, r1, #11
   163f4:	1ac0      	subs	r0, r0, r3
   163f6:	4152      	adcs	r2, r2
   163f8:	0a83      	lsrs	r3, r0, #10
   163fa:	428b      	cmp	r3, r1
   163fc:	d301      	bcc.n	16402 <__udivsi3+0x82>
   163fe:	028b      	lsls	r3, r1, #10
   16400:	1ac0      	subs	r0, r0, r3
   16402:	4152      	adcs	r2, r2
   16404:	0a43      	lsrs	r3, r0, #9
   16406:	428b      	cmp	r3, r1
   16408:	d301      	bcc.n	1640e <__udivsi3+0x8e>
   1640a:	024b      	lsls	r3, r1, #9
   1640c:	1ac0      	subs	r0, r0, r3
   1640e:	4152      	adcs	r2, r2
   16410:	0a03      	lsrs	r3, r0, #8
   16412:	428b      	cmp	r3, r1
   16414:	d301      	bcc.n	1641a <__udivsi3+0x9a>
   16416:	020b      	lsls	r3, r1, #8
   16418:	1ac0      	subs	r0, r0, r3
   1641a:	4152      	adcs	r2, r2
   1641c:	d2cd      	bcs.n	163ba <__udivsi3+0x3a>
   1641e:	09c3      	lsrs	r3, r0, #7
   16420:	428b      	cmp	r3, r1
   16422:	d301      	bcc.n	16428 <__udivsi3+0xa8>
   16424:	01cb      	lsls	r3, r1, #7
   16426:	1ac0      	subs	r0, r0, r3
   16428:	4152      	adcs	r2, r2
   1642a:	0983      	lsrs	r3, r0, #6
   1642c:	428b      	cmp	r3, r1
   1642e:	d301      	bcc.n	16434 <__udivsi3+0xb4>
   16430:	018b      	lsls	r3, r1, #6
   16432:	1ac0      	subs	r0, r0, r3
   16434:	4152      	adcs	r2, r2
   16436:	0943      	lsrs	r3, r0, #5
   16438:	428b      	cmp	r3, r1
   1643a:	d301      	bcc.n	16440 <__udivsi3+0xc0>
   1643c:	014b      	lsls	r3, r1, #5
   1643e:	1ac0      	subs	r0, r0, r3
   16440:	4152      	adcs	r2, r2
   16442:	0903      	lsrs	r3, r0, #4
   16444:	428b      	cmp	r3, r1
   16446:	d301      	bcc.n	1644c <__udivsi3+0xcc>
   16448:	010b      	lsls	r3, r1, #4
   1644a:	1ac0      	subs	r0, r0, r3
   1644c:	4152      	adcs	r2, r2
   1644e:	08c3      	lsrs	r3, r0, #3
   16450:	428b      	cmp	r3, r1
   16452:	d301      	bcc.n	16458 <__udivsi3+0xd8>
   16454:	00cb      	lsls	r3, r1, #3
   16456:	1ac0      	subs	r0, r0, r3
   16458:	4152      	adcs	r2, r2
   1645a:	0883      	lsrs	r3, r0, #2
   1645c:	428b      	cmp	r3, r1
   1645e:	d301      	bcc.n	16464 <__udivsi3+0xe4>
   16460:	008b      	lsls	r3, r1, #2
   16462:	1ac0      	subs	r0, r0, r3
   16464:	4152      	adcs	r2, r2
   16466:	0843      	lsrs	r3, r0, #1
   16468:	428b      	cmp	r3, r1
   1646a:	d301      	bcc.n	16470 <__udivsi3+0xf0>
   1646c:	004b      	lsls	r3, r1, #1
   1646e:	1ac0      	subs	r0, r0, r3
   16470:	4152      	adcs	r2, r2
   16472:	1a41      	subs	r1, r0, r1
   16474:	d200      	bcs.n	16478 <__udivsi3+0xf8>
   16476:	4601      	mov	r1, r0
   16478:	4152      	adcs	r2, r2
   1647a:	4610      	mov	r0, r2
   1647c:	4770      	bx	lr
   1647e:	e7ff      	b.n	16480 <__udivsi3+0x100>
   16480:	b501      	push	{r0, lr}
   16482:	2000      	movs	r0, #0
   16484:	f000 f8f0 	bl	16668 <__aeabi_idiv0>
   16488:	bd02      	pop	{r1, pc}
   1648a:	46c0      	nop			; (mov r8, r8)

0001648c <__aeabi_uidivmod>:
   1648c:	2900      	cmp	r1, #0
   1648e:	d0f7      	beq.n	16480 <__udivsi3+0x100>
   16490:	e776      	b.n	16380 <__udivsi3>
   16492:	4770      	bx	lr

00016494 <__divsi3>:
   16494:	4603      	mov	r3, r0
   16496:	430b      	orrs	r3, r1
   16498:	d47f      	bmi.n	1659a <__divsi3+0x106>
   1649a:	2200      	movs	r2, #0
   1649c:	0843      	lsrs	r3, r0, #1
   1649e:	428b      	cmp	r3, r1
   164a0:	d374      	bcc.n	1658c <__divsi3+0xf8>
   164a2:	0903      	lsrs	r3, r0, #4
   164a4:	428b      	cmp	r3, r1
   164a6:	d35f      	bcc.n	16568 <__divsi3+0xd4>
   164a8:	0a03      	lsrs	r3, r0, #8
   164aa:	428b      	cmp	r3, r1
   164ac:	d344      	bcc.n	16538 <__divsi3+0xa4>
   164ae:	0b03      	lsrs	r3, r0, #12
   164b0:	428b      	cmp	r3, r1
   164b2:	d328      	bcc.n	16506 <__divsi3+0x72>
   164b4:	0c03      	lsrs	r3, r0, #16
   164b6:	428b      	cmp	r3, r1
   164b8:	d30d      	bcc.n	164d6 <__divsi3+0x42>
   164ba:	22ff      	movs	r2, #255	; 0xff
   164bc:	0209      	lsls	r1, r1, #8
   164be:	ba12      	rev	r2, r2
   164c0:	0c03      	lsrs	r3, r0, #16
   164c2:	428b      	cmp	r3, r1
   164c4:	d302      	bcc.n	164cc <__divsi3+0x38>
   164c6:	1212      	asrs	r2, r2, #8
   164c8:	0209      	lsls	r1, r1, #8
   164ca:	d065      	beq.n	16598 <__divsi3+0x104>
   164cc:	0b03      	lsrs	r3, r0, #12
   164ce:	428b      	cmp	r3, r1
   164d0:	d319      	bcc.n	16506 <__divsi3+0x72>
   164d2:	e000      	b.n	164d6 <__divsi3+0x42>
   164d4:	0a09      	lsrs	r1, r1, #8
   164d6:	0bc3      	lsrs	r3, r0, #15
   164d8:	428b      	cmp	r3, r1
   164da:	d301      	bcc.n	164e0 <__divsi3+0x4c>
   164dc:	03cb      	lsls	r3, r1, #15
   164de:	1ac0      	subs	r0, r0, r3
   164e0:	4152      	adcs	r2, r2
   164e2:	0b83      	lsrs	r3, r0, #14
   164e4:	428b      	cmp	r3, r1
   164e6:	d301      	bcc.n	164ec <__divsi3+0x58>
   164e8:	038b      	lsls	r3, r1, #14
   164ea:	1ac0      	subs	r0, r0, r3
   164ec:	4152      	adcs	r2, r2
   164ee:	0b43      	lsrs	r3, r0, #13
   164f0:	428b      	cmp	r3, r1
   164f2:	d301      	bcc.n	164f8 <__divsi3+0x64>
   164f4:	034b      	lsls	r3, r1, #13
   164f6:	1ac0      	subs	r0, r0, r3
   164f8:	4152      	adcs	r2, r2
   164fa:	0b03      	lsrs	r3, r0, #12
   164fc:	428b      	cmp	r3, r1
   164fe:	d301      	bcc.n	16504 <__divsi3+0x70>
   16500:	030b      	lsls	r3, r1, #12
   16502:	1ac0      	subs	r0, r0, r3
   16504:	4152      	adcs	r2, r2
   16506:	0ac3      	lsrs	r3, r0, #11
   16508:	428b      	cmp	r3, r1
   1650a:	d301      	bcc.n	16510 <__divsi3+0x7c>
   1650c:	02cb      	lsls	r3, r1, #11
   1650e:	1ac0      	subs	r0, r0, r3
   16510:	4152      	adcs	r2, r2
   16512:	0a83      	lsrs	r3, r0, #10
   16514:	428b      	cmp	r3, r1
   16516:	d301      	bcc.n	1651c <__divsi3+0x88>
   16518:	028b      	lsls	r3, r1, #10
   1651a:	1ac0      	subs	r0, r0, r3
   1651c:	4152      	adcs	r2, r2
   1651e:	0a43      	lsrs	r3, r0, #9
   16520:	428b      	cmp	r3, r1
   16522:	d301      	bcc.n	16528 <__divsi3+0x94>
   16524:	024b      	lsls	r3, r1, #9
   16526:	1ac0      	subs	r0, r0, r3
   16528:	4152      	adcs	r2, r2
   1652a:	0a03      	lsrs	r3, r0, #8
   1652c:	428b      	cmp	r3, r1
   1652e:	d301      	bcc.n	16534 <__divsi3+0xa0>
   16530:	020b      	lsls	r3, r1, #8
   16532:	1ac0      	subs	r0, r0, r3
   16534:	4152      	adcs	r2, r2
   16536:	d2cd      	bcs.n	164d4 <__divsi3+0x40>
   16538:	09c3      	lsrs	r3, r0, #7
   1653a:	428b      	cmp	r3, r1
   1653c:	d301      	bcc.n	16542 <__divsi3+0xae>
   1653e:	01cb      	lsls	r3, r1, #7
   16540:	1ac0      	subs	r0, r0, r3
   16542:	4152      	adcs	r2, r2
   16544:	0983      	lsrs	r3, r0, #6
   16546:	428b      	cmp	r3, r1
   16548:	d301      	bcc.n	1654e <__divsi3+0xba>
   1654a:	018b      	lsls	r3, r1, #6
   1654c:	1ac0      	subs	r0, r0, r3
   1654e:	4152      	adcs	r2, r2
   16550:	0943      	lsrs	r3, r0, #5
   16552:	428b      	cmp	r3, r1
   16554:	d301      	bcc.n	1655a <__divsi3+0xc6>
   16556:	014b      	lsls	r3, r1, #5
   16558:	1ac0      	subs	r0, r0, r3
   1655a:	4152      	adcs	r2, r2
   1655c:	0903      	lsrs	r3, r0, #4
   1655e:	428b      	cmp	r3, r1
   16560:	d301      	bcc.n	16566 <__divsi3+0xd2>
   16562:	010b      	lsls	r3, r1, #4
   16564:	1ac0      	subs	r0, r0, r3
   16566:	4152      	adcs	r2, r2
   16568:	08c3      	lsrs	r3, r0, #3
   1656a:	428b      	cmp	r3, r1
   1656c:	d301      	bcc.n	16572 <__divsi3+0xde>
   1656e:	00cb      	lsls	r3, r1, #3
   16570:	1ac0      	subs	r0, r0, r3
   16572:	4152      	adcs	r2, r2
   16574:	0883      	lsrs	r3, r0, #2
   16576:	428b      	cmp	r3, r1
   16578:	d301      	bcc.n	1657e <__divsi3+0xea>
   1657a:	008b      	lsls	r3, r1, #2
   1657c:	1ac0      	subs	r0, r0, r3
   1657e:	4152      	adcs	r2, r2
   16580:	0843      	lsrs	r3, r0, #1
   16582:	428b      	cmp	r3, r1
   16584:	d301      	bcc.n	1658a <__divsi3+0xf6>
   16586:	004b      	lsls	r3, r1, #1
   16588:	1ac0      	subs	r0, r0, r3
   1658a:	4152      	adcs	r2, r2
   1658c:	1a41      	subs	r1, r0, r1
   1658e:	d200      	bcs.n	16592 <__divsi3+0xfe>
   16590:	4601      	mov	r1, r0
   16592:	4152      	adcs	r2, r2
   16594:	4610      	mov	r0, r2
   16596:	4770      	bx	lr
   16598:	e05d      	b.n	16656 <__divsi3+0x1c2>
   1659a:	0fca      	lsrs	r2, r1, #31
   1659c:	d000      	beq.n	165a0 <__divsi3+0x10c>
   1659e:	4249      	negs	r1, r1
   165a0:	1003      	asrs	r3, r0, #32
   165a2:	d300      	bcc.n	165a6 <__divsi3+0x112>
   165a4:	4240      	negs	r0, r0
   165a6:	4053      	eors	r3, r2
   165a8:	2200      	movs	r2, #0
   165aa:	469c      	mov	ip, r3
   165ac:	0903      	lsrs	r3, r0, #4
   165ae:	428b      	cmp	r3, r1
   165b0:	d32d      	bcc.n	1660e <__divsi3+0x17a>
   165b2:	0a03      	lsrs	r3, r0, #8
   165b4:	428b      	cmp	r3, r1
   165b6:	d312      	bcc.n	165de <__divsi3+0x14a>
   165b8:	22fc      	movs	r2, #252	; 0xfc
   165ba:	0189      	lsls	r1, r1, #6
   165bc:	ba12      	rev	r2, r2
   165be:	0a03      	lsrs	r3, r0, #8
   165c0:	428b      	cmp	r3, r1
   165c2:	d30c      	bcc.n	165de <__divsi3+0x14a>
   165c4:	0189      	lsls	r1, r1, #6
   165c6:	1192      	asrs	r2, r2, #6
   165c8:	428b      	cmp	r3, r1
   165ca:	d308      	bcc.n	165de <__divsi3+0x14a>
   165cc:	0189      	lsls	r1, r1, #6
   165ce:	1192      	asrs	r2, r2, #6
   165d0:	428b      	cmp	r3, r1
   165d2:	d304      	bcc.n	165de <__divsi3+0x14a>
   165d4:	0189      	lsls	r1, r1, #6
   165d6:	d03a      	beq.n	1664e <__divsi3+0x1ba>
   165d8:	1192      	asrs	r2, r2, #6
   165da:	e000      	b.n	165de <__divsi3+0x14a>
   165dc:	0989      	lsrs	r1, r1, #6
   165de:	09c3      	lsrs	r3, r0, #7
   165e0:	428b      	cmp	r3, r1
   165e2:	d301      	bcc.n	165e8 <__divsi3+0x154>
   165e4:	01cb      	lsls	r3, r1, #7
   165e6:	1ac0      	subs	r0, r0, r3
   165e8:	4152      	adcs	r2, r2
   165ea:	0983      	lsrs	r3, r0, #6
   165ec:	428b      	cmp	r3, r1
   165ee:	d301      	bcc.n	165f4 <__divsi3+0x160>
   165f0:	018b      	lsls	r3, r1, #6
   165f2:	1ac0      	subs	r0, r0, r3
   165f4:	4152      	adcs	r2, r2
   165f6:	0943      	lsrs	r3, r0, #5
   165f8:	428b      	cmp	r3, r1
   165fa:	d301      	bcc.n	16600 <__divsi3+0x16c>
   165fc:	014b      	lsls	r3, r1, #5
   165fe:	1ac0      	subs	r0, r0, r3
   16600:	4152      	adcs	r2, r2
   16602:	0903      	lsrs	r3, r0, #4
   16604:	428b      	cmp	r3, r1
   16606:	d301      	bcc.n	1660c <__divsi3+0x178>
   16608:	010b      	lsls	r3, r1, #4
   1660a:	1ac0      	subs	r0, r0, r3
   1660c:	4152      	adcs	r2, r2
   1660e:	08c3      	lsrs	r3, r0, #3
   16610:	428b      	cmp	r3, r1
   16612:	d301      	bcc.n	16618 <__divsi3+0x184>
   16614:	00cb      	lsls	r3, r1, #3
   16616:	1ac0      	subs	r0, r0, r3
   16618:	4152      	adcs	r2, r2
   1661a:	0883      	lsrs	r3, r0, #2
   1661c:	428b      	cmp	r3, r1
   1661e:	d301      	bcc.n	16624 <__divsi3+0x190>
   16620:	008b      	lsls	r3, r1, #2
   16622:	1ac0      	subs	r0, r0, r3
   16624:	4152      	adcs	r2, r2
   16626:	d2d9      	bcs.n	165dc <__divsi3+0x148>
   16628:	0843      	lsrs	r3, r0, #1
   1662a:	428b      	cmp	r3, r1
   1662c:	d301      	bcc.n	16632 <__divsi3+0x19e>
   1662e:	004b      	lsls	r3, r1, #1
   16630:	1ac0      	subs	r0, r0, r3
   16632:	4152      	adcs	r2, r2
   16634:	1a41      	subs	r1, r0, r1
   16636:	d200      	bcs.n	1663a <__divsi3+0x1a6>
   16638:	4601      	mov	r1, r0
   1663a:	4663      	mov	r3, ip
   1663c:	4152      	adcs	r2, r2
   1663e:	105b      	asrs	r3, r3, #1
   16640:	4610      	mov	r0, r2
   16642:	d301      	bcc.n	16648 <__divsi3+0x1b4>
   16644:	4240      	negs	r0, r0
   16646:	2b00      	cmp	r3, #0
   16648:	d500      	bpl.n	1664c <__divsi3+0x1b8>
   1664a:	4249      	negs	r1, r1
   1664c:	4770      	bx	lr
   1664e:	4663      	mov	r3, ip
   16650:	105b      	asrs	r3, r3, #1
   16652:	d300      	bcc.n	16656 <__divsi3+0x1c2>
   16654:	4240      	negs	r0, r0
   16656:	b501      	push	{r0, lr}
   16658:	2000      	movs	r0, #0
   1665a:	f000 f805 	bl	16668 <__aeabi_idiv0>
   1665e:	bd02      	pop	{r1, pc}

00016660 <__aeabi_idivmod>:
   16660:	2900      	cmp	r1, #0
   16662:	d0f8      	beq.n	16656 <__divsi3+0x1c2>
   16664:	e716      	b.n	16494 <__divsi3>
   16666:	4770      	bx	lr

00016668 <__aeabi_idiv0>:
   16668:	4770      	bx	lr
   1666a:	46c0      	nop			; (mov r8, r8)

0001666c <__aeabi_cdrcmple>:
   1666c:	4684      	mov	ip, r0
   1666e:	1c10      	adds	r0, r2, #0
   16670:	4662      	mov	r2, ip
   16672:	468c      	mov	ip, r1
   16674:	1c19      	adds	r1, r3, #0
   16676:	4663      	mov	r3, ip
   16678:	e000      	b.n	1667c <__aeabi_cdcmpeq>
   1667a:	46c0      	nop			; (mov r8, r8)

0001667c <__aeabi_cdcmpeq>:
   1667c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1667e:	f001 f9f7 	bl	17a70 <__ledf2>
   16682:	2800      	cmp	r0, #0
   16684:	d401      	bmi.n	1668a <__aeabi_cdcmpeq+0xe>
   16686:	2100      	movs	r1, #0
   16688:	42c8      	cmn	r0, r1
   1668a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001668c <__aeabi_dcmpeq>:
   1668c:	b510      	push	{r4, lr}
   1668e:	f001 f951 	bl	17934 <__eqdf2>
   16692:	4240      	negs	r0, r0
   16694:	3001      	adds	r0, #1
   16696:	bd10      	pop	{r4, pc}

00016698 <__aeabi_dcmplt>:
   16698:	b510      	push	{r4, lr}
   1669a:	f001 f9e9 	bl	17a70 <__ledf2>
   1669e:	2800      	cmp	r0, #0
   166a0:	db01      	blt.n	166a6 <__aeabi_dcmplt+0xe>
   166a2:	2000      	movs	r0, #0
   166a4:	bd10      	pop	{r4, pc}
   166a6:	2001      	movs	r0, #1
   166a8:	bd10      	pop	{r4, pc}
   166aa:	46c0      	nop			; (mov r8, r8)

000166ac <__aeabi_dcmple>:
   166ac:	b510      	push	{r4, lr}
   166ae:	f001 f9df 	bl	17a70 <__ledf2>
   166b2:	2800      	cmp	r0, #0
   166b4:	dd01      	ble.n	166ba <__aeabi_dcmple+0xe>
   166b6:	2000      	movs	r0, #0
   166b8:	bd10      	pop	{r4, pc}
   166ba:	2001      	movs	r0, #1
   166bc:	bd10      	pop	{r4, pc}
   166be:	46c0      	nop			; (mov r8, r8)

000166c0 <__aeabi_dcmpgt>:
   166c0:	b510      	push	{r4, lr}
   166c2:	f001 f971 	bl	179a8 <__gedf2>
   166c6:	2800      	cmp	r0, #0
   166c8:	dc01      	bgt.n	166ce <__aeabi_dcmpgt+0xe>
   166ca:	2000      	movs	r0, #0
   166cc:	bd10      	pop	{r4, pc}
   166ce:	2001      	movs	r0, #1
   166d0:	bd10      	pop	{r4, pc}
   166d2:	46c0      	nop			; (mov r8, r8)

000166d4 <__aeabi_dcmpge>:
   166d4:	b510      	push	{r4, lr}
   166d6:	f001 f967 	bl	179a8 <__gedf2>
   166da:	2800      	cmp	r0, #0
   166dc:	da01      	bge.n	166e2 <__aeabi_dcmpge+0xe>
   166de:	2000      	movs	r0, #0
   166e0:	bd10      	pop	{r4, pc}
   166e2:	2001      	movs	r0, #1
   166e4:	bd10      	pop	{r4, pc}
   166e6:	46c0      	nop			; (mov r8, r8)

000166e8 <__aeabi_lmul>:
   166e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   166ea:	46ce      	mov	lr, r9
   166ec:	4647      	mov	r7, r8
   166ee:	0415      	lsls	r5, r2, #16
   166f0:	0c2d      	lsrs	r5, r5, #16
   166f2:	002e      	movs	r6, r5
   166f4:	b580      	push	{r7, lr}
   166f6:	0407      	lsls	r7, r0, #16
   166f8:	0c14      	lsrs	r4, r2, #16
   166fa:	0c3f      	lsrs	r7, r7, #16
   166fc:	4699      	mov	r9, r3
   166fe:	0c03      	lsrs	r3, r0, #16
   16700:	437e      	muls	r6, r7
   16702:	435d      	muls	r5, r3
   16704:	4367      	muls	r7, r4
   16706:	4363      	muls	r3, r4
   16708:	197f      	adds	r7, r7, r5
   1670a:	0c34      	lsrs	r4, r6, #16
   1670c:	19e4      	adds	r4, r4, r7
   1670e:	469c      	mov	ip, r3
   16710:	42a5      	cmp	r5, r4
   16712:	d903      	bls.n	1671c <__aeabi_lmul+0x34>
   16714:	2380      	movs	r3, #128	; 0x80
   16716:	025b      	lsls	r3, r3, #9
   16718:	4698      	mov	r8, r3
   1671a:	44c4      	add	ip, r8
   1671c:	464b      	mov	r3, r9
   1671e:	4351      	muls	r1, r2
   16720:	4343      	muls	r3, r0
   16722:	0436      	lsls	r6, r6, #16
   16724:	0c36      	lsrs	r6, r6, #16
   16726:	0c25      	lsrs	r5, r4, #16
   16728:	0424      	lsls	r4, r4, #16
   1672a:	4465      	add	r5, ip
   1672c:	19a4      	adds	r4, r4, r6
   1672e:	1859      	adds	r1, r3, r1
   16730:	1949      	adds	r1, r1, r5
   16732:	0020      	movs	r0, r4
   16734:	bc0c      	pop	{r2, r3}
   16736:	4690      	mov	r8, r2
   16738:	4699      	mov	r9, r3
   1673a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001673c <__aeabi_fdiv>:
   1673c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1673e:	4657      	mov	r7, sl
   16740:	464e      	mov	r6, r9
   16742:	46de      	mov	lr, fp
   16744:	4645      	mov	r5, r8
   16746:	b5e0      	push	{r5, r6, r7, lr}
   16748:	0244      	lsls	r4, r0, #9
   1674a:	0043      	lsls	r3, r0, #1
   1674c:	0fc6      	lsrs	r6, r0, #31
   1674e:	b083      	sub	sp, #12
   16750:	1c0f      	adds	r7, r1, #0
   16752:	0a64      	lsrs	r4, r4, #9
   16754:	0e1b      	lsrs	r3, r3, #24
   16756:	46b2      	mov	sl, r6
   16758:	d053      	beq.n	16802 <__aeabi_fdiv+0xc6>
   1675a:	2bff      	cmp	r3, #255	; 0xff
   1675c:	d027      	beq.n	167ae <__aeabi_fdiv+0x72>
   1675e:	2280      	movs	r2, #128	; 0x80
   16760:	00e4      	lsls	r4, r4, #3
   16762:	04d2      	lsls	r2, r2, #19
   16764:	4314      	orrs	r4, r2
   16766:	227f      	movs	r2, #127	; 0x7f
   16768:	4252      	negs	r2, r2
   1676a:	4690      	mov	r8, r2
   1676c:	4498      	add	r8, r3
   1676e:	2300      	movs	r3, #0
   16770:	4699      	mov	r9, r3
   16772:	469b      	mov	fp, r3
   16774:	027d      	lsls	r5, r7, #9
   16776:	0078      	lsls	r0, r7, #1
   16778:	0ffb      	lsrs	r3, r7, #31
   1677a:	0a6d      	lsrs	r5, r5, #9
   1677c:	0e00      	lsrs	r0, r0, #24
   1677e:	9300      	str	r3, [sp, #0]
   16780:	d024      	beq.n	167cc <__aeabi_fdiv+0x90>
   16782:	28ff      	cmp	r0, #255	; 0xff
   16784:	d046      	beq.n	16814 <__aeabi_fdiv+0xd8>
   16786:	2380      	movs	r3, #128	; 0x80
   16788:	2100      	movs	r1, #0
   1678a:	00ed      	lsls	r5, r5, #3
   1678c:	04db      	lsls	r3, r3, #19
   1678e:	431d      	orrs	r5, r3
   16790:	387f      	subs	r0, #127	; 0x7f
   16792:	4647      	mov	r7, r8
   16794:	1a38      	subs	r0, r7, r0
   16796:	464f      	mov	r7, r9
   16798:	430f      	orrs	r7, r1
   1679a:	00bf      	lsls	r7, r7, #2
   1679c:	46b9      	mov	r9, r7
   1679e:	0033      	movs	r3, r6
   167a0:	9a00      	ldr	r2, [sp, #0]
   167a2:	4f87      	ldr	r7, [pc, #540]	; (169c0 <__aeabi_fdiv+0x284>)
   167a4:	4053      	eors	r3, r2
   167a6:	464a      	mov	r2, r9
   167a8:	58ba      	ldr	r2, [r7, r2]
   167aa:	9301      	str	r3, [sp, #4]
   167ac:	4697      	mov	pc, r2
   167ae:	2c00      	cmp	r4, #0
   167b0:	d14e      	bne.n	16850 <__aeabi_fdiv+0x114>
   167b2:	2308      	movs	r3, #8
   167b4:	4699      	mov	r9, r3
   167b6:	33f7      	adds	r3, #247	; 0xf7
   167b8:	4698      	mov	r8, r3
   167ba:	3bfd      	subs	r3, #253	; 0xfd
   167bc:	469b      	mov	fp, r3
   167be:	027d      	lsls	r5, r7, #9
   167c0:	0078      	lsls	r0, r7, #1
   167c2:	0ffb      	lsrs	r3, r7, #31
   167c4:	0a6d      	lsrs	r5, r5, #9
   167c6:	0e00      	lsrs	r0, r0, #24
   167c8:	9300      	str	r3, [sp, #0]
   167ca:	d1da      	bne.n	16782 <__aeabi_fdiv+0x46>
   167cc:	2d00      	cmp	r5, #0
   167ce:	d126      	bne.n	1681e <__aeabi_fdiv+0xe2>
   167d0:	2000      	movs	r0, #0
   167d2:	2101      	movs	r1, #1
   167d4:	0033      	movs	r3, r6
   167d6:	9a00      	ldr	r2, [sp, #0]
   167d8:	4f7a      	ldr	r7, [pc, #488]	; (169c4 <__aeabi_fdiv+0x288>)
   167da:	4053      	eors	r3, r2
   167dc:	4642      	mov	r2, r8
   167de:	1a10      	subs	r0, r2, r0
   167e0:	464a      	mov	r2, r9
   167e2:	430a      	orrs	r2, r1
   167e4:	0092      	lsls	r2, r2, #2
   167e6:	58ba      	ldr	r2, [r7, r2]
   167e8:	001d      	movs	r5, r3
   167ea:	4697      	mov	pc, r2
   167ec:	9b00      	ldr	r3, [sp, #0]
   167ee:	002c      	movs	r4, r5
   167f0:	469a      	mov	sl, r3
   167f2:	468b      	mov	fp, r1
   167f4:	465b      	mov	r3, fp
   167f6:	2b02      	cmp	r3, #2
   167f8:	d131      	bne.n	1685e <__aeabi_fdiv+0x122>
   167fa:	4653      	mov	r3, sl
   167fc:	21ff      	movs	r1, #255	; 0xff
   167fe:	2400      	movs	r4, #0
   16800:	e038      	b.n	16874 <__aeabi_fdiv+0x138>
   16802:	2c00      	cmp	r4, #0
   16804:	d117      	bne.n	16836 <__aeabi_fdiv+0xfa>
   16806:	2304      	movs	r3, #4
   16808:	4699      	mov	r9, r3
   1680a:	2300      	movs	r3, #0
   1680c:	4698      	mov	r8, r3
   1680e:	3301      	adds	r3, #1
   16810:	469b      	mov	fp, r3
   16812:	e7af      	b.n	16774 <__aeabi_fdiv+0x38>
   16814:	20ff      	movs	r0, #255	; 0xff
   16816:	2d00      	cmp	r5, #0
   16818:	d10b      	bne.n	16832 <__aeabi_fdiv+0xf6>
   1681a:	2102      	movs	r1, #2
   1681c:	e7da      	b.n	167d4 <__aeabi_fdiv+0x98>
   1681e:	0028      	movs	r0, r5
   16820:	f002 f83e 	bl	188a0 <__clzsi2>
   16824:	1f43      	subs	r3, r0, #5
   16826:	409d      	lsls	r5, r3
   16828:	2376      	movs	r3, #118	; 0x76
   1682a:	425b      	negs	r3, r3
   1682c:	1a18      	subs	r0, r3, r0
   1682e:	2100      	movs	r1, #0
   16830:	e7af      	b.n	16792 <__aeabi_fdiv+0x56>
   16832:	2103      	movs	r1, #3
   16834:	e7ad      	b.n	16792 <__aeabi_fdiv+0x56>
   16836:	0020      	movs	r0, r4
   16838:	f002 f832 	bl	188a0 <__clzsi2>
   1683c:	1f43      	subs	r3, r0, #5
   1683e:	409c      	lsls	r4, r3
   16840:	2376      	movs	r3, #118	; 0x76
   16842:	425b      	negs	r3, r3
   16844:	1a1b      	subs	r3, r3, r0
   16846:	4698      	mov	r8, r3
   16848:	2300      	movs	r3, #0
   1684a:	4699      	mov	r9, r3
   1684c:	469b      	mov	fp, r3
   1684e:	e791      	b.n	16774 <__aeabi_fdiv+0x38>
   16850:	230c      	movs	r3, #12
   16852:	4699      	mov	r9, r3
   16854:	33f3      	adds	r3, #243	; 0xf3
   16856:	4698      	mov	r8, r3
   16858:	3bfc      	subs	r3, #252	; 0xfc
   1685a:	469b      	mov	fp, r3
   1685c:	e78a      	b.n	16774 <__aeabi_fdiv+0x38>
   1685e:	2b03      	cmp	r3, #3
   16860:	d100      	bne.n	16864 <__aeabi_fdiv+0x128>
   16862:	e0a5      	b.n	169b0 <__aeabi_fdiv+0x274>
   16864:	4655      	mov	r5, sl
   16866:	2b01      	cmp	r3, #1
   16868:	d000      	beq.n	1686c <__aeabi_fdiv+0x130>
   1686a:	e081      	b.n	16970 <__aeabi_fdiv+0x234>
   1686c:	2301      	movs	r3, #1
   1686e:	2100      	movs	r1, #0
   16870:	2400      	movs	r4, #0
   16872:	402b      	ands	r3, r5
   16874:	0264      	lsls	r4, r4, #9
   16876:	05c9      	lsls	r1, r1, #23
   16878:	0a60      	lsrs	r0, r4, #9
   1687a:	07db      	lsls	r3, r3, #31
   1687c:	4308      	orrs	r0, r1
   1687e:	4318      	orrs	r0, r3
   16880:	b003      	add	sp, #12
   16882:	bc3c      	pop	{r2, r3, r4, r5}
   16884:	4690      	mov	r8, r2
   16886:	4699      	mov	r9, r3
   16888:	46a2      	mov	sl, r4
   1688a:	46ab      	mov	fp, r5
   1688c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1688e:	2480      	movs	r4, #128	; 0x80
   16890:	2300      	movs	r3, #0
   16892:	03e4      	lsls	r4, r4, #15
   16894:	21ff      	movs	r1, #255	; 0xff
   16896:	e7ed      	b.n	16874 <__aeabi_fdiv+0x138>
   16898:	21ff      	movs	r1, #255	; 0xff
   1689a:	2400      	movs	r4, #0
   1689c:	e7ea      	b.n	16874 <__aeabi_fdiv+0x138>
   1689e:	2301      	movs	r3, #1
   168a0:	1a59      	subs	r1, r3, r1
   168a2:	291b      	cmp	r1, #27
   168a4:	dd66      	ble.n	16974 <__aeabi_fdiv+0x238>
   168a6:	9a01      	ldr	r2, [sp, #4]
   168a8:	4013      	ands	r3, r2
   168aa:	2100      	movs	r1, #0
   168ac:	2400      	movs	r4, #0
   168ae:	e7e1      	b.n	16874 <__aeabi_fdiv+0x138>
   168b0:	2380      	movs	r3, #128	; 0x80
   168b2:	03db      	lsls	r3, r3, #15
   168b4:	421c      	tst	r4, r3
   168b6:	d038      	beq.n	1692a <__aeabi_fdiv+0x1ee>
   168b8:	421d      	tst	r5, r3
   168ba:	d051      	beq.n	16960 <__aeabi_fdiv+0x224>
   168bc:	431c      	orrs	r4, r3
   168be:	0264      	lsls	r4, r4, #9
   168c0:	0a64      	lsrs	r4, r4, #9
   168c2:	0033      	movs	r3, r6
   168c4:	21ff      	movs	r1, #255	; 0xff
   168c6:	e7d5      	b.n	16874 <__aeabi_fdiv+0x138>
   168c8:	0163      	lsls	r3, r4, #5
   168ca:	016c      	lsls	r4, r5, #5
   168cc:	42a3      	cmp	r3, r4
   168ce:	d23b      	bcs.n	16948 <__aeabi_fdiv+0x20c>
   168d0:	261b      	movs	r6, #27
   168d2:	2100      	movs	r1, #0
   168d4:	3801      	subs	r0, #1
   168d6:	2501      	movs	r5, #1
   168d8:	001f      	movs	r7, r3
   168da:	0049      	lsls	r1, r1, #1
   168dc:	005b      	lsls	r3, r3, #1
   168de:	2f00      	cmp	r7, #0
   168e0:	db01      	blt.n	168e6 <__aeabi_fdiv+0x1aa>
   168e2:	429c      	cmp	r4, r3
   168e4:	d801      	bhi.n	168ea <__aeabi_fdiv+0x1ae>
   168e6:	1b1b      	subs	r3, r3, r4
   168e8:	4329      	orrs	r1, r5
   168ea:	3e01      	subs	r6, #1
   168ec:	2e00      	cmp	r6, #0
   168ee:	d1f3      	bne.n	168d8 <__aeabi_fdiv+0x19c>
   168f0:	001c      	movs	r4, r3
   168f2:	1e63      	subs	r3, r4, #1
   168f4:	419c      	sbcs	r4, r3
   168f6:	430c      	orrs	r4, r1
   168f8:	0001      	movs	r1, r0
   168fa:	317f      	adds	r1, #127	; 0x7f
   168fc:	2900      	cmp	r1, #0
   168fe:	ddce      	ble.n	1689e <__aeabi_fdiv+0x162>
   16900:	0763      	lsls	r3, r4, #29
   16902:	d004      	beq.n	1690e <__aeabi_fdiv+0x1d2>
   16904:	230f      	movs	r3, #15
   16906:	4023      	ands	r3, r4
   16908:	2b04      	cmp	r3, #4
   1690a:	d000      	beq.n	1690e <__aeabi_fdiv+0x1d2>
   1690c:	3404      	adds	r4, #4
   1690e:	0123      	lsls	r3, r4, #4
   16910:	d503      	bpl.n	1691a <__aeabi_fdiv+0x1de>
   16912:	0001      	movs	r1, r0
   16914:	4b2c      	ldr	r3, [pc, #176]	; (169c8 <__aeabi_fdiv+0x28c>)
   16916:	3180      	adds	r1, #128	; 0x80
   16918:	401c      	ands	r4, r3
   1691a:	29fe      	cmp	r1, #254	; 0xfe
   1691c:	dd0d      	ble.n	1693a <__aeabi_fdiv+0x1fe>
   1691e:	2301      	movs	r3, #1
   16920:	9a01      	ldr	r2, [sp, #4]
   16922:	21ff      	movs	r1, #255	; 0xff
   16924:	4013      	ands	r3, r2
   16926:	2400      	movs	r4, #0
   16928:	e7a4      	b.n	16874 <__aeabi_fdiv+0x138>
   1692a:	2380      	movs	r3, #128	; 0x80
   1692c:	03db      	lsls	r3, r3, #15
   1692e:	431c      	orrs	r4, r3
   16930:	0264      	lsls	r4, r4, #9
   16932:	0a64      	lsrs	r4, r4, #9
   16934:	0033      	movs	r3, r6
   16936:	21ff      	movs	r1, #255	; 0xff
   16938:	e79c      	b.n	16874 <__aeabi_fdiv+0x138>
   1693a:	2301      	movs	r3, #1
   1693c:	9a01      	ldr	r2, [sp, #4]
   1693e:	01a4      	lsls	r4, r4, #6
   16940:	0a64      	lsrs	r4, r4, #9
   16942:	b2c9      	uxtb	r1, r1
   16944:	4013      	ands	r3, r2
   16946:	e795      	b.n	16874 <__aeabi_fdiv+0x138>
   16948:	1b1b      	subs	r3, r3, r4
   1694a:	261a      	movs	r6, #26
   1694c:	2101      	movs	r1, #1
   1694e:	e7c2      	b.n	168d6 <__aeabi_fdiv+0x19a>
   16950:	9b00      	ldr	r3, [sp, #0]
   16952:	468b      	mov	fp, r1
   16954:	469a      	mov	sl, r3
   16956:	2400      	movs	r4, #0
   16958:	e74c      	b.n	167f4 <__aeabi_fdiv+0xb8>
   1695a:	0263      	lsls	r3, r4, #9
   1695c:	d5e5      	bpl.n	1692a <__aeabi_fdiv+0x1ee>
   1695e:	2500      	movs	r5, #0
   16960:	2480      	movs	r4, #128	; 0x80
   16962:	03e4      	lsls	r4, r4, #15
   16964:	432c      	orrs	r4, r5
   16966:	0264      	lsls	r4, r4, #9
   16968:	0a64      	lsrs	r4, r4, #9
   1696a:	9b00      	ldr	r3, [sp, #0]
   1696c:	21ff      	movs	r1, #255	; 0xff
   1696e:	e781      	b.n	16874 <__aeabi_fdiv+0x138>
   16970:	9501      	str	r5, [sp, #4]
   16972:	e7c1      	b.n	168f8 <__aeabi_fdiv+0x1bc>
   16974:	0023      	movs	r3, r4
   16976:	2020      	movs	r0, #32
   16978:	40cb      	lsrs	r3, r1
   1697a:	1a41      	subs	r1, r0, r1
   1697c:	408c      	lsls	r4, r1
   1697e:	1e61      	subs	r1, r4, #1
   16980:	418c      	sbcs	r4, r1
   16982:	431c      	orrs	r4, r3
   16984:	0763      	lsls	r3, r4, #29
   16986:	d004      	beq.n	16992 <__aeabi_fdiv+0x256>
   16988:	230f      	movs	r3, #15
   1698a:	4023      	ands	r3, r4
   1698c:	2b04      	cmp	r3, #4
   1698e:	d000      	beq.n	16992 <__aeabi_fdiv+0x256>
   16990:	3404      	adds	r4, #4
   16992:	0163      	lsls	r3, r4, #5
   16994:	d505      	bpl.n	169a2 <__aeabi_fdiv+0x266>
   16996:	2301      	movs	r3, #1
   16998:	9a01      	ldr	r2, [sp, #4]
   1699a:	2101      	movs	r1, #1
   1699c:	4013      	ands	r3, r2
   1699e:	2400      	movs	r4, #0
   169a0:	e768      	b.n	16874 <__aeabi_fdiv+0x138>
   169a2:	2301      	movs	r3, #1
   169a4:	9a01      	ldr	r2, [sp, #4]
   169a6:	01a4      	lsls	r4, r4, #6
   169a8:	0a64      	lsrs	r4, r4, #9
   169aa:	4013      	ands	r3, r2
   169ac:	2100      	movs	r1, #0
   169ae:	e761      	b.n	16874 <__aeabi_fdiv+0x138>
   169b0:	2380      	movs	r3, #128	; 0x80
   169b2:	03db      	lsls	r3, r3, #15
   169b4:	431c      	orrs	r4, r3
   169b6:	0264      	lsls	r4, r4, #9
   169b8:	0a64      	lsrs	r4, r4, #9
   169ba:	4653      	mov	r3, sl
   169bc:	21ff      	movs	r1, #255	; 0xff
   169be:	e759      	b.n	16874 <__aeabi_fdiv+0x138>
   169c0:	0001b180 	.word	0x0001b180
   169c4:	0001b1c0 	.word	0x0001b1c0
   169c8:	f7ffffff 	.word	0xf7ffffff

000169cc <__aeabi_fmul>:
   169cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   169ce:	4657      	mov	r7, sl
   169d0:	464e      	mov	r6, r9
   169d2:	4645      	mov	r5, r8
   169d4:	46de      	mov	lr, fp
   169d6:	b5e0      	push	{r5, r6, r7, lr}
   169d8:	0247      	lsls	r7, r0, #9
   169da:	0046      	lsls	r6, r0, #1
   169dc:	4688      	mov	r8, r1
   169de:	0a7f      	lsrs	r7, r7, #9
   169e0:	0e36      	lsrs	r6, r6, #24
   169e2:	0fc4      	lsrs	r4, r0, #31
   169e4:	2e00      	cmp	r6, #0
   169e6:	d047      	beq.n	16a78 <__aeabi_fmul+0xac>
   169e8:	2eff      	cmp	r6, #255	; 0xff
   169ea:	d024      	beq.n	16a36 <__aeabi_fmul+0x6a>
   169ec:	00fb      	lsls	r3, r7, #3
   169ee:	2780      	movs	r7, #128	; 0x80
   169f0:	04ff      	lsls	r7, r7, #19
   169f2:	431f      	orrs	r7, r3
   169f4:	2300      	movs	r3, #0
   169f6:	4699      	mov	r9, r3
   169f8:	469a      	mov	sl, r3
   169fa:	3e7f      	subs	r6, #127	; 0x7f
   169fc:	4643      	mov	r3, r8
   169fe:	025d      	lsls	r5, r3, #9
   16a00:	0058      	lsls	r0, r3, #1
   16a02:	0fdb      	lsrs	r3, r3, #31
   16a04:	0a6d      	lsrs	r5, r5, #9
   16a06:	0e00      	lsrs	r0, r0, #24
   16a08:	4698      	mov	r8, r3
   16a0a:	d043      	beq.n	16a94 <__aeabi_fmul+0xc8>
   16a0c:	28ff      	cmp	r0, #255	; 0xff
   16a0e:	d03b      	beq.n	16a88 <__aeabi_fmul+0xbc>
   16a10:	00eb      	lsls	r3, r5, #3
   16a12:	2580      	movs	r5, #128	; 0x80
   16a14:	2200      	movs	r2, #0
   16a16:	04ed      	lsls	r5, r5, #19
   16a18:	431d      	orrs	r5, r3
   16a1a:	387f      	subs	r0, #127	; 0x7f
   16a1c:	1836      	adds	r6, r6, r0
   16a1e:	1c73      	adds	r3, r6, #1
   16a20:	4641      	mov	r1, r8
   16a22:	469b      	mov	fp, r3
   16a24:	464b      	mov	r3, r9
   16a26:	4061      	eors	r1, r4
   16a28:	4313      	orrs	r3, r2
   16a2a:	2b0f      	cmp	r3, #15
   16a2c:	d864      	bhi.n	16af8 <__aeabi_fmul+0x12c>
   16a2e:	4875      	ldr	r0, [pc, #468]	; (16c04 <__aeabi_fmul+0x238>)
   16a30:	009b      	lsls	r3, r3, #2
   16a32:	58c3      	ldr	r3, [r0, r3]
   16a34:	469f      	mov	pc, r3
   16a36:	2f00      	cmp	r7, #0
   16a38:	d142      	bne.n	16ac0 <__aeabi_fmul+0xf4>
   16a3a:	2308      	movs	r3, #8
   16a3c:	4699      	mov	r9, r3
   16a3e:	3b06      	subs	r3, #6
   16a40:	26ff      	movs	r6, #255	; 0xff
   16a42:	469a      	mov	sl, r3
   16a44:	e7da      	b.n	169fc <__aeabi_fmul+0x30>
   16a46:	4641      	mov	r1, r8
   16a48:	2a02      	cmp	r2, #2
   16a4a:	d028      	beq.n	16a9e <__aeabi_fmul+0xd2>
   16a4c:	2a03      	cmp	r2, #3
   16a4e:	d100      	bne.n	16a52 <__aeabi_fmul+0x86>
   16a50:	e0ce      	b.n	16bf0 <__aeabi_fmul+0x224>
   16a52:	2a01      	cmp	r2, #1
   16a54:	d000      	beq.n	16a58 <__aeabi_fmul+0x8c>
   16a56:	e0ac      	b.n	16bb2 <__aeabi_fmul+0x1e6>
   16a58:	4011      	ands	r1, r2
   16a5a:	2000      	movs	r0, #0
   16a5c:	2200      	movs	r2, #0
   16a5e:	b2cc      	uxtb	r4, r1
   16a60:	0240      	lsls	r0, r0, #9
   16a62:	05d2      	lsls	r2, r2, #23
   16a64:	0a40      	lsrs	r0, r0, #9
   16a66:	07e4      	lsls	r4, r4, #31
   16a68:	4310      	orrs	r0, r2
   16a6a:	4320      	orrs	r0, r4
   16a6c:	bc3c      	pop	{r2, r3, r4, r5}
   16a6e:	4690      	mov	r8, r2
   16a70:	4699      	mov	r9, r3
   16a72:	46a2      	mov	sl, r4
   16a74:	46ab      	mov	fp, r5
   16a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16a78:	2f00      	cmp	r7, #0
   16a7a:	d115      	bne.n	16aa8 <__aeabi_fmul+0xdc>
   16a7c:	2304      	movs	r3, #4
   16a7e:	4699      	mov	r9, r3
   16a80:	3b03      	subs	r3, #3
   16a82:	2600      	movs	r6, #0
   16a84:	469a      	mov	sl, r3
   16a86:	e7b9      	b.n	169fc <__aeabi_fmul+0x30>
   16a88:	20ff      	movs	r0, #255	; 0xff
   16a8a:	2202      	movs	r2, #2
   16a8c:	2d00      	cmp	r5, #0
   16a8e:	d0c5      	beq.n	16a1c <__aeabi_fmul+0x50>
   16a90:	2203      	movs	r2, #3
   16a92:	e7c3      	b.n	16a1c <__aeabi_fmul+0x50>
   16a94:	2d00      	cmp	r5, #0
   16a96:	d119      	bne.n	16acc <__aeabi_fmul+0x100>
   16a98:	2000      	movs	r0, #0
   16a9a:	2201      	movs	r2, #1
   16a9c:	e7be      	b.n	16a1c <__aeabi_fmul+0x50>
   16a9e:	2401      	movs	r4, #1
   16aa0:	22ff      	movs	r2, #255	; 0xff
   16aa2:	400c      	ands	r4, r1
   16aa4:	2000      	movs	r0, #0
   16aa6:	e7db      	b.n	16a60 <__aeabi_fmul+0x94>
   16aa8:	0038      	movs	r0, r7
   16aaa:	f001 fef9 	bl	188a0 <__clzsi2>
   16aae:	2676      	movs	r6, #118	; 0x76
   16ab0:	1f43      	subs	r3, r0, #5
   16ab2:	409f      	lsls	r7, r3
   16ab4:	2300      	movs	r3, #0
   16ab6:	4276      	negs	r6, r6
   16ab8:	1a36      	subs	r6, r6, r0
   16aba:	4699      	mov	r9, r3
   16abc:	469a      	mov	sl, r3
   16abe:	e79d      	b.n	169fc <__aeabi_fmul+0x30>
   16ac0:	230c      	movs	r3, #12
   16ac2:	4699      	mov	r9, r3
   16ac4:	3b09      	subs	r3, #9
   16ac6:	26ff      	movs	r6, #255	; 0xff
   16ac8:	469a      	mov	sl, r3
   16aca:	e797      	b.n	169fc <__aeabi_fmul+0x30>
   16acc:	0028      	movs	r0, r5
   16ace:	f001 fee7 	bl	188a0 <__clzsi2>
   16ad2:	1f43      	subs	r3, r0, #5
   16ad4:	409d      	lsls	r5, r3
   16ad6:	2376      	movs	r3, #118	; 0x76
   16ad8:	425b      	negs	r3, r3
   16ada:	1a18      	subs	r0, r3, r0
   16adc:	2200      	movs	r2, #0
   16ade:	e79d      	b.n	16a1c <__aeabi_fmul+0x50>
   16ae0:	2080      	movs	r0, #128	; 0x80
   16ae2:	2400      	movs	r4, #0
   16ae4:	03c0      	lsls	r0, r0, #15
   16ae6:	22ff      	movs	r2, #255	; 0xff
   16ae8:	e7ba      	b.n	16a60 <__aeabi_fmul+0x94>
   16aea:	003d      	movs	r5, r7
   16aec:	4652      	mov	r2, sl
   16aee:	e7ab      	b.n	16a48 <__aeabi_fmul+0x7c>
   16af0:	003d      	movs	r5, r7
   16af2:	0021      	movs	r1, r4
   16af4:	4652      	mov	r2, sl
   16af6:	e7a7      	b.n	16a48 <__aeabi_fmul+0x7c>
   16af8:	0c3b      	lsrs	r3, r7, #16
   16afa:	469c      	mov	ip, r3
   16afc:	042a      	lsls	r2, r5, #16
   16afe:	0c12      	lsrs	r2, r2, #16
   16b00:	0c2b      	lsrs	r3, r5, #16
   16b02:	0014      	movs	r4, r2
   16b04:	4660      	mov	r0, ip
   16b06:	4665      	mov	r5, ip
   16b08:	043f      	lsls	r7, r7, #16
   16b0a:	0c3f      	lsrs	r7, r7, #16
   16b0c:	437c      	muls	r4, r7
   16b0e:	4342      	muls	r2, r0
   16b10:	435d      	muls	r5, r3
   16b12:	437b      	muls	r3, r7
   16b14:	0c27      	lsrs	r7, r4, #16
   16b16:	189b      	adds	r3, r3, r2
   16b18:	18ff      	adds	r7, r7, r3
   16b1a:	42ba      	cmp	r2, r7
   16b1c:	d903      	bls.n	16b26 <__aeabi_fmul+0x15a>
   16b1e:	2380      	movs	r3, #128	; 0x80
   16b20:	025b      	lsls	r3, r3, #9
   16b22:	469c      	mov	ip, r3
   16b24:	4465      	add	r5, ip
   16b26:	0424      	lsls	r4, r4, #16
   16b28:	043a      	lsls	r2, r7, #16
   16b2a:	0c24      	lsrs	r4, r4, #16
   16b2c:	1912      	adds	r2, r2, r4
   16b2e:	0193      	lsls	r3, r2, #6
   16b30:	1e5c      	subs	r4, r3, #1
   16b32:	41a3      	sbcs	r3, r4
   16b34:	0c3f      	lsrs	r7, r7, #16
   16b36:	0e92      	lsrs	r2, r2, #26
   16b38:	197d      	adds	r5, r7, r5
   16b3a:	431a      	orrs	r2, r3
   16b3c:	01ad      	lsls	r5, r5, #6
   16b3e:	4315      	orrs	r5, r2
   16b40:	012b      	lsls	r3, r5, #4
   16b42:	d504      	bpl.n	16b4e <__aeabi_fmul+0x182>
   16b44:	2301      	movs	r3, #1
   16b46:	465e      	mov	r6, fp
   16b48:	086a      	lsrs	r2, r5, #1
   16b4a:	401d      	ands	r5, r3
   16b4c:	4315      	orrs	r5, r2
   16b4e:	0032      	movs	r2, r6
   16b50:	327f      	adds	r2, #127	; 0x7f
   16b52:	2a00      	cmp	r2, #0
   16b54:	dd25      	ble.n	16ba2 <__aeabi_fmul+0x1d6>
   16b56:	076b      	lsls	r3, r5, #29
   16b58:	d004      	beq.n	16b64 <__aeabi_fmul+0x198>
   16b5a:	230f      	movs	r3, #15
   16b5c:	402b      	ands	r3, r5
   16b5e:	2b04      	cmp	r3, #4
   16b60:	d000      	beq.n	16b64 <__aeabi_fmul+0x198>
   16b62:	3504      	adds	r5, #4
   16b64:	012b      	lsls	r3, r5, #4
   16b66:	d503      	bpl.n	16b70 <__aeabi_fmul+0x1a4>
   16b68:	0032      	movs	r2, r6
   16b6a:	4b27      	ldr	r3, [pc, #156]	; (16c08 <__aeabi_fmul+0x23c>)
   16b6c:	3280      	adds	r2, #128	; 0x80
   16b6e:	401d      	ands	r5, r3
   16b70:	2afe      	cmp	r2, #254	; 0xfe
   16b72:	dc94      	bgt.n	16a9e <__aeabi_fmul+0xd2>
   16b74:	2401      	movs	r4, #1
   16b76:	01a8      	lsls	r0, r5, #6
   16b78:	0a40      	lsrs	r0, r0, #9
   16b7a:	b2d2      	uxtb	r2, r2
   16b7c:	400c      	ands	r4, r1
   16b7e:	e76f      	b.n	16a60 <__aeabi_fmul+0x94>
   16b80:	2080      	movs	r0, #128	; 0x80
   16b82:	03c0      	lsls	r0, r0, #15
   16b84:	4207      	tst	r7, r0
   16b86:	d007      	beq.n	16b98 <__aeabi_fmul+0x1cc>
   16b88:	4205      	tst	r5, r0
   16b8a:	d105      	bne.n	16b98 <__aeabi_fmul+0x1cc>
   16b8c:	4328      	orrs	r0, r5
   16b8e:	0240      	lsls	r0, r0, #9
   16b90:	0a40      	lsrs	r0, r0, #9
   16b92:	4644      	mov	r4, r8
   16b94:	22ff      	movs	r2, #255	; 0xff
   16b96:	e763      	b.n	16a60 <__aeabi_fmul+0x94>
   16b98:	4338      	orrs	r0, r7
   16b9a:	0240      	lsls	r0, r0, #9
   16b9c:	0a40      	lsrs	r0, r0, #9
   16b9e:	22ff      	movs	r2, #255	; 0xff
   16ba0:	e75e      	b.n	16a60 <__aeabi_fmul+0x94>
   16ba2:	2401      	movs	r4, #1
   16ba4:	1aa3      	subs	r3, r4, r2
   16ba6:	2b1b      	cmp	r3, #27
   16ba8:	dd05      	ble.n	16bb6 <__aeabi_fmul+0x1ea>
   16baa:	400c      	ands	r4, r1
   16bac:	2200      	movs	r2, #0
   16bae:	2000      	movs	r0, #0
   16bb0:	e756      	b.n	16a60 <__aeabi_fmul+0x94>
   16bb2:	465e      	mov	r6, fp
   16bb4:	e7cb      	b.n	16b4e <__aeabi_fmul+0x182>
   16bb6:	002a      	movs	r2, r5
   16bb8:	2020      	movs	r0, #32
   16bba:	40da      	lsrs	r2, r3
   16bbc:	1ac3      	subs	r3, r0, r3
   16bbe:	409d      	lsls	r5, r3
   16bc0:	002b      	movs	r3, r5
   16bc2:	1e5d      	subs	r5, r3, #1
   16bc4:	41ab      	sbcs	r3, r5
   16bc6:	4313      	orrs	r3, r2
   16bc8:	075a      	lsls	r2, r3, #29
   16bca:	d004      	beq.n	16bd6 <__aeabi_fmul+0x20a>
   16bcc:	220f      	movs	r2, #15
   16bce:	401a      	ands	r2, r3
   16bd0:	2a04      	cmp	r2, #4
   16bd2:	d000      	beq.n	16bd6 <__aeabi_fmul+0x20a>
   16bd4:	3304      	adds	r3, #4
   16bd6:	015a      	lsls	r2, r3, #5
   16bd8:	d504      	bpl.n	16be4 <__aeabi_fmul+0x218>
   16bda:	2401      	movs	r4, #1
   16bdc:	2201      	movs	r2, #1
   16bde:	400c      	ands	r4, r1
   16be0:	2000      	movs	r0, #0
   16be2:	e73d      	b.n	16a60 <__aeabi_fmul+0x94>
   16be4:	2401      	movs	r4, #1
   16be6:	019b      	lsls	r3, r3, #6
   16be8:	0a58      	lsrs	r0, r3, #9
   16bea:	400c      	ands	r4, r1
   16bec:	2200      	movs	r2, #0
   16bee:	e737      	b.n	16a60 <__aeabi_fmul+0x94>
   16bf0:	2080      	movs	r0, #128	; 0x80
   16bf2:	2401      	movs	r4, #1
   16bf4:	03c0      	lsls	r0, r0, #15
   16bf6:	4328      	orrs	r0, r5
   16bf8:	0240      	lsls	r0, r0, #9
   16bfa:	0a40      	lsrs	r0, r0, #9
   16bfc:	400c      	ands	r4, r1
   16bfe:	22ff      	movs	r2, #255	; 0xff
   16c00:	e72e      	b.n	16a60 <__aeabi_fmul+0x94>
   16c02:	46c0      	nop			; (mov r8, r8)
   16c04:	0001b200 	.word	0x0001b200
   16c08:	f7ffffff 	.word	0xf7ffffff

00016c0c <__aeabi_i2f>:
   16c0c:	b570      	push	{r4, r5, r6, lr}
   16c0e:	2800      	cmp	r0, #0
   16c10:	d030      	beq.n	16c74 <__aeabi_i2f+0x68>
   16c12:	17c3      	asrs	r3, r0, #31
   16c14:	18c4      	adds	r4, r0, r3
   16c16:	405c      	eors	r4, r3
   16c18:	0fc5      	lsrs	r5, r0, #31
   16c1a:	0020      	movs	r0, r4
   16c1c:	f001 fe40 	bl	188a0 <__clzsi2>
   16c20:	239e      	movs	r3, #158	; 0x9e
   16c22:	1a1b      	subs	r3, r3, r0
   16c24:	2b96      	cmp	r3, #150	; 0x96
   16c26:	dc0d      	bgt.n	16c44 <__aeabi_i2f+0x38>
   16c28:	2296      	movs	r2, #150	; 0x96
   16c2a:	1ad2      	subs	r2, r2, r3
   16c2c:	4094      	lsls	r4, r2
   16c2e:	002a      	movs	r2, r5
   16c30:	0264      	lsls	r4, r4, #9
   16c32:	0a64      	lsrs	r4, r4, #9
   16c34:	b2db      	uxtb	r3, r3
   16c36:	0264      	lsls	r4, r4, #9
   16c38:	05db      	lsls	r3, r3, #23
   16c3a:	0a60      	lsrs	r0, r4, #9
   16c3c:	07d2      	lsls	r2, r2, #31
   16c3e:	4318      	orrs	r0, r3
   16c40:	4310      	orrs	r0, r2
   16c42:	bd70      	pop	{r4, r5, r6, pc}
   16c44:	2b99      	cmp	r3, #153	; 0x99
   16c46:	dc19      	bgt.n	16c7c <__aeabi_i2f+0x70>
   16c48:	2299      	movs	r2, #153	; 0x99
   16c4a:	1ad2      	subs	r2, r2, r3
   16c4c:	2a00      	cmp	r2, #0
   16c4e:	dd29      	ble.n	16ca4 <__aeabi_i2f+0x98>
   16c50:	4094      	lsls	r4, r2
   16c52:	0022      	movs	r2, r4
   16c54:	4c14      	ldr	r4, [pc, #80]	; (16ca8 <__aeabi_i2f+0x9c>)
   16c56:	4014      	ands	r4, r2
   16c58:	0751      	lsls	r1, r2, #29
   16c5a:	d004      	beq.n	16c66 <__aeabi_i2f+0x5a>
   16c5c:	210f      	movs	r1, #15
   16c5e:	400a      	ands	r2, r1
   16c60:	2a04      	cmp	r2, #4
   16c62:	d000      	beq.n	16c66 <__aeabi_i2f+0x5a>
   16c64:	3404      	adds	r4, #4
   16c66:	0162      	lsls	r2, r4, #5
   16c68:	d413      	bmi.n	16c92 <__aeabi_i2f+0x86>
   16c6a:	01a4      	lsls	r4, r4, #6
   16c6c:	0a64      	lsrs	r4, r4, #9
   16c6e:	b2db      	uxtb	r3, r3
   16c70:	002a      	movs	r2, r5
   16c72:	e7e0      	b.n	16c36 <__aeabi_i2f+0x2a>
   16c74:	2200      	movs	r2, #0
   16c76:	2300      	movs	r3, #0
   16c78:	2400      	movs	r4, #0
   16c7a:	e7dc      	b.n	16c36 <__aeabi_i2f+0x2a>
   16c7c:	2205      	movs	r2, #5
   16c7e:	0021      	movs	r1, r4
   16c80:	1a12      	subs	r2, r2, r0
   16c82:	40d1      	lsrs	r1, r2
   16c84:	22b9      	movs	r2, #185	; 0xb9
   16c86:	1ad2      	subs	r2, r2, r3
   16c88:	4094      	lsls	r4, r2
   16c8a:	1e62      	subs	r2, r4, #1
   16c8c:	4194      	sbcs	r4, r2
   16c8e:	430c      	orrs	r4, r1
   16c90:	e7da      	b.n	16c48 <__aeabi_i2f+0x3c>
   16c92:	4b05      	ldr	r3, [pc, #20]	; (16ca8 <__aeabi_i2f+0x9c>)
   16c94:	002a      	movs	r2, r5
   16c96:	401c      	ands	r4, r3
   16c98:	239f      	movs	r3, #159	; 0x9f
   16c9a:	01a4      	lsls	r4, r4, #6
   16c9c:	1a1b      	subs	r3, r3, r0
   16c9e:	0a64      	lsrs	r4, r4, #9
   16ca0:	b2db      	uxtb	r3, r3
   16ca2:	e7c8      	b.n	16c36 <__aeabi_i2f+0x2a>
   16ca4:	0022      	movs	r2, r4
   16ca6:	e7d5      	b.n	16c54 <__aeabi_i2f+0x48>
   16ca8:	fbffffff 	.word	0xfbffffff

00016cac <__aeabi_dadd>:
   16cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16cae:	4645      	mov	r5, r8
   16cb0:	46de      	mov	lr, fp
   16cb2:	4657      	mov	r7, sl
   16cb4:	464e      	mov	r6, r9
   16cb6:	030c      	lsls	r4, r1, #12
   16cb8:	b5e0      	push	{r5, r6, r7, lr}
   16cba:	004e      	lsls	r6, r1, #1
   16cbc:	0fc9      	lsrs	r1, r1, #31
   16cbe:	4688      	mov	r8, r1
   16cc0:	000d      	movs	r5, r1
   16cc2:	0a61      	lsrs	r1, r4, #9
   16cc4:	0f44      	lsrs	r4, r0, #29
   16cc6:	430c      	orrs	r4, r1
   16cc8:	00c7      	lsls	r7, r0, #3
   16cca:	0319      	lsls	r1, r3, #12
   16ccc:	0058      	lsls	r0, r3, #1
   16cce:	0fdb      	lsrs	r3, r3, #31
   16cd0:	469b      	mov	fp, r3
   16cd2:	0a4b      	lsrs	r3, r1, #9
   16cd4:	0f51      	lsrs	r1, r2, #29
   16cd6:	430b      	orrs	r3, r1
   16cd8:	0d76      	lsrs	r6, r6, #21
   16cda:	0d40      	lsrs	r0, r0, #21
   16cdc:	0019      	movs	r1, r3
   16cde:	00d2      	lsls	r2, r2, #3
   16ce0:	45d8      	cmp	r8, fp
   16ce2:	d100      	bne.n	16ce6 <__aeabi_dadd+0x3a>
   16ce4:	e0ae      	b.n	16e44 <__aeabi_dadd+0x198>
   16ce6:	1a35      	subs	r5, r6, r0
   16ce8:	2d00      	cmp	r5, #0
   16cea:	dc00      	bgt.n	16cee <__aeabi_dadd+0x42>
   16cec:	e0f6      	b.n	16edc <__aeabi_dadd+0x230>
   16cee:	2800      	cmp	r0, #0
   16cf0:	d10f      	bne.n	16d12 <__aeabi_dadd+0x66>
   16cf2:	4313      	orrs	r3, r2
   16cf4:	d100      	bne.n	16cf8 <__aeabi_dadd+0x4c>
   16cf6:	e0db      	b.n	16eb0 <__aeabi_dadd+0x204>
   16cf8:	1e6b      	subs	r3, r5, #1
   16cfa:	2b00      	cmp	r3, #0
   16cfc:	d000      	beq.n	16d00 <__aeabi_dadd+0x54>
   16cfe:	e137      	b.n	16f70 <__aeabi_dadd+0x2c4>
   16d00:	1aba      	subs	r2, r7, r2
   16d02:	4297      	cmp	r7, r2
   16d04:	41bf      	sbcs	r7, r7
   16d06:	1a64      	subs	r4, r4, r1
   16d08:	427f      	negs	r7, r7
   16d0a:	1be4      	subs	r4, r4, r7
   16d0c:	2601      	movs	r6, #1
   16d0e:	0017      	movs	r7, r2
   16d10:	e024      	b.n	16d5c <__aeabi_dadd+0xb0>
   16d12:	4bc6      	ldr	r3, [pc, #792]	; (1702c <__aeabi_dadd+0x380>)
   16d14:	429e      	cmp	r6, r3
   16d16:	d04d      	beq.n	16db4 <__aeabi_dadd+0x108>
   16d18:	2380      	movs	r3, #128	; 0x80
   16d1a:	041b      	lsls	r3, r3, #16
   16d1c:	4319      	orrs	r1, r3
   16d1e:	2d38      	cmp	r5, #56	; 0x38
   16d20:	dd00      	ble.n	16d24 <__aeabi_dadd+0x78>
   16d22:	e107      	b.n	16f34 <__aeabi_dadd+0x288>
   16d24:	2d1f      	cmp	r5, #31
   16d26:	dd00      	ble.n	16d2a <__aeabi_dadd+0x7e>
   16d28:	e138      	b.n	16f9c <__aeabi_dadd+0x2f0>
   16d2a:	2020      	movs	r0, #32
   16d2c:	1b43      	subs	r3, r0, r5
   16d2e:	469a      	mov	sl, r3
   16d30:	000b      	movs	r3, r1
   16d32:	4650      	mov	r0, sl
   16d34:	4083      	lsls	r3, r0
   16d36:	4699      	mov	r9, r3
   16d38:	0013      	movs	r3, r2
   16d3a:	4648      	mov	r0, r9
   16d3c:	40eb      	lsrs	r3, r5
   16d3e:	4318      	orrs	r0, r3
   16d40:	0003      	movs	r3, r0
   16d42:	4650      	mov	r0, sl
   16d44:	4082      	lsls	r2, r0
   16d46:	1e50      	subs	r0, r2, #1
   16d48:	4182      	sbcs	r2, r0
   16d4a:	40e9      	lsrs	r1, r5
   16d4c:	431a      	orrs	r2, r3
   16d4e:	1aba      	subs	r2, r7, r2
   16d50:	1a61      	subs	r1, r4, r1
   16d52:	4297      	cmp	r7, r2
   16d54:	41a4      	sbcs	r4, r4
   16d56:	0017      	movs	r7, r2
   16d58:	4264      	negs	r4, r4
   16d5a:	1b0c      	subs	r4, r1, r4
   16d5c:	0223      	lsls	r3, r4, #8
   16d5e:	d562      	bpl.n	16e26 <__aeabi_dadd+0x17a>
   16d60:	0264      	lsls	r4, r4, #9
   16d62:	0a65      	lsrs	r5, r4, #9
   16d64:	2d00      	cmp	r5, #0
   16d66:	d100      	bne.n	16d6a <__aeabi_dadd+0xbe>
   16d68:	e0df      	b.n	16f2a <__aeabi_dadd+0x27e>
   16d6a:	0028      	movs	r0, r5
   16d6c:	f001 fd98 	bl	188a0 <__clzsi2>
   16d70:	0003      	movs	r3, r0
   16d72:	3b08      	subs	r3, #8
   16d74:	2b1f      	cmp	r3, #31
   16d76:	dd00      	ble.n	16d7a <__aeabi_dadd+0xce>
   16d78:	e0d2      	b.n	16f20 <__aeabi_dadd+0x274>
   16d7a:	2220      	movs	r2, #32
   16d7c:	003c      	movs	r4, r7
   16d7e:	1ad2      	subs	r2, r2, r3
   16d80:	409d      	lsls	r5, r3
   16d82:	40d4      	lsrs	r4, r2
   16d84:	409f      	lsls	r7, r3
   16d86:	4325      	orrs	r5, r4
   16d88:	429e      	cmp	r6, r3
   16d8a:	dd00      	ble.n	16d8e <__aeabi_dadd+0xe2>
   16d8c:	e0c4      	b.n	16f18 <__aeabi_dadd+0x26c>
   16d8e:	1b9e      	subs	r6, r3, r6
   16d90:	1c73      	adds	r3, r6, #1
   16d92:	2b1f      	cmp	r3, #31
   16d94:	dd00      	ble.n	16d98 <__aeabi_dadd+0xec>
   16d96:	e0f1      	b.n	16f7c <__aeabi_dadd+0x2d0>
   16d98:	2220      	movs	r2, #32
   16d9a:	0038      	movs	r0, r7
   16d9c:	0029      	movs	r1, r5
   16d9e:	1ad2      	subs	r2, r2, r3
   16da0:	40d8      	lsrs	r0, r3
   16da2:	4091      	lsls	r1, r2
   16da4:	4097      	lsls	r7, r2
   16da6:	002c      	movs	r4, r5
   16da8:	4301      	orrs	r1, r0
   16daa:	1e78      	subs	r0, r7, #1
   16dac:	4187      	sbcs	r7, r0
   16dae:	40dc      	lsrs	r4, r3
   16db0:	2600      	movs	r6, #0
   16db2:	430f      	orrs	r7, r1
   16db4:	077b      	lsls	r3, r7, #29
   16db6:	d009      	beq.n	16dcc <__aeabi_dadd+0x120>
   16db8:	230f      	movs	r3, #15
   16dba:	403b      	ands	r3, r7
   16dbc:	2b04      	cmp	r3, #4
   16dbe:	d005      	beq.n	16dcc <__aeabi_dadd+0x120>
   16dc0:	1d3b      	adds	r3, r7, #4
   16dc2:	42bb      	cmp	r3, r7
   16dc4:	41bf      	sbcs	r7, r7
   16dc6:	427f      	negs	r7, r7
   16dc8:	19e4      	adds	r4, r4, r7
   16dca:	001f      	movs	r7, r3
   16dcc:	0223      	lsls	r3, r4, #8
   16dce:	d52c      	bpl.n	16e2a <__aeabi_dadd+0x17e>
   16dd0:	4b96      	ldr	r3, [pc, #600]	; (1702c <__aeabi_dadd+0x380>)
   16dd2:	3601      	adds	r6, #1
   16dd4:	429e      	cmp	r6, r3
   16dd6:	d100      	bne.n	16dda <__aeabi_dadd+0x12e>
   16dd8:	e09a      	b.n	16f10 <__aeabi_dadd+0x264>
   16dda:	4645      	mov	r5, r8
   16ddc:	4b94      	ldr	r3, [pc, #592]	; (17030 <__aeabi_dadd+0x384>)
   16dde:	08ff      	lsrs	r7, r7, #3
   16de0:	401c      	ands	r4, r3
   16de2:	0760      	lsls	r0, r4, #29
   16de4:	0576      	lsls	r6, r6, #21
   16de6:	0264      	lsls	r4, r4, #9
   16de8:	4307      	orrs	r7, r0
   16dea:	0b24      	lsrs	r4, r4, #12
   16dec:	0d76      	lsrs	r6, r6, #21
   16dee:	2100      	movs	r1, #0
   16df0:	0324      	lsls	r4, r4, #12
   16df2:	0b23      	lsrs	r3, r4, #12
   16df4:	0d0c      	lsrs	r4, r1, #20
   16df6:	4a8f      	ldr	r2, [pc, #572]	; (17034 <__aeabi_dadd+0x388>)
   16df8:	0524      	lsls	r4, r4, #20
   16dfa:	431c      	orrs	r4, r3
   16dfc:	4014      	ands	r4, r2
   16dfe:	0533      	lsls	r3, r6, #20
   16e00:	4323      	orrs	r3, r4
   16e02:	005b      	lsls	r3, r3, #1
   16e04:	07ed      	lsls	r5, r5, #31
   16e06:	085b      	lsrs	r3, r3, #1
   16e08:	432b      	orrs	r3, r5
   16e0a:	0038      	movs	r0, r7
   16e0c:	0019      	movs	r1, r3
   16e0e:	bc3c      	pop	{r2, r3, r4, r5}
   16e10:	4690      	mov	r8, r2
   16e12:	4699      	mov	r9, r3
   16e14:	46a2      	mov	sl, r4
   16e16:	46ab      	mov	fp, r5
   16e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16e1a:	4664      	mov	r4, ip
   16e1c:	4304      	orrs	r4, r0
   16e1e:	d100      	bne.n	16e22 <__aeabi_dadd+0x176>
   16e20:	e211      	b.n	17246 <__aeabi_dadd+0x59a>
   16e22:	0004      	movs	r4, r0
   16e24:	4667      	mov	r7, ip
   16e26:	077b      	lsls	r3, r7, #29
   16e28:	d1c6      	bne.n	16db8 <__aeabi_dadd+0x10c>
   16e2a:	4645      	mov	r5, r8
   16e2c:	0760      	lsls	r0, r4, #29
   16e2e:	08ff      	lsrs	r7, r7, #3
   16e30:	4307      	orrs	r7, r0
   16e32:	08e4      	lsrs	r4, r4, #3
   16e34:	4b7d      	ldr	r3, [pc, #500]	; (1702c <__aeabi_dadd+0x380>)
   16e36:	429e      	cmp	r6, r3
   16e38:	d030      	beq.n	16e9c <__aeabi_dadd+0x1f0>
   16e3a:	0324      	lsls	r4, r4, #12
   16e3c:	0576      	lsls	r6, r6, #21
   16e3e:	0b24      	lsrs	r4, r4, #12
   16e40:	0d76      	lsrs	r6, r6, #21
   16e42:	e7d4      	b.n	16dee <__aeabi_dadd+0x142>
   16e44:	1a33      	subs	r3, r6, r0
   16e46:	469a      	mov	sl, r3
   16e48:	2b00      	cmp	r3, #0
   16e4a:	dd78      	ble.n	16f3e <__aeabi_dadd+0x292>
   16e4c:	2800      	cmp	r0, #0
   16e4e:	d031      	beq.n	16eb4 <__aeabi_dadd+0x208>
   16e50:	4876      	ldr	r0, [pc, #472]	; (1702c <__aeabi_dadd+0x380>)
   16e52:	4286      	cmp	r6, r0
   16e54:	d0ae      	beq.n	16db4 <__aeabi_dadd+0x108>
   16e56:	2080      	movs	r0, #128	; 0x80
   16e58:	0400      	lsls	r0, r0, #16
   16e5a:	4301      	orrs	r1, r0
   16e5c:	4653      	mov	r3, sl
   16e5e:	2b38      	cmp	r3, #56	; 0x38
   16e60:	dc00      	bgt.n	16e64 <__aeabi_dadd+0x1b8>
   16e62:	e0e9      	b.n	17038 <__aeabi_dadd+0x38c>
   16e64:	430a      	orrs	r2, r1
   16e66:	1e51      	subs	r1, r2, #1
   16e68:	418a      	sbcs	r2, r1
   16e6a:	2100      	movs	r1, #0
   16e6c:	19d2      	adds	r2, r2, r7
   16e6e:	42ba      	cmp	r2, r7
   16e70:	41bf      	sbcs	r7, r7
   16e72:	1909      	adds	r1, r1, r4
   16e74:	427c      	negs	r4, r7
   16e76:	0017      	movs	r7, r2
   16e78:	190c      	adds	r4, r1, r4
   16e7a:	0223      	lsls	r3, r4, #8
   16e7c:	d5d3      	bpl.n	16e26 <__aeabi_dadd+0x17a>
   16e7e:	4b6b      	ldr	r3, [pc, #428]	; (1702c <__aeabi_dadd+0x380>)
   16e80:	3601      	adds	r6, #1
   16e82:	429e      	cmp	r6, r3
   16e84:	d100      	bne.n	16e88 <__aeabi_dadd+0x1dc>
   16e86:	e13a      	b.n	170fe <__aeabi_dadd+0x452>
   16e88:	2001      	movs	r0, #1
   16e8a:	4b69      	ldr	r3, [pc, #420]	; (17030 <__aeabi_dadd+0x384>)
   16e8c:	401c      	ands	r4, r3
   16e8e:	087b      	lsrs	r3, r7, #1
   16e90:	4007      	ands	r7, r0
   16e92:	431f      	orrs	r7, r3
   16e94:	07e0      	lsls	r0, r4, #31
   16e96:	4307      	orrs	r7, r0
   16e98:	0864      	lsrs	r4, r4, #1
   16e9a:	e78b      	b.n	16db4 <__aeabi_dadd+0x108>
   16e9c:	0023      	movs	r3, r4
   16e9e:	433b      	orrs	r3, r7
   16ea0:	d100      	bne.n	16ea4 <__aeabi_dadd+0x1f8>
   16ea2:	e1cb      	b.n	1723c <__aeabi_dadd+0x590>
   16ea4:	2280      	movs	r2, #128	; 0x80
   16ea6:	0312      	lsls	r2, r2, #12
   16ea8:	4314      	orrs	r4, r2
   16eaa:	0324      	lsls	r4, r4, #12
   16eac:	0b24      	lsrs	r4, r4, #12
   16eae:	e79e      	b.n	16dee <__aeabi_dadd+0x142>
   16eb0:	002e      	movs	r6, r5
   16eb2:	e77f      	b.n	16db4 <__aeabi_dadd+0x108>
   16eb4:	0008      	movs	r0, r1
   16eb6:	4310      	orrs	r0, r2
   16eb8:	d100      	bne.n	16ebc <__aeabi_dadd+0x210>
   16eba:	e0b4      	b.n	17026 <__aeabi_dadd+0x37a>
   16ebc:	1e58      	subs	r0, r3, #1
   16ebe:	2800      	cmp	r0, #0
   16ec0:	d000      	beq.n	16ec4 <__aeabi_dadd+0x218>
   16ec2:	e0de      	b.n	17082 <__aeabi_dadd+0x3d6>
   16ec4:	18ba      	adds	r2, r7, r2
   16ec6:	42ba      	cmp	r2, r7
   16ec8:	419b      	sbcs	r3, r3
   16eca:	1864      	adds	r4, r4, r1
   16ecc:	425b      	negs	r3, r3
   16ece:	18e4      	adds	r4, r4, r3
   16ed0:	0017      	movs	r7, r2
   16ed2:	2601      	movs	r6, #1
   16ed4:	0223      	lsls	r3, r4, #8
   16ed6:	d5a6      	bpl.n	16e26 <__aeabi_dadd+0x17a>
   16ed8:	2602      	movs	r6, #2
   16eda:	e7d5      	b.n	16e88 <__aeabi_dadd+0x1dc>
   16edc:	2d00      	cmp	r5, #0
   16ede:	d16e      	bne.n	16fbe <__aeabi_dadd+0x312>
   16ee0:	1c70      	adds	r0, r6, #1
   16ee2:	0540      	lsls	r0, r0, #21
   16ee4:	0d40      	lsrs	r0, r0, #21
   16ee6:	2801      	cmp	r0, #1
   16ee8:	dc00      	bgt.n	16eec <__aeabi_dadd+0x240>
   16eea:	e0f9      	b.n	170e0 <__aeabi_dadd+0x434>
   16eec:	1ab8      	subs	r0, r7, r2
   16eee:	4684      	mov	ip, r0
   16ef0:	4287      	cmp	r7, r0
   16ef2:	4180      	sbcs	r0, r0
   16ef4:	1ae5      	subs	r5, r4, r3
   16ef6:	4240      	negs	r0, r0
   16ef8:	1a2d      	subs	r5, r5, r0
   16efa:	0228      	lsls	r0, r5, #8
   16efc:	d400      	bmi.n	16f00 <__aeabi_dadd+0x254>
   16efe:	e089      	b.n	17014 <__aeabi_dadd+0x368>
   16f00:	1bd7      	subs	r7, r2, r7
   16f02:	42ba      	cmp	r2, r7
   16f04:	4192      	sbcs	r2, r2
   16f06:	1b1c      	subs	r4, r3, r4
   16f08:	4252      	negs	r2, r2
   16f0a:	1aa5      	subs	r5, r4, r2
   16f0c:	46d8      	mov	r8, fp
   16f0e:	e729      	b.n	16d64 <__aeabi_dadd+0xb8>
   16f10:	4645      	mov	r5, r8
   16f12:	2400      	movs	r4, #0
   16f14:	2700      	movs	r7, #0
   16f16:	e76a      	b.n	16dee <__aeabi_dadd+0x142>
   16f18:	4c45      	ldr	r4, [pc, #276]	; (17030 <__aeabi_dadd+0x384>)
   16f1a:	1af6      	subs	r6, r6, r3
   16f1c:	402c      	ands	r4, r5
   16f1e:	e749      	b.n	16db4 <__aeabi_dadd+0x108>
   16f20:	003d      	movs	r5, r7
   16f22:	3828      	subs	r0, #40	; 0x28
   16f24:	4085      	lsls	r5, r0
   16f26:	2700      	movs	r7, #0
   16f28:	e72e      	b.n	16d88 <__aeabi_dadd+0xdc>
   16f2a:	0038      	movs	r0, r7
   16f2c:	f001 fcb8 	bl	188a0 <__clzsi2>
   16f30:	3020      	adds	r0, #32
   16f32:	e71d      	b.n	16d70 <__aeabi_dadd+0xc4>
   16f34:	430a      	orrs	r2, r1
   16f36:	1e51      	subs	r1, r2, #1
   16f38:	418a      	sbcs	r2, r1
   16f3a:	2100      	movs	r1, #0
   16f3c:	e707      	b.n	16d4e <__aeabi_dadd+0xa2>
   16f3e:	2b00      	cmp	r3, #0
   16f40:	d000      	beq.n	16f44 <__aeabi_dadd+0x298>
   16f42:	e0f3      	b.n	1712c <__aeabi_dadd+0x480>
   16f44:	1c70      	adds	r0, r6, #1
   16f46:	0543      	lsls	r3, r0, #21
   16f48:	0d5b      	lsrs	r3, r3, #21
   16f4a:	2b01      	cmp	r3, #1
   16f4c:	dc00      	bgt.n	16f50 <__aeabi_dadd+0x2a4>
   16f4e:	e0ad      	b.n	170ac <__aeabi_dadd+0x400>
   16f50:	4b36      	ldr	r3, [pc, #216]	; (1702c <__aeabi_dadd+0x380>)
   16f52:	4298      	cmp	r0, r3
   16f54:	d100      	bne.n	16f58 <__aeabi_dadd+0x2ac>
   16f56:	e0d1      	b.n	170fc <__aeabi_dadd+0x450>
   16f58:	18ba      	adds	r2, r7, r2
   16f5a:	42ba      	cmp	r2, r7
   16f5c:	41bf      	sbcs	r7, r7
   16f5e:	1864      	adds	r4, r4, r1
   16f60:	427f      	negs	r7, r7
   16f62:	19e4      	adds	r4, r4, r7
   16f64:	07e7      	lsls	r7, r4, #31
   16f66:	0852      	lsrs	r2, r2, #1
   16f68:	4317      	orrs	r7, r2
   16f6a:	0864      	lsrs	r4, r4, #1
   16f6c:	0006      	movs	r6, r0
   16f6e:	e721      	b.n	16db4 <__aeabi_dadd+0x108>
   16f70:	482e      	ldr	r0, [pc, #184]	; (1702c <__aeabi_dadd+0x380>)
   16f72:	4285      	cmp	r5, r0
   16f74:	d100      	bne.n	16f78 <__aeabi_dadd+0x2cc>
   16f76:	e093      	b.n	170a0 <__aeabi_dadd+0x3f4>
   16f78:	001d      	movs	r5, r3
   16f7a:	e6d0      	b.n	16d1e <__aeabi_dadd+0x72>
   16f7c:	0029      	movs	r1, r5
   16f7e:	3e1f      	subs	r6, #31
   16f80:	40f1      	lsrs	r1, r6
   16f82:	2b20      	cmp	r3, #32
   16f84:	d100      	bne.n	16f88 <__aeabi_dadd+0x2dc>
   16f86:	e08d      	b.n	170a4 <__aeabi_dadd+0x3f8>
   16f88:	2240      	movs	r2, #64	; 0x40
   16f8a:	1ad3      	subs	r3, r2, r3
   16f8c:	409d      	lsls	r5, r3
   16f8e:	432f      	orrs	r7, r5
   16f90:	1e7d      	subs	r5, r7, #1
   16f92:	41af      	sbcs	r7, r5
   16f94:	2400      	movs	r4, #0
   16f96:	430f      	orrs	r7, r1
   16f98:	2600      	movs	r6, #0
   16f9a:	e744      	b.n	16e26 <__aeabi_dadd+0x17a>
   16f9c:	002b      	movs	r3, r5
   16f9e:	0008      	movs	r0, r1
   16fa0:	3b20      	subs	r3, #32
   16fa2:	40d8      	lsrs	r0, r3
   16fa4:	0003      	movs	r3, r0
   16fa6:	2d20      	cmp	r5, #32
   16fa8:	d100      	bne.n	16fac <__aeabi_dadd+0x300>
   16faa:	e07d      	b.n	170a8 <__aeabi_dadd+0x3fc>
   16fac:	2040      	movs	r0, #64	; 0x40
   16fae:	1b45      	subs	r5, r0, r5
   16fb0:	40a9      	lsls	r1, r5
   16fb2:	430a      	orrs	r2, r1
   16fb4:	1e51      	subs	r1, r2, #1
   16fb6:	418a      	sbcs	r2, r1
   16fb8:	2100      	movs	r1, #0
   16fba:	431a      	orrs	r2, r3
   16fbc:	e6c7      	b.n	16d4e <__aeabi_dadd+0xa2>
   16fbe:	2e00      	cmp	r6, #0
   16fc0:	d050      	beq.n	17064 <__aeabi_dadd+0x3b8>
   16fc2:	4e1a      	ldr	r6, [pc, #104]	; (1702c <__aeabi_dadd+0x380>)
   16fc4:	42b0      	cmp	r0, r6
   16fc6:	d057      	beq.n	17078 <__aeabi_dadd+0x3cc>
   16fc8:	2680      	movs	r6, #128	; 0x80
   16fca:	426b      	negs	r3, r5
   16fcc:	4699      	mov	r9, r3
   16fce:	0436      	lsls	r6, r6, #16
   16fd0:	4334      	orrs	r4, r6
   16fd2:	464b      	mov	r3, r9
   16fd4:	2b38      	cmp	r3, #56	; 0x38
   16fd6:	dd00      	ble.n	16fda <__aeabi_dadd+0x32e>
   16fd8:	e0d6      	b.n	17188 <__aeabi_dadd+0x4dc>
   16fda:	2b1f      	cmp	r3, #31
   16fdc:	dd00      	ble.n	16fe0 <__aeabi_dadd+0x334>
   16fde:	e135      	b.n	1724c <__aeabi_dadd+0x5a0>
   16fe0:	2620      	movs	r6, #32
   16fe2:	1af5      	subs	r5, r6, r3
   16fe4:	0026      	movs	r6, r4
   16fe6:	40ae      	lsls	r6, r5
   16fe8:	46b2      	mov	sl, r6
   16fea:	003e      	movs	r6, r7
   16fec:	40de      	lsrs	r6, r3
   16fee:	46ac      	mov	ip, r5
   16ff0:	0035      	movs	r5, r6
   16ff2:	4656      	mov	r6, sl
   16ff4:	432e      	orrs	r6, r5
   16ff6:	4665      	mov	r5, ip
   16ff8:	40af      	lsls	r7, r5
   16ffa:	1e7d      	subs	r5, r7, #1
   16ffc:	41af      	sbcs	r7, r5
   16ffe:	40dc      	lsrs	r4, r3
   17000:	4337      	orrs	r7, r6
   17002:	1bd7      	subs	r7, r2, r7
   17004:	42ba      	cmp	r2, r7
   17006:	4192      	sbcs	r2, r2
   17008:	1b0c      	subs	r4, r1, r4
   1700a:	4252      	negs	r2, r2
   1700c:	1aa4      	subs	r4, r4, r2
   1700e:	0006      	movs	r6, r0
   17010:	46d8      	mov	r8, fp
   17012:	e6a3      	b.n	16d5c <__aeabi_dadd+0xb0>
   17014:	4664      	mov	r4, ip
   17016:	4667      	mov	r7, ip
   17018:	432c      	orrs	r4, r5
   1701a:	d000      	beq.n	1701e <__aeabi_dadd+0x372>
   1701c:	e6a2      	b.n	16d64 <__aeabi_dadd+0xb8>
   1701e:	2500      	movs	r5, #0
   17020:	2600      	movs	r6, #0
   17022:	2700      	movs	r7, #0
   17024:	e706      	b.n	16e34 <__aeabi_dadd+0x188>
   17026:	001e      	movs	r6, r3
   17028:	e6c4      	b.n	16db4 <__aeabi_dadd+0x108>
   1702a:	46c0      	nop			; (mov r8, r8)
   1702c:	000007ff 	.word	0x000007ff
   17030:	ff7fffff 	.word	0xff7fffff
   17034:	800fffff 	.word	0x800fffff
   17038:	2b1f      	cmp	r3, #31
   1703a:	dc63      	bgt.n	17104 <__aeabi_dadd+0x458>
   1703c:	2020      	movs	r0, #32
   1703e:	1ac3      	subs	r3, r0, r3
   17040:	0008      	movs	r0, r1
   17042:	4098      	lsls	r0, r3
   17044:	469c      	mov	ip, r3
   17046:	4683      	mov	fp, r0
   17048:	4653      	mov	r3, sl
   1704a:	0010      	movs	r0, r2
   1704c:	40d8      	lsrs	r0, r3
   1704e:	0003      	movs	r3, r0
   17050:	4658      	mov	r0, fp
   17052:	4318      	orrs	r0, r3
   17054:	4663      	mov	r3, ip
   17056:	409a      	lsls	r2, r3
   17058:	1e53      	subs	r3, r2, #1
   1705a:	419a      	sbcs	r2, r3
   1705c:	4653      	mov	r3, sl
   1705e:	4302      	orrs	r2, r0
   17060:	40d9      	lsrs	r1, r3
   17062:	e703      	b.n	16e6c <__aeabi_dadd+0x1c0>
   17064:	0026      	movs	r6, r4
   17066:	433e      	orrs	r6, r7
   17068:	d006      	beq.n	17078 <__aeabi_dadd+0x3cc>
   1706a:	43eb      	mvns	r3, r5
   1706c:	4699      	mov	r9, r3
   1706e:	2b00      	cmp	r3, #0
   17070:	d0c7      	beq.n	17002 <__aeabi_dadd+0x356>
   17072:	4e94      	ldr	r6, [pc, #592]	; (172c4 <__aeabi_dadd+0x618>)
   17074:	42b0      	cmp	r0, r6
   17076:	d1ac      	bne.n	16fd2 <__aeabi_dadd+0x326>
   17078:	000c      	movs	r4, r1
   1707a:	0017      	movs	r7, r2
   1707c:	0006      	movs	r6, r0
   1707e:	46d8      	mov	r8, fp
   17080:	e698      	b.n	16db4 <__aeabi_dadd+0x108>
   17082:	4b90      	ldr	r3, [pc, #576]	; (172c4 <__aeabi_dadd+0x618>)
   17084:	459a      	cmp	sl, r3
   17086:	d00b      	beq.n	170a0 <__aeabi_dadd+0x3f4>
   17088:	4682      	mov	sl, r0
   1708a:	e6e7      	b.n	16e5c <__aeabi_dadd+0x1b0>
   1708c:	2800      	cmp	r0, #0
   1708e:	d000      	beq.n	17092 <__aeabi_dadd+0x3e6>
   17090:	e09e      	b.n	171d0 <__aeabi_dadd+0x524>
   17092:	0018      	movs	r0, r3
   17094:	4310      	orrs	r0, r2
   17096:	d100      	bne.n	1709a <__aeabi_dadd+0x3ee>
   17098:	e0e9      	b.n	1726e <__aeabi_dadd+0x5c2>
   1709a:	001c      	movs	r4, r3
   1709c:	0017      	movs	r7, r2
   1709e:	46d8      	mov	r8, fp
   170a0:	4e88      	ldr	r6, [pc, #544]	; (172c4 <__aeabi_dadd+0x618>)
   170a2:	e687      	b.n	16db4 <__aeabi_dadd+0x108>
   170a4:	2500      	movs	r5, #0
   170a6:	e772      	b.n	16f8e <__aeabi_dadd+0x2e2>
   170a8:	2100      	movs	r1, #0
   170aa:	e782      	b.n	16fb2 <__aeabi_dadd+0x306>
   170ac:	0023      	movs	r3, r4
   170ae:	433b      	orrs	r3, r7
   170b0:	2e00      	cmp	r6, #0
   170b2:	d000      	beq.n	170b6 <__aeabi_dadd+0x40a>
   170b4:	e0ab      	b.n	1720e <__aeabi_dadd+0x562>
   170b6:	2b00      	cmp	r3, #0
   170b8:	d100      	bne.n	170bc <__aeabi_dadd+0x410>
   170ba:	e0e7      	b.n	1728c <__aeabi_dadd+0x5e0>
   170bc:	000b      	movs	r3, r1
   170be:	4313      	orrs	r3, r2
   170c0:	d100      	bne.n	170c4 <__aeabi_dadd+0x418>
   170c2:	e677      	b.n	16db4 <__aeabi_dadd+0x108>
   170c4:	18ba      	adds	r2, r7, r2
   170c6:	42ba      	cmp	r2, r7
   170c8:	41bf      	sbcs	r7, r7
   170ca:	1864      	adds	r4, r4, r1
   170cc:	427f      	negs	r7, r7
   170ce:	19e4      	adds	r4, r4, r7
   170d0:	0223      	lsls	r3, r4, #8
   170d2:	d400      	bmi.n	170d6 <__aeabi_dadd+0x42a>
   170d4:	e0f2      	b.n	172bc <__aeabi_dadd+0x610>
   170d6:	4b7c      	ldr	r3, [pc, #496]	; (172c8 <__aeabi_dadd+0x61c>)
   170d8:	0017      	movs	r7, r2
   170da:	401c      	ands	r4, r3
   170dc:	0006      	movs	r6, r0
   170de:	e669      	b.n	16db4 <__aeabi_dadd+0x108>
   170e0:	0020      	movs	r0, r4
   170e2:	4338      	orrs	r0, r7
   170e4:	2e00      	cmp	r6, #0
   170e6:	d1d1      	bne.n	1708c <__aeabi_dadd+0x3e0>
   170e8:	2800      	cmp	r0, #0
   170ea:	d15b      	bne.n	171a4 <__aeabi_dadd+0x4f8>
   170ec:	001c      	movs	r4, r3
   170ee:	4314      	orrs	r4, r2
   170f0:	d100      	bne.n	170f4 <__aeabi_dadd+0x448>
   170f2:	e0a8      	b.n	17246 <__aeabi_dadd+0x59a>
   170f4:	001c      	movs	r4, r3
   170f6:	0017      	movs	r7, r2
   170f8:	46d8      	mov	r8, fp
   170fa:	e65b      	b.n	16db4 <__aeabi_dadd+0x108>
   170fc:	0006      	movs	r6, r0
   170fe:	2400      	movs	r4, #0
   17100:	2700      	movs	r7, #0
   17102:	e697      	b.n	16e34 <__aeabi_dadd+0x188>
   17104:	4650      	mov	r0, sl
   17106:	000b      	movs	r3, r1
   17108:	3820      	subs	r0, #32
   1710a:	40c3      	lsrs	r3, r0
   1710c:	4699      	mov	r9, r3
   1710e:	4653      	mov	r3, sl
   17110:	2b20      	cmp	r3, #32
   17112:	d100      	bne.n	17116 <__aeabi_dadd+0x46a>
   17114:	e095      	b.n	17242 <__aeabi_dadd+0x596>
   17116:	2340      	movs	r3, #64	; 0x40
   17118:	4650      	mov	r0, sl
   1711a:	1a1b      	subs	r3, r3, r0
   1711c:	4099      	lsls	r1, r3
   1711e:	430a      	orrs	r2, r1
   17120:	1e51      	subs	r1, r2, #1
   17122:	418a      	sbcs	r2, r1
   17124:	464b      	mov	r3, r9
   17126:	2100      	movs	r1, #0
   17128:	431a      	orrs	r2, r3
   1712a:	e69f      	b.n	16e6c <__aeabi_dadd+0x1c0>
   1712c:	2e00      	cmp	r6, #0
   1712e:	d130      	bne.n	17192 <__aeabi_dadd+0x4e6>
   17130:	0026      	movs	r6, r4
   17132:	433e      	orrs	r6, r7
   17134:	d067      	beq.n	17206 <__aeabi_dadd+0x55a>
   17136:	43db      	mvns	r3, r3
   17138:	469a      	mov	sl, r3
   1713a:	2b00      	cmp	r3, #0
   1713c:	d01c      	beq.n	17178 <__aeabi_dadd+0x4cc>
   1713e:	4e61      	ldr	r6, [pc, #388]	; (172c4 <__aeabi_dadd+0x618>)
   17140:	42b0      	cmp	r0, r6
   17142:	d060      	beq.n	17206 <__aeabi_dadd+0x55a>
   17144:	4653      	mov	r3, sl
   17146:	2b38      	cmp	r3, #56	; 0x38
   17148:	dd00      	ble.n	1714c <__aeabi_dadd+0x4a0>
   1714a:	e096      	b.n	1727a <__aeabi_dadd+0x5ce>
   1714c:	2b1f      	cmp	r3, #31
   1714e:	dd00      	ble.n	17152 <__aeabi_dadd+0x4a6>
   17150:	e09f      	b.n	17292 <__aeabi_dadd+0x5e6>
   17152:	2620      	movs	r6, #32
   17154:	1af3      	subs	r3, r6, r3
   17156:	0026      	movs	r6, r4
   17158:	409e      	lsls	r6, r3
   1715a:	469c      	mov	ip, r3
   1715c:	46b3      	mov	fp, r6
   1715e:	4653      	mov	r3, sl
   17160:	003e      	movs	r6, r7
   17162:	40de      	lsrs	r6, r3
   17164:	0033      	movs	r3, r6
   17166:	465e      	mov	r6, fp
   17168:	431e      	orrs	r6, r3
   1716a:	4663      	mov	r3, ip
   1716c:	409f      	lsls	r7, r3
   1716e:	1e7b      	subs	r3, r7, #1
   17170:	419f      	sbcs	r7, r3
   17172:	4653      	mov	r3, sl
   17174:	40dc      	lsrs	r4, r3
   17176:	4337      	orrs	r7, r6
   17178:	18bf      	adds	r7, r7, r2
   1717a:	4297      	cmp	r7, r2
   1717c:	4192      	sbcs	r2, r2
   1717e:	1864      	adds	r4, r4, r1
   17180:	4252      	negs	r2, r2
   17182:	18a4      	adds	r4, r4, r2
   17184:	0006      	movs	r6, r0
   17186:	e678      	b.n	16e7a <__aeabi_dadd+0x1ce>
   17188:	4327      	orrs	r7, r4
   1718a:	1e7c      	subs	r4, r7, #1
   1718c:	41a7      	sbcs	r7, r4
   1718e:	2400      	movs	r4, #0
   17190:	e737      	b.n	17002 <__aeabi_dadd+0x356>
   17192:	4e4c      	ldr	r6, [pc, #304]	; (172c4 <__aeabi_dadd+0x618>)
   17194:	42b0      	cmp	r0, r6
   17196:	d036      	beq.n	17206 <__aeabi_dadd+0x55a>
   17198:	2680      	movs	r6, #128	; 0x80
   1719a:	425b      	negs	r3, r3
   1719c:	0436      	lsls	r6, r6, #16
   1719e:	469a      	mov	sl, r3
   171a0:	4334      	orrs	r4, r6
   171a2:	e7cf      	b.n	17144 <__aeabi_dadd+0x498>
   171a4:	0018      	movs	r0, r3
   171a6:	4310      	orrs	r0, r2
   171a8:	d100      	bne.n	171ac <__aeabi_dadd+0x500>
   171aa:	e603      	b.n	16db4 <__aeabi_dadd+0x108>
   171ac:	1ab8      	subs	r0, r7, r2
   171ae:	4684      	mov	ip, r0
   171b0:	4567      	cmp	r7, ip
   171b2:	41ad      	sbcs	r5, r5
   171b4:	1ae0      	subs	r0, r4, r3
   171b6:	426d      	negs	r5, r5
   171b8:	1b40      	subs	r0, r0, r5
   171ba:	0205      	lsls	r5, r0, #8
   171bc:	d400      	bmi.n	171c0 <__aeabi_dadd+0x514>
   171be:	e62c      	b.n	16e1a <__aeabi_dadd+0x16e>
   171c0:	1bd7      	subs	r7, r2, r7
   171c2:	42ba      	cmp	r2, r7
   171c4:	4192      	sbcs	r2, r2
   171c6:	1b1c      	subs	r4, r3, r4
   171c8:	4252      	negs	r2, r2
   171ca:	1aa4      	subs	r4, r4, r2
   171cc:	46d8      	mov	r8, fp
   171ce:	e5f1      	b.n	16db4 <__aeabi_dadd+0x108>
   171d0:	0018      	movs	r0, r3
   171d2:	4310      	orrs	r0, r2
   171d4:	d100      	bne.n	171d8 <__aeabi_dadd+0x52c>
   171d6:	e763      	b.n	170a0 <__aeabi_dadd+0x3f4>
   171d8:	08f8      	lsrs	r0, r7, #3
   171da:	0767      	lsls	r7, r4, #29
   171dc:	4307      	orrs	r7, r0
   171de:	2080      	movs	r0, #128	; 0x80
   171e0:	08e4      	lsrs	r4, r4, #3
   171e2:	0300      	lsls	r0, r0, #12
   171e4:	4204      	tst	r4, r0
   171e6:	d008      	beq.n	171fa <__aeabi_dadd+0x54e>
   171e8:	08dd      	lsrs	r5, r3, #3
   171ea:	4205      	tst	r5, r0
   171ec:	d105      	bne.n	171fa <__aeabi_dadd+0x54e>
   171ee:	08d2      	lsrs	r2, r2, #3
   171f0:	0759      	lsls	r1, r3, #29
   171f2:	4311      	orrs	r1, r2
   171f4:	000f      	movs	r7, r1
   171f6:	002c      	movs	r4, r5
   171f8:	46d8      	mov	r8, fp
   171fa:	0f7b      	lsrs	r3, r7, #29
   171fc:	00e4      	lsls	r4, r4, #3
   171fe:	431c      	orrs	r4, r3
   17200:	00ff      	lsls	r7, r7, #3
   17202:	4e30      	ldr	r6, [pc, #192]	; (172c4 <__aeabi_dadd+0x618>)
   17204:	e5d6      	b.n	16db4 <__aeabi_dadd+0x108>
   17206:	000c      	movs	r4, r1
   17208:	0017      	movs	r7, r2
   1720a:	0006      	movs	r6, r0
   1720c:	e5d2      	b.n	16db4 <__aeabi_dadd+0x108>
   1720e:	2b00      	cmp	r3, #0
   17210:	d038      	beq.n	17284 <__aeabi_dadd+0x5d8>
   17212:	000b      	movs	r3, r1
   17214:	4313      	orrs	r3, r2
   17216:	d100      	bne.n	1721a <__aeabi_dadd+0x56e>
   17218:	e742      	b.n	170a0 <__aeabi_dadd+0x3f4>
   1721a:	08f8      	lsrs	r0, r7, #3
   1721c:	0767      	lsls	r7, r4, #29
   1721e:	4307      	orrs	r7, r0
   17220:	2080      	movs	r0, #128	; 0x80
   17222:	08e4      	lsrs	r4, r4, #3
   17224:	0300      	lsls	r0, r0, #12
   17226:	4204      	tst	r4, r0
   17228:	d0e7      	beq.n	171fa <__aeabi_dadd+0x54e>
   1722a:	08cb      	lsrs	r3, r1, #3
   1722c:	4203      	tst	r3, r0
   1722e:	d1e4      	bne.n	171fa <__aeabi_dadd+0x54e>
   17230:	08d2      	lsrs	r2, r2, #3
   17232:	0749      	lsls	r1, r1, #29
   17234:	4311      	orrs	r1, r2
   17236:	000f      	movs	r7, r1
   17238:	001c      	movs	r4, r3
   1723a:	e7de      	b.n	171fa <__aeabi_dadd+0x54e>
   1723c:	2700      	movs	r7, #0
   1723e:	2400      	movs	r4, #0
   17240:	e5d5      	b.n	16dee <__aeabi_dadd+0x142>
   17242:	2100      	movs	r1, #0
   17244:	e76b      	b.n	1711e <__aeabi_dadd+0x472>
   17246:	2500      	movs	r5, #0
   17248:	2700      	movs	r7, #0
   1724a:	e5f3      	b.n	16e34 <__aeabi_dadd+0x188>
   1724c:	464e      	mov	r6, r9
   1724e:	0025      	movs	r5, r4
   17250:	3e20      	subs	r6, #32
   17252:	40f5      	lsrs	r5, r6
   17254:	464b      	mov	r3, r9
   17256:	002e      	movs	r6, r5
   17258:	2b20      	cmp	r3, #32
   1725a:	d02d      	beq.n	172b8 <__aeabi_dadd+0x60c>
   1725c:	2540      	movs	r5, #64	; 0x40
   1725e:	1aed      	subs	r5, r5, r3
   17260:	40ac      	lsls	r4, r5
   17262:	4327      	orrs	r7, r4
   17264:	1e7c      	subs	r4, r7, #1
   17266:	41a7      	sbcs	r7, r4
   17268:	2400      	movs	r4, #0
   1726a:	4337      	orrs	r7, r6
   1726c:	e6c9      	b.n	17002 <__aeabi_dadd+0x356>
   1726e:	2480      	movs	r4, #128	; 0x80
   17270:	2500      	movs	r5, #0
   17272:	0324      	lsls	r4, r4, #12
   17274:	4e13      	ldr	r6, [pc, #76]	; (172c4 <__aeabi_dadd+0x618>)
   17276:	2700      	movs	r7, #0
   17278:	e5dc      	b.n	16e34 <__aeabi_dadd+0x188>
   1727a:	4327      	orrs	r7, r4
   1727c:	1e7c      	subs	r4, r7, #1
   1727e:	41a7      	sbcs	r7, r4
   17280:	2400      	movs	r4, #0
   17282:	e779      	b.n	17178 <__aeabi_dadd+0x4cc>
   17284:	000c      	movs	r4, r1
   17286:	0017      	movs	r7, r2
   17288:	4e0e      	ldr	r6, [pc, #56]	; (172c4 <__aeabi_dadd+0x618>)
   1728a:	e593      	b.n	16db4 <__aeabi_dadd+0x108>
   1728c:	000c      	movs	r4, r1
   1728e:	0017      	movs	r7, r2
   17290:	e590      	b.n	16db4 <__aeabi_dadd+0x108>
   17292:	4656      	mov	r6, sl
   17294:	0023      	movs	r3, r4
   17296:	3e20      	subs	r6, #32
   17298:	40f3      	lsrs	r3, r6
   1729a:	4699      	mov	r9, r3
   1729c:	4653      	mov	r3, sl
   1729e:	2b20      	cmp	r3, #32
   172a0:	d00e      	beq.n	172c0 <__aeabi_dadd+0x614>
   172a2:	2340      	movs	r3, #64	; 0x40
   172a4:	4656      	mov	r6, sl
   172a6:	1b9b      	subs	r3, r3, r6
   172a8:	409c      	lsls	r4, r3
   172aa:	4327      	orrs	r7, r4
   172ac:	1e7c      	subs	r4, r7, #1
   172ae:	41a7      	sbcs	r7, r4
   172b0:	464b      	mov	r3, r9
   172b2:	2400      	movs	r4, #0
   172b4:	431f      	orrs	r7, r3
   172b6:	e75f      	b.n	17178 <__aeabi_dadd+0x4cc>
   172b8:	2400      	movs	r4, #0
   172ba:	e7d2      	b.n	17262 <__aeabi_dadd+0x5b6>
   172bc:	0017      	movs	r7, r2
   172be:	e5b2      	b.n	16e26 <__aeabi_dadd+0x17a>
   172c0:	2400      	movs	r4, #0
   172c2:	e7f2      	b.n	172aa <__aeabi_dadd+0x5fe>
   172c4:	000007ff 	.word	0x000007ff
   172c8:	ff7fffff 	.word	0xff7fffff

000172cc <__aeabi_ddiv>:
   172cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   172ce:	4657      	mov	r7, sl
   172d0:	4645      	mov	r5, r8
   172d2:	46de      	mov	lr, fp
   172d4:	464e      	mov	r6, r9
   172d6:	b5e0      	push	{r5, r6, r7, lr}
   172d8:	004c      	lsls	r4, r1, #1
   172da:	030e      	lsls	r6, r1, #12
   172dc:	b087      	sub	sp, #28
   172de:	4683      	mov	fp, r0
   172e0:	4692      	mov	sl, r2
   172e2:	001d      	movs	r5, r3
   172e4:	4680      	mov	r8, r0
   172e6:	0b36      	lsrs	r6, r6, #12
   172e8:	0d64      	lsrs	r4, r4, #21
   172ea:	0fcf      	lsrs	r7, r1, #31
   172ec:	2c00      	cmp	r4, #0
   172ee:	d04f      	beq.n	17390 <__aeabi_ddiv+0xc4>
   172f0:	4b6f      	ldr	r3, [pc, #444]	; (174b0 <__aeabi_ddiv+0x1e4>)
   172f2:	429c      	cmp	r4, r3
   172f4:	d035      	beq.n	17362 <__aeabi_ddiv+0x96>
   172f6:	2380      	movs	r3, #128	; 0x80
   172f8:	0f42      	lsrs	r2, r0, #29
   172fa:	041b      	lsls	r3, r3, #16
   172fc:	00f6      	lsls	r6, r6, #3
   172fe:	4313      	orrs	r3, r2
   17300:	4333      	orrs	r3, r6
   17302:	4699      	mov	r9, r3
   17304:	00c3      	lsls	r3, r0, #3
   17306:	4698      	mov	r8, r3
   17308:	4b6a      	ldr	r3, [pc, #424]	; (174b4 <__aeabi_ddiv+0x1e8>)
   1730a:	2600      	movs	r6, #0
   1730c:	469c      	mov	ip, r3
   1730e:	2300      	movs	r3, #0
   17310:	4464      	add	r4, ip
   17312:	9303      	str	r3, [sp, #12]
   17314:	032b      	lsls	r3, r5, #12
   17316:	0b1b      	lsrs	r3, r3, #12
   17318:	469b      	mov	fp, r3
   1731a:	006b      	lsls	r3, r5, #1
   1731c:	0fed      	lsrs	r5, r5, #31
   1731e:	4650      	mov	r0, sl
   17320:	0d5b      	lsrs	r3, r3, #21
   17322:	9501      	str	r5, [sp, #4]
   17324:	d05e      	beq.n	173e4 <__aeabi_ddiv+0x118>
   17326:	4a62      	ldr	r2, [pc, #392]	; (174b0 <__aeabi_ddiv+0x1e4>)
   17328:	4293      	cmp	r3, r2
   1732a:	d053      	beq.n	173d4 <__aeabi_ddiv+0x108>
   1732c:	465a      	mov	r2, fp
   1732e:	00d1      	lsls	r1, r2, #3
   17330:	2280      	movs	r2, #128	; 0x80
   17332:	0f40      	lsrs	r0, r0, #29
   17334:	0412      	lsls	r2, r2, #16
   17336:	4302      	orrs	r2, r0
   17338:	430a      	orrs	r2, r1
   1733a:	4693      	mov	fp, r2
   1733c:	4652      	mov	r2, sl
   1733e:	00d1      	lsls	r1, r2, #3
   17340:	4a5c      	ldr	r2, [pc, #368]	; (174b4 <__aeabi_ddiv+0x1e8>)
   17342:	4694      	mov	ip, r2
   17344:	2200      	movs	r2, #0
   17346:	4463      	add	r3, ip
   17348:	0038      	movs	r0, r7
   1734a:	4068      	eors	r0, r5
   1734c:	4684      	mov	ip, r0
   1734e:	9002      	str	r0, [sp, #8]
   17350:	1ae4      	subs	r4, r4, r3
   17352:	4316      	orrs	r6, r2
   17354:	2e0f      	cmp	r6, #15
   17356:	d900      	bls.n	1735a <__aeabi_ddiv+0x8e>
   17358:	e0b4      	b.n	174c4 <__aeabi_ddiv+0x1f8>
   1735a:	4b57      	ldr	r3, [pc, #348]	; (174b8 <__aeabi_ddiv+0x1ec>)
   1735c:	00b6      	lsls	r6, r6, #2
   1735e:	599b      	ldr	r3, [r3, r6]
   17360:	469f      	mov	pc, r3
   17362:	0003      	movs	r3, r0
   17364:	4333      	orrs	r3, r6
   17366:	4699      	mov	r9, r3
   17368:	d16c      	bne.n	17444 <__aeabi_ddiv+0x178>
   1736a:	2300      	movs	r3, #0
   1736c:	4698      	mov	r8, r3
   1736e:	3302      	adds	r3, #2
   17370:	2608      	movs	r6, #8
   17372:	9303      	str	r3, [sp, #12]
   17374:	e7ce      	b.n	17314 <__aeabi_ddiv+0x48>
   17376:	46cb      	mov	fp, r9
   17378:	4641      	mov	r1, r8
   1737a:	9a03      	ldr	r2, [sp, #12]
   1737c:	9701      	str	r7, [sp, #4]
   1737e:	2a02      	cmp	r2, #2
   17380:	d165      	bne.n	1744e <__aeabi_ddiv+0x182>
   17382:	9b01      	ldr	r3, [sp, #4]
   17384:	4c4a      	ldr	r4, [pc, #296]	; (174b0 <__aeabi_ddiv+0x1e4>)
   17386:	469c      	mov	ip, r3
   17388:	2300      	movs	r3, #0
   1738a:	2200      	movs	r2, #0
   1738c:	4698      	mov	r8, r3
   1738e:	e06b      	b.n	17468 <__aeabi_ddiv+0x19c>
   17390:	0003      	movs	r3, r0
   17392:	4333      	orrs	r3, r6
   17394:	4699      	mov	r9, r3
   17396:	d04e      	beq.n	17436 <__aeabi_ddiv+0x16a>
   17398:	2e00      	cmp	r6, #0
   1739a:	d100      	bne.n	1739e <__aeabi_ddiv+0xd2>
   1739c:	e1bc      	b.n	17718 <__aeabi_ddiv+0x44c>
   1739e:	0030      	movs	r0, r6
   173a0:	f001 fa7e 	bl	188a0 <__clzsi2>
   173a4:	0003      	movs	r3, r0
   173a6:	3b0b      	subs	r3, #11
   173a8:	2b1c      	cmp	r3, #28
   173aa:	dd00      	ble.n	173ae <__aeabi_ddiv+0xe2>
   173ac:	e1ac      	b.n	17708 <__aeabi_ddiv+0x43c>
   173ae:	221d      	movs	r2, #29
   173b0:	1ad3      	subs	r3, r2, r3
   173b2:	465a      	mov	r2, fp
   173b4:	0001      	movs	r1, r0
   173b6:	40da      	lsrs	r2, r3
   173b8:	3908      	subs	r1, #8
   173ba:	408e      	lsls	r6, r1
   173bc:	0013      	movs	r3, r2
   173be:	4333      	orrs	r3, r6
   173c0:	4699      	mov	r9, r3
   173c2:	465b      	mov	r3, fp
   173c4:	408b      	lsls	r3, r1
   173c6:	4698      	mov	r8, r3
   173c8:	2300      	movs	r3, #0
   173ca:	4c3c      	ldr	r4, [pc, #240]	; (174bc <__aeabi_ddiv+0x1f0>)
   173cc:	2600      	movs	r6, #0
   173ce:	1a24      	subs	r4, r4, r0
   173d0:	9303      	str	r3, [sp, #12]
   173d2:	e79f      	b.n	17314 <__aeabi_ddiv+0x48>
   173d4:	4651      	mov	r1, sl
   173d6:	465a      	mov	r2, fp
   173d8:	4311      	orrs	r1, r2
   173da:	d129      	bne.n	17430 <__aeabi_ddiv+0x164>
   173dc:	2200      	movs	r2, #0
   173de:	4693      	mov	fp, r2
   173e0:	3202      	adds	r2, #2
   173e2:	e7b1      	b.n	17348 <__aeabi_ddiv+0x7c>
   173e4:	4659      	mov	r1, fp
   173e6:	4301      	orrs	r1, r0
   173e8:	d01e      	beq.n	17428 <__aeabi_ddiv+0x15c>
   173ea:	465b      	mov	r3, fp
   173ec:	2b00      	cmp	r3, #0
   173ee:	d100      	bne.n	173f2 <__aeabi_ddiv+0x126>
   173f0:	e19e      	b.n	17730 <__aeabi_ddiv+0x464>
   173f2:	4658      	mov	r0, fp
   173f4:	f001 fa54 	bl	188a0 <__clzsi2>
   173f8:	0003      	movs	r3, r0
   173fa:	3b0b      	subs	r3, #11
   173fc:	2b1c      	cmp	r3, #28
   173fe:	dd00      	ble.n	17402 <__aeabi_ddiv+0x136>
   17400:	e18f      	b.n	17722 <__aeabi_ddiv+0x456>
   17402:	0002      	movs	r2, r0
   17404:	4659      	mov	r1, fp
   17406:	3a08      	subs	r2, #8
   17408:	4091      	lsls	r1, r2
   1740a:	468b      	mov	fp, r1
   1740c:	211d      	movs	r1, #29
   1740e:	1acb      	subs	r3, r1, r3
   17410:	4651      	mov	r1, sl
   17412:	40d9      	lsrs	r1, r3
   17414:	000b      	movs	r3, r1
   17416:	4659      	mov	r1, fp
   17418:	430b      	orrs	r3, r1
   1741a:	4651      	mov	r1, sl
   1741c:	469b      	mov	fp, r3
   1741e:	4091      	lsls	r1, r2
   17420:	4b26      	ldr	r3, [pc, #152]	; (174bc <__aeabi_ddiv+0x1f0>)
   17422:	2200      	movs	r2, #0
   17424:	1a1b      	subs	r3, r3, r0
   17426:	e78f      	b.n	17348 <__aeabi_ddiv+0x7c>
   17428:	2300      	movs	r3, #0
   1742a:	2201      	movs	r2, #1
   1742c:	469b      	mov	fp, r3
   1742e:	e78b      	b.n	17348 <__aeabi_ddiv+0x7c>
   17430:	4651      	mov	r1, sl
   17432:	2203      	movs	r2, #3
   17434:	e788      	b.n	17348 <__aeabi_ddiv+0x7c>
   17436:	2300      	movs	r3, #0
   17438:	4698      	mov	r8, r3
   1743a:	3301      	adds	r3, #1
   1743c:	2604      	movs	r6, #4
   1743e:	2400      	movs	r4, #0
   17440:	9303      	str	r3, [sp, #12]
   17442:	e767      	b.n	17314 <__aeabi_ddiv+0x48>
   17444:	2303      	movs	r3, #3
   17446:	46b1      	mov	r9, r6
   17448:	9303      	str	r3, [sp, #12]
   1744a:	260c      	movs	r6, #12
   1744c:	e762      	b.n	17314 <__aeabi_ddiv+0x48>
   1744e:	2a03      	cmp	r2, #3
   17450:	d100      	bne.n	17454 <__aeabi_ddiv+0x188>
   17452:	e25c      	b.n	1790e <__aeabi_ddiv+0x642>
   17454:	9b01      	ldr	r3, [sp, #4]
   17456:	2a01      	cmp	r2, #1
   17458:	d000      	beq.n	1745c <__aeabi_ddiv+0x190>
   1745a:	e1e4      	b.n	17826 <__aeabi_ddiv+0x55a>
   1745c:	4013      	ands	r3, r2
   1745e:	469c      	mov	ip, r3
   17460:	2300      	movs	r3, #0
   17462:	2400      	movs	r4, #0
   17464:	2200      	movs	r2, #0
   17466:	4698      	mov	r8, r3
   17468:	2100      	movs	r1, #0
   1746a:	0312      	lsls	r2, r2, #12
   1746c:	0b13      	lsrs	r3, r2, #12
   1746e:	0d0a      	lsrs	r2, r1, #20
   17470:	0512      	lsls	r2, r2, #20
   17472:	431a      	orrs	r2, r3
   17474:	0523      	lsls	r3, r4, #20
   17476:	4c12      	ldr	r4, [pc, #72]	; (174c0 <__aeabi_ddiv+0x1f4>)
   17478:	4640      	mov	r0, r8
   1747a:	4022      	ands	r2, r4
   1747c:	4313      	orrs	r3, r2
   1747e:	4662      	mov	r2, ip
   17480:	005b      	lsls	r3, r3, #1
   17482:	07d2      	lsls	r2, r2, #31
   17484:	085b      	lsrs	r3, r3, #1
   17486:	4313      	orrs	r3, r2
   17488:	0019      	movs	r1, r3
   1748a:	b007      	add	sp, #28
   1748c:	bc3c      	pop	{r2, r3, r4, r5}
   1748e:	4690      	mov	r8, r2
   17490:	4699      	mov	r9, r3
   17492:	46a2      	mov	sl, r4
   17494:	46ab      	mov	fp, r5
   17496:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17498:	2300      	movs	r3, #0
   1749a:	2280      	movs	r2, #128	; 0x80
   1749c:	469c      	mov	ip, r3
   1749e:	0312      	lsls	r2, r2, #12
   174a0:	4698      	mov	r8, r3
   174a2:	4c03      	ldr	r4, [pc, #12]	; (174b0 <__aeabi_ddiv+0x1e4>)
   174a4:	e7e0      	b.n	17468 <__aeabi_ddiv+0x19c>
   174a6:	2300      	movs	r3, #0
   174a8:	4c01      	ldr	r4, [pc, #4]	; (174b0 <__aeabi_ddiv+0x1e4>)
   174aa:	2200      	movs	r2, #0
   174ac:	4698      	mov	r8, r3
   174ae:	e7db      	b.n	17468 <__aeabi_ddiv+0x19c>
   174b0:	000007ff 	.word	0x000007ff
   174b4:	fffffc01 	.word	0xfffffc01
   174b8:	0001b240 	.word	0x0001b240
   174bc:	fffffc0d 	.word	0xfffffc0d
   174c0:	800fffff 	.word	0x800fffff
   174c4:	45d9      	cmp	r9, fp
   174c6:	d900      	bls.n	174ca <__aeabi_ddiv+0x1fe>
   174c8:	e139      	b.n	1773e <__aeabi_ddiv+0x472>
   174ca:	d100      	bne.n	174ce <__aeabi_ddiv+0x202>
   174cc:	e134      	b.n	17738 <__aeabi_ddiv+0x46c>
   174ce:	2300      	movs	r3, #0
   174d0:	4646      	mov	r6, r8
   174d2:	464d      	mov	r5, r9
   174d4:	469a      	mov	sl, r3
   174d6:	3c01      	subs	r4, #1
   174d8:	465b      	mov	r3, fp
   174da:	0e0a      	lsrs	r2, r1, #24
   174dc:	021b      	lsls	r3, r3, #8
   174de:	431a      	orrs	r2, r3
   174e0:	020b      	lsls	r3, r1, #8
   174e2:	0c17      	lsrs	r7, r2, #16
   174e4:	9303      	str	r3, [sp, #12]
   174e6:	0413      	lsls	r3, r2, #16
   174e8:	0c1b      	lsrs	r3, r3, #16
   174ea:	0039      	movs	r1, r7
   174ec:	0028      	movs	r0, r5
   174ee:	4690      	mov	r8, r2
   174f0:	9301      	str	r3, [sp, #4]
   174f2:	f7fe ff45 	bl	16380 <__udivsi3>
   174f6:	0002      	movs	r2, r0
   174f8:	9b01      	ldr	r3, [sp, #4]
   174fa:	4683      	mov	fp, r0
   174fc:	435a      	muls	r2, r3
   174fe:	0028      	movs	r0, r5
   17500:	0039      	movs	r1, r7
   17502:	4691      	mov	r9, r2
   17504:	f7fe ffc2 	bl	1648c <__aeabi_uidivmod>
   17508:	0c35      	lsrs	r5, r6, #16
   1750a:	0409      	lsls	r1, r1, #16
   1750c:	430d      	orrs	r5, r1
   1750e:	45a9      	cmp	r9, r5
   17510:	d90d      	bls.n	1752e <__aeabi_ddiv+0x262>
   17512:	465b      	mov	r3, fp
   17514:	4445      	add	r5, r8
   17516:	3b01      	subs	r3, #1
   17518:	45a8      	cmp	r8, r5
   1751a:	d900      	bls.n	1751e <__aeabi_ddiv+0x252>
   1751c:	e13a      	b.n	17794 <__aeabi_ddiv+0x4c8>
   1751e:	45a9      	cmp	r9, r5
   17520:	d800      	bhi.n	17524 <__aeabi_ddiv+0x258>
   17522:	e137      	b.n	17794 <__aeabi_ddiv+0x4c8>
   17524:	2302      	movs	r3, #2
   17526:	425b      	negs	r3, r3
   17528:	469c      	mov	ip, r3
   1752a:	4445      	add	r5, r8
   1752c:	44e3      	add	fp, ip
   1752e:	464b      	mov	r3, r9
   17530:	1aeb      	subs	r3, r5, r3
   17532:	0039      	movs	r1, r7
   17534:	0018      	movs	r0, r3
   17536:	9304      	str	r3, [sp, #16]
   17538:	f7fe ff22 	bl	16380 <__udivsi3>
   1753c:	9b01      	ldr	r3, [sp, #4]
   1753e:	0005      	movs	r5, r0
   17540:	4343      	muls	r3, r0
   17542:	0039      	movs	r1, r7
   17544:	9804      	ldr	r0, [sp, #16]
   17546:	4699      	mov	r9, r3
   17548:	f7fe ffa0 	bl	1648c <__aeabi_uidivmod>
   1754c:	0433      	lsls	r3, r6, #16
   1754e:	0409      	lsls	r1, r1, #16
   17550:	0c1b      	lsrs	r3, r3, #16
   17552:	430b      	orrs	r3, r1
   17554:	4599      	cmp	r9, r3
   17556:	d909      	bls.n	1756c <__aeabi_ddiv+0x2a0>
   17558:	4443      	add	r3, r8
   1755a:	1e6a      	subs	r2, r5, #1
   1755c:	4598      	cmp	r8, r3
   1755e:	d900      	bls.n	17562 <__aeabi_ddiv+0x296>
   17560:	e11a      	b.n	17798 <__aeabi_ddiv+0x4cc>
   17562:	4599      	cmp	r9, r3
   17564:	d800      	bhi.n	17568 <__aeabi_ddiv+0x29c>
   17566:	e117      	b.n	17798 <__aeabi_ddiv+0x4cc>
   17568:	3d02      	subs	r5, #2
   1756a:	4443      	add	r3, r8
   1756c:	464a      	mov	r2, r9
   1756e:	1a9b      	subs	r3, r3, r2
   17570:	465a      	mov	r2, fp
   17572:	0412      	lsls	r2, r2, #16
   17574:	432a      	orrs	r2, r5
   17576:	9903      	ldr	r1, [sp, #12]
   17578:	4693      	mov	fp, r2
   1757a:	0c10      	lsrs	r0, r2, #16
   1757c:	0c0a      	lsrs	r2, r1, #16
   1757e:	4691      	mov	r9, r2
   17580:	0409      	lsls	r1, r1, #16
   17582:	465a      	mov	r2, fp
   17584:	0c09      	lsrs	r1, r1, #16
   17586:	464e      	mov	r6, r9
   17588:	000d      	movs	r5, r1
   1758a:	0412      	lsls	r2, r2, #16
   1758c:	0c12      	lsrs	r2, r2, #16
   1758e:	4345      	muls	r5, r0
   17590:	9105      	str	r1, [sp, #20]
   17592:	4351      	muls	r1, r2
   17594:	4372      	muls	r2, r6
   17596:	4370      	muls	r0, r6
   17598:	1952      	adds	r2, r2, r5
   1759a:	0c0e      	lsrs	r6, r1, #16
   1759c:	18b2      	adds	r2, r6, r2
   1759e:	4295      	cmp	r5, r2
   175a0:	d903      	bls.n	175aa <__aeabi_ddiv+0x2de>
   175a2:	2580      	movs	r5, #128	; 0x80
   175a4:	026d      	lsls	r5, r5, #9
   175a6:	46ac      	mov	ip, r5
   175a8:	4460      	add	r0, ip
   175aa:	0c15      	lsrs	r5, r2, #16
   175ac:	0409      	lsls	r1, r1, #16
   175ae:	0412      	lsls	r2, r2, #16
   175b0:	0c09      	lsrs	r1, r1, #16
   175b2:	1828      	adds	r0, r5, r0
   175b4:	1852      	adds	r2, r2, r1
   175b6:	4283      	cmp	r3, r0
   175b8:	d200      	bcs.n	175bc <__aeabi_ddiv+0x2f0>
   175ba:	e0ce      	b.n	1775a <__aeabi_ddiv+0x48e>
   175bc:	d100      	bne.n	175c0 <__aeabi_ddiv+0x2f4>
   175be:	e0c8      	b.n	17752 <__aeabi_ddiv+0x486>
   175c0:	1a1d      	subs	r5, r3, r0
   175c2:	4653      	mov	r3, sl
   175c4:	1a9e      	subs	r6, r3, r2
   175c6:	45b2      	cmp	sl, r6
   175c8:	4192      	sbcs	r2, r2
   175ca:	4252      	negs	r2, r2
   175cc:	1aab      	subs	r3, r5, r2
   175ce:	469a      	mov	sl, r3
   175d0:	4598      	cmp	r8, r3
   175d2:	d100      	bne.n	175d6 <__aeabi_ddiv+0x30a>
   175d4:	e117      	b.n	17806 <__aeabi_ddiv+0x53a>
   175d6:	0039      	movs	r1, r7
   175d8:	0018      	movs	r0, r3
   175da:	f7fe fed1 	bl	16380 <__udivsi3>
   175de:	9b01      	ldr	r3, [sp, #4]
   175e0:	0005      	movs	r5, r0
   175e2:	4343      	muls	r3, r0
   175e4:	0039      	movs	r1, r7
   175e6:	4650      	mov	r0, sl
   175e8:	9304      	str	r3, [sp, #16]
   175ea:	f7fe ff4f 	bl	1648c <__aeabi_uidivmod>
   175ee:	9804      	ldr	r0, [sp, #16]
   175f0:	040b      	lsls	r3, r1, #16
   175f2:	0c31      	lsrs	r1, r6, #16
   175f4:	4319      	orrs	r1, r3
   175f6:	4288      	cmp	r0, r1
   175f8:	d909      	bls.n	1760e <__aeabi_ddiv+0x342>
   175fa:	4441      	add	r1, r8
   175fc:	1e6b      	subs	r3, r5, #1
   175fe:	4588      	cmp	r8, r1
   17600:	d900      	bls.n	17604 <__aeabi_ddiv+0x338>
   17602:	e107      	b.n	17814 <__aeabi_ddiv+0x548>
   17604:	4288      	cmp	r0, r1
   17606:	d800      	bhi.n	1760a <__aeabi_ddiv+0x33e>
   17608:	e104      	b.n	17814 <__aeabi_ddiv+0x548>
   1760a:	3d02      	subs	r5, #2
   1760c:	4441      	add	r1, r8
   1760e:	9b04      	ldr	r3, [sp, #16]
   17610:	1acb      	subs	r3, r1, r3
   17612:	0018      	movs	r0, r3
   17614:	0039      	movs	r1, r7
   17616:	9304      	str	r3, [sp, #16]
   17618:	f7fe feb2 	bl	16380 <__udivsi3>
   1761c:	9b01      	ldr	r3, [sp, #4]
   1761e:	4682      	mov	sl, r0
   17620:	4343      	muls	r3, r0
   17622:	0039      	movs	r1, r7
   17624:	9804      	ldr	r0, [sp, #16]
   17626:	9301      	str	r3, [sp, #4]
   17628:	f7fe ff30 	bl	1648c <__aeabi_uidivmod>
   1762c:	9801      	ldr	r0, [sp, #4]
   1762e:	040b      	lsls	r3, r1, #16
   17630:	0431      	lsls	r1, r6, #16
   17632:	0c09      	lsrs	r1, r1, #16
   17634:	4319      	orrs	r1, r3
   17636:	4288      	cmp	r0, r1
   17638:	d90d      	bls.n	17656 <__aeabi_ddiv+0x38a>
   1763a:	4653      	mov	r3, sl
   1763c:	4441      	add	r1, r8
   1763e:	3b01      	subs	r3, #1
   17640:	4588      	cmp	r8, r1
   17642:	d900      	bls.n	17646 <__aeabi_ddiv+0x37a>
   17644:	e0e8      	b.n	17818 <__aeabi_ddiv+0x54c>
   17646:	4288      	cmp	r0, r1
   17648:	d800      	bhi.n	1764c <__aeabi_ddiv+0x380>
   1764a:	e0e5      	b.n	17818 <__aeabi_ddiv+0x54c>
   1764c:	2302      	movs	r3, #2
   1764e:	425b      	negs	r3, r3
   17650:	469c      	mov	ip, r3
   17652:	4441      	add	r1, r8
   17654:	44e2      	add	sl, ip
   17656:	9b01      	ldr	r3, [sp, #4]
   17658:	042d      	lsls	r5, r5, #16
   1765a:	1ace      	subs	r6, r1, r3
   1765c:	4651      	mov	r1, sl
   1765e:	4329      	orrs	r1, r5
   17660:	9d05      	ldr	r5, [sp, #20]
   17662:	464f      	mov	r7, r9
   17664:	002a      	movs	r2, r5
   17666:	040b      	lsls	r3, r1, #16
   17668:	0c08      	lsrs	r0, r1, #16
   1766a:	0c1b      	lsrs	r3, r3, #16
   1766c:	435a      	muls	r2, r3
   1766e:	4345      	muls	r5, r0
   17670:	437b      	muls	r3, r7
   17672:	4378      	muls	r0, r7
   17674:	195b      	adds	r3, r3, r5
   17676:	0c17      	lsrs	r7, r2, #16
   17678:	18fb      	adds	r3, r7, r3
   1767a:	429d      	cmp	r5, r3
   1767c:	d903      	bls.n	17686 <__aeabi_ddiv+0x3ba>
   1767e:	2580      	movs	r5, #128	; 0x80
   17680:	026d      	lsls	r5, r5, #9
   17682:	46ac      	mov	ip, r5
   17684:	4460      	add	r0, ip
   17686:	0c1d      	lsrs	r5, r3, #16
   17688:	0412      	lsls	r2, r2, #16
   1768a:	041b      	lsls	r3, r3, #16
   1768c:	0c12      	lsrs	r2, r2, #16
   1768e:	1828      	adds	r0, r5, r0
   17690:	189b      	adds	r3, r3, r2
   17692:	4286      	cmp	r6, r0
   17694:	d200      	bcs.n	17698 <__aeabi_ddiv+0x3cc>
   17696:	e093      	b.n	177c0 <__aeabi_ddiv+0x4f4>
   17698:	d100      	bne.n	1769c <__aeabi_ddiv+0x3d0>
   1769a:	e08e      	b.n	177ba <__aeabi_ddiv+0x4ee>
   1769c:	2301      	movs	r3, #1
   1769e:	4319      	orrs	r1, r3
   176a0:	4ba0      	ldr	r3, [pc, #640]	; (17924 <__aeabi_ddiv+0x658>)
   176a2:	18e3      	adds	r3, r4, r3
   176a4:	2b00      	cmp	r3, #0
   176a6:	dc00      	bgt.n	176aa <__aeabi_ddiv+0x3de>
   176a8:	e099      	b.n	177de <__aeabi_ddiv+0x512>
   176aa:	074a      	lsls	r2, r1, #29
   176ac:	d000      	beq.n	176b0 <__aeabi_ddiv+0x3e4>
   176ae:	e09e      	b.n	177ee <__aeabi_ddiv+0x522>
   176b0:	465a      	mov	r2, fp
   176b2:	01d2      	lsls	r2, r2, #7
   176b4:	d506      	bpl.n	176c4 <__aeabi_ddiv+0x3f8>
   176b6:	465a      	mov	r2, fp
   176b8:	4b9b      	ldr	r3, [pc, #620]	; (17928 <__aeabi_ddiv+0x65c>)
   176ba:	401a      	ands	r2, r3
   176bc:	2380      	movs	r3, #128	; 0x80
   176be:	4693      	mov	fp, r2
   176c0:	00db      	lsls	r3, r3, #3
   176c2:	18e3      	adds	r3, r4, r3
   176c4:	4a99      	ldr	r2, [pc, #612]	; (1792c <__aeabi_ddiv+0x660>)
   176c6:	4293      	cmp	r3, r2
   176c8:	dd68      	ble.n	1779c <__aeabi_ddiv+0x4d0>
   176ca:	2301      	movs	r3, #1
   176cc:	9a02      	ldr	r2, [sp, #8]
   176ce:	4c98      	ldr	r4, [pc, #608]	; (17930 <__aeabi_ddiv+0x664>)
   176d0:	401a      	ands	r2, r3
   176d2:	2300      	movs	r3, #0
   176d4:	4694      	mov	ip, r2
   176d6:	4698      	mov	r8, r3
   176d8:	2200      	movs	r2, #0
   176da:	e6c5      	b.n	17468 <__aeabi_ddiv+0x19c>
   176dc:	2280      	movs	r2, #128	; 0x80
   176de:	464b      	mov	r3, r9
   176e0:	0312      	lsls	r2, r2, #12
   176e2:	4213      	tst	r3, r2
   176e4:	d00a      	beq.n	176fc <__aeabi_ddiv+0x430>
   176e6:	465b      	mov	r3, fp
   176e8:	4213      	tst	r3, r2
   176ea:	d106      	bne.n	176fa <__aeabi_ddiv+0x42e>
   176ec:	431a      	orrs	r2, r3
   176ee:	0312      	lsls	r2, r2, #12
   176f0:	0b12      	lsrs	r2, r2, #12
   176f2:	46ac      	mov	ip, r5
   176f4:	4688      	mov	r8, r1
   176f6:	4c8e      	ldr	r4, [pc, #568]	; (17930 <__aeabi_ddiv+0x664>)
   176f8:	e6b6      	b.n	17468 <__aeabi_ddiv+0x19c>
   176fa:	464b      	mov	r3, r9
   176fc:	431a      	orrs	r2, r3
   176fe:	0312      	lsls	r2, r2, #12
   17700:	0b12      	lsrs	r2, r2, #12
   17702:	46bc      	mov	ip, r7
   17704:	4c8a      	ldr	r4, [pc, #552]	; (17930 <__aeabi_ddiv+0x664>)
   17706:	e6af      	b.n	17468 <__aeabi_ddiv+0x19c>
   17708:	0003      	movs	r3, r0
   1770a:	465a      	mov	r2, fp
   1770c:	3b28      	subs	r3, #40	; 0x28
   1770e:	409a      	lsls	r2, r3
   17710:	2300      	movs	r3, #0
   17712:	4691      	mov	r9, r2
   17714:	4698      	mov	r8, r3
   17716:	e657      	b.n	173c8 <__aeabi_ddiv+0xfc>
   17718:	4658      	mov	r0, fp
   1771a:	f001 f8c1 	bl	188a0 <__clzsi2>
   1771e:	3020      	adds	r0, #32
   17720:	e640      	b.n	173a4 <__aeabi_ddiv+0xd8>
   17722:	0003      	movs	r3, r0
   17724:	4652      	mov	r2, sl
   17726:	3b28      	subs	r3, #40	; 0x28
   17728:	409a      	lsls	r2, r3
   1772a:	2100      	movs	r1, #0
   1772c:	4693      	mov	fp, r2
   1772e:	e677      	b.n	17420 <__aeabi_ddiv+0x154>
   17730:	f001 f8b6 	bl	188a0 <__clzsi2>
   17734:	3020      	adds	r0, #32
   17736:	e65f      	b.n	173f8 <__aeabi_ddiv+0x12c>
   17738:	4588      	cmp	r8, r1
   1773a:	d200      	bcs.n	1773e <__aeabi_ddiv+0x472>
   1773c:	e6c7      	b.n	174ce <__aeabi_ddiv+0x202>
   1773e:	464b      	mov	r3, r9
   17740:	07de      	lsls	r6, r3, #31
   17742:	085d      	lsrs	r5, r3, #1
   17744:	4643      	mov	r3, r8
   17746:	085b      	lsrs	r3, r3, #1
   17748:	431e      	orrs	r6, r3
   1774a:	4643      	mov	r3, r8
   1774c:	07db      	lsls	r3, r3, #31
   1774e:	469a      	mov	sl, r3
   17750:	e6c2      	b.n	174d8 <__aeabi_ddiv+0x20c>
   17752:	2500      	movs	r5, #0
   17754:	4592      	cmp	sl, r2
   17756:	d300      	bcc.n	1775a <__aeabi_ddiv+0x48e>
   17758:	e733      	b.n	175c2 <__aeabi_ddiv+0x2f6>
   1775a:	9e03      	ldr	r6, [sp, #12]
   1775c:	4659      	mov	r1, fp
   1775e:	46b4      	mov	ip, r6
   17760:	44e2      	add	sl, ip
   17762:	45b2      	cmp	sl, r6
   17764:	41ad      	sbcs	r5, r5
   17766:	426d      	negs	r5, r5
   17768:	4445      	add	r5, r8
   1776a:	18eb      	adds	r3, r5, r3
   1776c:	3901      	subs	r1, #1
   1776e:	4598      	cmp	r8, r3
   17770:	d207      	bcs.n	17782 <__aeabi_ddiv+0x4b6>
   17772:	4298      	cmp	r0, r3
   17774:	d900      	bls.n	17778 <__aeabi_ddiv+0x4ac>
   17776:	e07f      	b.n	17878 <__aeabi_ddiv+0x5ac>
   17778:	d100      	bne.n	1777c <__aeabi_ddiv+0x4b0>
   1777a:	e0bc      	b.n	178f6 <__aeabi_ddiv+0x62a>
   1777c:	1a1d      	subs	r5, r3, r0
   1777e:	468b      	mov	fp, r1
   17780:	e71f      	b.n	175c2 <__aeabi_ddiv+0x2f6>
   17782:	4598      	cmp	r8, r3
   17784:	d1fa      	bne.n	1777c <__aeabi_ddiv+0x4b0>
   17786:	9d03      	ldr	r5, [sp, #12]
   17788:	4555      	cmp	r5, sl
   1778a:	d9f2      	bls.n	17772 <__aeabi_ddiv+0x4a6>
   1778c:	4643      	mov	r3, r8
   1778e:	468b      	mov	fp, r1
   17790:	1a1d      	subs	r5, r3, r0
   17792:	e716      	b.n	175c2 <__aeabi_ddiv+0x2f6>
   17794:	469b      	mov	fp, r3
   17796:	e6ca      	b.n	1752e <__aeabi_ddiv+0x262>
   17798:	0015      	movs	r5, r2
   1779a:	e6e7      	b.n	1756c <__aeabi_ddiv+0x2a0>
   1779c:	465a      	mov	r2, fp
   1779e:	08c9      	lsrs	r1, r1, #3
   177a0:	0752      	lsls	r2, r2, #29
   177a2:	430a      	orrs	r2, r1
   177a4:	055b      	lsls	r3, r3, #21
   177a6:	4690      	mov	r8, r2
   177a8:	0d5c      	lsrs	r4, r3, #21
   177aa:	465a      	mov	r2, fp
   177ac:	2301      	movs	r3, #1
   177ae:	9902      	ldr	r1, [sp, #8]
   177b0:	0252      	lsls	r2, r2, #9
   177b2:	4019      	ands	r1, r3
   177b4:	0b12      	lsrs	r2, r2, #12
   177b6:	468c      	mov	ip, r1
   177b8:	e656      	b.n	17468 <__aeabi_ddiv+0x19c>
   177ba:	2b00      	cmp	r3, #0
   177bc:	d100      	bne.n	177c0 <__aeabi_ddiv+0x4f4>
   177be:	e76f      	b.n	176a0 <__aeabi_ddiv+0x3d4>
   177c0:	4446      	add	r6, r8
   177c2:	1e4a      	subs	r2, r1, #1
   177c4:	45b0      	cmp	r8, r6
   177c6:	d929      	bls.n	1781c <__aeabi_ddiv+0x550>
   177c8:	0011      	movs	r1, r2
   177ca:	4286      	cmp	r6, r0
   177cc:	d000      	beq.n	177d0 <__aeabi_ddiv+0x504>
   177ce:	e765      	b.n	1769c <__aeabi_ddiv+0x3d0>
   177d0:	9a03      	ldr	r2, [sp, #12]
   177d2:	4293      	cmp	r3, r2
   177d4:	d000      	beq.n	177d8 <__aeabi_ddiv+0x50c>
   177d6:	e761      	b.n	1769c <__aeabi_ddiv+0x3d0>
   177d8:	e762      	b.n	176a0 <__aeabi_ddiv+0x3d4>
   177da:	2101      	movs	r1, #1
   177dc:	4249      	negs	r1, r1
   177de:	2001      	movs	r0, #1
   177e0:	1ac2      	subs	r2, r0, r3
   177e2:	2a38      	cmp	r2, #56	; 0x38
   177e4:	dd21      	ble.n	1782a <__aeabi_ddiv+0x55e>
   177e6:	9b02      	ldr	r3, [sp, #8]
   177e8:	4003      	ands	r3, r0
   177ea:	469c      	mov	ip, r3
   177ec:	e638      	b.n	17460 <__aeabi_ddiv+0x194>
   177ee:	220f      	movs	r2, #15
   177f0:	400a      	ands	r2, r1
   177f2:	2a04      	cmp	r2, #4
   177f4:	d100      	bne.n	177f8 <__aeabi_ddiv+0x52c>
   177f6:	e75b      	b.n	176b0 <__aeabi_ddiv+0x3e4>
   177f8:	000a      	movs	r2, r1
   177fa:	1d11      	adds	r1, r2, #4
   177fc:	4291      	cmp	r1, r2
   177fe:	4192      	sbcs	r2, r2
   17800:	4252      	negs	r2, r2
   17802:	4493      	add	fp, r2
   17804:	e754      	b.n	176b0 <__aeabi_ddiv+0x3e4>
   17806:	4b47      	ldr	r3, [pc, #284]	; (17924 <__aeabi_ddiv+0x658>)
   17808:	18e3      	adds	r3, r4, r3
   1780a:	2b00      	cmp	r3, #0
   1780c:	dde5      	ble.n	177da <__aeabi_ddiv+0x50e>
   1780e:	2201      	movs	r2, #1
   17810:	4252      	negs	r2, r2
   17812:	e7f2      	b.n	177fa <__aeabi_ddiv+0x52e>
   17814:	001d      	movs	r5, r3
   17816:	e6fa      	b.n	1760e <__aeabi_ddiv+0x342>
   17818:	469a      	mov	sl, r3
   1781a:	e71c      	b.n	17656 <__aeabi_ddiv+0x38a>
   1781c:	42b0      	cmp	r0, r6
   1781e:	d839      	bhi.n	17894 <__aeabi_ddiv+0x5c8>
   17820:	d06e      	beq.n	17900 <__aeabi_ddiv+0x634>
   17822:	0011      	movs	r1, r2
   17824:	e73a      	b.n	1769c <__aeabi_ddiv+0x3d0>
   17826:	9302      	str	r3, [sp, #8]
   17828:	e73a      	b.n	176a0 <__aeabi_ddiv+0x3d4>
   1782a:	2a1f      	cmp	r2, #31
   1782c:	dc3c      	bgt.n	178a8 <__aeabi_ddiv+0x5dc>
   1782e:	2320      	movs	r3, #32
   17830:	1a9b      	subs	r3, r3, r2
   17832:	000c      	movs	r4, r1
   17834:	4658      	mov	r0, fp
   17836:	4099      	lsls	r1, r3
   17838:	4098      	lsls	r0, r3
   1783a:	1e4b      	subs	r3, r1, #1
   1783c:	4199      	sbcs	r1, r3
   1783e:	465b      	mov	r3, fp
   17840:	40d4      	lsrs	r4, r2
   17842:	40d3      	lsrs	r3, r2
   17844:	4320      	orrs	r0, r4
   17846:	4308      	orrs	r0, r1
   17848:	001a      	movs	r2, r3
   1784a:	0743      	lsls	r3, r0, #29
   1784c:	d009      	beq.n	17862 <__aeabi_ddiv+0x596>
   1784e:	230f      	movs	r3, #15
   17850:	4003      	ands	r3, r0
   17852:	2b04      	cmp	r3, #4
   17854:	d005      	beq.n	17862 <__aeabi_ddiv+0x596>
   17856:	0001      	movs	r1, r0
   17858:	1d08      	adds	r0, r1, #4
   1785a:	4288      	cmp	r0, r1
   1785c:	419b      	sbcs	r3, r3
   1785e:	425b      	negs	r3, r3
   17860:	18d2      	adds	r2, r2, r3
   17862:	0213      	lsls	r3, r2, #8
   17864:	d53a      	bpl.n	178dc <__aeabi_ddiv+0x610>
   17866:	2301      	movs	r3, #1
   17868:	9a02      	ldr	r2, [sp, #8]
   1786a:	2401      	movs	r4, #1
   1786c:	401a      	ands	r2, r3
   1786e:	2300      	movs	r3, #0
   17870:	4694      	mov	ip, r2
   17872:	4698      	mov	r8, r3
   17874:	2200      	movs	r2, #0
   17876:	e5f7      	b.n	17468 <__aeabi_ddiv+0x19c>
   17878:	2102      	movs	r1, #2
   1787a:	4249      	negs	r1, r1
   1787c:	468c      	mov	ip, r1
   1787e:	9d03      	ldr	r5, [sp, #12]
   17880:	44e3      	add	fp, ip
   17882:	46ac      	mov	ip, r5
   17884:	44e2      	add	sl, ip
   17886:	45aa      	cmp	sl, r5
   17888:	41ad      	sbcs	r5, r5
   1788a:	426d      	negs	r5, r5
   1788c:	4445      	add	r5, r8
   1788e:	18ed      	adds	r5, r5, r3
   17890:	1a2d      	subs	r5, r5, r0
   17892:	e696      	b.n	175c2 <__aeabi_ddiv+0x2f6>
   17894:	1e8a      	subs	r2, r1, #2
   17896:	9903      	ldr	r1, [sp, #12]
   17898:	004d      	lsls	r5, r1, #1
   1789a:	428d      	cmp	r5, r1
   1789c:	4189      	sbcs	r1, r1
   1789e:	4249      	negs	r1, r1
   178a0:	4441      	add	r1, r8
   178a2:	1876      	adds	r6, r6, r1
   178a4:	9503      	str	r5, [sp, #12]
   178a6:	e78f      	b.n	177c8 <__aeabi_ddiv+0x4fc>
   178a8:	201f      	movs	r0, #31
   178aa:	4240      	negs	r0, r0
   178ac:	1ac3      	subs	r3, r0, r3
   178ae:	4658      	mov	r0, fp
   178b0:	40d8      	lsrs	r0, r3
   178b2:	0003      	movs	r3, r0
   178b4:	2a20      	cmp	r2, #32
   178b6:	d028      	beq.n	1790a <__aeabi_ddiv+0x63e>
   178b8:	2040      	movs	r0, #64	; 0x40
   178ba:	465d      	mov	r5, fp
   178bc:	1a82      	subs	r2, r0, r2
   178be:	4095      	lsls	r5, r2
   178c0:	4329      	orrs	r1, r5
   178c2:	1e4a      	subs	r2, r1, #1
   178c4:	4191      	sbcs	r1, r2
   178c6:	4319      	orrs	r1, r3
   178c8:	2307      	movs	r3, #7
   178ca:	2200      	movs	r2, #0
   178cc:	400b      	ands	r3, r1
   178ce:	d009      	beq.n	178e4 <__aeabi_ddiv+0x618>
   178d0:	230f      	movs	r3, #15
   178d2:	2200      	movs	r2, #0
   178d4:	400b      	ands	r3, r1
   178d6:	0008      	movs	r0, r1
   178d8:	2b04      	cmp	r3, #4
   178da:	d1bd      	bne.n	17858 <__aeabi_ddiv+0x58c>
   178dc:	0001      	movs	r1, r0
   178de:	0753      	lsls	r3, r2, #29
   178e0:	0252      	lsls	r2, r2, #9
   178e2:	0b12      	lsrs	r2, r2, #12
   178e4:	08c9      	lsrs	r1, r1, #3
   178e6:	4319      	orrs	r1, r3
   178e8:	2301      	movs	r3, #1
   178ea:	4688      	mov	r8, r1
   178ec:	9902      	ldr	r1, [sp, #8]
   178ee:	2400      	movs	r4, #0
   178f0:	4019      	ands	r1, r3
   178f2:	468c      	mov	ip, r1
   178f4:	e5b8      	b.n	17468 <__aeabi_ddiv+0x19c>
   178f6:	4552      	cmp	r2, sl
   178f8:	d8be      	bhi.n	17878 <__aeabi_ddiv+0x5ac>
   178fa:	468b      	mov	fp, r1
   178fc:	2500      	movs	r5, #0
   178fe:	e660      	b.n	175c2 <__aeabi_ddiv+0x2f6>
   17900:	9d03      	ldr	r5, [sp, #12]
   17902:	429d      	cmp	r5, r3
   17904:	d3c6      	bcc.n	17894 <__aeabi_ddiv+0x5c8>
   17906:	0011      	movs	r1, r2
   17908:	e762      	b.n	177d0 <__aeabi_ddiv+0x504>
   1790a:	2500      	movs	r5, #0
   1790c:	e7d8      	b.n	178c0 <__aeabi_ddiv+0x5f4>
   1790e:	2280      	movs	r2, #128	; 0x80
   17910:	465b      	mov	r3, fp
   17912:	0312      	lsls	r2, r2, #12
   17914:	431a      	orrs	r2, r3
   17916:	9b01      	ldr	r3, [sp, #4]
   17918:	0312      	lsls	r2, r2, #12
   1791a:	0b12      	lsrs	r2, r2, #12
   1791c:	469c      	mov	ip, r3
   1791e:	4688      	mov	r8, r1
   17920:	4c03      	ldr	r4, [pc, #12]	; (17930 <__aeabi_ddiv+0x664>)
   17922:	e5a1      	b.n	17468 <__aeabi_ddiv+0x19c>
   17924:	000003ff 	.word	0x000003ff
   17928:	feffffff 	.word	0xfeffffff
   1792c:	000007fe 	.word	0x000007fe
   17930:	000007ff 	.word	0x000007ff

00017934 <__eqdf2>:
   17934:	b5f0      	push	{r4, r5, r6, r7, lr}
   17936:	464f      	mov	r7, r9
   17938:	4646      	mov	r6, r8
   1793a:	46d6      	mov	lr, sl
   1793c:	005c      	lsls	r4, r3, #1
   1793e:	b5c0      	push	{r6, r7, lr}
   17940:	031f      	lsls	r7, r3, #12
   17942:	0fdb      	lsrs	r3, r3, #31
   17944:	469a      	mov	sl, r3
   17946:	4b17      	ldr	r3, [pc, #92]	; (179a4 <__eqdf2+0x70>)
   17948:	030e      	lsls	r6, r1, #12
   1794a:	004d      	lsls	r5, r1, #1
   1794c:	4684      	mov	ip, r0
   1794e:	4680      	mov	r8, r0
   17950:	0b36      	lsrs	r6, r6, #12
   17952:	0d6d      	lsrs	r5, r5, #21
   17954:	0fc9      	lsrs	r1, r1, #31
   17956:	4691      	mov	r9, r2
   17958:	0b3f      	lsrs	r7, r7, #12
   1795a:	0d64      	lsrs	r4, r4, #21
   1795c:	2001      	movs	r0, #1
   1795e:	429d      	cmp	r5, r3
   17960:	d008      	beq.n	17974 <__eqdf2+0x40>
   17962:	429c      	cmp	r4, r3
   17964:	d001      	beq.n	1796a <__eqdf2+0x36>
   17966:	42a5      	cmp	r5, r4
   17968:	d00b      	beq.n	17982 <__eqdf2+0x4e>
   1796a:	bc1c      	pop	{r2, r3, r4}
   1796c:	4690      	mov	r8, r2
   1796e:	4699      	mov	r9, r3
   17970:	46a2      	mov	sl, r4
   17972:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17974:	4663      	mov	r3, ip
   17976:	4333      	orrs	r3, r6
   17978:	d1f7      	bne.n	1796a <__eqdf2+0x36>
   1797a:	42ac      	cmp	r4, r5
   1797c:	d1f5      	bne.n	1796a <__eqdf2+0x36>
   1797e:	433a      	orrs	r2, r7
   17980:	d1f3      	bne.n	1796a <__eqdf2+0x36>
   17982:	2001      	movs	r0, #1
   17984:	42be      	cmp	r6, r7
   17986:	d1f0      	bne.n	1796a <__eqdf2+0x36>
   17988:	45c8      	cmp	r8, r9
   1798a:	d1ee      	bne.n	1796a <__eqdf2+0x36>
   1798c:	4551      	cmp	r1, sl
   1798e:	d007      	beq.n	179a0 <__eqdf2+0x6c>
   17990:	2d00      	cmp	r5, #0
   17992:	d1ea      	bne.n	1796a <__eqdf2+0x36>
   17994:	4663      	mov	r3, ip
   17996:	431e      	orrs	r6, r3
   17998:	0030      	movs	r0, r6
   1799a:	1e46      	subs	r6, r0, #1
   1799c:	41b0      	sbcs	r0, r6
   1799e:	e7e4      	b.n	1796a <__eqdf2+0x36>
   179a0:	2000      	movs	r0, #0
   179a2:	e7e2      	b.n	1796a <__eqdf2+0x36>
   179a4:	000007ff 	.word	0x000007ff

000179a8 <__gedf2>:
   179a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   179aa:	4645      	mov	r5, r8
   179ac:	46de      	mov	lr, fp
   179ae:	4657      	mov	r7, sl
   179b0:	464e      	mov	r6, r9
   179b2:	b5e0      	push	{r5, r6, r7, lr}
   179b4:	031f      	lsls	r7, r3, #12
   179b6:	0b3d      	lsrs	r5, r7, #12
   179b8:	4f2c      	ldr	r7, [pc, #176]	; (17a6c <__gedf2+0xc4>)
   179ba:	030e      	lsls	r6, r1, #12
   179bc:	004c      	lsls	r4, r1, #1
   179be:	46ab      	mov	fp, r5
   179c0:	005d      	lsls	r5, r3, #1
   179c2:	4684      	mov	ip, r0
   179c4:	0b36      	lsrs	r6, r6, #12
   179c6:	0d64      	lsrs	r4, r4, #21
   179c8:	0fc9      	lsrs	r1, r1, #31
   179ca:	4690      	mov	r8, r2
   179cc:	0d6d      	lsrs	r5, r5, #21
   179ce:	0fdb      	lsrs	r3, r3, #31
   179d0:	42bc      	cmp	r4, r7
   179d2:	d02a      	beq.n	17a2a <__gedf2+0x82>
   179d4:	4f25      	ldr	r7, [pc, #148]	; (17a6c <__gedf2+0xc4>)
   179d6:	42bd      	cmp	r5, r7
   179d8:	d02d      	beq.n	17a36 <__gedf2+0x8e>
   179da:	2c00      	cmp	r4, #0
   179dc:	d10f      	bne.n	179fe <__gedf2+0x56>
   179de:	4330      	orrs	r0, r6
   179e0:	0007      	movs	r7, r0
   179e2:	4681      	mov	r9, r0
   179e4:	4278      	negs	r0, r7
   179e6:	4178      	adcs	r0, r7
   179e8:	b2c0      	uxtb	r0, r0
   179ea:	2d00      	cmp	r5, #0
   179ec:	d117      	bne.n	17a1e <__gedf2+0x76>
   179ee:	465f      	mov	r7, fp
   179f0:	433a      	orrs	r2, r7
   179f2:	d114      	bne.n	17a1e <__gedf2+0x76>
   179f4:	464b      	mov	r3, r9
   179f6:	2000      	movs	r0, #0
   179f8:	2b00      	cmp	r3, #0
   179fa:	d00a      	beq.n	17a12 <__gedf2+0x6a>
   179fc:	e006      	b.n	17a0c <__gedf2+0x64>
   179fe:	2d00      	cmp	r5, #0
   17a00:	d102      	bne.n	17a08 <__gedf2+0x60>
   17a02:	4658      	mov	r0, fp
   17a04:	4302      	orrs	r2, r0
   17a06:	d001      	beq.n	17a0c <__gedf2+0x64>
   17a08:	4299      	cmp	r1, r3
   17a0a:	d018      	beq.n	17a3e <__gedf2+0x96>
   17a0c:	4248      	negs	r0, r1
   17a0e:	2101      	movs	r1, #1
   17a10:	4308      	orrs	r0, r1
   17a12:	bc3c      	pop	{r2, r3, r4, r5}
   17a14:	4690      	mov	r8, r2
   17a16:	4699      	mov	r9, r3
   17a18:	46a2      	mov	sl, r4
   17a1a:	46ab      	mov	fp, r5
   17a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17a1e:	2800      	cmp	r0, #0
   17a20:	d0f2      	beq.n	17a08 <__gedf2+0x60>
   17a22:	2001      	movs	r0, #1
   17a24:	3b01      	subs	r3, #1
   17a26:	4318      	orrs	r0, r3
   17a28:	e7f3      	b.n	17a12 <__gedf2+0x6a>
   17a2a:	0037      	movs	r7, r6
   17a2c:	4307      	orrs	r7, r0
   17a2e:	d0d1      	beq.n	179d4 <__gedf2+0x2c>
   17a30:	2002      	movs	r0, #2
   17a32:	4240      	negs	r0, r0
   17a34:	e7ed      	b.n	17a12 <__gedf2+0x6a>
   17a36:	465f      	mov	r7, fp
   17a38:	4317      	orrs	r7, r2
   17a3a:	d0ce      	beq.n	179da <__gedf2+0x32>
   17a3c:	e7f8      	b.n	17a30 <__gedf2+0x88>
   17a3e:	42ac      	cmp	r4, r5
   17a40:	dce4      	bgt.n	17a0c <__gedf2+0x64>
   17a42:	da03      	bge.n	17a4c <__gedf2+0xa4>
   17a44:	1e48      	subs	r0, r1, #1
   17a46:	2101      	movs	r1, #1
   17a48:	4308      	orrs	r0, r1
   17a4a:	e7e2      	b.n	17a12 <__gedf2+0x6a>
   17a4c:	455e      	cmp	r6, fp
   17a4e:	d8dd      	bhi.n	17a0c <__gedf2+0x64>
   17a50:	d006      	beq.n	17a60 <__gedf2+0xb8>
   17a52:	2000      	movs	r0, #0
   17a54:	455e      	cmp	r6, fp
   17a56:	d2dc      	bcs.n	17a12 <__gedf2+0x6a>
   17a58:	2301      	movs	r3, #1
   17a5a:	1e48      	subs	r0, r1, #1
   17a5c:	4318      	orrs	r0, r3
   17a5e:	e7d8      	b.n	17a12 <__gedf2+0x6a>
   17a60:	45c4      	cmp	ip, r8
   17a62:	d8d3      	bhi.n	17a0c <__gedf2+0x64>
   17a64:	2000      	movs	r0, #0
   17a66:	45c4      	cmp	ip, r8
   17a68:	d3f6      	bcc.n	17a58 <__gedf2+0xb0>
   17a6a:	e7d2      	b.n	17a12 <__gedf2+0x6a>
   17a6c:	000007ff 	.word	0x000007ff

00017a70 <__ledf2>:
   17a70:	b5f0      	push	{r4, r5, r6, r7, lr}
   17a72:	464e      	mov	r6, r9
   17a74:	4645      	mov	r5, r8
   17a76:	46de      	mov	lr, fp
   17a78:	4657      	mov	r7, sl
   17a7a:	005c      	lsls	r4, r3, #1
   17a7c:	b5e0      	push	{r5, r6, r7, lr}
   17a7e:	031f      	lsls	r7, r3, #12
   17a80:	0fdb      	lsrs	r3, r3, #31
   17a82:	4699      	mov	r9, r3
   17a84:	4b2a      	ldr	r3, [pc, #168]	; (17b30 <__ledf2+0xc0>)
   17a86:	030e      	lsls	r6, r1, #12
   17a88:	004d      	lsls	r5, r1, #1
   17a8a:	0fc9      	lsrs	r1, r1, #31
   17a8c:	4684      	mov	ip, r0
   17a8e:	0b36      	lsrs	r6, r6, #12
   17a90:	0d6d      	lsrs	r5, r5, #21
   17a92:	468b      	mov	fp, r1
   17a94:	4690      	mov	r8, r2
   17a96:	0b3f      	lsrs	r7, r7, #12
   17a98:	0d64      	lsrs	r4, r4, #21
   17a9a:	429d      	cmp	r5, r3
   17a9c:	d020      	beq.n	17ae0 <__ledf2+0x70>
   17a9e:	4b24      	ldr	r3, [pc, #144]	; (17b30 <__ledf2+0xc0>)
   17aa0:	429c      	cmp	r4, r3
   17aa2:	d022      	beq.n	17aea <__ledf2+0x7a>
   17aa4:	2d00      	cmp	r5, #0
   17aa6:	d112      	bne.n	17ace <__ledf2+0x5e>
   17aa8:	4330      	orrs	r0, r6
   17aaa:	4243      	negs	r3, r0
   17aac:	4143      	adcs	r3, r0
   17aae:	b2db      	uxtb	r3, r3
   17ab0:	2c00      	cmp	r4, #0
   17ab2:	d01f      	beq.n	17af4 <__ledf2+0x84>
   17ab4:	2b00      	cmp	r3, #0
   17ab6:	d00c      	beq.n	17ad2 <__ledf2+0x62>
   17ab8:	464b      	mov	r3, r9
   17aba:	2001      	movs	r0, #1
   17abc:	3b01      	subs	r3, #1
   17abe:	4303      	orrs	r3, r0
   17ac0:	0018      	movs	r0, r3
   17ac2:	bc3c      	pop	{r2, r3, r4, r5}
   17ac4:	4690      	mov	r8, r2
   17ac6:	4699      	mov	r9, r3
   17ac8:	46a2      	mov	sl, r4
   17aca:	46ab      	mov	fp, r5
   17acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17ace:	2c00      	cmp	r4, #0
   17ad0:	d016      	beq.n	17b00 <__ledf2+0x90>
   17ad2:	45cb      	cmp	fp, r9
   17ad4:	d017      	beq.n	17b06 <__ledf2+0x96>
   17ad6:	465b      	mov	r3, fp
   17ad8:	4259      	negs	r1, r3
   17ada:	2301      	movs	r3, #1
   17adc:	430b      	orrs	r3, r1
   17ade:	e7ef      	b.n	17ac0 <__ledf2+0x50>
   17ae0:	0031      	movs	r1, r6
   17ae2:	2302      	movs	r3, #2
   17ae4:	4301      	orrs	r1, r0
   17ae6:	d1eb      	bne.n	17ac0 <__ledf2+0x50>
   17ae8:	e7d9      	b.n	17a9e <__ledf2+0x2e>
   17aea:	0039      	movs	r1, r7
   17aec:	2302      	movs	r3, #2
   17aee:	4311      	orrs	r1, r2
   17af0:	d1e6      	bne.n	17ac0 <__ledf2+0x50>
   17af2:	e7d7      	b.n	17aa4 <__ledf2+0x34>
   17af4:	433a      	orrs	r2, r7
   17af6:	d1dd      	bne.n	17ab4 <__ledf2+0x44>
   17af8:	2300      	movs	r3, #0
   17afa:	2800      	cmp	r0, #0
   17afc:	d0e0      	beq.n	17ac0 <__ledf2+0x50>
   17afe:	e7ea      	b.n	17ad6 <__ledf2+0x66>
   17b00:	433a      	orrs	r2, r7
   17b02:	d1e6      	bne.n	17ad2 <__ledf2+0x62>
   17b04:	e7e7      	b.n	17ad6 <__ledf2+0x66>
   17b06:	42a5      	cmp	r5, r4
   17b08:	dce5      	bgt.n	17ad6 <__ledf2+0x66>
   17b0a:	db05      	blt.n	17b18 <__ledf2+0xa8>
   17b0c:	42be      	cmp	r6, r7
   17b0e:	d8e2      	bhi.n	17ad6 <__ledf2+0x66>
   17b10:	d007      	beq.n	17b22 <__ledf2+0xb2>
   17b12:	2300      	movs	r3, #0
   17b14:	42be      	cmp	r6, r7
   17b16:	d2d3      	bcs.n	17ac0 <__ledf2+0x50>
   17b18:	4659      	mov	r1, fp
   17b1a:	2301      	movs	r3, #1
   17b1c:	3901      	subs	r1, #1
   17b1e:	430b      	orrs	r3, r1
   17b20:	e7ce      	b.n	17ac0 <__ledf2+0x50>
   17b22:	45c4      	cmp	ip, r8
   17b24:	d8d7      	bhi.n	17ad6 <__ledf2+0x66>
   17b26:	2300      	movs	r3, #0
   17b28:	45c4      	cmp	ip, r8
   17b2a:	d3f5      	bcc.n	17b18 <__ledf2+0xa8>
   17b2c:	e7c8      	b.n	17ac0 <__ledf2+0x50>
   17b2e:	46c0      	nop			; (mov r8, r8)
   17b30:	000007ff 	.word	0x000007ff

00017b34 <__aeabi_dmul>:
   17b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b36:	4657      	mov	r7, sl
   17b38:	4645      	mov	r5, r8
   17b3a:	46de      	mov	lr, fp
   17b3c:	464e      	mov	r6, r9
   17b3e:	b5e0      	push	{r5, r6, r7, lr}
   17b40:	030c      	lsls	r4, r1, #12
   17b42:	4698      	mov	r8, r3
   17b44:	004e      	lsls	r6, r1, #1
   17b46:	0b23      	lsrs	r3, r4, #12
   17b48:	b087      	sub	sp, #28
   17b4a:	0007      	movs	r7, r0
   17b4c:	4692      	mov	sl, r2
   17b4e:	469b      	mov	fp, r3
   17b50:	0d76      	lsrs	r6, r6, #21
   17b52:	0fcd      	lsrs	r5, r1, #31
   17b54:	2e00      	cmp	r6, #0
   17b56:	d06b      	beq.n	17c30 <__aeabi_dmul+0xfc>
   17b58:	4b6d      	ldr	r3, [pc, #436]	; (17d10 <__aeabi_dmul+0x1dc>)
   17b5a:	429e      	cmp	r6, r3
   17b5c:	d035      	beq.n	17bca <__aeabi_dmul+0x96>
   17b5e:	2480      	movs	r4, #128	; 0x80
   17b60:	465b      	mov	r3, fp
   17b62:	0f42      	lsrs	r2, r0, #29
   17b64:	0424      	lsls	r4, r4, #16
   17b66:	00db      	lsls	r3, r3, #3
   17b68:	4314      	orrs	r4, r2
   17b6a:	431c      	orrs	r4, r3
   17b6c:	00c3      	lsls	r3, r0, #3
   17b6e:	4699      	mov	r9, r3
   17b70:	4b68      	ldr	r3, [pc, #416]	; (17d14 <__aeabi_dmul+0x1e0>)
   17b72:	46a3      	mov	fp, r4
   17b74:	469c      	mov	ip, r3
   17b76:	2300      	movs	r3, #0
   17b78:	2700      	movs	r7, #0
   17b7a:	4466      	add	r6, ip
   17b7c:	9302      	str	r3, [sp, #8]
   17b7e:	4643      	mov	r3, r8
   17b80:	031c      	lsls	r4, r3, #12
   17b82:	005a      	lsls	r2, r3, #1
   17b84:	0fdb      	lsrs	r3, r3, #31
   17b86:	4650      	mov	r0, sl
   17b88:	0b24      	lsrs	r4, r4, #12
   17b8a:	0d52      	lsrs	r2, r2, #21
   17b8c:	4698      	mov	r8, r3
   17b8e:	d100      	bne.n	17b92 <__aeabi_dmul+0x5e>
   17b90:	e076      	b.n	17c80 <__aeabi_dmul+0x14c>
   17b92:	4b5f      	ldr	r3, [pc, #380]	; (17d10 <__aeabi_dmul+0x1dc>)
   17b94:	429a      	cmp	r2, r3
   17b96:	d06d      	beq.n	17c74 <__aeabi_dmul+0x140>
   17b98:	2380      	movs	r3, #128	; 0x80
   17b9a:	0f41      	lsrs	r1, r0, #29
   17b9c:	041b      	lsls	r3, r3, #16
   17b9e:	430b      	orrs	r3, r1
   17ba0:	495c      	ldr	r1, [pc, #368]	; (17d14 <__aeabi_dmul+0x1e0>)
   17ba2:	00e4      	lsls	r4, r4, #3
   17ba4:	468c      	mov	ip, r1
   17ba6:	431c      	orrs	r4, r3
   17ba8:	00c3      	lsls	r3, r0, #3
   17baa:	2000      	movs	r0, #0
   17bac:	4462      	add	r2, ip
   17bae:	4641      	mov	r1, r8
   17bb0:	18b6      	adds	r6, r6, r2
   17bb2:	4069      	eors	r1, r5
   17bb4:	1c72      	adds	r2, r6, #1
   17bb6:	9101      	str	r1, [sp, #4]
   17bb8:	4694      	mov	ip, r2
   17bba:	4307      	orrs	r7, r0
   17bbc:	2f0f      	cmp	r7, #15
   17bbe:	d900      	bls.n	17bc2 <__aeabi_dmul+0x8e>
   17bc0:	e0b0      	b.n	17d24 <__aeabi_dmul+0x1f0>
   17bc2:	4a55      	ldr	r2, [pc, #340]	; (17d18 <__aeabi_dmul+0x1e4>)
   17bc4:	00bf      	lsls	r7, r7, #2
   17bc6:	59d2      	ldr	r2, [r2, r7]
   17bc8:	4697      	mov	pc, r2
   17bca:	465b      	mov	r3, fp
   17bcc:	4303      	orrs	r3, r0
   17bce:	4699      	mov	r9, r3
   17bd0:	d000      	beq.n	17bd4 <__aeabi_dmul+0xa0>
   17bd2:	e087      	b.n	17ce4 <__aeabi_dmul+0x1b0>
   17bd4:	2300      	movs	r3, #0
   17bd6:	469b      	mov	fp, r3
   17bd8:	3302      	adds	r3, #2
   17bda:	2708      	movs	r7, #8
   17bdc:	9302      	str	r3, [sp, #8]
   17bde:	e7ce      	b.n	17b7e <__aeabi_dmul+0x4a>
   17be0:	4642      	mov	r2, r8
   17be2:	9201      	str	r2, [sp, #4]
   17be4:	2802      	cmp	r0, #2
   17be6:	d067      	beq.n	17cb8 <__aeabi_dmul+0x184>
   17be8:	2803      	cmp	r0, #3
   17bea:	d100      	bne.n	17bee <__aeabi_dmul+0xba>
   17bec:	e20e      	b.n	1800c <__aeabi_dmul+0x4d8>
   17bee:	2801      	cmp	r0, #1
   17bf0:	d000      	beq.n	17bf4 <__aeabi_dmul+0xc0>
   17bf2:	e162      	b.n	17eba <__aeabi_dmul+0x386>
   17bf4:	2300      	movs	r3, #0
   17bf6:	2400      	movs	r4, #0
   17bf8:	2200      	movs	r2, #0
   17bfa:	4699      	mov	r9, r3
   17bfc:	9901      	ldr	r1, [sp, #4]
   17bfe:	4001      	ands	r1, r0
   17c00:	b2cd      	uxtb	r5, r1
   17c02:	2100      	movs	r1, #0
   17c04:	0312      	lsls	r2, r2, #12
   17c06:	0d0b      	lsrs	r3, r1, #20
   17c08:	0b12      	lsrs	r2, r2, #12
   17c0a:	051b      	lsls	r3, r3, #20
   17c0c:	4313      	orrs	r3, r2
   17c0e:	4a43      	ldr	r2, [pc, #268]	; (17d1c <__aeabi_dmul+0x1e8>)
   17c10:	0524      	lsls	r4, r4, #20
   17c12:	4013      	ands	r3, r2
   17c14:	431c      	orrs	r4, r3
   17c16:	0064      	lsls	r4, r4, #1
   17c18:	07ed      	lsls	r5, r5, #31
   17c1a:	0864      	lsrs	r4, r4, #1
   17c1c:	432c      	orrs	r4, r5
   17c1e:	4648      	mov	r0, r9
   17c20:	0021      	movs	r1, r4
   17c22:	b007      	add	sp, #28
   17c24:	bc3c      	pop	{r2, r3, r4, r5}
   17c26:	4690      	mov	r8, r2
   17c28:	4699      	mov	r9, r3
   17c2a:	46a2      	mov	sl, r4
   17c2c:	46ab      	mov	fp, r5
   17c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c30:	4303      	orrs	r3, r0
   17c32:	4699      	mov	r9, r3
   17c34:	d04f      	beq.n	17cd6 <__aeabi_dmul+0x1a2>
   17c36:	465b      	mov	r3, fp
   17c38:	2b00      	cmp	r3, #0
   17c3a:	d100      	bne.n	17c3e <__aeabi_dmul+0x10a>
   17c3c:	e189      	b.n	17f52 <__aeabi_dmul+0x41e>
   17c3e:	4658      	mov	r0, fp
   17c40:	f000 fe2e 	bl	188a0 <__clzsi2>
   17c44:	0003      	movs	r3, r0
   17c46:	3b0b      	subs	r3, #11
   17c48:	2b1c      	cmp	r3, #28
   17c4a:	dd00      	ble.n	17c4e <__aeabi_dmul+0x11a>
   17c4c:	e17a      	b.n	17f44 <__aeabi_dmul+0x410>
   17c4e:	221d      	movs	r2, #29
   17c50:	1ad3      	subs	r3, r2, r3
   17c52:	003a      	movs	r2, r7
   17c54:	0001      	movs	r1, r0
   17c56:	465c      	mov	r4, fp
   17c58:	40da      	lsrs	r2, r3
   17c5a:	3908      	subs	r1, #8
   17c5c:	408c      	lsls	r4, r1
   17c5e:	0013      	movs	r3, r2
   17c60:	408f      	lsls	r7, r1
   17c62:	4323      	orrs	r3, r4
   17c64:	469b      	mov	fp, r3
   17c66:	46b9      	mov	r9, r7
   17c68:	2300      	movs	r3, #0
   17c6a:	4e2d      	ldr	r6, [pc, #180]	; (17d20 <__aeabi_dmul+0x1ec>)
   17c6c:	2700      	movs	r7, #0
   17c6e:	1a36      	subs	r6, r6, r0
   17c70:	9302      	str	r3, [sp, #8]
   17c72:	e784      	b.n	17b7e <__aeabi_dmul+0x4a>
   17c74:	4653      	mov	r3, sl
   17c76:	4323      	orrs	r3, r4
   17c78:	d12a      	bne.n	17cd0 <__aeabi_dmul+0x19c>
   17c7a:	2400      	movs	r4, #0
   17c7c:	2002      	movs	r0, #2
   17c7e:	e796      	b.n	17bae <__aeabi_dmul+0x7a>
   17c80:	4653      	mov	r3, sl
   17c82:	4323      	orrs	r3, r4
   17c84:	d020      	beq.n	17cc8 <__aeabi_dmul+0x194>
   17c86:	2c00      	cmp	r4, #0
   17c88:	d100      	bne.n	17c8c <__aeabi_dmul+0x158>
   17c8a:	e157      	b.n	17f3c <__aeabi_dmul+0x408>
   17c8c:	0020      	movs	r0, r4
   17c8e:	f000 fe07 	bl	188a0 <__clzsi2>
   17c92:	0003      	movs	r3, r0
   17c94:	3b0b      	subs	r3, #11
   17c96:	2b1c      	cmp	r3, #28
   17c98:	dd00      	ble.n	17c9c <__aeabi_dmul+0x168>
   17c9a:	e149      	b.n	17f30 <__aeabi_dmul+0x3fc>
   17c9c:	211d      	movs	r1, #29
   17c9e:	1acb      	subs	r3, r1, r3
   17ca0:	4651      	mov	r1, sl
   17ca2:	0002      	movs	r2, r0
   17ca4:	40d9      	lsrs	r1, r3
   17ca6:	4653      	mov	r3, sl
   17ca8:	3a08      	subs	r2, #8
   17caa:	4094      	lsls	r4, r2
   17cac:	4093      	lsls	r3, r2
   17cae:	430c      	orrs	r4, r1
   17cb0:	4a1b      	ldr	r2, [pc, #108]	; (17d20 <__aeabi_dmul+0x1ec>)
   17cb2:	1a12      	subs	r2, r2, r0
   17cb4:	2000      	movs	r0, #0
   17cb6:	e77a      	b.n	17bae <__aeabi_dmul+0x7a>
   17cb8:	2501      	movs	r5, #1
   17cba:	9b01      	ldr	r3, [sp, #4]
   17cbc:	4c14      	ldr	r4, [pc, #80]	; (17d10 <__aeabi_dmul+0x1dc>)
   17cbe:	401d      	ands	r5, r3
   17cc0:	2300      	movs	r3, #0
   17cc2:	2200      	movs	r2, #0
   17cc4:	4699      	mov	r9, r3
   17cc6:	e79c      	b.n	17c02 <__aeabi_dmul+0xce>
   17cc8:	2400      	movs	r4, #0
   17cca:	2200      	movs	r2, #0
   17ccc:	2001      	movs	r0, #1
   17cce:	e76e      	b.n	17bae <__aeabi_dmul+0x7a>
   17cd0:	4653      	mov	r3, sl
   17cd2:	2003      	movs	r0, #3
   17cd4:	e76b      	b.n	17bae <__aeabi_dmul+0x7a>
   17cd6:	2300      	movs	r3, #0
   17cd8:	469b      	mov	fp, r3
   17cda:	3301      	adds	r3, #1
   17cdc:	2704      	movs	r7, #4
   17cde:	2600      	movs	r6, #0
   17ce0:	9302      	str	r3, [sp, #8]
   17ce2:	e74c      	b.n	17b7e <__aeabi_dmul+0x4a>
   17ce4:	2303      	movs	r3, #3
   17ce6:	4681      	mov	r9, r0
   17ce8:	270c      	movs	r7, #12
   17cea:	9302      	str	r3, [sp, #8]
   17cec:	e747      	b.n	17b7e <__aeabi_dmul+0x4a>
   17cee:	2280      	movs	r2, #128	; 0x80
   17cf0:	2300      	movs	r3, #0
   17cf2:	2500      	movs	r5, #0
   17cf4:	0312      	lsls	r2, r2, #12
   17cf6:	4699      	mov	r9, r3
   17cf8:	4c05      	ldr	r4, [pc, #20]	; (17d10 <__aeabi_dmul+0x1dc>)
   17cfa:	e782      	b.n	17c02 <__aeabi_dmul+0xce>
   17cfc:	465c      	mov	r4, fp
   17cfe:	464b      	mov	r3, r9
   17d00:	9802      	ldr	r0, [sp, #8]
   17d02:	e76f      	b.n	17be4 <__aeabi_dmul+0xb0>
   17d04:	465c      	mov	r4, fp
   17d06:	464b      	mov	r3, r9
   17d08:	9501      	str	r5, [sp, #4]
   17d0a:	9802      	ldr	r0, [sp, #8]
   17d0c:	e76a      	b.n	17be4 <__aeabi_dmul+0xb0>
   17d0e:	46c0      	nop			; (mov r8, r8)
   17d10:	000007ff 	.word	0x000007ff
   17d14:	fffffc01 	.word	0xfffffc01
   17d18:	0001b280 	.word	0x0001b280
   17d1c:	800fffff 	.word	0x800fffff
   17d20:	fffffc0d 	.word	0xfffffc0d
   17d24:	464a      	mov	r2, r9
   17d26:	4649      	mov	r1, r9
   17d28:	0c17      	lsrs	r7, r2, #16
   17d2a:	0c1a      	lsrs	r2, r3, #16
   17d2c:	041b      	lsls	r3, r3, #16
   17d2e:	0c1b      	lsrs	r3, r3, #16
   17d30:	0408      	lsls	r0, r1, #16
   17d32:	0019      	movs	r1, r3
   17d34:	0c00      	lsrs	r0, r0, #16
   17d36:	4341      	muls	r1, r0
   17d38:	0015      	movs	r5, r2
   17d3a:	4688      	mov	r8, r1
   17d3c:	0019      	movs	r1, r3
   17d3e:	437d      	muls	r5, r7
   17d40:	4379      	muls	r1, r7
   17d42:	9503      	str	r5, [sp, #12]
   17d44:	4689      	mov	r9, r1
   17d46:	0029      	movs	r1, r5
   17d48:	0015      	movs	r5, r2
   17d4a:	4345      	muls	r5, r0
   17d4c:	444d      	add	r5, r9
   17d4e:	9502      	str	r5, [sp, #8]
   17d50:	4645      	mov	r5, r8
   17d52:	0c2d      	lsrs	r5, r5, #16
   17d54:	46aa      	mov	sl, r5
   17d56:	9d02      	ldr	r5, [sp, #8]
   17d58:	4455      	add	r5, sl
   17d5a:	45a9      	cmp	r9, r5
   17d5c:	d906      	bls.n	17d6c <__aeabi_dmul+0x238>
   17d5e:	468a      	mov	sl, r1
   17d60:	2180      	movs	r1, #128	; 0x80
   17d62:	0249      	lsls	r1, r1, #9
   17d64:	4689      	mov	r9, r1
   17d66:	44ca      	add	sl, r9
   17d68:	4651      	mov	r1, sl
   17d6a:	9103      	str	r1, [sp, #12]
   17d6c:	0c29      	lsrs	r1, r5, #16
   17d6e:	9104      	str	r1, [sp, #16]
   17d70:	4641      	mov	r1, r8
   17d72:	0409      	lsls	r1, r1, #16
   17d74:	042d      	lsls	r5, r5, #16
   17d76:	0c09      	lsrs	r1, r1, #16
   17d78:	4688      	mov	r8, r1
   17d7a:	0029      	movs	r1, r5
   17d7c:	0c25      	lsrs	r5, r4, #16
   17d7e:	0424      	lsls	r4, r4, #16
   17d80:	4441      	add	r1, r8
   17d82:	0c24      	lsrs	r4, r4, #16
   17d84:	9105      	str	r1, [sp, #20]
   17d86:	0021      	movs	r1, r4
   17d88:	4341      	muls	r1, r0
   17d8a:	4688      	mov	r8, r1
   17d8c:	0021      	movs	r1, r4
   17d8e:	4379      	muls	r1, r7
   17d90:	468a      	mov	sl, r1
   17d92:	4368      	muls	r0, r5
   17d94:	4641      	mov	r1, r8
   17d96:	4450      	add	r0, sl
   17d98:	4681      	mov	r9, r0
   17d9a:	0c08      	lsrs	r0, r1, #16
   17d9c:	4448      	add	r0, r9
   17d9e:	436f      	muls	r7, r5
   17da0:	4582      	cmp	sl, r0
   17da2:	d903      	bls.n	17dac <__aeabi_dmul+0x278>
   17da4:	2180      	movs	r1, #128	; 0x80
   17da6:	0249      	lsls	r1, r1, #9
   17da8:	4689      	mov	r9, r1
   17daa:	444f      	add	r7, r9
   17dac:	0c01      	lsrs	r1, r0, #16
   17dae:	4689      	mov	r9, r1
   17db0:	0039      	movs	r1, r7
   17db2:	4449      	add	r1, r9
   17db4:	9102      	str	r1, [sp, #8]
   17db6:	4641      	mov	r1, r8
   17db8:	040f      	lsls	r7, r1, #16
   17dba:	9904      	ldr	r1, [sp, #16]
   17dbc:	0c3f      	lsrs	r7, r7, #16
   17dbe:	4688      	mov	r8, r1
   17dc0:	0400      	lsls	r0, r0, #16
   17dc2:	19c0      	adds	r0, r0, r7
   17dc4:	4480      	add	r8, r0
   17dc6:	4641      	mov	r1, r8
   17dc8:	9104      	str	r1, [sp, #16]
   17dca:	4659      	mov	r1, fp
   17dcc:	0c0f      	lsrs	r7, r1, #16
   17dce:	0409      	lsls	r1, r1, #16
   17dd0:	0c09      	lsrs	r1, r1, #16
   17dd2:	4688      	mov	r8, r1
   17dd4:	4359      	muls	r1, r3
   17dd6:	468a      	mov	sl, r1
   17dd8:	0039      	movs	r1, r7
   17dda:	4351      	muls	r1, r2
   17ddc:	4689      	mov	r9, r1
   17dde:	4641      	mov	r1, r8
   17de0:	434a      	muls	r2, r1
   17de2:	4651      	mov	r1, sl
   17de4:	0c09      	lsrs	r1, r1, #16
   17de6:	468b      	mov	fp, r1
   17de8:	437b      	muls	r3, r7
   17dea:	18d2      	adds	r2, r2, r3
   17dec:	445a      	add	r2, fp
   17dee:	4293      	cmp	r3, r2
   17df0:	d903      	bls.n	17dfa <__aeabi_dmul+0x2c6>
   17df2:	2380      	movs	r3, #128	; 0x80
   17df4:	025b      	lsls	r3, r3, #9
   17df6:	469b      	mov	fp, r3
   17df8:	44d9      	add	r9, fp
   17dfa:	4651      	mov	r1, sl
   17dfc:	0409      	lsls	r1, r1, #16
   17dfe:	0c09      	lsrs	r1, r1, #16
   17e00:	468a      	mov	sl, r1
   17e02:	4641      	mov	r1, r8
   17e04:	4361      	muls	r1, r4
   17e06:	437c      	muls	r4, r7
   17e08:	0c13      	lsrs	r3, r2, #16
   17e0a:	0412      	lsls	r2, r2, #16
   17e0c:	444b      	add	r3, r9
   17e0e:	4452      	add	r2, sl
   17e10:	46a1      	mov	r9, r4
   17e12:	468a      	mov	sl, r1
   17e14:	003c      	movs	r4, r7
   17e16:	4641      	mov	r1, r8
   17e18:	436c      	muls	r4, r5
   17e1a:	434d      	muls	r5, r1
   17e1c:	4651      	mov	r1, sl
   17e1e:	444d      	add	r5, r9
   17e20:	0c0f      	lsrs	r7, r1, #16
   17e22:	197d      	adds	r5, r7, r5
   17e24:	45a9      	cmp	r9, r5
   17e26:	d903      	bls.n	17e30 <__aeabi_dmul+0x2fc>
   17e28:	2180      	movs	r1, #128	; 0x80
   17e2a:	0249      	lsls	r1, r1, #9
   17e2c:	4688      	mov	r8, r1
   17e2e:	4444      	add	r4, r8
   17e30:	9f04      	ldr	r7, [sp, #16]
   17e32:	9903      	ldr	r1, [sp, #12]
   17e34:	46b8      	mov	r8, r7
   17e36:	4441      	add	r1, r8
   17e38:	468b      	mov	fp, r1
   17e3a:	4583      	cmp	fp, r0
   17e3c:	4180      	sbcs	r0, r0
   17e3e:	4241      	negs	r1, r0
   17e40:	4688      	mov	r8, r1
   17e42:	4651      	mov	r1, sl
   17e44:	0408      	lsls	r0, r1, #16
   17e46:	042f      	lsls	r7, r5, #16
   17e48:	0c00      	lsrs	r0, r0, #16
   17e4a:	183f      	adds	r7, r7, r0
   17e4c:	4658      	mov	r0, fp
   17e4e:	9902      	ldr	r1, [sp, #8]
   17e50:	1810      	adds	r0, r2, r0
   17e52:	4689      	mov	r9, r1
   17e54:	4290      	cmp	r0, r2
   17e56:	4192      	sbcs	r2, r2
   17e58:	444f      	add	r7, r9
   17e5a:	46ba      	mov	sl, r7
   17e5c:	4252      	negs	r2, r2
   17e5e:	4699      	mov	r9, r3
   17e60:	4693      	mov	fp, r2
   17e62:	44c2      	add	sl, r8
   17e64:	44d1      	add	r9, sl
   17e66:	44cb      	add	fp, r9
   17e68:	428f      	cmp	r7, r1
   17e6a:	41bf      	sbcs	r7, r7
   17e6c:	45c2      	cmp	sl, r8
   17e6e:	4189      	sbcs	r1, r1
   17e70:	4599      	cmp	r9, r3
   17e72:	419b      	sbcs	r3, r3
   17e74:	4593      	cmp	fp, r2
   17e76:	4192      	sbcs	r2, r2
   17e78:	427f      	negs	r7, r7
   17e7a:	4249      	negs	r1, r1
   17e7c:	0c2d      	lsrs	r5, r5, #16
   17e7e:	4252      	negs	r2, r2
   17e80:	430f      	orrs	r7, r1
   17e82:	425b      	negs	r3, r3
   17e84:	4313      	orrs	r3, r2
   17e86:	197f      	adds	r7, r7, r5
   17e88:	18ff      	adds	r7, r7, r3
   17e8a:	465b      	mov	r3, fp
   17e8c:	193c      	adds	r4, r7, r4
   17e8e:	0ddb      	lsrs	r3, r3, #23
   17e90:	9a05      	ldr	r2, [sp, #20]
   17e92:	0264      	lsls	r4, r4, #9
   17e94:	431c      	orrs	r4, r3
   17e96:	0243      	lsls	r3, r0, #9
   17e98:	4313      	orrs	r3, r2
   17e9a:	1e5d      	subs	r5, r3, #1
   17e9c:	41ab      	sbcs	r3, r5
   17e9e:	465a      	mov	r2, fp
   17ea0:	0dc0      	lsrs	r0, r0, #23
   17ea2:	4303      	orrs	r3, r0
   17ea4:	0252      	lsls	r2, r2, #9
   17ea6:	4313      	orrs	r3, r2
   17ea8:	01e2      	lsls	r2, r4, #7
   17eaa:	d556      	bpl.n	17f5a <__aeabi_dmul+0x426>
   17eac:	2001      	movs	r0, #1
   17eae:	085a      	lsrs	r2, r3, #1
   17eb0:	4003      	ands	r3, r0
   17eb2:	4313      	orrs	r3, r2
   17eb4:	07e2      	lsls	r2, r4, #31
   17eb6:	4313      	orrs	r3, r2
   17eb8:	0864      	lsrs	r4, r4, #1
   17eba:	485a      	ldr	r0, [pc, #360]	; (18024 <__aeabi_dmul+0x4f0>)
   17ebc:	4460      	add	r0, ip
   17ebe:	2800      	cmp	r0, #0
   17ec0:	dd4d      	ble.n	17f5e <__aeabi_dmul+0x42a>
   17ec2:	075a      	lsls	r2, r3, #29
   17ec4:	d009      	beq.n	17eda <__aeabi_dmul+0x3a6>
   17ec6:	220f      	movs	r2, #15
   17ec8:	401a      	ands	r2, r3
   17eca:	2a04      	cmp	r2, #4
   17ecc:	d005      	beq.n	17eda <__aeabi_dmul+0x3a6>
   17ece:	1d1a      	adds	r2, r3, #4
   17ed0:	429a      	cmp	r2, r3
   17ed2:	419b      	sbcs	r3, r3
   17ed4:	425b      	negs	r3, r3
   17ed6:	18e4      	adds	r4, r4, r3
   17ed8:	0013      	movs	r3, r2
   17eda:	01e2      	lsls	r2, r4, #7
   17edc:	d504      	bpl.n	17ee8 <__aeabi_dmul+0x3b4>
   17ede:	2080      	movs	r0, #128	; 0x80
   17ee0:	4a51      	ldr	r2, [pc, #324]	; (18028 <__aeabi_dmul+0x4f4>)
   17ee2:	00c0      	lsls	r0, r0, #3
   17ee4:	4014      	ands	r4, r2
   17ee6:	4460      	add	r0, ip
   17ee8:	4a50      	ldr	r2, [pc, #320]	; (1802c <__aeabi_dmul+0x4f8>)
   17eea:	4290      	cmp	r0, r2
   17eec:	dd00      	ble.n	17ef0 <__aeabi_dmul+0x3bc>
   17eee:	e6e3      	b.n	17cb8 <__aeabi_dmul+0x184>
   17ef0:	2501      	movs	r5, #1
   17ef2:	08db      	lsrs	r3, r3, #3
   17ef4:	0762      	lsls	r2, r4, #29
   17ef6:	431a      	orrs	r2, r3
   17ef8:	0264      	lsls	r4, r4, #9
   17efa:	9b01      	ldr	r3, [sp, #4]
   17efc:	4691      	mov	r9, r2
   17efe:	0b22      	lsrs	r2, r4, #12
   17f00:	0544      	lsls	r4, r0, #21
   17f02:	0d64      	lsrs	r4, r4, #21
   17f04:	401d      	ands	r5, r3
   17f06:	e67c      	b.n	17c02 <__aeabi_dmul+0xce>
   17f08:	2280      	movs	r2, #128	; 0x80
   17f0a:	4659      	mov	r1, fp
   17f0c:	0312      	lsls	r2, r2, #12
   17f0e:	4211      	tst	r1, r2
   17f10:	d008      	beq.n	17f24 <__aeabi_dmul+0x3f0>
   17f12:	4214      	tst	r4, r2
   17f14:	d106      	bne.n	17f24 <__aeabi_dmul+0x3f0>
   17f16:	4322      	orrs	r2, r4
   17f18:	0312      	lsls	r2, r2, #12
   17f1a:	0b12      	lsrs	r2, r2, #12
   17f1c:	4645      	mov	r5, r8
   17f1e:	4699      	mov	r9, r3
   17f20:	4c43      	ldr	r4, [pc, #268]	; (18030 <__aeabi_dmul+0x4fc>)
   17f22:	e66e      	b.n	17c02 <__aeabi_dmul+0xce>
   17f24:	465b      	mov	r3, fp
   17f26:	431a      	orrs	r2, r3
   17f28:	0312      	lsls	r2, r2, #12
   17f2a:	0b12      	lsrs	r2, r2, #12
   17f2c:	4c40      	ldr	r4, [pc, #256]	; (18030 <__aeabi_dmul+0x4fc>)
   17f2e:	e668      	b.n	17c02 <__aeabi_dmul+0xce>
   17f30:	0003      	movs	r3, r0
   17f32:	4654      	mov	r4, sl
   17f34:	3b28      	subs	r3, #40	; 0x28
   17f36:	409c      	lsls	r4, r3
   17f38:	2300      	movs	r3, #0
   17f3a:	e6b9      	b.n	17cb0 <__aeabi_dmul+0x17c>
   17f3c:	f000 fcb0 	bl	188a0 <__clzsi2>
   17f40:	3020      	adds	r0, #32
   17f42:	e6a6      	b.n	17c92 <__aeabi_dmul+0x15e>
   17f44:	0003      	movs	r3, r0
   17f46:	3b28      	subs	r3, #40	; 0x28
   17f48:	409f      	lsls	r7, r3
   17f4a:	2300      	movs	r3, #0
   17f4c:	46bb      	mov	fp, r7
   17f4e:	4699      	mov	r9, r3
   17f50:	e68a      	b.n	17c68 <__aeabi_dmul+0x134>
   17f52:	f000 fca5 	bl	188a0 <__clzsi2>
   17f56:	3020      	adds	r0, #32
   17f58:	e674      	b.n	17c44 <__aeabi_dmul+0x110>
   17f5a:	46b4      	mov	ip, r6
   17f5c:	e7ad      	b.n	17eba <__aeabi_dmul+0x386>
   17f5e:	2501      	movs	r5, #1
   17f60:	1a2a      	subs	r2, r5, r0
   17f62:	2a38      	cmp	r2, #56	; 0x38
   17f64:	dd06      	ble.n	17f74 <__aeabi_dmul+0x440>
   17f66:	9b01      	ldr	r3, [sp, #4]
   17f68:	2400      	movs	r4, #0
   17f6a:	401d      	ands	r5, r3
   17f6c:	2300      	movs	r3, #0
   17f6e:	2200      	movs	r2, #0
   17f70:	4699      	mov	r9, r3
   17f72:	e646      	b.n	17c02 <__aeabi_dmul+0xce>
   17f74:	2a1f      	cmp	r2, #31
   17f76:	dc21      	bgt.n	17fbc <__aeabi_dmul+0x488>
   17f78:	2520      	movs	r5, #32
   17f7a:	0020      	movs	r0, r4
   17f7c:	1aad      	subs	r5, r5, r2
   17f7e:	001e      	movs	r6, r3
   17f80:	40ab      	lsls	r3, r5
   17f82:	40a8      	lsls	r0, r5
   17f84:	40d6      	lsrs	r6, r2
   17f86:	1e5d      	subs	r5, r3, #1
   17f88:	41ab      	sbcs	r3, r5
   17f8a:	4330      	orrs	r0, r6
   17f8c:	4318      	orrs	r0, r3
   17f8e:	40d4      	lsrs	r4, r2
   17f90:	0743      	lsls	r3, r0, #29
   17f92:	d009      	beq.n	17fa8 <__aeabi_dmul+0x474>
   17f94:	230f      	movs	r3, #15
   17f96:	4003      	ands	r3, r0
   17f98:	2b04      	cmp	r3, #4
   17f9a:	d005      	beq.n	17fa8 <__aeabi_dmul+0x474>
   17f9c:	0003      	movs	r3, r0
   17f9e:	1d18      	adds	r0, r3, #4
   17fa0:	4298      	cmp	r0, r3
   17fa2:	419b      	sbcs	r3, r3
   17fa4:	425b      	negs	r3, r3
   17fa6:	18e4      	adds	r4, r4, r3
   17fa8:	0223      	lsls	r3, r4, #8
   17faa:	d521      	bpl.n	17ff0 <__aeabi_dmul+0x4bc>
   17fac:	2501      	movs	r5, #1
   17fae:	9b01      	ldr	r3, [sp, #4]
   17fb0:	2401      	movs	r4, #1
   17fb2:	401d      	ands	r5, r3
   17fb4:	2300      	movs	r3, #0
   17fb6:	2200      	movs	r2, #0
   17fb8:	4699      	mov	r9, r3
   17fba:	e622      	b.n	17c02 <__aeabi_dmul+0xce>
   17fbc:	251f      	movs	r5, #31
   17fbe:	0021      	movs	r1, r4
   17fc0:	426d      	negs	r5, r5
   17fc2:	1a28      	subs	r0, r5, r0
   17fc4:	40c1      	lsrs	r1, r0
   17fc6:	0008      	movs	r0, r1
   17fc8:	2a20      	cmp	r2, #32
   17fca:	d01d      	beq.n	18008 <__aeabi_dmul+0x4d4>
   17fcc:	355f      	adds	r5, #95	; 0x5f
   17fce:	1aaa      	subs	r2, r5, r2
   17fd0:	4094      	lsls	r4, r2
   17fd2:	4323      	orrs	r3, r4
   17fd4:	1e5c      	subs	r4, r3, #1
   17fd6:	41a3      	sbcs	r3, r4
   17fd8:	2507      	movs	r5, #7
   17fda:	4303      	orrs	r3, r0
   17fdc:	401d      	ands	r5, r3
   17fde:	2200      	movs	r2, #0
   17fe0:	2d00      	cmp	r5, #0
   17fe2:	d009      	beq.n	17ff8 <__aeabi_dmul+0x4c4>
   17fe4:	220f      	movs	r2, #15
   17fe6:	2400      	movs	r4, #0
   17fe8:	401a      	ands	r2, r3
   17fea:	0018      	movs	r0, r3
   17fec:	2a04      	cmp	r2, #4
   17fee:	d1d6      	bne.n	17f9e <__aeabi_dmul+0x46a>
   17ff0:	0003      	movs	r3, r0
   17ff2:	0765      	lsls	r5, r4, #29
   17ff4:	0264      	lsls	r4, r4, #9
   17ff6:	0b22      	lsrs	r2, r4, #12
   17ff8:	08db      	lsrs	r3, r3, #3
   17ffa:	432b      	orrs	r3, r5
   17ffc:	2501      	movs	r5, #1
   17ffe:	4699      	mov	r9, r3
   18000:	9b01      	ldr	r3, [sp, #4]
   18002:	2400      	movs	r4, #0
   18004:	401d      	ands	r5, r3
   18006:	e5fc      	b.n	17c02 <__aeabi_dmul+0xce>
   18008:	2400      	movs	r4, #0
   1800a:	e7e2      	b.n	17fd2 <__aeabi_dmul+0x49e>
   1800c:	2280      	movs	r2, #128	; 0x80
   1800e:	2501      	movs	r5, #1
   18010:	0312      	lsls	r2, r2, #12
   18012:	4322      	orrs	r2, r4
   18014:	9901      	ldr	r1, [sp, #4]
   18016:	0312      	lsls	r2, r2, #12
   18018:	0b12      	lsrs	r2, r2, #12
   1801a:	400d      	ands	r5, r1
   1801c:	4699      	mov	r9, r3
   1801e:	4c04      	ldr	r4, [pc, #16]	; (18030 <__aeabi_dmul+0x4fc>)
   18020:	e5ef      	b.n	17c02 <__aeabi_dmul+0xce>
   18022:	46c0      	nop			; (mov r8, r8)
   18024:	000003ff 	.word	0x000003ff
   18028:	feffffff 	.word	0xfeffffff
   1802c:	000007fe 	.word	0x000007fe
   18030:	000007ff 	.word	0x000007ff

00018034 <__aeabi_dsub>:
   18034:	b5f0      	push	{r4, r5, r6, r7, lr}
   18036:	4646      	mov	r6, r8
   18038:	46d6      	mov	lr, sl
   1803a:	464f      	mov	r7, r9
   1803c:	030c      	lsls	r4, r1, #12
   1803e:	b5c0      	push	{r6, r7, lr}
   18040:	0fcd      	lsrs	r5, r1, #31
   18042:	004e      	lsls	r6, r1, #1
   18044:	0a61      	lsrs	r1, r4, #9
   18046:	0f44      	lsrs	r4, r0, #29
   18048:	430c      	orrs	r4, r1
   1804a:	00c1      	lsls	r1, r0, #3
   1804c:	0058      	lsls	r0, r3, #1
   1804e:	0d40      	lsrs	r0, r0, #21
   18050:	4684      	mov	ip, r0
   18052:	468a      	mov	sl, r1
   18054:	000f      	movs	r7, r1
   18056:	0319      	lsls	r1, r3, #12
   18058:	0f50      	lsrs	r0, r2, #29
   1805a:	0a49      	lsrs	r1, r1, #9
   1805c:	4301      	orrs	r1, r0
   1805e:	48c6      	ldr	r0, [pc, #792]	; (18378 <__aeabi_dsub+0x344>)
   18060:	0d76      	lsrs	r6, r6, #21
   18062:	46a8      	mov	r8, r5
   18064:	0fdb      	lsrs	r3, r3, #31
   18066:	00d2      	lsls	r2, r2, #3
   18068:	4584      	cmp	ip, r0
   1806a:	d100      	bne.n	1806e <__aeabi_dsub+0x3a>
   1806c:	e0d8      	b.n	18220 <__aeabi_dsub+0x1ec>
   1806e:	2001      	movs	r0, #1
   18070:	4043      	eors	r3, r0
   18072:	42ab      	cmp	r3, r5
   18074:	d100      	bne.n	18078 <__aeabi_dsub+0x44>
   18076:	e0a6      	b.n	181c6 <__aeabi_dsub+0x192>
   18078:	4660      	mov	r0, ip
   1807a:	1a35      	subs	r5, r6, r0
   1807c:	2d00      	cmp	r5, #0
   1807e:	dc00      	bgt.n	18082 <__aeabi_dsub+0x4e>
   18080:	e105      	b.n	1828e <__aeabi_dsub+0x25a>
   18082:	2800      	cmp	r0, #0
   18084:	d110      	bne.n	180a8 <__aeabi_dsub+0x74>
   18086:	000b      	movs	r3, r1
   18088:	4313      	orrs	r3, r2
   1808a:	d100      	bne.n	1808e <__aeabi_dsub+0x5a>
   1808c:	e0d7      	b.n	1823e <__aeabi_dsub+0x20a>
   1808e:	1e6b      	subs	r3, r5, #1
   18090:	2b00      	cmp	r3, #0
   18092:	d000      	beq.n	18096 <__aeabi_dsub+0x62>
   18094:	e14b      	b.n	1832e <__aeabi_dsub+0x2fa>
   18096:	4653      	mov	r3, sl
   18098:	1a9f      	subs	r7, r3, r2
   1809a:	45ba      	cmp	sl, r7
   1809c:	4180      	sbcs	r0, r0
   1809e:	1a64      	subs	r4, r4, r1
   180a0:	4240      	negs	r0, r0
   180a2:	1a24      	subs	r4, r4, r0
   180a4:	2601      	movs	r6, #1
   180a6:	e01e      	b.n	180e6 <__aeabi_dsub+0xb2>
   180a8:	4bb3      	ldr	r3, [pc, #716]	; (18378 <__aeabi_dsub+0x344>)
   180aa:	429e      	cmp	r6, r3
   180ac:	d048      	beq.n	18140 <__aeabi_dsub+0x10c>
   180ae:	2380      	movs	r3, #128	; 0x80
   180b0:	041b      	lsls	r3, r3, #16
   180b2:	4319      	orrs	r1, r3
   180b4:	2d38      	cmp	r5, #56	; 0x38
   180b6:	dd00      	ble.n	180ba <__aeabi_dsub+0x86>
   180b8:	e119      	b.n	182ee <__aeabi_dsub+0x2ba>
   180ba:	2d1f      	cmp	r5, #31
   180bc:	dd00      	ble.n	180c0 <__aeabi_dsub+0x8c>
   180be:	e14c      	b.n	1835a <__aeabi_dsub+0x326>
   180c0:	2320      	movs	r3, #32
   180c2:	000f      	movs	r7, r1
   180c4:	1b5b      	subs	r3, r3, r5
   180c6:	0010      	movs	r0, r2
   180c8:	409a      	lsls	r2, r3
   180ca:	409f      	lsls	r7, r3
   180cc:	40e8      	lsrs	r0, r5
   180ce:	1e53      	subs	r3, r2, #1
   180d0:	419a      	sbcs	r2, r3
   180d2:	40e9      	lsrs	r1, r5
   180d4:	4307      	orrs	r7, r0
   180d6:	4317      	orrs	r7, r2
   180d8:	4653      	mov	r3, sl
   180da:	1bdf      	subs	r7, r3, r7
   180dc:	1a61      	subs	r1, r4, r1
   180de:	45ba      	cmp	sl, r7
   180e0:	41a4      	sbcs	r4, r4
   180e2:	4264      	negs	r4, r4
   180e4:	1b0c      	subs	r4, r1, r4
   180e6:	0223      	lsls	r3, r4, #8
   180e8:	d400      	bmi.n	180ec <__aeabi_dsub+0xb8>
   180ea:	e0c5      	b.n	18278 <__aeabi_dsub+0x244>
   180ec:	0264      	lsls	r4, r4, #9
   180ee:	0a65      	lsrs	r5, r4, #9
   180f0:	2d00      	cmp	r5, #0
   180f2:	d100      	bne.n	180f6 <__aeabi_dsub+0xc2>
   180f4:	e0f6      	b.n	182e4 <__aeabi_dsub+0x2b0>
   180f6:	0028      	movs	r0, r5
   180f8:	f000 fbd2 	bl	188a0 <__clzsi2>
   180fc:	0003      	movs	r3, r0
   180fe:	3b08      	subs	r3, #8
   18100:	2b1f      	cmp	r3, #31
   18102:	dd00      	ble.n	18106 <__aeabi_dsub+0xd2>
   18104:	e0e9      	b.n	182da <__aeabi_dsub+0x2a6>
   18106:	2220      	movs	r2, #32
   18108:	003c      	movs	r4, r7
   1810a:	1ad2      	subs	r2, r2, r3
   1810c:	409d      	lsls	r5, r3
   1810e:	40d4      	lsrs	r4, r2
   18110:	409f      	lsls	r7, r3
   18112:	4325      	orrs	r5, r4
   18114:	429e      	cmp	r6, r3
   18116:	dd00      	ble.n	1811a <__aeabi_dsub+0xe6>
   18118:	e0db      	b.n	182d2 <__aeabi_dsub+0x29e>
   1811a:	1b9e      	subs	r6, r3, r6
   1811c:	1c73      	adds	r3, r6, #1
   1811e:	2b1f      	cmp	r3, #31
   18120:	dd00      	ble.n	18124 <__aeabi_dsub+0xf0>
   18122:	e10a      	b.n	1833a <__aeabi_dsub+0x306>
   18124:	2220      	movs	r2, #32
   18126:	0038      	movs	r0, r7
   18128:	1ad2      	subs	r2, r2, r3
   1812a:	0029      	movs	r1, r5
   1812c:	4097      	lsls	r7, r2
   1812e:	002c      	movs	r4, r5
   18130:	4091      	lsls	r1, r2
   18132:	40d8      	lsrs	r0, r3
   18134:	1e7a      	subs	r2, r7, #1
   18136:	4197      	sbcs	r7, r2
   18138:	40dc      	lsrs	r4, r3
   1813a:	2600      	movs	r6, #0
   1813c:	4301      	orrs	r1, r0
   1813e:	430f      	orrs	r7, r1
   18140:	077b      	lsls	r3, r7, #29
   18142:	d009      	beq.n	18158 <__aeabi_dsub+0x124>
   18144:	230f      	movs	r3, #15
   18146:	403b      	ands	r3, r7
   18148:	2b04      	cmp	r3, #4
   1814a:	d005      	beq.n	18158 <__aeabi_dsub+0x124>
   1814c:	1d3b      	adds	r3, r7, #4
   1814e:	42bb      	cmp	r3, r7
   18150:	41bf      	sbcs	r7, r7
   18152:	427f      	negs	r7, r7
   18154:	19e4      	adds	r4, r4, r7
   18156:	001f      	movs	r7, r3
   18158:	0223      	lsls	r3, r4, #8
   1815a:	d525      	bpl.n	181a8 <__aeabi_dsub+0x174>
   1815c:	4b86      	ldr	r3, [pc, #536]	; (18378 <__aeabi_dsub+0x344>)
   1815e:	3601      	adds	r6, #1
   18160:	429e      	cmp	r6, r3
   18162:	d100      	bne.n	18166 <__aeabi_dsub+0x132>
   18164:	e0af      	b.n	182c6 <__aeabi_dsub+0x292>
   18166:	4b85      	ldr	r3, [pc, #532]	; (1837c <__aeabi_dsub+0x348>)
   18168:	2501      	movs	r5, #1
   1816a:	401c      	ands	r4, r3
   1816c:	4643      	mov	r3, r8
   1816e:	0762      	lsls	r2, r4, #29
   18170:	08ff      	lsrs	r7, r7, #3
   18172:	0264      	lsls	r4, r4, #9
   18174:	0576      	lsls	r6, r6, #21
   18176:	4317      	orrs	r7, r2
   18178:	0b24      	lsrs	r4, r4, #12
   1817a:	0d76      	lsrs	r6, r6, #21
   1817c:	401d      	ands	r5, r3
   1817e:	2100      	movs	r1, #0
   18180:	0324      	lsls	r4, r4, #12
   18182:	0b23      	lsrs	r3, r4, #12
   18184:	0d0c      	lsrs	r4, r1, #20
   18186:	4a7e      	ldr	r2, [pc, #504]	; (18380 <__aeabi_dsub+0x34c>)
   18188:	0524      	lsls	r4, r4, #20
   1818a:	431c      	orrs	r4, r3
   1818c:	4014      	ands	r4, r2
   1818e:	0533      	lsls	r3, r6, #20
   18190:	4323      	orrs	r3, r4
   18192:	005b      	lsls	r3, r3, #1
   18194:	07ed      	lsls	r5, r5, #31
   18196:	085b      	lsrs	r3, r3, #1
   18198:	432b      	orrs	r3, r5
   1819a:	0038      	movs	r0, r7
   1819c:	0019      	movs	r1, r3
   1819e:	bc1c      	pop	{r2, r3, r4}
   181a0:	4690      	mov	r8, r2
   181a2:	4699      	mov	r9, r3
   181a4:	46a2      	mov	sl, r4
   181a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   181a8:	2501      	movs	r5, #1
   181aa:	4643      	mov	r3, r8
   181ac:	0762      	lsls	r2, r4, #29
   181ae:	08ff      	lsrs	r7, r7, #3
   181b0:	4317      	orrs	r7, r2
   181b2:	08e4      	lsrs	r4, r4, #3
   181b4:	401d      	ands	r5, r3
   181b6:	4b70      	ldr	r3, [pc, #448]	; (18378 <__aeabi_dsub+0x344>)
   181b8:	429e      	cmp	r6, r3
   181ba:	d036      	beq.n	1822a <__aeabi_dsub+0x1f6>
   181bc:	0324      	lsls	r4, r4, #12
   181be:	0576      	lsls	r6, r6, #21
   181c0:	0b24      	lsrs	r4, r4, #12
   181c2:	0d76      	lsrs	r6, r6, #21
   181c4:	e7db      	b.n	1817e <__aeabi_dsub+0x14a>
   181c6:	4663      	mov	r3, ip
   181c8:	1af3      	subs	r3, r6, r3
   181ca:	2b00      	cmp	r3, #0
   181cc:	dc00      	bgt.n	181d0 <__aeabi_dsub+0x19c>
   181ce:	e094      	b.n	182fa <__aeabi_dsub+0x2c6>
   181d0:	4660      	mov	r0, ip
   181d2:	2800      	cmp	r0, #0
   181d4:	d035      	beq.n	18242 <__aeabi_dsub+0x20e>
   181d6:	4868      	ldr	r0, [pc, #416]	; (18378 <__aeabi_dsub+0x344>)
   181d8:	4286      	cmp	r6, r0
   181da:	d0b1      	beq.n	18140 <__aeabi_dsub+0x10c>
   181dc:	2780      	movs	r7, #128	; 0x80
   181de:	043f      	lsls	r7, r7, #16
   181e0:	4339      	orrs	r1, r7
   181e2:	2b38      	cmp	r3, #56	; 0x38
   181e4:	dc00      	bgt.n	181e8 <__aeabi_dsub+0x1b4>
   181e6:	e0fd      	b.n	183e4 <__aeabi_dsub+0x3b0>
   181e8:	430a      	orrs	r2, r1
   181ea:	0017      	movs	r7, r2
   181ec:	2100      	movs	r1, #0
   181ee:	1e7a      	subs	r2, r7, #1
   181f0:	4197      	sbcs	r7, r2
   181f2:	4457      	add	r7, sl
   181f4:	4557      	cmp	r7, sl
   181f6:	4180      	sbcs	r0, r0
   181f8:	1909      	adds	r1, r1, r4
   181fa:	4244      	negs	r4, r0
   181fc:	190c      	adds	r4, r1, r4
   181fe:	0223      	lsls	r3, r4, #8
   18200:	d53a      	bpl.n	18278 <__aeabi_dsub+0x244>
   18202:	4b5d      	ldr	r3, [pc, #372]	; (18378 <__aeabi_dsub+0x344>)
   18204:	3601      	adds	r6, #1
   18206:	429e      	cmp	r6, r3
   18208:	d100      	bne.n	1820c <__aeabi_dsub+0x1d8>
   1820a:	e14b      	b.n	184a4 <__aeabi_dsub+0x470>
   1820c:	2201      	movs	r2, #1
   1820e:	4b5b      	ldr	r3, [pc, #364]	; (1837c <__aeabi_dsub+0x348>)
   18210:	401c      	ands	r4, r3
   18212:	087b      	lsrs	r3, r7, #1
   18214:	4017      	ands	r7, r2
   18216:	431f      	orrs	r7, r3
   18218:	07e2      	lsls	r2, r4, #31
   1821a:	4317      	orrs	r7, r2
   1821c:	0864      	lsrs	r4, r4, #1
   1821e:	e78f      	b.n	18140 <__aeabi_dsub+0x10c>
   18220:	0008      	movs	r0, r1
   18222:	4310      	orrs	r0, r2
   18224:	d000      	beq.n	18228 <__aeabi_dsub+0x1f4>
   18226:	e724      	b.n	18072 <__aeabi_dsub+0x3e>
   18228:	e721      	b.n	1806e <__aeabi_dsub+0x3a>
   1822a:	0023      	movs	r3, r4
   1822c:	433b      	orrs	r3, r7
   1822e:	d100      	bne.n	18232 <__aeabi_dsub+0x1fe>
   18230:	e1b9      	b.n	185a6 <__aeabi_dsub+0x572>
   18232:	2280      	movs	r2, #128	; 0x80
   18234:	0312      	lsls	r2, r2, #12
   18236:	4314      	orrs	r4, r2
   18238:	0324      	lsls	r4, r4, #12
   1823a:	0b24      	lsrs	r4, r4, #12
   1823c:	e79f      	b.n	1817e <__aeabi_dsub+0x14a>
   1823e:	002e      	movs	r6, r5
   18240:	e77e      	b.n	18140 <__aeabi_dsub+0x10c>
   18242:	0008      	movs	r0, r1
   18244:	4310      	orrs	r0, r2
   18246:	d100      	bne.n	1824a <__aeabi_dsub+0x216>
   18248:	e0ca      	b.n	183e0 <__aeabi_dsub+0x3ac>
   1824a:	1e58      	subs	r0, r3, #1
   1824c:	4684      	mov	ip, r0
   1824e:	2800      	cmp	r0, #0
   18250:	d000      	beq.n	18254 <__aeabi_dsub+0x220>
   18252:	e0e7      	b.n	18424 <__aeabi_dsub+0x3f0>
   18254:	4452      	add	r2, sl
   18256:	4552      	cmp	r2, sl
   18258:	4180      	sbcs	r0, r0
   1825a:	1864      	adds	r4, r4, r1
   1825c:	4240      	negs	r0, r0
   1825e:	1824      	adds	r4, r4, r0
   18260:	0017      	movs	r7, r2
   18262:	2601      	movs	r6, #1
   18264:	0223      	lsls	r3, r4, #8
   18266:	d507      	bpl.n	18278 <__aeabi_dsub+0x244>
   18268:	2602      	movs	r6, #2
   1826a:	e7cf      	b.n	1820c <__aeabi_dsub+0x1d8>
   1826c:	4664      	mov	r4, ip
   1826e:	432c      	orrs	r4, r5
   18270:	d100      	bne.n	18274 <__aeabi_dsub+0x240>
   18272:	e1b3      	b.n	185dc <__aeabi_dsub+0x5a8>
   18274:	002c      	movs	r4, r5
   18276:	4667      	mov	r7, ip
   18278:	077b      	lsls	r3, r7, #29
   1827a:	d000      	beq.n	1827e <__aeabi_dsub+0x24a>
   1827c:	e762      	b.n	18144 <__aeabi_dsub+0x110>
   1827e:	0763      	lsls	r3, r4, #29
   18280:	08ff      	lsrs	r7, r7, #3
   18282:	431f      	orrs	r7, r3
   18284:	2501      	movs	r5, #1
   18286:	4643      	mov	r3, r8
   18288:	08e4      	lsrs	r4, r4, #3
   1828a:	401d      	ands	r5, r3
   1828c:	e793      	b.n	181b6 <__aeabi_dsub+0x182>
   1828e:	2d00      	cmp	r5, #0
   18290:	d178      	bne.n	18384 <__aeabi_dsub+0x350>
   18292:	1c75      	adds	r5, r6, #1
   18294:	056d      	lsls	r5, r5, #21
   18296:	0d6d      	lsrs	r5, r5, #21
   18298:	2d01      	cmp	r5, #1
   1829a:	dc00      	bgt.n	1829e <__aeabi_dsub+0x26a>
   1829c:	e0f2      	b.n	18484 <__aeabi_dsub+0x450>
   1829e:	4650      	mov	r0, sl
   182a0:	1a80      	subs	r0, r0, r2
   182a2:	4582      	cmp	sl, r0
   182a4:	41bf      	sbcs	r7, r7
   182a6:	1a65      	subs	r5, r4, r1
   182a8:	427f      	negs	r7, r7
   182aa:	1bed      	subs	r5, r5, r7
   182ac:	4684      	mov	ip, r0
   182ae:	0228      	lsls	r0, r5, #8
   182b0:	d400      	bmi.n	182b4 <__aeabi_dsub+0x280>
   182b2:	e08c      	b.n	183ce <__aeabi_dsub+0x39a>
   182b4:	4650      	mov	r0, sl
   182b6:	1a17      	subs	r7, r2, r0
   182b8:	42ba      	cmp	r2, r7
   182ba:	4192      	sbcs	r2, r2
   182bc:	1b0c      	subs	r4, r1, r4
   182be:	4255      	negs	r5, r2
   182c0:	1b65      	subs	r5, r4, r5
   182c2:	4698      	mov	r8, r3
   182c4:	e714      	b.n	180f0 <__aeabi_dsub+0xbc>
   182c6:	2501      	movs	r5, #1
   182c8:	4643      	mov	r3, r8
   182ca:	2400      	movs	r4, #0
   182cc:	401d      	ands	r5, r3
   182ce:	2700      	movs	r7, #0
   182d0:	e755      	b.n	1817e <__aeabi_dsub+0x14a>
   182d2:	4c2a      	ldr	r4, [pc, #168]	; (1837c <__aeabi_dsub+0x348>)
   182d4:	1af6      	subs	r6, r6, r3
   182d6:	402c      	ands	r4, r5
   182d8:	e732      	b.n	18140 <__aeabi_dsub+0x10c>
   182da:	003d      	movs	r5, r7
   182dc:	3828      	subs	r0, #40	; 0x28
   182de:	4085      	lsls	r5, r0
   182e0:	2700      	movs	r7, #0
   182e2:	e717      	b.n	18114 <__aeabi_dsub+0xe0>
   182e4:	0038      	movs	r0, r7
   182e6:	f000 fadb 	bl	188a0 <__clzsi2>
   182ea:	3020      	adds	r0, #32
   182ec:	e706      	b.n	180fc <__aeabi_dsub+0xc8>
   182ee:	430a      	orrs	r2, r1
   182f0:	0017      	movs	r7, r2
   182f2:	2100      	movs	r1, #0
   182f4:	1e7a      	subs	r2, r7, #1
   182f6:	4197      	sbcs	r7, r2
   182f8:	e6ee      	b.n	180d8 <__aeabi_dsub+0xa4>
   182fa:	2b00      	cmp	r3, #0
   182fc:	d000      	beq.n	18300 <__aeabi_dsub+0x2cc>
   182fe:	e0e5      	b.n	184cc <__aeabi_dsub+0x498>
   18300:	1c73      	adds	r3, r6, #1
   18302:	469c      	mov	ip, r3
   18304:	055b      	lsls	r3, r3, #21
   18306:	0d5b      	lsrs	r3, r3, #21
   18308:	2b01      	cmp	r3, #1
   1830a:	dc00      	bgt.n	1830e <__aeabi_dsub+0x2da>
   1830c:	e09f      	b.n	1844e <__aeabi_dsub+0x41a>
   1830e:	4b1a      	ldr	r3, [pc, #104]	; (18378 <__aeabi_dsub+0x344>)
   18310:	459c      	cmp	ip, r3
   18312:	d100      	bne.n	18316 <__aeabi_dsub+0x2e2>
   18314:	e0c5      	b.n	184a2 <__aeabi_dsub+0x46e>
   18316:	4452      	add	r2, sl
   18318:	4552      	cmp	r2, sl
   1831a:	4180      	sbcs	r0, r0
   1831c:	1864      	adds	r4, r4, r1
   1831e:	4240      	negs	r0, r0
   18320:	1824      	adds	r4, r4, r0
   18322:	07e7      	lsls	r7, r4, #31
   18324:	0852      	lsrs	r2, r2, #1
   18326:	4317      	orrs	r7, r2
   18328:	0864      	lsrs	r4, r4, #1
   1832a:	4666      	mov	r6, ip
   1832c:	e708      	b.n	18140 <__aeabi_dsub+0x10c>
   1832e:	4812      	ldr	r0, [pc, #72]	; (18378 <__aeabi_dsub+0x344>)
   18330:	4285      	cmp	r5, r0
   18332:	d100      	bne.n	18336 <__aeabi_dsub+0x302>
   18334:	e085      	b.n	18442 <__aeabi_dsub+0x40e>
   18336:	001d      	movs	r5, r3
   18338:	e6bc      	b.n	180b4 <__aeabi_dsub+0x80>
   1833a:	0029      	movs	r1, r5
   1833c:	3e1f      	subs	r6, #31
   1833e:	40f1      	lsrs	r1, r6
   18340:	2b20      	cmp	r3, #32
   18342:	d100      	bne.n	18346 <__aeabi_dsub+0x312>
   18344:	e07f      	b.n	18446 <__aeabi_dsub+0x412>
   18346:	2240      	movs	r2, #64	; 0x40
   18348:	1ad3      	subs	r3, r2, r3
   1834a:	409d      	lsls	r5, r3
   1834c:	432f      	orrs	r7, r5
   1834e:	1e7d      	subs	r5, r7, #1
   18350:	41af      	sbcs	r7, r5
   18352:	2400      	movs	r4, #0
   18354:	430f      	orrs	r7, r1
   18356:	2600      	movs	r6, #0
   18358:	e78e      	b.n	18278 <__aeabi_dsub+0x244>
   1835a:	002b      	movs	r3, r5
   1835c:	000f      	movs	r7, r1
   1835e:	3b20      	subs	r3, #32
   18360:	40df      	lsrs	r7, r3
   18362:	2d20      	cmp	r5, #32
   18364:	d071      	beq.n	1844a <__aeabi_dsub+0x416>
   18366:	2340      	movs	r3, #64	; 0x40
   18368:	1b5d      	subs	r5, r3, r5
   1836a:	40a9      	lsls	r1, r5
   1836c:	430a      	orrs	r2, r1
   1836e:	1e51      	subs	r1, r2, #1
   18370:	418a      	sbcs	r2, r1
   18372:	2100      	movs	r1, #0
   18374:	4317      	orrs	r7, r2
   18376:	e6af      	b.n	180d8 <__aeabi_dsub+0xa4>
   18378:	000007ff 	.word	0x000007ff
   1837c:	ff7fffff 	.word	0xff7fffff
   18380:	800fffff 	.word	0x800fffff
   18384:	2e00      	cmp	r6, #0
   18386:	d03e      	beq.n	18406 <__aeabi_dsub+0x3d2>
   18388:	4eb3      	ldr	r6, [pc, #716]	; (18658 <__aeabi_dsub+0x624>)
   1838a:	45b4      	cmp	ip, r6
   1838c:	d045      	beq.n	1841a <__aeabi_dsub+0x3e6>
   1838e:	2680      	movs	r6, #128	; 0x80
   18390:	0436      	lsls	r6, r6, #16
   18392:	426d      	negs	r5, r5
   18394:	4334      	orrs	r4, r6
   18396:	2d38      	cmp	r5, #56	; 0x38
   18398:	dd00      	ble.n	1839c <__aeabi_dsub+0x368>
   1839a:	e0a8      	b.n	184ee <__aeabi_dsub+0x4ba>
   1839c:	2d1f      	cmp	r5, #31
   1839e:	dd00      	ble.n	183a2 <__aeabi_dsub+0x36e>
   183a0:	e11f      	b.n	185e2 <__aeabi_dsub+0x5ae>
   183a2:	2620      	movs	r6, #32
   183a4:	0027      	movs	r7, r4
   183a6:	4650      	mov	r0, sl
   183a8:	1b76      	subs	r6, r6, r5
   183aa:	40b7      	lsls	r7, r6
   183ac:	40e8      	lsrs	r0, r5
   183ae:	4307      	orrs	r7, r0
   183b0:	4650      	mov	r0, sl
   183b2:	40b0      	lsls	r0, r6
   183b4:	1e46      	subs	r6, r0, #1
   183b6:	41b0      	sbcs	r0, r6
   183b8:	40ec      	lsrs	r4, r5
   183ba:	4338      	orrs	r0, r7
   183bc:	1a17      	subs	r7, r2, r0
   183be:	42ba      	cmp	r2, r7
   183c0:	4192      	sbcs	r2, r2
   183c2:	1b0c      	subs	r4, r1, r4
   183c4:	4252      	negs	r2, r2
   183c6:	1aa4      	subs	r4, r4, r2
   183c8:	4666      	mov	r6, ip
   183ca:	4698      	mov	r8, r3
   183cc:	e68b      	b.n	180e6 <__aeabi_dsub+0xb2>
   183ce:	4664      	mov	r4, ip
   183d0:	4667      	mov	r7, ip
   183d2:	432c      	orrs	r4, r5
   183d4:	d000      	beq.n	183d8 <__aeabi_dsub+0x3a4>
   183d6:	e68b      	b.n	180f0 <__aeabi_dsub+0xbc>
   183d8:	2500      	movs	r5, #0
   183da:	2600      	movs	r6, #0
   183dc:	2700      	movs	r7, #0
   183de:	e6ea      	b.n	181b6 <__aeabi_dsub+0x182>
   183e0:	001e      	movs	r6, r3
   183e2:	e6ad      	b.n	18140 <__aeabi_dsub+0x10c>
   183e4:	2b1f      	cmp	r3, #31
   183e6:	dc60      	bgt.n	184aa <__aeabi_dsub+0x476>
   183e8:	2720      	movs	r7, #32
   183ea:	1af8      	subs	r0, r7, r3
   183ec:	000f      	movs	r7, r1
   183ee:	4684      	mov	ip, r0
   183f0:	4087      	lsls	r7, r0
   183f2:	0010      	movs	r0, r2
   183f4:	40d8      	lsrs	r0, r3
   183f6:	4307      	orrs	r7, r0
   183f8:	4660      	mov	r0, ip
   183fa:	4082      	lsls	r2, r0
   183fc:	1e50      	subs	r0, r2, #1
   183fe:	4182      	sbcs	r2, r0
   18400:	40d9      	lsrs	r1, r3
   18402:	4317      	orrs	r7, r2
   18404:	e6f5      	b.n	181f2 <__aeabi_dsub+0x1be>
   18406:	0026      	movs	r6, r4
   18408:	4650      	mov	r0, sl
   1840a:	4306      	orrs	r6, r0
   1840c:	d005      	beq.n	1841a <__aeabi_dsub+0x3e6>
   1840e:	43ed      	mvns	r5, r5
   18410:	2d00      	cmp	r5, #0
   18412:	d0d3      	beq.n	183bc <__aeabi_dsub+0x388>
   18414:	4e90      	ldr	r6, [pc, #576]	; (18658 <__aeabi_dsub+0x624>)
   18416:	45b4      	cmp	ip, r6
   18418:	d1bd      	bne.n	18396 <__aeabi_dsub+0x362>
   1841a:	000c      	movs	r4, r1
   1841c:	0017      	movs	r7, r2
   1841e:	4666      	mov	r6, ip
   18420:	4698      	mov	r8, r3
   18422:	e68d      	b.n	18140 <__aeabi_dsub+0x10c>
   18424:	488c      	ldr	r0, [pc, #560]	; (18658 <__aeabi_dsub+0x624>)
   18426:	4283      	cmp	r3, r0
   18428:	d00b      	beq.n	18442 <__aeabi_dsub+0x40e>
   1842a:	4663      	mov	r3, ip
   1842c:	e6d9      	b.n	181e2 <__aeabi_dsub+0x1ae>
   1842e:	2d00      	cmp	r5, #0
   18430:	d000      	beq.n	18434 <__aeabi_dsub+0x400>
   18432:	e096      	b.n	18562 <__aeabi_dsub+0x52e>
   18434:	0008      	movs	r0, r1
   18436:	4310      	orrs	r0, r2
   18438:	d100      	bne.n	1843c <__aeabi_dsub+0x408>
   1843a:	e0e2      	b.n	18602 <__aeabi_dsub+0x5ce>
   1843c:	000c      	movs	r4, r1
   1843e:	0017      	movs	r7, r2
   18440:	4698      	mov	r8, r3
   18442:	4e85      	ldr	r6, [pc, #532]	; (18658 <__aeabi_dsub+0x624>)
   18444:	e67c      	b.n	18140 <__aeabi_dsub+0x10c>
   18446:	2500      	movs	r5, #0
   18448:	e780      	b.n	1834c <__aeabi_dsub+0x318>
   1844a:	2100      	movs	r1, #0
   1844c:	e78e      	b.n	1836c <__aeabi_dsub+0x338>
   1844e:	0023      	movs	r3, r4
   18450:	4650      	mov	r0, sl
   18452:	4303      	orrs	r3, r0
   18454:	2e00      	cmp	r6, #0
   18456:	d000      	beq.n	1845a <__aeabi_dsub+0x426>
   18458:	e0a8      	b.n	185ac <__aeabi_dsub+0x578>
   1845a:	2b00      	cmp	r3, #0
   1845c:	d100      	bne.n	18460 <__aeabi_dsub+0x42c>
   1845e:	e0de      	b.n	1861e <__aeabi_dsub+0x5ea>
   18460:	000b      	movs	r3, r1
   18462:	4313      	orrs	r3, r2
   18464:	d100      	bne.n	18468 <__aeabi_dsub+0x434>
   18466:	e66b      	b.n	18140 <__aeabi_dsub+0x10c>
   18468:	4452      	add	r2, sl
   1846a:	4552      	cmp	r2, sl
   1846c:	4180      	sbcs	r0, r0
   1846e:	1864      	adds	r4, r4, r1
   18470:	4240      	negs	r0, r0
   18472:	1824      	adds	r4, r4, r0
   18474:	0017      	movs	r7, r2
   18476:	0223      	lsls	r3, r4, #8
   18478:	d400      	bmi.n	1847c <__aeabi_dsub+0x448>
   1847a:	e6fd      	b.n	18278 <__aeabi_dsub+0x244>
   1847c:	4b77      	ldr	r3, [pc, #476]	; (1865c <__aeabi_dsub+0x628>)
   1847e:	4666      	mov	r6, ip
   18480:	401c      	ands	r4, r3
   18482:	e65d      	b.n	18140 <__aeabi_dsub+0x10c>
   18484:	0025      	movs	r5, r4
   18486:	4650      	mov	r0, sl
   18488:	4305      	orrs	r5, r0
   1848a:	2e00      	cmp	r6, #0
   1848c:	d1cf      	bne.n	1842e <__aeabi_dsub+0x3fa>
   1848e:	2d00      	cmp	r5, #0
   18490:	d14f      	bne.n	18532 <__aeabi_dsub+0x4fe>
   18492:	000c      	movs	r4, r1
   18494:	4314      	orrs	r4, r2
   18496:	d100      	bne.n	1849a <__aeabi_dsub+0x466>
   18498:	e0a0      	b.n	185dc <__aeabi_dsub+0x5a8>
   1849a:	000c      	movs	r4, r1
   1849c:	0017      	movs	r7, r2
   1849e:	4698      	mov	r8, r3
   184a0:	e64e      	b.n	18140 <__aeabi_dsub+0x10c>
   184a2:	4666      	mov	r6, ip
   184a4:	2400      	movs	r4, #0
   184a6:	2700      	movs	r7, #0
   184a8:	e685      	b.n	181b6 <__aeabi_dsub+0x182>
   184aa:	001f      	movs	r7, r3
   184ac:	0008      	movs	r0, r1
   184ae:	3f20      	subs	r7, #32
   184b0:	40f8      	lsrs	r0, r7
   184b2:	0007      	movs	r7, r0
   184b4:	2b20      	cmp	r3, #32
   184b6:	d100      	bne.n	184ba <__aeabi_dsub+0x486>
   184b8:	e08e      	b.n	185d8 <__aeabi_dsub+0x5a4>
   184ba:	2040      	movs	r0, #64	; 0x40
   184bc:	1ac3      	subs	r3, r0, r3
   184be:	4099      	lsls	r1, r3
   184c0:	430a      	orrs	r2, r1
   184c2:	1e51      	subs	r1, r2, #1
   184c4:	418a      	sbcs	r2, r1
   184c6:	2100      	movs	r1, #0
   184c8:	4317      	orrs	r7, r2
   184ca:	e692      	b.n	181f2 <__aeabi_dsub+0x1be>
   184cc:	2e00      	cmp	r6, #0
   184ce:	d114      	bne.n	184fa <__aeabi_dsub+0x4c6>
   184d0:	0026      	movs	r6, r4
   184d2:	4650      	mov	r0, sl
   184d4:	4306      	orrs	r6, r0
   184d6:	d062      	beq.n	1859e <__aeabi_dsub+0x56a>
   184d8:	43db      	mvns	r3, r3
   184da:	2b00      	cmp	r3, #0
   184dc:	d15c      	bne.n	18598 <__aeabi_dsub+0x564>
   184de:	1887      	adds	r7, r0, r2
   184e0:	4297      	cmp	r7, r2
   184e2:	4192      	sbcs	r2, r2
   184e4:	1864      	adds	r4, r4, r1
   184e6:	4252      	negs	r2, r2
   184e8:	18a4      	adds	r4, r4, r2
   184ea:	4666      	mov	r6, ip
   184ec:	e687      	b.n	181fe <__aeabi_dsub+0x1ca>
   184ee:	4650      	mov	r0, sl
   184f0:	4320      	orrs	r0, r4
   184f2:	1e44      	subs	r4, r0, #1
   184f4:	41a0      	sbcs	r0, r4
   184f6:	2400      	movs	r4, #0
   184f8:	e760      	b.n	183bc <__aeabi_dsub+0x388>
   184fa:	4e57      	ldr	r6, [pc, #348]	; (18658 <__aeabi_dsub+0x624>)
   184fc:	45b4      	cmp	ip, r6
   184fe:	d04e      	beq.n	1859e <__aeabi_dsub+0x56a>
   18500:	2680      	movs	r6, #128	; 0x80
   18502:	0436      	lsls	r6, r6, #16
   18504:	425b      	negs	r3, r3
   18506:	4334      	orrs	r4, r6
   18508:	2b38      	cmp	r3, #56	; 0x38
   1850a:	dd00      	ble.n	1850e <__aeabi_dsub+0x4da>
   1850c:	e07f      	b.n	1860e <__aeabi_dsub+0x5da>
   1850e:	2b1f      	cmp	r3, #31
   18510:	dd00      	ble.n	18514 <__aeabi_dsub+0x4e0>
   18512:	e08b      	b.n	1862c <__aeabi_dsub+0x5f8>
   18514:	2620      	movs	r6, #32
   18516:	0027      	movs	r7, r4
   18518:	4650      	mov	r0, sl
   1851a:	1af6      	subs	r6, r6, r3
   1851c:	40b7      	lsls	r7, r6
   1851e:	40d8      	lsrs	r0, r3
   18520:	4307      	orrs	r7, r0
   18522:	4650      	mov	r0, sl
   18524:	40b0      	lsls	r0, r6
   18526:	1e46      	subs	r6, r0, #1
   18528:	41b0      	sbcs	r0, r6
   1852a:	4307      	orrs	r7, r0
   1852c:	40dc      	lsrs	r4, r3
   1852e:	18bf      	adds	r7, r7, r2
   18530:	e7d6      	b.n	184e0 <__aeabi_dsub+0x4ac>
   18532:	000d      	movs	r5, r1
   18534:	4315      	orrs	r5, r2
   18536:	d100      	bne.n	1853a <__aeabi_dsub+0x506>
   18538:	e602      	b.n	18140 <__aeabi_dsub+0x10c>
   1853a:	4650      	mov	r0, sl
   1853c:	1a80      	subs	r0, r0, r2
   1853e:	4582      	cmp	sl, r0
   18540:	41bf      	sbcs	r7, r7
   18542:	1a65      	subs	r5, r4, r1
   18544:	427f      	negs	r7, r7
   18546:	1bed      	subs	r5, r5, r7
   18548:	4684      	mov	ip, r0
   1854a:	0228      	lsls	r0, r5, #8
   1854c:	d400      	bmi.n	18550 <__aeabi_dsub+0x51c>
   1854e:	e68d      	b.n	1826c <__aeabi_dsub+0x238>
   18550:	4650      	mov	r0, sl
   18552:	1a17      	subs	r7, r2, r0
   18554:	42ba      	cmp	r2, r7
   18556:	4192      	sbcs	r2, r2
   18558:	1b0c      	subs	r4, r1, r4
   1855a:	4252      	negs	r2, r2
   1855c:	1aa4      	subs	r4, r4, r2
   1855e:	4698      	mov	r8, r3
   18560:	e5ee      	b.n	18140 <__aeabi_dsub+0x10c>
   18562:	000d      	movs	r5, r1
   18564:	4315      	orrs	r5, r2
   18566:	d100      	bne.n	1856a <__aeabi_dsub+0x536>
   18568:	e76b      	b.n	18442 <__aeabi_dsub+0x40e>
   1856a:	4650      	mov	r0, sl
   1856c:	0767      	lsls	r7, r4, #29
   1856e:	08c0      	lsrs	r0, r0, #3
   18570:	4307      	orrs	r7, r0
   18572:	2080      	movs	r0, #128	; 0x80
   18574:	08e4      	lsrs	r4, r4, #3
   18576:	0300      	lsls	r0, r0, #12
   18578:	4204      	tst	r4, r0
   1857a:	d007      	beq.n	1858c <__aeabi_dsub+0x558>
   1857c:	08cd      	lsrs	r5, r1, #3
   1857e:	4205      	tst	r5, r0
   18580:	d104      	bne.n	1858c <__aeabi_dsub+0x558>
   18582:	002c      	movs	r4, r5
   18584:	4698      	mov	r8, r3
   18586:	08d7      	lsrs	r7, r2, #3
   18588:	0749      	lsls	r1, r1, #29
   1858a:	430f      	orrs	r7, r1
   1858c:	0f7b      	lsrs	r3, r7, #29
   1858e:	00e4      	lsls	r4, r4, #3
   18590:	431c      	orrs	r4, r3
   18592:	00ff      	lsls	r7, r7, #3
   18594:	4e30      	ldr	r6, [pc, #192]	; (18658 <__aeabi_dsub+0x624>)
   18596:	e5d3      	b.n	18140 <__aeabi_dsub+0x10c>
   18598:	4e2f      	ldr	r6, [pc, #188]	; (18658 <__aeabi_dsub+0x624>)
   1859a:	45b4      	cmp	ip, r6
   1859c:	d1b4      	bne.n	18508 <__aeabi_dsub+0x4d4>
   1859e:	000c      	movs	r4, r1
   185a0:	0017      	movs	r7, r2
   185a2:	4666      	mov	r6, ip
   185a4:	e5cc      	b.n	18140 <__aeabi_dsub+0x10c>
   185a6:	2700      	movs	r7, #0
   185a8:	2400      	movs	r4, #0
   185aa:	e5e8      	b.n	1817e <__aeabi_dsub+0x14a>
   185ac:	2b00      	cmp	r3, #0
   185ae:	d039      	beq.n	18624 <__aeabi_dsub+0x5f0>
   185b0:	000b      	movs	r3, r1
   185b2:	4313      	orrs	r3, r2
   185b4:	d100      	bne.n	185b8 <__aeabi_dsub+0x584>
   185b6:	e744      	b.n	18442 <__aeabi_dsub+0x40e>
   185b8:	08c0      	lsrs	r0, r0, #3
   185ba:	0767      	lsls	r7, r4, #29
   185bc:	4307      	orrs	r7, r0
   185be:	2080      	movs	r0, #128	; 0x80
   185c0:	08e4      	lsrs	r4, r4, #3
   185c2:	0300      	lsls	r0, r0, #12
   185c4:	4204      	tst	r4, r0
   185c6:	d0e1      	beq.n	1858c <__aeabi_dsub+0x558>
   185c8:	08cb      	lsrs	r3, r1, #3
   185ca:	4203      	tst	r3, r0
   185cc:	d1de      	bne.n	1858c <__aeabi_dsub+0x558>
   185ce:	08d7      	lsrs	r7, r2, #3
   185d0:	0749      	lsls	r1, r1, #29
   185d2:	430f      	orrs	r7, r1
   185d4:	001c      	movs	r4, r3
   185d6:	e7d9      	b.n	1858c <__aeabi_dsub+0x558>
   185d8:	2100      	movs	r1, #0
   185da:	e771      	b.n	184c0 <__aeabi_dsub+0x48c>
   185dc:	2500      	movs	r5, #0
   185de:	2700      	movs	r7, #0
   185e0:	e5e9      	b.n	181b6 <__aeabi_dsub+0x182>
   185e2:	002e      	movs	r6, r5
   185e4:	0027      	movs	r7, r4
   185e6:	3e20      	subs	r6, #32
   185e8:	40f7      	lsrs	r7, r6
   185ea:	2d20      	cmp	r5, #32
   185ec:	d02f      	beq.n	1864e <__aeabi_dsub+0x61a>
   185ee:	2640      	movs	r6, #64	; 0x40
   185f0:	1b75      	subs	r5, r6, r5
   185f2:	40ac      	lsls	r4, r5
   185f4:	4650      	mov	r0, sl
   185f6:	4320      	orrs	r0, r4
   185f8:	1e44      	subs	r4, r0, #1
   185fa:	41a0      	sbcs	r0, r4
   185fc:	2400      	movs	r4, #0
   185fe:	4338      	orrs	r0, r7
   18600:	e6dc      	b.n	183bc <__aeabi_dsub+0x388>
   18602:	2480      	movs	r4, #128	; 0x80
   18604:	2500      	movs	r5, #0
   18606:	0324      	lsls	r4, r4, #12
   18608:	4e13      	ldr	r6, [pc, #76]	; (18658 <__aeabi_dsub+0x624>)
   1860a:	2700      	movs	r7, #0
   1860c:	e5d3      	b.n	181b6 <__aeabi_dsub+0x182>
   1860e:	4650      	mov	r0, sl
   18610:	4320      	orrs	r0, r4
   18612:	0007      	movs	r7, r0
   18614:	1e78      	subs	r0, r7, #1
   18616:	4187      	sbcs	r7, r0
   18618:	2400      	movs	r4, #0
   1861a:	18bf      	adds	r7, r7, r2
   1861c:	e760      	b.n	184e0 <__aeabi_dsub+0x4ac>
   1861e:	000c      	movs	r4, r1
   18620:	0017      	movs	r7, r2
   18622:	e58d      	b.n	18140 <__aeabi_dsub+0x10c>
   18624:	000c      	movs	r4, r1
   18626:	0017      	movs	r7, r2
   18628:	4e0b      	ldr	r6, [pc, #44]	; (18658 <__aeabi_dsub+0x624>)
   1862a:	e589      	b.n	18140 <__aeabi_dsub+0x10c>
   1862c:	001e      	movs	r6, r3
   1862e:	0027      	movs	r7, r4
   18630:	3e20      	subs	r6, #32
   18632:	40f7      	lsrs	r7, r6
   18634:	2b20      	cmp	r3, #32
   18636:	d00c      	beq.n	18652 <__aeabi_dsub+0x61e>
   18638:	2640      	movs	r6, #64	; 0x40
   1863a:	1af3      	subs	r3, r6, r3
   1863c:	409c      	lsls	r4, r3
   1863e:	4650      	mov	r0, sl
   18640:	4320      	orrs	r0, r4
   18642:	1e44      	subs	r4, r0, #1
   18644:	41a0      	sbcs	r0, r4
   18646:	4307      	orrs	r7, r0
   18648:	2400      	movs	r4, #0
   1864a:	18bf      	adds	r7, r7, r2
   1864c:	e748      	b.n	184e0 <__aeabi_dsub+0x4ac>
   1864e:	2400      	movs	r4, #0
   18650:	e7d0      	b.n	185f4 <__aeabi_dsub+0x5c0>
   18652:	2400      	movs	r4, #0
   18654:	e7f3      	b.n	1863e <__aeabi_dsub+0x60a>
   18656:	46c0      	nop			; (mov r8, r8)
   18658:	000007ff 	.word	0x000007ff
   1865c:	ff7fffff 	.word	0xff7fffff

00018660 <__aeabi_dcmpun>:
   18660:	b570      	push	{r4, r5, r6, lr}
   18662:	4e0e      	ldr	r6, [pc, #56]	; (1869c <__aeabi_dcmpun+0x3c>)
   18664:	030d      	lsls	r5, r1, #12
   18666:	031c      	lsls	r4, r3, #12
   18668:	0049      	lsls	r1, r1, #1
   1866a:	005b      	lsls	r3, r3, #1
   1866c:	0b2d      	lsrs	r5, r5, #12
   1866e:	0d49      	lsrs	r1, r1, #21
   18670:	0b24      	lsrs	r4, r4, #12
   18672:	0d5b      	lsrs	r3, r3, #21
   18674:	42b1      	cmp	r1, r6
   18676:	d004      	beq.n	18682 <__aeabi_dcmpun+0x22>
   18678:	4908      	ldr	r1, [pc, #32]	; (1869c <__aeabi_dcmpun+0x3c>)
   1867a:	2000      	movs	r0, #0
   1867c:	428b      	cmp	r3, r1
   1867e:	d008      	beq.n	18692 <__aeabi_dcmpun+0x32>
   18680:	bd70      	pop	{r4, r5, r6, pc}
   18682:	4305      	orrs	r5, r0
   18684:	2001      	movs	r0, #1
   18686:	2d00      	cmp	r5, #0
   18688:	d1fa      	bne.n	18680 <__aeabi_dcmpun+0x20>
   1868a:	4904      	ldr	r1, [pc, #16]	; (1869c <__aeabi_dcmpun+0x3c>)
   1868c:	2000      	movs	r0, #0
   1868e:	428b      	cmp	r3, r1
   18690:	d1f6      	bne.n	18680 <__aeabi_dcmpun+0x20>
   18692:	4314      	orrs	r4, r2
   18694:	0020      	movs	r0, r4
   18696:	1e44      	subs	r4, r0, #1
   18698:	41a0      	sbcs	r0, r4
   1869a:	e7f1      	b.n	18680 <__aeabi_dcmpun+0x20>
   1869c:	000007ff 	.word	0x000007ff

000186a0 <__aeabi_d2iz>:
   186a0:	b530      	push	{r4, r5, lr}
   186a2:	4d13      	ldr	r5, [pc, #76]	; (186f0 <__aeabi_d2iz+0x50>)
   186a4:	030a      	lsls	r2, r1, #12
   186a6:	004b      	lsls	r3, r1, #1
   186a8:	0b12      	lsrs	r2, r2, #12
   186aa:	0d5b      	lsrs	r3, r3, #21
   186ac:	0fc9      	lsrs	r1, r1, #31
   186ae:	2400      	movs	r4, #0
   186b0:	42ab      	cmp	r3, r5
   186b2:	dd10      	ble.n	186d6 <__aeabi_d2iz+0x36>
   186b4:	4c0f      	ldr	r4, [pc, #60]	; (186f4 <__aeabi_d2iz+0x54>)
   186b6:	42a3      	cmp	r3, r4
   186b8:	dc0f      	bgt.n	186da <__aeabi_d2iz+0x3a>
   186ba:	2480      	movs	r4, #128	; 0x80
   186bc:	4d0e      	ldr	r5, [pc, #56]	; (186f8 <__aeabi_d2iz+0x58>)
   186be:	0364      	lsls	r4, r4, #13
   186c0:	4322      	orrs	r2, r4
   186c2:	1aed      	subs	r5, r5, r3
   186c4:	2d1f      	cmp	r5, #31
   186c6:	dd0b      	ble.n	186e0 <__aeabi_d2iz+0x40>
   186c8:	480c      	ldr	r0, [pc, #48]	; (186fc <__aeabi_d2iz+0x5c>)
   186ca:	1ac3      	subs	r3, r0, r3
   186cc:	40da      	lsrs	r2, r3
   186ce:	4254      	negs	r4, r2
   186d0:	2900      	cmp	r1, #0
   186d2:	d100      	bne.n	186d6 <__aeabi_d2iz+0x36>
   186d4:	0014      	movs	r4, r2
   186d6:	0020      	movs	r0, r4
   186d8:	bd30      	pop	{r4, r5, pc}
   186da:	4b09      	ldr	r3, [pc, #36]	; (18700 <__aeabi_d2iz+0x60>)
   186dc:	18cc      	adds	r4, r1, r3
   186de:	e7fa      	b.n	186d6 <__aeabi_d2iz+0x36>
   186e0:	4c08      	ldr	r4, [pc, #32]	; (18704 <__aeabi_d2iz+0x64>)
   186e2:	40e8      	lsrs	r0, r5
   186e4:	46a4      	mov	ip, r4
   186e6:	4463      	add	r3, ip
   186e8:	409a      	lsls	r2, r3
   186ea:	4302      	orrs	r2, r0
   186ec:	e7ef      	b.n	186ce <__aeabi_d2iz+0x2e>
   186ee:	46c0      	nop			; (mov r8, r8)
   186f0:	000003fe 	.word	0x000003fe
   186f4:	0000041d 	.word	0x0000041d
   186f8:	00000433 	.word	0x00000433
   186fc:	00000413 	.word	0x00000413
   18700:	7fffffff 	.word	0x7fffffff
   18704:	fffffbed 	.word	0xfffffbed

00018708 <__aeabi_i2d>:
   18708:	b570      	push	{r4, r5, r6, lr}
   1870a:	2800      	cmp	r0, #0
   1870c:	d030      	beq.n	18770 <__aeabi_i2d+0x68>
   1870e:	17c3      	asrs	r3, r0, #31
   18710:	18c4      	adds	r4, r0, r3
   18712:	405c      	eors	r4, r3
   18714:	0fc5      	lsrs	r5, r0, #31
   18716:	0020      	movs	r0, r4
   18718:	f000 f8c2 	bl	188a0 <__clzsi2>
   1871c:	4b17      	ldr	r3, [pc, #92]	; (1877c <__aeabi_i2d+0x74>)
   1871e:	4a18      	ldr	r2, [pc, #96]	; (18780 <__aeabi_i2d+0x78>)
   18720:	1a1b      	subs	r3, r3, r0
   18722:	1ad2      	subs	r2, r2, r3
   18724:	2a1f      	cmp	r2, #31
   18726:	dd18      	ble.n	1875a <__aeabi_i2d+0x52>
   18728:	4a16      	ldr	r2, [pc, #88]	; (18784 <__aeabi_i2d+0x7c>)
   1872a:	1ad2      	subs	r2, r2, r3
   1872c:	4094      	lsls	r4, r2
   1872e:	2200      	movs	r2, #0
   18730:	0324      	lsls	r4, r4, #12
   18732:	055b      	lsls	r3, r3, #21
   18734:	0b24      	lsrs	r4, r4, #12
   18736:	0d5b      	lsrs	r3, r3, #21
   18738:	2100      	movs	r1, #0
   1873a:	0010      	movs	r0, r2
   1873c:	0324      	lsls	r4, r4, #12
   1873e:	0d0a      	lsrs	r2, r1, #20
   18740:	0b24      	lsrs	r4, r4, #12
   18742:	0512      	lsls	r2, r2, #20
   18744:	4322      	orrs	r2, r4
   18746:	4c10      	ldr	r4, [pc, #64]	; (18788 <__aeabi_i2d+0x80>)
   18748:	051b      	lsls	r3, r3, #20
   1874a:	4022      	ands	r2, r4
   1874c:	4313      	orrs	r3, r2
   1874e:	005b      	lsls	r3, r3, #1
   18750:	07ed      	lsls	r5, r5, #31
   18752:	085b      	lsrs	r3, r3, #1
   18754:	432b      	orrs	r3, r5
   18756:	0019      	movs	r1, r3
   18758:	bd70      	pop	{r4, r5, r6, pc}
   1875a:	0021      	movs	r1, r4
   1875c:	4091      	lsls	r1, r2
   1875e:	000a      	movs	r2, r1
   18760:	210b      	movs	r1, #11
   18762:	1a08      	subs	r0, r1, r0
   18764:	40c4      	lsrs	r4, r0
   18766:	055b      	lsls	r3, r3, #21
   18768:	0324      	lsls	r4, r4, #12
   1876a:	0b24      	lsrs	r4, r4, #12
   1876c:	0d5b      	lsrs	r3, r3, #21
   1876e:	e7e3      	b.n	18738 <__aeabi_i2d+0x30>
   18770:	2500      	movs	r5, #0
   18772:	2300      	movs	r3, #0
   18774:	2400      	movs	r4, #0
   18776:	2200      	movs	r2, #0
   18778:	e7de      	b.n	18738 <__aeabi_i2d+0x30>
   1877a:	46c0      	nop			; (mov r8, r8)
   1877c:	0000041e 	.word	0x0000041e
   18780:	00000433 	.word	0x00000433
   18784:	00000413 	.word	0x00000413
   18788:	800fffff 	.word	0x800fffff

0001878c <__aeabi_ui2d>:
   1878c:	b510      	push	{r4, lr}
   1878e:	1e04      	subs	r4, r0, #0
   18790:	d028      	beq.n	187e4 <__aeabi_ui2d+0x58>
   18792:	f000 f885 	bl	188a0 <__clzsi2>
   18796:	4b15      	ldr	r3, [pc, #84]	; (187ec <__aeabi_ui2d+0x60>)
   18798:	4a15      	ldr	r2, [pc, #84]	; (187f0 <__aeabi_ui2d+0x64>)
   1879a:	1a1b      	subs	r3, r3, r0
   1879c:	1ad2      	subs	r2, r2, r3
   1879e:	2a1f      	cmp	r2, #31
   187a0:	dd15      	ble.n	187ce <__aeabi_ui2d+0x42>
   187a2:	4a14      	ldr	r2, [pc, #80]	; (187f4 <__aeabi_ui2d+0x68>)
   187a4:	1ad2      	subs	r2, r2, r3
   187a6:	4094      	lsls	r4, r2
   187a8:	2200      	movs	r2, #0
   187aa:	0324      	lsls	r4, r4, #12
   187ac:	055b      	lsls	r3, r3, #21
   187ae:	0b24      	lsrs	r4, r4, #12
   187b0:	0d5b      	lsrs	r3, r3, #21
   187b2:	2100      	movs	r1, #0
   187b4:	0010      	movs	r0, r2
   187b6:	0324      	lsls	r4, r4, #12
   187b8:	0d0a      	lsrs	r2, r1, #20
   187ba:	0b24      	lsrs	r4, r4, #12
   187bc:	0512      	lsls	r2, r2, #20
   187be:	4322      	orrs	r2, r4
   187c0:	4c0d      	ldr	r4, [pc, #52]	; (187f8 <__aeabi_ui2d+0x6c>)
   187c2:	051b      	lsls	r3, r3, #20
   187c4:	4022      	ands	r2, r4
   187c6:	4313      	orrs	r3, r2
   187c8:	005b      	lsls	r3, r3, #1
   187ca:	0859      	lsrs	r1, r3, #1
   187cc:	bd10      	pop	{r4, pc}
   187ce:	0021      	movs	r1, r4
   187d0:	4091      	lsls	r1, r2
   187d2:	000a      	movs	r2, r1
   187d4:	210b      	movs	r1, #11
   187d6:	1a08      	subs	r0, r1, r0
   187d8:	40c4      	lsrs	r4, r0
   187da:	055b      	lsls	r3, r3, #21
   187dc:	0324      	lsls	r4, r4, #12
   187de:	0b24      	lsrs	r4, r4, #12
   187e0:	0d5b      	lsrs	r3, r3, #21
   187e2:	e7e6      	b.n	187b2 <__aeabi_ui2d+0x26>
   187e4:	2300      	movs	r3, #0
   187e6:	2400      	movs	r4, #0
   187e8:	2200      	movs	r2, #0
   187ea:	e7e2      	b.n	187b2 <__aeabi_ui2d+0x26>
   187ec:	0000041e 	.word	0x0000041e
   187f0:	00000433 	.word	0x00000433
   187f4:	00000413 	.word	0x00000413
   187f8:	800fffff 	.word	0x800fffff

000187fc <__aeabi_f2d>:
   187fc:	0041      	lsls	r1, r0, #1
   187fe:	0e09      	lsrs	r1, r1, #24
   18800:	1c4b      	adds	r3, r1, #1
   18802:	b570      	push	{r4, r5, r6, lr}
   18804:	b2db      	uxtb	r3, r3
   18806:	0246      	lsls	r6, r0, #9
   18808:	0a75      	lsrs	r5, r6, #9
   1880a:	0fc4      	lsrs	r4, r0, #31
   1880c:	2b01      	cmp	r3, #1
   1880e:	dd14      	ble.n	1883a <__aeabi_f2d+0x3e>
   18810:	23e0      	movs	r3, #224	; 0xe0
   18812:	009b      	lsls	r3, r3, #2
   18814:	076d      	lsls	r5, r5, #29
   18816:	0b36      	lsrs	r6, r6, #12
   18818:	18cb      	adds	r3, r1, r3
   1881a:	2100      	movs	r1, #0
   1881c:	0d0a      	lsrs	r2, r1, #20
   1881e:	0028      	movs	r0, r5
   18820:	0512      	lsls	r2, r2, #20
   18822:	4d1c      	ldr	r5, [pc, #112]	; (18894 <__aeabi_f2d+0x98>)
   18824:	4332      	orrs	r2, r6
   18826:	055b      	lsls	r3, r3, #21
   18828:	402a      	ands	r2, r5
   1882a:	085b      	lsrs	r3, r3, #1
   1882c:	4313      	orrs	r3, r2
   1882e:	005b      	lsls	r3, r3, #1
   18830:	07e4      	lsls	r4, r4, #31
   18832:	085b      	lsrs	r3, r3, #1
   18834:	4323      	orrs	r3, r4
   18836:	0019      	movs	r1, r3
   18838:	bd70      	pop	{r4, r5, r6, pc}
   1883a:	2900      	cmp	r1, #0
   1883c:	d114      	bne.n	18868 <__aeabi_f2d+0x6c>
   1883e:	2d00      	cmp	r5, #0
   18840:	d01e      	beq.n	18880 <__aeabi_f2d+0x84>
   18842:	0028      	movs	r0, r5
   18844:	f000 f82c 	bl	188a0 <__clzsi2>
   18848:	280a      	cmp	r0, #10
   1884a:	dc1c      	bgt.n	18886 <__aeabi_f2d+0x8a>
   1884c:	230b      	movs	r3, #11
   1884e:	002a      	movs	r2, r5
   18850:	1a1b      	subs	r3, r3, r0
   18852:	40da      	lsrs	r2, r3
   18854:	0003      	movs	r3, r0
   18856:	3315      	adds	r3, #21
   18858:	409d      	lsls	r5, r3
   1885a:	4b0f      	ldr	r3, [pc, #60]	; (18898 <__aeabi_f2d+0x9c>)
   1885c:	0312      	lsls	r2, r2, #12
   1885e:	1a1b      	subs	r3, r3, r0
   18860:	055b      	lsls	r3, r3, #21
   18862:	0b16      	lsrs	r6, r2, #12
   18864:	0d5b      	lsrs	r3, r3, #21
   18866:	e7d8      	b.n	1881a <__aeabi_f2d+0x1e>
   18868:	2d00      	cmp	r5, #0
   1886a:	d006      	beq.n	1887a <__aeabi_f2d+0x7e>
   1886c:	0b32      	lsrs	r2, r6, #12
   1886e:	2680      	movs	r6, #128	; 0x80
   18870:	0336      	lsls	r6, r6, #12
   18872:	076d      	lsls	r5, r5, #29
   18874:	4316      	orrs	r6, r2
   18876:	4b09      	ldr	r3, [pc, #36]	; (1889c <__aeabi_f2d+0xa0>)
   18878:	e7cf      	b.n	1881a <__aeabi_f2d+0x1e>
   1887a:	4b08      	ldr	r3, [pc, #32]	; (1889c <__aeabi_f2d+0xa0>)
   1887c:	2600      	movs	r6, #0
   1887e:	e7cc      	b.n	1881a <__aeabi_f2d+0x1e>
   18880:	2300      	movs	r3, #0
   18882:	2600      	movs	r6, #0
   18884:	e7c9      	b.n	1881a <__aeabi_f2d+0x1e>
   18886:	0003      	movs	r3, r0
   18888:	002a      	movs	r2, r5
   1888a:	3b0b      	subs	r3, #11
   1888c:	409a      	lsls	r2, r3
   1888e:	2500      	movs	r5, #0
   18890:	e7e3      	b.n	1885a <__aeabi_f2d+0x5e>
   18892:	46c0      	nop			; (mov r8, r8)
   18894:	800fffff 	.word	0x800fffff
   18898:	00000389 	.word	0x00000389
   1889c:	000007ff 	.word	0x000007ff

000188a0 <__clzsi2>:
   188a0:	211c      	movs	r1, #28
   188a2:	2301      	movs	r3, #1
   188a4:	041b      	lsls	r3, r3, #16
   188a6:	4298      	cmp	r0, r3
   188a8:	d301      	bcc.n	188ae <__clzsi2+0xe>
   188aa:	0c00      	lsrs	r0, r0, #16
   188ac:	3910      	subs	r1, #16
   188ae:	0a1b      	lsrs	r3, r3, #8
   188b0:	4298      	cmp	r0, r3
   188b2:	d301      	bcc.n	188b8 <__clzsi2+0x18>
   188b4:	0a00      	lsrs	r0, r0, #8
   188b6:	3908      	subs	r1, #8
   188b8:	091b      	lsrs	r3, r3, #4
   188ba:	4298      	cmp	r0, r3
   188bc:	d301      	bcc.n	188c2 <__clzsi2+0x22>
   188be:	0900      	lsrs	r0, r0, #4
   188c0:	3904      	subs	r1, #4
   188c2:	a202      	add	r2, pc, #8	; (adr r2, 188cc <__clzsi2+0x2c>)
   188c4:	5c10      	ldrb	r0, [r2, r0]
   188c6:	1840      	adds	r0, r0, r1
   188c8:	4770      	bx	lr
   188ca:	46c0      	nop			; (mov r8, r8)
   188cc:	02020304 	.word	0x02020304
   188d0:	01010101 	.word	0x01010101
	...
   188dc:	6c696166 	.word	0x6c696166
   188e0:	74206465 	.word	0x74206465
   188e4:	6e69206f 	.word	0x6e69206f
   188e8:	61697469 	.word	0x61697469
   188ec:	657a696c 	.word	0x657a696c
   188f0:	43444820 	.word	0x43444820
   188f4:	30383031 	.word	0x30383031
   188f8:	69726420 	.word	0x69726420
   188fc:	2e726576 	.word	0x2e726576
   18900:	0000000d 	.word	0x0000000d
   18904:	61746164 	.word	0x61746164
   18908:	63617020 	.word	0x63617020
   1890c:	3a74656b 	.word	0x3a74656b
   18910:	25783020 	.word	0x25783020
   18914:	20783230 	.word	0x20783230
   18918:	30257830 	.word	0x30257830
   1891c:	30207832 	.word	0x30207832
   18920:	32302578 	.word	0x32302578
   18924:	000a0d78 	.word	0x000a0d78
   18928:	6f727265 	.word	0x6f727265
   1892c:	72742072 	.word	0x72742072
   18930:	676e6979 	.word	0x676e6979
   18934:	206f7420 	.word	0x206f7420
   18938:	20746573 	.word	0x20746573
   1893c:	6f736572 	.word	0x6f736572
   18940:	6974756c 	.word	0x6974756c
   18944:	0d216e6f 	.word	0x0d216e6f
   18948:	00000000 	.word	0x00000000
   1894c:	6c696166 	.word	0x6c696166
   18950:	74206465 	.word	0x74206465
   18954:	0973206f 	.word	0x0973206f
   18958:	20646e65 	.word	0x20646e65
   1895c:	69676572 	.word	0x69676572
   18960:	72657473 	.word	0x72657473
   18964:	71657220 	.word	0x71657220
   18968:	74736575 	.word	0x74736575
   1896c:	726f6620 	.word	0x726f6620
   18970:	6d6f6320 	.word	0x6d6f6320
   18974:	646e616d 	.word	0x646e616d
   18978:	25783020 	.word	0x25783020
   1897c:	21783230 	.word	0x21783230
   18980:	00000a0d 	.word	0x00000a0d
   18984:	6c696166 	.word	0x6c696166
   18988:	74206465 	.word	0x74206465
   1898c:	6572206f 	.word	0x6572206f
   18990:	76696563 	.word	0x76696563
   18994:	79622065 	.word	0x79622065
   18998:	20736574 	.word	0x20736574
   1899c:	20726f66 	.word	0x20726f66
   189a0:	6d6d6f63 	.word	0x6d6d6f63
   189a4:	20646e61 	.word	0x20646e61
   189a8:	30257830 	.word	0x30257830
   189ac:	0d217832 	.word	0x0d217832
   189b0:	0000000a 	.word	0x0000000a
   189b4:	6c696166 	.word	0x6c696166
   189b8:	74206465 	.word	0x74206465
   189bc:	6e69206f 	.word	0x6e69206f
   189c0:	61697469 	.word	0x61697469
   189c4:	657a696c 	.word	0x657a696c
   189c8:	4c535420 	.word	0x4c535420
   189cc:	31363532 	.word	0x31363532
   189d0:	69726420 	.word	0x69726420
   189d4:	2e726576 	.word	0x2e726576
   189d8:	0000000d 	.word	0x0000000d
   189dc:	6c696166 	.word	0x6c696166
   189e0:	74206465 	.word	0x74206465
   189e4:	6573206f 	.word	0x6573206f
   189e8:	7220646e 	.word	0x7220646e
   189ec:	73696765 	.word	0x73696765
   189f0:	20726574 	.word	0x20726574
   189f4:	75716572 	.word	0x75716572
   189f8:	20747365 	.word	0x20747365
   189fc:	20726f66 	.word	0x20726f66
   18a00:	6d6d6f63 	.word	0x6d6d6f63
   18a04:	20646e61 	.word	0x20646e61
   18a08:	30257830 	.word	0x30257830
   18a0c:	0d217832 	.word	0x0d217832
   18a10:	0000000a 	.word	0x0000000a
   18a14:	6c696166 	.word	0x6c696166
   18a18:	74206465 	.word	0x74206465
   18a1c:	6572206f 	.word	0x6572206f
   18a20:	76696563 	.word	0x76696563
   18a24:	79622065 	.word	0x79622065
   18a28:	20736574 	.word	0x20736574
   18a2c:	20726f66 	.word	0x20726f66
   18a30:	6d6d6f63 	.word	0x6d6d6f63
   18a34:	20646e61 	.word	0x20646e61
   18a38:	30257830 	.word	0x30257830
   18a3c:	0d217832 	.word	0x0d217832
   18a40:	0000000a 	.word	0x0000000a
   18a44:	5f746567 	.word	0x5f746567
   18a48:	3a78756c 	.word	0x3a78756c
   18a4c:	4c535420 	.word	0x4c535420
   18a50:	31363532 	.word	0x31363532
   18a54:	67696c20 	.word	0x67696c20
   18a58:	69207468 	.word	0x69207468
   18a5c:	61732073 	.word	0x61732073
   18a60:	61727574 	.word	0x61727574
   18a64:	00646574 	.word	0x00646574
   18a68:	72617473 	.word	0x72617473
   18a6c:	6f645f74 	.word	0x6f645f74
   18a70:	6f6c6e77 	.word	0x6f6c6e77
   18a74:	203a6461 	.word	0x203a6461
   18a78:	20434d4d 	.word	0x20434d4d
   18a7c:	726f7473 	.word	0x726f7473
   18a80:	20656761 	.word	0x20656761
   18a84:	20746f6e 	.word	0x20746f6e
   18a88:	64616572 	.word	0x64616572
   18a8c:	000d2e79 	.word	0x000d2e79
   18a90:	72617473 	.word	0x72617473
   18a94:	6f645f74 	.word	0x6f645f74
   18a98:	6f6c6e77 	.word	0x6f6c6e77
   18a9c:	203a6461 	.word	0x203a6461
   18aa0:	462d6957 	.word	0x462d6957
   18aa4:	73692069 	.word	0x73692069
   18aa8:	746f6e20 	.word	0x746f6e20
   18aac:	6e6f6320 	.word	0x6e6f6320
   18ab0:	7463656e 	.word	0x7463656e
   18ab4:	0d2e6465 	.word	0x0d2e6465
   18ab8:	00000000 	.word	0x00000000
   18abc:	72617473 	.word	0x72617473
   18ac0:	6f645f74 	.word	0x6f645f74
   18ac4:	6f6c6e77 	.word	0x6f6c6e77
   18ac8:	203a6461 	.word	0x203a6461
   18acc:	75716572 	.word	0x75716572
   18ad0:	20747365 	.word	0x20747365
   18ad4:	73207369 	.word	0x73207369
   18ad8:	20746e65 	.word	0x20746e65
   18adc:	65726c61 	.word	0x65726c61
   18ae0:	2e796461 	.word	0x2e796461
   18ae4:	0000000d 	.word	0x0000000d
   18ae8:	72617473 	.word	0x72617473
   18aec:	6f645f74 	.word	0x6f645f74
   18af0:	6f6c6e77 	.word	0x6f6c6e77
   18af4:	203a6461 	.word	0x203a6461
   18af8:	6e6e7572 	.word	0x6e6e7572
   18afc:	20676e69 	.word	0x20676e69
   18b00:	6e776f64 	.word	0x6e776f64
   18b04:	64616f6c 	.word	0x64616f6c
   18b08:	726c6120 	.word	0x726c6120
   18b0c:	79646165 	.word	0x79646165
   18b10:	00000d2e 	.word	0x00000d2e
   18b14:	72617473 	.word	0x72617473
   18b18:	6f645f74 	.word	0x6f645f74
   18b1c:	6f6c6e77 	.word	0x6f6c6e77
   18b20:	5b206461 	.word	0x5b206461
   18b24:	5f544f4e 	.word	0x5f544f4e
   18b28:	43454843 	.word	0x43454843
   18b2c:	5d44454b 	.word	0x5d44454b
   18b30:	6573203a 	.word	0x6573203a
   18b34:	6e69646e 	.word	0x6e69646e
   18b38:	54482067 	.word	0x54482067
   18b3c:	72205054 	.word	0x72205054
   18b40:	65757165 	.word	0x65757165
   18b44:	66207473 	.word	0x66207473
   18b48:	6820726f 	.word	0x6820726f
   18b4c:	65646165 	.word	0x65646165
   18b50:	00000d72 	.word	0x00000d72
   18b54:	72617473 	.word	0x72617473
   18b58:	6f645f74 	.word	0x6f645f74
   18b5c:	6f6c6e77 	.word	0x6f6c6e77
   18b60:	5b206461 	.word	0x5b206461
   18b64:	41445055 	.word	0x41445055
   18b68:	415f4554 	.word	0x415f4554
   18b6c:	4c494156 	.word	0x4c494156
   18b70:	454c4241 	.word	0x454c4241
   18b74:	73203a5d 	.word	0x73203a5d
   18b78:	69646e65 	.word	0x69646e65
   18b7c:	4820676e 	.word	0x4820676e
   18b80:	20505454 	.word	0x20505454
   18b84:	75716572 	.word	0x75716572
   18b88:	20747365 	.word	0x20747365
   18b8c:	20726f66 	.word	0x20726f66
   18b90:	6d726966 	.word	0x6d726966
   18b94:	65726177 	.word	0x65726177
   18b98:	0000000d 	.word	0x0000000d
   18b9c:	72617473 	.word	0x72617473
   18ba0:	6f645f74 	.word	0x6f645f74
   18ba4:	6f6c6e77 	.word	0x6f6c6e77
   18ba8:	203a6461 	.word	0x203a6461
   18bac:	75206f6e 	.word	0x75206f6e
   18bb0:	74616470 	.word	0x74616470
   18bb4:	76612065 	.word	0x76612065
   18bb8:	616c6961 	.word	0x616c6961
   18bbc:	0d656c62 	.word	0x0d656c62
   18bc0:	00000000 	.word	0x00000000
   18bc4:	74697277 	.word	0x74697277
   18bc8:	69665f65 	.word	0x69665f65
   18bcc:	61776d72 	.word	0x61776d72
   18bd0:	6d5f6572 	.word	0x6d5f6572
   18bd4:	64617465 	.word	0x64617465
   18bd8:	3a617461 	.word	0x3a617461
   18bdc:	756f6320 	.word	0x756f6320
   18be0:	6e20646c 	.word	0x6e20646c
   18be4:	7720746f 	.word	0x7720746f
   18be8:	65746972 	.word	0x65746972
   18bec:	206f7420 	.word	0x206f7420
   18bf0:	73616c66 	.word	0x73616c66
   18bf4:	000d2168 	.word	0x000d2168
   18bf8:	61647075 	.word	0x61647075
   18bfc:	625f6574 	.word	0x625f6574
   18c00:	5f746f6f 	.word	0x5f746f6f
   18c04:	74617473 	.word	0x74617473
   18c08:	203a7375 	.word	0x203a7375
   18c0c:	5f776f72 	.word	0x5f776f72
   18c10:	655f6f74 	.word	0x655f6f74
   18c14:	65736172 	.word	0x65736172
   18c18:	6425203a 	.word	0x6425203a
   18c1c:	00000a0d 	.word	0x00000a0d
   18c20:	61647075 	.word	0x61647075
   18c24:	625f6574 	.word	0x625f6574
   18c28:	5f746f6f 	.word	0x5f746f6f
   18c2c:	74617473 	.word	0x74617473
   18c30:	203a7375 	.word	0x203a7375
   18c34:	65676170 	.word	0x65676170
   18c38:	5f6f745f 	.word	0x5f6f745f
   18c3c:	74697277 	.word	0x74697277
   18c40:	25203a65 	.word	0x25203a65
   18c44:	000a0d64 	.word	0x000a0d64
   18c48:	61647075 	.word	0x61647075
   18c4c:	625f6574 	.word	0x625f6574
   18c50:	5f746f6f 	.word	0x5f746f6f
   18c54:	74617473 	.word	0x74617473
   18c58:	203a7375 	.word	0x203a7375
   18c5c:	5f776f72 	.word	0x5f776f72
   18c60:	72646461 	.word	0x72646461
   18c64:	3a737365 	.word	0x3a737365
   18c68:	0d642520 	.word	0x0d642520
   18c6c:	0000000a 	.word	0x0000000a
   18c70:	61647075 	.word	0x61647075
   18c74:	625f6574 	.word	0x625f6574
   18c78:	5f746f6f 	.word	0x5f746f6f
   18c7c:	74617473 	.word	0x74617473
   18c80:	203a7375 	.word	0x203a7375
   18c84:	65676170 	.word	0x65676170
   18c88:	66666f5f 	.word	0x66666f5f
   18c8c:	3a746573 	.word	0x3a746573
   18c90:	0d642520 	.word	0x0d642520
   18c94:	0000000a 	.word	0x0000000a
   18c98:	3a776f72 	.word	0x3a776f72
   18c9c:	34302520 	.word	0x34302520
   18ca0:	000a0d78 	.word	0x000a0d78
   18ca4:	61647075 	.word	0x61647075
   18ca8:	625f6574 	.word	0x625f6574
   18cac:	5f746f6f 	.word	0x5f746f6f
   18cb0:	74617473 	.word	0x74617473
   18cb4:	77207375 	.word	0x77207375
   18cb8:	65746972 	.word	0x65746972
   18cbc:	6f6f625f 	.word	0x6f6f625f
   18cc0:	69732e74 	.word	0x69732e74
   18cc4:	74616e67 	.word	0x74616e67
   18cc8:	3a657275 	.word	0x3a657275
   18ccc:	32302520 	.word	0x32302520
   18cd0:	000a0d78 	.word	0x000a0d78
   18cd4:	72617473 	.word	0x72617473
   18cd8:	676e6974 	.word	0x676e6974
   18cdc:	65657320 	.word	0x65657320
   18ce0:	25203a64 	.word	0x25203a64
   18ce4:	0d783430 	.word	0x0d783430
   18ce8:	0000000a 	.word	0x0000000a
   18cec:	69726576 	.word	0x69726576
   18cf0:	665f7966 	.word	0x665f7966
   18cf4:	6873616c 	.word	0x6873616c
   18cf8:	7265203a 	.word	0x7265203a
   18cfc:	20726f72 	.word	0x20726f72
   18d00:	69797274 	.word	0x69797274
   18d04:	7420676e 	.word	0x7420676e
   18d08:	6572206f 	.word	0x6572206f
   18d0c:	65206461 	.word	0x65206461
   18d10:	72657478 	.word	0x72657478
   18d14:	206c616e 	.word	0x206c616e
   18d18:	73616c66 	.word	0x73616c66
   18d1c:	25202e68 	.word	0x25202e68
   18d20:	00000064 	.word	0x00000064
   18d24:	202e6425 	.word	0x202e6425
   18d28:	69726576 	.word	0x69726576
   18d2c:	665f7966 	.word	0x665f7966
   18d30:	6873616c 	.word	0x6873616c
   18d34:	7263203a 	.word	0x7263203a
   18d38:	61765f63 	.word	0x61765f63
   18d3c:	25203a6c 	.word	0x25203a6c
   18d40:	000a0d64 	.word	0x000a0d64
   18d44:	69726576 	.word	0x69726576
   18d48:	665f7966 	.word	0x665f7966
   18d4c:	6873616c 	.word	0x6873616c
   18d50:	6572203a 	.word	0x6572203a
   18d54:	6e69616d 	.word	0x6e69616d
   18d58:	20676e69 	.word	0x20676e69
   18d5c:	65747962 	.word	0x65747962
   18d60:	64252073 	.word	0x64252073
   18d64:	00000a0d 	.word	0x00000a0d
   18d68:	69726576 	.word	0x69726576
   18d6c:	665f7966 	.word	0x665f7966
   18d70:	6873616c 	.word	0x6873616c
   18d74:	6163203a 	.word	0x6163203a
   18d78:	6c75636c 	.word	0x6c75636c
   18d7c:	64657461 	.word	0x64657461
   18d80:	63726320 	.word	0x63726320
   18d84:	76203233 	.word	0x76203233
   18d88:	203a6c61 	.word	0x203a6c61
   18d8c:	0a0d6425 	.word	0x0a0d6425
   18d90:	00000000 	.word	0x00000000
   18d94:	5f315746 	.word	0x5f315746
   18d98:	53415245 	.word	0x53415245
   18d9c:	44415f45 	.word	0x44415f45
   18da0:	203a5244 	.word	0x203a5244
   18da4:	0a0d6425 	.word	0x0a0d6425
   18da8:	00000000 	.word	0x00000000
   18dac:	726f7473 	.word	0x726f7473
   18db0:	69665f65 	.word	0x69665f65
   18db4:	705f656c 	.word	0x705f656c
   18db8:	656b6361 	.word	0x656b6361
   18dbc:	4e203a74 	.word	0x4e203a74
   18dc0:	6c66206f 	.word	0x6c66206f
   18dc4:	20687361 	.word	0x20687361
   18dc8:	70696863 	.word	0x70696863
   18dcc:	00000d2e 	.word	0x00000d2e
   18dd0:	726f7473 	.word	0x726f7473
   18dd4:	69665f65 	.word	0x69665f65
   18dd8:	705f656c 	.word	0x705f656c
   18ddc:	656b6361 	.word	0x656b6361
   18de0:	65203a74 	.word	0x65203a74
   18de4:	726f7272 	.word	0x726f7272
   18de8:	656c6320 	.word	0x656c6320
   18dec:	6e697261 	.word	0x6e697261
   18df0:	65732067 	.word	0x65732067
   18df4:	726f7463 	.word	0x726f7463
   18df8:	6f727020 	.word	0x6f727020
   18dfc:	74636574 	.word	0x74636574
   18e00:	20746120 	.word	0x20746120
   18e04:	72646461 	.word	0x72646461
   18e08:	20737365 	.word	0x20737365
   18e0c:	0d206425 	.word	0x0d206425
   18e10:	0000000a 	.word	0x0000000a
   18e14:	726f7473 	.word	0x726f7473
   18e18:	69665f65 	.word	0x69665f65
   18e1c:	705f656c 	.word	0x705f656c
   18e20:	656b6361 	.word	0x656b6361
   18e24:	65203a74 	.word	0x65203a74
   18e28:	726f7272 	.word	0x726f7272
   18e2c:	61726520 	.word	0x61726520
   18e30:	676e6973 	.word	0x676e6973
   18e34:	63657320 	.word	0x63657320
   18e38:	20726f74 	.word	0x20726f74
   18e3c:	61207461 	.word	0x61207461
   18e40:	65726464 	.word	0x65726464
   18e44:	25207373 	.word	0x25207373
   18e48:	0a0d2064 	.word	0x0a0d2064
   18e4c:	00000000 	.word	0x00000000
   18e50:	2077656e 	.word	0x2077656e
   18e54:	6d726966 	.word	0x6d726966
   18e58:	65726177 	.word	0x65726177
   18e5c:	72657620 	.word	0x72657620
   18e60:	6e6f6973 	.word	0x6e6f6973
   18e64:	6425203a 	.word	0x6425203a
   18e68:	00000a0d 	.word	0x00000a0d
   18e6c:	2077656e 	.word	0x2077656e
   18e70:	6d726966 	.word	0x6d726966
   18e74:	65726177 	.word	0x65726177
   18e78:	65686320 	.word	0x65686320
   18e7c:	75736b63 	.word	0x75736b63
   18e80:	25203a6d 	.word	0x25203a6d
   18e84:	0d783430 	.word	0x0d783430
   18e88:	0000000a 	.word	0x0000000a
   18e8c:	726f7473 	.word	0x726f7473
   18e90:	69665f65 	.word	0x69665f65
   18e94:	705f656c 	.word	0x705f656c
   18e98:	656b6361 	.word	0x656b6361
   18e9c:	65203a74 	.word	0x65203a74
   18ea0:	7974706d 	.word	0x7974706d
   18ea4:	74616420 	.word	0x74616420
   18ea8:	000d2e61 	.word	0x000d2e61
   18eac:	726f7473 	.word	0x726f7473
   18eb0:	69665f65 	.word	0x69665f65
   18eb4:	705f656c 	.word	0x705f656c
   18eb8:	656b6361 	.word	0x656b6361
   18ebc:	555b2074 	.word	0x555b2074
   18ec0:	54414450 	.word	0x54414450
   18ec4:	48435f45 	.word	0x48435f45
   18ec8:	5d4b4345 	.word	0x5d4b4345
   18ecc:	6966203a 	.word	0x6966203a
   18ed0:	5b20656c 	.word	0x5b20656c
   18ed4:	62206425 	.word	0x62206425
   18ed8:	73657479 	.word	0x73657479
   18edc:	6f64205d 	.word	0x6f64205d
   18ee0:	6e207365 	.word	0x6e207365
   18ee4:	6d20746f 	.word	0x6d20746f
   18ee8:	68637461 	.word	0x68637461
   18eec:	61656820 	.word	0x61656820
   18ef0:	20726564 	.word	0x20726564
   18ef4:	2064255b 	.word	0x2064255b
   18ef8:	65747962 	.word	0x65747962
   18efc:	73205d73 	.word	0x73205d73
   18f00:	0d657a69 	.word	0x0d657a69
   18f04:	0000000a 	.word	0x0000000a
   18f08:	72617473 	.word	0x72617473
   18f0c:	676e6974 	.word	0x676e6974
   18f10:	6c617620 	.word	0x6c617620
   18f14:	0000203a 	.word	0x0000203a
   18f18:	726f7473 	.word	0x726f7473
   18f1c:	69665f65 	.word	0x69665f65
   18f20:	705f656c 	.word	0x705f656c
   18f24:	656b6361 	.word	0x656b6361
   18f28:	65203a74 	.word	0x65203a74
   18f2c:	726f7272 	.word	0x726f7272
   18f30:	69727720 	.word	0x69727720
   18f34:	676e6974 	.word	0x676e6974
   18f38:	776f7220 	.word	0x776f7220
   18f3c:	20746120 	.word	0x20746120
   18f40:	72646461 	.word	0x72646461
   18f44:	20737365 	.word	0x20737365
   18f48:	0d206425 	.word	0x0d206425
   18f4c:	0000000a 	.word	0x0000000a
   18f50:	726f7473 	.word	0x726f7473
   18f54:	69665f65 	.word	0x69665f65
   18f58:	705f656c 	.word	0x705f656c
   18f5c:	656b6361 	.word	0x656b6361
   18f60:	72203a74 	.word	0x72203a74
   18f64:	69656365 	.word	0x69656365
   18f68:	5b646576 	.word	0x5b646576
   18f6c:	5d756c25 	.word	0x5d756c25
   18f70:	6966202c 	.word	0x6966202c
   18f74:	7320656c 	.word	0x7320656c
   18f78:	5b657a69 	.word	0x5b657a69
   18f7c:	5d756c25 	.word	0x5d756c25
   18f80:	00000a0d 	.word	0x00000a0d
   18f84:	726f7473 	.word	0x726f7473
   18f88:	69665f65 	.word	0x69665f65
   18f8c:	705f656c 	.word	0x705f656c
   18f90:	656b6361 	.word	0x656b6361
   18f94:	66203a74 	.word	0x66203a74
   18f98:	20656c69 	.word	0x20656c69
   18f9c:	6e776f64 	.word	0x6e776f64
   18fa0:	64616f6c 	.word	0x64616f6c
   18fa4:	73206465 	.word	0x73206465
   18fa8:	65636375 	.word	0x65636375
   18fac:	75667373 	.word	0x75667373
   18fb0:	2e796c6c 	.word	0x2e796c6c
   18fb4:	0000000d 	.word	0x0000000d
   18fb8:	726f7473 	.word	0x726f7473
   18fbc:	69665f65 	.word	0x69665f65
   18fc0:	705f656c 	.word	0x705f656c
   18fc4:	656b6361 	.word	0x656b6361
   18fc8:	66203a74 	.word	0x66203a74
   18fcc:	6873616c 	.word	0x6873616c
   18fd0:	63757320 	.word	0x63757320
   18fd4:	73736563 	.word	0x73736563
   18fd8:	6c6c7566 	.word	0x6c6c7566
   18fdc:	72772079 	.word	0x72772079
   18fe0:	65747469 	.word	0x65747469
   18fe4:	6977206e 	.word	0x6977206e
   18fe8:	6e206874 	.word	0x6e206874
   18fec:	7265206f 	.word	0x7265206f
   18ff0:	73726f72 	.word	0x73726f72
   18ff4:	0000000d 	.word	0x0000000d
   18ff8:	726f7473 	.word	0x726f7473
   18ffc:	69665f65 	.word	0x69665f65
   19000:	705f656c 	.word	0x705f656c
   19004:	656b6361 	.word	0x656b6361
   19008:	66203a74 	.word	0x66203a74
   1900c:	6873616c 	.word	0x6873616c
   19010:	726f6320 	.word	0x726f6320
   19014:	74707572 	.word	0x74707572
   19018:	0d2e6465 	.word	0x0d2e6465
   1901c:	00000000 	.word	0x00000000
   19020:	726f7473 	.word	0x726f7473
   19024:	69665f65 	.word	0x69665f65
   19028:	705f656c 	.word	0x705f656c
   1902c:	656b6361 	.word	0x656b6361
   19030:	66203a74 	.word	0x66203a74
   19034:	20656c69 	.word	0x20656c69
   19038:	63656863 	.word	0x63656863
   1903c:	6d75736b 	.word	0x6d75736b
   19040:	6f642073 	.word	0x6f642073
   19044:	2074276e 	.word	0x2074276e
   19048:	6374616d 	.word	0x6374616d
   1904c:	0a0d2e68 	.word	0x0a0d2e68
   19050:	70784520 	.word	0x70784520
   19054:	65746365 	.word	0x65746365
   19058:	68632064 	.word	0x68632064
   1905c:	736b6365 	.word	0x736b6365
   19060:	25206d75 	.word	0x25206d75
   19064:	0d783430 	.word	0x0d783430
   19068:	6552200a 	.word	0x6552200a
   1906c:	76696563 	.word	0x76696563
   19070:	63206465 	.word	0x63206465
   19074:	6b636568 	.word	0x6b636568
   19078:	206d7573 	.word	0x206d7573
   1907c:	78343025 	.word	0x78343025
   19080:	00000a0d 	.word	0x00000a0d
   19084:	70747468 	.word	0x70747468
   19088:	696c635f 	.word	0x696c635f
   1908c:	5f746e65 	.word	0x5f746e65
   19090:	6c6c6163 	.word	0x6c6c6163
   19094:	6b636162 	.word	0x6b636162
   19098:	5448203a 	.word	0x5448203a
   1909c:	63205054 	.word	0x63205054
   190a0:	6e65696c 	.word	0x6e65696c
   190a4:	6f732074 	.word	0x6f732074
   190a8:	74656b63 	.word	0x74656b63
   190ac:	6e6f6320 	.word	0x6e6f6320
   190b0:	7463656e 	.word	0x7463656e
   190b4:	0d2e6465 	.word	0x0d2e6465
   190b8:	00000000 	.word	0x00000000
   190bc:	70747468 	.word	0x70747468
   190c0:	696c635f 	.word	0x696c635f
   190c4:	5f746e65 	.word	0x5f746e65
   190c8:	6c6c6163 	.word	0x6c6c6163
   190cc:	6b636162 	.word	0x6b636162
   190d0:	6572203a 	.word	0x6572203a
   190d4:	73657571 	.word	0x73657571
   190d8:	6f632074 	.word	0x6f632074
   190dc:	656c706d 	.word	0x656c706d
   190e0:	2e646574 	.word	0x2e646574
   190e4:	0000000d 	.word	0x0000000d
   190e8:	70747468 	.word	0x70747468
   190ec:	696c635f 	.word	0x696c635f
   190f0:	5f746e65 	.word	0x5f746e65
   190f4:	6c6c6163 	.word	0x6c6c6163
   190f8:	6b636162 	.word	0x6b636162
   190fc:	6572203a 	.word	0x6572203a
   19100:	76696563 	.word	0x76696563
   19104:	72206465 	.word	0x72206465
   19108:	6f707365 	.word	0x6f707365
   1910c:	2065736e 	.word	0x2065736e
   19110:	64207525 	.word	0x64207525
   19114:	20617461 	.word	0x20617461
   19118:	657a6973 	.word	0x657a6973
   1911c:	0d752520 	.word	0x0d752520
   19120:	0000000a 	.word	0x0000000a
   19124:	70747468 	.word	0x70747468
   19128:	696c635f 	.word	0x696c635f
   1912c:	5f746e65 	.word	0x5f746e65
   19130:	6c6c6163 	.word	0x6c6c6163
   19134:	6b636162 	.word	0x6b636162
   19138:	6964203a 	.word	0x6964203a
   1913c:	6e6f6373 	.word	0x6e6f6373
   19140:	7463656e 	.word	0x7463656e
   19144:	206e6f69 	.word	0x206e6f69
   19148:	73616572 	.word	0x73616572
   1914c:	253a6e6f 	.word	0x253a6e6f
   19150:	000a0d64 	.word	0x000a0d64
   19154:	666e6f63 	.word	0x666e6f63
   19158:	72756769 	.word	0x72756769
   1915c:	74685f65 	.word	0x74685f65
   19160:	635f7074 	.word	0x635f7074
   19164:	6e65696c 	.word	0x6e65696c
   19168:	48203a74 	.word	0x48203a74
   1916c:	20505454 	.word	0x20505454
   19170:	65696c63 	.word	0x65696c63
   19174:	6920746e 	.word	0x6920746e
   19178:	6974696e 	.word	0x6974696e
   1917c:	7a696c61 	.word	0x7a696c61
   19180:	6f697461 	.word	0x6f697461
   19184:	6166206e 	.word	0x6166206e
   19188:	64656c69 	.word	0x64656c69
   1918c:	72282021 	.word	0x72282021
   19190:	25207365 	.word	0x25207365
   19194:	0a0d2964 	.word	0x0a0d2964
   19198:	00000000 	.word	0x00000000
   1919c:	6f736572 	.word	0x6f736572
   191a0:	5f65766c 	.word	0x5f65766c
   191a4:	203a6263 	.word	0x203a6263
   191a8:	49207325 	.word	0x49207325
   191ac:	64612050 	.word	0x64612050
   191b0:	73657264 	.word	0x73657264
   191b4:	73692073 	.word	0x73692073
   191b8:	2e642520 	.word	0x2e642520
   191bc:	252e6425 	.word	0x252e6425
   191c0:	64252e64 	.word	0x64252e64
   191c4:	0a0d0a0d 	.word	0x0a0d0a0d
   191c8:	00000000 	.word	0x00000000
   191cc:	69666977 	.word	0x69666977
   191d0:	6c61635f 	.word	0x6c61635f
   191d4:	6361626c 	.word	0x6361626c
   191d8:	4d5b206b 	.word	0x4d5b206b
   191dc:	575f4d32 	.word	0x575f4d32
   191e0:	5f494649 	.word	0x5f494649
   191e4:	50534552 	.word	0x50534552
   191e8:	4e4f435f 	.word	0x4e4f435f
   191ec:	4154535f 	.word	0x4154535f
   191f0:	435f4554 	.word	0x435f4554
   191f4:	474e4148 	.word	0x474e4148
   191f8:	3a5d4445 	.word	0x3a5d4445
   191fc:	6e6f6320 	.word	0x6e6f6320
   19200:	7463656e 	.word	0x7463656e
   19204:	0d2e6465 	.word	0x0d2e6465
   19208:	00000000 	.word	0x00000000
   1920c:	69666977 	.word	0x69666977
   19210:	6c61635f 	.word	0x6c61635f
   19214:	6361626c 	.word	0x6361626c
   19218:	4d5b206b 	.word	0x4d5b206b
   1921c:	575f4d32 	.word	0x575f4d32
   19220:	5f494649 	.word	0x5f494649
   19224:	50534552 	.word	0x50534552
   19228:	4e4f435f 	.word	0x4e4f435f
   1922c:	4154535f 	.word	0x4154535f
   19230:	435f4554 	.word	0x435f4554
   19234:	474e4148 	.word	0x474e4148
   19238:	205d4445 	.word	0x205d4445
   1923c:	63736964 	.word	0x63736964
   19240:	656e6e6f 	.word	0x656e6e6f
   19244:	64657463 	.word	0x64657463
   19248:	00000d2e 	.word	0x00000d2e
   1924c:	69666977 	.word	0x69666977
   19250:	6c61635f 	.word	0x6c61635f
   19254:	6361626c 	.word	0x6361626c
   19258:	4d5b206b 	.word	0x4d5b206b
   1925c:	575f4d32 	.word	0x575f4d32
   19260:	5f494649 	.word	0x5f494649
   19264:	5f514552 	.word	0x5f514552
   19268:	50434844 	.word	0x50434844
   1926c:	4e4f435f 	.word	0x4e4f435f
   19270:	203a5d46 	.word	0x203a5d46
   19274:	61205049 	.word	0x61205049
   19278:	65726464 	.word	0x65726464
   1927c:	69207373 	.word	0x69207373
   19280:	75252073 	.word	0x75252073
   19284:	2e75252e 	.word	0x2e75252e
   19288:	252e7525 	.word	0x252e7525
   1928c:	000a0d75 	.word	0x000a0d75
   19290:	69666977 	.word	0x69666977
   19294:	6c61635f 	.word	0x6c61635f
   19298:	6361626c 	.word	0x6361626c
   1929c:	645b206b 	.word	0x645b206b
   192a0:	75616665 	.word	0x75616665
   192a4:	3a5d746c 	.word	0x3a5d746c
   192a8:	52524520 	.word	0x52524520
   192ac:	6520524f 	.word	0x6520524f
   192b0:	25207476 	.word	0x25207476
   192b4:	000a0d64 	.word	0x000a0d64
   192b8:	50726941 	.word	0x50726941
   192bc:	4e6e6e65 	.word	0x4e6e6e65
   192c0:	442d7465 	.word	0x442d7465
   192c4:	63697665 	.word	0x63697665
   192c8:	00000065 	.word	0x00000065
   192cc:	6e6e6570 	.word	0x6e6e6570
   192d0:	30343731 	.word	0x30343731
   192d4:	69666977 	.word	0x69666977
   192d8:	00000000 	.word	0x00000000
   192dc:	70747468 	.word	0x70747468
   192e0:	772f2f3a 	.word	0x772f2f3a
   192e4:	732e7777 	.word	0x732e7777
   192e8:	2e736165 	.word	0x2e736165
   192ec:	6e657075 	.word	0x6e657075
   192f0:	64652e6e 	.word	0x64652e6e
   192f4:	777e2f75 	.word	0x777e2f75
   192f8:	68637261 	.word	0x68637261
   192fc:	652f7265 	.word	0x652f7265
   19300:	31356573 	.word	0x31356573
   19304:	656d2f36 	.word	0x656d2f36
   19308:	61646174 	.word	0x61646174
   1930c:	622e6174 	.word	0x622e6174
   19310:	00006e69 	.word	0x00006e69
   19314:	70747468 	.word	0x70747468
   19318:	772f2f3a 	.word	0x772f2f3a
   1931c:	732e7777 	.word	0x732e7777
   19320:	2e736165 	.word	0x2e736165
   19324:	6e657075 	.word	0x6e657075
   19328:	64652e6e 	.word	0x64652e6e
   1932c:	777e2f75 	.word	0x777e2f75
   19330:	68637261 	.word	0x68637261
   19334:	652f7265 	.word	0x652f7265
   19338:	31356573 	.word	0x31356573
   1933c:	65742f36 	.word	0x65742f36
   19340:	662d7473 	.word	0x662d7473
   19344:	776d7269 	.word	0x776d7269
   19348:	2e657261 	.word	0x2e657261
   1934c:	006e6962 	.word	0x006e6962
   19350:	6c696166 	.word	0x6c696166
   19354:	74206465 	.word	0x74206465
   19358:	6e69206f 	.word	0x6e69206f
   1935c:	61697469 	.word	0x61697469
   19360:	657a696c 	.word	0x657a696c
   19364:	66697720 	.word	0x66697720
   19368:	61702069 	.word	0x61702069
   1936c:	656d6172 	.word	0x656d6172
   19370:	73726574 	.word	0x73726574
   19374:	0000000d 	.word	0x0000000d
   19378:	202d2d2d 	.word	0x202d2d2d
   1937c:	636c6557 	.word	0x636c6557
   19380:	20656d6f 	.word	0x20656d6f
   19384:	41206f74 	.word	0x41206f74
   19388:	4e495754 	.word	0x4e495754
   1938c:	35312043 	.word	0x35312043
   19390:	43203030 	.word	0x43203030
   19394:	656e6e6f 	.word	0x656e6e6f
   19398:	6f697463 	.word	0x6f697463
   1939c:	6554206e 	.word	0x6554206e
   193a0:	2d207473 	.word	0x2d207473
   193a4:	000d2d2d 	.word	0x000d2d2d
   193a8:	6e69616d 	.word	0x6e69616d
   193ac:	6f63203a 	.word	0x6f63203a
   193b0:	63656e6e 	.word	0x63656e6e
   193b4:	676e6974 	.word	0x676e6974
   193b8:	206f7420 	.word	0x206f7420
   193bc:	69466957 	.word	0x69466957
   193c0:	20504120 	.word	0x20504120
   193c4:	2e2e7325 	.word	0x2e2e7325
   193c8:	000a0d2e 	.word	0x000a0d2e
   193cc:	63637573 	.word	0x63637573
   193d0:	66737365 	.word	0x66737365
   193d4:	796c6c75 	.word	0x796c6c75
   193d8:	6e6f6320 	.word	0x6e6f6320
   193dc:	7463656e 	.word	0x7463656e
   193e0:	000d6465 	.word	0x000d6465
   193e4:	00002132 	.word	0x00002132
   193e8:	0000213c 	.word	0x0000213c
   193ec:	0000214c 	.word	0x0000214c
   193f0:	0000219a 	.word	0x0000219a
   193f4:	000021ac 	.word	0x000021ac
   193f8:	0000298a 	.word	0x0000298a
   193fc:	0000298e 	.word	0x0000298e
   19400:	00002992 	.word	0x00002992
   19404:	00002996 	.word	0x00002996
   19408:	0000299a 	.word	0x0000299a
   1940c:	0000299e 	.word	0x0000299e
   19410:	000029a2 	.word	0x000029a2
   19414:	000029a6 	.word	0x000029a6
   19418:	000029aa 	.word	0x000029aa
   1941c:	000029ae 	.word	0x000029ae
   19420:	00002a06 	.word	0x00002a06
   19424:	00002a0c 	.word	0x00002a0c
   19428:	00002a12 	.word	0x00002a12
   1942c:	00002a18 	.word	0x00002a18
   19430:	00002a18 	.word	0x00002a18
   19434:	00002a1e 	.word	0x00002a1e
   19438:	00002a1e 	.word	0x00002a1e
   1943c:	00002a1e 	.word	0x00002a1e
   19440:	00002a24 	.word	0x00002a24
   19444:	00002a2a 	.word	0x00002a2a
   19448:	50504128 	.word	0x50504128
   1944c:	52452829 	.word	0x52452829
   19450:	255b2952 	.word	0x255b2952
   19454:	255b5d73 	.word	0x255b5d73
   19458:	00005d64 	.word	0x00005d64
   1945c:	61766e69 	.word	0x61766e69
   19460:	6564696c 	.word	0x6564696c
   19464:	636f6920 	.word	0x636f6920
   19468:	6320746c 	.word	0x6320746c
   1946c:	0000646d 	.word	0x0000646d

00019470 <__FUNCTION__.15054>:
   19470:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   19480:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   19490:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
   194a0:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   194b0:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   194c0:	74207075 63206568 00706968 66696828     up the chip.(hif
   194d0:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
   194e0:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
   194f0:	66696828 64612029 73657264 75622073     (hif) address bu
   19500:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
   19510:	70757272 20646574 6b636170 53207465     rrupted packet S
   19520:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   19530:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   19540:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   19550:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   19560:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
   19570:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   19580:	73696765 65726574 00000064 2061744f     egistered...Ota 
   19590:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
   195a0:	69676572 72657473 00006465 70797243     registered..Cryp
   195b0:	63206f74 626c6c61 206b6361 6e207369     to callback is n
   195c0:	7220746f 73696765 65726574 00000064     ot registered...
   195d0:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
   195e0:	6f6e2073 65722074 74736967 64657265     s not registered
   195f0:	00000000 66696828 6e692029 696c6176     ....(hif) invali
   19600:	72672064 2070756f 00004449 66696828     d group ID..(hif
   19610:	6f682029 61207473 64207070 276e6469     ) host app didn'
   19620:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
   19630:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
   19640:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   19650:	61462029 2065736c 65746e69 70757272     ) False interrup
   19660:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   19670:	74206c69 6552206f 69206461 7265746e     il to Read inter
   19680:	74707572 67657220 00000000 46494828     rupt reg....(HIF
   19690:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   196a0:	746e6920 75727265 25207470 72742064      interrupt %d tr
   196b0:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   196c0:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   196d0:	72612064 656d7567 0000746e 20505041     d argument..APP 
   196e0:	75716552 65747365 69532064 6920657a     Requested Size i
   196f0:	616c2073 72656772 61687420 6874206e     s larger than th
   19700:	65722065 65766963 75622064 72656666     e recived buffer
   19710:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
   19720:	00000000 20505041 75716552 65747365     ....APP Requeste
   19730:	64412064 73657264 65622073 646e6f79     d Address beyond
   19740:	65687420 63657220 64657669 66756220      the recived buf
   19750:	20726566 72646461 20737365 20646e61     fer address and 
   19760:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
   19770:	0000000a 00004ca8 00004c78 00004c70     .....L..xL..pL..
   19780:	00004c88 00004c80 00004ca0 00004c90     .L...L...L...L..
   19790:	00004c98                                .L..

00019794 <__FUNCTION__.13073>:
   19794:	5f666968 646e6573 00000000              hif_send....

000197a0 <__FUNCTION__.13083>:
   197a0:	5f666968 00727369                       hif_isr.

000197a8 <__FUNCTION__.13089>:
   197a8:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

000197b8 <__FUNCTION__.13101>:
   197b8:	5f666968 65636572 00657669              hif_receive.

000197c4 <__FUNCTION__.13117>:
   197c4:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   197d4:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   197e4:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   197f4:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   19804:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   19814:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   19824:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   19834:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   19844:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   19854:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   19864:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   19874:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   19884:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
   19894:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
   198a4:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
   198b4:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
   198c4:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   198d4:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   198e4:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   198f4:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   19904:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   19914:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   19924:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   19934:	73747365 72657020 61637320 6c73206e     ests per scan sl
   19944:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   19954:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   19964:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   19974:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   19984:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   19994:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   199a4:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   199b4:	6e694d20 69726420 20726576 20726576      Min driver ver 
   199c4:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   199d4:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   199e4:	0000000a 303a3131 39313a37 00000000     ....11:07:19....
   199f4:	20727041 32203432 00383130 76697244     Apr 24 2018.Driv
   19a04:	62207265 746c6975 20746120 25097325     er built at %s.%
   19a14:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   19a24:	7277616d 65562065 6f697372 0000006e     mawre Version...
   19a34:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   19a44:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
   19a54:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
   19a64:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
   19a74:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   19a84:	65646e69 64252078 0000000a 61766e49     index %d....Inva
   19a94:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
   19aa4:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
   19ab4:	53502074 656b204b 656c2079 6874676e     t PSK key length
   19ac4:	00000000 65646e75 656e6966 65732064     ....undefined se
   19ad4:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
   19ae4:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
   19af4:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
   19b04:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
   19b14:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
   19b24:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
   19b34:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   19b44:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   19b54:	66754220 20726566 65637865 64656465      Buffer exceeded
   19b64:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   19b74:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   19b84:	00000000                                ....

00019b88 <__FUNCTION__.13052>:
   19b88:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00019b94 <__FUNCTION__.13081>:
   19b94:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00019ba4 <__FUNCTION__.13109>:
   19ba4:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   19bb4:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   19bc4:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   19bd4:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   19be4:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   19bf4:	20656874 70696863 00000000 50504128     the chip....(APP
   19c04:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
   19c14:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
   19c24:	6c696166 74206465 6564206f 696e692d     failed to de-ini
   19c34:	6c616974 00657a69                       tialize.

00019c3c <__FUNCTION__.12915>:
   19c3c:	70696863 6b61775f 00000065              chip_wake...

00019c48 <__FUNCTION__.12964>:
   19c48:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   19c58:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   19c68:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   19c78:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   19c88:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   19c98:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   19ca8:	6e65206f 656c6261 746e6920 75727265     o enable interru
   19cb8:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   19cc8:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   19cd8:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   19ce8:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   19cf8:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   19d08:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   19d18:	75622074 00000073                       t bus...

00019d20 <__FUNCTION__.12962>:
   19d20:	645f6d6e 695f7672 0074696e              nm_drv_init.

00019d2c <__FUNCTION__.12969>:
   19d2c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00019d3c <crc7_syndrome_table>:
   19d3c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   19d4c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   19d5c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   19d6c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   19d7c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   19d8c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   19d9c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   19dac:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   19dbc:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   19dcc:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   19ddc:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   19dec:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   19dfc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   19e0c:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   19e1c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   19e2c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   19e3c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   19e4c:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   19e5c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   19e6c:	73756220 72726520 2e2e726f 0000002e      bus error......
   19e7c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   19e8c:	75622064 72652073 2e726f72 00002e2e     d bus error.....
   19e9c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   19eac:	61642064 72206174 6f707365 2065736e     d data response 
   19ebc:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
   19ecc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   19edc:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   19eec:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   19efc:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   19f0c:	656c6961 61642064 72206174 6f707365     ailed data respo
   19f1c:	2065736e 64616572 7562202c 72652073     nse read, bus er
   19f2c:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   19f3c:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   19f4c:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   19f5c:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   19f6c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   19f7c:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   19f8c:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   19f9c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   19fac:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   19fbc:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   19fcc:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   19fdc:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   19fec:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   19ffc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a00c:	656c6961 61642064 62206174 6b636f6c     ailed data block
   1a01c:	69727720 202c6574 20737562 6f727265      write, bus erro
   1a02c:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   1a03c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1a04c:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   1a05c:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   1a06c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a07c:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   1a08c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1a09c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1a0ac:	65722064 6e6f7073 202c6573 74697277     d response, writ
   1a0bc:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   1a0cc:	00000000 65736552 6e612074 65722064     ....Reset and re
   1a0dc:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   1a0ec:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a0fc:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   1a10c:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   1a11c:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   1a12c:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   1a13c:	69727720 62206574 6b636f6c 30252820      write block (%0
   1a14c:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   1a15c:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   1a16c:	61746164 69727720 2e2e6574 0000002e     data write......
   1a17c:	65736552 6e612074 65722064 20797274     Reset and retry 
   1a18c:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   1a19c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1a1ac:	72202c64 20646165 20676572 38302528     d, read reg (%08
   1a1bc:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   1a1cc:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   1a1dc:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   1a1ec:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1a1fc:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1a20c:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   1a21c:	6e612074 65722064 20797274 25206425     t and retry %d %
   1a22c:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   1a23c:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   1a24c:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   1a25c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a26c:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   1a27c:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   1a28c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   1a29c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1a2ac:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   1a2bc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a2cc:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   1a2dc:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   1a2ec:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   1a2fc:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   1a30c:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a31c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   1a32c:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   1a33c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a34c:	6e692064 6e726574 77206c61 65746972     d internal write
   1a35c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   1a36c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a37c:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   1a38c:	64692070 002e2e2e 0000688c 0000688c     p id.....h...h..
   1a39c:	0000691c 000067e0 00006826 00006848     .i...g..&h..Hh..
   1a3ac:	000068ce 000068ce 00006988 000067b4     .h...h...i...g..
   1a3bc:	000069e2 000069e2 000069e2 000069e2     .i...i...i...i..
   1a3cc:	0000686a                                jh..

0001a3d0 <__FUNCTION__.12268>:
   1a3d0:	5f697073 00646d63                       spi_cmd.

0001a3d8 <__FUNCTION__.12275>:
   1a3d8:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0001a3e8 <__FUNCTION__.12284>:
   1a3e8:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0001a3f4 <__FUNCTION__.12300>:
   1a3f4:	5f697073 61746164 6165725f 00000064     spi_data_read...

0001a404 <__FUNCTION__.12315>:
   1a404:	5f697073 61746164 6972775f 00006574     spi_data_write..

0001a414 <__FUNCTION__.12327>:
   1a414:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0001a424 <__FUNCTION__.12338>:
   1a424:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0001a434 <__FUNCTION__.12350>:
   1a434:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0001a444 <__FUNCTION__.12363>:
   1a444:	735f6d6e 725f6970 00646165              nm_spi_read.

0001a450 <__FUNCTION__.12384>:
   1a450:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   1a460:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   1a470:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
   1a480:	25207465 65732064 6f697373 4449206e     et %d session ID
   1a490:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
   1a4a0:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   1a4b0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1a4c0:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
   1a4d0:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   1a4e0:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   1a4f0:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   1a500:	204c5353 6b636f53 00007465 00009778     SSL Socket..x...
   1a510:	00009778 0000976c 00009778 0000976c     x...l...x...l...
   1a520:	00009746 00009746 00009778 00009778     F...F...x...x...
   1a530:	00009778 00009778 00009778 00009778     x...x...x...x...
   1a540:	00009778 00009778 00009778 00009778     x...x...x...x...
   1a550:	00009778 00009778 00009778 00009778     x...x...x...x...
   1a560:	00009778 00009778 00009778 00009778     x...x...x...x...
   1a570:	00009778 00009778 00009778 00009778     x...x...x...x...
   1a580:	00009778 00009778 00009778 00009778     x...x...x...x...
   1a590:	00009778 00009778 00009778 00009778     x...x...x...x...
   1a5a0:	00009778 00009778 00009778 00009778     x...x...x...x...
   1a5b0:	00009778 00009778 00009778 00009778     x...x...x...x...
   1a5c0:	00009778 00009778 00009778 00009778     x...x...x...x...
   1a5d0:	00009778 00009778 00009778 00009778     x...x...x...x...
   1a5e0:	00009778 00009778 00009778 00009778     x...x...x...x...
   1a5f0:	00009778 00009778 00009778 00009778     x...x...x...x...
   1a600:	00009778 00009778 00009778 0000976c     x...x...x...l...
   1a610:	0000976c 00009782 00009782 00009782     l...............
   1a620:	00009782                                ....

0001a624 <tcc_modules>:
   1a624:	42002000 42002400 42002800              . .B.$.B.(.B

0001a630 <_tcc_gclk_ids>:
   1a630:	001b1a1a                                ....

0001a634 <_tcc_apbcmasks>:
   1a634:	00000100 00000200 00000400              ............

0001a640 <_tcc_maxs>:
   1a640:	00ffffff 00ffffff 0000ffff              ............

0001a64c <_tcc_cc_nums>:
   1a64c:	00020204                                ....

0001a650 <_tcc_ow_nums>:
   1a650:	00020408                                ....

0001a654 <_tcc_intflag>:
   1a654:	00000001 00000002 00000004 00000008     ................
   1a664:	00001000 00002000 00004000 00008000     ..... ...@......
   1a674:	00010000 00020000 00040000 00080000     ................
   1a684:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   1a694:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   1a6a4:	20544547 00000000 54534f50 00000020     GET ....POST ...
   1a6b4:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   1a6c4:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   1a6d4:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   1a6e4:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   1a6f4:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   1a704:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   1a714:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   1a724:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   1a734:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   1a744:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   1a754:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   1a764:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   1a774:	676e654c 203a6874 00000000 33323130     Length: ....0123
   1a784:	37363534 62613938 66656463 6e617254     456789abcdefTran
   1a794:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   1a7a4:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   1a7b4:	50545448 0000002f 00000d31 0000b7a6     HTTP/...1.......
   1a7c4:	0000b7a0 0000b79a 0000b794 0000b7ac     ................
   1a7d4:	0000b78e 0000b7ac 0000b788 0000b782     ................
   1a7e4:	0000b7ac 0000b77c 0000b77c 0000b776     ....|...|...v...
   1a7f4:	0000b770 0000b76a 42002000 42002400     p...j.... .B.$.B
   1a804:	42002800                                .(.B

0001a808 <main_mqtt_broker>:
   1a808:	74656564 6165732e 70752e73 2e6e6e65     deet.seas.upenn.
   1a818:	00756465 462d6957 6f632069 63656e6e     edu.Wi-Fi connec
   1a828:	0d646574 00000000 462d6957 69642069     ted.....Wi-Fi di
   1a838:	6e6f6373 7463656e 000d6465 32346e73     sconnected..sn42
   1a848:	61746562 006f6872 50424e53 00000000     betarho.SNBP....
   1a858:	462d6957 50492069 20736920 252e7525     Wi-Fi IP is %u.%
   1a868:	75252e75 0d75252e 0000000a 6d726966     u.%u.%u.....firm
   1a878:	65726177 0000002f 6e6e6f43 20746365     ware/...Connect 
   1a888:	6c696166 206f7420 76726573 25287265     fail to server(%
   1a898:	20212973 72746572 74692079 74756120     s)! retry it aut
   1a8a8:	74616d6f 6c616369 0d2e796c 0000000a     omatically......
   1a8b8:	2f30672f 706d7570 7269662f 7261776d     /g0/pump/firmwar
   1a8c8:	00232f65 2f30672f 616c6572 662f3179     e/#./g0/relay1/f
   1a8d8:	776d7269 2f657261 00000023 2f30672f     irmware/#.../g0/
   1a8e8:	616c6572 662f3279 776d7269 2f657261     relay2/firmware/
   1a8f8:	00000023 2f30672f 2f64656c 6d726966     #.../g0/led/firm
   1a908:	65726177 0000232f 2f30672f 72677075     ware/#../g0/upgr
   1a918:	2f656461 6d726966 65726177 0000232f     ade/firmware/#..
   1a928:	2f30672f 73726576 2f6e6f69 6d726966     /g0/version/firm
   1a938:	65726177 0000232f 70657250 74617261     ware/#..Preparat
   1a948:	206e6f69 4d20666f 20545451 20736168     ion of MQTT has 
   1a958:	6e656562 6d6f6320 74656c70 0d2e6465     been completed..
   1a968:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
   1a978:	6c636564 64656e69 756f7920 63612072     declined your ac
   1a988:	73736563 72652021 20726f72 65646f63     cess! error code
   1a998:	0d642520 0000000a 2f30672f 706d7570      %d...../g0/pump
   1a9a8:	7269662f 7261776d 00002f65 3e207325     /firmware/..%s >
   1a9b8:	0000203e 2f30672f 616c6572 662f3179     > ../g0/relay1/f
   1a9c8:	776d7269 2f657261 00000000 00006e6f     irmware/....on..
   1a9d8:	0066666f 2f30672f 2f64656c 6d726966     off./g0/led/firm
   1a9e8:	65726177 0000002f 2f30672f 616c6572     ware/.../g0/rela
   1a9f8:	662f3279 776d7269 2f657261 00000000     y2/firmware/....
   1aa08:	2f30672f 72677075 2f656461 6d726966     /g0/upgrade/firm
   1aa18:	65726177 0000002f 6e6b6e55 206e776f     ware/...Unknown 
   1aa28:	69706f74 25203a63 00000073 0000000d     topic: %s.......
   1aa38:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
   1aa48:	00000d64 656d6954 6e652072 656c6261     d...Timer enable
   1aa58:	000d2e64 5454514d 696e6920 6c616974     d...MQTT initial
   1aa68:	74617a69 206e6f69 6c696166 202e6465     ization failed. 
   1aa78:	6f727245 6f632072 69206564 25282073     Error code is (%
   1aa88:	0a0d2964 00000000 5454514d 67657220     d)......MQTT reg
   1aa98:	65747369 61632072 61626c6c 66206b63     ister callback f
   1aaa8:	656c6961 45202e64 726f7272 646f6320     ailed. Error cod
   1aab8:	73692065 64252820 000a0d29 5454514d     e is (%d)...MQTT
   1aac8:	6e6f4320 75676966 2e646572 0000000d      Configured.....
   1aad8:	74696e49 696c6169 676e697a 0d2e2e2e     Initializing....
   1aae8:	00000000 6e69616d 326d203a 69775f6d     ....main: m2m_wi
   1aaf8:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
   1ab08:	2821726f 0d296425 0000000a 6e69616d     or!(%d).....main
   1ab18:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   1ab28:	6c6c6163 63757320 73736563 64252821     call success!(%d
   1ab38:	000a0d29 6b636f53 20737465 74696e69     )...Sockets init
   1ab48:	696c6169 2e64657a 0000000d 2f30672f     ialized...../g0/
   1ab58:	73726576 2f6e6f69 6d726966 65726177     version/firmware
   1ab68:	0000002f 6c627550 69687369 7620676e     /...Publishing v
   1ab78:	69737265 74206e6f 7325206f 00000a0d     ersion to %s....
   1ab88:	2e302e30 00000030 706d6554 74617265     0.0.0...Temperat
   1ab98:	3a657275 302e2520 0a0d6632 00000000     ure: %.02f......
   1aba8:	696d7548 79746964 2e25203a 0d663230     Humidity: %.02f.
   1abb8:	0000000a 32302e25 00000066 2f30672f     ....%.02f.../g0/
   1abc8:	706d6574 7269662f 7261776d 00002f65     temp/firmware/..
   1abd8:	2f30672f 2f6d7568 6d726966 65726177     /g0/hum/firmware
   1abe8:	0000002f 3a78754c 0d642520 0000000a     /...Lux: %d.....
   1abf8:	00006425 2f30672f 2f78756c 6d726966     %d../g0/lux/firm
   1ac08:	65726177 0000002f 73696f4d 65727574     ware/...Moisture
   1ac18:	2e25203a 0d663230 0000000a 2f30672f     : %.02f...../g0/
   1ac28:	73696f6d 69662f74 61776d72 002f6572     moist/firmware/.
   1ac38:	00000002 00000003 00000028 00000029     ........(...)...
   1ac48:	00000004 00000005 00000006 00000007     ................
   1ac58:	0000ffff 0000ffff 00000022 00000023     ........"...#...
   1ac68:	0000ffff 0000ffff 0000ffff 0000ffff     ................
   1ac78:	00000008 00000009 0000000a 0000000b     ................
   1ac88:	0000e046 0000e04c 0000e04c 0000e04c     F...L...L...L...
   1ac98:	0000e04c 0000e04c 0000e04c 0000e04c     L...L...L...L...
   1aca8:	0000e04c 0000e04c 0000e04c 0000e04c     L...L...L...L...
   1acb8:	0000e04c 0000e04c 0000e04c 0000e04c     L...L...L...L...
   1acc8:	0000e024 0000e04c 0000e04c 0000e04c     $...L...L...L...
   1acd8:	0000e04c 0000e04c 0000e04c 0000e04c     L...L...L...L...
   1ace8:	0000e04c 0000e04c 0000e04c 0000e04c     L...L...L...L...
   1acf8:	0000e04c 0000e04c 0000e04c 0000e04c     L...L...L...L...
   1ad08:	0000e040 0000e04c 0000e04c 0000e04c     @...L...L...L...
   1ad18:	0000e04c 0000e04c 0000e04c 0000e04c     L...L...L...L...
   1ad28:	0000e04c 0000e04c 0000e04c 0000e04c     L...L...L...L...
   1ad38:	0000e04c 0000e04c 0000e04c 0000e04c     L...L...L...L...
   1ad48:	0000e03a 0000dfe2 0000dff8 0000e00e     :...............
   1ad58:	0000dfc8 42000800 42000c00 42001000     .......B...B...B
   1ad68:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
   1ad78:	00000e0d 00010cca 00010d42 00010d42     ........B...B...
   1ad88:	00010ce8 00010ce2 00010cee 00010cd0     ................
   1ad98:	00010cf4 00010d28 0001100c 0001105c     ....(.......\...
   1ada8:	0001105c 00011058 00010ffe 0001101e     \...X...........
   1adb8:	00010fee 00011030 00011042 000110aa     ....0...B.......
   1adc8:	000110d8 000110d8 000110d4 000110a4     ................
   1add8:	000110b0 0001109e 000110b6 000110bc     ................
   1ade8:	2e2e0a0d 2d69572e 66206946 656c6961     .....Wi-Fi faile
   1adf8:	6f742064 6e6f6320 75676966 2e2e6572     d to configure..
   1ae08:	00000d2e 72616f42 6e692064 61697469     ....Board initia
   1ae18:	657a696c 000d2e64 32346e73 61746562     lized...sn42beta
   1ae28:	006f6872 50424e53 00000000 20766564     rho.SNBP....dev 
   1ae38:	203a6469 30257830 0a0d7832 00000000     id: 0x%02x......
   1ae48:	6d726966 65726177 0000002f 6e6e7552     firmware/...Runn
   1ae58:	20676e69 4d207361 20545451 72657355     ing as MQTT User
   1ae68:	7325203a 00000a0d 6d726966 65726177     : %s....firmware
   1ae78:	63757320 73736563 6c6c7566 6f642079      successfully do
   1ae88:	6f6c6e77 64656461 00000d21 646e6553     wnloaded!...Send
   1ae98:	20676e69 736e6573 7620726f 65756c61     ing sensor value
   1aea8:	6f742073 6f6c4320 0d2e6475 49514d00     s to Cloud...MQI
   1aeb8:	00706473                                sdp.

0001aebc <_global_impure_ptr>:
   1aebc:	2000001c 4f500043 00584953 4e49002e     ... C.POSIX...IN
   1aecc:	6e690046 414e0066 616e004e 0030006e     F.inf.NAN.nan.0.
   1aedc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   1aeec:	32313000 36353433 61393837 65646362     .0123456789abcde
   1aefc:	20000066                                         f.

0001aefe <_ctype_>:
   1aefe:	20202000 20202020 28282020 20282828     .         ((((( 
   1af0e:	20202020 20202020 20202020 20202020                     
   1af1e:	10108820 10101010 10101010 10101010      ...............
   1af2e:	04040410 04040404 10040404 10101010     ................
   1af3e:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1af4e:	01010101 01010101 01010101 10101010     ................
   1af5e:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1af6e:	02020202 02020202 02020202 10101010     ................
   1af7e:	00000020 00000000 00000000 00000000      ...............
	...
   1affe:	666e4900 74696e69 614e0079 0000004e              .Infinity.NaN.

0001b00c <__sf_fake_stderr>:
	...

0001b02c <__sf_fake_stdin>:
	...

0001b04c <__sf_fake_stdout>:
	...

0001b070 <__mprec_bigtens>:
   1b070:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   1b080:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   1b090:	7f73bf3c 75154fdd                       <.s..O.u

0001b098 <__mprec_tens>:
   1b098:	00000000 3ff00000 00000000 40240000     .......?......$@
   1b0a8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   1b0b8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   1b0c8:	00000000 412e8480 00000000 416312d0     .......A......cA
   1b0d8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   1b0e8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   1b0f8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   1b108:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   1b118:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   1b128:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   1b138:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   1b148:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   1b158:	79d99db4 44ea7843                       ...yCx.D

0001b160 <p05.6047>:
   1b160:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   1b170:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
   1b180:	000168c8 00016898 000168aa 000167ec     .h...h...h...g..
   1b190:	000168aa 0001688e 000168aa 000167ec     .h...h...h...g..
   1b1a0:	00016898 00016898 0001688e 000167ec     .h...h...h...g..
   1b1b0:	000167f4 000167f4 000167f4 000168b0     .g...g...g...h..
   1b1c0:	00016898 00016898 0001686c 00016950     .h...h..lh..Pi..
   1b1d0:	0001686c 0001688e 0001686c 00016950     lh...h..lh..Pi..
   1b1e0:	00016898 00016898 0001688e 00016950     .h...h...h..Pi..
   1b1f0:	000167f4 000167f4 000167f4 0001695a     .g...g...g..Zi..
   1b200:	00016af8 00016a48 00016a48 00016a46     .j..Hj..Hj..Fj..
   1b210:	00016aea 00016aea 00016ae0 00016a46     .j...j...j..Fj..
   1b220:	00016aea 00016ae0 00016aea 00016a46     .j...j...j..Fj..
   1b230:	00016af0 00016af0 00016af0 00016b80     .j...j...j...k..
   1b240:	000174c4 000174a6 00017460 0001737e     .t...t..`t..~s..
   1b250:	00017460 00017498 00017460 0001737e     `t...t..`t..~s..
   1b260:	000174a6 000174a6 00017498 0001737e     .t...t...t..~s..
   1b270:	00017376 00017376 00017376 000176dc     vs..vs..vs...v..
   1b280:	00017d24 00017be4 00017be4 00017be0     $}...{...{...{..
   1b290:	00017cfc 00017cfc 00017cee 00017be0     .|...|...|...{..
   1b2a0:	00017cfc 00017cee 00017cfc 00017be0     .|...|...|...{..
   1b2b0:	00017d04 00017d04 00017d04 00017f08     .}...}...}......

0001b2c0 <_init>:
   1b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b2c2:	46c0      	nop			; (mov r8, r8)
   1b2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b2c6:	bc08      	pop	{r3}
   1b2c8:	469e      	mov	lr, r3
   1b2ca:	4770      	bx	lr

0001b2cc <__init_array_start>:
   1b2cc:	000000dd 	.word	0x000000dd

0001b2d0 <_fini>:
   1b2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b2d2:	46c0      	nop			; (mov r8, r8)
   1b2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b2d6:	bc08      	pop	{r3}
   1b2d8:	469e      	mov	lr, r3
   1b2da:	4770      	bx	lr

0001b2dc <__fini_array_start>:
   1b2dc:	000000b5 	.word	0x000000b5
